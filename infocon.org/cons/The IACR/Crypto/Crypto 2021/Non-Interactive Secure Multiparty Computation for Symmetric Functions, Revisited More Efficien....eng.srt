1
00:00:04,720 --> 00:00:07,919
hello my name is rayo ariguchi in this

2
00:00:07,919 --> 00:00:10,480
video i talk about a non-interactive

3
00:00:10,480 --> 00:00:12,559
secure multipatty computation for

4
00:00:12,559 --> 00:00:15,120
symmetric functions revisited more

5
00:00:15,120 --> 00:00:18,080
efficient constructions and extensions

6
00:00:18,080 --> 00:00:21,039
this is the joint work with cosma ohara

7
00:00:21,039 --> 00:00:25,039
shota yamada and koji nuida

8
00:00:25,119 --> 00:00:27,359
first we introduce a non-interactive

9
00:00:27,359 --> 00:00:29,519
multi-party computation

10
00:00:29,519 --> 00:00:32,079
this is a variant of secure computation

11
00:00:32,079 --> 00:00:34,800
that allows each player to send only a

12
00:00:34,800 --> 00:00:36,960
single message depending on their

13
00:00:36,960 --> 00:00:39,840
private inputs

14
00:00:39,840 --> 00:00:42,480
players send their messages to an output

15
00:00:42,480 --> 00:00:45,680
player called evaluator

16
00:00:45,680 --> 00:00:47,920
in this model players do not need to

17
00:00:47,920 --> 00:00:50,320
communicate with each other and so they

18
00:00:50,320 --> 00:00:52,800
can realize a synchronous multipatty

19
00:00:52,800 --> 00:00:55,120
computation which is especially

20
00:00:55,120 --> 00:00:58,160
important in applications to voting

21
00:00:58,160 --> 00:01:01,440
auctions and statistical surveys

22
00:01:01,440 --> 00:01:04,479
we note that a standard mpc protocol

23
00:01:04,479 --> 00:01:06,960
assumes a simultaneous interaction

24
00:01:06,960 --> 00:01:08,640
between players

25
00:01:08,640 --> 00:01:11,680
and so some player may need to wait for

26
00:01:11,680 --> 00:01:13,600
messages from others

27
00:01:13,600 --> 00:01:16,000
that leads to a delay in completion of

28
00:01:16,000 --> 00:01:18,479
protocol

29
00:01:20,000 --> 00:01:21,600
previously it is known that

30
00:01:21,600 --> 00:01:24,479
unconditionally secure nimc protocol for

31
00:01:24,479 --> 00:01:27,840
all the any input functions is possible

32
00:01:27,840 --> 00:01:30,720
however such a protocol must result in

33
00:01:30,720 --> 00:01:32,720
exponentially large communication

34
00:01:32,720 --> 00:01:37,280
complexity because of a non-lower bound

35
00:01:37,280 --> 00:01:40,479
so in this work we focus on a special

36
00:01:40,479 --> 00:01:42,720
class of practical functions with

37
00:01:42,720 --> 00:01:45,360
applications to voting auctions and so

38
00:01:45,360 --> 00:01:46,479
on

39
00:01:46,479 --> 00:01:48,799
we aim at reducing communication

40
00:01:48,799 --> 00:01:51,600
complexity of nimc protocols for those

41
00:01:51,600 --> 00:01:55,320
specific functions

42
00:01:55,439 --> 00:01:58,560
here we summarize our contributions

43
00:01:58,560 --> 00:02:01,759
first we propose an efficient nimc

44
00:02:01,759 --> 00:02:05,200
protocol for symmetric functions o which

45
00:02:05,200 --> 00:02:08,800
can be applied to voting and auctions

46
00:02:08,800 --> 00:02:11,280
our protocol improves the best known

47
00:02:11,280 --> 00:02:13,520
communication complexity for symmetric

48
00:02:13,520 --> 00:02:15,680
functions

49
00:02:15,680 --> 00:02:19,120
we also propose a efficient nmc protocol

50
00:02:19,120 --> 00:02:21,360
for linear classifiers

51
00:02:21,360 --> 00:02:23,920
they perform a classification based on a

52
00:02:23,920 --> 00:02:26,800
weighted sum of n inputs

53
00:02:26,800 --> 00:02:29,599
they include support vector machines and

54
00:02:29,599 --> 00:02:32,000
logistic regression

55
00:02:32,000 --> 00:02:34,480
our protocol is the first one

56
00:02:34,480 --> 00:02:36,959
tailored to linear classifiers other

57
00:02:36,959 --> 00:02:39,200
than the general but inefficient

58
00:02:39,200 --> 00:02:42,640
construction for all the functions

59
00:02:42,640 --> 00:02:45,120
in addition we revisit a previously

60
00:02:45,120 --> 00:02:48,840
known technique to strengthen privacy of

61
00:02:48,840 --> 00:02:52,160
nimpc it's an important technique for an

62
00:02:52,160 --> 00:02:55,040
impc and actually we use it

63
00:02:55,040 --> 00:02:58,879
in the above efficiency improvement part

64
00:02:58,879 --> 00:03:01,440
however we reveal that there's a

65
00:03:01,440 --> 00:03:04,000
protocol used as a building block does

66
00:03:04,000 --> 00:03:06,640
not satisfy the security requirements

67
00:03:06,640 --> 00:03:09,200
and so their technique is not secure

68
00:03:09,200 --> 00:03:10,959
either

69
00:03:10,959 --> 00:03:14,000
in this work we also fix that security

70
00:03:14,000 --> 00:03:16,159
issue without increasing their

71
00:03:16,159 --> 00:03:18,480
communication complexity

72
00:03:18,480 --> 00:03:21,120
and in summary their statements still

73
00:03:21,120 --> 00:03:23,599
hold true but it is necessary to replace

74
00:03:23,599 --> 00:03:27,120
their building block with hours

75
00:03:27,120 --> 00:03:28,400
in this talk

76
00:03:28,400 --> 00:03:30,080
due to the time constraint

77
00:03:30,080 --> 00:03:32,879
we only explain our nmpc protocols to

78
00:03:32,879 --> 00:03:35,519
symmetric functions and our security

79
00:03:35,519 --> 00:03:38,080
analysis

80
00:03:38,799 --> 00:03:39,920
first

81
00:03:39,920 --> 00:03:45,559
we provide the definition of an impc

82
00:03:46,319 --> 00:03:48,879
we consider a class of n input functions

83
00:03:48,879 --> 00:03:49,920
h

84
00:03:49,920 --> 00:03:52,640
an npc for h consists of three

85
00:03:52,640 --> 00:03:54,000
algorithms

86
00:03:54,000 --> 00:03:56,560
first a randomness generation algorithm

87
00:03:56,560 --> 00:03:59,519
takes as input a function to compute and

88
00:03:59,519 --> 00:04:02,400
outputs a correlated randomness

89
00:04:02,400 --> 00:04:05,439
each piece ri is sent to the ith player

90
00:04:05,439 --> 00:04:07,920
in the setup

91
00:04:07,920 --> 00:04:10,640
then each player computes an encryption

92
00:04:10,640 --> 00:04:13,040
function on their private input and

93
00:04:13,040 --> 00:04:14,879
their randomness

94
00:04:14,879 --> 00:04:17,358
then he sends a message mi a to the

95
00:04:17,358 --> 00:04:20,000
valuator

96
00:04:20,160 --> 00:04:21,918
finally the evaluator computes a

97
00:04:21,918 --> 00:04:26,320
decryption function on all the messages

98
00:04:26,960 --> 00:04:29,520
the efficiency of nmpc protocols is

99
00:04:29,520 --> 00:04:32,080
measured by a communication complexity

100
00:04:32,080 --> 00:04:34,720
which is defined as a maximum number of

101
00:04:34,720 --> 00:04:39,840
bits to send randomness and messages

102
00:04:40,639 --> 00:04:42,880
then the correctness of nipc is

103
00:04:42,880 --> 00:04:44,479
straightforward

104
00:04:44,479 --> 00:04:47,600
specifically for any function h and any

105
00:04:47,600 --> 00:04:50,800
n inputs we require that an output of

106
00:04:50,800 --> 00:04:53,840
the evaluator is equal to the output of

107
00:04:53,840 --> 00:04:57,638
the function h

108
00:04:58,320 --> 00:05:01,039
the privacy requirement of nmpc is more

109
00:05:01,039 --> 00:05:02,560
involved and

110
00:05:02,560 --> 00:05:05,360
is a bit different from that of standard

111
00:05:05,360 --> 00:05:07,440
multiparty computation

112
00:05:07,440 --> 00:05:09,919
specifically we assume an adversary

113
00:05:09,919 --> 00:05:12,720
corrupting a subset of players c

114
00:05:12,720 --> 00:05:15,440
as well as the evaluator

115
00:05:15,440 --> 00:05:18,400
then the adversary obtains a randomness

116
00:05:18,400 --> 00:05:21,759
of corrupted players and messages from

117
00:05:21,759 --> 00:05:24,000
honest players

118
00:05:24,000 --> 00:05:26,560
using that information the adversary can

119
00:05:26,560 --> 00:05:30,000
locally compute a function h on all the

120
00:05:30,000 --> 00:05:33,280
possible inputs of corrupted players

121
00:05:33,280 --> 00:05:36,080
combined with the fixed inputs of honest

122
00:05:36,080 --> 00:05:37,680
players

123
00:05:37,680 --> 00:05:39,759
this kind of information leakage cannot

124
00:05:39,759 --> 00:05:42,080
be avoided in nimpc

125
00:05:42,080 --> 00:05:44,800
and so require that a protocol leaks

126
00:05:44,800 --> 00:05:47,680
nothing beyond that information which is

127
00:05:47,680 --> 00:05:50,800
why we call that a privacy requirement a

128
00:05:50,800 --> 00:05:54,400
best possible security

129
00:05:54,720 --> 00:05:57,520
formally we define a residual function

130
00:05:57,520 --> 00:05:59,360
whose input variables are those

131
00:05:59,360 --> 00:06:01,840
corresponding to crafted players and

132
00:06:01,840 --> 00:06:04,240
whose output is the value of h are

133
00:06:04,240 --> 00:06:07,360
fixing the inputs of honest players

134
00:06:07,360 --> 00:06:09,919
we say that an nimc protocol is zero

135
00:06:09,919 --> 00:06:12,639
best if it leaks nothing beyond the

136
00:06:12,639 --> 00:06:15,759
residual function

137
00:06:15,919 --> 00:06:19,039
formally there exists a simulator

138
00:06:19,039 --> 00:06:21,280
that perfectly simulates the adversary's

139
00:06:21,280 --> 00:06:24,160
view only from the oracle access to the

140
00:06:24,160 --> 00:06:27,199
residual function

141
00:06:27,600 --> 00:06:29,680
we simply say that a protocol is still

142
00:06:29,680 --> 00:06:33,120
robust if it is c robust for all subsets

143
00:06:33,120 --> 00:06:35,039
of size atmosphere

144
00:06:35,039 --> 00:06:37,600
and we also say that protocol is fully

145
00:06:37,600 --> 00:06:40,319
robust if it is an robust

146
00:06:40,319 --> 00:06:42,800
so through robustness is the strongest

147
00:06:42,800 --> 00:06:47,160
privacy requirement of ninbc

148
00:06:48,080 --> 00:06:50,720
next we provide the

149
00:06:50,720 --> 00:06:53,120
our nmpc protocols for symmetric

150
00:06:53,120 --> 00:06:55,360
functions

151
00:06:55,360 --> 00:06:57,599
before we give the formal definition of

152
00:06:57,599 --> 00:07:00,319
symmetric functions we introduce a

153
00:07:00,319 --> 00:07:02,240
generalized notion of the valium

154
00:07:02,240 --> 00:07:04,000
programs

155
00:07:04,000 --> 00:07:07,599
let g be in a variant group and s1 to sn

156
00:07:07,599 --> 00:07:09,680
us be subsets of g

157
00:07:09,680 --> 00:07:12,800
and fbn are literally function from a g

158
00:07:12,800 --> 00:07:14,800
to a zero one

159
00:07:14,800 --> 00:07:17,919
then an abellium program hf takes as

160
00:07:17,919 --> 00:07:18,880
input

161
00:07:18,880 --> 00:07:22,400
m tuples from the product set of s1 to

162
00:07:22,400 --> 00:07:23,520
sn

163
00:07:23,520 --> 00:07:25,919
and it computes the function f on the

164
00:07:25,919 --> 00:07:28,400
sum of n inputs

165
00:07:28,400 --> 00:07:30,400
then we define the class of rebellion

166
00:07:30,400 --> 00:07:32,800
programs as collections are as a

167
00:07:32,800 --> 00:07:35,919
collection of all hf uh each associated

168
00:07:35,919 --> 00:07:36,960
with

169
00:07:36,960 --> 00:07:39,360
function f

170
00:07:39,360 --> 00:07:41,360
and we note that the class of abelian

171
00:07:41,360 --> 00:07:43,919
programs include uh all symmetric

172
00:07:43,919 --> 00:07:45,280
functions

173
00:07:45,280 --> 00:07:48,720
indeed let h be any symmetric function

174
00:07:48,720 --> 00:07:49,840
that is

175
00:07:49,840 --> 00:07:52,800
a value of h does not change even if we

176
00:07:52,800 --> 00:07:56,639
arbitrarily permute the input variables

177
00:07:56,639 --> 00:07:59,680
we can observe that uh h of x depends

178
00:07:59,680 --> 00:08:02,800
only on the vector v x rather than x

179
00:08:02,800 --> 00:08:04,400
itself

180
00:08:04,400 --> 00:08:07,440
where each entry v j counts how many

181
00:08:07,440 --> 00:08:10,960
inputs are equal to j

182
00:08:10,960 --> 00:08:14,400
then let g be the direct product of d

183
00:08:14,400 --> 00:08:17,440
cyclic groups of size n plus one

184
00:08:17,440 --> 00:08:19,199
and s1 to sn

185
00:08:19,199 --> 00:08:22,879
be all the set of all unit vectors

186
00:08:22,879 --> 00:08:25,759
and because of that property of h there

187
00:08:25,759 --> 00:08:29,120
exists a function f such that its value

188
00:08:29,120 --> 00:08:32,880
on v x is equal to h of x for all inputs

189
00:08:32,880 --> 00:08:34,320
x

190
00:08:34,320 --> 00:08:37,120
from that observation h can be viewed as

191
00:08:37,120 --> 00:08:39,919
an abelian program associated with that

192
00:08:39,919 --> 00:08:41,440
function f

193
00:08:41,440 --> 00:08:44,000
in summary the class of abelian programs

194
00:08:44,000 --> 00:08:46,880
includes uh some old symmetric functions

195
00:08:46,880 --> 00:08:49,839
and so from now on we construct nnpc

196
00:08:49,839 --> 00:08:52,320
protocols for abelian programs rather

197
00:08:52,320 --> 00:08:55,839
than for symmetric functions

198
00:08:57,040 --> 00:08:59,760
before going into the details we make an

199
00:08:59,760 --> 00:09:02,000
important remark on the definition of

200
00:09:02,000 --> 00:09:03,920
abelian programs

201
00:09:03,920 --> 00:09:05,680
in the definition

202
00:09:05,680 --> 00:09:09,839
we specify input domains s1 tsn

203
00:09:09,839 --> 00:09:11,360
this is because

204
00:09:11,360 --> 00:09:14,000
how to set input domains affects how

205
00:09:14,000 --> 00:09:16,480
much information leaks from the residual

206
00:09:16,480 --> 00:09:19,600
functions which is directly related to

207
00:09:19,600 --> 00:09:23,680
the privacy requirement of an mpc

208
00:09:23,680 --> 00:09:25,680
for example i consider an abelian

209
00:09:25,680 --> 00:09:29,120
program hf and it's a residual function

210
00:09:29,120 --> 00:09:33,040
when the nth input player is corrupted

211
00:09:33,040 --> 00:09:34,080
then

212
00:09:34,080 --> 00:09:37,680
if the input domain of the nth player sm

213
00:09:37,680 --> 00:09:38,959
is equal to g

214
00:09:38,959 --> 00:09:41,760
uh that of the residual function is also

215
00:09:41,760 --> 00:09:42,800
g

216
00:09:42,800 --> 00:09:45,040
that means an adversary is allowed to

217
00:09:45,040 --> 00:09:49,680
compute hf on all the elements from g

218
00:09:49,680 --> 00:09:52,399
combined with uh the fixed inputs of

219
00:09:52,399 --> 00:09:54,959
honest players

220
00:09:54,959 --> 00:09:58,959
however if sn is a strict subset of g

221
00:09:58,959 --> 00:10:01,519
the adversary is only allowed to compute

222
00:10:01,519 --> 00:10:03,360
hf on

223
00:10:03,360 --> 00:10:06,640
on elements from the subset

224
00:10:06,640 --> 00:10:08,160
in summary

225
00:10:08,160 --> 00:10:11,040
nmc protocols for rebellion programs

226
00:10:11,040 --> 00:10:13,680
whose input domains are all g is allowed

227
00:10:13,680 --> 00:10:16,560
to leak more information than nimby

228
00:10:16,560 --> 00:10:18,640
silver rebellion programs whose input

229
00:10:18,640 --> 00:10:21,839
domains are strict subsets we must

230
00:10:21,839 --> 00:10:24,000
distinguish two cases because the

231
00:10:24,000 --> 00:10:25,920
corresponding privacy requirements are

232
00:10:25,920 --> 00:10:28,959
completely different

233
00:10:30,959 --> 00:10:33,519
now we show the details of our result

234
00:10:33,519 --> 00:10:36,480
first we consider the case uh where

235
00:10:36,480 --> 00:10:38,959
input domains are all g

236
00:10:38,959 --> 00:10:42,160
then we propose a fully robust nimpc

237
00:10:42,160 --> 00:10:43,920
protocol uh whose communication

238
00:10:43,920 --> 00:10:47,600
complexity improve the best known result

239
00:10:47,600 --> 00:10:50,240
an important point is that because of

240
00:10:50,240 --> 00:10:51,360
the

241
00:10:51,360 --> 00:10:53,680
known lower bound and the complexity

242
00:10:53,680 --> 00:10:56,079
cannot be sublinear

243
00:10:56,079 --> 00:10:59,279
in the size of g

244
00:10:59,279 --> 00:11:04,240
so the exponent of our result is minimum

245
00:11:04,240 --> 00:11:06,320
we also consider the case where input

246
00:11:06,320 --> 00:11:08,959
domains are strict subsets

247
00:11:08,959 --> 00:11:12,320
we propose a t robust nmc protocol

248
00:11:12,320 --> 00:11:14,320
whose communication complexity again

249
00:11:14,320 --> 00:11:17,279
improves the best known results in terms

250
00:11:17,279 --> 00:11:20,800
of the size of g

251
00:11:22,959 --> 00:11:24,240
and

252
00:11:24,240 --> 00:11:27,279
now we explain our npc protocols um

253
00:11:27,279 --> 00:11:28,880
first we deal with

254
00:11:28,880 --> 00:11:32,480
a case where input domains are g

255
00:11:32,480 --> 00:11:35,360
our high level idea is extending the

256
00:11:35,360 --> 00:11:37,519
another previous protocol that is

257
00:11:37,519 --> 00:11:39,760
tailored to the cyclic group

258
00:11:39,760 --> 00:11:41,040
into a

259
00:11:41,040 --> 00:11:43,200
a general rebellion group

260
00:11:43,200 --> 00:11:44,880
so the communication complexity of our

261
00:11:44,880 --> 00:11:47,760
protocol is also similar to that of the

262
00:11:47,760 --> 00:11:50,800
previous protocol

263
00:11:51,839 --> 00:11:54,320
i will briefly recall that protocol for

264
00:11:54,320 --> 00:11:56,880
a symmetric function

265
00:11:56,880 --> 00:11:59,839
inputs are n group elements

266
00:11:59,839 --> 00:12:00,959
and

267
00:12:00,959 --> 00:12:03,440
we want to compute a function f on the

268
00:12:03,440 --> 00:12:06,399
sum of the n elements

269
00:12:06,399 --> 00:12:09,600
instead of directly dealing with a group

270
00:12:09,600 --> 00:12:13,920
elements they express each element g

271
00:12:13,920 --> 00:12:17,040
as the g iteration of a special map

272
00:12:17,040 --> 00:12:18,399
sigma

273
00:12:18,399 --> 00:12:22,399
which shifts elements by one

274
00:12:22,399 --> 00:12:23,200
then

275
00:12:23,200 --> 00:12:25,839
the protocol proceeds as follows

276
00:12:25,839 --> 00:12:26,959
um

277
00:12:26,959 --> 00:12:30,399
first any inputs are expressed by uh the

278
00:12:30,399 --> 00:12:33,120
n corresponding maps

279
00:12:33,120 --> 00:12:35,360
and the protocol

280
00:12:35,360 --> 00:12:37,440
securely performs a

281
00:12:37,440 --> 00:12:40,320
composition of these maps

282
00:12:40,320 --> 00:12:42,320
because of the number of iterations is

283
00:12:42,320 --> 00:12:45,200
now the sum of n inputs

284
00:12:45,200 --> 00:12:47,600
it is possible to compute a

285
00:12:47,600 --> 00:12:51,120
value of f on the sum

286
00:12:51,120 --> 00:12:54,720
an important part of this protocol uh is

287
00:12:54,720 --> 00:12:57,519
to securely perform the composition of

288
00:12:57,519 --> 00:12:59,200
these maps

289
00:12:59,200 --> 00:13:02,240
but it can also be done by killian's

290
00:13:02,240 --> 00:13:04,560
randomization technique

291
00:13:04,560 --> 00:13:08,560
it uses a n minus 1 pairs of a random

292
00:13:08,560 --> 00:13:11,120
number and its inverse

293
00:13:11,120 --> 00:13:12,639
um each

294
00:13:12,639 --> 00:13:16,160
input r is masked with these

295
00:13:16,160 --> 00:13:18,399
random numbers

296
00:13:18,399 --> 00:13:20,720
but if they are multiplied and the

297
00:13:20,720 --> 00:13:24,959
desired composition can be obtained

298
00:13:27,040 --> 00:13:30,240
our protocol roughly uh follows that

299
00:13:30,240 --> 00:13:32,240
previous for framework

300
00:13:32,240 --> 00:13:34,720
we have to generate the representation

301
00:13:34,720 --> 00:13:37,519
of the cyclic group to a general adelian

302
00:13:37,519 --> 00:13:38,639
group

303
00:13:38,639 --> 00:13:40,480
for that we use the regular

304
00:13:40,480 --> 00:13:43,519
representation of g

305
00:13:43,519 --> 00:13:47,440
it expresses each element g by a map

306
00:13:47,440 --> 00:13:52,160
taughty which shifts elements by g

307
00:13:52,160 --> 00:13:54,199
an important feature of this

308
00:13:54,199 --> 00:13:58,079
representation is um composition of n

309
00:13:58,079 --> 00:14:00,320
representations is equal to a

310
00:14:00,320 --> 00:14:04,240
representation for the sum of n elements

311
00:14:04,240 --> 00:14:07,120
using that property our protocol

312
00:14:07,120 --> 00:14:09,040
proceeds as follows

313
00:14:09,040 --> 00:14:10,320
in the setup

314
00:14:10,320 --> 00:14:12,800
n minus 1 random permutations are

315
00:14:12,800 --> 00:14:15,120
generated

316
00:14:15,120 --> 00:14:19,079
then each player is given a couple of

317
00:14:19,079 --> 00:14:21,120
representations uh

318
00:14:21,120 --> 00:14:24,959
masked with these permutations

319
00:14:24,959 --> 00:14:27,199
then players

320
00:14:27,199 --> 00:14:28,560
choose

321
00:14:28,560 --> 00:14:30,240
a mask masked representation

322
00:14:30,240 --> 00:14:33,360
corresponding to their input and sends

323
00:14:33,360 --> 00:14:35,600
it as a message

324
00:14:35,600 --> 00:14:37,680
finally an evaluator

325
00:14:37,680 --> 00:14:40,720
performs a composition of these maps

326
00:14:40,720 --> 00:14:43,440
because of that property

327
00:14:43,440 --> 00:14:48,160
he can obtain a value of f on the sum

328
00:14:48,160 --> 00:14:49,120
however

329
00:14:49,120 --> 00:14:52,480
this protocol is not final

330
00:14:52,480 --> 00:14:55,120
the complexity is quadratic in the size

331
00:14:55,120 --> 00:14:56,079
of g

332
00:14:56,079 --> 00:14:57,199
because

333
00:14:57,199 --> 00:15:00,959
we need to send

334
00:15:01,040 --> 00:15:03,760
masked representations for all group

335
00:15:03,760 --> 00:15:06,240
elements

336
00:15:06,720 --> 00:15:08,000
however

337
00:15:08,000 --> 00:15:10,720
our important observation is that

338
00:15:10,720 --> 00:15:12,639
it is sufficient to send only

339
00:15:12,639 --> 00:15:15,199
representations for generators

340
00:15:15,199 --> 00:15:16,399
because

341
00:15:16,399 --> 00:15:19,480
players can locally compute a mass

342
00:15:19,480 --> 00:15:22,639
representation corresponding to their

343
00:15:22,639 --> 00:15:25,040
input from them

344
00:15:25,040 --> 00:15:27,920
furthermore the number of generators is

345
00:15:27,920 --> 00:15:32,000
also bounded by the log of the size of g

346
00:15:32,000 --> 00:15:34,959
uh due to the fundamental theorem of

347
00:15:34,959 --> 00:15:36,959
finite rebellion groups

348
00:15:36,959 --> 00:15:41,638
so we can achieve the desired complexity

349
00:15:42,800 --> 00:15:46,000
now we explain our protocols uh for

350
00:15:46,000 --> 00:15:48,160
abelian programs or where input domains

351
00:15:48,160 --> 00:15:50,399
are strict subsets

352
00:15:50,399 --> 00:15:52,959
we construct it based on our formal

353
00:15:52,959 --> 00:15:55,440
protocol for abellian programs or where

354
00:15:55,440 --> 00:15:58,160
input domains are all g

355
00:15:58,160 --> 00:16:00,880
to restrict input domains we use a

356
00:16:00,880 --> 00:16:03,360
previously known technique to strengthen

357
00:16:03,360 --> 00:16:06,160
a privacy of an impc

358
00:16:06,160 --> 00:16:09,199
and it transforms any zero best nmc

359
00:16:09,199 --> 00:16:11,440
protocol into a two robust one

360
00:16:11,440 --> 00:16:14,079
while it involves some overhead in

361
00:16:14,079 --> 00:16:17,519
communication complexity

362
00:16:17,680 --> 00:16:20,079
uh specifically that transformation

363
00:16:20,079 --> 00:16:23,440
technique transforms any zero best nimc

364
00:16:23,440 --> 00:16:26,560
protocol into a t robust one for the

365
00:16:26,560 --> 00:16:28,720
same class of functions

366
00:16:28,720 --> 00:16:32,880
we use it to restrict input domains

367
00:16:32,880 --> 00:16:35,040
consider a class of functions whose

368
00:16:35,040 --> 00:16:38,000
input domains are all set x

369
00:16:38,000 --> 00:16:39,680
and also consider

370
00:16:39,680 --> 00:16:43,360
its restriction to subsets

371
00:16:43,360 --> 00:16:46,079
suppose that we are given a fully robust

372
00:16:46,079 --> 00:16:48,720
nimc protocol for functions with input

373
00:16:48,720 --> 00:16:50,800
domains x

374
00:16:50,800 --> 00:16:53,680
clearly it's also a zero robust nmc

375
00:16:53,680 --> 00:16:56,480
protocol for the same class of functions

376
00:16:56,480 --> 00:16:59,440
because full robustness is a stronger

377
00:16:59,440 --> 00:17:03,759
security notion than zero business

378
00:17:03,759 --> 00:17:06,400
then our important observation is that

379
00:17:06,400 --> 00:17:10,000
at zero fastness still holds even if

380
00:17:10,000 --> 00:17:13,199
input domains are strict subsets

381
00:17:13,199 --> 00:17:15,839
the reason is a bit complicated but

382
00:17:15,839 --> 00:17:18,240
roughly speaking the notion of zero

383
00:17:18,240 --> 00:17:21,280
robustness does not involve the residual

384
00:17:21,280 --> 00:17:22,400
functions

385
00:17:22,400 --> 00:17:25,119
and so it's not affected by what input

386
00:17:25,119 --> 00:17:27,918
domains are

387
00:17:28,559 --> 00:17:32,160
finally we apply their transformation

388
00:17:32,160 --> 00:17:35,440
and obtain a t robust namc protocol for

389
00:17:35,440 --> 00:17:38,160
those functions

390
00:17:38,160 --> 00:17:40,480
it involves some overhead in

391
00:17:40,480 --> 00:17:43,840
communication complexity

392
00:17:44,960 --> 00:17:47,760
now we can apply our previous technique

393
00:17:47,760 --> 00:17:51,200
to abelian programs

394
00:17:51,280 --> 00:17:53,039
the the overhead in communication

395
00:17:53,039 --> 00:17:56,160
complexity comes from the last step of

396
00:17:56,160 --> 00:18:00,039
applying their transformation

397
00:18:02,000 --> 00:18:04,640
so far we have used the transformation

398
00:18:04,640 --> 00:18:06,720
proposed by benhamd

399
00:18:06,720 --> 00:18:09,039
in this work we revisited and revealed

400
00:18:09,039 --> 00:18:11,679
that their original transformation has a

401
00:18:11,679 --> 00:18:13,440
security issue

402
00:18:13,440 --> 00:18:15,919
in the following we give a brief summary

403
00:18:15,919 --> 00:18:19,520
of our security analysis

404
00:18:20,160 --> 00:18:23,039
again their transformation technique

405
00:18:23,039 --> 00:18:26,320
transforms any zero-based nmc protocol

406
00:18:26,320 --> 00:18:28,480
into two robust one

407
00:18:28,480 --> 00:18:31,120
as a building block their transformation

408
00:18:31,120 --> 00:18:34,240
needs a fully robust nimc protocol for

409
00:18:34,240 --> 00:18:36,480
what they call outputting message

410
00:18:36,480 --> 00:18:38,240
functions

411
00:18:38,240 --> 00:18:41,679
let a be a matrix over a finite field

412
00:18:41,679 --> 00:18:46,559
you be a vector and a m be a scalar

413
00:18:46,559 --> 00:18:48,160
an outputting message function

414
00:18:48,160 --> 00:18:51,440
associated with them outputs a message m

415
00:18:51,440 --> 00:18:55,039
exactly when any inputs satisfy a linear

416
00:18:55,039 --> 00:18:57,200
equation

417
00:18:57,200 --> 00:19:00,160
actually they propose a nimc protocol

418
00:19:00,160 --> 00:19:02,799
for those functions however

419
00:19:02,799 --> 00:19:04,880
we reveal that their protocol does not

420
00:19:04,880 --> 00:19:07,919
satisfy even one robustness

421
00:19:07,919 --> 00:19:10,000
and so their transformation is not

422
00:19:10,000 --> 00:19:12,880
secure either

423
00:19:14,640 --> 00:19:17,600
in this work we also propose a technique

424
00:19:17,600 --> 00:19:18,320
to

425
00:19:18,320 --> 00:19:20,320
fix their security issue without

426
00:19:20,320 --> 00:19:22,840
increasing their communication

427
00:19:22,840 --> 00:19:25,919
complexity in summary their statements

428
00:19:25,919 --> 00:19:28,240
still hold true but is necessary to

429
00:19:28,240 --> 00:19:32,640
replace their building block with ours

430
00:19:34,240 --> 00:19:36,960
finally we summarize this talk

431
00:19:36,960 --> 00:19:39,840
in this work we propose two kinds of

432
00:19:39,840 --> 00:19:42,720
efficient nmc protocols for practical

433
00:19:42,720 --> 00:19:44,160
functions

434
00:19:44,160 --> 00:19:47,280
the first one is for symmetric functions

435
00:19:47,280 --> 00:19:48,960
and we improve the best known

436
00:19:48,960 --> 00:19:51,039
communication complexity for symmetric

437
00:19:51,039 --> 00:19:53,200
functions

438
00:19:53,200 --> 00:19:57,039
the second one is for linear classifiers

439
00:19:57,039 --> 00:19:59,360
our work is the first proposal other

440
00:19:59,360 --> 00:20:01,520
than the general but inefficient

441
00:20:01,520 --> 00:20:05,440
construction of nimbc protocols

442
00:20:05,679 --> 00:20:08,000
in addition we revisit a previously

443
00:20:08,000 --> 00:20:09,679
known technique to strengthen the

444
00:20:09,679 --> 00:20:13,039
privacy of nimbc

445
00:20:13,039 --> 00:20:16,559
we reveal that their sub-protocol

446
00:20:16,559 --> 00:20:18,320
used as a building block does not

447
00:20:18,320 --> 00:20:21,679
satisfy the security requirements

448
00:20:21,679 --> 00:20:24,400
we also fix their security issue without

449
00:20:24,400 --> 00:20:26,000
increasing their communication

450
00:20:26,000 --> 00:20:28,159
complexity

451
00:20:28,159 --> 00:20:30,720
a possible future work is closing a gap

452
00:20:30,720 --> 00:20:33,200
in communication complexity between our

453
00:20:33,200 --> 00:20:35,520
upper bounds and the best known lower

454
00:20:35,520 --> 00:20:37,600
bounds

455
00:20:37,600 --> 00:20:39,280
this is the end of my talk

456
00:20:39,280 --> 00:20:42,840
thank you for listening

