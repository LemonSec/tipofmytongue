1
00:00:01,120 --> 00:00:03,679
hi everyone i'm sophia and i'm going to

2
00:00:03,679 --> 00:00:05,680
be talking about yoso

3
00:00:05,680 --> 00:00:09,200
yo so is joint work with craig shai hugo

4
00:00:09,200 --> 00:00:12,000
and tal at algorand and with jesper and

5
00:00:12,000 --> 00:00:13,759
bernardo at orcas university in the

6
00:00:13,759 --> 00:00:16,960
concordian blockchain research center

7
00:00:16,960 --> 00:00:20,080
yoso stands for you only speak once

8
00:00:20,080 --> 00:00:22,800
and as the name suggests it describes a

9
00:00:22,800 --> 00:00:25,039
class of protocols where no participant

10
00:00:25,039 --> 00:00:27,439
needs to speak more than once

11
00:00:27,439 --> 00:00:29,199
this kind of protocol is particularly

12
00:00:29,199 --> 00:00:31,359
useful when dealing with a strong

13
00:00:31,359 --> 00:00:33,120
adaptive adversary

14
00:00:33,120 --> 00:00:35,840
who can kill or corrupt a party as soon

15
00:00:35,840 --> 00:00:37,760
as it speaks

16
00:00:37,760 --> 00:00:40,879
in this work we make two contributions

17
00:00:40,879 --> 00:00:43,600
we define a formal yoso model

18
00:00:43,600 --> 00:00:46,079
and we show two npc protocols with

19
00:00:46,079 --> 00:00:48,079
guaranteed output delivery within that

20
00:00:48,079 --> 00:00:50,399
model

21
00:00:50,480 --> 00:00:52,320
before getting into our contributions

22
00:00:52,320 --> 00:00:53,760
i'd like to give more motivation for the

23
00:00:53,760 --> 00:00:56,399
yoso model in particular in the context

24
00:00:56,399 --> 00:00:58,879
of npc

25
00:00:58,879 --> 00:01:01,039
let's start with the usual npc scenario

26
00:01:01,039 --> 00:01:04,080
so imagine that alice bob and charlie

27
00:01:04,080 --> 00:01:06,240
want to compute a joint function f of

28
00:01:06,240 --> 00:01:09,920
their secrets x1 x2 and x3

29
00:01:09,920 --> 00:01:11,360
but the problem is none of them are

30
00:01:11,360 --> 00:01:13,040
willing to reveal anything about their

31
00:01:13,040 --> 00:01:15,040
secrets except for

32
00:01:15,040 --> 00:01:17,040
the function output

33
00:01:17,040 --> 00:01:19,360
so one approach is for the three of them

34
00:01:19,360 --> 00:01:22,000
to find someone that they all trust

35
00:01:22,000 --> 00:01:24,159
and send their inputs directly to that

36
00:01:24,159 --> 00:01:25,520
trusted party

37
00:01:25,520 --> 00:01:27,600
and then have that trusted party publish

38
00:01:27,600 --> 00:01:30,240
the function output y

39
00:01:30,240 --> 00:01:32,720
but trust is hard to come by and it

40
00:01:32,720 --> 00:01:35,360
could be that there isn't any one party

41
00:01:35,360 --> 00:01:38,240
that all three of alice bob and charlie

42
00:01:38,240 --> 00:01:41,360
are comfortable relying on

43
00:01:41,360 --> 00:01:44,320
so using secure multi-party computation

44
00:01:44,320 --> 00:01:46,399
or npc for short

45
00:01:46,399 --> 00:01:48,640
alice bob and charlie can instead

46
00:01:48,640 --> 00:01:51,040
outsource the computation of f to

47
00:01:51,040 --> 00:01:53,280
several parties

48
00:01:53,280 --> 00:01:55,040
they don't have to trust any specific

49
00:01:55,040 --> 00:01:56,320
party

50
00:01:56,320 --> 00:01:58,880
each one of alice bob and charlie only

51
00:01:58,880 --> 00:02:01,280
needs to trust that some of these

52
00:02:01,280 --> 00:02:03,040
parties are behaving honestly without

53
00:02:03,040 --> 00:02:06,240
necessarily knowing which ones

54
00:02:06,240 --> 00:02:09,119
so in other words uh they need to trust

55
00:02:09,119 --> 00:02:11,440
that if an adversary is controlling some

56
00:02:11,440 --> 00:02:13,360
of these parties maybe by having

57
00:02:13,360 --> 00:02:15,840
installed malware on the machines

58
00:02:15,840 --> 00:02:18,480
that adversary was only able to corrupt

59
00:02:18,480 --> 00:02:23,520
up to some threshold team of the parties

60
00:02:23,520 --> 00:02:26,640
so then during the mpc protocol

61
00:02:26,640 --> 00:02:29,280
these parties talk to one another and as

62
00:02:29,280 --> 00:02:31,440
a result of that conversation

63
00:02:31,440 --> 00:02:34,840
alice bob and charlie learn the function

64
00:02:34,840 --> 00:02:37,360
output the first guarantee we want from

65
00:02:37,360 --> 00:02:39,680
npc is that as long as the adversary

66
00:02:39,680 --> 00:02:41,599
corrupted fewer than the thresholds t of

67
00:02:41,599 --> 00:02:42,800
the parties

68
00:02:42,800 --> 00:02:44,160
alice bob and charlie learned the

69
00:02:44,160 --> 00:02:45,680
correct why

70
00:02:45,680 --> 00:02:47,519
so the adversary shouldn't be able to

71
00:02:47,519 --> 00:02:49,440
trick alice bob and charlie into

72
00:02:49,440 --> 00:02:51,680
accepting the wrong output

73
00:02:51,680 --> 00:02:54,000
but even more than that we demand the

74
00:02:54,000 --> 00:02:56,239
strongest mpc guarantee

75
00:02:56,239 --> 00:02:58,879
which is guaranteed output delivery

76
00:02:58,879 --> 00:03:00,879
so the adversary shouldn't even be able

77
00:03:00,879 --> 00:03:02,959
to carry out a denial of service attack

78
00:03:02,959 --> 00:03:05,040
and prevent atlas bob and charlie from

79
00:03:05,040 --> 00:03:07,440
getting anything

80
00:03:07,440 --> 00:03:10,239
and of course we also want privacy

81
00:03:10,239 --> 00:03:12,400
so we want to be sure that the adversary

82
00:03:12,400 --> 00:03:14,560
and the machines she controls

83
00:03:14,560 --> 00:03:17,360
don't learn anything else about

84
00:03:17,360 --> 00:03:20,080
x1 x2 and x3

85
00:03:20,080 --> 00:03:22,080
okay but now let's come back to our

86
00:03:22,080 --> 00:03:24,239
assumption that the adversary corrupted

87
00:03:24,239 --> 00:03:26,480
fewer than the threshold t of the

88
00:03:26,480 --> 00:03:28,640
parties

89
00:03:28,640 --> 00:03:30,799
if we only have a couple parties and we

90
00:03:30,799 --> 00:03:33,280
have a very powerful adversary

91
00:03:33,280 --> 00:03:35,920
maybe it's unrealistic to assume that

92
00:03:35,920 --> 00:03:38,720
she can't corrupt more of the parties

93
00:03:38,720 --> 00:03:40,720
and if that happens we don't get any of

94
00:03:40,720 --> 00:03:42,640
our guarantees we don't get uh

95
00:03:42,640 --> 00:03:47,159
guaranteed output delivery or privacy

96
00:03:47,440 --> 00:03:49,760
so however many parties we think our

97
00:03:49,760 --> 00:03:52,080
powerful adversary can corrupt

98
00:03:52,080 --> 00:03:54,080
we need to involve enough parties in our

99
00:03:54,080 --> 00:03:56,560
computation to make sure that our

100
00:03:56,560 --> 00:03:58,159
threshold t

101
00:03:58,159 --> 00:04:00,159
is higher than the adversary's

102
00:04:00,159 --> 00:04:02,480
corruption power

103
00:04:02,480 --> 00:04:04,159
if we think that the adversary can

104
00:04:04,159 --> 00:04:06,159
corrupt up to a million parties and

105
00:04:06,159 --> 00:04:08,239
we're running an mpc

106
00:04:08,239 --> 00:04:10,319
where the corruption threshold t is

107
00:04:10,319 --> 00:04:12,799
equal to half of the participants

108
00:04:12,799 --> 00:04:14,560
we need to make sure that we have at

109
00:04:14,560 --> 00:04:18,399
least two million participating machines

110
00:04:18,399 --> 00:04:20,798
but once we involve millions of parties

111
00:04:20,798 --> 00:04:24,160
maybe by outsourcing to blockchain

112
00:04:24,160 --> 00:04:27,440
we run into an efficiency problem

113
00:04:27,440 --> 00:04:30,720
almost all mpc protocols require that

114
00:04:30,720 --> 00:04:32,880
all participants talk to all of the

115
00:04:32,880 --> 00:04:34,960
other participants

116
00:04:34,960 --> 00:04:37,280
and when there are just a couple of

117
00:04:37,280 --> 00:04:39,759
participants this isn't so bad

118
00:04:39,759 --> 00:04:42,560
but when we have millions of parties

119
00:04:42,560 --> 00:04:44,560
this gets to be prohibitively

120
00:04:44,560 --> 00:04:46,960
inefficient

121
00:04:46,960 --> 00:04:50,000
and in fact the goal we want to set for

122
00:04:50,000 --> 00:04:51,360
ourselves to avoid this kind of

123
00:04:51,360 --> 00:04:52,880
inefficiency

124
00:04:52,880 --> 00:04:55,040
is that the total communication of our

125
00:04:55,040 --> 00:04:56,400
protocol

126
00:04:56,400 --> 00:04:59,520
be sublinear in the number n of

127
00:04:59,520 --> 00:05:02,320
participants

128
00:05:02,560 --> 00:05:05,440
so this means that in a given round of

129
00:05:05,440 --> 00:05:06,880
the computation

130
00:05:06,880 --> 00:05:09,360
only a small set of parties which we'll

131
00:05:09,360 --> 00:05:10,960
call a committee

132
00:05:10,960 --> 00:05:12,800
should say anything

133
00:05:12,800 --> 00:05:14,800
and in this picture our speaking

134
00:05:14,800 --> 00:05:15,759
committee

135
00:05:15,759 --> 00:05:18,960
are the parties colored in blue

136
00:05:18,960 --> 00:05:21,440
the issue now is that once this

137
00:05:21,440 --> 00:05:23,039
committee has spoken

138
00:05:23,039 --> 00:05:25,360
the adversary who's always watching the

139
00:05:25,360 --> 00:05:26,400
network

140
00:05:26,400 --> 00:05:28,400
sees who spoke and learns that this

141
00:05:28,400 --> 00:05:32,400
committee of parties might be important

142
00:05:32,800 --> 00:05:35,120
since the committee is relatively small

143
00:05:35,120 --> 00:05:37,039
the adversary might be able to quickly

144
00:05:37,039 --> 00:05:39,520
target all of them for corruption

145
00:05:39,520 --> 00:05:44,080
maybe with some sort of zero-day exploit

146
00:05:44,080 --> 00:05:46,960
so we want to make sure that even if

147
00:05:46,960 --> 00:05:48,960
we're dealing with a powerful adaptive

148
00:05:48,960 --> 00:05:51,199
adversary who's able to instantly

149
00:05:51,199 --> 00:05:53,199
corrupt anyone they want

150
00:05:53,199 --> 00:05:54,960
our protocol still gives us the

151
00:05:54,960 --> 00:05:56,560
guarantees we want

152
00:05:56,560 --> 00:05:58,960
as long as the adversary is limited to

153
00:05:58,960 --> 00:06:00,319
corrupting

154
00:06:00,319 --> 00:06:01,199
t

155
00:06:01,199 --> 00:06:03,199
which we take to be half

156
00:06:03,199 --> 00:06:07,639
of the total number of parties

157
00:06:08,639 --> 00:06:10,880
in order to do that we need to make sure

158
00:06:10,880 --> 00:06:13,120
that even if every party is killed

159
00:06:13,120 --> 00:06:15,520
immediately after it speaks

160
00:06:15,520 --> 00:06:17,840
we still get our guarantees

161
00:06:17,840 --> 00:06:19,600
and that's

162
00:06:19,600 --> 00:06:22,240
why we come to the you only speak once

163
00:06:22,240 --> 00:06:25,440
or yosel model

164
00:06:25,440 --> 00:06:27,440
after the first committee is dead if the

165
00:06:27,440 --> 00:06:29,440
computation isn't complete yet we need

166
00:06:29,440 --> 00:06:31,440
another committee to pick up the torch

167
00:06:31,440 --> 00:06:32,840
and

168
00:06:32,840 --> 00:06:35,520
continue but as soon as that committee

169
00:06:35,520 --> 00:06:39,360
speaks it might also be killed

170
00:06:39,360 --> 00:06:42,000
and so yet another committee the pink

171
00:06:42,000 --> 00:06:43,039
committee

172
00:06:43,039 --> 00:06:46,080
must rise to take its place and carry

173
00:06:46,080 --> 00:06:47,520
the torch

174
00:06:47,520 --> 00:06:50,080
and so on and so forth

175
00:06:50,080 --> 00:06:52,720
so in the yosef model even if every

176
00:06:52,720 --> 00:06:55,199
party is killed as soon as it speaks the

177
00:06:55,199 --> 00:07:00,240
computation must carry on to completion

178
00:07:00,560 --> 00:07:02,319
now that we have our motivation let's

179
00:07:02,319 --> 00:07:04,560
move on to our contributions

180
00:07:04,560 --> 00:07:06,080
like i mentioned at the beginning

181
00:07:06,080 --> 00:07:08,240
there's two parts to our paper

182
00:07:08,240 --> 00:07:10,800
the formal modeling of yoso protocols

183
00:07:10,800 --> 00:07:14,479
and two yoso mpc constructions

184
00:07:14,479 --> 00:07:16,240
the great thing about our model is that

185
00:07:16,240 --> 00:07:18,000
it cleanly splits yoso protocols into

186
00:07:18,000 --> 00:07:20,479
two components which can be considered

187
00:07:20,479 --> 00:07:22,800
totally independently

188
00:07:22,800 --> 00:07:25,599
so the first component is ra which

189
00:07:25,599 --> 00:07:27,599
stands for role assignments

190
00:07:27,599 --> 00:07:29,680
it deals with how committees can be

191
00:07:29,680 --> 00:07:31,840
chosen in such a way that the adversary

192
00:07:31,840 --> 00:07:34,720
can't anticipate who they will be

193
00:07:34,720 --> 00:07:37,520
and the second component which is role

194
00:07:37,520 --> 00:07:38,880
execution

195
00:07:38,880 --> 00:07:41,360
deals with what these committees will do

196
00:07:41,360 --> 00:07:44,000
once they're chosen

197
00:07:44,000 --> 00:07:45,840
let's take a quick look at role

198
00:07:45,840 --> 00:07:47,280
assignment

199
00:07:47,280 --> 00:07:49,039
we've seen this kind of role assignment

200
00:07:49,039 --> 00:07:51,039
in a number of places already

201
00:07:51,039 --> 00:07:53,840
most notably we have bitcoin where the

202
00:07:53,840 --> 00:07:55,680
role of block creator

203
00:07:55,680 --> 00:07:58,720
is assigned through proof's work

204
00:07:58,720 --> 00:08:00,639
and this has exactly the property we're

205
00:08:00,639 --> 00:08:01,840
looking for

206
00:08:01,840 --> 00:08:03,759
which is that no one knows before the

207
00:08:03,759 --> 00:08:05,120
miner speaks

208
00:08:05,120 --> 00:08:08,160
that that particular miner has won the

209
00:08:08,160 --> 00:08:10,560
right to publish a block

210
00:08:10,560 --> 00:08:11,360
so

211
00:08:11,360 --> 00:08:13,919
even the most clever adaptive adversary

212
00:08:13,919 --> 00:08:16,240
can't target the next block minor until

213
00:08:16,240 --> 00:08:17,520
it's too late

214
00:08:17,520 --> 00:08:20,319
and they've already played their role

215
00:08:20,319 --> 00:08:22,400
algorand does something similar but

216
00:08:22,400 --> 00:08:24,319
without proofs of work

217
00:08:24,319 --> 00:08:26,479
they use verifiable random functions to

218
00:08:26,479 --> 00:08:27,919
run a lottery

219
00:08:27,919 --> 00:08:30,080
just like in bitcoin no one knows who

220
00:08:30,080 --> 00:08:32,159
the winners of the lottery will be

221
00:08:32,159 --> 00:08:34,719
until they've spoken and thus already

222
00:08:34,719 --> 00:08:36,719
played their part

223
00:08:36,719 --> 00:08:39,279
bitcoin and algorand are different from

224
00:08:39,279 --> 00:08:40,880
npc protocols

225
00:08:40,880 --> 00:08:43,279
in that the roles parties play don't

226
00:08:43,279 --> 00:08:46,240
require any secrets

227
00:08:46,240 --> 00:08:48,880
but if alice bob and charlie want to

228
00:08:48,880 --> 00:08:50,959
outsource an mpc

229
00:08:50,959 --> 00:08:52,480
they will have to secret share their

230
00:08:52,480 --> 00:08:55,360
inputs to the appropriate committee

231
00:08:55,360 --> 00:08:57,519
and they can't know the identity of the

232
00:08:57,519 --> 00:09:00,000
committee if that identity is public

233
00:09:00,000 --> 00:09:03,040
this tells the adversary exactly who

234
00:09:03,040 --> 00:09:05,120
they should target

235
00:09:05,120 --> 00:09:07,120
this leads to a difficult question how

236
00:09:07,120 --> 00:09:09,120
can we enable the sending of a secret to

237
00:09:09,120 --> 00:09:10,800
one specific party

238
00:09:10,800 --> 00:09:14,240
without knowing who that party is

239
00:09:14,240 --> 00:09:17,600
the work of benhamoud from tcc last year

240
00:09:17,600 --> 00:09:19,920
gives a really elegant solution using

241
00:09:19,920 --> 00:09:22,959
something called nominating committees

242
00:09:22,959 --> 00:09:25,360
and we also have an ongoing work on

243
00:09:25,360 --> 00:09:27,600
eprint with an alternative approach

244
00:09:27,600 --> 00:09:32,640
which supports a higher threshold team

245
00:09:32,720 --> 00:09:34,880
both of these solutions result in the

246
00:09:34,880 --> 00:09:36,800
publication of a set of anonymous public

247
00:09:36,800 --> 00:09:38,080
keys

248
00:09:38,080 --> 00:09:39,680
so the owners of the corresponding

249
00:09:39,680 --> 00:09:42,080
decryption keys know who they are but no

250
00:09:42,080 --> 00:09:44,160
one else knows who owns the

251
00:09:44,160 --> 00:09:47,600
corresponding decryption keys

252
00:09:47,600 --> 00:09:49,839
so once that's done

253
00:09:49,839 --> 00:09:52,080
anyone can encrypt a message under one

254
00:09:52,080 --> 00:09:54,720
of these keys and broadcast it without

255
00:09:54,720 --> 00:09:58,080
knowing who will be able to decrypt

256
00:09:58,080 --> 00:09:59,920
only the party holding the corresponding

257
00:09:59,920 --> 00:10:01,279
decryption key will know that this

258
00:10:01,279 --> 00:10:03,279
message is intended for her

259
00:10:03,279 --> 00:10:05,279
and she'll be able to

260
00:10:05,279 --> 00:10:07,920
decrypt it

261
00:10:07,920 --> 00:10:09,360
the guarantee we need from the real

262
00:10:09,360 --> 00:10:11,360
assignment mechanism is that at most a

263
00:10:11,360 --> 00:10:13,040
threshold t prime of the members of the

264
00:10:13,040 --> 00:10:15,040
committee should be corrupt

265
00:10:15,040 --> 00:10:17,519
and we take t prime to be half of the

266
00:10:17,519 --> 00:10:19,360
size of the committee

267
00:10:19,360 --> 00:10:21,120
once the roles have been assigned we can

268
00:10:21,120 --> 00:10:23,839
move on to executing the protocol

269
00:10:23,839 --> 00:10:25,839
the execution can be specified in terms

270
00:10:25,839 --> 00:10:28,320
of roles not the machines executing

271
00:10:28,320 --> 00:10:29,680
those roles

272
00:10:29,680 --> 00:10:32,480
and examples of roles are the first

273
00:10:32,480 --> 00:10:35,760
member of the third committee or maybe

274
00:10:35,760 --> 00:10:39,360
the verifier in the seventh nizik

275
00:10:39,360 --> 00:10:41,120
the roles communicate with one another

276
00:10:41,120 --> 00:10:43,680
over broadcast channel and through

277
00:10:43,680 --> 00:10:46,399
private communication to future roles

278
00:10:46,399 --> 00:10:48,240
who haven't spoken yet

279
00:10:48,240 --> 00:10:51,760
using the anonymous public keys

280
00:10:51,760 --> 00:10:53,519
the specified protocol need only be

281
00:10:53,519 --> 00:10:56,000
secure as long as at most the threshold

282
00:10:56,000 --> 00:10:57,839
t prime of the members of each committee

283
00:10:57,839 --> 00:10:59,200
are corrupt

284
00:10:59,200 --> 00:11:00,640
and it's up to the role assignment

285
00:11:00,640 --> 00:11:03,279
mechanism to guarantee that this is in

286
00:11:03,279 --> 00:11:06,160
fact the case

287
00:11:06,880 --> 00:11:09,120
i want to mention two existing protocols

288
00:11:09,120 --> 00:11:11,440
that are compatible with this model

289
00:11:11,440 --> 00:11:13,600
so the first one is the work of ben

290
00:11:13,600 --> 00:11:15,040
hamudahral

291
00:11:15,040 --> 00:11:17,200
from tcc 2020

292
00:11:17,200 --> 00:11:18,800
which deals with maintaining and

293
00:11:18,800 --> 00:11:20,480
re-sharing a secret from committee to

294
00:11:20,480 --> 00:11:22,720
committee

295
00:11:22,720 --> 00:11:25,760
another cool protocol is fluid npc which

296
00:11:25,760 --> 00:11:27,760
is also at crypto this year and they

297
00:11:27,760 --> 00:11:29,440
describe how to do

298
00:11:29,440 --> 00:11:31,519
mpc with abort

299
00:11:31,519 --> 00:11:33,279
they don't explicitly use a role

300
00:11:33,279 --> 00:11:35,120
assignment mechanism but their protocol

301
00:11:35,120 --> 00:11:37,440
could be combined with one to get yoso

302
00:11:37,440 --> 00:11:40,320
style guarantees

303
00:11:40,640 --> 00:11:42,959
in our protocols we prioritize

304
00:11:42,959 --> 00:11:45,519
preventing denial of service attacks

305
00:11:45,519 --> 00:11:48,720
so we aim for guaranteed output delivery

306
00:11:48,720 --> 00:11:52,079
instead of security with the board

307
00:11:52,079 --> 00:11:55,120
and this brings me to

308
00:11:55,120 --> 00:11:57,760
our two mpc constructions that achieve

309
00:11:57,760 --> 00:12:00,000
this

310
00:12:01,760 --> 00:12:03,040
let's start with a construction that

311
00:12:03,040 --> 00:12:05,600
uses computational assumptions

312
00:12:05,600 --> 00:12:07,519
in this construction we're going to use

313
00:12:07,519 --> 00:12:10,000
one global public encryption team

314
00:12:10,000 --> 00:12:12,079
and in the slide this is the lock in the

315
00:12:12,079 --> 00:12:14,000
upper right corner and it's available to

316
00:12:14,000 --> 00:12:15,600
everyone

317
00:12:15,600 --> 00:12:17,519
the corresponding secret key will be

318
00:12:17,519 --> 00:12:19,040
secret shared among the current

319
00:12:19,040 --> 00:12:21,360
committee which is in bloom

320
00:12:21,360 --> 00:12:23,440
anyone can provide an input to the npc

321
00:12:23,440 --> 00:12:25,519
by encrypting a secret to the public key

322
00:12:25,519 --> 00:12:28,720
and broadcasting the cypher text

323
00:12:28,720 --> 00:12:31,120
but in order to use this for npc

324
00:12:31,120 --> 00:12:33,200
we need several properties of the

325
00:12:33,200 --> 00:12:35,040
encryption scheme

326
00:12:35,040 --> 00:12:36,800
the first is that decryption should be

327
00:12:36,800 --> 00:12:39,440
as non-interactive as possible

328
00:12:39,440 --> 00:12:41,360
this means that each committee member

329
00:12:41,360 --> 00:12:43,040
should be able to derive a partial

330
00:12:43,040 --> 00:12:45,120
decryption from the ciphertext and its

331
00:12:45,120 --> 00:12:46,560
keyshare

332
00:12:46,560 --> 00:12:48,880
and these decryptions can be combined to

333
00:12:48,880 --> 00:12:50,560
recover the plaintext

334
00:12:50,560 --> 00:12:52,560
so on the slide this recovery is through

335
00:12:52,560 --> 00:12:54,800
addition but it doesn't have to be

336
00:12:54,800 --> 00:12:57,040
and as a side note so of course before

337
00:12:57,040 --> 00:12:59,040
publishing the partial decryption

338
00:12:59,040 --> 00:13:01,600
the committee members need to erase

339
00:13:01,600 --> 00:13:02,880
their state

340
00:13:02,880 --> 00:13:05,200
and their key shares to make sure that

341
00:13:05,200 --> 00:13:07,680
our adaptive adversary can't learn the

342
00:13:07,680 --> 00:13:11,120
key when she corrupts them

343
00:13:11,279 --> 00:13:12,240
all right

344
00:13:12,240 --> 00:13:14,480
so another requirement

345
00:13:14,480 --> 00:13:16,880
is that the secret key can be re-shared

346
00:13:16,880 --> 00:13:19,519
with minimal interaction

347
00:13:19,519 --> 00:13:22,000
this is necessary because otherwise once

348
00:13:22,000 --> 00:13:23,839
our blue committee speaks

349
00:13:23,839 --> 00:13:26,320
the secret key and all secrets that

350
00:13:26,320 --> 00:13:28,399
haven't been decrypted yet are lost

351
00:13:28,399 --> 00:13:29,920
forever

352
00:13:29,920 --> 00:13:32,560
so in the same breath in which they

353
00:13:32,560 --> 00:13:34,880
publish the partial decryptions we want

354
00:13:34,880 --> 00:13:36,560
our blue committee to re-share the

355
00:13:36,560 --> 00:13:38,000
secret decryption key to the next

356
00:13:38,000 --> 00:13:39,120
committee

357
00:13:39,120 --> 00:13:41,440
which is the one in green

358
00:13:41,440 --> 00:13:43,600
now what we have lets us maintain

359
00:13:43,600 --> 00:13:45,839
secrets and reveal them at the

360
00:13:45,839 --> 00:13:47,199
appropriate time

361
00:13:47,199 --> 00:13:49,199
but in order to support computation on

362
00:13:49,199 --> 00:13:50,639
those secrets

363
00:13:50,639 --> 00:13:53,279
we need an additional property

364
00:13:53,279 --> 00:13:55,040
we need our encryption scheme to be

365
00:13:55,040 --> 00:13:57,680
homomorphic

366
00:13:57,680 --> 00:13:59,839
if it's fully homomorphic then we're

367
00:13:59,839 --> 00:14:01,440
basically done

368
00:14:01,440 --> 00:14:03,040
we can have the blue committee perform

369
00:14:03,040 --> 00:14:05,440
the entire computation homomorphically

370
00:14:05,440 --> 00:14:07,360
and publish partial decryptions of the

371
00:14:07,360 --> 00:14:09,760
output that can then be combined to

372
00:14:09,760 --> 00:14:12,000
recover the output itself

373
00:14:12,000 --> 00:14:14,079
but using a fully homomorphic encryption

374
00:14:14,079 --> 00:14:15,120
scheme

375
00:14:15,120 --> 00:14:17,440
wouldn't be concretely efficient so we

376
00:14:17,440 --> 00:14:19,199
might want to use an additively

377
00:14:19,199 --> 00:14:22,000
homomorphic encryption scheme instead

378
00:14:22,000 --> 00:14:24,160
then we would use beaver triples to

379
00:14:24,160 --> 00:14:27,199
enable every multiplication

380
00:14:27,199 --> 00:14:29,199
i won't explain beaver triples in the

381
00:14:29,199 --> 00:14:30,560
interest of time

382
00:14:30,560 --> 00:14:32,399
i'll just say that they can be used for

383
00:14:32,399 --> 00:14:34,320
multiplication but their use does

384
00:14:34,320 --> 00:14:36,800
require some interaction

385
00:14:36,800 --> 00:14:39,120
and they can be generated for us by

386
00:14:39,120 --> 00:14:40,880
committees that don't hold decryption

387
00:14:40,880 --> 00:14:43,199
key shares

388
00:14:43,199 --> 00:14:45,600
each of our key holder committee members

389
00:14:45,600 --> 00:14:48,000
then performs only linear operations

390
00:14:48,000 --> 00:14:49,519
homomorphic claim

391
00:14:49,519 --> 00:14:52,160
and uses a beaver triple to do a

392
00:14:52,160 --> 00:14:54,240
multiplication which involves the

393
00:14:54,240 --> 00:14:56,839
decryption of some massed

394
00:14:56,839 --> 00:14:59,440
values our blue committee performs this

395
00:14:59,440 --> 00:15:01,440
decryption of best values

396
00:15:01,440 --> 00:15:03,519
and in the same breath they need to

397
00:15:03,519 --> 00:15:05,040
re-share the secret key to the next

398
00:15:05,040 --> 00:15:06,160
committee

399
00:15:06,160 --> 00:15:07,760
which picks up the computation from

400
00:15:07,760 --> 00:15:10,079
there

401
00:15:10,079 --> 00:15:12,880
this next green committee

402
00:15:12,880 --> 00:15:15,680
does more linear computation

403
00:15:15,680 --> 00:15:17,600
and the next time a multiplication needs

404
00:15:17,600 --> 00:15:18,639
to be done

405
00:15:18,639 --> 00:15:22,079
it again uses a beaver triple and again

406
00:15:22,079 --> 00:15:24,160
in the same breath hands the computation

407
00:15:24,160 --> 00:15:26,720
over to the next committee

408
00:15:26,720 --> 00:15:29,680
which might do more linear computation

409
00:15:29,680 --> 00:15:32,800
and finally when the computation is over

410
00:15:32,800 --> 00:15:35,920
the last committee decrypts the output

411
00:15:35,920 --> 00:15:38,079
this whole thing is very similar to the

412
00:15:38,079 --> 00:15:40,720
cdn protocol from 20 years ago

413
00:15:40,720 --> 00:15:43,040
with basically minimal changes to enable

414
00:15:43,040 --> 00:15:44,959
the passing of the computation from

415
00:15:44,959 --> 00:15:47,920
committee to committee

416
00:15:47,920 --> 00:15:49,040
that's all i want to say about the

417
00:15:49,040 --> 00:15:50,720
computational protocol

418
00:15:50,720 --> 00:15:52,560
so next let's take a look at our second

419
00:15:52,560 --> 00:15:54,399
construction which is information

420
00:15:54,399 --> 00:15:55,920
theoretic

421
00:15:55,920 --> 00:15:57,759
it might seem a little funny to consider

422
00:15:57,759 --> 00:15:59,759
an information theoretical construction

423
00:15:59,759 --> 00:16:01,519
when it'll need to run on top of a

424
00:16:01,519 --> 00:16:04,160
computational real assignment protocol

425
00:16:04,160 --> 00:16:05,680
but we think it's still interesting to

426
00:16:05,680 --> 00:16:06,880
try to minimize the necessary

427
00:16:06,880 --> 00:16:09,279
assumptions

428
00:16:09,279 --> 00:16:11,040
trying to eliminate assumptions

429
00:16:11,040 --> 00:16:12,959
altogether turns out to be quite

430
00:16:12,959 --> 00:16:15,920
challenging in the yoso protocol

431
00:16:15,920 --> 00:16:17,839
most information theoretic mbc

432
00:16:17,839 --> 00:16:19,600
techniques use something called

433
00:16:19,600 --> 00:16:22,720
verifiable secret sharing like all forms

434
00:16:22,720 --> 00:16:24,800
of secret sharing verifiable secret

435
00:16:24,800 --> 00:16:28,560
sharing or vss proceeds in two phases

436
00:16:28,560 --> 00:16:30,959
we have dealing where the blue party

437
00:16:30,959 --> 00:16:33,040
deals the secret to the green parties

438
00:16:33,040 --> 00:16:35,279
and at some point down the line the

439
00:16:35,279 --> 00:16:37,600
green parties might try to reconstruct

440
00:16:37,600 --> 00:16:39,759
that secret

441
00:16:39,759 --> 00:16:43,839
however in vss the dealing phase has an

442
00:16:43,839 --> 00:16:46,079
extra verification step

443
00:16:46,079 --> 00:16:48,839
where the shareholders and possibly the

444
00:16:48,839 --> 00:16:51,680
dealer talk more to make sure that

445
00:16:51,680 --> 00:16:54,240
everyone agrees that we have a valid

446
00:16:54,240 --> 00:16:57,120
reconstructable sharing

447
00:16:57,120 --> 00:16:59,920
the problem with this in the yoso model

448
00:16:59,920 --> 00:17:03,199
is that after this verification step

449
00:17:03,199 --> 00:17:05,119
everyone has spoken so the fact that the

450
00:17:05,119 --> 00:17:07,119
green parties once had a valid sharing

451
00:17:07,119 --> 00:17:09,199
is now totally useless since they're

452
00:17:09,199 --> 00:17:11,919
probably dead

453
00:17:12,000 --> 00:17:15,039
a simple yet powerful solution to this

454
00:17:15,039 --> 00:17:17,199
is something we call

455
00:17:17,199 --> 00:17:19,679
future broadcast

456
00:17:19,679 --> 00:17:22,400
so in a future broadcast protocol

457
00:17:22,400 --> 00:17:24,480
each of our parties takes the messages

458
00:17:24,480 --> 00:17:26,400
she would have sent in the future

459
00:17:26,400 --> 00:17:28,799
and shares them to a separate fresh

460
00:17:28,799 --> 00:17:31,120
committee that's in charge of then

461
00:17:31,120 --> 00:17:34,080
sending that message on her behalf

462
00:17:34,080 --> 00:17:37,200
this lets our parties speak once

463
00:17:37,200 --> 00:17:39,360
but at the same time schedule multiple

464
00:17:39,360 --> 00:17:41,440
messages that can be sent at different

465
00:17:41,440 --> 00:17:43,120
times in the future

466
00:17:43,120 --> 00:17:45,520
and can be triggered by arbitrary

467
00:17:45,520 --> 00:17:47,520
conditions

468
00:17:47,520 --> 00:17:49,840
our parties schedule some messages for

469
00:17:49,840 --> 00:17:51,600
the verification step

470
00:17:51,600 --> 00:17:53,840
and some for future use whether for

471
00:17:53,840 --> 00:17:58,080
reconstruction or within an npc

472
00:17:58,080 --> 00:18:00,160
one great thing about future broadcast

473
00:18:00,160 --> 00:18:02,640
is that it can use a less powerful tool

474
00:18:02,640 --> 00:18:04,000
than vss

475
00:18:04,000 --> 00:18:06,160
we only need robust secret sharing which

476
00:18:06,160 --> 00:18:08,480
doesn't consider a corrupt dealer

477
00:18:08,480 --> 00:18:10,640
and this is perfect since if our dealing

478
00:18:10,640 --> 00:18:13,039
party is corrupt she could say anything

479
00:18:13,039 --> 00:18:15,039
anytime she wants in the future

480
00:18:15,039 --> 00:18:16,320
and we don't really need to commit her

481
00:18:16,320 --> 00:18:19,120
to something at the time of

482
00:18:19,120 --> 00:18:22,880
uh the future broadcast itself

483
00:18:22,880 --> 00:18:26,400
another neat feature of this scheme

484
00:18:26,400 --> 00:18:28,880
is that if we think of all the values

485
00:18:28,880 --> 00:18:30,960
sent using future broadcast as

486
00:18:30,960 --> 00:18:33,039
re-sharings of the original

487
00:18:33,039 --> 00:18:34,640
share

488
00:18:34,640 --> 00:18:37,520
we basically for free get the values

489
00:18:37,520 --> 00:18:38,960
held by the set of read and orange

490
00:18:38,960 --> 00:18:40,799
committees are equal

491
00:18:40,799 --> 00:18:42,640
this is true since the honest members of

492
00:18:42,640 --> 00:18:44,799
the green committee will always honestly

493
00:18:44,799 --> 00:18:47,200
re-share their actual shares

494
00:18:47,200 --> 00:18:49,039
and as long as there are enough honest

495
00:18:49,039 --> 00:18:52,000
green parties the corrupt parties will

496
00:18:52,000 --> 00:18:53,919
not be able to tamper with the re-shared

497
00:18:53,919 --> 00:18:56,799
values

498
00:18:56,799 --> 00:18:58,960
so there's really much more that we need

499
00:18:58,960 --> 00:19:00,720
in order to get

500
00:19:00,720 --> 00:19:02,799
from verifiable secret sharing to a

501
00:19:02,799 --> 00:19:04,480
full-fledged npc

502
00:19:04,480 --> 00:19:06,320
for instance we need our parties to be

503
00:19:06,320 --> 00:19:07,760
able to prove

504
00:19:07,760 --> 00:19:11,679
that something they publish is a product

505
00:19:11,679 --> 00:19:15,039
of two things that were shared

506
00:19:15,039 --> 00:19:16,480
and there are many more subtleties and

507
00:19:16,480 --> 00:19:18,240
techniques that we need to get to our

508
00:19:18,240 --> 00:19:20,480
npc that i just won't go over this is a

509
00:19:20,480 --> 00:19:22,640
really simplified picture each of these

510
00:19:22,640 --> 00:19:24,480
tricks uses layers upon layers of

511
00:19:24,480 --> 00:19:26,720
additional committees which makes our

512
00:19:26,720 --> 00:19:28,400
information theoretic solution far from

513
00:19:28,400 --> 00:19:29,679
practical

514
00:19:29,679 --> 00:19:32,480
but it's still a really interesting

515
00:19:32,480 --> 00:19:34,880
feasibility result

516
00:19:34,880 --> 00:19:36,080
that's all i want to say about our

517
00:19:36,080 --> 00:19:37,760
second construction

518
00:19:37,760 --> 00:19:39,440
so to recap

519
00:19:39,440 --> 00:19:41,039
the yoso model gives us a neat

520
00:19:41,039 --> 00:19:43,360
separation between role assignment and

521
00:19:43,360 --> 00:19:45,039
role execution

522
00:19:45,039 --> 00:19:47,840
and in our work we showed two uh yoso

523
00:19:47,840 --> 00:19:49,520
mpc protocols one of which is

524
00:19:49,520 --> 00:19:51,440
computational and one information

525
00:19:51,440 --> 00:19:53,039
theoretic

526
00:19:53,039 --> 00:19:55,360
both of those get us guaranteed output

527
00:19:55,360 --> 00:19:58,080
delivery against an adaptive adversary

528
00:19:58,080 --> 00:19:59,840
which can corrupt up to half the total

529
00:19:59,840 --> 00:20:01,760
number of parties

530
00:20:01,760 --> 00:20:03,679
and they both have total communication

531
00:20:03,679 --> 00:20:05,520
which is sublinear and n

532
00:20:05,520 --> 00:20:07,840
which is really cool

533
00:20:07,840 --> 00:20:10,480
finally yoso unearths a huge number of

534
00:20:10,480 --> 00:20:11,919
open problems

535
00:20:11,919 --> 00:20:13,440
basically everything we've asked about

536
00:20:13,440 --> 00:20:16,559
mpc before we can ask again in the yoso

537
00:20:16,559 --> 00:20:18,080
model

538
00:20:18,080 --> 00:20:21,520
so for instance notice that our

539
00:20:21,520 --> 00:20:23,600
computational construction requires some

540
00:20:23,600 --> 00:20:25,600
setup in the form of the distribution of

541
00:20:25,600 --> 00:20:28,240
the secret key to the first committee

542
00:20:28,240 --> 00:20:30,559
we can ask can we get efficient

543
00:20:30,559 --> 00:20:32,640
protocols without setup

544
00:20:32,640 --> 00:20:34,720
can we get constant round protocols

545
00:20:34,720 --> 00:20:36,000
without setup

546
00:20:36,000 --> 00:20:38,799
can we do best of both worlds protocols

547
00:20:38,799 --> 00:20:39,919
which get

548
00:20:39,919 --> 00:20:42,000
guaranteed output delivery when half of

549
00:20:42,000 --> 00:20:44,320
the parties are corrupted and unanimous

550
00:20:44,320 --> 00:20:45,360
abort

551
00:20:45,360 --> 00:20:48,400
if there's a dishonest majority

552
00:20:48,400 --> 00:20:50,320
and so on and so forth there's really

553
00:20:50,320 --> 00:20:53,439
the sky's the limit here

554
00:20:54,320 --> 00:20:55,760
thank you everyone for listening and i

555
00:20:55,760 --> 00:21:00,080
hope to see you at the live session

