1
00:00:02,639 --> 00:00:05,120
this is a talk about music too

2
00:00:05,120 --> 00:00:06,720
simple two-round schnoor

3
00:00:06,720 --> 00:00:08,400
multi-signatures

4
00:00:08,400 --> 00:00:10,480
i am jonas nick and this work is a

5
00:00:10,480 --> 00:00:12,400
collaboration with my colleague tim

6
00:00:12,400 --> 00:00:14,639
roofing at blockstream and with janik

7
00:00:14,639 --> 00:00:17,919
sarah from nc

8
00:00:18,000 --> 00:00:20,240
multi-signatures allow n signers to

9
00:00:20,240 --> 00:00:22,880
produce a single signature on a single

10
00:00:22,880 --> 00:00:24,000
message

11
00:00:24,000 --> 00:00:26,880
the signing protocol can be interactive

12
00:00:26,880 --> 00:00:29,039
and require multiple communication

13
00:00:29,039 --> 00:00:31,480
rounds we distinguish between

14
00:00:31,480 --> 00:00:34,239
multi-signatures where n of n signers

15
00:00:34,239 --> 00:00:36,800
can produce a signature and threshold

16
00:00:36,800 --> 00:00:40,399
signatures where any subset of size t

17
00:00:40,399 --> 00:00:44,559
out of n signers can produce a signature

18
00:00:44,559 --> 00:00:48,879
this work covers only multi signatures

19
00:00:48,879 --> 00:00:51,280
our interest in schnoor multi signatures

20
00:00:51,280 --> 00:00:53,360
mainly stems from its potential

21
00:00:53,360 --> 00:00:55,920
applications to bitcoin

22
00:00:55,920 --> 00:00:58,000
bitcoin allows setting up policies that

23
00:00:58,000 --> 00:01:00,559
require multiple parties to cooperate

24
00:01:00,559 --> 00:01:03,840
and create signatures to spend a coin

25
00:01:03,840 --> 00:01:06,560
this is commonly referred to as multisig

26
00:01:06,560 --> 00:01:09,040
policy in bitcoin

27
00:01:09,040 --> 00:01:11,360
it can be used simply to store bitcoin

28
00:01:11,360 --> 00:01:13,600
on multiple devices to achieve a higher

29
00:01:13,600 --> 00:01:15,680
levels of security

30
00:01:15,680 --> 00:01:18,000
moreover many advanced off-chain

31
00:01:18,000 --> 00:01:20,400
protocols which are also called smart

32
00:01:20,400 --> 00:01:23,439
contracts require a multisig policy for

33
00:01:23,439 --> 00:01:25,920
example the lightning payment network

34
00:01:25,920 --> 00:01:29,360
and federated side chains

35
00:01:29,439 --> 00:01:30,960
it is trivial to construct

36
00:01:30,960 --> 00:01:32,720
multi-signatures from standard

37
00:01:32,720 --> 00:01:33,920
signatures

38
00:01:33,920 --> 00:01:36,320
just concatenate individual public keys

39
00:01:36,320 --> 00:01:38,320
and individual signatures

40
00:01:38,320 --> 00:01:40,720
this is possible in bitcoin today using

41
00:01:40,720 --> 00:01:42,479
ecdsa

42
00:01:42,479 --> 00:01:45,520
but for end signers this requires of

43
00:01:45,520 --> 00:01:48,079
space and verification time

44
00:01:48,079 --> 00:01:50,240
this is particularly bad in blockchain

45
00:01:50,240 --> 00:01:52,560
systems where storage is very expensive

46
00:01:52,560 --> 00:01:54,720
and all nodes need to verify all

47
00:01:54,720 --> 00:01:58,158
signatures on the blockchain

48
00:01:58,799 --> 00:02:00,799
the bitcoin network will support schnorr

49
00:02:00,799 --> 00:02:03,040
signatures soon the schnorr signature

50
00:02:03,040 --> 00:02:05,759
specification called bitcoin improvement

51
00:02:05,759 --> 00:02:08,720
proposal 340 is part of the ongoing

52
00:02:08,720 --> 00:02:10,959
taproot softwork has been locked in for

53
00:02:10,959 --> 00:02:13,280
activation in november

54
00:02:13,280 --> 00:02:14,959
there are a few reasons to prefer

55
00:02:14,959 --> 00:02:17,760
schnorr signatures over ecdsa provable

56
00:02:17,760 --> 00:02:20,239
security efficiency and most importantly

57
00:02:20,239 --> 00:02:22,640
for this work schnorr signatures allow

58
00:02:22,640 --> 00:02:25,520
easier construction of advanced signing

59
00:02:25,520 --> 00:02:27,760
protocols

60
00:02:27,760 --> 00:02:30,160
the vision is to have a layered design

61
00:02:30,160 --> 00:02:32,239
on the on-chain layer we'll just have

62
00:02:32,239 --> 00:02:34,239
support for schnoor signature

63
00:02:34,239 --> 00:02:36,720
verification that means nodes in the

64
00:02:36,720 --> 00:02:39,200
bitcoin network will be able to verify

65
00:02:39,200 --> 00:02:41,519
ordinary schnorr signatures and this is

66
00:02:41,519 --> 00:02:43,840
part of the consensus rules

67
00:02:43,840 --> 00:02:45,920
this simple functionality enables us to

68
00:02:45,920 --> 00:02:48,319
deploy advanced signing protocols in an

69
00:02:48,319 --> 00:02:50,720
off-chain manner without

70
00:02:50,720 --> 00:02:53,120
the need to change the consensus code

71
00:02:53,120 --> 00:02:54,800
every time

72
00:02:54,800 --> 00:02:56,160
for example we can build

73
00:02:56,160 --> 00:02:58,239
multi-signatures on top as we do in this

74
00:02:58,239 --> 00:03:00,000
work but we can also build threshold

75
00:03:00,000 --> 00:03:02,800
signatures blind signatures and possibly

76
00:03:02,800 --> 00:03:05,599
other advanced signing protocols

77
00:03:05,599 --> 00:03:07,360
as long as the output of the signing

78
00:03:07,360 --> 00:03:09,599
protocol looks like an ordinary schnorr

79
00:03:09,599 --> 00:03:11,599
signature it will be understood by the

80
00:03:11,599 --> 00:03:13,920
nodes on the network

81
00:03:13,920 --> 00:03:16,239
this design has multiple advantages

82
00:03:16,239 --> 00:03:18,879
first of all the on-chain consensus

83
00:03:18,879 --> 00:03:21,680
layer is kept simple and the complexity

84
00:03:21,680 --> 00:03:24,080
is moved to off-chain protocols

85
00:03:24,080 --> 00:03:26,480
what ends up on chain is just an

86
00:03:26,480 --> 00:03:29,599
ordinary snore public key and signature

87
00:03:29,599 --> 00:03:31,840
this is great for privacy because just

88
00:03:31,840 --> 00:03:33,599
by looking at the chain an observer

89
00:03:33,599 --> 00:03:36,080
cannot tell that a complex protocol is

90
00:03:36,080 --> 00:03:38,239
in fact going on in the background

91
00:03:38,239 --> 00:03:40,720
and moreover this approach is efficient

92
00:03:40,720 --> 00:03:45,040
and the on-chain data is very compact

93
00:03:45,040 --> 00:03:47,120
to make this vision reality we need a

94
00:03:47,120 --> 00:03:48,640
multi-signature scheme that is

95
00:03:48,640 --> 00:03:50,480
compatible with ordinary schnoor

96
00:03:50,480 --> 00:03:52,799
signature verification

97
00:03:52,799 --> 00:03:54,640
the first challenge here is that we need

98
00:03:54,640 --> 00:03:57,040
an interactive signing protocol that

99
00:03:57,040 --> 00:03:59,680
enables ensigners to produce an ordinary

100
00:03:59,680 --> 00:04:01,280
schnoor signature

101
00:04:01,280 --> 00:04:03,840
the second challenge is that we want a

102
00:04:03,840 --> 00:04:05,439
non-interactive key aggregation

103
00:04:05,439 --> 00:04:07,840
algorithm so everyone should be able to

104
00:04:07,840 --> 00:04:10,640
combine a multiset of public keys into a

105
00:04:10,640 --> 00:04:14,159
single aggregate key

106
00:04:14,159 --> 00:04:15,680
we call a scheme with these two

107
00:04:15,680 --> 00:04:18,079
properties a fully compatible schnorr

108
00:04:18,079 --> 00:04:20,079
multi-signature scheme

109
00:04:20,079 --> 00:04:21,918
if we look at existing schemes in the

110
00:04:21,918 --> 00:04:24,240
literature one nice scheme with this

111
00:04:24,240 --> 00:04:26,240
property is music which we're going to

112
00:04:26,240 --> 00:04:28,560
call music 1 to distinguish it clearly

113
00:04:28,560 --> 00:04:30,639
from our work here

114
00:04:30,639 --> 00:04:33,520
music 1 works in the plain public key

115
00:04:33,520 --> 00:04:34,720
model

116
00:04:34,720 --> 00:04:36,720
other multi signature schemes typically

117
00:04:36,720 --> 00:04:38,880
require proofs of possession in the

118
00:04:38,880 --> 00:04:42,320
public keys to avoid rogue key attacks

119
00:04:42,320 --> 00:04:44,400
so usually signers need to prove in zero

120
00:04:44,400 --> 00:04:46,000
knowledge that they really know the

121
00:04:46,000 --> 00:04:47,840
secret key corresponding to their public

122
00:04:47,840 --> 00:04:50,720
key the novelty of music one is to avoid

123
00:04:50,720 --> 00:04:52,320
this

124
00:04:52,320 --> 00:04:54,639
but the main drawback of music one is

125
00:04:54,639 --> 00:04:56,400
that signing requires

126
00:04:56,400 --> 00:05:00,000
three rounds of communication

127
00:05:00,320 --> 00:05:02,800
we recently worked on another variant of

128
00:05:02,800 --> 00:05:06,160
music called music dn

129
00:05:06,160 --> 00:05:08,840
the n here stands for deterministic

130
00:05:08,840 --> 00:05:11,440
nonsense the primary goal of this work

131
00:05:11,440 --> 00:05:14,080
was not to obtain a two-round scheme but

132
00:05:14,080 --> 00:05:16,160
to achieve a deterministic signing

133
00:05:16,160 --> 00:05:17,520
protocol

134
00:05:17,520 --> 00:05:18,960
background is that discrete

135
00:05:18,960 --> 00:05:21,280
logarithm-based signature schemes

136
00:05:21,280 --> 00:05:24,479
usually need a random nonce in single

137
00:05:24,479 --> 00:05:26,400
signer signatures the nonce is in

138
00:05:26,400 --> 00:05:28,639
practice derived deterministically from

139
00:05:28,639 --> 00:05:30,960
the secret key and the message in order

140
00:05:30,960 --> 00:05:33,680
to avoid catastrophic failures in real

141
00:05:33,680 --> 00:05:36,000
world random number generators for

142
00:05:36,000 --> 00:05:38,560
example repeating randomness

143
00:05:38,560 --> 00:05:41,120
if you reuse randomness as a signer then

144
00:05:41,120 --> 00:05:44,080
everyone can extract your secret key

145
00:05:44,080 --> 00:05:46,080
interestingly you can't do this

146
00:05:46,080 --> 00:05:48,639
deterministic derivation easily in

147
00:05:48,639 --> 00:05:51,360
multi-signature schemes you cannot

148
00:05:51,360 --> 00:05:53,919
in fact if you apply the same techniques

149
00:05:53,919 --> 00:05:56,479
to multi-signatures naively the security

150
00:05:56,479 --> 00:05:59,039
of the resulting scheme breaks down

151
00:05:59,039 --> 00:06:00,960
entirely

152
00:06:00,960 --> 00:06:03,120
one way to fix this problem is to use a

153
00:06:03,120 --> 00:06:05,840
large enough hammer and add an expensive

154
00:06:05,840 --> 00:06:07,280
zero knowledge proof to the signing

155
00:06:07,280 --> 00:06:09,600
protocol and as a nice side effect one

156
00:06:09,600 --> 00:06:12,800
can obtain a two round signing scheme

157
00:06:12,800 --> 00:06:14,639
but due to the complexity of the zero

158
00:06:14,639 --> 00:06:17,039
knowledge proof this protocol is not at

159
00:06:17,039 --> 00:06:19,600
all simple and it's currently infeasible

160
00:06:19,600 --> 00:06:22,240
to use on dedicated signing devices such

161
00:06:22,240 --> 00:06:24,880
as hardware wallets as commonly used for

162
00:06:24,880 --> 00:06:27,520
storing bitcoins

163
00:06:27,520 --> 00:06:29,680
it's insightful to look at previous

164
00:06:29,680 --> 00:06:32,160
attempts to construct a construct two

165
00:06:32,160 --> 00:06:34,479
round schemes secure under concurrent

166
00:06:34,479 --> 00:06:36,960
sessions that is when the attacker can

167
00:06:36,960 --> 00:06:39,520
open multiple signing sessions with the

168
00:06:39,520 --> 00:06:41,919
victim concurrently

169
00:06:41,919 --> 00:06:44,319
an early revision of the music one paper

170
00:06:44,319 --> 00:06:46,639
in fact was a two round scheme but

171
00:06:46,639 --> 00:06:48,800
driver at all discovered a flaw in the

172
00:06:48,800 --> 00:06:50,960
security proof which we will discuss

173
00:06:50,960 --> 00:06:52,880
later in this talk

174
00:06:52,880 --> 00:06:54,639
not only did they show that the proof

175
00:06:54,639 --> 00:06:57,039
was flawed but they also gave a super

176
00:06:57,039 --> 00:06:59,360
polynomial but practical attack against

177
00:06:59,360 --> 00:07:00,400
the scheme

178
00:07:00,400 --> 00:07:02,319
and they gave a meta reduction that

179
00:07:02,319 --> 00:07:04,639
rules out a security proof against

180
00:07:04,639 --> 00:07:07,759
polynomial adversaries

181
00:07:07,759 --> 00:07:10,319
in response a third communication round

182
00:07:10,319 --> 00:07:12,319
was added to music 1 before it was

183
00:07:12,319 --> 00:07:15,680
published in dcc 2019

184
00:07:15,680 --> 00:07:18,479
at eurocrypt 2021 a better attack was

185
00:07:18,479 --> 00:07:21,120
found that not only requires polynomial

186
00:07:21,120 --> 00:07:22,639
running time

187
00:07:22,639 --> 00:07:25,360
in fact the attack is efficient enough

188
00:07:25,360 --> 00:07:27,440
so that you can probably perform it on

189
00:07:27,440 --> 00:07:30,400
your pocket calculator

190
00:07:30,400 --> 00:07:33,120
surprisingly the exact issue was that

191
00:07:33,120 --> 00:07:35,120
was overlooked in the flawed music one

192
00:07:35,120 --> 00:07:37,199
proof was already identified and

193
00:07:37,199 --> 00:07:40,319
described by nicolosi at al 15 years

194
00:07:40,319 --> 00:07:42,000
earlier in their work on two-party

195
00:07:42,000 --> 00:07:44,240
signatures

196
00:07:44,240 --> 00:07:46,639
in fact nicolosia all had to limit the

197
00:07:46,639 --> 00:07:48,800
number of concurrent sessions supported

198
00:07:48,800 --> 00:07:50,879
by their scheme in order to sidestep the

199
00:07:50,879 --> 00:07:54,319
issue and obtain a valid security proof

200
00:07:54,319 --> 00:07:55,759
but apparently

201
00:07:55,759 --> 00:07:57,440
neither the music one authors nor

202
00:07:57,440 --> 00:07:59,520
drivers at all were aware of this work

203
00:07:59,520 --> 00:08:01,919
and also we learned about the work only

204
00:08:01,919 --> 00:08:04,000
when dotis brought it to our attention

205
00:08:04,000 --> 00:08:06,240
after we presented a preliminary version

206
00:08:06,240 --> 00:08:08,720
of music 2 at real world crypto earlier

207
00:08:08,720 --> 00:08:11,960
this year

208
00:08:14,240 --> 00:08:16,319
we will now continue by warming up our

209
00:08:16,319 --> 00:08:18,639
memory of schnoor signatures and examine

210
00:08:18,639 --> 00:08:20,479
music one and why it's a three round

211
00:08:20,479 --> 00:08:21,840
protocol

212
00:08:21,840 --> 00:08:24,319
then we move our focus to music two and

213
00:08:24,319 --> 00:08:26,400
explain how to properly get rid of the

214
00:08:26,400 --> 00:08:28,800
communication round that had been added

215
00:08:28,800 --> 00:08:31,759
in music 1. we'll obtain a simple 2

216
00:08:31,759 --> 00:08:34,320
round protocol and we will explain why

217
00:08:34,320 --> 00:08:36,320
in some situations it's even more

218
00:08:36,320 --> 00:08:39,360
efficient than 2 rounds

219
00:08:39,360 --> 00:08:41,599
before we get to multi-signature let us

220
00:08:41,599 --> 00:08:43,200
quickly go over the definition of

221
00:08:43,200 --> 00:08:45,680
schnoor signatures we have a secret key

222
00:08:45,680 --> 00:08:47,760
x and a public key that is g to the

223
00:08:47,760 --> 00:08:50,240
power of x where g is the generator of a

224
00:08:50,240 --> 00:08:52,000
group in which we assume the discrete

225
00:08:52,000 --> 00:08:54,720
logarithm is hard

226
00:08:54,720 --> 00:08:56,560
note that we are using multiplicative

227
00:08:56,560 --> 00:08:59,519
notation for the group operations

228
00:08:59,519 --> 00:09:01,920
in order to sign a message m with a

229
00:09:01,920 --> 00:09:07,120
secret key we draw a fresh scalar r

230
00:09:07,760 --> 00:09:10,399
and compute a commitment capital r equal

231
00:09:10,399 --> 00:09:13,680
to g to the power of r

232
00:09:13,680 --> 00:09:18,160
capital r is typically called the nonce

233
00:09:19,200 --> 00:09:21,360
then we obtain a via chemist style

234
00:09:21,360 --> 00:09:23,519
challenge by hashing the public key the

235
00:09:23,519 --> 00:09:25,839
non-send the message

236
00:09:25,839 --> 00:09:27,519
we compute s

237
00:09:27,519 --> 00:09:29,680
as the secret key times the challenge

238
00:09:29,680 --> 00:09:33,680
plus r and return capital r and s

239
00:09:33,680 --> 00:09:37,680
in order to verify a signature

240
00:09:37,680 --> 00:09:39,279
rs

241
00:09:39,279 --> 00:09:42,480
of a message m

242
00:09:42,560 --> 00:09:44,640
for a public key

243
00:09:44,640 --> 00:09:47,680
we first compute the challenge hash

244
00:09:47,680 --> 00:09:50,959
and then use group operations to verify

245
00:09:50,959 --> 00:09:55,439
that the s value was computed correctly

246
00:09:56,320 --> 00:09:58,720
now let's look at music 1 schnorr

247
00:09:58,720 --> 00:10:02,880
multi-signatures with key aggregation

248
00:10:03,120 --> 00:10:05,120
conceptually it's straightforward to

249
00:10:05,120 --> 00:10:07,760
construct correct but insecure

250
00:10:07,760 --> 00:10:09,920
multi-signatures from what we've already

251
00:10:09,920 --> 00:10:12,320
seen about schnoor signatures

252
00:10:12,320 --> 00:10:14,880
assume for simplicity that we only have

253
00:10:14,880 --> 00:10:16,320
two signers

254
00:10:16,320 --> 00:10:19,839
each with a secret and a public key

255
00:10:19,839 --> 00:10:21,600
we can multiply the public keys to

256
00:10:21,600 --> 00:10:23,200
create an aggregate public key and

257
00:10:23,200 --> 00:10:28,000
similarly we can multiply the nonsense

258
00:10:28,000 --> 00:10:30,240
it's easy to check that if the signers

259
00:10:30,240 --> 00:10:33,040
create partial signatures s1 and s2 for

260
00:10:33,040 --> 00:10:34,560
the same message

261
00:10:34,560 --> 00:10:37,440
then the sum s of the partial signatures

262
00:10:37,440 --> 00:10:40,480
and the product r

263
00:10:40,480 --> 00:10:43,200
of nonsense is a valid schnorr signature

264
00:10:43,200 --> 00:10:46,720
for the aggregate public key

265
00:10:46,720 --> 00:10:50,240
this scheme is insecure for two reasons

266
00:10:50,240 --> 00:10:52,399
the first reason is that is vulnerable

267
00:10:52,399 --> 00:10:55,279
to key attacks in which the attacker

268
00:10:55,279 --> 00:10:57,360
chooses his public key depending on the

269
00:10:57,360 --> 00:10:59,920
public key of the victim signer in order

270
00:10:59,920 --> 00:11:01,760
to cancel out the public key of the

271
00:11:01,760 --> 00:11:03,200
victim signer

272
00:11:03,200 --> 00:11:06,160
rogue key attack

273
00:11:07,279 --> 00:11:09,279
the common defense against row key

274
00:11:09,279 --> 00:11:11,600
attacks is to add a proof of possession

275
00:11:11,600 --> 00:11:14,000
to each public key that is a zero

276
00:11:14,000 --> 00:11:15,600
knowledge public

277
00:11:15,600 --> 00:11:17,519
zero knowledge proof of knowledge that

278
00:11:17,519 --> 00:11:19,920
shows that the owner of the public key

279
00:11:19,920 --> 00:11:22,800
knows the corresponding secret key

280
00:11:22,800 --> 00:11:25,279
the contribution of music one was to

281
00:11:25,279 --> 00:11:28,320
avoid the need for proofs of possession

282
00:11:28,320 --> 00:11:30,959
instead the individual public keys are

283
00:11:30,959 --> 00:11:33,040
not just multiplied but there are

284
00:11:33,040 --> 00:11:35,360
additional exponents that are derived

285
00:11:35,360 --> 00:11:37,519
via a hash function

286
00:11:37,519 --> 00:11:40,880
to create key aggregation exponent ai we

287
00:11:40,880 --> 00:11:43,279
hash the if key together with the

288
00:11:43,279 --> 00:11:47,040
multiset of all keys

289
00:11:47,680 --> 00:11:49,279
the second essential improvement over

290
00:11:49,279 --> 00:11:51,200
the insecure stroman scheme is that

291
00:11:51,200 --> 00:11:54,160
music one has a third round which runs

292
00:11:54,160 --> 00:11:56,560
before the other two rounds in that

293
00:11:56,560 --> 00:11:59,360
round everyone sends a hash based

294
00:11:59,360 --> 00:12:01,600
commitment to their nons before they

295
00:12:01,600 --> 00:12:05,519
reveal their nons in the second round

296
00:12:05,519 --> 00:12:07,760
the main purpose of music 2 is to get

297
00:12:07,760 --> 00:12:11,319
rid of this round

298
00:12:11,839 --> 00:12:13,920
so why can't we just drop the commitment

299
00:12:13,920 --> 00:12:15,279
round

300
00:12:15,279 --> 00:12:17,519
if we drop the commitment round we will

301
00:12:17,519 --> 00:12:20,079
we will arrive at the flawed two-round

302
00:12:20,079 --> 00:12:22,399
scheme in the early revision of music

303
00:12:22,399 --> 00:12:23,200
one

304
00:12:23,200 --> 00:12:26,079
so the simple answer to this question is

305
00:12:26,079 --> 00:12:28,000
that when we drop the round then there

306
00:12:28,000 --> 00:12:30,160
will be known attacks namely i mentioned

307
00:12:30,160 --> 00:12:32,639
the attacks by drivers at all and by ben

308
00:12:32,639 --> 00:12:35,440
hamudah at all but it is insightful to

309
00:12:35,440 --> 00:12:37,519
look at why the security proof was

310
00:12:37,519 --> 00:12:39,839
flawed

311
00:12:40,240 --> 00:12:41,279
the

312
00:12:41,279 --> 00:12:43,519
security proof of the flawed music one

313
00:12:43,519 --> 00:12:45,760
scheme is based on the one more discrete

314
00:12:45,760 --> 00:12:48,240
logarithm problem it is a natural

315
00:12:48,240 --> 00:12:50,560
generalization of the discrete logarithm

316
00:12:50,560 --> 00:12:52,160
problem

317
00:12:52,160 --> 00:12:54,800
first the adversary gets k discrete

318
00:12:54,800 --> 00:12:57,040
logarithm challenges from the challenger

319
00:12:57,040 --> 00:12:59,920
who is then able to ask for k minus 1

320
00:12:59,920 --> 00:13:04,399
discrete logarithm oracle queries

321
00:13:05,680 --> 00:13:08,240
the adversary wins if it computes the

322
00:13:08,240 --> 00:13:12,000
discrete logarithm of all k challenges

323
00:13:12,000 --> 00:13:14,480
one can see that the ordinary discrete

324
00:13:14,480 --> 00:13:17,279
logarithm corresponds to omdl with k

325
00:13:17,279 --> 00:13:18,839
equal to

326
00:13:18,839 --> 00:13:22,320
one omdl has been used for other

327
00:13:22,320 --> 00:13:23,920
interactive variants of schnorr

328
00:13:23,920 --> 00:13:26,800
signatures for example blind signatures

329
00:13:26,800 --> 00:13:29,600
omdl is useful in security proofs

330
00:13:29,600 --> 00:13:32,639
because it lets the reduction borrow dl

331
00:13:32,639 --> 00:13:35,200
oracle queries during runtime and only

332
00:13:35,200 --> 00:13:38,240
needs to solve challenges in the end

333
00:13:38,240 --> 00:13:41,199
as a side note in the music 2 paper we

334
00:13:41,199 --> 00:13:43,760
in fact don't use the omdl assumption

335
00:13:43,760 --> 00:13:47,519
but instead the weaker algebraic omdl or

336
00:13:47,519 --> 00:13:49,839
aomdl assumption

337
00:13:49,839 --> 00:13:51,680
we're the first to describe this

338
00:13:51,680 --> 00:13:53,519
assumption which is immediately implied

339
00:13:53,519 --> 00:13:55,600
by the omdl assumption

340
00:13:55,600 --> 00:13:58,880
in contrast to omdl the benefit of aomdl

341
00:13:58,880 --> 00:14:01,760
is that it's a falsifiable assumption

342
00:14:01,760 --> 00:14:03,760
a quick look at the existing literature

343
00:14:03,760 --> 00:14:05,760
reveals that essentially all positive

344
00:14:05,760 --> 00:14:08,800
security results that are based on omdl

345
00:14:08,800 --> 00:14:11,760
can be based on the weaker aomdl

346
00:14:11,760 --> 00:14:13,600
in the remainder of the talk we'll

347
00:14:13,600 --> 00:14:16,480
ignore aomdl and stick to the well-known

348
00:14:16,480 --> 00:14:19,120
but stronger omdl assumption for

349
00:14:19,120 --> 00:14:21,519
simplicity but if you're interested in

350
00:14:21,519 --> 00:14:23,760
the details of aomdl or if you're

351
00:14:23,760 --> 00:14:25,760
planning to use the omdl assumption in

352
00:14:25,760 --> 00:14:27,839
the future we recommend you have a look

353
00:14:27,839 --> 00:14:31,240
at our paper

354
00:14:34,079 --> 00:14:36,160
here's an outline of a proof that

355
00:14:36,160 --> 00:14:38,639
attempts to prove the flawed music one

356
00:14:38,639 --> 00:14:41,360
scheme secure under the olmdl assumption

357
00:14:41,360 --> 00:14:43,680
in the random oracle model

358
00:14:43,680 --> 00:14:46,079
given a successful forger a

359
00:14:46,079 --> 00:14:49,040
there is a reduction b against omdl

360
00:14:49,040 --> 00:14:49,760
which

361
00:14:49,760 --> 00:14:50,880
first

362
00:14:50,880 --> 00:14:53,040
gets a dl challenge u and sets public

363
00:14:53,040 --> 00:14:55,839
key x1 equal to u

364
00:14:55,839 --> 00:14:59,600
then b runs forger a on public key x1

365
00:14:59,600 --> 00:15:02,079
somehow b simulates the on assigner

366
00:15:02,079 --> 00:15:04,079
without the secret key where the secret

367
00:15:04,079 --> 00:15:05,680
key is equal to the discrete logarithm

368
00:15:05,680 --> 00:15:07,760
of the challenge

369
00:15:07,760 --> 00:15:09,839
and somehow b needs to fork the

370
00:15:09,839 --> 00:15:12,320
execution of the forger a to obtain the

371
00:15:12,320 --> 00:15:14,720
secret key from the forgery

372
00:15:14,720 --> 00:15:17,440
finally b outputs the secret key which

373
00:15:17,440 --> 00:15:20,320
is also the solution of the first dl

374
00:15:20,320 --> 00:15:22,480
challenge u

375
00:15:22,480 --> 00:15:24,639
and the forking lemma will take care of

376
00:15:24,639 --> 00:15:27,920
the details and the probabilities

377
00:15:27,920 --> 00:15:30,320
at this high level of abstraction there

378
00:15:30,320 --> 00:15:32,720
is only a single dl challenge and this

379
00:15:32,720 --> 00:15:34,720
outline looks like a normal reduction to

380
00:15:34,720 --> 00:15:35,920
dl

381
00:15:35,920 --> 00:15:38,320
omdl will come into play only when

382
00:15:38,320 --> 00:15:40,720
simulating the honest signer for this

383
00:15:40,720 --> 00:15:42,880
step the reduction b will obtain

384
00:15:42,880 --> 00:15:45,360
additional dll challenges for each

385
00:15:45,360 --> 00:15:47,440
additional dl challenge the reduction

386
00:15:47,440 --> 00:15:50,880
gets 1dl oracle query for free as long

387
00:15:50,880 --> 00:15:52,959
as it's able to solve all additional

388
00:15:52,959 --> 00:15:55,839
challenges so in order to solve the omdl

389
00:15:55,839 --> 00:15:58,000
problem the reduction needs to make sure

390
00:15:58,000 --> 00:15:59,839
that there's a one-to-one correspondence

391
00:15:59,839 --> 00:16:01,839
between dl challenges and dl oracle

392
00:16:01,839 --> 00:16:04,320
queries during the simulation

393
00:16:04,320 --> 00:16:07,040
then the first dl challenge u is exactly

394
00:16:07,040 --> 00:16:08,720
the one more challenge that the

395
00:16:08,720 --> 00:16:11,839
reduction will solve

396
00:16:11,920 --> 00:16:14,079
we will now see how the reduction can

397
00:16:14,079 --> 00:16:16,800
simulate signing without the secret key

398
00:16:16,800 --> 00:16:19,600
in the omdl setting on the right side we

399
00:16:19,600 --> 00:16:22,720
have the insecure music 1 scheme

400
00:16:22,720 --> 00:16:25,120
the reduction plays signer 1 the forger

401
00:16:25,120 --> 00:16:26,639
assigner 2.

402
00:16:26,639 --> 00:16:28,959
for every sign-in query the reduction

403
00:16:28,959 --> 00:16:31,519
gets a fresh dl challenge r1 and sends

404
00:16:31,519 --> 00:16:34,320
it as nons to the forger

405
00:16:34,320 --> 00:16:36,720
then in order to sign without the secret

406
00:16:36,720 --> 00:16:40,160
key x1 the reduction makes use of the dl

407
00:16:40,160 --> 00:16:44,000
oracle it computes partial signature s1

408
00:16:44,000 --> 00:16:47,040
by querying the dl oracle with x to the

409
00:16:47,040 --> 00:16:49,600
power of aggregation exponent a times

410
00:16:49,600 --> 00:16:53,199
signature challenged c multiplied by r

411
00:16:53,199 --> 00:16:54,639
one

412
00:16:54,639 --> 00:16:56,399
in the end the reduction learns the

413
00:16:56,399 --> 00:16:57,920
secret k x one

414
00:16:57,920 --> 00:16:59,920
and can solve the signature equation s

415
00:16:59,920 --> 00:17:03,120
one equal to x one times c plus r one

416
00:17:03,120 --> 00:17:06,160
for the dl challenge r1

417
00:17:06,160 --> 00:17:08,640
to understand what can go wrong here we

418
00:17:08,640 --> 00:17:12,079
focus on the signature challenge c

419
00:17:12,079 --> 00:17:15,439
the forger can choose r2 after having

420
00:17:15,439 --> 00:17:19,119
seen r1 and is therefore able to buy us

421
00:17:19,119 --> 00:17:21,439
the hash c

422
00:17:21,439 --> 00:17:23,280
we will see why this is a problem on the

423
00:17:23,280 --> 00:17:24,640
next slide

424
00:17:24,640 --> 00:17:26,559
this would not be possible with the

425
00:17:26,559 --> 00:17:28,480
initial non's commitment round in the

426
00:17:28,480 --> 00:17:32,919
secure music one scheme

427
00:17:33,440 --> 00:17:36,640
what we want is that for a dl challenge

428
00:17:36,640 --> 00:17:39,679
r1 the reduction makes a single dl query

429
00:17:39,679 --> 00:17:42,000
to obtain s1

430
00:17:42,000 --> 00:17:45,039
however if the forger is forked after

431
00:17:45,039 --> 00:17:47,840
seeing r1 and before sending its own

432
00:17:47,840 --> 00:17:49,360
non-r2

433
00:17:49,360 --> 00:17:52,720
it can send a different r2 which results

434
00:17:52,720 --> 00:17:55,039
in a different signature challenge

435
00:17:55,039 --> 00:17:58,480
c prime in the upper execution

436
00:17:58,480 --> 00:18:00,240
this means that for a single dl

437
00:18:00,240 --> 00:18:02,480
challenge the reduction has to make two

438
00:18:02,480 --> 00:18:05,200
dlo dl oracle queries in order to

439
00:18:05,200 --> 00:18:07,360
simulate signing which ultimately

440
00:18:07,360 --> 00:18:09,600
prevents the reduction from winning the

441
00:18:09,600 --> 00:18:12,559
omdl game

442
00:18:13,280 --> 00:18:15,520
since both music 1 and music 2 support

443
00:18:15,520 --> 00:18:17,280
key aggregation without proofs of

444
00:18:17,280 --> 00:18:20,080
possession it is not sufficient to fork

445
00:18:20,080 --> 00:18:23,280
the execution of the forger only once

446
00:18:23,280 --> 00:18:25,760
instead the forking lemma is applied

447
00:18:25,760 --> 00:18:26,960
twice

448
00:18:26,960 --> 00:18:29,440
first to the random oracle queries for

449
00:18:29,440 --> 00:18:31,840
the key aggregation exponent and then to

450
00:18:31,840 --> 00:18:34,400
the queries for the signature challenge

451
00:18:34,400 --> 00:18:36,960
this results in for execution of the

452
00:18:36,960 --> 00:18:39,760
attacker and in the worst case the

453
00:18:39,760 --> 00:18:42,640
reduction may need even four dl queries

454
00:18:42,640 --> 00:18:46,320
for a single dl challenge

455
00:18:46,400 --> 00:18:49,919
we will now see how music 2 fixes this

456
00:18:49,919 --> 00:18:51,679
how can we fix this

457
00:18:51,679 --> 00:18:55,120
remember that we obtain one dl query per

458
00:18:55,120 --> 00:18:58,080
dl challenge and remember that the dl

459
00:18:58,080 --> 00:19:00,320
challenge is used as nonce

460
00:19:00,320 --> 00:19:02,640
so the simple answer is that the signer

461
00:19:02,640 --> 00:19:06,080
uses four nonces

462
00:19:08,480 --> 00:19:10,480
instead of sending just a single nonce

463
00:19:10,480 --> 00:19:13,440
every signer i sends four nonces ri

464
00:19:13,440 --> 00:19:16,640
prime ri prime prime and so on and

465
00:19:16,640 --> 00:19:19,120
effectively uses a random linear

466
00:19:19,120 --> 00:19:23,039
combination ri equal to ri prime times

467
00:19:23,039 --> 00:19:25,200
ri2 prime to the b

468
00:19:25,200 --> 00:19:28,880
times ri3 prime to the b square times ri

469
00:19:28,880 --> 00:19:31,520
4 prime to the b cube

470
00:19:31,520 --> 00:19:34,559
the exponent b is set by hashing what is

471
00:19:34,559 --> 00:19:36,320
essentially essentially the entire

472
00:19:36,320 --> 00:19:38,960
protocol input and transcript after the

473
00:19:38,960 --> 00:19:40,880
non-exchange round

474
00:19:40,880 --> 00:19:43,440
that is the aggregate public key

475
00:19:43,440 --> 00:19:45,840
the message and the nonsense of all

476
00:19:45,840 --> 00:19:47,120
signers

477
00:19:47,120 --> 00:19:49,120
note that we don't simply concatenate

478
00:19:49,120 --> 00:19:51,120
all nonsense but instead we multiply

479
00:19:51,120 --> 00:19:53,200
them this is just a minor tweak that can

480
00:19:53,200 --> 00:19:56,080
be ignored for the purpose of this talk

481
00:19:56,080 --> 00:19:58,000
the randomness in b will ensure that the

482
00:19:58,000 --> 00:20:00,000
resulting linear combination is

483
00:20:00,000 --> 00:20:02,400
different in each of the executions and

484
00:20:02,400 --> 00:20:04,799
thus the reduction obtains a linear

485
00:20:04,799 --> 00:20:07,280
independent equation system that he can

486
00:20:07,280 --> 00:20:10,720
solve for the dls in of all four

487
00:20:10,720 --> 00:20:13,200
involved dl challenges

488
00:20:13,200 --> 00:20:15,039
the simple idea is the main insight of

489
00:20:15,039 --> 00:20:17,919
our proof but we know that very careful

490
00:20:17,919 --> 00:20:19,520
programming of the involved random

491
00:20:19,520 --> 00:20:22,320
oracles is necessary to obtain a full

492
00:20:22,320 --> 00:20:24,960
rigorous security proof

493
00:20:24,960 --> 00:20:27,360
for obvious reasons we can't show the

494
00:20:27,360 --> 00:20:28,960
full proof here

495
00:20:28,960 --> 00:20:31,280
in the talk but refer to you

496
00:20:31,280 --> 00:20:34,960
refer you to the paper instead

497
00:20:34,960 --> 00:20:37,679
we promised a simple scheme but now we

498
00:20:37,679 --> 00:20:40,880
require four nonces per signer

499
00:20:40,880 --> 00:20:43,120
the number four corresponds to the four

500
00:20:43,120 --> 00:20:45,360
executions of the forger

501
00:20:45,360 --> 00:20:48,640
so the question arises if that

502
00:20:48,640 --> 00:20:50,720
is only an artifact of the proof

503
00:20:50,720 --> 00:20:52,320
technique

504
00:20:52,320 --> 00:20:54,960
the answer is yes most likely since only

505
00:20:54,960 --> 00:20:57,360
two nonces are needed for music two in

506
00:20:57,360 --> 00:21:00,000
the algebraic group model

507
00:21:00,000 --> 00:21:00,960
we

508
00:21:00,960 --> 00:21:03,200
don't go into detail about the agm proof

509
00:21:03,200 --> 00:21:05,840
because it's very mechanical and tedious

510
00:21:05,840 --> 00:21:08,400
luckily alper and burgess independently

511
00:21:08,400 --> 00:21:10,559
developed a proof in the agm of an

512
00:21:10,559 --> 00:21:13,120
almost identical multi-signature scheme

513
00:21:13,120 --> 00:21:16,720
that confirms our results

514
00:21:16,720 --> 00:21:19,280
we summarize the security results for a

515
00:21:19,280 --> 00:21:20,720
given number of nonsense in the

516
00:21:20,720 --> 00:21:23,039
following table

517
00:21:23,039 --> 00:21:25,200
with a single nonce we know a practical

518
00:21:25,200 --> 00:21:26,880
attack

519
00:21:26,880 --> 00:21:29,280
music two with four or more nonces can

520
00:21:29,280 --> 00:21:33,840
be proven secure under aomdl in the rom

521
00:21:33,840 --> 00:21:36,640
with two nonces it is secure under aomdl

522
00:21:36,640 --> 00:21:38,559
in the rom when we additionally assume

523
00:21:38,559 --> 00:21:41,360
the algebraic group model

524
00:21:41,360 --> 00:21:43,600
this result is shared with a concurrent

525
00:21:43,600 --> 00:21:45,600
work titled two round-trip schnoor

526
00:21:45,600 --> 00:21:47,840
multi-signatures via delinearized

527
00:21:47,840 --> 00:21:49,679
witnesses by alpine burgess which

528
00:21:49,679 --> 00:21:51,440
appears at the very same conference as

529
00:21:51,440 --> 00:21:53,919
this work

530
00:21:54,000 --> 00:21:55,919
we finally have a look at the scheme

531
00:21:55,919 --> 00:21:58,000
that was developed in this work music

532
00:21:58,000 --> 00:21:59,280
two

533
00:21:59,280 --> 00:22:01,520
it differs from the early flawed variant

534
00:22:01,520 --> 00:22:03,280
of music one by letting each signer

535
00:22:03,280 --> 00:22:06,320
generate two and send two nonces instead

536
00:22:06,320 --> 00:22:08,960
of one so this is the secure the

537
00:22:08,960 --> 00:22:12,080
variance secure in the agm

538
00:22:12,080 --> 00:22:14,640
each signer's effective non-ri is a

539
00:22:14,640 --> 00:22:16,559
random linear combination of its two

540
00:22:16,559 --> 00:22:19,440
nonces with random exponent b

541
00:22:19,440 --> 00:22:21,440
this exponent is the hash of the

542
00:22:21,440 --> 00:22:23,440
aggregate public key the message the

543
00:22:23,440 --> 00:22:25,280
product of all signers first nonsense

544
00:22:25,280 --> 00:22:27,280
and the product of all sinus second

545
00:22:27,280 --> 00:22:28,480
nonsense

546
00:22:28,480 --> 00:22:30,240
each signer then creates a partial

547
00:22:30,240 --> 00:22:34,480
signature using their effective nonce

548
00:22:35,360 --> 00:22:36,960
why do we so much bother with a

549
00:22:36,960 --> 00:22:39,440
distinction between two and three rounds

550
00:22:39,440 --> 00:22:42,640
if the scheme is interactive anyway

551
00:22:42,640 --> 00:22:45,039
the answer is that it is not only the

552
00:22:45,039 --> 00:22:47,679
number of rounds that matter in practice

553
00:22:47,679 --> 00:22:50,000
the first round of music two can be

554
00:22:50,000 --> 00:22:51,919
securely performed without knowing the

555
00:22:51,919 --> 00:22:53,360
message m

556
00:22:53,360 --> 00:22:55,440
this makes signing effectively

557
00:22:55,440 --> 00:22:58,240
non-interactive

558
00:22:58,240 --> 00:23:00,240
at any time that is convenient to the

559
00:23:00,240 --> 00:23:03,120
signers the nuances can be pre-shared by

560
00:23:03,120 --> 00:23:06,000
executing the first communication round

561
00:23:06,000 --> 00:23:07,280
for example

562
00:23:07,280 --> 00:23:09,440
the two ends of a payment channel can

563
00:23:09,440 --> 00:23:11,200
pre-share nonsense when the connection

564
00:23:11,200 --> 00:23:12,559
is established

565
00:23:12,559 --> 00:23:14,960
then when a message to sign arrives for

566
00:23:14,960 --> 00:23:17,440
example a payment to forward signing is

567
00:23:17,440 --> 00:23:20,720
just a single message on the wire

568
00:23:20,720 --> 00:23:22,480
this is a novelty in a dl setting

569
00:23:22,480 --> 00:23:24,320
without pairings and it's probably the

570
00:23:24,320 --> 00:23:26,240
best round efficiency you achieve

571
00:23:26,240 --> 00:23:29,120
without pairings

572
00:23:29,919 --> 00:23:32,000
to recap

573
00:23:32,000 --> 00:23:34,320
the key technical idea of our work is

574
00:23:34,320 --> 00:23:37,120
that every signer uses a random linear

575
00:23:37,120 --> 00:23:40,080
combination of multiple nonces instead

576
00:23:40,080 --> 00:23:42,080
of a single nonce

577
00:23:42,080 --> 00:23:44,480
a remarkable fact is that his idea

578
00:23:44,480 --> 00:23:47,760
appeared concurrently in three works

579
00:23:47,760 --> 00:23:49,440
and it's great to see that the idea has

580
00:23:49,440 --> 00:23:51,840
been independently confirmed

581
00:23:51,840 --> 00:23:53,760
we already mentioned the work by alpine

582
00:23:53,760 --> 00:23:56,720
burgess in addition the thrust scheme by

583
00:23:56,720 --> 00:23:59,919
comloin goldberg uses the very same idea

584
00:23:59,919 --> 00:24:01,679
in the threshold setting instead of the

585
00:24:01,679 --> 00:24:03,600
multi-signature setting

586
00:24:03,600 --> 00:24:05,440
all three results differ in their

587
00:24:05,440 --> 00:24:07,600
details of their schemes and provable

588
00:24:07,600 --> 00:24:09,760
security guarantees but a detailed

589
00:24:09,760 --> 00:24:14,400
comparison is out of scope for this talk

590
00:24:15,360 --> 00:24:18,080
with music 2 multi-signatures look like

591
00:24:18,080 --> 00:24:20,080
ordinary schnorr signatures which are

592
00:24:20,080 --> 00:24:23,679
compact and allow for fast verification

593
00:24:23,679 --> 00:24:27,039
music 2 is a practical and simple 2

594
00:24:27,039 --> 00:24:29,360
round signing protocol

595
00:24:29,360 --> 00:24:31,279
the first round can be pre-computed

596
00:24:31,279 --> 00:24:33,600
without knowing the message m so signing

597
00:24:33,600 --> 00:24:36,240
is almost non-interactive

598
00:24:36,240 --> 00:24:39,679
music 2 has concur concurrent security

599
00:24:39,679 --> 00:24:43,120
under aomdl in rom for two nonsense or

600
00:24:43,120 --> 00:24:46,559
rom plus ajm for four nonsense if you

601
00:24:46,559 --> 00:24:48,640
want to learn more about music too then

602
00:24:48,640 --> 00:24:53,400
have a look at our paper on eprint

