1
00:00:04,000 --> 00:00:06,960
hello everyone my name is ivan sang

2
00:00:06,960 --> 00:00:09,040
today i'm happy to give a talk about our

3
00:00:09,040 --> 00:00:12,240
results at last efficient and scalable

4
00:00:12,240 --> 00:00:14,960
npc in the honest majority setting

5
00:00:14,960 --> 00:00:17,280
course

6
00:00:19,119 --> 00:00:22,960
and antigone polychroniado

7
00:00:24,080 --> 00:00:26,240
multi-party computation allows several

8
00:00:26,240 --> 00:00:28,480
mutual distrusted parties to evaluate a

9
00:00:28,480 --> 00:00:31,359
function on their private inputs

10
00:00:31,359 --> 00:00:33,600
it guarantees that the protocol

11
00:00:33,600 --> 00:00:36,239
execution does not leak anything about

12
00:00:36,239 --> 00:00:38,719
the individual inputs beyond what can be

13
00:00:38,719 --> 00:00:41,520
inferred from the function output

14
00:00:41,520 --> 00:00:44,079
usually the functionality is represented

15
00:00:44,079 --> 00:00:45,440
as a circuit

16
00:00:45,440 --> 00:00:48,000
and in particular here we choose to use

17
00:00:48,000 --> 00:00:50,079
an arithmetic circuit over a finite

18
00:00:50,079 --> 00:00:52,960
field the circuit supports addition and

19
00:00:52,960 --> 00:00:56,239
multiplication operations

20
00:00:56,239 --> 00:00:58,239
in this work we focus on the

21
00:00:58,239 --> 00:01:00,480
information's direct setting with eins

22
00:01:00,480 --> 00:01:03,039
majority and assume a p2p channel

23
00:01:03,039 --> 00:01:05,438
between every pair of parties

24
00:01:05,438 --> 00:01:07,439
we are interested in both the semi-auto

25
00:01:07,439 --> 00:01:09,760
security and the malicious security with

26
00:01:09,760 --> 00:01:11,119
the board

27
00:01:11,119 --> 00:01:13,520
in the following we use n for the number

28
00:01:13,520 --> 00:01:15,840
of parties and t for the number of

29
00:01:15,840 --> 00:01:18,720
credit parties

30
00:01:20,479 --> 00:01:22,400
before we move on i would like to

31
00:01:22,400 --> 00:01:24,400
motivate my talk by answering the

32
00:01:24,400 --> 00:01:27,119
following two questions

33
00:01:27,119 --> 00:01:28,960
first why do we care about the

34
00:01:28,960 --> 00:01:31,680
unconditional npc

35
00:01:31,680 --> 00:01:34,560
a key feature of the unconditional npc

36
00:01:34,560 --> 00:01:37,040
is that we do not need any expensive

37
00:01:37,040 --> 00:01:39,920
cryptographic primitive such as public

38
00:01:39,920 --> 00:01:42,720
encryption or obvious transfer

39
00:01:42,720 --> 00:01:44,079
and the protocol is secure

40
00:01:44,079 --> 00:01:45,600
unconditionally

41
00:01:45,600 --> 00:01:47,200
comparing with protocols in the

42
00:01:47,200 --> 00:01:48,799
computational setting

43
00:01:48,799 --> 00:01:50,880
one major benefit is that

44
00:01:50,880 --> 00:01:52,560
product costs usually do not require

45
00:01:52,560 --> 00:01:54,799
complicated and time-consuming local

46
00:01:54,799 --> 00:01:56,079
computations

47
00:01:56,079 --> 00:01:58,560
as a result the most efficient mpc

48
00:01:58,560 --> 00:02:01,280
protocols are in the unconditional mpc

49
00:02:01,280 --> 00:02:03,759
paradigm

50
00:02:04,240 --> 00:02:06,320
second why do we focus on the

51
00:02:06,320 --> 00:02:08,720
communication complexity

52
00:02:08,720 --> 00:02:10,318
since the local computations are

53
00:02:10,318 --> 00:02:13,120
typically simple often just a series of

54
00:02:13,120 --> 00:02:14,640
linear operations

55
00:02:14,640 --> 00:02:16,959
the efficiency of a protocol in the real

56
00:02:16,959 --> 00:02:19,599
world is dominated by its communication

57
00:02:19,599 --> 00:02:22,480
complexity

58
00:02:22,480 --> 00:02:24,560
a view known semi arms protocol was

59
00:02:24,560 --> 00:02:26,879
introduced by dam guard and nelson in

60
00:02:26,879 --> 00:02:28,400
2007

61
00:02:28,400 --> 00:02:30,879
we refer to this protocol as the dm

62
00:02:30,879 --> 00:02:32,400
protocol

63
00:02:32,400 --> 00:02:34,640
it only requires to communicate six

64
00:02:34,640 --> 00:02:36,560
elements per multiplication gate

65
00:02:36,560 --> 00:02:37,840
property

66
00:02:37,840 --> 00:02:40,640
due to its simplicity and efficiency

67
00:02:40,640 --> 00:02:43,280
the dm protocol plays a central role in

68
00:02:43,280 --> 00:02:45,120
the progress of efficient secure

69
00:02:45,120 --> 00:02:46,560
computation

70
00:02:46,560 --> 00:02:49,120
many subsequent works have used dm

71
00:02:49,120 --> 00:02:51,440
protocol to achieve security with the

72
00:02:51,440 --> 00:02:55,040
boards or guaranteed output delivery

73
00:02:55,040 --> 00:02:57,840
however any improvement to the basic dm

74
00:02:57,840 --> 00:03:00,480
protocol has been hard to come by

75
00:03:00,480 --> 00:03:02,800
an exception is the recent work of goya

76
00:03:02,800 --> 00:03:05,200
and others who proposed a marginal

77
00:03:05,200 --> 00:03:08,000
improvement from six elements to 5.5

78
00:03:08,000 --> 00:03:10,480
elements

79
00:03:10,879 --> 00:03:13,680
in this work we proposed atlas an

80
00:03:13,680 --> 00:03:16,239
unconditionally secure mpc protocol in

81
00:03:16,239 --> 00:03:18,959
the under majority setting with reduced

82
00:03:18,959 --> 00:03:21,200
communication complexity over the

83
00:03:21,200 --> 00:03:23,519
celebrated dm protocol

84
00:03:23,519 --> 00:03:26,000
concretely we improved the basic dm

85
00:03:26,000 --> 00:03:28,319
protocol leading to a communication

86
00:03:28,319 --> 00:03:30,640
complexity of four elements per

87
00:03:30,640 --> 00:03:34,079
multiplication gate property

88
00:03:34,159 --> 00:03:36,879
we also construct a run efficient mbc

89
00:03:36,879 --> 00:03:39,680
protocol whose communication capacity is

90
00:03:39,680 --> 00:03:42,159
4.5 elements per multiplication gates

91
00:03:42,159 --> 00:03:47,560
per party but having the number of runs

92
00:03:49,280 --> 00:03:51,680
in the semi-arts regime the well-known

93
00:03:51,680 --> 00:03:54,239
dm protocol requires to communicate six

94
00:03:54,239 --> 00:03:55,920
elements per multiplication gate per

95
00:03:55,920 --> 00:03:57,040
party

96
00:03:57,040 --> 00:03:59,760
recently the work of goya and others

97
00:03:59,760 --> 00:04:02,080
proposed a marginal improvement and

98
00:04:02,080 --> 00:04:04,640
achieved 5.5 elements per multiplication

99
00:04:04,640 --> 00:04:06,560
gate property

100
00:04:06,560 --> 00:04:09,040
both of our constructions achieve better

101
00:04:09,040 --> 00:04:11,200
communication complexity compared with

102
00:04:11,200 --> 00:04:12,799
these two works

103
00:04:12,799 --> 00:04:15,280
in the meanwhile our second protocol

104
00:04:15,280 --> 00:04:17,199
enjoys the features that the run

105
00:04:17,199 --> 00:04:21,680
complexity is reduced by a factor of two

106
00:04:21,680 --> 00:04:24,080
in the malaysia security regime relying

107
00:04:24,080 --> 00:04:26,479
on recent techniques both of our

108
00:04:26,479 --> 00:04:28,720
protocols can achieve malicious security

109
00:04:28,720 --> 00:04:31,199
with the boards without affecting the

110
00:04:31,199 --> 00:04:34,320
concrete efficiency

111
00:04:36,320 --> 00:04:38,080
our work makes use of the standard

112
00:04:38,080 --> 00:04:40,960
xiaomi secret sharing informally

113
00:04:40,960 --> 00:04:43,199
chemical secret sharing uses a random

114
00:04:43,199 --> 00:04:46,080
polynomial to hide a single secret as

115
00:04:46,080 --> 00:04:48,479
the evaluation point zero

116
00:04:48,479 --> 00:04:50,800
recall that t is the number of cropped

117
00:04:50,800 --> 00:04:52,000
parties

118
00:04:52,000 --> 00:04:54,320
in our construction we use the chemical

119
00:04:54,320 --> 00:04:56,800
secret sharing with degree t

120
00:04:56,800 --> 00:04:59,040
it satisfies that the secret can be

121
00:04:59,040 --> 00:05:02,720
reconstructed with any t plus one shares

122
00:05:02,720 --> 00:05:04,960
and any t shares are independent of the

123
00:05:04,960 --> 00:05:07,440
secret

124
00:05:07,680 --> 00:05:10,000
we use the square brackets of x with

125
00:05:10,000 --> 00:05:12,560
subscript t to represent a degree t

126
00:05:12,560 --> 00:05:15,680
share my secret sharing of the value x

127
00:05:15,680 --> 00:05:17,440
here are two properties of the xiaomi

128
00:05:17,440 --> 00:05:19,360
sequestering scheme

129
00:05:19,360 --> 00:05:22,080
the first one is linear homomorphism

130
00:05:22,080 --> 00:05:25,039
namely adding two degree sharings x and

131
00:05:25,039 --> 00:05:27,600
y yields a degree t sharing of the

132
00:05:27,600 --> 00:05:30,080
secrets x plus y

133
00:05:30,080 --> 00:05:32,479
the second property is that multiplying

134
00:05:32,479 --> 00:05:35,039
two degree t shearings x and y

135
00:05:35,039 --> 00:05:37,680
gives a degree 2d sharing of the secret

136
00:05:37,680 --> 00:05:40,639
x times y

137
00:05:41,840 --> 00:05:44,080
in the following we will first introduce

138
00:05:44,080 --> 00:05:46,240
our construction that improves the

139
00:05:46,240 --> 00:05:48,479
concrete efficiency over the semi iron

140
00:05:48,479 --> 00:05:51,800
steam protocol

141
00:05:52,000 --> 00:05:53,919
we first review the dn multiplication

142
00:05:53,919 --> 00:05:56,479
protocol which is the core of the dm

143
00:05:56,479 --> 00:05:58,080
protocol

144
00:05:58,080 --> 00:06:01,039
given two input sharings x and y

145
00:06:01,039 --> 00:06:03,520
our goal is to compute an output sharing

146
00:06:03,520 --> 00:06:06,880
of the secret x times y

147
00:06:06,880 --> 00:06:09,520
the main observation is that multiplying

148
00:06:09,520 --> 00:06:12,319
two degrees sharing yields a sharing of

149
00:06:12,319 --> 00:06:15,360
the correct value but higher degree

150
00:06:15,360 --> 00:06:18,000
therefore the main task is to reduce the

151
00:06:18,000 --> 00:06:21,840
degree of the multiplication result

152
00:06:23,120 --> 00:06:25,280
the dn multiplication protocol starts

153
00:06:25,280 --> 00:06:27,680
with a pair of random sharings of the

154
00:06:27,680 --> 00:06:28,960
same value

155
00:06:28,960 --> 00:06:31,280
one is the degree t sharing and the

156
00:06:31,280 --> 00:06:34,080
other one is the degree 2d sharing these

157
00:06:34,080 --> 00:06:36,560
two sharings are referred to as double

158
00:06:36,560 --> 00:06:38,000
sharings

159
00:06:38,000 --> 00:06:39,759
double sharings can be efficiently

160
00:06:39,759 --> 00:06:42,560
prepared here they omit the generation

161
00:06:42,560 --> 00:06:45,840
precise for simplicity

162
00:06:47,680 --> 00:06:49,759
all parties first locally compute a

163
00:06:49,759 --> 00:06:52,400
degree to the sharing of x times y plus

164
00:06:52,400 --> 00:06:53,280
r

165
00:06:53,280 --> 00:06:55,919
each party simply multiplies shares of x

166
00:06:55,919 --> 00:06:56,960
and y

167
00:06:56,960 --> 00:07:00,638
and then at its share of r

168
00:07:01,280 --> 00:07:03,599
then the first party p1 receives the

169
00:07:03,599 --> 00:07:06,560
whole sharing of x times y plus r

170
00:07:06,560 --> 00:07:08,400
reconstruct the secrets

171
00:07:08,400 --> 00:07:10,319
and distribute the results to all other

172
00:07:10,319 --> 00:07:12,720
parties

173
00:07:13,360 --> 00:07:16,400
finally to obtain the correct results

174
00:07:16,400 --> 00:07:18,479
all parties subtract the random degree

175
00:07:18,479 --> 00:07:20,960
sharing of r from the reconstruction

176
00:07:20,960 --> 00:07:22,720
results

177
00:07:22,720 --> 00:07:24,960
this completes the description of the dn

178
00:07:24,960 --> 00:07:28,000
multiplication protocol

179
00:07:28,720 --> 00:07:31,199
note that the only interactive step is

180
00:07:31,199 --> 00:07:33,520
the second step where the first party

181
00:07:33,520 --> 00:07:36,000
needs to receive the whole sharing of x

182
00:07:36,000 --> 00:07:37,599
times y plus r

183
00:07:37,599 --> 00:07:39,520
and distribute the results to other

184
00:07:39,520 --> 00:07:42,000
parties

185
00:07:43,520 --> 00:07:47,599
in gst 20 goya and others observed that

186
00:07:47,599 --> 00:07:49,759
the first party may send shares of the

187
00:07:49,759 --> 00:07:52,160
reconstruction results rather than the

188
00:07:52,160 --> 00:07:54,639
result itself

189
00:07:54,639 --> 00:07:57,520
recall that in the original protocol the

190
00:07:57,520 --> 00:07:59,680
reconstruction result is used to compute

191
00:07:59,680 --> 00:08:02,800
the final sharing of x times y

192
00:08:02,800 --> 00:08:04,720
this is achieved by subtracting the

193
00:08:04,720 --> 00:08:07,120
random degree sharing of r from the

194
00:08:07,120 --> 00:08:10,240
reconstruction result

195
00:08:10,240 --> 00:08:12,479
note that if the first party sends

196
00:08:12,479 --> 00:08:14,879
shares of the reconstructing results

197
00:08:14,879 --> 00:08:17,039
all parties can still obtain a sharing

198
00:08:17,039 --> 00:08:18,800
of the multiplication results by

199
00:08:18,800 --> 00:08:21,360
subtracting the random sharing of r from

200
00:08:21,360 --> 00:08:23,440
the share ring distributed by the first

201
00:08:23,440 --> 00:08:24,720
party

202
00:08:24,720 --> 00:08:26,960
this observation leads to a marginal

203
00:08:26,960 --> 00:08:30,799
improvement in gsd20

204
00:08:31,360 --> 00:08:34,000
different from gs20 we make two

205
00:08:34,000 --> 00:08:36,240
observations when the first party is an

206
00:08:36,240 --> 00:08:38,959
honest party

207
00:08:39,760 --> 00:08:42,159
first when the first party receives the

208
00:08:42,159 --> 00:08:45,600
whole sharing of x times y plus r

209
00:08:45,600 --> 00:08:48,000
since p1 is the only receiver

210
00:08:48,000 --> 00:08:50,000
cropped parties do not receive any

211
00:08:50,000 --> 00:08:52,560
messages

212
00:08:53,760 --> 00:08:54,720
second

213
00:08:54,720 --> 00:08:56,720
when the first party sends shares of the

214
00:08:56,720 --> 00:08:59,519
reconstruction result to other parties

215
00:08:59,519 --> 00:09:01,760
cropping parties only receive uniform

216
00:09:01,760 --> 00:09:05,279
values as their shares

217
00:09:05,680 --> 00:09:08,160
these two observations hold even if the

218
00:09:08,160 --> 00:09:10,560
adversary knows all the shares of double

219
00:09:10,560 --> 00:09:12,160
shield rings that are used in the

220
00:09:12,160 --> 00:09:15,199
multiplication protocol

221
00:09:17,200 --> 00:09:18,320
therefore

222
00:09:18,320 --> 00:09:20,800
if the first party is an honest party

223
00:09:20,800 --> 00:09:21,680
then

224
00:09:21,680 --> 00:09:23,519
crafted parties do not learn any

225
00:09:23,519 --> 00:09:26,000
information even if we do not use

226
00:09:26,000 --> 00:09:28,880
uniform double sharings

227
00:09:28,880 --> 00:09:31,760
in other words uniform double sharings

228
00:09:31,760 --> 00:09:33,839
are only needed when the first party is

229
00:09:33,839 --> 00:09:35,200
crafted

230
00:09:35,200 --> 00:09:38,000
indeed during the protocol execution we

231
00:09:38,000 --> 00:09:39,839
cannot distinguish whether the first

232
00:09:39,839 --> 00:09:43,600
party is honest or corrupted

233
00:09:43,600 --> 00:09:45,680
our idea is to play the role of the

234
00:09:45,680 --> 00:09:48,720
first party in a round-robin way it in

235
00:09:48,720 --> 00:09:49,839
first that

236
00:09:49,839 --> 00:09:52,240
at least a half of multiplication gates

237
00:09:52,240 --> 00:09:54,800
are handled by honest parties

238
00:09:54,800 --> 00:09:56,800
hopefully we only need to prepare

239
00:09:56,800 --> 00:09:58,720
uniform double shearings for

240
00:09:58,720 --> 00:10:00,720
multiplication gates handled by crafted

241
00:10:00,720 --> 00:10:03,200
parties

242
00:10:03,600 --> 00:10:06,399
to this end our second idea is to use

243
00:10:06,399 --> 00:10:09,120
tus independent double sharings it

244
00:10:09,120 --> 00:10:11,839
ensures that the double sharings used by

245
00:10:11,839 --> 00:10:16,079
corrupted parties are uniformly random

246
00:10:16,720 --> 00:10:19,440
in summary our idea is to play the role

247
00:10:19,440 --> 00:10:21,519
of the first party in a wrong lobbying

248
00:10:21,519 --> 00:10:25,839
way and rely on the t-rex independence

249
00:10:25,839 --> 00:10:28,160
we show that all parties can locally

250
00:10:28,160 --> 00:10:30,560
transform t pairs of uniform double

251
00:10:30,560 --> 00:10:33,440
shearings into unpairs with tos

252
00:10:33,440 --> 00:10:35,120
independence

253
00:10:35,120 --> 00:10:37,279
note that we do not need to change the

254
00:10:37,279 --> 00:10:40,000
original dm protocol but just replace

255
00:10:40,000 --> 00:10:43,760
the double sharings used in the

256
00:10:44,839 --> 00:10:48,000
protocol as for the concrete efficiency

257
00:10:48,000 --> 00:10:50,160
in the dm protocol the amortized

258
00:10:50,160 --> 00:10:52,399
communication complexity per pair of

259
00:10:52,399 --> 00:10:54,880
double shear rings is four elements per

260
00:10:54,880 --> 00:10:56,079
party

261
00:10:56,079 --> 00:10:58,640
during the online phase all parties need

262
00:10:58,640 --> 00:11:01,360
to send their shares of a 2d sharing to

263
00:11:01,360 --> 00:11:03,519
the first party and receive the

264
00:11:03,519 --> 00:11:06,399
reconstruction from the first party

265
00:11:06,399 --> 00:11:09,279
therefore in the online phase each party

266
00:11:09,279 --> 00:11:11,360
needs to communicate two elements

267
00:11:11,360 --> 00:11:13,360
permutation gates

268
00:11:13,360 --> 00:11:15,839
in total the dm protocol requires to

269
00:11:15,839 --> 00:11:17,680
communicate six elements per

270
00:11:17,680 --> 00:11:20,800
multiplication gate per party

271
00:11:20,800 --> 00:11:22,880
our work reduces the number of random

272
00:11:22,880 --> 00:11:24,399
double shield rings

273
00:11:24,399 --> 00:11:25,920
specifically

274
00:11:25,920 --> 00:11:28,399
we only need two pairs of random double

275
00:11:28,399 --> 00:11:30,399
shear rings to evaluate and

276
00:11:30,399 --> 00:11:32,000
multiplication gates

277
00:11:32,000 --> 00:11:34,640
therefore we reduce the cost per pair of

278
00:11:34,640 --> 00:11:37,360
double shear rings by a factor of two

279
00:11:37,360 --> 00:11:40,640
that is two elements property

280
00:11:40,640 --> 00:11:42,800
the total communication complexity of

281
00:11:42,800 --> 00:11:47,279
our protocol becomes four elements

282
00:11:50,480 --> 00:11:52,720
now let's see how to reduce the run

283
00:11:52,720 --> 00:11:54,959
complexity without affecting the

284
00:11:54,959 --> 00:11:57,839
concrete efficiency

285
00:11:59,839 --> 00:12:01,680
can we evaluate the two layer circuits

286
00:12:01,680 --> 00:12:03,360
in parallel

287
00:12:03,360 --> 00:12:04,880
if we can answer this question

288
00:12:04,880 --> 00:12:07,680
affirmatively then we can evaluate the

289
00:12:07,680 --> 00:12:10,560
whole circuits two layers each time and

290
00:12:10,560 --> 00:12:12,959
reduce the run complexity by a factor of

291
00:12:12,959 --> 00:12:14,880
two

292
00:12:14,880 --> 00:12:17,360
clearly the main difficulty is that

293
00:12:17,360 --> 00:12:19,200
gates in the second layer require the

294
00:12:19,200 --> 00:12:22,720
results from the first layer

295
00:12:22,720 --> 00:12:24,720
for multi multiplication gate in the

296
00:12:24,720 --> 00:12:26,000
second layer

297
00:12:26,000 --> 00:12:27,839
half of the way evaluate these gates

298
00:12:27,839 --> 00:12:31,279
without learning the inputs

299
00:12:32,079 --> 00:12:34,160
we first recall the notion of b world

300
00:12:34,160 --> 00:12:35,680
triple

301
00:12:35,680 --> 00:12:38,720
a beaver triple contains three sharings

302
00:12:38,720 --> 00:12:40,800
the secrets of this and these three

303
00:12:40,800 --> 00:12:43,360
shieldings satisfied that the third

304
00:12:43,360 --> 00:12:45,760
sacred the third secret is equal to the

305
00:12:45,760 --> 00:12:49,839
multiplication of the first two secrets

306
00:12:50,639 --> 00:12:53,839
photo public values u and v

307
00:12:53,839 --> 00:12:58,160
we may write u minus a times v minus p

308
00:12:58,160 --> 00:13:02,000
as u times v minus u times v

309
00:13:02,000 --> 00:13:07,440
minus v times a plus a times b

310
00:13:07,440 --> 00:13:11,680
then if we replace a b and a times b by

311
00:13:11,680 --> 00:13:13,360
their corresponding shearings in the

312
00:13:13,360 --> 00:13:14,880
beaver triple

313
00:13:14,880 --> 00:13:16,399
we obtain a sharing of the

314
00:13:16,399 --> 00:13:19,279
multiplication results of u minus a and

315
00:13:19,279 --> 00:13:21,839
v minus b

316
00:13:22,800 --> 00:13:24,880
therefore with the help of a bureau

317
00:13:24,880 --> 00:13:27,440
triple all parties can locally multiply

318
00:13:27,440 --> 00:13:30,399
the two shearings u minus a and v minus

319
00:13:30,399 --> 00:13:33,399
b

320
00:13:34,480 --> 00:13:36,800
now let's go back to our problem

321
00:13:36,800 --> 00:13:38,480
for each multiplication gate in the

322
00:13:38,480 --> 00:13:39,839
second layer

323
00:13:39,839 --> 00:13:41,920
if the first input sharing is in the

324
00:13:41,920 --> 00:13:44,000
form of u means a

325
00:13:44,000 --> 00:13:46,160
the second input sharing is in the form

326
00:13:46,160 --> 00:13:49,440
of v minus b and all parties have the

327
00:13:49,440 --> 00:13:52,800
bigger triple a b and a times b

328
00:13:52,800 --> 00:13:55,199
then all parties can locally evaluate

329
00:13:55,199 --> 00:13:57,279
this multiplication gates as what we

330
00:13:57,279 --> 00:14:00,079
just described

331
00:14:01,680 --> 00:14:03,120
we observed that

332
00:14:03,120 --> 00:14:05,360
to prepare the build triple

333
00:14:05,360 --> 00:14:07,040
we only need to know the first two

334
00:14:07,040 --> 00:14:08,959
sharings a and b

335
00:14:08,959 --> 00:14:11,600
in particular the two public values u

336
00:14:11,600 --> 00:14:15,880
and v can be learned afterwards

337
00:14:16,480 --> 00:14:18,959
therefore if the protocol for the first

338
00:14:18,959 --> 00:14:21,040
layer satisfies that

339
00:14:21,040 --> 00:14:23,760
the output sharing is in the form of u

340
00:14:23,760 --> 00:14:26,800
minus a that is a constant minus the

341
00:14:26,800 --> 00:14:28,240
shearing

342
00:14:28,240 --> 00:14:30,320
and all parties learn the sharing a

343
00:14:30,320 --> 00:14:32,959
before evaluating skates

344
00:14:32,959 --> 00:14:35,360
then all parties can prepare the beaver

345
00:14:35,360 --> 00:14:37,360
triple at the same time as the

346
00:14:37,360 --> 00:14:41,199
evaluation of the first layer

347
00:14:41,839 --> 00:14:44,399
fortunately the original demolition

348
00:14:44,399 --> 00:14:48,480
protocol perfectly fits our need

349
00:14:48,639 --> 00:14:50,880
recall that this is the whole process of

350
00:14:50,880 --> 00:14:54,079
the dn modification protocol

351
00:14:54,079 --> 00:14:56,880
first note that the output sharing is in

352
00:14:56,880 --> 00:14:58,800
the form of a constant minus the

353
00:14:58,800 --> 00:15:00,639
shearing

354
00:15:00,639 --> 00:15:04,399
specifically here x times y plus r

355
00:15:04,399 --> 00:15:06,480
serves as the row of the constant value

356
00:15:06,480 --> 00:15:07,600
u

357
00:15:07,600 --> 00:15:10,240
and the shear wing r serves as the row

358
00:15:10,240 --> 00:15:13,120
of the shearing a thus the first the

359
00:15:13,120 --> 00:15:16,560
first property is satisfied

360
00:15:16,560 --> 00:15:19,040
for the second property note that the

361
00:15:19,040 --> 00:15:21,360
shearing r is a part of the double shear

362
00:15:21,360 --> 00:15:23,600
rings used in the protocol

363
00:15:23,600 --> 00:15:25,600
and this pair of double shear rings is

364
00:15:25,600 --> 00:15:27,440
prepared before the running of this

365
00:15:27,440 --> 00:15:28,639
protocol

366
00:15:28,639 --> 00:15:30,959
therefore our all parties learn the

367
00:15:30,959 --> 00:15:33,360
shearing r which serves as the role of

368
00:15:33,360 --> 00:15:37,519
the shearing a before evaluation

369
00:15:37,680 --> 00:15:40,639
in summary our evaluation strategy works

370
00:15:40,639 --> 00:15:42,000
as follows

371
00:15:42,000 --> 00:15:44,320
all parties first used a pair of random

372
00:15:44,320 --> 00:15:46,639
double share rings to evaluate the first

373
00:15:46,639 --> 00:15:49,519
multiplication gate

374
00:15:49,519 --> 00:15:51,920
then all parts use a different pair of

375
00:15:51,920 --> 00:15:54,160
random double sharings to evaluate the

376
00:15:54,160 --> 00:15:57,439
second multiplication gate

377
00:15:57,920 --> 00:16:00,480
in the meantime all parties use the

378
00:16:00,480 --> 00:16:02,959
sharing a from the first pair of double

379
00:16:02,959 --> 00:16:05,600
shield rings and the sharing b from the

380
00:16:05,600 --> 00:16:07,759
second pair of double sharings

381
00:16:07,759 --> 00:16:09,600
to prepare the br triple for the

382
00:16:09,600 --> 00:16:12,320
multiplication gate in the second layer

383
00:16:12,320 --> 00:16:14,880
note that these three steps can be done

384
00:16:14,880 --> 00:16:17,680
at the same time

385
00:16:18,480 --> 00:16:21,040
finally all parties can locally evaluate

386
00:16:21,040 --> 00:16:22,880
this multiplication gate in the second

387
00:16:22,880 --> 00:16:26,320
layer with the help of the beaver triple

388
00:16:26,320 --> 00:16:29,120
in conclusion all parties can evaluate a

389
00:16:29,120 --> 00:16:32,880
two-layer circuit in parallel

390
00:16:33,680 --> 00:16:35,600
we would like to clarify the question

391
00:16:35,600 --> 00:16:37,920
that why we do not prepare the bible

392
00:16:37,920 --> 00:16:40,399
triple in the pre-processing phase

393
00:16:40,399 --> 00:16:43,519
this is because in the real execution

394
00:16:43,519 --> 00:16:45,519
one input sharing of a multiplication

395
00:16:45,519 --> 00:16:48,000
gate in the second layer may come from

396
00:16:48,000 --> 00:16:50,399
the output sharing of an addition gate

397
00:16:50,399 --> 00:16:52,000
in the first layer

398
00:16:52,000 --> 00:16:54,639
in this case the first to share the

399
00:16:54,639 --> 00:16:57,120
first two sharings a and b in the bureau

400
00:16:57,120 --> 00:16:59,279
triple are only known during the

401
00:16:59,279 --> 00:17:00,639
execution

402
00:17:00,639 --> 00:17:02,800
which means that we cannot prepare the

403
00:17:02,800 --> 00:17:04,880
bureau triple before evaluating the

404
00:17:04,880 --> 00:17:07,679
previous layers

405
00:17:08,799 --> 00:17:10,559
as for efficiency

406
00:17:10,559 --> 00:17:13,119
in odd layers all parts need to use the

407
00:17:13,119 --> 00:17:15,599
original dn multiplication protocols

408
00:17:15,599 --> 00:17:17,919
this is because we need the output shear

409
00:17:17,919 --> 00:17:20,240
rings from out layers to satisfy our

410
00:17:20,240 --> 00:17:21,919
requirements

411
00:17:21,919 --> 00:17:24,400
for even layers we only need to prepare

412
00:17:24,400 --> 00:17:26,640
the beaver triples which can be done by

413
00:17:26,640 --> 00:17:29,200
our new multiplication protocol

414
00:17:29,200 --> 00:17:30,880
assuming that the number of

415
00:17:30,880 --> 00:17:33,200
multiplication gates in out layers is

416
00:17:33,200 --> 00:17:36,160
the same as said in even layers

417
00:17:36,160 --> 00:17:38,400
the amortized communication complexity

418
00:17:38,400 --> 00:17:40,720
is five elements from location gate per

419
00:17:40,720 --> 00:17:43,120
party

420
00:17:43,360 --> 00:17:45,520
although we cannot directly use our new

421
00:17:45,520 --> 00:17:47,360
protocol for multiplication gates in

422
00:17:47,360 --> 00:17:48,559
outlayers

423
00:17:48,559 --> 00:17:51,039
we show that we can still use tos

424
00:17:51,039 --> 00:17:53,760
independence to improve the original dm

425
00:17:53,760 --> 00:17:57,760
protocol from 6 elements to 5.5 elements

426
00:17:57,760 --> 00:18:00,880
without changing the output form

427
00:18:00,880 --> 00:18:03,760
therefore we can achieve 4.5 elements

428
00:18:03,760 --> 00:18:05,840
per multiplication gate per party at the

429
00:18:05,840 --> 00:18:08,000
end

430
00:18:10,960 --> 00:18:13,280
we test our two constructions and

431
00:18:13,280 --> 00:18:15,280
compare them with the previously best

432
00:18:15,280 --> 00:18:18,240
known results gst 20

433
00:18:18,240 --> 00:18:20,480
our experiment generates a random

434
00:18:20,480 --> 00:18:22,480
circuit with 1 milli multiplication

435
00:18:22,480 --> 00:18:23,600
gates

436
00:18:23,600 --> 00:18:25,840
we set up our experiments in the line

437
00:18:25,840 --> 00:18:29,760
setting and use the 61-bit merson field

438
00:18:29,760 --> 00:18:31,840
the numbers in the table are reported

439
00:18:31,840 --> 00:18:35,039
running time in milliseconds

440
00:18:35,039 --> 00:18:37,440
the experiments show that when using the

441
00:18:37,440 --> 00:18:41,280
proper variant our protocol is about 1.4

442
00:18:41,280 --> 00:18:44,240
times faster than glc20

443
00:18:44,240 --> 00:18:47,440
we note that when the circuit depth is

444
00:18:47,440 --> 00:18:50,000
when the circuit is shallow for example

445
00:18:50,000 --> 00:18:52,080
when the circuit depth is 20

446
00:18:52,080 --> 00:18:54,640
our twist independence pair range is

447
00:18:54,640 --> 00:18:56,480
better than our wrong compression

448
00:18:56,480 --> 00:18:57,840
variant

449
00:18:57,840 --> 00:19:00,320
when the circuit is deep for example

450
00:19:00,320 --> 00:19:02,799
when the circuit depth is assaulted

451
00:19:02,799 --> 00:19:04,880
our run compression variant performs

452
00:19:04,880 --> 00:19:08,400
better than our tos independence variant

453
00:19:08,400 --> 00:19:10,720
in reality we can choose the proper

454
00:19:10,720 --> 00:19:15,120
variant based on the circuit depth

455
00:19:16,799 --> 00:19:19,600
in summary in this work we construct a

456
00:19:19,600 --> 00:19:22,320
new efficient multiplication protocol

457
00:19:22,320 --> 00:19:24,160
that achieves the communication

458
00:19:24,160 --> 00:19:26,160
complexity of four elements per

459
00:19:26,160 --> 00:19:28,480
multiplication gate property

460
00:19:28,480 --> 00:19:31,360
our idea is to use the dm protocol play

461
00:19:31,360 --> 00:19:33,280
the role of the first party in a round

462
00:19:33,280 --> 00:19:35,760
the doping way and rely on the tos

463
00:19:35,760 --> 00:19:38,760
independence

464
00:19:39,360 --> 00:19:41,919
then we improve the round conduction to

465
00:19:41,919 --> 00:19:44,799
achieve a better concrete efficiency

466
00:19:44,799 --> 00:19:46,960
our idea is to carefully combine the

467
00:19:46,960 --> 00:19:49,600
idea of bureau triple with the original

468
00:19:49,600 --> 00:19:51,360
dm protocol

469
00:19:51,360 --> 00:19:52,559
as a result

470
00:19:52,559 --> 00:19:54,480
we managed to evaluate a two-layer

471
00:19:54,480 --> 00:19:56,480
circuit in parallel

472
00:19:56,480 --> 00:19:58,640
which allows us to construct a run

473
00:19:58,640 --> 00:20:00,880
efficient protocol whose communication

474
00:20:00,880 --> 00:20:03,520
complexity is 4.5 elements per

475
00:20:03,520 --> 00:20:05,840
multiplication gate per

476
00:20:05,840 --> 00:20:08,159
and the run complexity is reduced by a

477
00:20:08,159 --> 00:20:10,159
factor of two

478
00:20:10,159 --> 00:20:13,120
altogether our protocol atlas is the

479
00:20:13,120 --> 00:20:15,280
fastest mpc protocol in the ansi

480
00:20:15,280 --> 00:20:18,080
majority setting

481
00:20:18,080 --> 00:20:21,320
thank you

