1
00:00:03,040 --> 00:00:05,120
ready to go have a good session

2
00:00:05,120 --> 00:00:07,919
thank you um hello everyone welcome back

3
00:00:07,919 --> 00:00:10,080
uh this is the second half of the

4
00:00:10,080 --> 00:00:12,160
session on foundations

5
00:00:12,160 --> 00:00:14,480
and our first talk will be

6
00:00:14,480 --> 00:00:17,279
non-interactive batch arguments were mp

7
00:00:17,279 --> 00:00:19,279
from standard assumptions

8
00:00:19,279 --> 00:00:23,039
by akar rai trouturi abhishek jain and

9
00:00:23,039 --> 00:00:25,199
zhen zhong jin and jin jong will give

10
00:00:25,199 --> 00:00:28,359
the talk

11
00:00:35,280 --> 00:00:36,880
thanks for the introduction

12
00:00:36,880 --> 00:00:39,600
this talk is about uh non-interactive

13
00:00:39,600 --> 00:00:41,680
batch arguments for mp from standard

14
00:00:41,680 --> 00:00:43,520
assumptions i'm

15
00:00:43,520 --> 00:00:45,680
from johns hopkins university

16
00:00:45,680 --> 00:00:48,640
this work is joined with akari trothury

17
00:00:48,640 --> 00:00:51,039
and object gen

18
00:00:51,039 --> 00:00:53,360
the non-interactive batch argument

19
00:00:53,360 --> 00:00:55,360
is a protocol between approver and a

20
00:00:55,360 --> 00:00:58,879
wi-fi in the crs model the prover tries

21
00:00:58,879 --> 00:01:01,359
to convince the wifi that a batch of k

22
00:01:01,359 --> 00:01:04,879
instances x1 to xk are all in the

23
00:01:04,879 --> 00:01:06,960
song mp language l

24
00:01:06,960 --> 00:01:10,320
by sending a single round of message pi

25
00:01:10,320 --> 00:01:12,479
and finally the wi-fi

26
00:01:12,479 --> 00:01:15,200
needs to publicly verify this proof pie

27
00:01:15,200 --> 00:01:17,280
and decides to accept or reject the

28
00:01:17,280 --> 00:01:18,960
proof

29
00:01:18,960 --> 00:01:21,040
to help the approver compute this single

30
00:01:21,040 --> 00:01:22,640
round for message

31
00:01:22,640 --> 00:01:25,360
we also allow it to take

32
00:01:25,360 --> 00:01:27,200
omega 1 2 omega k

33
00:01:27,200 --> 00:01:31,680
as the witness for this x 1 to x k

34
00:01:31,680 --> 00:01:33,840
and we further request that the length

35
00:01:33,840 --> 00:01:36,560
of this proof pi is significantly less

36
00:01:36,560 --> 00:01:40,240
than the total length of the witnesses

37
00:01:40,240 --> 00:01:42,880
for the soundness we request that for

38
00:01:42,880 --> 00:01:44,320
any statement

39
00:01:44,320 --> 00:01:46,000
that

40
00:01:46,000 --> 00:01:48,720
all over x1 to xk are in the language l

41
00:01:48,720 --> 00:01:50,720
doesn't hold

42
00:01:50,720 --> 00:01:52,960
we request that for any efficient

43
00:01:52,960 --> 00:01:54,960
adversary

44
00:01:54,960 --> 00:01:58,880
its proof should be rejected

45
00:01:59,360 --> 00:02:01,040
previously

46
00:02:01,040 --> 00:02:03,759
this batch verification is extensively

47
00:02:03,759 --> 00:02:06,560
studied for many crypto primitives such

48
00:02:06,560 --> 00:02:09,119
as digital signatures or interactive

49
00:02:09,119 --> 00:02:10,239
proofs

50
00:02:10,239 --> 00:02:12,319
so the bachelor argument is a very

51
00:02:12,319 --> 00:02:13,360
important

52
00:02:13,360 --> 00:02:15,599
problem

53
00:02:15,599 --> 00:02:18,560
previously by local for rain gold and

54
00:02:18,560 --> 00:02:20,239
rose bloom at all

55
00:02:20,239 --> 00:02:22,640
they build special verification for a

56
00:02:22,640 --> 00:02:27,279
subclass of np which is the up class

57
00:02:27,360 --> 00:02:29,040
in their work

58
00:02:29,040 --> 00:02:31,440
they also consider the interactive

59
00:02:31,440 --> 00:02:33,760
setting

60
00:02:35,599 --> 00:02:38,400
and the batch verification can be viewed

61
00:02:38,400 --> 00:02:42,319
as a special case for the mp class

62
00:02:42,319 --> 00:02:45,840
so one can also hope to use succinct

63
00:02:45,840 --> 00:02:47,280
non-interactive

64
00:02:47,280 --> 00:02:49,840
argument for mp to build battery

65
00:02:49,840 --> 00:02:52,480
verification

66
00:02:52,480 --> 00:02:55,120
however up to now we only know how to

67
00:02:55,120 --> 00:02:57,920
build snarks for mp from non-phosphate

68
00:02:57,920 --> 00:03:00,239
assumptions or in the random oracle

69
00:03:00,239 --> 00:03:02,640
model

70
00:03:02,840 --> 00:03:05,519
recently by the oracle for braxkey at

71
00:03:05,519 --> 00:03:06,239
all

72
00:03:06,239 --> 00:03:07,280
they build

73
00:03:07,280 --> 00:03:09,440
non-interactive batch arguments in the

74
00:03:09,440 --> 00:03:10,400
standard

75
00:03:10,400 --> 00:03:12,800
from standard assumption

76
00:03:12,800 --> 00:03:15,680
but their protocol is only pop is only

77
00:03:15,680 --> 00:03:19,360
private very variable where the wifi the

78
00:03:19,360 --> 00:03:22,480
wi-fi needs to use some private state to

79
00:03:22,480 --> 00:03:24,879
verify the proof

80
00:03:24,879 --> 00:03:27,040
and the more recently by the work of

81
00:03:27,040 --> 00:03:28,400
karla at all

82
00:03:28,400 --> 00:03:30,799
they build non-interactive

83
00:03:30,799 --> 00:03:34,080
non-interactive fresh argument

84
00:03:34,080 --> 00:03:36,560
in the public revival setting

85
00:03:36,560 --> 00:03:38,720
but their assumption is a new assumption

86
00:03:38,720 --> 00:03:41,760
from binomiar maps

87
00:03:42,239 --> 00:03:43,840
so in this work

88
00:03:43,840 --> 00:03:46,319
we try to understand can we build

89
00:03:46,319 --> 00:03:48,560
non-interactive batch arguments for np

90
00:03:48,560 --> 00:03:51,599
from senate assumptions

91
00:03:51,680 --> 00:03:54,080
and in this work we answer this question

92
00:03:54,080 --> 00:03:55,439
positively

93
00:03:55,439 --> 00:03:57,439
we show how to build

94
00:03:57,439 --> 00:03:59,680
non-interactive batch arguments for np

95
00:03:59,680 --> 00:04:01,439
from standard assumptions

96
00:04:01,439 --> 00:04:03,599
further assumptions in the quadratic

97
00:04:03,599 --> 00:04:05,120
residuosity

98
00:04:05,120 --> 00:04:06,560
and the learning with arrow or

99
00:04:06,560 --> 00:04:10,400
self-exponential dedication assumption

100
00:04:10,400 --> 00:04:12,239
where the proof size

101
00:04:12,239 --> 00:04:13,360
grows

102
00:04:13,360 --> 00:04:14,640
only

103
00:04:14,640 --> 00:04:16,798
only square root in the number of

104
00:04:16,798 --> 00:04:19,679
instances k

105
00:04:20,959 --> 00:04:24,720
to obtain our result our method is to

106
00:04:24,720 --> 00:04:27,120
follow the financial mirror framework

107
00:04:27,120 --> 00:04:29,199
defense general transformation is a

108
00:04:29,199 --> 00:04:31,360
method to collapse a public coin

109
00:04:31,360 --> 00:04:32,880
interactive protocol

110
00:04:32,880 --> 00:04:35,440
to a non-interactive protocol

111
00:04:35,440 --> 00:04:38,320
by replacing all the wi-fi's message

112
00:04:38,320 --> 00:04:42,560
with the hash of the transcript so far

113
00:04:42,560 --> 00:04:44,880
and recently there is an exciting line

114
00:04:44,880 --> 00:04:46,960
of work trying to instantiate the

115
00:04:46,960 --> 00:04:48,160
financial

116
00:04:48,160 --> 00:04:51,199
transformation from standard assumptions

117
00:04:51,199 --> 00:04:53,680
and the idea is to build a special hash

118
00:04:53,680 --> 00:04:55,759
function which is called correlation

119
00:04:55,759 --> 00:04:58,400
tractable hash

120
00:04:58,400 --> 00:05:00,160
however

121
00:05:00,160 --> 00:05:02,720
by this method we only know how to

122
00:05:02,720 --> 00:05:05,039
collapse interactive proofs

123
00:05:05,039 --> 00:05:07,440
where the soundness hold even for

124
00:05:07,440 --> 00:05:08,639
unbounded

125
00:05:08,639 --> 00:05:11,639
adversary

126
00:05:12,560 --> 00:05:15,120
so to deal with this issue

127
00:05:15,120 --> 00:05:17,440
our method is to start with some dual

128
00:05:17,440 --> 00:05:20,639
mode interactive batch argument

129
00:05:20,639 --> 00:05:23,039
such a interactive protocol

130
00:05:23,039 --> 00:05:25,759
is in the crs model and the crs has two

131
00:05:25,759 --> 00:05:27,600
indistinguishable modes

132
00:05:27,600 --> 00:05:29,440
so in the treble mode the crs is

133
00:05:29,440 --> 00:05:31,680
associated with sound indices i

134
00:05:31,680 --> 00:05:34,000
and the protocol becomes statistically

135
00:05:34,000 --> 00:05:35,680
sound for the ios indices in the

136
00:05:35,680 --> 00:05:37,520
tropical mode

137
00:05:37,520 --> 00:05:39,759
it means that for any unbounded

138
00:05:39,759 --> 00:05:42,160
adversary it cannot cheat for any

139
00:05:42,160 --> 00:05:45,759
exercise that is not in this language

140
00:05:45,759 --> 00:05:47,520
then we'll apply the finished armor to

141
00:05:47,520 --> 00:05:48,560
this

142
00:05:48,560 --> 00:05:50,880
interactive protocol by using the

143
00:05:50,880 --> 00:05:52,800
correlation integral hash

144
00:05:52,800 --> 00:05:55,360
and in the soundness proof we use the

145
00:05:55,360 --> 00:05:57,680
uh sound we use the property of

146
00:05:57,680 --> 00:05:59,440
correlation interactability to prove the

147
00:05:59,440 --> 00:06:00,410
soundness

148
00:06:00,410 --> 00:06:01,919
[Music]

149
00:06:01,919 --> 00:06:04,000
for more details you can refer to our

150
00:06:04,000 --> 00:06:05,280
photograph

151
00:06:05,280 --> 00:06:07,840
and our full paper online

152
00:06:07,840 --> 00:06:11,039
and also in a follow-up of this work we

153
00:06:11,039 --> 00:06:15,199
also build snarks for p from linux arrow

154
00:06:15,199 --> 00:06:19,440
which is recently accepted to fox 2021

155
00:06:19,440 --> 00:06:21,840
thank you

156
00:06:22,319 --> 00:06:24,960
thank the speaker for the talk

157
00:06:24,960 --> 00:06:28,479
any questions from the audience

158
00:06:29,520 --> 00:06:31,919
feel free to unmute yourself and speak

159
00:06:31,919 --> 00:06:34,919
up

160
00:06:38,720 --> 00:06:40,240
okay

161
00:06:40,240 --> 00:06:43,039
thank the speaker again

162
00:06:43,039 --> 00:06:45,759
and our next talk

163
00:06:45,759 --> 00:06:48,479
is on targeted lossy functions and

164
00:06:48,479 --> 00:06:52,240
applications by willie koch brent waters

165
00:06:52,240 --> 00:06:53,919
and daniel wicks

166
00:06:53,919 --> 00:06:57,359
and willie will give the talk

167
00:06:57,599 --> 00:06:59,120
welcome

168
00:06:59,120 --> 00:06:59,840
hi

169
00:06:59,840 --> 00:07:01,199
can you see the

170
00:07:01,199 --> 00:07:02,639
and xiaomi properly

171
00:07:02,639 --> 00:07:04,800
yeah okay cool

172
00:07:04,800 --> 00:07:07,199
uh yeah thanks for the introduction so

173
00:07:07,199 --> 00:07:09,280
i'm willie and i'm going to talk about

174
00:07:09,280 --> 00:07:10,880
targeted lucy functions in applications

175
00:07:10,880 --> 00:07:12,800
so this is drain work with brain waters

176
00:07:12,800 --> 00:07:15,039
and then in weeks

177
00:07:15,039 --> 00:07:17,360
okay so what we do in this paper

178
00:07:17,360 --> 00:07:20,880
um the conceptual starting point is the

179
00:07:20,880 --> 00:07:22,720
the primitive primitive code lossy

180
00:07:22,720 --> 00:07:24,880
trapdoor functions that were uh that was

181
00:07:24,880 --> 00:07:27,360
introduced by pythagorean waters in 2008

182
00:07:27,360 --> 00:07:29,280
which turns out to be an extremely

183
00:07:29,280 --> 00:07:31,120
powerful primitive in the sense that it

184
00:07:31,120 --> 00:07:31,840
has

185
00:07:31,840 --> 00:07:34,960
literally many many applications

186
00:07:34,960 --> 00:07:38,000
but the thing that we're interested in

187
00:07:38,000 --> 00:07:39,840
in this context is that this is a rather

188
00:07:39,840 --> 00:07:42,479
higher end primitive in the sense that

189
00:07:42,479 --> 00:07:45,440
it requires public assumptions

190
00:07:45,440 --> 00:07:47,440
so what we do in this paper is we define

191
00:07:47,440 --> 00:07:50,240
a relaxation of losing functions that we

192
00:07:50,240 --> 00:07:52,639
call targeted lossy functions

193
00:07:52,639 --> 00:07:53,520
and

194
00:07:53,520 --> 00:07:56,879
we indeed show that this is a lower end

195
00:07:56,879 --> 00:07:59,120
primitive in the sense that we build

196
00:07:59,120 --> 00:08:00,960
targeted lucid functions from

197
00:08:00,960 --> 00:08:04,639
objects related to one-way functions

198
00:08:04,639 --> 00:08:06,479
and last we showed that this primitive

199
00:08:06,479 --> 00:08:08,960
is also useful by showing

200
00:08:08,960 --> 00:08:10,560
by showing applications of targeted

201
00:08:10,560 --> 00:08:13,039
lucid functions which leads to

202
00:08:13,039 --> 00:08:15,120
many to new feasibility results in

203
00:08:15,120 --> 00:08:17,680
minicrypt

204
00:08:17,759 --> 00:08:20,000
oh yeah so let me first recall what's a

205
00:08:20,000 --> 00:08:21,919
lossy trapdoor function so so what was

206
00:08:21,919 --> 00:08:23,599
introduced by pipechat and routers in

207
00:08:23,599 --> 00:08:25,520
2008

208
00:08:25,520 --> 00:08:27,599
so a lucifer function will define a

209
00:08:27,599 --> 00:08:31,039
family of functions so that will be my

210
00:08:31,039 --> 00:08:32,799
my pictures for for the domain and the

211
00:08:32,799 --> 00:08:35,039
range of the associated functions

212
00:08:35,039 --> 00:08:36,559
and it will be a familiar function

213
00:08:36,559 --> 00:08:38,559
indexed by some function key

214
00:08:38,559 --> 00:08:40,399
so there's a way to sample a key and

215
00:08:40,399 --> 00:08:42,640
given a key that defines a function that

216
00:08:42,640 --> 00:08:43,599
i can

217
00:08:43,599 --> 00:08:45,279
efficiently evaluate from a domain to a

218
00:08:45,279 --> 00:08:47,120
range

219
00:08:47,120 --> 00:08:49,120
and there will be a way to generate such

220
00:08:49,120 --> 00:08:50,720
a key so that the resulting function

221
00:08:50,720 --> 00:08:53,120
will be injected

222
00:08:53,120 --> 00:08:54,399
and furthermore

223
00:08:54,399 --> 00:08:56,720
the key can be also generated along with

224
00:08:56,720 --> 00:08:59,440
a trapdoor that allows to reverse the

225
00:08:59,440 --> 00:09:02,399
application of the function

226
00:09:03,440 --> 00:09:05,519
there will also be an alternative mode

227
00:09:05,519 --> 00:09:06,959
of something the keys called the lossy

228
00:09:06,959 --> 00:09:09,760
mode and the idea is that

229
00:09:09,760 --> 00:09:11,120
applying the function

230
00:09:11,120 --> 00:09:12,959
should information theoretically lose

231
00:09:12,959 --> 00:09:15,120
some information about the input

232
00:09:15,120 --> 00:09:16,720
so what does that mean

233
00:09:16,720 --> 00:09:20,320
so so say you sample some point in your

234
00:09:20,320 --> 00:09:23,360
domain at random and apply the function

235
00:09:23,360 --> 00:09:25,519
so you get an output

236
00:09:25,519 --> 00:09:27,760
and now i'm just giving you the output

237
00:09:27,760 --> 00:09:30,000
and i'm asking what was the particular x

238
00:09:30,000 --> 00:09:31,760
i started from and that should be

239
00:09:31,760 --> 00:09:33,440
information theoretically hard

240
00:09:33,440 --> 00:09:35,120
and if that holds we say that the

241
00:09:35,120 --> 00:09:38,000
function is loss

242
00:09:38,480 --> 00:09:41,120
and last the a property that ties

243
00:09:41,120 --> 00:09:42,560
everything together

244
00:09:42,560 --> 00:09:43,519
is that

245
00:09:43,519 --> 00:09:46,480
if i i am sampling a key in injective

246
00:09:46,480 --> 00:09:48,720
mode or in los simon then you cannot

247
00:09:48,720 --> 00:09:50,240
tell the difference so you can evaluate

248
00:09:50,240 --> 00:09:51,839
the function but you don't know if the

249
00:09:51,839 --> 00:09:53,360
function that you are getting is

250
00:09:53,360 --> 00:09:56,240
injective already

251
00:09:56,399 --> 00:09:58,959
okay so that's a lucid trouble function

252
00:09:58,959 --> 00:10:00,000
so

253
00:10:00,000 --> 00:10:01,440
what's the target addressing functions

254
00:10:01,440 --> 00:10:03,760
as i said before it's a relaxation of a

255
00:10:03,760 --> 00:10:05,839
velociraptor function so in in what

256
00:10:05,839 --> 00:10:08,399
sense is the difference

257
00:10:08,399 --> 00:10:10,320
so the first difference will be that we

258
00:10:10,320 --> 00:10:12,160
don't require any trapdoor in injection

259
00:10:12,160 --> 00:10:13,279
node

260
00:10:13,279 --> 00:10:15,279
so that will be conceptually the

261
00:10:15,279 --> 00:10:17,360
relaxation that makes target wc

262
00:10:17,360 --> 00:10:19,760
functions not immediately

263
00:10:19,760 --> 00:10:22,560
a public key primitive

264
00:10:22,560 --> 00:10:24,079
and so so we only required that in

265
00:10:24,079 --> 00:10:26,320
injection it just defines an injective

266
00:10:26,320 --> 00:10:28,320
function

267
00:10:28,320 --> 00:10:30,880
but we also relax the requirement the

268
00:10:30,880 --> 00:10:32,399
lossy mode

269
00:10:32,399 --> 00:10:34,640
and the rest mode will be targeted

270
00:10:34,640 --> 00:10:36,320
so what do i mean by that

271
00:10:36,320 --> 00:10:38,000
the resistance mode will take as input a

272
00:10:38,000 --> 00:10:40,800
particular target that'll record x star

273
00:10:40,800 --> 00:10:42,320
and the application of the function

274
00:10:42,320 --> 00:10:44,240
should only lose information when

275
00:10:44,240 --> 00:10:46,959
starting from extra

276
00:10:46,959 --> 00:10:49,440
so again if i start from x-star i apply

277
00:10:49,440 --> 00:10:51,200
the function

278
00:10:51,200 --> 00:10:52,399
and i give you the output of the

279
00:10:52,399 --> 00:10:54,079
function then it should be information

280
00:10:54,079 --> 00:10:55,760
theoretically hard to tell what's where

281
00:10:55,760 --> 00:11:00,000
the partial x-star i started from

282
00:11:00,000 --> 00:11:00,800
and

283
00:11:00,800 --> 00:11:02,560
the reason why this is a relaxation is

284
00:11:02,560 --> 00:11:04,640
that i only record this essentially over

285
00:11:04,640 --> 00:11:06,320
x star

286
00:11:06,320 --> 00:11:08,320
and there's no requirements on the rest

287
00:11:08,320 --> 00:11:10,320
of the function essentially

288
00:11:10,320 --> 00:11:12,560
so in particular it could be possible

289
00:11:12,560 --> 00:11:14,800
that the in lossy mode

290
00:11:14,800 --> 00:11:16,720
the the function is injective almost

291
00:11:16,720 --> 00:11:18,320
everywhere apart from a few points

292
00:11:18,320 --> 00:11:21,200
related to extra

293
00:11:23,839 --> 00:11:26,160
and last we have to strengthen a tiny

294
00:11:26,160 --> 00:11:28,480
bit the indistinguishability requirement

295
00:11:28,480 --> 00:11:30,480
between the between the modes because

296
00:11:30,480 --> 00:11:32,480
the function key

297
00:11:32,480 --> 00:11:34,399
in targeted lossy mode respect to x star

298
00:11:34,399 --> 00:11:35,839
will depend on the next star and we

299
00:11:35,839 --> 00:11:37,279
don't want this to reveal information

300
00:11:37,279 --> 00:11:39,200
about xr essentially

301
00:11:39,200 --> 00:11:40,640
so what we'll require is that the

302
00:11:40,640 --> 00:11:42,320
function key should be indistinguishable

303
00:11:42,320 --> 00:11:46,000
even given uh x-star

304
00:11:46,000 --> 00:11:48,000
so so so that's our notion of targeted

305
00:11:48,000 --> 00:11:49,920
lucid functions

306
00:11:49,920 --> 00:11:52,399
uh oh yes so now what

307
00:11:52,399 --> 00:11:54,959
well first we show that this relaxation

308
00:11:54,959 --> 00:11:57,680
actually allows us to get constructions

309
00:11:57,680 --> 00:11:59,120
uh from

310
00:11:59,120 --> 00:12:01,680
from weaker assumptions

311
00:12:01,680 --> 00:12:04,480
um and so we showed that assuming

312
00:12:04,480 --> 00:12:07,279
injective pseudonym generators then we

313
00:12:07,279 --> 00:12:10,720
can be targeted with your functions

314
00:12:10,720 --> 00:12:13,200
furthermore similar to how

315
00:12:13,200 --> 00:12:15,839
the original paper introducing

316
00:12:15,839 --> 00:12:17,920
lucid trouble functions considered

317
00:12:17,920 --> 00:12:20,240
execution branches

318
00:12:20,240 --> 00:12:21,600
we can also

319
00:12:21,600 --> 00:12:23,360
consider execution branches for targeted

320
00:12:23,360 --> 00:12:24,800
lucid functions and we can also build

321
00:12:24,800 --> 00:12:28,079
that from the same assumptions

322
00:12:29,200 --> 00:12:31,839
next we show that actually for

323
00:12:31,839 --> 00:12:34,320
the applications that we have in mind

324
00:12:34,320 --> 00:12:36,800
we don't necessarily require the full

325
00:12:36,800 --> 00:12:38,399
power of injectivity

326
00:12:38,399 --> 00:12:39,839
and a slightly

327
00:12:39,839 --> 00:12:41,920
relaxed form of injectivity that is so

328
00:12:41,920 --> 00:12:44,000
pretty natural to define surfaces for

329
00:12:44,000 --> 00:12:46,160
applications

330
00:12:46,160 --> 00:12:48,560
and what that does not require the the

331
00:12:48,560 --> 00:12:50,480
functioning injective mode to be fully

332
00:12:50,480 --> 00:12:51,760
injective

333
00:12:51,760 --> 00:12:53,120
alloys

334
00:12:53,120 --> 00:12:55,040
actually allows us to get instructions

335
00:12:55,040 --> 00:12:56,639
from one-way functions

336
00:12:56,639 --> 00:12:58,720
so that that would be crucial to get the

337
00:12:58,720 --> 00:13:00,000
final thumb statement for our

338
00:13:00,000 --> 00:13:02,240
applications

339
00:13:02,240 --> 00:13:04,800
and as a as a side observation that i

340
00:13:04,800 --> 00:13:06,320
think is pretty huge is that it turns

341
00:13:06,320 --> 00:13:08,320
out that there's a conceptual

342
00:13:08,320 --> 00:13:09,760
quite strong link

343
00:13:09,760 --> 00:13:11,360
between

344
00:13:11,360 --> 00:13:13,680
targeted functions and distributed point

345
00:13:13,680 --> 00:13:15,600
functions even though they might look

346
00:13:15,600 --> 00:13:18,320
extremely different

347
00:13:19,440 --> 00:13:21,519
um and

348
00:13:21,519 --> 00:13:23,519
last uh as i mentioned in the beginning

349
00:13:23,519 --> 00:13:25,120
which actually showed that targeted lucy

350
00:13:25,120 --> 00:13:27,920
functions are useful in order to build

351
00:13:27,920 --> 00:13:29,680
as a building block

352
00:13:29,680 --> 00:13:33,040
so we get uh several applications

353
00:13:33,040 --> 00:13:35,360
so the first set of applications in is

354
00:13:35,360 --> 00:13:37,120
is in the room of

355
00:13:37,120 --> 00:13:38,880
leakage residents symmetric key

356
00:13:38,880 --> 00:13:40,720
primitives that we managed to build from

357
00:13:40,720 --> 00:13:42,959
one-way functions

358
00:13:42,959 --> 00:13:45,199
uh so in particular we get leakage

359
00:13:45,199 --> 00:13:46,959
residents symmetrical primitives that

360
00:13:46,959 --> 00:13:48,560
are slightly better than

361
00:13:48,560 --> 00:13:51,040
the state-of-the-art by giving say a

362
00:13:51,040 --> 00:13:52,240
match

363
00:13:52,240 --> 00:13:53,440
where the tagging procedure is

364
00:13:53,440 --> 00:13:55,120
deterministic so the previous

365
00:13:55,120 --> 00:13:56,399
construction from one of the functions

366
00:13:56,399 --> 00:13:59,040
required a randomized procedure

367
00:13:59,040 --> 00:14:00,800
and

368
00:14:00,800 --> 00:14:03,360
we also give a symmetric encryption with

369
00:14:03,360 --> 00:14:04,560
uh

370
00:14:04,560 --> 00:14:08,000
kind of compact surface exercise

371
00:14:08,399 --> 00:14:11,760
uh another uh application that we get uh

372
00:14:11,760 --> 00:14:13,839
is the the construction of

373
00:14:13,839 --> 00:14:16,000
randomness extractor for so-called

374
00:14:16,000 --> 00:14:18,399
extractor-dependent sources from one-way

375
00:14:18,399 --> 00:14:19,839
functions where

376
00:14:19,839 --> 00:14:21,519
previous constructions use public

377
00:14:21,519 --> 00:14:24,079
assumptions

378
00:14:24,079 --> 00:14:26,800
we also get a symmetric key encryption

379
00:14:26,800 --> 00:14:27,760
that is

380
00:14:27,760 --> 00:14:29,680
simulation secure against so-called

381
00:14:29,680 --> 00:14:31,360
selective opening attacks from all your

382
00:14:31,360 --> 00:14:33,680
functions

383
00:14:33,680 --> 00:14:36,160
so so these are all applications from

384
00:14:36,160 --> 00:14:37,839
our functions and last we also showed

385
00:14:37,839 --> 00:14:40,160
that it's actually also useful for

386
00:14:40,160 --> 00:14:41,440
higher end

387
00:14:41,440 --> 00:14:45,440
kind of applications by showing a

388
00:14:45,440 --> 00:14:47,040
new construction of

389
00:14:47,040 --> 00:14:49,360
cca secure encryption

390
00:14:49,360 --> 00:14:52,959
from extremely secure trapdoor functions

391
00:14:52,959 --> 00:14:54,160
so while the

392
00:14:54,160 --> 00:14:56,959
the the end statement is somewhat uh

393
00:14:56,959 --> 00:14:59,199
it's quite weaker than what was done at

394
00:14:59,199 --> 00:15:01,120
crypto last year by hornberger copula

395
00:15:01,120 --> 00:15:02,399
and waters

396
00:15:02,399 --> 00:15:05,360
uh it's um it's still a conceptually new

397
00:15:05,360 --> 00:15:08,000
approach to beyond uh i i think it

398
00:15:08,000 --> 00:15:10,839
should be other cca secure

399
00:15:10,839 --> 00:15:14,000
encryption uh yeah so that's all i had

400
00:15:14,000 --> 00:15:16,639
to say feel free to ask me or email me

401
00:15:16,639 --> 00:15:18,240
questions and here's the link for the

402
00:15:18,240 --> 00:15:19,839
e-prince version

403
00:15:19,839 --> 00:15:22,079
thanks

404
00:15:22,160 --> 00:15:24,560
thanks willie for the talk

405
00:15:24,560 --> 00:15:28,399
any questions for the speaker

406
00:15:34,720 --> 00:15:37,839
um i have one question for the weakening

407
00:15:37,839 --> 00:15:38,880
of the

408
00:15:38,880 --> 00:15:40,399
velocity functions

409
00:15:40,399 --> 00:15:41,360
so

410
00:15:41,360 --> 00:15:42,639
um

411
00:15:42,639 --> 00:15:44,959
you weakened both the

412
00:15:44,959 --> 00:15:47,440
in the injective mode and the

413
00:15:47,440 --> 00:15:49,759
the lossy mode is it possible to just

414
00:15:49,759 --> 00:15:51,839
weaken one of them

415
00:15:51,839 --> 00:15:52,310
um

416
00:15:52,310 --> 00:15:53,759
[Music]

417
00:15:53,759 --> 00:15:54,560
so

418
00:15:54,560 --> 00:15:55,839
you like

419
00:15:55,839 --> 00:15:58,079
if you want uh to build the

420
00:15:58,079 --> 00:15:59,440
the function from just one of my

421
00:15:59,440 --> 00:16:01,040
functions you definitely

422
00:16:01,040 --> 00:16:03,279
would need to not have the trapdoor in

423
00:16:03,279 --> 00:16:05,360
injective mode and

424
00:16:05,360 --> 00:16:07,199
but then you would be reasonable to

425
00:16:07,199 --> 00:16:09,440
consider uh

426
00:16:09,440 --> 00:16:11,600
like a the standard version of luciness

427
00:16:11,600 --> 00:16:12,959
is just that we don't know how to be on

428
00:16:12,959 --> 00:16:15,120
that it would be a natural thing to to

429
00:16:15,120 --> 00:16:16,880
target for but we didn't manage to let

430
00:16:16,880 --> 00:16:19,519
you together

431
00:16:21,680 --> 00:16:24,000
okay uh if there's no more questions

432
00:16:24,000 --> 00:16:26,320
let's thank the speaker again

433
00:16:26,320 --> 00:16:27,600
and um

434
00:16:27,600 --> 00:16:29,759
our last talk will be

435
00:16:29,759 --> 00:16:32,240
on the t wise independence of

436
00:16:32,240 --> 00:16:34,639
substitution permutation networks by

437
00:16:34,639 --> 00:16:38,000
tyrion leo stefano cersaro and vinod

438
00:16:38,000 --> 00:16:40,160
vaikonchanasen and tyrion will give the

439
00:16:40,160 --> 00:16:42,399
talk

440
00:16:44,079 --> 00:16:45,680
oh could you hear me now

441
00:16:45,680 --> 00:16:47,519
yeah okay

442
00:16:47,519 --> 00:16:48,639
cool

443
00:16:48,639 --> 00:16:51,120
uh okay thanks we have for the

444
00:16:51,120 --> 00:16:52,399
introduction

445
00:16:52,399 --> 00:16:55,120
welcome to my tile the tui's

446
00:16:55,120 --> 00:16:57,519
independence of substitution from this

447
00:16:57,519 --> 00:16:58,560
network

448
00:16:58,560 --> 00:17:00,800
i'm tianjin liu and destroying work with

449
00:17:00,800 --> 00:17:03,759
my courser stephanie north

450
00:17:03,759 --> 00:17:06,240
a central problem in crypto is to

451
00:17:06,240 --> 00:17:08,000
construct random looking heated

452
00:17:08,000 --> 00:17:09,679
permutations

453
00:17:09,679 --> 00:17:12,799
tons of work are attacking this problem

454
00:17:12,799 --> 00:17:15,359
among them there is a well-known well

455
00:17:15,359 --> 00:17:17,439
not so well-defined gap between theory

456
00:17:17,439 --> 00:17:19,119
and practice

457
00:17:19,119 --> 00:17:21,439
the serial work called this object a

458
00:17:21,439 --> 00:17:23,520
student permutation and they focus on

459
00:17:23,520 --> 00:17:25,359
security based on well-studied

460
00:17:25,359 --> 00:17:26,480
assumptions

461
00:17:26,480 --> 00:17:28,640
the practical works call this object a

462
00:17:28,640 --> 00:17:30,720
blockchain verb they are okay with

463
00:17:30,720 --> 00:17:32,880
heuristical security the first priority

464
00:17:32,880 --> 00:17:35,120
is being super efficient

465
00:17:35,120 --> 00:17:37,679
of course everyone wants to brief gap

466
00:17:37,679 --> 00:17:39,520
and has a proper secure super efficient

467
00:17:39,520 --> 00:17:40,880
construction

468
00:17:40,880 --> 00:17:43,360
but it seems very hard

469
00:17:43,360 --> 00:17:45,039
so in the literature

470
00:17:45,039 --> 00:17:47,919
we have purple secure prp based on many

471
00:17:47,919 --> 00:17:49,600
assumptions

472
00:17:49,600 --> 00:17:50,960
unfortunately

473
00:17:50,960 --> 00:17:52,880
none of them is fast enough to be

474
00:17:52,880 --> 00:17:54,400
practical

475
00:17:54,400 --> 00:17:56,640
in practice people use much more

476
00:17:56,640 --> 00:18:00,160
efficient block cycles such as ears

477
00:18:00,160 --> 00:18:01,679
then of course everyone want to

478
00:18:01,679 --> 00:18:04,640
understand whether es is secure

479
00:18:04,640 --> 00:18:06,720
from the theory perspective

480
00:18:06,720 --> 00:18:10,960
we want to base aes harness assumptions

481
00:18:10,960 --> 00:18:13,200
but we have no clue here we don't even

482
00:18:13,200 --> 00:18:15,679
have a candidate assumption

483
00:18:15,679 --> 00:18:18,240
many works then try to argue the

484
00:18:18,240 --> 00:18:20,799
security of practical block ciphers in

485
00:18:20,799 --> 00:18:24,080
some idealized models

486
00:18:24,080 --> 00:18:26,720
but still these words are not analyzing

487
00:18:26,720 --> 00:18:29,600
the actual cyphers

488
00:18:29,600 --> 00:18:31,440
when we got stuck proving security

489
00:18:31,440 --> 00:18:33,679
against arbitrary attacks

490
00:18:33,679 --> 00:18:36,160
the next best thing we can hope for

491
00:18:36,160 --> 00:18:38,559
is to identify classes of attacks and

492
00:18:38,559 --> 00:18:40,080
prove they cannot succeed with good

493
00:18:40,080 --> 00:18:41,440
probability

494
00:18:41,440 --> 00:18:43,280
to show this in a picture

495
00:18:43,280 --> 00:18:45,280
the community has already identified

496
00:18:45,280 --> 00:18:47,679
many classes of attacks

497
00:18:47,679 --> 00:18:50,799
previous works show that aes can resist

498
00:18:50,799 --> 00:18:54,480
some classism attacks to some state

499
00:18:54,480 --> 00:18:57,440
in this paper we promote the study of

500
00:18:57,440 --> 00:18:59,679
t-wise independent

501
00:18:59,679 --> 00:19:01,600
it is the desired property of blood

502
00:19:01,600 --> 00:19:02,960
suffers

503
00:19:02,960 --> 00:19:05,440
and it implies resistances to many

504
00:19:05,440 --> 00:19:06,480
attempts

505
00:19:06,480 --> 00:19:08,000
when t equals 2

506
00:19:08,000 --> 00:19:10,320
it already implies resistances to linear

507
00:19:10,320 --> 00:19:12,160
and differential attacks larger t

508
00:19:12,160 --> 00:19:15,600
implies the residency to more attacks

509
00:19:15,600 --> 00:19:18,559
so ty's dependency is a very natural

510
00:19:18,559 --> 00:19:20,640
pyramid a property

511
00:19:20,640 --> 00:19:22,720
for any t inputs

512
00:19:22,720 --> 00:19:25,200
the corresponding t outputs should be

513
00:19:25,200 --> 00:19:28,080
close to id uniform

514
00:19:28,080 --> 00:19:29,679
here we measured closeness in

515
00:19:29,679 --> 00:19:31,760
statistical distance

516
00:19:31,760 --> 00:19:33,360
for visibility

517
00:19:33,360 --> 00:19:35,440
the key length has to be at least three

518
00:19:35,440 --> 00:19:37,039
times the optimalized to have enough

519
00:19:37,039 --> 00:19:38,559
entropy

520
00:19:38,559 --> 00:19:40,799
this requirement can be ensured by the

521
00:19:40,799 --> 00:19:43,200
standard assumption of independent round

522
00:19:43,200 --> 00:19:44,160
keys

523
00:19:44,160 --> 00:19:46,400
which is assumed by almost every work in

524
00:19:46,400 --> 00:19:48,799
the field

525
00:19:49,200 --> 00:19:51,679
from the serial perspective

526
00:19:51,679 --> 00:19:53,360
independence means

527
00:19:53,360 --> 00:19:55,440
security against an unbounded

528
00:19:55,440 --> 00:19:59,840
distinguisher who makes at most tickers

529
00:20:00,000 --> 00:20:01,520
and notice that

530
00:20:01,520 --> 00:20:03,600
linear and differential text relies on

531
00:20:03,600 --> 00:20:06,400
correlation between two queries so in

532
00:20:06,400 --> 00:20:10,320
some sense this attacks can be captured

533
00:20:10,320 --> 00:20:12,320
by a distinguisher that makes only two

534
00:20:12,320 --> 00:20:14,240
curves

535
00:20:14,240 --> 00:20:17,360
similarly odd differential attack can be

536
00:20:17,360 --> 00:20:19,520
captured by a distinguisher that makes

537
00:20:19,520 --> 00:20:21,840
two to the d quirks

538
00:20:21,840 --> 00:20:23,440
and therefore

539
00:20:23,440 --> 00:20:25,520
tui's independence would implies

540
00:20:25,520 --> 00:20:27,760
resistances to all these attacks

541
00:20:27,760 --> 00:20:30,000
and to any attack that relies on

542
00:20:30,000 --> 00:20:34,240
correlation among only two queries

543
00:20:34,240 --> 00:20:36,400
oh

544
00:20:36,400 --> 00:20:38,240
oh in this paper

545
00:20:38,240 --> 00:20:41,120
we started the block cipher designs uh

546
00:20:41,120 --> 00:20:43,120
kc spa

547
00:20:43,120 --> 00:20:45,440
and the concrete cipher aes

548
00:20:45,440 --> 00:20:47,440
for the rest of my talk i briefly

549
00:20:47,440 --> 00:20:50,000
mention our results

550
00:20:50,000 --> 00:20:51,600
for kc

551
00:20:51,600 --> 00:20:55,760
we show that r rank of kc is close to

552
00:20:55,760 --> 00:20:59,440
slightly less than r was independent

553
00:20:59,440 --> 00:21:00,720
this is science

554
00:21:00,720 --> 00:21:03,280
this is a existential result and it's

555
00:21:03,280 --> 00:21:05,600
proved by probabilistic method

556
00:21:05,600 --> 00:21:08,240
but our result is quite tight since we

557
00:21:08,240 --> 00:21:11,919
can easily show that around kc cannot be

558
00:21:11,919 --> 00:21:14,799
r plus 2 was dependent

559
00:21:14,799 --> 00:21:17,200
i would also like to mention here that

560
00:21:17,200 --> 00:21:19,679
hour is in our result permutation pies

561
00:21:19,679 --> 00:21:21,600
are fixed and are completely known to

562
00:21:21,600 --> 00:21:23,520
the diversity which is different from

563
00:21:23,520 --> 00:21:27,200
the result in ideal models

564
00:21:27,200 --> 00:21:29,039
uh for spa

565
00:21:29,039 --> 00:21:31,760
for sp when we construct we consider the

566
00:21:31,760 --> 00:21:33,600
xbox being inverse

567
00:21:33,600 --> 00:21:36,640
which is used by aes or cube which is

568
00:21:36,640 --> 00:21:38,880
used by mimik

569
00:21:38,880 --> 00:21:40,000
we show

570
00:21:40,000 --> 00:21:42,559
two round spn is close to twice

571
00:21:42,559 --> 00:21:45,520
dependent and the three runs sp is even

572
00:21:45,520 --> 00:21:48,480
closer to twice

573
00:21:48,480 --> 00:21:51,840
we also show that six strong aes

574
00:21:51,840 --> 00:21:54,159
so the extra es run there's no

575
00:21:54,159 --> 00:21:56,640
idealization at all

576
00:21:56,640 --> 00:21:59,840
it's also close to 2s

577
00:22:00,240 --> 00:22:02,799
so these are our main result

578
00:22:02,799 --> 00:22:05,360
they can be easily amplified because the

579
00:22:05,360 --> 00:22:07,840
distance is smaller than a half

580
00:22:07,840 --> 00:22:10,000
so for example for es

581
00:22:10,000 --> 00:22:12,559
by increasing the number of products

582
00:22:12,559 --> 00:22:15,919
aes will be exponentially close to 2s

583
00:22:15,919 --> 00:22:17,679
dependent

584
00:22:17,679 --> 00:22:19,760
so that's all for my talk today thank

585
00:22:19,760 --> 00:22:21,679
you for listening you are welcome to

586
00:22:21,679 --> 00:22:23,679
watch the full version or readout paper

587
00:22:23,679 --> 00:22:25,440
you can also find me in the social room

588
00:22:25,440 --> 00:22:26,960
after the session if you want to discuss

589
00:22:26,960 --> 00:22:29,440
something

590
00:22:31,120 --> 00:22:33,760
thanks tyrion for the talk

591
00:22:33,760 --> 00:22:37,600
any questions from the audience

592
00:22:38,799 --> 00:22:41,679
feel free to raise your hand or mute

593
00:22:41,679 --> 00:22:44,159
yourself

594
00:22:49,919 --> 00:22:52,159
okay uh let's thank all the speakers

595
00:22:52,159 --> 00:22:54,480
again for the wonderful talk

596
00:22:54,480 --> 00:22:56,080
talks and the

597
00:22:56,080 --> 00:22:58,480
session

