1
00:00:02,480 --> 00:00:04,480
hey everyone uh i'm excited to talk to

2
00:00:04,480 --> 00:00:05,680
you today about our work on

3
00:00:05,680 --> 00:00:08,240
non-interactive batch arguments for np

4
00:00:08,240 --> 00:00:10,320
from standard assumptions this is joint

5
00:00:10,320 --> 00:00:12,000
work with my wonderful collaborators

6
00:00:12,000 --> 00:00:14,160
abhishek

7
00:00:14,160 --> 00:00:15,759
so before we get into the question of

8
00:00:15,759 --> 00:00:17,840
assumptions uh what is a non-attractive

9
00:00:17,840 --> 00:00:19,520
batch argument for np

10
00:00:19,520 --> 00:00:21,600
uh consider the scenario here between

11
00:00:21,600 --> 00:00:23,519
alice and bob where both of them have

12
00:00:23,519 --> 00:00:25,840
access to a common reference string or

13
00:00:25,840 --> 00:00:27,359
crs

14
00:00:27,359 --> 00:00:29,920
further alice has case at instances and

15
00:00:29,920 --> 00:00:31,840
wants to convince bob that all of them

16
00:00:31,840 --> 00:00:32,880
are true

17
00:00:32,880 --> 00:00:34,880
specifically that there's a weakness for

18
00:00:34,880 --> 00:00:37,120
each of them such that the circuit c on

19
00:00:37,120 --> 00:00:38,399
input the instance x and the

20
00:00:38,399 --> 00:00:41,440
corresponding maintenance w outputs one

21
00:00:41,440 --> 00:00:43,680
so the budgeting is essentially over

22
00:00:43,680 --> 00:00:46,800
multiple np instances

23
00:00:46,800 --> 00:00:48,960
so the non-interactive nature indicates

24
00:00:48,960 --> 00:00:51,120
that alice just sends over a single

25
00:00:51,120 --> 00:00:54,000
message referred to as a proof to bob

26
00:00:54,000 --> 00:00:57,360
and then bob can verify given this proof

27
00:00:57,360 --> 00:00:58,640
in fact we're going to require something

28
00:00:58,640 --> 00:01:00,480
stronger we're going to say that the

29
00:01:00,480 --> 00:01:02,719
proof must be publicly verifiable

30
00:01:02,719 --> 00:01:04,479
meaning not just bob but anyone with

31
00:01:04,479 --> 00:01:06,400
access to the crf should be able to

32
00:01:06,400 --> 00:01:08,720
verify the proof

33
00:01:08,720 --> 00:01:11,920
so the argument indicates that

34
00:01:11,920 --> 00:01:14,240
any computationally bounded cheating

35
00:01:14,240 --> 00:01:16,960
alice cannot produce an accepting proof

36
00:01:16,960 --> 00:01:20,560
if even one of the statements are false

37
00:01:20,560 --> 00:01:21,759
right

38
00:01:21,759 --> 00:01:23,360
so without further constraints this is

39
00:01:23,360 --> 00:01:25,680
actually fairly easy to achieve alice

40
00:01:25,680 --> 00:01:28,479
just sends over all the witnesses w1 to

41
00:01:28,479 --> 00:01:31,040
wk to bob who can then take the

42
00:01:31,040 --> 00:01:33,119
witnesses and then verify each of them

43
00:01:33,119 --> 00:01:35,280
one by one

44
00:01:35,280 --> 00:01:37,439
so for any non-trivial protocol we

45
00:01:37,439 --> 00:01:39,600
actually require that the length of the

46
00:01:39,600 --> 00:01:41,759
proof that either sends over has to be

47
00:01:41,759 --> 00:01:43,840
significantly smaller than the length of

48
00:01:43,840 --> 00:01:45,680
the combined witness of the case

49
00:01:45,680 --> 00:01:47,520
statements

50
00:01:47,520 --> 00:01:48,560
okay

51
00:01:48,560 --> 00:01:51,439
and what about bob's verifier

52
00:01:51,439 --> 00:01:53,439
verification time

53
00:01:53,439 --> 00:01:55,280
means at the very least to read all the

54
00:01:55,280 --> 00:01:56,880
case statements and we say that the

55
00:01:56,880 --> 00:01:58,719
overhead after

56
00:01:58,719 --> 00:02:00,880
reading the case statements is only some

57
00:02:00,880 --> 00:02:03,200
polynomial in the

58
00:02:03,200 --> 00:02:05,439
length of the proof

59
00:02:05,439 --> 00:02:06,560
okay

60
00:02:06,560 --> 00:02:08,399
so what do we actually know about this

61
00:02:08,399 --> 00:02:10,479
problem from fireworks

62
00:02:10,479 --> 00:02:12,640
uh so there's this uh wonderful line of

63
00:02:12,640 --> 00:02:15,520
work started by rand goldberg

64
00:02:15,520 --> 00:02:18,640
which considers interactive batch groups

65
00:02:18,640 --> 00:02:20,640
so it's interactive in the sense that

66
00:02:20,640 --> 00:02:22,400
alice and bob now are able to

67
00:02:22,400 --> 00:02:25,120
communicate over multiple rounds

68
00:02:25,120 --> 00:02:26,720
uh but the security property is

69
00:02:26,720 --> 00:02:29,280
something actually stronger

70
00:02:29,280 --> 00:02:30,239
that

71
00:02:30,239 --> 00:02:32,319
you know security is required to hold

72
00:02:32,319 --> 00:02:33,920
even against the computationally

73
00:02:33,920 --> 00:02:36,720
unbounded cheating address

74
00:02:36,720 --> 00:02:37,680
so

75
00:02:37,680 --> 00:02:40,160
this line of work essentially constructs

76
00:02:40,160 --> 00:02:42,800
interactive batch proofs for this class

77
00:02:42,800 --> 00:02:45,200
up which is a subclass of np where each

78
00:02:45,200 --> 00:02:48,959
statement has only a unique witness

79
00:02:48,959 --> 00:02:50,400
and then we have sustained

80
00:02:50,400 --> 00:02:52,480
non-destructive arguments or synonyms

81
00:02:52,480 --> 00:02:53,920
for np

82
00:02:53,920 --> 00:02:56,000
uh these are non-interactive arguments

83
00:02:56,000 --> 00:02:57,879
where the length of the proof is

84
00:02:57,879 --> 00:03:00,959
significantly smaller than the

85
00:03:00,959 --> 00:03:03,040
size of the np witness

86
00:03:03,040 --> 00:03:05,840
so now if we were to take our uh

87
00:03:05,840 --> 00:03:07,840
batching of saturn systems and write it

88
00:03:07,840 --> 00:03:08,800
as a

89
00:03:08,800 --> 00:03:11,200
single language uh defined here you know

90
00:03:11,200 --> 00:03:13,280
it's a natural way of

91
00:03:13,280 --> 00:03:15,120
writing this language out we just

92
00:03:15,120 --> 00:03:17,440
concatenate all k instances and the

93
00:03:17,440 --> 00:03:18,720
corresponding witness is the

94
00:03:18,720 --> 00:03:21,680
concatenation of the three witnesses

95
00:03:21,680 --> 00:03:23,760
and then the slog property essentially

96
00:03:23,760 --> 00:03:27,040
gives us a you know a non-reactive batch

97
00:03:27,040 --> 00:03:29,440
argument because the length of the proof

98
00:03:29,440 --> 00:03:30,879
is going to be significantly smaller

99
00:03:30,879 --> 00:03:33,440
than the length of the combine with

100
00:03:33,440 --> 00:03:36,799
unfortunately we know of stocks but np

101
00:03:36,799 --> 00:03:39,120
based on these strong non-falsifiable

102
00:03:39,120 --> 00:03:41,120
assumptions or in the random oracle

103
00:03:41,120 --> 00:03:43,040
model

104
00:03:43,040 --> 00:03:45,360
we actually relax the requirements from

105
00:03:45,360 --> 00:03:47,360
the verifier for it to be designated

106
00:03:47,360 --> 00:03:49,680
verify meaning that only your designated

107
00:03:49,680 --> 00:03:50,879
bob can

108
00:03:50,879 --> 00:03:52,879
verify the proof

109
00:03:52,879 --> 00:03:54,560
then we actually have non-interactive

110
00:03:54,560 --> 00:03:57,040
batch arguments for np based on fairly

111
00:03:57,040 --> 00:03:58,720
standard assumptions uh starting with

112
00:03:58,720 --> 00:04:02,319
this work of bratiski homebrew

113
00:04:02,799 --> 00:04:04,799
and if you want to go to the publicly

114
00:04:04,799 --> 00:04:06,239
very family setting we had this

115
00:04:06,239 --> 00:04:09,280
wonderful recent work of kalai panetta

116
00:04:09,280 --> 00:04:11,360
who considered

117
00:04:11,360 --> 00:04:13,040
you know construct non-attractive batch

118
00:04:13,040 --> 00:04:15,360
arguments for np based on new

119
00:04:15,360 --> 00:04:17,839
non-standard assumptions uh this i

120
00:04:17,839 --> 00:04:19,680
should note that these are falsifiable

121
00:04:19,680 --> 00:04:20,720
assumptions

122
00:04:20,720 --> 00:04:23,440
on groups with bilinear maps

123
00:04:23,440 --> 00:04:25,360
uh so given the state of affairs it's

124
00:04:25,360 --> 00:04:27,520
natural to ask are there you know

125
00:04:27,520 --> 00:04:29,520
non-interactive batch arguments for np

126
00:04:29,520 --> 00:04:32,320
based solely on standard assumptions

127
00:04:32,320 --> 00:04:34,560
and in our work we show that assuming

128
00:04:34,560 --> 00:04:37,520
the quadratic reciprocity assumption uh

129
00:04:37,520 --> 00:04:39,600
in addition to either the learning with

130
00:04:39,600 --> 00:04:41,919
errors or sub-exponential hardness of

131
00:04:41,919 --> 00:04:43,919
the decision of different

132
00:04:43,919 --> 00:04:45,919
assumption there exists a non-attractive

133
00:04:45,919 --> 00:04:48,000
batch argument for np

134
00:04:48,000 --> 00:04:50,000
where the size of the proof grows

135
00:04:50,000 --> 00:04:52,400
roughly square root in the number of

136
00:04:52,400 --> 00:04:54,639
instances times the circuit size where

137
00:04:54,639 --> 00:04:56,639
the circuit is the circuit in the

138
00:04:56,639 --> 00:04:58,479
corresponding definition of the saturn

139
00:04:58,479 --> 00:04:59,840
states

140
00:04:59,840 --> 00:05:01,759
uh you can see that

141
00:05:01,759 --> 00:05:02,639
with

142
00:05:02,639 --> 00:05:05,120
large values of k this is actually

143
00:05:05,120 --> 00:05:07,039
significantly better than the triggered

144
00:05:07,039 --> 00:05:08,960
solution

145
00:05:08,960 --> 00:05:10,560
um so

146
00:05:10,560 --> 00:05:12,400
i don't have time to go over all the

147
00:05:12,400 --> 00:05:14,560
details in our paper so let me start off

148
00:05:14,560 --> 00:05:16,720
with some key insights

149
00:05:16,720 --> 00:05:18,880
and what we actually want to do is

150
00:05:18,880 --> 00:05:21,440
leverage all this exciting recent work

151
00:05:21,440 --> 00:05:23,120
uh surrounding the future made

152
00:05:23,120 --> 00:05:24,800
transformation and specifically the

153
00:05:24,800 --> 00:05:27,440
security of the future transformation

154
00:05:27,440 --> 00:05:30,800
so for those unaware uh feared shamir uh

155
00:05:30,800 --> 00:05:32,160
transform lets you start with an

156
00:05:32,160 --> 00:05:33,759
interactive protocol between approval

157
00:05:33,759 --> 00:05:35,360
and verifier where the verifiers

158
00:05:35,360 --> 00:05:38,320
messages are just random strings and

159
00:05:38,320 --> 00:05:39,759
then it allows you to make a

160
00:05:39,759 --> 00:05:41,680
non-interactive in the crs model where

161
00:05:41,680 --> 00:05:43,600
the cr simply contains a description of

162
00:05:43,600 --> 00:05:45,199
the hash function

163
00:05:45,199 --> 00:05:47,280
and so the prover can generate the

164
00:05:47,280 --> 00:05:49,440
verified messages non-interactively by

165
00:05:49,440 --> 00:05:51,440
applying the hash function

166
00:05:51,440 --> 00:05:53,919
the present in the crs on the transcript

167
00:05:53,919 --> 00:05:55,120
so far

168
00:05:55,120 --> 00:05:56,960
and this is publicly verifiable since

169
00:05:56,960 --> 00:05:59,280
anyone with access to the crs can verify

170
00:05:59,280 --> 00:06:00,639
the proof

171
00:06:00,639 --> 00:06:02,400
so the security of this transformation

172
00:06:02,400 --> 00:06:04,479
has seemed like some really really

173
00:06:04,479 --> 00:06:06,400
exciting recent progress

174
00:06:06,400 --> 00:06:08,160
uh you know with connections to this

175
00:06:08,160 --> 00:06:10,000
correlation intractable hash function

176
00:06:10,000 --> 00:06:11,840
and there's some really cool work and as

177
00:06:11,840 --> 00:06:14,479
you can see this is a long line of work

178
00:06:14,479 --> 00:06:16,639
and i will touch upon this uh briefly

179
00:06:16,639 --> 00:06:18,479
later on in the talk

180
00:06:18,479 --> 00:06:20,080
but for now let's focus on the

181
00:06:20,080 --> 00:06:22,960
communication in both the protocols as

182
00:06:22,960 --> 00:06:25,120
you can see the total communication from

183
00:06:25,120 --> 00:06:26,720
the proven to the verifier remains

184
00:06:26,720 --> 00:06:28,160
unchanged

185
00:06:28,160 --> 00:06:29,199
um

186
00:06:29,199 --> 00:06:30,880
with the transformation so that gives us

187
00:06:30,880 --> 00:06:32,479
the following idea let's start with an

188
00:06:32,479 --> 00:06:35,039
interactive protocol for batch np

189
00:06:35,039 --> 00:06:37,199
uh then hopefully we can apply the

190
00:06:37,199 --> 00:06:39,759
futurme transformation and then use

191
00:06:39,759 --> 00:06:41,840
hopefully one of these uh

192
00:06:41,840 --> 00:06:44,000
you know these cool exciting recent

193
00:06:44,000 --> 00:06:46,319
works and proof security of the

194
00:06:46,319 --> 00:06:48,880
transform protocol

195
00:06:48,880 --> 00:06:51,199
so unfortunately uh

196
00:06:51,199 --> 00:06:53,599
for all of these works uh

197
00:06:53,599 --> 00:06:55,759
you know the security is only proven if

198
00:06:55,759 --> 00:06:57,360
one starts with a protocol that's

199
00:06:57,360 --> 00:06:59,599
statistically secure these are also

200
00:06:59,599 --> 00:07:01,680
called interactive proofs and as you're

201
00:07:01,680 --> 00:07:04,400
seeing these mean that even an unbounded

202
00:07:04,400 --> 00:07:05,840
cheating approver should not be able to

203
00:07:05,840 --> 00:07:08,479
convince a verifier of false statements

204
00:07:08,479 --> 00:07:09,680
uh i should note that there's no

205
00:07:09,680 --> 00:07:11,440
inherent reason for this requirement

206
00:07:11,440 --> 00:07:14,240
this is just what we know from the

207
00:07:14,240 --> 00:07:16,319
state of art

208
00:07:16,319 --> 00:07:18,240
so you might say okay this is not so bad

209
00:07:18,240 --> 00:07:20,479
but like i already indicated based on

210
00:07:20,479 --> 00:07:22,240
the prior works that we don't actually

211
00:07:22,240 --> 00:07:24,240
know of interactive proof so batch np

212
00:07:24,240 --> 00:07:26,880
the best web that we have is our

213
00:07:26,880 --> 00:07:28,800
ub

214
00:07:28,800 --> 00:07:29,599
so

215
00:07:29,599 --> 00:07:31,280
instead we choose a different starting

216
00:07:31,280 --> 00:07:32,639
point for applying the featuring

217
00:07:32,639 --> 00:07:34,880
transformation that we call dual mode

218
00:07:34,880 --> 00:07:36,240
batch arguments

219
00:07:36,240 --> 00:07:37,919
so since the resultant protocol is

220
00:07:37,919 --> 00:07:40,160
anyway going to be in crs let's start

221
00:07:40,160 --> 00:07:41,919
with an interactive protocol in the crs

222
00:07:41,919 --> 00:07:43,360
model that's going to achieve

223
00:07:43,360 --> 00:07:46,000
computational security meaning that any

224
00:07:46,000 --> 00:07:48,000
computationally bounded cheat improver

225
00:07:48,000 --> 00:07:50,160
cannot convince the verifier of false

226
00:07:50,160 --> 00:07:51,919
state

227
00:07:51,919 --> 00:07:54,080
so where's the dual mode so dual mode

228
00:07:54,080 --> 00:07:57,199
comes in to how the cr is generated so

229
00:07:57,199 --> 00:07:59,520
what you have on the left is the normal

230
00:07:59,520 --> 00:08:00,400
mode

231
00:08:00,400 --> 00:08:02,160
of the crs generation

232
00:08:02,160 --> 00:08:04,240
and this is the mode that's used with

233
00:08:04,240 --> 00:08:06,560
the actual protocol execution

234
00:08:06,560 --> 00:08:08,160
and what you see on the right is the

235
00:08:08,160 --> 00:08:10,720
trapdoor mode specified by 7xi and this

236
00:08:10,720 --> 00:08:12,080
is going to be used solely in the

237
00:08:12,080 --> 00:08:13,520
security proof

238
00:08:13,520 --> 00:08:15,440
so for starters you shouldn't really be

239
00:08:15,440 --> 00:08:17,440
able to tell which mode the crs was

240
00:08:17,440 --> 00:08:19,039
generated in

241
00:08:19,039 --> 00:08:20,800
especially if you're computationally

242
00:08:20,800 --> 00:08:22,240
bound

243
00:08:22,240 --> 00:08:24,000
so what's so special about the track

244
00:08:24,000 --> 00:08:26,560
road mode so the tracker mode guarantees

245
00:08:26,560 --> 00:08:29,520
statistical security at index i

246
00:08:29,520 --> 00:08:32,320
meaning that even a computationally

247
00:08:32,320 --> 00:08:34,080
unbounded cheating prover cannot take

248
00:08:34,080 --> 00:08:36,559
the verifier except if the in statement

249
00:08:36,559 --> 00:08:38,719
is false

250
00:08:38,719 --> 00:08:40,640
so for all intents and purposes in the

251
00:08:40,640 --> 00:08:43,039
trapdoor mode at least for index i what

252
00:08:43,039 --> 00:08:45,040
we have on the right is an interactive

253
00:08:45,040 --> 00:08:46,480
proof

254
00:08:46,480 --> 00:08:48,000
so this then provides the following

255
00:08:48,000 --> 00:08:49,600
security intuition for applying the

256
00:08:49,600 --> 00:08:52,000
future transformation to dual mode batch

257
00:08:52,000 --> 00:08:53,200
arguments

258
00:08:53,200 --> 00:08:54,959
uh when the prover is trying to

259
00:08:54,959 --> 00:08:57,440
specifically cheat on the i instance

260
00:08:57,440 --> 00:08:59,040
meaning that the ith instance is

261
00:08:59,040 --> 00:09:00,320
actually false

262
00:09:00,320 --> 00:09:02,240
so we make this computational

263
00:09:02,240 --> 00:09:04,800
indistinguishable switch to the trapdoor

264
00:09:04,800 --> 00:09:08,160
mode at index i for the crs and then

265
00:09:08,160 --> 00:09:10,080
hopefully we can rely on the future new

266
00:09:10,080 --> 00:09:12,080
transformation uh because you know we've

267
00:09:12,080 --> 00:09:14,720
just talked about how this uh

268
00:09:14,720 --> 00:09:17,279
trapdoor mode crs protocol is actually

269
00:09:17,279 --> 00:09:19,120
statistically sound

270
00:09:19,120 --> 00:09:21,279
and then you know we have a

271
00:09:21,279 --> 00:09:23,279
non-attractive protocol

272
00:09:23,279 --> 00:09:24,240
so

273
00:09:24,240 --> 00:09:26,640
what does this dual mode batch argument

274
00:09:26,640 --> 00:09:28,240
look like

275
00:09:28,240 --> 00:09:30,560
so recall that the prover is trying to

276
00:09:30,560 --> 00:09:33,360
batch proof uh k statements and we have

277
00:09:33,360 --> 00:09:36,640
you know okay witnesses w1 to wk

278
00:09:36,640 --> 00:09:38,480
uh each of like them and we're going to

279
00:09:38,480 --> 00:09:41,440
write them out in these rows that you

280
00:09:41,440 --> 00:09:43,040
see here

281
00:09:43,040 --> 00:09:45,279
the crs in our dual board match argument

282
00:09:45,279 --> 00:09:46,959
is just going to correspond to a

283
00:09:46,959 --> 00:09:48,800
commitment key k and we'll see shortly

284
00:09:48,800 --> 00:09:52,080
what this commitment scheme is

285
00:09:52,080 --> 00:09:54,320
uh and the next thing that we're going

286
00:09:54,320 --> 00:09:56,000
to do is we're going to have the prover

287
00:09:56,000 --> 00:09:58,480
commit to the witnesses in a column wise

288
00:09:58,480 --> 00:10:00,959
fashion meaning that each cj

289
00:10:00,959 --> 00:10:03,440
is a commitment to a k length vector so

290
00:10:03,440 --> 00:10:05,920
there are m such uh

291
00:10:05,920 --> 00:10:07,120
cj's

292
00:10:07,120 --> 00:10:09,279
and the prover then sends across c1 to

293
00:10:09,279 --> 00:10:11,760
cm after the verifier

294
00:10:11,760 --> 00:10:13,680
we require the length of

295
00:10:13,680 --> 00:10:15,839
this commitment depends only poly

296
00:10:15,839 --> 00:10:18,959
logarithmically on k

297
00:10:18,959 --> 00:10:22,240
so next the proven the verifier interact

298
00:10:22,240 --> 00:10:24,320
via this information theory component

299
00:10:24,320 --> 00:10:26,000
meaning that it doesn't require any

300
00:10:26,000 --> 00:10:27,920
cryptographic assumptions we'll leave

301
00:10:27,920 --> 00:10:29,360
this as a black box for now and i'll

302
00:10:29,360 --> 00:10:31,600
come back to this later on

303
00:10:31,600 --> 00:10:33,600
and then

304
00:10:33,600 --> 00:10:35,519
some function f which is determined by

305
00:10:35,519 --> 00:10:37,519
this information theory component is

306
00:10:37,519 --> 00:10:40,079
specified and the program is required to

307
00:10:40,079 --> 00:10:42,160
open

308
00:10:42,160 --> 00:10:44,000
the function f applied to each of the

309
00:10:44,000 --> 00:10:45,519
witnesses

310
00:10:45,519 --> 00:10:47,040
and then there is some final checks

311
00:10:47,040 --> 00:10:49,839
performed by the wi-fi

312
00:10:49,839 --> 00:10:52,160
so what about this commitment scheme

313
00:10:52,160 --> 00:10:54,160
that we have so the commitment scheme

314
00:10:54,160 --> 00:10:55,760
that we're going to use is going to be a

315
00:10:55,760 --> 00:10:57,360
somewhere statistically binding

316
00:10:57,360 --> 00:10:58,959
commitment scheme

317
00:10:58,959 --> 00:11:00,880
so these commitment schemes have already

318
00:11:00,880 --> 00:11:02,959
an inbuilt tractor mode so if you

319
00:11:02,959 --> 00:11:05,120
specify an index i you get a commitment

320
00:11:05,120 --> 00:11:07,040
key ki star

321
00:11:07,040 --> 00:11:10,160
and if you use ki star to

322
00:11:10,160 --> 00:11:12,160
compute the commitments then it's

323
00:11:12,160 --> 00:11:15,760
statistically binding at the index act

324
00:11:15,760 --> 00:11:17,760
uh meaning that

325
00:11:17,760 --> 00:11:20,079
with high priority there is a unique

326
00:11:20,079 --> 00:11:23,519
opening to the ix position of the vector

327
00:11:23,519 --> 00:11:25,839
so given how the you know the

328
00:11:25,839 --> 00:11:28,320
commitments have been structured what we

329
00:11:28,320 --> 00:11:30,240
essentially have is if each of these

330
00:11:30,240 --> 00:11:33,440
columns you use ki start you have a

331
00:11:33,440 --> 00:11:35,440
single row that's statistically binding

332
00:11:35,440 --> 00:11:38,160
here it's going to be the i through

333
00:11:38,160 --> 00:11:39,760
so we have this

334
00:11:39,760 --> 00:11:42,320
it's statistically binding nwi and now

335
00:11:42,320 --> 00:11:43,760
if you look at the rest of the protocol

336
00:11:43,760 --> 00:11:45,279
in the triangular mod everything is

337
00:11:45,279 --> 00:11:47,040
information kit

338
00:11:47,040 --> 00:11:49,839
so for the iit instance we have an

339
00:11:49,839 --> 00:11:52,320
interactive proof as design

340
00:11:52,320 --> 00:11:54,720
so to be actually able to compress it we

341
00:11:54,720 --> 00:11:56,399
want this information theoretic

342
00:11:56,399 --> 00:11:58,560
component to be futurely friendly so

343
00:11:58,560 --> 00:12:01,360
that we can essentially use

344
00:12:01,360 --> 00:12:04,240
some prior works and then compress it uh

345
00:12:04,240 --> 00:12:06,800
using a hash function based on the lwe

346
00:12:06,800 --> 00:12:09,279
or sub exponential dth and i'm going to

347
00:12:09,279 --> 00:12:11,040
talk about this next

348
00:12:11,040 --> 00:12:14,079
uh but i just want to say that

349
00:12:14,079 --> 00:12:16,800
we are going to actually also

350
00:12:16,800 --> 00:12:19,519
construct these some ssd binding

351
00:12:19,519 --> 00:12:21,360
commitments with an appropriate opening

352
00:12:21,360 --> 00:12:22,480
to f

353
00:12:22,480 --> 00:12:24,480
uh based on the quadratic reciprocity

354
00:12:24,480 --> 00:12:26,880
assumption and i'll come back to what f

355
00:12:26,880 --> 00:12:28,160
is and we'll

356
00:12:28,160 --> 00:12:31,279
touch upon this uh later on again

357
00:12:31,279 --> 00:12:32,160
okay

358
00:12:32,160 --> 00:12:34,639
so in whatever remaining time i have let

359
00:12:34,639 --> 00:12:36,639
me give you some technical details

360
00:12:36,639 --> 00:12:38,880
regarding the information theoretic

361
00:12:38,880 --> 00:12:42,639
component that we use in our protocol

362
00:12:42,639 --> 00:12:45,120
uh so recall this is the template that i

363
00:12:45,120 --> 00:12:46,800
just showed you and we have this

364
00:12:46,800 --> 00:12:48,639
information theory component that i was

365
00:12:48,639 --> 00:12:50,000
going to talk about

366
00:12:50,000 --> 00:12:52,240
so the first thing to note is that you

367
00:12:52,240 --> 00:12:53,839
know just gonna have one information

368
00:12:53,839 --> 00:12:55,839
third component we just we're gonna have

369
00:12:55,839 --> 00:12:57,920
k copies of the same information

370
00:12:57,920 --> 00:13:00,160
theoretic component and correspondingly

371
00:13:00,160 --> 00:13:02,800
k openings

372
00:13:02,800 --> 00:13:05,279
and uh you know for the purposes of this

373
00:13:05,279 --> 00:13:08,079
talk it suffices to look at a specific

374
00:13:08,079 --> 00:13:10,560
uh a single copy of

375
00:13:10,560 --> 00:13:12,320
this

376
00:13:12,320 --> 00:13:13,680
information theoretic component

377
00:13:13,680 --> 00:13:15,680
specifically the ith club because that's

378
00:13:15,680 --> 00:13:17,279
mainly what i care about proving

379
00:13:17,279 --> 00:13:19,360
security

380
00:13:19,360 --> 00:13:21,680
but before i can go uh into any further

381
00:13:21,680 --> 00:13:24,000
detail i need to take a small detour and

382
00:13:24,000 --> 00:13:25,600
revisit something that i earlier

383
00:13:25,600 --> 00:13:28,000
mentioned in the talk uh regarding the

384
00:13:28,000 --> 00:13:30,079
future transformation

385
00:13:30,079 --> 00:13:32,480
uh remember this is the slide that i've

386
00:13:32,480 --> 00:13:35,279
shown you for the future transform

387
00:13:35,279 --> 00:13:37,519
and how does one really go about proving

388
00:13:37,519 --> 00:13:39,760
the security of this transformation

389
00:13:39,760 --> 00:13:41,199
so let's look at the interactive

390
00:13:41,199 --> 00:13:42,720
protocol on the left

391
00:13:42,720 --> 00:13:46,639
uh and let's uh define this notion of a

392
00:13:46,639 --> 00:13:48,800
set of bad betas

393
00:13:48,800 --> 00:13:52,399
so what does that mean so once uh

394
00:13:52,399 --> 00:13:53,760
alpha is sent

395
00:13:53,760 --> 00:13:55,600
for statements that are not in the

396
00:13:55,600 --> 00:13:58,399
language we say a beta is bad

397
00:13:58,399 --> 00:14:00,639
if there exists a gamma that leads the

398
00:14:00,639 --> 00:14:02,399
verified to accept

399
00:14:02,399 --> 00:14:05,279
so you know verify is accepting on false

400
00:14:05,279 --> 00:14:06,880
statements

401
00:14:06,880 --> 00:14:09,440
so in the interactive setting the prover

402
00:14:09,440 --> 00:14:12,320
has no control over the betas it sends

403
00:14:12,320 --> 00:14:14,320
over an alpha and the verifier sends

404
00:14:14,320 --> 00:14:16,959
over a random data

405
00:14:16,959 --> 00:14:18,800
but that's no longer quite true in the

406
00:14:18,800 --> 00:14:20,880
non-attractive setting because what the

407
00:14:20,880 --> 00:14:23,040
prover can do is it can try different

408
00:14:23,040 --> 00:14:24,720
values of alpha

409
00:14:24,720 --> 00:14:27,279
until it reaches uh gets a

410
00:14:27,279 --> 00:14:28,880
beta that it likes

411
00:14:28,880 --> 00:14:31,760
so essentially for security we want that

412
00:14:31,760 --> 00:14:33,360
any computationally bounded cheating

413
00:14:33,360 --> 00:14:35,600
prover cannot find an alpha

414
00:14:35,600 --> 00:14:38,880
such that it results in a bad bit

415
00:14:38,880 --> 00:14:41,600
so if the hash function satisfies this

416
00:14:41,600 --> 00:14:43,519
condition we say that the hash function

417
00:14:43,519 --> 00:14:48,240
is correlation intractable for bad betas

418
00:14:48,240 --> 00:14:51,120
so this is then the following uh

419
00:14:51,120 --> 00:14:52,800
template for

420
00:14:52,800 --> 00:14:55,519
proving a protocol

421
00:14:55,519 --> 00:14:57,760
with the futurenet transformation so we

422
00:14:57,760 --> 00:14:59,760
start with the protocol that has the set

423
00:14:59,760 --> 00:15:02,480
of corresponding by betas and then

424
00:15:02,480 --> 00:15:04,320
we then have a hash function that's

425
00:15:04,320 --> 00:15:06,160
correlation and interactable for this

426
00:15:06,160 --> 00:15:08,639
set of bad beta

427
00:15:08,639 --> 00:15:10,720
and that gives us a

428
00:15:10,720 --> 00:15:14,639
transform protocol that's secure

429
00:15:14,639 --> 00:15:16,959
so we actually need to construct these

430
00:15:16,959 --> 00:15:19,199
hash functions h and so what do we know

431
00:15:19,199 --> 00:15:21,760
about them so it turns out if this set

432
00:15:21,760 --> 00:15:24,320
of bad betas can actually be computed in

433
00:15:24,320 --> 00:15:27,440
polynomial time then this wonderful work

434
00:15:27,440 --> 00:15:29,839
of uh pikachu and shahan

435
00:15:29,839 --> 00:15:32,079
show us that you can construct these

436
00:15:32,079 --> 00:15:35,680
hash functions simply based on nwe

437
00:15:35,680 --> 00:15:37,920
and if further

438
00:15:37,920 --> 00:15:40,880
these bad betas can be computed in low

439
00:15:40,880 --> 00:15:43,360
depth specifically in dc 0

440
00:15:43,360 --> 00:15:44,880
and these are circuits that are

441
00:15:44,880 --> 00:15:46,560
polynomial size

442
00:15:46,560 --> 00:15:48,720
but have constant depth

443
00:15:48,720 --> 00:15:51,120
with threshold gates in them

444
00:15:51,120 --> 00:15:52,560
then you can actually construct such

445
00:15:52,560 --> 00:15:54,399
hash functions simply based

446
00:15:54,399 --> 00:15:56,560
on some exponential ddh and this is

447
00:15:56,560 --> 00:15:57,839
wonderful work

448
00:15:57,839 --> 00:16:01,600
recent very very recent work by

449
00:16:02,240 --> 00:16:03,680
so

450
00:16:03,680 --> 00:16:06,399
uh given this understanding of you know

451
00:16:06,399 --> 00:16:09,199
what kind of bad uh betas and what kind

452
00:16:09,199 --> 00:16:11,279
of assumptions that we have

453
00:16:11,279 --> 00:16:13,920
so if we want this uh information

454
00:16:13,920 --> 00:16:16,000
genetic component to be future family

455
00:16:16,000 --> 00:16:18,240
all we need to show is essentially that

456
00:16:18,240 --> 00:16:20,240
the corresponding bad

457
00:16:20,240 --> 00:16:24,480
betas can be computable in pcc

458
00:16:24,720 --> 00:16:27,440
um so the building block of this

459
00:16:27,440 --> 00:16:29,199
information theory component is going to

460
00:16:29,199 --> 00:16:31,519
be this wonderful protocol introduced by

461
00:16:31,519 --> 00:16:34,320
shetty called spartan and specifically

462
00:16:34,320 --> 00:16:35,920
we're going to focus on the information

463
00:16:35,920 --> 00:16:37,519
theoretic component of the spartan

464
00:16:37,519 --> 00:16:39,920
protocol called spartan code

465
00:16:39,920 --> 00:16:42,560
so just for context uh you know spartan

466
00:16:42,560 --> 00:16:44,880
is an interactive protocol used to prove

467
00:16:44,880 --> 00:16:47,440
np statements

468
00:16:47,440 --> 00:16:49,600
so in the spartan protocol note that the

469
00:16:49,600 --> 00:16:51,839
function f is simply a linear

470
00:16:51,839 --> 00:16:54,560
combination of the bits of the witness

471
00:16:54,560 --> 00:16:56,800
and the coefficients of the linear

472
00:16:56,800 --> 00:16:58,720
combinations that the sigma js are

473
00:16:58,720 --> 00:17:01,440
specified by this partition

474
00:17:01,440 --> 00:17:04,079
so for those familiar the spartan code

475
00:17:04,079 --> 00:17:06,000
primarily consists of the sum check

476
00:17:06,000 --> 00:17:07,119
protocol

477
00:17:07,119 --> 00:17:09,199
but you know for this talk i'm going to

478
00:17:09,199 --> 00:17:11,760
keep it at a very very high level

479
00:17:11,760 --> 00:17:13,520
and i'm going to say that what the

480
00:17:13,520 --> 00:17:15,919
prover sends across in most messages is

481
00:17:15,919 --> 00:17:18,640
some polynomial g of x and what the

482
00:17:18,640 --> 00:17:21,520
verifier sends across is a random data

483
00:17:21,520 --> 00:17:23,839
that is samples from some specified

484
00:17:23,839 --> 00:17:25,760
field f

485
00:17:25,760 --> 00:17:26,720
so

486
00:17:26,720 --> 00:17:29,280
we talked about bad beta so how do we

487
00:17:29,280 --> 00:17:31,200
define the set of bad betas the set of

488
00:17:31,200 --> 00:17:34,160
bad betas is defined to be all the roots

489
00:17:34,160 --> 00:17:37,360
of this polynomial uh g of x minus g

490
00:17:37,360 --> 00:17:38,880
star of x

491
00:17:38,880 --> 00:17:40,640
g of x as you can see is clearly the

492
00:17:40,640 --> 00:17:43,120
polynomial that the prover said and g

493
00:17:43,120 --> 00:17:45,919
star of x is the true polynomial and

494
00:17:45,919 --> 00:17:48,240
honest proof of this

495
00:17:48,240 --> 00:17:50,320
i won't go into the details but this is

496
00:17:50,320 --> 00:17:53,360
how essentially how g star is defined

497
00:17:53,360 --> 00:17:56,480
so in our work we show that

498
00:17:56,480 --> 00:17:58,480
once you start with an appropriate field

499
00:17:58,480 --> 00:17:59,679
f

500
00:17:59,679 --> 00:18:01,679
the set of bad betas can actually be

501
00:18:01,679 --> 00:18:04,240
computed in dc 0 for the spartan core

502
00:18:04,240 --> 00:18:05,840
protocol

503
00:18:05,840 --> 00:18:08,320
i want to reemphasize that you know this

504
00:18:08,320 --> 00:18:09,520
is a

505
00:18:09,520 --> 00:18:12,160
very very high level overview of both

506
00:18:12,160 --> 00:18:14,799
the spartan and some of the ideas that

507
00:18:14,799 --> 00:18:16,559
we use in our work

508
00:18:16,559 --> 00:18:19,039
and i would defer you to the paper for

509
00:18:19,039 --> 00:18:21,440
details

510
00:18:21,440 --> 00:18:24,400
okay so putting everything together uh

511
00:18:24,400 --> 00:18:27,600
we saw that the function f

512
00:18:27,600 --> 00:18:29,919
for our protocol is simply a linear

513
00:18:29,919 --> 00:18:32,160
combination of witness bits

514
00:18:32,160 --> 00:18:35,840
uh so in fact what we have is uh or what

515
00:18:35,840 --> 00:18:38,720
we require is a ssb with linearly

516
00:18:38,720 --> 00:18:41,120
romantic opening that we construct based

517
00:18:41,120 --> 00:18:44,240
on quadratic reciprocity

518
00:18:44,240 --> 00:18:46,559
uh it actually requires some additional

519
00:18:46,559 --> 00:18:48,160
properties that i'm really not going to

520
00:18:48,160 --> 00:18:49,840
get into because that's going to make

521
00:18:49,840 --> 00:18:52,799
things a little more complex again

522
00:18:52,799 --> 00:18:54,720
you know i request you to look at the

523
00:18:54,720 --> 00:18:57,280
paper for further details

524
00:18:57,280 --> 00:18:59,039
about that

525
00:18:59,039 --> 00:19:01,280
and then for the information theory

526
00:19:01,280 --> 00:19:04,000
component we run k copies of the spartan

527
00:19:04,000 --> 00:19:05,200
core

528
00:19:05,200 --> 00:19:07,520
uh and show that

529
00:19:07,520 --> 00:19:09,520
the set of bad betas can actually be

530
00:19:09,520 --> 00:19:12,559
computed in dc 0 for this

531
00:19:12,559 --> 00:19:16,080
so this then results in our main theorem

532
00:19:16,080 --> 00:19:19,439
which i've restated here

533
00:19:19,840 --> 00:19:22,960
and i just want to say that in

534
00:19:22,960 --> 00:19:24,720
follow-up work

535
00:19:24,720 --> 00:19:26,640
we actually

536
00:19:26,640 --> 00:19:28,880
construct batch arguments for np with

537
00:19:28,880 --> 00:19:31,120
improved parameters and you know

538
00:19:31,120 --> 00:19:33,679
furthermore we actually show that

539
00:19:33,679 --> 00:19:35,520
you can apply these batch arguments to

540
00:19:35,520 --> 00:19:37,200
construct delegation schemes for all

541
00:19:37,200 --> 00:19:40,080
polynomials and competition

542
00:19:40,080 --> 00:19:41,280
um

543
00:19:41,280 --> 00:19:43,520
and that's all i have today uh feel free

544
00:19:43,520 --> 00:19:45,919
to send me or any of my co-authors for

545
00:19:45,919 --> 00:19:47,120
that matter

546
00:19:47,120 --> 00:19:49,039
an email if you have any questions and

547
00:19:49,039 --> 00:19:50,720
one of us will also be available to

548
00:19:50,720 --> 00:19:54,320
answer questions during the live session

549
00:19:54,320 --> 00:19:58,439
so thank you so much for listening

