1
00:00:01,920 --> 00:00:03,520
hi everyone my name is

2
00:00:03,520 --> 00:00:05,680
and welcome to this crypto talk on multi

3
00:00:05,680 --> 00:00:08,240
theorem designated verifier and sdk for

4
00:00:08,240 --> 00:00:09,760
qma

5
00:00:09,760 --> 00:00:12,480
um so let's start with recalling what is

6
00:00:12,480 --> 00:00:15,679
a nsk or nissag and non-interactive xero

7
00:00:15,679 --> 00:00:17,520
knowledge protocol 4

8
00:00:17,520 --> 00:00:20,000
um first let's talk about the classical

9
00:00:20,000 --> 00:00:22,560
analog of qma which is np

10
00:00:22,560 --> 00:00:25,359
um we want a non-interactive or for a

11
00:00:25,359 --> 00:00:27,920
statement in l where l is some np

12
00:00:27,920 --> 00:00:28,960
language

13
00:00:28,960 --> 00:00:31,359
this is a long known result this is

14
00:00:31,359 --> 00:00:32,880
impossible to do it just

15
00:00:32,880 --> 00:00:35,200
non-interactively for languages outside

16
00:00:35,200 --> 00:00:36,640
of bpp

17
00:00:36,640 --> 00:00:39,600
and using what's called a crs a common

18
00:00:39,600 --> 00:00:41,120
reference string

19
00:00:41,120 --> 00:00:43,680
this can be done where this string is

20
00:00:43,680 --> 00:00:45,120
publicly

21
00:00:45,120 --> 00:00:47,200
accessible to everyone

22
00:00:47,200 --> 00:00:49,440
and is trusted by all of the parties in

23
00:00:49,440 --> 00:00:50,640
the system

24
00:00:50,640 --> 00:00:51,840
as

25
00:00:51,840 --> 00:00:54,160
let's say for the sake of this talk just

26
00:00:54,160 --> 00:00:56,480
a random classical string everyone trust

27
00:00:56,480 --> 00:00:58,640
that this is truly random

28
00:00:58,640 --> 00:01:01,039
so completeness of an israelite states

29
00:01:01,039 --> 00:01:02,160
that if

30
00:01:02,160 --> 00:01:04,400
the string is sampled correctly and

31
00:01:04,400 --> 00:01:07,200
everyone plays nice and runs the honest

32
00:01:07,200 --> 00:01:10,240
algorithms the verifier always accepts

33
00:01:10,240 --> 00:01:13,280
um yes instances soundness says that the

34
00:01:13,280 --> 00:01:15,680
verifier cannot be cheated

35
00:01:15,680 --> 00:01:17,920
and zero knowledge says that the

36
00:01:17,920 --> 00:01:20,159
verifier learns nothing from the

37
00:01:20,159 --> 00:01:22,640
interaction with the honest prover thing

38
00:01:22,640 --> 00:01:26,159
the honest crs which means uh formally

39
00:01:26,159 --> 00:01:28,479
that there is some polynomial sign the

40
00:01:28,479 --> 00:01:30,000
time simulator

41
00:01:30,000 --> 00:01:31,520
such that for every

42
00:01:31,520 --> 00:01:32,960
language

43
00:01:32,960 --> 00:01:35,119
um the crs

44
00:01:35,119 --> 00:01:37,360
together with the proof

45
00:01:37,360 --> 00:01:40,079
are simulatable by the simulator who

46
00:01:40,079 --> 00:01:43,200
receives only the instance

47
00:01:43,200 --> 00:01:44,720
so this thought we are going to talk

48
00:01:44,720 --> 00:01:48,640
about um nisiks for qma and the setting

49
00:01:48,640 --> 00:01:50,960
that we are aiming for is exactly the

50
00:01:50,960 --> 00:01:52,880
same except that the proof from the

51
00:01:52,880 --> 00:01:55,200
prover to the verifier

52
00:01:55,200 --> 00:01:57,439
is a quantum state

53
00:01:57,439 --> 00:02:00,799
and the crs is also a random classical

54
00:02:00,799 --> 00:02:04,799
string in this case this stays classical

55
00:02:04,799 --> 00:02:06,000
and

56
00:02:06,000 --> 00:02:09,758
what we know for mp um

57
00:02:09,758 --> 00:02:11,599
already for quite some times is that

58
00:02:11,599 --> 00:02:13,920
under learning with errors assumptions

59
00:02:13,920 --> 00:02:16,160
uh non-interactive their own knowledge

60
00:02:16,160 --> 00:02:18,959
um for np exists

61
00:02:18,959 --> 00:02:21,280
this is the work of connected al and

62
00:02:21,280 --> 00:02:22,400
then

63
00:02:22,400 --> 00:02:24,319
am removing the circular security

64
00:02:24,319 --> 00:02:27,520
assumption by by carton shahan and for

65
00:02:27,520 --> 00:02:30,800
qma we don't have naseks under any

66
00:02:30,800 --> 00:02:32,560
assumption

67
00:02:32,560 --> 00:02:36,160
so what do we know in what models we we

68
00:02:36,160 --> 00:02:38,480
do know how to construct uh music for

69
00:02:38,480 --> 00:02:39,680
qma

70
00:02:39,680 --> 00:02:42,160
so we can relax the setup and instead of

71
00:02:42,160 --> 00:02:45,040
just only this crs the trusted party can

72
00:02:45,040 --> 00:02:46,640
give a trap

73
00:02:46,640 --> 00:02:48,480
to the verifier

74
00:02:48,480 --> 00:02:53,120
and um under this model um

75
00:02:53,120 --> 00:02:55,120
um non-interactive zero knowledge which

76
00:02:55,120 --> 00:02:57,840
is called the designated verifier model

77
00:02:57,840 --> 00:03:00,319
they do exist for qma

78
00:03:00,319 --> 00:03:02,959
so this is already known to be possible

79
00:03:02,959 --> 00:03:04,640
um the first question that we are going

80
00:03:04,640 --> 00:03:06,879
to ask in this work which is not known

81
00:03:06,879 --> 00:03:08,080
to be achieved

82
00:03:08,080 --> 00:03:11,599
is that um can the setup be reused that

83
00:03:11,599 --> 00:03:14,480
is after i'm seeing the crs and the

84
00:03:14,480 --> 00:03:16,400
welfare receives this secret

85
00:03:16,400 --> 00:03:19,440
verification key um

86
00:03:19,440 --> 00:03:22,239
can we give arbitrarily many proofs and

87
00:03:22,239 --> 00:03:24,799
this is especially important in terms of

88
00:03:24,799 --> 00:03:27,840
the efficiency gains of music over

89
00:03:27,840 --> 00:03:30,000
interactive protocols

90
00:03:30,000 --> 00:03:32,239
because in the real world um the trusted

91
00:03:32,239 --> 00:03:34,319
setup we don't have a trusted party and

92
00:03:34,319 --> 00:03:37,599
the trusted setup is known to be um

93
00:03:37,599 --> 00:03:40,239
generated by multi-party computation

94
00:03:40,239 --> 00:03:42,319
which is interactive

95
00:03:42,319 --> 00:03:44,799
so if we need to interact for every new

96
00:03:44,799 --> 00:03:47,200
proof and we cannot just interact once

97
00:03:47,200 --> 00:03:49,920
generate the setup and then carry on to

98
00:03:49,920 --> 00:03:52,239
have as many proofs as we like

99
00:03:52,239 --> 00:03:55,120
and this is exactly um from practical

100
00:03:55,120 --> 00:03:57,439
point of view like an interactive

101
00:03:57,439 --> 00:03:58,560
article

102
00:03:58,560 --> 00:04:01,040
so this is our main question

103
00:04:01,040 --> 00:04:03,920
for this work and the other question is

104
00:04:03,920 --> 00:04:07,120
uh improving another part of the setup

105
00:04:07,120 --> 00:04:10,080
uh look at that this trusted party need

106
00:04:10,080 --> 00:04:10,720
to

107
00:04:10,720 --> 00:04:13,120
sample a trapdoor for each new verifier

108
00:04:13,120 --> 00:04:15,360
that wants to join the system

109
00:04:15,360 --> 00:04:18,079
and what we would like to achieve is a

110
00:04:18,079 --> 00:04:19,680
setting where the trusted party runs

111
00:04:19,680 --> 00:04:23,759
once it generates this crs and that's it

112
00:04:23,759 --> 00:04:26,720
this is the only trusted part um from

113
00:04:26,720 --> 00:04:29,600
the system and anyway file can sample

114
00:04:29,600 --> 00:04:31,680
all by itself a private and secret

115
00:04:31,680 --> 00:04:35,040
verification keys and publish the public

116
00:04:35,040 --> 00:04:35,919
key

117
00:04:35,919 --> 00:04:37,600
this model called the malicious

118
00:04:37,600 --> 00:04:39,840
designated verifier model as suggested

119
00:04:39,840 --> 00:04:42,960
first bike watch bottom and weeks

120
00:04:42,960 --> 00:04:45,040
and from this point on

121
00:04:45,040 --> 00:04:48,720
the prover trusts only this and this

122
00:04:48,720 --> 00:04:51,520
can be possibly malicious

123
00:04:51,520 --> 00:04:53,360
this comes up naturally in the zero

124
00:04:53,360 --> 00:04:56,000
knowledge of nasa

125
00:04:56,000 --> 00:04:58,160
so this is our second question naturally

126
00:04:58,160 --> 00:05:00,240
we want to achieve this

127
00:05:00,240 --> 00:05:03,520
while also keeping um having multi-film

128
00:05:03,520 --> 00:05:05,759
security the first and main question

129
00:05:05,759 --> 00:05:09,039
okay so let's talk a bit about firewalk

130
00:05:09,039 --> 00:05:11,199
and these are the four parameters that

131
00:05:11,199 --> 00:05:14,080
we're going to be looking at

132
00:05:14,080 --> 00:05:15,360
um

133
00:05:15,360 --> 00:05:17,840
so um this is the work of allergies

134
00:05:17,840 --> 00:05:20,880
charles cruz this is the world of

135
00:05:20,880 --> 00:05:24,400
the work of broadband and grillo this is

136
00:05:24,400 --> 00:05:27,600
koladanjal of vittikenjiang um as you

137
00:05:27,600 --> 00:05:30,479
can see all of the previous works did

138
00:05:30,479 --> 00:05:32,639
not have multi theorem security and this

139
00:05:32,639 --> 00:05:35,919
is how they compare in these parameters

140
00:05:35,919 --> 00:05:37,120
and

141
00:05:37,120 --> 00:05:40,800
two things to mention is that the acgh

142
00:05:40,800 --> 00:05:42,720
um walk

143
00:05:42,720 --> 00:05:44,880
has a classical verifier which is very

144
00:05:44,880 --> 00:05:46,560
significant

145
00:05:46,560 --> 00:05:49,600
and the broadband and grilo work is a

146
00:05:49,600 --> 00:05:52,479
proof system it has statistical sounds

147
00:05:52,479 --> 00:05:55,440
while the other works um are only

148
00:05:55,440 --> 00:05:57,120
arguments

149
00:05:57,120 --> 00:05:59,840
okay so um our main result is that

150
00:05:59,840 --> 00:06:02,560
assuming the standard hardness for

151
00:06:02,560 --> 00:06:05,440
polynomial time algorithms

152
00:06:05,440 --> 00:06:09,039
and for lwe we have multi-theorem secure

153
00:06:09,039 --> 00:06:11,280
malicious distinguished verifier a nizek

154
00:06:11,280 --> 00:06:12,800
for qma

155
00:06:12,800 --> 00:06:15,039
also if we assume

156
00:06:15,039 --> 00:06:18,240
subject financial hardness of lwe

157
00:06:18,240 --> 00:06:20,639
we have adaptive sounds

158
00:06:20,639 --> 00:06:22,319
but uh this is just complexity

159
00:06:22,319 --> 00:06:24,400
leveraging this is the more interesting

160
00:06:24,400 --> 00:06:25,840
part

161
00:06:25,840 --> 00:06:27,120
okay and

162
00:06:27,120 --> 00:06:31,039
subsequent work um are these two works

163
00:06:31,039 --> 00:06:35,120
this is about to circle angelo puana

164
00:06:36,400 --> 00:06:40,800
and the bck-m work um actually in all

165
00:06:40,800 --> 00:06:44,240
meaningful parameters subsume this work

166
00:06:44,240 --> 00:06:47,759
um two improvements they make is that

167
00:06:47,759 --> 00:06:50,400
they use a single qma weakness rather

168
00:06:50,400 --> 00:06:52,319
than polynomially many copies of the

169
00:06:52,319 --> 00:06:53,759
quantum witness

170
00:06:53,759 --> 00:06:55,919
and in order to achieve adaptive

171
00:06:55,919 --> 00:07:00,000
soundness they use only polynomial

172
00:07:00,639 --> 00:07:01,440
the

173
00:07:01,440 --> 00:07:06,080
my work has a classical verifier um

174
00:07:06,080 --> 00:07:07,360
again

175
00:07:07,360 --> 00:07:11,599
but it uses a very uh non-standard um

176
00:07:11,599 --> 00:07:14,560
setup where you use quantum computation

177
00:07:14,560 --> 00:07:16,960
for the trusted set

178
00:07:16,960 --> 00:07:20,479
okay so let's just uh define what we are

179
00:07:20,479 --> 00:07:22,400
aiming for again this is the only

180
00:07:22,400 --> 00:07:23,840
trusted part

181
00:07:23,840 --> 00:07:27,280
um any verifier can publish a public key

182
00:07:27,280 --> 00:07:29,280
and save to itself the trapdoor the

183
00:07:29,280 --> 00:07:31,120
secret verification key

184
00:07:31,120 --> 00:07:33,599
any approval can approach seeing the

185
00:07:33,599 --> 00:07:36,160
common reference string and trusting

186
00:07:36,160 --> 00:07:37,759
only this

187
00:07:37,759 --> 00:07:39,919
and also a public verification key it

188
00:07:39,919 --> 00:07:42,960
can give a proof non-interactively

189
00:07:42,960 --> 00:07:45,199
and this is going to be usable which

190
00:07:45,199 --> 00:07:46,879
means completeness stays the same

191
00:07:46,879 --> 00:07:48,720
computing completeness is always

192
00:07:48,720 --> 00:07:50,479
reusable

193
00:07:50,479 --> 00:07:52,639
multitherm soundness is going to be the

194
00:07:52,639 --> 00:07:54,240
interesting part

195
00:07:54,240 --> 00:07:56,800
um after a malicious

196
00:07:56,800 --> 00:08:00,960
quantum polynomial time oval sees um

197
00:08:00,960 --> 00:08:03,199
these two it can repeatedly interact

198
00:08:03,199 --> 00:08:05,599
with the verifier every time sending a

199
00:08:05,599 --> 00:08:06,560
proof

200
00:08:06,560 --> 00:08:08,960
and seeing the acceptance or rejection

201
00:08:08,960 --> 00:08:10,800
bit of the verifier

202
00:08:10,800 --> 00:08:14,160
and at the end it's going to send a

203
00:08:14,160 --> 00:08:16,720
fake proof for a known instance

204
00:08:16,720 --> 00:08:20,080
and developer is still going to reject

205
00:08:20,080 --> 00:08:22,319
almost always with overwhelming

206
00:08:22,319 --> 00:08:25,039
probability

207
00:08:25,280 --> 00:08:27,199
theorem zero knowledge is going to

208
00:08:27,199 --> 00:08:29,440
define uh to be defined uh as in

209
00:08:29,440 --> 00:08:30,879
fireworks

210
00:08:30,879 --> 00:08:33,679
uh where we have some quantum polynomial

211
00:08:33,679 --> 00:08:36,640
time distinguisher that sends a possibly

212
00:08:36,640 --> 00:08:38,719
malicious private verification a public

213
00:08:38,719 --> 00:08:42,320
verification key and a yes instance and

214
00:08:42,320 --> 00:08:44,720
a witness for that instance

215
00:08:44,720 --> 00:08:47,519
these two have to be legit

216
00:08:47,519 --> 00:08:51,920
and the approval um sends a real proof

217
00:08:51,920 --> 00:08:54,080
and the distinguish here is going to try

218
00:08:54,080 --> 00:08:56,560
to distinguish this channel this prover

219
00:08:56,560 --> 00:08:57,760
channel

220
00:08:57,760 --> 00:08:59,680
form the simulator challenge the

221
00:08:59,680 --> 00:09:01,279
simulator is going to be some quantum

222
00:09:01,279 --> 00:09:04,399
polynomial algorithm it's going to

223
00:09:04,399 --> 00:09:06,080
sample a

224
00:09:06,080 --> 00:09:09,200
crs with trapdoor and then where the

225
00:09:09,200 --> 00:09:12,080
distinguisher sends this

226
00:09:12,080 --> 00:09:14,160
it the simulator is going to have access

227
00:09:14,160 --> 00:09:16,640
to the public key the instance but of

228
00:09:16,640 --> 00:09:19,040
course not the witness

229
00:09:19,040 --> 00:09:20,560
and these are going to be

230
00:09:20,560 --> 00:09:22,399
indistinguishable this channel from the

231
00:09:22,399 --> 00:09:24,640
pool channel so let's carry on to the

232
00:09:24,640 --> 00:09:26,640
construction itself

233
00:09:26,640 --> 00:09:28,320
we are going to start with the sigma

234
00:09:28,320 --> 00:09:31,680
protocol for qma um this is a three

235
00:09:31,680 --> 00:09:33,839
message protocol the approval sends a

236
00:09:33,839 --> 00:09:36,399
quantum possibly quantum message alpha

237
00:09:36,399 --> 00:09:38,240
the verifier responds with a classical

238
00:09:38,240 --> 00:09:40,160
random string beta which is usually

239
00:09:40,160 --> 00:09:41,920
called the challenge

240
00:09:41,920 --> 00:09:44,320
and approval responds with gamma

241
00:09:44,320 --> 00:09:46,560
which um

242
00:09:46,560 --> 00:09:50,080
can also be quantum i'm going to use two

243
00:09:50,080 --> 00:09:52,240
properties of the sigma protocol first

244
00:09:52,240 --> 00:09:54,080
that we have negligible sound is all the

245
00:09:54,080 --> 00:09:56,560
probability that the approval convinces

246
00:09:56,560 --> 00:09:58,880
only fourth instance is like

247
00:09:58,880 --> 00:10:02,240
overwhelmingly um close to zero

248
00:10:02,240 --> 00:10:04,079
and we're going to use the fact that we

249
00:10:04,079 --> 00:10:05,600
have um

250
00:10:05,600 --> 00:10:07,920
what's called special zero knowledge

251
00:10:07,920 --> 00:10:10,880
which means that a simulator having this

252
00:10:10,880 --> 00:10:14,800
beta the verifier sends if it knows the

253
00:10:14,800 --> 00:10:17,440
beta ahead of sending alpha

254
00:10:17,440 --> 00:10:21,440
this simulator can send alpha and gamma

255
00:10:21,440 --> 00:10:23,440
that are indistinguishable from the

256
00:10:23,440 --> 00:10:25,360
gamma and from the alpha and gamma that

257
00:10:25,360 --> 00:10:27,680
are sent in the real protocol as long as

258
00:10:27,680 --> 00:10:30,800
it knows beta energy

259
00:10:31,600 --> 00:10:35,360
okay so when we think of music for np

260
00:10:35,360 --> 00:10:38,079
we also start from from a sigma protocol

261
00:10:38,079 --> 00:10:38,959
for

262
00:10:38,959 --> 00:10:41,760
np not for qma but the techniques

263
00:10:41,760 --> 00:10:43,839
require alpha to be classical if you

264
00:10:43,839 --> 00:10:45,440
think for example on the fiat mural

265
00:10:45,440 --> 00:10:48,480
transform you apply a random all

266
00:10:48,480 --> 00:10:51,360
correlation interactable function on

267
00:10:51,360 --> 00:10:52,720
alpha

268
00:10:52,720 --> 00:10:55,360
on the classical string alpha

269
00:10:55,360 --> 00:10:58,399
um so we are going to use when we move

270
00:10:58,399 --> 00:11:00,560
to qma we are going to use the fact that

271
00:11:00,560 --> 00:11:02,959
we already have knees x4 and p

272
00:11:02,959 --> 00:11:05,680
and try to avoid this uh

273
00:11:05,680 --> 00:11:09,040
applying a function to alpha at all

274
00:11:09,040 --> 00:11:10,000
and

275
00:11:10,000 --> 00:11:12,560
more like concretely for the for this

276
00:11:12,560 --> 00:11:14,079
talk we we're going to start with

277
00:11:14,079 --> 00:11:15,360
thinking

278
00:11:15,360 --> 00:11:17,120
um

279
00:11:17,120 --> 00:11:20,320
of a classical sigma protocol

280
00:11:20,320 --> 00:11:22,720
and we're going to like make sure that

281
00:11:22,720 --> 00:11:25,120
we like do things that

282
00:11:25,120 --> 00:11:28,079
seem quantum compatible and then at the

283
00:11:28,079 --> 00:11:31,760
end make sure that our technique really

284
00:11:31,760 --> 00:11:33,920
works also for quantum multiple so this

285
00:11:33,920 --> 00:11:36,240
is a classical technique that will also

286
00:11:36,240 --> 00:11:38,959
work for quantum photographs

287
00:11:38,959 --> 00:11:41,519
okay the tools that we are going to use

288
00:11:41,519 --> 00:11:42,640
along

289
00:11:42,640 --> 00:11:45,519
sigma protocols for qma

290
00:11:45,519 --> 00:11:49,760
is a music for np in the crs model

291
00:11:49,760 --> 00:11:51,519
and we're going to use a pseudo-random

292
00:11:51,519 --> 00:11:53,839
key public encryption this is a public

293
00:11:53,839 --> 00:11:54,959
encryption

294
00:11:54,959 --> 00:11:55,839
where

295
00:11:55,839 --> 00:11:58,399
the public key is indistinguishable from

296
00:11:58,399 --> 00:12:00,639
a random string

297
00:12:00,639 --> 00:12:03,279
and we're going to use a two message

298
00:12:03,279 --> 00:12:05,920
um sdp secure function evaluation which

299
00:12:05,920 --> 00:12:07,600
is really

300
00:12:07,600 --> 00:12:09,040
simply

301
00:12:09,040 --> 00:12:11,440
fully homomorphic encryption where you

302
00:12:11,440 --> 00:12:13,440
also have the guarantee of circuit

303
00:12:13,440 --> 00:12:14,639
privacy

304
00:12:14,639 --> 00:12:16,959
i assume everyone knows what is fhe

305
00:12:16,959 --> 00:12:19,040
fully homomorphic encryption and the

306
00:12:19,040 --> 00:12:22,399
circuit privacy says that if we

307
00:12:22,399 --> 00:12:25,279
have an encryption of x and we evaluate

308
00:12:25,279 --> 00:12:27,600
we make homomorphic evaluation of some

309
00:12:27,600 --> 00:12:30,560
circuit c and we get an encryption of c

310
00:12:30,560 --> 00:12:32,000
of x

311
00:12:32,000 --> 00:12:34,880
then this encryption hides like

312
00:12:34,880 --> 00:12:40,480
everything on c it just show you c of x

313
00:12:41,360 --> 00:12:42,959
okay so

314
00:12:42,959 --> 00:12:45,279
let's start with an attempt to have

315
00:12:45,279 --> 00:12:47,920
single theorem security we won't have

316
00:12:47,920 --> 00:12:51,040
multi theorem sum

317
00:12:51,120 --> 00:12:54,240
um okay so let's let's um observe that

318
00:12:54,240 --> 00:12:56,000
this method because this is a random

319
00:12:56,000 --> 00:12:58,560
string it is completely independent of

320
00:12:58,560 --> 00:13:00,320
the messages the other messages the

321
00:13:00,320 --> 00:13:02,880
progress sends in the protocol

322
00:13:02,880 --> 00:13:06,160
so what we're going to try to do is this

323
00:13:06,160 --> 00:13:08,240
the welfare is going to send an sf

324
00:13:08,240 --> 00:13:11,760
encryption of its random challenge beta

325
00:13:11,760 --> 00:13:14,079
and public key encryption

326
00:13:14,079 --> 00:13:16,399
of its like entire

327
00:13:16,399 --> 00:13:18,639
randomness or the secret verification

328
00:13:18,639 --> 00:13:21,120
key which comprises the challenge

329
00:13:21,120 --> 00:13:26,000
and the secret key of this sfe scheme

330
00:13:26,000 --> 00:13:30,320
and also a music for np proof that all

331
00:13:30,320 --> 00:13:32,639
of this is

332
00:13:32,639 --> 00:13:34,959
is consistent

333
00:13:34,959 --> 00:13:37,040
it is consistently generated and if you

334
00:13:37,040 --> 00:13:39,120
take some string from here

335
00:13:39,120 --> 00:13:41,600
you can generate this cipher text and

336
00:13:41,600 --> 00:13:44,480
this cipher text

337
00:13:45,360 --> 00:13:48,959
okay so now how the google is going to

338
00:13:48,959 --> 00:13:50,160
go

339
00:13:50,160 --> 00:13:52,240
non-interactively given the public key

340
00:13:52,240 --> 00:13:55,760
and the crs and the crs is one party crs

341
00:13:55,760 --> 00:13:58,720
for the mp music that both the verifier

342
00:13:58,720 --> 00:14:00,720
and the prover are going to use and one

343
00:14:00,720 --> 00:14:03,519
is from the pseudo-random public key

344
00:14:03,519 --> 00:14:05,839
encryption

345
00:14:05,839 --> 00:14:08,480
so it's going to compute alpha out in

346
00:14:08,480 --> 00:14:09,920
the open

347
00:14:09,920 --> 00:14:11,440
and then

348
00:14:11,440 --> 00:14:14,399
gamma homomorphically which means um we

349
00:14:14,399 --> 00:14:16,639
know that the first message of the sigma

350
00:14:16,639 --> 00:14:18,560
protocol over is going to output two

351
00:14:18,560 --> 00:14:20,639
things one public one private

352
00:14:20,639 --> 00:14:23,600
the private one is a trapdoor tao and

353
00:14:23,600 --> 00:14:26,000
the public one is alpha

354
00:14:26,000 --> 00:14:28,320
and then it's going to send alpha along

355
00:14:28,320 --> 00:14:31,199
with this evaluated ciphertext

356
00:14:31,199 --> 00:14:33,760
which is evaluating this cipher text

357
00:14:33,760 --> 00:14:36,560
that contains beta

358
00:14:36,560 --> 00:14:39,360
on this function this is actually the

359
00:14:39,360 --> 00:14:40,720
third

360
00:14:40,720 --> 00:14:43,680
message function in the sigma portal

361
00:14:43,680 --> 00:14:45,670
so it just computes

362
00:14:45,670 --> 00:14:46,959
[Music]

363
00:14:46,959 --> 00:14:48,240
the profile

364
00:14:48,240 --> 00:14:49,839
homomorphically

365
00:14:49,839 --> 00:14:55,440
to compute gamma using this strap dota

366
00:14:56,959 --> 00:15:00,160
and along with these two um messages

367
00:15:00,160 --> 00:15:02,399
it's also going to send a public

368
00:15:02,399 --> 00:15:05,279
encryption of the trapdoor like the

369
00:15:05,279 --> 00:15:07,040
verifier did here

370
00:15:07,040 --> 00:15:09,920
and prove in isaac

371
00:15:09,920 --> 00:15:11,360
that um

372
00:15:11,360 --> 00:15:13,360
that everything is consistent

373
00:15:13,360 --> 00:15:16,079
because all the messages are classical

374
00:15:16,079 --> 00:15:18,880
for now this is going to be fine we can

375
00:15:18,880 --> 00:15:22,959
prove consistency by an npinis

376
00:15:23,199 --> 00:15:25,760
and finally how the welfare is going to

377
00:15:25,760 --> 00:15:29,600
decide if to it to accept or reject um

378
00:15:29,600 --> 00:15:31,519
two things need to happen first the

379
00:15:31,519 --> 00:15:33,519
proof has to be valid

380
00:15:33,519 --> 00:15:35,759
the proof of the approval here if it's

381
00:15:35,759 --> 00:15:37,279
not valid

382
00:15:37,279 --> 00:15:39,440
it's going to reject immediately and if

383
00:15:39,440 --> 00:15:41,519
it's right it's also going to check

384
00:15:41,519 --> 00:15:44,480
whether the sigma protocol verifier

385
00:15:44,480 --> 00:15:47,920
accepts this this is alpha

386
00:15:47,920 --> 00:15:50,320
beta already knows beta the verifier

387
00:15:50,320 --> 00:15:52,959
alpha is out in the open and it computes

388
00:15:52,959 --> 00:15:56,720
gamma by decryption because here

389
00:15:56,720 --> 00:16:00,320
this is an sfp encryption of gamma if

390
00:16:00,320 --> 00:16:02,399
the proverb behaves honestly so it

391
00:16:02,399 --> 00:16:04,639
decrypts and then this is alpha beta

392
00:16:04,639 --> 00:16:06,399
gamma

393
00:16:06,399 --> 00:16:09,440
now let's give a post search

394
00:16:09,440 --> 00:16:11,279
for the zero knowledge simulation

395
00:16:11,279 --> 00:16:12,880
validity

396
00:16:12,880 --> 00:16:15,920
so let's first recall the setting this

397
00:16:15,920 --> 00:16:18,399
is the real protocol but in the

398
00:16:18,399 --> 00:16:19,120
the

399
00:16:19,120 --> 00:16:21,199
definition of zero knowledge this is

400
00:16:21,199 --> 00:16:23,199
going to be a quantum polynomial

401
00:16:23,199 --> 00:16:25,199
distinguisher who is going to try and

402
00:16:25,199 --> 00:16:27,920
distinguish the real proof and the crs

403
00:16:27,920 --> 00:16:31,120
from the simulator that we just now will

404
00:16:31,120 --> 00:16:32,320
describe

405
00:16:32,320 --> 00:16:34,720
so first the simulator

406
00:16:34,720 --> 00:16:37,120
simulates the crs it has a strap door so

407
00:16:37,120 --> 00:16:39,120
it can uh pull

408
00:16:39,120 --> 00:16:43,120
um four statements and also samples a

409
00:16:43,120 --> 00:16:45,680
true public key for the pks

410
00:16:45,680 --> 00:16:47,600
now when the distinguisher

411
00:16:47,600 --> 00:16:49,279
sends a query

412
00:16:49,279 --> 00:16:52,160
we can extract beta

413
00:16:52,160 --> 00:16:54,880
by the pke encryption why we can do this

414
00:16:54,880 --> 00:16:56,639
first we can look

415
00:16:56,639 --> 00:16:57,759
at the

416
00:16:57,759 --> 00:16:59,199
the proof the music that the

417
00:16:59,199 --> 00:17:01,279
distinguisher gives

418
00:17:01,279 --> 00:17:03,440
in the public verification key and

419
00:17:03,440 --> 00:17:05,760
because of the soundness of the nizak we

420
00:17:05,760 --> 00:17:08,559
know that beta is indeed under the

421
00:17:08,559 --> 00:17:10,880
encryption under the the public

422
00:17:10,880 --> 00:17:13,199
encryption there so when we decrypt

423
00:17:13,199 --> 00:17:15,199
using the secret key

424
00:17:15,199 --> 00:17:18,480
um the dissimulator sampled we

425
00:17:18,480 --> 00:17:21,520
do have a beta now that we have beta we

426
00:17:21,520 --> 00:17:25,119
can use the sigma protocol

427
00:17:25,119 --> 00:17:27,199
special zero knowledge stimulator that

428
00:17:27,199 --> 00:17:29,520
we know that even better can stimulate

429
00:17:29,520 --> 00:17:30,880
both

430
00:17:30,880 --> 00:17:33,840
alpha and gamma

431
00:17:33,840 --> 00:17:35,520
so um

432
00:17:35,520 --> 00:17:38,080
and then

433
00:17:38,960 --> 00:17:43,840
and then uh here the simulator sends um

434
00:17:43,840 --> 00:17:46,640
the simulated gamma under sf encryption

435
00:17:46,640 --> 00:17:48,640
instead of evaluating

436
00:17:48,640 --> 00:17:51,280
this ciphertext and alpha out in the

437
00:17:51,280 --> 00:17:53,039
open

438
00:17:53,039 --> 00:17:56,640
and these two um are going to be just

439
00:17:56,640 --> 00:17:58,160
this is going to be a force proof and

440
00:17:58,160 --> 00:18:00,160
this is going to be just a bunch of

441
00:18:00,160 --> 00:18:02,080
zeroes instead of the trap

442
00:18:02,080 --> 00:18:03,520
because the simulator is not going to

443
00:18:03,520 --> 00:18:05,840
have a tractor

444
00:18:05,840 --> 00:18:07,360
um okay

445
00:18:07,360 --> 00:18:10,640
so why don't we have a multi-theorem

446
00:18:10,640 --> 00:18:12,640
soundness this is why we're not going to

447
00:18:12,640 --> 00:18:14,720
bother with even proving a single

448
00:18:14,720 --> 00:18:16,080
theorem soundness

449
00:18:16,080 --> 00:18:17,200
um

450
00:18:17,200 --> 00:18:19,760
let's see how a malicious pooler can

451
00:18:19,760 --> 00:18:20,799
attack

452
00:18:20,799 --> 00:18:21,840
and

453
00:18:21,840 --> 00:18:25,439
discover the entire beta

454
00:18:25,520 --> 00:18:26,799
so

455
00:18:26,799 --> 00:18:29,840
recall that uh every single protocol can

456
00:18:29,840 --> 00:18:30,720
be

457
00:18:30,720 --> 00:18:33,039
let's say a lot of single protocols can

458
00:18:33,039 --> 00:18:35,760
be thought of as parallel repetition of

459
00:18:35,760 --> 00:18:38,160
three message zero knowledge protocols

460
00:18:38,160 --> 00:18:39,919
so this is a bunch of alphas there's a

461
00:18:39,919 --> 00:18:41,600
bunch of patterns this is a bunch of

462
00:18:41,600 --> 00:18:43,520
gammas um

463
00:18:43,520 --> 00:18:45,600
all of them in parallel repetition and

464
00:18:45,600 --> 00:18:47,600
each of these betas

465
00:18:47,600 --> 00:18:49,919
is of size logarithmic

466
00:18:49,919 --> 00:18:52,720
in the instance size

467
00:18:52,720 --> 00:18:54,960
and the verifier the sigma protocol

468
00:18:54,960 --> 00:18:58,640
verify except if all of these accept

469
00:18:58,640 --> 00:19:00,640
so all of these alphas and gammas are

470
00:19:00,640 --> 00:19:03,120
good and proof for the challenges data

471
00:19:03,120 --> 00:19:05,280
from one to k

472
00:19:05,280 --> 00:19:08,480
so how can approver attack

473
00:19:08,480 --> 00:19:09,919
the welfare publishes the public

474
00:19:09,919 --> 00:19:12,720
replication key and we can think of the

475
00:19:12,720 --> 00:19:15,919
beta under the sf encryption as like a

476
00:19:15,919 --> 00:19:20,400
concatenation of uh of these short datas

477
00:19:20,400 --> 00:19:22,799
and the goal is uh the prover wants to

478
00:19:22,799 --> 00:19:25,679
decode each of them separately so let's

479
00:19:25,679 --> 00:19:28,320
see how it decodes the eighth one

480
00:19:28,320 --> 00:19:30,559
um it takes a yes instance

481
00:19:30,559 --> 00:19:33,679
and now to decode data i it can

482
00:19:33,679 --> 00:19:35,919
choose an arbitrary value

483
00:19:35,919 --> 00:19:36,799
in the

484
00:19:36,799 --> 00:19:39,280
set of possible betas let's say it can

485
00:19:39,280 --> 00:19:40,559
go uh

486
00:19:40,559 --> 00:19:42,400
from zero to

487
00:19:42,400 --> 00:19:44,240
to the last ring all of the possible

488
00:19:44,240 --> 00:19:46,320
strings here because it can go one after

489
00:19:46,320 --> 00:19:47,679
the other

490
00:19:47,679 --> 00:19:50,080
and it computes this

491
00:19:50,080 --> 00:19:51,360
this

492
00:19:51,360 --> 00:19:54,320
maliciously generated alpha star i

493
00:19:54,320 --> 00:19:56,400
in the following way

494
00:19:56,400 --> 00:20:00,880
so it uses the sigma protocol simulator

495
00:20:00,880 --> 00:20:02,960
that is known that given beta it can

496
00:20:02,960 --> 00:20:05,280
generate both alpha and gamma that

497
00:20:05,280 --> 00:20:07,919
satisfy this beta so it's going to do

498
00:20:07,919 --> 00:20:08,960
this for

499
00:20:08,960 --> 00:20:10,880
this beta that equals the value that it

500
00:20:10,880 --> 00:20:12,480
shows here

501
00:20:12,480 --> 00:20:14,320
and all of the other alphas in the

502
00:20:14,320 --> 00:20:17,120
parallel petition um except the height

503
00:20:17,120 --> 00:20:19,520
one are going to be computed honestly we

504
00:20:19,520 --> 00:20:20,960
can do this because this is a yes

505
00:20:20,960 --> 00:20:22,159
instance

506
00:20:22,159 --> 00:20:24,080
so um this is how it's going to look

507
00:20:24,080 --> 00:20:26,000
this is how each of the messages of the

508
00:20:26,000 --> 00:20:27,919
pool is going to look

509
00:20:27,919 --> 00:20:29,679
and

510
00:20:29,679 --> 00:20:31,919
note that all of these are going to be

511
00:20:31,919 --> 00:20:33,600
accepted by the verifier because all of

512
00:20:33,600 --> 00:20:35,760
them have a gamma that is going to be

513
00:20:35,760 --> 00:20:38,000
accepted for each of the betas

514
00:20:38,000 --> 00:20:40,799
and this is the only one that can uh

515
00:20:40,799 --> 00:20:43,039
can cause rejection by the vel file and

516
00:20:43,039 --> 00:20:45,120
this is one the this is why the verifier

517
00:20:45,120 --> 00:20:47,600
is going to accept the entire proof

518
00:20:47,600 --> 00:20:49,120
if and only if

519
00:20:49,120 --> 00:20:52,000
the value that we chose is

520
00:20:52,000 --> 00:20:54,480
beta i

521
00:20:54,559 --> 00:20:57,200
now we have polynomially many options

522
00:20:57,200 --> 00:20:59,360
for each of the beta eyes because better

523
00:20:59,360 --> 00:21:01,360
eyes of logarithmic

524
00:21:01,360 --> 00:21:04,080
so we can try polynomial many times and

525
00:21:04,080 --> 00:21:06,400
find each of the eyes each of the beta

526
00:21:06,400 --> 00:21:08,400
eyes

527
00:21:08,400 --> 00:21:11,280
so and this is how we decode the entire

528
00:21:11,280 --> 00:21:14,400
beta like one after the other

529
00:21:14,400 --> 00:21:17,400
12k

530
00:21:17,760 --> 00:21:19,280
so

531
00:21:19,280 --> 00:21:20,480
what

532
00:21:20,480 --> 00:21:22,720
what like uh we can observe in this

533
00:21:22,720 --> 00:21:24,559
attack is that

534
00:21:24,559 --> 00:21:26,880
the attack relies on the fact that x is

535
00:21:26,880 --> 00:21:29,440
in the language the the x that the over

536
00:21:29,440 --> 00:21:32,320
chose at the beginning of the attack

537
00:21:32,320 --> 00:21:36,720
and for that x it could uh decode beta

538
00:21:36,720 --> 00:21:39,600
and if it didn't have the the like the

539
00:21:39,600 --> 00:21:42,080
option to choose the s instance this

540
00:21:42,080 --> 00:21:45,120
wouldn't have been this wouldn't work

541
00:21:45,120 --> 00:21:47,760
why because like from there just from

542
00:21:47,760 --> 00:21:49,440
the thumbnails

543
00:21:49,440 --> 00:21:52,000
of the underlying sigma protocol all of

544
00:21:52,000 --> 00:21:54,159
them are going to all of these alphas

545
00:21:54,159 --> 00:21:56,320
now this is no instance none of these

546
00:21:56,320 --> 00:21:59,600
can be like computed honestly as before

547
00:21:59,600 --> 00:22:03,039
so all of them are prone to rejection

548
00:22:03,039 --> 00:22:04,400
this is just the intuition but the

549
00:22:04,400 --> 00:22:06,159
formal statement is because of the sigma

550
00:22:06,159 --> 00:22:08,400
protocol is founded

551
00:22:08,400 --> 00:22:11,039
and all of the answers from the verifier

552
00:22:11,039 --> 00:22:13,200
is just going to be zero zero zero zero

553
00:22:13,200 --> 00:22:15,280
zero and you cannot decode anything out

554
00:22:15,280 --> 00:22:16,720
of this

555
00:22:16,720 --> 00:22:20,400
so um we're going to fix our chord by by

556
00:22:20,400 --> 00:22:24,159
letting the challenge um beta depend on

557
00:22:24,159 --> 00:22:26,480
x now we're called we are dealing with

558
00:22:26,480 --> 00:22:29,520
you we are going to deal later with qma

559
00:22:29,520 --> 00:22:31,520
languages and

560
00:22:31,520 --> 00:22:32,799
but

561
00:22:32,799 --> 00:22:36,480
even though the the witness is quantum

562
00:22:36,480 --> 00:22:38,240
um the instance is classical and we're

563
00:22:38,240 --> 00:22:40,240
going to use this the description of the

564
00:22:40,240 --> 00:22:42,080
instance is classified

565
00:22:42,080 --> 00:22:45,039
so um instead of an sf encryption of

566
00:22:45,039 --> 00:22:47,120
beta now the verifier is going to

567
00:22:47,120 --> 00:22:50,159
encrypt a prf secret key

568
00:22:50,159 --> 00:22:52,960
and now when the approval sends this

569
00:22:52,960 --> 00:22:55,840
proof it's going to um alpha out in the

570
00:22:55,840 --> 00:22:58,159
open again gamma is going to be computed

571
00:22:58,159 --> 00:22:59,360
under

572
00:22:59,360 --> 00:23:00,559
encryption

573
00:23:00,559 --> 00:23:03,760
but this circuit is going to change

574
00:23:03,760 --> 00:23:06,000
it's going to take the prf key and

575
00:23:06,000 --> 00:23:08,960
instead of just computing the provers

576
00:23:08,960 --> 00:23:11,200
third message function uh using the

577
00:23:11,200 --> 00:23:14,240
trapdoor and beta it's going to compute

578
00:23:14,240 --> 00:23:15,039
a

579
00:23:15,039 --> 00:23:17,440
instance dependent beta

580
00:23:17,440 --> 00:23:19,440
which is just going to be

581
00:23:19,440 --> 00:23:22,640
pseudo random string

582
00:23:22,640 --> 00:23:23,220
um

583
00:23:23,220 --> 00:23:24,480
[Music]

584
00:23:24,480 --> 00:23:25,440
yeah

585
00:23:25,440 --> 00:23:28,720
okay so this is the the the fixed

586
00:23:28,720 --> 00:23:30,159
protocol

587
00:23:30,159 --> 00:23:33,919
so we now move to give a quick proof

588
00:23:33,919 --> 00:23:36,720
sketch for the music theorem sounds

589
00:23:36,720 --> 00:23:40,240
so um the reduction starts with the um

590
00:23:40,240 --> 00:23:41,840
simulating

591
00:23:41,840 --> 00:23:44,799
the entire crs which means the crs part

592
00:23:44,799 --> 00:23:45,919
for the

593
00:23:45,919 --> 00:23:49,120
and beneath and also for the public key

594
00:23:49,120 --> 00:23:51,039
for the

595
00:23:51,039 --> 00:23:53,279
pke

596
00:23:53,279 --> 00:23:55,360
and now we have to wrap those we have

597
00:23:55,360 --> 00:23:57,200
this laptop for the public key and we

598
00:23:57,200 --> 00:23:59,760
have a trapdoor for this year

599
00:23:59,760 --> 00:24:03,520
so um we know that approval always

600
00:24:03,520 --> 00:24:05,760
stands under pke encryption this

601
00:24:05,760 --> 00:24:08,880
trapdoor tao and by the soundness of the

602
00:24:08,880 --> 00:24:11,679
anti-music that the approval sends

603
00:24:11,679 --> 00:24:14,400
we know that this tao is correct which

604
00:24:14,400 --> 00:24:17,440
means this is the classical uh trapdoor

605
00:24:17,440 --> 00:24:19,760
that is used to generate

606
00:24:19,760 --> 00:24:21,520
um this

607
00:24:21,520 --> 00:24:24,320
to perform the um the homomorphic

608
00:24:24,320 --> 00:24:26,159
evaluation the homomorphic operation

609
00:24:26,159 --> 00:24:28,960
that the oval performs

610
00:24:28,960 --> 00:24:31,520
when it computes gamma under

611
00:24:31,520 --> 00:24:33,760
so we know that from the soundness of

612
00:24:33,760 --> 00:24:36,480
this wolf we know that this um

613
00:24:36,480 --> 00:24:38,240
door is the correct one

614
00:24:38,240 --> 00:24:41,520
and now intuitively we know that this

615
00:24:41,520 --> 00:24:45,679
raptor like successfully convinces

616
00:24:45,679 --> 00:24:48,640
moves for unknown like pseudo-random

617
00:24:48,640 --> 00:24:49,760
values of

618
00:24:49,760 --> 00:24:51,520
beta x

619
00:24:51,520 --> 00:24:53,679
so

620
00:24:54,400 --> 00:24:56,400
if this is the case we can switch this

621
00:24:56,400 --> 00:24:58,559
to the random to a fully random data and

622
00:24:58,559 --> 00:25:00,559
then break the soundness of the

623
00:25:00,559 --> 00:25:04,080
underlying signal protocol for qma

624
00:25:04,080 --> 00:25:06,880
so how is it look again this is a very

625
00:25:06,880 --> 00:25:08,080
rough sketch

626
00:25:08,080 --> 00:25:10,960
and we move to compute this circuit here

627
00:25:10,960 --> 00:25:13,279
out in the open because we can we have

628
00:25:13,279 --> 00:25:15,919
this we extracted this trapdoor and now

629
00:25:15,919 --> 00:25:18,000
we can compute it

630
00:25:18,000 --> 00:25:21,679
and the next thing we can do is uh not

631
00:25:21,679 --> 00:25:23,039
actually use

632
00:25:23,039 --> 00:25:26,159
the prf key but using like uh use the

633
00:25:26,159 --> 00:25:27,679
this

634
00:25:27,679 --> 00:25:31,279
fact that the sfp hides the the prft

635
00:25:31,279 --> 00:25:34,000
and then actually compute

636
00:25:34,000 --> 00:25:37,360
um the prf just through an overkill we

637
00:25:37,360 --> 00:25:38,640
can do that

638
00:25:38,640 --> 00:25:40,559
all of these moves are going to be of

639
00:25:40,559 --> 00:25:43,840
course indistinguishable for the proverb

640
00:25:43,840 --> 00:25:45,039
um

641
00:25:45,039 --> 00:25:46,960
in each of these moves we are going to

642
00:25:46,960 --> 00:25:48,799
uh in digital these hybrids we are going

643
00:25:48,799 --> 00:25:50,480
to use

644
00:25:50,480 --> 00:25:53,279
the security of one of the primitives

645
00:25:53,279 --> 00:25:56,880
but now we arrived into a final hybrid

646
00:25:56,880 --> 00:25:58,799
where the approval convinces the

647
00:25:58,799 --> 00:26:00,080
verifier

648
00:26:00,080 --> 00:26:02,320
using the scrap door that is always

649
00:26:02,320 --> 00:26:05,279
extracted the tao but this is a random

650
00:26:05,279 --> 00:26:07,120
this is a random string

651
00:26:07,120 --> 00:26:09,840
so we found a puller that

652
00:26:09,840 --> 00:26:12,000
for no instance this would be at this

653
00:26:12,000 --> 00:26:14,000
point in no instance

654
00:26:14,000 --> 00:26:16,799
and convinces a verifier with noticeable

655
00:26:16,799 --> 00:26:18,080
probability

656
00:26:18,080 --> 00:26:21,120
for a random string and this will break

657
00:26:21,120 --> 00:26:24,480
the soundness of the sigma protocol

658
00:26:24,480 --> 00:26:26,640
very roughly

659
00:26:26,640 --> 00:26:30,320
okay so let's move to making sure

660
00:26:30,320 --> 00:26:31,200
that

661
00:26:31,200 --> 00:26:34,720
we can use this technique for qma

662
00:26:34,720 --> 00:26:37,360
so what exactly are the properties that

663
00:26:37,360 --> 00:26:41,200
we used in this construction so

664
00:26:41,200 --> 00:26:43,840
one thing that we can observe is that

665
00:26:43,840 --> 00:26:46,480
this computation of the circuit

666
00:26:46,480 --> 00:26:47,840
c tau

667
00:26:47,840 --> 00:26:51,200
has to be a classical computation

668
00:26:51,200 --> 00:26:52,880
which isn't necessarily the case for

669
00:26:52,880 --> 00:26:55,679
quantum protocols because even in the

670
00:26:55,679 --> 00:26:56,880
worst case

671
00:26:56,880 --> 00:26:59,120
gamma can be a quantum state and for

672
00:26:59,120 --> 00:27:01,120
sure this cannot be a classical

673
00:27:01,120 --> 00:27:03,360
computation

674
00:27:03,360 --> 00:27:05,360
right um

675
00:27:05,360 --> 00:27:08,240
this is an npd proof and it always

676
00:27:08,240 --> 00:27:12,159
proves that this is a valid computation

677
00:27:12,159 --> 00:27:13,679
and um

678
00:27:13,679 --> 00:27:15,679
what we're going to observe is that

679
00:27:15,679 --> 00:27:17,279
we're going to use the quantum's a

680
00:27:17,279 --> 00:27:19,679
specific sigma protocol

681
00:27:19,679 --> 00:27:21,919
or qma complete language this is called

682
00:27:21,919 --> 00:27:24,320
the consistency of local density

683
00:27:24,320 --> 00:27:26,480
matrices and

684
00:27:26,480 --> 00:27:29,039
local yeah by uh this is the work of

685
00:27:29,039 --> 00:27:31,520
important video and

686
00:27:31,520 --> 00:27:34,880
this protocol is very very simple um

687
00:27:34,880 --> 00:27:38,720
alpha is just a quantum one-time pad

688
00:27:38,720 --> 00:27:40,720
encryption of the weakness

689
00:27:40,720 --> 00:27:44,240
tau the trapdoor on alpha

690
00:27:44,240 --> 00:27:45,039
is

691
00:27:45,039 --> 00:27:47,360
a classical string which is the

692
00:27:47,360 --> 00:27:50,080
the quantum one-time batches

693
00:27:50,080 --> 00:27:51,039
and

694
00:27:51,039 --> 00:27:53,200
gamma is just

695
00:27:53,200 --> 00:27:56,480
the protocol is beta you open um some

696
00:27:56,480 --> 00:27:59,600
part some subset of the cubic of the

697
00:27:59,600 --> 00:28:00,720
witness

698
00:28:00,720 --> 00:28:03,039
and gamma is just the quantum the

699
00:28:03,039 --> 00:28:06,000
classical quantum one time bacteria of

700
00:28:06,000 --> 00:28:08,799
this specific cubit so this is uh

701
00:28:08,799 --> 00:28:09,679
some

702
00:28:09,679 --> 00:28:11,279
part of the

703
00:28:11,279 --> 00:28:13,919
classical bits of tau

704
00:28:13,919 --> 00:28:16,320
and then this computation is simply

705
00:28:16,320 --> 00:28:17,440
sending

706
00:28:17,440 --> 00:28:19,840
the correct um

707
00:28:19,840 --> 00:28:21,120
classical

708
00:28:21,120 --> 00:28:23,360
um keys

709
00:28:23,360 --> 00:28:26,000
demanded according to beta

710
00:28:26,000 --> 00:28:26,880
so

711
00:28:26,880 --> 00:28:28,640
what we have here is that this is

712
00:28:28,640 --> 00:28:30,880
quantum and this can be untouched this

713
00:28:30,880 --> 00:28:32,559
is an npinis

714
00:28:32,559 --> 00:28:34,559
and this is a classical computation

715
00:28:34,559 --> 00:28:36,720
these red parts are both all classical

716
00:28:36,720 --> 00:28:38,320
computations this is the classical draft

717
00:28:38,320 --> 00:28:40,000
though and this is a classical

718
00:28:40,000 --> 00:28:43,120
homomorphic evaluation so these parts

719
00:28:43,120 --> 00:28:45,760
can be proved consistent

720
00:28:45,760 --> 00:28:49,039
using an npinzek

721
00:28:49,039 --> 00:28:53,120
and this stays quantum and untouched

722
00:28:53,120 --> 00:28:58,080
so we did this isolation of alpha and

723
00:28:58,080 --> 00:29:00,080
this actually works this is the final

724
00:29:00,080 --> 00:29:03,919
version of the protocol as an mdv music

725
00:29:03,919 --> 00:29:06,159
for qma

726
00:29:06,159 --> 00:29:10,159
so thank you very much for listening

