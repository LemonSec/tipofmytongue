1
00:00:01,520 --> 00:00:03,600
hi and welcome to my talk about

2
00:00:03,600 --> 00:00:05,359
authenticated key exchange and

3
00:00:05,359 --> 00:00:07,359
signatures with tight security in the

4
00:00:07,359 --> 00:00:09,040
standard model

5
00:00:09,040 --> 00:00:11,519
my name is dubin ripa and this is joint

6
00:00:11,519 --> 00:00:13,519
work with shuri han

7
00:00:13,519 --> 00:00:17,040
tibo yaga ike

8
00:00:21,680 --> 00:00:24,080
i will start with a general overview of

9
00:00:24,080 --> 00:00:27,599
authenticated key exchange short ake

10
00:00:27,599 --> 00:00:30,720
we consider two users alice and bob

11
00:00:30,720 --> 00:00:32,719
they interact with each other and

12
00:00:32,719 --> 00:00:34,719
exchange some messages

13
00:00:34,719 --> 00:00:37,120
and in the end they will both compute a

14
00:00:37,120 --> 00:00:38,800
shared session key

15
00:00:38,800 --> 00:00:41,280
this session key can then be used to

16
00:00:41,280 --> 00:00:43,600
encrypt further traffic

17
00:00:43,600 --> 00:00:45,760
correctness of the protocol tells us

18
00:00:45,760 --> 00:00:47,920
that those keys are the same

19
00:00:47,920 --> 00:00:50,079
as long as both users receive the

20
00:00:50,079 --> 00:00:53,680
messages that the other user has set

21
00:00:53,680 --> 00:00:56,239
but of course when looking at security

22
00:00:56,239 --> 00:00:59,520
of an ake protocol we also consider an

23
00:00:59,520 --> 00:01:01,120
adversary eve

24
00:01:01,120 --> 00:01:03,440
and we put eve in between the

25
00:01:03,440 --> 00:01:06,880
interaction that means if controls the

26
00:01:06,880 --> 00:01:08,240
message flow

27
00:01:08,240 --> 00:01:12,240
she can drop modify or inject messages

28
00:01:12,240 --> 00:01:14,720
we also give her access to some secret

29
00:01:14,720 --> 00:01:17,439
information for example she can corrupt

30
00:01:17,439 --> 00:01:19,840
the long-term keys of users

31
00:01:19,840 --> 00:01:22,560
and reveal secret state information or

32
00:01:22,560 --> 00:01:24,560
session keys

33
00:01:24,560 --> 00:01:27,439
we define two security goals the first

34
00:01:27,439 --> 00:01:30,079
one is authentication

35
00:01:30,079 --> 00:01:32,240
that means that the adversary cannot

36
00:01:32,240 --> 00:01:35,040
impersonate a user without corrupting it

37
00:01:35,040 --> 00:01:37,840
before that is without the knowledge of

38
00:01:37,840 --> 00:01:40,560
its long-term secret key

39
00:01:40,560 --> 00:01:42,640
and the second goal is key

40
00:01:42,640 --> 00:01:44,560
indistinguishability

41
00:01:44,560 --> 00:01:46,720
which is modeled with a so-called test

42
00:01:46,720 --> 00:01:48,159
oracle

43
00:01:48,159 --> 00:01:51,280
and when eve tests a particular session

44
00:01:51,280 --> 00:01:53,680
she gets a challenge key and has to

45
00:01:53,680 --> 00:01:56,159
distinguish whether this is the real

46
00:01:56,159 --> 00:02:01,040
session key or a uniformly random key

47
00:02:01,040 --> 00:02:03,280
which brings me to some definitions

48
00:02:03,280 --> 00:02:05,920
about groovable security

49
00:02:05,920 --> 00:02:08,639
as usually done in cryptography

50
00:02:08,639 --> 00:02:11,520
the security experiment i just explained

51
00:02:11,520 --> 00:02:12,879
informally

52
00:02:12,879 --> 00:02:15,040
is defined as a gain between a

53
00:02:15,040 --> 00:02:17,840
challenger and an adversary

54
00:02:17,840 --> 00:02:20,800
and we prove security by contradiction

55
00:02:20,800 --> 00:02:23,760
using a security reduction

56
00:02:23,760 --> 00:02:26,000
that is we assume there exists an

57
00:02:26,000 --> 00:02:28,640
adversary a against our cryptographic

58
00:02:28,640 --> 00:02:29,599
scheme

59
00:02:29,599 --> 00:02:32,560
in this case the ake protocol

60
00:02:32,560 --> 00:02:36,080
and we use a to build an adversary b

61
00:02:36,080 --> 00:02:39,599
against a computationally hard problem

62
00:02:39,599 --> 00:02:42,239
however we believe that this problem is

63
00:02:42,239 --> 00:02:45,200
hard to solve so such an adversary a

64
00:02:45,200 --> 00:02:48,160
against our scheme cannot exist and our

65
00:02:48,160 --> 00:02:50,560
scheme is secure

66
00:02:50,560 --> 00:02:52,080
in our work

67
00:02:52,080 --> 00:02:54,640
we mainly focused on tightness so let's

68
00:02:54,640 --> 00:02:56,640
define this

69
00:02:56,640 --> 00:02:59,840
we call the security reduction type if a

70
00:02:59,840 --> 00:03:02,560
and b have about the same advantage and

71
00:03:02,560 --> 00:03:05,680
running time and what i mean with about

72
00:03:05,680 --> 00:03:08,080
the same is that they only differ in a

73
00:03:08,080 --> 00:03:09,599
constant factor

74
00:03:09,599 --> 00:03:12,800
in particular for ake they do not depend

75
00:03:12,800 --> 00:03:14,720
on the number of users

76
00:03:14,720 --> 00:03:16,840
or the number of

77
00:03:16,840 --> 00:03:20,480
sessions and why this is interesting is

78
00:03:20,480 --> 00:03:22,560
because it tells us how to choose the

79
00:03:22,560 --> 00:03:24,560
system parameters

80
00:03:24,560 --> 00:03:27,519
in fact only a tight proof allows us to

81
00:03:27,519 --> 00:03:29,360
implement the protocol

82
00:03:29,360 --> 00:03:31,440
theoretically sound

83
00:03:31,440 --> 00:03:33,840
and given a not tight proof want to

84
00:03:33,840 --> 00:03:35,680
think about increasing the system

85
00:03:35,680 --> 00:03:37,040
parameters

86
00:03:37,040 --> 00:03:39,280
for example the size of elliptic curve

87
00:03:39,280 --> 00:03:41,200
groups

88
00:03:41,200 --> 00:03:44,159
and let me now explain why many ake

89
00:03:44,159 --> 00:03:47,040
proofs are not tight

90
00:03:47,040 --> 00:03:49,680
the first point i want to address here

91
00:03:49,680 --> 00:03:52,560
is the so-called commitment problem

92
00:03:52,560 --> 00:03:55,200
i already gave you an idea about the

93
00:03:55,200 --> 00:03:57,760
security model but actually we are not

94
00:03:57,760 --> 00:03:59,360
looking only at

95
00:03:59,360 --> 00:04:02,560
two users exchanging one session key

96
00:04:02,560 --> 00:04:05,040
but we are looking at many users and

97
00:04:05,040 --> 00:04:07,360
each of them may be involved in many

98
00:04:07,360 --> 00:04:08,799
sessions

99
00:04:08,799 --> 00:04:11,599
and for all sessions the adversary can

100
00:04:11,599 --> 00:04:13,760
decide whether it wants to reveal the

101
00:04:13,760 --> 00:04:15,120
session key

102
00:04:15,120 --> 00:04:18,959
or whether it wants to test the session

103
00:04:18,959 --> 00:04:21,519
so our security reduction needs to be

104
00:04:21,519 --> 00:04:24,320
able to answer both those queries

105
00:04:24,320 --> 00:04:27,440
and one way to achieve this is to first

106
00:04:27,440 --> 00:04:29,680
guess the test session

107
00:04:29,680 --> 00:04:31,759
but this directly comes with a huge

108
00:04:31,759 --> 00:04:33,680
security loss

109
00:04:33,680 --> 00:04:35,759
and if we now consider many test

110
00:04:35,759 --> 00:04:37,040
sessions

111
00:04:37,040 --> 00:04:39,199
this becomes even more tricky

112
00:04:39,199 --> 00:04:41,199
so we have to avoid this guessing

113
00:04:41,199 --> 00:04:43,600
strategy

114
00:04:43,600 --> 00:04:46,320
another point is answering corruption's

115
00:04:46,320 --> 00:04:47,680
queries

116
00:04:47,680 --> 00:04:50,240
i already mentioned this the adversary

117
00:04:50,240 --> 00:04:53,280
can decide to corrupt users

118
00:04:53,280 --> 00:04:55,919
which means it reveals the long-term key

119
00:04:55,919 --> 00:04:57,919
of those users

120
00:04:57,919 --> 00:05:00,560
and in many protocols these long-term

121
00:05:00,560 --> 00:05:02,639
keys are signed in keys

122
00:05:02,639 --> 00:05:04,800
since we use signatures to achieve

123
00:05:04,800 --> 00:05:07,759
authentication during the protocol

124
00:05:07,759 --> 00:05:10,000
and when considering tightness here we

125
00:05:10,000 --> 00:05:12,479
run into another paradox

126
00:05:12,479 --> 00:05:16,160
the reduction must be able to output

127
00:05:16,160 --> 00:05:18,880
signing key for all users

128
00:05:18,880 --> 00:05:20,960
but the knowledge of the signing key

129
00:05:20,960 --> 00:05:22,880
should allow the reduction to compute

130
00:05:22,880 --> 00:05:25,039
the signatures itself

131
00:05:25,039 --> 00:05:27,919
so in this case we must argue how we can

132
00:05:27,919 --> 00:05:30,320
still extract a solution

133
00:05:30,320 --> 00:05:32,960
to a hard problem from a signature that

134
00:05:32,960 --> 00:05:36,880
was forged by the adversary

135
00:05:37,039 --> 00:05:39,600
and before now coming to the details of

136
00:05:39,600 --> 00:05:41,440
our results and how we

137
00:05:41,440 --> 00:05:43,120
solve these problems

138
00:05:43,120 --> 00:05:45,120
i want to give a short comparison to

139
00:05:45,120 --> 00:05:47,039
previous work

140
00:05:47,039 --> 00:05:50,000
the first tightly secure ake

141
00:05:50,000 --> 00:05:55,120
was proposed by bada at al at tcc 2015.

142
00:05:55,120 --> 00:05:57,840
they also focused on the standard model

143
00:05:57,840 --> 00:06:00,240
thus it's not surprising that their

144
00:06:00,240 --> 00:06:02,560
scheme was not really efficient

145
00:06:02,560 --> 00:06:04,160
mainly because of their tree-based

146
00:06:04,160 --> 00:06:07,039
signature scheme they also proposed

147
00:06:07,039 --> 00:06:09,600
another very efficient signature scheme

148
00:06:09,600 --> 00:06:11,199
but it turned out

149
00:06:11,199 --> 00:06:13,120
that the proof is flawed and the

150
00:06:13,120 --> 00:06:15,600
signatures do not have the properties we

151
00:06:15,600 --> 00:06:17,440
need

152
00:06:17,440 --> 00:06:19,120
i will come back to

153
00:06:19,120 --> 00:06:20,880
some more details later in this talk

154
00:06:20,880 --> 00:06:24,400
when presenting our new scheme

155
00:06:24,400 --> 00:06:26,800
what you see here in the last column is

156
00:06:26,800 --> 00:06:29,680
the ability to reveal the ephemeral

157
00:06:29,680 --> 00:06:32,000
state of a session

158
00:06:32,000 --> 00:06:35,280
the state is too defined to contain all

159
00:06:35,280 --> 00:06:38,160
secret information that has to be stored

160
00:06:38,160 --> 00:06:40,560
by your user between different grounds

161
00:06:40,560 --> 00:06:42,560
of a protocol

162
00:06:42,560 --> 00:06:44,880
and most previous work including the one

163
00:06:44,880 --> 00:06:47,199
by bada and i did not consider such a

164
00:06:47,199 --> 00:06:48,479
strong model

165
00:06:48,479 --> 00:06:50,720
as it comes along with some more

166
00:06:50,720 --> 00:06:53,360
difficulties which i will also

167
00:06:53,360 --> 00:06:56,000
explain later

168
00:06:56,000 --> 00:06:59,520
at crypto 2018 gerstein and jager

169
00:06:59,520 --> 00:07:01,840
proposed a quite efficient variant of

170
00:07:01,840 --> 00:07:04,160
the scientific helmet protocol

171
00:07:04,160 --> 00:07:07,280
including a new signature scheme

172
00:07:07,280 --> 00:07:10,400
the security of both the ake protocol

173
00:07:10,400 --> 00:07:12,319
and the signature scheme

174
00:07:12,319 --> 00:07:15,039
were proven in the random oracle model

175
00:07:15,039 --> 00:07:18,000
which allows them to get a tile proof

176
00:07:18,000 --> 00:07:20,479
in this work they also do not consider

177
00:07:20,479 --> 00:07:22,560
state reveals

178
00:07:22,560 --> 00:07:26,160
and one year later at crypto con garden

179
00:07:26,160 --> 00:07:28,240
at r provide very practical and

180
00:07:28,240 --> 00:07:30,160
efficient diffie-hellman protocols

181
00:07:30,160 --> 00:07:31,919
without signatures

182
00:07:31,919 --> 00:07:35,039
also in the random oracle model

183
00:07:35,039 --> 00:07:37,520
their proof blues is a factor that is

184
00:07:37,520 --> 00:07:40,319
linear in the number of users and this

185
00:07:40,319 --> 00:07:41,919
does not tight

186
00:07:41,919 --> 00:07:44,000
but they also show that this loss is

187
00:07:44,000 --> 00:07:46,000
inherent to many protocols using

188
00:07:46,000 --> 00:07:47,840
implicit authentication without

189
00:07:47,840 --> 00:07:50,479
signatures

190
00:07:50,720 --> 00:07:53,919
the next work of liu and i presented at

191
00:07:53,919 --> 00:07:56,639
asia crypt 2020

192
00:07:56,639 --> 00:07:58,720
also focused on tight ake in the

193
00:07:58,720 --> 00:08:00,319
standard model

194
00:08:00,319 --> 00:08:03,120
the protocol itself is quite efficient

195
00:08:03,120 --> 00:08:05,199
but only assuming the efficient

196
00:08:05,199 --> 00:08:07,599
signature scheme are that i

197
00:08:07,599 --> 00:08:10,319
that's why i put the the x in brackets

198
00:08:10,319 --> 00:08:12,560
here because the only known signature

199
00:08:12,560 --> 00:08:14,960
scheme at this point

200
00:08:14,960 --> 00:08:17,360
is the tree-based construction

201
00:08:17,360 --> 00:08:19,440
by the attire

202
00:08:19,440 --> 00:08:22,000
and our work now also revisits their

203
00:08:22,000 --> 00:08:24,800
construction by giving a new proof and a

204
00:08:24,800 --> 00:08:27,759
signature scheme

205
00:08:27,759 --> 00:08:30,160
in between there was another work by

206
00:08:30,160 --> 00:08:32,880
yaga at al including myself at eurogroup

207
00:08:32,880 --> 00:08:34,799
this year

208
00:08:34,799 --> 00:08:36,559
this was the first work to consider

209
00:08:36,559 --> 00:08:40,000
tight ate with ephemeral state reveals

210
00:08:40,000 --> 00:08:41,679
but the techniques

211
00:08:41,679 --> 00:08:44,080
inherently relied on the random oracle

212
00:08:44,080 --> 00:08:45,360
model

213
00:08:45,360 --> 00:08:46,880
which brings me

214
00:08:46,880 --> 00:08:48,240
to this work

215
00:08:48,240 --> 00:08:50,959
which combines everything together

216
00:08:50,959 --> 00:08:52,959
proven in the standard model and with

217
00:08:52,959 --> 00:08:54,800
our new signature scheme it is still

218
00:08:54,800 --> 00:08:56,399
quite efficient

219
00:08:56,399 --> 00:08:58,640
we are also the first to consider state

220
00:08:58,640 --> 00:09:01,600
reveals in the standard model and to

221
00:09:01,600 --> 00:09:03,839
achieve this i have to say that we need

222
00:09:03,839 --> 00:09:05,760
a non-tight reduction

223
00:09:05,760 --> 00:09:08,240
to the metric primitive but

224
00:09:08,240 --> 00:09:10,399
compensating this loss is still quite

225
00:09:10,399 --> 00:09:13,279
efficient as all reductions to public

226
00:09:13,279 --> 00:09:17,360
key components are still tight

227
00:09:17,360 --> 00:09:21,040
so let's dive a bit more into details

228
00:09:21,040 --> 00:09:23,600
our protocol is a generic construction

229
00:09:23,600 --> 00:09:25,920
of basic cryptographic building blocks

230
00:09:25,920 --> 00:09:28,240
and the first one is a cam

231
00:09:28,240 --> 00:09:31,040
alice the initiator of the protocol

232
00:09:31,040 --> 00:09:33,680
draws a fresh key pair and sends the

233
00:09:33,680 --> 00:09:36,720
ephemeral public key to bob

234
00:09:36,720 --> 00:09:39,120
bob runs the encaps algorithm to

235
00:09:39,120 --> 00:09:41,440
encapsulate a key which will then be the

236
00:09:41,440 --> 00:09:42,800
session key

237
00:09:42,800 --> 00:09:45,279
he sends the cipher text back to alice

238
00:09:45,279 --> 00:09:48,240
so that she can compute the same key

239
00:09:48,240 --> 00:09:50,880
and note here that in order to do so

240
00:09:50,880 --> 00:09:53,440
she needs to store the secret key until

241
00:09:53,440 --> 00:09:56,000
she receives bob's message and this is

242
00:09:56,000 --> 00:09:58,720
what we call the state

243
00:09:58,720 --> 00:10:01,600
of course this protocol does not have

244
00:10:01,600 --> 00:10:03,680
any authentication yet

245
00:10:03,680 --> 00:10:06,320
so we add a signature scheme

246
00:10:06,320 --> 00:10:09,600
alice and bob both have a secret signing

247
00:10:09,600 --> 00:10:12,959
key and a public verification key as a

248
00:10:12,959 --> 00:10:15,200
long-term key pair

249
00:10:15,200 --> 00:10:17,760
and now all messages along with the

250
00:10:17,760 --> 00:10:21,200
identities assigned

251
00:10:21,200 --> 00:10:23,839
and the session key will only be

252
00:10:23,839 --> 00:10:26,800
accepted if the signatures verify

253
00:10:26,800 --> 00:10:29,040
correctly

254
00:10:29,040 --> 00:10:30,959
this standard campus signature

255
00:10:30,959 --> 00:10:32,720
construction

256
00:10:32,720 --> 00:10:34,880
is one of the protocols we analyze in

257
00:10:34,880 --> 00:10:36,880
our work

258
00:10:36,880 --> 00:10:39,360
but we also look in at the three round

259
00:10:39,360 --> 00:10:41,040
extension of it

260
00:10:41,040 --> 00:10:44,560
in which we add an additional bounds

261
00:10:44,560 --> 00:10:47,760
so now bob first picks a random nonce

262
00:10:47,760 --> 00:10:50,480
and he initiates the protocol by sending

263
00:10:50,480 --> 00:10:52,880
this nons to alice

264
00:10:52,880 --> 00:10:55,279
we also include it

265
00:10:55,279 --> 00:10:57,920
in both signatures and i will explain

266
00:10:57,920 --> 00:11:01,200
why this is useful in a second

267
00:11:01,200 --> 00:11:02,160
so

268
00:11:02,160 --> 00:11:04,720
what we need to do now is um we need to

269
00:11:04,720 --> 00:11:07,600
find out what security we need from the

270
00:11:07,600 --> 00:11:09,360
cam

271
00:11:09,360 --> 00:11:11,760
here we differentiate between the two

272
00:11:11,760 --> 00:11:14,560
round and the three round protocol and

273
00:11:14,560 --> 00:11:16,800
as i explained in the beginning in the

274
00:11:16,800 --> 00:11:20,000
ake security experiment we have many

275
00:11:20,000 --> 00:11:23,680
sessions um between different users when

276
00:11:23,680 --> 00:11:25,920
each session there's only there's one

277
00:11:25,920 --> 00:11:28,880
new key pair so we definitely need

278
00:11:28,880 --> 00:11:32,399
multi-user security

279
00:11:32,399 --> 00:11:34,320
and looking at the two ground protocol

280
00:11:34,320 --> 00:11:37,040
now as a reminder the first message

281
00:11:37,040 --> 00:11:39,760
consists of the ephemeral public key

282
00:11:39,760 --> 00:11:41,839
and a signature on this public key and

283
00:11:41,839 --> 00:11:44,640
the identities of alice and bob

284
00:11:44,640 --> 00:11:47,680
so the first message is actually valid

285
00:11:47,680 --> 00:11:50,800
for any session between alice and bob

286
00:11:50,800 --> 00:11:53,040
and in particular the adversary can

287
00:11:53,040 --> 00:11:55,360
replay this message

288
00:11:55,360 --> 00:11:57,040
if this happens

289
00:11:57,040 --> 00:11:59,279
the security experiment has still

290
00:11:59,279 --> 00:12:01,600
control over the cipher text

291
00:12:01,600 --> 00:12:03,839
but we need security for all those

292
00:12:03,839 --> 00:12:06,800
sessions so we need multi

293
00:12:06,800 --> 00:12:10,480
many ciphertext security

294
00:12:10,480 --> 00:12:12,639
and now we can see where the nonce comes

295
00:12:12,639 --> 00:12:14,160
into effect

296
00:12:14,160 --> 00:12:16,639
in the three round protocol the nonce

297
00:12:16,639 --> 00:12:19,279
prevents these replay attacks as a

298
00:12:19,279 --> 00:12:22,160
signature is now only valid for one

299
00:12:22,160 --> 00:12:25,200
particular nonce which allows us to

300
00:12:25,200 --> 00:12:28,079
relax the security to single ciphertext

301
00:12:28,079 --> 00:12:30,399
security

302
00:12:30,399 --> 00:12:31,360
and

303
00:12:31,360 --> 00:12:33,760
now looking at the last message in both

304
00:12:33,760 --> 00:12:36,320
protocols the adversary can always

305
00:12:36,320 --> 00:12:38,560
impersonate a user

306
00:12:38,560 --> 00:12:40,800
that means after receiving

307
00:12:40,800 --> 00:12:43,120
the first message with a public key

308
00:12:43,120 --> 00:12:45,839
it can corrupt the user

309
00:12:45,839 --> 00:12:48,000
then choose its own ciphertext and

310
00:12:48,000 --> 00:12:49,839
compute a signature

311
00:12:49,839 --> 00:12:52,320
we cannot expect security for such a

312
00:12:52,320 --> 00:12:53,279
session

313
00:12:53,279 --> 00:12:55,680
but the adversary can reveal the session

314
00:12:55,680 --> 00:12:59,360
key to see if the simulation is correct

315
00:12:59,360 --> 00:13:01,440
so we need to be able to decrypt the

316
00:13:01,440 --> 00:13:04,240
cipher text and thus we need cca

317
00:13:04,240 --> 00:13:07,240
security

318
00:13:08,000 --> 00:13:10,480
switching to the signature scheme

319
00:13:10,480 --> 00:13:13,600
each user has a long-term key pair we

320
00:13:13,600 --> 00:13:16,240
have many users so again we need

321
00:13:16,240 --> 00:13:19,519
multi-user security

322
00:13:19,519 --> 00:13:22,079
users should authenticate each other

323
00:13:22,079 --> 00:13:23,680
explicitly

324
00:13:23,680 --> 00:13:25,920
which requires the standard

325
00:13:25,920 --> 00:13:29,360
existential unforgeability property

326
00:13:29,360 --> 00:13:31,839
that means that the adversary cannot

327
00:13:31,839 --> 00:13:34,639
impersonate a user and send a message or

328
00:13:34,639 --> 00:13:36,240
end the signature

329
00:13:36,240 --> 00:13:40,240
without also corrupting this user before

330
00:13:40,240 --> 00:13:42,880
which brings me to the third property

331
00:13:42,880 --> 00:13:45,440
we need to be able to answer these

332
00:13:45,440 --> 00:13:48,000
corrupt queries and provide the secret

333
00:13:48,000 --> 00:13:50,800
signing keys

334
00:13:51,199 --> 00:13:53,600
so far i didn't talk about the state

335
00:13:53,600 --> 00:13:54,720
reveals

336
00:13:54,720 --> 00:13:57,120
so let's look again at this re-round

337
00:13:57,120 --> 00:13:58,639
protocol

338
00:13:58,639 --> 00:14:00,959
as i mentioned before we define the

339
00:14:00,959 --> 00:14:03,440
state as those information that have to

340
00:14:03,440 --> 00:14:05,760
be stored between different rounds to

341
00:14:05,760 --> 00:14:07,600
compute the session key

342
00:14:07,600 --> 00:14:09,760
so here the state consists of the

343
00:14:09,760 --> 00:14:11,760
ephemeral secret key

344
00:14:11,760 --> 00:14:14,079
but imagine now we give the adversary

345
00:14:14,079 --> 00:14:16,720
the ephemeral secret key then you can

346
00:14:16,720 --> 00:14:19,120
directly compute the session key

347
00:14:19,120 --> 00:14:21,360
and this is considered a non-trivial

348
00:14:21,360 --> 00:14:22,320
attack

349
00:14:22,320 --> 00:14:24,800
as the adversary does not even interfere

350
00:14:24,800 --> 00:14:27,760
in the protocol execution

351
00:14:27,760 --> 00:14:30,160
so what we need to do is we need to

352
00:14:30,160 --> 00:14:32,240
protect the secret key

353
00:14:32,240 --> 00:14:34,880
and we do so by adding a symmetric

354
00:14:34,880 --> 00:14:37,279
encryption scheme

355
00:14:37,279 --> 00:14:39,839
now alice has an additional symmetric

356
00:14:39,839 --> 00:14:41,600
key as long term key

357
00:14:41,600 --> 00:14:44,399
and more important she does not store

358
00:14:44,399 --> 00:14:46,880
the secret key but she stores an

359
00:14:46,880 --> 00:14:48,880
encryption of it

360
00:14:48,880 --> 00:14:51,440
and after receiving bob's message she

361
00:14:51,440 --> 00:14:54,320
can simply decrypt the states and then

362
00:14:54,320 --> 00:14:59,279
use the femoral secret key as before

363
00:14:59,279 --> 00:15:00,880
now we can observe

364
00:15:00,880 --> 00:15:03,519
that the adversary must know both the

365
00:15:03,519 --> 00:15:06,959
symmetric long-term key and the state to

366
00:15:06,959 --> 00:15:09,680
obtain the female secret key

367
00:15:09,680 --> 00:15:12,399
so it must corrupt alice and reveal the

368
00:15:12,399 --> 00:15:13,440
state

369
00:15:13,440 --> 00:15:15,839
but this is now a trivial attack against

370
00:15:15,839 --> 00:15:18,160
all ake protocols

371
00:15:18,160 --> 00:15:20,639
so such a session can never be a test

372
00:15:20,639 --> 00:15:22,480
session

373
00:15:22,480 --> 00:15:25,120
but it's not as easy as it sounds in

374
00:15:25,120 --> 00:15:28,160
particular when considering tightness

375
00:15:28,160 --> 00:15:30,880
we still need to simulate all sessions

376
00:15:30,880 --> 00:15:32,240
correctly

377
00:15:32,240 --> 00:15:34,800
and here we run into another commitment

378
00:15:34,800 --> 00:15:37,040
problem we have to solve

379
00:15:37,040 --> 00:15:38,959
in some more detail

380
00:15:38,959 --> 00:15:42,320
after a state reveal the adversary can

381
00:15:42,320 --> 00:15:45,680
choose to either corrupt the user or

382
00:15:45,680 --> 00:15:47,600
test the session

383
00:15:47,600 --> 00:15:49,600
and in case of a corruption

384
00:15:49,600 --> 00:15:52,160
the state must decrypt to the correct

385
00:15:52,160 --> 00:15:55,360
value to the correct secret key

386
00:15:55,360 --> 00:15:58,000
but in case of a test query we want to

387
00:15:58,000 --> 00:16:00,079
rely on the fact that the state does not

388
00:16:00,079 --> 00:16:03,519
leak anything about the secret key

389
00:16:03,519 --> 00:16:06,000
and all these queries are of course

390
00:16:06,000 --> 00:16:08,399
adaptive so we need to know all

391
00:16:08,399 --> 00:16:10,720
ephemeral secret keys that are inside

392
00:16:10,720 --> 00:16:13,279
the state

393
00:16:14,560 --> 00:16:17,519
what we then did was

394
00:16:17,519 --> 00:16:19,920
we extracted the exact security

395
00:16:19,920 --> 00:16:22,560
properties we need from the cam

396
00:16:22,560 --> 00:16:24,480
and this is where previous work relied

397
00:16:24,480 --> 00:16:26,880
on the random oracle model

398
00:16:26,880 --> 00:16:29,120
and in this case here it was already

399
00:16:29,120 --> 00:16:31,920
useful that we could relax the security

400
00:16:31,920 --> 00:16:34,880
to sing in cipher text due to the nonce

401
00:16:34,880 --> 00:16:37,759
and we use this at the basis to come up

402
00:16:37,759 --> 00:16:40,240
with a new definition

403
00:16:40,240 --> 00:16:43,360
our camp needs an additional algorithm

404
00:16:43,360 --> 00:16:46,399
endcap star which takes the secret key

405
00:16:46,399 --> 00:16:48,880
instead of a public key to compute a

406
00:16:48,880 --> 00:16:51,360
ciphertext and a key

407
00:16:51,360 --> 00:16:54,079
as a first property we want that this

408
00:16:54,079 --> 00:16:56,680
new algorithm encup star is

409
00:16:56,680 --> 00:16:59,360
computationally indistinguishable from

410
00:16:59,360 --> 00:17:02,880
the original end caps algorithm

411
00:17:02,880 --> 00:17:05,839
this must hold for many keepers even

412
00:17:05,839 --> 00:17:08,640
given the secret keys

413
00:17:08,640 --> 00:17:12,480
and as a second property we need that

414
00:17:12,480 --> 00:17:14,400
given a public key

415
00:17:14,400 --> 00:17:17,199
the decapsulated key of an adversarially

416
00:17:17,199 --> 00:17:19,199
chosen ciphertext

417
00:17:19,199 --> 00:17:22,240
the ciphertext output by endcapstar

418
00:17:22,240 --> 00:17:25,039
and the key output by encapstar is

419
00:17:25,039 --> 00:17:27,599
statistically indistinguishable

420
00:17:27,599 --> 00:17:31,039
from a uniformly random key

421
00:17:31,039 --> 00:17:32,640
now the question is

422
00:17:32,640 --> 00:17:35,360
how can we construct such a camp

423
00:17:35,360 --> 00:17:38,000
and we show how to do that generically

424
00:17:38,000 --> 00:17:41,039
from a universal to hash proof system

425
00:17:41,039 --> 00:17:43,760
and in particular we can instantiate it

426
00:17:43,760 --> 00:17:45,520
under the matrix distribution or

427
00:17:45,520 --> 00:17:48,480
defeatherman assumption

428
00:17:48,480 --> 00:17:50,400
and now for the symmetric encryption

429
00:17:50,400 --> 00:17:52,960
scheme it turns out that we only require

430
00:17:52,960 --> 00:17:58,000
the standard single key cpa security

431
00:17:59,280 --> 00:18:01,360
this is now all i want to say about the

432
00:18:01,360 --> 00:18:02,960
ake protocol

433
00:18:02,960 --> 00:18:04,799
and i will continue with our second

434
00:18:04,799 --> 00:18:07,440
contribution which is a tightly secure

435
00:18:07,440 --> 00:18:10,320
signature scheme

436
00:18:10,320 --> 00:18:12,880
as a reminder what we need is

437
00:18:12,880 --> 00:18:15,520
multi-user existential unfoldability

438
00:18:15,520 --> 00:18:18,320
with corruptions and all previous

439
00:18:18,320 --> 00:18:20,400
schemes were either proven in the random

440
00:18:20,400 --> 00:18:22,000
oracle model

441
00:18:22,000 --> 00:18:24,240
or they use quite inefficient tree-based

442
00:18:24,240 --> 00:18:26,640
constructions

443
00:18:26,640 --> 00:18:28,880
bada and i proposed a very efficient

444
00:18:28,880 --> 00:18:30,559
scheme but we found a flaw in their

445
00:18:30,559 --> 00:18:31,760
proof

446
00:18:31,760 --> 00:18:33,840
actually the scheme is secure in the

447
00:18:33,840 --> 00:18:35,919
multi-user setting but it doesn't

448
00:18:35,919 --> 00:18:38,240
support corruptions

449
00:18:38,240 --> 00:18:39,679
but let's look

450
00:18:39,679 --> 00:18:42,080
at the idea behind the scheme and also

451
00:18:42,080 --> 00:18:44,080
our new scheme

452
00:18:44,080 --> 00:18:46,799
it follows the generic transformation

453
00:18:46,799 --> 00:18:48,880
from a tightly secure mac

454
00:18:48,880 --> 00:18:51,919
to a tightly secured signature scheme

455
00:18:51,919 --> 00:18:54,160
and this was first shown for the single

456
00:18:54,160 --> 00:18:57,360
user setting by blasi kilz and pan at

457
00:18:57,360 --> 00:18:59,919
crypto 2014.

458
00:18:59,919 --> 00:19:02,000
then badad extended this to the

459
00:19:02,000 --> 00:19:03,760
multi-user setting

460
00:19:03,760 --> 00:19:06,960
and we fix the scheme and show how to

461
00:19:06,960 --> 00:19:09,760
additionally achieve security against

462
00:19:09,760 --> 00:19:11,679
corruptions

463
00:19:11,679 --> 00:19:14,720
the problem essentially was that the mac

464
00:19:14,720 --> 00:19:15,760
tech

465
00:19:15,760 --> 00:19:17,840
was uniquely defined

466
00:19:17,840 --> 00:19:19,440
and to fix this

467
00:19:19,440 --> 00:19:21,760
we extend techniques that were already

468
00:19:21,760 --> 00:19:24,799
used by langrea and pan to construct

469
00:19:24,799 --> 00:19:28,080
tightly secure hibe

470
00:19:28,080 --> 00:19:30,320
and our resulting scheme

471
00:19:30,320 --> 00:19:32,160
is still quite efficient with

472
00:19:32,160 --> 00:19:34,080
verification keys

473
00:19:34,080 --> 00:19:36,720
consisting of one group element

474
00:19:36,720 --> 00:19:39,520
and signatures consisting of five five

475
00:19:39,520 --> 00:19:42,080
group elements when instantiated under

476
00:19:42,080 --> 00:19:44,400
the sxdh assumption

477
00:19:44,400 --> 00:19:48,160
in asymmetric pairing groups

478
00:19:48,640 --> 00:19:51,120
so let's conclude the talk and sum up

479
00:19:51,120 --> 00:19:53,679
our contributions

480
00:19:53,679 --> 00:19:56,160
we give a new efficient

481
00:19:56,160 --> 00:19:58,640
and tight ake protocol in the standard

482
00:19:58,640 --> 00:20:00,080
model

483
00:20:00,080 --> 00:20:03,520
we achieve security and a stronger model

484
00:20:03,520 --> 00:20:05,679
than previous work additionally

485
00:20:05,679 --> 00:20:08,720
considering state reveals when we allow

486
00:20:08,720 --> 00:20:10,960
a non-tight reduction to the symmetric

487
00:20:10,960 --> 00:20:13,120
encryption scheme

488
00:20:13,120 --> 00:20:15,520
and an essential building block for our

489
00:20:15,520 --> 00:20:18,000
protocol is a tightly secure signature

490
00:20:18,000 --> 00:20:20,880
scheme that also supports corruptions

491
00:20:20,880 --> 00:20:22,720
and we give the first practical

492
00:20:22,720 --> 00:20:24,880
construction

493
00:20:24,880 --> 00:20:27,600
for more details check out our our paper

494
00:20:27,600 --> 00:20:29,200
on eprint

495
00:20:29,200 --> 00:20:30,400
that's it

496
00:20:30,400 --> 00:20:34,600
and thank you for listening

