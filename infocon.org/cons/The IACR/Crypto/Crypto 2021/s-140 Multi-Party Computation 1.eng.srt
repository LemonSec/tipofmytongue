1
00:00:07,600 --> 00:00:10,639
you're welcome to start anytime

2
00:00:10,639 --> 00:00:12,240
thanks a lot

3
00:00:12,240 --> 00:00:14,639
hello can you hear me

4
00:00:14,639 --> 00:00:18,080
yes wait a second healing

5
00:00:18,080 --> 00:00:20,240
okay let's start so hello everyone uh

6
00:00:20,240 --> 00:00:21,680
welcome to the first modified

7
00:00:21,680 --> 00:00:23,359
computation session

8
00:00:23,359 --> 00:00:25,119
uh the format is the following we're

9
00:00:25,119 --> 00:00:26,800
going to have five minute talks from

10
00:00:26,800 --> 00:00:28,720
every speaker and the questions are at

11
00:00:28,720 --> 00:00:31,039
the end of the session uh so you can

12
00:00:31,039 --> 00:00:33,360
post the questions on zulip or on the

13
00:00:33,360 --> 00:00:36,160
zoom chat if you don't have access to

14
00:00:36,160 --> 00:00:38,480
zulip and you can also

15
00:00:38,480 --> 00:00:40,879
post the questions during the talks okay

16
00:00:40,879 --> 00:00:42,480
but we will answer all of them at the

17
00:00:42,480 --> 00:00:43,360
end

18
00:00:43,360 --> 00:00:45,440
so first we have a name she's going to

19
00:00:45,440 --> 00:00:47,440
talk about in theoretic furnace meets

20
00:00:47,440 --> 00:00:50,160
multi-party protocols the case of leader

21
00:00:50,160 --> 00:00:53,600
elections which is a joint work with

22
00:00:53,600 --> 00:00:54,879
um

23
00:00:54,879 --> 00:00:58,079
time in june cuber chain and team one

24
00:00:58,079 --> 00:01:00,079
and then you can start

25
00:01:00,079 --> 00:01:02,399
thanks antigone i'll talk about our

26
00:01:02,399 --> 00:01:04,799
paper and game theory meets multi-party

27
00:01:04,799 --> 00:01:08,400
protocols inspired by blockchains

28
00:01:08,400 --> 00:01:11,119
so imagine you write a paper you send it

29
00:01:11,119 --> 00:01:12,640
to a conference and there's another

30
00:01:12,640 --> 00:01:13,600
paper

31
00:01:13,600 --> 00:01:15,840
with an identical result in this case

32
00:01:15,840 --> 00:01:17,759
even identical title

33
00:01:17,759 --> 00:01:20,000
so the wise pc recommended to merge the

34
00:01:20,000 --> 00:01:22,400
two papers and now the most difficult

35
00:01:22,400 --> 00:01:23,680
challenge is who should go to the

36
00:01:23,680 --> 00:01:26,640
conference to present the paper um

37
00:01:26,640 --> 00:01:28,560
so that's a problem we know how to solve

38
00:01:28,560 --> 00:01:30,479
and for instance we can run the coin

39
00:01:30,479 --> 00:01:33,439
task protocol in this case um you know

40
00:01:33,439 --> 00:01:35,360
i'm running this protocol with shafi

41
00:01:35,360 --> 00:01:37,439
who's go out there on the other paper we

42
00:01:37,439 --> 00:01:40,720
both encrypt a random bit we post the

43
00:01:40,720 --> 00:01:42,159
commitment to

44
00:01:42,159 --> 00:01:43,600
a blockchain i mean in this case the

45
00:01:43,600 --> 00:01:44,880
blockchain is serving as a public

46
00:01:44,880 --> 00:01:46,799
bulletin board

47
00:01:46,799 --> 00:01:49,439
then we both open our commitments

48
00:01:49,439 --> 00:01:52,399
and and we xr the outcome

49
00:01:52,399 --> 00:01:55,280
so shafi prefers zero i prefer one so in

50
00:01:55,280 --> 00:01:58,159
this case i win

51
00:01:58,560 --> 00:02:00,399
so it works very nicely

52
00:02:00,399 --> 00:02:02,560
and i may be concerned that shafi

53
00:02:02,560 --> 00:02:04,640
um you know may be malicious and she

54
00:02:04,640 --> 00:02:06,640
might apart from the protocol because

55
00:02:06,640 --> 00:02:08,080
this is a commitment protocol any

56
00:02:08,080 --> 00:02:11,200
misbehavior is the same as a parting

57
00:02:11,200 --> 00:02:12,959
but it's not a problem here because if

58
00:02:12,959 --> 00:02:16,400
shafi abarts we can just declare

59
00:02:16,400 --> 00:02:19,520
you know myself to be the winner

60
00:02:19,520 --> 00:02:21,120
okay

61
00:02:21,120 --> 00:02:23,200
so that's great um

62
00:02:23,200 --> 00:02:26,080
and this is kind of protocol and it has

63
00:02:26,080 --> 00:02:27,440
been studied for a long time in the

64
00:02:27,440 --> 00:02:30,400
multi-party computation literature

65
00:02:30,400 --> 00:02:31,760
we know that

66
00:02:31,760 --> 00:02:34,160
in in mpc literature we typically

67
00:02:34,160 --> 00:02:36,400
consider a strong notion of fairness

68
00:02:36,400 --> 00:02:38,239
which requires that

69
00:02:38,239 --> 00:02:40,640
the corrupt or strategic player cannot

70
00:02:40,640 --> 00:02:44,160
bias the coin at all for the honest

71
00:02:44,160 --> 00:02:45,760
honest player

72
00:02:45,760 --> 00:02:47,280
unfortunately we know that there's

73
00:02:47,280 --> 00:02:49,440
strong impossibility results

74
00:02:49,440 --> 00:02:51,519
whenever you know this is played among

75
00:02:51,519 --> 00:02:54,160
two parties or whenever and we have n

76
00:02:54,160 --> 00:02:57,519
parties but half of them may be corrupt

77
00:02:57,519 --> 00:02:59,440
but this didn't stop you know bloom's

78
00:02:59,440 --> 00:03:00,560
protocol

79
00:03:00,560 --> 00:03:02,560
and you may ask why and if you think

80
00:03:02,560 --> 00:03:05,120
about it more carefully in fact blumps

81
00:03:05,120 --> 00:03:07,360
protocol actually achieves a strictly

82
00:03:07,360 --> 00:03:10,080
weaker notion of fairness and

83
00:03:10,080 --> 00:03:12,560
essentially game theoretic fairness

84
00:03:12,560 --> 00:03:14,319
so in the protocol we have seen it's not

85
00:03:14,319 --> 00:03:16,560
like shaky cannot bias the outcome she

86
00:03:16,560 --> 00:03:19,360
can indeed bias the outcome but it will

87
00:03:19,360 --> 00:03:20,400
only

88
00:03:20,400 --> 00:03:24,480
hurt herself and benefit me

89
00:03:24,640 --> 00:03:26,480
okay so since blum's protocol achieves

90
00:03:26,480 --> 00:03:28,400
game theoretic fairness in a two-party

91
00:03:28,400 --> 00:03:30,720
setting it's very natural to ask can we

92
00:03:30,720 --> 00:03:32,959
achieve game theoretic fairness in

93
00:03:32,959 --> 00:03:35,760
multi-party coin tasks

94
00:03:35,760 --> 00:03:37,760
so when we first started working on this

95
00:03:37,760 --> 00:03:40,400
problem in 2018 we were surprised to

96
00:03:40,400 --> 00:03:41,440
find that

97
00:03:41,440 --> 00:03:43,519
this has not been considered

98
00:03:43,519 --> 00:03:44,480
okay

99
00:03:44,480 --> 00:03:46,480
uh more precisely we are actually asking

100
00:03:46,480 --> 00:03:48,480
assuming you know potentially there can

101
00:03:48,480 --> 00:03:51,440
be a majority coalition and no setup can

102
00:03:51,440 --> 00:03:52,640
we achieve this because if there's

103
00:03:52,640 --> 00:03:54,799
honest majority and trust is set up the

104
00:03:54,799 --> 00:03:58,159
problem may be trivialized

105
00:03:58,159 --> 00:03:59,920
okay so if we establi established

106
00:03:59,920 --> 00:04:01,920
feasibility we can also ask you know the

107
00:04:01,920 --> 00:04:05,439
complexity of such protocols

108
00:04:05,439 --> 00:04:07,360
uh it turns out there are actually two

109
00:04:07,360 --> 00:04:09,760
very natural formulations for n-party

110
00:04:09,760 --> 00:04:12,080
coin toss within theoretic fairness and

111
00:04:12,080 --> 00:04:13,840
the first formulation is like binary

112
00:04:13,840 --> 00:04:15,599
roulette let's say every player bets on

113
00:04:15,599 --> 00:04:17,918
either zero or one and if your bet

114
00:04:17,918 --> 00:04:20,798
agrees with the outcome you win and

115
00:04:20,798 --> 00:04:23,280
let's say the setup winners will divide

116
00:04:23,280 --> 00:04:25,040
the part of bets

117
00:04:25,040 --> 00:04:26,720
in the second formulation it's more like

118
00:04:26,720 --> 00:04:28,400
lottery or leader election and this is

119
00:04:28,400 --> 00:04:30,560
what i want to talk about here right so

120
00:04:30,560 --> 00:04:32,880
basically m players they want to elect a

121
00:04:32,880 --> 00:04:35,040
single random winner and the winner will

122
00:04:35,040 --> 00:04:37,600
take the entire pot

123
00:04:37,600 --> 00:04:38,479
um

124
00:04:38,479 --> 00:04:40,240
so for for the first formulation we have

125
00:04:40,240 --> 00:04:42,400
a couple other papers that establishes

126
00:04:42,400 --> 00:04:43,680
like a complete

127
00:04:43,680 --> 00:04:45,520
uh characterization of the feasibility

128
00:04:45,520 --> 00:04:47,040
and invisibility and under what

129
00:04:47,040 --> 00:04:49,280
parameters is it feasible

130
00:04:49,280 --> 00:04:50,720
and then in this paper we mostly

131
00:04:50,720 --> 00:04:52,479
consider the second formulation which is

132
00:04:52,479 --> 00:04:54,080
like leader election

133
00:04:54,080 --> 00:04:56,479
um just to clarify when i said you know

134
00:04:56,479 --> 00:04:58,800
the winner will take the entire part uh

135
00:04:58,800 --> 00:05:01,840
we can just equivalently rescale the

136
00:05:01,840 --> 00:05:03,759
utility and just assume the winner has

137
00:05:03,759 --> 00:05:05,840
utility one and everyone else has

138
00:05:05,840 --> 00:05:07,919
utility zero so these players are

139
00:05:07,919 --> 00:05:09,360
rational and they want to kind of you

140
00:05:09,360 --> 00:05:13,039
know optimize their utility

141
00:05:13,039 --> 00:05:14,400
so leader election has a lot of

142
00:05:14,400 --> 00:05:16,320
applications in blockchain and smart

143
00:05:16,320 --> 00:05:19,520
contracts i won't go into details

144
00:05:19,520 --> 00:05:20,400
and

145
00:05:20,400 --> 00:05:22,240
so first let me show you a kind of like

146
00:05:22,240 --> 00:05:24,639
a folklore protocol which takes log n

147
00:05:24,639 --> 00:05:26,479
rounds the idea is we can pair these

148
00:05:26,479 --> 00:05:29,360
players up and each pair will run blum's

149
00:05:29,360 --> 00:05:31,440
coin toss protocol to elect the winner

150
00:05:31,440 --> 00:05:33,600
and then the winners are paired up again

151
00:05:33,600 --> 00:05:35,520
and they discontinues in the tree-like

152
00:05:35,520 --> 00:05:37,360
fashion until like a winner is elected

153
00:05:37,360 --> 00:05:38,400
at the end

154
00:05:38,400 --> 00:05:40,240
in the general case it takes log n

155
00:05:40,240 --> 00:05:42,479
rounds and this tournament tree protocol

156
00:05:42,479 --> 00:05:44,880
has very nice properties um

157
00:05:44,880 --> 00:05:47,680
so first you can show that no coalition

158
00:05:47,680 --> 00:05:49,360
also by the way it's important to note

159
00:05:49,360 --> 00:05:51,840
that at any point of time if any player

160
00:05:51,840 --> 00:05:54,479
you know aborts or misbehaves and

161
00:05:54,479 --> 00:05:55,840
they're kicked out

162
00:05:55,840 --> 00:05:57,440
right so essentially

163
00:05:57,440 --> 00:06:00,160
because of this no coalition can benefit

164
00:06:00,160 --> 00:06:01,440
itself because you know the only

165
00:06:01,440 --> 00:06:03,440
possible misbehavior is equivalent to a

166
00:06:03,440 --> 00:06:05,280
bargain but that's going to only hurt

167
00:06:05,280 --> 00:06:07,120
yourself um

168
00:06:07,120 --> 00:06:08,880
and secondly we can also show no

169
00:06:08,880 --> 00:06:11,440
coalition can actually harm any honest

170
00:06:11,440 --> 00:06:13,120
individual either

171
00:06:13,120 --> 00:06:15,360
so with these you know properties it's

172
00:06:15,360 --> 00:06:17,039
very nice because essentially no matter

173
00:06:17,039 --> 00:06:18,560
what your goal is

174
00:06:18,560 --> 00:06:21,199
whether you are you know strategic

175
00:06:21,199 --> 00:06:22,720
strategically trying to maximize your

176
00:06:22,720 --> 00:06:25,199
utility or try to hurt others it doesn't

177
00:06:25,199 --> 00:06:26,319
matter

178
00:06:26,319 --> 00:06:28,160
honest behavior is an equilibrium like

179
00:06:28,160 --> 00:06:30,960
it's your best response

180
00:06:30,960 --> 00:06:31,919
okay

181
00:06:31,919 --> 00:06:33,039
um

182
00:06:33,039 --> 00:06:34,880
so we want to ask you know given this

183
00:06:34,880 --> 00:06:37,360
folklore protocol can we basically

184
00:06:37,360 --> 00:06:39,919
um achieve something similar but in

185
00:06:39,919 --> 00:06:43,280
little or login rounds

186
00:06:43,759 --> 00:06:45,759
okay so let me tell you our result i

187
00:06:45,759 --> 00:06:47,520
won't have time to go into the actual

188
00:06:47,520 --> 00:06:50,160
proofs and constructions and so on one

189
00:06:50,160 --> 00:06:51,919
hand we prove a lot of bonds and the

190
00:06:51,919 --> 00:06:54,240
lower bond says if we insist

191
00:06:54,240 --> 00:06:56,560
uh on protocols that have very similar

192
00:06:56,560 --> 00:06:58,160
in structure to the tournament tree

193
00:06:58,160 --> 00:07:00,400
protocol then it's hopeless like login

194
00:07:00,400 --> 00:07:02,319
around is the best you can do and what

195
00:07:02,319 --> 00:07:04,160
do i mean by similar instruction to the

196
00:07:04,160 --> 00:07:05,919
tournament tree protocol so in the

197
00:07:05,919 --> 00:07:07,520
tournament tree protocol you know it

198
00:07:07,520 --> 00:07:08,880
works like

199
00:07:08,880 --> 00:07:10,639
everyone commits

200
00:07:10,639 --> 00:07:12,479
to something and they immediately reveal

201
00:07:12,479 --> 00:07:14,800
it in the next round right so this is

202
00:07:14,800 --> 00:07:17,440
called the commit immediate reveal model

203
00:07:17,440 --> 00:07:19,680
and if you are constrained to this model

204
00:07:19,680 --> 00:07:21,919
you know login is the best you can hope

205
00:07:21,919 --> 00:07:24,400
for um but this slower bond is not a

206
00:07:24,400 --> 00:07:25,919
deal breaker it's more like a sanity

207
00:07:25,919 --> 00:07:27,680
check because we don't have to tie our

208
00:07:27,680 --> 00:07:29,039
hands and

209
00:07:29,039 --> 00:07:30,880
be constrained to this model

210
00:07:30,880 --> 00:07:33,039
uh so on the on the upper bound side we

211
00:07:33,039 --> 00:07:34,880
show that you know if we are willing to

212
00:07:34,880 --> 00:07:38,080
make a couple relaxations so first

213
00:07:38,080 --> 00:07:39,039
suppose

214
00:07:39,039 --> 00:07:39,759
we

215
00:07:39,759 --> 00:07:41,360
we are willing to

216
00:07:41,360 --> 00:07:42,400
accept

217
00:07:42,400 --> 00:07:44,879
approximate fairness rather than perfect

218
00:07:44,879 --> 00:07:47,280
fairness and second if we are willing to

219
00:07:47,280 --> 00:07:48,240
you know

220
00:07:48,240 --> 00:07:50,720
use cryptography in general and not just

221
00:07:50,720 --> 00:07:52,639
this like stringent commit and

222
00:07:52,639 --> 00:07:54,960
immediately reveal model then we can

223
00:07:54,960 --> 00:07:57,280
achieve protocols that are as small as

224
00:07:57,280 --> 00:07:59,120
log log and rounds right so this is kind

225
00:07:59,120 --> 00:08:01,120
of like an exponential improvement

226
00:08:01,120 --> 00:08:03,360
over the tournament tree protocol

227
00:08:03,360 --> 00:08:04,479
and

228
00:08:04,479 --> 00:08:06,639
so these are the results and i don't

229
00:08:06,639 --> 00:08:09,039
have time to go into details you can see

230
00:08:09,039 --> 00:08:11,199
our paper if you are interested and i

231
00:08:11,199 --> 00:08:13,039
also want to stress that in our paper we

232
00:08:13,039 --> 00:08:15,360
actually define

233
00:08:15,360 --> 00:08:18,000
a better solution concept a stronger

234
00:08:18,000 --> 00:08:20,160
approximate fairness notion and called

235
00:08:20,160 --> 00:08:23,120
approximate sequential fairness

236
00:08:23,120 --> 00:08:26,759
thank you very much

237
00:08:27,850 --> 00:08:29,120
[Music]

238
00:08:29,120 --> 00:08:30,800
we will take questions at the end so

239
00:08:30,800 --> 00:08:33,360
please stay around

240
00:08:33,360 --> 00:08:36,080
so next we have um

241
00:08:36,080 --> 00:08:38,958
minguan wang are you here

242
00:08:38,958 --> 00:08:40,880
oh great

243
00:08:40,880 --> 00:08:42,559
oh elaine can you stop sharing your

244
00:08:42,559 --> 00:08:44,880
spring

245
00:08:45,920 --> 00:08:49,279
as she already did actually

246
00:08:49,279 --> 00:08:51,519
okay i think my connection

247
00:08:51,519 --> 00:08:55,080
maybe it's slow

248
00:08:59,440 --> 00:09:00,320
okay

249
00:09:00,320 --> 00:09:02,560
next we have mink one i hope i don't

250
00:09:02,560 --> 00:09:04,160
mess up with your name

251
00:09:04,160 --> 00:09:05,279
so he's going to talk about

252
00:09:05,279 --> 00:09:07,440
computational hardness of optimal fair

253
00:09:07,440 --> 00:09:10,399
computation beyond mini crypt which is a

254
00:09:10,399 --> 00:09:12,560
joint world with uh hamanta magic please

255
00:09:12,560 --> 00:09:14,080
go ahead

256
00:09:14,080 --> 00:09:16,399
yeah okay you can see my slide and hear

257
00:09:16,399 --> 00:09:17,760
me right

258
00:09:17,760 --> 00:09:18,880
yes

259
00:09:18,880 --> 00:09:20,399
okay thank you thanks for the

260
00:09:20,399 --> 00:09:22,720
introduction so i'm going to talk about

261
00:09:22,720 --> 00:09:24,959
computational hardness of optimal fair

262
00:09:24,959 --> 00:09:27,279
computation beyond minicrypt this is a

263
00:09:27,279 --> 00:09:29,680
joint work with hamata maji

264
00:09:29,680 --> 00:09:31,760
so in this talk we'll be focusing on two

265
00:09:31,760 --> 00:09:33,839
party coin tossing protocols

266
00:09:33,839 --> 00:09:36,000
so we will be using r to denote the

267
00:09:36,000 --> 00:09:38,080
number of messages exchanged between the

268
00:09:38,080 --> 00:09:39,519
two parties

269
00:09:39,519 --> 00:09:41,839
so fair computation guarantees output

270
00:09:41,839 --> 00:09:44,480
delivery to the honest party so whenever

271
00:09:44,480 --> 00:09:47,040
a malicious party prematurely abort the

272
00:09:47,040 --> 00:09:49,279
honest party should still output a bit

273
00:09:49,279 --> 00:09:52,000
as his output of the protocol

274
00:09:52,000 --> 00:09:54,560
so the unfairness is defined by how much

275
00:09:54,560 --> 00:09:56,800
a malicious party can deviate the

276
00:09:56,800 --> 00:10:00,560
expected output of the honest party

277
00:10:00,560 --> 00:10:03,120
so we why we study coin tossing because

278
00:10:03,120 --> 00:10:05,279
this is a minimum task that already

279
00:10:05,279 --> 00:10:07,200
captured the harness of achieving

280
00:10:07,200 --> 00:10:08,880
fairness

281
00:10:08,880 --> 00:10:10,399
so let me first summarize the

282
00:10:10,399 --> 00:10:12,320
state-of-the-art result

283
00:10:12,320 --> 00:10:14,480
so first in pestilence where one-way

284
00:10:14,480 --> 00:10:16,800
function do not exist we know that for

285
00:10:16,800 --> 00:10:18,800
general adversaries any coin tossing

286
00:10:18,800 --> 00:10:21,760
protocol is constantly unfair

287
00:10:21,760 --> 00:10:23,600
on the other hand if you consider a

288
00:10:23,600 --> 00:10:25,920
restricted type of adversary called fel

289
00:10:25,920 --> 00:10:28,480
stock adversaries so these adversaries

290
00:10:28,480 --> 00:10:30,959
will behave semi-honestly the only

291
00:10:30,959 --> 00:10:32,800
malicious behavior is that they might

292
00:10:32,800 --> 00:10:34,480
prematurely abort

293
00:10:34,480 --> 00:10:36,240
so for these

294
00:10:36,240 --> 00:10:38,240
restricted adversary cleveland impact

295
00:10:38,240 --> 00:10:40,079
diablo show that any coin tossing

296
00:10:40,079 --> 00:10:42,640
protocol is one over root are unfair

297
00:10:42,640 --> 00:10:44,240
so recall that r is the number of

298
00:10:44,240 --> 00:10:47,040
messages in the protocol

299
00:10:47,040 --> 00:10:49,600
on the other hand in the 1980s after

300
00:10:49,600 --> 00:10:51,440
sequence of work we have this beautiful

301
00:10:51,440 --> 00:10:53,839
protocol called majority protocol that

302
00:10:53,839 --> 00:10:58,079
achieves one word rudar unfairness

303
00:10:58,240 --> 00:11:01,120
in another celebrate work cleve prove a

304
00:11:01,120 --> 00:11:03,920
strong lower uh impossibility result

305
00:11:03,920 --> 00:11:06,399
that any coin tossing protocol is at

306
00:11:06,399 --> 00:11:09,360
least one over r unfair

307
00:11:09,360 --> 00:11:11,519
so hence a coin tossing protocol that

308
00:11:11,519 --> 00:11:14,160
achieves one over r unfairness is called

309
00:11:14,160 --> 00:11:16,079
optimal affair

310
00:11:16,079 --> 00:11:17,519
so for a long time we do not know

311
00:11:17,519 --> 00:11:20,000
whether optimal fair coin tossing exists

312
00:11:20,000 --> 00:11:22,160
it's a very groundbreaking result when

313
00:11:22,160 --> 00:11:24,160
 now and sakhi show how to

314
00:11:24,160 --> 00:11:26,320
construct optimal fair coin tossing

315
00:11:26,320 --> 00:11:29,360
based on oblivious transfer

316
00:11:29,360 --> 00:11:32,320
and finally in one of our recent work we

317
00:11:32,320 --> 00:11:34,240
show that any coin

318
00:11:34,240 --> 00:11:36,320
any coin tossing protocol that uses

319
00:11:36,320 --> 00:11:38,640
one-way function in a black box manner

320
00:11:38,640 --> 00:11:42,959
is at least one over root r unfair

321
00:11:42,959 --> 00:11:45,920
so we can roughly color code this

322
00:11:45,920 --> 00:11:48,320
table into two colors the green cells

323
00:11:48,320 --> 00:11:50,399
are all those

324
00:11:50,399 --> 00:11:52,240
secure constructions and adversarial

325
00:11:52,240 --> 00:11:54,000
attacks that give you one over router

326
00:11:54,000 --> 00:11:55,279
unfairness

327
00:11:55,279 --> 00:11:56,800
under the red cells are all those

328
00:11:56,800 --> 00:11:58,639
constructions and adversarial attacks

329
00:11:58,639 --> 00:12:01,600
that gives you 1 over our unfairness

330
00:12:01,600 --> 00:12:04,160
so given this state-of-the-art result

331
00:12:04,160 --> 00:12:06,399
it's natural to ask whether oblivious

332
00:12:06,399 --> 00:12:08,839
transfer is necessary for optimal coin

333
00:12:08,839 --> 00:12:11,279
tossing for example can we construct

334
00:12:11,279 --> 00:12:13,040
optimal fair coin tossing based on

335
00:12:13,040 --> 00:12:14,800
public encryption

336
00:12:14,800 --> 00:12:17,200
or maybe based on pke there is a

337
00:12:17,200 --> 00:12:20,000
protocol that achieves some intermediate

338
00:12:20,000 --> 00:12:21,600
unfairness

339
00:12:21,600 --> 00:12:23,519
so in this talk we rule out such

340
00:12:23,519 --> 00:12:26,240
possibilities first we show that any

341
00:12:26,240 --> 00:12:28,480
coin tossing protocol that uses public

342
00:12:28,480 --> 00:12:31,200
key encryption in a black box manner is

343
00:12:31,200 --> 00:12:34,720
at least one over radar unfair

344
00:12:34,720 --> 00:12:37,040
additionally we consider a setting where

345
00:12:37,040 --> 00:12:39,360
parties not only have public encryption

346
00:12:39,360 --> 00:12:42,000
but they also have ideal ideal access to

347
00:12:42,000 --> 00:12:43,760
a trusted party realizing some

348
00:12:43,760 --> 00:12:46,720
functionality f so this is the f hybrid

349
00:12:46,720 --> 00:12:47,600
model

350
00:12:47,600 --> 00:12:49,680
and we show that as long as this f

351
00:12:49,680 --> 00:12:51,760
hybrid does not facilitate oblivious

352
00:12:51,760 --> 00:12:54,480
transfer then even in this setting any

353
00:12:54,480 --> 00:12:56,399
coin tossing protocol is one over root

354
00:12:56,399 --> 00:12:57,920
are unfair

355
00:12:57,920 --> 00:13:00,480
so our work strengthens the belief that

356
00:13:00,480 --> 00:13:02,639
oblivious transfer is necessary for

357
00:13:02,639 --> 00:13:05,200
optimal fair coin tossing

358
00:13:05,200 --> 00:13:06,639
so this table might give you the

359
00:13:06,639 --> 00:13:09,200
impression that uh everything is ruled

360
00:13:09,200 --> 00:13:12,079
out so let me emphasize what are the

361
00:13:12,079 --> 00:13:14,160
problems that are still open

362
00:13:14,160 --> 00:13:16,560
so among many things one thing in

363
00:13:16,560 --> 00:13:18,639
particular we did not prove is that we

364
00:13:18,639 --> 00:13:20,720
did not prove a black box separate

365
00:13:20,720 --> 00:13:23,920
separation between securely realizing f

366
00:13:23,920 --> 00:13:26,560
and optimal fair coin tossing to prove

367
00:13:26,560 --> 00:13:29,120
such a result one has to present a set

368
00:13:29,120 --> 00:13:31,839
of oracles relative to which the secure

369
00:13:31,839 --> 00:13:34,399
protocol for f exists but optimal fair

370
00:13:34,399 --> 00:13:36,320
coin tossing does not

371
00:13:36,320 --> 00:13:38,399
so intuitively this is very challenging

372
00:13:38,399 --> 00:13:41,360
because parties could use these oracles

373
00:13:41,360 --> 00:13:45,120
in ways other than just evaluating f

374
00:13:45,120 --> 00:13:47,440
so in particular if one indeed prove

375
00:13:47,440 --> 00:13:49,440
such a result it would prove a

376
00:13:49,440 --> 00:13:51,680
separation between securely realizing

377
00:13:51,680 --> 00:13:53,760
some incomplete functionality f and

378
00:13:53,760 --> 00:13:55,279
obvious transfer

379
00:13:55,279 --> 00:13:56,880
so this is one of the major open

380
00:13:56,880 --> 00:13:59,279
problems in the field and our results

381
00:13:59,279 --> 00:14:01,360
can be seen as making partial progress

382
00:14:01,360 --> 00:14:03,920
towards this goal

383
00:14:03,920 --> 00:14:05,519
and finally the

384
00:14:05,519 --> 00:14:07,760
our technical approach follows the

385
00:14:07,760 --> 00:14:11,199
paradigm by our last year's work

386
00:14:11,199 --> 00:14:13,360
in that work we show that a fair stock

387
00:14:13,360 --> 00:14:15,839
attacker can impose one over rooter

388
00:14:15,839 --> 00:14:18,480
unfairness for any coin tossing in the

389
00:14:18,480 --> 00:14:20,560
random oracle model

390
00:14:20,560 --> 00:14:22,800
so we know that this attacker

391
00:14:22,800 --> 00:14:25,199
generalized to other settings as long as

392
00:14:25,199 --> 00:14:27,440
we have the following invariant which is

393
00:14:27,440 --> 00:14:29,680
that alice and bob's private view are

394
00:14:29,680 --> 00:14:31,519
close to independent condition on the

395
00:14:31,519 --> 00:14:33,680
partial transcript as long as this

396
00:14:33,680 --> 00:14:36,079
invariant is always maintained the one

397
00:14:36,079 --> 00:14:38,800
can get one over root our unfairness

398
00:14:38,800 --> 00:14:40,639
so for the public key encryption we

399
00:14:40,639 --> 00:14:42,800
imported the result by muhammad imagi

400
00:14:42,800 --> 00:14:44,959
and prabhup karen who define a set of

401
00:14:44,959 --> 00:14:47,440
oracle facilitated public key encryption

402
00:14:47,440 --> 00:14:49,519
and show that there is an attacker who

403
00:14:49,519 --> 00:14:51,839
can ask polynomial remaining queries to

404
00:14:51,839 --> 00:14:54,079
ensure such an invariant

405
00:14:54,079 --> 00:14:56,399
and for the f hybrid result

406
00:14:56,399 --> 00:14:57,839
kilian gives this beautiful

407
00:14:57,839 --> 00:15:00,000
characterization for all incomplete

408
00:15:00,000 --> 00:15:01,680
functionality f

409
00:15:01,680 --> 00:15:04,079
which implies that uh this invariant

410
00:15:04,079 --> 00:15:06,079
hold in f hybrid model

411
00:15:06,079 --> 00:15:08,079
so this gives us the result

412
00:15:08,079 --> 00:15:10,240
and i will end my talk here and refer

413
00:15:10,240 --> 00:15:13,040
you to the paper for more details thank

414
00:15:13,040 --> 00:15:15,120
you

415
00:15:17,040 --> 00:15:19,680
thanks a lot

416
00:15:19,760 --> 00:15:23,360
so please stay for the questions

417
00:15:24,800 --> 00:15:27,040
i think next we have sofia

418
00:15:27,040 --> 00:15:28,639
yep

419
00:15:28,639 --> 00:15:29,680
great

420
00:15:29,680 --> 00:15:33,839
so sophia is going to talk about you oh

421
00:15:33,839 --> 00:15:35,600
sorry go ahead

422
00:15:35,600 --> 00:15:36,800
and you're going to talk about the year

423
00:15:36,800 --> 00:15:38,639
so yeah so she's going to talk about the

424
00:15:38,639 --> 00:15:42,079
only speak one secure mpc with stateless

425
00:15:42,079 --> 00:15:44,240
and female roles

426
00:15:44,240 --> 00:15:47,040
and the goals are greg gentry saihalavi

427
00:15:47,040 --> 00:15:49,920
kubokratchik bernardo magri esper

428
00:15:49,920 --> 00:15:52,560
nielsen tadrabin and sophie is giving

429
00:15:52,560 --> 00:15:54,880
the talk

430
00:15:54,880 --> 00:15:58,399
thanks uh antigone for the introduction

431
00:15:58,399 --> 00:16:01,839
uh so yoso stands for you only speak

432
00:16:01,839 --> 00:16:02,880
once

433
00:16:02,880 --> 00:16:04,959
and as the name suggests it describes a

434
00:16:04,959 --> 00:16:07,040
class of protocols where no one needs to

435
00:16:07,040 --> 00:16:08,800
speak more than one time

436
00:16:08,800 --> 00:16:10,079
and this kind of thing is particularly

437
00:16:10,079 --> 00:16:11,680
useful when we're dealing with an

438
00:16:11,680 --> 00:16:14,160
adaptive adversary who can corrupt

439
00:16:14,160 --> 00:16:16,480
anyone at any point of the protocol

440
00:16:16,480 --> 00:16:18,639
but is unable to

441
00:16:18,639 --> 00:16:21,440
take back messages that are already sent

442
00:16:21,440 --> 00:16:23,120
so in this work we make two separate

443
00:16:23,120 --> 00:16:25,839
contributions we define a formal yoso

444
00:16:25,839 --> 00:16:26,880
model

445
00:16:26,880 --> 00:16:29,040
and we describe two different yoseo and

446
00:16:29,040 --> 00:16:31,440
pc constructions

447
00:16:31,440 --> 00:16:32,880
so before getting into these

448
00:16:32,880 --> 00:16:35,040
contributions i'd like to give a little

449
00:16:35,040 --> 00:16:36,480
bit more of a motivation for the yoso

450
00:16:36,480 --> 00:16:37,519
model

451
00:16:37,519 --> 00:16:40,480
specifically in the context of npc

452
00:16:40,480 --> 00:16:44,079
and since this is the npc session

453
00:16:44,079 --> 00:16:45,519
by the way i didn't check with you guys

454
00:16:45,519 --> 00:16:48,320
do you see my slides

455
00:16:48,880 --> 00:16:50,959
yes with you okay great

456
00:16:50,959 --> 00:16:53,120
uh so since this is the npc session uh i

457
00:16:53,120 --> 00:16:54,000
don't want to give much of an

458
00:16:54,000 --> 00:16:55,519
introduction to

459
00:16:55,519 --> 00:16:57,839
npc uh and instead i'll just jump right

460
00:16:57,839 --> 00:17:00,160
in so imagine we have alice bob and

461
00:17:00,160 --> 00:17:02,880
charlie who want to outsource a

462
00:17:02,880 --> 00:17:05,359
computation on their secret inputs x1 x2

463
00:17:05,359 --> 00:17:07,280
and x3 and they want to outsource this

464
00:17:07,280 --> 00:17:09,839
to a large set of parties maybe millions

465
00:17:09,839 --> 00:17:12,240
as in the blockchain

466
00:17:12,240 --> 00:17:14,000
so we assume we have a powerful adaptive

467
00:17:14,000 --> 00:17:15,839
adversary who can corrupt up to half of

468
00:17:15,839 --> 00:17:17,039
these parties

469
00:17:17,039 --> 00:17:18,799
and we want to make sure that even if

470
00:17:18,799 --> 00:17:21,119
the adversary does this alice bob and

471
00:17:21,119 --> 00:17:23,280
charlie still get their output so we

472
00:17:23,280 --> 00:17:25,280
really want the strongest npc guarantee

473
00:17:25,280 --> 00:17:27,599
which is guaranteed output delivery

474
00:17:27,599 --> 00:17:30,320
uh but now we have an efficiency problem

475
00:17:30,320 --> 00:17:33,840
so uh in most npc protocols all of the

476
00:17:33,840 --> 00:17:36,320
participants have to talk to all of the

477
00:17:36,320 --> 00:17:38,400
other participants

478
00:17:38,400 --> 00:17:40,000
and this is fine if there's only a few

479
00:17:40,000 --> 00:17:41,360
of them but if we're talking about

480
00:17:41,360 --> 00:17:43,280
millions this becomes prohibitively

481
00:17:43,280 --> 00:17:44,880
inefficient

482
00:17:44,880 --> 00:17:46,880
so what we really want is to make sure

483
00:17:46,880 --> 00:17:48,559
that the total communication complexity

484
00:17:48,559 --> 00:17:51,600
of our protocol is sublinear in n which

485
00:17:51,600 --> 00:17:55,120
is the number of participants

486
00:17:55,120 --> 00:17:57,039
so this means that in any given round of

487
00:17:57,039 --> 00:17:59,120
the computation only a few of our

488
00:17:59,120 --> 00:18:00,799
parties speak so these are the guys in

489
00:18:00,799 --> 00:18:02,240
blue

490
00:18:02,240 --> 00:18:05,919
and uh the issue now is that once these

491
00:18:05,919 --> 00:18:08,240
parties have spoken the adversary who's

492
00:18:08,240 --> 00:18:10,000
always watching the network sees that

493
00:18:10,000 --> 00:18:11,039
they spoke

494
00:18:11,039 --> 00:18:12,640
and might conclude that they're

495
00:18:12,640 --> 00:18:15,360
particularly crucial to the computation

496
00:18:15,360 --> 00:18:17,039
so maybe the adversary will instantly

497
00:18:17,039 --> 00:18:19,679
corrupt them with some zero-day exploit

498
00:18:19,679 --> 00:18:21,600
and once the adversary does this she can

499
00:18:21,600 --> 00:18:23,760
prevent them from ever speaking again

500
00:18:23,760 --> 00:18:26,320
which brings us to you only speak once

501
00:18:26,320 --> 00:18:28,799
or yo so

502
00:18:28,799 --> 00:18:30,880
so if the computation isn't done yet

503
00:18:30,880 --> 00:18:32,320
we're going to need another committee to

504
00:18:32,320 --> 00:18:33,520
come forward

505
00:18:33,520 --> 00:18:35,200
and carry on and as soon as they've

506
00:18:35,200 --> 00:18:37,760
spoken they die as well

507
00:18:37,760 --> 00:18:39,679
so we really continue in this fashion

508
00:18:39,679 --> 00:18:42,400
until alice bob and charlie get the

509
00:18:42,400 --> 00:18:44,880
outputs

510
00:18:44,960 --> 00:18:46,799
all right so like i mentioned there's

511
00:18:46,799 --> 00:18:48,799
two parts to our contribution there's

512
00:18:48,799 --> 00:18:51,039
the formal yoso model and then two

513
00:18:51,039 --> 00:18:52,320
protocols

514
00:18:52,320 --> 00:18:54,799
and our model is really nice because it

515
00:18:54,799 --> 00:18:58,080
gives this clean split between two

516
00:18:58,080 --> 00:19:01,120
different components of yoso protocols

517
00:19:01,120 --> 00:19:03,440
so there's real assignment or ra for

518
00:19:03,440 --> 00:19:07,120
short which deals with

519
00:19:07,120 --> 00:19:09,919
the covert selection of committees in

520
00:19:09,919 --> 00:19:11,360
such a way that the adversary can't

521
00:19:11,360 --> 00:19:13,200
anticipate who they're going to be until

522
00:19:13,200 --> 00:19:14,640
they say something

523
00:19:14,640 --> 00:19:17,919
and then there's role execution or rx

524
00:19:17,919 --> 00:19:19,840
which deals with what with what those

525
00:19:19,840 --> 00:19:21,120
committees do

526
00:19:21,120 --> 00:19:23,440
once they've been chosen

527
00:19:23,440 --> 00:19:26,320
so a quick glance at real assignment

528
00:19:26,320 --> 00:19:27,600
first

529
00:19:27,600 --> 00:19:29,520
the goal here is to choose our

530
00:19:29,520 --> 00:19:31,440
committees in such a way that they

531
00:19:31,440 --> 00:19:32,880
remain anonymous until they say

532
00:19:32,880 --> 00:19:34,160
something

533
00:19:34,160 --> 00:19:35,840
but at the same time we need to make

534
00:19:35,840 --> 00:19:36,799
sure

535
00:19:36,799 --> 00:19:39,200
that anyone in the system can

536
00:19:39,200 --> 00:19:40,880
send these committee members secret

537
00:19:40,880 --> 00:19:43,440
messages without knowing who they are

538
00:19:43,440 --> 00:19:45,200
and this is important because previous

539
00:19:45,200 --> 00:19:46,799
committees might need to communicate

540
00:19:46,799 --> 00:19:48,960
secret state to future committee members

541
00:19:48,960 --> 00:19:50,370
maybe by resharing it

542
00:19:50,370 --> 00:19:51,679
[Music]

543
00:19:51,679 --> 00:19:54,480
so benhamouda at all give one

544
00:19:54,480 --> 00:19:56,799
construction of role assignment that

545
00:19:56,799 --> 00:19:59,440
uses nominating committees

546
00:19:59,440 --> 00:20:01,760
and what they get is a set of anonymous

547
00:20:01,760 --> 00:20:03,520
keys those are the little locks in the

548
00:20:03,520 --> 00:20:05,520
right corner

549
00:20:05,520 --> 00:20:06,480
where

550
00:20:06,480 --> 00:20:08,080
no one knows who these public encryption

551
00:20:08,080 --> 00:20:09,679
keys belong to

552
00:20:09,679 --> 00:20:12,080
but anyone can then use them to encrypt

553
00:20:12,080 --> 00:20:15,120
a message that can only be decrypted by

554
00:20:15,120 --> 00:20:18,479
the appropriate committee member

555
00:20:18,720 --> 00:20:20,400
so what we get from real assignment is a

556
00:20:20,400 --> 00:20:22,159
bunch of anonymous future committees the

557
00:20:22,159 --> 00:20:23,919
members of which are able to receive

558
00:20:23,919 --> 00:20:25,360
secret messages

559
00:20:25,360 --> 00:20:26,799
and with the guarantee that every

560
00:20:26,799 --> 00:20:30,720
committee has an honest majority

561
00:20:30,720 --> 00:20:32,480
so once the rules have been assigned we

562
00:20:32,480 --> 00:20:34,799
can move on to specifying how role

563
00:20:34,799 --> 00:20:36,720
execution works or what these committee

564
00:20:36,720 --> 00:20:40,640
committees do once they've been chosen

565
00:20:40,640 --> 00:20:43,840
so we have these two mpc protocols

566
00:20:43,840 --> 00:20:46,159
the first uses computational assumptions

567
00:20:46,159 --> 00:20:48,240
and it's very similar to the cbn

568
00:20:48,240 --> 00:20:50,799
protocol from 20 years ago so it uses

569
00:20:50,799 --> 00:20:52,480
linearly homomorphic encryption together

570
00:20:52,480 --> 00:20:54,080
with beaver truffles

571
00:20:54,080 --> 00:20:55,919
and the second protocol is an

572
00:20:55,919 --> 00:20:58,159
information theoretic construction or

573
00:20:58,159 --> 00:20:59,600
where the role execution is information

574
00:20:59,600 --> 00:21:02,559
theoretic but it runs on top of a

575
00:21:02,559 --> 00:21:05,679
computational real assignment

576
00:21:05,679 --> 00:21:07,360
and this one is a little more involved

577
00:21:07,360 --> 00:21:09,520
because information theoretic techniques

578
00:21:09,520 --> 00:21:11,120
uh don't really lend themselves

579
00:21:11,120 --> 00:21:14,480
naturally to the yoso setting

580
00:21:14,480 --> 00:21:16,320
so in particular most information

581
00:21:16,320 --> 00:21:18,400
theoretic and pc protocols use something

582
00:21:18,400 --> 00:21:21,120
called verifiable secret sharing

583
00:21:21,120 --> 00:21:25,039
where uh the secret the sharing phase

584
00:21:25,039 --> 00:21:27,840
uh once the dealer shares the secret

585
00:21:27,840 --> 00:21:29,919
additionally involves a verification

586
00:21:29,919 --> 00:21:32,799
step where the shareholders sort of talk

587
00:21:32,799 --> 00:21:34,480
amongst themselves maybe with the dealer

588
00:21:34,480 --> 00:21:35,760
as well

589
00:21:35,760 --> 00:21:37,360
to convince themselves of each other

590
00:21:37,360 --> 00:21:39,600
that what they have is really a valid

591
00:21:39,600 --> 00:21:41,520
reconstructable sharing

592
00:21:41,520 --> 00:21:42,880
and the problem with this in the yoso

593
00:21:42,880 --> 00:21:45,520
setting is well

594
00:21:45,520 --> 00:21:46,960
maybe they convinced each other that

595
00:21:46,960 --> 00:21:49,200
they had a valid sharing but

596
00:21:49,200 --> 00:21:51,760
they've also spoken in the process

597
00:21:51,760 --> 00:21:53,600
and they died in the process since we

598
00:21:53,600 --> 00:21:55,200
only speak once

599
00:21:55,200 --> 00:21:56,559
so this renders the whole thing kind of

600
00:21:56,559 --> 00:21:58,080
useless

601
00:21:58,080 --> 00:22:00,400
and we use a simple but powerful fix for

602
00:22:00,400 --> 00:22:02,880
this which we call future broadcast

603
00:22:02,880 --> 00:22:03,919
where

604
00:22:03,919 --> 00:22:06,240
each of our shareholders

605
00:22:06,240 --> 00:22:07,760
takes all of the messages they want to

606
00:22:07,760 --> 00:22:09,440
share in the future they want to send in

607
00:22:09,440 --> 00:22:10,799
the future

608
00:22:10,799 --> 00:22:12,480
and they secret share these to

609
00:22:12,480 --> 00:22:14,799
independent future committees

610
00:22:14,799 --> 00:22:17,120
so essentially they can speak once to

611
00:22:17,120 --> 00:22:19,360
distribute these sharings and in doing

612
00:22:19,360 --> 00:22:20,960
so schedule multiple messages in the

613
00:22:20,960 --> 00:22:22,480
future which can be triggered by

614
00:22:22,480 --> 00:22:24,080
arbitrary events

615
00:22:24,080 --> 00:22:26,000
so maybe one of those can be used for

616
00:22:26,000 --> 00:22:28,720
verification and some for

617
00:22:28,720 --> 00:22:31,360
other future actions like reconstruction

618
00:22:31,360 --> 00:22:33,440
and mpc

619
00:22:33,440 --> 00:22:35,760
and the mpc itself that builds on

620
00:22:35,760 --> 00:22:37,440
verifiable secret sharing is even more

621
00:22:37,440 --> 00:22:39,520
involved it has many layers and each of

622
00:22:39,520 --> 00:22:40,799
these involves

623
00:22:40,799 --> 00:22:42,080
more committees

624
00:22:42,080 --> 00:22:44,000
which makes our information theoretical

625
00:22:44,000 --> 00:22:45,919
construction a little inefficient a lot

626
00:22:45,919 --> 00:22:47,600
inefficient actually

627
00:22:47,600 --> 00:22:50,559
but it's still an interesting uh theory

628
00:22:50,559 --> 00:22:52,960
result

629
00:22:52,960 --> 00:22:55,440
all right so to conclude we have this

630
00:22:55,440 --> 00:22:57,840
formal model with the neat separation of

631
00:22:57,840 --> 00:23:00,480
role assignment and role execution

632
00:23:00,480 --> 00:23:03,280
and we have these two npc constructions

633
00:23:03,280 --> 00:23:04,640
both of which are secure against

634
00:23:04,640 --> 00:23:06,840
adaptive adversaries and get us total

635
00:23:06,840 --> 00:23:09,840
communication which is sublinear in the

636
00:23:09,840 --> 00:23:11,919
number of participants

637
00:23:11,919 --> 00:23:13,840
and the last thing i want to say is that

638
00:23:13,840 --> 00:23:15,440
this yoso model

639
00:23:15,440 --> 00:23:18,559
opens a pandora's box of open problems

640
00:23:18,559 --> 00:23:20,400
so basically anything we've asked about

641
00:23:20,400 --> 00:23:22,000
npc

642
00:23:22,000 --> 00:23:26,320
we can ask again in the context of yosom

643
00:23:26,320 --> 00:23:27,679
all right that's all i want to say

644
00:23:27,679 --> 00:23:30,240
thanks very much

645
00:23:30,240 --> 00:23:32,720
thanks a lot sophia

646
00:23:32,720 --> 00:23:34,320
stay around

647
00:23:34,320 --> 00:23:39,039
okay um so then we have um

648
00:23:39,039 --> 00:23:41,279
arushimugu

649
00:23:41,279 --> 00:23:44,640
so please go ahead and share your screen

650
00:23:44,640 --> 00:23:47,679
um so he's going to talk about fluid mpc

651
00:23:47,679 --> 00:23:49,600
secure multiplied computation with

652
00:23:49,600 --> 00:23:51,600
dynamic participants

653
00:23:51,600 --> 00:23:54,480
which they joined with with archery

654
00:23:54,480 --> 00:23:56,080
to duty

655
00:23:56,080 --> 00:23:59,279
uh matthew green abbott jane gabriel

656
00:23:59,279 --> 00:24:02,640
rapture and gabriel

657
00:24:02,640 --> 00:24:05,039
public

658
00:24:05,360 --> 00:24:08,240
hi thanks for the introduction um so i'm

659
00:24:08,240 --> 00:24:10,000
going to talk about this joint work with

660
00:24:10,000 --> 00:24:12,799
arka mat abhishek and game on secure

661
00:24:12,799 --> 00:24:14,640
multi-party computation with dynamic

662
00:24:14,640 --> 00:24:16,320
participants

663
00:24:16,320 --> 00:24:19,679
um so as we all know mpc was originally

664
00:24:19,679 --> 00:24:22,559
introduced in the 80s and since then

665
00:24:22,559 --> 00:24:25,039
extensive effort has gone into trying to

666
00:24:25,039 --> 00:24:27,360
bring it closer to practice

667
00:24:27,360 --> 00:24:29,600
and as the efficiency of these mpc

668
00:24:29,600 --> 00:24:31,440
protocols increases

669
00:24:31,440 --> 00:24:33,679
the hope is that we can use npc to

670
00:24:33,679 --> 00:24:36,480
compute large complex functionalities

671
00:24:36,480 --> 00:24:37,919
such as training machine learning

672
00:24:37,919 --> 00:24:40,480
algorithms or simulating large ram

673
00:24:40,480 --> 00:24:42,880
programs on massive distributed data

674
00:24:42,880 --> 00:24:44,000
sets

675
00:24:44,000 --> 00:24:45,600
however since these are massive

676
00:24:45,600 --> 00:24:48,640
functionalities irrespective of how

677
00:24:48,640 --> 00:24:51,120
efficient our protocol is evaluating

678
00:24:51,120 --> 00:24:54,640
these could take a very long time

679
00:24:54,640 --> 00:24:56,799
the problem with most of the existing

680
00:24:56,799 --> 00:24:59,279
literature on mpc is that it considers

681
00:24:59,279 --> 00:25:01,520
fixed participants that are decided at

682
00:25:01,520 --> 00:25:04,640
the beginning of the protocol

683
00:25:04,640 --> 00:25:06,880
and in such protocols if the computation

684
00:25:06,880 --> 00:25:09,440
is long drawn some of the participants

685
00:25:09,440 --> 00:25:11,200
might have to drop in the middle of the

686
00:25:11,200 --> 00:25:12,400
computation

687
00:25:12,400 --> 00:25:14,320
not necessarily because they have any

688
00:25:14,320 --> 00:25:16,320
malicious intent but maybe because of

689
00:25:16,320 --> 00:25:18,480
some other work commitments or because

690
00:25:18,480 --> 00:25:20,480
they ran out of resources

691
00:25:20,480 --> 00:25:22,480
in such scenarios the remaining

692
00:25:22,480 --> 00:25:24,960
participants usually have no other

693
00:25:24,960 --> 00:25:26,000
choice

694
00:25:26,000 --> 00:25:28,559
but to

695
00:25:28,559 --> 00:25:30,880
to abort the computation and all of the

696
00:25:30,880 --> 00:25:33,760
work done so far goes to waste

697
00:25:33,760 --> 00:25:34,880
so the

698
00:25:34,880 --> 00:25:36,720
main question that we consider in this

699
00:25:36,720 --> 00:25:39,840
work is whether the static nature of npc

700
00:25:39,840 --> 00:25:42,720
protocols is really inherent or if there

701
00:25:42,720 --> 00:25:44,480
is a way to design the

702
00:25:44,480 --> 00:25:47,279
protocols with dynamic participants

703
00:25:47,279 --> 00:25:49,600
to elaborate on what i exactly mean by

704
00:25:49,600 --> 00:25:52,080
dynamic participants let's consider a

705
00:25:52,080 --> 00:25:54,400
group of parties that begin executing an

706
00:25:54,400 --> 00:25:57,039
npc protocol now

707
00:25:57,039 --> 00:26:00,880
after i mean after the begin execution

708
00:26:00,880 --> 00:26:02,960
after some time some of the parties drop

709
00:26:02,960 --> 00:26:04,799
out and at the same time some new

710
00:26:04,799 --> 00:26:06,320
parties join it

711
00:26:06,320 --> 00:26:08,320
what we want is that they should not

712
00:26:08,320 --> 00:26:11,520
disrupt the computation and instead this

713
00:26:11,520 --> 00:26:13,679
old group of parties should somehow be

714
00:26:13,679 --> 00:26:15,679
able to communicate the result of their

715
00:26:15,679 --> 00:26:18,240
partial computation with the new group

716
00:26:18,240 --> 00:26:20,000
so that this new group can take the

717
00:26:20,000 --> 00:26:22,720
execution forward without having to redo

718
00:26:22,720 --> 00:26:26,080
any of the previously done computation

719
00:26:26,080 --> 00:26:28,480
this kind of protocol clearly reduces

720
00:26:28,480 --> 00:26:30,640
the burden of computation on individual

721
00:26:30,640 --> 00:26:33,279
parties as it allows participants to

722
00:26:33,279 --> 00:26:37,200
join and leave as they wish

723
00:26:37,279 --> 00:26:40,080
in this work we present a formal model

724
00:26:40,080 --> 00:26:43,200
for npc with dynamic participants

725
00:26:43,200 --> 00:26:44,880
we also present

726
00:26:44,880 --> 00:26:47,039
semi honest and maliciously secure

727
00:26:47,039 --> 00:26:51,039
constructions in this model

728
00:26:51,039 --> 00:26:53,440
so let me now elaborate a little more on

729
00:26:53,440 --> 00:26:54,480
our model

730
00:26:54,480 --> 00:26:56,880
so we model this dynamic computation in

731
00:26:56,880 --> 00:26:59,120
the client server model

732
00:26:59,120 --> 00:27:01,360
so as a standard we assume that there is

733
00:27:01,360 --> 00:27:03,679
a static group of clients that share

734
00:27:03,679 --> 00:27:06,400
their inputs with the servers then in

735
00:27:06,400 --> 00:27:08,880
the execution stage a group of dynamic

736
00:27:08,880 --> 00:27:11,679
servers participate to compute this

737
00:27:11,679 --> 00:27:12,720
function

738
00:27:12,720 --> 00:27:14,799
and finally in the output stage the

739
00:27:14,799 --> 00:27:17,279
servers share the output of this

740
00:27:17,279 --> 00:27:19,679
computation with the clients

741
00:27:19,679 --> 00:27:21,360
now since we are assuming that the

742
00:27:21,360 --> 00:27:24,000
clients are static and dynamism only

743
00:27:24,000 --> 00:27:26,320
shows up in the execution stage let me

744
00:27:26,320 --> 00:27:28,880
just focus on this stage now

745
00:27:28,880 --> 00:27:29,600
so

746
00:27:29,600 --> 00:27:31,760
we can view this execution stage as

747
00:27:31,760 --> 00:27:34,399
proceeding in discrete time steps called

748
00:27:34,399 --> 00:27:37,120
epochs where each epoch could also

749
00:27:37,120 --> 00:27:40,080
potentially consist of multiple rounds

750
00:27:40,080 --> 00:27:42,159
we assume that this epoch is further

751
00:27:42,159 --> 00:27:44,720
divided into two sub-phases called the

752
00:27:44,720 --> 00:27:47,600
computation phase and the hand-off phase

753
00:27:47,600 --> 00:27:50,159
and each epoch has a designated set of

754
00:27:50,159 --> 00:27:51,919
parties which we refer to as the

755
00:27:51,919 --> 00:27:54,080
committee for that epoch

756
00:27:54,080 --> 00:27:55,919
the members of a given committee

757
00:27:55,919 --> 00:27:58,320
interact amongst each others in the

758
00:27:58,320 --> 00:28:00,559
computation phase of the epoch

759
00:28:00,559 --> 00:28:02,559
and then in the handoff phase they talk

760
00:28:02,559 --> 00:28:04,880
to the members of the next committee to

761
00:28:04,880 --> 00:28:06,799
transfer information about the

762
00:28:06,799 --> 00:28:08,480
computation that they did in the

763
00:28:08,480 --> 00:28:10,159
computation phase

764
00:28:10,159 --> 00:28:12,240
and this is basically how the protocol

765
00:28:12,240 --> 00:28:14,799
proceeds

766
00:28:15,039 --> 00:28:17,679
we require two main properties from any

767
00:28:17,679 --> 00:28:19,600
fluid mpc protocol

768
00:28:19,600 --> 00:28:21,600
the first is division of work and the

769
00:28:21,600 --> 00:28:24,480
second is fluidity uh i'll elaborate on

770
00:28:24,480 --> 00:28:26,000
each of those now

771
00:28:26,000 --> 00:28:29,120
so division of work essentially means

772
00:28:29,120 --> 00:28:31,760
that every part every committee i'm

773
00:28:31,760 --> 00:28:34,240
sorry should only be required to compute

774
00:28:34,240 --> 00:28:36,399
a small part of the circuit

775
00:28:36,399 --> 00:28:38,720
in particular the computation that they

776
00:28:38,720 --> 00:28:41,039
do should be independent of at the very

777
00:28:41,039 --> 00:28:43,039
least the depth of the circuit

778
00:28:43,039 --> 00:28:45,360
otherwise if each committee is required

779
00:28:45,360 --> 00:28:47,840
to do a lot of work say for instance

780
00:28:47,840 --> 00:28:50,000
proportional to the size of the entire

781
00:28:50,000 --> 00:28:52,240
circuit then that defeats the purpose of

782
00:28:52,240 --> 00:28:55,039
dynamism in some sense

783
00:28:55,039 --> 00:28:57,279
our second requirement is that the

784
00:28:57,279 --> 00:29:00,000
protocol should have a high churn rate

785
00:29:00,000 --> 00:29:02,159
which means that the minimum commitment

786
00:29:02,159 --> 00:29:04,320
that a party needs to make in order to

787
00:29:04,320 --> 00:29:06,320
participate in the protocol should be

788
00:29:06,320 --> 00:29:08,399
very small and we measure this

789
00:29:08,399 --> 00:29:10,640
commitment in the number of rounds in a

790
00:29:10,640 --> 00:29:12,880
given epoch

791
00:29:12,880 --> 00:29:15,520
in fact ideally what we'd want is for

792
00:29:15,520 --> 00:29:17,760
the protocols in this model to have

793
00:29:17,760 --> 00:29:20,559
maximal fluidity which essentially means

794
00:29:20,559 --> 00:29:22,799
that each party should only be required

795
00:29:22,799 --> 00:29:25,360
to communicate in a single round

796
00:29:25,360 --> 00:29:27,440
and as you would see this is only

797
00:29:27,440 --> 00:29:29,840
possible if the computation phase in

798
00:29:29,840 --> 00:29:32,240
each epoch is completely silent that is

799
00:29:32,240 --> 00:29:34,880
nobody talks in the computation phase

800
00:29:34,880 --> 00:29:37,039
and the handoff phase consists of a

801
00:29:37,039 --> 00:29:39,679
single round of unidirectional messages

802
00:29:39,679 --> 00:29:41,360
from the old committee to the new

803
00:29:41,360 --> 00:29:43,840
committee

804
00:29:44,399 --> 00:29:47,120
finally to summarize uh we present a

805
00:29:47,120 --> 00:29:49,440
formal model for npc with dynamic

806
00:29:49,440 --> 00:29:50,960
participants

807
00:29:50,960 --> 00:29:52,720
we present information theoretic

808
00:29:52,720 --> 00:29:54,960
constructions of both semi-honest and

809
00:29:54,960 --> 00:29:57,120
maliciously secured protocols in this

810
00:29:57,120 --> 00:29:58,000
model

811
00:29:58,000 --> 00:29:59,919
both our protocols achieve maximal

812
00:29:59,919 --> 00:30:02,320
fluidity and our maliciously secure

813
00:30:02,320 --> 00:30:05,279
protocol achieves security with abort

814
00:30:05,279 --> 00:30:07,600
we also implement our maliciously secure

815
00:30:07,600 --> 00:30:09,840
protocol

816
00:30:09,840 --> 00:30:11,840
and while these are great first

817
00:30:11,840 --> 00:30:13,279
solutions

818
00:30:13,279 --> 00:30:14,880
in this new model

819
00:30:14,880 --> 00:30:17,279
there are many interesting open problems

820
00:30:17,279 --> 00:30:18,880
and i hope some of you would consider

821
00:30:18,880 --> 00:30:20,159
working on them

822
00:30:20,159 --> 00:30:23,320
thank you

823
00:30:25,600 --> 00:30:28,799
thanks a lot hershey

824
00:30:30,720 --> 00:30:32,960
okay um let's move to the next talk

825
00:30:32,960 --> 00:30:34,640
which is the last conversation and then

826
00:30:34,640 --> 00:30:36,640
we can take the questions

827
00:30:36,640 --> 00:30:38,480
so next we have

828
00:30:38,480 --> 00:30:40,880
varun

829
00:30:41,360 --> 00:30:44,159
i hope that was correct

830
00:30:44,159 --> 00:30:46,480
he's going to talk about secure

831
00:30:46,480 --> 00:30:48,399
computation from one way

832
00:30:48,399 --> 00:30:50,640
noisy communication or add the

833
00:30:50,640 --> 00:30:53,919
correlation by under concentration

834
00:30:53,919 --> 00:30:56,320
and that's the joint work with sveta aka

835
00:30:56,320 --> 00:30:59,360
wall yuvali shai ayakusilavich

836
00:30:59,360 --> 00:31:02,880
manos prabhakaran vinod prabhakaran and

837
00:31:02,880 --> 00:31:05,279
alan

838
00:31:06,559 --> 00:31:08,640
how do you call your name is varun or

839
00:31:08,640 --> 00:31:11,440
how do you call it uh it's a varun

840
00:31:11,440 --> 00:31:14,159
oh great thank you so go ahead

841
00:31:14,159 --> 00:31:17,039
just give me a moment here um it seems

842
00:31:17,039 --> 00:31:18,960
like my video was

843
00:31:18,960 --> 00:31:20,559
a little messed up

844
00:31:20,559 --> 00:31:22,240
um

845
00:31:22,240 --> 00:31:24,320
so am i visible now

846
00:31:24,320 --> 00:31:25,919
yes

847
00:31:25,919 --> 00:31:29,840
okay uh thank you antiguani um

848
00:31:29,840 --> 00:31:33,840
uh thank you everyone for joining in

849
00:31:34,080 --> 00:31:35,279
in this work

850
00:31:35,279 --> 00:31:37,279
we look at secure computation over

851
00:31:37,279 --> 00:31:38,799
channels when

852
00:31:38,799 --> 00:31:44,200
the communication is restricted to uh

853
00:31:46,000 --> 00:31:48,080
uh one direct restricted to be one

854
00:31:48,080 --> 00:31:49,600
directional

855
00:31:49,600 --> 00:31:51,279
uh

856
00:31:51,279 --> 00:31:53,519
and we are trying to realize secure

857
00:31:53,519 --> 00:31:56,960
computation over uh channel given sam

858
00:31:56,960 --> 00:31:58,640
this model uh

859
00:31:58,640 --> 00:32:00,640
is called one-way secure computation or

860
00:32:00,640 --> 00:32:03,039
owsc for short and was introduced by

861
00:32:03,039 --> 00:32:06,720
gargata in their 2015 paper

862
00:32:06,720 --> 00:32:09,039
due to its non-interactive nature it has

863
00:32:09,039 --> 00:32:11,120
several practical applications and is

864
00:32:11,120 --> 00:32:12,880
also interesting from a theoretical

865
00:32:12,880 --> 00:32:14,799
standpoint

866
00:32:14,799 --> 00:32:16,320
one directional communication implies

867
00:32:16,320 --> 00:32:19,039
that we can only expect to compute

868
00:32:19,039 --> 00:32:20,960
functionalities that take an input a

869
00:32:20,960 --> 00:32:23,440
from the sender and provides an output f

870
00:32:23,440 --> 00:32:26,080
of a to the receiver where f is some

871
00:32:26,080 --> 00:32:28,799
randomized function

872
00:32:28,799 --> 00:32:31,039
awc protocols have a simple structure

873
00:32:31,039 --> 00:32:34,799
the sender encodes her input say a

874
00:32:34,799 --> 00:32:36,799
using an encoder inc

875
00:32:36,799 --> 00:32:38,559
and sends it to the receiver possibly

876
00:32:38,559 --> 00:32:40,960
making multiple uses of the channel

877
00:32:40,960 --> 00:32:43,600
the receiver decodes the output of the

878
00:32:43,600 --> 00:32:46,799
channel using a decoder deck to compute

879
00:32:46,799 --> 00:32:48,880
a potential output

880
00:32:48,880 --> 00:32:52,000
informally uh the in the semi on a

881
00:32:52,000 --> 00:32:54,000
setting correctness of the protocol

882
00:32:54,000 --> 00:32:55,840
requires that the receiver's output is

883
00:32:55,840 --> 00:32:57,279
distributed according to the

884
00:32:57,279 --> 00:33:00,399
distribution f of a when the input is a

885
00:33:00,399 --> 00:33:03,360
to the sender that is and

886
00:33:03,360 --> 00:33:05,039
security against the receiver requires

887
00:33:05,039 --> 00:33:07,200
that the receiver only learns f of a and

888
00:33:07,200 --> 00:33:08,720
nothing else

889
00:33:08,720 --> 00:33:10,880
and the security against the sender

890
00:33:10,880 --> 00:33:12,559
requires that the sender only learns

891
00:33:12,559 --> 00:33:14,000
that the receiver's output is

892
00:33:14,000 --> 00:33:17,600
distributed according to ffa

893
00:33:17,760 --> 00:33:20,159
an important question that was left open

894
00:33:20,159 --> 00:33:22,799
by the previous works

895
00:33:22,799 --> 00:33:26,240
is whether natural channels like bec and

896
00:33:26,240 --> 00:33:27,840
bsc are

897
00:33:27,840 --> 00:33:30,799
owc complete that is can we

898
00:33:30,799 --> 00:33:33,519
realize any functionality that we want

899
00:33:33,519 --> 00:33:38,960
using bc and bse in the owsc model

900
00:33:38,960 --> 00:33:40,240
here bc

901
00:33:40,240 --> 00:33:43,519
or binary erasure channel

902
00:33:43,519 --> 00:33:46,080
takes a single bit as input and erases

903
00:33:46,080 --> 00:33:48,240
it with some probability say b

904
00:33:48,240 --> 00:33:51,120
and otherwise lets it pass unchanged

905
00:33:51,120 --> 00:33:53,600
and bsc or binary symmetric channel

906
00:33:53,600 --> 00:33:55,360
takes a bit and flips it with some

907
00:33:55,360 --> 00:33:57,440
probability say p and lets it pass

908
00:33:57,440 --> 00:34:00,399
unchanged otherwise

909
00:34:00,399 --> 00:34:03,120
our main theorem states that bc and bse

910
00:34:03,120 --> 00:34:04,880
are indeed complete

911
00:34:04,880 --> 00:34:07,039
with error that is inverse polynomial in

912
00:34:07,039 --> 00:34:10,079
the number of uses of the channel

913
00:34:10,079 --> 00:34:12,560
against a computationally unbounded semi

914
00:34:12,560 --> 00:34:15,119
on a sender and a query bounded but

915
00:34:15,119 --> 00:34:16,800
otherwise computationally unbounded

916
00:34:16,800 --> 00:34:20,079
receiver in the owsc model using ideal

917
00:34:20,079 --> 00:34:21,280
obfuscation

918
00:34:21,280 --> 00:34:22,639
we will describe

919
00:34:22,639 --> 00:34:24,639
orwse using ideal obfuscation in the

920
00:34:24,639 --> 00:34:26,079
coming slides

921
00:34:26,079 --> 00:34:28,239
to put a result in context previous

922
00:34:28,239 --> 00:34:30,719
results

923
00:34:31,040 --> 00:34:32,480
showed that

924
00:34:32,480 --> 00:34:34,560
we cannot demand completeness with

925
00:34:34,560 --> 00:34:36,800
negligible error where the error is

926
00:34:36,800 --> 00:34:38,320
negligible in the number of uses of the

927
00:34:38,320 --> 00:34:39,918
channel

928
00:34:39,918 --> 00:34:42,480
against computationally bounded semi

929
00:34:42,480 --> 00:34:44,639
honest adversaries even

930
00:34:44,639 --> 00:34:46,480
furthermore

931
00:34:46,480 --> 00:34:48,239
against computational computationally

932
00:34:48,239 --> 00:34:50,480
unbounded semi-honest adversaries

933
00:34:50,480 --> 00:34:52,879
specifically in the case of bc and bse

934
00:34:52,879 --> 00:34:55,359
channels we cannot demand completeness

935
00:34:55,359 --> 00:34:57,520
even with arbitrarily small constant

936
00:34:57,520 --> 00:34:59,280
error

937
00:34:59,280 --> 00:35:01,280
this result is

938
00:35:01,280 --> 00:35:03,200
specific to a certain kind of protocol

939
00:35:03,200 --> 00:35:04,960
it's called perfectly correct with abort

940
00:35:04,960 --> 00:35:07,280
kind of protocol in which the receiver

941
00:35:07,280 --> 00:35:10,880
knows when they're making an error

942
00:35:11,119 --> 00:35:13,280
it turns out that proving completeness

943
00:35:13,280 --> 00:35:16,160
of bc and bse boils down to realizing

944
00:35:16,160 --> 00:35:19,680
string randomized oblivious transfer

945
00:35:19,680 --> 00:35:22,560
or string rot for short using string

946
00:35:22,560 --> 00:35:26,480
eraser channel or scc for short here rot

947
00:35:26,480 --> 00:35:28,960
is a sender receiver

948
00:35:28,960 --> 00:35:30,720
version of the

949
00:35:30,720 --> 00:35:32,640
ot functionality or the oblivious

950
00:35:32,640 --> 00:35:35,119
transfer functionality it takes a pair

951
00:35:35,119 --> 00:35:37,760
of strings as input from the sender and

952
00:35:37,760 --> 00:35:40,240
erases exactly one of them uniformly at

953
00:35:40,240 --> 00:35:44,320
random and passes it on to the receiver

954
00:35:44,320 --> 00:35:47,599
we focus on realizing rot using sec

955
00:35:47,599 --> 00:35:50,079
using the ideal obfuscation

956
00:35:50,079 --> 00:35:51,839
let me describe the model

957
00:35:51,839 --> 00:35:54,400
here in addition to sending the encoding

958
00:35:54,400 --> 00:35:57,119
of the input over the channel as we

959
00:35:57,119 --> 00:35:59,839
previously described the sender also

960
00:35:59,839 --> 00:36:02,240
sends an ideal obfuscation of a function

961
00:36:02,240 --> 00:36:03,920
f of its choice

962
00:36:03,920 --> 00:36:06,160
the receiver will now have oracle access

963
00:36:06,160 --> 00:36:08,000
to this function f

964
00:36:08,000 --> 00:36:10,480
uh to aid in the decoding

965
00:36:10,480 --> 00:36:12,480
of its output

966
00:36:12,480 --> 00:36:14,400
ideal obfuscation can be realized using

967
00:36:14,400 --> 00:36:17,440
stateless tamper-proof hardware

968
00:36:17,440 --> 00:36:20,240
so the main challenge in realizing rot

969
00:36:20,240 --> 00:36:22,320
isn't realizing its inherent

970
00:36:22,320 --> 00:36:24,000
anti-correlation

971
00:36:24,000 --> 00:36:26,720
when rot reveals the first string it

972
00:36:26,720 --> 00:36:29,839
erases the second string and vice versa

973
00:36:29,839 --> 00:36:32,000
such an anti-correlation is not inherent

974
00:36:32,000 --> 00:36:33,920
in a string eraser channel it simply

975
00:36:33,920 --> 00:36:37,280
erases or doesn't erase a single input

976
00:36:37,280 --> 00:36:38,720
string

977
00:36:38,720 --> 00:36:40,720
our construction uh

978
00:36:40,720 --> 00:36:43,200
realizes a notion of computational

979
00:36:43,200 --> 00:36:44,640
anti-correlation

980
00:36:44,640 --> 00:36:47,440
by exploiting the anti-concentration of

981
00:36:47,440 --> 00:36:49,599
the binomial distribution around its

982
00:36:49,599 --> 00:36:51,760
mean so let's uh

983
00:36:51,760 --> 00:36:54,720
briefly look at this

984
00:36:56,400 --> 00:36:59,040
in our protocol the sender sends n

985
00:36:59,040 --> 00:37:02,560
random randomly chosen symbols x1 to xn

986
00:37:02,560 --> 00:37:04,560
over the string erasure channel

987
00:37:04,560 --> 00:37:06,640
and then prepares the ideal obfuscation

988
00:37:06,640 --> 00:37:09,359
of a function f sub s comma x which is

989
00:37:09,359 --> 00:37:11,280
parameterized by x and s

990
00:37:11,280 --> 00:37:13,760
here s is a randomly chosen secret

991
00:37:13,760 --> 00:37:15,920
subset of 1 to n

992
00:37:15,920 --> 00:37:17,359
set 1 to n

993
00:37:17,359 --> 00:37:21,680
and s will be of size square root of n

994
00:37:21,680 --> 00:37:23,359
the receiver

995
00:37:23,359 --> 00:37:26,800
can query this f sub s comma x with the

996
00:37:26,800 --> 00:37:29,280
string vector y it received over the

997
00:37:29,280 --> 00:37:30,720
channel

998
00:37:30,720 --> 00:37:34,960
now f sub s comma x returns a 0 which is

999
00:37:34,960 --> 00:37:36,560
the first string that is

1000
00:37:36,560 --> 00:37:39,359
so the input to the rot is a0 comma a1

1001
00:37:39,359 --> 00:37:42,720
so if sub x returns a0 and erases a1 if

1002
00:37:42,720 --> 00:37:45,359
the majority of the indices in the set s

1003
00:37:45,359 --> 00:37:48,720
are erased in the query

1004
00:37:48,720 --> 00:37:52,720
and it returns a sub 1 uh when this is

1005
00:37:52,720 --> 00:37:54,400
not the case that is it's the opposite

1006
00:37:54,400 --> 00:37:56,320
use

1007
00:37:56,320 --> 00:37:58,640
this ensures that

1008
00:37:58,640 --> 00:38:00,560
the receiver receives a

1009
00:38:00,560 --> 00:38:03,040
proper output of an rot exactly one of

1010
00:38:03,040 --> 00:38:05,520
the bits one of the strings are going to

1011
00:38:05,520 --> 00:38:09,839
be erased and since uh the sender this

1012
00:38:09,839 --> 00:38:11,760
the

1013
00:38:11,760 --> 00:38:13,760
string that is going to be chosen to be

1014
00:38:13,760 --> 00:38:15,760
output is decided entirely by the string

1015
00:38:15,760 --> 00:38:17,760
eraser channel it is secure against the

1016
00:38:17,760 --> 00:38:19,920
sender also

1017
00:38:19,920 --> 00:38:23,760
but we need to ensure security against a

1018
00:38:23,760 --> 00:38:26,400
curious receiver who might

1019
00:38:26,400 --> 00:38:28,960
query the

1020
00:38:29,119 --> 00:38:31,920
function f sub s comma x several times

1021
00:38:31,920 --> 00:38:36,000
with the objective of uh on

1022
00:38:36,079 --> 00:38:40,079
objective of obtaining both a0 and a1

1023
00:38:40,079 --> 00:38:42,960
so in order to

1024
00:38:43,359 --> 00:38:46,560
prevent this the f sub s function

1025
00:38:46,560 --> 00:38:48,240
employs some checks

1026
00:38:48,240 --> 00:38:49,119
uh

1027
00:38:49,119 --> 00:38:50,880
that

1028
00:38:50,880 --> 00:38:53,599
exploit the anti-concentration

1029
00:38:53,599 --> 00:38:55,200
around the mean

1030
00:38:55,200 --> 00:38:57,440
property that binomial distribution

1031
00:38:57,440 --> 00:38:59,839
shows

1032
00:38:59,839 --> 00:39:02,799
i would uh

1033
00:39:02,960 --> 00:39:05,280
suggest that you take a look at this

1034
00:39:05,280 --> 00:39:08,480
paper to see more details on this

1035
00:39:08,480 --> 00:39:10,880
construction

1036
00:39:10,880 --> 00:39:13,280
so we leave two important open problems

1037
00:39:13,280 --> 00:39:15,359
one is that of instantiating the ideal

1038
00:39:15,359 --> 00:39:17,040
obfuscation that we provided in the

1039
00:39:17,040 --> 00:39:19,200
construction in the plane model

1040
00:39:19,200 --> 00:39:20,880
and the other one is in the ideal

1041
00:39:20,880 --> 00:39:22,720
obfuscation model itself where we would

1042
00:39:22,720 --> 00:39:25,200
like to extend our result to

1043
00:39:25,200 --> 00:39:27,599
malicious adversaries

1044
00:39:27,599 --> 00:39:31,040
that is all thank you

1045
00:39:32,000 --> 00:39:34,079
thank you so much varun

1046
00:39:34,079 --> 00:39:35,040
thank you

1047
00:39:35,040 --> 00:39:36,960
okay so let's start with the questions

1048
00:39:36,960 --> 00:39:39,040
in the meantime you can post more

1049
00:39:39,040 --> 00:39:41,359
questions if you have any

1050
00:39:41,359 --> 00:39:42,720
um

1051
00:39:42,720 --> 00:39:45,119
okay let's start with varun so there's a

1052
00:39:45,119 --> 00:39:46,960
question for you from

1053
00:39:46,960 --> 00:39:48,560
mike ruslik

1054
00:39:48,560 --> 00:39:49,359
so

1055
00:39:49,359 --> 00:39:49,620
um

1056
00:39:49,620 --> 00:39:50,880
[Music]

1057
00:39:50,880 --> 00:39:52,880
so it's about the definition of the

1058
00:39:52,880 --> 00:39:55,440
one-way security channel why does it not

1059
00:39:55,440 --> 00:39:57,520
work to ask the center to locally

1060
00:39:57,520 --> 00:39:59,200
compute f of a

1061
00:39:59,200 --> 00:40:01,119
and then import the result other a

1062
00:40:01,119 --> 00:40:03,359
narrow correction code for the channel

1063
00:40:03,359 --> 00:40:06,400
so uh you so security against the sender

1064
00:40:06,400 --> 00:40:08,480
requires that the sender only learns

1065
00:40:08,480 --> 00:40:09,920
that the receiver's output is

1066
00:40:09,920 --> 00:40:12,480
distributed according to ffa

1067
00:40:12,480 --> 00:40:14,400
but if the sender is to compute the

1068
00:40:14,400 --> 00:40:17,119
function and communicate it over to the

1069
00:40:17,119 --> 00:40:19,520
receiver then the distribution is a

1070
00:40:19,520 --> 00:40:21,359
point distribution on exactly what the

1071
00:40:21,359 --> 00:40:23,760
sender has computed which breaks the

1072
00:40:23,760 --> 00:40:27,040
security against the sender

1073
00:40:27,280 --> 00:40:29,760
awesome

1074
00:40:29,760 --> 00:40:32,720
okay thank you

1075
00:40:33,599 --> 00:40:35,599
so then let's go to

1076
00:40:35,599 --> 00:40:36,880
um

1077
00:40:36,880 --> 00:40:39,839
fluid mpc

1078
00:40:40,240 --> 00:40:42,100
so a question for arushi

1079
00:40:42,100 --> 00:40:43,200
[Music]

1080
00:40:43,200 --> 00:40:45,119
uh what do the epochs denote if the

1081
00:40:45,119 --> 00:40:47,359
network is a synchronous so it's about

1082
00:40:47,359 --> 00:40:48,720
like whether

1083
00:40:48,720 --> 00:40:51,119
a synchronous or a synchronous network

1084
00:40:51,119 --> 00:40:53,280
yeah so in our in our model we only

1085
00:40:53,280 --> 00:40:56,720
consider synchronous channels

1086
00:40:56,720 --> 00:40:58,160
okay so you're only synchronous

1087
00:40:58,160 --> 00:40:59,599
everybody's sending in a sense in the

1088
00:40:59,599 --> 00:41:01,839
same room yes

1089
00:41:01,839 --> 00:41:04,160
okay i also have a very quick question

1090
00:41:04,160 --> 00:41:07,280
so in every round the parties are like

1091
00:41:07,280 --> 00:41:09,520
fixed beforehand so we know which

1092
00:41:09,520 --> 00:41:12,079
parties are going to be online in that

1093
00:41:12,079 --> 00:41:13,200
round

1094
00:41:13,200 --> 00:41:16,000
uh no so for example if you're computing

1095
00:41:16,000 --> 00:41:18,160
say the second round at the time of

1096
00:41:18,160 --> 00:41:19,440
handoff so when you're done with the

1097
00:41:19,440 --> 00:41:21,200
second round and it's it's time to sort

1098
00:41:21,200 --> 00:41:23,119
of hand off information to the next

1099
00:41:23,119 --> 00:41:25,200
committee that's that's when you want to

1100
00:41:25,200 --> 00:41:27,599
know uh what the next committee so what

1101
00:41:27,599 --> 00:41:29,520
the parties for the third round are so

1102
00:41:29,520 --> 00:41:31,200
in the first round for example you don't

1103
00:41:31,200 --> 00:41:33,599
need to know in advance who the parties

1104
00:41:33,599 --> 00:41:35,280
are going to be in the future rounds

1105
00:41:35,280 --> 00:41:36,880
it's only when they're going to become

1106
00:41:36,880 --> 00:41:38,800
active do you need to know the identity

1107
00:41:38,800 --> 00:41:41,760
so you can communicate with them

1108
00:41:41,760 --> 00:41:43,440
so you don't need to know the parties in

1109
00:41:43,440 --> 00:41:45,200
advance it's only when they're about to

1110
00:41:45,200 --> 00:41:47,440
speak that you need to

1111
00:41:47,440 --> 00:41:49,599
know are actually not not about to speak

1112
00:41:49,599 --> 00:41:51,119
sorry before they have to receive

1113
00:41:51,119 --> 00:41:52,800
messages that you need to know their

1114
00:41:52,800 --> 00:41:54,960
identities

1115
00:41:54,960 --> 00:41:56,560
so you need to know in that round what's

1116
00:41:56,560 --> 00:41:58,800
the committee that needs to receive

1117
00:41:58,800 --> 00:42:00,560
the message before before the start of

1118
00:42:00,560 --> 00:42:03,760
that round not anytime

1119
00:42:03,760 --> 00:42:06,160
okay thank you it's a similar question

1120
00:42:06,160 --> 00:42:09,200
for sophia i think

1121
00:42:09,200 --> 00:42:12,000
um what is it

1122
00:42:12,000 --> 00:42:13,160
yes

1123
00:42:13,160 --> 00:42:16,640
sofia um

1124
00:42:16,640 --> 00:42:19,440
if there's some notion of synchrony

1125
00:42:19,440 --> 00:42:21,359
like the parties and committee will send

1126
00:42:21,359 --> 00:42:22,880
their messages in the same route or

1127
00:42:22,880 --> 00:42:23,839
something like that yeah you have the

1128
00:42:23,839 --> 00:42:26,720
same question yeah yeah yeah so we're

1129
00:42:26,720 --> 00:42:27,680
also

1130
00:42:27,680 --> 00:42:28,839
totally

1131
00:42:28,839 --> 00:42:30,560
synchronous

1132
00:42:30,560 --> 00:42:32,079
but there's a lot of space for follow-up

1133
00:42:32,079 --> 00:42:33,040
work

1134
00:42:33,040 --> 00:42:36,000
in the asynchronous world

1135
00:42:36,000 --> 00:42:37,520
right

1136
00:42:37,520 --> 00:42:39,480
and as we're at sofia

1137
00:42:39,480 --> 00:42:41,760
[Music]

1138
00:42:41,760 --> 00:42:43,680
there's another question

1139
00:42:43,680 --> 00:42:45,440
does the setting of perfect security

1140
00:42:45,440 --> 00:42:47,520
have any importance to efficiency in the

1141
00:42:47,520 --> 00:42:50,240
eos model as in the standard model is

1142
00:42:50,240 --> 00:42:51,920
there any possibility of achieving an

1143
00:42:51,920 --> 00:42:54,880
unconditional secure role assignment

1144
00:42:54,880 --> 00:42:57,119
and that does that have any practical

1145
00:42:57,119 --> 00:42:59,760
implications

1146
00:42:59,760 --> 00:43:03,359
uh so i don't think that um

1147
00:43:03,359 --> 00:43:04,480
that it's possible to get

1148
00:43:04,480 --> 00:43:06,240
unconditionally secure role assignment

1149
00:43:06,240 --> 00:43:08,160
at least not with total communication

1150
00:43:08,160 --> 00:43:09,599
complexity

1151
00:43:09,599 --> 00:43:12,319
uh sublinear in n because that together

1152
00:43:12,319 --> 00:43:13,359
with our information theoretical

1153
00:43:13,359 --> 00:43:15,280
protocol would contradict a known

1154
00:43:15,280 --> 00:43:17,200
negative result and here i'm really

1155
00:43:17,200 --> 00:43:18,560
embarrassed i don't remember who to cite

1156
00:43:18,560 --> 00:43:20,960
for this but maybe one of my co-authors

1157
00:43:20,960 --> 00:43:23,599
can chime in

1158
00:43:25,200 --> 00:43:28,000
i don't remember all the names but that

1159
00:43:28,000 --> 00:43:33,119
guy is one of them okay fantastic

1160
00:43:33,200 --> 00:43:34,560
um

1161
00:43:34,560 --> 00:43:35,920
sorry and there was another part to this

1162
00:43:35,920 --> 00:43:40,040
question which i already forgot

1163
00:43:40,480 --> 00:43:42,240
yeah does this the setting of perfect

1164
00:43:42,240 --> 00:43:44,480
security have an important deficiency in

1165
00:43:44,480 --> 00:43:47,760
the us model as in the standard model

1166
00:43:47,760 --> 00:43:50,079
actually

1167
00:43:50,079 --> 00:43:53,440
does it have light on efficiency

1168
00:43:59,200 --> 00:44:00,640
so i'm not sure any kind of question but

1169
00:44:00,640 --> 00:44:02,960
maybe i'll take a look at it on zulu

1170
00:44:02,960 --> 00:44:06,880
yeah i'm also not sure what that means

1171
00:44:06,880 --> 00:44:08,640
as instead of model as in what yeah i'm

1172
00:44:08,640 --> 00:44:09,680
not sure

1173
00:44:09,680 --> 00:44:11,760
so the person who asked the question can

1174
00:44:11,760 --> 00:44:14,319
clarify

1175
00:44:15,440 --> 00:44:18,480
and uh since we're at sofia i'll have a

1176
00:44:18,480 --> 00:44:20,640
quick question so the part is that

1177
00:44:20,640 --> 00:44:22,960
they only speak once do we know that the

1178
00:44:22,960 --> 00:44:24,079
ones that they are not speaking that

1179
00:44:24,079 --> 00:44:26,319
they went offline do we know that for

1180
00:44:26,319 --> 00:44:28,160
example sophia

1181
00:44:28,160 --> 00:44:30,000
is offline

1182
00:44:30,000 --> 00:44:31,280
in the protocol

1183
00:44:31,280 --> 00:44:32,079
um

1184
00:44:32,079 --> 00:44:32,880
so

1185
00:44:32,880 --> 00:44:34,800
that's an interesting question

1186
00:44:34,800 --> 00:44:38,160
so we assume we have a pool of parties

1187
00:44:38,160 --> 00:44:40,640
uh that are known to be offline online

1188
00:44:40,640 --> 00:44:43,520
and uh willing to participate if uh

1189
00:44:43,520 --> 00:44:46,000
they're chosen to be in a committee

1190
00:44:46,000 --> 00:44:47,680
and uh it's an interesting parameter

1191
00:44:47,680 --> 00:44:49,119
like how much

1192
00:44:49,119 --> 00:44:51,520
fluidity as per fluid mpc

1193
00:44:51,520 --> 00:44:53,760
we can tolerate this has to do with like

1194
00:44:53,760 --> 00:44:55,280
how many committees

1195
00:44:55,280 --> 00:44:58,319
ahead we need to talk to

1196
00:44:58,319 --> 00:44:59,839
um

1197
00:44:59,839 --> 00:45:00,880
but

1198
00:45:00,880 --> 00:45:02,319
we're assuming that if i'm chosen to be

1199
00:45:02,319 --> 00:45:05,839
on a committee i'm going to be online

1200
00:45:06,160 --> 00:45:08,720
right thank you

1201
00:45:08,720 --> 00:45:12,560
so let me see the other questions

1202
00:45:12,560 --> 00:45:14,720
maybe i can just give one one follow-up

1203
00:45:14,720 --> 00:45:17,599
question there due to what sofia said

1204
00:45:17,599 --> 00:45:20,319
so i mean i think the

1205
00:45:20,319 --> 00:45:22,640
the protocol in the fluid paper

1206
00:45:22,640 --> 00:45:24,400
they have actually a protocol where they

1207
00:45:24,400 --> 00:45:27,440
only talk to the next committee

1208
00:45:27,440 --> 00:45:29,760
in our protocol with active security the

1209
00:45:29,760 --> 00:45:31,200
information theoretical onward active

1210
00:45:31,200 --> 00:45:33,440
security we do need to talk to

1211
00:45:33,440 --> 00:45:36,160
committees that's you know ahead further

1212
00:45:36,160 --> 00:45:38,400
ahead

1213
00:45:38,400 --> 00:45:40,240
and it looks like an inherent problem

1214
00:45:40,240 --> 00:45:42,000
but we didn't manage to prove a lower

1215
00:45:42,000 --> 00:45:44,560
bound there so if anyone can can prove a

1216
00:45:44,560 --> 00:45:46,000
lower bound that you cannot get active

1217
00:45:46,000 --> 00:45:48,079
security without actually talking more

1218
00:45:48,079 --> 00:45:49,680
than one round into the future that

1219
00:45:49,680 --> 00:45:51,920
would be nice because just to give some

1220
00:45:51,920 --> 00:45:54,319
give people something to do tonight

1221
00:45:54,319 --> 00:45:55,200
thanks

1222
00:45:55,200 --> 00:45:57,759
interesting

1223
00:45:59,119 --> 00:46:01,200
and just because you just uh mentioned

1224
00:46:01,200 --> 00:46:03,920
this now um so the main difference

1225
00:46:03,920 --> 00:46:06,400
between the fluid uh npc and the yo so

1226
00:46:06,400 --> 00:46:08,000
can you just like

1227
00:46:08,000 --> 00:46:10,480
uh can one of you like say what's the

1228
00:46:10,480 --> 00:46:12,400
biggest main difference

1229
00:46:12,400 --> 00:46:15,839
so that we are like clear

1230
00:46:16,160 --> 00:46:18,400
or they are not incomparable

1231
00:46:18,400 --> 00:46:20,480
well so in terms of model

1232
00:46:20,480 --> 00:46:22,319
uh an interesting difference is that the

1233
00:46:22,319 --> 00:46:26,079
fluid uh world as i understand it relies

1234
00:46:26,079 --> 00:46:28,240
on

1235
00:46:28,240 --> 00:46:29,920
parties volunteering their computational

1236
00:46:29,920 --> 00:46:31,760
powers so we're not worried about hiding

1237
00:46:31,760 --> 00:46:33,440
who they are

1238
00:46:33,440 --> 00:46:35,599
um

1239
00:46:35,599 --> 00:46:38,000
so anyone can volunteer and also the

1240
00:46:38,000 --> 00:46:39,920
fluid construction please correct me if

1241
00:46:39,920 --> 00:46:41,040
i'm wrong

1242
00:46:41,040 --> 00:46:43,760
gets us security with abort

1243
00:46:43,760 --> 00:46:45,760
and in the

1244
00:46:45,760 --> 00:46:48,240
in our motivation we sort of really care

1245
00:46:48,240 --> 00:46:49,119
about

1246
00:46:49,119 --> 00:46:50,960
um

1247
00:46:50,960 --> 00:46:54,079
getting guaranteed output delivery

1248
00:46:54,079 --> 00:46:57,119
yeah and also the other thing is that uh

1249
00:46:57,119 --> 00:46:59,119
i think one of the differences again as

1250
00:46:59,119 --> 00:47:01,440
i understand here so is that in the

1251
00:47:01,440 --> 00:47:03,440
fluid setting we really care about like

1252
00:47:03,440 --> 00:47:05,440
this division of work

1253
00:47:05,440 --> 00:47:07,920
um and for like the party is doing

1254
00:47:07,920 --> 00:47:10,160
really like a small amount of work so

1255
00:47:10,160 --> 00:47:12,480
they don't really have to stay online

1256
00:47:12,480 --> 00:47:13,760
and it doesn't matter how many

1257
00:47:13,760 --> 00:47:15,839
computational resources they have it's

1258
00:47:15,839 --> 00:47:17,760
just depending on whatever resources

1259
00:47:17,760 --> 00:47:19,599
they have they can join for whatever

1260
00:47:19,599 --> 00:47:21,520
time they can and

1261
00:47:21,520 --> 00:47:24,559
that's it

1262
00:47:24,559 --> 00:47:26,720
and uh yeah and the other thing that of

1263
00:47:26,720 --> 00:47:28,640
course yes for mention that we really

1264
00:47:28,640 --> 00:47:30,400
only want parties to talk to just the

1265
00:47:30,400 --> 00:47:32,400
next committee and we don't want the

1266
00:47:32,400 --> 00:47:34,640
parties to stay online when they are not

1267
00:47:34,640 --> 00:47:36,640
sort of actively participating so they

1268
00:47:36,640 --> 00:47:38,559
can just completely drop out so we don't

1269
00:47:38,559 --> 00:47:40,720
want to sort of we don't want parties to

1270
00:47:40,720 --> 00:47:43,440
send messages to the to anybody in the

1271
00:47:43,440 --> 00:47:46,800
future in some sense

1272
00:47:48,000 --> 00:47:50,319
i see

1273
00:47:50,319 --> 00:47:52,559
so we have a question from england you

1274
00:47:52,559 --> 00:47:55,440
can uh unmute yourself and us right yeah

1275
00:47:55,440 --> 00:47:57,119
i guess it's just following your

1276
00:47:57,119 --> 00:47:58,880
question so i wonder how the model

1277
00:47:58,880 --> 00:48:00,559
compares with the

1278
00:48:00,559 --> 00:48:01,520
dog

1279
00:48:01,520 --> 00:48:03,240
in crypto

1280
00:48:03,240 --> 00:48:06,000
2019 there it's also like a dropout

1281
00:48:06,000 --> 00:48:08,720
model where there can be high churn and

1282
00:48:08,720 --> 00:48:10,240
players can only be there for just a

1283
00:48:10,240 --> 00:48:12,640
single round

1284
00:48:12,640 --> 00:48:14,720
uh in my understanding that model is

1285
00:48:14,720 --> 00:48:16,720
very similar to ours it's just i think

1286
00:48:16,720 --> 00:48:19,760
they only considered secret sharing

1287
00:48:19,760 --> 00:48:21,760
and i mean our goal was slightly broader

1288
00:48:21,760 --> 00:48:24,000
and we consider that no there's mpc

1289
00:48:24,000 --> 00:48:26,720
result in that paper too

1290
00:48:26,720 --> 00:48:29,119
i i thought you you mentioned the goal

1291
00:48:29,119 --> 00:48:30,400
at all work

1292
00:48:30,400 --> 00:48:33,520
no the the goal passed on

1293
00:48:33,520 --> 00:48:36,160
oh uh i'm sorry i'm not familiar with

1294
00:48:36,160 --> 00:48:38,480
that result but i can take a look at it

1295
00:48:38,480 --> 00:48:41,599
and get back to you

1296
00:48:47,760 --> 00:48:50,000
okay let's check there my questions

1297
00:48:50,000 --> 00:48:52,319
unfortunately we're very close

1298
00:48:52,319 --> 00:48:55,280
to the time let's see um give me a

1299
00:48:55,280 --> 00:48:57,599
second or if somebody else has a

1300
00:48:57,599 --> 00:49:00,160
question you can raise your hand

1301
00:49:00,160 --> 00:49:03,160
um

1302
00:49:04,720 --> 00:49:06,319
so i think there's another question that

1303
00:49:06,319 --> 00:49:08,000
the dnc for

1304
00:49:08,000 --> 00:49:09,839
arushi

1305
00:49:09,839 --> 00:49:12,000
to have a single unidirectional set of

1306
00:49:12,000 --> 00:49:13,599
messages it sounds like the new

1307
00:49:13,599 --> 00:49:17,200
committee must be known ahead of time

1308
00:49:17,200 --> 00:49:18,880
actually maybe this is maybe we answer

1309
00:49:18,880 --> 00:49:21,359
this so if there's an election happening

1310
00:49:21,359 --> 00:49:23,920
that uncomplexity will have to be a bit

1311
00:49:23,920 --> 00:49:25,680
more or maybe i'm not understanding the

1312
00:49:25,680 --> 00:49:28,160
model no that's that's true so actually

1313
00:49:28,160 --> 00:49:30,160
in our in our protocol like when we talk

1314
00:49:30,160 --> 00:49:32,400
about like fluidity we are really only

1315
00:49:32,400 --> 00:49:35,040
talking about the protocol execution and

1316
00:49:35,040 --> 00:49:36,880
like the committee election or how these

1317
00:49:36,880 --> 00:49:40,000
parties are chosen is kept uh aside from

1318
00:49:40,000 --> 00:49:42,079
the protocol so it's true that if i mean

1319
00:49:42,079 --> 00:49:44,160
we can use plug-in sort of any existing

1320
00:49:44,160 --> 00:49:46,400
for example committee election uh

1321
00:49:46,400 --> 00:49:49,040
protocol and that happens sort of uh on

1322
00:49:49,040 --> 00:49:50,079
the side

1323
00:49:50,079 --> 00:49:52,559
uh and when when i say that you're only

1324
00:49:52,559 --> 00:49:55,280
sending one message from a given

1325
00:49:55,280 --> 00:49:57,119
committee to another committee it's true

1326
00:49:57,119 --> 00:49:59,040
that we are assuming that the election

1327
00:49:59,040 --> 00:50:00,960
has already taken place and that the

1328
00:50:00,960 --> 00:50:03,440
identity of this par this committee that

1329
00:50:03,440 --> 00:50:07,359
we are uh talking to is already known

1330
00:50:07,359 --> 00:50:08,319
so you can

1331
00:50:08,319 --> 00:50:10,400
choose any uh protocol election protocol

1332
00:50:10,400 --> 00:50:12,079
you don't give a new one any kind of

1333
00:50:12,079 --> 00:50:14,160
work yeah yeah we we keep that yeah

1334
00:50:14,160 --> 00:50:17,280
agnostic to our protocol yes

1335
00:50:17,280 --> 00:50:18,960
great

1336
00:50:18,960 --> 00:50:21,280
um

1337
00:50:21,680 --> 00:50:24,240
i can add one one last difference maybe

1338
00:50:24,240 --> 00:50:25,920
okay first of all i think it it's it's a

1339
00:50:25,920 --> 00:50:27,920
good takeaway from both the fluid paper

1340
00:50:27,920 --> 00:50:29,520
and our paper that

1341
00:50:29,520 --> 00:50:32,000
it really makes sense to separate role

1342
00:50:32,000 --> 00:50:34,400
assignment and then role execution right

1343
00:50:34,400 --> 00:50:36,240
i mean that there's been some early

1344
00:50:36,240 --> 00:50:38,240
papers where where things are described

1345
00:50:38,240 --> 00:50:40,480
monolithic but it doesn't really matter

1346
00:50:40,480 --> 00:50:42,400
i mean most role assignment mechanisms

1347
00:50:42,400 --> 00:50:45,520
will run nicely under any role execution

1348
00:50:45,520 --> 00:50:47,520
mechanism and it gives clarity to do it

1349
00:50:47,520 --> 00:50:48,960
abstractly

1350
00:50:48,960 --> 00:50:51,200
and another thing is we give a

1351
00:50:51,200 --> 00:50:53,599
in the yosho paper we give a composable

1352
00:50:53,599 --> 00:50:55,680
model for breaking protocols down

1353
00:50:55,680 --> 00:50:57,440
accident

1354
00:50:57,440 --> 00:50:59,839
and analyzing the wrong execution

1355
00:50:59,839 --> 00:51:02,079
mechanisms and it turns out to not be

1356
00:51:02,079 --> 00:51:03,920
completely trivial because

1357
00:51:03,920 --> 00:51:05,440
if you have the secret role in the

1358
00:51:05,440 --> 00:51:06,960
future you have someone that already

1359
00:51:06,960 --> 00:51:08,800
know that they won the role if you take

1360
00:51:08,800 --> 00:51:10,319
part of that party and put into the

1361
00:51:10,319 --> 00:51:12,559
environment the environment learns the

1362
00:51:12,559 --> 00:51:14,319
party won the role in the future and can

1363
00:51:14,319 --> 00:51:15,839
corrupt it

1364
00:51:15,839 --> 00:51:17,680
so you have to go jump through a couple

1365
00:51:17,680 --> 00:51:19,200
of loops to make

1366
00:51:19,200 --> 00:51:22,960
a compositional analysis of yoshi's type

1367
00:51:22,960 --> 00:51:24,800
protocols work nicely

1368
00:51:24,800 --> 00:51:26,880
so if someone needs a model for that at

1369
00:51:26,880 --> 00:51:28,160
some point

1370
00:51:28,160 --> 00:51:30,879
you know where to look

1371
00:51:31,760 --> 00:51:33,359
yeah and also remind me it's also

1372
00:51:33,359 --> 00:51:35,520
adaptively secure

1373
00:51:35,520 --> 00:51:38,480
right so if you have some secret role

1374
00:51:38,480 --> 00:51:40,400
i will not know that actually that's not

1375
00:51:40,400 --> 00:51:42,000
exactly a double security but if

1376
00:51:42,000 --> 00:51:43,760
somebody has secret role nobody knows

1377
00:51:43,760 --> 00:51:45,040
but

1378
00:51:45,040 --> 00:51:46,960
if you want to get adaptive security i

1379
00:51:46,960 --> 00:51:48,240
guess you still don't know what's the

1380
00:51:48,240 --> 00:51:51,839
role right until the round comes so

1381
00:51:51,839 --> 00:51:53,839
shouldn't it cover it or i'm missing

1382
00:51:53,839 --> 00:51:56,240
something with the usual caveat that you

1383
00:51:56,240 --> 00:51:58,240
know like in if you plug in a

1384
00:51:58,240 --> 00:51:59,680
computational

1385
00:51:59,680 --> 00:52:00,720
role

1386
00:52:00,720 --> 00:52:02,480
assignment mechanism you get all the

1387
00:52:02,480 --> 00:52:05,359
commitments problems of of uh adaptive

1388
00:52:05,359 --> 00:52:07,680
security as usual but i mean the

1389
00:52:07,680 --> 00:52:09,520
information theoretic protocol in itself

1390
00:52:09,520 --> 00:52:11,440
is adaptive secure if you choose to not

1391
00:52:11,440 --> 00:52:13,760
plug in a concrete way to to assign the

1392
00:52:13,760 --> 00:52:15,760
roles and when you do you run into all

1393
00:52:15,760 --> 00:52:17,359
the usual problems we're not committing

1394
00:52:17,359 --> 00:52:20,480
encryption and blah blah blah

1395
00:52:23,119 --> 00:52:24,800
very nice

1396
00:52:24,800 --> 00:52:27,040
i think we actually run out of time let

1397
00:52:27,040 --> 00:52:28,720
me see if there's anything else that we

1398
00:52:28,720 --> 00:52:29,520
can

1399
00:52:29,520 --> 00:52:33,000
answer quickly

1400
00:52:33,839 --> 00:52:35,040
yeah i think

1401
00:52:35,040 --> 00:52:37,280
we are almost done

1402
00:52:37,280 --> 00:52:39,040
so thank you so much thanks all the

1403
00:52:39,040 --> 00:52:40,720
speakers of the sessions if you have

1404
00:52:40,720 --> 00:52:42,960
more questions for the authors please

1405
00:52:42,960 --> 00:52:46,480
post them on zulip or you can also

