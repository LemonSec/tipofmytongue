1
00:00:04,000 --> 00:00:05,759
hi everyone thank you for joining this

2
00:00:05,759 --> 00:00:06,960
presentation

3
00:00:06,960 --> 00:00:08,639
this presentation is on secure

4
00:00:08,639 --> 00:00:10,880
computation from one-way noisy

5
00:00:10,880 --> 00:00:12,320
communication

6
00:00:12,320 --> 00:00:14,639
our main construction suggests a rather

7
00:00:14,639 --> 00:00:16,079
interesting way of realizing

8
00:00:16,079 --> 00:00:18,160
anti-correlation between a pair of

9
00:00:18,160 --> 00:00:20,960
events using anti-concentration inherent

10
00:00:20,960 --> 00:00:23,039
to binomial distribution

11
00:00:23,039 --> 00:00:25,680
this is a joint work with sweta agrawal

12
00:00:25,680 --> 00:00:28,640
uvalishai al-kushilevits

13
00:00:28,640 --> 00:00:31,199
prabhagaran

14
00:00:32,558 --> 00:00:35,040
my name is

15
00:00:35,600 --> 00:00:38,079
first let me quickly describe a channel

16
00:00:38,079 --> 00:00:41,360
a channel is a mathematical model of a

17
00:00:41,360 --> 00:00:44,079
noisy memoryless communication link it

18
00:00:44,079 --> 00:00:45,840
has a finite set of input and output

19
00:00:45,840 --> 00:00:48,399
symbols and a single use of the channel

20
00:00:48,399 --> 00:00:50,719
can be described as follows when the

21
00:00:50,719 --> 00:00:52,800
input is x the channel outputs the

22
00:00:52,800 --> 00:00:56,559
symbol y with probability p of y given x

23
00:00:56,559 --> 00:00:58,399
binary erasure channel and binary

24
00:00:58,399 --> 00:01:00,239
symmetric channel are two channels that

25
00:01:00,239 --> 00:01:02,160
are studied extensively in cryptography

26
00:01:02,160 --> 00:01:03,920
and information theory

27
00:01:03,920 --> 00:01:06,400
a binary erasure channel or bec for

28
00:01:06,400 --> 00:01:08,880
short takes a single bit as input and

29
00:01:08,880 --> 00:01:11,360
erases it with probability say b

30
00:01:11,360 --> 00:01:14,880
and otherwise lets it pass unchanged

31
00:01:14,880 --> 00:01:17,840
a binary symmetric channel or bsc for

32
00:01:17,840 --> 00:01:18,799
short

33
00:01:18,799 --> 00:01:21,439
takes a bit and flips it with

34
00:01:21,439 --> 00:01:24,159
some probability say p and lets it pass

35
00:01:24,159 --> 00:01:26,560
unchanged otherwise

36
00:01:26,560 --> 00:01:28,320
these channels approximate several

37
00:01:28,320 --> 00:01:31,040
natural processes

38
00:01:31,040 --> 00:01:33,040
and they are the main channels of

39
00:01:33,040 --> 00:01:35,040
interest in our study

40
00:01:35,040 --> 00:01:36,640
we studied the secure computing

41
00:01:36,640 --> 00:01:38,400
capabilities of these channels when

42
00:01:38,400 --> 00:01:42,159
communication is only in one direction

43
00:01:42,320 --> 00:01:44,479
it is known that when alice and bob are

44
00:01:44,479 --> 00:01:46,960
talking over a noiseless communication

45
00:01:46,960 --> 00:01:48,000
link

46
00:01:48,000 --> 00:01:50,079
with the exception of a small class of

47
00:01:50,079 --> 00:01:52,000
functions secure computation of most

48
00:01:52,000 --> 00:01:54,240
functions is impossible against

49
00:01:54,240 --> 00:01:56,399
computationally unbounded semi honest

50
00:01:56,399 --> 00:01:58,960
adversaries

51
00:01:58,960 --> 00:02:01,360
however when they additionally use a

52
00:02:01,360 --> 00:02:04,159
noisy channel as a resource they can

53
00:02:04,159 --> 00:02:05,840
indeed compute any function with

54
00:02:05,840 --> 00:02:08,639
statistical security against even a

55
00:02:08,639 --> 00:02:10,878
computationally unbounded malicious

56
00:02:10,878 --> 00:02:12,560
adversary

57
00:02:12,560 --> 00:02:14,160
this is

58
00:02:14,160 --> 00:02:17,040
this is to say that any channel with a

59
00:02:17,040 --> 00:02:19,680
non-trivial noise profile is complete

60
00:02:19,680 --> 00:02:20,840
for secure

61
00:02:20,840 --> 00:02:24,000
computation in this work we look at a

62
00:02:24,000 --> 00:02:26,800
constrained version of this model where

63
00:02:26,800 --> 00:02:28,959
there is no interaction that is the

64
00:02:28,959 --> 00:02:31,360
communication is restricted to

65
00:02:31,360 --> 00:02:34,000
be one directional

66
00:02:34,000 --> 00:02:36,319
along the provided noisy channel this

67
00:02:36,319 --> 00:02:38,080
model is called one-way secure

68
00:02:38,080 --> 00:02:41,120
computation or owsc for short and it was

69
00:02:41,120 --> 00:02:44,000
introduced by gergetta in their 2015

70
00:02:44,000 --> 00:02:45,840
paper

71
00:02:45,840 --> 00:02:47,760
due to the one directionality we can

72
00:02:47,760 --> 00:02:49,920
only expect to compute sender receiver

73
00:02:49,920 --> 00:02:52,080
functionalities

74
00:02:52,080 --> 00:02:54,400
which are functionalities that take an

75
00:02:54,400 --> 00:02:57,040
input a from the sender and provides an

76
00:02:57,040 --> 00:02:59,760
output f of a to the receiver

77
00:02:59,760 --> 00:03:01,760
further in the semi on a setting this

78
00:03:01,760 --> 00:03:03,680
problem is interesting only if f is

79
00:03:03,680 --> 00:03:06,480
randomized because otherwise that is if

80
00:03:06,480 --> 00:03:08,080
f is deterministic

81
00:03:08,080 --> 00:03:10,080
it is secure for the sender to simply

82
00:03:10,080 --> 00:03:12,080
compute f of a and send it over to the

83
00:03:12,080 --> 00:03:13,440
receiver

84
00:03:13,440 --> 00:03:15,280
going forward our focus would be mostly

85
00:03:15,280 --> 00:03:19,360
on owsc in the seminar setting

86
00:03:19,360 --> 00:03:20,879
a randomized sender receiver

87
00:03:20,879 --> 00:03:22,640
functionality can itself be thought of

88
00:03:22,640 --> 00:03:23,840
as a channel

89
00:03:23,840 --> 00:03:24,640
and

90
00:03:24,640 --> 00:03:27,280
then owsc can be thought of as a way of

91
00:03:27,280 --> 00:03:29,680
securely implementing a desired channel

92
00:03:29,680 --> 00:03:32,959
using the channel at hand

93
00:03:32,959 --> 00:03:35,280
because of its simple structure the

94
00:03:35,280 --> 00:03:36,799
protocol for

95
00:03:36,799 --> 00:03:40,319
one-way secure computation is

96
00:03:40,319 --> 00:03:41,599
simple

97
00:03:41,599 --> 00:03:43,760
the sender encodes

98
00:03:43,760 --> 00:03:47,120
the input say a using an encoder n and

99
00:03:47,120 --> 00:03:49,200
sends it to the receiver possibly making

100
00:03:49,200 --> 00:03:51,120
multiple uses of the channel

101
00:03:51,120 --> 00:03:53,120
the receiver decodes the output of the

102
00:03:53,120 --> 00:03:56,159
channel using a decoder deck to compute

103
00:03:56,159 --> 00:03:58,000
the potential output

104
00:03:58,000 --> 00:03:59,760
correctness of the protocol requires

105
00:03:59,760 --> 00:04:01,840
that the receiver's output is

106
00:04:01,840 --> 00:04:03,120
distributed according to the

107
00:04:03,120 --> 00:04:05,280
distribution f of a

108
00:04:05,280 --> 00:04:07,280
security against the receiver requires

109
00:04:07,280 --> 00:04:09,760
that the receiver only learns f of a

110
00:04:09,760 --> 00:04:11,599
this specifically means that the sender

111
00:04:11,599 --> 00:04:13,439
cannot simply send

112
00:04:13,439 --> 00:04:15,760
her input a to the receiver

113
00:04:15,760 --> 00:04:17,600
using an error correcting code for

114
00:04:17,600 --> 00:04:19,120
example

115
00:04:19,120 --> 00:04:21,040
the security against the sender requires

116
00:04:21,040 --> 00:04:22,720
that the sender only learns that the

117
00:04:22,720 --> 00:04:24,560
receiver's output is distributed

118
00:04:24,560 --> 00:04:27,120
according to ffa hence specifically the

119
00:04:27,120 --> 00:04:29,840
sender cannot simply sample f of a by

120
00:04:29,840 --> 00:04:32,400
herself and send it to the receiver

121
00:04:32,400 --> 00:04:35,040
using an error correcting code

122
00:04:35,040 --> 00:04:37,440
formally in the semi on a setting

123
00:04:37,440 --> 00:04:40,160
we need the joint distribution of the

124
00:04:40,160 --> 00:04:42,240
senders encoding and the receiver's

125
00:04:42,240 --> 00:04:44,560
output to be upside and close to the

126
00:04:44,560 --> 00:04:46,000
joint distribution of the sender's

127
00:04:46,000 --> 00:04:47,919
encoding and the output of the

128
00:04:47,919 --> 00:04:50,000
functionality in total variation

129
00:04:50,000 --> 00:04:50,960
distance

130
00:04:50,960 --> 00:04:52,320
this is the condition for the

131
00:04:52,320 --> 00:04:54,800
correctness of the protocol and

132
00:04:54,800 --> 00:04:57,120
for the security against semi on

133
00:04:57,120 --> 00:05:00,160
ascender with epsilon error

134
00:05:00,160 --> 00:05:02,160
security against the receiver requires

135
00:05:02,160 --> 00:05:03,600
that the channel's output can be

136
00:05:03,600 --> 00:05:06,080
simulated using only receiver's output

137
00:05:06,080 --> 00:05:08,560
that is ffa

138
00:05:08,560 --> 00:05:10,240
in the malicious setting the condition

139
00:05:10,240 --> 00:05:11,759
for security against the receiver

140
00:05:11,759 --> 00:05:13,039
remains the same

141
00:05:13,039 --> 00:05:15,280
as they are inert in the protocol

142
00:05:15,280 --> 00:05:16,720
however the security against the

143
00:05:16,720 --> 00:05:18,400
malicious sender requires that the

144
00:05:18,400 --> 00:05:21,600
receiver's output is consistent with

145
00:05:21,600 --> 00:05:24,880
a valid input to the functionality even

146
00:05:24,880 --> 00:05:28,639
if the sender is sending an illegitimate

147
00:05:28,639 --> 00:05:30,479
uh

148
00:05:30,479 --> 00:05:31,919
encoding

149
00:05:31,919 --> 00:05:34,320
over the channel

150
00:05:34,320 --> 00:05:36,240
now on by default we will be discussing

151
00:05:36,240 --> 00:05:37,680
security again against semi-honest

152
00:05:37,680 --> 00:05:39,120
adversaries

153
00:05:39,120 --> 00:05:40,479
intuitively

154
00:05:40,479 --> 00:05:42,560
in this model the secure computation is

155
00:05:42,560 --> 00:05:44,400
necessarily carried out by the channel

156
00:05:44,400 --> 00:05:46,320
the encoding and decoding are done to

157
00:05:46,320 --> 00:05:48,479
facilitate such a secure computation by

158
00:05:48,479 --> 00:05:49,600
the channel

159
00:05:49,600 --> 00:05:51,360
this makes the model interesting from a

160
00:05:51,360 --> 00:05:53,039
theoretical point of view as it

161
00:05:53,039 --> 00:05:54,560
investigates the secure computing

162
00:05:54,560 --> 00:05:56,880
capabilities of a nation of a noisy

163
00:05:56,880 --> 00:05:58,800
channel

164
00:05:58,800 --> 00:06:00,880
many cryptographic tasks can be modeled

165
00:06:00,880 --> 00:06:03,919
as sender receiver functionalities

166
00:06:03,919 --> 00:06:07,039
owsc model is non-interactive and does

167
00:06:07,039 --> 00:06:10,479
not use any setup as a result the

168
00:06:10,479 --> 00:06:12,560
parties can

169
00:06:12,560 --> 00:06:14,880
even parties are not even

170
00:06:14,880 --> 00:06:16,800
required to be present at the same time

171
00:06:16,800 --> 00:06:19,360
to carry out an ofwc protocol

172
00:06:19,360 --> 00:06:21,840
these these observations make the model

173
00:06:21,840 --> 00:06:25,120
appealing from a practical point of view

174
00:06:25,120 --> 00:06:28,560
notable applications of owsc

175
00:06:28,560 --> 00:06:31,039
include generating random puzzles

176
00:06:31,039 --> 00:06:34,000
without giving any parity and unfair

177
00:06:34,000 --> 00:06:36,160
advantage in solving them

178
00:06:36,160 --> 00:06:37,759
and realizing randomized blind

179
00:06:37,759 --> 00:06:39,840
signatures which have applications in

180
00:06:39,840 --> 00:06:43,759
ecash and non-interactive pki generation

181
00:06:43,759 --> 00:06:46,479
zero knowledge proofs in the owsc model

182
00:06:46,479 --> 00:06:48,240
are truly non-interactive and do not

183
00:06:48,240 --> 00:06:49,440
require

184
00:06:49,440 --> 00:06:51,840
a trusted common randomness system this

185
00:06:51,840 --> 00:06:55,120
is another application of the rwc model

186
00:06:55,120 --> 00:06:56,800
let us briefly look at what is known

187
00:06:56,800 --> 00:07:00,319
about owsc the previous works address

188
00:07:00,319 --> 00:07:02,639
the question of existence of channels

189
00:07:02,639 --> 00:07:05,039
that are complete in the owc model a

190
00:07:05,039 --> 00:07:07,680
channel is said to be complete if it can

191
00:07:07,680 --> 00:07:10,160
be used to compute any functionality in

192
00:07:10,160 --> 00:07:12,240
the owsc model

193
00:07:12,240 --> 00:07:16,160
where data in the 2015 paper showed that

194
00:07:16,160 --> 00:07:18,240
the infinite family of string random

195
00:07:18,240 --> 00:07:20,560
oblivious transfer channels

196
00:07:20,560 --> 00:07:23,919
or string rot for short is complete for

197
00:07:23,919 --> 00:07:26,560
owsc with negligible error against

198
00:07:26,560 --> 00:07:28,160
malicious

199
00:07:28,160 --> 00:07:30,880
computationally unbounded adversaries

200
00:07:30,880 --> 00:07:33,199
here by negligible error we mean that

201
00:07:33,199 --> 00:07:35,599
the security and correctness error is a

202
00:07:35,599 --> 00:07:37,280
negligible function of the number of

203
00:07:37,280 --> 00:07:39,840
uses of the channel

204
00:07:39,840 --> 00:07:42,479
random oblivious transfer functionality

205
00:07:42,479 --> 00:07:45,759
or rot

206
00:07:45,759 --> 00:07:46,720
is

207
00:07:46,720 --> 00:07:47,599
the

208
00:07:47,599 --> 00:07:50,160
sender receiver version of the oblivious

209
00:07:50,160 --> 00:07:51,840
transfer functionality

210
00:07:51,840 --> 00:07:54,720
a string rot channel takes a pair of

211
00:07:54,720 --> 00:07:57,840
strings as input and erases exactly one

212
00:07:57,840 --> 00:08:00,560
of the strings uniformly at random

213
00:08:00,560 --> 00:08:02,560
a later work showed that no finite

214
00:08:02,560 --> 00:08:04,479
channel is complete for owsc with

215
00:08:04,479 --> 00:08:06,720
negligible error this is true even

216
00:08:06,720 --> 00:08:08,879
against any

217
00:08:08,879 --> 00:08:10,720
even against computationally bounded

218
00:08:10,720 --> 00:08:13,680
semi-honest adversaries however

219
00:08:13,680 --> 00:08:15,680
a finite channel specifically the bit

220
00:08:15,680 --> 00:08:17,759
rot channel is complete against

221
00:08:17,759 --> 00:08:19,120
malicious

222
00:08:19,120 --> 00:08:21,280
computationally unbounded adversaries if

223
00:08:21,280 --> 00:08:23,440
we are ready to settle for an inverse

224
00:08:23,440 --> 00:08:24,840
polynomial

225
00:08:24,840 --> 00:08:26,639
error

226
00:08:26,639 --> 00:08:29,199
an important question that was left open

227
00:08:29,199 --> 00:08:31,280
by the previous works is the question of

228
00:08:31,280 --> 00:08:33,919
whether natural channels like bec

229
00:08:33,919 --> 00:08:37,440
and bse are owc complete in our work we

230
00:08:37,440 --> 00:08:39,760
address this question and answer

231
00:08:39,760 --> 00:08:43,200
it in the in positive

232
00:08:43,200 --> 00:08:46,560
our main theorem states that bc and bse

233
00:08:46,560 --> 00:08:48,640
are complete with inverse polynomial

234
00:08:48,640 --> 00:08:50,480
error against a computationally

235
00:08:50,480 --> 00:08:52,959
unbounded semion ascender and a query

236
00:08:52,959 --> 00:08:55,360
bounded but otherwise computationally

237
00:08:55,360 --> 00:08:57,839
unbounded receiver

238
00:08:57,839 --> 00:09:02,000
using an ideal obfuscation

239
00:09:02,000 --> 00:09:04,480
we will describe owsc using ideal

240
00:09:04,480 --> 00:09:06,080
obfuscation in detail in the coming

241
00:09:06,080 --> 00:09:07,600
slide

242
00:09:07,600 --> 00:09:10,640
in short the sender

243
00:09:10,640 --> 00:09:12,880
additionally communicates a black box

244
00:09:12,880 --> 00:09:14,560
implementation of a function to the

245
00:09:14,560 --> 00:09:17,200
receiver in the setting and the receiver

246
00:09:17,200 --> 00:09:21,360
can now query uh this obfuscation

247
00:09:21,360 --> 00:09:24,480
with inputs

248
00:09:25,519 --> 00:09:26,560
to put

249
00:09:26,560 --> 00:09:27,760
our

250
00:09:27,760 --> 00:09:30,480
result in context previous results imply

251
00:09:30,480 --> 00:09:32,560
that we cannot demand completeness with

252
00:09:32,560 --> 00:09:34,800
negligible error against computationally

253
00:09:34,800 --> 00:09:36,800
bounded semi-honest adversaries

254
00:09:36,800 --> 00:09:38,720
furthermore against computationally

255
00:09:38,720 --> 00:09:40,720
unbounded semi-honest adversaries

256
00:09:40,720 --> 00:09:43,279
specifically in the case of bc and bse

257
00:09:43,279 --> 00:09:45,200
it is known that certain functionalities

258
00:09:45,200 --> 00:09:47,120
cannot be computed with arbitrarily

259
00:09:47,120 --> 00:09:49,600
small error

260
00:09:49,600 --> 00:09:50,880
uh

261
00:09:50,880 --> 00:09:53,279
even by making arbitrarily many uses of

262
00:09:53,279 --> 00:09:54,399
the channel

263
00:09:54,399 --> 00:09:56,320
this note that this impossibility only

264
00:09:56,320 --> 00:09:58,800
applies to perfectly correct protocols

265
00:09:58,800 --> 00:10:01,120
with abort that is the kind of protocols

266
00:10:01,120 --> 00:10:04,000
in which the receiver is always aware

267
00:10:04,000 --> 00:10:07,279
when it is making an error

268
00:10:07,360 --> 00:10:08,399
it's

269
00:10:08,399 --> 00:10:10,320
please note that the protocol that we

270
00:10:10,320 --> 00:10:12,480
come up with actually satisfies this

271
00:10:12,480 --> 00:10:14,959
condition

272
00:10:16,240 --> 00:10:20,079
the owc of a given function f using bc

273
00:10:20,079 --> 00:10:24,000
or bse is realized in three steps in our

274
00:10:24,000 --> 00:10:25,279
construction

275
00:10:25,279 --> 00:10:27,680
first we realize a string erasure

276
00:10:27,680 --> 00:10:30,800
channel or scc for short using bc and

277
00:10:30,800 --> 00:10:33,440
bse channels as the name suggests a

278
00:10:33,440 --> 00:10:37,360
string erasure channel or sec takes

279
00:10:37,360 --> 00:10:39,680
a string as input and erases it with

280
00:10:39,680 --> 00:10:41,360
probability half

281
00:10:41,360 --> 00:10:44,320
next we use the sec to realize

282
00:10:44,320 --> 00:10:46,720
a string rot channel of appropriate

283
00:10:46,720 --> 00:10:47,920
input size

284
00:10:47,920 --> 00:10:50,880
finally since rot string rot is complete

285
00:10:50,880 --> 00:10:54,959
as we already saw we use it to realize f

286
00:10:54,959 --> 00:10:57,200
the challenging part is the second step

287
00:10:57,200 --> 00:10:59,360
the first step can be realized along the

288
00:10:59,360 --> 00:11:01,839
same lines as in the second step and the

289
00:11:01,839 --> 00:11:04,640
third step is already known

290
00:11:04,640 --> 00:11:07,200
we focus now on the second step that of

291
00:11:07,200 --> 00:11:09,839
realizing string rot using scc

292
00:11:09,839 --> 00:11:11,680
as we observed it is impossible to

293
00:11:11,680 --> 00:11:14,480
realize string rot over scc with small

294
00:11:14,480 --> 00:11:16,640
security error using perfectly correct

295
00:11:16,640 --> 00:11:19,200
protocols with abort

296
00:11:19,200 --> 00:11:21,440
at the core of this impossibility is the

297
00:11:21,440 --> 00:11:24,000
difficulty in realizing the

298
00:11:24,000 --> 00:11:27,120
anti-correlation that is inherent to rot

299
00:11:27,120 --> 00:11:31,040
channel using the eraser channel at hand

300
00:11:31,040 --> 00:11:32,880
when the rot channel reveals the first

301
00:11:32,880 --> 00:11:34,880
string it erases the second string and

302
00:11:34,880 --> 00:11:36,399
vice versa

303
00:11:36,399 --> 00:11:38,560
this kind of an anti-constant that this

304
00:11:38,560 --> 00:11:41,120
kind of an anti-correlation is not

305
00:11:41,120 --> 00:11:44,320
inherent in scc

306
00:11:45,360 --> 00:11:47,279
let us now briefly look at the proof of

307
00:11:47,279 --> 00:11:49,200
this impossibility to see where the

308
00:11:49,200 --> 00:11:51,920
difficulty lies in making a construction

309
00:11:51,920 --> 00:11:53,680
consider

310
00:11:53,680 --> 00:11:58,639
a owc protocol for rot over sec

311
00:11:58,639 --> 00:12:01,519
for any typical encoding of

312
00:12:01,519 --> 00:12:04,079
input a0 comma a1

313
00:12:04,079 --> 00:12:06,079
to the rot

314
00:12:06,079 --> 00:12:08,560
to ensure security against the sender we

315
00:12:08,560 --> 00:12:10,800
need that half of the erasure pattern

316
00:12:10,800 --> 00:12:14,079
should decode a0

317
00:12:14,480 --> 00:12:15,519
and

318
00:12:15,519 --> 00:12:17,839
so let's call this set of erasure

319
00:12:17,839 --> 00:12:20,639
patterns sub 0 and half of the eraser

320
00:12:20,639 --> 00:12:23,040
patterns should decode a1 at the

321
00:12:23,040 --> 00:12:26,079
receiver let's call this set s1

322
00:12:26,079 --> 00:12:27,839
since the protocol is

323
00:12:27,839 --> 00:12:30,800
perfectly secure with abort we

324
00:12:30,800 --> 00:12:34,240
require s0 and s1 to be monotone sets

325
00:12:34,240 --> 00:12:37,040
but then classic results show that s1

326
00:12:37,040 --> 00:12:39,680
intersection intersection s

327
00:12:39,680 --> 00:12:40,880
0

328
00:12:40,880 --> 00:12:43,360
is of a substantial volume that is of

329
00:12:43,360 --> 00:12:45,440
volume about 1 by 4.

330
00:12:45,440 --> 00:12:47,440
hence the receiver can decode both the

331
00:12:47,440 --> 00:12:49,600
messages with substantial probability

332
00:12:49,600 --> 00:12:52,160
this makes the scheme insecure against a

333
00:12:52,160 --> 00:12:54,240
receiver

334
00:12:54,240 --> 00:12:56,880
a malicious i mean a corrupt receiver

335
00:12:56,880 --> 00:12:59,760
semi honest corrupt receiver note that

336
00:12:59,760 --> 00:13:02,240
this does not give rise to a

337
00:13:02,240 --> 00:13:04,320
constructive strategy for the receiver

338
00:13:04,320 --> 00:13:07,600
to obtain both messages

339
00:13:07,600 --> 00:13:09,519
what would a constructive attack by the

340
00:13:09,519 --> 00:13:12,560
receiver look like in an owc protocol

341
00:13:12,560 --> 00:13:15,600
the sender encodes the input a0 comma a1

342
00:13:15,600 --> 00:13:17,760
and sends it over the sec

343
00:13:17,760 --> 00:13:21,440
the receiver takes the erased version

344
00:13:21,440 --> 00:13:24,000
output by the scc and runs the decoder

345
00:13:24,000 --> 00:13:27,040
on it suppose it decodes a0 the decoder

346
00:13:27,040 --> 00:13:29,600
can now try to decode a1 by calling the

347
00:13:29,600 --> 00:13:31,200
decoder

348
00:13:31,200 --> 00:13:33,279
after guessing some of the array symbol

349
00:13:33,279 --> 00:13:36,240
or after further deleting some of the

350
00:13:36,240 --> 00:13:38,480
received symbols

351
00:13:38,480 --> 00:13:40,880
we essentially build an owsc scheme that

352
00:13:40,880 --> 00:13:42,639
is robust to such an attack from the

353
00:13:42,639 --> 00:13:45,519
receiver and simultaneously is secure

354
00:13:45,519 --> 00:13:47,120
against the sender

355
00:13:47,120 --> 00:13:49,600
we do this by creating a kind of

356
00:13:49,600 --> 00:13:52,160
computational anti-correlation by

357
00:13:52,160 --> 00:13:54,800
exploiting the anti-concentration of the

358
00:13:54,800 --> 00:13:57,440
binomial distribution

359
00:13:57,440 --> 00:14:00,240
let me describe the model of owsc using

360
00:14:00,240 --> 00:14:02,880
ideal obfuscation here in addition to

361
00:14:02,880 --> 00:14:05,440
sending the encoding of the input over

362
00:14:05,440 --> 00:14:08,000
the channel the sender also sends an

363
00:14:08,000 --> 00:14:10,959
ideal obfuscation of a function f of its

364
00:14:10,959 --> 00:14:12,399
choice

365
00:14:12,399 --> 00:14:14,800
by ideal obfuscation we mean that the

366
00:14:14,800 --> 00:14:17,760
receiver only has oracle access to this

367
00:14:17,760 --> 00:14:19,199
function f

368
00:14:19,199 --> 00:14:20,880
this can be realized in the real world

369
00:14:20,880 --> 00:14:23,040
by having the sender

370
00:14:23,040 --> 00:14:25,600
ship a stateless tamper-proof hardware

371
00:14:25,600 --> 00:14:28,000
of the function f

372
00:14:28,000 --> 00:14:31,279
now the decoder

373
00:14:31,279 --> 00:14:33,760
decoding function deck

374
00:14:33,760 --> 00:14:38,800
has oracle access to this function f

375
00:14:41,199 --> 00:14:43,440
observe that using ideal obfuscation

376
00:14:43,440 --> 00:14:45,760
does not make the problem trivial

377
00:14:45,760 --> 00:14:47,519
the first scheme that might suggest

378
00:14:47,519 --> 00:14:50,560
itself is to not send any encoding at

379
00:14:50,560 --> 00:14:52,720
all and send f

380
00:14:52,720 --> 00:14:55,839
which on queried with zero outputs a0

381
00:14:55,839 --> 00:14:59,720
and outputs one

382
00:15:00,000 --> 00:15:03,680
and when queried with one outputs a1

383
00:15:03,680 --> 00:15:05,519
this of course is insecure as the

384
00:15:05,519 --> 00:15:07,920
receiver can obviously make both these

385
00:15:07,920 --> 00:15:10,720
queries to obtain a0 and a1

386
00:15:10,720 --> 00:15:13,680
thus breaking the security

387
00:15:13,680 --> 00:15:16,320
let me now give an outline of our owsc

388
00:15:16,320 --> 00:15:19,920
protocol for rot over scc

389
00:15:19,920 --> 00:15:23,680
on input a0 comma a1 the sender sends in

390
00:15:23,680 --> 00:15:26,959
randomly chosen symbols x1 to xn over

391
00:15:26,959 --> 00:15:28,560
the scc

392
00:15:28,560 --> 00:15:31,360
it then constructs a function f sub s

393
00:15:31,360 --> 00:15:34,000
comma x param is parameterized by x

394
00:15:34,000 --> 00:15:35,440
comma s

395
00:15:35,440 --> 00:15:39,120
where s is a randomly chosen secret test

396
00:15:39,120 --> 00:15:42,079
secret test set of size square root n

397
00:15:42,079 --> 00:15:44,720
it then sends the ideal obfuscation of

398
00:15:44,720 --> 00:15:48,240
this function f sub s comma x

399
00:15:48,240 --> 00:15:50,639
so let's first try

400
00:15:50,639 --> 00:15:55,839
an f sub s comma x that works as follows

401
00:15:56,560 --> 00:15:58,800
when

402
00:16:00,000 --> 00:16:02,800
when called with an input y f sub s

403
00:16:02,800 --> 00:16:05,600
comma x first checks if y is consistent

404
00:16:05,600 --> 00:16:06,720
with x

405
00:16:06,720 --> 00:16:08,639
that is whether all the unerased

406
00:16:08,639 --> 00:16:11,839
positions in y coincides with

407
00:16:11,839 --> 00:16:13,120
x

408
00:16:13,120 --> 00:16:16,160
if not it aborts otherwise it checks if

409
00:16:16,160 --> 00:16:18,320
a majority of the indices in the secret

410
00:16:18,320 --> 00:16:20,399
set s is erased

411
00:16:20,399 --> 00:16:23,120
if that is the case it reveals a sub 0

412
00:16:23,120 --> 00:16:25,759
and otherwise it reveals a sub 1.

413
00:16:25,759 --> 00:16:28,160
suppose a majority of the indices in s

414
00:16:28,160 --> 00:16:30,320
is erased in the received string in this

415
00:16:30,320 --> 00:16:33,040
case the receiver can decode a sub 0.

416
00:16:33,040 --> 00:16:37,519
the only way for it to obtain a sub 1

417
00:16:37,519 --> 00:16:40,079
in this case is to un and erase

418
00:16:40,079 --> 00:16:43,199
sufficiently many erased indices in s

419
00:16:43,199 --> 00:16:44,800
so that

420
00:16:44,800 --> 00:16:46,800
there is a majority of an array symbols

421
00:16:46,800 --> 00:16:48,720
in s

422
00:16:48,720 --> 00:16:52,160
and then using such a string to query f

423
00:16:52,160 --> 00:16:56,480
sub x to get the uh other input a sub 1

424
00:16:56,480 --> 00:16:58,959
but it is impossible for a query bounded

425
00:16:58,959 --> 00:17:01,519
receiver to correctly guess a uniformly

426
00:17:01,519 --> 00:17:04,240
random string of large length this makes

427
00:17:04,240 --> 00:17:07,760
it impossible for the receiver to obtain

428
00:17:07,760 --> 00:17:11,280
the other input in this case

429
00:17:11,280 --> 00:17:13,359
however when the receiver receives a

430
00:17:13,359 --> 00:17:15,520
string in which a majority of the

431
00:17:15,520 --> 00:17:19,359
positions in s are and erase

432
00:17:19,359 --> 00:17:21,359
it it can decode a1

433
00:17:21,359 --> 00:17:24,640
but it can also try to decode a0 as

434
00:17:24,640 --> 00:17:27,119
follows all it needs to do is get a

435
00:17:27,119 --> 00:17:30,720
majority of the indices in s erased

436
00:17:30,720 --> 00:17:32,400
but this is easy to do

437
00:17:32,400 --> 00:17:34,480
although the receiver does not know the

438
00:17:34,480 --> 00:17:36,960
location of the secret set s it can

439
00:17:36,960 --> 00:17:38,960
erase a large number of indices

440
00:17:38,960 --> 00:17:41,679
arbitrarily hoping to get a majority of

441
00:17:41,679 --> 00:17:43,840
the indices in s erased and this is a

442
00:17:43,840 --> 00:17:46,080
valid attack

443
00:17:46,080 --> 00:17:49,200
to protect against this attack we add an

444
00:17:49,200 --> 00:17:51,840
extra condition to f sub s comma x to

445
00:17:51,840 --> 00:17:54,080
obtain our final scheme

446
00:17:54,080 --> 00:17:54,880
the

447
00:17:54,880 --> 00:17:57,200
the function now aborts also when the

448
00:17:57,200 --> 00:17:59,679
number of arranges is more than n by 2

449
00:17:59,679 --> 00:18:00,480
plus

450
00:18:00,480 --> 00:18:02,320
into the 2 by 3.

451
00:18:02,320 --> 00:18:04,000
why does this work first of all this

452
00:18:04,000 --> 00:18:05,679
does not affect the correctness of the

453
00:18:05,679 --> 00:18:08,640
scheme because the scc does not cost

454
00:18:08,640 --> 00:18:10,799
more than n by 2 plus n to the 2 by 3

455
00:18:10,799 --> 00:18:12,799
erasers except with negligible

456
00:18:12,799 --> 00:18:14,799
probability this follows from a simple

457
00:18:14,799 --> 00:18:16,880
turn off bound

458
00:18:16,880 --> 00:18:18,480
this tweak protects against the

459
00:18:18,480 --> 00:18:19,919
forgetting attack

460
00:18:19,919 --> 00:18:22,080
uh mounted by the receiver that we just

461
00:18:22,080 --> 00:18:23,280
talked about

462
00:18:23,280 --> 00:18:25,280
the crucial observation is that by an

463
00:18:25,280 --> 00:18:27,360
anti-concentration bound

464
00:18:27,360 --> 00:18:29,039
on the binomial distribution when a

465
00:18:29,039 --> 00:18:32,080
majority of indices in s is unerased

466
00:18:32,080 --> 00:18:33,840
with all but an inverse polynomial

467
00:18:33,840 --> 00:18:36,000
probability it is a substantially large

468
00:18:36,000 --> 00:18:37,760
majority say

469
00:18:37,760 --> 00:18:40,799
of the order n to the one by eight

470
00:18:40,799 --> 00:18:42,720
but a receiver who is unaware of the

471
00:18:42,720 --> 00:18:45,440
whereabouts of the secret set s will not

472
00:18:45,440 --> 00:18:47,120
be able to

473
00:18:47,120 --> 00:18:48,880
uh erase

474
00:18:48,880 --> 00:18:52,320
a majority of the positions in s

475
00:18:52,320 --> 00:18:54,720
uh with this new constraint in place

476
00:18:54,720 --> 00:18:56,640
that is with all but negligible

477
00:18:56,640 --> 00:18:58,640
probability under the budget constraint

478
00:18:58,640 --> 00:19:00,880
of n by two plus n to the n by three

479
00:19:00,880 --> 00:19:03,679
erases the receiver will fail to erase

480
00:19:03,679 --> 00:19:05,280
the surplus into the one by eight

481
00:19:05,280 --> 00:19:06,960
symbols in s

482
00:19:06,960 --> 00:19:08,799
hence this attack fails making the

483
00:19:08,799 --> 00:19:10,480
scheme

484
00:19:10,480 --> 00:19:11,600
secure

485
00:19:11,600 --> 00:19:15,760
with inverse polynomial security error

486
00:19:15,760 --> 00:19:19,679
sec can be realized over bsc

487
00:19:19,679 --> 00:19:22,080
or bec using similar construction as we

488
00:19:22,080 --> 00:19:23,840
mentioned in the beginning and the

489
00:19:23,840 --> 00:19:26,000
functionality f can be realized using

490
00:19:26,000 --> 00:19:28,480
the string rot that we just now realized

491
00:19:28,480 --> 00:19:31,919
this concludes the proof of our theorem

492
00:19:31,919 --> 00:19:34,160
as we observed before a direct way to

493
00:19:34,160 --> 00:19:35,919
implement ideal obfuscation is by

494
00:19:35,919 --> 00:19:37,679
shipping a stateless tamper tamper-proof

495
00:19:37,679 --> 00:19:40,320
hardware to the receiver

496
00:19:40,320 --> 00:19:43,360
to get a plane model instantiation a

497
00:19:43,360 --> 00:19:45,080
natural approach is to use

498
00:19:45,080 --> 00:19:47,280
indistinguishability obfuscation instead

499
00:19:47,280 --> 00:19:48,960
of the ideal obfuscation

500
00:19:48,960 --> 00:19:50,640
since io is the best possible

501
00:19:50,640 --> 00:19:53,120
obfuscation as shown by the work of

502
00:19:53,120 --> 00:19:55,039
goldwater and rothblum

503
00:19:55,039 --> 00:19:57,679
if some instantiation of ideal

504
00:19:57,679 --> 00:20:00,799
obfuscation in our protocol

505
00:20:00,799 --> 00:20:03,760
is secure then so is io

506
00:20:03,760 --> 00:20:07,120
we however are not able to show that our

507
00:20:07,120 --> 00:20:09,440
protocol remains secure under

508
00:20:09,440 --> 00:20:10,320
uh

509
00:20:10,320 --> 00:20:12,400
i mean when ideal obfuscation is

510
00:20:12,400 --> 00:20:14,080
replaced with indistinguishability of

511
00:20:14,080 --> 00:20:15,440
fiscalization

512
00:20:15,440 --> 00:20:17,200
this leads us to the following highly

513
00:20:17,200 --> 00:20:18,960
plausible conjecture

514
00:20:18,960 --> 00:20:20,880
replacing

515
00:20:20,880 --> 00:20:24,880
ideal obfuscation with io

516
00:20:25,600 --> 00:20:28,000
with any io scheme in our protocol

517
00:20:28,000 --> 00:20:30,720
results in an owsc protocol

518
00:20:30,720 --> 00:20:33,440
over bsc or bec

519
00:20:33,440 --> 00:20:35,039
in the plane model with inverse

520
00:20:35,039 --> 00:20:37,200
polynomial error against computationally

521
00:20:37,200 --> 00:20:41,039
bounded semi honest adversaries

522
00:20:43,200 --> 00:20:45,120
it turns out that in the plane model

523
00:20:45,120 --> 00:20:47,200
assuming the conjecture we can actually

524
00:20:47,200 --> 00:20:49,120
obtain security against malicious

525
00:20:49,120 --> 00:20:50,640
adversaries also

526
00:20:50,640 --> 00:20:53,360
however using ideal obfuscation we could

527
00:20:53,360 --> 00:20:55,360
only claim security against semi honest

528
00:20:55,360 --> 00:20:56,559
adversary

529
00:20:56,559 --> 00:20:59,200
to ensure malicious security we only

530
00:20:59,200 --> 00:21:01,200
need to additionally secure the protocol

531
00:21:01,200 --> 00:21:03,440
against a malicious sender who attempts

532
00:21:03,440 --> 00:21:05,520
to influence the output distribution of

533
00:21:05,520 --> 00:21:06,799
the receiver

534
00:21:06,799 --> 00:21:09,679
this is because the receiver being inert

535
00:21:09,679 --> 00:21:11,840
has no additional power in the malicious

536
00:21:11,840 --> 00:21:13,120
setting

537
00:21:13,120 --> 00:21:16,159
to ensure security against the sender

538
00:21:16,159 --> 00:21:18,159
it is sufficient to ensure that the

539
00:21:18,159 --> 00:21:20,559
function that is being obfuscated is a

540
00:21:20,559 --> 00:21:22,080
legitimate function

541
00:21:22,080 --> 00:21:24,159
this can be ensured by making the sender

542
00:21:24,159 --> 00:21:27,120
provide a non-interactive zero knowledge

543
00:21:27,120 --> 00:21:28,960
proof of this fact

544
00:21:28,960 --> 00:21:31,919
known results show that nizk can be

545
00:21:31,919 --> 00:21:35,039
realized using the provided channel that

546
00:21:35,039 --> 00:21:37,919
is bse or bc hence we can realize

547
00:21:37,919 --> 00:21:39,679
malicious security

548
00:21:39,679 --> 00:21:41,200
in the plane model assuming the

549
00:21:41,200 --> 00:21:42,799
conjecture

550
00:21:42,799 --> 00:21:45,039
thus in the plane model the natural

551
00:21:45,039 --> 00:21:46,799
channels like

552
00:21:46,799 --> 00:21:50,000
bec and bse are complete with inverse

553
00:21:50,000 --> 00:21:52,320
polynomial error again semi honest and

554
00:21:52,320 --> 00:21:54,240
malicious computationally bounded

555
00:21:54,240 --> 00:21:56,720
adversaries

556
00:21:56,720 --> 00:21:59,600
in conclusion we showed that rot can be

557
00:21:59,600 --> 00:22:02,480
realized over bc and bse using ideal

558
00:22:02,480 --> 00:22:04,000
obfuscation with inverse polynomial

559
00:22:04,000 --> 00:22:05,280
security

560
00:22:05,280 --> 00:22:07,760
which further implied that bc and bsc

561
00:22:07,760 --> 00:22:09,840
are complete in the owsc model with

562
00:22:09,840 --> 00:22:12,880
inverse polynomial security

563
00:22:12,880 --> 00:22:15,760
we leave two important open problems the

564
00:22:15,760 --> 00:22:17,600
most pertinent one is that of

565
00:22:17,600 --> 00:22:19,520
instantiating ideal obfuscation in the

566
00:22:19,520 --> 00:22:22,159
plane model the other one is in the

567
00:22:22,159 --> 00:22:24,480
ideal model where we would like to

568
00:22:24,480 --> 00:22:26,400
extend our result to malicious

569
00:22:26,400 --> 00:22:29,200
adversaries too

570
00:22:29,200 --> 00:22:31,440
that's the end of this presentation

571
00:22:31,440 --> 00:22:35,000
thank you for listening

