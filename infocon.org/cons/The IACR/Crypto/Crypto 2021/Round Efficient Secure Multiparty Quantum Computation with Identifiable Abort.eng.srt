1
00:00:01,520 --> 00:00:04,960
so hello everyone my name is e and today

2
00:00:04,960 --> 00:00:07,040
we'll be talking about long efficient

3
00:00:07,040 --> 00:00:09,120
secure multi-party quantum computation

4
00:00:09,120 --> 00:00:11,120
with identifiable boards

5
00:00:11,120 --> 00:00:13,360
this is a joint work with my advisor

6
00:00:13,360 --> 00:00:15,920
tybin and with my friends and colleagues

7
00:00:15,920 --> 00:00:19,439
bar how meeting and eachine

8
00:00:19,439 --> 00:00:21,279
so let's start with multi-party quantum

9
00:00:21,279 --> 00:00:22,560
computations

10
00:00:22,560 --> 00:00:25,279
so here we have n parties and the goal

11
00:00:25,279 --> 00:00:26,880
is for them to jointly compute the

12
00:00:26,880 --> 00:00:29,760
quantum circuit so this circuit takes an

13
00:00:29,760 --> 00:00:32,000
input so one from every one from

14
00:00:32,000 --> 00:00:33,200
everybody

15
00:00:33,200 --> 00:00:34,880
and it also has

16
00:00:34,880 --> 00:00:37,840
an output so one for every one

17
00:00:37,840 --> 00:00:40,239
so at the beginning every party holds

18
00:00:40,239 --> 00:00:42,079
their private inputs

19
00:00:42,079 --> 00:00:44,719
and then they run some protocol so they

20
00:00:44,719 --> 00:00:46,399
exchange some messages that can either

21
00:00:46,399 --> 00:00:48,960
be quantum or classical and then at the

22
00:00:48,960 --> 00:00:51,600
end of the computation every party gets

23
00:00:51,600 --> 00:00:53,840
their own output

24
00:00:53,840 --> 00:00:55,760
a common security notion is called

25
00:00:55,760 --> 00:00:59,280
security with a board which uh

26
00:00:59,280 --> 00:01:01,600
intuitively means that everyone learns

27
00:01:01,600 --> 00:01:03,359
only their own output

28
00:01:03,359 --> 00:01:05,760
unless the protocol awards in which case

29
00:01:05,760 --> 00:01:08,159
the unless the honest parties would not

30
00:01:08,159 --> 00:01:10,159
get any output

31
00:01:10,159 --> 00:01:11,119
okay

32
00:01:11,119 --> 00:01:12,479
so

33
00:01:12,479 --> 00:01:15,360
dupont nielsen and savville

34
00:01:15,360 --> 00:01:18,240
constructed such a protocol metal

35
00:01:18,240 --> 00:01:20,640
that satisfies security with the board

36
00:01:20,640 --> 00:01:22,000
and similarly

37
00:01:22,000 --> 00:01:25,360
for this uh more recent work by dulac

38
00:01:25,360 --> 00:01:27,119
brillo jeffrey

39
00:01:27,119 --> 00:01:29,520
my hands and sharpner

40
00:01:29,520 --> 00:01:32,079
and well this security notion is good

41
00:01:32,079 --> 00:01:34,240
but there's an obvious weakness is that

42
00:01:34,240 --> 00:01:36,960
a protocol may board particularly the

43
00:01:36,960 --> 00:01:39,360
adversary might choose to afford the

44
00:01:39,360 --> 00:01:41,759
protocol whenever it feels like and when

45
00:01:41,759 --> 00:01:43,840
that happens we call it a denial of

46
00:01:43,840 --> 00:01:46,159
service attack

47
00:01:46,159 --> 00:01:47,759
it's also well known that this type of

48
00:01:47,759 --> 00:01:50,000
attack cannot be prevented

49
00:01:50,000 --> 00:01:53,119
with the uh with dishonest majority

50
00:01:53,119 --> 00:01:55,520
and like i mentioned but it does happen

51
00:01:55,520 --> 00:01:58,640
the honest parties get no output

52
00:01:58,640 --> 00:02:00,640
but because we are working under the

53
00:02:00,640 --> 00:02:02,960
pumping setting there is a additional

54
00:02:02,960 --> 00:02:05,840
issue which is that all of the quantum

55
00:02:05,840 --> 00:02:08,239
inputs will be consumed and lost due to

56
00:02:08,239 --> 00:02:10,080
a no cloning theorem

57
00:02:10,080 --> 00:02:11,680
so

58
00:02:11,680 --> 00:02:13,840
here of course a denial service attack

59
00:02:13,840 --> 00:02:16,560
like i mentioned it cannot be prevented

60
00:02:16,560 --> 00:02:18,959
but still we want to ask is there still

61
00:02:18,959 --> 00:02:22,000
anything we can do about this

62
00:02:22,000 --> 00:02:24,400
it turns out the answer is yes because

63
00:02:24,400 --> 00:02:26,400
there's this other security notion

64
00:02:26,400 --> 00:02:29,599
called security with identifiable board

65
00:02:29,599 --> 00:02:32,000
so roughly in instead of when the

66
00:02:32,000 --> 00:02:34,480
protocol awards everyone at least knows

67
00:02:34,480 --> 00:02:36,800
who to blend so everyone knows who who

68
00:02:36,800 --> 00:02:39,200
is causing the abort

69
00:02:39,200 --> 00:02:42,160
so this notion was introduced by ishai

70
00:02:42,160 --> 00:02:44,720
astroxy and zikas

71
00:02:44,720 --> 00:02:46,879
and classically it was satisfied by the

72
00:02:46,879 --> 00:02:50,319
gmw protocol and their high level idea

73
00:02:50,319 --> 00:02:53,280
is to use broadcast and vk proofs so the

74
00:02:53,280 --> 00:02:55,360
honest party can prove to everyone that

75
00:02:55,360 --> 00:02:57,599
they did what they're supposed to do

76
00:02:57,599 --> 00:02:59,840
but of course now we are under quantum

77
00:02:59,840 --> 00:03:02,239
settings and we cannot broadcast the

78
00:03:02,239 --> 00:03:04,319
quantum state because there's again

79
00:03:04,319 --> 00:03:06,879
there's no flowing theorem so broadcast

80
00:03:06,879 --> 00:03:10,080
does not work in quantum and therefore

81
00:03:10,080 --> 00:03:13,040
it is unclear how to achieve securities

82
00:03:13,040 --> 00:03:15,360
identifiable abort from existing

83
00:03:15,360 --> 00:03:17,200
constructions like i mentioned on the

84
00:03:17,200 --> 00:03:19,200
previous slide

85
00:03:19,200 --> 00:03:22,480
and this is exactly our contribution so

86
00:03:22,480 --> 00:03:24,879
our contribution is that we construct a

87
00:03:24,879 --> 00:03:27,519
protocol for computing any multiparty

88
00:03:27,519 --> 00:03:31,200
quantum circuit with identifiable board

89
00:03:31,200 --> 00:03:33,040
using these primitives

90
00:03:33,040 --> 00:03:35,200
so the first creative we use is a

91
00:03:35,200 --> 00:03:38,239
classical multi-party con multi-party

92
00:03:38,239 --> 00:03:39,519
computation

93
00:03:39,519 --> 00:03:42,080
with identifiable boards

94
00:03:42,080 --> 00:03:44,560
and the other primitive we use is called

95
00:03:44,560 --> 00:03:47,200
a verifiable quantum

96
00:03:47,200 --> 00:03:49,920
for homomorphic encryption scheme which

97
00:03:49,920 --> 00:03:52,400
was uh proposed and constructed by

98
00:03:52,400 --> 00:03:54,640
electric at all

99
00:03:54,640 --> 00:03:56,799
okay and it's also worth mentioning that

100
00:03:56,799 --> 00:03:59,120
our protocol is wrong division in the

101
00:03:59,120 --> 00:04:01,120
sense that the number of rounds in our

102
00:04:01,120 --> 00:04:03,360
protocol with quantum messages does not

103
00:04:03,360 --> 00:04:05,120
depend on the circuit

104
00:04:05,120 --> 00:04:07,439
but i want to clarify that this does not

105
00:04:07,439 --> 00:04:09,680
mean we have concern wrong because the

106
00:04:09,680 --> 00:04:11,840
uh our number of wrongs still depends on

107
00:04:11,840 --> 00:04:14,159
the number of other factors such as one

108
00:04:14,159 --> 00:04:16,798
not the wrong complexity of this

109
00:04:16,798 --> 00:04:18,320
and two

110
00:04:18,320 --> 00:04:20,399
the number of parties

111
00:04:20,399 --> 00:04:23,520
and three the security parameter that we

112
00:04:23,520 --> 00:04:25,040
choose

113
00:04:25,040 --> 00:04:27,680
so we do not have concern

114
00:04:27,680 --> 00:04:30,160
as opposed to this other concurrent work

115
00:04:30,160 --> 00:04:32,720
by parson said claude ventral

116
00:04:32,720 --> 00:04:35,120
kurana and ma and in fact this

117
00:04:35,120 --> 00:04:37,040
concurrent work is also presenting in

118
00:04:37,040 --> 00:04:39,280
this conference and they have a constant

119
00:04:39,280 --> 00:04:42,240
wrong protocol for a multi-party content

120
00:04:42,240 --> 00:04:44,240
computation but they do not have python

121
00:04:44,240 --> 00:04:46,080
504

122
00:04:46,080 --> 00:04:47,919
okay and the

123
00:04:47,919 --> 00:04:51,040
last thing that is worth uh mentioning

124
00:04:51,040 --> 00:04:53,759
about our protocol is that it is fair if

125
00:04:53,759 --> 00:04:55,840
the underlying classical and pc if this

126
00:04:55,840 --> 00:04:57,919
thing is also fair

127
00:04:57,919 --> 00:04:59,840
and now what we mean by fairness is that

128
00:04:59,840 --> 00:05:01,759
i learn everyone gets their output or

129
00:05:01,759 --> 00:05:04,320
nobody does as opposed to the

130
00:05:04,320 --> 00:05:07,120
quote-unquote unfair situation where the

131
00:05:07,120 --> 00:05:09,759
dishonest parties could potentially get

132
00:05:09,759 --> 00:05:12,000
their output first and then they could

133
00:05:12,000 --> 00:05:13,919
uh of course the protocol so others

134
00:05:13,919 --> 00:05:16,080
party get nothing

135
00:05:16,080 --> 00:05:18,880
okay so that is our contribution and now

136
00:05:18,880 --> 00:05:20,800
let me show you how do we

137
00:05:20,800 --> 00:05:23,520
how do we make it happen but uh first of

138
00:05:23,520 --> 00:05:25,759
all i want to identify a challenge that

139
00:05:25,759 --> 00:05:28,320
is specific to a quantum setting

140
00:05:28,320 --> 00:05:30,000
it's actually just sending a quantum

141
00:05:30,000 --> 00:05:32,160
message just even when we are trying to

142
00:05:32,160 --> 00:05:33,680
send quantum messages we already

143
00:05:33,680 --> 00:05:36,000
encounter issues related to identifiable

144
00:05:36,000 --> 00:05:38,639
words so let me just demonstrate

145
00:05:38,639 --> 00:05:41,039
so let's say these parties are running

146
00:05:41,039 --> 00:05:43,199
uh running some protocol and they say

147
00:05:43,199 --> 00:05:44,639
player one is

148
00:05:44,639 --> 00:05:47,680
malicious so uh he's a bad guy so he

149
00:05:47,680 --> 00:05:49,759
just uh decides to withhold a message so

150
00:05:49,759 --> 00:05:51,280
it's supposed to send a message to p2

151
00:05:51,280 --> 00:05:53,360
but he does not send it

152
00:05:53,360 --> 00:05:55,680
okay in which case because there is no

153
00:05:55,680 --> 00:05:57,840
cloning so

154
00:05:57,840 --> 00:06:00,080
this message is lost for good and any

155
00:06:00,080 --> 00:06:02,080
information that has been stored in this

156
00:06:02,080 --> 00:06:03,919
message is also lost

157
00:06:03,919 --> 00:06:06,000
so it is possible that we might not be

158
00:06:06,000 --> 00:06:08,160
able to recover from this uh from losing

159
00:06:08,160 --> 00:06:10,400
this message and in which case we might

160
00:06:10,400 --> 00:06:12,240
have to abort

161
00:06:12,240 --> 00:06:14,240
let's say that does happen then well

162
00:06:14,240 --> 00:06:16,080
we'll have to catch the malicious we

163
00:06:16,080 --> 00:06:19,039
haven't catch a bad guy and well okay so

164
00:06:19,039 --> 00:06:21,039
let's take a perspective of p3 for a

165
00:06:21,039 --> 00:06:23,440
moment so of course from his perspective

166
00:06:23,440 --> 00:06:25,600
he can say that player one is malicious

167
00:06:25,600 --> 00:06:27,680
for the reason i just mentioned but he

168
00:06:27,680 --> 00:06:30,240
will not always be correct because there

169
00:06:30,240 --> 00:06:31,919
is alway there's also much other

170
00:06:31,919 --> 00:06:35,600
configuration where p1 is honest and p2

171
00:06:35,600 --> 00:06:38,160
is malicious and p1 sends a message to

172
00:06:38,160 --> 00:06:42,240
p2 but p2 after receiving the message he

173
00:06:42,240 --> 00:06:44,479
falsely accuses p1 and claims that the

174
00:06:44,479 --> 00:06:46,800
message was not sent

175
00:06:46,800 --> 00:06:49,360
and well from the perspective of p3

176
00:06:49,360 --> 00:06:51,560
these two situations are

177
00:06:51,560 --> 00:06:54,479
indistinguishable so p3 does not know

178
00:06:54,479 --> 00:06:57,199
which of player 1 and 32 is malicious

179
00:06:57,199 --> 00:06:59,120
and therefore we just don't have enough

180
00:06:59,120 --> 00:07:01,199
information to get identifiable for this

181
00:07:01,199 --> 00:07:02,479
particular case

182
00:07:02,479 --> 00:07:03,840
so it almost seems like there's some

183
00:07:03,840 --> 00:07:07,039
kind of barrier to attend or to satisfy

184
00:07:07,039 --> 00:07:09,280
identifiable abort under consultant

185
00:07:09,280 --> 00:07:11,120
setting we cannot even send content

186
00:07:11,120 --> 00:07:13,120
messages without running into these

187
00:07:13,120 --> 00:07:14,639
issues

188
00:07:14,639 --> 00:07:16,880
but well we're able to overcome this

189
00:07:16,880 --> 00:07:19,759
barrier of course so let me uh show you

190
00:07:19,759 --> 00:07:20,720
how

191
00:07:20,720 --> 00:07:23,120
how to solve this problem but before we

192
00:07:23,120 --> 00:07:25,840
solve it let's uh first uh formulate it

193
00:07:25,840 --> 00:07:27,360
a bit better and actually make it well

194
00:07:27,360 --> 00:07:30,720
defined okay so the goal is like i said

195
00:07:30,720 --> 00:07:32,639
that the player one wants to send a qp

196
00:07:32,639 --> 00:07:35,039
to player two but uh we want to send it

197
00:07:35,039 --> 00:07:37,199
in the way that is uh secure with

198
00:07:37,199 --> 00:07:39,520
identifiable board meaning that if this

199
00:07:39,520 --> 00:07:41,680
process goes wrong then

200
00:07:41,680 --> 00:07:43,840
we will then everyone would know who is

201
00:07:43,840 --> 00:07:46,560
the cheater okay

202
00:07:46,560 --> 00:07:49,120
so to make the discussion more effective

203
00:07:49,120 --> 00:07:50,479
we are also going to put some

204
00:07:50,479 --> 00:07:52,319
restrictions in the adversary's power

205
00:07:52,319 --> 00:07:55,199
for now so right now the anniversary can

206
00:07:55,199 --> 00:07:56,879
still drop outgoing messages that i

207
00:07:56,879 --> 00:07:58,639
mentioned so he's supposed to stand up

208
00:07:58,639 --> 00:08:01,120
send a message and he's not he's just

209
00:08:01,120 --> 00:08:02,879
not sending it

210
00:08:02,879 --> 00:08:05,520
or uh the other attack also i mentioned

211
00:08:05,520 --> 00:08:08,000
earlier is that uh maybe player 2 is

212
00:08:08,000 --> 00:08:10,479
malicious then he can take a message and

213
00:08:10,479 --> 00:08:13,039
then claim that it is not it was not

214
00:08:13,039 --> 00:08:15,199
sent and right now we worry only about

215
00:08:15,199 --> 00:08:17,440
these two attacks uh there will be some

216
00:08:17,440 --> 00:08:19,919
other issues down the line such as uh

217
00:08:19,919 --> 00:08:22,319
privacy or authentication but we'll

218
00:08:22,319 --> 00:08:24,560
worry about that later

219
00:08:24,560 --> 00:08:27,440
okay so this is the uh definition of

220
00:08:27,440 --> 00:08:29,120
this true descending problem that i'm

221
00:08:29,120 --> 00:08:32,000
about to solve so now let's present let

222
00:08:32,000 --> 00:08:34,240
me present our solution which is which

223
00:08:34,240 --> 00:08:35,919
we call routing

224
00:08:35,919 --> 00:08:38,240
uh by the way for this uh demo for

225
00:08:38,240 --> 00:08:39,679
purpose of this demo let's just say

226
00:08:39,679 --> 00:08:41,839
these two are honest and these two are

227
00:08:41,839 --> 00:08:43,679
malicious today

228
00:08:43,679 --> 00:08:46,240
okay so as you can tell as you might be

229
00:08:46,240 --> 00:08:48,880
able to tell from name routing this uh

230
00:08:48,880 --> 00:08:51,279
our construction is inspired from

231
00:08:51,279 --> 00:08:54,240
computer networks so when we talk about

232
00:08:54,240 --> 00:08:56,320
routing then we are trying to route uh

233
00:08:56,320 --> 00:08:58,160
something from 31 to player 2 referring

234
00:08:58,160 --> 00:09:00,720
to raw packets and well here is how we

235
00:09:00,720 --> 00:09:04,399
create our package so we take the input

236
00:09:04,399 --> 00:09:06,800
the play one's original input and we run

237
00:09:06,800 --> 00:09:08,800
a quantum error correcting code we run

238
00:09:08,800 --> 00:09:11,760
the qecc on the input to create our

239
00:09:11,760 --> 00:09:13,279
packets

240
00:09:13,279 --> 00:09:16,480
the reason why we choose to use qecc is

241
00:09:16,480 --> 00:09:17,760
because

242
00:09:17,760 --> 00:09:18,720
we

243
00:09:18,720 --> 00:09:22,000
as in our discussion earlier we cannot

244
00:09:22,000 --> 00:09:25,200
avoid losing messages but uh and that is

245
00:09:25,200 --> 00:09:27,440
why we can uh we use ecc we use error

246
00:09:27,440 --> 00:09:29,680
correction so even if we lose some of

247
00:09:29,680 --> 00:09:32,000
these packets as long as most of these

248
00:09:32,000 --> 00:09:35,200
packets do arrive at p2 then he will

249
00:09:35,200 --> 00:09:37,360
still be able to to uh to recover the

250
00:09:37,360 --> 00:09:39,600
original message just by

251
00:09:39,600 --> 00:09:42,080
decoding the surviving packets that he's

252
00:09:42,080 --> 00:09:45,040
received even if we so even if we lose

253
00:09:45,040 --> 00:09:47,120
some packets as long as we don't lose

254
00:09:47,120 --> 00:09:50,000
too many we are still okay

255
00:09:50,000 --> 00:09:52,959
so that is our package and of course uh

256
00:09:52,959 --> 00:09:55,680
we also have to talk about our network

257
00:09:55,680 --> 00:09:58,080
that we are going to use in our routing

258
00:09:58,080 --> 00:10:01,120
uh procedures so

259
00:10:01,120 --> 00:10:02,320
the uh

260
00:10:02,320 --> 00:10:04,399
we initialize the uh our network as a

261
00:10:04,399 --> 00:10:06,000
complete graph between all of the

262
00:10:06,000 --> 00:10:06,959
players

263
00:10:06,959 --> 00:10:09,680
okay so now yeah we are going to route

264
00:10:09,680 --> 00:10:12,320
these packets from 01 to player 2.

265
00:10:12,320 --> 00:10:14,079
and well of course since there's a

266
00:10:14,079 --> 00:10:16,480
direct pass here then that is what we

267
00:10:16,480 --> 00:10:18,800
will try first so we try to send this

268
00:10:18,800 --> 00:10:21,200
packet one by one from player one to

269
00:10:21,200 --> 00:10:23,680
player two along this edge

270
00:10:23,680 --> 00:10:26,079
until a packet gets dropped

271
00:10:26,079 --> 00:10:28,240
okay if no package gets dropped then of

272
00:10:28,240 --> 00:10:30,399
course player two gets all of this and

273
00:10:30,399 --> 00:10:32,160
he can just decode it easily and we'll

274
00:10:32,160 --> 00:10:33,200
be done

275
00:10:33,200 --> 00:10:35,279
so right now let's just say player 2

276
00:10:35,279 --> 00:10:37,920
does this attack over here and now we

277
00:10:37,920 --> 00:10:40,399
lost the message we must attack it and

278
00:10:40,399 --> 00:10:43,040
uh well right and we are still fine

279
00:10:43,040 --> 00:10:45,279
because we are using ecc so again we can

280
00:10:45,279 --> 00:10:47,839
before losing a packet and now we know

281
00:10:47,839 --> 00:10:50,560
this edge is unreliable so we get rid of

282
00:10:50,560 --> 00:10:53,200
it we erase it and then just like how

283
00:10:53,200 --> 00:10:55,440
routing usually goes we find a different

284
00:10:55,440 --> 00:10:57,360
path so right now we find this path and

285
00:10:57,360 --> 00:10:59,440
we try to spend the remaining packets

286
00:10:59,440 --> 00:11:01,440
along this path

287
00:11:01,440 --> 00:11:03,839
here i want to make a remark that uh

288
00:11:03,839 --> 00:11:04,880
this

289
00:11:04,880 --> 00:11:07,680
this edge is between two other parties

290
00:11:07,680 --> 00:11:10,480
so a packet would never get lost on this

291
00:11:10,480 --> 00:11:12,800
edge because uh player one will always

292
00:11:12,800 --> 00:11:14,560
send it to send a packet and privacy

293
00:11:14,560 --> 00:11:16,079
will never possibly accuse you of not

294
00:11:16,079 --> 00:11:17,200
sending one

295
00:11:17,200 --> 00:11:19,920
so for the purpose of this uh this demo

296
00:11:19,920 --> 00:11:22,079
let's just say the next package gets

297
00:11:22,079 --> 00:11:23,279
dropped here

298
00:11:23,279 --> 00:11:25,920
in that case we erase this edge but we

299
00:11:25,920 --> 00:11:27,680
do not erase this one

300
00:11:27,680 --> 00:11:30,560
so uh general release we totally erase

301
00:11:30,560 --> 00:11:33,279
the packet we only erase the edge when

302
00:11:33,279 --> 00:11:36,240
the package drop actually occurs

303
00:11:36,240 --> 00:11:38,079
and you know the process just repeats

304
00:11:38,079 --> 00:11:40,000
itself so next time we find this edge

305
00:11:40,000 --> 00:11:42,079
and we find this path and then we try to

306
00:11:42,079 --> 00:11:43,040
send the

307
00:11:43,040 --> 00:11:45,200
remaining packets along this path i'm

308
00:11:45,200 --> 00:11:47,839
sure well there are two or two

309
00:11:47,839 --> 00:11:49,920
two conditions where the protocols could

310
00:11:49,920 --> 00:11:52,639
end the first condition is if p1 has no

311
00:11:52,639 --> 00:11:56,399
packets left so everything has been sent

312
00:11:56,399 --> 00:11:59,360
and or the other condition is that uh

313
00:11:59,360 --> 00:12:01,519
there might be no path exists from p1 to

314
00:12:01,519 --> 00:12:03,760
p2 in which case p1 can would not be

315
00:12:03,760 --> 00:12:05,760
able to send the uh whatever packet he

316
00:12:05,760 --> 00:12:06,880
has left

317
00:12:06,880 --> 00:12:08,800
okay so let's talk about the first

318
00:12:08,800 --> 00:12:11,519
situation first so p1 has no packets

319
00:12:11,519 --> 00:12:13,920
left then meaning that the uh

320
00:12:13,920 --> 00:12:15,920
everything has either been uh received

321
00:12:15,920 --> 00:12:18,399
by p2 or has been lost somewhere in the

322
00:12:18,399 --> 00:12:19,440
uh

323
00:12:19,440 --> 00:12:20,320
in

324
00:12:20,320 --> 00:12:23,440
losing transmission has been dropped

325
00:12:23,440 --> 00:12:26,560
okay so uh in this case we actually have

326
00:12:26,560 --> 00:12:29,200
upper bound on the packet loss which is

327
00:12:29,200 --> 00:12:32,480
just the number of edges because recall

328
00:12:32,480 --> 00:12:34,720
every time we lose a packet we remove an

329
00:12:34,720 --> 00:12:37,120
edge so of course we cannot lose more

330
00:12:37,120 --> 00:12:39,120
packets than we have edges so we have

331
00:12:39,120 --> 00:12:40,480
this upper bound

332
00:12:40,480 --> 00:12:42,560
and this upper bound actually uh

333
00:12:42,560 --> 00:12:45,519
corresponds directly in to the number of

334
00:12:45,519 --> 00:12:47,839
errors in this uh error correcting code

335
00:12:47,839 --> 00:12:49,519
in this qe cc

336
00:12:49,519 --> 00:12:51,920
and therefore since we have upper bound

337
00:12:51,920 --> 00:12:53,040
on the uh

338
00:12:53,040 --> 00:12:54,720
number of errors

339
00:12:54,720 --> 00:12:56,800
therefore if the uh if this were set up

340
00:12:56,800 --> 00:12:58,240
correctly

341
00:12:58,240 --> 00:13:00,720
accordingly to the up to the upper bound

342
00:13:00,720 --> 00:13:02,560
players who would always be able to

343
00:13:02,560 --> 00:13:04,720
decode the original message just from

344
00:13:04,720 --> 00:13:07,120
the surviving package

345
00:13:07,120 --> 00:13:09,680
so that is kind of the correctness

346
00:13:09,680 --> 00:13:12,959
property of our construction

347
00:13:12,959 --> 00:13:15,519
for for this case so now uh for this

348
00:13:15,519 --> 00:13:18,079
second case let's say there's no path

349
00:13:18,079 --> 00:13:20,160
exists from player 1 to player 2 then of

350
00:13:20,160 --> 00:13:22,240
course the protocol we have to abort so

351
00:13:22,240 --> 00:13:24,399
let's make it happen so now let's say

352
00:13:24,399 --> 00:13:26,480
this uh this path gets broken and this

353
00:13:26,480 --> 00:13:28,000
object gets broken

354
00:13:28,000 --> 00:13:31,040
and here i claim that we always have

355
00:13:31,040 --> 00:13:35,440
identifiable board and let me uh

356
00:13:35,440 --> 00:13:36,720
let me

357
00:13:36,720 --> 00:13:39,680
explain why okay so

358
00:13:39,680 --> 00:13:41,920
i've got state a couple of facts

359
00:13:41,920 --> 00:13:43,680
a couple observations

360
00:13:43,680 --> 00:13:45,600
so the first observation is the graph is

361
00:13:45,600 --> 00:13:48,560
disconnected uh when this happens uh

362
00:13:48,560 --> 00:13:50,480
because will notepad exist from one

363
00:13:50,480 --> 00:13:53,279
player to another let me that of course

364
00:13:53,279 --> 00:13:55,600
gives us this uh right away and

365
00:13:55,600 --> 00:13:58,160
disconnected is disconnected in the

366
00:13:58,160 --> 00:14:01,199
sense that the thread is made up of more

367
00:14:01,199 --> 00:14:04,240
than one cognitive components okay so

368
00:14:04,240 --> 00:14:06,480
respect number one

369
00:14:06,480 --> 00:14:08,720
and then uh

370
00:14:08,720 --> 00:14:11,760
the other fact i want to

371
00:14:11,760 --> 00:14:14,240
state okay and i it's also observation i

372
00:14:14,240 --> 00:14:16,560
made earlier is that the edges never

373
00:14:16,560 --> 00:14:18,880
break between honest parties

374
00:14:18,880 --> 00:14:21,760
okay so and this fact number two

375
00:14:21,760 --> 00:14:24,399
actually implies fact number three is

376
00:14:24,399 --> 00:14:26,720
that the honest parties are on the same

377
00:14:26,720 --> 00:14:28,720
connected component

378
00:14:28,720 --> 00:14:30,639
okay and lastly

379
00:14:30,639 --> 00:14:33,360
fact number one and three together will

380
00:14:33,360 --> 00:14:36,720
give us a identifiable award because the

381
00:14:36,720 --> 00:14:39,120
honest parties who again are on the same

382
00:14:39,120 --> 00:14:41,839
cognitive component they can just agree

383
00:14:41,839 --> 00:14:45,040
to blend everyone else on different

384
00:14:45,040 --> 00:14:47,920
cognitive components and that will give

385
00:14:47,920 --> 00:14:50,240
us identify forward so that is our

386
00:14:50,240 --> 00:14:53,120
construction and that is our solution to

387
00:14:53,120 --> 00:14:54,880
this cubic setting problem

388
00:14:54,880 --> 00:14:57,680
uh again uh we are putting some

389
00:14:57,680 --> 00:15:00,399
restrictions on this anniversary so

390
00:15:00,399 --> 00:15:02,720
here i also want to make a quick remark

391
00:15:02,720 --> 00:15:04,880
that uh to deal with general adversary

392
00:15:04,880 --> 00:15:06,000
behavior

393
00:15:06,000 --> 00:15:08,320
uh authentication hope will help but uh

394
00:15:08,320 --> 00:15:11,600
as for how exactly does it help well i i

395
00:15:11,600 --> 00:15:13,120
will explain it

396
00:15:13,120 --> 00:15:15,199
uh i'll explain it later in this

397
00:15:15,199 --> 00:15:17,040
presentation

398
00:15:17,040 --> 00:15:19,360
but uh for now let's just uh take this

399
00:15:19,360 --> 00:15:22,240
uh construction vlogging and let's try

400
00:15:22,240 --> 00:15:24,320
to build a multi-party quantum

401
00:15:24,320 --> 00:15:27,120
computation protocol from this uh from

402
00:15:27,120 --> 00:15:29,920
ideas that we get from real team

403
00:15:29,920 --> 00:15:32,000
okay so the uh the first step towards

404
00:15:32,000 --> 00:15:34,000
doing that is so i'm just gonna give a

405
00:15:34,000 --> 00:15:36,720
quick rundown on the uh on how the

406
00:15:36,720 --> 00:15:38,880
existing constructions are built

407
00:15:38,880 --> 00:15:41,680
so as a really rough sketch there are

408
00:15:41,680 --> 00:15:44,000
usually uh three phases so there's

409
00:15:44,000 --> 00:15:46,240
encryption there's evaluation and

410
00:15:46,240 --> 00:15:48,800
there's decryption okay so let's talk

411
00:15:48,800 --> 00:15:50,880
about encryption first

412
00:15:50,880 --> 00:15:55,279
okay so the encryption phase it is uh

413
00:15:55,279 --> 00:15:57,120
if you are familiar with existing

414
00:15:57,120 --> 00:16:00,560
constructions it corresponds to

415
00:16:00,560 --> 00:16:01,600
uh the

416
00:16:01,600 --> 00:16:03,519
first or maybe first half or just first

417
00:16:03,519 --> 00:16:05,600
couple steps of only the first couple of

418
00:16:05,600 --> 00:16:07,920
steps of what is commonly called input

419
00:16:07,920 --> 00:16:10,480
commitment or input encoding but anyway

420
00:16:10,480 --> 00:16:12,880
so let me actually describe what it does

421
00:16:12,880 --> 00:16:15,279
so yeah

422
00:16:15,279 --> 00:16:18,639
so the goal of encryption is to encrypt

423
00:16:18,639 --> 00:16:20,800
every party's input using quantum

424
00:16:20,800 --> 00:16:23,040
authentication code

425
00:16:23,040 --> 00:16:24,880
okay so

426
00:16:24,880 --> 00:16:27,120
and here i say encrypt because it's a

427
00:16:27,120 --> 00:16:29,279
known fact that quantum authentication

428
00:16:29,279 --> 00:16:30,880
implies encryption

429
00:16:30,880 --> 00:16:31,680
so

430
00:16:31,680 --> 00:16:33,279
after this encryption phase so

431
00:16:33,279 --> 00:16:35,920
everyone's input gets encrypted and now

432
00:16:35,920 --> 00:16:38,399
inputs are not protected

433
00:16:38,399 --> 00:16:39,519
in the sense that they are both

434
00:16:39,519 --> 00:16:42,399
descriptive and authenticated so in

435
00:16:42,399 --> 00:16:45,120
other words these inputs are now ready

436
00:16:45,120 --> 00:16:47,040
to be passed around between different

437
00:16:47,040 --> 00:16:48,320
parties

438
00:16:48,320 --> 00:16:50,000
but we are not doing that yet in the

439
00:16:50,000 --> 00:16:51,600
encryption phase there's no quantum

440
00:16:51,600 --> 00:16:53,680
communications yet even though there

441
00:16:53,680 --> 00:16:55,519
might be classical ones because the

442
00:16:55,519 --> 00:16:58,480
parties might come together and jointly

443
00:16:58,480 --> 00:17:01,680
generate your encryption key for this

444
00:17:01,680 --> 00:17:03,360
authentication code

445
00:17:03,360 --> 00:17:06,000
and that is about it for encryption so

446
00:17:06,000 --> 00:17:08,720
now let's move on to evaluation

447
00:17:08,720 --> 00:17:11,359
so in evaluation phase everyone just

448
00:17:11,359 --> 00:17:13,199
evaluates the

449
00:17:13,199 --> 00:17:15,280
evaluate the circuit over the

450
00:17:15,280 --> 00:17:17,359
authentication code

451
00:17:17,359 --> 00:17:18,799
and the

452
00:17:18,799 --> 00:17:20,319
of course it involves the quantum

453
00:17:20,319 --> 00:17:22,880
communications because at the end of the

454
00:17:22,880 --> 00:17:24,880
first phase everyone holds their input

455
00:17:24,880 --> 00:17:26,240
and will have to make those input come

456
00:17:26,240 --> 00:17:28,240
together somehow

457
00:17:28,240 --> 00:17:31,520
okay and at the end of the evaluation

458
00:17:31,520 --> 00:17:34,320
end of evaluation phase everyone would

459
00:17:34,320 --> 00:17:37,200
hold a cipher text of their own output

460
00:17:37,200 --> 00:17:38,799
and then decryption just does how you

461
00:17:38,799 --> 00:17:40,960
think it does so it just

462
00:17:40,960 --> 00:17:42,559
everyone

463
00:17:42,559 --> 00:17:44,799
decrypts the output and go home with it

464
00:17:44,799 --> 00:17:47,440
and be happy and be done okay so that is

465
00:17:47,440 --> 00:17:48,320
uh

466
00:17:48,320 --> 00:17:50,960
that is how the existing constructions

467
00:17:50,960 --> 00:17:52,320
go

468
00:17:52,320 --> 00:17:54,000
uh again this is just a really rough

469
00:17:54,000 --> 00:17:56,240
sketch but let's see how does routing

470
00:17:56,240 --> 00:17:57,919
fit into this picture

471
00:17:57,919 --> 00:18:00,640
well the first question we want to ask

472
00:18:00,640 --> 00:18:02,799
is of course uh can we just incorporate

473
00:18:02,799 --> 00:18:05,120
routing into existing constructions and

474
00:18:05,120 --> 00:18:07,760
get identifiable board so here's what i

475
00:18:07,760 --> 00:18:08,799
mean

476
00:18:08,799 --> 00:18:11,200
as a candidate protocol so we keep the

477
00:18:11,200 --> 00:18:12,720
encryption phases then because it's

478
00:18:12,720 --> 00:18:15,039
local it doesn't really

479
00:18:15,039 --> 00:18:16,720
need routing

480
00:18:16,720 --> 00:18:19,200
and then in the evaluation phase every

481
00:18:19,200 --> 00:18:20,880
time we are supposed to send a content

482
00:18:20,880 --> 00:18:23,520
message we call the routing subroutine

483
00:18:23,520 --> 00:18:26,000
to send all the uh so for every kind of

484
00:18:26,000 --> 00:18:27,760
message we just send it using the

485
00:18:27,760 --> 00:18:29,360
routing subroutine

486
00:18:29,360 --> 00:18:32,080
okay and well does this construction

487
00:18:32,080 --> 00:18:34,799
work the answer is well unfortunately

488
00:18:34,799 --> 00:18:37,520
not and the uh

489
00:18:37,520 --> 00:18:40,480
really uh high level reason is that the

490
00:18:40,480 --> 00:18:42,240
qe cc with would destroy the

491
00:18:42,240 --> 00:18:45,039
authentication so here's what i mean so

492
00:18:45,039 --> 00:18:48,480
recall that this is authenticated

493
00:18:48,480 --> 00:18:49,679
uh

494
00:18:49,679 --> 00:18:52,559
so and the purpose of application is to

495
00:18:52,559 --> 00:18:54,160
prevent the

496
00:18:54,160 --> 00:18:56,480
malicious parties from tampering with

497
00:18:56,480 --> 00:18:57,760
the underlying

498
00:18:57,760 --> 00:18:58,960
context

499
00:18:58,960 --> 00:19:02,080
for land when we take the qecc of

500
00:19:02,080 --> 00:19:04,160
authenticated co-work then the

501
00:19:04,160 --> 00:19:06,400
individual packets are not authenticated

502
00:19:06,400 --> 00:19:07,600
anymore

503
00:19:07,600 --> 00:19:10,799
so when we try to comb routing on this

504
00:19:10,799 --> 00:19:13,360
packet then this package can actually be

505
00:19:13,360 --> 00:19:16,080
tempered by relays uh when i say relays

506
00:19:16,080 --> 00:19:17,039
i mean

507
00:19:17,039 --> 00:19:19,200
i mean in the routing sense as in the

508
00:19:19,200 --> 00:19:21,440
other parties that get to touch the

509
00:19:21,440 --> 00:19:23,280
package between the sender and the

510
00:19:23,280 --> 00:19:24,880
receiver

511
00:19:24,880 --> 00:19:25,760
okay

512
00:19:25,760 --> 00:19:26,960
so

513
00:19:26,960 --> 00:19:29,600
the answer to this question is no there

514
00:19:29,600 --> 00:19:32,080
are many reasons why this is no but and

515
00:19:32,080 --> 00:19:35,039
this is one of the main reasons okay and

516
00:19:35,039 --> 00:19:37,280
uh but still from this uh from this

517
00:19:37,280 --> 00:19:39,679
no-go we start we still get some insight

518
00:19:39,679 --> 00:19:41,360
out of this situation

519
00:19:41,360 --> 00:19:43,280
namely let the

520
00:19:43,280 --> 00:19:45,440
each of the packets have to be protected

521
00:19:45,440 --> 00:19:46,640
separately

522
00:19:46,640 --> 00:19:48,000
so

523
00:19:48,000 --> 00:19:49,520
why don't we just try to switch these

524
00:19:49,520 --> 00:19:52,480
two steps and see what happens so here

525
00:19:52,480 --> 00:19:55,520
we try to first do qe cc and then we

526
00:19:55,520 --> 00:19:58,320
encrypt so now every qcc

527
00:19:58,320 --> 00:20:00,799
codeword is protected

528
00:20:00,799 --> 00:20:02,720
every packet is protected

529
00:20:02,720 --> 00:20:06,880
okay so now the one of the reasonable

530
00:20:06,880 --> 00:20:09,200
i guess so

531
00:20:09,200 --> 00:20:11,120
yeah one of the natural strategies to

532
00:20:11,120 --> 00:20:13,200
test is to just homomorphically evaluate

533
00:20:13,200 --> 00:20:16,640
the qecc so we are evaluating both over

534
00:20:16,640 --> 00:20:19,360
qecc and over authentication code and

535
00:20:19,360 --> 00:20:21,360
everyone still get their output and then

536
00:20:21,360 --> 00:20:23,760
everyone just declares uh locally and

537
00:20:23,760 --> 00:20:26,320
get their output so we want to close

538
00:20:26,320 --> 00:20:28,720
both encryption and qecc after the

539
00:20:28,720 --> 00:20:30,480
computation is done here

540
00:20:30,480 --> 00:20:33,360
okay so this looks promising but

541
00:20:33,360 --> 00:20:35,919
unfortunately this still does not quite

542
00:20:35,919 --> 00:20:37,440
work so

543
00:20:37,440 --> 00:20:39,200
we actually have a concrete attack

544
00:20:39,200 --> 00:20:41,919
against this construction

545
00:20:41,919 --> 00:20:44,400
okay so we call this an invented qe cc

546
00:20:44,400 --> 00:20:47,600
attack so the idea is that this qe cc

547
00:20:47,600 --> 00:20:49,520
can be prepared incorrectly because it

548
00:20:49,520 --> 00:20:52,080
is prepared by dishonest parties

549
00:20:52,080 --> 00:20:54,880
at least some of them are so uh the

550
00:20:54,880 --> 00:20:56,880
dishonest parties can just prepare this

551
00:20:56,880 --> 00:20:59,360
as garbage and then well we know how

552
00:20:59,360 --> 00:21:01,440
they say garbage in garbage out so this

553
00:21:01,440 --> 00:21:03,679
is now also garbage and it becomes

554
00:21:03,679 --> 00:21:07,440
garbage and i will give a simple example

555
00:21:07,440 --> 00:21:10,640
to demonstrate so take this circuit for

556
00:21:10,640 --> 00:21:13,440
example so this circuit it has of course

557
00:21:13,440 --> 00:21:16,559
these two steam upgrades uh

558
00:21:16,559 --> 00:21:18,400
one of the ways to look at this circuit

559
00:21:18,400 --> 00:21:20,960
is uh just that it has two inputs and

560
00:21:20,960 --> 00:21:23,919
then it takes the xor of the two inputs

561
00:21:23,919 --> 00:21:27,120
and writes the result on the last uh

562
00:21:27,120 --> 00:21:28,880
undisputed cr

563
00:21:28,880 --> 00:21:31,200
and now let's try to run this circuit

564
00:21:31,200 --> 00:21:32,640
under the uh

565
00:21:32,640 --> 00:21:34,400
under repetition code and see what

566
00:21:34,400 --> 00:21:36,640
happens and of course we know that the

567
00:21:36,640 --> 00:21:38,960
repetition code is not fully homomorphic

568
00:21:38,960 --> 00:21:41,280
but it is good enough for us to for me

569
00:21:41,280 --> 00:21:43,679
to uh to demonstrate this attack

570
00:21:43,679 --> 00:21:46,799
so let's let's go so zero under

571
00:21:46,799 --> 00:21:48,480
repetition code it gets repeated three

572
00:21:48,480 --> 00:21:50,880
times so it goes to this and these two

573
00:21:50,880 --> 00:21:53,120
are not real code words of repetition

574
00:21:53,120 --> 00:21:54,240
code

575
00:21:54,240 --> 00:21:55,280
and now

576
00:21:55,280 --> 00:21:57,039
uh under repetition call if you want to

577
00:21:57,039 --> 00:21:59,120
do a c naught you just apply to every uh

578
00:21:59,120 --> 00:22:01,520
to every qubit so

579
00:22:01,520 --> 00:22:03,360
this goes to this it does not change

580
00:22:03,360 --> 00:22:05,679
this goes to this again does not change

581
00:22:05,679 --> 00:22:07,919
and this after this two c naught goes to

582
00:22:07,919 --> 00:22:12,320
this so this is the result and now we we

583
00:22:12,320 --> 00:22:14,720
uh decode the uh

584
00:22:14,720 --> 00:22:16,960
we decode the repetition code which is

585
00:22:16,960 --> 00:22:19,360
just by taking the majority vote so this

586
00:22:19,360 --> 00:22:21,039
goes to zero this goes to zero and this

587
00:22:21,039 --> 00:22:24,080
goes to one so this result is saying

588
00:22:24,080 --> 00:22:26,960
that the xor of zero and zero is one

589
00:22:26,960 --> 00:22:30,799
which is not correct obviously so

590
00:22:30,799 --> 00:22:33,360
here we have inconsistent output

591
00:22:33,360 --> 00:22:35,840
and this will break the correctness of

592
00:22:35,840 --> 00:22:38,880
uh of multi-party computation

593
00:22:38,880 --> 00:22:41,120
and therefore this

594
00:22:41,120 --> 00:22:43,600
construction is again no goal

595
00:22:43,600 --> 00:22:46,960
uh but uh still we can try to fix this

596
00:22:46,960 --> 00:22:48,400
attack and maybe get a working

597
00:22:48,400 --> 00:22:50,320
construction of it and this is exactly

598
00:22:50,320 --> 00:22:51,440
what we did

599
00:22:51,440 --> 00:22:53,600
so this is our construction the

600
00:22:53,600 --> 00:22:55,200
difference between this and the previous

601
00:22:55,200 --> 00:22:57,440
slide is of course this middle part so

602
00:22:57,440 --> 00:23:00,000
what we do here is that we decode qecc

603
00:23:00,000 --> 00:23:03,679
here so we combine the package before we

604
00:23:03,679 --> 00:23:06,000
evaluate the circuit and this will fix

605
00:23:06,000 --> 00:23:08,720
the attack that we had because well even

606
00:23:08,720 --> 00:23:10,960
if this were invented then we can also

607
00:23:10,960 --> 00:23:12,880
just we can always just handle it here

608
00:23:12,880 --> 00:23:14,640
and we end up with something valid here

609
00:23:14,640 --> 00:23:16,960
so we are always evaluating over valid

610
00:23:16,960 --> 00:23:18,799
inputs

611
00:23:18,799 --> 00:23:20,320
okay so

612
00:23:20,320 --> 00:23:22,720
this construction it has caveat is that

613
00:23:22,720 --> 00:23:24,960
where we cannot communicate after

614
00:23:24,960 --> 00:23:27,360
decoding qe cc because this is not in

615
00:23:27,360 --> 00:23:29,440
packet form so we cannot we can no

616
00:23:29,440 --> 00:23:31,440
longer send any messages

617
00:23:31,440 --> 00:23:34,080
okay and if we cannot communicate then

618
00:23:34,080 --> 00:23:36,880
it sounds like a job for a very very

619
00:23:36,880 --> 00:23:40,720
very viable quantum for quantum fhe and

620
00:23:40,720 --> 00:23:43,360
that is probably a day of using

621
00:23:43,360 --> 00:23:45,440
so uh to sum everything up and to fill

622
00:23:45,440 --> 00:23:47,279
in the gap let me just uh go through our

623
00:23:47,279 --> 00:23:49,120
protocol step by step

624
00:23:49,120 --> 00:23:51,840
so every everyone start with their own

625
00:23:51,840 --> 00:23:53,600
input they

626
00:23:53,600 --> 00:23:56,240
first create packets of their own input

627
00:23:56,240 --> 00:23:58,799
and then they protect the packets

628
00:23:58,799 --> 00:24:00,559
each of the package

629
00:24:00,559 --> 00:24:03,760
and then they route this package to what

630
00:24:03,760 --> 00:24:06,000
we call a server which is just one which

631
00:24:06,000 --> 00:24:07,919
is not the designated party it doesn't

632
00:24:07,919 --> 00:24:09,440
matter who gets to be a server we can

633
00:24:09,440 --> 00:24:12,559
always say that player one server okay

634
00:24:12,559 --> 00:24:15,760
and then the server here locally

635
00:24:15,760 --> 00:24:18,400
combines these packets and apply the

636
00:24:18,400 --> 00:24:21,760
circuit to get everyone's uh output

637
00:24:21,760 --> 00:24:24,000
and then he creates

638
00:24:24,000 --> 00:24:26,880
packets out of everyone's output

639
00:24:26,880 --> 00:24:29,520
and then after that he routes everyone's

640
00:24:29,520 --> 00:24:31,279
output back to

641
00:24:31,279 --> 00:24:33,039
to where it's supposed to go

642
00:24:33,039 --> 00:24:35,760
and then the parties once they receive

643
00:24:35,760 --> 00:24:37,279
this they can just

644
00:24:37,279 --> 00:24:38,960
decrypt it and decode it to get their

645
00:24:38,960 --> 00:24:40,640
own output

646
00:24:40,640 --> 00:24:42,240
or at least this is the

647
00:24:42,240 --> 00:24:44,480
really high level summary of our

648
00:24:44,480 --> 00:24:47,600
protocol just a sketch and there's a lot

649
00:24:47,600 --> 00:24:49,520
of very interesting issues that we are

650
00:24:49,520 --> 00:24:51,440
brushing under a rock here unfortunately

651
00:24:51,440 --> 00:24:54,320
due to the cons due to time constraints

652
00:24:54,320 --> 00:24:56,400
so i really really encourage you to read

653
00:24:56,400 --> 00:24:57,919
our paper together a more complete

654
00:24:57,919 --> 00:24:59,840
treatment on this

655
00:24:59,840 --> 00:25:01,760
okay so uh

656
00:25:01,760 --> 00:25:03,360
now

657
00:25:03,360 --> 00:25:07,200
to uh to summarize we uh reconstruct the

658
00:25:07,200 --> 00:25:09,440
first multi-party quantum communication

659
00:25:09,440 --> 00:25:12,080
protocol with item 504

660
00:25:12,080 --> 00:25:14,640
and it's also worth and again our

661
00:25:14,640 --> 00:25:17,520
protocol is run efficient and it

662
00:25:17,520 --> 00:25:19,440
preserves the affairs from the uh

663
00:25:19,440 --> 00:25:22,559
classical npc that we use

664
00:25:22,559 --> 00:25:25,600
in terms of future work one of the

665
00:25:25,600 --> 00:25:28,000
direction is to require more dishonest

666
00:25:28,000 --> 00:25:30,400
parties to close the board so here's

667
00:25:30,400 --> 00:25:32,400
what i mean in our protocol because we

668
00:25:32,400 --> 00:25:34,640
use a server so let's say if a server

669
00:25:34,640 --> 00:25:37,360
remote if a server were malicious then

670
00:25:37,360 --> 00:25:39,039
he can just

671
00:25:39,039 --> 00:25:41,840
take you know he just taken one's input

672
00:25:41,840 --> 00:25:43,600
and then he just goes home with it and

673
00:25:43,600 --> 00:25:45,039
then the protocol will have to abort

674
00:25:45,039 --> 00:25:46,720
because everyone has lost their input

675
00:25:46,720 --> 00:25:48,400
and that takes just one disk on this

676
00:25:48,400 --> 00:25:50,720
party to do to close in the board then

677
00:25:50,720 --> 00:25:52,559
the server

678
00:25:52,559 --> 00:25:54,080
so now uh

679
00:25:54,080 --> 00:25:55,919
so we are wondering if there's a better

680
00:25:55,919 --> 00:25:58,159
construction that can tolerate more on

681
00:25:58,159 --> 00:26:00,640
this tolerate more dishonest parties

682
00:26:00,640 --> 00:26:03,520
before the protocol have to afford

683
00:26:03,520 --> 00:26:04,559
okay

684
00:26:04,559 --> 00:26:07,360
so that is one of the open problems and

685
00:26:07,360 --> 00:26:08,640
the

686
00:26:08,640 --> 00:26:10,799
the other open problem we have is that

687
00:26:10,799 --> 00:26:12,720
we are wondering about the possibilities

688
00:26:12,720 --> 00:26:15,039
for getting a constant wrong multi-party

689
00:26:15,039 --> 00:26:17,200
quantum computation with identifiable

690
00:26:17,200 --> 00:26:21,440
board so here's what we mean so uh we

691
00:26:21,440 --> 00:26:23,279
are wondering if it's possible to get

692
00:26:23,279 --> 00:26:25,919
this and this at the same time so of

693
00:26:25,919 --> 00:26:27,919
course we've accomplished this and

694
00:26:27,919 --> 00:26:30,720
there's the other work that we have and

695
00:26:30,720 --> 00:26:33,919
there is work that uh that achieves this

696
00:26:33,919 --> 00:26:35,679
but then we are wondering if it is

697
00:26:35,679 --> 00:26:37,760
possible to get both at the same time

698
00:26:37,760 --> 00:26:39,840
and right now our construction is not

699
00:26:39,840 --> 00:26:41,679
concerned wrong because routing is a

700
00:26:41,679 --> 00:26:44,080
bottleneck because we need to route the

701
00:26:44,080 --> 00:26:46,159
package one by one

702
00:26:46,159 --> 00:26:48,880
uh to to all the parties to different

703
00:26:48,880 --> 00:26:50,840
parties

704
00:26:50,840 --> 00:26:54,400
so right now and right over suspecting

705
00:26:54,400 --> 00:26:57,039
that it might be impossible to uh to get

706
00:26:57,039 --> 00:26:58,720
both of these but uh it's something

707
00:26:58,720 --> 00:27:00,480
worth thinking about

708
00:27:00,480 --> 00:27:02,720
so uh thank you very much

709
00:27:02,720 --> 00:27:06,360
and that's all i have

