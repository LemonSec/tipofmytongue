1
00:00:00,799 --> 00:00:02,800
hello my name is atma and i will be

2
00:00:02,800 --> 00:00:04,400
presenting our work on compressing

3
00:00:04,400 --> 00:00:06,799
proofs of chaotic and partial knowledge

4
00:00:06,799 --> 00:00:08,960
this is joint's work with my co-authors

5
00:00:08,960 --> 00:00:12,719
ronald kalmer and sarah sphere

6
00:00:12,719 --> 00:00:14,320
in proofs of partial knowledge approver

7
00:00:14,320 --> 00:00:17,199
claims no k secret solutions out of n

8
00:00:17,199 --> 00:00:19,359
public problem instances

9
00:00:19,359 --> 00:00:21,439
it wishes to convince a verifier that it

10
00:00:21,439 --> 00:00:22,480
does

11
00:00:22,480 --> 00:00:24,640
without the verifier learning which k

12
00:00:24,640 --> 00:00:27,119
out of n secrets the proofer knows

13
00:00:27,119 --> 00:00:29,039
this problem was introduced by kramer

14
00:00:29,039 --> 00:00:33,560
dumbguide and schoolmarkers at crypto94

15
00:00:33,760 --> 00:00:36,000
some examples are

16
00:00:36,000 --> 00:00:38,320
proving knowledge of k out of n discrete

17
00:00:38,320 --> 00:00:39,680
logarithms

18
00:00:39,680 --> 00:00:42,000
or proving knowledge of the openings of

19
00:00:42,000 --> 00:00:44,719
k out of n commitments

20
00:00:44,719 --> 00:00:45,920
or

21
00:00:45,920 --> 00:00:48,800
proving knowledge of k out of n pre

22
00:00:48,800 --> 00:00:50,480
images with respect to some hash

23
00:00:50,480 --> 00:00:52,640
function h of

24
00:00:52,640 --> 00:00:56,320
bit strings y 1 up to y n

25
00:00:56,320 --> 00:00:58,800
proofs of partial knowledge have found

26
00:00:58,800 --> 00:01:01,760
numerous applications uh in particular

27
00:01:01,760 --> 00:01:04,559
the case k equals one so one out of n

28
00:01:04,559 --> 00:01:06,960
proves partial knowledge some examples

29
00:01:06,960 --> 00:01:09,760
are threshold and ring signature schemes

30
00:01:09,760 --> 00:01:11,840
e-voting protocols and confidential

31
00:01:11,840 --> 00:01:14,880
transaction systems

32
00:01:15,119 --> 00:01:18,000
on the other end we have the the very

33
00:01:18,000 --> 00:01:19,439
generic circuit journal knowledge

34
00:01:19,439 --> 00:01:21,680
protocols in a circuit zero knowledge

35
00:01:21,680 --> 00:01:25,200
protocol the the proofer wishes to prove

36
00:01:25,200 --> 00:01:27,920
knowledge of a secret vector x that

37
00:01:27,920 --> 00:01:30,880
satisfies a constraint c of x equals

38
00:01:30,880 --> 00:01:31,840
zero

39
00:01:31,840 --> 00:01:35,200
captured by some arithmetic circuit c

40
00:01:35,200 --> 00:01:37,280
so recently we've seen many advances in

41
00:01:37,280 --> 00:01:39,360
circuit zero knowledge protocols snark

42
00:01:39,360 --> 00:01:41,119
starks bullet proofs compressed sigma

43
00:01:41,119 --> 00:01:43,040
protocol theory

44
00:01:43,040 --> 00:01:45,119
different lines of work achieving

45
00:01:45,119 --> 00:01:46,560
logarithmic or even constant

46
00:01:46,560 --> 00:01:48,799
communication complexity

47
00:01:48,799 --> 00:01:52,479
for the circuit zero knowledge problem

48
00:01:53,119 --> 00:01:55,439
circuit zero knowledge protocols also

49
00:01:55,439 --> 00:01:58,560
immediately give a solution

50
00:01:58,560 --> 00:02:00,880
for the crucial partial knowledge

51
00:02:00,880 --> 00:02:02,000
problem

52
00:02:02,000 --> 00:02:04,000
what we can do namely is we can capture

53
00:02:04,000 --> 00:02:06,240
the proof of partial knowledge relation

54
00:02:06,240 --> 00:02:08,720
by an arithmetic circuit

55
00:02:08,720 --> 00:02:10,560
so for example for the one out of end

56
00:02:10,560 --> 00:02:12,560
case we could construct an arithmetic

57
00:02:12,560 --> 00:02:15,520
circuit that evaluates to zero

58
00:02:15,520 --> 00:02:18,160
if and only if the input x to this

59
00:02:18,160 --> 00:02:20,239
arithmetic circuit is the discrete

60
00:02:20,239 --> 00:02:22,480
logarithm of one of the public problem

61
00:02:22,480 --> 00:02:25,599
instances vi

62
00:02:25,840 --> 00:02:26,800
if we

63
00:02:26,800 --> 00:02:28,400
capture this proof of partial knowledge

64
00:02:28,400 --> 00:02:30,319
relation by an arithmetic circuit then

65
00:02:30,319 --> 00:02:32,480
we can apply a circuit journalist

66
00:02:32,480 --> 00:02:35,200
protocol in a black box matter and

67
00:02:35,200 --> 00:02:37,760
obtain a proof of partial knowledge

68
00:02:37,760 --> 00:02:40,400
so this is a somewhat indirect approach

69
00:02:40,400 --> 00:02:42,640
in which we first capture

70
00:02:42,640 --> 00:02:45,040
the proof of partial knowledge relation

71
00:02:45,040 --> 00:02:48,319
by an arithmetic circuit

72
00:02:48,720 --> 00:02:51,920
this is a quite a quite a strong

73
00:02:51,920 --> 00:02:53,680
approach because it works for arbitrary

74
00:02:53,680 --> 00:02:56,239
k and n and you can achieve logarithmic

75
00:02:56,239 --> 00:02:57,599
or even constant communication

76
00:02:57,599 --> 00:03:00,000
complexity depending on the circuit zero

77
00:03:00,000 --> 00:03:04,000
knowledge protocol that you use

78
00:03:04,000 --> 00:03:05,120
however there are some clear

79
00:03:05,120 --> 00:03:06,640
disadvantages of the circuit zero

80
00:03:06,640 --> 00:03:08,159
knowledge approach

81
00:03:08,159 --> 00:03:11,840
first it is conceptually superfluous

82
00:03:11,840 --> 00:03:14,480
the arithmetic circuits that

83
00:03:14,480 --> 00:03:17,280
result in this this approach are quite

84
00:03:17,280 --> 00:03:18,560
complicated

85
00:03:18,560 --> 00:03:21,040
uh and and they're really tailored to a

86
00:03:21,040 --> 00:03:23,760
specific institution so for example if

87
00:03:23,760 --> 00:03:26,159
we want to prove discrete logarithms in

88
00:03:26,159 --> 00:03:27,920
another group then

89
00:03:27,920 --> 00:03:30,480
we would require another arithmetic

90
00:03:30,480 --> 00:03:33,920
circuit capturing the the relation

91
00:03:33,920 --> 00:03:36,080
so this is

92
00:03:36,080 --> 00:03:39,440
unnecessarily complicated in that sense

93
00:03:39,440 --> 00:03:41,040
moreover

94
00:03:41,040 --> 00:03:42,480
this approach is asymptotically

95
00:03:42,480 --> 00:03:44,239
efficient as we already mentioned we can

96
00:03:44,239 --> 00:03:46,720
achieve communication complexity that is

97
00:03:46,720 --> 00:03:50,000
logarithmic or even constant

98
00:03:50,000 --> 00:03:50,959
but

99
00:03:50,959 --> 00:03:53,280
these large or complicated arithmetic

100
00:03:53,280 --> 00:03:57,599
circuits can cause a practical overhead

101
00:03:57,599 --> 00:04:00,159
and also note that you have to generate

102
00:04:00,159 --> 00:04:02,400
store and process all these large

103
00:04:02,400 --> 00:04:05,360
aromatic circuits so this is a practical

104
00:04:05,360 --> 00:04:08,959
overhead that we want to avoid

105
00:04:10,400 --> 00:04:13,040
so the goal of this work is to develop a

106
00:04:13,040 --> 00:04:15,519
direct approach avoiding the overhead of

107
00:04:15,519 --> 00:04:17,680
large arithmetic circuits

108
00:04:17,680 --> 00:04:19,120
and our approach should work for

109
00:04:19,120 --> 00:04:21,199
arbitrary k and n

110
00:04:21,199 --> 00:04:23,120
and we aim to achieve a logarithmic

111
00:04:23,120 --> 00:04:26,479
communication complexity

112
00:04:26,639 --> 00:04:28,560
there has been prior work on proofs of

113
00:04:28,560 --> 00:04:29,919
pressure knowledge

114
00:04:29,919 --> 00:04:32,320
however for different reasons prior work

115
00:04:32,320 --> 00:04:34,880
does not achieve our goal

116
00:04:34,880 --> 00:04:36,560
so we already mentioned proofs of

117
00:04:36,560 --> 00:04:38,800
partial knowledge introduced by kramer

118
00:04:38,800 --> 00:04:40,840
dungard and schumachers in

119
00:04:40,840 --> 00:04:43,360
1994. so

120
00:04:43,360 --> 00:04:45,120
the ingredients of their approved

121
00:04:45,120 --> 00:04:47,199
partial knowledge are a basic sigma

122
00:04:47,199 --> 00:04:49,919
protocol a special honors verifier zero

123
00:04:49,919 --> 00:04:52,000
knowledge simulator and a linear secret

124
00:04:52,000 --> 00:04:54,080
sharing scheme

125
00:04:54,080 --> 00:04:56,240
their approach works for arbitrary k and

126
00:04:56,240 --> 00:04:57,040
n

127
00:04:57,040 --> 00:04:58,960
and also for a broad class of sigma

128
00:04:58,960 --> 00:05:01,039
protocols so not just for the sigma

129
00:05:01,039 --> 00:05:02,560
protocol

130
00:05:02,560 --> 00:05:04,160
for proving knowledge of a discrete

131
00:05:04,160 --> 00:05:06,160
logarithm but for for many other sigma

132
00:05:06,160 --> 00:05:07,680
particles

133
00:05:07,680 --> 00:05:09,680
however their approach is a linear

134
00:05:09,680 --> 00:05:12,160
communication complexity so linear in

135
00:05:12,160 --> 00:05:14,320
end

136
00:05:16,080 --> 00:05:18,160
on the other end we have a much more

137
00:05:18,160 --> 00:05:20,720
recent approach for one out of many

138
00:05:20,720 --> 00:05:22,800
proofs of partial knowledge introduced

139
00:05:22,800 --> 00:05:27,479
by codes and goal wise in 2015.

140
00:05:27,759 --> 00:05:29,919
this uh their protocol focuses on the

141
00:05:29,919 --> 00:05:32,639
special case k equals one so really one

142
00:05:32,639 --> 00:05:36,080
out of uh and proof of partial knowledge

143
00:05:36,080 --> 00:05:38,240
and it does not generalize well to

144
00:05:38,240 --> 00:05:40,479
arbitrary key

145
00:05:40,479 --> 00:05:42,240
so informally their approach is

146
00:05:42,240 --> 00:05:44,960
basically to commit to the bits

147
00:05:44,960 --> 00:05:48,479
of the index of the known secret

148
00:05:48,479 --> 00:05:50,880
uh and and then they use a sigma

149
00:05:50,880 --> 00:05:52,800
protocol for for proving the desired

150
00:05:52,800 --> 00:05:55,120
relations

151
00:05:55,120 --> 00:05:57,520
because they only commit to the to the

152
00:05:57,520 --> 00:05:59,919
bits of the index of the known secret

153
00:05:59,919 --> 00:06:01,840
they achieve a logarithmic communication

154
00:06:01,840 --> 00:06:03,919
complexity

155
00:06:03,919 --> 00:06:06,319
this approach has also been instantiated

156
00:06:06,319 --> 00:06:07,120
uh

157
00:06:07,120 --> 00:06:12,160
for for a lattice assumption in in 2019

158
00:06:12,160 --> 00:06:13,759
of course this lettuce assumption or

159
00:06:13,759 --> 00:06:15,280
this institution required some

160
00:06:15,280 --> 00:06:17,600
adaptations that were

161
00:06:17,600 --> 00:06:20,080
worked out by the authors of this this

162
00:06:20,080 --> 00:06:22,400
paper

163
00:06:23,280 --> 00:06:25,360
so prior works either achieve a linear

164
00:06:25,360 --> 00:06:27,520
communication complexity or they are

165
00:06:27,520 --> 00:06:30,080
tailored to the specific case k equals

166
00:06:30,080 --> 00:06:31,280
1.

167
00:06:31,280 --> 00:06:33,199
so we aim to construct a protocol that

168
00:06:33,199 --> 00:06:35,840
works for arbitrary k and n and achieves

169
00:06:35,840 --> 00:06:38,639
a logarithmic communication complexity

170
00:06:38,639 --> 00:06:41,199
we will be using techniques from the

171
00:06:41,199 --> 00:06:43,520
proofs of partial knowledge

172
00:06:43,520 --> 00:06:46,240
approach of cds 94

173
00:06:46,240 --> 00:06:49,120
but we will also building uh all the

174
00:06:49,120 --> 00:06:50,639
techniques from compressed sigma

175
00:06:50,639 --> 00:06:56,080
protocol 2 we introduced at crypto 2020.

176
00:06:56,639 --> 00:06:59,759
so compress sigma protocol theory

177
00:06:59,759 --> 00:07:01,840
what they basically do is they develop a

178
00:07:01,840 --> 00:07:03,919
compression mechanism for a basic sigma

179
00:07:03,919 --> 00:07:06,639
protocol for linear statements

180
00:07:06,639 --> 00:07:08,240
so they start with a basic sigma

181
00:07:08,240 --> 00:07:10,000
protocol that has linear communication

182
00:07:10,000 --> 00:07:11,759
complexity and they develop a

183
00:07:11,759 --> 00:07:14,080
compression mechanism that reduces the

184
00:07:14,080 --> 00:07:16,080
communication complexity of this basic

185
00:07:16,080 --> 00:07:18,720
sigma protocol from linear down to

186
00:07:18,720 --> 00:07:21,520
logarithmic

187
00:07:21,840 --> 00:07:24,319
so then they also show how to

188
00:07:24,319 --> 00:07:26,960
use this compressed sigma protocol for

189
00:07:26,960 --> 00:07:29,360
linear statements to develop a circuit

190
00:07:29,360 --> 00:07:31,360
zero knowledge protocol for arbitrary

191
00:07:31,360 --> 00:07:33,759
adoratic circuit relations

192
00:07:33,759 --> 00:07:36,319
so also for non-linear relations and the

193
00:07:36,319 --> 00:07:37,440
key

194
00:07:37,440 --> 00:07:40,160
technique is linearization

195
00:07:40,160 --> 00:07:42,000
technique based on arithmetic secret

196
00:07:42,000 --> 00:07:44,160
sharing

197
00:07:44,160 --> 00:07:46,240
they have shown how to instantiate this

198
00:07:46,240 --> 00:07:48,160
theory from a variety of hardness

199
00:07:48,160 --> 00:07:50,720
assumptions so for example

200
00:07:50,720 --> 00:07:53,120
ring sis assumption discrete logarithmic

201
00:07:53,120 --> 00:07:54,720
section the

202
00:07:54,720 --> 00:07:57,199
strong rsa assumption or the knowledge

203
00:07:57,199 --> 00:08:00,319
of exponent assumption

204
00:08:01,759 --> 00:08:03,599
so given this compressed sigma protocol

205
00:08:03,599 --> 00:08:07,039
theory a natural question that arises is

206
00:08:07,039 --> 00:08:09,199
whether we can compress the proof of

207
00:08:09,199 --> 00:08:11,599
partial knowledge sigma protocol of cds

208
00:08:11,599 --> 00:08:12,879
94

209
00:08:12,879 --> 00:08:15,039
to reduce the communication complexity

210
00:08:15,039 --> 00:08:17,440
of their approach from from linear down

211
00:08:17,440 --> 00:08:20,319
to logarithmic

212
00:08:21,440 --> 00:08:23,520
so in our work we basically show that

213
00:08:23,520 --> 00:08:25,520
yes we can do that we can compress the

214
00:08:25,520 --> 00:08:28,000
proofs of partial knowledge approach

215
00:08:28,000 --> 00:08:31,599
of a cds94 but it does require some

216
00:08:31,599 --> 00:08:33,440
adaptations and some twists to the

217
00:08:33,440 --> 00:08:37,039
original protocols so first we need to

218
00:08:37,039 --> 00:08:39,039
develop a novel twist on the basic

219
00:08:39,039 --> 00:08:40,719
compressed sigma protocol for proving

220
00:08:40,719 --> 00:08:43,200
linear statements

221
00:08:43,200 --> 00:08:46,080
from ac20

222
00:08:46,080 --> 00:08:47,600
what we have to do is we have to show

223
00:08:47,600 --> 00:08:50,399
that we can open arbitrary homomorphisms

224
00:08:50,399 --> 00:08:51,920
instead of

225
00:08:51,920 --> 00:08:54,800
only linear forms so basically the the

226
00:08:54,800 --> 00:08:59,200
crypto 2020 paper was focused or was

227
00:08:59,200 --> 00:09:01,279
restricted to opening linear forms on

228
00:09:01,279 --> 00:09:03,279
committed factors and now what we want

229
00:09:03,279 --> 00:09:04,880
to do is we want to open arbitrary

230
00:09:04,880 --> 00:09:06,399
homomorphisms

231
00:09:06,399 --> 00:09:08,720
so this is the first generalization that

232
00:09:08,720 --> 00:09:12,560
is required for for our techniques

233
00:09:12,560 --> 00:09:14,720
and second we also have to

234
00:09:14,720 --> 00:09:19,440
adapt the cds 94 approach

235
00:09:19,440 --> 00:09:22,320
basically the the sigma protocol in the

236
00:09:22,320 --> 00:09:25,360
original paper in the 1994 paper is not

237
00:09:25,360 --> 00:09:28,399
compressible so it's not amenable to the

238
00:09:28,399 --> 00:09:30,080
compression mechanism of compressed

239
00:09:30,080 --> 00:09:31,920
sigma protocol theory

240
00:09:31,920 --> 00:09:34,160
so what we do is we basically adapt the

241
00:09:34,160 --> 00:09:36,399
sigma protocol to make sure that we can

242
00:09:36,399 --> 00:09:39,440
apply compression

243
00:09:40,800 --> 00:09:43,440
all together we

244
00:09:43,440 --> 00:09:46,560
we derived at following the main result

245
00:09:46,560 --> 00:09:48,399
so there exists a protocol proving

246
00:09:48,399 --> 00:09:50,000
knowledge of careful and discrete

247
00:09:50,000 --> 00:09:51,920
logarithms

248
00:09:51,920 --> 00:09:54,000
and its communication costs from proofer

249
00:09:54,000 --> 00:09:57,839
to verifier are indeed logarithmic

250
00:09:57,839 --> 00:10:00,240
and this approach works for arbitrary k

251
00:10:00,240 --> 00:10:03,240
and

252
00:10:04,320 --> 00:10:06,079
our main result we also have a number of

253
00:10:06,079 --> 00:10:08,399
extensions to our main proof of partial

254
00:10:08,399 --> 00:10:10,079
knowledge protocol

255
00:10:10,079 --> 00:10:11,680
first we show how to reduce the

256
00:10:11,680 --> 00:10:14,320
communication complexity further

257
00:10:14,320 --> 00:10:15,839
with a factor two by using a

258
00:10:15,839 --> 00:10:19,839
parent-based commitment scheme

259
00:10:20,000 --> 00:10:21,120
second

260
00:10:21,120 --> 00:10:22,880
our main protocol is for proving

261
00:10:22,880 --> 00:10:24,240
knowledge of care and discrete

262
00:10:24,240 --> 00:10:26,320
logarithms

263
00:10:26,320 --> 00:10:27,839
this functionality has a natural

264
00:10:27,839 --> 00:10:29,720
extension to

265
00:10:29,720 --> 00:10:31,279
multi-exponentiations and proving

266
00:10:31,279 --> 00:10:33,040
knowledge of k out of n

267
00:10:33,040 --> 00:10:36,480
vector commitment openings

268
00:10:36,480 --> 00:10:38,560
also these techniques are compatible

269
00:10:38,560 --> 00:10:40,240
with with circuit share knowledge

270
00:10:40,240 --> 00:10:42,800
protocols so this basically uses the

271
00:10:42,800 --> 00:10:44,800
plug-and-play nature of compressed sigma

272
00:10:44,800 --> 00:10:47,040
protocol theory

273
00:10:47,040 --> 00:10:49,440
what we can do is we can for example

274
00:10:49,440 --> 00:10:51,440
prove that

275
00:10:51,440 --> 00:10:55,279
not only that we know k out of n secrets

276
00:10:55,279 --> 00:10:56,079
but

277
00:10:56,079 --> 00:10:58,560
that also d scale of n secrets satisfy

278
00:10:58,560 --> 00:11:00,800
some arbitrary constraints captured by

279
00:11:00,800 --> 00:11:04,079
an arithmetic circuit c

280
00:11:05,680 --> 00:11:08,560
a first application in was was presented

281
00:11:08,560 --> 00:11:11,040
in a follow-up paper 16 threshold

282
00:11:11,040 --> 00:11:12,800
signature schemes with a transparent

283
00:11:12,800 --> 00:11:15,040
setup so these were the first threshold

284
00:11:15,040 --> 00:11:17,279
signature schemes without a trusted

285
00:11:17,279 --> 00:11:19,920
setup for which the threshold signatures

286
00:11:19,920 --> 00:11:21,120
have size

287
00:11:21,120 --> 00:11:24,560
logarithmic in end

288
00:11:25,839 --> 00:11:27,839
and also let lettuce instantiation

289
00:11:27,839 --> 00:11:29,440
should be possible

290
00:11:29,440 --> 00:11:30,720
so

291
00:11:30,720 --> 00:11:32,000
recently

292
00:11:32,000 --> 00:11:34,720
also at crypto 2021

293
00:11:34,720 --> 00:11:37,279
a compressed sigma protocol theory was

294
00:11:37,279 --> 00:11:39,440
instantiated from lettuce assumptions

295
00:11:39,440 --> 00:11:41,200
and using these techniques it should be

296
00:11:41,200 --> 00:11:42,959
possible to

297
00:11:42,959 --> 00:11:45,120
to instantiate our proofs of partial

298
00:11:45,120 --> 00:11:46,880
knowledge protocols

299
00:11:46,880 --> 00:11:50,000
from a lattice assumption

300
00:11:50,480 --> 00:11:52,480
so you've already seen that

301
00:11:52,480 --> 00:11:54,160
our crucial partial knowledge protocol

302
00:11:54,160 --> 00:11:57,040
achieves a logarithmic communication

303
00:11:57,040 --> 00:11:59,120
complexity

304
00:11:59,120 --> 00:12:01,519
but also the concrete communication

305
00:12:01,519 --> 00:12:04,000
costs are comparable or competitive with

306
00:12:04,000 --> 00:12:07,120
with other approaches so for example

307
00:12:07,120 --> 00:12:08,320
our

308
00:12:08,320 --> 00:12:10,480
communication costs are compatible

309
00:12:10,480 --> 00:12:12,399
comparable with the dedicated solutions

310
00:12:12,399 --> 00:12:15,120
for the case k equals one so we achieve

311
00:12:15,120 --> 00:12:17,200
the same constants even for these

312
00:12:17,200 --> 00:12:19,200
approaches if we instantiate our generic

313
00:12:19,200 --> 00:12:23,279
solution for the case k equals one

314
00:12:23,279 --> 00:12:25,120
and if k

315
00:12:25,120 --> 00:12:25,839
is

316
00:12:25,839 --> 00:12:28,800
in the order of omega and divided by log

317
00:12:28,800 --> 00:12:30,000
n

318
00:12:30,000 --> 00:12:31,600
then we achieve an asymptotic

319
00:12:31,600 --> 00:12:33,519
improvement over the indirect circuit

320
00:12:33,519 --> 00:12:36,480
zero knowledge approach

321
00:12:37,519 --> 00:12:39,279
before we explain our techniques we

322
00:12:39,279 --> 00:12:41,519
recalled crypto94 proof of partial

323
00:12:41,519 --> 00:12:43,040
knowledge protocol

324
00:12:43,040 --> 00:12:45,360
we consider the following scenario there

325
00:12:45,360 --> 00:12:48,639
are n public group elements p1 up to pn

326
00:12:48,639 --> 00:12:52,160
and for k out of n indices i the proofer

327
00:12:52,160 --> 00:12:54,240
knows the discrete logarithm

328
00:12:54,240 --> 00:12:56,079
these indices are captured by a secret

329
00:12:56,079 --> 00:12:58,320
subset s and discrete logarithms are

330
00:12:58,320 --> 00:13:02,000
captured by a secret vector x

331
00:13:02,000 --> 00:13:04,480
moreover we will use a basic sigma

332
00:13:04,480 --> 00:13:07,680
protocol by for proving knowledge of a

333
00:13:07,680 --> 00:13:09,920
single discrete logarithm together which

334
00:13:09,920 --> 00:13:12,079
it's special on this verifier zero

335
00:13:12,079 --> 00:13:14,720
knowledge simulator

336
00:13:14,720 --> 00:13:17,440
informally for the discrete logarithms

337
00:13:17,440 --> 00:13:20,480
that it knows the proofer runs k honest

338
00:13:20,480 --> 00:13:23,040
instances of sigma vertical pi and for

339
00:13:23,040 --> 00:13:25,040
the n minus k discrete logarithms that

340
00:13:25,040 --> 00:13:28,720
it does not know it runs the simulator

341
00:13:28,720 --> 00:13:30,800
moreover the proof will use a linear

342
00:13:30,800 --> 00:13:32,959
secret sharing scheme to make sure the

343
00:13:32,959 --> 00:13:34,880
verifier does not know for which

344
00:13:34,880 --> 00:13:37,680
instances the protocol was run honestly

345
00:13:37,680 --> 00:13:39,760
and for which instances the

346
00:13:39,760 --> 00:13:40,880
protocol

347
00:13:40,880 --> 00:13:43,199
uses the or the prover uses the special

348
00:13:43,199 --> 00:13:44,560
honest clarifier zero knowledge

349
00:13:44,560 --> 00:13:46,639
simulator

350
00:13:46,639 --> 00:13:48,639
moreover the linear secret sharing

351
00:13:48,639 --> 00:13:50,959
scheme makes sure that the proofer must

352
00:13:50,959 --> 00:13:53,760
evaluate the protocol honestly for at

353
00:13:53,760 --> 00:13:56,560
least k problem instances

354
00:13:56,560 --> 00:13:58,720
so it must know at least k discrete

355
00:13:58,720 --> 00:14:00,959
logarithms

356
00:14:00,959 --> 00:14:03,519
so in more details

357
00:14:03,519 --> 00:14:04,880
in the first step

358
00:14:04,880 --> 00:14:07,440
the proofer computes k first messages

359
00:14:07,440 --> 00:14:10,160
honestly and simulates n minus k

360
00:14:10,160 --> 00:14:12,880
transcripts

361
00:14:13,920 --> 00:14:15,680
the second message

362
00:14:15,680 --> 00:14:17,920
the verifier samples a single challenge

363
00:14:17,920 --> 00:14:20,480
for all n problem instances

364
00:14:20,480 --> 00:14:24,480
and sends it to the or to the approver

365
00:14:24,720 --> 00:14:27,040
in the third step the proofer computes

366
00:14:27,040 --> 00:14:30,399
an n minus k plus one comma n secret

367
00:14:30,399 --> 00:14:33,839
sharing c one up to c n of c

368
00:14:33,839 --> 00:14:36,399
such that the n minus k challenges

369
00:14:36,399 --> 00:14:39,040
simulated in the first step

370
00:14:39,040 --> 00:14:42,800
corresponds to the secret shares

371
00:14:43,199 --> 00:14:44,880
parameters of the secret sharing scheme

372
00:14:44,880 --> 00:14:47,040
are such that the proofer can control at

373
00:14:47,040 --> 00:14:49,120
most n minus k entries of the secret

374
00:14:49,120 --> 00:14:50,880
sharing

375
00:14:50,880 --> 00:14:53,040
for the other k instances the proofer

376
00:14:53,040 --> 00:14:55,440
must compute the final response honestly

377
00:14:55,440 --> 00:14:57,360
because it cannot control the

378
00:14:57,360 --> 00:14:59,199
challenge corresponding to that problem

379
00:14:59,199 --> 00:15:01,440
instance

380
00:15:01,440 --> 00:15:03,680
so the proofer sends the secret sharing

381
00:15:03,680 --> 00:15:06,000
an old final response to the verifier

382
00:15:06,000 --> 00:15:08,720
who verifies all and transcripts and the

383
00:15:08,720 --> 00:15:12,120
secret sharing

384
00:15:12,399 --> 00:15:14,160
let us now discuss our twist on a

385
00:15:14,160 --> 00:15:16,000
compressed sigma protocol

386
00:15:16,000 --> 00:15:18,959
a central protocol of ac20 shows how to

387
00:15:18,959 --> 00:15:21,440
open arbitrary linear forms on compactly

388
00:15:21,440 --> 00:15:23,120
committed factors

389
00:15:23,120 --> 00:15:24,720
this protocol has a logarithmic

390
00:15:24,720 --> 00:15:27,360
communication complexity

391
00:15:27,360 --> 00:15:29,920
more precisely what this protocol does

392
00:15:29,920 --> 00:15:31,920
is it allows a proofer to prove

393
00:15:31,920 --> 00:15:35,120
knowledge of a commitment opening x

394
00:15:35,120 --> 00:15:38,560
such that l of x equals y for some

395
00:15:38,560 --> 00:15:41,839
linear form l

396
00:15:43,279 --> 00:15:45,440
so what we show in our paper is that

397
00:15:45,440 --> 00:15:47,680
this functionality extends to opening

398
00:15:47,680 --> 00:15:49,920
arbitrary homomorphisms

399
00:15:49,920 --> 00:15:54,480
so instead of having a codomain zq

400
00:15:54,480 --> 00:15:57,040
we now have a homomorphism for which the

401
00:15:57,040 --> 00:16:00,480
codomain is an arbitrary group g

402
00:16:00,480 --> 00:16:03,519
so this extension comes at a cost as it

403
00:16:03,519 --> 00:16:06,800
increases the communication costs

404
00:16:06,800 --> 00:16:09,920
by a factor 2.

405
00:16:10,800 --> 00:16:12,560
next we note that even with our

406
00:16:12,560 --> 00:16:14,480
generalization

407
00:16:14,480 --> 00:16:17,199
of the compression mechanism of ac20 the

408
00:16:17,199 --> 00:16:19,600
cds 94 sigma protocol is not

409
00:16:19,600 --> 00:16:21,519
compressible

410
00:16:21,519 --> 00:16:24,000
and the reason is basically that first

411
00:16:24,000 --> 00:16:24,959
of all

412
00:16:24,959 --> 00:16:28,079
the first message of the cds 94 sigma

413
00:16:28,079 --> 00:16:29,199
protocol

414
00:16:29,199 --> 00:16:32,160
uh has already size linear in n

415
00:16:32,160 --> 00:16:33,839
so we have to send first messages for

416
00:16:33,839 --> 00:16:36,880
all and instances

417
00:16:36,880 --> 00:16:39,680
and also the final message

418
00:16:39,680 --> 00:16:42,800
contains the secret sharing c1 up to cn

419
00:16:42,800 --> 00:16:45,360
this secret sharing is not compressible

420
00:16:45,360 --> 00:16:46,639
so basically

421
00:16:46,639 --> 00:16:48,480
we cannot apply the compression

422
00:16:48,480 --> 00:16:49,839
mechanism

423
00:16:49,839 --> 00:16:54,240
to the cds 94 sigma protocol

424
00:16:54,240 --> 00:16:56,079
for this reason we developed a novel

425
00:16:56,079 --> 00:16:59,600
technical approach to cds 94

426
00:16:59,600 --> 00:17:01,759
and the approach is as follows

427
00:17:01,759 --> 00:17:04,720
so we first reduce the k out of n case

428
00:17:04,720 --> 00:17:07,039
to the n out of n case where the proofer

429
00:17:07,039 --> 00:17:10,720
knows all discrete logarithms

430
00:17:10,720 --> 00:17:13,280
and we do this by eliminating the

431
00:17:13,280 --> 00:17:16,079
exponents that the proofer does not know

432
00:17:16,079 --> 00:17:18,400
and we use an elimination factor s1 up

433
00:17:18,400 --> 00:17:21,039
to sn

434
00:17:21,520 --> 00:17:24,959
with s i equals to 0 for all i not in s

435
00:17:24,959 --> 00:17:26,880
so for all indices i for which the

436
00:17:26,880 --> 00:17:28,480
proofer does not know a discrete

437
00:17:28,480 --> 00:17:31,480
logarithm

438
00:17:32,000 --> 00:17:34,080
then instead of proving knowledge of the

439
00:17:34,080 --> 00:17:36,960
discrete logarithms p i

440
00:17:36,960 --> 00:17:39,200
we are going to prove knowledge of the

441
00:17:39,200 --> 00:17:40,240
discrete

442
00:17:40,240 --> 00:17:42,640
logarithms of q i

443
00:17:42,640 --> 00:17:45,840
which is p i to the power s

444
00:17:45,840 --> 00:17:47,919
and note that the proofer knows the

445
00:17:47,919 --> 00:17:50,960
discrete logarithms of all qi

446
00:17:50,960 --> 00:17:52,960
because for i in s

447
00:17:52,960 --> 00:17:54,720
the discrete logarithm is simply the

448
00:17:54,720 --> 00:17:57,600
product of s i and x i

449
00:17:57,600 --> 00:17:59,440
and for i not in s the discrete

450
00:17:59,440 --> 00:18:03,200
logarithm is simply zero

451
00:18:03,280 --> 00:18:06,480
so by using this elimination factor we

452
00:18:06,480 --> 00:18:09,840
we allow the proofer to eliminate the

453
00:18:09,840 --> 00:18:11,760
the group elements for which it does not

454
00:18:11,760 --> 00:18:15,840
know a discrete logarithm

455
00:18:16,160 --> 00:18:17,679
so the proofer is free to choose the

456
00:18:17,679 --> 00:18:19,760
elimination vector s as long as it

457
00:18:19,760 --> 00:18:21,840
satisfies certain properties so for

458
00:18:21,840 --> 00:18:24,320
example the vector s can contain at most

459
00:18:24,320 --> 00:18:26,880
n minus k zeros if it contains more

460
00:18:26,880 --> 00:18:30,160
zeros then the proofer will only prove a

461
00:18:30,160 --> 00:18:32,400
proof knowledge of less than k

462
00:18:32,400 --> 00:18:34,400
secret elements so that's not what we

463
00:18:34,400 --> 00:18:37,280
want so to this end we will be using the

464
00:18:37,280 --> 00:18:39,840
protocol for opening homomorphisms

465
00:18:39,840 --> 00:18:40,960
and we will define the following

466
00:18:40,960 --> 00:18:43,600
homomorphisms

467
00:18:43,600 --> 00:18:44,400
and

468
00:18:44,400 --> 00:18:47,280
we will also define following vector y

469
00:18:47,280 --> 00:18:49,679
so the vector y contains the elimination

470
00:18:49,679 --> 00:18:51,679
vector s and it also contains the

471
00:18:51,679 --> 00:18:53,600
discrete logarithms

472
00:18:53,600 --> 00:18:55,200
of the

473
00:18:55,200 --> 00:18:57,679
group elements q i

474
00:18:57,679 --> 00:19:01,360
so s i x i is the group is the discrete

475
00:19:01,360 --> 00:19:04,720
logarithm of q i for all i between 1 and

476
00:19:04,720 --> 00:19:06,880
n

477
00:19:07,600 --> 00:19:10,160
now note that if we evaluate the

478
00:19:10,160 --> 00:19:12,480
homomorphism f i

479
00:19:12,480 --> 00:19:13,520
in

480
00:19:13,520 --> 00:19:16,480
the point or in the vector y

481
00:19:16,480 --> 00:19:19,440
then it will map to the identity element

482
00:19:19,440 --> 00:19:22,960
this is basically by construction

483
00:19:22,960 --> 00:19:25,120
and also what we can show is that if

484
00:19:25,120 --> 00:19:27,120
this is indeed the case

485
00:19:27,120 --> 00:19:29,520
then the proofer must indeed know the

486
00:19:29,520 --> 00:19:31,919
discrete logarithm of

487
00:19:31,919 --> 00:19:33,360
qi

488
00:19:33,360 --> 00:19:36,000
so what we will be doing is we will

489
00:19:36,000 --> 00:19:38,480
ask the proofer to commit to this

490
00:19:38,480 --> 00:19:40,799
long vector y and prove that it

491
00:19:40,799 --> 00:19:43,039
satisfies this relation this

492
00:19:43,039 --> 00:19:46,559
homomorphism relation for all i of 1 up

493
00:19:46,559 --> 00:19:48,879
to n

494
00:19:49,039 --> 00:19:51,360
so what remains is for the prover to

495
00:19:51,360 --> 00:19:53,840
show that the elimination factor s

496
00:19:53,840 --> 00:19:57,200
contains at most n minus k zeros

497
00:19:57,200 --> 00:19:59,520
we do this by enforcing

498
00:19:59,520 --> 00:20:02,400
s to be an n minus k plus one comma n

499
00:20:02,400 --> 00:20:04,320
secret sharing of one

500
00:20:04,320 --> 00:20:06,480
such as secret sharing can namely

501
00:20:06,480 --> 00:20:09,600
contain at most n minus k zeros

502
00:20:09,600 --> 00:20:12,559
so this somewhat resembles the use of

503
00:20:12,559 --> 00:20:14,559
the linear secret sharing scheme in the

504
00:20:14,559 --> 00:20:18,879
original cds 94 approach

505
00:20:19,120 --> 00:20:21,280
so such a secret sharing can be defined

506
00:20:21,280 --> 00:20:24,000
by a polynomial of degree at most n

507
00:20:24,000 --> 00:20:25,520
minus k

508
00:20:25,520 --> 00:20:28,240
so a polynomial p x

509
00:20:28,240 --> 00:20:29,600
that

510
00:20:29,600 --> 00:20:31,360
evaluates to 1

511
00:20:31,360 --> 00:20:32,880
in 0

512
00:20:32,880 --> 00:20:36,720
and has degree at most n minus k

513
00:20:37,039 --> 00:20:39,679
so we adapt the the protocol by instead

514
00:20:39,679 --> 00:20:43,760
of uh committing to the long vector y

515
00:20:43,760 --> 00:20:45,679
that contains this elimination factor

516
00:20:45,679 --> 00:20:46,840
directly

517
00:20:46,840 --> 00:20:48,559
we

518
00:20:48,559 --> 00:20:51,520
commit to the somewhat shorter vector

519
00:20:51,520 --> 00:20:53,280
y with the coefficients of this

520
00:20:53,280 --> 00:20:55,760
polynomial p x dividing the secret

521
00:20:55,760 --> 00:20:58,240
sharing

522
00:20:58,559 --> 00:21:01,440
we also have to adapt the homomorphisms

523
00:21:01,440 --> 00:21:04,720
and because the

524
00:21:04,720 --> 00:21:08,400
because an evaluation of p x is always a

525
00:21:08,400 --> 00:21:10,880
linear combination of the coefficients a

526
00:21:10,880 --> 00:21:13,919
i to which the proofer is now committed

527
00:21:13,919 --> 00:21:16,960
and the adapted homomorphisms are are

528
00:21:16,960 --> 00:21:18,400
still homomorphisms they are still

529
00:21:18,400 --> 00:21:21,280
linear functions

530
00:21:21,600 --> 00:21:24,320
so all together our proofs of k out of n

531
00:21:24,320 --> 00:21:26,159
partial knowledge protocol takes this

532
00:21:26,159 --> 00:21:28,960
form in the first step the proofer

533
00:21:28,960 --> 00:21:31,440
computes this secret sharing polynomial

534
00:21:31,440 --> 00:21:33,520
px

535
00:21:33,520 --> 00:21:36,400
that evaluates to one in zero and it

536
00:21:36,400 --> 00:21:40,640
evaluates to a zero in all for all i not

537
00:21:40,640 --> 00:21:41,600
in s

538
00:21:41,600 --> 00:21:43,440
so for all i for which the prover does

539
00:21:43,440 --> 00:21:45,440
not know a discrete logarithm

540
00:21:45,440 --> 00:21:47,520
and then it commits to this long vector

541
00:21:47,520 --> 00:21:50,159
y containing the coefficients of this

542
00:21:50,159 --> 00:21:52,799
polynomial p x and the discrete

543
00:21:52,799 --> 00:21:56,960
logarithms of these elements q i

544
00:21:56,960 --> 00:21:59,280
then it sends this commitment

545
00:21:59,280 --> 00:22:02,400
to this long vector y to the verifier

546
00:22:02,400 --> 00:22:04,480
and then we use our

547
00:22:04,480 --> 00:22:07,280
compressed sigma protocol for opening

548
00:22:07,280 --> 00:22:09,520
homomorphisms to prove that this

549
00:22:09,520 --> 00:22:11,600
committed factor and satisfies the

550
00:22:11,600 --> 00:22:15,520
appropriate homomorphism relations

551
00:22:16,320 --> 00:22:18,400
so if we analyze the communication costs

552
00:22:18,400 --> 00:22:19,919
of our approach we see that we still

553
00:22:19,919 --> 00:22:22,480
have to open n different homomorphisms

554
00:22:22,480 --> 00:22:24,320
so if we do this naively then the

555
00:22:24,320 --> 00:22:26,000
communication costs would still be

556
00:22:26,000 --> 00:22:27,679
linear in that

557
00:22:27,679 --> 00:22:29,679
however the communication costs of

558
00:22:29,679 --> 00:22:31,360
opening anomalomorphisms can be

559
00:22:31,360 --> 00:22:34,080
amortized resulting in a communication

560
00:22:34,080 --> 00:22:36,159
complexity that is roughly the same as

561
00:22:36,159 --> 00:22:38,720
opening only one homomorphism

562
00:22:38,720 --> 00:22:40,640
and if we apply this amortization

563
00:22:40,640 --> 00:22:42,720
technique we see that

564
00:22:42,720 --> 00:22:45,120
we obtain a communication costs of

565
00:22:45,120 --> 00:22:48,080
roughly four

566
00:22:48,080 --> 00:22:51,360
log n items

567
00:22:51,840 --> 00:22:53,600
finally we come back to an extension

568
00:22:53,600 --> 00:22:55,440
mentioned before on reducing the

569
00:22:55,440 --> 00:22:57,840
communication costs by an additional

570
00:22:57,840 --> 00:22:59,200
factor 2.

571
00:22:59,200 --> 00:23:00,720
this can be achieved by using a

572
00:23:00,720 --> 00:23:03,039
pairing-based commitment

573
00:23:03,039 --> 00:23:04,799
scheme using an adaptation of a

574
00:23:04,799 --> 00:23:06,720
technique from compressed sigma protocol

575
00:23:06,720 --> 00:23:09,600
theory ac20

576
00:23:09,600 --> 00:23:12,480
in their crypto 2020 paper they managed

577
00:23:12,480 --> 00:23:15,520
to reduce the communication cost by

578
00:23:15,520 --> 00:23:17,039
a factor two

579
00:23:17,039 --> 00:23:19,600
by committing to a secret factor and its

580
00:23:19,600 --> 00:23:21,760
linear form evaluation in a single

581
00:23:21,760 --> 00:23:23,600
compact commitment

582
00:23:23,600 --> 00:23:26,159
that is the linear form evaluation l of

583
00:23:26,159 --> 00:23:30,320
x was incorporated into the commitment

584
00:23:30,320 --> 00:23:31,760
to apply this technique to our

585
00:23:31,760 --> 00:23:34,159
generalization of opening homomorphisms

586
00:23:34,159 --> 00:23:36,480
instead of linear forms we need a

587
00:23:36,480 --> 00:23:38,400
compact commitment scheme for mixed

588
00:23:38,400 --> 00:23:41,120
vectors with coefficients in the field

589
00:23:41,120 --> 00:23:43,760
set q and in some group g

590
00:23:43,760 --> 00:23:45,919
so some of its coefficients

591
00:23:45,919 --> 00:23:48,159
are in the field set q and other

592
00:23:48,159 --> 00:23:51,840
coefficients are group elements

593
00:23:51,840 --> 00:23:53,360
there exists pairing based commitment

594
00:23:53,360 --> 00:23:55,360
schemes with these desired properties

595
00:23:55,360 --> 00:23:57,279
allowing us to reduce the communication

596
00:23:57,279 --> 00:23:59,760
costs

597
00:24:00,640 --> 00:24:02,400
thanks for your attention if you have

598
00:24:02,400 --> 00:24:04,640
questions feel free to contact me or

599
00:24:04,640 --> 00:24:06,000
join our

600
00:24:06,000 --> 00:24:10,679
live presentation on august 19.

