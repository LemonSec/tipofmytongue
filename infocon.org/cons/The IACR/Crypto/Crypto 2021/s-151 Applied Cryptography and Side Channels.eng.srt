1
00:00:01,040 --> 00:00:02,399
and you're ready to go have a good

2
00:00:02,399 --> 00:00:04,080
session

3
00:00:04,080 --> 00:00:06,879
thanks a lot kay hello everybody welcome

4
00:00:06,879 --> 00:00:09,840
to the crypto 2021 session on applied

5
00:00:09,840 --> 00:00:12,320
cryptography and side channels my name

6
00:00:12,320 --> 00:00:14,400
is shikhar i'm affiliated with visa

7
00:00:14,400 --> 00:00:15,839
research and i will be chairing this

8
00:00:15,839 --> 00:00:16,880
session

9
00:00:16,880 --> 00:00:18,480
so in this session we will have four

10
00:00:18,480 --> 00:00:20,160
five minute talks

11
00:00:20,160 --> 00:00:21,680
as has been the norm we will have the

12
00:00:21,680 --> 00:00:23,279
talks back to back

13
00:00:23,279 --> 00:00:25,680
and then i'll open up the floor for uh

14
00:00:25,680 --> 00:00:26,800
questions

15
00:00:26,800 --> 00:00:28,480
so please feel free to post your

16
00:00:28,480 --> 00:00:32,079
questions on the thread in zulip

17
00:00:32,079 --> 00:00:33,840
uh i believe there's a there's a

18
00:00:33,840 --> 00:00:35,040
separate thread for the applied

19
00:00:35,040 --> 00:00:36,880
cryptography and side channel session on

20
00:00:36,880 --> 00:00:39,200
julie where you can post your questions

21
00:00:39,200 --> 00:00:41,360
you can also post your questions

22
00:00:41,360 --> 00:00:43,520
uh on the chat thanks k for posting the

23
00:00:43,520 --> 00:00:45,680
link to the zulip thread

24
00:00:45,680 --> 00:00:47,840
please feel also feel free to post your

25
00:00:47,840 --> 00:00:49,760
questions on the chat here

26
00:00:49,760 --> 00:00:51,840
but please make sure to mention who your

27
00:00:51,840 --> 00:00:53,600
question is directed to so that i know

28
00:00:53,600 --> 00:00:54,800
which author

29
00:00:54,800 --> 00:00:57,120
to direct the question to

30
00:00:57,120 --> 00:00:59,440
thank you and uh i guess we can get

31
00:00:59,440 --> 00:01:01,680
started

32
00:01:01,680 --> 00:01:02,800
so

33
00:01:02,800 --> 00:01:06,960
sean if you are uh ready

34
00:01:07,840 --> 00:01:09,760
oh can you hear me

35
00:01:09,760 --> 00:01:13,040
yeah looks good okay

36
00:01:13,920 --> 00:01:16,400
yeah okay so the first talk is

37
00:01:16,400 --> 00:01:19,520
titled provable security analysis 502

38
00:01:19,520 --> 00:01:21,840
this is a work by manuel barbosa

39
00:01:21,840 --> 00:01:26,080
alexandra baldireva sean chen and bogdan

40
00:01:26,080 --> 00:01:28,080
and sean will give the dog so the floor

41
00:01:28,080 --> 00:01:29,759
is your son

42
00:01:29,759 --> 00:01:32,560
thanks for the introduction sikha so i'm

43
00:01:32,560 --> 00:01:34,320
shan chen from teal dumpsters and this

44
00:01:34,320 --> 00:01:36,720
is the joint work at the car side this

45
00:01:36,720 --> 00:01:37,439
uh

46
00:01:37,439 --> 00:01:40,960
with my bubble saucer border

47
00:01:40,960 --> 00:01:42,880
so i'm sorry that this may go a little

48
00:01:42,880 --> 00:01:45,520
bit fast but with this short time i

49
00:01:45,520 --> 00:01:47,200
cannot do better

50
00:01:47,200 --> 00:01:48,720
okay

51
00:01:48,720 --> 00:01:50,479
so let's first see the motivation here

52
00:01:50,479 --> 00:01:52,079
so suppose you would like to log into a

53
00:01:52,079 --> 00:01:54,479
bank account and check your balance

54
00:01:54,479 --> 00:01:56,000
then in practice you would use your

55
00:01:56,000 --> 00:01:57,840
computer to build the jars channel to

56
00:01:57,840 --> 00:01:59,280
the bank server

57
00:01:59,280 --> 00:02:00,960
and this will give you server

58
00:02:00,960 --> 00:02:03,119
authentication and channel security and

59
00:02:03,119 --> 00:02:04,880
to authenticate the server or

60
00:02:04,880 --> 00:02:06,320
essentially the user

61
00:02:06,320 --> 00:02:08,399
the server may require the user to

62
00:02:08,399 --> 00:02:10,878
provide his password through this trs

63
00:02:10,878 --> 00:02:11,840
channel

64
00:02:11,840 --> 00:02:14,640
and this will give the this will give

65
00:02:14,640 --> 00:02:16,800
the bank user authentication and

66
00:02:16,800 --> 00:02:18,560
sometimes we may also require the user

67
00:02:18,560 --> 00:02:20,080
to have a second factor device for

68
00:02:20,080 --> 00:02:21,599
strong security

69
00:02:21,599 --> 00:02:23,200
so we know that passwords are very easy

70
00:02:23,200 --> 00:02:26,480
to use but it also has a lot of problems

71
00:02:26,480 --> 00:02:28,480
so it would be good to get rid of

72
00:02:28,480 --> 00:02:30,879
password when the user logs in

73
00:02:30,879 --> 00:02:33,920
and this fido 2 protocol is recently

74
00:02:33,920 --> 00:02:35,840
proposed passwordless authentication

75
00:02:35,840 --> 00:02:36,800
standards

76
00:02:36,800 --> 00:02:39,120
uh proposed by fast identity online of

77
00:02:39,120 --> 00:02:41,120
fido alliance it involves a lot of

78
00:02:41,120 --> 00:02:43,120
leading companies in the world

79
00:02:43,120 --> 00:02:46,000
so with this 502 protocol the user tries

80
00:02:46,000 --> 00:02:47,760
to log into the server through a client

81
00:02:47,760 --> 00:02:48,879
browser

82
00:02:48,879 --> 00:02:51,760
with help with authenticator device or

83
00:02:51,760 --> 00:02:54,239
simply record the token device it could

84
00:02:54,239 --> 00:02:56,720
be a smartphone maybe a secret token

85
00:02:56,720 --> 00:02:58,080
device

86
00:02:58,080 --> 00:03:00,480
uh so it consists of two components the

87
00:03:00,480 --> 00:03:03,200
first one is called web austin it's a

88
00:03:03,200 --> 00:03:04,879
challenge response protocol between the

89
00:03:04,879 --> 00:03:06,879
server and token device

90
00:03:06,879 --> 00:03:08,319
so the goal is for the server to

91
00:03:08,319 --> 00:03:10,319
authenticate the token

92
00:03:10,319 --> 00:03:13,280
so uh in this protocol the token somehow

93
00:03:13,280 --> 00:03:16,879
uh derive some secret assigning key and

94
00:03:16,879 --> 00:03:18,239
the register the corresponding

95
00:03:18,239 --> 00:03:20,239
verification key to the server as a

96
00:03:20,239 --> 00:03:22,000
public credential then server can

97
00:03:22,000 --> 00:03:24,159
generate random change and send it to

98
00:03:24,159 --> 00:03:26,159
the token through the client browser and

99
00:03:26,159 --> 00:03:28,560
the token just sign that challenge and

100
00:03:28,560 --> 00:03:30,159
generate signature send back to the

101
00:03:30,159 --> 00:03:32,239
server for verification

102
00:03:32,239 --> 00:03:34,799
and the second component is called ctab2

103
00:03:34,799 --> 00:03:37,040
so it's used by the user to authorize

104
00:03:37,040 --> 00:03:39,519
the client access to his token by

105
00:03:39,519 --> 00:03:41,360
binding the user selected clients to the

106
00:03:41,360 --> 00:03:43,760
token so the goal is to guarantee that

107
00:03:43,760 --> 00:03:46,000
only the user authorized clients can

108
00:03:46,000 --> 00:03:48,159
have access to the token so why we need

109
00:03:48,159 --> 00:03:49,920
this because

110
00:03:49,920 --> 00:03:52,560
uh with this protocol even if the token

111
00:03:52,560 --> 00:03:55,360
is stolen the user the attacker still

112
00:03:55,360 --> 00:03:57,200
cannot easily impersonate the user

113
00:03:57,200 --> 00:03:59,840
because it will require some access the

114
00:03:59,840 --> 00:04:03,519
user also has access to the token device

115
00:04:03,519 --> 00:04:06,080
there were very limited uh

116
00:04:06,080 --> 00:04:09,120
security analysis about bio2 protocol uh

117
00:04:09,120 --> 00:04:11,439
previously so we do need a comprehensive

118
00:04:11,439 --> 00:04:14,560
crypto analysis about fido 2. so our

119
00:04:14,560 --> 00:04:16,639
work is focused on this uh

120
00:04:16,639 --> 00:04:19,759
focus on its authentication properties

121
00:04:19,759 --> 00:04:23,199
so we first uh define a protocol syntax

122
00:04:23,199 --> 00:04:24,720
and security model for the first

123
00:04:24,720 --> 00:04:26,639
component web boss and show that is

124
00:04:26,639 --> 00:04:28,720
indeed secure in our model

125
00:04:28,720 --> 00:04:31,520
in practice this means only the tokens

126
00:04:31,520 --> 00:04:34,000
with validation key these keys are

127
00:04:34,000 --> 00:04:36,240
embedded by the manufacturer can be

128
00:04:36,240 --> 00:04:38,639
registered to the server and the server

129
00:04:38,639 --> 00:04:40,560
accepts authentication only from the

130
00:04:40,560 --> 00:04:43,520
tokens that register from that token

131
00:04:43,520 --> 00:04:45,759
that register the same credential that

132
00:04:45,759 --> 00:04:48,320
used in the authentication

133
00:04:48,320 --> 00:04:50,720
and for the second component we fix

134
00:04:50,720 --> 00:04:52,720
another model and show that it's secure

135
00:04:52,720 --> 00:04:53,840
in our

136
00:04:53,840 --> 00:04:54,880
model

137
00:04:54,880 --> 00:04:57,040
but in the sense that the user's token

138
00:04:57,040 --> 00:04:59,120
can indeed only be

139
00:04:59,120 --> 00:05:01,440
accessed by user authorized clients but

140
00:05:01,440 --> 00:05:03,919
here unfortunately this is

141
00:05:03,919 --> 00:05:06,000
only secure in a weak sense which means

142
00:05:06,000 --> 00:05:08,320
we have to assume the binding phase is

143
00:05:08,320 --> 00:05:10,400
trusted so we do not allow any active

144
00:05:10,400 --> 00:05:12,320
attacks against the client during the

145
00:05:12,320 --> 00:05:14,880
binding and we also need to assume no

146
00:05:14,880 --> 00:05:16,960
authorized clients to the target token

147
00:05:16,960 --> 00:05:19,520
can be compromised the reason is because

148
00:05:19,520 --> 00:05:21,919
ctab2 uses an authenticated helmet

149
00:05:21,919 --> 00:05:24,000
exchange for the banning phase and this

150
00:05:24,000 --> 00:05:26,000
is not that secure

151
00:05:26,000 --> 00:05:28,639
so to achieve strong security we

152
00:05:28,639 --> 00:05:30,880
we propose this secure parkour as backup

153
00:05:30,880 --> 00:05:32,400
protocol

154
00:05:32,400 --> 00:05:34,479
with this protocol we basically use the

155
00:05:34,479 --> 00:05:36,320
password authenticated key chain for the

156
00:05:36,320 --> 00:05:39,199
binding phase and we can get rid of the

157
00:05:39,199 --> 00:05:42,400
restrictions and it turns out our secure

158
00:05:42,400 --> 00:05:45,039
our model uh our protocol is

159
00:05:45,039 --> 00:05:46,320
actually more efficient than the

160
00:05:46,320 --> 00:05:48,880
currency type 2 protocol so that's very

161
00:05:48,880 --> 00:05:50,160
good

162
00:05:50,160 --> 00:05:52,240
and all together we have this 502

163
00:05:52,240 --> 00:05:55,039
security from its component components

164
00:05:55,039 --> 00:05:57,919
in a modular way so we guarantee that to

165
00:05:57,919 --> 00:05:59,600
impersonate the user

166
00:05:59,600 --> 00:06:02,240
the attacker has to require both the

167
00:06:02,240 --> 00:06:04,240
register token and authorize access to

168
00:06:04,240 --> 00:06:06,720
it and as we said this is only in the

169
00:06:06,720 --> 00:06:09,520
weak sense and if we use our strongly

170
00:06:09,520 --> 00:06:11,440
secure asphalt protocol we can get

171
00:06:11,440 --> 00:06:15,759
strongly secure uh new protocol

172
00:06:15,759 --> 00:06:18,479
uh to uh to get to you this like a

173
00:06:18,479 --> 00:06:20,560
strongly secure protocol in practice we

174
00:06:20,560 --> 00:06:22,639
also need to deal with some subtleties

175
00:06:22,639 --> 00:06:23,759
so if we

176
00:06:23,759 --> 00:06:26,319
allow some uh some clients to be

177
00:06:26,319 --> 00:06:27,520
compromised

178
00:06:27,520 --> 00:06:30,000
then we also require the user to perform

179
00:06:30,000 --> 00:06:31,520
some user gesture to decline the

180
00:06:31,520 --> 00:06:34,800
malicious access such that only the uh

181
00:06:34,800 --> 00:06:36,960
the expected client can access the token

182
00:06:36,960 --> 00:06:37,919
so this

183
00:06:37,919 --> 00:06:40,000
for this uh stronger security we may

184
00:06:40,000 --> 00:06:42,400
need the uh token device to have some

185
00:06:42,400 --> 00:06:44,080
display

186
00:06:44,080 --> 00:06:46,400
and altogether we have this server-side

187
00:06:46,400 --> 00:06:49,199
security for the 502

188
00:06:49,199 --> 00:06:50,240
course so

189
00:06:50,240 --> 00:06:52,479
it's a user authentication and we know

190
00:06:52,479 --> 00:06:53,360
that

191
00:06:53,360 --> 00:06:55,759
trs gives us a server authentication for

192
00:06:55,759 --> 00:06:57,919
the client side so the question is like

193
00:06:57,919 --> 00:06:59,919
does fide tool also provide user side

194
00:06:59,919 --> 00:07:03,280
security if it runs over gis and the the

195
00:07:03,280 --> 00:07:04,800
answer is yes

196
00:07:04,800 --> 00:07:07,280
so to summarize our security results we

197
00:07:07,280 --> 00:07:08,800
basically show that fighter 2 the

198
00:07:08,800 --> 00:07:10,160
current standard

199
00:07:10,160 --> 00:07:13,360
uh enjoys mutual authentication security

200
00:07:13,360 --> 00:07:16,000
but in the weak sense and if we use our

201
00:07:16,000 --> 00:07:18,000
stronger sparkle protocol to replace

202
00:07:18,000 --> 00:07:20,160
their c type 2 component we can get

203
00:07:20,160 --> 00:07:22,000
strong security

204
00:07:22,000 --> 00:07:24,400
okay so uh thanks for uh

205
00:07:24,400 --> 00:07:27,120
for the listening so please refer to our

206
00:07:27,120 --> 00:07:28,639
longer talk on our paper for more

207
00:07:28,639 --> 00:07:30,800
details for example there will also show

208
00:07:30,800 --> 00:07:32,960
that we improve the current setup to

209
00:07:32,960 --> 00:07:34,720
standard and fix some design flaws

210
00:07:34,720 --> 00:07:39,800
without weakening security thank you

211
00:07:47,280 --> 00:07:50,638
uh sicari you're muted

212
00:07:51,120 --> 00:07:53,360
thanks kay uh yeah so please thanks a

213
00:07:53,360 --> 00:07:55,680
lot sean for the wonderful talk so

214
00:07:55,680 --> 00:07:57,360
please please feel free to post your

215
00:07:57,360 --> 00:07:59,280
questions on zulip or in the chat and

216
00:07:59,280 --> 00:08:00,960
we'll take them at the end of the

217
00:08:00,960 --> 00:08:02,560
session

218
00:08:02,560 --> 00:08:04,160
so now we'll move on to the next talk

219
00:08:04,160 --> 00:08:06,240
for this session

220
00:08:06,240 --> 00:08:07,759
which is

221
00:08:07,759 --> 00:08:10,160
sse and ssd page efficient searchable

222
00:08:10,160 --> 00:08:12,560
symmetric encryption

223
00:08:12,560 --> 00:08:14,560
and this is joint work

224
00:08:14,560 --> 00:08:15,440
by

225
00:08:15,440 --> 00:08:18,479
angel buswa raphael bost tierra allen

226
00:08:18,479 --> 00:08:21,360
fook bris minnow and michelle reichel

227
00:08:21,360 --> 00:08:22,560
and i believe mitchell will give the

228
00:08:22,560 --> 00:08:23,440
talk

229
00:08:23,440 --> 00:08:25,440
yeah thanks for the introduction so yeah

230
00:08:25,440 --> 00:08:27,919
as as already said i will talk about ssd

231
00:08:27,919 --> 00:08:29,599
and ssd page efficient search with

232
00:08:29,599 --> 00:08:31,520
symmetric encryption

233
00:08:31,520 --> 00:08:33,440
and yeah this is strong work with chris

234
00:08:33,440 --> 00:08:36,159
minov tierra four graphic boss and angel

235
00:08:36,159 --> 00:08:38,958
so as i guess not everyone is familiar

236
00:08:38,958 --> 00:08:40,799
with the notion of searchable uh

237
00:08:40,799 --> 00:08:42,640
symmetric encryption

238
00:08:42,640 --> 00:08:44,720
i quickly introduced the primitive so

239
00:08:44,720 --> 00:08:47,440
say and of course what it's used for so

240
00:08:47,440 --> 00:08:50,240
say you have a bunch of documents

241
00:08:50,240 --> 00:08:52,399
um that potentially contain

242
00:08:52,399 --> 00:08:54,800
confidential information say police

243
00:08:54,800 --> 00:08:56,959
records or medical information

244
00:08:56,959 --> 00:08:59,839
and you want to outsource this to a

245
00:08:59,839 --> 00:09:01,680
untrusted server because potentially you

246
00:09:01,680 --> 00:09:04,080
don't have enough space locally

247
00:09:04,080 --> 00:09:05,519
and i mean of course you can just

248
00:09:05,519 --> 00:09:07,040
encrypt your information send it to the

249
00:09:07,040 --> 00:09:09,120
server and then it just lies there on

250
00:09:09,120 --> 00:09:12,080
the server but in general you want

251
00:09:12,080 --> 00:09:15,040
some type of search functionality and

252
00:09:15,040 --> 00:09:17,040
in this case what we want is keyword

253
00:09:17,040 --> 00:09:18,240
searches so

254
00:09:18,240 --> 00:09:20,880
given a keyword we want to

255
00:09:20,880 --> 00:09:22,480
access the

256
00:09:22,480 --> 00:09:24,720
uh the respective documents that contain

257
00:09:24,720 --> 00:09:27,519
the keywords and we do so by um

258
00:09:27,519 --> 00:09:30,000
essentially when searching a keyword

259
00:09:30,000 --> 00:09:32,160
and receiving back the identifiers that

260
00:09:32,160 --> 00:09:34,560
match this keyword

261
00:09:34,560 --> 00:09:38,000
so how does sse work um when you want to

262
00:09:38,000 --> 00:09:40,000
enable this functionality well basically

263
00:09:40,000 --> 00:09:41,680
in a setup phase you encrypt your

264
00:09:41,680 --> 00:09:44,000
documents you encrypt your index

265
00:09:44,000 --> 00:09:46,320
and then you send it to the database

266
00:09:46,320 --> 00:09:48,399
and then the database can store this

267
00:09:48,399 --> 00:09:51,360
information and of course potentially uh

268
00:09:51,360 --> 00:09:53,839
or also absolute information

269
00:09:53,839 --> 00:09:54,640
and

270
00:09:54,640 --> 00:09:57,839
afterwards you can use this

271
00:09:57,839 --> 00:09:59,920
functionality like the sse functionality

272
00:09:59,920 --> 00:10:03,040
in order to search a given keyword

273
00:10:03,040 --> 00:10:06,079
um by providing access to a uh

274
00:10:06,079 --> 00:10:08,720
to a search token and um yeah

275
00:10:08,720 --> 00:10:10,079
essentially the search token then

276
00:10:10,079 --> 00:10:12,640
enables the the server to look up

277
00:10:12,640 --> 00:10:15,279
the the matching keywords and the

278
00:10:15,279 --> 00:10:17,360
matching identifiers and then he can

279
00:10:17,360 --> 00:10:19,760
send back the matching identifiers given

280
00:10:19,760 --> 00:10:22,000
the token

281
00:10:22,000 --> 00:10:23,839
yeah that's essentially how sse works

282
00:10:23,839 --> 00:10:24,720
and

283
00:10:24,720 --> 00:10:28,480
in in general we model the adversary as

284
00:10:28,480 --> 00:10:30,240
the server as the adversary because we

285
00:10:30,240 --> 00:10:31,680
want him to learn as little information

286
00:10:31,680 --> 00:10:33,440
about our potentially classified

287
00:10:33,440 --> 00:10:35,839
information as possible

288
00:10:35,839 --> 00:10:37,279
so um

289
00:10:37,279 --> 00:10:39,040
how does our work come into play now

290
00:10:39,040 --> 00:10:42,640
well basically um all of these uh for

291
00:10:42,640 --> 00:10:44,560
most uh symmetric search search

292
00:10:44,560 --> 00:10:46,880
encryption schemes use s m says

293
00:10:46,880 --> 00:10:48,720
symmetric primitives so they have low

294
00:10:48,720 --> 00:10:50,480
cryptographic overhead

295
00:10:50,480 --> 00:10:52,320
um but of course in order to stimulate

296
00:10:52,320 --> 00:10:55,040
comparative or competitive to

297
00:10:55,040 --> 00:10:57,279
non-secure databases so like a just a

298
00:10:57,279 --> 00:10:58,800
normal database

299
00:10:58,800 --> 00:11:01,120
um not only the cryptographic overhead

300
00:11:01,120 --> 00:11:02,800
counts but also the memory access

301
00:11:02,800 --> 00:11:04,720
patterns and how

302
00:11:04,720 --> 00:11:06,959
um how you access memory and actually

303
00:11:06,959 --> 00:11:09,279
um for symmetric search of encryption

304
00:11:09,279 --> 00:11:11,440
this is the main overhead

305
00:11:11,440 --> 00:11:14,000
and the research community mainly looked

306
00:11:14,000 --> 00:11:14,800
at

307
00:11:14,800 --> 00:11:16,640
locality for uh in this sense so

308
00:11:16,640 --> 00:11:18,800
essentially um

309
00:11:18,800 --> 00:11:20,640
this just uh

310
00:11:20,640 --> 00:11:22,240
counts the number of red non-adjacent

311
00:11:22,240 --> 00:11:23,760
memory locations

312
00:11:23,760 --> 00:11:25,680
and yeah this is a good predictor for

313
00:11:25,680 --> 00:11:29,440
actual hdds but nowadays actually um

314
00:11:29,440 --> 00:11:32,560
there's a lot more ssds and in use

315
00:11:32,560 --> 00:11:35,600
and for this the efficiency

316
00:11:35,600 --> 00:11:38,560
can be predicted in in a more adapted

317
00:11:38,560 --> 00:11:40,720
way by looking at page efficiency so the

318
00:11:40,720 --> 00:11:43,279
number of thread pages per query

319
00:11:43,279 --> 00:11:45,200
and yeah in this paper we first of all

320
00:11:45,200 --> 00:11:46,720
show of course that this makes sense so

321
00:11:46,720 --> 00:11:48,240
that this is a good predictor for

322
00:11:48,240 --> 00:11:50,880
throughput on ssds

323
00:11:50,880 --> 00:11:52,079
and

324
00:11:52,079 --> 00:11:54,720
mainly um or the main part is we want to

325
00:11:54,720 --> 00:11:57,040
construct efficient sse so we want to

326
00:11:57,040 --> 00:11:58,800
have page efficient

327
00:11:58,800 --> 00:12:01,920
so efficient sse on ssds so we want to

328
00:12:01,920 --> 00:12:03,760
have good page efficiency so we minimize

329
00:12:03,760 --> 00:12:06,079
the page access per query we want to

330
00:12:06,079 --> 00:12:07,920
have good storage efficiency so we want

331
00:12:07,920 --> 00:12:10,160
to minimize the server storage and

332
00:12:10,160 --> 00:12:12,480
lastly of course you want normal sse

333
00:12:12,480 --> 00:12:14,880
security guarantees so we want to

334
00:12:14,880 --> 00:12:17,200
minimize the leakage so essentially

335
00:12:17,200 --> 00:12:20,399
standard leakage for sse skills

336
00:12:20,399 --> 00:12:22,480
yeah and how do we do that well

337
00:12:22,480 --> 00:12:25,120
basically um we identify an underlying

338
00:12:25,120 --> 00:12:29,279
allocation problem as is common in also

339
00:12:29,279 --> 00:12:31,920
locality-based sse schemes

340
00:12:31,920 --> 00:12:34,000
and a solution to this we call dips or

341
00:12:34,000 --> 00:12:35,680
data independent packing

342
00:12:35,680 --> 00:12:37,839
and what we want to do here is we have

343
00:12:37,839 --> 00:12:40,160
lists that match a keyword

344
00:12:40,160 --> 00:12:43,600
um or or lists

345
00:12:43,600 --> 00:12:45,839
in this case

346
00:12:45,839 --> 00:12:47,200
in different colors and we want to

347
00:12:47,200 --> 00:12:49,760
allocate those to a bunch of buckets and

348
00:12:49,760 --> 00:12:51,360
a stash potentially

349
00:12:51,360 --> 00:12:53,120
and data independence in this case means

350
00:12:53,120 --> 00:12:55,519
that the list location so where we store

351
00:12:55,519 --> 00:12:57,519
the list in which bucket should not leak

352
00:12:57,519 --> 00:12:59,120
information about the length of other

353
00:12:59,120 --> 00:13:00,320
lists

354
00:13:00,320 --> 00:13:02,240
and yeah we model this in a purely

355
00:13:02,240 --> 00:13:04,839
combinatorial way so this follows quite

356
00:13:04,839 --> 00:13:06,560
straightforwardly

357
00:13:06,560 --> 00:13:08,560
just by definition

358
00:13:08,560 --> 00:13:10,880
and how can we use this where we can use

359
00:13:10,880 --> 00:13:13,680
this to construct se by essentially

360
00:13:13,680 --> 00:13:17,120
using this packing algorithm in order to

361
00:13:17,120 --> 00:13:18,800
essentially what we do is we identify

362
00:13:18,800 --> 00:13:20,560
buckets with pages

363
00:13:20,560 --> 00:13:22,480
and then we can just use adip scheme in

364
00:13:22,480 --> 00:13:25,680
order to pack the identifiers um

365
00:13:25,680 --> 00:13:28,160
of lists into these buckets

366
00:13:28,160 --> 00:13:30,880
and if we do that essentially we can

367
00:13:30,880 --> 00:13:33,040
show that this is like this is standard

368
00:13:33,040 --> 00:13:34,959
leakage so it's secure

369
00:13:34,959 --> 00:13:37,680
and the efficiency um

370
00:13:37,680 --> 00:13:39,279
is essentially inherited from the ddrp

371
00:13:39,279 --> 00:13:40,639
scheme

372
00:13:40,639 --> 00:13:42,320
so all that is left to do now is

373
00:13:42,320 --> 00:13:44,639
actually instantiate ddp framework which

374
00:13:44,639 --> 00:13:46,320
is easier said than done because that's

375
00:13:46,320 --> 00:13:48,959
kind of the main part of the paper

376
00:13:48,959 --> 00:13:51,120
but what we show is that we can

377
00:13:51,120 --> 00:13:52,959
construct an efficient erp scheme based

378
00:13:52,959 --> 00:13:54,880
on coco hashing for weighted items with

379
00:13:54,880 --> 00:13:56,320
stash

380
00:13:56,320 --> 00:13:57,519
sorry this is essentially a

381
00:13:57,519 --> 00:14:00,240
generalization of existing cocoa hashing

382
00:14:00,240 --> 00:14:01,760
literature

383
00:14:01,760 --> 00:14:03,440
that also works for weighted items and

384
00:14:03,440 --> 00:14:06,720
we show that given a stash

385
00:14:06,720 --> 00:14:08,160
it actually has

386
00:14:08,160 --> 00:14:10,240
a negligible failure probability so

387
00:14:10,240 --> 00:14:13,839
essentially you can always allocate

388
00:14:14,000 --> 00:14:15,760
your lists in such a way even if you

389
00:14:15,760 --> 00:14:18,079
have no control over how your lists are

390
00:14:18,079 --> 00:14:20,800
distributed and only access to the total

391
00:14:20,800 --> 00:14:23,040
number of items

392
00:14:23,040 --> 00:14:25,120
and yeah essentially this we can use in

393
00:14:25,120 --> 00:14:26,959
order to construct a static sse scheme

394
00:14:26,959 --> 00:14:28,639
by plugging this dnp scheme into the

395
00:14:28,639 --> 00:14:30,560
framework and then we get a scheme with

396
00:14:30,560 --> 00:14:32,959
optimal page and storage efficiency

397
00:14:32,959 --> 00:14:36,639
um so yeah constant for both and uh yeah

398
00:14:36,639 --> 00:14:39,040
that's uh basically the main result of

399
00:14:39,040 --> 00:14:40,880
the paper and if you want to learn

400
00:14:40,880 --> 00:14:42,880
more about the result then i invite you

401
00:14:42,880 --> 00:14:45,040
to check the eprint or of course to

402
00:14:45,040 --> 00:14:46,959
watch the video or ask questions later

403
00:14:46,959 --> 00:14:49,199
thanks

404
00:14:51,040 --> 00:14:52,880
thank you very much mitchell

405
00:14:52,880 --> 00:14:53,760
so

406
00:14:53,760 --> 00:14:55,680
take questions at the end of the session

407
00:14:55,680 --> 00:14:59,839
or end up all the talks so

408
00:15:01,519 --> 00:15:03,440
so we'll now move on to the next talk

409
00:15:03,440 --> 00:15:05,519
the next stock is titled towards ran

410
00:15:05,519 --> 00:15:07,920
tight random probing security

411
00:15:07,920 --> 00:15:09,920
and this is joint work by

412
00:15:09,920 --> 00:15:12,480
garter and cassiers sebastian foste

413
00:15:12,480 --> 00:15:14,880
maximilian alt and francoise avia

414
00:15:14,880 --> 00:15:16,000
standard

415
00:15:16,000 --> 00:15:19,600
and maximilian will be giving the talk

416
00:15:19,600 --> 00:15:21,199
thank you for the introduction so can

417
00:15:21,199 --> 00:15:23,680
you hear me

418
00:15:23,680 --> 00:15:24,480
yes

419
00:15:24,480 --> 00:15:26,639
okay perfect

420
00:15:26,639 --> 00:15:28,639
so thank you for the nice introduction

421
00:15:28,639 --> 00:15:30,800
and welcome to our presentation towards

422
00:15:30,800 --> 00:15:32,959
tightron and pouring security and as

423
00:15:32,959 --> 00:15:34,880
mentioned it's a joint work with gaiten

424
00:15:34,880 --> 00:15:38,160
cassius sebastian foster from standard

425
00:15:38,160 --> 00:15:40,560
at me maximilian ort before i want to

426
00:15:40,560 --> 00:15:42,639
present our results

427
00:15:42,639 --> 00:15:44,079
i first want to give a quick

428
00:15:44,079 --> 00:15:45,600
introduction

429
00:15:45,600 --> 00:15:47,040
so

430
00:15:47,040 --> 00:15:48,639
in the classical cryptography we often

431
00:15:48,639 --> 00:15:50,720
use the black box model here we assume

432
00:15:50,720 --> 00:15:52,480
that the adversary only learns about the

433
00:15:52,480 --> 00:15:54,480
input output behavior of a cryptographic

434
00:15:54,480 --> 00:15:56,480
primitive for example the message

435
00:15:56,480 --> 00:15:58,720
ciphertext pair of an encryption scheme

436
00:15:58,720 --> 00:16:00,800
unfortunately this is not the case in

437
00:16:00,800 --> 00:16:02,399
the real world in the real world the

438
00:16:02,399 --> 00:16:04,000
adversary can run even more due to

439
00:16:04,000 --> 00:16:05,600
situational leakage

440
00:16:05,600 --> 00:16:07,759
the power consumption of a device might

441
00:16:07,759 --> 00:16:10,160
leak secret dependent data for example

442
00:16:10,160 --> 00:16:12,320
the key of an encryption scheme and the

443
00:16:12,320 --> 00:16:14,800
same holds for electromagnetic radiation

444
00:16:14,800 --> 00:16:16,720
therefore we have to think about how to

445
00:16:16,720 --> 00:16:19,120
model those leakages to provide security

446
00:16:19,120 --> 00:16:20,320
proofs in this

447
00:16:20,320 --> 00:16:22,560
scenario

448
00:16:22,560 --> 00:16:24,480
before we can define our leakage model

449
00:16:24,480 --> 00:16:25,920
we first have to think about the

450
00:16:25,920 --> 00:16:28,000
computational model here we use the

451
00:16:28,000 --> 00:16:30,959
arithmetic circuit where here the

452
00:16:30,959 --> 00:16:33,279
operations are described as gates and

453
00:16:33,279 --> 00:16:35,519
all values even the intermediate values

454
00:16:35,519 --> 00:16:38,079
are carried by wires with the arithmetic

455
00:16:38,079 --> 00:16:40,880
circuit we can define our leakage model

456
00:16:40,880 --> 00:16:43,519
we have chosen the p1 and probing motor

457
00:16:43,519 --> 00:16:45,680
originally introduced by ishai zahi and

458
00:16:45,680 --> 00:16:48,160
wagner at crypto 2003

459
00:16:48,160 --> 00:16:49,759
they assumed that each wire leaks with

460
00:16:49,759 --> 00:16:51,040
probability

461
00:16:51,040 --> 00:16:52,720
p

462
00:16:52,720 --> 00:16:55,680
and the advantage of this motor is that

463
00:16:55,680 --> 00:16:57,519
it's close to the real world since it

464
00:16:57,519 --> 00:16:59,600
describes the continuous nature of

465
00:16:59,600 --> 00:17:00,880
leakage

466
00:17:00,880 --> 00:17:03,519
if a value is used multiple times it is

467
00:17:03,519 --> 00:17:05,439
also carried by multiple wires and

468
00:17:05,439 --> 00:17:08,799
therefore the leakage increases

469
00:17:09,839 --> 00:17:11,280
with the leakage model we can also

470
00:17:11,280 --> 00:17:13,520
quickly explain how to

471
00:17:13,520 --> 00:17:16,880
protect circuits against those leakages

472
00:17:16,880 --> 00:17:18,880
assume we have a circuit with secret

473
00:17:18,880 --> 00:17:21,919
inputs a and b that computes c equals a

474
00:17:21,919 --> 00:17:24,079
squared plus b

475
00:17:24,079 --> 00:17:26,480
to protect the circuit against leakage

476
00:17:26,480 --> 00:17:27,919
we first have to secret share the

477
00:17:27,919 --> 00:17:29,120
sequence

478
00:17:29,120 --> 00:17:31,039
so here we use an n out of n secret

479
00:17:31,039 --> 00:17:32,400
sharing

480
00:17:32,400 --> 00:17:35,679
with n equals two

481
00:17:36,080 --> 00:17:38,240
further we want to transform the circuit

482
00:17:38,240 --> 00:17:40,480
in such a way that it only computes on

483
00:17:40,480 --> 00:17:41,600
the shares

484
00:17:41,600 --> 00:17:44,320
not on the secrets directly

485
00:17:44,320 --> 00:17:46,960
and finally outputs a secret sharing of

486
00:17:46,960 --> 00:17:49,440
our c

487
00:17:49,679 --> 00:17:51,600
we can even improve this

488
00:17:51,600 --> 00:17:53,679
circuit or the security of the circuit

489
00:17:53,679 --> 00:17:56,480
by randomizing the internal computations

490
00:17:56,480 --> 00:17:58,160
in such a way that the correctness of

491
00:17:58,160 --> 00:18:00,799
the circuit still holds

492
00:18:00,799 --> 00:18:02,960
you can think about a multiple a

493
00:18:02,960 --> 00:18:05,280
multi-party computation

494
00:18:05,280 --> 00:18:08,559
it's quite similar

495
00:18:08,640 --> 00:18:10,640
in our work we wanted to analyze the

496
00:18:10,640 --> 00:18:12,640
security of such circuits

497
00:18:12,640 --> 00:18:14,720
in detail we are interested in the

498
00:18:14,720 --> 00:18:16,799
probability that the leakage of the

499
00:18:16,799 --> 00:18:18,880
circuit is still independent of the

500
00:18:18,880 --> 00:18:22,559
secret in our case a and b

501
00:18:22,559 --> 00:18:25,679
to do this we introduce our new approach

502
00:18:25,679 --> 00:18:28,000
the probe distribution table the prop

503
00:18:28,000 --> 00:18:30,240
distribution table is a matrix that

504
00:18:30,240 --> 00:18:32,160
contains the probabilities

505
00:18:32,160 --> 00:18:34,400
that the leakage

506
00:18:34,400 --> 00:18:35,200
of

507
00:18:35,200 --> 00:18:38,320
of the circuit depends on the special

508
00:18:38,320 --> 00:18:40,880
amount of information of the sequence

509
00:18:40,880 --> 00:18:42,559
for example if we can simulate the

510
00:18:42,559 --> 00:18:43,600
leakage

511
00:18:43,600 --> 00:18:46,400
with only a0 it's still independent from

512
00:18:46,400 --> 00:18:48,000
a and b

513
00:18:48,000 --> 00:18:50,559
since it is only a share of a and

514
00:18:50,559 --> 00:18:54,000
therefore independent from a

515
00:18:54,880 --> 00:18:56,720
further we explain how we can compute

516
00:18:56,720 --> 00:18:59,120
the pdts efficiently

517
00:18:59,120 --> 00:19:01,440
here we use a monte carlo approximation

518
00:19:01,440 --> 00:19:03,360
to compute the

519
00:19:03,360 --> 00:19:06,640
circuits up to six shares

520
00:19:06,640 --> 00:19:09,280
for the multiplication for example we

521
00:19:09,280 --> 00:19:12,240
need 3 33 hours

522
00:19:12,240 --> 00:19:13,840
that's the reason why we also need some

523
00:19:13,840 --> 00:19:15,760
other approximations

524
00:19:15,760 --> 00:19:16,960
and we give

525
00:19:16,960 --> 00:19:19,679
composition results how to compute pdt's

526
00:19:19,679 --> 00:19:22,720
for much larger circuits

527
00:19:22,720 --> 00:19:25,200
in detail we explain how to compute the

528
00:19:25,200 --> 00:19:27,679
pdt of larger circuits with the help of

529
00:19:27,679 --> 00:19:28,960
the pdts

530
00:19:28,960 --> 00:19:31,200
of smaller subject circuits of the

531
00:19:31,200 --> 00:19:33,600
circuit

532
00:19:36,240 --> 00:19:38,720
to conclude

533
00:19:38,720 --> 00:19:40,640
we uh

534
00:19:40,640 --> 00:19:41,520
we

535
00:19:41,520 --> 00:19:43,440
we give tighter security proofs with our

536
00:19:43,440 --> 00:19:44,799
new techniques

537
00:19:44,799 --> 00:19:46,799
and our new techniques

538
00:19:46,799 --> 00:19:48,799
are generic which means that we can

539
00:19:48,799 --> 00:19:50,799
apply the techniques for an arbitrary

540
00:19:50,799 --> 00:19:51,760
circuit

541
00:19:51,760 --> 00:19:53,760
unfortunately we are still limited in

542
00:19:53,760 --> 00:19:55,440
the number of shares

543
00:19:55,440 --> 00:19:57,760
and we're able only able to compute the

544
00:19:57,760 --> 00:19:58,960
pdt's

545
00:19:58,960 --> 00:20:01,600
for circuits up to six shares where we

546
00:20:01,600 --> 00:20:05,280
have shared the secret into six shares

547
00:20:05,280 --> 00:20:08,159
as i said we are not fully tied this

548
00:20:08,159 --> 00:20:09,039
means

549
00:20:09,039 --> 00:20:10,720
we had some approximation in the

550
00:20:10,720 --> 00:20:12,400
composition and the computation of the

551
00:20:12,400 --> 00:20:14,880
pdt

552
00:20:15,600 --> 00:20:17,360
so the question is can we improve our

553
00:20:17,360 --> 00:20:18,480
results

554
00:20:18,480 --> 00:20:22,559
to make the proofs tighter

555
00:20:23,200 --> 00:20:25,679
a further open question is can we large

556
00:20:25,679 --> 00:20:28,720
scale the composition for example in our

557
00:20:28,720 --> 00:20:32,159
paper we analyze the iss box

558
00:20:32,159 --> 00:20:33,120
but

559
00:20:33,120 --> 00:20:36,080
can we still improve our techniques such

560
00:20:36,080 --> 00:20:38,240
that we can compute or analyze the

561
00:20:38,240 --> 00:20:41,280
security of the full ies scheme

562
00:20:41,280 --> 00:20:43,679
with this i want to finish the talk and

563
00:20:43,679 --> 00:20:46,159
thank you for listening to our

564
00:20:46,159 --> 00:20:48,159
presentation

565
00:20:48,159 --> 00:20:49,919
if you have any questions feel free to

566
00:20:49,919 --> 00:20:50,880
ask

567
00:20:50,880 --> 00:20:54,000
live here or by email

568
00:20:54,000 --> 00:20:56,240
thanks

569
00:20:56,240 --> 00:20:57,679
thank you very much maximilian for the

570
00:20:57,679 --> 00:20:59,760
very nice talk

571
00:20:59,760 --> 00:21:01,600
so we'll now move on to the last talk of

572
00:21:01,600 --> 00:21:02,880
the session

573
00:21:02,880 --> 00:21:04,400
which is titled

574
00:21:04,400 --> 00:21:06,480
secure wire shuffling in the probing

575
00:21:06,480 --> 00:21:08,880
model

576
00:21:09,760 --> 00:21:10,880
so

577
00:21:10,880 --> 00:21:11,919
yes

578
00:21:11,919 --> 00:21:13,280
excuse me

579
00:21:13,280 --> 00:21:15,679
can you

580
00:21:15,679 --> 00:21:17,360
see my

581
00:21:17,360 --> 00:21:19,600
screen

582
00:21:19,600 --> 00:21:22,080
not yet

583
00:21:22,400 --> 00:21:25,960
try this way

584
00:21:48,240 --> 00:21:50,559
oh i think he might have left

585
00:21:50,559 --> 00:21:52,799
oh did we lose

586
00:21:52,799 --> 00:21:54,080
your answer

587
00:21:54,080 --> 00:21:56,840
uh he does not appear to be here anymore

588
00:21:56,840 --> 00:21:58,880
correct so

589
00:21:58,880 --> 00:21:59,919
um

590
00:21:59,919 --> 00:22:01,039
i don't know if you want to give him a

591
00:22:01,039 --> 00:22:02,799
minute or if you want to move on with

592
00:22:02,799 --> 00:22:05,039
questions and then come back to him um

593
00:22:05,039 --> 00:22:07,520
but it's up to you maybe we can wait for

594
00:22:07,520 --> 00:22:08,570
a minute um

595
00:22:08,570 --> 00:22:09,919
[Music]

596
00:22:09,919 --> 00:22:12,159
otherwise we can

597
00:22:12,159 --> 00:22:14,159
move on with questions i hope he's back

598
00:22:14,159 --> 00:22:16,080
soon

599
00:22:16,080 --> 00:22:19,320
me too

600
00:22:47,760 --> 00:22:49,760
so while we're waiting for lorenzo maybe

601
00:22:49,760 --> 00:22:52,880
i'll uh have so there's a question uh

602
00:22:52,880 --> 00:22:54,480
on julie

603
00:22:54,480 --> 00:22:56,159
for sean which are already answered but

604
00:22:56,159 --> 00:22:58,159
maybe would like to repeat it for uh

605
00:22:58,159 --> 00:23:00,000
people who may not be following zulip or

606
00:23:00,000 --> 00:23:01,360
people who are on the call

607
00:23:01,360 --> 00:23:02,799
so the question was do you require

608
00:23:02,799 --> 00:23:04,799
identification of the token

609
00:23:04,799 --> 00:23:07,520
or only of the manufacturer batch or is

610
00:23:07,520 --> 00:23:08,960
it enough to know that the token was

611
00:23:08,960 --> 00:23:13,200
made by a manufacturer on the 502 list

612
00:23:13,840 --> 00:23:16,720
yeah yes uh i guess

613
00:23:16,720 --> 00:23:18,880
i hope i understand the question right

614
00:23:18,880 --> 00:23:20,000
so

615
00:23:20,000 --> 00:23:21,039
i think

616
00:23:21,039 --> 00:23:23,120
us like whether or not we need the token

617
00:23:23,120 --> 00:23:24,000
to be

618
00:23:24,000 --> 00:23:26,240
kind of different for each token to uh

619
00:23:26,240 --> 00:23:28,880
for authentication security work so

620
00:23:28,880 --> 00:23:31,200
actually our security guarantees that

621
00:23:31,200 --> 00:23:33,840
for each authentication each login is

622
00:23:33,840 --> 00:23:36,080
only bound to the generated credential

623
00:23:36,080 --> 00:23:37,039
so

624
00:23:37,039 --> 00:23:39,200
that means even if you have like a bunch

625
00:23:39,200 --> 00:23:41,279
of tokens that share the same

626
00:23:41,279 --> 00:23:44,080
uh attestation so same key that burned

627
00:23:44,080 --> 00:23:46,720
by the manufacturer it's still okay for

628
00:23:46,720 --> 00:23:49,039
different users to use different tokens

629
00:23:49,039 --> 00:23:52,720
to uh to get their security it's just

630
00:23:52,720 --> 00:23:53,600
that

631
00:23:53,600 --> 00:23:54,880
um

632
00:23:54,880 --> 00:23:56,720
well there are non-limited issues

633
00:23:56,720 --> 00:23:59,919
anonymity uh properties may may change

634
00:23:59,919 --> 00:24:03,279
so if a huge token has different uh

635
00:24:03,279 --> 00:24:05,919
attestation key then it's easy to easy

636
00:24:05,919 --> 00:24:08,240
for the server to distinguish well all

637
00:24:08,240 --> 00:24:10,159
these authentication are coming from the

638
00:24:10,159 --> 00:24:12,320
same token but if

639
00:24:12,320 --> 00:24:14,320
a bunch of

640
00:24:14,320 --> 00:24:16,240
tokens share the same

641
00:24:16,240 --> 00:24:18,799
same attestation key then it's hard for

642
00:24:18,799 --> 00:24:21,039
the for the server to distinguish which

643
00:24:21,039 --> 00:24:23,760
one coming from which token but it's

644
00:24:23,760 --> 00:24:27,320
more secure actually

645
00:24:33,120 --> 00:24:35,439
so

646
00:24:35,679 --> 00:24:38,400
i guess we are still waiting for

647
00:24:38,400 --> 00:24:43,039
i'm here sorry guys for the interaction

648
00:24:44,559 --> 00:24:47,919
we are i think now you can see me thank

649
00:24:47,919 --> 00:24:49,760
you my screen and see you we can hear

650
00:24:49,760 --> 00:24:51,360
perfect screen

651
00:24:51,360 --> 00:24:54,080
so sorry sorry again sorry sure no

652
00:24:54,080 --> 00:24:56,480
worries absolutely so the last talk of

653
00:24:56,480 --> 00:24:58,159
this session is titled secure wire

654
00:24:58,159 --> 00:25:00,159
shuffling in the probing model this is

655
00:25:00,159 --> 00:25:02,240
joint work by john sebastian koran and

656
00:25:02,240 --> 00:25:04,960
lorenzo spinoli and lorenzo will give us

657
00:25:04,960 --> 00:25:06,559
the talk thank you

658
00:25:06,559 --> 00:25:08,640
thank you very much for the introduction

659
00:25:08,640 --> 00:25:11,440
i also want i want to thank you

660
00:25:11,440 --> 00:25:13,679
thanks to my maxillion for the perfect

661
00:25:13,679 --> 00:25:15,760
introduction to the

662
00:25:15,760 --> 00:25:17,120
to the subject

663
00:25:17,120 --> 00:25:18,640
i will talk about circular white

664
00:25:18,640 --> 00:25:20,880
shuffling in the robbing model

665
00:25:20,880 --> 00:25:22,640
um

666
00:25:22,640 --> 00:25:24,000
maximilian

667
00:25:24,000 --> 00:25:26,400
makes my life easier essentially i will

668
00:25:26,400 --> 00:25:29,360
talk about the esw model

669
00:25:29,360 --> 00:25:32,559
where they introduce notions

670
00:25:32,559 --> 00:25:35,039
against side channel attacks in terms of

671
00:25:35,039 --> 00:25:36,880
an adversary can

672
00:25:36,880 --> 00:25:39,600
which can probes abound the number of

673
00:25:39,600 --> 00:25:40,880
wires

674
00:25:40,880 --> 00:25:42,799
within the circuit

675
00:25:42,799 --> 00:25:44,240
we can divided

676
00:25:44,240 --> 00:25:48,159
the their work in two parts in the first

677
00:25:48,159 --> 00:25:51,039
in the first part the outwards

678
00:25:51,039 --> 00:25:53,200
came out with a construction

679
00:25:53,200 --> 00:25:56,159
uh through the classical now classical

680
00:25:56,159 --> 00:25:58,880
masking control measures

681
00:25:58,880 --> 00:25:59,679
and

682
00:25:59,679 --> 00:26:02,640
where now the the sensible data x is

683
00:26:02,640 --> 00:26:03,919
manipulated

684
00:26:03,919 --> 00:26:06,559
along the circuit as a n out of an

685
00:26:06,559 --> 00:26:08,799
secret sharing and

686
00:26:08,799 --> 00:26:11,360
with the number of shares equal to 2t

687
00:26:11,360 --> 00:26:14,640
plus 1 they proved to achieve perfect

688
00:26:14,640 --> 00:26:17,200
security against the probes the only

689
00:26:17,200 --> 00:26:19,919
disadvantage of it is the complexity

690
00:26:19,919 --> 00:26:22,840
which is quadratic in the number of

691
00:26:22,840 --> 00:26:26,320
probes in fact in order to improve such

692
00:26:26,320 --> 00:26:28,559
complexity they relaxed in the second

693
00:26:28,559 --> 00:26:30,960
part a bit the definitions

694
00:26:30,960 --> 00:26:32,320
making now

695
00:26:32,320 --> 00:26:34,320
the adversary

696
00:26:34,320 --> 00:26:36,960
winning or learning some information so

697
00:26:36,960 --> 00:26:39,440
with some small or negligible

698
00:26:39,440 --> 00:26:41,279
probability

699
00:26:41,279 --> 00:26:42,960
through that and their construction they

700
00:26:42,960 --> 00:26:45,600
achieve the quasi-linearity

701
00:26:45,600 --> 00:26:48,159
our contribution is essentially to

702
00:26:48,159 --> 00:26:49,919
propose you a variant of the white

703
00:26:49,919 --> 00:26:52,960
shuffling control measure which now will

704
00:26:52,960 --> 00:26:55,600
have linear complexity in the random

705
00:26:55,600 --> 00:26:57,360
model

706
00:26:57,360 --> 00:27:00,000
we also provide an implementation of it

707
00:27:00,000 --> 00:27:02,480
and as you can see from the picture our

708
00:27:02,480 --> 00:27:05,279
control measure in some point will work

709
00:27:05,279 --> 00:27:07,279
better than the classical

710
00:27:07,279 --> 00:27:09,120
masking

711
00:27:09,120 --> 00:27:12,080
so let's recall we really quick that

712
00:27:12,080 --> 00:27:15,520
construction for the statistical privacy

713
00:27:15,520 --> 00:27:17,360
it works in two steps

714
00:27:17,360 --> 00:27:20,799
the first one is applied to the original

715
00:27:20,799 --> 00:27:23,440
circuit the classical masking control

716
00:27:23,440 --> 00:27:27,120
measure but now against k probes not t

717
00:27:27,120 --> 00:27:29,840
where k it's the security parameter and

718
00:27:29,840 --> 00:27:32,640
essentially they show that

719
00:27:32,640 --> 00:27:35,360
such uh circuit is indeed the random

720
00:27:35,360 --> 00:27:36,960
problem figure

721
00:27:36,960 --> 00:27:38,320
or ever

722
00:27:38,320 --> 00:27:40,080
average case security well now the

723
00:27:40,080 --> 00:27:42,320
adversary cannot probe

724
00:27:42,320 --> 00:27:44,880
the the wires he wants rather than

725
00:27:44,880 --> 00:27:47,039
essentially each its wire leaks with

726
00:27:47,039 --> 00:27:49,120
some probability p

727
00:27:49,120 --> 00:27:50,960
now uh

728
00:27:50,960 --> 00:27:53,039
sorry as a second step

729
00:27:53,039 --> 00:27:55,360
to make the security in the in the worst

730
00:27:55,360 --> 00:27:56,240
case

731
00:27:56,240 --> 00:27:57,039
um

732
00:27:57,039 --> 00:27:58,559
essentially they

733
00:27:58,559 --> 00:28:01,440
expanded the intermediate circuit c

734
00:28:01,440 --> 00:28:04,880
prime in a sort of sparser one c prime

735
00:28:04,880 --> 00:28:07,760
prime where essentially each wire

736
00:28:07,760 --> 00:28:11,039
of the of c prime is replaced with a new

737
00:28:11,039 --> 00:28:14,320
set of l wires where all of them will

738
00:28:14,320 --> 00:28:17,520
will have some dummy values but for one

739
00:28:17,520 --> 00:28:20,000
this one will uh of course take care of

740
00:28:20,000 --> 00:28:23,760
the original single voi

741
00:28:23,760 --> 00:28:25,600
so the issue here

742
00:28:25,600 --> 00:28:28,240
to process the gates somehow

743
00:28:28,240 --> 00:28:29,200
one

744
00:28:29,200 --> 00:28:31,840
must put the signals uh the the inputs

745
00:28:31,840 --> 00:28:34,720
of the gates uh voi and vujay into

746
00:28:34,720 --> 00:28:37,279
consecutive position in the new and the

747
00:28:37,279 --> 00:28:40,480
final circuit the c prime prime uh in uh

748
00:28:40,480 --> 00:28:43,200
yes that review paper they

749
00:28:43,200 --> 00:28:45,200
the the sorting network a certain

750
00:28:45,200 --> 00:28:48,320
network which has complexity log

751
00:28:48,320 --> 00:28:50,799
so the overall cost of the old circuits

752
00:28:50,799 --> 00:28:53,120
will be a big o of the number of gates

753
00:28:53,120 --> 00:28:54,960
and

754
00:28:54,960 --> 00:28:56,799
m sorry

755
00:28:56,799 --> 00:28:58,720
times times tiguati

756
00:28:58,720 --> 00:29:00,880
to ensure security of course against the

757
00:29:00,880 --> 00:29:02,720
now key probes

758
00:29:02,720 --> 00:29:05,279
the average case was just um

759
00:29:05,279 --> 00:29:07,200
intermediate phase

760
00:29:07,200 --> 00:29:08,640
and essentially

761
00:29:08,640 --> 00:29:11,039
that's where our contribution

762
00:29:11,039 --> 00:29:12,399
uh takes place

763
00:29:12,399 --> 00:29:15,360
we we thought to replace the sorting

764
00:29:15,360 --> 00:29:18,399
network with a secret shift

765
00:29:18,399 --> 00:29:21,840
where now the delta depends on the

766
00:29:21,840 --> 00:29:23,039
index

767
00:29:23,039 --> 00:29:25,279
j and j prime taking care of the

768
00:29:25,279 --> 00:29:26,880
original signals

769
00:29:26,880 --> 00:29:29,440
and we love the the effect that at the

770
00:29:29,440 --> 00:29:31,520
end of the cyclic shift

771
00:29:31,520 --> 00:29:35,279
um both the the the inputs will lay on

772
00:29:35,279 --> 00:29:36,480
the

773
00:29:36,480 --> 00:29:39,120
same position j prime prime

774
00:29:39,120 --> 00:29:42,320
we we called the shuffling index

775
00:29:42,320 --> 00:29:43,200
the

776
00:29:43,200 --> 00:29:45,520
the security proof will be based on on

777
00:29:45,520 --> 00:29:48,240
the fact that yes now uh because sorry i

778
00:29:48,240 --> 00:29:49,279
didn't

779
00:29:49,279 --> 00:29:52,320
told you that that now to achieve that

780
00:29:52,320 --> 00:29:54,720
the index j and j prime will be

781
00:29:54,720 --> 00:29:56,880
explicitly computed that's one of the

782
00:29:56,880 --> 00:29:58,480
main difference with the with their

783
00:29:58,480 --> 00:30:01,279
construction um for for them it was

784
00:30:01,279 --> 00:30:02,640
implicit

785
00:30:02,640 --> 00:30:04,159
now we have to

786
00:30:04,159 --> 00:30:06,480
make it explicit that's maybe an

787
00:30:06,480 --> 00:30:08,480
advantage for the adversary

788
00:30:08,480 --> 00:30:11,120
but the security the proof will rely on

789
00:30:11,120 --> 00:30:13,039
the fact that we are in the stateless

790
00:30:13,039 --> 00:30:16,399
model so the adversary has to choose the

791
00:30:16,399 --> 00:30:18,240
the whites

792
00:30:18,240 --> 00:30:19,440
in advance

793
00:30:19,440 --> 00:30:22,960
and nj is compute and running time so

794
00:30:22,960 --> 00:30:25,279
when the adversary learn

795
00:30:25,279 --> 00:30:28,000
the position j and j prime it's now too

796
00:30:28,000 --> 00:30:29,120
late

797
00:30:29,120 --> 00:30:30,399
or the

798
00:30:30,399 --> 00:30:32,880
shuffling index j prime prime it's now

799
00:30:32,880 --> 00:30:34,480
too late

800
00:30:34,480 --> 00:30:36,399
to move the probes and actually take

801
00:30:36,399 --> 00:30:38,480
advantage of it

802
00:30:38,480 --> 00:30:39,360
uh

803
00:30:39,360 --> 00:30:42,480
of course as i told you um the sig

804
00:30:42,480 --> 00:30:45,760
cyclic shift as a complexity uh big ol

805
00:30:45,760 --> 00:30:50,720
of l linear uh so the the overall

806
00:30:50,720 --> 00:30:53,120
time complexity

807
00:30:53,120 --> 00:30:55,039
of the of the protocol would be the

808
00:30:55,039 --> 00:30:57,600
number of gates time t

809
00:30:57,600 --> 00:31:00,720
as a final contribution we also

810
00:31:00,720 --> 00:31:02,880
provided a construction for the stateful

811
00:31:02,880 --> 00:31:05,360
model where essentially

812
00:31:05,360 --> 00:31:09,039
we will treat every memory cell

813
00:31:09,039 --> 00:31:10,960
passing through a

814
00:31:10,960 --> 00:31:12,240
classical

815
00:31:12,240 --> 00:31:13,039
siege

816
00:31:13,039 --> 00:31:13,919
shift

817
00:31:13,919 --> 00:31:14,799
and

818
00:31:14,799 --> 00:31:17,279
as the picture is showing you

819
00:31:17,279 --> 00:31:20,640
this randomized network

820
00:31:20,640 --> 00:31:24,159
that makes to to save quadratic factor

821
00:31:24,159 --> 00:31:27,440
over all the the overall complexity

822
00:31:27,440 --> 00:31:29,120
in fact for every

823
00:31:29,120 --> 00:31:31,840
memory cells the the the thai complexity

824
00:31:31,840 --> 00:31:32,799
will be

825
00:31:32,799 --> 00:31:34,559
again t-lock t

826
00:31:34,559 --> 00:31:36,399
and the proof essentially will be based

827
00:31:36,399 --> 00:31:38,960
on the fact that at the end

828
00:31:38,960 --> 00:31:41,760
of the randomizing network the output

829
00:31:41,760 --> 00:31:44,799
index will randomly distribute the

830
00:31:44,799 --> 00:31:46,640
and so the the privacy will be

831
00:31:46,640 --> 00:31:47,840
guaranteed

832
00:31:47,840 --> 00:31:52,080
uh so to conclude essentially we we

833
00:31:52,080 --> 00:31:54,399
propose a first improvement for the

834
00:31:54,399 --> 00:31:57,200
second part of the esw model the word

835
00:31:57,200 --> 00:31:58,960
shuffling control measure

836
00:31:58,960 --> 00:32:00,559
which is practical

837
00:32:00,559 --> 00:32:01,519
um

838
00:32:01,519 --> 00:32:05,039
if you exclude the embedded systems and

839
00:32:05,039 --> 00:32:06,080
as a

840
00:32:06,080 --> 00:32:08,960
somehow across a crossover point around

841
00:32:08,960 --> 00:32:11,360
600s

842
00:32:11,360 --> 00:32:13,600
and i think thank you very much i

843
00:32:13,600 --> 00:32:14,880
conclude my

844
00:32:14,880 --> 00:32:18,000
presentation if you feel free to

845
00:32:18,000 --> 00:32:19,440
ask any question

846
00:32:19,440 --> 00:32:23,440
and thank you very much for hearing it

847
00:32:24,399 --> 00:32:26,559
thank you very much lorenzo so now we

848
00:32:26,559 --> 00:32:28,159
have had all the talks in the session so

849
00:32:28,159 --> 00:32:30,399
now i would like to uh open up the floor

850
00:32:30,399 --> 00:32:31,360
questions

851
00:32:31,360 --> 00:32:34,320
um so please feel free to post your

852
00:32:34,320 --> 00:32:37,840
questions on on julie or in the chat or

853
00:32:37,840 --> 00:32:39,760
you can also you know just unmute

854
00:32:39,760 --> 00:32:41,200
yourself and

855
00:32:41,200 --> 00:32:42,559
ask questions

856
00:32:42,559 --> 00:32:43,440
um

857
00:32:43,440 --> 00:32:44,720
so

858
00:32:44,720 --> 00:32:46,640
uh it seems that

859
00:32:46,640 --> 00:32:49,120
there is a question on zulip

860
00:32:49,120 --> 00:32:49,919
uh

861
00:32:49,919 --> 00:32:52,159
for maximilian uh which i believe

862
00:32:52,159 --> 00:32:53,679
casiris has answered but maybe max

863
00:32:53,679 --> 00:32:55,120
million you would still like to address

864
00:32:55,120 --> 00:32:57,360
it for people here so it asks is there

865
00:32:57,360 --> 00:32:59,600
some connection between the bounded

866
00:32:59,600 --> 00:33:01,679
moment model and the new

867
00:33:01,679 --> 00:33:04,640
uh probing distribution tables

868
00:33:04,640 --> 00:33:07,360
yeah as a code offer of maximilian i'll

869
00:33:07,360 --> 00:33:08,720
answer

870
00:33:08,720 --> 00:33:10,480
the short answer is

871
00:33:10,480 --> 00:33:12,880
there is no direct link except like the

872
00:33:12,880 --> 00:33:15,039
the link we have uh traditionally

873
00:33:15,039 --> 00:33:17,600
between the bounded moment model and the

874
00:33:17,600 --> 00:33:19,279
threshold probing model there you have a

875
00:33:19,279 --> 00:33:21,760
link between basically the lowest

876
00:33:21,760 --> 00:33:24,159
leaking order moment in the bounded

877
00:33:24,159 --> 00:33:26,720
moment a probing model is the same as

878
00:33:26,720 --> 00:33:28,559
the threshold probing model and then

879
00:33:28,559 --> 00:33:30,399
between the threshold probing model and

880
00:33:30,399 --> 00:33:32,720
noisy leakage model there you have us

881
00:33:32,720 --> 00:33:35,279
again the link that basically uh the

882
00:33:35,279 --> 00:33:37,360
security order in the threshold probing

883
00:33:37,360 --> 00:33:39,600
model will give you information about

884
00:33:39,600 --> 00:33:41,919
how the security will be a for

885
00:33:41,919 --> 00:33:44,159
asymptotically low

886
00:33:44,159 --> 00:33:46,480
value of the p parameter for the

887
00:33:46,480 --> 00:33:49,519
noisy leakage model

888
00:33:50,000 --> 00:33:52,880
okay thank you

889
00:33:52,880 --> 00:33:54,640
uh

890
00:33:54,640 --> 00:33:56,880
so

891
00:33:57,200 --> 00:34:01,360
i don't see uh any more questions on

892
00:34:01,360 --> 00:34:03,519
sulip at the moment

893
00:34:03,519 --> 00:34:05,039
but please feel free to post your

894
00:34:05,039 --> 00:34:07,679
questions on the chat in the meantime

895
00:34:07,679 --> 00:34:09,760
i had a question uh to the second

896
00:34:09,760 --> 00:34:10,800
speaker

897
00:34:10,800 --> 00:34:12,639
michelle

898
00:34:12,639 --> 00:34:16,320
on the ssc uh scheme so

899
00:34:16,320 --> 00:34:19,280
my question was that you mentioned that

900
00:34:19,280 --> 00:34:22,480
uh you know you your scheme uses a stash

901
00:34:22,480 --> 00:34:24,079
on the client side

902
00:34:24,079 --> 00:34:27,280
um and as far as i know uh most of the

903
00:34:27,280 --> 00:34:29,440
lower bound results on you know the

904
00:34:29,440 --> 00:34:32,480
efficiency of uh of you know locality

905
00:34:32,480 --> 00:34:35,359
preserving sse usually doesn't consider

906
00:34:35,359 --> 00:34:37,280
that the client has an additional stash

907
00:34:37,280 --> 00:34:39,440
so do you think this somehow

908
00:34:39,440 --> 00:34:41,918
uh affects the lower bounds and makes it

909
00:34:41,918 --> 00:34:44,079
easier maybe to construct schemes that

910
00:34:44,079 --> 00:34:47,040
can you know be more efficient or

911
00:34:47,040 --> 00:34:49,520
or is it just some is it is it a lower

912
00:34:49,520 --> 00:34:51,119
bound that stays irrespective of whether

913
00:34:51,119 --> 00:34:53,440
or not you have a statute

914
00:34:53,440 --> 00:34:55,918
uh yeah i think that the lower bounds

915
00:34:55,918 --> 00:34:59,920
are with respect to no stash but um

916
00:34:59,920 --> 00:35:01,440
yeah i think the fact that we can get

917
00:35:01,440 --> 00:35:04,240
optimality here is first of all i mean

918
00:35:04,240 --> 00:35:06,480
you can see it as partly uh because we

919
00:35:06,480 --> 00:35:07,920
don't have a stash

920
00:35:07,920 --> 00:35:09,680
but secondly it's also because we look

921
00:35:09,680 --> 00:35:11,119
at a different notion of efficiency

922
00:35:11,119 --> 00:35:12,800
which is actually

923
00:35:12,800 --> 00:35:15,520
um yeah i mean it it's

924
00:35:15,520 --> 00:35:18,320
it's it has connections because i mean

925
00:35:18,320 --> 00:35:20,400
the same we also

926
00:35:20,400 --> 00:35:22,240
look at um

927
00:35:22,240 --> 00:35:24,320
at a way to to essentially store

928
00:35:24,320 --> 00:35:27,119
document identifiers close by

929
00:35:27,119 --> 00:35:28,079
but

930
00:35:28,079 --> 00:35:30,079
it's slightly more relaxed because it

931
00:35:30,079 --> 00:35:31,839
doesn't have like they only need to be

932
00:35:31,839 --> 00:35:34,079
in the same page so not directly next to

933
00:35:34,079 --> 00:35:35,520
each other

934
00:35:35,520 --> 00:35:36,320
um

935
00:35:36,320 --> 00:35:38,160
sorry i think those

936
00:35:38,160 --> 00:35:40,480
two points make it uh

937
00:35:40,480 --> 00:35:41,839
possible

938
00:35:41,839 --> 00:35:44,400
um but yeah i don't have

939
00:35:44,400 --> 00:35:46,160
so yeah it's essentially in google

940
00:35:46,160 --> 00:35:48,320
hashing it's i think it's

941
00:35:48,320 --> 00:35:50,800
it's kind of the main uh the main

942
00:35:50,800 --> 00:35:52,720
hashing algorithm that allows for off

943
00:35:52,720 --> 00:35:53,520
one

944
00:35:53,520 --> 00:35:55,760
and while being data independent

945
00:35:55,760 --> 00:35:57,599
um and there i think generally you need

946
00:35:57,599 --> 00:35:59,760
a stash so um

947
00:35:59,760 --> 00:36:01,760
yeah i guess that's why uh

948
00:36:01,760 --> 00:36:04,000
that's why this dash is necessary and i

949
00:36:04,000 --> 00:36:05,680
suppose that uh

950
00:36:05,680 --> 00:36:08,480
yeah um

951
00:36:08,640 --> 00:36:11,520
i think it's not directly

952
00:36:11,520 --> 00:36:13,359
like it doesn't directly

953
00:36:13,359 --> 00:36:15,839
imply a similar result in the

954
00:36:15,839 --> 00:36:18,079
locality case but

955
00:36:18,079 --> 00:36:20,320
yeah so i'm not sure whether the lower

956
00:36:20,320 --> 00:36:21,839
bounds still hold in the locality case

957
00:36:21,839 --> 00:36:23,040
or not

958
00:36:23,040 --> 00:36:25,200
with a stash or not but

959
00:36:25,200 --> 00:36:26,880
at least in this case like for patch

960
00:36:26,880 --> 00:36:28,079
efficiency

961
00:36:28,079 --> 00:36:30,720
um it seems to make a difference here

962
00:36:30,720 --> 00:36:31,599
okay

963
00:36:31,599 --> 00:36:32,640
thanks

964
00:36:32,640 --> 00:36:34,400
um so i had one more follow-up question

965
00:36:34,400 --> 00:36:35,760
so you mentioned about the data

966
00:36:35,760 --> 00:36:37,599
independent packing being the main sort

967
00:36:37,599 --> 00:36:39,599
of technical

968
00:36:39,599 --> 00:36:43,200
sorry there seems to be some noise

969
00:36:45,040 --> 00:36:47,040
not sure

970
00:36:47,040 --> 00:36:50,839
it's coming from but

971
00:36:52,800 --> 00:36:55,800
um

972
00:36:55,839 --> 00:36:57,599
okay so maybe i'll just go ahead so so

973
00:36:57,599 --> 00:36:59,040
you mentioned about the data independent

974
00:36:59,040 --> 00:37:00,480
packing being one of the main technical

975
00:37:00,480 --> 00:37:02,400
tools and if i understand it involves

976
00:37:02,400 --> 00:37:04,320
some amount of pre-processing at the

977
00:37:04,320 --> 00:37:05,920
client side before the

978
00:37:05,920 --> 00:37:08,079
encrypted database is outsourced so

979
00:37:08,079 --> 00:37:09,839
could you maybe expand a little bit on

980
00:37:09,839 --> 00:37:11,200
how this scales with the size of the

981
00:37:11,200 --> 00:37:12,320
database

982
00:37:12,320 --> 00:37:14,880
uh so essentially it boils down to a max

983
00:37:14,880 --> 00:37:17,119
flow computation so the pre-processing

984
00:37:17,119 --> 00:37:18,640
can i mean

985
00:37:18,640 --> 00:37:20,640
there's for example uh

986
00:37:20,640 --> 00:37:22,800
max flow computations i think in like n

987
00:37:22,800 --> 00:37:25,280
to the three divided by two

988
00:37:25,280 --> 00:37:27,280
so that's kind of the scaling i think

989
00:37:27,280 --> 00:37:28,640
the implementation that we provide in

990
00:37:28,640 --> 00:37:31,119
the papers with a flow computation in

991
00:37:31,119 --> 00:37:33,280
credit uh critical

992
00:37:33,280 --> 00:37:36,160
quadratical time so it has quite the

993
00:37:36,160 --> 00:37:37,280
overhead

994
00:37:37,280 --> 00:37:39,599
which makes it uh

995
00:37:39,599 --> 00:37:41,359
less attractive

996
00:37:41,359 --> 00:37:42,720
if you want to

997
00:37:42,720 --> 00:37:44,400
apply like an

998
00:37:44,400 --> 00:37:46,400
if you want to apply a transformation

999
00:37:46,400 --> 00:37:48,079
for the dynamic case

1000
00:37:48,079 --> 00:37:49,680
for example because you need a lot of

1001
00:37:49,680 --> 00:37:51,359
pre-processing

1002
00:37:51,359 --> 00:37:52,560
um

1003
00:37:52,560 --> 00:37:54,720
but uh yeah essentially this is a

1004
00:37:54,720 --> 00:37:56,320
one-time pre-processing in the in the

1005
00:37:56,320 --> 00:37:58,240
static case so it's not yeah in the

1006
00:37:58,240 --> 00:38:00,160
static case it's okay

1007
00:38:00,160 --> 00:38:02,320
and uh using a more efficient flow

1008
00:38:02,320 --> 00:38:04,720
computation can be lower but

1009
00:38:04,720 --> 00:38:06,240
yeah that's true that's one of the

1010
00:38:06,240 --> 00:38:08,400
caveats of using the scheme in practice

1011
00:38:08,400 --> 00:38:10,800
it would be like a very high

1012
00:38:10,800 --> 00:38:12,800
um pre-processing phase but it's one

1013
00:38:12,800 --> 00:38:14,000
time so

1014
00:38:14,000 --> 00:38:15,839
um in turn you get really efficient

1015
00:38:15,839 --> 00:38:17,680
search queries essentially

1016
00:38:17,680 --> 00:38:19,839
and no basically no storage will have

1017
00:38:19,839 --> 00:38:21,680
like a storage overhead of two plus

1018
00:38:21,680 --> 00:38:22,880
epsilon

1019
00:38:22,880 --> 00:38:25,359
okay cool and maybe one last question so

1020
00:38:25,359 --> 00:38:27,200
regarding the client stash so does the

1021
00:38:27,200 --> 00:38:29,040
stash size grow linearly with the size

1022
00:38:29,040 --> 00:38:31,440
of the database or is it sublinear or

1023
00:38:31,440 --> 00:38:33,920
actually it's independent of the size of

1024
00:38:33,920 --> 00:38:36,320
the database so um

1025
00:38:36,320 --> 00:38:37,680
if you're careful in these in the

1026
00:38:37,680 --> 00:38:39,359
analysis of the like that's kind of the

1027
00:38:39,359 --> 00:38:40,400
main part if you're careful in the

1028
00:38:40,400 --> 00:38:41,520
analyzers

1029
00:38:41,520 --> 00:38:44,079
then you can actually show that it's

1030
00:38:44,079 --> 00:38:47,440
um yeah that that if you do the analysis

1031
00:38:47,440 --> 00:38:49,040
with respect to the security parameter

1032
00:38:49,040 --> 00:38:50,800
then you can actually show that it

1033
00:38:50,800 --> 00:38:53,359
um that it kind of depends on the uh

1034
00:38:53,359 --> 00:38:55,280
security parameter and it depends on the

1035
00:38:55,280 --> 00:38:57,200
stash on the page size

1036
00:38:57,200 --> 00:38:59,680
um so it grows with a higher page size

1037
00:38:59,680 --> 00:39:01,520
but it

1038
00:39:01,520 --> 00:39:04,480
it actually scales logarithmically um

1039
00:39:04,480 --> 00:39:06,079
like inverse logarithmically with the

1040
00:39:06,079 --> 00:39:07,680
size of the database so these higher

1041
00:39:07,680 --> 00:39:09,520
decisive database

1042
00:39:09,520 --> 00:39:11,680
um the better distributed i mean the

1043
00:39:11,680 --> 00:39:13,839
more randomization essentially you have

1044
00:39:13,839 --> 00:39:16,480
and or entropy and the lower actually

1045
00:39:16,480 --> 00:39:18,800
your stats actually

1046
00:39:18,800 --> 00:39:21,200
okay awesome thanks a lot

1047
00:39:21,200 --> 00:39:22,079
thank you very much for the

1048
00:39:22,079 --> 00:39:23,599
clarification

1049
00:39:23,599 --> 00:39:25,440
um

1050
00:39:25,440 --> 00:39:28,560
so we have a question for lorenzo

1051
00:39:28,560 --> 00:39:32,160
on on zulip it basically which says uh

1052
00:39:32,160 --> 00:39:34,480
could you please give an example uh for

1053
00:39:34,480 --> 00:39:37,440
the cross point of um

1054
00:39:37,440 --> 00:39:39,839
the number of probes equals six thousand

1055
00:39:39,839 --> 00:39:41,599
uh for instance uh when you are

1056
00:39:41,599 --> 00:39:44,160
implementing masked aes or masked

1057
00:39:44,160 --> 00:39:46,400
present

1058
00:39:46,400 --> 00:39:48,160
sorry can can you

1059
00:39:48,160 --> 00:39:50,160
repeat the question sorry sure an

1060
00:39:50,160 --> 00:39:52,400
example of uh

1061
00:39:52,400 --> 00:39:54,720
so so the question basically asks for an

1062
00:39:54,720 --> 00:39:56,960
example uh

1063
00:39:56,960 --> 00:39:58,640
so when exactly i guess the question

1064
00:39:58,640 --> 00:40:00,320
means that when exactly is the cross

1065
00:40:00,320 --> 00:40:01,760
point uh

1066
00:40:01,760 --> 00:40:04,240
number of probes equal to 6000 so is

1067
00:40:04,240 --> 00:40:05,760
this the case when you are implementing

1068
00:40:05,760 --> 00:40:08,000
mass aes or maybe would it change for

1069
00:40:08,000 --> 00:40:10,240
example if you are implementing some

1070
00:40:10,240 --> 00:40:12,319
other block cipher like mask present yes

1071
00:40:12,319 --> 00:40:14,240
i i think it will change

1072
00:40:14,240 --> 00:40:17,359
we all implemented the ies

1073
00:40:17,359 --> 00:40:19,280
there is a table in the

1074
00:40:19,280 --> 00:40:20,240
in the

1075
00:40:20,240 --> 00:40:22,640
paper with the exact amount which i

1076
00:40:22,640 --> 00:40:25,520
cannot remember but yes definitely is

1077
00:40:25,520 --> 00:40:27,200
customized on the fact that we

1078
00:40:27,200 --> 00:40:29,440
implemented the ies rather than for

1079
00:40:29,440 --> 00:40:31,520
example uh ds

1080
00:40:31,520 --> 00:40:33,760
uh i think the crossing point will

1081
00:40:33,760 --> 00:40:35,920
change according to the

1082
00:40:35,920 --> 00:40:38,560
the protocol which is applied

1083
00:40:38,560 --> 00:40:40,960
we didn't try

1084
00:40:40,960 --> 00:40:44,800
but i'm pretty sure that it will change

1085
00:40:45,359 --> 00:40:46,880
okay thank you so maybe i had a

1086
00:40:46,880 --> 00:40:49,200
follow-up question for you lorenzo so so

1087
00:40:49,200 --> 00:40:51,359
uh could you comment a little bit on the

1088
00:40:51,359 --> 00:40:54,560
depth blow up of your technique

1089
00:40:54,560 --> 00:40:56,880
yes but in in the end

1090
00:40:56,880 --> 00:40:58,480
it will be

1091
00:40:58,480 --> 00:41:00,079
a polylog

1092
00:41:00,079 --> 00:41:04,319
for example for the cyclic shift

1093
00:41:04,560 --> 00:41:07,839
it will be a sort of logarithmic

1094
00:41:07,839 --> 00:41:10,720
it will not uh really uh

1095
00:41:10,720 --> 00:41:14,400
influence or uh be play a big part

1096
00:41:14,400 --> 00:41:15,440
of it

1097
00:41:15,440 --> 00:41:18,160
actually we'll save something uh in the

1098
00:41:18,160 --> 00:41:20,800
in the complexity we i told you

1099
00:41:20,800 --> 00:41:22,160
i exposed you

1100
00:41:22,160 --> 00:41:26,079
essentially we uh the factor case even

1101
00:41:26,079 --> 00:41:28,319
we actually save a bit i think for the

1102
00:41:28,319 --> 00:41:29,280
es

1103
00:41:29,280 --> 00:41:32,640
it's around a factor of k to the 10 it's

1104
00:41:32,640 --> 00:41:34,800
it then we will reach

1105
00:41:34,800 --> 00:41:36,960
k to the nine

1106
00:41:36,960 --> 00:41:38,800
k to the seventh for the stateless i

1107
00:41:38,800 --> 00:41:42,800
think i cannot remember uh correctly uh

1108
00:41:42,800 --> 00:41:46,000
but yes it it will not impact uh

1109
00:41:46,000 --> 00:41:50,160
much in our analysis

1110
00:41:50,160 --> 00:41:51,839
okay thank you thank you very much for

1111
00:41:51,839 --> 00:41:53,200
the clever thank you

1112
00:41:53,200 --> 00:41:55,760
thank you um so i guess we are nearing

1113
00:41:55,760 --> 00:41:58,960
the end of our uh allotted time uh so

1114
00:41:58,960 --> 00:42:00,560
this is the final call if there are any

1115
00:42:00,560 --> 00:42:01,760
more questions

1116
00:42:01,760 --> 00:42:03,680
otherwise please feel free to post them

1117
00:42:03,680 --> 00:42:06,160
offline on zulib and i believe the

1118
00:42:06,160 --> 00:42:09,680
authors will be happy to to answer them

1119
00:42:09,680 --> 00:42:11,200
okay so we have one last question maybe

1120
00:42:11,200 --> 00:42:13,119
that we can take before we wrap up so

1121
00:42:13,119 --> 00:42:14,400
there's a question for lorenzo which

1122
00:42:14,400 --> 00:42:16,160
says does the leakage probability matter

1123
00:42:16,160 --> 00:42:18,960
for the cross point

1124
00:42:18,960 --> 00:42:23,119
does the leakage probability matter but

1125
00:42:27,359 --> 00:42:31,119
i will say i will say no i would say no

1126
00:42:31,119 --> 00:42:34,480
we also provide an improvement for for

1127
00:42:34,480 --> 00:42:35,280
the

1128
00:42:35,280 --> 00:42:36,880
p used

1129
00:42:36,880 --> 00:42:38,079
in the

1130
00:42:38,079 --> 00:42:39,760
random problem model

1131
00:42:39,760 --> 00:42:40,640
uh

1132
00:42:40,640 --> 00:42:42,960
i'm not really sure

1133
00:42:42,960 --> 00:42:46,319
you can uh text me send an email uh

1134
00:42:46,319 --> 00:42:49,280
maybe i can give you whoever asked a

1135
00:42:49,280 --> 00:42:51,119
better explanation

1136
00:42:51,119 --> 00:42:52,560
right now

1137
00:42:52,560 --> 00:42:55,839
i will say no but i'm not 100 sure i'm

1138
00:42:55,839 --> 00:42:58,079
pretty sure but

1139
00:42:58,079 --> 00:43:00,960
maybe maybe i can check a bit better and

1140
00:43:00,960 --> 00:43:02,640
discuss with the

1141
00:43:02,640 --> 00:43:06,000
whoever asked but to answer to everyone

1142
00:43:06,000 --> 00:43:08,560
i would say no

1143
00:43:08,560 --> 00:43:11,040
okay awesome uh that sounds great thanks

1144
00:43:11,040 --> 00:43:13,760
lauren so thank you very much

1145
00:43:13,760 --> 00:43:15,839
so if there are any more no more

1146
00:43:15,839 --> 00:43:17,520
questions uh then i would like to take

1147
00:43:17,520 --> 00:43:18,960
this opportunity to thank all the

1148
00:43:18,960 --> 00:43:21,200
speakers in this session

1149
00:43:21,200 --> 00:43:24,480
and uh thank you very much

