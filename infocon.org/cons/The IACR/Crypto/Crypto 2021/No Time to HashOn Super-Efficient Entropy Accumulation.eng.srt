1
00:00:01,360 --> 00:00:04,240
hi welcome to my talk on super efficient

2
00:00:04,240 --> 00:00:05,920
entropy accumulation

3
00:00:05,920 --> 00:00:08,960
my name is jia shia i'm a first year phd

4
00:00:08,960 --> 00:00:11,599
student in new york university shanghai

5
00:00:11,599 --> 00:00:13,599
and this is a joint work i did with

6
00:00:13,599 --> 00:00:17,880
ifganudotis ciao

7
00:00:18,800 --> 00:00:21,439
our work studies real world random

8
00:00:21,439 --> 00:00:22,880
number generators

9
00:00:22,880 --> 00:00:26,800
in 2019 microsoft published the white

10
00:00:26,800 --> 00:00:29,199
paper of windows time's random number

11
00:00:29,199 --> 00:00:31,439
generation infrastructure

12
00:00:31,439 --> 00:00:34,079
in their design two steps are needed in

13
00:00:34,079 --> 00:00:36,160
order to get random bits

14
00:00:36,160 --> 00:00:39,120
the first step is entropy accumulation

15
00:00:39,120 --> 00:00:41,600
multiple low energy sources are gathered

16
00:00:41,600 --> 00:00:44,960
together to form high entropy state

17
00:00:44,960 --> 00:00:46,879
then in the second step called

18
00:00:46,879 --> 00:00:48,480
randomness extraction

19
00:00:48,480 --> 00:00:50,640
those high entropy states are sent to a

20
00:00:50,640 --> 00:00:53,520
cryptographic hash function to generate

21
00:00:53,520 --> 00:00:55,360
random bits

22
00:00:55,360 --> 00:00:57,840
in our work we have modeled the entropy

23
00:00:57,840 --> 00:01:00,480
accumulation procedure of real-world

24
00:01:00,480 --> 00:01:03,359
random number generators and built the

25
00:01:03,359 --> 00:01:06,400
theoretical foundations for it

26
00:01:06,400 --> 00:01:09,119
prior to our work entropy accumulation

27
00:01:09,119 --> 00:01:12,320
was often modeled by iterated hashing

28
00:01:12,320 --> 00:01:15,439
with the cryptographic hash function

29
00:01:15,439 --> 00:01:17,680
however this is not realistic in the

30
00:01:17,680 --> 00:01:19,680
context of real-world random number

31
00:01:19,680 --> 00:01:22,640
generators because many practical

32
00:01:22,640 --> 00:01:24,960
entropy sources such as interrupted

33
00:01:24,960 --> 00:01:28,159
timings come at a very rapid pace but

34
00:01:28,159 --> 00:01:31,520
with relatively low entropy for example

35
00:01:31,520 --> 00:01:33,759
so running a cryptographic hash function

36
00:01:33,759 --> 00:01:36,479
every time we receive an input is too

37
00:01:36,479 --> 00:01:38,720
expensive to use

38
00:01:38,720 --> 00:01:40,720
we would like to know what is the best

39
00:01:40,720 --> 00:01:43,200
way to design extremely fast and

40
00:01:43,200 --> 00:01:45,040
practical entropy accumulation

41
00:01:45,040 --> 00:01:48,399
procedures to accumulate entropy as fast

42
00:01:48,399 --> 00:01:50,720
as possible

43
00:01:50,720 --> 00:01:52,960
to answer this question is helpful to

44
00:01:52,960 --> 00:01:56,960
see what is typically done in practice

45
00:01:56,960 --> 00:01:59,119
windows time implements the following

46
00:01:59,119 --> 00:02:02,079
rotate then xor procedure

47
00:02:02,079 --> 00:02:05,840
for example in the 32-bit cpu a register

48
00:02:05,840 --> 00:02:08,720
r of 32-bit alarm will be used to

49
00:02:08,720 --> 00:02:11,200
accumulate entropy

50
00:02:11,200 --> 00:02:13,440
the entropy source x such as an

51
00:02:13,440 --> 00:02:15,840
interrupter timing is also a 32-bit

52
00:02:15,840 --> 00:02:17,920
string

53
00:02:17,920 --> 00:02:21,200
to update the register r one needs to

54
00:02:21,200 --> 00:02:24,080
cyclically rotate the bits of r by a

55
00:02:24,080 --> 00:02:25,920
fixed rotation number

56
00:02:25,920 --> 00:02:26,959
five

57
00:02:26,959 --> 00:02:31,680
and then xor the input x to the result

58
00:02:31,680 --> 00:02:34,319
in total there will be 32 entropy

59
00:02:34,319 --> 00:02:38,239
sources being accumulated into r

60
00:02:38,239 --> 00:02:42,560
similarly in the 64-bit cpu r receives

61
00:02:42,560 --> 00:02:45,599
64 entropy sources and the rotation

62
00:02:45,599 --> 00:02:48,560
number is 19.

63
00:02:48,560 --> 00:02:51,599
while this design appears reasonable it

64
00:02:51,599 --> 00:02:53,440
raises a lot of questions that i would

65
00:02:53,440 --> 00:02:56,000
like to answer

66
00:02:56,000 --> 00:02:57,680
the first question is

67
00:02:57,680 --> 00:02:58,959
can rotation

68
00:02:58,959 --> 00:03:01,040
indeed accumulate entropy

69
00:03:01,040 --> 00:03:04,000
in other words givens above rotates and

70
00:03:04,000 --> 00:03:08,640
xor procedure after receiving 32 or 64

71
00:03:08,640 --> 00:03:09,840
samples

72
00:03:09,840 --> 00:03:11,280
we really want to know whether the

73
00:03:11,280 --> 00:03:13,760
register r will convert to a high

74
00:03:13,760 --> 00:03:16,000
entropy state

75
00:03:16,000 --> 00:03:19,200
if rotation works then

76
00:03:19,200 --> 00:03:22,159
we want to know how microsoft selected

77
00:03:22,159 --> 00:03:24,720
those mysterious rotation numbers are

78
00:03:24,720 --> 00:03:25,920
found

79
00:03:25,920 --> 00:03:27,280
in particular

80
00:03:27,280 --> 00:03:29,440
our macrosoft's choice

81
00:03:29,440 --> 00:03:31,280
of rotation numbers

82
00:03:31,280 --> 00:03:36,159
5 for the 32 bit cpu and 19 for the 64

83
00:03:36,159 --> 00:03:38,799
bit cpu reasonable

84
00:03:38,799 --> 00:03:41,040
finally

85
00:03:41,040 --> 00:03:43,280
its rotation really is the best way for

86
00:03:43,280 --> 00:03:45,040
entropy accumulation

87
00:03:45,040 --> 00:03:47,920
can rotation it be replaced by a better

88
00:03:47,920 --> 00:03:50,559
permutation

89
00:03:50,640 --> 00:03:53,200
to start answering these questions

90
00:03:53,200 --> 00:03:55,920
the first priority is to model import

91
00:03:55,920 --> 00:03:57,200
sources

92
00:03:57,200 --> 00:03:59,360
according to the white paper interrupted

93
00:03:59,360 --> 00:04:01,680
timings are the primary

94
00:04:01,680 --> 00:04:04,239
entropy sources of windows time

95
00:04:04,239 --> 00:04:06,959
so as the first modeling assumption

96
00:04:06,959 --> 00:04:08,239
we will assume

97
00:04:08,239 --> 00:04:10,239
interrupt interpreter timings are

98
00:04:10,239 --> 00:04:12,720
independent

99
00:04:12,720 --> 00:04:15,439
well it might not be entirely accurate

100
00:04:15,439 --> 00:04:18,160
in practice we believe that it somehow

101
00:04:18,160 --> 00:04:20,478
captures the future of

102
00:04:20,478 --> 00:04:22,960
interpreter timings which don't appear a

103
00:04:22,960 --> 00:04:25,680
fully adversarial

104
00:04:25,680 --> 00:04:27,280
second

105
00:04:27,280 --> 00:04:29,919
to minimize the number of parameters and

106
00:04:29,919 --> 00:04:32,320
focus on the high level picture we will

107
00:04:32,320 --> 00:04:34,960
assume that the mean entropy of each

108
00:04:34,960 --> 00:04:37,520
independent sample is lower bounded by

109
00:04:37,520 --> 00:04:39,680
some parameter k

110
00:04:39,680 --> 00:04:41,919
the key point is that our entropy

111
00:04:41,919 --> 00:04:44,479
accumulation procedure doesn't know the

112
00:04:44,479 --> 00:04:46,960
imported source in advance

113
00:04:46,960 --> 00:04:48,960
so our goal is to find our rotation

114
00:04:48,960 --> 00:04:52,240
number alpha whose corresponding entropy

115
00:04:52,240 --> 00:04:55,040
accumulation procedure works to the best

116
00:04:55,040 --> 00:04:58,160
extent for all possible k

117
00:04:58,160 --> 00:05:00,080
finally

118
00:05:00,080 --> 00:05:02,720
we will further restrict each sample to

119
00:05:02,720 --> 00:05:06,000
come from some family of distributions

120
00:05:06,000 --> 00:05:08,880
in our paper we have given a country

121
00:05:08,880 --> 00:05:10,400
example showing that

122
00:05:10,400 --> 00:05:12,880
the rotate the xor procedure is too

123
00:05:12,880 --> 00:05:14,880
simple to work for arbitrary

124
00:05:14,880 --> 00:05:17,199
distributions of entropy k

125
00:05:17,199 --> 00:05:20,479
so we must choose appropriate a family

126
00:05:20,479 --> 00:05:24,160
of distributions to both include most of

127
00:05:24,160 --> 00:05:24,960
the

128
00:05:24,960 --> 00:05:27,120
natural distributions and capture the

129
00:05:27,120 --> 00:05:30,320
future of interrupted timings

130
00:05:30,320 --> 00:05:32,960
notice that the lower order bits

131
00:05:32,960 --> 00:05:35,440
of interpreter timings change more

132
00:05:35,440 --> 00:05:38,639
rapidly than the higher order bits

133
00:05:38,639 --> 00:05:41,199
so the intuitive requirement is that

134
00:05:41,199 --> 00:05:43,360
these distributions should have most of

135
00:05:43,360 --> 00:05:46,320
the entropy in the lower order bits

136
00:05:46,320 --> 00:05:48,800
according to this we can define a very

137
00:05:48,800 --> 00:05:51,440
wide class of distributions which we

138
00:05:51,440 --> 00:05:54,400
call to monotone

139
00:05:55,039 --> 00:05:57,360
two monotone distributions are unfit

140
00:05:57,360 --> 00:06:00,000
distributions such that the probability

141
00:06:00,000 --> 00:06:04,160
mass function has at most one peak

142
00:06:04,160 --> 00:06:06,960
this is a large class and it includes

143
00:06:06,960 --> 00:06:09,520
discrete gaussian distributions discrete

144
00:06:09,520 --> 00:06:11,280
exponential distributions and the

145
00:06:11,280 --> 00:06:13,520
uniform distributions over the first k

146
00:06:13,520 --> 00:06:14,960
bits

147
00:06:14,960 --> 00:06:17,360
these three natural distributions are

148
00:06:17,360 --> 00:06:19,440
often used to model in interrupted

149
00:06:19,440 --> 00:06:21,199
timings

150
00:06:21,199 --> 00:06:23,280
the simplest two mountain distribution

151
00:06:23,280 --> 00:06:25,039
is the uniform distribution over the

152
00:06:25,039 --> 00:06:26,400
first k bits

153
00:06:26,400 --> 00:06:28,800
where k least significant bits are

154
00:06:28,800 --> 00:06:31,199
uniformly random and the remaining n

155
00:06:31,199 --> 00:06:34,880
minus k bits are fixed it's obvious to

156
00:06:34,880 --> 00:06:37,360
see that this distribution has most of

157
00:06:37,360 --> 00:06:40,560
its entropy in the lower order bits

158
00:06:40,560 --> 00:06:43,520
most surprisingly our mean our minima

159
00:06:43,520 --> 00:06:46,160
shows that any tumultum distribution

160
00:06:46,160 --> 00:06:48,960
does in fact have most of its entropy in

161
00:06:48,960 --> 00:06:50,880
the lower order bits

162
00:06:50,880 --> 00:06:53,680
to summarize we will instantiate our

163
00:06:53,680 --> 00:06:56,319
family of distributions to be all

164
00:06:56,319 --> 00:06:58,800
monotone distributions our own beats

165
00:06:58,800 --> 00:07:00,880
having entropy at least decay

166
00:07:00,880 --> 00:07:02,560
and we are allow

167
00:07:02,560 --> 00:07:04,560
arbitrary independent but not

168
00:07:04,560 --> 00:07:06,960
necessarily identical samples from the

169
00:07:06,960 --> 00:07:09,199
family

170
00:07:09,199 --> 00:07:10,880
with central resources being modeled

171
00:07:10,880 --> 00:07:13,440
properly now we are prepared to present

172
00:07:13,440 --> 00:07:16,720
our results

173
00:07:16,720 --> 00:07:18,240
first of all

174
00:07:18,240 --> 00:07:21,440
since any two-month distribution

175
00:07:21,440 --> 00:07:23,680
has most of its entropy in the lower

176
00:07:23,680 --> 00:07:26,080
order bits we can use this property to

177
00:07:26,080 --> 00:07:28,160
show that

178
00:07:28,160 --> 00:07:31,039
any rotation on bits

179
00:07:31,039 --> 00:07:34,319
with rotation number alpha core prime to

180
00:07:34,319 --> 00:07:35,199
n

181
00:07:35,199 --> 00:07:38,560
can accumulate nearly in bits of entropy

182
00:07:38,560 --> 00:07:41,039
within n steps

183
00:07:41,039 --> 00:07:43,520
although we typically think of rotation

184
00:07:43,520 --> 00:07:46,960
by 1 as the worst condenser our result

185
00:07:46,960 --> 00:07:49,919
implies rotation by 1 can also condense

186
00:07:49,919 --> 00:07:52,000
two monotonic distributions to linear

187
00:07:52,000 --> 00:07:54,800
entropy within n steps

188
00:07:54,800 --> 00:07:55,919
what's more

189
00:07:55,919 --> 00:07:58,479
this result can immediately generalize

190
00:07:58,479 --> 00:08:01,360
to cyclical permutations so that any

191
00:08:01,360 --> 00:08:03,759
clinical permutation can condense to

192
00:08:03,759 --> 00:08:07,840
linear entropy within n steps

193
00:08:08,000 --> 00:08:10,960
the first result justifies the use of

194
00:08:10,960 --> 00:08:13,680
rotation but only if we are willing to

195
00:08:13,680 --> 00:08:15,680
wait in steps

196
00:08:15,680 --> 00:08:18,000
it fails to distinguish between

197
00:08:18,000 --> 00:08:21,199
different rotation numbers alpha

198
00:08:21,199 --> 00:08:23,759
one rotation number rfi is one

199
00:08:23,759 --> 00:08:26,400
even if the input already has a very

200
00:08:26,400 --> 00:08:29,520
high entropy we do need roughly in steps

201
00:08:29,520 --> 00:08:32,080
in order to accumulate nearly impedes of

202
00:08:32,080 --> 00:08:34,080
entropy

203
00:08:34,080 --> 00:08:36,640
so if we wish to do better we must

204
00:08:36,640 --> 00:08:38,839
somehow distinguish between

205
00:08:38,839 --> 00:08:42,880
different rotation numbers

206
00:08:42,880 --> 00:08:44,080
to do this

207
00:08:44,080 --> 00:08:45,920
we introduce a simple efficiently

208
00:08:45,920 --> 00:08:48,080
computable quantity which we call the

209
00:08:48,080 --> 00:08:49,839
covering number

210
00:08:49,839 --> 00:08:52,959
intuitively current number rfrk

211
00:08:52,959 --> 00:08:56,000
is the smallest number of samples needed

212
00:08:56,000 --> 00:08:58,800
for rotation by alpha to accumulate a

213
00:08:58,800 --> 00:09:00,720
full entropy from the uniform

214
00:09:00,720 --> 00:09:03,920
distribution over the first k bits

215
00:09:03,920 --> 00:09:06,959
equivalently it's like covering a black

216
00:09:06,959 --> 00:09:10,000
segment of length n using a shorter a

217
00:09:10,000 --> 00:09:13,440
shorter red segment of length k

218
00:09:13,440 --> 00:09:16,240
every time the red segment is cyclically

219
00:09:16,240 --> 00:09:18,959
rotated by a constant alpha

220
00:09:18,959 --> 00:09:21,519
the goal is to count how many times are

221
00:09:21,519 --> 00:09:24,240
needed for the reddit segment to cover

222
00:09:24,240 --> 00:09:27,040
the entire black segment

223
00:09:27,040 --> 00:09:29,760
in our work

224
00:09:29,760 --> 00:09:32,000
we show that the carbon number is the

225
00:09:32,000 --> 00:09:34,720
right measurement of samples to

226
00:09:34,720 --> 00:09:37,440
accumulate nearly full entropy from any

227
00:09:37,440 --> 00:09:39,519
two molecular distributions with entropy

228
00:09:39,519 --> 00:09:41,760
at least decay

229
00:09:41,760 --> 00:09:44,320
we just define this as this statement by

230
00:09:44,320 --> 00:09:46,240
both theoretical proofs and the

231
00:09:46,240 --> 00:09:48,160
empirical data

232
00:09:48,160 --> 00:09:49,600
to sum it up

233
00:09:49,600 --> 00:09:52,880
our second result suggests comparing

234
00:09:52,880 --> 00:09:55,600
rotation rotations according to the

235
00:09:55,600 --> 00:09:57,279
recovery numbers

236
00:09:57,279 --> 00:10:00,160
it effectively reduces a very difficult

237
00:10:00,160 --> 00:10:02,839
problem to a simple

238
00:10:02,839 --> 00:10:05,760
calculation as we have discussed earlier

239
00:10:05,760 --> 00:10:08,880
our rotates and xor procedure doesn't

240
00:10:08,880 --> 00:10:11,519
know the input source in advance

241
00:10:11,519 --> 00:10:13,680
our goal is to find the rotation number

242
00:10:13,680 --> 00:10:16,079
alpha such that the carbon number alpha

243
00:10:16,079 --> 00:10:20,160
k is relatively small for all possible k

244
00:10:20,160 --> 00:10:22,320
we can use this theory to review

245
00:10:22,320 --> 00:10:25,760
microsoft's choices on rotation numbers

246
00:10:25,760 --> 00:10:28,480
in the next two slides we will see the

247
00:10:28,480 --> 00:10:31,120
covering numbers of different rotations

248
00:10:31,120 --> 00:10:34,560
when the length of the register is 32 or

249
00:10:34,560 --> 00:10:37,920
64 64.

250
00:10:38,880 --> 00:10:40,720
in terms of 32

251
00:10:40,720 --> 00:10:43,760
bit cpu we have selected four different

252
00:10:43,760 --> 00:10:47,440
rotation numbers 5 7 9 and

253
00:10:47,440 --> 00:10:48,640
13.

254
00:10:48,640 --> 00:10:50,079
and the depicted they are covering

255
00:10:50,079 --> 00:10:52,079
numbers versus k the mean entropy of

256
00:10:52,079 --> 00:10:53,519
sources

257
00:10:53,519 --> 00:10:55,600
the red lines represent the current

258
00:10:55,600 --> 00:10:58,560
numbers of certain rotations while the

259
00:10:58,560 --> 00:11:01,360
black line and over k represents the

260
00:11:01,360 --> 00:11:03,760
optimal current numbers

261
00:11:03,760 --> 00:11:07,120
we can see that microsoft's choice phi

262
00:11:07,120 --> 00:11:09,440
is reasonable since it's very close to

263
00:11:09,440 --> 00:11:12,480
the optimal line but it's generally

264
00:11:12,480 --> 00:11:15,920
worse than 7.

265
00:11:16,240 --> 00:11:20,320
similarly in terms of 64-bit cpu we have

266
00:11:20,320 --> 00:11:22,480
also selected 4 different rotation

267
00:11:22,480 --> 00:11:27,279
numbers 15 19 23 and 27

268
00:11:27,279 --> 00:11:31,120
we can see microsoft choices the choice

269
00:11:31,120 --> 00:11:36,720
19 performs reasonably well for ok

270
00:11:38,079 --> 00:11:40,320
our analysis of the current number of

271
00:11:40,320 --> 00:11:43,600
rotations extends immediately to any

272
00:11:43,600 --> 00:11:46,399
cyclic permutation so can we find a

273
00:11:46,399 --> 00:11:49,680
better permutation to replace rotations

274
00:11:49,680 --> 00:11:53,279
the answer is affirmative

275
00:11:54,639 --> 00:11:56,720
we have constructed a permutation that

276
00:11:56,720 --> 00:12:00,240
we call bit reversed rotation torn

277
00:12:00,240 --> 00:12:03,360
where only the power of two

278
00:12:03,360 --> 00:12:07,360
for example um when n is eight we can

279
00:12:07,360 --> 00:12:10,720
write out the second notation of tor 8

280
00:12:10,720 --> 00:12:12,720
in the following way

281
00:12:12,720 --> 00:12:13,760
first

282
00:12:13,760 --> 00:12:17,680
write down 0 to 7 in a cycle notation

283
00:12:17,680 --> 00:12:18,639
second

284
00:12:18,639 --> 00:12:20,800
converts each integer into a binary

285
00:12:20,800 --> 00:12:22,720
string of length 3.

286
00:12:22,720 --> 00:12:26,000
then reverse the order of these

287
00:12:26,000 --> 00:12:28,800
binary strings and converts them back to

288
00:12:28,800 --> 00:12:30,000
integers

289
00:12:30,000 --> 00:12:34,480
the resulting cycle is tor 8.

290
00:12:35,360 --> 00:12:36,639
b to reverse

291
00:12:36,639 --> 00:12:39,519
rotation has a very nice property

292
00:12:39,519 --> 00:12:42,399
if k is a power of 2 then the carbon

293
00:12:42,399 --> 00:12:43,519
number

294
00:12:43,519 --> 00:12:46,399
is n over k which is optimal

295
00:12:46,399 --> 00:12:49,519
so it has optimal cavity numbers for all

296
00:12:49,519 --> 00:12:54,279
k which is a power of 2 simultaneously

297
00:12:55,120 --> 00:12:58,000
in this slide we compare current numbers

298
00:12:58,000 --> 00:13:00,079
of beta reverse rotation against

299
00:13:00,079 --> 00:13:03,120
recovery numbers of rotations used by

300
00:13:03,120 --> 00:13:06,240
microsoft and the optimal value on lower

301
00:13:06,240 --> 00:13:07,279
k

302
00:13:07,279 --> 00:13:10,079
we see that bit reverse rotation seems

303
00:13:10,079 --> 00:13:13,040
to perform at least as well as rotation

304
00:13:13,040 --> 00:13:16,320
and better in several regions

305
00:13:16,320 --> 00:13:18,160
so we leave it to practitioners to

306
00:13:18,160 --> 00:13:20,639
determine why whether implementing our

307
00:13:20,639 --> 00:13:22,959
new permutation would be favored in the

308
00:13:22,959 --> 00:13:24,800
context of their random number

309
00:13:24,800 --> 00:13:26,079
generators

310
00:13:26,079 --> 00:13:28,639
our study suggests that it seems to be

311
00:13:28,639 --> 00:13:31,040
the most natural choice from a

312
00:13:31,040 --> 00:13:34,680
theoretical perspective

313
00:13:35,360 --> 00:13:38,399
now let's move on to the proof session

314
00:13:38,399 --> 00:13:41,040
in this part i will present our proof

315
00:13:41,040 --> 00:13:44,079
techniques our melanoma and the brief

316
00:13:44,079 --> 00:13:46,480
proof sketch to answer why rotation

317
00:13:46,480 --> 00:13:49,480
works

318
00:13:49,519 --> 00:13:52,720
suppose uh each sample is independently

319
00:13:52,720 --> 00:13:54,560
sampled from some two-month

320
00:13:54,560 --> 00:13:57,519
distributions of miniature pk

321
00:13:57,519 --> 00:14:00,560
after receiving unsafe samples we denote

322
00:14:00,560 --> 00:14:04,240
the distribution of the register as da

323
00:14:04,240 --> 00:14:07,360
here is rotation by alpha

324
00:14:07,360 --> 00:14:09,760
to see whether da has a linear entropy

325
00:14:09,760 --> 00:14:13,199
we need to compute the entropy of it

326
00:14:13,199 --> 00:14:15,600
however we can hardly compute the

327
00:14:15,600 --> 00:14:17,600
entropy from the probability mass

328
00:14:17,600 --> 00:14:20,480
function because the convolutional form

329
00:14:20,480 --> 00:14:22,880
is infeasible to compute

330
00:14:22,880 --> 00:14:25,440
the three a coefficients arise naturally

331
00:14:25,440 --> 00:14:28,160
in our setting because they interact

332
00:14:28,160 --> 00:14:30,720
nicely with both convolution and the

333
00:14:30,720 --> 00:14:32,480
linear transformations

334
00:14:32,480 --> 00:14:35,839
so our goal becomes computing the sum of

335
00:14:35,839 --> 00:14:39,279
of fourier coefficients of d a

336
00:14:39,279 --> 00:14:40,160
since

337
00:14:40,160 --> 00:14:42,560
entropy sources are independent

338
00:14:42,560 --> 00:14:45,440
each fourier coefficient of the compound

339
00:14:45,440 --> 00:14:48,880
distribution ea can be decomposed into a

340
00:14:48,880 --> 00:14:52,079
product of multiple fourier coefficients

341
00:14:52,079 --> 00:14:54,720
of two monologue distributions

342
00:14:54,720 --> 00:14:57,120
the fourier coefficient of a tremendous

343
00:14:57,120 --> 00:14:59,600
distribution has a very nice feature

344
00:14:59,600 --> 00:15:03,760
which is formalized by our melamer

345
00:15:04,880 --> 00:15:07,279
our lemma says that

346
00:15:07,279 --> 00:15:09,199
the absolute value of the fourier

347
00:15:09,199 --> 00:15:11,279
coefficient of any two moles hormonal

348
00:15:11,279 --> 00:15:14,160
distribution at some vector w

349
00:15:14,160 --> 00:15:15,519
is small

350
00:15:15,519 --> 00:15:19,360
if the i speed of w is 1 for some small

351
00:15:19,360 --> 00:15:21,040
index i

352
00:15:21,040 --> 00:15:23,920
for example if d is uniform over the

353
00:15:23,920 --> 00:15:25,440
first k bits

354
00:15:25,440 --> 00:15:28,399
as long as the first k bits of w contain

355
00:15:28,399 --> 00:15:30,880
one its fourier coefficient

356
00:15:30,880 --> 00:15:33,120
is zero

357
00:15:33,120 --> 00:15:36,000
this formulae captures the intuition

358
00:15:36,000 --> 00:15:37,920
that the lower order bits of two

359
00:15:37,920 --> 00:15:40,000
molecule distributions should have high

360
00:15:40,000 --> 00:15:42,480
entropy

361
00:15:42,880 --> 00:15:45,120
so we instantiate our mean number by

362
00:15:45,120 --> 00:15:47,440
taking i to be zero

363
00:15:47,440 --> 00:15:49,920
this means if the first bit of a vector

364
00:15:49,920 --> 00:15:53,040
is one then the absolute value of its

365
00:15:53,040 --> 00:15:54,399
fourier coefficient

366
00:15:54,399 --> 00:15:57,920
is upper bounded by a small constant

367
00:15:57,920 --> 00:16:00,480
for any vector w

368
00:16:00,480 --> 00:16:03,519
we consider the set of n vectors

369
00:16:03,519 --> 00:16:07,680
generated by w and the a transpose

370
00:16:07,680 --> 00:16:10,320
we only needed to count the number of

371
00:16:10,320 --> 00:16:13,519
these vectors whose first bit is one and

372
00:16:13,519 --> 00:16:15,279
then use the melamer to upper bound

373
00:16:15,279 --> 00:16:17,360
their fourier coefficients

374
00:16:17,360 --> 00:16:19,759
for remaining vectors we'll use one to

375
00:16:19,759 --> 00:16:22,320
upper bound there are three coefficients

376
00:16:22,320 --> 00:16:24,880
it turns out that if a is rotation by

377
00:16:24,880 --> 00:16:27,680
alpha and the rfi is co-prime to n

378
00:16:27,680 --> 00:16:29,920
then the number of vectors among this

379
00:16:29,920 --> 00:16:33,199
set this set whose first bit is one

380
00:16:33,199 --> 00:16:35,279
is equal to the hemi weight

381
00:16:35,279 --> 00:16:36,560
of w

382
00:16:36,560 --> 00:16:39,360
so we can take a summation over hemming

383
00:16:39,360 --> 00:16:41,759
weight and easily show the entropy of

384
00:16:41,759 --> 00:16:45,360
the a is linear

385
00:16:46,959 --> 00:16:49,759
as a summary of our proof technique

386
00:16:49,759 --> 00:16:53,199
if the first bit of w or the red dot in

387
00:16:53,199 --> 00:16:55,199
the illustration is 1

388
00:16:55,199 --> 00:16:57,680
then the absolute value of its fluid

389
00:16:57,680 --> 00:17:00,720
coefficient is upper bounded by 2 to

390
00:17:00,720 --> 00:17:02,800
minus k plus 1

391
00:17:02,800 --> 00:17:05,599
then repeatedly apply a transpose to w

392
00:17:05,599 --> 00:17:08,799
and check if the red dot is one

393
00:17:08,799 --> 00:17:11,679
after n steps the register accumulates

394
00:17:11,679 --> 00:17:13,599
linear entropy

395
00:17:13,599 --> 00:17:14,880
in this case

396
00:17:14,880 --> 00:17:17,679
we use too many ones to upper bound of

397
00:17:17,679 --> 00:17:20,000
three coefficients can we reduce the

398
00:17:20,000 --> 00:17:22,079
number of steps while still having

399
00:17:22,079 --> 00:17:23,520
strong condensing

400
00:17:23,520 --> 00:17:26,879
the answer is affirmative

401
00:17:27,119 --> 00:17:30,400
if the first k over two bits of w

402
00:17:30,400 --> 00:17:33,280
or the red segment in the illustration

403
00:17:33,280 --> 00:17:34,880
contain 1

404
00:17:34,880 --> 00:17:37,919
then we instantiate our melamer and see

405
00:17:37,919 --> 00:17:40,240
the absolute value of its free

406
00:17:40,240 --> 00:17:42,880
coefficient is upper bounded by 2 to

407
00:17:42,880 --> 00:17:44,960
minus k over 2.

408
00:17:44,960 --> 00:17:48,240
then repeatedly apply a transpose to w

409
00:17:48,240 --> 00:17:51,280
and check if the red segment contains

410
00:17:51,280 --> 00:17:52,240
one

411
00:17:52,240 --> 00:17:53,600
if so

412
00:17:53,600 --> 00:17:55,520
the absolute value of its fourier

413
00:17:55,520 --> 00:17:58,799
coefficient is upper bounded by 2 2

414
00:17:58,799 --> 00:18:00,960
minus k over 2.

415
00:18:00,960 --> 00:18:03,679
otherwise upper bounded by 1.

416
00:18:03,679 --> 00:18:06,160
in this case we only need

417
00:18:06,160 --> 00:18:09,039
calorie number alpha k over 2 steps for

418
00:18:09,039 --> 00:18:11,520
strong condensing ground to ma to front

419
00:18:11,520 --> 00:18:14,640
2 monotone distributions

420
00:18:14,640 --> 00:18:17,679
unfortunately in our proof we lose a

421
00:18:17,679 --> 00:18:20,400
factor of 2 in k

422
00:18:20,400 --> 00:18:23,840
in fact we also show that roughly

423
00:18:23,840 --> 00:18:27,200
covering number alpha k steps is already

424
00:18:27,200 --> 00:18:29,679
enough for very strong condensing by

425
00:18:29,679 --> 00:18:31,840
empirical data in the paper

426
00:18:31,840 --> 00:18:34,480
so we believe the factor of two laws is

427
00:18:34,480 --> 00:18:38,160
an artifact of the proof

428
00:18:39,440 --> 00:18:41,600
if you reach the end of this talk i just

429
00:18:41,600 --> 00:18:43,600
want to quickly recap what we have seen

430
00:18:43,600 --> 00:18:44,559
so far

431
00:18:44,559 --> 00:18:47,039
we just defined the use of rotation in

432
00:18:47,039 --> 00:18:49,120
windows times random number generator

433
00:18:49,120 --> 00:18:51,679
and a proved that rotations satisfying

434
00:18:51,679 --> 00:18:54,000
some number theoretical condition can

435
00:18:54,000 --> 00:18:56,160
accumulate a linear entropy within a few

436
00:18:56,160 --> 00:18:58,559
steps

437
00:18:58,559 --> 00:19:01,039
in addition we justified microsoft's

438
00:19:01,039 --> 00:19:03,039
choice of

439
00:19:03,039 --> 00:19:06,880
rotation numbers 5 and 19 and introduced

440
00:19:06,880 --> 00:19:09,440
the theory of calorie number

441
00:19:09,440 --> 00:19:12,720
finally we suggested replacing rotations

442
00:19:12,720 --> 00:19:15,280
by bit reverse notation in the real

443
00:19:15,280 --> 00:19:17,520
world random number generators and give

444
00:19:17,520 --> 00:19:20,400
some empirical data

445
00:19:20,400 --> 00:19:22,559
this one closes my talk thanks for

446
00:19:22,559 --> 00:19:25,840
listening and bye bye

