1
00:00:00,799 --> 00:00:02,800
hello i'm chief and leo from princeton

2
00:00:02,800 --> 00:00:04,720
university i'll be talking about the

3
00:00:04,720 --> 00:00:06,799
work hidden code sets and applications

4
00:00:06,799 --> 00:00:09,599
to enclose cryptography this is a joint

5
00:00:09,599 --> 00:00:11,599
work with andrea clare d'angelo from

6
00:00:11,599 --> 00:00:13,679
simon's institute and cuberate

7
00:00:13,679 --> 00:00:15,519
jacqueline from ut austin and mark

8
00:00:15,519 --> 00:00:17,440
gendry from entity research at princeton

9
00:00:17,440 --> 00:00:19,119
university

10
00:00:19,119 --> 00:00:20,800
the talk is about unclonable

11
00:00:20,800 --> 00:00:22,960
cryptography which will leverage the

12
00:00:22,960 --> 00:00:25,199
quantum node cloning principle the

13
00:00:25,199 --> 00:00:27,760
noclean principle of quantum mechanics

14
00:00:27,760 --> 00:00:30,320
says that a general quantum information

15
00:00:30,320 --> 00:00:31,920
cannot be copied

16
00:00:31,920 --> 00:00:33,760
there is some quantum algorithm that

17
00:00:33,760 --> 00:00:37,040
takes unknown state and it wants to copy

18
00:00:37,040 --> 00:00:40,000
the state into two identical copies

19
00:00:40,000 --> 00:00:42,239
classically it is easy since any

20
00:00:42,239 --> 00:00:44,480
classical computer can simply read each

21
00:00:44,480 --> 00:00:46,879
spate of a classical message and then

22
00:00:46,879 --> 00:00:49,039
write the bit twice

23
00:00:49,039 --> 00:00:51,680
but it turns out that in a quantum world

24
00:00:51,680 --> 00:00:54,000
if you do not know the quantum state you

25
00:00:54,000 --> 00:00:56,480
cannot copy a general quantum state into

26
00:00:56,480 --> 00:00:58,399
two copies

27
00:00:58,399 --> 00:01:00,640
the no cloning principle opens the door

28
00:01:00,640 --> 00:01:02,399
to demanding classical impossible

29
00:01:02,399 --> 00:01:04,000
primitives

30
00:01:04,000 --> 00:01:05,760
this example include quantum key

31
00:01:05,760 --> 00:01:08,479
distribution by bernat and brazard

32
00:01:08,479 --> 00:01:11,680
quantum money which was first started by

33
00:01:11,680 --> 00:01:14,400
wizner quantum copy protection first by

34
00:01:14,400 --> 00:01:15,520
everson

35
00:01:15,520 --> 00:01:17,759
signature token first by ben david and

36
00:01:17,759 --> 00:01:18,880
satosh

37
00:01:18,880 --> 00:01:21,759
unclondable encryption by gotzman bran

38
00:01:21,759 --> 00:01:23,520
broadband and lord

39
00:01:23,520 --> 00:01:25,600
and uncle noble decryption by george and

40
00:01:25,600 --> 00:01:26,960
xandri

41
00:01:26,960 --> 00:01:29,680
these applications rely on some forms of

42
00:01:29,680 --> 00:01:32,159
non-cloning theorems of particular

43
00:01:32,159 --> 00:01:33,600
quantum states

44
00:01:33,600 --> 00:01:35,439
in fact although a general are no

45
00:01:35,439 --> 00:01:38,560
quantum states cannot be copied

46
00:01:38,560 --> 00:01:41,280
to establish a probable statement for

47
00:01:41,280 --> 00:01:43,439
certain cryptographic scheme

48
00:01:43,439 --> 00:01:45,680
we rely on particular quantum states

49
00:01:45,680 --> 00:01:49,600
instead of general unknown states

50
00:01:49,600 --> 00:01:51,759
and most of the applications are based

51
00:01:51,759 --> 00:01:54,799
on bb-84 states which is first used by

52
00:01:54,799 --> 00:01:57,040
wizner

53
00:01:57,040 --> 00:01:59,840
or subspace states first used by erisa

54
00:01:59,840 --> 00:02:02,880
and christiano

55
00:02:04,799 --> 00:02:07,119
in this work we propose a generalized

56
00:02:07,119 --> 00:02:10,080
notation of both bb-84 states and

57
00:02:10,080 --> 00:02:13,120
subspace states which record coset

58
00:02:13,120 --> 00:02:14,319
states

59
00:02:14,319 --> 00:02:16,400
this notation has also been studied

60
00:02:16,400 --> 00:02:18,800
independently in a work by vidiq and

61
00:02:18,800 --> 00:02:21,520
john in the context of proofs of quantum

62
00:02:21,520 --> 00:02:24,800
knowledge from quantum money schemes

63
00:02:24,800 --> 00:02:27,360
we show in this work that coset states

64
00:02:27,360 --> 00:02:29,520
possess many important properties of

65
00:02:29,520 --> 00:02:32,480
bp-84 state and subspace states

66
00:02:32,480 --> 00:02:34,400
we further show that because coset

67
00:02:34,400 --> 00:02:37,120
states have more algebraic structures

68
00:02:37,120 --> 00:02:40,160
they improve many of these applications

69
00:02:40,160 --> 00:02:41,840
we look at these applications from

70
00:02:41,840 --> 00:02:43,440
subspace states

71
00:02:43,440 --> 00:02:44,959
you do not need to worry about the

72
00:02:44,959 --> 00:02:47,599
definition of subspace states or

73
00:02:47,599 --> 00:02:49,599
signature tokens or unclonable

74
00:02:49,599 --> 00:02:50,800
decryption

75
00:02:50,800 --> 00:02:54,160
we will come back to them shortly after

76
00:02:54,160 --> 00:02:56,080
previous results show that signature

77
00:02:56,080 --> 00:02:59,120
tokens and unclaimable decryption exist

78
00:02:59,120 --> 00:03:01,760
relative to classical oracles in other

79
00:03:01,760 --> 00:03:04,000
words they need to assume post quantum

80
00:03:04,000 --> 00:03:06,239
secure virtual black box specification

81
00:03:06,239 --> 00:03:09,120
for classical circuits here we use vbb

82
00:03:09,120 --> 00:03:12,480
for virtual black box obfuscation

83
00:03:12,480 --> 00:03:14,480
in this work we show the generalized

84
00:03:14,480 --> 00:03:16,800
notation coset states also gave these

85
00:03:16,800 --> 00:03:19,200
applications but in the play model by

86
00:03:19,200 --> 00:03:20,400
assuming post quantum

87
00:03:20,400 --> 00:03:22,640
indistinguishability officiation and

88
00:03:22,640 --> 00:03:24,640
one-way function

89
00:03:24,640 --> 00:03:26,959
for our final result we show how to copy

90
00:03:26,959 --> 00:03:29,680
protect prfs this is the first example

91
00:03:29,680 --> 00:03:31,519
of copy protecting non-invasive

92
00:03:31,519 --> 00:03:33,440
functions

93
00:03:33,440 --> 00:03:35,680
for unclonable decryption and copy

94
00:03:35,680 --> 00:03:37,920
protection of prfs we need to

95
00:03:37,920 --> 00:03:40,480
additionally conjecture the coset states

96
00:03:40,480 --> 00:03:43,360
have a stronger property the property is

97
00:03:43,360 --> 00:03:45,519
later proved by cough and vedic in a

98
00:03:45,519 --> 00:03:48,239
follow-up work

99
00:03:48,799 --> 00:03:51,120
before introducing coset states we

100
00:03:51,120 --> 00:03:53,360
explain the subspace states by errors

101
00:03:53,360 --> 00:03:54,879
and cristiano

102
00:03:54,879 --> 00:03:57,760
a subspace state for subspace a is a

103
00:03:57,760 --> 00:03:59,920
quantum state that satisfy the following

104
00:03:59,920 --> 00:04:01,680
properties

105
00:04:01,680 --> 00:04:03,920
if you measure the state directly or in

106
00:04:03,920 --> 00:04:06,159
the computational basis you will get a

107
00:04:06,159 --> 00:04:08,720
uniformly random vector in the subspace

108
00:04:08,720 --> 00:04:09,920
a

109
00:04:09,920 --> 00:04:11,599
if you apply hardmart which is the

110
00:04:11,599 --> 00:04:14,720
quantum operator on the state and then

111
00:04:14,720 --> 00:04:17,279
measure you will get a uniformly random

112
00:04:17,279 --> 00:04:19,759
vector in the dual space a perp

113
00:04:19,759 --> 00:04:21,918
here both a and a probe has dimension

114
00:04:21,918 --> 00:04:25,198
roughly lambda over 2.

115
00:04:25,360 --> 00:04:27,040
if you are familiar with quantum then

116
00:04:27,040 --> 00:04:30,080
the subspace state for the subspace a is

117
00:04:30,080 --> 00:04:32,400
the equal superposition of all vectors

118
00:04:32,400 --> 00:04:34,719
in a

119
00:04:35,040 --> 00:04:37,600
and for convenience we refer these two

120
00:04:37,600 --> 00:04:39,440
programs to the membership checking

121
00:04:39,440 --> 00:04:42,880
programs for space a and a perk in other

122
00:04:42,880 --> 00:04:43,680
words

123
00:04:43,680 --> 00:04:46,479
pa takes a vector and output 1 if and

124
00:04:46,479 --> 00:04:49,199
only if the input is a vector in a

125
00:04:49,199 --> 00:04:52,720
and similarly for p a perp

126
00:04:52,720 --> 00:04:54,639
subspace states satisfy the following

127
00:04:54,639 --> 00:04:57,199
dirac product harness property

128
00:04:57,199 --> 00:04:59,040
it says that for any query bounded

129
00:04:59,040 --> 00:05:01,840
quantum algorithm given a single copy of

130
00:05:01,840 --> 00:05:03,759
a subspace state for a

131
00:05:03,759 --> 00:05:06,400
even if it gets oracle access to both

132
00:05:06,400 --> 00:05:08,880
membership checking oracles it cannot

133
00:05:08,880 --> 00:05:12,639
find two nonzero vectors in a and a perp

134
00:05:12,639 --> 00:05:14,639
here direct product stands for finding

135
00:05:14,639 --> 00:05:17,280
vectors in the direct product space of a

136
00:05:17,280 --> 00:05:19,758
and a per

137
00:05:20,240 --> 00:05:22,400
we first note that it is always easy to

138
00:05:22,400 --> 00:05:25,360
obtain either a vector in a or a perp by

139
00:05:25,360 --> 00:05:27,919
just measuring the state in either the

140
00:05:27,919 --> 00:05:30,720
standard basis or the hardware basis for

141
00:05:30,720 --> 00:05:32,320
which you apply hard mark and then

142
00:05:32,320 --> 00:05:33,919
measure

143
00:05:33,919 --> 00:05:36,160
however measuring one basis will

144
00:05:36,160 --> 00:05:38,080
completely collapse the state into a

145
00:05:38,080 --> 00:05:39,840
single vector

146
00:05:39,840 --> 00:05:41,759
thus it will completely force the state

147
00:05:41,759 --> 00:05:43,680
to lose all the informations about the

148
00:05:43,680 --> 00:05:46,000
other space

149
00:05:46,000 --> 00:05:48,000
also note that if the quantum algorithm

150
00:05:48,000 --> 00:05:50,560
can make unbounded queries it can always

151
00:05:50,560 --> 00:05:53,360
land in subspace a by making exponential

152
00:05:53,360 --> 00:05:55,600
remaining queries to

153
00:05:55,600 --> 00:05:57,280
these oracles

154
00:05:57,280 --> 00:05:59,039
and therefore finding these two vectors

155
00:05:59,039 --> 00:06:01,360
becomes easy if we do not put the query

156
00:06:01,360 --> 00:06:03,440
constraint

157
00:06:03,440 --> 00:06:05,440
the direct product harness naturally

158
00:06:05,440 --> 00:06:08,560
gives a construction of signature tokens

159
00:06:08,560 --> 00:06:10,800
a signature token scheme is similar to a

160
00:06:10,800 --> 00:06:13,520
signature scheme except a user is giving

161
00:06:13,520 --> 00:06:15,680
a quantum signing token instead of a

162
00:06:15,680 --> 00:06:17,840
classical sending key

163
00:06:17,840 --> 00:06:20,080
moreover the token should be a one-time

164
00:06:20,080 --> 00:06:23,360
token in other words a person who has a

165
00:06:23,360 --> 00:06:25,759
signing key can generate a signing token

166
00:06:25,759 --> 00:06:28,080
and delegate the signing task to someone

167
00:06:28,080 --> 00:06:28,880
else

168
00:06:28,880 --> 00:06:30,800
this signing token can be used to sign

169
00:06:30,800 --> 00:06:35,440
an arbitrary message but only once

170
00:06:35,440 --> 00:06:37,759
more formally the security guarantees

171
00:06:37,759 --> 00:06:39,919
that no efficient quantum algorithm

172
00:06:39,919 --> 00:06:42,240
giving the signing token and a classical

173
00:06:42,240 --> 00:06:44,880
public verification key can produce

174
00:06:44,880 --> 00:06:47,600
valid signatures for both messages zero

175
00:06:47,600 --> 00:06:48,639
and one

176
00:06:48,639 --> 00:06:50,720
here for convenience we only consider

177
00:06:50,720 --> 00:06:53,199
one bit messages

178
00:06:53,199 --> 00:06:54,960
ben david and the status show that

179
00:06:54,960 --> 00:06:57,440
subspace states give applications to

180
00:06:57,440 --> 00:06:59,280
signature token

181
00:06:59,280 --> 00:07:03,440
so basically we can think of this uh

182
00:07:03,440 --> 00:07:06,319
signatures for message zero is a nonzero

183
00:07:06,319 --> 00:07:07,440
vector

184
00:07:07,440 --> 00:07:09,680
for uh subspace a

185
00:07:09,680 --> 00:07:11,919
and valid signatures for one is a

186
00:07:11,919 --> 00:07:15,440
non-zero vector for subspace aperture

187
00:07:15,440 --> 00:07:16,400
and therefore

188
00:07:16,400 --> 00:07:19,199
a signing token is a subspace state for

189
00:07:19,199 --> 00:07:21,039
a

190
00:07:21,039 --> 00:07:23,759
and finally the verification key

191
00:07:23,759 --> 00:07:26,240
is simply the verification oracle or the

192
00:07:26,240 --> 00:07:28,639
membership checking oracle for

193
00:07:28,639 --> 00:07:31,840
both subspace a and apert

194
00:07:31,840 --> 00:07:33,919
however the drawback is that the

195
00:07:33,919 --> 00:07:36,479
construction is only probably secure

196
00:07:36,479 --> 00:07:38,800
relative to classical oracles

197
00:07:38,800 --> 00:07:40,960
especially when we're instantiating the

198
00:07:40,960 --> 00:07:43,199
scheme the verification key should be

199
00:07:43,199 --> 00:07:46,400
vvb obfuscation

200
00:07:46,720 --> 00:07:48,879
as we see in the previous discussion the

201
00:07:48,879 --> 00:07:51,520
verification key is vvb obfuscation or

202
00:07:51,520 --> 00:07:52,639
oracles

203
00:07:52,639 --> 00:07:54,400
to achieve the construction in the play

204
00:07:54,400 --> 00:07:56,560
model one naturally attempt is to

205
00:07:56,560 --> 00:07:59,599
replace vbb authentication with io

206
00:07:59,599 --> 00:08:01,680
the similar idea were deployed to

207
00:08:01,680 --> 00:08:04,639
achieve quantum money in the play model

208
00:08:04,639 --> 00:08:07,680
in 2012 harrison and chris channel show

209
00:08:07,680 --> 00:08:09,599
quantum money with respect to classical

210
00:08:09,599 --> 00:08:11,919
oracles while they rely on weaker

211
00:08:11,919 --> 00:08:14,800
property than direct product harness

212
00:08:14,800 --> 00:08:17,759
later in 2019 landry showed the same

213
00:08:17,759 --> 00:08:19,840
construction works in plain model by

214
00:08:19,840 --> 00:08:22,639
instantiating the obfuscation with io

215
00:08:22,639 --> 00:08:24,879
the extra construction is more involved

216
00:08:24,879 --> 00:08:28,560
but this is roughly the idea

217
00:08:28,720 --> 00:08:30,800
one can try to apply the same idea on

218
00:08:30,800 --> 00:08:32,880
direct product harness property for

219
00:08:32,880 --> 00:08:34,320
subspace states

220
00:08:34,320 --> 00:08:36,479
in the same reduction one will run into

221
00:08:36,479 --> 00:08:38,159
a technical problem and thus the

222
00:08:38,159 --> 00:08:39,679
reduction fails

223
00:08:39,679 --> 00:08:41,679
basically if we follow the same

224
00:08:41,679 --> 00:08:43,760
reduction we find that the resulting

225
00:08:43,760 --> 00:08:45,680
task becomes very easy when

226
00:08:45,680 --> 00:08:48,320
instantiating vbb with io

227
00:08:48,320 --> 00:08:50,160
although it does not say anything about

228
00:08:50,160 --> 00:08:52,800
the original game it shows a technical

229
00:08:52,800 --> 00:08:56,000
barrier for replacing vvb with io for

230
00:08:56,000 --> 00:08:58,160
direct product harness

231
00:08:58,160 --> 00:08:59,920
since we do not have time to explain

232
00:08:59,920 --> 00:09:02,240
more on this we would refer to the full

233
00:09:02,240 --> 00:09:05,440
paper for more details

234
00:09:06,959 --> 00:09:09,760
now we formally introduce coset states a

235
00:09:09,760 --> 00:09:12,080
coset states for subspace a and two

236
00:09:12,080 --> 00:09:14,800
vectors s and s prime is a quantum state

237
00:09:14,800 --> 00:09:17,120
that satisfy the following property

238
00:09:17,120 --> 00:09:19,279
if you measure the state directly or in

239
00:09:19,279 --> 00:09:21,360
the computational basis you will get a

240
00:09:21,360 --> 00:09:23,760
uniformly random vector in the coset a

241
00:09:23,760 --> 00:09:26,720
plus s which is a set of vectors in a

242
00:09:26,720 --> 00:09:28,800
but shifted by s

243
00:09:28,800 --> 00:09:31,120
if you apply hogmart on the state and

244
00:09:31,120 --> 00:09:33,440
then measure you will get a uniformly

245
00:09:33,440 --> 00:09:36,080
random vector in the coset a perp plus s

246
00:09:36,080 --> 00:09:38,080
prime

247
00:09:38,080 --> 00:09:40,320
if you are familiar with quantum the

248
00:09:40,320 --> 00:09:42,800
coset states for the subspace a and two

249
00:09:42,800 --> 00:09:45,839
vectors s and s prime is the following

250
00:09:45,839 --> 00:09:48,000
in the computational basis it is the

251
00:09:48,000 --> 00:09:49,839
superposition of all vectors in the

252
00:09:49,839 --> 00:09:51,519
coset a plus s

253
00:09:51,519 --> 00:09:53,440
and the interface it encodes a

254
00:09:53,440 --> 00:09:55,519
superposition of all vectors in the

255
00:09:55,519 --> 00:09:58,959
coset a perp plus s prime

256
00:09:58,959 --> 00:10:00,880
for convenience we refer these two

257
00:10:00,880 --> 00:10:02,560
programs to the membership checking

258
00:10:02,560 --> 00:10:05,360
programs for cosas which is p a plus

259
00:10:05,360 --> 00:10:09,279
s and p a plus s prime

260
00:10:09,760 --> 00:10:12,000
coset states also satisfy the direct

261
00:10:12,000 --> 00:10:13,839
product harness property

262
00:10:13,839 --> 00:10:15,600
it says that for any query on the

263
00:10:15,600 --> 00:10:17,920
quantum algorithm giving a single copy

264
00:10:17,920 --> 00:10:20,720
of a coset state even if it gets oracle

265
00:10:20,720 --> 00:10:22,320
access to both membership checking

266
00:10:22,320 --> 00:10:24,560
oracles it cannot find two vectors in

267
00:10:24,560 --> 00:10:27,120
both code sets

268
00:10:27,120 --> 00:10:29,200
for subspace states we do not allow an

269
00:10:29,200 --> 00:10:31,920
algorithm to find zero vectors but we do

270
00:10:31,920 --> 00:10:33,839
not have such a requirement for cosine

271
00:10:33,839 --> 00:10:36,240
states because you can think of zero

272
00:10:36,240 --> 00:10:38,320
vectors are now replaced with secret

273
00:10:38,320 --> 00:10:40,160
vector s and s prime

274
00:10:40,160 --> 00:10:42,880
thus finding s or s prime is also hard

275
00:10:42,880 --> 00:10:45,360
in our case and direct product harness

276
00:10:45,360 --> 00:10:47,519
still holds if we do not put such a

277
00:10:47,519 --> 00:10:50,079
constraint

278
00:10:50,720 --> 00:10:52,800
so the direct product harness of coset

279
00:10:52,800 --> 00:10:54,800
states naturally gives the construction

280
00:10:54,800 --> 00:10:57,120
of signature tokens but still relative

281
00:10:57,120 --> 00:11:00,760
to classical oracles

282
00:11:00,880 --> 00:11:03,120
next we show that by replacing vvb

283
00:11:03,120 --> 00:11:06,240
obfuscation or classical oracles with io

284
00:11:06,240 --> 00:11:08,000
we can achieve the direct product

285
00:11:08,000 --> 00:11:10,160
harness in the play model it then

286
00:11:10,160 --> 00:11:11,760
naturally gives the construction of

287
00:11:11,760 --> 00:11:15,279
thinking tokens in the play model

288
00:11:15,279 --> 00:11:17,120
formally we want to prove the following

289
00:11:17,120 --> 00:11:18,399
security

290
00:11:18,399 --> 00:11:20,560
there is no efficient quantum algorithm

291
00:11:20,560 --> 00:11:23,600
that give a closer state and to io of

292
00:11:23,600 --> 00:11:26,240
membership checking programs

293
00:11:26,240 --> 00:11:30,480
can produce vectors in both cosets

294
00:11:30,959 --> 00:11:33,120
here we briefly explain how it works and

295
00:11:33,120 --> 00:11:35,279
why the same idea cannot be applied to

296
00:11:35,279 --> 00:11:36,800
subspace states

297
00:11:36,800 --> 00:11:39,120
in the original game we have a coset

298
00:11:39,120 --> 00:11:41,279
state and two obfuscated programs for

299
00:11:41,279 --> 00:11:44,079
membership checking

300
00:11:44,079 --> 00:11:46,160
in the next hybrid we replace the

301
00:11:46,160 --> 00:11:49,200
underlying subspace with b and c

302
00:11:49,200 --> 00:11:51,680
here b is the random superspace of a

303
00:11:51,680 --> 00:11:54,720
with dimensions 3 lambda over 4 and c is

304
00:11:54,720 --> 00:11:57,600
a random superspace of a perp which is

305
00:11:57,600 --> 00:12:00,800
also a dimension three lambda over four

306
00:12:00,800 --> 00:12:02,880
the indistinguishability between hybrid

307
00:12:02,880 --> 00:12:05,120
zero and hybrid one is similar to that

308
00:12:05,120 --> 00:12:07,680
in zendrius quantum unimproved as long

309
00:12:07,680 --> 00:12:10,880
as b and c are random this is so called

310
00:12:10,880 --> 00:12:14,480
subspace hiding obfuscation

311
00:12:15,120 --> 00:12:17,600
in the next hybrid we replace s in the

312
00:12:17,600 --> 00:12:19,839
program with s plus t for a random

313
00:12:19,839 --> 00:12:21,279
vector in b

314
00:12:21,279 --> 00:12:23,120
record that the program is checking

315
00:12:23,120 --> 00:12:26,079
membership in the coset b plus s

316
00:12:26,079 --> 00:12:28,880
since t is a vector in b replacing s

317
00:12:28,880 --> 00:12:32,160
plus t does not change the functionality

318
00:12:32,160 --> 00:12:34,320
the resulting program is also checking

319
00:12:34,320 --> 00:12:37,600
the membership in this code set b plus s

320
00:12:37,600 --> 00:12:40,000
the indistinguishability comes from io

321
00:12:40,000 --> 00:12:41,519
security

322
00:12:41,519 --> 00:12:43,440
and the similar argument held for the

323
00:12:43,440 --> 00:12:46,000
other program

324
00:12:46,000 --> 00:12:48,240
we're going to show in hybrid 2 no

325
00:12:48,240 --> 00:12:50,480
quantum algorithm can recover vectors in

326
00:12:50,480 --> 00:12:53,519
both cosets

327
00:12:53,920 --> 00:12:56,320
instead of giving a quantum algorithm io

328
00:12:56,320 --> 00:12:58,800
programs we now give the programs in

329
00:12:58,800 --> 00:13:01,920
clear without using obfuscation in other

330
00:13:01,920 --> 00:13:04,639
words for the io program p

331
00:13:04,639 --> 00:13:06,560
b plus s plus t

332
00:13:06,560 --> 00:13:08,720
we gave the description of b and the

333
00:13:08,720 --> 00:13:11,440
description s plus t and for the other

334
00:13:11,440 --> 00:13:14,800
program p c plus s prime plus t prime we

335
00:13:14,800 --> 00:13:17,200
give the description of the subspace c

336
00:13:17,200 --> 00:13:20,880
and the shift s prime plus t prime

337
00:13:20,880 --> 00:13:22,800
we argue that since b is a random

338
00:13:22,800 --> 00:13:26,480
superspace of a it still hides most of a

339
00:13:26,480 --> 00:13:29,120
and similarly t behaves like a random

340
00:13:29,120 --> 00:13:32,079
mass and hides most of s

341
00:13:32,079 --> 00:13:34,240
following the same idea we show that all

342
00:13:34,240 --> 00:13:37,680
this additional information b c s plus t

343
00:13:37,680 --> 00:13:40,399
s prime plus t prime only give limited

344
00:13:40,399 --> 00:13:43,440
knowledge about a s and s prime

345
00:13:43,440 --> 00:13:45,600
by careful argument we show that this

346
00:13:45,600 --> 00:13:48,160
task is still hard

347
00:13:48,160 --> 00:13:49,920
note that the last statement is an

348
00:13:49,920 --> 00:13:52,240
information theoretical statement the

349
00:13:52,240 --> 00:13:54,320
only computational assumption comes from

350
00:13:54,320 --> 00:13:59,120
switching from hybrid 0 to hybrid 2.

351
00:14:00,720 --> 00:14:03,199
and we would like to argue that this uh

352
00:14:03,199 --> 00:14:05,199
approach does not work for subspace

353
00:14:05,199 --> 00:14:06,079
state

354
00:14:06,079 --> 00:14:08,000
for subswith state we will have the

355
00:14:08,000 --> 00:14:09,839
following game where the quantum

356
00:14:09,839 --> 00:14:13,120
algorithm is given the subspace state a

357
00:14:13,120 --> 00:14:15,760
and two description b and c which are

358
00:14:15,760 --> 00:14:18,399
super space of a and the superspace of a

359
00:14:18,399 --> 00:14:19,279
perp

360
00:14:19,279 --> 00:14:21,600
therefore given b and c it is easy to

361
00:14:21,600 --> 00:14:24,240
find vectors in a

362
00:14:24,240 --> 00:14:26,639
direct product with a perp because any

363
00:14:26,639 --> 00:14:29,760
vector in c perp is a vector in a and

364
00:14:29,760 --> 00:14:32,079
any vector in b curve is a vector in

365
00:14:32,079 --> 00:14:33,040
april

366
00:14:33,040 --> 00:14:35,680
therefore we can easily find vectors in

367
00:14:35,680 --> 00:14:38,959
a plus in a direct product with a perp

368
00:14:38,959 --> 00:14:41,199
therefore such an argument does not work

369
00:14:41,199 --> 00:14:45,639
for a subspace state

370
00:14:45,760 --> 00:14:48,240
now we conclude the first part of our

371
00:14:48,240 --> 00:14:49,760
paper

372
00:14:49,760 --> 00:14:52,079
first we show that coset states satisfy

373
00:14:52,079 --> 00:14:54,560
computational direct product hardness

374
00:14:54,560 --> 00:14:57,360
assuming i o and one-way function

375
00:14:57,360 --> 00:15:00,480
and secondly as a corollary there exists

376
00:15:00,480 --> 00:15:02,399
signature token schemes in the play

377
00:15:02,399 --> 00:15:04,800
model

378
00:15:04,959 --> 00:15:06,880
next we look at other properties of

379
00:15:06,880 --> 00:15:09,040
coset states the monogamy of

380
00:15:09,040 --> 00:15:11,360
entanglement properties

381
00:15:11,360 --> 00:15:13,519
we will show closer states satisfy both

382
00:15:13,519 --> 00:15:16,560
moe and stronger moe this property will

383
00:15:16,560 --> 00:15:18,720
be used for constructing unclaimable

384
00:15:18,720 --> 00:15:22,720
decryption and copy protection of prfs

385
00:15:22,720 --> 00:15:27,839
moa is first studied for bb-84 states

386
00:15:28,240 --> 00:15:30,320
the monogamy of entanglement game for

387
00:15:30,320 --> 00:15:32,880
closet states is as follows

388
00:15:32,880 --> 00:15:35,279
no cossack state is given to a quantum

389
00:15:35,279 --> 00:15:36,480
algorithm

390
00:15:36,480 --> 00:15:38,560
the algorithm is then generate a

391
00:15:38,560 --> 00:15:41,120
potentially entangled states row 1 and

392
00:15:41,120 --> 00:15:43,680
row 2 and sends them to two separate

393
00:15:43,680 --> 00:15:45,920
quantum algorithms which cannot

394
00:15:45,920 --> 00:15:49,600
communicate with each with each other

395
00:15:49,600 --> 00:15:52,079
then a description of the subspace a is

396
00:15:52,079 --> 00:15:54,399
sent to both algorithms

397
00:15:54,399 --> 00:15:57,600
but they cannot communicate

398
00:15:57,600 --> 00:15:59,680
finally they need to both come out with

399
00:15:59,680 --> 00:16:01,759
vectors in both code sets

400
00:16:01,759 --> 00:16:04,240
unlike direct product hardness because

401
00:16:04,240 --> 00:16:06,720
they know descriptions of a as long as

402
00:16:06,720 --> 00:16:09,279
they can compute one vector in each

403
00:16:09,279 --> 00:16:11,759
coset they can compute any vector in

404
00:16:11,759 --> 00:16:13,199
these cosets

405
00:16:13,199 --> 00:16:15,519
thus for simplicity we assume they

406
00:16:15,519 --> 00:16:18,079
output the first vector in each coset

407
00:16:18,079 --> 00:16:21,279
denoted by s and s prime

408
00:16:21,279 --> 00:16:23,519
we prove coset states have information

409
00:16:23,519 --> 00:16:24,800
theoretical

410
00:16:24,800 --> 00:16:28,000
moe property that is even unbounded

411
00:16:28,000 --> 00:16:30,480
quantum algorithms can not win the above

412
00:16:30,480 --> 00:16:31,360
gate

413
00:16:31,360 --> 00:16:33,519
the the above game with probability more

414
00:16:33,519 --> 00:16:36,880
than some exponentially small function

415
00:16:36,880 --> 00:16:38,959
note that if the description is given to

416
00:16:38,959 --> 00:16:41,440
the very first algorithm the game is

417
00:16:41,440 --> 00:16:42,320
easy

418
00:16:42,320 --> 00:16:44,560
having both a coset state and the

419
00:16:44,560 --> 00:16:46,240
underlying subspace

420
00:16:46,240 --> 00:16:49,440
extracting both s and s prime is trivial

421
00:16:49,440 --> 00:16:52,320
similarly if these two algorithms in the

422
00:16:52,320 --> 00:16:55,040
second stage can communicate the problem

423
00:16:55,040 --> 00:16:58,240
also becomes trivial

424
00:16:58,880 --> 00:17:01,199
we further show that if i o of

425
00:17:01,199 --> 00:17:03,199
membership checking programs are given

426
00:17:03,199 --> 00:17:05,679
to these algorithms the problem remains

427
00:17:05,679 --> 00:17:08,880
computationally hard

428
00:17:09,119 --> 00:17:11,280
we similarly define strong monogamy of

429
00:17:11,280 --> 00:17:12,640
entanglement gain

430
00:17:12,640 --> 00:17:14,880
now the algorithms in the second stage

431
00:17:14,880 --> 00:17:16,880
need to output s and s prime

432
00:17:16,880 --> 00:17:19,760
respectively instead of out both

433
00:17:19,760 --> 00:17:22,240
outputting s and s prime at the same

434
00:17:22,240 --> 00:17:23,119
time

435
00:17:23,119 --> 00:17:24,559
this is the property we use for

436
00:17:24,559 --> 00:17:28,639
constructing the other two applications

437
00:17:29,120 --> 00:17:31,520
calf and vedic later proved that cosas

438
00:17:31,520 --> 00:17:33,919
state satisfied this property therefore

439
00:17:33,919 --> 00:17:36,480
we can remove the conjecture in our work

440
00:17:36,480 --> 00:17:38,559
in the next slide i'm going to show the

441
00:17:38,559 --> 00:17:40,320
idea of constructing unclumbable

442
00:17:40,320 --> 00:17:42,559
decryption from strong monogamy of

443
00:17:42,559 --> 00:17:46,160
entanglement of coset states

444
00:17:46,160 --> 00:17:48,480
unclonable decryption scheme is almost

445
00:17:48,480 --> 00:17:51,280
the same as a public encryption scheme

446
00:17:51,280 --> 00:17:54,400
except the secret key is now a quantity

447
00:17:54,400 --> 00:17:55,919
it should satisfy the standard

448
00:17:55,919 --> 00:17:58,240
correctness and cpa security

449
00:17:58,240 --> 00:18:00,080
besides it should also satisfy

450
00:18:00,080 --> 00:18:02,880
unclonability of decryption key which

451
00:18:02,880 --> 00:18:05,280
roughly says the quantum key cannot be

452
00:18:05,280 --> 00:18:07,679
split into two copies and both of the

453
00:18:07,679 --> 00:18:09,919
forged key can be used to decrypt cipher

454
00:18:09,919 --> 00:18:11,280
text

455
00:18:11,280 --> 00:18:13,280
we will formally talk about the security

456
00:18:13,280 --> 00:18:15,360
in the next slide

457
00:18:15,360 --> 00:18:19,039
we first look at the construction

458
00:18:19,280 --> 00:18:22,000
in our scheme the public key is simply

459
00:18:22,000 --> 00:18:24,000
the membership checking programs for

460
00:18:24,000 --> 00:18:25,600
both coset

461
00:18:25,600 --> 00:18:27,280
and the quantum key is simply the

462
00:18:27,280 --> 00:18:30,160
closest state

463
00:18:30,640 --> 00:18:32,640
the encryption scheme

464
00:18:32,640 --> 00:18:34,320
the encryption procedure takes the

465
00:18:34,320 --> 00:18:36,880
public key pk and the message and it

466
00:18:36,880 --> 00:18:40,400
first flip a coin r and outputs the

467
00:18:40,400 --> 00:18:44,880
output the coin and obfuscated program

468
00:18:44,880 --> 00:18:47,280
if the coin r is zero

469
00:18:47,280 --> 00:18:49,919
um the program is the following it takes

470
00:18:49,919 --> 00:18:52,320
a vector and it outputs the encrypted

471
00:18:52,320 --> 00:18:55,440
message m if and only if the vector is

472
00:18:55,440 --> 00:18:58,480
in the code set a plus s

473
00:18:58,480 --> 00:19:01,039
and if the calling r equals to 1 then

474
00:19:01,039 --> 00:19:03,840
the program takes the input vector and

475
00:19:03,840 --> 00:19:06,080
outputs the encrypted message if and

476
00:19:06,080 --> 00:19:08,960
only if the vector is in the other coset

477
00:19:08,960 --> 00:19:11,840
a plus s prime

478
00:19:11,840 --> 00:19:13,840
note that although construct these two

479
00:19:13,840 --> 00:19:16,640
programs c0m and c1m needs to know the

480
00:19:16,640 --> 00:19:19,360
description of the secret a s and s

481
00:19:19,360 --> 00:19:20,320
prime

482
00:19:20,320 --> 00:19:22,640
constructing the obfuscation of these

483
00:19:22,640 --> 00:19:25,679
two programs is actually easy it only

484
00:19:25,679 --> 00:19:27,360
requires the membership checking

485
00:19:27,360 --> 00:19:29,919
programs which are exactly the public

486
00:19:29,919 --> 00:19:32,559
keys in our scheme

487
00:19:32,559 --> 00:19:34,960
and finally to decrypt if the random

488
00:19:34,960 --> 00:19:37,200
coin is zero you run the program

489
00:19:37,200 --> 00:19:39,919
coherently on the coset state

490
00:19:39,919 --> 00:19:41,360
since the closest state is a

491
00:19:41,360 --> 00:19:43,520
superposition of vector in the coset a

492
00:19:43,520 --> 00:19:44,640
plus s

493
00:19:44,640 --> 00:19:46,640
it will output m

494
00:19:46,640 --> 00:19:48,960
if the random coin is 1 you run the

495
00:19:48,960 --> 00:19:51,440
program coherently on the hardware basis

496
00:19:51,440 --> 00:19:52,480
of the state

497
00:19:52,480 --> 00:19:54,640
which is the superposition of vectors in

498
00:19:54,640 --> 00:19:57,520
the coset a prepared plus s prime

499
00:19:57,520 --> 00:20:00,000
therefore it satisfies both correctness

500
00:20:00,000 --> 00:20:02,799
and the cpa security would follow from

501
00:20:02,799 --> 00:20:04,480
the next slide which is the

502
00:20:04,480 --> 00:20:08,559
unclonability of decryption key

503
00:20:09,520 --> 00:20:12,320
the unclonability of decryption key game

504
00:20:12,320 --> 00:20:14,320
is as follows

505
00:20:14,320 --> 00:20:16,480
the classical public key and the quantum

506
00:20:16,480 --> 00:20:18,840
secret key is given to an

507
00:20:18,840 --> 00:20:22,000
algorithm the algorithm is generating a

508
00:20:22,000 --> 00:20:24,640
potential entangled states row 1 and row

509
00:20:24,640 --> 00:20:27,120
2 and sends them to two separate quantum

510
00:20:27,120 --> 00:20:29,679
algorithms which cannot communicate with

511
00:20:29,679 --> 00:20:32,400
each other you can think row 1 and row 2

512
00:20:32,400 --> 00:20:35,840
are two different keys

513
00:20:36,480 --> 00:20:38,240
then two cipher texts of unknown

514
00:20:38,240 --> 00:20:41,520
messages are given to both algorithms

515
00:20:41,520 --> 00:20:43,280
note that they are encrypted under

516
00:20:43,280 --> 00:20:46,320
independent randomness here they are r0

517
00:20:46,320 --> 00:20:48,640
and r1

518
00:20:48,640 --> 00:20:50,960
and finally they need to both come out

519
00:20:50,960 --> 00:20:54,320
with the correct message m

520
00:20:54,960 --> 00:20:56,720
in our case the public key and the

521
00:20:56,720 --> 00:20:58,480
quantum secret key is now membership

522
00:20:58,480 --> 00:21:00,559
checking programs for both code sets and

523
00:21:00,559 --> 00:21:02,880
a coset state

524
00:21:02,880 --> 00:21:04,720
for the next ciphertext we assume they

525
00:21:04,720 --> 00:21:07,520
are generated using different coins

526
00:21:07,520 --> 00:21:09,760
then the left ciphertext is the io of

527
00:21:09,760 --> 00:21:11,280
c0m

528
00:21:11,280 --> 00:21:15,679
and the right ciphertext is an io of c1n

529
00:21:15,679 --> 00:21:17,760
if there exists algorithm that can

530
00:21:17,760 --> 00:21:19,679
successfully produce m

531
00:21:19,679 --> 00:21:21,520
we want to argue that the left side

532
00:21:21,520 --> 00:21:23,360
algorithm should learn s and the right

533
00:21:23,360 --> 00:21:25,840
side algorithm should learn s prime

534
00:21:25,840 --> 00:21:28,320
which violate the strong monogamy of

535
00:21:28,320 --> 00:21:31,600
entanglement property

536
00:21:31,600 --> 00:21:34,159
to argue this we show that the ciphertex

537
00:21:34,159 --> 00:21:36,240
the ciphertext programs are actually

538
00:21:36,240 --> 00:21:38,799
compute and compare programs

539
00:21:38,799 --> 00:21:40,880
for a computer and compare program it

540
00:21:40,880 --> 00:21:43,600
has three components a function a log

541
00:21:43,600 --> 00:21:44,880
and a secret

542
00:21:44,880 --> 00:21:47,039
a computer and compare program takes a

543
00:21:47,039 --> 00:21:49,360
input and computes that function on the

544
00:21:49,360 --> 00:21:50,320
input

545
00:21:50,320 --> 00:21:53,200
if the output equals to that lock then

546
00:21:53,200 --> 00:21:55,760
it outputs the secret otherwise it

547
00:21:55,760 --> 00:21:58,720
learns nothing

548
00:21:58,720 --> 00:22:00,159
in our case

549
00:22:00,159 --> 00:22:02,080
the log is

550
00:22:02,080 --> 00:22:05,520
s and s prime and the secrets are m

551
00:22:05,520 --> 00:22:08,080
you can see on both of the of the

552
00:22:08,080 --> 00:22:09,919
circuits

553
00:22:09,919 --> 00:22:12,159
by the security of compute and compare

554
00:22:12,159 --> 00:22:14,960
obfuscation if one can learn the secret

555
00:22:14,960 --> 00:22:17,520
with non-trivial probability

556
00:22:17,520 --> 00:22:20,159
there exists a way to extract the log

557
00:22:20,159 --> 00:22:23,440
which is s and s s prime in our case

558
00:22:23,440 --> 00:22:26,000
therefore by a delicate argument we

559
00:22:26,000 --> 00:22:28,240
showed that if both algorithms can

560
00:22:28,240 --> 00:22:30,640
output m with some non-trivial or

561
00:22:30,640 --> 00:22:33,360
non-negligible advantage there exists

562
00:22:33,360 --> 00:22:35,600
algorithm that breaks strong monogamy of

563
00:22:35,600 --> 00:22:37,280
entanglement gate

564
00:22:37,280 --> 00:22:39,520
and this is a contradiction therefore

565
00:22:39,520 --> 00:22:41,919
our scheme has unclonability of

566
00:22:41,919 --> 00:22:44,799
decryption key

567
00:22:44,799 --> 00:22:46,799
now we conclude the second part of the

568
00:22:46,799 --> 00:22:48,640
of the work

569
00:22:48,640 --> 00:22:50,880
first we show that coset states satisfy

570
00:22:50,880 --> 00:22:52,960
computational moe and strong

571
00:22:52,960 --> 00:22:55,360
computational moe assuming i o and one

572
00:22:55,360 --> 00:22:57,760
way function

573
00:22:57,760 --> 00:22:59,200
then we show that there exists

574
00:22:59,200 --> 00:23:02,559
unclonable decryption in the plain model

575
00:23:02,559 --> 00:23:04,640
and finally we show there exist copy

576
00:23:04,640 --> 00:23:09,120
protection pifs in the play model

577
00:23:09,120 --> 00:23:11,440
the construction is based on cloneable

578
00:23:11,440 --> 00:23:13,840
decryption using an io trick called

579
00:23:13,840 --> 00:23:16,959
hidden trigger technique

580
00:23:17,200 --> 00:23:19,840
finally we conclude the work

581
00:23:19,840 --> 00:23:22,720
we first propose coset states

582
00:23:22,720 --> 00:23:24,720
and we show that coset states have

583
00:23:24,720 --> 00:23:27,919
computational direct product hardness

584
00:23:27,919 --> 00:23:30,480
and as application we show signature

585
00:23:30,480 --> 00:23:33,520
token exists in the plain model

586
00:23:33,520 --> 00:23:35,200
we next show cossack states have

587
00:23:35,200 --> 00:23:37,919
monogamy of entanglement property

588
00:23:37,919 --> 00:23:40,400
although we did not prove the

589
00:23:40,400 --> 00:23:42,559
monogamy of entanglement property would

590
00:23:42,559 --> 00:23:44,880
naturally give applications like quantum

591
00:23:44,880 --> 00:23:47,360
key distribution and secret key quantum

592
00:23:47,360 --> 00:23:49,120
money

593
00:23:49,120 --> 00:23:51,039
and finally we conjecture cause that

594
00:23:51,039 --> 00:23:53,360
states have strong monogamy property

595
00:23:53,360 --> 00:23:56,880
which has been later approved

596
00:23:56,880 --> 00:23:59,440
and as application we show that it gives

597
00:23:59,440 --> 00:24:01,919
unclaimable decryption in the play model

598
00:24:01,919 --> 00:24:04,559
and copy protection pifs in the play

599
00:24:04,559 --> 00:24:06,880
model

600
00:24:06,880 --> 00:24:09,360
note that although we achieve different

601
00:24:09,360 --> 00:24:11,679
primitives in the play model they

602
00:24:11,679 --> 00:24:13,679
require completely different structures

603
00:24:13,679 --> 00:24:16,159
of corset states therefore we think they

604
00:24:16,159 --> 00:24:18,080
are conceptually very different work and

605
00:24:18,080 --> 00:24:20,559
ideas

606
00:24:22,320 --> 00:24:24,480
that's the end of my talk thanks for

607
00:24:24,480 --> 00:24:27,480
listening

