1
00:00:03,360 --> 00:00:06,319
hello everyone my name is yifan sung

2
00:00:06,319 --> 00:00:08,400
today i'm happy to give a talk about our

3
00:00:08,400 --> 00:00:10,719
results unconditional communication

4
00:00:10,719 --> 00:00:14,000
efficient npc via horsemaid syria

5
00:00:14,000 --> 00:00:16,239
courthouse with vapor koya and antibony

6
00:00:16,239 --> 00:00:19,240
polychroniado

7
00:00:19,680 --> 00:00:21,760
multiparty computation allows several

8
00:00:21,760 --> 00:00:24,160
mutually distrusted parties to evaluate

9
00:00:24,160 --> 00:00:26,560
a function on their private inputs

10
00:00:26,560 --> 00:00:28,560
it guarantees that the practical

11
00:00:28,560 --> 00:00:30,960
execution does not leak anything about

12
00:00:30,960 --> 00:00:33,280
the individual inputs beyond what can be

13
00:00:33,280 --> 00:00:36,000
inferred from the function output

14
00:00:36,000 --> 00:00:38,480
usually the functionality is represented

15
00:00:38,480 --> 00:00:39,840
as a circuit

16
00:00:39,840 --> 00:00:42,320
and in particular here we choose to use

17
00:00:42,320 --> 00:00:44,320
an arithmetic circuit over a finance

18
00:00:44,320 --> 00:00:45,440
field

19
00:00:45,440 --> 00:00:47,520
the circuit supports addition and

20
00:00:47,520 --> 00:00:50,719
multiplication operations

21
00:00:50,800 --> 00:00:53,199
in this work we focus on the information

22
00:00:53,199 --> 00:00:56,079
series setting with honest majority

23
00:00:56,079 --> 00:00:58,399
and assume a p2p channel between every

24
00:00:58,399 --> 00:01:00,559
pair of parties

25
00:01:00,559 --> 00:01:02,719
we are interested in both the semi-honey

26
00:01:02,719 --> 00:01:05,438
security and the militia security visa

27
00:01:05,438 --> 00:01:06,640
board

28
00:01:06,640 --> 00:01:09,200
in the following we use n for the number

29
00:01:09,200 --> 00:01:11,600
of parties and t for the number of

30
00:01:11,600 --> 00:01:14,559
corrupted parties

31
00:01:15,040 --> 00:01:16,960
before we move on i would like to

32
00:01:16,960 --> 00:01:18,799
motivate my talk by answering the

33
00:01:18,799 --> 00:01:21,439
following two questions

34
00:01:21,439 --> 00:01:23,200
first why do we care about the

35
00:01:23,200 --> 00:01:24,840
unconditional

36
00:01:24,840 --> 00:01:27,759
npc a key feature of the unconditional

37
00:01:27,759 --> 00:01:30,880
npc is that we do not need any extensive

38
00:01:30,880 --> 00:01:33,840
cryptographic primitive such as public

39
00:01:33,840 --> 00:01:36,240
encryption or obvious transfer

40
00:01:36,240 --> 00:01:37,680
and the protocol is secure

41
00:01:37,680 --> 00:01:39,280
unconditionally

42
00:01:39,280 --> 00:01:40,880
comparing with protocols in the

43
00:01:40,880 --> 00:01:42,560
computational setting

44
00:01:42,560 --> 00:01:45,040
one major benefit is that the protocols

45
00:01:45,040 --> 00:01:47,600
usually do not require complicated and

46
00:01:47,600 --> 00:01:50,000
time-consuming local computations

47
00:01:50,000 --> 00:01:52,560
as a result the most efficient npc

48
00:01:52,560 --> 00:01:55,119
protocols are in the unconditional npc

49
00:01:55,119 --> 00:01:57,600
paradigm

50
00:01:58,079 --> 00:02:00,079
second why do we focus on the

51
00:02:00,079 --> 00:02:02,640
communication complexity

52
00:02:02,640 --> 00:02:04,159
since the local computations are

53
00:02:04,159 --> 00:02:06,960
typically simple often just the series

54
00:02:06,960 --> 00:02:08,720
of linear operations

55
00:02:08,720 --> 00:02:10,800
the efficiency of a protocol in the real

56
00:02:10,800 --> 00:02:13,360
world is dominated by its communication

57
00:02:13,360 --> 00:02:16,080
complexity

58
00:02:17,280 --> 00:02:19,200
the dream in the information direct

59
00:02:19,200 --> 00:02:22,000
setting is to achieve out of c total

60
00:02:22,000 --> 00:02:24,959
communication complexity or even less

61
00:02:24,959 --> 00:02:27,599
where seize the circuit size

62
00:02:27,599 --> 00:02:30,319
note that it means that with the

63
00:02:30,319 --> 00:02:32,640
increase of the number of parties

64
00:02:32,640 --> 00:02:34,720
the communication complexity property

65
00:02:34,720 --> 00:02:36,480
decreases

66
00:02:36,480 --> 00:02:38,560
in the so-called optimal threshold

67
00:02:38,560 --> 00:02:41,840
setting vrt is equal to n minus 1 over

68
00:02:41,840 --> 00:02:42,800
2.

69
00:02:42,800 --> 00:02:45,200
best known results require order of n

70
00:02:45,200 --> 00:02:48,879
times c total communication

71
00:02:48,959 --> 00:02:51,360
when we move to the sub-optimal case

72
00:02:51,360 --> 00:02:54,239
where there is a gap k between t and

73
00:02:54,239 --> 00:02:56,319
unmask one over two

74
00:02:56,319 --> 00:02:59,120
the work by franklin and jung introduced

75
00:02:59,120 --> 00:03:01,599
the spec sql sharing technique that

76
00:03:01,599 --> 00:03:04,080
allows to store multiple secrets within

77
00:03:04,080 --> 00:03:05,840
a single sharing

78
00:03:05,840 --> 00:03:08,000
relying on this technique they showed

79
00:03:08,000 --> 00:03:10,560
how to evaluate k copies of the same

80
00:03:10,560 --> 00:03:12,879
circuit such that the amortized

81
00:03:12,879 --> 00:03:15,200
communication complexity per circuit is

82
00:03:15,200 --> 00:03:16,840
order of

83
00:03:16,840 --> 00:03:22,319
c later on dik10 and gip15 showed that

84
00:03:22,319 --> 00:03:24,400
the pack signal sharing technique can be

85
00:03:24,400 --> 00:03:26,799
used to evaluate a single circuit with

86
00:03:26,799 --> 00:03:29,599
communication capacity order of log c

87
00:03:29,599 --> 00:03:31,120
times c

88
00:03:31,120 --> 00:03:35,040
on the other hand gio z 17 use the idea

89
00:03:35,040 --> 00:03:37,920
of selecting small committee and achieve

90
00:03:37,920 --> 00:03:40,640
order of log n to the power of one plus

91
00:03:40,640 --> 00:03:45,559
epsilon times c communication capacity

92
00:03:46,560 --> 00:03:49,200
two recent works published in eurocrypt

93
00:03:49,200 --> 00:03:51,920
also try to solve this problem

94
00:03:51,920 --> 00:03:55,599
the work gsy21 combines the idea of

95
00:03:55,599 --> 00:03:58,319
backseat sharing technique and selecting

96
00:03:58,319 --> 00:04:01,840
small committee and achieved out of c

97
00:04:01,840 --> 00:04:03,599
offline communication

98
00:04:03,599 --> 00:04:06,400
plus order of log n to the power of one

99
00:04:06,400 --> 00:04:08,319
plus epsilon times c online

100
00:04:08,319 --> 00:04:10,000
communication

101
00:04:10,000 --> 00:04:12,799
we can see that the desired efficiency

102
00:04:12,799 --> 00:04:13,920
is only

103
00:04:13,920 --> 00:04:16,720
achieved in the offline phase

104
00:04:16,720 --> 00:04:20,160
the work bg jk 21 focused on a class of

105
00:04:20,160 --> 00:04:22,800
circuits that have highly repetitive

106
00:04:22,800 --> 00:04:24,080
structures

107
00:04:24,080 --> 00:04:26,560
and showed that out of c communication

108
00:04:26,560 --> 00:04:28,880
complexity can be achieved on this

109
00:04:28,880 --> 00:04:32,400
restrictive class of circuits

110
00:04:33,280 --> 00:04:34,960
many attempts towards solving this

111
00:04:34,960 --> 00:04:38,400
question lead to our following question

112
00:04:38,400 --> 00:04:39,840
is it possible to construct

113
00:04:39,840 --> 00:04:42,240
information's direct and npc protocols

114
00:04:42,240 --> 00:04:44,160
for computing a single arithmetic

115
00:04:44,160 --> 00:04:46,320
circuit with total communication

116
00:04:46,320 --> 00:04:49,680
capacity order of c

117
00:04:50,400 --> 00:04:52,479
in this work we answer this question

118
00:04:52,479 --> 00:04:54,840
affirmatively by showing the following

119
00:04:54,840 --> 00:04:56,400
theorem

120
00:04:56,400 --> 00:04:59,840
for all k smallers and nms 1 over 2

121
00:04:59,840 --> 00:05:02,800
there is an information selected mpc

122
00:05:02,800 --> 00:05:04,960
which computes a single arithmetic

123
00:05:04,960 --> 00:05:08,479
circuit against n mass 1 over 2 minus k

124
00:05:08,479 --> 00:05:10,960
cropping parties with communication

125
00:05:10,960 --> 00:05:13,600
capacity order of ms

126
00:05:13,600 --> 00:05:16,080
n over k times c

127
00:05:16,080 --> 00:05:19,280
note that when k is equal to order of n

128
00:05:19,280 --> 00:05:21,520
the achieved communication complexity is

129
00:05:21,520 --> 00:05:24,000
order of c

130
00:05:24,000 --> 00:05:26,720
an example calorie is that when t is

131
00:05:26,720 --> 00:05:30,320
0.49 times n the achieved communication

132
00:05:30,320 --> 00:05:33,199
is order of c

133
00:05:35,440 --> 00:05:37,520
our work makes use of the pax security

134
00:05:37,520 --> 00:05:39,039
sharing technique

135
00:05:39,039 --> 00:05:41,360
in the standard xiaomi shield ring we

136
00:05:41,360 --> 00:05:43,600
use a random polynomial to hide a single

137
00:05:43,600 --> 00:05:46,160
evaluation point

138
00:05:46,160 --> 00:05:48,800
the idea of pakistani shearing is to

139
00:05:48,800 --> 00:05:50,880
have multiple sequence laws as

140
00:05:50,880 --> 00:05:54,240
illustrated in the picture

141
00:05:54,880 --> 00:05:57,840
let x be a vector of dimension k

142
00:05:57,840 --> 00:06:00,240
we will use square brackets of x to

143
00:06:00,240 --> 00:06:02,400
represent a packed chemical shearing of

144
00:06:02,400 --> 00:06:04,479
the secret x

145
00:06:04,479 --> 00:06:06,639
as the standard chemical shearing the

146
00:06:06,639 --> 00:06:08,720
pectin measuring is also linearly

147
00:06:08,720 --> 00:06:10,240
homomorphic

148
00:06:10,240 --> 00:06:13,280
namely adding two shearings x and y

149
00:06:13,280 --> 00:06:18,239
yields a sharing of the secret x plus y

150
00:06:19,759 --> 00:06:22,400
in general to evaluate a single circuit

151
00:06:22,400 --> 00:06:24,880
via pax chemical shielding we may want

152
00:06:24,880 --> 00:06:27,199
to pack k bar values within a single

153
00:06:27,199 --> 00:06:29,919
shearing and evaluate a batch of k gates

154
00:06:29,919 --> 00:06:31,440
each time

155
00:06:31,440 --> 00:06:33,680
however there are two difficulties with

156
00:06:33,680 --> 00:06:35,840
this approach

157
00:06:35,840 --> 00:06:38,000
the first the first difficulty is the

158
00:06:38,000 --> 00:06:40,720
need of aligning input sharings

159
00:06:40,720 --> 00:06:43,520
recall that each pack sharing contains a

160
00:06:43,520 --> 00:06:45,840
vector of k secrets

161
00:06:45,840 --> 00:06:48,240
basic protocols for addition gates and

162
00:06:48,240 --> 00:06:50,319
multiplication gates only support

163
00:06:50,319 --> 00:06:52,720
coordinate wise operations

164
00:06:52,720 --> 00:06:54,800
this requires the secrets to be in the

165
00:06:54,800 --> 00:06:56,880
correct order to obtain the correct

166
00:06:56,880 --> 00:06:58,240
answer

167
00:06:58,240 --> 00:07:00,639
during the evaluation when we encounter

168
00:07:00,639 --> 00:07:03,199
the scenario where the secrets are not

169
00:07:03,199 --> 00:07:05,360
in the order we want

170
00:07:05,360 --> 00:07:08,000
for example all parties hold an output

171
00:07:08,000 --> 00:07:10,479
sharing from last layer which contains

172
00:07:10,479 --> 00:07:14,400
the secrets x1 x2 and x3

173
00:07:14,400 --> 00:07:17,199
but to compute the the addition gates in

174
00:07:17,199 --> 00:07:19,360
the current layer all parties need to

175
00:07:19,360 --> 00:07:22,720
hold an input sharing of the secrets x2

176
00:07:22,720 --> 00:07:24,960
x3 and x1

177
00:07:24,960 --> 00:07:27,199
we need to design an efficient protocol

178
00:07:27,199 --> 00:07:30,840
for secret reordering

179
00:07:31,919 --> 00:07:34,080
the second difficulty is the need of

180
00:07:34,080 --> 00:07:36,080
collecting secrets from multiple

181
00:07:36,080 --> 00:07:37,599
sharings

182
00:07:37,599 --> 00:07:40,160
during the evaluation the secrets we

183
00:07:40,160 --> 00:07:42,160
need to be in a single sharing may

184
00:07:42,160 --> 00:07:44,639
scatter in different auto sharings from

185
00:07:44,639 --> 00:07:46,400
previous layers

186
00:07:46,400 --> 00:07:49,280
in this graph we can see that the shear

187
00:07:49,280 --> 00:07:52,800
ring we want needs to contain y1 z1 and

188
00:07:52,800 --> 00:07:55,759
w1 which are scattered in three output

189
00:07:55,759 --> 00:07:58,479
shear rings from last layer we need to

190
00:07:58,479 --> 00:08:00,960
design an efficient protocol to collect

191
00:08:00,960 --> 00:08:04,799
secrets from different sharings

192
00:08:05,520 --> 00:08:08,160
therefore the whole evaluation works as

193
00:08:08,160 --> 00:08:09,360
follows

194
00:08:09,360 --> 00:08:11,599
in the input layer all parties transform

195
00:08:11,599 --> 00:08:13,520
their individual inputs to packed

196
00:08:13,520 --> 00:08:16,080
sharings

197
00:08:16,240 --> 00:08:18,720
for each intermediate layer all parties

198
00:08:18,720 --> 00:08:20,960
first prepare input shearings by

199
00:08:20,960 --> 00:08:22,960
collecting secrets from sharings in

200
00:08:22,960 --> 00:08:24,479
previous layers

201
00:08:24,479 --> 00:08:27,039
we refer to this step as global network

202
00:08:27,039 --> 00:08:29,360
loading

203
00:08:29,360 --> 00:08:31,680
then all parties perform permittations

204
00:08:31,680 --> 00:08:34,479
on the secrets of each sharing to obtain

205
00:08:34,479 --> 00:08:36,080
the correct order

206
00:08:36,080 --> 00:08:37,919
we refer to this step as secret

207
00:08:37,919 --> 00:08:40,640
reordering

208
00:08:40,640 --> 00:08:43,039
finally all parties evaluate a batch of

209
00:08:43,039 --> 00:08:45,440
addition case or multiplication case

210
00:08:45,440 --> 00:08:48,959
using the basic protocols

211
00:08:50,800 --> 00:08:53,760
after evaluating all intermediate layers

212
00:08:53,760 --> 00:08:55,600
all parties together reconstruct the

213
00:08:55,600 --> 00:08:58,480
final output

214
00:08:59,839 --> 00:09:02,000
our main contribution is constructing

215
00:09:02,000 --> 00:09:04,080
efficient protocols for secret

216
00:09:04,080 --> 00:09:06,640
reordering and global network routing

217
00:09:06,640 --> 00:09:09,279
with constant overhead

218
00:09:09,279 --> 00:09:11,440
previous solutions either have order of

219
00:09:11,440 --> 00:09:13,920
log c overhead or only work for a

220
00:09:13,920 --> 00:09:16,399
restricted class of circuits

221
00:09:16,399 --> 00:09:18,800
in this talk we mainly focus on our

222
00:09:18,800 --> 00:09:22,920
solution for secret reordering

223
00:09:23,519 --> 00:09:26,080
let pi be a linear map that promotes the

224
00:09:26,080 --> 00:09:28,560
secrets to the order we want

225
00:09:28,560 --> 00:09:31,440
then given an input sharing x

226
00:09:31,440 --> 00:09:33,680
our goal is to compute a sharing of the

227
00:09:33,680 --> 00:09:37,200
secrets pi x

228
00:09:37,200 --> 00:09:40,000
in the ik 10 this is achieved by first

229
00:09:40,000 --> 00:09:42,800
preparing a pair of random shield rings

230
00:09:42,800 --> 00:09:47,680
r and pi r where r is a random vector

231
00:09:47,760 --> 00:09:49,839
then all parties locally compute the

232
00:09:49,839 --> 00:09:52,640
sharing of x plus r relying on the

233
00:09:52,640 --> 00:09:57,040
linear homomorphism of the pact sharing

234
00:09:57,040 --> 00:09:59,200
next all parties interactively

235
00:09:59,200 --> 00:10:03,519
reconstruct the secret x plus r

236
00:10:03,760 --> 00:10:06,079
since all parties hold the vector x plus

237
00:10:06,079 --> 00:10:08,880
r they can locally promote this vector

238
00:10:08,880 --> 00:10:11,760
and compute pi x plus r

239
00:10:11,760 --> 00:10:14,720
the final step is to compute pi x by

240
00:10:14,720 --> 00:10:17,920
subtracting the sharing of pi r from the

241
00:10:17,920 --> 00:10:20,720
public vector pi x plus r

242
00:10:20,720 --> 00:10:25,120
this step relies on the linearity of pi

243
00:10:28,000 --> 00:10:30,079
as noted in dik-10

244
00:10:30,079 --> 00:10:32,240
the main difficulty is to prepare the

245
00:10:32,240 --> 00:10:34,560
random shield rings r and the pi r

246
00:10:34,560 --> 00:10:36,079
efficiently

247
00:10:36,079 --> 00:10:38,160
although there are known techniques to

248
00:10:38,160 --> 00:10:40,320
efficiently prepare a batch of random

249
00:10:40,320 --> 00:10:43,519
shear rings for fixed permutation

250
00:10:43,519 --> 00:10:46,240
if only one pair is needed the rest of

251
00:10:46,240 --> 00:10:48,000
pairs are wasted

252
00:10:48,000 --> 00:10:49,760
in the worst case we may need a

253
00:10:49,760 --> 00:10:52,000
different permutation each time

254
00:10:52,000 --> 00:10:54,079
the cost for the wasted pairs will

255
00:10:54,079 --> 00:10:56,079
eliminate the benefit of the packs

256
00:10:56,079 --> 00:10:58,560
sharing

257
00:10:58,880 --> 00:11:01,120
therefore we need to limit the number of

258
00:11:01,120 --> 00:11:04,320
different permutations

259
00:11:04,560 --> 00:11:07,040
in the ik 10 this is achieved by

260
00:11:07,040 --> 00:11:09,519
applying a circuit transformation

261
00:11:09,519 --> 00:11:11,680
in this way they only need a limited

262
00:11:11,680 --> 00:11:13,600
number of permutations

263
00:11:13,600 --> 00:11:15,760
but on the other hand the circuit size

264
00:11:15,760 --> 00:11:19,839
increases by a factor of log c

265
00:11:20,720 --> 00:11:23,440
our solution contains two phases

266
00:11:23,440 --> 00:11:25,920
in phase one we will prepare random

267
00:11:25,920 --> 00:11:28,160
shearings only for a limited number of

268
00:11:28,160 --> 00:11:30,480
different permutations

269
00:11:30,480 --> 00:11:33,040
in phase 2 we show that we can

270
00:11:33,040 --> 00:11:35,040
efficiently transform them to random

271
00:11:35,040 --> 00:11:39,199
sharings for the permutations we want

272
00:11:40,399 --> 00:11:42,079
our starting point is a simple

273
00:11:42,079 --> 00:11:43,200
observation

274
00:11:43,200 --> 00:11:46,000
we note that for pact sharing all

275
00:11:46,000 --> 00:11:48,399
parties can locally decompose it into

276
00:11:48,399 --> 00:11:50,160
small components

277
00:11:50,160 --> 00:11:53,680
for example for pack sharing of x1 x2

278
00:11:53,680 --> 00:11:55,040
and x3

279
00:11:55,040 --> 00:11:56,959
we can obtain the following three

280
00:11:56,959 --> 00:11:58,160
sharings

281
00:11:58,160 --> 00:12:01,760
a sharing of the secrets x 1 0 0

282
00:12:01,760 --> 00:12:06,160
a sharing of the secrets 0 x 2 x 2 x 0

283
00:12:06,160 --> 00:12:11,760
and a sharing of the secrets 0 0 x 3.

284
00:12:11,760 --> 00:12:13,200
the observation towards sharing

285
00:12:13,200 --> 00:12:15,519
decomposition is that all parties can

286
00:12:15,519 --> 00:12:18,000
locally compute a higher degree pact

287
00:12:18,000 --> 00:12:20,480
sharing of each component

288
00:12:20,480 --> 00:12:23,040
for example to obtain a sharing of

289
00:12:23,040 --> 00:12:25,600
secrets x 1 0 0

290
00:12:25,600 --> 00:12:27,680
all parties will locally multiply the

291
00:12:27,680 --> 00:12:31,040
sharing of x 1 x 2 and x 3

292
00:12:31,040 --> 00:12:34,399
with a sharing of 1 0 0.

293
00:12:34,399 --> 00:12:36,880
the result is still a very sharing but

294
00:12:36,880 --> 00:12:38,639
has a higher degree

295
00:12:38,639 --> 00:12:43,079
and the secrets become x100

296
00:12:44,480 --> 00:12:47,519
now consider a permutation p which maps

297
00:12:47,519 --> 00:12:51,680
1 2 3 to 1 3 2 respectively

298
00:12:51,680 --> 00:12:53,680
then we want to prepare the following

299
00:12:53,680 --> 00:12:55,760
two random sharings

300
00:12:55,760 --> 00:12:58,079
the first sharing contains the secrets

301
00:12:58,079 --> 00:13:00,560
r1 r2 and r3

302
00:13:00,560 --> 00:13:02,480
and the second sharing contains the

303
00:13:02,480 --> 00:13:06,720
secrets r1 r3 and r2

304
00:13:06,720 --> 00:13:08,959
we may visualize these two sharings by

305
00:13:08,959 --> 00:13:10,959
using the same colors for the same

306
00:13:10,959 --> 00:13:12,399
values

307
00:13:12,399 --> 00:13:14,560
relying on our observation of sharing

308
00:13:14,560 --> 00:13:15,839
decomposition

309
00:13:15,839 --> 00:13:17,600
we can decompose it into three

310
00:13:17,600 --> 00:13:19,760
components

311
00:13:19,760 --> 00:13:21,760
one one component

312
00:13:21,760 --> 00:13:23,920
two three component

313
00:13:23,920 --> 00:13:27,199
and three two components

314
00:13:29,040 --> 00:13:32,160
consider three helper permutations q1 q2

315
00:13:32,160 --> 00:13:33,680
and q3

316
00:13:33,680 --> 00:13:35,839
each of them contains one component we

317
00:13:35,839 --> 00:13:38,720
need for the target permutation p

318
00:13:38,720 --> 00:13:40,160
specifically

319
00:13:40,160 --> 00:13:42,639
the permutation q1 contains the 1 1

320
00:13:42,639 --> 00:13:44,320
component

321
00:13:44,320 --> 00:13:46,480
the permutation q2 contains the two

322
00:13:46,480 --> 00:13:49,120
three components

323
00:13:49,120 --> 00:13:51,360
and the permutation q3 contains the

324
00:13:51,360 --> 00:13:54,399
three two component

325
00:13:55,199 --> 00:13:57,199
if we have prepared random shear rings

326
00:13:57,199 --> 00:14:00,240
for q1 q2 and q3

327
00:14:00,240 --> 00:14:02,800
we can decompose those shearings select

328
00:14:02,800 --> 00:14:04,480
the components we need

329
00:14:04,480 --> 00:14:06,639
and locally add them to obtain the

330
00:14:06,639 --> 00:14:08,320
random sharings for the target

331
00:14:08,320 --> 00:14:11,120
permutation p

332
00:14:11,519 --> 00:14:14,000
therefore to prepare random sharings for

333
00:14:14,000 --> 00:14:15,680
the permutation p

334
00:14:15,680 --> 00:14:17,760
it is sufficient to prepare random share

335
00:14:17,760 --> 00:14:22,079
runes for q1 q2 and q3

336
00:14:22,560 --> 00:14:24,800
recall that k is the number of secrets

337
00:14:24,800 --> 00:14:26,959
contained in a single sharing

338
00:14:26,959 --> 00:14:29,040
this approach requires to prepare k

339
00:14:29,040 --> 00:14:31,600
pairs of random shear rings for each

340
00:14:31,600 --> 00:14:33,839
target permutation which is too

341
00:14:33,839 --> 00:14:36,399
expensive

342
00:14:36,399 --> 00:14:39,440
our observation is that the unused

343
00:14:39,440 --> 00:14:42,560
components in q1 q2 and q3 can

344
00:14:42,560 --> 00:14:44,639
potentially be used to prepare other

345
00:14:44,639 --> 00:14:47,279
shear rooms

346
00:14:47,360 --> 00:14:49,440
therefore we can summarize our two

347
00:14:49,440 --> 00:14:51,519
observations as follows

348
00:14:51,519 --> 00:14:55,279
suppose p1 p2 to pm are permutations we

349
00:14:55,279 --> 00:14:57,839
want to perform during the evaluation

350
00:14:57,839 --> 00:15:01,839
here m is of size out of c

351
00:15:01,920 --> 00:15:04,720
to prepare sharings for permutations p1

352
00:15:04,720 --> 00:15:06,399
p2 to pm

353
00:15:06,399 --> 00:15:08,560
it is sufficient to prepare sharings for

354
00:15:08,560 --> 00:15:11,760
a different set of permutations q1 q2 to

355
00:15:11,760 --> 00:15:12,800
qm

356
00:15:12,800 --> 00:15:13,920
such that

357
00:15:13,920 --> 00:15:16,399
these two sets of permutations contain

358
00:15:16,399 --> 00:15:19,440
the same number of ij components for all

359
00:15:19,440 --> 00:15:22,079
i and j

360
00:15:22,720 --> 00:15:23,920
recall that

361
00:15:23,920 --> 00:15:25,920
we want to limit the number of different

362
00:15:25,920 --> 00:15:27,920
permutations

363
00:15:27,920 --> 00:15:31,040
therefore our goal is to fund such q1 q2

364
00:15:31,040 --> 00:15:34,160
to qm such that they only contain a

365
00:15:34,160 --> 00:15:38,240
limited number of different permutations

366
00:15:39,360 --> 00:15:41,279
we would like to point out that we

367
00:15:41,279 --> 00:15:43,839
cannot simply combine any k components

368
00:15:43,839 --> 00:15:46,560
we need in a single permutation since

369
00:15:46,560 --> 00:15:49,360
they may not form a valid permutation

370
00:15:49,360 --> 00:15:51,519
an example is when we need one one

371
00:15:51,519 --> 00:15:54,160
component one two components to 1k

372
00:15:54,160 --> 00:15:55,519
component

373
00:15:55,519 --> 00:15:58,480
these k components do not form a valid

374
00:15:58,480 --> 00:16:01,040
permutation

375
00:16:01,040 --> 00:16:03,600
we know that this problem is closely

376
00:16:03,600 --> 00:16:06,079
related to the graph theory we first

377
00:16:06,079 --> 00:16:08,240
recall some basic notions in the graph

378
00:16:08,240 --> 00:16:10,639
theory

379
00:16:11,600 --> 00:16:14,079
we say a graph is a bipartite graph if

380
00:16:14,079 --> 00:16:16,320
we can divide the nodes into two sides

381
00:16:16,320 --> 00:16:17,440
such that

382
00:16:17,440 --> 00:16:19,759
all edges are connecting nodes from the

383
00:16:19,759 --> 00:16:22,320
first side to the second side for

384
00:16:22,320 --> 00:16:25,040
example in this graph we can divide

385
00:16:25,040 --> 00:16:27,199
nodes into the left part and the red

386
00:16:27,199 --> 00:16:29,519
part

387
00:16:29,920 --> 00:16:32,480
for a bipartite graph a perfect matching

388
00:16:32,480 --> 00:16:35,360
is a set of edges such that each node

389
00:16:35,360 --> 00:16:37,279
has degree 1.

390
00:16:37,279 --> 00:16:40,320
in this graph the set of edges in red is

391
00:16:40,320 --> 00:16:43,279
a perfect matching

392
00:16:43,920 --> 00:16:46,240
note that a perfect matching corresponds

393
00:16:46,240 --> 00:16:48,000
to a permutation

394
00:16:48,000 --> 00:16:50,480
for each edge connecting the s nodes in

395
00:16:50,480 --> 00:16:53,040
the left part to the json nodes in the

396
00:16:53,040 --> 00:16:54,320
red part

397
00:16:54,320 --> 00:16:56,480
the corresponding permutation p

398
00:16:56,480 --> 00:16:59,920
maps the value i to the to value j

399
00:16:59,920 --> 00:17:02,160
in this graph the perfect matching in

400
00:17:02,160 --> 00:17:05,039
red corresponds to the permutation that

401
00:17:05,039 --> 00:17:07,760
maps one two three four five

402
00:17:07,760 --> 00:17:11,839
to two four one five three

403
00:17:12,400 --> 00:17:14,720
horseman ethereum is a well-known

404
00:17:14,720 --> 00:17:17,679
theorem in graph theory which has many

405
00:17:17,679 --> 00:17:20,000
applications in mathematics and computer

406
00:17:20,000 --> 00:17:21,199
science

407
00:17:21,199 --> 00:17:23,359
it provides a necessary and sufficient

408
00:17:23,359 --> 00:17:26,000
condition of the existence of a perfect

409
00:17:26,000 --> 00:17:28,720
matching in a bipartite graph

410
00:17:28,720 --> 00:17:31,679
in this work we use a weaker version of

411
00:17:31,679 --> 00:17:33,520
the house merit theorem

412
00:17:33,520 --> 00:17:35,039
which states that

413
00:17:35,039 --> 00:17:37,360
for a bipartite graph where each node

414
00:17:37,360 --> 00:17:39,120
has the same degree

415
00:17:39,120 --> 00:17:42,879
there exists a perfect matching

416
00:17:44,720 --> 00:17:46,720
now we connect our problem to the host

417
00:17:46,720 --> 00:17:48,240
memory theorem

418
00:17:48,240 --> 00:17:51,520
suppose p1 p2 to pm are permutations we

419
00:17:51,520 --> 00:17:54,480
want to prepare random sharings for

420
00:17:54,480 --> 00:17:57,360
we first construct a bipartite graph by

421
00:17:57,360 --> 00:17:58,880
inserting the perfect matching

422
00:17:58,880 --> 00:18:01,679
corresponds to each permutation

423
00:18:01,679 --> 00:18:04,640
the graph on the red is an example when

424
00:18:04,640 --> 00:18:10,320
m is 3 and p1 p2 p3 are as follows

425
00:18:11,200 --> 00:18:13,840
note that the number of edges between i

426
00:18:13,840 --> 00:18:17,039
and j is the number of ij components in

427
00:18:17,039 --> 00:18:21,520
the permutations p1 p2 to pm

428
00:18:21,679 --> 00:18:25,840
recall that our goal is to find q1q2qm

429
00:18:25,840 --> 00:18:27,600
with limited number of different

430
00:18:27,600 --> 00:18:30,240
permutations such that they contain the

431
00:18:30,240 --> 00:18:33,039
same number of components of each tab as

432
00:18:33,039 --> 00:18:37,360
the permutations p1 p2 to pm

433
00:18:38,000 --> 00:18:39,440
therefore

434
00:18:39,440 --> 00:18:41,600
this condition is equivalent to that

435
00:18:41,600 --> 00:18:44,160
these two sets of permutations map to

436
00:18:44,160 --> 00:18:47,520
the same bipartite graph

437
00:18:48,880 --> 00:18:50,320
now we are ready to describe our

438
00:18:50,320 --> 00:18:53,360
solution to find the permutations q1 q2

439
00:18:53,360 --> 00:18:55,200
to qm

440
00:18:55,200 --> 00:18:57,280
the first step is to find a perfect

441
00:18:57,280 --> 00:18:59,600
matching in the peptide graph

442
00:18:59,600 --> 00:19:02,000
we can show that the graph satisfies the

443
00:19:02,000 --> 00:19:04,640
condition in host memory theorem

444
00:19:04,640 --> 00:19:05,679
therefore

445
00:19:05,679 --> 00:19:08,000
the existence of a perfect matching is

446
00:19:08,000 --> 00:19:12,000
guaranteed by host marriage theorem

447
00:19:12,480 --> 00:19:15,039
in the second step we repeatedly remove

448
00:19:15,039 --> 00:19:17,679
this perfect matching until one kind of

449
00:19:17,679 --> 00:19:20,000
edges is used up

450
00:19:20,000 --> 00:19:21,840
each time of removing this perfect

451
00:19:21,840 --> 00:19:23,919
matching means that we choose the

452
00:19:23,919 --> 00:19:26,400
corresponding permutation

453
00:19:26,400 --> 00:19:28,880
note that they are at the most k square

454
00:19:28,880 --> 00:19:32,240
different kinds of edges

455
00:19:32,960 --> 00:19:35,280
if the graph is not empty then we go to

456
00:19:35,280 --> 00:19:37,120
the first step and rerun the whole

457
00:19:37,120 --> 00:19:39,840
process again

458
00:19:41,200 --> 00:19:43,679
since each time we will use up at least

459
00:19:43,679 --> 00:19:45,280
one kind of edges

460
00:19:45,280 --> 00:19:47,440
the whole process will terminate within

461
00:19:47,440 --> 00:19:49,679
k-squared regions

462
00:19:49,679 --> 00:19:52,480
in each iteration we only find one kind

463
00:19:52,480 --> 00:19:54,880
of perfect matching which corresponds to

464
00:19:54,880 --> 00:19:58,160
one kind of permutation

465
00:19:58,160 --> 00:20:00,880
therefore the permutations we found

466
00:20:00,880 --> 00:20:03,120
contains at most k square different

467
00:20:03,120 --> 00:20:06,720
permutations which is independent of m

468
00:20:06,720 --> 00:20:08,880
recall that k is the number of secrets

469
00:20:08,880 --> 00:20:11,440
we pack in a single shearing which is

470
00:20:11,440 --> 00:20:12,960
order of n

471
00:20:12,960 --> 00:20:14,400
and m is the total number of

472
00:20:14,400 --> 00:20:17,679
permutations we need to perform which is

473
00:20:17,679 --> 00:20:20,240
out of the circuit size

474
00:20:20,240 --> 00:20:22,640
together with sharing decomposition we

475
00:20:22,640 --> 00:20:24,559
can efficiently prepare random shear

476
00:20:24,559 --> 00:20:28,000
rings for any permutations

477
00:20:29,039 --> 00:20:32,320
in summary our idea works as follows

478
00:20:32,320 --> 00:20:34,799
in phase 1 we first used the house

479
00:20:34,799 --> 00:20:37,120
marriage theorem to find a set of

480
00:20:37,120 --> 00:20:39,440
permutations with limited number of

481
00:20:39,440 --> 00:20:41,440
different permutations

482
00:20:41,440 --> 00:20:43,679
and prepare random sharings only for

483
00:20:43,679 --> 00:20:46,559
this set of permutations

484
00:20:46,559 --> 00:20:48,960
then in phase 2 we use the idea of

485
00:20:48,960 --> 00:20:51,280
sharing decomposition to transform these

486
00:20:51,280 --> 00:20:53,200
random share rings to those for the

487
00:20:53,200 --> 00:20:56,400
permutations we want

488
00:20:58,559 --> 00:21:00,559
we briefly discuss our solution for

489
00:21:00,559 --> 00:21:02,720
global network routing

490
00:21:02,720 --> 00:21:04,559
recall that the problem is to collect

491
00:21:04,559 --> 00:21:07,840
secrets from multiple different sharings

492
00:21:07,840 --> 00:21:10,400
we point out that the idea of sharing

493
00:21:10,400 --> 00:21:12,480
the composition does not change the

494
00:21:12,480 --> 00:21:14,799
positions of the secrets

495
00:21:14,799 --> 00:21:16,720
if we need multiple secrets from the

496
00:21:16,720 --> 00:21:18,240
same positions

497
00:21:18,240 --> 00:21:20,960
we cannot obtain a single sharing of the

498
00:21:20,960 --> 00:21:23,440
selected secrets just using sharing

499
00:21:23,440 --> 00:21:26,000
decomposition

500
00:21:26,000 --> 00:21:28,480
for example suppose all parties hold

501
00:21:28,480 --> 00:21:30,960
three sharings in the previous layers

502
00:21:30,960 --> 00:21:33,039
and they want to obtain a new sharing in

503
00:21:33,039 --> 00:21:35,120
the current layer which contains the

504
00:21:35,120 --> 00:21:38,720
first secret of its sharing

505
00:21:38,720 --> 00:21:41,200
using sharing decomposition we obtain

506
00:21:41,200 --> 00:21:42,840
three sharings

507
00:21:42,840 --> 00:21:48,959
x100 y 1 0 0 and z 1 0 0

508
00:21:49,280 --> 00:21:51,600
but since they are all in the first

509
00:21:51,600 --> 00:21:54,400
position it is unclear how to directly

510
00:21:54,400 --> 00:21:58,480
obtain the sharing x1 y1 z1 from these

511
00:21:58,480 --> 00:22:01,360
three sharings

512
00:22:02,080 --> 00:22:03,919
our solution uses the permutation

513
00:22:03,919 --> 00:22:06,000
protocol as a building block

514
00:22:06,000 --> 00:22:08,080
and the horseman ethereum

515
00:22:08,080 --> 00:22:10,000
to achieve what we call non-clearing

516
00:22:10,000 --> 00:22:11,600
property

517
00:22:11,600 --> 00:22:13,760
this property ensures that the secrets

518
00:22:13,760 --> 00:22:15,760
we want to collect are coming from

519
00:22:15,760 --> 00:22:17,520
different positions

520
00:22:17,520 --> 00:22:19,360
this allows us to use the sharing

521
00:22:19,360 --> 00:22:21,679
decomposition idea to solve the global

522
00:22:21,679 --> 00:22:24,320
network loading

523
00:22:24,320 --> 00:22:26,400
interestingly we used the

524
00:22:26,400 --> 00:22:28,640
horseman ethereum in a different way to

525
00:22:28,640 --> 00:22:32,159
achieve non-clearance property

526
00:22:32,720 --> 00:22:34,640
as a summary of this talk

527
00:22:34,640 --> 00:22:36,480
we first used the idea of sharing

528
00:22:36,480 --> 00:22:39,520
decomposition and host merit theorem to

529
00:22:39,520 --> 00:22:41,600
construct an efficient protocol for

530
00:22:41,600 --> 00:22:44,480
secret reordering

531
00:22:44,480 --> 00:22:47,039
then relying on our efficient protocol

532
00:22:47,039 --> 00:22:48,880
for secretly ordering

533
00:22:48,880 --> 00:22:51,200
host merit theorem and the idea of

534
00:22:51,200 --> 00:22:52,880
sharing decomposition

535
00:22:52,880 --> 00:22:55,200
we construct an efficient protocol for

536
00:22:55,200 --> 00:22:58,480
global network loading

537
00:22:59,600 --> 00:23:01,840
finally together with the basic

538
00:23:01,840 --> 00:23:03,760
protocols that evaluate a batch of

539
00:23:03,760 --> 00:23:06,000
addition and multiplication gates using

540
00:23:06,000 --> 00:23:09,360
pakistanian shielding we obtain

541
00:23:09,360 --> 00:23:12,400
an mpc protocol that achieves order of c

542
00:23:12,400 --> 00:23:15,760
communication complexity

543
00:23:16,640 --> 00:23:19,880
thank you

544
00:23:25,840 --> 00:23:27,918
you

