1
00:00:01,520 --> 00:00:03,360
okay good to go

2
00:00:03,360 --> 00:00:04,319
all right

3
00:00:04,319 --> 00:00:08,320
um okay so uh welcome everybody

4
00:00:08,320 --> 00:00:09,679
um

5
00:00:09,679 --> 00:00:12,559
before we as usual when we kick off a

6
00:00:12,559 --> 00:00:15,679
conference we have a few minutes um

7
00:00:15,679 --> 00:00:17,600
where uh general chair and program

8
00:00:17,600 --> 00:00:20,320
chairs welcome people and say something

9
00:00:20,320 --> 00:00:22,800
interesting about the conference zone so

10
00:00:22,800 --> 00:00:24,880
that's what we are gonna attempt uh to

11
00:00:24,880 --> 00:00:25,920
do today

12
00:00:25,920 --> 00:00:28,560
um i'm vladky lesninkov general chair

13
00:00:28,560 --> 00:00:31,439
and after i uh talk about a couple of

14
00:00:31,439 --> 00:00:34,160
things then now malcolm and chris pikert

15
00:00:34,160 --> 00:00:36,800
will talk about the um something that

16
00:00:36,800 --> 00:00:39,120
what pc chairs want to say

17
00:00:39,120 --> 00:00:41,360
um

18
00:00:41,360 --> 00:00:44,960
so this year we have a very round good

19
00:00:44,960 --> 00:00:46,640
looking number of registrations as of

20
00:00:46,640 --> 00:00:48,480
couple of hours ago now it's a little

21
00:00:48,480 --> 00:00:49,520
different

22
00:00:49,520 --> 00:00:51,760
three a's that's uh when i saw this it

23
00:00:51,760 --> 00:00:53,280
was very exciting

24
00:00:53,280 --> 00:00:55,840
about the third of these are

25
00:00:55,840 --> 00:00:58,399
student registrations and the rest are

26
00:00:58,399 --> 00:01:00,079
regular registration

27
00:01:00,079 --> 00:01:01,840
so the three eighths i think is a very

28
00:01:01,840 --> 00:01:05,280
lucky number and so that's great um

29
00:01:05,280 --> 00:01:06,640
there are about

30
00:01:06,640 --> 00:01:09,920
a third of new registrations including

31
00:01:09,920 --> 00:01:11,920
new new regular and new member

32
00:01:11,920 --> 00:01:14,080
registrations and two-thirds are

33
00:01:14,080 --> 00:01:16,320
renewals from previous years i assume so

34
00:01:16,320 --> 00:01:17,600
we are growing

35
00:01:17,600 --> 00:01:19,439
by a lot

36
00:01:19,439 --> 00:01:21,200
and this is a chart

37
00:01:21,200 --> 00:01:23,040
that

38
00:01:23,040 --> 00:01:25,280
roughly gives the proportion of where

39
00:01:25,280 --> 00:01:26,880
people come from

40
00:01:26,880 --> 00:01:28,880
so about a third of people

41
00:01:28,880 --> 00:01:30,560
come from the united states

42
00:01:30,560 --> 00:01:31,439
um

43
00:01:31,439 --> 00:01:34,799
the next third comes from um

44
00:01:34,799 --> 00:01:37,840
from the next 10 countries which

45
00:01:37,840 --> 00:01:42,399
i guess is europe uk israel and

46
00:01:42,399 --> 00:01:44,240
canada maybe i'll include that and then

47
00:01:44,240 --> 00:01:45,840
the rest of the countries are you know

48
00:01:45,840 --> 00:01:48,960
make up the other uh the other third of

49
00:01:48,960 --> 00:01:50,799
registrations

50
00:01:50,799 --> 00:01:52,079
um

51
00:01:52,079 --> 00:01:55,119
so there's many many people um whom i

52
00:01:55,119 --> 00:01:56,240
want to thank

53
00:01:56,240 --> 00:01:57,759
and i'm gonna do that

54
00:01:57,759 --> 00:01:59,600
very briefly um

55
00:01:59,600 --> 00:02:02,079
my job as the general chair was was very

56
00:02:02,079 --> 00:02:03,439
easy

57
00:02:03,439 --> 00:02:04,640
i just

58
00:02:04,640 --> 00:02:06,880
need to manage registrations and didn't

59
00:02:06,880 --> 00:02:09,520
need to deal with a lot of uh

60
00:02:09,520 --> 00:02:11,840
physical aspects of organizing the

61
00:02:11,840 --> 00:02:14,480
conference i did receive a lot of uh

62
00:02:14,480 --> 00:02:15,520
help

63
00:02:15,520 --> 00:02:16,879
from

64
00:02:16,879 --> 00:02:19,040
brian lamacchia our treasurer

65
00:02:19,040 --> 00:02:21,360
and uh from leo raisin who was the

66
00:02:21,360 --> 00:02:23,280
general chair of uh

67
00:02:23,280 --> 00:02:25,520
last year this was very important advice

68
00:02:25,520 --> 00:02:28,160
how to navigate those things

69
00:02:28,160 --> 00:02:30,239
um importantly i want to emphasize

70
00:02:30,239 --> 00:02:31,920
everything else and this is in red and

71
00:02:31,920 --> 00:02:34,480
big letters was run

72
00:02:34,480 --> 00:02:35,680
on the non-crypto technical

73
00:02:35,680 --> 00:02:37,599
contributions running the conference was

74
00:02:37,599 --> 00:02:39,920
really run by um kim mckelly and kevin

75
00:02:39,920 --> 00:02:42,480
mccurley and this includes and i listed

76
00:02:42,480 --> 00:02:44,000
some of the things that i know about and

77
00:02:44,000 --> 00:02:46,000
there's probably five times more i don't

78
00:02:46,000 --> 00:02:47,040
know about

79
00:02:47,040 --> 00:02:49,200
website management tools behind the

80
00:02:49,200 --> 00:02:50,640
scene operating everything all the

81
00:02:50,640 --> 00:02:53,040
connectivity issues uh people come

82
00:02:53,040 --> 00:02:56,239
cannot connect they respond to this um

83
00:02:56,239 --> 00:02:58,239
the zoom and zulip the chat app that

84
00:02:58,239 --> 00:03:00,159
we're going to be using

85
00:03:00,159 --> 00:03:01,599
that is really

86
00:03:01,599 --> 00:03:03,360
cool looking and elegant

87
00:03:03,360 --> 00:03:06,319
it's all done by them so thanks a lot uh

88
00:03:06,319 --> 00:03:08,480
and to really drive this point and

89
00:03:08,480 --> 00:03:10,560
because i discovered how to make charts

90
00:03:10,560 --> 00:03:13,280
in uh in excel i made a really nice

91
00:03:13,280 --> 00:03:15,680
chart that kind of

92
00:03:15,680 --> 00:03:18,800
illustrates the level of contribution by

93
00:03:18,800 --> 00:03:20,239
uh me

94
00:03:20,239 --> 00:03:23,200
and some advisors and uh and okay and

95
00:03:23,200 --> 00:03:24,400
kevin

96
00:03:24,400 --> 00:03:26,400
um so this was kind of non-crypto

97
00:03:26,400 --> 00:03:27,840
technical

98
00:03:27,840 --> 00:03:29,599
well so there's crypto technical

99
00:03:29,599 --> 00:03:32,879
contributions obviously um and this is

100
00:03:32,879 --> 00:03:35,519
the program committee um and pc chairs

101
00:03:35,519 --> 00:03:37,120
style and chris

102
00:03:37,120 --> 00:03:40,400
and everybody who send the papers

103
00:03:40,400 --> 00:03:42,480
um there was a work there were two there

104
00:03:42,480 --> 00:03:45,200
were two days of workshops um

105
00:03:45,200 --> 00:03:47,920
ran by karmit hazai who

106
00:03:47,920 --> 00:03:49,680
is a workshops chair

107
00:03:49,680 --> 00:03:52,319
and by the workshop chairs so thanks to

108
00:03:52,319 --> 00:03:53,280
them

109
00:03:53,280 --> 00:03:54,400
um

110
00:03:54,400 --> 00:03:57,040
we did plan when when um early on so the

111
00:03:57,040 --> 00:03:58,560
conference preparation starts several

112
00:03:58,560 --> 00:04:00,640
years ago or at least the year before

113
00:04:00,640 --> 00:04:03,519
the conference becomes kind of seriously

114
00:04:03,519 --> 00:04:04,640
um

115
00:04:04,640 --> 00:04:06,720
it enters the serious planning phase

116
00:04:06,720 --> 00:04:09,280
so a year ago we did not know where

117
00:04:09,280 --> 00:04:11,280
we're gonna be so we seriously looked

118
00:04:11,280 --> 00:04:12,239
into

119
00:04:12,239 --> 00:04:14,640
or seriously hoped uh for being in

120
00:04:14,640 --> 00:04:16,478
person at ucsb

121
00:04:16,478 --> 00:04:18,880
and ucsb led us through this and uh they

122
00:04:18,880 --> 00:04:19,759
were

123
00:04:19,759 --> 00:04:22,960
uh smart enough and uh to

124
00:04:22,960 --> 00:04:24,720
decide early on that's not going to

125
00:04:24,720 --> 00:04:27,919
happen um in person that saved a lot of

126
00:04:27,919 --> 00:04:30,320
effort so i wanted you know uh so i

127
00:04:30,320 --> 00:04:33,280
wanted to thank uh ucsb and people who

128
00:04:33,280 --> 00:04:35,040
we work with whitney morris and erica

129
00:04:35,040 --> 00:04:36,560
mcdonald

130
00:04:36,560 --> 00:04:38,720
um iacr board of directors and many many

131
00:04:38,720 --> 00:04:40,560
others who might ask for advice and all

132
00:04:40,560 --> 00:04:42,960
of you people who are registered and

133
00:04:42,960 --> 00:04:44,960
contributing to the conference in all

134
00:04:44,960 --> 00:04:46,720
sorts of ways

135
00:04:46,720 --> 00:04:48,880
there are many uh sponsors whose

136
00:04:48,880 --> 00:04:50,800
contributions are extremely important to

137
00:04:50,800 --> 00:04:52,479
us and i want to

138
00:04:52,479 --> 00:04:53,680
list them here

139
00:04:53,680 --> 00:04:55,600
they are listed on the website

140
00:04:55,600 --> 00:04:57,520
as well

141
00:04:57,520 --> 00:04:59,840
so at the gold level we have entity

142
00:04:59,840 --> 00:05:02,160
research uh shanghai key laboratory

143
00:05:02,160 --> 00:05:04,400
acquires a present computation

144
00:05:04,400 --> 00:05:06,800
amazon at the silver level we have

145
00:05:06,800 --> 00:05:09,039
facebook and jp morgan and the bronze

146
00:05:09,039 --> 00:05:11,280
level we have iohk

147
00:05:11,280 --> 00:05:13,600
matrix element platon google ibm and

148
00:05:13,600 --> 00:05:14,800
fujitsu

149
00:05:14,800 --> 00:05:16,080
thank you very much for supporting

150
00:05:16,080 --> 00:05:21,120
crypto uh 21 and encrypted research

151
00:05:21,120 --> 00:05:24,210
now a few words of how to connect

152
00:05:24,210 --> 00:05:26,000
[Music]

153
00:05:26,000 --> 00:05:28,560
most people probably hopefully uh

154
00:05:28,560 --> 00:05:31,440
watching it from but after having logged

155
00:05:31,440 --> 00:05:32,160
in

156
00:05:32,160 --> 00:05:35,039
um but if you're watching it in in

157
00:05:35,039 --> 00:05:36,720
youtube stream maybe that will be

158
00:05:36,720 --> 00:05:38,960
helpful to you um

159
00:05:38,960 --> 00:05:41,440
to to get here where we are

160
00:05:41,440 --> 00:05:45,680
um go to the crypto web page uh program

161
00:05:45,680 --> 00:05:47,759
and there there will be very handy big

162
00:05:47,759 --> 00:05:50,080
blue button uh join the conference so

163
00:05:50,080 --> 00:05:51,919
you have to click on that you have to

164
00:05:51,919 --> 00:05:52,960
log in

165
00:05:52,960 --> 00:05:54,160
um

166
00:05:54,160 --> 00:05:56,240
and you'll get to this

167
00:05:56,240 --> 00:05:58,720
uh very cool looking

168
00:05:58,720 --> 00:06:00,720
dashboard and

169
00:06:00,720 --> 00:06:02,800
and here you can go

170
00:06:02,800 --> 00:06:05,520
to chat rooms and they're appropriately

171
00:06:05,520 --> 00:06:08,400
named um if you want to go see the talks

172
00:06:08,400 --> 00:06:10,240
then you click on the program link on

173
00:06:10,240 --> 00:06:12,639
the top left and this will take you

174
00:06:12,639 --> 00:06:14,319
here to the program where there will be

175
00:06:14,319 --> 00:06:16,000
links to

176
00:06:16,000 --> 00:06:17,520
to zoom rooms

177
00:06:17,520 --> 00:06:20,479
um is not a guarantee but the zoom rooms

178
00:06:20,479 --> 00:06:21,840
for the day

179
00:06:21,840 --> 00:06:23,680
um are the same link

180
00:06:23,680 --> 00:06:24,720
so that

181
00:06:24,720 --> 00:06:26,560
that should maybe help if something is

182
00:06:26,560 --> 00:06:28,240
confusing you can use the link from

183
00:06:28,240 --> 00:06:30,560
previous from a different session

184
00:06:30,560 --> 00:06:32,080
um

185
00:06:32,080 --> 00:06:35,759
for social uh and entertainment we have

186
00:06:35,759 --> 00:06:36,960
this

187
00:06:36,960 --> 00:06:38,560
very nice puzzle

188
00:06:38,560 --> 00:06:42,080
that was designed by ray hirschfeld and

189
00:06:42,080 --> 00:06:45,919
um kevin mccurley the ui there is very

190
00:06:45,919 --> 00:06:48,720
is very is great you move your mouse

191
00:06:48,720 --> 00:06:51,360
everything highlights uh so it's great

192
00:06:51,360 --> 00:06:54,319
uh this is a crypto themed

193
00:06:54,319 --> 00:06:57,199
puzzle and as you see nigel smart has

194
00:06:57,199 --> 00:06:59,599
already uh a great lead as of a few

195
00:06:59,599 --> 00:07:03,199
minutes ago um do you you can win prizes

196
00:07:03,199 --> 00:07:05,120
so i'm gonna do this as soon as i finish

197
00:07:05,120 --> 00:07:06,720
this talk i'm going to

198
00:07:06,720 --> 00:07:08,800
go on and try to win the prize

199
00:07:08,800 --> 00:07:12,240
um the crypto 21 papers are online

200
00:07:12,240 --> 00:07:13,680
the easiest way there's probably some

201
00:07:13,680 --> 00:07:16,080
other ways but the easiest way

202
00:07:16,080 --> 00:07:18,560
to access them is to go to this link on

203
00:07:18,560 --> 00:07:22,560
the slide icr.org publicationsaccess.php

204
00:07:22,560 --> 00:07:24,800
you'll have to log in and from there

205
00:07:24,800 --> 00:07:26,400
you'll get access to links to all the

206
00:07:26,400 --> 00:07:28,400
papers

207
00:07:28,400 --> 00:07:30,960
i include the picture of the physical

208
00:07:30,960 --> 00:07:33,599
ucsb for people to take a glance and

209
00:07:33,599 --> 00:07:35,199
hopefully we'll see you all there and

210
00:07:35,199 --> 00:07:38,960
i'll hand off to the program shares

211
00:07:40,000 --> 00:07:41,039
all right

212
00:07:41,039 --> 00:07:43,120
thank you vlad um

213
00:07:43,120 --> 00:07:46,400
so i'm chris pikert i'm a co-program

214
00:07:46,400 --> 00:07:48,800
chair together with tal malkin

215
00:07:48,800 --> 00:07:51,520
and i'll just give you a brief overview

216
00:07:51,520 --> 00:07:54,560
of the program for the coming five days

217
00:07:54,560 --> 00:07:58,080
uh we have 103 papers this is a record

218
00:07:58,080 --> 00:08:00,400
for crypto of 103 papers

219
00:08:00,400 --> 00:08:03,360
on a wide variety of topics in

220
00:08:03,360 --> 00:08:05,199
cryptography across

221
00:08:05,199 --> 00:08:07,440
20 sessions in five days

222
00:08:07,440 --> 00:08:10,319
and we want to thank all of the 58

223
00:08:10,319 --> 00:08:13,120
terrific pc members as well as the four

224
00:08:13,120 --> 00:08:14,720
advisory members

225
00:08:14,720 --> 00:08:17,199
and the hundreds of external

226
00:08:17,199 --> 00:08:19,120
reviewers for helping

227
00:08:19,120 --> 00:08:21,360
to assemble a really interesting and

228
00:08:21,360 --> 00:08:23,520
great program for this week

229
00:08:23,520 --> 00:08:25,440
we also want to

230
00:08:25,440 --> 00:08:27,759
emphasize that all subsequent days are

231
00:08:27,759 --> 00:08:30,240
starting an hour earlier so right now

232
00:08:30,240 --> 00:08:32,719
it's uh 909 pacific time they'll

233
00:08:32,719 --> 00:08:35,839
beginning at 8 00 a.m pacific time 1500

234
00:08:35,839 --> 00:08:37,200
utc

235
00:08:37,200 --> 00:08:40,159
for all four subsequent days a couple of

236
00:08:40,159 --> 00:08:43,519
highlights of the program to come

237
00:08:43,519 --> 00:08:45,519
we have four award papers that will be

238
00:08:45,519 --> 00:08:47,600
presented tomorrow morning and the

239
00:08:47,600 --> 00:08:49,120
pacific time

240
00:08:49,120 --> 00:08:51,120
at the beginning of the program

241
00:08:51,120 --> 00:08:53,760
that will be preceded by recognition of

242
00:08:53,760 --> 00:08:56,320
the crypto test of time award uh to

243
00:08:56,320 --> 00:08:58,880
mahir balari for his paper in crypto

244
00:08:58,880 --> 00:09:00,480
2006.

245
00:09:00,480 --> 00:09:02,880
we also have two invited talks by world

246
00:09:02,880 --> 00:09:05,760
leaders in their respective areas

247
00:09:05,760 --> 00:09:07,680
we have vanessa teague

248
00:09:07,680 --> 00:09:09,839
talking on which e-voting problems do we

249
00:09:09,839 --> 00:09:11,440
need to solve

250
00:09:11,440 --> 00:09:13,120
that will be this afternoon it's the

251
00:09:13,120 --> 00:09:16,480
final event of today's schedule at 2 30

252
00:09:16,480 --> 00:09:19,680
p.m pacific time 2130

253
00:09:19,680 --> 00:09:20,880
utc

254
00:09:20,880 --> 00:09:23,040
and the second invited talk is by jen's

255
00:09:23,040 --> 00:09:25,920
growth who will be talking on a world of

256
00:09:25,920 --> 00:09:27,120
snarks

257
00:09:27,120 --> 00:09:29,120
and that's wednesday morning

258
00:09:29,120 --> 00:09:33,360
at 9 00 a.m pacific time 1600 utc

259
00:09:33,360 --> 00:09:35,360
uh as usual at crypto we also have the

260
00:09:35,360 --> 00:09:36,399
rump session

261
00:09:36,399 --> 00:09:38,640
that's the final event on wednesday's

262
00:09:38,640 --> 00:09:42,240
schedule that's at 2 30 p.m pacific 21

263
00:09:42,240 --> 00:09:43,839
30 utc

264
00:09:43,839 --> 00:09:46,800
and the new iacr fellows for the year

265
00:09:46,800 --> 00:09:49,120
will be presented at the beginning of

266
00:09:49,120 --> 00:09:50,560
the rump session

267
00:09:50,560 --> 00:09:53,040
uh if you wish uh to present to the room

268
00:09:53,040 --> 00:09:55,360
session please submit uh short and or

269
00:09:55,360 --> 00:09:57,839
funny uh brief announcements uh there's

270
00:09:57,839 --> 00:10:00,640
a link in the program uh under the rump

271
00:10:00,640 --> 00:10:02,640
session that will allow you to submit

272
00:10:02,640 --> 00:10:06,000
your um your uh your talk and then a

273
00:10:06,000 --> 00:10:08,240
schedule will be forthcoming uh when the

274
00:10:08,240 --> 00:10:10,640
rum session shares uh put it together

275
00:10:10,640 --> 00:10:13,600
um finally the membership meeting uh is

276
00:10:13,600 --> 00:10:16,320
the final event on a thursday schedule

277
00:10:16,320 --> 00:10:20,640
that's also at 2 30 p.m pacific uh 21 30

278
00:10:20,640 --> 00:10:21,920
utc

279
00:10:21,920 --> 00:10:25,040
so um i'll hand it off to towel for a

280
00:10:25,040 --> 00:10:26,720
couple uh last remarks and then we'll

281
00:10:26,720 --> 00:10:29,120
get started

282
00:10:29,120 --> 00:10:31,600
yeah hi everyone i'm tal malkin i don't

283
00:10:31,600 --> 00:10:34,399
have much to add um i guess two quick

284
00:10:34,399 --> 00:10:37,200
things one as part of the thanks also

285
00:10:37,200 --> 00:10:39,519
thank the authors who submitted great

286
00:10:39,519 --> 00:10:41,360
papers and allowed us to

287
00:10:41,360 --> 00:10:43,040
have this great program the selection

288
00:10:43,040 --> 00:10:45,680
was really hard we have a record number

289
00:10:45,680 --> 00:10:48,399
of acceptances but we also had a big

290
00:10:48,399 --> 00:10:50,640
record number of submissions

291
00:10:50,640 --> 00:10:52,640
um and the other thing i wanted to say

292
00:10:52,640 --> 00:10:54,880
is um somebody wrote on the chat big

293
00:10:54,880 --> 00:10:57,120
standing ovation for k and kevin i

294
00:10:57,120 --> 00:10:59,279
wanted to say the same thing i cannot

295
00:10:59,279 --> 00:11:01,839
emphasize enough how much they helped us

296
00:11:01,839 --> 00:11:03,920
kevin is not here today because he's on

297
00:11:03,920 --> 00:11:05,680
jury duty we hope he'll be here the rest

298
00:11:05,680 --> 00:11:07,519
of the days but he helped at every step

299
00:11:07,519 --> 00:11:09,920
of the way from debugging things from in

300
00:11:09,920 --> 00:11:12,079
the proceedings in every

301
00:11:12,079 --> 00:11:14,480
possible aspect so really

302
00:11:14,480 --> 00:11:17,519
all the thanks goes to uh k and kevin

303
00:11:17,519 --> 00:11:21,279
uh that's all i wanted to add for now

304
00:11:22,240 --> 00:11:24,480
so i guess we'll hand it over to uh

305
00:11:24,480 --> 00:11:28,519
stash for the first session

306
00:11:29,920 --> 00:11:32,959
hello hello so uh the first sessions on

307
00:11:32,959 --> 00:11:34,560
on signatures

308
00:11:34,560 --> 00:11:36,880
is starting now

309
00:11:36,880 --> 00:11:41,279
um and i guess it's the same zoom right

310
00:11:41,279 --> 00:11:44,079
it is yes yeah okay thank you

311
00:11:44,079 --> 00:11:47,600
uh so the the first uh

312
00:11:47,600 --> 00:11:51,279
the first uh paper is on um threshold

313
00:11:51,279 --> 00:11:54,320
smart signatures and uh

314
00:11:54,320 --> 00:11:56,320
from standard assumptions and the paper

315
00:11:56,320 --> 00:11:57,920
is by francoise

316
00:11:57,920 --> 00:11:59,920
joshua

317
00:11:59,920 --> 00:12:03,439
and valeria nicolas

318
00:12:08,240 --> 00:12:11,440
hi oh can you see my screen

319
00:12:11,440 --> 00:12:13,519
yes we see you

320
00:12:13,519 --> 00:12:15,839
awesome

321
00:12:16,880 --> 00:12:18,240
all right um

322
00:12:18,240 --> 00:12:19,920
thanks for the introduction i'm josh

323
00:12:19,920 --> 00:12:23,160
this is

324
00:12:24,240 --> 00:12:25,760
oh sorry yeah this is joint work with

325
00:12:25,760 --> 00:12:27,760
transfer tario payment hustle and

326
00:12:27,760 --> 00:12:30,880
valerian nikolenko

327
00:12:30,880 --> 00:12:32,000
all right

328
00:12:32,000 --> 00:12:33,040
so

329
00:12:33,040 --> 00:12:34,399
signature scheme is an elegant

330
00:12:34,399 --> 00:12:36,240
construction with security rooted in the

331
00:12:36,240 --> 00:12:38,480
hardness of the discrete log problem the

332
00:12:38,480 --> 00:12:40,560
idea is basically to sample the random

333
00:12:40,560 --> 00:12:41,920
nonce and then reveal a linear

334
00:12:41,920 --> 00:12:43,360
combination of the nonce in the secret

335
00:12:43,360 --> 00:12:44,560
key

336
00:12:44,560 --> 00:12:46,160
and this linear signing equation allows

337
00:12:46,160 --> 00:12:47,680
for a very simple threshold signing

338
00:12:47,680 --> 00:12:49,279
protocol

339
00:12:49,279 --> 00:12:50,880
however it's well known that nonsense

340
00:12:50,880 --> 00:12:53,279
must be sampled uniformly from zq and

341
00:12:53,279 --> 00:12:55,440
even a few bits of bias across multiple

342
00:12:55,440 --> 00:12:58,320
signatures can be catastrophic

343
00:12:58,320 --> 00:13:00,160
so this is a concern in practice because

344
00:13:00,160 --> 00:13:02,079
true randomness is a scarce resource

345
00:13:02,079 --> 00:13:03,760
ideally we'd like to de-randomize this

346
00:13:03,760 --> 00:13:05,600
non-generation so we have deterministic

347
00:13:05,600 --> 00:13:07,200
signing

348
00:13:07,200 --> 00:13:08,800
there's a simple cryptographic trick for

349
00:13:08,800 --> 00:13:11,440
this where you can simply sample a prfc

350
00:13:11,440 --> 00:13:13,200
the long side key generation and when

351
00:13:13,200 --> 00:13:14,880
the time comes to sign a message apply

352
00:13:14,880 --> 00:13:17,120
this prf on the message to be signed

353
00:13:17,120 --> 00:13:18,560
to drive the knobs

354
00:13:18,560 --> 00:13:20,240
unfortunately the same trick doesn't

355
00:13:20,240 --> 00:13:21,760
work directly in the threshold or

356
00:13:21,760 --> 00:13:23,360
multi-party setting this is already

357
00:13:23,360 --> 00:13:25,600
observed by maxwell at all it's due to

358
00:13:25,600 --> 00:13:28,160
attacks of the flavor that we encounter

359
00:13:28,160 --> 00:13:30,399
in the literature on resettable zero

360
00:13:30,399 --> 00:13:33,279
knowledge or npc

361
00:13:33,279 --> 00:13:35,600
alternatively we could use a prf in say

362
00:13:35,600 --> 00:13:38,000
counter mode and this would solve the

363
00:13:38,000 --> 00:13:39,279
problem for the threshold setting

364
00:13:39,279 --> 00:13:40,720
entirely

365
00:13:40,720 --> 00:13:42,800
but this introduces a new vulnerability

366
00:13:42,800 --> 00:13:44,560
because the counter should not be reused

367
00:13:44,560 --> 00:13:45,920
because that would be equivalent to not

368
00:13:45,920 --> 00:13:47,279
reuse

369
00:13:47,279 --> 00:13:49,839
so this problem which is termed state

370
00:13:49,839 --> 00:13:52,560
continuity by pano at all is known to be

371
00:13:52,560 --> 00:13:55,040
non-trivial to solve

372
00:13:55,040 --> 00:13:57,519
um in particular it could be that the

373
00:13:57,519 --> 00:13:59,360
state of the system is consistent in

374
00:13:59,360 --> 00:14:02,639
every detectable way but it's stale

375
00:14:02,639 --> 00:14:04,320
this could happen due to power supply

376
00:14:04,320 --> 00:14:06,880
introductions or virtual machines being

377
00:14:06,880 --> 00:14:09,440
loaded with old snapshots and

378
00:14:09,440 --> 00:14:11,360
restoration from

379
00:14:11,360 --> 00:14:14,320
backups in an unsafe way in general

380
00:14:14,320 --> 00:14:15,680
so we incorporate an additional

381
00:14:15,680 --> 00:14:17,360
statelessness requirement into our

382
00:14:17,360 --> 00:14:19,760
target

383
00:14:19,760 --> 00:14:21,680
shall we study what it could cost to

384
00:14:21,680 --> 00:14:23,120
address this problem at a protocol

385
00:14:23,120 --> 00:14:25,440
design level in particular we ask how we

386
00:14:25,440 --> 00:14:27,120
can design a threshold schnack protocol

387
00:14:27,120 --> 00:14:28,880
that enjoys stateless deterministic

388
00:14:28,880 --> 00:14:31,360
signing that is no party needs to access

389
00:14:31,360 --> 00:14:33,279
flash entropy or update state after an

390
00:14:33,279 --> 00:14:34,959
initial one-time distributed key

391
00:14:34,959 --> 00:14:36,480
generation

392
00:14:36,480 --> 00:14:38,160
so it's safe to distort devices with

393
00:14:38,160 --> 00:14:40,000
long-term secrets

394
00:14:40,000 --> 00:14:41,360
we develop new techniques for the

395
00:14:41,360 --> 00:14:43,040
dishonest majority setting for stateless

396
00:14:43,040 --> 00:14:45,360
deterministic signing

397
00:14:45,360 --> 00:14:47,199
while prioritizing standard assumptions

398
00:14:47,199 --> 00:14:49,120
and computational efficiency

399
00:14:49,120 --> 00:14:50,720
in particular we estimate that in the

400
00:14:50,720 --> 00:14:52,480
life conditions our two-party signing

401
00:14:52,480 --> 00:14:54,639
protocol even with a few parties um

402
00:14:54,639 --> 00:14:56,240
should be faster than the genetic

403
00:14:56,240 --> 00:14:58,000
systems level solution which is to use

404
00:14:58,000 --> 00:14:59,440
trusted hardware

405
00:14:59,440 --> 00:15:01,440
uh trusted hardware incidentally runs in

406
00:15:01,440 --> 00:15:02,639
the high tens or even hundreds of

407
00:15:02,639 --> 00:15:04,639
milliseconds

408
00:15:04,639 --> 00:15:06,399
so at a high level this problem is

409
00:15:06,399 --> 00:15:07,839
solved if we have a mechanism that

410
00:15:07,839 --> 00:15:10,000
enforces honest non-starvation in

411
00:15:10,000 --> 00:15:11,760
particular if you can commit to a seed

412
00:15:11,760 --> 00:15:13,279
and then prove that you're deriving your

413
00:15:13,279 --> 00:15:14,720
nonsense correctly

414
00:15:14,720 --> 00:15:17,360
or using this seed then uh this is easy

415
00:15:17,360 --> 00:15:19,519
to solve a recent work of naked all

416
00:15:19,519 --> 00:15:20,880
instantiated such a system with the

417
00:15:20,880 --> 00:15:23,199
custom prf and bulletproofs where proofs

418
00:15:23,199 --> 00:15:26,320
are compact but slow to generate in

419
00:15:26,320 --> 00:15:28,240
contrast we find that the zero knowledge

420
00:15:28,240 --> 00:15:30,160
from double circuits approach of java

421
00:15:30,160 --> 00:15:32,720
deck at all is a good fit for our task

422
00:15:32,720 --> 00:15:34,959
due to our priorities in particular we

423
00:15:34,959 --> 00:15:36,720
care about lightweight computation and

424
00:15:36,720 --> 00:15:38,160
gobbling boolean circuits is very

425
00:15:38,160 --> 00:15:40,320
efficient especially for standardized

426
00:15:40,320 --> 00:15:42,720
ciphers like aes which have relatively

427
00:15:42,720 --> 00:15:43,920
small

428
00:15:43,920 --> 00:15:46,160
boolean circuits and we like to match

429
00:15:46,160 --> 00:15:47,839
the down deficiency of schnod which can

430
00:15:47,839 --> 00:15:49,120
be achieved by the down compression

431
00:15:49,120 --> 00:15:51,920
technique of ganesha at all

432
00:15:51,920 --> 00:15:53,839
so integrating boolean circuit coupling

433
00:15:53,839 --> 00:15:55,519
with electric curve algebra is not

434
00:15:55,519 --> 00:15:57,279
trivial and there has been previous work

435
00:15:57,279 --> 00:15:58,880
by chase carnation rehearsal that

436
00:15:58,880 --> 00:16:00,959
explores this topic but applying their

437
00:16:00,959 --> 00:16:02,560
techniques to our settings results in

438
00:16:02,560 --> 00:16:04,079
bottlenecks so communication and

439
00:16:04,079 --> 00:16:05,839
computation that don't actually lie with

440
00:16:05,839 --> 00:16:07,360
the garbage circuit which is the

441
00:16:07,360 --> 00:16:09,199
fundamental secure computation object

442
00:16:09,199 --> 00:16:10,800
instead the committed oblivious

443
00:16:10,800 --> 00:16:12,880
transfers to encode the input and the

444
00:16:12,880 --> 00:16:14,800
boolean uh

445
00:16:14,800 --> 00:16:17,120
algebraic encoding translation is what

446
00:16:17,120 --> 00:16:19,120
incurs the dominant cost when applying

447
00:16:19,120 --> 00:16:20,480
these techniques

448
00:16:20,480 --> 00:16:22,320
so in this work we develop new

449
00:16:22,320 --> 00:16:24,320
techniques to push down these logistical

450
00:16:24,320 --> 00:16:25,839
costs so that the dominant cost is

451
00:16:25,839 --> 00:16:27,759
reduced to that of the garbage circuit

452
00:16:27,759 --> 00:16:29,519
of the prf which is quite efficient if

453
00:16:29,519 --> 00:16:31,360
you're using aes or something to derive

454
00:16:31,360 --> 00:16:33,199
analysis in particular we achieve a

455
00:16:33,199 --> 00:16:35,040
small constant number of exponentiations

456
00:16:35,040 --> 00:16:37,199
per proof in this context and the cost

457
00:16:37,199 --> 00:16:38,800
of translation from via labels to

458
00:16:38,800 --> 00:16:40,320
elliptic curve points is dwarfed by the

459
00:16:40,320 --> 00:16:43,199
double circuit itself

460
00:16:43,199 --> 00:16:45,279
so we can phrase one of the logistical

461
00:16:45,279 --> 00:16:47,440
tasks is that of gobbling a circuit c

462
00:16:47,440 --> 00:16:49,839
that's expressed as fee applied to f

463
00:16:49,839 --> 00:16:51,519
where phi takes in

464
00:16:51,519 --> 00:16:53,519
some bit string and maps it to an

465
00:16:53,519 --> 00:16:56,160
elliptic curve point z

466
00:16:56,160 --> 00:16:58,240
so correspondingly in the carboxy

467
00:16:58,240 --> 00:17:00,240
circuit form the

468
00:17:00,240 --> 00:17:01,920
wire labels encoding the bit string are

469
00:17:01,920 --> 00:17:04,480
translated to an encoding z tilde by the

470
00:17:04,480 --> 00:17:06,240
carbon circuit free tilde

471
00:17:06,240 --> 00:17:08,559
and concretely this encoding is of the

472
00:17:08,559 --> 00:17:12,079
form alpha z plus beta which is sound

473
00:17:12,079 --> 00:17:14,000
because alpha and beta serve as

474
00:17:14,000 --> 00:17:16,079
information theoretic mac keys and it's

475
00:17:16,079 --> 00:17:17,679
consumed conducive to zero knowledge

476
00:17:17,679 --> 00:17:19,119
because this encoding is perfectly

477
00:17:19,119 --> 00:17:21,839
simulatable

478
00:17:22,000 --> 00:17:23,280
the structure looks a lot like an

479
00:17:23,280 --> 00:17:24,880
oblivious linear evaluation and we're

480
00:17:24,880 --> 00:17:27,280
basically able to make use of gilboa's

481
00:17:27,280 --> 00:17:28,880
ole techniques to construct such a

482
00:17:28,880 --> 00:17:31,120
goblin gadget

483
00:17:31,120 --> 00:17:32,640
so in the longer talk you'll see how we

484
00:17:32,640 --> 00:17:34,160
construct committed ot from uc

485
00:17:34,160 --> 00:17:36,640
commitment and there's a hint um the

486
00:17:36,640 --> 00:17:39,039
receiver gets the setup chapter for one

487
00:17:39,039 --> 00:17:41,039
of two uc commitment instances and is

488
00:17:41,039 --> 00:17:42,559
able to run the straight line extractor

489
00:17:42,559 --> 00:17:44,480
in the real protocol to extract one of

490
00:17:44,480 --> 00:17:46,559
the two committed messages

491
00:17:46,559 --> 00:17:48,799
and then there's some intuition on where

492
00:17:48,799 --> 00:17:51,280
the problems are in this context some

493
00:17:51,280 --> 00:17:52,880
discussion on the different approaches

494
00:17:52,880 --> 00:17:54,799
and the high level idea of our technical

495
00:17:54,799 --> 00:17:57,440
ideas so high level view

496
00:17:57,440 --> 00:17:59,200
so thanks for your attention and our

497
00:17:59,200 --> 00:18:00,880
paper can be found on the implant and

498
00:18:00,880 --> 00:18:04,080
i'm happy to take questions now

499
00:18:05,760 --> 00:18:07,120
thank you so much

500
00:18:07,120 --> 00:18:09,439
um

501
00:18:09,600 --> 00:18:12,480
i guess um

502
00:18:12,960 --> 00:18:16,480
we no we don't have any so we should

503
00:18:16,480 --> 00:18:19,760
postpone all the questions to the q a we

504
00:18:19,760 --> 00:18:21,760
will be after all the

505
00:18:21,760 --> 00:18:23,600
all the talks of the sessions

506
00:18:23,600 --> 00:18:26,240
uh that's how uh this is supposed to be

507
00:18:26,240 --> 00:18:28,400
uh run so

508
00:18:28,400 --> 00:18:29,440
please

509
00:18:29,440 --> 00:18:32,480
continue posting on zulu and we'll move

510
00:18:32,480 --> 00:18:34,080
to the uh

511
00:18:34,080 --> 00:18:36,400
second second talk right now

512
00:18:36,400 --> 00:18:38,000
it's uh

513
00:18:38,000 --> 00:18:40,480
hanan killing alper and jeffrey birch

514
00:18:40,480 --> 00:18:43,280
burgess on two round trip schnorr

515
00:18:43,280 --> 00:18:46,160
multi-signatures

516
00:18:52,160 --> 00:18:54,880
hello do you see my script

517
00:18:54,880 --> 00:18:56,960
yes okay thank you

518
00:18:56,960 --> 00:18:59,200
hello everyone um today i'm going to

519
00:18:59,200 --> 00:19:01,440
present you our two round-trip

520
00:19:01,440 --> 00:19:04,000
shonar basement signature scheme

521
00:19:04,000 --> 00:19:07,120
a mult signature scheme is a

522
00:19:07,120 --> 00:19:08,960
signature scheme which allows multiple

523
00:19:08,960 --> 00:19:10,720
parties collaboratively to sign a

524
00:19:10,720 --> 00:19:14,160
message and it can be verified by anyone

525
00:19:14,160 --> 00:19:16,720
who has the public keys of the science

526
00:19:16,720 --> 00:19:18,720
and it consists of key generation

527
00:19:18,720 --> 00:19:21,360
algorithm for designers a signing

528
00:19:21,360 --> 00:19:23,360
algorithm which is an interactive

529
00:19:23,360 --> 00:19:25,039
algorithm between

530
00:19:25,039 --> 00:19:27,600
multiple signers which produces a

531
00:19:27,600 --> 00:19:28,799
signature

532
00:19:28,799 --> 00:19:29,600
and

533
00:19:29,600 --> 00:19:32,480
uh there exists a key aggregation

534
00:19:32,480 --> 00:19:34,240
algorithm which receives the public key

535
00:19:34,240 --> 00:19:36,960
of designers and outputs aggregated

536
00:19:36,960 --> 00:19:39,760
public key and a verification algorithm

537
00:19:39,760 --> 00:19:42,720
which verifies the signature with the

538
00:19:42,720 --> 00:19:45,520
aggregated public key

539
00:19:45,520 --> 00:19:48,480
in this paper we constructed two rounds

540
00:19:48,480 --> 00:19:50,960
uh schneider baseman's signature scheme

541
00:19:50,960 --> 00:19:53,600
that we call the wms

542
00:19:53,600 --> 00:19:56,320
and it's the signature scheme

543
00:19:56,320 --> 00:19:58,640
um it's the schnorr signature scheme

544
00:19:58,640 --> 00:20:00,080
which means that

545
00:20:00,080 --> 00:20:01,760
the signature

546
00:20:01,760 --> 00:20:04,080
form is the same as the signature

547
00:20:04,080 --> 00:20:06,400
signature and therefore the verification

548
00:20:06,400 --> 00:20:07,440
of the

549
00:20:07,440 --> 00:20:09,440
signature is the same as this no

550
00:20:09,440 --> 00:20:11,600
signature

551
00:20:11,600 --> 00:20:12,480
and

552
00:20:12,480 --> 00:20:14,240
we proved its security in the algebraic

553
00:20:14,240 --> 00:20:15,760
group model

554
00:20:15,760 --> 00:20:17,840
and also we defined a new computational

555
00:20:17,840 --> 00:20:20,400
heart problem that we call and wind

556
00:20:20,400 --> 00:20:23,360
sound problem and we show its hardness

557
00:20:23,360 --> 00:20:24,400
in the

558
00:20:24,400 --> 00:20:26,400
algebraic group model under the

559
00:20:26,400 --> 00:20:27,840
assumption that the strict logarithm

560
00:20:27,840 --> 00:20:30,000
problem is hard

561
00:20:30,000 --> 00:20:31,120
and

562
00:20:31,120 --> 00:20:35,039
we believe that this problem can help uh

563
00:20:35,039 --> 00:20:37,600
can help to the or

564
00:20:37,600 --> 00:20:40,960
it can be used to modify the

565
00:20:40,960 --> 00:20:44,240
um channel based blind signatures or

566
00:20:44,240 --> 00:20:46,720
snore based mod signature schemes which

567
00:20:46,720 --> 00:20:50,000
suffers from ksum attack

568
00:20:50,000 --> 00:20:53,039
okay here is our

569
00:20:53,039 --> 00:20:54,240
protocol

570
00:20:54,240 --> 00:20:55,919
the dealer and eyes witness smart

571
00:20:55,919 --> 00:20:58,640
signature in short pwms

572
00:20:58,640 --> 00:21:00,799
key generation process is the same as

573
00:21:00,799 --> 00:21:02,880
the schnorr signature scheme

574
00:21:02,880 --> 00:21:05,120
and i will explain the signing

575
00:21:05,120 --> 00:21:06,640
in the next slide

576
00:21:06,640 --> 00:21:09,440
and key aggregation works as follows it

577
00:21:09,440 --> 00:21:11,039
is the

578
00:21:11,039 --> 00:21:13,120
random winner combination of all public

579
00:21:13,120 --> 00:21:15,120
keys of designers

580
00:21:15,120 --> 00:21:19,280
and this random um

581
00:21:19,840 --> 00:21:21,600
random scholars design

582
00:21:21,600 --> 00:21:23,600
are necessary here because

583
00:21:23,600 --> 00:21:24,559
uh

584
00:21:24,559 --> 00:21:28,559
it is useful to prevent rocky attacks

585
00:21:28,559 --> 00:21:31,520
and actually this helps adversary to

586
00:21:31,520 --> 00:21:32,799
select its

587
00:21:32,799 --> 00:21:36,000
uh randomness or its key uh that depends

588
00:21:36,000 --> 00:21:39,360
on the unsparta's randomness therefore

589
00:21:39,360 --> 00:21:41,840
actually in our skin we inspire from

590
00:21:41,840 --> 00:21:43,600
this idea

591
00:21:43,600 --> 00:21:45,919
and the verification process works

592
00:21:45,919 --> 00:21:49,280
as additional signatures

593
00:21:49,280 --> 00:21:52,000
okay this is the signing process of our

594
00:21:52,000 --> 00:21:53,280
protocol

595
00:21:53,280 --> 00:21:55,440
in the first round

596
00:21:55,440 --> 00:21:57,919
each part selects and random elements

597
00:21:57,919 --> 00:22:00,480
from zp and we call these random

598
00:22:00,480 --> 00:22:03,039
elements as weaknesses

599
00:22:03,039 --> 00:22:04,559
and then they compute the

600
00:22:04,559 --> 00:22:07,679
pre-commitments which is the witness mod

601
00:22:07,679 --> 00:22:10,559
multiplied with the generator

602
00:22:10,559 --> 00:22:12,559
then they exchange all these

603
00:22:12,559 --> 00:22:15,280
pre-commitments with each other

604
00:22:15,280 --> 00:22:17,360
then uh second round begins in the

605
00:22:17,360 --> 00:22:19,760
second round uh each party generate the

606
00:22:19,760 --> 00:22:22,799
session id of the signage scheme

607
00:22:22,799 --> 00:22:25,520
and it consists of the public key of the

608
00:22:25,520 --> 00:22:27,200
signers

609
00:22:27,200 --> 00:22:28,480
the message

610
00:22:28,480 --> 00:22:31,039
and all pre-commitments of all

611
00:22:31,039 --> 00:22:31,840
uh

612
00:22:31,840 --> 00:22:33,280
signers

613
00:22:33,280 --> 00:22:36,240
then they compute uh commitment of the

614
00:22:36,240 --> 00:22:38,559
schnoor signature and as you can see it

615
00:22:38,559 --> 00:22:41,120
is the random linear combination of all

616
00:22:41,120 --> 00:22:43,919
pre-commitments and this

617
00:22:43,919 --> 00:22:45,039
random

618
00:22:45,039 --> 00:22:47,440
uh coefficients comes from the random

619
00:22:47,440 --> 00:22:50,400
oracle h1 which uh receives the input of

620
00:22:50,400 --> 00:22:51,600
all

621
00:22:51,600 --> 00:22:54,720
uh preconditions of other parties and we

622
00:22:54,720 --> 00:22:56,240
call this process as

623
00:22:56,240 --> 00:22:59,200
delinearization

624
00:23:00,320 --> 00:23:02,799
okay after the commitment generation

625
00:23:02,799 --> 00:23:03,760
um

626
00:23:03,760 --> 00:23:05,840
it is similar to the

627
00:23:05,840 --> 00:23:06,880
um

628
00:23:06,880 --> 00:23:08,240
missionary

629
00:23:08,240 --> 00:23:10,240
they generate the c value which is the

630
00:23:10,240 --> 00:23:12,559
hash of the message the aggregated

631
00:23:12,559 --> 00:23:14,400
public key and the

632
00:23:14,400 --> 00:23:15,679
commitment

633
00:23:15,679 --> 00:23:18,640
then they generate the partial signature

634
00:23:18,640 --> 00:23:20,640
which is the sum of

635
00:23:20,640 --> 00:23:23,039
the generalized weaknesses plus

636
00:23:23,039 --> 00:23:26,559
secret key multiplier with c

637
00:23:26,559 --> 00:23:29,360
and in the end they exchange all partial

638
00:23:29,360 --> 00:23:31,280
signatures with each other

639
00:23:31,280 --> 00:23:34,320
and obtains the signature which consists

640
00:23:34,320 --> 00:23:36,559
of c and s value

641
00:23:36,559 --> 00:23:39,120
and here s is sum of all partial

642
00:23:39,120 --> 00:23:40,960
signatures

643
00:23:40,960 --> 00:23:43,120
so the question here is that

644
00:23:43,120 --> 00:23:45,600
what this m parameter should be

645
00:23:45,600 --> 00:23:47,279
and this um

646
00:23:47,279 --> 00:23:49,600
the answer comes from the our new

647
00:23:49,600 --> 00:23:50,559
problem

648
00:23:50,559 --> 00:23:51,760
that we call

649
00:23:51,760 --> 00:23:54,320
and find some problem

650
00:23:54,320 --> 00:23:57,120
and first of all um i want to tell you a

651
00:23:57,120 --> 00:23:59,279
few words what how we came up with this

652
00:23:59,279 --> 00:24:00,159
problem

653
00:24:00,159 --> 00:24:01,120
uh we

654
00:24:01,120 --> 00:24:03,200
after constructing our protocol we

655
00:24:03,200 --> 00:24:06,159
wanted to attack our protocol and we saw

656
00:24:06,159 --> 00:24:07,120
that

657
00:24:07,120 --> 00:24:07,990
if um

658
00:24:07,990 --> 00:24:09,360
[Music]

659
00:24:09,360 --> 00:24:11,120
and if

660
00:24:11,120 --> 00:24:12,960
this problem is not hard actually there

661
00:24:12,960 --> 00:24:14,799
exists an attack the adversary can

662
00:24:14,799 --> 00:24:16,799
generate a forgery

663
00:24:16,799 --> 00:24:19,120
and this problem uh

664
00:24:19,120 --> 00:24:20,799
works as follows

665
00:24:20,799 --> 00:24:23,039
for first of all the changes generates

666
00:24:23,039 --> 00:24:25,039
the group structure

667
00:24:25,039 --> 00:24:26,080
and then

668
00:24:26,080 --> 00:24:28,879
it generates

669
00:24:29,360 --> 00:24:32,480
sorry it generates q challenges where

670
00:24:32,480 --> 00:24:34,480
each challenge consists of random group

671
00:24:34,480 --> 00:24:36,640
elements and then sends all of them to

672
00:24:36,640 --> 00:24:38,880
the adversary the adversary has access

673
00:24:38,880 --> 00:24:40,880
to random miracles

674
00:24:40,880 --> 00:24:43,919
which maps to the step key

675
00:24:43,919 --> 00:24:46,480
and in the end the adversary outputs

676
00:24:46,480 --> 00:24:48,960
some elements from zp

677
00:24:48,960 --> 00:24:52,480
and some elements from an ordinary set

678
00:24:52,480 --> 00:24:54,080
and if the output of the adversary

679
00:24:54,080 --> 00:24:55,279
satisfies

680
00:24:55,279 --> 00:24:59,120
this equality then the adversary means

681
00:24:59,120 --> 00:25:00,960
and here

682
00:25:00,960 --> 00:25:04,159
the important thing here is that the

683
00:25:04,159 --> 00:25:06,640
same linear relationship

684
00:25:06,640 --> 00:25:09,840
happening here should be also satisfied

685
00:25:09,840 --> 00:25:11,919
here also and this

686
00:25:11,919 --> 00:25:14,000
in our relationship happening here is in

687
00:25:14,000 --> 00:25:17,279
that b and this is the same

688
00:25:17,279 --> 00:25:19,919
linear relationship happening here is in

689
00:25:19,919 --> 00:25:20,799
g

690
00:25:20,799 --> 00:25:24,000
in group g so therefore we call our

691
00:25:24,000 --> 00:25:26,320
problem as intermittent

692
00:25:26,320 --> 00:25:28,880
and we show that this problem is hard as

693
00:25:28,880 --> 00:25:31,120
long as time is greater than one

694
00:25:31,120 --> 00:25:33,039
under the assumption that this

695
00:25:33,039 --> 00:25:35,600
logarithmic problem start

696
00:25:35,600 --> 00:25:37,279
and we show it in the algebraic group

697
00:25:37,279 --> 00:25:39,360
model

698
00:25:39,360 --> 00:25:41,440
and but this shows us that in our

699
00:25:41,440 --> 00:25:43,919
protocol and mass bit is true

700
00:25:43,919 --> 00:25:46,159
and in the paper we show one attack when

701
00:25:46,159 --> 00:25:47,919
m close to one it's an interesting

702
00:25:47,919 --> 00:25:49,840
question you can check the paper for

703
00:25:49,840 --> 00:25:52,080
that

704
00:25:52,080 --> 00:25:55,360
and finally we prove the secret of our

705
00:25:55,360 --> 00:25:58,640
protocol dwms and we

706
00:25:58,640 --> 00:26:00,880
prove its security in agm and in grand

707
00:26:00,880 --> 00:26:03,279
market model assuming that one more

708
00:26:03,279 --> 00:26:05,840
dislocation problem is hard and to

709
00:26:05,840 --> 00:26:08,880
entwine some problem inside

710
00:26:08,880 --> 00:26:11,600
so in this paper what we did is we

711
00:26:11,600 --> 00:26:14,880
constructed dwms it's an efficient

712
00:26:14,880 --> 00:26:16,720
two range number based model signature

713
00:26:16,720 --> 00:26:18,159
scheme

714
00:26:18,159 --> 00:26:19,520
and also

715
00:26:19,520 --> 00:26:21,840
we introduced a new problem that we call

716
00:26:21,840 --> 00:26:25,840
a mn2i sum problem and as a future work

717
00:26:25,840 --> 00:26:27,760
it i think it's interesting to see

718
00:26:27,760 --> 00:26:29,919
hardness of our new problem in the

719
00:26:29,919 --> 00:26:31,600
standard model

720
00:26:31,600 --> 00:26:33,840
and also security of our protocol in

721
00:26:33,840 --> 00:26:35,600
standard mode

722
00:26:35,600 --> 00:26:36,840
thank

723
00:26:36,840 --> 00:26:40,400
you well thank you so much

724
00:26:40,400 --> 00:26:42,559
so uh thank you thank you very much

725
00:26:42,559 --> 00:26:43,520
hunter

726
00:26:43,520 --> 00:26:46,720
we move to the next talk is

727
00:26:46,720 --> 00:26:49,919
also multi signatures um

728
00:26:49,919 --> 00:26:53,200
music ii by uh jonas nick tim ruffing

729
00:26:53,200 --> 00:26:56,480
and janik sterling

730
00:27:00,240 --> 00:27:03,039
and we are running slightly behind so

731
00:27:03,039 --> 00:27:05,200
i'm sorry but

732
00:27:05,200 --> 00:27:06,799
can you see my slides

733
00:27:06,799 --> 00:27:10,879
yes we are okay great um

734
00:27:11,520 --> 00:27:12,400
okay

735
00:27:12,400 --> 00:27:13,279
um

736
00:27:13,279 --> 00:27:14,480
so my name is

737
00:27:14,480 --> 00:27:16,480
this is a talk about music too simple

738
00:27:16,480 --> 00:27:18,399
two rounds no multi-signatures this is

739
00:27:18,399 --> 00:27:19,760
trying to work with my colleague jonas

740
00:27:19,760 --> 00:27:21,440
nick at blockstream who's also here

741
00:27:21,440 --> 00:27:24,000
currently and with janik sarah from an

742
00:27:24,000 --> 00:27:26,720
ssi in france since the

743
00:27:26,720 --> 00:27:28,399
scheme that i'm going to present is very

744
00:27:28,399 --> 00:27:30,480
similar than the scheme like like the

745
00:27:30,480 --> 00:27:33,120
scheme you've seen on the previous talk

746
00:27:33,120 --> 00:27:34,960
the goal of my talk of my short talk

747
00:27:34,960 --> 00:27:36,399
here is mostly to focus on the

748
00:27:36,399 --> 00:27:38,399
motivation for our work

749
00:27:38,399 --> 00:27:40,000
and

750
00:27:40,000 --> 00:27:42,399
if you have more

751
00:27:42,399 --> 00:27:43,919
interest in our work please see the

752
00:27:43,919 --> 00:27:45,520
longer talk or the

753
00:27:45,520 --> 00:27:46,880
paper

754
00:27:46,880 --> 00:27:49,520
so the motivation for uh or work on

755
00:27:49,520 --> 00:27:50,960
multi-signatures is really

756
00:27:50,960 --> 00:27:53,279
multi-signatures in bitcoin and

757
00:27:53,279 --> 00:27:54,960
cryptocurrencies because you can use

758
00:27:54,960 --> 00:27:57,520
them to organize shared ownership of

759
00:27:57,520 --> 00:27:59,600
coins and this is very useful for

760
00:27:59,600 --> 00:28:03,039
example just as a as in secure storage

761
00:28:03,039 --> 00:28:04,559
if you split your key

762
00:28:04,559 --> 00:28:06,559
uh and put it on multiple devices of

763
00:28:06,559 --> 00:28:08,000
course you naturally achieve a higher

764
00:28:08,000 --> 00:28:11,200
level of security but also um these

765
00:28:11,200 --> 00:28:13,200
so-called multi-sig policies are very

766
00:28:13,200 --> 00:28:16,559
useful in bitcoin to construct um

767
00:28:16,559 --> 00:28:18,880
advanced signing policies and basically

768
00:28:18,880 --> 00:28:20,880
any protocol you can build on top of

769
00:28:20,880 --> 00:28:23,600
bitcoin for example lightning network

770
00:28:23,600 --> 00:28:25,360
which is a payment network

771
00:28:25,360 --> 00:28:27,360
um can make use of efficient

772
00:28:27,360 --> 00:28:29,120
multi-signatures

773
00:28:29,120 --> 00:28:31,039
so this is really the motivation for our

774
00:28:31,039 --> 00:28:33,520
work and in a sense the historical

775
00:28:33,520 --> 00:28:36,080
context of our work is that bitcoin will

776
00:28:36,080 --> 00:28:38,240
soon support snow signatures really on

777
00:28:38,240 --> 00:28:40,880
the protocol level and the corresponding

778
00:28:40,880 --> 00:28:44,159
uh bitcoin improvement proposal 340

779
00:28:44,159 --> 00:28:46,159
has been activated or has been locked in

780
00:28:46,159 --> 00:28:48,640
sorry for activation in november as part

781
00:28:48,640 --> 00:28:51,600
of the taproot soft fork and the main

782
00:28:51,600 --> 00:28:54,399
reasons to prefer uh schnorr signatures

783
00:28:54,399 --> 00:28:57,679
over ecdsa are provable security okay a

784
00:28:57,679 --> 00:28:59,360
little bit of efficiency but really the

785
00:28:59,360 --> 00:29:01,360
the main thing i think is that they

786
00:29:01,360 --> 00:29:03,360
allow easier constructions of advanced

787
00:29:03,360 --> 00:29:04,720
signing protocols for example

788
00:29:04,720 --> 00:29:07,279
multi-signatures

789
00:29:07,279 --> 00:29:09,760
and the vision here is that basically in

790
00:29:09,760 --> 00:29:12,080
the in the base layer in bitcoin we have

791
00:29:12,080 --> 00:29:14,000
just show signature verification which

792
00:29:14,000 --> 00:29:15,360
means that the nodes on the bitcoin

793
00:29:15,360 --> 00:29:17,600
network will understand how to

794
00:29:17,600 --> 00:29:20,640
uh parse and process and verify in in

795
00:29:20,640 --> 00:29:23,520
the end uh simple schnaw signatures and

796
00:29:23,520 --> 00:29:25,520
this simple thing in the on-chain

797
00:29:25,520 --> 00:29:28,159
consensus flower layer now enables us to

798
00:29:28,159 --> 00:29:31,120
deploy more complex um protocols in

799
00:29:31,120 --> 00:29:32,720
off-chain manner for example users now

800
00:29:32,720 --> 00:29:34,320
can get together and run a

801
00:29:34,320 --> 00:29:37,200
multi-signature protocol

802
00:29:37,200 --> 00:29:38,640
and as long as this multi-signature

803
00:29:38,640 --> 00:29:40,640
protocol outputs ordinary signatures

804
00:29:40,640 --> 00:29:42,640
it's compatible with the on-chain layer

805
00:29:42,640 --> 00:29:43,919
and we can do the same for other

806
00:29:43,919 --> 00:29:45,840
protocols for example threshold six as

807
00:29:45,840 --> 00:29:47,120
we've seen in the

808
00:29:47,120 --> 00:29:49,120
first talk in this session or you might

809
00:29:49,120 --> 00:29:50,080
think of

810
00:29:50,080 --> 00:29:52,320
blind signatures

811
00:29:52,320 --> 00:29:54,559
and other advanced signing protocols and

812
00:29:54,559 --> 00:29:57,120
this is a nice design because first of

813
00:29:57,120 --> 00:29:59,600
all this on-chain consensus layer uh

814
00:29:59,600 --> 00:30:01,679
it's kept very simple and this is the

815
00:30:01,679 --> 00:30:03,039
thing that's very hard to change in

816
00:30:03,039 --> 00:30:05,279
bitcoin because it's a consensus so you

817
00:30:05,279 --> 00:30:06,960
only need to change it once and can run

818
00:30:06,960 --> 00:30:08,480
a lot of protocols

819
00:30:08,480 --> 00:30:10,240
and because the only thing that ends up

820
00:30:10,240 --> 00:30:12,159
on chain is a simple uh schnorr public

821
00:30:12,159 --> 00:30:13,760
key and a simple schnorr signature per

822
00:30:13,760 --> 00:30:15,760
transaction and this is also good for

823
00:30:15,760 --> 00:30:17,360
privacy because just by looking at the

824
00:30:17,360 --> 00:30:19,279
chain you can't see that maybe in

825
00:30:19,279 --> 00:30:20,960
multi-signature protocol or threshold

826
00:30:20,960 --> 00:30:22,640
signature protocols going on in the

827
00:30:22,640 --> 00:30:23,919
background

828
00:30:23,919 --> 00:30:26,240
and last but not least because again

829
00:30:26,240 --> 00:30:27,840
everything that ends up on chain is the

830
00:30:27,840 --> 00:30:30,640
snow public key and the schnorr

831
00:30:30,640 --> 00:30:31,919
signature

832
00:30:31,919 --> 00:30:34,480
everything is very efficient and compact

833
00:30:34,480 --> 00:30:36,480
and to make that vision true what we

834
00:30:36,480 --> 00:30:38,399
need is multi signatures that look

835
00:30:38,399 --> 00:30:39,679
exactly like all the navigational

836
00:30:39,679 --> 00:30:41,679
signatures and if you have a closer look

837
00:30:41,679 --> 00:30:43,200
at this this has two parts the first

838
00:30:43,200 --> 00:30:45,760
part is that the signature itself should

839
00:30:45,760 --> 00:30:47,840
be an ordinary signature just that it's

840
00:30:47,840 --> 00:30:49,440
obtained via an interactive protocol

841
00:30:49,440 --> 00:30:50,960
between n parties

842
00:30:50,960 --> 00:30:51,840
and

843
00:30:51,840 --> 00:30:54,159
for the public key we even go one step

844
00:30:54,159 --> 00:30:55,279
further here we don't have an

845
00:30:55,279 --> 00:30:57,279
interactive protocol but

846
00:30:57,279 --> 00:30:59,200
what we want is a non-interactive public

847
00:30:59,200 --> 00:31:00,640
algorithm

848
00:31:00,640 --> 00:31:02,159
that everybody in the world can use

849
00:31:02,159 --> 00:31:04,000
given

850
00:31:04,000 --> 00:31:08,240
n public keys of the individual signers

851
00:31:08,240 --> 00:31:10,240
everybody can compute the aggregate

852
00:31:10,240 --> 00:31:11,360
public key

853
00:31:11,360 --> 00:31:12,880
that combines

854
00:31:12,880 --> 00:31:16,000
all these public keys of the enzymes

855
00:31:16,000 --> 00:31:16,799
and

856
00:31:16,799 --> 00:31:18,640
our protocol that achieves these

857
00:31:18,640 --> 00:31:20,399
properties is called music two and

858
00:31:20,399 --> 00:31:23,360
please don't pass this slide um in fact

859
00:31:23,360 --> 00:31:25,200
the protocol is as i said very similar

860
00:31:25,200 --> 00:31:26,399
as the protocol you've seen in the

861
00:31:26,399 --> 00:31:28,640
previous talk uh maybe ours is a little

862
00:31:28,640 --> 00:31:30,720
bit more efficient because you save one

863
00:31:30,720 --> 00:31:33,200
uh exponentiation here or there

864
00:31:33,200 --> 00:31:34,799
by the end the goal of this slide is

865
00:31:34,799 --> 00:31:37,039
just to show you that the protocol is is

866
00:31:37,039 --> 00:31:39,360
very simple there's not much going on we

867
00:31:39,360 --> 00:31:41,720
send a few group elements around a few

868
00:31:41,720 --> 00:31:44,399
exponentiations uh three hash function

869
00:31:44,399 --> 00:31:46,000
applications

870
00:31:46,000 --> 00:31:47,840
but in the end it's a it's a very simple

871
00:31:47,840 --> 00:31:49,760
two-round protocol

872
00:31:49,760 --> 00:31:51,279
yeah

873
00:31:51,279 --> 00:31:54,480
so to to sum up uh our work is music2

874
00:31:54,480 --> 00:31:56,799
music2 is a multi-signature scheme where

875
00:31:56,799 --> 00:31:58,480
signatures look like ordinary schnaw

876
00:31:58,480 --> 00:32:00,240
signatures this is great because they're

877
00:32:00,240 --> 00:32:01,919
compact and they enable fast

878
00:32:01,919 --> 00:32:03,760
verification

879
00:32:03,760 --> 00:32:05,600
it's a very practical and simple two

880
00:32:05,600 --> 00:32:07,279
round signing protocol in particular

881
00:32:07,279 --> 00:32:10,159
it's a two round where essentially all

882
00:32:10,159 --> 00:32:11,519
previous

883
00:32:11,519 --> 00:32:13,279
schemes that are exactly compatible to

884
00:32:13,279 --> 00:32:16,000
schnover three-round schemes

885
00:32:16,000 --> 00:32:18,000
uh one distinguishing feature that also

886
00:32:18,000 --> 00:32:20,559
distinguishes it from the protocol scene

887
00:32:20,559 --> 00:32:22,240
and the previous talk is that in our

888
00:32:22,240 --> 00:32:24,000
protocol we proved we proved that you

889
00:32:24,000 --> 00:32:26,000
can pre-compute the first round without

890
00:32:26,000 --> 00:32:28,159
knowing the message that is you can you

891
00:32:28,159 --> 00:32:29,919
can already do the first round and then

892
00:32:29,919 --> 00:32:32,640
only if when a message to sign arrives

893
00:32:32,640 --> 00:32:34,159
um you do the second round which

894
00:32:34,159 --> 00:32:36,159
basically makes the protocol then

895
00:32:36,159 --> 00:32:37,760
non-interactive in a sense and this is

896
00:32:37,760 --> 00:32:39,600
really a novelty in the discrete

897
00:32:39,600 --> 00:32:42,799
logarithm setting without pairings

898
00:32:42,799 --> 00:32:45,600
um and we proved the protocol secure

899
00:32:45,600 --> 00:32:47,440
under concurrent sessions under a weaker

900
00:32:47,440 --> 00:32:49,919
review of one more discrete logarithm so

901
00:32:49,919 --> 00:32:51,039
if you're interested in this weaker

902
00:32:51,039 --> 00:32:52,159
review and please have a look at the

903
00:32:52,159 --> 00:32:53,840
paper we think it's interesting on its

904
00:32:53,840 --> 00:32:56,320
own and we actually provide two proofs

905
00:32:56,320 --> 00:32:58,799
the first is in the rom plus agm this is

906
00:32:58,799 --> 00:33:00,799
very similar to the to the previous talk

907
00:33:00,799 --> 00:33:02,480
again

908
00:33:02,480 --> 00:33:04,240
and so we confirmed their result they

909
00:33:04,240 --> 00:33:06,000
confirm our resultant a little bit and

910
00:33:06,000 --> 00:33:07,600
by the way there's even a third paper

911
00:33:07,600 --> 00:33:10,080
that confirms the same main technique in

912
00:33:10,080 --> 00:33:11,840
a threshold setting if you're interested

913
00:33:11,840 --> 00:33:14,559
see the frost paper by uh chelsea comlow

914
00:33:14,559 --> 00:33:16,159
and ian goldberg

915
00:33:16,159 --> 00:33:18,799
and also we provide a second top and

916
00:33:18,799 --> 00:33:20,399
sorry second proof in just a random

917
00:33:20,399 --> 00:33:22,399
oracle model without the agm here the

918
00:33:22,399 --> 00:33:23,840
scheme is a little bit less efficient

919
00:33:23,840 --> 00:33:26,799
but it's still very simple and practical

920
00:33:26,799 --> 00:33:29,279
thanks for your attention

921
00:33:29,279 --> 00:33:32,240
thank you so much thanks so much tim and

922
00:33:32,240 --> 00:33:33,919
um

923
00:33:33,919 --> 00:33:36,480
again the questions uh in

924
00:33:36,480 --> 00:33:38,640
five minutes after the last talk of the

925
00:33:38,640 --> 00:33:42,480
session and now uh leo rotten and

926
00:33:42,480 --> 00:33:43,600
[Music]

927
00:33:43,600 --> 00:33:45,120
gil sergef

928
00:33:45,120 --> 00:33:48,320
uh on uh tighter security for schnoor

929
00:33:48,320 --> 00:33:50,960
uh identification and high moment

930
00:33:50,960 --> 00:33:53,840
 lemma

931
00:33:54,720 --> 00:33:56,640
thank you so um

932
00:33:56,640 --> 00:33:58,480
i'm your and i will talk about how to

933
00:33:58,480 --> 00:34:00,720
get either security for identification

934
00:34:00,720 --> 00:34:02,880
and signature schemes and we are a new

935
00:34:02,880 --> 00:34:04,880
high movement working lemma and do joint

936
00:34:04,880 --> 00:34:06,880
work with killside

937
00:34:06,880 --> 00:34:07,679
so

938
00:34:07,679 --> 00:34:09,599
schnorr id and signature scheme were

939
00:34:09,599 --> 00:34:12,000
published back in 91 and they are simple

940
00:34:12,000 --> 00:34:14,079
and efficient yet allow extensions to

941
00:34:14,079 --> 00:34:15,679
primitives like multi-signatures

942
00:34:15,679 --> 00:34:18,239
threshold signatures and ring signatures

943
00:34:18,239 --> 00:34:20,000
and all of this makes them an appealing

944
00:34:20,000 --> 00:34:22,239
choice and they are in wide use nowadays

945
00:34:22,239 --> 00:34:24,399
uh photographic protocols and messaging

946
00:34:24,399 --> 00:34:26,639
applications and as we heard in the

947
00:34:26,639 --> 00:34:29,440
previous slide in the previous talk in

948
00:34:29,440 --> 00:34:32,239
blockchains and cryptocurrencies

949
00:34:32,239 --> 00:34:34,639
now as for the security of

950
00:34:34,639 --> 00:34:36,560
schnauer's id and signature schemes it's

951
00:34:36,560 --> 00:34:38,399
typically proven via reduction into the

952
00:34:38,399 --> 00:34:40,399
discrete logarithm problem

953
00:34:40,399 --> 00:34:41,839
so the reduction takes in an

954
00:34:41,839 --> 00:34:43,918
impersonator taking the schnorr's id

955
00:34:43,918 --> 00:34:46,239
scheme of forger attacking the schnorr

956
00:34:46,239 --> 00:34:47,599
signature scheme

957
00:34:47,599 --> 00:34:49,520
and transforms them into a discrete log

958
00:34:49,520 --> 00:34:50,960
algorithm

959
00:34:50,960 --> 00:34:53,199
the issue with all these reductions is

960
00:34:53,199 --> 00:34:55,280
that even though the best known attacks

961
00:34:55,280 --> 00:34:57,599
that we have against the issuer id and

962
00:34:57,599 --> 00:34:59,920
signature schemes are based on the this

963
00:34:59,920 --> 00:35:01,520
quick law computation

964
00:35:01,520 --> 00:35:03,520
the discrete log algorithm that we get

965
00:35:03,520 --> 00:35:06,240
from the reduction performs not as well

966
00:35:06,240 --> 00:35:08,000
as the impersonator or forger that you

967
00:35:08,000 --> 00:35:09,920
start off with so the reductions are

968
00:35:09,920 --> 00:35:12,480
non-typed in other words

969
00:35:12,480 --> 00:35:14,320
and you know that this is not a mere

970
00:35:14,320 --> 00:35:16,800
theoretical issue but it has practical

971
00:35:16,800 --> 00:35:18,720
implications so when you set the

972
00:35:18,720 --> 00:35:20,960
parameters of your scheme and in

973
00:35:20,960 --> 00:35:22,400
particular the group size you have to

974
00:35:22,400 --> 00:35:24,720
choose between a larger group which

975
00:35:24,720 --> 00:35:26,640
means the greater deficiency

976
00:35:26,640 --> 00:35:28,240
of a smaller group which means in this

977
00:35:28,240 --> 00:35:31,040
case the greatest probable security

978
00:35:31,040 --> 00:35:33,520
so in more detail uh

979
00:35:33,520 --> 00:35:35,040
see all of the reductions in the

980
00:35:35,040 --> 00:35:37,920
standard model to the discrete logarithm

981
00:35:37,920 --> 00:35:40,480
problem follow some variant of the

982
00:35:40,480 --> 00:35:42,640
forking dilemma introduced by poncho

983
00:35:42,640 --> 00:35:44,240
valence style and then later generalized

984
00:35:44,240 --> 00:35:46,240
by belarus

985
00:35:46,240 --> 00:35:48,960
and all of these reductions suffer from

986
00:35:48,960 --> 00:35:51,200
what can be called the square root loss

987
00:35:51,200 --> 00:35:53,520
seemingly inherently so what do we mean

988
00:35:53,520 --> 00:35:54,640
by that

989
00:35:54,640 --> 00:35:57,359
so for example in schwarzenegger scheme

990
00:35:57,359 --> 00:35:59,040
one variant of the forking glamour due

991
00:35:59,040 --> 00:36:01,760
to beloved 11 takes an impersonator that

992
00:36:01,760 --> 00:36:04,320
runs in time t and has advantage up done

993
00:36:04,320 --> 00:36:06,560
in breaking the security of the scheme

994
00:36:06,560 --> 00:36:09,119
and transforms it into a d-log algorithm

995
00:36:09,119 --> 00:36:11,599
that runs in roughly the same time but

996
00:36:11,599 --> 00:36:13,839
has success probability which is epsilon

997
00:36:13,839 --> 00:36:16,400
squared so this is potentially much less

998
00:36:16,400 --> 00:36:18,480
than the success probability of epsilon

999
00:36:18,480 --> 00:36:20,560
that we can hope for

1000
00:36:20,560 --> 00:36:22,400
so what does this tell us about the

1001
00:36:22,400 --> 00:36:24,640
security of the schnozad scheme

1002
00:36:24,640 --> 00:36:26,720
so in the generic group model

1003
00:36:26,720 --> 00:36:29,359
already proved that the

1004
00:36:29,359 --> 00:36:31,520
success probability of the log algorithm

1005
00:36:31,520 --> 00:36:32,960
epsilon prime

1006
00:36:32,960 --> 00:36:35,040
is bounded by its running time t prime

1007
00:36:35,040 --> 00:36:36,800
squared over p where p is the size of

1008
00:36:36,800 --> 00:36:38,000
the group

1009
00:36:38,000 --> 00:36:39,920
so if we work in a group in which we

1010
00:36:39,920 --> 00:36:42,160
assume this bound hold like in some

1011
00:36:42,160 --> 00:36:44,960
elliptic curve groups this implies that

1012
00:36:44,960 --> 00:36:46,240
the advantage epsilon of the

1013
00:36:46,240 --> 00:36:48,880
impersonator is bounded by something

1014
00:36:48,880 --> 00:36:52,000
like the square root of t squared over b

1015
00:36:52,000 --> 00:36:53,520
and now that this is potentially much

1016
00:36:53,520 --> 00:36:55,599
greater than the bound that we can hope

1017
00:36:55,599 --> 00:36:56,560
for

1018
00:36:56,560 --> 00:36:58,560
via this crypto computation

1019
00:36:58,560 --> 00:37:00,400
uh which is the best known attack and

1020
00:37:00,400 --> 00:37:02,160
this bound is t squared over p so

1021
00:37:02,160 --> 00:37:04,000
there's a square root loss between

1022
00:37:04,000 --> 00:37:07,200
probable security that we get and the uh

1023
00:37:07,200 --> 00:37:08,960
bound that we can hope for

1024
00:37:08,960 --> 00:37:11,599
and the similar issue arises in short

1025
00:37:11,599 --> 00:37:13,599
signatures so we hear

1026
00:37:13,599 --> 00:37:15,920
the success probability of the d-log

1027
00:37:15,920 --> 00:37:17,760
algorithm that we get is epsilon squared

1028
00:37:17,760 --> 00:37:20,720
over qh where qh is the number of random

1029
00:37:20,720 --> 00:37:23,599
oracle queries issued by the forger

1030
00:37:23,599 --> 00:37:26,000
and we also pay for this qh

1031
00:37:26,000 --> 00:37:28,320
in the uh security that we get for small

1032
00:37:28,320 --> 00:37:29,920
signatures so the button we get is the

1033
00:37:29,920 --> 00:37:32,400
square root of qh times t squared over p

1034
00:37:32,400 --> 00:37:34,400
which is even greater than the button

1035
00:37:34,400 --> 00:37:36,480
then the bound that we can hope for of

1036
00:37:36,480 --> 00:37:39,440
that t squared over p

1037
00:37:39,440 --> 00:37:42,480
so this is a square root loss that

1038
00:37:42,480 --> 00:37:44,560
reductions to the d log problem in the

1039
00:37:44,560 --> 00:37:47,359
standard model encounter

1040
00:37:47,359 --> 00:37:48,800
and it should be mentioned that there

1041
00:37:48,800 --> 00:37:51,040
are other approaches for improving the

1042
00:37:51,040 --> 00:37:52,960
security of schwarzenegger and signature

1043
00:37:52,960 --> 00:37:55,040
schemes that don't go through a standard

1044
00:37:55,040 --> 00:37:56,480
model reduction into the detailed

1045
00:37:56,480 --> 00:37:57,520
problem

1046
00:37:57,520 --> 00:38:00,800
so in idealized models there are

1047
00:38:00,800 --> 00:38:02,560
tight security proofs both in the

1048
00:38:02,560 --> 00:38:04,720
generic group model and the algebraic

1049
00:38:04,720 --> 00:38:06,000
model

1050
00:38:06,000 --> 00:38:07,760
but the drawback of this

1051
00:38:07,760 --> 00:38:09,520
approach of course is that

1052
00:38:09,520 --> 00:38:11,440
both the general group model and the

1053
00:38:11,440 --> 00:38:13,280
algebraic group model

1054
00:38:13,280 --> 00:38:15,680
considerably restrict the class of

1055
00:38:15,680 --> 00:38:19,440
adversaries that are under consideration

1056
00:38:19,440 --> 00:38:21,440
in the standard mode

1057
00:38:21,440 --> 00:38:24,880
they recently approved the time fraction

1058
00:38:24,880 --> 00:38:26,800
but not to the discrete logarithm

1059
00:38:26,800 --> 00:38:28,800
problem but rather to a new problem

1060
00:38:28,800 --> 00:38:30,960
which they introduced called the

1061
00:38:30,960 --> 00:38:33,280
multi-base discrete logarithmic problem

1062
00:38:33,280 --> 00:38:35,680
and so it's inside but

1063
00:38:35,680 --> 00:38:37,119
the drawback of this approach of course

1064
00:38:37,119 --> 00:38:38,880
is that it doesn't consider the

1065
00:38:38,880 --> 00:38:41,520
well-studied discrete logarithm problem

1066
00:38:41,520 --> 00:38:44,079
but rather a newly introduced

1067
00:38:44,079 --> 00:38:46,240
interactive problem

1068
00:38:46,240 --> 00:38:48,480
so this leaves open the question of can

1069
00:38:48,480 --> 00:38:50,079
the square would barrier this that we

1070
00:38:50,079 --> 00:38:53,119
described before be circumvented based

1071
00:38:53,119 --> 00:38:55,839
solely on the hardness of the wells that

1072
00:38:55,839 --> 00:38:59,760
d-log problem in the standard model

1073
00:38:59,760 --> 00:39:01,040
so

1074
00:39:01,040 --> 00:39:03,119
what we do in this work is we answer

1075
00:39:03,119 --> 00:39:05,119
this question in the affirmative by

1076
00:39:05,119 --> 00:39:07,359
providing tighter security bounds for

1077
00:39:07,359 --> 00:39:08,640
both schnorr

1078
00:39:08,640 --> 00:39:10,800
schnorr's id and signature schemes based

1079
00:39:10,800 --> 00:39:12,400
solely on the hardness of the dilop

1080
00:39:12,400 --> 00:39:15,119
problem in the standard model

1081
00:39:15,119 --> 00:39:15,839
so

1082
00:39:15,839 --> 00:39:17,599
at first what we do is we refine the

1083
00:39:17,599 --> 00:39:19,839
assumed hardness of the d-log problem in

1084
00:39:19,839 --> 00:39:22,960
the standard model by inspecting its

1085
00:39:22,960 --> 00:39:25,359
generic hardness so to speak and

1086
00:39:25,359 --> 00:39:28,079
pinpointing one key aspect of it and

1087
00:39:28,079 --> 00:39:30,000
then distilling from it the standard

1088
00:39:30,000 --> 00:39:31,839
model assumption

1089
00:39:31,839 --> 00:39:34,800
this is a high level uh description

1090
00:39:34,800 --> 00:39:36,560
then we complement this assumption with

1091
00:39:36,560 --> 00:39:38,720
a new proof technique which generalizes

1092
00:39:38,720 --> 00:39:40,640
the forking glimmer

1093
00:39:40,640 --> 00:39:43,200
of javelin

1094
00:39:43,680 --> 00:39:46,320
and then we use both the uh refined

1095
00:39:46,320 --> 00:39:47,920
assumption and the new proof technique

1096
00:39:47,920 --> 00:39:49,440
in order to derive either bounds for

1097
00:39:49,440 --> 00:39:52,160
schwarzenegger schemes so functional

1098
00:39:52,160 --> 00:39:54,160
like this game uh we prove the bound of

1099
00:39:54,160 --> 00:39:55,920
t squared over p raised to the power of

1100
00:39:55,920 --> 00:39:58,960
two-thirds which improves upon uh the

1101
00:39:58,960 --> 00:40:00,960
previous bound of two of t squared over

1102
00:40:00,960 --> 00:40:02,960
p raised to the power of one half

1103
00:40:02,960 --> 00:40:04,720
and we get a similar about functional

1104
00:40:04,720 --> 00:40:07,040
signatures uh with the multiplicative

1105
00:40:07,040 --> 00:40:08,839
factor of qh raised to the power of two

1106
00:40:08,839 --> 00:40:11,040
thirds and this also improves upon the

1107
00:40:11,040 --> 00:40:12,480
previously known bound in a similar

1108
00:40:12,480 --> 00:40:14,079
manner

1109
00:40:14,079 --> 00:40:16,079
and finally i should mention that our

1110
00:40:16,079 --> 00:40:18,720
approach and techniques apply not only

1111
00:40:18,720 --> 00:40:21,920
to schnorr's idnc better schemes but in

1112
00:40:21,920 --> 00:40:24,800
fact to any dns signature scheme uh that

1113
00:40:24,800 --> 00:40:26,319
is obtained from a stick protocol in a

1114
00:40:26,319 --> 00:40:28,880
natural linear and the prime example is

1115
00:40:28,880 --> 00:40:32,160
the the okamoto idnc method scheme

1116
00:40:32,160 --> 00:40:33,440
so i'll conclude with just putting the

1117
00:40:33,440 --> 00:40:35,520
results in perspective

1118
00:40:35,520 --> 00:40:37,200
so our result is the first to break the

1119
00:40:37,200 --> 00:40:38,720
square wood barrier that we described

1120
00:40:38,720 --> 00:40:40,400
before when proving the security of

1121
00:40:40,400 --> 00:40:42,400
schwarzenegger signature schemes based

1122
00:40:42,400 --> 00:40:44,240
solely on the hardness of the d-log

1123
00:40:44,240 --> 00:40:46,240
problem in the standard product so

1124
00:40:46,240 --> 00:40:48,720
previous results either encountered the

1125
00:40:48,720 --> 00:40:50,640
square wood barrier

1126
00:40:50,640 --> 00:40:51,359
or

1127
00:40:51,359 --> 00:40:53,760
provide a tight bounds but either in

1128
00:40:53,760 --> 00:40:56,000
idealized model or based on a new

1129
00:40:56,000 --> 00:40:57,520
assumption rather than the d-log

1130
00:40:57,520 --> 00:40:58,880
assumption

1131
00:40:58,880 --> 00:41:00,880
uh so this is just to put things in

1132
00:41:00,880 --> 00:41:02,960
perspective these are again our

1133
00:41:02,960 --> 00:41:05,200
contributions and with that i will

1134
00:41:05,200 --> 00:41:08,879
conclude thank you for listening

1135
00:41:09,760 --> 00:41:11,680
thank you thank you so much

1136
00:41:11,680 --> 00:41:12,480
um

1137
00:41:12,480 --> 00:41:14,000
thank you so much leo

1138
00:41:14,000 --> 00:41:15,599
uh

1139
00:41:15,599 --> 00:41:19,440
so we move to questions and and answers

1140
00:41:19,440 --> 00:41:21,839
um

1141
00:41:22,240 --> 00:41:24,960
i have to confess them a little lost in

1142
00:41:24,960 --> 00:41:26,560
which questions that were asked there

1143
00:41:26,560 --> 00:41:30,960
two threads uh were remain unanswered

1144
00:41:30,960 --> 00:41:32,839
and which are

1145
00:41:32,839 --> 00:41:36,319
um are still outstanding

1146
00:41:36,319 --> 00:41:37,760
um

1147
00:41:37,760 --> 00:41:40,800
uh somebody asked uh deidre asked about

1148
00:41:40,800 --> 00:41:44,079
uh relevance to frost uh

1149
00:41:44,079 --> 00:41:44,800
uh

1150
00:41:44,800 --> 00:41:46,880
based threshold signature that was the

1151
00:41:46,880 --> 00:41:50,079
question to the first talk

1152
00:41:54,800 --> 00:41:57,520
is this still

1153
00:41:58,319 --> 00:42:02,279
did you guys answer this

1154
00:42:02,880 --> 00:42:04,079
uh

1155
00:42:04,079 --> 00:42:05,680
yes i

1156
00:42:05,680 --> 00:42:07,200
think so i'm sorry which question is

1157
00:42:07,200 --> 00:42:07,920
this

1158
00:42:07,920 --> 00:42:09,839
oh well um

1159
00:42:09,839 --> 00:42:12,720
asked whether uh what what's what's the

1160
00:42:12,720 --> 00:42:14,640
impact of your uh that administration

1161
00:42:14,640 --> 00:42:17,119
deterministic

1162
00:42:17,119 --> 00:42:18,720
threshold on

1163
00:42:18,720 --> 00:42:21,759
the frost scheme

1164
00:42:23,040 --> 00:42:25,759
oh um

1165
00:42:26,640 --> 00:42:28,640
i'm sorry maybe that was

1166
00:42:28,640 --> 00:42:30,960
for the second and third talks because

1167
00:42:30,960 --> 00:42:32,720
uh i think frost is comparable to the

1168
00:42:32,720 --> 00:42:34,240
two round

1169
00:42:34,240 --> 00:42:36,640
schemes

1170
00:42:36,880 --> 00:42:39,760
uh i think foster's another yeah

1171
00:42:39,760 --> 00:42:42,240
so it's not the threshold

1172
00:42:42,240 --> 00:42:43,359
okay

1173
00:42:43,359 --> 00:42:45,200
i'm not familiar with frost so i don't

1174
00:42:45,200 --> 00:42:47,040
know the question makes sense that this

1175
00:42:47,040 --> 00:42:48,560
is a threshold signature and not a

1176
00:42:48,560 --> 00:42:49,920
multi-state

1177
00:42:49,920 --> 00:42:52,160
okay maybe it can be all right

1178
00:42:52,160 --> 00:42:54,560
i could try to to give an answer maybe

1179
00:42:54,560 --> 00:42:55,440
um

1180
00:42:55,440 --> 00:42:56,480
thank you

1181
00:42:56,480 --> 00:42:58,800
for me i guess for both the second and

1182
00:42:58,800 --> 00:43:00,319
the and the third talk so both the

1183
00:43:00,319 --> 00:43:01,680
second and the third talk present

1184
00:43:01,680 --> 00:43:03,040
schemes that are really uh in the

1185
00:43:03,040 --> 00:43:05,760
multi-signature setting which means so

1186
00:43:05,760 --> 00:43:09,680
in contrast to threshold signatures

1187
00:43:09,680 --> 00:43:11,280
that means you really have an n of n

1188
00:43:11,280 --> 00:43:13,280
signature where all n sinus needs to be

1189
00:43:13,280 --> 00:43:14,400
present and

1190
00:43:14,400 --> 00:43:16,240
whereas in threshold signatures you only

1191
00:43:16,240 --> 00:43:18,079
need

1192
00:43:18,079 --> 00:43:20,480
some subset t of and sinus to be present

1193
00:43:20,480 --> 00:43:22,319
and frost is the also the paper that i

1194
00:43:22,319 --> 00:43:24,640
mentioned in in my talk that

1195
00:43:24,640 --> 00:43:26,960
takes the main same idea of how to

1196
00:43:26,960 --> 00:43:29,680
construct a um two-round scheme that has

1197
00:43:29,680 --> 00:43:32,800
been uh used in the second and the third

1198
00:43:32,800 --> 00:43:35,119
uh talk here and transfers it to the

1199
00:43:35,119 --> 00:43:37,280
threshold setting and uses it to build a

1200
00:43:37,280 --> 00:43:39,119
threshold scheme again with some some

1201
00:43:39,119 --> 00:43:40,240
different trade-offs different

1202
00:43:40,240 --> 00:43:42,319
optimizations and different

1203
00:43:42,319 --> 00:43:44,319
um results on in terms of provable

1204
00:43:44,319 --> 00:43:46,000
security i'd say

1205
00:43:46,000 --> 00:43:47,119
um

1206
00:43:47,119 --> 00:43:50,400
so basically it frost is the same um

1207
00:43:50,400 --> 00:43:52,720
same idea in the threshold setting um it

1208
00:43:52,720 --> 00:43:55,920
makes a little bit sense to to um

1209
00:43:55,920 --> 00:43:57,920
distinguish the settings because if you

1210
00:43:57,920 --> 00:44:00,000
focus on multi-signatures only you can

1211
00:44:00,000 --> 00:44:01,520
do some tricks which you can't do in a

1212
00:44:01,520 --> 00:44:04,000
threshold setting um for example having

1213
00:44:04,000 --> 00:44:04,880
this

1214
00:44:04,880 --> 00:44:05,920
um

1215
00:44:05,920 --> 00:44:09,760
having this non-interactive um

1216
00:44:10,240 --> 00:44:12,400
public key algorithm or public key

1217
00:44:12,400 --> 00:44:13,680
aggregation algorithm where you just

1218
00:44:13,680 --> 00:44:16,000
have everybody can take a

1219
00:44:16,000 --> 00:44:18,079
number of n keys and aggregate them in a

1220
00:44:18,079 --> 00:44:20,240
non-interactive way without help of the

1221
00:44:20,240 --> 00:44:22,000
actual assigners involved this is

1222
00:44:22,000 --> 00:44:23,359
something at least that for small

1223
00:44:23,359 --> 00:44:24,720
signatures you can do only in the

1224
00:44:24,720 --> 00:44:26,880
multi-sig setting so it makes sense to

1225
00:44:26,880 --> 00:44:28,560
have a have specialized scheme for

1226
00:44:28,560 --> 00:44:29,760
multi-sig

1227
00:44:29,760 --> 00:44:34,040
or for the multi-signature setting

1228
00:44:36,160 --> 00:44:37,119
okay

1229
00:44:37,119 --> 00:44:37,500
um

1230
00:44:37,500 --> 00:44:39,440
[Music]

1231
00:44:39,440 --> 00:44:40,400
thank you

1232
00:44:40,400 --> 00:44:42,720
um

1233
00:44:48,000 --> 00:44:50,960
rohan is asking whether the

1234
00:44:50,960 --> 00:44:53,680
schnauer signatures can be implemented

1235
00:44:53,680 --> 00:44:54,400
for

1236
00:44:54,400 --> 00:44:56,079
its ethereum

1237
00:44:56,079 --> 00:44:58,480
ethereum protocol

1238
00:44:58,480 --> 00:44:59,520
um

1239
00:44:59,520 --> 00:45:01,440
that sounds like

1240
00:45:01,440 --> 00:45:03,520
implementation

1241
00:45:03,520 --> 00:45:06,560
uh issue so i don't know if

1242
00:45:06,560 --> 00:45:08,160
somebody has a

1243
00:45:08,160 --> 00:45:10,799
take on it

1244
00:45:17,200 --> 00:45:20,240
well yeah i think i think ethereum

1245
00:45:20,240 --> 00:45:21,440
plans to

1246
00:45:21,440 --> 00:45:24,160
use schneider signatures in future

1247
00:45:24,160 --> 00:45:27,119
probably yeah therefore it can be used i

1248
00:45:27,119 --> 00:45:29,440
believe

1249
00:45:29,440 --> 00:45:32,440
um

1250
00:45:33,440 --> 00:45:38,640
uh maybe a follow-up uh question to uh

1251
00:45:38,640 --> 00:45:40,960
um

1252
00:45:41,040 --> 00:45:42,880
to um

1253
00:45:42,880 --> 00:45:45,840
to tim um or or

1254
00:45:45,840 --> 00:45:48,800
[Music]

1255
00:45:48,800 --> 00:45:50,640
so the multi signatures is that the

1256
00:45:50,640 --> 00:45:52,240
group is fixed

1257
00:45:52,240 --> 00:45:54,480
right at the beginning of the protocol

1258
00:45:54,480 --> 00:45:56,240
it's a two round protocol so you you

1259
00:45:56,240 --> 00:45:58,720
have to know the group and the

1260
00:45:58,720 --> 00:46:01,280
threshold is

1261
00:46:01,280 --> 00:46:03,520
that

1262
00:46:04,079 --> 00:46:05,680
only

1263
00:46:05,680 --> 00:46:07,280
so potentially

1264
00:46:07,280 --> 00:46:09,119
not everybody has to participate and

1265
00:46:09,119 --> 00:46:12,640
still the signature is generated

1266
00:46:12,640 --> 00:46:15,520
uh so is threshold in a in a sense like

1267
00:46:15,520 --> 00:46:18,000
strictly better

1268
00:46:18,000 --> 00:46:18,960
um

1269
00:46:18,960 --> 00:46:20,400
interest

1270
00:46:20,400 --> 00:46:21,920
the main difference from threshold

1271
00:46:21,920 --> 00:46:24,079
signatures from signature schemes is

1272
00:46:24,079 --> 00:46:24,960
that

1273
00:46:24,960 --> 00:46:27,760
um in my signature there is no threshold

1274
00:46:27,760 --> 00:46:30,079
so even one party can generate a

1275
00:46:30,079 --> 00:46:32,560
signature but in threshold signature

1276
00:46:32,560 --> 00:46:35,599
certain number of parties should

1277
00:46:35,599 --> 00:46:39,599
be available to obtain a valid signature

1278
00:46:39,599 --> 00:46:40,560
so

1279
00:46:40,560 --> 00:46:43,040
this is the difference mainly right and

1280
00:46:43,040 --> 00:46:45,760
and also setup sorry uh right like you

1281
00:46:45,760 --> 00:46:47,760
you you don't have setup in multi

1282
00:46:47,760 --> 00:46:49,520
signatures right so everybody generates

1283
00:46:49,520 --> 00:46:51,119
their key separately

1284
00:46:51,119 --> 00:46:52,240
right i mean

1285
00:46:52,240 --> 00:46:54,079
that's at least that's what i meant in

1286
00:46:54,079 --> 00:46:56,480
my reply to my last question that this

1287
00:46:56,480 --> 00:46:58,640
is a for example one example of a thing

1288
00:46:58,640 --> 00:47:00,160
that you can't do in a threshold scheme

1289
00:47:00,160 --> 00:47:02,400
at least not not in original setting so

1290
00:47:02,400 --> 00:47:03,839
that's why i think threshold is not

1291
00:47:03,839 --> 00:47:06,319
strictly better

1292
00:47:06,319 --> 00:47:09,319
um

1293
00:47:12,319 --> 00:47:15,119
i have a question to uh people on the

1294
00:47:15,119 --> 00:47:16,960
first the first talk

1295
00:47:16,960 --> 00:47:18,240
uh

1296
00:47:18,240 --> 00:47:19,920
uh so just fund

1297
00:47:19,920 --> 00:47:21,359
uh

1298
00:47:21,359 --> 00:47:24,559
it's uh so you you using these uh

1299
00:47:24,559 --> 00:47:26,400
methods that uh

1300
00:47:26,400 --> 00:47:28,400
give us zero knowledge proof uh through

1301
00:47:28,400 --> 00:47:30,960
garbed circles

1302
00:47:30,960 --> 00:47:32,800
uh

1303
00:47:32,800 --> 00:47:35,280
the party who is garbling the aes in

1304
00:47:35,280 --> 00:47:36,640
this right because there is a

1305
00:47:36,640 --> 00:47:38,880
combination first is an aes

1306
00:47:38,880 --> 00:47:41,200
and then exponentiation

1307
00:47:41,200 --> 00:47:43,599
and you have to prove that

1308
00:47:43,599 --> 00:47:45,119
you performed a yes and the

1309
00:47:45,119 --> 00:47:47,359
exponentiation on on top of of the

1310
00:47:47,359 --> 00:47:49,280
result right

1311
00:47:49,280 --> 00:47:50,960
so

1312
00:47:50,960 --> 00:47:53,839
is the garbler of that aes circuit does

1313
00:47:53,839 --> 00:47:56,000
he have to prove that

1314
00:47:56,000 --> 00:47:59,520
that the aes garbling is uh garber

1315
00:47:59,520 --> 00:48:02,480
circuit is performed correctly

1316
00:48:02,480 --> 00:48:06,559
or somehow you avoid this

1317
00:48:06,559 --> 00:48:08,319
this step because

1318
00:48:08,319 --> 00:48:12,319
it's not an inexpensive step is it

1319
00:48:12,319 --> 00:48:14,559
yeah so this is like a nice check from

1320
00:48:14,559 --> 00:48:16,480
the zero knowledge from copper circuits

1321
00:48:16,480 --> 00:48:19,280
of paper of yellow cash formula

1322
00:48:19,280 --> 00:48:22,000
the gobbler is the verifier and

1323
00:48:22,000 --> 00:48:24,480
the verifier has no private input so

1324
00:48:24,480 --> 00:48:27,359
after the prover whose evaluator is done

1325
00:48:27,359 --> 00:48:29,839
evaluating the circuit um

1326
00:48:29,839 --> 00:48:31,920
he can let's say commit to his output

1327
00:48:31,920 --> 00:48:34,880
another verifier opens the randomness

1328
00:48:34,880 --> 00:48:36,640
that he used for the coupling

1329
00:48:36,640 --> 00:48:38,160
so the prover just checks that the

1330
00:48:38,160 --> 00:48:39,920
verifier created the double circuit

1331
00:48:39,920 --> 00:48:41,040
honestly because there are no private

1332
00:48:41,040 --> 00:48:43,440
inputs to the garbage circuit

1333
00:48:43,440 --> 00:48:45,680
oh the garbage party is not the one with

1334
00:48:45,680 --> 00:48:48,319
the key

1335
00:48:48,319 --> 00:48:49,760
the evaluating part is the one with the

1336
00:48:49,760 --> 00:48:51,040
key

1337
00:48:51,040 --> 00:48:52,319
ah

1338
00:48:52,319 --> 00:48:55,599
okay and the role of the alpha beta it

1339
00:48:55,599 --> 00:49:00,400
like it sounded like a mac right so

1340
00:49:00,480 --> 00:49:02,640
that's also used in the proof of

1341
00:49:02,640 --> 00:49:04,400
correctness

1342
00:49:04,400 --> 00:49:06,640
yeah exactly so the idea is that you

1343
00:49:06,640 --> 00:49:08,160
should be unable to forge a garbage

1344
00:49:08,160 --> 00:49:10,640
output so if you're able to produce a

1345
00:49:10,640 --> 00:49:13,599
garbage output that can that decodes to

1346
00:49:13,599 --> 00:49:15,280
the claimed uh

1347
00:49:15,280 --> 00:49:17,760
nonce the claimed value then

1348
00:49:17,760 --> 00:49:19,760
that means that you evaluated the copper

1349
00:49:19,760 --> 00:49:22,880
circuit with the correct input

1350
00:49:26,640 --> 00:49:30,118
well um

1351
00:49:30,720 --> 00:49:32,960
if i'm missing some questions that is

1352
00:49:32,960 --> 00:49:34,079
posted

1353
00:49:34,079 --> 00:49:36,559
and still unanswered

1354
00:49:36,559 --> 00:49:39,040
could the author

1355
00:49:39,040 --> 00:49:41,760
just speak up

1356
00:49:41,760 --> 00:49:44,640
i see one question in zoom

1357
00:49:44,640 --> 00:49:46,800
chat

1358
00:49:46,800 --> 00:49:49,200
and find some problem related to the

1359
00:49:49,200 --> 00:49:51,040
classical cayley's problem and ros

1360
00:49:51,040 --> 00:49:52,240
problem

1361
00:49:52,240 --> 00:49:53,040
um

1362
00:49:53,040 --> 00:49:54,880
so

1363
00:49:54,880 --> 00:49:57,520
actually so as a reminder or for the

1364
00:49:57,520 --> 00:49:59,119
people who doesn't know what scale is

1365
00:49:59,119 --> 00:50:01,359
from okay some problem is that

1366
00:50:01,359 --> 00:50:03,839
in case our problem there are uh some

1367
00:50:03,839 --> 00:50:06,240
number of lists and which are filled

1368
00:50:06,240 --> 00:50:09,040
with some random number and the

1369
00:50:09,040 --> 00:50:11,359
adversary should find the

1370
00:50:11,359 --> 00:50:14,160
uh finds some elements from each list

1371
00:50:14,160 --> 00:50:16,800
where the sum of the all elements are

1372
00:50:16,800 --> 00:50:19,040
equal to uh zero

1373
00:50:19,040 --> 00:50:22,000
and it is it is it's not unheard of it's

1374
00:50:22,000 --> 00:50:24,960
just me but um

1375
00:50:24,960 --> 00:50:27,839
broke off right

1376
00:50:28,960 --> 00:50:33,359
do you hear me it's just you stash

1377
00:50:34,559 --> 00:50:35,920
do you hear me

1378
00:50:35,920 --> 00:50:37,760
i hear you and

1379
00:50:37,760 --> 00:50:41,440
okay i think maybe stash broke off okay

1380
00:50:41,440 --> 00:50:43,920
and so it is this case some problem is

1381
00:50:43,920 --> 00:50:46,079
not uh is not hard problem it can be

1382
00:50:46,079 --> 00:50:47,760
solved efficiently

1383
00:50:47,760 --> 00:50:50,079
but uh the difference from uh this

1384
00:50:50,079 --> 00:50:52,240
problem uh

1385
00:50:52,240 --> 00:50:54,160
uh the difference between our problem

1386
00:50:54,160 --> 00:50:56,960
and uh k sum problem is that our problem

1387
00:50:56,960 --> 00:51:00,240
is hard and we can show it is hard uh

1388
00:51:00,240 --> 00:51:01,920
under the assumption of this logarithm

1389
00:51:01,920 --> 00:51:04,480
problem sorry but when the parameter m

1390
00:51:04,480 --> 00:51:05,920
equals to one

1391
00:51:05,920 --> 00:51:08,319
uh i believe that it can be reduced to

1392
00:51:08,319 --> 00:51:10,319
okay some problem

1393
00:51:10,319 --> 00:51:12,559
because the attack that we did to our

1394
00:51:12,559 --> 00:51:16,400
protocol basically uh uses the attack

1395
00:51:16,400 --> 00:51:17,200
uh

1396
00:51:17,200 --> 00:51:19,599
basically uses the solution of

1397
00:51:19,599 --> 00:51:22,000
uh algorithm to solve the k sum problem

1398
00:51:22,000 --> 00:51:24,240
therefore i think i our problem can be

1399
00:51:24,240 --> 00:51:26,880
reduced to decay some problem when uh

1400
00:51:26,880 --> 00:51:28,319
amicus one

1401
00:51:28,319 --> 00:51:29,599
yes

1402
00:51:29,599 --> 00:51:32,000
that's all

1403
00:51:33,280 --> 00:51:35,599
thank you honda

1404
00:51:35,599 --> 00:51:37,839
um

1405
00:51:38,000 --> 00:51:39,760
i wanted to ask uh

1406
00:51:39,760 --> 00:51:41,280
leor

1407
00:51:41,280 --> 00:51:44,160
you you mentioned that you have um

1408
00:51:44,160 --> 00:51:46,240
that you said in the paper you discussed

1409
00:51:46,240 --> 00:51:49,839
also uh generalization of this approach

1410
00:51:49,839 --> 00:51:51,520
with the

1411
00:51:51,520 --> 00:51:53,440
second moment

1412
00:51:53,440 --> 00:51:55,119
um

1413
00:51:55,119 --> 00:51:57,599
so i mean

1414
00:51:57,599 --> 00:52:00,079
is it that if you consider uh

1415
00:52:00,079 --> 00:52:02,000
assumptions on the

1416
00:52:02,000 --> 00:52:02,839
higher

1417
00:52:02,839 --> 00:52:05,839
moments does this um

1418
00:52:05,839 --> 00:52:08,960
do you get closer and closer to the um

1419
00:52:08,960 --> 00:52:11,680
to the optimal

1420
00:52:11,680 --> 00:52:13,920
to the optimal bound

1421
00:52:13,920 --> 00:52:17,280
no so instead of the um

1422
00:52:17,280 --> 00:52:19,599
you know if you consider so our

1423
00:52:19,599 --> 00:52:21,200
assumption roughly speaking means it

1424
00:52:21,200 --> 00:52:23,440
says that the

1425
00:52:23,440 --> 00:52:27,280
advantage of any discrete log algorithm

1426
00:52:27,280 --> 00:52:28,960
in computing discrete loss or data

1427
00:52:28,960 --> 00:52:31,119
successful ability is dominated by the

1428
00:52:31,119 --> 00:52:32,960
second moment of this algorithm's

1429
00:52:32,960 --> 00:52:34,800
running time

1430
00:52:34,800 --> 00:52:37,040
so so this isn't the case

1431
00:52:37,040 --> 00:52:38,240
for

1432
00:52:38,240 --> 00:52:40,800
this in the generic group

1433
00:52:40,800 --> 00:52:43,359
so this is

1434
00:52:43,440 --> 00:52:45,040
seems like a reasonable assumption for

1435
00:52:45,040 --> 00:52:47,599
the discrete log problem

1436
00:52:47,599 --> 00:52:49,520
but you could

1437
00:52:49,520 --> 00:52:50,850
you know assume

1438
00:52:50,850 --> 00:52:52,319
[Music]

1439
00:52:52,319 --> 00:52:53,920
weaker assumptions

1440
00:52:53,920 --> 00:52:55,119
either

1441
00:52:55,119 --> 00:52:57,160
specifically for discrete log

1442
00:52:57,160 --> 00:52:58,640
[Music]

1443
00:52:58,640 --> 00:53:00,640
computation that consider higher moments

1444
00:53:00,640 --> 00:53:02,960
of this algorithm's running time and

1445
00:53:02,960 --> 00:53:04,079
then you know you get a weaker

1446
00:53:04,079 --> 00:53:06,800
assumption uh but you pour it in the

1447
00:53:06,800 --> 00:53:08,720
security balance that you get so even if

1448
00:53:08,720 --> 00:53:10,720
you consider

1449
00:53:10,720 --> 00:53:13,520
that it's dominated by higher moments

1450
00:53:13,520 --> 00:53:15,119
you get

1451
00:53:15,119 --> 00:53:16,640
closer and closer not to the optimal

1452
00:53:16,640 --> 00:53:20,720
bound but to a square wood mount

1453
00:53:20,720 --> 00:53:22,480
but

1454
00:53:22,480 --> 00:53:24,319
one benefit of this generalization is

1455
00:53:24,319 --> 00:53:26,240
that it can maybe be applied to other

1456
00:53:26,240 --> 00:53:27,680
problems not necessarily the discrete

1457
00:53:27,680 --> 00:53:29,599
logarithm problem right so if you have

1458
00:53:29,599 --> 00:53:32,160
um an id scheme or a signature scheme

1459
00:53:32,160 --> 00:53:34,720
that is obtained from a sigma protocol

1460
00:53:34,720 --> 00:53:37,359
for a different relation

1461
00:53:37,359 --> 00:53:39,920
and also the discrete log relation

1462
00:53:39,920 --> 00:53:42,960
then you can use maybe different

1463
00:53:42,960 --> 00:53:44,720
assumptions in order to get better

1464
00:53:44,720 --> 00:53:46,960
bounds than you know the straightforward

1465
00:53:46,960 --> 00:53:48,160
forking

1466
00:53:48,160 --> 00:53:51,440
lemma rewinding bounds

1467
00:53:54,839 --> 00:53:57,920
okay um

1468
00:53:59,599 --> 00:54:02,000
thank you uh great

1469
00:54:02,000 --> 00:54:04,319
um

1470
00:54:04,800 --> 00:54:06,640
is um

1471
00:54:06,640 --> 00:54:08,160
are there any other questions or shall

1472
00:54:08,160 --> 00:54:12,799
we shall we break for for a quick break

1473
00:54:22,839 --> 00:54:29,720
okay so we will reconvene um

