1
00:00:01,839 --> 00:00:04,480
hello everyone i'm lisa i'm a researcher

2
00:00:04,480 --> 00:00:07,040
in the cwi corporation group and i'm

3
00:00:07,040 --> 00:00:08,639
very happy to present the word glock

4
00:00:08,639 --> 00:00:10,800
complexity of pseudonym functions in ac

5
00:00:10,800 --> 00:00:13,280
01.2 this is joint work with my

6
00:00:13,280 --> 00:00:17,040
wonderful co-authors illed

7
00:00:20,480 --> 00:00:22,880
so let's start at the beginning recall

8
00:00:22,880 --> 00:00:24,960
that a pseudo-random function is a keyed

9
00:00:24,960 --> 00:00:26,880
function that looks like a truly random

10
00:00:26,880 --> 00:00:28,240
function

11
00:00:28,240 --> 00:00:30,320
the difference of a victorian function

12
00:00:30,320 --> 00:00:33,360
is that we require security only to hold

13
00:00:33,360 --> 00:00:35,680
for random inputs instead of chosen

14
00:00:35,680 --> 00:00:38,079
inputs

15
00:00:38,160 --> 00:00:40,719
and the security notion we consider here

16
00:00:40,719 --> 00:00:43,760
is sub-exponential security so

17
00:00:43,760 --> 00:00:46,320
security against circuits of

18
00:00:46,320 --> 00:00:48,559
sub-exponential signs that have one over

19
00:00:48,559 --> 00:00:51,440
sub-exponential advantage

20
00:00:51,440 --> 00:00:54,000
and why is that why is that the security

21
00:00:54,000 --> 00:00:56,559
notion we aim for um well

22
00:00:56,559 --> 00:00:59,280
for quasi polynomial security you get a

23
00:00:59,280 --> 00:01:01,680
completely different landscape as you

24
00:01:01,680 --> 00:01:03,840
will also see on a later slide and

25
00:01:03,840 --> 00:01:06,000
exponential security is often just too

26
00:01:06,000 --> 00:01:06,880
hard

27
00:01:06,880 --> 00:01:09,119
um further step exponential security is

28
00:01:09,119 --> 00:01:10,720
also what you

29
00:01:10,720 --> 00:01:12,479
kind of what you get from standard

30
00:01:12,479 --> 00:01:14,240
assumption such as

31
00:01:14,240 --> 00:01:16,400
discrete log factoring learning with

32
00:01:16,400 --> 00:01:18,799
errors

33
00:01:20,159 --> 00:01:21,840
weak pseudonym functions have many

34
00:01:21,840 --> 00:01:24,320
applications for example

35
00:01:24,320 --> 00:01:26,479
towards secure communication where the

36
00:01:26,479 --> 00:01:29,439
parties after one-time setup can use the

37
00:01:29,439 --> 00:01:31,439
pseudorandom function evaluated on

38
00:01:31,439 --> 00:01:35,040
random inputs as a one-time pad

39
00:01:35,040 --> 00:01:37,119
weak pseudorandom functions can also be

40
00:01:37,119 --> 00:01:40,960
used as identification where a party can

41
00:01:40,960 --> 00:01:43,600
show knowledge of the shared key by

42
00:01:43,600 --> 00:01:47,199
replying to random challenges

43
00:01:48,399 --> 00:01:50,479
the question we reconsider in this work

44
00:01:50,479 --> 00:01:52,399
is what is the lowest complexity class

45
00:01:52,399 --> 00:01:54,320
we can hope to construct big pseudonym

46
00:01:54,320 --> 00:01:55,759
functions

47
00:01:55,759 --> 00:01:57,840
this question is at the intersection of

48
00:01:57,840 --> 00:01:59,920
many interesting areas

49
00:01:59,920 --> 00:02:03,280
first if you can have a big prf in a low

50
00:02:03,280 --> 00:02:05,119
complexity class it typically gives you

51
00:02:05,119 --> 00:02:07,439
efficient symmetric key primitives for

52
00:02:07,439 --> 00:02:09,598
example highly parallelizable stream

53
00:02:09,598 --> 00:02:11,038
ciphers and simple message

54
00:02:11,038 --> 00:02:14,079
authentication codes

55
00:02:14,160 --> 00:02:16,640
second it has implications to learning

56
00:02:16,640 --> 00:02:19,040
theory which asks the questions of which

57
00:02:19,040 --> 00:02:20,560
functions can be learned efficiently

58
00:02:20,560 --> 00:02:22,800
through box success

59
00:02:22,800 --> 00:02:24,000
and

60
00:02:24,000 --> 00:02:26,160
if a complexity class contains a weak

61
00:02:26,160 --> 00:02:28,959
prf then this class cannot be learned

62
00:02:28,959 --> 00:02:30,480
under the uniform

63
00:02:30,480 --> 00:02:32,959
distribution so it gives limitations in

64
00:02:32,959 --> 00:02:35,519
learning theory

65
00:02:35,519 --> 00:02:38,080
third the existence of low complexity

66
00:02:38,080 --> 00:02:40,160
symmetric objects

67
00:02:40,160 --> 00:02:41,440
has

68
00:02:41,440 --> 00:02:42,800
been related to the existence of

69
00:02:42,800 --> 00:02:44,640
high-end cryptography for example

70
00:02:44,640 --> 00:02:47,280
constant locality brgs gives constant

71
00:02:47,280 --> 00:02:51,080
overhead secure computation

72
00:02:51,760 --> 00:02:53,760
the low complexity classes we focus on

73
00:02:53,760 --> 00:02:57,280
in this work are variants of ac0

74
00:02:57,280 --> 00:02:59,920
so ac series the complexity class of

75
00:02:59,920 --> 00:03:02,159
circuits with ended or gates of

76
00:03:02,159 --> 00:03:04,480
polynomial fanon and constant depth as

77
00:03:04,480 --> 00:03:06,319
you can see here in the slide

78
00:03:06,319 --> 00:03:06,630
and

79
00:03:06,630 --> 00:03:07,760
[Music]

80
00:03:07,760 --> 00:03:10,400
we will consider

81
00:03:10,400 --> 00:03:13,120
also ac 0 on top of parities where

82
00:03:13,120 --> 00:03:15,599
additionally to the antenna or gates

83
00:03:15,599 --> 00:03:19,040
there is a layer of x or gates allowed

84
00:03:19,040 --> 00:03:20,400
at the bottom

85
00:03:20,400 --> 00:03:22,800
and more generally we will consider ac 0

86
00:03:22,800 --> 00:03:24,959
mode 2 where the x or gates are just

87
00:03:24,959 --> 00:03:27,120
allowed at arbitrary layers

88
00:03:27,120 --> 00:03:28,080
and

89
00:03:28,080 --> 00:03:30,000
finally that's not the focus of our work

90
00:03:30,000 --> 00:03:31,519
but it will also come up so i'll

91
00:03:31,519 --> 00:03:34,879
mentioned here is acc0

92
00:03:34,879 --> 00:03:37,519
where their arbitrary mod gates

93
00:03:37,519 --> 00:03:40,000
somo 2 3 and so on

94
00:03:40,000 --> 00:03:43,760
allowed at arbitrary layers

95
00:03:44,640 --> 00:03:46,239
here you can see an overview of our

96
00:03:46,239 --> 00:03:48,319
previous work if you want to look at it

97
00:03:48,319 --> 00:03:50,000
more thoroughly you can pause or go to

98
00:03:50,000 --> 00:03:52,480
our paper but what i want to stress is

99
00:03:52,480 --> 00:03:53,680
the following

100
00:03:53,680 --> 00:03:55,519
first there are basically two approaches

101
00:03:55,519 --> 00:03:58,000
to constructing weak prfs one is to

102
00:03:58,000 --> 00:03:59,760
build on standard assumptions like

103
00:03:59,760 --> 00:04:01,840
factoring decisional difficult learning

104
00:04:01,840 --> 00:04:02,959
with errors

105
00:04:02,959 --> 00:04:05,120
and the other one is to put forward new

106
00:04:05,120 --> 00:04:07,599
assumptions for which known attacks can

107
00:04:07,599 --> 00:04:11,920
be ruled out or plausibly do not apply

108
00:04:11,920 --> 00:04:14,400
so heuristic here basically means not

109
00:04:14,400 --> 00:04:15,439
used in

110
00:04:15,439 --> 00:04:17,680
previous work but might become standard

111
00:04:17,680 --> 00:04:20,000
in the future and in this work we follow

112
00:04:20,000 --> 00:04:22,400
the heuristic approach

113
00:04:22,400 --> 00:04:24,160
and the second thing i want to mention

114
00:04:24,160 --> 00:04:26,560
is if you look at the orange parts here

115
00:04:26,560 --> 00:04:29,440
we know that in ac 0 there cannot exist

116
00:04:29,440 --> 00:04:31,840
big prs with better than quasipolynomial

117
00:04:31,840 --> 00:04:34,000
security by the famous result of lineal

118
00:04:34,000 --> 00:04:35,759
mansur nissa

119
00:04:35,759 --> 00:04:38,320
and on the other hand we know that above

120
00:04:38,320 --> 00:04:42,160
ac 0 mod 2 there exists even stronger

121
00:04:42,160 --> 00:04:44,560
strong prf so we we do have candidate

122
00:04:44,560 --> 00:04:47,680
constructions of strong prfs so um in

123
00:04:47,680 --> 00:04:50,400
this work we focus on the area

124
00:04:50,400 --> 00:04:52,240
in between where so far there's only one

125
00:04:52,240 --> 00:04:54,639
candidate with prf with

126
00:04:54,639 --> 00:04:57,040
with more than quasi polynomial security

127
00:04:57,040 --> 00:05:00,000
as as you can see here

128
00:05:00,000 --> 00:05:02,160
so let's take a closer look at the area

129
00:05:02,160 --> 00:05:05,280
in between uh starting with ac 0 mode 2.

130
00:05:05,280 --> 00:05:07,280
so as you already saw on the last slide

131
00:05:07,280 --> 00:05:09,759
if you're fast enough in a recent work

132
00:05:09,759 --> 00:05:11,440
we brought forward the candidate week

133
00:05:11,440 --> 00:05:14,720
prf computed by an x and f formula which

134
00:05:14,720 --> 00:05:16,720
is basically d and f where instead of

135
00:05:16,720 --> 00:05:19,680
this junctions you have xors

136
00:05:19,680 --> 00:05:21,759
and what we show in this work is that

137
00:05:21,759 --> 00:05:24,560
you can go even lower

138
00:05:24,560 --> 00:05:25,759
to

139
00:05:25,759 --> 00:05:28,800
sparse f2 polynomials so

140
00:05:28,800 --> 00:05:31,199
similar to x and f formula but without

141
00:05:31,199 --> 00:05:34,479
negation in the inputs

142
00:05:34,960 --> 00:05:37,520
going to ac 0 on top of parities there

143
00:05:37,520 --> 00:05:39,600
was a candidate weak prf brought forward

144
00:05:39,600 --> 00:05:42,240
by caveat all in 2014

145
00:05:42,240 --> 00:05:44,720
but unfortunately it was shown later

146
00:05:44,720 --> 00:05:46,600
that their candidate can be broken in

147
00:05:46,600 --> 00:05:48,960
quasipolynomial time by so-called

148
00:05:48,960 --> 00:05:51,199
algebraic or rational degree attack that

149
00:05:51,199 --> 00:05:53,039
i will explain in a bit more detail

150
00:05:53,039 --> 00:05:55,440
later

151
00:05:55,680 --> 00:05:57,759
in this work we show how we can fix this

152
00:05:57,759 --> 00:05:59,280
candidate and bring forward a new

153
00:05:59,280 --> 00:06:01,520
candidate weak pair f in ac 0 on top of

154
00:06:01,520 --> 00:06:04,160
parity the only one currently known that

155
00:06:04,160 --> 00:06:08,479
plausibly has sub exponential security

156
00:06:10,400 --> 00:06:12,080
so let's start with the candidate weak

157
00:06:12,080 --> 00:06:13,600
pair of computed by sparse f2

158
00:06:13,600 --> 00:06:15,840
polynomials

159
00:06:15,840 --> 00:06:17,520
the starting point is the previous

160
00:06:17,520 --> 00:06:21,120
candidate in ac serial mode 2.

161
00:06:21,120 --> 00:06:23,120
as you can see here the candidate is an

162
00:06:23,120 --> 00:06:25,199
xor of ends where the n terms are

163
00:06:25,199 --> 00:06:28,319
increasingly biased towards zero

164
00:06:28,319 --> 00:06:30,080
and the intuition behind this

165
00:06:30,080 --> 00:06:32,720
contraction very roughly is that the

166
00:06:32,720 --> 00:06:35,520
more samples one sees the more of these

167
00:06:35,520 --> 00:06:37,680
terms will kick in meaning that given

168
00:06:37,680 --> 00:06:40,639
very few samples these are

169
00:06:40,639 --> 00:06:42,400
indistinguishable from random because of

170
00:06:42,400 --> 00:06:47,199
the low degree the low order n terms

171
00:06:47,199 --> 00:06:48,479
and

172
00:06:48,479 --> 00:06:51,039
the more samples are giving out the more

173
00:06:51,039 --> 00:06:53,680
noise by the higher degree terms will be

174
00:06:53,680 --> 00:06:55,520
added

175
00:06:55,520 --> 00:06:58,000
and this candidate if you write it in a

176
00:06:58,000 --> 00:07:00,479
different way can can also be viewed as

177
00:07:00,479 --> 00:07:02,400
learning parity with variable density

178
00:07:02,400 --> 00:07:04,560
noise where

179
00:07:04,560 --> 00:07:06,800
if you see it like this you can think of

180
00:07:06,800 --> 00:07:08,639
the higher degree terms corresponding to

181
00:07:08,639 --> 00:07:12,080
the sparse noise

182
00:07:13,039 --> 00:07:15,599
and the outer xor is important to ensure

183
00:07:15,599 --> 00:07:18,240
that linear attacks fail so linear

184
00:07:18,240 --> 00:07:20,880
attacks um are an attack framework that

185
00:07:20,880 --> 00:07:24,720
captures large classes of attacks that

186
00:07:24,720 --> 00:07:26,960
apply to learning parity with noise-like

187
00:07:26,960 --> 00:07:28,240
assumptions

188
00:07:28,240 --> 00:07:30,400
and such as gaussian elimination

189
00:07:30,400 --> 00:07:32,560
statistical decoding information inside

190
00:07:32,560 --> 00:07:35,680
decoding and be kicked out

191
00:07:37,039 --> 00:07:39,680
and as already mentioned x and f formula

192
00:07:39,680 --> 00:07:42,560
is basically sparse multivariate f2

193
00:07:42,560 --> 00:07:45,680
polynomial in inputs enter negation so

194
00:07:45,680 --> 00:07:48,240
what we want to do in this work is

195
00:07:48,240 --> 00:07:52,000
getting rid of the negation part

196
00:07:54,639 --> 00:07:57,280
so how can we do this um the idea is

197
00:07:57,280 --> 00:08:00,240
quite simply namely instead of letting

198
00:08:00,240 --> 00:08:02,960
the key decide which variable to negate

199
00:08:02,960 --> 00:08:05,759
or not negate is to let the key decide

200
00:08:05,759 --> 00:08:06,720
which

201
00:08:06,720 --> 00:08:08,800
variable to choose from

202
00:08:08,800 --> 00:08:12,400
a set of possible variables

203
00:08:12,400 --> 00:08:15,120
and of course the the simplest attempt

204
00:08:15,120 --> 00:08:17,199
the first attempt that you would try out

205
00:08:17,199 --> 00:08:19,680
is just take two variables so

206
00:08:19,680 --> 00:08:23,039
add another copy of variables to x and

207
00:08:23,039 --> 00:08:26,560
then for each term decide uh between x i

208
00:08:26,560 --> 00:08:30,560
j k and x i j k prime

209
00:08:30,560 --> 00:08:32,479
unfortunately that does not work there's

210
00:08:32,479 --> 00:08:34,719
a simple attack with this

211
00:08:34,719 --> 00:08:36,320
um because

212
00:08:36,320 --> 00:08:40,080
the problem is that both x i j k and x i

213
00:08:40,080 --> 00:08:43,360
j k prime are zero with a

214
00:08:43,360 --> 00:08:45,279
two large probability with probability

215
00:08:45,279 --> 00:08:48,480
one fourth and if that happens the whole

216
00:08:48,480 --> 00:08:50,720
n term will be cancelled down and this

217
00:08:50,720 --> 00:08:54,080
is also in public when you know the when

218
00:08:54,080 --> 00:08:55,760
you know the input and and this is what

219
00:08:55,760 --> 00:08:57,519
happens for random input which you get

220
00:08:57,519 --> 00:09:00,800
to see for vprs

221
00:09:01,200 --> 00:09:04,640
and now the solution is um also still

222
00:09:04,640 --> 00:09:06,560
quite straightforward um you can

223
00:09:06,560 --> 00:09:08,720
circumvent this by not choosing between

224
00:09:08,720 --> 00:09:11,120
two but by choosing between sufficiently

225
00:09:11,120 --> 00:09:13,760
many then this that all of them are zero

226
00:09:13,760 --> 00:09:15,839
will will happen

227
00:09:15,839 --> 00:09:18,399
only with very very small probability

228
00:09:18,399 --> 00:09:21,200
and um and this attack does no longer

229
00:09:21,200 --> 00:09:22,959
apply so

230
00:09:22,959 --> 00:09:27,120
then instead of x i j k x or the key

231
00:09:27,120 --> 00:09:30,160
what we will do is having the key pick

232
00:09:30,160 --> 00:09:31,839
which of the terms x which of the

233
00:09:31,839 --> 00:09:34,959
variables x i j k to pick

234
00:09:34,959 --> 00:09:36,399
and we can indeed show

235
00:09:36,399 --> 00:09:38,480
that uh this

236
00:09:38,480 --> 00:09:40,480
uh this candidate

237
00:09:40,480 --> 00:09:43,040
as the candidate before probably resists

238
00:09:43,040 --> 00:09:45,120
linear attacks up to two to these

239
00:09:45,120 --> 00:09:47,920
samples if now w and b are chosen large

240
00:09:47,920 --> 00:09:50,640
enough and the analysis for this is

241
00:09:50,640 --> 00:09:52,959
similar to the previous analysis but

242
00:09:52,959 --> 00:09:55,519
more involved to the to due to the

243
00:09:55,519 --> 00:09:58,080
structure

244
00:10:00,240 --> 00:10:02,160
so what you can see here is that the

245
00:10:02,160 --> 00:10:04,240
extra layers in the top so the next

246
00:10:04,240 --> 00:10:06,560
question we ask in this work is what if

247
00:10:06,560 --> 00:10:08,959
you allow the x or layer only in the

248
00:10:08,959 --> 00:10:11,680
bottom so what if you go to ac 0 on top

249
00:10:11,680 --> 00:10:14,320
of parities

250
00:10:14,320 --> 00:10:16,079
as i mentioned before we're not the

251
00:10:16,079 --> 00:10:18,560
first who this question so let's take a

252
00:10:18,560 --> 00:10:20,160
look at the candidate construction from

253
00:10:20,160 --> 00:10:22,240
2014.

254
00:10:22,240 --> 00:10:25,279
so on the slide you see the weak prff

255
00:10:25,279 --> 00:10:27,440
here with keys

256
00:10:27,440 --> 00:10:28,720
snk

257
00:10:28,720 --> 00:10:33,440
and the design paradigm is as follows

258
00:10:33,440 --> 00:10:36,480
g is chosen such that it is a function

259
00:10:36,480 --> 00:10:39,040
in ac 0 that is not too biased so it has

260
00:10:39,040 --> 00:10:41,120
constant bias and it's also called the

261
00:10:41,120 --> 00:10:43,279
tribes function

262
00:10:43,279 --> 00:10:46,240
and then k is used to hide the heavy

263
00:10:46,240 --> 00:10:48,560
fourier coefficients that we know g has

264
00:10:48,560 --> 00:10:51,200
because of the result of lineal mansur

265
00:10:51,200 --> 00:10:52,959
and nissan

266
00:10:52,959 --> 00:10:55,920
and finally the bias is removed to get

267
00:10:55,920 --> 00:10:59,600
from a constant bias weak prf to

268
00:10:59,600 --> 00:11:01,920
random big pair f

269
00:11:01,920 --> 00:11:04,399
by adding a parity of x with a part of

270
00:11:04,399 --> 00:11:08,640
this a fresh part of the secret key s

271
00:11:09,040 --> 00:11:11,920
this way of achieving a vprx

272
00:11:11,920 --> 00:11:13,760
can also be

273
00:11:13,760 --> 00:11:16,160
viewed as learning parity with simple

274
00:11:16,160 --> 00:11:18,480
deterministic noise where here the noise

275
00:11:18,480 --> 00:11:21,040
function is determined by

276
00:11:21,040 --> 00:11:23,600
the function the public function g and

277
00:11:23,600 --> 00:11:26,480
the secret key

278
00:11:26,880 --> 00:11:28,800
this candidate can be shown to resist

279
00:11:28,800 --> 00:11:30,480
linear attacks based on a simple

280
00:11:30,480 --> 00:11:33,920
combinatorial conjecture

281
00:11:34,079 --> 00:11:36,040
the problem is that it can be broken in

282
00:11:36,040 --> 00:11:38,480
quasi-polynomial time by a so-called

283
00:11:38,480 --> 00:11:40,959
algebraic or rational degree attack as

284
00:11:40,959 --> 00:11:45,640
was shown by bogdanov and rosen in 2017.

285
00:11:46,480 --> 00:11:48,480
in order to see how we overcome this

286
00:11:48,480 --> 00:11:50,560
issue let's take a look at so-called

287
00:11:50,560 --> 00:11:53,040
algebraic or rational degree attacks

288
00:11:53,040 --> 00:11:55,760
the idea behind this attack is that if

289
00:11:55,760 --> 00:11:58,079
one can find a low degree polynomial h

290
00:11:58,079 --> 00:12:01,360
such that g times h equals zero or g

291
00:12:01,360 --> 00:12:04,480
plus one times h equals zero then given

292
00:12:04,480 --> 00:12:07,760
input output pairs one can solve for h

293
00:12:07,760 --> 00:12:09,600
given n to the

294
00:12:09,600 --> 00:12:11,440
degree of h samples

295
00:12:11,440 --> 00:12:13,760
so for h with logarithmic degree this

296
00:12:13,760 --> 00:12:17,440
gives an attacking quasi-polynomial time

297
00:12:17,440 --> 00:12:19,519
recall that the ac series circuit in the

298
00:12:19,519 --> 00:12:22,079
construction of arcavia at all is of the

299
00:12:22,079 --> 00:12:25,519
following form

300
00:12:25,519 --> 00:12:28,160
now bogdanov and rosen observed that it

301
00:12:28,160 --> 00:12:31,760
always holds g plus 1 times gi equals 0

302
00:12:31,760 --> 00:12:35,519
for any of the inner end terms gi

303
00:12:35,519 --> 00:12:37,680
therefore the candidate big prf of

304
00:12:37,680 --> 00:12:40,240
avocabia has rational degree logarithmic

305
00:12:40,240 --> 00:12:42,079
in the security parameter and can

306
00:12:42,079 --> 00:12:43,920
therefore be broken by rational degree

307
00:12:43,920 --> 00:12:47,760
attack and quasi-polynomial time

308
00:12:48,959 --> 00:12:52,320
furthermore this is inherent for dnaps

309
00:12:52,320 --> 00:12:54,639
because either at least one of the ends

310
00:12:54,639 --> 00:12:56,880
has low fan in resulting in low rational

311
00:12:56,880 --> 00:12:59,120
degree or the function is very biased

312
00:12:59,120 --> 00:13:00,480
towards zero

313
00:13:00,480 --> 00:13:01,360
and

314
00:13:01,360 --> 00:13:03,120
the corresponding candidate could

315
00:13:03,120 --> 00:13:07,440
therefore be broken by a linear attack

316
00:13:07,440 --> 00:13:10,959
so how to overcome this the idea is to

317
00:13:10,959 --> 00:13:12,959
consider the two cases of the rational

318
00:13:12,959 --> 00:13:15,760
degree attack separately so called the

319
00:13:15,760 --> 00:13:18,800
minimal degree of h such that g times h

320
00:13:18,800 --> 00:13:21,600
equals zero the primal rational degree

321
00:13:21,600 --> 00:13:25,120
and called the minimal degree of h prime

322
00:13:25,120 --> 00:13:28,240
such that g plus one times h prime is

323
00:13:28,240 --> 00:13:32,800
zero the dual rational degree of t

324
00:13:32,880 --> 00:13:35,680
and with this if we reconsider the

325
00:13:35,680 --> 00:13:37,519
function from the slide before a bit

326
00:13:37,519 --> 00:13:40,079
more general just a disjunction of

327
00:13:40,079 --> 00:13:41,279
functions

328
00:13:41,279 --> 00:13:44,480
then with the same observation it's a

329
00:13:44,480 --> 00:13:45,519
bit

330
00:13:45,519 --> 00:13:47,120
less straightforward than what you saw

331
00:13:47,120 --> 00:13:49,040
on the slide before but it's still very

332
00:13:49,040 --> 00:13:50,320
easy to see

333
00:13:50,320 --> 00:13:53,199
that the this junctions in some sense

334
00:13:53,199 --> 00:13:54,399
don't

335
00:13:54,399 --> 00:13:56,959
don't increase the dual rational degree

336
00:13:56,959 --> 00:13:58,399
they don't help

337
00:13:58,399 --> 00:14:00,320
increasing the rational degree by

338
00:14:00,320 --> 00:14:02,160
increasing the full rational degree

339
00:14:02,160 --> 00:14:04,079
because the dual rational degree is just

340
00:14:04,079 --> 00:14:06,560
the minimum of the dual rational degrees

341
00:14:06,560 --> 00:14:08,800
of all the

342
00:14:08,800 --> 00:14:12,079
um of all its terms

343
00:14:12,720 --> 00:14:15,279
and but on the other hand what we what

344
00:14:15,279 --> 00:14:17,839
we show in this work what we can

345
00:14:17,839 --> 00:14:19,279
probably show

346
00:14:19,279 --> 00:14:21,279
is that it does something to the primal

347
00:14:21,279 --> 00:14:24,000
rational degree and namely what it does

348
00:14:24,000 --> 00:14:26,720
if all the terms are independent so

349
00:14:26,720 --> 00:14:29,600
operate on disjoint set of variables

350
00:14:29,600 --> 00:14:32,800
then the primal rational degree is the

351
00:14:32,800 --> 00:14:36,160
sum of all the primal rational degrees

352
00:14:36,160 --> 00:14:38,720
of the underlying terms

353
00:14:38,720 --> 00:14:41,360
and so this alone doesn't give much

354
00:14:41,360 --> 00:14:43,040
because the rational degree is the

355
00:14:43,040 --> 00:14:45,040
minimum of the primal rational degree

356
00:14:45,040 --> 00:14:47,279
and the dual rational degree but now if

357
00:14:47,279 --> 00:14:50,240
we look at an n term it's very easy to

358
00:14:50,240 --> 00:14:52,560
see that this j just behaves

359
00:14:52,560 --> 00:14:55,040
dual to the to the or

360
00:14:55,040 --> 00:14:58,399
and so there we have that the primal

361
00:14:58,399 --> 00:15:01,199
rational degree is not increased but the

362
00:15:01,199 --> 00:15:03,760
dual rational degree is now the sum of

363
00:15:03,760 --> 00:15:05,839
the dual rational degrees of all the

364
00:15:05,839 --> 00:15:08,399
gi's

365
00:15:10,480 --> 00:15:12,320
so by the previous slide we know that

366
00:15:12,320 --> 00:15:14,000
the or increases the primal rational

367
00:15:14,000 --> 00:15:16,639
degree and the end increases the dual

368
00:15:16,639 --> 00:15:19,440
rational degree so we can probably

369
00:15:19,440 --> 00:15:21,680
increase the rational degree which is

370
00:15:21,680 --> 00:15:23,920
the minimum of the primal and the dual

371
00:15:23,920 --> 00:15:25,920
rational degree are just by adding

372
00:15:25,920 --> 00:15:30,160
sufficiently many alternating layers

373
00:15:30,959 --> 00:15:33,519
it turns out that we only have to add

374
00:15:33,519 --> 00:15:35,680
one more layer compared to the function

375
00:15:35,680 --> 00:15:37,759
of acavia at all

376
00:15:37,759 --> 00:15:40,480
and again we have to choose the fan in

377
00:15:40,480 --> 00:15:44,639
such that the function is not too biased

378
00:15:44,639 --> 00:15:47,519
and this candidate now has high rational

379
00:15:47,519 --> 00:15:50,320
degree by the considerations before

380
00:15:50,320 --> 00:15:53,120
because we have the

381
00:15:53,120 --> 00:15:55,920
and in the or of sufficiently high

382
00:15:55,920 --> 00:15:58,560
fan in so the two outer layers and

383
00:15:58,560 --> 00:16:00,560
further it again plausibly resists

384
00:16:00,560 --> 00:16:03,040
linear attacks based on a combinatorial

385
00:16:03,040 --> 00:16:05,599
conjecture

386
00:16:06,399 --> 00:16:08,800
so that was our first candidate

387
00:16:08,800 --> 00:16:10,320
note here that

388
00:16:10,320 --> 00:16:13,759
the parities are secret whereas the

389
00:16:13,759 --> 00:16:16,320
ac series circuit is public so the next

390
00:16:16,320 --> 00:16:19,199
question we considered in the work is

391
00:16:19,199 --> 00:16:21,040
in some sense can you do the other way

392
00:16:21,040 --> 00:16:24,880
around can you get a big prf in ac 0 on

393
00:16:24,880 --> 00:16:27,199
top of public parentings

394
00:16:27,199 --> 00:16:29,199
so why do we care about this the

395
00:16:29,199 --> 00:16:31,519
motivation of having a weak prf and acc

396
00:16:31,519 --> 00:16:33,680
on top of public parities is that it

397
00:16:33,680 --> 00:16:35,120
would give a weak paraff that is

398
00:16:35,120 --> 00:16:37,600
pseudo-random on random code words

399
00:16:37,600 --> 00:16:39,519
this would directly imply a stately

400
00:16:39,519 --> 00:16:41,040
symmetric encryption scheme with

401
00:16:41,040 --> 00:16:43,839
decrypting circuit fully in ac 0 just by

402
00:16:43,839 --> 00:16:45,759
plugging in the big prf and encryption

403
00:16:45,759 --> 00:16:48,079
scheme i presented earlier this is

404
00:16:48,079 --> 00:16:49,920
something that we do not currently know

405
00:16:49,920 --> 00:16:52,399
to exist

406
00:16:52,399 --> 00:16:54,320
in their work akavia at all brought

407
00:16:54,320 --> 00:16:56,480
forward a conjecture regarding functions

408
00:16:56,480 --> 00:16:58,000
in ac 0

409
00:16:58,000 --> 00:17:00,240
on top of parities saying that every

410
00:17:00,240 --> 00:17:01,839
function in this class has a heavy

411
00:17:01,839 --> 00:17:04,480
fourier coefficient meaning of size 1

412
00:17:04,480 --> 00:17:07,359
over quasi polynomial

413
00:17:07,359 --> 00:17:09,679
we strengthen their conjecture by saying

414
00:17:09,679 --> 00:17:11,599
that this heavy fourier coefficient

415
00:17:11,599 --> 00:17:13,359
stems from some low order fourier

416
00:17:13,359 --> 00:17:15,039
coefficient

417
00:17:15,039 --> 00:17:17,439
by applying the transpose of the linear

418
00:17:17,439 --> 00:17:20,799
mapping describing the mod 2 layer

419
00:17:20,799 --> 00:17:23,359
similar to a caveat all for the original

420
00:17:23,359 --> 00:17:25,439
conjecture we showed that this is

421
00:17:25,439 --> 00:17:28,319
probably true if m is a random

422
00:17:28,319 --> 00:17:30,640
map independently of the ac series

423
00:17:30,640 --> 00:17:34,640
circuit g and if g is a dnf or c and f

424
00:17:34,640 --> 00:17:38,320
independently of the map m

425
00:17:38,640 --> 00:17:40,480
our strengthening would imply that no

426
00:17:40,480 --> 00:17:42,960
weak prf and acc on top of public

427
00:17:42,960 --> 00:17:44,600
parities with better than

428
00:17:44,600 --> 00:17:48,000
quasi-polynomial security can exist

429
00:17:48,000 --> 00:17:49,919
this conjecture together with our weak

430
00:17:49,919 --> 00:17:52,320
prf candidate has also implications to

431
00:17:52,320 --> 00:17:55,280
linear ipp which is the conjecture that

432
00:17:55,280 --> 00:17:56,960
the inner product mod 2 cannot be

433
00:17:56,960 --> 00:18:01,559
computed in ac 0 on top of parities

434
00:18:01,760 --> 00:18:04,400
namely if there exists a weak ppf on top

435
00:18:04,400 --> 00:18:06,240
of parities

436
00:18:06,240 --> 00:18:08,240
but there does not exist a weak pair on

437
00:18:08,240 --> 00:18:11,039
top of public parities

438
00:18:11,039 --> 00:18:14,080
then we show that linear ipp must indeed

439
00:18:14,080 --> 00:18:16,639
be true

440
00:18:19,120 --> 00:18:21,760
finally in our paper we ask how the

441
00:18:21,760 --> 00:18:24,799
existence of big prfs in ac 0.2 relates

442
00:18:24,799 --> 00:18:28,280
to other assumptions

443
00:18:29,360 --> 00:18:32,320
akavia at all already showed that league

444
00:18:32,320 --> 00:18:35,120
pf's on top of parities imply learning

445
00:18:35,120 --> 00:18:37,760
parity with noise with high noise rate

446
00:18:37,760 --> 00:18:40,160
if indeed every function in ac 0 on top

447
00:18:40,160 --> 00:18:41,760
of parities has a heavy fourie

448
00:18:41,760 --> 00:18:44,400
coefficient

449
00:18:45,760 --> 00:18:48,320
we in some sense strengthen their result

450
00:18:48,320 --> 00:18:50,880
by showing that weak pairs in all of ac

451
00:18:50,880 --> 00:18:53,440
0 mod 2 imply learning parity with noise

452
00:18:53,440 --> 00:18:55,919
for a specific code and noise rate where

453
00:18:55,919 --> 00:19:00,080
our implication holds unconditionally

454
00:19:00,880 --> 00:19:03,280
further we show that vprfs that fall

455
00:19:03,280 --> 00:19:04,880
into the variable density learning

456
00:19:04,880 --> 00:19:06,799
parity with noise framework which

457
00:19:06,799 --> 00:19:08,320
includes our candidate weak pair of

458
00:19:08,320 --> 00:19:11,280
computed by sparse f2 polynomials imply

459
00:19:11,280 --> 00:19:13,200
public encryption under an additional

460
00:19:13,200 --> 00:19:15,760
conjecture

461
00:19:15,760 --> 00:19:17,919
this conjecture basically says that if

462
00:19:17,919 --> 00:19:20,080
there exists some code that is hard to

463
00:19:20,080 --> 00:19:22,400
decode with respect to some noise rate

464
00:19:22,400 --> 00:19:25,600
then almost all codes are

465
00:19:25,600 --> 00:19:27,360
it is an interesting open question

466
00:19:27,360 --> 00:19:28,880
whether this result can be shown

467
00:19:28,880 --> 00:19:31,600
unconditionally and or extended to ac 0

468
00:19:31,600 --> 00:19:34,959
mod 2 more generally

469
00:19:35,360 --> 00:19:37,840
to summarize in this paper we brought

470
00:19:37,840 --> 00:19:39,840
forward new candidate weak perfs with

471
00:19:39,840 --> 00:19:42,000
sub exponential security

472
00:19:42,000 --> 00:19:44,000
our first candidate big prf is computed

473
00:19:44,000 --> 00:19:46,880
by sparse f2 polynomials it fits into

474
00:19:46,880 --> 00:19:48,720
the variable density learning parity

475
00:19:48,720 --> 00:19:51,360
with noise framework it provably resists

476
00:19:51,360 --> 00:19:54,240
linear attacks and it also has provably

477
00:19:54,240 --> 00:19:56,480
high rational degrees so it's not

478
00:19:56,480 --> 00:20:00,000
susceptible to algebraic attacks

479
00:20:00,000 --> 00:20:02,000
our second result is a candidate weak

480
00:20:02,000 --> 00:20:04,559
pair of an acc on top of parities

481
00:20:04,559 --> 00:20:06,799
this is the currently only standing

482
00:20:06,799 --> 00:20:08,720
candidate which can be conjectured to

483
00:20:08,720 --> 00:20:12,240
have full sub-exponential security

484
00:20:12,240 --> 00:20:14,159
this candidate is within the

485
00:20:14,159 --> 00:20:16,080
learning parity with simple noise

486
00:20:16,080 --> 00:20:18,960
framework it plausibly resists linear

487
00:20:18,960 --> 00:20:21,120
attacks and it has a provably high

488
00:20:21,120 --> 00:20:23,679
rational decree so with this i would

489
00:20:23,679 --> 00:20:25,600
like to end thank you very much for your

490
00:20:25,600 --> 00:20:28,000
attention and i hope you got interested

491
00:20:28,000 --> 00:20:30,320
and will look up more in the paper thank

492
00:20:30,320 --> 00:20:32,720
you

