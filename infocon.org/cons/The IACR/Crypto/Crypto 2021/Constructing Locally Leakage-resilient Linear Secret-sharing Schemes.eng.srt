1
00:00:05,359 --> 00:00:08,400
hello everyone uh welcome to this talk

2
00:00:08,400 --> 00:00:10,639
i'm going to talk about constructing

3
00:00:10,639 --> 00:00:13,519
locally leakage resilient linear secret

4
00:00:13,519 --> 00:00:15,200
sharing schemes

5
00:00:15,200 --> 00:00:17,440
this is a joint work with maji hanat

6
00:00:17,440 --> 00:00:19,840
anton

7
00:00:20,560 --> 00:00:22,240
so in this talk we're going to talk

8
00:00:22,240 --> 00:00:24,320
about locally leakage resilient secret

9
00:00:24,320 --> 00:00:25,840
sharing schemes

10
00:00:25,840 --> 00:00:28,000
so in a classical setting in your secret

11
00:00:28,000 --> 00:00:30,080
sharing schemes you have a dealer that

12
00:00:30,080 --> 00:00:31,760
takes a secret s

13
00:00:31,760 --> 00:00:36,079
and sample n secret shares s1 s2 and sn

14
00:00:36,079 --> 00:00:39,200
the security notion guarantees that

15
00:00:39,200 --> 00:00:41,600
for any unauthorized set of secret

16
00:00:41,600 --> 00:00:42,800
shares

17
00:00:42,800 --> 00:00:46,480
it is uncorrelated with the secret s

18
00:00:46,480 --> 00:00:48,719
so what if the adversary

19
00:00:48,719 --> 00:00:50,960
leaks local information from every

20
00:00:50,960 --> 00:00:52,320
secret share

21
00:00:52,320 --> 00:00:55,039
for example it learns a bit bi from

22
00:00:55,039 --> 00:00:56,960
every secret share si

23
00:00:56,960 --> 00:00:59,199
so is the joint

24
00:00:59,199 --> 00:01:02,079
distribution of the leakage correlated

25
00:01:02,079 --> 00:01:05,199
with the secret s or not

26
00:01:05,199 --> 00:01:07,280
locally leakage resilient secret sharing

27
00:01:07,280 --> 00:01:09,360
schemes ensure that

28
00:01:09,360 --> 00:01:11,920
the joint distribution of the leakage is

29
00:01:11,920 --> 00:01:15,920
uncorrelated with the secret s

30
00:01:16,080 --> 00:01:18,240
so why do we study leakage resilient

31
00:01:18,240 --> 00:01:20,560
super sharing it turns out that this is

32
00:01:20,560 --> 00:01:23,280
a very useful primitive and connected to

33
00:01:23,280 --> 00:01:25,040
many other fields

34
00:01:25,040 --> 00:01:28,159
for example in this fascinating problem

35
00:01:28,159 --> 00:01:29,840
called repairing

36
00:01:29,840 --> 00:01:32,720
error correcting code

37
00:01:32,720 --> 00:01:35,040
where the objectives that you learn

38
00:01:35,040 --> 00:01:37,360
minimum information from every secret

39
00:01:37,360 --> 00:01:40,240
share and you want to re fully

40
00:01:40,240 --> 00:01:42,479
reconstructed secret using these

41
00:01:42,479 --> 00:01:44,159
informations

42
00:01:44,159 --> 00:01:46,799
so intuitively if you are able to

43
00:01:46,799 --> 00:01:49,360
reconstruct the secret s then the secret

44
00:01:49,360 --> 00:01:51,119
sharing scheme is not

45
00:01:51,119 --> 00:01:52,479
resident

46
00:01:52,479 --> 00:01:54,799
and on the other hand the leakage

47
00:01:54,799 --> 00:01:56,719
resilience uh

48
00:01:56,719 --> 00:01:59,280
asks for a much stronger security

49
00:01:59,280 --> 00:02:01,840
guarantee that not only you cannot

50
00:02:01,840 --> 00:02:03,680
reconstruct the secret

51
00:02:03,680 --> 00:02:05,840
uh this information you learn from every

52
00:02:05,840 --> 00:02:07,520
secret share is actually

53
00:02:07,520 --> 00:02:11,679
reveal no information about the secret

54
00:02:11,920 --> 00:02:14,000
so it uh the leakage

55
00:02:14,000 --> 00:02:15,680
resilient secret sharing schemes has

56
00:02:15,680 --> 00:02:18,160
also been used as a building block to

57
00:02:18,160 --> 00:02:20,319
construct a secure multi-party

58
00:02:20,319 --> 00:02:22,879
computation protocols that is resilient

59
00:02:22,879 --> 00:02:25,680
to local leakage attacks

60
00:02:25,680 --> 00:02:28,800
and it also has been used to build other

61
00:02:28,800 --> 00:02:31,440
primitives such as non-malleable secret

62
00:02:31,440 --> 00:02:33,840
chain schemes

63
00:02:33,840 --> 00:02:36,080
so since the introduction of leakage

64
00:02:36,080 --> 00:02:38,480
resilient secret sharing there has been

65
00:02:38,480 --> 00:02:41,200
two main research directions

66
00:02:41,200 --> 00:02:43,200
so the first research direction is to

67
00:02:43,200 --> 00:02:45,840
construct new secret sharing schemes

68
00:02:45,840 --> 00:02:48,000
that are designed to be leakage

69
00:02:48,000 --> 00:02:49,519
resilient

70
00:02:49,519 --> 00:02:52,640
so we have a fascinating body of works

71
00:02:52,640 --> 00:02:55,120
that construct secret sharing schemes

72
00:02:55,120 --> 00:02:58,640
that is robust against many many very

73
00:02:58,640 --> 00:03:01,599
sophisticated leakage family

74
00:03:01,599 --> 00:03:04,000
however these constructions usually

75
00:03:04,000 --> 00:03:07,040
incur a significant overhead

76
00:03:07,040 --> 00:03:08,720
and loses

77
00:03:08,720 --> 00:03:10,720
some algebraic structure

78
00:03:10,720 --> 00:03:12,800
such as linearity

79
00:03:12,800 --> 00:03:16,640
and these crucial algebraic structures

80
00:03:16,640 --> 00:03:20,080
could be very uh very important for the

81
00:03:20,080 --> 00:03:22,720
application of secret sharing schemes

82
00:03:22,720 --> 00:03:24,959
so therefore there is another

83
00:03:24,959 --> 00:03:26,640
line of works

84
00:03:26,640 --> 00:03:29,599
that investigate the leakage resilience

85
00:03:29,599 --> 00:03:32,239
of prominent secret sharing schemes such

86
00:03:32,239 --> 00:03:34,640
as shamir super sharing and additive

87
00:03:34,640 --> 00:03:36,400
secret channel schemes

88
00:03:36,400 --> 00:03:39,760
since since the application of

89
00:03:39,760 --> 00:03:42,799
secret sharing schemes usually

90
00:03:42,799 --> 00:03:44,640
use such prominent secret sharing

91
00:03:44,640 --> 00:03:45,680
schemes

92
00:03:45,680 --> 00:03:47,680
this line of work have significant

93
00:03:47,680 --> 00:03:50,560
impact on the real world implementations

94
00:03:50,560 --> 00:03:52,799
and our work belongs to this line of

95
00:03:52,799 --> 00:03:55,280
research

96
00:03:55,920 --> 00:03:58,400
so let me set up the context for this

97
00:03:58,400 --> 00:03:59,680
work first

98
00:03:59,680 --> 00:04:02,159
so in this work we consider macy's

99
00:04:02,159 --> 00:04:04,400
secret sharing schemes corresponding to

100
00:04:04,400 --> 00:04:06,720
a random linear code

101
00:04:06,720 --> 00:04:09,200
so amazing secret sharing schemes works

102
00:04:09,200 --> 00:04:10,720
as follows

103
00:04:10,720 --> 00:04:12,720
so given ending code c

104
00:04:12,720 --> 00:04:15,519
which is just a subset of the

105
00:04:15,519 --> 00:04:17,600
vector space

106
00:04:17,600 --> 00:04:20,000
uh you can constru you can construct the

107
00:04:20,000 --> 00:04:22,560
secret sharing schemes as follows

108
00:04:22,560 --> 00:04:24,000
so let's say you want to sample the

109
00:04:24,000 --> 00:04:26,960
secret share of a secret s

110
00:04:26,960 --> 00:04:29,680
to do this you just sample a random code

111
00:04:29,680 --> 00:04:31,680
word from this code

112
00:04:31,680 --> 00:04:32,639
c

113
00:04:32,639 --> 00:04:35,120
condition on that the first coordinate

114
00:04:35,120 --> 00:04:36,320
is uh

115
00:04:36,320 --> 00:04:39,120
is identical to the secret s

116
00:04:39,120 --> 00:04:41,360
then the rest of the coordinates are the

117
00:04:41,360 --> 00:04:44,720
corresponding secret shares

118
00:04:44,800 --> 00:04:45,919
so

119
00:04:45,919 --> 00:04:47,280
it turns out that

120
00:04:47,280 --> 00:04:49,199
uh if the

121
00:04:49,199 --> 00:04:52,000
code if the code c is linear then the

122
00:04:52,000 --> 00:04:53,680
missing secret sharing scheme is also

123
00:04:53,680 --> 00:04:54,960
linear

124
00:04:54,960 --> 00:04:56,800
and it turns out that every linear

125
00:04:56,800 --> 00:04:59,440
secret sharing schemes is amazing secret

126
00:04:59,440 --> 00:05:01,360
sharing schemes corresponding to some

127
00:05:01,360 --> 00:05:02,880
linear code

128
00:05:02,880 --> 00:05:04,880
so for example uh the well-known

129
00:05:04,880 --> 00:05:06,880
chameleon secret sharing schemes is

130
00:05:06,880 --> 00:05:08,720
nothing but macy's secret sharing

131
00:05:08,720 --> 00:05:11,039
schemes corresponding to read solomon

132
00:05:11,039 --> 00:05:12,160
code

133
00:05:12,160 --> 00:05:13,919
and additive secret sharing schemes

134
00:05:13,919 --> 00:05:17,599
corresponds to the parity code

135
00:05:17,840 --> 00:05:20,000
so we consider macy's secret sharing

136
00:05:20,000 --> 00:05:22,320
schemes corresponding to a random linear

137
00:05:22,320 --> 00:05:23,280
code

138
00:05:23,280 --> 00:05:25,039
so how do you sample a random linear

139
00:05:25,039 --> 00:05:26,080
code

140
00:05:26,080 --> 00:05:29,039
you just sample the generator matrix g

141
00:05:29,039 --> 00:05:31,520
uniformly at random

142
00:05:31,520 --> 00:05:33,360
and note that

143
00:05:33,360 --> 00:05:35,840
since we consider an exponentially large

144
00:05:35,840 --> 00:05:37,280
field f

145
00:05:37,280 --> 00:05:40,000
when you sample a random matrix g over

146
00:05:40,000 --> 00:05:42,479
exponentially large field f

147
00:05:42,479 --> 00:05:45,039
the random matrix is maximum distance

148
00:05:45,039 --> 00:05:48,800
separable with overwhelming probability

149
00:05:48,800 --> 00:05:50,560
and when the

150
00:05:50,560 --> 00:05:53,680
code word g happens to be an mds code

151
00:05:53,680 --> 00:05:55,199
the message secret sharing schemes

152
00:05:55,199 --> 00:05:57,039
corresponding to g

153
00:05:57,039 --> 00:05:58,560
is nothing but a

154
00:05:58,560 --> 00:06:00,880
threshold secret sharing schemes with n

155
00:06:00,880 --> 00:06:02,000
parties

156
00:06:02,000 --> 00:06:04,840
and k plus one recruit reconstruction

157
00:06:04,840 --> 00:06:07,759
threshold uh where k plus one is the

158
00:06:07,759 --> 00:06:10,880
dimension of the code

159
00:06:11,360 --> 00:06:12,240
okay

160
00:06:12,240 --> 00:06:13,600
so

161
00:06:13,600 --> 00:06:15,759
uh now we're ready to present our

162
00:06:15,759 --> 00:06:18,639
results so let's let's num that be the

163
00:06:18,639 --> 00:06:21,039
security parameter which represents the

164
00:06:21,039 --> 00:06:23,600
size of each secret share

165
00:06:23,600 --> 00:06:25,759
so remember that every sql share is an

166
00:06:25,759 --> 00:06:28,160
element from the field f

167
00:06:28,160 --> 00:06:29,840
therefore this

168
00:06:29,840 --> 00:06:31,840
the size of the field is roughly two to

169
00:06:31,840 --> 00:06:33,440
the number

170
00:06:33,440 --> 00:06:36,080
and we assume m bits are leaked from

171
00:06:36,080 --> 00:06:38,639
every secret share

172
00:06:38,639 --> 00:06:40,720
our result is as follows

173
00:06:40,720 --> 00:06:43,199
so you pick any n to be the number of

174
00:06:43,199 --> 00:06:44,400
parties

175
00:06:44,400 --> 00:06:46,560
you pick n in k such that k plus 1 is

176
00:06:46,560 --> 00:06:48,960
the reconstruction circle

177
00:06:48,960 --> 00:06:52,479
and the let m be ending constant

178
00:06:52,479 --> 00:06:55,919
if you have the guarantee that k

179
00:06:55,919 --> 00:06:58,400
roughly the reconstruction threshold is

180
00:06:58,400 --> 00:07:00,720
greater than half of n which is the

181
00:07:00,720 --> 00:07:02,400
number of parties

182
00:07:02,400 --> 00:07:04,240
then the message secret sharing schemes

183
00:07:04,240 --> 00:07:07,199
corresponding to a random matrix g

184
00:07:07,199 --> 00:07:10,800
is m bit locally leakage resilient

185
00:07:10,800 --> 00:07:12,639
except with

186
00:07:12,639 --> 00:07:14,080
exponential

187
00:07:14,080 --> 00:07:15,919
exponentially decaying probability

188
00:07:15,919 --> 00:07:18,639
probability

189
00:07:18,639 --> 00:07:19,440
so

190
00:07:19,440 --> 00:07:21,120
uh we um

191
00:07:21,120 --> 00:07:23,280
we do need the number of parties n to be

192
00:07:23,280 --> 00:07:25,919
less than the security parameter to

193
00:07:25,919 --> 00:07:28,479
ensure that the g is mds with high

194
00:07:28,479 --> 00:07:30,000
probability

195
00:07:30,000 --> 00:07:32,240
so as a representative example we can

196
00:07:32,240 --> 00:07:34,240
set the number of

197
00:07:34,240 --> 00:07:37,120
reconstruction whole to be one third of

198
00:07:37,120 --> 00:07:38,560
lambda and

199
00:07:38,560 --> 00:07:42,080
n to be half of lambda

200
00:07:42,080 --> 00:07:44,960
so our second result complement our

201
00:07:44,960 --> 00:07:46,639
first result

202
00:07:46,639 --> 00:07:49,440
where we show a bottleneck for the

203
00:07:49,440 --> 00:07:52,879
existing and analytic approaches

204
00:07:52,879 --> 00:07:54,400
so

205
00:07:54,400 --> 00:07:56,720
in the in their seminal work

206
00:07:56,720 --> 00:07:59,440
ben homoda at all introduced this

207
00:07:59,440 --> 00:08:02,639
innovative fourier analytic approach

208
00:08:02,639 --> 00:08:05,360
which is adopted by all existing work

209
00:08:05,360 --> 00:08:06,879
including this one

210
00:08:06,879 --> 00:08:10,479
to prove leakage resilience

211
00:08:10,720 --> 00:08:12,560
we show that this

212
00:08:12,560 --> 00:08:15,039
approach is bound to fail

213
00:08:15,039 --> 00:08:17,199
when the number of uh

214
00:08:17,199 --> 00:08:19,120
when the reconstruction threshold is

215
00:08:19,120 --> 00:08:23,120
less than half of the number of parties

216
00:08:23,120 --> 00:08:24,720
so in detail

217
00:08:24,720 --> 00:08:25,520
this

218
00:08:25,520 --> 00:08:26,879
this approach

219
00:08:26,879 --> 00:08:30,000
use a fourier analytic expression as an

220
00:08:30,000 --> 00:08:33,279
approx as a proxy to upper bound the

221
00:08:33,279 --> 00:08:35,679
statistical distance

222
00:08:35,679 --> 00:08:38,479
uh we consider the leakage function

223
00:08:38,479 --> 00:08:41,039
to be the indicator function of

224
00:08:41,039 --> 00:08:43,760
quadratic residue

225
00:08:43,760 --> 00:08:46,160
that is the leakage function output one

226
00:08:46,160 --> 00:08:48,080
if the corresponding secret share is a

227
00:08:48,080 --> 00:08:49,760
quadratic residue

228
00:08:49,760 --> 00:08:52,080
and zero otherwise

229
00:08:52,080 --> 00:08:53,600
we prove that

230
00:08:53,600 --> 00:08:56,560
given any linear secret sharing schemes

231
00:08:56,560 --> 00:08:58,160
this fourier

232
00:08:58,160 --> 00:09:00,320
analytic process

233
00:09:00,320 --> 00:09:02,000
is at least

234
00:09:02,000 --> 00:09:03,360
at least the one

235
00:09:03,360 --> 00:09:05,760
for this leakage function

236
00:09:05,760 --> 00:09:06,800
so

237
00:09:06,800 --> 00:09:09,680
remember that this process used up to

238
00:09:09,680 --> 00:09:12,080
upper bound the statistical distance

239
00:09:12,080 --> 00:09:15,200
if it if it is greater than one then it

240
00:09:15,200 --> 00:09:19,360
always give an inconsequential bound

241
00:09:20,320 --> 00:09:23,680
so due to this um the first result i

242
00:09:23,680 --> 00:09:26,000
just present to you is actually the

243
00:09:26,000 --> 00:09:27,680
optimal result

244
00:09:27,680 --> 00:09:29,680
one can hope to prove

245
00:09:29,680 --> 00:09:33,120
use the existing technical approach

246
00:09:33,120 --> 00:09:36,480
and to prove leakage resilience when k

247
00:09:36,480 --> 00:09:38,880
is less than half of n

248
00:09:38,880 --> 00:09:42,160
requires significantly different ideas

249
00:09:42,160 --> 00:09:45,279
even just for this one function

250
00:09:45,279 --> 00:09:48,959
the indicator for quadratic residue

251
00:09:48,959 --> 00:09:52,399
so this is actually motivated uh because

252
00:09:52,399 --> 00:09:54,399
the shamir secret sharing schemes a

253
00:09:54,399 --> 00:09:57,279
samia secret sharing based uh mpc

254
00:09:57,279 --> 00:09:58,399
protocol

255
00:09:58,399 --> 00:10:01,519
is multiplication friendly when k the

256
00:10:01,519 --> 00:10:04,079
degree k is less than half of the number

257
00:10:04,079 --> 00:10:06,079
of parties

258
00:10:06,079 --> 00:10:08,560
and in some ongoing works

259
00:10:08,560 --> 00:10:10,800
we show that

260
00:10:10,800 --> 00:10:14,000
we use a combinatorical argument to show

261
00:10:14,000 --> 00:10:15,279
that

262
00:10:15,279 --> 00:10:16,720
you can actually prove leakage

263
00:10:16,720 --> 00:10:18,560
resilience

264
00:10:18,560 --> 00:10:20,959
when k is less than half of n

265
00:10:20,959 --> 00:10:25,518
if the leakage family l is small

266
00:10:27,200 --> 00:10:28,800
okay so

267
00:10:28,800 --> 00:10:30,959
before i present the technical highlight

268
00:10:30,959 --> 00:10:32,800
let me

269
00:10:32,800 --> 00:10:35,120
summarize some of the relevant prior

270
00:10:35,120 --> 00:10:36,399
works

271
00:10:36,399 --> 00:10:38,000
so in the

272
00:10:38,000 --> 00:10:40,800
original work by ben hamoda at all

273
00:10:40,800 --> 00:10:42,079
they show that

274
00:10:42,079 --> 00:10:45,600
if you are given any mds code g

275
00:10:45,600 --> 00:10:47,360
the macy's secret sharing schemes

276
00:10:47,360 --> 00:10:50,880
corresponding to g is leakage resilient

277
00:10:50,880 --> 00:10:53,920
when m bit is leakage when when m bit is

278
00:10:53,920 --> 00:10:56,079
leaked from every signature

279
00:10:56,079 --> 00:10:58,880
as long as a k is greater than

280
00:10:58,880 --> 00:11:01,279
a a

281
00:11:01,279 --> 00:11:03,519
k is greater than a constant fraction of

282
00:11:03,519 --> 00:11:04,320
n

283
00:11:04,320 --> 00:11:06,480
where this constant fraction depends on

284
00:11:06,480 --> 00:11:09,360
the bit leaked from every secret share

285
00:11:09,360 --> 00:11:12,160
so roughly when one bit is leaked from

286
00:11:12,160 --> 00:11:14,800
every secret share you need that k is

287
00:11:14,800 --> 00:11:17,760
greater than 0.85 times n

288
00:11:17,760 --> 00:11:19,760
and this fraction increases as the

289
00:11:19,760 --> 00:11:22,959
number of bits leaked increases

290
00:11:22,959 --> 00:11:24,640
in particular shamir secret sharing

291
00:11:24,640 --> 00:11:26,959
schemes is one bit leakage resilient if

292
00:11:26,959 --> 00:11:31,199
k is greater than 0.85 times n

293
00:11:31,760 --> 00:11:34,560
so to compare their work with hours

294
00:11:34,560 --> 00:11:37,040
their construction is deterministic

295
00:11:37,040 --> 00:11:39,040
because they their

296
00:11:39,040 --> 00:11:43,200
proof works for any fixed mds code g

297
00:11:43,200 --> 00:11:45,279
and they prove that k is

298
00:11:45,279 --> 00:11:47,680
it is leakage resilient as long as k is

299
00:11:47,680 --> 00:11:48,959
greater than

300
00:11:48,959 --> 00:11:50,800
delta m times n

301
00:11:50,800 --> 00:11:53,440
which is at least the 0.85

302
00:11:53,440 --> 00:11:55,920
while our construction is randomized

303
00:11:55,920 --> 00:11:59,040
with exponential failure probability but

304
00:11:59,040 --> 00:12:00,959
we'll prove that

305
00:12:00,959 --> 00:12:02,959
k need only be

306
00:12:02,959 --> 00:12:06,079
at least half of n

307
00:12:06,800 --> 00:12:08,800
so in another

308
00:12:08,800 --> 00:12:10,560
our recent work

309
00:12:10,560 --> 00:12:12,639
we consider the shamir secret sharing

310
00:12:12,639 --> 00:12:15,279
schemes with randomly chosen evaluation

311
00:12:15,279 --> 00:12:16,639
places

312
00:12:16,639 --> 00:12:19,760
and we consider a severely restricted

313
00:12:19,760 --> 00:12:22,000
leakage model that we call physical bit

314
00:12:22,000 --> 00:12:23,200
leakage

315
00:12:23,200 --> 00:12:24,959
so in this model

316
00:12:24,959 --> 00:12:26,880
every secret share

317
00:12:26,880 --> 00:12:27,839
is

318
00:12:27,839 --> 00:12:31,760
is a is stored in their natural natural

319
00:12:31,760 --> 00:12:34,000
binary representation

320
00:12:34,000 --> 00:12:35,920
and the leakage function can learn the

321
00:12:35,920 --> 00:12:40,639
bit stored at specified locations

322
00:12:40,639 --> 00:12:43,040
so for this restricted

323
00:12:43,040 --> 00:12:45,440
leakage family we show that with

324
00:12:45,440 --> 00:12:47,920
overwhelming probability xiaomi's secret

325
00:12:47,920 --> 00:12:49,760
chain schemes with randomly chosen

326
00:12:49,760 --> 00:12:53,600
evaluation places is leakage resilient

327
00:12:53,600 --> 00:12:54,480
even

328
00:12:54,480 --> 00:12:57,440
if the reconstruction threshold is only

329
00:12:57,440 --> 00:12:58,560
2

330
00:12:58,560 --> 00:13:01,279
and the number of parties can be

331
00:13:01,279 --> 00:13:03,680
ending any polynomial in the security

332
00:13:03,680 --> 00:13:04,880
parameter

333
00:13:04,880 --> 00:13:06,720
and the number of bits leaked from every

334
00:13:06,720 --> 00:13:08,639
secret share can be an arbitrary

335
00:13:08,639 --> 00:13:11,279
constant m

336
00:13:12,000 --> 00:13:14,160
so um

337
00:13:14,160 --> 00:13:17,600
note that this work also employs the

338
00:13:17,600 --> 00:13:20,399
existing fourier analytic approach

339
00:13:20,399 --> 00:13:22,800
and they prove a result

340
00:13:22,800 --> 00:13:25,279
they prove that it is leakage resilient

341
00:13:25,279 --> 00:13:29,279
even when k is less than half of n

342
00:13:29,279 --> 00:13:32,079
however this result does not contradict

343
00:13:32,079 --> 00:13:34,720
the bottleneck we presented

344
00:13:34,720 --> 00:13:37,360
because they only considered a physical

345
00:13:37,360 --> 00:13:39,040
leakage

346
00:13:39,040 --> 00:13:41,120
in particular the counter example that

347
00:13:41,120 --> 00:13:43,600
we raised that testing whether a field

348
00:13:43,600 --> 00:13:46,320
element is a quadratic residue or not

349
00:13:46,320 --> 00:13:48,959
cannot be learned through a physical bit

350
00:13:48,959 --> 00:13:51,359
leakage

351
00:13:52,639 --> 00:13:54,000
and to put

352
00:13:54,000 --> 00:13:56,000
this work into perspective

353
00:13:56,000 --> 00:13:58,399
um they also consider a randomized

354
00:13:58,399 --> 00:13:59,839
construction

355
00:13:59,839 --> 00:14:02,399
but their code generator matrix sampled

356
00:14:02,399 --> 00:14:05,680
not fully random but from this

357
00:14:05,680 --> 00:14:07,040
distribution

358
00:14:07,040 --> 00:14:10,079
and they consider a very

359
00:14:10,079 --> 00:14:12,639
severely restricted leakage family

360
00:14:12,639 --> 00:14:14,880
namely the physical bed leakage but they

361
00:14:14,880 --> 00:14:17,199
prove a very strong result that the

362
00:14:17,199 --> 00:14:19,440
reconstruct reconstruction threshold can

363
00:14:19,440 --> 00:14:22,079
be a constant as low as two

364
00:14:22,079 --> 00:14:26,800
and an unbounded number of parties

365
00:14:27,760 --> 00:14:28,639
okay

366
00:14:28,639 --> 00:14:31,360
so now let me give you a very brief

367
00:14:31,360 --> 00:14:34,079
high uh technical overview

368
00:14:34,079 --> 00:14:36,160
to recall that we want to prove that

369
00:14:36,160 --> 00:14:38,240
macy's secret sharing schemes

370
00:14:38,240 --> 00:14:40,480
corresponding to a random matrix is

371
00:14:40,480 --> 00:14:42,720
leakage resilient as long as k is

372
00:14:42,720 --> 00:14:45,839
greater than half of n

373
00:14:45,920 --> 00:14:46,720
so

374
00:14:46,720 --> 00:14:48,800
the the major

375
00:14:48,800 --> 00:14:51,040
challenging part about this result is

376
00:14:51,040 --> 00:14:54,399
that a typical union bound will not

377
00:14:54,399 --> 00:14:55,760
have worked

378
00:14:55,760 --> 00:14:58,079
so for example consider this very

379
00:14:58,079 --> 00:15:00,800
straightforward proof strategy

380
00:15:00,800 --> 00:15:03,360
let's say you fix a leakage function l

381
00:15:03,360 --> 00:15:06,639
and you prove that most code are secure

382
00:15:06,639 --> 00:15:08,639
against this l

383
00:15:08,639 --> 00:15:10,800
and then your union bound over all the

384
00:15:10,800 --> 00:15:12,959
possible choices of the leakage function

385
00:15:12,959 --> 00:15:13,839
l

386
00:15:13,839 --> 00:15:16,959
and that gives you the result

387
00:15:16,959 --> 00:15:19,839
however this won't work

388
00:15:19,839 --> 00:15:21,040
why

389
00:15:21,040 --> 00:15:22,880
because the total number of leakage

390
00:15:22,880 --> 00:15:25,279
functions is very large

391
00:15:25,279 --> 00:15:27,360
for example let's assume that you are

392
00:15:27,360 --> 00:15:30,000
learning one bit from every secret share

393
00:15:30,000 --> 00:15:33,440
so the leakage function l is

394
00:15:33,440 --> 00:15:36,240
the domain is the field f the range is 0

395
00:15:36,240 --> 00:15:37,040
1

396
00:15:37,040 --> 00:15:39,519
so the number of leakage functions is 2

397
00:15:39,519 --> 00:15:42,560
to the power of f

398
00:15:42,720 --> 00:15:44,480
the number of leakage function for every

399
00:15:44,480 --> 00:15:46,880
secret share is 2 to the power f

400
00:15:46,880 --> 00:15:48,480
and then the total number of leakage

401
00:15:48,480 --> 00:15:51,680
functions from n shares is the nth power

402
00:15:51,680 --> 00:15:53,040
of this

403
00:15:53,040 --> 00:15:55,680
so the important point is that the

404
00:15:55,680 --> 00:15:57,519
number of leakage functions is doubly

405
00:15:57,519 --> 00:16:00,079
exponential because the field size is

406
00:16:00,079 --> 00:16:02,560
single exponential

407
00:16:02,560 --> 00:16:05,600
in comparison if you look at our

408
00:16:05,600 --> 00:16:07,759
family of constructions

409
00:16:07,759 --> 00:16:10,399
the construction is solely determined by

410
00:16:10,399 --> 00:16:12,240
the generator matrix

411
00:16:12,240 --> 00:16:15,360
which is of dimension roughly k by n

412
00:16:15,360 --> 00:16:17,440
so the number of

413
00:16:17,440 --> 00:16:20,320
constructions is f to the power k times

414
00:16:20,320 --> 00:16:21,600
n

415
00:16:21,600 --> 00:16:23,519
is roughly this much

416
00:16:23,519 --> 00:16:26,000
which is single exponential

417
00:16:26,000 --> 00:16:27,680
so the number of leakage functions is

418
00:16:27,680 --> 00:16:29,279
much much larger than the family of

419
00:16:29,279 --> 00:16:32,000
constructions so you cannot hope to use

420
00:16:32,000 --> 00:16:34,720
a union bound over the choices of l to

421
00:16:34,720 --> 00:16:38,320
prove the k resilience

422
00:16:38,320 --> 00:16:40,880
so the technical novelty of our proof is

423
00:16:40,880 --> 00:16:41,680
that

424
00:16:41,680 --> 00:16:45,360
we identified a new set of tests

425
00:16:45,360 --> 00:16:46,480
so

426
00:16:46,480 --> 00:16:50,000
the proof choses gamma sigma and a

427
00:16:50,000 --> 00:16:53,040
appropriately and they are constants

428
00:16:53,040 --> 00:16:56,240
so a test is specified by a product

429
00:16:56,240 --> 00:17:01,600
space v which is v 1 cross v 2 cross v

430
00:17:01,600 --> 00:17:02,800
so

431
00:17:02,800 --> 00:17:03,759
the

432
00:17:03,759 --> 00:17:08,240
every vi is of a constant size gamma

433
00:17:08,240 --> 00:17:11,199
so we say a code word c

434
00:17:11,199 --> 00:17:15,679
is bad or fails fails this test v

435
00:17:15,679 --> 00:17:18,640
if a large fraction of the coordinates

436
00:17:18,640 --> 00:17:20,799
fall inside this

437
00:17:20,799 --> 00:17:22,160
vi

438
00:17:22,160 --> 00:17:24,559
so that is the number of

439
00:17:24,559 --> 00:17:26,319
the set of indices

440
00:17:26,319 --> 00:17:28,720
where ci is in vi

441
00:17:28,720 --> 00:17:31,600
if this set is too large we say this

442
00:17:31,600 --> 00:17:33,760
code word is bad

443
00:17:33,760 --> 00:17:36,880
and we say that a code g

444
00:17:36,880 --> 00:17:38,799
passes the test

445
00:17:38,799 --> 00:17:42,400
if only few code words less than 8

446
00:17:42,400 --> 00:17:45,280
which is appropriately chosen constant a

447
00:17:45,280 --> 00:17:49,039
a to the power n code words are bad

448
00:17:49,039 --> 00:17:51,520
so to give you some intuition about this

449
00:17:51,520 --> 00:17:52,559
test

450
00:17:52,559 --> 00:17:54,080
um so

451
00:17:54,080 --> 00:17:56,720
if you fix any leakage function l1 l2

452
00:17:56,720 --> 00:17:59,679
and ln where li is the leakage function

453
00:17:59,679 --> 00:18:01,600
on the i share

454
00:18:01,600 --> 00:18:05,039
the vi will be the set of

455
00:18:05,039 --> 00:18:07,919
field elements that are

456
00:18:07,919 --> 00:18:10,240
who has large fourier coefficient

457
00:18:10,240 --> 00:18:12,799
corresponding to li

458
00:18:12,799 --> 00:18:16,480
and if a code passes all the

459
00:18:16,480 --> 00:18:18,080
test v

460
00:18:18,080 --> 00:18:20,000
we're going to prove that it is leakage

461
00:18:20,000 --> 00:18:22,080
resilient against all the

462
00:18:22,080 --> 00:18:24,160
leakage functions

463
00:18:24,160 --> 00:18:26,640
so the intuition behind that is that

464
00:18:26,640 --> 00:18:28,799
for any leakage functions

465
00:18:28,799 --> 00:18:32,240
this code will only have few code words

466
00:18:32,240 --> 00:18:34,799
that has many coordinates with large

467
00:18:34,799 --> 00:18:37,918
fourier coefficients

468
00:18:38,000 --> 00:18:41,280
so this uh set of tests this definition

469
00:18:41,280 --> 00:18:43,679
is inspired by literature in

470
00:18:43,679 --> 00:18:45,440
pseudo-randomness

471
00:18:45,440 --> 00:18:47,039
so intuitively

472
00:18:47,039 --> 00:18:50,640
um if if an object

473
00:18:50,640 --> 00:18:52,640
has a low correlation with all the

474
00:18:52,640 --> 00:18:55,039
fourier characters you can think of it

475
00:18:55,039 --> 00:18:57,440
as being pseudo random

476
00:18:57,440 --> 00:19:00,559
so here we are saying that a code g is

477
00:19:00,559 --> 00:19:02,160
pseudorandom

478
00:19:02,160 --> 00:19:05,520
if it does not have too many code words

479
00:19:05,520 --> 00:19:09,320
that are not pseudo-random

480
00:19:10,160 --> 00:19:12,000
so uh

481
00:19:12,000 --> 00:19:15,760
the benefit of defining this this uh

482
00:19:15,760 --> 00:19:18,480
set of tests is that number of tests is

483
00:19:18,480 --> 00:19:20,240
actually much smaller

484
00:19:20,240 --> 00:19:22,880
so here is a simple counting argument

485
00:19:22,880 --> 00:19:25,360
and remember that the

486
00:19:25,360 --> 00:19:28,640
test is specified by a product space v

487
00:19:28,640 --> 00:19:31,280
where every vi is of a constant size

488
00:19:31,280 --> 00:19:32,240
gamma

489
00:19:32,240 --> 00:19:34,160
so the number of tests is roughly this

490
00:19:34,160 --> 00:19:34,960
much

491
00:19:34,960 --> 00:19:37,360
which is single exponential

492
00:19:37,360 --> 00:19:39,039
in comparison the total number of

493
00:19:39,039 --> 00:19:42,880
leakage functions is double exponential

494
00:19:42,880 --> 00:19:45,360
so given this set of tests we are going

495
00:19:45,360 --> 00:19:47,120
to prove decage

496
00:19:47,120 --> 00:19:49,039
resilience as follows

497
00:19:49,039 --> 00:19:51,679
so you fix any test v and they prove

498
00:19:51,679 --> 00:19:54,640
that the most g's will passes this test

499
00:19:54,640 --> 00:19:55,440
v

500
00:19:55,440 --> 00:19:57,760
this is uh based on the combinatorial

501
00:19:57,760 --> 00:19:59,440
argument

502
00:19:59,440 --> 00:20:01,679
and then you can use a union amount

503
00:20:01,679 --> 00:20:03,520
thanks to the fact that number of tests

504
00:20:03,520 --> 00:20:04,960
is small

505
00:20:04,960 --> 00:20:07,919
to prove that most of g's passes all the

506
00:20:07,919 --> 00:20:09,919
tests

507
00:20:09,919 --> 00:20:10,960
and

508
00:20:10,960 --> 00:20:12,960
the third step is that the given ending

509
00:20:12,960 --> 00:20:15,679
code g that passes all the tests we're

510
00:20:15,679 --> 00:20:17,679
going to prove that g is leakage

511
00:20:17,679 --> 00:20:19,120
resilience

512
00:20:19,120 --> 00:20:20,960
and this step is

513
00:20:20,960 --> 00:20:23,360
based on the existing foreign analytical

514
00:20:23,360 --> 00:20:26,240
argument uh introduced by benjamin at

515
00:20:26,240 --> 00:20:27,280
all

516
00:20:27,280 --> 00:20:30,159
so this step is where we inherently

517
00:20:30,159 --> 00:20:35,840
requires k to be greater than half of n

518
00:20:36,400 --> 00:20:38,799
so finally let me say a few words about

519
00:20:38,799 --> 00:20:40,799
the bottleneck we proved

520
00:20:40,799 --> 00:20:43,360
so recall that we show that the existing

521
00:20:43,360 --> 00:20:45,600
fourier analytic approach cannot prove

522
00:20:45,600 --> 00:20:48,000
decay's resilience when k less than half

523
00:20:48,000 --> 00:20:49,600
of n

524
00:20:49,600 --> 00:20:51,760
and in particular it cannot even prove

525
00:20:51,760 --> 00:20:53,840
leakage resilience for this single

526
00:20:53,840 --> 00:20:56,799
function that is testing whether a

527
00:20:56,799 --> 00:20:58,880
secret share is a quadratic residue or

528
00:20:58,880 --> 00:21:00,480
not

529
00:21:00,480 --> 00:21:03,600
so if you are familiar with the the the

530
00:21:03,600 --> 00:21:05,760
uh fourier analytic approach

531
00:21:05,760 --> 00:21:08,720
the intuition behind that is that um

532
00:21:08,720 --> 00:21:09,760
the

533
00:21:09,760 --> 00:21:11,840
quadratic residue function is the

534
00:21:11,840 --> 00:21:14,159
function that maximize

535
00:21:14,159 --> 00:21:17,600
the l1 norm of the fourier coefficient

536
00:21:17,600 --> 00:21:18,640
this is

537
00:21:18,640 --> 00:21:20,799
the intuitively why

538
00:21:20,799 --> 00:21:23,440
uh this is the most devastating case for

539
00:21:23,440 --> 00:21:25,200
the current

540
00:21:25,200 --> 00:21:27,760
proof strategy

541
00:21:27,760 --> 00:21:30,320
so as i mentioned earlier we in some

542
00:21:30,320 --> 00:21:33,360
ongoing works we partially make progress

543
00:21:33,360 --> 00:21:34,880
to resolve this

544
00:21:34,880 --> 00:21:37,360
by using a purely combinatorical

545
00:21:37,360 --> 00:21:41,280
argument to prove the uh to prove that

546
00:21:41,280 --> 00:21:44,320
uh for any small enough leakage family l

547
00:21:44,320 --> 00:21:47,039
a random call g is leakage resilient

548
00:21:47,039 --> 00:21:48,559
against this l

549
00:21:48,559 --> 00:21:50,720
well this l could potentially contain

550
00:21:50,720 --> 00:21:52,720
this

551
00:21:52,720 --> 00:21:55,280
quadratic residue function

552
00:21:55,280 --> 00:21:57,280
and we also have other ongoing works

553
00:21:57,280 --> 00:22:00,799
that identifies the optimal leakage

554
00:22:00,799 --> 00:22:04,559
attacks in appropriate settings

555
00:22:04,559 --> 00:22:05,520
so

556
00:22:05,520 --> 00:22:07,280
with that i would like to conclude my

557
00:22:07,280 --> 00:22:09,919
talk and i will refer you to the full

558
00:22:09,919 --> 00:22:12,720
version of our paper for for the

559
00:22:12,720 --> 00:22:15,200
additional subtleties in the proof

560
00:22:15,200 --> 00:22:18,360
thank you

