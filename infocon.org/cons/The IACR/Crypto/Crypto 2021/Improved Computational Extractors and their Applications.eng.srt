1
00:00:00,480 --> 00:00:03,360
hi everyone this talk will be about

2
00:00:03,360 --> 00:00:05,920
improved computational extractors and

3
00:00:05,920 --> 00:00:07,839
their applications

4
00:00:07,839 --> 00:00:10,000
this is based on joint work with

5
00:00:10,000 --> 00:00:15,719
akshayram srinivasan who is at tifr

6
00:00:16,720 --> 00:00:19,279
let me begin by introducing you to our

7
00:00:19,279 --> 00:00:21,680
setting

8
00:00:21,840 --> 00:00:24,080
we consider the problem of randomness

9
00:00:24,080 --> 00:00:25,760
extraction

10
00:00:25,760 --> 00:00:28,400
randomness is actually extremely useful

11
00:00:28,400 --> 00:00:30,240
for all sorts of cryptographic

12
00:00:30,240 --> 00:00:32,320
applications

13
00:00:32,320 --> 00:00:34,480
it is often obtained from physical

14
00:00:34,480 --> 00:00:37,120
sources sources which are usually

15
00:00:37,120 --> 00:00:39,680
imperfect

16
00:00:39,760 --> 00:00:41,680
in many settings an adversary may be

17
00:00:41,680 --> 00:00:44,000
able to obtain side information about

18
00:00:44,000 --> 00:00:46,239
the randomness that was generated

19
00:00:46,239 --> 00:00:48,079
and therefore be able to attack the

20
00:00:48,079 --> 00:00:49,440
system

21
00:00:49,440 --> 00:00:51,760
and there have been in fact instances in

22
00:00:51,760 --> 00:00:53,440
the literature that have demonstrated

23
00:00:53,440 --> 00:00:56,000
that cryptography instantiated with

24
00:00:56,000 --> 00:00:58,480
imperfect randomness can often be broken

25
00:00:58,480 --> 00:01:00,719
completely

26
00:01:00,719 --> 00:01:03,440
so the question that we look at is

27
00:01:03,440 --> 00:01:05,519
whether weak random sources can be

28
00:01:05,519 --> 00:01:08,479
converted into stronger ones

29
00:01:08,479 --> 00:01:11,200
now we study this question in various

30
00:01:11,200 --> 00:01:13,439
settings included in distributed

31
00:01:13,439 --> 00:01:15,439
settings where randomness is split

32
00:01:15,439 --> 00:01:17,920
between many sources some of which may

33
00:01:17,920 --> 00:01:20,080
be adversarial

34
00:01:20,080 --> 00:01:23,680
let me begin by making more precise what

35
00:01:23,680 --> 00:01:27,119
a weak source is a weak source is

36
00:01:27,119 --> 00:01:30,079
represented by a distribution on n bits

37
00:01:30,079 --> 00:01:32,159
that has min entropy k

38
00:01:32,159 --> 00:01:33,520
where k is

39
00:01:33,520 --> 00:01:35,520
smaller than n

40
00:01:35,520 --> 00:01:38,159
a min entropy of k bits corresponds to

41
00:01:38,159 --> 00:01:40,479
each point in the distribution being

42
00:01:40,479 --> 00:01:43,119
selected with probability at most 2 to

43
00:01:43,119 --> 00:01:45,040
the minus k

44
00:01:45,040 --> 00:01:47,119
an example of a weak source with main

45
00:01:47,119 --> 00:01:50,000
entropy k is the uniform distribution

46
00:01:50,000 --> 00:01:52,880
on subset of size

47
00:01:52,880 --> 00:01:57,360
2 to the k in 0 1 to the n

48
00:02:00,399 --> 00:02:03,360
randomness extractors help convert weak

49
00:02:03,360 --> 00:02:05,920
sources of entropy to nearly uniform

50
00:02:05,920 --> 00:02:07,680
sources

51
00:02:07,680 --> 00:02:10,160
say we have a weak random source with k

52
00:02:10,160 --> 00:02:14,160
bits of entropy on an n bit input space

53
00:02:14,160 --> 00:02:15,599
ideally we would like to have a

54
00:02:15,599 --> 00:02:18,160
deterministic algorithm that converts

55
00:02:18,160 --> 00:02:20,319
this into a nearly uniformly random

56
00:02:20,319 --> 00:02:23,040
source on mbits where m can be as large

57
00:02:23,040 --> 00:02:24,959
as k

58
00:02:24,959 --> 00:02:26,959
unfortunately it turns out that this

59
00:02:26,959 --> 00:02:29,360
dream deterministic extractor simply

60
00:02:29,360 --> 00:02:31,760
cannot exist even for really weak

61
00:02:31,760 --> 00:02:34,080
parameter settings say we just want to

62
00:02:34,080 --> 00:02:36,480
extract one bit of randomness and the

63
00:02:36,480 --> 00:02:38,879
source has almost full main entropy it

64
00:02:38,879 --> 00:02:41,120
has main entropy and minus one and we

65
00:02:41,120 --> 00:02:43,280
want the resulting distribution to have

66
00:02:43,280 --> 00:02:45,840
a statistical distance of at most a

67
00:02:45,840 --> 00:02:47,599
fourth from the uniform distribution on

68
00:02:47,599 --> 00:02:50,239
a single bit even in these settings

69
00:02:50,239 --> 00:02:54,879
deterministic extractors are impossible

70
00:02:54,879 --> 00:02:57,920
what is possible is actually a variant

71
00:02:57,920 --> 00:03:00,800
that takes the help of a short uniformly

72
00:03:00,800 --> 00:03:03,599
random seed to convert an n-bit source

73
00:03:03,599 --> 00:03:06,720
with min entropy k to an almost k bit

74
00:03:06,720 --> 00:03:08,720
uniform distribution

75
00:03:08,720 --> 00:03:10,640
this is pictorially represented on the

76
00:03:10,640 --> 00:03:13,120
slide here as an algorithm that on input

77
00:03:13,120 --> 00:03:15,760
a source and a seed outputs a

78
00:03:15,760 --> 00:03:18,480
distribution that's close to uniform

79
00:03:18,480 --> 00:03:20,319
in fact the size of the seed can

80
00:03:20,319 --> 00:03:22,000
actually be much smaller than the main

81
00:03:22,000 --> 00:03:24,400
entropy of the input source or the size

82
00:03:24,400 --> 00:03:26,720
of the output source

83
00:03:26,720 --> 00:03:29,120
for example guru swami at all show that

84
00:03:29,120 --> 00:03:31,040
the min entropy can be as small as poly

85
00:03:31,040 --> 00:03:33,280
logarithmic the size of the seed can

86
00:03:33,280 --> 00:03:35,200
also be poly logarithmic and in this

87
00:03:35,200 --> 00:03:37,680
setting the error can be a negligible

88
00:03:37,680 --> 00:03:41,360
function of the size of the source

89
00:03:41,440 --> 00:03:43,519
the definition of a seeded extractor can

90
00:03:43,519 --> 00:03:45,040
be further strengthened to what is

91
00:03:45,040 --> 00:03:47,200
called a strong seeded extractor where

92
00:03:47,200 --> 00:03:48,799
the requirement is that the output

93
00:03:48,799 --> 00:03:50,480
distribution be statistically

94
00:03:50,480 --> 00:03:52,879
indistinguishable from random even given

95
00:03:52,879 --> 00:03:55,120
the seed

96
00:03:55,120 --> 00:03:57,200
the problem with seeded extractors is

97
00:03:57,200 --> 00:03:59,360
that you need the seed which is itself a

98
00:03:59,360 --> 00:04:02,400
uniform independent source of randomness

99
00:04:02,400 --> 00:04:04,959
the next primitive that we look at a two

100
00:04:04,959 --> 00:04:07,760
source extractor relaxes this so that

101
00:04:07,760 --> 00:04:09,920
the source and the seed are both

102
00:04:09,920 --> 00:04:12,319
imperfect

103
00:04:12,319 --> 00:04:14,640
a two source extractor considers a

104
00:04:14,640 --> 00:04:16,880
setting where there are two weak sources

105
00:04:16,880 --> 00:04:18,720
of randomness that have a certain amount

106
00:04:18,720 --> 00:04:21,040
of min entropy and the only assumption

107
00:04:21,040 --> 00:04:23,360
is that the two sources are independent

108
00:04:23,360 --> 00:04:25,759
but neither of them needs to be uniform

109
00:04:25,759 --> 00:04:27,600
they also don't necessarily need to be

110
00:04:27,600 --> 00:04:29,840
the same size or have the same amount of

111
00:04:29,840 --> 00:04:32,160
entropy and really the assumption is

112
00:04:32,160 --> 00:04:35,040
just that they should be independent

113
00:04:35,040 --> 00:04:36,639
a two-source extractor is a

114
00:04:36,639 --> 00:04:38,800
deterministic algorithm that given such

115
00:04:38,800 --> 00:04:40,960
independent sources with sufficient

116
00:04:40,960 --> 00:04:43,440
entropy outputs a distribution that is

117
00:04:43,440 --> 00:04:46,160
close to uniformly random

118
00:04:46,160 --> 00:04:48,479
and for a long time we only knew how to

119
00:04:48,479 --> 00:04:50,720
extract randomness in this setting when

120
00:04:50,720 --> 00:04:52,960
at least one of the sources had min

121
00:04:52,960 --> 00:04:57,320
entropy about half of n

122
00:05:01,600 --> 00:05:04,479
a recent breakthrough work of chatopathy

123
00:05:04,479 --> 00:05:06,960
and zuckerman broke down this barrier

124
00:05:06,960 --> 00:05:08,960
and built two source extractors in the

125
00:05:08,960 --> 00:05:11,440
setting where both sources have poly

126
00:05:11,440 --> 00:05:13,600
logarithmic mean entropy

127
00:05:13,600 --> 00:05:15,919
these factors were further improved in

128
00:05:15,919 --> 00:05:18,160
several works

129
00:05:18,160 --> 00:05:20,320
in all these works that achieve

130
00:05:20,320 --> 00:05:22,720
polylogarithmic main entropy in the

131
00:05:22,720 --> 00:05:25,120
setting however the running time of the

132
00:05:25,120 --> 00:05:27,280
extractor turned out to be inversely

133
00:05:27,280 --> 00:05:29,759
proportional to the desired error

134
00:05:29,759 --> 00:05:31,600
in particular this means that the error

135
00:05:31,600 --> 00:05:34,000
cannot be negligible in n as that would

136
00:05:34,000 --> 00:05:36,000
lead to inefficient constructions in

137
00:05:36,000 --> 00:05:39,240
these settings

138
00:05:43,360 --> 00:05:45,120
the dream especially from a

139
00:05:45,120 --> 00:05:47,360
cryptographic point of view would be to

140
00:05:47,360 --> 00:05:49,440
have information theoretic two-source

141
00:05:49,440 --> 00:05:52,320
extractors where both sources can have

142
00:05:52,320 --> 00:05:54,960
as low as poly logarithmic main entropy

143
00:05:54,960 --> 00:05:56,800
and yet the

144
00:05:56,800 --> 00:05:59,520
error would be negligible in n and the

145
00:05:59,520 --> 00:06:01,919
running time of the extractor

146
00:06:01,919 --> 00:06:05,680
would would still remain polynomial

147
00:06:05,680 --> 00:06:07,520
alternatively this means that we'd like

148
00:06:07,520 --> 00:06:09,440
the running time of the extractor to be

149
00:06:09,440 --> 00:06:12,080
inversely proportional to the log of 1

150
00:06:12,080 --> 00:06:14,319
over epsilon

151
00:06:14,319 --> 00:06:16,319
it is unclear if this is possible

152
00:06:16,319 --> 00:06:18,319
information theoretically

153
00:06:18,319 --> 00:06:20,319
and at least appears to be a hard

154
00:06:20,319 --> 00:06:22,720
problem

155
00:06:22,720 --> 00:06:25,120
so while we work on trying to solve this

156
00:06:25,120 --> 00:06:27,520
problem

157
00:06:27,520 --> 00:06:30,319
a natural question is whether two source

158
00:06:30,319 --> 00:06:33,440
extractors with negligible error

159
00:06:33,440 --> 00:06:36,479
with low main entropy can be achieved

160
00:06:36,479 --> 00:06:40,400
under computational assumptions

161
00:06:40,400 --> 00:06:42,319
prior work has indicated that if the

162
00:06:42,319 --> 00:06:44,880
assumptions are sufficiently strong then

163
00:06:44,880 --> 00:06:46,960
the answer is yes

164
00:06:46,960 --> 00:06:49,120
in particular assuming an optimally

165
00:06:49,120 --> 00:06:51,680
exponentially hard one-way permutation

166
00:06:51,680 --> 00:06:54,479
kali lee and rao showed that one can in

167
00:06:54,479 --> 00:06:57,520
fact obtain negligible error extractors

168
00:06:57,520 --> 00:07:00,560
with forming entropy epsilon n where

169
00:07:00,560 --> 00:07:03,840
epsilon is smaller than half

170
00:07:03,840 --> 00:07:05,280
more recently

171
00:07:05,280 --> 00:07:07,120
under the sub exponential hardness of

172
00:07:07,120 --> 00:07:10,080
ddh in joint work with ankit gerg and

173
00:07:10,080 --> 00:07:12,639
yail kalai we showed that one can weaken

174
00:07:12,639 --> 00:07:15,919
the assumption to sub exponential ddh

175
00:07:15,919 --> 00:07:18,240
but this comes at the cost of assuming

176
00:07:18,240 --> 00:07:21,680
the existence of a common random string

177
00:07:21,680 --> 00:07:23,280
in more detail

178
00:07:23,280 --> 00:07:25,360
this involves a trusted setup phase

179
00:07:25,360 --> 00:07:27,199
where a random string is sampled

180
00:07:27,199 --> 00:07:31,599
uniformly and fixed once and for all

181
00:07:31,599 --> 00:07:33,440
then a source distribution can be

182
00:07:33,440 --> 00:07:35,440
sampled arbitrarily depending on the

183
00:07:35,440 --> 00:07:37,440
string

184
00:07:37,440 --> 00:07:39,120
this actually differs from the setting

185
00:07:39,120 --> 00:07:41,599
of seeded extractors but crucially the

186
00:07:41,599 --> 00:07:43,440
source and seed must be

187
00:07:43,440 --> 00:07:45,759
independent of each other

188
00:07:45,759 --> 00:07:47,919
and so what this model basically does is

189
00:07:47,919 --> 00:07:50,639
reduce the need for true randomness to a

190
00:07:50,639 --> 00:07:54,080
single one-time requirement

191
00:07:54,080 --> 00:07:56,560
in that work the amount of entropy that

192
00:07:56,560 --> 00:07:58,800
we could work with was sublinear for the

193
00:07:58,800 --> 00:08:00,800
first source and poly logarithmic for

194
00:08:00,800 --> 00:08:02,240
the second one

195
00:08:02,240 --> 00:08:04,240
and like i said before ideally one would

196
00:08:04,240 --> 00:08:06,000
like to be able to deal with polylog

197
00:08:06,000 --> 00:08:08,639
arithmic men entropy for both sources

198
00:08:08,639 --> 00:08:13,080
and yet achieve negligible error

199
00:08:16,000 --> 00:08:19,520
subsequently agarwal at all obtained

200
00:08:19,520 --> 00:08:21,560
sublinear entropy assuming

201
00:08:21,560 --> 00:08:24,240
quasipolynomial ddh and obtain

202
00:08:24,240 --> 00:08:26,639
extractors for poly logarithmic main

203
00:08:26,639 --> 00:08:29,440
entropy sources assuming optimally hard

204
00:08:29,440 --> 00:08:31,520
collision resistant hashing and these

205
00:08:31,520 --> 00:08:33,360
are essentially exponential hardness

206
00:08:33,360 --> 00:08:36,000
assumptions

207
00:08:37,839 --> 00:08:40,240
this brings me to the first part of our

208
00:08:40,240 --> 00:08:42,719
work where we perform a different

209
00:08:42,719 --> 00:08:46,320
analysis of the gkk extractor to obtain

210
00:08:46,320 --> 00:08:49,519
improved parameters

211
00:08:50,720 --> 00:08:52,399
just like in

212
00:08:52,399 --> 00:08:54,720
gkk which is the work i was just telling

213
00:08:54,720 --> 00:08:59,120
you about we also focus on the crs model

214
00:08:59,120 --> 00:09:01,040
in this model we perform a different

215
00:09:01,040 --> 00:09:04,240
analysis of the gkk extractor

216
00:09:04,240 --> 00:09:06,399
while theirs was more general in some

217
00:09:06,399 --> 00:09:09,040
sense ours is more tailored to their

218
00:09:09,040 --> 00:09:11,360
specific construction

219
00:09:11,360 --> 00:09:14,399
in contrast with gkk we are able to

220
00:09:14,399 --> 00:09:17,440
handle balanced sources meaning both

221
00:09:17,440 --> 00:09:19,200
sources are allowed to have the same

222
00:09:19,200 --> 00:09:22,000
length whereas gkk explicitly required

223
00:09:22,000 --> 00:09:23,760
some sort of imbalance between the

224
00:09:23,760 --> 00:09:25,200
sources

225
00:09:25,200 --> 00:09:28,080
moreover each source only needs to have

226
00:09:28,080 --> 00:09:31,040
poly logarithmic mean entropy on the

227
00:09:31,040 --> 00:09:33,839
other hand the analysis in gkk

228
00:09:33,839 --> 00:09:35,040
required

229
00:09:35,040 --> 00:09:38,160
sublinear entropy in one of the sources

230
00:09:38,160 --> 00:09:39,920
and finally

231
00:09:39,920 --> 00:09:42,240
our extractors just like the our

232
00:09:42,240 --> 00:09:44,880
analysis just like the one in gkk shows

233
00:09:44,880 --> 00:09:47,279
that the extractor has negligible in n

234
00:09:47,279 --> 00:09:50,000
error

235
00:09:50,000 --> 00:09:53,040
we also obtain improved parameters

236
00:09:53,040 --> 00:09:55,519
albeit in the computational setting for

237
00:09:55,519 --> 00:09:57,920
new types of primitives where randomness

238
00:09:57,920 --> 00:10:00,480
is required to be extracted even in the

239
00:10:00,480 --> 00:10:05,200
presence of adversarial attacks

240
00:10:05,200 --> 00:10:07,360
before going into the details of our

241
00:10:07,360 --> 00:10:09,839
analysis let me give you a high level

242
00:10:09,839 --> 00:10:14,480
overview of the gk extractor

243
00:10:14,480 --> 00:10:17,200
they build their extractor in two steps

244
00:10:17,200 --> 00:10:19,839
the first is to build what is called a

245
00:10:19,839 --> 00:10:22,800
computational non-malleable extractor

246
00:10:22,800 --> 00:10:23,600
for

247
00:10:23,600 --> 00:10:25,760
relatively high entropy sources in the

248
00:10:25,760 --> 00:10:27,600
crs model

249
00:10:27,600 --> 00:10:29,920
this is done by repurposing a

250
00:10:29,920 --> 00:10:33,600
construction due to brevard veneto

251
00:10:33,600 --> 00:10:35,519
a non-valuable extractor is a

252
00:10:35,519 --> 00:10:38,000
strengthened version of an extractor

253
00:10:38,000 --> 00:10:40,079
that we will define in more detail on

254
00:10:40,079 --> 00:10:42,880
upcoming slides

255
00:10:42,880 --> 00:10:44,640
for now once they have this

256
00:10:44,640 --> 00:10:47,600
non-malleable extractor in the crs model

257
00:10:47,600 --> 00:10:51,279
they apply a template of benaroya at all

258
00:10:51,279 --> 00:10:54,240
to compile any non-malleable extractor

259
00:10:54,240 --> 00:10:56,720
for sufficiently high entropy sources

260
00:10:56,720 --> 00:10:59,040
into a two source extractor for low

261
00:10:59,040 --> 00:11:01,200
entropy sources

262
00:11:01,200 --> 00:11:03,040
this template was originally designed

263
00:11:03,040 --> 00:11:05,360
for the information theoretic setting

264
00:11:05,360 --> 00:11:07,839
but gkk show how to apply it to the

265
00:11:07,839 --> 00:11:12,920
computational setting in the crs model

266
00:11:14,000 --> 00:11:16,880
both these steps they show can be done

267
00:11:16,880 --> 00:11:20,240
while only obtained by with the error

268
00:11:20,240 --> 00:11:23,040
being only negligible

269
00:11:23,040 --> 00:11:25,360
we will now go ahead and define what a

270
00:11:25,360 --> 00:11:28,720
non-malleable extractor is

271
00:11:28,720 --> 00:11:31,760
a non-malleable extractor can be seeded

272
00:11:31,760 --> 00:11:34,399
that is involve an entropic source and a

273
00:11:34,399 --> 00:11:35,839
uniform seed

274
00:11:35,839 --> 00:11:37,600
or b2 source

275
00:11:37,600 --> 00:11:40,399
that is involve two independent entropic

276
00:11:40,399 --> 00:11:41,600
sources

277
00:11:41,600 --> 00:11:43,519
for the purpose of this talk we will

278
00:11:43,519 --> 00:11:45,360
only consider strong seeded

279
00:11:45,360 --> 00:11:47,839
non-malleable extractors for which we

280
00:11:47,839 --> 00:11:50,240
have the following definition

281
00:11:50,240 --> 00:11:52,320
just like a seeded extractor a

282
00:11:52,320 --> 00:11:54,720
non-malleable extractor on input x

283
00:11:54,720 --> 00:11:57,200
sampled from the source distribution and

284
00:11:57,200 --> 00:12:00,399
a seed outputs a new output something

285
00:12:00,399 --> 00:12:02,880
that's supposed to be uniformly random

286
00:12:02,880 --> 00:12:04,880
but the security requirement here is

287
00:12:04,880 --> 00:12:07,279
stronger this requirement is that the

288
00:12:07,279 --> 00:12:10,000
output of the non-malleable extractor be

289
00:12:10,000 --> 00:12:12,399
indistinguishable from uniform even

290
00:12:12,399 --> 00:12:14,480
given

291
00:12:14,480 --> 00:12:17,200
access to an oracle

292
00:12:17,200 --> 00:12:20,000
this oracle can be queried on any string

293
00:12:20,000 --> 00:12:23,120
y that is not equal to the seed and it

294
00:12:23,120 --> 00:12:25,200
returns the output of the non-malleable

295
00:12:25,200 --> 00:12:29,600
extractor computed on x and y

296
00:12:29,600 --> 00:12:31,760
in the information theoretic setting one

297
00:12:31,760 --> 00:12:33,920
typically needs to bound the number of

298
00:12:33,920 --> 00:12:36,839
times the adversary can query such an

299
00:12:36,839 --> 00:12:39,760
oracle in the computational setting

300
00:12:39,760 --> 00:12:42,079
non-malleable extractors can be defined

301
00:12:42,079 --> 00:12:43,920
similarly

302
00:12:43,920 --> 00:12:45,760
like the information theoretic setting

303
00:12:45,760 --> 00:12:49,120
they can be seeded or to source

304
00:12:49,120 --> 00:12:51,120
again for the purposes of this talk we

305
00:12:51,120 --> 00:12:52,639
will care about strong seeded

306
00:12:52,639 --> 00:12:54,800
non-malleable extractors

307
00:12:54,800 --> 00:12:57,040
with computational indistinguishability

308
00:12:57,040 --> 00:13:01,519
from uniform in the crs model

309
00:13:01,680 --> 00:13:03,360
the one key difference from the

310
00:13:03,360 --> 00:13:05,519
information theoretic setting besides

311
00:13:05,519 --> 00:13:08,160
the existence of a crs will be that the

312
00:13:08,160 --> 00:13:10,720
adversary will be allowed to query this

313
00:13:10,720 --> 00:13:13,760
oracle an arbitrary polynomial number of

314
00:13:13,760 --> 00:13:16,160
times and we will have no

315
00:13:16,160 --> 00:13:18,880
explicit a priori upper bound on this

316
00:13:18,880 --> 00:13:21,680
polynomial

317
00:13:21,680 --> 00:13:24,399
this brings me back to the gk template

318
00:13:24,399 --> 00:13:26,639
for computational two source extractors

319
00:13:26,639 --> 00:13:29,120
with negligible error recall that there

320
00:13:29,120 --> 00:13:31,760
were two steps the first step built

321
00:13:31,760 --> 00:13:34,560
computational non-malleable extractors

322
00:13:34,560 --> 00:13:36,880
for high entropy sources in the crs

323
00:13:36,880 --> 00:13:37,839
model

324
00:13:37,839 --> 00:13:39,920
and the second one compiled any

325
00:13:39,920 --> 00:13:42,000
computational non-malleable extractors

326
00:13:42,000 --> 00:13:44,160
to two source extractors for low entropy

327
00:13:44,160 --> 00:13:45,519
sources

328
00:13:45,519 --> 00:13:48,959
now the second step actually was based

329
00:13:48,959 --> 00:13:51,519
on a blueprint first introduced in the

330
00:13:51,519 --> 00:13:53,920
work of ben aroya at all

331
00:13:53,920 --> 00:13:54,959
and

332
00:13:54,959 --> 00:13:57,279
it turns out that the proof technique of

333
00:13:57,279 --> 00:13:59,760
binauroa at all crucially had an

334
00:13:59,760 --> 00:14:00,839
inefficient

335
00:14:00,839 --> 00:14:03,279
reduction which means that given an

336
00:14:03,279 --> 00:14:05,279
efficient adversary for the two source

337
00:14:05,279 --> 00:14:07,440
extractor they actually ended up

338
00:14:07,440 --> 00:14:10,399
building an unbounded adversary for

339
00:14:10,399 --> 00:14:13,040
against the non-malleable extractor

340
00:14:13,040 --> 00:14:14,880
now while this works well in the

341
00:14:14,880 --> 00:14:17,040
information theoretic setting it breaks

342
00:14:17,040 --> 00:14:18,800
down completely when the non-malleable

343
00:14:18,800 --> 00:14:21,760
extractor is only computationally secure

344
00:14:21,760 --> 00:14:23,600
because of the lack of an efficient

345
00:14:23,600 --> 00:14:25,680
reduction

346
00:14:25,680 --> 00:14:28,560
to counter this barrier

347
00:14:28,560 --> 00:14:31,920
gkk used the leakage lemma of generics

348
00:14:31,920 --> 00:14:34,720
and jet f petrozag and chungatol to

349
00:14:34,720 --> 00:14:37,760
efficiently simulate inefficient steps

350
00:14:37,760 --> 00:14:40,880
in the reduction of benaroya at all

351
00:14:40,880 --> 00:14:44,079
and it is this use that led to them

352
00:14:44,079 --> 00:14:47,040
requiring unbalanced sources and

353
00:14:47,040 --> 00:14:49,440
was one of the reasons that

354
00:14:49,440 --> 00:14:51,920
they their analysis did not achieve poly

355
00:14:51,920 --> 00:14:54,880
logarithmic mean entropy

356
00:14:54,880 --> 00:14:57,600
in the new analysis in this current work

357
00:14:57,600 --> 00:15:00,320
we give up on having step 2 be a general

358
00:15:00,320 --> 00:15:02,959
compiler that compiles any computational

359
00:15:02,959 --> 00:15:05,040
non-malleable extractor to a two-source

360
00:15:05,040 --> 00:15:06,399
extractor

361
00:15:06,399 --> 00:15:08,320
instead we

362
00:15:08,320 --> 00:15:11,279
give a more specific analysis that is

363
00:15:11,279 --> 00:15:13,519
specific to the non-malleable extractor

364
00:15:13,519 --> 00:15:16,000
obtained in step one

365
00:15:16,000 --> 00:15:18,320
this allows us to perform a monolithic

366
00:15:18,320 --> 00:15:21,360
analysis of steps one and two together

367
00:15:21,360 --> 00:15:23,440
first stripping off all computational

368
00:15:23,440 --> 00:15:26,160
exp components until we obtain an

369
00:15:26,160 --> 00:15:28,480
information theoretic

370
00:15:28,480 --> 00:15:31,360
hypothetical experiment and it is only

371
00:15:31,360 --> 00:15:33,680
in this experiment that we must invert

372
00:15:33,680 --> 00:15:35,360
the dispersal

373
00:15:35,360 --> 00:15:37,839
this allows us to sidestep the need for

374
00:15:37,839 --> 00:15:40,480
inefficiencies and

375
00:15:40,480 --> 00:15:43,680
in the binaural at all transformation

376
00:15:43,680 --> 00:15:46,079
and make a more optimal use of our

377
00:15:46,079 --> 00:15:49,920
computational resources

378
00:15:50,079 --> 00:15:52,320
unfortunately i don't have time to go

379
00:15:52,320 --> 00:15:55,120
into further details of this analysis in

380
00:15:55,120 --> 00:15:57,360
the rest of this talk i'm going to talk

381
00:15:57,360 --> 00:15:59,440
about some of the applications of these

382
00:15:59,440 --> 00:16:01,920
techniques to other settings to other

383
00:16:01,920 --> 00:16:04,959
extractor settings

384
00:16:06,480 --> 00:16:08,800
the first setting is that of network

385
00:16:08,800 --> 00:16:10,639
extractors

386
00:16:10,639 --> 00:16:13,120
in a network extractor protocol there is

387
00:16:13,120 --> 00:16:15,839
a set of processors that each have

388
00:16:15,839 --> 00:16:18,560
independent sources

389
00:16:18,560 --> 00:16:20,399
they would like to communicate with each

390
00:16:20,399 --> 00:16:23,040
other potentially in several rounds such

391
00:16:23,040 --> 00:16:25,360
that at the end of this

392
00:16:25,360 --> 00:16:28,160
communication they each end up with what

393
00:16:28,160 --> 00:16:32,560
is supposedly a uniformly random string

394
00:16:34,800 --> 00:16:36,880
in this setting

395
00:16:36,880 --> 00:16:40,000
an adversary is allowed to corrupt some

396
00:16:40,000 --> 00:16:42,639
subset of the players and the guarantee

397
00:16:42,639 --> 00:16:45,600
that is typically desired is that the

398
00:16:45,600 --> 00:16:49,199
outputs of honest parties be close to

399
00:16:49,199 --> 00:16:52,079
uniform even conditioned on the view of

400
00:16:52,079 --> 00:16:55,040
these adversaries

401
00:16:55,040 --> 00:16:57,920
that is given the transcript and the

402
00:16:57,920 --> 00:17:00,639
adversarial source distributions the

403
00:17:00,639 --> 00:17:03,680
output of honest players is required to

404
00:17:03,680 --> 00:17:08,000
still be indistinguishable from uniform

405
00:17:09,520 --> 00:17:12,000
let me now describe some prior work on

406
00:17:12,000 --> 00:17:16,160
network extractable network extractors

407
00:17:16,160 --> 00:17:19,039
this concept was uh introduced dating

408
00:17:19,039 --> 00:17:22,319
back to the works of doris and oliveira

409
00:17:22,319 --> 00:17:25,439
and goldwater at all but was explicitly

410
00:17:25,439 --> 00:17:28,079
studied in the works of kalai starting

411
00:17:28,079 --> 00:17:30,400
with the work of kalai at all

412
00:17:30,400 --> 00:17:32,720
who obtained network extractors for

413
00:17:32,720 --> 00:17:35,520
sources with min entropy 2 to the log n

414
00:17:35,520 --> 00:17:38,080
to the epsilon but where only a fraction

415
00:17:38,080 --> 00:17:40,400
of honest parties obtained uniformly

416
00:17:40,400 --> 00:17:42,320
random bits

417
00:17:42,320 --> 00:17:45,120
in contrast we would like all honest

418
00:17:45,120 --> 00:17:49,678
parties to obtain uniform randomness

419
00:17:51,760 --> 00:17:54,880
the recent work of goya lethal

420
00:17:54,880 --> 00:17:57,280
tackled exactly this problem where they

421
00:17:57,280 --> 00:17:59,440
were able to have all honest parties

422
00:17:59,440 --> 00:18:01,919
obtain uniform randomness but needed

423
00:18:01,919 --> 00:18:05,440
relatively high min entropy

424
00:18:06,320 --> 00:18:08,559
in the computational setting the work of

425
00:18:08,559 --> 00:18:09,919
kalai

426
00:18:09,919 --> 00:18:13,520
lee and rao showed how to obtain

427
00:18:13,520 --> 00:18:15,679
network extractors where all parties

428
00:18:15,679 --> 00:18:18,240
obtain uniform randomness but assuming

429
00:18:18,240 --> 00:18:20,799
omega n min entropy and assuming

430
00:18:20,799 --> 00:18:22,480
exponential hardness of one-way

431
00:18:22,480 --> 00:18:24,960
permutations

432
00:18:24,960 --> 00:18:27,120
in this work using techniques that are

433
00:18:27,120 --> 00:18:29,360
very similar to our construct to the

434
00:18:29,360 --> 00:18:32,000
construction of two source extractors we

435
00:18:32,000 --> 00:18:34,240
obtain a one-round network extractor

436
00:18:34,240 --> 00:18:36,960
protocol with negligible error

437
00:18:36,960 --> 00:18:39,760
for up to polynomially many parties

438
00:18:39,760 --> 00:18:41,600
that tolerates up to all but two

439
00:18:41,600 --> 00:18:43,200
corruptions

440
00:18:43,200 --> 00:18:45,360
meaning that we require only two parties

441
00:18:45,360 --> 00:18:48,160
to be honest this is optimal because

442
00:18:48,160 --> 00:18:49,679
recall that

443
00:18:49,679 --> 00:18:51,840
in the setting of a single honest party

444
00:18:51,840 --> 00:18:53,360
this boils down to the problem of

445
00:18:53,360 --> 00:18:55,679
deterministic extractors which cannot

446
00:18:55,679 --> 00:18:57,200
exist

447
00:18:57,200 --> 00:18:59,760
moreover we require each source to only

448
00:18:59,760 --> 00:19:02,400
have polylog arrhythmic min entropy and

449
00:19:02,400 --> 00:19:04,880
assume the sub exponential hardness of

450
00:19:04,880 --> 00:19:07,440
ddh

451
00:19:07,520 --> 00:19:09,679
our second application is to the setting

452
00:19:09,679 --> 00:19:13,120
of extractors for adversarial sources

453
00:19:13,120 --> 00:19:16,000
here one considers many sources some of

454
00:19:16,000 --> 00:19:18,240
which may be adversarial but the

455
00:19:18,240 --> 00:19:20,240
guarantee is that there are at least

456
00:19:20,240 --> 00:19:23,280
some k honest sources again k must be at

457
00:19:23,280 --> 00:19:25,840
least two and the remaining sources can

458
00:19:25,840 --> 00:19:28,480
be adversarially chosen depending on the

459
00:19:28,480 --> 00:19:31,039
honest sources in particular each

460
00:19:31,039 --> 00:19:33,520
adversarial source is allowed to depend

461
00:19:33,520 --> 00:19:35,840
on up to d honest sources and the

462
00:19:35,840 --> 00:19:38,400
resulting extractor is called a kd

463
00:19:38,400 --> 00:19:41,039
extractor

464
00:19:42,080 --> 00:19:44,000
the guarantee that is required in this

465
00:19:44,000 --> 00:19:46,080
setting is that the output of the

466
00:19:46,080 --> 00:19:48,720
extractor applied to all these sources

467
00:19:48,720 --> 00:19:50,080
where some of the sources may be

468
00:19:50,080 --> 00:19:54,480
adversarial be close to uniform

469
00:19:55,520 --> 00:19:57,200
in the information theoretic setting

470
00:19:57,200 --> 00:20:00,000
this problem was introduced and studied

471
00:20:00,000 --> 00:20:02,559
in the work of chatopathy at all who

472
00:20:02,559 --> 00:20:03,679
obtained

473
00:20:03,679 --> 00:20:06,720
adversarial source extractors for a

474
00:20:06,720 --> 00:20:09,520
setting of at least

475
00:20:09,520 --> 00:20:12,080
p to the one minus r on a sources out of

476
00:20:12,080 --> 00:20:14,480
a total of p sources where r is a

477
00:20:14,480 --> 00:20:15,600
constant

478
00:20:15,600 --> 00:20:17,679
and where each corrupted source was

479
00:20:17,679 --> 00:20:19,919
allowed to depend on at most k to the r

480
00:20:19,919 --> 00:20:21,120
sources

481
00:20:21,120 --> 00:20:22,720
and they were able to obtain such

482
00:20:22,720 --> 00:20:24,240
extractors for the setting of

483
00:20:24,240 --> 00:20:27,120
polylogarithmic min entropy

484
00:20:27,120 --> 00:20:28,960
on the other hand in the computational

485
00:20:28,960 --> 00:20:30,960
setting our work assuming

486
00:20:30,960 --> 00:20:33,440
sub-exponential hardness of ddh

487
00:20:33,440 --> 00:20:36,159
achieves adversarial source extractors

488
00:20:36,159 --> 00:20:38,400
where there are two honest sources out

489
00:20:38,400 --> 00:20:40,799
of a total of p sources

490
00:20:40,799 --> 00:20:42,960
each corrupted source depends on at most

491
00:20:42,960 --> 00:20:44,720
one of the two sources

492
00:20:44,720 --> 00:20:46,720
and we achieve poly logarithmic main

493
00:20:46,720 --> 00:20:50,559
entropy with negligible error

494
00:20:54,080 --> 00:20:56,159
let me conclude with some open problems

495
00:20:56,159 --> 00:20:58,640
that i find exciting

496
00:20:58,640 --> 00:21:00,640
the first is whether we can eliminate

497
00:21:00,640 --> 00:21:02,480
the crs and

498
00:21:02,480 --> 00:21:05,520
still rely on nice assumptions like ddh

499
00:21:05,520 --> 00:21:08,320
the second is whether we can eliminate

500
00:21:08,320 --> 00:21:10,240
the need for sub-exponential hardness

501
00:21:10,240 --> 00:21:12,640
and only rely on polynomial hardness

502
00:21:12,640 --> 00:21:14,159
assumptions

503
00:21:14,159 --> 00:21:17,280
and finally can we explore relationships

504
00:21:17,280 --> 00:21:19,760
of these objects with other primitives

505
00:21:19,760 --> 00:21:21,760
like leakage resilient codes

506
00:21:21,760 --> 00:21:24,400
non-malleable codes

507
00:21:24,400 --> 00:21:26,960
in the computational setting as well as

508
00:21:26,960 --> 00:21:29,039
other cryptographic primitives such as

509
00:21:29,039 --> 00:21:31,840
non-malleable commitments

510
00:21:31,840 --> 00:21:33,840
that brings me to the end

511
00:21:33,840 --> 00:21:38,039
my talk thank you

