1
00:00:02,560 --> 00:00:05,440
hello everyone welcome to this talk

2
00:00:05,440 --> 00:00:07,440
um today i'm going to talk about

3
00:00:07,440 --> 00:00:10,000
computational hardness of optimal fair

4
00:00:10,000 --> 00:00:13,120
computation beyond minicrypt this is a

5
00:00:13,120 --> 00:00:16,320
drawing work with hamatamanji

6
00:00:16,320 --> 00:00:18,880
so in this talk we will be talking about

7
00:00:18,880 --> 00:00:20,880
coin tossing protocols

8
00:00:20,880 --> 00:00:23,039
so a coin tossing protocol is a

9
00:00:23,039 --> 00:00:25,519
two-party interactive protocol between

10
00:00:25,519 --> 00:00:27,199
alice and bob

11
00:00:27,199 --> 00:00:29,599
we assume that parties exchange a total

12
00:00:29,599 --> 00:00:31,519
of our messages

13
00:00:31,519 --> 00:00:33,600
and we assume that parties always agree

14
00:00:33,600 --> 00:00:37,440
on the output when the protocol ends

15
00:00:37,680 --> 00:00:39,680
so fair coin tossing considered the

16
00:00:39,680 --> 00:00:41,040
following setting

17
00:00:41,040 --> 00:00:43,600
where a malicious party may

18
00:00:43,600 --> 00:00:46,079
prematurely abort the execution of the

19
00:00:46,079 --> 00:00:47,440
protocol

20
00:00:47,440 --> 00:00:48,399
so

21
00:00:48,399 --> 00:00:51,120
the fairness guarantees that the honest

22
00:00:51,120 --> 00:00:53,520
party should always receive the output

23
00:00:53,520 --> 00:00:54,960
of the protocol

24
00:00:54,960 --> 00:00:57,600
therefore when the malicious party abort

25
00:00:57,600 --> 00:01:00,320
the honest party should still output a

26
00:01:00,320 --> 00:01:04,640
defense as his output of the protocol

27
00:01:04,640 --> 00:01:06,560
the unfairness is

28
00:01:06,560 --> 00:01:09,360
defined as how much a malicious party

29
00:01:09,360 --> 00:01:12,400
can deviate the expected output of the

30
00:01:12,400 --> 00:01:15,280
honest party

31
00:01:16,799 --> 00:01:18,479
so let me first summarize the

32
00:01:18,479 --> 00:01:20,400
state-of-the-art result

33
00:01:20,400 --> 00:01:22,479
through the lens of impact leather's

34
00:01:22,479 --> 00:01:24,080
five words

35
00:01:24,080 --> 00:01:27,040
so impact liaso proposed his famous five

36
00:01:27,040 --> 00:01:30,079
words by based on what hardness of

37
00:01:30,079 --> 00:01:32,640
computation is true and what harness of

38
00:01:32,640 --> 00:01:35,040
computational assumption is false

39
00:01:35,040 --> 00:01:38,079
so for example in passing land pesalen

40
00:01:38,079 --> 00:01:40,079
is a world where even one of the

41
00:01:40,079 --> 00:01:42,079
functions do not exist

42
00:01:42,079 --> 00:01:44,720
and a minicrypt is a word where one will

43
00:01:44,720 --> 00:01:47,119
function and henceforth all other

44
00:01:47,119 --> 00:01:49,119
symmetric primitives such as commitment

45
00:01:49,119 --> 00:01:50,640
schemes exist

46
00:01:50,640 --> 00:01:54,399
but public key primitives do not exist

47
00:01:54,399 --> 00:01:57,360
and finally cryptomania is the world

48
00:01:57,360 --> 00:01:58,399
where

49
00:01:58,399 --> 00:02:00,320
all the primitives such as public key

50
00:02:00,320 --> 00:02:02,719
encryption and oblivious transfers

51
00:02:02,719 --> 00:02:05,040
exist

52
00:02:05,040 --> 00:02:08,639
so firstly a two-party zero a two-party

53
00:02:08,639 --> 00:02:11,360
coin tossing protocol can be think of as

54
00:02:11,360 --> 00:02:13,599
a two-party zero-sum game

55
00:02:13,599 --> 00:02:16,080
hence information theoretically there

56
00:02:16,080 --> 00:02:19,120
exists an attacker that imposes constant

57
00:02:19,120 --> 00:02:20,400
unfairness

58
00:02:20,400 --> 00:02:22,560
and in his celebrated work papa di

59
00:02:22,560 --> 00:02:24,239
mitchell showed that finding such

60
00:02:24,239 --> 00:02:26,720
attacks is p space complete

61
00:02:26,720 --> 00:02:29,680
however heightener and omaree show that

62
00:02:29,680 --> 00:02:32,319
if one function do not exist then you

63
00:02:32,319 --> 00:02:34,879
can simulate such attacks reasonably

64
00:02:34,879 --> 00:02:37,040
where and still achieve constant

65
00:02:37,040 --> 00:02:39,599
unfairness

66
00:02:40,400 --> 00:02:43,120
if we consider a

67
00:02:43,120 --> 00:02:45,440
a type of adversary called failstop

68
00:02:45,440 --> 00:02:47,120
adversaries

69
00:02:47,120 --> 00:02:50,640
so such adversaries behave honestly

70
00:02:50,640 --> 00:02:53,200
during the execution of the protocol and

71
00:02:53,200 --> 00:02:55,519
their only malicious behavior is to

72
00:02:55,519 --> 00:02:58,000
prematurely abort

73
00:02:58,000 --> 00:03:00,640
so in this groundbreaking result

74
00:03:00,640 --> 00:03:03,200
work by cleveland impactviago they show

75
00:03:03,200 --> 00:03:06,480
that even for the fair stop adversary

76
00:03:06,480 --> 00:03:08,879
one can impose a one by square root of

77
00:03:08,879 --> 00:03:10,879
our unfairness

78
00:03:10,879 --> 00:03:11,680
so

79
00:03:11,680 --> 00:03:14,400
intuitively their result can be think of

80
00:03:14,400 --> 00:03:17,200
as a reverse theorem for assumer's

81
00:03:17,200 --> 00:03:18,480
inequality

82
00:03:18,480 --> 00:03:20,959
where if you have a martingale that goes

83
00:03:20,959 --> 00:03:23,599
from half to zero and one

84
00:03:23,599 --> 00:03:26,239
there must exist a step where the jump

85
00:03:26,239 --> 00:03:27,840
in the in the

86
00:03:27,840 --> 00:03:30,720
expected output is at least the one root

87
00:03:30,720 --> 00:03:33,519
of r

88
00:03:33,519 --> 00:03:36,720
so in 1980s after a sequence of

89
00:03:36,720 --> 00:03:39,120
important works we have constructed this

90
00:03:39,120 --> 00:03:40,319
protocol

91
00:03:40,319 --> 00:03:43,040
namely the majority protocol where we

92
00:03:43,040 --> 00:03:45,519
know that for majority protocols is one

93
00:03:45,519 --> 00:03:48,400
by our unfair unfair against the fair

94
00:03:48,400 --> 00:03:51,040
stock adversaries so majority protocol

95
00:03:51,040 --> 00:03:53,840
is matches the lower bound proof by

96
00:03:53,840 --> 00:03:56,480
proven by cleveland in pakliazo

97
00:03:56,480 --> 00:03:59,840
and if you assume one functions exist

98
00:03:59,840 --> 00:04:02,239
then you can use commitment schemes

99
00:04:02,239 --> 00:04:04,799
to upgrade such verticals to be secure

100
00:04:04,799 --> 00:04:06,640
against the full fully fledged

101
00:04:06,640 --> 00:04:09,359
adversaries

102
00:04:10,159 --> 00:04:13,360
so in another celebrate work by cliff

103
00:04:13,360 --> 00:04:14,720
he showed that

104
00:04:14,720 --> 00:04:17,759
any coin tossing protocol is at least

105
00:04:17,759 --> 00:04:19,918
one over our unfair

106
00:04:19,918 --> 00:04:22,639
so cliff's result is very strong in the

107
00:04:22,639 --> 00:04:23,759
sense that

108
00:04:23,759 --> 00:04:26,639
regardless of what computational

109
00:04:26,639 --> 00:04:28,639
assumption you assume

110
00:04:28,639 --> 00:04:31,120
it is any coin tossing protocol is at

111
00:04:31,120 --> 00:04:34,960
least one of our one over r unfair

112
00:04:34,960 --> 00:04:38,800
so one of hence a uh a one over r unfair

113
00:04:38,800 --> 00:04:41,199
coin tossing protocol is called optimal

114
00:04:41,199 --> 00:04:44,160
fair coin tossing

115
00:04:44,320 --> 00:04:46,639
so for a long time we do not know

116
00:04:46,639 --> 00:04:49,120
whether optomo fair coin tossing exist

117
00:04:49,120 --> 00:04:50,160
or not

118
00:04:50,160 --> 00:04:53,120
and it is a surprising when now

119
00:04:53,120 --> 00:04:56,160
and tsuki finally showed that by relying

120
00:04:56,160 --> 00:04:58,720
on oblivious transfer you do can

121
00:04:58,720 --> 00:05:03,520
construct a optimal fair coin tossing

122
00:05:03,680 --> 00:05:07,360
and finally very recently uh our our

123
00:05:07,360 --> 00:05:10,160
crypto 20 work showed that

124
00:05:10,160 --> 00:05:12,800
any optimal coin any coin tossing

125
00:05:12,800 --> 00:05:14,240
protocol

126
00:05:14,240 --> 00:05:17,280
using one function in a black box manner

127
00:05:17,280 --> 00:05:22,159
is at least one over root r unfair

128
00:05:22,800 --> 00:05:25,360
so let me now color coded this table

129
00:05:25,360 --> 00:05:28,639
into a green colors and red colors

130
00:05:28,639 --> 00:05:31,600
so here all the green constructions in

131
00:05:31,600 --> 00:05:33,759
the green colors are those protocols

132
00:05:33,759 --> 00:05:36,639
that are one by root are unfair

133
00:05:36,639 --> 00:05:39,520
and also the adversarial attacks are

134
00:05:39,520 --> 00:05:42,080
those adversaries that can impose a one

135
00:05:42,080 --> 00:05:44,639
word root r unfairness

136
00:05:44,639 --> 00:05:47,680
on the other hand the red cell here

137
00:05:47,680 --> 00:05:50,240
mns protocol is a protocol that achieves

138
00:05:50,240 --> 00:05:51,520
one or r

139
00:05:51,520 --> 00:05:53,600
unfairness and

140
00:05:53,600 --> 00:05:56,240
the cleveland attack is also a tag that

141
00:05:56,240 --> 00:05:59,440
imposes one of our unfairness

142
00:05:59,440 --> 00:06:01,280
so given this

143
00:06:01,280 --> 00:06:03,199
state-of-the-art result

144
00:06:03,199 --> 00:06:05,840
it is a natural question to ask whether

145
00:06:05,840 --> 00:06:08,319
oblivious transfer is necessary for

146
00:06:08,319 --> 00:06:11,120
optimal fair coin tossing so for example

147
00:06:11,120 --> 00:06:12,639
can we construct

148
00:06:12,639 --> 00:06:15,039
one of our unfair coin tossing by

149
00:06:15,039 --> 00:06:18,319
relying on public key encryption

150
00:06:18,319 --> 00:06:20,639
also it is another natural question to

151
00:06:20,639 --> 00:06:23,520
ask does there exist fair coin tossing

152
00:06:23,520 --> 00:06:26,080
with intermediate unfairness

153
00:06:26,080 --> 00:06:28,720
for example maybe relying on public key

154
00:06:28,720 --> 00:06:30,960
encryption we can find a

155
00:06:30,960 --> 00:06:33,360
coin tossing protocol that achieves 1

156
00:06:33,360 --> 00:06:36,880
over r to the 3 over 4 on fairness which

157
00:06:36,880 --> 00:06:39,360
is strict strictly between 1 over r and

158
00:06:39,360 --> 00:06:42,240
1 over root r

159
00:06:42,560 --> 00:06:45,199
so in this work we rule out such

160
00:06:45,199 --> 00:06:46,800
possibilities

161
00:06:46,800 --> 00:06:50,160
so firstly we show that any coin tossing

162
00:06:50,160 --> 00:06:52,960
protocol that uses public key encryption

163
00:06:52,960 --> 00:06:55,360
in a black box box manner

164
00:06:55,360 --> 00:06:57,599
is at least the one where root are

165
00:06:57,599 --> 00:07:00,159
unfair

166
00:07:00,479 --> 00:07:03,039
and additionally we consider the setting

167
00:07:03,039 --> 00:07:05,759
where pop parties not only have public

168
00:07:05,759 --> 00:07:09,199
encryption but they also have access to

169
00:07:09,199 --> 00:07:12,319
access to a trusted party that realizing

170
00:07:12,319 --> 00:07:15,039
some functionality possibly randomize

171
00:07:15,039 --> 00:07:16,800
the functionality f

172
00:07:16,800 --> 00:07:19,680
so this is namely the uh the f hybrid

173
00:07:19,680 --> 00:07:21,039
model

174
00:07:21,039 --> 00:07:24,720
so we show that

175
00:07:24,720 --> 00:07:26,080
even given

176
00:07:26,080 --> 00:07:27,360
f hybrid

177
00:07:27,360 --> 00:07:29,919
we're assuming that this f hybrid does

178
00:07:29,919 --> 00:07:32,479
not facilitate oblivious transfer

179
00:07:32,479 --> 00:07:34,000
then

180
00:07:34,000 --> 00:07:34,880
even

181
00:07:34,880 --> 00:07:38,080
this protocol a coin tossing protocol is

182
00:07:38,080 --> 00:07:41,120
at least the one over root are unfair

183
00:07:41,120 --> 00:07:43,840
so we completely squeeze squeeze out all

184
00:07:43,840 --> 00:07:46,080
the room here possibility that to

185
00:07:46,080 --> 00:07:48,879
construct a fair coin tossing protocol

186
00:07:48,879 --> 00:07:51,039
by using other

187
00:07:51,039 --> 00:07:53,520
by relying on other assumptions

188
00:07:53,520 --> 00:07:56,560
so note that this f hybrid could be

189
00:07:56,560 --> 00:07:59,199
potentially useful for achieving various

190
00:07:59,199 --> 00:08:00,400
tasks

191
00:08:00,400 --> 00:08:02,639
here we are showing that f hybrid is

192
00:08:02,639 --> 00:08:05,840
completely useless for the task of

193
00:08:05,840 --> 00:08:08,878
fair coin tossing

194
00:08:09,680 --> 00:08:12,400
so what i have shown you here might

195
00:08:12,400 --> 00:08:14,960
trick you into believing that we have

196
00:08:14,960 --> 00:08:17,599
resolved everything

197
00:08:17,599 --> 00:08:20,000
well we haven't so

198
00:08:20,000 --> 00:08:23,199
before i we go further let me stress

199
00:08:23,199 --> 00:08:25,440
what are the open problems that we did

200
00:08:25,440 --> 00:08:27,280
not prove

201
00:08:27,280 --> 00:08:29,520
so for example one thing that we did not

202
00:08:29,520 --> 00:08:32,399
prove is that we did not present a set

203
00:08:32,399 --> 00:08:35,519
of oracles relative to which a secure

204
00:08:35,519 --> 00:08:37,599
protocol for f exists

205
00:08:37,599 --> 00:08:39,440
but optimal fair and coin tossing

206
00:08:39,440 --> 00:08:42,799
protocol does not exist relative to this

207
00:08:42,799 --> 00:08:44,800
set of articles

208
00:08:44,800 --> 00:08:47,680
so in other words we did not prove a

209
00:08:47,680 --> 00:08:50,160
black box separation between securely

210
00:08:50,160 --> 00:08:52,560
realizing f and optimal fair coin

211
00:08:52,560 --> 00:08:53,760
tossing

212
00:08:53,760 --> 00:08:56,320
we are only giving parties access to a

213
00:08:56,320 --> 00:08:59,120
trusted party realizing f

214
00:08:59,120 --> 00:09:00,720
so the difference between these two

215
00:09:00,720 --> 00:09:04,320
settings is that when party are given

216
00:09:04,320 --> 00:09:07,600
access to a set of oracle

217
00:09:07,600 --> 00:09:10,560
that facilitates function f

218
00:09:10,560 --> 00:09:13,040
they might not use this set of oracles

219
00:09:13,040 --> 00:09:15,599
in ways

220
00:09:15,760 --> 00:09:18,240
they might not use it only

221
00:09:18,240 --> 00:09:21,120
to evaluate f they might use this set of

222
00:09:21,120 --> 00:09:23,360
oracles in other ways

223
00:09:23,360 --> 00:09:26,000
so this is why this problem is very

224
00:09:26,000 --> 00:09:28,399
challenging and we have not we did not

225
00:09:28,399 --> 00:09:30,800
prove this

226
00:09:30,800 --> 00:09:33,440
let me stress that if one

227
00:09:33,440 --> 00:09:34,959
if one

228
00:09:34,959 --> 00:09:37,920
does prove such a black box separation

229
00:09:37,920 --> 00:09:41,760
then it implies a black box separation

230
00:09:41,760 --> 00:09:44,640
between securely realizing an incomplete

231
00:09:44,640 --> 00:09:48,160
functionality f and oblivious transfer

232
00:09:48,160 --> 00:09:51,040
this is one of the major open problems

233
00:09:51,040 --> 00:09:53,440
in the field and it's incredibly

234
00:09:53,440 --> 00:09:55,440
incredibly challenging

235
00:09:55,440 --> 00:09:57,680
so what we prove in this work can be

236
00:09:57,680 --> 00:09:59,200
seen as a

237
00:09:59,200 --> 00:10:01,760
partial progress towards this automated

238
00:10:01,760 --> 00:10:04,760
goal

239
00:10:04,800 --> 00:10:07,760
so finally let me compare our work with

240
00:10:07,760 --> 00:10:11,680
a a relevant work by uh hatna omri uh

241
00:10:11,680 --> 00:10:14,480
hatter macronus and omri

242
00:10:14,480 --> 00:10:17,760
they proved that for any constant r the

243
00:10:17,760 --> 00:10:20,640
existence of a r coin tossing protocol

244
00:10:20,640 --> 00:10:22,640
with unfairness

245
00:10:22,640 --> 00:10:24,720
less than one over root r

246
00:10:24,720 --> 00:10:27,600
implies the existence of key agreement

247
00:10:27,600 --> 00:10:29,120
particles

248
00:10:29,120 --> 00:10:31,040
so therefore their result is

249
00:10:31,040 --> 00:10:34,240
incomparable to ours as they prove a

250
00:10:34,240 --> 00:10:36,959
stronger consequence but

251
00:10:36,959 --> 00:10:39,200
only for constant constant round

252
00:10:39,200 --> 00:10:41,680
particles

253
00:10:43,600 --> 00:10:46,800
so now let me set up

254
00:10:46,800 --> 00:10:48,959
our

255
00:10:48,959 --> 00:10:53,040
tell you what our model is so in in in

256
00:10:53,040 --> 00:10:56,560
our work we define a set of oracle's o

257
00:10:56,560 --> 00:10:59,600
that facilitates public key encryption

258
00:10:59,600 --> 00:11:02,320
so addis and bob have oracle set access

259
00:11:02,320 --> 00:11:04,560
to this oracle o

260
00:11:04,560 --> 00:11:07,519
and additionally they have access to a

261
00:11:07,519 --> 00:11:11,120
trusted party realizing f so they can

262
00:11:11,120 --> 00:11:13,680
send their respective input x and y to

263
00:11:13,680 --> 00:11:15,920
the trusted party and receive the

264
00:11:15,920 --> 00:11:17,200
evaluation

265
00:11:17,200 --> 00:11:19,519
from from the trusted party

266
00:11:19,519 --> 00:11:22,560
so it is important to note that this

267
00:11:22,560 --> 00:11:26,320
function f is realized unfairly so that

268
00:11:26,320 --> 00:11:28,880
means the adversary gets to receive the

269
00:11:28,880 --> 00:11:30,480
output first

270
00:11:30,480 --> 00:11:33,120
and then he may abort the protocol after

271
00:11:33,120 --> 00:11:34,800
receiving the output

272
00:11:34,800 --> 00:11:37,360
and by doing so he blocks the output

273
00:11:37,360 --> 00:11:40,720
delivery to the honest

274
00:11:40,839 --> 00:11:44,320
party so the reason why we assume this f

275
00:11:44,320 --> 00:11:46,959
is realized unfair is because if you are

276
00:11:46,959 --> 00:11:48,480
given a fair

277
00:11:48,480 --> 00:11:51,839
access to a fair uh functionality f

278
00:11:51,839 --> 00:11:54,839
and then perfectly fair coin tossing is

279
00:11:54,839 --> 00:11:58,480
possible so for example assuming this f

280
00:11:58,480 --> 00:12:00,880
is the functionality xor

281
00:12:00,880 --> 00:12:03,360
now consider this very simple protocol

282
00:12:03,360 --> 00:12:05,760
where alice just sample her input

283
00:12:05,760 --> 00:12:08,240
randomly and bob also

284
00:12:08,240 --> 00:12:11,040
sample his input randomly they just send

285
00:12:11,040 --> 00:12:13,680
their input x and y to the trusted party

286
00:12:13,680 --> 00:12:16,639
and receive the uh output

287
00:12:16,639 --> 00:12:19,360
as a received output from the trusted

288
00:12:19,360 --> 00:12:22,240
party and output it as the output of the

289
00:12:22,240 --> 00:12:23,279
protocol

290
00:12:23,279 --> 00:12:26,560
you can prove that this protocol is

291
00:12:26,560 --> 00:12:28,399
perfectly fair

292
00:12:28,399 --> 00:12:31,920
so therefore we assume this f is always

293
00:12:31,920 --> 00:12:35,439
realized unfairly

294
00:12:35,760 --> 00:12:38,160
so given this model what we prove is

295
00:12:38,160 --> 00:12:41,519
that there exists a fair stop adversary

296
00:12:41,519 --> 00:12:44,320
who could deviate the expected output of

297
00:12:44,320 --> 00:12:47,600
the honest party by one over root r

298
00:12:47,600 --> 00:12:50,240
and this adversary asks at most

299
00:12:50,240 --> 00:12:52,480
polynomially additional queries to the

300
00:12:52,480 --> 00:12:56,880
random to the r uh to oracle o

301
00:12:59,120 --> 00:13:02,160
so our proof follows largely from the

302
00:13:02,160 --> 00:13:04,839
prior works of margin 1

303
00:13:04,839 --> 00:13:08,880
2020 uh where in in that work uh we show

304
00:13:08,880 --> 00:13:12,000
uh we present a fair stop attacker that

305
00:13:12,000 --> 00:13:15,040
deviates the expected output of honest

306
00:13:15,040 --> 00:13:17,200
party by one over root r

307
00:13:17,200 --> 00:13:19,279
for ending coin tossing in the random

308
00:13:19,279 --> 00:13:21,040
oracle model

309
00:13:21,040 --> 00:13:22,800
so what we

310
00:13:22,800 --> 00:13:25,120
observe in this work is that

311
00:13:25,120 --> 00:13:28,639
we note their attacker generalizes to

312
00:13:28,639 --> 00:13:31,839
other settings as long as one can ensure

313
00:13:31,839 --> 00:13:34,399
the following invariant so this

314
00:13:34,399 --> 00:13:37,200
invariant is that if if we have that

315
00:13:37,200 --> 00:13:39,680
alice and bob's private view

316
00:13:39,680 --> 00:13:42,320
are always close to independent

317
00:13:42,320 --> 00:13:45,040
condition on the partial transcript

318
00:13:45,040 --> 00:13:47,839
as long as this invariant always hold

319
00:13:47,839 --> 00:13:50,160
during the execution of the protocol

320
00:13:50,160 --> 00:13:53,120
then their fair stop attacker will

321
00:13:53,120 --> 00:13:54,880
always work

322
00:13:54,880 --> 00:13:57,040
so for example in the random oracle

323
00:13:57,040 --> 00:14:00,399
model they ensure this invariant by

324
00:14:00,399 --> 00:14:02,560
relying on the uh

325
00:14:02,560 --> 00:14:04,320
well-known technique called heavy

326
00:14:04,320 --> 00:14:06,959
courier in the random oracle

327
00:14:06,959 --> 00:14:10,160
in the random oracle model

328
00:14:10,399 --> 00:14:12,560
so our separation from public key

329
00:14:12,560 --> 00:14:16,399
encryption relies on this result from

330
00:14:16,399 --> 00:14:18,480
muhammad imagi and

331
00:14:18,480 --> 00:14:19,600
prabhupaka

332
00:14:19,600 --> 00:14:21,440
pro purple current

333
00:14:21,440 --> 00:14:23,680
from tcc 2014

334
00:14:23,680 --> 00:14:26,480
in in this work they define a set of

335
00:14:26,480 --> 00:14:29,600
oracle o that facilitates pke

336
00:14:29,600 --> 00:14:32,000
and they show that for any two-party

337
00:14:32,000 --> 00:14:34,639
interactive protocol between alice and

338
00:14:34,639 --> 00:14:35,600
bob

339
00:14:35,600 --> 00:14:37,920
there is a

340
00:14:37,920 --> 00:14:39,920
what they call a common common

341
00:14:39,920 --> 00:14:42,079
information learner that asks

342
00:14:42,079 --> 00:14:43,440
polynomially

343
00:14:43,440 --> 00:14:46,000
many queries to ensure that alice and

344
00:14:46,000 --> 00:14:47,839
bob's private view are close to

345
00:14:47,839 --> 00:14:49,839
independent

346
00:14:49,839 --> 00:14:52,160
so their results together with the

347
00:14:52,160 --> 00:14:56,839
attacker from martian 1 2020 ensures

348
00:14:56,839 --> 00:14:59,839
that gives the result that any coin

349
00:14:59,839 --> 00:15:02,240
tossing protocol that uses public key

350
00:15:02,240 --> 00:15:05,040
encryption in a black box manner is at

351
00:15:05,040 --> 00:15:09,040
least the one that will root our unfair

352
00:15:09,519 --> 00:15:12,240
so finally we prove this dichotomy

353
00:15:12,240 --> 00:15:13,519
result for

354
00:15:13,519 --> 00:15:14,800
f hybrid

355
00:15:14,800 --> 00:15:18,720
so given any randomized functionality f

356
00:15:18,720 --> 00:15:21,199
one can ask the following question

357
00:15:21,199 --> 00:15:24,079
does f hybrid facilitate oblivious

358
00:15:24,079 --> 00:15:28,399
transfer or not so if the answer is yes

359
00:15:28,399 --> 00:15:30,399
then such functionalities are called

360
00:15:30,399 --> 00:15:33,120
complete functionalities and since you

361
00:15:33,120 --> 00:15:36,399
can implement ot in f hybrid

362
00:15:36,399 --> 00:15:38,839
then you can implement the m and s

363
00:15:38,839 --> 00:15:42,079
vertical uh recall that m and s protocol

364
00:15:42,079 --> 00:15:45,279
is a protocol that is optimally fair by

365
00:15:45,279 --> 00:15:47,600
relying on oblivious transfer

366
00:15:47,600 --> 00:15:50,079
then with access to the f hybrid that

367
00:15:50,079 --> 00:15:53,199
facilitate ot one can achieve optimal

368
00:15:53,199 --> 00:15:54,800
variant coin tossing

369
00:15:54,800 --> 00:15:57,600
in the f hybrid model

370
00:15:57,600 --> 00:15:59,759
on the other hand if the answer to this

371
00:15:59,759 --> 00:16:02,560
question is no that means f this

372
00:16:02,560 --> 00:16:05,680
functionality f is incomplete

373
00:16:05,680 --> 00:16:06,639
then

374
00:16:06,639 --> 00:16:09,600
by this beautiful work of killian who

375
00:16:09,600 --> 00:16:11,440
show that who gives such a

376
00:16:11,440 --> 00:16:13,279
characterization that

377
00:16:13,279 --> 00:16:16,320
for adding such incomplete functionality

378
00:16:16,320 --> 00:16:17,440
f

379
00:16:17,440 --> 00:16:19,600
condition on the partial view a

380
00:16:19,600 --> 00:16:22,000
condition on the partial transcript alex

381
00:16:22,000 --> 00:16:24,480
and bob's private view are always

382
00:16:24,480 --> 00:16:26,160
independent

383
00:16:26,160 --> 00:16:28,079
then the invariant

384
00:16:28,079 --> 00:16:30,480
always hold and hence the

385
00:16:30,480 --> 00:16:33,279
margin one's attacker will therefore

386
00:16:33,279 --> 00:16:36,560
work so any coin tossing protocol in an

387
00:16:36,560 --> 00:16:37,519
inc

388
00:16:37,519 --> 00:16:40,959
in an f hybrid where f is incomplete is

389
00:16:40,959 --> 00:16:43,120
at least one over square root of r

390
00:16:43,120 --> 00:16:44,959
unfair

391
00:16:44,959 --> 00:16:48,000
so therefore in f hybrid there are only

392
00:16:48,000 --> 00:16:51,120
two possibilities where f is complete

393
00:16:51,120 --> 00:16:53,279
then optimal fair coin tossing protocol

394
00:16:53,279 --> 00:16:54,240
exists

395
00:16:54,240 --> 00:16:57,920
or if f is unincomplete then f hybrid is

396
00:16:57,920 --> 00:17:01,600
completely useless for the task of a

397
00:17:01,600 --> 00:17:02,839
fair coin

398
00:17:02,839 --> 00:17:05,439
tossing so let me provide you some

399
00:17:05,439 --> 00:17:08,400
additional perspective on why this

400
00:17:08,400 --> 00:17:11,199
result could be technically challenging

401
00:17:11,199 --> 00:17:13,919
so for an incomplete functionality f

402
00:17:13,919 --> 00:17:16,240
there could be two possibilities first

403
00:17:16,240 --> 00:17:18,480
there might exist a t-run secure

404
00:17:18,480 --> 00:17:20,240
protocol for f

405
00:17:20,240 --> 00:17:22,559
then you might want to replace this f

406
00:17:22,559 --> 00:17:25,280
hybrid with this t-run protocol that

407
00:17:25,280 --> 00:17:27,199
realizes f

408
00:17:27,199 --> 00:17:30,480
however once you replace this one-round

409
00:17:30,480 --> 00:17:33,440
access to a f hybrid with a t round

410
00:17:33,440 --> 00:17:36,240
secure protocol then the run complexity

411
00:17:36,240 --> 00:17:38,880
of the protocol get blow up by a factor

412
00:17:38,880 --> 00:17:40,160
of t

413
00:17:40,160 --> 00:17:41,039
hence

414
00:17:41,039 --> 00:17:44,640
just to rule out a fair op just to rule

415
00:17:44,640 --> 00:17:46,960
out optimal fair coin tossing in the

416
00:17:46,960 --> 00:17:50,320
playing model is not uh and it's not

417
00:17:50,320 --> 00:17:53,200
sufficient to prove that um

418
00:17:53,200 --> 00:17:55,760
f hybrid uh optimal ferry coin tossing

419
00:17:55,760 --> 00:17:59,280
is uh impossible in the f hybrid model

420
00:17:59,280 --> 00:18:01,360
where f might have a t round secure

421
00:18:01,360 --> 00:18:03,600
protocol

422
00:18:03,600 --> 00:18:05,840
on the other hand

423
00:18:05,840 --> 00:18:08,240
this inc for an incomplete functionality

424
00:18:08,240 --> 00:18:10,960
f there might not exist a security

425
00:18:10,960 --> 00:18:12,880
secure protocol for f

426
00:18:12,880 --> 00:18:16,160
and this f hybrid have been shown to be

427
00:18:16,160 --> 00:18:19,280
useful for other tasks for example row

428
00:18:19,280 --> 00:18:21,679
select and surely show that f hybrid

429
00:18:21,679 --> 00:18:23,600
could be useful to

430
00:18:23,600 --> 00:18:25,440
securely realizing some other

431
00:18:25,440 --> 00:18:27,280
functionality g

432
00:18:27,280 --> 00:18:31,520
and here for the task of coin tossing

433
00:18:31,520 --> 00:18:34,559
fair coin tossing we show that f hybrid

434
00:18:34,559 --> 00:18:38,000
is completely useless

435
00:18:38,000 --> 00:18:38,799
so

436
00:18:38,799 --> 00:18:40,640
with that i would like to conclude my

437
00:18:40,640 --> 00:18:43,280
talk here and i will refer you to the

438
00:18:43,280 --> 00:18:45,440
full version of our paper for more

439
00:18:45,440 --> 00:18:46,799
details

440
00:18:46,799 --> 00:18:49,960
thank you

