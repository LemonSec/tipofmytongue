1
00:00:04,560 --> 00:00:06,240
ready to go

2
00:00:06,240 --> 00:00:07,839
all right

3
00:00:07,839 --> 00:00:10,800
welcome back everyone to the second part

4
00:00:10,800 --> 00:00:13,679
of the second session on multi-party

5
00:00:13,679 --> 00:00:15,759
computation

6
00:00:15,759 --> 00:00:18,480
again we'll first do all the talks there

7
00:00:18,480 --> 00:00:20,400
will be four of them each of them five

8
00:00:20,400 --> 00:00:22,720
minutes and then we'll have a q a for

9
00:00:22,720 --> 00:00:24,000
all the talks

10
00:00:24,000 --> 00:00:26,560
at the end

11
00:00:26,640 --> 00:00:28,480
the link you should still see it in the

12
00:00:28,480 --> 00:00:30,800
chat where you can ask the questions on

13
00:00:30,800 --> 00:00:33,199
zulip

14
00:00:33,520 --> 00:00:35,840
and

15
00:00:36,160 --> 00:00:38,320
that's pretty much all i have to say so

16
00:00:38,320 --> 00:00:39,920
the first talk

17
00:00:39,920 --> 00:00:42,239
will be by yifan song

18
00:00:42,239 --> 00:00:45,520
about atlas efficient and scalable npc

19
00:00:45,520 --> 00:00:48,559
in the honest majority setting

20
00:00:48,559 --> 00:00:50,879
and

21
00:00:50,879 --> 00:00:53,440
you find a few

22
00:00:53,440 --> 00:00:56,440
okay

23
00:00:58,559 --> 00:01:01,199
all right perfect

24
00:01:02,960 --> 00:01:05,680
hello everyone my name is evan sung

25
00:01:05,680 --> 00:01:07,680
today i'm happy to introduce our recent

26
00:01:07,680 --> 00:01:10,880
work at last efficient and scalable npc

27
00:01:10,880 --> 00:01:12,799
in the ice majority setting

28
00:01:12,799 --> 00:01:15,360
clustered with vapor goya hyunjin d

29
00:01:15,360 --> 00:01:17,520
ravios trovoski and antigone

30
00:01:17,520 --> 00:01:20,479
polychroniado

31
00:01:21,840 --> 00:01:23,920
multiplied computation allows several

32
00:01:23,920 --> 00:01:26,000
mutually distracted parties to evaluate

33
00:01:26,000 --> 00:01:28,320
a function on their private inputs

34
00:01:28,320 --> 00:01:30,640
in this work we focus on the function

35
00:01:30,640 --> 00:01:32,960
that can be represented as an arithmetic

36
00:01:32,960 --> 00:01:35,200
circuit with addition and multiplication

37
00:01:35,200 --> 00:01:37,040
gates

38
00:01:37,040 --> 00:01:39,040
we focus on the information theoretic

39
00:01:39,040 --> 00:01:41,360
setting with einstein majority and

40
00:01:41,360 --> 00:01:43,520
assume a p2p channel between every pair

41
00:01:43,520 --> 00:01:44,720
of parties

42
00:01:44,720 --> 00:01:47,439
in the following we use i will use n for

43
00:01:47,439 --> 00:01:49,520
the number of parties and t for the

44
00:01:49,520 --> 00:01:52,399
number of crappy

45
00:01:52,840 --> 00:01:55,280
parties a well-known communication

46
00:01:55,280 --> 00:01:58,000
efficient protocol with semi-security

47
00:01:58,000 --> 00:02:00,240
was introduced by them guard and nelson

48
00:02:00,240 --> 00:02:01,920
in 2007

49
00:02:01,920 --> 00:02:03,920
we refer to this protocol as the dm

50
00:02:03,920 --> 00:02:05,040
protocol

51
00:02:05,040 --> 00:02:07,119
it only requires to communicate six

52
00:02:07,119 --> 00:02:08,800
elements per multiplication gate per

53
00:02:08,800 --> 00:02:09,919
party

54
00:02:09,919 --> 00:02:12,720
due to its simplicity and efficiency the

55
00:02:12,720 --> 00:02:14,800
dm protocol plays the central role in

56
00:02:14,800 --> 00:02:17,040
the progress of the of efficient secure

57
00:02:17,040 --> 00:02:18,480
computation

58
00:02:18,480 --> 00:02:20,800
many subsequent works have used the dm

59
00:02:20,800 --> 00:02:22,560
protocol to achieve the malicious

60
00:02:22,560 --> 00:02:24,959
security with the board and guaranteed

61
00:02:24,959 --> 00:02:27,040
output delivery

62
00:02:27,040 --> 00:02:29,440
however any improvement to the basic

63
00:02:29,440 --> 00:02:32,640
protocol has been hard to come by

64
00:02:32,640 --> 00:02:35,040
in this work we improve the basic bm

65
00:02:35,040 --> 00:02:37,120
protocol leading to a communication

66
00:02:37,120 --> 00:02:39,200
complexity of four elements per

67
00:02:39,200 --> 00:02:42,080
multiplication gate per party

68
00:02:42,080 --> 00:02:44,239
we also construct a round efficient

69
00:02:44,239 --> 00:02:46,800
protocol whose communication capacity is

70
00:02:46,800 --> 00:02:49,519
4.5 arguments but having the number of

71
00:02:49,519 --> 00:02:51,840
runs

72
00:02:52,720 --> 00:02:55,200
we test our two constructions and

73
00:02:55,200 --> 00:02:57,120
compare them with the previously best

74
00:02:57,120 --> 00:02:59,840
known results gst 20

75
00:02:59,840 --> 00:03:01,680
our experiments generate a what

76
00:03:01,680 --> 00:03:03,760
generates a random circuit with one

77
00:03:03,760 --> 00:03:05,680
medium multiplication gaze

78
00:03:05,680 --> 00:03:07,840
we set up our experiments in the line

79
00:03:07,840 --> 00:03:11,519
setting using the 61-bit marston field

80
00:03:11,519 --> 00:03:14,080
in the table the version t-os refers to

81
00:03:14,080 --> 00:03:15,840
our first construction and the

82
00:03:15,840 --> 00:03:18,000
version-run compression refers to our

83
00:03:18,000 --> 00:03:19,920
second construction

84
00:03:19,920 --> 00:03:22,080
the numbers in the table are running a

85
00:03:22,080 --> 00:03:25,360
reported running time in milliseconds

86
00:03:25,360 --> 00:03:27,840
our experiment shows that when using the

87
00:03:27,840 --> 00:03:31,280
proper variant our protocol is about 1.4

88
00:03:31,280 --> 00:03:35,599
times faster than the protocol in gst20

89
00:03:35,599 --> 00:03:37,680
we also note that when the circuit depth

90
00:03:37,680 --> 00:03:41,200
is 20 our tvs variant works better than

91
00:03:41,200 --> 00:03:43,519
our run compression variant

92
00:03:43,519 --> 00:03:45,599
when the circuit that is soldered our

93
00:03:45,599 --> 00:03:48,720
run compression variant performs better

94
00:03:48,720 --> 00:03:50,879
in reality we can choose the proper

95
00:03:50,879 --> 00:03:54,879
variant based on the circuit depth

96
00:03:57,120 --> 00:03:59,360
we first introduce our construction that

97
00:03:59,360 --> 00:04:01,840
improves the concrete efficiency over

98
00:04:01,840 --> 00:04:05,360
the semi-einstein protocol

99
00:04:05,360 --> 00:04:07,280
the core of the dm protocol is a

100
00:04:07,280 --> 00:04:09,519
multiplication protocol given two input

101
00:04:09,519 --> 00:04:12,480
sharings x and y the goal is to compute

102
00:04:12,480 --> 00:04:14,959
out to compute an output sharing of the

103
00:04:14,959 --> 00:04:17,600
secret x times y

104
00:04:17,600 --> 00:04:19,440
the dn multiplication protocol starts

105
00:04:19,440 --> 00:04:21,519
with a pair of random sharings of the

106
00:04:21,519 --> 00:04:23,280
same random value

107
00:04:23,280 --> 00:04:25,520
we refer to these two sharings as double

108
00:04:25,520 --> 00:04:27,199
sharings

109
00:04:27,199 --> 00:04:29,199
and the whole computation is led by a

110
00:04:29,199 --> 00:04:31,759
single party

111
00:04:31,759 --> 00:04:33,199
we observe that

112
00:04:33,199 --> 00:04:35,520
if the leading party is honest

113
00:04:35,520 --> 00:04:37,759
then croppy parties do not learn any

114
00:04:37,759 --> 00:04:40,000
information even if we do not use

115
00:04:40,000 --> 00:04:43,360
uniform double sharings

116
00:04:43,360 --> 00:04:45,919
therefore uniform double sharings are

117
00:04:45,919 --> 00:04:47,919
only needed when the leading party is

118
00:04:47,919 --> 00:04:49,600
corrupted

119
00:04:49,600 --> 00:04:51,600
our first idea is to play the role of

120
00:04:51,600 --> 00:04:53,360
the leading party in a round-robin

121
00:04:53,360 --> 00:04:56,160
fashion in this way at least a half of

122
00:04:56,160 --> 00:04:58,160
multiplication gates are led by honest

123
00:04:58,160 --> 00:04:59,600
parties

124
00:04:59,600 --> 00:05:01,360
hopefully we only need to prepare the

125
00:05:01,360 --> 00:05:03,039
uniform double shear rings for

126
00:05:03,039 --> 00:05:04,880
multiplication gains led by crops

127
00:05:04,880 --> 00:05:06,560
parties

128
00:05:06,560 --> 00:05:09,199
to this end our second idea is to use

129
00:05:09,199 --> 00:05:11,600
ty's independent double sharings

130
00:05:11,600 --> 00:05:13,919
this ensures that the double share rings

131
00:05:13,919 --> 00:05:16,080
used by croppy parties are uniformly

132
00:05:16,080 --> 00:05:18,479
random

133
00:05:18,880 --> 00:05:21,440
we show that all parties can locally

134
00:05:21,440 --> 00:05:23,600
transform t pairs of uniform double

135
00:05:23,600 --> 00:05:26,240
sharings into n pairs with t wes

136
00:05:26,240 --> 00:05:27,600
independence

137
00:05:27,600 --> 00:05:29,680
in this way we save the cost for the

138
00:05:29,680 --> 00:05:32,160
double shear rings by a factor of 2

139
00:05:32,160 --> 00:05:33,600
which leads to the communication

140
00:05:33,600 --> 00:05:35,440
complexity of 4 elements per

141
00:05:35,440 --> 00:05:39,360
multiplication gate per party

142
00:05:39,360 --> 00:05:41,199
now let's see how to reduce the round

143
00:05:41,199 --> 00:05:42,960
complexity without affecting the

144
00:05:42,960 --> 00:05:45,520
concrete efficiency

145
00:05:45,520 --> 00:05:47,360
the core question is whether we can

146
00:05:47,360 --> 00:05:50,800
evaluate a two layer circuit in parallel

147
00:05:50,800 --> 00:05:53,120
indeed the main difficulty is how to

148
00:05:53,120 --> 00:05:54,960
evaluate the multiplication gates in the

149
00:05:54,960 --> 00:05:58,560
second layer without learning the inputs

150
00:05:58,560 --> 00:06:00,479
our idea makes use of the special

151
00:06:00,479 --> 00:06:02,720
property of the beaver triple and

152
00:06:02,720 --> 00:06:04,400
carefully combines with the dn

153
00:06:04,400 --> 00:06:07,199
multiplication protocol for more details

154
00:06:07,199 --> 00:06:09,759
we refer to our paper and the full video

155
00:06:09,759 --> 00:06:12,240
thank you

156
00:06:15,440 --> 00:06:18,400
perfect thank you very much

157
00:06:18,400 --> 00:06:20,240
and i think you may just continue with

158
00:06:20,240 --> 00:06:23,039
your second done

159
00:06:23,120 --> 00:06:26,759
okay yeah

160
00:06:52,800 --> 00:06:56,080
all right we can see your slides

161
00:06:56,080 --> 00:06:58,580
yeah so

162
00:06:58,580 --> 00:07:02,269
[Music]

163
00:07:04,160 --> 00:07:06,800
yeah so you you can go ahead

164
00:07:06,800 --> 00:07:09,360
yeah i just uh the frontiers message on

165
00:07:09,360 --> 00:07:10,560
the chat so

166
00:07:10,560 --> 00:07:12,080
i just want to see whether it's a

167
00:07:12,080 --> 00:07:14,080
question or not okay

168
00:07:14,080 --> 00:07:16,479
i can continue so we'll do the questions

169
00:07:16,479 --> 00:07:18,319
at the end anyway

170
00:07:18,319 --> 00:07:19,039
so

171
00:07:19,039 --> 00:07:19,919
uh

172
00:07:19,919 --> 00:07:22,240
my second talk is about unconditional

173
00:07:22,240 --> 00:07:24,560
communication efficient and bc via

174
00:07:24,560 --> 00:07:26,319
horseman ethereum

175
00:07:26,319 --> 00:07:28,960
this work is uh closer with vapor goya

176
00:07:28,960 --> 00:07:32,638
and antibonding particle and the other

177
00:07:34,479 --> 00:07:35,520
so

178
00:07:35,520 --> 00:07:37,520
so this slide is the same so i just

179
00:07:37,520 --> 00:07:39,360
repeat the setting

180
00:07:39,360 --> 00:07:40,080
so

181
00:07:40,080 --> 00:07:42,479
in this talk we focus on the function

182
00:07:42,479 --> 00:07:44,720
that can be represented as an arithmetic

183
00:07:44,720 --> 00:07:46,960
circuit with addition and multiplication

184
00:07:46,960 --> 00:07:48,080
gates

185
00:07:48,080 --> 00:07:50,000
uh we focus on the information they're

186
00:07:50,000 --> 00:07:52,240
setting with einstein majority and

187
00:07:52,240 --> 00:07:54,400
assume a p2p channel

188
00:07:54,400 --> 00:07:55,120
a

189
00:07:55,120 --> 00:07:56,960
thermal p2p channel between every pair

190
00:07:56,960 --> 00:08:00,160
of parties so in the following we use n

191
00:08:00,160 --> 00:08:02,400
for the number of parties and t for the

192
00:08:02,400 --> 00:08:05,758
number of crappy parties

193
00:08:08,560 --> 00:08:10,319
the dream in the information series

194
00:08:10,319 --> 00:08:12,720
setting is to achieve order of c for the

195
00:08:12,720 --> 00:08:15,360
communication complexity or even less

196
00:08:15,360 --> 00:08:17,840
here c is the circuit size

197
00:08:17,840 --> 00:08:19,840
in the so-called optimal threshold

198
00:08:19,840 --> 00:08:22,720
setting where t is equal to n minus 1

199
00:08:22,720 --> 00:08:24,080
over 2.

200
00:08:24,080 --> 00:08:26,639
first no results require out of n times

201
00:08:26,639 --> 00:08:29,840
c total communication

202
00:08:30,240 --> 00:08:32,320
when we move to the suboptimal case

203
00:08:32,320 --> 00:08:35,120
where there is a gap k between t and n

204
00:08:35,120 --> 00:08:37,279
mass one over two

205
00:08:37,279 --> 00:08:39,679
the work by franklin and jung showed how

206
00:08:39,679 --> 00:08:42,799
to evaluate k copies of the same circuit

207
00:08:42,799 --> 00:08:45,440
such that the amortized cost per circuit

208
00:08:45,440 --> 00:08:47,440
is out of c

209
00:08:47,440 --> 00:08:49,680
however the problem becomes tricky when

210
00:08:49,680 --> 00:08:52,000
evaluating a single circuit

211
00:08:52,000 --> 00:08:54,800
no solutions either has a log c factor

212
00:08:54,800 --> 00:08:56,959
or a logan to the power of one plus

213
00:08:56,959 --> 00:08:58,880
epsilon factor in the communication

214
00:08:58,880 --> 00:09:01,600
complexity

215
00:09:02,080 --> 00:09:04,720
to recent works in eurocrypt also try to

216
00:09:04,720 --> 00:09:06,240
solve this problem

217
00:09:06,240 --> 00:09:08,800
however their solutions either only

218
00:09:08,800 --> 00:09:10,880
achieve the desired efficiency in the

219
00:09:10,880 --> 00:09:12,240
offline phase

220
00:09:12,240 --> 00:09:14,399
or only work for a restricted class of

221
00:09:14,399 --> 00:09:16,720
circuits

222
00:09:16,720 --> 00:09:18,320
many attempts towards solving this

223
00:09:18,320 --> 00:09:21,360
problem lead to our following question

224
00:09:21,360 --> 00:09:23,360
is it possible to construct information

225
00:09:23,360 --> 00:09:26,080
theoretical npc protocols for computing

226
00:09:26,080 --> 00:09:28,399
a single arithmetic circuit with total

227
00:09:28,399 --> 00:09:32,000
communication complexity order of c

228
00:09:32,000 --> 00:09:33,839
in this work we answer this question

229
00:09:33,839 --> 00:09:35,279
affirmatively

230
00:09:35,279 --> 00:09:37,279
our theorem shows that

231
00:09:37,279 --> 00:09:39,040
when k is out of n

232
00:09:39,040 --> 00:09:41,600
there is an information theoretical pc

233
00:09:41,600 --> 00:09:43,360
which computes a single arithmetic

234
00:09:43,360 --> 00:09:45,680
circuit with communication complexity

235
00:09:45,680 --> 00:09:48,320
out of c

236
00:09:48,320 --> 00:09:50,880
an example called array is when t is

237
00:09:50,880 --> 00:09:54,160
equal to 0. 0.49 times n

238
00:09:54,160 --> 00:09:56,240
the achieved communication complexity is

239
00:09:56,240 --> 00:09:58,800
order of c

240
00:10:00,880 --> 00:10:02,800
our work used the idea of the packed

241
00:10:02,800 --> 00:10:04,880
chemical sharing in the standard

242
00:10:04,880 --> 00:10:06,800
chemistry ring we use a random

243
00:10:06,800 --> 00:10:10,320
polynomial to hide a single secret

244
00:10:10,320 --> 00:10:12,560
the idea of the pythagorean sharing is

245
00:10:12,560 --> 00:10:14,640
to have multiple sequence laws as

246
00:10:14,640 --> 00:10:18,000
illustrated in the picture

247
00:10:18,000 --> 00:10:20,880
in general we want to pack k-var values

248
00:10:20,880 --> 00:10:23,519
within a single sharing and evaluate a

249
00:10:23,519 --> 00:10:26,240
batch of k gates each time

250
00:10:26,240 --> 00:10:28,320
however there are several difficulties

251
00:10:28,320 --> 00:10:30,399
with this approach

252
00:10:30,399 --> 00:10:32,800
one of the difficulties is the need of

253
00:10:32,800 --> 00:10:35,120
aligning input sharings

254
00:10:35,120 --> 00:10:37,200
basic protocols for additions and

255
00:10:37,200 --> 00:10:39,680
multiplications only support coordinate

256
00:10:39,680 --> 00:10:41,519
wise operations

257
00:10:41,519 --> 00:10:43,600
to obtain the correct results it

258
00:10:43,600 --> 00:10:45,519
requires the secrets within a single

259
00:10:45,519 --> 00:10:48,720
sharing to be in the correct order

260
00:10:48,720 --> 00:10:50,959
however during the computation the

261
00:10:50,959 --> 00:10:53,200
secrets within a single sharing may not

262
00:10:53,200 --> 00:10:55,839
be in the order we want it requires us

263
00:10:55,839 --> 00:10:58,000
to design efficient protocol for the

264
00:10:58,000 --> 00:11:00,880
secret reordering

265
00:11:00,880 --> 00:11:03,680
in the ak-10 dump guard and others show

266
00:11:03,680 --> 00:11:04,480
that

267
00:11:04,480 --> 00:11:06,079
the secret reading can be done

268
00:11:06,079 --> 00:11:07,839
efficiently with the help of the

269
00:11:07,839 --> 00:11:09,920
pre-processing data

270
00:11:09,920 --> 00:11:12,079
however the limitation is that the

271
00:11:12,079 --> 00:11:14,240
communication overhead is proportional

272
00:11:14,240 --> 00:11:16,800
to the number of different permutations

273
00:11:16,800 --> 00:11:18,959
in the worst case women need to perform

274
00:11:18,959 --> 00:11:21,440
a different permutation each time which

275
00:11:21,440 --> 00:11:23,839
eliminates the benefits of the

276
00:11:23,839 --> 00:11:27,399
protect sharing

277
00:11:28,079 --> 00:11:29,920
our idea is to first prepare the

278
00:11:29,920 --> 00:11:32,240
pre-processing data for a limited number

279
00:11:32,240 --> 00:11:34,079
of different permutations

280
00:11:34,079 --> 00:11:35,519
and then transform them to the

281
00:11:35,519 --> 00:11:37,519
privatization data for the permutations

282
00:11:37,519 --> 00:11:39,040
we want

283
00:11:39,040 --> 00:11:40,160
note that

284
00:11:40,160 --> 00:11:41,760
here a limited number of different

285
00:11:41,760 --> 00:11:43,040
permutations

286
00:11:43,040 --> 00:11:45,440
means that we use many copies of the

287
00:11:45,440 --> 00:11:46,959
same permutation

288
00:11:46,959 --> 00:11:48,959
rather than reducing the total number of

289
00:11:48,959 --> 00:11:50,720
permutations

290
00:11:50,720 --> 00:11:52,959
the core of our idea is a connection to

291
00:11:52,959 --> 00:11:56,160
the graph theory

292
00:11:56,160 --> 00:11:58,240
house married ethereum is a well-known

293
00:11:58,240 --> 00:12:00,320
theorem in the graph theory which has

294
00:12:00,320 --> 00:12:02,320
many applications in mathematics and

295
00:12:02,320 --> 00:12:03,839
computer science

296
00:12:03,839 --> 00:12:05,680
it provides an unnecessary and

297
00:12:05,680 --> 00:12:08,720
sufficient condition of the existence of

298
00:12:08,720 --> 00:12:10,560
a perfect matching you know bipartite

299
00:12:10,560 --> 00:12:11,920
graph

300
00:12:11,920 --> 00:12:13,920
near a part of the graph a perfect

301
00:12:13,920 --> 00:12:16,399
matching is a set of edges such that

302
00:12:16,399 --> 00:12:18,639
each node has degree 1.

303
00:12:18,639 --> 00:12:20,880
in this work we use a weaker version of

304
00:12:20,880 --> 00:12:23,120
the host memory theorem which states

305
00:12:23,120 --> 00:12:25,600
that for by part of the graph where each

306
00:12:25,600 --> 00:12:27,760
node has the same degree there is a

307
00:12:27,760 --> 00:12:30,560
perfect imaging

308
00:12:30,560 --> 00:12:31,600
note that

309
00:12:31,600 --> 00:12:33,360
a perfect matching corresponds to a

310
00:12:33,360 --> 00:12:36,079
permutation

311
00:12:36,240 --> 00:12:38,240
now we connect our problem to the host

312
00:12:38,240 --> 00:12:39,680
memory theorem

313
00:12:39,680 --> 00:12:42,480
suppose p1 to pm are the permutations we

314
00:12:42,480 --> 00:12:45,040
want to perform during the computation

315
00:12:45,040 --> 00:12:47,440
we first construct a bipartite graph by

316
00:12:47,440 --> 00:12:49,680
inserting the by inserting the perfect

317
00:12:49,680 --> 00:12:53,519
matching corresponds to each permutation

318
00:12:53,519 --> 00:12:56,160
to prepare the processing data for p1 to

319
00:12:56,160 --> 00:12:57,200
pm

320
00:12:57,200 --> 00:13:00,000
we managed to show that it is sufficient

321
00:13:00,000 --> 00:13:02,399
to prepare the preprocessing data for a

322
00:13:02,399 --> 00:13:05,440
different set of permutations q1 to qm

323
00:13:05,440 --> 00:13:06,480
such that

324
00:13:06,480 --> 00:13:09,040
the bipartite graph constructed from q1

325
00:13:09,040 --> 00:13:12,000
to qm is the same as the bipartite graph

326
00:13:12,000 --> 00:13:15,680
constructed from p1 to pm

327
00:13:15,680 --> 00:13:18,079
using the host memory theorem we show

328
00:13:18,079 --> 00:13:20,720
that we can find such q1 to qm with

329
00:13:20,720 --> 00:13:23,040
limited number of different permutations

330
00:13:23,040 --> 00:13:25,200
which solves the problem

331
00:13:25,200 --> 00:13:27,040
for more details and solutions to other

332
00:13:27,040 --> 00:13:29,360
difficulties we refer to our paper and

333
00:13:29,360 --> 00:13:33,800
the full video thank you

334
00:13:35,440 --> 00:13:38,240
okay thank you very much fun

335
00:13:38,240 --> 00:13:41,040
um all the questions uh

336
00:13:41,040 --> 00:13:43,680
please post them in the zulu chat

337
00:13:43,680 --> 00:13:45,040
and

338
00:13:45,040 --> 00:13:47,360
we'll answer them at the end of the

339
00:13:47,360 --> 00:13:49,680
session and we continue with the next

340
00:13:49,680 --> 00:13:51,120
talk uh

341
00:13:51,120 --> 00:13:53,680
by uh

342
00:13:54,480 --> 00:13:56,800
okay

343
00:13:58,079 --> 00:13:59,760
who will be talking about

344
00:13:59,760 --> 00:14:02,079
non-interactive secure multi-party

345
00:14:02,079 --> 00:14:03,920
computation for symmetric functions

346
00:14:03,920 --> 00:14:06,079
revisited more efficient constructions

347
00:14:06,079 --> 00:14:08,639
and extensions real please

348
00:14:08,639 --> 00:14:10,560
thank you for your introduction uh my

349
00:14:10,560 --> 00:14:12,399
name is ray origuchi

350
00:14:12,399 --> 00:14:17,040
this is a joint work with kazuma uhara

351
00:14:20,079 --> 00:14:22,079
first we introduce a non-interactive

352
00:14:22,079 --> 00:14:24,240
multi-party computation

353
00:14:24,240 --> 00:14:26,800
this is a variant of secure computation

354
00:14:26,800 --> 00:14:29,440
that allows each player to stand only in

355
00:14:29,440 --> 00:14:31,680
a single message depending on the

356
00:14:31,680 --> 00:14:33,440
private inputs

357
00:14:33,440 --> 00:14:35,120
in this model our players do not

358
00:14:35,120 --> 00:14:38,639
communicate with each other and so they

359
00:14:38,639 --> 00:14:40,480
they only send their messages to an

360
00:14:40,480 --> 00:14:42,839
output player called the

361
00:14:42,839 --> 00:14:45,680
evaluator so nipc can realize the

362
00:14:45,680 --> 00:14:48,320
synchronous multi-party computation

363
00:14:48,320 --> 00:14:50,079
which is especially important in

364
00:14:50,079 --> 00:14:52,800
applications to voting auctions

365
00:14:52,800 --> 00:14:55,360
statistical survey and so on

366
00:14:55,360 --> 00:14:57,279
we note that a standard multipatchy

367
00:14:57,279 --> 00:14:59,360
computation assumes simultaneous

368
00:14:59,360 --> 00:15:01,279
interaction between players

369
00:15:01,279 --> 00:15:03,760
so some player may need to wait for

370
00:15:03,760 --> 00:15:06,160
messages from other players that leads

371
00:15:06,160 --> 00:15:09,680
to a delay in communication

372
00:15:10,639 --> 00:15:12,560
previously it is known that

373
00:15:12,560 --> 00:15:15,440
unconditionally secure and impc for all

374
00:15:15,440 --> 00:15:18,240
the annual input functions is possible

375
00:15:18,240 --> 00:15:21,040
however such a protocol must result in

376
00:15:21,040 --> 00:15:23,040
exponentially large communication

377
00:15:23,040 --> 00:15:26,480
complexity because of a non-low bound

378
00:15:26,480 --> 00:15:29,199
so in this work we focus on a special

379
00:15:29,199 --> 00:15:32,079
class of practical functions and we aim

380
00:15:32,079 --> 00:15:34,399
at reducing communication complexity of

381
00:15:34,399 --> 00:15:39,800
an imbc for those specific functions

382
00:15:40,240 --> 00:15:42,320
here we summarize our results

383
00:15:42,320 --> 00:15:45,120
first we propose an efficient nimbc

384
00:15:45,120 --> 00:15:47,839
protocol for symmetric functions which

385
00:15:47,839 --> 00:15:51,519
are applicable to voting and auctions

386
00:15:51,519 --> 00:15:53,440
our protocol improves the best known

387
00:15:53,440 --> 00:15:55,199
communication complexity for symmetric

388
00:15:55,199 --> 00:15:57,040
functions

389
00:15:57,040 --> 00:15:59,360
we also propose an efficient nipc

390
00:15:59,360 --> 00:16:01,759
protocol for linear classifiers

391
00:16:01,759 --> 00:16:03,920
they include support vector machines and

392
00:16:03,920 --> 00:16:05,920
logistic regression

393
00:16:05,920 --> 00:16:08,000
our protocol is the first one tailored

394
00:16:08,000 --> 00:16:10,320
to linear classifiers other than the

395
00:16:10,320 --> 00:16:13,279
general bad inefficient construction for

396
00:16:13,279 --> 00:16:15,519
all the n-input functions

397
00:16:15,519 --> 00:16:18,320
in addition we revisit a previously

398
00:16:18,320 --> 00:16:20,000
known transformation technique to

399
00:16:20,000 --> 00:16:23,040
strengthen the privacy of an impc

400
00:16:23,040 --> 00:16:25,279
it's an important technique for an mpc

401
00:16:25,279 --> 00:16:27,600
and actually we use it in the bad

402
00:16:27,600 --> 00:16:29,600
efficiency improvement part of our

403
00:16:29,600 --> 00:16:32,160
construction

404
00:16:33,199 --> 00:16:35,519
in this work we revealed that their sub

405
00:16:35,519 --> 00:16:36,560
protocol

406
00:16:36,560 --> 00:16:38,240
used as a building block does not

407
00:16:38,240 --> 00:16:40,959
satisfy the security requirements and so

408
00:16:40,959 --> 00:16:42,639
their transformation technique is not

409
00:16:42,639 --> 00:16:44,079
secure either

410
00:16:44,079 --> 00:16:45,680
however we

411
00:16:45,680 --> 00:16:48,160
also propose a technique to fix the

412
00:16:48,160 --> 00:16:50,480
security issue without increasing their

413
00:16:50,480 --> 00:16:53,040
communication complexity so in summary

414
00:16:53,040 --> 00:16:55,279
the original statements still hold true

415
00:16:55,279 --> 00:16:57,120
but it is necessary to replace their

416
00:16:57,120 --> 00:17:00,560
building block with others

417
00:17:01,600 --> 00:17:04,000
first a symmetric function is a function

418
00:17:04,000 --> 00:17:06,559
such that its value does not change even

419
00:17:06,559 --> 00:17:08,480
if we have visually permute input

420
00:17:08,480 --> 00:17:09,760
variables

421
00:17:09,760 --> 00:17:11,599
for this function we propose an

422
00:17:11,599 --> 00:17:13,919
efficient nimpc protocol foods

423
00:17:13,919 --> 00:17:16,240
communication complexity improve the

424
00:17:16,240 --> 00:17:18,480
first protocol

425
00:17:18,480 --> 00:17:20,240
our protocol is uncomparable to the

426
00:17:20,240 --> 00:17:22,880
second one but if the number of

427
00:17:22,880 --> 00:17:25,599
corrupted players t is much smaller than

428
00:17:25,599 --> 00:17:26,640
them

429
00:17:26,640 --> 00:17:28,960
our protocol is even more efficient than

430
00:17:28,960 --> 00:17:31,679
the second one because the exponent is

431
00:17:31,679 --> 00:17:34,240
smaller

432
00:17:35,039 --> 00:17:37,039
here we show a

433
00:17:37,039 --> 00:17:39,840
very high level idea of a construction

434
00:17:39,840 --> 00:17:42,160
following the previous work we consider

435
00:17:42,160 --> 00:17:44,400
a generalized notion of symmetric

436
00:17:44,400 --> 00:17:48,160
functions called a bellyam program

437
00:17:48,160 --> 00:17:50,720
it takes as input on n group elements

438
00:17:50,720 --> 00:17:52,640
from an abelian group g

439
00:17:52,640 --> 00:17:54,960
and it computes some function f on the

440
00:17:54,960 --> 00:17:57,440
sum of n inputs

441
00:17:57,440 --> 00:17:59,840
our first contribution is proposing a

442
00:17:59,840 --> 00:18:02,080
more efficient and impc protocol for

443
00:18:02,080 --> 00:18:03,679
abelian programs

444
00:18:03,679 --> 00:18:06,400
than the previous one

445
00:18:06,400 --> 00:18:08,880
next we need to restrict input domains

446
00:18:08,880 --> 00:18:11,360
because for for this functionality

447
00:18:11,360 --> 00:18:13,840
players are allowed to set their inputs

448
00:18:13,840 --> 00:18:16,559
as arbitrary elements in g

449
00:18:16,559 --> 00:18:19,280
to restrict input domain to a subset of

450
00:18:19,280 --> 00:18:22,400
only valid inputs we propose a novel

451
00:18:22,400 --> 00:18:25,679
application or bkr transformation

452
00:18:25,679 --> 00:18:28,320
our technique is novel because it was

453
00:18:28,320 --> 00:18:30,320
originally proposed to strengthen the

454
00:18:30,320 --> 00:18:33,280
privacy of an mpc instead of

455
00:18:33,280 --> 00:18:35,440
extending functionalities

456
00:18:35,440 --> 00:18:37,600
of nipc

457
00:18:37,600 --> 00:18:39,760
as a result we can achieve a smaller

458
00:18:39,760 --> 00:18:41,919
overhead in communication complexity in

459
00:18:41,919 --> 00:18:43,039
this step

460
00:18:43,039 --> 00:18:45,760
compared to the previous one

461
00:18:45,760 --> 00:18:48,000
finally this functionality includes

462
00:18:48,000 --> 00:18:50,240
symmetric functions and so we can obtain

463
00:18:50,240 --> 00:18:54,960
an npc protocol for symmetric functions

464
00:18:55,520 --> 00:18:57,360
uh so far we have used bkr

465
00:18:57,360 --> 00:18:59,760
transformation in our construction so we

466
00:18:59,760 --> 00:19:01,840
revisit uh the original transformation

467
00:19:01,840 --> 00:19:02,880
technique

468
00:19:02,880 --> 00:19:05,039
uh it transforms a weaker notion of

469
00:19:05,039 --> 00:19:07,919
nimbc called uh previous private

470
00:19:07,919 --> 00:19:11,039
simultaneous message transfer protocol

471
00:19:11,039 --> 00:19:13,280
into an npc protocol for the same

472
00:19:13,280 --> 00:19:15,280
functionality

473
00:19:15,280 --> 00:19:17,440
as a building block their transformation

474
00:19:17,440 --> 00:19:20,640
needs an npc protocol for what they call

475
00:19:20,640 --> 00:19:23,280
outputting message functions

476
00:19:23,280 --> 00:19:25,679
an output messaging function outputs a

477
00:19:25,679 --> 00:19:28,880
message m exactly when inputs satisfy a

478
00:19:28,880 --> 00:19:30,960
linear equation

479
00:19:30,960 --> 00:19:33,039
uh they actually proposed an nbc

480
00:19:33,039 --> 00:19:35,600
protocol for this functionality however

481
00:19:35,600 --> 00:19:38,480
we reveal that the original protocol

482
00:19:38,480 --> 00:19:41,280
does not even tolerate collusion of a

483
00:19:41,280 --> 00:19:43,919
single input player and an output player

484
00:19:43,919 --> 00:19:45,760
so their transformation is not secure

485
00:19:45,760 --> 00:19:48,160
either

486
00:19:48,559 --> 00:19:51,440
however we propose a

487
00:19:51,440 --> 00:19:54,240
technique to fix their security issue by

488
00:19:54,240 --> 00:19:56,880
proposing a modified and npc protocol

489
00:19:56,880 --> 00:19:59,200
for outputting message functions

490
00:19:59,200 --> 00:20:00,799
the communication complexity of a

491
00:20:00,799 --> 00:20:03,360
protocol is asymptotically the same as

492
00:20:03,360 --> 00:20:05,520
the original one so the original

493
00:20:05,520 --> 00:20:07,919
statements still hold true but it is

494
00:20:07,919 --> 00:20:09,440
necessary to replace their building

495
00:20:09,440 --> 00:20:12,240
block with others

496
00:20:12,240 --> 00:20:14,080
this isn't my thought thank you for

497
00:20:14,080 --> 00:20:16,480
listening

498
00:20:18,400 --> 00:20:21,520
okay yeah thank you very much rail

499
00:20:21,520 --> 00:20:24,320
uh and we'll continue with the last talk

500
00:20:24,320 --> 00:20:26,799
of this session

501
00:20:26,799 --> 00:20:29,520
which will be given by eduardo soria

502
00:20:29,520 --> 00:20:32,240
vasquez and he will be talking about

503
00:20:32,240 --> 00:20:33,840
efficient information theoretic

504
00:20:33,840 --> 00:20:35,600
multi-party computation over

505
00:20:35,600 --> 00:20:38,799
non-community frames

506
00:20:38,799 --> 00:20:40,880
this stage is yours

507
00:20:40,880 --> 00:20:42,799
thank you very much uh so this is

508
00:20:42,799 --> 00:20:45,280
joining the work with uh dania scudero

509
00:20:45,280 --> 00:20:47,280
from mojos university

510
00:20:47,280 --> 00:20:49,440
and

511
00:20:49,440 --> 00:20:51,120
i'll start

512
00:20:51,120 --> 00:20:52,960
if the slides want to move

513
00:20:52,960 --> 00:20:56,180
yes oh wrong wrong slides sorry

514
00:20:56,180 --> 00:20:58,480
[Music]

515
00:20:58,480 --> 00:21:02,600
i'm sorry about that uh

516
00:21:03,240 --> 00:21:06,480
[Music]

517
00:21:10,400 --> 00:21:12,720
okay

518
00:21:13,120 --> 00:21:14,840
yes all right

519
00:21:14,840 --> 00:21:17,200
um so

520
00:21:17,200 --> 00:21:18,640
yeah the talk

521
00:21:18,640 --> 00:21:20,400
it's uh about the physical information

522
00:21:20,400 --> 00:21:22,240
theoretic multi-party computation over

523
00:21:22,240 --> 00:21:24,080
non-communicative rings and if there's

524
00:21:24,080 --> 00:21:25,520
one thing you have to remember about

525
00:21:25,520 --> 00:21:27,520
this talk is that we are the first ones

526
00:21:27,520 --> 00:21:29,440
to provide this result

527
00:21:29,440 --> 00:21:30,480
uh

528
00:21:30,480 --> 00:21:31,679
you know

529
00:21:31,679 --> 00:21:32,880
interpreting

530
00:21:32,880 --> 00:21:35,360
that we work uh blackbox over the

531
00:21:35,360 --> 00:21:38,000
non-commutatively

532
00:21:38,000 --> 00:21:40,720
uh so let's start by recapping how

533
00:21:40,720 --> 00:21:43,039
shamir's secret sharing works

534
00:21:43,039 --> 00:21:45,280
mostly to fix a notation

535
00:21:45,280 --> 00:21:48,159
so if you wanted to share some secret

536
00:21:48,159 --> 00:21:49,280
why

537
00:21:49,280 --> 00:21:50,640
um

538
00:21:50,640 --> 00:21:52,720
the way you can do this using shamir is

539
00:21:52,720 --> 00:21:55,760
that you sample a polynomial of degree

540
00:21:55,760 --> 00:21:57,600
equal to the number of corrupted parties

541
00:21:57,600 --> 00:21:58,960
in your protocol

542
00:21:58,960 --> 00:22:00,799
such that the evaluation of this

543
00:22:00,799 --> 00:22:02,799
polynomial at some fixed designated

544
00:22:02,799 --> 00:22:06,240
point alpha 0 0 here in example equals

545
00:22:06,240 --> 00:22:08,400
your secret

546
00:22:08,400 --> 00:22:09,440
so

547
00:22:09,440 --> 00:22:11,520
it would look something like this

548
00:22:11,520 --> 00:22:14,080
and you define the shares of every party

549
00:22:14,080 --> 00:22:17,120
as the evaluations of this polynomial at

550
00:22:17,120 --> 00:22:18,000
some

551
00:22:18,000 --> 00:22:21,039
designated public points alpha i

552
00:22:21,039 --> 00:22:22,720
so you give to party one uh the

553
00:22:22,720 --> 00:22:26,960
evaluation of the polynomial alpha one

554
00:22:27,200 --> 00:22:29,280
and the notation i'm going to use for

555
00:22:29,280 --> 00:22:32,080
this is this double bracket

556
00:22:32,080 --> 00:22:33,120
and

557
00:22:33,120 --> 00:22:35,520
i will have this subscript to denote the

558
00:22:35,520 --> 00:22:36,960
degree of the

559
00:22:36,960 --> 00:22:38,559
of the polynomial that was used to share

560
00:22:38,559 --> 00:22:41,679
the secret sometimes

561
00:22:41,679 --> 00:22:42,960
so

562
00:22:42,960 --> 00:22:44,320
um

563
00:22:44,320 --> 00:22:46,720
the reason why this protocol is secure

564
00:22:46,720 --> 00:22:48,559
is because you need at least three plus

565
00:22:48,559 --> 00:22:51,039
one points to get any information on the

566
00:22:51,039 --> 00:22:52,240
secret

567
00:22:52,240 --> 00:22:54,640
and the reason so that's about privacy

568
00:22:54,640 --> 00:22:56,480
and how do you get correctness is

569
00:22:56,480 --> 00:22:58,400
basically because uh shamir secret

570
00:22:58,400 --> 00:23:00,559
sharing is a ritual code

571
00:23:00,559 --> 00:23:03,679
so when parties want to reconstruct the

572
00:23:03,679 --> 00:23:04,799
secret

573
00:23:04,799 --> 00:23:06,400
they are just going to announce their

574
00:23:06,400 --> 00:23:08,400
evaluations of the polynomial

575
00:23:08,400 --> 00:23:10,880
and then either doing error detection or

576
00:23:10,880 --> 00:23:12,240
correction depending on the number of

577
00:23:12,240 --> 00:23:13,600
corruptions

578
00:23:13,600 --> 00:23:15,679
parties will be able to recover the

579
00:23:15,679 --> 00:23:17,280
secret

580
00:23:17,280 --> 00:23:18,720
okay so this is how it works over a

581
00:23:18,720 --> 00:23:19,919
finite field

582
00:23:19,919 --> 00:23:22,000
and the small note before going ahead

583
00:23:22,000 --> 00:23:23,520
that might sound obvious is that you

584
00:23:23,520 --> 00:23:25,200
need the size of your field to be bigger

585
00:23:25,200 --> 00:23:27,360
than the number of parties otherwise you

586
00:23:27,360 --> 00:23:29,840
don't have enough points to

587
00:23:29,840 --> 00:23:31,600
for your polynomial

588
00:23:31,600 --> 00:23:33,600
so if you want to if you wanted to just

589
00:23:33,600 --> 00:23:36,000
work with like a boolean secret you need

590
00:23:36,000 --> 00:23:38,960
to move to an extension of degree d as

591
00:23:38,960 --> 00:23:41,120
we did here in the example

592
00:23:41,120 --> 00:23:43,279
uh and this degree d is glorified in the

593
00:23:43,279 --> 00:23:45,120
number of parties

594
00:23:45,120 --> 00:23:47,360
uh so some nice properties of samir's

595
00:23:47,360 --> 00:23:49,760
scheme is that it is linear

596
00:23:49,760 --> 00:23:51,840
meaning that if you take a secret x you

597
00:23:51,840 --> 00:23:54,480
can multiply it by some scalar a in the

598
00:23:54,480 --> 00:23:56,880
field on the left hand side or on the

599
00:23:56,880 --> 00:23:58,960
right hand side you can sum all of these

600
00:23:58,960 --> 00:24:00,159
things together

601
00:24:00,159 --> 00:24:02,240
what does this mean it means that if you

602
00:24:02,240 --> 00:24:04,480
take this vector of evaluations of a

603
00:24:04,480 --> 00:24:05,760
polynomial

604
00:24:05,760 --> 00:24:08,799
uh this constitutes a vector space over

605
00:24:08,799 --> 00:24:11,120
your finite field

606
00:24:11,120 --> 00:24:12,799
okay another

607
00:24:12,799 --> 00:24:14,720
nice property about xiaomi's scheme is

608
00:24:14,720 --> 00:24:16,480
that it's what's known as strongly

609
00:24:16,480 --> 00:24:18,159
multiplicative

610
00:24:18,159 --> 00:24:20,240
meaning that if you take two vectors

611
00:24:20,240 --> 00:24:22,400
that are the evaluations of two degree

612
00:24:22,400 --> 00:24:23,840
polynomials

613
00:24:23,840 --> 00:24:26,320
and you multiply component wise these

614
00:24:26,320 --> 00:24:27,520
vectors

615
00:24:27,520 --> 00:24:29,520
you end up having what would be like a

616
00:24:29,520 --> 00:24:31,440
secret sharing of the product of the

617
00:24:31,440 --> 00:24:32,559
secrets

618
00:24:32,559 --> 00:24:35,440
using a degree two t polynomial

619
00:24:35,440 --> 00:24:38,000
and crucially the reason why both of

620
00:24:38,000 --> 00:24:40,240
these very nice properties hope

621
00:24:40,240 --> 00:24:43,840
is that a evaluation

622
00:24:43,840 --> 00:24:46,000
of a polynomial at some designated point

623
00:24:46,000 --> 00:24:48,880
alpha is a ring of memorism

624
00:24:48,880 --> 00:24:50,960
so it's the same thing to some

625
00:24:50,960 --> 00:24:54,000
polynomials and evaluate them afterwards

626
00:24:54,000 --> 00:24:56,720
or to evaluate them and then sum them

627
00:24:56,720 --> 00:24:59,200
and the same thing for multiplication

628
00:24:59,200 --> 00:25:03,200
this is why all of these properties work

629
00:25:03,200 --> 00:25:05,760
um so before moving to our result i'll

630
00:25:05,760 --> 00:25:08,400
make a quick stop uh to talk about how

631
00:25:08,400 --> 00:25:10,240
do you do this over a commutative ring

632
00:25:10,240 --> 00:25:12,159
this was a work that was presented on

633
00:25:12,159 --> 00:25:13,520
tcc uh

634
00:25:13,520 --> 00:25:15,440
on 2019

635
00:25:15,440 --> 00:25:17,360
and i cannot get into the details

636
00:25:17,360 --> 00:25:18,960
because there's not enough time

637
00:25:18,960 --> 00:25:20,880
but the important thing is that as long

638
00:25:20,880 --> 00:25:22,799
as the points you choose for the

639
00:25:22,799 --> 00:25:25,200
evaluation of the polynomial for the

640
00:25:25,200 --> 00:25:27,120
parties

641
00:25:27,120 --> 00:25:29,919
they constitute an exceptional set which

642
00:25:29,919 --> 00:25:31,840
means that the difference of any two of

643
00:25:31,840 --> 00:25:34,320
these points is invertible

644
00:25:34,320 --> 00:25:36,400
you're good to go and everything works

645
00:25:36,400 --> 00:25:38,880
as it did in the field case

646
00:25:38,880 --> 00:25:41,120
the problem that come that appears now

647
00:25:41,120 --> 00:25:42,400
is that if you

648
00:25:42,400 --> 00:25:44,400
look for example at the ring of integers

649
00:25:44,400 --> 00:25:45,919
modulo 2 to the k

650
00:25:45,919 --> 00:25:47,919
this contains an exceptional set of size

651
00:25:47,919 --> 00:25:49,679
bigger than 2.

652
00:25:49,679 --> 00:25:51,200
if you take any three elements two of

653
00:25:51,200 --> 00:25:53,360
them will have the same parity

654
00:25:53,360 --> 00:25:56,000
so the solution now is the same that we

655
00:25:56,000 --> 00:25:57,679
did in the finite field right if you

656
00:25:57,679 --> 00:26:01,520
wanted to to do a protocol over f2 you

657
00:26:01,520 --> 00:26:03,600
have to move to a gallon extension to

658
00:26:03,600 --> 00:26:05,120
find a bigger field

659
00:26:05,120 --> 00:26:07,120
so here you do the same thing

660
00:26:07,120 --> 00:26:08,960
you move to a gallon extension of the

661
00:26:08,960 --> 00:26:11,120
integers modulo 2 to the k

662
00:26:11,120 --> 00:26:12,480
and

663
00:26:12,480 --> 00:26:13,360
if

664
00:26:13,360 --> 00:26:16,159
the the size of these exceptional sets

665
00:26:16,159 --> 00:26:18,080
grows the same way it does in the finite

666
00:26:18,080 --> 00:26:19,200
field case

667
00:26:19,200 --> 00:26:21,679
so if your extension is of degree d you

668
00:26:21,679 --> 00:26:24,000
will have an exceptional set of degree

669
00:26:24,000 --> 00:26:26,559
two to the d

670
00:26:26,640 --> 00:26:30,480
so i have this one slide about our work

671
00:26:30,480 --> 00:26:32,480
uh so if

672
00:26:32,480 --> 00:26:35,840
we take the set of the evaluation points

673
00:26:35,840 --> 00:26:37,200
to do some music sharing over a

674
00:26:37,200 --> 00:26:39,039
non-communicative ring

675
00:26:39,039 --> 00:26:41,679
uh what we first need from them is that

676
00:26:41,679 --> 00:26:43,600
they need to be an exceptional set as it

677
00:26:43,600 --> 00:26:46,000
was in the commutative ring case

678
00:26:46,000 --> 00:26:46,960
uh

679
00:26:46,960 --> 00:26:49,200
and then we have two options to choose

680
00:26:49,200 --> 00:26:50,720
from

681
00:26:50,720 --> 00:26:53,679
so if this set of evaluation points is

682
00:26:53,679 --> 00:26:56,159
contained on the center of the ring that

683
00:26:56,159 --> 00:26:58,640
means if these points alpha i commute

684
00:26:58,640 --> 00:27:01,520
with every other element in the ring

685
00:27:01,520 --> 00:27:02,480
um

686
00:27:02,480 --> 00:27:04,000
it's the same moral of the story as in

687
00:27:04,000 --> 00:27:06,880
the community green case uh xiaomi's

688
00:27:06,880 --> 00:27:09,200
scheme is a

689
00:27:09,200 --> 00:27:11,679
linear meaning that it is a bi-module so

690
00:27:11,679 --> 00:27:13,840
you can multiply with scalars from the

691
00:27:13,840 --> 00:27:15,200
left-hand side or from the right-hand

692
00:27:15,200 --> 00:27:16,000
side

693
00:27:16,000 --> 00:27:18,399
and it's still strongly multiplicative

694
00:27:18,399 --> 00:27:20,159
so everything works as in the

695
00:27:20,159 --> 00:27:22,080
commutative ring case or as in the frame

696
00:27:22,080 --> 00:27:23,919
field case

697
00:27:23,919 --> 00:27:25,520
but if you relax

698
00:27:25,520 --> 00:27:27,679
what you ask from this set of evaluation

699
00:27:27,679 --> 00:27:28,640
points

700
00:27:28,640 --> 00:27:30,240
so that they just need to commute with

701
00:27:30,240 --> 00:27:32,000
each other rather than commuting with

702
00:27:32,000 --> 00:27:34,799
every element of the ring you can still

703
00:27:34,799 --> 00:27:37,120
do shamir secret sharing and you can

704
00:27:37,120 --> 00:27:40,159
still do npc protocols

705
00:27:40,159 --> 00:27:41,600
the problem

706
00:27:41,600 --> 00:27:42,480
uh

707
00:27:42,480 --> 00:27:44,000
those familiar with non-computative

708
00:27:44,000 --> 00:27:45,919
algebra will understand this

709
00:27:45,919 --> 00:27:48,240
those who are not i invite you to check

710
00:27:48,240 --> 00:27:50,480
the full talk on the paper

711
00:27:50,480 --> 00:27:54,080
is that polynomial evaluation at this uh

712
00:27:54,080 --> 00:27:55,600
points alpha i

713
00:27:55,600 --> 00:27:58,640
is not going to be a ring homomorphic so

714
00:27:58,640 --> 00:28:00,720
it's not going to be the same thing to

715
00:28:00,720 --> 00:28:02,000
for example

716
00:28:02,000 --> 00:28:04,399
evaluate polynomials at some point alpha

717
00:28:04,399 --> 00:28:05,520
i

718
00:28:05,520 --> 00:28:08,000
and then multiply them or multiply them

719
00:28:08,000 --> 00:28:10,720
and they evaluate

720
00:28:10,720 --> 00:28:11,679
so

721
00:28:11,679 --> 00:28:14,320
what happens with chemist's theme now

722
00:28:14,320 --> 00:28:16,960
is that you have to choose

723
00:28:16,960 --> 00:28:19,600
from which side you want it to be linear

724
00:28:19,600 --> 00:28:22,960
so you can get either a left module or a

725
00:28:22,960 --> 00:28:25,279
right module but you cannot share a

726
00:28:25,279 --> 00:28:26,640
secret

727
00:28:26,640 --> 00:28:29,360
having this bi-mobile structure

728
00:28:29,360 --> 00:28:31,520
furthermore the skin cannot be

729
00:28:31,520 --> 00:28:34,320
multiplicative which is a big problem

730
00:28:34,320 --> 00:28:36,799
and this makes things such as the online

731
00:28:36,799 --> 00:28:38,720
phase trickier if you were hearing the

732
00:28:38,720 --> 00:28:41,520
first talk you you saw this trick about

733
00:28:41,520 --> 00:28:44,080
uh the double sharings which consist of

734
00:28:44,080 --> 00:28:45,679
you know you multiply your secrets using

735
00:28:45,679 --> 00:28:47,279
the strongly multiplicative property and

736
00:28:47,279 --> 00:28:49,200
then you put the degree down so now you

737
00:28:49,200 --> 00:28:50,880
cannot do this anymore

738
00:28:50,880 --> 00:28:52,720
and you have to use some

739
00:28:52,720 --> 00:28:55,120
kind of enhanced beaver triples to do

740
00:28:55,120 --> 00:28:56,640
this trick

741
00:28:56,640 --> 00:28:58,159
the problem now is that you're pushing

742
00:28:58,159 --> 00:29:00,960
the this issue to the process

743
00:29:00,960 --> 00:29:03,440
and uh that makes things complicated but

744
00:29:03,440 --> 00:29:05,120
again we have a solution for that and i

745
00:29:05,120 --> 00:29:07,120
invite you to check the full talk for

746
00:29:07,120 --> 00:29:10,640
these details or the paper or asbestos

747
00:29:10,640 --> 00:29:12,640
um so

748
00:29:12,640 --> 00:29:14,880
just to give a concrete example of these

749
00:29:14,880 --> 00:29:16,159
choices

750
00:29:16,159 --> 00:29:18,559
if you wanted to do a shamier secret

751
00:29:18,559 --> 00:29:21,360
sharing or mpc protocol over the ring of

752
00:29:21,360 --> 00:29:23,760
matrices over there just to interrupt

753
00:29:23,760 --> 00:29:26,159
you really quick can you try to wrap up

754
00:29:26,159 --> 00:29:27,039
maybe

755
00:29:27,039 --> 00:29:30,399
yeah this is the last thing sorry okay

756
00:29:30,399 --> 00:29:32,159
okay so if you take this ring as an

757
00:29:32,159 --> 00:29:33,360
example

758
00:29:33,360 --> 00:29:35,679
um the center of this ring has the

759
00:29:35,679 --> 00:29:38,480
problem that the exceptional set

760
00:29:38,480 --> 00:29:40,960
is of size only two

761
00:29:40,960 --> 00:29:43,200
uh whereas if you

762
00:29:43,200 --> 00:29:45,440
if you go to the more relaxed setting

763
00:29:45,440 --> 00:29:48,559
uh you can find within it a set that is

764
00:29:48,559 --> 00:29:50,880
of size two to the m

765
00:29:50,880 --> 00:29:52,559
because you can basically embed this

766
00:29:52,559 --> 00:29:55,200
color ring into the matrix

767
00:29:55,200 --> 00:29:57,440
so you know if

768
00:29:57,440 --> 00:29:58,720
the the

769
00:29:58,720 --> 00:30:00,720
take away from that is that

770
00:30:00,720 --> 00:30:01,760
uh

771
00:30:01,760 --> 00:30:03,760
you can make your ring

772
00:30:03,760 --> 00:30:05,360
you'd rather to move to like an

773
00:30:05,360 --> 00:30:07,840
extension which is kind of like useless

774
00:30:07,840 --> 00:30:09,279
space that you don't need to advertise

775
00:30:09,279 --> 00:30:11,279
during other work or using other works

776
00:30:11,279 --> 00:30:13,360
you cannot use this extension degree to

777
00:30:13,360 --> 00:30:14,880
work with matrices

778
00:30:14,880 --> 00:30:16,480
that are of size at least logarithmic in

779
00:30:16,480 --> 00:30:18,159
the number of parties uh sorry i'm going

780
00:30:18,159 --> 00:30:21,799
to work that thank you

781
00:30:22,640 --> 00:30:25,039
okay thank you very much

782
00:30:25,039 --> 00:30:28,080
um so we'll move on to the

783
00:30:28,080 --> 00:30:30,799
q a and i guess we'll go again in the

784
00:30:30,799 --> 00:30:32,880
order of the talks so there there's a

785
00:30:32,880 --> 00:30:34,320
question by uh

786
00:30:34,320 --> 00:30:38,159
daniel uh for ethan uh daniel if you

787
00:30:38,159 --> 00:30:39,919
could uh mute yourself then

788
00:30:39,919 --> 00:30:41,840
ask the question

789
00:30:41,840 --> 00:30:44,799
oh i was just gonna ask uh uh let's

790
00:30:44,799 --> 00:30:47,200
bring some more information about so

791
00:30:47,200 --> 00:30:50,640
what is an affiliate sorry abelian

792
00:30:50,640 --> 00:30:52,799
program um

793
00:30:52,799 --> 00:30:54,880
in the context

794
00:30:54,880 --> 00:30:56,799
that you're using it

795
00:30:56,799 --> 00:30:58,159
yeah um

796
00:30:58,159 --> 00:31:01,039
anabelian program is generalized class

797
00:31:01,039 --> 00:31:04,399
of symmetric functions uh for example

798
00:31:04,399 --> 00:31:05,120
if

799
00:31:05,120 --> 00:31:07,600
uh d equal to two at that that means

800
00:31:07,600 --> 00:31:10,399
boolean symmetric functions uh are

801
00:31:10,399 --> 00:31:12,480
considered um

802
00:31:12,480 --> 00:31:13,600
um

803
00:31:13,600 --> 00:31:16,080
a boolean symmetric function depends

804
00:31:16,080 --> 00:31:20,080
only on the sum of n inputs in over

805
00:31:20,080 --> 00:31:22,159
integers we uh an abelian program

806
00:31:22,159 --> 00:31:25,200
capture that intuition and generalize it

807
00:31:25,200 --> 00:31:27,200
to the uh

808
00:31:27,200 --> 00:31:30,399
general abelian group

809
00:31:30,559 --> 00:31:34,159
so is it like the uh order of

810
00:31:34,159 --> 00:31:36,159
the function

811
00:31:36,159 --> 00:31:38,640
usage on the inputs is that pretty much

812
00:31:38,640 --> 00:31:39,760
then

813
00:31:39,760 --> 00:31:42,880
you can interchange the order

814
00:31:42,880 --> 00:31:44,960
order

815
00:31:44,960 --> 00:31:47,600
what do you mean by old order

816
00:31:47,600 --> 00:31:49,679
oh uh the order of the

817
00:31:49,679 --> 00:31:50,480
uh

818
00:31:50,480 --> 00:31:53,440
the abelian program being run on the

819
00:31:53,440 --> 00:31:54,240
input

820
00:31:54,240 --> 00:31:56,000
yeah yeah the uh

821
00:31:56,000 --> 00:31:58,000
the commutativity of the underlying

822
00:31:58,000 --> 00:32:00,960
group is necessary yeah okay

823
00:32:00,960 --> 00:32:02,240
cool thank you

824
00:32:02,240 --> 00:32:02,830
thank you

825
00:32:02,830 --> 00:32:05,939
[Music]

826
00:32:06,480 --> 00:32:08,240
all right so there's just i guess a

827
00:32:08,240 --> 00:32:10,880
small confusion with elder daniels so uh

828
00:32:10,880 --> 00:32:12,399
there was also a question by daniel

829
00:32:12,399 --> 00:32:14,000
escudero

830
00:32:14,000 --> 00:32:16,159
yeah thank you no it's all right so this

831
00:32:16,159 --> 00:32:19,440
is for forgiven regarding the first talk

832
00:32:19,440 --> 00:32:21,840
great talk by the way just wondering if

833
00:32:21,840 --> 00:32:24,159
you like does your second protocol i

834
00:32:24,159 --> 00:32:25,279
thought it was the second particle the

835
00:32:25,279 --> 00:32:27,600
second protocol implies that you can get

836
00:32:27,600 --> 00:32:29,600
one round communication

837
00:32:29,600 --> 00:32:32,240
with communication

838
00:32:32,240 --> 00:32:35,039
hold on one round multiplication with a

839
00:32:35,039 --> 00:32:36,799
communication that is linear in the

840
00:32:36,799 --> 00:32:40,240
number of parties is that is that true

841
00:32:40,840 --> 00:32:44,959
yes all right all right thank you

842
00:32:47,039 --> 00:32:49,760
um by the way if so for the for the

843
00:32:49,760 --> 00:32:51,279
protocol uh

844
00:32:51,279 --> 00:32:52,240
that

845
00:32:52,240 --> 00:32:54,880
for the t-wise protocol uh is the online

846
00:32:54,880 --> 00:32:57,120
phase basically does it remain unchanged

847
00:32:57,120 --> 00:32:58,559
is it the same as

848
00:32:58,559 --> 00:33:01,039
the dn protocol or

849
00:33:01,039 --> 00:33:03,279
yeah so the if protocol is basically the

850
00:33:03,279 --> 00:33:05,600
same so we just need to replace the

851
00:33:05,600 --> 00:33:10,480
double sharing used in the dm protocol

852
00:33:10,480 --> 00:33:13,200
okay thank you and so do you have this

853
00:33:13,200 --> 00:33:15,200
table up with the simulations uh could

854
00:33:15,200 --> 00:33:16,960
you i might have missed it could you

855
00:33:16,960 --> 00:33:20,480
just say what the columns were

856
00:33:21,760 --> 00:33:23,840
maybe you can pull it up real quick

857
00:33:23,840 --> 00:33:25,600
sorry rich one

858
00:33:25,600 --> 00:33:28,240
uh in your first talk

859
00:33:28,240 --> 00:33:30,880
you had a table with like simulation

860
00:33:30,880 --> 00:33:32,559
results

861
00:33:32,559 --> 00:33:37,480
yes maybe that means open my slides

862
00:33:44,640 --> 00:33:46,880
so

863
00:33:46,880 --> 00:33:48,240
this one right

864
00:33:48,240 --> 00:33:50,240
yeah right right so the three five seven

865
00:33:50,240 --> 00:33:53,279
that was that oh yes this is the number

866
00:33:53,279 --> 00:33:56,159
of parties so i basically test the

867
00:33:56,159 --> 00:33:58,960
several settings

868
00:33:58,960 --> 00:34:01,679
okay next

869
00:34:02,240 --> 00:34:03,039
um

870
00:34:03,039 --> 00:34:04,480
all right

871
00:34:04,480 --> 00:34:05,600
this

872
00:34:05,600 --> 00:34:07,919
oh yeah there is a question by

873
00:34:07,919 --> 00:34:09,440
anu ruth

874
00:34:09,440 --> 00:34:10,159
uh

875
00:34:10,159 --> 00:34:13,119
if you're still here

876
00:34:13,119 --> 00:34:15,679
uh i can ask it here okay

877
00:34:15,679 --> 00:34:18,079
yeah so um yeah my question is for

878
00:34:18,079 --> 00:34:20,639
yiphan on the halls marriage here in

879
00:34:20,639 --> 00:34:22,480
baseball so

880
00:34:22,480 --> 00:34:24,000
from what i understand the number of

881
00:34:24,000 --> 00:34:25,839
secrets is traded off against the

882
00:34:25,839 --> 00:34:27,520
corruption threshold price so the more

883
00:34:27,520 --> 00:34:29,119
secrets you pack the corruption

884
00:34:29,119 --> 00:34:30,960
threshold reduces

885
00:34:30,960 --> 00:34:32,480
yes um

886
00:34:32,480 --> 00:34:34,560
uh is there some middle ground that you

887
00:34:34,560 --> 00:34:36,320
can reach meaning like can you make use

888
00:34:36,320 --> 00:34:38,879
of the technique to keep uh

889
00:34:38,879 --> 00:34:40,320
keep the corruption threshold like

890
00:34:40,320 --> 00:34:43,040
sufficiently high and also keep the pac

891
00:34:43,040 --> 00:34:46,719
at the packing also sufficiently

892
00:34:46,719 --> 00:34:48,800
in terms of the exact commit in terms of

893
00:34:48,800 --> 00:34:51,839
the like exact cost like is there like a

894
00:34:51,839 --> 00:34:54,320
optimal cost that you can read

895
00:34:54,320 --> 00:34:55,599
where you maintain both that are

896
00:34:55,599 --> 00:34:58,480
sufficiently higher

897
00:34:58,640 --> 00:35:00,879
uh

898
00:35:00,960 --> 00:35:03,280
so i'm not sure i understand your

899
00:35:03,280 --> 00:35:05,520
question but basically

900
00:35:05,520 --> 00:35:07,920
uh the number of sleepers you can pack

901
00:35:07,920 --> 00:35:09,599
plus the number of prop

902
00:35:09,599 --> 00:35:10,960
crappy parties

903
00:35:10,960 --> 00:35:13,760
uh should be

904
00:35:13,760 --> 00:35:17,839
no more than half of all the parties

905
00:35:18,320 --> 00:35:19,440
okay

906
00:35:19,440 --> 00:35:22,079
okay so uh so maybe if you choose like

907
00:35:22,079 --> 00:35:24,160
maybe one-fourth for each then you would

908
00:35:24,160 --> 00:35:25,839
rate like uh

909
00:35:25,839 --> 00:35:28,320
optimal like threshold and optimal

910
00:35:28,320 --> 00:35:29,920
communication like gain and

911
00:35:29,920 --> 00:35:31,359
communication

912
00:35:31,359 --> 00:35:32,480
uh

913
00:35:32,480 --> 00:35:34,560
yes but i think you can

914
00:35:34,560 --> 00:35:36,960
actually choose internet dynamically

915
00:35:36,960 --> 00:35:38,880
depending on the scenario

916
00:35:38,880 --> 00:35:40,960
so even like you choose

917
00:35:40,960 --> 00:35:43,200
one third corruption square shows

918
00:35:43,200 --> 00:35:45,280
and you can pack

919
00:35:45,280 --> 00:35:47,440
one over six times and the secrets is

920
00:35:47,440 --> 00:35:50,079
still fine i think so it's like you can

921
00:35:50,079 --> 00:35:52,720
choose by yourself so it's not say which

922
00:35:52,720 --> 00:35:54,880
one is better

923
00:35:54,880 --> 00:35:57,119
ah okay

924
00:35:57,119 --> 00:35:59,839
thank you

925
00:36:02,560 --> 00:36:04,640
okay uh there are two questions for

926
00:36:04,640 --> 00:36:06,000
eduardo

927
00:36:06,000 --> 00:36:08,560
mike can you group first

928
00:36:08,560 --> 00:36:10,720
sure thanks uh nice talk eduardo i just

929
00:36:10,720 --> 00:36:12,160
had a question about beaver triples

930
00:36:12,160 --> 00:36:14,480
which you mentioned very briefly it

931
00:36:14,480 --> 00:36:16,160
sounded like

932
00:36:16,160 --> 00:36:17,680
you have to do something a little bit

933
00:36:17,680 --> 00:36:19,839
special for a beaver triple is there

934
00:36:19,839 --> 00:36:21,040
something you can tell us about that

935
00:36:21,040 --> 00:36:23,280
quickly

936
00:36:23,280 --> 00:36:25,760
can you see this light yes

937
00:36:25,760 --> 00:36:27,760
okay so this is a bit like uh this is

938
00:36:27,760 --> 00:36:30,400
from the full version of the talk uh the

939
00:36:30,400 --> 00:36:33,040
problem uh with beaver triples is that

940
00:36:33,040 --> 00:36:34,640
you need to have this bimodular

941
00:36:34,640 --> 00:36:36,240
structure if you look at the fail number

942
00:36:36,240 --> 00:36:37,440
two over there

943
00:36:37,440 --> 00:36:40,640
um so in order to come around this

944
00:36:40,640 --> 00:36:43,119
problem uh rather than having a triple

945
00:36:43,119 --> 00:36:45,280
you can have like a sex duplex

946
00:36:45,280 --> 00:36:47,200
uh where you

947
00:36:47,200 --> 00:36:49,440
make like a two

948
00:36:49,440 --> 00:36:50,880
you basically add this intermediate to

949
00:36:50,880 --> 00:36:52,720
step number two over there

950
00:36:52,720 --> 00:36:54,720
in order to uh

951
00:36:54,720 --> 00:36:57,680
to get all the schemes to be in the same

952
00:36:57,680 --> 00:36:59,040
kind of module

953
00:36:59,040 --> 00:36:59,839
and

954
00:36:59,839 --> 00:37:02,320
and get your um

955
00:37:02,320 --> 00:37:03,680
and get the

956
00:37:03,680 --> 00:37:06,160
the product that you wanted to compute

957
00:37:06,160 --> 00:37:07,680
this is if you want to do like a

958
00:37:07,680 --> 00:37:11,359
function uh independent online phase but

959
00:37:11,359 --> 00:37:13,200
in the paper we also show how to do like

960
00:37:13,200 --> 00:37:14,960
a function dependent

961
00:37:14,960 --> 00:37:17,040
online phase that has like the usual

962
00:37:17,040 --> 00:37:19,839
round complexity

963
00:37:20,079 --> 00:37:23,400
cool thanks

964
00:37:25,680 --> 00:37:28,800
okay uh one more question uh

965
00:37:28,800 --> 00:37:31,040
daniel escudero

966
00:37:31,040 --> 00:37:34,560
oh sorry another bearing very

967
00:37:34,560 --> 00:37:37,560
first

968
00:37:40,400 --> 00:37:42,960
yeah uh i am um so in the case of

969
00:37:42,960 --> 00:37:44,960
non-communicative rings as i say you're

970
00:37:44,960 --> 00:37:47,040
you're presenting two options either you

971
00:37:47,040 --> 00:37:47,920
have

972
00:37:47,920 --> 00:37:49,040
it in

973
00:37:49,040 --> 00:37:51,599
the exceptional set in the center or you

974
00:37:51,599 --> 00:37:53,440
have them that they're only commutative

975
00:37:53,440 --> 00:37:55,920
with it with themselves is it possible

976
00:37:55,920 --> 00:37:58,400
that they are not commutative with

977
00:37:58,400 --> 00:38:00,800
themselves and would that deny any form

978
00:38:00,800 --> 00:38:03,359
of shamir style secret sharing

979
00:38:03,359 --> 00:38:05,440
uh yeah so that's that's not possible

980
00:38:05,440 --> 00:38:08,000
and the reason uh for that

981
00:38:08,000 --> 00:38:10,800
is that uh all these issues with um

982
00:38:10,800 --> 00:38:12,560
polynomial evaluation not being a ring

983
00:38:12,560 --> 00:38:13,839
among officers

984
00:38:13,839 --> 00:38:16,640
uh so in order to build up to error

985
00:38:16,640 --> 00:38:18,560
detection and error correction

986
00:38:18,560 --> 00:38:20,560
uh you need to prove things about like

987
00:38:20,560 --> 00:38:22,079
the number of roots of a polynomial and

988
00:38:22,079 --> 00:38:23,200
things like that

989
00:38:23,200 --> 00:38:24,560
so when you're bounding the number of

990
00:38:24,560 --> 00:38:27,119
roots of of a polynomial the usual way

991
00:38:27,119 --> 00:38:28,320
you would do

992
00:38:28,320 --> 00:38:29,520
about proving this is that you do a

993
00:38:29,520 --> 00:38:31,040
billion divisions successively by

994
00:38:31,040 --> 00:38:34,560
everyone uh but now in order to say like

995
00:38:34,560 --> 00:38:36,560
oh okay if it's

996
00:38:36,560 --> 00:38:37,760
you know when you have two of these

997
00:38:37,760 --> 00:38:40,160
factors and you want to say okay if it's

998
00:38:40,160 --> 00:38:41,520
you need um

999
00:38:41,520 --> 00:38:43,359
i don't want to be very long but you

1000
00:38:43,359 --> 00:38:44,640
need uh

1001
00:38:44,640 --> 00:38:47,839
the product uh the group of morph is in

1002
00:38:47,839 --> 00:38:49,440
for the product so

1003
00:38:49,440 --> 00:38:51,680
otherwise you can't keep like uh shaving

1004
00:38:51,680 --> 00:38:53,200
roots one after one and reducing the

1005
00:38:53,200 --> 00:38:55,280
degree of the polynomial so this is why

1006
00:38:55,280 --> 00:38:57,520
you need these uh these elements to

1007
00:38:57,520 --> 00:38:59,599
compete with each other

1008
00:38:59,599 --> 00:39:02,160
yeah okay farewell

1009
00:39:02,160 --> 00:39:04,240
um and then yeah i

1010
00:39:04,240 --> 00:39:06,079
added the question

1011
00:39:06,079 --> 00:39:08,000
is that do you have any intuition if it

1012
00:39:08,000 --> 00:39:10,800
generalizes to um replicated or even

1013
00:39:10,800 --> 00:39:13,520
general linear secret sharing schemes

1014
00:39:13,520 --> 00:39:15,359
so actually for replicated secret chain

1015
00:39:15,359 --> 00:39:17,359
schemes i haven't seen anyone claim the

1016
00:39:17,359 --> 00:39:19,520
result in the literature but things just

1017
00:39:19,520 --> 00:39:21,040
work fine

1018
00:39:21,040 --> 00:39:22,960
um the

1019
00:39:22,960 --> 00:39:24,000
um

1020
00:39:24,000 --> 00:39:25,520
the reason why

1021
00:39:25,520 --> 00:39:26,880
you know we say we are like the first

1022
00:39:26,880 --> 00:39:28,880
ones that do like efficient npc over

1023
00:39:28,880 --> 00:39:30,720
like a non-commutative ring

1024
00:39:30,720 --> 00:39:34,079
uh is that uh replicated sharing

1025
00:39:34,079 --> 00:39:37,200
uh if the number of corrupted parties uh

1026
00:39:37,200 --> 00:39:40,720
you know it's it's uh it scales uh not

1027
00:39:40,720 --> 00:39:41,760
polynomially with the number of

1028
00:39:41,760 --> 00:39:44,560
corruptions right

1029
00:39:45,520 --> 00:39:48,240
yes correct yeah yeah

1030
00:39:48,240 --> 00:39:50,879
okay thank you

1031
00:39:53,280 --> 00:39:57,839
okay uh any last minute questions

1032
00:40:02,560 --> 00:40:04,960
all right we have reached the end of our

1033
00:40:04,960 --> 00:40:07,119
slot uh thank you very much to all the

1034
00:40:07,119 --> 00:40:10,400
speakers of the

