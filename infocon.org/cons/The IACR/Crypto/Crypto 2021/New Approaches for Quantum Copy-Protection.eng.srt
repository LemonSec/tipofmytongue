1
00:00:06,399 --> 00:00:07,839
hi everyone

2
00:00:07,839 --> 00:00:09,599
i'm going to talk about new approaches

3
00:00:09,599 --> 00:00:11,599
for quantum copy protection

4
00:00:11,599 --> 00:00:13,840
this is joint work with scott harrison

5
00:00:13,840 --> 00:00:15,839
chi pang miu mark gendry and richard

6
00:00:15,839 --> 00:00:18,160
zhang

7
00:00:23,119 --> 00:00:25,279
as we know quantum no cloning principle

8
00:00:25,279 --> 00:00:27,519
does not allow us to copy an arbitrary

9
00:00:27,519 --> 00:00:30,560
quantum state

10
00:00:30,560 --> 00:00:32,640
and this property leads to

11
00:00:32,640 --> 00:00:34,160
some applications in quantum

12
00:00:34,160 --> 00:00:35,600
cryptography

13
00:00:35,600 --> 00:00:39,200
one famous example is quantum money

14
00:00:39,200 --> 00:00:41,280
a quantum money state encodes a money

15
00:00:41,280 --> 00:00:44,000
value and a serial number a valid money

16
00:00:44,000 --> 00:00:46,399
state can get verified by the bank but

17
00:00:46,399 --> 00:00:48,559
the user with one copy of money state

18
00:00:48,559 --> 00:00:51,039
cannot produce two copies that both pass

19
00:00:51,039 --> 00:00:53,920
verifications

20
00:00:56,160 --> 00:00:58,239
and we wonder can we leverage such a

21
00:00:58,239 --> 00:01:01,039
scheme to encode more complex clonable

22
00:01:01,039 --> 00:01:02,640
classical information into unknown

23
00:01:02,640 --> 00:01:04,959
double quantum information

24
00:01:04,959 --> 00:01:08,400
errors in 2009 put forward quantum copy

25
00:01:08,400 --> 00:01:09,840
protection

26
00:01:09,840 --> 00:01:12,159
a copy protection algorithm turns a

27
00:01:12,159 --> 00:01:14,400
classical function f into a quantum

28
00:01:14,400 --> 00:01:15,600
state

29
00:01:15,600 --> 00:01:17,520
this state can be used to run on any

30
00:01:17,520 --> 00:01:18,960
input such that you get the same

31
00:01:18,960 --> 00:01:22,320
evaluation as the original function

32
00:01:22,320 --> 00:01:24,000
but the polynomial time bounded

33
00:01:24,000 --> 00:01:26,720
adversary can alternately state into two

34
00:01:26,720 --> 00:01:29,360
states that both compute the function

35
00:01:29,360 --> 00:01:32,240
f correctly

36
00:01:33,759 --> 00:01:36,000
errors also gave a first construction

37
00:01:36,000 --> 00:01:38,640
for copy protection for any unlearnable

38
00:01:38,640 --> 00:01:42,479
function using a quantum oracle

39
00:01:43,600 --> 00:01:46,320
so what's a learnable function

40
00:01:46,320 --> 00:01:48,560
an unlearnable family function is a

41
00:01:48,560 --> 00:01:50,399
family functions that cannot be learned

42
00:01:50,399 --> 00:01:53,119
to its input of behavior by a polynomial

43
00:01:53,119 --> 00:01:54,720
time adversary

44
00:01:54,720 --> 00:01:57,040
and here specifically we mean quantum

45
00:01:57,040 --> 00:01:59,680
party time adversary

46
00:01:59,680 --> 00:02:01,439
it's clear that if a function is

47
00:02:01,439 --> 00:02:03,840
learnable it can never be copy protected

48
00:02:03,840 --> 00:02:06,000
because the adversary can just recover

49
00:02:06,000 --> 00:02:07,840
the functionality from the program by

50
00:02:07,840 --> 00:02:10,239
learning it no matter how you do copy

51
00:02:10,239 --> 00:02:13,280
protection to the program

52
00:02:13,280 --> 00:02:15,680
thus we only care about copy protecting

53
00:02:15,680 --> 00:02:18,800
on learnable functions

54
00:02:20,879 --> 00:02:23,280
one drawback of errors scheme is that

55
00:02:23,280 --> 00:02:26,400
quantum oracle is a strong assumption

56
00:02:26,400 --> 00:02:27,840
quantum oracles implement

57
00:02:27,840 --> 00:02:29,840
functionalities of quantum circuits

58
00:02:29,840 --> 00:02:31,920
while classical oracles implement

59
00:02:31,920 --> 00:02:34,958
classical circuits

60
00:02:35,360 --> 00:02:36,879
both kinds of oracles can be

61
00:02:36,879 --> 00:02:38,480
heuristically implemented by

62
00:02:38,480 --> 00:02:40,480
cryptography assumption

63
00:02:40,480 --> 00:02:43,120
called virtual blackbox subfascication

64
00:02:43,120 --> 00:02:45,519
which scrambles a program and make it no

65
00:02:45,519 --> 00:02:48,000
different from accessing an oracle to

66
00:02:48,000 --> 00:02:48,840
the

67
00:02:48,840 --> 00:02:51,760
adversary both of these assumptions are

68
00:02:51,760 --> 00:02:54,000
strong but obfuscation for quantum

69
00:02:54,000 --> 00:02:56,720
circuits still yet a stronger assumption

70
00:02:56,720 --> 00:02:58,720
than the classical one and of course

71
00:02:58,720 --> 00:03:00,720
quantum oracles in the eyes of the

72
00:03:00,720 --> 00:03:03,200
complexity theorists is in general much

73
00:03:03,200 --> 00:03:04,720
stronger too

74
00:03:04,720 --> 00:03:07,519
therefore everything in 2009 asked if we

75
00:03:07,519 --> 00:03:10,480
can build quantum copy protection using

76
00:03:10,480 --> 00:03:14,359
only a classic oracle

77
00:03:18,720 --> 00:03:21,200
and we give a positive

78
00:03:21,200 --> 00:03:24,560
answer to this question in our results

79
00:03:24,560 --> 00:03:27,040
and our main results can be divided into

80
00:03:27,040 --> 00:03:28,799
three parts we will talk about this

81
00:03:28,799 --> 00:03:30,560
construction relative to classical

82
00:03:30,560 --> 00:03:32,560
oracle in the second part and before

83
00:03:32,560 --> 00:03:34,239
that we briefly go through some

84
00:03:34,239 --> 00:03:38,080
improvement upon the definitions

85
00:03:38,159 --> 00:03:40,480
firstly we take a look at the basic

86
00:03:40,480 --> 00:03:43,120
algorithms of a quantum copy protection

87
00:03:43,120 --> 00:03:44,560
scheme

88
00:03:44,560 --> 00:03:46,959
the setup algorithm generates a secret

89
00:03:46,959 --> 00:03:48,319
key

90
00:03:48,319 --> 00:03:50,159
the january algorithm takes in the

91
00:03:50,159 --> 00:03:54,319
function f we want to copy protect

92
00:03:56,000 --> 00:03:58,640
and the secret key and outputs a quantum

93
00:03:58,640 --> 00:04:00,640
program which consists of a unitary

94
00:04:00,640 --> 00:04:04,400
description as well as a quantum state

95
00:04:04,400 --> 00:04:06,879
from now on whenever we describe a

96
00:04:06,879 --> 00:04:09,040
quantum program we would use these two

97
00:04:09,040 --> 00:04:11,599
components a unitary and state to

98
00:04:11,599 --> 00:04:13,360
represent it

99
00:04:13,360 --> 00:04:16,560
here notice that we also separate setup

100
00:04:16,560 --> 00:04:18,399
at generate procedures because we want

101
00:04:18,399 --> 00:04:20,560
to specify that secret key generation is

102
00:04:20,560 --> 00:04:23,360
usually independent of the function

103
00:04:23,360 --> 00:04:25,840
the eval algorithm takes in the quantum

104
00:04:25,840 --> 00:04:28,320
program and the input it outputs the

105
00:04:28,320 --> 00:04:29,840
measurement result of the output

106
00:04:29,840 --> 00:04:31,919
register and the remaining state after

107
00:04:31,919 --> 00:04:34,639
evaluation

108
00:04:40,560 --> 00:04:42,639
next we give an attempt security

109
00:04:42,639 --> 00:04:46,080
definition and explains issues

110
00:04:46,080 --> 00:04:48,960
first we have correctness requirement

111
00:04:48,960 --> 00:04:52,000
of course given an honestly generated

112
00:04:52,000 --> 00:04:54,479
program we want evaluation to be correct

113
00:04:54,479 --> 00:04:57,840
with probability almost 1 for all inputs

114
00:04:57,840 --> 00:05:00,400
and next we define anti-piracy through a

115
00:05:00,400 --> 00:05:02,400
security game

116
00:05:02,400 --> 00:05:04,560
a quantum polynomial time adversary is

117
00:05:04,560 --> 00:05:07,120
given one copy of the authentic program

118
00:05:07,120 --> 00:05:09,199
then the adversary tries to produce two

119
00:05:09,199 --> 00:05:10,560
parallel programs

120
00:05:10,560 --> 00:05:13,199
and gives to the challenger it wins if

121
00:05:13,199 --> 00:05:14,960
both of these programs evaluate the

122
00:05:14,960 --> 00:05:17,120
function correctly with large enough

123
00:05:17,120 --> 00:05:19,759
probability over the input distribution

124
00:05:19,759 --> 00:05:22,479
correlated with the function

125
00:05:22,479 --> 00:05:25,360
we want any qpt adversary to win with

126
00:05:25,360 --> 00:05:29,039
only negligible probability

127
00:05:29,120 --> 00:05:31,039
also note that when evaluating the

128
00:05:31,039 --> 00:05:33,280
pirate programs we would completely

129
00:05:33,280 --> 00:05:35,120
ignore any instructions given in the

130
00:05:35,120 --> 00:05:37,360
authentic program but just use the

131
00:05:37,360 --> 00:05:39,280
universal circuit that wrong on the

132
00:05:39,280 --> 00:05:43,039
pyrus program unitary and state

133
00:05:43,600 --> 00:05:45,280
we want to emphasize this property

134
00:05:45,280 --> 00:05:47,919
because later on we would compare it

135
00:05:47,919 --> 00:05:52,520
with some other weaker circuited notions

136
00:05:52,720 --> 00:05:54,320
so what are some issues with this

137
00:05:54,320 --> 00:05:55,919
security game

138
00:05:55,919 --> 00:05:57,600
in the classical setting we would

139
00:05:57,600 --> 00:05:59,440
typically have the challenger estimate

140
00:05:59,440 --> 00:06:01,680
the fraction of crack evaluations by

141
00:06:01,680 --> 00:06:03,840
picking a large enough number of inputs

142
00:06:03,840 --> 00:06:05,840
at random or from an appropriate

143
00:06:05,840 --> 00:06:07,120
distribution

144
00:06:07,120 --> 00:06:09,039
running the copy protected program on

145
00:06:09,039 --> 00:06:11,520
these inputs

146
00:06:11,520 --> 00:06:13,199
and computing the fraction of correct

147
00:06:13,199 --> 00:06:14,720
evaluations

148
00:06:14,720 --> 00:06:16,960
however in the quantum setting when the

149
00:06:16,960 --> 00:06:18,960
challenger only gets a single copy of

150
00:06:18,960 --> 00:06:21,600
the program each evaluation may alter

151
00:06:21,600 --> 00:06:23,759
the pyro program irreversibly because we

152
00:06:23,759 --> 00:06:25,520
cannot assume we can do gentle

153
00:06:25,520 --> 00:06:27,440
measurement to the prior programs like

154
00:06:27,440 --> 00:06:30,479
we do to the honestly generated programs

155
00:06:30,479 --> 00:06:32,319
estimating the fraction of inputs on

156
00:06:32,319 --> 00:06:35,120
these parallel programs

157
00:06:35,120 --> 00:06:37,440
that compute correctly is not generally

158
00:06:37,440 --> 00:06:39,919
possible

159
00:06:40,319 --> 00:06:43,440
the next problem is how we define

160
00:06:43,440 --> 00:06:46,160
a success probability of pyro programs

161
00:06:46,160 --> 00:06:48,720
on the physical level so imagine an

162
00:06:48,720 --> 00:06:51,520
adversary who sends such

163
00:06:51,520 --> 00:06:54,639
the following state to the challenger

164
00:06:54,639 --> 00:06:56,960
here the good state is a program that

165
00:06:56,960 --> 00:06:59,759
evaluates perfectly every input and the

166
00:06:59,759 --> 00:07:02,560
dummy state is a useless program

167
00:07:02,560 --> 00:07:04,560
using this state evaluation is

168
00:07:04,560 --> 00:07:06,880
successful on any input with probability

169
00:07:06,880 --> 00:07:09,199
one half

170
00:07:09,199 --> 00:07:11,680
but it is impossible to have a procedure

171
00:07:11,680 --> 00:07:13,680
that estimates the average success

172
00:07:13,680 --> 00:07:15,680
probability of evaluation to very high

173
00:07:15,680 --> 00:07:16,880
precision

174
00:07:16,880 --> 00:07:19,440
because this procedure would imply

175
00:07:19,440 --> 00:07:21,440
a procedure that helped us distinguish

176
00:07:21,440 --> 00:07:23,680
perfectly the superposition of glute and

177
00:07:23,680 --> 00:07:26,319
dummy away from the good state or from

178
00:07:26,319 --> 00:07:28,080
the dummy state

179
00:07:28,080 --> 00:07:30,000
so we don't know how how we can label

180
00:07:30,000 --> 00:07:32,560
this program successful or not this is

181
00:07:32,560 --> 00:07:34,160
impossible in general since the two

182
00:07:34,160 --> 00:07:36,160
states are unorthogonal and have large

183
00:07:36,160 --> 00:07:38,319
overlap

184
00:07:38,319 --> 00:07:41,120
and finally we'll give one more example

185
00:07:41,120 --> 00:07:43,039
so consider the following program

186
00:07:43,039 --> 00:07:45,440
entangled in such a way that with

187
00:07:45,440 --> 00:07:47,680
epsilon probability we get both programs

188
00:07:47,680 --> 00:07:50,639
as good with one minus epsilon

189
00:07:50,639 --> 00:07:52,479
probability we get both programs as

190
00:07:52,479 --> 00:07:53,759
dummy

191
00:07:53,759 --> 00:07:55,759
since the probability that we measure

192
00:07:55,759 --> 00:07:57,360
and get good good

193
00:07:57,360 --> 00:07:58,879
is noticeable

194
00:07:58,879 --> 00:08:00,319
this program should probably be

195
00:08:00,319 --> 00:08:02,639
considered as a successful attack in

196
00:08:02,639 --> 00:08:04,080
some settings

197
00:08:04,080 --> 00:08:06,879
which were not considered in the past

198
00:08:06,879 --> 00:08:09,039
definitions

199
00:08:09,039 --> 00:08:11,440
so how do we test a quantum program

200
00:08:11,440 --> 00:08:13,599
properly in the security game

201
00:08:13,599 --> 00:08:15,680
on a high level we define a new

202
00:08:15,680 --> 00:08:17,680
procedure that consists of applying an

203
00:08:17,680 --> 00:08:20,080
appropriate projected measurement

204
00:08:20,080 --> 00:08:22,800
which measures the success probability

205
00:08:22,800 --> 00:08:24,800
of the tested state

206
00:08:24,800 --> 00:08:28,160
under the testing input distribution

207
00:08:28,160 --> 00:08:30,560
after we apply this procedure

208
00:08:30,560 --> 00:08:32,958
leftover program is still a successful

209
00:08:32,958 --> 00:08:36,719
problem program with probability p

210
00:08:36,719 --> 00:08:38,799
even though this leftover program is far

211
00:08:38,799 --> 00:08:41,200
from the original program state but the

212
00:08:41,200 --> 00:08:44,080
success probability is preserved

213
00:08:44,080 --> 00:08:45,920
such a measurement will not extract the

214
00:08:45,920 --> 00:08:48,399
exact success probability of the program

215
00:08:48,399 --> 00:08:50,720
of course as we mentioned before

216
00:08:50,720 --> 00:08:54,000
if we want to be efficient

217
00:08:54,000 --> 00:08:56,640
but we can approximate it using some

218
00:08:56,640 --> 00:09:00,000
techniques from married virtuous 2005

219
00:09:00,000 --> 00:09:03,360
and january 2020

220
00:09:04,320 --> 00:09:06,560
and finally we can see how we decide if

221
00:09:06,560 --> 00:09:10,560
a quantum adversary wins the apology

222
00:09:11,519 --> 00:09:13,440
at the beginning the challenger sets a

223
00:09:13,440 --> 00:09:16,399
threshold gamma

224
00:09:17,040 --> 00:09:19,040
then apply the measurement procedure to

225
00:09:19,040 --> 00:09:21,519
each of the pyro programs p1p2

226
00:09:21,519 --> 00:09:23,120
respectively

227
00:09:23,120 --> 00:09:25,920
we accept a pyro program if this success

228
00:09:25,920 --> 00:09:28,240
probability is greater than gamma so the

229
00:09:28,240 --> 00:09:29,839
adversary wins

230
00:09:29,839 --> 00:09:32,160
if both our probabilities are greater

231
00:09:32,160 --> 00:09:33,519
than gamma

232
00:09:33,519 --> 00:09:35,760
and this gamma threshold chosen

233
00:09:35,760 --> 00:09:37,519
depending on the family functions we try

234
00:09:37,519 --> 00:09:39,839
to copy protect and other factors

235
00:09:39,839 --> 00:09:42,000
related to applications or situations

236
00:09:42,000 --> 00:09:45,519
when we use copy protection

237
00:09:45,600 --> 00:09:47,920
so in summary the circuit definition has

238
00:09:47,920 --> 00:09:50,480
the following properties

239
00:09:50,480 --> 00:09:52,480
so it's a physically meaningful testing

240
00:09:52,480 --> 00:09:54,720
procedure with efficient approximate

241
00:09:54,720 --> 00:09:57,120
implementations it implies the obtained

242
00:09:57,120 --> 00:09:59,040
definition we mentioned

243
00:09:59,040 --> 00:10:01,440
and it's a useful tool it actually helps

244
00:10:01,440 --> 00:10:03,519
the anti-piracy security proofs go

245
00:10:03,519 --> 00:10:06,160
through in this paper and later work

246
00:10:06,160 --> 00:10:10,240
so it's a reduction friendly definition

247
00:10:11,120 --> 00:10:12,240
the next

248
00:10:12,240 --> 00:10:14,000
comes to our result

249
00:10:14,000 --> 00:10:15,360
for construction

250
00:10:15,360 --> 00:10:17,360
we give a construction to copy protect

251
00:10:17,360 --> 00:10:19,200
any unlearnable functions using a

252
00:10:19,200 --> 00:10:22,079
classical oracle

253
00:10:23,040 --> 00:10:25,680
so our overall high-level idea is

254
00:10:25,680 --> 00:10:26,959
inspired by

255
00:10:26,959 --> 00:10:28,880
hidden subspace from errors and

256
00:10:28,880 --> 00:10:31,519
cristiano's public key quantum monies

257
00:10:31,519 --> 00:10:33,200
2012

258
00:10:33,200 --> 00:10:36,160
a hidden subspace a is a secret subspace

259
00:10:36,160 --> 00:10:38,560
randomly chosen by the challenger it has

260
00:10:38,560 --> 00:10:40,959
exponentially many elements but still

261
00:10:40,959 --> 00:10:42,959
exponentially small compared to the full

262
00:10:42,959 --> 00:10:45,279
space which is for example an

263
00:10:45,279 --> 00:10:47,760
n-dimensional vector space over the

264
00:10:47,760 --> 00:10:50,880
finite field of two

265
00:10:50,959 --> 00:10:53,360
a subspace state cat a is an equal

266
00:10:53,360 --> 00:10:55,680
superposition of elements in a

267
00:10:55,680 --> 00:10:57,680
and subspace states have have the

268
00:10:57,680 --> 00:11:01,079
following properties

269
00:11:01,120 --> 00:11:03,680
if we do qft to the state

270
00:11:03,680 --> 00:11:05,680
we get its new subspace state with

271
00:11:05,680 --> 00:11:08,800
vectors in a perp

272
00:11:09,040 --> 00:11:10,240
moreover

273
00:11:10,240 --> 00:11:12,560
we should consider the following problem

274
00:11:12,560 --> 00:11:15,040
when we give a quantum adversary

275
00:11:15,040 --> 00:11:17,760
one copy of state a and access to

276
00:11:17,760 --> 00:11:19,839
membership oracles for a

277
00:11:19,839 --> 00:11:22,560
and a perp which check if an input

278
00:11:22,560 --> 00:11:25,040
vector is in a and if

279
00:11:25,040 --> 00:11:27,920
input vectors in apert respectively

280
00:11:27,920 --> 00:11:30,240
outputs 1 if only if the

281
00:11:30,240 --> 00:11:33,680
the input vector is in the subspace

282
00:11:33,680 --> 00:11:36,880
such a quantum adversary bounded

283
00:11:36,880 --> 00:11:40,079
polynomial in in terms of queries cannot

284
00:11:40,079 --> 00:11:43,680
produce two vectors one in a and one a

285
00:11:43,680 --> 00:11:47,120
perp in a perp and both are not zero

286
00:11:47,120 --> 00:11:49,120
and our security will rely on this

287
00:11:49,120 --> 00:11:53,000
probably hard problem

288
00:11:57,200 --> 00:12:00,000
our copy protection construction for f

289
00:12:00,000 --> 00:12:02,560
consists of one copy of the subspace

290
00:12:02,560 --> 00:12:03,600
state a

291
00:12:03,600 --> 00:12:05,200
and two oracles

292
00:12:05,200 --> 00:12:07,680
so each oracle checks if a part of the

293
00:12:07,680 --> 00:12:11,120
input is in a or in a perf respectively

294
00:12:11,120 --> 00:12:13,040
and then gives the secret share of the

295
00:12:13,040 --> 00:12:15,920
function f evaluated on x

296
00:12:15,920 --> 00:12:18,639
that is the first oracle gives a random

297
00:12:18,639 --> 00:12:20,959
function valuation x and the second

298
00:12:20,959 --> 00:12:24,079
oracle gives the random variation xor

299
00:12:24,079 --> 00:12:26,880
with fx

300
00:12:29,760 --> 00:12:32,079
to evaluate the program the user first

301
00:12:32,079 --> 00:12:35,360
inputs the subspace state into oracle 1

302
00:12:35,360 --> 00:12:36,839
and measures the

303
00:12:36,839 --> 00:12:39,680
output and by the gender measure

304
00:12:39,680 --> 00:12:41,760
measurement level the remaining state is

305
00:12:41,760 --> 00:12:44,079
still good for use when the user applies

306
00:12:44,079 --> 00:12:46,240
qft to the state and obtains the dual

307
00:12:46,240 --> 00:12:48,560
subspace state inputs into the second

308
00:12:48,560 --> 00:12:49,519
program

309
00:12:49,519 --> 00:12:52,399
and measures the output register

310
00:12:52,399 --> 00:12:55,519
then we can xor the two output values we

311
00:12:55,519 --> 00:13:00,079
obtained together and would give us fx

312
00:13:03,200 --> 00:13:05,360
i will explain the security proof on a

313
00:13:05,360 --> 00:13:07,120
high level

314
00:13:07,120 --> 00:13:09,760
so suppose an adversary is able to

315
00:13:09,760 --> 00:13:11,839
produce two programs that both

316
00:13:11,839 --> 00:13:13,839
successfully pass the test

317
00:13:13,839 --> 00:13:16,399
then we can do reduction to break either

318
00:13:16,399 --> 00:13:19,040
one of the following of either one of

319
00:13:19,040 --> 00:13:21,600
our underlying heart problems

320
00:13:21,600 --> 00:13:23,680
so in the first case we can extract the

321
00:13:23,680 --> 00:13:25,360
vector v

322
00:13:25,360 --> 00:13:26,720
in a

323
00:13:26,720 --> 00:13:28,560
from the first pyramidal program and

324
00:13:28,560 --> 00:13:31,040
extract the vector u in a perp from the

325
00:13:31,040 --> 00:13:33,519
second pyro program

326
00:13:33,519 --> 00:13:36,000
and if the second case doesn't happen we

327
00:13:36,000 --> 00:13:38,639
show that we're definitely in the

328
00:13:38,639 --> 00:13:40,880
in the second case

329
00:13:40,880 --> 00:13:42,720
where we can use one of the pyro

330
00:13:42,720 --> 00:13:45,040
programs to break the unlearnability of

331
00:13:45,040 --> 00:13:46,480
f

332
00:13:46,480 --> 00:13:47,839
it's hard

333
00:13:47,839 --> 00:13:51,120
to argue actually when we uh

334
00:13:51,120 --> 00:13:52,959
when the adversary makes the programs

335
00:13:52,959 --> 00:13:55,839
entangled to argue that we can extract a

336
00:13:55,839 --> 00:13:58,800
vector from each of the prior programs

337
00:13:58,800 --> 00:14:01,040
however in our paper we can actually

338
00:14:01,040 --> 00:14:03,440
rule out this possible this possible

339
00:14:03,440 --> 00:14:04,880
attack by a

340
00:14:04,880 --> 00:14:08,480
careful analysis in the reduction

341
00:14:08,480 --> 00:14:12,399
please refer to the details in the paper

342
00:14:12,399 --> 00:14:14,240
so now we already have the oracle

343
00:14:14,240 --> 00:14:16,320
construction we probably wonder if we

344
00:14:16,320 --> 00:14:18,079
can move to a construction using more

345
00:14:18,079 --> 00:14:21,760
practical cryptography assumptions

346
00:14:22,480 --> 00:14:25,519
unfortunately we do have a barrier

347
00:14:25,519 --> 00:14:27,120
in the plane model

348
00:14:27,120 --> 00:14:30,240
when we want to remove the oracles

349
00:14:30,240 --> 00:14:32,320
a concurrent work shows that using a

350
00:14:32,320 --> 00:14:34,079
post-quantum cryptography assumption

351
00:14:34,079 --> 00:14:35,839
called learning with errors

352
00:14:35,839 --> 00:14:38,079
and the quantum fully homomorphic

353
00:14:38,079 --> 00:14:40,079
encryption scheme

354
00:14:40,079 --> 00:14:42,079
we can build a circuit

355
00:14:42,079 --> 00:14:44,720
that is unlearnable but can never be

356
00:14:44,720 --> 00:14:47,519
copy protected

357
00:14:47,519 --> 00:14:48,800
here

358
00:14:48,800 --> 00:14:51,120
learning with errors is believably post

359
00:14:51,120 --> 00:14:52,480
quantum and

360
00:14:52,480 --> 00:14:54,880
quantum fhe can actually

361
00:14:54,880 --> 00:14:57,040
be built on lwe but

362
00:14:57,040 --> 00:14:59,040
a full scale quantum energy cannot be

363
00:14:59,040 --> 00:15:01,920
built on lwe alone we need some circular

364
00:15:01,920 --> 00:15:05,599
security assumptions

365
00:15:06,959 --> 00:15:09,519
so in the face of this barrier the next

366
00:15:09,519 --> 00:15:11,360
achievable directions are

367
00:15:11,360 --> 00:15:13,760
first consider weakening the security

368
00:15:13,760 --> 00:15:15,440
notions

369
00:15:15,440 --> 00:15:17,199
are there weaker but meaningful secure

370
00:15:17,199 --> 00:15:18,959
notions for quantum copy protection that

371
00:15:18,959 --> 00:15:20,800
we can do better

372
00:15:20,800 --> 00:15:23,040
and the second direction is of course we

373
00:15:23,040 --> 00:15:25,199
don't relax the security requirement but

374
00:15:25,199 --> 00:15:28,000
we consider copy protecting specific and

375
00:15:28,000 --> 00:15:30,079
smaller classes of functions

376
00:15:30,079 --> 00:15:32,320
for example we can

377
00:15:32,320 --> 00:15:34,320
there are some follow-up works

378
00:15:34,320 --> 00:15:36,720
which gives construction for copy

379
00:15:36,720 --> 00:15:39,279
protecting point functions and extending

380
00:15:39,279 --> 00:15:41,120
to compute and compare functions in the

381
00:15:41,120 --> 00:15:42,959
random oracle model

382
00:15:42,959 --> 00:15:48,000
and copy protecting prfs and decryption

383
00:15:52,240 --> 00:15:54,399
but we will focus on the first direction

384
00:15:54,399 --> 00:15:55,920
here

385
00:15:55,920 --> 00:15:59,839
in terms of the results in our paper

386
00:16:00,160 --> 00:16:02,240
before talking about our result

387
00:16:02,240 --> 00:16:04,639
uh we want to mention that in the same

388
00:16:04,639 --> 00:16:05,680
paper

389
00:16:05,680 --> 00:16:07,839
that gives the impossibility result the

390
00:16:07,839 --> 00:16:10,079
authors also give awakened security

391
00:16:10,079 --> 00:16:12,560
notion for copy protection this notion

392
00:16:12,560 --> 00:16:16,160
is called secure software releasing

393
00:16:16,160 --> 00:16:18,480
in a high level

394
00:16:18,480 --> 00:16:20,560
the security notion can be described as

395
00:16:20,560 --> 00:16:23,120
malicious pirate on his freeloader

396
00:16:23,120 --> 00:16:24,800
the pirate can do anything to make

397
00:16:24,800 --> 00:16:26,880
pyrocopies of the program

398
00:16:26,880 --> 00:16:29,199
but any freeloader the person who gets a

399
00:16:29,199 --> 00:16:31,199
private copy and wants to use it is

400
00:16:31,199 --> 00:16:32,560
honest

401
00:16:32,560 --> 00:16:34,320
they will follow the instructions of how

402
00:16:34,320 --> 00:16:36,160
to run the program published by the

403
00:16:36,160 --> 00:16:39,440
authentic software vendor

404
00:16:39,440 --> 00:16:41,600
therefore when we test if a pyro program

405
00:16:41,600 --> 00:16:43,360
is successful

406
00:16:43,360 --> 00:16:45,519
we use the evaluation function

407
00:16:45,519 --> 00:16:47,839
evaluation algorithm published by the

408
00:16:47,839 --> 00:16:48,880
vendor

409
00:16:48,880 --> 00:16:51,279
or say in the original program and this

410
00:16:51,279 --> 00:16:53,120
is in contrast to what we mentioned

411
00:16:53,120 --> 00:16:56,079
before for copy protection in copy

412
00:16:56,079 --> 00:16:58,480
protection we just use a universal

413
00:16:58,480 --> 00:17:00,880
quantum circuit to run on any unitary

414
00:17:00,880 --> 00:17:03,040
and quantum state

415
00:17:03,040 --> 00:17:05,439
given by the adversary

416
00:17:05,439 --> 00:17:06,480
so

417
00:17:06,480 --> 00:17:09,280
uh ssl secures of releasing is actually

418
00:17:09,280 --> 00:17:11,280
a weaker security notion in that we

419
00:17:11,280 --> 00:17:13,119
restrict the possible attacks from the

420
00:17:13,119 --> 00:17:15,199
power by asking him to produce parallel

421
00:17:15,199 --> 00:17:18,160
programs that will only run correctly

422
00:17:18,160 --> 00:17:19,839
run correctly only when we use

423
00:17:19,839 --> 00:17:21,839
evaluation instructions

424
00:17:21,839 --> 00:17:23,919
therefore we can for example

425
00:17:23,919 --> 00:17:27,439
add some validity checks

426
00:17:27,679 --> 00:17:29,919
uh in the evaluation organism so that

427
00:17:29,919 --> 00:17:31,760
only certain quantum states will pass

428
00:17:31,760 --> 00:17:33,760
this check and continue to output the

429
00:17:33,760 --> 00:17:36,160
evaluation of the function otherwise you

430
00:17:36,160 --> 00:17:39,600
don't get to output anything

431
00:17:40,160 --> 00:17:43,280
in general even though ssl

432
00:17:43,280 --> 00:17:45,679
actually still does not get a running

433
00:17:45,679 --> 00:17:47,760
the general possibility result for copy

434
00:17:47,760 --> 00:17:50,000
protection it makes it easier for us to

435
00:17:50,000 --> 00:17:52,320
build construction for specific families

436
00:17:52,320 --> 00:17:54,320
functions in the plane model with our

437
00:17:54,320 --> 00:17:56,160
oracles for example

438
00:17:56,160 --> 00:17:59,039
in the same paper al-20 they give the

439
00:17:59,039 --> 00:18:01,039
construction for subclass of evasive

440
00:18:01,039 --> 00:18:02,799
functions called compute and compare

441
00:18:02,799 --> 00:18:05,120
which is an extension as we mentioned

442
00:18:05,120 --> 00:18:08,799
before of point functions

443
00:18:08,799 --> 00:18:11,360
and finally comes to our third result

444
00:18:11,360 --> 00:18:13,280
we also give a new security notion

445
00:18:13,280 --> 00:18:15,919
inspired by ssl

446
00:18:15,919 --> 00:18:18,559
we put forward this notion called copy

447
00:18:18,559 --> 00:18:20,799
detection instead of allowing the

448
00:18:20,799 --> 00:18:23,360
adversary to win with any pyro programs

449
00:18:23,360 --> 00:18:25,840
that compute correctly they also need to

450
00:18:25,840 --> 00:18:28,080
pass an additional test that tries to

451
00:18:28,080 --> 00:18:30,000
check if the programs are pirate copies

452
00:18:30,000 --> 00:18:31,600
not authentic ones

453
00:18:31,600 --> 00:18:33,280
so the adversary not only needs to

454
00:18:33,280 --> 00:18:35,760
produce programs that compute f but

455
00:18:35,760 --> 00:18:38,160
also programs with certain features

456
00:18:38,160 --> 00:18:39,360
so that

457
00:18:39,360 --> 00:18:40,799
so that they won't be found out as

458
00:18:40,799 --> 00:18:44,160
pirates more specifically we have an

459
00:18:44,160 --> 00:18:46,400
additional algorithm called check

460
00:18:46,400 --> 00:18:49,120
and additional generation of public key

461
00:18:49,120 --> 00:18:50,720
corresponding to the secret key we

462
00:18:50,720 --> 00:18:53,600
generated for the copy protection the

463
00:18:53,600 --> 00:18:56,000
check algorithm takes in the public key

464
00:18:56,000 --> 00:18:58,400
and the claimed program and outputs a

465
00:18:58,400 --> 00:19:00,320
bit indicating whether the program has

466
00:19:00,320 --> 00:19:04,000
passed this validity check

467
00:19:04,080 --> 00:19:06,160
finally the anti-parasitic security is

468
00:19:06,160 --> 00:19:08,880
just adding this check procedure

469
00:19:08,880 --> 00:19:11,679
to testing of the pilot programs we

470
00:19:11,679 --> 00:19:14,480
first apply check using the public key

471
00:19:14,480 --> 00:19:16,960
on the program and then proceed to test

472
00:19:16,960 --> 00:19:18,880
its functionality if and only if the

473
00:19:18,880 --> 00:19:22,080
program has first passed the check

474
00:19:22,080 --> 00:19:24,240
using this notion we can build copy

475
00:19:24,240 --> 00:19:26,400
protection scheme for any watermarkable

476
00:19:26,400 --> 00:19:28,720
functions

477
00:19:28,720 --> 00:19:30,799
combined with the security of public key

478
00:19:30,799 --> 00:19:32,400
quantum money

479
00:19:32,400 --> 00:19:33,200
and

480
00:19:33,200 --> 00:19:36,000
for watermarking watermarking is a is a

481
00:19:36,000 --> 00:19:38,080
classical cryptography tool that allows

482
00:19:38,080 --> 00:19:39,840
you to embed the watermark into the

483
00:19:39,840 --> 00:19:42,960
functions and no adversary can remove

484
00:19:42,960 --> 00:19:45,200
this watermark while not damaging the

485
00:19:45,200 --> 00:19:46,640
functionality

486
00:19:46,640 --> 00:19:47,520
so

487
00:19:47,520 --> 00:19:48,880
what remarkable

488
00:19:48,880 --> 00:19:50,840
functions actually include

489
00:19:50,840 --> 00:19:52,480
uh

490
00:19:52,480 --> 00:19:54,720
number of families of cryptography

491
00:19:54,720 --> 00:19:57,440
functions such as prf's public

492
00:19:57,440 --> 00:20:01,120
encryptions and signatures

493
00:20:02,480 --> 00:20:04,840
so we can do copy detection for

494
00:20:04,840 --> 00:20:07,600
large families of functions and what's

495
00:20:07,600 --> 00:20:11,600
our comparison with the security of ssl

496
00:20:11,600 --> 00:20:14,000
so we want to emphasize that uh one main

497
00:20:14,000 --> 00:20:15,360
difference is

498
00:20:15,360 --> 00:20:18,400
we emphasize the public detectability of

499
00:20:18,400 --> 00:20:19,600
our scheme

500
00:20:19,600 --> 00:20:21,679
and anyone with the public key can

501
00:20:21,679 --> 00:20:23,360
detect the program

502
00:20:23,360 --> 00:20:26,799
whether it's pirated or not

503
00:20:26,799 --> 00:20:28,240
even without any knowledge of

504
00:20:28,240 --> 00:20:30,400
functionality and this is guaranteed by

505
00:20:30,400 --> 00:20:32,640
the security of public key quantum money

506
00:20:32,640 --> 00:20:35,840
and public extractable watermarking

507
00:20:35,840 --> 00:20:37,919
and generally believe the two notions

508
00:20:37,919 --> 00:20:40,000
are actually have the same level of

509
00:20:40,000 --> 00:20:42,320
security for example if we combine

510
00:20:42,320 --> 00:20:44,240
checked organism in the copy detection

511
00:20:44,240 --> 00:20:46,240
together with the universal

512
00:20:46,240 --> 00:20:48,720
circuit evaluation of a quantum program

513
00:20:48,720 --> 00:20:50,799
we can get the evaluation algorithm as

514
00:20:50,799 --> 00:20:54,000
required in the ssl scheme

515
00:20:54,000 --> 00:20:56,720
and another concurrent work

516
00:20:56,720 --> 00:21:00,240
achieves uh security software releasing

517
00:21:00,240 --> 00:21:03,360
for prfs from lwe they make some similar

518
00:21:03,360 --> 00:21:06,159
observations on the use of watermarking

519
00:21:06,159 --> 00:21:08,880
and quantum money and they

520
00:21:08,880 --> 00:21:11,200
they use the semi public keycard money

521
00:21:11,200 --> 00:21:13,039
because they observe that the security

522
00:21:13,039 --> 00:21:15,679
of ssl does not require a fully public

523
00:21:15,679 --> 00:21:17,760
economic scheme

524
00:21:17,760 --> 00:21:20,480
and another follow-up work this year

525
00:21:20,480 --> 00:21:22,480
uh it's a it achieves the average

526
00:21:22,480 --> 00:21:24,960
correct and information

527
00:21:24,960 --> 00:21:27,520
theoretically secure

528
00:21:27,520 --> 00:21:29,919
ssl scheme for compute and compare

529
00:21:29,919 --> 00:21:32,400
functions

530
00:21:32,559 --> 00:21:35,600
and finally we give some open problems

531
00:21:35,600 --> 00:21:37,919
first watermark ability seems to be an

532
00:21:37,919 --> 00:21:40,960
important property for functions

533
00:21:40,960 --> 00:21:43,360
that can be copy detected or secures of

534
00:21:43,360 --> 00:21:46,080
released so can we actually lift

535
00:21:46,080 --> 00:21:47,679
any world remarkable functions to be

536
00:21:47,679 --> 00:21:50,240
copy protected as well

537
00:21:50,240 --> 00:21:52,159
but of course we may need stronger

538
00:21:52,159 --> 00:21:55,600
cryptography hammers at the same time

539
00:21:55,600 --> 00:21:57,840
and second can we achieve occlusion

540
00:21:57,840 --> 00:22:00,480
resistance for copy protection when we

541
00:22:00,480 --> 00:22:02,320
give out k copies

542
00:22:02,320 --> 00:22:04,799
to the adversary and he cannot generate

543
00:22:04,799 --> 00:22:07,840
k plus 1 copies for some polynomial key

544
00:22:07,840 --> 00:22:09,919
and in the setting of public key quantum

545
00:22:09,919 --> 00:22:12,240
money and secure software leasing

546
00:22:12,240 --> 00:22:14,159
actually it's

547
00:22:14,159 --> 00:22:16,720
easy to showcase occlusion resistance

548
00:22:16,720 --> 00:22:18,320
for example by adding a digital

549
00:22:18,320 --> 00:22:20,960
signature to the manuscript or assuming

550
00:22:20,960 --> 00:22:22,720
occlusion resistant

551
00:22:22,720 --> 00:22:24,720
water marking scheme

552
00:22:24,720 --> 00:22:27,200
for the secure software listing

553
00:22:27,200 --> 00:22:29,039
however in copy protection it's not

554
00:22:29,039 --> 00:22:31,600
clear how we can prove the security even

555
00:22:31,600 --> 00:22:34,719
for the oracle setting

556
00:22:36,159 --> 00:22:40,280
and that's it thank you

557
00:22:42,559 --> 00:22:44,639
you

