1
00:00:04,160 --> 00:00:06,640
ready to go have a good session

2
00:00:06,640 --> 00:00:07,839
thank you

3
00:00:07,839 --> 00:00:09,679
so welcome everybody to the low

4
00:00:09,679 --> 00:00:12,880
complexity crypto session we have three

5
00:00:12,880 --> 00:00:16,480
talks uh about very interesting um

6
00:00:16,480 --> 00:00:18,080
papers so i'm really excited to hear

7
00:00:18,080 --> 00:00:18,960
them

8
00:00:18,960 --> 00:00:23,359
um lisa are you here for the first talk

9
00:00:24,720 --> 00:00:26,880
yes i'm here i'm ready hi

10
00:00:26,880 --> 00:00:29,359
okay so the first talk

11
00:00:29,359 --> 00:00:31,039
if you want to share

12
00:00:31,039 --> 00:00:33,279
yes

13
00:00:36,559 --> 00:00:38,239
so the first talk is about low

14
00:00:38,239 --> 00:00:42,480
complexity weak prfs and ac 0 mod 2

15
00:00:42,480 --> 00:00:44,959
by alet

16
00:00:47,440 --> 00:00:50,399
and lisa will give the talk

17
00:00:50,399 --> 00:00:52,879
thank you very much for the introduction

18
00:00:52,879 --> 00:00:56,239
more um yes so hi everyone i'm very

19
00:00:56,239 --> 00:00:59,280
happy to present this work here uh today

20
00:00:59,280 --> 00:01:01,920
uh what we considered in this work uh

21
00:01:01,920 --> 00:01:04,239
greek pseudonym functions which are key

22
00:01:04,239 --> 00:01:07,200
functions um that are indistinguishable

23
00:01:07,200 --> 00:01:09,600
from truly random function and where the

24
00:01:09,600 --> 00:01:12,320
weak just means that

25
00:01:12,320 --> 00:01:14,240
we only require just to hold for your

26
00:01:14,240 --> 00:01:15,680
uniform inputs

27
00:01:15,680 --> 00:01:17,439
and the security notion we consider is

28
00:01:17,439 --> 00:01:19,840
sub-exponential security which is also

29
00:01:19,840 --> 00:01:22,159
what you would expect for a standard

30
00:01:22,159 --> 00:01:24,320
assumption like learning

31
00:01:24,320 --> 00:01:27,920
with errors and um factoring and others

32
00:01:27,920 --> 00:01:29,680
and uh yeah in some sense just the

33
00:01:29,680 --> 00:01:31,520
landscape looks completely different if

34
00:01:31,520 --> 00:01:34,240
you consider other um other security

35
00:01:34,240 --> 00:01:37,119
notions and uh functions even though

36
00:01:37,119 --> 00:01:38,640
it's restricted to the input you

37
00:01:38,640 --> 00:01:40,479
consider have many many applications for

38
00:01:40,479 --> 00:01:42,479
example you can use them for symmetric

39
00:01:42,479 --> 00:01:45,200
encryption or for identification between

40
00:01:45,200 --> 00:01:48,320
parties holding the same keys

41
00:01:48,320 --> 00:01:50,560
and so why why do we consider weak

42
00:01:50,560 --> 00:01:52,399
surrounding functions in low complexity

43
00:01:52,399 --> 00:01:54,240
classes so

44
00:01:54,240 --> 00:01:56,640
there's uh there's many reasons uh to do

45
00:01:56,640 --> 00:01:59,680
so um first of all they often directly

46
00:01:59,680 --> 00:02:01,680
imply very efficient low-end

47
00:02:01,680 --> 00:02:04,560
cryptographic primitives and they

48
00:02:04,560 --> 00:02:06,000
there's very strong connections to

49
00:02:06,000 --> 00:02:08,399
learning theory so automatically if a

50
00:02:08,399 --> 00:02:10,399
weak pf is in a class of function and

51
00:02:10,399 --> 00:02:11,200
this

52
00:02:11,200 --> 00:02:13,360
isn't it isn't that then this class

53
00:02:13,360 --> 00:02:14,800
cannot be learned under the uniform

54
00:02:14,800 --> 00:02:17,680
distribution and uh we have many

55
00:02:17,680 --> 00:02:20,080
examples where um

56
00:02:20,080 --> 00:02:23,280
where um big surround functions or

57
00:02:23,280 --> 00:02:24,480
pseudorandom generators and low

58
00:02:24,480 --> 00:02:25,920
complexity classes have direct

59
00:02:25,920 --> 00:02:28,560
implications to indistinguishability npc

60
00:02:28,560 --> 00:02:31,200
with certain properties and so on

61
00:02:31,200 --> 00:02:33,360
and the law complexity class we consider

62
00:02:33,360 --> 00:02:36,879
in this work is ac 0 and variance so the

63
00:02:36,879 --> 00:02:39,519
ac 0 is the class of circuits with

64
00:02:39,519 --> 00:02:42,800
constant depth and polynomial fan in and

65
00:02:42,800 --> 00:02:45,120
we consider ac 0

66
00:02:45,120 --> 00:02:47,280
on top of parities where the bottom

67
00:02:47,280 --> 00:02:50,400
layer is allowed to be a layer of xors

68
00:02:50,400 --> 00:02:53,200
more generally we consider ac 012 where

69
00:02:53,200 --> 00:02:55,040
the extra layers are allowed to be

70
00:02:55,040 --> 00:02:58,319
arbitrary layers and um

71
00:02:58,319 --> 00:03:00,319
we consider on the next slide you will

72
00:03:00,319 --> 00:03:03,200
also see a c0 where there's arbitrary

73
00:03:03,200 --> 00:03:05,280
what's gates not two mod three and so on

74
00:03:05,280 --> 00:03:07,760
and average

75
00:03:08,080 --> 00:03:10,480
and so how does the landscape look there

76
00:03:10,480 --> 00:03:12,959
so by the famous result of linear

77
00:03:12,959 --> 00:03:16,159
monsoon nissan we know that there can

78
00:03:16,159 --> 00:03:18,480
be no weak pseudo-random functions with

79
00:03:18,480 --> 00:03:20,720
better than quasi-polynomial security in

80
00:03:20,720 --> 00:03:24,959
ac0 um so this is too low to look at and

81
00:03:24,959 --> 00:03:27,760
um on the other hand in acc0 we already

82
00:03:27,760 --> 00:03:30,080
know since 2018 we have kind of big

83
00:03:30,080 --> 00:03:31,920
payoffs even just with more two and more

84
00:03:31,920 --> 00:03:34,319
three gates so we focus in this work in

85
00:03:34,319 --> 00:03:36,000
the area in between

86
00:03:36,000 --> 00:03:38,000
and um

87
00:03:38,000 --> 00:03:39,200
and

88
00:03:39,200 --> 00:03:41,120
from recent work we know

89
00:03:41,120 --> 00:03:43,200
or we have a candidate big pf computed

90
00:03:43,200 --> 00:03:46,239
by an x and f formula um which is uh d

91
00:03:46,239 --> 00:03:48,400
and f where instead of disjunctions you

92
00:03:48,400 --> 00:03:51,599
have xors and so what we do in this work

93
00:03:51,599 --> 00:03:54,080
is is go even a bit lower and and get a

94
00:03:54,080 --> 00:03:56,560
candidate f computed by sparse f2

95
00:03:56,560 --> 00:03:57,840
polynomials

96
00:03:57,840 --> 00:04:00,799
and further in ac serial on top of

97
00:04:00,799 --> 00:04:04,879
parity's um previous work um

98
00:04:04,879 --> 00:04:07,040
um the previous construction of big

99
00:04:07,040 --> 00:04:09,439
pseudorandom function um was later shown

100
00:04:09,439 --> 00:04:11,599
to be broken in quasi-polynomial time by

101
00:04:11,599 --> 00:04:13,920
a so-called algebraic attack and what we

102
00:04:13,920 --> 00:04:16,639
do also in this work is in some sense uh

103
00:04:16,639 --> 00:04:19,120
fix fix the attack um and

104
00:04:19,120 --> 00:04:21,358
fix the candidate and and bring forward

105
00:04:21,358 --> 00:04:23,440
a new candidate that's uh yeah that's

106
00:04:23,440 --> 00:04:25,360
currently the only one we know that that

107
00:04:25,360 --> 00:04:26,880
we can conjecture to have a sub

108
00:04:26,880 --> 00:04:28,880
sub-exponential security

109
00:04:28,880 --> 00:04:31,040
and to give a very very brief uh

110
00:04:31,040 --> 00:04:32,479
overview of how

111
00:04:32,479 --> 00:04:34,320
our candidates look like how our work

112
00:04:34,320 --> 00:04:36,479
looks like so uh if you look at the

113
00:04:36,479 --> 00:04:38,160
candidate league pff and asus zero mode

114
00:04:38,160 --> 00:04:39,759
two the previous one

115
00:04:39,759 --> 00:04:41,199
which can also be viewed as learning

116
00:04:41,199 --> 00:04:42,960
parity with verbal density noise but you

117
00:04:42,960 --> 00:04:45,360
don't have to parse the equation here

118
00:04:45,360 --> 00:04:46,960
the only thing you have to notice is

119
00:04:46,960 --> 00:04:48,560
that this is basically as far as

120
00:04:48,560 --> 00:04:51,360
multivariate f2 polynomial inputs under

121
00:04:51,360 --> 00:04:52,400
negation

122
00:04:52,400 --> 00:04:55,919
and what we the idea of this work is to

123
00:04:55,919 --> 00:04:58,639
get rid of the negation part by instead

124
00:04:58,639 --> 00:05:00,720
of so so in this in this candidate the

125
00:05:00,720 --> 00:05:02,240
key decides whether a variable is

126
00:05:02,240 --> 00:05:05,600
negated or not and in our new work um

127
00:05:05,600 --> 00:05:07,919
the key decides instead which variable

128
00:05:07,919 --> 00:05:10,080
to choose instead of negated or not so

129
00:05:10,080 --> 00:05:12,160
this is very very straightforward uh it

130
00:05:12,160 --> 00:05:14,320
turns out choosing between two variables

131
00:05:14,320 --> 00:05:15,919
is not enough that's the first thing you

132
00:05:15,919 --> 00:05:18,080
you might try and and the hard part is

133
00:05:18,080 --> 00:05:20,240
actually to prove to prove that this

134
00:05:20,240 --> 00:05:21,759
resists like

135
00:05:21,759 --> 00:05:23,759
so-called linear attacks

136
00:05:23,759 --> 00:05:25,520
which is a large class of attack so we

137
00:05:25,520 --> 00:05:27,199
can probably rule them out we can also

138
00:05:27,199 --> 00:05:30,160
rule out more attacks um yeah but please

139
00:05:30,160 --> 00:05:32,240
see the paper for more details

140
00:05:32,240 --> 00:05:35,039
and uh yeah the second candidate is the

141
00:05:35,039 --> 00:05:36,639
candidate big pair of an ac sierra on

142
00:05:36,639 --> 00:05:40,160
top of parities which

143
00:05:40,160 --> 00:05:41,759
can be viewed as learning parity with

144
00:05:41,759 --> 00:05:43,759
simple noise where the noise

145
00:05:43,759 --> 00:05:46,080
is an ac series circuit but not applied

146
00:05:46,080 --> 00:05:47,440
to the input

147
00:05:47,440 --> 00:05:49,199
but applied to the

148
00:05:49,199 --> 00:05:50,320
input

149
00:05:50,320 --> 00:05:52,800
times times the key which defines the

150
00:05:52,800 --> 00:05:54,880
parity layer

151
00:05:54,880 --> 00:05:55,759
um

152
00:05:55,759 --> 00:05:57,840
and the problem is that this can be

153
00:05:57,840 --> 00:06:00,000
broken quasi-polynomial time basically

154
00:06:00,000 --> 00:06:02,639
because g as a rational function has has

155
00:06:02,639 --> 00:06:05,360
low degree and what we show in this work

156
00:06:05,360 --> 00:06:06,800
is that you can do it the most

157
00:06:06,800 --> 00:06:08,479
straightforward thing very simple thing

158
00:06:08,479 --> 00:06:11,280
you can add another layer and you you

159
00:06:11,280 --> 00:06:12,880
actually this is not oh we don't know

160
00:06:12,880 --> 00:06:15,199
how to break it but we can probably

161
00:06:15,199 --> 00:06:17,440
show that this has high rational high

162
00:06:17,440 --> 00:06:19,759
rational degree other than the previous

163
00:06:19,759 --> 00:06:22,160
uh candidate and and also give

164
00:06:22,160 --> 00:06:23,600
um like

165
00:06:23,600 --> 00:06:25,919
give give very high or give based on a

166
00:06:25,919 --> 00:06:28,160
conjecture we can also show that it

167
00:06:28,160 --> 00:06:30,560
resists linear attacks it's simple

168
00:06:30,560 --> 00:06:33,280
combinatorial conjecture and uh yeah

169
00:06:33,280 --> 00:06:35,199
there there's much much more as as you

170
00:06:35,199 --> 00:06:36,639
can see here that i would like to tell

171
00:06:36,639 --> 00:06:39,280
you about uh but i'm out of time i think

172
00:06:39,280 --> 00:06:41,520
so please uh check out the long talk in

173
00:06:41,520 --> 00:06:43,280
the papers we also consider the question

174
00:06:43,280 --> 00:06:45,280
of the pseudorandom functions in ac

175
00:06:45,280 --> 00:06:47,440
sierra on top of public parities and

176
00:06:47,440 --> 00:06:50,960
connections to the linear ipp conjecture

177
00:06:50,960 --> 00:06:53,280
and we give implications of the

178
00:06:53,280 --> 00:06:55,840
existence of weak prfs or connections in

179
00:06:55,840 --> 00:06:58,639
ac 0 mode 2 and other conjectures so

180
00:06:58,639 --> 00:07:02,680
thank you so much for your attention

181
00:07:03,440 --> 00:07:04,960
thanks lisa

182
00:07:04,960 --> 00:07:06,880
so i think we'll keep questions to the

183
00:07:06,880 --> 00:07:09,039
end of the session for all talks

184
00:07:09,039 --> 00:07:13,280
and we'll move on to the next talk

185
00:07:13,680 --> 00:07:15,520
mahima do you want to do you want to

186
00:07:15,520 --> 00:07:19,599
share yeah just give me a second

187
00:07:27,520 --> 00:07:29,360
casey

188
00:07:29,360 --> 00:07:31,440
yes

189
00:07:31,440 --> 00:07:33,039
so the next talk

190
00:07:33,039 --> 00:07:34,720
is about mpc friendly symmetric

191
00:07:34,720 --> 00:07:36,960
cryptography from alternating model i

192
00:07:36,960 --> 00:07:39,440
candidates protocols and applications

193
00:07:39,440 --> 00:07:42,560
uh by tai dino stephen goldfeder zipolo

194
00:07:42,560 --> 00:07:45,560
halevish

195
00:07:47,520 --> 00:07:49,759
i hope i didn't mispronounce anyone's

196
00:07:49,759 --> 00:07:51,759
name and mahima is going to give the

197
00:07:51,759 --> 00:07:53,039
talk

198
00:07:53,039 --> 00:07:54,639
thank you for the introduction i'm muhim

199
00:07:54,639 --> 00:07:56,400
now i'm a people at cornell and i'll be

200
00:07:56,400 --> 00:07:58,639
talking about our paper on npc friendly

201
00:07:58,639 --> 00:08:00,479
metric cryptography and this is joint

202
00:08:00,479 --> 00:08:03,599
work with people all over the world

203
00:08:03,599 --> 00:08:05,440
so let me start with some motivation

204
00:08:05,440 --> 00:08:07,599
so symmetric primitives have been used

205
00:08:07,599 --> 00:08:09,280
like everywhere but recently for many

206
00:08:09,280 --> 00:08:11,199
applications there's been a demand for

207
00:08:11,199 --> 00:08:13,360
evaluation of distributed setting where

208
00:08:13,360 --> 00:08:15,199
the keys and inputs are secret shared

209
00:08:15,199 --> 00:08:16,879
among many parties

210
00:08:16,879 --> 00:08:18,960
but standard constructions like aes and

211
00:08:18,960 --> 00:08:20,560
sha were optimized for centralized

212
00:08:20,560 --> 00:08:22,080
evaluation and not really with this

213
00:08:22,080 --> 00:08:24,080
distributed setting in mind

214
00:08:24,080 --> 00:08:25,599
so this kind of creates a natural

215
00:08:25,599 --> 00:08:27,840
research direction to design so-called

216
00:08:27,840 --> 00:08:31,360
mpc-friendly primitives um and our work

217
00:08:31,360 --> 00:08:33,760
kind of explores the uh continues the

218
00:08:33,760 --> 00:08:36,320
exploration of this area

219
00:08:36,320 --> 00:08:38,240
so we design mpc-friendly primitives

220
00:08:38,240 --> 00:08:40,399
with the following goals in mind first

221
00:08:40,399 --> 00:08:42,080
we want the constructions to have as

222
00:08:42,080 --> 00:08:43,839
little non-linearity as possible since

223
00:08:43,839 --> 00:08:45,680
typically non-linear functions are the

224
00:08:45,680 --> 00:08:48,240
evaluation bottleneck so we'll have low

225
00:08:48,240 --> 00:08:50,160
nonlinear depths and small non-linear

226
00:08:50,160 --> 00:08:52,720
size as the design goals and second for

227
00:08:52,720 --> 00:08:54,959
security having a high algebraic degree

228
00:08:54,959 --> 00:08:57,440
is beneficial to resist learning attacks

229
00:08:57,440 --> 00:08:58,959
and we'll also focus on simple design

230
00:08:58,959 --> 00:09:00,399
since they're easier to reason about

231
00:09:00,399 --> 00:09:02,560
encrypt analyze and also less prone to

232
00:09:02,560 --> 00:09:05,040
implementation errors

233
00:09:05,040 --> 00:09:07,440
so our continues our work continues this

234
00:09:07,440 --> 00:09:09,600
research direction started by bonnet at

235
00:09:09,600 --> 00:09:11,440
all and continued by tron at all and

236
00:09:11,440 --> 00:09:13,279
they proposed this alternating moduli

237
00:09:13,279 --> 00:09:15,360
paradigm where the basic idea is to

238
00:09:15,360 --> 00:09:16,959
compose linear functions over different

239
00:09:16,959 --> 00:09:18,880
moduli and since most of the computation

240
00:09:18,880 --> 00:09:20,640
is linear it should be easier to

241
00:09:20,640 --> 00:09:22,880
evaluate an mpc and the hope is that

242
00:09:22,880 --> 00:09:24,720
these mixing of different modulizes

243
00:09:24,720 --> 00:09:26,560
enough to resist attacks and a lot of

244
00:09:26,560 --> 00:09:28,320
careful cryptanalysis was done by the

245
00:09:28,320 --> 00:09:30,480
two works that i mentioned

246
00:09:30,480 --> 00:09:32,320
so bonnet all started with this sort of

247
00:09:32,320 --> 00:09:34,320
candidate weak prf their main

248
00:09:34,320 --> 00:09:36,800
construction was this two-three-week

249
00:09:36,800 --> 00:09:39,360
pair of which mixes linear maps over z2

250
00:09:39,360 --> 00:09:41,279
and z3 so for this there's first a

251
00:09:41,279 --> 00:09:43,680
secret linear map over z2 with the key

252
00:09:43,680 --> 00:09:45,760
and then the output is converted to z3

253
00:09:45,760 --> 00:09:47,440
which is then mapped using a public

254
00:09:47,440 --> 00:09:49,519
linear map over z3

255
00:09:49,519 --> 00:09:50,959
and one reason why this is conjecture to

256
00:09:50,959 --> 00:09:52,880
work is because as it turns out linear

257
00:09:52,880 --> 00:09:55,680
maps over z2 have a high degree over z3

258
00:09:55,680 --> 00:09:58,399
and vice versa

259
00:09:58,560 --> 00:10:00,480
so our work kind of continues the

260
00:10:00,480 --> 00:10:02,800
exploration of designing new candidates

261
00:10:02,800 --> 00:10:05,200
in this alternating moduli paradigm so

262
00:10:05,200 --> 00:10:07,920
while bonnero only considered

263
00:10:07,920 --> 00:10:10,240
prfs we ask whether we can construct

264
00:10:10,240 --> 00:10:11,839
candidates for other primitives like

265
00:10:11,839 --> 00:10:14,720
one-way functions and prgs so we also

266
00:10:14,720 --> 00:10:17,360
present a candidate prf where all the

267
00:10:17,360 --> 00:10:20,320
key input and output are over z2 and for

268
00:10:20,320 --> 00:10:21,839
all of our candidates we perform

269
00:10:21,839 --> 00:10:24,000
substantial cryptanalysis and use that

270
00:10:24,000 --> 00:10:26,079
to inform our parameter choices

271
00:10:26,079 --> 00:10:27,600
and veda will give

272
00:10:27,600 --> 00:10:29,440
efficient distributed protocols in

273
00:10:29,440 --> 00:10:30,880
several different settings with semi

274
00:10:30,880 --> 00:10:32,959
honest parties and finally we talk about

275
00:10:32,959 --> 00:10:34,720
some applications for

276
00:10:34,720 --> 00:10:37,760
oprs and signatures

277
00:10:37,760 --> 00:10:40,720
so our candidate 2-3 one-way function

278
00:10:40,720 --> 00:10:42,560
uh which is what i'll first introduce

279
00:10:42,560 --> 00:10:43,760
follows the same structure as the

280
00:10:43,760 --> 00:10:46,720
2-3-week prf except now the key is

281
00:10:46,720 --> 00:10:49,279
replaced by a public matrix a so now you

282
00:10:49,279 --> 00:10:51,440
have a public linear mapping over c2

283
00:10:51,440 --> 00:10:53,680
using a and then a public linear mapping

284
00:10:53,680 --> 00:10:56,079
over z3 that uses b so it's basically

285
00:10:56,079 --> 00:10:57,680
the similar structure as the two three

286
00:10:57,680 --> 00:10:59,279
week prf and i won't talk about

287
00:10:59,279 --> 00:11:00,720
cryptanalysis in this talk but i'll

288
00:11:00,720 --> 00:11:02,480
mention that we found an interesting

289
00:11:02,480 --> 00:11:04,720
attack based on reduction to subset sum

290
00:11:04,720 --> 00:11:06,160
which introduced which influenced our

291
00:11:06,160 --> 00:11:08,240
parameter choice

292
00:11:08,240 --> 00:11:10,320
i'll also very briefly mention our other

293
00:11:10,320 --> 00:11:12,959
candidates so we provide an lpn style

294
00:11:12,959 --> 00:11:15,040
weak prf where the input and output are

295
00:11:15,040 --> 00:11:17,680
over z2 and for this construction to get

296
00:11:17,680 --> 00:11:20,800
the intermediate vector we add

297
00:11:20,800 --> 00:11:23,440
kx mod 3 mod 2 to kx mod 2 and this can

298
00:11:23,440 --> 00:11:26,240
be sort of thought of as a deterministic

299
00:11:26,240 --> 00:11:28,800
lpn instance with noise rate 1 3 which

300
00:11:28,800 --> 00:11:31,040
is given by this vector v

301
00:11:31,040 --> 00:11:32,800
and now use as before you use this

302
00:11:32,800 --> 00:11:36,640
public mod 2 map to get the output

303
00:11:36,640 --> 00:11:39,519
we also provide a candidate doubling

304
00:11:39,519 --> 00:11:40,720
prg

305
00:11:40,720 --> 00:11:42,560
which has the same structure as the lpn

306
00:11:42,560 --> 00:11:44,880
weak prf but now similar to the one-way

307
00:11:44,880 --> 00:11:46,399
function we replace the key with a

308
00:11:46,399 --> 00:11:48,959
public matrix and more detail can be

309
00:11:48,959 --> 00:11:51,360
found in our paper

310
00:11:51,360 --> 00:11:54,480
so we performed extensive cryptanalysis

311
00:11:54,480 --> 00:11:56,320
and used it to influence our parameters

312
00:11:56,320 --> 00:11:57,839
and we primarily considered

313
00:11:57,839 --> 00:12:00,560
combinatorial and statistical tests

314
00:12:00,560 --> 00:12:02,399
uh we found based on our analysis that

315
00:12:02,399 --> 00:12:04,480
the one-way function and prg candidates

316
00:12:04,480 --> 00:12:07,200
can have s-bit inputs which is a minimal

317
00:12:07,200 --> 00:12:09,200
for s-bit security but we definitely

318
00:12:09,200 --> 00:12:12,639
welcome more uh crypt analysis

319
00:12:12,639 --> 00:12:15,360
so we focus on the semi-honest setting

320
00:12:15,360 --> 00:12:18,079
for our protocols and provide protocols

321
00:12:18,079 --> 00:12:19,839
for many distributed settings with and

322
00:12:19,839 --> 00:12:21,360
without pre-processing

323
00:12:21,360 --> 00:12:23,839
and our main efficiency gains are from

324
00:12:23,839 --> 00:12:26,240
these use of modulus conversion gates

325
00:12:26,240 --> 00:12:28,240
that can convert between shares in z2

326
00:12:28,240 --> 00:12:30,240
and z3 and we provide efficient

327
00:12:30,240 --> 00:12:32,240
protocols for these gates as well as

328
00:12:32,240 --> 00:12:34,399
techniques to generate the correlations

329
00:12:34,399 --> 00:12:37,200
efficiently from ot correlations and our

330
00:12:37,200 --> 00:12:39,120
pre-processing is pcg-friendly in that

331
00:12:39,120 --> 00:12:41,279
the correlations for multiple instances

332
00:12:41,279 --> 00:12:42,800
can be generated with sub-linear

333
00:12:42,800 --> 00:12:44,160
communication

334
00:12:44,160 --> 00:12:45,120
and the cost to generate these

335
00:12:45,120 --> 00:12:47,519
correlations is about 1.38 bits for z2

336
00:12:47,519 --> 00:12:51,360
to z3 and 6 bits for z3 to z2

337
00:12:51,360 --> 00:12:53,279
so based on these the

338
00:12:53,279 --> 00:12:54,639
protocol that we proposed for the weak

339
00:12:54,639 --> 00:12:57,440
tariff candidate um of bonnet at all is

340
00:12:57,440 --> 00:12:59,839
about 2x better on all fronts and

341
00:12:59,839 --> 00:13:01,680
primarily due to our use of these

342
00:13:01,680 --> 00:13:04,880
modulus conversion gates

343
00:13:05,040 --> 00:13:07,519
so in terms of applications we provide

344
00:13:07,519 --> 00:13:10,320
two oprf protocols that are much faster

345
00:13:10,320 --> 00:13:12,639
than ddh based oprf but have a slightly

346
00:13:12,639 --> 00:13:14,800
higher communication cost so in fact our

347
00:13:14,800 --> 00:13:17,360
opr protocols are even faster to compute

348
00:13:17,360 --> 00:13:19,440
than a single elliptic curve point

349
00:13:19,440 --> 00:13:21,200
multiplication

350
00:13:21,200 --> 00:13:22,880
we also use our one-way function

351
00:13:22,880 --> 00:13:24,639
candidate for picnic style signatures

352
00:13:24,639 --> 00:13:27,600
that use mpc in the head and we get

353
00:13:27,600 --> 00:13:29,760
smaller signature sizes when compared to

354
00:13:29,760 --> 00:13:32,959
using picnic over low mc

355
00:13:32,959 --> 00:13:34,959
i'll also highlight that our candidates

356
00:13:34,959 --> 00:13:36,399
should be competitive for a number of

357
00:13:36,399 --> 00:13:38,639
distributed settings like symmetric

358
00:13:38,639 --> 00:13:40,880
searchable encryption hierarchical key

359
00:13:40,880 --> 00:13:42,800
derivation or generating function secret

360
00:13:42,800 --> 00:13:44,720
sharing keys and details for these can

361
00:13:44,720 --> 00:13:47,120
be found in the paper

362
00:13:47,120 --> 00:13:49,199
so just some final remarks

363
00:13:49,199 --> 00:13:51,519
um i'll say that the space of simple

364
00:13:51,519 --> 00:13:53,279
designs for symmetric primitives is

365
00:13:53,279 --> 00:13:55,360
still very much unexplored and more

366
00:13:55,360 --> 00:13:57,680
cryptanalysis is definitely needed and

367
00:13:57,680 --> 00:13:59,519
as for some open directions it would be

368
00:13:59,519 --> 00:14:01,279
nice to have

369
00:14:01,279 --> 00:14:02,959
constructions for other primitives like

370
00:14:02,959 --> 00:14:05,600
block ciphers or hash functions and also

371
00:14:05,600 --> 00:14:06,959
efficient protocols with malicious

372
00:14:06,959 --> 00:14:08,720
security seems like a natural follow-up

373
00:14:08,720 --> 00:14:09,920
question

374
00:14:09,920 --> 00:14:11,519
and i'll conclude here here's a link to

375
00:14:11,519 --> 00:14:13,120
the paper in case you want to check it

376
00:14:13,120 --> 00:14:16,600
out thank you

377
00:14:21,040 --> 00:14:24,000
thank you mahima

378
00:14:24,000 --> 00:14:26,959
jaya are you here for the next talk

379
00:14:26,959 --> 00:14:28,560
yes i'm ready

380
00:14:28,560 --> 00:14:29,440
okay

381
00:14:29,440 --> 00:14:31,440
so the next talk is no time to hash on

382
00:14:31,440 --> 00:14:34,000
super efficient entropy accumulation by

383
00:14:34,000 --> 00:14:37,000
afghanistan

384
00:14:38,959 --> 00:14:41,680
and jay will give the talk

385
00:14:41,680 --> 00:14:43,279
thanks for the introduction

386
00:14:43,279 --> 00:14:45,120
my name is g here

387
00:14:45,120 --> 00:14:46,959
this talk is based on are going to work

388
00:14:46,959 --> 00:14:50,240
i did with your gang dodis cl4 not

389
00:14:50,240 --> 00:14:53,199
steven stephanovi

390
00:14:53,519 --> 00:14:55,600
how does windows time generate random

391
00:14:55,600 --> 00:14:56,560
beats

392
00:14:56,560 --> 00:14:58,720
first it will convert low entropy

393
00:14:58,720 --> 00:15:01,519
sources from the environment to high

394
00:15:01,519 --> 00:15:04,160
entropy states and send them to a harsh

395
00:15:04,160 --> 00:15:07,040
function to generate random bits

396
00:15:07,040 --> 00:15:09,680
we focus on the on the entropy

397
00:15:09,680 --> 00:15:12,399
accumulation procedure it can be modeled

398
00:15:12,399 --> 00:15:14,800
as follows

399
00:15:14,800 --> 00:15:18,240
a register r of 32-bit alarm is used to

400
00:15:18,240 --> 00:15:20,480
accumulate entropy

401
00:15:20,480 --> 00:15:23,199
the entropy source x1 such as an

402
00:15:23,199 --> 00:15:26,000
interrupted timing is also a 32-bit

403
00:15:26,000 --> 00:15:27,519
string

404
00:15:27,519 --> 00:15:30,480
to update the register r one is to

405
00:15:30,480 --> 00:15:33,199
cyclically rotate the bits of r

406
00:15:33,199 --> 00:15:36,000
by a fixed rotation number five

407
00:15:36,000 --> 00:15:41,279
and then xor the result to x one x axi

408
00:15:41,279 --> 00:15:43,680
this updating process is repeated and

409
00:15:43,680 --> 00:15:46,079
the 32 entropy sources will be

410
00:15:46,079 --> 00:15:48,240
accumulated into r

411
00:15:48,240 --> 00:15:51,279
in practice windows time has implemented

412
00:15:51,279 --> 00:15:52,079
this

413
00:15:52,079 --> 00:15:54,399
entropy accumulation procedure in a

414
00:15:54,399 --> 00:15:56,240
32-bit cpu

415
00:15:56,240 --> 00:15:59,920
for 64-bit cpu the implementation is

416
00:15:59,920 --> 00:16:01,199
similar

417
00:16:01,199 --> 00:16:04,639
as our main focus microsoft's design

418
00:16:04,639 --> 00:16:06,560
raises a lot of questions that we would

419
00:16:06,560 --> 00:16:08,720
like to answer

420
00:16:08,720 --> 00:16:10,880
the first question is that can rotation

421
00:16:10,880 --> 00:16:12,800
indeed accumulate entropy

422
00:16:12,800 --> 00:16:14,240
we really want to know whether the

423
00:16:14,240 --> 00:16:16,800
register r can convert to a high entropy

424
00:16:16,800 --> 00:16:18,880
state after receiving

425
00:16:18,880 --> 00:16:20,800
32 samples

426
00:16:20,800 --> 00:16:23,040
if rotation works then we want to know

427
00:16:23,040 --> 00:16:26,560
how microsoft selected this a mysterious

428
00:16:26,560 --> 00:16:28,880
rotation number phi

429
00:16:28,880 --> 00:16:31,440
finally is rotation really the best way

430
00:16:31,440 --> 00:16:34,160
for entropy accumulation

431
00:16:34,160 --> 00:16:35,759
to start answering

432
00:16:35,759 --> 00:16:38,399
these questions the first priority is to

433
00:16:38,399 --> 00:16:40,800
model intra interrupted timings which

434
00:16:40,800 --> 00:16:42,959
are primary entropy sources in windows

435
00:16:42,959 --> 00:16:44,240
time

436
00:16:44,240 --> 00:16:45,360
first

437
00:16:45,360 --> 00:16:46,639
we will assume

438
00:16:46,639 --> 00:16:49,040
samples are independent which is the

439
00:16:49,040 --> 00:16:52,320
simplest and non-trivial setting

440
00:16:52,320 --> 00:16:53,759
second

441
00:16:53,759 --> 00:16:56,320
the entropy of each independent sample

442
00:16:56,320 --> 00:16:59,600
is lower bounded by some parameter k

443
00:16:59,600 --> 00:17:01,600
finally we will further report each

444
00:17:01,600 --> 00:17:03,759
sample to confirm some family of natural

445
00:17:03,759 --> 00:17:06,319
distributions because we want to model

446
00:17:06,319 --> 00:17:08,959
interrupted timings by discrete gaussian

447
00:17:08,959 --> 00:17:12,000
exponential or uniform distributions

448
00:17:12,000 --> 00:17:13,679
we have modeled this type of

449
00:17:13,679 --> 00:17:16,799
distribution and call it to monotone

450
00:17:16,799 --> 00:17:19,039
where the probability mass function has

451
00:17:19,039 --> 00:17:20,959
at the most one peak

452
00:17:20,959 --> 00:17:23,359
any two month distribution has most of

453
00:17:23,359 --> 00:17:26,559
its entropy in its lower order bits

454
00:17:26,559 --> 00:17:28,240
with entropy sources being modeled

455
00:17:28,240 --> 00:17:30,960
properly now we are prepared to present

456
00:17:30,960 --> 00:17:33,760
our result

457
00:17:33,760 --> 00:17:35,919
first of all by the property of two

458
00:17:35,919 --> 00:17:38,559
monotone distribution we can show that

459
00:17:38,559 --> 00:17:41,679
any rotation on bits with rotation

460
00:17:41,679 --> 00:17:43,840
number alpha co-prime to n can

461
00:17:43,840 --> 00:17:46,400
accumulate nearly in bits of entropy

462
00:17:46,400 --> 00:17:48,720
within n steps

463
00:17:48,720 --> 00:17:51,200
if rfi is not co-prime to n then the

464
00:17:51,200 --> 00:17:53,200
register r will end up with little

465
00:17:53,200 --> 00:17:55,919
entropy for some distributions

466
00:17:55,919 --> 00:17:58,480
the first result justifies the use of

467
00:17:58,480 --> 00:18:00,799
rotation but only if we are willing to

468
00:18:00,799 --> 00:18:02,960
wait in steps

469
00:18:02,960 --> 00:18:05,280
it fails to distinguish between rotation

470
00:18:05,280 --> 00:18:07,520
by one and the rotation by five whereas

471
00:18:07,520 --> 00:18:09,600
the former is obviously the worst

472
00:18:09,600 --> 00:18:12,400
rotation in practice

473
00:18:12,400 --> 00:18:13,520
to do this

474
00:18:13,520 --> 00:18:15,919
we introduce a simple quantity which we

475
00:18:15,919 --> 00:18:17,679
call covering number

476
00:18:17,679 --> 00:18:20,480
intuitively it's the process of covering

477
00:18:20,480 --> 00:18:23,280
a black segment of length n using a

478
00:18:23,280 --> 00:18:26,240
short write segment of landscape

479
00:18:26,240 --> 00:18:28,640
every time the red segment is cyclically

480
00:18:28,640 --> 00:18:31,760
rotated by a constant alpha

481
00:18:31,760 --> 00:18:34,559
carbon number r by k counts how many

482
00:18:34,559 --> 00:18:36,799
times are needed for the red segment to

483
00:18:36,799 --> 00:18:39,760
cover the entire black segment

484
00:18:39,760 --> 00:18:42,400
in our work we show that covering

485
00:18:42,400 --> 00:18:44,400
number is the right measurement of

486
00:18:44,400 --> 00:18:46,640
samples to accumulate nearly full

487
00:18:46,640 --> 00:18:49,440
entropy from any natural distribution

488
00:18:49,440 --> 00:18:52,400
with entropy at least decay

489
00:18:52,400 --> 00:18:54,400
this suggests comparable rotations

490
00:18:54,400 --> 00:18:56,400
according to the recovery numbers

491
00:18:56,400 --> 00:18:59,280
if rotation has relatively small current

492
00:18:59,280 --> 00:19:01,600
numbers for all possible k

493
00:19:01,600 --> 00:19:03,760
then it's a good one

494
00:19:03,760 --> 00:19:05,039
in our work

495
00:19:05,039 --> 00:19:06,320
we show that

496
00:19:06,320 --> 00:19:08,320
microsoft's choice of phi

497
00:19:08,320 --> 00:19:10,880
is reasonable by comparing its current

498
00:19:10,880 --> 00:19:13,520
numbers with the optimal value and over

499
00:19:13,520 --> 00:19:16,960
k and other rotations

500
00:19:16,960 --> 00:19:18,960
above two results can immediately

501
00:19:18,960 --> 00:19:21,440
generalize to cyclic permutations

502
00:19:21,440 --> 00:19:23,520
we have also constructed a permutation

503
00:19:23,520 --> 00:19:27,200
that we call beta reverse notation

504
00:19:27,200 --> 00:19:29,280
this cyclic permutation has a nice

505
00:19:29,280 --> 00:19:32,400
property for any k the current number is

506
00:19:32,400 --> 00:19:33,840
nearly optimal

507
00:19:33,840 --> 00:19:35,840
so b to reverse rotation has small

508
00:19:35,840 --> 00:19:40,480
cavity numbers for ok simultaneously

509
00:19:40,480 --> 00:19:43,360
by comparing the current number of tor

510
00:19:43,360 --> 00:19:47,200
32 with that of rotation by 5 our study

511
00:19:47,200 --> 00:19:49,840
suggests that beta reverse rotation

512
00:19:49,840 --> 00:19:52,400
seems to perform as a list as well as

513
00:19:52,400 --> 00:19:56,799
rotation and a better in several regions

514
00:19:56,799 --> 00:19:58,400
let me quickly recap what i have seen so

515
00:19:58,400 --> 00:19:59,200
far

516
00:19:59,200 --> 00:20:01,840
we just defined the use of rotation

517
00:20:01,840 --> 00:20:04,240
in windows times random number generator

518
00:20:04,240 --> 00:20:06,799
as long as rotation number alpha is

519
00:20:06,799 --> 00:20:09,039
called prime to 32

520
00:20:09,039 --> 00:20:11,440
we also justified microsoft's choice of

521
00:20:11,440 --> 00:20:14,480
rotation number five by covering number

522
00:20:14,480 --> 00:20:16,320
finally we suggested the replacing

523
00:20:16,320 --> 00:20:19,120
rotation by bit reverse solution

524
00:20:19,120 --> 00:20:20,880
this one closes my talk thanks for

525
00:20:20,880 --> 00:20:23,360
listening

526
00:20:26,320 --> 00:20:29,120
thank you jae thanks again to all the

527
00:20:29,120 --> 00:20:32,080
speakers of the session so maybe you

528
00:20:32,080 --> 00:20:33,360
would like

529
00:20:33,360 --> 00:20:36,000
to open your your cameras so that people

530
00:20:36,000 --> 00:20:39,200
can ask you questions

531
00:20:40,559 --> 00:20:42,559
so you can either just um unmute

532
00:20:42,559 --> 00:20:44,640
yourself and ask or

533
00:20:44,640 --> 00:20:46,799
write in chat or

534
00:20:46,799 --> 00:20:49,840
on zulip

535
00:21:01,760 --> 00:21:03,679
okay so let me start us off so see i

536
00:21:03,679 --> 00:21:05,360
have a question for you about the two

537
00:21:05,360 --> 00:21:07,520
monotone distributions

538
00:21:07,520 --> 00:21:08,720
um

539
00:21:08,720 --> 00:21:10,400
so it's kind of yeah

540
00:21:10,400 --> 00:21:13,280
it's kind of orthogonal but um

541
00:21:13,280 --> 00:21:16,080
but i'm like i was wondering what you

542
00:21:16,080 --> 00:21:18,320
can do with this for

543
00:21:18,320 --> 00:21:19,600
standard

544
00:21:19,600 --> 00:21:21,520
extractors

545
00:21:21,520 --> 00:21:23,360
so i'm thinking if i don't want to wait

546
00:21:23,360 --> 00:21:25,840
and and time steps or five time steps i

547
00:21:25,840 --> 00:21:28,000
don't have multiple samples i just have

548
00:21:28,000 --> 00:21:29,280
one sample

549
00:21:29,280 --> 00:21:32,240
but if i restrict my distribution to not

550
00:21:32,240 --> 00:21:34,400
just having hymen entropy but also being

551
00:21:34,400 --> 00:21:36,720
two monotone so can we do something

552
00:21:36,720 --> 00:21:38,960
which is simpler than standard

553
00:21:38,960 --> 00:21:40,640
extractors did you think of this do you

554
00:21:40,640 --> 00:21:43,360
happen to know

555
00:21:43,520 --> 00:21:45,360
it's a good question

556
00:21:45,360 --> 00:21:47,600
um

557
00:21:48,880 --> 00:21:52,320
yeah maybe i need to think more about it

558
00:21:52,320 --> 00:21:54,159
okay

559
00:21:54,159 --> 00:21:56,720
so but do you think that um

560
00:21:56,720 --> 00:21:58,720
then i the intuition for these

561
00:21:58,720 --> 00:22:01,120
distributions are that they have the the

562
00:22:01,120 --> 00:22:02,559
entropy and the

563
00:22:02,559 --> 00:22:04,559
the low order bits

564
00:22:04,559 --> 00:22:07,280
so if i just take those low order bits

565
00:22:07,280 --> 00:22:08,960
with that

566
00:22:08,960 --> 00:22:12,320
is that something like that makes sense

567
00:22:12,320 --> 00:22:15,039
at all or is it totally off because for

568
00:22:15,039 --> 00:22:17,280
example if it's just the so the example

569
00:22:17,280 --> 00:22:19,440
you give is the the the one that's

570
00:22:19,440 --> 00:22:21,520
uniform on the least significant bits

571
00:22:21,520 --> 00:22:23,840
that would be great to extract that way

572
00:22:23,840 --> 00:22:26,159
but i'm not sure for the gaussian or

573
00:22:26,159 --> 00:22:28,559
others

574
00:22:30,240 --> 00:22:32,640
uh yes so for the two modern

575
00:22:32,640 --> 00:22:35,280
distributions you are right uh the

576
00:22:35,280 --> 00:22:38,000
the most prominent feature is that lower

577
00:22:38,000 --> 00:22:40,480
order bits have high entropy

578
00:22:40,480 --> 00:22:42,880
so i guess your point is to

579
00:22:42,880 --> 00:22:44,720
just extract

580
00:22:44,720 --> 00:22:46,080
those those

581
00:22:46,080 --> 00:22:47,600
lower order parts

582
00:22:47,600 --> 00:22:49,440
and

583
00:22:49,440 --> 00:22:52,000
you want to

584
00:22:52,559 --> 00:22:54,960
compact them together to form a high

585
00:22:54,960 --> 00:22:57,360
entropy one is that your point

586
00:22:57,360 --> 00:22:58,960
yeah something like that i mean that

587
00:22:58,960 --> 00:22:59,840
would be

588
00:22:59,840 --> 00:23:01,919
the natural thing to do right start with

589
00:23:01,919 --> 00:23:04,880
the low order bits

590
00:23:05,280 --> 00:23:06,080
so

591
00:23:06,080 --> 00:23:07,280
i think it's

592
00:23:07,280 --> 00:23:08,640
um

593
00:23:08,640 --> 00:23:11,120
it's a bit good question but

594
00:23:11,120 --> 00:23:13,200
uh in our context

595
00:23:13,200 --> 00:23:14,880
uh

596
00:23:14,880 --> 00:23:17,039
um

597
00:23:17,039 --> 00:23:19,440
our

598
00:23:19,440 --> 00:23:22,480
uh our entropy accumulation process

599
00:23:22,480 --> 00:23:24,720
uh the key point of our entropy

600
00:23:24,720 --> 00:23:27,440
accumulation process does not know the

601
00:23:27,440 --> 00:23:28,960
exact number

602
00:23:28,960 --> 00:23:32,000
uh of the entropies of the source

603
00:23:32,000 --> 00:23:33,600
so we want to

604
00:23:33,600 --> 00:23:34,640
we want

605
00:23:34,640 --> 00:23:37,640
oh

606
00:23:40,640 --> 00:23:41,840
to be good

607
00:23:41,840 --> 00:23:44,320
for all possible k

608
00:23:44,320 --> 00:23:45,760
so

609
00:23:45,760 --> 00:23:48,080
so we have we so we developed the the

610
00:23:48,080 --> 00:23:50,480
theory of curry number and we hope it

611
00:23:50,480 --> 00:23:54,320
can solve this dilemma

612
00:23:54,320 --> 00:23:56,400
okay thanks

613
00:23:56,400 --> 00:23:58,880
thank you

614
00:24:00,240 --> 00:24:02,960
maybe i can add very quickly you know as

615
00:24:02,960 --> 00:24:05,600
she gave the right answer but uh our

616
00:24:05,600 --> 00:24:07,760
entrepreneurial result is surprisingly

617
00:24:07,760 --> 00:24:10,159
good so basically for the first couple

618
00:24:10,159 --> 00:24:11,840
of steps you really accumulate case

619
00:24:11,840 --> 00:24:13,039
steps and

620
00:24:13,039 --> 00:24:15,760
the extreme nothing i mean not much you

621
00:24:15,760 --> 00:24:17,520
know can be faster than cyclic rotation

622
00:24:17,520 --> 00:24:20,159
and sore so in this sense despite the

623
00:24:20,159 --> 00:24:21,919
not knowing k we really accumulate

624
00:24:21,919 --> 00:24:22,960
entropy

625
00:24:22,960 --> 00:24:25,039
very fast but you write that at the very

626
00:24:25,039 --> 00:24:26,799
end if you really want to extract as

627
00:24:26,799 --> 00:24:28,960
opposed to accumulate things start to

628
00:24:28,960 --> 00:24:31,120
get really slow at the last few things

629
00:24:31,120 --> 00:24:33,919
so for this thing probably something if

630
00:24:33,919 --> 00:24:35,279
you really want to extract kind of

631
00:24:35,279 --> 00:24:37,360
towards the end you should probably do

632
00:24:37,360 --> 00:24:39,679
something else but file application this

633
00:24:39,679 --> 00:24:41,520
is kind of not relevant because anyway

634
00:24:41,520 --> 00:24:43,039
extraction happens somewhere else since

635
00:24:43,039 --> 00:24:46,559
rng but it's a good suggestion

636
00:24:46,559 --> 00:24:48,159
okay

637
00:24:48,159 --> 00:24:52,559
thanks jay and also we have guinea

638
00:24:52,960 --> 00:24:56,520
any other questions

639
00:25:01,360 --> 00:25:04,480
so i asked my question on zul but um

640
00:25:04,480 --> 00:25:06,799
the uh this is for the mpc friendly

641
00:25:06,799 --> 00:25:10,240
symmetric cryptography paper uh

642
00:25:10,240 --> 00:25:12,320
uh is the oprf you construct post

643
00:25:12,320 --> 00:25:14,320
quantum secure

644
00:25:14,320 --> 00:25:18,559
uh so it should have possible postponed

645
00:25:19,120 --> 00:25:21,039
it's possibly awesome

646
00:25:21,039 --> 00:25:23,919
okay thank you

647
00:25:26,080 --> 00:25:27,919
so so much maybe you can say something

648
00:25:27,919 --> 00:25:29,120
about

649
00:25:29,120 --> 00:25:30,880
why

650
00:25:30,880 --> 00:25:32,559
it works that you

651
00:25:32,559 --> 00:25:33,520
in

652
00:25:33,520 --> 00:25:35,279
i mean your construction you output

653
00:25:35,279 --> 00:25:37,600
multiple bits the original one the

654
00:25:37,600 --> 00:25:41,279
bonnet one only outputs one bit right

655
00:25:41,279 --> 00:25:42,880
so can you say something about why this

656
00:25:42,880 --> 00:25:44,960
still works

657
00:25:44,960 --> 00:25:46,880
uh so i'm i'm not an expert on the

658
00:25:46,880 --> 00:25:49,520
krypton office so am i okay for that

659
00:25:49,520 --> 00:25:51,840
question

660
00:25:51,840 --> 00:25:54,080
but at least for the lpn weak perf

661
00:25:54,080 --> 00:25:57,039
there's this understanding that um

662
00:25:57,039 --> 00:25:58,320
the final

663
00:25:58,320 --> 00:26:00,799
z3 mapping sorry final z2 mapping using

664
00:26:00,799 --> 00:26:02,880
the public matrix kind of gets rid of

665
00:26:02,880 --> 00:26:03,679
our

666
00:26:03,679 --> 00:26:05,919
um initial expanding of the intermediate

667
00:26:05,919 --> 00:26:09,600
vector for the lpn uh we curve at least

668
00:26:09,600 --> 00:26:11,840
okay

669
00:26:14,000 --> 00:26:15,520
so another question i also wrote on

670
00:26:15,520 --> 00:26:17,120
zulip um

671
00:26:17,120 --> 00:26:19,760
for mahitma

672
00:26:19,760 --> 00:26:21,200
so did you look into the clear tax

673
00:26:21,200 --> 00:26:22,840
performance of your weak prf

674
00:26:22,840 --> 00:26:25,360
constructions um compared with say

675
00:26:25,360 --> 00:26:26,960
standard block cipher constructions or

676
00:26:26,960 --> 00:26:27,919
something

677
00:26:27,919 --> 00:26:30,400
so we didn't compare to like standard

678
00:26:30,400 --> 00:26:33,360
like aes or anything but we did have a

679
00:26:33,360 --> 00:26:35,120
centralized implementation just the

680
00:26:35,120 --> 00:26:36,799
clear text implementation of the weak

681
00:26:36,799 --> 00:26:39,600
prf and i think for a reasonable aws

682
00:26:39,600 --> 00:26:40,880
instance i was just pulling the numbers

683
00:26:40,880 --> 00:26:44,559
actually uh it's i think 165 000

684
00:26:44,559 --> 00:26:47,360
uh per second computations per second

685
00:26:47,360 --> 00:26:49,840
okay thanks

686
00:26:49,840 --> 00:26:52,400
so there's also a question for lisa

687
00:26:52,400 --> 00:26:54,559
um asking which attack techniques

688
00:26:54,559 --> 00:26:56,400
against your construction seem to be the

689
00:26:56,400 --> 00:26:58,159
best

690
00:26:58,159 --> 00:27:00,240
uh okay thanks for the question uh so

691
00:27:00,240 --> 00:27:03,520
for the first candidate it seems that

692
00:27:03,520 --> 00:27:05,600
lpn like

693
00:27:05,600 --> 00:27:08,559
attacks so well everything gaussian

694
00:27:08,559 --> 00:27:10,640
emulation

695
00:27:10,640 --> 00:27:12,880
bkw these kind of attacks that can all

696
00:27:12,880 --> 00:27:15,120
be cast as part of the linear attack

697
00:27:15,120 --> 00:27:17,039
framework are

698
00:27:17,039 --> 00:27:18,799
are the most are the most relevant

699
00:27:18,799 --> 00:27:21,600
attacks and there's even

700
00:27:21,600 --> 00:27:23,679
there's even it's even shown i mean this

701
00:27:23,679 --> 00:27:24,559
is

702
00:27:24,559 --> 00:27:26,480
below what what we actually achieve with

703
00:27:26,480 --> 00:27:29,039
our candidate but there's a probably but

704
00:27:29,039 --> 00:27:32,240
that it can't be more secure than square

705
00:27:32,240 --> 00:27:34,640
root of n in the input lengths for for x

706
00:27:34,640 --> 00:27:36,480
and f formulas

707
00:27:36,480 --> 00:27:37,279
um

708
00:27:37,279 --> 00:27:39,440
and the algebraic attack it's also very

709
00:27:39,440 --> 00:27:41,200
straightforward to show so we show it

710
00:27:41,200 --> 00:27:43,200
has high rational degree but that seems

711
00:27:43,200 --> 00:27:45,440
not uh

712
00:27:45,440 --> 00:27:47,039
the most relevant there and and for the

713
00:27:47,039 --> 00:27:48,640
second candidate

714
00:27:48,640 --> 00:27:50,960
before we started with the candidates

715
00:27:50,960 --> 00:27:52,640
like certainly the algebraic attacks

716
00:27:52,640 --> 00:27:54,080
because this was the attack that broke

717
00:27:54,080 --> 00:27:55,679
the previous candidate so that that was

718
00:27:55,679 --> 00:27:58,960
like the one to overcome and and now uh

719
00:27:58,960 --> 00:28:00,799
yeah we root like

720
00:28:00,799 --> 00:28:02,559
it could still

721
00:28:02,559 --> 00:28:06,720
be that that that it's close to it has

722
00:28:06,720 --> 00:28:09,679
close to high rational degree so it's uh

723
00:28:09,679 --> 00:28:11,760
but but but i

724
00:28:11,760 --> 00:28:14,240
i i would be very surprised about that

725
00:28:14,240 --> 00:28:17,279
so um so i it's it's hard to say which

726
00:28:17,279 --> 00:28:19,520
which kind of attacks now are almost

727
00:28:19,520 --> 00:28:22,159
promising and yeah also for the for the

728
00:28:22,159 --> 00:28:24,080
for the the linear attacks there you can

729
00:28:24,080 --> 00:28:26,640
say well we we didn't rule them out we

730
00:28:26,640 --> 00:28:28,960
just wrote them out on a conjecture but

731
00:28:28,960 --> 00:28:31,600
it's uh yeah that's that's that

732
00:28:31,600 --> 00:28:33,039
it's also

733
00:28:33,039 --> 00:28:35,039
it's hard to it's hard to say for me i

734
00:28:35,039 --> 00:28:36,720
would i would i would be surprised if

735
00:28:36,720 --> 00:28:39,200
it's if it's broken by by either linear

736
00:28:39,200 --> 00:28:40,480
attack or

737
00:28:40,480 --> 00:28:42,640
algebraic attack and in this point so

738
00:28:42,640 --> 00:28:44,960
maybe something completely new um or

739
00:28:44,960 --> 00:28:47,520
hopefully it's just uh yeah securing can

740
00:28:47,520 --> 00:28:50,720
we can have further evidence and

741
00:28:50,720 --> 00:28:53,840
in the candidate thank you

742
00:28:56,000 --> 00:28:58,240
so lisa i also wanted to ask you about

743
00:28:58,240 --> 00:29:01,679
um so your first construction the

744
00:29:01,679 --> 00:29:04,080
the weak prf and a

745
00:29:04,080 --> 00:29:06,720
ac 0 mod 2. can you say something about

746
00:29:06,720 --> 00:29:09,200
the degree like how low can the degree

747
00:29:09,200 --> 00:29:12,200
be

748
00:29:13,440 --> 00:29:15,679
in

749
00:29:16,399 --> 00:29:18,480
so

750
00:29:18,480 --> 00:29:21,600
so like how how how how large the from

751
00:29:21,600 --> 00:29:24,240
the input size or

752
00:29:24,240 --> 00:29:26,000
i mean the construction where you choose

753
00:29:26,000 --> 00:29:26,960
where you

754
00:29:26,960 --> 00:29:29,679
instead of negating the inputs the key

755
00:29:29,679 --> 00:29:33,039
now chooses an input right so there's

756
00:29:33,039 --> 00:29:35,520
there are terms there like dnf terms

757
00:29:35,520 --> 00:29:36,480
right

758
00:29:36,480 --> 00:29:37,679
and then yes

759
00:29:37,679 --> 00:29:40,320
so and that's what

760
00:29:40,320 --> 00:29:43,760
yeah so these have high quite uh quite

761
00:29:43,760 --> 00:29:46,000
high degree so you have to so so so

762
00:29:46,000 --> 00:29:47,840
first of all like we have to choose

763
00:29:47,840 --> 00:29:49,279
between

764
00:29:49,279 --> 00:29:52,240
uh the dnf go up to

765
00:29:52,240 --> 00:29:53,679
something in the order of the security

766
00:29:53,679 --> 00:29:56,000
parameters so that will be the degree of

767
00:29:56,000 --> 00:29:57,360
the function

768
00:29:57,360 --> 00:30:01,279
and is that because do you want quasi

769
00:30:02,000 --> 00:30:05,279
sub exponential financial yes yes and if

770
00:30:05,279 --> 00:30:07,360
you wanted only polynomial do you happen

771
00:30:07,360 --> 00:30:10,559
to know what the degree yes then you can

772
00:30:10,559 --> 00:30:13,520
can i just a second uh go back to the

773
00:30:13,520 --> 00:30:15,919
slide again

774
00:30:15,919 --> 00:30:19,600
um so so basically the the d here that

775
00:30:19,600 --> 00:30:21,200
you see that's also for the previous

776
00:30:21,200 --> 00:30:22,960
candidates you're not sharing did you

777
00:30:22,960 --> 00:30:24,320
mean to share

778
00:30:24,320 --> 00:30:26,480
yes just a second

779
00:30:26,480 --> 00:30:28,799
um

780
00:30:28,799 --> 00:30:29,679
um

781
00:30:29,679 --> 00:30:33,039
that what what you see here um d

782
00:30:33,039 --> 00:30:35,360
it's just this d and determines like how

783
00:30:35,360 --> 00:30:38,080
high the j gates goes so basically to

784
00:30:38,080 --> 00:30:39,679
get true to the

785
00:30:39,679 --> 00:30:41,600
security against true to the d samples

786
00:30:41,600 --> 00:30:43,279
you need uh

787
00:30:43,279 --> 00:30:46,880
you need i'll go up to d so if you

788
00:30:46,880 --> 00:30:49,919
so so if you have a quasipolynomial then

789
00:30:49,919 --> 00:30:51,679
this can be

790
00:30:51,679 --> 00:30:52,840
something like

791
00:30:52,840 --> 00:30:55,840
quasi-call it polyline

792
00:30:55,840 --> 00:30:58,000
yes

793
00:30:58,320 --> 00:31:00,639
okay

794
00:31:01,440 --> 00:31:05,080
any last questions

795
00:31:07,919 --> 00:31:09,679
so i think we'll end here

796
00:31:09,679 --> 00:31:11,279
and i'd like to thank all the speakers

797
00:31:11,279 --> 00:31:14,559
again really great talks um and we're

798
00:31:14,559 --> 00:31:16,960
starting a

