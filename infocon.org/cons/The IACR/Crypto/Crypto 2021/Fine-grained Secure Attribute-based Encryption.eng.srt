1
00:00:01,920 --> 00:00:04,720
hello everyone my name is yuyu wang i'm

2
00:00:04,720 --> 00:00:06,720
from uestc

3
00:00:06,720 --> 00:00:09,280
our title is fine grain secure

4
00:00:09,280 --> 00:00:11,840
attribute-based encryption let's join

5
00:00:11,840 --> 00:00:16,400
the work with judgement and return

6
00:00:16,400 --> 00:00:18,720
for cryptographic scheme we usually

7
00:00:18,720 --> 00:00:20,880
require that hanami safari can run the

8
00:00:20,880 --> 00:00:23,519
scheme in polynomial time and the scheme

9
00:00:23,519 --> 00:00:25,840
can be secure against polynomial time

10
00:00:25,840 --> 00:00:27,599
adversaries

11
00:00:27,599 --> 00:00:30,000
by now there have been a great deal of

12
00:00:30,000 --> 00:00:32,800
works constructing cryptographic schemes

13
00:00:32,800 --> 00:00:35,120
that are secure based on quality

14
00:00:35,120 --> 00:00:38,079
functions factoring discrete logarithm

15
00:00:38,079 --> 00:00:42,399
ddh lwe or even the existence of generic

16
00:00:42,399 --> 00:00:46,879
groups and outbreak groups

17
00:00:46,879 --> 00:00:48,879
however we do not know whether these

18
00:00:48,879 --> 00:00:51,440
assumptions hold so it's desirable to

19
00:00:51,440 --> 00:00:54,160
use no assumptions or mild complexity

20
00:00:54,160 --> 00:00:56,480
worst case assumptions so that we can

21
00:00:56,480 --> 00:00:59,440
still have cryptography even if for

22
00:00:59,440 --> 00:01:02,800
example one functions do not exist

23
00:01:02,800 --> 00:01:05,680
but in the long history of cryptography

24
00:01:05,680 --> 00:01:08,080
it has turned out that this is quite

25
00:01:08,080 --> 00:01:10,560
difficult

26
00:01:10,880 --> 00:01:13,119
fine fine-grained cryptography gives us

27
00:01:13,119 --> 00:01:16,000
a direction in approaching this problem

28
00:01:16,000 --> 00:01:18,159
instead of considering polynomial time

29
00:01:18,159 --> 00:01:21,040
on its parties and adversaries we only

30
00:01:21,040 --> 00:01:23,680
require that an owner's party uses less

31
00:01:23,680 --> 00:01:27,840
resources than adversaries

32
00:01:28,479 --> 00:01:31,439
and the resources of an anniversary such

33
00:01:31,439 --> 00:01:34,320
as the running time the memory and the

34
00:01:34,320 --> 00:01:35,840
circuit dips

35
00:01:35,840 --> 00:01:40,280
can be a prior bonding

36
00:01:40,560 --> 00:01:43,119
under this setting it's possible to make

37
00:01:43,119 --> 00:01:45,759
the underlying assumption extremely mild

38
00:01:45,759 --> 00:01:50,079
and make the scheme very efficient

39
00:01:50,320 --> 00:01:53,439
this field was initialized by marco and

40
00:01:53,439 --> 00:01:55,119
there have been many fine green

41
00:01:55,119 --> 00:01:58,640
primitives proposed such as key exchange

42
00:01:58,640 --> 00:02:01,680
one-way functions pke verifiable

43
00:02:01,680 --> 00:02:04,399
computation hospital systems and triple

44
00:02:04,399 --> 00:02:07,719
1 functions

45
00:02:08,800 --> 00:02:11,360
but notice that there are still many

46
00:02:11,360 --> 00:02:13,760
important penguin primitives that are

47
00:02:13,760 --> 00:02:18,560
not known to exist such as signature

48
00:02:19,440 --> 00:02:20,959
in this work

49
00:02:20,959 --> 00:02:23,440
we propose the first fine-grained secure

50
00:02:23,440 --> 00:02:25,920
ib scheme which is secure against

51
00:02:25,920 --> 00:02:30,399
adversaries with bondi circuit depth

52
00:02:30,480 --> 00:02:33,599
it borrows the bkp framework by blizzard

53
00:02:33,599 --> 00:02:36,480
and others which constructs ib from f5

54
00:02:36,480 --> 00:02:37,599
max

55
00:02:37,599 --> 00:02:40,480
and the chw framework by chang and

56
00:02:40,480 --> 00:02:41,360
others

57
00:02:41,360 --> 00:02:43,920
which constructs a b from predicated

58
00:02:43,920 --> 00:02:46,400
encodings

59
00:02:46,400 --> 00:02:48,879
we first propose a fingering version of

60
00:02:48,879 --> 00:02:51,440
the filemaking the bkp paper

61
00:02:51,440 --> 00:02:54,160
and generalize it by using parts of a

62
00:02:54,160 --> 00:02:56,000
predicate encoding

63
00:02:56,000 --> 00:02:58,720
and then we combine it with other parts

64
00:02:58,720 --> 00:03:01,519
of the encoding with some new techniques

65
00:03:01,519 --> 00:03:05,360
to construct a b schemes

66
00:03:05,360 --> 00:03:07,760
our construction essentially implements

67
00:03:07,760 --> 00:03:11,200
a dual system in the banking city

68
00:03:11,200 --> 00:03:14,239
the proof for the mac and the general

69
00:03:14,239 --> 00:03:17,360
construction of rab switch functional

70
00:03:17,360 --> 00:03:19,599
user secret keys and functional

71
00:03:19,599 --> 00:03:22,400
ciphertexts to semi-function once

72
00:03:22,400 --> 00:03:25,280
respectively

73
00:03:26,560 --> 00:03:28,959
similar to the work of chw by

74
00:03:28,959 --> 00:03:31,200
instantiating the underlying encoding in

75
00:03:31,200 --> 00:03:34,400
different ways we obtain an ibu scheme

76
00:03:34,400 --> 00:03:37,360
which in turn implies a signature scheme

77
00:03:37,360 --> 00:03:40,319
and abe schemes supporting various types

78
00:03:40,319 --> 00:03:42,400
of boolean predicates

79
00:03:42,400 --> 00:03:45,360
and also broadcast encryption and fuzzy

80
00:03:45,360 --> 00:03:49,599
ib in the fragrance setting

81
00:03:50,239 --> 00:03:52,799
all the instantiations are computable in

82
00:03:52,799 --> 00:03:56,319
ac02 and secure against adversaries in

83
00:03:56,319 --> 00:03:59,319
nc1

84
00:04:00,560 --> 00:04:02,720
the assumption is that

85
00:04:02,720 --> 00:04:06,879
nc1 is not equal to parity l slash body

86
00:04:06,879 --> 00:04:09,360
this assumption is widely believed to

87
00:04:09,360 --> 00:04:11,680
help

88
00:04:12,640 --> 00:04:15,120
also we know that all the computations

89
00:04:15,120 --> 00:04:18,239
are over gf2

90
00:04:18,720 --> 00:04:21,519
this setting is exactly the same as the

91
00:04:21,519 --> 00:04:23,440
boundary circuit setting in previous

92
00:04:23,440 --> 00:04:27,639
works on penguin cryptography

93
00:04:28,000 --> 00:04:31,199
here is easier to include circuits with

94
00:04:31,199 --> 00:04:32,639
constant depth

95
00:04:32,639 --> 00:04:36,880
polynomial size and unbounded fine using

96
00:04:36,880 --> 00:04:38,560
ends or

97
00:04:38,560 --> 00:04:39,520
not

98
00:04:39,520 --> 00:04:43,320
and priority gates

99
00:04:43,680 --> 00:04:46,080
and c1 includes circuits with

100
00:04:46,080 --> 00:04:48,720
logarithmic depth polynomial size and

101
00:04:48,720 --> 00:04:52,080
fine to gates note that nc1 includes

102
00:04:52,080 --> 00:04:54,720
ac02

103
00:04:54,720 --> 00:04:56,400
priority l poly

104
00:04:56,400 --> 00:04:59,199
include log space turing machines with

105
00:04:59,199 --> 00:05:02,400
priority acceptance

106
00:05:03,120 --> 00:05:06,080
we now recall the definition of apk

107
00:05:06,080 --> 00:05:08,800
which can be easily converted to abe by

108
00:05:08,800 --> 00:05:12,720
using a symmetric encryption

109
00:05:13,280 --> 00:05:16,160
an apkm consists of four algorithms the

110
00:05:16,160 --> 00:05:18,720
first one is jing which takes as input

111
00:05:18,720 --> 00:05:21,120
the security parameter in lambda and

112
00:05:21,120 --> 00:05:23,199
outputs a public key picking and the

113
00:05:23,199 --> 00:05:25,280
secret key sk

114
00:05:25,280 --> 00:05:27,840
the user key generation algorithm takes

115
00:05:27,840 --> 00:05:31,039
as input a secret key sk of value y and

116
00:05:31,039 --> 00:05:35,280
outputs a user secret key usky

117
00:05:35,280 --> 00:05:37,680
the encryption algorithm takes as input

118
00:05:37,680 --> 00:05:40,800
the public key of value x and outputs

119
00:05:40,800 --> 00:05:43,840
ciphertext and also a session key

120
00:05:43,840 --> 00:05:46,320
the decryption algorithm takes as input

121
00:05:46,320 --> 00:05:48,080
the user secret key

122
00:05:48,080 --> 00:05:51,520
value x and the ciphertext city and

123
00:05:51,520 --> 00:05:55,198
outputs the session key

124
00:05:56,639 --> 00:05:59,280
correctness holds if the session key k

125
00:05:59,280 --> 00:06:01,759
can be correctly recovered by deck which

126
00:06:01,759 --> 00:06:04,960
is the decryption algorithm if p x y is

127
00:06:04,960 --> 00:06:06,240
equal to one

128
00:06:06,240 --> 00:06:10,400
here p is the boolean predicate

129
00:06:11,759 --> 00:06:14,560
this is the security game the adversary

130
00:06:14,560 --> 00:06:17,039
takes us input the public key

131
00:06:17,039 --> 00:06:19,919
and makes many queries why to obtain

132
00:06:19,919 --> 00:06:22,720
user secret keys and also makes one

133
00:06:22,720 --> 00:06:25,680
query x to obtain the challenge

134
00:06:25,680 --> 00:06:28,479
ciphertext and also the corresponding

135
00:06:28,479 --> 00:06:31,758
session key in k-stock

136
00:06:32,160 --> 00:06:34,720
security holds if k star is

137
00:06:34,720 --> 00:06:37,840
indistinguishable from randomness when p

138
00:06:37,840 --> 00:06:43,599
x y is not equal to 1 for all queries y

139
00:06:44,960 --> 00:06:48,160
ib came is a special case of a became

140
00:06:48,160 --> 00:06:50,560
where the predicate is restricted to be

141
00:06:50,560 --> 00:06:52,560
the equality predicate

142
00:06:52,560 --> 00:06:57,199
and can be easily converted into ibe

143
00:06:57,759 --> 00:07:00,400
for simplicity in this presentation we

144
00:07:00,400 --> 00:07:03,120
only give the high level idea on how we

145
00:07:03,120 --> 00:07:06,479
construct an ibe

146
00:07:07,520 --> 00:07:10,319
our construction of fine-grained ib

147
00:07:10,319 --> 00:07:13,759
borrows the bkp framework recall that in

148
00:07:13,759 --> 00:07:16,880
this framework the ibe is constructed

149
00:07:16,880 --> 00:07:19,840
from an f5 mic which is secure under the

150
00:07:19,840 --> 00:07:22,560
mdd assumption

151
00:07:22,560 --> 00:07:24,960
the construction heavily relies on the

152
00:07:24,960 --> 00:07:27,520
asymmetric pairing and it's necessary to

153
00:07:27,520 --> 00:07:29,680
compute the inverse of matrix in the

154
00:07:29,680 --> 00:07:32,479
security proof

155
00:07:32,560 --> 00:07:35,599
however we have no pairing and mdd

156
00:07:35,599 --> 00:07:38,960
assumption and c1

157
00:07:38,960 --> 00:07:42,000
and we cannot compute the inverse of a

158
00:07:42,000 --> 00:07:46,160
matrix in the nc1 world

159
00:07:47,440 --> 00:07:49,840
we now need to find the counterpart of

160
00:07:49,840 --> 00:07:51,759
the mde assumption

161
00:07:51,759 --> 00:07:54,800
although the assumption that c1 is not

162
00:07:54,800 --> 00:07:57,919
equal to parity l poly does not directly

163
00:07:57,919 --> 00:08:01,039
give us to us to construct cryptographic

164
00:08:01,039 --> 00:08:02,879
schemes

165
00:08:02,879 --> 00:08:06,000
degree card and others showed that this

166
00:08:06,000 --> 00:08:07,479
assumption implies the

167
00:08:07,479 --> 00:08:09,199
indistinguishability of two

168
00:08:09,199 --> 00:08:12,400
distributions which are zero sum

169
00:08:12,400 --> 00:08:16,960
and one sample against nc1 adversaries

170
00:08:16,960 --> 00:08:18,160
here

171
00:08:18,160 --> 00:08:19,440
zero samp

172
00:08:19,440 --> 00:08:22,479
outputs rank deficient matrices

173
00:08:22,479 --> 00:08:27,840
and one sum outputs four rank matrices

174
00:08:29,120 --> 00:08:32,000
and orchestra and others showed that

175
00:08:32,000 --> 00:08:34,559
this implies a hard subset membership

176
00:08:34,559 --> 00:08:35,839
problem

177
00:08:35,839 --> 00:08:38,159
this problem says that it's hard to

178
00:08:38,159 --> 00:08:40,479
distinguish a vector sampled from some

179
00:08:40,479 --> 00:08:41,519
ps

180
00:08:41,519 --> 00:08:44,880
and the vector from sub node 4i and c1

181
00:08:44,880 --> 00:08:47,519
adversary

182
00:08:47,519 --> 00:08:51,440
let m2 top be the inputs of some ps and

183
00:08:51,440 --> 00:08:54,880
some node where m0 is from zero sample

184
00:08:54,880 --> 00:08:57,600
some ps samples vectors from the span of

185
00:08:57,600 --> 00:09:00,800
m0 top with some no samples vectors

186
00:09:00,800 --> 00:09:04,800
outside the span of m0 top

187
00:09:05,040 --> 00:09:08,000
next i will give the construction of our

188
00:09:08,000 --> 00:09:10,640
fm mac

189
00:09:10,640 --> 00:09:13,200
the construction of our fan mac is

190
00:09:13,200 --> 00:09:15,440
similar to the one in the bkp

191
00:09:15,440 --> 00:09:18,080
construction the secret key consists of

192
00:09:18,080 --> 00:09:21,279
a matrix b whose transposition b top was

193
00:09:21,279 --> 00:09:23,120
sampled from zero sample

194
00:09:23,120 --> 00:09:26,880
a sequence of random vectors x 0 to x n

195
00:09:26,880 --> 00:09:30,640
and run bit x prime

196
00:09:30,640 --> 00:09:33,360
the type consists of two parts

197
00:09:33,360 --> 00:09:35,200
t and u

198
00:09:35,200 --> 00:09:40,240
t is vector sampled from the span of b

199
00:09:41,600 --> 00:09:45,760
and u is computed by an equation of x i

200
00:09:45,760 --> 00:09:48,480
top t and x prime with coefficients

201
00:09:48,480 --> 00:09:50,800
derived from the message which is

202
00:09:50,800 --> 00:09:54,240
denoted by id here

203
00:09:55,360 --> 00:09:57,360
in the security game the anniversary

204
00:09:57,360 --> 00:09:59,839
queries messages and obtains the

205
00:09:59,839 --> 00:10:01,600
corresponding text

206
00:10:01,600 --> 00:10:02,880
at some point

207
00:10:02,880 --> 00:10:05,600
it makes a challenge query id star and

208
00:10:05,600 --> 00:10:10,079
obtains a token which consists of h0 and

209
00:10:10,079 --> 00:10:11,680
x prime

210
00:10:11,680 --> 00:10:14,320
x prime is part of the secret key and

211
00:10:14,320 --> 00:10:17,360
hu0 is also computed by an

212
00:10:17,360 --> 00:10:20,320
fine equation

213
00:10:21,760 --> 00:10:24,800
security holds if x prime is

214
00:10:24,800 --> 00:10:27,360
indistinguishable with the random bit

215
00:10:27,360 --> 00:10:30,240
when id star is not equal to all the

216
00:10:30,240 --> 00:10:33,720
queried messages

217
00:10:33,760 --> 00:10:36,480
the security proof follows from the fact

218
00:10:36,480 --> 00:10:38,880
that when switching the distribution of

219
00:10:38,880 --> 00:10:42,720
t from sun psb to signal b

220
00:10:42,720 --> 00:10:45,440
x prime is information theoretically

221
00:10:45,440 --> 00:10:49,519
hidden in you due to linear independence

222
00:10:49,519 --> 00:10:52,240
we omit the details here and please see

223
00:10:52,240 --> 00:10:55,839
our paper for more details

224
00:10:56,640 --> 00:10:59,440
next i will give the construction of our

225
00:10:59,440 --> 00:11:01,760
ib cam

226
00:11:01,760 --> 00:11:04,160
let's record two facts given by akasha

227
00:11:04,160 --> 00:11:07,279
on the other side first

228
00:11:08,320 --> 00:11:11,760
the m0 biomatrix sample from zero samp

229
00:11:11,760 --> 00:11:15,760
and m1 matrix sampled from one sum

230
00:11:15,760 --> 00:11:19,120
the distribution of m0 top plus n

231
00:11:19,120 --> 00:11:21,760
is identical to the distribution of m

232
00:11:21,760 --> 00:11:22,880
one top

233
00:11:22,880 --> 00:11:25,519
here in its matrix with the bottom left

234
00:11:25,519 --> 00:11:28,240
entry being one and the other entry is

235
00:11:28,240 --> 00:11:30,959
being 0.

236
00:11:31,200 --> 00:11:34,079
another fact is that the distributions

237
00:11:34,079 --> 00:11:39,600
of m0 top r0 and m0 top r1 identical

238
00:11:39,600 --> 00:11:42,320
where r0 is run vector with the first

239
00:11:42,320 --> 00:11:45,760
speed fixed at 0 and r1 is a random

240
00:11:45,760 --> 00:11:50,000
vector with the first bit fixed size 1.

241
00:11:50,079 --> 00:11:52,560
we now give the construction of our ib

242
00:11:52,560 --> 00:11:53,360
cam

243
00:11:53,360 --> 00:11:55,519
the key generation algorithm samples the

244
00:11:55,519 --> 00:11:58,079
transposition of a matrix a from zero

245
00:11:58,079 --> 00:12:02,719
sum and the secret key of our fm mac

246
00:12:03,120 --> 00:12:06,160
then it commits to the vectors x i by

247
00:12:06,160 --> 00:12:10,399
computing y i top x i times a

248
00:12:10,399 --> 00:12:13,360
it also commits to the run beat x prime

249
00:12:13,360 --> 00:12:16,959
in the secret key in the same way

250
00:12:18,079 --> 00:12:20,560
the public key consists of a and the

251
00:12:20,560 --> 00:12:22,320
commitments

252
00:12:22,320 --> 00:12:25,040
the secret key consists of a secret key

253
00:12:25,040 --> 00:12:27,600
of the underlying mac and the randomness

254
00:12:27,600 --> 00:12:30,480
y i and y prime used to commit to the

255
00:12:30,480 --> 00:12:32,880
values

256
00:12:33,839 --> 00:12:36,000
the user key generation algorithm

257
00:12:36,000 --> 00:12:39,279
generates a tag of the femac and compute

258
00:12:39,279 --> 00:12:42,720
scientific equation of y i t and y prime

259
00:12:42,720 --> 00:12:45,200
to generate vector v

260
00:12:45,200 --> 00:12:47,440
we can be treated as a proof that the

261
00:12:47,440 --> 00:12:51,440
tag was correctly computed

262
00:12:51,519 --> 00:12:54,160
the encryption algorithm for samples a

263
00:12:54,160 --> 00:12:56,959
random vector with the first b being 0

264
00:12:56,959 --> 00:13:00,079
and vectors c0 and c1

265
00:13:00,079 --> 00:13:04,160
c0 is a r and c 1 is computed by an

266
00:13:04,160 --> 00:13:07,519
official equation of z i r

267
00:13:07,519 --> 00:13:12,639
the session key k is equal to z prime r

268
00:13:12,800 --> 00:13:15,279
the decryption algorithm is designed

269
00:13:15,279 --> 00:13:18,079
similar to the bkp framework

270
00:13:18,079 --> 00:13:20,560
but notice that the pairing is not

271
00:13:20,560 --> 00:13:23,600
necessary now since the competitions are

272
00:13:23,600 --> 00:13:26,639
not in the groups

273
00:13:27,680 --> 00:13:30,480
the crucial step in the security game is

274
00:13:30,480 --> 00:13:32,639
to construct a reduction break in the

275
00:13:32,639 --> 00:13:36,800
security of the underlying of imac

276
00:13:36,800 --> 00:13:39,120
and at the core of the proof we

277
00:13:39,120 --> 00:13:41,680
developed a new technique to extract the

278
00:13:41,680 --> 00:13:44,079
forgery of the affair mic from the

279
00:13:44,079 --> 00:13:45,360
adversary

280
00:13:45,360 --> 00:13:47,760
what specifically we switch the

281
00:13:47,760 --> 00:13:50,720
distribution of the matrix a twice

282
00:13:50,720 --> 00:13:53,120
and change the distribution of the

283
00:13:53,120 --> 00:13:54,639
randomness r

284
00:13:54,639 --> 00:13:58,320
during the switching procedure

285
00:13:58,480 --> 00:14:00,720
we now give the sketch of our security

286
00:14:00,720 --> 00:14:03,600
proof by using several hybrid games

287
00:14:03,600 --> 00:14:06,000
game 0 is the original game where the

288
00:14:06,000 --> 00:14:08,160
adversary obtains the public key and

289
00:14:08,160 --> 00:14:10,160
makes id queries

290
00:14:10,160 --> 00:14:12,639
at some point it makes a challenge query

291
00:14:12,639 --> 00:14:15,199
id start to receive a cipher text

292
00:14:15,199 --> 00:14:18,959
consisting of c0 c1 and also the

293
00:14:18,959 --> 00:14:21,440
corresponding session key

294
00:14:21,440 --> 00:14:24,480
game y is the same as game 0 except that

295
00:14:24,480 --> 00:14:26,959
we additionally add a with the constant

296
00:14:26,959 --> 00:14:29,040
matrix and we mentioned before to

297
00:14:29,040 --> 00:14:33,519
generate c0 c1 and k

298
00:14:34,000 --> 00:14:36,480
one can check that when the first bit of

299
00:14:36,480 --> 00:14:40,079
r is zero and r is equal to zero

300
00:14:40,079 --> 00:14:42,399
so this does not change the view of the

301
00:14:42,399 --> 00:14:45,360
anniversary item

302
00:14:45,360 --> 00:14:47,199
in the next game we switch the

303
00:14:47,199 --> 00:14:51,040
distribution of a top to one sample

304
00:14:51,040 --> 00:14:52,959
this does not change the view of the

305
00:14:52,959 --> 00:14:54,360
adversary due to the

306
00:14:54,360 --> 00:14:56,880
indistinguishability between one samp

307
00:14:56,880 --> 00:15:00,240
and 0samp

308
00:15:00,480 --> 00:15:03,839
we now fix the first bit of r as 1

309
00:15:03,839 --> 00:15:06,959
instead of 0.

310
00:15:07,120 --> 00:15:09,839
notice that a plus n top is a matrix

311
00:15:09,839 --> 00:15:13,199
from 0sem now and the fact about zero

312
00:15:13,199 --> 00:15:15,680
sample we mentioned before shows that

313
00:15:15,680 --> 00:15:17,760
this change does not affect the

314
00:15:17,760 --> 00:15:22,000
distribution of a plus and r

315
00:15:22,240 --> 00:15:26,000
also notice that y zero top x 0 times

316
00:15:26,000 --> 00:15:30,240
and r is equal to x 0 and y prime top x

317
00:15:30,240 --> 00:15:33,120
prime times r is equal to x prime

318
00:15:33,120 --> 00:15:35,680
instead of a 0 matrix now

319
00:15:35,680 --> 00:15:38,959
this allows us to extract x 0 and x

320
00:15:38,959 --> 00:15:40,399
prime from

321
00:15:40,399 --> 00:15:44,000
c1 and k later

322
00:15:44,720 --> 00:15:47,839
next we switch the distribution of atop

323
00:15:47,839 --> 00:15:51,040
back to zero sum

324
00:15:51,199 --> 00:15:54,160
in game 5 which is the last game we do

325
00:15:54,160 --> 00:15:56,720
not use the randomness y i and the

326
00:15:56,720 --> 00:16:00,720
secret x i to generate z i anymore

327
00:16:00,720 --> 00:16:03,920
instead we generate z i as

328
00:16:03,920 --> 00:16:08,920
0 d i r 0 top

329
00:16:08,959 --> 00:16:13,759
d i is equal to y i top plus x i stop

330
00:16:13,759 --> 00:16:17,440
and it reveals new information on x i

331
00:16:17,440 --> 00:16:20,720
and r 0 and s are intermediate values

332
00:16:20,720 --> 00:16:23,279
used by zero sample and they are

333
00:16:23,279 --> 00:16:28,160
independent with y i and x i

334
00:16:28,880 --> 00:16:31,360
also we can redefine z prime in the same

335
00:16:31,360 --> 00:16:33,600
way

336
00:16:34,560 --> 00:16:37,600
now we can prove that v reviews no

337
00:16:37,600 --> 00:16:39,839
information on the secrets except for

338
00:16:39,839 --> 00:16:43,920
you which is a tag of the fmac

339
00:16:43,920 --> 00:16:46,560
also we can prove that c1 reviews no

340
00:16:46,560 --> 00:16:49,920
information on x i except for x0 plus

341
00:16:49,920 --> 00:16:52,800
the sum of idi xi

342
00:16:52,800 --> 00:16:55,680
this is exactly part of the token in the

343
00:16:55,680 --> 00:16:59,439
security game for the fm mac

344
00:17:00,000 --> 00:17:01,920
this allows us to make use of the

345
00:17:01,920 --> 00:17:05,520
security of a 5 mac to show that x prime

346
00:17:05,520 --> 00:17:08,079
which is another part of the token as

347
00:17:08,079 --> 00:17:10,640
indistinguishable from randomness which

348
00:17:10,640 --> 00:17:12,959
means that the session decay can be

349
00:17:12,959 --> 00:17:16,400
switched to randomness

350
00:17:16,640 --> 00:17:19,039
by doing the steps in the reverse order

351
00:17:19,039 --> 00:17:22,000
we can prove that k is indistinguishable

352
00:17:22,000 --> 00:17:24,720
from randomness in the original game

353
00:17:24,720 --> 00:17:28,160
which completes our proof

354
00:17:28,480 --> 00:17:31,760
also notice that in a security proof we

355
00:17:31,760 --> 00:17:34,320
did not compute the inverse of matrix

356
00:17:34,320 --> 00:17:37,679
and all the computation signs in c1

357
00:17:37,679 --> 00:17:41,919
otherwise the proof does not hold

358
00:17:43,039 --> 00:17:46,240
we also show that the red parts of rib

359
00:17:46,240 --> 00:17:48,559
came essentially use the encoding for

360
00:17:48,559 --> 00:17:51,120
equality and can be generalized as

361
00:17:51,120 --> 00:17:55,120
predicated encodings proposed by chw

362
00:17:55,120 --> 00:17:58,080
in this way we can generalize ri became

363
00:17:58,080 --> 00:18:00,160
eisen abk

364
00:18:00,160 --> 00:18:02,640
this extension can also be used in the

365
00:18:02,640 --> 00:18:05,679
standard world not only the vanguard

366
00:18:05,679 --> 00:18:08,000
world

367
00:18:08,640 --> 00:18:11,200
this is the conclusion of our work we

368
00:18:11,200 --> 00:18:13,520
proposed a general reconstruction of

369
00:18:13,520 --> 00:18:16,400
fine-grained ab scheme secure against c1

370
00:18:16,400 --> 00:18:20,320
adversaries and computable in ac02

371
00:18:20,320 --> 00:18:22,480
the assumption is a worst case

372
00:18:22,480 --> 00:18:27,440
complexity assumption which is very mild

373
00:18:27,440 --> 00:18:30,080
it has many types of instantiations

374
00:18:30,080 --> 00:18:32,400
including a fine-grained ib and the

375
00:18:32,400 --> 00:18:35,760
fine-grained signature scheme

376
00:18:36,559 --> 00:18:39,120
also we know that our techniques can

377
00:18:39,120 --> 00:18:41,600
also be used to construct an efficient

378
00:18:41,600 --> 00:18:43,600
fine-grained qnisk

379
00:18:43,600 --> 00:18:46,160
please see our paper for more details

380
00:18:46,160 --> 00:18:49,880
thank you for your attention

