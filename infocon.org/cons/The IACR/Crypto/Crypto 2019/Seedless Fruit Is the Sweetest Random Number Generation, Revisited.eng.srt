1
00:00:06,080 --> 00:00:12,929
so well without much ado let's just cut

2
00:00:09,900 --> 00:00:17,790
right to the chase so what is a PRN G

3
00:00:12,929 --> 00:00:20,730
and we all know PRNG is a big red button

4
00:00:17,790 --> 00:00:23,549
probably from staples so you press it

5
00:00:20,730 --> 00:00:25,740
once you get an output you do it again

6
00:00:23,550 --> 00:00:27,570
you get another output and a third time

7
00:00:25,740 --> 00:00:30,929
another output and so on so you get the

8
00:00:27,570 --> 00:00:33,210
idea but what is common among these

9
00:00:30,929 --> 00:00:37,019
outputs is that we want the output to be

10
00:00:33,210 --> 00:00:39,780
uniform independent and fresh but where

11
00:00:37,019 --> 00:00:42,120
does this randomness come from and when

12
00:00:39,780 --> 00:00:45,239
we look at it inside there's a big red

13
00:00:42,120 --> 00:00:48,209
button what we see is that B this PRNG

14
00:00:45,239 --> 00:00:49,739
is actually a PRNG with input and what

15
00:00:48,210 --> 00:00:52,019
are these inputs these are entropy

16
00:00:49,739 --> 00:00:54,360
sources typically these are interrupts

17
00:00:52,019 --> 00:00:57,269
but they can also be system measures

18
00:00:54,360 --> 00:00:59,729
such as temperature and timing but what

19
00:00:57,269 --> 00:01:02,760
is the properties of these entropy

20
00:00:59,729 --> 00:01:05,400
sources they are not uniform we are not

21
00:01:02,760 --> 00:01:08,729
independent they are not fresh they come

22
00:01:05,400 --> 00:01:10,770
gradually and they're adversarial so the

23
00:01:08,729 --> 00:01:12,390
goal of this talk is to present a way in

24
00:01:10,770 --> 00:01:14,700
which we can take these inputs with

25
00:01:12,390 --> 00:01:16,920
these properties to produce output with

26
00:01:14,700 --> 00:01:18,330
the desired characteristics but before

27
00:01:16,920 --> 00:01:20,550
we get caught in the details let's

28
00:01:18,330 --> 00:01:22,650
actually take a step back and look at

29
00:01:20,550 --> 00:01:24,929
the bigger picture cryptography has

30
00:01:22,650 --> 00:01:26,880
given us a lot of primitives that sort

31
00:01:24,930 --> 00:01:29,450
of introduced in the harder ad hoc

32
00:01:26,880 --> 00:01:33,089
fashion but over time they are matured

33
00:01:29,450 --> 00:01:35,190
but what is the state of the PRNG

34
00:01:33,090 --> 00:01:38,700
it's rather primitive as denoted by

35
00:01:35,190 --> 00:01:40,620
Gollum here but considering that the

36
00:01:38,700 --> 00:01:42,690
PRNG is sort of the bedrock of

37
00:01:40,620 --> 00:01:45,870
cryptography we need randomness to

38
00:01:42,690 --> 00:01:49,950
generate keys and so it's irrefutable

39
00:01:45,870 --> 00:01:52,770
that PR energies are rather crucial so

40
00:01:49,950 --> 00:01:56,270
the goal of this talk would be to put

41
00:01:52,770 --> 00:01:58,560
into the next step which is this but

42
00:01:56,270 --> 00:02:01,259
when you actually take a step back and

43
00:01:58,560 --> 00:02:03,360
look at our PR energies they should be

44
00:02:01,260 --> 00:02:06,060
the easiest to deal with because there's

45
00:02:03,360 --> 00:02:08,399
not multiple algorithms there there's no

46
00:02:06,060 --> 00:02:10,560
correctness there's no consistency so

47
00:02:08,399 --> 00:02:12,750
hopefully this with our help we will

48
00:02:10,560 --> 00:02:17,880
actually be able to take it next step

49
00:02:12,750 --> 00:02:18,840
and unlock the full potential of PRNG so

50
00:02:17,880 --> 00:02:21,650
this is the tribute

51
00:02:18,840 --> 00:02:24,959
the Lord of the Rings fans out here so

52
00:02:21,650 --> 00:02:29,220
but what about PRNG standardization in

53
00:02:24,959 --> 00:02:31,560
particular I don't have time but there's

54
00:02:29,220 --> 00:02:34,560
a lot of work but it is rather hard

55
00:02:31,560 --> 00:02:39,060
Hawken fashioned and rather immature so

56
00:02:34,560 --> 00:02:44,489
the TLDR version is if this works

57
00:02:39,060 --> 00:02:46,709
is this so but clearly operating systems

58
00:02:44,489 --> 00:02:49,099
have PR energies we know them we use

59
00:02:46,709 --> 00:02:54,860
them so what about those in particular

60
00:02:49,099 --> 00:02:54,859
so that brings us to this slide if

61
00:02:55,010 --> 00:03:03,030
transitions okay that is rather

62
00:03:00,420 --> 00:03:05,399
underwhelming but the Prada fact remains

63
00:03:03,030 --> 00:03:07,830
that these PR energies was not built

64
00:03:05,400 --> 00:03:10,230
according to any standard and but the

65
00:03:07,830 --> 00:03:11,970
good ones seemed to use cryptographic

66
00:03:10,230 --> 00:03:15,750
hash functions we will be revisiting

67
00:03:11,970 --> 00:03:23,840
this idea and greater detail but the

68
00:03:15,750 --> 00:03:27,299
once again the TLDR summary is that this

69
00:03:23,840 --> 00:03:29,670
this remote is meant to just tell my

70
00:03:27,299 --> 00:03:34,709
jokes but guess it works but we are not

71
00:03:29,670 --> 00:03:35,488
entirely sure why so this is the state

72
00:03:34,709 --> 00:03:38,819
of PRNG

73
00:03:35,489 --> 00:03:46,260
in practice so let's look a look at PRNG

74
00:03:38,819 --> 00:03:48,089
theory so well that conducted my joke

75
00:03:46,260 --> 00:03:52,980
but anyway the product the story is that

76
00:03:48,090 --> 00:03:54,870
PRNG theory is largely divorced from

77
00:03:52,980 --> 00:03:56,940
practice there are existing theory but

78
00:03:54,870 --> 00:03:59,190
they don't exactly analyze models in

79
00:03:56,940 --> 00:04:03,090
practice so the goal of this talk would

80
00:03:59,190 --> 00:04:05,850
actually be to propose this movement

81
00:04:03,090 --> 00:04:07,230
towards looking at these constructions

82
00:04:05,850 --> 00:04:10,470
for in practice from a theoretical

83
00:04:07,230 --> 00:04:14,760
vantage point more formally our focus is

84
00:04:10,470 --> 00:04:17,039
why do exist in our Angie's work okay so

85
00:04:14,760 --> 00:04:19,798
we meandered off so let's go back to

86
00:04:17,039 --> 00:04:22,580
where we started which is a PRNG with

87
00:04:19,798 --> 00:04:26,700
input now let's take a simpler case of

88
00:04:22,580 --> 00:04:28,710
one output and raddion

89
00:04:26,700 --> 00:04:30,450
and by the entropy comes all at once

90
00:04:28,710 --> 00:04:33,120
this is the case of a monolithic

91
00:04:30,450 --> 00:04:35,460
extractor this is a simpler

92
00:04:33,120 --> 00:04:38,099
this is a simpler beast to tame so with

93
00:04:35,460 --> 00:04:40,859
this setting let's move on and look at

94
00:04:38,099 --> 00:04:42,330
replacing these berries pictures with

95
00:04:40,860 --> 00:04:45,900
variables because that's what

96
00:04:42,330 --> 00:04:47,818
mathematicians - so we look at X and we

97
00:04:45,900 --> 00:04:50,849
prefer apply deterministic function

98
00:04:47,819 --> 00:04:53,279
which is why to produce the output Y and

99
00:04:50,849 --> 00:04:57,419
the goal of the adversary is to

100
00:04:53,279 --> 00:05:01,370
distinguish Y from random so what are

101
00:04:57,419 --> 00:05:01,370
the assumptions that we can make about X

102
00:05:05,270 --> 00:05:11,308
so yes thank you

103
00:05:08,089 --> 00:05:12,719
that might mean gas so but this holiest

104
00:05:11,309 --> 00:05:15,089
grail would be to make the simplest

105
00:05:12,719 --> 00:05:16,949
assumption which would be to say X has

106
00:05:15,089 --> 00:05:19,499
mean entropy gamma but does it

107
00:05:16,949 --> 00:05:21,749
necessarily translate to extractor of

108
00:05:19,499 --> 00:05:24,469
the output of an extract function on X

109
00:05:21,749 --> 00:05:27,749
being indistinguishable from random

110
00:05:24,469 --> 00:05:29,219
unfortunately no because even if you

111
00:05:27,749 --> 00:05:31,469
assume that the extractor function just

112
00:05:29,219 --> 00:05:33,210
produces one bit of output we can still

113
00:05:31,469 --> 00:05:36,449
sample X in such a way that it almost

114
00:05:33,210 --> 00:05:39,688
has full entropy but the output as such

115
00:05:36,449 --> 00:05:43,229
is always zero so this set up a lot of

116
00:05:39,689 --> 00:05:45,810
work and a lot of work arounds was

117
00:05:43,229 --> 00:05:48,180
proposed around this impossibility

118
00:05:45,810 --> 00:05:50,310
result the first such was to limit the

119
00:05:48,180 --> 00:05:53,459
class of sources but once again these

120
00:05:50,310 --> 00:05:57,240
did not deal with real practical sources

121
00:05:53,459 --> 00:05:59,370
so and the other solution was to weaken

122
00:05:57,240 --> 00:06:01,889
the security well as cryptographers he

123
00:05:59,370 --> 00:06:04,199
would rather not weaken security so this

124
00:06:01,889 --> 00:06:05,999
inspired a whole bunch of research which

125
00:06:04,199 --> 00:06:08,639
became the preferred solution became to

126
00:06:05,999 --> 00:06:11,219
use a seat where the extract function in

127
00:06:08,639 --> 00:06:14,999
addition to taking input X also uses the

128
00:06:11,219 --> 00:06:16,830
seed s but where does this seed come

129
00:06:14,999 --> 00:06:18,419
from so it becomes a chicken-and-egg

130
00:06:16,830 --> 00:06:21,839
problem because sometimes you need to

131
00:06:18,419 --> 00:06:24,270
use randomness to generate the seed and

132
00:06:21,839 --> 00:06:26,879
in order to generate randomness from the

133
00:06:24,270 --> 00:06:29,308
seeds so which comes first which whether

134
00:06:26,879 --> 00:06:33,629
the chicken or the egg but perhaps most

135
00:06:29,309 --> 00:06:35,129
importantly the souls needs to be

136
00:06:33,629 --> 00:06:37,020
independent of the seed we're just

137
00:06:35,129 --> 00:06:39,389
unrealistic for PR energies the reason

138
00:06:37,020 --> 00:06:40,948
is simple because you're running a PRNG

139
00:06:39,389 --> 00:06:42,930
would see it it's going to trigger a

140
00:06:40,949 --> 00:06:45,000
whole bunch of system interrupts which

141
00:06:42,930 --> 00:06:46,590
would invariably end up becoming an

142
00:06:45,000 --> 00:06:49,410
entropy source so it

143
00:06:46,590 --> 00:06:50,729
a loop again and the best-known

144
00:06:49,410 --> 00:06:52,500
extractors tend to be

145
00:06:50,730 --> 00:06:55,020
information-theoretic extractors which

146
00:06:52,500 --> 00:06:57,120
catastrophic aliy fail if sources not

147
00:06:55,020 --> 00:06:59,789
see it independent so clearly this is

148
00:06:57,120 --> 00:07:02,700
not very attractive for practitioners

149
00:06:59,790 --> 00:07:05,430
but we as we discussed earlier we have

150
00:07:02,700 --> 00:07:08,389
that cryptography hash functions for use

151
00:07:05,430 --> 00:07:11,270
so the large part of a paper deals with

152
00:07:08,389 --> 00:07:14,639
looking at these RDS in practice but

153
00:07:11,270 --> 00:07:16,039
analyzing in idealized models so let's

154
00:07:14,639 --> 00:07:20,220
go back

155
00:07:16,040 --> 00:07:24,810
or rather forward if it moves any

156
00:07:20,220 --> 00:07:26,370
minutes now yes so we look at monolithic

157
00:07:24,810 --> 00:07:28,620
extraction from the but from the random

158
00:07:26,370 --> 00:07:29,790
Oracle plus from the random Oracle

159
00:07:28,620 --> 00:07:33,000
setting because we are looking at things

160
00:07:29,790 --> 00:07:34,470
in that idealized world more formally we

161
00:07:33,000 --> 00:07:36,840
look at our random Oracle model

162
00:07:34,470 --> 00:07:39,960
extraction from Oracle independent

163
00:07:36,840 --> 00:07:42,090
sources here we have X which is a an

164
00:07:39,960 --> 00:07:44,250
arbitrary distribution the goal of the

165
00:07:42,090 --> 00:07:47,010
adversary is the construction is simple

166
00:07:44,250 --> 00:07:50,370
we apply a model attic random Oracle G

167
00:07:47,010 --> 00:07:55,469
on the input X now the adversity is

168
00:07:50,370 --> 00:07:57,450
allowed to query the Oracle G so clearly

169
00:07:55,470 --> 00:07:59,100
we have the proof which is the folklore

170
00:07:57,450 --> 00:08:01,140
proved it says that unless the attacker

171
00:07:59,100 --> 00:08:03,210
actually in sub query X in one of the

172
00:08:01,140 --> 00:08:04,979
queue queries it makes the output is

173
00:08:03,210 --> 00:08:06,900
perfectly random so this gets us the

174
00:08:04,979 --> 00:08:10,349
bound Q times 2 to the negative gamma

175
00:08:06,900 --> 00:08:12,719
but what is the caveat the caveat is

176
00:08:10,350 --> 00:08:14,820
that from a practical standpoint this is

177
00:08:12,720 --> 00:08:17,070
unrealistic and from a theoretical

178
00:08:14,820 --> 00:08:19,530
standpoint we have an exponential seed

179
00:08:17,070 --> 00:08:21,090
which is an overkill so the next logical

180
00:08:19,530 --> 00:08:23,880
step would be to look at Oracle

181
00:08:21,090 --> 00:08:26,789
dependent sources where the idea is to

182
00:08:23,880 --> 00:08:30,750
let the attacker choose with Oracle axis

183
00:08:26,789 --> 00:08:33,419
a high entropy input so the setting is

184
00:08:30,750 --> 00:08:35,789
as before it makes q queries it provides

185
00:08:33,419 --> 00:08:39,958
the X and the Challenger response with G

186
00:08:35,789 --> 00:08:41,338
of X or you so what about the earlier

187
00:08:39,958 --> 00:08:44,400
assumption that we made where and we

188
00:08:41,339 --> 00:08:46,950
said XS mean entropy gamma at least will

189
00:08:44,400 --> 00:08:49,650
that still work unfortunately what this

190
00:08:46,950 --> 00:08:52,200
means is that for the outside world XS

191
00:08:49,650 --> 00:08:55,020
gamma bits of entropy does not translate

192
00:08:52,200 --> 00:08:58,020
to X actually not knowing X sorry the

193
00:08:55,020 --> 00:08:59,819
adversary not knowing X more formally

194
00:08:58,020 --> 00:09:02,069
the problem is that the attacker has to

195
00:08:59,820 --> 00:09:04,410
get something so how do we capture it

196
00:09:02,070 --> 00:09:06,900
the condition would now be wood now we

197
00:09:04,410 --> 00:09:10,199
can condition it on the state of the

198
00:09:06,900 --> 00:09:13,920
adversary just after it provides X which

199
00:09:10,200 --> 00:09:15,450
gets us here but well this everything is

200
00:09:13,920 --> 00:09:17,430
skipping ahead but the problem here

201
00:09:15,450 --> 00:09:19,320
would be that we can use the random

202
00:09:17,430 --> 00:09:20,609
Oracle as a source of entropy what it

203
00:09:19,320 --> 00:09:24,450
means is that the attacker merely

204
00:09:20,610 --> 00:09:27,480
provides X as G of 0 so the state is no

205
00:09:24,450 --> 00:09:30,900
but clearly this is not a fix that we

206
00:09:27,480 --> 00:09:33,270
are happy with so the next step we can

207
00:09:30,900 --> 00:09:38,480
look at conditioning it in addition to

208
00:09:33,270 --> 00:09:41,010
Sigma on G now does it work

209
00:09:38,480 --> 00:09:42,420
unfortunately no because we come up B

210
00:09:41,010 --> 00:09:44,910
come up with a bigger problem which is

211
00:09:42,420 --> 00:09:46,650
the extractor fixing attack so in the

212
00:09:44,910 --> 00:09:50,550
next slide we look at this attack in a

213
00:09:46,650 --> 00:09:53,699
larger detail so so the setting is as

214
00:09:50,550 --> 00:09:55,410
before but this is the attack the

215
00:09:53,700 --> 00:09:59,400
attacker chooses X uniformly at random

216
00:09:55,410 --> 00:10:03,540
it queries Y is G of X and it checks to

217
00:09:59,400 --> 00:10:06,090
see if Y begins with 0 if not it chooses

218
00:10:03,540 --> 00:10:10,410
X prime uniformly at random

219
00:10:06,090 --> 00:10:13,140
thus querying or to get Y Prime and then

220
00:10:10,410 --> 00:10:15,900
its checks to see if Y prime is 0 now at

221
00:10:13,140 --> 00:10:18,960
this point it outputs if it begins with

222
00:10:15,900 --> 00:10:22,140
0 it outputs x prime as its guess and it

223
00:10:18,960 --> 00:10:23,520
empties the state ok now let's look at

224
00:10:22,140 --> 00:10:26,880
the conditioning that we had default

225
00:10:23,520 --> 00:10:29,579
which is that now X prime condition on

226
00:10:26,880 --> 00:10:32,340
Sigma which is empty and G it still has

227
00:10:29,580 --> 00:10:34,050
entropy so clearly this is not a good

228
00:10:32,340 --> 00:10:38,910
attack because assets the output as

229
00:10:34,050 --> 00:10:44,880
minimum entropy so that brings us to the

230
00:10:38,910 --> 00:10:47,040
big question can we capture the belief

231
00:10:44,880 --> 00:10:49,140
that a cryptographic hash function for

232
00:10:47,040 --> 00:10:51,839
example a shot or a shot 3 it's a very

233
00:10:49,140 --> 00:10:53,780
good extractor without seed and despite

234
00:10:51,840 --> 00:10:56,580
the extractor fixing attack which we did

235
00:10:53,780 --> 00:10:59,069
so let's go back and take a look at the

236
00:10:56,580 --> 00:11:01,140
greater detail in particular let's focus

237
00:10:59,070 --> 00:11:03,950
on the queries that the adversary makes

238
00:11:01,140 --> 00:11:09,360
so it makes the following set of queries

239
00:11:03,950 --> 00:11:12,880
so now let's look at conditioning on X

240
00:11:09,360 --> 00:11:16,330
Prime with the set of queries L so

241
00:11:12,880 --> 00:11:17,530
what is so this if you have slept or if

242
00:11:16,330 --> 00:11:19,210
you have knotted work enough from the

243
00:11:17,530 --> 00:11:21,459
coffee this is the biggest takeaway

244
00:11:19,210 --> 00:11:25,660
so we conditioned on the set of queries

245
00:11:21,460 --> 00:11:28,390
l in addition to Sigma and once we

246
00:11:25,660 --> 00:11:30,280
conditioned L we can actually lose G so

247
00:11:28,390 --> 00:11:33,010
L is the random variable denoting the

248
00:11:30,280 --> 00:11:37,630
set of G queries up to when it outputs X

249
00:11:33,010 --> 00:11:41,460
and now even if it clears the entire

250
00:11:37,630 --> 00:11:44,140
state does it satisfy the condition

251
00:11:41,460 --> 00:11:46,180
actually it doesn't so the attacker does

252
00:11:44,140 --> 00:11:48,400
not work so voila we actually came up

253
00:11:46,180 --> 00:11:52,000
with something or did B so that brings

254
00:11:48,400 --> 00:11:53,140
us to and we well under I kind of cut my

255
00:11:52,000 --> 00:11:55,180
message we actually came up with

256
00:11:53,140 --> 00:11:56,949
something that was fascinating because

257
00:11:55,180 --> 00:12:00,130
what does it mean to condition from

258
00:11:56,950 --> 00:12:01,690
queries the intromission here is the

259
00:12:00,130 --> 00:12:04,450
entropy does not come from queries to

260
00:12:01,690 --> 00:12:06,190
Oracle but and we force entropy even if

261
00:12:04,450 --> 00:12:08,470
the attacker does not forget the queries

262
00:12:06,190 --> 00:12:11,470
and it seems to realistically model

263
00:12:08,470 --> 00:12:12,910
existing entropy sources for example

264
00:12:11,470 --> 00:12:15,430
let's consider timing of interrupts

265
00:12:12,910 --> 00:12:17,199
clearly as we discussed before it can

266
00:12:15,430 --> 00:12:20,380
and does depend on the hash functions

267
00:12:17,200 --> 00:12:22,600
even in a non adversarial manner but if

268
00:12:20,380 --> 00:12:23,950
this is the high high lot of timing and

269
00:12:22,600 --> 00:12:25,900
for might be easy to predict but as it's

270
00:12:23,950 --> 00:12:27,790
a low order sila pious entropic because

271
00:12:25,900 --> 00:12:30,569
the timing of the system is independent

272
00:12:27,790 --> 00:12:33,250
of the running of the hash function so

273
00:12:30,570 --> 00:12:35,050
what the end of it is a larger pool of

274
00:12:33,250 --> 00:12:37,120
sources in addition to the standard

275
00:12:35,050 --> 00:12:39,400
model mean entropy sources but we

276
00:12:37,120 --> 00:12:42,130
actually now have many Oracle dependent

277
00:12:39,400 --> 00:12:44,350
sources as well so the biggest takeaway

278
00:12:42,130 --> 00:12:46,480
that we did was we conditioned on the

279
00:12:44,350 --> 00:12:50,800
set of queries that the adversary makes

280
00:12:46,480 --> 00:12:52,750
to the random Oracle now what do we get

281
00:12:50,800 --> 00:12:55,150
using this principle in terms of a

282
00:12:52,750 --> 00:12:57,070
theorem for monolithic extraction we

283
00:12:55,150 --> 00:12:59,380
actually get that G of X is secure

284
00:12:57,070 --> 00:13:01,570
extractor with error Q times 2 to the

285
00:12:59,380 --> 00:13:04,570
negative gamma now for those of you who

286
00:13:01,570 --> 00:13:06,520
remember this is the same bound as for

287
00:13:04,570 --> 00:13:08,260
the auto independent setting but we have

288
00:13:06,520 --> 00:13:11,140
just shown it for a larger pool of

289
00:13:08,260 --> 00:13:14,140
sources and the proof follows in a

290
00:13:11,140 --> 00:13:15,520
similar intuition as before where we

291
00:13:14,140 --> 00:13:21,939
cannot guess G of X with high

292
00:13:15,520 --> 00:13:23,589
probability so are we done so what what

293
00:13:21,940 --> 00:13:26,620
are the implications when instantiating

294
00:13:23,589 --> 00:13:28,600
G so when we look at

295
00:13:26,620 --> 00:13:31,450
after that we get it's a rich class of

296
00:13:28,600 --> 00:13:33,310
sources including those coming from real

297
00:13:31,450 --> 00:13:34,870
entropy sources but as we discussed ins

298
00:13:33,310 --> 00:13:37,479
we're dealing with it in an idealized

299
00:13:34,870 --> 00:13:41,110
setting it's a yard for these it tends

300
00:13:37,480 --> 00:13:43,600
to be heuristic so let's go back and

301
00:13:41,110 --> 00:13:45,820
look at online extraction what is online

302
00:13:43,600 --> 00:13:48,820
extraction it is when the inputs

303
00:13:45,820 --> 00:13:52,600
actually come in multiple blocks okay

304
00:13:48,820 --> 00:13:55,330
so Bad's denoted by x1 through Excel and

305
00:13:52,600 --> 00:13:58,240
now we want to produce an output so the

306
00:13:55,330 --> 00:14:03,250
solution this so this primitive uses a

307
00:13:58,240 --> 00:14:06,040
state s so it it absorbs the input using

308
00:14:03,250 --> 00:14:09,130
a for afresh function and it produces an

309
00:14:06,040 --> 00:14:10,719
output Y finalized of X so there are two

310
00:14:09,130 --> 00:14:13,420
functions you had refresh and finalize

311
00:14:10,720 --> 00:14:16,990
and so in what is essentially happening

312
00:14:13,420 --> 00:14:18,849
is that it iteratively absorbs the input

313
00:14:16,990 --> 00:14:21,520
and then it finally produces output by

314
00:14:18,850 --> 00:14:23,530
calling the function finalize note that

315
00:14:21,520 --> 00:14:25,560
this is a fine-grained syntax but the

316
00:14:23,530 --> 00:14:28,000
security definition is still the same

317
00:14:25,560 --> 00:14:28,689
and replacing it with a more proba

318
00:14:28,000 --> 00:14:30,760
pseudocode

319
00:14:28,690 --> 00:14:33,370
as I mentioned it's do it iteratively

320
00:14:30,760 --> 00:14:36,520
absorbs and reduces the output so we not

321
00:14:33,370 --> 00:14:37,960
propose practical constructions the

322
00:14:36,520 --> 00:14:40,840
first thing we have a merkle-damgard

323
00:14:37,960 --> 00:14:42,550
with iran I'm compressing function f the

324
00:14:40,840 --> 00:14:44,890
refresh function basically takes as

325
00:14:42,550 --> 00:14:47,530
input the previous state and the current

326
00:14:44,890 --> 00:14:50,140
input and it produces the new state the

327
00:14:47,530 --> 00:14:53,230
finalized function just outputs the

328
00:14:50,140 --> 00:14:55,210
state okay we propose another

329
00:14:53,230 --> 00:14:56,920
construction this a variant of this was

330
00:14:55,210 --> 00:14:59,350
proven secure but in the auto

331
00:14:56,920 --> 00:15:02,020
independent setting by the work of Doris

332
00:14:59,350 --> 00:15:04,140
and others in 2004 the second

333
00:15:02,020 --> 00:15:07,090
construction we have is to instantiate

334
00:15:04,140 --> 00:15:10,689
the random compressing function but with

335
00:15:07,090 --> 00:15:12,460
an ideal cipher instead okay this is the

336
00:15:10,690 --> 00:15:14,590
basis by the ideal cipher this is the

337
00:15:12,460 --> 00:15:17,350
Davis Maya style construction that is

338
00:15:14,590 --> 00:15:18,640
used in shot to remember that we were

339
00:15:17,350 --> 00:15:21,880
discussing shot of shot three and

340
00:15:18,640 --> 00:15:23,410
looking at using them so the Refresh

341
00:15:21,880 --> 00:15:27,370
function is as follows finalized

342
00:15:23,410 --> 00:15:30,420
Galliard puts the same state then we

343
00:15:27,370 --> 00:15:32,650
come this punch where it's a different

344
00:15:30,420 --> 00:15:34,900
it's sort of different because it's a

345
00:15:32,650 --> 00:15:37,720
completely different read where the

346
00:15:34,900 --> 00:15:39,670
Refresh function basically exhausts the

347
00:15:37,720 --> 00:15:40,390
input to only the first half of the

348
00:15:39,670 --> 00:15:42,939
state of

349
00:15:40,390 --> 00:15:45,550
part of the state and then finalized

350
00:15:42,940 --> 00:15:47,890
just outputs the first hour bits of the

351
00:15:45,550 --> 00:15:49,510
state the reason is simple because if it

352
00:15:47,890 --> 00:15:51,699
outputs the entire state because we are

353
00:15:49,510 --> 00:15:54,640
using a random permutation by I can

354
00:15:51,700 --> 00:15:56,500
invert the query so this is the third

355
00:15:54,640 --> 00:15:58,300
construction and so and we can take

356
00:15:56,500 --> 00:16:01,180
sponge to an extreme form which is

357
00:15:58,300 --> 00:16:03,609
called this TBC construction oh and I'm

358
00:16:01,180 --> 00:16:06,040
sorry a version of it was proved secure

359
00:16:03,610 --> 00:16:08,740
in the seed at setting by Gaussian to

360
00:16:06,040 --> 00:16:11,380
sorrow in 2016 I'm sorry I just skipped

361
00:16:08,740 --> 00:16:15,430
across but so let's look at CBC in

362
00:16:11,380 --> 00:16:18,790
particular so we have this so here the

363
00:16:15,430 --> 00:16:22,779
entire state as exhort with the input so

364
00:16:18,790 --> 00:16:27,060
this is the refresh function and it is

365
00:16:22,779 --> 00:16:31,360
used in the CTR construction in SB 898

366
00:16:27,060 --> 00:16:33,369
it is used by Intel RNG it's proven

367
00:16:31,360 --> 00:16:36,220
secure in the Oracle independent setting

368
00:16:33,370 --> 00:16:38,440
by Donuts and others so the question we

369
00:16:36,220 --> 00:16:42,149
have here is is it secure in the Oracle

370
00:16:38,440 --> 00:16:44,769
dependence setting we might be sort of

371
00:16:42,149 --> 00:16:46,180
naive to think it would be case true but

372
00:16:44,769 --> 00:16:49,660
we actually show an attack and it's a

373
00:16:46,180 --> 00:16:52,209
beautiful attack wherein we say at each

374
00:16:49,660 --> 00:16:56,079
step of the process we provide exactly

375
00:16:52,209 --> 00:16:57,518
one bit of entropy so note that so we

376
00:16:56,079 --> 00:16:59,349
taught the first step the adversary

377
00:16:57,519 --> 00:17:02,320
tosses a coin and chooses between 0 and

378
00:16:59,350 --> 00:17:05,079
1 the output after the first PI call is

379
00:17:02,320 --> 00:17:08,049
PI of 0 or PI of 1 then for the second

380
00:17:05,079 --> 00:17:10,750
input it chooses between 0 and PI of 0 x

381
00:17:08,049 --> 00:17:15,309
orbit PI of 1 now the result of this XOR

382
00:17:10,750 --> 00:17:16,720
operation input if I the result here for

383
00:17:15,309 --> 00:17:21,428
those of you can do some quick math is

384
00:17:16,720 --> 00:17:23,260
actually the same state so the output of

385
00:17:21,429 --> 00:17:25,959
the second PI call becomes a to the PI

386
00:17:23,260 --> 00:17:32,620
squared of 0 or PI squared of 1 and this

387
00:17:25,959 --> 00:17:36,640
process is repeatedly done and after L

388
00:17:32,620 --> 00:17:39,100
steps let's look at what has happened it

389
00:17:36,640 --> 00:17:42,070
has absorbed as bits of entropy but if

390
00:17:39,100 --> 00:17:44,770
you look at it the state PI L of 0 or PI

391
00:17:42,070 --> 00:17:49,240
rays so the L of 1 actually has only 1

392
00:17:44,770 --> 00:17:52,000
bit of entropy in the output so and note

393
00:17:49,240 --> 00:17:54,519
that this is independent a this is true

394
00:17:52,000 --> 00:17:58,149
even when conditioned on the stage

395
00:17:54,519 --> 00:18:01,299
and the attackers by queries so clearly

396
00:17:58,149 --> 00:18:02,768
we have attacked CBC and does that mean

397
00:18:01,299 --> 00:18:06,999
of all of the other constructions

398
00:18:02,769 --> 00:18:09,309
crumble what about the rest of them we

399
00:18:06,999 --> 00:18:11,710
actually show that merkle-damgard is a

400
00:18:09,309 --> 00:18:13,809
good good online extractor in the random

401
00:18:11,710 --> 00:18:16,509
Oracle model we show that merkle-damgard

402
00:18:13,809 --> 00:18:18,908
and an extension is seen we can check

403
00:18:16,509 --> 00:18:22,299
our paper for extension to read smack in

404
00:18:18,909 --> 00:18:24,369
HK DF and we show buckled I'm guard with

405
00:18:22,299 --> 00:18:26,440
David smellier is an online extractor of

406
00:18:24,369 --> 00:18:28,389
the ideal cypher model we also show that

407
00:18:26,440 --> 00:18:31,450
the sponges and only an extractor in the

408
00:18:28,389 --> 00:18:33,099
random permutation model I am actually

409
00:18:31,450 --> 00:18:36,460
all of them are PR and G's with input

410
00:18:33,099 --> 00:18:37,629
okay so clearly we have attack CBC but

411
00:18:36,460 --> 00:18:40,419
all of the others we have shown to be

412
00:18:37,629 --> 00:18:42,968
secure so and this is the perfect segue

413
00:18:40,419 --> 00:18:44,440
to where we started the whole before

414
00:18:42,969 --> 00:18:48,909
value went down the rabbit hole

415
00:18:44,440 --> 00:18:51,460
PR and Z's with input okay so we replays

416
00:18:48,909 --> 00:18:54,580
online extractor but in this case we

417
00:18:51,460 --> 00:18:57,009
want multiple outputs so we replace PRNG

418
00:18:54,580 --> 00:19:00,009
we have multiple outputs YY prime and so

419
00:18:57,009 --> 00:19:03,639
on and many plays the finalized function

420
00:19:00,009 --> 00:19:07,239
with next instead okay so we have

421
00:19:03,639 --> 00:19:09,939
multiple outputs YY prime and so on so

422
00:19:07,239 --> 00:19:12,279
this is our P R and Z with input note

423
00:19:09,940 --> 00:19:13,629
that the calls can be made in any order

424
00:19:12,279 --> 00:19:16,869
so I can have refresh next next whatever

425
00:19:13,629 --> 00:19:19,089
be the case but it needs to handle state

426
00:19:16,869 --> 00:19:21,099
compromise what does it mean the

427
00:19:19,089 --> 00:19:23,440
adversary can set it to a state of its

428
00:19:21,099 --> 00:19:26,379
choice what the adversary can also do is

429
00:19:23,440 --> 00:19:29,109
read practice plan to compromise the

430
00:19:26,379 --> 00:19:32,199
state at any given point of time so this

431
00:19:29,109 --> 00:19:34,629
is captured in the robustness scheme but

432
00:19:32,200 --> 00:19:37,149
QD paucity of time I'm actually going to

433
00:19:34,629 --> 00:19:39,488
just give you the high level view we

434
00:19:37,149 --> 00:19:41,529
actually discuss show it for adversarial

435
00:19:39,489 --> 00:19:42,789
sources the robustness game is model we

436
00:19:41,529 --> 00:19:46,629
also deal with both forward backward

437
00:19:42,789 --> 00:19:48,158
security we have its seedless and we

438
00:19:46,629 --> 00:19:49,928
critically use the notion that we

439
00:19:48,159 --> 00:19:52,239
mentioned before where we conditioned on

440
00:19:49,929 --> 00:19:55,749
the set of queries that it has made and

441
00:19:52,239 --> 00:19:57,940
it's simpler than previous work so these

442
00:19:55,749 --> 00:19:59,769
are a PRG constructions I don't have

443
00:19:57,940 --> 00:20:01,749
time but I'm just going to give you one

444
00:19:59,769 --> 00:20:04,779
flavor of the merkle-damgard with the

445
00:20:01,749 --> 00:20:06,309
random compressing function f so the

446
00:20:04,779 --> 00:20:07,330
refresh is similar to what we saw before

447
00:20:06,309 --> 00:20:09,460
but

448
00:20:07,330 --> 00:20:11,649
actually does this variant takes the

449
00:20:09,460 --> 00:20:14,440
final state and it sets a new state to

450
00:20:11,649 --> 00:20:17,229
be F of zero comma s and it sets the new

451
00:20:14,440 --> 00:20:20,499
random bits to be F of 1 comma s and so

452
00:20:17,230 --> 00:20:23,619
on and so forth and so on

453
00:20:20,499 --> 00:20:26,619
yes I'm just going to jump right to sha

454
00:20:23,619 --> 00:20:28,539
because the sponge construction this

455
00:20:26,619 --> 00:20:32,379
next is a modification proposed by

456
00:20:28,539 --> 00:20:34,269
Hutchinson in 2016 where the output Y is

457
00:20:32,379 --> 00:20:41,859
first the first R bits becomes the

458
00:20:34,269 --> 00:20:43,690
output and then there's a PI call any

459
00:20:41,859 --> 00:20:46,119
minutes now I feel like I'm Harry Potter

460
00:20:43,690 --> 00:20:50,019
holding a wand but it doesn't work but

461
00:20:46,119 --> 00:20:52,119
anyway so the output of next is now the

462
00:20:50,019 --> 00:20:54,070
seed is now X odd with the output of Pi

463
00:20:52,119 --> 00:20:57,850
this is done to ensure that we can't

464
00:20:54,070 --> 00:21:01,059
have inversion queries so this is the

465
00:20:57,850 --> 00:21:02,799
sponge and I think I don't have time for

466
00:21:01,059 --> 00:21:05,129
the information-theoretic PRNG so I'm

467
00:21:02,799 --> 00:21:08,590
just going to jump right to the summary

468
00:21:05,129 --> 00:21:14,259
we provide be please can discuss this

469
00:21:08,590 --> 00:21:16,418
offline but yes so summary what have you

470
00:21:14,259 --> 00:21:19,149
done we have a new meaningful robustness

471
00:21:16,419 --> 00:21:20,859
notion for seedless PRN G's it's a clean

472
00:21:19,149 --> 00:21:22,209
Oracle dependent entropy condition for

473
00:21:20,859 --> 00:21:24,609
attackers which is restrictive and

474
00:21:22,210 --> 00:21:26,139
permissive restrictive and after white

475
00:21:24,609 --> 00:21:29,529
impossibility but promising enough to

476
00:21:26,139 --> 00:21:30,789
have a larger pool of sources and we

477
00:21:29,529 --> 00:21:33,309
prove it's like rehab or the

478
00:21:30,789 --> 00:21:35,799
computational and IT version we have a

479
00:21:33,309 --> 00:21:38,950
sensible way of arguing the security of

480
00:21:35,799 --> 00:21:40,570
PR and G's that are widely used we allow

481
00:21:38,950 --> 00:21:43,779
for seedless extraction and idealized

482
00:21:40,570 --> 00:21:45,309
models and we have three PRNG

483
00:21:43,779 --> 00:21:47,919
constructions which prove both

484
00:21:45,309 --> 00:21:50,230
computation and IT secure and we also

485
00:21:47,919 --> 00:21:53,580
show an attack on CBC 2 shows that

486
00:21:50,230 --> 00:21:56,679
that's not secure mellitus entropy so

487
00:21:53,580 --> 00:21:57,820
Bobby your hat I think we are or at

488
00:21:56,679 --> 00:21:59,769
least we are close to it

489
00:21:57,820 --> 00:22:02,289
so hopefully this set us on a path

490
00:21:59,769 --> 00:22:04,889
pattern we unlock the demon of Sauron so

491
00:22:02,289 --> 00:22:04,889
thank you

492
00:22:09,040 --> 00:22:24,409
I'll take questions now well then I have

493
00:22:23,210 --> 00:22:25,940
one please yeah

494
00:22:24,410 --> 00:22:28,160
so I understand you had four

495
00:22:25,940 --> 00:22:29,930
presentations you considered and three

496
00:22:28,160 --> 00:22:32,990
of them were secure like roughly saying

497
00:22:29,930 --> 00:22:36,260
like that you had is you had a secure

498
00:22:32,990 --> 00:22:38,900
construction based on madam guard dead

499
00:22:36,260 --> 00:22:41,390
was Davis Maya and so on how can you

500
00:22:38,900 --> 00:22:43,490
compare them with each other so like you

501
00:22:41,390 --> 00:22:45,050
have three secure constructions which

502
00:22:43,490 --> 00:22:47,590
one is the best which how do they

503
00:22:45,050 --> 00:22:47,590
compare Oh

504
00:22:49,900 --> 00:22:54,380
so we did do an analysis bearing we

505
00:22:52,910 --> 00:22:56,840
consider the parameters I don't remember

506
00:22:54,380 --> 00:22:58,430
that all offline unfortunately but we

507
00:22:56,840 --> 00:22:59,840
actually discuss a parameter choices

508
00:22:58,430 --> 00:23:04,220
wearing me select different parameters

509
00:22:59,840 --> 00:23:08,330
and but I'm not sure if I have an answer

510
00:23:04,220 --> 00:23:12,230
to the question which I would prefer but

511
00:23:08,330 --> 00:23:14,030
yes but the answer the answer non answer

512
00:23:12,230 --> 00:23:17,450
because shadow and char trees widely

513
00:23:14,030 --> 00:23:19,190
used when Shari is sha-3 it's after cha

514
00:23:17,450 --> 00:23:21,380
- so maybe I would recommend that but

515
00:23:19,190 --> 00:23:22,970
once again Ivy do compare parameter

516
00:23:21,380 --> 00:23:24,590
choices but I don't have an answer as to

517
00:23:22,970 --> 00:23:25,220
which I would pitch weekly thank you

518
00:23:24,590 --> 00:23:30,459
thank you

519
00:23:25,220 --> 00:23:32,670
Steny other question I do not see any

520
00:23:30,460 --> 00:23:37,359
okay thank you thank you so much

521
00:23:32,670 --> 00:23:37,359
[Applause]

