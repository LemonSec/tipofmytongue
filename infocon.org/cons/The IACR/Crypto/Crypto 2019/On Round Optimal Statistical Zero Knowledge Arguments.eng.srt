1
00:00:04,860 --> 00:00:11,400
so hi the first one to answer your

2
00:00:07,920 --> 00:00:13,019
question the point is that you don't

3
00:00:11,400 --> 00:00:14,820
need the full power of the random Oracle

4
00:00:13,019 --> 00:00:16,939
like there's like a nice simple

5
00:00:14,820 --> 00:00:18,810
primitive here that you can define

6
00:00:16,939 --> 00:00:21,720
assisting proof with the same

7
00:00:18,810 --> 00:00:23,070
compressibility property and it's enough

8
00:00:21,720 --> 00:00:28,229
okay

9
00:00:23,070 --> 00:00:30,859
so hi I'm near and I won't tell you

10
00:00:28,230 --> 00:00:34,080
about around optimal statistical

11
00:00:30,859 --> 00:00:35,430
journals arguments and this is John

12
00:00:34,080 --> 00:00:44,280
Moore quiz over panis

13
00:00:35,430 --> 00:00:47,040
and in case you've just joined so in

14
00:00:44,280 --> 00:00:48,269
case you just joined the session let me

15
00:00:47,040 --> 00:00:52,290
remind you what their knowledge

16
00:00:48,269 --> 00:00:54,000
protocols are so here we have a pervert

17
00:00:52,290 --> 00:00:58,530
that interacts with a very far in order

18
00:00:54,000 --> 00:01:00,150
to approve some statement and the most

19
00:00:58,530 --> 00:01:01,979
basic requirement is of course

20
00:01:00,150 --> 00:01:04,920
completeness if the statement is true we

21
00:01:01,979 --> 00:01:06,810
want a very far to accept the second

22
00:01:04,920 --> 00:01:08,940
requirement is soundness if the

23
00:01:06,810 --> 00:01:11,600
statement is false the verifier should

24
00:01:08,940 --> 00:01:13,679
reject with overwhelming probability and

25
00:01:11,600 --> 00:01:16,250
of course we have the zero knowledge

26
00:01:13,680 --> 00:01:19,110
requirement that essentially says that

27
00:01:16,250 --> 00:01:22,920
the verifier should not be able to learn

28
00:01:19,110 --> 00:01:25,650
anything meaningful from the proof and

29
00:01:22,920 --> 00:01:28,410
the way that this is captured using the

30
00:01:25,650 --> 00:01:31,350
simulation paradigm and requiring the

31
00:01:28,410 --> 00:01:34,050
actor exists an efficient simulator that

32
00:01:31,350 --> 00:01:36,869
can simulate an interaction out of thin

33
00:01:34,050 --> 00:01:40,110
air without ever speaking with the

34
00:01:36,870 --> 00:01:41,490
prover in the sense that the similar

35
00:01:40,110 --> 00:01:46,680
interaction should be indistinguishable

36
00:01:41,490 --> 00:01:50,490
from a real one now as you may know this

37
00:01:46,680 --> 00:01:55,560
notion comes in many colors and flavors

38
00:01:50,490 --> 00:01:57,908
and in this work we consider one main

39
00:01:55,560 --> 00:02:01,000
variant

40
00:01:57,909 --> 00:02:04,630
their knowledge which is statistical

41
00:02:01,000 --> 00:02:06,460
their knowledge arguments so what are

42
00:02:04,630 --> 00:02:07,869
these as the name suggests here we

43
00:02:06,460 --> 00:02:10,630
really want that the singularity

44
00:02:07,869 --> 00:02:12,400
interaction is statistically

45
00:02:10,630 --> 00:02:17,609
indistinguishable from a real

46
00:02:12,400 --> 00:02:20,560
interaction and this is a very appealing

47
00:02:17,610 --> 00:02:24,190
property in a sense that it provides

48
00:02:20,560 --> 00:02:27,310
some sort of everlasting privacy even if

49
00:02:24,190 --> 00:02:30,069
the verifier stores the interaction and

50
00:02:27,310 --> 00:02:32,319
post processes for a very long time from

51
00:02:30,069 --> 00:02:36,040
bounded time it still doesn't gain any

52
00:02:32,319 --> 00:02:38,200
meaningful information now

53
00:02:36,040 --> 00:02:41,079
statistical zero knowledge systems for

54
00:02:38,200 --> 00:02:44,048
general NP languages are unlikely to

55
00:02:41,080 --> 00:02:47,140
also be statistically sound which is why

56
00:02:44,049 --> 00:02:48,610
we relaxed the status requirement to

57
00:02:47,140 --> 00:02:51,790
only hold against computationally

58
00:02:48,610 --> 00:02:56,430
bounded Hoover's and these may

59
00:02:51,790 --> 00:02:59,380
definitely exist for all of any okay so

60
00:02:56,430 --> 00:03:02,200
the the question that we focus on in

61
00:02:59,380 --> 00:03:06,700
this work is a natural one and it's

62
00:03:02,200 --> 00:03:08,319
around complexity of such arguments how

63
00:03:06,700 --> 00:03:11,679
much interaction do you need in order to

64
00:03:08,319 --> 00:03:13,988
achieve statistical zero knowledge so

65
00:03:11,680 --> 00:03:16,480
let me tell you a little bit about what

66
00:03:13,989 --> 00:03:19,530
we know and also compare it to what we

67
00:03:16,480 --> 00:03:22,420
know about computational zero knowledge

68
00:03:19,530 --> 00:03:24,430
so we know that some interaction is

69
00:03:22,420 --> 00:03:27,069
required in particular even

70
00:03:24,430 --> 00:03:30,579
computational zero knowledge cannot be

71
00:03:27,069 --> 00:03:33,250
achieved in two message in two messages

72
00:03:30,579 --> 00:03:35,139
on the other hand we've known for quite

73
00:03:33,250 --> 00:03:38,139
a while now how to achieve zero

74
00:03:35,139 --> 00:03:40,510
knowledge in four messages based on

75
00:03:38,139 --> 00:03:41,590
standard assumptions for statistical

76
00:03:40,510 --> 00:03:44,858
they're in all ways specifically

77
00:03:41,590 --> 00:03:48,100
collision resistant hash function okay

78
00:03:44,859 --> 00:03:52,380
so what is the exact wrong complexity of

79
00:03:48,100 --> 00:03:55,840
zero knowledge what about three messages

80
00:03:52,380 --> 00:03:58,060
can we have such protocols and here we

81
00:03:55,840 --> 00:03:59,680
know that there is a difficulty we know

82
00:03:58,060 --> 00:04:04,299
in particular that you cannot have

83
00:03:59,680 --> 00:04:05,640
protocols with black box simulations but

84
00:04:04,299 --> 00:04:06,810
nevertheless in your car

85
00:04:05,640 --> 00:04:10,350
additional setting for computational

86
00:04:06,810 --> 00:04:13,500
zero knowledge there do exist protocol

87
00:04:10,350 --> 00:04:16,440
so protocols under an unfalsifiable

88
00:04:13,500 --> 00:04:20,310
knowledge X assumption have existed for

89
00:04:16,440 --> 00:04:23,160
quite awhile and more recently there's

90
00:04:20,310 --> 00:04:25,500
also a protocol based on a falsifiable

91
00:04:23,160 --> 00:04:28,320
assumption on the multi collision

92
00:04:25,500 --> 00:04:30,450
resistance of Kadesh hash functions you

93
00:04:28,320 --> 00:04:34,430
heard about it from Cody and we're going

94
00:04:30,450 --> 00:04:37,650
to touch it again in a bit so what about

95
00:04:34,430 --> 00:04:42,330
statistical zero knowledge here we

96
00:04:37,650 --> 00:04:44,520
basically don't know much in fact there

97
00:04:42,330 --> 00:04:46,109
are no protocols not even under

98
00:04:44,520 --> 00:04:48,960
non-standard assumptions including

99
00:04:46,110 --> 00:04:50,940
knowledge assumptions at least if we're

100
00:04:48,960 --> 00:04:54,270
thinking about general attackers general

101
00:04:50,940 --> 00:04:59,820
non-uniform attackers and this is where

102
00:04:54,270 --> 00:05:01,650
our work comes in so our main result the

103
00:04:59,820 --> 00:05:04,590
statistical zero knowledge protocol with

104
00:05:01,650 --> 00:05:05,359
optimal run complexity namely three

105
00:05:04,590 --> 00:05:07,890
messages

106
00:05:05,360 --> 00:05:10,620
assuming keyless multi collision

107
00:05:07,890 --> 00:05:12,930
resistant hash functions and other

108
00:05:10,620 --> 00:05:16,470
standard assumptions that you can

109
00:05:12,930 --> 00:05:18,930
instantiate for example from L to B so

110
00:05:16,470 --> 00:05:22,350
this basically matches the same

111
00:05:18,930 --> 00:05:24,060
assumptions used before for computations

112
00:05:22,350 --> 00:05:28,860
their knowledge but achieves this

113
00:05:24,060 --> 00:05:33,240
stronger statistical guarantee okay

114
00:05:28,860 --> 00:05:37,010
so comparing to previous four message

115
00:05:33,240 --> 00:05:39,390
for the polls then we don't improve the

116
00:05:37,010 --> 00:05:41,460
assumptions here but only the the wrong

117
00:05:39,390 --> 00:05:44,460
complexity but you're also showing this

118
00:05:41,460 --> 00:05:47,159
work a four message protocol that we

119
00:05:44,460 --> 00:05:49,890
locked relaxes the assumption previously

120
00:05:47,160 --> 00:05:53,720
acquired from multi-trauma collision

121
00:05:49,890 --> 00:05:54,930
resistance to multi collision resistance

122
00:05:53,720 --> 00:05:59,940
okay

123
00:05:54,930 --> 00:06:01,830
so these are the results and let me tell

124
00:05:59,940 --> 00:06:03,690
you a little bit a little bit more about

125
00:06:01,830 --> 00:06:06,390
what are these multi collision resistant

126
00:06:03,690 --> 00:06:09,450
hash functions in case you haven't

127
00:06:06,390 --> 00:06:11,909
encountered them so far so here we'll

128
00:06:09,450 --> 00:06:13,270
consider a shrinking function but at

129
00:06:11,910 --> 00:06:17,750
least some

130
00:06:13,270 --> 00:06:20,750
linear factor and in such functions

131
00:06:17,750 --> 00:06:23,390
there not only exist pairs of collisions

132
00:06:20,750 --> 00:06:26,600
there also exists much larger tuples

133
00:06:23,390 --> 00:06:29,780
that sort of map to the same output we

134
00:06:26,600 --> 00:06:33,230
call them M collisions and naturally you

135
00:06:29,780 --> 00:06:35,869
can define a relaxation of collision

136
00:06:33,230 --> 00:06:38,270
resistance called M collision resistant

137
00:06:35,870 --> 00:06:42,410
that says that it's hard to find such M

138
00:06:38,270 --> 00:06:45,620
tuples okay so this is really a natural

139
00:06:42,410 --> 00:06:48,290
relaxation but something very

140
00:06:45,620 --> 00:06:51,140
interesting about it is that it also

141
00:06:48,290 --> 00:06:53,390
makes sense for fixed functions for

142
00:06:51,140 --> 00:06:55,099
functions that don't have a key so we

143
00:06:53,390 --> 00:06:58,039
know that in the case of collision

144
00:06:55,100 --> 00:07:02,150
resistant hash functions the attacker

145
00:06:58,040 --> 00:07:06,100
could always have a hardwired collision

146
00:07:02,150 --> 00:07:10,489
and it's coded this is unavoidable now

147
00:07:06,100 --> 00:07:12,680
it's also the case for multi collisions

148
00:07:10,490 --> 00:07:15,740
you can always have a polynomial size

149
00:07:12,680 --> 00:07:17,960
collision hardwired in your code but you

150
00:07:15,740 --> 00:07:20,570
can require that you cannot do better

151
00:07:17,960 --> 00:07:22,609
than that in the sense that a non

152
00:07:20,570 --> 00:07:25,670
uniform attacker that has non uniform

153
00:07:22,610 --> 00:07:29,030
advice of sizes should not be able to

154
00:07:25,670 --> 00:07:35,240
find multi collisions of size

155
00:07:29,030 --> 00:07:38,150
significantly larger than s so it's

156
00:07:35,240 --> 00:07:42,800
pretty simple something it's falsifiable

157
00:07:38,150 --> 00:07:48,109
it may hold for a certain existing hash

158
00:07:42,800 --> 00:07:49,970
functions like say but nevertheless it's

159
00:07:48,110 --> 00:07:51,860
new at this point it should be

160
00:07:49,970 --> 00:07:54,260
considered the non-standard we don't

161
00:07:51,860 --> 00:07:56,330
understand it well enough and I'll get

162
00:07:54,260 --> 00:08:01,130
to this point towards the end of the

163
00:07:56,330 --> 00:08:04,120
talk again okay so this is the multi

164
00:08:01,130 --> 00:08:06,590
collision resistant hash functions and

165
00:08:04,120 --> 00:08:09,410
in the rest of the time that I have I'd

166
00:08:06,590 --> 00:08:11,150
like to give you a taste of the

167
00:08:09,410 --> 00:08:18,130
techniques yeah this was taking

168
00:08:11,150 --> 00:08:20,419
yesterday at lunch right here okay so

169
00:08:18,130 --> 00:08:23,540
let me start by giving you a general

170
00:08:20,420 --> 00:08:24,790
template for constructing zero knowledge

171
00:08:23,540 --> 00:08:28,460
protocol

172
00:08:24,790 --> 00:08:29,960
which was sort of followed in the

173
00:08:28,460 --> 00:08:31,940
previous work that that constructed

174
00:08:29,960 --> 00:08:35,419
computational zero knowledge in

175
00:08:31,940 --> 00:08:37,789
different messages and here we have two

176
00:08:35,419 --> 00:08:40,760
steps for the protocol and the first

177
00:08:37,789 --> 00:08:42,919
step the prover and verify run a sub

178
00:08:40,760 --> 00:08:46,220
protocol to establish some sort of

179
00:08:42,919 --> 00:08:49,220
trapdoor and then in the second step the

180
00:08:46,220 --> 00:08:53,540
prove approves that either the statement

181
00:08:49,220 --> 00:08:57,500
X is correct or that it knows this

182
00:08:53,540 --> 00:09:00,160
secret trapdoor now the point is that

183
00:08:57,500 --> 00:09:02,810
this trapdoor should be hard to find and

184
00:09:00,160 --> 00:09:05,689
so if the probe manages to convince the

185
00:09:02,810 --> 00:09:08,449
verifier it must be the case that the

186
00:09:05,690 --> 00:09:10,580
statement is true at the same time

187
00:09:08,450 --> 00:09:13,190
simulator that has the code of the

188
00:09:10,580 --> 00:09:16,400
verifier unlike the prover can somehow

189
00:09:13,190 --> 00:09:18,680
extract this trapdoor and use it to

190
00:09:16,400 --> 00:09:19,910
generate the proof so the proof is going

191
00:09:18,680 --> 00:09:21,920
to be what we call witness

192
00:09:19,910 --> 00:09:24,050
indistinguishable meaning that the

193
00:09:21,920 --> 00:09:26,000
verifier cannot really tell whether is

194
00:09:24,050 --> 00:09:29,390
given a proof that uses the actual

195
00:09:26,000 --> 00:09:32,210
witness for X or this trapdoor witness

196
00:09:29,390 --> 00:09:34,819
and this is the way that you argue zero

197
00:09:32,210 --> 00:09:39,080
knowledge okay so where does this fit

198
00:09:34,820 --> 00:09:41,330
into our picture so the previous work

199
00:09:39,080 --> 00:09:44,300
that constructed the computational zero

200
00:09:41,330 --> 00:09:48,100
knowledge in three messages basically

201
00:09:44,300 --> 00:09:52,819
showed how to implement this trapdoor

202
00:09:48,100 --> 00:09:55,940
phase and you can couple that with

203
00:09:52,820 --> 00:10:00,380
off-the-shelf witnesses English of all

204
00:09:55,940 --> 00:10:07,210
proofs of knowledge in free messages to

205
00:10:00,380 --> 00:10:11,030
get a protocol so you could expect that

206
00:10:07,210 --> 00:10:12,740
in order to get free message statistical

207
00:10:11,030 --> 00:10:15,380
zero knowledge the change that you have

208
00:10:12,740 --> 00:10:18,020
to make is really good statistical

209
00:10:15,380 --> 00:10:20,000
witness indistinguishable arguments of

210
00:10:18,020 --> 00:10:23,390
knowledge and this is really more or

211
00:10:20,000 --> 00:10:26,330
less the case so we do use the the

212
00:10:23,390 --> 00:10:29,060
trapdoor phase in previous with some

213
00:10:26,330 --> 00:10:30,920
natural tweaks that I'm not going to get

214
00:10:29,060 --> 00:10:33,859
into in this talk

215
00:10:30,920 --> 00:10:34,670
the main focus is really on obtaining

216
00:10:33,860 --> 00:10:38,000
these

217
00:10:34,670 --> 00:10:41,810
statistically indistinguishable argued

218
00:10:38,000 --> 00:10:44,500
arguments of knowledge and as a matter

219
00:10:41,810 --> 00:10:47,899
of fact our understanding of statistical

220
00:10:44,500 --> 00:10:50,269
W eyewitness English ability has not

221
00:10:47,899 --> 00:10:53,060
been much better than that of

222
00:10:50,269 --> 00:10:56,360
statistical zero knowledge in fact up

223
00:10:53,060 --> 00:10:58,609
until recently it was very much the same

224
00:10:56,360 --> 00:11:00,290
statistical zero knowledge and very

225
00:10:58,610 --> 00:11:05,029
recently there was a very nice

226
00:11:00,290 --> 00:11:08,779
protocol that achieved statistical WI in

227
00:11:05,029 --> 00:11:11,360
just two messages but it's not an

228
00:11:08,779 --> 00:11:12,950
argument of knowledge well we really

229
00:11:11,360 --> 00:11:15,890
need an argument of knowledge here

230
00:11:12,950 --> 00:11:18,730
because this trap door it always exists

231
00:11:15,890 --> 00:11:21,470
the the point is that it should be hard

232
00:11:18,730 --> 00:11:24,190
to find it should be hard to show that

233
00:11:21,470 --> 00:11:28,790
you actually know it you can efficiently

234
00:11:24,190 --> 00:11:32,660
extract it okay so this is the sort of

235
00:11:28,790 --> 00:11:34,880
the technical focus of this work and I

236
00:11:32,660 --> 00:11:39,380
want to tell you how we do it

237
00:11:34,880 --> 00:11:41,839
do we have a clock somewhere okay well

238
00:11:39,380 --> 00:11:45,709
I'm the lost doctor well I'm going to

239
00:11:41,839 --> 00:11:50,990
forget about time yeah if you get bored

240
00:11:45,709 --> 00:11:53,529
just leave so okay so I want to tell you

241
00:11:50,990 --> 00:11:55,670
how to construct a statistical wi

242
00:11:53,529 --> 00:11:59,209
arguments and for that I'm going to

243
00:11:55,670 --> 00:12:04,149
recall how like classical computational

244
00:11:59,209 --> 00:12:07,640
WI arguments work so here and the first

245
00:12:04,149 --> 00:12:09,500
step the prover takes some string know

246
00:12:07,640 --> 00:12:13,220
classically to represent say some graph

247
00:12:09,500 --> 00:12:14,750
and it computes bit commitments to the

248
00:12:13,220 --> 00:12:17,269
corresponding bits

249
00:12:14,750 --> 00:12:19,880
send them over to the verifier who then

250
00:12:17,269 --> 00:12:21,860
sends a bunch of random challenges

251
00:12:19,880 --> 00:12:25,490
basically asking that prove er opens

252
00:12:21,860 --> 00:12:27,050
some of these bits the prover opens some

253
00:12:25,490 --> 00:12:30,640
commitments and then the verifier

254
00:12:27,050 --> 00:12:34,819
decides whether to accept or not okay

255
00:12:30,640 --> 00:12:37,519
now as you may expect if you use

256
00:12:34,820 --> 00:12:40,010
statistically hiding bit commitments

257
00:12:37,519 --> 00:12:43,010
then you do actually get statistical

258
00:12:40,010 --> 00:12:45,520
witness indistinguishability so what's

259
00:12:43,010 --> 00:12:47,550
the problem the problem is that

260
00:12:45,520 --> 00:12:49,920
statistical city

261
00:12:47,550 --> 00:12:51,899
we hiding the bit commitments cannot be

262
00:12:49,920 --> 00:12:54,510
achieved not interactively and this is

263
00:12:51,899 --> 00:12:56,399
the inherent and it's the same situation

264
00:12:54,510 --> 00:12:57,860
as in collision-resistant hash functions

265
00:12:56,399 --> 00:13:01,610
because it's statistically hiding

266
00:12:57,860 --> 00:13:05,670
collisions do exist and we can always be

267
00:13:01,610 --> 00:13:07,140
hard-coded okay so we need to do

268
00:13:05,670 --> 00:13:13,250
something else

269
00:13:07,140 --> 00:13:15,779
and we're going to rely on a weaker

270
00:13:13,250 --> 00:13:18,470
definition of binding well and let me

271
00:13:15,779 --> 00:13:23,839
tell you what what it says so here to

272
00:13:18,470 --> 00:13:26,220
we'd like to commit to a bit string and

273
00:13:23,839 --> 00:13:30,269
just as before we'd like to be able to

274
00:13:26,220 --> 00:13:33,300
open a certain subset of the bits and we

275
00:13:30,269 --> 00:13:35,970
want it's important that the the unopen

276
00:13:33,300 --> 00:13:38,490
bits remain statistically hidden okay

277
00:13:35,970 --> 00:13:41,160
and this is just like in plain big

278
00:13:38,490 --> 00:13:46,110
commitments but we are going to ask for

279
00:13:41,160 --> 00:13:49,069
a much weaker binding guarantee what

280
00:13:46,110 --> 00:13:51,930
we're going to ask for is that for any

281
00:13:49,070 --> 00:13:54,870
efficient attacker which is basically a

282
00:13:51,930 --> 00:14:00,449
short list 2.0 meiosis list of strings

283
00:13:54,870 --> 00:14:02,459
so that whenever he opens a subset of of

284
00:14:00,450 --> 00:14:05,190
the commitments they must be

285
00:14:02,459 --> 00:14:07,979
simultaneously consistent with one of

286
00:14:05,190 --> 00:14:10,709
these strings okay so we might be able

287
00:14:07,980 --> 00:14:12,660
to open each individual bit in any way

288
00:14:10,709 --> 00:14:15,000
that it wants by choosing one of these

289
00:14:12,660 --> 00:14:17,819
strings but you cannot mix and match

290
00:14:15,000 --> 00:14:21,570
okay so this is sort of the object that

291
00:14:17,820 --> 00:14:25,620
we want to get and I want to argue that

292
00:14:21,570 --> 00:14:28,680
this is actually sufficient to get an

293
00:14:25,620 --> 00:14:30,449
argument of knowledge and intuitively

294
00:14:28,680 --> 00:14:32,640
the reason is that if you have an

295
00:14:30,449 --> 00:14:34,410
attacker that convinces the verifier of

296
00:14:32,640 --> 00:14:36,870
accepting with some noticeable

297
00:14:34,410 --> 00:14:39,180
probability this attacker has a

298
00:14:36,870 --> 00:14:41,880
corresponding point numeral size set and

299
00:14:39,180 --> 00:14:43,769
there also exists an attacker that was

300
00:14:41,880 --> 00:14:46,500
polynomially smaller but still

301
00:14:43,769 --> 00:14:49,440
noticeable probability convinces the

302
00:14:46,500 --> 00:14:52,050
verifier well being consistent with one

303
00:14:49,440 --> 00:14:54,810
of the strings and this allows a

304
00:14:52,050 --> 00:14:57,260
reduction to the previous setting where

305
00:14:54,810 --> 00:15:03,079
we really had the classical notion

306
00:14:57,260 --> 00:15:07,939
finding okay so this is really what we

307
00:15:03,080 --> 00:15:09,680
want and as we said it's nothing that

308
00:15:07,940 --> 00:15:14,120
the last thing I want to do is give you

309
00:15:09,680 --> 00:15:18,709
some clue on how to construct this

310
00:15:14,120 --> 00:15:20,990
object okay so the construction is

311
00:15:18,710 --> 00:15:25,400
pretty simple to describe it relies on

312
00:15:20,990 --> 00:15:28,190
on two tools so the first tool is weakly

313
00:15:25,400 --> 00:15:31,069
binding this trick string commitments

314
00:15:28,190 --> 00:15:34,210
that don't have this subset opening

315
00:15:31,070 --> 00:15:38,000
property namely you can open the entire

316
00:15:34,210 --> 00:15:40,070
commitment okay no--but will be will

317
00:15:38,000 --> 00:15:43,010
remain hidden and this is something that

318
00:15:40,070 --> 00:15:45,770
you can actually do based on multi

319
00:15:43,010 --> 00:15:48,140
collision resistance the construction is

320
00:15:45,770 --> 00:15:50,090
completely analogous to the air of

321
00:15:48,140 --> 00:15:53,750
statistically hiding commitment from

322
00:15:50,090 --> 00:15:55,520
collision resistance the second tool is

323
00:15:53,750 --> 00:15:57,560
something that you all know which is

324
00:15:55,520 --> 00:15:59,600
fresh whole secret sharing okay

325
00:15:57,560 --> 00:16:03,489
so here I'd like to be able to take a

326
00:15:59,600 --> 00:16:06,590
beat and encode it into a bunch of

327
00:16:03,490 --> 00:16:10,520
symbols with the following two

328
00:16:06,590 --> 00:16:13,400
properties so first as long as I reveal

329
00:16:10,520 --> 00:16:16,819
not too many symbols less than than my

330
00:16:13,400 --> 00:16:19,610
threshold then B remains perfectly

331
00:16:16,820 --> 00:16:24,110
hidden okay and the second thing is that

332
00:16:19,610 --> 00:16:27,500
this encoding encoding of different beat

333
00:16:24,110 --> 00:16:31,550
there must be far apart okay we can only

334
00:16:27,500 --> 00:16:32,960
agree on less than T symbols and indeed

335
00:16:31,550 --> 00:16:36,170
we know that if you have two symbols you

336
00:16:32,960 --> 00:16:38,750
can already sort of recover the secrets

337
00:16:36,170 --> 00:16:40,189
so these are the basic two things that

338
00:16:38,750 --> 00:16:44,450
we need then and with that let me

339
00:16:40,190 --> 00:16:47,600
describe the construction so we have our

340
00:16:44,450 --> 00:16:49,700
bid string which we'd like to commit to

341
00:16:47,600 --> 00:16:52,520
and the first thing we're going to do is

342
00:16:49,700 --> 00:16:55,759
we're going to compute secretary

343
00:16:52,520 --> 00:16:58,549
encoding to each and every one of

344
00:16:55,759 --> 00:17:02,540
these beats put it in corresponding

345
00:16:58,549 --> 00:17:05,059
columns then we're going to compute

346
00:17:02,540 --> 00:17:09,168
these weekly binding commitments to each

347
00:17:05,059 --> 00:17:11,148
one of the in codings and now we're

348
00:17:09,169 --> 00:17:14,120
going to take another copy of this

349
00:17:11,148 --> 00:17:18,049
matrix and also compute also complete

350
00:17:14,119 --> 00:17:20,239
commitments to the rows okay and this is

351
00:17:18,049 --> 00:17:22,569
basically going to be our commitment

352
00:17:20,240 --> 00:17:24,949
okay so it's it's basically just

353
00:17:22,569 --> 00:17:29,269
commitments to the columns and rows of

354
00:17:24,949 --> 00:17:34,370
this secretary matrix good so how do we

355
00:17:29,269 --> 00:17:36,409
open a subset so first naturally we

356
00:17:34,370 --> 00:17:39,189
would open the corresponding encoding

357
00:17:36,409 --> 00:17:42,409
namely the columns correspond to the

358
00:17:39,190 --> 00:17:44,500
subsidies we want to open but we're not

359
00:17:42,409 --> 00:17:48,049
going to stop with that the opening

360
00:17:44,500 --> 00:17:50,809
procedure is actually randomized so the

361
00:17:48,049 --> 00:17:54,740
receiver is going to pick at random a

362
00:17:50,809 --> 00:17:58,309
few random rules not more than the

363
00:17:54,740 --> 00:18:00,669
threshold and also asks that the sender

364
00:17:58,309 --> 00:18:05,000
opens the commitments for these works

365
00:18:00,669 --> 00:18:06,710
okay so I'm not going to approve

366
00:18:05,000 --> 00:18:09,100
anything but let me wave my hands a

367
00:18:06,710 --> 00:18:20,120
little bit to convince you why this

368
00:18:09,100 --> 00:18:22,070
thing works right we forgot to say that

369
00:18:20,120 --> 00:18:25,070
the very fire at the end should of

370
00:18:22,070 --> 00:18:27,139
course check consistency that these

371
00:18:25,070 --> 00:18:29,928
encodings are really valid encodings and

372
00:18:27,139 --> 00:18:33,408
also that it has consistency between the

373
00:18:29,929 --> 00:18:35,960
rows and the columns okay

374
00:18:33,409 --> 00:18:38,179
so first let me argue that this thing is

375
00:18:35,960 --> 00:18:41,500
hiding and this is the case really

376
00:18:38,179 --> 00:18:45,230
because for the bits that we do not open

377
00:18:41,500 --> 00:18:47,630
we only reveal very few coordinates of

378
00:18:45,230 --> 00:18:50,269
their corresponding encodings so we're

379
00:18:47,630 --> 00:18:53,679
protected by the secretary privacy guard

380
00:18:50,269 --> 00:18:57,760
okay the more interesting part is

381
00:18:53,679 --> 00:19:01,370
arguing weak binding and why does that

382
00:18:57,760 --> 00:19:03,559
intuitively hold okay so this column

383
00:19:01,370 --> 00:19:06,299
commitments we understand they're

384
00:19:03,559 --> 00:19:09,370
already bound

385
00:19:06,299 --> 00:19:12,009
descender to a few encodings for each

386
00:19:09,370 --> 00:19:14,189
and every one of the bits but it may

387
00:19:12,009 --> 00:19:19,000
still be that it could somehow

388
00:19:14,190 --> 00:19:21,100
independently open them in particularly

389
00:19:19,000 --> 00:19:23,409
thing for simplicity that it can open

390
00:19:21,100 --> 00:19:26,469
one encoding of zero and one encoding

391
00:19:23,409 --> 00:19:28,090
and one for each and every one of the

392
00:19:26,470 --> 00:19:31,090
bits we want to make sure that it cannot

393
00:19:28,090 --> 00:19:34,600
mix and match okay and this is exactly

394
00:19:31,090 --> 00:19:37,600
what these cross checks are for this is

395
00:19:34,600 --> 00:19:39,639
why we open also the rules and the

396
00:19:37,600 --> 00:19:41,799
intuition is that if you fix any two

397
00:19:39,639 --> 00:19:44,529
such and codings of different bits and

398
00:19:41,799 --> 00:19:46,539
you choose random locations enough

399
00:19:44,529 --> 00:19:48,370
random locations then because they're

400
00:19:46,539 --> 00:19:50,889
far apart then with very high

401
00:19:48,370 --> 00:19:54,039
probability we're going to fix one of

402
00:19:50,889 --> 00:19:56,620
them okay so as a matter of fact if you

403
00:19:54,039 --> 00:19:58,809
choose their parameters right then these

404
00:19:56,620 --> 00:20:02,918
tests are actually going to fix the

405
00:19:58,809 --> 00:20:05,559
entire bit string of the sender and this

406
00:20:02,919 --> 00:20:08,649
is computation lipsticks not information

407
00:20:05,559 --> 00:20:12,158
very radically fixed okay now where does

408
00:20:08,649 --> 00:20:15,758
this small set of strings come from so

409
00:20:12,159 --> 00:20:17,799
what's important here is that the sender

410
00:20:15,759 --> 00:20:23,710
is also bound by its commitment to the

411
00:20:17,799 --> 00:20:27,490
rows okay so basically for this random

412
00:20:23,710 --> 00:20:30,070
selection there are only very few sort

413
00:20:27,490 --> 00:20:33,100
of openings that you can present and

414
00:20:30,070 --> 00:20:38,320
this directly maps to very few strings

415
00:20:33,100 --> 00:20:40,389
that it can eventually open okay so this

416
00:20:38,320 --> 00:20:42,009
is a little bit about the construction

417
00:20:40,389 --> 00:20:45,850
you're welcome to ask you more about it

418
00:20:42,009 --> 00:20:50,129
offline yeah so before I finish I want

419
00:20:45,850 --> 00:20:50,129
to give you some some food for thought

420
00:20:50,250 --> 00:20:56,379
so you've heard now this talking in the

421
00:20:53,740 --> 00:20:59,259
previous talk already about two

422
00:20:56,379 --> 00:21:02,549
primitives that thing to inherently

423
00:20:59,259 --> 00:21:05,470
require some sort of setup or a key

424
00:21:02,549 --> 00:21:10,330
simply because you know like hard wiring

425
00:21:05,470 --> 00:21:13,000
attacks exist and fascinating question

426
00:21:10,330 --> 00:21:16,299
is really can we get meaningful security

427
00:21:13,000 --> 00:21:18,160
even without like such randomized setup

428
00:21:16,299 --> 00:21:19,750
and this is not only

429
00:21:18,160 --> 00:21:21,490
interesting from a theoretical

430
00:21:19,750 --> 00:21:23,530
perspective it's also a practical

431
00:21:21,490 --> 00:21:26,020
concern because this is what we do all

432
00:21:23,530 --> 00:21:28,540
the time right we use shop for collision

433
00:21:26,020 --> 00:21:32,530
resistant we don't sample keys for

434
00:21:28,540 --> 00:21:34,180
collision resistant hash functions so in

435
00:21:32,530 --> 00:21:35,950
this talk and also in the previous ones

436
00:21:34,180 --> 00:21:38,350
we've seen that at least you can

437
00:21:35,950 --> 00:21:43,090
formulate meaningful security guarantees

438
00:21:38,350 --> 00:21:44,730
for such fixed functions or in that case

439
00:21:43,090 --> 00:21:48,850
it was

440
00:21:44,730 --> 00:21:52,000
Snorks and I think it's it's fascinating

441
00:21:48,850 --> 00:21:54,250
to understand you because we're speaking

442
00:21:52,000 --> 00:21:55,990
about the completely different type of

443
00:21:54,250 --> 00:21:59,380
hardness it's very different from the

444
00:21:55,990 --> 00:22:02,560
average case hardness we're used to

445
00:21:59,380 --> 00:22:05,530
inand love so much in in cryptography it

446
00:22:02,560 --> 00:22:09,100
would be a very interesting to get any

447
00:22:05,530 --> 00:22:11,320
kind of formal evidence beyond you know

448
00:22:09,100 --> 00:22:13,510
assuming this thing as an atomic

449
00:22:11,320 --> 00:22:16,210
assumption on a certain you know on

450
00:22:13,510 --> 00:22:18,250
shower or on a different function which

451
00:22:16,210 --> 00:22:20,530
i think is also reasonable but you know

452
00:22:18,250 --> 00:22:22,570
to revert it would be great if we can

453
00:22:20,530 --> 00:22:25,690
get like actual reductions to different

454
00:22:22,570 --> 00:22:28,450
forms of hardness so we're not there yet

455
00:22:25,690 --> 00:22:34,120
and I encourage all of you or some of

456
00:22:28,450 --> 00:22:37,890
you to think about it and this is all

457
00:22:34,120 --> 00:22:37,889
that I want to tell you

458
00:22:42,820 --> 00:22:46,659
we can hear any questions

459
00:22:48,820 --> 00:22:56,450
all right so let's sing near and

460
00:22:52,610 --> 00:22:56,449
[Applause]

