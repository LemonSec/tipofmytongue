1
00:00:04,870 --> 00:00:10,389
so as we said this talk is about the

2
00:00:07,630 --> 00:00:12,309
merger of two papers the first one by a

3
00:00:10,389 --> 00:00:14,620
propulsion I use and ammeter and the

4
00:00:12,309 --> 00:00:16,360
second one by Rachel and me and I'll

5
00:00:14,620 --> 00:00:19,390
start the presentation and then hand

6
00:00:16,360 --> 00:00:22,030
over to I used for the second part the

7
00:00:19,390 --> 00:00:23,710
goal of both papers was to construct in

8
00:00:22,030 --> 00:00:24,539
the suitability of possession without

9
00:00:23,710 --> 00:00:27,039
relying on

10
00:00:24,539 --> 00:00:29,440
multilinear maps and they both

11
00:00:27,039 --> 00:00:31,240
introduced a new type of pseudo

12
00:00:29,440 --> 00:00:35,620
randomness and use security

13
00:00:31,240 --> 00:00:38,320
amplification obfuscation takes a

14
00:00:35,620 --> 00:00:40,300
program say represented as a circuit

15
00:00:38,320 --> 00:00:42,309
that computes a function and turns it

16
00:00:40,300 --> 00:00:44,459
into another circuit that computes the

17
00:00:42,309 --> 00:00:46,328
same function such that this is

18
00:00:44,460 --> 00:00:48,520
unintelligible there are different ways

19
00:00:46,329 --> 00:00:50,410
how this can be formalized and the

20
00:00:48,520 --> 00:00:52,000
guarantee I or gives you is that if you

21
00:00:50,410 --> 00:00:54,578
have two circuits that compute the same

22
00:00:52,000 --> 00:00:57,399
function then their operations are

23
00:00:54,579 --> 00:00:59,710
indistinguishable intuitively this means

24
00:00:57,399 --> 00:01:02,050
that implementation differences in these

25
00:00:59,710 --> 00:01:04,509
circuits are hidden and as we know by

26
00:01:02,050 --> 00:01:06,250
now this notion is extremely useful and

27
00:01:04,509 --> 00:01:09,789
has tremendous applications in

28
00:01:06,250 --> 00:01:13,149
cryptography while we can already do

29
00:01:09,789 --> 00:01:15,039
many cool things without i/o as we know

30
00:01:13,149 --> 00:01:17,470
if you're allowed to use i/o and just

31
00:01:15,039 --> 00:01:19,330
some additional minimal things then this

32
00:01:17,470 --> 00:01:22,240
opens a whole new world of amazing

33
00:01:19,330 --> 00:01:24,819
things for many of which we don't know

34
00:01:22,240 --> 00:01:27,098
how to do them without i/o so whether

35
00:01:24,819 --> 00:01:30,700
under which assumptions i/o exists is an

36
00:01:27,099 --> 00:01:32,950
extremely important question first

37
00:01:30,700 --> 00:01:35,500
constructions of i/o relied on

38
00:01:32,950 --> 00:01:38,380
multilinear maps which themselves are

39
00:01:35,500 --> 00:01:40,630
very complex object which has led to

40
00:01:38,380 --> 00:01:42,250
many candidates for multilinear maps and

41
00:01:40,630 --> 00:01:44,110
attacks on this candidate said new

42
00:01:42,250 --> 00:01:46,300
candidates new attacks and so on and

43
00:01:44,110 --> 00:01:48,489
also direct attacks on these

44
00:01:46,300 --> 00:01:50,229
constructions and the new constructions

45
00:01:48,489 --> 00:01:54,039
that try to resist its attacks and more

46
00:01:50,229 --> 00:01:55,539
attacks and so on so this is kind of an

47
00:01:54,039 --> 00:01:57,849
unsatisfactory situation

48
00:01:55,539 --> 00:02:00,160
so what we would like to do is we want

49
00:01:57,849 --> 00:02:02,200
to avoid using multi linear maps and

50
00:02:00,160 --> 00:02:07,569
instead rely on assumptions that are

51
00:02:02,200 --> 00:02:09,848
easier to analyze and understand there's

52
00:02:07,569 --> 00:02:11,650
been an impressive line of previous

53
00:02:09,848 --> 00:02:14,379
research that has managed to bring down

54
00:02:11,650 --> 00:02:16,510
the decree needed for the multilinear

55
00:02:14,379 --> 00:02:17,590
maps from polynomial decree down to

56
00:02:16,510 --> 00:02:20,290
constant

57
00:02:17,590 --> 00:02:22,330
ultimately decrease just three so what

58
00:02:20,290 --> 00:02:24,790
is known so fast that we can get I or

59
00:02:22,330 --> 00:02:29,470
from three linear maps simple type of

60
00:02:24,790 --> 00:02:31,599
Phe and lwe so our goal was to now go

61
00:02:29,470 --> 00:02:34,390
just one step further and reduce the

62
00:02:31,599 --> 00:02:36,849
decree to two because for bilinear maps

63
00:02:34,390 --> 00:02:40,149
we have good candidates and these are

64
00:02:36,849 --> 00:02:42,579
well understood and so these are our

65
00:02:40,150 --> 00:02:45,160
results we essentially do get I offer

66
00:02:42,580 --> 00:02:49,060
from bilinear maps and again this plot

67
00:02:45,160 --> 00:02:50,890
local pH is and lwe but we also have to

68
00:02:49,060 --> 00:02:53,410
add some new assumption which is

69
00:02:50,890 --> 00:02:56,140
essentially a new type of randomness

70
00:02:53,410 --> 00:02:58,030
generator that has some weak hiding

71
00:02:56,140 --> 00:03:00,910
property and a simple structure and

72
00:02:58,030 --> 00:03:02,680
we'll discuss this in more detail but I

73
00:03:00,910 --> 00:03:05,260
first want to give you a very brief

74
00:03:02,680 --> 00:03:07,870
intuition about how our construction

75
00:03:05,260 --> 00:03:09,849
works the starting point of our

76
00:03:07,870 --> 00:03:13,319
construction as well as for previous i/o

77
00:03:09,849 --> 00:03:16,869
construction is that IO is implied by

78
00:03:13,319 --> 00:03:18,250
compact functional encryption function

79
00:03:16,870 --> 00:03:20,830
caption itself is a very fascinating

80
00:03:18,250 --> 00:03:24,100
object it allows you to encrypt some

81
00:03:20,830 --> 00:03:26,739
value X and then given a secret key for

82
00:03:24,100 --> 00:03:29,709
function f you can decrypt to obtain f

83
00:03:26,739 --> 00:03:33,010
of X and the security guarantee is that

84
00:03:29,709 --> 00:03:36,190
you learn nothing about X beyond f of X

85
00:03:33,010 --> 00:03:38,828
and compactness here means that the size

86
00:03:36,190 --> 00:03:40,750
of the ciphertext grows at most supply

87
00:03:38,829 --> 00:03:44,260
nearly in the size of the functions we

88
00:03:40,750 --> 00:03:46,989
want to compute so we only have to

89
00:03:44,260 --> 00:03:51,638
construct such an IV scheme and we need

90
00:03:46,989 --> 00:03:55,299
to do this for functions in nc0 so how

91
00:03:51,639 --> 00:03:57,430
can we construct such an F e scheme the

92
00:03:55,299 --> 00:03:59,650
basic approach here is to compare this

93
00:03:57,430 --> 00:04:01,690
two homomorphic encryption which has a

94
00:03:59,650 --> 00:04:04,239
similar structure it also allows you to

95
00:04:01,690 --> 00:04:07,900
encrypt some value X and then anyone can

96
00:04:04,239 --> 00:04:10,720
compute functions F on this ciphertext

97
00:04:07,900 --> 00:04:12,549
and then obtain a ciphertext for f of X

98
00:04:10,720 --> 00:04:14,620
and so the difference here's the

99
00:04:12,549 --> 00:04:18,070
decipher texts of course reveals nothing

100
00:04:14,620 --> 00:04:20,530
about f X so we need to find a way to

101
00:04:18,070 --> 00:04:23,190
decrypt the ciphertext in such a way

102
00:04:20,529 --> 00:04:26,200
that this only reveals f of X but not X

103
00:04:23,190 --> 00:04:28,030
and so the idea how we can do this is to

104
00:04:26,200 --> 00:04:30,700
again use the functional encryption to

105
00:04:28,030 --> 00:04:32,919
do this decryption now for the

106
00:04:30,700 --> 00:04:36,550
to make sense since we want to construct

107
00:04:32,920 --> 00:04:38,950
Fe of course this Fe should be for much

108
00:04:36,550 --> 00:04:41,230
simpler class of functions and in that

109
00:04:38,950 --> 00:04:44,469
case we obtain bootstrapping from simple

110
00:04:41,230 --> 00:04:46,750
Fe to full Fe and this is also approach

111
00:04:44,470 --> 00:04:50,080
that has been used before in different

112
00:04:46,750 --> 00:04:53,260
area constructions now the crucial

113
00:04:50,080 --> 00:04:56,349
question here is how simple this Fe

114
00:04:53,260 --> 00:04:59,260
scheme can be and so the simpler the

115
00:04:56,350 --> 00:05:01,210
better and what it essentially needs to

116
00:04:59,260 --> 00:05:02,800
be able to do is to evaluate the

117
00:05:01,210 --> 00:05:06,520
decryption of a homomorphic encryption

118
00:05:02,800 --> 00:05:07,930
scheme and luckily there are lwe pasted

119
00:05:06,520 --> 00:05:10,210
from Africa encryption schemes that have

120
00:05:07,930 --> 00:05:12,010
a very simple decryption they

121
00:05:10,210 --> 00:05:15,669
essentially just computed in our product

122
00:05:12,010 --> 00:05:18,460
and then if we encrypt bits reduce

123
00:05:15,670 --> 00:05:21,970
modulo to not so the inner product is

124
00:05:18,460 --> 00:05:23,440
very simple modular tool in principle is

125
00:05:21,970 --> 00:05:25,360
also simple but not if you want to

126
00:05:23,440 --> 00:05:28,780
express it as a polynomial of flow

127
00:05:25,360 --> 00:05:31,090
decree so but you can do you can just

128
00:05:28,780 --> 00:05:34,299
say okay let's not do the modular tool

129
00:05:31,090 --> 00:05:37,570
let's only compute the inner product if

130
00:05:34,300 --> 00:05:42,040
we do that we obtain f of X which we

131
00:05:37,570 --> 00:05:44,980
want plus some noise okay the issue with

132
00:05:42,040 --> 00:05:47,440
this is that this noise contains

133
00:05:44,980 --> 00:05:50,470
information about X we cannot just give

134
00:05:47,440 --> 00:05:53,590
this out in public we need to find a way

135
00:05:50,470 --> 00:05:57,040
to hide this noise to make this secure

136
00:05:53,590 --> 00:06:00,340
and the idea how we want to hide this is

137
00:05:57,040 --> 00:06:03,970
we just add some random value to it such

138
00:06:00,340 --> 00:06:06,280
that the sum hopefully hides this value

139
00:06:03,970 --> 00:06:08,200
EEP and this is an approach that has

140
00:06:06,280 --> 00:06:12,250
also been used before and is known as

141
00:06:08,200 --> 00:06:14,469
noise flooding or noise smudging and so

142
00:06:12,250 --> 00:06:16,600
this randomness that we add here this is

143
00:06:14,470 --> 00:06:18,610
precisely where we use this new type of

144
00:06:16,600 --> 00:06:21,280
randomness generator that I mentioned

145
00:06:18,610 --> 00:06:23,830
before so the question of how simple

146
00:06:21,280 --> 00:06:25,869
this F II scheme can be directly relates

147
00:06:23,830 --> 00:06:28,510
to how simple it is to generate this

148
00:06:25,870 --> 00:06:30,790
randomness so you want to make sure that

149
00:06:28,510 --> 00:06:34,690
it's as simple as possible and still

150
00:06:30,790 --> 00:06:37,300
able to hide this e and well our

151
00:06:34,690 --> 00:06:40,740
candidates essentially have decreed 2.5

152
00:06:37,300 --> 00:06:44,560
and I'll say later but what this means

153
00:06:40,740 --> 00:06:45,050
so how can we construct such a simple Fe

154
00:06:44,560 --> 00:06:47,090
scheme

155
00:06:45,050 --> 00:06:50,690
starting point is that it's known that

156
00:06:47,090 --> 00:06:54,109
bulimia Maps imply decree to functional

157
00:06:50,690 --> 00:06:55,849
encryption and by massaging these

158
00:06:54,110 --> 00:06:57,740
schemes appropriately we managed to

159
00:06:55,849 --> 00:07:01,509
extend them such that they also work for

160
00:06:57,740 --> 00:07:04,039
decree 2.5 so that's great

161
00:07:01,509 --> 00:07:07,280
caveat here is that for these schemes

162
00:07:04,039 --> 00:07:09,620
the outputs must be small small means

163
00:07:07,280 --> 00:07:12,080
polynomial in the security parameter and

164
00:07:09,620 --> 00:07:14,419
the reason is that they do computations

165
00:07:12,080 --> 00:07:16,370
in the exponent of some group and if you

166
00:07:14,419 --> 00:07:18,770
want to decrypt you essentially have to

167
00:07:16,370 --> 00:07:20,240
extract this exponent by prutte first

168
00:07:18,770 --> 00:07:22,849
which you can only do if this is from a

169
00:07:20,240 --> 00:07:25,039
small set so if you want to use this

170
00:07:22,849 --> 00:07:28,610
approach the randomness we can generate

171
00:07:25,039 --> 00:07:31,068
also must be small ok so let's do it

172
00:07:28,610 --> 00:07:32,810
with small randomness problem with that

173
00:07:31,069 --> 00:07:35,810
is that the small randomness cannot

174
00:07:32,810 --> 00:07:39,050
entirely hide this e as an example just

175
00:07:35,810 --> 00:07:42,229
look at one dimensional case where we

176
00:07:39,050 --> 00:07:45,860
have a uniform value of an interval - B

177
00:07:42,229 --> 00:07:48,229
- B now if we shift this by 1 then

178
00:07:45,860 --> 00:07:50,240
essentially at this corner cases the

179
00:07:48,229 --> 00:07:52,969
value is revealed and if the sum is

180
00:07:50,240 --> 00:07:56,030
minus B we know that e must be zero if

181
00:07:52,969 --> 00:07:59,180
the sum is B plus 1 we know that e must

182
00:07:56,030 --> 00:08:01,219
have been 1 and then if B is only

183
00:07:59,180 --> 00:08:02,990
polynomial then this will happen with

184
00:08:01,219 --> 00:08:05,690
non-negligible probability that we are

185
00:08:02,990 --> 00:08:07,880
in this despaired locations and that's

186
00:08:05,690 --> 00:08:10,340
not only true for a uniform distribution

187
00:08:07,880 --> 00:08:13,520
but for other distributions as well both

188
00:08:10,340 --> 00:08:15,469
polynomials support so that's kind of

189
00:08:13,520 --> 00:08:17,599
bad news but there's also some good news

190
00:08:15,469 --> 00:08:20,360
namely if we are not in this red area

191
00:08:17,599 --> 00:08:22,940
then e is actually hidden right so for

192
00:08:20,360 --> 00:08:27,139
example if the sum is zero we have no

193
00:08:22,940 --> 00:08:30,199
clue what evils okay so our goal is now

194
00:08:27,139 --> 00:08:33,770
to kind of formalize what this means to

195
00:08:30,199 --> 00:08:36,200
hide this noise in a weak sense and then

196
00:08:33,770 --> 00:08:38,260
obtain a function encryption scheme of

197
00:08:36,200 --> 00:08:42,169
some weak security which we then amplify

198
00:08:38,260 --> 00:08:43,968
and so the the two papers have like

199
00:08:42,169 --> 00:08:46,550
different approaches to generate this

200
00:08:43,969 --> 00:08:50,300
randomness and then also for the for the

201
00:08:46,550 --> 00:08:51,859
amplification and I'll now briefly talk

202
00:08:50,300 --> 00:08:56,359
about what we call pseudo floods

203
00:08:51,860 --> 00:08:58,670
matching generators they take a short

204
00:08:56,360 --> 00:09:02,090
seat which are an

205
00:08:58,670 --> 00:09:04,729
or recepients expand them to enter their

206
00:09:02,090 --> 00:09:07,010
1 plus epsilon elements for some

207
00:09:04,730 --> 00:09:08,570
constant epsilon and this stretch is

208
00:09:07,010 --> 00:09:12,680
basically what we need for the

209
00:09:08,570 --> 00:09:15,170
compactness of the fe scheme and so the

210
00:09:12,680 --> 00:09:18,050
outputs must now if you interpret them

211
00:09:15,170 --> 00:09:20,319
as integers be of small magnitude to be

212
00:09:18,050 --> 00:09:22,969
able to do this fruit force decryption

213
00:09:20,320 --> 00:09:25,760
and the security guarantee we want from

214
00:09:22,970 --> 00:09:28,700
this is if we add a noise vector to this

215
00:09:25,760 --> 00:09:31,520
output then this sum should reveal e

216
00:09:28,700 --> 00:09:33,770
only at a few bad coordinates and for

217
00:09:31,520 --> 00:09:37,670
all other coordinates this should be

218
00:09:33,770 --> 00:09:39,939
hidden this is the basic intuition ok so

219
00:09:37,670 --> 00:09:42,110
now what's this decree two point five

220
00:09:39,940 --> 00:09:44,600
essentially what we do is we want this

221
00:09:42,110 --> 00:09:47,660
hiding property to still hold every real

222
00:09:44,600 --> 00:09:50,330
part of the seat and then computations

223
00:09:47,660 --> 00:09:52,280
over this public input we only count

224
00:09:50,330 --> 00:09:54,260
half not so this means we essentially

225
00:09:52,280 --> 00:09:57,380
have a decree three polynomial but it's

226
00:09:54,260 --> 00:10:00,140
only decree two of our secret inputs so

227
00:09:57,380 --> 00:10:03,710
a bit more formally the seed consists of

228
00:10:00,140 --> 00:10:06,050
a public and a private part and we want

229
00:10:03,710 --> 00:10:08,870
that if you're given the public part of

230
00:10:06,050 --> 00:10:10,729
the seat then the PF key output should

231
00:10:08,870 --> 00:10:13,280
be indistinguishable from some

232
00:10:10,730 --> 00:10:16,010
distribution phi that has this hiding

233
00:10:13,280 --> 00:10:18,560
property which means that if you are

234
00:10:16,010 --> 00:10:22,670
given a plus Phi you cannot distinguish

235
00:10:18,560 --> 00:10:25,310
e from a fresh sample a prime that is

236
00:10:22,670 --> 00:10:27,740
equal to e only on these few bad

237
00:10:25,310 --> 00:10:30,349
coordinates and then you're also told

238
00:10:27,740 --> 00:10:33,560
they said I which is which a coordinates

239
00:10:30,350 --> 00:10:38,240
are bad this is essentially the DFG

240
00:10:33,560 --> 00:10:40,849
notion behalf and in fact it's enough if

241
00:10:38,240 --> 00:10:44,870
this property holds with someone of our

242
00:10:40,850 --> 00:10:48,260
poly probability now if we use this in

243
00:10:44,870 --> 00:10:51,680
our construction what we obtain is a

244
00:10:48,260 --> 00:10:54,200
theme that leaks the input X at some bad

245
00:10:51,680 --> 00:10:58,670
coordinates but at other coordinates the

246
00:10:54,200 --> 00:11:01,250
the X is hidden and now you have to

247
00:10:58,670 --> 00:11:03,979
essentially amplify this the security to

248
00:11:01,250 --> 00:11:06,590
deal with this leakage and to do so we

249
00:11:03,980 --> 00:11:08,810
introduce a new primitive which is a

250
00:11:06,590 --> 00:11:11,180
special type of a morphic secret sharing

251
00:11:08,810 --> 00:11:13,280
that we call bit fixing

252
00:11:11,180 --> 00:11:15,979
morphic sharing this allows us to

253
00:11:13,280 --> 00:11:18,829
basically share the inputs and do this

254
00:11:15,980 --> 00:11:21,380
in a clever way to deal with this

255
00:11:18,830 --> 00:11:24,650
leakage but I don't have time to discuss

256
00:11:21,380 --> 00:11:27,710
this in detail and will now hand over to

257
00:11:24,650 --> 00:11:29,900
I usually will tell you more about the

258
00:11:27,710 --> 00:11:36,020
assumptions and their construction thank

259
00:11:29,900 --> 00:11:38,810
you all right

260
00:11:36,020 --> 00:11:40,910
Thank You Christian so my quarter

261
00:11:38,810 --> 00:11:43,189
Christian talked about the overall

262
00:11:40,910 --> 00:11:46,189
approach that these two works follow and

263
00:11:43,190 --> 00:11:48,380
he also told about two aspects in which

264
00:11:46,190 --> 00:11:50,330
the artworks differ namely the

265
00:11:48,380 --> 00:11:52,820
randomness generation aspect and the

266
00:11:50,330 --> 00:11:54,770
hardness amplification aspect and

267
00:11:52,820 --> 00:11:56,660
towards the end he was talking about the

268
00:11:54,770 --> 00:11:59,990
notion of pseudo flood smudging

269
00:11:56,660 --> 00:12:02,650
generator now let me talk about how

270
00:11:59,990 --> 00:12:06,560
these aspects are handled by our work

271
00:12:02,650 --> 00:12:08,090
and in particular let me start with the

272
00:12:06,560 --> 00:12:11,119
notion of perturbation resilient

273
00:12:08,090 --> 00:12:14,000
generator so perturbation rezulin

274
00:12:11,120 --> 00:12:17,780
generator is also a non boolean PRG just

275
00:12:14,000 --> 00:12:20,390
like just like a PFG and the syntax is

276
00:12:17,780 --> 00:12:24,500
almost identical to us as that of a PFG

277
00:12:20,390 --> 00:12:26,630
in particular the delta r g r this takes

278
00:12:24,500 --> 00:12:29,120
as input and fields element as input and

279
00:12:26,630 --> 00:12:33,140
it outputs entity 1 plus epsilon

280
00:12:29,120 --> 00:12:36,550
integers for some positive epsilon so

281
00:12:33,140 --> 00:12:42,410
these parameters are set such that this

282
00:12:36,550 --> 00:12:44,359
PRG is expanding then as Christian was

283
00:12:42,410 --> 00:12:46,910
talking about the seed has a definitive

284
00:12:44,360 --> 00:12:49,400
struct structure seed can be formatted

285
00:12:46,910 --> 00:12:50,870
as has two parts there's a public part

286
00:12:49,400 --> 00:12:53,510
and that and there and there's a private

287
00:12:50,870 --> 00:12:56,930
part and then the PRG

288
00:12:53,510 --> 00:12:58,670
assumes a structure that is degree two

289
00:12:56,930 --> 00:13:02,800
computation over the private part

290
00:12:58,670 --> 00:13:05,420
whereas the total degree can be three

291
00:13:02,800 --> 00:13:08,449
and Christian was also mentioning about

292
00:13:05,420 --> 00:13:11,260
it that the output of the PRG is going

293
00:13:08,450 --> 00:13:11,260
to be polynomially bounded

294
00:13:11,560 --> 00:13:18,439
however the security notions in these

295
00:13:14,750 --> 00:13:19,820
two objects are slightly different we

296
00:13:18,440 --> 00:13:22,870
define the notion of perturbation

297
00:13:19,820 --> 00:13:25,690
resilience where think about

298
00:13:22,870 --> 00:13:30,460
a set of permutations Delta where Delta

299
00:13:25,690 --> 00:13:32,740
czar bounded by let's say n then it

300
00:13:30,460 --> 00:13:35,500
happens that following two distributions

301
00:13:32,740 --> 00:13:37,090
are mildly indistinguishable in the

302
00:13:35,500 --> 00:13:39,190
first distribution you have the public

303
00:13:37,090 --> 00:13:42,100
part of the seed along with the PRG

304
00:13:39,190 --> 00:13:43,960
output in the second distribution we

305
00:13:42,100 --> 00:13:47,920
have the public part of the seed again

306
00:13:43,960 --> 00:13:51,940
but now the PRG output is perturbed with

307
00:13:47,920 --> 00:13:53,439
these values Delta and what we ask for

308
00:13:51,940 --> 00:13:57,700
is a very modest form of

309
00:13:53,440 --> 00:14:00,010
indistinguishability that is we ask that

310
00:13:57,700 --> 00:14:02,830
for any computationally bounded at verse

311
00:14:00,010 --> 00:14:04,510
3 a the probability with which an

312
00:14:02,830 --> 00:14:06,760
adversity can distinguish between these

313
00:14:04,510 --> 00:14:12,550
two distributions is bounded by a

314
00:14:06,760 --> 00:14:15,220
probability as high as 0.99 now let me

315
00:14:12,550 --> 00:14:17,229
proceed on to talking about the

316
00:14:15,220 --> 00:14:20,590
assumptions on which you can build such

317
00:14:17,230 --> 00:14:24,160
an object so our assumption actually

318
00:14:20,590 --> 00:14:26,020
builds on our variant of lwe where let's

319
00:14:24,160 --> 00:14:27,969
say you have an R distribution Chi which

320
00:14:26,020 --> 00:14:31,030
has a standard polynomial bound its

321
00:14:27,970 --> 00:14:33,310
standard deviation of n now you can

322
00:14:31,030 --> 00:14:36,400
think of some parameters for the prime

323
00:14:33,310 --> 00:14:38,020
as well as as well as the dimension I'm

324
00:14:36,400 --> 00:14:42,760
not going to bore you with parameters

325
00:14:38,020 --> 00:14:46,540
but what we have is so what algebra says

326
00:14:42,760 --> 00:14:48,819
is that we have this tuple which is set

327
00:14:46,540 --> 00:14:50,319
of vectors a I along with inner product

328
00:14:48,820 --> 00:14:54,000
of AI with the secret added with some

329
00:14:50,320 --> 00:14:56,800
error e this tuple looks pseudo-random

330
00:14:54,000 --> 00:14:58,930
so unfortunately we do not quite know

331
00:14:56,800 --> 00:15:01,630
how to build AI or based on a lovely but

332
00:14:58,930 --> 00:15:03,880
what we can do is base it on an

333
00:15:01,630 --> 00:15:07,120
assumption where we give out these cell

334
00:15:03,880 --> 00:15:09,580
debris samples along with this leakage

335
00:15:07,120 --> 00:15:13,600
on the error and to independently

336
00:15:09,580 --> 00:15:16,780
sampled vectors y&z so we give out so we

337
00:15:13,600 --> 00:15:19,780
give out this and every sample and this

338
00:15:16,780 --> 00:15:21,610
polynomial leakage which is going to be

339
00:15:19,780 --> 00:15:23,980
actually a degree three polynomial on

340
00:15:21,610 --> 00:15:27,340
the error and these two variables Y and

341
00:15:23,980 --> 00:15:29,080
Z in the next slide I will make formal

342
00:15:27,340 --> 00:15:34,360
how this part will look like and what is

343
00:15:29,080 --> 00:15:35,980
the assumption that we need so now I'm

344
00:15:34,360 --> 00:15:36,579
going to talk about what those

345
00:15:35,980 --> 00:15:39,220
polynomials

346
00:15:36,579 --> 00:15:42,998
correspond to and in fact there is a lot

347
00:15:39,220 --> 00:15:45,549
of slack on how on how we can use how

348
00:15:42,999 --> 00:15:47,110
can instantiate these polynomials and we

349
00:15:45,549 --> 00:15:50,139
have couple of instantiation which you

350
00:15:47,110 --> 00:15:52,199
can look in the paper for this talk let

351
00:15:50,139 --> 00:15:56,739
me be very concrete and give you a

352
00:15:52,199 --> 00:16:00,579
single candidate and the candidate is is

353
00:15:56,739 --> 00:16:03,339
just this so the sampler takes has input

354
00:16:00,579 --> 00:16:05,649
some parameter N and then it will output

355
00:16:03,339 --> 00:16:08,980
n to the one point four degree three

356
00:16:05,649 --> 00:16:10,540
polynomial here each polynomial is going

357
00:16:08,980 --> 00:16:13,809
to have the following structure each

358
00:16:10,540 --> 00:16:16,299
monomial has degree one in e degree one

359
00:16:13,809 --> 00:16:17,829
and Y and degree one and Z so they are

360
00:16:16,299 --> 00:16:21,129
homogeneous and degree three and linear

361
00:16:17,829 --> 00:16:23,349
in each variables and then the

362
00:16:21,129 --> 00:16:24,850
coefficients of these polynomials are

363
00:16:23,350 --> 00:16:26,399
randomly chosen from plus one and minus

364
00:16:24,850 --> 00:16:29,410
one

365
00:16:26,399 --> 00:16:31,989
finally the the number of monomials that

366
00:16:29,410 --> 00:16:35,799
occur inside each polynomial is going to

367
00:16:31,989 --> 00:16:38,230
be exactly n to the point one so let me

368
00:16:35,799 --> 00:16:41,379
repeat we have n to the one point four

369
00:16:38,230 --> 00:16:43,179
degree three polynomial where you form

370
00:16:41,379 --> 00:16:45,790
each polynomial by selecting N to the

371
00:16:43,179 --> 00:16:48,100
point one monomials randomly like this

372
00:16:45,790 --> 00:16:49,929
and then randomly assigning plus one

373
00:16:48,100 --> 00:16:54,939
minus one signs for them and adding them

374
00:16:49,929 --> 00:16:57,100
up so with and so this candidate also

375
00:16:54,939 --> 00:17:01,599
can be used to instantiate both Delta IJ

376
00:16:57,100 --> 00:17:02,949
and pfg but now let me focus on the

377
00:17:01,600 --> 00:17:06,789
assumption that we can use to construct

378
00:17:02,949 --> 00:17:08,949
Delta G from the from this sampler so

379
00:17:06,789 --> 00:17:11,319
the assumption is really simple and it

380
00:17:08,949 --> 00:17:12,339
can actually fit in just one slide the

381
00:17:11,319 --> 00:17:14,260
assumption just talks about

382
00:17:12,339 --> 00:17:16,599
indistinguishability of following two

383
00:17:14,260 --> 00:17:19,809
distributions in the first distribution

384
00:17:16,599 --> 00:17:23,619
you have lwe sampled as i was talking

385
00:17:19,809 --> 00:17:25,269
about and along with that we have the

386
00:17:23,619 --> 00:17:27,609
polynomials that were output by the

387
00:17:25,269 --> 00:17:30,580
sampler they are evaluated on the error

388
00:17:27,609 --> 00:17:32,289
e along with two independently sample

389
00:17:30,580 --> 00:17:35,889
vectors y&z also from the error

390
00:17:32,289 --> 00:17:41,110
distribution in the second distribution

391
00:17:35,889 --> 00:17:44,080
we have LW samples as before but now the

392
00:17:41,110 --> 00:17:46,270
polynomial samples QL of a y and z they

393
00:17:44,080 --> 00:17:49,750
are perturbed with adversarially chosen

394
00:17:46,270 --> 00:17:51,700
values Delta L and again by adversarial

395
00:17:49,750 --> 00:17:53,700
mean that they are allowed to depend on

396
00:17:51,700 --> 00:18:01,720
the polynomial but not on the header and

397
00:17:53,700 --> 00:18:03,430
y&z inputs of of the seed and and I and

398
00:18:01,720 --> 00:18:05,710
what we ask is that these two

399
00:18:03,430 --> 00:18:09,370
distributions are very mildly

400
00:18:05,710 --> 00:18:12,850
indistinguishable again very mildly I

401
00:18:09,370 --> 00:18:16,810
mean I mean that for any adversary which

402
00:18:12,850 --> 00:18:18,429
is bound efficiently bounded the

403
00:18:16,810 --> 00:18:19,450
probability with which an adversity can

404
00:18:18,430 --> 00:18:22,900
distinguish between these two

405
00:18:19,450 --> 00:18:24,640
distribution is bounded by 0.99 so in

406
00:18:22,900 --> 00:18:27,490
particular our assumption can hold even

407
00:18:24,640 --> 00:18:32,170
if an adversity can distinguish with 99%

408
00:18:27,490 --> 00:18:35,590
but not beyond and I also like to

409
00:18:32,170 --> 00:18:37,150
mention why this 99% is unnecessary so

410
00:18:35,590 --> 00:18:39,610
Christian already given in a lot of

411
00:18:37,150 --> 00:18:42,490
intuition about it the the values of the

412
00:18:39,610 --> 00:18:46,179
polynomials the coefficients are R plus

413
00:18:42,490 --> 00:18:48,310
1 minus 1 the inputs EA by NZ they are

414
00:18:46,180 --> 00:18:50,320
bounded so the evaluation is going to be

415
00:18:48,310 --> 00:18:51,970
a bounded polynomial so with bounded

416
00:18:50,320 --> 00:18:56,710
polynomial it's actually unreasonable to

417
00:18:51,970 --> 00:18:58,480
assume full security although we could

418
00:18:56,710 --> 00:19:01,480
have still assumed 1 by security

419
00:18:58,480 --> 00:19:03,010
parameter of indistinguishability but we

420
00:19:01,480 --> 00:19:05,550
actually are very conservative when we

421
00:19:03,010 --> 00:19:11,170
ask for just 99 percent

422
00:19:05,550 --> 00:19:13,330
indistinguishability all right so I told

423
00:19:11,170 --> 00:19:15,520
you about the assumption now let me talk

424
00:19:13,330 --> 00:19:17,230
about how you can build these objects

425
00:19:15,520 --> 00:19:21,010
Delta G and a PFG

426
00:19:17,230 --> 00:19:25,210
from from such polynomials and algebra

427
00:19:21,010 --> 00:19:31,120
samples so this was a relatively example

428
00:19:25,210 --> 00:19:32,950
this was a polynomial leakage then what

429
00:19:31,120 --> 00:19:35,139
we will do is that will instantiate that

430
00:19:32,950 --> 00:19:38,470
this part del W part is the public part

431
00:19:35,140 --> 00:19:40,540
of the seed and then we will we will

432
00:19:38,470 --> 00:19:44,230
just let this be the PRG output the

433
00:19:40,540 --> 00:19:46,720
polynomial evaluation now observe that

434
00:19:44,230 --> 00:19:48,850
in order to go from a live example to

435
00:19:46,720 --> 00:19:51,460
this polynomial leakages all we need is

436
00:19:48,850 --> 00:19:54,939
a private part of the seed which looks

437
00:19:51,460 --> 00:19:56,650
like s tensor y MZ and it's using simple

438
00:19:54,940 --> 00:19:58,810
algebra you can see that you can derive

439
00:19:56,650 --> 00:20:02,640
from C a public part of the seed to the

440
00:19:58,810 --> 00:20:05,100
PRG output using just degree 2

441
00:20:02,640 --> 00:20:07,320
the operations I won't have time to talk

442
00:20:05,100 --> 00:20:08,879
about it but you should it's really easy

443
00:20:07,320 --> 00:20:14,668
and you can look at in the paper for

444
00:20:08,880 --> 00:20:16,470
details so another aspect that I want to

445
00:20:14,669 --> 00:20:19,320
talk about is the hardness amplification

446
00:20:16,470 --> 00:20:20,610
aspect so as you saw that the

447
00:20:19,320 --> 00:20:21,928
assumptions that we have they don't

448
00:20:20,610 --> 00:20:24,269
provide full security and there is

449
00:20:21,929 --> 00:20:26,549
always an advantage loss in in either

450
00:20:24,269 --> 00:20:28,350
both these assumptions so we actually

451
00:20:26,549 --> 00:20:30,330
need to build a machinery which allows

452
00:20:28,350 --> 00:20:34,799
you to translate from a weak security to

453
00:20:30,330 --> 00:20:37,080
full security and in in a GS work what

454
00:20:34,799 --> 00:20:39,809
we can do is we can build a general

455
00:20:37,080 --> 00:20:41,519
compiler which says that if you are

456
00:20:39,809 --> 00:20:47,549
willing to assume sub-exponential

457
00:20:41,519 --> 00:20:50,610
hardness of lwe then you can go from you

458
00:20:47,549 --> 00:20:52,710
can use a any any a function encryption

459
00:20:50,610 --> 00:20:55,620
scheme with weak security that is

460
00:20:52,710 --> 00:20:58,200
advantage of 1 minus 1 by poly lambda

461
00:20:55,620 --> 00:21:01,289
and you can convert it and generically

462
00:20:58,200 --> 00:21:06,570
to a fully secure Fe and then using that

463
00:21:01,289 --> 00:21:09,990
we can ok go all the way to i/o the

464
00:21:06,570 --> 00:21:12,600
linear network is slightly different in

465
00:21:09,990 --> 00:21:15,510
this way they use leakage resilient

466
00:21:12,600 --> 00:21:17,850
cryptographic techniques to argue such

467
00:21:15,510 --> 00:21:20,010
an amplification for their scheme so

468
00:21:17,850 --> 00:21:22,049
there are new and beautiful ideas in

469
00:21:20,010 --> 00:21:23,850
both these work and I would I would

470
00:21:22,049 --> 00:21:29,039
encourage you to look at the paper for

471
00:21:23,850 --> 00:21:30,990
details all right so with the remaining

472
00:21:29,039 --> 00:21:33,210
time left let me just spend couple of

473
00:21:30,990 --> 00:21:35,130
minutes on the kinds of crypt analysis

474
00:21:33,210 --> 00:21:38,340
that we have done on these assumptions

475
00:21:35,130 --> 00:21:41,460
so first we can already show some kind

476
00:21:38,340 --> 00:21:44,070
of sum of square lower bounds against

477
00:21:41,460 --> 00:21:47,549
sub exponential time SDP adversaries

478
00:21:44,070 --> 00:21:50,070
which apply to a mathematical problem

479
00:21:47,549 --> 00:21:52,769
which is very related to these kind of

480
00:21:50,070 --> 00:21:57,269
assumptions I will talk about it in the

481
00:21:52,769 --> 00:22:00,029
next slide but what it shows is that we

482
00:21:57,269 --> 00:22:02,789
believe that such a lower bound is an

483
00:22:00,029 --> 00:22:05,429
evidence of security against sum of

484
00:22:02,789 --> 00:22:08,279
squares adversaries and also algorithms

485
00:22:05,429 --> 00:22:09,779
such as spectral attacks and linear

486
00:22:08,279 --> 00:22:12,000
programming attacks just because they

487
00:22:09,779 --> 00:22:15,149
are known to be inferior to sum of

488
00:22:12,000 --> 00:22:16,140
squares algorithm and then we also ran

489
00:22:15,149 --> 00:22:18,510
extensive

490
00:22:16,140 --> 00:22:21,210
recent experiments and so far we were

491
00:22:18,510 --> 00:22:25,350
not we were not able to observe anything

492
00:22:21,210 --> 00:22:28,620
which seemed to be breaking our

493
00:22:25,350 --> 00:22:31,350
assumption that said gradient descent is

494
00:22:28,620 --> 00:22:33,419
an algorithm where we actually need to

495
00:22:31,350 --> 00:22:35,010
come up with a theoretical framework by

496
00:22:33,420 --> 00:22:38,390
which we can analyze these things

497
00:22:35,010 --> 00:22:42,680
because it's really hard to figure out

498
00:22:38,390 --> 00:22:45,420
how powerful gradient descent can be

499
00:22:42,680 --> 00:22:47,160
there are also algorithms about which we

500
00:22:45,420 --> 00:22:50,370
do not know how to reason about at all

501
00:22:47,160 --> 00:22:53,070
so for example since we are giving out

502
00:22:50,370 --> 00:22:55,949
leakages in terms of LW sample and the

503
00:22:53,070 --> 00:22:58,770
polynomial evaluation a lattice attacks

504
00:22:55,950 --> 00:23:01,500
are very reasonable to assume however we

505
00:22:58,770 --> 00:23:04,020
didn't just do not know how to analyze

506
00:23:01,500 --> 00:23:06,990
either positively or negatively lattice

507
00:23:04,020 --> 00:23:09,720
attacks on this assumption and finally

508
00:23:06,990 --> 00:23:11,910
there are also a hybrid attacks where

509
00:23:09,720 --> 00:23:16,940
you will be you can use two different

510
00:23:11,910 --> 00:23:19,500
algorithms and and use their results to

511
00:23:16,940 --> 00:23:21,450
derive some kind of attack for example

512
00:23:19,500 --> 00:23:23,040
one reasonable strategy could be to use

513
00:23:21,450 --> 00:23:26,010
lattice algorithm in conjunction with

514
00:23:23,040 --> 00:23:28,830
sum of squares algorithm and feed it

515
00:23:26,010 --> 00:23:31,650
feed input of output of one algorithm to

516
00:23:28,830 --> 00:23:34,949
the other but again we do not know how

517
00:23:31,650 --> 00:23:37,230
to argue about this so the takeaway

518
00:23:34,950 --> 00:23:38,580
point from this slide is that this is

519
00:23:37,230 --> 00:23:40,050
really an open area and I would

520
00:23:38,580 --> 00:23:42,629
encourage all of you to think about

521
00:23:40,050 --> 00:23:47,070
krypton and analysis of these

522
00:23:42,630 --> 00:23:48,930
assumptions finally with just one minute

523
00:23:47,070 --> 00:23:52,710
I have let me talk about the sum of

524
00:23:48,930 --> 00:23:54,750
square lower bound that we can show so

525
00:23:52,710 --> 00:23:57,060
this is something that I also talked

526
00:23:54,750 --> 00:23:59,430
about in the crypto workshop just a

527
00:23:57,060 --> 00:24:03,300
couple of days ago and in a follow-up

528
00:23:59,430 --> 00:24:06,120
work with was Sam probation width what

529
00:24:03,300 --> 00:24:07,800
we can show is that this is highly

530
00:24:06,120 --> 00:24:09,750
informal what we can roughly show is

531
00:24:07,800 --> 00:24:12,030
that any sum of squares algorithm

532
00:24:09,750 --> 00:24:14,850
running algorithm running in time which

533
00:24:12,030 --> 00:24:17,370
is bounded sub-exponential we cannot do

534
00:24:14,850 --> 00:24:19,649
the following we can't take these

535
00:24:17,370 --> 00:24:24,080
leakages polynomial evaluations and

536
00:24:19,650 --> 00:24:26,890
recover the output the input of the

537
00:24:24,080 --> 00:24:30,669
polynomial

538
00:24:26,890 --> 00:24:32,710
another an observation here is that we

539
00:24:30,670 --> 00:24:34,480
have completely ignored ILWU leakage and

540
00:24:32,710 --> 00:24:39,640
the reason for that is we just do not

541
00:24:34,480 --> 00:24:41,770
know how to incorporate any finite field

542
00:24:39,640 --> 00:24:43,750
arithmetic into the framework of sum of

543
00:24:41,770 --> 00:24:45,550
squares and so this is also an

544
00:24:43,750 --> 00:24:48,850
interesting problem that you should all

545
00:24:45,550 --> 00:24:51,639
think about and with this I would like

546
00:24:48,850 --> 00:24:53,860
to conclude my talk and please feel free

547
00:24:51,640 --> 00:25:03,160
to ask either me or Christian any of the

548
00:24:53,860 --> 00:25:10,659
questions you have you may have any

549
00:25:03,160 --> 00:25:12,430
questions for the two speakers okay

550
00:25:10,660 --> 00:25:12,920
let's think all the three speakers of

551
00:25:12,430 --> 00:25:17,380
decision

552
00:25:12,920 --> 00:25:17,380
[Applause]

