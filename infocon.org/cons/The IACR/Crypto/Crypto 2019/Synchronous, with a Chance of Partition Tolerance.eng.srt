1
00:00:05,130 --> 00:00:10,809
okay thank you much hi everyone my name

2
00:00:08,680 --> 00:00:13,480
is Phil cool I am a PhD student from

3
00:00:10,809 --> 00:00:15,790
Cornell University today I'm going to

4
00:00:13,480 --> 00:00:17,470
talk about her work are we thinking the

5
00:00:15,790 --> 00:00:20,918
classical synchronous model in

6
00:00:17,470 --> 00:00:23,410
distributed consensus and our proposal

7
00:00:20,919 --> 00:00:28,300
of a refinement of synchrony to make it

8
00:00:23,410 --> 00:00:31,140
more robust and partition tolerant in

9
00:00:28,300 --> 00:00:33,250
this talk our first give an example of

10
00:00:31,140 --> 00:00:36,340
protocol that worked in synchronous

11
00:00:33,250 --> 00:00:39,129
network and then described a scenario in

12
00:00:36,340 --> 00:00:41,260
which with this protocol a benign

13
00:00:39,129 --> 00:00:44,320
failure can cause real world financial

14
00:00:41,260 --> 00:00:46,420
loss to users to show why we think the

15
00:00:44,320 --> 00:00:49,239
classical synchronous network assumption

16
00:00:46,420 --> 00:00:53,019
is not suitable for practical use cases

17
00:00:49,239 --> 00:00:56,230
to fix a problem I will then give our

18
00:00:53,019 --> 00:00:57,969
proposal of the new model with better

19
00:00:56,230 --> 00:01:01,029
robustness and partition tolerance and

20
00:00:57,969 --> 00:01:09,940
then give a fix to the protocol to make

21
00:01:01,030 --> 00:01:11,980
it work in a new model oh okay so before

22
00:01:09,940 --> 00:01:14,020
talking about any specific protocols

23
00:01:11,980 --> 00:01:16,780
let me first quickly recap the consensus

24
00:01:14,020 --> 00:01:18,789
goal we want to achieve all of these

25
00:01:16,780 --> 00:01:22,030
public blockchain protocols like beacon

26
00:01:18,790 --> 00:01:24,910
Assyrian all those pbft style protocols

27
00:01:22,030 --> 00:01:27,010
they want to reach this state machine

28
00:01:24,910 --> 00:01:29,530
application notion we say they want to

29
00:01:27,010 --> 00:01:33,490
have honest notes agree and linearly

30
00:01:29,530 --> 00:01:35,110
ordered lock to be more specific we want

31
00:01:33,490 --> 00:01:37,570
to have both consistency and liveness

32
00:01:35,110 --> 00:01:39,190
but consistency would mean that all of

33
00:01:37,570 --> 00:01:41,619
the honest notes should agree on the

34
00:01:39,190 --> 00:01:44,020
same lock and by liveness will mean that

35
00:01:41,620 --> 00:01:47,220
any transaction that appeared network

36
00:01:44,020 --> 00:01:49,810
should be confirmed within a short time

37
00:01:47,220 --> 00:01:51,539
so now let's take a look at a very

38
00:01:49,810 --> 00:01:55,720
simple voting protocol that working

39
00:01:51,540 --> 00:01:58,590
synchronous network the the protocol

40
00:01:55,720 --> 00:02:01,870
wrong with n nodes one of them is a

41
00:01:58,590 --> 00:02:04,540
proposer and the other nodes here as if

42
00:02:01,870 --> 00:02:05,830
superheroes are voters some of these

43
00:02:04,540 --> 00:02:08,500
nodes can be corrupt

44
00:02:05,830 --> 00:02:11,260
like interlopers crap and when some

45
00:02:08,500 --> 00:02:13,120
transaction comes the proposal first

46
00:02:11,260 --> 00:02:15,969
signs the transaction with a sequence

47
00:02:13,120 --> 00:02:18,520
number and proposes the distraction to

48
00:02:15,969 --> 00:02:21,190
the voters I think the

49
00:02:18,520 --> 00:02:23,950
and seeing the proposal the voters will

50
00:02:21,190 --> 00:02:26,320
vote for this proposal the important

51
00:02:23,950 --> 00:02:28,480
thing here is the honest note will only

52
00:02:26,320 --> 00:02:32,590
vote for one transaction for each

53
00:02:28,480 --> 00:02:35,109
sequence number and I'm collecting

54
00:02:32,590 --> 00:02:39,430
enough number of votes for the same

55
00:02:35,110 --> 00:02:40,960
transaction the proposer used is false

56
00:02:39,430 --> 00:02:43,420
to form an authorization for the

57
00:02:40,960 --> 00:02:46,090
transaction and send not wretched not

58
00:02:43,420 --> 00:02:48,429
reddish and back to the voters I've seen

59
00:02:46,090 --> 00:02:51,510
the notarization of a transaction note

60
00:02:48,430 --> 00:02:54,040
things the transaction is confirmed so

61
00:02:51,510 --> 00:02:57,429
how many votes are enough to confirm

62
00:02:54,040 --> 00:03:00,700
transaction if we assume that less than

63
00:02:57,430 --> 00:03:02,650
one half of voters are corrupt then we

64
00:03:00,700 --> 00:03:05,980
need to collect at least three quarters

65
00:03:02,650 --> 00:03:08,680
of votes to confirm a transaction the

66
00:03:05,980 --> 00:03:10,989
consistency proof it's just a simple

67
00:03:08,680 --> 00:03:13,240
pigeonhole principle map and I will not

68
00:03:10,990 --> 00:03:15,750
go to the details of it but it only

69
00:03:13,240 --> 00:03:18,820
relies on honest majority assumption

70
00:03:15,750 --> 00:03:21,280
however because now we need to wait for

71
00:03:18,820 --> 00:03:23,549
three quarters of votes honest majority

72
00:03:21,280 --> 00:03:26,020
assumption is not enough for liveness if

73
00:03:23,550 --> 00:03:28,720
more than one quarter of nodes are

74
00:03:26,020 --> 00:03:30,640
corrupt or if the proposer is corrupt

75
00:03:28,720 --> 00:03:34,810
and they just keep silent the protocol

76
00:03:30,640 --> 00:03:36,369
can stop so the challenge here is how to

77
00:03:34,810 --> 00:03:39,070
achieve lightness with just honest

78
00:03:36,370 --> 00:03:43,060
majority assumption here we make use of

79
00:03:39,070 --> 00:03:45,790
a slow chain we use this voting process

80
00:03:43,060 --> 00:03:48,010
at fast paths and if something bad

81
00:03:45,790 --> 00:03:51,160
happens the first five stops people will

82
00:03:48,010 --> 00:03:53,739
detect it and fall back to a slow chain

83
00:03:51,160 --> 00:03:55,900
which can guarantee both consistency and

84
00:03:53,740 --> 00:04:00,790
liveness with honest maturity assumption

85
00:03:55,900 --> 00:04:02,970
such as Bitcoin or cerium will fall it

86
00:04:00,790 --> 00:04:05,380
back one of the challenges that

87
00:04:02,970 --> 00:04:09,430
different node might have different view

88
00:04:05,380 --> 00:04:11,410
of the fast path lab so here people need

89
00:04:09,430 --> 00:04:14,650
to reach agreement on the fast path log

90
00:04:11,410 --> 00:04:16,988
and slow chain so they are required to

91
00:04:14,650 --> 00:04:19,540
post all of their confirmed transaction

92
00:04:16,988 --> 00:04:22,599
and to slow chain after they reach in

93
00:04:19,540 --> 00:04:25,480
the agreement they can always react the

94
00:04:22,600 --> 00:04:31,210
proposer or the voters to read start the

95
00:04:25,480 --> 00:04:32,460
fast path so now we have a protocol with

96
00:04:31,210 --> 00:04:35,260
responsiveness

97
00:04:32,460 --> 00:04:37,000
with honest majority assumption now we

98
00:04:35,260 --> 00:04:38,980
can guarantee both consistency and

99
00:04:37,000 --> 00:04:42,280
lightness because we rely on slow chain

100
00:04:38,980 --> 00:04:44,260
and if the condition is good enough we

101
00:04:42,280 --> 00:04:46,510
can actually have a protocol that can

102
00:04:44,260 --> 00:04:51,099
confirm a transaction with one round of

103
00:04:46,510 --> 00:04:52,930
voting however as I said sorry actually

104
00:04:51,100 --> 00:04:55,120
the protocol I described here is a

105
00:04:52,930 --> 00:04:56,950
simplified version of Cinderella by

106
00:04:55,120 --> 00:04:59,560
rafasa annealing should be published in

107
00:04:56,950 --> 00:05:01,659
Europe 10 2018

108
00:04:59,560 --> 00:05:03,130
it is a peer-reviewed consensus protocol

109
00:05:01,660 --> 00:05:06,580
with rigorous mathematical proofs

110
00:05:03,130 --> 00:05:09,430
however as I said before I am going to

111
00:05:06,580 --> 00:05:12,550
describe a scenario in which with this

112
00:05:09,430 --> 00:05:15,550
protocol a confirmed transaction can

113
00:05:12,550 --> 00:05:17,290
somehow be undone by the network even if

114
00:05:15,550 --> 00:05:20,410
none of the node in the network is

115
00:05:17,290 --> 00:05:22,840
malicious so in this scenario a

116
00:05:20,410 --> 00:05:25,150
transaction comes the proposal proposes

117
00:05:22,840 --> 00:05:27,820
it and voters vote for it forms

118
00:05:25,150 --> 00:05:30,250
notarization and send notarization back

119
00:05:27,820 --> 00:05:32,469
to voters but right after sending the

120
00:05:30,250 --> 00:05:35,080
notarization to card base node the

121
00:05:32,470 --> 00:05:37,330
proposer drops offline so at this time

122
00:05:35,080 --> 00:05:40,599
point the canvas node becomes only one

123
00:05:37,330 --> 00:05:42,310
who sees no notarization the common base

124
00:05:40,600 --> 00:05:45,130
node thinks this transaction is

125
00:05:42,310 --> 00:05:47,260
confirmed and it tells user saying that

126
00:05:45,130 --> 00:05:49,690
hey these transactions confirm someone

127
00:05:47,260 --> 00:05:52,539
want to buy a Ferrari car and the user

128
00:05:49,690 --> 00:05:55,240
think ok I received the money so I

129
00:05:52,540 --> 00:05:57,160
deliver my car but unfortunately right

130
00:05:55,240 --> 00:05:59,470
after telling the user about the

131
00:05:57,160 --> 00:06:03,190
confirmation the comp is not also jokes

132
00:05:59,470 --> 00:06:05,290
offline and now all of the other nerves

133
00:06:03,190 --> 00:06:07,060
detect that the first pass stopped for a

134
00:06:05,290 --> 00:06:10,300
long time so they decide to fall back to

135
00:06:07,060 --> 00:06:12,190
scroll chain as mentioned before when

136
00:06:10,300 --> 00:06:14,380
falling back every node are supposed to

137
00:06:12,190 --> 00:06:16,660
post all of their confirm transaction on

138
00:06:14,380 --> 00:06:18,340
disclosure and the compas node is also

139
00:06:16,660 --> 00:06:20,380
supposed to do so but because it is

140
00:06:18,340 --> 00:06:24,250
offline it fails to post this

141
00:06:20,380 --> 00:06:26,650
transaction after a while after after a

142
00:06:24,250 --> 00:06:28,960
while when the con based note comes back

143
00:06:26,650 --> 00:06:31,810
online all of the other nodes have

144
00:06:28,960 --> 00:06:35,409
already read bootstrap a new fast path

145
00:06:31,810 --> 00:06:39,700
and that transaction is not included in

146
00:06:35,410 --> 00:06:42,250
anyone elses log so in this case the

147
00:06:39,700 --> 00:06:45,159
transaction is actually been undone by

148
00:06:42,250 --> 00:06:49,509
the rest of network and the user lose

149
00:06:45,159 --> 00:06:52,360
both car and money it sounds horrible

150
00:06:49,509 --> 00:06:56,229
right what I think has been confirmed

151
00:06:52,360 --> 00:06:58,839
can be undone but Network even if I

152
00:06:56,229 --> 00:07:00,789
didn't do anything wrong or perhaps I

153
00:06:58,839 --> 00:07:04,599
don't know I don't even know that I am

154
00:07:00,789 --> 00:07:07,089
offline because I'm did asked so how can

155
00:07:04,599 --> 00:07:11,919
a properly secure protocol allow this

156
00:07:07,089 --> 00:07:16,619
kind of funny behavior that is because

157
00:07:11,919 --> 00:07:19,568
the protocol use synchronous assumption

158
00:07:16,619 --> 00:07:23,769
so what is assumed in a synchronous

159
00:07:19,569 --> 00:07:26,019
network in a synchronous network the

160
00:07:23,769 --> 00:07:28,300
messages between honest nodes are

161
00:07:26,019 --> 00:07:32,259
required to be delivered within doubt

162
00:07:28,300 --> 00:07:35,110
around if any node fails to satisfy this

163
00:07:32,259 --> 00:07:37,659
requirement itself is considered

164
00:07:35,110 --> 00:07:39,789
dishonest and the protocol never

165
00:07:37,659 --> 00:07:44,139
promises any consensus for dishonest

166
00:07:39,789 --> 00:07:46,748
node but actually this assumption is not

167
00:07:44,139 --> 00:07:48,579
practical in real world especially if

168
00:07:46,749 --> 00:07:50,860
you want your protocol to run for a long

169
00:07:48,579 --> 00:07:54,689
time like in 10 years even Google

170
00:07:50,860 --> 00:08:00,490
Facebook server can fill federal times

171
00:07:54,689 --> 00:08:02,649
so how can we fix this problem this

172
00:08:00,490 --> 00:08:06,179
concern is not a new concern and

173
00:08:02,649 --> 00:08:09,189
actually people have solution for it

174
00:08:06,179 --> 00:08:11,708
which is another timing model has been

175
00:08:09,189 --> 00:08:14,979
studied for more than 30 years partial

176
00:08:11,709 --> 00:08:17,769
synchrony so in purchasing prunus

177
00:08:14,979 --> 00:08:19,539
network the messages message delay

178
00:08:17,769 --> 00:08:22,360
between the honest node can be

179
00:08:19,539 --> 00:08:24,429
arbitrarily long or actually there there

180
00:08:22,360 --> 00:08:29,169
is no upper bound assumption on the

181
00:08:24,429 --> 00:08:31,869
message delay so the month the short

182
00:08:29,169 --> 00:08:34,179
term outage of corn-based node will only

183
00:08:31,869 --> 00:08:36,009
be will just be considered as a long

184
00:08:34,179 --> 00:08:41,468
message delay rather than the node

185
00:08:36,009 --> 00:08:44,130
itself is dishonest so any protocol that

186
00:08:41,469 --> 00:08:47,259
working part of synchronous network

187
00:08:44,130 --> 00:08:47,439
currently tolerate this kind of short

188
00:08:47,259 --> 00:08:51,310
term

189
00:08:47,439 --> 00:08:55,990
outage or say shorten offline or say

190
00:08:51,310 --> 00:09:00,239
network partition so why don't we just

191
00:08:55,990 --> 00:09:00,240
switch to a part of synchronous protocol

192
00:09:00,330 --> 00:09:06,340
because if we want to get this good

193
00:09:04,450 --> 00:09:09,040
position tourist property in partial

194
00:09:06,340 --> 00:09:12,790
synchronous network we have to give up

195
00:09:09,040 --> 00:09:14,410
resilience the impossibility result in

196
00:09:12,790 --> 00:09:17,380
partial synchronous network says that

197
00:09:14,410 --> 00:09:20,400
any protocol work in partial synchrony

198
00:09:17,380 --> 00:09:23,350
cannot tolerate one third of corruption

199
00:09:20,400 --> 00:09:25,959
on the contrary there are well-known

200
00:09:23,350 --> 00:09:28,930
practical and theoretical protocols in

201
00:09:25,960 --> 00:09:31,660
synchronous network can work with honest

202
00:09:28,930 --> 00:09:33,930
majority assumption and furthermore if

203
00:09:31,660 --> 00:09:37,870
you don't care about the running time or

204
00:09:33,930 --> 00:09:40,000
the message complexity you can even have

205
00:09:37,870 --> 00:09:41,800
protocol in that in synchronous network

206
00:09:40,000 --> 00:09:46,120
that can tolerate arbitrary number of

207
00:09:41,800 --> 00:09:49,599
corruptions so a natural question come

208
00:09:46,120 --> 00:09:51,910
up here as can we achieve the best of

209
00:09:49,600 --> 00:09:56,790
both world can we have both resilience

210
00:09:51,910 --> 00:10:00,089
and Perdition tolerance at first glance

211
00:09:56,790 --> 00:10:03,040
the answer seems to be no is impossible

212
00:10:00,089 --> 00:10:05,890
because to circumvent the impossibility

213
00:10:03,040 --> 00:10:08,110
result in part of synchronous network we

214
00:10:05,890 --> 00:10:12,670
have to critically rely on the timing

215
00:10:08,110 --> 00:10:14,650
assumption in synchronous network but if

216
00:10:12,670 --> 00:10:17,699
we think about this statement a little

217
00:10:14,650 --> 00:10:21,310
bit more the question actually becomes

218
00:10:17,700 --> 00:10:25,000
who says that the synchrony of a network

219
00:10:21,310 --> 00:10:28,150
must be a binary choice who says that a

220
00:10:25,000 --> 00:10:32,560
network must be either fully synchronous

221
00:10:28,150 --> 00:10:34,600
or not synchronous at all can we find

222
00:10:32,560 --> 00:10:36,989
some way to describe the network

223
00:10:34,600 --> 00:10:40,150
connection status more accurately and

224
00:10:36,990 --> 00:10:44,440
find some place in between to take

225
00:10:40,150 --> 00:10:46,660
advantage of both world to be more

226
00:10:44,440 --> 00:10:49,530
specific about the question we want to

227
00:10:46,660 --> 00:10:53,319
answer let's first take a look at the

228
00:10:49,530 --> 00:10:55,900
networking real world so your your

229
00:10:53,320 --> 00:11:00,910
network there are actually three kind of

230
00:10:55,900 --> 00:11:03,069
nodes there are some green nodes they

231
00:11:00,910 --> 00:11:05,980
are honest and their network connection

232
00:11:03,070 --> 00:11:09,550
is very good the messages between them

233
00:11:05,980 --> 00:11:11,320
can be delivered within Delta rounds but

234
00:11:09,550 --> 00:11:14,410
there are also some grain

235
00:11:11,320 --> 00:11:17,320
they are also honest they want to follow

236
00:11:14,410 --> 00:11:19,779
the protocol description but their

237
00:11:17,320 --> 00:11:21,310
network connection is unstable the

238
00:11:19,779 --> 00:11:25,029
message delay for them can be long or

239
00:11:21,310 --> 00:11:27,219
they might even lose messages and there

240
00:11:25,029 --> 00:11:31,660
are some crap knows who's our behavior

241
00:11:27,220 --> 00:11:33,880
can be arbitrary so one important thing

242
00:11:31,660 --> 00:11:37,000
I want to point out here is that any

243
00:11:33,880 --> 00:11:40,720
oldest node might actually at some time

244
00:11:37,000 --> 00:11:43,839
point experience unstable connection or

245
00:11:40,720 --> 00:11:47,470
long message delay and they can recover

246
00:11:43,839 --> 00:11:50,050
from the bad connection later to be

247
00:11:47,470 --> 00:11:51,880
online again so the honest nodes can

248
00:11:50,050 --> 00:11:57,579
actually jump between the green and

249
00:11:51,880 --> 00:12:01,089
crisp green and gray set so let's take a

250
00:11:57,579 --> 00:12:05,310
look at UM the two classical time model

251
00:12:01,089 --> 00:12:09,449
in this graph the classical synchronous

252
00:12:05,310 --> 00:12:14,199
network the protocol only care about

253
00:12:09,449 --> 00:12:16,389
those notes who are forever green if any

254
00:12:14,199 --> 00:12:18,310
honest note that ever jobs offline

255
00:12:16,389 --> 00:12:21,010
joined the gray set they will be

256
00:12:18,310 --> 00:12:25,779
considered a scrap node and no consensus

257
00:12:21,010 --> 00:12:29,319
is guaranteed for them and the classical

258
00:12:25,779 --> 00:12:32,110
part of synchronous network the protocol

259
00:12:29,319 --> 00:12:35,829
does not take advantage of the good

260
00:12:32,110 --> 00:12:38,680
connection between green nodes so it

261
00:12:35,829 --> 00:12:44,790
cannot tolerate more than one third of

262
00:12:38,680 --> 00:12:49,479
corruption so what we want to do is to

263
00:12:44,790 --> 00:12:52,420
actually build a new model to see if we

264
00:12:49,480 --> 00:12:54,970
can achieve can see achieve consensus

265
00:12:52,420 --> 00:12:57,760
for both green and Bray notes while we

266
00:12:54,970 --> 00:13:00,910
still leveraging we still leverage the

267
00:12:57,760 --> 00:13:02,170
good connection between green nodes to

268
00:13:00,910 --> 00:13:07,509
get better

269
00:13:02,170 --> 00:13:11,050
resilience than 1/3 to build this new

270
00:13:07,509 --> 00:13:13,750
model the first step is to actually

271
00:13:11,050 --> 00:13:17,380
quantify of the network connection

272
00:13:13,750 --> 00:13:20,380
status so here we introduce a new notion

273
00:13:17,380 --> 00:13:22,250
to describe this green set we cut inside

274
00:13:20,380 --> 00:13:26,240
honest and not and

275
00:13:22,250 --> 00:13:29,450
I said as I mentioned before the green

276
00:13:26,240 --> 00:13:33,290
side can change from round to round so

277
00:13:29,450 --> 00:13:36,800
here we use Oh with subscript R to

278
00:13:33,290 --> 00:13:40,579
denote the honest and online set in R

279
00:13:36,800 --> 00:13:44,689
and R so now we have a notation to

280
00:13:40,580 --> 00:13:47,870
describe it but here we still need to be

281
00:13:44,690 --> 00:13:52,400
clear about what we actually mean by

282
00:13:47,870 --> 00:13:54,650
saying a notice online when we are

283
00:13:52,400 --> 00:13:57,199
talking about anoles online or offline

284
00:13:54,650 --> 00:14:00,500
we are actually talking about the

285
00:13:57,200 --> 00:14:02,420
ability the ability of the node to send

286
00:14:00,500 --> 00:14:06,770
or receive the message within bounded

287
00:14:02,420 --> 00:14:11,660
time so here comes our formal assumption

288
00:14:06,770 --> 00:14:15,829
about this is an online set if some node

289
00:14:11,660 --> 00:14:19,520
is online in R and R and it multicast

290
00:14:15,830 --> 00:14:23,450
some messages in this round then this

291
00:14:19,520 --> 00:14:28,010
message will reach all of the nodes who

292
00:14:23,450 --> 00:14:32,480
are online in some R and T for T larger

293
00:14:28,010 --> 00:14:36,680
than or equal to R plus Delta as soon as

294
00:14:32,480 --> 00:14:38,780
they are online so even if the the first

295
00:14:36,680 --> 00:14:42,260
node drops off lying right after is sent

296
00:14:38,780 --> 00:14:43,910
the message the notes online later are

297
00:14:42,260 --> 00:14:51,650
guaranteed to receive them within

298
00:14:43,910 --> 00:14:55,490
Valentine so a natural question here is

299
00:14:51,650 --> 00:15:00,410
if we assume the honest and aligned set

300
00:14:55,490 --> 00:15:03,110
is large enough what can we achieve can

301
00:15:00,410 --> 00:15:05,089
we have better results than in the

302
00:15:03,110 --> 00:15:11,930
classical synchronous and classical part

303
00:15:05,089 --> 00:15:17,240
of synchronous so here comes our new

304
00:15:11,930 --> 00:15:19,579
model if we assume a sorry

305
00:15:17,240 --> 00:15:21,380
so the message delivery of the network

306
00:15:19,580 --> 00:15:25,089
is actually controlled by the adversary

307
00:15:21,380 --> 00:15:29,390
so here we say an adversary respects

308
00:15:25,089 --> 00:15:33,320
kyewix synchrony if in every round the

309
00:15:29,390 --> 00:15:35,610
size of the honest and aligned set its

310
00:15:33,320 --> 00:15:41,339
larger than flow of tight

311
00:15:35,610 --> 00:15:43,920
Khai times n plus one I want to

312
00:15:41,339 --> 00:15:46,649
emphasize again that in this model we do

313
00:15:43,920 --> 00:15:50,160
not require any specific single node to

314
00:15:46,649 --> 00:15:51,839
be forever aligned the node can come

315
00:15:50,160 --> 00:15:54,060
back online and offline the only

316
00:15:51,839 --> 00:16:00,240
assumption is that at any time point

317
00:15:54,060 --> 00:16:04,939
this set is large enough so what we can

318
00:16:00,240 --> 00:16:10,980
achieve with this new model and our

319
00:16:04,940 --> 00:16:14,790
answer consists of majorly two parts if

320
00:16:10,980 --> 00:16:18,750
Chi is too small like if the honest and

321
00:16:14,790 --> 00:16:22,620
online set is not larger than half of

322
00:16:18,750 --> 00:16:24,420
the protocol then it is impossible to

323
00:16:22,620 --> 00:16:26,850
have a protocol that can reach consensus

324
00:16:24,420 --> 00:16:32,219
for both green and grey yet the

325
00:16:26,850 --> 00:16:34,230
impossibility proof is intuitive for the

326
00:16:32,220 --> 00:16:36,540
sake of contradiction if we assume the

327
00:16:34,230 --> 00:16:39,420
existence of a such a protocol we can

328
00:16:36,540 --> 00:16:43,170
easily force two small partitions in the

329
00:16:39,420 --> 00:16:47,910
network to reach agreement on different

330
00:16:43,170 --> 00:16:51,719
output with a bounded time but on the

331
00:16:47,910 --> 00:16:55,939
other side if Chi is large enough larger

332
00:16:51,720 --> 00:16:59,730
than one half then the answer is yes and

333
00:16:55,940 --> 00:17:02,610
actually we can fix the protocol I

334
00:16:59,730 --> 00:17:06,770
described earlier to make it guarantee

335
00:17:02,610 --> 00:17:06,770
consensus for both green and grey nodes

336
00:17:07,459 --> 00:17:12,839
because one half is the best we can

337
00:17:10,199 --> 00:17:18,360
achieve we call this property best

338
00:17:12,839 --> 00:17:21,569
possible partition tolerant tolerance so

339
00:17:18,359 --> 00:17:23,849
now I'm going to give a fix to the

340
00:17:21,569 --> 00:17:27,480
previous protocol to make it best

341
00:17:23,849 --> 00:17:30,000
possible position tolerant that protocol

342
00:17:27,480 --> 00:17:33,660
consists of two routines the fast path

343
00:17:30,000 --> 00:17:35,970
and the slow chain to make the whole

344
00:17:33,660 --> 00:17:38,340
protocol Parisienne tolerant we need to

345
00:17:35,970 --> 00:17:43,530
have post part best possible position

346
00:17:38,340 --> 00:17:46,260
tolerate the fix to the slow chain it's

347
00:17:43,530 --> 00:17:47,570
a little bit more complicated so as time

348
00:17:46,260 --> 00:17:50,809
is limited today I'm not

349
00:17:47,570 --> 00:17:54,500
to talk about the details but the whole

350
00:17:50,809 --> 00:17:56,120
idea is that it makes use of best

351
00:17:54,500 --> 00:17:59,659
possible position tolerant presenting

352
00:17:56,120 --> 00:18:02,408
agreement as a building block although I

353
00:17:59,659 --> 00:18:06,639
am NOT going to the detail but I want to

354
00:18:02,409 --> 00:18:09,620
point out here is that it is technically

355
00:18:06,639 --> 00:18:13,370
non-trivial not only because we need to

356
00:18:09,620 --> 00:18:15,469
fix the construction but also because we

357
00:18:13,370 --> 00:18:18,139
need to rethink how to define the

358
00:18:15,470 --> 00:18:20,450
security prop security property in the

359
00:18:18,139 --> 00:18:24,258
new timing model for example right now

360
00:18:20,450 --> 00:18:26,299
we cannot ask an offline node to output

361
00:18:24,259 --> 00:18:31,850
something when it is still offline and

362
00:18:26,299 --> 00:18:34,340
without enough evidence so I will leave

363
00:18:31,850 --> 00:18:36,799
the fix to the slow change the paper and

364
00:18:34,340 --> 00:18:40,879
here I will only talk about the easier

365
00:18:36,799 --> 00:18:44,929
part how to fix the first pass the first

366
00:18:40,879 --> 00:18:47,719
pass is a one-way round of voting so now

367
00:18:44,929 --> 00:18:50,779
let's assume that honest node will only

368
00:18:47,720 --> 00:18:52,700
vote for a new transaction after all of

369
00:18:50,779 --> 00:18:57,740
the previous transaction have been

370
00:18:52,700 --> 00:19:01,370
notarized so if we think this is a no

371
00:18:57,740 --> 00:19:04,759
try sequence then instead of confirming

372
00:19:01,370 --> 00:19:06,500
all of the notarize transaction now we

373
00:19:04,759 --> 00:19:09,710
chop off the last non-traditional

374
00:19:06,500 --> 00:19:12,740
section and confirm only on the prefix

375
00:19:09,710 --> 00:19:14,419
and when falling back to the slow chain

376
00:19:12,740 --> 00:19:19,610
we still post all of the notarized

377
00:19:14,419 --> 00:19:23,629
transaction until slow chain so why does

378
00:19:19,610 --> 00:19:26,779
this simple fix work in fast paths the

379
00:19:23,629 --> 00:19:28,759
high-level idea is that if we assume at

380
00:19:26,779 --> 00:19:31,539
any time point there are more than half

381
00:19:28,759 --> 00:19:35,330
of nodes are honest and aligned then

382
00:19:31,539 --> 00:19:38,419
this set of honest and aligned nodes

383
00:19:35,330 --> 00:19:42,500
must intersect with a quorum who vote

384
00:19:38,419 --> 00:19:43,870
for the last transaction because people

385
00:19:42,500 --> 00:19:46,309
will only vote for last transaction

386
00:19:43,870 --> 00:19:50,120
after they have seen the no transition

387
00:19:46,309 --> 00:19:54,379
for all of the prefix and they are lying

388
00:19:50,120 --> 00:19:58,639
when they are falling to the when they

389
00:19:54,379 --> 00:20:01,030
are falling back to the slow chain the

390
00:19:58,639 --> 00:20:05,080
noting the intersection will guaranteed

391
00:20:01,030 --> 00:20:07,680
these transactions these transactions in

392
00:20:05,080 --> 00:20:10,120
the prefix will appear on the slow chain

393
00:20:07,680 --> 00:20:12,550
so like if Congress know these jobs are

394
00:20:10,120 --> 00:20:14,320
flying but it has seen the transition

395
00:20:12,550 --> 00:20:15,639
for the last transaction it is

396
00:20:14,320 --> 00:20:17,500
guaranteed that all of previous

397
00:20:15,640 --> 00:20:22,270
transaction will be post down to slow

398
00:20:17,500 --> 00:20:26,610
chain but some other online nodes so

399
00:20:22,270 --> 00:20:29,730
this is the fix to the fast path and

400
00:20:26,610 --> 00:20:33,669
this is all I want to talk about the

401
00:20:29,730 --> 00:20:35,620
protocol and finally at last I want to

402
00:20:33,670 --> 00:20:38,650
talk about two observations we found

403
00:20:35,620 --> 00:20:41,320
during we investigate we were

404
00:20:38,650 --> 00:20:45,070
investigating the classical synchronous

405
00:20:41,320 --> 00:20:47,260
model the first one is that any protocol

406
00:20:45,070 --> 00:20:50,740
that is best possible partition tolerant

407
00:20:47,260 --> 00:20:52,720
is definitely secure in classical

408
00:20:50,740 --> 00:20:55,950
synchronous model with ants majority

409
00:20:52,720 --> 00:20:58,810
assumption but the reverse is not true

410
00:20:55,950 --> 00:21:02,290
actually all of the existing protocols

411
00:20:58,810 --> 00:21:07,330
we investigated are not best possible

412
00:21:02,290 --> 00:21:09,340
petition tolerant so our new notion

413
00:21:07,330 --> 00:21:12,820
would say this new property is actually

414
00:21:09,340 --> 00:21:15,490
a strict refinement of classical

415
00:21:12,820 --> 00:21:19,720
synchrony with federal business and

416
00:21:15,490 --> 00:21:22,030
partition tolerance and the second thing

417
00:21:19,720 --> 00:21:24,070
is that the classical synchronous

418
00:21:22,030 --> 00:21:26,500
network can somehow be misleading

419
00:21:24,070 --> 00:21:29,770
because in classical synchronous Network

420
00:21:26,500 --> 00:21:32,230
people attempt to think that the

421
00:21:29,770 --> 00:21:34,480
protocol they are tolerating that

422
00:21:32,230 --> 00:21:36,970
tolerates more corruptions like the

423
00:21:34,480 --> 00:21:40,900
protocol can work with designs majority

424
00:21:36,970 --> 00:21:43,090
they are strictly more robust than the

425
00:21:40,900 --> 00:21:45,370
protocol that can work with less

426
00:21:43,090 --> 00:21:49,780
corruption like the protocol can only

427
00:21:45,370 --> 00:21:53,739
work with honest majority but as I shown

428
00:21:49,780 --> 00:21:56,260
in the impossibility result if we want

429
00:21:53,740 --> 00:21:58,120
to tolerate designs majority we

430
00:21:56,260 --> 00:22:01,629
inherently give up the position

431
00:21:58,120 --> 00:22:03,870
tolerance property so it is actually our

432
00:22:01,630 --> 00:22:06,610
trade off between these two properties

433
00:22:03,870 --> 00:22:10,719
rather than like one side is strictly

434
00:22:06,610 --> 00:22:13,059
better than the other one so this is all

435
00:22:10,720 --> 00:22:15,340
I want to talk about our work today and

436
00:22:13,059 --> 00:22:18,190
the proofs are the details of

437
00:22:15,340 --> 00:22:21,730
constructions the proof and more results

438
00:22:18,190 --> 00:22:23,110
like the MPC protocol that working this

439
00:22:21,730 --> 00:22:32,740
new timing model can be found in our

440
00:22:23,110 --> 00:22:34,508
paper and thank you very much we have

441
00:22:32,740 --> 00:22:36,970
time for questions our microphones on

442
00:22:34,509 --> 00:22:48,730
both aisles please step after them to be

443
00:22:36,970 --> 00:22:52,990
heard we appear to have no questions at

444
00:22:48,730 --> 00:22:56,869
this time let's thank the speaker again

445
00:22:52,990 --> 00:22:56,869
[Applause]

