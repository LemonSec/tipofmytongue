1
00:00:04,860 --> 00:00:09,510
thank you very much for the introduction

2
00:00:06,930 --> 00:00:11,489
it's my great pleasure to be here today

3
00:00:09,510 --> 00:00:14,940
and present to you my joint work with

4
00:00:11,490 --> 00:00:17,910
Vinny le and Blackie I about continuous

5
00:00:14,940 --> 00:00:21,289
space bound at non-mobile codes okay so

6
00:00:17,910 --> 00:00:23,789
let me begin with a short motivation

7
00:00:21,289 --> 00:00:26,359
imagine that you have a small memory

8
00:00:23,789 --> 00:00:29,939
device that performs some cryptographic

9
00:00:26,359 --> 00:00:32,369
functionality so that means that some

10
00:00:29,939 --> 00:00:34,620
secret key is stored in the memory of

11
00:00:32,369 --> 00:00:37,379
this device so on this example you can

12
00:00:34,620 --> 00:00:40,049
see digital signatures and the security

13
00:00:37,379 --> 00:00:43,080
property of digital signatures guarantee

14
00:00:40,049 --> 00:00:46,500
that no one can forge a signature okay

15
00:00:43,080 --> 00:00:50,070
but what happens if now an adversary can

16
00:00:46,500 --> 00:00:51,930
tamper with in memory of this device so

17
00:00:50,070 --> 00:00:54,629
it changes the secret key to some

18
00:00:51,930 --> 00:00:57,390
tempered secret key Prime it turns out

19
00:00:54,629 --> 00:01:00,809
and in this case some information about

20
00:00:57,390 --> 00:01:02,489
the secret key can be leaked and even

21
00:01:00,809 --> 00:01:06,000
enough information to recover this

22
00:01:02,489 --> 00:01:07,920
entire secret key so the unfortunate e

23
00:01:06,000 --> 00:01:10,140
would be completely broken in this case

24
00:01:07,920 --> 00:01:12,140
so what can we do about it and we are in

25
00:01:10,140 --> 00:01:15,270
the session of non moba code so we gonna

26
00:01:12,140 --> 00:01:18,090
one way how to protect against memory

27
00:01:15,270 --> 00:01:20,610
tempering is using a non mobile code for

28
00:01:18,090 --> 00:01:22,710
this example for space bounded tempering

29
00:01:20,610 --> 00:01:24,690
so roughly what would happen here

30
00:01:22,710 --> 00:01:27,000
instead of storing the secret key on the

31
00:01:24,690 --> 00:01:30,060
memory of the device we would store an

32
00:01:27,000 --> 00:01:33,000
encoding of the secret key and as you

33
00:01:30,060 --> 00:01:35,040
had heard from the previous speakers the

34
00:01:33,000 --> 00:01:36,960
property the non malleability property

35
00:01:35,040 --> 00:01:38,850
would guarantee that even if someone

36
00:01:36,960 --> 00:01:40,979
tempers not with the memory no

37
00:01:38,850 --> 00:01:44,190
information is leaked about the original

38
00:01:40,980 --> 00:01:46,860
secret okay so a space bound the

39
00:01:44,190 --> 00:01:49,530
tempering was first time considered in a

40
00:01:46,860 --> 00:01:52,080
paper that was presented here in crypto

41
00:01:49,530 --> 00:01:55,950
two years ago and what what is actually

42
00:01:52,080 --> 00:01:59,130
space bounded temporary we restrict the

43
00:01:55,950 --> 00:02:00,210
tempering function just by the resources

44
00:01:59,130 --> 00:02:02,908
of the device

45
00:02:00,210 --> 00:02:05,250
more specifically we say that the space

46
00:02:02,909 --> 00:02:07,380
complexity of the tempering function and

47
00:02:05,250 --> 00:02:09,989
the space complexity of the decoding

48
00:02:07,380 --> 00:02:13,890
algorithm are bounded by the memory of

49
00:02:09,989 --> 00:02:17,550
the device and this actually implies

50
00:02:13,890 --> 00:02:19,230
that the tempering function can decode

51
00:02:17,550 --> 00:02:21,090
and it's not so difficult to see that in

52
00:02:19,230 --> 00:02:23,820
this case full normal ability is

53
00:02:21,090 --> 00:02:26,970
actually impossible to achieve so to

54
00:02:23,820 --> 00:02:29,100
this end the definition of leaky normal

55
00:02:26,970 --> 00:02:31,200
ability was introduced where it's

56
00:02:29,100 --> 00:02:33,810
allowed for the tempering to leak some

57
00:02:31,200 --> 00:02:36,000
small part of the input just a small

58
00:02:33,810 --> 00:02:38,930
part and for many applications this is

59
00:02:36,000 --> 00:02:42,780
completely fine for example for leaky

60
00:02:38,930 --> 00:02:45,930
resilient signatures okay so the prior

61
00:02:42,780 --> 00:02:48,030
work introduced the January construction

62
00:02:45,930 --> 00:02:50,640
generic space-bound at normal bar code

63
00:02:48,030 --> 00:02:51,990
and it was based on non interactive

64
00:02:50,640 --> 00:02:54,510
proof of space that was the main

65
00:02:51,990 --> 00:02:58,110
building block however it had one

66
00:02:54,510 --> 00:03:00,510
limitation namely that the size of

67
00:02:58,110 --> 00:03:03,900
leakage was growing linearly in the

68
00:03:00,510 --> 00:03:05,760
number of temporary rounds and this

69
00:03:03,900 --> 00:03:09,330
implies the tempering is a priori

70
00:03:05,760 --> 00:03:11,670
bounded why is this well we leak every

71
00:03:09,330 --> 00:03:13,410
time for every tempering round we have

72
00:03:11,670 --> 00:03:15,329
some leakage so eventually we would leak

73
00:03:13,410 --> 00:03:17,310
the entire secret key so the protection

74
00:03:15,330 --> 00:03:20,250
given by the non moba code would be

75
00:03:17,310 --> 00:03:23,760
completely meaningless and what was less

76
00:03:20,250 --> 00:03:27,660
as a open question is to achieve an

77
00:03:23,760 --> 00:03:30,600
unbounded polynomial unbounded tempering

78
00:03:27,660 --> 00:03:33,030
and this is exactly what we focused on

79
00:03:30,600 --> 00:03:36,930
in our paper and what I will be talking

80
00:03:33,030 --> 00:03:39,180
about today okay so our goal is to have

81
00:03:36,930 --> 00:03:41,610
a space bound at non mobile code for

82
00:03:39,180 --> 00:03:43,770
unbounded tempering and we actually

83
00:03:41,610 --> 00:03:46,950
looked at the generic code construction

84
00:03:43,770 --> 00:03:48,870
from the prior work and we kept the

85
00:03:46,950 --> 00:03:51,420
construction at it as it was but we

86
00:03:48,870 --> 00:03:54,540
instantiated it with a stronger building

87
00:03:51,420 --> 00:03:57,450
block in particular we defined something

88
00:03:54,540 --> 00:04:00,329
we call proof extract ability of proof

89
00:03:57,450 --> 00:04:03,149
of space and we show two different

90
00:04:00,330 --> 00:04:05,430
approaches how to construct such a proof

91
00:04:03,150 --> 00:04:07,050
of space and we end up with several

92
00:04:05,430 --> 00:04:08,940
construction that have different

93
00:04:07,050 --> 00:04:11,850
parameters but I will tell you more

94
00:04:08,940 --> 00:04:14,700
about that in my talk ok so before I get

95
00:04:11,850 --> 00:04:16,769
to the code construction let me be a

96
00:04:14,700 --> 00:04:18,899
little bit more precise about what leaky

97
00:04:16,769 --> 00:04:21,540
non-mobile codes are it's not a formal

98
00:04:18,899 --> 00:04:25,289
definition but just to give a high-level

99
00:04:21,540 --> 00:04:27,110
idea okay so we have a coding scheme

100
00:04:25,290 --> 00:04:30,249
that consists of encoding and decoding

101
00:04:27,110 --> 00:04:33,099
algorithm and consider a polynomial

102
00:04:30,249 --> 00:04:35,919
time algorithm polynomial time adversary

103
00:04:33,099 --> 00:04:39,099
that is space unbounded okay so we have

104
00:04:35,919 --> 00:04:41,589
no restrictions on space and it can

105
00:04:39,099 --> 00:04:43,929
prepare a tempering function that can be

106
00:04:41,589 --> 00:04:45,879
arbitrary but space bounded and this

107
00:04:43,929 --> 00:04:48,729
tempering function now tempers way the

108
00:04:45,879 --> 00:04:52,029
target code word C and tempers to a code

109
00:04:48,729 --> 00:04:55,959
word c1 the adversary then learns the

110
00:04:52,029 --> 00:04:58,479
result of decoding of c1 and we say that

111
00:04:55,959 --> 00:05:00,669
our coding scheme is el leaked and non

112
00:04:58,479 --> 00:05:02,619
malleable if there exists a simulator

113
00:05:00,669 --> 00:05:06,068
that can simulate this tempering

114
00:05:02,619 --> 00:05:09,429
experiment without knowing the original

115
00:05:06,069 --> 00:05:12,519
secret but getting a small hint okay so

116
00:05:09,429 --> 00:05:14,529
it can get L bits of leakage and then it

117
00:05:12,519 --> 00:05:18,069
has to simulate the tempering experiment

118
00:05:14,529 --> 00:05:20,409
this definition can be generalized for a

119
00:05:18,069 --> 00:05:22,089
repeated tempering so after the first

120
00:05:20,409 --> 00:05:24,519
round of tempering as you saw in the

121
00:05:22,089 --> 00:05:27,279
previous slide that ver Sri is allowed

122
00:05:24,519 --> 00:05:30,219
to pick another tempering function which

123
00:05:27,279 --> 00:05:33,189
now tempers with this c1 to c2 and again

124
00:05:30,219 --> 00:05:36,998
adversary learns the result of decoding

125
00:05:33,189 --> 00:05:38,499
of c2 okay so now we are prepared to

126
00:05:36,999 --> 00:05:42,819
have a look at the UH non mobile code

127
00:05:38,499 --> 00:05:45,429
construction so as I said before it's

128
00:05:42,819 --> 00:05:48,179
based on non interactive proof of space

129
00:05:45,429 --> 00:05:51,399
so non interactive proof of space is a

130
00:05:48,179 --> 00:05:54,099
primitive between two parties so we have

131
00:05:51,399 --> 00:05:57,279
approver and a verifier improver has a

132
00:05:54,099 --> 00:05:59,889
lot of memory and it wants to convince a

133
00:05:57,279 --> 00:06:03,159
space bounded verifier about this fact

134
00:05:59,889 --> 00:06:06,339
so what he do what he does he takes some

135
00:06:03,159 --> 00:06:08,679
unique identity it generates a proof and

136
00:06:06,339 --> 00:06:11,110
this generation requires a lot of space

137
00:06:08,679 --> 00:06:13,388
and sends over the identity and the

138
00:06:11,110 --> 00:06:16,299
proof to a verifier and the verifier is

139
00:06:13,389 --> 00:06:19,119
able to verify that this is a valid pair

140
00:06:16,299 --> 00:06:21,609
so that was just on very high level and

141
00:06:19,119 --> 00:06:24,369
the code construction is now very simple

142
00:06:21,610 --> 00:06:27,159
if we want to encode a message and we

143
00:06:24,369 --> 00:06:29,199
just run the proof algorithm of the

144
00:06:27,159 --> 00:06:32,079
proof of space we generate a proof and

145
00:06:29,199 --> 00:06:35,139
our code word consists of the message in

146
00:06:32,079 --> 00:06:38,019
plain and the proof attached to it the

147
00:06:35,139 --> 00:06:39,819
decoding while we first parse the

148
00:06:38,019 --> 00:06:42,340
codeword into a message and the proof we

149
00:06:39,819 --> 00:06:44,050
run the verification algorithm which

150
00:06:42,340 --> 00:06:46,000
does not require a lot of space right

151
00:06:44,050 --> 00:06:48,100
that's the property that we get from the

152
00:06:46,000 --> 00:06:50,350
proof of space and if everything is fine

153
00:06:48,100 --> 00:06:53,860
me out put a message and otherwise we

154
00:06:50,350 --> 00:06:56,530
get an invalid code word okay so before

155
00:06:53,860 --> 00:06:59,169
I show you why this is a leaky non

156
00:06:56,530 --> 00:07:01,659
mobile code and why we actually have

157
00:06:59,169 --> 00:07:04,000
bounded tempering in this case we need

158
00:07:01,660 --> 00:07:05,710
to have a little bit closer look at the

159
00:07:04,000 --> 00:07:08,530
building block at the non interactive

160
00:07:05,710 --> 00:07:10,739
proof of space or nipples for short

161
00:07:08,530 --> 00:07:13,719
in particular let's have a look at the

162
00:07:10,740 --> 00:07:16,300
soundness property order the property

163
00:07:13,720 --> 00:07:18,400
that guarantees that prover cannot cheat

164
00:07:16,300 --> 00:07:20,889
so if the prover does not have enough

165
00:07:18,400 --> 00:07:23,440
space you should not be able to convince

166
00:07:20,889 --> 00:07:26,320
the verifier right so how do we

167
00:07:23,440 --> 00:07:29,110
formalize this it's a experiment or a

168
00:07:26,320 --> 00:07:32,740
game and we again have a polynomial time

169
00:07:29,110 --> 00:07:35,289
space and bounded adversary that can run

170
00:07:32,740 --> 00:07:37,750
some arbitrary pre-computation so for

171
00:07:35,289 --> 00:07:41,919
example prepare some identity proof

172
00:07:37,750 --> 00:07:44,289
pairs and the adversary now prepares a

173
00:07:41,919 --> 00:07:46,930
space bounded temporary function that

174
00:07:44,289 --> 00:07:50,349
tempers with the target identity and a

175
00:07:46,930 --> 00:07:54,520
proof and now if the result of temporary

176
00:07:50,350 --> 00:07:56,710
is actually a valid pair then the

177
00:07:54,520 --> 00:07:59,139
extract ability tells us that this ID

178
00:07:56,710 --> 00:08:04,060
till dies either the original identity

179
00:07:59,139 --> 00:08:06,639
or one of the pre computed values in

180
00:08:04,060 --> 00:08:09,370
which case we are able to extract from

181
00:08:06,639 --> 00:08:11,080
the pre-computation this ID tilde so

182
00:08:09,370 --> 00:08:14,729
given a short hint we are able to

183
00:08:11,080 --> 00:08:17,800
extract ID tilde or said differently

184
00:08:14,729 --> 00:08:24,010
space bound that algorithm cannot

185
00:08:17,800 --> 00:08:25,720
generate a valid proof for a new ID ok

186
00:08:24,010 --> 00:08:27,610
so let's have a look at the code

187
00:08:25,720 --> 00:08:30,940
construction rights actually leak in

188
00:08:27,610 --> 00:08:33,010
unknowable so just a sketch of how a

189
00:08:30,940 --> 00:08:34,750
simulator works there are many technical

190
00:08:33,010 --> 00:08:37,419
details missing but just to give a

191
00:08:34,750 --> 00:08:40,900
high-level idea so the simulator gets

192
00:08:37,419 --> 00:08:44,260
the first temporary function and it asks

193
00:08:40,900 --> 00:08:46,660
a leakage Oracle for a short hint and by

194
00:08:44,260 --> 00:08:50,620
extract ability given this short hint

195
00:08:46,660 --> 00:08:54,520
it's able to extract the identity so

196
00:08:50,620 --> 00:08:57,670
it's able to extract this SK 1 and now

197
00:08:54,520 --> 00:09:00,430
for the next round of tempering well it

198
00:08:57,670 --> 00:09:02,920
does exactly the same it against asks

199
00:09:00,430 --> 00:09:04,930
for a hint the leakage Oracle simulates

200
00:09:02,920 --> 00:09:06,180
the tempering depending on the result

201
00:09:04,930 --> 00:09:10,109
returns back a hint

202
00:09:06,180 --> 00:09:13,689
we extract SK 2 and so on and so forth

203
00:09:10,110 --> 00:09:17,140
so as you can see for every tempering

204
00:09:13,690 --> 00:09:20,829
round every tempering we need 1 leakage

205
00:09:17,140 --> 00:09:23,380
query and this is exactly why we don't

206
00:09:20,829 --> 00:09:26,709
achieve unbounded temporary so this is

207
00:09:23,380 --> 00:09:29,050
the problem in the private work so can

208
00:09:26,709 --> 00:09:32,770
we do better and the answer is yes and

209
00:09:29,050 --> 00:09:35,800
it lies in stronger proof of space so

210
00:09:32,770 --> 00:09:38,470
what do I mean by that in particular in

211
00:09:35,800 --> 00:09:41,380
our paper we define a notion of proof

212
00:09:38,470 --> 00:09:44,290
extract ability and as the name suggests

213
00:09:41,380 --> 00:09:47,980
we don't want to extract only the

214
00:09:44,290 --> 00:09:50,530
identity but also a proof ok and that's

215
00:09:47,980 --> 00:09:54,010
exactly what's happening here instead of

216
00:09:50,530 --> 00:09:56,709
extracting only identity ID tilde we

217
00:09:54,010 --> 00:09:58,780
also want PI tilde or if you look at it

218
00:09:56,709 --> 00:10:01,209
differently we just want to say that a

219
00:09:58,780 --> 00:10:04,630
space-bound that algorithm algorithm

220
00:10:01,209 --> 00:10:09,130
cannot generate a new valid proof not

221
00:10:04,630 --> 00:10:11,020
even for old IDs ok so the code to

222
00:10:09,130 --> 00:10:13,480
instruction is exactly the same as in

223
00:10:11,020 --> 00:10:15,730
the prior work but we have proof

224
00:10:13,480 --> 00:10:18,970
extractable non-interactive proof of

225
00:10:15,730 --> 00:10:22,270
space and this helps and this helps and

226
00:10:18,970 --> 00:10:24,040
let me show you how so the first round

227
00:10:22,270 --> 00:10:26,890
of temperent the simulator gets the

228
00:10:24,040 --> 00:10:29,110
tempering algorithm again asks the

229
00:10:26,890 --> 00:10:31,360
leakage Oracle to simulate the tempering

230
00:10:29,110 --> 00:10:34,800
experiment inside and return back a hint

231
00:10:31,360 --> 00:10:38,230
given this hint we are able to extract

232
00:10:34,800 --> 00:10:41,319
identity and proof which means we have

233
00:10:38,230 --> 00:10:43,209
the entire code word C 1 so fine the

234
00:10:41,320 --> 00:10:45,880
first round we managed to simulate but

235
00:10:43,209 --> 00:10:48,099
that was the same is in the prior work

236
00:10:45,880 --> 00:10:50,410
as well but now comes the difference

237
00:10:48,100 --> 00:10:54,400
when we get the second tempering

238
00:10:50,410 --> 00:10:57,910
algorithm now we don't have to ask a

239
00:10:54,400 --> 00:10:59,709
leakage query anymore we have the C 1 we

240
00:10:57,910 --> 00:11:02,140
can just simulate the tempering

241
00:10:59,709 --> 00:11:04,510
experiment without further leakage and

242
00:11:02,140 --> 00:11:07,250
that's exactly what we wanted so as you

243
00:11:04,510 --> 00:11:10,040
can see the number of leakage

244
00:11:07,250 --> 00:11:13,910
it's now independent of no number of

245
00:11:10,040 --> 00:11:16,270
tempering rounds okay so the big

246
00:11:13,910 --> 00:11:20,689
question here is now okay how can we

247
00:11:16,270 --> 00:11:23,000
extract proof extractable nipples and in

248
00:11:20,690 --> 00:11:25,520
our paper we consider two different

249
00:11:23,000 --> 00:11:27,170
approaches and I will tell you a little

250
00:11:25,520 --> 00:11:29,870
bit about each of them I can

251
00:11:27,170 --> 00:11:32,780
unfortunately not go in detail but just

252
00:11:29,870 --> 00:11:37,010
to help give you an idea so let me start

253
00:11:32,780 --> 00:11:41,150
with the uniqueness approach so we say

254
00:11:37,010 --> 00:11:44,890
that nipples satisfies you uniqueness if

255
00:11:41,150 --> 00:11:48,890
a valid proof like if the identity

256
00:11:44,890 --> 00:11:51,080
defines uniquely you bits of a valid

257
00:11:48,890 --> 00:11:53,240
proof okay so your bits are uniquely

258
00:11:51,080 --> 00:11:55,730
defined and the N minus you the

259
00:11:53,240 --> 00:11:57,590
remaining bits we don't know and it's

260
00:11:55,730 --> 00:12:00,530
not so difficult to see that extract

261
00:11:57,590 --> 00:12:03,860
ability and uniqueness together actually

262
00:12:00,530 --> 00:12:07,280
imply proof extract ability so what's

263
00:12:03,860 --> 00:12:09,560
the main idea behind it so if the result

264
00:12:07,280 --> 00:12:12,709
of tempering this I detailed up hi Tilda

265
00:12:09,560 --> 00:12:15,469
is actually a valid pair then by extract

266
00:12:12,710 --> 00:12:18,500
ability we are able to extract this ID

267
00:12:15,470 --> 00:12:20,920
tilde so I detail that we have so now

268
00:12:18,500 --> 00:12:25,520
the question is how do we get PI tilde

269
00:12:20,920 --> 00:12:28,939
by uniqueness or u uniqueness we know

270
00:12:25,520 --> 00:12:32,420
the new bits of the proof so but we

271
00:12:28,940 --> 00:12:35,960
still don't know n - view bits so in

272
00:12:32,420 --> 00:12:38,360
other words if we get as a hint the hint

273
00:12:35,960 --> 00:12:41,360
that we need for extract ability plus

274
00:12:38,360 --> 00:12:44,600
the unknown bits we are able to extract

275
00:12:41,360 --> 00:12:47,750
entire identity in a proof so obviously

276
00:12:44,600 --> 00:12:50,330
our goal here is to come up with a

277
00:12:47,750 --> 00:12:53,240
non-interactive proof of space this that

278
00:12:50,330 --> 00:12:55,790
satisfies is high uniqueness as possible

279
00:12:53,240 --> 00:12:58,510
okay full uniqueness would be ideal but

280
00:12:55,790 --> 00:13:01,610
we want to achieve as high as possible

281
00:12:58,510 --> 00:13:03,860
so first of all we looked at the prior

282
00:13:01,610 --> 00:13:05,840
work and saw that the non turn

283
00:13:03,860 --> 00:13:09,800
interactive proof of space had zero

284
00:13:05,840 --> 00:13:12,590
uniqueness so technically yes we do get

285
00:13:09,800 --> 00:13:16,849
approved extractable Nepos but with very

286
00:13:12,590 --> 00:13:17,580
bad parameters so we also considered a

287
00:13:16,850 --> 00:13:20,250
heuristic

288
00:13:17,580 --> 00:13:22,710
construction based on memory heart

289
00:13:20,250 --> 00:13:25,490
functions so let me give an a rough idea

290
00:13:22,710 --> 00:13:29,070
how our approve algorithm actually works

291
00:13:25,490 --> 00:13:31,920
so on input identity we first hash this

292
00:13:29,070 --> 00:13:34,170
identity and then evaluate a memory

293
00:13:31,920 --> 00:13:37,410
heart function that's a function that

294
00:13:34,170 --> 00:13:39,780
requires a lot of space to compute so

295
00:13:37,410 --> 00:13:42,240
this would be fine we have memory

296
00:13:39,780 --> 00:13:44,189
hardness so it's the prover has to use a

297
00:13:42,240 --> 00:13:47,550
lot of space but we don't have the

298
00:13:44,190 --> 00:13:50,130
efficient verification so to this end we

299
00:13:47,550 --> 00:13:52,050
actually run a verifiable computation to

300
00:13:50,130 --> 00:13:54,570
produce a very short proof that the

301
00:13:52,050 --> 00:13:57,540
computation was done correctly so that's

302
00:13:54,570 --> 00:14:02,580
the high-level idea we get a partially

303
00:13:57,540 --> 00:14:05,550
unique Nepos the details I refer to do

304
00:14:02,580 --> 00:14:07,890
paper but I want to point out why did I

305
00:14:05,550 --> 00:14:10,319
say heuristic where is the problem here

306
00:14:07,890 --> 00:14:11,910
with this construction and it lies in

307
00:14:10,320 --> 00:14:13,800
the memory heart function because we

308
00:14:11,910 --> 00:14:16,680
have memory heart functions in the

309
00:14:13,800 --> 00:14:18,990
random Oracle model or in our idealized

310
00:14:16,680 --> 00:14:21,089
models but in order to run verifiable

311
00:14:18,990 --> 00:14:23,310
computation we would need to instantiate

312
00:14:21,090 --> 00:14:26,910
the random Oracle with a concrete hash

313
00:14:23,310 --> 00:14:30,329
function so that's why this construction

314
00:14:26,910 --> 00:14:32,160
is just a heuristic ok so let's have a

315
00:14:30,330 --> 00:14:34,200
look at the other approach how to

316
00:14:32,160 --> 00:14:36,000
construct proof extractable

317
00:14:34,200 --> 00:14:38,640
non-interactive proof space in

318
00:14:36,000 --> 00:14:41,520
particular from challenge hard crafts

319
00:14:38,640 --> 00:14:44,310
that we introduced in our paper so here

320
00:14:41,520 --> 00:14:46,740
i have to also give a small warning we

321
00:14:44,310 --> 00:14:49,680
have to slightly weaken our ad versatile

322
00:14:46,740 --> 00:14:52,470
model but in a realistic way and I will

323
00:14:49,680 --> 00:14:55,349
show you in few slides what this means

324
00:14:52,470 --> 00:14:57,660
or what I mean by this so first of all

325
00:14:55,350 --> 00:15:02,520
in order to explain challenge heart for

326
00:14:57,660 --> 00:15:04,770
us let's consider a directed acyclic

327
00:15:02,520 --> 00:15:09,090
graph ok so we have a directed acyclic

328
00:15:04,770 --> 00:15:11,970
graph and we have a hash function H so

329
00:15:09,090 --> 00:15:14,730
if you want to computer H labeling of

330
00:15:11,970 --> 00:15:17,760
such a graph we want to assign a label

331
00:15:14,730 --> 00:15:21,030
to each node and we do it as you can see

332
00:15:17,760 --> 00:15:23,040
on the picture for example this black

333
00:15:21,030 --> 00:15:25,199
node if you want to compute the label

334
00:15:23,040 --> 00:15:27,219
where we look at the labels of all the

335
00:15:25,200 --> 00:15:30,579
children of this node

336
00:15:27,220 --> 00:15:32,620
and we hash it together okay so now we

337
00:15:30,579 --> 00:15:35,739
are prepared to actually explain what a

338
00:15:32,620 --> 00:15:39,430
challenge heart crafts are so we

339
00:15:35,740 --> 00:15:42,009
consider directed acyclic graph and we

340
00:15:39,430 --> 00:15:45,128
divide the sinks of this graph in

341
00:15:42,009 --> 00:15:49,540
several sets we call them target sets so

342
00:15:45,129 --> 00:15:52,870
in the picture they're just too but we

343
00:15:49,540 --> 00:15:56,230
randomly select one challenge node from

344
00:15:52,870 --> 00:15:58,899
each target set and we say that a space

345
00:15:56,230 --> 00:16:01,689
bounded algorithm can label all the

346
00:15:58,899 --> 00:16:03,579
challenged nodes or all the challenged

347
00:16:01,689 --> 00:16:06,490
nodes only with negligible probability

348
00:16:03,579 --> 00:16:09,099
okay so the space bounded algorithm it's

349
00:16:06,490 --> 00:16:13,329
very hard to actually label all the

350
00:16:09,100 --> 00:16:16,149
challenge nodes and this should hold

351
00:16:13,329 --> 00:16:19,269
even if some of the labels are given for

352
00:16:16,149 --> 00:16:23,829
free to the space bounded algorithm not

353
00:16:19,269 --> 00:16:27,120
all but some okay so how does this help

354
00:16:23,829 --> 00:16:29,469
us to get proof extract ability

355
00:16:27,120 --> 00:16:33,009
high-level overview of the construction

356
00:16:29,470 --> 00:16:35,680
details are again permitted so we have a

357
00:16:33,009 --> 00:16:38,110
hash function H that depends on the

358
00:16:35,680 --> 00:16:41,559
input identity and we first of all

359
00:16:38,110 --> 00:16:45,100
compute a labeling of our challenge

360
00:16:41,559 --> 00:16:48,459
heart breath then we use a marquetry to

361
00:16:45,100 --> 00:16:51,100
commit to this labeling and we hash the

362
00:16:48,459 --> 00:16:54,969
route to generate randomness and define

363
00:16:51,100 --> 00:16:57,370
two sets of nodes first set is so called

364
00:16:54,970 --> 00:16:59,379
check nodes and the purpose of these

365
00:16:57,370 --> 00:17:02,079
check nodes is to verify that actually

366
00:16:59,379 --> 00:17:05,709
their labeling was done correctly so we

367
00:17:02,079 --> 00:17:07,809
open we provide the opening path for

368
00:17:05,709 --> 00:17:09,699
this node and its children and we check

369
00:17:07,809 --> 00:17:12,668
that the local correctness of the

370
00:17:09,699 --> 00:17:15,760
labeling the second set is the challenge

371
00:17:12,669 --> 00:17:18,459
node so one node from each target set

372
00:17:15,760 --> 00:17:21,209
and this is for the FIR guarantee that

373
00:17:18,459 --> 00:17:25,299
it was memory harder and it was face

374
00:17:21,209 --> 00:17:28,539
exhausting to do this computation so why

375
00:17:25,299 --> 00:17:32,168
is this proof extractable just main idea

376
00:17:28,539 --> 00:17:34,040
well either the adversary pre computes

377
00:17:32,169 --> 00:17:36,560
the entire labeling and

378
00:17:34,040 --> 00:17:38,629
rocketry so everything was precomputed

379
00:17:36,560 --> 00:17:41,060
and in this case we are able to extract

380
00:17:38,630 --> 00:17:45,050
ID tilde and PI tilde from the

381
00:17:41,060 --> 00:17:47,600
pre-computation or the adversary did not

382
00:17:45,050 --> 00:17:50,180
do everything in particular he did not

383
00:17:47,600 --> 00:17:52,429
compute the route and did not have to

384
00:17:50,180 --> 00:17:55,010
route so he did not know the challenge

385
00:17:52,430 --> 00:17:56,780
notes and in this case we used the

386
00:17:55,010 --> 00:17:59,540
challenge hardness to say that the

387
00:17:56,780 --> 00:18:02,120
tempering algorithm has a negligible

388
00:17:59,540 --> 00:18:05,450
success probability to answer all the

389
00:18:02,120 --> 00:18:09,080
challenges correctly ok and here it's

390
00:18:05,450 --> 00:18:12,220
actually important that the tempering

391
00:18:09,080 --> 00:18:16,280
algorithm has a bounded description and

392
00:18:12,220 --> 00:18:18,310
if we go back to the application that I

393
00:18:16,280 --> 00:18:20,990
showed you at the very beginning

394
00:18:18,310 --> 00:18:22,550
assuming that the description of this

395
00:18:20,990 --> 00:18:25,970
tempering function can be absolutely

396
00:18:22,550 --> 00:18:28,129
arbitrary might seem to be a bit of an

397
00:18:25,970 --> 00:18:30,620
overkill so requiring that the

398
00:18:28,130 --> 00:18:32,600
description of the algorithm is bounded

399
00:18:30,620 --> 00:18:36,530
is not such a very unrealistic

400
00:18:32,600 --> 00:18:39,409
assumption ok so what remains to discuss

401
00:18:36,530 --> 00:18:42,440
is how do we get challenge heart graphs

402
00:18:39,410 --> 00:18:44,510
what are they how do we get them so

403
00:18:42,440 --> 00:18:47,330
first of all we looked at stack of

404
00:18:44,510 --> 00:18:51,560
localized expander graphs from brandon

405
00:18:47,330 --> 00:18:54,409
Devadas from 2016 and we extended the

406
00:18:51,560 --> 00:18:57,860
construction to achieve noise parameters

407
00:18:54,410 --> 00:19:01,580
for challenge heart graphs so high level

408
00:18:57,860 --> 00:19:05,240
idea of the construction we group the

409
00:19:01,580 --> 00:19:08,780
sings of the solo of the stack of locked

410
00:19:05,240 --> 00:19:11,830
localized Express expander graph and we

411
00:19:08,780 --> 00:19:14,810
put a gadget graph on top of each booth

412
00:19:11,830 --> 00:19:18,110
you can see on the picture how each

413
00:19:14,810 --> 00:19:20,810
budget graph looks it has several lines

414
00:19:18,110 --> 00:19:23,899
and how do we now connect this gadget

415
00:19:20,810 --> 00:19:27,169
craft to our sinks while we take the

416
00:19:23,900 --> 00:19:29,900
first sink and connect it to the first

417
00:19:27,170 --> 00:19:32,780
node in each line we take the second

418
00:19:29,900 --> 00:19:35,830
thing and connect it to the second node

419
00:19:32,780 --> 00:19:41,270
in each line and so on and so forth ok

420
00:19:35,830 --> 00:19:44,000
so we also evaluate that graph

421
00:19:41,270 --> 00:19:45,490
construction given by Paul and then

422
00:19:44,000 --> 00:19:47,080
later used by

423
00:19:45,490 --> 00:19:50,110
the Italian they're proof of space

424
00:19:47,080 --> 00:19:52,779
construction and actually it shows that

425
00:19:50,110 --> 00:19:55,510
they also satisfy challenge hardness in

426
00:19:52,779 --> 00:19:58,390
fact with better asymptotic parameters

427
00:19:55,510 --> 00:20:00,640
than the extension of sollux however the

428
00:19:58,390 --> 00:20:05,260
constants are large so if we evaluate

429
00:20:00,640 --> 00:20:10,149
for concrete security the extension of

430
00:20:05,260 --> 00:20:13,169
Solex performs way better okay so we

431
00:20:10,149 --> 00:20:15,908
have the I discussed now for different

432
00:20:13,169 --> 00:20:17,740
constructions for proof extractable

433
00:20:15,909 --> 00:20:20,230
non-interactive proof of space which

434
00:20:17,740 --> 00:20:23,380
gives us four different constructions

435
00:20:20,230 --> 00:20:26,260
for our non loaded code so let me

436
00:20:23,380 --> 00:20:29,260
conclude my talk with a small overview

437
00:20:26,260 --> 00:20:31,330
so what we wanted to do was generate

438
00:20:29,260 --> 00:20:33,970
space bounded non mobile code

439
00:20:31,330 --> 00:20:36,250
construction for unbounded tempering and

440
00:20:33,970 --> 00:20:39,130
what we did we took the construction

441
00:20:36,250 --> 00:20:41,620
from prior work but instantiated it with

442
00:20:39,130 --> 00:20:44,470
proof extractable non interactive proof

443
00:20:41,620 --> 00:20:46,149
of space and as you saw on the previous

444
00:20:44,470 --> 00:20:48,610
slide there are four different

445
00:20:46,149 --> 00:20:50,918
construction with different advantages

446
00:20:48,610 --> 00:20:53,379
and disadvantages here you can see an

447
00:20:50,919 --> 00:20:56,770
overview in the paper you can see both

448
00:20:53,380 --> 00:20:59,679
asymptotic and concrete parameters and a

449
00:20:56,770 --> 00:21:02,440
more detailed overview here is just to

450
00:20:59,679 --> 00:21:05,649
give you an idea how practical or

451
00:21:02,440 --> 00:21:07,990
impractical constructions are so if you

452
00:21:05,649 --> 00:21:10,629
look at the first line the pipe which

453
00:21:07,990 --> 00:21:13,750
represents the prior work we are in

454
00:21:10,630 --> 00:21:16,809
order of terabytes it's not very

455
00:21:13,750 --> 00:21:19,840
practical on the other hand if you look

456
00:21:16,809 --> 00:21:22,270
at our memory heart function based

457
00:21:19,840 --> 00:21:24,639
construction we are in order of

458
00:21:22,270 --> 00:21:26,649
kilobytes so the gap is huge and

459
00:21:24,640 --> 00:21:28,840
somewhere in between we have the

460
00:21:26,649 --> 00:21:31,059
challenge heart graph constructions and

461
00:21:28,840 --> 00:21:34,830
here you can also see that the Select

462
00:21:31,059 --> 00:21:38,289
based one outperforms the original

463
00:21:34,830 --> 00:21:41,889
construction from the proof of space

464
00:21:38,289 --> 00:21:45,520
paper okay and what we leave as an open

465
00:21:41,890 --> 00:21:48,399
question for further us a future work to

466
00:21:45,520 --> 00:21:50,080
design a fully unique non interactive

467
00:21:48,399 --> 00:21:53,350
proof of space because that would lead

468
00:21:50,080 --> 00:21:55,080
to a memory to a non mobile code with

469
00:21:53,350 --> 00:21:58,000
very nice parameters

470
00:21:55,080 --> 00:22:00,040
okay so that's everything thank you very

471
00:21:58,000 --> 00:22:15,540
much for your attention and I'm happy to

472
00:22:00,040 --> 00:22:18,040
answer any questions questions Hey in

473
00:22:15,540 --> 00:22:19,980
continues normal abort codes usually

474
00:22:18,040 --> 00:22:22,480
there is this problem of self destruct

475
00:22:19,980 --> 00:22:24,610
meaning that as soon as you get an error

476
00:22:22,480 --> 00:22:27,160
you should stop but it seemed that you

477
00:22:24,610 --> 00:22:28,740
never mentioned it yeah I did not

478
00:22:27,160 --> 00:22:30,850
mention it but yes we do need

479
00:22:28,740 --> 00:22:33,760
self-destructive that you need that

480
00:22:30,850 --> 00:22:40,600
essentially always for continues yes we

481
00:22:33,760 --> 00:22:43,260
do need self-destruct when you say the

482
00:22:40,600 --> 00:22:45,580
bounder you bound the size of the

483
00:22:43,260 --> 00:22:48,700
adversary what what is this like by a

484
00:22:45,580 --> 00:22:50,500
constant or it's something it's I'm

485
00:22:48,700 --> 00:22:52,330
sorry no I mean I mean all the

486
00:22:50,500 --> 00:22:54,790
parameters depending on each other so

487
00:22:52,330 --> 00:22:57,550
it's a parameter and of course you have

488
00:22:54,790 --> 00:23:00,580
to think to the remains which is the

489
00:22:57,550 --> 00:23:03,700
relative size well it depends on the so

490
00:23:00,580 --> 00:23:06,159
it depends on concrete like which of the

491
00:23:03,700 --> 00:23:15,290
constructions you take so we can talk

492
00:23:06,160 --> 00:23:18,730
about details later okay thank you again

493
00:23:15,290 --> 00:23:18,730
[Applause]

