1
00:00:05,340 --> 00:00:10,510
all right thank you so I'll be talking

2
00:00:08,320 --> 00:00:13,260
about our work on asymmetric message

3
00:00:10,510 --> 00:00:16,090
ranking for end-to-end encryption

4
00:00:13,260 --> 00:00:18,420
nowadays more than a billion users are

5
00:00:16,090 --> 00:00:21,509
communicating on platforms like whatsapp

6
00:00:18,420 --> 00:00:25,360
signal and Facebook secret messenger

7
00:00:21,510 --> 00:00:27,220
these services provide confidentiality

8
00:00:25,360 --> 00:00:30,460
and integrity meaning the platform can't

9
00:00:27,220 --> 00:00:32,830
read or modify messages and additionally

10
00:00:30,460 --> 00:00:34,390
they aim to provide deniability it

11
00:00:32,830 --> 00:00:37,089
shouldn't be possible for other parties

12
00:00:34,390 --> 00:00:39,070
to attribute messages to a sender even

13
00:00:37,090 --> 00:00:41,140
in the event that the recipient is

14
00:00:39,070 --> 00:00:45,280
compromised or is maliciously leaking

15
00:00:41,140 --> 00:00:46,690
messages another security property that

16
00:00:45,280 --> 00:00:50,050
we might desire of these messaging

17
00:00:46,690 --> 00:00:52,120
systems is metadata privacy in which the

18
00:00:50,050 --> 00:00:54,218
identity metadata of who is

19
00:00:52,120 --> 00:00:58,030
communicating with whom is hidden from

20
00:00:54,219 --> 00:01:00,730
the platform most work on this last

21
00:00:58,030 --> 00:01:02,170
property metadata private messaging has

22
00:01:00,730 --> 00:01:06,460
been confined to the research community

23
00:01:02,170 --> 00:01:08,110
but just in December of last year signal

24
00:01:06,460 --> 00:01:10,780
deployed a limited form of metadata

25
00:01:08,110 --> 00:01:13,630
privacy that they call sealed sender so

26
00:01:10,780 --> 00:01:15,310
in signal sealed sender the sender

27
00:01:13,630 --> 00:01:17,490
identity is hidden from the platform

28
00:01:15,310 --> 00:01:20,619
when a message is sent

29
00:01:17,490 --> 00:01:24,208
so all these security properties are

30
00:01:20,619 --> 00:01:26,800
great but what about abuse

31
00:01:24,209 --> 00:01:29,020
there are countless different forms of

32
00:01:26,800 --> 00:01:31,750
abuse that surface on these online

33
00:01:29,020 --> 00:01:34,479
platforms to name just a few

34
00:01:31,750 --> 00:01:36,789
Alice could be a cyber bully or an

35
00:01:34,479 --> 00:01:40,720
abusive ex-partner harassing Bob with

36
00:01:36,789 --> 00:01:42,910
abusive messages or perhaps a spammer

37
00:01:40,720 --> 00:01:44,979
sending annoying or potentially even

38
00:01:42,910 --> 00:01:48,098
dangerous bait messages in the hopes of

39
00:01:44,979 --> 00:01:50,020
link clicks or actually even more

40
00:01:48,099 --> 00:01:52,330
recently we've seen in the news about

41
00:01:50,020 --> 00:01:54,929
the prevalence of these misinformation

42
00:01:52,330 --> 00:01:57,340
campaigns which have contributed to

43
00:01:54,929 --> 00:02:01,630
political instability and in some cases

44
00:01:57,340 --> 00:02:04,690
even inciting riots and lynchings so in

45
00:02:01,630 --> 00:02:06,970
response to maintain a healthy platform

46
00:02:04,690 --> 00:02:08,728
and hold users accountable these

47
00:02:06,970 --> 00:02:12,569
services have chosen to introduce

48
00:02:08,729 --> 00:02:12,569
content-based moderation

49
00:02:14,909 --> 00:02:20,730
where Bob can report a message from

50
00:02:17,700 --> 00:02:23,129
Alice to a moderation system that in

51
00:02:20,730 --> 00:02:25,078
practice typically involves a

52
00:02:23,129 --> 00:02:27,480
combination of machine learning and

53
00:02:25,079 --> 00:02:30,480
human review in order to judge whether

54
00:02:27,480 --> 00:02:35,399
the platform's content policy has been

55
00:02:30,480 --> 00:02:37,108
violated in this case punitive action

56
00:02:35,400 --> 00:02:38,840
against Alice could be taken such as

57
00:02:37,109 --> 00:02:42,750
banning her from the platform

58
00:02:38,840 --> 00:02:44,370
so in fact content moderation has become

59
00:02:42,750 --> 00:02:47,220
a very big priority to some of these

60
00:02:44,370 --> 00:02:50,370
services for example Facebook employs

61
00:02:47,220 --> 00:02:53,069
over 15,000 content moderators and while

62
00:02:50,370 --> 00:02:54,959
that stat is over all of their services

63
00:02:53,069 --> 00:02:56,909
it still illustrates the point that

64
00:02:54,959 --> 00:03:02,239
content moderation has become an

65
00:02:56,909 --> 00:03:04,349
integral part of their platform however

66
00:03:02,239 --> 00:03:06,450
end-to-end encryption in privacy

67
00:03:04,349 --> 00:03:09,599
complicate the story of content

68
00:03:06,450 --> 00:03:12,298
moderation the moderator doesn't see the

69
00:03:09,599 --> 00:03:15,450
passage plaintext until Bob reports it

70
00:03:12,299 --> 00:03:17,250
so they can't determine whether Alice

71
00:03:15,450 --> 00:03:21,629
actually sent the message or if Bob is

72
00:03:17,250 --> 00:03:23,099
just saying L sent it so in this work we

73
00:03:21,629 --> 00:03:25,668
ask if we can balance the need for

74
00:03:23,099 --> 00:03:28,409
accountability via content moderation

75
00:03:25,669 --> 00:03:31,310
with the privacy goals that we desire of

76
00:03:28,409 --> 00:03:35,728
metadata private end to end encryption

77
00:03:31,310 --> 00:03:37,440
and ten encrypted messaging so we're

78
00:03:35,729 --> 00:03:40,769
able to answer this question in the

79
00:03:37,440 --> 00:03:42,780
affirmative doing so led to us

80
00:03:40,769 --> 00:03:45,540
introducing a new primitive that we call

81
00:03:42,780 --> 00:03:48,239
asymmetric message shrinking for reasons

82
00:03:45,540 --> 00:03:50,548
which will become clear momentarily and

83
00:03:48,239 --> 00:03:52,729
this asymmetric message franking can be

84
00:03:50,549 --> 00:03:55,049
paired with existing metadata private

85
00:03:52,729 --> 00:03:58,079
messaging services to enable content

86
00:03:55,049 --> 00:03:59,729
moderation and even more than that our

87
00:03:58,079 --> 00:04:01,590
primitive is useful just beyond this

88
00:03:59,729 --> 00:04:04,079
metadata private setting and also

89
00:04:01,590 --> 00:04:06,510
enables moderation in the setting where

90
00:04:04,079 --> 00:04:09,079
the moderator is decoupled from the

91
00:04:06,510 --> 00:04:12,599
messaging platform for example in

92
00:04:09,079 --> 00:04:15,720
federated meta messaging services or in

93
00:04:12,599 --> 00:04:18,630
communities that span across messaging

94
00:04:15,720 --> 00:04:20,548
platforms so we provide formal

95
00:04:18,630 --> 00:04:22,019
accountability and deniability security

96
00:04:20,548 --> 00:04:24,239
notions for the content moderation

97
00:04:22,019 --> 00:04:26,310
setting and report on the design and

98
00:04:24,240 --> 00:04:26,700
evaluation of a construction inspired by

99
00:04:26,310 --> 00:04:31,760
DES

100
00:04:26,700 --> 00:04:34,770
to verify our signatures to get started

101
00:04:31,760 --> 00:04:36,599
let's back up and look at the existing

102
00:04:34,770 --> 00:04:40,109
tools supporting cryptographic

103
00:04:36,600 --> 00:04:43,500
verification for content moderation this

104
00:04:40,110 --> 00:04:45,930
prior work coined message franking is a

105
00:04:43,500 --> 00:04:48,690
technique originally built for facebook

106
00:04:45,930 --> 00:04:51,270
secret messenger which supports content

107
00:04:48,690 --> 00:04:55,710
moderation in non metadata private

108
00:04:51,270 --> 00:04:56,400
settings to provide a little bit more

109
00:04:55,710 --> 00:04:59,180
detail

110
00:04:56,400 --> 00:05:02,429
recall that in modern end-to-end

111
00:04:59,180 --> 00:05:05,280
encryption Alice and Bob generate a per

112
00:05:02,430 --> 00:05:07,940
message shared secret key via some key

113
00:05:05,280 --> 00:05:11,280
agreement protocol such as signals

114
00:05:07,940 --> 00:05:13,680
triple diffie-hellman handshake and then

115
00:05:11,280 --> 00:05:18,059
that symmetric key is used to encrypt

116
00:05:13,680 --> 00:05:20,700
the plaintext in the non metadata

117
00:05:18,060 --> 00:05:22,770
private setting Alice then sends this

118
00:05:20,700 --> 00:05:24,510
ciphertext to the platform over a

119
00:05:22,770 --> 00:05:27,479
channel that's authenticated and bound

120
00:05:24,510 --> 00:05:29,010
her identity so this means that the

121
00:05:27,480 --> 00:05:30,900
platform knows the cipher text is being

122
00:05:29,010 --> 00:05:35,690
sent by Alice and that it should be

123
00:05:30,900 --> 00:05:37,770
delivered to Bob for example on Facebook

124
00:05:35,690 --> 00:05:42,210
Alice is logged into her Facebook

125
00:05:37,770 --> 00:05:44,099
account so in message franking then the

126
00:05:42,210 --> 00:05:46,130
platform simply stores this identity

127
00:05:44,100 --> 00:05:50,850
information along with the cipher text

128
00:05:46,130 --> 00:05:53,400
to report a message Bob will provide the

129
00:05:50,850 --> 00:05:55,620
symmetric key material and then the

130
00:05:53,400 --> 00:05:58,169
platform can use that key to decrypt the

131
00:05:55,620 --> 00:06:02,640
cipher text to learn what message Alice

132
00:05:58,170 --> 00:06:04,950
sent Bob and this this all works fine as

133
00:06:02,640 --> 00:06:06,690
long as the underlying symmetric

134
00:06:04,950 --> 00:06:09,479
encryption algorithm that's used is

135
00:06:06,690 --> 00:06:11,100
committing meaning that Bob can't

136
00:06:09,480 --> 00:06:15,000
provide a key that opens the cipher text

137
00:06:11,100 --> 00:06:16,950
to a second valid plaintext and so

138
00:06:15,000 --> 00:06:18,510
actually this is still just a little bit

139
00:06:16,950 --> 00:06:20,610
of a simplification of the message

140
00:06:18,510 --> 00:06:27,840
franking solution but it illustrates the

141
00:06:20,610 --> 00:06:29,670
basic idea unfortunately this solution

142
00:06:27,840 --> 00:06:32,580
doesn't work when we consider the

143
00:06:29,670 --> 00:06:34,920
metadata private setting so in the meta

144
00:06:32,580 --> 00:06:37,620
data private setting while the plaintext

145
00:06:34,920 --> 00:06:39,260
is still bound to the cipher text the

146
00:06:37,620 --> 00:06:42,050
identities no longer are

147
00:06:39,260 --> 00:06:47,030
so the moderator doesn't learn who sent

148
00:06:42,050 --> 00:06:49,910
the message at this point there seems

149
00:06:47,030 --> 00:06:52,400
like there might be an easy fix can we

150
00:06:49,910 --> 00:06:55,750
can we bind in Alice's identity using

151
00:06:52,400 --> 00:06:58,489
the same committing encryption strategy

152
00:06:55,750 --> 00:07:00,890
Bob can then verify the bound identities

153
00:06:58,490 --> 00:07:04,600
correct and the moderator will use the

154
00:07:00,890 --> 00:07:04,599
bound identity to attribute the message

155
00:07:04,900 --> 00:07:10,700
unfortunately there's a subtle attack

156
00:07:07,790 --> 00:07:12,860
here in which a third user Charlie can

157
00:07:10,700 --> 00:07:14,240
collude with Bob to frame Alice as

158
00:07:12,860 --> 00:07:17,060
having sent a message she didn't

159
00:07:14,240 --> 00:07:19,460
actually send and since the platform is

160
00:07:17,060 --> 00:07:21,290
meted a private the moderator can't know

161
00:07:19,460 --> 00:07:23,210
the message originally came from Charlie

162
00:07:21,290 --> 00:07:28,310
and not from Alice and so we consider

163
00:07:23,210 --> 00:07:30,919
this a break of accountability and at

164
00:07:28,310 --> 00:07:32,990
its core the problem with these

165
00:07:30,920 --> 00:07:35,090
approaches that rely simply on symmetric

166
00:07:32,990 --> 00:07:37,670
techniques is that Alice's identity

167
00:07:35,090 --> 00:07:40,849
isn't cryptographically bound to the

168
00:07:37,670 --> 00:07:42,950
message content we'll need to use a

169
00:07:40,850 --> 00:07:45,710
different strategy for metadata privacy

170
00:07:42,950 --> 00:07:47,180
for the metadata privacy setting or more

171
00:07:45,710 --> 00:07:49,549
generally for settings where the

172
00:07:47,180 --> 00:07:55,700
moderator doesn't learn the sender's

173
00:07:49,550 --> 00:07:59,300
identity so at a high level our solution

174
00:07:55,700 --> 00:08:01,010
of a symmetric message franking is a

175
00:07:59,300 --> 00:08:04,100
specialized digital signature scheme

176
00:08:01,010 --> 00:08:07,340
that reintroduces the send your identity

177
00:08:04,100 --> 00:08:09,410
binding using public key identities and

178
00:08:07,340 --> 00:08:12,020
while at the same time simultaneously

179
00:08:09,410 --> 00:08:13,610
achieving the accountability and

180
00:08:12,020 --> 00:08:18,680
deniability goals of our content

181
00:08:13,610 --> 00:08:21,080
moderation setting so then to send a

182
00:08:18,680 --> 00:08:23,120
message Alice will first sign a mess

183
00:08:21,080 --> 00:08:25,039
sign the message using her secret key

184
00:08:23,120 --> 00:08:26,390
and then encrypt the message in

185
00:08:25,040 --> 00:08:28,580
signature under the end-to-end

186
00:08:26,390 --> 00:08:29,870
encryption symmetric key so our message

187
00:08:28,580 --> 00:08:31,760
franking protocol is going to be

188
00:08:29,870 --> 00:08:35,240
decoupled from the end-to-end encryption

189
00:08:31,760 --> 00:08:37,039
algorithm Bob can then choose to report

190
00:08:35,240 --> 00:08:41,360
the message by sending the message and

191
00:08:37,039 --> 00:08:43,819
signature to the moderator so you might

192
00:08:41,360 --> 00:08:46,550
notice right away that accountability is

193
00:08:43,820 --> 00:08:48,920
easily satisfied using just standard

194
00:08:46,550 --> 00:08:51,050
digital signatures both the moderator

195
00:08:48,920 --> 00:08:53,040
and Bob can verify that a message is

196
00:08:51,050 --> 00:08:56,609
from Alice however

197
00:08:53,040 --> 00:08:58,770
the same verification algorithm can be

198
00:08:56,610 --> 00:09:02,010
run by anyone and so thus Ellis's

199
00:08:58,770 --> 00:09:02,910
messages don't have any deniability so

200
00:09:02,010 --> 00:09:06,569
we're going to need to use other

201
00:09:02,910 --> 00:09:09,030
approaches so as a starting point for

202
00:09:06,570 --> 00:09:11,460
our solution both technically and

203
00:09:09,030 --> 00:09:15,120
conceptually let's consider designated

204
00:09:11,460 --> 00:09:16,620
verifier signatures so designated

205
00:09:15,120 --> 00:09:19,050
verifier signatures are this cool

206
00:09:16,620 --> 00:09:22,470
technique in which the signer can

207
00:09:19,050 --> 00:09:24,780
designate a specific party and an only

208
00:09:22,470 --> 00:09:29,640
that specific party to be able to verify

209
00:09:24,780 --> 00:09:31,530
the signature accountability is met

210
00:09:29,640 --> 00:09:35,569
since the designated verifier can't be

211
00:09:31,530 --> 00:09:38,880
fooled by forgeries but there also

212
00:09:35,570 --> 00:09:40,920
exists a forging algorithm that even

213
00:09:38,880 --> 00:09:42,770
without the secret signing key can

214
00:09:40,920 --> 00:09:44,640
generate a fake signature that's

215
00:09:42,770 --> 00:09:46,530
indistinguishable from a real signature

216
00:09:44,640 --> 00:09:51,990
to any party that isn't the designated a

217
00:09:46,530 --> 00:09:54,150
verifier and this provides deniability

218
00:09:51,990 --> 00:09:55,830
in the cryptographic sense and that

219
00:09:54,150 --> 00:09:57,480
there's no cryptographic reason for

220
00:09:55,830 --> 00:09:59,190
anyone to believe that a signature is

221
00:09:57,480 --> 00:10:03,300
authentic because it could have just as

222
00:09:59,190 --> 00:10:05,150
easily have been a forgery and this type

223
00:10:03,300 --> 00:10:07,410
of denial of the deniability seems

224
00:10:05,150 --> 00:10:10,800
particularly important in the wake of

225
00:10:07,410 --> 00:10:12,600
recent data breaches in which breach

226
00:10:10,800 --> 00:10:18,209
signatures were used as cryptographic

227
00:10:12,600 --> 00:10:21,060
evidence of the breaches authenticity so

228
00:10:18,210 --> 00:10:23,070
now let's consider using designated

229
00:10:21,060 --> 00:10:25,650
verifiers signatures in the following

230
00:10:23,070 --> 00:10:27,570
way let's have Alice sign her messages

231
00:10:25,650 --> 00:10:31,199
with the moderator as the designated

232
00:10:27,570 --> 00:10:34,170
verifier so we'll add a public key to

233
00:10:31,200 --> 00:10:36,930
the moderator which Alice will use to

234
00:10:34,170 --> 00:10:39,329
sign her message and then the moderator

235
00:10:36,930 --> 00:10:42,780
can verify the message using their own

236
00:10:39,330 --> 00:10:45,860
secret key and then by the designated

237
00:10:42,780 --> 00:10:47,939
verify property of the signature others

238
00:10:45,860 --> 00:10:49,710
can't be convinced that a message is

239
00:10:47,940 --> 00:10:52,250
from Alice since it could have just as

240
00:10:49,710 --> 00:10:55,200
easily been from a forgery

241
00:10:52,250 --> 00:10:57,780
however unfortunately by the same exact

242
00:10:55,200 --> 00:10:59,400
property Bob also isn't able to check

243
00:10:57,780 --> 00:11:03,270
whether the signature will be accepted

244
00:10:59,400 --> 00:11:05,610
by the moderator and so that means that

245
00:11:03,270 --> 00:11:06,620
Alice can evade moderation by sending

246
00:11:05,610 --> 00:11:10,190
Bob

247
00:11:06,620 --> 00:11:12,890
signatures so to complete the

248
00:11:10,190 --> 00:11:19,610
accountability picture we'll still need

249
00:11:12,890 --> 00:11:22,060
something more specifically we need some

250
00:11:19,610 --> 00:11:24,860
way for Bob to be able to check whether

251
00:11:22,060 --> 00:11:28,729
the signature will be accepted by the

252
00:11:24,860 --> 00:11:31,070
moderator so then in a symmetric message

253
00:11:28,730 --> 00:11:34,940
franking we do this by adding Bob as a

254
00:11:31,070 --> 00:11:38,170
designated verifier of a proof that the

255
00:11:34,940 --> 00:11:41,690
signature to the moderator will accept

256
00:11:38,170 --> 00:11:44,920
so what does that look like now all

257
00:11:41,690 --> 00:11:47,720
three parties will get a public key

258
00:11:44,920 --> 00:11:49,579
Alice signs messages specifying the

259
00:11:47,720 --> 00:11:52,310
public keys of the - verifying parties

260
00:11:49,580 --> 00:11:56,060
which are the receiver Bob and the

261
00:11:52,310 --> 00:11:59,030
moderator the first verification

262
00:11:56,060 --> 00:12:00,260
algorithm is run by the recipient to

263
00:11:59,030 --> 00:12:03,470
verify that the signature will be

264
00:12:00,260 --> 00:12:05,540
accepted by the moderator and the second

265
00:12:03,470 --> 00:12:08,210
verification algorithm which we call

266
00:12:05,540 --> 00:12:13,339
judge allows the moderator to attribute

267
00:12:08,210 --> 00:12:17,150
a message to the sender informally then

268
00:12:13,340 --> 00:12:19,190
our accountability notions restrict how

269
00:12:17,150 --> 00:12:23,780
these three algorithms interact with

270
00:12:19,190 --> 00:12:26,000
each other receiver binding means Bob is

271
00:12:23,780 --> 00:12:28,270
bound to only be able to report messages

272
00:12:26,000 --> 00:12:31,520
that he actually received from Alice

273
00:12:28,270 --> 00:12:33,110
he can't frame Alice by generating a

274
00:12:31,520 --> 00:12:36,050
message that passes judge that she

275
00:12:33,110 --> 00:12:38,540
didn't actually send and in sender

276
00:12:36,050 --> 00:12:40,339
binding this means that alice is bound

277
00:12:38,540 --> 00:12:43,099
to messages that she actually sends to

278
00:12:40,340 --> 00:12:45,320
Bob in that messages she said she sent

279
00:12:43,100 --> 00:12:48,290
can be reported and traced back to her

280
00:12:45,320 --> 00:12:50,390
she can't send Bob a message that Bob

281
00:12:48,290 --> 00:12:52,910
will accept through his verify algorithm

282
00:12:50,390 --> 00:12:57,650
and then we'll later fail the moderators

283
00:12:52,910 --> 00:13:00,410
judge algorithm so that covers our

284
00:12:57,650 --> 00:13:05,030
desired accountability goals but what

285
00:13:00,410 --> 00:13:07,459
about deniability for this we reason

286
00:13:05,030 --> 00:13:09,079
about deniability by thinking about who

287
00:13:07,460 --> 00:13:12,130
can create forgeries that are

288
00:13:09,080 --> 00:13:15,140
indistinguishable from real signatures

289
00:13:12,130 --> 00:13:18,080
for example if we consider our earlier

290
00:13:15,140 --> 00:13:20,480
scenario where Bob is leaking Alice's

291
00:13:18,080 --> 00:13:23,780
messages to the public

292
00:13:20,480 --> 00:13:25,940
if there existed of forging algorithm

293
00:13:23,780 --> 00:13:27,709
that Bob could run using his secret key

294
00:13:25,940 --> 00:13:29,210
that produces a signature

295
00:13:27,710 --> 00:13:31,190
indistinguishable to Alice's real

296
00:13:29,210 --> 00:13:32,600
signature then the public would have no

297
00:13:31,190 --> 00:13:34,370
reason to believe the message came from

298
00:13:32,600 --> 00:13:39,710
Alice because it could have just as

299
00:13:34,370 --> 00:13:42,620
easily been from Bob's forgery so we

300
00:13:39,710 --> 00:13:45,650
want the public who only has access to

301
00:13:42,620 --> 00:13:51,770
public keys to be unable to distinguish

302
00:13:45,650 --> 00:13:54,980
between these two worlds one where one

303
00:13:51,770 --> 00:13:59,780
that uses Alice's real signature and one

304
00:13:54,980 --> 00:14:02,390
that is Bob's forgery another scenario

305
00:13:59,780 --> 00:14:05,240
we might care about is if the moderator

306
00:14:02,390 --> 00:14:07,490
leaks Alice's messages here we require a

307
00:14:05,240 --> 00:14:10,850
forging algorithm that takes the secret

308
00:14:07,490 --> 00:14:13,070
key of the moderator and to make things

309
00:14:10,850 --> 00:14:15,170
even more complicated what about when

310
00:14:13,070 --> 00:14:18,250
the moderator or the recipient are

311
00:14:15,170 --> 00:14:20,329
compromised and their key becomes public

312
00:14:18,250 --> 00:14:22,490
we may we may want to maintain

313
00:14:20,330 --> 00:14:25,700
deniability even in the event of certain

314
00:14:22,490 --> 00:14:27,620
key compromised scenarios so to capture

315
00:14:25,700 --> 00:14:29,450
key compromise we would want the

316
00:14:27,620 --> 00:14:31,400
distinguisher to not be able to

317
00:14:29,450 --> 00:14:35,480
distinguish even when given secret key

318
00:14:31,400 --> 00:14:37,430
material and so you can see that when

319
00:14:35,480 --> 00:14:40,060
considering all these key compromised

320
00:14:37,430 --> 00:14:43,069
scenarios this quickly blows up into

321
00:14:40,060 --> 00:14:47,569
combinatorially many possible forging

322
00:14:43,070 --> 00:14:49,070
relationships some of these forging

323
00:14:47,570 --> 00:14:52,160
relationships have interesting

324
00:14:49,070 --> 00:14:54,590
implications to give an example relating

325
00:14:52,160 --> 00:14:56,449
to the previous presentation consider

326
00:14:54,590 --> 00:14:59,000
the relationship where a forger with

327
00:14:56,450 --> 00:15:02,510
only public keys fools the distinguisher

328
00:14:59,000 --> 00:15:04,190
that even holds Alice's secret key this

329
00:15:02,510 --> 00:15:06,710
implies that when maintaining

330
00:15:04,190 --> 00:15:08,300
deniability Alice won't be pressured to

331
00:15:06,710 --> 00:15:10,250
reveal her secret key in order to show

332
00:15:08,300 --> 00:15:13,819
her innocence since her keys not going

333
00:15:10,250 --> 00:15:16,460
to be of any help anyways in other words

334
00:15:13,820 --> 00:15:18,320
this forging relationship implies that

335
00:15:16,460 --> 00:15:21,460
Alice doesn't have the ability to

336
00:15:18,320 --> 00:15:21,460
repudiate messages

337
00:15:22,460 --> 00:15:25,130
the other hand other relationships

338
00:15:23,930 --> 00:15:27,949
contradict directly with our

339
00:15:25,130 --> 00:15:29,480
accountability goals for example if the

340
00:15:27,950 --> 00:15:31,730
receiver Bob was able to create a

341
00:15:29,480 --> 00:15:33,260
forgery that fooled the moderator then

342
00:15:31,730 --> 00:15:36,050
it would be a direct violation of our

343
00:15:33,260 --> 00:15:37,850
receiver binding property allowing Bob

344
00:15:36,050 --> 00:15:43,160
to frame Alice for messages she didn't

345
00:15:37,850 --> 00:15:45,760
actually send so ultimately we explored

346
00:15:43,160 --> 00:15:48,949
this whole this vast deniability space

347
00:15:45,760 --> 00:15:50,689
in this table I'm showing the keys

348
00:15:48,950 --> 00:15:52,550
available to the forger on the left side

349
00:15:50,690 --> 00:15:55,040
and the keys available to the

350
00:15:52,550 --> 00:15:56,229
distinguisher on the top and you can see

351
00:15:55,040 --> 00:15:59,300
that some of the forging relationships

352
00:15:56,230 --> 00:16:01,670
are explicitly ruled out by our chosen

353
00:15:59,300 --> 00:16:06,829
accountability goals which I'm depicting

354
00:16:01,670 --> 00:16:08,750
with these little symbols we ended up

355
00:16:06,830 --> 00:16:12,560
picking a set of three deniability

356
00:16:08,750 --> 00:16:15,350
relationships corresponding to forging

357
00:16:12,560 --> 00:16:17,750
with no secret keys forging when the

358
00:16:15,350 --> 00:16:20,320
receivers key is compromised and forging

359
00:16:17,750 --> 00:16:24,170
when the moderators key is compromised

360
00:16:20,320 --> 00:16:27,650
so as an added benefit our chosen dime

361
00:16:24,170 --> 00:16:29,329
deniability targets imply the rest of

362
00:16:27,650 --> 00:16:31,670
the forging relationships that aren't

363
00:16:29,330 --> 00:16:34,400
ruled out directly by our accountability

364
00:16:31,670 --> 00:16:39,260
goals as shown by the the blue shading

365
00:16:34,400 --> 00:16:41,660
on this table so the choices that we

366
00:16:39,260 --> 00:16:44,720
made represent only one possible design

367
00:16:41,660 --> 00:16:47,000
point in this deniability space there

368
00:16:44,720 --> 00:16:48,320
are many other reasonable trade-offs

369
00:16:47,000 --> 00:16:51,770
that can be made depending on your

370
00:16:48,320 --> 00:16:53,480
desired accountability goals supporting

371
00:16:51,770 --> 00:16:55,340
reputable signatures would be such an

372
00:16:53,480 --> 00:17:02,990
example as motivated by the previous

373
00:16:55,340 --> 00:17:05,089
talk okay so to summarize so far we've

374
00:17:02,990 --> 00:17:07,069
seen the accountability and deniability

375
00:17:05,089 --> 00:17:09,139
goals for a symmetric message franking

376
00:17:07,069 --> 00:17:11,689
but not how to actually build a scheme

377
00:17:09,140 --> 00:17:13,220
that achieves them this was challenging

378
00:17:11,690 --> 00:17:15,530
because we have so many security

379
00:17:13,220 --> 00:17:17,030
properties that we need a balance so

380
00:17:15,530 --> 00:17:23,849
next let me give you a high-level

381
00:17:17,030 --> 00:17:26,160
overview of our AMF construction our kin

382
00:17:23,849 --> 00:17:29,280
consists of a proof of knowledge of a

383
00:17:26,160 --> 00:17:31,170
carefully chosen expression of discrete

384
00:17:29,280 --> 00:17:34,820
log relationships which relate the

385
00:17:31,170 --> 00:17:34,820
public keys of the parties involved

386
00:17:35,460 --> 00:17:39,330
the signature proof of knowledge

387
00:17:36,930 --> 00:17:41,100
notation will use to specify proofs of

388
00:17:39,330 --> 00:17:44,879
discrete log relationships follows the

389
00:17:41,100 --> 00:17:47,129
Chemosh Dowler style so for example this

390
00:17:44,880 --> 00:17:49,230
is the notation for a standard Norrell

391
00:17:47,130 --> 00:17:54,750
signature that's proving knowledge of

392
00:17:49,230 --> 00:17:56,460
Alice's secret key this relationship as

393
00:17:54,750 --> 00:17:58,890
well as those that are used in our

394
00:17:56,460 --> 00:18:00,870
construction can be proved using an

395
00:17:58,890 --> 00:18:02,190
interactive signal protocol with a

396
00:18:00,870 --> 00:18:03,090
three-phase commitment

397
00:18:02,190 --> 00:18:05,280
challenge/response

398
00:18:03,090 --> 00:18:07,169
and then we can turn this interactive

399
00:18:05,280 --> 00:18:09,389
protocol into a signature using the

400
00:18:07,170 --> 00:18:10,920
standard Fiat Jameer transform by

401
00:18:09,390 --> 00:18:13,190
generating the challenge using a hash

402
00:18:10,920 --> 00:18:17,150
function that also binds in the message

403
00:18:13,190 --> 00:18:21,570
and so with that here's our construction

404
00:18:17,150 --> 00:18:24,030
and at a high level as per our earlier

405
00:18:21,570 --> 00:18:27,419
intuition the construction is made up of

406
00:18:24,030 --> 00:18:30,030
two components the first Clause is kind

407
00:18:27,420 --> 00:18:32,280
of an embedded designated a verifier

408
00:18:30,030 --> 00:18:33,990
signature to the moderator and the

409
00:18:32,280 --> 00:18:35,580
second clause corresponds to a

410
00:18:33,990 --> 00:18:38,330
designated verifier proof to the

411
00:18:35,580 --> 00:18:40,740
receiver that the signature will accept

412
00:18:38,330 --> 00:18:42,330
so now let's look at what makes up the

413
00:18:40,740 --> 00:18:45,390
designated verifier signature - the

414
00:18:42,330 --> 00:18:48,928
moderator it consists of a disjunction

415
00:18:45,390 --> 00:18:51,240
of two clauses the first Clause is what

416
00:18:48,929 --> 00:18:53,250
Alice proves to the moderator and so you

417
00:18:51,240 --> 00:18:56,010
can notice that it mirrors the Schnoor

418
00:18:53,250 --> 00:18:57,780
signature that I put up earlier in which

419
00:18:56,010 --> 00:19:01,350
Alice is simply proving knowledge of her

420
00:18:57,780 --> 00:19:03,210
secret key and the second Clause is what

421
00:19:01,350 --> 00:19:06,990
allows other parties without knowledge

422
00:19:03,210 --> 00:19:09,840
of Alice's secret key to forge so other

423
00:19:06,990 --> 00:19:14,100
parties will construct this J value in

424
00:19:09,840 --> 00:19:16,470
different manners the moderator will

425
00:19:14,100 --> 00:19:18,389
only accept the signature if the J value

426
00:19:16,470 --> 00:19:21,330
is constructed in a in a very special

427
00:19:18,390 --> 00:19:24,090
way specifically if it's constructed as

428
00:19:21,330 --> 00:19:25,770
a diffie-hellman triple with its own

429
00:19:24,090 --> 00:19:31,590
public key the moderator is public key

430
00:19:25,770 --> 00:19:33,179
and this ephemeral EJ value and so

431
00:19:31,590 --> 00:19:36,240
assuming the ephemeral information that

432
00:19:33,179 --> 00:19:37,170
constructs EJ is discarded only the

433
00:19:36,240 --> 00:19:39,090
moderator is a

434
00:19:37,170 --> 00:19:41,340
to check the validity of this

435
00:19:39,090 --> 00:19:43,919
diffie-hellman triple and it can do so

436
00:19:41,340 --> 00:19:45,959
by using its secret key and so this is

437
00:19:43,920 --> 00:19:50,310
what provides the designated verifier

438
00:19:45,960 --> 00:19:52,580
property so zooming back out to the full

439
00:19:50,310 --> 00:19:55,139
expression and then looking at the

440
00:19:52,580 --> 00:19:57,510
designated verifier proof to Bob

441
00:19:55,140 --> 00:19:59,790
we see that it's constructed in the same

442
00:19:57,510 --> 00:20:01,890
form the first clause is what alice is

443
00:19:59,790 --> 00:20:05,070
proving to Bob and the second clause is

444
00:20:01,890 --> 00:20:06,660
what allows for forgeries and so

445
00:20:05,070 --> 00:20:09,480
remember the goal of the designated

446
00:20:06,660 --> 00:20:10,890
verifier proof to bob was for alice to

447
00:20:09,480 --> 00:20:12,660
prove that the designated verifiers

448
00:20:10,890 --> 00:20:16,080
signature to the moderator will accept

449
00:20:12,660 --> 00:20:18,720
and we can see that that's exactly what

450
00:20:16,080 --> 00:20:22,050
she's doing here she's proving to Bob

451
00:20:18,720 --> 00:20:28,500
the diffie-hellman relationship of J EJ

452
00:20:22,050 --> 00:20:31,860
and the public key of the moderator okay

453
00:20:28,500 --> 00:20:34,290
so in summary our construction provides

454
00:20:31,860 --> 00:20:37,409
a way for the moderator to attribute a

455
00:20:34,290 --> 00:20:38,760
signature to Alice for Bob to verify

456
00:20:37,410 --> 00:20:41,970
that a signature will be properly

457
00:20:38,760 --> 00:20:43,830
attributed and provides a variety of

458
00:20:41,970 --> 00:20:46,170
different forging algorithms for various

459
00:20:43,830 --> 00:20:49,770
key compromise scenarios that gives

460
00:20:46,170 --> 00:20:51,780
Alice a level of deniability for more

461
00:20:49,770 --> 00:20:53,730
details on how these different forgeries

462
00:20:51,780 --> 00:20:56,639
are created please take a look at the

463
00:20:53,730 --> 00:20:58,920
paper and the paper also has the formal

464
00:20:56,640 --> 00:21:00,810
Theorem statements and proof showing our

465
00:20:58,920 --> 00:21:04,590
construction meets our desired security

466
00:21:00,810 --> 00:21:07,320
properties and so although this proof of

467
00:21:04,590 --> 00:21:10,169
knowledge seems large it's actually made

468
00:21:07,320 --> 00:21:11,490
up of very standard discrete log proofs

469
00:21:10,170 --> 00:21:13,800
that can be implemented quite

470
00:21:11,490 --> 00:21:16,650
efficiently we implement our

471
00:21:13,800 --> 00:21:18,810
construction in Python and using the pet

472
00:21:16,650 --> 00:21:21,630
Lib library and find that our solution

473
00:21:18,810 --> 00:21:25,260
leads to short signatures for signing

474
00:21:21,630 --> 00:21:27,140
and fast verification times well within

475
00:21:25,260 --> 00:21:31,860
the bounds of what we think is practical

476
00:21:27,140 --> 00:21:36,320
and we also wanted to see how this would

477
00:21:31,860 --> 00:21:38,729
work on existing platforms recall that

478
00:21:36,320 --> 00:21:41,820
since a symmetric message franking

479
00:21:38,730 --> 00:21:44,070
doesn't require metadata we can add it

480
00:21:41,820 --> 00:21:47,610
as a third party service on top of

481
00:21:44,070 --> 00:21:49,800
legacy systems so we provide a proof of

482
00:21:47,610 --> 00:21:50,909
concept integration with Twitter private

483
00:21:49,800 --> 00:21:53,129
messages

484
00:21:50,910 --> 00:21:54,720
that uses key base to manage the public

485
00:21:53,130 --> 00:21:58,320
key identity bindings for Twitter

486
00:21:54,720 --> 00:22:00,690
identities and then the in our in our

487
00:21:58,320 --> 00:22:02,610
integration the service also uses a

488
00:22:00,690 --> 00:22:05,820
machine learning system called

489
00:22:02,610 --> 00:22:08,729
perspective to automatically score

490
00:22:05,820 --> 00:22:10,320
message toxicity levels and so we think

491
00:22:08,730 --> 00:22:11,790
this proof of concept provides a pretty

492
00:22:10,320 --> 00:22:14,450
good example of the types of things you

493
00:22:11,790 --> 00:22:18,090
can do with a symmetric message ranking

494
00:22:14,450 --> 00:22:19,710
so in conclusion we introduced a

495
00:22:18,090 --> 00:22:21,360
symmetric message franking a new

496
00:22:19,710 --> 00:22:22,830
primitive for cryptographic content

497
00:22:21,360 --> 00:22:25,229
moderation in the metadata private

498
00:22:22,830 --> 00:22:27,449
setting we introduced definitions and

499
00:22:25,230 --> 00:22:29,430
strategies to formally reason about the

500
00:22:27,450 --> 00:22:32,100
trade-offs between deniability and

501
00:22:29,430 --> 00:22:33,720
accountability in this space and lastly

502
00:22:32,100 --> 00:22:35,719
we gave a construction conceptually

503
00:22:33,720 --> 00:22:39,440
based on designated verified signatures

504
00:22:35,720 --> 00:22:39,440
thank you happy to take any questions

505
00:22:43,870 --> 00:22:49,489
all right thank you we'll have time for

506
00:22:46,580 --> 00:23:13,460
a few questions again please come to the

507
00:22:49,490 --> 00:23:14,180
mics we haven't looked we haven't gone

508
00:23:13,460 --> 00:23:16,640
in that direction

509
00:23:14,180 --> 00:23:18,890
no and just to check you have a single

510
00:23:16,640 --> 00:23:20,750
scheme to despise simultaneously

511
00:23:18,890 --> 00:23:22,340
simultaneously all three kind of

512
00:23:20,750 --> 00:23:23,960
deniability properties that's right

513
00:23:22,340 --> 00:23:27,580
those three different ones that those

514
00:23:23,960 --> 00:23:27,580
two those three targets that we chose

515
00:23:29,860 --> 00:23:36,409
all right and then II for the questions

516
00:23:33,700 --> 00:23:39,310
if not that's Thanksgiving again thank

517
00:23:36,410 --> 00:23:39,310
you this goes recession

