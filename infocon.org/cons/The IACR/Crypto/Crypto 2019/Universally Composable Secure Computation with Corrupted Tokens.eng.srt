1
00:00:05,150 --> 00:00:11,219
thank you for the introduction this is

2
00:00:07,970 --> 00:00:13,830
my toy work with our nation our children

3
00:00:11,219 --> 00:00:16,950
are of a Ostrovsky and even Visconti

4
00:00:13,830 --> 00:00:21,480
this is a work done by why I was at

5
00:00:16,950 --> 00:00:23,280
usury so let's start with the MPC which

6
00:00:21,480 --> 00:00:25,650
before we have seen as well thumbs in

7
00:00:23,280 --> 00:00:28,620
this conference already so we have a

8
00:00:25,650 --> 00:00:30,810
number of parties is with their own

9
00:00:28,620 --> 00:00:35,629
input and they want to totally compute

10
00:00:30,810 --> 00:00:38,460
some function based on this input so

11
00:00:35,629 --> 00:00:40,800
they want to hire their own input from

12
00:00:38,460 --> 00:00:43,200
other parties so basically they exchange

13
00:00:40,800 --> 00:00:49,649
some messages you know as you compute

14
00:00:43,200 --> 00:00:52,470
the output of the function and there's

15
00:00:49,649 --> 00:00:57,510
also an adversary that will corrupt some

16
00:00:52,470 --> 00:01:01,640
number of parties and try to steal the

17
00:00:57,510 --> 00:01:06,990
input of their honest bodies and try to

18
00:01:01,640 --> 00:01:09,720
make the computation our failure so in

19
00:01:06,990 --> 00:01:13,140
this work we consider a malicious

20
00:01:09,720 --> 00:01:15,479
adversary where the adversary can make

21
00:01:13,140 --> 00:01:21,210
the corrupted party they work from their

22
00:01:15,479 --> 00:01:35,090
protocol and we also considered you see

23
00:01:21,210 --> 00:01:37,280
security thank you

24
00:01:35,090 --> 00:01:40,820
in this book we consider the you see

25
00:01:37,280 --> 00:01:44,060
security which is a very strong notion

26
00:01:40,820 --> 00:01:46,100
of security unfortunately you see

27
00:01:44,060 --> 00:01:49,940
security cannot be achieved for some

28
00:01:46,100 --> 00:01:52,640
functionality in the plane model so we

29
00:01:49,940 --> 00:01:55,908
consider an NPC with the trust

30
00:01:52,640 --> 00:02:00,890
assumption so here we have some trusted

31
00:01:55,909 --> 00:02:04,970
party to generate some some set up for

32
00:02:00,890 --> 00:02:08,389
the parties to use for the NPC for

33
00:02:04,970 --> 00:02:11,090
example we can have a common reference

34
00:02:08,389 --> 00:02:14,089
spring with all the parties has access

35
00:02:11,090 --> 00:02:21,190
to and then they can use that to compute

36
00:02:14,090 --> 00:02:24,140
the message for the NPC protocol another

37
00:02:21,190 --> 00:02:29,510
assumption that we focus on in this talk

38
00:02:24,140 --> 00:02:33,140
is the temple proof hardware token so

39
00:02:29,510 --> 00:02:35,750
here a party will come up with a program

40
00:02:33,140 --> 00:02:39,140
P and then embed it in that token and

41
00:02:35,750 --> 00:02:42,739
then send it to another party so the

42
00:02:39,140 --> 00:02:45,859
receiver of the token can execute this

43
00:02:42,739 --> 00:02:47,840
program P on an input they want as many

44
00:02:45,860 --> 00:02:49,910
time as they want without a no less of

45
00:02:47,840 --> 00:02:52,340
the I mean without the centre knowing

46
00:02:49,910 --> 00:02:56,510
anything about this input about the

47
00:02:52,340 --> 00:02:57,920
execution at the same time the receiver

48
00:02:56,510 --> 00:03:03,679
will not learn anything about the

49
00:02:57,920 --> 00:03:08,630
description of the program P and model

50
00:03:03,680 --> 00:03:12,190
and a number of parties can construct

51
00:03:08,630 --> 00:03:17,358
this token and then send him around to

52
00:03:12,190 --> 00:03:19,430
execute NPC protocol so this is at the

53
00:03:17,359 --> 00:03:24,440
temple proof hardware token model by

54
00:03:19,430 --> 00:03:28,519
caste so formally lays a token

55
00:03:24,440 --> 00:03:31,519
functionality that when a party want to

56
00:03:28,519 --> 00:03:33,500
create a token for program P he will

57
00:03:31,519 --> 00:03:35,720
send a message to the token

58
00:03:33,500 --> 00:03:38,239
functionality with the description of

59
00:03:35,720 --> 00:03:42,500
the program P the functionality we

60
00:03:38,239 --> 00:03:44,930
memorize this description and then the

61
00:03:42,500 --> 00:03:48,510
receiver can ask the functionality to

62
00:03:44,930 --> 00:03:51,959
execute program P on an input X

63
00:03:48,510 --> 00:03:58,500
he want and then a huge Steve px in

64
00:03:51,959 --> 00:04:01,430
return the problem is that in in real

65
00:03:58,500 --> 00:04:05,760
world how do we actually create this

66
00:04:01,430 --> 00:04:09,599
temple proof hardware token so ideally

67
00:04:05,760 --> 00:04:11,690
we want the sender of a token to come up

68
00:04:09,599 --> 00:04:15,540
with a program P and then manufacture a

69
00:04:11,690 --> 00:04:18,358
token himself right so in this case you

70
00:04:15,540 --> 00:04:21,199
can just uh create a create a token and

71
00:04:18,358 --> 00:04:24,120
then send it over to the receiver in

72
00:04:21,199 --> 00:04:26,729
reality not everyone can actually create

73
00:04:24,120 --> 00:04:29,400
a temporal token right that's not

74
00:04:26,729 --> 00:04:33,990
something that we can do by ourselves so

75
00:04:29,400 --> 00:04:40,198
we use a third-party manufacturer to

76
00:04:33,990 --> 00:04:42,150
create this this token so the sender

77
00:04:40,199 --> 00:04:45,449
will send at the description of P to the

78
00:04:42,150 --> 00:04:47,789
third party manufacturer and then

79
00:04:45,449 --> 00:04:52,830
receive a token to send to the receiver

80
00:04:47,789 --> 00:04:55,200
the plumbing here is that the third

81
00:04:52,830 --> 00:05:01,500
party manufacturer may be corrupt right

82
00:04:55,200 --> 00:05:04,289
so in this case the corrupt the

83
00:05:01,500 --> 00:05:12,750
adversary can learn the description of P

84
00:05:04,289 --> 00:05:15,450
that is sent to the manufacturer and he

85
00:05:12,750 --> 00:05:17,460
can also collude with the receiver to

86
00:05:15,450 --> 00:05:20,099
break the the security of this bastard

87
00:05:17,460 --> 00:05:26,299
up which is the temple proof hardware

88
00:05:20,099 --> 00:05:30,659
token the sender may need to choose

89
00:05:26,300 --> 00:05:31,560
among many hardware manufacturer which

90
00:05:30,660 --> 00:05:34,849
one he can trust

91
00:05:31,560 --> 00:05:39,889
which one is and this one a corrupt

92
00:05:34,849 --> 00:05:43,710
another prom is that the the corrupt

93
00:05:39,889 --> 00:05:45,840
manufacturer can also replace the the

94
00:05:43,710 --> 00:05:50,780
program P with a different program to

95
00:05:45,840 --> 00:05:50,780
under matter the computation of the NPC

96
00:05:51,650 --> 00:05:57,419
so the question that we would like to

97
00:05:54,360 --> 00:05:59,370
answer is can we obtain the UC security

98
00:05:57,419 --> 00:06:01,539
hardware best security in the world

99
00:05:59,370 --> 00:06:06,490
where most hardware token

100
00:06:01,540 --> 00:06:07,540
new factors can be corrupt and our

101
00:06:06,490 --> 00:06:09,970
answer is yes

102
00:06:07,540 --> 00:06:13,630
so we construct a protocol that I you

103
00:06:09,970 --> 00:06:16,750
see realized the the temporal proof

104
00:06:13,630 --> 00:06:18,969
token functionality with abort in the

105
00:06:16,750 --> 00:06:22,510
corrupted token model assuming a

106
00:06:18,970 --> 00:06:24,850
deceased end of one wave function so

107
00:06:22,510 --> 00:06:27,520
this is our main result and we need to

108
00:06:24,850 --> 00:06:29,740
explain what is different the token

109
00:06:27,520 --> 00:06:35,700
functionality with the board and the

110
00:06:29,740 --> 00:06:38,950
corrupt the corrupted token model so

111
00:06:35,700 --> 00:06:43,060
this is a setup that we are interested

112
00:06:38,950 --> 00:06:46,229
in we have several manufacturers some of

113
00:06:43,060 --> 00:06:49,570
which can be may be corrupt and some of

114
00:06:46,230 --> 00:06:52,420
manufacturer honest but both sender and

115
00:06:49,570 --> 00:06:56,830
receiver doesn't know which one is

116
00:06:52,420 --> 00:07:02,020
corrupt so render the sender wants to

117
00:06:56,830 --> 00:07:06,070
send a token that embed a program P here

118
00:07:02,020 --> 00:07:08,260
you create a bunch of programs p1 in

119
00:07:06,070 --> 00:07:11,440
this example here one of two three five

120
00:07:08,260 --> 00:07:16,090
each of it is a waste Addison review at

121
00:07:11,440 --> 00:07:20,469
the program P by itself and then Houston

122
00:07:16,090 --> 00:07:24,700
is one two is a manufacturer and then

123
00:07:20,470 --> 00:07:26,310
receive a number of tokens some of which

124
00:07:24,700 --> 00:07:30,479
can be corrupt

125
00:07:26,310 --> 00:07:33,610
well then send out them to the receiver

126
00:07:30,480 --> 00:07:37,510
the receiver will use all these tokens

127
00:07:33,610 --> 00:07:41,740
and then exchange and then execute them

128
00:07:37,510 --> 00:07:46,960
in a way that he can get the output px

129
00:07:41,740 --> 00:07:50,230
and this will be our model and it's also

130
00:07:46,960 --> 00:07:53,440
possible that the receiver is it's also

131
00:07:50,230 --> 00:07:56,260
her up and collude with the corrupted

132
00:07:53,440 --> 00:08:00,120
manufacturer I in this case we still

133
00:07:56,260 --> 00:08:08,349
want to currently that please to hit it

134
00:08:00,120 --> 00:08:10,440
so essentially we want we want a

135
00:08:08,350 --> 00:08:12,880
currently that if at least one

136
00:08:10,440 --> 00:08:14,910
manufacturer is unless it's not corrupt

137
00:08:12,880 --> 00:08:17,040
then

138
00:08:14,910 --> 00:08:20,850
the adversary cannot learn anything

139
00:08:17,040 --> 00:08:25,530
about P and we can see that if oblem

140
00:08:20,850 --> 00:08:28,380
buffer up then the adversary can

141
00:08:25,530 --> 00:08:30,690
actually compute can Hitler in order

142
00:08:28,380 --> 00:08:34,130
description didn't compute and then the

143
00:08:30,690 --> 00:08:36,870
description of P on the other hand

144
00:08:34,130 --> 00:08:42,510
there's a limitation of this model

145
00:08:36,870 --> 00:08:45,720
basically so suppose our adversary

146
00:08:42,510 --> 00:08:48,569
corrupt or but one manufacturer say P to

147
00:08:45,720 --> 00:08:51,620
say that the second one which the

148
00:08:48,570 --> 00:08:56,520
sender's NP to to and then just replace

149
00:08:51,620 --> 00:08:58,440
the D program with garbage then what

150
00:08:56,520 --> 00:09:00,840
happened is that if we want to realize

151
00:08:58,440 --> 00:09:03,390
the actual token functionality that

152
00:09:00,840 --> 00:09:08,010
means P to buy still must be able to

153
00:09:03,390 --> 00:09:10,319
compute P right at the same time the

154
00:09:08,010 --> 00:09:12,990
adversary can actually corrupt the

155
00:09:10,320 --> 00:09:16,860
manufacturer that will get P 2 in that

156
00:09:12,990 --> 00:09:21,710
case that means that P 2 by itself can

157
00:09:16,860 --> 00:09:25,080
compute P but not really which which is

158
00:09:21,710 --> 00:09:28,260
essentially a black box obfuscation

159
00:09:25,080 --> 00:09:32,630
right so and because we cannot have that

160
00:09:28,260 --> 00:09:37,260
Adam means we allow that in that case

161
00:09:32,630 --> 00:09:39,660
all we need is that the the token

162
00:09:37,260 --> 00:09:42,270
creation is going to be a failure as a

163
00:09:39,660 --> 00:09:44,699
whole and in this case we can we can say

164
00:09:42,270 --> 00:09:52,230
that the receiver we cannot define an

165
00:09:44,700 --> 00:09:53,850
abort and that's that's essentially the

166
00:09:52,230 --> 00:09:56,310
token functionality with abort

167
00:09:53,850 --> 00:10:02,460
so here it's very similar to the

168
00:09:56,310 --> 00:10:05,489
standard token functionality we have the

169
00:10:02,460 --> 00:10:07,320
sender the sender send the send a

170
00:10:05,490 --> 00:10:09,450
message to the the functionality to

171
00:10:07,320 --> 00:10:12,630
create a program P to create a token

172
00:10:09,450 --> 00:10:17,250
with program P but the token function of

173
00:10:12,630 --> 00:10:19,350
the stable notified adversary first the

174
00:10:17,250 --> 00:10:23,610
adversary has a choice to interrupt this

175
00:10:19,350 --> 00:10:27,360
creation so in that case the receiver we

176
00:10:23,610 --> 00:10:27,769
can notify that the token creation is as

177
00:10:27,360 --> 00:10:31,730
fair

178
00:10:27,769 --> 00:10:35,360
and he will not be able to execute P on

179
00:10:31,730 --> 00:10:37,939
any input the adversity can also choose

180
00:10:35,360 --> 00:10:40,040
you know this creation and then in this

181
00:10:37,939 --> 00:10:42,469
case just like the standard talking

182
00:10:40,040 --> 00:10:50,540
functionality the receiver can execute a

183
00:10:42,470 --> 00:10:52,850
p on any input X and this is the

184
00:10:50,540 --> 00:10:57,129
function the functionality that we want

185
00:10:52,850 --> 00:11:00,470
to actually in the corrupted token model

186
00:10:57,129 --> 00:11:03,709
so what is the corruptible token

187
00:11:00,470 --> 00:11:06,619
functionality so you know it's also

188
00:11:03,709 --> 00:11:09,920
first here also start off very similar

189
00:11:06,619 --> 00:11:14,509
we have the sender the same day one to

190
00:11:09,920 --> 00:11:16,699
create a token for program P so the

191
00:11:14,509 --> 00:11:19,819
adversary we can notify but instead of

192
00:11:16,699 --> 00:11:21,498
just interrupting oh by the way I forgot

193
00:11:19,819 --> 00:11:23,689
to mention one thing in the previous

194
00:11:21,499 --> 00:11:27,439
model the the token functionality with

195
00:11:23,689 --> 00:11:31,189
abort the adversary would not know P at

196
00:11:27,439 --> 00:11:34,040
all but in this case R if the adversary

197
00:11:31,189 --> 00:11:38,480
chose to corrupt the stock discretion of

198
00:11:34,040 --> 00:11:42,799
the token he we actually get P and then

199
00:11:38,480 --> 00:11:46,069
he can replace p with any any different

200
00:11:42,799 --> 00:11:51,049
program P prom or the same program if

201
00:11:46,069 --> 00:11:53,509
you want and in this case the receiver

202
00:11:51,049 --> 00:11:56,360
will not get notify at all and when he

203
00:11:53,509 --> 00:11:58,939
executes when he think that he executes

204
00:11:56,360 --> 00:12:04,819
peon input X if you get a pyrimidine

205
00:11:58,939 --> 00:12:08,449
state there was we can also choose to

206
00:12:04,819 --> 00:12:13,248
ignore the creation and in this case he

207
00:12:08,449 --> 00:12:17,059
will not get P at all as well so the

208
00:12:13,249 --> 00:12:20,540
corruption is done one one by one so if

209
00:12:17,059 --> 00:12:23,179
the sender construct try to create a

210
00:12:20,540 --> 00:12:25,998
multiple tokens Denver solution choose

211
00:12:23,179 --> 00:12:26,480
to cut up some root token but not the

212
00:12:25,999 --> 00:12:29,269
others

213
00:12:26,480 --> 00:12:32,480
and then he cannot sing his my later so

214
00:12:29,269 --> 00:12:33,919
after the after he shows not to corrupt

215
00:12:32,480 --> 00:12:37,999
a token say p2

216
00:12:33,919 --> 00:12:40,040
he will not be able to sing his my later

217
00:12:37,999 --> 00:12:41,600
in the protocol to corrupt you to again

218
00:12:40,040 --> 00:12:45,469
so p2 is now

219
00:12:41,600 --> 00:12:48,740
actually a tamper-proof so this is the

220
00:12:45,470 --> 00:12:52,069
model that we want to that that opal how

221
00:12:48,740 --> 00:12:54,410
are we big and we want to achieve that

222
00:12:52,069 --> 00:13:07,729
the token functionality with the bot in

223
00:12:54,410 --> 00:13:11,480
this model so here is the the overview

224
00:13:07,730 --> 00:13:15,620
of our solution so let probably the

225
00:13:11,480 --> 00:13:18,440
description of the program P so the

226
00:13:15,620 --> 00:13:22,970
sender we used enough n secret sharing

227
00:13:18,440 --> 00:13:25,970
to create the share of Co complete of Pi

228
00:13:22,970 --> 00:13:29,779
basically here you get Phi 1 of 2 Phi n

229
00:13:25,970 --> 00:13:32,810
when n is the number of number of tokens

230
00:13:29,779 --> 00:13:38,269
are here he wished to to create to

231
00:13:32,810 --> 00:13:41,479
represent a single program pi basically

232
00:13:38,269 --> 00:13:44,149
he believed that this among this in

233
00:13:41,480 --> 00:13:47,899
manufacturer at least one of them will

234
00:13:44,149 --> 00:13:51,139
be honest and then here you create a

235
00:13:47,899 --> 00:13:55,220
correlate randomness and then embedded

236
00:13:51,139 --> 00:13:58,670
into the token in this example of 5

237
00:13:55,220 --> 00:14:03,949
tokens so each of the token we get the

238
00:13:58,670 --> 00:14:07,219
secret share of of Pi and then together

239
00:14:03,949 --> 00:14:11,269
with the Caribbean currently numbness to

240
00:14:07,220 --> 00:14:15,290
do some computation the receiver when he

241
00:14:11,269 --> 00:14:18,410
wants to execute P onion execute I'll

242
00:14:15,290 --> 00:14:21,199
input X he will give X to every token

243
00:14:18,410 --> 00:14:25,880
and then this token we performed some

244
00:14:21,199 --> 00:14:27,560
NPC among each other so the receiver

245
00:14:25,880 --> 00:14:30,110
will be the one who delivered the

246
00:14:27,560 --> 00:14:33,829
message between the tokens and this can

247
00:14:30,110 --> 00:14:36,130
be done and was really if the receiver

248
00:14:33,829 --> 00:14:41,810
is corrupt

249
00:14:36,130 --> 00:14:47,110
so this NPC will reconstruct PI from an

250
00:14:41,810 --> 00:14:50,479
orphan chair and then execute X execute

251
00:14:47,110 --> 00:14:54,459
the program or under input X so this is

252
00:14:50,480 --> 00:14:57,920
the overview of our solution

253
00:14:54,459 --> 00:15:01,008
so how do we actually if this there are

254
00:14:57,920 --> 00:15:03,769
two things that we need first the one

255
00:15:01,009 --> 00:15:06,379
that actually executes NPC I will be the

256
00:15:03,769 --> 00:15:10,089
token so that means we need to have some

257
00:15:06,379 --> 00:15:13,339
some way to prevent the resetting attack

258
00:15:10,089 --> 00:15:15,649
so what we need is a simultaneous our

259
00:15:13,339 --> 00:15:19,370
resistible as you know les acumen in the

260
00:15:15,649 --> 00:15:23,810
quarry randomness model so by this I

261
00:15:19,370 --> 00:15:28,850
mean the the sound is currently must

262
00:15:23,810 --> 00:15:31,279
whole even when the prover can can reset

263
00:15:28,850 --> 00:15:32,029
the receipt the prover can reset the

264
00:15:31,279 --> 00:15:34,730
verifier

265
00:15:32,029 --> 00:15:37,550
and the seer no less property in this

266
00:15:34,730 --> 00:15:40,610
little hole are even when the the

267
00:15:37,550 --> 00:15:43,149
verifier can reset the approver as many

268
00:15:40,610 --> 00:15:46,250
times as he want

269
00:15:43,149 --> 00:15:54,560
so this will be the first thing that me

270
00:15:46,250 --> 00:15:56,779
to construct this is what it is say the

271
00:15:54,560 --> 00:16:01,910
second thing I already mentioned is the

272
00:15:56,779 --> 00:16:05,329
you see securing PC for the tokens to to

273
00:16:01,910 --> 00:16:08,719
run and this will also be in the current

274
00:16:05,329 --> 00:16:11,959
name this model so we can come by when

275
00:16:08,720 --> 00:16:14,060
we come by this these two things that we

276
00:16:11,959 --> 00:16:15,439
you construct will get the final result

277
00:16:14,060 --> 00:16:17,810
which is the protocol that you see

278
00:16:15,439 --> 00:16:22,399
realized the token functionality with a

279
00:16:17,810 --> 00:16:24,768
board in the corrupted token model and

280
00:16:22,399 --> 00:16:26,990
as I mentioned earlier our result will

281
00:16:24,769 --> 00:16:30,439
be based on one-way function so we want

282
00:16:26,990 --> 00:16:35,389
to construct each of the is to using one

283
00:16:30,439 --> 00:16:37,849
wave function only so we go a little bit

284
00:16:35,389 --> 00:16:39,889
quickly because I only have eight

285
00:16:37,850 --> 00:16:43,490
minutes left so first in order to

286
00:16:39,889 --> 00:16:46,430
construct is the simultaneous resettable

287
00:16:43,490 --> 00:16:48,860
journalist acumen we will start with a

288
00:16:46,430 --> 00:16:52,219
three rounds publication release

289
00:16:48,860 --> 00:16:57,410
protocol in the CIS model for example

290
00:16:52,220 --> 00:16:59,089
the one by Mackenzie and yang so this

291
00:16:57,410 --> 00:17:03,439
protocol are based on one wave function

292
00:16:59,089 --> 00:17:06,770
and has a spring light simulator and

293
00:17:03,439 --> 00:17:08,099
then we will switch over to the Korean

294
00:17:06,770 --> 00:17:15,269
randomness

295
00:17:08,099 --> 00:17:18,719
when we also add the secret a secret key

296
00:17:15,269 --> 00:17:26,039
for a symmetric key encryption and then

297
00:17:18,720 --> 00:17:29,129
the commitment so the approval you get

298
00:17:26,039 --> 00:17:31,950
both commit commitment message and the

299
00:17:29,129 --> 00:17:35,549
commitment information so you can prove

300
00:17:31,950 --> 00:17:39,389
using there's you know less argument in

301
00:17:35,549 --> 00:17:45,120
the previous slide that the ex is a

302
00:17:39,389 --> 00:17:47,100
witness and a secret key that can

303
00:17:45,120 --> 00:17:49,399
decrypt at the first message to the

304
00:17:47,100 --> 00:17:49,399
witness

305
00:17:50,870 --> 00:17:57,059
so this resulting protocol it turned out

306
00:17:55,440 --> 00:17:58,769
that our this resulting power how will

307
00:17:57,059 --> 00:18:01,620
be this you know less acumen of no less

308
00:17:58,769 --> 00:18:04,110
in the Holderness model with spring lies

309
00:18:01,620 --> 00:18:11,158
simulator and also and still have three

310
00:18:04,110 --> 00:18:15,600
rounds in the second step we generate

311
00:18:11,159 --> 00:18:17,610
more korean randomness basically are we

312
00:18:15,600 --> 00:18:20,549
have another commitment in the in the

313
00:18:17,610 --> 00:18:27,389
opposite direction to cater with some

314
00:18:20,549 --> 00:18:30,120
random string which are the B and s so

315
00:18:27,389 --> 00:18:31,500
the proverb you are used the less you

316
00:18:30,120 --> 00:18:35,729
know less acumen of no less in the

317
00:18:31,500 --> 00:18:37,860
previous slide which is three routes but

318
00:18:35,730 --> 00:18:41,879
instead of the second the standard

319
00:18:37,860 --> 00:18:45,870
second message the verifier we use the

320
00:18:41,879 --> 00:18:49,230
PRF to to generate this problem instead

321
00:18:45,870 --> 00:18:51,299
and then hew use simultaneous our

322
00:18:49,230 --> 00:19:03,990
resettable witness indistinguishability

323
00:18:51,299 --> 00:19:06,629
argument to prove that that either that

324
00:19:03,990 --> 00:19:10,289
she can be the commit to us and our prom

325
00:19:06,629 --> 00:19:13,230
is generate this way or they exist the

326
00:19:10,289 --> 00:19:20,000
prompt such that B is a Pia tiah prior

327
00:19:13,230 --> 00:19:21,360
to the prom and this similar

328
00:19:20,000 --> 00:19:24,390
simultaneously

329
00:19:21,360 --> 00:19:29,699
Venis indistinguishability argument or

330
00:19:24,390 --> 00:19:38,460
exist which is a work done by shanghai

331
00:19:29,700 --> 00:19:40,860
Ostrovsky pass and whisk until so if you

332
00:19:38,460 --> 00:19:43,710
want to get out details on how we prove

333
00:19:40,860 --> 00:19:49,979
the security here you can refer to the

334
00:19:43,710 --> 00:19:53,820
article paper note that we still have a

335
00:19:49,980 --> 00:19:58,080
string life simulator here so the second

336
00:19:53,820 --> 00:20:02,850
component of what we need we can be

337
00:19:58,080 --> 00:20:05,490
constructed from two two protocol the

338
00:20:02,850 --> 00:20:12,439
first one is the UC secure NPC in the OT

339
00:20:05,490 --> 00:20:15,540
hybrid model which is done by each I

340
00:20:12,440 --> 00:20:19,220
prabhakara and Sahai and the second part

341
00:20:15,540 --> 00:20:22,860
is the og in the Korean ominous model

342
00:20:19,220 --> 00:20:26,429
this is essentially an ogee extension

343
00:20:22,860 --> 00:20:29,040
but with a special thing that we need to

344
00:20:26,429 --> 00:20:31,710
Matar to add on here which is this is

345
00:20:29,040 --> 00:20:34,350
foreign bond number of OG why do we need

346
00:20:31,710 --> 00:20:36,600
unbound number 40 because our embed or

347
00:20:34,350 --> 00:20:40,530
this coordinate randomness in the in the

348
00:20:36,600 --> 00:20:43,320
tokens right but we do not know that how

349
00:20:40,530 --> 00:20:47,549
many times that this these tokens are we

350
00:20:43,320 --> 00:20:51,629
can execute so we cannot expect the

351
00:20:47,549 --> 00:20:53,940
number of OG that will be used that we

352
00:20:51,630 --> 00:20:55,980
need to embed in the token so we need a

353
00:20:53,940 --> 00:21:00,600
little bit modification to the standard

354
00:20:55,980 --> 00:21:03,090
or the extension so here's the like

355
00:21:00,600 --> 00:21:06,299
quick overview of the before T extension

356
00:21:03,090 --> 00:21:08,639
the receiver have a shot see it s and

357
00:21:06,299 --> 00:21:11,610
then I use the PRT to expand it to a

358
00:21:08,640 --> 00:21:14,370
long string and this string will be used

359
00:21:11,610 --> 00:21:23,428
to select the bits from the descender

360
00:21:14,370 --> 00:21:24,689
and the the left part create as a cabo

361
00:21:23,429 --> 00:21:28,220
circuit and then send to the receiver

362
00:21:24,690 --> 00:21:33,090
and the small number of OTV we use are

363
00:21:28,220 --> 00:21:36,140
to sustain the cabo input for the short

364
00:21:33,090 --> 00:21:36,139
side as the receiver

365
00:21:36,750 --> 00:21:44,070
so our sort of in our modification the

366
00:21:41,250 --> 00:21:46,770
sender and receiver we have some odd

367
00:21:44,070 --> 00:21:48,899
seeds s one is through industry and then

368
00:21:46,770 --> 00:21:51,180
they really change some commitment note

369
00:21:48,900 --> 00:21:53,670
that the above heart is done as a

370
00:21:51,180 --> 00:22:00,830
curated correlate randomness by the

371
00:21:53,670 --> 00:22:03,990
trusted parties and instead of the PRT

372
00:22:00,830 --> 00:22:06,330
there is the input the state of the

373
00:22:03,990 --> 00:22:10,860
receiver together with the accession

374
00:22:06,330 --> 00:22:13,620
number which I denote by D we will be

375
00:22:10,860 --> 00:22:19,520
put through at the PRF which has a state

376
00:22:13,620 --> 00:22:23,340
of s1 and then the left hand side again

377
00:22:19,520 --> 00:22:25,860
Escobar and sent to the receiver except

378
00:22:23,340 --> 00:22:35,389
that in this case the receiver we only

379
00:22:25,860 --> 00:22:40,199
get the Cabo input for s2 but not T and

380
00:22:35,390 --> 00:22:43,130
then in the in the day station when the

381
00:22:40,200 --> 00:22:48,620
receiver wants who want to get a new

382
00:22:43,130 --> 00:22:51,930
additional Ortiz the sender we are

383
00:22:48,620 --> 00:22:55,080
create a new caboose again except that

384
00:22:51,930 --> 00:22:58,860
their partner correspond to s2 we remain

385
00:22:55,080 --> 00:23:01,260
the same so he don't have to use the OT

386
00:22:58,860 --> 00:23:07,889
to send over the carboy input for is to

387
00:23:01,260 --> 00:23:11,250
again and this allow the receiver to

388
00:23:07,890 --> 00:23:17,400
repeat the station as many times as you

389
00:23:11,250 --> 00:23:19,920
want so and the sender also need to use

390
00:23:17,400 --> 00:23:23,040
our journalist proof to prove that he

391
00:23:19,920 --> 00:23:27,570
actually compute everything according to

392
00:23:23,040 --> 00:23:31,710
the scheme so now we want to put

393
00:23:27,570 --> 00:23:35,159
everything together and finish the

394
00:23:31,710 --> 00:23:40,260
presentation so we have a functionality

395
00:23:35,160 --> 00:23:44,840
F which take the the secret the secret

396
00:23:40,260 --> 00:23:48,100
share of the program PI and then and

397
00:23:44,840 --> 00:23:50,320
input x1 up to X n if you

398
00:23:48,100 --> 00:23:53,080
remember one reversal I that I used

399
00:23:50,320 --> 00:23:56,770
earlier this x1 up to xn supposed to be

400
00:23:53,080 --> 00:24:00,490
the same the same X which is the input

401
00:23:56,770 --> 00:24:03,760
that receiver betoken want to execute so

402
00:24:00,490 --> 00:24:07,590
this monitor will check whether they are

403
00:24:03,760 --> 00:24:11,140
the same and then set it to X and then

404
00:24:07,590 --> 00:24:16,470
come by the secret chair to get their

405
00:24:11,140 --> 00:24:19,780
program PI and then execute an input X

406
00:24:16,470 --> 00:24:23,350
we want to put this in we want to use

407
00:24:19,780 --> 00:24:26,678
that NPC for this functionality in their

408
00:24:23,350 --> 00:24:30,039
career randomness model and then we wrap

409
00:24:26,679 --> 00:24:32,260
it using the simultaneously resettable

410
00:24:30,039 --> 00:24:35,260
Co no less in this in the coral

411
00:24:32,260 --> 00:24:37,750
randomness model and so the blue box

412
00:24:35,260 --> 00:24:40,690
here will be somewhat a resettable

413
00:24:37,750 --> 00:24:45,400
npc but for a specific functionality

414
00:24:40,690 --> 00:24:50,169
here and then we break it up and then

415
00:24:45,400 --> 00:24:52,960
put in into tokens so you have another

416
00:24:50,169 --> 00:24:58,659
protocol which the token wrapper to wrap

417
00:24:52,960 --> 00:25:01,809
around these parties in this NPC this

418
00:24:58,659 --> 00:25:04,990
token wrapper will take care of the

419
00:25:01,809 --> 00:25:09,610
state of the the NPC and then deliver

420
00:25:04,990 --> 00:25:11,980
the message between tokens so finally we

421
00:25:09,610 --> 00:25:15,549
have the token protocol in the curitiba

422
00:25:11,980 --> 00:25:18,240
token module and then the final step is

423
00:25:15,549 --> 00:25:22,059
we want to reduce the size of this token

424
00:25:18,240 --> 00:25:23,950
to have the smaller size of the dis

425
00:25:22,059 --> 00:25:27,039
program description and only take short

426
00:25:23,950 --> 00:25:31,780
input this is also an interesting part

427
00:25:27,039 --> 00:25:35,549
by itself so as a conclusion we have a

428
00:25:31,780 --> 00:25:38,770
greedy fire up the token model which

429
00:25:35,549 --> 00:25:40,539
allowed adversary to corrupt would be

430
00:25:38,770 --> 00:25:45,220
temporal proof token at the time of the

431
00:25:40,539 --> 00:25:47,280
creation and this beta model added the

432
00:25:45,220 --> 00:25:51,909
untrust manufacturer in the real world

433
00:25:47,280 --> 00:25:53,350
and what we are chief is the the

434
00:25:51,909 --> 00:25:55,090
protocol that you still utilize the

435
00:25:53,350 --> 00:25:57,520
temple proof token functionality with a

436
00:25:55,090 --> 00:26:00,459
bot in the corrupted token model assume

437
00:25:57,520 --> 00:26:01,810
only one wave function and we can

438
00:26:00,460 --> 00:26:04,960
combine this

439
00:26:01,810 --> 00:26:07,480
with any NPC in the temple proof token

440
00:26:04,960 --> 00:26:11,020
model to keep the NPC in the core of the

441
00:26:07,480 --> 00:26:14,950
token model and that's the end of my

442
00:26:11,020 --> 00:26:16,389
talk and you can see the paper our new

443
00:26:14,950 --> 00:26:22,710
print

444
00:26:16,390 --> 00:26:28,210
[Applause]

445
00:26:22,710 --> 00:26:29,760
any questions okay

446
00:26:28,210 --> 00:26:34,410
let's thank the speaker again

447
00:26:29,760 --> 00:26:34,410
[Applause]

