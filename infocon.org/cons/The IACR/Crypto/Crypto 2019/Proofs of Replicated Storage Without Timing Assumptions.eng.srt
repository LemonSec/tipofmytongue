1
00:00:05,550 --> 00:00:09,000
thank you so much so I will talk about

2
00:00:07,529 --> 00:00:10,650
proofs of replicated storage without

3
00:00:09,000 --> 00:00:12,360
timing assumptions and this is joint

4
00:00:10,650 --> 00:00:15,059
work with Devon dam guard and Claudia or

5
00:00:12,360 --> 00:00:17,340
Landy so let's begin with the motivating

6
00:00:15,059 --> 00:00:19,230
example so we have a client here who

7
00:00:17,340 --> 00:00:21,720
would like to outsource the storage of a

8
00:00:19,230 --> 00:00:23,490
file to a server and for reasons of

9
00:00:21,720 --> 00:00:25,769
availability would like to store

10
00:00:23,490 --> 00:00:28,890
different copies of the file in multiple

11
00:00:25,769 --> 00:00:30,659
locations so that if at some point some

12
00:00:28,890 --> 00:00:32,520
servers crash and some copies are

13
00:00:30,660 --> 00:00:35,820
unavailable the client can still

14
00:00:32,520 --> 00:00:37,649
retrieve the original file the problem

15
00:00:35,820 --> 00:00:40,230
however is that if the servers are

16
00:00:37,649 --> 00:00:42,420
corrupt and collude to save costs of

17
00:00:40,230 --> 00:00:45,660
space they can actually only store one

18
00:00:42,420 --> 00:00:47,730
copy of the file so what we need is a

19
00:00:45,660 --> 00:00:50,190
way for the client to make sure that

20
00:00:47,730 --> 00:00:52,410
there is indeed replicated storage and

21
00:00:50,190 --> 00:00:56,339
unique space is dedicated to store each

22
00:00:52,410 --> 00:00:58,319
copy of the file so this notion of proof

23
00:00:56,340 --> 00:01:00,410
of replicated storage is related to some

24
00:00:58,320 --> 00:01:03,030
classical notions of proof of storage

25
00:01:00,410 --> 00:01:04,768
and also to a notion of proof of

26
00:01:03,030 --> 00:01:07,860
replication that is introduced by the

27
00:01:04,769 --> 00:01:10,800
cryptocurrency file coin which gives a

28
00:01:07,860 --> 00:01:12,660
method to give a useful proof of space

29
00:01:10,800 --> 00:01:14,670
and I say a little bit about why these

30
00:01:12,660 --> 00:01:18,750
notions don't solve our problem and how

31
00:01:14,670 --> 00:01:21,630
they are different so Bitcoin uses a

32
00:01:18,750 --> 00:01:23,790
proof-of-work as method to deal with

33
00:01:21,630 --> 00:01:26,940
symbol identities and this is known to

34
00:01:23,790 --> 00:01:29,250
be largely wasteful and the question is

35
00:01:26,940 --> 00:01:33,060
can we instead use a proof of useful

36
00:01:29,250 --> 00:01:35,430
resource in in place of work and file

37
00:01:33,060 --> 00:01:38,130
coin proposes to use storage as this

38
00:01:35,430 --> 00:01:39,930
resource which should allow one to have

39
00:01:38,130 --> 00:01:43,229
a distributed storage network where

40
00:01:39,930 --> 00:01:47,940
miners dedicate storage to store useful

41
00:01:43,230 --> 00:01:50,910
files instead of dedicating work and

42
00:01:47,940 --> 00:01:52,740
this gives a useful proof of space and

43
00:01:50,910 --> 00:01:55,590
I'll say a little bit about why that

44
00:01:52,740 --> 00:01:57,720
doesn't solve our problem later but

45
00:01:55,590 --> 00:02:00,150
classical notions of proof of storage

46
00:01:57,720 --> 00:02:02,310
are not already proofs of replicated

47
00:02:00,150 --> 00:02:04,290
storage for the following reason so

48
00:02:02,310 --> 00:02:06,150
proof of retrieve ability is a solution

49
00:02:04,290 --> 00:02:07,860
to the following problem so we have a

50
00:02:06,150 --> 00:02:10,709
client who would like to outsource the

51
00:02:07,860 --> 00:02:12,690
storage of a file to the server so there

52
00:02:10,709 --> 00:02:16,140
is a store algorithm that takes the file

53
00:02:12,690 --> 00:02:17,670
F to be stored returns Y that is shipped

54
00:02:16,140 --> 00:02:18,660
off to the server and some verification

55
00:02:17,670 --> 00:02:22,170
information

56
00:02:18,660 --> 00:02:24,540
t-that is stored at the client side and

57
00:02:22,170 --> 00:02:26,910
then there is an audit algorithm where

58
00:02:24,540 --> 00:02:29,310
the server can actually convince the

59
00:02:26,910 --> 00:02:32,190
verifier that it is still storing all of

60
00:02:29,310 --> 00:02:34,140
the clients data and at the end of the

61
00:02:32,190 --> 00:02:35,820
audit protocol the client outputs a bit

62
00:02:34,140 --> 00:02:39,510
indicating whether it believes that the

63
00:02:35,820 --> 00:02:41,489
server is storing the file or not now

64
00:02:39,510 --> 00:02:43,200
the notion of security here in proof of

65
00:02:41,490 --> 00:02:45,600
retrieve ability is that of soundness

66
00:02:43,200 --> 00:02:47,670
which essentially says that if the

67
00:02:45,600 --> 00:02:50,310
client accepts here in this audit

68
00:02:47,670 --> 00:02:51,690
protocol then there exists an algorithm

69
00:02:50,310 --> 00:02:53,670
called the extractor that can actually

70
00:02:51,690 --> 00:02:56,430
interact with the server and extract

71
00:02:53,670 --> 00:02:59,160
this file but this notion only shows

72
00:02:56,430 --> 00:03:00,570
that the file is told once and gives no

73
00:02:59,160 --> 00:03:04,380
guarantee when there are multiple

74
00:03:00,570 --> 00:03:07,350
servers in particular if we go back to

75
00:03:04,380 --> 00:03:09,570
our original problem and say the client

76
00:03:07,350 --> 00:03:11,940
insists that the servers give a proof of

77
00:03:09,570 --> 00:03:14,000
storage of F this still does not solve

78
00:03:11,940 --> 00:03:16,740
the replicated storage problem because

79
00:03:14,000 --> 00:03:18,720
even if the servers give valid proofs

80
00:03:16,740 --> 00:03:21,450
such that the client accepts many

81
00:03:18,720 --> 00:03:23,430
different proofs it could be because the

82
00:03:21,450 --> 00:03:25,500
client is simply talking to one

83
00:03:23,430 --> 00:03:29,100
adversary and that is really only one

84
00:03:25,500 --> 00:03:30,960
copy of the file still stored so to be

85
00:03:29,100 --> 00:03:32,820
able to talk about proof of replication

86
00:03:30,960 --> 00:03:37,110
we really need different encoding of the

87
00:03:32,820 --> 00:03:39,510
file and one idea that comes to mind is

88
00:03:37,110 --> 00:03:42,030
to simply use encryption so maybe the

89
00:03:39,510 --> 00:03:43,890
client can simply have each encoding be

90
00:03:42,030 --> 00:03:47,180
a ciphertext of the file to be stored

91
00:03:43,890 --> 00:03:50,130
using fresh randomness for every replica

92
00:03:47,180 --> 00:03:52,410
now as far as the adversary is concerned

93
00:03:50,130 --> 00:03:55,200
each encoding is indeed a different file

94
00:03:52,410 --> 00:03:56,970
and for it to be retrievable later the

95
00:03:55,200 --> 00:04:00,060
server indeed has to store all the

96
00:03:56,970 --> 00:04:02,520
cipher texts so this does solve the

97
00:04:00,060 --> 00:04:04,380
problem but the issue is that this

98
00:04:02,520 --> 00:04:07,130
requires the trying to store a secret

99
00:04:04,380 --> 00:04:09,660
state which is the encryption key and

100
00:04:07,130 --> 00:04:12,660
additionally this is not publicly

101
00:04:09,660 --> 00:04:15,810
verifiable so ideally what we want is

102
00:04:12,660 --> 00:04:17,430
not just the client but everybody else

103
00:04:15,810 --> 00:04:19,589
to be able to retrieve the file later

104
00:04:17,430 --> 00:04:20,489
and if we simply use an encryption

105
00:04:19,589 --> 00:04:22,859
scheme

106
00:04:20,488 --> 00:04:25,289
the client will have to share the

107
00:04:22,860 --> 00:04:27,270
encryption key with other users and now

108
00:04:25,290 --> 00:04:30,950
if one of these users collude with the

109
00:04:27,270 --> 00:04:32,520
server we don't have security anymore

110
00:04:30,950 --> 00:04:34,530
another notion

111
00:04:32,520 --> 00:04:38,068
encoding used in this context is that of

112
00:04:34,530 --> 00:04:40,169
slowin codings when the encoding is so

113
00:04:38,069 --> 00:04:41,990
slow that a client can distinguish

114
00:04:40,169 --> 00:04:44,099
between honest proving time and

115
00:04:41,990 --> 00:04:47,789
potentially adversarial proving time

116
00:04:44,099 --> 00:04:50,430
that includes the time to re-encode this

117
00:04:47,789 --> 00:04:52,169
looks like the following so the client

118
00:04:50,430 --> 00:04:54,680
computes an including of the file to be

119
00:04:52,169 --> 00:04:57,659
stored using a slow encoding method

120
00:04:54,680 --> 00:05:00,270
cents of the encoded file to the server

121
00:04:57,659 --> 00:05:02,940
and now if the server does not store the

122
00:05:00,270 --> 00:05:05,400
file but later actually gives the proof

123
00:05:02,940 --> 00:05:07,409
or is retrievable later then this means

124
00:05:05,400 --> 00:05:10,198
that the server had to re-encode

125
00:05:07,409 --> 00:05:13,229
recompute this encoding and because this

126
00:05:10,199 --> 00:05:15,630
is a slow encoding the client can detect

127
00:05:13,229 --> 00:05:17,130
that this is taking a long time for the

128
00:05:15,630 --> 00:05:19,050
response in the challenge-response

129
00:05:17,130 --> 00:05:23,099
protocol and timeout and not accept the

130
00:05:19,050 --> 00:05:25,110
proof so the setup is the following in

131
00:05:23,099 --> 00:05:27,840
our slow encodings the client computes a

132
00:05:25,110 --> 00:05:29,940
bunch of encoding so replicas sends it

133
00:05:27,840 --> 00:05:32,340
off to the server and then there is a

134
00:05:29,940 --> 00:05:34,830
challenge response protocol and now

135
00:05:32,340 --> 00:05:36,960
there is a notion of time here and if

136
00:05:34,830 --> 00:05:39,030
the response comes within a certain time

137
00:05:36,960 --> 00:05:43,620
out the client accepts the proof as

138
00:05:39,030 --> 00:05:45,330
being valid otherwise it is not so if

139
00:05:43,620 --> 00:05:48,210
the server is actually trying to

140
00:05:45,330 --> 00:05:52,349
reencounter a detectable long delay and

141
00:05:48,210 --> 00:05:54,388
the client can simply timeout so the

142
00:05:52,349 --> 00:05:56,340
problem here with the slow encoding says

143
00:05:54,389 --> 00:05:59,130
that they rely on timing assumptions

144
00:05:56,340 --> 00:06:01,198
which means that we have to estimate the

145
00:05:59,130 --> 00:06:03,930
time that a very powerful server could

146
00:06:01,199 --> 00:06:05,870
take so that it doesn't fool the client

147
00:06:03,930 --> 00:06:08,639
into accepting a proof even when it is

148
00:06:05,870 --> 00:06:09,990
recomputing the encoding and this

149
00:06:08,639 --> 00:06:12,210
results in difficulty in setting

150
00:06:09,990 --> 00:06:18,240
concrete parameters like when should the

151
00:06:12,210 --> 00:06:20,039
client actually timeout and the notion

152
00:06:18,240 --> 00:06:22,740
that is introduced by file coin and all

153
00:06:20,039 --> 00:06:24,029
subsequent works actually are time bound

154
00:06:22,740 --> 00:06:26,520
read proofs and rely on timing

155
00:06:24,029 --> 00:06:28,949
assumptions so the question we ask here

156
00:06:26,520 --> 00:06:30,568
is can we have a proof of replicated

157
00:06:28,949 --> 00:06:34,409
storage that does not rely on timing

158
00:06:30,569 --> 00:06:37,110
assumptions so in this work we introduce

159
00:06:34,409 --> 00:06:39,060
a notion of replica encoding and use

160
00:06:37,110 --> 00:06:41,820
this notion to give a definition of

161
00:06:39,060 --> 00:06:44,039
proof of replication that does not rely

162
00:06:41,820 --> 00:06:45,280
on timing assumptions and then give a

163
00:06:44,039 --> 00:06:47,500
construction that allows

164
00:06:45,280 --> 00:06:52,270
for public verifiability without timing

165
00:06:47,500 --> 00:06:55,660
assumption so I'll begin with our notion

166
00:06:52,270 --> 00:06:57,580
of a replica encoding scheme so we have

167
00:06:55,660 --> 00:07:00,460
a replica encoding algorithm that takes

168
00:06:57,580 --> 00:07:03,070
a file and some randomness and outputs a

169
00:07:00,460 --> 00:07:05,080
replica and there is the decoding

170
00:07:03,070 --> 00:07:06,909
algorithm that takes the encoded

171
00:07:05,080 --> 00:07:09,310
replicas and returns the original file

172
00:07:06,910 --> 00:07:11,050
and completeness simply says that

173
00:07:09,310 --> 00:07:13,930
decoding should actually retrieve the

174
00:07:11,050 --> 00:07:17,740
correct file and the notion of soundness

175
00:07:13,930 --> 00:07:19,390
is the following so to be able to

176
00:07:17,740 --> 00:07:21,900
meaningfully talk about space we think

177
00:07:19,390 --> 00:07:25,060
of a two-stage adversary a 1 and a 2 so

178
00:07:21,900 --> 00:07:28,060
here the adversary a 1 outputs a file to

179
00:07:25,060 --> 00:07:31,150
be encoded the client computes many

180
00:07:28,060 --> 00:07:33,370
different replicas vias and gives it to

181
00:07:31,150 --> 00:07:36,729
the adversary and the adversary outputs

182
00:07:33,370 --> 00:07:39,220
a certain state and now the second stage

183
00:07:36,729 --> 00:07:42,280
adversary a 2 takes the state as input

184
00:07:39,220 --> 00:07:46,090
and outputs some perpetratin coatings of

185
00:07:42,280 --> 00:07:48,130
I primes and now we say that this

186
00:07:46,090 --> 00:07:50,080
adversity this two-stage adversary wins

187
00:07:48,130 --> 00:07:54,010
the soundness game if the following

188
00:07:50,080 --> 00:07:56,169
holds if the state is too small but the

189
00:07:54,010 --> 00:07:59,409
number of encoding that a to return

190
00:07:56,169 --> 00:08:02,830
using only state that was given by a 1

191
00:07:59,410 --> 00:08:05,800
did not actually fit in the state so

192
00:08:02,830 --> 00:08:08,380
what this definition says here is let's

193
00:08:05,800 --> 00:08:10,930
say u is the number of encoding that a

194
00:08:08,380 --> 00:08:14,409
to correctly returned but the state was

195
00:08:10,930 --> 00:08:16,780
actually smaller than U times the size

196
00:08:14,410 --> 00:08:20,440
of the encoding while and here we allow

197
00:08:16,780 --> 00:08:22,119
for a small slack C to disallow trivial

198
00:08:20,440 --> 00:08:23,860
attacks where the adversary can simply

199
00:08:22,120 --> 00:08:29,650
forget a few bits and guess them right

200
00:08:23,860 --> 00:08:31,570
before giving the encoding x' so this

201
00:08:29,650 --> 00:08:33,309
basically says that a2 can only return

202
00:08:31,570 --> 00:08:37,960
that many encoding zazz the state can

203
00:08:33,309 --> 00:08:39,728
accommodate so now to actually build a

204
00:08:37,960 --> 00:08:41,440
replica encoding scheme the users tools

205
00:08:39,729 --> 00:08:43,330
a trapdoor permutation and a random

206
00:08:41,440 --> 00:08:45,880
permutation and for the sake of

207
00:08:43,330 --> 00:08:47,800
concreteness let's think of RSA as the

208
00:08:45,880 --> 00:08:49,420
trapdoor permutation and all our

209
00:08:47,800 --> 00:08:50,920
constructions and the adversity will

210
00:08:49,420 --> 00:08:55,420
have oracle access to a random

211
00:08:50,920 --> 00:08:57,400
permutation T and it's inverse so here

212
00:08:55,420 --> 00:08:58,630
is our first attempt at constructing a

213
00:08:57,400 --> 00:09:00,970
replica encoding scheme

214
00:08:58,630 --> 00:09:04,300
so we take the file to be encoded M

215
00:09:00,970 --> 00:09:07,180
append some randomness are called the

216
00:09:04,300 --> 00:09:09,040
random permutation T and then sample

217
00:09:07,180 --> 00:09:11,258
keys for the trapdoor permutation and

218
00:09:09,040 --> 00:09:14,920
apply it in the inverse direction using

219
00:09:11,259 --> 00:09:17,350
the secret key and this output Y is said

220
00:09:14,920 --> 00:09:18,459
to be the replica encoding along with

221
00:09:17,350 --> 00:09:19,300
the public key of the trapdoor

222
00:09:18,459 --> 00:09:22,449
permutation

223
00:09:19,300 --> 00:09:24,370
now if this is our replica everybody can

224
00:09:22,449 --> 00:09:25,839
decode by simply applying s in the

225
00:09:24,370 --> 00:09:28,240
forward direction using the public key

226
00:09:25,839 --> 00:09:32,410
and then calling T inverse and obtaining

227
00:09:28,240 --> 00:09:36,000
M so what about soundness why should

228
00:09:32,410 --> 00:09:38,620
this work the intuition is the following

229
00:09:36,000 --> 00:09:40,779
recall our soundness game the first

230
00:09:38,620 --> 00:09:42,970
stage adversary outputs a file M and

231
00:09:40,779 --> 00:09:44,949
this is our construction now we are

232
00:09:42,970 --> 00:09:47,740
going to apply a random permutation T

233
00:09:44,949 --> 00:09:50,769
and F inverse on the output of T so why

234
00:09:47,740 --> 00:09:54,339
is our encoding so the adversary gets a

235
00:09:50,769 --> 00:09:56,319
bunch of my eyes it has access to T and

236
00:09:54,339 --> 00:09:59,860
T inverse and outputs a state that is

237
00:09:56,319 --> 00:10:02,709
given to a to and now if a to outputs a

238
00:09:59,860 --> 00:10:04,509
bunch of perpetratin codings let's say

239
00:10:02,709 --> 00:10:06,579
for now that the adversary behaves in

240
00:10:04,509 --> 00:10:09,069
the following restricted way a one

241
00:10:06,579 --> 00:10:12,069
forgets all information about one

242
00:10:09,069 --> 00:10:14,889
replica so let's say that a to return

243
00:10:12,069 --> 00:10:17,290
all n replicas correctly but the state

244
00:10:14,889 --> 00:10:19,509
was but the size of the state was only

245
00:10:17,290 --> 00:10:22,149
as much as it could fit n minus 1

246
00:10:19,509 --> 00:10:24,699
replicas so the state forgot all

247
00:10:22,149 --> 00:10:27,130
information about say the I at replica

248
00:10:24,699 --> 00:10:33,069
which means the state has no information

249
00:10:27,130 --> 00:10:36,519
about why I and Zi and now if indeed a

250
00:10:33,069 --> 00:10:39,250
to returned y i we know that state has

251
00:10:36,519 --> 00:10:41,829
no information about Zi so a to must

252
00:10:39,250 --> 00:10:44,230
have made a query to the Oracle T in the

253
00:10:41,829 --> 00:10:47,199
second stage of the soundness game and

254
00:10:44,230 --> 00:10:50,319
here we program the response to the or

255
00:10:47,199 --> 00:10:51,939
query to M by the challenge image which

256
00:10:50,319 --> 00:10:57,729
is the image that we are going to invert

257
00:10:51,939 --> 00:10:59,230
in the reduction but here we assume that

258
00:10:57,730 --> 00:11:00,130
the adversary behaves in a restricted

259
00:10:59,230 --> 00:11:02,620
way

260
00:11:00,130 --> 00:11:04,660
what about soundness for general

261
00:11:02,620 --> 00:11:07,630
adversity that can store arbitrary pre

262
00:11:04,660 --> 00:11:10,569
image information of the replicas

263
00:11:07,630 --> 00:11:11,500
encoding we only want to assume that the

264
00:11:10,569 --> 00:11:12,760
Advisory

265
00:11:11,500 --> 00:11:14,800
that the state that the adversary

266
00:11:12,760 --> 00:11:16,810
outputs are the size of that state is

267
00:11:14,800 --> 00:11:18,699
less than the combined state of the

268
00:11:16,810 --> 00:11:22,000
number of replicas that we retrieved

269
00:11:18,700 --> 00:11:23,800
from a - and now we cannot actually

270
00:11:22,000 --> 00:11:26,020
embed the trapdoor permutation challenge

271
00:11:23,800 --> 00:11:28,650
and the security of the trapdoor

272
00:11:26,020 --> 00:11:31,750
permutation does not give us soundness

273
00:11:28,650 --> 00:11:33,670
so what can we do the final idea towards

274
00:11:31,750 --> 00:11:37,270
our construction is to repeat this

275
00:11:33,670 --> 00:11:39,189
initial idea sufficiently many times so

276
00:11:37,270 --> 00:11:42,040
this was our initial construction we

277
00:11:39,190 --> 00:11:44,560
applied T o and then F inverse on the

278
00:11:42,040 --> 00:11:49,360
output of T now instead of stopping here

279
00:11:44,560 --> 00:11:52,449
and outputting Y we take Y and apply T

280
00:11:49,360 --> 00:11:55,360
and F inverse again and we do this a

281
00:11:52,450 --> 00:11:57,550
bunch of times say odd number of rounds

282
00:11:55,360 --> 00:12:00,370
I'll talk about what are should be later

283
00:11:57,550 --> 00:12:03,910
and after our number of rounds we output

284
00:12:00,370 --> 00:12:05,500
Y and the public key that the of the

285
00:12:03,910 --> 00:12:09,250
trapdoor permutation as the replica

286
00:12:05,500 --> 00:12:12,340
encoding so this is our final

287
00:12:09,250 --> 00:12:14,560
construction to construct a replica we

288
00:12:12,340 --> 00:12:17,260
sample keys of a trapdoor permutation

289
00:12:14,560 --> 00:12:19,329
and then apply F inverse and T in an

290
00:12:17,260 --> 00:12:21,850
iterative fashion and obtain the replica

291
00:12:19,330 --> 00:12:23,170
encoding so what should be the number of

292
00:12:21,850 --> 00:12:28,060
rounds and why does this give us

293
00:12:23,170 --> 00:12:29,979
soundness so recall our first

294
00:12:28,060 --> 00:12:31,750
construction did not already give us

295
00:12:29,980 --> 00:12:35,650
soundness because the adversary could

296
00:12:31,750 --> 00:12:38,620
store arbitrary preimage information but

297
00:12:35,650 --> 00:12:40,900
now since we are calling the random

298
00:12:38,620 --> 00:12:43,240
permutation T many times in constructing

299
00:12:40,900 --> 00:12:45,189
one replica the hope is that the

300
00:12:43,240 --> 00:12:48,430
adversary has to store a pre-image

301
00:12:45,190 --> 00:12:50,230
information at every round and if the

302
00:12:48,430 --> 00:12:52,359
number of rounds are sufficiently large

303
00:12:50,230 --> 00:12:55,030
at some point the amount of information

304
00:12:52,360 --> 00:12:56,890
that the adversary should store exceeds

305
00:12:55,030 --> 00:13:01,480
the bound that we need for replicated

306
00:12:56,890 --> 00:13:04,449
storage so here is the high-level idea

307
00:13:01,480 --> 00:13:07,990
of the proof recall our construction

308
00:13:04,450 --> 00:13:11,650
calls T many times in constructing one

309
00:13:07,990 --> 00:13:15,040
replica and now we argue that if the

310
00:13:11,650 --> 00:13:17,650
state that a1 outputs is too small then

311
00:13:15,040 --> 00:13:20,050
it cannot remember all the answers to

312
00:13:17,650 --> 00:13:23,930
the queries that was made to t by a1 in

313
00:13:20,050 --> 00:13:26,569
the first stage of the game and because

314
00:13:23,930 --> 00:13:29,390
decoding is efficient and since a to

315
00:13:26,570 --> 00:13:32,420
actually gave us all the encoding by

316
00:13:29,390 --> 00:13:34,000
decoding we could extract from a to all

317
00:13:32,420 --> 00:13:37,579
the outputs of all the intermediate

318
00:13:34,000 --> 00:13:39,589
outputs of T from one replica and what

319
00:13:37,580 --> 00:13:41,480
this means is that a to must-have query

320
00:13:39,589 --> 00:13:44,230
T in the second stage of the soundness

321
00:13:41,480 --> 00:13:47,750
game because we can extract all the Z's

322
00:13:44,230 --> 00:13:50,000
and now we reason about the size of the

323
00:13:47,750 --> 00:13:53,120
state and account for the state entropy

324
00:13:50,000 --> 00:13:56,420
budget which is small and argue that

325
00:13:53,120 --> 00:13:59,000
some response of T to the query that a

326
00:13:56,420 --> 00:14:01,160
to mix must have full entropy in the

327
00:13:59,000 --> 00:14:05,360
view of a to even given state

328
00:14:01,160 --> 00:14:08,390
information and this is the response

329
00:14:05,360 --> 00:14:10,310
that we reprogram in our response to the

330
00:14:08,390 --> 00:14:17,600
query to T to embed the challenge image

331
00:14:10,310 --> 00:14:19,010
in our security reduction and what

332
00:14:17,600 --> 00:14:21,110
should our be what should the number of

333
00:14:19,010 --> 00:14:24,470
rounds be in the paper we show that by

334
00:14:21,110 --> 00:14:26,870
suitably setting the parameters in

335
00:14:24,470 --> 00:14:29,330
particular if R is greater than K n

336
00:14:26,870 --> 00:14:31,400
where K is the security parameter and n

337
00:14:29,330 --> 00:14:33,230
is the number of replicas then the

338
00:14:31,400 --> 00:14:35,959
amount of information the adversary must

339
00:14:33,230 --> 00:14:39,350
store must exceed the replicated storage

340
00:14:35,959 --> 00:14:43,760
bound and this gives us this gives us

341
00:14:39,350 --> 00:14:46,130
our soreness so how do we deal with

342
00:14:43,760 --> 00:14:49,339
large files what if the file to be

343
00:14:46,130 --> 00:14:51,790
encoded M does not fit inside a trapdoor

344
00:14:49,339 --> 00:14:55,839
permutation not the random permutation

345
00:14:51,790 --> 00:14:58,670
so what we do is we first apply a large

346
00:14:55,839 --> 00:15:01,490
random permutation H on the entire file

347
00:14:58,670 --> 00:15:04,490
and now apply our construction which is

348
00:15:01,490 --> 00:15:07,279
ITER ating T and F inverse block wise so

349
00:15:04,490 --> 00:15:09,770
we split the output of H into multiple

350
00:15:07,279 --> 00:15:12,829
blocks and then apply our construction

351
00:15:09,770 --> 00:15:14,900
to each block independently but the H

352
00:15:12,829 --> 00:15:16,989
here which is applied on the entire M

353
00:15:14,900 --> 00:15:19,790
ensures that the adversary cannot

354
00:15:16,990 --> 00:15:26,360
deduplicate multiple blocks that occurs

355
00:15:19,790 --> 00:15:28,670
across different files now that we have

356
00:15:26,360 --> 00:15:30,350
a replica encoding scheme we can define

357
00:15:28,670 --> 00:15:33,319
and construct a proof of replication

358
00:15:30,350 --> 00:15:35,180
scheme so proof of replication has a

359
00:15:33,320 --> 00:15:36,500
create algorithm that takes a file or

360
00:15:35,180 --> 00:15:38,569
replication parameter

361
00:15:36,500 --> 00:15:40,490
outputs in different replicas to be

362
00:15:38,570 --> 00:15:43,040
stored and some verification information

363
00:15:40,490 --> 00:15:45,140
for the client and there is sedative

364
00:15:43,040 --> 00:15:47,449
algorithm that takes the replica and/or

365
00:15:45,140 --> 00:15:49,699
it leaves the original file and we have

366
00:15:47,450 --> 00:15:51,740
the usual notion of completeness that

367
00:15:49,700 --> 00:15:53,780
the M prime that retrieve returns must

368
00:15:51,740 --> 00:15:55,880
be the same as the original file and

369
00:15:53,780 --> 00:15:58,130
there is an audit protocol well the

370
00:15:55,880 --> 00:16:01,880
server can convince the client that it

371
00:15:58,130 --> 00:16:04,189
is indeed storing all the replicas and

372
00:16:01,880 --> 00:16:06,140
then we define a notion of soundness for

373
00:16:04,190 --> 00:16:08,210
proof of replication which is the

374
00:16:06,140 --> 00:16:10,850
following so again we think of a

375
00:16:08,210 --> 00:16:13,580
two-stage adversary a1 and a2 and a1

376
00:16:10,850 --> 00:16:15,860
outputs of file o that is to be stored

377
00:16:13,580 --> 00:16:19,570
in a replicated way and we create our

378
00:16:15,860 --> 00:16:22,460
replicas and give the by ice or 2 a1

379
00:16:19,570 --> 00:16:24,560
again like in the replica encoding or

380
00:16:22,460 --> 00:16:28,400
soundness notion a 1 outputs a state

381
00:16:24,560 --> 00:16:30,680
which is given to a2 and now we say that

382
00:16:28,400 --> 00:16:33,709
the adversary wins the soundness game if

383
00:16:30,680 --> 00:16:34,849
the following condition holds if the

384
00:16:33,710 --> 00:16:36,500
state is too small

385
00:16:34,850 --> 00:16:38,480
that is smaller than the number of

386
00:16:36,500 --> 00:16:43,790
accepting proofs that the prover gives

387
00:16:38,480 --> 00:16:46,100
or if the extractor extracts a number of

388
00:16:43,790 --> 00:16:47,780
replicas that is smaller than the number

389
00:16:46,100 --> 00:16:53,030
of accepting proofs that the adversary

390
00:16:47,780 --> 00:16:54,949
gifts so what does so what this

391
00:16:53,030 --> 00:16:58,939
definition is intuitively saying is that

392
00:16:54,950 --> 00:17:00,860
the adversary wins the game only if the

393
00:16:58,940 --> 00:17:03,080
number of accepting proofs he gives is

394
00:17:00,860 --> 00:17:05,180
smaller than what the is larger than

395
00:17:03,080 --> 00:17:07,550
what the state could accommodate or if

396
00:17:05,180 --> 00:17:09,440
the extractor could not extract the

397
00:17:07,550 --> 00:17:14,210
number of replicas for which the

398
00:17:09,440 --> 00:17:15,860
adversary gave accepting proofs so now

399
00:17:14,210 --> 00:17:18,260
to construct a proof of replication

400
00:17:15,859 --> 00:17:20,629
scheme we take a replica encoding scheme

401
00:17:18,260 --> 00:17:24,260
and together with the proof of retrieve

402
00:17:20,630 --> 00:17:26,990
ability our construction works so we

403
00:17:24,260 --> 00:17:28,790
take the underlying file use the replica

404
00:17:26,990 --> 00:17:31,220
encoding algorithm to get a replica

405
00:17:28,790 --> 00:17:33,409
encoding and then use a proof of

406
00:17:31,220 --> 00:17:37,070
retrieve ability on top of the encoded

407
00:17:33,410 --> 00:17:38,300
replica and ship off the encoding to to

408
00:17:37,070 --> 00:17:40,010
be stored at the server and the

409
00:17:38,300 --> 00:17:43,280
verification information for the client

410
00:17:40,010 --> 00:17:45,110
and for some nests we rely on the

411
00:17:43,280 --> 00:17:46,879
soundness of the replica encoding scheme

412
00:17:45,110 --> 00:17:49,040
and the soundness of the proof of

413
00:17:46,880 --> 00:17:50,610
retrieve ability scheme so at a very

414
00:17:49,040 --> 00:17:53,460
high level we have the

415
00:17:50,610 --> 00:17:55,918
each replica is incompressible because

416
00:17:53,460 --> 00:17:58,080
of the replica encoding scheme and each

417
00:17:55,919 --> 00:17:59,789
of these incompressible replicas are

418
00:17:58,080 --> 00:18:05,460
extractable because of the proof of

419
00:17:59,789 --> 00:18:07,049
retrieve ability on top of it so this is

420
00:18:05,460 --> 00:18:11,059
our construction which has public

421
00:18:07,049 --> 00:18:13,620
verifiability without timing assumptions

422
00:18:11,059 --> 00:18:16,289
but this is in the set up where the

423
00:18:13,620 --> 00:18:17,789
encoding itself is honest so does this

424
00:18:16,289 --> 00:18:21,240
mean that we have to trust the client

425
00:18:17,789 --> 00:18:23,309
and can be trusted line so what this

426
00:18:21,240 --> 00:18:26,520
means is the following in our setting we

427
00:18:23,309 --> 00:18:27,870
had a client who constructed a number of

428
00:18:26,520 --> 00:18:29,700
replicas sent it to the server

429
00:18:27,870 --> 00:18:31,229
and these proofs were publicly

430
00:18:29,700 --> 00:18:32,909
verifiable because the server could

431
00:18:31,230 --> 00:18:35,340
convince other parties that it was

432
00:18:32,909 --> 00:18:37,110
actually storing many replicas but the

433
00:18:35,340 --> 00:18:49,039
soundness here for parties other than

434
00:18:37,110 --> 00:18:49,039
the server sorry

435
00:19:11,340 --> 00:19:16,090
but the soundness of the proof for

436
00:19:13,809 --> 00:19:18,789
parties other than that line to actually

437
00:19:16,090 --> 00:19:21,340
encoded holds only if the encoding is

438
00:19:18,789 --> 00:19:22,899
honest and this does not work directly

439
00:19:21,340 --> 00:19:24,759
in the file coin setting because in the

440
00:19:22,899 --> 00:19:26,469
file coin setting the client could

441
00:19:24,759 --> 00:19:28,059
actually collude with the server and

442
00:19:26,470 --> 00:19:30,159
convince everybody else that it's

443
00:19:28,059 --> 00:19:33,668
actually storing many files when it's

444
00:19:30,159 --> 00:19:35,649
not dedicating enough space so one idea

445
00:19:33,669 --> 00:19:37,659
to overcome this is to involve multiple

446
00:19:35,649 --> 00:19:40,330
users instead of having one client

447
00:19:37,659 --> 00:19:43,149
compute the encoding we can have

448
00:19:40,330 --> 00:19:45,399
multiple users or jointly compute the

449
00:19:43,149 --> 00:19:47,500
encoding and the hope is that maybe we

450
00:19:45,399 --> 00:19:51,189
will have soundness if at least one user

451
00:19:47,500 --> 00:19:54,639
is honest and in the paper we sketch two

452
00:19:51,190 --> 00:19:56,169
approaches to multi client encoding and

453
00:19:54,639 --> 00:19:59,620
I'll say a little bit about what they

454
00:19:56,169 --> 00:20:02,259
are so in sequential encoding we have

455
00:19:59,620 --> 00:20:04,629
one party compute and encoding using his

456
00:20:02,259 --> 00:20:06,399
own fabbed or permutation key and then a

457
00:20:04,629 --> 00:20:09,279
second party comes along takes this

458
00:20:06,399 --> 00:20:15,639
output and computes an encoding on top

459
00:20:09,279 --> 00:20:17,980
of it and basically each user can add

460
00:20:15,639 --> 00:20:20,080
his or her own layer of encoding and

461
00:20:17,980 --> 00:20:22,179
consecutive users can encode the

462
00:20:20,080 --> 00:20:24,460
previous output and if one of the users

463
00:20:22,179 --> 00:20:26,049
is honest then the server does not know

464
00:20:24,460 --> 00:20:28,509
the trapdoor permutation key of at least

465
00:20:26,049 --> 00:20:29,950
one user and it's essentially our main

466
00:20:28,509 --> 00:20:33,490
construction but with more number of

467
00:20:29,950 --> 00:20:36,399
rounds I don't have time to talk about

468
00:20:33,490 --> 00:20:39,789
parallel encoding but you can see our

469
00:20:36,399 --> 00:20:41,830
paper for this I'll just conclude by

470
00:20:39,789 --> 00:20:43,899
saying that in this work we define the

471
00:20:41,830 --> 00:20:45,580
notion of replica encoding scheme gave a

472
00:20:43,899 --> 00:20:46,989
definition of proof of replication

473
00:20:45,580 --> 00:20:49,210
without timing assumptions and the

474
00:20:46,990 --> 00:20:53,639
construction that satisfies public

475
00:20:49,210 --> 00:20:53,639
verifiability thank you

476
00:20:57,940 --> 00:21:01,670
so thank you very much for the nice talk

477
00:21:00,290 --> 00:21:04,790
we have time for one quick question

478
00:21:01,670 --> 00:21:07,670
since we already started late it's the

479
00:21:04,790 --> 00:21:21,139
one quick question then please go to the

480
00:21:07,670 --> 00:21:23,400
mic and say and you're not tagged okay

481
00:21:21,140 --> 00:21:28,419
then it's saying thank the speaker again

482
00:21:23,400 --> 00:21:28,419
[Applause]

