1
00:00:04,880 --> 00:00:10,700
hi thank you for the introduction so I

2
00:00:08,720 --> 00:00:12,889
will talk about attribute based

3
00:00:10,700 --> 00:00:15,410
encryption so let me start with the

4
00:00:12,889 --> 00:00:18,560
definition so attribute based encryption

5
00:00:15,410 --> 00:00:20,570
is a public key encryption system where

6
00:00:18,560 --> 00:00:23,029
there are multiple users that have

7
00:00:20,570 --> 00:00:24,920
different secret keys and the idea is

8
00:00:23,029 --> 00:00:26,660
that you can encrypt a message in such a

9
00:00:24,920 --> 00:00:31,279
way that only some of them are

10
00:00:26,660 --> 00:00:33,290
authorized to decrypt the message so the

11
00:00:31,279 --> 00:00:35,720
way that it is formalized is as follows

12
00:00:33,290 --> 00:00:38,239
there is an authority and she has a

13
00:00:35,720 --> 00:00:40,100
master secret key the master secret key

14
00:00:38,239 --> 00:00:42,500
has full permissions it can decrypt any

15
00:00:40,100 --> 00:00:44,719
ciphertext and then given this master

16
00:00:42,500 --> 00:00:48,289
secret kid is also possible to generate

17
00:00:44,719 --> 00:00:50,120
constrained keys so every secret key

18
00:00:48,289 --> 00:00:52,570
except of the master secret key is

19
00:00:50,120 --> 00:00:55,669
identified by some value that we call

20
00:00:52,570 --> 00:00:57,710
the attribute of the key and this

21
00:00:55,670 --> 00:01:00,289
attribute is taken from some

22
00:00:57,710 --> 00:01:02,989
exponentially large space so they can be

23
00:01:00,289 --> 00:01:04,879
many keys and then when someone wants to

24
00:01:02,989 --> 00:01:07,429
encrypt then he runs the encryption

25
00:01:04,879 --> 00:01:09,470
algorithm and he has to provide some

26
00:01:07,430 --> 00:01:11,299
function f that we call the policy and

27
00:01:09,470 --> 00:01:13,250
this policy determines who is allowed to

28
00:01:11,299 --> 00:01:15,650
decrypt so this function takes as input

29
00:01:13,250 --> 00:01:18,560
attributes and then for each of them it

30
00:01:15,650 --> 00:01:20,900
outputs either 0 or 1 to determine if

31
00:01:18,560 --> 00:01:27,650
this attribute is authorized to The

32
00:01:20,900 --> 00:01:29,570
Cribs okay so now given a candidate ABA

33
00:01:27,650 --> 00:01:33,439
construction then in this work we

34
00:01:29,570 --> 00:01:35,089
focused on two properties of the

35
00:01:33,439 --> 00:01:37,250
construction so the first one is the

36
00:01:35,090 --> 00:01:39,380
security guarantee so there is full

37
00:01:37,250 --> 00:01:41,149
security and there is also a relaxed

38
00:01:39,380 --> 00:01:43,429
notion that is called selective security

39
00:01:41,149 --> 00:01:46,579
and I will explain the differences in

40
00:01:43,430 --> 00:01:49,189
the next slide and the second property

41
00:01:46,579 --> 00:01:50,929
is the support of the class of policies

42
00:01:49,189 --> 00:01:53,059
that we can associate to the ciphertext

43
00:01:50,930 --> 00:01:54,799
so of course we want it to be as

44
00:01:53,060 --> 00:01:59,229
expressive as possible so we can have

45
00:01:54,799 --> 00:01:59,229
more complex complex access structures

46
00:02:00,039 --> 00:02:07,490
okay and a special case that will be

47
00:02:04,630 --> 00:02:09,829
important for this talk is the notion of

48
00:02:07,490 --> 00:02:12,380
IP that it was actually defined before a

49
00:02:09,830 --> 00:02:15,110
BA but a B is a generalization of this

50
00:02:12,380 --> 00:02:18,109
but I like to think of it as a special

51
00:02:15,110 --> 00:02:18,760
case of a B so this is maybe where the

52
00:02:18,110 --> 00:02:20,890
supported

53
00:02:18,760 --> 00:02:23,349
these are only point functions so every

54
00:02:20,890 --> 00:02:28,569
ciphertext is targeted only for a single

55
00:02:23,349 --> 00:02:35,079
attribute okay so let's talk about the

56
00:02:28,569 --> 00:02:36,849
security notions so the we want to

57
00:02:35,080 --> 00:02:39,069
somehow define the security and we want

58
00:02:36,849 --> 00:02:41,920
this definition to to capture this

59
00:02:39,069 --> 00:02:43,030
notion of decryption where the secret

60
00:02:41,920 --> 00:02:44,619
key for it's going to create the

61
00:02:43,030 --> 00:02:48,579
ciphertext for F conditioned on the

62
00:02:44,620 --> 00:02:51,280
value of f of X so let's say we fix some

63
00:02:48,579 --> 00:02:52,959
function f so we can now partition the

64
00:02:51,280 --> 00:02:54,819
attributes vestal two types of

65
00:02:52,959 --> 00:02:57,459
attributes authorized attributes and

66
00:02:54,819 --> 00:02:59,500
known authorized attributes and then we

67
00:02:57,459 --> 00:03:01,959
want to say that even if there is a

68
00:02:59,500 --> 00:03:04,569
collision of users that try to combine

69
00:03:01,959 --> 00:03:06,280
their keys then as long as none of them

70
00:03:04,569 --> 00:03:09,220
has an authorized key then they cannot

71
00:03:06,280 --> 00:03:12,489
decrypt the message so I want to say if

72
00:03:09,220 --> 00:03:14,379
there is a collusion of adversarial

73
00:03:12,489 --> 00:03:16,450
users and all of them are in the white

74
00:03:14,379 --> 00:03:20,798
areas and on the non-authorized areas

75
00:03:16,450 --> 00:03:22,480
they cannot decrypt ciphertext and so in

76
00:03:20,799 --> 00:03:25,630
order to to capture this requirement

77
00:03:22,480 --> 00:03:28,328
there is security again and this is how

78
00:03:25,630 --> 00:03:29,829
it is defined so there is a the

79
00:03:28,329 --> 00:03:31,720
Challenger she holds the master secret

80
00:03:29,829 --> 00:03:34,389
key and then there is the adversary that

81
00:03:31,720 --> 00:03:36,819
controls all of the colluding users and

82
00:03:34,389 --> 00:03:38,769
the game goes as follows the first the

83
00:03:36,819 --> 00:03:40,899
Challenger sends the public key to the

84
00:03:38,769 --> 00:03:43,660
adversary and then there is a query

85
00:03:40,900 --> 00:03:46,180
space so in the chorus phase each time

86
00:03:43,660 --> 00:03:49,720
the adversary can send some attribute X

87
00:03:46,180 --> 00:03:51,489
and the Challenger should generate a key

88
00:03:49,720 --> 00:03:53,560
for that specific attribute and send it

89
00:03:51,489 --> 00:03:56,650
back to the adversary and they can

90
00:03:53,560 --> 00:03:59,109
repeat that multiple times and then at

91
00:03:56,650 --> 00:04:01,150
some point the adversary asks for a

92
00:03:59,109 --> 00:04:04,569
giant ciphertext so in order to do that

93
00:04:01,150 --> 00:04:05,829
he specifies us some policy and the

94
00:04:04,569 --> 00:04:09,700
Challenger should encrypt the message

95
00:04:05,829 --> 00:04:12,849
intent the goal of the adversary is easy

96
00:04:09,700 --> 00:04:15,608
to decrypt the message and we only care

97
00:04:12,849 --> 00:04:17,680
about adversaries that's that query for

98
00:04:15,609 --> 00:04:18,849
kids that are not authorized because

99
00:04:17,680 --> 00:04:20,769
this is the only case where we need to

100
00:04:18,849 --> 00:04:22,630
guarantee security so we assumed that

101
00:04:20,769 --> 00:04:26,139
the only queries for kids in the white

102
00:04:22,630 --> 00:04:29,010
areas and then his goal is to eventually

103
00:04:26,139 --> 00:04:29,010
break the surface

104
00:04:29,360 --> 00:04:36,740
okay so now before I go into any

105
00:04:34,039 --> 00:04:39,460
specific construction I want to talk

106
00:04:36,740 --> 00:04:43,550
about how security proof that satisfy

107
00:04:39,460 --> 00:04:45,438
satisfies this definition should look so

108
00:04:43,550 --> 00:04:48,620
we want to show a reduction to some

109
00:04:45,439 --> 00:04:50,000
computationally hard problem so in other

110
00:04:48,620 --> 00:04:52,189
words we want to say that if there is an

111
00:04:50,000 --> 00:04:54,349
adversary that has advantage in the

112
00:04:52,189 --> 00:04:56,539
security game we can use this advantage

113
00:04:54,349 --> 00:04:58,969
in in order to get to gain advantage in

114
00:04:56,539 --> 00:05:00,560
a computationally hard problem so we

115
00:04:58,969 --> 00:05:01,969
need to simulate the Challenger and to

116
00:05:00,560 --> 00:05:04,190
interact with the adversary and

117
00:05:01,969 --> 00:05:07,639
eventually to somehow use this response

118
00:05:04,190 --> 00:05:09,680
in order to solve a hard problem so we

119
00:05:07,639 --> 00:05:12,190
have to construct the simulator and the

120
00:05:09,680 --> 00:05:15,469
simulator gets his input and instance

121
00:05:12,190 --> 00:05:18,199
let's say of the dhol EE or any

122
00:05:15,469 --> 00:05:20,479
assumption that you want and then we

123
00:05:18,199 --> 00:05:22,430
need to simulate all of the response of

124
00:05:20,479 --> 00:05:25,128
the Challenger so it means that we need

125
00:05:22,430 --> 00:05:25,819
to simulate the public key and then we

126
00:05:25,129 --> 00:05:32,509
need to answer

127
00:05:25,819 --> 00:05:34,819
off key queries and eventually we need

128
00:05:32,509 --> 00:05:36,110
to simulate the Chunnel ciphertext and

129
00:05:34,819 --> 00:05:38,509
we want the chance now if it has to be

130
00:05:36,110 --> 00:05:40,729
hard because we want to say that if the

131
00:05:38,509 --> 00:05:42,020
adversary can decrypt the ciphertext

132
00:05:40,729 --> 00:05:43,460
then we can use this response in order

133
00:05:42,020 --> 00:05:47,508
to solve the computationally hard

134
00:05:43,460 --> 00:05:49,520
problem okay so and I want to give

135
00:05:47,509 --> 00:05:53,870
intuition why it's hard to construct

136
00:05:49,520 --> 00:05:56,299
such a simulator so okay we need to be

137
00:05:53,870 --> 00:05:57,560
able to answer all of the queries of the

138
00:05:56,300 --> 00:06:00,080
answer E and we don't know in advance

139
00:05:57,560 --> 00:06:02,360
which attributes you will he will query

140
00:06:00,080 --> 00:06:05,448
so imagine that we somehow create a

141
00:06:02,360 --> 00:06:09,589
simulator that is able to simulate a key

142
00:06:05,449 --> 00:06:11,509
for any possible attributes so it's nice

143
00:06:09,589 --> 00:06:13,120
because now we can interact with the

144
00:06:11,509 --> 00:06:16,009
other sorry and you won't notice that

145
00:06:13,120 --> 00:06:18,770
that we were in a simulation but the

146
00:06:16,009 --> 00:06:21,710
problem is that is that is the now the

147
00:06:18,770 --> 00:06:24,020
simulator can also simulate valid case

148
00:06:21,710 --> 00:06:26,388
for attributes that are authorized to

149
00:06:24,020 --> 00:06:28,659
decrypt the ciphertext so it means that

150
00:06:26,389 --> 00:06:31,849
now the adversary can simulate a

151
00:06:28,659 --> 00:06:33,710
function in key for an attribute that

152
00:06:31,849 --> 00:06:36,740
can decrypt the ciphertext and then he

153
00:06:33,710 --> 00:06:38,919
can locally decrypt ciphertext and he

154
00:06:36,740 --> 00:06:38,919
can

155
00:06:39,399 --> 00:06:43,580
and it means that he can he can locally

156
00:06:42,229 --> 00:06:52,308
solve the heart problem without even

157
00:06:43,580 --> 00:06:54,080
interacting with the adversary okay and

158
00:06:52,309 --> 00:06:55,459
because of that it means that the heart

159
00:06:54,080 --> 00:06:57,469
problem cannot be computationally hard

160
00:06:55,459 --> 00:06:58,879
because the simulator should run in

161
00:06:57,469 --> 00:07:00,619
polynomial time so we showed an

162
00:06:58,879 --> 00:07:03,379
algorithm that with some of the heart

163
00:07:00,619 --> 00:07:06,439
program okay so it means that our

164
00:07:03,379 --> 00:07:10,819
simulator needs to specify needs to

165
00:07:06,439 --> 00:07:13,429
satisfy very specific requirements which

166
00:07:10,819 --> 00:07:15,949
are he should be able to simulate keys

167
00:07:13,429 --> 00:07:17,419
for the non authorized attributes but

168
00:07:15,949 --> 00:07:22,219
she shouldn't be able to simulate case

169
00:07:17,419 --> 00:07:24,919
for the authorized attributes and but

170
00:07:22,219 --> 00:07:27,558
why is this difficult to achieve such a

171
00:07:24,919 --> 00:07:30,679
simulator because the capabilities of

172
00:07:27,559 --> 00:07:33,289
the simulator are determined by F but we

173
00:07:30,679 --> 00:07:35,599
only learn as a relatively late stage of

174
00:07:33,289 --> 00:07:38,419
the game so we need to create the

175
00:07:35,599 --> 00:07:45,169
simulator and answer queries even before

176
00:07:38,419 --> 00:07:48,430
we know what F is okay so this is why

177
00:07:45,169 --> 00:07:51,619
getting full security is challenging and

178
00:07:48,430 --> 00:07:53,749
the immediate way to avoid this issue is

179
00:07:51,619 --> 00:07:56,719
to use the relaxed notion of selective

180
00:07:53,749 --> 00:07:58,729
security so in the selective security we

181
00:07:56,719 --> 00:08:00,860
simply require that the adversary will

182
00:07:58,729 --> 00:08:03,469
announce F before the game even begins

183
00:08:00,860 --> 00:08:04,519
and then it doesn't make it trivial to

184
00:08:03,469 --> 00:08:07,009
come up with the scheme that is

185
00:08:04,519 --> 00:08:15,289
selectively secure but it it makes them

186
00:08:07,009 --> 00:08:18,199
the problem easier okay so I will

187
00:08:15,289 --> 00:08:20,839
briefly go over a previous result so

188
00:08:18,199 --> 00:08:22,159
there are two main lines of war one of

189
00:08:20,839 --> 00:08:24,740
them realized on a group-based

190
00:08:22,159 --> 00:08:28,219
assumptions and there are the one on a

191
00:08:24,740 --> 00:08:31,669
lattice based assumptions and both of

192
00:08:28,219 --> 00:08:33,078
them evolved in kind of a similar way so

193
00:08:31,669 --> 00:08:35,779
firstly work instructions that are

194
00:08:33,078 --> 00:08:36,559
selectively secure for ibe and i remind

195
00:08:35,779 --> 00:08:39,409
that ibe

196
00:08:36,559 --> 00:08:41,568
is a de for point functions then there

197
00:08:39,409 --> 00:08:44,208
were constructions that are fully secure

198
00:08:41,568 --> 00:08:47,360
for IP and then the work instructions

199
00:08:44,208 --> 00:08:50,109
that are for larger class of function so

200
00:08:47,360 --> 00:08:53,250
a B but only selectively secure

201
00:08:50,110 --> 00:08:55,330
and then eventually with the group based

202
00:08:53,250 --> 00:08:57,610
assumptions there was a breakthrough

203
00:08:55,330 --> 00:09:00,400
with the door system by our waters and

204
00:08:57,610 --> 00:09:04,780
the the work instructions that are fully

205
00:09:00,400 --> 00:09:13,780
secured for a B and with lettuces this

206
00:09:04,780 --> 00:09:15,699
problem remained open okay so we

207
00:09:13,780 --> 00:09:18,040
partially as of this problem not

208
00:09:15,700 --> 00:09:20,740
completely but we show fully secured a

209
00:09:18,040 --> 00:09:22,870
be a based on the lwe assumption and the

210
00:09:20,740 --> 00:09:27,280
supported function classes what we call

211
00:09:22,870 --> 00:09:29,800
this EMF which is CNF formulas with

212
00:09:27,280 --> 00:09:31,750
constant locality of the clauses

213
00:09:29,800 --> 00:09:33,939
so each Clause can access only a

214
00:09:31,750 --> 00:09:36,790
constant number of bits of the input so

215
00:09:33,940 --> 00:09:43,450
for example switch that is a 3-cnf

216
00:09:36,790 --> 00:09:46,689
formula okay so our approach takes three

217
00:09:43,450 --> 00:09:48,340
steps so in the first one we use an idea

218
00:09:46,690 --> 00:09:50,620
that is called in the tunning technique

219
00:09:48,340 --> 00:09:53,230
that was the present day by agency and

220
00:09:50,620 --> 00:09:58,690
he presented it in the context of group

221
00:09:53,230 --> 00:10:00,430
based constructions so we we managed to

222
00:09:58,690 --> 00:10:03,430
construct something that that has the

223
00:10:00,430 --> 00:10:07,089
same kind of behavior but is based on a

224
00:10:03,430 --> 00:10:18,370
lot is the best assumptions and it also

225
00:10:07,090 --> 00:10:20,950
uses PRF okay and as a second step we

226
00:10:18,370 --> 00:10:23,230
generalize this approach so we showed

227
00:10:20,950 --> 00:10:25,990
that if instead of starting from a PRF

228
00:10:23,230 --> 00:10:32,260
we start from a constrained PRF then we

229
00:10:25,990 --> 00:10:34,180
can get a B instead of IB but in order

230
00:10:32,260 --> 00:10:36,310
to implement this idea based on the

231
00:10:34,180 --> 00:10:40,150
latest techniques we need the constraint

232
00:10:36,310 --> 00:10:43,209
PRF to satisfy some special structural

233
00:10:40,150 --> 00:10:45,430
properties so in order to get the final

234
00:10:43,210 --> 00:10:48,730
construction we also need to show a

235
00:10:45,430 --> 00:10:50,260
constraint PRF that that satisfies those

236
00:10:48,730 --> 00:10:52,870
requirements and this is what we have

237
00:10:50,260 --> 00:10:55,900
the limitation on the supported function

238
00:10:52,870 --> 00:10:58,650
plus only 40 CNM so that will be the

239
00:10:55,900 --> 00:10:58,650
Lester

240
00:10:58,840 --> 00:11:09,710
okay so let me describe the tagging idea

241
00:11:05,410 --> 00:11:12,620
so I focus now just on ibe because

242
00:11:09,710 --> 00:11:14,570
because this is the context it was

243
00:11:12,620 --> 00:11:16,460
presented for so now there is only a

244
00:11:14,570 --> 00:11:18,680
single authorized attributes and the

245
00:11:16,460 --> 00:11:22,040
adversary can query for kids for all the

246
00:11:18,680 --> 00:11:26,359
other attributes okay so here is the

247
00:11:22,040 --> 00:11:28,270
idea you add another dimension to the

248
00:11:26,360 --> 00:11:30,950
attribute space so now there are

249
00:11:28,270 --> 00:11:33,230
attributes and there are also tags so

250
00:11:30,950 --> 00:11:35,720
each attribute is associated with a row

251
00:11:33,230 --> 00:11:40,240
and each tag is associated with the

252
00:11:35,720 --> 00:11:43,070
column so now when you want to encrypt

253
00:11:40,240 --> 00:11:45,890
respective to some attributes you go to

254
00:11:43,070 --> 00:11:48,950
the respective row and then you randomly

255
00:11:45,890 --> 00:11:52,250
select one column and this is where you

256
00:11:48,950 --> 00:11:53,690
generate the cipher text and when you

257
00:11:52,250 --> 00:11:56,180
want to generate a secret key you do

258
00:11:53,690 --> 00:11:58,580
something similar so you go to the row

259
00:11:56,180 --> 00:12:00,380
of that attribute and then you randomly

260
00:11:58,580 --> 00:12:02,480
choose a column and then you generate

261
00:12:00,380 --> 00:12:04,040
the key that can decrypt the entire row

262
00:12:02,480 --> 00:12:06,020
except of that column so it's like a

263
00:12:04,040 --> 00:12:10,370
function key that can decrypt an entire

264
00:12:06,020 --> 00:12:12,860
row except of a very specific cell so

265
00:12:10,370 --> 00:12:14,630
now in terms of correctness as long as

266
00:12:12,860 --> 00:12:17,060
the cipher text and the sacred key

267
00:12:14,630 --> 00:12:18,770
doesn't fall on on the on the sing

268
00:12:17,060 --> 00:12:22,130
column then we're good and decryption

269
00:12:18,770 --> 00:12:25,790
should work so why is this useful for

270
00:12:22,130 --> 00:12:30,350
food security so here is how the

271
00:12:25,790 --> 00:12:35,990
simulator will look so now with we when

272
00:12:30,350 --> 00:12:40,820
we initialize the simulator we we first

273
00:12:35,990 --> 00:12:43,880
choose for every row some column we call

274
00:12:40,820 --> 00:12:46,160
it the pink column and which is it even

275
00:12:43,880 --> 00:12:48,980
before the game begins and now instead

276
00:12:46,160 --> 00:12:51,800
of choosing the cells of the ciphertext

277
00:12:48,980 --> 00:12:54,590
and and the secret keys randomly we will

278
00:12:51,800 --> 00:12:56,449
always stick with those random cells

279
00:12:54,590 --> 00:12:59,180
that we already chose before the game

280
00:12:56,450 --> 00:13:02,440
started so when someone queries for a

281
00:12:59,180 --> 00:13:05,300
secret key we will always puncture it at

282
00:13:02,440 --> 00:13:09,110
that pre chosen point and equivalent

283
00:13:05,300 --> 00:13:11,900
thing when someone asks for a for

284
00:13:09,110 --> 00:13:14,150
ciphertext will always generate its own

285
00:13:11,900 --> 00:13:18,260
that point so you can already see that

286
00:13:14,150 --> 00:13:20,569
now the simulator can answer any cypher

287
00:13:18,260 --> 00:13:23,210
text query and any secret key query but

288
00:13:20,570 --> 00:13:26,029
he still cannot decrypt a challenge

289
00:13:23,210 --> 00:13:27,440
ciphertext because he's he simulated

290
00:13:26,029 --> 00:13:33,050
secret keys will not work on his

291
00:13:27,440 --> 00:13:35,089
simulates the cipher text but on the

292
00:13:33,050 --> 00:13:39,500
other hand it is still indistinguishable

293
00:13:35,089 --> 00:13:42,770
to the adversary and this is because if

294
00:13:39,500 --> 00:13:45,860
on every row you only see just a secret

295
00:13:42,770 --> 00:13:48,800
key or just a ciphertext then this bin

296
00:13:45,860 --> 00:13:52,700
column it looks random so this is

297
00:13:48,800 --> 00:13:54,469
exactly this is exactly the same as in

298
00:13:52,700 --> 00:13:56,930
the real construction so there only a

299
00:13:54,470 --> 00:13:59,480
chance for the adversary to distinguish

300
00:13:56,930 --> 00:14:01,250
between those those two ways of

301
00:13:59,480 --> 00:14:03,800
generating the secret key and ciphertext

302
00:14:01,250 --> 00:14:06,200
is if he gets both the secret key and

303
00:14:03,800 --> 00:14:07,880
the ciphertext on the same row but we

304
00:14:06,200 --> 00:14:12,830
know by the security game that he is not

305
00:14:07,880 --> 00:14:14,270
allowed to make such a query ok so our

306
00:14:12,830 --> 00:14:17,560
first result is that we show how to

307
00:14:14,270 --> 00:14:21,380
implement this high-level idea based on

308
00:14:17,560 --> 00:14:24,739
lwe and in the way that we implement

309
00:14:21,380 --> 00:14:27,050
this random mapping is by a PRF where

310
00:14:24,740 --> 00:14:32,800
previously enchantress watch it was done

311
00:14:27,050 --> 00:14:36,469
with a random polynomial okay

312
00:14:32,800 --> 00:14:38,060
so this is the IB idea and I will not

313
00:14:36,470 --> 00:14:39,950
shown of the technical details of the

314
00:14:38,060 --> 00:14:48,279
construction because I want to talk

315
00:14:39,950 --> 00:14:53,630
about a B okay so let's see how to

316
00:14:48,279 --> 00:14:56,870
generalize this idea for a B so looking

317
00:14:53,630 --> 00:14:59,390
back again on the IBA construction the

318
00:14:56,870 --> 00:15:01,850
cypher text was intended for a single

319
00:14:59,390 --> 00:15:05,000
attribute so we could focus on that

320
00:15:01,850 --> 00:15:07,310
specific row but now we were in a B so

321
00:15:05,000 --> 00:15:09,980
the surfer text can be directly can be

322
00:15:07,310 --> 00:15:12,349
targeted to multiple attributes which

323
00:15:09,980 --> 00:15:18,350
means it can be targeted to multiple

324
00:15:12,350 --> 00:15:22,670
rows so if we ignore for a moment

325
00:15:18,350 --> 00:15:25,699
efficiency we can generalize the tagging

326
00:15:22,670 --> 00:15:28,669
idea as follows so

327
00:15:25,699 --> 00:15:31,939
an encryption algorithm that simply goes

328
00:15:28,669 --> 00:15:34,459
over every attribute and then if the

329
00:15:31,939 --> 00:15:36,649
antibody is authorized then it generates

330
00:15:34,459 --> 00:15:39,079
a ciphertext for that attribute so for

331
00:15:36,649 --> 00:15:41,779
every authorized row it samples a random

332
00:15:39,079 --> 00:15:44,209
column and generates a ciphertext and

333
00:15:41,779 --> 00:15:50,540
eventually it concatenates everything

334
00:15:44,209 --> 00:15:54,079
and outputs it is the ciphertext so in

335
00:15:50,540 --> 00:15:56,449
terms of security the same argument

336
00:15:54,079 --> 00:15:58,549
should work we can in the simulation

337
00:15:56,449 --> 00:16:01,910
just predetermine all of the random

338
00:15:58,549 --> 00:16:03,559
columns and and then stick to them when

339
00:16:01,910 --> 00:16:07,009
we simulate the ciphertext and the

340
00:16:03,559 --> 00:16:09,379
secret key but now the problem is with

341
00:16:07,009 --> 00:16:11,779
with the efficiency we have to somehow

342
00:16:09,379 --> 00:16:13,730
generate those ciphertext such as they

343
00:16:11,779 --> 00:16:18,829
are small and it only takes polynomial

344
00:16:13,730 --> 00:16:22,459
time so what are our efficiency

345
00:16:18,829 --> 00:16:25,040
requirement and we need to have some

346
00:16:22,459 --> 00:16:27,049
sing-sing description of those random

347
00:16:25,040 --> 00:16:29,269
columns that are associated with the

348
00:16:27,049 --> 00:16:32,358
ciphertext and in order for the security

349
00:16:29,269 --> 00:16:35,209
argument to to follow

350
00:16:32,359 --> 00:16:39,339
we need the 16 description to satisfy

351
00:16:35,209 --> 00:16:42,258
two properties so the first one is that

352
00:16:39,339 --> 00:16:43,639
we should be able to simulate this in

353
00:16:42,259 --> 00:16:45,139
the pink area when we are in the

354
00:16:43,639 --> 00:16:47,419
security proof because we wanted the

355
00:16:45,139 --> 00:16:52,369
security proof to always use those /

356
00:16:47,419 --> 00:16:56,509
determined cells and the other one is is

357
00:16:52,369 --> 00:16:59,179
that we want this 16 description to not

358
00:16:56,509 --> 00:17:01,789
reveal more information about the the

359
00:16:59,179 --> 00:17:03,649
pink cells then what she must reveal so

360
00:17:01,789 --> 00:17:06,319
in particular it shouldn't reveal the

361
00:17:03,649 --> 00:17:09,319
values of those pixels on the rows that

362
00:17:06,319 --> 00:17:11,750
are not authorized by F because we want

363
00:17:09,319 --> 00:17:13,760
to claim that the secret is are still

364
00:17:11,750 --> 00:17:15,559
indistinguishable from the the real

365
00:17:13,760 --> 00:17:18,189
secret case where daughters are chosen

366
00:17:15,559 --> 00:17:18,189
randomly

367
00:17:21,210 --> 00:17:31,200
okay so we need something that satisfies

368
00:17:26,960 --> 00:17:33,510
those two requirements and there is

369
00:17:31,200 --> 00:17:36,140
something that exactly fits into the

370
00:17:33,510 --> 00:17:39,390
definition and this is a constraint PRF

371
00:17:36,140 --> 00:17:41,640
so what is the constraint PRF

372
00:17:39,390 --> 00:17:43,830
so in a standard PRF there is the seed

373
00:17:41,640 --> 00:17:45,930
and then if you have the seed you can

374
00:17:43,830 --> 00:17:47,550
compute the PRF on any input and if you

375
00:17:45,930 --> 00:17:50,220
don't have the seed and everything looks

376
00:17:47,550 --> 00:17:52,649
indistinguishable from my uniform to you

377
00:17:50,220 --> 00:17:55,110
and in a constraint PRF you can also

378
00:17:52,650 --> 00:17:57,150
generate constraint kids and then those

379
00:17:55,110 --> 00:18:00,120
constraint kids can evaluate the

380
00:17:57,150 --> 00:18:04,640
beautifully on a subset of the inputs so

381
00:18:00,120 --> 00:18:07,919
similarly to a be a constraint seed is

382
00:18:04,640 --> 00:18:11,640
associated with some policy and this

383
00:18:07,920 --> 00:18:13,890
policy determines on which values so on

384
00:18:11,640 --> 00:18:18,000
which inputs you can evaluate the PRF

385
00:18:13,890 --> 00:18:22,710
and on which inputs it looks random to

386
00:18:18,000 --> 00:18:25,050
you and for this work we will need the

387
00:18:22,710 --> 00:18:29,340
constraint PRF that only supports a

388
00:18:25,050 --> 00:18:31,050
single key and it actually makes things

389
00:18:29,340 --> 00:18:35,100
easier because there are constructions

390
00:18:31,050 --> 00:18:38,790
that can only support a single gene okay

391
00:18:35,100 --> 00:18:40,560
and so now going back to this high-level

392
00:18:38,790 --> 00:18:46,379
idea let's see how to use the constraint

393
00:18:40,560 --> 00:18:48,300
right so in order to to commit to those

394
00:18:46,380 --> 00:18:53,100
pink values we will simply choose some

395
00:18:48,300 --> 00:18:55,470
PRF seen so we say that the the the

396
00:18:53,100 --> 00:18:57,000
input to the PRF is there is the row and

397
00:18:55,470 --> 00:18:59,580
then the output of the PRF is the

398
00:18:57,000 --> 00:19:02,790
corresponding column of the of the pink

399
00:18:59,580 --> 00:19:05,040
so and then when we want to generate a

400
00:19:02,790 --> 00:19:07,710
secret key we will simply use the output

401
00:19:05,040 --> 00:19:11,580
of the PRF respective to the C that we

402
00:19:07,710 --> 00:19:13,950
already chose and when we want to

403
00:19:11,580 --> 00:19:15,780
generate a ciphertext then now instead

404
00:19:13,950 --> 00:19:18,840
of choosing random columns we will

405
00:19:15,780 --> 00:19:20,850
associate it with the constraint set of

406
00:19:18,840 --> 00:19:23,040
of the C that we already chose at the

407
00:19:20,850 --> 00:19:25,169
beginning so but the properties of the

408
00:19:23,040 --> 00:19:29,190
PRF we exactly have the guarantee that

409
00:19:25,170 --> 00:19:31,170
now this constraints it describes only

410
00:19:29,190 --> 00:19:33,870
the thing points of the rows that are

411
00:19:31,170 --> 00:19:34,640
authorized by F but it reduces my own

412
00:19:33,870 --> 00:19:39,050
firm ation

413
00:19:34,640 --> 00:19:43,610
the other points and so this satisfies

414
00:19:39,050 --> 00:19:47,659
the second requirement and now in order

415
00:19:43,610 --> 00:19:50,959
to satisfy the first requirement we need

416
00:19:47,660 --> 00:19:52,310
to somehow change how we generate the

417
00:19:50,960 --> 00:19:53,810
cipher text in the real scheme in order

418
00:19:52,310 --> 00:19:57,200
to make it indistinguishable from the

419
00:19:53,810 --> 00:20:00,800
way we generate it in the simulation so

420
00:19:57,200 --> 00:20:03,800
what we will do is that we will we will

421
00:20:00,800 --> 00:20:06,889
also describe it by s on cut straight

422
00:20:03,800 --> 00:20:10,100
and seed for the function f but we will

423
00:20:06,890 --> 00:20:13,070
start from a independently chosen seed

424
00:20:10,100 --> 00:20:15,169
so we'll have this Sigma prime that we a

425
00:20:13,070 --> 00:20:17,570
generate freshly every time we encrypt

426
00:20:15,170 --> 00:20:20,180
and then we will compute out of it just

427
00:20:17,570 --> 00:20:22,850
the constraints it for F and this is how

428
00:20:20,180 --> 00:20:30,020
we will describe the cipher text in the

429
00:20:22,850 --> 00:20:32,810
real scheme okay so I didn't talk at all

430
00:20:30,020 --> 00:20:37,040
about lattices or how to actually

431
00:20:32,810 --> 00:20:38,929
implement those ideas and I want to just

432
00:20:37,040 --> 00:20:40,639
say a few words about it because I don't

433
00:20:38,930 --> 00:20:45,260
have time to go into the technical

434
00:20:40,640 --> 00:20:47,420
details okay so the construction is

435
00:20:45,260 --> 00:20:50,570
based on the techniques that were

436
00:20:47,420 --> 00:20:54,080
developed by ABG and their construction

437
00:20:50,570 --> 00:20:56,240
shows a selectively secured abs oh we

438
00:20:54,080 --> 00:20:58,129
use their selective technique where the

439
00:20:56,240 --> 00:21:04,180
thing we commit to with the

440
00:20:58,130 --> 00:21:04,180
selectiveness is this PRF seed and now

441
00:21:04,960 --> 00:21:12,620
because of the technical details of how

442
00:21:08,780 --> 00:21:15,170
their construction is built then we

443
00:21:12,620 --> 00:21:18,080
cannot implement it with any constraint

444
00:21:15,170 --> 00:21:19,730
PRF and we needed to satisfy some

445
00:21:18,080 --> 00:21:23,449
special property so we call this

446
00:21:19,730 --> 00:21:27,620
property a gradual evaluation and I will

447
00:21:23,450 --> 00:21:31,430
I would give some intuition and what it

448
00:21:27,620 --> 00:21:33,590
means so fix some input X I know I

449
00:21:31,430 --> 00:21:36,830
consider two possible ways for competing

450
00:21:33,590 --> 00:21:39,260
with the PRF value on that input X so

451
00:21:36,830 --> 00:21:41,570
the first way will be by using the

452
00:21:39,260 --> 00:21:44,090
mastership and another way would be to

453
00:21:41,570 --> 00:21:45,919
first generate constraint seed and then

454
00:21:44,090 --> 00:21:50,449
use this constraint seed in order to

455
00:21:45,920 --> 00:21:52,940
evaluate on the point X so any

456
00:21:50,450 --> 00:21:55,520
constraint PRF is a guarantee that the

457
00:21:52,940 --> 00:21:57,830
output will be the same with those two

458
00:21:55,520 --> 00:21:59,840
kinds of computations but we require

459
00:21:57,830 --> 00:22:02,030
something way stronger which are the

460
00:21:59,840 --> 00:22:04,399
computations will be equivalent if you

461
00:22:02,030 --> 00:22:07,310
describe them as here kids so it should

462
00:22:04,400 --> 00:22:09,410
be exactly the same sequence of gates

463
00:22:07,310 --> 00:22:12,169
that you compute whether it is the

464
00:22:09,410 --> 00:22:14,120
master and see it or use constraints it

465
00:22:12,170 --> 00:22:17,630
and this should work for any function

466
00:22:14,120 --> 00:22:25,129
that authorizes X so a very a very large

467
00:22:17,630 --> 00:22:28,190
number of constrained okay so now lastly

468
00:22:25,130 --> 00:22:30,500
in order to construct the construct PRF

469
00:22:28,190 --> 00:22:33,410
that satisfies this definition we rely

470
00:22:30,500 --> 00:22:36,530
on the work of DKNY so they showed a

471
00:22:33,410 --> 00:22:40,970
constraint PF for a big fixing that can

472
00:22:36,530 --> 00:22:43,100
support a constant number of cases so we

473
00:22:40,970 --> 00:22:44,900
wait we change a little bit the

474
00:22:43,100 --> 00:22:46,669
parameters there and get the

475
00:22:44,900 --> 00:22:49,640
construction that supports a single key

476
00:22:46,670 --> 00:22:52,370
but but the constant locality for CNF

477
00:22:49,640 --> 00:22:54,980
instead of instead of a bit fixing and

478
00:22:52,370 --> 00:23:00,010
this construction also satisfies their

479
00:22:54,980 --> 00:23:11,760
gradual evaluation property so that's it

480
00:23:00,010 --> 00:23:14,500
[Applause]

481
00:23:11,760 --> 00:23:23,320
see really have any questions please

482
00:23:14,500 --> 00:23:24,790
come down into the microphone there are

483
00:23:23,320 --> 00:23:25,530
no questions let's thank wrote them

484
00:23:24,790 --> 00:23:29,639
again

485
00:23:25,530 --> 00:23:29,639
[Applause]

