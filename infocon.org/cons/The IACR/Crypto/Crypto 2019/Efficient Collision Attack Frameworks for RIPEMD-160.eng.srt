1
00:00:05,049 --> 00:00:11,260
thanks for the nice introduction also

2
00:00:07,029 --> 00:00:14,469
hello from my side usually I would say

3
00:00:11,260 --> 00:00:17,310
I'm happy to present here but quite

4
00:00:14,469 --> 00:00:21,820
frankly I'm not as you can see from the

5
00:00:17,310 --> 00:00:25,299
kind of ordered list of authors Fuu Kang

6
00:00:21,820 --> 00:00:28,720
should have given a presentation however

7
00:00:25,300 --> 00:00:31,300
his visa process was kind of delayed so

8
00:00:28,720 --> 00:00:35,460
we lost honours and decided to send me

9
00:00:31,300 --> 00:00:39,280
instead now you have to deal with me and

10
00:00:35,460 --> 00:00:45,640
let's get through it together

11
00:00:39,280 --> 00:00:48,070
so why do we look at ripe MD 160 the

12
00:00:45,640 --> 00:00:50,619
primary two reasons why we look at it is

13
00:00:48,070 --> 00:00:53,920
that it's quite old it's a hash function

14
00:00:50,619 --> 00:00:58,260
proposed in 1996 and it's standardized

15
00:00:53,920 --> 00:01:03,689
as part of an ISO international standard

16
00:00:58,260 --> 00:01:07,210
it's hash functions created in 90s so it

17
00:01:03,689 --> 00:01:11,289
kind of uses the knocker down god mode

18
00:01:07,210 --> 00:01:14,250
of operation with a 160-bit State it has

19
00:01:11,289 --> 00:01:18,880
an area rackspace that update function

20
00:01:14,250 --> 00:01:21,640
which is iterated 480 steps and to the

21
00:01:18,880 --> 00:01:24,100
best of my knowledge it's not broken yet

22
00:01:21,640 --> 00:01:31,030
and it will not be broken after the

23
00:01:24,100 --> 00:01:34,210
presentation so let's go back to the 90s

24
00:01:31,030 --> 00:01:38,009
to the area or time frame where ripened

25
00:01:34,210 --> 00:01:41,020
D has been designed so around the time

26
00:01:38,009 --> 00:01:43,990
ripened D 160 was designed a lot of

27
00:01:41,020 --> 00:01:48,189
other hash functions have been designed

28
00:01:43,990 --> 00:01:52,469
which share some similarities with each

29
00:01:48,189 --> 00:01:57,548
other and if we look at attacks on these

30
00:01:52,469 --> 00:02:00,639
90 hash functions then we see that we

31
00:01:57,549 --> 00:02:02,920
have sat smiley for md4 md5 fronting

32
00:02:00,639 --> 00:02:07,929
dmcgeh1 this means that we have

33
00:02:02,920 --> 00:02:11,830
practical collisions for them as far as

34
00:02:07,929 --> 00:02:15,670
I know for ripened D 128 there are only

35
00:02:11,830 --> 00:02:17,670
some theoretical non-ideal properties on

36
00:02:15,670 --> 00:02:21,269
the hash function this is why I

37
00:02:17,670 --> 00:02:27,060
this math smiling so let's see how it's

38
00:02:21,270 --> 00:02:30,800
the state for ripened d1 60 as I've told

39
00:02:27,060 --> 00:02:34,500
at the beginning rep MD 160 has 80 steps

40
00:02:30,800 --> 00:02:37,890
and if we look at pre image attacks at

41
00:02:34,500 --> 00:02:40,080
most we can attack 31 steps if we look

42
00:02:37,890 --> 00:02:43,708
at collision attacks and just focus on

43
00:02:40,080 --> 00:02:46,769
the compression function we can do up to

44
00:02:43,709 --> 00:02:48,930
48 steps when we do not start at the

45
00:02:46,769 --> 00:02:51,510
first step of the function and we can do

46
00:02:48,930 --> 00:02:55,170
up to 40 steps if we start at the first

47
00:02:51,510 --> 00:02:58,319
step and before this paper for collision

48
00:02:55,170 --> 00:03:01,738
attacks on the hash function the best

49
00:02:58,319 --> 00:03:05,518
attacks covered 30 out of 80 steps with

50
00:03:01,739 --> 00:03:08,220
a rather high time complexity and in

51
00:03:05,519 --> 00:03:10,980
this paper we present collisions for

52
00:03:08,220 --> 00:03:13,760
round 2 dispersions reduced to 30 and 31

53
00:03:10,980 --> 00:03:18,950
steps we have practical examples and

54
00:03:13,760 --> 00:03:18,950
theoretical attacks for 33 and 34 steps

55
00:03:19,459 --> 00:03:29,519
as mentioned before ripen d and almost

56
00:03:24,060 --> 00:03:32,730
all hash functions from the 90s used

57
00:03:29,519 --> 00:03:35,700
merkle-damgard constructions which means

58
00:03:32,730 --> 00:03:39,619
that we have chained compression

59
00:03:35,700 --> 00:03:42,000
functions so the interesting part that

60
00:03:39,620 --> 00:03:43,799
distinguishes these hashing function

61
00:03:42,000 --> 00:03:49,140
hash functions happens in the

62
00:03:43,799 --> 00:03:51,690
compression function if we look at em

63
00:03:49,140 --> 00:03:53,399
before md5 sha-1 should do the

64
00:03:51,690 --> 00:03:59,579
compression function kind of looks like

65
00:03:53,400 --> 00:04:01,970
this so we it kind of resembles block

66
00:03:59,579 --> 00:04:04,890
cipher with a white state and a large

67
00:04:01,970 --> 00:04:06,840
key schedule so we have here the message

68
00:04:04,890 --> 00:04:08,160
expansion and the state update where

69
00:04:06,840 --> 00:04:11,970
you're changing value gets updated

70
00:04:08,160 --> 00:04:15,180
together with a feed-forward if we look

71
00:04:11,970 --> 00:04:19,738
at ripen d the situation gets more

72
00:04:15,180 --> 00:04:22,079
complex so basically we have two state

73
00:04:19,738 --> 00:04:24,330
update functions and two message

74
00:04:22,079 --> 00:04:26,940
expansions which work at the same state

75
00:04:24,330 --> 00:04:30,380
and which are merged together at the end

76
00:04:26,940 --> 00:04:30,380
of the compression function

77
00:04:31,140 --> 00:04:39,630
as promised ripened II is an air X

78
00:04:34,530 --> 00:04:43,830
function so within one step one of the

79
00:04:39,630 --> 00:04:46,350
five State words is updated using

80
00:04:43,830 --> 00:04:48,359
modular editions rotations and this

81
00:04:46,350 --> 00:04:51,360
bitwise boolean function which changes

82
00:04:48,360 --> 00:04:54,090
here depending on the current step we

83
00:04:51,360 --> 00:05:00,450
are in also there is a constant addition

84
00:04:54,090 --> 00:05:07,289
and per step one word of the expanded

85
00:05:00,450 --> 00:05:09,990
message is also added to the state so

86
00:05:07,290 --> 00:05:13,140
how do we find collisions for ripening

87
00:05:09,990 --> 00:05:15,270
160 basically the high-level idea of

88
00:05:13,140 --> 00:05:19,530
such a collision attack is almost

89
00:05:15,270 --> 00:05:23,030
unchanged since to 2005 and it was

90
00:05:19,530 --> 00:05:25,469
introduced by pong at you so basically

91
00:05:23,030 --> 00:05:28,830
we see the collisions search as a

92
00:05:25,470 --> 00:05:32,850
differential problem so we basically

93
00:05:28,830 --> 00:05:35,070
search for message which has a

94
00:05:32,850 --> 00:05:39,600
difference and which ends up in a

95
00:05:35,070 --> 00:05:44,909
collision and the coalition search also

96
00:05:39,600 --> 00:05:47,340
follows always the similar steps so at

97
00:05:44,910 --> 00:05:49,460
the first in first step we search for a

98
00:05:47,340 --> 00:05:53,150
suitable differential characteristic

99
00:05:49,460 --> 00:05:55,440
those differential characteristic

100
00:05:53,150 --> 00:05:58,650
usually as a dance part at the beginning

101
00:05:55,440 --> 00:06:01,440
and a sparse part and we use the freedom

102
00:05:58,650 --> 00:06:05,609
as we can choose the message words

103
00:06:01,440 --> 00:06:07,290
freely in a collision attack to find a

104
00:06:05,610 --> 00:06:10,170
solution for the dance part and to

105
00:06:07,290 --> 00:06:13,550
connect the dance part with the chaining

106
00:06:10,170 --> 00:06:18,200
variable and the propagation of the

107
00:06:13,550 --> 00:06:22,460
spouse part is done probabilistically

108
00:06:18,200 --> 00:06:26,610
so what do we do now for ripened D 160

109
00:06:22,460 --> 00:06:30,719
since the compression function is a bit

110
00:06:26,610 --> 00:06:33,870
more complex how does the differential

111
00:06:30,720 --> 00:06:39,660
characteristic look like one option is

112
00:06:33,870 --> 00:06:44,050
to place a dance part in both branches

113
00:06:39,660 --> 00:06:48,340
of wrapping D this has already

114
00:06:44,050 --> 00:06:50,080
done by several papers but here from my

115
00:06:48,340 --> 00:06:52,859
point of view the problem is that we

116
00:06:50,080 --> 00:06:56,609
have to use the freedom in the message

117
00:06:52,860 --> 00:07:01,270
to basically solve the dense part in two

118
00:06:56,610 --> 00:07:04,240
branches so they available degrees of

119
00:07:01,270 --> 00:07:09,219
freedom are consumed very rapidly

120
00:07:04,240 --> 00:07:13,830
rapidly and typically if we do an attack

121
00:07:09,220 --> 00:07:19,210
following this framework we can only do

122
00:07:13,830 --> 00:07:22,990
semi-free start collisions and other

123
00:07:19,210 --> 00:07:25,448
option is to just place the dance part

124
00:07:22,990 --> 00:07:28,479
on one branch for instance the right

125
00:07:25,449 --> 00:07:31,750
branch then the freedom in the message

126
00:07:28,479 --> 00:07:34,449
Burt words are only used to solve the

127
00:07:31,750 --> 00:07:36,789
dense part on one side and connect with

128
00:07:34,449 --> 00:07:40,659
the chaining value and the rest of the

129
00:07:36,789 --> 00:07:45,068
characteristic is propagated or solved

130
00:07:40,659 --> 00:07:47,169
by chance basically this was done in the

131
00:07:45,069 --> 00:07:49,930
previous collision attack on run to

132
00:07:47,169 --> 00:07:53,650
reduce Trappe MD and clearly there's

133
00:07:49,930 --> 00:07:58,630
also a certain to put the dense part on

134
00:07:53,650 --> 00:08:02,258
the left in this paper we looked at

135
00:07:58,630 --> 00:08:05,289
those two strategies and proposed one

136
00:08:02,259 --> 00:08:08,289
burr left is paracin to write this dance

137
00:08:05,289 --> 00:08:11,560
and one where the leftist dance and to

138
00:08:08,289 --> 00:08:14,770
write this parse and the one were the

139
00:08:11,560 --> 00:08:17,169
left stands gives us the better attack

140
00:08:14,770 --> 00:08:23,469
so we will have a closer look at this

141
00:08:17,169 --> 00:08:24,900
framework so let's start with the search

142
00:08:23,469 --> 00:08:29,229
for differential characteristics

143
00:08:24,900 --> 00:08:31,989
basically refused automatic techniques

144
00:08:29,229 --> 00:08:33,909
to search for the nonlinear part in the

145
00:08:31,990 --> 00:08:36,969
characteristics which is based on a long

146
00:08:33,909 --> 00:08:39,218
series of works which always improved

147
00:08:36,969 --> 00:08:42,550
and added new tricks to these techniques

148
00:08:39,219 --> 00:08:44,829
and the high-level idea of these

149
00:08:42,549 --> 00:08:46,510
automated techniques is basically a

150
00:08:44,829 --> 00:08:51,189
guess and determine attack which means

151
00:08:46,510 --> 00:08:53,880
that we start from a certain starting

152
00:08:51,190 --> 00:08:56,040
point and then we do

153
00:08:53,880 --> 00:08:57,990
on the pit conditions then we propagate

154
00:08:56,040 --> 00:08:59,550
information of this cast other pit

155
00:08:57,990 --> 00:09:02,130
conditions and if we have a

156
00:08:59,550 --> 00:09:06,540
contradiction we factor I can try to

157
00:09:02,130 --> 00:09:08,550
solve this issue so I think from this

158
00:09:06,540 --> 00:09:14,029
description you might not know what I

159
00:09:08,550 --> 00:09:16,680
mean so let's do an example so we

160
00:09:14,029 --> 00:09:21,810
exercise through the rest of the

161
00:09:16,680 --> 00:09:24,388
presentation by the example of the serta

162
00:09:21,810 --> 00:09:30,719
step collision attack so what do you see

163
00:09:24,389 --> 00:09:34,110
here is basically the 30 state words or

164
00:09:30,720 --> 00:09:39,410
that respective state words which gets

165
00:09:34,110 --> 00:09:42,839
updated in each step of the left branch

166
00:09:39,410 --> 00:09:45,149
then here we have the state words which

167
00:09:42,839 --> 00:09:47,910
gets updated in a respective step on

168
00:09:45,149 --> 00:09:50,069
right branch and here we have the

169
00:09:47,910 --> 00:09:54,709
differential description of the 16

170
00:09:50,069 --> 00:09:59,279
message words we use in rap indeed and

171
00:09:54,709 --> 00:10:04,459
so per bird we have certain two-bit

172
00:09:59,279 --> 00:10:10,949
conditions and each symbol here presents

173
00:10:04,459 --> 00:10:13,170
a pair of bits so a dash means that in

174
00:10:10,949 --> 00:10:15,359
the differential description that this

175
00:10:13,170 --> 00:10:18,420
pair of bits has to be equal so there's

176
00:10:15,360 --> 00:10:22,730
no difference which means that this pair

177
00:10:18,420 --> 00:10:26,399
of bits can take the values 0 0 or 1 1

178
00:10:22,730 --> 00:10:29,250
if we have a 1 then we mean that those

179
00:10:26,399 --> 00:10:33,600
pair of bits has to value 1 if it has a

180
00:10:29,250 --> 00:10:39,410
0 those pair bits as to values 0 with

181
00:10:33,600 --> 00:10:43,350
you and an differences are symbolized

182
00:10:39,410 --> 00:10:48,420
one is the 1 0 pair and the other one is

183
00:10:43,350 --> 00:10:50,310
the different pair 0 1 pair and the

184
00:10:48,420 --> 00:10:52,949
question mark means that we have not

185
00:10:50,310 --> 00:10:55,170
refined the condition yet so every

186
00:10:52,949 --> 00:11:00,329
assignment of the pair of bits is still

187
00:10:55,170 --> 00:11:02,370
possible so from the starting point on

188
00:11:00,329 --> 00:11:05,089
we are now searching for a differential

189
00:11:02,370 --> 00:11:08,010
characteristic so how does this work

190
00:11:05,090 --> 00:11:12,450
let's fast forward to the end of the

191
00:11:08,010 --> 00:11:14,819
search kind of so what we do in a guess

192
00:11:12,450 --> 00:11:18,720
and determined search we have here still

193
00:11:14,820 --> 00:11:23,400
a lot of crutch marks and undefined bit

194
00:11:18,720 --> 00:11:26,070
pairs of bits and we guess some of these

195
00:11:23,400 --> 00:11:29,010
bit conditions for instance we guess

196
00:11:26,070 --> 00:11:31,770
here this question mark - - and then we

197
00:11:29,010 --> 00:11:35,040
propagate information and see how we can

198
00:11:31,770 --> 00:11:37,890
refine other pit conditions since every

199
00:11:35,040 --> 00:11:41,640
bit is connected by a functions in R and

200
00:11:37,890 --> 00:11:43,860
E and we see that we can propagate a

201
00:11:41,640 --> 00:11:47,250
bunch of information then we get the

202
00:11:43,860 --> 00:11:52,080
next bit for instance here this question

203
00:11:47,250 --> 00:11:54,960
mark and time we propagate again then we

204
00:11:52,080 --> 00:11:57,870
get a nut up it and then we propagate it

205
00:11:54,960 --> 00:11:59,880
again and what you can see here is that

206
00:11:57,870 --> 00:12:04,020
for this guess we have a contradiction

207
00:11:59,880 --> 00:12:05,730
so this differential characteristic does

208
00:12:04,020 --> 00:12:08,130
not work out so we have to backtrack

209
00:12:05,730 --> 00:12:13,700
which means we have to go back to a

210
00:12:08,130 --> 00:12:13,700
state where we didn't have or couldn't

211
00:12:13,880 --> 00:12:20,790
notice the contradiction and try to

212
00:12:17,460 --> 00:12:21,600
resolve it so in this case here instead

213
00:12:20,790 --> 00:12:24,000
of guessing

214
00:12:21,600 --> 00:12:26,760
- we guess an X which means a difference

215
00:12:24,000 --> 00:12:28,380
and then we propagate again the effects

216
00:12:26,760 --> 00:12:31,650
then we guess the last question mark

217
00:12:28,380 --> 00:12:34,380
propagate again to end up with our

218
00:12:31,650 --> 00:12:38,160
differential characteristics now in the

219
00:12:34,380 --> 00:12:40,620
next step we have to search for a pair

220
00:12:38,160 --> 00:12:45,270
of message words which follow these

221
00:12:40,620 --> 00:12:50,610
characteristics this is done in four

222
00:12:45,270 --> 00:12:52,590
steps and the first step we find a

223
00:12:50,610 --> 00:12:53,880
solution for the dense part of the

224
00:12:52,590 --> 00:12:56,850
differential characteristics by

225
00:12:53,880 --> 00:13:00,000
consuming the degrees of freedom in the

226
00:12:56,850 --> 00:13:02,580
red message words here in the second

227
00:13:00,000 --> 00:13:07,820
step we then compute one step forward

228
00:13:02,580 --> 00:13:10,740
biasing and three then we aim to connect

229
00:13:07,820 --> 00:13:14,100
the dense part from the beginning in

230
00:13:10,740 --> 00:13:16,400
step three and in step four we see if

231
00:13:14,100 --> 00:13:20,180
the conditions of the rest of the car

232
00:13:16,400 --> 00:13:22,670
sticks off a foot so let's start with

233
00:13:20,180 --> 00:13:25,390
step one so basically what we do here is

234
00:13:22,670 --> 00:13:29,150
we refine the conditions more and

235
00:13:25,390 --> 00:13:32,290
compute the corresponding message word

236
00:13:29,150 --> 00:13:35,569
to this refinement so we do it and we

237
00:13:32,290 --> 00:13:40,370
consume more degrees of freedom until we

238
00:13:35,570 --> 00:13:47,870
have determined our starting point from

239
00:13:40,370 --> 00:13:51,020
a bird 11 to 23 if we take a closer look

240
00:13:47,870 --> 00:13:55,670
here we see that for the connection then

241
00:13:51,020 --> 00:13:58,010
we might have a problem since the

242
00:13:55,670 --> 00:14:02,420
degrees of freedom uncertain and and

243
00:13:58,010 --> 00:14:04,130
then already used so we have to find a

244
00:14:02,420 --> 00:14:06,800
solution for this for the later

245
00:14:04,130 --> 00:14:10,880
connecting step and the first part of

246
00:14:06,800 --> 00:14:15,170
the solution is that we compute the

247
00:14:10,880 --> 00:14:19,370
solution set of X 9 X 10 which fulfills

248
00:14:15,170 --> 00:14:24,740
this equation for a state word X 14 with

249
00:14:19,370 --> 00:14:28,970
the given M Serkan so then we are at

250
00:14:24,740 --> 00:14:33,070
step two basically we just guess the

251
00:14:28,970 --> 00:14:37,880
word M 3 and compute one step forward

252
00:14:33,070 --> 00:14:40,760
then we start the connection face and

253
00:14:37,880 --> 00:14:45,439
try to connect from the beginning how do

254
00:14:40,760 --> 00:14:47,830
we do this we randomly choose those

255
00:14:45,440 --> 00:14:50,600
three message words and time we can

256
00:14:47,830 --> 00:14:56,090
after we've chosen those message words

257
00:14:50,600 --> 00:15:00,350
we can compute till step eight then we

258
00:14:56,090 --> 00:15:04,460
have to connect which basically means

259
00:15:00,350 --> 00:15:06,380
that we calculate this variable with the

260
00:15:04,460 --> 00:15:10,460
help of the equation involving the

261
00:15:06,380 --> 00:15:14,320
message board and 10 and here we find a

262
00:15:10,460 --> 00:15:18,170
solution for X 9 X 10 with vertex or yes

263
00:15:14,320 --> 00:15:23,810
okay right X 4 corresponds to this

264
00:15:18,170 --> 00:15:26,839
variable and if we found such a solution

265
00:15:23,810 --> 00:15:28,160
we can compute the message works and 8 &

266
00:15:26,840 --> 00:15:31,269
9

267
00:15:28,160 --> 00:15:33,769
in 11 employment I'm 14 and achieve

268
00:15:31,269 --> 00:15:37,100
connection so basically we'll fill in

269
00:15:33,769 --> 00:15:39,709
here a solution which gives us the rest

270
00:15:37,100 --> 00:15:44,319
of the five not determined methods

271
00:15:39,709 --> 00:15:46,339
message words and then we can attempt to

272
00:15:44,319 --> 00:15:48,349
propagate the rest of the

273
00:15:46,339 --> 00:15:50,290
characteristics and see if we have a

274
00:15:48,350 --> 00:15:54,620
contradiction or if it works out and

275
00:15:50,290 --> 00:16:00,860
since this is a staged example it works

276
00:15:54,620 --> 00:16:04,759
out and gives us the solution for the 30

277
00:16:00,860 --> 00:16:07,730
step collision but usually it doesn't

278
00:16:04,759 --> 00:16:11,060
work out what we do then then you go to

279
00:16:07,730 --> 00:16:15,579
step two again and try for another

280
00:16:11,060 --> 00:16:19,099
choice of those message message words

281
00:16:15,579 --> 00:16:23,269
there is a follow-up perk which is

282
00:16:19,100 --> 00:16:25,699
presented at FSE 2020 and hopefully this

283
00:16:23,269 --> 00:16:28,820
time it will be presented by fuking so

284
00:16:25,699 --> 00:16:34,000
thank you for your attention

285
00:16:28,820 --> 00:16:36,170
[Applause]

286
00:16:34,000 --> 00:16:38,620
thank you very much is there any

287
00:16:36,170 --> 00:16:38,620
questions

288
00:16:47,330 --> 00:16:52,670
it's semi-free start collisions

289
00:16:50,230 --> 00:16:57,440
basically I already had them in the in

290
00:16:52,670 --> 00:16:59,990
the table I can show you the results if

291
00:16:57,440 --> 00:17:16,939
you don't want to go to FSC for some

292
00:16:59,990 --> 00:17:18,589
reason so basically this do these

293
00:17:16,939 --> 00:17:24,860
techniques apply to other hash functions

294
00:17:18,589 --> 00:17:26,329
as well the high level strategy yes but

295
00:17:24,859 --> 00:17:29,209
there is is there more examples for

296
00:17:26,329 --> 00:17:32,720
these these parallel hash functions not

297
00:17:29,210 --> 00:17:34,910
that I know okay thank you yeah okay

298
00:17:32,720 --> 00:17:38,749
thank you

299
00:17:34,910 --> 00:17:38,749
[Applause]

