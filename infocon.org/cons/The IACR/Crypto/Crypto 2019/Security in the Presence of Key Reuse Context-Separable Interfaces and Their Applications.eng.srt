1
00:00:04,890 --> 00:00:14,919
all right okay so the main contribution

2
00:00:12,760 --> 00:00:16,720
of this next work is a definitional

3
00:00:14,920 --> 00:00:20,650
framework for reasoning about key reuse

4
00:00:16,720 --> 00:00:23,770
in a very broad way so key reuse occurs

5
00:00:20,650 --> 00:00:26,288
when the same secret is used in multiple

6
00:00:23,770 --> 00:00:28,810
ways either within a crypto system or

7
00:00:26,289 --> 00:00:30,490
among different applications

8
00:00:28,810 --> 00:00:32,650
this practice is risky as we all know

9
00:00:30,490 --> 00:00:34,330
and it's usually discouraged but key

10
00:00:32,650 --> 00:00:36,790
reuse can crop up in some unexpected

11
00:00:34,330 --> 00:00:40,720
ways that make it difficult for to

12
00:00:36,790 --> 00:00:42,640
enforce key separation all the time so

13
00:00:40,720 --> 00:00:51,210
recognizing this fact oops

14
00:00:42,640 --> 00:00:51,210
I'm not advancing okay hold on okay I

15
00:00:53,489 --> 00:00:59,980
have to sink my laptop and this thing so

16
00:00:56,590 --> 00:01:03,100
okay recognizing this fact prior works

17
00:00:59,980 --> 00:01:04,959
have looked at about particular settings

18
00:01:03,100 --> 00:01:07,090
where key reuse is safe so one of the

19
00:01:04,959 --> 00:01:08,740
most important and influential papers in

20
00:01:07,090 --> 00:01:11,619
the space was one firm harbor and pink

21
00:01:08,740 --> 00:01:13,990
us where they enjoy introduced the

22
00:01:11,619 --> 00:01:16,569
notion of joint security for signing and

23
00:01:13,990 --> 00:01:18,610
encryption so they formalize conditions

24
00:01:16,569 --> 00:01:22,149
under which it's safe to reuse the same

25
00:01:18,610 --> 00:01:25,780
key pair for both of these primitives so

26
00:01:22,149 --> 00:01:27,429
the they they start with the standard

27
00:01:25,780 --> 00:01:29,349
notions of security for these and

28
00:01:27,429 --> 00:01:31,929
augment them to account for certain

29
00:01:29,349 --> 00:01:34,360
forms of key reuse so let's take a look

30
00:01:31,929 --> 00:01:36,069
at how they define security for

31
00:01:34,360 --> 00:01:38,709
signature schemes so the usual

32
00:01:36,069 --> 00:01:40,690
experiment starts by running the key

33
00:01:38,709 --> 00:01:42,819
generator and handing the public heat to

34
00:01:40,690 --> 00:01:47,560
the adversary you'll notice here that

35
00:01:42,819 --> 00:01:50,410
I've drawn the a a the signing algorithm

36
00:01:47,560 --> 00:01:52,479
as an object that the game makes queries

37
00:01:50,410 --> 00:01:54,819
to for for performing computations that

38
00:01:52,479 --> 00:01:57,789
involve the secret key okay so once the

39
00:01:54,819 --> 00:02:00,459
adversary has the public key we execute

40
00:01:57,789 --> 00:02:03,550
it with access to the Oracles defined by

41
00:02:00,459 --> 00:02:05,319
the game so one of these Oracle's allows

42
00:02:03,550 --> 00:02:07,869
the adversary to sign a message of its

43
00:02:05,319 --> 00:02:10,899
choosing and so the game just relays

44
00:02:07,869 --> 00:02:13,689
these queries and then relays the

45
00:02:10,899 --> 00:02:15,219
response back to the adversary so the

46
00:02:13,689 --> 00:02:17,040
black here's black arrows here

47
00:02:15,219 --> 00:02:19,950
represents

48
00:02:17,040 --> 00:02:22,970
oracle's that objects have access to in

49
00:02:19,950 --> 00:02:25,619
the experiment so eventually the

50
00:02:22,970 --> 00:02:28,680
adversary halts and outputs a forgery

51
00:02:25,620 --> 00:02:30,959
attempt and it wins if the forged

52
00:02:28,680 --> 00:02:32,760
signature is valid so now suppose

53
00:02:30,959 --> 00:02:36,569
there's an encryption algorithm that

54
00:02:32,760 --> 00:02:38,970
uses the same key generator so what

55
00:02:36,569 --> 00:02:40,530
happens what we ask is what happens to

56
00:02:38,970 --> 00:02:42,329
the security of the signature algorithm

57
00:02:40,530 --> 00:02:45,209
when the adversary has access to this

58
00:02:42,329 --> 00:02:47,459
decryption Oracle that uses the same key

59
00:02:45,209 --> 00:02:50,340
well depending on the particular

60
00:02:47,459 --> 00:02:52,650
algorithms in question this capability

61
00:02:50,340 --> 00:02:54,480
can lead to attacks that break the

62
00:02:52,650 --> 00:02:57,620
intended security of the signature

63
00:02:54,480 --> 00:03:00,149
algorithm on the other hand many

64
00:02:57,620 --> 00:03:02,400
combinations are provably safe in the

65
00:03:00,150 --> 00:03:04,470
setting so Haber and Pincus proved it

66
00:03:02,400 --> 00:03:06,989
for example that in the random Oracle

67
00:03:04,470 --> 00:03:10,920
model it's safe to use RSA pß and RSA Oh

68
00:03:06,989 --> 00:03:13,680
AEP with the same key pair so this type

69
00:03:10,920 --> 00:03:15,988
of key reuse is pretty common signing an

70
00:03:13,680 --> 00:03:18,989
encryption for example a TLS server

71
00:03:15,989 --> 00:03:20,819
might use the same RSA key pair for both

72
00:03:18,989 --> 00:03:23,879
key encapsulation and signing

73
00:03:20,819 --> 00:03:28,138
diffie-hellman key exchanges but the

74
00:03:23,879 --> 00:03:30,090
scope of key reuse potentially is much

75
00:03:28,139 --> 00:03:33,030
larger in modern systems where

76
00:03:30,090 --> 00:03:36,590
applications interact in in in very

77
00:03:33,030 --> 00:03:39,120
complex ways that that can be hard to

78
00:03:36,590 --> 00:03:42,690
that prior work just hasn't hasn't

79
00:03:39,120 --> 00:03:44,819
envisioned so it's natural to consider

80
00:03:42,690 --> 00:03:47,220
how we might generalize the setting of

81
00:03:44,819 --> 00:03:50,849
Heyburn Pinkus for example

82
00:03:47,220 --> 00:03:54,060
what about UFC a/c UFC cma security in

83
00:03:50,849 --> 00:03:56,040
the presence of other key operations of

84
00:03:54,060 --> 00:04:01,169
course we can consider security

85
00:03:56,040 --> 00:04:02,940
properties other than UFC MA and in and

86
00:04:01,169 --> 00:04:05,129
in and we can of course you know

87
00:04:02,940 --> 00:04:07,590
generalize this more think by thinking

88
00:04:05,129 --> 00:04:09,709
of what's the secure you know just

89
00:04:07,590 --> 00:04:14,220
replacing the signature scheme with a

90
00:04:09,709 --> 00:04:17,209
generic primitive or protocol okay so

91
00:04:14,220 --> 00:04:20,099
suppose that pi is defined in terms of

92
00:04:17,209 --> 00:04:22,440
calls to some underlying object that

93
00:04:20,099 --> 00:04:25,440
defines a set of key operations that can

94
00:04:22,440 --> 00:04:27,169
be performed so we'll call this object

95
00:04:25,440 --> 00:04:30,060
the interface and it's going to define

96
00:04:27,169 --> 00:04:31,510
what the set of key operations that can

97
00:04:30,060 --> 00:04:34,780
be performed

98
00:04:31,510 --> 00:04:37,150
in an in an experiment so in an exposed

99
00:04:34,780 --> 00:04:39,400
interface attack the adversary is given

100
00:04:37,150 --> 00:04:42,609
access to this interface and may use it

101
00:04:39,400 --> 00:04:44,890
in its attack against the game so this

102
00:04:42,610 --> 00:04:48,880
models key reuse attacks at various

103
00:04:44,890 --> 00:04:51,550
levels of abstraction so for example if

104
00:04:48,880 --> 00:04:53,080
the game is U of C MA and the scheme is

105
00:04:51,550 --> 00:04:55,510
the signing algorithm the interface

106
00:04:53,080 --> 00:04:57,700
might expose lower level key operations

107
00:04:55,510 --> 00:05:00,400
used by the signing an algorithm and

108
00:04:57,700 --> 00:05:02,860
possibly other other systems so for

109
00:05:00,400 --> 00:05:04,960
example if pi is RSA PSS then the

110
00:05:02,860 --> 00:05:07,690
interface might expose textbook RSA or

111
00:05:04,960 --> 00:05:10,000
something so on the other hand the

112
00:05:07,690 --> 00:05:11,950
interface might expose higher level

113
00:05:10,000 --> 00:05:14,830
primitive operations such as signing and

114
00:05:11,950 --> 00:05:16,870
or decryption the scheme might be a

115
00:05:14,830 --> 00:05:18,780
protocol that uses these in some way and

116
00:05:16,870 --> 00:05:21,730
the game might capture the security and

117
00:05:18,780 --> 00:05:26,320
property intended by this higher level

118
00:05:21,730 --> 00:05:29,650
protocol so the model captures of a very

119
00:05:26,320 --> 00:05:32,560
broad class of Kiryas attacks so let me

120
00:05:29,650 --> 00:05:34,599
now illustrate this with a couple of

121
00:05:32,560 --> 00:05:36,910
concrete examples

122
00:05:34,600 --> 00:05:38,770
the first is TPM so TPM is a

123
00:05:36,910 --> 00:05:41,200
specification for on-chip crypto

124
00:05:38,770 --> 00:05:43,870
processors that provide a variety of

125
00:05:41,200 --> 00:05:46,270
security features used in trusted

126
00:05:43,870 --> 00:05:48,400
computing applications one such feature

127
00:05:46,270 --> 00:05:50,200
is remote attestation of a host state

128
00:05:48,400 --> 00:05:52,870
which is useful for things like digital

129
00:05:50,200 --> 00:05:55,719
rights management so TPM supports

130
00:05:52,870 --> 00:05:59,680
several protocols for remote attestation

131
00:05:55,720 --> 00:06:01,930
many of which use the same key pair thus

132
00:05:59,680 --> 00:06:03,700
this of course raises the question of

133
00:06:01,930 --> 00:06:06,160
whether these protocols are jointly

134
00:06:03,700 --> 00:06:09,250
secure so suppose we want to study this

135
00:06:06,160 --> 00:06:11,950
security of a particular protocol when

136
00:06:09,250 --> 00:06:14,530
the adversary can simultaneously execute

137
00:06:11,950 --> 00:06:18,370
other protocols all using the same key

138
00:06:14,530 --> 00:06:20,500
as it turns out each of these protocols

139
00:06:18,370 --> 00:06:23,530
is implemented by making calls to the

140
00:06:20,500 --> 00:06:25,540
TPMS API so the API exposes low-level

141
00:06:23,530 --> 00:06:27,849
keeper key operations that are common to

142
00:06:25,540 --> 00:06:30,610
all of these all of the protocols the

143
00:06:27,850 --> 00:06:33,070
TPM intends to support when a remote

144
00:06:30,610 --> 00:06:35,470
server requests attestation of a host

145
00:06:33,070 --> 00:06:37,750
state the host makes calls to this API

146
00:06:35,470 --> 00:06:41,260
in order to execute the protocol with

147
00:06:37,750 --> 00:06:42,970
the server this means that in when we're

148
00:06:41,260 --> 00:06:44,830
in analyzing the scheme we might

149
00:06:42,970 --> 00:06:47,560
conservatively model these per

150
00:06:44,830 --> 00:06:49,409
called execution given the ad by giving

151
00:06:47,560 --> 00:06:52,150
the adversary direct access to the TPM

152
00:06:49,410 --> 00:06:54,100
so this is what we call a an expose

153
00:06:52,150 --> 00:06:57,250
interface attack and here it's it's

154
00:06:54,100 --> 00:06:59,170
modeling something very realistic the

155
00:06:57,250 --> 00:07:00,910
purpose of the TPM is to provide a

156
00:06:59,170 --> 00:07:03,310
hardware boundary for cryptographic keys

157
00:07:00,910 --> 00:07:04,960
so that if the adversary has control of

158
00:07:03,310 --> 00:07:07,900
the host it still doesn't have direct

159
00:07:04,960 --> 00:07:09,250
access to the keys so you know when

160
00:07:07,900 --> 00:07:11,320
we're modeling the security of these

161
00:07:09,250 --> 00:07:14,320
protocols we want to consider what

162
00:07:11,320 --> 00:07:16,090
happens when the host has has has when

163
00:07:14,320 --> 00:07:19,750
the the adversary is compromised the

164
00:07:16,090 --> 00:07:21,460
host well in 2013 I saw it all pointed

165
00:07:19,750 --> 00:07:23,230
out that this API can be used as a

166
00:07:21,460 --> 00:07:25,120
static diffie-hellman Oracle for the

167
00:07:23,230 --> 00:07:27,400
secret key this significantly reduces

168
00:07:25,120 --> 00:07:29,770
the concrete security of TPMS

169
00:07:27,400 --> 00:07:31,929
application and it also violates some

170
00:07:29,770 --> 00:07:36,640
important privacy properties of these

171
00:07:31,930 --> 00:07:40,260
protocols so our second example of an

172
00:07:36,640 --> 00:07:43,719
exposed interface attack involves TLS so

173
00:07:40,260 --> 00:07:44,260
version 1.2 and below in version 1.2

174
00:07:43,720 --> 00:07:47,140
below

175
00:07:44,260 --> 00:07:48,969
it's possible to negotiate custom

176
00:07:47,140 --> 00:07:50,530
parameters for both classic

177
00:07:48,970 --> 00:07:55,180
diffie-hellman and elliptic curve

178
00:07:50,530 --> 00:07:57,369
diffie-hellman key exchanges which mode

179
00:07:55,180 --> 00:07:59,020
will be negotiated and which parameters

180
00:07:57,370 --> 00:08:02,140
will be used depends on how the client

181
00:07:59,020 --> 00:08:03,849
and server are configured different

182
00:08:02,140 --> 00:08:06,010
configurations lead to different

183
00:08:03,850 --> 00:08:08,620
protocol variants all of which might use

184
00:08:06,010 --> 00:08:10,659
the same long-term secrets so let's

185
00:08:08,620 --> 00:08:13,810
explicitly model the interface that

186
00:08:10,660 --> 00:08:18,070
exposes say the server's secret key for

187
00:08:13,810 --> 00:08:20,650
usin TLS so the key is used for signing

188
00:08:18,070 --> 00:08:22,900
in some variants and decryption in

189
00:08:20,650 --> 00:08:25,599
others but the protocol variants were

190
00:08:22,900 --> 00:08:28,750
we're interested in both use signing it

191
00:08:25,600 --> 00:08:31,210
for authentication so here's where

192
00:08:28,750 --> 00:08:33,820
things get a little interesting in TLS

193
00:08:31,210 --> 00:08:36,340
1.2 the signature doesn't cover the name

194
00:08:33,820 --> 00:08:37,870
of the negotiated cipher suite the

195
00:08:36,340 --> 00:08:39,820
cipher suite by the way is a string

196
00:08:37,870 --> 00:08:41,560
that's meant to indicate what type of

197
00:08:39,820 --> 00:08:44,710
key exchange is being performed and what

198
00:08:41,559 --> 00:08:48,250
primitives are being used etc so in

199
00:08:44,710 --> 00:08:51,370
particular the cipher suite it covers it

200
00:08:48,250 --> 00:08:53,050
indicates whether a classic D H or

201
00:08:51,370 --> 00:08:56,640
elliptic curve D H group has been

202
00:08:53,050 --> 00:08:59,650
negotiated this leads to an interesting

203
00:08:56,640 --> 00:09:01,990
cross protocol attack

204
00:08:59,650 --> 00:09:04,329
by maverick gianopolous at all in 2012

205
00:09:01,990 --> 00:09:06,040
what makes their attack possible is this

206
00:09:04,330 --> 00:09:08,200
lack of binding of the signed key

207
00:09:06,040 --> 00:09:10,569
exchanged message to the cipher suite

208
00:09:08,200 --> 00:09:11,890
that was negotiated meaning an EC D H

209
00:09:10,570 --> 00:09:13,480
key exchange message might be

210
00:09:11,890 --> 00:09:16,089
misinterpreted by the client as

211
00:09:13,480 --> 00:09:18,190
pertaining to a classic diffie-hellman

212
00:09:16,089 --> 00:09:21,130
key exchange under the right conditions

213
00:09:18,190 --> 00:09:25,630
this can lead the client to leaking bits

214
00:09:21,130 --> 00:09:27,910
of the shared secret in general kiri use

215
00:09:25,630 --> 00:09:30,279
can lead to cross protocol attacks when

216
00:09:27,910 --> 00:09:33,189
secret key operations performed in the

217
00:09:30,279 --> 00:09:36,910
context of one protocol can be consumed

218
00:09:33,190 --> 00:09:39,130
in another context so as before we might

219
00:09:36,910 --> 00:09:41,050
model cross protocol attacks against TLS

220
00:09:39,130 --> 00:09:43,000
by giving the adversary direct access to

221
00:09:41,050 --> 00:09:45,010
the underlying interface in this case

222
00:09:43,000 --> 00:09:48,000
one that exposes signing and decryption

223
00:09:45,010 --> 00:09:51,040
operations on the server's secret key

224
00:09:48,000 --> 00:09:53,740
but this attack model is much too strong

225
00:09:51,040 --> 00:09:55,810
and because the server can the adversary

226
00:09:53,740 --> 00:10:00,210
can use it to trivially impersonate the

227
00:09:55,810 --> 00:10:03,279
server so we'll need some way of

228
00:10:00,210 --> 00:10:04,990
excluding these trivial attacks so

229
00:10:03,279 --> 00:10:07,630
jumping ahead just a little bit our

230
00:10:04,990 --> 00:10:09,430
syntax for interfaces will take as input

231
00:10:07,630 --> 00:10:10,930
a context string that is meant to

232
00:10:09,430 --> 00:10:13,199
uniquely identify the calling

233
00:10:10,930 --> 00:10:15,969
application and in our security

234
00:10:13,200 --> 00:10:18,310
experiment we'll require that none of

235
00:10:15,970 --> 00:10:20,709
the adversaries interface queries use

236
00:10:18,310 --> 00:10:23,349
the same context as the application

237
00:10:20,709 --> 00:10:27,310
under attack I'll return to this idea

238
00:10:23,350 --> 00:10:29,709
shortly but first let me return to an

239
00:10:27,310 --> 00:10:32,560
earlier slide and fill out some of the

240
00:10:29,709 --> 00:10:34,959
details of our main security notion so

241
00:10:32,560 --> 00:10:37,869
first of all secret key operations in

242
00:10:34,959 --> 00:10:40,000
this experiment are specified by an

243
00:10:37,870 --> 00:10:42,940
interface and we model key reduce

244
00:10:40,000 --> 00:10:44,260
attacks against the scheme by giving the

245
00:10:42,940 --> 00:10:48,310
adversary direct access to this

246
00:10:44,260 --> 00:10:51,310
interface now notice that the only

247
00:10:48,310 --> 00:10:52,900
purpose that the scheme serves in this

248
00:10:51,310 --> 00:10:55,660
experiment is to define how the game

249
00:10:52,900 --> 00:10:58,060
interacts with the interface so for our

250
00:10:55,660 --> 00:10:59,800
purposes it'll be simpler to drop the

251
00:10:58,060 --> 00:11:01,810
scheme from the formal definition and

252
00:10:59,800 --> 00:11:04,240
allow it to be defined by the game

253
00:11:01,810 --> 00:11:07,150
itself so the new experiment now just

254
00:11:04,240 --> 00:11:10,810
involves three objects the adversary and

255
00:11:07,150 --> 00:11:12,850
interface and a game so to reiterate the

256
00:11:10,810 --> 00:11:16,329
interface specifies how keys are

257
00:11:12,850 --> 00:11:19,810
generated and how they might be how they

258
00:11:16,329 --> 00:11:22,569
might be used and the game specifies how

259
00:11:19,810 --> 00:11:24,910
the keys are used how the interfaces use

260
00:11:22,569 --> 00:11:26,319
in our particular application as well as

261
00:11:24,910 --> 00:11:29,740
what is the intended goal of that

262
00:11:26,319 --> 00:11:33,939
application we call this setting executi

263
00:11:29,740 --> 00:11:36,519
under exposed interface attack proving

264
00:11:33,940 --> 00:11:38,199
security in this setting turns a will

265
00:11:36,519 --> 00:11:40,720
often require a property that we call

266
00:11:38,199 --> 00:11:42,849
context separable 'ti loosely and

267
00:11:40,720 --> 00:11:46,120
interfaces context separable it's the

268
00:11:42,850 --> 00:11:48,220
key option key operations if key

269
00:11:46,120 --> 00:11:50,589
operations can be bound to the context

270
00:11:48,220 --> 00:11:52,000
in which they're used so art in our

271
00:11:50,589 --> 00:11:54,550
syntax for interfaces makes this

272
00:11:52,000 --> 00:11:56,740
explicit among other tank things it

273
00:11:54,550 --> 00:11:58,508
takes as input a context string that's

274
00:11:56,740 --> 00:12:01,540
meant to uniquely identify the calling

275
00:11:58,509 --> 00:12:03,220
application our security experiment

276
00:12:01,540 --> 00:12:05,620
involves a distinguished context string

277
00:12:03,220 --> 00:12:07,329
which we call the game context and we

278
00:12:05,620 --> 00:12:09,519
require that the adder of adversaries

279
00:12:07,329 --> 00:12:12,008
interface queries never use the game

280
00:12:09,519 --> 00:12:14,860
context we'll call this requirement in

281
00:12:12,009 --> 00:12:16,360
the experiment context separation now in

282
00:12:14,860 --> 00:12:18,220
our experiment will allow we allow the

283
00:12:16,360 --> 00:12:22,720
game context to be chosen by the

284
00:12:18,220 --> 00:12:25,180
adversary so here's the main point for

285
00:12:22,720 --> 00:12:27,339
context separable interfaces we can

286
00:12:25,180 --> 00:12:29,829
design applications so that as long as

287
00:12:27,339 --> 00:12:31,600
context separation is enforced the

288
00:12:29,829 --> 00:12:34,388
adversary can't use the interface to

289
00:12:31,600 --> 00:12:36,600
attack the application so I should

290
00:12:34,389 --> 00:12:38,800
remark that we didn't invent this idea

291
00:12:36,600 --> 00:12:41,230
context separable 'ti is actually a

292
00:12:38,800 --> 00:12:43,389
design pattern that's apparent in a

293
00:12:41,230 --> 00:12:46,899
number of cryptographic standards let me

294
00:12:43,389 --> 00:12:48,639
just give one example to illustrate so

295
00:12:46,899 --> 00:12:50,290
one of the systems that we looked at in

296
00:12:48,639 --> 00:12:53,050
our paper is the Ed DSA signature

297
00:12:50,290 --> 00:12:56,259
algorithm EDSA is a variant of snore

298
00:12:53,050 --> 00:12:58,810
that that offers several advantages one

299
00:12:56,259 --> 00:13:00,370
of one being that it's deterministic and

300
00:12:58,810 --> 00:13:02,469
I won't belabor the details of the

301
00:13:00,370 --> 00:13:06,220
scheme but the point I want to make is

302
00:13:02,470 --> 00:13:08,470
that like most digital signatures at DSA

303
00:13:06,220 --> 00:13:11,110
isn't contact separable on its own and

304
00:13:08,470 --> 00:13:14,050
this is simply because the system

305
00:13:11,110 --> 00:13:16,949
doesn't the sorry the syntax doesn't

306
00:13:14,050 --> 00:13:20,050
surface an explicit context string

307
00:13:16,949 --> 00:13:22,059
however the RFC standard for ED DSA

308
00:13:20,050 --> 00:13:24,609
specifies variants of the algorithm that

309
00:13:22,059 --> 00:13:26,740
do just this for these a context string

310
00:13:24,610 --> 00:13:28,810
is provided as input to the signing

311
00:13:26,740 --> 00:13:31,440
and verifying operations so that the

312
00:13:28,810 --> 00:13:36,040
input of each hash computation is

313
00:13:31,440 --> 00:13:38,529
prefixed by the context so for certain

314
00:13:36,040 --> 00:13:40,839
classes of games enforcing context

315
00:13:38,529 --> 00:13:43,149
separation ensures that signatures

316
00:13:40,839 --> 00:13:45,160
obtained by the adversary by interacting

317
00:13:43,149 --> 00:13:48,610
with the interface can't be used in an

318
00:13:45,160 --> 00:13:51,010
attack against the application so for

319
00:13:48,610 --> 00:13:53,140
example suppose the application is some

320
00:13:51,010 --> 00:13:55,630
key exchange protocol that uses EDSA for

321
00:13:53,140 --> 00:13:57,520
authentication as long as the protocol

322
00:13:55,630 --> 00:14:00,610
signing and verifying operations always

323
00:13:57,520 --> 00:14:03,010
use the game context context separation

324
00:14:00,610 --> 00:14:06,270
prevents the adversary from being able

325
00:14:03,010 --> 00:14:08,860
to trivially impersonate the server so

326
00:14:06,270 --> 00:14:10,930
codifying context separation into our

327
00:14:08,860 --> 00:14:13,120
experiment allows us to prove security

328
00:14:10,930 --> 00:14:16,120
under exposed interface attack for large

329
00:14:13,120 --> 00:14:19,600
classes of applications let me now show

330
00:14:16,120 --> 00:14:22,089
you how so our main technical

331
00:14:19,600 --> 00:14:25,660
contribution is a composition theorem

332
00:14:22,089 --> 00:14:27,760
that that relates security under exposed

333
00:14:25,660 --> 00:14:31,180
interface attack to security in the

334
00:14:27,760 --> 00:14:34,329
usual setting in which the adversary has

335
00:14:31,180 --> 00:14:36,579
no direct access to the interface and

336
00:14:34,329 --> 00:14:38,859
the interface is basically only used for

337
00:14:36,579 --> 00:14:40,300
the intended application so our key

338
00:14:38,860 --> 00:14:41,920
insight is fairly simple

339
00:14:40,300 --> 00:14:44,079
if the adversaries interaction with the

340
00:14:41,920 --> 00:14:45,729
interface can be simulated given only

341
00:14:44,079 --> 00:14:47,229
knowledge of the public key then

342
00:14:45,730 --> 00:14:49,600
interacting with the interface doesn't

343
00:14:47,230 --> 00:14:52,329
assist it in in its attack against the

344
00:14:49,600 --> 00:14:55,149
the application so we formalized this

345
00:14:52,329 --> 00:14:57,160
idea by the gap 1 experiment which asks

346
00:14:55,149 --> 00:15:01,120
an adversary D to distinguish between

347
00:14:57,160 --> 00:15:04,569
two worlds in the real world D is given

348
00:15:01,120 --> 00:15:06,399
access to the interface and and Oracle's

349
00:15:04,570 --> 00:15:08,829
defined by the game as usual and in the

350
00:15:06,399 --> 00:15:10,450
fake world the average the adversaries

351
00:15:08,829 --> 00:15:12,609
interface queries are answered instead

352
00:15:10,450 --> 00:15:14,560
by the simulator so intuitively if

353
00:15:12,610 --> 00:15:16,720
there's an efficient simulator such that

354
00:15:14,560 --> 00:15:18,969
no reasonable adversary can distinguish

355
00:15:16,720 --> 00:15:21,370
the output of the interface from the

356
00:15:18,970 --> 00:15:23,380
simulator when given when being able to

357
00:15:21,370 --> 00:15:25,149
play the game as usual then any

358
00:15:23,380 --> 00:15:28,060
computation that involves the interface

359
00:15:25,149 --> 00:15:30,700
can be performed without it so here's

360
00:15:28,060 --> 00:15:33,579
the informal statement of our main

361
00:15:30,700 --> 00:15:35,470
result if an interface eye and game G

362
00:15:33,579 --> 00:15:37,120
are gap one secure oops

363
00:15:35,470 --> 00:15:40,329
I have not advanced this for a while I

364
00:15:37,120 --> 00:15:43,449
apologize if if an interface

365
00:15:40,329 --> 00:15:45,040
I in-game or GAAP once secured and G is

366
00:15:43,449 --> 00:15:46,839
secured in the usual setting then G is

367
00:15:45,040 --> 00:15:54,248
also secured under exposed interface

368
00:15:46,839 --> 00:15:56,139
attack so basically so so to rule out

369
00:15:54,249 --> 00:15:58,299
exposed interface attacks it suffices to

370
00:15:56,139 --> 00:16:03,009
prove the interface and game argh Apple

371
00:15:58,299 --> 00:16:04,360
insecure okay returning to Ed DSA we

372
00:16:03,009 --> 00:16:07,089
prove that the context separable

373
00:16:04,360 --> 00:16:09,369
variants of this signature algorithm are

374
00:16:07,089 --> 00:16:11,290
secure for any game who's signing and

375
00:16:09,369 --> 00:16:13,929
verification operations always use the

376
00:16:11,290 --> 00:16:16,480
game context this generality is the key

377
00:16:13,929 --> 00:16:18,549
advantage of context separable 'ti our

378
00:16:16,480 --> 00:16:21,689
theorem precisely specifies conditions

379
00:16:18,549 --> 00:16:23,860
under for applications under which

380
00:16:21,689 --> 00:16:25,868
enforcing context separation is

381
00:16:23,860 --> 00:16:26,549
sufficient to rule out expose interface

382
00:16:25,869 --> 00:16:30,069
attacks

383
00:16:26,549 --> 00:16:32,649
so besides context separable ax t what

384
00:16:30,069 --> 00:16:34,599
we need to prove gap 1 security is a is

385
00:16:32,649 --> 00:16:36,730
a way to efficiently simulate signatures

386
00:16:34,600 --> 00:16:38,379
output by the interface using only the

387
00:16:36,730 --> 00:16:39,899
public key and in fact there's a

388
00:16:38,379 --> 00:16:42,429
well-known technique for doing just that

389
00:16:39,899 --> 00:16:44,799
when we modeled had a hash function as a

390
00:16:42,429 --> 00:16:46,269
random Oracle but I'll leave the paper

391
00:16:44,799 --> 00:16:50,470
I'll leave it to the details to the

392
00:16:46,269 --> 00:16:52,480
paper so EDSA is an example of an

393
00:16:50,470 --> 00:16:55,509
operation exposed by what we call a

394
00:16:52,480 --> 00:16:57,040
discrete logarithm interface the public

395
00:16:55,509 --> 00:16:59,019
key of a discrete logarithm interface is

396
00:16:57,040 --> 00:17:01,540
some point in a finite cyclic group and

397
00:16:59,019 --> 00:17:03,040
the security of this is such an

398
00:17:01,540 --> 00:17:04,898
interfaces application is predicated

399
00:17:03,040 --> 00:17:07,539
upon the hardness of computing discrete

400
00:17:04,898 --> 00:17:09,638
logarithms in that group so in our paper

401
00:17:07,539 --> 00:17:11,079
we looked at various operations that a

402
00:17:09,638 --> 00:17:13,359
discrete logarithm interface might

403
00:17:11,079 --> 00:17:16,209
expose some lower level and some higher

404
00:17:13,359 --> 00:17:19,928
level fortunately don't have much time -

405
00:17:16,209 --> 00:17:21,819
not very much time at all - - to talk

406
00:17:19,929 --> 00:17:24,010
about these but so I'll just quickly go

407
00:17:21,819 --> 00:17:27,369
through our main application which was -

408
00:17:24,010 --> 00:17:29,679
the noise protocol framework so for

409
00:17:27,369 --> 00:17:32,889
those who don't know the noise protocol

410
00:17:29,679 --> 00:17:34,960
framework is it's is used for designing

411
00:17:32,889 --> 00:17:36,820
and specifying authenticated key

412
00:17:34,960 --> 00:17:39,250
exchange protocols using just three

413
00:17:36,820 --> 00:17:42,129
primitives a diffie-hellman function and

414
00:17:39,250 --> 00:17:44,080
a EAD scheme and a hash function so

415
00:17:42,130 --> 00:17:46,480
noise can be thought of as a large set

416
00:17:44,080 --> 00:17:49,059
of partially specified protocols called

417
00:17:46,480 --> 00:17:51,730
handshake patterns and each handshake

418
00:17:49,059 --> 00:17:54,129
patterns has its own security properties

419
00:17:51,730 --> 00:17:56,140
and each is useful in a different way

420
00:17:54,130 --> 00:17:58,330
different context so rather than

421
00:17:56,140 --> 00:18:00,430
explicitly define each handshake pattern

422
00:17:58,330 --> 00:18:03,639
annoyin specifies how messages are

423
00:18:00,430 --> 00:18:06,070
processed invalid noise protocols which

424
00:18:03,640 --> 00:18:08,920
in turn determines the set of valid

425
00:18:06,070 --> 00:18:10,540
patterns this makes it so this manner of

426
00:18:08,920 --> 00:18:13,210
specifying protocols makes it possible

427
00:18:10,540 --> 00:18:16,149
to reason about key reuse in noise in a

428
00:18:13,210 --> 00:18:17,890
very general way so static

429
00:18:16,150 --> 00:18:19,960
diffie-hellman is the primary means of

430
00:18:17,890 --> 00:18:23,080
authentication and noise so what we did

431
00:18:19,960 --> 00:18:25,000
in our paper was model the message

432
00:18:23,080 --> 00:18:27,520
processing rules as a discrete logarithm

433
00:18:25,000 --> 00:18:30,480
interface that exposes a host static

434
00:18:27,520 --> 00:18:32,950
secret for use in in handshake protocols

435
00:18:30,480 --> 00:18:35,470
so the interface specifies how to

436
00:18:32,950 --> 00:18:40,300
consume inbound messages as well as how

437
00:18:35,470 --> 00:18:42,010
to produce outbound messages and it also

438
00:18:40,300 --> 00:18:45,129
specifies how to update the host state

439
00:18:42,010 --> 00:18:47,530
as a side-effect so the interface is

440
00:18:45,130 --> 00:18:49,720
also context separable noise uses a

441
00:18:47,530 --> 00:18:51,760
contact string that is meant to bind

442
00:18:49,720 --> 00:18:53,320
protocol messages to the handshake

443
00:18:51,760 --> 00:18:57,430
pattern in which they're being either

444
00:18:53,320 --> 00:18:59,200
produced or consumed so we're able this

445
00:18:57,430 --> 00:19:00,670
allows us to prove gap one security of

446
00:18:59,200 --> 00:19:03,460
the interface with respect to a large

447
00:19:00,670 --> 00:19:06,010
class of games this implies joint

448
00:19:03,460 --> 00:19:08,040
security of all handshake patterns ie

449
00:19:06,010 --> 00:19:10,480
protocols that are interface supports

450
00:19:08,040 --> 00:19:13,030
our proof required tweaking the

451
00:19:10,480 --> 00:19:15,310
processing rules slightly in order to

452
00:19:13,030 --> 00:19:17,290
provide context separable 'ti under a

453
00:19:15,310 --> 00:19:21,179
wider set of applications in particular

454
00:19:17,290 --> 00:19:24,010
those that meet the the restrictions of

455
00:19:21,180 --> 00:19:27,040
imposed by the game by the theorem as

456
00:19:24,010 --> 00:19:29,590
for NDS a we need only to restrict the

457
00:19:27,040 --> 00:19:31,930
game's use of the interface so that key

458
00:19:29,590 --> 00:19:37,870
operations are always bound to the games

459
00:19:31,930 --> 00:19:40,320
context so our finally I our interface

460
00:19:37,870 --> 00:19:43,209
doesn't support all noise protocols

461
00:19:40,320 --> 00:19:46,240
because some would give rise to gap gap

462
00:19:43,210 --> 00:19:50,260
one attacks but in light of this so our

463
00:19:46,240 --> 00:19:52,300
work leaves security of the joint key

464
00:19:50,260 --> 00:19:56,010
reuse it's the security of key reuse in

465
00:19:52,300 --> 00:19:58,450
noise and open question still I think

466
00:19:56,010 --> 00:20:01,030
our if you're interested in key reuse

467
00:19:58,450 --> 00:20:03,700
and noise I think you should still read

468
00:20:01,030 --> 00:20:05,500
our papers because I think we found some

469
00:20:03,700 --> 00:20:07,400
interesting stuff and that's all I got

470
00:20:05,500 --> 00:20:17,360
so my time is up

471
00:20:07,400 --> 00:20:31,130
thank you very much any questions I have

472
00:20:17,360 --> 00:20:33,860
time for questions so you applied your

473
00:20:31,130 --> 00:20:36,490
results to the discrete log based

474
00:20:33,860 --> 00:20:39,500
schemes right is there any problem using

475
00:20:36,490 --> 00:20:43,790
we didn't look we looked at so we you

476
00:20:39,500 --> 00:20:45,500
know we started looking at we sigh I

477
00:20:43,790 --> 00:20:47,928
eventually landed on noise as an

478
00:20:45,500 --> 00:20:49,730
application because it it seemed like

479
00:20:47,929 --> 00:20:53,330
perfect for this setting it seemed like

480
00:20:49,730 --> 00:20:55,520
the way noise specifies protocols let's

481
00:20:53,330 --> 00:20:57,439
you let's you reason about these kinds

482
00:20:55,520 --> 00:20:59,389
of properties in a very in a very simple

483
00:20:57,440 --> 00:21:02,360
generic way I think you could of course

484
00:20:59,390 --> 00:21:04,820
apply this to you could apply this to

485
00:21:02,360 --> 00:21:06,559
any other you know set of primitives it

486
00:21:04,820 --> 00:21:08,178
would you know it would apply to RSA or

487
00:21:06,559 --> 00:21:16,178
a lot of space schemes and stuff like

488
00:21:08,179 --> 00:21:18,890
that so oh yeah yeah thank you

489
00:21:16,179 --> 00:21:22,309
if there are no more questions then

490
00:21:18,890 --> 00:21:22,940
let's thank the speaker again and see

491
00:21:22,309 --> 00:21:25,979
you at dinner

492
00:21:22,940 --> 00:21:25,979
[Applause]

