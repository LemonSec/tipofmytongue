1
00:00:05,130 --> 00:00:12,790
thank you so this is joint work with the

2
00:00:09,040 --> 00:00:15,040
cattle cows Hakone and Tibor and we're

3
00:00:12,790 --> 00:00:18,009
going to talk about a highly efficient

4
00:00:15,040 --> 00:00:20,500
key exchange protocol that we've looked

5
00:00:18,010 --> 00:00:24,580
at and we're also going to say something

6
00:00:20,500 --> 00:00:27,009
about tightness and efficiency so the

7
00:00:24,580 --> 00:00:29,049
current situation when you look at key

8
00:00:27,010 --> 00:00:31,900
exchange protocols and indeed many other

9
00:00:29,050 --> 00:00:33,730
protocols is that we have security

10
00:00:31,900 --> 00:00:38,140
proofs for a lot of these but the proofs

11
00:00:33,730 --> 00:00:40,120
are not tight in the sense that if you

12
00:00:38,140 --> 00:00:42,040
were to deploy them with what we'd call

13
00:00:40,120 --> 00:00:44,709
theoretically sound security parameters

14
00:00:42,040 --> 00:00:46,780
you would get a very slow scheme so

15
00:00:44,710 --> 00:00:48,640
people don't do that instead they deploy

16
00:00:46,780 --> 00:00:51,370
with what seems like convenient

17
00:00:48,640 --> 00:00:55,090
parameters in fact they're treating the

18
00:00:51,370 --> 00:01:03,280
security proof as a heuristic not say

19
00:00:55,090 --> 00:01:05,700
proof so what we have also is schemes

20
00:01:03,280 --> 00:01:08,380
that have what's known as tight security

21
00:01:05,700 --> 00:01:11,020
you can deploy them with the key sizes

22
00:01:08,380 --> 00:01:14,170
we use today and you get a proper

23
00:01:11,020 --> 00:01:17,470
security guarantee but as we saw with

24
00:01:14,170 --> 00:01:20,229
yes Daniel Gary last year at crypto such

25
00:01:17,470 --> 00:01:22,450
games tend to be a bit inefficient they

26
00:01:20,229 --> 00:01:25,470
are slower quite a bit slower than what

27
00:01:22,450 --> 00:01:27,700
you'd like to have even though if you

28
00:01:25,470 --> 00:01:29,709
deploy but theoretically sound

29
00:01:27,700 --> 00:01:32,259
parameters they're still faster than the

30
00:01:29,709 --> 00:01:36,160
alternatives so the question that we

31
00:01:32,259 --> 00:01:38,560
started looking at is can we get more

32
00:01:36,160 --> 00:01:44,020
efficient scheme using theoretically

33
00:01:38,560 --> 00:01:45,429
sound parameters ok so the thing we're

34
00:01:44,020 --> 00:01:49,598
talking about is implicitly

35
00:01:45,429 --> 00:01:52,690
authenticated key exchange Alice and Bob

36
00:01:49,599 --> 00:01:55,690
they want to exchange a key but in this

37
00:01:52,690 --> 00:01:57,759
model we don't really we want don't want

38
00:01:55,690 --> 00:02:00,880
to limit us to just two people we want

39
00:01:57,759 --> 00:02:04,780
lots of people so we have lots of people

40
00:02:00,880 --> 00:02:06,970
who want to exchange keys they can do

41
00:02:04,780 --> 00:02:10,149
many key exchanges between many

42
00:02:06,970 --> 00:02:11,830
different people we are going to say

43
00:02:10,149 --> 00:02:13,780
that the adversary is the one that

44
00:02:11,830 --> 00:02:15,549
schedules all these key exchanges that

45
00:02:13,780 --> 00:02:17,900
gives him more power which is good

46
00:02:15,549 --> 00:02:19,849
because if we can prove security

47
00:02:17,900 --> 00:02:23,030
against more powerful adversaries we

48
00:02:19,849 --> 00:02:27,140
have more security the adversary he can

49
00:02:23,030 --> 00:02:30,890
do key reveal which is simply learning

50
00:02:27,140 --> 00:02:32,899
some previous session key he can also do

51
00:02:30,890 --> 00:02:36,700
a test where he gets the real or the

52
00:02:32,900 --> 00:02:40,760
random key this is what he's supposed to

53
00:02:36,700 --> 00:02:42,530
decide did I now see a random string or

54
00:02:40,760 --> 00:02:46,189
did I see the key they actually agreed

55
00:02:42,530 --> 00:02:48,140
on in our model the one we prove the

56
00:02:46,189 --> 00:02:50,659
adversary is allowed to do many test

57
00:02:48,140 --> 00:02:52,548
queries why do we do that

58
00:02:50,659 --> 00:02:54,230
first of all because we can and second

59
00:02:52,549 --> 00:02:56,120
because that's very convenient when

60
00:02:54,230 --> 00:02:58,608
you're going to use your key exchange as

61
00:02:56,120 --> 00:03:00,409
a sub protocol in some other protocol

62
00:02:58,609 --> 00:03:02,359
you're analyzing then it's very

63
00:03:00,409 --> 00:03:04,700
convenient to have lots of test queries

64
00:03:02,359 --> 00:03:07,220
the adversary of course controls the

65
00:03:04,700 --> 00:03:10,578
network and the adversary can adaptively

66
00:03:07,220 --> 00:03:14,599
corrupt users so this is our adversary

67
00:03:10,579 --> 00:03:17,420
model and our goal for security and this

68
00:03:14,599 --> 00:03:21,828
is implicitly authenticated key exchange

69
00:03:17,420 --> 00:03:25,099
so if Alice somehow believes she has

70
00:03:21,829 --> 00:03:28,160
exchanged two key with Bob then Bob is

71
00:03:25,099 --> 00:03:32,750
the only one who could possibly know

72
00:03:28,160 --> 00:03:34,698
that key if he participated if Bob

73
00:03:32,750 --> 00:03:36,889
didn't participate in the key exchange

74
00:03:34,699 --> 00:03:40,280
then there's no one but Alice that knows

75
00:03:36,889 --> 00:03:44,980
the key and moreover there's only one

76
00:03:40,280 --> 00:03:49,250
instance of Bob that has this key and

77
00:03:44,980 --> 00:03:51,108
this is sufficient that the implicit

78
00:03:49,250 --> 00:03:52,819
authentication says that when you start

79
00:03:51,109 --> 00:03:55,190
using this key if you can use it

80
00:03:52,819 --> 00:03:59,478
successfully the authentication is there

81
00:03:55,190 --> 00:04:01,310
and of course to get implicit or think

82
00:03:59,479 --> 00:04:03,590
authentication this key has to look

83
00:04:01,310 --> 00:04:07,639
random to everyone who was not supposed

84
00:04:03,590 --> 00:04:09,849
to learn the key right now security

85
00:04:07,639 --> 00:04:12,440
proofs why do we have security proofs

86
00:04:09,849 --> 00:04:14,780
well the traditional form where you have

87
00:04:12,440 --> 00:04:18,199
a polynomial-time adversary gives a

88
00:04:14,780 --> 00:04:20,418
polynomial x over blah blah blah this

89
00:04:18,199 --> 00:04:22,310
ensures that your system is not let's

90
00:04:20,418 --> 00:04:24,590
call it structurally breakable there's

91
00:04:22,310 --> 00:04:26,840
no easy way to break your system that

92
00:04:24,590 --> 00:04:29,750
avoids to see the hard problem

93
00:04:26,840 --> 00:04:31,789
underlying it but still I mean it

94
00:04:29,750 --> 00:04:34,100
doesn't really help you with the one

95
00:04:31,790 --> 00:04:37,070
interesting problem namely what should I

96
00:04:34,100 --> 00:04:39,340
use as a security parameter so we have

97
00:04:37,070 --> 00:04:42,440
concrete security where you say okay

98
00:04:39,340 --> 00:04:46,729
adversary with time t1 bla bla bla bla

99
00:04:42,440 --> 00:04:48,890
bla bla bla this does allow us to say

100
00:04:46,730 --> 00:04:53,390
something about which security parameter

101
00:04:48,890 --> 00:04:56,090
should we use unfortunately a lot of our

102
00:04:53,390 --> 00:04:59,300
like I said a lot of our schemes aren't

103
00:04:56,090 --> 00:05:04,179
really tight so t2 tends to be a lot

104
00:04:59,300 --> 00:05:09,260
bigger than t1 and if you want t to

105
00:05:04,180 --> 00:05:14,360
sorry a lot smaller I should say than t1

106
00:05:09,260 --> 00:05:17,659
and if you want a really big t1 big t 2

107
00:05:14,360 --> 00:05:18,920
then you need a huge t1 and you have to

108
00:05:17,660 --> 00:05:21,020
choose yeah

109
00:05:18,920 --> 00:05:27,260
ok I'm probably messing this up but

110
00:05:21,020 --> 00:05:29,870
anyway so what we want one approach to

111
00:05:27,260 --> 00:05:32,740
do this is what we call tight security

112
00:05:29,870 --> 00:05:34,760
where t1 and t2 are essentially the same

113
00:05:32,740 --> 00:05:39,830
because then you don't have these

114
00:05:34,760 --> 00:05:43,630
problems but this tends to result in

115
00:05:39,830 --> 00:05:48,109
slow schemes so our approach in this

116
00:05:43,630 --> 00:05:49,730
paper is to make a trade-off so we're

117
00:05:48,110 --> 00:05:52,060
going to do two trade-offs we're going

118
00:05:49,730 --> 00:05:54,980
to trade off a bit of efficiency

119
00:05:52,060 --> 00:05:56,570
compared to the fastest and when we're

120
00:05:54,980 --> 00:06:00,020
talking efficiency were talking number

121
00:05:56,570 --> 00:06:02,110
of exponentiations and we're going to

122
00:06:00,020 --> 00:06:06,440
trade off a little bit of tightness and

123
00:06:02,110 --> 00:06:09,050
the result is a hugely more efficient

124
00:06:06,440 --> 00:06:13,640
protocol when you instantiate it with

125
00:06:09,050 --> 00:06:16,040
theoretically sound parameters let me

126
00:06:13,640 --> 00:06:18,409
just before I start going on to end the

127
00:06:16,040 --> 00:06:20,930
analysis of our main protocol say a few

128
00:06:18,410 --> 00:06:23,660
things about the other result in our

129
00:06:20,930 --> 00:06:25,580
paper a few other results so this

130
00:06:23,660 --> 00:06:29,240
tightness loss that we are giving

131
00:06:25,580 --> 00:06:32,210
ourselves this is for a large class of

132
00:06:29,240 --> 00:06:35,110
key exchange protocols optimal you

133
00:06:32,210 --> 00:06:38,539
cannot get away from having this

134
00:06:35,110 --> 00:06:41,330
tightness loss and we have a really nice

135
00:06:38,540 --> 00:06:43,130
proof using metal reduction techniques

136
00:06:41,330 --> 00:06:45,570
which I'm not going to talk about you'll

137
00:06:43,130 --> 00:06:48,450
have to read the paper

138
00:06:45,570 --> 00:06:51,120
we also our main protocol is going to

139
00:06:48,450 --> 00:06:53,370
depend on strong diffie-hellman this is

140
00:06:51,120 --> 00:06:55,710
an interactive assumption some people

141
00:06:53,370 --> 00:06:57,240
don't like those for those people we

142
00:06:55,710 --> 00:06:58,979
also have a few other variants that

143
00:06:57,240 --> 00:07:01,230
depend on just plain ordinary

144
00:06:58,980 --> 00:07:05,490
computational diffie-hellman or plain

145
00:07:01,230 --> 00:07:09,180
ordinary diffusion diffusion and then we

146
00:07:05,490 --> 00:07:11,640
use twinning techniques and possibly in

147
00:07:09,180 --> 00:07:16,980
combination with the commitment trick

148
00:07:11,640 --> 00:07:19,430
from yes and Niaga last year the cost

149
00:07:16,980 --> 00:07:22,860
then of course is that you get more

150
00:07:19,430 --> 00:07:24,690
exponentiations twinning basically

151
00:07:22,860 --> 00:07:27,930
doubles the number of explanations at

152
00:07:24,690 --> 00:07:29,730
some point so these have weaker

153
00:07:27,930 --> 00:07:32,190
underlying assumptions but they have

154
00:07:29,730 --> 00:07:35,610
more cost so they're not as efficient

155
00:07:32,190 --> 00:07:38,820
they're still reasonably nice compared

156
00:07:35,610 --> 00:07:41,400
to other protocols so they're still good

157
00:07:38,820 --> 00:07:43,920
just not as good as our main protocol

158
00:07:41,400 --> 00:07:47,429
and then of course you can debate how

159
00:07:43,920 --> 00:07:50,940
does strong difficult man with a faster

160
00:07:47,430 --> 00:07:53,190
protocol compare against a slightly more

161
00:07:50,940 --> 00:07:54,840
expensive protocol shouldn't you really

162
00:07:53,190 --> 00:07:56,760
increase your security parameters if

163
00:07:54,840 --> 00:07:58,919
you're using strong different instead of

164
00:07:56,760 --> 00:08:03,900
computational development there are some

165
00:07:58,919 --> 00:08:07,740
things that you can debate there which

166
00:08:03,900 --> 00:08:09,719
we haven't really looked at yet but it's

167
00:08:07,740 --> 00:08:13,860
an interesting things people who do

168
00:08:09,720 --> 00:08:15,570
algorithms might want to look at this so

169
00:08:13,860 --> 00:08:17,400
let's start with our protocol and this

170
00:08:15,570 --> 00:08:20,460
is really an old idea this is not a

171
00:08:17,400 --> 00:08:24,000
protocol this is plain diffie-hellman so

172
00:08:20,460 --> 00:08:26,070
we all know this and we all love it and

173
00:08:24,000 --> 00:08:30,450
you'll see this is not post quantum at

174
00:08:26,070 --> 00:08:32,338
all there are lots of variations if you

175
00:08:30,450 --> 00:08:34,370
add some public keys with difficult and

176
00:08:32,339 --> 00:08:36,630
you can do this static ephemeral trick

177
00:08:34,370 --> 00:08:38,520
where you take one public key you

178
00:08:36,630 --> 00:08:41,880
combine it with the other guys ephemeral

179
00:08:38,520 --> 00:08:43,500
key and vice-versa and then you hash it

180
00:08:41,880 --> 00:08:45,330
all up and now you have a nice key

181
00:08:43,500 --> 00:08:49,350
exchange protocol this is I believe key

182
00:08:45,330 --> 00:08:51,720
EA or something but obviously you don't

183
00:08:49,350 --> 00:08:53,970
have to stick with static ephemeral you

184
00:08:51,720 --> 00:08:58,530
can also put a static static sorry

185
00:08:53,970 --> 00:08:58,830
ephemeral ephemeral term in there you

186
00:08:58,530 --> 00:09:00,810
can

187
00:08:58,830 --> 00:09:03,270
put some names in there you can put some

188
00:09:00,810 --> 00:09:05,189
public keys in there and one of the

189
00:09:03,270 --> 00:09:08,790
tricks that really make the security

190
00:09:05,190 --> 00:09:11,040
proof go through is this we put the

191
00:09:08,790 --> 00:09:13,230
actual messages of the protocol in there

192
00:09:11,040 --> 00:09:15,569
that's good crypto hygiene you really

193
00:09:13,230 --> 00:09:17,220
want to do this to make sure that no one

194
00:09:15,570 --> 00:09:21,360
confuses anything and you're not doing

195
00:09:17,220 --> 00:09:24,060
something silly but it also helps our

196
00:09:21,360 --> 00:09:27,150
security proof go through without these

197
00:09:24,060 --> 00:09:28,800
two terms inside the hash we couldn't

198
00:09:27,150 --> 00:09:30,630
get the security proof to go through

199
00:09:28,800 --> 00:09:34,199
we'd get a quadratic term so our

200
00:09:30,630 --> 00:09:36,770
exponent our runtime would be would blow

201
00:09:34,200 --> 00:09:41,160
up unfortunately so this is actually a

202
00:09:36,770 --> 00:09:42,960
kind of a tricky thing but these things

203
00:09:41,160 --> 00:09:44,819
are really important inside there

204
00:09:42,960 --> 00:09:48,960
they're not just there for crypto

205
00:09:44,820 --> 00:09:51,000
hygiene okay so our proof the first

206
00:09:48,960 --> 00:09:52,950
thing we do in our proof is that we say

207
00:09:51,000 --> 00:09:56,580
well we're going to be a bit lazy with

208
00:09:52,950 --> 00:10:00,000
our random Oracle's we're just not going

209
00:09:56,580 --> 00:10:02,340
to bother evaluating them so what we do

210
00:10:00,000 --> 00:10:04,200
is when the key exchange protocol

211
00:10:02,340 --> 00:10:08,250
finishes that it needs to determine its

212
00:10:04,200 --> 00:10:10,050
key we just choose a random key and we

213
00:10:08,250 --> 00:10:15,660
don't bother querying the hash Oracle

214
00:10:10,050 --> 00:10:17,670
and when someone queries the hash Oracle

215
00:10:15,660 --> 00:10:20,719
at the appropriate point at later time

216
00:10:17,670 --> 00:10:23,910
then we just reprogram the hash Oracle

217
00:10:20,720 --> 00:10:27,360
so that the adversary sees something

218
00:10:23,910 --> 00:10:28,890
that's consistent this is a perfectly

219
00:10:27,360 --> 00:10:32,370
standard thing that we do all the time

220
00:10:28,890 --> 00:10:34,470
and the idea then our strategy for doing

221
00:10:32,370 --> 00:10:38,190
the proof is that we stop this

222
00:10:34,470 --> 00:10:40,050
reprogramming because then once you've

223
00:10:38,190 --> 00:10:41,880
stopped all the reprogramming from

224
00:10:40,050 --> 00:10:45,120
happening what happens then is that the

225
00:10:41,880 --> 00:10:47,189
adversary Heon queried the Oracle but

226
00:10:45,120 --> 00:10:49,470
the Oracle has been disconnected from

227
00:10:47,190 --> 00:10:53,340
the keys we actually choose when we

228
00:10:49,470 --> 00:10:56,370
stopped reprogramming which means the

229
00:10:53,340 --> 00:10:59,730
keys no longer come from the Oracle just

230
00:10:56,370 --> 00:11:03,630
just random strings so in our final game

231
00:10:59,730 --> 00:11:05,400
the adversary if he gets the real keys

232
00:11:03,630 --> 00:11:09,210
he gets a bunch of random strings that

233
00:11:05,400 --> 00:11:11,010
have no relation to anything how or he

234
00:11:09,210 --> 00:11:12,790
gets a bunch of random strings that are

235
00:11:11,010 --> 00:11:14,560
not related to anything which means

236
00:11:12,790 --> 00:11:17,079
trivially he doesn't have any advantage

237
00:11:14,560 --> 00:11:18,699
that's our strategy there are some

238
00:11:17,080 --> 00:11:21,730
obstacles we have to be really careful

239
00:11:18,700 --> 00:11:26,560
about making a consistent experience for

240
00:11:21,730 --> 00:11:29,650
the adversary so that when he corrupts

241
00:11:26,560 --> 00:11:33,219
too much he will be able to recover the

242
00:11:29,650 --> 00:11:35,290
keys he will be able to query the hash

243
00:11:33,220 --> 00:11:39,010
Oracle at the right place and then he

244
00:11:35,290 --> 00:11:40,949
must get the correct hash value which is

245
00:11:39,010 --> 00:11:45,069
the key that we agreed on a bit earlier

246
00:11:40,950 --> 00:11:46,840
so we have to be a bit careful there and

247
00:11:45,070 --> 00:11:49,270
that's where we need the strong

248
00:11:46,840 --> 00:11:51,610
development we need to recognize when

249
00:11:49,270 --> 00:11:55,870
the adversary is querying the hash

250
00:11:51,610 --> 00:11:58,330
Oracle at the right place and then we

251
00:11:55,870 --> 00:12:00,550
get a really nice theorem the tightness

252
00:11:58,330 --> 00:12:03,640
loss is linear in the number of users

253
00:12:00,550 --> 00:12:07,140
and as I said this is for this class of

254
00:12:03,640 --> 00:12:14,020
protocols for a large class of protocols

255
00:12:07,140 --> 00:12:16,240
this tightness loss is optimal right so

256
00:12:14,020 --> 00:12:19,740
in the security proof I'm going to very

257
00:12:16,240 --> 00:12:23,200
quickly run through a few of the cases

258
00:12:19,740 --> 00:12:25,330
you can see that either you have an

259
00:12:23,200 --> 00:12:26,830
initiator there are two in a key in a

260
00:12:25,330 --> 00:12:29,140
standard key exchange protocols there

261
00:12:26,830 --> 00:12:32,740
are two parties there's the initiator

262
00:12:29,140 --> 00:12:34,449
and there's two responder and then for

263
00:12:32,740 --> 00:12:36,070
an implicitly authenticated protocol

264
00:12:34,450 --> 00:12:38,680
there are really four cases the

265
00:12:36,070 --> 00:12:41,770
initiator he might either have a partner

266
00:12:38,680 --> 00:12:44,140
or he might not have a partner which

267
00:12:41,770 --> 00:12:48,100
means that the response that this Oracle

268
00:12:44,140 --> 00:12:49,930
gets came from the adversary well if the

269
00:12:48,100 --> 00:12:53,050
adversary might have but it doesn't come

270
00:12:49,930 --> 00:12:57,939
from an Oracle that matches or that has

271
00:12:53,050 --> 00:12:59,890
a matching conversation with us and this

272
00:12:57,940 --> 00:13:03,820
is where the obstacle happens because

273
00:12:59,890 --> 00:13:05,530
this person could become corrupted later

274
00:13:03,820 --> 00:13:07,630
which means the adversary learns it's

275
00:13:05,530 --> 00:13:11,260
long term key which means it might

276
00:13:07,630 --> 00:13:14,110
actually pair off with this guy that

277
00:13:11,260 --> 00:13:16,689
turns the session non fresh so that's

278
00:13:14,110 --> 00:13:20,970
okay but it's still in thing that we

279
00:13:16,690 --> 00:13:23,620
really have to take care not to mess up

280
00:13:20,970 --> 00:13:25,999
responder Oracle's they of course can

281
00:13:23,620 --> 00:13:27,979
have or not have a partner

282
00:13:25,999 --> 00:13:30,739
the nice thing about the responder

283
00:13:27,979 --> 00:13:32,749
Oracle's is that when they receive their

284
00:13:30,739 --> 00:13:35,539
first message we know if they're going

285
00:13:32,749 --> 00:13:40,459
to have a part or if they go if they can

286
00:13:35,539 --> 00:13:42,470
have a partner or not with initiator

287
00:13:40,459 --> 00:13:44,719
Oracle's we start by sending out a

288
00:13:42,470 --> 00:13:46,579
message and we have no idea whether

289
00:13:44,720 --> 00:13:49,249
we're going to end up with an initiator

290
00:13:46,579 --> 00:13:54,228
Oracle that has a partner or that hasn't

291
00:13:49,249 --> 00:14:00,829
got a partner and that simplifies quite

292
00:13:54,229 --> 00:14:02,749
a lot of stuff dealing with the

293
00:14:00,829 --> 00:14:04,848
initiator Oracle's that have a partner

294
00:14:02,749 --> 00:14:07,299
which we know at the time they're going

295
00:14:04,849 --> 00:14:09,829
to decide their key that's very easy

296
00:14:07,299 --> 00:14:11,689
because now you know you have a matching

297
00:14:09,829 --> 00:14:13,758
conversation so you just forget about

298
00:14:11,689 --> 00:14:17,679
all those key computation and you just

299
00:14:13,759 --> 00:14:20,539
steal the key from your partner Oracle

300
00:14:17,679 --> 00:14:23,569
so then we get rid of them there's no

301
00:14:20,539 --> 00:14:26,389
more detail to these kinds of initiator

302
00:14:23,569 --> 00:14:27,139
Oracle's anymore they take care of

303
00:14:26,389 --> 00:14:29,539
themselves

304
00:14:27,139 --> 00:14:32,839
the initiator then we deal with

305
00:14:29,539 --> 00:14:35,149
responder Oracle's responder Oracle's

306
00:14:32,839 --> 00:14:39,649
that we know will not have a partner and

307
00:14:35,149 --> 00:14:42,679
how do we do this and it's at this point

308
00:14:39,649 --> 00:14:46,119
tightness loss happens because we need

309
00:14:42,679 --> 00:14:50,569
to guess a public key where we can put

310
00:14:46,119 --> 00:14:53,869
the strongly feel man instance same so

311
00:14:50,569 --> 00:14:55,519
we guess one partner not the person that

312
00:14:53,869 --> 00:14:59,209
we're going to deal with the Oracle but

313
00:14:55,519 --> 00:15:02,089
the person that Oracle is talking to so

314
00:14:59,209 --> 00:15:05,329
we guess that guys with what we so that

315
00:15:02,089 --> 00:15:10,359
means we have one key this key we cannot

316
00:15:05,329 --> 00:15:13,939
review we do not know the key instead

317
00:15:10,359 --> 00:15:15,889
we're going to have to use this strong

318
00:15:13,939 --> 00:15:18,289
different Oracle that we have to

319
00:15:15,889 --> 00:15:21,379
recognize when the adversary could have

320
00:15:18,289 --> 00:15:23,929
done something bad and if you look

321
00:15:21,379 --> 00:15:26,449
really carefully at this query you'll

322
00:15:23,929 --> 00:15:29,569
realize that we don't know all the terms

323
00:15:26,449 --> 00:15:32,269
there but this is actually an

324
00:15:29,569 --> 00:15:35,899
interesting thing about our proof the

325
00:15:32,269 --> 00:15:39,779
adversary to be able to get this query

326
00:15:35,899 --> 00:15:41,579
right he has to guess all of the three

327
00:15:39,779 --> 00:15:44,240
both the ephemeral static the static

328
00:15:41,579 --> 00:15:47,339
ephemeral and the ephemeral ephemeral

329
00:15:44,240 --> 00:15:49,889
while we in our reduction in order to

330
00:15:47,339 --> 00:15:51,660
win we only need to get one of them

331
00:15:49,889 --> 00:15:53,160
right and that's the one we can

332
00:15:51,660 --> 00:15:58,199
recognize with our static diffie-hellman

333
00:15:53,160 --> 00:15:59,730
key okay and then when we do this we

334
00:15:58,199 --> 00:16:01,109
have to be a bit careful with the others

335
00:15:59,730 --> 00:16:04,170
so we have to set up all of the

336
00:16:01,110 --> 00:16:06,439
recognizing of everyone elses Oracle but

337
00:16:04,170 --> 00:16:10,170
then typically we have more information

338
00:16:06,439 --> 00:16:15,029
for the other guys so we get this to

339
00:16:10,170 --> 00:16:18,420
work when we do responder Oracle's that

340
00:16:15,029 --> 00:16:20,399
have a partner then we can use plain old

341
00:16:18,420 --> 00:16:23,099
decision diffie-hellman we don't need

342
00:16:20,399 --> 00:16:25,439
this recognising thing because what we

343
00:16:23,100 --> 00:16:29,730
know is that if we use decision if your

344
00:16:25,439 --> 00:16:31,829
Hellman in this case we just put the

345
00:16:29,730 --> 00:16:34,800
decision diffie-hellman real a random

346
00:16:31,829 --> 00:16:36,839
term into the hash Oracle and we know

347
00:16:34,800 --> 00:16:38,939
that this this is a random term the

348
00:16:36,839 --> 00:16:41,819
adversary is never going to query that

349
00:16:38,939 --> 00:16:43,709
your hash Oracle at that point which

350
00:16:41,819 --> 00:16:47,550
means if we ever see him querying

351
00:16:43,709 --> 00:16:51,839
anything at that point well then we know

352
00:16:47,550 --> 00:16:55,550
that this is the real thing so this is

353
00:16:51,839 --> 00:16:59,339
quite simple and again we can recognize

354
00:16:55,550 --> 00:17:06,448
when we win and the same thing for

355
00:16:59,339 --> 00:17:11,039
initiator Oracle's we can deal with all

356
00:17:06,449 --> 00:17:13,049
of the corner cases and essentially

357
00:17:11,039 --> 00:17:15,000
that's the way the proof goes there are

358
00:17:13,049 --> 00:17:17,760
some few technicalities you have to take

359
00:17:15,000 --> 00:17:20,119
care that norms azar not repeated and

360
00:17:17,760 --> 00:17:24,658
stuff in order to simplify everything

361
00:17:20,119 --> 00:17:28,530
but you end up with this nice result the

362
00:17:24,659 --> 00:17:30,299
loss in tightness is linear in in

363
00:17:28,530 --> 00:17:33,200
practice we end up that the adversaries

364
00:17:30,299 --> 00:17:37,530
key exchange the advantage is bounded by

365
00:17:33,200 --> 00:17:39,390
and the number of users times the strong

366
00:17:37,530 --> 00:17:41,700
Oracle advantage of two different

367
00:17:39,390 --> 00:17:48,260
adversaries and decisioned if you hell

368
00:17:41,700 --> 00:17:51,090
man advantage of one adversary so now

369
00:17:48,260 --> 00:17:54,800
let's see how we end up with a really

370
00:17:51,090 --> 00:17:57,780
efficient scheme here so we decided to

371
00:17:54,800 --> 00:17:59,970
do a small comparison with HM Kiwi there

372
00:17:57,780 --> 00:18:02,129
are lots of security proofs for HM QV

373
00:17:59,970 --> 00:18:04,170
and they had different tightness and it

374
00:18:02,130 --> 00:18:10,620
also depends a bit on which assumption

375
00:18:04,170 --> 00:18:12,810
you use so we said hm QE is has a

376
00:18:10,620 --> 00:18:14,989
quadratic tightness loss in the number

377
00:18:12,810 --> 00:18:18,929
of users and the number of sessions

378
00:18:14,990 --> 00:18:21,480
that's sort of the best we can find our

379
00:18:18,930 --> 00:18:24,060
protocol has a tightness loss that's

380
00:18:21,480 --> 00:18:26,760
linear in the number of users so let's

381
00:18:24,060 --> 00:18:29,060
see what the effect is we have too small

382
00:18:26,760 --> 00:18:32,280
a small scale and a large scale

383
00:18:29,060 --> 00:18:37,470
situation large-scale Facebook small

384
00:18:32,280 --> 00:18:41,899
scale any other reasonably big thing and

385
00:18:37,470 --> 00:18:46,380
when you go for a 112 bit security level

386
00:18:41,900 --> 00:18:48,150
we end up with NIST 256 bit curve is

387
00:18:46,380 --> 00:18:51,270
suitable for our protocol in a small

388
00:18:48,150 --> 00:18:56,400
scale in the large scale we have to have

389
00:18:51,270 --> 00:19:00,240
the 384 bit curved what you see here is

390
00:18:56,400 --> 00:19:04,590
that if you do the tightness loss

391
00:19:00,240 --> 00:19:07,050
computation 384 is a bit too big could

392
00:19:04,590 --> 00:19:08,820
have done it with a smaller one but this

393
00:19:07,050 --> 00:19:11,210
is the only one that's deployed if you

394
00:19:08,820 --> 00:19:12,720
were going to deploy this with today

395
00:19:11,210 --> 00:19:14,130
immediately

396
00:19:12,720 --> 00:19:15,690
you'd have to choose one of these

397
00:19:14,130 --> 00:19:18,090
standard curves and they are not

398
00:19:15,690 --> 00:19:20,640
available in every bit size you can

399
00:19:18,090 --> 00:19:23,899
imagine so that's why we have a small

400
00:19:20,640 --> 00:19:30,090
loss so this is not a perfect scaling

401
00:19:23,900 --> 00:19:34,500
but I think hm QV it's reasonable it's

402
00:19:30,090 --> 00:19:36,689
not too bad over and then we took some

403
00:19:34,500 --> 00:19:39,390
timings from OpenSSL running on one of

404
00:19:36,690 --> 00:19:41,700
our computers and you see our protocol

405
00:19:39,390 --> 00:19:46,620
is simply a lot faster when you

406
00:19:41,700 --> 00:19:49,860
instantiate it with theoretically sound

407
00:19:46,620 --> 00:19:51,330
parameters now of course if you just do

408
00:19:49,860 --> 00:19:55,649
what everyone does today and instantiate

409
00:19:51,330 --> 00:19:57,960
it with P 256 everything HM QB is faster

410
00:19:55,650 --> 00:20:01,500
than our protocol but not by a huge

411
00:19:57,960 --> 00:20:04,080
amount because our protocol requires 4

412
00:20:01,500 --> 00:20:08,250
exponentiations hm QB requires say two

413
00:20:04,080 --> 00:20:11,159
and a half so it's not it's not like our

414
00:20:08,250 --> 00:20:15,770
protocol is completely out there it is

415
00:20:11,160 --> 00:20:18,510
actually very efficient so to summarize

416
00:20:15,770 --> 00:20:20,879
there are really highly efficient

417
00:20:18,510 --> 00:20:22,650
protocols that can be instantiated with

418
00:20:20,880 --> 00:20:27,780
theoretically sound parameters namely

419
00:20:22,650 --> 00:20:31,110
our protocol with theoretically sound

420
00:20:27,780 --> 00:20:32,970
parameters we're the best wits if you

421
00:20:31,110 --> 00:20:37,709
don't care about theoretically sound

422
00:20:32,970 --> 00:20:40,740
we're still good if you look at things

423
00:20:37,710 --> 00:20:42,480
like the noise framework you find

424
00:20:40,740 --> 00:20:45,990
essentially the same thing as our

425
00:20:42,480 --> 00:20:48,570
protocol inside there except our

426
00:20:45,990 --> 00:20:51,180
protocol has a nice analysis now and

427
00:20:48,570 --> 00:20:55,110
also we've shown that our results with

428
00:20:51,180 --> 00:21:08,310
respect to tightness loss is essentially

429
00:20:55,110 --> 00:21:09,959
optimal questions thank you so we'll

430
00:21:08,310 --> 00:21:12,570
have some time for questions if you have

431
00:21:09,960 --> 00:21:16,220
questions please come up to the front

432
00:21:12,570 --> 00:21:16,220
microphone so that everyone can hear you

433
00:21:20,010 --> 00:21:26,749
[Music]

434
00:21:28,690 --> 00:21:36,130
what is the meaning of tightness because

435
00:21:33,610 --> 00:21:38,949
I mean you were doing this comparison

436
00:21:36,130 --> 00:21:45,820
between every stick and theoretically

437
00:21:38,950 --> 00:21:49,810
sound that's a good question

438
00:21:45,820 --> 00:21:53,860
I agree my interpretation is that the

439
00:21:49,810 --> 00:21:55,780
random Oracle your istic says that your

440
00:21:53,860 --> 00:21:59,110
adversary is not going to care about the

441
00:21:55,780 --> 00:22:00,639
hash Oracle the hash function he's not

442
00:21:59,110 --> 00:22:03,189
going that's not where he's going to

443
00:22:00,640 --> 00:22:05,290
mess with your key exchange protocol so

444
00:22:03,190 --> 00:22:08,500
at some point the adversary that you

445
00:22:05,290 --> 00:22:11,020
have he's going to put some value into

446
00:22:08,500 --> 00:22:12,310
the hash Oracle and he's going to sorry

447
00:22:11,020 --> 00:22:14,230
into the hash function he's going to

448
00:22:12,310 --> 00:22:17,110
simply evaluate the hash function and

449
00:22:14,230 --> 00:22:18,700
what we're doing is base what our

450
00:22:17,110 --> 00:22:21,310
adversary the adversaries that we

451
00:22:18,700 --> 00:22:24,520
construct are basically doing they are

452
00:22:21,310 --> 00:22:26,500
basically just looking at what the

453
00:22:24,520 --> 00:22:29,170
adversary is putting inside the hash or

454
00:22:26,500 --> 00:22:32,350
the hash function he's just they're just

455
00:22:29,170 --> 00:22:34,780
observing this reprogramming isn't that

456
00:22:32,350 --> 00:22:37,060
essential that's just used for there's

457
00:22:34,780 --> 00:22:40,000
an artifact of the proof but they're

458
00:22:37,060 --> 00:22:42,909
looking there and I believe that it's a

459
00:22:40,000 --> 00:22:46,240
reasonably good heuristic that's if you

460
00:22:42,910 --> 00:22:48,130
take a real adversary against a key

461
00:22:46,240 --> 00:22:51,010
exchange protocol it's going to behave

462
00:22:48,130 --> 00:22:54,850
like that so that means that this

463
00:22:51,010 --> 00:22:57,550
adversary is going to do something that

464
00:22:54,850 --> 00:23:00,219
you can observe if you mess a bit

465
00:22:57,550 --> 00:23:02,169
mess about a bit inside them and then

466
00:23:00,220 --> 00:23:04,390
you should be able to get a real

467
00:23:02,170 --> 00:23:08,050
adversary against underlying strong de

468
00:23:04,390 --> 00:23:12,420
filma that's my feeling but of course

469
00:23:08,050 --> 00:23:12,419
this is heuristic this is a bit vague

470
00:23:13,050 --> 00:23:22,540
but that's that's my interpretation of

471
00:23:15,730 --> 00:23:25,210
this Thanks all right so for the

472
00:23:22,540 --> 00:23:28,769
questions let's think Christian again

473
00:23:25,210 --> 00:23:28,769
[Applause]

