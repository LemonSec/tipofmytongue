1
00:00:04,870 --> 00:00:08,109
well thank you for the introduction and

2
00:00:06,670 --> 00:00:11,200
thanks for everyone for making this

3
00:00:08,109 --> 00:00:13,300
popular 8:50 in the morning session with

4
00:00:11,200 --> 00:00:15,969
me this is joint work with venkata

5
00:00:13,300 --> 00:00:17,590
coppola and the talk title as we have it

6
00:00:15,970 --> 00:00:19,140
is about getting chosen ciphertext

7
00:00:17,590 --> 00:00:21,640
security for attribute based encryption

8
00:00:19,140 --> 00:00:23,170
but venkata and I decided that if we

9
00:00:21,640 --> 00:00:24,460
could go back in time we'd actually

10
00:00:23,170 --> 00:00:27,460
titled it something a little bit more

11
00:00:24,460 --> 00:00:29,619
like this which emphasizes just a way of

12
00:00:27,460 --> 00:00:31,840
going generically from plain chosen

13
00:00:29,619 --> 00:00:33,580
plaintext security to chosen ciphertext

14
00:00:31,840 --> 00:00:35,920
security so that's going to actually be

15
00:00:33,580 --> 00:00:37,860
the core of our techniques and also what

16
00:00:35,920 --> 00:00:40,300
I'm going to focus on the talk today I

17
00:00:37,860 --> 00:00:42,430
imagine most people in this audience are

18
00:00:40,300 --> 00:00:44,290
already familiar with the concept of

19
00:00:42,430 --> 00:00:45,850
public key encryption we have a set up

20
00:00:44,290 --> 00:00:47,890
algorithm which generates a public and

21
00:00:45,850 --> 00:00:49,719
secret key pair where the public key can

22
00:00:47,890 --> 00:00:52,000
be used to take and take a message

23
00:00:49,719 --> 00:00:54,520
create a ciphertext with it and the

24
00:00:52,000 --> 00:00:56,200
public key and then the decryption

25
00:00:54,520 --> 00:00:57,700
algorithm takes as input the secret key

26
00:00:56,200 --> 00:01:00,700
and can be used to recover the message

27
00:00:57,700 --> 00:01:02,289
the forced the first formalized notion

28
00:01:00,700 --> 00:01:05,440
of security for public key encryption

29
00:01:02,289 --> 00:01:07,119
was due to Gould Watson McCauley who

30
00:01:05,440 --> 00:01:09,520
came up with indistinguishability under

31
00:01:07,119 --> 00:01:12,550
chosen plaintext attack and intuitively

32
00:01:09,520 --> 00:01:14,199
this says that an attacker if given a

33
00:01:12,550 --> 00:01:16,240
ciphertext of a message of its choice

34
00:01:14,200 --> 00:01:17,890
would not be able to distinguish this

35
00:01:16,240 --> 00:01:21,130
from another ciphertext let's say one of

36
00:01:17,890 --> 00:01:22,599
the all-0 string however time over time

37
00:01:21,130 --> 00:01:24,789
what we discovered is for in real life

38
00:01:22,599 --> 00:01:26,229
there's more active attackers than one

39
00:01:24,789 --> 00:01:28,750
just that just sits there and looks at

40
00:01:26,229 --> 00:01:30,670
ciphertext and to capture these in

41
00:01:28,750 --> 00:01:33,310
deployed systems we need to have a

42
00:01:30,670 --> 00:01:34,509
stronger definition and the right one

43
00:01:33,310 --> 00:01:36,670
has turned out to be something called

44
00:01:34,509 --> 00:01:39,039
chosen ciphertext security where we're

45
00:01:36,670 --> 00:01:41,380
going to give an attacker Oracle access

46
00:01:39,039 --> 00:01:43,240
to a decryption algorithm where in the

47
00:01:41,380 --> 00:01:44,800
security game we can D ask for

48
00:01:43,240 --> 00:01:47,080
decryption of any cipher texts of its

49
00:01:44,800 --> 00:01:48,340
choice other than the challenge

50
00:01:47,080 --> 00:01:52,720
ciphertext that it's trying to figure

51
00:01:48,340 --> 00:01:54,280
out ok so over time I think our

52
00:01:52,720 --> 00:01:56,289
communities actually been wrapped really

53
00:01:54,280 --> 00:01:58,899
really successful in getting chosen

54
00:01:56,289 --> 00:02:00,039
ciphertext security you know usually we

55
00:01:58,899 --> 00:02:03,280
started out with some number theoretic

56
00:02:00,039 --> 00:02:05,340
constructions of playing CPA security

57
00:02:03,280 --> 00:02:07,899
but then over time with different

58
00:02:05,340 --> 00:02:09,550
innovations pretty much for most

59
00:02:07,899 --> 00:02:11,230
assumptions I wouldn't say all them for

60
00:02:09,550 --> 00:02:14,819
most ones you think of we now have

61
00:02:11,230 --> 00:02:18,429
chosen ciphertext secure variance now

62
00:02:14,819 --> 00:02:20,109
one thing with that lohan's doing

63
00:02:18,430 --> 00:02:21,970
now one thing that we're one thing

64
00:02:20,110 --> 00:02:24,430
that's interesting though is can we

65
00:02:21,970 --> 00:02:26,379
generically go from CP 8 as to CCA

66
00:02:24,430 --> 00:02:28,599
security so I give you any CPA scheme

67
00:02:26,379 --> 00:02:30,340
never mind how it's built is there a way

68
00:02:28,599 --> 00:02:32,709
to transform it or to make a chosen

69
00:02:30,340 --> 00:02:36,519
ciphertext secure scheme from it now

70
00:02:32,709 --> 00:02:38,379
there's somewhat of a coal miner might

71
00:02:36,519 --> 00:02:40,060
have roadblocks to doing this so one

72
00:02:38,379 --> 00:02:42,399
beer the kind of weak one barrier is

73
00:02:40,060 --> 00:02:43,989
that this earlier work showed well any

74
00:02:42,400 --> 00:02:46,510
scheme that does this generically in a

75
00:02:43,989 --> 00:02:48,819
blackbox way the decryption algorithm

76
00:02:46,510 --> 00:02:49,989
must call the encryption algorithm okay

77
00:02:48,819 --> 00:02:52,599
but I'm gonna call that kind of a weak

78
00:02:49,989 --> 00:02:54,819
bury because number one you can and and

79
00:02:52,599 --> 00:02:56,738
number two most schemes actually do do

80
00:02:54,819 --> 00:02:58,810
this right like this that get chosen

81
00:02:56,739 --> 00:03:02,560
ciphertext security do something like

82
00:02:58,810 --> 00:03:04,090
that but in general I mean people you

83
00:03:02,560 --> 00:03:06,879
come and debate this a little bit but

84
00:03:04,090 --> 00:03:09,280
for going from CPA to CCA generically

85
00:03:06,879 --> 00:03:11,108
the main path the main technique we have

86
00:03:09,280 --> 00:03:14,379
is non-interactive zero knowledge proof

87
00:03:11,109 --> 00:03:15,760
and the two you know somewhat drug so

88
00:03:14,379 --> 00:03:17,530
that that's a great idea of course but

89
00:03:15,760 --> 00:03:19,810
perhaps the two drawbacks with that is a

90
00:03:17,530 --> 00:03:22,060
you need an is ik which they're not

91
00:03:19,810 --> 00:03:23,620
always so easy to come by and be the

92
00:03:22,060 --> 00:03:25,030
newzik approach needs to usually prove

93
00:03:23,620 --> 00:03:27,010
something about the encryption circuit

94
00:03:25,030 --> 00:03:30,220
gate by gate so this is a non blackbox

95
00:03:27,010 --> 00:03:34,840
technique and tends to be you know not

96
00:03:30,220 --> 00:03:36,579
as efficient due to this okay so in this

97
00:03:34,840 --> 00:03:38,319
in this talk I'm gonna we're going to

98
00:03:36,579 --> 00:03:41,500
talk about going from CPA to CCA

99
00:03:38,319 --> 00:03:43,298
generically now however in order to do

100
00:03:41,500 --> 00:03:45,010
this we have a new approach and we need

101
00:03:43,299 --> 00:03:46,870
one extra little ingredient which is a

102
00:03:45,010 --> 00:03:48,790
certain type of pseudo-random generator

103
00:03:46,870 --> 00:03:50,739
that we're going to call a hinting PRG

104
00:03:48,790 --> 00:03:52,900
so if you at the talk I'll talk about a

105
00:03:50,739 --> 00:03:54,669
construction and at the end I'll touch

106
00:03:52,900 --> 00:03:56,799
on what exactly is this little extra

107
00:03:54,669 --> 00:03:59,859
ingredient we need to be able to make

108
00:03:56,799 --> 00:04:00,849
the leap from here to here in order to

109
00:03:59,859 --> 00:04:03,190
explain things

110
00:04:00,849 --> 00:04:06,879
I'm gonna build things up I'm gonna

111
00:04:03,190 --> 00:04:08,530
build things up incremental e the first

112
00:04:06,879 --> 00:04:10,690
thing I'm gonna do is start with the CPA

113
00:04:08,530 --> 00:04:12,699
scheme and then go to another chosen

114
00:04:10,690 --> 00:04:13,900
plaintext secure scheme this one will

115
00:04:12,699 --> 00:04:16,570
have some of the structure we're going

116
00:04:13,900 --> 00:04:18,699
to need later on and then I'm going to

117
00:04:16,570 --> 00:04:20,228
go to chosen ciphertext security one

118
00:04:18,699 --> 00:04:22,330
which essentially means that all

119
00:04:20,228 --> 00:04:24,370
decryption queries must be before the

120
00:04:22,330 --> 00:04:25,719
challenge ciphertext and as far as going

121
00:04:24,370 --> 00:04:29,979
to the full result we're just going to

122
00:04:25,720 --> 00:04:32,110
punt this to the paper okay so as warm

123
00:04:29,979 --> 00:04:33,969
up we're going to go from CPA to CPA

124
00:04:32,110 --> 00:04:35,950
and I'll warn you on its own it might

125
00:04:33,970 --> 00:04:37,720
look a little bit odd it won't make

126
00:04:35,950 --> 00:04:40,570
sense why you'd want to just do this for

127
00:04:37,720 --> 00:04:41,740
a chosen plaintext secure scheme but the

128
00:04:40,570 --> 00:04:44,260
point is we're going to be laying out

129
00:04:41,740 --> 00:04:46,390
the structure for what we're doing okay

130
00:04:44,260 --> 00:04:48,280
so let's think of n as our security

131
00:04:46,390 --> 00:04:51,039
parameter and to build our scheme we're

132
00:04:48,280 --> 00:04:53,380
gonna create n pairs or two times n

133
00:04:51,040 --> 00:04:55,690
public key and secret public keys and

134
00:04:53,380 --> 00:04:57,909
secret keys okay so we're gonna have

135
00:04:55,690 --> 00:05:00,310
what I would think of as like a zero row

136
00:04:57,910 --> 00:05:03,220
with the public keys and the run row and

137
00:05:00,310 --> 00:05:04,870
well I'll keep this layout as a theme

138
00:05:03,220 --> 00:05:06,490
throughout the talk and we're gonna also

139
00:05:04,870 --> 00:05:08,620
generate the corresponding secret keys

140
00:05:06,490 --> 00:05:10,750
the first thing we can do is actually

141
00:05:08,620 --> 00:05:12,940
just delete we're only going to need the

142
00:05:10,750 --> 00:05:14,740
zero of the secret keys so there's gonna

143
00:05:12,940 --> 00:05:16,300
be our public keys our public key is

144
00:05:14,740 --> 00:05:18,370
going to consist of all these two times

145
00:05:16,300 --> 00:05:22,750
and sub public keys and our secret key

146
00:05:18,370 --> 00:05:24,670
would be n of these secret keys okay so

147
00:05:22,750 --> 00:05:26,620
let's let's look at how encryption is

148
00:05:24,670 --> 00:05:28,030
done the first thing you're going to do

149
00:05:26,620 --> 00:05:30,190
is you're going to choose a random seed

150
00:05:28,030 --> 00:05:32,289
s let's say have n bits and you're going

151
00:05:30,190 --> 00:05:34,540
to run s into a PRG

152
00:05:32,290 --> 00:05:36,910
I'm going to call this H and this is

153
00:05:34,540 --> 00:05:38,050
going to give you a value Z 0 so we're

154
00:05:36,910 --> 00:05:40,570
going to take the message we want to

155
00:05:38,050 --> 00:05:43,930
encrypt and blind it by Z 0 like XOR it

156
00:05:40,570 --> 00:05:45,670
in with with Z 0 now for someone to be

157
00:05:43,930 --> 00:05:48,490
able to decrypt we have to communicate s

158
00:05:45,670 --> 00:05:50,980
somehow ok and the way we're going to do

159
00:05:48,490 --> 00:05:53,410
this is in a bit by bit encryption and

160
00:05:50,980 --> 00:05:55,480
also an almost what you think of as an

161
00:05:53,410 --> 00:05:57,790
extra redundant way it's a little

162
00:05:55,480 --> 00:05:59,800
strange so just imagine that for each

163
00:05:57,790 --> 00:06:02,740
bit let's say the first bit I'm going to

164
00:05:59,800 --> 00:06:05,680
crypt imagine just the string know in

165
00:06:02,740 --> 00:06:07,180
the in the first index in 0th position

166
00:06:05,680 --> 00:06:09,940
I'm going to encrypt an O to say no the

167
00:06:07,180 --> 00:06:12,070
first bit is not 1 and then yes it is a

168
00:06:09,940 --> 00:06:14,440
0 and for the second bit yes it is a 0

169
00:06:12,070 --> 00:06:15,909
and no it's not a 1 you know it's a bit

170
00:06:14,440 --> 00:06:17,530
strange as it is but that's the way

171
00:06:15,910 --> 00:06:19,270
we're going to do it so we're gonna just

172
00:06:17,530 --> 00:06:21,489
keep on doing this bit by bit in our

173
00:06:19,270 --> 00:06:25,530
slide here we're gonna imagine that n is

174
00:06:21,490 --> 00:06:30,280
4 4 bits for a presentation purposes ok

175
00:06:25,530 --> 00:06:34,570
now so that's an encryption we have the

176
00:06:30,280 --> 00:06:37,390
message blinded by Z 0 and these sort of

177
00:06:34,570 --> 00:06:39,460
yes/no ways of encoding s and to decrypt

178
00:06:37,390 --> 00:06:41,169
is pretty simple right you just you have

179
00:06:39,460 --> 00:06:42,760
all these zero keys in the index so

180
00:06:41,170 --> 00:06:45,430
we're actually going to decrypt just

181
00:06:42,760 --> 00:06:46,000
using this top row and essentially just

182
00:06:45,430 --> 00:06:49,030
ignore it

183
00:06:46,000 --> 00:06:50,860
bottom-1 and we can learn si if there's

184
00:06:49,030 --> 00:06:52,330
a no I assume it's a one and if it's yes

185
00:06:50,860 --> 00:06:56,440
it's a zero so I go through the index by

186
00:06:52,330 --> 00:06:57,940
index and I can recover s and then once

187
00:06:56,440 --> 00:07:01,380
I have this I can run s through the

188
00:06:57,940 --> 00:07:04,180
pseudo-random generator once again and

189
00:07:01,380 --> 00:07:06,670
and recover Z zero and then recover the

190
00:07:04,180 --> 00:07:09,730
message by XOR in it out so this is not

191
00:07:06,670 --> 00:07:11,470
too difficult as it is okay and the

192
00:07:09,730 --> 00:07:13,750
security proof for just the CPA scheme

193
00:07:11,470 --> 00:07:15,190
is pretty simple what we're going to do

194
00:07:13,750 --> 00:07:16,840
though and when what's going to be

195
00:07:15,190 --> 00:07:18,880
useful later on is we're going to

196
00:07:16,840 --> 00:07:21,549
essentially want to erase information

197
00:07:18,880 --> 00:07:25,990
about s if we erase information about s

198
00:07:21,550 --> 00:07:27,400
we we can hide em right and the way

199
00:07:25,990 --> 00:07:30,970
we're going to erase information about s

200
00:07:27,400 --> 00:07:32,260
is we're going to we're going to instead

201
00:07:30,970 --> 00:07:34,030
of we're going to essentially add

202
00:07:32,260 --> 00:07:37,450
disinformation so we're going to do a

203
00:07:34,030 --> 00:07:39,280
hybrid via CPA security to say yes it

204
00:07:37,450 --> 00:07:41,200
yes the first bit was a zero and yes the

205
00:07:39,280 --> 00:07:43,869
first bit was a one and essentially say

206
00:07:41,200 --> 00:07:45,159
it's both things this is sort of an

207
00:07:43,870 --> 00:07:47,140
encoding technique that I got inspired

208
00:07:45,160 --> 00:07:49,210
from Gargan

209
00:07:47,140 --> 00:07:52,060
haja body from a paper about a year ago

210
00:07:49,210 --> 00:07:53,650
where they used this I thought what

211
00:07:52,060 --> 00:07:56,590
becomes a clever idea for trap door

212
00:07:53,650 --> 00:07:59,710
functions of adding disinformation right

213
00:07:56,590 --> 00:08:02,440
although I won't go further into exactly

214
00:07:59,710 --> 00:08:03,909
how they did their thing okay so you add

215
00:08:02,440 --> 00:08:06,940
yes yes yes and then when the

216
00:08:03,910 --> 00:08:09,700
information about s is gone I will kind

217
00:08:06,940 --> 00:08:12,280
of do in the cci proof will do things a

218
00:08:09,700 --> 00:08:13,960
little bit differently and then once the

219
00:08:12,280 --> 00:08:16,630
information about s is gone we can use

220
00:08:13,960 --> 00:08:19,630
PRG security to hide information about

221
00:08:16,630 --> 00:08:22,990
the message m okay so that's a pretty

222
00:08:19,630 --> 00:08:24,850
simple proof as it is okay of course

223
00:08:22,990 --> 00:08:27,430
this is only just warming up towards

224
00:08:24,850 --> 00:08:30,010
chosen ciphertext security so let's see

225
00:08:27,430 --> 00:08:32,260
how that works to do this we're going to

226
00:08:30,010 --> 00:08:33,909
have three building blocks the first

227
00:08:32,260 --> 00:08:36,280
thing is the chosen plaintext scheme I

228
00:08:33,909 --> 00:08:38,620
should like the with the sub ciphertext

229
00:08:36,280 --> 00:08:40,179
I showed you earlier we're going to use

230
00:08:38,620 --> 00:08:42,940
that again but it's going to have this

231
00:08:40,179 --> 00:08:44,560
additional property where if you

232
00:08:42,940 --> 00:08:46,720
happened instead of having the secret

233
00:08:44,560 --> 00:08:48,579
key if you happen to have the randomness

234
00:08:46,720 --> 00:08:50,650
used for encryption you can also recover

235
00:08:48,580 --> 00:08:52,150
the message and it's not it's not too

236
00:08:50,650 --> 00:08:54,400
hard to show that this property is

237
00:08:52,150 --> 00:08:56,770
buildable in a very easy way from

238
00:08:54,400 --> 00:08:57,880
regular CPA security the second thing

239
00:08:56,770 --> 00:08:59,529
we're going to do is going to we're

240
00:08:57,880 --> 00:09:01,060
going to have a PR gh

241
00:08:59,529 --> 00:09:03,220
that's gonna have this hinting property

242
00:09:01,060 --> 00:09:05,529
that I'm going to talk about at the very

243
00:09:03,220 --> 00:09:06,610
end and finally we didn't explained it a

244
00:09:05,529 --> 00:09:08,370
little differently than this in the

245
00:09:06,610 --> 00:09:12,879
original paper we're going to have a

246
00:09:08,370 --> 00:09:15,069
commitment scheme that is equivocal okay

247
00:09:12,879 --> 00:09:17,079
and that's also build from pseudo-random

248
00:09:15,069 --> 00:09:18,459
generators okay so a bit a bit

249
00:09:17,079 --> 00:09:19,059
commitment scheme is going to work as

250
00:09:18,459 --> 00:09:20,888
follows

251
00:09:19,059 --> 00:09:22,959
there's going to be a set up algorithm

252
00:09:20,889 --> 00:09:24,459
and a commitment algorithm the set up

253
00:09:22,959 --> 00:09:25,899
algorithm outputs and public parameters

254
00:09:24,459 --> 00:09:27,819
commitment algorithm takes as input

255
00:09:25,899 --> 00:09:29,920
public parameters message is and some

256
00:09:27,819 --> 00:09:31,719
randomness for the commitment it's going

257
00:09:29,920 --> 00:09:35,110
to be hiding the commitment should not

258
00:09:31,720 --> 00:09:37,509
reveal the message binding it should be

259
00:09:35,110 --> 00:09:40,779
hard to produce openings for different

260
00:09:37,509 --> 00:09:42,040
messages and also equivocal in that we

261
00:09:40,779 --> 00:09:43,240
can generate the parameters in a

262
00:09:42,040 --> 00:09:45,399
different way than the normal setup

263
00:09:43,240 --> 00:09:46,660
which actually does allow a commitment

264
00:09:45,399 --> 00:09:49,149
to both a 0 and a 1

265
00:09:46,660 --> 00:09:50,259
but the WAM the the way I create these

266
00:09:49,149 --> 00:09:54,339
parameters should be indistinguishable

267
00:09:50,259 --> 00:09:56,980
from the normal mode okay so let's let's

268
00:09:54,339 --> 00:09:58,059
build the scheme public team the public

269
00:09:56,980 --> 00:10:00,069
and secret keys for the scheme are

270
00:09:58,059 --> 00:10:01,600
essentially the same as before but I'm

271
00:10:00,069 --> 00:10:02,920
just gonna add the public parameters for

272
00:10:01,600 --> 00:10:06,149
the commitment scheme in there otherwise

273
00:10:02,920 --> 00:10:09,250
they're the same as what you just saw

274
00:10:06,149 --> 00:10:11,740
next for encryption the high level ideas

275
00:10:09,250 --> 00:10:13,959
are in addition to encrypting the see

276
00:10:11,740 --> 00:10:15,850
des as before we're going to commit to a

277
00:10:13,959 --> 00:10:17,518
bit by bit and then we're going to add a

278
00:10:15,850 --> 00:10:20,470
lot of checks to prevent malicious

279
00:10:17,519 --> 00:10:22,540
ciphertext or mate or at least limit the

280
00:10:20,470 --> 00:10:24,790
damage that they can do in the CCA game

281
00:10:22,540 --> 00:10:26,290
and then along with this we're gonna

282
00:10:24,790 --> 00:10:29,259
have a more elaborate way of saying yes

283
00:10:26,290 --> 00:10:31,240
or no okay so let's let's see how the

284
00:10:29,259 --> 00:10:33,600
encryption scheme works going to do

285
00:10:31,240 --> 00:10:36,149
things as before but also choose

286
00:10:33,600 --> 00:10:39,670
randomness for the commitments so N and

287
00:10:36,149 --> 00:10:42,329
random so x1 through xn are going to be

288
00:10:39,670 --> 00:10:45,969
the randomness for the commitments and

289
00:10:42,329 --> 00:10:47,620
when so we're gonna have yes - no

290
00:10:45,970 --> 00:10:51,220
encoding is FS and bit rise commitments

291
00:10:47,620 --> 00:10:55,779
for for each of them so over here we're

292
00:10:51,220 --> 00:10:58,209
going to have commitment - 1 0 1 0 under

293
00:10:55,779 --> 00:11:03,040
the strings under there animus x1 x2 x3

294
00:10:58,209 --> 00:11:04,179
x4 and now in order to say now in

295
00:11:03,040 --> 00:11:06,699
addition to saying yes and no like

296
00:11:04,179 --> 00:11:09,129
before when we say yes we kind of do yes

297
00:11:06,699 --> 00:11:12,519
but then also give as the message the

298
00:11:09,129 --> 00:11:13,420
commitment randomest x1 and x2 and so on

299
00:11:12,519 --> 00:11:15,460
and so forth

300
00:11:13,420 --> 00:11:16,959
so the no values would be done as before

301
00:11:15,460 --> 00:11:20,110
the yes values are going to be done a

302
00:11:16,960 --> 00:11:22,090
little bit differently and moreover for

303
00:11:20,110 --> 00:11:23,740
the we can expand things even a little

304
00:11:22,090 --> 00:11:25,540
further we're going to imagine that our

305
00:11:23,740 --> 00:11:28,690
PRG in addition to just giving us this

306
00:11:25,540 --> 00:11:33,130
blinding value z0 is actually going to

307
00:11:28,690 --> 00:11:35,470
give us randomness for the encryption so

308
00:11:33,130 --> 00:11:38,740
these would be the Z 1 through Zn so

309
00:11:35,470 --> 00:11:40,960
here the X values are the randomness for

310
00:11:38,740 --> 00:11:43,300
The Commitments which are the messages

311
00:11:40,960 --> 00:11:44,680
of the little encryption schemes and the

312
00:11:43,300 --> 00:11:47,530
Z values are going to be used as the

313
00:11:44,680 --> 00:11:50,050
random coins for this the sub ciphertext

314
00:11:47,530 --> 00:11:51,850
now the note the no ciphertext will also

315
00:11:50,050 --> 00:11:53,910
have randomness here but it's just

316
00:11:51,850 --> 00:11:59,040
freshly chosen it's not related to this

317
00:11:53,910 --> 00:12:01,719
it's not related to this P or G value ok

318
00:11:59,040 --> 00:12:04,000
ok now let me see let's let's see how

319
00:12:01,720 --> 00:12:06,130
I'm decryption works just by example so

320
00:12:04,000 --> 00:12:08,620
what I'm going to do is remember I have

321
00:12:06,130 --> 00:12:10,600
the all zeros key or I have the the zero

322
00:12:08,620 --> 00:12:12,820
half of the ciphertext so what I can do

323
00:12:10,600 --> 00:12:15,790
is I can use my decryption keys to

324
00:12:12,820 --> 00:12:17,470
recover what's up here and I can use

325
00:12:15,790 --> 00:12:20,680
this to map into it what I'll call a

326
00:12:17,470 --> 00:12:22,570
candidate s value so if I see a no I can

327
00:12:20,680 --> 00:12:26,650
say well no ok it's not a zero so that

328
00:12:22,570 --> 00:12:29,230
must be a 1 and this one claims to be a

329
00:12:26,650 --> 00:12:31,569
claims to be a zero so I'll write that

330
00:12:29,230 --> 00:12:34,330
down and so on and so forth so now I

331
00:12:31,570 --> 00:12:37,360
recovered s at this point but I can't

332
00:12:34,330 --> 00:12:39,160
trust that the ciphertext was I can't

333
00:12:37,360 --> 00:12:41,740
trust that what I did was a good thing

334
00:12:39,160 --> 00:12:43,480
or can't lead to some attack instead of

335
00:12:41,740 --> 00:12:45,460
just using this s value what I want to

336
00:12:43,480 --> 00:12:47,920
do now is do some sanity checks on it

337
00:12:45,460 --> 00:12:50,110
then in order to do the sanity check the

338
00:12:47,920 --> 00:12:51,880
first thing I do is I plug the possible

339
00:12:50,110 --> 00:12:53,200
s value like at this point I'd hacker

340
00:12:51,880 --> 00:12:57,220
for example could have given me two

341
00:12:53,200 --> 00:12:59,440
knows or you know try two or give me a

342
00:12:57,220 --> 00:13:02,200
wrong commitment I'm going to take this

343
00:12:59,440 --> 00:13:04,930
s value plug it into the peer the PRG

344
00:13:02,200 --> 00:13:07,210
get the z1 through z ends and i can

345
00:13:04,930 --> 00:13:08,589
check each of them the first thing I can

346
00:13:07,210 --> 00:13:11,740
do is use this randomness to try to

347
00:13:08,590 --> 00:13:13,660
recover the X values to check all the

348
00:13:11,740 --> 00:13:15,760
commitments that's the first thing I'm

349
00:13:13,660 --> 00:13:17,980
going to do and the second thing I'm

350
00:13:15,760 --> 00:13:19,930
gonna do is actually now that I have the

351
00:13:17,980 --> 00:13:22,540
claim randomness I'm going to re-encrypt

352
00:13:19,930 --> 00:13:24,280
at least all these yes values not to no

353
00:13:22,540 --> 00:13:26,589
ones I'm gonna re encrypt my them myself

354
00:13:24,280 --> 00:13:27,579
and see that they actually match up with

355
00:13:26,590 --> 00:13:30,240
the cipher

356
00:13:27,580 --> 00:13:32,380
so this is actually using rien Krypton

357
00:13:30,240 --> 00:13:34,750
which has been used in other contexts

358
00:13:32,380 --> 00:13:38,470
like fugu Saki Okamoto and other ways in

359
00:13:34,750 --> 00:13:41,230
order to check validity of the

360
00:13:38,470 --> 00:13:43,810
ciphertext themselves okay so so really

361
00:13:41,230 --> 00:13:45,130
to sanity checks you recover the X

362
00:13:43,810 --> 00:13:48,160
values you check first check the

363
00:13:45,130 --> 00:13:50,290
commitments then you check the at least

364
00:13:48,160 --> 00:13:53,380
half of the encryptions the half that

365
00:13:50,290 --> 00:13:55,540
you can now you might ask well why why

366
00:13:53,380 --> 00:13:56,980
go through this whole you know what why

367
00:13:55,540 --> 00:14:01,170
would we bother going through this whole

368
00:13:56,980 --> 00:14:03,520
process of you know all these checks and

369
00:14:01,170 --> 00:14:06,699
it's really comes through this first

370
00:14:03,520 --> 00:14:10,090
step of the security proof as I told as

371
00:14:06,700 --> 00:14:11,470
I explained things in the actual scheme

372
00:14:10,090 --> 00:14:13,630
we're going to use the zero version of

373
00:14:11,470 --> 00:14:16,180
the secret key right we this really for

374
00:14:13,630 --> 00:14:18,220
each pair of public for each index

375
00:14:16,180 --> 00:14:19,660
there's a one for a zero version and a

376
00:14:18,220 --> 00:14:22,240
one version I'm saying use the zero

377
00:14:19,660 --> 00:14:24,969
version all the way across it turns out

378
00:14:22,240 --> 00:14:28,510
that after we do all those checks what

379
00:14:24,970 --> 00:14:31,090
you can do is you can use the secret key

380
00:14:28,510 --> 00:14:33,069
according to any string these checks

381
00:14:31,090 --> 00:14:35,740
mean that attacker can't tell what

382
00:14:33,070 --> 00:14:38,230
secret key were with secret key half for

383
00:14:35,740 --> 00:14:40,870
each index you're using when your

384
00:14:38,230 --> 00:14:42,070
decryption if you do all these checks so

385
00:14:40,870 --> 00:14:44,200
the first thing we're gonna do is

386
00:14:42,070 --> 00:14:46,030
actually if we let s star be the seed

387
00:14:44,200 --> 00:14:48,190
for the child ciphertext we're gonna do

388
00:14:46,030 --> 00:14:50,770
a hybrid stuff in a security proof where

389
00:14:48,190 --> 00:14:52,810
the decryption Oracle will now decrypt

390
00:14:50,770 --> 00:14:55,090
along as star instead of the all-0

391
00:14:52,810 --> 00:14:56,829
string and if it was succeeding and

392
00:14:55,090 --> 00:14:59,580
breaking the scheme before it should

393
00:14:56,830 --> 00:15:02,710
still be succeeding after doing this

394
00:14:59,580 --> 00:15:04,390
after doing this switch okay that's

395
00:15:02,710 --> 00:15:05,860
that's the first step and then the

396
00:15:04,390 --> 00:15:07,600
second thing we're gonna do is change

397
00:15:05,860 --> 00:15:09,490
the commitments to be equivocal so

398
00:15:07,600 --> 00:15:11,260
there's like for each one there's a coin

399
00:15:09,490 --> 00:15:13,510
x one that will let's say open it to one

400
00:15:11,260 --> 00:15:16,089
and a coin X 1 prime that will open it

401
00:15:13,510 --> 00:15:17,319
to 0 we're gonna then change this is a

402
00:15:16,089 --> 00:15:18,790
high-level overview that there's a

403
00:15:17,320 --> 00:15:20,110
little more details to these steps so

404
00:15:18,790 --> 00:15:22,300
we're gonna have an opening for both the

405
00:15:20,110 --> 00:15:26,380
0 and a 1 and then we're going to use

406
00:15:22,300 --> 00:15:28,270
CPA security to actually put that value

407
00:15:26,380 --> 00:15:29,380
in there so this is equivalent to me

408
00:15:28,270 --> 00:15:31,689
saying yes it's a 0

409
00:15:29,380 --> 00:15:34,810
and yes it's a 1 yes it's a 0 and yes

410
00:15:31,690 --> 00:15:37,630
it's a 1 I'll do this for each little

411
00:15:34,810 --> 00:15:41,109
part adding this disinformation to lose

412
00:15:37,630 --> 00:15:43,450
to lose information about s

413
00:15:41,110 --> 00:15:45,870
now okay at this point it looks like all

414
00:15:43,450 --> 00:15:47,740
information about s is gone right like I

415
00:15:45,870 --> 00:15:49,990
least in the message space all

416
00:15:47,740 --> 00:15:52,330
information about s is gone and it looks

417
00:15:49,990 --> 00:15:54,130
like you know we're pretty much done

418
00:15:52,330 --> 00:15:56,620
here right we can plug in the same

419
00:15:54,130 --> 00:15:58,900
arguments before and however there's one

420
00:15:56,620 --> 00:16:01,090
little catch in and this is a little

421
00:15:58,900 --> 00:16:03,280
this is a bit subtle that there's still

422
00:16:01,090 --> 00:16:06,880
as information hanging around about s in

423
00:16:03,280 --> 00:16:08,050
the random coins here right because here

424
00:16:06,880 --> 00:16:10,090
the random coins with this thing are

425
00:16:08,050 --> 00:16:11,530
just freshly random chosen and the

426
00:16:10,090 --> 00:16:14,320
random coins here are derived from

427
00:16:11,530 --> 00:16:17,110
running this PRG on s and if you follow

428
00:16:14,320 --> 00:16:20,110
it if you follow it you see this kind of

429
00:16:17,110 --> 00:16:21,880
the fact that there's a zero it's in the

430
00:16:20,110 --> 00:16:25,120
one position here in the zero position

431
00:16:21,880 --> 00:16:29,050
here and so on and and so on and so

432
00:16:25,120 --> 00:16:30,400
forth now there's really this lingering

433
00:16:29,050 --> 00:16:33,280
information it's kind of annoying about

434
00:16:30,400 --> 00:16:35,709
s and we need to get rid of it we want

435
00:16:33,280 --> 00:16:38,439
to be able to go from that to something

436
00:16:35,710 --> 00:16:40,840
where there let's say all fresh all

437
00:16:38,440 --> 00:16:42,850
fresh coins and essentially the way we

438
00:16:40,840 --> 00:16:46,030
get rid of it is by the security game of

439
00:16:42,850 --> 00:16:48,700
the hinting PRG it essentially it does

440
00:16:46,030 --> 00:16:51,790
this for us okay well let me explain

441
00:16:48,700 --> 00:16:53,680
what these hinting prgs do we can think

442
00:16:51,790 --> 00:16:56,410
of it as going from n to n square n

443
00:16:53,680 --> 00:17:00,489
squared bits or n different blocks each

444
00:16:56,410 --> 00:17:02,079
of length n bits and so here's the

445
00:17:00,490 --> 00:17:04,449
security game we have imagine a

446
00:17:02,080 --> 00:17:06,010
challenger takes the random seed s runs

447
00:17:04,449 --> 00:17:07,959
it through the PRG and gives you Z 1

448
00:17:06,010 --> 00:17:09,190
through Zn I'm gonna throw out the Z 0

449
00:17:07,959 --> 00:17:11,650
value just for simplicity

450
00:17:09,190 --> 00:17:13,510
all right then it also chooses ran just

451
00:17:11,650 --> 00:17:16,120
completely freshly random blocks v1

452
00:17:13,510 --> 00:17:18,190
through VN each of these is n bits what

453
00:17:16,119 --> 00:17:21,810
we're going to do is we're going to swap

454
00:17:18,190 --> 00:17:23,890
zi and VI if si is equal to 1

455
00:17:21,810 --> 00:17:27,669
essentially here we're going to place

456
00:17:23,890 --> 00:17:29,320
the Z the Z blocks according to the

457
00:17:27,670 --> 00:17:31,240
string s so the first bit was 1 we're

458
00:17:29,320 --> 00:17:33,220
placing this one here then we're putting

459
00:17:31,240 --> 00:17:35,050
the second one there and then the third

460
00:17:33,220 --> 00:17:37,870
bit is a 0 so we're gonna put it up top

461
00:17:35,050 --> 00:17:39,790
we're gonna arrange it in this way which

462
00:17:37,870 --> 00:17:41,850
really Maps pretty much directly with

463
00:17:39,790 --> 00:17:44,470
the way I way I had the scheme and the

464
00:17:41,850 --> 00:17:46,419
question is can an attacker distinguish

465
00:17:44,470 --> 00:17:50,680
this distribution from one where all

466
00:17:46,420 --> 00:17:53,890
these two times n blocks are just chosen

467
00:17:50,680 --> 00:17:55,750
uniformly at random right

468
00:17:53,890 --> 00:17:57,310
and that's why we called a hinting PRG

469
00:17:55,750 --> 00:18:01,390
because the layout of where the Z's are

470
00:17:57,310 --> 00:18:04,179
an extra an extra hint I'm so good news

471
00:18:01,390 --> 00:18:06,100
is that we actually can we actually can

472
00:18:04,180 --> 00:18:07,510
generate these from standard number

473
00:18:06,100 --> 00:18:09,370
theoretic assumptions we do it from

474
00:18:07,510 --> 00:18:11,710
learning with errors computational

475
00:18:09,370 --> 00:18:13,149
diffie-hellman the constructions

476
00:18:11,710 --> 00:18:15,190
followed pretty directly from some

477
00:18:13,150 --> 00:18:17,380
earlier work on similar similar

478
00:18:15,190 --> 00:18:20,440
mechanisms were used in a laconic OTE or

479
00:18:17,380 --> 00:18:23,080
a committee and hash batch could this

480
00:18:20,440 --> 00:18:24,400
type of work but one differentiating

481
00:18:23,080 --> 00:18:27,909
point is those works needed some

482
00:18:24,400 --> 00:18:28,990
asymmetric cryptography at their core so

483
00:18:27,910 --> 00:18:31,090
while we can do number theoretic

484
00:18:28,990 --> 00:18:33,910
assumptions you know we could also just

485
00:18:31,090 --> 00:18:36,699
take an aes base PRG and hope it's

486
00:18:33,910 --> 00:18:39,940
printing secure and you know it seems

487
00:18:36,700 --> 00:18:44,230
like it would be but what one can't get

488
00:18:39,940 --> 00:18:46,030
number theoretic proofs there okay so

489
00:18:44,230 --> 00:18:48,490
this is an overview of what we did we

490
00:18:46,030 --> 00:18:51,310
had a process a new generic way of going

491
00:18:48,490 --> 00:18:53,470
from CPA to CCA security and the only

492
00:18:51,310 --> 00:18:55,659
thing not implied just by public key

493
00:18:53,470 --> 00:18:57,550
encryption was this additional hinting

494
00:18:55,660 --> 00:18:59,950
PRG and of course it's pretty

495
00:18:57,550 --> 00:19:01,419
tantalizing to think you know could you

496
00:18:59,950 --> 00:19:02,740
just somehow get that from public key

497
00:19:01,420 --> 00:19:06,460
encryption or pseudo-random generators

498
00:19:02,740 --> 00:19:10,870
or or something like that I don't it's

499
00:19:06,460 --> 00:19:13,480
still kind of tough and I like to wrap

500
00:19:10,870 --> 00:19:16,149
up I just tying it together tying things

501
00:19:13,480 --> 00:19:17,800
together some other some other works

502
00:19:16,150 --> 00:19:20,260
here I mentioned earlier there's this

503
00:19:17,800 --> 00:19:22,300
work of hajji body and Garg on trapdoor

504
00:19:20,260 --> 00:19:23,560
functions there was also follow up work

505
00:19:22,300 --> 00:19:26,409
to theirs that was concurrent to ours

506
00:19:23,560 --> 00:19:29,190
that improve these trapdoor functions in

507
00:19:26,410 --> 00:19:31,510
a way I think it appeared recently

508
00:19:29,190 --> 00:19:33,850
interesting part about the construction

509
00:19:31,510 --> 00:19:35,800
is we would cover random we do that we

510
00:19:33,850 --> 00:19:38,050
do do this like fugu sake Okamoto or

511
00:19:35,800 --> 00:19:39,250
lastly chapter function or whatever way

512
00:19:38,050 --> 00:19:41,770
of we're covering randomness and we

513
00:19:39,250 --> 00:19:44,020
encrypting but we don't recover all the

514
00:19:41,770 --> 00:19:45,970
randomness those no cipher texts we

515
00:19:44,020 --> 00:19:48,090
don't encrypt it we don't recover it and

516
00:19:45,970 --> 00:19:50,500
I'll argue this is actually a good thing

517
00:19:48,090 --> 00:19:52,060
the limitations are work is we don't get

518
00:19:50,500 --> 00:19:53,890
a trapdoor function but maybe this is a

519
00:19:52,060 --> 00:19:57,310
good thing right like we don't want to

520
00:19:53,890 --> 00:19:59,950
run into those impossibility results in

521
00:19:57,310 --> 00:20:01,600
doing it the transformation works

522
00:19:59,950 --> 00:20:04,420
equally well for a chip based encryption

523
00:20:01,600 --> 00:20:06,520
which is why I think we kind of use the

524
00:20:04,420 --> 00:20:07,480
title that ended ourselves in the a tree

525
00:20:06,520 --> 00:20:10,210
based encryption

526
00:20:07,480 --> 00:20:11,769
session the talk so almost the same

527
00:20:10,210 --> 00:20:12,880
construction you could just plug into at

528
00:20:11,769 --> 00:20:15,370
you a based encryption and would give

529
00:20:12,880 --> 00:20:18,190
you the right thing a neat thing is that

530
00:20:15,370 --> 00:20:19,899
works they've already built on this so I

531
00:20:18,190 --> 00:20:21,789
think tomorrow we're gonna see something

532
00:20:19,899 --> 00:20:24,939
on reasonable designated verify musics

533
00:20:21,789 --> 00:20:28,240
that need to use our particular CCA

534
00:20:24,940 --> 00:20:29,799
structure to get there to get the result

535
00:20:28,240 --> 00:20:32,230
is you know what want one piece of

536
00:20:29,799 --> 00:20:35,620
putting things together also some work

537
00:20:32,230 --> 00:20:37,679
not a little bit later today will show

538
00:20:35,620 --> 00:20:40,139
how they can take this hinting PRG

539
00:20:37,679 --> 00:20:42,880
assumption we had and instead use

540
00:20:40,139 --> 00:20:45,580
encryption symmetric key encryption that

541
00:20:42,880 --> 00:20:47,019
is key dependent message secure and it

542
00:20:45,580 --> 00:20:49,120
turns out that since they do this they

543
00:20:47,019 --> 00:20:52,720
can also get in addition to a diffi

544
00:20:49,120 --> 00:20:55,000
Hellman and lwe there's also a learning

545
00:20:52,720 --> 00:20:57,960
parity with noise way of bringing this

546
00:20:55,000 --> 00:21:01,320
framework down it's kind of interesting

547
00:20:57,960 --> 00:21:05,620
it'd be interesting to see how that goes

548
00:21:01,320 --> 00:21:07,389
okay so yeah this is this is the this is

549
00:21:05,620 --> 00:21:10,418
the high-level picture of what we do

550
00:21:07,389 --> 00:21:15,879
going from CPA to CCA with hinting plus

551
00:21:10,419 --> 00:21:17,980
canteen prgs be obviously want one way

552
00:21:15,880 --> 00:21:19,120
of exploring things is to try to get new

553
00:21:17,980 --> 00:21:21,100
ways with NPR geez

554
00:21:19,120 --> 00:21:23,168
or maybe use the framework maybe you'll

555
00:21:21,100 --> 00:21:25,209
need hinting PR geez maybe use the

556
00:21:23,169 --> 00:21:27,279
general framework but tweak some other

557
00:21:25,210 --> 00:21:28,360
parts of it it's hard to say and I'll

558
00:21:27,279 --> 00:21:30,519
just know in another way there's been a

559
00:21:28,360 --> 00:21:32,799
lot of interesting progress recently and

560
00:21:30,519 --> 00:21:35,289
it seems that now we have a new path it

561
00:21:32,799 --> 00:21:38,350
could be worth investing more time into

562
00:21:35,289 --> 00:21:40,889
exploring it okay well thank you very

563
00:21:38,350 --> 00:21:40,889
much for your attention

564
00:21:45,040 --> 00:22:07,639
if you have a question please come to

565
00:21:47,720 --> 00:22:09,120
the microphone okay best thanks the

566
00:22:07,640 --> 00:22:12,990
speaker

567
00:22:09,120 --> 00:22:12,989
[Applause]

