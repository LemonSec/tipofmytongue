1
00:00:04,870 --> 00:00:10,270
thank you for saying the title so I

2
00:00:06,880 --> 00:00:13,180
don't have to my name is Tatiana Bradley

3
00:00:10,270 --> 00:00:15,160
I am a student at UC Irvine and this is

4
00:00:13,180 --> 00:00:17,410
joint work with my advisor stasher etske

5
00:00:15,160 --> 00:00:18,970
and my colleague died your shoe I'm

6
00:00:17,410 --> 00:00:23,530
gonna be talking about strong asymmetric

7
00:00:18,970 --> 00:00:25,900
password authenticate a key exchange so

8
00:00:23,530 --> 00:00:27,460
I'm gonna explain what the problem is

9
00:00:25,900 --> 00:00:28,689
which is passport authentication over

10
00:00:27,460 --> 00:00:30,520
the Internet

11
00:00:28,690 --> 00:00:33,040
explain how we can use crypto to do it

12
00:00:30,520 --> 00:00:35,769
better and show our protocol which we

13
00:00:33,040 --> 00:00:37,510
believe is one of the best ways to use

14
00:00:35,769 --> 00:00:39,250
crypto to do password authentication

15
00:00:37,510 --> 00:00:41,710
better I'll show you some building

16
00:00:39,250 --> 00:00:45,340
blocks and then I'll discuss some open

17
00:00:41,710 --> 00:00:47,649
questions that still remain so how was

18
00:00:45,340 --> 00:00:51,340
password authentication done in practice

19
00:00:47,649 --> 00:00:55,480
now it's basically just password over

20
00:00:51,340 --> 00:00:58,870
TLS so umm if we have a server Charles

21
00:00:55,480 --> 00:01:02,500
he has a password file which is a which

22
00:00:58,870 --> 00:01:05,530
has a salt and a hashed salted hash of

23
00:01:02,500 --> 00:01:09,759
the password and he's going to prove to

24
00:01:05,530 --> 00:01:12,580
Ada that he has the right public key

25
00:01:09,759 --> 00:01:16,830
using a certificate authority and then

26
00:01:12,580 --> 00:01:19,690
they're gonna use TLS to establish a

27
00:01:16,830 --> 00:01:22,149
shared session key which is just going

28
00:01:19,690 --> 00:01:23,830
to be a symmetric key and so all of this

29
00:01:22,149 --> 00:01:26,560
has nothing to do as pad passwords yet

30
00:01:23,830 --> 00:01:29,140
but then now ada is going to simply

31
00:01:26,560 --> 00:01:31,599
encrypt her password under that shared

32
00:01:29,140 --> 00:01:34,240
symmetric key Charles decrypt it and

33
00:01:31,599 --> 00:01:37,240
checks if it is matches the hashed

34
00:01:34,240 --> 00:01:38,830
password so it's very simple but there's

35
00:01:37,240 --> 00:01:42,130
at least two problems with this method

36
00:01:38,830 --> 00:01:43,660
one is of course that it relies on PKI

37
00:01:42,130 --> 00:01:46,929
and we all know there many attacks on

38
00:01:43,660 --> 00:01:48,250
PKI one example is phishing ada believes

39
00:01:46,929 --> 00:01:50,280
she's talking to Charles but she's

40
00:01:48,250 --> 00:01:52,300
actually talking to a malicious server I

41
00:01:50,280 --> 00:01:53,979
mean if that's the case then she

42
00:01:52,300 --> 00:01:56,470
basically just sends her password to a

43
00:01:53,979 --> 00:01:58,690
malicious server and all of her security

44
00:01:56,470 --> 00:02:00,009
regarding her password is lost the other

45
00:01:58,690 --> 00:02:02,319
problem which is a little bit more

46
00:02:00,009 --> 00:02:04,270
subtle is that at least for some number

47
00:02:02,319 --> 00:02:06,970
of milliseconds or whatever

48
00:02:04,270 --> 00:02:09,579
Charles holds the password of ada in the

49
00:02:06,970 --> 00:02:11,410
clear so that means if Charles the

50
00:02:09,580 --> 00:02:13,659
server is corrupted at any point while

51
00:02:11,410 --> 00:02:16,010
he's checking that password the

52
00:02:13,659 --> 00:02:18,470
adversary who corrupts the server learns

53
00:02:16,010 --> 00:02:21,439
that password is so we'd like to be able

54
00:02:18,470 --> 00:02:23,629
to do better with script oh and of

55
00:02:21,439 --> 00:02:26,510
course we can because we're at crypto so

56
00:02:23,629 --> 00:02:27,980
our first attempt is going to be to use

57
00:02:26,510 --> 00:02:30,140
password authenticated key exchange

58
00:02:27,980 --> 00:02:31,970
which is a well-established primitive

59
00:02:30,140 --> 00:02:33,708
it's been studied in the game based

60
00:02:31,970 --> 00:02:37,519
simulation based models as well as the

61
00:02:33,709 --> 00:02:40,010
universally composable model so how does

62
00:02:37,519 --> 00:02:42,260
that work we assume a DES and Charles

63
00:02:40,010 --> 00:02:44,540
each have a password they inserted into

64
00:02:42,260 --> 00:02:45,980
a Paik protocol and then they get the

65
00:02:44,540 --> 00:02:47,810
same key if their passwords match

66
00:02:45,980 --> 00:02:51,828
otherwise they get an independently

67
00:02:47,810 --> 00:02:53,959
random key and you can think of this as

68
00:02:51,829 --> 00:02:55,849
just like a secure computation of a

69
00:02:53,959 --> 00:02:59,239
password equality function with the

70
00:02:55,849 --> 00:03:01,608
addition of getting keys so what are the

71
00:02:59,239 --> 00:03:03,650
good things about this no PKI attacks

72
00:03:01,609 --> 00:03:08,810
because there's no PKI so we're good for

73
00:03:03,650 --> 00:03:11,060
that problem with TLS and the other good

74
00:03:08,810 --> 00:03:12,500
thing is that charles doesn't get ADA's

75
00:03:11,060 --> 00:03:14,239
password in the clear during the

76
00:03:12,500 --> 00:03:16,159
protocol because it's your secure

77
00:03:14,239 --> 00:03:19,700
computation so her password is private

78
00:03:16,159 --> 00:03:21,798
but of course in order to be a server

79
00:03:19,700 --> 00:03:24,018
charles needs to store the password on

80
00:03:21,799 --> 00:03:27,680
his server that he inserts into the

81
00:03:24,019 --> 00:03:29,629
protocol so basically we have an even

82
00:03:27,680 --> 00:03:31,459
worse problem with the server with the

83
00:03:29,629 --> 00:03:33,290
server storing a password in the clear

84
00:03:31,459 --> 00:03:37,940
because it's sort it's stored for a long

85
00:03:33,290 --> 00:03:39,440
time not just a couple seconds so we

86
00:03:37,940 --> 00:03:42,349
hope to do a little bit better than this

87
00:03:39,440 --> 00:03:45,260
and the here we have something called a

88
00:03:42,349 --> 00:03:46,879
symmetric cake and this has also been

89
00:03:45,260 --> 00:03:50,298
studied in the game base and you see

90
00:03:46,879 --> 00:03:53,090
models and this is a simple extension of

91
00:03:50,299 --> 00:03:55,519
cake in which instead of storing just a

92
00:03:53,090 --> 00:03:57,560
password Charles the server stores a

93
00:03:55,519 --> 00:04:01,370
hash of that password so you can think

94
00:03:57,560 --> 00:04:04,190
of F here as a one-way function we of

95
00:04:01,370 --> 00:04:06,799
course have the same pros of pate normal

96
00:04:04,190 --> 00:04:11,000
Paik and then we get the added Pro that

97
00:04:06,799 --> 00:04:12,709
if the server is compromised then the

98
00:04:11,000 --> 00:04:15,440
adversary has to do an offline

99
00:04:12,709 --> 00:04:19,370
dictionary attack in order to learn the

100
00:04:15,440 --> 00:04:22,370
password based on that password file but

101
00:04:19,370 --> 00:04:25,219
because the function f is the public

102
00:04:22,370 --> 00:04:26,840
fixed function any computation for that

103
00:04:25,219 --> 00:04:29,150
offline dictionary attack can occur

104
00:04:26,840 --> 00:04:29,960
before the actual server compromised so

105
00:04:29,150 --> 00:04:31,969
basically the

106
00:04:29,960 --> 00:04:34,669
Cerie who has some time on their hands

107
00:04:31,970 --> 00:04:36,860
can do a bunch of computation and then

108
00:04:34,669 --> 00:04:38,690
once they get access to the server

109
00:04:36,860 --> 00:04:40,880
immediately determine what a lot of the

110
00:04:38,690 --> 00:04:44,509
passwords are so we want to do even

111
00:04:40,880 --> 00:04:47,300
better than that and this is where we

112
00:04:44,509 --> 00:04:49,509
have strong asymmetric Paik and this has

113
00:04:47,300 --> 00:04:53,169
recently proposed that you know crypt

114
00:04:49,509 --> 00:04:57,979
bye-bye my advisor and my colleagues and

115
00:04:53,169 --> 00:04:59,719
2018 and I the way this works is

116
00:04:57,979 --> 00:05:03,400
probably how you thought it would which

117
00:04:59,720 --> 00:05:05,930
is instead of holding a regular a

118
00:05:03,400 --> 00:05:07,758
unsalted randomized function we use a

119
00:05:05,930 --> 00:05:11,449
randomized function so we just add a

120
00:05:07,759 --> 00:05:14,539
salt a random salt and now we get the

121
00:05:11,449 --> 00:05:16,070
benefit that there is no possibility of

122
00:05:14,539 --> 00:05:19,460
offline dictionary attack

123
00:05:16,070 --> 00:05:24,979
pre-computation because the salt is per

124
00:05:19,460 --> 00:05:27,440
user and it's not known beforehand so

125
00:05:24,979 --> 00:05:29,780
finally we are able to use crypto and

126
00:05:27,440 --> 00:05:32,180
get all the benefits of password over

127
00:05:29,780 --> 00:05:36,440
TLS but none of the shortcomings so this

128
00:05:32,180 --> 00:05:38,599
is great but what's our contribution

129
00:05:36,440 --> 00:05:41,300
here because this is already existing so

130
00:05:38,599 --> 00:05:43,969
just a recap we have password over TLS

131
00:05:41,300 --> 00:05:46,340
the current de facto standard this is

132
00:05:43,970 --> 00:05:48,919
nice because it's standard it uses TLS

133
00:05:46,340 --> 00:05:51,289
it's efficient it's modular basically it

134
00:05:48,919 --> 00:05:53,180
doesn't matter what hash function you

135
00:05:51,289 --> 00:05:54,949
use it doesn't matter what encryption

136
00:05:53,180 --> 00:05:57,500
scheme you use you just encrypt the

137
00:05:54,949 --> 00:06:00,860
password but as I said it has the two

138
00:05:57,500 --> 00:06:03,949
problems that I mentioned so opaque the

139
00:06:00,860 --> 00:06:06,650
protocol proposed euro crypt proposes a

140
00:06:03,949 --> 00:06:08,150
universally composable strong apec that

141
00:06:06,650 --> 00:06:10,250
of course is independent of PKI

142
00:06:08,150 --> 00:06:12,380
it has three rounds that is based on an

143
00:06:10,250 --> 00:06:14,150
interactive assumption and what our

144
00:06:12,380 --> 00:06:17,300
contribution is is that we're proposing

145
00:06:14,150 --> 00:06:19,580
a new you see strong a peak and we're

146
00:06:17,300 --> 00:06:20,659
able to shave off one round and we have

147
00:06:19,580 --> 00:06:22,490
a similar number of number of

148
00:06:20,659 --> 00:06:26,659
exponentiations but we don't have to

149
00:06:22,490 --> 00:06:29,330
hash onto a group we have a number of

150
00:06:26,659 --> 00:06:32,810
assumptions including ROM we also use

151
00:06:29,330 --> 00:06:35,300
ggm but that is isolated into an offline

152
00:06:32,810 --> 00:06:37,560
part of the protocol and we're also

153
00:06:35,300 --> 00:06:41,550
proposing some new

154
00:06:37,560 --> 00:06:43,920
some new primitives the you see tight

155
00:06:41,550 --> 00:06:46,680
one-way function and the implicit

156
00:06:43,920 --> 00:06:49,400
statement conditional secant and we're

157
00:06:46,680 --> 00:06:53,520
showing how we can adapt a existing

158
00:06:49,400 --> 00:06:56,729
paradigm for cakes and for you see pigs

159
00:06:53,520 --> 00:06:59,700
into a strong a pig and also shave off

160
00:06:56,730 --> 00:07:02,550
one half of that paradigm so it's a nice

161
00:06:59,700 --> 00:07:04,950
little result there so let me get into

162
00:07:02,550 --> 00:07:07,380
it explain each one of these things so

163
00:07:04,950 --> 00:07:10,740
let's start with the tight one-way

164
00:07:07,380 --> 00:07:13,620
function so this is in the UC model so

165
00:07:10,740 --> 00:07:16,169
we have something called F stuff and

166
00:07:13,620 --> 00:07:19,260
that's the idealized functionality of a

167
00:07:16,169 --> 00:07:21,240
salted tight one-way function and the

168
00:07:19,260 --> 00:07:23,310
salsa tight one-way function has some

169
00:07:21,240 --> 00:07:26,010
passwords some secret password that it

170
00:07:23,310 --> 00:07:27,960
knows and it has some notion of being

171
00:07:26,010 --> 00:07:31,260
compromised and it has some notion of

172
00:07:27,960 --> 00:07:35,219
having a password attack password guess

173
00:07:31,260 --> 00:07:37,380
being happening against it so in the

174
00:07:35,220 --> 00:07:38,490
case that it's compromised is where it's

175
00:07:37,380 --> 00:07:43,650
just sends a message okay I'm

176
00:07:38,490 --> 00:07:47,520
compromised and in the proof or any kind

177
00:07:43,650 --> 00:07:48,719
of proofs using this we need to when we

178
00:07:47,520 --> 00:07:50,310
hear that the server is going to

179
00:07:48,720 --> 00:07:52,410
compromise we need to sort of generate

180
00:07:50,310 --> 00:07:54,990
some kind of password file that looks

181
00:07:52,410 --> 00:07:57,479
legitimate to pretend to have been a

182
00:07:54,990 --> 00:07:59,669
real server that has a password file so

183
00:07:57,479 --> 00:08:01,760
we have to generate that based on

184
00:07:59,669 --> 00:08:03,450
usually just some kind of random

185
00:08:01,760 --> 00:08:05,310
password but we don't know what the

186
00:08:03,450 --> 00:08:07,080
password is so we have to generate that

187
00:08:05,310 --> 00:08:12,030
without knowing the password and then

188
00:08:07,080 --> 00:08:15,359
the the other functionality of the F

189
00:08:12,030 --> 00:08:17,580
stuff is that you can ask it is this the

190
00:08:15,360 --> 00:08:19,890
right password so it's basically like a

191
00:08:17,580 --> 00:08:21,930
point function what you're saying is

192
00:08:19,890 --> 00:08:23,719
this the password it says yes or no and

193
00:08:21,930 --> 00:08:26,190
I learned whether it's the password and

194
00:08:23,720 --> 00:08:28,740
then using that functionality as a

195
00:08:26,190 --> 00:08:30,660
simulator we need to translate the real

196
00:08:28,740 --> 00:08:33,330
attacker who's doing some kind of

197
00:08:30,660 --> 00:08:35,820
offline local computation we need to

198
00:08:33,330 --> 00:08:37,950
translate that into a password guess so

199
00:08:35,820 --> 00:08:39,930
for example if the one-way function is

200
00:08:37,950 --> 00:08:43,680
just a hash function it's saying hash of

201
00:08:39,929 --> 00:08:45,120
password X and then we say okay since

202
00:08:43,679 --> 00:08:46,800
we're a random Oracle we know what that

203
00:08:45,120 --> 00:08:48,150
password we know what that password was

204
00:08:46,800 --> 00:08:50,550
and then we say is this the right

205
00:08:48,150 --> 00:08:51,089
password yes or no and then if is right

206
00:08:50,550 --> 00:08:55,160
we pro

207
00:08:51,089 --> 00:08:57,990
the password file to have to be

208
00:08:55,160 --> 00:08:59,430
correspond to that correct password

209
00:08:57,990 --> 00:09:01,189
guess if it's not we just give it some

210
00:08:59,430 --> 00:09:05,339
kind of some kind of junk

211
00:09:01,189 --> 00:09:07,259
so as I've been saying I gave an example

212
00:09:05,339 --> 00:09:08,699
with the random Oracle model it seems

213
00:09:07,259 --> 00:09:12,180
like with this model you're gonna need

214
00:09:08,699 --> 00:09:13,949
some kind of idealized computation yeah

215
00:09:12,180 --> 00:09:17,219
so this is just a description of what a

216
00:09:13,949 --> 00:09:18,569
type one way function is basically you

217
00:09:17,220 --> 00:09:23,100
can think of the type one way function

218
00:09:18,569 --> 00:09:26,550
as being you if you make a password

219
00:09:23,100 --> 00:09:28,920
the best the best strategy for learning

220
00:09:26,550 --> 00:09:31,290
the password from the hash password is

221
00:09:28,920 --> 00:09:34,170
simply to guess all the passwords trial

222
00:09:31,290 --> 00:09:37,349
hash them and so forth so brute force

223
00:09:34,170 --> 00:09:40,529
you can't like shave off a factor an

224
00:09:37,350 --> 00:09:42,899
exponential factor or something but yeah

225
00:09:40,529 --> 00:09:44,220
so as I was saying it's it seems like

226
00:09:42,899 --> 00:09:46,829
we're gonna need some kind of idealized

227
00:09:44,220 --> 00:09:48,870
model for this so the first example I

228
00:09:46,829 --> 00:09:53,959
gave is the hash function and that's

229
00:09:48,870 --> 00:09:56,249
what password over TLS basically uses

230
00:09:53,959 --> 00:09:59,160
because the server is drawing that

231
00:09:56,249 --> 00:10:02,490
hashed password then the other example

232
00:09:59,160 --> 00:10:04,319
is the hash and the exponent type where

233
00:10:02,490 --> 00:10:06,059
you have a group element that's the

234
00:10:04,319 --> 00:10:07,889
random group metal element that's the

235
00:10:06,059 --> 00:10:09,899
salt and you raise it to the hash of the

236
00:10:07,889 --> 00:10:11,519
password and that and we're using a

237
00:10:09,899 --> 00:10:14,490
variant of this and it's been used

238
00:10:11,519 --> 00:10:16,920
before it requires a programmable

239
00:10:14,490 --> 00:10:19,470
generic group model in order to show

240
00:10:16,920 --> 00:10:21,689
that it's a stealth but we're okay with

241
00:10:19,470 --> 00:10:23,970
that because this tight one-way function

242
00:10:21,689 --> 00:10:26,610
is only surrounding the sort of offline

243
00:10:23,970 --> 00:10:29,550
part of the protocol in which the

244
00:10:26,610 --> 00:10:32,459
adversary is compromising the server

245
00:10:29,550 --> 00:10:34,019
it's not during the actual protocol so

246
00:10:32,459 --> 00:10:35,998
this this does raise some questions such

247
00:10:34,019 --> 00:10:38,550
as are there can we prove a tight lower

248
00:10:35,999 --> 00:10:40,319
bound for some other arithmetic one-way

249
00:10:38,550 --> 00:10:44,490
functions beyond the the one I just

250
00:10:40,319 --> 00:10:45,929
described there is one caveat and this

251
00:10:44,490 --> 00:10:47,970
is something technical that you can read

252
00:10:45,929 --> 00:10:50,610
about more and our paper but we're

253
00:10:47,970 --> 00:10:52,920
actually using a variant of this hash in

254
00:10:50,610 --> 00:10:55,199
the exponent which is similar to the

255
00:10:52,920 --> 00:10:56,639
bony boy and signature function and the

256
00:10:55,199 --> 00:10:58,378
reason for this is because we don't want

257
00:10:56,639 --> 00:11:00,839
the password file to be malleable and

258
00:10:58,379 --> 00:11:02,399
the reason for this is that we don't

259
00:11:00,839 --> 00:11:04,350
want the adversary who steals the

260
00:11:02,399 --> 00:11:06,150
password file to be able to

261
00:11:04,350 --> 00:11:08,160
randomize the password file and then

262
00:11:06,150 --> 00:11:09,750
pretend to be the adversary without us

263
00:11:08,160 --> 00:11:11,040
being able to tell they're pretending to

264
00:11:09,750 --> 00:11:13,800
the adversary so it's kind of a

265
00:11:11,040 --> 00:11:16,319
technical point for the proof but from

266
00:11:13,800 --> 00:11:20,689
now on in the talk I'll just sort of use

267
00:11:16,320 --> 00:11:22,950
this F self as an abstract primitive

268
00:11:20,690 --> 00:11:27,020
alright so I told you that we are

269
00:11:22,950 --> 00:11:30,390
working with a existing paradigm the

270
00:11:27,020 --> 00:11:31,829
encryption plus SP hf paradigm so let me

271
00:11:30,390 --> 00:11:35,250
show you how that works with regular

272
00:11:31,830 --> 00:11:37,530
Paik if we have if we go back to our

273
00:11:35,250 --> 00:11:41,040
regular setting where we have a pass we

274
00:11:37,530 --> 00:11:43,110
have a password on both side unless

275
00:11:41,040 --> 00:11:46,410
suppose that ADA wants to prove that she

276
00:11:43,110 --> 00:11:48,450
has the right password so ada sends a

277
00:11:46,410 --> 00:11:51,360
commitment to her password using a

278
00:11:48,450 --> 00:11:54,570
public key encryption scheme and the

279
00:11:51,360 --> 00:11:55,680
public keys in the CRS so she commits to

280
00:11:54,570 --> 00:11:57,470
her password using the public key

281
00:11:55,680 --> 00:12:00,630
encryption scheme and then Charles

282
00:11:57,470 --> 00:12:02,190
creates a statement that's in a think of

283
00:12:00,630 --> 00:12:03,990
like an NP language he creates a

284
00:12:02,190 --> 00:12:06,660
statement that says ok this commitment

285
00:12:03,990 --> 00:12:08,520
of ADA's encrypts the same password as

286
00:12:06,660 --> 00:12:10,350
the one that I have so it encrypts my

287
00:12:08,520 --> 00:12:12,840
password and of course this statement

288
00:12:10,350 --> 00:12:15,180
could be true or it could be false and

289
00:12:12,840 --> 00:12:19,080
then he plugs the statement into this

290
00:12:15,180 --> 00:12:20,670
magic s BHF box this page s BHF has two

291
00:12:19,080 --> 00:12:24,480
algorithms that has the hash algorithm

292
00:12:20,670 --> 00:12:27,180
and the p hash algorithm and p hash

293
00:12:24,480 --> 00:12:29,760
stands for projection hash the hash

294
00:12:27,180 --> 00:12:32,400
algorithm takes in a statement and it

295
00:12:29,760 --> 00:12:35,160
outputs a value and a hash projection

296
00:12:32,400 --> 00:12:36,480
the value is like a secret value the

297
00:12:35,160 --> 00:12:38,189
hash projection you can think of it as

298
00:12:36,480 --> 00:12:41,280
kind of like a key so the hash

299
00:12:38,190 --> 00:12:43,680
projection you can send that to someone

300
00:12:41,280 --> 00:12:45,890
and then they can use the P hash value

301
00:12:43,680 --> 00:12:50,849
along with a witness for your statement

302
00:12:45,890 --> 00:12:53,960
that to get that same value so what's

303
00:12:50,850 --> 00:12:59,550
happening here is that Charles is

304
00:12:53,960 --> 00:13:02,700
showing that so if only if ada has the

305
00:12:59,550 --> 00:13:07,140
witness for her commitment can she

306
00:13:02,700 --> 00:13:09,660
recover that that value and also she

307
00:13:07,140 --> 00:13:11,670
can't recover it if she encrypted the

308
00:13:09,660 --> 00:13:14,160
wrong password because the statement

309
00:13:11,670 --> 00:13:16,349
will not be in the language so that

310
00:13:14,160 --> 00:13:17,620
shows that that proved to Charles that

311
00:13:16,350 --> 00:13:19,540
ada has the right password

312
00:13:17,620 --> 00:13:21,610
but then Charles has to show ADA the

313
00:13:19,540 --> 00:13:24,400
same thing so you just do the same thing

314
00:13:21,610 --> 00:13:26,530
symmetrically on the other side and

315
00:13:24,400 --> 00:13:31,360
that's and that's how they SBI Jeff the

316
00:13:26,530 --> 00:13:33,310
plus encryption paradigm works what

317
00:13:31,360 --> 00:13:36,550
about with a pig so with a pig we just

318
00:13:33,310 --> 00:13:40,719
do a simple transformation we instead of

319
00:13:36,550 --> 00:13:44,469
having Charles have the password he has

320
00:13:40,720 --> 00:13:47,290
the hash of the password and he his

321
00:13:44,470 --> 00:13:53,470
commitment his statement is that ADA's

322
00:13:47,290 --> 00:13:57,010
commitment encrypts the preimage of the

323
00:13:53,470 --> 00:13:59,410
preimage of his password file and he and

324
00:13:57,010 --> 00:14:01,000
said in in he encrypts the password file

325
00:13:59,410 --> 00:14:02,439
outside of the password and so forth

326
00:14:01,000 --> 00:14:04,960
it's just kind of a simple

327
00:14:02,440 --> 00:14:08,260
transformation so that all that's all

328
00:14:04,960 --> 00:14:11,490
fine and what about for SA Pig we can do

329
00:14:08,260 --> 00:14:15,520
the same thing but with the salts but

330
00:14:11,490 --> 00:14:18,360
what we notice here is that because we

331
00:14:15,520 --> 00:14:21,520
basically need to use ROM because of the

332
00:14:18,360 --> 00:14:22,030
Stout as I said we need to use wrong for

333
00:14:21,520 --> 00:14:27,939
the south

334
00:14:22,030 --> 00:14:32,380
so if we use ROM we can shave off a

335
00:14:27,940 --> 00:14:34,930
whole half of this protocol oh and just

336
00:14:32,380 --> 00:14:36,790
to just for some context this kind of

337
00:14:34,930 --> 00:14:39,489
thing can be done without the random

338
00:14:36,790 --> 00:14:41,140
Oracle model in general but if we say

339
00:14:39,490 --> 00:14:43,240
okay it's fine to use ROM then we can

340
00:14:41,140 --> 00:14:46,120
shave off half of this protocol so how

341
00:14:43,240 --> 00:14:47,230
do we do that what we did we do need to

342
00:14:46,120 --> 00:14:50,800
change some things

343
00:14:47,230 --> 00:14:52,990
so in particular we now have Ada and now

344
00:14:50,800 --> 00:14:55,540
has no guarantee that Charles has the

345
00:14:52,990 --> 00:14:57,040
right password file because she proved

346
00:14:55,540 --> 00:14:59,560
that she has the password but he didn't

347
00:14:57,040 --> 00:15:03,310
prove anything so we need to embed

348
00:14:59,560 --> 00:15:05,739
inside of this this hash projection some

349
00:15:03,310 --> 00:15:08,229
more information so we need CCA security

350
00:15:05,740 --> 00:15:09,910
we need it to be non malleable and we

351
00:15:08,230 --> 00:15:14,710
also need it to be able to carry a

352
00:15:09,910 --> 00:15:16,689
payload an encrypted payload so because

353
00:15:14,710 --> 00:15:19,270
he because Charles needs to be able to

354
00:15:16,690 --> 00:15:21,190
send his password file over to Ada so

355
00:15:19,270 --> 00:15:23,260
she can check that he does have the

356
00:15:21,190 --> 00:15:26,260
right one and has to be non malleable so

357
00:15:23,260 --> 00:15:27,760
that he can't pretend he had the

358
00:15:26,260 --> 00:15:29,770
password file when he didn't really have

359
00:15:27,760 --> 00:15:32,230
it

360
00:15:29,770 --> 00:15:33,790
and then this sort of changed s VHF is

361
00:15:32,230 --> 00:15:37,930
going to be what we call an implicit

362
00:15:33,790 --> 00:15:40,360
statement sequence alright so the

363
00:15:37,930 --> 00:15:43,089
implicit statements seek him is works

364
00:15:40,360 --> 00:15:44,860
pretty similar to the SB HF we have a

365
00:15:43,090 --> 00:15:47,050
syn algorithm that's like the hash

366
00:15:44,860 --> 00:15:49,240
algorithm and a receive out algorithm

367
00:15:47,050 --> 00:15:51,790
that's like the P hash algorithm the

368
00:15:49,240 --> 00:15:54,160
send algorithm transforms a statement

369
00:15:51,790 --> 00:15:56,380
into a key in a ciphertext the receive

370
00:15:54,160 --> 00:16:00,839
algorithm transforms a witness and that

371
00:15:56,380 --> 00:16:04,000
ciphertext into a statement and a key so

372
00:16:00,840 --> 00:16:06,610
here it's called implicit statement

373
00:16:04,000 --> 00:16:09,340
because the receiver does not need to

374
00:16:06,610 --> 00:16:11,230
know what the statement is in order to

375
00:16:09,340 --> 00:16:13,810
generate the value and in fact she

376
00:16:11,230 --> 00:16:17,040
retrieves the statement in the in the

377
00:16:13,810 --> 00:16:20,319
course of doing the receiver algorithm

378
00:16:17,040 --> 00:16:22,660
and so that's great because in our

379
00:16:20,320 --> 00:16:24,760
setting the receiver who's going to be

380
00:16:22,660 --> 00:16:26,980
the client ADA doesn't know what the

381
00:16:24,760 --> 00:16:30,490
password file is she needs to grab it

382
00:16:26,980 --> 00:16:33,250
and check it and then this is a trapdoor

383
00:16:30,490 --> 00:16:35,380
conditional seek him and so that means

384
00:16:33,250 --> 00:16:38,350
we have a trapdoor algorithm that can

385
00:16:35,380 --> 00:16:40,410
use a trapdoor and the crs to compute

386
00:16:38,350 --> 00:16:42,940
the same values that ada can compute and

387
00:16:40,410 --> 00:16:45,189
they look indistinguishable from a

388
00:16:42,940 --> 00:16:48,790
disease this is just used in the proof

389
00:16:45,190 --> 00:16:50,350
and we also have simulation sadness

390
00:16:48,790 --> 00:16:53,260
which you can think of like CCA

391
00:16:50,350 --> 00:16:57,160
and that's that the key appears to be

392
00:16:53,260 --> 00:16:58,330
rent the key K that the sender generates

393
00:16:57,160 --> 00:17:03,010
appears to be random

394
00:16:58,330 --> 00:17:05,020
if the statement he sends is not in fact

395
00:17:03,010 --> 00:17:06,369
in the language even given the presence

396
00:17:05,020 --> 00:17:08,109
of this trapdoor receiver so you can

397
00:17:06,369 --> 00:17:11,349
think of that like a decryption Oracle

398
00:17:08,109 --> 00:17:13,599
and finally we have statement privacy

399
00:17:11,349 --> 00:17:16,750
which says that the statement is hidden

400
00:17:13,599 --> 00:17:18,429
without the witness and this is the

401
00:17:16,750 --> 00:17:21,660
thing I just described is fairly similar

402
00:17:18,430 --> 00:17:25,420
to implicit there zero-knowledge put it

403
00:17:21,660 --> 00:17:28,060
proposed by ben amudha at all but the

404
00:17:25,420 --> 00:17:30,640
new thing here is the statement privacy

405
00:17:28,060 --> 00:17:33,159
notion and that's that the statement is

406
00:17:30,640 --> 00:17:34,840
hidden given the ciphertext you cannot

407
00:17:33,160 --> 00:17:36,580
determine what the statement is unless

408
00:17:34,840 --> 00:17:38,379
you have the witness and that's

409
00:17:36,580 --> 00:17:40,689
important because if the statement is

410
00:17:38,380 --> 00:17:42,560
revealed then the statement reveals the

411
00:17:40,690 --> 00:17:44,770
password file

412
00:17:42,560 --> 00:17:46,820
then it's as though the adversary

413
00:17:44,770 --> 00:17:48,590
compromised the server without even

414
00:17:46,820 --> 00:17:50,540
having to do any work so basically just

415
00:17:48,590 --> 00:17:52,280
by listening on the network they would

416
00:17:50,540 --> 00:17:56,060
get the password file and we don't want

417
00:17:52,280 --> 00:17:58,639
that to be the case all right so how do

418
00:17:56,060 --> 00:18:00,950
we make the implicit statement trapdoor

419
00:17:58,640 --> 00:18:02,480
cecum I'm not going to go through all

420
00:18:00,950 --> 00:18:04,580
the details but you can think of it like

421
00:18:02,480 --> 00:18:07,190
if you're familiar with the Fujisaki

422
00:18:04,580 --> 00:18:09,169
Okamoto transform from cpa to CC a

423
00:18:07,190 --> 00:18:10,850
public key encryption you can think of

424
00:18:09,170 --> 00:18:16,280
it like that basically what we're doing

425
00:18:10,850 --> 00:18:19,189
is we are we're encrypting we're using

426
00:18:16,280 --> 00:18:20,780
that that hash value that we got that we

427
00:18:19,190 --> 00:18:22,760
know is the same if those two passwords

428
00:18:20,780 --> 00:18:26,149
if the passwords match we're using that

429
00:18:22,760 --> 00:18:28,160
to encrypt the randomness that we use to

430
00:18:26,150 --> 00:18:30,950
make the hash and also the statement

431
00:18:28,160 --> 00:18:33,320
itself and also just macking everything

432
00:18:30,950 --> 00:18:36,320
so that nothing can be changed and then

433
00:18:33,320 --> 00:18:40,189
then a DES now knows that if Charles

434
00:18:36,320 --> 00:18:42,470
sent her a valid ciphertext that he does

435
00:18:40,190 --> 00:18:46,730
have a valid he does have a valid

436
00:18:42,470 --> 00:18:49,040
password file and nothing was changed so

437
00:18:46,730 --> 00:18:52,160
basically if we tie that all together

438
00:18:49,040 --> 00:18:53,720
what that gives us is this is like the

439
00:18:52,160 --> 00:18:56,210
picture before except now we're using

440
00:18:53,720 --> 00:18:59,930
the trapdoor seek him and the send and

441
00:18:56,210 --> 00:19:01,820
receive function instead and just to

442
00:18:59,930 --> 00:19:06,830
recap we know that ADA authenticates

443
00:19:01,820 --> 00:19:10,040
herself using using the basic cecum

444
00:19:06,830 --> 00:19:14,629
security which is that if she is able to

445
00:19:10,040 --> 00:19:18,530
decrypt the Charles's Charles's

446
00:19:14,630 --> 00:19:19,700
ciphertext then she must know the the

447
00:19:18,530 --> 00:19:22,040
witness and the statement must be

448
00:19:19,700 --> 00:19:24,320
correct so she must have encrypted the

449
00:19:22,040 --> 00:19:26,690
correct password and then Charles also

450
00:19:24,320 --> 00:19:28,310
authenticates to Ada because he's

451
00:19:26,690 --> 00:19:31,880
including his encrypted password file

452
00:19:28,310 --> 00:19:37,700
and the payload so we we basically just

453
00:19:31,880 --> 00:19:42,170
combine the the work that is done by the

454
00:19:37,700 --> 00:19:44,600
SB HF which is the authenticating ADA

455
00:19:42,170 --> 00:19:47,120
with the authenticating Charles into the

456
00:19:44,600 --> 00:19:50,330
same cipher text so that's how we shave

457
00:19:47,120 --> 00:19:55,750
it down to two rounds and this is our

458
00:19:50,330 --> 00:19:58,689
protocol oh and just submit

459
00:19:55,750 --> 00:20:01,960
doesn't know we instantiate the PK with

460
00:19:58,690 --> 00:20:05,140
a lifted al-jamal which is just a slight

461
00:20:01,960 --> 00:20:08,020
variant of elgu mall and with our own

462
00:20:05,140 --> 00:20:11,020
Stan she ation of the cecum based on SB

463
00:20:08,020 --> 00:20:16,900
hf we're able to get a very efficient

464
00:20:11,020 --> 00:20:19,900
protocol what I want to highlight for my

465
00:20:16,900 --> 00:20:21,850
summary is that we are in our

466
00:20:19,900 --> 00:20:23,350
instantiation is is quite efficient and

467
00:20:21,850 --> 00:20:25,990
not only does have two rounds but it

468
00:20:23,350 --> 00:20:27,639
also in terms of variable variable based

469
00:20:25,990 --> 00:20:28,900
exponentiations which are much more

470
00:20:27,640 --> 00:20:33,070
expensive than fixed based

471
00:20:28,900 --> 00:20:35,770
exponentiations we only have one or one

472
00:20:33,070 --> 00:20:37,360
to two per party and so if you think of

473
00:20:35,770 --> 00:20:38,770
regular definite divvy home and key

474
00:20:37,360 --> 00:20:40,719
exchange you would have one variable

475
00:20:38,770 --> 00:20:42,850
base per party so we're actually getting

476
00:20:40,720 --> 00:20:46,840
pretty close to that plain

477
00:20:42,850 --> 00:20:49,959
unauthenticated diffie-hellman and that

478
00:20:46,840 --> 00:20:52,300
leads into one thing I'm particularly

479
00:20:49,960 --> 00:20:54,790
interested in which is integrating this

480
00:20:52,300 --> 00:20:57,520
work with TLS that's our last open

481
00:20:54,790 --> 00:20:59,440
question but some other cool open

482
00:20:57,520 --> 00:21:01,840
questions are whether there are other

483
00:20:59,440 --> 00:21:05,380
tight one-way function constructions

484
00:21:01,840 --> 00:21:07,179
like with different assumptions and

485
00:21:05,380 --> 00:21:09,460
maybe we could even get rid of ggm and

486
00:21:07,180 --> 00:21:12,550
wrong it's impossible to shave off the

487
00:21:09,460 --> 00:21:14,560
rounds from s APEC even further would we

488
00:21:12,550 --> 00:21:17,020
be able to make a seek him faster by

489
00:21:14,560 --> 00:21:19,570
using DHIA s type transform instead of

490
00:21:17,020 --> 00:21:22,930
fo finally could we extend it to

491
00:21:19,570 --> 00:21:24,550
two-factor authentication or T peg so

492
00:21:22,930 --> 00:21:26,170
yeah that's all I have thank you so much

493
00:21:24,550 --> 00:21:31,490
for your time

494
00:21:26,170 --> 00:21:32,970
[Applause]

495
00:21:31,490 --> 00:21:33,930
all right

496
00:21:32,970 --> 00:21:38,480
we gonna have some time for questions

497
00:21:33,930 --> 00:21:38,480
please come to the mic if you have one I

498
00:21:44,390 --> 00:21:49,740
would have a quick one regarding that I

499
00:21:48,300 --> 00:21:52,290
guess the last bullet point integration

500
00:21:49,740 --> 00:21:54,330
so my understanding is that OPEC is on

501
00:21:52,290 --> 00:21:56,100
its way to potentially being sender dies

502
00:21:54,330 --> 00:21:59,010
at least it's an working group item of

503
00:21:56,100 --> 00:22:01,620
the CFR G do you have any similar plans

504
00:21:59,010 --> 00:22:04,650
with that protocol we don't have any

505
00:22:01,620 --> 00:22:08,219
specific plans regarding that and I am

506
00:22:04,650 --> 00:22:10,710
aware that opaque is on this on the road

507
00:22:08,220 --> 00:22:12,090
too but I would like to I don't have

508
00:22:10,710 --> 00:22:16,490
specific plans but I would like to get

509
00:22:12,090 --> 00:22:16,490
in on that if possible yeah cool okay

510
00:22:16,610 --> 00:22:19,500
all right

511
00:22:17,970 --> 00:22:21,160
they no other questions thinks things

512
00:22:19,500 --> 00:22:25,369
are yet again

513
00:22:21,160 --> 00:22:25,369
[Applause]

