1
00:00:05,200 --> 00:00:09,940
thanks Rio for the introduction so I'll

2
00:00:07,600 --> 00:00:12,070
be presenting on watermarking public key

3
00:00:09,940 --> 00:00:14,170
crypto graphic primitives and this is

4
00:00:12,070 --> 00:00:17,170
joint work with reach oil Sam Kim

5
00:00:14,170 --> 00:00:18,520
Brent waters and David whoo so we heard

6
00:00:17,170 --> 00:00:21,010
this in the previous talk but just to

7
00:00:18,520 --> 00:00:23,140
quickly recap when we think about water

8
00:00:21,010 --> 00:00:24,999
marking programs there are two basic

9
00:00:23,140 --> 00:00:27,759
algorithms there's a mark algorithm

10
00:00:24,999 --> 00:00:30,909
which takes his input a program models a

11
00:00:27,759 --> 00:00:33,370
circuit and some tag tau or mark and

12
00:00:30,909 --> 00:00:35,739
outputs a circuit C prime that indicates

13
00:00:33,370 --> 00:00:38,108
the mark circuit and then there's an

14
00:00:35,739 --> 00:00:40,718
extract algorithm that takes his input

15
00:00:38,109 --> 00:00:43,059
some circuits C prime and output to

16
00:00:40,719 --> 00:00:44,649
either a tagger bot so the tag would

17
00:00:43,059 --> 00:00:45,910
indicate that the program was marked

18
00:00:44,649 --> 00:00:49,750
with the tag tower bot would indicate

19
00:00:45,910 --> 00:00:50,890
that the program was unmarked okay and

20
00:00:49,750 --> 00:00:52,780
the way I've defined these algorithms

21
00:00:50,890 --> 00:00:54,030
there in the fully public setting

22
00:00:52,780 --> 00:00:56,199
meaning that the mark and extract

23
00:00:54,030 --> 00:00:58,179
algorithms aren't taking any secrets but

24
00:00:56,199 --> 00:01:00,010
you can also consider secret marking and

25
00:00:58,179 --> 00:01:01,449
extraction settings where these other

26
00:01:00,010 --> 00:01:05,459
ones require secrets that are held by

27
00:01:01,449 --> 00:01:07,420
some trusted watermarking Authority and

28
00:01:05,459 --> 00:01:09,039
there are two main properties that we

29
00:01:07,420 --> 00:01:11,229
want out of a water marking scheme the

30
00:01:09,040 --> 00:01:14,020
first is functionality preserving which

31
00:01:11,229 --> 00:01:15,729
is basically saying that the mark

32
00:01:14,020 --> 00:01:17,079
circuit should behave preserve the

33
00:01:15,729 --> 00:01:20,920
functionality of the unmarked circuit

34
00:01:17,079 --> 00:01:22,658
and the second is unremovable 'ti which

35
00:01:20,920 --> 00:01:24,729
basically says that given a mark circuit

36
00:01:22,659 --> 00:01:27,220
it should be difficult for an adversary

37
00:01:24,729 --> 00:01:28,450
to create another circuit that preserves

38
00:01:27,220 --> 00:01:34,570
the functionality of the circuit yet

39
00:01:28,450 --> 00:01:36,850
removes the mark and so what is known so

40
00:01:34,570 --> 00:01:38,889
far well in the work of Cohen and all

41
00:01:36,850 --> 00:01:39,820
they gave the first positive results for

42
00:01:38,890 --> 00:01:41,969
watermarking assuming

43
00:01:39,820 --> 00:01:44,559
indistinguishability obfuscation and

44
00:01:41,969 --> 00:01:45,939
since then the focus has been on water

45
00:01:44,560 --> 00:01:47,380
marking pseudo-random functions from

46
00:01:45,939 --> 00:01:50,770
standard assumptions and they've been a

47
00:01:47,380 --> 00:01:52,929
series of works by Kim and woo quash

48
00:01:50,770 --> 00:01:56,460
wicks ins or Delos and then Kim and will

49
00:01:52,930 --> 00:01:59,409
again the the previous talk and

50
00:01:56,460 --> 00:02:01,570
basically the focus so far has been on

51
00:01:59,409 --> 00:02:03,039
water marking secret key primitives and

52
00:02:01,570 --> 00:02:04,538
basically secret key primitives were

53
00:02:03,039 --> 00:02:08,380
already quite challenging to water mark

54
00:02:04,539 --> 00:02:09,699
and since they have less structure and

55
00:02:08,380 --> 00:02:11,019
are less complex than public key

56
00:02:09,699 --> 00:02:13,450
primitives it was just assumed that

57
00:02:11,020 --> 00:02:14,800
public key primitives would be much more

58
00:02:13,450 --> 00:02:15,940
or more challenging to watermark and

59
00:02:14,800 --> 00:02:18,510
secret key primitives and this hasn't

60
00:02:15,940 --> 00:02:20,969
been adequately studied

61
00:02:18,510 --> 00:02:25,858
so in this work we ask can we watermark

62
00:02:20,969 --> 00:02:27,930
public key primitives and in particular

63
00:02:25,859 --> 00:02:30,390
the the public key primitives we

64
00:02:27,930 --> 00:02:33,120
watermark in this work are digital

65
00:02:30,390 --> 00:02:34,649
signatures in particular the the signing

66
00:02:33,120 --> 00:02:37,530
functionality of a digital signature

67
00:02:34,650 --> 00:02:40,260
scheme and public key attribute based a

68
00:02:37,530 --> 00:02:43,379
predicate encryption in particular the

69
00:02:40,260 --> 00:02:45,629
decryption functionality okay so what

70
00:02:43,379 --> 00:02:48,090
was known prior to our work well in the

71
00:02:45,629 --> 00:02:49,798
work of Cohen all they did show assuming

72
00:02:48,090 --> 00:02:52,620
indistinguishability obfuscation how to

73
00:02:49,799 --> 00:02:55,439
build watermark or signatures and public

74
00:02:52,620 --> 00:02:56,909
key encryption so a natural question for

75
00:02:55,439 --> 00:02:58,799
our work is can we watermark these

76
00:02:56,909 --> 00:03:02,969
public key primitives from standard

77
00:02:58,799 --> 00:03:05,239
assumptions and in this work we show the

78
00:03:02,969 --> 00:03:09,299
answer is yes and in fact we can do this

79
00:03:05,239 --> 00:03:10,530
surprisingly simply so our so our main

80
00:03:09,299 --> 00:03:13,109
contributions are watermarking

81
00:03:10,530 --> 00:03:16,079
constructions we give water markable

82
00:03:13,109 --> 00:03:18,810
signatures and water markable actually

83
00:03:16,079 --> 00:03:19,950
based and predicate encryption but our

84
00:03:18,810 --> 00:03:23,010
other contribution comes on the

85
00:03:19,950 --> 00:03:24,869
definitional side basically the existing

86
00:03:23,010 --> 00:03:27,929
definitions in the literature had some

87
00:03:24,870 --> 00:03:29,220
insufficiencies and issues which we

88
00:03:27,930 --> 00:03:31,379
address in this work and give what we

89
00:03:29,220 --> 00:03:34,799
believe are appropriate definitions for

90
00:03:31,379 --> 00:03:36,120
water marking these primitives and just

91
00:03:34,799 --> 00:03:39,689
to quickly state what some of these

92
00:03:36,120 --> 00:03:42,019
issues are as to find the literature the

93
00:03:39,689 --> 00:03:45,138
keygen and mark algorithms were paired

94
00:03:42,019 --> 00:03:49,229
collusion resistance was not handled and

95
00:03:45,139 --> 00:03:50,519
the unremovable a notion ruled out valid

96
00:03:49,229 --> 00:03:52,470
attacks this is the most this is the

97
00:03:50,519 --> 00:03:53,579
most devastating of the the issues with

98
00:03:52,470 --> 00:03:56,699
the definition that's currently in the

99
00:03:53,579 --> 00:03:57,750
literature and now I'm just gonna go in

100
00:03:56,699 --> 00:04:02,489
a little bit more detail about the

101
00:03:57,750 --> 00:04:04,199
definitional issues so for right now I'm

102
00:04:02,489 --> 00:04:09,750
just gonna focus on the signatures

103
00:04:04,199 --> 00:04:13,349
aspect of the definitions so as defined

104
00:04:09,750 --> 00:04:15,930
in Cohen at all the there was a march

105
00:04:13,349 --> 00:04:17,339
and algorithm the so the keygen and mark

106
00:04:15,930 --> 00:04:21,168
algas repairs there was a march and

107
00:04:17,339 --> 00:04:24,299
algorithm that took as input a tag tao

108
00:04:21,168 --> 00:04:25,680
and now put it a verification key

109
00:04:24,300 --> 00:04:29,500
signing key tuple where the signing key

110
00:04:25,680 --> 00:04:32,110
is is marked with a tag towel and

111
00:04:29,500 --> 00:04:34,210
with this definition is first of all

112
00:04:32,110 --> 00:04:35,860
there's no notion of an unmarked signing

113
00:04:34,210 --> 00:04:37,659
key right the signing key is generated

114
00:04:35,860 --> 00:04:40,180
when it's when this algorithm is given a

115
00:04:37,660 --> 00:04:43,630
tag Tao so his diagram there's only

116
00:04:40,180 --> 00:04:44,620
there's only a mark to sign and key and

117
00:04:43,630 --> 00:04:47,020
the other issue with this is that

118
00:04:44,620 --> 00:04:49,000
collusion resistance is not not defined

119
00:04:47,020 --> 00:04:52,330
right because the signing key is only

120
00:04:49,000 --> 00:04:55,090
generated when given a tag it isn't

121
00:04:52,330 --> 00:04:56,560
possible to generate many marked

122
00:04:55,090 --> 00:04:59,770
versions of the same signing key with

123
00:04:56,560 --> 00:05:01,210
different tags okay so this is not that

124
00:04:59,770 --> 00:05:02,349
big an issue it's not not very difficult

125
00:05:01,210 --> 00:05:04,270
to fix

126
00:05:02,350 --> 00:05:06,700
we simply separate these algorithms

127
00:05:04,270 --> 00:05:09,760
right so we we have a separate key gen

128
00:05:06,700 --> 00:05:11,050
algorithm and a Marc algorithm so our

129
00:05:09,760 --> 00:05:12,990
keygen algorithm is first gonna generate

130
00:05:11,050 --> 00:05:15,730
a verification sign and key pair and

131
00:05:12,990 --> 00:05:19,180
then the Marc our algorithm will take as

132
00:05:15,730 --> 00:05:21,280
input the sign and key and a tag tau and

133
00:05:19,180 --> 00:05:22,660
output a Marc circuit C sub now that

134
00:05:21,280 --> 00:05:25,210
inputs this Marc signing key

135
00:05:22,660 --> 00:05:26,710
functionality I mean this new

136
00:05:25,210 --> 00:05:28,299
formulation of the definition as you can

137
00:05:26,710 --> 00:05:30,159
see there's there's an unmarked signing

138
00:05:28,300 --> 00:05:33,130
key now right the the initial signing

139
00:05:30,160 --> 00:05:37,390
key output by the keygen algorithm and

140
00:05:33,130 --> 00:05:38,770
also it is easy to generate many marked

141
00:05:37,390 --> 00:05:40,390
versions of the same signing key right

142
00:05:38,770 --> 00:05:42,010
because you can simply run the Marc

143
00:05:40,390 --> 00:05:47,409
algorithm with the same sign and key and

144
00:05:42,010 --> 00:05:49,450
many different tags ok now I'm going to

145
00:05:47,410 --> 00:05:53,290
go into the issue with the unremovable

146
00:05:49,450 --> 00:05:54,789
'ti definition and so to do this i have

147
00:05:53,290 --> 00:05:57,280
to describe the game in a little bit of

148
00:05:54,790 --> 00:05:58,750
detail so the way they on removability

149
00:05:57,280 --> 00:06:00,219
game is captured in watermarking is

150
00:05:58,750 --> 00:06:03,790
there's a game between an adversary and

151
00:06:00,220 --> 00:06:06,310
a challenger and what happens is the

152
00:06:03,790 --> 00:06:10,080
adversary picks some tag tao and sends

153
00:06:06,310 --> 00:06:12,310
it to the Challenger and is given back a

154
00:06:10,080 --> 00:06:14,560
circuit that implements a Marc signing

155
00:06:12,310 --> 00:06:15,970
key that is marked with this tag and

156
00:06:14,560 --> 00:06:18,729
then the adversaries goal is to output

157
00:06:15,970 --> 00:06:21,600
some circuit C star and what are the

158
00:06:18,729 --> 00:06:24,219
conditions required by the adversary

159
00:06:21,600 --> 00:06:26,440
well so we required that the adversary

160
00:06:24,220 --> 00:06:28,780
Circuit agrees with the Marc circuit on

161
00:06:26,440 --> 00:06:31,120
an epsilon fraction of inputs just think

162
00:06:28,780 --> 00:06:33,280
of epsilon is some one by pulling more

163
00:06:31,120 --> 00:06:36,040
than one half so just like some majority

164
00:06:33,280 --> 00:06:38,020
a fraction of inputs and the other

165
00:06:36,040 --> 00:06:40,690
property or the adversary wins the game

166
00:06:38,020 --> 00:06:43,219
basically if the circuit output but the

167
00:06:40,690 --> 00:06:44,840
adversary is not considered to be

168
00:06:43,220 --> 00:06:46,640
with the tag Tao so the adversary has

169
00:06:44,840 --> 00:06:50,239
succeeded in removing the mark but is

170
00:06:46,640 --> 00:06:53,180
preserved the functionality on some

171
00:06:50,240 --> 00:06:55,340
fraction of inputs in the first glance

172
00:06:53,180 --> 00:06:56,480
this definition seems completely

173
00:06:55,340 --> 00:06:58,340
reasonable and this is this is the

174
00:06:56,480 --> 00:06:59,780
definition given in Cohen at all but

175
00:06:58,340 --> 00:07:03,320
there are some issues with this

176
00:06:59,780 --> 00:07:06,440
definition and to illustrate this just

177
00:07:03,320 --> 00:07:07,730
you have a quick example so so just

178
00:07:06,440 --> 00:07:09,740
suppose the mark circle was on the

179
00:07:07,730 --> 00:07:12,500
following form I'm supposed to see some

180
00:07:09,740 --> 00:07:14,600
tau of X simply output in the tag tau in

181
00:07:12,500 --> 00:07:17,180
the clear and then output it a signature

182
00:07:14,600 --> 00:07:19,840
on X and the the tag tau and the

183
00:07:17,180 --> 00:07:22,670
signature are completely independent so

184
00:07:19,840 --> 00:07:24,260
from a watermarking perspective this

185
00:07:22,670 --> 00:07:27,290
thing should be considered completely

186
00:07:24,260 --> 00:07:29,840
broken okay why is that well there's a

187
00:07:27,290 --> 00:07:33,320
trivial adversarial unremovable strategy

188
00:07:29,840 --> 00:07:35,599
which is to simply take this mark

189
00:07:33,320 --> 00:07:38,030
circuit and restrict it to only output

190
00:07:35,600 --> 00:07:39,830
the second tuple right so it only

191
00:07:38,030 --> 00:07:42,530
outputs the signature now and the tag is

192
00:07:39,830 --> 00:07:46,390
nowhere to be found and this can easily

193
00:07:42,530 --> 00:07:50,359
be done and now the adversary is can

194
00:07:46,390 --> 00:07:51,530
succeeded in removing the tag but the

195
00:07:50,360 --> 00:07:52,940
functionality has been completely

196
00:07:51,530 --> 00:07:54,859
preserved right this adversary is

197
00:07:52,940 --> 00:08:01,040
unmarked circuit output signatures

198
00:07:54,860 --> 00:08:02,060
everywhere okay now now what is the

199
00:08:01,040 --> 00:08:05,450
problem with the unremovable T

200
00:08:02,060 --> 00:08:07,640
definition well observe as stated the

201
00:08:05,450 --> 00:08:10,159
adversary is required to output a

202
00:08:07,640 --> 00:08:12,979
circuit that agrees with the mark

203
00:08:10,160 --> 00:08:14,720
circuit exactly in the input-output

204
00:08:12,979 --> 00:08:17,210
behavior must be preserved exactly on a

205
00:08:14,720 --> 00:08:19,370
majority of inputs and in particular

206
00:08:17,210 --> 00:08:22,969
that rules out this attack strategy

207
00:08:19,370 --> 00:08:25,250
right because this unmarked circuit this

208
00:08:22,970 --> 00:08:27,080
attack is unmarked circuit stated down

209
00:08:25,250 --> 00:08:30,350
there does not output the tag on any

210
00:08:27,080 --> 00:08:31,760
input so this attack would not be

211
00:08:30,350 --> 00:08:34,089
admissible in the security game and

212
00:08:31,760 --> 00:08:36,559
therefore under the security definition

213
00:08:34,089 --> 00:08:38,240
this broken scheme would be considered

214
00:08:36,559 --> 00:08:42,679
provably secure under this unremovable

215
00:08:38,240 --> 00:08:44,089
dungeon so how do we fix this issue well

216
00:08:42,679 --> 00:08:46,880
the offending line is basically the fact

217
00:08:44,089 --> 00:08:48,800
that this the functionality must be

218
00:08:46,880 --> 00:08:52,280
preserved exactly the exact input-output

219
00:08:48,800 --> 00:08:54,109
behavior but like what is what is the

220
00:08:52,280 --> 00:08:56,260
functionality of a signature scheme

221
00:08:54,110 --> 00:08:56,260
really

222
00:08:56,600 --> 00:09:00,199
it's not necessarily the input-output

223
00:08:58,370 --> 00:09:02,690
behavior is exactly preserved rather the

224
00:09:00,199 --> 00:09:06,680
adversary's circuit is useful if it can

225
00:09:02,690 --> 00:09:08,660
output a signature that verifies so in

226
00:09:06,680 --> 00:09:10,550
our definition we change the condition

227
00:09:08,660 --> 00:09:12,290
on the adversary to simply say that the

228
00:09:10,550 --> 00:09:14,870
adversary circuit outputs signatures

229
00:09:12,290 --> 00:09:16,670
that verify on say majority of inputs

230
00:09:14,870 --> 00:09:22,190
and the adversaries winning condition

231
00:09:16,670 --> 00:09:23,889
remains remains the same okay so now

232
00:09:22,190 --> 00:09:26,810
okay I've put our definition on the left

233
00:09:23,889 --> 00:09:29,860
now let's see why why is this fix the

234
00:09:26,810 --> 00:09:31,790
problem well in this example before the

235
00:09:29,860 --> 00:09:34,300
adversaries unmarked circuit still

236
00:09:31,790 --> 00:09:36,469
output signatures so the adversaries

237
00:09:34,300 --> 00:09:37,550
circuit will still verify everywhere

238
00:09:36,470 --> 00:09:39,529
with respect to the verification

239
00:09:37,550 --> 00:09:40,969
algorithm yet the tag is nowhere to be

240
00:09:39,529 --> 00:09:44,870
found and the circuit will be considered

241
00:09:40,970 --> 00:09:47,360
unmarked okay so now that I've dealt

242
00:09:44,870 --> 00:09:50,089
with um yeah so now the broken scheme is

243
00:09:47,360 --> 00:09:54,649
considered to be broken properly under

244
00:09:50,089 --> 00:09:57,800
this definition so furthermore we can

245
00:09:54,649 --> 00:09:59,810
handle um unruly also with with this

246
00:09:57,800 --> 00:10:01,310
notion of collusion resistance where the

247
00:09:59,810 --> 00:10:03,199
adversary is now allowed to make an

248
00:10:01,310 --> 00:10:06,260
unbounded polynomial number of queries

249
00:10:03,199 --> 00:10:09,109
to a marking Oracle and receive back the

250
00:10:06,260 --> 00:10:11,449
same mark signing key marked with many

251
00:10:09,110 --> 00:10:12,920
different tags and the adversaries one

252
00:10:11,449 --> 00:10:15,019
condition is now just modified to say

253
00:10:12,920 --> 00:10:16,729
the adversary wins if the extract

254
00:10:15,019 --> 00:10:18,139
algorithm doesn't output any of the tags

255
00:10:16,730 --> 00:10:23,120
that for which it has been given a mark

256
00:10:18,139 --> 00:10:25,100
signing key okay so now that I've talked

257
00:10:23,120 --> 00:10:25,910
about the one of the main properties

258
00:10:25,100 --> 00:10:28,220
let's talk about the other one

259
00:10:25,910 --> 00:10:29,889
functionality preserving so a natural

260
00:10:28,220 --> 00:10:32,240
definition for functionality preserving

261
00:10:29,889 --> 00:10:33,980
would basically be that the mark circuit

262
00:10:32,240 --> 00:10:36,319
should equal the unmarked signing

263
00:10:33,980 --> 00:10:37,730
algorithm almost everywhere the

264
00:10:36,319 --> 00:10:41,839
input-output behavior should be exactly

265
00:10:37,730 --> 00:10:44,089
preserved but that leads us to the

266
00:10:41,839 --> 00:10:45,560
natural question like what is

267
00:10:44,089 --> 00:10:48,230
functionality preserving for signatures

268
00:10:45,560 --> 00:10:51,649
right is it really that the input-output

269
00:10:48,230 --> 00:10:53,029
behavior is exactly preserved or is it

270
00:10:51,649 --> 00:10:56,949
whereas that the signature actually

271
00:10:53,029 --> 00:10:58,850
verifies right to try to illustrate this

272
00:10:56,949 --> 00:11:00,050
suppose you have some like official

273
00:10:58,850 --> 00:11:02,600
document that you want to get approved

274
00:11:00,050 --> 00:11:03,829
all you care about is that this document

275
00:11:02,600 --> 00:11:05,569
has been approved right you don't care

276
00:11:03,829 --> 00:11:08,420
exactly what the approval stamp on the

277
00:11:05,569 --> 00:11:10,579
document looks like and so in this

278
00:11:08,420 --> 00:11:12,410
spirit

279
00:11:10,579 --> 00:11:14,810
in this work our functionality

280
00:11:12,410 --> 00:11:15,889
preserving definition says that the mark

281
00:11:14,810 --> 00:11:17,569
circuit is only required output

282
00:11:15,889 --> 00:11:18,949
signatures that verify with respect to

283
00:11:17,570 --> 00:11:20,120
the verification algorithm everywhere

284
00:11:18,949 --> 00:11:22,189
doesn't have to preserve the

285
00:11:20,120 --> 00:11:26,660
input-output behavior exactly and output

286
00:11:22,190 --> 00:11:28,430
the same string okay so now I've

287
00:11:26,660 --> 00:11:30,800
described how we defined watermarking

288
00:11:28,430 --> 00:11:32,508
signatures in this work I'm gonna go

289
00:11:30,800 --> 00:11:35,000
into the construction so so what do we

290
00:11:32,509 --> 00:11:37,730
achieve we achieve a water markable

291
00:11:35,000 --> 00:11:39,199
signature scheme that is from minimal

292
00:11:37,730 --> 00:11:43,550
assumptions just the existence of

293
00:11:39,199 --> 00:11:45,680
signatures and is a fully public scheme

294
00:11:43,550 --> 00:11:49,359
there's no reliance on any trusted water

295
00:11:45,680 --> 00:11:52,250
marking authority and all the prior work

296
00:11:49,360 --> 00:11:53,630
and the PRF constructions all required a

297
00:11:52,250 --> 00:11:55,759
trusted water marking authority for

298
00:11:53,630 --> 00:11:59,420
either secret marking and/or extraction

299
00:11:55,759 --> 00:12:01,009
the first fully public scheme moreover

300
00:11:59,420 --> 00:12:02,389
we obtain full collusion resistance

301
00:12:01,009 --> 00:12:04,850
meaning that in the security gain the

302
00:12:02,389 --> 00:12:07,699
adversary can see the signing key marked

303
00:12:04,850 --> 00:12:10,279
with as many different tags of its

304
00:12:07,699 --> 00:12:12,349
choice and all the previous

305
00:12:10,279 --> 00:12:14,540
constructions were not at all collusion

306
00:12:12,350 --> 00:12:17,540
resistant all the PRF constructions and

307
00:12:14,540 --> 00:12:19,310
the i/o constructions meaning that even

308
00:12:17,540 --> 00:12:22,790
if the adversary saw the same signing

309
00:12:19,310 --> 00:12:24,170
key mark with two different tags the the

310
00:12:22,790 --> 00:12:26,000
scheme would be broken so we've gone

311
00:12:24,170 --> 00:12:29,209
from basically no collusion resistance

312
00:12:26,000 --> 00:12:31,850
to full collusion resistance here okay

313
00:12:29,209 --> 00:12:33,589
so how do we actually construct this the

314
00:12:31,850 --> 00:12:35,269
construction this is surprisingly simple

315
00:12:33,589 --> 00:12:38,720
and follows from standard signature

316
00:12:35,269 --> 00:12:40,880
techniques so the the unmarked circuit

317
00:12:38,720 --> 00:12:42,740
it's just a simple signing algorithm it

318
00:12:40,880 --> 00:12:46,819
on it on a message Emma just simply

319
00:12:42,740 --> 00:12:50,029
outputs a signature okay now how does

320
00:12:46,819 --> 00:12:52,729
the mark algorithm work well to mark

321
00:12:50,029 --> 00:12:54,470
with a tag towel what first happens is

322
00:12:52,730 --> 00:12:57,319
you generate a new verification key

323
00:12:54,470 --> 00:12:58,670
signing key pair and what's that's once

324
00:12:57,319 --> 00:13:00,560
that's done the marquee is this new

325
00:12:58,670 --> 00:13:02,599
verification signing key pair along with

326
00:13:00,560 --> 00:13:05,149
the tag and the certificate signature

327
00:13:02,600 --> 00:13:09,230
under the original signing key of this

328
00:13:05,149 --> 00:13:11,209
verification key tag pair okay

329
00:13:09,230 --> 00:13:14,029
now how do you sign how do you sign with

330
00:13:11,209 --> 00:13:15,469
this mark key well you output this new

331
00:13:14,029 --> 00:13:16,880
verification key in the tag and the

332
00:13:15,470 --> 00:13:19,310
clear along with this certificate

333
00:13:16,880 --> 00:13:22,900
signature and then you sign the message

334
00:13:19,310 --> 00:13:25,329
M with the new signing key SK Prime

335
00:13:22,900 --> 00:13:29,170
okay now why does this work so how do

336
00:13:25,330 --> 00:13:30,850
you verify to verify signatures from the

337
00:13:29,170 --> 00:13:33,910
unmarked signing key you simply run the

338
00:13:30,850 --> 00:13:37,570
verification algorithm and to verify

339
00:13:33,910 --> 00:13:40,029
signatures signed by the marked key you

340
00:13:37,570 --> 00:13:42,250
do a two-step verification process where

341
00:13:40,029 --> 00:13:45,490
you first verify that the certificate

342
00:13:42,250 --> 00:13:48,970
signature is indeed a valid signature on

343
00:13:45,490 --> 00:13:52,270
this verification key in the tag towel

344
00:13:48,970 --> 00:13:54,850
and then once that's done you also check

345
00:13:52,270 --> 00:13:56,680
that this signature on the message M

346
00:13:54,850 --> 00:13:59,350
verifies with respect to the new signing

347
00:13:56,680 --> 00:14:04,180
key SK Prime and if both checks pass you

348
00:13:59,350 --> 00:14:07,020
say that the signature verifies okay now

349
00:14:04,180 --> 00:14:09,160
how would you extract or okay sorry

350
00:14:07,020 --> 00:14:10,870
observe here that the marked circuit

351
00:14:09,160 --> 00:14:13,180
outputs different signatures clearly

352
00:14:10,870 --> 00:14:15,310
different signatures than the unmarked

353
00:14:13,180 --> 00:14:18,599
circuit here but both verify with

354
00:14:15,310 --> 00:14:18,599
respect to the verification procedure

355
00:14:18,660 --> 00:14:24,189
okay so now how would you extract well

356
00:14:22,779 --> 00:14:26,110
the extraction procedure is very simple

357
00:14:24,190 --> 00:14:28,240
you can simply just find tau in a valid

358
00:14:26,110 --> 00:14:30,370
signature that is you sample random

359
00:14:28,240 --> 00:14:33,670
messages see what the circuit outputs

360
00:14:30,370 --> 00:14:35,820
and if a signature verifies in a mark

361
00:14:33,670 --> 00:14:37,930
circuit the signature will be of the

362
00:14:35,820 --> 00:14:40,330
signatures of the form of the marked

363
00:14:37,930 --> 00:14:41,920
signature and you can just take tau

364
00:14:40,330 --> 00:14:45,940
straight from straight from the

365
00:14:41,920 --> 00:14:48,010
signature okay and and why does

366
00:14:45,940 --> 00:14:50,050
unremovable t follow well if you look at

367
00:14:48,010 --> 00:14:51,790
the marked key there's no information

368
00:14:50,050 --> 00:14:53,680
about the signing key in there except a

369
00:14:51,790 --> 00:14:57,790
signature on this verification key tag

370
00:14:53,680 --> 00:15:00,279
pair so in particular for an adversary

371
00:14:57,790 --> 00:15:02,230
to sign produce a signature by the

372
00:15:00,279 --> 00:15:04,209
unmarked algorithm would have to produce

373
00:15:02,230 --> 00:15:05,709
a forgery or to produce a signature by

374
00:15:04,209 --> 00:15:07,300
the marked algorithm it would also have

375
00:15:05,709 --> 00:15:10,869
to produce a forgery on this on a

376
00:15:07,300 --> 00:15:13,390
different certificate of B K Prime Intel

377
00:15:10,870 --> 00:15:14,800
which it can't do so particularly the

378
00:15:13,390 --> 00:15:16,300
only kind of signatures that can output

379
00:15:14,800 --> 00:15:17,800
our signature is a marked form where the

380
00:15:16,300 --> 00:15:21,910
tag tau isn't that clear and it can be

381
00:15:17,800 --> 00:15:24,760
extracted okay

382
00:15:21,910 --> 00:15:26,140
just note that the extract algorithm in

383
00:15:24,760 --> 00:15:29,050
our construction does need to know the

384
00:15:26,140 --> 00:15:30,790
verification key in order to extract but

385
00:15:29,050 --> 00:15:35,500
every this is assumed to be public but

386
00:15:30,790 --> 00:15:36,730
there's not that big of a deal okay and

387
00:15:35,500 --> 00:15:38,260
I don't have a lot of time to talk about

388
00:15:36,730 --> 00:15:40,360
our second construction but just briefly

389
00:15:38,260 --> 00:15:42,670
we I'm just going to say so the other

390
00:15:40,360 --> 00:15:44,260
construction is on on water marking the

391
00:15:42,670 --> 00:15:45,760
decryption functionality of a public key

392
00:15:44,260 --> 00:15:48,700
predicate or attribute based encryption

393
00:15:45,760 --> 00:15:49,060
scheme and so what are our main results

394
00:15:48,700 --> 00:15:51,940
here

395
00:15:49,060 --> 00:15:54,189
well we obtain secret marking and

396
00:15:51,940 --> 00:15:55,840
extraction fully collusion resistant at

397
00:15:54,190 --> 00:15:59,950
water markable attribute based

398
00:15:55,840 --> 00:16:01,510
encryption and we obtain fully public

399
00:15:59,950 --> 00:16:05,470
bounded collusion resistant water

400
00:16:01,510 --> 00:16:07,390
markable predicate encryption and the

401
00:16:05,470 --> 00:16:09,340
way we do this is using techniques it's

402
00:16:07,390 --> 00:16:13,060
conceptually similar to the notion of

403
00:16:09,340 --> 00:16:15,100
attribute based trader tracing and

404
00:16:13,060 --> 00:16:17,800
another property of this construction is

405
00:16:15,100 --> 00:16:20,650
we achieve stronger on removability

406
00:16:17,800 --> 00:16:22,540
guarantees in particular our route are

407
00:16:20,650 --> 00:16:23,800
unremovable 'ti guarantees of a

408
00:16:22,540 --> 00:16:25,839
distinguish instead of a decryption

409
00:16:23,800 --> 00:16:31,209
flavor like in trader tracing and what i

410
00:16:25,840 --> 00:16:33,040
mean by that is that the adversaries the

411
00:16:31,210 --> 00:16:36,940
adversary even an adversary that outputs

412
00:16:33,040 --> 00:16:41,140
a circuit that is only good at

413
00:16:36,940 --> 00:16:43,180
decrypting to two different messages

414
00:16:41,140 --> 00:16:44,680
encrypted under the same attribute it

415
00:16:43,180 --> 00:16:49,689
can only distinguish between two types

416
00:16:44,680 --> 00:16:51,130
of ciphertext against against actually

417
00:16:49,690 --> 00:16:52,510
that puts a circuit that's only good at

418
00:16:51,130 --> 00:16:54,160
distinguishing between two different

419
00:16:52,510 --> 00:16:56,260
types of encryption we can still recover

420
00:16:54,160 --> 00:16:58,959
the tag so it doesn't need to be a good

421
00:16:56,260 --> 00:17:00,730
descriptor for basically almost anything

422
00:16:58,960 --> 00:17:03,100
it just has to be able to distinguish ER

423
00:17:00,730 --> 00:17:07,110
between two types of encryptions and we

424
00:17:03,100 --> 00:17:09,099
can still recover the tag okay and just

425
00:17:07,109 --> 00:17:10,810
just to go in a little more detail on

426
00:17:09,099 --> 00:17:15,669
our construction of occlusion resistant

427
00:17:10,810 --> 00:17:17,470
watermark will AV e so to just provide

428
00:17:15,670 --> 00:17:20,890
some intuition we observe some parallels

429
00:17:17,470 --> 00:17:23,530
between trader tracing and watermark and

430
00:17:20,890 --> 00:17:25,720
ball encryption so for those not

431
00:17:23,530 --> 00:17:27,160
familiar a trader tracing scheme is

432
00:17:25,720 --> 00:17:30,250
basically some public key encryption

433
00:17:27,160 --> 00:17:32,020
scheme where you can give out different

434
00:17:30,250 --> 00:17:34,690
secret keys to different users with the

435
00:17:32,020 --> 00:17:35,350
property that if some subset of users

436
00:17:34,690 --> 00:17:37,480
collude

437
00:17:35,350 --> 00:17:39,219
and create some like pirate decryption

438
00:17:37,480 --> 00:17:43,510
algorithm together there exists some

439
00:17:39,220 --> 00:17:45,700
trace algorithm that can recover from

440
00:17:43,510 --> 00:17:48,809
this party to decrypt er one of the

441
00:17:45,700 --> 00:17:52,450
users that colluded to construct it and

442
00:17:48,809 --> 00:17:53,980
this should intuitively seem similar to

443
00:17:52,450 --> 00:17:57,760
to this notion of water markable

444
00:17:53,980 --> 00:17:59,559
encryption in the sense that like these

445
00:17:57,760 --> 00:18:00,820
mark keys kind of like user decryption

446
00:17:59,559 --> 00:18:04,830
keys right because the adversary is

447
00:18:00,820 --> 00:18:06,789
saying seeing many marked keys and then

448
00:18:04,830 --> 00:18:08,799
combines all these mark keys to try to

449
00:18:06,789 --> 00:18:10,780
come up with some some like pirate

450
00:18:08,799 --> 00:18:13,620
circuit sort of write some circuit where

451
00:18:10,780 --> 00:18:15,399
the mark has been removed right and an

452
00:18:13,620 --> 00:18:17,139
extraction should be sort of thought of

453
00:18:15,400 --> 00:18:19,570
as tracing right even given this prior

454
00:18:17,140 --> 00:18:20,890
decoder or given this circuit that has

455
00:18:19,570 --> 00:18:23,580
been constructed by the adversary you

456
00:18:20,890 --> 00:18:27,039
should still be able to extract or trace

457
00:18:23,580 --> 00:18:29,889
to recover the mark or like one of the

458
00:18:27,039 --> 00:18:31,600
users in the colluding set so this

459
00:18:29,890 --> 00:18:33,520
hopefully this is just some intuition as

460
00:18:31,600 --> 00:18:34,990
to how we might be able to to achieve

461
00:18:33,520 --> 00:18:38,408
this using techniques from trader

462
00:18:34,990 --> 00:18:40,030
tracing and basically we were able to do

463
00:18:38,409 --> 00:18:42,520
this using tools recently developed in

464
00:18:40,030 --> 00:18:44,500
the trade of tracing literature in

465
00:18:42,520 --> 00:18:45,908
particular the notion of a mixed

466
00:18:44,500 --> 00:18:48,820
functional encryption introduced by

467
00:18:45,909 --> 00:18:50,289
going out couple and Watters and of

468
00:18:48,820 --> 00:18:55,059
course we needed attribute based

469
00:18:50,289 --> 00:18:58,120
encryption okay so what are the main

470
00:18:55,059 --> 00:19:00,399
takeaways from our work well we we gave

471
00:18:58,120 --> 00:19:02,049
simple constructions of watermarking for

472
00:19:00,400 --> 00:19:04,480
public key primitives right we showed

473
00:19:02,049 --> 00:19:06,610
from one-way functions or signatures how

474
00:19:04,480 --> 00:19:08,770
to get water markable signatures and we

475
00:19:06,610 --> 00:19:10,570
showed using mixed functional encryption

476
00:19:08,770 --> 00:19:13,270
and attribute based encryption how to

477
00:19:10,570 --> 00:19:16,480
get watermark or a b e or predicating

478
00:19:13,270 --> 00:19:17,590
group and the other takeaway is that we

479
00:19:16,480 --> 00:19:20,470
strengthened definitions of water

480
00:19:17,590 --> 00:19:22,209
marking and gave what we believe are

481
00:19:20,470 --> 00:19:27,130
appropriate definitions for for water

482
00:19:22,210 --> 00:19:29,200
marking these primitives okay and so

483
00:19:27,130 --> 00:19:31,809
this work leads to some natural open

484
00:19:29,200 --> 00:19:33,700
questions are there other ways to water

485
00:19:31,809 --> 00:19:35,620
mark other different different

486
00:19:33,700 --> 00:19:37,659
cryptographic primitives simply from

487
00:19:35,620 --> 00:19:39,010
standard assumptions right in this work

488
00:19:37,659 --> 00:19:41,470
we showed that even public even though

489
00:19:39,010 --> 00:19:42,730
public key primitives are more complex

490
00:19:41,470 --> 00:19:44,620
seem more complex than the secret key

491
00:19:42,730 --> 00:19:46,360
primitives they can actually be water

492
00:19:44,620 --> 00:19:47,770
marked quite simply and maybe this holds

493
00:19:46,360 --> 00:19:48,820
for other cryptographic primitives for

494
00:19:47,770 --> 00:19:52,539
which water marking has

495
00:19:48,820 --> 00:19:54,189
and studied another natural open

496
00:19:52,539 --> 00:19:55,870
question is can we obtain fully

497
00:19:54,190 --> 00:19:59,169
collusion resistant fully public

498
00:19:55,870 --> 00:20:01,239
watermark Oh bleh ve recall in order to

499
00:19:59,169 --> 00:20:05,669
get this full collusion resistance we

500
00:20:01,240 --> 00:20:09,009
required a secret marking and extraction

501
00:20:05,669 --> 00:20:12,130
and the final open question I have is

502
00:20:09,009 --> 00:20:13,840
are there better or new definitions for

503
00:20:12,130 --> 00:20:15,519
watermarking right because what our work

504
00:20:13,840 --> 00:20:17,949
shows sort of is that getting

505
00:20:15,519 --> 00:20:19,480
definitions for water marking it can be

506
00:20:17,950 --> 00:20:20,860
quite tricky and it's often tailored to

507
00:20:19,480 --> 00:20:23,230
the exact functionality that you want a

508
00:20:20,860 --> 00:20:33,820
watermark so this is definitely a

509
00:20:23,230 --> 00:20:35,409
direction for future study thank you if

510
00:20:33,820 --> 00:20:47,009
you have a question please come to the

511
00:20:35,409 --> 00:20:49,659
microphone okay I have two questions

512
00:20:47,009 --> 00:20:51,850
one is is there any particular

513
00:20:49,659 --> 00:20:55,090
applications of the collision-resistant

514
00:20:51,850 --> 00:20:57,539
watermark of signatures I mean so for

515
00:20:55,090 --> 00:21:04,178
watermark public key encryption is

516
00:20:57,539 --> 00:21:06,129
almost the same as data racing right so

517
00:21:04,179 --> 00:21:08,590
so for signature yes is there any

518
00:21:06,129 --> 00:21:13,149
application about corrosion resistant

519
00:21:08,590 --> 00:21:16,178
watermark oh that's a good question um I

520
00:21:13,149 --> 00:21:17,320
mean you might want to like right you

521
00:21:16,179 --> 00:21:18,490
might want to watermark your signature

522
00:21:17,320 --> 00:21:19,689
with different tags and get be able to

523
00:21:18,490 --> 00:21:22,090
give them out to different users right

524
00:21:19,690 --> 00:21:23,559
be able to put in names if different

525
00:21:22,090 --> 00:21:28,120
users and then have the property that

526
00:21:23,559 --> 00:21:30,190
like these users cannot write like this

527
00:21:28,120 --> 00:21:32,320
seems like a reasonable thing you might

528
00:21:30,190 --> 00:21:34,690
want to do right this seems related to

529
00:21:32,320 --> 00:21:39,009
like group signatures or something okay

530
00:21:34,690 --> 00:21:41,350
yeah so the second one is so you said

531
00:21:39,009 --> 00:21:43,029
achieve the corrosion resistant to

532
00:21:41,350 --> 00:21:46,959
automatically be right

533
00:21:43,029 --> 00:21:48,970
so collision resistant means I think

534
00:21:46,960 --> 00:21:50,950
there are two aspects I mean collision

535
00:21:48,970 --> 00:21:54,580
resistant a B or collision resistant

536
00:21:50,950 --> 00:21:56,529
water marking which one do you yeah yeah

537
00:21:54,580 --> 00:21:57,070
so we we get collusion resistant water

538
00:21:56,529 --> 00:21:59,090
marking

539
00:21:57,070 --> 00:22:01,429
okay the water market is able to

540
00:21:59,090 --> 00:22:04,560
get the encryption circuit marked with

541
00:22:01,430 --> 00:22:08,310
unban a polynomial number of tags so it

542
00:22:04,560 --> 00:22:11,129
means as an EBE it's not collision free

543
00:22:08,310 --> 00:22:13,560
collision resistant or no because only

544
00:22:11,130 --> 00:22:15,600
from collision resistant a de but but

545
00:22:13,560 --> 00:22:26,980
bound inclusion resistant mixed Fe

546
00:22:15,600 --> 00:22:27,929
ok guys more questions okay let's

547
00:22:26,980 --> 00:22:33,469
because it's a game

548
00:22:27,930 --> 00:22:33,469
[Applause]

