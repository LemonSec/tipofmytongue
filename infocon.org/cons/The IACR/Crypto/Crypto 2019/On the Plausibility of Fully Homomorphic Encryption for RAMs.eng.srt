1
00:00:06,140 --> 00:00:13,489
so today I will be talking about our

2
00:00:09,080 --> 00:00:16,520
recent work on fhg in the RAM model this

3
00:00:13,490 --> 00:00:18,289
is a joint work with Justin Moore Weiss

4
00:00:16,520 --> 00:00:21,470
and Daniel wicks

5
00:00:18,289 --> 00:00:22,940
so consider the setting where I actually

6
00:00:21,470 --> 00:00:25,580
know which button to press to advance

7
00:00:22,940 --> 00:00:27,680
the slides consider the setting in which

8
00:00:25,580 --> 00:00:30,110
we have a data owner that has some

9
00:00:27,680 --> 00:00:32,509
database that they wish to outsource to

10
00:00:30,110 --> 00:00:34,850
the cloud encrypt it we're considering

11
00:00:32,509 --> 00:00:37,999
in this case the server to be our

12
00:00:34,850 --> 00:00:41,899
adversary and this data owner would like

13
00:00:37,999 --> 00:00:45,979
to allow other clients to essentially

14
00:00:41,899 --> 00:00:48,589
upload programs to the server the server

15
00:00:45,979 --> 00:00:52,248
to execute them and hand back the

16
00:00:48,589 --> 00:00:54,469
encrypted results so in this paradigm we

17
00:00:52,249 --> 00:00:57,949
have a client who says I would like to

18
00:00:54,469 --> 00:00:59,809
run a binary search program across this

19
00:00:57,949 --> 00:01:03,699
database that this data owner has

20
00:00:59,809 --> 00:01:05,960
provided so the client has to hand some

21
00:01:03,699 --> 00:01:08,750
representation of this program to the

22
00:01:05,960 --> 00:01:12,079
server for it to run and the traditional

23
00:01:08,750 --> 00:01:14,090
fhe setting this program takes the form

24
00:01:12,079 --> 00:01:17,779
of a circuit whether it be boolean or

25
00:01:14,090 --> 00:01:20,780
arithmetic so it hands this over the

26
00:01:17,780 --> 00:01:24,229
circuit by Mississippi takes in the

27
00:01:20,780 --> 00:01:26,570
entire database as input and outputs

28
00:01:24,229 --> 00:01:28,670
some encrypted results which is then

29
00:01:26,570 --> 00:01:31,008
handed back to the client to do with

30
00:01:28,670 --> 00:01:33,439
what they will I will note in the

31
00:01:31,009 --> 00:01:35,840
setting the server itself can also

32
00:01:33,439 --> 00:01:38,148
submit programs that it wants to run and

33
00:01:35,840 --> 00:01:40,759
it will get some encrypted output with

34
00:01:38,149 --> 00:01:43,310
but without the key the output is

35
00:01:40,759 --> 00:01:45,020
essentially meaningless so in this

36
00:01:43,310 --> 00:01:47,210
setting where we're considering a

37
00:01:45,020 --> 00:01:51,079
circuit representation of this program

38
00:01:47,210 --> 00:01:53,329
the runtime by necessity is going to be

39
00:01:51,079 --> 00:01:54,408
at least linear in the size of the data

40
00:01:53,329 --> 00:01:57,589
set

41
00:01:54,409 --> 00:02:00,049
which in the case of algorithms such as

42
00:01:57,590 --> 00:02:02,359
binary search which would have a

43
00:02:00,049 --> 00:02:06,439
logarithmic runtime in the size of the

44
00:02:02,359 --> 00:02:09,049
database is really really sub optimal so

45
00:02:06,439 --> 00:02:10,639
this motivates the case of can we

46
00:02:09,050 --> 00:02:15,040
consider a different model of

47
00:02:10,639 --> 00:02:16,890
computation to allow for fhe

48
00:02:15,040 --> 00:02:20,340
particularly if we

49
00:02:16,890 --> 00:02:26,489
are able to give the underlying program

50
00:02:20,340 --> 00:02:30,180
in its Ram program format essentially we

51
00:02:26,490 --> 00:02:32,670
give the server some representation that

52
00:02:30,180 --> 00:02:35,340
allows it to make queries into this

53
00:02:32,670 --> 00:02:38,309
encrypted database get that value back

54
00:02:35,340 --> 00:02:42,180
and fold that into the subsequent

55
00:02:38,310 --> 00:02:47,280
computations so on and so forth until we

56
00:02:42,180 --> 00:02:50,160
get the encrypted results well this is

57
00:02:47,280 --> 00:02:53,010
the model that we are working in and it

58
00:02:50,160 --> 00:02:55,109
much more closely adheres to the

59
00:02:53,010 --> 00:02:57,480
underlying runtime of the program

60
00:02:55,110 --> 00:03:01,980
offered to the server namely in this

61
00:02:57,480 --> 00:03:06,988
case we are able to achieve a runtime

62
00:03:01,980 --> 00:03:09,660
much much more sort of close to our

63
00:03:06,989 --> 00:03:12,030
underlying log and runtime of binary

64
00:03:09,660 --> 00:03:14,010
search so this is the model of

65
00:03:12,030 --> 00:03:18,060
computation that we want to support in

66
00:03:14,010 --> 00:03:20,790
our Ram fhe setting and construction I

67
00:03:18,060 --> 00:03:23,880
will note that we differ from other

68
00:03:20,790 --> 00:03:27,120
primitives sort of of this type such as

69
00:03:23,880 --> 00:03:30,510
garbled Ram and that we allow any person

70
00:03:27,120 --> 00:03:32,910
to come along and submit these programs

71
00:03:30,510 --> 00:03:34,829
essentially and we're not limited to a

72
00:03:32,910 --> 00:03:37,530
certain class of program essentially we

73
00:03:34,830 --> 00:03:40,140
can say submit NEP here and have the

74
00:03:37,530 --> 00:03:43,739
server essentially run this and get some

75
00:03:40,140 --> 00:03:46,320
encrypted output so that being our

76
00:03:43,739 --> 00:03:49,200
setting our goal of this talk is to

77
00:03:46,320 --> 00:03:53,579
construct the first sort of proof of

78
00:03:49,200 --> 00:03:56,910
concept construction of Ram fhe and to

79
00:03:53,580 --> 00:04:01,640
run in this setting essentially any Ram

80
00:03:56,910 --> 00:04:04,130
program across an encrypted database so

81
00:04:01,640 --> 00:04:07,230
syntactically what does this look like

82
00:04:04,130 --> 00:04:09,840
it is essentially the standard fhe

83
00:04:07,230 --> 00:04:12,179
syntax or public key encryption syntax

84
00:04:09,840 --> 00:04:14,940
in which we have a key generation

85
00:04:12,180 --> 00:04:18,418
algorithm an encryption algorithm that

86
00:04:14,940 --> 00:04:21,630
takes in the database and outputs an

87
00:04:18,418 --> 00:04:24,440
encrypted version of that database and a

88
00:04:21,630 --> 00:04:27,770
decryption algorithm that takes in

89
00:04:24,440 --> 00:04:30,590
decrypts if you have the secret key in

90
00:04:27,770 --> 00:04:34,370
addition we have an evaluation algorithm

91
00:04:30,590 --> 00:04:38,780
that is capable of taking in some Ram

92
00:04:34,370 --> 00:04:42,290
program P some time bound T which we

93
00:04:38,780 --> 00:04:46,219
expect P to run in less than and outputs

94
00:04:42,290 --> 00:04:48,470
the encrypted value of running P across

95
00:04:46,220 --> 00:04:51,620
this encrypted database so here

96
00:04:48,470 --> 00:04:54,040
represented as P superscript DB and this

97
00:04:51,620 --> 00:04:56,180
value is encrypted using the public key

98
00:04:54,040 --> 00:04:59,890
decryption then is able to take this

99
00:04:56,180 --> 00:05:02,690
value in and essentially output the

100
00:04:59,890 --> 00:05:06,740
result of running this program across

101
00:05:02,690 --> 00:05:08,410
this encrypted database we say that

102
00:05:06,740 --> 00:05:10,880
security is standard

103
00:05:08,410 --> 00:05:13,340
indistinguishability CPA we should not

104
00:05:10,880 --> 00:05:15,500
be able to distinguish between two

105
00:05:13,340 --> 00:05:18,320
database encryptions nor should

106
00:05:15,500 --> 00:05:21,950
evaluation give us any information to be

107
00:05:18,320 --> 00:05:24,590
able to do that distinguishing what I've

108
00:05:21,950 --> 00:05:28,880
shown here is what we call our single

109
00:05:24,590 --> 00:05:31,460
hop fhe Ram paradigm which is to say

110
00:05:28,880 --> 00:05:34,280
that essentially any program that we

111
00:05:31,460 --> 00:05:37,549
want to run for evaluation is run across

112
00:05:34,280 --> 00:05:41,179
again the same database updates are not

113
00:05:37,550 --> 00:05:44,270
made as part of the program we also have

114
00:05:41,180 --> 00:05:46,310
a multi hop variant which does allow for

115
00:05:44,270 --> 00:05:48,080
updates in this database that are

116
00:05:46,310 --> 00:05:51,980
present and can be folded into

117
00:05:48,080 --> 00:05:53,840
subsequent RAM executions I will be

118
00:05:51,980 --> 00:05:56,720
focusing primarily on the single hop

119
00:05:53,840 --> 00:06:01,280
version today see the paper for more

120
00:05:56,720 --> 00:06:05,570
details on the fhe multi-hop version so

121
00:06:01,280 --> 00:06:10,070
in this setting we are able to achieve

122
00:06:05,570 --> 00:06:12,469
at a high level a scheme based on secret

123
00:06:10,070 --> 00:06:15,790
key doubly efficient p r-- or deep here

124
00:06:12,470 --> 00:06:18,560
which are as a primitive sort of first

125
00:06:15,790 --> 00:06:22,220
introduced by Kennedy at all and boil at

126
00:06:18,560 --> 00:06:25,700
all and 2017 and VBB for a specific

127
00:06:22,220 --> 00:06:28,340
class of circuits these are fairly

128
00:06:25,700 --> 00:06:31,070
heavy-duty primitives but we were able

129
00:06:28,340 --> 00:06:33,500
to show that even with assuming these it

130
00:06:31,070 --> 00:06:35,539
is not a straightforward construction

131
00:06:33,500 --> 00:06:38,090
and which is why this is sort of the

132
00:06:35,539 --> 00:06:41,159
first proof of concept in this class

133
00:06:38,090 --> 00:06:43,530
we are able to get in terms of

134
00:06:41,160 --> 00:06:46,680
complexity for any epsilon greater than

135
00:06:43,530 --> 00:06:50,460
zero an evaluation runtime for our

136
00:06:46,680 --> 00:06:52,740
single hop case and which is T where T

137
00:06:50,460 --> 00:06:55,200
is the runtime of the underlying Ram

138
00:06:52,740 --> 00:06:58,770
program lambda is our security parameter

139
00:06:55,200 --> 00:07:00,690
and n is the size of our database we are

140
00:06:58,770 --> 00:07:04,650
able to get essentially a runtime that

141
00:07:00,690 --> 00:07:07,860
only has a poly log n overhead over just

142
00:07:04,650 --> 00:07:11,460
the plane evaluation of the program for

143
00:07:07,860 --> 00:07:13,740
our multi hop case same parameters

144
00:07:11,460 --> 00:07:15,930
except that we have an N to the epsilon

145
00:07:13,740 --> 00:07:18,210
overhead as well essentially

146
00:07:15,930 --> 00:07:20,640
representing the changes that you have

147
00:07:18,210 --> 00:07:24,570
sort of done to the database and

148
00:07:20,640 --> 00:07:27,320
ingesting those we also introduced as

149
00:07:24,570 --> 00:07:30,990
part of our construction a variant on

150
00:07:27,320 --> 00:07:33,270
rewind or an o RAM that we call rewind

151
00:07:30,990 --> 00:07:37,190
below Ram which we believe is a

152
00:07:33,270 --> 00:07:40,710
primitive of independent interest so

153
00:07:37,190 --> 00:07:43,110
without further ado I want to go into a

154
00:07:40,710 --> 00:07:47,010
little bit of how we actually construct

155
00:07:43,110 --> 00:07:48,960
RAM for fhe so remember our setting

156
00:07:47,010 --> 00:07:51,510
where we have our database we have our

157
00:07:48,960 --> 00:07:54,450
evaluator that takes in a program a time

158
00:07:51,510 --> 00:07:57,690
bound and outputs an encrypted result of

159
00:07:54,450 --> 00:08:00,360
evaluating P over this data set we have

160
00:07:57,690 --> 00:08:03,620
four primary difficulties in this

161
00:08:00,360 --> 00:08:06,660
construction the first of which is

162
00:08:03,620 --> 00:08:09,210
because we have RAM access to this

163
00:08:06,660 --> 00:08:11,880
database inherently we have access

164
00:08:09,210 --> 00:08:15,020
patterns what elements of the database

165
00:08:11,880 --> 00:08:17,520
that the evaluator is actually accessing

166
00:08:15,020 --> 00:08:20,490
and we have to hide these access

167
00:08:17,520 --> 00:08:22,890
patterns without necessarily having a

168
00:08:20,490 --> 00:08:26,490
consistent state between different

169
00:08:22,890 --> 00:08:28,919
executions of different programs we also

170
00:08:26,490 --> 00:08:31,500
need within an execution of a single

171
00:08:28,919 --> 00:08:34,199
program the ability to evaluate or

172
00:08:31,500 --> 00:08:36,210
emulate statefulness so program

173
00:08:34,200 --> 00:08:38,520
essentially has States you can think of

174
00:08:36,210 --> 00:08:40,950
it as the register contents or things

175
00:08:38,520 --> 00:08:43,468
like that and we need to hide this

176
00:08:40,950 --> 00:08:45,360
evaluation state from the evaluator or

177
00:08:43,469 --> 00:08:49,410
the server who we are considering

178
00:08:45,360 --> 00:08:50,560
malicious we also have to enforce honest

179
00:08:49,410 --> 00:08:54,160
behavior of this event

180
00:08:50,560 --> 00:08:56,380
waiter so they don't essentially twist

181
00:08:54,160 --> 00:08:58,150
the evaluation of the program in order

182
00:08:56,380 --> 00:09:01,090
to get information about the database

183
00:08:58,150 --> 00:09:04,209
and finally as part of this evaluation

184
00:09:01,090 --> 00:09:06,460
process hiding access patterns and

185
00:09:04,210 --> 00:09:09,460
encrypting this final result requires

186
00:09:06,460 --> 00:09:12,490
randomness so we mean the evaluator to

187
00:09:09,460 --> 00:09:15,070
be able to generate that to feed it into

188
00:09:12,490 --> 00:09:20,140
those two steps so those are our four

189
00:09:15,070 --> 00:09:23,170
main areas of difficulty today these

190
00:09:20,140 --> 00:09:26,800
three with some crypto tricks and

191
00:09:23,170 --> 00:09:29,890
throwing VBB off eustachian are tricky

192
00:09:26,800 --> 00:09:32,229
but quite doable this one is the mean

193
00:09:29,890 --> 00:09:34,420
source of difficulty here how do we hide

194
00:09:32,230 --> 00:09:37,660
access patterns without necessarily

195
00:09:34,420 --> 00:09:40,270
having a consistent state and that's

196
00:09:37,660 --> 00:09:43,540
what I want to focus on today which is

197
00:09:40,270 --> 00:09:47,800
how do we build a tool that allows us to

198
00:09:43,540 --> 00:09:51,150
hide these access patterns so to

199
00:09:47,800 --> 00:09:54,099
motivate why this is difficult

200
00:09:51,150 --> 00:09:56,230
consider our following case where the

201
00:09:54,100 --> 00:09:59,580
program that we are asking the evaluator

202
00:09:56,230 --> 00:10:02,020
to evaluate is the following if we have

203
00:09:59,580 --> 00:10:05,140
we essentially read the first element of

204
00:10:02,020 --> 00:10:07,329
the database and if it is less than 5 we

205
00:10:05,140 --> 00:10:09,010
do some access if it's not we read the

206
00:10:07,330 --> 00:10:12,160
third element and do a different access

207
00:10:09,010 --> 00:10:16,480
so inherently built into this program is

208
00:10:12,160 --> 00:10:19,930
some information about the first element

209
00:10:16,480 --> 00:10:23,589
of the database and the evaluator even

210
00:10:19,930 --> 00:10:26,020
not getting the decrypted output can

211
00:10:23,589 --> 00:10:27,790
tell what is the first element of the

212
00:10:26,020 --> 00:10:30,400
database or at least some information

213
00:10:27,790 --> 00:10:35,079
about it based on the access patterns

214
00:10:30,400 --> 00:10:39,100
alone and this will now remember our Ram

215
00:10:35,080 --> 00:10:41,650
fhe security goal this will break it so

216
00:10:39,100 --> 00:10:43,720
hiding access patterns is imperative if

217
00:10:41,650 --> 00:10:47,410
we want to achieve security of our

218
00:10:43,720 --> 00:10:50,620
overarching Ram fhe construction so

219
00:10:47,410 --> 00:10:53,890
consider the case where we've solved all

220
00:10:50,620 --> 00:10:59,050
of the problems VBB does everything and

221
00:10:53,890 --> 00:11:01,480
so what we're going to do now is forgive

222
00:10:59,050 --> 00:11:03,079
me there this some of the graphics have

223
00:11:01,480 --> 00:11:05,630
gotten a little mad

224
00:11:03,080 --> 00:11:07,880
stuff in the translation process so

225
00:11:05,630 --> 00:11:10,400
consider this being the Oh Ram client

226
00:11:07,880 --> 00:11:13,370
state so we have as part of our

227
00:11:10,400 --> 00:11:17,120
evaluation process an obfuscated Oh Ram

228
00:11:13,370 --> 00:11:21,790
client with some state if we want to run

229
00:11:17,120 --> 00:11:26,150
the program which is going to be P here

230
00:11:21,790 --> 00:11:27,920
from our previous example and all of

231
00:11:26,150 --> 00:11:31,300
these accesses are now happening

232
00:11:27,920 --> 00:11:35,660
underneath sort of the o Ram client here

233
00:11:31,300 --> 00:11:37,819
we can say that these access patterns

234
00:11:35,660 --> 00:11:40,910
are essentially hidden and not giving

235
00:11:37,820 --> 00:11:44,510
the adversary any information about the

236
00:11:40,910 --> 00:11:46,939
database however the o Ram client is

237
00:11:44,510 --> 00:11:51,020
going to essentially run it will update

238
00:11:46,940 --> 00:11:53,960
its own internal state it has to do so

239
00:11:51,020 --> 00:11:55,790
in order to provide obliviousness either

240
00:11:53,960 --> 00:11:58,070
push things down a path or shuffle

241
00:11:55,790 --> 00:12:00,980
things around depending on your Oh RAM

242
00:11:58,070 --> 00:12:02,840
construction once we're done with this

243
00:12:00,980 --> 00:12:07,070
program however and we want to run

244
00:12:02,840 --> 00:12:09,170
another program imagine that this is

245
00:12:07,070 --> 00:12:12,530
changing different colors to represent a

246
00:12:09,170 --> 00:12:16,010
new state the o RAM is now in a new

247
00:12:12,530 --> 00:12:19,130
state in order to run another program

248
00:12:16,010 --> 00:12:24,380
however P prime this state is going to

249
00:12:19,130 --> 00:12:26,540
revert back to our original a ram state

250
00:12:24,380 --> 00:12:30,080
because things are not preserved between

251
00:12:26,540 --> 00:12:33,430
different executions because we are in

252
00:12:30,080 --> 00:12:37,610
sort of a case where state is not shared

253
00:12:33,430 --> 00:12:41,109
so in practice the state is going to be

254
00:12:37,610 --> 00:12:44,360
remapped so when we execute this program

255
00:12:41,110 --> 00:12:47,750
we are making essentially the same style

256
00:12:44,360 --> 00:12:51,620
or the same first access in P Prime as

257
00:12:47,750 --> 00:12:55,660
in the original P and so we are going to

258
00:12:51,620 --> 00:12:59,360
get the exact same first access pattern

259
00:12:55,660 --> 00:13:02,569
in our subsequent program execution as

260
00:12:59,360 --> 00:13:05,660
we did in our initial one this means

261
00:13:02,570 --> 00:13:08,240
that essentially standard Oh Ram schemes

262
00:13:05,660 --> 00:13:10,689
because our state is not maintained

263
00:13:08,240 --> 00:13:12,830
between two different program executions

264
00:13:10,690 --> 00:13:14,910
it's not going to maintain its

265
00:13:12,830 --> 00:13:17,940
obliviousness it will have the exact

266
00:13:14,910 --> 00:13:20,280
same access pattern because that initial

267
00:13:17,940 --> 00:13:24,600
element is going to be in the exact same

268
00:13:20,280 --> 00:13:26,760
place in that initial state so we're not

269
00:13:24,600 --> 00:13:28,800
providing obliviousness we are not no

270
00:13:26,760 --> 00:13:30,960
longer hiding access patterns and thus

271
00:13:28,800 --> 00:13:33,510
our RAM fhe security is going to be

272
00:13:30,960 --> 00:13:36,630
broken if we just assume we have a

273
00:13:33,510 --> 00:13:39,600
standard Oh Ram client using VBB off you

274
00:13:36,630 --> 00:13:42,930
station which makes us realize that we

275
00:13:39,600 --> 00:13:45,810
need an oblivious Ram with an additional

276
00:13:42,930 --> 00:13:49,170
property namely we need security

277
00:13:45,810 --> 00:13:52,859
so obliviousness is maintained when the

278
00:13:49,170 --> 00:13:56,459
client and server state are rewound to

279
00:13:52,860 --> 00:13:59,730
an initial or previous state we

280
00:13:56,460 --> 00:14:03,030
introduce two variants of this we have a

281
00:13:59,730 --> 00:14:06,540
initial State rewind herbal or ISRO Ram

282
00:14:03,030 --> 00:14:12,480
where we say obliviousness holds if we

283
00:14:06,540 --> 00:14:20,280
only rewind if we only rewind to

284
00:14:12,480 --> 00:14:21,930
essentially this initial okay sorry okay

285
00:14:20,280 --> 00:14:24,689
I'm not gonna mess with this anymore

286
00:14:21,930 --> 00:14:27,810
so only rewinds to essentially this

287
00:14:24,690 --> 00:14:30,120
initial state and subsequent executions

288
00:14:27,810 --> 00:14:33,719
or access patterns essentially create

289
00:14:30,120 --> 00:14:38,000
two parallel execution paths this is

290
00:14:33,720 --> 00:14:41,820
analogous to our single hop and is fhu

291
00:14:38,000 --> 00:14:43,440
in which this is the actual a Ram used

292
00:14:41,820 --> 00:14:45,810
to hide access patterns in that

293
00:14:43,440 --> 00:14:48,450
particular construction we also

294
00:14:45,810 --> 00:14:52,319
introduce a notion of any state rewind

295
00:14:48,450 --> 00:14:53,910
below Ram or a SRO Ram which instead of

296
00:14:52,320 --> 00:14:56,580
having sort of two parallel execution

297
00:14:53,910 --> 00:15:00,839
paths allows you to branch off from any

298
00:14:56,580 --> 00:15:02,940
intermediate point we have here that

299
00:15:00,840 --> 00:15:06,150
this is used primarily in our multi-hop

300
00:15:02,940 --> 00:15:08,460
fhe scheme and we formalize this through

301
00:15:06,150 --> 00:15:11,280
standard correctness and security games

302
00:15:08,460 --> 00:15:14,640
as in standard Oh Ram but we say that is

303
00:15:11,280 --> 00:15:15,560
parameterised through the state that you

304
00:15:14,640 --> 00:15:18,890
are in

305
00:15:15,560 --> 00:15:21,900
so our construction relies primarily on

306
00:15:18,890 --> 00:15:24,180
secret to deep here this is essentially

307
00:15:21,900 --> 00:15:26,970
in essence a read-only ORM scheme with a

308
00:15:24,180 --> 00:15:28,130
stateless client and server we have a

309
00:15:26,970 --> 00:15:31,260
set up

310
00:15:28,130 --> 00:15:33,840
function that takes in a database output

311
00:15:31,260 --> 00:15:35,810
some client key and an encoded database

312
00:15:33,840 --> 00:15:40,560
which is then handed to the server

313
00:15:35,810 --> 00:15:42,390
we say that essentially this gives us

314
00:15:40,560 --> 00:15:44,550
the same obliviousness security

315
00:15:42,390 --> 00:15:50,250
guarantees a standard Aram but only

316
00:15:44,550 --> 00:15:53,099
supports reads at this point we have

317
00:15:50,250 --> 00:15:55,560
constructions for this by committee at

318
00:15:53,100 --> 00:15:57,990
all and boil at all based on noisy /

319
00:15:55,560 --> 00:16:00,150
muted reed-muller codes and we can get

320
00:15:57,990 --> 00:16:04,860
different parameters based on the

321
00:16:00,150 --> 00:16:06,600
underlying reed-muller paradigms so what

322
00:16:04,860 --> 00:16:10,020
we have now is essentially a read-only

323
00:16:06,600 --> 00:16:12,540
isro Ram the question is how do we

324
00:16:10,020 --> 00:16:15,000
support writes we do this using a

325
00:16:12,540 --> 00:16:17,390
standard o Ram but the trick is when we

326
00:16:15,000 --> 00:16:20,360
initialize that standard of RAM our

327
00:16:17,390 --> 00:16:23,250
setup procedure takes in our database

328
00:16:20,360 --> 00:16:25,590
generates our client key and generates

329
00:16:23,250 --> 00:16:29,640
the encoded secret key deep your version

330
00:16:25,590 --> 00:16:31,710
of our database access also now is going

331
00:16:29,640 --> 00:16:33,510
to be R in charge of initializing the

332
00:16:31,710 --> 00:16:35,160
standard Oh Ram our first access

333
00:16:33,510 --> 00:16:37,560
regardless of whether it's a read or

334
00:16:35,160 --> 00:16:39,920
write will generate a standard empty Oh

335
00:16:37,560 --> 00:16:42,810
Ram and hand that to the server

336
00:16:39,920 --> 00:16:45,540
subsequent accesses if it's a write will

337
00:16:42,810 --> 00:16:46,459
grow that Oh Ram writing to it growing

338
00:16:45,540 --> 00:16:49,380
it as needed

339
00:16:46,460 --> 00:16:52,050
read accesses will read both of these

340
00:16:49,380 --> 00:16:54,870
two data structures and take it from the

341
00:16:52,050 --> 00:16:56,790
Oh Ram if it is present representing any

342
00:16:54,870 --> 00:17:00,720
updates that have been done to the

343
00:16:56,790 --> 00:17:03,780
static encoded database we get security

344
00:17:00,720 --> 00:17:05,940
here because any rewind will essentially

345
00:17:03,780 --> 00:17:08,910
erase that standard o RAM that is

346
00:17:05,940 --> 00:17:11,070
created upon the first access and the

347
00:17:08,910 --> 00:17:13,680
secret qdp error is essentially

348
00:17:11,069 --> 00:17:19,409
stateless giving us rewind security for

349
00:17:13,680 --> 00:17:22,260
free so in terms of our results we are

350
00:17:19,410 --> 00:17:25,230
able to construct an ISR and ASR Oh Ram

351
00:17:22,260 --> 00:17:28,470
scheme based on secret key deep here the

352
00:17:25,230 --> 00:17:31,770
schemes inherit the secret key deeper

353
00:17:28,470 --> 00:17:33,660
complexity namely initial state is poly

354
00:17:31,770 --> 00:17:35,700
log in the size of the database any

355
00:17:33,660 --> 00:17:38,610
state is slightly more complicated but

356
00:17:35,700 --> 00:17:40,920
not much and we are able to use this

357
00:17:38,610 --> 00:17:44,699
primitive now within our f8

358
00:17:40,920 --> 00:17:47,130
she construction so if you remember our

359
00:17:44,700 --> 00:17:49,500
four main problems we now have

360
00:17:47,130 --> 00:17:52,020
essentially tackled this one by saying

361
00:17:49,500 --> 00:17:55,260
steep does not matter so we do not need

362
00:17:52,020 --> 00:17:58,230
to maintain a consistent state we now

363
00:17:55,260 --> 00:18:00,629
have three remaining challenges the

364
00:17:58,230 --> 00:18:03,300
first of which is how do we emulate

365
00:18:00,630 --> 00:18:06,030
statefulness in and essentially hide

366
00:18:03,300 --> 00:18:09,409
that client state what we do here is

367
00:18:06,030 --> 00:18:12,210
represent the program as a series of

368
00:18:09,410 --> 00:18:15,570
obfuscated steps circuits so essentially

369
00:18:12,210 --> 00:18:18,390
a step circuit is going to take in the

370
00:18:15,570 --> 00:18:23,669
current client state it will take in a

371
00:18:18,390 --> 00:18:26,760
database entry basically a the database

372
00:18:23,670 --> 00:18:29,910
entry as requested by the Oh RAM client

373
00:18:26,760 --> 00:18:32,220
that the step circuit is running and the

374
00:18:29,910 --> 00:18:36,930
state itself will be encrypted under a

375
00:18:32,220 --> 00:18:38,430
hardwired key within this circuit we

376
00:18:36,930 --> 00:18:40,530
will then sort of do whatever the

377
00:18:38,430 --> 00:18:42,660
program tells us to do update the state

378
00:18:40,530 --> 00:18:44,970
and ask for the next value in this

379
00:18:42,660 --> 00:18:46,530
database so the evaluator is essentially

380
00:18:44,970 --> 00:18:50,190
just running a series of these step

381
00:18:46,530 --> 00:18:52,740
circuits up to time T we then throw a

382
00:18:50,190 --> 00:18:55,830
few station EBP obvious Kishin over that

383
00:18:52,740 --> 00:18:57,630
entire thing and call it a day

384
00:18:55,830 --> 00:19:00,030
so that is how we are able to get

385
00:18:57,630 --> 00:19:03,420
statefulness and hide that client state

386
00:19:00,030 --> 00:19:06,510
from the evaluator we also need to

387
00:19:03,420 --> 00:19:08,730
enforce honest behavior in order to get

388
00:19:06,510 --> 00:19:11,370
correctness for our ruined below Ram

389
00:19:08,730 --> 00:19:14,460
schemes and also security the way we do

390
00:19:11,370 --> 00:19:17,899
this is to that step circuit we add two

391
00:19:14,460 --> 00:19:20,850
things we add a Mac of the client state

392
00:19:17,900 --> 00:19:24,170
in order to say that we don't mix and

393
00:19:20,850 --> 00:19:27,209
match state we also over the database

394
00:19:24,170 --> 00:19:29,370
instantiate a Merkle tree so when any

395
00:19:27,210 --> 00:19:31,710
element that is given to the step

396
00:19:29,370 --> 00:19:34,649
circuit is also given the path in the

397
00:19:31,710 --> 00:19:36,750
Merkle tree which the step circuit can

398
00:19:34,650 --> 00:19:38,520
now evaluate and make sure that it is

399
00:19:36,750 --> 00:19:41,370
getting handed the correct database

400
00:19:38,520 --> 00:19:43,710
element that it asked for so that's how

401
00:19:41,370 --> 00:19:49,820
we enforce honest client sort of honest

402
00:19:43,710 --> 00:19:52,380
input into this step circuit we also

403
00:19:49,820 --> 00:19:54,240
Merkle tree

404
00:19:52,380 --> 00:19:57,930
and then finally we have to generate

405
00:19:54,240 --> 00:20:00,000
randomness the way we do that is we

406
00:19:57,930 --> 00:20:01,680
hard-code a prf key within the step

407
00:20:00,000 --> 00:20:04,800
circuit and in order to generate

408
00:20:01,680 --> 00:20:07,470
randomness apply the PRF across the

409
00:20:04,800 --> 00:20:09,389
entire execution history to generate

410
00:20:07,470 --> 00:20:15,120
unique randomness for that particular

411
00:20:09,390 --> 00:20:18,630
instance in summary this allows us to

412
00:20:15,120 --> 00:20:22,709
construct the first proof-of-concept fhe

413
00:20:18,630 --> 00:20:24,929
for ram construction in order to create

414
00:20:22,710 --> 00:20:27,720
that construction we also introduced a

415
00:20:24,929 --> 00:20:30,630
variant of a ram that we call reminder

416
00:20:27,720 --> 00:20:32,850
below ram and we are able to get the

417
00:20:30,630 --> 00:20:35,040
following parameters for our fhe for

418
00:20:32,850 --> 00:20:38,399
ram's construction we provide a single

419
00:20:35,040 --> 00:20:41,129
and multi hop version and for our rewind

420
00:20:38,400 --> 00:20:43,830
below ram we provide a initial State

421
00:20:41,130 --> 00:20:47,250
rewind Apple secure and in any state or

422
00:20:43,830 --> 00:20:50,699
wine double secure already there are a

423
00:20:47,250 --> 00:20:53,370
couple of open problems from sort of

424
00:20:50,700 --> 00:20:57,000
introducing this as a construction and a

425
00:20:53,370 --> 00:20:58,949
concept our main sort of open problem of

426
00:20:57,000 --> 00:21:00,900
our construction is can we reduce the

427
00:20:58,950 --> 00:21:04,200
assumptions that we rely on is it

428
00:21:00,900 --> 00:21:07,230
possible to get RAM fhe from i/o or

429
00:21:04,200 --> 00:21:09,660
something similar also is it possible to

430
00:21:07,230 --> 00:21:12,090
contextualize the underlying noisy /

431
00:21:09,660 --> 00:21:15,450
muted reed-muller code assumptions that

432
00:21:12,090 --> 00:21:17,428
secret key deep here relies on so thank

433
00:21:15,450 --> 00:21:21,530
you at this point for listening to my

434
00:21:17,429 --> 00:21:21,530
talk and I'm happy to take any questions

435
00:21:27,350 --> 00:21:32,750
if you have a question please come to

436
00:21:30,150 --> 00:21:32,750
the microphone

437
00:21:39,740 --> 00:21:44,910
right thank you for the nice talk so I'm

438
00:21:42,600 --> 00:21:47,310
on one of the slides I was wondering

439
00:21:44,910 --> 00:21:49,410
that you have the SK deep here and you

440
00:21:47,310 --> 00:21:51,330
have the standard over m and in a read

441
00:21:49,410 --> 00:21:53,610
and write operations in one of them you

442
00:21:51,330 --> 00:21:55,860
to read from one of them you do operate

443
00:21:53,610 --> 00:21:58,320
on one and in the other you operate on

444
00:21:55,860 --> 00:22:00,300
both of them so how do you hide that

445
00:21:58,320 --> 00:22:05,250
pattern like how can you make it

446
00:22:00,300 --> 00:22:08,370
indistinguishable so essentially it's as

447
00:22:05,250 --> 00:22:10,830
you would any around you do a dummy

448
00:22:08,370 --> 00:22:13,620
operation so for reads you do a dummy

449
00:22:10,830 --> 00:22:16,919
you read or so you do valid reads

450
00:22:13,620 --> 00:22:22,770
essentially on both of the two and on a

451
00:22:16,920 --> 00:22:25,380
right you have so if you want to be able

452
00:22:22,770 --> 00:22:27,300
to hide we don't necessarily but it is

453
00:22:25,380 --> 00:22:29,460
trivial to hide the difference between

454
00:22:27,300 --> 00:22:32,220
read and writes if you're going to do a

455
00:22:29,460 --> 00:22:35,370
read operation you also grow your

456
00:22:32,220 --> 00:22:37,620
underlying ogram so the size of the / M

457
00:22:35,370 --> 00:22:40,229
is now going to grow the total number of

458
00:22:37,620 --> 00:22:43,919
operations rather than just the total

459
00:22:40,230 --> 00:22:47,460
number of writes thanks I have another

460
00:22:43,920 --> 00:22:50,370
question okay so do you know any of the

461
00:22:47,460 --> 00:22:52,440
existing implementation of SK DPR like

462
00:22:50,370 --> 00:22:56,729
who can comment on concrete efficiency

463
00:22:52,440 --> 00:23:00,470
such things I know that there are a

464
00:22:56,730 --> 00:23:03,360
couple of different sort of asymptotic

465
00:23:00,470 --> 00:23:05,520
evaluations of different paradigms I am

466
00:23:03,360 --> 00:23:08,149
not aware of any concrete

467
00:23:05,520 --> 00:23:12,870
implementations of secret key deep here

468
00:23:08,150 --> 00:23:15,810
it would share fairly similar parameters

469
00:23:12,870 --> 00:23:18,169
as to any implementation of reed-muller

470
00:23:15,810 --> 00:23:18,169
codes

471
00:23:20,809 --> 00:23:28,270
less thanks to speak again

472
00:23:23,580 --> 00:23:28,270
[Applause]

