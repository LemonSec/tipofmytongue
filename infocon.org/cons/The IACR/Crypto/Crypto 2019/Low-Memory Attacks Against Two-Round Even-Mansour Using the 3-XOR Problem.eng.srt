1
00:00:04,950 --> 00:00:12,090
in this talk we're gonna do a crypt

2
00:00:07,590 --> 00:00:15,900
analysis of two round even Monza using

3
00:00:12,090 --> 00:00:18,300
new new techniques so first what is even

4
00:00:15,900 --> 00:00:21,119
month or even month so I'm said to be

5
00:00:18,300 --> 00:00:22,800
the most simple permutation based block

6
00:00:21,119 --> 00:00:26,698
cipher it's been introduced by even

7
00:00:22,800 --> 00:00:30,240
mon-sol in 91 and now we will focus on

8
00:00:26,699 --> 00:00:36,030
the single key version by a Duncan Dan

9
00:00:30,240 --> 00:00:38,580
Kerman and at our ad in 2012 so driven

10
00:00:36,030 --> 00:00:41,540
Monza ciphertex n-bit 2 n-bit public

11
00:00:38,580 --> 00:00:44,670
permutation P and n with secret key K

12
00:00:41,540 --> 00:00:47,580
and it builds it's it's use this to

13
00:00:44,670 --> 00:00:49,440
build a 600 block cipher II just as you

14
00:00:47,580 --> 00:00:52,320
can see on the picture take the

15
00:00:49,440 --> 00:00:54,869
plaintext side by the key like it goes

16
00:00:52,320 --> 00:00:56,670
through the permutation and then go

17
00:00:54,869 --> 00:00:59,100
again by the same key to get the cipher

18
00:00:56,670 --> 00:01:03,390
text but do we know about this

19
00:00:59,100 --> 00:01:05,450
construction well from the point of view

20
00:01:03,390 --> 00:01:08,700
of an attacker you have to Trojan is a

21
00:01:05,450 --> 00:01:10,320
query the secret block cipher II I

22
00:01:08,700 --> 00:01:13,860
called you the number of query you make

23
00:01:10,320 --> 00:01:16,229
to the kid kid block cipher or you can

24
00:01:13,860 --> 00:01:19,680
create a public permutation P I call it

25
00:01:16,230 --> 00:01:21,930
Q the number of call what you can prove

26
00:01:19,680 --> 00:01:24,300
for this construction is that it has to

27
00:01:21,930 --> 00:01:27,930
be secure as long as the product D times

28
00:01:24,300 --> 00:01:30,120
Q is sufficiently below 2 to the N in

29
00:01:27,930 --> 00:01:31,740
other world you can prove the security

30
00:01:30,120 --> 00:01:34,140
up to the birthday bond because you have

31
00:01:31,740 --> 00:01:37,050
at least one of those values has to be

32
00:01:34,140 --> 00:01:42,270
at least two to the n over two to get to

33
00:01:37,050 --> 00:01:45,870
to to to get over two to the N and yet

34
00:01:42,270 --> 00:01:48,060
oxide the semia demin proposed an attack

35
00:01:45,870 --> 00:01:51,750
in exactly destroyed of D times Q equal

36
00:01:48,060 --> 00:01:53,850
to 2 the N and even in times t t being

37
00:01:51,750 --> 00:01:56,030
the processing time the time complexity

38
00:01:53,850 --> 00:01:58,830
of the attack

39
00:01:56,030 --> 00:02:02,970
how does it work if your brief overview

40
00:01:58,830 --> 00:02:06,060
of how its work you can see back I just

41
00:02:02,970 --> 00:02:09,119
first named the variables I have X and G

42
00:02:06,060 --> 00:02:11,790
of X input output of the key permutation

43
00:02:09,119 --> 00:02:13,980
a Y and purify input output of the

44
00:02:11,790 --> 00:02:16,890
public permutation and then you have

45
00:02:13,980 --> 00:02:18,380
this property that if x and y differ by

46
00:02:16,890 --> 00:02:22,880
the key then by construction

47
00:02:18,380 --> 00:02:26,150
you have to have that PNY any of X also

48
00:02:22,880 --> 00:02:30,280
differ by the key just because that's

49
00:02:26,150 --> 00:02:36,830
how it's built and if you some does do

50
00:02:30,280 --> 00:02:40,910
does to equation together you get that

51
00:02:36,830 --> 00:02:43,100
this the sum of every variable e X plus

52
00:02:40,910 --> 00:02:48,890
y of X plus y plus P of 5 must have to

53
00:02:43,100 --> 00:02:51,769
be 0 then the attack is just a collision

54
00:02:48,890 --> 00:02:55,850
search right you can define to function

55
00:02:51,770 --> 00:02:58,610
a explicity of X and user 1 y plus

56
00:02:55,850 --> 00:03:00,350
purify and if you find a collision

57
00:02:58,610 --> 00:03:01,910
between those two function you get a

58
00:03:00,350 --> 00:03:06,700
good guess for the key because you found

59
00:03:01,910 --> 00:03:09,200
a path that satisfies the equation above

60
00:03:06,700 --> 00:03:11,179
in other words this mean that there is

61
00:03:09,200 --> 00:03:13,369
no collision such thing we know how to

62
00:03:11,180 --> 00:03:16,400
do it we just do it in its it's a

63
00:03:13,370 --> 00:03:18,650
birthday bone we know how to do it quite

64
00:03:16,400 --> 00:03:20,930
efficiently in terms of time just the

65
00:03:18,650 --> 00:03:22,700
time to read the list so there's really

66
00:03:20,930 --> 00:03:26,830
no gap between the best proof in attack

67
00:03:22,700 --> 00:03:29,209
in the one run even month so however we

68
00:03:26,830 --> 00:03:31,670
locate the in this talk we'll talk more

69
00:03:29,210 --> 00:03:34,550
about the two round even one so what is

70
00:03:31,670 --> 00:03:37,429
it well it's an extension by bug none of

71
00:03:34,550 --> 00:03:39,320
it are in 2012 and the goal is to keep

72
00:03:37,430 --> 00:03:41,080
the construction simple but secure

73
00:03:39,320 --> 00:03:43,310
beyond the way they bomb

74
00:03:41,080 --> 00:03:46,670
what we know about it we can prove the

75
00:03:43,310 --> 00:03:49,370
security up to - 2 D 2 n over 3 however

76
00:03:46,670 --> 00:03:51,350
when you look at the attack the time

77
00:03:49,370 --> 00:03:54,230
complexity the best time complexity of

78
00:03:51,350 --> 00:03:57,290
the attack is only 2 to the N divided by

79
00:03:54,230 --> 00:04:01,670
n so I can be quite close to the true

80
00:03:57,290 --> 00:04:04,090
true to a brute-force of the King so you

81
00:04:01,670 --> 00:04:06,440
have yeah you have this gap

82
00:04:04,090 --> 00:04:10,070
significantly weakened between the best

83
00:04:06,440 --> 00:04:12,380
proof and the best attack however when

84
00:04:10,070 --> 00:04:15,470
you look at information theoretic attack

85
00:04:12,380 --> 00:04:18,980
you have one with the trade-off D times

86
00:04:15,470 --> 00:04:20,089
Q square equal to 2 D 2 m so you could

87
00:04:18,980 --> 00:04:24,200
have

88
00:04:20,089 --> 00:04:26,060
GN q being 2 to the 2 n over 3 and this

89
00:04:24,200 --> 00:04:27,530
can have an information to attack you

90
00:04:26,060 --> 00:04:30,830
have enough information to recover the

91
00:04:27,530 --> 00:04:31,789
key however the best time complexity

92
00:04:30,830 --> 00:04:33,530
read the

93
00:04:31,790 --> 00:04:36,140
the issue is not the data but the

94
00:04:33,530 --> 00:04:37,520
processing time of this data and we

95
00:04:36,140 --> 00:04:40,610
don't have anything better than two to

96
00:04:37,520 --> 00:04:43,460
the N over N and it's even worse than

97
00:04:40,610 --> 00:04:46,700
that because often they uses a lot of

98
00:04:43,460 --> 00:04:49,489
memory that much memory our online data

99
00:04:46,700 --> 00:04:53,870
which is a gap even hard to get an

100
00:04:49,490 --> 00:04:56,120
processing power and in this talk with

101
00:04:53,870 --> 00:04:58,700
our new approach we won't do better in

102
00:04:56,120 --> 00:05:01,040
terms of time we're stuck at this 2 to n

103
00:04:58,700 --> 00:05:03,289
by n but we mainly focus on memory and

104
00:05:01,040 --> 00:05:06,970
online data to reduce this to a more

105
00:05:03,290 --> 00:05:10,070
acceptable level so what's our approach

106
00:05:06,970 --> 00:05:13,100
well we do some kind of the same

107
00:05:10,070 --> 00:05:15,680
reasoning as before just I named Z and P

108
00:05:13,100 --> 00:05:19,730
2 of the the input of foot at the second

109
00:05:15,680 --> 00:05:22,910
permutation and now same reasoning as

110
00:05:19,730 --> 00:05:26,330
before I say no I for any tripperz X Y Z

111
00:05:22,910 --> 00:05:29,330
if I have a difference of K between x

112
00:05:26,330 --> 00:05:33,320
and y and also a difference of K between

113
00:05:29,330 --> 00:05:35,870
p1 of y and z then by construction I

114
00:05:33,320 --> 00:05:39,500
have the third one for free I mean the P

115
00:05:35,870 --> 00:05:41,270
2 of Z and Y of X will differ by key now

116
00:05:39,500 --> 00:05:43,880
I want some them all together by some

117
00:05:41,270 --> 00:05:46,039
them two by two the one with the second

118
00:05:43,880 --> 00:05:47,840
though and the first with the second and

119
00:05:46,040 --> 00:05:50,270
the first with the third one and I get

120
00:05:47,840 --> 00:05:54,500
to a question like this like those two

121
00:05:50,270 --> 00:05:56,150
some if I if I can somehow guess two

122
00:05:54,500 --> 00:06:00,110
right he does to some we have to be zero

123
00:05:56,150 --> 00:06:02,960
so the goal now is to find such triple I

124
00:06:00,110 --> 00:06:04,970
want to find a triple XYZ so that I

125
00:06:02,960 --> 00:06:07,330
satisfied this because this doesn't

126
00:06:04,970 --> 00:06:11,420
depend on the key so I can observe it

127
00:06:07,330 --> 00:06:14,469
and that I say is a trigger program I

128
00:06:11,420 --> 00:06:17,210
just build three function such that

129
00:06:14,470 --> 00:06:18,950
solving the trees above finding a

130
00:06:17,210 --> 00:06:21,919
solution to the treetop rhyme about this

131
00:06:18,950 --> 00:06:25,130
2/3 function is exactly the same as

132
00:06:21,920 --> 00:06:28,730
finding a triple x y z that satisfy the

133
00:06:25,130 --> 00:06:31,580
filter above and now the like the

134
00:06:28,730 --> 00:06:35,540
strategy is very simple I want to serve

135
00:06:31,580 --> 00:06:38,450
the trick saw and I gave a guess so

136
00:06:35,540 --> 00:06:39,940
let's look at the trigger problem you

137
00:06:38,450 --> 00:06:41,870
can see the trees of M as a

138
00:06:39,940 --> 00:06:43,790
generalization of the well-known

139
00:06:41,870 --> 00:06:44,060
collision problem collision problem you

140
00:06:43,790 --> 00:06:45,800
have

141
00:06:44,060 --> 00:06:47,950
function you want to find two inputs of

142
00:06:45,800 --> 00:06:50,090
that just to function exhaust to zero

143
00:06:47,950 --> 00:06:52,039
the tricks are em you have three

144
00:06:50,090 --> 00:06:54,200
function and you want find three input

145
00:06:52,040 --> 00:06:56,980
so that those are the three three

146
00:06:54,200 --> 00:07:01,099
function on these inputs goes to zero

147
00:06:56,980 --> 00:07:03,190
and in this talk I often use diversion

148
00:07:01,100 --> 00:07:05,600
with lists which is quite equivalent

149
00:07:03,190 --> 00:07:07,219
you're given three lists I want find

150
00:07:05,600 --> 00:07:09,320
three elements of that list so that the

151
00:07:07,220 --> 00:07:10,790
elements goes to zero you can think of

152
00:07:09,320 --> 00:07:15,530
building this list just by claiming the

153
00:07:10,790 --> 00:07:17,510
function and having it stolen memory so

154
00:07:15,530 --> 00:07:19,580
I have this definition of trick though

155
00:07:17,510 --> 00:07:22,880
and I show you that krypton exists of n

156
00:07:19,580 --> 00:07:25,280
bits of two rounds even mon-sol is you

157
00:07:22,880 --> 00:07:27,860
can see it as a kind of tricks always 20

158
00:07:25,280 --> 00:07:31,130
bits elements what do we know I would

159
00:07:27,860 --> 00:07:35,060
drink serving that this instance of

160
00:07:31,130 --> 00:07:37,190
trick so well you can easily see for the

161
00:07:35,060 --> 00:07:40,160
random tricks out that you need to at

162
00:07:37,190 --> 00:07:41,900
least collect 2 - G - n tripperz to have

163
00:07:40,160 --> 00:07:44,870
a solution with good poverty so that

164
00:07:41,900 --> 00:07:48,049
means one list must have at least a bit

165
00:07:44,870 --> 00:07:49,580
of size to to eat when over three on the

166
00:07:48,050 --> 00:07:50,840
other hand if every least out of sight

167
00:07:49,580 --> 00:07:53,419
to tea to another Street then I have

168
00:07:50,840 --> 00:07:55,130
enough troopers could just just go

169
00:07:53,419 --> 00:07:58,760
through all of them and fire serration

170
00:07:55,130 --> 00:08:03,229
so with however like a proof that you

171
00:07:58,760 --> 00:08:06,140
need at least we 2003 information and an

172
00:08:03,229 --> 00:08:07,820
information theoretic attack in that

173
00:08:06,140 --> 00:08:10,550
matches the proof however when you look

174
00:08:07,820 --> 00:08:13,909
at the best algorithm for the trick

175
00:08:10,550 --> 00:08:16,880
though you find like the best one runs

176
00:08:13,910 --> 00:08:19,039
in time - to the N over N and that's the

177
00:08:16,880 --> 00:08:22,250
exact same gap as far as we saw for the

178
00:08:19,039 --> 00:08:23,870
truman event month so so you already

179
00:08:22,250 --> 00:08:26,560
understand why we won't do better here

180
00:08:23,870 --> 00:08:29,870
is the strategy in terms of time but

181
00:08:26,560 --> 00:08:32,479
let's dive a bit deeper in the tricks

182
00:08:29,870 --> 00:08:34,659
are serving issue get two main

183
00:08:32,479 --> 00:08:37,969
techniques in the literature

184
00:08:34,659 --> 00:08:41,539
one is multi-collision based techniques

185
00:08:37,969 --> 00:08:43,640
by Nicholas and Sasaki and the other one

186
00:08:41,539 --> 00:08:45,410
is linear algebra techniques based

187
00:08:43,640 --> 00:08:47,029
techniques by issue and they have

188
00:08:45,410 --> 00:08:49,610
roughly the same asymptotic complexity

189
00:08:47,029 --> 00:08:53,689
though combining them seems really not

190
00:08:49,610 --> 00:08:54,580
trivial but you have it on the other

191
00:08:53,690 --> 00:08:57,250
hand in

192
00:08:54,580 --> 00:08:59,680
- Ramon crypt analysis from uneven month

193
00:08:57,250 --> 00:09:02,380
of Kryptonite is literature except for

194
00:08:59,680 --> 00:09:04,269
one case one exception our preview

195
00:09:02,380 --> 00:09:06,100
Krypton is disused multi-collision based

196
00:09:04,269 --> 00:09:07,899
techniques even without knowing the

197
00:09:06,100 --> 00:09:10,870
links between the tricks are and this

198
00:09:07,899 --> 00:09:13,390
gift energies they are every one of them

199
00:09:10,870 --> 00:09:15,399
use medication based techniques and so

200
00:09:13,390 --> 00:09:18,279
now that we have these things we kind of

201
00:09:15,399 --> 00:09:20,200
fun to explore more deeply what we could

202
00:09:18,279 --> 00:09:22,689
we do is linear algebra based techniques

203
00:09:20,200 --> 00:09:25,019
for doing stop criminalizing this run

204
00:09:22,690 --> 00:09:27,490
even not so and the result is we could

205
00:09:25,019 --> 00:09:29,079
quite effectively reduce the online

206
00:09:27,490 --> 00:09:33,190
complexity and the memory at the same

207
00:09:29,079 --> 00:09:37,479
time both that are already potentially

208
00:09:33,190 --> 00:09:40,510
more costly than processing time so you

209
00:09:37,480 --> 00:09:44,790
see previous resist and for attacks I

210
00:09:40,510 --> 00:09:48,040
will explain later in the in our paper

211
00:09:44,790 --> 00:09:51,579
first thing you can see the I've put in

212
00:09:48,040 --> 00:09:54,120
red or the complexity that is close to

213
00:09:51,579 --> 00:09:57,939
two to the end up to a log factor and

214
00:09:54,120 --> 00:09:59,920
you can see in the timeline time column

215
00:09:57,940 --> 00:10:01,829
every one is red and we don't really

216
00:09:59,920 --> 00:10:03,990
know how to do better than this

217
00:10:01,829 --> 00:10:08,020
however if you look at previous attacks

218
00:10:03,990 --> 00:10:10,600
you get either the data or the memory in

219
00:10:08,020 --> 00:10:14,230
red even for any parameter you can you

220
00:10:10,600 --> 00:10:16,720
choose however in the last three one of

221
00:10:14,230 --> 00:10:18,839
our attacks we can effectively use the

222
00:10:16,720 --> 00:10:23,649
data and the memory is significantly

223
00:10:18,839 --> 00:10:28,329
significantly below two to the n while

224
00:10:23,649 --> 00:10:30,399
keeping in the known plaintext model so

225
00:10:28,329 --> 00:10:34,209
let's go

226
00:10:30,399 --> 00:10:36,670
so the strategy I recall it we have

227
00:10:34,209 --> 00:10:39,219
three lists I want to solve the trees

228
00:10:36,670 --> 00:10:42,279
over the streets and I have your guess a

229
00:10:39,220 --> 00:10:44,800
good guess for the key that's it and the

230
00:10:42,279 --> 00:10:47,500
simple one so is linear algebra based

231
00:10:44,800 --> 00:10:49,390
techniques or truth technique and I'll

232
00:10:47,500 --> 00:10:51,820
explain it right now so just techniques

233
00:10:49,390 --> 00:10:54,220
require one of the lists to be quite

234
00:10:51,820 --> 00:10:58,029
small you have take the first list you

235
00:10:54,220 --> 00:11:00,670
and you need n words it was being of

236
00:10:58,029 --> 00:11:05,320
size 2 to n bits so you have you can see

237
00:11:00,670 --> 00:11:07,360
it as a n by 2n bits matrix and the the

238
00:11:05,320 --> 00:11:10,179
trick is to transform it so you

239
00:11:07,360 --> 00:11:12,579
if Flajnik column-wise the this matrix

240
00:11:10,179 --> 00:11:15,249
and find the transformation matrix that

241
00:11:12,579 --> 00:11:17,799
will transform the list to like zero

242
00:11:15,249 --> 00:11:21,069
bits and the left ngiht matrix on the

243
00:11:17,799 --> 00:11:22,929
right and yeah it is that this

244
00:11:21,069 --> 00:11:25,689
transformation matrix being invertible

245
00:11:22,929 --> 00:11:27,488
the transform problem with the tricks

246
00:11:25,689 --> 00:11:30,160
are with the transform lists will give

247
00:11:27,489 --> 00:11:33,040
exactly the same solution as the

248
00:11:30,160 --> 00:11:35,290
original tricks our program and it's

249
00:11:33,040 --> 00:11:38,410
easier to walk on the transformed lists

250
00:11:35,290 --> 00:11:41,769
why because you know you have one list

251
00:11:38,410 --> 00:11:45,879
with only ones that starts by zeros so

252
00:11:41,769 --> 00:11:49,480
for the two of the elements you want to

253
00:11:45,879 --> 00:11:53,679
find you know there will have to have a

254
00:11:49,480 --> 00:11:54,970
bit partial collision on them and you we

255
00:11:53,679 --> 00:11:59,470
know how to look for collision it's

256
00:11:54,970 --> 00:12:02,049
easier than solving the trick though so

257
00:11:59,470 --> 00:12:04,600
it works like this compute the

258
00:12:02,049 --> 00:12:06,879
transformation matrix with the first

259
00:12:04,600 --> 00:12:09,839
flip and then you transform the threads

260
00:12:06,879 --> 00:12:12,339
are lists you look for partial n bits

261
00:12:09,839 --> 00:12:13,660
collision between the two other lists

262
00:12:12,339 --> 00:12:15,129
and you would check if you have a

263
00:12:13,660 --> 00:12:18,480
solution for every partial collision

264
00:12:15,129 --> 00:12:22,269
your phone the complexities then is the

265
00:12:18,480 --> 00:12:24,819
you is that going through the biggest

266
00:12:22,269 --> 00:12:26,860
list so you have a complexity memory and

267
00:12:24,819 --> 00:12:30,429
computation of 2t n divided by square

268
00:12:26,860 --> 00:12:34,449
root of n and you have to have those two

269
00:12:30,429 --> 00:12:35,799
O's at least that big so that the so

270
00:12:34,449 --> 00:12:39,549
that you have at least to do it when

271
00:12:35,799 --> 00:12:43,209
triples because the first list is

272
00:12:39,549 --> 00:12:46,989
limited to an N mod and so how does it

273
00:12:43,209 --> 00:12:48,399
translate for cryptologist it we use

274
00:12:46,989 --> 00:12:51,360
without the tricks out with this

275
00:12:48,399 --> 00:12:55,629
techniques and we have our first attack

276
00:12:51,360 --> 00:12:58,329
we obviously chose the the the the small

277
00:12:55,629 --> 00:13:00,519
list to be the first one because then we

278
00:12:58,329 --> 00:13:03,459
have a very low already very low known

279
00:13:00,519 --> 00:13:05,589
plaintext online complexity of data so

280
00:13:03,459 --> 00:13:08,258
we use very few data and it's enough and

281
00:13:05,589 --> 00:13:11,230
we have a competitive cryptanalysis

282
00:13:08,259 --> 00:13:13,629
already but we can do better right I

283
00:13:11,230 --> 00:13:16,689
just use the random tricks algorithm on

284
00:13:13,629 --> 00:13:19,480
this but we not in the random case you

285
00:13:16,689 --> 00:13:22,630
can see under under under

286
00:13:19,480 --> 00:13:24,699
that you can you you have some you have

287
00:13:22,630 --> 00:13:27,040
some power but the value if you want to

288
00:13:24,699 --> 00:13:30,029
stay in the non plaintext and maybe you

289
00:13:27,040 --> 00:13:33,790
want to fixed any value for X or Y of X

290
00:13:30,029 --> 00:13:36,459
but you can effectively control Y or Z

291
00:13:33,790 --> 00:13:38,620
take anywhere you want come in even do

292
00:13:36,459 --> 00:13:41,619
better you can implement the inverse of

293
00:13:38,620 --> 00:13:44,500
the public permutation and so you could

294
00:13:41,620 --> 00:13:48,160
have a set Z Prime and P and the others

295
00:13:44,500 --> 00:13:50,110
of of the second permutation on Z prime

296
00:13:48,160 --> 00:13:54,760
and now you can still control Y & Z

297
00:13:50,110 --> 00:13:56,290
prime without even having like it's just

298
00:13:54,760 --> 00:14:00,420
computation you choose what you watch

299
00:13:56,290 --> 00:14:04,209
you query and then what can you do well

300
00:14:00,420 --> 00:14:07,180
imagine you have you you're targeting an

301
00:14:04,209 --> 00:14:10,029
unlined complexity of 2 to the G then

302
00:14:07,180 --> 00:14:12,430
you will need to have a frank complexity

303
00:14:10,029 --> 00:14:15,459
of 2 to the N minus G over 2 so you get

304
00:14:12,430 --> 00:14:18,339
a solution with good probability and so

305
00:14:15,459 --> 00:14:20,050
you can decide to only query Y and G

306
00:14:18,339 --> 00:14:24,370
prime such that the end by D over 2

307
00:14:20,050 --> 00:14:27,939
zeros so it's just fast the 0 to align

308
00:14:24,370 --> 00:14:29,620
there and what does it allows you to do

309
00:14:27,940 --> 00:14:32,430
well it means that you already have a

310
00:14:29,620 --> 00:14:35,649
filter on the first words and you can

311
00:14:32,430 --> 00:14:39,370
press electively reject all the other

312
00:14:35,649 --> 00:14:42,130
values in the first list that doesn't

313
00:14:39,370 --> 00:14:46,660
end by 0 because then it wouldn't be a

314
00:14:42,130 --> 00:14:48,550
solution so you do that that and what

315
00:14:46,660 --> 00:14:51,449
you what's it gives you after clamping

316
00:14:48,550 --> 00:14:54,219
is reduced size lists so instead of

317
00:14:51,449 --> 00:14:59,019
having a first list of size 2 to the D

318
00:14:54,220 --> 00:15:02,110
you reduced to the D over 2 and it was

319
00:14:59,019 --> 00:15:05,380
size of source bit videos and now I can

320
00:15:02,110 --> 00:15:07,930
use any any any algorithmic month so

321
00:15:05,380 --> 00:15:10,389
maybe I know I mean oh I'll go back to

322
00:15:07,930 --> 00:15:12,609
it richer and I look for algorithm that

323
00:15:10,389 --> 00:15:16,000
deal with arbitrary size lists so I have

324
00:15:12,610 --> 00:15:19,170
more freedom the first one was given by

325
00:15:16,000 --> 00:15:22,690
Magnus in the generous birthday paper

326
00:15:19,170 --> 00:15:24,939
which may be a naive one but we have

327
00:15:22,690 --> 00:15:28,269
recently walked by Barea gator Laplace

328
00:15:24,940 --> 00:15:29,080
and fook that just that studied a bit

329
00:15:28,269 --> 00:15:31,860
more

330
00:15:29,080 --> 00:15:35,920
this algorithm and propose two of them

331
00:15:31,860 --> 00:15:40,620
one it is roughly like repeating Jews

332
00:15:35,920 --> 00:15:44,680
ago is a number of time chunk by chunk

333
00:15:40,620 --> 00:15:46,540
and they say in the papers it's maybe

334
00:15:44,680 --> 00:15:49,540
one of the most realistic approach for

335
00:15:46,540 --> 00:15:51,819
realistic website so that that's one of

336
00:15:49,540 --> 00:15:54,189
them with this trade complexity

337
00:15:51,820 --> 00:15:55,839
trade-off and you have another one or so

338
00:15:54,190 --> 00:15:58,029
which is actually the best known as I'm

339
00:15:55,839 --> 00:15:59,860
tatak complexity for serving the trick

340
00:15:58,029 --> 00:16:02,350
though though they are so showing the

341
00:15:59,860 --> 00:16:04,660
paper that it may be quite unrealistic

342
00:16:02,350 --> 00:16:07,120
to have big big constants hidden out

343
00:16:04,660 --> 00:16:09,969
there that makes not really work for

344
00:16:07,120 --> 00:16:12,130
very thick world size but you have a

345
00:16:09,970 --> 00:16:15,820
good in synthetic complexity now I just

346
00:16:12,130 --> 00:16:20,260
plug in the size of the list and I have

347
00:16:15,820 --> 00:16:22,300
my complexity of G attacks so you can

348
00:16:20,260 --> 00:16:24,790
see the name one just not better than

349
00:16:22,300 --> 00:16:27,040
brute forcing but the second one is

350
00:16:24,790 --> 00:16:28,899
always better the it's very competitive

351
00:16:27,040 --> 00:16:31,569
you have to to another n we don't know

352
00:16:28,899 --> 00:16:33,100
we do much much better and actually we

353
00:16:31,570 --> 00:16:34,839
can even have better asymptotic

354
00:16:33,100 --> 00:16:41,320
complexity though it's not practical for

355
00:16:34,839 --> 00:16:47,680
serving is it next this makes is a text

356
00:16:41,320 --> 00:16:49,270
box so actually in the second attack we

357
00:16:47,680 --> 00:16:51,819
have we have better time like was

358
00:16:49,270 --> 00:16:56,410
proposed before but only asymptotic so

359
00:16:51,820 --> 00:16:59,410
it's not no arm left to do is to present

360
00:16:56,410 --> 00:17:03,040
you the low data attack rather tactic

361
00:16:59,410 --> 00:17:05,230
use maybe a different trick so you

362
00:17:03,040 --> 00:17:07,030
remember juice techniques you just

363
00:17:05,230 --> 00:17:08,970
transform with a new transformation you

364
00:17:07,030 --> 00:17:12,099
want as long as it's invertible the

365
00:17:08,970 --> 00:17:14,559
problem I live enhance I do just

366
00:17:12,099 --> 00:17:17,619
technique but with even smaller number

367
00:17:14,559 --> 00:17:20,319
of what so think of lambda as being a

368
00:17:17,619 --> 00:17:24,750
parameter that is maybe 1/2 like a

369
00:17:20,319 --> 00:17:29,530
fraction of n the fraction of n was

370
00:17:24,750 --> 00:17:31,750
still have size 2 to 2 to n and now I

371
00:17:29,530 --> 00:17:33,700
can esslyn 8 but I need a right part

372
00:17:31,750 --> 00:17:35,950
right and I still be left with some

373
00:17:33,700 --> 00:17:39,669
zeros because it's suddenly a fraction

374
00:17:35,950 --> 00:17:40,929
of n again imagine 1/2 so I have n over

375
00:17:39,669 --> 00:17:47,380
2

376
00:17:40,929 --> 00:17:51,039
matrix of zeros and identity matrix now

377
00:17:47,380 --> 00:17:56,110
remember we can we can choose y and z

378
00:17:51,039 --> 00:17:59,230
prime after transformation to get the

379
00:17:56,110 --> 00:18:01,658
transform problem well if I know the

380
00:17:59,230 --> 00:18:04,960
matrix M and n is invertible

381
00:18:01,659 --> 00:18:08,580
I can still choose Y times m and Z prime

382
00:18:04,960 --> 00:18:12,789
times M I have control over them

383
00:18:08,580 --> 00:18:15,039
so I just fought the collision I have

384
00:18:12,789 --> 00:18:18,390
above I know that I have to be zeros

385
00:18:15,039 --> 00:18:20,919
there so I can choose any other fix it I

386
00:18:18,390 --> 00:18:27,070
know I have a kind of a free collision

387
00:18:20,919 --> 00:18:31,870
on those bits and how do I finish well I

388
00:18:27,070 --> 00:18:33,340
just explanation and use those

389
00:18:31,870 --> 00:18:33,789
techniques to find if there is a

390
00:18:33,340 --> 00:18:35,678
solution

391
00:18:33,789 --> 00:18:37,990
don't they may not be a solution when I

392
00:18:35,679 --> 00:18:40,419
fix the particular alpha I can just

393
00:18:37,990 --> 00:18:45,700
retry until I find solution for any

394
00:18:40,419 --> 00:18:49,559
other value of I want and because you

395
00:18:45,700 --> 00:18:52,780
have this collision for free and also

396
00:18:49,559 --> 00:18:54,370
you you you you you will have this time

397
00:18:52,780 --> 00:18:56,918
complexity like 2 to the N over lambda

398
00:18:54,370 --> 00:18:58,959
and this very competitive but we know we

399
00:18:56,919 --> 00:19:00,909
have a very load at that like lambda N

400
00:18:58,960 --> 00:19:03,730
and more importantly the memory

401
00:19:00,909 --> 00:19:07,500
consumption because they are only

402
00:19:03,730 --> 00:19:10,210
contained to the nom de n elements like

403
00:19:07,500 --> 00:19:14,140
remember I query for equity for all the

404
00:19:10,210 --> 00:19:17,200
values left the on the right of a very

405
00:19:14,140 --> 00:19:20,049
very fast way we have only lambda n bits

406
00:19:17,200 --> 00:19:22,090
of freedom and when I Susan as R if I

407
00:19:20,049 --> 00:19:24,158
can just throw away all the lists anyway

408
00:19:22,090 --> 00:19:26,080
we had an again so the memory

409
00:19:24,159 --> 00:19:28,270
consumption rate is only like I'm

410
00:19:26,080 --> 00:19:31,449
getting imagine lambda being 1 over 2 is

411
00:19:28,270 --> 00:19:33,460
putting another 2 which is much more

412
00:19:31,450 --> 00:19:39,820
reasonable than having my close to the

413
00:19:33,460 --> 00:19:42,630
GN okay so you have some take away

414
00:19:39,820 --> 00:19:45,789
so I heard you that after some cramping

415
00:19:42,630 --> 00:19:47,419
we could use any generic three surgeries

416
00:19:45,789 --> 00:19:50,299
I'm a good fine and

417
00:19:47,419 --> 00:19:52,579
this in at this point of time this we

418
00:19:50,299 --> 00:19:55,729
couldn't really have a better time

419
00:19:52,579 --> 00:19:57,739
complexity but who knows maybe in the

420
00:19:55,729 --> 00:20:00,679
future we could find faster tricks or

421
00:19:57,739 --> 00:20:02,690
server and that would imagine he get us

422
00:20:00,679 --> 00:20:07,639
faster to run even mon-sol cretin

423
00:20:02,690 --> 00:20:09,950
disease however this may also be an

424
00:20:07,639 --> 00:20:11,958
indication that because it really seems

425
00:20:09,950 --> 00:20:15,200
really hard to solve this trig hopper

426
00:20:11,959 --> 00:20:17,659
I'm faster maybe it explains why it's

427
00:20:15,200 --> 00:20:21,829
hard to serve like to do the critter is

428
00:20:17,659 --> 00:20:25,269
faster and then close to 2 to the N up

429
00:20:21,829 --> 00:20:28,519
to log factor tree are to gangnam or

430
00:20:25,269 --> 00:20:29,899
also like we have to throw it really we

431
00:20:28,519 --> 00:20:31,759
have between linear algebra and

432
00:20:29,899 --> 00:20:34,369
multi-collision techniques they are to

433
00:20:31,759 --> 00:20:37,359
combine and they use roughly as much

434
00:20:34,369 --> 00:20:39,529
computation however it's clear that

435
00:20:37,359 --> 00:20:42,079
linear algebra techniques use less

436
00:20:39,529 --> 00:20:43,999
memory you have much better management

437
00:20:42,079 --> 00:20:50,418
of memory fun on those techniques which

438
00:20:43,999 --> 00:20:53,419
is is interesting another remark if you

439
00:20:50,419 --> 00:20:56,869
look at the load data trade-off you have

440
00:20:53,419 --> 00:20:59,029
that G times T is really equal to 2 to

441
00:20:56,869 --> 00:21:00,859
the N which is the same trade-off you

442
00:20:59,029 --> 00:21:03,799
fine for the proof of the 1/1 even

443
00:21:00,859 --> 00:21:06,168
monsoon which means that since obviously

444
00:21:03,799 --> 00:21:08,239
this proof applies to the 2 round 1 this

445
00:21:06,169 --> 00:21:11,659
mean that the tax is information

446
00:21:08,239 --> 00:21:13,129
statistically efficient only for this

447
00:21:11,659 --> 00:21:21,639
more like data range

448
00:21:13,129 --> 00:21:23,899
the fraction of M gnome another remark

449
00:21:21,639 --> 00:21:25,699
will show you that the true on even

450
00:21:23,899 --> 00:21:28,458
months so I can rewrite it as a trick

451
00:21:25,700 --> 00:21:33,229
saw problem with 2 n-bit elements what

452
00:21:28,459 --> 00:21:35,509
about the 3 1 for 1 no if I get the form

453
00:21:33,229 --> 00:21:37,999
on even month oh yes I can write it as a

454
00:21:35,509 --> 00:21:40,609
five-door problem just like this so

455
00:21:37,999 --> 00:21:43,129
files are M with 4 n bits elements

456
00:21:40,609 --> 00:21:44,958
getting bigger and you can see there's

457
00:21:43,129 --> 00:21:49,488
very strong structure and all you have

458
00:21:44,959 --> 00:21:52,159
zeros popping up and but who knows I'm

459
00:21:49,489 --> 00:21:54,559
in general you can write our own even

460
00:21:52,159 --> 00:21:57,769
months or create entities as a special

461
00:21:54,559 --> 00:22:00,259
kind of R plus ones are with our times n

462
00:21:57,769 --> 00:22:00,860
bits elements and maybe that's a good

463
00:22:00,259 --> 00:22:03,590
start

464
00:22:00,860 --> 00:22:10,668
start thinking for new ways to Krypton

465
00:22:03,590 --> 00:22:15,678
is this iterative construction so this

466
00:22:10,669 --> 00:22:17,779
is my last slides so we get New Krypton

467
00:22:15,679 --> 00:22:20,240
Isis with new that I trade in this new

468
00:22:17,779 --> 00:22:23,840
trade off with good management of data

469
00:22:20,240 --> 00:22:25,760
in memory I've showed you to to get to

470
00:22:23,840 --> 00:22:27,709
this then I showed you the link between

471
00:22:25,760 --> 00:22:31,309
the two round even month saw and the

472
00:22:27,710 --> 00:22:34,130
tricks our program could explore new new

473
00:22:31,309 --> 00:22:37,850
linear algebra techniques and that's

474
00:22:34,130 --> 00:22:41,269
that's really like in in our opinion we

475
00:22:37,850 --> 00:22:43,279
we could we could have better complexity

476
00:22:41,269 --> 00:22:45,110
profile on the bottleneck of precious

477
00:22:43,279 --> 00:22:55,940
attacks that ways are the data or the

478
00:22:45,110 --> 00:23:18,199
memory usage thank you thank you is

479
00:22:55,940 --> 00:23:20,840
there any questions yeah it seems quite

480
00:23:18,200 --> 00:23:22,940
hot do a rejection because you have the

481
00:23:20,840 --> 00:23:25,870
destructor for discrete analysis that

482
00:23:22,940 --> 00:23:28,480
you don't get for the random case and

483
00:23:25,870 --> 00:23:32,689
and the last attack actually shows that

484
00:23:28,480 --> 00:23:35,029
you can you can you can have better like

485
00:23:32,690 --> 00:23:38,389
for the small range of data you you you

486
00:23:35,029 --> 00:23:40,309
can you're below the the you don't

487
00:23:38,389 --> 00:23:42,379
connect to 2d to n-triples that you have

488
00:23:40,309 --> 00:23:47,769
to do have correct rate at as much for

489
00:23:42,380 --> 00:23:53,240
the the random tricks our case so I

490
00:23:47,769 --> 00:23:56,330
wouldn't hopeful for a reduction in to

491
00:23:53,240 --> 00:23:58,850
the tricks our issue but but maybe maybe

492
00:23:56,330 --> 00:24:01,070
you have this underlying complex that is

493
00:23:58,850 --> 00:24:04,000
common and you can reverse to this I

494
00:24:01,070 --> 00:24:04,000
don't know

495
00:24:08,990 --> 00:24:16,110
- any further question I guess then we

496
00:24:13,830 --> 00:24:19,158
think do all the four authors again and

497
00:24:16,110 --> 00:24:19,158
we go for the break

