1
00:00:04,860 --> 00:00:10,830
anyways thanks for the introduction Ron

2
00:00:07,730 --> 00:00:12,360
thanks for all you for coming I'm

3
00:00:10,830 --> 00:00:17,130
excited to tell you about non liable

4
00:00:12,360 --> 00:00:19,349
codes for decision trees and more so

5
00:00:17,130 --> 00:00:20,880
what is a non valuable code I'll tell

6
00:00:19,349 --> 00:00:22,800
you what the decision tree is about

7
00:00:20,880 --> 00:00:24,869
halfway through talk so what is a non

8
00:00:22,800 --> 00:00:30,720
valuable code so non liable code is a

9
00:00:24,869 --> 00:00:34,590
randomized encoding scheme so and I want

10
00:00:30,720 --> 00:00:37,260
to sort of remind you all or introduce

11
00:00:34,590 --> 00:00:39,030
you to it so this coding scheme

12
00:00:37,260 --> 00:00:41,129
unlike most cryptography it's completely

13
00:00:39,030 --> 00:00:42,900
public there's no secrets whatsoever and

14
00:00:41,129 --> 00:00:44,489
then the code for this talk everything

15
00:00:42,900 --> 00:00:47,089
is going to be information theoretic

16
00:00:44,489 --> 00:00:48,780
there's no computational

17
00:00:47,089 --> 00:00:52,320
indistinguishability or anything like

18
00:00:48,780 --> 00:00:53,580
these but so okay so a non valuable code

19
00:00:52,320 --> 00:00:55,229
is a coding scheme and we're gonna think

20
00:00:53,580 --> 00:00:55,860
about this experiment so you take a

21
00:00:55,229 --> 00:00:58,199
message

22
00:00:55,860 --> 00:01:00,000
you encode it and then you put it

23
00:00:58,199 --> 00:01:01,530
through this F this is gonna be a

24
00:01:00,000 --> 00:01:03,720
tampering function you decode the

25
00:01:01,530 --> 00:01:06,420
tempered code word and you output what

26
00:01:03,720 --> 00:01:09,360
you get okay so we want to properties we

27
00:01:06,420 --> 00:01:11,790
want correctness we want that if no

28
00:01:09,360 --> 00:01:14,070
tampering occurs you recover the message

29
00:01:11,790 --> 00:01:18,720
that you sent it's a non-trivial storage

30
00:01:14,070 --> 00:01:21,389
of information and we want that some

31
00:01:18,720 --> 00:01:25,440
security properties okay so we want that

32
00:01:21,390 --> 00:01:26,160
if your temper if you do tamper with the

33
00:01:25,440 --> 00:01:27,750
code word

34
00:01:26,160 --> 00:01:29,310
you either recover exactly what you

35
00:01:27,750 --> 00:01:31,800
started with or something completely

36
00:01:29,310 --> 00:01:34,409
unrelated what we want we don't want to

37
00:01:31,800 --> 00:01:37,229
happen is this X tilde here the tamper

38
00:01:34,409 --> 00:01:38,520
the output is it's like X plus 1 or

39
00:01:37,230 --> 00:01:40,950
something like this what we would like

40
00:01:38,520 --> 00:01:43,710
instead is that like basically all the

41
00:01:40,950 --> 00:01:45,540
attacker can do is just delete what you

42
00:01:43,710 --> 00:01:47,309
put through the channel and put what

43
00:01:45,540 --> 00:01:50,250
every once something that has nothing to

44
00:01:47,310 --> 00:01:52,890
do with the message okay so let's

45
00:01:50,250 --> 00:01:54,330
formalize this a bit so again we have

46
00:01:52,890 --> 00:01:57,360
the same experiment so how could we

47
00:01:54,330 --> 00:01:59,070
formalize this notion of unrelated news

48
00:01:57,360 --> 00:02:01,320
so imagine we have a simulator and the

49
00:01:59,070 --> 00:02:03,600
simulator is going to pend depend only

50
00:02:01,320 --> 00:02:04,979
on the tempering function okay so it's

51
00:02:03,600 --> 00:02:07,488
gonna flip some coins and it's going to

52
00:02:04,979 --> 00:02:11,849
either output a special symbol same or

53
00:02:07,489 --> 00:02:14,459
some what so some random message see

54
00:02:11,849 --> 00:02:16,350
okay it doesn't fix message you can

55
00:02:14,459 --> 00:02:18,540
output the distribution or it can output

56
00:02:16,350 --> 00:02:20,730
many messages right but

57
00:02:18,540 --> 00:02:22,049
this is independent of any input right

58
00:02:20,730 --> 00:02:25,109
it only depends on the tempering

59
00:02:22,050 --> 00:02:27,690
function okay we want to say that this

60
00:02:25,110 --> 00:02:29,220
simulator if we wrap the simulator and

61
00:02:27,690 --> 00:02:31,170
whenever it whether we see the symbol

62
00:02:29,220 --> 00:02:32,819
same we replace it with X otherwise we

63
00:02:31,170 --> 00:02:35,609
just send through the message at output

64
00:02:32,819 --> 00:02:37,379
and we wanted this distribution this

65
00:02:35,610 --> 00:02:39,959
should be statistically close to the

66
00:02:37,379 --> 00:02:41,540
output of the distribution above okay so

67
00:02:39,959 --> 00:02:44,340
this gives you the sort of ideal

68
00:02:41,540 --> 00:02:45,929
real-world paradigm we're familiar with

69
00:02:44,340 --> 00:02:48,450
in cryptography we want this notion to

70
00:02:45,930 --> 00:02:51,239
be of coarseness to be statistical in

71
00:02:48,450 --> 00:02:54,899
this talk okay and another way that we

72
00:02:51,239 --> 00:02:57,870
can frame this is we say that the this

73
00:02:54,900 --> 00:03:00,329
experiment is statistically close to

74
00:02:57,870 --> 00:03:02,250
some distribution of our identity and

75
00:03:00,329 --> 00:03:04,410
constant functions okay

76
00:03:02,250 --> 00:03:08,220
so is this experiment so the function

77
00:03:04,410 --> 00:03:09,959
defined by randomly encoding tampering

78
00:03:08,220 --> 00:03:12,540
and decoding should be close to some

79
00:03:09,959 --> 00:03:13,920
distribution that over identity in

80
00:03:12,540 --> 00:03:17,220
constant and it only depends on the

81
00:03:13,920 --> 00:03:20,369
tempering function okay right and we

82
00:03:17,220 --> 00:03:22,200
need some parameters so epsilon is going

83
00:03:20,370 --> 00:03:23,970
to correspond to sort of the distance K

84
00:03:22,200 --> 00:03:25,828
is going to be the message links and n

85
00:03:23,970 --> 00:03:28,139
is going to be the codeword links okay

86
00:03:25,829 --> 00:03:32,160
going forward so some initial

87
00:03:28,139 --> 00:03:35,120
observations you can't hope to achieve

88
00:03:32,160 --> 00:03:39,329
non liability against arbitrary

89
00:03:35,120 --> 00:03:40,799
tampering functions so it's easy to see

90
00:03:39,329 --> 00:03:42,480
that you can always just decode temper

91
00:03:40,799 --> 00:03:44,010
and Riaan code right this attack will

92
00:03:42,480 --> 00:03:45,599
always work so you have to limit your

93
00:03:44,010 --> 00:03:48,358
classes somewhat so it may might

94
00:03:45,599 --> 00:03:50,040
consider okay let's consider the natural

95
00:03:48,359 --> 00:03:51,810
thing to consider it's like some

96
00:03:50,040 --> 00:03:53,310
complete fix some complexity class like

97
00:03:51,810 --> 00:03:56,430
in cryptography we often have P

98
00:03:53,310 --> 00:03:58,380
adversaries but if you need if you think

99
00:03:56,430 --> 00:04:00,269
about it a little bit I want to you can

100
00:03:58,380 --> 00:04:01,888
think about it on your own if you have a

101
00:04:00,269 --> 00:04:06,510
non valuable code against a complexity

102
00:04:01,889 --> 00:04:08,069
class let's say you're it implies a very

103
00:04:06,510 --> 00:04:09,959
strong average case hardness bound

104
00:04:08,069 --> 00:04:12,060
against the complexity class so these

105
00:04:09,959 --> 00:04:13,799
basically limits if you want an

106
00:04:12,060 --> 00:04:15,540
unconditional non valuable code and

107
00:04:13,799 --> 00:04:17,940
explicit unconditional non valuable code

108
00:04:15,540 --> 00:04:20,728
it sort of limits where you have hope of

109
00:04:17,940 --> 00:04:22,289
fine of achieving such an object because

110
00:04:20,728 --> 00:04:24,690
basically it implies really strong

111
00:04:22,289 --> 00:04:26,700
circuit lower bounds so what sorts of

112
00:04:24,690 --> 00:04:28,620
codes do we have like this so we have

113
00:04:26,700 --> 00:04:29,969
there's a ton of work on other tampering

114
00:04:28,620 --> 00:04:31,360
classes I'm just going to focus on

115
00:04:29,969 --> 00:04:33,520
things that are sort of

116
00:04:31,360 --> 00:04:39,030
the corresponding natural complexity

117
00:04:33,520 --> 00:04:42,310
classes okay so in 2016 oh sorry with

118
00:04:39,030 --> 00:04:44,469
Donna document solid and McCool Kulkarni

119
00:04:42,310 --> 00:04:46,810
and tal Malkin we constructed a non

120
00:04:44,469 --> 00:04:48,610
valuable code for local functions so a

121
00:04:46,810 --> 00:04:50,949
local function it's a function where

122
00:04:48,610 --> 00:04:53,110
each output only depends on a few input

123
00:04:50,949 --> 00:04:55,360
bits you can write the output bit as a

124
00:04:53,110 --> 00:04:56,650
function of in this case at most three

125
00:04:55,360 --> 00:05:00,150
inputs okay

126
00:04:56,650 --> 00:05:02,530
and so we construct these codes for

127
00:05:00,150 --> 00:05:04,359
local functions where the locality

128
00:05:02,530 --> 00:05:06,429
parameter is n to the 1 minus epsilon

129
00:05:04,360 --> 00:05:11,289
it's like some polynomial polynomial

130
00:05:06,430 --> 00:05:13,360
okay epsilon is anything it's like

131
00:05:11,289 --> 00:05:14,979
between zero and one any constant okay

132
00:05:13,360 --> 00:05:16,360
and this contains NC 0 if you don't know

133
00:05:14,979 --> 00:05:17,789
what that is great it's fine that's

134
00:05:16,360 --> 00:05:21,460
right

135
00:05:17,789 --> 00:05:23,289
sorry no then the following year

136
00:05:21,460 --> 00:05:24,969
Chattopadhyay and Lee constructed a non

137
00:05:23,289 --> 00:05:27,068
valuable code for small depth circuits

138
00:05:24,969 --> 00:05:30,879
what is a small depth circuit small

139
00:05:27,069 --> 00:05:35,919
depth circuit is circuit severe depth D

140
00:05:30,879 --> 00:05:37,719
and it contains unbounded fanon and and

141
00:05:35,919 --> 00:05:39,430
or gates and not gates okay and you can

142
00:05:37,719 --> 00:05:41,409
always arrange them in this fashion with

143
00:05:39,430 --> 00:05:43,659
if you're willing to pay a little bit in

144
00:05:41,409 --> 00:05:45,940
the depth but not much okay

145
00:05:43,659 --> 00:05:48,339
and so they give this construction it is

146
00:05:45,940 --> 00:05:51,400
great using something called non value

147
00:05:48,339 --> 00:05:53,759
books directors but the a code word

148
00:05:51,400 --> 00:05:58,150
length is almost exponential in the

149
00:05:53,759 --> 00:06:01,599
message size okay the following year

150
00:05:58,150 --> 00:06:04,388
with donna documents solid c I'll go

151
00:06:01,599 --> 00:06:06,729
tell Malkin in the Yankton we gave a new

152
00:06:04,389 --> 00:06:10,029
construction for non liable codes for

153
00:06:06,729 --> 00:06:12,339
small depth circuits where the message

154
00:06:10,029 --> 00:06:16,539
the code word length is almost linear in

155
00:06:12,339 --> 00:06:20,199
the message likes okay okay then it

156
00:06:16,539 --> 00:06:21,938
supports depth D up to log and over log

157
00:06:20,199 --> 00:06:23,800
log N and surprisingly if you can change

158
00:06:21,939 --> 00:06:27,789
this C to a big oh you would already

159
00:06:23,800 --> 00:06:29,229
separate P from nc1 okay but there's a

160
00:06:27,789 --> 00:06:31,539
problem with both of these constructions

161
00:06:29,229 --> 00:06:33,909
and that's that the error is not very

162
00:06:31,539 --> 00:06:36,550
good it's just barely negligible

163
00:06:33,909 --> 00:06:39,159
basically and also the size it does not

164
00:06:36,550 --> 00:06:41,589
support super light size circuits that

165
00:06:39,159 --> 00:06:44,110
like we're where we know circuit lower

166
00:06:41,589 --> 00:06:45,249
bounds basically so it's not quite as

167
00:06:44,110 --> 00:06:48,189
good as we would like and import

168
00:06:45,249 --> 00:06:49,959
killer if you fix this epsilon to be 2

169
00:06:48,189 --> 00:06:53,319
to the minus lambda for some security

170
00:06:49,959 --> 00:06:55,869
parameter lambda then again the codeword

171
00:06:53,319 --> 00:06:57,369
length is exponential message size and

172
00:06:55,869 --> 00:07:00,159
so this is something that we were hoping

173
00:06:57,369 --> 00:07:01,479
to address with this work and not in a

174
00:07:00,159 --> 00:07:05,109
message hi sorry and the security

175
00:07:01,479 --> 00:07:08,258
parameter so in this work we prove three

176
00:07:05,109 --> 00:07:10,329
results and the first one we prove we

177
00:07:08,259 --> 00:07:12,969
construct an unlevel code with very good

178
00:07:10,329 --> 00:07:15,849
error contrasted to what was previously

179
00:07:12,969 --> 00:07:17,439
known which it supports the same for

180
00:07:15,849 --> 00:07:20,699
small depth circuits of the same depth

181
00:07:17,439 --> 00:07:23,110
as before and substantially larger size

182
00:07:20,699 --> 00:07:24,759
okay and along the way we construct two

183
00:07:23,110 --> 00:07:26,649
other codes but I'll tell you more

184
00:07:24,759 --> 00:07:28,479
upfront one for decision trees and one

185
00:07:26,649 --> 00:07:29,829
for leakage resilient split state

186
00:07:28,479 --> 00:07:32,619
tampering but I'll tell you more about

187
00:07:29,829 --> 00:07:35,379
that in a couple minutes but first I

188
00:07:32,619 --> 00:07:36,639
want to zoom in on this first theorem so

189
00:07:35,379 --> 00:07:37,929
how would you how would you prove

190
00:07:36,639 --> 00:07:40,619
something like this how would you

191
00:07:37,929 --> 00:07:43,359
construct such an honorable code so

192
00:07:40,619 --> 00:07:44,739
going back recall the definition of the

193
00:07:43,359 --> 00:07:47,138
non valuable code so write the

194
00:07:44,739 --> 00:07:50,339
definition says that this experiment is

195
00:07:47,139 --> 00:07:53,860
close to some distribution of her

196
00:07:50,339 --> 00:07:55,809
identity and constant functions okay so

197
00:07:53,860 --> 00:07:58,839
another way of viewing this introduced

198
00:07:55,809 --> 00:08:01,869
by some others is viewing this is taking

199
00:07:58,839 --> 00:08:05,289
a complicated channel and reducing it to

200
00:08:01,869 --> 00:08:07,149
a simple channel a simple channel that

201
00:08:05,289 --> 00:08:09,489
we like that we know how to handle

202
00:08:07,149 --> 00:08:13,360
basically so the encoding and decoding

203
00:08:09,489 --> 00:08:16,779
or the reduction okay why is this so

204
00:08:13,360 --> 00:08:19,269
formal formally when would we say this

205
00:08:16,779 --> 00:08:22,449
so writes E&D non malleable reduces a

206
00:08:19,269 --> 00:08:25,719
class tampering class F to G if e

207
00:08:22,449 --> 00:08:27,959
composed with any function f in the

208
00:08:25,719 --> 00:08:29,979
class composed to get and then with D

209
00:08:27,959 --> 00:08:32,529
maybe I'm saying that backwards but

210
00:08:29,979 --> 00:08:35,529
should be statistically close to D some

211
00:08:32,529 --> 00:08:37,899
distribution over functions in G G is

212
00:08:35,529 --> 00:08:40,929
the nice class here okay and you also

213
00:08:37,899 --> 00:08:42,370
need this non-trivial T requirement as

214
00:08:40,929 --> 00:08:44,758
well you need to preserve this that

215
00:08:42,370 --> 00:08:47,680
you're actually encoding something and

216
00:08:44,759 --> 00:08:49,870
so why is this nice so say we have such

217
00:08:47,680 --> 00:08:53,050
a reduction from some horrible class F

218
00:08:49,870 --> 00:08:54,459
to some nice class G where we know how

219
00:08:53,050 --> 00:08:56,319
to deal with G if we have such a

220
00:08:54,459 --> 00:08:58,959
reduction and so let's say we have a non

221
00:08:56,319 --> 00:09:03,490
valuable code also for G we can just

222
00:08:58,960 --> 00:09:05,800
compose the two codes and in pictures we

223
00:09:03,490 --> 00:09:08,410
know that the code applied to functions

224
00:09:05,800 --> 00:09:10,329
in G is you know a non malleable cold

225
00:09:08,410 --> 00:09:12,160
and so the composed code is now in non

226
00:09:10,330 --> 00:09:15,100
mega code for F and so it gives us this

227
00:09:12,160 --> 00:09:16,899
nice way of constructing codes and so

228
00:09:15,100 --> 00:09:18,970
that's what we're going to and so all of

229
00:09:16,899 --> 00:09:20,680
our results actually the reason we have

230
00:09:18,970 --> 00:09:22,360
these intermediate results is they're

231
00:09:20,680 --> 00:09:24,599
going to follow the all of these results

232
00:09:22,360 --> 00:09:27,070
follow from such non liable reductions

233
00:09:24,600 --> 00:09:28,209
okay so a bird's eye view what we're

234
00:09:27,070 --> 00:09:31,630
going to have is we're gonna have this

235
00:09:28,209 --> 00:09:33,310
whole tower of reduction on valuable

236
00:09:31,630 --> 00:09:35,260
reductions from small circuits small

237
00:09:33,310 --> 00:09:37,750
depth circuits the decision trees to

238
00:09:35,260 --> 00:09:39,850
these leakage resilient a split state or

239
00:09:37,750 --> 00:09:43,029
leaky split state tampering functions to

240
00:09:39,850 --> 00:09:44,430
split states and then split state non

241
00:09:43,029 --> 00:09:47,170
codes exist

242
00:09:44,430 --> 00:09:48,609
okay so let's zoom in before I tell you

243
00:09:47,170 --> 00:09:50,229
what all these other things even are

244
00:09:48,610 --> 00:09:52,450
let's zoom in on this small depth

245
00:09:50,230 --> 00:09:54,100
circuit thing so this is a reduction

246
00:09:52,450 --> 00:09:56,830
from the prior work and what basically

247
00:09:54,100 --> 00:09:59,440
the main idea here is we took we noticed

248
00:09:56,830 --> 00:10:01,209
it in the circuit lower bound literature

249
00:09:59,440 --> 00:10:04,120
you have this machine race switching

250
00:10:01,209 --> 00:10:08,319
lemmas for reducing small depth circuits

251
00:10:04,120 --> 00:10:10,150
to decision trees okay and so the first

252
00:10:08,320 --> 00:10:11,830
of this work was taking this machinery

253
00:10:10,150 --> 00:10:13,270
and turning it into a non-metal

254
00:10:11,830 --> 00:10:15,940
reduction so in the non malleable

255
00:10:13,270 --> 00:10:19,689
setting you can reduce small depth

256
00:10:15,940 --> 00:10:21,190
circuits to decision trees okay so what

257
00:10:19,690 --> 00:10:23,740
is the decision tree so recall this

258
00:10:21,190 --> 00:10:26,170
local function so this thing so each

259
00:10:23,740 --> 00:10:28,990
output depends on a few input bits it's

260
00:10:26,170 --> 00:10:31,029
local but these choices of the input

261
00:10:28,990 --> 00:10:33,310
bits that it depends on are statically

262
00:10:31,029 --> 00:10:34,750
made so in a decision tree this is

263
00:10:33,310 --> 00:10:39,250
dynamic so on the right we have a

264
00:10:34,750 --> 00:10:41,380
picture of decision tree and so each to

265
00:10:39,250 --> 00:10:44,140
evaluate this decision tree you know

266
00:10:41,380 --> 00:10:45,310
this see it's going to be said probe the

267
00:10:44,140 --> 00:10:49,029
bits on the left

268
00:10:45,310 --> 00:10:51,310
we're like adaptively and reads them off

269
00:10:49,029 --> 00:10:53,079
and decides which path to follow until

270
00:10:51,310 --> 00:10:54,550
it gets to a leaf in this tree and then

271
00:10:53,079 --> 00:10:56,680
it will output whatever the leaf is

272
00:10:54,550 --> 00:10:58,029
label twist okay so all of the outputs

273
00:10:56,680 --> 00:11:01,989
are behaved like this they can make

274
00:10:58,029 --> 00:11:03,279
adaptive queries to the input okay the

275
00:11:01,990 --> 00:11:05,440
depth is the longer length of the

276
00:11:03,279 --> 00:11:07,209
longest path and if you think about it

277
00:11:05,440 --> 00:11:10,150
for a minute it's easy to notice you can

278
00:11:07,209 --> 00:11:12,459
notice that if decision the decision

279
00:11:10,150 --> 00:11:15,959
trees of depth D or

280
00:11:12,460 --> 00:11:19,960
have locality two to the tea okay and

281
00:11:15,960 --> 00:11:24,130
also can be encoded by TT DNFs

282
00:11:19,960 --> 00:11:25,810
of size exponential ng okay so in this

283
00:11:24,130 --> 00:11:29,410
reduction we use that fact that I just

284
00:11:25,810 --> 00:11:31,479
mentioned that local functions sort of

285
00:11:29,410 --> 00:11:33,550
capture very small decision trees this

286
00:11:31,480 --> 00:11:37,720
only works this relationship only holds

287
00:11:33,550 --> 00:11:39,579
40 at most depth at most log in but the

288
00:11:37,720 --> 00:11:42,250
problem with this is this reduction that

289
00:11:39,580 --> 00:11:43,899
we had so the sort of quality of the

290
00:11:42,250 --> 00:11:45,820
reduction depends on the decision tree

291
00:11:43,899 --> 00:11:49,330
depths that you're going to so if we

292
00:11:45,820 --> 00:11:54,580
want to go to depth T you're paying your

293
00:11:49,330 --> 00:11:57,100
epsilon you expect to get is T to the is

294
00:11:54,580 --> 00:11:59,500
T to the T essentially T to the minus T

295
00:11:57,100 --> 00:12:02,080
so in our work because we didn't have

296
00:11:59,500 --> 00:12:06,010
codes for decision trees we reduced to

297
00:12:02,080 --> 00:12:07,990
local functions and the local functions

298
00:12:06,010 --> 00:12:09,819
right the best you can do in terms of

299
00:12:07,990 --> 00:12:13,089
decision tree depth if you build them as

300
00:12:09,820 --> 00:12:15,160
decision trees is log n depth so this

301
00:12:13,089 --> 00:12:16,990
gives you this is where this bad error

302
00:12:15,160 --> 00:12:20,709
bound comes from because it's like log

303
00:12:16,990 --> 00:12:22,120
and the log n but in this work we

304
00:12:20,709 --> 00:12:25,000
construct non valuable codes for

305
00:12:22,120 --> 00:12:27,700
decision trees of small polynomial depth

306
00:12:25,000 --> 00:12:30,600
in particularly like approximately n to

307
00:12:27,700 --> 00:12:35,170
the 1/4 minus Epsilon

308
00:12:30,600 --> 00:12:37,480
ok so right this is what exactly what we

309
00:12:35,170 --> 00:12:39,219
do construct it's not even close and I

310
00:12:37,480 --> 00:12:41,320
should mention that these we think these

311
00:12:39,220 --> 00:12:42,970
things are independently interesting so

312
00:12:41,320 --> 00:12:47,170
it's not like this is a strict subset of

313
00:12:42,970 --> 00:12:49,650
small depth circuits it's I mean well it

314
00:12:47,170 --> 00:12:51,910
is if the circuits are large enough but

315
00:12:49,650 --> 00:12:55,300
it's independently interesting in this

316
00:12:51,910 --> 00:12:57,790
parameter regime ok and the best thing

317
00:12:55,300 --> 00:12:59,469
that was known before was depth the log

318
00:12:57,790 --> 00:13:01,089
squared n but that doesn't seem

319
00:12:59,470 --> 00:13:03,790
consistent with what I told you but

320
00:13:01,089 --> 00:13:05,980
that's actually from if you convert your

321
00:13:03,790 --> 00:13:07,930
decision tree to a DNF then you get that

322
00:13:05,980 --> 00:13:09,399
and the only thing with comparable error

323
00:13:07,930 --> 00:13:11,890
is this code that we were using before

324
00:13:09,399 --> 00:13:17,410
for local functions it only works for T

325
00:13:11,890 --> 00:13:18,579
of log n ok so how soothing in again so

326
00:13:17,410 --> 00:13:20,170
how are we going to construct these

327
00:13:18,579 --> 00:13:22,510
codes for decision trees looking ahead

328
00:13:20,170 --> 00:13:26,050
like we're going to have some more

329
00:13:22,510 --> 00:13:27,130
reductions obviously so what worked was

330
00:13:26,050 --> 00:13:31,449
starting point so we were looking at

331
00:13:27,130 --> 00:13:34,930
this work from 2016 where we with this

332
00:13:31,450 --> 00:13:39,910
code for locality locality okay

333
00:13:34,930 --> 00:13:41,739
and the key lemma is again a non

334
00:13:39,910 --> 00:13:43,719
valuable reduction from local tempering

335
00:13:41,740 --> 00:13:45,160
to split states tempering so I should

336
00:13:43,720 --> 00:13:46,690
tell you what split state tempering is

337
00:13:45,160 --> 00:13:48,880
I've mentioned it a couple of times so

338
00:13:46,690 --> 00:13:50,170
splits a tempering is like the output of

339
00:13:48,880 --> 00:13:52,209
your encoding gives you two code words

340
00:13:50,170 --> 00:13:57,310
and you tamper with them completely

341
00:13:52,209 --> 00:13:59,199
independently and then decode okay so

342
00:13:57,310 --> 00:14:00,670
the split state tempering is like this

343
00:13:59,200 --> 00:14:02,410
independent tempering and there's very

344
00:14:00,670 --> 00:14:06,279
good codes this is an example from last

345
00:14:02,410 --> 00:14:08,740
year subsequent work there's a recent

346
00:14:06,279 --> 00:14:14,920
paper that has a constant rate but for

347
00:14:08,740 --> 00:14:19,240
our purposes this is fine right so in

348
00:14:14,920 --> 00:14:22,329
this work so today actually we actually

349
00:14:19,240 --> 00:14:24,399
constructed it wasn't a direct reduction

350
00:14:22,329 --> 00:14:26,109
initially it was this two piece

351
00:14:24,399 --> 00:14:29,019
reduction we reduced from local

352
00:14:26,110 --> 00:14:31,899
tempering to leaky input/output local

353
00:14:29,019 --> 00:14:33,190
where the dependence on both sides we

354
00:14:31,899 --> 00:14:35,440
had this dependence graph for local

355
00:14:33,190 --> 00:14:38,649
function it doesn't really matter we had

356
00:14:35,440 --> 00:14:40,060
this we had this two reduction way of

357
00:14:38,649 --> 00:14:41,920
getting to where we wanted to go and

358
00:14:40,060 --> 00:14:44,589
then when we were looking at this we

359
00:14:41,920 --> 00:14:47,380
decided this was maybe the wrong way of

360
00:14:44,589 --> 00:14:49,360
abstracting what was going on so instead

361
00:14:47,380 --> 00:14:51,130
we introduced this new abstraction where

362
00:14:49,360 --> 00:14:53,980
really we're viewing this called as

363
00:14:51,130 --> 00:14:56,829
being into the composition of two

364
00:14:53,980 --> 00:14:58,450
reductions instead where instead you're

365
00:14:56,829 --> 00:15:01,810
going from local tempering to what we'll

366
00:14:58,450 --> 00:15:04,360
call wiki weekly leaky split States

367
00:15:01,810 --> 00:15:06,579
tempering it doesn't and then from there

368
00:15:04,360 --> 00:15:09,730
two splits a tempering okay so what is

369
00:15:06,579 --> 00:15:12,670
this week leakage tampering basically

370
00:15:09,730 --> 00:15:14,589
the functions are allowed to read a

371
00:15:12,670 --> 00:15:16,750
couple of bits at the beginning from the

372
00:15:14,589 --> 00:15:18,730
other side and then they have to tamper

373
00:15:16,750 --> 00:15:21,730
independently from that on okay so the

374
00:15:18,730 --> 00:15:24,420
reduction for this from the leaky split

375
00:15:21,730 --> 00:15:27,160
states or this weekly leaky split state

376
00:15:24,420 --> 00:15:28,599
to split state is very simply just do

377
00:15:27,160 --> 00:15:32,230
you use some secret sharing techniques

378
00:15:28,600 --> 00:15:37,540
the meet is in the left the left-hand

379
00:15:32,230 --> 00:15:39,670
portion of this okay and but why was

380
00:15:37,540 --> 00:15:42,130
this useful because we noticed

381
00:15:39,670 --> 00:15:44,829
when we thought about it like this if we

382
00:15:42,130 --> 00:15:46,329
used similar techniques not to the same

383
00:15:44,829 --> 00:15:48,069
but if we use similar techniques we

384
00:15:46,329 --> 00:15:50,829
could push things a lot further by it

385
00:15:48,070 --> 00:15:54,490
via this abstraction if instead of this

386
00:15:50,829 --> 00:15:56,979
super weak version if we had before of

387
00:15:54,490 --> 00:16:00,670
leakage if we use a stronger version of

388
00:15:56,980 --> 00:16:03,730
leakage then we can push up to a much

389
00:16:00,670 --> 00:16:05,829
stronger tempering class in terms of

390
00:16:03,730 --> 00:16:08,560
decision trees okay and so what we did

391
00:16:05,829 --> 00:16:12,329
is we constructed two no reductions but

392
00:16:08,560 --> 00:16:12,329
first I need to tell you what this

393
00:16:12,990 --> 00:16:16,149
unfortunately actually I won't be able

394
00:16:14,769 --> 00:16:18,550
to tell you much about either of these

395
00:16:16,149 --> 00:16:20,350
reductions but I will tell you what this

396
00:16:18,550 --> 00:16:24,430
leakage resilient split state class is

397
00:16:20,350 --> 00:16:27,970
so and we think of Alice and Bob as each

398
00:16:24,430 --> 00:16:29,500
getting as input a code word okay and

399
00:16:27,970 --> 00:16:32,800
they're going to be tampering with these

400
00:16:29,500 --> 00:16:34,200
code words and but the leakage is

401
00:16:32,800 --> 00:16:36,880
basically they're allowed to communicate

402
00:16:34,200 --> 00:16:38,190
before having to output temperate code

403
00:16:36,880 --> 00:16:40,930
word and they're allowed to communicate

404
00:16:38,190 --> 00:16:42,700
Delta and over to bits so they each have

405
00:16:40,930 --> 00:16:45,010
a code word of size n over 2 and they

406
00:16:42,700 --> 00:16:48,130
have to they can communicate Delta n

407
00:16:45,010 --> 00:16:49,810
over 2 bits and then they have to output

408
00:16:48,130 --> 00:16:51,370
a temperate code word whatever they want

409
00:16:49,810 --> 00:16:52,810
they're completely computationally

410
00:16:51,370 --> 00:16:54,910
unbounded they're only bounded in

411
00:16:52,810 --> 00:16:58,899
communication and this has actually been

412
00:16:54,910 --> 00:17:01,630
studied in the past so agrawal it's all

413
00:16:58,899 --> 00:17:03,339
constructed a split state called these

414
00:17:01,630 --> 00:17:06,579
these objects from split state codes

415
00:17:03,339 --> 00:17:09,790
with special properties Chattopadhyay

416
00:17:06,579 --> 00:17:12,399
only construct these things via split

417
00:17:09,790 --> 00:17:15,520
state extractors non bailable extractors

418
00:17:12,400 --> 00:17:17,799
and in this work we give a new

419
00:17:15,520 --> 00:17:21,520
construction it's in our view much

420
00:17:17,799 --> 00:17:24,429
simpler and it's say also a blackbox can

421
00:17:21,520 --> 00:17:26,379
productions from this leaky resilient

422
00:17:24,429 --> 00:17:29,350
split state to split States so it works

423
00:17:26,380 --> 00:17:30,910
with what unlike the former example it

424
00:17:29,350 --> 00:17:32,678
works whatever split state code you

425
00:17:30,910 --> 00:17:34,540
start with and it gives you better

426
00:17:32,679 --> 00:17:36,309
parameters in terms of leakage or at

427
00:17:34,540 --> 00:17:43,230
least explicit parameters in terms of

428
00:17:36,309 --> 00:17:47,470
leakage okay so these are our results

429
00:17:43,230 --> 00:17:50,140
and unfortunately I will have to point

430
00:17:47,470 --> 00:17:52,030
you to the paper if you would like to

431
00:17:50,140 --> 00:17:57,520
learn more the details because I don't

432
00:17:52,030 --> 00:17:59,830
have a ton of time but some open

433
00:17:57,520 --> 00:18:02,110
problems and I'd like to leave you with

434
00:17:59,830 --> 00:18:04,149
because and I have a ton of them if you

435
00:18:02,110 --> 00:18:07,439
if you're interested more interested but

436
00:18:04,150 --> 00:18:09,760
this we have this non label called

437
00:18:07,440 --> 00:18:13,090
our non liable code only works for

438
00:18:09,760 --> 00:18:16,140
decision trees up to slightly less than

439
00:18:13,090 --> 00:18:18,970
a quarter root and this we don't really

440
00:18:16,140 --> 00:18:21,970
understand why they seem sort of

441
00:18:18,970 --> 00:18:23,980
artificial and so getting a non-metal

442
00:18:21,970 --> 00:18:26,200
book code against larger depth decision

443
00:18:23,980 --> 00:18:29,740
trees we think is very interesting and

444
00:18:26,200 --> 00:18:35,890
second problem I'd like to leave you

445
00:18:29,740 --> 00:18:39,520
with is in this work for absolutely so

446
00:18:35,890 --> 00:18:45,580
right we achieve this epsilon it's 2 to

447
00:18:39,520 --> 00:18:48,400
the N to the 1 over D ok so for constant

448
00:18:45,580 --> 00:18:54,939
depth this gives you something that's

449
00:18:48,400 --> 00:18:58,240
polynomial in the error parameter and

450
00:18:54,940 --> 00:19:01,919
the security parameter but this isn't

451
00:18:58,240 --> 00:19:04,480
quite so so it's like at for very large

452
00:19:01,919 --> 00:19:06,130
so for very large circuits this is more

453
00:19:04,480 --> 00:19:07,690
or less consistent with the best things

454
00:19:06,130 --> 00:19:09,159
that are known in circuit lower bounds

455
00:19:07,690 --> 00:19:10,540
but for small circuits it's a bit

456
00:19:09,159 --> 00:19:13,600
different so the best the strongest

457
00:19:10,540 --> 00:19:16,000
result that's known is that epsilon the

458
00:19:13,600 --> 00:19:17,559
strongest average case lower bound for

459
00:19:16,000 --> 00:19:22,030
small DEP circuits is that if epsilon

460
00:19:17,559 --> 00:19:26,260
needs to be is it most two to the N over

461
00:19:22,030 --> 00:19:28,960
poly log and D over s which is the

462
00:19:26,260 --> 00:19:34,960
circuit size it's at most this

463
00:19:28,960 --> 00:19:37,510
correlated with parity which is for for

464
00:19:34,960 --> 00:19:41,140
small circuits if you have a poly size

465
00:19:37,510 --> 00:19:44,408
circuit then this means that it for much

466
00:19:41,140 --> 00:19:46,480
higher depth you can you should you

467
00:19:44,409 --> 00:19:48,280
should it seems intuitive that you

468
00:19:46,480 --> 00:19:51,309
should be part it should be possible to

469
00:19:48,280 --> 00:19:56,350
get much better dependence on the

470
00:19:51,309 --> 00:19:58,740
security parameter yeah I'll just leave

471
00:19:56,350 --> 00:20:01,510
you with this picture so right we

472
00:19:58,740 --> 00:20:03,040
construct these inner two reductions and

473
00:20:01,510 --> 00:20:06,490
give new codes for the

474
00:20:03,040 --> 00:20:15,099
three classes thank you

475
00:20:06,490 --> 00:20:15,099
[Applause]

476
00:20:26,139 --> 00:20:34,468
so let's thank the speaker again

477
00:20:30,400 --> 00:20:34,469
[Applause]

