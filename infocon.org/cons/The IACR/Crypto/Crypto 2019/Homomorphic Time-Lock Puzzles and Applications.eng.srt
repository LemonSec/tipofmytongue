1
00:00:05,800 --> 00:00:10,420
so welcome everyone so I'm gonna talk on

2
00:00:08,530 --> 00:00:12,940
homomorphic time love puzzles and

3
00:00:10,420 --> 00:00:15,670
applications so let's move straight to

4
00:00:12,940 --> 00:00:19,349
what the primitive is so time love

5
00:00:15,670 --> 00:00:22,990
puzzles the concept first originally

6
00:00:19,349 --> 00:00:25,090
emphasized in 93 and later proposed by

7
00:00:22,990 --> 00:00:28,778
River Shamir and Wagner in 96 is

8
00:00:25,090 --> 00:00:31,410
basically Alice choosing to have a

9
00:00:28,779 --> 00:00:35,890
solution embedded inside a puzzle and

10
00:00:31,410 --> 00:00:38,110
giving it to Bob and Bob takes this

11
00:00:35,890 --> 00:00:40,390
puzzle and tries to solve it for some

12
00:00:38,110 --> 00:00:43,090
amount of time that's T and eventually

13
00:00:40,390 --> 00:00:46,450
obtains the end solution that was

14
00:00:43,090 --> 00:00:49,690
originally embedded okay so what are the

15
00:00:46,450 --> 00:00:55,000
properties of such a time lock puzzle it

16
00:00:49,690 --> 00:00:58,599
requires this to considerably faster in

17
00:00:55,000 --> 00:01:01,239
generating this puzzle meaning that she

18
00:00:58,600 --> 00:01:03,820
takes much shorter time than T that is

19
00:01:01,239 --> 00:01:09,039
required to solve it and as a security

20
00:01:03,820 --> 00:01:11,050
requirement Bob when he tries to solve

21
00:01:09,039 --> 00:01:14,259
the puzzle and no matter how much amount

22
00:01:11,050 --> 00:01:16,090
of parallel computation power he uses he

23
00:01:14,259 --> 00:01:19,740
cannot solve the puzzle before time T

24
00:01:16,090 --> 00:01:23,250
and this primitive has found

25
00:01:19,740 --> 00:01:25,869
applications and wide ranging spheres

26
00:01:23,250 --> 00:01:28,030
namely sealed bid auctions fair contract

27
00:01:25,869 --> 00:01:29,590
signing zero-knowledge arguments non

28
00:01:28,030 --> 00:01:33,819
malleable commitments and so on and so

29
00:01:29,590 --> 00:01:37,539
forth so let me introduce some formalism

30
00:01:33,819 --> 00:01:39,009
for the primitive we have two algorithms

31
00:01:37,539 --> 00:01:41,229
that's the first one's the puzzle

32
00:01:39,009 --> 00:01:42,910
generation that takes the solution the

33
00:01:41,229 --> 00:01:45,509
security parameter and the timing

34
00:01:42,910 --> 00:01:49,119
hardness as input and it outputs the

35
00:01:45,509 --> 00:01:52,440
puzzle right and there's the solve

36
00:01:49,119 --> 00:01:54,580
algorithm that takes the puzzle and

37
00:01:52,440 --> 00:01:57,670
eventually outputs the solution that was

38
00:01:54,580 --> 00:01:59,619
embedded in it and as efficiency we

39
00:01:57,670 --> 00:02:01,810
would require the puzzle generation to

40
00:01:59,619 --> 00:02:04,840
run in poly log T where T is the timing

41
00:02:01,810 --> 00:02:10,239
hardness while the solving algorithm has

42
00:02:04,840 --> 00:02:12,580
to run in poly log poly T okay and the

43
00:02:10,239 --> 00:02:16,629
security requirement is that for any

44
00:02:12,580 --> 00:02:18,520
depth T bounded adversary a puzzle

45
00:02:16,629 --> 00:02:20,980
that's generated with solution SC

46
00:02:18,520 --> 00:02:23,790
is indistinguishable from a puzzle

47
00:02:20,980 --> 00:02:27,640
that's generated but solution is one

48
00:02:23,790 --> 00:02:29,290
okay there are two known constructions

49
00:02:27,640 --> 00:02:35,140
so far for time lock puzzles the first

50
00:02:29,290 --> 00:02:37,540
one from 96 it basically relies on the

51
00:02:35,140 --> 00:02:41,980
sequentially squaring a group element

52
00:02:37,540 --> 00:02:46,120
from Zn star note that if the order of

53
00:02:41,980 --> 00:02:49,450
500 order Phi n of Zn star is known it's

54
00:02:46,120 --> 00:02:55,030
easy to compute the result here by

55
00:02:49,450 --> 00:02:58,269
simply computing 2 2 over 2 power T

56
00:02:55,030 --> 00:03:02,020
lambda and doing a reducing it mod Phi

57
00:02:58,270 --> 00:03:04,450
of n and then encrypting the message as

58
00:03:02,020 --> 00:03:06,130
shown here and if the order of the group

59
00:03:04,450 --> 00:03:09,489
is not known that is Phi of n is not

60
00:03:06,130 --> 00:03:11,950
known then the only way to decrypt the

61
00:03:09,490 --> 00:03:13,780
message from this ciphertext is by

62
00:03:11,950 --> 00:03:17,880
taking the X and squaring it

63
00:03:13,780 --> 00:03:20,560
sequentially for to power T times and

64
00:03:17,880 --> 00:03:22,810
this the security relies on the

65
00:03:20,560 --> 00:03:25,690
sequential squaring assumption where it

66
00:03:22,810 --> 00:03:27,700
says that depth T adversary cannot do

67
00:03:25,690 --> 00:03:32,320
better than simply sequentially squaring

68
00:03:27,700 --> 00:03:34,420
it and then recently by baton scale we

69
00:03:32,320 --> 00:03:36,930
had a construction that's based on

70
00:03:34,420 --> 00:03:40,600
succinct randomized n coatings where

71
00:03:36,930 --> 00:03:44,430
program that does nothing for T steps is

72
00:03:40,600 --> 00:03:50,230
is what is inside the encoding and

73
00:03:44,430 --> 00:03:51,790
thereby you get the time parameter that

74
00:03:50,230 --> 00:03:54,609
you require for a third log puzzle and

75
00:03:51,790 --> 00:03:58,299
it relies on indistinguishability

76
00:03:54,610 --> 00:04:00,840
obfuscation okay

77
00:03:58,300 --> 00:04:04,480
time lock puzzle the reason it has found

78
00:04:00,840 --> 00:04:06,820
many application in for example in

79
00:04:04,480 --> 00:04:10,090
sealed bid auctions is that it proposes

80
00:04:06,820 --> 00:04:12,190
a solution for fairness for some notion

81
00:04:10,090 --> 00:04:13,330
of fairness which I will show you let's

82
00:04:12,190 --> 00:04:14,770
consider a seed with auctions where

83
00:04:13,330 --> 00:04:16,750
there is the bidding phase where the

84
00:04:14,770 --> 00:04:18,850
bidders embed their bids inside time

85
00:04:16,750 --> 00:04:23,110
lock puzzles and broadcast into the

86
00:04:18,850 --> 00:04:26,500
network there are two ways to open the

87
00:04:23,110 --> 00:04:29,830
time lock puzzle the first way is the

88
00:04:26,500 --> 00:04:31,600
bidder simply reveals the random coins

89
00:04:29,830 --> 00:04:32,050
that he used to generate these puzzles

90
00:04:31,600 --> 00:04:34,509
thereby

91
00:04:32,050 --> 00:04:37,419
revealing the bids directly and the

92
00:04:34,509 --> 00:04:39,190
other way is if if there are some

93
00:04:37,419 --> 00:04:41,139
bidders that are not revealing the coins

94
00:04:39,190 --> 00:04:43,780
you can simply use the solving algorithm

95
00:04:41,139 --> 00:04:46,120
to solve these puzzles and obtain the

96
00:04:43,780 --> 00:04:48,580
bits that were embedded now notice that

97
00:04:46,120 --> 00:04:51,849
one way or the other all the bits have

98
00:04:48,580 --> 00:04:53,740
been recovered and now with this

99
00:04:51,849 --> 00:04:55,719
information you can announce the winner

100
00:04:53,740 --> 00:04:57,460
notice that the fairness that is

101
00:04:55,720 --> 00:04:59,409
guaranteed by time-lock puzzle is that

102
00:04:57,460 --> 00:05:03,878
before announcing the eventual result

103
00:04:59,409 --> 00:05:08,440
you consider every party's input or in

104
00:05:03,879 --> 00:05:10,599
this case every bidders bid okay but

105
00:05:08,440 --> 00:05:14,110
there are some limitations to time lock

106
00:05:10,599 --> 00:05:16,810
puzzle namely the first one is that if

107
00:05:14,110 --> 00:05:19,330
you want to ignore a time lock puzzle in

108
00:05:16,810 --> 00:05:21,400
the hope of saving cost and solving it

109
00:05:19,330 --> 00:05:23,289
you basically compromise correctness of

110
00:05:21,400 --> 00:05:25,960
the application and this could lead to

111
00:05:23,289 --> 00:05:28,210
for example in the sealed bid auction

112
00:05:25,960 --> 00:05:30,370
case this could lead to bid suppression

113
00:05:28,210 --> 00:05:32,409
attacks where an adversary selectively

114
00:05:30,370 --> 00:05:35,080
suppresses some puzzles saying that he

115
00:05:32,409 --> 00:05:37,389
wants to save cost right and in the

116
00:05:35,080 --> 00:05:39,190
other extreme when you have a large

117
00:05:37,389 --> 00:05:42,819
number of time lock puzzles involved in

118
00:05:39,190 --> 00:05:46,599
a computation this means that an

119
00:05:42,819 --> 00:05:50,889
adversary could force regular innocent

120
00:05:46,599 --> 00:05:53,110
players in the system to solve like in

121
00:05:50,889 --> 00:05:54,719
this case 10,000 100,000 time love

122
00:05:53,110 --> 00:05:59,349
puzzles this which could prove

123
00:05:54,719 --> 00:06:02,520
computationally prohibitive okay so the

124
00:05:59,349 --> 00:06:05,139
conclusion is that time lock puzzles

125
00:06:02,520 --> 00:06:08,258
suffer from a scalability problem which

126
00:06:05,139 --> 00:06:12,479
actually hinders their practical

127
00:06:08,259 --> 00:06:16,270
adoption in many real-life applications

128
00:06:12,479 --> 00:06:18,159
so we our goal was to solve this very

129
00:06:16,270 --> 00:06:20,979
problem so consider the traditional

130
00:06:18,159 --> 00:06:23,020
approach where you solve the puzzles for

131
00:06:20,979 --> 00:06:25,960
some time T and then you learn and you

132
00:06:23,020 --> 00:06:28,799
compute the result here we propose an

133
00:06:25,960 --> 00:06:31,810
alternate paradigm where you basically

134
00:06:28,800 --> 00:06:36,509
homomorphic homomorphic compute on top

135
00:06:31,810 --> 00:06:39,219
of the puzzles and then you obtain the

136
00:06:36,509 --> 00:06:41,469
embedded result that desired result that

137
00:06:39,219 --> 00:06:45,339
you want from the application notice

138
00:06:41,469 --> 00:06:45,998
that this compute phase happen should be

139
00:06:45,339 --> 00:06:51,219
efficient

140
00:06:45,999 --> 00:06:53,769
for this approach to work all right so

141
00:06:51,219 --> 00:06:55,449
let me just drive in the fact by showing

142
00:06:53,769 --> 00:06:59,019
how this would work in the sealed bid

143
00:06:55,449 --> 00:07:00,699
auction case before like before we have

144
00:06:59,019 --> 00:07:03,189
the bit phase where bidders embed their

145
00:07:00,699 --> 00:07:04,809
bids in puzzles and then you have a

146
00:07:03,189 --> 00:07:06,909
computer phase where you take all these

147
00:07:04,809 --> 00:07:08,979
puzzles compute on top of them which

148
00:07:06,909 --> 00:07:13,688
results in a single puzzle with some bid

149
00:07:08,979 --> 00:07:15,758
embedded in it and you you try to solve

150
00:07:13,689 --> 00:07:18,719
this puzzle now note that instead of Phi

151
00:07:15,759 --> 00:07:22,209
you just have one puzzle to solve

152
00:07:18,719 --> 00:07:26,110
eventually after time T you obtained the

153
00:07:22,209 --> 00:07:28,779
bit the bid B that was embedded in this

154
00:07:26,110 --> 00:07:31,439
final puzzle which happens to be the say

155
00:07:28,779 --> 00:07:34,569
the maximum of all the bits that were

156
00:07:31,439 --> 00:07:36,429
originally but in the bidding phase with

157
00:07:34,569 --> 00:07:39,699
this information now you can eventually

158
00:07:36,429 --> 00:07:40,149
announce the winner of the auction all

159
00:07:39,699 --> 00:07:43,629
right

160
00:07:40,149 --> 00:07:47,019
it's time to to highlight our

161
00:07:43,629 --> 00:07:48,939
contribution so we form we formally

162
00:07:47,019 --> 00:07:52,119
propose the notion of homomorphic time

163
00:07:48,939 --> 00:07:53,169
lock puzzles give candidate

164
00:07:52,119 --> 00:07:55,959
constructions for different

165
00:07:53,169 --> 00:08:00,969
homomorphisms and also identify key

166
00:07:55,959 --> 00:08:03,069
applications so we identify three we

167
00:08:00,969 --> 00:08:06,039
give three constructions namely for

168
00:08:03,069 --> 00:08:08,229
linear homomorphism multiplicative

169
00:08:06,039 --> 00:08:10,929
homomorphism and as a feasibility result

170
00:08:08,229 --> 00:08:15,699
we show fully homomorphic time a puzzle

171
00:08:10,929 --> 00:08:17,979
and as applications go we have we

172
00:08:15,699 --> 00:08:20,769
identified Evo ting and multi-party coin

173
00:08:17,979 --> 00:08:23,860
flipping for our linear linear

174
00:08:20,769 --> 00:08:26,019
construction contract signing for the

175
00:08:23,860 --> 00:08:27,369
multiplicative construction and notice

176
00:08:26,019 --> 00:08:29,860
that with the fully homomorphic you

177
00:08:27,369 --> 00:08:31,959
could achieve all these applications but

178
00:08:29,860 --> 00:08:33,789
we care for practical efficiency there

179
00:08:31,959 --> 00:08:36,568
why these constructions actually make

180
00:08:33,789 --> 00:08:41,318
sense to realize the other applications

181
00:08:36,568 --> 00:08:45,389
all right just to just to clarify how

182
00:08:41,318 --> 00:08:49,120
this fh TLP plays against G notice that

183
00:08:45,389 --> 00:08:50,800
fhe is for as hard it's considered hard

184
00:08:49,120 --> 00:08:53,009
for probabilistic polynomial-time

185
00:08:50,800 --> 00:08:57,550
adversaries depending on the setting and

186
00:08:53,009 --> 00:08:59,440
FH TLP is hard for an arbitrary depth e

187
00:08:57,550 --> 00:09:02,649
adversary

188
00:08:59,440 --> 00:09:06,550
while fhe saves communication cost in a

189
00:09:02,649 --> 00:09:08,980
in a multi-party computation fh TLP is

190
00:09:06,550 --> 00:09:12,339
aimed at saving both communication and

191
00:09:08,980 --> 00:09:15,160
computation cost and you would require a

192
00:09:12,339 --> 00:09:19,690
secret key eventually to decrypt the

193
00:09:15,160 --> 00:09:21,550
final result of the fhe while in FH TLP

194
00:09:19,690 --> 00:09:26,110
the final result of the evaluation

195
00:09:21,550 --> 00:09:30,819
becomes public after some time T all

196
00:09:26,110 --> 00:09:32,589
right so as far as formalism goes for

197
00:09:30,820 --> 00:09:34,540
homomorphic time lock puzzles it

198
00:09:32,589 --> 00:09:36,040
inherits the two algorithms that's the

199
00:09:34,540 --> 00:09:37,689
puzzle generation and puzzle solving

200
00:09:36,040 --> 00:09:40,540
algorithm from the native time lock

201
00:09:37,690 --> 00:09:42,880
puzzle we additionally have a set up

202
00:09:40,540 --> 00:09:45,719
algorithm that takes the timing hardness

203
00:09:42,880 --> 00:09:48,970
and outputs some public parameters and

204
00:09:45,720 --> 00:09:52,120
we would like to emphasize that this set

205
00:09:48,970 --> 00:09:53,829
of algorithm is a one-time setup and you

206
00:09:52,120 --> 00:09:56,950
can consider the public parameters as

207
00:09:53,829 --> 00:09:59,979
being a common reference string if you

208
00:09:56,950 --> 00:10:01,870
may all right and then you have the

209
00:09:59,980 --> 00:10:03,820
homomorphic evaluation algorithm that

210
00:10:01,870 --> 00:10:05,829
takes the circuit of interest and some

211
00:10:03,820 --> 00:10:09,070
puzzles and computes on top of these

212
00:10:05,829 --> 00:10:12,790
puzzles to output resultant evaluated

213
00:10:09,070 --> 00:10:15,310
puzzle as far as efficiency goes we have

214
00:10:12,790 --> 00:10:17,410
the set up algorithm that runs in poly

215
00:10:15,310 --> 00:10:20,050
log T and you have the evaluation

216
00:10:17,410 --> 00:10:25,240
algorithm that runs in poly the size of

217
00:10:20,050 --> 00:10:27,010
the circuit of interest here okay so our

218
00:10:25,240 --> 00:10:30,310
correctness definition basically says

219
00:10:27,010 --> 00:10:33,399
that if you try to solve an evaluated

220
00:10:30,310 --> 00:10:37,060
puzzle with overwhelming probability it

221
00:10:33,399 --> 00:10:40,140
it should result in the circuit being

222
00:10:37,060 --> 00:10:43,630
evaluated on the embedded solutions and

223
00:10:40,140 --> 00:10:47,020
the solving algorithm when it operates

224
00:10:43,630 --> 00:10:50,320
on a evaluated puzzle is the running

225
00:10:47,020 --> 00:10:53,199
time is bounded by some p over the

226
00:10:50,320 --> 00:10:55,990
timing hardness T and then you have the

227
00:10:53,199 --> 00:10:58,240
security definition which is quite

228
00:10:55,990 --> 00:11:00,610
similar to what we had for normal time

229
00:10:58,240 --> 00:11:03,579
lock puzzles which is saying that

230
00:11:00,610 --> 00:11:06,180
homomorphic we generated puzzle of the

231
00:11:03,579 --> 00:11:09,219
solution s0 is indistinguishable from

232
00:11:06,180 --> 00:11:11,829
puzzle with embedded result s1 for a

233
00:11:09,220 --> 00:11:13,690
depth T bounded adversary

234
00:11:11,830 --> 00:11:15,940
and then you have a compactness

235
00:11:13,690 --> 00:11:19,390
definition that says that the size of

236
00:11:15,940 --> 00:11:24,850
the evaluated puzzle is bounded by some

237
00:11:19,390 --> 00:11:27,360
fixed polynomial on on the output on the

238
00:11:24,850 --> 00:11:32,980
size of the output of the circuit on the

239
00:11:27,360 --> 00:11:35,020
embedded solutions here all right let me

240
00:11:32,980 --> 00:11:37,240
directly go into our linear homomorphic

241
00:11:35,020 --> 00:11:38,560
construction which is fairly simple we

242
00:11:37,240 --> 00:11:41,500
have this set up algorithm that

243
00:11:38,560 --> 00:11:44,260
basically chooses RSA modulus n as shown

244
00:11:41,500 --> 00:11:47,800
here and it generates a generator G

245
00:11:44,260 --> 00:11:51,010
which is the generator for the group J n

246
00:11:47,800 --> 00:11:54,370
which is the set of all elements from Zn

247
00:11:51,010 --> 00:11:58,120
star with Jacobi symbol passes +1 it

248
00:11:54,370 --> 00:12:01,060
generates H over here which we can call

249
00:11:58,120 --> 00:12:04,510
a partial puzzle notice that this

250
00:12:01,060 --> 00:12:06,969
computation can be sped up because we

251
00:12:04,510 --> 00:12:10,840
know the factorization of n so this to

252
00:12:06,970 --> 00:12:14,200
power T can be computed fast and the

253
00:12:10,840 --> 00:12:17,170
resultant H can be computed much faster

254
00:12:14,200 --> 00:12:19,300
than what it would require to solve and

255
00:12:17,170 --> 00:12:22,870
then we output the public parameters

256
00:12:19,300 --> 00:12:25,750
with whatever we computed here all right

257
00:12:22,870 --> 00:12:32,950
and then you have the puzzle generation

258
00:12:25,750 --> 00:12:34,300
algorithm that basically ok ok ok so the

259
00:12:32,950 --> 00:12:36,580
puzzle generation algorithm chooses a

260
00:12:34,300 --> 00:12:40,120
random R which which acts as a

261
00:12:36,580 --> 00:12:42,790
randomization factor and it outputs the

262
00:12:40,120 --> 00:12:45,640
puzzle you components u and V where

263
00:12:42,790 --> 00:12:48,480
notice that this the component B is

264
00:12:45,640 --> 00:12:51,130
reminiscent of the Pylea crypto system

265
00:12:48,480 --> 00:12:54,910
ok and then you have this solving

266
00:12:51,130 --> 00:12:57,189
algorithm that takes the the puzzle UV

267
00:12:54,910 --> 00:12:59,949
and takes the first component you and

268
00:12:57,190 --> 00:13:02,230
sequentially squares it to obtain this

269
00:12:59,950 --> 00:13:04,270
blending factor and eventually obtain

270
00:13:02,230 --> 00:13:06,310
the solution s notice that the

271
00:13:04,270 --> 00:13:08,530
correctness of this solving algorithm

272
00:13:06,310 --> 00:13:12,099
follows the banana binomial expansion as

273
00:13:08,530 --> 00:13:15,040
as SN the pile your crypto system the

274
00:13:12,100 --> 00:13:16,840
evaluation algorithm ok ok the

275
00:13:15,040 --> 00:13:19,810
evaluation algorithm is fairly simple

276
00:13:16,840 --> 00:13:21,490
you take several puzzles you multiply

277
00:13:19,810 --> 00:13:25,319
the components of each of these puzzles

278
00:13:21,490 --> 00:13:29,250
to obtain the eventual

279
00:13:25,320 --> 00:13:32,490
evaluated puzzle here the security

280
00:13:29,250 --> 00:13:34,800
argument depends on the following

281
00:13:32,490 --> 00:13:36,570
assumptions you rely on strong

282
00:13:34,800 --> 00:13:38,459
sequential squaring assumption that

283
00:13:36,570 --> 00:13:40,800
basically says that the adversary in

284
00:13:38,460 --> 00:13:44,520
this case has knowledge of the group

285
00:13:40,800 --> 00:13:47,990
structure ahead of time and this

286
00:13:44,520 --> 00:13:51,060
assumption has been made in recent works

287
00:13:47,990 --> 00:13:54,240
then you rely on the DDH assumption over

288
00:13:51,060 --> 00:13:56,099
J n which is the Jacobi symbol plus 1 of

289
00:13:54,240 --> 00:13:57,720
state and star and then you rely on the

290
00:13:56,100 --> 00:13:59,840
BCR assumption that is the decisional

291
00:13:57,720 --> 00:14:04,500
composite residue asset the assumption

292
00:13:59,840 --> 00:14:07,890
ok let me jump into an application

293
00:14:04,500 --> 00:14:11,340
that's Evo ting for our linear

294
00:14:07,890 --> 00:14:13,500
construction notice that here we are our

295
00:14:11,340 --> 00:14:17,340
model the adversarial model is basically

296
00:14:13,500 --> 00:14:19,800
a semi malicious model and this this

297
00:14:17,340 --> 00:14:21,570
model could potentially be relaxed if if

298
00:14:19,800 --> 00:14:25,439
we use non interactive zero knowledge to

299
00:14:21,570 --> 00:14:28,880
prove the well form nests of puzzles ok

300
00:14:25,440 --> 00:14:31,110
so in this case we have some set of

301
00:14:28,880 --> 00:14:33,120
candidates five candidates and there are

302
00:14:31,110 --> 00:14:35,130
some voters here and they would like to

303
00:14:33,120 --> 00:14:37,020
vote for the candidate note that if it's

304
00:14:35,130 --> 00:14:38,820
a one it's a word for this candidate and

305
00:14:37,020 --> 00:14:40,920
if it's a zero it's not a word for the

306
00:14:38,820 --> 00:14:43,770
candidate so the voters decide their

307
00:14:40,920 --> 00:14:46,170
woods and they embed these boats inside

308
00:14:43,770 --> 00:14:50,460
time-lock puzzles and broadcast it to

309
00:14:46,170 --> 00:14:52,110
the network note that the the channel

310
00:14:50,460 --> 00:14:57,240
here happens to be anonymous so that the

311
00:14:52,110 --> 00:14:59,660
voters are not identified is it the case

312
00:14:57,240 --> 00:15:02,850
that we have to solve for T puzzles

313
00:14:59,660 --> 00:15:05,790
hopefully not and this where the our

314
00:15:02,850 --> 00:15:07,530
linear construction jumps in what we do

315
00:15:05,790 --> 00:15:09,270
is we basically take all the puzzles

316
00:15:07,530 --> 00:15:11,370
that are corresponding to a candidate

317
00:15:09,270 --> 00:15:14,310
homomorphic lee evaluate on top of that

318
00:15:11,370 --> 00:15:16,170
to obtain the resultant puzzle which

319
00:15:14,310 --> 00:15:18,689
gives us these puzzles for the

320
00:15:16,170 --> 00:15:20,370
candidates well notice that the the

321
00:15:18,690 --> 00:15:22,620
total number of votes garnered by this

322
00:15:20,370 --> 00:15:26,010
candidate is embedded in this evaluated

323
00:15:22,620 --> 00:15:28,950
puzzle for each candidate here okay

324
00:15:26,010 --> 00:15:32,100
now you only have five puzzles to solve

325
00:15:28,950 --> 00:15:34,350
instead of 40 right and after the

326
00:15:32,100 --> 00:15:36,910
solving phase you obtain the tally of

327
00:15:34,350 --> 00:15:39,970
each of each candidate and you

328
00:15:36,910 --> 00:15:41,770
eventually announce the result you could

329
00:15:39,970 --> 00:15:44,110
also gain public verifiability if you

330
00:15:41,770 --> 00:15:47,949
run this voting on top of a public

331
00:15:44,110 --> 00:15:49,360
ledger like blockchain where any user in

332
00:15:47,950 --> 00:15:52,050
the blockchain system can potentially

333
00:15:49,360 --> 00:15:56,410
solve puzzles we don't need a trusted

334
00:15:52,050 --> 00:15:58,510
authority to do the tally okay the other

335
00:15:56,410 --> 00:16:02,890
application for our linear construction

336
00:15:58,510 --> 00:16:05,350
is multi-party coin flipping here the

337
00:16:02,890 --> 00:16:07,449
users embed their randomness inside

338
00:16:05,350 --> 00:16:08,830
puzzles and broadcast them among

339
00:16:07,450 --> 00:16:11,200
themselves

340
00:16:08,830 --> 00:16:12,820
we homomorphic lis compute on top of

341
00:16:11,200 --> 00:16:16,960
these puzzles to obtain a resultant

342
00:16:12,820 --> 00:16:18,850
puzzle that's that has T here notice

343
00:16:16,960 --> 00:16:21,910
that instead of having 4 puzzles to

344
00:16:18,850 --> 00:16:24,100
solve now you have just one and after

345
00:16:21,910 --> 00:16:27,610
solving after spending time T solving

346
00:16:24,100 --> 00:16:29,800
this puzzle you obtain the result of the

347
00:16:27,610 --> 00:16:34,600
coin toss that you want to do computer

348
00:16:29,800 --> 00:16:36,880
originally here it's it's a linear

349
00:16:34,600 --> 00:16:40,810
combination of the randomness that were

350
00:16:36,880 --> 00:16:43,120
embedded originally ok so let me now

351
00:16:40,810 --> 00:16:46,089
briefly show you our multiplicative

352
00:16:43,120 --> 00:16:49,210
construction the set up algorithm

353
00:16:46,090 --> 00:16:53,380
follows the same as in our linear

354
00:16:49,210 --> 00:16:55,330
construction the puzzle generation is is

355
00:16:53,380 --> 00:16:58,300
reminiscent of the el-gamal system here

356
00:16:55,330 --> 00:17:01,360
and notice that this this this

357
00:16:58,300 --> 00:17:04,349
construction of mhm TLP can be extended

358
00:17:01,360 --> 00:17:09,940
to XOR homomorphism if you encode the

359
00:17:04,349 --> 00:17:12,849
solution s this way by having it as -1

360
00:17:09,940 --> 00:17:16,720
power s and the S is nothing but 0 or 1

361
00:17:12,849 --> 00:17:20,159
bits and then you have the resultant

362
00:17:16,720 --> 00:17:22,870
puzzle here the solving algorithm

363
00:17:20,160 --> 00:17:25,510
similarly takes the first component

364
00:17:22,869 --> 00:17:27,989
repeatedly squares it and then unblind

365
00:17:25,510 --> 00:17:32,730
the unblind from the second component 2

366
00:17:27,990 --> 00:17:37,240
to achieve the solution the the

367
00:17:32,730 --> 00:17:39,280
homomorphic evaluation algorithm is is

368
00:17:37,240 --> 00:17:41,110
the same as what we had for LH TLP you

369
00:17:39,280 --> 00:17:43,000
take different puzzles and you multiply

370
00:17:41,110 --> 00:17:47,219
each component of them correspondingly

371
00:17:43,000 --> 00:17:50,050
to obtain the evaluated puzzle all right

372
00:17:47,220 --> 00:17:52,510
the security argument

373
00:17:50,050 --> 00:17:54,159
we rely on assumptions as we had before

374
00:17:52,510 --> 00:17:55,870
the strong sequential squaring

375
00:17:54,160 --> 00:17:59,350
assumption and the bdh assumption over

376
00:17:55,870 --> 00:18:04,300
JN and we can prove the security of our

377
00:17:59,350 --> 00:18:06,399
MH DLP construction okay as an

378
00:18:04,300 --> 00:18:08,500
application of our MH DLP let me show

379
00:18:06,400 --> 00:18:13,870
you the multi-party coin contract

380
00:18:08,500 --> 00:18:15,940
signing case consider that we have we

381
00:18:13,870 --> 00:18:17,530
have RSA aggregate signatures where

382
00:18:15,940 --> 00:18:19,540
these signatures are elements of

383
00:18:17,530 --> 00:18:21,430
quadratic residue and and the

384
00:18:19,540 --> 00:18:23,080
aggregation algorithm is simply taking

385
00:18:21,430 --> 00:18:26,220
the signatures and multiplying them

386
00:18:23,080 --> 00:18:28,419
together and reducing it to modulo N and

387
00:18:26,220 --> 00:18:31,240
consider the case that this aggregated

388
00:18:28,420 --> 00:18:37,890
signature happens to be the valid

389
00:18:31,240 --> 00:18:40,570
signature on the contract okay so in the

390
00:18:37,890 --> 00:18:42,880
the process runs and rounds so in the

391
00:18:40,570 --> 00:18:45,159
first round each user signs the document

392
00:18:42,880 --> 00:18:48,220
and embeds the signature inside a puzzle

393
00:18:45,160 --> 00:18:49,800
of hardness T which happens to be the

394
00:18:48,220 --> 00:18:53,440
timing hardness for this round and

395
00:18:49,800 --> 00:18:57,310
broadcast the puzzle to everyone and in

396
00:18:53,440 --> 00:18:59,320
each successive round the players embed

397
00:18:57,310 --> 00:19:02,350
their signatures and new puzzles of

398
00:18:59,320 --> 00:19:04,179
hardness that is half the hardness of

399
00:19:02,350 --> 00:19:06,730
what it was of the previous round

400
00:19:04,180 --> 00:19:11,260
so namely T is nothing but TI minus 1

401
00:19:06,730 --> 00:19:13,090
over 2 if at around if an adversary

402
00:19:11,260 --> 00:19:16,090
fails to broadcast a puzzle the other

403
00:19:13,090 --> 00:19:18,669
users can come together homomorphic

404
00:19:16,090 --> 00:19:21,280
evaluate the puzzles that were in the

405
00:19:18,670 --> 00:19:23,110
previous round to obtain a resultant

406
00:19:21,280 --> 00:19:27,639
puzzle which has the embedded aggregate

407
00:19:23,110 --> 00:19:29,110
signature in it after solving for time T

408
00:19:27,640 --> 00:19:30,400
J minus 1 which is the hardness of the

409
00:19:29,110 --> 00:19:32,290
previous round they can obtain the

410
00:19:30,400 --> 00:19:35,890
aggregated signature while the

411
00:19:32,290 --> 00:19:39,399
adversarial player can obtain it in half

412
00:19:35,890 --> 00:19:42,130
a time as the Honus guys ok

413
00:19:39,400 --> 00:19:43,570
there are some extensions of homomorphic

414
00:19:42,130 --> 00:19:47,470
time block puzzles that we proposed in

415
00:19:43,570 --> 00:19:49,780
our paper one of them being that we can

416
00:19:47,470 --> 00:19:51,900
indeed homomorphic evaluate on top of

417
00:19:49,780 --> 00:19:53,920
puzzles of different timing hardness

418
00:19:51,900 --> 00:19:57,610
consider the case that t1 is greater

419
00:19:53,920 --> 00:19:59,620
than t2 and if if the difference in the

420
00:19:57,610 --> 00:20:01,870
timing hardness between them is of this

421
00:19:59,620 --> 00:20:03,330
structure we can natively combine these

422
00:20:01,870 --> 00:20:07,439
paths

423
00:20:03,330 --> 00:20:10,519
in this manner I shown here okay finally

424
00:20:07,440 --> 00:20:14,099
as a feasibility result we show the

425
00:20:10,519 --> 00:20:17,279
construction for FH TLP which is based

426
00:20:14,099 --> 00:20:19,619
on probabilistic IO which was proposed

427
00:20:17,279 --> 00:20:23,629
if it was used in a kinetic at all in

428
00:20:19,619 --> 00:20:28,439
2015 to construct fhe

429
00:20:23,629 --> 00:20:31,619
here the the puzzle of the puzzle is of

430
00:20:28,440 --> 00:20:34,349
the form a ciphertext and a normal TLP

431
00:20:31,619 --> 00:20:36,029
puzzle and to solve this puzzle you

432
00:20:34,349 --> 00:20:38,939
simply ignore the first ciphertext and

433
00:20:36,029 --> 00:20:43,169
you solve the resulting time out puzzle

434
00:20:38,940 --> 00:20:45,149
here for homomorphic evaluation we have

435
00:20:43,169 --> 00:20:48,089
an obfuscated program that's output in

436
00:20:45,149 --> 00:20:50,218
the setup that basically performs the

437
00:20:48,089 --> 00:20:52,559
the operation that we require so it

438
00:20:50,219 --> 00:20:54,450
takes in two puzzles decrypts this eye

439
00:20:52,559 --> 00:20:56,999
protection in this case and computes an

440
00:20:54,450 --> 00:21:00,200
and of the the underlying messages and

441
00:20:56,999 --> 00:21:02,509
generates the resulting evaluated puzzle

442
00:21:00,200 --> 00:21:04,769
the security follows from

443
00:21:02,509 --> 00:21:07,909
sub-exponential IO and sub-exponential

444
00:21:04,769 --> 00:21:11,009
one-way functions and the applications

445
00:21:07,909 --> 00:21:12,749
apart from being we can do all the

446
00:21:11,009 --> 00:21:14,580
previous sighted applications we can

447
00:21:12,749 --> 00:21:20,940
also do sealed bid auctions with our FH

448
00:21:14,580 --> 00:21:23,119
DLP construction to conclude my talk our

449
00:21:20,940 --> 00:21:26,190
homomorphic time lock puzzle HT LP

450
00:21:23,119 --> 00:21:29,459
scales well in in multi-party settings

451
00:21:26,190 --> 00:21:32,700
and actively prevents denial of service

452
00:21:29,460 --> 00:21:34,409
attacks we provide we provide three

453
00:21:32,700 --> 00:21:36,450
constructions for different

454
00:21:34,409 --> 00:21:38,609
homomorphisms linear multiplicative and

455
00:21:36,450 --> 00:21:42,929
for any polynomial size circuit

456
00:21:38,609 --> 00:21:44,249
evaluation and our LST LP and MST LP

457
00:21:42,929 --> 00:21:47,879
which are the linear and multiplicative

458
00:21:44,249 --> 00:21:49,169
constructions are quite efficient for

459
00:21:47,879 --> 00:21:50,789
practical purposes because the

460
00:21:49,169 --> 00:21:53,879
homomorphic evaluation is just

461
00:21:50,789 --> 00:21:58,009
multiplication of group elements and as

462
00:21:53,879 --> 00:22:00,178
future work we identify development of

463
00:21:58,009 --> 00:22:04,379
application specific proof of well

464
00:22:00,179 --> 00:22:08,849
formless having a efficient trustless

465
00:22:04,379 --> 00:22:12,149
set up and building FH TLP from

466
00:22:08,849 --> 00:22:14,919
practical for building FST LP from

467
00:22:12,149 --> 00:22:16,500
practical primitives as future work and

468
00:22:14,920 --> 00:22:19,740
[Music]

469
00:22:16,500 --> 00:22:22,080
already we have Malo Volta with my

470
00:22:19,740 --> 00:22:27,210
co-author has a follower paper on FX DLP

471
00:22:22,080 --> 00:22:28,678
from standard assumptions alright so if

472
00:22:27,210 --> 00:22:32,190
you have questions we are in the

473
00:22:28,679 --> 00:22:40,950
audience please ask us thank you thank

474
00:22:32,190 --> 00:22:45,809
you for listening if you have a question

475
00:22:40,950 --> 00:22:50,070
please come to the microphone hi

476
00:22:45,809 --> 00:22:50,820
so for applications like auctions and

477
00:22:50,070 --> 00:22:52,678
coin-flipping

478
00:22:50,820 --> 00:22:55,559
are you going to end up with the thing

479
00:22:52,679 --> 00:22:58,980
where the different input can now depend

480
00:22:55,559 --> 00:23:02,070
on each other so if you bid B can I bid

481
00:22:58,980 --> 00:23:07,860
B plus one by homomorphic Lee changing

482
00:23:02,070 --> 00:23:10,230
your time lock puzzle okay so we don't

483
00:23:07,860 --> 00:23:11,969
do we don't go into the detail of how

484
00:23:10,230 --> 00:23:13,799
you authenticate your bids how you

485
00:23:11,970 --> 00:23:17,909
authenticate your puzzles and things

486
00:23:13,799 --> 00:23:19,830
like that so so my bid is because you

487
00:23:17,909 --> 00:23:21,389
can in a complete system you can

488
00:23:19,830 --> 00:23:26,399
consider my bid to be authenticated with

489
00:23:21,389 --> 00:23:28,740
my signature and evaluating on top of it

490
00:23:26,399 --> 00:23:32,158
and calling it your bid probably is

491
00:23:28,740 --> 00:23:34,139
could be prevented through measures that

492
00:23:32,159 --> 00:23:41,179
we don't deal with in our paper here

493
00:23:34,139 --> 00:23:41,178
yeah more questions

494
00:23:48,480 --> 00:23:55,749
okay this speaker again

495
00:23:51,680 --> 00:23:55,749
[Applause]

