1
00:00:04,860 --> 00:00:12,510
hi my name is Andrea and this is Rio

2
00:00:09,830 --> 00:00:14,070
hello and this is joint work West

3
00:00:12,510 --> 00:00:15,480
Virginia bass let's go Williams and

4
00:00:14,070 --> 00:00:17,460
we're going to be talking about public

5
00:00:15,480 --> 00:00:22,890
key cryptography in the fine-grained

6
00:00:17,460 --> 00:00:25,680
setting in a world where one-way

7
00:00:22,890 --> 00:00:28,470
functions don't exist where bpp is

8
00:00:25,680 --> 00:00:31,650
functionally equivalent to NP a world

9
00:00:28,470 --> 00:00:34,860
called pesi lands can we still have

10
00:00:31,650 --> 00:00:40,229
meaningful cryptography three intrepid

11
00:00:34,860 --> 00:00:42,239
researchers find out all right so you

12
00:00:40,229 --> 00:00:44,010
know what do we want in this world well

13
00:00:42,239 --> 00:00:45,779
we want average-case hard problems of

14
00:00:44,010 --> 00:00:48,570
course we need you know B P P not equal

15
00:00:45,780 --> 00:00:49,949
to NP but we we additionally we don't

16
00:00:48,570 --> 00:00:51,180
just want that these problems are hard

17
00:00:49,949 --> 00:00:52,769
we'd like to be able to efficiently

18
00:00:51,180 --> 00:00:54,089
generate both the problems and their

19
00:00:52,769 --> 00:00:57,540
solutions so we can get some nice

20
00:00:54,089 --> 00:00:59,729
one-way functions but actually we don't

21
00:00:57,540 --> 00:01:01,049
just want that right we also want public

22
00:00:59,729 --> 00:01:02,699
key cryptography we want to be able to

23
00:01:01,049 --> 00:01:05,220
efficiently generate a problem that's

24
00:01:02,699 --> 00:01:08,009
hard and generate a trapdoor to that

25
00:01:05,220 --> 00:01:11,630
problem but these rely on increasingly

26
00:01:08,010 --> 00:01:13,920
strong assumptions on key B P P and NP

27
00:01:11,630 --> 00:01:15,990
so we'd like to work with a different

28
00:01:13,920 --> 00:01:18,030
kind of assumption a fine-grained

29
00:01:15,990 --> 00:01:21,419
complexity assumption assumption based

30
00:01:18,030 --> 00:01:23,190
on polynomial hardness of problems and

31
00:01:21,420 --> 00:01:24,630
what we mean by polynomial hardness here

32
00:01:23,190 --> 00:01:27,060
is that we want to distinguish between

33
00:01:24,630 --> 00:01:30,619
for example problems that take N squared

34
00:01:27,060 --> 00:01:33,090
time and problems that take n cubed time

35
00:01:30,620 --> 00:01:36,360
so first let's talk a little bit about

36
00:01:33,090 --> 00:01:38,220
some related works concrete security

37
00:01:36,360 --> 00:01:39,690
reductions focuses a lot on the

38
00:01:38,220 --> 00:01:42,000
efficiency of these you know

39
00:01:39,690 --> 00:01:45,420
cryptographic reductions but they're

40
00:01:42,000 --> 00:01:47,370
focusing primarily on the change in the

41
00:01:45,420 --> 00:01:49,050
security parameter we care a lot about

42
00:01:47,370 --> 00:01:50,670
our security parameter in these fine

43
00:01:49,050 --> 00:01:52,289
grained reductions but we also care

44
00:01:50,670 --> 00:01:54,090
about polynomial overheads in the

45
00:01:52,290 --> 00:01:57,090
reduction that don't affect the security

46
00:01:54,090 --> 00:01:59,640
parameter there's been some really nice

47
00:01:57,090 --> 00:02:02,540
work on combinatorial crypto based on

48
00:01:59,640 --> 00:02:06,150
np-hard problems for example subset-sum

49
00:02:02,540 --> 00:02:08,369
and in the fine-grained complexity world

50
00:02:06,150 --> 00:02:10,408
there's been quite a bit of work in fine

51
00:02:08,369 --> 00:02:12,390
grained complexity if you're interested

52
00:02:10,408 --> 00:02:13,410
there's a survey paper from 2018 that's

53
00:02:12,390 --> 00:02:16,450
it's quite good

54
00:02:13,410 --> 00:02:18,549
talk to us after

55
00:02:16,450 --> 00:02:19,839
but you know more related to crypto

56
00:02:18,550 --> 00:02:21,910
there's been some nice work on

57
00:02:19,840 --> 00:02:24,760
fine-grain worst case - average case

58
00:02:21,910 --> 00:02:26,829
reductions all of this work so far has

59
00:02:24,760 --> 00:02:28,179
been fundamentally for counting problems

60
00:02:26,830 --> 00:02:31,390
so we're able to show you know some

61
00:02:28,180 --> 00:02:34,209
counting problems are hard but there

62
00:02:31,390 --> 00:02:36,670
have been unfortunately some barriers

63
00:02:34,209 --> 00:02:38,800
against building crypto out of this for

64
00:02:36,670 --> 00:02:41,350
some of it it's an assumption called ncf

65
00:02:38,800 --> 00:02:42,610
once again talk to us after but then

66
00:02:41,350 --> 00:02:44,590
there's also been some really exciting

67
00:02:42,610 --> 00:02:46,450
recent work showing that relative to a

68
00:02:44,590 --> 00:02:48,340
particular Oracle you in fact can't have

69
00:02:46,450 --> 00:02:54,700
fine grain one-way functions much less

70
00:02:48,340 --> 00:02:57,340
fine grained pke so can we have a

71
00:02:54,700 --> 00:02:59,140
meaningful notion of cryptography even

72
00:02:57,340 --> 00:03:07,980
if we don't have exponentially hard

73
00:02:59,140 --> 00:03:07,980
one-way functions your son yes alright

74
00:03:09,060 --> 00:03:12,810
first let's talk about something that

75
00:03:11,200 --> 00:03:16,000
might immediately come to mind

76
00:03:12,810 --> 00:03:18,190
Merkle puzzles so Merkle puzzles do in

77
00:03:16,000 --> 00:03:20,500
fact require exponentially hard one-way

78
00:03:18,190 --> 00:03:22,420
functions not just exponentially hard

79
00:03:20,500 --> 00:03:26,950
but like very exponentially hard like 2

80
00:03:22,420 --> 00:03:31,298
to the N hard so this was the puzzle

81
00:03:26,950 --> 00:03:35,170
itself is described by Merkel and then B

82
00:03:31,299 --> 00:03:37,269
hum Gore Aneesh I leader is inst

83
00:03:35,170 --> 00:03:40,268
a specific example with an assumption

84
00:03:37,269 --> 00:03:41,650
and the gap you get there is if the

85
00:03:40,269 --> 00:03:43,870
honest party is running out of end time

86
00:03:41,650 --> 00:03:45,220
then the dishonest parties are going to

87
00:03:43,870 --> 00:03:48,670
take and squared time in order to

88
00:03:45,220 --> 00:03:52,000
violate the security there's also been

89
00:03:48,670 --> 00:03:55,450
some really nice work by Dell Walker

90
00:03:52,000 --> 00:03:58,090
Bank adenosine and VARs Vaughn in 2016

91
00:03:55,450 --> 00:04:02,018
where based on an assumption about the

92
00:03:58,090 --> 00:04:05,380
hardness of NC 1 with respect to L /

93
00:04:02,019 --> 00:04:06,370
Pauli you're able to get one wave

94
00:04:05,380 --> 00:04:08,230
functions in pke

95
00:04:06,370 --> 00:04:10,480
where the honest parties are MC one

96
00:04:08,230 --> 00:04:12,488
circuits and dishonest parties must be

97
00:04:10,480 --> 00:04:16,180
strictly stronger than NC one circuits

98
00:04:12,489 --> 00:04:18,489
in order to violate the security but

99
00:04:16,180 --> 00:04:20,350
what if we don't want to be working in

100
00:04:18,488 --> 00:04:22,089
circuits we don't want to be talking

101
00:04:20,350 --> 00:04:23,950
about P slash poly we want to be talking

102
00:04:22,089 --> 00:04:26,560
about different polynomial times we want

103
00:04:23,950 --> 00:04:28,780
to be working in the RAM model well then

104
00:04:26,560 --> 00:04:30,770
in this work based on an average case

105
00:04:28,780 --> 00:04:32,840
DRK clique assumption

106
00:04:30,770 --> 00:04:34,150
we're able to build both one-way

107
00:04:32,840 --> 00:04:36,799
functions and public key encryption

108
00:04:34,150 --> 00:04:39,620
where the one-way functions get a gap of

109
00:04:36,800 --> 00:04:42,830
n to the K over two based on average KCI

110
00:04:39,620 --> 00:04:47,050
okay quick assumption and our p ke gets

111
00:04:42,830 --> 00:04:47,050
n to the one point five - a little bit

112
00:04:47,080 --> 00:04:53,419
okay so revisiting that question from

113
00:04:50,599 --> 00:04:55,998
before yes we can have a meaningful

114
00:04:53,419 --> 00:04:57,799
notion of cryptography and we can use

115
00:04:55,999 --> 00:05:00,680
these fine-grained complexity

116
00:04:57,800 --> 00:05:03,050
assumptions to do it so in this

117
00:05:00,680 --> 00:05:05,120
presentation we're going to go over some

118
00:05:03,050 --> 00:05:07,039
definitions for what we mean exactly by

119
00:05:05,120 --> 00:05:09,469
fine-grained one-way functions and a

120
00:05:07,039 --> 00:05:11,839
fine-grained key exchange we're going to

121
00:05:09,469 --> 00:05:13,159
go over our complexity assumption our

122
00:05:11,839 --> 00:05:16,069
average case assumption which will be

123
00:05:13,159 --> 00:05:17,629
based off of zero K click and then we're

124
00:05:16,069 --> 00:05:21,110
going to go over our construction

125
00:05:17,629 --> 00:05:23,719
including the security reduction so

126
00:05:21,110 --> 00:05:26,930
let's get started in this wild wild

127
00:05:23,719 --> 00:05:29,449
world of fine-grained crypto to start

128
00:05:26,930 --> 00:05:30,949
first we'll want to compare what like a

129
00:05:29,449 --> 00:05:32,900
classical one-way function looks like

130
00:05:30,949 --> 00:05:36,080
compared to a fine-grain one-way

131
00:05:32,900 --> 00:05:37,698
function classically you need to be able

132
00:05:36,080 --> 00:05:40,669
to evaluate your function in polynomial

133
00:05:37,699 --> 00:05:42,830
time and we say that if an adversary can

134
00:05:40,669 --> 00:05:45,469
invert your function then that adversary

135
00:05:42,830 --> 00:05:47,740
has to run in super polynomial time so

136
00:05:45,469 --> 00:05:50,180
you get this huge gap between what

137
00:05:47,740 --> 00:05:53,210
honest parties do to evaluate versus

138
00:05:50,180 --> 00:05:56,240
what an adversary does to invert it now

139
00:05:53,210 --> 00:05:58,008
in the fine-grained setting if we have

140
00:05:56,240 --> 00:06:00,560
an end to the C fine-grain one-way

141
00:05:58,009 --> 00:06:04,069
function in this case it takes n to the

142
00:06:00,560 --> 00:06:06,139
C time to evaluate and infinite row

143
00:06:04,069 --> 00:06:08,930
sorry inverts it then that adversary has

144
00:06:06,139 --> 00:06:13,310
to take strictly polynomial II more time

145
00:06:08,930 --> 00:06:15,680
to invert n to the C plus Delta so

146
00:06:13,310 --> 00:06:18,080
that's one way functions we're going to

147
00:06:15,680 --> 00:06:20,569
use a similar sort of definition here

148
00:06:18,080 --> 00:06:22,339
when we talk about key exchange so in a

149
00:06:20,569 --> 00:06:24,110
fine-grained key exchange just like any

150
00:06:22,339 --> 00:06:26,149
other key exchange you'll have Alice and

151
00:06:24,110 --> 00:06:28,310
Bob exchanging some messages to produce

152
00:06:26,149 --> 00:06:30,649
a transcript by the end of their

153
00:06:28,310 --> 00:06:33,979
protocol they each can produce a bit

154
00:06:30,649 --> 00:06:36,289
that represents their key and because

155
00:06:33,979 --> 00:06:39,769
this is fine-grained they each run and

156
00:06:36,289 --> 00:06:41,628
say order n to the C time and again if

157
00:06:39,769 --> 00:06:43,310
you have an adversary that's breaking

158
00:06:41,629 --> 00:06:44,030
this key exchange that's figuring out

159
00:06:43,310 --> 00:06:47,000
what that big

160
00:06:44,030 --> 00:06:49,039
B is then that adversary has to run in

161
00:06:47,000 --> 00:06:52,730
strictly more that entered the C time

162
00:06:49,040 --> 00:06:53,960
and to the C plus Delta alright so this

163
00:06:52,730 --> 00:06:55,940
is what we want to get by the end of

164
00:06:53,960 --> 00:06:58,570
this talk let's talk about the tool

165
00:06:55,940 --> 00:07:01,760
we're going to be using to get that our

166
00:06:58,570 --> 00:07:02,930
fine-grained assumption on 0 K click now

167
00:07:01,760 --> 00:07:04,940
we said this was an average case

168
00:07:02,930 --> 00:07:08,960
assumption so we need to start with some

169
00:07:04,940 --> 00:07:11,060
distribution so our distribution is

170
00:07:08,960 --> 00:07:13,870
we're going to start with a complete k

171
00:07:11,060 --> 00:07:17,480
partite graph in this example K is 3 and

172
00:07:13,870 --> 00:07:19,310
each part has n nodes in it and then

173
00:07:17,480 --> 00:07:23,000
it's complete so every single edge

174
00:07:19,310 --> 00:07:24,890
exists and then we're going to label

175
00:07:23,000 --> 00:07:26,480
each edge with a weight this weight is

176
00:07:24,890 --> 00:07:31,099
going to be drawn uniformly and

177
00:07:26,480 --> 00:07:33,290
independently from Z mod R finally we're

178
00:07:31,100 --> 00:07:34,850
going to be planting a clique a 0 K

179
00:07:33,290 --> 00:07:37,550
clique inside of here so we're going to

180
00:07:34,850 --> 00:07:40,220
choose in this case 3 nodes a B and C

181
00:07:37,550 --> 00:07:42,860
each and a different partition randomly

182
00:07:40,220 --> 00:07:44,810
and we're going to choose one of those

183
00:07:42,860 --> 00:07:46,370
edges to be the negative sum of the

184
00:07:44,810 --> 00:07:49,760
weights of the other edges forcing this

185
00:07:46,370 --> 00:07:54,500
to be a zero K clique and our assumption

186
00:07:49,760 --> 00:07:56,930
is that finding a B and C takes at least

187
00:07:54,500 --> 00:07:59,210
n to the K time meaning you have to

188
00:07:56,930 --> 00:08:01,160
check every single click before you find

189
00:07:59,210 --> 00:08:03,109
the clique that you're looking for

190
00:08:01,160 --> 00:08:05,030
notice also that this is a search

191
00:08:03,110 --> 00:08:07,730
problem and not a decision problem so

192
00:08:05,030 --> 00:08:09,979
it's you know even even nicer of an

193
00:08:07,730 --> 00:08:14,900
assumption then your classic yes versus

194
00:08:09,980 --> 00:08:16,580
no now when we talk about fine-grained

195
00:08:14,900 --> 00:08:18,679
key exchanges the first thing that will

196
00:08:16,580 --> 00:08:21,380
probably pop into your head is a Merkel

197
00:08:18,680 --> 00:08:23,330
puzzle let's go over why a Merkel puzzle

198
00:08:21,380 --> 00:08:24,830
doesn't work in this case this will be a

199
00:08:23,330 --> 00:08:27,650
good warm-up for what our protocol

200
00:08:24,830 --> 00:08:29,750
eventually looks like so you have Alice

201
00:08:27,650 --> 00:08:32,270
and Bob they've got this public input

202
00:08:29,750 --> 00:08:36,289
universe typically it's you know all

203
00:08:32,270 --> 00:08:37,909
inputs 0 1 to the N Alice is going to

204
00:08:36,289 --> 00:08:40,130
choose a square root subset of those

205
00:08:37,909 --> 00:08:42,530
inputs so 2 to the N over 2 inputs for

206
00:08:40,130 --> 00:08:44,810
Alice Bob is going to similarly choose a

207
00:08:42,530 --> 00:08:46,939
square root size input and since they're

208
00:08:44,810 --> 00:08:50,239
choosing square root size inputs we hope

209
00:08:46,940 --> 00:08:51,890
they only they collide exactly once and

210
00:08:50,240 --> 00:08:54,530
there's a constant probability of this

211
00:08:51,890 --> 00:08:57,890
occurring then each of them is going to

212
00:08:54,530 --> 00:09:01,160
publish evaluations on those in

213
00:08:57,890 --> 00:09:03,069
and because they can see those

214
00:09:01,160 --> 00:09:06,829
evaluations they can tell if they've

215
00:09:03,070 --> 00:09:08,690
evaluated the same point so in this case

216
00:09:06,830 --> 00:09:11,390
they've both chosen for they've only

217
00:09:08,690 --> 00:09:13,820
chosen one overlapping input so their

218
00:09:11,390 --> 00:09:16,069
key is going to be the preimage of that

219
00:09:13,820 --> 00:09:19,970
function now in the fine-grain world

220
00:09:16,070 --> 00:09:21,830
well Alice and Bob have to evaluate this

221
00:09:19,970 --> 00:09:23,870
function two to the N over two time and

222
00:09:21,830 --> 00:09:26,720
if your function takes say N squared

223
00:09:23,870 --> 00:09:28,580
time to compute that's to the N over two

224
00:09:26,720 --> 00:09:30,890
times N squared one of these terms is

225
00:09:28,580 --> 00:09:32,000
way bigger than the other and if we're

226
00:09:30,890 --> 00:09:34,400
in the fine-grained world an

227
00:09:32,000 --> 00:09:38,240
eavesdropper looking at this transcript

228
00:09:34,400 --> 00:09:40,370
can see oh hey f of 4 is equal to F of 4

229
00:09:38,240 --> 00:09:42,520
let me just invert that one point and

230
00:09:40,370 --> 00:09:45,050
they only need to take a fine-grained

231
00:09:42,520 --> 00:09:47,510
polynomial amount of time to invert so

232
00:09:45,050 --> 00:09:53,209
this this isn't going to work we need to

233
00:09:47,510 --> 00:09:55,460
do a Merkel puzzle but different so for

234
00:09:53,210 --> 00:09:58,640
this Alice and Bob are each going to

235
00:09:55,460 --> 00:10:00,860
generate l0k Creek instances L is going

236
00:09:58,640 --> 00:10:05,900
to be a parameter we define based on n

237
00:10:00,860 --> 00:10:07,550
later then they're each going to choose

238
00:10:05,900 --> 00:10:10,160
square root L positions in these

239
00:10:07,550 --> 00:10:13,160
instances and plant solutions and in

240
00:10:10,160 --> 00:10:15,199
those in those spots and hopefully again

241
00:10:13,160 --> 00:10:16,880
they're going to collide in exactly one

242
00:10:15,200 --> 00:10:21,200
index because they're choosing square

243
00:10:16,880 --> 00:10:23,600
root then Bob is going to brute force

244
00:10:21,200 --> 00:10:27,560
check every spot that he planted in

245
00:10:23,600 --> 00:10:29,360
index inside of Alice's list and Alice

246
00:10:27,560 --> 00:10:31,400
is going to do the same brute force

247
00:10:29,360 --> 00:10:35,450
check so they are solving 0k quick

248
00:10:31,400 --> 00:10:38,270
instances and then they find that oh hey

249
00:10:35,450 --> 00:10:41,930
they both planted it in a solution at

250
00:10:38,270 --> 00:10:44,270
index I now big for entropy reasons we

251
00:10:41,930 --> 00:10:47,150
can't just use I as the key itself so

252
00:10:44,270 --> 00:10:49,490
Alice is going to publish a random 0 1

253
00:10:47,150 --> 00:10:50,900
vector of length log L and the key is

254
00:10:49,490 --> 00:10:56,750
going to be the dot product between I

255
00:10:50,900 --> 00:10:58,880
and and this vector V so let's go over

256
00:10:56,750 --> 00:11:02,360
how much time it takes for Alice and Bob

257
00:10:58,880 --> 00:11:05,090
to to run this protocol well they have

258
00:11:02,360 --> 00:11:07,880
to generate L of these 0k quick

259
00:11:05,090 --> 00:11:09,770
instances each 0k quick instance has

260
00:11:07,880 --> 00:11:11,240
like N squared edges so that's L N

261
00:11:09,770 --> 00:11:13,730
squared

262
00:11:11,240 --> 00:11:17,929
they plant square root L solutions that

263
00:11:13,730 --> 00:11:19,970
happens in constant time then they have

264
00:11:17,929 --> 00:11:22,040
to do the heavy lifting they have to

265
00:11:19,970 --> 00:11:24,399
solve square root L of these instances

266
00:11:22,040 --> 00:11:27,889
so that's square root L times n to the K

267
00:11:24,399 --> 00:11:29,509
now turns out the best value for L in

268
00:11:27,889 --> 00:11:32,720
this case that minimizes the amount of

269
00:11:29,509 --> 00:11:37,420
time Alice and Bob spend is l equals 2 n

270
00:11:32,720 --> 00:11:40,579
square n to the 2k minus 4 excuse me

271
00:11:37,420 --> 00:11:44,389
giving a total time of n to the 2k minus

272
00:11:40,579 --> 00:11:47,689
2 for Alice and Bob all right so how

273
00:11:44,389 --> 00:11:49,399
much time should the adversary take well

274
00:11:47,689 --> 00:11:51,379
we would hope an adversary just seeing

275
00:11:49,399 --> 00:11:53,179
these lists and not knowing where any of

276
00:11:51,379 --> 00:11:55,129
the solutions are planted has to go

277
00:11:53,179 --> 00:11:59,290
through and check every single one

278
00:11:55,129 --> 00:12:02,269
brute-force checking n to the 2k minus 4

279
00:11:59,290 --> 00:12:06,920
instances meaning n to the 2k minus 4

280
00:12:02,269 --> 00:12:11,410
times n to the K time total to find the

281
00:12:06,920 --> 00:12:18,649
place where Alice and Bob intersect but

282
00:12:11,410 --> 00:12:20,749
this needs a proof so what we start

283
00:12:18,649 --> 00:12:23,059
saying is hard right is that this

284
00:12:20,749 --> 00:12:25,910
average case 0 cake location is hard

285
00:12:23,059 --> 00:12:28,910
well we want to reduce to is the problem

286
00:12:25,910 --> 00:12:31,368
where we've got two lists of instances

287
00:12:28,910 --> 00:12:35,689
and finding the index of the shared

288
00:12:31,369 --> 00:12:38,420
lists a shared solution is hard so first

289
00:12:35,689 --> 00:12:41,149
we're gonna talk about three properties

290
00:12:38,420 --> 00:12:44,410
that we use in order to do this proof so

291
00:12:41,149 --> 00:12:48,829
these three properties are list hardness

292
00:12:44,410 --> 00:12:52,879
list hardness roughly says that finding

293
00:12:48,829 --> 00:12:55,549
which index in a list of L instances has

294
00:12:52,879 --> 00:12:58,129
a solution is hard now that's not quite

295
00:12:55,549 --> 00:13:00,110
you know our our key exchange so we need

296
00:12:58,129 --> 00:13:01,970
something else we need also that these

297
00:13:00,110 --> 00:13:04,069
instances are splittable and what we

298
00:13:01,970 --> 00:13:05,480
mean here is that if we start with a

299
00:13:04,069 --> 00:13:07,069
random looking instance that has no

300
00:13:05,480 --> 00:13:09,110
solutions we can split it into two

301
00:13:07,069 --> 00:13:11,479
random looking instances but continue to

302
00:13:09,110 --> 00:13:13,279
have no solutions and if we start with a

303
00:13:11,480 --> 00:13:14,749
random looking instance that is one

304
00:13:13,279 --> 00:13:16,369
solution we can split it into a pair of

305
00:13:14,749 --> 00:13:20,149
random looking instances that have

306
00:13:16,369 --> 00:13:23,269
solutions finally we need that things

307
00:13:20,149 --> 00:13:24,829
are plantable you know both for the key

308
00:13:23,269 --> 00:13:28,129
exchange itself and for

309
00:13:24,829 --> 00:13:30,649
the security reduction so crucially not

310
00:13:28,129 --> 00:13:32,389
only do we show that zero case because

311
00:13:30,649 --> 00:13:34,189
these properties but also any problem

312
00:13:32,389 --> 00:13:36,649
that has these three properties will

313
00:13:34,189 --> 00:13:41,238
result in a public key encryption scheme

314
00:13:36,649 --> 00:13:43,249
here so let's take a little look at a

315
00:13:41,239 --> 00:13:45,980
pictographic diagram of why these

316
00:13:43,249 --> 00:13:47,720
properties give us what we need so we

317
00:13:45,980 --> 00:13:50,660
start with some problem that we you know

318
00:13:47,720 --> 00:13:53,089
is n to the K hard and then we're gonna

319
00:13:50,660 --> 00:13:56,179
split it into a list where if this list

320
00:13:53,089 --> 00:13:59,179
is formed by L instances of size n you

321
00:13:56,179 --> 00:14:02,959
need to spend L n to the K time using

322
00:13:59,179 --> 00:14:04,970
this list hard assumption next we split

323
00:14:02,959 --> 00:14:07,969
every single instance into you know it's

324
00:14:04,970 --> 00:14:10,399
nice pair of either empty or non-empty

325
00:14:07,970 --> 00:14:11,869
solutions and finding this index is

326
00:14:10,399 --> 00:14:15,199
going to continue to be L n to the K

327
00:14:11,869 --> 00:14:17,839
hard finally in order to go back to

328
00:14:15,199 --> 00:14:20,269
looking like the scheme that Alice and

329
00:14:17,839 --> 00:14:25,220
Bob are running we need to plant roughly

330
00:14:20,269 --> 00:14:30,019
Rudel minus 1 sort of fall squeaks into

331
00:14:25,220 --> 00:14:33,379
the remaining entries let's take a look

332
00:14:30,019 --> 00:14:34,999
at specifically y 0 k click is average

333
00:14:33,379 --> 00:14:37,369
case list hard to get a sense of what's

334
00:14:34,999 --> 00:14:39,139
going on here so we've got our average

335
00:14:37,369 --> 00:14:41,470
case 0 k klieg instance what we're gonna

336
00:14:39,139 --> 00:14:44,209
do is we're gonna split the vertex sets

337
00:14:41,470 --> 00:14:47,809
so as a simple example here we're gonna

338
00:14:44,209 --> 00:14:49,518
split the vertex sets into and now we're

339
00:14:47,809 --> 00:14:52,219
going to look at all the subproblems

340
00:14:49,519 --> 00:14:54,589
generated when you take one choice of

341
00:14:52,220 --> 00:14:57,619
each vertex set so here we're taking the

342
00:14:54,589 --> 00:15:00,980
yellow moon stun and star here we're

343
00:14:57,619 --> 00:15:05,110
taking the green moon yellow star and

344
00:15:00,980 --> 00:15:07,610
Sun etc so we generated a bunch of these

345
00:15:05,110 --> 00:15:09,290
here there's eight instances when we

346
00:15:07,610 --> 00:15:11,389
specifically have K equals 3 and we're

347
00:15:09,290 --> 00:15:14,149
splitting in two and one of these is

348
00:15:11,389 --> 00:15:15,949
going to contain our clique so you know

349
00:15:14,149 --> 00:15:19,519
if we can point out where this Creek

350
00:15:15,949 --> 00:15:20,959
came from we can go back and solve that

351
00:15:19,519 --> 00:15:22,999
problem and find the clique in the

352
00:15:20,959 --> 00:15:29,268
original in the correspondingly labeled

353
00:15:22,999 --> 00:15:32,119
sections so why should these problems be

354
00:15:29,269 --> 00:15:34,429
still brute-force hard well if we have L

355
00:15:32,119 --> 00:15:36,079
groups and we're dealing with a K clique

356
00:15:34,429 --> 00:15:38,179
problem we're gonna end up with L to the

357
00:15:36,079 --> 00:15:38,660
K sub problems and each sub problem is

358
00:15:38,179 --> 00:15:42,500
going to be as

359
00:15:38,660 --> 00:15:44,839
sighs and over l so we've got these you

360
00:15:42,500 --> 00:15:48,019
know large lists of relatively small

361
00:15:44,839 --> 00:15:52,160
problems and crucially the following

362
00:15:48,019 --> 00:15:53,810
statement is true are our hardness for

363
00:15:52,160 --> 00:15:56,540
the original problem is roughly equal to

364
00:15:53,810 --> 00:15:58,399
the hardness of each individual problem

365
00:15:56,540 --> 00:16:00,699
raised to the K so each of these

366
00:15:58,399 --> 00:16:02,839
problems is just as hard as the original

367
00:16:00,699 --> 00:16:06,199
this is called the efficient self

368
00:16:02,839 --> 00:16:07,670
reduction in worst case land so

369
00:16:06,199 --> 00:16:09,560
something you might be feeling a little

370
00:16:07,670 --> 00:16:11,449
nervous about right now is you're

371
00:16:09,560 --> 00:16:13,219
noticing that these edge sets are

372
00:16:11,449 --> 00:16:14,750
somewhat overlapping Alice and Bob are

373
00:16:13,220 --> 00:16:16,730
producing these random instances but

374
00:16:14,750 --> 00:16:17,839
there's correlations here so it turns

375
00:16:16,730 --> 00:16:20,389
out there's a way to deal with these

376
00:16:17,839 --> 00:16:21,860
correlations and if you're interested

377
00:16:20,389 --> 00:16:25,879
please talk to us offline or read our

378
00:16:21,860 --> 00:16:27,949
paper but but yeah that there there is a

379
00:16:25,879 --> 00:16:33,079
way to produce sub lists such that these

380
00:16:27,949 --> 00:16:36,258
correlations become non-existent so just

381
00:16:33,079 --> 00:16:38,540
to recall we've got a list hardness

382
00:16:36,259 --> 00:16:41,029
split ability and plant ability which

383
00:16:38,540 --> 00:16:43,490
allows us to take a single instance of a

384
00:16:41,029 --> 00:16:48,110
search problem and turn it into an

385
00:16:43,490 --> 00:16:51,170
instance of this key exchange and show

386
00:16:48,110 --> 00:16:53,810
that finding this shared index is in

387
00:16:51,170 --> 00:16:55,430
fact going in faster than brute force

388
00:16:53,810 --> 00:16:58,609
time is going to solve the original

389
00:16:55,430 --> 00:17:00,469
problem faster and you know I brushed

390
00:16:58,610 --> 00:17:01,970
over some of the details that made this

391
00:17:00,470 --> 00:17:04,309
a little less elegant there's some

392
00:17:01,970 --> 00:17:07,280
correlations to deal with that there's

393
00:17:04,309 --> 00:17:10,039
some carries to deal with over here when

394
00:17:07,280 --> 00:17:12,770
we split our instance and we sometimes

395
00:17:10,039 --> 00:17:14,359
double plant but as it turns out all of

396
00:17:12,770 --> 00:17:15,619
these things can be handled and once

397
00:17:14,359 --> 00:17:19,329
again talked to us after if you're

398
00:17:15,619 --> 00:17:23,510
interested in how to handle these issues

399
00:17:19,329 --> 00:17:25,250
so now we'd like to summarize so we gave

400
00:17:23,510 --> 00:17:26,839
some definitions for what we mean by

401
00:17:25,250 --> 00:17:29,630
fine-grained one-way functions and a

402
00:17:26,839 --> 00:17:31,190
fine-grained key exchange we showed you

403
00:17:29,630 --> 00:17:33,650
what our assumption looked like it's an

404
00:17:31,190 --> 00:17:35,750
average case assumption that is based

405
00:17:33,650 --> 00:17:37,340
off of a worst-case hard problem but

406
00:17:35,750 --> 00:17:41,480
there is currently no reduction there

407
00:17:37,340 --> 00:17:44,209
from worst case to average case and we

408
00:17:41,480 --> 00:17:47,419
gave you a construction that ends up

409
00:17:44,210 --> 00:17:50,149
achieving a end to the one point five

410
00:17:47,419 --> 00:17:52,730
minus a little bit gap between what the

411
00:17:50,149 --> 00:17:54,580
honest parties do and what

412
00:17:52,730 --> 00:17:57,590
the adversary has to do to break it and

413
00:17:54,580 --> 00:17:59,030
doing this we we showed that you only

414
00:17:57,590 --> 00:18:00,830
needed three properties you needed this

415
00:17:59,030 --> 00:18:02,570
list hard properties to be able to split

416
00:18:00,830 --> 00:18:05,030
your instance into multiple smaller

417
00:18:02,570 --> 00:18:07,580
instances we had the split ability

418
00:18:05,030 --> 00:18:09,110
property which we might have forgotten

419
00:18:07,580 --> 00:18:11,689
to mention but it's basically you take

420
00:18:09,110 --> 00:18:13,610
an edge an edge has a weight you

421
00:18:11,690 --> 00:18:15,590
literally take the higher it orbits and

422
00:18:13,610 --> 00:18:17,120
split that into one problem take the

423
00:18:15,590 --> 00:18:19,428
lower order bits split that into a

424
00:18:17,120 --> 00:18:23,260
different problem then you get two

425
00:18:19,429 --> 00:18:25,340
instances and finally this plant ability

426
00:18:23,260 --> 00:18:26,360
property where you can simply take an

427
00:18:25,340 --> 00:18:32,059
instance that doesn't have a solution

428
00:18:26,360 --> 00:18:34,399
and put one in and so this is a very new

429
00:18:32,059 --> 00:18:36,168
area there's been working worst case to

430
00:18:34,400 --> 00:18:38,090
average case reductions but as far as we

431
00:18:36,169 --> 00:18:39,799
know there's been no work showing an

432
00:18:38,090 --> 00:18:41,928
actual key exchange using these

433
00:18:39,799 --> 00:18:44,720
fine-grained assumptions so there are

434
00:18:41,929 --> 00:18:46,549
tons of open problems first like n to

435
00:18:44,720 --> 00:18:48,679
the 1.5 isn't that great

436
00:18:46,549 --> 00:18:51,379
also we are fundamentally bounded

437
00:18:48,679 --> 00:18:53,330
bounded by using Merkel puzzles like we

438
00:18:51,380 --> 00:18:55,910
are bounded by this N squared gap if we

439
00:18:53,330 --> 00:18:57,980
continue to use a Merkel style key

440
00:18:55,910 --> 00:19:00,559
exchange can we do better than that in

441
00:18:57,980 --> 00:19:03,830
the full version of our paper we do get

442
00:19:00,559 --> 00:19:05,240
an N squared minus epsilon construction

443
00:19:03,830 --> 00:19:10,490
but we chose to go over the end of the

444
00:19:05,240 --> 00:19:12,350
1.5 today another open question is can

445
00:19:10,490 --> 00:19:15,020
we build fine-grained crypto that has

446
00:19:12,350 --> 00:19:16,459
different useful properties say could we

447
00:19:15,020 --> 00:19:19,668
build fine-grained fully homomorphic

448
00:19:16,460 --> 00:19:21,740
encryption and because we are dealing

449
00:19:19,669 --> 00:19:23,350
with a relaxed security notion one might

450
00:19:21,740 --> 00:19:26,770
think we'd be able to get better

451
00:19:23,350 --> 00:19:29,178
properties like more efficient

452
00:19:26,770 --> 00:19:31,790
encryption maybe you don't have to deal

453
00:19:29,179 --> 00:19:34,220
with error or bootstrapping it would be

454
00:19:31,790 --> 00:19:38,120
really nice to get something like that

455
00:19:34,220 --> 00:19:41,630
finally when you have a one-way function

456
00:19:38,120 --> 00:19:46,399
in the traditional sense you get all of

457
00:19:41,630 --> 00:19:47,990
symmetric crypto out of it you get TRG

458
00:19:46,400 --> 00:19:50,720
pseudo-random generator pseudo-random

459
00:19:47,990 --> 00:19:52,580
functions you get your symmetric key key

460
00:19:50,720 --> 00:19:55,580
exchanges or you get your symmetric key

461
00:19:52,580 --> 00:19:58,580
stream ciphers and stuff but in the

462
00:19:55,580 --> 00:19:59,928
fine-grain world it's much more

463
00:19:58,580 --> 00:20:02,330
difficult because all of these

464
00:19:59,929 --> 00:20:05,470
constructions take one-way functions and

465
00:20:02,330 --> 00:20:08,408
add some polynomial overhead that

466
00:20:05,470 --> 00:20:10,900
makes it much more useful but at the

467
00:20:08,409 --> 00:20:13,299
same time adds to the time it takes to

468
00:20:10,900 --> 00:20:14,620
run all of these protocols in our paper

469
00:20:13,299 --> 00:20:18,400
we show how to get a fine-grained

470
00:20:14,620 --> 00:20:21,280
hardcore bits but even that was tricky

471
00:20:18,400 --> 00:20:22,990
and we don't know how to get anything

472
00:20:21,280 --> 00:20:25,120
else out of it so that's a big open

473
00:20:22,990 --> 00:20:26,789
problem and if you have any ideas on how

474
00:20:25,120 --> 00:20:29,229
to solve these problems or thoughts on

475
00:20:26,789 --> 00:20:32,408
what they should look like please let us

476
00:20:29,230 --> 00:20:33,250
know we're very interested thank you for

477
00:20:32,409 --> 00:20:47,820
your attention

478
00:20:33,250 --> 00:20:47,820
we'll take any questions questions yes

479
00:21:00,059 --> 00:21:11,350
time to find the least sums to zero and

480
00:21:06,250 --> 00:21:15,460
this time with trade-offs which can

481
00:21:11,350 --> 00:21:17,620
reduce the time from below into the K at

482
00:21:15,460 --> 00:21:20,130
the expense of having more memory so

483
00:21:17,620 --> 00:21:30,100
have you consider the effect of having

484
00:21:20,130 --> 00:21:31,419
some amount of memory yes so I for

485
00:21:30,100 --> 00:21:34,209
specifically the zero K clique problem

486
00:21:31,419 --> 00:21:37,740
there isn't such a space time trade-off

487
00:21:34,210 --> 00:21:41,860
known the best time known for log face

488
00:21:37,740 --> 00:21:45,280
algorithms even in the worst case is the

489
00:21:41,860 --> 00:21:48,209
same as the best known when you have as

490
00:21:45,280 --> 00:21:48,210
much space as you want

491
00:21:48,690 --> 00:21:53,620
it doesn't appear there's a nice

492
00:21:51,460 --> 00:21:55,750
trade-off there unfortunately

493
00:21:53,620 --> 00:21:57,399
the sort of extra structure of the

494
00:21:55,750 --> 00:22:00,970
cliques as opposed to the lists makes

495
00:21:57,400 --> 00:22:03,190
some of that trade-off a lot harder like

496
00:22:00,970 --> 00:22:04,809
the sort of fine-grained equivalent of

497
00:22:03,190 --> 00:22:06,820
what you're talking about is these like

498
00:22:04,809 --> 00:22:08,110
K some problems and there it's

499
00:22:06,820 --> 00:22:09,820
absolutely true that there's the

500
00:22:08,110 --> 00:22:11,830
space-time trade-offs and often there

501
00:22:09,820 --> 00:22:13,149
are these like funny gaps you reach

502
00:22:11,830 --> 00:22:15,460
where if you try and get like below

503
00:22:13,150 --> 00:22:17,830
sublinear space you know takes wait

504
00:22:15,460 --> 00:22:20,700
longer but yeah it's that structure

505
00:22:17,830 --> 00:22:20,699
doesn't appear to happen here

506
00:22:25,200 --> 00:22:31,980
I saw that fine grade with me know the

507
00:22:29,940 --> 00:22:37,080
asymptotic security do you have any

508
00:22:31,980 --> 00:22:39,450
concrete parameters to propose what do

509
00:22:37,080 --> 00:22:42,210
you mean by known as of Tariq security

510
00:22:39,450 --> 00:22:44,670
so your security reserve are purely

511
00:22:42,210 --> 00:22:48,950
asymptotic right yes and I saw that fine

512
00:22:44,670 --> 00:22:48,950
grain would mean something more concrete

513
00:22:48,980 --> 00:23:02,040
we wanted there yeah sorry to disappoint

514
00:22:51,990 --> 00:23:04,700
you we wanted to like mimic the

515
00:23:02,040 --> 00:23:06,810
traditional world of crypto but use

516
00:23:04,700 --> 00:23:09,870
fine-grained complexity techniques where

517
00:23:06,810 --> 00:23:11,550
everything is still very asymptotic your

518
00:23:09,870 --> 00:23:14,550
your assumptions make sense on the

519
00:23:11,550 --> 00:23:18,409
naming but yeah we're following the

520
00:23:14,550 --> 00:23:18,409
naming of the complexity class yep

521
00:23:19,310 --> 00:23:25,050
and now the questions okay let's think

522
00:23:23,130 --> 00:23:29,720
the speaker see

523
00:23:25,050 --> 00:23:29,720
[Applause]

