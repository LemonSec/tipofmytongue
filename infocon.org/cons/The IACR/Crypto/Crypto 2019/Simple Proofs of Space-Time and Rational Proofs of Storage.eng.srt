1
00:00:04,960 --> 00:00:11,020
okay hi everyone so let's start with a

2
00:00:09,670 --> 00:00:12,879
little bit of motivation even though

3
00:00:11,020 --> 00:00:16,869
you've already seen a little bit in a

4
00:00:12,880 --> 00:00:19,810
previous talk so our story is we're

5
00:00:16,869 --> 00:00:22,119
trying to get consensus doing some kind

6
00:00:19,810 --> 00:00:23,560
of agreement protocol and getting

7
00:00:22,119 --> 00:00:25,029
consensus is hard right this is

8
00:00:23,560 --> 00:00:28,089
something that we've studied for many

9
00:00:25,029 --> 00:00:30,759
many years and it's still studied today

10
00:00:28,089 --> 00:00:33,699
in the context of blockchains and other

11
00:00:30,759 --> 00:00:35,110
contexts and the main challenges in

12
00:00:33,700 --> 00:00:38,080
consensus you don't know who to trust

13
00:00:35,110 --> 00:00:40,990
right there's multiple parties some of

14
00:00:38,080 --> 00:00:42,339
them might be malicious and actually if

15
00:00:40,990 --> 00:00:44,170
you're talking about the permissionless

16
00:00:42,340 --> 00:00:46,870
setting where we don't have identity

17
00:00:44,170 --> 00:00:48,220
verification and anybody can join the

18
00:00:46,870 --> 00:00:50,050
protocol then it's just simply

19
00:00:48,220 --> 00:00:52,180
impossible to get a consensus protocol

20
00:00:50,050 --> 00:00:54,040
right and the reason is that the

21
00:00:52,180 --> 00:00:56,230
adversaries can just create multiple

22
00:00:54,040 --> 00:00:57,910
copies of themselves and so they're

23
00:00:56,230 --> 00:00:59,769
always in the majority right and on the

24
00:00:57,910 --> 00:01:04,720
other hand we know that we need an

25
00:00:59,770 --> 00:01:08,590
honest majority to get consensus so what

26
00:01:04,720 --> 00:01:12,310
can we do so this is I think maybe the

27
00:01:08,590 --> 00:01:14,590
the main interesting new idea that

28
00:01:12,310 --> 00:01:16,990
Satoshi Nakamoto had with Bitcoin is

29
00:01:14,590 --> 00:01:19,720
that instead of counting people doing a

30
00:01:16,990 --> 00:01:21,369
consensus with a majority of people what

31
00:01:19,720 --> 00:01:23,560
we're going to do is count resources and

32
00:01:21,370 --> 00:01:25,150
if we use resources that are publicly

33
00:01:23,560 --> 00:01:26,440
verifiable so you can check that

34
00:01:25,150 --> 00:01:28,930
somebody actually expended their

35
00:01:26,440 --> 00:01:32,020
resource then now we can switch this

36
00:01:28,930 --> 00:01:34,210
assumption from an honest majority of

37
00:01:32,020 --> 00:01:37,060
parties to an honest majority of

38
00:01:34,210 --> 00:01:39,520
resources and suddenly the problem

39
00:01:37,060 --> 00:01:42,430
becomes possible even in the

40
00:01:39,520 --> 00:01:46,899
permissionless setting so what kind of

41
00:01:42,430 --> 00:01:49,960
publicly verifiable resources can we can

42
00:01:46,900 --> 00:01:52,210
we check so one thing that's very well

43
00:01:49,960 --> 00:01:53,140
known it's used in a lot of

44
00:01:52,210 --> 00:01:57,548
cryptocurrencies

45
00:01:53,140 --> 00:01:58,990
but it's known from way before is proofs

46
00:01:57,549 --> 00:02:01,869
of work right so these are very very

47
00:01:58,990 --> 00:02:05,048
simple they're easy to do people have

48
00:02:01,869 --> 00:02:07,180
implemented them many years ago but they

49
00:02:05,049 --> 00:02:10,479
have a big problem they're extremely

50
00:02:07,180 --> 00:02:13,689
expensive environmentally right I think

51
00:02:10,479 --> 00:02:16,269
Bitcoin usage is now using as much

52
00:02:13,689 --> 00:02:18,340
electricity as a medium-sized country so

53
00:02:16,269 --> 00:02:20,530
this is bad we don't want to use

54
00:02:18,340 --> 00:02:22,930
of work so what else can we do so one

55
00:02:20,530 --> 00:02:26,500
suggestion that's you know getting more

56
00:02:22,930 --> 00:02:27,700
popular is to use money unfortunately we

57
00:02:26,500 --> 00:02:29,890
don't know how to get a publicly

58
00:02:27,700 --> 00:02:31,929
verifiable proof of sort of regular

59
00:02:29,890 --> 00:02:35,470
currency I can't prove to you that I

60
00:02:31,930 --> 00:02:39,370
burned dollars at least they can't do it

61
00:02:35,470 --> 00:02:41,680
electronically but in the context of

62
00:02:39,370 --> 00:02:43,060
cryptocurrencies we actually can prove

63
00:02:41,680 --> 00:02:45,580
things like that this is what's called

64
00:02:43,060 --> 00:02:47,170
the proof of stake I'm sort of using the

65
00:02:45,580 --> 00:02:51,069
cryptocurrency money in proving that

66
00:02:47,170 --> 00:02:52,958
I've used it however these are a bit

67
00:02:51,069 --> 00:02:55,390
problematic they require usually some

68
00:02:52,959 --> 00:02:59,470
non-standard assumptions such as proof

69
00:02:55,390 --> 00:03:01,359
of not proof to secure erasers and they

70
00:02:59,470 --> 00:03:04,780
also have some inherent vulnerabilities

71
00:03:01,360 --> 00:03:08,080
such as 51% capture attacks if somebody

72
00:03:04,780 --> 00:03:10,810
ever gets a majority of the of the money

73
00:03:08,080 --> 00:03:12,819
in the cryptocurrency now they'll have a

74
00:03:10,810 --> 00:03:14,440
majority forever there's we can't tell

75
00:03:12,819 --> 00:03:17,560
that this happened and we can sort of

76
00:03:14,440 --> 00:03:20,260
undo this so you know it's not clear

77
00:03:17,560 --> 00:03:22,239
that this is a completely breaks

78
00:03:20,260 --> 00:03:24,700
everything but it seems bad that this

79
00:03:22,239 --> 00:03:26,440
would be the only possible solution so

80
00:03:24,700 --> 00:03:29,018
this is the motivation we're trying to

81
00:03:26,440 --> 00:03:31,780
get a different resource so what I'm

82
00:03:29,019 --> 00:03:33,819
going to talk about now it's the

83
00:03:31,780 --> 00:03:36,010
definition of course it's going to be a

84
00:03:33,819 --> 00:03:39,429
little bit hand wavy because I'm not

85
00:03:36,010 --> 00:03:41,679
going to get into any details and what

86
00:03:39,430 --> 00:03:47,260
we want in a proof of space-time ideally

87
00:03:41,680 --> 00:03:50,950
is basically a proof that we used disk

88
00:03:47,260 --> 00:03:55,090
resources so what is the disk resource

89
00:03:50,950 --> 00:03:56,888
it I filled my disk for with a certain

90
00:03:55,090 --> 00:03:58,540
amount of space on my disk for a certain

91
00:03:56,889 --> 00:04:00,819
amount of time so we'll always talk now

92
00:03:58,540 --> 00:04:02,138
about a unit of time but this of course

93
00:04:00,819 --> 00:04:04,810
can be whatever you like

94
00:04:02,139 --> 00:04:07,319
and the amount of resource I expended is

95
00:04:04,810 --> 00:04:09,819
the size of the disk times how long I've

96
00:04:07,319 --> 00:04:14,589
used it for so this is why it's space

97
00:04:09,819 --> 00:04:19,060
time we haven't yet included gravity in

98
00:04:14,590 --> 00:04:23,260
this so you know in a proof of space

99
00:04:19,060 --> 00:04:26,050
time we have two phases we have an

100
00:04:23,260 --> 00:04:28,150
initialization phase where the prover

101
00:04:26,050 --> 00:04:30,970
basically generates the data that they

102
00:04:28,150 --> 00:04:33,849
want to fill their disk with

103
00:04:30,970 --> 00:04:35,950
now why do they have to generate it

104
00:04:33,850 --> 00:04:39,610
themselves it's because we want there to

105
00:04:35,950 --> 00:04:40,930
be low communications so for the things

106
00:04:39,610 --> 00:04:42,130
like proofs of replication where you

107
00:04:40,930 --> 00:04:43,660
want to use the useful data actually

108
00:04:42,130 --> 00:04:46,270
have to receive all this data to store

109
00:04:43,660 --> 00:04:47,440
but if I'm trying to use a large amount

110
00:04:46,270 --> 00:04:48,880
of this space and I want to keep the

111
00:04:47,440 --> 00:04:51,070
communication low the data has to come

112
00:04:48,880 --> 00:04:55,150
from me so I have to be able to generate

113
00:04:51,070 --> 00:04:57,190
it myself and in the second phase which

114
00:04:55,150 --> 00:04:59,409
we call the execution phase this is

115
00:04:57,190 --> 00:05:02,290
something that we run every unit of time

116
00:04:59,410 --> 00:05:06,240
and I prove that I'm still storing this

117
00:05:02,290 --> 00:05:09,430
data so if I did this correctly then I

118
00:05:06,240 --> 00:05:11,490
I've shown you that I filled my disk and

119
00:05:09,430 --> 00:05:14,080
that I'm still keeping this disk full

120
00:05:11,490 --> 00:05:17,050
for however long I'm running these

121
00:05:14,080 --> 00:05:21,430
execution phases okay so that's the

122
00:05:17,050 --> 00:05:24,520
ideal sadly we can't quite get that why

123
00:05:21,430 --> 00:05:26,320
because if we have low communication and

124
00:05:24,520 --> 00:05:29,859
in absence of other sort of strange

125
00:05:26,320 --> 00:05:31,840
assumptions such as the timing

126
00:05:29,860 --> 00:05:35,230
assumptions and things like that right

127
00:05:31,840 --> 00:05:36,640
we can't we can't prove that I've

128
00:05:35,230 --> 00:05:38,260
actually stored the data why there's

129
00:05:36,640 --> 00:05:42,640
always this simulation attack I can

130
00:05:38,260 --> 00:05:44,710
store small random seed for creating the

131
00:05:42,640 --> 00:05:46,900
data and then instead of storing the the

132
00:05:44,710 --> 00:05:49,210
data I can just run the initialization

133
00:05:46,900 --> 00:05:52,090
phase again with the same seed and I'll

134
00:05:49,210 --> 00:05:53,859
get the same results so there's no way I

135
00:05:52,090 --> 00:05:57,640
can prove that this is not what happened

136
00:05:53,860 --> 00:06:00,720
when I run the proof phase okay so this

137
00:05:57,640 --> 00:06:02,950
is bad so what do we actually prove

138
00:06:00,720 --> 00:06:06,970
instead of proving that I've definitely

139
00:06:02,950 --> 00:06:10,440
stored data we prove an or statement so

140
00:06:06,970 --> 00:06:14,470
either I've actually stored the data or

141
00:06:10,440 --> 00:06:17,440
I've done enough work to reconstruct the

142
00:06:14,470 --> 00:06:19,090
data every time right so this is

143
00:06:17,440 --> 00:06:22,600
something that sort of is inherent in

144
00:06:19,090 --> 00:06:28,479
the definition I allow the prover to

145
00:06:22,600 --> 00:06:30,430
trade work for a space time okay so why

146
00:06:28,480 --> 00:06:33,070
is this still good why can we still use

147
00:06:30,430 --> 00:06:34,290
this as a proof of a resource

148
00:06:33,070 --> 00:06:36,940
consumption

149
00:06:34,290 --> 00:06:39,190
well the idea that the cost of

150
00:06:36,940 --> 00:06:42,100
recreating the data is going to be high

151
00:06:39,190 --> 00:06:44,230
and in particular it's going to be more

152
00:06:42,100 --> 00:06:46,240
than the cost of just storing the data

153
00:06:44,230 --> 00:06:48,640
and if that's the case then rational

154
00:06:46,240 --> 00:06:51,250
parties would rather store the data than

155
00:06:48,640 --> 00:06:52,780
recreated so in the context of things

156
00:06:51,250 --> 00:06:54,610
like cryptocurrencies this is definitely

157
00:06:52,780 --> 00:06:57,130
good enough right because rational

158
00:06:54,610 --> 00:06:58,900
parties will store the data and polar

159
00:06:57,130 --> 00:07:01,450
bears and the polar bears will be happy

160
00:06:58,900 --> 00:07:03,159
and it's still okay in terms of security

161
00:07:01,450 --> 00:07:06,460
even if the adversary is not rational

162
00:07:03,160 --> 00:07:08,020
because the cost of the adversary is

163
00:07:06,460 --> 00:07:11,469
still going to be high no matter which

164
00:07:08,020 --> 00:07:13,479
strategy the adversary chooses so now

165
00:07:11,470 --> 00:07:16,690
our new assumption instead of an honest

166
00:07:13,480 --> 00:07:19,690
the majority of disk space or an honest

167
00:07:16,690 --> 00:07:22,240
majority of CPU we were going to assume

168
00:07:19,690 --> 00:07:26,650
the combined resources controlled by the

169
00:07:22,240 --> 00:07:28,180
honest majority so when we say the

170
00:07:26,650 --> 00:07:29,739
combined resource we we have some

171
00:07:28,180 --> 00:07:32,380
trade-off factor or however much storage

172
00:07:29,740 --> 00:07:33,820
costs over much CPU cost and we're

173
00:07:32,380 --> 00:07:38,170
talking about the majority in terms of

174
00:07:33,820 --> 00:07:41,080
cost okay so what do we actually achieve

175
00:07:38,170 --> 00:07:43,270
in this paper we first get a very very

176
00:07:41,080 --> 00:07:46,210
simple construction of a post opposed as

177
00:07:43,270 --> 00:07:47,469
a proof of space-time that's secure in

178
00:07:46,210 --> 00:07:51,370
the random Oracle model it doesn't need

179
00:07:47,470 --> 00:07:53,740
any other assumptions this construction

180
00:07:51,370 --> 00:07:56,380
has an adjustable initialization

181
00:07:53,740 --> 00:07:58,390
difficulty which means if the price of

182
00:07:56,380 --> 00:08:01,060
storage compared to the price of CPU

183
00:07:58,390 --> 00:08:05,500
changes or if I want to increase the

184
00:08:01,060 --> 00:08:07,120
length of time that I require parties to

185
00:08:05,500 --> 00:08:10,930
store the data which increase their

186
00:08:07,120 --> 00:08:12,760
storage costs I can also turn a knob and

187
00:08:10,930 --> 00:08:15,070
increase the initialization cost to make

188
00:08:12,760 --> 00:08:16,360
it still rational to store things and

189
00:08:15,070 --> 00:08:20,050
not only that we can do this

190
00:08:16,360 --> 00:08:22,600
incrementally so if you've initialized

191
00:08:20,050 --> 00:08:25,330
your data with a certain difficulty and

192
00:08:22,600 --> 00:08:27,580
then later we decide that actually you

193
00:08:25,330 --> 00:08:28,990
know the price of storage has gone up so

194
00:08:27,580 --> 00:08:30,219
it's no longer rational to store things

195
00:08:28,990 --> 00:08:33,280
we need to increase the nationalization

196
00:08:30,220 --> 00:08:36,580
difficulty we can do that by just doing

197
00:08:33,280 --> 00:08:38,589
the Delta work that you need from the

198
00:08:36,580 --> 00:08:42,640
initial difficulty to the new difficulty

199
00:08:38,590 --> 00:08:45,880
you don't need to redo everything and we

200
00:08:42,640 --> 00:08:47,830
have a nice market-based mechanism to

201
00:08:45,880 --> 00:08:49,210
determine what is the actual difficulty

202
00:08:47,830 --> 00:08:53,370
that you need to make it rational so

203
00:08:49,210 --> 00:08:56,320
basically we can detect if parties are

204
00:08:53,370 --> 00:08:57,880
using work instead of storage and use

205
00:08:56,320 --> 00:09:00,970
that signal to increase the

206
00:08:57,880 --> 00:09:03,310
faculty when needed finally we actually

207
00:09:00,970 --> 00:09:05,260
implemented this it's simple enough to

208
00:09:03,310 --> 00:09:07,030
use as part of the space mesh consensus

209
00:09:05,260 --> 00:09:12,250
protocol which is a cryptocurrency based

210
00:09:07,030 --> 00:09:13,660
on proof of space-time okay so for those

211
00:09:12,250 --> 00:09:14,980
of you in the audience who've you know

212
00:09:13,660 --> 00:09:19,030
been in this field for a bit you know

213
00:09:14,980 --> 00:09:20,530
there been several papers already this

214
00:09:19,030 --> 00:09:22,689
is a bit confusing there some of them

215
00:09:20,530 --> 00:09:25,709
are called proofs of space this is proof

216
00:09:22,690 --> 00:09:28,630
of space-time so what's the difference

217
00:09:25,710 --> 00:09:30,880
well there are several differences I

218
00:09:28,630 --> 00:09:33,700
think the highlights are the proof of

219
00:09:30,880 --> 00:09:36,550
space proof of space constructions are

220
00:09:33,700 --> 00:09:40,690
fairly complicated they require these

221
00:09:36,550 --> 00:09:41,680
graph bubbling arguments and actually to

222
00:09:40,690 --> 00:09:43,450
implement them is also a bit more

223
00:09:41,680 --> 00:09:46,569
complicated because you need to generate

224
00:09:43,450 --> 00:09:48,040
a graph with a certain topology whereas

225
00:09:46,570 --> 00:09:50,380
our construction as you'll see in a

226
00:09:48,040 --> 00:09:52,180
moment is extremely simple and the

227
00:09:50,380 --> 00:09:56,290
arguments are just basic information

228
00:09:52,180 --> 00:09:58,209
theoretical compression arguments we

229
00:09:56,290 --> 00:10:00,280
have an adjustable initialization

230
00:09:58,210 --> 00:10:02,110
difficulty which means as I said if you

231
00:10:00,280 --> 00:10:04,750
need to increase the length of time

232
00:10:02,110 --> 00:10:06,700
suppose you want the time between proofs

233
00:10:04,750 --> 00:10:09,220
to be one week or two weeks or a month

234
00:10:06,700 --> 00:10:10,660
then you can just increase the

235
00:10:09,220 --> 00:10:13,030
difficulty of initialization to make it

236
00:10:10,660 --> 00:10:14,890
still rational to do that whereas the

237
00:10:13,030 --> 00:10:16,329
proof of space constructions they're

238
00:10:14,890 --> 00:10:18,310
initialization difficulty is actually

239
00:10:16,330 --> 00:10:20,410
tied to the size of the graph that

240
00:10:18,310 --> 00:10:21,670
you're generating which means if you

241
00:10:20,410 --> 00:10:23,260
want to increase the difficulty either

242
00:10:21,670 --> 00:10:26,589
need to increase the verification costs

243
00:10:23,260 --> 00:10:29,560
or increase the amount of data you're

244
00:10:26,590 --> 00:10:32,500
storing but all is not rosie's not that

245
00:10:29,560 --> 00:10:34,630
we're strictly better the real advantage

246
00:10:32,500 --> 00:10:37,930
of these proofs of space is they're very

247
00:10:34,630 --> 00:10:39,939
the prover runs in poly log in the space

248
00:10:37,930 --> 00:10:41,469
so the prover is much more efficient in

249
00:10:39,940 --> 00:10:44,490
our case the prover actually has to read

250
00:10:41,470 --> 00:10:46,960
the entire storage for every proof so

251
00:10:44,490 --> 00:10:49,390
there these the results are actually

252
00:10:46,960 --> 00:10:50,950
incomparable and they think of them as

253
00:10:49,390 --> 00:10:53,260
working for different parameter regimes

254
00:10:50,950 --> 00:10:55,090
so if you want to have a proof every 10

255
00:10:53,260 --> 00:10:56,319
seconds you probably don't want a proof

256
00:10:55,090 --> 00:10:59,500
of space time at least not our

257
00:10:56,320 --> 00:11:02,110
construction if you want to have a proof

258
00:10:59,500 --> 00:11:06,010
every month then you probably do want

259
00:11:02,110 --> 00:11:07,450
this proof of space-time okay what about

260
00:11:06,010 --> 00:11:11,550
memory heart functions there's also

261
00:11:07,450 --> 00:11:14,160
things that are highly related

262
00:11:11,550 --> 00:11:15,750
but they're actually doing different

263
00:11:14,160 --> 00:11:18,810
things so these these are just getting

264
00:11:15,750 --> 00:11:20,820
something else so memory hard function

265
00:11:18,810 --> 00:11:23,160
is something that gives you a lower

266
00:11:20,820 --> 00:11:25,470
bound for the amount of space or space

267
00:11:23,160 --> 00:11:27,750
time even that you're using while you're

268
00:11:25,470 --> 00:11:30,420
computing the function right so you have

269
00:11:27,750 --> 00:11:33,779
the complexity of the computation itself

270
00:11:30,420 --> 00:11:36,270
whereas the proof of space time gives

271
00:11:33,779 --> 00:11:38,040
you a lower bound with this trade-off

272
00:11:36,270 --> 00:11:39,689
that I mentioned for the amount of space

273
00:11:38,040 --> 00:11:43,829
time you're using between the proof

274
00:11:39,690 --> 00:11:47,550
computations so basically if you're

275
00:11:43,830 --> 00:11:49,200
using proof of space time sorry if

276
00:11:47,550 --> 00:11:51,839
you're using a memory hard function

277
00:11:49,200 --> 00:11:54,029
right then there's nothing preventing

278
00:11:51,839 --> 00:11:55,500
you from reusing the memory you can't

279
00:11:54,029 --> 00:11:56,880
use it as a proof of space time because

280
00:11:55,500 --> 00:11:59,550
you could just use the same memory over

281
00:11:56,880 --> 00:12:01,110
and over again on the other hand if what

282
00:11:59,550 --> 00:12:03,079
you want is a memory hard function you

283
00:12:01,110 --> 00:12:05,670
cannot use a proof of space time because

284
00:12:03,080 --> 00:12:07,020
it actually doesn't give any lower bound

285
00:12:05,670 --> 00:12:08,339
on the amount of computation and you'll

286
00:12:07,020 --> 00:12:12,300
see our construction actually requires

287
00:12:08,339 --> 00:12:15,420
very little memory to compute ok so

288
00:12:12,300 --> 00:12:19,500
we've not the what we want to do out of

289
00:12:15,420 --> 00:12:22,290
the way now how do we do it so the very

290
00:12:19,500 --> 00:12:25,050
high-level idea is what we're going to

291
00:12:22,290 --> 00:12:28,740
store is a table and every entry in the

292
00:12:25,050 --> 00:12:30,719
table is going to be a proof-of-work and

293
00:12:28,740 --> 00:12:32,070
this gives us very fine-grained control

294
00:12:30,720 --> 00:12:33,480
over the initialization cost because

295
00:12:32,070 --> 00:12:34,950
proofs of work we can tune them exactly

296
00:12:33,480 --> 00:12:37,080
how much work do you need to do for each

297
00:12:34,950 --> 00:12:39,080
entry and this will say how much work

298
00:12:37,080 --> 00:12:41,459
you need to do for the entire table and

299
00:12:39,080 --> 00:12:42,779
it's also very easy to verify their

300
00:12:41,459 --> 00:12:44,400
table entries the correct proof of work

301
00:12:42,779 --> 00:12:48,300
we just use the proof of work verifier

302
00:12:44,400 --> 00:12:51,329
so that's great and what do we do in the

303
00:12:48,300 --> 00:12:52,890
execution phase so what we'd like to do

304
00:12:51,330 --> 00:12:55,380
is say ok the verifier is going to query

305
00:12:52,890 --> 00:12:56,640
some random points in this table and if

306
00:12:55,380 --> 00:12:58,140
you didn't store the table you won't be

307
00:12:56,640 --> 00:13:01,589
able to answer them without doing work

308
00:12:58,140 --> 00:13:04,589
but this actually doesn't quite work why

309
00:13:01,589 --> 00:13:06,990
doesn't this work because the prover can

310
00:13:04,589 --> 00:13:09,810
actually store nothing and once the

311
00:13:06,990 --> 00:13:11,790
verifier queries the prover can just

312
00:13:09,810 --> 00:13:14,790
reconstruct that particular cell that he

313
00:13:11,790 --> 00:13:16,920
queried so the response to each query

314
00:13:14,790 --> 00:13:18,990
will always be correct but the actual

315
00:13:16,920 --> 00:13:21,209
amount of work will be small they only

316
00:13:18,990 --> 00:13:22,770
have to reconstruct a few cells and they

317
00:13:21,209 --> 00:13:24,780
don't have to store anything so this is

318
00:13:22,770 --> 00:13:27,810
definitely not a good proof of

319
00:13:24,780 --> 00:13:29,189
it's time so what do we actually do for

320
00:13:27,810 --> 00:13:31,140
constructing a post

321
00:13:29,190 --> 00:13:33,000
well the initialization actually does

322
00:13:31,140 --> 00:13:35,100
work like that we fill the table with

323
00:13:33,000 --> 00:13:37,470
proofs of work but the execution phase

324
00:13:35,100 --> 00:13:39,360
is just a little bit different basically

325
00:13:37,470 --> 00:13:43,740
what we do is the verifier is going to

326
00:13:39,360 --> 00:13:45,450
send a random challenge and the prover

327
00:13:43,740 --> 00:13:48,570
is going to commit in the execution

328
00:13:45,450 --> 00:13:51,330
phase to the entire table and now the

329
00:13:48,570 --> 00:13:53,640
verifier asks random queries and for

330
00:13:51,330 --> 00:13:58,140
each query the prover needs to show that

331
00:13:53,640 --> 00:13:59,640
this is actually the position the table

332
00:13:58,140 --> 00:14:01,560
that the prove are committed to

333
00:13:59,640 --> 00:14:03,630
originally and that this is a good proof

334
00:14:01,560 --> 00:14:07,199
of work and those are both things that

335
00:14:03,630 --> 00:14:10,140
are fairly easy to verify and okay why

336
00:14:07,200 --> 00:14:13,440
does this work go and one one thing to

337
00:14:10,140 --> 00:14:15,420
note is that the commitment here is in

338
00:14:13,440 --> 00:14:17,430
the execution phase so every time I do

339
00:14:15,420 --> 00:14:19,890
the execution phase I do a commitment

340
00:14:17,430 --> 00:14:21,120
this is actually what takes us a long

341
00:14:19,890 --> 00:14:22,470
time and say they have to read

342
00:14:21,120 --> 00:14:24,960
everything I have to read everything

343
00:14:22,470 --> 00:14:26,580
because of this in our construction it

344
00:14:24,960 --> 00:14:28,710
doesn't help at all to commit in the

345
00:14:26,580 --> 00:14:31,290
initialization phase because the tack I

346
00:14:28,710 --> 00:14:32,610
used previously still works right I can

347
00:14:31,290 --> 00:14:34,050
commit to the entire table and then

348
00:14:32,610 --> 00:14:38,220
forget everything and just reconstruct

349
00:14:34,050 --> 00:14:41,219
the things I need if if I only committed

350
00:14:38,220 --> 00:14:43,680
in the initialization phase okay so why

351
00:14:41,220 --> 00:14:46,500
does this work again the intuition is

352
00:14:43,680 --> 00:14:50,069
very simple the prover has to decide

353
00:14:46,500 --> 00:14:52,140
before responding before committing

354
00:14:50,070 --> 00:14:53,880
basically which cells of the table it's

355
00:14:52,140 --> 00:14:57,840
going to reconstruct if it hasn't stored

356
00:14:53,880 --> 00:14:58,950
them already and so we can decide you

357
00:14:57,840 --> 00:15:00,090
know I'm going to reconstruct some of

358
00:14:58,950 --> 00:15:01,860
them but anything that it didn't

359
00:15:00,090 --> 00:15:04,410
reconstruct it's committed to being bad

360
00:15:01,860 --> 00:15:07,200
and now when it gets a random query if

361
00:15:04,410 --> 00:15:09,630
there's a larger significant fraction of

362
00:15:07,200 --> 00:15:12,570
the cells that are bad then it's going

363
00:15:09,630 --> 00:15:14,730
to get caught with high probability so

364
00:15:12,570 --> 00:15:17,100
basically what this means is it has to

365
00:15:14,730 --> 00:15:20,180
spend either storage to store the cells

366
00:15:17,100 --> 00:15:22,320
or CPU to reconstruct the cells and

367
00:15:20,180 --> 00:15:26,760
before the commitment it has to have a

368
00:15:22,320 --> 00:15:29,580
mostly full table okay there are some

369
00:15:26,760 --> 00:15:32,130
subtleties so as I described it this

370
00:15:29,580 --> 00:15:33,810
doesn't quite work I can't say just use

371
00:15:32,130 --> 00:15:37,110
any proof of work

372
00:15:33,810 --> 00:15:39,089
do this the reason is that the

373
00:15:37,110 --> 00:15:42,060
proof-of-work only says I've used work

374
00:15:39,090 --> 00:15:44,130
but it could be that the proof of work

375
00:15:42,060 --> 00:15:46,529
allows the adversary to do some work and

376
00:15:44,130 --> 00:15:48,600
then to compress the results so maybe

377
00:15:46,529 --> 00:15:50,580
after doing the entire work to fill the

378
00:15:48,600 --> 00:15:51,900
table I can compress the results to

379
00:15:50,580 --> 00:15:53,640
something much smaller than the table

380
00:15:51,900 --> 00:15:58,500
and now I haven't used the storage that

381
00:15:53,640 --> 00:16:01,170
I need so what we need is some notion of

382
00:15:58,500 --> 00:16:03,690
incompressible proofs of work and this

383
00:16:01,170 --> 00:16:05,219
is a little bit different from those of

384
00:16:03,690 --> 00:16:07,470
their standard notions of in

385
00:16:05,220 --> 00:16:09,390
compressibility because we have a random

386
00:16:07,470 --> 00:16:10,980
Oracle so I can't just say you know the

387
00:16:09,390 --> 00:16:13,949
output of the random Oracle is random it

388
00:16:10,980 --> 00:16:15,630
cannot be compressed because I can

389
00:16:13,950 --> 00:16:17,880
always query during the decompression

390
00:16:15,630 --> 00:16:19,800
the random Oracle so it needs to be

391
00:16:17,880 --> 00:16:22,620
incompressible even in the presence of a

392
00:16:19,800 --> 00:16:25,439
random Oracle and luckily the standard

393
00:16:22,620 --> 00:16:26,670
proof of work using hash we show that it

394
00:16:25,440 --> 00:16:29,700
is incompressible

395
00:16:26,670 --> 00:16:32,069
as long as what we store is just the

396
00:16:29,700 --> 00:16:33,630
nonce we don't store the output of the

397
00:16:32,070 --> 00:16:36,360
random Oracle because that is can be

398
00:16:33,630 --> 00:16:40,320
very large and I can compress it by only

399
00:16:36,360 --> 00:16:41,880
remembering the nonce so if that is so

400
00:16:40,320 --> 00:16:43,290
if that's what we do then this is an

401
00:16:41,880 --> 00:16:51,120
incompressible proof and this whole

402
00:16:43,290 --> 00:16:52,650
construction does work okay so some

403
00:16:51,120 --> 00:16:55,020
things that I haven't shown you in this

404
00:16:52,650 --> 00:16:57,600
talk but are in the paper the

405
00:16:55,020 --> 00:17:00,569
market-based the mechanism for detecting

406
00:16:57,600 --> 00:17:04,079
when users are are using work instead of

407
00:17:00,570 --> 00:17:07,560
storage and there's this an additional

408
00:17:04,079 --> 00:17:10,198
subtlety with how much work I need to

409
00:17:07,560 --> 00:17:11,490
fill a certain size table and for some

410
00:17:10,199 --> 00:17:13,679
parameters we actually want to use a

411
00:17:11,490 --> 00:17:15,300
different proof of work also extremely

412
00:17:13,679 --> 00:17:17,790
simple just run the hash once and take a

413
00:17:15,300 --> 00:17:21,000
few bits and we show that that is also

414
00:17:17,790 --> 00:17:23,879
in compressible now there are also some

415
00:17:21,000 --> 00:17:26,010
open questions unsurprisingly and one of

416
00:17:23,880 --> 00:17:28,350
them is can we get the best of both

417
00:17:26,010 --> 00:17:30,030
worlds in terms of proofs of space and

418
00:17:28,349 --> 00:17:31,560
proofs of space-time can we get

419
00:17:30,030 --> 00:17:33,899
something that has low proof or

420
00:17:31,560 --> 00:17:37,070
complexity and also this nice

421
00:17:33,900 --> 00:17:42,000
incremental or adjustable even

422
00:17:37,070 --> 00:17:44,010
difficulty and of course we've shown two

423
00:17:42,000 --> 00:17:45,210
proofs of proof of work constructions

424
00:17:44,010 --> 00:17:46,770
can we show that other proof of work

425
00:17:45,210 --> 00:17:47,230
constructions are also in compressible

426
00:17:46,770 --> 00:17:54,730
and

427
00:17:47,230 --> 00:17:59,630
be used in this framework thank you

428
00:17:54,730 --> 00:18:02,039
[Applause]

429
00:17:59,630 --> 00:18:11,250
many thanks for the nice talk are there

430
00:18:02,039 --> 00:18:12,658
any questions I guess it was so simple

431
00:18:11,250 --> 00:18:15,690
that everyone

432
00:18:12,659 --> 00:18:17,340
they're so blown away so let's thank the

433
00:18:15,690 --> 00:18:21,289
speaker again in the next talk is the

434
00:18:17,340 --> 00:18:21,289
inviter talk so please go over

