1
00:00:04,880 --> 00:00:08,629
so thanks for the introduction so I'm

2
00:00:06,890 --> 00:00:10,280
going to talk about liquid resilience

3
00:00:08,630 --> 00:00:11,959
secret sharing and applications and this

4
00:00:10,280 --> 00:00:15,590
is based on joint work with pressure and

5
00:00:11,959 --> 00:00:17,270
not anyway so David so let me start the

6
00:00:15,590 --> 00:00:19,310
talk by giving you a brief overview of

7
00:00:17,270 --> 00:00:21,169
threshold secret sharing so as you might

8
00:00:19,310 --> 00:00:23,150
all be aware it was introduced in the

9
00:00:21,170 --> 00:00:25,700
seminal works of Shamir and black lee in

10
00:00:23,150 --> 00:00:28,070
the late 70s and in this setting there

11
00:00:25,700 --> 00:00:31,189
is a dealer who has a secret message m

12
00:00:28,070 --> 00:00:33,890
and he wants to split the secret into n

13
00:00:31,190 --> 00:00:36,500
shares sh 1 2 sh n with some threshold

14
00:00:33,890 --> 00:00:39,829
parameter T the dealer then sends the

15
00:00:36,500 --> 00:00:41,719
Ayad share Shi to party P I so we

16
00:00:39,829 --> 00:00:44,329
require a threshold secret sharing to

17
00:00:41,719 --> 00:00:46,249
satisfy two properties the first is the

18
00:00:44,329 --> 00:00:48,800
correctness property which states that

19
00:00:46,249 --> 00:00:51,050
any group of T or more parties can come

20
00:00:48,800 --> 00:00:53,690
together Eustatius to reconstruct the

21
00:00:51,050 --> 00:00:55,788
secret message m and the second property

22
00:00:53,690 --> 00:00:58,159
is the secrecy property which states

23
00:00:55,789 --> 00:01:00,769
that any adversary whose correcting at

24
00:00:58,159 --> 00:01:04,819
most t minus one parties learns no

25
00:01:00,769 --> 00:01:05,990
information about the secret message so

26
00:01:04,819 --> 00:01:07,970
threshold secret sharing is a

27
00:01:05,990 --> 00:01:10,429
fundamental cryptographic perimeter with

28
00:01:07,970 --> 00:01:12,259
numerous applications some of the

29
00:01:10,430 --> 00:01:14,030
applications include constructing secure

30
00:01:12,259 --> 00:01:15,590
multi-party computation protocols

31
00:01:14,030 --> 00:01:18,860
constructing threshold cryptographic

32
00:01:15,590 --> 00:01:20,960
primitives and so on and the security of

33
00:01:18,860 --> 00:01:22,759
all these applications crucially relay

34
00:01:20,960 --> 00:01:24,288
on the secrecy property of the

35
00:01:22,759 --> 00:01:26,240
underlying secret sharing scheme

36
00:01:24,289 --> 00:01:28,759
so the question we would like to address

37
00:01:26,240 --> 00:01:30,770
today is that what if the adversary in

38
00:01:28,759 --> 00:01:33,380
addition to corrupting t minus one

39
00:01:30,770 --> 00:01:35,210
parties also learn some partial

40
00:01:33,380 --> 00:01:37,490
information about the harness party

41
00:01:35,210 --> 00:01:39,079
shares so this information could be

42
00:01:37,490 --> 00:01:41,390
leaked to the adversary there are some

43
00:01:39,079 --> 00:01:43,339
side channels that it might have on the

44
00:01:41,390 --> 00:01:46,070
storage devices of the harness parties

45
00:01:43,340 --> 00:01:48,170
so the privacy property that I just

46
00:01:46,070 --> 00:01:50,329
mentioned does not give any guarantees

47
00:01:48,170 --> 00:01:52,490
under the stronger adversarial model and

48
00:01:50,329 --> 00:01:54,649
hence we n hence we need a stronger

49
00:01:52,490 --> 00:01:57,710
notion of security in order to capture

50
00:01:54,649 --> 00:01:59,270
this so this was done by two independent

51
00:01:57,710 --> 00:02:00,979
works one by Bentham who died at all

52
00:01:59,270 --> 00:02:03,829
which appeared in crypto last year and

53
00:02:00,979 --> 00:02:06,350
other by Goyle and kumar that appeared

54
00:02:03,829 --> 00:02:08,030
in stock 2018 and they introduced this

55
00:02:06,350 --> 00:02:10,609
notion called as leakage resilient

56
00:02:08,030 --> 00:02:12,110
secret sharing so leakage resilient

57
00:02:10,610 --> 00:02:14,000
secret sharing is just like any other

58
00:02:12,110 --> 00:02:16,310
threshold secret sharing satisfying the

59
00:02:14,000 --> 00:02:18,350
correctness property in addition the

60
00:02:16,310 --> 00:02:18,650
privacy property is now strengthened to

61
00:02:18,350 --> 00:02:21,439
some

62
00:02:18,650 --> 00:02:23,150
Calder's leakage resilience so this

63
00:02:21,439 --> 00:02:25,310
states that any adversary who's

64
00:02:23,150 --> 00:02:27,379
corrupting at most D minus one parties

65
00:02:25,310 --> 00:02:29,870
learns no information about the

66
00:02:27,379 --> 00:02:31,459
underlying secret message M even when

67
00:02:29,870 --> 00:02:33,950
given some bounded leakage from the

68
00:02:31,459 --> 00:02:35,900
other shares so let's see the formal

69
00:02:33,950 --> 00:02:37,790
definition so the formal definition is

70
00:02:35,900 --> 00:02:40,400
modeled as a game between an adversary

71
00:02:37,790 --> 00:02:42,798
and a challenger so the Challenger first

72
00:02:40,400 --> 00:02:44,720
generates the sharing of some secret

73
00:02:42,799 --> 00:02:47,659
message m and let's call the shares to

74
00:02:44,720 --> 00:02:50,540
be a search one to sh n the adversary

75
00:02:47,659 --> 00:02:52,849
now gives a set T which denotes the set

76
00:02:50,540 --> 00:02:55,280
of corrupted parties as well as some

77
00:02:52,849 --> 00:02:57,798
leakage functions F is to be applied on

78
00:02:55,280 --> 00:02:59,870
the harness party shares so we require

79
00:02:57,799 --> 00:03:02,780
two properties the first is that the

80
00:02:59,870 --> 00:03:04,909
size of the set T which denotes the

81
00:03:02,780 --> 00:03:08,030
number of corrupted parties that should

82
00:03:04,909 --> 00:03:09,950
be less than or equal to t minus 1 the

83
00:03:08,030 --> 00:03:12,290
second property is that the output

84
00:03:09,950 --> 00:03:15,768
length of this function fi should be

85
00:03:12,290 --> 00:03:18,048
bounded so notice that if we allow the

86
00:03:15,769 --> 00:03:21,260
output length of these functions to be

87
00:03:18,049 --> 00:03:23,150
arbitrary then the the functions output

88
00:03:21,260 --> 00:03:25,069
length could be as long as the share

89
00:03:23,150 --> 00:03:26,900
size and if the identity and the

90
00:03:25,069 --> 00:03:28,760
functions are just identity functions

91
00:03:26,900 --> 00:03:31,940
then the adversity gets all the

92
00:03:28,760 --> 00:03:34,519
information about the secret so here we

93
00:03:31,940 --> 00:03:36,799
cannot hope to give any sort of privacy

94
00:03:34,519 --> 00:03:38,480
and hence we need to restrict the output

95
00:03:36,799 --> 00:03:40,849
length of these leakage functions to

96
00:03:38,480 --> 00:03:43,010
have some bounded length however notice

97
00:03:40,849 --> 00:03:44,780
that we do not place any restrictions on

98
00:03:43,010 --> 00:03:46,399
the computational complexity of these

99
00:03:44,780 --> 00:03:48,709
leakage functions so these leakage

100
00:03:46,400 --> 00:03:51,290
functions could be arbitrary as long as

101
00:03:48,709 --> 00:03:53,569
they have a bounded output length so

102
00:03:51,290 --> 00:03:55,310
given this the Challenger now sends back

103
00:03:53,569 --> 00:03:57,589
the shares corresponding to the

104
00:03:55,310 --> 00:03:59,690
corrupted parties as well as the output

105
00:03:57,590 --> 00:04:02,690
of these leakage functions are played on

106
00:03:59,690 --> 00:04:05,030
the harness party shares so at the end

107
00:04:02,690 --> 00:04:07,129
we require the adversary given even this

108
00:04:05,030 --> 00:04:10,609
additional information not to learn any

109
00:04:07,129 --> 00:04:13,608
in for any information about the secret

110
00:04:10,609 --> 00:04:15,500
message M okay so this is the formal

111
00:04:13,609 --> 00:04:18,039
definition and let me give you a brief

112
00:04:15,500 --> 00:04:22,039
overview of the prior work in this area

113
00:04:18,039 --> 00:04:23,659
so guruswami and voters in 2017 showed

114
00:04:22,039 --> 00:04:25,729
that ramiz secret sharing when

115
00:04:23,659 --> 00:04:27,830
instantiated over finite fields with

116
00:04:25,729 --> 00:04:29,510
characteristic 2 is not leakage

117
00:04:27,830 --> 00:04:32,240
resilient that is they showed an

118
00:04:29,510 --> 00:04:34,969
explicit reconstruction strategy that

119
00:04:32,240 --> 00:04:36,919
allows an adversary to obtain the entire

120
00:04:34,970 --> 00:04:40,880
secret given some partial information

121
00:04:36,919 --> 00:04:43,250
from all the shares in interesting work

122
00:04:40,880 --> 00:04:45,500
Ben Hamada it all showed that Tommy's

123
00:04:43,250 --> 00:04:47,840
secret sharing when instantiated over a

124
00:04:45,500 --> 00:04:50,270
large prime order field is in fact

125
00:04:47,840 --> 00:04:51,919
leakage resilient for thresholds T

126
00:04:50,270 --> 00:04:56,659
greater than or equal to n minus n to

127
00:04:51,919 --> 00:04:58,190
the 1/4 and in the work of Goyle and

128
00:04:56,660 --> 00:04:59,720
Kumar they gave a different construction

129
00:04:58,190 --> 00:05:01,789
of liquid resilient secret sharing

130
00:04:59,720 --> 00:05:05,000
scheme for the constant thresholds case

131
00:05:01,789 --> 00:05:08,030
so as you can see there is a huge gap

132
00:05:05,000 --> 00:05:09,680
which is left so the first question that

133
00:05:08,030 --> 00:05:11,508
we would like to address is that can we

134
00:05:09,680 --> 00:05:13,840
construct a leakage resilient secret

135
00:05:11,509 --> 00:05:16,039
sharing scheme for all thresholds and

136
00:05:13,840 --> 00:05:18,289
the second question is that can be

137
00:05:16,039 --> 00:05:22,430
extended to for all monotone access

138
00:05:18,289 --> 00:05:25,550
structures so in this work we resolve

139
00:05:22,430 --> 00:05:28,460
this question so we show a compiler that

140
00:05:25,550 --> 00:05:30,500
takes any secret sharing scheme for a

141
00:05:28,460 --> 00:05:33,169
monotone access structure a with some

142
00:05:30,500 --> 00:05:34,789
rate R and it converts into it into a

143
00:05:33,169 --> 00:05:36,859
leakage resilient secret sharing scheme

144
00:05:34,789 --> 00:05:39,349
for the same access truck sure with the

145
00:05:36,860 --> 00:05:41,360
following properties the first property

146
00:05:39,349 --> 00:05:43,340
is that the rate of the resultant secret

147
00:05:41,360 --> 00:05:45,289
sharing scheme is only a constant

148
00:05:43,340 --> 00:05:47,508
multiplicative factor worse than the

149
00:05:45,289 --> 00:05:49,310
rate of the original sharing scheme that

150
00:05:47,509 --> 00:05:51,620
is the rate of the leakage resilience

151
00:05:49,310 --> 00:05:54,349
secret sharing is our over three point

152
00:05:51,620 --> 00:05:56,570
zero one and the second property is that

153
00:05:54,349 --> 00:05:58,940
the leakage resilience rate which is

154
00:05:56,570 --> 00:06:01,130
defined to be the ratio of the number of

155
00:05:58,940 --> 00:06:03,800
bits leak to the sheer size can be made

156
00:06:01,130 --> 00:06:05,840
to be arbitrarily close to one so this

157
00:06:03,800 --> 00:06:09,770
in turn implies that even if we leak

158
00:06:05,840 --> 00:06:14,179
almost 99% of the share size we can show

159
00:06:09,770 --> 00:06:17,030
we can prove security and in the next

160
00:06:14,180 --> 00:06:19,039
talk you will hear from mark about about

161
00:06:17,030 --> 00:06:23,359
their construction which also gives such

162
00:06:19,039 --> 00:06:25,729
a compiler okay so as an application of

163
00:06:23,360 --> 00:06:27,560
our compiler we show how to construct a

164
00:06:25,729 --> 00:06:29,270
constant rate not valuable secret

165
00:06:27,560 --> 00:06:33,469
sharing scheme in the information

166
00:06:29,270 --> 00:06:35,330
theoretic setting so as you heard in the

167
00:06:33,469 --> 00:06:37,370
first talk non valuable secret sharing

168
00:06:35,330 --> 00:06:39,139
is just like any other threshold secret

169
00:06:37,370 --> 00:06:40,909
sharing scheme that is it satisfies the

170
00:06:39,139 --> 00:06:43,669
correctness and the secrecy properties

171
00:06:40,909 --> 00:06:45,409
it also satisfies this additional non

172
00:06:43,669 --> 00:06:46,000
malleability property which roughly

173
00:06:45,409 --> 00:06:48,400
states

174
00:06:46,000 --> 00:06:50,860
that any tampering attack on the shares

175
00:06:48,400 --> 00:06:54,340
either preserves the original secret or

176
00:06:50,860 --> 00:06:56,230
completely destroys it so this notion

177
00:06:54,340 --> 00:06:58,840
was introduced in the work of Goa and

178
00:06:56,230 --> 00:07:01,870
Kumar in 2018 and it can be thought of

179
00:06:58,840 --> 00:07:04,929
as a generalization of this notion of

180
00:07:01,870 --> 00:07:06,550
non malleable codes and a question that

181
00:07:04,930 --> 00:07:08,530
was left open in their work was to

182
00:07:06,550 --> 00:07:10,360
construct a constant rate non malleable

183
00:07:08,530 --> 00:07:13,599
secret sharing in the information

184
00:07:10,360 --> 00:07:15,820
theoretic setting so what we show in

185
00:07:13,600 --> 00:07:18,010
this work is that if we plug in our leak

186
00:07:15,820 --> 00:07:19,690
is resilient secret sharing with the non

187
00:07:18,010 --> 00:07:22,090
malleable secret sharing compiler of

188
00:07:19,690 --> 00:07:24,340
Badri Narayan and Mises that appeared in

189
00:07:22,090 --> 00:07:26,140
Europe this year we can in fact get a

190
00:07:24,340 --> 00:07:29,169
constant rate threshold non-merits

191
00:07:26,140 --> 00:07:32,590
secret sharing for thresholds T greater

192
00:07:29,169 --> 00:07:36,370
than or equal to 4 and in the next talk

193
00:07:32,590 --> 00:07:38,080
you'll also hear about giving a stronger

194
00:07:36,370 --> 00:07:39,640
notion of non valuable secret sharing

195
00:07:38,080 --> 00:07:41,680
from this leak a resilient secret

196
00:07:39,640 --> 00:07:46,690
sharing and I hope that mark will be

197
00:07:41,680 --> 00:07:49,570
able to give these details so as another

198
00:07:46,690 --> 00:07:51,760
application we also give a leakage

199
00:07:49,570 --> 00:07:53,590
tolerant multi-party computation for

200
00:07:51,760 --> 00:07:55,510
general interaction patterns but

201
00:07:53,590 --> 00:07:56,979
unfortunately I wouldn't have time to go

202
00:07:55,510 --> 00:07:59,890
into the details and I would encourage

203
00:07:56,979 --> 00:08:02,349
you to look into our paper ok so in the

204
00:07:59,890 --> 00:08:04,750
rest of the talk I will focus on the

205
00:08:02,350 --> 00:08:07,150
threshold case I will give you a

206
00:08:04,750 --> 00:08:09,370
construction of leaky resilient secrets

207
00:08:07,150 --> 00:08:12,880
sharing that has a constant rate but the

208
00:08:09,370 --> 00:08:16,570
rate would be a small it would be worse

209
00:08:12,880 --> 00:08:19,210
than the promised by a compiler and also

210
00:08:16,570 --> 00:08:20,950
the leak is resilience rate that our

211
00:08:19,210 --> 00:08:24,130
construction satisfied would be worse

212
00:08:20,950 --> 00:08:26,530
but than the optimum of one but it's

213
00:08:24,130 --> 00:08:28,419
still a constant so this is these

214
00:08:26,530 --> 00:08:32,679
simplifications are just for the purpose

215
00:08:28,419 --> 00:08:34,750
of this talk ok so so let's start with

216
00:08:32,679 --> 00:08:38,140
the construction so let's say that we

217
00:08:34,750 --> 00:08:40,089
want to secret share a message M so the

218
00:08:38,140 --> 00:08:44,260
first step in a construction is to just

219
00:08:40,089 --> 00:08:47,350
split this message m into n shares using

220
00:08:44,260 --> 00:08:49,780
Shamir secretary so here we do not

221
00:08:47,350 --> 00:08:51,220
assume any leakage resilience property

222
00:08:49,780 --> 00:08:51,959
from the underlying Shammi secret

223
00:08:51,220 --> 00:08:54,880
sharing scheme

224
00:08:51,960 --> 00:09:00,000
ok so let's assume that each of these

225
00:08:54,880 --> 00:09:03,210
shammy shares is in a finite field f the

226
00:09:00,000 --> 00:09:06,620
step is to choose a random vector R from

227
00:09:03,210 --> 00:09:10,130
F to the K where K is some constant

228
00:09:06,620 --> 00:09:13,800
ok so once you choose this are you then

229
00:09:10,130 --> 00:09:16,380
choose a random vector l1 from F to the

230
00:09:13,800 --> 00:09:18,020
K such that the India product of L 1

231
00:09:16,380 --> 00:09:21,630
with this R is equal to the first

232
00:09:18,020 --> 00:09:23,939
jamesha is this one then you do this for

233
00:09:21,630 --> 00:09:26,460
the next one as well so you choose a

234
00:09:23,940 --> 00:09:28,740
random vector l2 such that the inner

235
00:09:26,460 --> 00:09:30,990
product of l2 with the same R is the

236
00:09:28,740 --> 00:09:33,810
second shemesh RSS 2 and so on so you

237
00:09:30,990 --> 00:09:35,330
choose L 3 up to L n such that the inner

238
00:09:33,810 --> 00:09:39,810
product with our as the corresponding

239
00:09:35,330 --> 00:09:42,870
Shama shares okay so this you obtain L 1

240
00:09:39,810 --> 00:09:47,160
2 L n and this is the second step so the

241
00:09:42,870 --> 00:09:51,150
final step is to take this vector R and

242
00:09:47,160 --> 00:09:53,219
you then split it into in shares r1 to

243
00:09:51,150 --> 00:09:55,680
RN using Shammi secret sharing now over

244
00:09:53,220 --> 00:09:58,740
F to the K okay so the share

245
00:09:55,680 --> 00:10:03,390
corresponding to riot party will be Li

246
00:09:58,740 --> 00:10:05,880
comma RA ok so this is the secret

247
00:10:03,390 --> 00:10:08,640
sharing scheme so how do we reconstruct

248
00:10:05,880 --> 00:10:10,530
you first given any t-shirts you can use

249
00:10:08,640 --> 00:10:12,750
the Shamy secret sharing to reconstruct

250
00:10:10,530 --> 00:10:15,290
this R then you take the inner product

251
00:10:12,750 --> 00:10:18,810
with the corresponding Allies to get the

252
00:10:15,290 --> 00:10:21,599
T shammy shares of N and then you use

253
00:10:18,810 --> 00:10:24,270
the reconstruction of Shamir again to

254
00:10:21,600 --> 00:10:25,620
get the secret message so this is how

255
00:10:24,270 --> 00:10:27,300
the reconstruction works so the

256
00:10:25,620 --> 00:10:30,300
interesting point is that how do we show

257
00:10:27,300 --> 00:10:32,609
that traitors in fact secure against in

258
00:10:30,300 --> 00:10:36,060
the leakage model so for the purpose of

259
00:10:32,610 --> 00:10:38,370
the stock let's assume that the the

260
00:10:36,060 --> 00:10:40,410
final t minus 1 shares are revealed in

261
00:10:38,370 --> 00:10:42,540
the clear this corresponds to the set T

262
00:10:40,410 --> 00:10:44,400
and there is some arbitrary leakage

263
00:10:42,540 --> 00:10:46,170
function acting on the rest of the

264
00:10:44,400 --> 00:10:49,560
shares so this is this for the purpose

265
00:10:46,170 --> 00:10:53,310
of this talk so the proof actually

266
00:10:49,560 --> 00:10:55,560
follows from several observations so the

267
00:10:53,310 --> 00:10:59,160
first observation is that each

268
00:10:55,560 --> 00:11:02,099
individual leakage function f does not

269
00:10:59,160 --> 00:11:04,589
learn any information about the secret

270
00:11:02,100 --> 00:11:07,170
vector R that was chosen in the sharing

271
00:11:04,589 --> 00:11:10,380
fields so to see why this is the case

272
00:11:07,170 --> 00:11:13,050
notice that each of these F is just

273
00:11:10,380 --> 00:11:13,750
looks at one of these our eyes and since

274
00:11:13,050 --> 00:11:16,060
R is

275
00:11:13,750 --> 00:11:18,700
in fact a chemise share of our it hides

276
00:11:16,060 --> 00:11:20,829
all the information about our so one can

277
00:11:18,700 --> 00:11:24,910
roughly think about the leakage function

278
00:11:20,830 --> 00:11:27,100
acting solely on the vector allies so

279
00:11:24,910 --> 00:11:30,579
this is the first observation that the

280
00:11:27,100 --> 00:11:34,000
fi of la cama ra if i does not get any

281
00:11:30,580 --> 00:11:35,950
information about our so the second

282
00:11:34,000 --> 00:11:38,860
observation is that the output of this

283
00:11:35,950 --> 00:11:41,380
leakage function fi of alaykum RI hides

284
00:11:38,860 --> 00:11:44,700
all information about the Shamy share

285
00:11:41,380 --> 00:11:47,170
SSI case or to see why this is the case

286
00:11:44,700 --> 00:11:50,320
notice that inner product acts as a

287
00:11:47,170 --> 00:11:52,030
strong to source extractor so even given

288
00:11:50,320 --> 00:11:54,400
some bounded leakage on one of the

289
00:11:52,030 --> 00:11:57,910
sources here one of the sources is real

290
00:11:54,400 --> 00:12:00,850
ly the inner product of Li with the

291
00:11:57,910 --> 00:12:03,280
other source as which is R has

292
00:12:00,850 --> 00:12:06,100
sufficient entropy so this can be

293
00:12:03,280 --> 00:12:08,290
formalized to show that fi of la cama RI

294
00:12:06,100 --> 00:12:12,010
hides all information about the

295
00:12:08,290 --> 00:12:13,900
underlying jamesha SSI so this is the

296
00:12:12,010 --> 00:12:15,880
second observation and the third

297
00:12:13,900 --> 00:12:17,829
observation is that the only Xiaomi

298
00:12:15,880 --> 00:12:20,020
shares the diverse area gets access to

299
00:12:17,830 --> 00:12:22,900
are those which correspond to which

300
00:12:20,020 --> 00:12:25,480
revealed in the clear and since there

301
00:12:22,900 --> 00:12:28,689
are at most T minus one revealed shares

302
00:12:25,480 --> 00:12:31,150
though it follows from the privacy of

303
00:12:28,690 --> 00:12:33,970
the Shamy secret sharing of M that these

304
00:12:31,150 --> 00:12:37,240
t minus one shares hide information

305
00:12:33,970 --> 00:12:38,589
about so this is the rough intuition

306
00:12:37,240 --> 00:12:40,750
behind the proof of course there are

307
00:12:38,589 --> 00:12:42,760
lots of subtleties involved and I would

308
00:12:40,750 --> 00:12:47,470
encourage you to look into the paper for

309
00:12:42,760 --> 00:12:50,650
the exact details so to conclude the

310
00:12:47,470 --> 00:12:52,630
main latina paper is to give a compiler

311
00:12:50,650 --> 00:12:54,670
that converts a secret sharing scheme

312
00:12:52,630 --> 00:12:56,080
for a monotone access structure a to a

313
00:12:54,670 --> 00:12:58,360
leak a resilient secret sharing scheme

314
00:12:56,080 --> 00:13:00,370
for the same access structure with the

315
00:12:58,360 --> 00:13:03,790
following property so it has a constant

316
00:13:00,370 --> 00:13:06,990
factor degradation in the rate and it

317
00:13:03,790 --> 00:13:10,449
has optimal leakage resilience rate and

318
00:13:06,990 --> 00:13:12,160
we give applications of to constructing

319
00:13:10,450 --> 00:13:13,270
constant rate non valuable secret

320
00:13:12,160 --> 00:13:16,630
sharing in the information theoretic

321
00:13:13,270 --> 00:13:18,730
setting as well as application to

322
00:13:16,630 --> 00:13:20,650
constructing leakage tolerant MPC

323
00:13:18,730 --> 00:13:24,339
protocols for restricted interaction

324
00:13:20,650 --> 00:13:26,439
patterns and in a concurrent and an

325
00:13:24,339 --> 00:13:27,520
independent work Kumar Mecca and Sakai I

326
00:13:26,440 --> 00:13:29,440
gave a strong

327
00:13:27,520 --> 00:13:31,180
the notion of liquid resilience property

328
00:13:29,440 --> 00:13:33,850
and they actually gave interesting

329
00:13:31,180 --> 00:13:37,719
constructions based on connections to

330
00:13:33,850 --> 00:13:39,730
communication complexity so an

331
00:13:37,720 --> 00:13:42,190
interesting open question would be to

332
00:13:39,730 --> 00:13:44,730
find other applications of leakage the

333
00:13:42,190 --> 00:13:48,120
resilient secret sharing scheme and

334
00:13:44,730 --> 00:13:53,250
that's it thank you for your attention

335
00:13:48,120 --> 00:13:55,180
[Applause]

336
00:13:53,250 --> 00:13:57,690
Marx Lincoln will continue the

337
00:13:55,180 --> 00:13:57,689
presentation

338
00:14:18,089 --> 00:14:24,940
okay alright so I'm going to present her

339
00:14:22,260 --> 00:14:27,069
our paper which deals with a very

340
00:14:24,940 --> 00:14:28,450
similar topic to the paper that we just

341
00:14:27,070 --> 00:14:30,940
heard about so this is stronger leakage

342
00:14:28,450 --> 00:14:32,440
resilient and non malleable secret

343
00:14:30,940 --> 00:14:33,910
sharing for general access structures

344
00:14:32,440 --> 00:14:36,190
and this is a paper a joint work with

345
00:14:33,910 --> 00:14:38,350
debisch Agarwal even dumb guard yes /

346
00:14:36,190 --> 00:14:39,459
boos Nielsen Macchio Bronski Eric Previn

347
00:14:38,350 --> 00:14:46,029
- Joe

348
00:14:39,459 --> 00:14:47,439
Ribeiro and me and yes so we like

349
00:14:46,029 --> 00:14:48,640
already heard like why does not involve

350
00:14:47,440 --> 00:14:50,700
a secret sharing what a sneaky chisel in

351
00:14:48,640 --> 00:14:53,020
secret sharing in the previous talk so

352
00:14:50,700 --> 00:14:55,959
I'm kind of gonna focus on the things

353
00:14:53,020 --> 00:14:57,579
that you didn't hear so much yet so

354
00:14:55,959 --> 00:15:00,399
nothing about secret sharing as here

355
00:14:57,580 --> 00:15:01,810
before was introduced quite recently but

356
00:15:00,399 --> 00:15:03,820
like a lot of papers deal with this

357
00:15:01,810 --> 00:15:05,589
problem and the ideas again that you

358
00:15:03,820 --> 00:15:08,520
have some file and your secret share

359
00:15:05,589 --> 00:15:11,649
like you compute a bunch of shares and

360
00:15:08,520 --> 00:15:13,899
now the adversary can somehow tamper

361
00:15:11,649 --> 00:15:16,420
with each file independently with each

362
00:15:13,899 --> 00:15:19,660
share independently and what we would

363
00:15:16,420 --> 00:15:21,729
like is that the reconstructed secret

364
00:15:19,660 --> 00:15:23,410
from the temperatures is either the same

365
00:15:21,730 --> 00:15:25,480
as it was before or it is completely

366
00:15:23,410 --> 00:15:26,770
unrelated okay so we want to prevent

367
00:15:25,480 --> 00:15:30,850
that a distance formed into related

368
00:15:26,770 --> 00:15:32,740
message and the first notion dealt with

369
00:15:30,850 --> 00:15:35,529
the case of a single tempering and like

370
00:15:32,740 --> 00:15:38,920
a minimal reconstruction set and what we

371
00:15:35,529 --> 00:15:40,630
do in this work is that we extend this

372
00:15:38,920 --> 00:15:43,270
non-availability notion to something I

373
00:15:40,630 --> 00:15:47,110
recall concurrent reconstruction and the

374
00:15:43,270 --> 00:15:51,040
idea is that in this case the adversary

375
00:15:47,110 --> 00:15:52,839
cannot specify like one set of tempering

376
00:15:51,040 --> 00:15:54,189
not one vector of tempering functions

377
00:15:52,839 --> 00:15:57,670
but several vectors of tempering

378
00:15:54,190 --> 00:16:00,010
functions and so he does this in a non

379
00:15:57,670 --> 00:16:01,630
adaptive way which is in contrast to the

380
00:16:00,010 --> 00:16:03,640
paper that Antonia presented so here he

381
00:16:01,630 --> 00:16:08,410
like has to specify all of the vectors

382
00:16:03,640 --> 00:16:10,390
at once and then the secret sharing at

383
00:16:08,410 --> 00:16:13,060
the top will basically be thrown into

384
00:16:10,390 --> 00:16:16,720
these tempering functions and then even

385
00:16:13,060 --> 00:16:18,250
we can use different reconstruction sets

386
00:16:16,720 --> 00:16:21,130
here which are again chosen on

387
00:16:18,250 --> 00:16:22,420
adaptively by the adversary we

388
00:16:21,130 --> 00:16:24,730
reconstruct with their for your

389
00:16:22,420 --> 00:16:26,740
consumption sets it gets different kind

390
00:16:24,730 --> 00:16:28,950
of corrupted secrets and again we want

391
00:16:26,740 --> 00:16:32,100
to have the property that all of those

392
00:16:28,950 --> 00:16:33,660
are so that for any one of those secrets

393
00:16:32,100 --> 00:16:35,339
it's either the same one as it was

394
00:16:33,660 --> 00:16:40,350
before or it is completely unrelated

395
00:16:35,339 --> 00:16:43,700
okay and yes okay

396
00:16:40,350 --> 00:16:46,110
so what we do in our paper is basically

397
00:16:43,700 --> 00:16:47,670
so kind of abstractly speaking like we

398
00:16:46,110 --> 00:16:49,050
construct like leakage resilience secret

399
00:16:47,670 --> 00:16:51,839
sharing construct not malleable secret

400
00:16:49,050 --> 00:16:53,639
sharing but the general idea of how to

401
00:16:51,839 --> 00:16:55,230
construct all of them follow us the same

402
00:16:53,639 --> 00:16:56,490
kind of blueprint so what we will end up

403
00:16:55,230 --> 00:16:58,410
doing is we will take a secret sharing

404
00:16:56,490 --> 00:17:00,060
scheme and we will take some encoding

405
00:16:58,410 --> 00:17:02,010
function and we will like mingle them

406
00:17:00,060 --> 00:17:03,420
together and then depending on which

407
00:17:02,010 --> 00:17:04,949
encoding function you plug in you will

408
00:17:03,420 --> 00:17:06,240
get either leakage resilience we will

409
00:17:04,949 --> 00:17:08,459
get non mail ability so it's kind of

410
00:17:06,240 --> 00:17:12,209
like a general simple approach of how to

411
00:17:08,459 --> 00:17:13,919
do these things yes we get leakage

412
00:17:12,209 --> 00:17:15,089
resilience so and all of this is for

413
00:17:13,919 --> 00:17:18,299
general access structures and with

414
00:17:15,089 --> 00:17:19,889
information theoretic security and yes

415
00:17:18,299 --> 00:17:22,319
our non noble secret sharing will be for

416
00:17:19,890 --> 00:17:25,949
three monotone general X structures so

417
00:17:22,319 --> 00:17:29,659
that means that any authorized set has

418
00:17:25,949 --> 00:17:31,710
at least size three and then we use

419
00:17:29,660 --> 00:17:33,660
again basically the same approach to

420
00:17:31,710 --> 00:17:35,850
show that you can also build something

421
00:17:33,660 --> 00:17:37,650
which we'll call leakage or non

422
00:17:35,850 --> 00:17:39,959
malleable threshold signatures which are

423
00:17:37,650 --> 00:17:42,299
like skim over at towards the end of the

424
00:17:39,960 --> 00:17:44,790
talk and in comparison to the previous

425
00:17:42,299 --> 00:17:45,418
talk what we basically have is that both

426
00:17:44,790 --> 00:17:46,710
um

427
00:17:45,419 --> 00:17:48,000
so both the non mailbox you could

428
00:17:46,710 --> 00:17:49,770
sharing and to leakage resilience equal

429
00:17:48,000 --> 00:17:52,140
sharing that we construct has a signal

430
00:17:49,770 --> 00:17:53,820
like a worse rate then the constructions

431
00:17:52,140 --> 00:17:55,470
from the previous talk but in comparison

432
00:17:53,820 --> 00:17:57,120
to previous talk we achieve a stronger

433
00:17:55,470 --> 00:17:58,530
security notion for our non malleable

434
00:17:57,120 --> 00:18:01,070
secret sharing so this is kind of how

435
00:17:58,530 --> 00:18:04,530
the two papers compliment each other

436
00:18:01,070 --> 00:18:06,540
okay so kind of on a very high level

437
00:18:04,530 --> 00:18:10,260
what we have is we're given some secret

438
00:18:06,540 --> 00:18:11,700
sharing for some axis structure and what

439
00:18:10,260 --> 00:18:14,030
we would like now to do is we would like

440
00:18:11,700 --> 00:18:16,110
to take those shares and somehow

441
00:18:14,030 --> 00:18:17,520
re-encode them into a new share into a

442
00:18:16,110 --> 00:18:18,899
new share such that we get like the

443
00:18:17,520 --> 00:18:23,580
leakage resilience and non mobility

444
00:18:18,900 --> 00:18:25,410
properties and what we yes and what we

445
00:18:23,580 --> 00:18:27,030
want what we will basically do is think

446
00:18:25,410 --> 00:18:29,130
of like we have some encoding function

447
00:18:27,030 --> 00:18:31,200
which takes each one of those shares and

448
00:18:29,130 --> 00:18:33,270
it will produce two different shares

449
00:18:31,200 --> 00:18:34,590
okay and then again we will plug in

450
00:18:33,270 --> 00:18:37,049
different encoding functions to get

451
00:18:34,590 --> 00:18:39,090
different things so what we simply do is

452
00:18:37,049 --> 00:18:41,100
we will take each of those shares and we

453
00:18:39,090 --> 00:18:42,310
will split it into two shares with this

454
00:18:41,100 --> 00:18:44,379
encoding function

455
00:18:42,310 --> 00:18:47,470
and now we will redistribute the shares

456
00:18:44,380 --> 00:18:49,180
accordingly as follow us so originally

457
00:18:47,470 --> 00:18:50,620
the first share was this and now the new

458
00:18:49,180 --> 00:18:52,840
first share will be this vector of

459
00:18:50,620 --> 00:18:55,510
shares okay so what does this it what is

460
00:18:52,840 --> 00:18:57,159
this it will be the green one of the

461
00:18:55,510 --> 00:19:00,310
first share and then all of the other

462
00:18:57,160 --> 00:19:01,660
red ones okay and for the second share

463
00:19:00,310 --> 00:19:03,399
it will be like the green one of the

464
00:19:01,660 --> 00:19:04,630
second one and then all of the red ones

465
00:19:03,400 --> 00:19:08,680
from the other ones and we'll continue

466
00:19:04,630 --> 00:19:10,450
doing this now if we want to reconstruct

467
00:19:08,680 --> 00:19:14,020
say we have this first and the second

468
00:19:10,450 --> 00:19:16,090
share then we can combine those two and

469
00:19:14,020 --> 00:19:18,790
those two to reconstruct the original

470
00:19:16,090 --> 00:19:21,580
two shares and then if this is kind of

471
00:19:18,790 --> 00:19:23,200
like if the exit structure allows these

472
00:19:21,580 --> 00:19:24,669
two shares to reconstruct the secret and

473
00:19:23,200 --> 00:19:27,820
the whole construction will kind of

474
00:19:24,670 --> 00:19:30,280
reconstruct the secret okay and note

475
00:19:27,820 --> 00:19:31,780
that kind of if this encoding in some

476
00:19:30,280 --> 00:19:34,000
sense requires that you definitely need

477
00:19:31,780 --> 00:19:36,700
both of those parts to reconstruct what

478
00:19:34,000 --> 00:19:37,780
you encode it then for the third share

479
00:19:36,700 --> 00:19:40,360
for the fourth share for the future

480
00:19:37,780 --> 00:19:42,790
you'd never have the green part okay so

481
00:19:40,360 --> 00:19:44,620
you like they know exactly they can

482
00:19:42,790 --> 00:19:50,110
exactly decode the two shares that they

483
00:19:44,620 --> 00:19:52,629
are supposed to decode yes and the other

484
00:19:50,110 --> 00:19:54,490
important thing is that every one of the

485
00:19:52,630 --> 00:19:57,460
green shares is held exactly by one

486
00:19:54,490 --> 00:19:58,930
party okay so yeah it's a very obvious

487
00:19:57,460 --> 00:20:02,230
statement it's one party that has

488
00:19:58,930 --> 00:20:05,440
h-bridge here so now the question is

489
00:20:02,230 --> 00:20:06,870
what do we do what encoding do we use to

490
00:20:05,440 --> 00:20:09,370
obtain different secret sharing scheme

491
00:20:06,870 --> 00:20:10,810
so let's start with non leakage

492
00:20:09,370 --> 00:20:13,149
resilient secret sharing and it's in the

493
00:20:10,810 --> 00:20:15,040
same model as before so we basically can

494
00:20:13,150 --> 00:20:18,520
independently leak from each share and

495
00:20:15,040 --> 00:20:20,470
we would like to ensure that the secret

496
00:20:18,520 --> 00:20:23,080
remains hidden even when the adverse

497
00:20:20,470 --> 00:20:25,090
receives the leakage okay so what we

498
00:20:23,080 --> 00:20:27,460
will use is basically a strong seeded

499
00:20:25,090 --> 00:20:29,740
extractor which is a primitive that it

500
00:20:27,460 --> 00:20:32,980
takes this like a uniformly random seed

501
00:20:29,740 --> 00:20:36,430
as input some high min entropy string so

502
00:20:32,980 --> 00:20:37,720
yeah that has a lot of entropy and when

503
00:20:36,430 --> 00:20:40,630
you apply the extractor you will get

504
00:20:37,720 --> 00:20:44,260
something that looks uniform or as close

505
00:20:40,630 --> 00:20:46,440
to uniform okay and the strong here

506
00:20:44,260 --> 00:20:49,000
means that even if the seed is revealed

507
00:20:46,440 --> 00:20:51,940
this still looks close to uniformly

508
00:20:49,000 --> 00:20:53,920
random and another property that we will

509
00:20:51,940 --> 00:20:56,140
need for our construction is that this

510
00:20:53,920 --> 00:20:58,330
extractor also has something

511
00:20:56,140 --> 00:21:00,700
called proficient preimage sampling so

512
00:20:58,330 --> 00:21:02,740
that means that if I have something here

513
00:21:00,700 --> 00:21:05,230
I can efficiently find some uniformly

514
00:21:02,740 --> 00:21:07,030
random inputs or close to uniformly

515
00:21:05,230 --> 00:21:08,410
random inputs that will if the

516
00:21:07,030 --> 00:21:12,700
extractors applied to it give me that

517
00:21:08,410 --> 00:21:15,310
output okay and what we now simply do is

518
00:21:12,700 --> 00:21:18,160
to encode one of those original secret

519
00:21:15,310 --> 00:21:20,310
shares we will apply this inverse of the

520
00:21:18,160 --> 00:21:22,720
extractor to obtain these two things and

521
00:21:20,310 --> 00:21:24,100
so basically one of those will be the

522
00:21:22,720 --> 00:21:27,070
seed and one of those will be the high

523
00:21:24,100 --> 00:21:28,959
mean entropy sample and like as we've

524
00:21:27,070 --> 00:21:31,330
seen from the previous samples from the

525
00:21:28,960 --> 00:21:32,950
previous previous slides the Jade share

526
00:21:31,330 --> 00:21:36,580
will then be kind of a bunch of the red

527
00:21:32,950 --> 00:21:38,800
ones and one of the green ones this will

528
00:21:36,580 --> 00:21:39,909
compose the new share and if we look

529
00:21:38,800 --> 00:21:42,580
what this means here is we will

530
00:21:39,910 --> 00:21:45,550
basically have one of those things will

531
00:21:42,580 --> 00:21:47,169
be this long sample and the rest of

532
00:21:45,550 --> 00:21:49,060
those will be the short seeds which will

533
00:21:47,170 --> 00:21:50,350
in total compose the new share of our

534
00:21:49,060 --> 00:21:54,520
leakage resilient secret sharing scheme

535
00:21:50,350 --> 00:21:56,490
and the intuition why this is a leakage

536
00:21:54,520 --> 00:21:58,660
resilient secret sharing scheme is that

537
00:21:56,490 --> 00:22:00,970
even if the adversary gets to ligue

538
00:21:58,660 --> 00:22:02,860
pretty much all of the red shares as I

539
00:22:00,970 --> 00:22:04,450
said before the green share is only held

540
00:22:02,860 --> 00:22:06,610
by one part like each of the green

541
00:22:04,450 --> 00:22:08,230
shares is only held by one party okay

542
00:22:06,610 --> 00:22:11,290
and what this just says is that this

543
00:22:08,230 --> 00:22:13,780
just has to be some high mean entropy

544
00:22:11,290 --> 00:22:16,090
sample so that means that if after

545
00:22:13,780 --> 00:22:18,910
leaking some of its bits there's still a

546
00:22:16,090 --> 00:22:21,040
lot of entropy left then she cannot do

547
00:22:18,910 --> 00:22:27,340
anything based on the properties of the

548
00:22:21,040 --> 00:22:29,920
extractor okay and we all like by

549
00:22:27,340 --> 00:22:31,540
plugging in a different encoding scheme

550
00:22:29,920 --> 00:22:32,860
we almost immediately get non-male the

551
00:22:31,540 --> 00:22:35,950
secret sharing we just need to make some

552
00:22:32,860 --> 00:22:38,290
small tweaks so the one thing that we

553
00:22:35,950 --> 00:22:40,870
need to prevent if we if we want to have

554
00:22:38,290 --> 00:22:42,430
non bailable secret sharing is that in

555
00:22:40,870 --> 00:22:44,409
the construction that I said before

556
00:22:42,430 --> 00:22:45,760
whatever encoding scheme we use it

557
00:22:44,410 --> 00:22:47,410
doesn't prevent that the adverse we

558
00:22:45,760 --> 00:22:49,900
could just override a share with some

559
00:22:47,410 --> 00:22:51,670
default value okay so in this case the

560
00:22:49,900 --> 00:22:54,340
adverse you could just go and over

561
00:22:51,670 --> 00:22:57,300
eyes.the the second share here with some

562
00:22:54,340 --> 00:22:59,740
default value and this could potentially

563
00:22:57,300 --> 00:23:01,870
lead to a reconstruction here that

564
00:22:59,740 --> 00:23:05,560
reconstructs a related secret to get

565
00:23:01,870 --> 00:23:09,429
like if you want to think of a very

566
00:23:05,560 --> 00:23:10,020
simple example think of a modified samir

567
00:23:09,430 --> 00:23:11,760
secret sharing

568
00:23:10,020 --> 00:23:14,510
okay like imagine your Shamir secret

569
00:23:11,760 --> 00:23:17,610
sharing and you are given an on minimal

570
00:23:14,510 --> 00:23:18,629
authorized set now what what this

571
00:23:17,610 --> 00:23:20,669
modified sham your secret sharing scheme

572
00:23:18,630 --> 00:23:23,070
could do is good could say okay I will

573
00:23:20,670 --> 00:23:25,500
take a minimal authorized set and

574
00:23:23,070 --> 00:23:27,600
reconstruct the secret and then I will

575
00:23:25,500 --> 00:23:29,430
have a special kind of share and for

576
00:23:27,600 --> 00:23:32,280
every appearance of this special share I

577
00:23:29,430 --> 00:23:34,380
will add class one to the reconstructed

578
00:23:32,280 --> 00:23:35,610
secret so in this case if I had this

579
00:23:34,380 --> 00:23:38,160
kind of artificial secret sharing scheme

580
00:23:35,610 --> 00:23:40,530
I could override this thing here with

581
00:23:38,160 --> 00:23:43,260
this special share and this would result

582
00:23:40,530 --> 00:23:43,980
in this constructing a related secret

583
00:23:43,260 --> 00:23:45,330
okay

584
00:23:43,980 --> 00:23:47,130
so this is kind of an artificial example

585
00:23:45,330 --> 00:23:50,010
but the compiler has to deal with all

586
00:23:47,130 --> 00:23:51,450
kinds of secret sharing scheme but this

587
00:23:50,010 --> 00:23:53,460
problem is solved in a very simple

588
00:23:51,450 --> 00:23:55,470
fashion so we just add a nonce to every

589
00:23:53,460 --> 00:23:56,670
share so now rather than encoding the

590
00:23:55,470 --> 00:23:58,890
first share the second share and so on

591
00:23:56,670 --> 00:24:00,900
we just pick an additional knowns are

592
00:23:58,890 --> 00:24:02,370
and then this encoding will basically be

593
00:24:00,900 --> 00:24:04,380
the first share concatenated with our

594
00:24:02,370 --> 00:24:06,330
and so on and the reconstruction

595
00:24:04,380 --> 00:24:09,330
function is modified accordingly that it

596
00:24:06,330 --> 00:24:10,830
reconstructs the blue shares and if the

597
00:24:09,330 --> 00:24:12,419
nonces are not consistent and it will

598
00:24:10,830 --> 00:24:14,310
abort and otherwise it will reconstruct

599
00:24:12,420 --> 00:24:16,410
the secret because now if you were to

600
00:24:14,310 --> 00:24:18,360
override a share you would need to

601
00:24:16,410 --> 00:24:20,850
somehow know R which you don't so this

602
00:24:18,360 --> 00:24:25,080
is kind of why the this nonce prevents

603
00:24:20,850 --> 00:24:26,459
this attack and I won't go into details

604
00:24:25,080 --> 00:24:28,679
like what encoding scheme you have to

605
00:24:26,460 --> 00:24:30,090
use but basically it's similar to the

606
00:24:28,680 --> 00:24:32,310
encoding scheme that I just showed you

607
00:24:30,090 --> 00:24:34,470
for the leakage resilient secret sharing

608
00:24:32,310 --> 00:24:36,360
just that it's kind of it has kind of

609
00:24:34,470 --> 00:24:37,320
some extra non-male ability properties

610
00:24:36,360 --> 00:24:39,120
and then these non malleability

611
00:24:37,320 --> 00:24:41,220
properties directly transferred to the

612
00:24:39,120 --> 00:24:45,360
secret sharing scheme and that we

613
00:24:41,220 --> 00:24:47,490
construct and then pretty much the same

614
00:24:45,360 --> 00:24:49,320
trick that like we did throw it like

615
00:24:47,490 --> 00:24:51,360
this talked so far you can also play to

616
00:24:49,320 --> 00:24:52,590
get something that we call fresh leakage

617
00:24:51,360 --> 00:24:54,870
resilient or non malleable threshold

618
00:24:52,590 --> 00:24:56,370
signatures so what you just do is so in

619
00:24:54,870 --> 00:24:59,550
a threshold signature scheme you have a

620
00:24:56,370 --> 00:25:02,040
key pair and they the key is split into

621
00:24:59,550 --> 00:25:04,110
a bunch of secret like key shares and

622
00:25:02,040 --> 00:25:06,090
all of those key shares can be used to

623
00:25:04,110 --> 00:25:08,189
assign method messages and then these

624
00:25:06,090 --> 00:25:10,320
signature algorithm produced signature

625
00:25:08,190 --> 00:25:14,010
shares and from the signature shares I

626
00:25:10,320 --> 00:25:15,450
can basically construct a signature for

627
00:25:14,010 --> 00:25:17,910
the message that will verify under this

628
00:25:15,450 --> 00:25:20,160
public key and then we introduce non

629
00:25:17,910 --> 00:25:22,230
malleable secret sharing non malleable

630
00:25:20,160 --> 00:25:23,309
threshold signatures where we require

631
00:25:22,230 --> 00:25:24,870
that even if

632
00:25:23,309 --> 00:25:28,100
the adversary' men is allowed to tamper

633
00:25:24,870 --> 00:25:32,120
once with the vector of secret keys and

634
00:25:28,100 --> 00:25:34,350
afterwards seized allowed to query for

635
00:25:32,120 --> 00:25:35,580
signatures on messages of his choice he

636
00:25:34,350 --> 00:25:39,090
should still not break the unforgeable

637
00:25:35,580 --> 00:25:40,678
'ti guarantee and in a similar fashion

638
00:25:39,090 --> 00:25:43,049
we get something for leakage resilient

639
00:25:40,679 --> 00:25:44,639
so here he there are the secret keys the

640
00:25:43,049 --> 00:25:46,799
adversary gets to see some leakage on

641
00:25:44,639 --> 00:25:49,350
all of those keys and again then like in

642
00:25:46,799 --> 00:25:51,629
a chosen message type of security notion

643
00:25:49,350 --> 00:25:54,059
he should not be able to forge a message

644
00:25:51,629 --> 00:25:55,379
so I won't go into detail how we

645
00:25:54,059 --> 00:25:57,240
construct it but basically the

646
00:25:55,379 --> 00:25:58,529
constructions are kind of similar to

647
00:25:57,240 --> 00:25:59,940
what I showed before of how to

648
00:25:58,529 --> 00:26:01,740
distribute the secret key like how to

649
00:25:59,940 --> 00:26:03,240
split the secret the secret shares or

650
00:26:01,740 --> 00:26:05,330
the secret keys in this point and how to

651
00:26:03,240 --> 00:26:07,289
distribute them among the players so

652
00:26:05,330 --> 00:26:09,029
with this we kind of get leakage

653
00:26:07,289 --> 00:26:19,529
resilient and honorable threshold

654
00:26:09,029 --> 00:26:21,480
signatures yes questions we have time

655
00:26:19,529 --> 00:26:27,720
for questions and both authors will be

656
00:26:21,480 --> 00:26:30,629
on stage to answer them as you ponder

657
00:26:27,720 --> 00:26:32,759
yours I have one of mine can you speak

658
00:26:30,629 --> 00:26:34,230
of applications of your schemes and how

659
00:26:32,759 --> 00:26:36,269
close we are in terms of concrete

660
00:26:34,230 --> 00:26:44,129
parameters to being suitable for these

661
00:26:36,269 --> 00:26:47,789
applications let me think about

662
00:26:44,129 --> 00:26:50,580
practicality I said so the main issue

663
00:26:47,789 --> 00:26:51,658
with this to answer this why for me it's

664
00:26:50,580 --> 00:26:52,710
a hard question to answer is because

665
00:26:51,659 --> 00:26:55,049
like I'm not sure what you would

666
00:26:52,710 --> 00:26:56,279
consider a practical parameters for the

667
00:26:55,049 --> 00:27:00,240
for instance the threshold signature

668
00:26:56,279 --> 00:27:03,330
scheme like for like reasonable values

669
00:27:00,240 --> 00:27:05,070
of n I think it is like you get like you

670
00:27:03,330 --> 00:27:06,360
get somewhat large or a secret keys then

671
00:27:05,070 --> 00:27:08,549
you have an original threshold signature

672
00:27:06,360 --> 00:27:10,320
scheme but they're not extremely large

673
00:27:08,549 --> 00:27:11,940
like I think this could be like

674
00:27:10,320 --> 00:27:17,428
practical of you if you wanted to do

675
00:27:11,940 --> 00:27:21,360
something like this and you are the

676
00:27:17,429 --> 00:27:22,930
questions well let's think so thank all

677
00:27:21,360 --> 00:27:26,929
the speakers of this session

678
00:27:22,930 --> 00:27:26,930
[Applause]

