1
00:00:04,940 --> 00:00:10,219
hello this is a joint talk with the

2
00:00:07,950 --> 00:00:12,870
elements a sonido bento very non whorish

3
00:00:10,219 --> 00:00:16,020
first of all to set expectation in this

4
00:00:12,870 --> 00:00:19,080
talk I will mainly focus on the

5
00:00:16,020 --> 00:00:21,960
background and on our results

6
00:00:19,080 --> 00:00:24,000
I will not go deep into details of how

7
00:00:21,960 --> 00:00:25,560
we achieved its results you are welcome

8
00:00:24,000 --> 00:00:31,109
to talk with me after all check in the

9
00:00:25,560 --> 00:00:36,030
paper ok we start from the celebrated

10
00:00:31,109 --> 00:00:39,600
work of Baba Tao suggesting a user can

11
00:00:36,030 --> 00:00:42,570
send an execution consent the program

12
00:00:39,600 --> 00:00:45,420
for an untrusted server to execute and

13
00:00:42,570 --> 00:00:47,820
return the result but instead of only

14
00:00:45,420 --> 00:00:51,180
returning a result of the execution this

15
00:00:47,820 --> 00:00:53,309
untrusted server provides a proof of

16
00:00:51,180 --> 00:00:55,710
integrity showing this result is indeed

17
00:00:53,309 --> 00:00:59,010
the result of the program the user asked

18
00:00:55,710 --> 00:01:01,379
for additionally it might be the case

19
00:00:59,010 --> 00:01:05,580
this program has a place for some

20
00:01:01,379 --> 00:01:08,580
auxilary input the prover can add an

21
00:01:05,580 --> 00:01:10,500
input a secret input into the program as

22
00:01:08,580 --> 00:01:13,050
well and make this proof a proof of

23
00:01:10,500 --> 00:01:17,160
knowledge of an input satisfying this

24
00:01:13,050 --> 00:01:20,429
program the BLS construction had many

25
00:01:17,160 --> 00:01:22,979
great features I would like to focus on

26
00:01:20,430 --> 00:01:25,440
two of them one of them is 16-4 if

27
00:01:22,980 --> 00:01:28,620
occasion the verification of the proof

28
00:01:25,440 --> 00:01:31,800
is poly logarithmic on the length of the

29
00:01:28,620 --> 00:01:35,610
execution the other one is public coin

30
00:01:31,800 --> 00:01:40,320
randomness it means that using common

31
00:01:35,610 --> 00:01:43,110
compilers the the prover could generate

32
00:01:40,320 --> 00:01:45,360
a non-interactive argument that can be

33
00:01:43,110 --> 00:01:47,670
spread and published to anybody and

34
00:01:45,360 --> 00:01:52,140
anybody would be able to verify it with

35
00:01:47,670 --> 00:01:56,510
no trust assumptions recently there is a

36
00:01:52,140 --> 00:02:00,120
lot of work on systems for designated

37
00:01:56,510 --> 00:02:03,299
designated computation for a computation

38
00:02:00,120 --> 00:02:07,200
delegation unfortunately none of these

39
00:02:03,299 --> 00:02:09,959
works were able to achieve both suck

40
00:02:07,200 --> 00:02:14,190
centrifugation and using public own

41
00:02:09,959 --> 00:02:15,990
randomness two years ago sai was

42
00:02:14,190 --> 00:02:18,240
presented achieving both 16

43
00:02:15,990 --> 00:02:22,290
fortification and public coin randomness

44
00:02:18,240 --> 00:02:25,230
but the performance of the SCI system

45
00:02:22,290 --> 00:02:30,030
was not applicable for a real-world

46
00:02:25,230 --> 00:02:33,239
usage in this work in this work I

47
00:02:30,030 --> 00:02:35,790
present ZK start a system which has both

48
00:02:33,240 --> 00:02:40,170
16 verification public and randomness

49
00:02:35,790 --> 00:02:43,290
and having performance appealing to

50
00:02:40,170 --> 00:02:44,750
real-life usage this is the message I

51
00:02:43,290 --> 00:02:48,299
would like you to take with you today

52
00:02:44,750 --> 00:02:50,970
that Stark is both 16th verifiable with

53
00:02:48,300 --> 00:02:52,800
public coin randomness and applicable to

54
00:02:50,970 --> 00:02:57,260
real life usage this is why you will see

55
00:02:52,800 --> 00:03:02,190
this Venn diagram a lot let's continue

56
00:02:57,260 --> 00:03:05,100
to some distinction of the of the stark

57
00:03:02,190 --> 00:03:06,450
system from other systems in the public

58
00:03:05,100 --> 00:03:10,880
coin or something for a fixation which

59
00:03:06,450 --> 00:03:13,230
are not in the intersection a very major

60
00:03:10,880 --> 00:03:16,170
difference is in the earth mutilation

61
00:03:13,230 --> 00:03:18,179
technique used one common ultimate

62
00:03:16,170 --> 00:03:21,929
evasion technique is to describe the

63
00:03:18,180 --> 00:03:24,540
program as a circuit in this case the

64
00:03:21,930 --> 00:03:27,270
verifier as it has to know what the

65
00:03:24,540 --> 00:03:28,890
program is is not expected to be sub

66
00:03:27,270 --> 00:03:31,200
linear in there secrets in the circuit

67
00:03:28,890 --> 00:03:34,980
side such we cannot expect such thing

68
00:03:31,200 --> 00:03:37,440
terrific ation this technique is indeed

69
00:03:34,980 --> 00:03:40,260
very common in the system which which

70
00:03:37,440 --> 00:03:42,480
have public coin randomness but no

71
00:03:40,260 --> 00:03:44,730
success in Torah fication another

72
00:03:42,480 --> 00:03:46,880
technique is very similar but it takes

73
00:03:44,730 --> 00:03:50,899
the circuit describing the program at

74
00:03:46,880 --> 00:03:54,390
pre-process it using some setup phase

75
00:03:50,900 --> 00:03:56,190
this setup phase outputs 1/16

76
00:03:54,390 --> 00:03:59,160
verification parameter that can be used

77
00:03:56,190 --> 00:04:02,010
by the verifier to verify a proof

78
00:03:59,160 --> 00:04:05,700
succinctly unfortunately one of the

79
00:04:02,010 --> 00:04:08,670
drawbacks of this technique is that in

80
00:04:05,700 --> 00:04:10,140
the setup phase information if

81
00:04:08,670 --> 00:04:12,600
information leaked from the setup phase

82
00:04:10,140 --> 00:04:16,019
it can be used to forge proof in many of

83
00:04:12,600 --> 00:04:18,060
the setups it is suggested to use MP

84
00:04:16,019 --> 00:04:20,820
seals to do the setup to reduce the

85
00:04:18,060 --> 00:04:21,959
stress assumption what we do instruct is

86
00:04:20,820 --> 00:04:24,599
completely different

87
00:04:21,959 --> 00:04:27,060
we are not describing the program is a

88
00:04:24,600 --> 00:04:29,370
circuit instead we are describing the

89
00:04:27,060 --> 00:04:31,680
transition function as a circuit you can

90
00:04:29,370 --> 00:04:32,460
think of at the CPU that we have in

91
00:04:31,680 --> 00:04:36,570
every computer

92
00:04:32,460 --> 00:04:39,330
as some circuit this circuit is constant

93
00:04:36,570 --> 00:04:41,700
and has some constant complexity but it

94
00:04:39,330 --> 00:04:44,880
can be used to execute both short

95
00:04:41,700 --> 00:04:47,640
programs and very long programs this is

96
00:04:44,880 --> 00:04:50,219
the case for Stark as well.we arrhythmia

97
00:04:47,640 --> 00:04:53,729
is only the transition function and we

98
00:04:50,220 --> 00:04:56,160
use it to verify both short races and

99
00:04:53,730 --> 00:05:00,990
very long traces this is where the

100
00:04:56,160 --> 00:05:04,080
succinctness of Starks come from I would

101
00:05:00,990 --> 00:05:06,930
like to compare to other systems in

102
00:05:04,080 --> 00:05:09,979
first of all asymptotically we can see

103
00:05:06,930 --> 00:05:13,460
the three last lines in this table

104
00:05:09,980 --> 00:05:17,280
represent the work the work in the

105
00:05:13,460 --> 00:05:19,979
intersection and we can notice two great

106
00:05:17,280 --> 00:05:22,440
features in this three last lines one of

107
00:05:19,980 --> 00:05:24,870
them there is no red cell it seems

108
00:05:22,440 --> 00:05:26,670
nothing here is really better awful the

109
00:05:24,870 --> 00:05:28,290
other one there is no green cell it

110
00:05:26,670 --> 00:05:34,470
means there is still a lot of room for

111
00:05:28,290 --> 00:05:37,170
research okay mmm I will now continue by

112
00:05:34,470 --> 00:05:41,100
showing how specifically in this line of

113
00:05:37,170 --> 00:05:42,570
work we have improved from side to lib

114
00:05:41,100 --> 00:05:45,200
star general and rip start with

115
00:05:42,570 --> 00:05:50,010
logarithmic Ram when the last two lines

116
00:05:45,200 --> 00:05:52,500
representing both lib stark are for the

117
00:05:50,010 --> 00:05:55,650
following scenarios lip stark general is

118
00:05:52,500 --> 00:05:58,740
for general computations using Ram

119
00:05:55,650 --> 00:06:00,840
access lip start with logarithmic Ram is

120
00:05:58,740 --> 00:06:04,410
an optimization that we have for the

121
00:06:00,840 --> 00:06:06,570
case a program accesses only at most a

122
00:06:04,410 --> 00:06:11,430
logarithmic Ram in the length of the

123
00:06:06,570 --> 00:06:14,340
trace so first optimization from site to

124
00:06:11,430 --> 00:06:15,870
lib stark we won

125
00:06:14,340 --> 00:06:18,270
it's one of the optimization that we

126
00:06:15,870 --> 00:06:20,790
introduced in Lib Stark is to use the

127
00:06:18,270 --> 00:06:23,010
Frey low degree testing instead of the

128
00:06:20,790 --> 00:06:24,600
Bensons to download degree testing the

129
00:06:23,010 --> 00:06:26,490
Frey low degree testing was introduced

130
00:06:24,600 --> 00:06:30,420
last year by the same authors of this

131
00:06:26,490 --> 00:06:33,840
paper when we are going to leap start

132
00:06:30,420 --> 00:06:35,730
with logarithmic Ram it might be a big

133
00:06:33,840 --> 00:06:38,310
technical it not familiar for a lot but

134
00:06:35,730 --> 00:06:44,310
we drop a de bruin shuffle network which

135
00:06:38,310 --> 00:06:45,650
is used to verify ram access it's

136
00:06:44,310 --> 00:06:48,229
consistent

137
00:06:45,650 --> 00:06:51,830
I will not dive much deeper into this

138
00:06:48,229 --> 00:06:54,530
because of lack of time but this is an

139
00:06:51,830 --> 00:06:59,539
optimization that we were able to do

140
00:06:54,530 --> 00:07:01,520
I will now dive into concrete

141
00:06:59,539 --> 00:07:05,690
measurements and comparison to other

142
00:07:01,520 --> 00:07:09,469
systems for the concrete measurements we

143
00:07:05,690 --> 00:07:12,320
wrote a subset some exhaustive solver

144
00:07:09,470 --> 00:07:15,470
this solver was written in tiny Rama

145
00:07:12,320 --> 00:07:18,979
sembly and compiled both to sigh and

146
00:07:15,470 --> 00:07:21,860
stark constraint systems and to leave

147
00:07:18,979 --> 00:07:25,340
snark circuit the parameters of this

148
00:07:21,860 --> 00:07:27,940
leap snark circuit were used to estimate

149
00:07:25,340 --> 00:07:32,150
the performance of other circuit based

150
00:07:27,940 --> 00:07:35,630
systems so here we can see that the lib

151
00:07:32,150 --> 00:07:39,620
stark verification is more efficient

152
00:07:35,630 --> 00:07:41,840
than any other public coin public owner

153
00:07:39,620 --> 00:07:45,380
and onesa system verification just as we

154
00:07:41,840 --> 00:07:48,258
expected and outperformed only by the

155
00:07:45,380 --> 00:07:51,740
lip snark verifier which requires a

156
00:07:48,259 --> 00:07:55,570
trusted setup you can see that even

157
00:07:51,740 --> 00:07:59,360
though the the time it takes to verify

158
00:07:55,570 --> 00:08:02,539
start proof is about a tenth of a second

159
00:07:59,360 --> 00:08:04,669
and it is insensitive to the length of

160
00:08:02,539 --> 00:08:07,060
the execution so it wouldn't change much

161
00:08:04,669 --> 00:08:09,830
even for very long executions

162
00:08:07,060 --> 00:08:11,599
let's check the argument size which is

163
00:08:09,830 --> 00:08:13,669
like the proof but it is argument

164
00:08:11,599 --> 00:08:17,180
because it requires some computational

165
00:08:13,669 --> 00:08:21,320
assumptions we can see that the stark

166
00:08:17,180 --> 00:08:23,930
proof is longer than many add then the

167
00:08:21,320 --> 00:08:28,400
proof of many other systems it requires

168
00:08:23,930 --> 00:08:30,289
a few hundred of kilobytes but again it

169
00:08:28,400 --> 00:08:32,779
is insensitive to the length of the

170
00:08:30,289 --> 00:08:37,098
computation and it would stay this way

171
00:08:32,779 --> 00:08:39,679
even for very long computations about

172
00:08:37,099 --> 00:08:43,789
the proving time we can see that the

173
00:08:39,679 --> 00:08:46,579
prover is faster than any other prover

174
00:08:43,789 --> 00:08:51,230
we compared to at least by a factor of

175
00:08:46,580 --> 00:08:54,829
ten one of the reasons is that some of

176
00:08:51,230 --> 00:08:57,770
the systems require intensive elliptic

177
00:08:54,829 --> 00:08:59,910
curve arithmetic while proving while

178
00:08:57,770 --> 00:09:02,010
stark require only

179
00:08:59,910 --> 00:09:05,010
finite field arithmetic switch is much

180
00:09:02,010 --> 00:09:06,990
easier for a CPU another ism could be

181
00:09:05,010 --> 00:09:09,840
just engineering it might be the case

182
00:09:06,990 --> 00:09:14,670
that more fine optimization to other

183
00:09:09,840 --> 00:09:17,190
prover would reduce this gap I would

184
00:09:14,670 --> 00:09:20,310
like to summarize by reminding again

185
00:09:17,190 --> 00:09:23,670
that ZK star has both accent

186
00:09:20,310 --> 00:09:27,420
verification and public coin randomness

187
00:09:23,670 --> 00:09:29,729
and it's performance is appealing for

188
00:09:27,420 --> 00:09:30,630
real-life usage and if this is not

189
00:09:29,730 --> 00:09:34,740
enough for you

190
00:09:30,630 --> 00:09:42,269
it is quantum secure as well thank you

191
00:09:34,740 --> 00:09:42,269
[Applause]

192
00:09:44,270 --> 00:09:56,090
questions yeah yeah any questions okay

193
00:09:57,020 --> 00:10:03,399
[Applause]

194
00:10:15,170 --> 00:10:21,560
and the work pretty yes

195
00:10:33,840 --> 00:10:38,340
so the second part of this talk is about

196
00:10:35,640 --> 00:10:41,130
libras seems even knowledge proves with

197
00:10:38,340 --> 00:10:42,780
optimal approval computation alright

198
00:10:41,130 --> 00:10:46,110
thanks for introduction and thanks for

199
00:10:42,780 --> 00:10:48,089
Michael for the last pork now I'm going

200
00:10:46,110 --> 00:10:50,880
to introduce Libra which is another

201
00:10:48,090 --> 00:10:54,710
theological system and this is a joint

202
00:10:50,880 --> 00:10:58,380
work with chehon upin bubbies and done

203
00:10:54,710 --> 00:11:00,960
and I need to cry fry that this work is

204
00:10:58,380 --> 00:11:04,620
different from the Facebook liberal

205
00:11:00,960 --> 00:11:07,590
project and this work is submitted in

206
00:11:04,620 --> 00:11:12,660
February so before Facebook the bar it

207
00:11:07,590 --> 00:11:15,930
is so it's a nice coincidence as many

208
00:11:12,660 --> 00:11:18,480
talk previously mentioned that do not

209
00:11:15,930 --> 00:11:20,430
approve allows the prover to come in

210
00:11:18,480 --> 00:11:23,850
super far about the validity of a

211
00:11:20,430 --> 00:11:25,500
statement which is modeling of

212
00:11:23,850 --> 00:11:29,630
statements which is a statement is

213
00:11:25,500 --> 00:11:33,440
moderate circuit and in our proof system

214
00:11:29,630 --> 00:11:37,740
we have continuous Sunnis and for large

215
00:11:33,440 --> 00:11:40,770
properties a promise property says that

216
00:11:37,740 --> 00:11:43,410
if post-party are honest then the word

217
00:11:40,770 --> 00:11:45,710
fair should always accept the sunniest

218
00:11:43,410 --> 00:11:49,260
properties as if Hoover is malicious

219
00:11:45,710 --> 00:11:52,290
then were I should not accept acceptable

220
00:11:49,260 --> 00:11:56,960
ninja buffer bridge and the Mirage says

221
00:11:52,290 --> 00:12:03,030
if whoever cannot learn anything about

222
00:11:56,960 --> 00:12:05,340
witness w from the proof pi and there

223
00:12:03,030 --> 00:12:08,250
are three major criteria about sahaja

224
00:12:05,340 --> 00:12:11,190
food protocols prove a time prove asides

225
00:12:08,250 --> 00:12:14,970
and revocation time and the category we

226
00:12:11,190 --> 00:12:16,950
are focusing on is protocol with

227
00:12:14,970 --> 00:12:21,230
succinct proof size and fast

228
00:12:16,950 --> 00:12:24,210
verification time and there are many

229
00:12:21,230 --> 00:12:27,240
existing geological codes that satisfy

230
00:12:24,210 --> 00:12:29,190
these properties the most widely used

231
00:12:27,240 --> 00:12:33,360
one is snark and their implementation

232
00:12:29,190 --> 00:12:36,510
leap snark the leap stock supposed all

233
00:12:33,360 --> 00:12:38,310
kinds of functions and have constant

234
00:12:36,510 --> 00:12:41,189
proof size and constant verification

235
00:12:38,310 --> 00:12:45,109
time and even they are widely deployed

236
00:12:41,190 --> 00:12:45,110
in the real world such as big hash

237
00:12:45,310 --> 00:12:51,609
however there are still improving things

238
00:12:48,939 --> 00:12:56,339
and they have a function dependent trust

239
00:12:51,610 --> 00:12:59,220
they set up to address these problems

240
00:12:56,339 --> 00:13:04,629
recent years there are many protocols

241
00:12:59,220 --> 00:13:06,670
proposed by different groups and here is

242
00:13:04,629 --> 00:13:10,059
a list of these protocols which for

243
00:13:06,670 --> 00:13:13,930
implementation and categorized by the

244
00:13:10,059 --> 00:13:15,850
underlying technique our protocol is an

245
00:13:13,930 --> 00:13:18,519
interactive protocol based on the

246
00:13:15,850 --> 00:13:22,059
framework proposed by V sequel and

247
00:13:18,519 --> 00:13:24,550
foreign John at all actually all of

248
00:13:22,059 --> 00:13:28,149
these protocols are following the same

249
00:13:24,550 --> 00:13:31,349
framework now I'm going to introduce a

250
00:13:28,149 --> 00:13:36,279
framework proposed by John at all so

251
00:13:31,350 --> 00:13:39,069
first we have a witness and we have the

252
00:13:36,279 --> 00:13:40,930
prove is going to commit to the

253
00:13:39,069 --> 00:13:45,248
polynomial that is defined by the

254
00:13:40,930 --> 00:13:47,410
witness then they were engaged

255
00:13:45,249 --> 00:13:50,470
interactive proof protocol as called

256
00:13:47,410 --> 00:13:53,319
Jukka protocol w fish and solid proof

257
00:13:50,470 --> 00:13:57,250
and this worker will reduce the validity

258
00:13:53,319 --> 00:14:00,219
of the output Y to the validity of the

259
00:13:57,250 --> 00:14:05,680
committed polynomial defined by the

260
00:14:00,220 --> 00:14:09,699
input W and finally it will waver I will

261
00:14:05,680 --> 00:14:12,910
send a random challenge to the input and

262
00:14:09,699 --> 00:14:15,969
the proof where we are open the random

263
00:14:12,910 --> 00:14:19,360
challenge open the open the input

264
00:14:15,970 --> 00:14:25,180
binomial to this random point with proof

265
00:14:19,360 --> 00:14:30,339
of cortney's this completes the whole

266
00:14:25,180 --> 00:14:32,739
framework and all constructions follows

267
00:14:30,339 --> 00:14:36,970
the framework and our main contribution

268
00:14:32,740 --> 00:14:40,959
is on the GTR protocol first we will

269
00:14:36,970 --> 00:14:42,490
introduce an inner time Jacob pour for

270
00:14:40,959 --> 00:14:47,679
arbitrary layered circuit which is

271
00:14:42,490 --> 00:14:51,939
optimal then second we will add the zero

272
00:14:47,679 --> 00:14:53,709
logic value add a zero g property to the

273
00:14:51,939 --> 00:14:57,390
Chikara protocol without any

274
00:14:53,709 --> 00:15:00,209
computational overhead so

275
00:14:57,390 --> 00:15:02,480
finally we will get a new large argument

276
00:15:00,210 --> 00:15:06,890
scheme with linear time prover and

277
00:15:02,480 --> 00:15:10,410
succinct proof size and the verification

278
00:15:06,890 --> 00:15:12,630
so for the rest of the talk I will tell

279
00:15:10,410 --> 00:15:15,380
you some technical details about this

280
00:15:12,630 --> 00:15:19,130
prover and about the theological

281
00:15:15,380 --> 00:15:22,860
conversion for jihad protocol

282
00:15:19,130 --> 00:15:28,800
so first let's discuss about the linear

283
00:15:22,860 --> 00:15:31,410
time for the GK protocol is based on the

284
00:15:28,800 --> 00:15:34,439
song check protocol so let me introduce

285
00:15:31,410 --> 00:15:36,449
the song check first and the some check

286
00:15:34,440 --> 00:15:40,380
protocol is a fundamental building block

287
00:15:36,450 --> 00:15:43,500
for for many applications in

288
00:15:40,380 --> 00:15:46,650
cryptography the call for some check

289
00:15:43,500 --> 00:15:51,050
photo is to check the summation of the

290
00:15:46,650 --> 00:15:55,370
polynomial F over a boolean hypercube

291
00:15:51,050 --> 00:16:00,630
that is equal to some claimed constant H

292
00:15:55,370 --> 00:16:03,180
and this is the interactive protocol and

293
00:16:00,630 --> 00:16:08,010
finally it were reduced to a random

294
00:16:03,180 --> 00:16:12,209
point and we refer to our need to gain

295
00:16:08,010 --> 00:16:15,960
access to this polynomial evaluated at

296
00:16:12,210 --> 00:16:21,360
this random point so if we have our

297
00:16:15,960 --> 00:16:25,550
Oracle says the proof size will be log n

298
00:16:21,360 --> 00:16:25,550
and verification time will also be log n

299
00:16:26,840 --> 00:16:31,710
as use let's use the some checkers of

300
00:16:29,880 --> 00:16:35,910
building block and Ness introduced a

301
00:16:31,710 --> 00:16:39,060
jacquard protocol so I will use the

302
00:16:35,910 --> 00:16:43,410
vector location tool to represent a set

303
00:16:39,060 --> 00:16:48,540
of an asari array of variables and which

304
00:16:43,410 --> 00:16:51,180
your size is log n and so first we have

305
00:16:48,540 --> 00:16:53,089
to define the polynomial using the sum

306
00:16:51,180 --> 00:16:56,550
check protocol

307
00:16:53,090 --> 00:16:59,730
next if let's take an example the input

308
00:16:56,550 --> 00:17:02,550
layer this polynomial is a multi Nene

309
00:16:59,730 --> 00:17:06,240
extension of the input layer and it will

310
00:17:02,550 --> 00:17:10,560
agree on the input value on pudding and

311
00:17:06,240 --> 00:17:10,859
hypercube for example 0 you are in agree

312
00:17:10,560 --> 00:17:14,760
one

313
00:17:10,859 --> 00:17:15,839
first input and for the rest of this

314
00:17:14,760 --> 00:17:18,299
polynomial

315
00:17:15,839 --> 00:17:25,079
it will agree on the corresponding gate

316
00:17:18,299 --> 00:17:28,260
value and to make it possible we will

317
00:17:25,079 --> 00:17:32,399
use this relationship to define these

318
00:17:28,260 --> 00:17:34,470
polynomials and this polynomial is

319
00:17:32,400 --> 00:17:38,250
related to the previous layers of

320
00:17:34,470 --> 00:17:41,940
polynomial so let me explain it in

321
00:17:38,250 --> 00:17:45,809
details the mod and ad is called a

322
00:17:41,940 --> 00:17:49,980
wiring predicate a wearing predicate is

323
00:17:45,809 --> 00:17:53,790
defined as follows if there exists gate

324
00:17:49,980 --> 00:17:56,250
g0 and is connected to u 0 and V 0 then

325
00:17:53,790 --> 00:18:01,590
the motor will indicate will evaluate to

326
00:17:56,250 --> 00:18:06,390
1 upon this input and otherwise it will

327
00:18:01,590 --> 00:18:08,939
evaluate to 0 so in this formula if G is

328
00:18:06,390 --> 00:18:16,320
a multi Kate and U is the corresponding

329
00:18:08,940 --> 00:18:18,000
input the value of this the variation of

330
00:18:16,320 --> 00:18:20,189
this polynomial will be the

331
00:18:18,000 --> 00:18:24,960
multiplication of the following input

332
00:18:20,190 --> 00:18:28,169
and the same for the Advocate so this

333
00:18:24,960 --> 00:18:33,960
this polynomial you will always agree

334
00:18:28,169 --> 00:18:36,929
with implicit evaluation and the

335
00:18:33,960 --> 00:18:40,350
complexity of the gql protocol is a song

336
00:18:36,929 --> 00:18:46,290
of complexity of all of this some Czech

337
00:18:40,350 --> 00:18:49,199
protocol so in order to improve the

338
00:18:46,290 --> 00:18:51,928
chica protocol it's only need to improve

339
00:18:49,200 --> 00:18:54,240
the some checked protocol let me

340
00:18:51,929 --> 00:18:56,850
introduce some prior work on the some

341
00:18:54,240 --> 00:19:03,500
Czech protocol improvement to make it an

342
00:18:56,850 --> 00:19:06,178
in-ear soundcheck protocol so taylor

343
00:19:03,500 --> 00:19:10,919
introduced dynamic programming based

344
00:19:06,179 --> 00:19:12,990
method in crypto 13 and the first step

345
00:19:10,919 --> 00:19:16,559
of this method is to initialize the

346
00:19:12,990 --> 00:19:21,120
lookup table of the polynomial over the

347
00:19:16,559 --> 00:19:22,740
whole pudding hypercube then it will use

348
00:19:21,120 --> 00:19:23,800
the dynamic programming to reduce the

349
00:19:22,740 --> 00:19:27,130
pre no Meah

350
00:19:23,800 --> 00:19:29,230
the size of the next Pannonia is equal

351
00:19:27,130 --> 00:19:34,980
to the half of the size of previous

352
00:19:29,230 --> 00:19:37,870
premio so the total size is linear

353
00:19:34,980 --> 00:19:41,740
according to this formula and the final

354
00:19:37,870 --> 00:19:46,409
block of this is this table is only

355
00:19:41,740 --> 00:19:46,410
consists of one where my element

356
00:19:48,840 --> 00:19:54,850
however in GQ polynomial it's not

357
00:19:52,630 --> 00:19:59,710
sufficient because we have two variables

358
00:19:54,850 --> 00:20:03,309
each of them have log n variable so in

359
00:19:59,710 --> 00:20:06,610
total is 2 T 2 log n which is n square

360
00:20:03,309 --> 00:20:11,970
and the initialization is N squared so

361
00:20:06,610 --> 00:20:11,969
this is not efficient for practice use

362
00:20:13,470 --> 00:20:19,440
so in our paper we propose a new way to

363
00:20:16,450 --> 00:20:24,280
address this problem and based on the

364
00:20:19,440 --> 00:20:26,860
protocol proposed by trainer we divide

365
00:20:24,280 --> 00:20:30,790
the sum check into two phases the first

366
00:20:26,860 --> 00:20:32,800
phase is only about the variable U and

367
00:20:30,790 --> 00:20:40,059
the second phase is only about where

368
00:20:32,800 --> 00:20:43,690
about V here we define a polynomial edge

369
00:20:40,059 --> 00:20:47,649
as follows so this thing this two thing

370
00:20:43,690 --> 00:20:51,059
will be equal actually so and this part

371
00:20:47,650 --> 00:20:55,780
of the phenomenal we are only about you

372
00:20:51,059 --> 00:20:58,570
so as tennis protocol required we need

373
00:20:55,780 --> 00:21:04,360
to initialize a lookup table for this

374
00:20:58,570 --> 00:21:07,120
polynomial and wii u is quite simple in

375
00:21:04,360 --> 00:21:10,209
case since it's agree with circuit

376
00:21:07,120 --> 00:21:12,010
evaluation so we can we can use the

377
00:21:10,210 --> 00:21:16,270
circuit evaluation as a lookup table and

378
00:21:12,010 --> 00:21:20,830
H is not quite not easy but in our paper

379
00:21:16,270 --> 00:21:22,809
we introduced a way to initialize a

380
00:21:20,830 --> 00:21:28,059
issues through an inner skin over the

381
00:21:22,809 --> 00:21:30,010
circuit and since the time is limited

382
00:21:28,059 --> 00:21:34,540
I will not introduce the initialization

383
00:21:30,010 --> 00:21:36,970
process with you then we were wrong the

384
00:21:34,540 --> 00:21:41,110
Taylor's method and then we

385
00:21:36,970 --> 00:21:44,430
complete this phase reduce you to a

386
00:21:41,110 --> 00:21:46,990
random is proposed by the some check

387
00:21:44,430 --> 00:21:50,080
actually is the constant so this part

388
00:21:46,990 --> 00:21:53,080
this middle term is a constant and the

389
00:21:50,080 --> 00:21:56,830
remaining turn is the actual work for

390
00:21:53,080 --> 00:21:58,689
the some check when we are doing the

391
00:21:56,830 --> 00:22:01,360
same thing as a free phase one

392
00:21:58,690 --> 00:22:05,070
acceptable age is defined in a lottery

393
00:22:01,360 --> 00:22:10,179
and this mod function can also be

394
00:22:05,070 --> 00:22:14,290
initialized in a linear scan of the

395
00:22:10,180 --> 00:22:19,350
circuit and then we run the taylors

396
00:22:14,290 --> 00:22:19,350
master again to complete the some check

397
00:22:20,070 --> 00:22:27,159
so now we have an inner time prove er

398
00:22:23,070 --> 00:22:32,649
next we are going to introduce second

399
00:22:27,160 --> 00:22:34,710
technique the Zoological protocol in

400
00:22:32,650 --> 00:22:37,870
this section we will introduce a comma

401
00:22:34,710 --> 00:22:41,760
zero logic conversion for G cap will

402
00:22:37,870 --> 00:22:41,760
occur without any computational overhead

403
00:22:43,890 --> 00:22:49,780
so what they mean should let me tell you

404
00:22:46,810 --> 00:22:53,950
why chica is not secure because it needs

405
00:22:49,780 --> 00:22:56,350
some evaluations in every interaction

406
00:22:53,950 --> 00:23:01,110
into a leak-free Gnomeo evaluation about

407
00:22:56,350 --> 00:23:03,939
the some but the current layer circuit

408
00:23:01,110 --> 00:23:08,500
the polynomial you are evaluate to a

409
00:23:03,940 --> 00:23:11,770
random point and the run this evaluation

410
00:23:08,500 --> 00:23:14,680
will become linear combination of the

411
00:23:11,770 --> 00:23:16,750
value of this gate so it's not security

412
00:23:14,680 --> 00:23:22,300
leak some information about the create

413
00:23:16,750 --> 00:23:23,650
value and there are several prior work

414
00:23:22,300 --> 00:23:26,620
to address these problems

415
00:23:23,650 --> 00:23:30,490
hi Roxy kensic here is equal they use

416
00:23:26,620 --> 00:23:33,719
permit anger transformation which will

417
00:23:30,490 --> 00:23:37,450
incur a computational overhead because

418
00:23:33,720 --> 00:23:38,710
increment angle transformation addition

419
00:23:37,450 --> 00:23:42,180
will become a multiplication

420
00:23:38,710 --> 00:23:46,030
multiplication will become initiation

421
00:23:42,180 --> 00:23:48,830
this will incur like 10 to 100 times

422
00:23:46,030 --> 00:23:54,350
lower compared

423
00:23:48,830 --> 00:23:56,840
the previous geopolitical so to make GG

424
00:23:54,350 --> 00:24:00,549
r GG ology which all computational

425
00:23:56,840 --> 00:24:03,559
overhead we one use some new approach

426
00:24:00,549 --> 00:24:07,070
that is masking polynomial and it is

427
00:24:03,559 --> 00:24:09,289
inspired by the Casa at all so in their

428
00:24:07,070 --> 00:24:12,830
paper they add a random masking

429
00:24:09,289 --> 00:24:17,419
polynomial Delta to each to the original

430
00:24:12,830 --> 00:24:19,789
function f and in this way the the some

431
00:24:17,419 --> 00:24:22,519
Czech interaction we allowed leak any

432
00:24:19,789 --> 00:24:26,620
information because this is a random

433
00:24:22,519 --> 00:24:29,360
point number it well looks like random

434
00:24:26,620 --> 00:24:32,899
however in their construction Delta is

435
00:24:29,360 --> 00:24:35,830
as big as f and we notice that we need

436
00:24:32,899 --> 00:24:38,139
to do come Pannonia commitment for each

437
00:24:35,830 --> 00:24:40,309
masking polynomial to ensure the

438
00:24:38,139 --> 00:24:44,389
evaluation of the masking trinomial is

439
00:24:40,309 --> 00:24:47,450
correct so if Delta is big is

440
00:24:44,389 --> 00:24:50,629
computationally hard to make the

441
00:24:47,450 --> 00:24:56,080
commitment and open the commitment at

442
00:24:50,630 --> 00:24:59,570
some random point so this work we are

443
00:24:56,080 --> 00:25:02,418
mainly for theoretical interest and we

444
00:24:59,570 --> 00:25:08,559
need many need to construct a Delta that

445
00:25:02,419 --> 00:25:08,559
is small for computationally efficient

446
00:25:10,090 --> 00:25:17,090
then let me give you an intuition about

447
00:25:12,769 --> 00:25:21,320
how it is constructed first SD cage is

448
00:25:17,090 --> 00:25:25,189
small the leakage of the whole Jacob

449
00:25:21,320 --> 00:25:27,470
protocol is only point Agra mystic so to

450
00:25:25,190 --> 00:25:30,860
cover the preneur mystic leakage we

451
00:25:27,470 --> 00:25:31,850
intuitively only needed program is

452
00:25:30,860 --> 00:25:36,678
decree sized

453
00:25:31,850 --> 00:25:38,299
mask in polynomial and we have a nice

454
00:25:36,679 --> 00:25:41,659
construction about this mask in

455
00:25:38,299 --> 00:25:44,750
polynomial it's all of this work was

456
00:25:41,659 --> 00:25:48,049
separated and the size of the pond Omiya

457
00:25:44,750 --> 00:25:50,000
is only probe for in Agra mystic so it

458
00:25:48,049 --> 00:25:56,029
will not incur any computational

459
00:25:50,000 --> 00:25:58,970
overhead so with linear time through ver

460
00:25:56,029 --> 00:26:00,770
and with the conversion for jacquard

461
00:25:58,970 --> 00:26:04,970
protocol to to zero knowledge without

462
00:26:00,770 --> 00:26:07,370
net any computational overhead we will

463
00:26:04,970 --> 00:26:10,850
finally have a linear time through word

464
00:26:07,370 --> 00:26:14,408
and succinct verifier succinct proof

465
00:26:10,850 --> 00:26:17,990
size zero knowledge proof system and

466
00:26:14,409 --> 00:26:20,600
concretely speaking our proof time is

467
00:26:17,990 --> 00:26:22,639
the best among these potholes and our

468
00:26:20,600 --> 00:26:28,459
replication times Ness and one second

469
00:26:22,639 --> 00:26:30,559
and what proof size is reasonable and we

470
00:26:28,460 --> 00:26:32,870
also have an open-source implementation

471
00:26:30,559 --> 00:26:34,990
on github you could check it out by

472
00:26:32,870 --> 00:26:34,989
yourself

473
00:26:35,350 --> 00:26:43,129
and finally becomes conclusion we have a

474
00:26:39,580 --> 00:26:46,730
near-term pool we have efficient geology

475
00:26:43,130 --> 00:26:49,370
conversion for Acapulco and combined we

476
00:26:46,730 --> 00:26:53,840
have an inner prover faster verification

477
00:26:49,370 --> 00:26:56,360
fast source succinct proof size geology

478
00:26:53,840 --> 00:26:58,100
probe system and thank you I'm happy to

479
00:26:56,360 --> 00:27:04,240
take questions

480
00:26:58,100 --> 00:27:08,449
[Applause]

481
00:27:04,240 --> 00:27:11,250
questions alright

482
00:27:08,450 --> 00:27:14,000
okay so let's thank the speaker again

483
00:27:11,250 --> 00:27:14,000
[Applause]

