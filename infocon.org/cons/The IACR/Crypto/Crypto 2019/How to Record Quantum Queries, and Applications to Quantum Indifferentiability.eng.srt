1
00:00:05,120 --> 00:00:12,690
thank you see so first I want to get a

2
00:00:11,100 --> 00:00:13,980
couple warnings out of the way I was

3
00:00:12,690 --> 00:00:15,120
apparently hungry when I made these

4
00:00:13,980 --> 00:00:20,090
slides so there's the occasional

5
00:00:15,120 --> 00:00:22,799
breakfast reference in the talk and also

6
00:00:20,090 --> 00:00:25,020
despite the title having the word

7
00:00:22,800 --> 00:00:27,530
quantum in it twice I'm actually gonna

8
00:00:25,020 --> 00:00:30,360
do my best to remove as much quantum

9
00:00:27,530 --> 00:00:33,360
notation terminology as possible so if

10
00:00:30,360 --> 00:00:34,460
you were hoping to get knee-deep in bra

11
00:00:33,360 --> 00:00:41,370
ket notation

12
00:00:34,460 --> 00:00:42,450
sorry to disappoint okay so I take it

13
00:00:41,370 --> 00:00:45,570
we're all familiar with the random

14
00:00:42,450 --> 00:00:48,420
Oracle model the the idea is I have a

15
00:00:45,570 --> 00:00:51,030
crypto system that uses some hash

16
00:00:48,420 --> 00:00:52,770
function and maybe we don't know how to

17
00:00:51,030 --> 00:00:55,820
prove security using collision

18
00:00:52,770 --> 00:00:57,809
resistance so what we might do is

19
00:00:55,820 --> 00:00:59,489
pretend that the hash function is

20
00:00:57,809 --> 00:01:02,040
actually a truly random function and

21
00:00:59,489 --> 00:01:04,709
allowed the adversary to query the

22
00:01:02,040 --> 00:01:10,289
random function in addition to the the

23
00:01:04,709 --> 00:01:11,880
crypto system all right so why is the

24
00:01:10,290 --> 00:01:15,720
random Oracle model useful well to

25
00:01:11,880 --> 00:01:18,869
illustrate why I might be useful think

26
00:01:15,720 --> 00:01:22,530
about how we would actually simulate the

27
00:01:18,870 --> 00:01:23,159
Oracle in the security proof using we

28
00:01:22,530 --> 00:01:24,840
can do this

29
00:01:23,159 --> 00:01:26,840
essentially on the fly where every time

30
00:01:24,840 --> 00:01:29,130
the adversary makes a query we just

31
00:01:26,840 --> 00:01:31,440
sample the output of the Oracle for that

32
00:01:29,130 --> 00:01:32,460
input at that given point and leave all

33
00:01:31,440 --> 00:01:37,860
the parts that the adversary hasn't

34
00:01:32,460 --> 00:01:39,389
queried yet undefined so what the result

35
00:01:37,860 --> 00:01:41,549
of this is that we get a database of

36
00:01:39,390 --> 00:01:43,950
input-output pairs that the adversary

37
00:01:41,549 --> 00:01:45,360
sees and so this allows us the by

38
00:01:43,950 --> 00:01:47,010
looking at this database we know what

39
00:01:45,360 --> 00:01:48,179
inputs the adversary cares about because

40
00:01:47,010 --> 00:01:49,770
they're just the inputs in the database

41
00:01:48,180 --> 00:01:51,030
we know the corresponding outputs

42
00:01:49,770 --> 00:01:53,520
because they're just in the other column

43
00:01:51,030 --> 00:01:55,500
in the database we can even do some

44
00:01:53,520 --> 00:01:58,439
clever things like adaptively program

45
00:01:55,500 --> 00:02:00,420
the outputs as we're as we're doing the

46
00:01:58,439 --> 00:02:03,179
simulation and we can also very easily

47
00:02:00,420 --> 00:02:04,409
analyze bad events such as you know

48
00:02:03,180 --> 00:02:09,179
whether the absolute is able to find a

49
00:02:04,409 --> 00:02:11,069
collision or not so so way back in 2011

50
00:02:09,179 --> 00:02:13,860
we asked the question of what happens

51
00:02:11,068 --> 00:02:16,079
when we move to quantum so now we

52
00:02:13,860 --> 00:02:18,060
quantum adversary and in the real world

53
00:02:16,080 --> 00:02:20,730
the quantum adversary can interact with

54
00:02:18,060 --> 00:02:22,320
the hash function on quantum inputs

55
00:02:20,730 --> 00:02:24,690
because the the adversary evaluates the

56
00:02:22,320 --> 00:02:26,489
hash function for themself so in the

57
00:02:24,690 --> 00:02:30,960
random Oracle model only makes sense to

58
00:02:26,490 --> 00:02:32,760
model the random Oracle model as as a

59
00:02:30,960 --> 00:02:37,680
function that's queryable on quantum

60
00:02:32,760 --> 00:02:39,720
inputs okay but here's the problem so so

61
00:02:37,680 --> 00:02:41,250
remember this classical on-the-fly

62
00:02:39,720 --> 00:02:42,720
simulation where every time the

63
00:02:41,250 --> 00:02:44,280
adversary makes a query we record that

64
00:02:42,720 --> 00:02:46,680
input and we write down the

65
00:02:44,280 --> 00:02:48,810
corresponding output suddenly this

66
00:02:46,680 --> 00:02:51,570
becomes much trickier in quantum and the

67
00:02:48,810 --> 00:02:52,880
reason has to do with something that

68
00:02:51,570 --> 00:02:55,950
I'll just called the observer effect

69
00:02:52,880 --> 00:02:58,620
which says that whenever you learn

70
00:02:55,950 --> 00:03:00,859
something about a quantum system you

71
00:02:58,620 --> 00:03:03,810
necessarily risk disturbing that system

72
00:03:00,860 --> 00:03:06,480
and now if we think about it the the

73
00:03:03,810 --> 00:03:08,070
random Oracle is just answering these

74
00:03:06,480 --> 00:03:10,049
queries obliviously the random Oracle

75
00:03:08,070 --> 00:03:13,350
isn't trying to learn anything about the

76
00:03:10,050 --> 00:03:15,480
adversary so when our reduction if the

77
00:03:13,350 --> 00:03:17,130
reduction is trying to learn anything

78
00:03:15,480 --> 00:03:18,750
about the adversary such as learn what

79
00:03:17,130 --> 00:03:20,220
the query points that the adversary is

80
00:03:18,750 --> 00:03:22,440
interested in it seems like the

81
00:03:20,220 --> 00:03:27,060
reduction is going to end up disturbing

82
00:03:22,440 --> 00:03:28,890
the adversary so you know basically the

83
00:03:27,060 --> 00:03:29,970
takeaway from this seems to be that the

84
00:03:28,890 --> 00:03:31,440
reduction actually has to answer

85
00:03:29,970 --> 00:03:34,160
obliviously - or else it's easily

86
00:03:31,440 --> 00:03:36,870
distinguishable from the random Oracle

87
00:03:34,160 --> 00:03:40,859
alright so so to get around this issue

88
00:03:36,870 --> 00:03:42,959
what you do is rather than use these on

89
00:03:40,860 --> 00:03:45,209
this on-the-fly simulation what you do

90
00:03:42,959 --> 00:03:49,320
instead is you handcraft some

91
00:03:45,209 --> 00:03:50,700
distribution on functions that hopefully

92
00:03:49,320 --> 00:03:52,590
is indistinguishable from a random

93
00:03:50,700 --> 00:03:53,760
function but the point is that you fix

94
00:03:52,590 --> 00:03:55,920
it at the very beginning of the

95
00:03:53,760 --> 00:03:57,390
experiment and just obliviously use this

96
00:03:55,920 --> 00:04:00,809
function to answer the random Oracle

97
00:03:57,390 --> 00:04:02,399
queries and this is this is how typical

98
00:04:00,810 --> 00:04:04,530
proofs in the quantum random Oracle

99
00:04:02,400 --> 00:04:05,880
model work but there's a number of

100
00:04:04,530 --> 00:04:07,470
limitations because I'm answering

101
00:04:05,880 --> 00:04:09,030
obliviously we don't know the inputs

102
00:04:07,470 --> 00:04:11,010
that the adversary cares about we don't

103
00:04:09,030 --> 00:04:12,600
know the corresponding outputs you can

104
00:04:11,010 --> 00:04:14,160
do some sort of programming but it can't

105
00:04:12,600 --> 00:04:15,540
be adaptive because you had to do the

106
00:04:14,160 --> 00:04:18,120
programming at the very beginning of the

107
00:04:15,540 --> 00:04:20,130
experiment it also becomes much much

108
00:04:18,120 --> 00:04:21,840
less obvious how to analyze bad events

109
00:04:20,130 --> 00:04:24,980
and basically you have to prove quantum

110
00:04:21,839 --> 00:04:26,330
query complexity lower balance to do so

111
00:04:24,980 --> 00:04:27,590
okay but despite these limitations

112
00:04:26,330 --> 00:04:31,130
they've actually been a number of

113
00:04:27,590 --> 00:04:33,590
positive results but there's some major

114
00:04:31,130 --> 00:04:34,909
holdouts and the the major holdout I

115
00:04:33,590 --> 00:04:37,070
want to talk about today and the one

116
00:04:34,910 --> 00:04:38,240
that I address in this work is something

117
00:04:37,070 --> 00:04:41,750
called in differentiable domain

118
00:04:38,240 --> 00:04:43,940
extension okay so here's here's the the

119
00:04:41,750 --> 00:04:46,730
core question consider merkle-damgard

120
00:04:43,940 --> 00:04:49,370
and suppose that the the hash function

121
00:04:46,730 --> 00:04:53,180
that we're starting from the the the the

122
00:04:49,370 --> 00:04:55,030
compression function is random Oracle is

123
00:04:53,180 --> 00:04:57,620
the is the merkle-damgard construction

124
00:04:55,030 --> 00:05:00,859
obtained from this does it also look

125
00:04:57,620 --> 00:05:03,200
like a random Oracle and it turns out

126
00:05:00,860 --> 00:05:05,030
that the answer is yes the way we the

127
00:05:03,200 --> 00:05:06,500
way this is shown is using something

128
00:05:05,030 --> 00:05:09,140
called in differentiability I won't

129
00:05:06,500 --> 00:05:10,430
really spend any time defining it but in

130
00:05:09,140 --> 00:05:12,080
differentiability is basically a real

131
00:05:10,430 --> 00:05:15,500
world versus ideal world thing we're in

132
00:05:12,080 --> 00:05:16,580
the real world you have you have the the

133
00:05:15,500 --> 00:05:18,920
compression function being a random

134
00:05:16,580 --> 00:05:21,380
Oracle and the the big hash function

135
00:05:18,920 --> 00:05:23,990
being merkle-damgard and in the ideal

136
00:05:21,380 --> 00:05:25,219
world you have the big hash function

137
00:05:23,990 --> 00:05:26,360
being a random Oracle and the little

138
00:05:25,220 --> 00:05:27,440
function being simulated and the

139
00:05:26,360 --> 00:05:31,640
adversary is trying to tell the

140
00:05:27,440 --> 00:05:34,400
difference okay and yeah

141
00:05:31,640 --> 00:05:36,650
differentiability implies that rent that

142
00:05:34,400 --> 00:05:38,679
merkle-damgard is as good as a random

143
00:05:36,650 --> 00:05:42,109
Oracle and a wide variety of settings

144
00:05:38,680 --> 00:05:43,910
okay so now moving to quantum basically

145
00:05:42,110 --> 00:05:49,060
just gives the adversary quantum access

146
00:05:43,910 --> 00:05:52,160
to everything and ask for

147
00:05:49,060 --> 00:05:54,260
indistinguishability to hold okay but

148
00:05:52,160 --> 00:05:55,910
here's a problem so remember the clot

149
00:05:54,260 --> 00:05:57,349
the traditional random Oracle model

150
00:05:55,910 --> 00:05:59,990
quantum random Oracle model proof

151
00:05:57,350 --> 00:06:02,350
technique fixes how it's going to answer

152
00:05:59,990 --> 00:06:05,270
queries at the very beginning and just

153
00:06:02,350 --> 00:06:06,470
fixes that once and for all in the

154
00:06:05,270 --> 00:06:08,270
context of in differentiability this

155
00:06:06,470 --> 00:06:10,340
basically corresponds to the simulator

156
00:06:08,270 --> 00:06:12,680
being stateless but it's actually a

157
00:06:10,340 --> 00:06:14,450
really easy theorem to show that

158
00:06:12,680 --> 00:06:16,550
stateless simulation is impossible for

159
00:06:14,450 --> 00:06:18,950
domain extension and this holds

160
00:06:16,550 --> 00:06:20,600
classically quantumly whatever and the

161
00:06:18,950 --> 00:06:22,400
idea is basically a stateless simulator

162
00:06:20,600 --> 00:06:24,680
allows you to compress a truth table for

163
00:06:22,400 --> 00:06:26,090
the big hash function into a truth table

164
00:06:24,680 --> 00:06:28,880
for a little hash function because these

165
00:06:26,090 --> 00:06:32,539
truth tables are random you you get it a

166
00:06:28,880 --> 00:06:34,400
contradiction okay so this is the

167
00:06:32,540 --> 00:06:36,230
question

168
00:06:34,400 --> 00:06:38,570
okay so in this work we end we actually

169
00:06:36,230 --> 00:06:40,820
perhaps surprisingly answer this

170
00:06:38,570 --> 00:06:42,170
question positively and say and show

171
00:06:40,820 --> 00:06:43,730
that actually we can do it for an in

172
00:06:42,170 --> 00:06:45,260
differential domain extension and the

173
00:06:43,730 --> 00:06:47,690
core technique is a new way to do

174
00:06:45,260 --> 00:06:50,300
on-the-fly simulation but for quantum

175
00:06:47,690 --> 00:06:53,210
random Oracle's okay so let's just jump

176
00:06:50,300 --> 00:06:54,740
right in to the idea so the first step

177
00:06:53,210 --> 00:06:56,750
is we're going to take we're going to

178
00:06:54,740 --> 00:06:58,730
take this uniform distribution over

179
00:06:56,750 --> 00:07:00,320
functions and we're going to do

180
00:06:58,730 --> 00:07:03,380
something called purification which is

181
00:07:00,320 --> 00:07:05,060
really just turning this classical

182
00:07:03,380 --> 00:07:07,190
probability distribution into a quantum

183
00:07:05,060 --> 00:07:09,470
state I won't really say what this is

184
00:07:07,190 --> 00:07:11,420
but it's some some weird quantum state

185
00:07:09,470 --> 00:07:13,670
such that if you try to actually peer

186
00:07:11,420 --> 00:07:15,680
inside it and measure it things are

187
00:07:13,670 --> 00:07:17,270
going to basically you're going to

188
00:07:15,680 --> 00:07:18,350
recover the uniform distribution gonna

189
00:07:17,270 --> 00:07:20,960
destroy the quantum state and recover

190
00:07:18,350 --> 00:07:22,280
the uniform distribution and so this

191
00:07:20,960 --> 00:07:24,349
purification process can be thought of

192
00:07:22,280 --> 00:07:28,039
as sort of the opposite of quantum

193
00:07:24,350 --> 00:07:29,200
measurements I do want to get a one

194
00:07:28,040 --> 00:07:32,150
little annoying

195
00:07:29,200 --> 00:07:34,789
thing out of the way quantum computation

196
00:07:32,150 --> 00:07:36,260
is reversible and so we have to model

197
00:07:34,790 --> 00:07:39,560
our quantum queries as a reversible

198
00:07:36,260 --> 00:07:40,940
computation so the way we do this is the

199
00:07:39,560 --> 00:07:43,820
average trace query actually contains an

200
00:07:40,940 --> 00:07:46,730
input and an output and the result of

201
00:07:43,820 --> 00:07:49,460
the query basically just X ORS the query

202
00:07:46,730 --> 00:07:55,630
output into the the value supplied by

203
00:07:49,460 --> 00:07:57,830
the adversary okay so why did why did

204
00:07:55,630 --> 00:08:01,310
quantum of fine the random Oracle model

205
00:07:57,830 --> 00:08:03,260
Dusen do anything useful well a

206
00:08:01,310 --> 00:08:04,460
consequence of the the wave particle

207
00:08:03,260 --> 00:08:06,500
duality is that we can basically

208
00:08:04,460 --> 00:08:09,260
interpret a quantum states as signals

209
00:08:06,500 --> 00:08:12,110
and once we have a signal we can do

210
00:08:09,260 --> 00:08:15,169
Fourier analysis and I don't know if

211
00:08:12,110 --> 00:08:17,030
there's a name for this but there's this

212
00:08:15,169 --> 00:08:21,349
nice principle that I'll just call

213
00:08:17,030 --> 00:08:23,179
reciprocity which says that if a if you

214
00:08:21,350 --> 00:08:26,150
have two systems quantum systems and

215
00:08:23,180 --> 00:08:29,180
system a is acting on system B in the

216
00:08:26,150 --> 00:08:30,890
primal domain when you look at it in the

217
00:08:29,180 --> 00:08:32,390
Fourier domain when you do your Fourier

218
00:08:30,890 --> 00:08:34,400
analysis well you actually see that's

219
00:08:32,390 --> 00:08:38,598
happening is that system B is acting on

220
00:08:34,400 --> 00:08:41,809
system a and this this reciprocity has

221
00:08:38,599 --> 00:08:43,250
been used in a lot of places it was used

222
00:08:41,809 --> 00:08:46,660
in a lot of these old impossibility

223
00:08:43,250 --> 00:08:50,380
results for unconditionally secure

224
00:08:46,660 --> 00:08:52,719
quantum protocols and it was also it's

225
00:08:50,380 --> 00:08:54,460
also the idea behind this classical

226
00:08:52,720 --> 00:08:58,960
result that quantum authentication

227
00:08:54,460 --> 00:09:00,820
implies encryption and and hopefully

228
00:08:58,960 --> 00:09:03,550
it's not too hard to see how this

229
00:09:00,820 --> 00:09:05,590
happens so if you know if you say if you

230
00:09:03,550 --> 00:09:07,569
had a quantum authentication scheme and

231
00:09:05,590 --> 00:09:08,770
it did not imply encryption if you're

232
00:09:07,570 --> 00:09:11,310
actually able to learn something about

233
00:09:08,770 --> 00:09:13,840
the state well

234
00:09:11,310 --> 00:09:16,449
that means that's essentially saying

235
00:09:13,840 --> 00:09:18,400
that the the quantity encryption is

236
00:09:16,450 --> 00:09:19,600
acting on your state because you're able

237
00:09:18,400 --> 00:09:21,819
to learn about it so when you look at

238
00:09:19,600 --> 00:09:23,530
the Fourier domain it says that you you

239
00:09:21,820 --> 00:09:27,160
are actually acting on the quantum state

240
00:09:23,530 --> 00:09:29,290
therefore violating authentication okay

241
00:09:27,160 --> 00:09:32,949
and the proof of this is basically very

242
00:09:29,290 --> 00:09:36,550
simple just basically using simple rules

243
00:09:32,950 --> 00:09:38,500
of Fourier transform where so system a

244
00:09:36,550 --> 00:09:41,709
acting on system B in the primal domain

245
00:09:38,500 --> 00:09:43,390
if we think of our operations as linear

246
00:09:41,710 --> 00:09:46,720
basically corresponds to an upper

247
00:09:43,390 --> 00:09:49,180
triangular matrix being applied to the

248
00:09:46,720 --> 00:09:51,760
system and when we look at things in the

249
00:09:49,180 --> 00:09:54,069
Fourier domain applying a linear

250
00:09:51,760 --> 00:09:55,300
transformation it turns out to be

251
00:09:54,070 --> 00:09:56,950
another linear transformation in the

252
00:09:55,300 --> 00:09:58,089
Fourier domain in the linear

253
00:09:56,950 --> 00:09:59,770
transformation is just the inverse

254
00:09:58,090 --> 00:10:01,510
transpose and when u inverse transfers

255
00:09:59,770 --> 00:10:03,520
an upper triangular matrix you get a

256
00:10:01,510 --> 00:10:05,290
lower triangular matrix which

257
00:10:03,520 --> 00:10:09,100
corresponds to system B acting on system

258
00:10:05,290 --> 00:10:10,390
a alright so we're do what we're gonna

259
00:10:09,100 --> 00:10:11,590
do is we're gonna sort of turn things on

260
00:10:10,390 --> 00:10:15,460
their head we're going to look at the

261
00:10:11,590 --> 00:10:18,940
Fourier domain and if we actually sort

262
00:10:15,460 --> 00:10:20,410
of work out this transpose inverse what

263
00:10:18,940 --> 00:10:21,760
happens is something really interesting

264
00:10:20,410 --> 00:10:24,880
so the understories query again is this

265
00:10:21,760 --> 00:10:27,040
XY and the oracle state is this h hat

266
00:10:24,880 --> 00:10:28,780
and what happens is the initial oracle

267
00:10:27,040 --> 00:10:31,390
state is just 0 corresponding to the

268
00:10:28,780 --> 00:10:33,760
fact that the uniform distribution or

269
00:10:31,390 --> 00:10:35,020
the constant signal has all its mass in

270
00:10:33,760 --> 00:10:38,080
the four-year domain on the or at the

271
00:10:35,020 --> 00:10:40,780
origin and the update procedure actually

272
00:10:38,080 --> 00:10:42,550
as expected by the reciprocity updates

273
00:10:40,780 --> 00:10:44,620
the oracle and it updates it in this

274
00:10:42,550 --> 00:10:46,300
interesting way where basically we add

275
00:10:44,620 --> 00:10:48,670
to the oracle a point function that an

276
00:10:46,300 --> 00:10:53,199
input X outputs Y and I'll put 0

277
00:10:48,670 --> 00:10:56,520
everywhere else okay so the once we have

278
00:10:53,200 --> 00:10:56,520
this the next idea is

279
00:10:56,750 --> 00:11:01,670
because our Oracle is now just the sum

280
00:11:00,530 --> 00:11:04,069
of all these point functions right

281
00:11:01,670 --> 00:11:06,079
started out as zero and we're just every

282
00:11:04,070 --> 00:11:08,300
query we're adding a point function we

283
00:11:06,080 --> 00:11:10,850
can actually compress it so after Q

284
00:11:08,300 --> 00:11:13,550
queries this function is nonzero at at

285
00:11:10,850 --> 00:11:16,130
most Q points so all we have to do is

286
00:11:13,550 --> 00:11:17,660
just represent our Oracle instead of the

287
00:11:16,130 --> 00:11:22,130
giant truth table we just represented it

288
00:11:17,660 --> 00:11:23,480
as all the nonzero points right and so

289
00:11:22,130 --> 00:11:25,400
this is you know it's very simple just

290
00:11:23,480 --> 00:11:28,850
to write down what the update procedure

291
00:11:25,400 --> 00:11:32,300
is for this compressed version of our

292
00:11:28,850 --> 00:11:35,330
Oracle so we've it looks like we've made

293
00:11:32,300 --> 00:11:37,250
progress we have that the Oracles state

294
00:11:35,330 --> 00:11:40,910
now is a database of input-output pairs

295
00:11:37,250 --> 00:11:42,500
it's you know small and in fact the the

296
00:11:40,910 --> 00:11:44,060
inputs correspond to the adversaries

297
00:11:42,500 --> 00:11:47,660
queries the inputs are exactly the

298
00:11:44,060 --> 00:11:50,329
points that the adversary queried or at

299
00:11:47,660 --> 00:11:51,980
least some subset thereof the problem is

300
00:11:50,330 --> 00:11:54,830
that the the outputs are these weird

301
00:11:51,980 --> 00:11:58,040
Fourier coefficients basically and they

302
00:11:54,830 --> 00:12:00,710
don't really correspond to outputs of

303
00:11:58,040 --> 00:12:02,270
the Oracle so all we do then is after we

304
00:12:00,710 --> 00:12:05,810
do this compression we revert back to

305
00:12:02,270 --> 00:12:07,339
the primal domain and now things are

306
00:12:05,810 --> 00:12:08,689
looking pretty good the input still

307
00:12:07,339 --> 00:12:11,570
remains the points that the adversary

308
00:12:08,690 --> 00:12:15,020
queried and the output is approximately

309
00:12:11,570 --> 00:12:16,490
the corresponding outputs of the Oracle

310
00:12:15,020 --> 00:12:18,829
there's a there's a caveat that I'll get

311
00:12:16,490 --> 00:12:20,780
to in a couple slides though and

312
00:12:18,830 --> 00:12:23,630
actually remarkably if you if you work

313
00:12:20,780 --> 00:12:25,670
out the details of what the of the

314
00:12:23,630 --> 00:12:27,770
update procedure for this for these

315
00:12:25,670 --> 00:12:30,770
databases it's actually very similar to

316
00:12:27,770 --> 00:12:33,260
the the classical on-the-fly simulation

317
00:12:30,770 --> 00:12:35,300
the main difference is that occasionally

318
00:12:33,260 --> 00:12:36,890
we actually have to erase and the reason

319
00:12:35,300 --> 00:12:38,120
is if you if you sort of think about

320
00:12:36,890 --> 00:12:41,569
what's happening in the Fourier domain

321
00:12:38,120 --> 00:12:44,450
if you you know query on the same point

322
00:12:41,570 --> 00:12:45,890
function twice the the effects will

323
00:12:44,450 --> 00:12:47,510
cancel and you'll actually remove a

324
00:12:45,890 --> 00:12:49,610
point from your database and this this

325
00:12:47,510 --> 00:12:52,040
also happens when after we revert back

326
00:12:49,610 --> 00:12:56,140
to the primal domain whereas classically

327
00:12:52,040 --> 00:12:58,160
you never forget anything all right so I

328
00:12:56,140 --> 00:12:59,930
call these things compressed Oracle's

329
00:12:58,160 --> 00:13:02,829
and they solve a lot of the problems

330
00:12:59,930 --> 00:13:05,180
that we had with the traditional

331
00:13:02,830 --> 00:13:07,580
approaches for the quantum random Oracle

332
00:13:05,180 --> 00:13:08,810
it allows us to know what the inputs the

333
00:13:07,580 --> 00:13:10,850
adversary cares about they're just

334
00:13:08,810 --> 00:13:12,640
Exce columns of our database we know the

335
00:13:10,850 --> 00:13:16,670
corresponding output says the Y columns

336
00:13:12,640 --> 00:13:19,069
this this a so far this approach doesn't

337
00:13:16,670 --> 00:13:21,529
let you do any programming but actually

338
00:13:19,070 --> 00:13:25,010
later on in this session and some

339
00:13:21,529 --> 00:13:27,470
subsequent work we actually do show how

340
00:13:25,010 --> 00:13:30,260
to program and also it turns out you can

341
00:13:27,470 --> 00:13:31,310
easily analyze bad events like

342
00:13:30,260 --> 00:13:33,580
collisions it's much harder than

343
00:13:31,310 --> 00:13:37,939
classical still but easier than it was

344
00:13:33,580 --> 00:13:41,750
before okay so what happened we had we

345
00:13:37,940 --> 00:13:45,310
had this argument that we had to do we

346
00:13:41,750 --> 00:13:47,810
had to do our reduction having the

347
00:13:45,310 --> 00:13:49,609
fixing the Oracle at the very beginning

348
00:13:47,810 --> 00:13:51,739
so how did we get around that and it

349
00:13:49,610 --> 00:13:53,120
turns out that the the the core problem

350
00:13:51,740 --> 00:13:57,740
which was this observer effect actually

351
00:13:53,120 --> 00:13:59,180
also offers our solution so intuitively

352
00:13:57,740 --> 00:14:01,640
what's happening is the adversary is

353
00:13:59,180 --> 00:14:06,290
actually learning about the the hash

354
00:14:01,640 --> 00:14:09,410
function H through its queries and so by

355
00:14:06,290 --> 00:14:11,240
quantifying the random Oracle we see

356
00:14:09,410 --> 00:14:12,500
that by the observer effect when the

357
00:14:11,240 --> 00:14:14,240
adversary learns anything about the

358
00:14:12,500 --> 00:14:17,630
Oracle the adversary actually had to

359
00:14:14,240 --> 00:14:18,680
disturb the Oracle so as the adversaries

360
00:14:17,630 --> 00:14:21,830
making queries he's necessarily

361
00:14:18,680 --> 00:14:23,390
affecting the the random Oracle and the

362
00:14:21,830 --> 00:14:27,020
the compressed Oracle's basically offer

363
00:14:23,390 --> 00:14:28,699
a way to decode this disturbance now

364
00:14:27,020 --> 00:14:30,589
there are caveats

365
00:14:28,700 --> 00:14:33,170
so because of the way we did the

366
00:14:30,589 --> 00:14:34,370
compression in the for if you call in

367
00:14:33,170 --> 00:14:35,540
the Fourier domain and for the

368
00:14:34,370 --> 00:14:37,970
compression we're only storing the

369
00:14:35,540 --> 00:14:39,920
points that are nonzero so for all the

370
00:14:37,970 --> 00:14:42,050
points in the database once we've

371
00:14:39,920 --> 00:14:45,740
reverted back to the primal domain we've

372
00:14:42,050 --> 00:14:49,099
effectively removed the the constant

373
00:14:45,740 --> 00:14:51,770
fourier coefficient and this causes some

374
00:14:49,100 --> 00:14:53,540
small error so the the Y values aren't

375
00:14:51,770 --> 00:14:56,449
exactly the query outputs they're close

376
00:14:53,540 --> 00:14:59,030
but not exact and then there's the the

377
00:14:56,450 --> 00:15:00,320
additional problem that examine if we

378
00:14:59,030 --> 00:15:02,720
actually took this database and we try

379
00:15:00,320 --> 00:15:04,610
to examine it it's it's this funny

380
00:15:02,720 --> 00:15:06,380
quantum state and learning anything

381
00:15:04,610 --> 00:15:08,600
about it is going to disturb it and

382
00:15:06,380 --> 00:15:09,709
potentially mess up the whole system so

383
00:15:08,600 --> 00:15:11,770
we have to actually still be very

384
00:15:09,709 --> 00:15:15,890
careful about how we use this database

385
00:15:11,770 --> 00:15:17,720
nonetheless this this technique is good

386
00:15:15,890 --> 00:15:19,880
enough for many applications it turns

387
00:15:17,720 --> 00:15:21,209
out it gives you exactly the right just

388
00:15:19,880 --> 00:15:23,189
coincidentally it's you

389
00:15:21,209 --> 00:15:26,969
exactly the right information needed to

390
00:15:23,189 --> 00:15:30,360
do simulation for quantum and

391
00:15:26,970 --> 00:15:33,480
differentiability of merkle-damgard it

392
00:15:30,360 --> 00:15:35,999
turns out we can also reprove a lot of

393
00:15:33,480 --> 00:15:39,720
existing quantum lower bounds in a more

394
00:15:35,999 --> 00:15:42,629
unified and maybe direct approach and we

395
00:15:39,720 --> 00:15:46,079
also show the CC security of plain

396
00:15:42,629 --> 00:15:48,660
Fujisaki Okamoto there have been a

397
00:15:46,079 --> 00:15:50,219
number of variants that have been proven

398
00:15:48,660 --> 00:15:52,050
secure but we were able to show that the

399
00:15:50,220 --> 00:15:54,689
original scheme is secure

400
00:15:52,050 --> 00:15:56,519
and and since our since this work we've

401
00:15:54,689 --> 00:16:00,420
there have been a number of follow-up

402
00:15:56,519 --> 00:16:02,699
works showing many more applications so

403
00:16:00,420 --> 00:16:04,589
with that I'll conclude and just finish

404
00:16:02,699 --> 00:16:06,508
with the message that's when working

405
00:16:04,589 --> 00:16:08,240
with quantum random Oracle is always

406
00:16:06,509 --> 00:16:18,700
purify your Oracle

407
00:16:08,240 --> 00:16:18,700
[Applause]

408
00:16:18,890 --> 00:16:29,040
few minutes for questions please come to

409
00:16:21,540 --> 00:16:31,290
microphone there's something which

410
00:16:29,040 --> 00:16:33,660
bothers me about the model you presented

411
00:16:31,290 --> 00:16:37,860
you say that when you are making a query

412
00:16:33,660 --> 00:16:39,959
you are modifying the Oracle with that

413
00:16:37,860 --> 00:16:42,960
point function if you are querying the

414
00:16:39,960 --> 00:16:45,720
same point again then it is canceled

415
00:16:42,960 --> 00:16:48,150
exactly and if I'm going to query the

416
00:16:45,720 --> 00:16:51,360
Oracle a third time will I get the

417
00:16:48,150 --> 00:16:54,480
original answers in the first and second

418
00:16:51,360 --> 00:16:55,950
or will I get a different one I I think

419
00:16:54,480 --> 00:16:58,890
the right answer is that the question is

420
00:16:55,950 --> 00:17:00,780
not really well-defined but maybe the

421
00:16:58,890 --> 00:17:02,189
the intuitive answer is no you actually

422
00:17:00,780 --> 00:17:06,420
won't aren't guaranteed to get the same

423
00:17:02,190 --> 00:17:09,030
answer but in order to actually if you

424
00:17:06,420 --> 00:17:10,740
think about querying twice at the end of

425
00:17:09,030 --> 00:17:12,690
that at the end of the second query you

426
00:17:10,740 --> 00:17:14,339
actually know nothing about the Oracle

427
00:17:12,690 --> 00:17:16,440
so it's it's okay that the Oracle

428
00:17:14,339 --> 00:17:18,270
answered differently but in this sense

429
00:17:16,440 --> 00:17:21,750
it's different than the classical model

430
00:17:18,270 --> 00:17:24,389
it is in the molecule it is different or

431
00:17:21,750 --> 00:17:26,730
the the the model is the same this is

432
00:17:24,390 --> 00:17:28,400
just in the proof right in the proof

433
00:17:26,730 --> 00:17:31,410
we're saying we're going to take the

434
00:17:28,400 --> 00:17:32,670
we're going to take the classical random

435
00:17:31,410 --> 00:17:33,990
probability distribution and replace it

436
00:17:32,670 --> 00:17:36,690
with a quantum state and has this

437
00:17:33,990 --> 00:17:39,420
property but the the original model

438
00:17:36,690 --> 00:17:41,450
still just has a random a random Oracle

439
00:17:39,420 --> 00:17:46,730
that's fixed at the very beginning

440
00:17:41,450 --> 00:17:46,730
Thanks it's good to see you here at E

441
00:17:48,410 --> 00:17:53,400
one more question could go back to the

442
00:17:50,610 --> 00:17:55,379
the follow-up work are there any

443
00:17:53,400 --> 00:17:57,840
particular applications that still

444
00:17:55,380 --> 00:18:02,690
remain you know not well addressed by

445
00:17:57,840 --> 00:18:05,429
the technique I I mean there's you know

446
00:18:02,690 --> 00:18:06,960
many papers that have not yet been

447
00:18:05,430 --> 00:18:09,960
proven secure in the random Oracle model

448
00:18:06,960 --> 00:18:13,140
I think for me the perhaps the most

449
00:18:09,960 --> 00:18:16,050
interesting open question right now is

450
00:18:13,140 --> 00:18:18,900
if you can show that the random Oracle

451
00:18:16,050 --> 00:18:20,490
model implies the ideal cypher model so

452
00:18:18,900 --> 00:18:22,260
basically extending the in

453
00:18:20,490 --> 00:18:27,350
differentiability to

454
00:18:22,260 --> 00:18:27,350
these constructions of of ideal ciphers

455
00:18:29,360 --> 00:18:34,649
any other questions all right let's

456
00:18:33,360 --> 00:18:37,849
think mark again

457
00:18:34,650 --> 00:18:37,849
[Applause]

