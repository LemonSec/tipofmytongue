1
00:00:05,220 --> 00:00:10,480
hello all right thanks for the

2
00:00:07,930 --> 00:00:12,969
introduction so today I will be talking

3
00:00:10,480 --> 00:00:15,430
about explicit rate one non-medical code

4
00:00:12,970 --> 00:00:18,750
for local tempering so this is joint

5
00:00:15,430 --> 00:00:21,759
work with stevia Gupta and Hamato mochi

6
00:00:18,750 --> 00:00:23,948
so let me first tell you what it's now

7
00:00:21,760 --> 00:00:26,350
edible code so you have already seen

8
00:00:23,949 --> 00:00:29,410
some of this from Marshalls talk but let

9
00:00:26,350 --> 00:00:31,539
me just quickly review remind you so

10
00:00:29,410 --> 00:00:33,610
nominal code is a primitive introduced

11
00:00:31,539 --> 00:00:37,630
by it's in box keep itraq and weights

12
00:00:33,610 --> 00:00:40,239
back in 2010 so this primitive is

13
00:00:37,630 --> 00:00:42,790
originally motivated by tempor resilient

14
00:00:40,239 --> 00:00:45,099
cryptography so imagine you have a

15
00:00:42,790 --> 00:00:47,230
signature schemes where the anniversary

16
00:00:45,100 --> 00:00:49,450
might be able to temper the internal

17
00:00:47,230 --> 00:00:52,180
state of the Challenger and then obtain

18
00:00:49,450 --> 00:00:54,790
a signature under some temper the secret

19
00:00:52,180 --> 00:00:57,579
key and then try to forge the signature

20
00:00:54,790 --> 00:01:00,039
under the original secret key under such

21
00:00:57,579 --> 00:01:02,829
tempering attacks the classical security

22
00:01:00,039 --> 00:01:04,420
guarantee of signature schemes does not

23
00:01:02,829 --> 00:01:07,330
say anything about whether the

24
00:01:04,420 --> 00:01:10,090
anniversary could succeed or not so the

25
00:01:07,330 --> 00:01:12,670
idea is that if we use now malleable

26
00:01:10,090 --> 00:01:14,500
code to encode a secret key this could

27
00:01:12,670 --> 00:01:16,630
help preserve the security of the

28
00:01:14,500 --> 00:01:20,979
signature schemes even in the presence

29
00:01:16,630 --> 00:01:23,560
of such tempering attacks so intuitively

30
00:01:20,979 --> 00:01:26,229
now malleable code is a coding scheme

31
00:01:23,560 --> 00:01:28,599
such that if some tampering happened on

32
00:01:26,229 --> 00:01:30,729
the code word then a tempered code word

33
00:01:28,599 --> 00:01:33,520
either encodes the original message or

34
00:01:30,729 --> 00:01:36,759
some messages completely unrelated with

35
00:01:33,520 --> 00:01:38,560
the original message specifically let's

36
00:01:36,759 --> 00:01:41,289
say you have a message that is first

37
00:01:38,560 --> 00:01:44,470
being encoded and then tempered by some

38
00:01:41,289 --> 00:01:46,300
function f and then you gets a tempered

39
00:01:44,470 --> 00:01:47,979
code word and then you decode this

40
00:01:46,300 --> 00:01:51,489
temporary code word to get a tempered

41
00:01:47,979 --> 00:01:53,860
tempered message so we want to say that

42
00:01:51,489 --> 00:01:56,110
to this tempered message message Toyota

43
00:01:53,860 --> 00:01:58,989
could only be related with the original

44
00:01:56,110 --> 00:02:00,640
message in three following ways the

45
00:01:58,989 --> 00:02:03,099
first way is by identity function

46
00:02:00,640 --> 00:02:05,770
meaning that the tempered message is

47
00:02:03,099 --> 00:02:07,840
identical to the original message the

48
00:02:05,770 --> 00:02:10,478
second way is a special symbol but

49
00:02:07,840 --> 00:02:14,319
simply means that the tempered code word

50
00:02:10,479 --> 00:02:15,879
is an invalid encoding and finally the

51
00:02:14,319 --> 00:02:17,829
server way is a constant function

52
00:02:15,879 --> 00:02:19,899
meaning that this tempered

53
00:02:17,830 --> 00:02:22,560
message is being fixed to some constant

54
00:02:19,900 --> 00:02:26,170
no matter what the original message is

55
00:02:22,560 --> 00:02:29,140
more formally now variable code ensures

56
00:02:26,170 --> 00:02:32,220
that for this tempering function f we

57
00:02:29,140 --> 00:02:35,079
can we have there exist a simulator that

58
00:02:32,220 --> 00:02:37,990
outputs a distribution over these three

59
00:02:35,080 --> 00:02:40,540
types of functions such that the

60
00:02:37,990 --> 00:02:43,240
distribution of the tempered message in

61
00:02:40,540 --> 00:02:46,840
the real world is indistinguishable from

62
00:02:43,240 --> 00:02:49,060
the simulated distribution so note that

63
00:02:46,840 --> 00:02:51,370
this simulator only takes the tempering

64
00:02:49,060 --> 00:02:55,690
function as the input and it's oblivious

65
00:02:51,370 --> 00:02:58,090
to the original message so if you think

66
00:02:55,690 --> 00:03:00,220
about this definition for a while you

67
00:02:58,090 --> 00:03:01,810
will quickly realize that this tempering

68
00:03:00,220 --> 00:03:04,390
function can now be an arbitrary

69
00:03:01,810 --> 00:03:06,430
function the reason is very simple so

70
00:03:04,390 --> 00:03:08,170
since this is the coding schemes the

71
00:03:06,430 --> 00:03:10,600
tempering function can always first

72
00:03:08,170 --> 00:03:12,549
decode the code word first and then flip

73
00:03:10,600 --> 00:03:15,670
a bit of the message and then reading

74
00:03:12,550 --> 00:03:18,850
codes in this way the tempered message

75
00:03:15,670 --> 00:03:21,549
message Tara will always be the original

76
00:03:18,850 --> 00:03:23,620
message with one bit flipped then there

77
00:03:21,550 --> 00:03:27,310
cannot be any simulator that simulate

78
00:03:23,620 --> 00:03:30,519
this process therefore now variable code

79
00:03:27,310 --> 00:03:33,190
is always defined with respect to a

80
00:03:30,519 --> 00:03:36,820
fixed set of tempering functions and

81
00:03:33,190 --> 00:03:39,609
just like error correcting codes we

82
00:03:36,820 --> 00:03:41,109
define the rate as lens of the ratio

83
00:03:39,610 --> 00:03:44,080
between the length of the message and

84
00:03:41,110 --> 00:03:46,810
the length of the codeword so higher

85
00:03:44,080 --> 00:03:49,300
intuitively high rate here implies that

86
00:03:46,810 --> 00:03:53,560
overhead of achieving now variability is

87
00:03:49,300 --> 00:03:57,130
low so since the introduction of nominal

88
00:03:53,560 --> 00:03:58,810
codes after many years of research we

89
00:03:57,130 --> 00:04:00,850
find that nominal code is actually

90
00:03:58,810 --> 00:04:04,150
closely related with many other

91
00:04:00,850 --> 00:04:07,810
primitives in crypto for example in a

92
00:04:04,150 --> 00:04:09,010
field of privacy amplification we have

93
00:04:07,810 --> 00:04:11,860
this primitive called numerical

94
00:04:09,010 --> 00:04:13,510
extractors and turns out that normally

95
00:04:11,860 --> 00:04:16,000
board structures and now malleable codes

96
00:04:13,510 --> 00:04:18,219
are very closely related and we have

97
00:04:16,000 --> 00:04:22,750
many excellent research going on in this

98
00:04:18,220 --> 00:04:24,940
area next in the setting of multi-party

99
00:04:22,750 --> 00:04:27,490
computation we also have fun

100
00:04:24,940 --> 00:04:29,560
constructions of nominal commitments

101
00:04:27,490 --> 00:04:31,360
using now variable codes as building

102
00:04:29,560 --> 00:04:34,210
blocks

103
00:04:31,360 --> 00:04:36,580
in relatively new primitives called now

104
00:04:34,210 --> 00:04:39,280
malleable secret sharing many of those

105
00:04:36,580 --> 00:04:41,438
constructions of nonmetals extracts no

106
00:04:39,280 --> 00:04:43,210
malleable secret secret sharings also

107
00:04:41,439 --> 00:04:46,780
use no malleable code as a building

108
00:04:43,210 --> 00:04:49,568
block so the research objective of this

109
00:04:46,780 --> 00:04:52,599
line of research is to find explicit

110
00:04:49,569 --> 00:04:54,819
construction of no malleable codes with

111
00:04:52,599 --> 00:04:57,969
high rate against the sophisticated

112
00:04:54,819 --> 00:05:00,789
tempering families so high rate directly

113
00:04:57,969 --> 00:05:03,729
translate into high efficiency in those

114
00:05:00,789 --> 00:05:05,889
applications and reductions and as a

115
00:05:03,729 --> 00:05:08,650
sophistication of such tampering

116
00:05:05,889 --> 00:05:13,840
families implies a stronger security

117
00:05:08,650 --> 00:05:16,810
guarantee so in this talk we will be

118
00:05:13,840 --> 00:05:18,698
focusing on local tempering so let me

119
00:05:16,810 --> 00:05:22,300
first tell you what is local tempering

120
00:05:18,699 --> 00:05:24,310
using a very simple example so here you

121
00:05:22,300 --> 00:05:27,759
are we have a code word that consists of

122
00:05:24,310 --> 00:05:30,129
four bits a 1 2 or so for this tempering

123
00:05:27,759 --> 00:05:33,370
function we'll take this 4 bits as input

124
00:05:30,129 --> 00:05:36,400
and output a tempered code word so here

125
00:05:33,370 --> 00:05:38,259
the first input bit well depends on the

126
00:05:36,400 --> 00:05:40,000
first output bits will only depend on

127
00:05:38,259 --> 00:05:42,819
the first input bit and a second input

128
00:05:40,000 --> 00:05:44,560
bit and the second output bit will

129
00:05:42,819 --> 00:05:48,009
depend on the first input bit and

130
00:05:44,560 --> 00:05:50,830
asserting prove it and so on so we say a

131
00:05:48,009 --> 00:05:54,009
tempering function f has staudte output

132
00:05:50,830 --> 00:05:57,400
locality if our output bits depends on

133
00:05:54,009 --> 00:06:01,150
at most Delta input bits so here in this

134
00:05:57,400 --> 00:06:05,438
example here every output bit depends on

135
00:06:01,150 --> 00:06:09,549
precisely two input bits so f has F has

136
00:06:05,439 --> 00:06:13,029
two out for locality analogously we say

137
00:06:09,550 --> 00:06:15,909
that F has delta input locality if every

138
00:06:13,029 --> 00:06:18,879
input bits influence on at most Delta

139
00:06:15,909 --> 00:06:21,400
output bits so in this example here the

140
00:06:18,879 --> 00:06:24,069
first bit actually influence on order

141
00:06:21,400 --> 00:06:28,120
our output bits therefore this function

142
00:06:24,069 --> 00:06:30,520
f has four input locality so we see a

143
00:06:28,120 --> 00:06:35,770
tempering function f is that a local if

144
00:06:30,520 --> 00:06:38,198
it has Delta output locality so do note

145
00:06:35,770 --> 00:06:40,359
that for Delta local tempering functions

146
00:06:38,199 --> 00:06:43,000
this function can actually have

147
00:06:40,360 --> 00:06:44,759
arbitrarily large input locality just

148
00:06:43,000 --> 00:06:47,009
like this example here

149
00:06:44,759 --> 00:06:49,919
and the this fact actually turns out to

150
00:06:47,009 --> 00:06:53,939
present significant technical challenges

151
00:06:49,919 --> 00:06:56,188
when designing now variable code so in

152
00:06:53,939 --> 00:06:59,400
this work we gave a compiler that

153
00:06:56,189 --> 00:07:03,479
compiles a low rate nominal code into a

154
00:06:59,400 --> 00:07:06,568
rate one normal code so specifically for

155
00:07:03,479 --> 00:07:08,938
any constant C between zero and one we

156
00:07:06,569 --> 00:07:11,099
gave a compiler that compiles a low rate

157
00:07:08,939 --> 00:07:13,710
nominal code against local tampering

158
00:07:11,099 --> 00:07:16,259
with an appropriate leakage resilience

159
00:07:13,710 --> 00:07:19,888
property into a rate one now variable

160
00:07:16,259 --> 00:07:24,300
code against this constant C times login

161
00:07:19,889 --> 00:07:26,849
local tempering so boy it all gives the

162
00:07:24,300 --> 00:07:30,199
first feasibility result of nominal code

163
00:07:26,849 --> 00:07:33,360
against a local tempering our compiler

164
00:07:30,199 --> 00:07:35,999
instantiated with boy dose construction

165
00:07:33,360 --> 00:07:39,120
gives us a rate 1 now variable code

166
00:07:35,999 --> 00:07:44,069
against C times log and local tempering

167
00:07:39,120 --> 00:07:46,050
and as a corollary of our results we

168
00:07:44,069 --> 00:07:48,509
obtain a rate 1 now malleable code

169
00:07:46,050 --> 00:07:50,189
against NC zero tempering this is

170
00:07:48,509 --> 00:07:54,990
because NC 0 tempering is all a

171
00:07:50,189 --> 00:07:56,659
tempering with constant locality so to

172
00:07:54,990 --> 00:08:00,419
give you a broad detailed comparison

173
00:07:56,659 --> 00:08:03,209
when the locality is a constant or NC 0

174
00:08:00,419 --> 00:08:06,209
tempering boy at all's construction has

175
00:08:03,209 --> 00:08:09,810
a rate has constant rate while our work

176
00:08:06,209 --> 00:08:11,580
has rate 1 when the locality goes beyond

177
00:08:09,810 --> 00:08:14,490
constant and is smaller than the

178
00:08:11,580 --> 00:08:17,188
threshold we set here our boil off

179
00:08:14,490 --> 00:08:20,490
construction has a decaying rate while

180
00:08:17,189 --> 00:08:23,279
our work still has Ric 1 when the

181
00:08:20,490 --> 00:08:25,289
locality goes beyond the logon boy dose

182
00:08:23,279 --> 00:08:28,139
construction at the rate of their

183
00:08:25,289 --> 00:08:30,649
construction has is linear dependent on

184
00:08:28,139 --> 00:08:33,329
the inverse of the locality

185
00:08:30,649 --> 00:08:37,198
unfortunately our work does not extend

186
00:08:33,328 --> 00:08:39,989
to this case so as a very cool

187
00:08:37,198 --> 00:08:42,779
application of normal code against local

188
00:08:39,990 --> 00:08:46,230
tempering boy at all can construct

189
00:08:42,779 --> 00:08:48,300
nominal code against AC 0 tempering so

190
00:08:46,230 --> 00:08:50,819
in this application here they actually

191
00:08:48,300 --> 00:08:52,050
requires the building block the now

192
00:08:50,819 --> 00:08:54,120
malleable code against the local

193
00:08:52,050 --> 00:08:56,760
tempering to have a very high locality

194
00:08:54,120 --> 00:08:58,499
so our work here does not improve the

195
00:08:56,760 --> 00:09:03,749
rate of their there

196
00:08:58,499 --> 00:09:06,119
easy tampering here so before I go into

197
00:09:03,749 --> 00:09:08,999
our compiler let me tell you a bit more

198
00:09:06,119 --> 00:09:12,689
about what do we know about now Matabele

199
00:09:08,999 --> 00:09:14,789
code against local temporary so we have

200
00:09:12,689 --> 00:09:17,429
very nice multicolored constructions

201
00:09:14,789 --> 00:09:19,468
that tells us when does no malleable

202
00:09:17,429 --> 00:09:22,139
code rate one available code exists

203
00:09:19,469 --> 00:09:25,109
based on how large the tampering family

204
00:09:22,139 --> 00:09:26,789
is such multicolor constructions implies

205
00:09:25,109 --> 00:09:30,329
construction in the common reference

206
00:09:26,789 --> 00:09:32,789
string model so firstly first at all

207
00:09:30,329 --> 00:09:37,079
tells us that when a tempering family

208
00:09:32,789 --> 00:09:39,839
has size 2 to Napoleon read one nominal

209
00:09:37,079 --> 00:09:42,988
code exists and moreover their

210
00:09:39,839 --> 00:09:44,759
construction is efficient when the

211
00:09:42,989 --> 00:09:47,549
tempering family size goes beyond that

212
00:09:44,759 --> 00:09:50,579
and it's actually 2 to D 2 to this small

213
00:09:47,549 --> 00:09:53,819
of n Jairaj and guru Swami's results

214
00:09:50,579 --> 00:09:56,909
tells us that even in this case rate one

215
00:09:53,819 --> 00:10:01,169
nominal code still exists however their

216
00:09:56,909 --> 00:10:03,689
construction is inefficient so a quick

217
00:10:01,169 --> 00:10:06,329
calculation will show you that for a

218
00:10:03,689 --> 00:10:08,909
delta local tempering family the size of

219
00:10:06,329 --> 00:10:12,539
this family is roughly two to the two to

220
00:10:08,909 --> 00:10:15,779
the delta x n so if you plug in doubt

221
00:10:12,539 --> 00:10:18,359
err with order of log n forces also

222
00:10:15,779 --> 00:10:21,779
result tells us that efficient rate when

223
00:10:18,359 --> 00:10:24,269
nominal code exists in this case when

224
00:10:21,779 --> 00:10:27,720
Delta goes beyond logon and is still

225
00:10:24,269 --> 00:10:30,179
small of n th include Swami tells us

226
00:10:27,720 --> 00:10:34,349
that read 1 now Mabel could exist

227
00:10:30,179 --> 00:10:36,749
however it remains unclear if efficient

228
00:10:34,349 --> 00:10:40,529
Nam Rick one now medical code exists in

229
00:10:36,749 --> 00:10:43,169
this case so as a reminder our work here

230
00:10:40,529 --> 00:10:46,109
shows that we can get a explicit

231
00:10:43,169 --> 00:10:48,749
efficient read 1 nominal code when Delta

232
00:10:46,109 --> 00:10:53,879
is smaller than as some constant times

233
00:10:48,749 --> 00:10:56,999
log in so before our work in a plane

234
00:10:53,879 --> 00:10:59,099
model all the known explicit read 1

235
00:10:56,999 --> 00:11:02,699
constructions are actually against

236
00:10:59,099 --> 00:11:06,359
functions that has implicit one and out

237
00:11:02,699 --> 00:11:08,758
for locality one such tampering families

238
00:11:06,359 --> 00:11:11,959
is referred to as speed level tempering

239
00:11:08,759 --> 00:11:11,959
the Lee in the literature

240
00:11:12,140 --> 00:11:18,199
so now let me tell you about our

241
00:11:14,630 --> 00:11:20,990
compiler so fix any constant C between 0

242
00:11:18,200 --> 00:11:23,089
and 1 our compiler will use the

243
00:11:20,990 --> 00:11:26,420
following ingredients with appropriate

244
00:11:23,089 --> 00:11:28,790
parameters first we'll be using error

245
00:11:26,420 --> 00:11:32,479
correcting secret sharing scheme that

246
00:11:28,790 --> 00:11:36,110
has rate 1 and the near linear distance

247
00:11:32,480 --> 00:11:38,540
and also near linear independence such

248
00:11:36,110 --> 00:11:42,100
error correcting secretion schemes could

249
00:11:38,540 --> 00:11:45,890
be based on standard reed-solomon code

250
00:11:42,100 --> 00:11:47,990
secondly we will be using a base now

251
00:11:45,890 --> 00:11:51,740
variable code that is secure against

252
00:11:47,990 --> 00:11:53,810
order of logon local tempering so this

253
00:11:51,740 --> 00:11:58,160
the base numerical code could possibly

254
00:11:53,810 --> 00:12:00,410
have very low rate and it's risk we in

255
00:11:58,160 --> 00:12:02,269
addition to now malleability we require

256
00:12:00,410 --> 00:12:06,170
to be resilient to a constant fraction

257
00:12:02,269 --> 00:12:08,060
of leakage finally we will also be using

258
00:12:06,170 --> 00:12:11,479
a pseudo-random generator against a

259
00:12:08,060 --> 00:12:14,899
finite state machine by Nissen so we

260
00:12:11,480 --> 00:12:17,269
remarked that other alternative pseudo

261
00:12:14,899 --> 00:12:20,240
random objects potentially also suffice

262
00:12:17,269 --> 00:12:22,550
here so given these three ingredients

263
00:12:20,240 --> 00:12:25,610
error correcting super sharing schemes a

264
00:12:22,550 --> 00:12:28,910
base numerical code and as suitable

265
00:12:25,610 --> 00:12:30,920
pseudo random objects our compiler will

266
00:12:28,910 --> 00:12:34,130
use these three ingredients in a

267
00:12:30,920 --> 00:12:36,769
blackbox way to cut output a rate 1 now

268
00:12:34,130 --> 00:12:40,579
valuable code against the C times log

269
00:12:36,769 --> 00:12:42,890
and local tempering families so our

270
00:12:40,579 --> 00:12:45,709
construction draws inspiration from the

271
00:12:42,890 --> 00:12:48,110
following two components the first is a

272
00:12:45,709 --> 00:12:51,290
rate amplification techniques by agraja

273
00:12:48,110 --> 00:12:53,510
at all and second is a PRG techniques by

274
00:12:51,290 --> 00:12:56,480
boy doll so let me tell you a bit about

275
00:12:53,510 --> 00:12:58,579
both of them so ago I had all

276
00:12:56,480 --> 00:13:01,490
constructed a rate 1 numerical code

277
00:12:58,579 --> 00:13:04,579
against a bit level tempering so here is

278
00:13:01,490 --> 00:13:07,130
just a very simple example to of what a

279
00:13:04,579 --> 00:13:09,800
bit level tempering looks like so such

280
00:13:07,130 --> 00:13:14,320
functions has implicating 1 and output

281
00:13:09,800 --> 00:13:17,300
locality 1 so their compiler is

282
00:13:14,320 --> 00:13:20,449
constructed in the following way so

283
00:13:17,300 --> 00:13:22,520
given any message the first day first

284
00:13:20,449 --> 00:13:24,589
encoded this message using error

285
00:13:22,520 --> 00:13:25,490
correcting secret sharing scheme to

286
00:13:24,589 --> 00:13:29,600
obtain

287
00:13:25,490 --> 00:13:32,060
Cold War a next they were sample a

288
00:13:29,600 --> 00:13:35,300
subset of those indices from codeword a

289
00:13:32,060 --> 00:13:38,000
and for roughly half of those indices

290
00:13:35,300 --> 00:13:40,670
they intentionally introduced arrows

291
00:13:38,000 --> 00:13:43,370
into this codeword and for the other

292
00:13:40,670 --> 00:13:47,719
roughly other hub half of those indices

293
00:13:43,370 --> 00:13:52,220
they will keep those bits untouched next

294
00:13:47,720 --> 00:13:54,650
they were encoded this consistency check

295
00:13:52,220 --> 00:13:58,190
information using a base now malleable

296
00:13:54,650 --> 00:14:00,910
code so their final code word consists

297
00:13:58,190 --> 00:14:03,470
of two parts the main code were C and

298
00:14:00,910 --> 00:14:05,329
the main code word C which is error

299
00:14:03,470 --> 00:14:08,780
correcting code with arrow introduced

300
00:14:05,330 --> 00:14:10,190
and then attack which contains excuse me

301
00:14:08,780 --> 00:14:13,130
contains the consistent track

302
00:14:10,190 --> 00:14:16,790
information so to decode this code word

303
00:14:13,130 --> 00:14:19,100
one first decode the Irani a--'s error

304
00:14:16,790 --> 00:14:21,349
correcting code and then cross-check the

305
00:14:19,100 --> 00:14:25,100
information of those arrows with the tag

306
00:14:21,350 --> 00:14:27,200
to see if if they are consistent so

307
00:14:25,100 --> 00:14:29,780
unfortunately there are techniques here

308
00:14:27,200 --> 00:14:32,620
does not extend to tampering functions

309
00:14:29,780 --> 00:14:35,510
with high include locality x-ray they're

310
00:14:32,620 --> 00:14:37,270
comparators not even extend to functions

311
00:14:35,510 --> 00:14:41,240
with improve locality too

312
00:14:37,270 --> 00:14:44,060
so in order to deal with this technical

313
00:14:41,240 --> 00:14:46,340
challenge we use a PRG technique by boy

314
00:14:44,060 --> 00:14:48,770
door to circumvent the technical

315
00:14:46,340 --> 00:14:52,160
challenges posed by input bits with high

316
00:14:48,770 --> 00:14:55,699
improve locality so on a very very high

317
00:14:52,160 --> 00:14:57,530
level imagine you have a code word that

318
00:14:55,700 --> 00:15:00,140
has two parts the left part and the

319
00:14:57,530 --> 00:15:03,500
right part so this techniques will keep

320
00:15:00,140 --> 00:15:06,020
the left part as it is and then hide the

321
00:15:03,500 --> 00:15:09,650
right part among many many redundant

322
00:15:06,020 --> 00:15:11,449
bits and the position of those right of

323
00:15:09,650 --> 00:15:14,449
those informative bits from the right

324
00:15:11,450 --> 00:15:19,310
part is hide among this string pseudo

325
00:15:14,450 --> 00:15:22,310
randomly so using this one can argue

326
00:15:19,310 --> 00:15:24,290
that it is very unlikely that an

327
00:15:22,310 --> 00:15:27,859
informative bits from this string

328
00:15:24,290 --> 00:15:29,360
actually have a high input locality so

329
00:15:27,860 --> 00:15:34,580
this property turns out to be very

330
00:15:29,360 --> 00:15:37,520
useful for proof so given so our

331
00:15:34,580 --> 00:15:38,870
compiler first forced the framework by

332
00:15:37,520 --> 00:15:41,240
Ogawa at all

333
00:15:38,870 --> 00:15:43,040
we also encoded the message using an

334
00:15:41,240 --> 00:15:45,470
error correcting code and then

335
00:15:43,040 --> 00:15:48,949
introduced some arrows and also keep

336
00:15:45,470 --> 00:15:51,620
some bits untouched and record this

337
00:15:48,950 --> 00:15:55,730
information user base nominal code and

338
00:15:51,620 --> 00:15:59,870
after that we will be using a PRG to

339
00:15:55,730 --> 00:16:02,360
hide this in this attack among among

340
00:15:59,870 --> 00:16:05,090
random amount a list of strings that

341
00:16:02,360 --> 00:16:06,830
contain both the redundant bits and the

342
00:16:05,090 --> 00:16:09,500
informative bits from the tag

343
00:16:06,830 --> 00:16:12,620
so our final codeword consists of three

344
00:16:09,500 --> 00:16:14,600
parts the main code word which is error

345
00:16:12,620 --> 00:16:17,990
correcting code with arrows introduced

346
00:16:14,600 --> 00:16:20,210
then a seed for the PRG and in this

347
00:16:17,990 --> 00:16:23,390
string here that contains both redundant

348
00:16:20,210 --> 00:16:25,700
bits and informative bits from tag so

349
00:16:23,390 --> 00:16:27,650
the length of this code word is roughly

350
00:16:25,700 --> 00:16:30,830
the same as the length of the main code

351
00:16:27,650 --> 00:16:34,670
word so let me give you a very brief

352
00:16:30,830 --> 00:16:38,780
sketch of our proof so our proof roughly

353
00:16:34,670 --> 00:16:40,670
falls from the from the following way so

354
00:16:38,780 --> 00:16:42,589
we first argue that the tampering

355
00:16:40,670 --> 00:16:45,709
happens on the tag is actually

356
00:16:42,590 --> 00:16:49,010
independent of the message here then

357
00:16:45,710 --> 00:16:52,070
given this observation we we can see

358
00:16:49,010 --> 00:16:55,000
that the tampering on the attack either

359
00:16:52,070 --> 00:16:58,340
keeps the consistent track information

360
00:16:55,000 --> 00:17:00,770
identical or fix this consistent track

361
00:16:58,340 --> 00:17:02,570
information to a constant so this is

362
00:17:00,770 --> 00:17:07,339
given by the property of the base

363
00:17:02,570 --> 00:17:10,790
inaudible code so finally our prove our

364
00:17:07,339 --> 00:17:13,699
intuition is that if the adversary keeps

365
00:17:10,790 --> 00:17:16,010
this tag identical then the owning valid

366
00:17:13,700 --> 00:17:19,250
tampering is to also keep the main code

367
00:17:16,010 --> 00:17:19,970
word identical conversely if the

368
00:17:19,250 --> 00:17:22,310
adversary

369
00:17:19,970 --> 00:17:25,040
fixed the text to be some constant

370
00:17:22,310 --> 00:17:27,319
string then the only valid tampering is

371
00:17:25,040 --> 00:17:30,950
to also fix the main code over to some

372
00:17:27,319 --> 00:17:32,720
constant so the idea is that if the

373
00:17:30,950 --> 00:17:35,570
reverse rate does not temper this code

374
00:17:32,720 --> 00:17:38,990
word in this way then with probability 1

375
00:17:35,570 --> 00:17:42,320
- 1 - negligible he was always he will

376
00:17:38,990 --> 00:17:44,750
always fail the consistency check so the

377
00:17:42,320 --> 00:17:47,240
harness of this proof completely lysing

378
00:17:44,750 --> 00:17:50,600
how do we prove this intuition so

379
00:17:47,240 --> 00:17:51,710
unfortunately I don't have time to go

380
00:17:50,600 --> 00:17:53,959
into the

381
00:17:51,710 --> 00:17:57,049
tells of this proof I would we have to

382
00:17:53,960 --> 00:18:06,590
discuss this offline and I will end my

383
00:17:57,049 --> 00:18:08,809
talk here thank you thank you questions

384
00:18:06,590 --> 00:18:11,658
yeah you said that there was a previous

385
00:18:08,809 --> 00:18:14,178
result that supported log locality I

386
00:18:11,659 --> 00:18:16,100
think one of the authors was Faust yeah

387
00:18:14,179 --> 00:18:18,320
it was efficient so can you explain

388
00:18:16,100 --> 00:18:21,230
again what is the data so they show that

389
00:18:18,320 --> 00:18:23,840
it's a probabilistic construction they

390
00:18:21,230 --> 00:18:26,330
show that actually with probability 1

391
00:18:23,840 --> 00:18:29,090
they're probably construction will be

392
00:18:26,330 --> 00:18:32,029
secured against that tampering family

393
00:18:29,090 --> 00:18:34,129
however they we cannot dear analyze such

394
00:18:32,029 --> 00:18:35,659
multicolor construction it's not an

395
00:18:34,130 --> 00:18:45,830
explicit construction no it's not a

396
00:18:35,659 --> 00:18:47,460
specific yeah more questions let's thank

397
00:18:45,830 --> 00:18:51,069
the speaker

398
00:18:47,460 --> 00:18:51,069
[Applause]

