1
00:00:04,860 --> 00:00:09,870
and so the title of this presentation is

2
00:00:07,650 --> 00:00:12,780
how to build a pseudo-random functions

3
00:00:09,870 --> 00:00:15,840
from public random permutations so it's

4
00:00:12,780 --> 00:00:21,299
a joint work by Erina bojay and bartman

5
00:00:15,840 --> 00:00:24,480
Inc so pseudo-random permutation or a

6
00:00:21,300 --> 00:00:27,600
PRP and Suder and the function a PRF and

7
00:00:24,480 --> 00:00:34,230
are the two most fundamental primitives

8
00:00:27,600 --> 00:00:36,900
in cryptography okay so in the seminal

9
00:00:34,230 --> 00:00:42,959
work of Ruby and Raghav they introduced

10
00:00:36,900 --> 00:00:47,700
a way to design a PRP from PRS so their

11
00:00:42,960 --> 00:00:51,079
work was actually modified by the test

12
00:00:47,700 --> 00:00:55,950
block cipher and which consists out of

13
00:00:51,079 --> 00:00:58,200
our runs of the face of network so it

14
00:00:55,950 --> 00:00:59,970
can be shown that for round is

15
00:00:58,200 --> 00:01:05,159
sufficient to get birthday bound

16
00:00:59,970 --> 00:01:07,189
security so but people soon realized

17
00:01:05,159 --> 00:01:10,350
that actually we need the opposite

18
00:01:07,189 --> 00:01:14,639
constructions which means we want to

19
00:01:10,350 --> 00:01:18,570
build a PRF from PRP in the past years

20
00:01:14,640 --> 00:01:22,470
various approach of turning a PRP into a

21
00:01:18,570 --> 00:01:27,298
PRF was introduced for example the sum

22
00:01:22,470 --> 00:01:29,970
of permutations fiber Rho in 1998 the

23
00:01:27,299 --> 00:01:33,780
encrypted staff is mayor by Kofi Adi and

24
00:01:29,970 --> 00:01:40,280
Sara in 2016 and the encrypted steps

25
00:01:33,780 --> 00:01:40,280
module by Remington nervous in 2017

26
00:01:40,729 --> 00:01:46,650
actually so if you look at those

27
00:01:43,470 --> 00:01:48,298
constructions you see that all those

28
00:01:46,650 --> 00:01:51,180
constructions on the use of block

29
00:01:48,299 --> 00:01:53,400
ciphers in the forward direction but the

30
00:01:51,180 --> 00:01:56,189
proc cipher is usually designed to be

31
00:01:53,400 --> 00:01:59,610
both efficient in the forward and the

32
00:01:56,189 --> 00:02:02,369
reverse direction so which you make box

33
00:01:59,610 --> 00:02:05,700
Iver actually over engineered primitive

34
00:02:02,369 --> 00:02:08,369
for the PRF design but now sparked by

35
00:02:05,700 --> 00:02:11,610
the a3 competition which is announced in

36
00:02:08,369 --> 00:02:16,020
2007 with

37
00:02:11,610 --> 00:02:18,310
winner in 2012 and it's been a shock

38
00:02:16,020 --> 00:02:22,489
it's a permutation based hash function

39
00:02:18,310 --> 00:02:25,010
so it's actually to increase the

40
00:02:22,489 --> 00:02:29,120
interest in constructions built on

41
00:02:25,010 --> 00:02:31,760
public random permutations so those

42
00:02:29,120 --> 00:02:34,190
permutations not like block ciphers is

43
00:02:31,760 --> 00:02:37,429
usually very fast in the forwards

44
00:02:34,190 --> 00:02:41,480
direction but not necessary very fast in

45
00:02:37,430 --> 00:02:43,130
their inverse direction now actually

46
00:02:41,480 --> 00:02:47,798
this should be the complete picture

47
00:02:43,130 --> 00:02:51,109
where we have the PRP spi offs and

48
00:02:47,799 --> 00:02:54,080
public random permutations RPS and

49
00:02:51,110 --> 00:02:57,260
public random functions so we already

50
00:02:54,080 --> 00:03:02,269
discussed about the conversion between

51
00:02:57,260 --> 00:03:04,030
the PRP and CRFs now we yeah the

52
00:03:02,269 --> 00:03:06,260
conversion between the public random

53
00:03:04,030 --> 00:03:08,630
permutations and public render functions

54
00:03:06,260 --> 00:03:12,739
can actually be done in the similar way

55
00:03:08,630 --> 00:03:15,049
where they the the resulting functions

56
00:03:12,739 --> 00:03:17,750
usually kill us and we assume that the

57
00:03:15,049 --> 00:03:19,540
underlying primitives are ideal then we

58
00:03:17,750 --> 00:03:23,840
can prove the security and

59
00:03:19,540 --> 00:03:27,560
differentiability framework so the

60
00:03:23,840 --> 00:03:30,109
conversion between RP & 2 RF RF is done

61
00:03:27,560 --> 00:03:33,470
by the in differentiability of the song

62
00:03:30,109 --> 00:03:36,380
of permutations and the conversion

63
00:03:33,470 --> 00:03:40,489
between RF and R T is PI interface

64
00:03:36,380 --> 00:03:43,220
ability of face or networks so I think

65
00:03:40,489 --> 00:03:46,100
it's quite clear why it's not so

66
00:03:43,220 --> 00:03:49,819
interesting to build our peace and our s

67
00:03:46,100 --> 00:03:53,540
from PR p and p RF so which means the

68
00:03:49,819 --> 00:03:55,869
only interesting thing is how we can how

69
00:03:53,540 --> 00:04:01,638
can we build PRP and prfs

70
00:03:55,870 --> 00:04:06,260
using our peace and our s so the first

71
00:04:01,639 --> 00:04:08,989
case is building PRP from RP which is

72
00:04:06,260 --> 00:04:10,910
already considered by the infamous new

73
00:04:08,989 --> 00:04:16,519
construction or the key alternating

74
00:04:10,910 --> 00:04:20,690
ciphers so it was introduced in 1991 by

75
00:04:16,519 --> 00:04:22,910
efferent monster and then in 2012 the

76
00:04:20,690 --> 00:04:25,760
concept of key alternating cipher was

77
00:04:22,910 --> 00:04:29,260
introduced which is actually yeah the

78
00:04:25,760 --> 00:04:31,760
trade it's even a suicide so in 2016

79
00:04:29,260 --> 00:04:33,469
Gollancz the sour shots the tights

80
00:04:31,760 --> 00:04:38,900
security bonds of the key alternating

81
00:04:33,470 --> 00:04:42,710
ciphers the next case is the conversion

82
00:04:38,900 --> 00:04:45,099
from RF to PRF which is done by the key

83
00:04:42,710 --> 00:04:48,620
alternating feistel cipher which was

84
00:04:45,100 --> 00:04:51,590
introduced in 2004 by Chantry in France

85
00:04:48,620 --> 00:04:53,360
on where they combined the idea of face

86
00:04:51,590 --> 00:04:57,580
or network with the eve among sewer

87
00:04:53,360 --> 00:05:00,530
construction and they show that the

88
00:04:57,580 --> 00:05:04,669
resulting obstruction will be percept on

89
00:05:00,530 --> 00:05:08,119
secure if we have four rounds of it the

90
00:05:04,670 --> 00:05:11,420
next problem is conversion from RF to

91
00:05:08,120 --> 00:05:15,740
PRF which is considered by Gaussian stay

92
00:05:11,420 --> 00:05:17,780
sorrow and in 2015 they have a similar

93
00:05:15,740 --> 00:05:25,850
construction like this where they can

94
00:05:17,780 --> 00:05:29,690
turn RS into PRF so which makes the only

95
00:05:25,850 --> 00:05:32,180
problem which is you open its how how

96
00:05:29,690 --> 00:05:34,790
can we design a suitor and the function

97
00:05:32,180 --> 00:05:39,350
from public random permutations which is

98
00:05:34,790 --> 00:05:41,270
actually the title of this work so to

99
00:05:39,350 --> 00:05:43,460
formulate the security definitions

100
00:05:41,270 --> 00:05:45,919
precisely we are going to introduce

101
00:05:43,460 --> 00:05:49,789
attack games so at the beginning of the

102
00:05:45,920 --> 00:05:52,430
game one of the tools is chosen so here

103
00:05:49,790 --> 00:05:56,420
is real world and the idea was on the

104
00:05:52,430 --> 00:05:57,530
right side and this adversary a will get

105
00:05:56,420 --> 00:05:59,390
cuke

106
00:05:57,530 --> 00:06:02,409
construction queries through the

107
00:05:59,390 --> 00:06:06,890
construction Oracle this one and this

108
00:06:02,410 --> 00:06:08,750
and the adversary will also get P

109
00:06:06,890 --> 00:06:12,890
primitive Oracle's to each of the

110
00:06:08,750 --> 00:06:14,720
primitive Oracle's in the real world the

111
00:06:12,890 --> 00:06:18,289
construction Oracle is actually our

112
00:06:14,720 --> 00:06:21,320
proposed pseudo-random function and in

113
00:06:18,290 --> 00:06:25,490
the idea what it's actually a perfectly

114
00:06:21,320 --> 00:06:28,510
random function now the primitive

115
00:06:25,490 --> 00:06:32,660
archives are the same in the post world

116
00:06:28,510 --> 00:06:35,659
so we assume that a never makes the same

117
00:06:32,660 --> 00:06:38,630
query because the boss world will just

118
00:06:35,660 --> 00:06:45,740
return the same result by asking the

119
00:06:38,630 --> 00:06:49,730
same query so after the communicate with

120
00:06:45,740 --> 00:06:53,330
the Oracle a should state which was it

121
00:06:49,730 --> 00:06:55,610
was given if I cannot do so then we can

122
00:06:53,330 --> 00:06:57,530
deduce that the different construction

123
00:06:55,610 --> 00:07:03,560
is actually a good sir the random

124
00:06:57,530 --> 00:07:05,809
function we see that's the advantage of

125
00:07:03,560 --> 00:07:09,500
the adversary to distinguish the two

126
00:07:05,810 --> 00:07:12,920
world increases if the number of the

127
00:07:09,500 --> 00:07:20,390
queries that the adversary can ask to

128
00:07:12,920 --> 00:07:23,090
the Oracle increases so of course we are

129
00:07:20,390 --> 00:07:25,370
going to start to try to build a

130
00:07:23,090 --> 00:07:29,000
pseudo-random function from one public

131
00:07:25,370 --> 00:07:31,700
random permutation call so in our work

132
00:07:29,000 --> 00:07:35,210
we actually analyze the general

133
00:07:31,700 --> 00:07:37,640
construction where we also use a linear

134
00:07:35,210 --> 00:07:40,969
proofs pre-processing function and

135
00:07:37,640 --> 00:07:47,870
linear post-processing function l1 and

136
00:07:40,970 --> 00:07:49,730
l2 so we actually show that there can so

137
00:07:47,870 --> 00:07:51,890
we can not build a pseudo-random

138
00:07:49,730 --> 00:07:55,690
function with beyond per se pond

139
00:07:51,890 --> 00:07:59,450
security with just one single

140
00:07:55,690 --> 00:08:01,880
permutation code so because in our work

141
00:07:59,450 --> 00:08:04,610
we actually analyze all the variants of

142
00:08:01,880 --> 00:08:08,450
the linear probe

143
00:08:04,610 --> 00:08:12,890
linear functions and for each of the

144
00:08:08,450 --> 00:08:14,690
variants we give attack to show the the

145
00:08:12,890 --> 00:08:17,780
scheme can be broken the per se bolt or

146
00:08:14,690 --> 00:08:19,910
even faster but here I'm going to I'm

147
00:08:17,780 --> 00:08:23,119
only going to explain the most general

148
00:08:19,910 --> 00:08:26,090
function we are all the inputs so all

149
00:08:23,120 --> 00:08:28,720
those five inputs and have inference on

150
00:08:26,090 --> 00:08:34,189
the construction so the idea is actually

151
00:08:28,720 --> 00:08:37,190
as long as we can find a collision

152
00:08:34,190 --> 00:08:40,340
between the inputs M of the construction

153
00:08:37,190 --> 00:08:41,900
Oracle the construction query so the

154
00:08:40,340 --> 00:08:44,510
construction queries in red and

155
00:08:41,900 --> 00:08:47,510
primitive query simply so as long as we

156
00:08:44,510 --> 00:08:50,209
can find a good relation between the

157
00:08:47,510 --> 00:08:52,370
construction query and the inputs X of

158
00:08:50,209 --> 00:08:53,030
the primitive query then there will be a

159
00:08:52,370 --> 00:08:55,850
relay

160
00:08:53,030 --> 00:08:58,459
in between the output Y of the primitive

161
00:08:55,850 --> 00:09:01,760
query with the output C of the

162
00:08:58,460 --> 00:09:04,520
construction query then in that case we

163
00:09:01,760 --> 00:09:06,260
can prove that the other construction

164
00:09:04,520 --> 00:09:12,140
can be distinguished from random in the

165
00:09:06,260 --> 00:09:13,850
per second so of course the next step is

166
00:09:12,140 --> 00:09:16,970
try to build pseudo-random functions

167
00:09:13,850 --> 00:09:20,300
with two permutation calls so instead of

168
00:09:16,970 --> 00:09:23,540
directly builds a pseudo land function

169
00:09:20,300 --> 00:09:27,920
fun random permutation natural ways of

170
00:09:23,540 --> 00:09:30,560
course to first define a PRP from our

171
00:09:27,920 --> 00:09:34,400
piece and then the next step is to build

172
00:09:30,560 --> 00:09:37,790
the PRF from pure piece so for example

173
00:09:34,400 --> 00:09:40,730
we can first use the obvious to build if

174
00:09:37,790 --> 00:09:42,680
a masseur constructions and then turn

175
00:09:40,730 --> 00:09:45,470
the infamous work instructions into a

176
00:09:42,680 --> 00:09:48,560
PRF using for example and the self

177
00:09:45,470 --> 00:09:50,870
permutations but the problem is we know

178
00:09:48,560 --> 00:09:53,449
that the self permutation is optimal

179
00:09:50,870 --> 00:09:56,870
secure as long as on the line block

180
00:09:53,450 --> 00:09:58,430
ciphers are secure but the infamous

181
00:09:56,870 --> 00:10:01,580
sewer construction is only possible

182
00:09:58,430 --> 00:10:03,800
secure which means if we just plug in

183
00:10:01,580 --> 00:10:05,990
the infamous new constructions into the

184
00:10:03,800 --> 00:10:09,680
cell fermentations then the result in

185
00:10:05,990 --> 00:10:14,300
PRF PRF you only pay per second secure

186
00:10:09,680 --> 00:10:16,609
of course we can use two rounds of Eva

187
00:10:14,300 --> 00:10:20,000
module constructions because two rounds

188
00:10:16,610 --> 00:10:23,390
of infamous who is 2 n divided by 3 bits

189
00:10:20,000 --> 00:10:25,040
secure then the resulting PRF will also

190
00:10:23,390 --> 00:10:27,920
be beyond persepolis secure with the

191
00:10:25,040 --> 00:10:31,760
same security but then the resulting

192
00:10:27,920 --> 00:10:34,579
construction will be twice as expensive

193
00:10:31,760 --> 00:10:37,160
as before because we here we need for

194
00:10:34,580 --> 00:10:40,370
permutation calls to get 2 n divided by

195
00:10:37,160 --> 00:10:45,530
3 bit security so which means we need

196
00:10:40,370 --> 00:10:47,930
two dedicated security proof so the main

197
00:10:45,530 --> 00:10:51,910
construction the main contribution of

198
00:10:47,930 --> 00:10:55,099
this work is the introduction and the

199
00:10:51,910 --> 00:10:59,839
security analysis of the sum of if imasu

200
00:10:55,100 --> 00:11:00,590
construction we we look at all the

201
00:10:59,840 --> 00:11:03,020
different

202
00:11:00,590 --> 00:11:06,160
ferrant of the sum of e for super

203
00:11:03,020 --> 00:11:08,889
instruction and prove their security

204
00:11:06,160 --> 00:11:12,219
the first Ferentz is so free from ensue

205
00:11:08,889 --> 00:11:15,100
with two identical permutations and one

206
00:11:12,220 --> 00:11:17,529
single key so I think it's quite clear

207
00:11:15,100 --> 00:11:20,649
why this thing cannot work because yeah

208
00:11:17,529 --> 00:11:23,019
we have the same Y here and then those

209
00:11:20,649 --> 00:11:26,279
just cancel out and the C will always be

210
00:11:23,019 --> 00:11:29,860
the same which is equal to the used key

211
00:11:26,279 --> 00:11:35,649
so the second construction is when we

212
00:11:29,860 --> 00:11:39,459
use same permutation but with two

213
00:11:35,649 --> 00:11:43,660
different keys however in this case we

214
00:11:39,459 --> 00:11:47,859
can prove that's the yeah there's it

215
00:11:43,660 --> 00:11:51,459
security is actually on the security to

216
00:11:47,860 --> 00:11:54,879
purse a pound so the attack idea is

217
00:11:51,459 --> 00:11:56,649
actually very simple if if we have this

218
00:11:54,879 --> 00:11:59,529
construction then in the purse a pound

219
00:11:56,649 --> 00:12:03,550
we can invert it bounce queries we can

220
00:11:59,529 --> 00:12:07,120
find two construction queries the M and

221
00:12:03,550 --> 00:12:10,689
M sorry and I'm sorry will collide so as

222
00:12:07,120 --> 00:12:14,439
long as this equation happened then we

223
00:12:10,689 --> 00:12:17,769
can show that output C is equal to

224
00:12:14,439 --> 00:12:22,500
output C star then again we can

225
00:12:17,769 --> 00:12:22,500
distinguish the construction from random

226
00:12:22,649 --> 00:12:32,800
so the third construction where we use

227
00:12:29,199 --> 00:12:37,930
two independent permutations and one

228
00:12:32,800 --> 00:12:40,180
single key so in this case we can again

229
00:12:37,930 --> 00:12:47,019
show that it can be broken in the first

230
00:12:40,180 --> 00:12:51,099
round because the idea is to find a

231
00:12:47,019 --> 00:12:56,439
collision of the inputs M of the

232
00:12:51,100 --> 00:13:00,250
construction query with the two inputs X

233
00:12:56,439 --> 00:13:02,949
of the two primitive queries so as long

234
00:13:00,250 --> 00:13:07,300
as this happened then we can find some

235
00:13:02,949 --> 00:13:10,269
relation between the output y1 of the

236
00:13:07,300 --> 00:13:12,939
first primitive query the output Y 2 of

237
00:13:10,269 --> 00:13:16,689
the second primitive query with the

238
00:13:12,939 --> 00:13:19,630
output C of the construction query then

239
00:13:16,689 --> 00:13:20,630
again with this relation we can prove

240
00:13:19,630 --> 00:13:23,000
that's

241
00:13:20,630 --> 00:13:24,920
the REO construction can be

242
00:13:23,000 --> 00:13:30,800
distinguished from the ideological

243
00:13:24,920 --> 00:13:32,870
section so now the last variant is the

244
00:13:30,800 --> 00:13:36,410
sum of Eva months through construction

245
00:13:32,870 --> 00:13:41,839
were using to independence permutations

246
00:13:36,410 --> 00:13:43,579
and to independence keys so this

247
00:13:41,839 --> 00:13:47,630
construction is the only construction

248
00:13:43,579 --> 00:13:51,290
that we can prove that can be secured

249
00:13:47,630 --> 00:13:55,850
beyond the participant here we have 2 n

250
00:13:51,290 --> 00:13:58,459
divided by 3 bit security and we also

251
00:13:55,850 --> 00:14:02,060
provide attack to show the tightness of

252
00:13:58,459 --> 00:14:04,279
this security bond so the idea of the

253
00:14:02,060 --> 00:14:07,969
attack is actually as long as we can

254
00:14:04,279 --> 00:14:10,250
find a collision between the inputs M of

255
00:14:07,970 --> 00:14:15,050
the construction query with the inputs

256
00:14:10,250 --> 00:14:18,860
new of the first primitive query and at

257
00:14:15,050 --> 00:14:23,029
the same time this input and should also

258
00:14:18,860 --> 00:14:25,040
collide with the input X of the second

259
00:14:23,029 --> 00:14:30,620
primitive query so as long as we can

260
00:14:25,040 --> 00:14:33,349
find this two then we can prove that the

261
00:14:30,620 --> 00:14:34,579
security and then we can prove that we

262
00:14:33,350 --> 00:14:36,230
can distinguish the real world

263
00:14:34,579 --> 00:14:41,269
construction from the idea water

264
00:14:36,230 --> 00:14:45,110
construction so of course this too and

265
00:14:41,269 --> 00:14:51,079
those who equations happens in two and

266
00:14:45,110 --> 00:14:54,050
divide by three queries so the security

267
00:14:51,079 --> 00:14:55,729
proof of this construction is actually

268
00:14:54,050 --> 00:14:59,300
performed with petraeus

269
00:14:55,730 --> 00:15:01,790
edge coefficients technique yeah it's a

270
00:14:59,300 --> 00:15:04,550
little bit too complex to explain the

271
00:15:01,790 --> 00:15:06,620
proof in detail here but the idea of the

272
00:15:04,550 --> 00:15:11,300
proof is the first iteration of Patras

273
00:15:06,620 --> 00:15:13,970
mio theory however here the adversary a

274
00:15:11,300 --> 00:15:16,670
has query access to the underlying

275
00:15:13,970 --> 00:15:20,709
primitive the two on the line primitives

276
00:15:16,670 --> 00:15:23,389
so this makes a condom more difficult

277
00:15:20,709 --> 00:15:25,279
but anyway the resulting obstruction

278
00:15:23,389 --> 00:15:31,459
will have to n divided by three bit

279
00:15:25,279 --> 00:15:33,310
security so in this work we consider the

280
00:15:31,459 --> 00:15:35,920
problem of design

281
00:15:33,310 --> 00:15:38,920
and the function from public to random

282
00:15:35,920 --> 00:15:43,180
permutations by introducing the sum the

283
00:15:38,920 --> 00:15:45,069
sum of infamous dual construction so in

284
00:15:43,180 --> 00:15:48,758
the previous version of this work we

285
00:15:45,069 --> 00:15:51,998
also consider one of our site resources

286
00:15:48,759 --> 00:15:54,790
actually introduced another construction

287
00:15:51,999 --> 00:15:57,420
which has the same security bound but we

288
00:15:54,790 --> 00:15:59,709
know it's force removed after the

289
00:15:57,420 --> 00:16:02,110
observation by burrito Mandy because we

290
00:15:59,709 --> 00:16:05,800
make us very stupid mistake in the in

291
00:16:02,110 --> 00:16:08,829
the proof but yeah this is just a site

292
00:16:05,800 --> 00:16:11,040
result the main contribution of this

293
00:16:08,829 --> 00:16:17,349
work is a selfish monster construction

294
00:16:11,040 --> 00:16:20,050
so the conclusion so in this work we

295
00:16:17,350 --> 00:16:24,009
first show that there cannot be beyond

296
00:16:20,050 --> 00:16:26,740
Persepolis secure prf fun and using one

297
00:16:24,009 --> 00:16:30,819
single permutation call and then we show

298
00:16:26,740 --> 00:16:33,879
that we propose the PRF sum of a human's

299
00:16:30,819 --> 00:16:35,378
new construction and we show that the

300
00:16:33,879 --> 00:16:39,399
construction can only be burst upon

301
00:16:35,379 --> 00:16:40,959
secure if we use one key or two

302
00:16:39,399 --> 00:16:45,430
permutation calls but with the same

303
00:16:40,959 --> 00:16:47,739
permutation and we also prove that the

304
00:16:45,430 --> 00:16:51,250
same construction can be 2 n divided by

305
00:16:47,740 --> 00:16:53,379
3 bits secure as long as we use two

306
00:16:51,250 --> 00:16:58,240
independent keys and to independence

307
00:16:53,379 --> 00:17:00,399
permutation calls so for the future it

308
00:16:58,240 --> 00:17:02,889
will be interesting to study if we can

309
00:17:00,399 --> 00:17:06,250
get the same security by using just one

310
00:17:02,889 --> 00:17:09,429
key or two permutation calls to the same

311
00:17:06,250 --> 00:17:12,089
query and if there will be a

312
00:17:09,429 --> 00:17:16,270
construction with the same security

313
00:17:12,089 --> 00:17:19,750
built on using one key and two

314
00:17:16,270 --> 00:17:21,609
permutations and to the same unto

315
00:17:19,750 --> 00:17:24,130
Abimelech temperament ation calls to the

316
00:17:21,609 --> 00:17:27,629
implementation and it should also be

317
00:17:24,130 --> 00:17:30,399
interesting to study the security of the

318
00:17:27,630 --> 00:17:33,070
some IVA months who I saw a few Masuoka

319
00:17:30,399 --> 00:17:35,639
such as but the mutable evilman sewers

320
00:17:33,070 --> 00:17:38,470
so then we can see if the security

321
00:17:35,640 --> 00:17:39,510
increases with the number of permutation

322
00:17:38,470 --> 00:17:44,080
calls

323
00:17:39,510 --> 00:17:46,890
so this ends of my presentation thank

324
00:17:44,080 --> 00:17:46,889
you for your attention

325
00:17:53,269 --> 00:18:07,529
is Stanek questions thank you then I

326
00:18:04,320 --> 00:18:09,330
would have one place namely I guess this

327
00:18:07,529 --> 00:18:12,299
is not in your paper but can you remind

328
00:18:09,330 --> 00:18:16,379
me or us about the best construction

329
00:18:12,299 --> 00:18:18,809
with beyond passed upon security with

330
00:18:16,379 --> 00:18:23,699
only one permutation like if you can

331
00:18:18,809 --> 00:18:26,940
make multiple calls you can make a sauce

332
00:18:23,700 --> 00:18:28,649
you can you mean you make multiple calls

333
00:18:26,940 --> 00:18:34,440
but to the same permutation yes there's

334
00:18:28,649 --> 00:18:38,789
only one permutation that you have yeah

335
00:18:34,440 --> 00:18:44,159
I think but what about the keys can we

336
00:18:38,789 --> 00:18:49,609
use mutable keys in that case I'm

337
00:18:44,159 --> 00:18:52,919
actually not really sure because yes I

338
00:18:49,609 --> 00:18:54,960
think the song of permutation and the

339
00:18:52,919 --> 00:18:56,960
soft beautiful permutations can be very

340
00:18:54,960 --> 00:19:01,830
efficient because you can evaluate

341
00:18:56,960 --> 00:19:04,830
temptations at the same time yeah but

342
00:19:01,830 --> 00:19:07,830
I'm not sure if we use we just use one

343
00:19:04,830 --> 00:19:11,220
and one permutation what the security

344
00:19:07,830 --> 00:19:14,220
security pounds will be so yeah I can

345
00:19:11,220 --> 00:19:15,570
not really okay I'm not really sure

346
00:19:14,220 --> 00:19:19,649
about that thank you

347
00:19:15,570 --> 00:19:21,178
it's - any more question okay then I

348
00:19:19,649 --> 00:19:22,439
guess we all get and enjoy these

349
00:19:21,179 --> 00:19:25,120
chocolates and coffee that they

350
00:19:22,440 --> 00:19:27,960
announced thank you

351
00:19:25,120 --> 00:19:27,959
[Applause]

