1
00:00:04,890 --> 00:00:09,210
thank you for the introduction now so my

2
00:00:07,410 --> 00:00:10,559
name is Xu and this is joint work with

3
00:00:09,210 --> 00:00:13,320
Rio Nisha monkey

4
00:00:10,559 --> 00:00:15,750
shota Yamada Takashi a macaw from NTT

5
00:00:13,320 --> 00:00:18,240
and ice thanks everybody for sticking

6
00:00:15,750 --> 00:00:19,619
around till the last session so as the

7
00:00:18,240 --> 00:00:22,890
title suggests this is going to talk

8
00:00:19,619 --> 00:00:25,859
about compact ni CK's from various

9
00:00:22,890 --> 00:00:28,560
assumptions so our results can be broken

10
00:00:25,859 --> 00:00:31,710
up in four pieces they're all based on

11
00:00:28,560 --> 00:00:34,379
ni CK's and it's about getting compact

12
00:00:31,710 --> 00:00:37,559
notions of ni CK's so the first theory

13
00:00:34,379 --> 00:00:39,299
is gonna be about short proofs and the

14
00:00:37,559 --> 00:00:42,180
last one is gone about it's going to be

15
00:00:39,299 --> 00:00:45,239
about efficient provers and for this

16
00:00:42,180 --> 00:00:47,820
talk I'll use probably 85 through 90

17
00:00:45,239 --> 00:00:50,699
percent of my time to talk about the

18
00:00:47,820 --> 00:00:53,699
first two results regarding short proofs

19
00:00:50,699 --> 00:00:55,500
and the last 15 percent of the time I'll

20
00:00:53,699 --> 00:00:59,879
use it to explain what an efficient

21
00:00:55,500 --> 00:01:01,559
prove er and I ZK is so as a background

22
00:00:59,879 --> 00:01:04,369
on this I'm sure that everybody kind of

23
00:01:01,559 --> 00:01:06,720
saw this at some point during this

24
00:01:04,369 --> 00:01:09,300
crypto conferences but let me just kind

25
00:01:06,720 --> 00:01:11,850
of give a brief overview of what news

26
00:01:09,300 --> 00:01:14,190
was so here proof approver wants to

27
00:01:11,850 --> 00:01:16,320
prove to the verifier that she knows a

28
00:01:14,190 --> 00:01:18,270
witness corresponding to the statement X

29
00:01:16,320 --> 00:01:20,520
in this language so completeness tells

30
00:01:18,270 --> 00:01:23,850
you that a well this proof PI should

31
00:01:20,520 --> 00:01:25,890
verify correctly and for soundness what

32
00:01:23,850 --> 00:01:30,179
we have is that uh it's for a sheet

33
00:01:25,890 --> 00:01:31,620
improver so if she has a statement which

34
00:01:30,180 --> 00:01:34,950
is not in the language then it should

35
00:01:31,620 --> 00:01:36,990
not verify and for zero knowledge we

36
00:01:34,950 --> 00:01:38,640
just say that the proof pi does not leak

37
00:01:36,990 --> 00:01:40,470
any information on this witness other

38
00:01:38,640 --> 00:01:43,050
than the fact that this statement is

39
00:01:40,470 --> 00:01:44,340
really in this language or not so when

40
00:01:43,050 --> 00:01:48,090
you have this three properties then you

41
00:01:44,340 --> 00:01:50,400
get an NIV King so we'll be considering

42
00:01:48,090 --> 00:01:52,530
various types of ni z KS and this is I

43
00:01:50,400 --> 00:01:55,740
think the one that's those the most like

44
00:01:52,530 --> 00:01:58,409
a standard one which is called a CRS ni

45
00:01:55,740 --> 00:01:59,880
z k so the trust is set up here will

46
00:01:58,409 --> 00:02:03,420
construct a public common reference

47
00:01:59,880 --> 00:02:06,780
dream and in this model any prover or

48
00:02:03,420 --> 00:02:10,949
any verifier can participate using this

49
00:02:06,780 --> 00:02:12,840
CRS and we can consider a relaxation of

50
00:02:10,949 --> 00:02:15,660
this where the Trust is set up is now

51
00:02:12,840 --> 00:02:18,430
going to provide a private verification

52
00:02:15,660 --> 00:02:19,930
key for this particular verifier

53
00:02:18,430 --> 00:02:22,329
and that's why it's got a designated

54
00:02:19,930 --> 00:02:24,459
verifier zero knowledge so in this world

55
00:02:22,329 --> 00:02:26,950
anybody can be approver if she has a

56
00:02:24,459 --> 00:02:29,469
witness but the person who can verify

57
00:02:26,950 --> 00:02:32,230
this proof pie is only going to be this

58
00:02:29,469 --> 00:02:34,689
designated verifier in hold of this kV

59
00:02:32,230 --> 00:02:36,518
and the verification team and obviously

60
00:02:34,689 --> 00:02:39,010
you can consider the opposite flavor of

61
00:02:36,519 --> 00:02:40,329
this which is now the private proving

62
00:02:39,010 --> 00:02:43,629
key setting which is the designated

63
00:02:40,329 --> 00:02:46,060
prover ni z came and finally you can

64
00:02:43,629 --> 00:02:47,649
also consider this relaxation where both

65
00:02:46,060 --> 00:02:50,530
of them now the program the verifier

66
00:02:47,650 --> 00:02:53,560
both has private information and this is

67
00:02:50,530 --> 00:02:55,450
called a pre-processing ni z came so

68
00:02:53,560 --> 00:02:57,159
when you think about it let's say you're

69
00:02:55,450 --> 00:02:59,108
in the pre-processing ni ck and you find

70
00:02:57,159 --> 00:03:01,030
a way to get rid of this K P and you

71
00:02:59,109 --> 00:03:02,590
were able to make this public then you

72
00:03:01,030 --> 00:03:05,650
could like kind of upgrade that into a

73
00:03:02,590 --> 00:03:07,269
de venise and from a Dvina designate

74
00:03:05,650 --> 00:03:08,919
verify risk if you get rid of this

75
00:03:07,269 --> 00:03:11,049
verify or Shaker information then you

76
00:03:08,919 --> 00:03:13,510
get a CRS miss so you can you could kind

77
00:03:11,049 --> 00:03:17,980
of like a build up your scheme if you

78
00:03:13,510 --> 00:03:20,138
can get rid of these components ok so

79
00:03:17,980 --> 00:03:21,578
that's the very basic background and

80
00:03:20,139 --> 00:03:24,280
I'll be talking about Niska with short

81
00:03:21,579 --> 00:03:26,379
proofs now and this is part one of this

82
00:03:24,280 --> 00:03:28,840
part one and I'll be talking about CRS

83
00:03:26,379 --> 00:03:31,810
ni CK's with short proofs so the

84
00:03:28,840 --> 00:03:34,959
motivation for this part is that so far

85
00:03:31,810 --> 00:03:37,030
so CRS and I CK that we know I'll have

86
00:03:34,959 --> 00:03:39,549
like proof sizes that are so the proof

87
00:03:37,030 --> 00:03:41,139
size that has independent independent of

88
00:03:39,549 --> 00:03:43,239
the circus size so you compute an NP

89
00:03:41,139 --> 00:03:45,099
relation requires on like strong tools

90
00:03:43,239 --> 00:03:47,109
so if you want this proof size to be

91
00:03:45,099 --> 00:03:49,418
very small then we want we require IO

92
00:03:47,109 --> 00:03:51,639
fhg knowledge assumptions or compact

93
00:03:49,419 --> 00:03:54,790
homomorphic trapdoor functions where

94
00:03:51,639 --> 00:03:57,340
these require LW assumptions so the

95
00:03:54,790 --> 00:03:58,989
thing is that without using these strong

96
00:03:57,340 --> 00:04:00,840
tools what we know is that the famous

97
00:03:58,989 --> 00:04:03,519
let's say the growth of serfs case I

98
00:04:00,840 --> 00:04:05,439
seriousness it has proof size that is

99
00:04:03,519 --> 00:04:08,019
lambda times the circus size

100
00:04:05,439 --> 00:04:09,790
all right and the shortest one we know

101
00:04:08,019 --> 00:04:12,159
that doesn't use these kind of

102
00:04:09,790 --> 00:04:14,590
assumption is the one based on growth

103
00:04:12,159 --> 00:04:18,548
ten at a age' crypt and this requires a

104
00:04:14,590 --> 00:04:21,280
poly log lambda times circus size proof

105
00:04:18,548 --> 00:04:23,440
size so when you look at this everything

106
00:04:21,279 --> 00:04:25,719
requires a multiplicative overhead in

107
00:04:23,440 --> 00:04:27,310
the circus size so the question we

108
00:04:25,720 --> 00:04:29,139
wanted to ask is that can we bring this

109
00:04:27,310 --> 00:04:32,270
down to an additive overhead so can we

110
00:04:29,139 --> 00:04:34,910
make it into a circus ic+ poly lambda

111
00:04:32,270 --> 00:04:37,159
and that's what we did this in this

112
00:04:34,910 --> 00:04:39,349
first part of this work so we construct

113
00:04:37,160 --> 00:04:41,210
the first CR s ni ZK based on a

114
00:04:39,349 --> 00:04:43,370
falsifiable pairing group assumption

115
00:04:41,210 --> 00:04:46,940
with proof size which is c plus poly

116
00:04:43,370 --> 00:04:49,699
lambda okay so the starting point of

117
00:04:46,940 --> 00:04:51,889
this work is that we consider this d

118
00:04:49,699 --> 00:04:53,900
pianist that we proposed at europe this

119
00:04:51,889 --> 00:04:57,289
year so it's going to be based on this

120
00:04:53,900 --> 00:04:59,270
KN y y 19 construction of DP n is with

121
00:04:57,289 --> 00:05:01,400
short proof size based on this CD HR

122
00:04:59,270 --> 00:05:03,049
assumption and this is just a non-static

123
00:05:01,400 --> 00:05:04,758
diffie-hellman type assumption which is

124
00:05:03,050 --> 00:05:08,270
secured in the general group model so

125
00:05:04,759 --> 00:05:10,130
this is a falsifiable assumption and our

126
00:05:08,270 --> 00:05:12,680
approach will be as i explained it's

127
00:05:10,130 --> 00:05:15,500
gonna be from trying to convert this

128
00:05:12,680 --> 00:05:17,419
deep in is into a CR s ni zk by trying

129
00:05:15,500 --> 00:05:21,949
to get rid of this designated prover

130
00:05:17,419 --> 00:05:24,169
like private key here okay so this is a

131
00:05:21,949 --> 00:05:26,810
very very general high-level idea that

132
00:05:24,169 --> 00:05:29,960
we what we want to do here so i want to

133
00:05:26,810 --> 00:05:32,960
make a quick review on our work out of

134
00:05:29,960 --> 00:05:36,138
your group so our approach was using kim

135
00:05:32,960 --> 00:05:38,719
whose conversion from crypto 18 which

136
00:05:36,139 --> 00:05:40,610
allows you to convert any compact

137
00:05:38,719 --> 00:05:44,930
memorial extincter scheme into a

138
00:05:40,610 --> 00:05:47,180
designated prover ni z game so the main

139
00:05:44,930 --> 00:05:50,210
contribution of this work was that they

140
00:05:47,180 --> 00:05:54,289
created this CD created a new compact HS

141
00:05:50,210 --> 00:05:55,580
from the CD HDR assumption so following

142
00:05:54,289 --> 00:05:57,500
this path they were able to get

143
00:05:55,580 --> 00:06:01,039
dependents from this assumption the CD

144
00:05:57,500 --> 00:06:03,139
HR assumption and in retrospect what we

145
00:06:01,039 --> 00:06:03,860
kind of observed from this construction

146
00:06:03,139 --> 00:06:05,479
was that uh

147
00:06:03,860 --> 00:06:07,880
there there seemed to be a lot of nice

148
00:06:05,479 --> 00:06:10,818
properties that weren't used exactly in

149
00:06:07,880 --> 00:06:12,860
this in this deep enos conversion so a

150
00:06:10,819 --> 00:06:14,990
natural thought was that uh can we use

151
00:06:12,860 --> 00:06:16,699
these like nice properties and add it to

152
00:06:14,990 --> 00:06:20,870
this one morphix signature and maybe

153
00:06:16,699 --> 00:06:22,789
construct a CRS ni z came and i want to

154
00:06:20,870 --> 00:06:26,030
tell you that this path is a little bit

155
00:06:22,789 --> 00:06:27,440
kind of difficult so even if you have a

156
00:06:26,030 --> 00:06:29,539
home over Accenture with like extra

157
00:06:27,440 --> 00:06:32,300
great properties it doesn't seem to be

158
00:06:29,539 --> 00:06:34,849
applicable to the crs misc setting and

159
00:06:32,300 --> 00:06:36,860
for that I want to explain why this kimu

160
00:06:34,849 --> 00:06:39,889
conversion is only very limited to the

161
00:06:36,860 --> 00:06:41,870
designate provers any so I won't get

162
00:06:39,889 --> 00:06:45,229
into detail but what we what the kimu

163
00:06:41,870 --> 00:06:45,620
conversion does is that you have as a

164
00:06:45,229 --> 00:06:47,780
tress

165
00:06:45,620 --> 00:06:50,660
setup it's gonna sample a secret key

166
00:06:47,780 --> 00:06:53,869
from the secret key encryption key space

167
00:06:50,660 --> 00:06:55,340
and it's gonna run this Momo morphix

168
00:06:53,870 --> 00:06:57,320
signature setup scheme so it's gonna

169
00:06:55,340 --> 00:06:59,900
sample up verification key and a signing

170
00:06:57,320 --> 00:07:00,889
key and it's gonna sign on this secret

171
00:06:59,900 --> 00:07:04,638
key ske

172
00:07:00,889 --> 00:07:06,320
and get this signature so the CRS is now

173
00:07:04,639 --> 00:07:08,780
going to be this verification key and

174
00:07:06,320 --> 00:07:11,930
the prover key is going to be this ske

175
00:07:08,780 --> 00:07:14,320
key and the signature Sigma and it's

176
00:07:11,930 --> 00:07:16,850
really not that important but after this

177
00:07:14,320 --> 00:07:19,400
kimu technique allows you to get a deep

178
00:07:16,850 --> 00:07:22,820
eNOS using this as the CRS and this as

179
00:07:19,400 --> 00:07:24,859
the proving key so now I want to explain

180
00:07:22,820 --> 00:07:27,590
why this is quite difficult to make it

181
00:07:24,860 --> 00:07:28,940
into a CRS setting so to make this in

182
00:07:27,590 --> 00:07:31,070
the CRS setting what we have to do is

183
00:07:28,940 --> 00:07:33,320
that the prover somehow has to sample

184
00:07:31,070 --> 00:07:34,969
this on her home but obviously when you

185
00:07:33,320 --> 00:07:36,889
look at this that's gonna be pretty hard

186
00:07:34,970 --> 00:07:38,360
because if she sampled this on her home

187
00:07:36,889 --> 00:07:40,010
that means that she has to run this

188
00:07:38,360 --> 00:07:43,220
morphix setup home or he signed on her

189
00:07:40,010 --> 00:07:45,199
own - so it seems that we can't use the

190
00:07:43,220 --> 00:07:47,680
security notion for this HS scheme

191
00:07:45,199 --> 00:07:49,880
anymore so we don't get soundness and

192
00:07:47,680 --> 00:07:51,800
even if there was a way to kind of get

193
00:07:49,880 --> 00:07:55,300
around this issue it will still be

194
00:07:51,800 --> 00:07:57,860
difficult because now since the

195
00:07:55,300 --> 00:08:00,349
malicious well the prover is gonna be

196
00:07:57,860 --> 00:08:02,300
running this whole thing on her own then

197
00:08:00,349 --> 00:08:04,969
she will have to send this VK on her own

198
00:08:02,300 --> 00:08:09,530
- because it won't be able to be in the

199
00:08:04,970 --> 00:08:13,000
CRS and the actual verification key that

200
00:08:09,530 --> 00:08:16,070
we constructed in this kny wire 19 work

201
00:08:13,000 --> 00:08:18,650
has size that is lambda time Serkis size

202
00:08:16,070 --> 00:08:20,510
so we have to plug this into the proof

203
00:08:18,650 --> 00:08:22,159
now so we kind of lose compactness at

204
00:08:20,510 --> 00:08:25,969
the same time so it seems kind of

205
00:08:22,160 --> 00:08:28,580
difficult to get a CRS miss from this

206
00:08:25,970 --> 00:08:30,500
approach so what we asked in this work

207
00:08:28,580 --> 00:08:32,689
is then is there like an alternative

208
00:08:30,500 --> 00:08:35,570
notion to home overage signatures to

209
00:08:32,690 --> 00:08:37,760
overcome this issue and that's what we

210
00:08:35,570 --> 00:08:39,589
basically did so we in our work we

211
00:08:37,760 --> 00:08:42,260
formalized the notion of homomorphic

212
00:08:39,589 --> 00:08:43,820
equivocal commitment which is kind of a

213
00:08:42,260 --> 00:08:46,939
similar to home / exchanger but it

214
00:08:43,820 --> 00:08:49,310
requires to go around this problems that

215
00:08:46,940 --> 00:08:52,310
I just mentioned so the main syntax is

216
00:08:49,310 --> 00:08:55,729
very easy you can commit to a key or a

217
00:08:52,310 --> 00:08:57,410
bit string with this random star is the

218
00:08:55,730 --> 00:08:59,150
opening and what you can do is that you

219
00:08:57,410 --> 00:09:02,750
have this MOU morphic property so you

220
00:08:59,150 --> 00:09:05,360
morphic Li convert this commitment into

221
00:09:02,750 --> 00:09:08,540
this evaluated message cfk so you have

222
00:09:05,360 --> 00:09:11,300
this K here and plugging this circuit C

223
00:09:08,540 --> 00:09:13,610
inside you get a homomorphic evaluated

224
00:09:11,300 --> 00:09:16,430
our commitment see now this is gonna be

225
00:09:13,610 --> 00:09:18,980
a commitment to the CKD and also you can

226
00:09:16,430 --> 00:09:21,589
create a home morphic opening for this

227
00:09:18,980 --> 00:09:23,830
commitment c taking this rent original

228
00:09:21,590 --> 00:09:26,240
random sr and this circuit C here and

229
00:09:23,830 --> 00:09:28,940
the informal guarantees we want from

230
00:09:26,240 --> 00:09:30,950
this scheme is that for soundness when

231
00:09:28,940 --> 00:09:32,570
we use it for the NI ZK we want this

232
00:09:30,950 --> 00:09:35,620
binding and hiding property which is a

233
00:09:32,570 --> 00:09:37,790
very standard thing to require for a

234
00:09:35,620 --> 00:09:39,410
commitment scheme so we want this to be

235
00:09:37,790 --> 00:09:42,620
binding and these guys to be binding to

236
00:09:39,410 --> 00:09:44,480
the evaluated commitment to and for the

237
00:09:42,620 --> 00:09:46,430
compactness notion what we require is

238
00:09:44,480 --> 00:09:49,700
that we want the verification complexity

239
00:09:46,430 --> 00:09:53,390
of this commitment C to be independent

240
00:09:49,700 --> 00:09:55,160
of the circuits I see so informally what

241
00:09:53,390 --> 00:09:57,350
that means is that this commitment C and

242
00:09:55,160 --> 00:09:58,969
this opening randomness see the evaluate

243
00:09:57,350 --> 00:10:01,130
version of these are going to be much

244
00:09:58,970 --> 00:10:02,990
much smaller than the circuits I see and

245
00:10:01,130 --> 00:10:05,810
in particular in our construction this

246
00:10:02,990 --> 00:10:10,430
will be only constant numbers of group

247
00:10:05,810 --> 00:10:13,069
elements and using this HEC it's really

248
00:10:10,430 --> 00:10:14,449
easy to get CRS Niska via this kimu

249
00:10:13,070 --> 00:10:16,190
conversion now it's a little bit

250
00:10:14,450 --> 00:10:18,320
different but the main idea is the same

251
00:10:16,190 --> 00:10:19,990
so the red part is going to be the part

252
00:10:18,320 --> 00:10:22,640
that's different from the original one

253
00:10:19,990 --> 00:10:24,770
so for the CRS it's just gonna be this

254
00:10:22,640 --> 00:10:27,620
evaluation key and the prover now is

255
00:10:24,770 --> 00:10:30,439
gonna sample this ske seeker key on her

256
00:10:27,620 --> 00:10:32,750
own and she's gonna commit to it then

257
00:10:30,440 --> 00:10:34,640
she's gonna encrypt this so this parts

258
00:10:32,750 --> 00:10:37,370
the same as the original kimu conversion

259
00:10:34,640 --> 00:10:38,720
so she's just gonna encrypt this witness

260
00:10:37,370 --> 00:10:41,000
with her secret key and she's gonna

261
00:10:38,720 --> 00:10:42,560
construct a circuit which on input this

262
00:10:41,000 --> 00:10:44,330
seeker key it was just going to compute

263
00:10:42,560 --> 00:10:46,250
this guy so it's going to first decrypt

264
00:10:44,330 --> 00:10:48,680
the ciphertext and get this witness back

265
00:10:46,250 --> 00:10:51,770
and check this relation so if this is

266
00:10:48,680 --> 00:10:54,949
equals to 1 then this circuit is gonna

267
00:10:51,770 --> 00:10:57,530
equal to 1/2 so what that means is that

268
00:10:54,950 --> 00:10:59,480
if you homomorphic lis evaluate this

269
00:10:57,530 --> 00:11:00,770
commitment on this circuit it's gonna be

270
00:10:59,480 --> 00:11:02,690
a commitment on 1 now

271
00:11:00,770 --> 00:11:05,180
so finally what you do is that you just

272
00:11:02,690 --> 00:11:07,010
use a non compact C arsonist to prove

273
00:11:05,180 --> 00:11:09,739
that this commitment opens to 1 again

274
00:11:07,010 --> 00:11:12,350
and here we can use a non compact so not

275
00:11:09,740 --> 00:11:16,100
a short CRS miss proof we

276
00:11:12,350 --> 00:11:18,020
because the compactness allows you to

277
00:11:16,100 --> 00:11:19,820
kind of prove this which is independent

278
00:11:18,020 --> 00:11:22,040
of this circus signs original circus

279
00:11:19,820 --> 00:11:23,690
size and you just output this so this is

280
00:11:22,040 --> 00:11:24,890
gonna be the main construction and in a

281
00:11:23,690 --> 00:11:27,770
nutshell what happened is that we

282
00:11:24,890 --> 00:11:31,370
obtained an HEC from this seed EHR based

283
00:11:27,770 --> 00:11:32,780
HHS of our previous work and at a high

284
00:11:31,370 --> 00:11:35,210
level what this provides you is that

285
00:11:32,780 --> 00:11:37,790
using an HCC amorphic equivocal

286
00:11:35,210 --> 00:11:40,490
commitment you can convert any non

287
00:11:37,790 --> 00:11:42,650
compact c arsonist into a compact

288
00:11:40,490 --> 00:11:46,580
seriousness so this you can view it as a

289
00:11:42,650 --> 00:11:48,680
generate conversion using this HEC so I

290
00:11:46,580 --> 00:11:50,000
don't have enough time but I'll go into

291
00:11:48,680 --> 00:11:53,209
the next part now part two

292
00:11:50,000 --> 00:11:55,640
it's about devian is so this has a

293
00:11:53,210 --> 00:11:58,430
different motivation now so recently at

294
00:11:55,640 --> 00:12:01,130
your curb last year court show huh fines

295
00:11:58,430 --> 00:12:03,739
and us and a cuatro Thurman wicks they

296
00:12:01,130 --> 00:12:06,710
all presented the first D beam is based

297
00:12:03,740 --> 00:12:09,890
on the CDH assumption however they

298
00:12:06,710 --> 00:12:11,660
relied on this uh FL s misc which uses

299
00:12:09,890 --> 00:12:14,000
the graph Hamiltonian city problem so

300
00:12:11,660 --> 00:12:17,870
the proof sides become very large when

301
00:12:14,000 --> 00:12:20,030
you try to construct a concrete and I

302
00:12:17,870 --> 00:12:21,920
see K from this and esepcially it's

303
00:12:20,030 --> 00:12:23,569
gonna be polynomial in this lambda and

304
00:12:21,920 --> 00:12:24,170
the circus size so the same question

305
00:12:23,570 --> 00:12:26,540
again

306
00:12:24,170 --> 00:12:29,630
can we make this into a circus IC plus

307
00:12:26,540 --> 00:12:31,280
Polie lambda and that's what we do this

308
00:12:29,630 --> 00:12:33,470
didn't work so we're gonna base it on

309
00:12:31,280 --> 00:12:35,329
the same CDH assumption but we're going

310
00:12:33,470 --> 00:12:38,900
to be able to get it down to C plus

311
00:12:35,330 --> 00:12:40,610
fully lambda and the starting point

312
00:12:38,900 --> 00:12:42,290
again so at a high level the it's the

313
00:12:40,610 --> 00:12:44,090
same thing so we're going to base it on

314
00:12:42,290 --> 00:12:47,719
this pre-processing enigk that we

315
00:12:44,090 --> 00:12:49,790
constructed at Europe last year I mean

316
00:12:47,720 --> 00:12:53,450
this year I guess uh and we want to get

317
00:12:49,790 --> 00:12:55,219
rid of this proved urkki somehow so what

318
00:12:53,450 --> 00:12:57,740
we did last time was that we constructed

319
00:12:55,220 --> 00:13:00,680
a context hiding a morphic Mac and using

320
00:12:57,740 --> 00:13:03,890
this kimu compiler we compile dysmorphic

321
00:13:00,680 --> 00:13:05,959
mac into a pre-processing ni z came so

322
00:13:03,890 --> 00:13:08,810
now the natural question is it's the

323
00:13:05,960 --> 00:13:11,600
same thing so can we bootstrap this

324
00:13:08,810 --> 00:13:13,339
pre-processing enigk into a Davina's by

325
00:13:11,600 --> 00:13:17,030
getting rid of this provers secret

326
00:13:13,340 --> 00:13:18,740
information and you might think that we

327
00:13:17,030 --> 00:13:21,920
can just use it the ho morphic equivocal

328
00:13:18,740 --> 00:13:23,420
commitments here and just do that but

329
00:13:21,920 --> 00:13:25,550
the thing is we don't have that from the

330
00:13:23,420 --> 00:13:25,939
CDH assumption right now so we have to

331
00:13:25,550 --> 00:13:29,029
go through

332
00:13:25,939 --> 00:13:32,659
some different approaches now so this

333
00:13:29,029 --> 00:13:34,789
part of this work is getting trying to

334
00:13:32,659 --> 00:13:38,809
bootstrap this PP desk into a Davina's

335
00:13:34,789 --> 00:13:41,779
just by using CDH so let me just kind of

336
00:13:38,809 --> 00:13:44,988
a get into detail what uh what we did in

337
00:13:41,779 --> 00:13:46,519
the previous work for pipian is so it's

338
00:13:44,989 --> 00:13:48,559
really not important but we have this

339
00:13:46,519 --> 00:13:50,539
verification key this is gonna be the

340
00:13:48,559 --> 00:13:52,699
femoral fake Mac key which is gonna be a

341
00:13:50,539 --> 00:13:54,379
finite field element like this and for

342
00:13:52,699 --> 00:13:56,299
the proving key it's just going to

343
00:13:54,379 --> 00:13:58,249
sample the secret key again and this is

344
00:13:56,299 --> 00:13:59,959
gonna be the signature it's really not

345
00:13:58,249 --> 00:14:01,939
important why it looks like this but

346
00:13:59,959 --> 00:14:05,209
it's just the way it is and after that

347
00:14:01,939 --> 00:14:08,358
using this kv + KP we just do the kimu

348
00:14:05,209 --> 00:14:10,819
conversion so now a first attempt are

349
00:14:08,359 --> 00:14:13,009
getting rid of this proving key is that

350
00:14:10,819 --> 00:14:15,348
we could sample this on our own we just

351
00:14:13,009 --> 00:14:17,929
sample this King on our own and sample

352
00:14:15,349 --> 00:14:20,629
the Sigma on our own but you kind of see

353
00:14:17,929 --> 00:14:22,759
that uh if you do this uniquely you

354
00:14:20,629 --> 00:14:26,659
uniquely define this object our vector

355
00:14:22,759 --> 00:14:28,909
here when s is fixed so this R really

356
00:14:26,659 --> 00:14:31,189
can't be programmed in advance so when

357
00:14:28,909 --> 00:14:32,959
the prove our samples this then at that

358
00:14:31,189 --> 00:14:34,998
point R is defined so we have to have a

359
00:14:32,959 --> 00:14:38,628
mechanism to send this R to the verifier

360
00:14:34,999 --> 00:14:40,789
now because the verifier needs this R in

361
00:14:38,629 --> 00:14:43,879
the verification key to kind of verify

362
00:14:40,789 --> 00:14:45,379
this whole thing but the problem is is

363
00:14:43,879 --> 00:14:47,720
that the prover doesn't even know what

364
00:14:45,379 --> 00:14:50,359
this R is because she doesn't know s so

365
00:14:47,720 --> 00:14:52,459
R is uniquely defined at this point but

366
00:14:50,359 --> 00:14:54,859
there seems to be no way to convert well

367
00:14:52,459 --> 00:14:59,059
to transform transfer this art to the

368
00:14:54,859 --> 00:15:00,829
verifier and to solve this problem we

369
00:14:59,059 --> 00:15:03,978
use inner product functional encryption

370
00:15:00,829 --> 00:15:05,929
schemes and so we use IP efi to

371
00:15:03,979 --> 00:15:09,589
implicitly transmit this vector r

372
00:15:05,929 --> 00:15:11,659
without leaking this prover key so what

373
00:15:09,589 --> 00:15:13,849
we do is that in the verification key

374
00:15:11,659 --> 00:15:17,419
we're just going to include this as

375
00:15:13,849 --> 00:15:18,949
secret key sk s for vector 1 s what the

376
00:15:17,419 --> 00:15:20,899
prover is gonna do is that she's gonna

377
00:15:18,949 --> 00:15:23,269
sample this key on her own the proven

378
00:15:20,899 --> 00:15:25,970
proving key and she's gonna encrypt this

379
00:15:23,269 --> 00:15:28,339
case sigma with the IP efi scheme right

380
00:15:25,970 --> 00:15:30,470
and then after that using this KP she's

381
00:15:28,339 --> 00:15:32,359
gonna just do the proofs and for the

382
00:15:30,470 --> 00:15:34,459
verifier what he's gonna do is that

383
00:15:32,359 --> 00:15:37,879
first he's gonna decrypt this ciphertext

384
00:15:34,459 --> 00:15:40,160
using this s KS and recover our and he's

385
00:15:37,879 --> 00:15:43,579
gonna run this verification out

386
00:15:40,160 --> 00:15:46,969
after that and the main observation here

387
00:15:43,579 --> 00:15:48,410
is that since it's an IP Fe scheme when

388
00:15:46,970 --> 00:15:50,120
you take the inner product between this

389
00:15:48,410 --> 00:15:52,279
case Sigma which is encrypted in

390
00:15:50,120 --> 00:15:54,319
ciphertext with this one s you get our

391
00:15:52,279 --> 00:15:56,870
back and when you like work out the

392
00:15:54,319 --> 00:15:58,128
equation this is this is the R that we

393
00:15:56,870 --> 00:16:00,800
really wanted to transmit to the

394
00:15:58,129 --> 00:16:03,550
verifier so this idea allows you to get

395
00:16:00,800 --> 00:16:06,199
around that sending are implicitly and

396
00:16:03,550 --> 00:16:08,089
as I remarked this one key IP Fe is

397
00:16:06,199 --> 00:16:11,089
implied by public key encryption schemes

398
00:16:08,089 --> 00:16:13,670
in general so this kind of allows you to

399
00:16:11,089 --> 00:16:15,410
get a public key encryption scheme with

400
00:16:13,670 --> 00:16:17,628
well I didn't tell you about this part

401
00:16:15,410 --> 00:16:20,509
but we need another another additional

402
00:16:17,629 --> 00:16:22,339
layer of non compact devious to prove

403
00:16:20,509 --> 00:16:24,139
well form this but this allows you to

404
00:16:22,339 --> 00:16:26,269
tell you that if you have this non

405
00:16:24,139 --> 00:16:28,430
compact devian disk and if you plug in a

406
00:16:26,269 --> 00:16:32,870
PK either you can generically convert it

407
00:16:28,430 --> 00:16:34,699
into a compact DV disc and finally I

408
00:16:32,870 --> 00:16:36,649
don't have enough time but I'll try to

409
00:16:34,699 --> 00:16:40,219
walk you through this last section about

410
00:16:36,649 --> 00:16:41,870
efficient provers so this part is quite

411
00:16:40,220 --> 00:16:43,250
different from the previous ones so it's

412
00:16:41,870 --> 00:16:45,529
a completely different motivation again

413
00:16:43,250 --> 00:16:47,600
so there are many papers regarding the

414
00:16:45,529 --> 00:16:50,810
efficiencies of verifiers which are

415
00:16:47,600 --> 00:16:52,459
basically ignores or snarks and what we

416
00:16:50,810 --> 00:16:54,560
kind of consider in this work is that

417
00:16:52,459 --> 00:16:56,449
well as far as our knowledge goes there

418
00:16:54,560 --> 00:16:59,750
seems to be no paper investigating the

419
00:16:56,449 --> 00:17:02,149
efficiency of provers right so all ni

420
00:16:59,750 --> 00:17:04,490
CK's has proved our running time which

421
00:17:02,149 --> 00:17:06,589
is going to be circus size times poly

422
00:17:04,490 --> 00:17:08,359
lambda and when you think about it the

423
00:17:06,589 --> 00:17:11,299
prover can always just send the witness

424
00:17:08,359 --> 00:17:15,458
so it seems a little bit of overkill to

425
00:17:11,299 --> 00:17:15,459
require the prover to have this much

426
00:17:16,329 --> 00:17:22,158
computation and so the question is can

427
00:17:19,520 --> 00:17:23,720
we do better than this and in this work

428
00:17:22,159 --> 00:17:25,400
we show that we can do better than this

429
00:17:23,720 --> 00:17:27,650
we can make this prove a running time

430
00:17:25,400 --> 00:17:32,299
which is sublinear in circuit size time

431
00:17:27,650 --> 00:17:33,860
poly lambda and this part it's very easy

432
00:17:32,299 --> 00:17:35,270
so the main idea is that we're just

433
00:17:33,860 --> 00:17:37,010
going to use laconic functional

434
00:17:35,270 --> 00:17:42,470
encryption which is a tool recently

435
00:17:37,010 --> 00:17:43,879
proposed by Quach Wien wix so people who

436
00:17:42,470 --> 00:17:46,400
don't know what this is it's a very

437
00:17:43,880 --> 00:17:48,590
strong and like a nice primitive that

438
00:17:46,400 --> 00:17:50,059
you can base on the l-w assumption but

439
00:17:48,590 --> 00:17:52,129
what it allows you to do is that when

440
00:17:50,059 --> 00:17:54,200
you have a circuit see you can compress

441
00:17:52,130 --> 00:17:55,580
this into a digest see

442
00:17:54,200 --> 00:17:57,559
where this is I just see it's gonna be

443
00:17:55,580 --> 00:17:59,330
it's gonna encode this information on

444
00:17:57,559 --> 00:18:02,629
the C but it's gonna be strictly smaller

445
00:17:59,330 --> 00:18:04,489
than the circuit size and using this as

446
00:18:02,629 --> 00:18:07,248
I just see anybody can encrypt and

447
00:18:04,489 --> 00:18:09,710
message em for this digest C and get an

448
00:18:07,249 --> 00:18:11,179
encryption and the thing is that the

449
00:18:09,710 --> 00:18:12,830
this running time of this encryption

450
00:18:11,179 --> 00:18:15,679
algorithm is going to be strictly

451
00:18:12,830 --> 00:18:17,480
smaller than the circus size now and the

452
00:18:15,679 --> 00:18:21,470
only requirement is that this encryption

453
00:18:17,480 --> 00:18:24,109
hides the message m and here anybody can

454
00:18:21,470 --> 00:18:27,139
decrypt this ciphertext with this

455
00:18:24,109 --> 00:18:30,109
circuit C so there is no notion of

456
00:18:27,139 --> 00:18:32,479
secret keys now anybody can do this and

457
00:18:30,109 --> 00:18:33,080
you will get this C of M back only C of

458
00:18:32,480 --> 00:18:36,379
M back

459
00:18:33,080 --> 00:18:38,899
and with this it's very easy to get a

460
00:18:36,379 --> 00:18:42,199
proved or efficient ni ZK so what we do

461
00:18:38,899 --> 00:18:44,899
is that in the end so we're first going

462
00:18:42,200 --> 00:18:46,789
to define C as this NP relation R and

463
00:18:44,899 --> 00:18:48,918
we're just going to compress this

464
00:18:46,789 --> 00:18:51,408
circuit C and put it in the digest right

465
00:18:48,919 --> 00:18:53,359
and for the prover what she's gonna do

466
00:18:51,409 --> 00:18:55,940
is that she's just gonna encrypt her

467
00:18:53,359 --> 00:19:00,019
statement X and her witness W with this

468
00:18:55,940 --> 00:19:02,419
digest C and lf-ii tells you that this

469
00:19:00,019 --> 00:19:03,769
is going to be strictly smaller than the

470
00:19:02,419 --> 00:19:06,350
running time it's gonna be strictly

471
00:19:03,769 --> 00:19:08,749
smaller than computing this circuit C

472
00:19:06,350 --> 00:19:12,139
and also this is gonna decrypt to 1

473
00:19:08,749 --> 00:19:15,350
right so anybody can decrypt this to see

474
00:19:12,139 --> 00:19:17,449
that it's gonna equal to 1 but things we

475
00:19:15,350 --> 00:19:20,480
also have to append with well form this

476
00:19:17,450 --> 00:19:23,989
proof with approver in efficient is so

477
00:19:20,480 --> 00:19:25,730
this could be any ni zk and this is

478
00:19:23,989 --> 00:19:27,259
because this encryption is going to be

479
00:19:25,730 --> 00:19:29,059
strictly the running time it's gonna be

480
00:19:27,259 --> 00:19:31,489
strictly smaller than this circuit size

481
00:19:29,059 --> 00:19:33,830
so we don't have to have like a compact

482
00:19:31,489 --> 00:19:35,389
or proof or efficient ni ZK here we can

483
00:19:33,830 --> 00:19:38,139
just plug it in any like let's say

484
00:19:35,389 --> 00:19:39,619
growth also tsuki sy and I ZK here and

485
00:19:38,139 --> 00:19:41,449
this is it

486
00:19:39,619 --> 00:19:43,519
so the verifier is just gonna check this

487
00:19:41,450 --> 00:19:45,470
proof and he's gonna decrypt this and if

488
00:19:43,519 --> 00:19:49,009
it equals to 1 then she knows that it

489
00:19:45,470 --> 00:19:51,109
was a valid proof and yet again so this

490
00:19:49,009 --> 00:19:53,059
can be viewed as a general compiler

491
00:19:51,109 --> 00:19:56,359
again so if you haven't proved ur

492
00:19:53,059 --> 00:19:58,850
non-efficient ni zk then you could add

493
00:19:56,359 --> 00:20:02,960
an elbow fee there and get approver

494
00:19:58,850 --> 00:20:07,238
efficient ni z k okay so this is our

495
00:20:02,960 --> 00:20:07,239
conclusion slide thank you for listening

496
00:20:12,190 --> 00:20:23,150
and questions okay let's thank the

497
00:20:22,100 --> 00:20:27,549
speaker again

498
00:20:23,150 --> 00:20:27,549
[Applause]

