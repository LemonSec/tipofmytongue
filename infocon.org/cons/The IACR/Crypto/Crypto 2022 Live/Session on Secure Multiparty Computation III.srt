1
00:00:00,000 --> 00:00:03,240
is an algebraic framework for silent

2
00:00:03,240 --> 00:00:06,299
pre-processing with trustedly setup and

3
00:00:06,299 --> 00:00:10,080
active security and Damiano Abram is

4
00:00:10,080 --> 00:00:11,759
going to give the talk

5
00:00:11,759 --> 00:00:14,880
does it work okay great so this is the

6
00:00:14,880 --> 00:00:16,680
result of a collaboration between myself

7
00:00:16,680 --> 00:00:19,439
even Dem Gore claudiolandi and Peter

8
00:00:19,439 --> 00:00:23,279
Shaw all from ohus University so our

9
00:00:23,279 --> 00:00:25,260
main contribution is the introduction of

10
00:00:25,260 --> 00:00:27,180
an algebraic framework that can be used

11
00:00:27,180 --> 00:00:29,580
to build public ppcfs for OT and

12
00:00:29,580 --> 00:00:32,098
vectorally and two-party homomorphic

13
00:00:32,098 --> 00:00:34,500
secret sharing for branching programs in

14
00:00:34,500 --> 00:00:36,000
the next slide I will recap the

15
00:00:36,000 --> 00:00:38,579
definition of these two Primitives so

16
00:00:38,579 --> 00:00:39,899
Delta break framework can be

17
00:00:39,899 --> 00:00:42,360
instantiated in various ways the first

18
00:00:42,360 --> 00:00:44,719
one is palier actually this is kind of

19
00:00:44,719 --> 00:00:46,800
something already known since Europe

20
00:00:46,800 --> 00:00:48,539
2021.

21
00:00:48,539 --> 00:00:50,760
then we have a variant of Joey libert

22
00:00:50,760 --> 00:00:53,820
and finally class groups the first two

23
00:00:53,820 --> 00:00:56,100
options have a disadvantage namely that

24
00:00:56,100 --> 00:00:58,260
in order to build public upcfs and

25
00:00:58,260 --> 00:01:00,239
homomorphic secret sharing we need

26
00:01:00,239 --> 00:01:02,520
trusted setups but class groups don't

27
00:01:02,520 --> 00:01:04,220
suffer from this issue

28
00:01:04,220 --> 00:01:07,320
finally in the paper we present how to

29
00:01:07,320 --> 00:01:09,540
upgrade all our constructions to active

30
00:01:09,540 --> 00:01:11,880
security and we obtain implementable

31
00:01:11,880 --> 00:01:13,080
Solutions

32
00:01:13,080 --> 00:01:15,900
okay so we consider and solved two

33
00:01:15,900 --> 00:01:17,939
problems in the first one we have two

34
00:01:17,939 --> 00:01:20,340
parties and the correlation function C

35
00:01:20,340 --> 00:01:22,740
uh this is just a function that outputs

36
00:01:22,740 --> 00:01:25,140
two random correlated values are zero

37
00:01:25,140 --> 00:01:27,360
and R1 and we want to give our zero only

38
00:01:27,360 --> 00:01:30,720
to particip zero and R1 only to bar tp1

39
00:01:30,720 --> 00:01:33,180
furthermore we want to generate many of

40
00:01:33,180 --> 00:01:35,460
these correlated pairs using only one

41
00:01:35,460 --> 00:01:37,740
round of interaction and sublinear

42
00:01:37,740 --> 00:01:39,540
communication in the number of samples

43
00:01:39,540 --> 00:01:42,720
we produce a possible solution to this

44
00:01:42,720 --> 00:01:44,700
problem is is called public key

45
00:01:44,700 --> 00:01:46,439
pseudo-random correlation function or

46
00:01:46,439 --> 00:01:49,200
public keypcf for short basically it is

47
00:01:49,200 --> 00:01:50,520
a one round protocol in which the

48
00:01:50,520 --> 00:01:53,040
parties exchange some public keys and

49
00:01:53,040 --> 00:01:55,020
then with the aid of public nonsense

50
00:01:55,020 --> 00:01:57,060
they can evaluate them and get their own

51
00:01:57,060 --> 00:01:59,219
share of the correlated randomness

52
00:01:59,219 --> 00:02:01,200
in order to generate many shares all

53
00:02:01,200 --> 00:02:02,820
they need to do is to pick many answers

54
00:02:02,820 --> 00:02:04,439
they repeat their computations many

55
00:02:04,439 --> 00:02:06,240
times and they don't need to interact

56
00:02:06,240 --> 00:02:08,520
after the first round

57
00:02:08,520 --> 00:02:11,038
okay in the paper we present the

58
00:02:11,038 --> 00:02:13,080
construction that works for OT and

59
00:02:13,080 --> 00:02:15,599
vectorally correlation

60
00:02:15,599 --> 00:02:17,879
all right the second problem we

61
00:02:17,879 --> 00:02:19,680
considered is again in the two-party

62
00:02:19,680 --> 00:02:22,080
setting but now the parties hold some

63
00:02:22,080 --> 00:02:24,360
private inputs like zero and X1

64
00:02:24,360 --> 00:02:26,640
our goal is to evaluate some function f

65
00:02:26,640 --> 00:02:29,640
belonging to some class capital F and we

66
00:02:29,640 --> 00:02:31,680
want to to compute the output using only

67
00:02:31,680 --> 00:02:34,319
two rounds of interaction Plus on pki

68
00:02:34,319 --> 00:02:35,580
actually

69
00:02:35,580 --> 00:02:37,920
so a possible solution to this problem

70
00:02:37,920 --> 00:02:40,560
is called homomorph physical sharing and

71
00:02:40,560 --> 00:02:42,420
basically it's a two round Construction

72
00:02:42,420 --> 00:02:44,340
in which the parties initially secret

73
00:02:44,340 --> 00:02:46,440
share their inputs According to some

74
00:02:46,440 --> 00:02:48,660
particular secret sharing scheme and

75
00:02:48,660 --> 00:02:50,280
then with the only local computations

76
00:02:50,280 --> 00:02:52,019
they can derive an additive secret

77
00:02:52,019 --> 00:02:54,300
sharing of the output so by pulling

78
00:02:54,300 --> 00:02:55,920
togethers at zero and said one they get

79
00:02:55,920 --> 00:02:57,180
what they want

80
00:02:57,180 --> 00:02:59,519
so in the paper we present a

81
00:02:59,519 --> 00:03:00,959
construction that works for a

82
00:03:00,959 --> 00:03:03,120
generalization of the class of branching

83
00:03:03,120 --> 00:03:04,920
programs

84
00:03:04,920 --> 00:03:06,480
okay

85
00:03:06,480 --> 00:03:08,340
um our starting point is the rise of

86
00:03:08,340 --> 00:03:11,940
Bali it's a euroclip 2021 paper and it

87
00:03:11,940 --> 00:03:13,440
solved both the problems I just

88
00:03:13,440 --> 00:03:16,500
described their solution is based on the

89
00:03:16,500 --> 00:03:18,780
polyacryptosystem and actually It

90
00:03:18,780 --> 00:03:21,239
suffers some or from some disadvantages

91
00:03:21,239 --> 00:03:24,000
namely that in order to build public

92
00:03:24,000 --> 00:03:26,940
epcfs and homomorphic secret sharing uh

93
00:03:26,940 --> 00:03:30,060
they need trusted setups uh distrusted

94
00:03:30,060 --> 00:03:32,459
setups generate a public RSA modularly

95
00:03:32,459 --> 00:03:35,400
often non-factorization

96
00:03:35,400 --> 00:03:37,920
okay in this paper we noticed that the

97
00:03:37,920 --> 00:03:39,480
ideas of the rise of public can be

98
00:03:39,480 --> 00:03:41,580
generalized so we don't need to work

99
00:03:41,580 --> 00:03:43,920
over palier anymore we can just work

100
00:03:43,920 --> 00:03:46,500
over a generic group that satisfies some

101
00:03:46,500 --> 00:03:48,060
particular properties

102
00:03:48,060 --> 00:03:50,159
and yeah one of the instantiations of

103
00:03:50,159 --> 00:03:52,379
this framework is class groups and that

104
00:03:52,379 --> 00:03:55,500
allows us to get rid of trusted setups

105
00:03:55,500 --> 00:03:58,319
okay our framework in detail is a group

106
00:03:58,319 --> 00:04:00,659
G that can be decomposed into the

107
00:04:00,659 --> 00:04:03,780
product of F and H where f is cyclic

108
00:04:03,780 --> 00:04:06,659
and we ask that D log is easy over F but

109
00:04:06,659 --> 00:04:08,760
hard over it

110
00:04:08,760 --> 00:04:11,040
so in this setting we are able to solve

111
00:04:11,040 --> 00:04:12,900
the distributed delog problem which is

112
00:04:12,900 --> 00:04:14,760
the base technique at the base of our

113
00:04:14,760 --> 00:04:16,560
Construction

114
00:04:16,560 --> 00:04:19,199
and yeah basically we have two parties

115
00:04:19,199 --> 00:04:22,019
who have two values Alpha and beta and

116
00:04:22,019 --> 00:04:23,520
the quotient of these two values is

117
00:04:23,520 --> 00:04:26,639
guaranteed to be a power of f f to the n

118
00:04:26,639 --> 00:04:29,580
our goal is to convert this into an

119
00:04:29,580 --> 00:04:31,560
additive secret sharing of them without

120
00:04:31,560 --> 00:04:33,900
any interaction so the parties just need

121
00:04:33,900 --> 00:04:35,400
to work on their inputs they are not

122
00:04:35,400 --> 00:04:37,740
allowed to communicate

123
00:04:37,740 --> 00:04:41,040
okay in order to explain how to solve

124
00:04:41,040 --> 00:04:42,840
this problem I have to recap the

125
00:04:42,840 --> 00:04:45,180
definition of coset basically this is

126
00:04:45,180 --> 00:04:47,340
just a subset of the group G that is

127
00:04:47,340 --> 00:04:49,139
obtained by a repeatedly multiply any

128
00:04:49,139 --> 00:04:52,139
element G by powers of f

129
00:04:52,139 --> 00:04:54,600
so if we repeat this operation for each

130
00:04:54,600 --> 00:04:56,280
element of the group we end up with this

131
00:04:56,280 --> 00:04:58,560
kind of structure so the group is

132
00:04:58,560 --> 00:05:00,600
decomposed into cosets and if each of

133
00:05:00,600 --> 00:05:03,000
these looks like a ring because f is

134
00:05:03,000 --> 00:05:04,080
cyclic

135
00:05:04,080 --> 00:05:08,580
now we consider again the setting of The

136
00:05:08,580 --> 00:05:10,199
distributed D log we have these two

137
00:05:10,199 --> 00:05:12,479
elements alphan beta whose quotient is f

138
00:05:12,479 --> 00:05:15,360
to them what does that mean it means

139
00:05:15,360 --> 00:05:16,860
that Alpha and beta both belong to the

140
00:05:16,860 --> 00:05:18,600
same coset and that's because we can

141
00:05:18,600 --> 00:05:21,360
obtain Alpha by multiplying beta by this

142
00:05:21,360 --> 00:05:23,340
power of f

143
00:05:23,340 --> 00:05:25,860
so now let's speak discuss that and we

144
00:05:25,860 --> 00:05:27,979
simply simplify our setting a little bit

145
00:05:27,979 --> 00:05:30,900
we assume that the parties have a public

146
00:05:30,900 --> 00:05:33,840
canonical representative of the coset we

147
00:05:33,840 --> 00:05:35,820
denote it by gamma and this is just an

148
00:05:35,820 --> 00:05:37,500
element that is known to both parties

149
00:05:37,500 --> 00:05:41,400
and this element is part of the coset

150
00:05:41,400 --> 00:05:44,880
now since Alpha and beta belong to the

151
00:05:44,880 --> 00:05:47,220
coset it means that we can walk from

152
00:05:47,220 --> 00:05:50,580
beta to Alpha uh walking around along

153
00:05:50,580 --> 00:05:52,860
the ring and that corresponds to

154
00:05:52,860 --> 00:05:55,919
multiplying by F to the m

155
00:05:55,919 --> 00:05:58,740
since gamma belongs to this cosa2 it is

156
00:05:58,740 --> 00:06:00,720
also possible to walk from beta to gamma

157
00:06:00,720 --> 00:06:03,720
and we call the corresponding power uh

158
00:06:03,720 --> 00:06:06,960
the one of the work f2db

159
00:06:06,960 --> 00:06:09,180
in a similar way we can work from gamma

160
00:06:09,180 --> 00:06:11,220
to Alpha and we call the corresponding

161
00:06:11,220 --> 00:06:13,139
power F today

162
00:06:13,139 --> 00:06:15,720
so what's the relation between a B and M

163
00:06:15,720 --> 00:06:18,180
it must be that the sum of A and B is

164
00:06:18,180 --> 00:06:21,120
equal to M modulo the order of f and

165
00:06:21,120 --> 00:06:23,220
this is what we want to obtain and

166
00:06:23,220 --> 00:06:25,319
actually this is our Adidas solution

167
00:06:25,319 --> 00:06:28,080
why is this the case because A and B are

168
00:06:28,080 --> 00:06:31,080
known to P0 mp1 respectively

169
00:06:31,080 --> 00:06:33,300
in order to obtain a we just need to

170
00:06:33,300 --> 00:06:36,360
divide Alpha by gamma we obtain F today

171
00:06:36,360 --> 00:06:38,580
and then we can compute the D log that

172
00:06:38,580 --> 00:06:41,639
is easy because it's a d log over f

173
00:06:41,639 --> 00:06:44,220
in a similar way we can obtain B by

174
00:06:44,220 --> 00:06:46,500
dividing gamma by Beta and then again

175
00:06:46,500 --> 00:06:48,800
Computing the D log

176
00:06:48,800 --> 00:06:51,720
all right the big question is how do we

177
00:06:51,720 --> 00:06:54,060
get this canonical representatives in

178
00:06:54,060 --> 00:06:55,560
polynomial time and without an

179
00:06:55,560 --> 00:06:57,599
interaction so in order to solve this

180
00:06:57,599 --> 00:06:59,639
problem we introduced two new Notions

181
00:06:59,639 --> 00:07:01,680
and the first one is called the coset

182
00:07:01,680 --> 00:07:03,419
labeling function

183
00:07:03,419 --> 00:07:05,520
basically this is just a function that

184
00:07:05,520 --> 00:07:07,919
runs in polynomial time and Maps each of

185
00:07:07,919 --> 00:07:10,680
the cosets into a different element

186
00:07:10,680 --> 00:07:12,360
the other notion we introduce is called

187
00:07:12,360 --> 00:07:13,919
the lifting function and basically it

188
00:07:13,919 --> 00:07:15,840
does the opposite it is again computable

189
00:07:15,840 --> 00:07:18,180
in polynomial time it picks any element

190
00:07:18,180 --> 00:07:20,220
in the image of the closet labeling

191
00:07:20,220 --> 00:07:22,800
function and it lifts it back into an

192
00:07:22,800 --> 00:07:25,440
element of the corresponding coset

193
00:07:25,440 --> 00:07:27,720
so how can we use this to find the

194
00:07:27,720 --> 00:07:29,639
canonical Representatives well it's

195
00:07:29,639 --> 00:07:31,620
pretty easy the parties just take their

196
00:07:31,620 --> 00:07:33,840
input they apply the concept labeling

197
00:07:33,840 --> 00:07:35,400
function they end up with the same

198
00:07:35,400 --> 00:07:37,319
element and then they lift it back into

199
00:07:37,319 --> 00:07:39,840
the quotient the result is gamma the

200
00:07:39,840 --> 00:07:42,240
canonical representative and at that

201
00:07:42,240 --> 00:07:44,400
point we can solve distributed D log as

202
00:07:44,400 --> 00:07:47,280
I described in the previous slide

203
00:07:47,280 --> 00:07:49,440
all right so there are many groups that

204
00:07:49,440 --> 00:07:51,599
can be decomposed into as the product of

205
00:07:51,599 --> 00:07:54,300
F and H where D log is easy over f

206
00:07:54,300 --> 00:07:56,400
uh the question is how many of this

207
00:07:56,400 --> 00:07:58,319
group have costed labeling functions and

208
00:07:58,319 --> 00:08:00,780
lifting functions we came up with

209
00:08:00,780 --> 00:08:03,020
instantiations uh the first one is pale

210
00:08:03,020 --> 00:08:06,000
this was already known since Europe 2021

211
00:08:06,000 --> 00:08:08,400
actually we are just generalizing the

212
00:08:08,400 --> 00:08:10,440
ideas of the rest of

213
00:08:10,440 --> 00:08:13,440
so here uh the coset labeling function

214
00:08:13,440 --> 00:08:16,379
is just the reduction modulo n the

215
00:08:16,379 --> 00:08:19,259
lifting function is the identity

216
00:08:19,259 --> 00:08:22,259
another case we can deal with is when f

217
00:08:22,259 --> 00:08:25,259
is small namely polynomial in size here

218
00:08:25,259 --> 00:08:27,360
the coset labeling function just outputs

219
00:08:27,360 --> 00:08:29,099
the minimum according to the texture

220
00:08:29,099 --> 00:08:31,319
graphical order in the coset and we can

221
00:08:31,319 --> 00:08:33,000
compute this in polynomial time because

222
00:08:33,000 --> 00:08:35,700
the coset is small and the lifting

223
00:08:35,700 --> 00:08:37,979
function is again data density

224
00:08:37,979 --> 00:08:40,620
then we have some variants of Joey

225
00:08:40,620 --> 00:08:42,839
libert in this variance the plaintiff

226
00:08:42,839 --> 00:08:45,899
space is uh has size equal to the

227
00:08:45,899 --> 00:08:48,000
product of the first L primes for some

228
00:08:48,000 --> 00:08:50,279
integer L and the techniques here are

229
00:08:50,279 --> 00:08:52,500
just applying the trick of the previous

230
00:08:52,500 --> 00:08:54,660
case when f is small with the Chinese

231
00:08:54,660 --> 00:08:56,760
remember theorem

232
00:08:56,760 --> 00:09:00,060
and finally we have class groups

233
00:09:00,060 --> 00:09:02,180
um here pi and Delta are actually

234
00:09:02,180 --> 00:09:04,560
homomorphisms and they are not new to

235
00:09:04,560 --> 00:09:06,600
cryptography they were used for instance

236
00:09:06,600 --> 00:09:09,660
in the nice crypto system

237
00:09:09,660 --> 00:09:12,180
the important Point here however is that

238
00:09:12,180 --> 00:09:15,180
for police and Joey libert we still need

239
00:09:15,180 --> 00:09:16,920
trusted setups in order to build public

240
00:09:16,920 --> 00:09:20,339
epcf and homomorphic secret sharing but

241
00:09:20,339 --> 00:09:21,899
for class groups we don't have this

242
00:09:21,899 --> 00:09:23,100
problem

243
00:09:23,100 --> 00:09:27,240
okay Michael now is to describe one of

244
00:09:27,240 --> 00:09:29,820
our constructions namely the public epcf

245
00:09:29,820 --> 00:09:32,100
or vectorally correlation

246
00:09:32,100 --> 00:09:34,200
and I will start by recapping what

247
00:09:34,200 --> 00:09:36,360
vectorally correlation is so we have two

248
00:09:36,360 --> 00:09:38,940
parties and we work over a group so then

249
00:09:38,940 --> 00:09:41,279
in our construction design will be an

250
00:09:41,279 --> 00:09:43,200
RSA module

251
00:09:43,200 --> 00:09:45,480
we want to Generate random tuples of the

252
00:09:45,480 --> 00:09:47,760
following form so P0 gets a random pair

253
00:09:47,760 --> 00:09:51,000
X at zero P1 gets a random pair as that

254
00:09:51,000 --> 00:09:53,399
one why and these elements need to

255
00:09:53,399 --> 00:09:55,140
satisfy the correlation rule you see in

256
00:09:55,140 --> 00:09:57,779
the middle name that Z1 is equal to zero

257
00:09:57,779 --> 00:10:00,600
plus the product of X and Y in some

258
00:10:00,600 --> 00:10:02,940
sense that 0 and Z1 are a subtractive

259
00:10:02,940 --> 00:10:06,019
SQL sharing of the product extensibly

260
00:10:06,019 --> 00:10:08,220
we want to generate many of these

261
00:10:08,220 --> 00:10:10,440
doubles and we want to reuse the same

262
00:10:10,440 --> 00:10:13,500
value y uh the element of party P1 for

263
00:10:13,500 --> 00:10:15,360
each of them and these are called the

264
00:10:15,360 --> 00:10:17,100
vectorally tuples and they are used more

265
00:10:17,100 --> 00:10:18,660
or less everywhere in cryptography

266
00:10:18,660 --> 00:10:21,720
especially multi-party computation

267
00:10:21,720 --> 00:10:24,720
okay so our PCF will have the following

268
00:10:24,720 --> 00:10:28,740
form so rtp1 will hold the element y the

269
00:10:28,740 --> 00:10:31,560
parties exchange their public keys and

270
00:10:31,560 --> 00:10:33,360
then with the help of public random

271
00:10:33,360 --> 00:10:35,839
nonsense generated using a random Oracle

272
00:10:35,839 --> 00:10:38,459
they can obtain their own share of the

273
00:10:38,459 --> 00:10:41,640
correlation P0 gets the pair X at zero

274
00:10:41,640 --> 00:10:45,360
P1 gets only that one and the elements

275
00:10:45,360 --> 00:10:47,519
are guaranteed to satisfy the vectorally

276
00:10:47,519 --> 00:10:50,959
correlation at the bottom

277
00:10:50,959 --> 00:10:54,600
okay our construction can be split into

278
00:10:54,600 --> 00:10:57,420
two parts the first part is a PCF that

279
00:10:57,420 --> 00:10:59,700
relies on a trusted dealer and the

280
00:10:59,700 --> 00:11:01,980
second part is a one drone protocol that

281
00:11:01,980 --> 00:11:05,160
substitutes this uh trusted dealer

282
00:11:05,160 --> 00:11:06,899
the first part can be built using

283
00:11:06,899 --> 00:11:08,820
distributed d-log over the palier group

284
00:11:08,820 --> 00:11:10,680
and actually it is the same construction

285
00:11:10,680 --> 00:11:12,959
as the rise of Dalia

286
00:11:12,959 --> 00:11:15,180
the second part our contributions are

287
00:11:15,180 --> 00:11:16,800
all in the second part which is actually

288
00:11:16,800 --> 00:11:18,899
a one round Ole protocol

289
00:11:18,899 --> 00:11:21,420
it can be built using distributed log

290
00:11:21,420 --> 00:11:23,760
over the generic framework and yeah

291
00:11:23,760 --> 00:11:26,160
using the class group instantiation we

292
00:11:26,160 --> 00:11:28,560
don't need an interested setup

293
00:11:28,560 --> 00:11:31,860
now my goal is to describe the first

294
00:11:31,860 --> 00:11:33,420
construction and later on I will

295
00:11:33,420 --> 00:11:35,220
describe the second one

296
00:11:35,220 --> 00:11:38,519
so I will start by recapping so we have

297
00:11:38,519 --> 00:11:41,459
this RSA modulo n and a decryption key D

298
00:11:41,459 --> 00:11:43,320
which is just an integer that is

299
00:11:43,320 --> 00:11:45,600
congruent to zero module of Phi of N and

300
00:11:45,600 --> 00:11:47,760
congruent to One modulo n

301
00:11:47,760 --> 00:11:50,040
we work over the group z and square star

302
00:11:50,040 --> 00:11:52,320
the invertible elements in set and

303
00:11:52,320 --> 00:11:53,100
square

304
00:11:53,100 --> 00:11:55,200
and this group can be decomposed as the

305
00:11:55,200 --> 00:11:57,420
product of the subgroup generated by one

306
00:11:57,420 --> 00:12:00,540
plus ten and another subgroup of page

307
00:12:00,540 --> 00:12:02,760
d-log is easy over the first subgroup

308
00:12:02,760 --> 00:12:05,100
but hard over the second one so this

309
00:12:05,100 --> 00:12:07,560
already gives a hint on why this is an

310
00:12:07,560 --> 00:12:10,320
instantiation of our framework

311
00:12:10,320 --> 00:12:13,380
okay so in order to encrypt a value X we

312
00:12:13,380 --> 00:12:15,420
just need to raise one plus n to the X

313
00:12:15,420 --> 00:12:17,240
and then we multiply by a random element

314
00:12:17,240 --> 00:12:20,579
raised to the end in order to decrypt we

315
00:12:20,579 --> 00:12:22,380
just take the cipher text we arranged it

316
00:12:22,380 --> 00:12:24,720
to the D and what we get is one plus n

317
00:12:24,720 --> 00:12:27,540
to the X in order to retrieve X we just

318
00:12:27,540 --> 00:12:29,220
compute a d log which is easy because

319
00:12:29,220 --> 00:12:31,940
it's in the first subgroup

320
00:12:31,940 --> 00:12:34,740
an important property that I will use in

321
00:12:34,740 --> 00:12:36,660
the PCF is that if we pick a random

322
00:12:36,660 --> 00:12:39,180
element in the group D what we get is

323
00:12:39,180 --> 00:12:42,779
also a random polyester text

324
00:12:42,779 --> 00:12:46,200
okay now I will explain the main trick

325
00:12:46,200 --> 00:12:49,800
in the PCF with trusted dealer so we

326
00:12:49,800 --> 00:12:52,700
have distrust the dealer that generates

327
00:12:52,700 --> 00:12:56,399
the Pali keys and and the

328
00:12:56,399 --> 00:12:58,740
then it will provide the parties with

329
00:12:58,740 --> 00:13:02,279
element y0 and y1 that satisfy what you

330
00:13:02,279 --> 00:13:04,860
see in on the slide so y1 is equal to

331
00:13:04,860 --> 00:13:07,620
where zero plus d times Y in some sense

332
00:13:07,620 --> 00:13:10,500
it's a subtractive secret sharing of the

333
00:13:10,500 --> 00:13:13,680
decryption key times an integer why this

334
00:13:13,680 --> 00:13:16,440
integer can be sampled at random

335
00:13:16,440 --> 00:13:18,839
we also assume that we have a polyester

336
00:13:18,839 --> 00:13:21,120
vertexy an encryption of some other

337
00:13:21,120 --> 00:13:22,860
value X

338
00:13:22,860 --> 00:13:24,120
okay

339
00:13:24,120 --> 00:13:26,940
now the parties can take this ciphertext

340
00:13:26,940 --> 00:13:30,839
and raise it to y0 and y1 and what they

341
00:13:30,839 --> 00:13:32,940
get are elements Alpha Beta whose

342
00:13:32,940 --> 00:13:34,980
quotient is guaranteed to be one plus n

343
00:13:34,980 --> 00:13:36,720
to the x times y

344
00:13:36,720 --> 00:13:38,700
why is this the case well we are kind of

345
00:13:38,700 --> 00:13:40,800
performing a distributed decryption of

346
00:13:40,800 --> 00:13:43,079
the ciphertext

347
00:13:43,079 --> 00:13:44,639
um the only difference is that

348
00:13:44,639 --> 00:13:47,220
everything is also raised to the Y

349
00:13:47,220 --> 00:13:49,980
anyway the important point is that this

350
00:13:49,980 --> 00:13:51,899
Alpha meter satisfy the condition to

351
00:13:51,899 --> 00:13:54,000
apply the distributed d-log techniques

352
00:13:54,000 --> 00:13:56,339
and so the parties can only

353
00:13:56,339 --> 00:13:58,500
interactively obtain elements that zero

354
00:13:58,500 --> 00:14:00,060
and that one that satisfy the vectorally

355
00:14:00,060 --> 00:14:01,920
correlation namely a subtractive SQL

356
00:14:01,920 --> 00:14:05,339
sharing of the product X times y

357
00:14:05,339 --> 00:14:11,100
so how can we use this to uh build a PCF

358
00:14:11,100 --> 00:14:14,040
well we have distrusted the dealer it

359
00:14:14,040 --> 00:14:15,440
generates the

360
00:14:15,440 --> 00:14:20,820
poly keys and this SQL chain y0 wise one

361
00:14:20,820 --> 00:14:24,180
where Y is sample that's random then it

362
00:14:24,180 --> 00:14:27,720
will give D and Y 0 to party P0 and y1

363
00:14:27,720 --> 00:14:30,180
and Y to bar tp1

364
00:14:30,180 --> 00:14:33,060
the PCF announces uh will be random

365
00:14:33,060 --> 00:14:35,820
police ciphertext and we can generate

366
00:14:35,820 --> 00:14:37,680
these non-interactively using a random

367
00:14:37,680 --> 00:14:40,860
Oracle because as I said uh in order to

368
00:14:40,860 --> 00:14:42,720
sample a random participate we just need

369
00:14:42,720 --> 00:14:44,760
to pick a random element in the

370
00:14:44,760 --> 00:14:47,399
polygroup that M square star

371
00:14:47,399 --> 00:14:49,740
now we have the ciphertext we have these

372
00:14:49,740 --> 00:14:51,779
elements y0 and y1 we can apply the

373
00:14:51,779 --> 00:14:53,820
trick that I described before so without

374
00:14:53,820 --> 00:14:55,740
any interaction the part is obtained 0

375
00:14:55,740 --> 00:14:57,779
and Z1 that satisfy the vector only

376
00:14:57,779 --> 00:14:59,300
correlation

377
00:14:59,300 --> 00:15:02,040
now we also have to provide the x and y

378
00:15:02,040 --> 00:15:04,740
to the two parties P0 and P1 for why we

379
00:15:04,740 --> 00:15:06,120
have no issues because the trusted

380
00:15:06,120 --> 00:15:09,899
dealer already gave the uh to uh here to

381
00:15:09,899 --> 00:15:11,760
party P1 at the beginning

382
00:15:11,760 --> 00:15:14,459
for X also we have no problems because

383
00:15:14,459 --> 00:15:17,339
P0 has the decryption key so it can just

384
00:15:17,339 --> 00:15:19,019
decrypt the ciphertext the one in the

385
00:15:19,019 --> 00:15:20,459
nuts

386
00:15:20,459 --> 00:15:21,540
okay

387
00:15:21,540 --> 00:15:24,260
this was the PCF

388
00:15:24,260 --> 00:15:27,600
based on the trusted dealer now I will

389
00:15:27,600 --> 00:15:30,839
explain the one round protocol that

390
00:15:30,839 --> 00:15:32,779
removes this trusted dealer

391
00:15:32,779 --> 00:15:36,660
so we use the same technique so we start

392
00:15:36,660 --> 00:15:39,240
by reconsidering again what the trusted

393
00:15:39,240 --> 00:15:41,880
dealer does so first of all it generates

394
00:15:41,880 --> 00:15:43,519
this

395
00:15:43,519 --> 00:15:46,199
and it gives the decryption key to party

396
00:15:46,199 --> 00:15:48,959
P0 here we are assuming that the parties

397
00:15:48,959 --> 00:15:51,060
are semi honest so we can just let P0

398
00:15:51,060 --> 00:15:53,519
generate the keys and then it will send

399
00:15:53,519 --> 00:15:55,800
n to party P1 in the only round of

400
00:15:55,800 --> 00:15:57,600
interaction

401
00:15:57,600 --> 00:15:59,820
The Trusted dealer gives also why to

402
00:15:59,820 --> 00:16:02,759
party P1 this element is sampled at

403
00:16:02,759 --> 00:16:04,740
random so we can just select P1 sample

404
00:16:04,740 --> 00:16:06,540
it for itself

405
00:16:06,540 --> 00:16:09,839
the harder part is obtaining these

406
00:16:09,839 --> 00:16:12,180
elements y0 and y1 the secret sharing of

407
00:16:12,180 --> 00:16:13,860
the product D times y

408
00:16:13,860 --> 00:16:15,899
basically we want a one-room protocol in

409
00:16:15,899 --> 00:16:18,959
which P0 inputs D V1 our inputs Y and

410
00:16:18,959 --> 00:16:20,759
the part is obtaining obtaining the

411
00:16:20,759 --> 00:16:23,759
secret sharing of the product uh in a

412
00:16:23,759 --> 00:16:25,560
secure way so basically it's a one round

413
00:16:25,560 --> 00:16:27,839
only protocol

414
00:16:27,839 --> 00:16:30,000
we use the same construction as drives

415
00:16:30,000 --> 00:16:32,699
of Pali we try to generalize it to the

416
00:16:32,699 --> 00:16:35,279
framework but actually things are not as

417
00:16:35,279 --> 00:16:39,120
easy as one might expect so

418
00:16:39,120 --> 00:16:42,959
we rely on the CRS this consists of two

419
00:16:42,959 --> 00:16:45,180
random elements in the group dn8 and we

420
00:16:45,180 --> 00:16:46,500
sample them according to some

421
00:16:46,500 --> 00:16:47,940
distribution d

422
00:16:47,940 --> 00:16:49,920
in the class group instantiation this

423
00:16:49,920 --> 00:16:52,139
CRS will be generated using a random

424
00:16:52,139 --> 00:16:53,699
mark

425
00:16:53,699 --> 00:16:56,699
okay the methods of party P0 will be a

426
00:16:56,699 --> 00:16:58,860
group element V that is equal to G to

427
00:16:58,860 --> 00:17:01,560
the r times H to the D for some random

428
00:17:01,560 --> 00:17:03,240
element r

429
00:17:03,240 --> 00:17:06,059
the methods of party P1 will be an

430
00:17:06,059 --> 00:17:08,699
Algoma like encryption of its input Y

431
00:17:08,699 --> 00:17:11,099
and the corresponding public key will be

432
00:17:11,099 --> 00:17:14,480
the one in the CRS the pair g8s

433
00:17:14,480 --> 00:17:17,280
uh using only local computations the

434
00:17:17,280 --> 00:17:18,900
parties are able to derive elements

435
00:17:18,900 --> 00:17:21,480
Alpha and beta whose quotient is f to

436
00:17:21,480 --> 00:17:23,280
the Y density

437
00:17:23,280 --> 00:17:26,039
so again using the distributed log

438
00:17:26,039 --> 00:17:27,959
techniques we can convert everything

439
00:17:27,959 --> 00:17:30,000
into secret sharing of the product D

440
00:17:30,000 --> 00:17:33,059
times y this is exactly what we want and

441
00:17:33,059 --> 00:17:35,580
we never had to interact after the first

442
00:17:35,580 --> 00:17:37,380
round

443
00:17:37,380 --> 00:17:39,299
this is enough for correctness the

444
00:17:39,299 --> 00:17:42,360
question is security so one we want to

445
00:17:42,360 --> 00:17:45,000
preserve the privacy of the inputs dmy

446
00:17:45,000 --> 00:17:47,940
so one could argue that the methods of

447
00:17:47,940 --> 00:17:49,860
rgp0 leaks no information about D

448
00:17:49,860 --> 00:17:52,620
because everything is masked by this

449
00:17:52,620 --> 00:17:54,600
random power G to the r

450
00:17:54,600 --> 00:17:56,940
whereas the message of party P1 leaks

451
00:17:56,940 --> 00:17:59,400
some information about why because it's

452
00:17:59,400 --> 00:18:02,280
an agama like Cipher text to under dth

453
00:18:02,280 --> 00:18:04,740
there should be no problems

454
00:18:04,740 --> 00:18:07,200
this is true but only if H is a random

455
00:18:07,200 --> 00:18:09,480
power of T and here there are problems

456
00:18:09,480 --> 00:18:12,660
because class groups are not cyclic so

457
00:18:12,660 --> 00:18:15,059
if we pick a random element 8 this most

458
00:18:15,059 --> 00:18:18,120
likely isn't a power of C

459
00:18:18,120 --> 00:18:20,520
one could argue that this is no problem

460
00:18:20,520 --> 00:18:23,460
as long as the pair the original pair G8

461
00:18:23,460 --> 00:18:25,320
looks like a pairing with h is around

462
00:18:25,320 --> 00:18:28,080
the power of Z but this argument fails

463
00:18:28,080 --> 00:18:31,440
if it was a Stressless setup

464
00:18:31,440 --> 00:18:35,039
why is this the case well uh if we use a

465
00:18:35,039 --> 00:18:37,260
random Oracle to produce the CRS we also

466
00:18:37,260 --> 00:18:39,539
to provide the random coins that are

467
00:18:39,539 --> 00:18:42,600
used to provide to generate GNH this

468
00:18:42,600 --> 00:18:44,880
will be the output of the random Oracle

469
00:18:44,880 --> 00:18:46,799
and yeah in class groups there are no

470
00:18:46,799 --> 00:18:48,539
distribution D that are invertible in

471
00:18:48,539 --> 00:18:51,299
polynomial time so if we pick H to be a

472
00:18:51,299 --> 00:18:53,280
random power of G we are not able to

473
00:18:53,280 --> 00:18:55,500
simulate the random coins that generated

474
00:18:55,500 --> 00:18:56,780
it

475
00:18:56,780 --> 00:18:59,940
okay the solution to this problem is a

476
00:18:59,940 --> 00:19:02,880
new assumption uh we call it the xd8 and

477
00:19:02,880 --> 00:19:04,860
it stands for decision microscryptive

478
00:19:04,860 --> 00:19:05,820
Yemen

479
00:19:05,820 --> 00:19:08,100
basically it says that this ddh like

480
00:19:08,100 --> 00:19:12,240
Supple G8 g2dr H to the r plus the

481
00:19:12,240 --> 00:19:15,360
random coins used to generate dn8 looks

482
00:19:15,360 --> 00:19:17,820
like a Chapel of the same form in which

483
00:19:17,820 --> 00:19:20,160
we substitute Z to the r with a random

484
00:19:20,160 --> 00:19:22,220
power of H to the s

485
00:19:22,220 --> 00:19:24,660
this assumption is sufficient to prove

486
00:19:24,660 --> 00:19:26,580
the security of this Construction

487
00:19:26,580 --> 00:19:28,620
and yeah we believe that it can be

488
00:19:28,620 --> 00:19:30,600
useful for other applications on class

489
00:19:30,600 --> 00:19:32,700
groups for instance it can be used to

490
00:19:32,700 --> 00:19:34,380
prove the security of letters and

491
00:19:34,380 --> 00:19:36,299
commitments that don't need a trusted

492
00:19:36,299 --> 00:19:39,179
setups so there were other people that

493
00:19:39,179 --> 00:19:42,299
claimed already this but their proofs

494
00:19:42,299 --> 00:19:44,460
were wrong because they never considered

495
00:19:44,460 --> 00:19:46,980
the fact that D is not invertible the

496
00:19:46,980 --> 00:19:49,980
distribution used to generate DNA

497
00:19:49,980 --> 00:19:52,620
okay this is the end of my presentation

498
00:19:52,620 --> 00:19:54,660
here there is a slide with a recap of

499
00:19:54,660 --> 00:19:56,460
the results and yeah if there are

500
00:19:56,460 --> 00:19:59,840
questions I'm happy to answer

501
00:20:00,840 --> 00:20:03,840
foreign

502
00:20:07,460 --> 00:20:11,960
yes please use the microphone

503
00:20:13,500 --> 00:20:15,000
first of all thank you very much for the

504
00:20:15,000 --> 00:20:16,500
talk I really enjoyed it it was a

505
00:20:16,500 --> 00:20:18,780
beautiful I think I wanted to ask you

506
00:20:18,780 --> 00:20:21,240
base your construction on groups that

507
00:20:21,240 --> 00:20:23,460
you can Factor through components that

508
00:20:23,460 --> 00:20:25,980
in what in one of which discrete lock

509
00:20:25,980 --> 00:20:27,900
did really and in the other one yeah

510
00:20:27,900 --> 00:20:30,179
it's hard and I wanted to ask if you can

511
00:20:30,179 --> 00:20:31,860
actually do understand that you

512
00:20:31,860 --> 00:20:34,740
instantiate it with the class groups are

513
00:20:34,740 --> 00:20:36,659
there any other known techniques to do

514
00:20:36,659 --> 00:20:38,820
with this specific specifically a

515
00:20:38,820 --> 00:20:43,020
postmodern safe groups uh no I would say

516
00:20:43,020 --> 00:20:45,659
no I I don't really I'm not really an

517
00:20:45,659 --> 00:20:47,400
expert in post Quantum but I would say

518
00:20:47,400 --> 00:20:50,059
that no uh the issue is that usually

519
00:20:50,059 --> 00:20:53,159
this kind of techniques are based on DD

520
00:20:53,159 --> 00:20:57,120
log ddh the hardness of maybe that's not

521
00:20:57,120 --> 00:20:59,840
possible in

522
00:21:00,080 --> 00:21:03,559
thank you so yeah

523
00:21:04,440 --> 00:21:07,280
more questions

524
00:21:07,679 --> 00:21:10,140
uh yeah thanks for the talk I want to

525
00:21:10,140 --> 00:21:12,600
ask if you have you tried it all to

526
00:21:12,600 --> 00:21:16,260
break dxdh do you have uh intuition for

527
00:21:16,260 --> 00:21:20,340
why it should be true so uh basically we

528
00:21:20,340 --> 00:21:22,980
discussed this also with uh castanos and

529
00:21:22,980 --> 00:21:26,280
uh like William that are expert in class

530
00:21:26,280 --> 00:21:30,960
groups so all the natural tax fail and

531
00:21:30,960 --> 00:21:33,120
it seems that in order to break the

532
00:21:33,120 --> 00:21:34,620
Assumption we have to come up with some

533
00:21:34,620 --> 00:21:36,419
new attack that potentially can

534
00:21:36,419 --> 00:21:38,940
compromise the other assumption on class

535
00:21:38,940 --> 00:21:40,679
groups for instance the fact that it's

536
00:21:40,679 --> 00:21:42,299
hard to find the order of the class

537
00:21:42,299 --> 00:21:44,039
group it's um

538
00:21:44,039 --> 00:21:47,480
all right are you

539
00:21:49,500 --> 00:21:51,539
more questions

540
00:21:51,539 --> 00:21:53,820
okay I have a question so so can you

541
00:21:53,820 --> 00:21:55,799
tell us what kind of modulus can you

542
00:21:55,799 --> 00:21:58,140
handle what type of modulus can you

543
00:21:58,140 --> 00:22:01,320
handle like the n in the vectorally

544
00:22:01,320 --> 00:22:04,320
correlation yeah yeah that's an RSA

545
00:22:04,320 --> 00:22:06,240
module it's the one of the poly

546
00:22:06,240 --> 00:22:08,400
construction so for all of them when you

547
00:22:08,400 --> 00:22:10,140
use the class groups what would be the

548
00:22:10,140 --> 00:22:12,000
most for class groups okay uh it's

549
00:22:12,000 --> 00:22:13,980
different but class groups are used on

550
00:22:13,980 --> 00:22:17,159
the in the uh one round only there the

551
00:22:17,159 --> 00:22:20,039
modular can be any Prime

552
00:22:20,039 --> 00:22:23,120
I see yeah

553
00:22:24,419 --> 00:22:27,600
okay so if there's no more questions

554
00:22:27,600 --> 00:22:32,059
let's thank the speaker again and uh

555
00:22:36,539 --> 00:22:39,539
we're like the second speaker set up and

556
00:22:39,539 --> 00:22:41,520
we are actually ahead of time so we'll

557
00:22:41,520 --> 00:22:44,580
wait for two minutes so that people who

558
00:22:44,580 --> 00:22:48,678
want to see the next talk again coming

559
00:23:07,080 --> 00:23:10,320
let's start our second talk is a

560
00:23:10,320 --> 00:23:12,299
quadratic multi-party randomized

561
00:23:12,299 --> 00:23:15,480
encodings Beyond The Honest majority and

562
00:23:15,480 --> 00:23:18,120
their applications and our carne is

563
00:23:18,120 --> 00:23:21,059
going to be the speaker

564
00:23:21,059 --> 00:23:23,820
so uh first thank you guys for guys for

565
00:23:23,820 --> 00:23:26,580
sticking so late at the conference

566
00:23:26,580 --> 00:23:28,799
um my talk is about quadratic multiply

567
00:23:28,799 --> 00:23:30,720
the randomized buildings that go beyond

568
00:23:30,720 --> 00:23:32,520
the honest majority of privacy threshold

569
00:23:32,520 --> 00:23:35,100
and some of the application this is

570
00:23:35,100 --> 00:23:36,600
based on a joint work with Benny

571
00:23:36,600 --> 00:23:39,559
Applebaum the valley

572
00:23:39,900 --> 00:23:42,120
so in today's talk first I'll give some

573
00:23:42,120 --> 00:23:44,520
brief background and motivation for a

574
00:23:44,520 --> 00:23:48,179
problem that MPR is can help us solve

575
00:23:48,179 --> 00:23:50,460
then I'll introduce our main model the

576
00:23:50,460 --> 00:23:51,900
2mpre

577
00:23:51,900 --> 00:23:54,480
and show our results

578
00:23:54,480 --> 00:23:55,980
after this I will go over some

579
00:23:55,980 --> 00:23:58,620
applications two employees and one

580
00:23:58,620 --> 00:24:00,179
potential approach to improve our

581
00:24:00,179 --> 00:24:01,799
results

582
00:24:01,799 --> 00:24:04,260
then a brief overview of the proof of

583
00:24:04,260 --> 00:24:08,340
the main theorem and conclude that

584
00:24:08,340 --> 00:24:10,740
so NPC there's been lots of NPC in this

585
00:24:10,740 --> 00:24:12,360
conference I assume you're all familiar

586
00:24:12,360 --> 00:24:14,880
but let's have a brief overview

587
00:24:14,880 --> 00:24:15,539
um

588
00:24:15,539 --> 00:24:18,419
in NPC we have several parties each one

589
00:24:18,419 --> 00:24:20,159
with its own private input

590
00:24:20,159 --> 00:24:22,380
and their goal is to somehow compute the

591
00:24:22,380 --> 00:24:24,240
functionality of their input and the

592
00:24:24,240 --> 00:24:25,500
functionality is just like a function

593
00:24:25,500 --> 00:24:27,360
but the outputs are distributed between

594
00:24:27,360 --> 00:24:29,520
the parties so for example here we can

595
00:24:29,520 --> 00:24:32,580
say y1 goes to the yellow party Y2 goes

596
00:24:32,580 --> 00:24:34,980
to the orange party so and so forth

597
00:24:34,980 --> 00:24:36,240
and of course that we should do it

598
00:24:36,240 --> 00:24:37,559
privately without leaking information

599
00:24:37,559 --> 00:24:39,480
about the private input

600
00:24:39,480 --> 00:24:41,640
so it's usually done is with protocols

601
00:24:41,640 --> 00:24:43,260
what the parties communicate over a

602
00:24:43,260 --> 00:24:45,179
number of phones and then receive the

603
00:24:45,179 --> 00:24:46,860
output of the functionality

604
00:24:46,860 --> 00:24:49,080
and privacy here means that every

605
00:24:49,080 --> 00:24:51,240
Coalition of tea parties learns nothing

606
00:24:51,240 --> 00:24:53,640
beyond the output of the functionality

607
00:24:53,640 --> 00:24:55,080
so for example if you look at the

608
00:24:55,080 --> 00:24:56,659
Coalition of the red and green party

609
00:24:56,659 --> 00:24:59,640
want its view in the protocol to be

610
00:24:59,640 --> 00:25:02,760
simulated by its inputs and outputs of

611
00:25:02,760 --> 00:25:04,200
the functionality

612
00:25:04,200 --> 00:25:05,640
now there are many Notions of

613
00:25:05,640 --> 00:25:07,679
stimulation and adversaries so let us

614
00:25:07,679 --> 00:25:09,600
Define our narrow Focus

615
00:25:09,600 --> 00:25:12,480
our adversaries are passive or semi

616
00:25:12,480 --> 00:25:14,400
honest which means they cannot deviate

617
00:25:14,400 --> 00:25:15,539
from the protocol

618
00:25:15,539 --> 00:25:17,760
and they are computationally unbounded

619
00:25:17,760 --> 00:25:20,039
so we are in information theoretic

620
00:25:20,039 --> 00:25:22,500
script not computational crypto

621
00:25:22,500 --> 00:25:24,960
we also require perfect simulation even

622
00:25:24,960 --> 00:25:26,640
though it's not strictly necessary for

623
00:25:26,640 --> 00:25:29,220
most of our Construction

624
00:25:29,220 --> 00:25:31,320
all right so first let's begin with some

625
00:25:31,320 --> 00:25:34,080
motivation the client server model

626
00:25:34,080 --> 00:25:36,299
in the client server model the parties

627
00:25:36,299 --> 00:25:38,580
are divided into two groups lines and

628
00:25:38,580 --> 00:25:41,400
servers lines all the inputs and receive

629
00:25:41,400 --> 00:25:43,559
the outputs of the functionality all

630
00:25:43,559 --> 00:25:45,419
servers have no inputs and outputs they

631
00:25:45,419 --> 00:25:46,980
are just there to assist the clients in

632
00:25:46,980 --> 00:25:48,659
the computation

633
00:25:48,659 --> 00:25:50,760
and the interaction pattern is fairly

634
00:25:50,760 --> 00:25:52,980
trivial sort of looks like a distributed

635
00:25:52,980 --> 00:25:55,679
Effigy there are two rounds in the first

636
00:25:55,679 --> 00:25:58,620
round the client sends a message servers

637
00:25:58,620 --> 00:26:01,020
which then do some local operation on

638
00:26:01,020 --> 00:26:02,820
the on the inputs and return result to

639
00:26:02,820 --> 00:26:04,320
the clients in the second round

640
00:26:04,320 --> 00:26:06,000
based on this the clients can compute

641
00:26:06,000 --> 00:26:09,260
the functionalities out

642
00:26:09,299 --> 00:26:11,700
uh so we'll call it I'll say that the

643
00:26:11,700 --> 00:26:13,500
question of can we achieve protocols in

644
00:26:13,500 --> 00:26:15,720
this model that are private with an

645
00:26:15,720 --> 00:26:18,059
honest majority of the servers and some

646
00:26:18,059 --> 00:26:20,520
arbitrary set of the clients and what's

647
00:26:20,520 --> 00:26:22,260
this distinction between servers and

648
00:26:22,260 --> 00:26:24,419
clients well because servers are usually

649
00:26:24,419 --> 00:26:26,760
more stable and fixed entities and

650
00:26:26,760 --> 00:26:28,919
behind instead send large companies like

651
00:26:28,919 --> 00:26:32,039
Google or Amazon so they can be more

652
00:26:32,039 --> 00:26:33,779
carefully monitored and audited and

653
00:26:33,779 --> 00:26:36,600
making honesty assumptions them sort of

654
00:26:36,600 --> 00:26:37,980
make sense

655
00:26:37,980 --> 00:26:39,779
but clients clients come and go and an

656
00:26:39,779 --> 00:26:41,580
adversary could easily flood the system

657
00:26:41,580 --> 00:26:43,679
with hundreds of corrupt clients so we

658
00:26:43,679 --> 00:26:45,419
must protect ourselves against as many

659
00:26:45,419 --> 00:26:48,600
Co-op clients as possible

660
00:26:48,600 --> 00:26:51,960
what is known so Apple by metal showed

661
00:26:51,960 --> 00:26:53,820
that every functionality has a protocol

662
00:26:53,820 --> 00:26:56,039
in the client server model that is

663
00:26:56,039 --> 00:26:57,659
private with an honest majority of the

664
00:26:57,659 --> 00:26:59,220
clients and an honest majority of

665
00:26:59,220 --> 00:27:00,480
servers

666
00:27:00,480 --> 00:27:02,279
but there is still an open question of

667
00:27:02,279 --> 00:27:04,260
can we achieve a protocol that's private

668
00:27:04,260 --> 00:27:06,720
with a dishonest majority of clients and

669
00:27:06,720 --> 00:27:08,880
now it's majority of the servers

670
00:27:08,880 --> 00:27:11,100
and this question is open even in the

671
00:27:11,100 --> 00:27:13,080
simplest setting of three clients three

672
00:27:13,080 --> 00:27:14,580
servers

673
00:27:14,580 --> 00:27:17,100
there is only one known solution that

674
00:27:17,100 --> 00:27:18,899
both computation is secure not

675
00:27:18,899 --> 00:27:20,820
information theoretic and it makes a

676
00:27:20,820 --> 00:27:23,100
non-black box use for previous transfer

677
00:27:23,100 --> 00:27:26,719
transfer so it's highly impractical

678
00:27:26,820 --> 00:27:29,279
so this this is one of our motivating

679
00:27:29,279 --> 00:27:32,580
questioning in exploring to impure each

680
00:27:32,580 --> 00:27:35,039
the other two Emperor is

681
00:27:35,039 --> 00:27:37,200
this model of computation has been was

682
00:27:37,200 --> 00:27:39,659
introduced by Apple woman Al and here

683
00:27:39,659 --> 00:27:41,940
the parties we have the parties if each

684
00:27:41,940 --> 00:27:44,159
one has its own private input

685
00:27:44,159 --> 00:27:46,679
and at first each party does some local

686
00:27:46,679 --> 00:27:48,480
computation based on its input and its

687
00:27:48,480 --> 00:27:50,039
randomness

688
00:27:50,039 --> 00:27:52,620
then comes the only interactive step of

689
00:27:52,620 --> 00:27:55,200
the protocol where the path is jointly

690
00:27:55,200 --> 00:27:57,240
compute some degree to functionality by

691
00:27:57,240 --> 00:27:59,220
degree to amine algebra algebraic

692
00:27:59,220 --> 00:28:02,640
degree2 so like x squared or x times y

693
00:28:02,640 --> 00:28:04,140
and by joining the compute I mean they

694
00:28:04,140 --> 00:28:05,760
have black box access to the ideal

695
00:28:05,760 --> 00:28:07,919
functionality so intuitively you can

696
00:28:07,919 --> 00:28:10,020
think about it like a trusted party that

697
00:28:10,020 --> 00:28:12,179
all the parties stand their results to

698
00:28:12,179 --> 00:28:14,460
responsibility and then this trusted

699
00:28:14,460 --> 00:28:15,779
party distributes some degree to

700
00:28:15,779 --> 00:28:18,299
functionality between the party

701
00:28:18,299 --> 00:28:20,159
then follows the more local computation

702
00:28:20,159 --> 00:28:22,500
and the parties compute the output of

703
00:28:22,500 --> 00:28:23,880
the functionality

704
00:28:23,880 --> 00:28:25,679
so this can be viewed as sort of a

705
00:28:25,679 --> 00:28:27,360
non-interactive reduction from a general

706
00:28:27,360 --> 00:28:28,980
functionality to a degree 2

707
00:28:28,980 --> 00:28:30,720
functionality

708
00:28:30,720 --> 00:28:32,460
this reduction is highly beneficial

709
00:28:32,460 --> 00:28:34,500
because usually in NPC the algebraic

710
00:28:34,500 --> 00:28:36,059
degree of the functionality is a

711
00:28:36,059 --> 00:28:39,000
critical Factor when implementing it to

712
00:28:39,000 --> 00:28:41,580
impre is very good for models with low

713
00:28:41,580 --> 00:28:43,679
interaction

714
00:28:43,679 --> 00:28:46,919
for example Apple showed that given a t

715
00:28:46,919 --> 00:28:49,679
private to mpre we can compile it to a

716
00:28:49,679 --> 00:28:51,539
client server protocol that is private

717
00:28:51,539 --> 00:28:53,340
against an honest majority for servers

718
00:28:53,340 --> 00:28:56,159
and up to T corrupt clients

719
00:28:56,159 --> 00:28:59,159
so all we need is just two amperes with

720
00:28:59,159 --> 00:29:01,320
high privacy threshold but what do we

721
00:29:01,320 --> 00:29:02,220
have

722
00:29:02,220 --> 00:29:03,840
metal

723
00:29:03,840 --> 00:29:06,240
showed how to take a protocol in the

724
00:29:06,240 --> 00:29:09,480
plane model and compile it to a 2mpre so

725
00:29:09,480 --> 00:29:11,640
this immediately gives us a 2mpre for

726
00:29:11,640 --> 00:29:13,620
every functionality that is private with

727
00:29:13,620 --> 00:29:16,140
an honest majority of the parties

728
00:29:16,140 --> 00:29:18,000
and all the following constructions of

729
00:29:18,000 --> 00:29:19,620
Tom Peoria also restricted to this

730
00:29:19,620 --> 00:29:22,140
honest majority setting because they are

731
00:29:22,140 --> 00:29:24,299
either explicitly or implicitly based on

732
00:29:24,299 --> 00:29:26,580
lane model NPCs

733
00:29:26,580 --> 00:29:28,980
so this leads us to our main question of

734
00:29:28,980 --> 00:29:31,200
can we construct two mpres go beyond

735
00:29:31,200 --> 00:29:33,899
this honest majority privacy question

736
00:29:33,899 --> 00:29:35,880
and as it turns out the answer is

737
00:29:35,880 --> 00:29:38,279
positive we have constructed in our main

738
00:29:38,279 --> 00:29:40,620
theorem the first two mpre that goes

739
00:29:40,620 --> 00:29:42,000
beyond this bound with the Privacy

740
00:29:42,000 --> 00:29:44,940
thresholds of two-thirds run down

741
00:29:44,940 --> 00:29:47,940
and we've also also shown that this any

742
00:29:47,940 --> 00:29:49,559
tiny Improvement to this bound is

743
00:29:49,559 --> 00:29:52,500
critical meaning that if I had a 2mpre

744
00:29:52,500 --> 00:29:54,779
with a privacy threshold of two-thirds

745
00:29:54,779 --> 00:29:58,080
wound up I can put construct from it uh

746
00:29:58,080 --> 00:30:00,539
two ampere with full privacy so

747
00:30:00,539 --> 00:30:01,919
two-thirds of them down is sort of a

748
00:30:01,919 --> 00:30:03,600
logical stopping point between honest

749
00:30:03,600 --> 00:30:06,179
majority and full privacy

750
00:30:06,179 --> 00:30:08,640
as an immediate corollary we get a

751
00:30:08,640 --> 00:30:10,380
perfectly fully private student building

752
00:30:10,380 --> 00:30:11,880
in the three-party setting since

753
00:30:11,880 --> 00:30:13,500
two-thirds of free party gives us full

754
00:30:13,500 --> 00:30:15,120
privacy

755
00:30:15,120 --> 00:30:16,919
and we have also shown equivalence

756
00:30:16,919 --> 00:30:19,200
between two mpres and other models of

757
00:30:19,200 --> 00:30:20,940
computation which gives us new results

758
00:30:20,940 --> 00:30:24,059
in new models

759
00:30:24,059 --> 00:30:26,100
the one immediate application of the

760
00:30:26,100 --> 00:30:28,559
main theorem that we can get is

761
00:30:28,559 --> 00:30:29,460
um

762
00:30:29,460 --> 00:30:31,799
a fully private client server protocol

763
00:30:31,799 --> 00:30:33,840
since we have a fully private three

764
00:30:33,840 --> 00:30:36,419
party temporary as we as you saw we can

765
00:30:36,419 --> 00:30:38,460
compile it to a client server protocol

766
00:30:38,460 --> 00:30:40,679
with full privacy against three clients

767
00:30:40,679 --> 00:30:42,419
and free servers these stores are

768
00:30:42,419 --> 00:30:45,020
motivating questions

769
00:30:45,539 --> 00:30:47,520
let's go on on some other applications

770
00:30:47,520 --> 00:30:50,399
of uh of term peers for this we need to

771
00:30:50,399 --> 00:30:52,620
remind ourselves of the of the OT hybrid

772
00:30:52,620 --> 00:30:53,580
model

773
00:30:53,580 --> 00:30:55,919
in this model the parties have black box

774
00:30:55,919 --> 00:30:58,019
Black Box access to the oblivious

775
00:30:58,019 --> 00:30:59,519
transfer functionality

776
00:30:59,519 --> 00:31:01,019
let's just remind yourself what it is

777
00:31:01,019 --> 00:31:03,000
the OT functionality is a two-party

778
00:31:03,000 --> 00:31:05,880
functionality where Alice holds a pair

779
00:31:05,880 --> 00:31:08,220
of messages and Bob holds a single bit

780
00:31:08,220 --> 00:31:10,440
and Bob receives the selected message so

781
00:31:10,440 --> 00:31:12,360
Alice does not know which method Bob

782
00:31:12,360 --> 00:31:14,100
selected and Bob does not know what was

783
00:31:14,100 --> 00:31:16,500
the other message that he did not select

784
00:31:16,500 --> 00:31:19,140
and computations in these protocols look

785
00:31:19,140 --> 00:31:20,399
like this

786
00:31:20,399 --> 00:31:22,320
the parties have their own private

787
00:31:22,320 --> 00:31:24,059
interests they do some local computation

788
00:31:24,059 --> 00:31:26,580
and then a round of many many calls in

789
00:31:26,580 --> 00:31:28,019
parallel to the oblivious transfer

790
00:31:28,019 --> 00:31:29,279
functionality

791
00:31:29,279 --> 00:31:31,380
then local computation and other rounds

792
00:31:31,380 --> 00:31:33,899
OT calls and so on and so forth until we

793
00:31:33,899 --> 00:31:36,000
get the output of the functionality

794
00:31:36,000 --> 00:31:38,399
and it is known that this model is

795
00:31:38,399 --> 00:31:41,039
strong by the by this I mean that every

796
00:31:41,039 --> 00:31:42,840
functionality has the protocol in the

797
00:31:42,840 --> 00:31:45,720
audio hybrid model with full privacy so

798
00:31:45,720 --> 00:31:47,220
OT is actually complete for secure

799
00:31:47,220 --> 00:31:49,019
multi-party computer

800
00:31:49,019 --> 00:31:51,120
however in NPC we usually want to

801
00:31:51,120 --> 00:31:52,380
restrict the interaction between the

802
00:31:52,380 --> 00:31:54,720
parties so we ask ourselves what happens

803
00:31:54,720 --> 00:31:56,640
if you consider only a single round of

804
00:31:56,640 --> 00:31:58,980
quality of OT

805
00:31:58,980 --> 00:32:01,799
well in this case CR was shown that for

806
00:32:01,799 --> 00:32:04,019
two parties this enough this is enough

807
00:32:04,019 --> 00:32:06,120
you can Implement any two parties using

808
00:32:06,120 --> 00:32:07,919
an information theoretical but still get

809
00:32:07,919 --> 00:32:10,919
to the single round of close to OT

810
00:32:10,919 --> 00:32:12,779
so OT is actually non-interactively

811
00:32:12,779 --> 00:32:14,880
complete for 2pc

812
00:32:14,880 --> 00:32:16,740
unfortunately it has been shown by Apple

813
00:32:16,740 --> 00:32:18,960
by metal that for more the two than two

814
00:32:18,960 --> 00:32:20,700
parties this is not the case OT is

815
00:32:20,700 --> 00:32:22,559
actually not enough a single round of 40

816
00:32:22,559 --> 00:32:24,240
is not here

817
00:32:24,240 --> 00:32:26,279
so what can we hope for what is what is

818
00:32:26,279 --> 00:32:27,840
the next best protocol that we can hope

819
00:32:27,840 --> 00:32:30,120
for well there are two options we can

820
00:32:30,120 --> 00:32:32,460
either use some stronger or fancier

821
00:32:32,460 --> 00:32:34,500
primitive than OT for example a party

822
00:32:34,500 --> 00:32:36,539
functionality that has more parties than

823
00:32:36,539 --> 00:32:37,500
two

824
00:32:37,500 --> 00:32:39,960
or we can relax our non-interactivity

825
00:32:39,960 --> 00:32:42,539
requirements and add some more rounds of

826
00:32:42,539 --> 00:32:44,340
communication to the protocol

827
00:32:44,340 --> 00:32:46,500
let us explore these two options

828
00:32:46,500 --> 00:32:48,360
so on the top we see the first option

829
00:32:48,360 --> 00:32:50,940
and we ask ourselves what happens if you

830
00:32:50,940 --> 00:32:53,159
replace OT by some three-party

831
00:32:53,159 --> 00:32:55,140
functionality can we Implement any

832
00:32:55,140 --> 00:32:56,940
general functionality with a single

833
00:32:56,940 --> 00:32:58,559
round of pause to three-party

834
00:32:58,559 --> 00:32:59,820
functionality

835
00:32:59,820 --> 00:33:01,799
as a side note if you go one step

836
00:33:01,799 --> 00:33:03,419
further to four body functionalities

837
00:33:03,419 --> 00:33:05,640
this answer is positive they are indeed

838
00:33:05,640 --> 00:33:07,679
enough so but the three free party

839
00:33:07,679 --> 00:33:10,260
question is still open

840
00:33:10,260 --> 00:33:12,240
and on the bottom we explore the second

841
00:33:12,240 --> 00:33:16,019
option and we ask what happens if we

842
00:33:16,019 --> 00:33:17,580
um consider protocols with a single

843
00:33:17,580 --> 00:33:19,620
amount of calls to OT followed by a

844
00:33:19,620 --> 00:33:21,059
single round of plane model

845
00:33:21,059 --> 00:33:22,440
communication

846
00:33:22,440 --> 00:33:24,419
we can slightly rephrase this question

847
00:33:24,419 --> 00:33:26,640
and ask can we get a free round protocol

848
00:33:26,640 --> 00:33:29,539
given two round ideal OT

849
00:33:29,539 --> 00:33:32,700
I mean I don't care how the OT is

850
00:33:32,700 --> 00:33:34,140
implemented can be implemented with a

851
00:33:34,140 --> 00:33:36,120
trusted party with a protocol even by

852
00:33:36,120 --> 00:33:38,519
physical mean I just want the ideal OT

853
00:33:38,519 --> 00:33:39,840
functionality

854
00:33:39,840 --> 00:33:42,000
and two rounds because any realizations

855
00:33:42,000 --> 00:33:44,580
of OT take it takes at least two rounds

856
00:33:44,580 --> 00:33:46,080
to send to receive the data even

857
00:33:46,080 --> 00:33:48,419
physical realization

858
00:33:48,419 --> 00:33:50,820
but why is this distinction of ideology

859
00:33:50,820 --> 00:33:52,440
important and not a protocol or

860
00:33:52,440 --> 00:33:54,000
something like this well because for

861
00:33:54,000 --> 00:33:56,460
example pathways are already sort of

862
00:33:56,460 --> 00:33:58,440
answer this question they constructed

863
00:33:58,440 --> 00:33:59,880
the three-round protocol

864
00:33:59,880 --> 00:34:02,640
but it's both computationally secure not

865
00:34:02,640 --> 00:34:04,679
information theoretic and in relies on

866
00:34:04,679 --> 00:34:06,600
the existence of a two round OT protocol

867
00:34:06,600 --> 00:34:09,239
not an ideal level so if for example I

868
00:34:09,239 --> 00:34:11,040
had an OT with a toxicity this

869
00:34:11,040 --> 00:34:13,980
construction does not work

870
00:34:13,980 --> 00:34:16,320
all of these questions are open in the

871
00:34:16,320 --> 00:34:18,418
dishonest majority setting

872
00:34:18,418 --> 00:34:20,820
and we have shown equivalences from

873
00:34:20,820 --> 00:34:22,859
2mpre to all of these models and by

874
00:34:22,859 --> 00:34:24,540
equivalence I mean a privacy preserving

875
00:34:24,540 --> 00:34:27,060
reduction in both directions so for

876
00:34:27,060 --> 00:34:30,359
example given a key private to empiri I

877
00:34:30,359 --> 00:34:32,699
can get a t private protocol that has a

878
00:34:32,699 --> 00:34:34,679
stealing amount of calls to a degree to

879
00:34:34,679 --> 00:34:36,780
a free party functionality

880
00:34:36,780 --> 00:34:40,079
so together with the main model main

881
00:34:40,079 --> 00:34:41,159
theorem

882
00:34:41,159 --> 00:34:43,139
we get new results in all of these

883
00:34:43,139 --> 00:34:44,820
models for the new privacy threshold of

884
00:34:44,820 --> 00:34:46,980
two-thirds

885
00:34:46,980 --> 00:34:50,099
let us go on to view a new approach to

886
00:34:50,099 --> 00:34:51,960
construct better to appear it's beyond

887
00:34:51,960 --> 00:34:54,960
these two-thirds threshold

888
00:34:54,960 --> 00:34:57,060
for this we need to consider active

889
00:34:57,060 --> 00:34:58,079
security

890
00:34:58,079 --> 00:35:00,359
so we ask ourselves what happens if we

891
00:35:00,359 --> 00:35:03,540
let the adversary deviate from the pot

892
00:35:03,540 --> 00:35:06,300
Gillian and later improved by sheital

893
00:35:06,300 --> 00:35:08,460
showed that every functionality can be

894
00:35:08,460 --> 00:35:10,020
implemented by protocol in this model

895
00:35:10,020 --> 00:35:12,660
that has statistical active security

896
00:35:12,660 --> 00:35:15,480
with the full privacy threshold

897
00:35:15,480 --> 00:35:17,760
but these protocols have some negligible

898
00:35:17,760 --> 00:35:19,920
correctness and privacy errors

899
00:35:19,920 --> 00:35:22,619
and it was later shown that these arrows

900
00:35:22,619 --> 00:35:24,420
are inherent you can't hope for a

901
00:35:24,420 --> 00:35:25,619
protocol that has both perfect

902
00:35:25,619 --> 00:35:28,200
correctness and perfect privacy

903
00:35:28,200 --> 00:35:30,420
but we ask can we achieve just one of

904
00:35:30,420 --> 00:35:32,760
these things can we get a protocol that

905
00:35:32,760 --> 00:35:35,160
has perfect activity privacy while

906
00:35:35,160 --> 00:35:36,960
allowing some statistical passive

907
00:35:36,960 --> 00:35:38,820
correctness error

908
00:35:38,820 --> 00:35:41,099
and this question is also open in the

909
00:35:41,099 --> 00:35:44,520
honest in a dishonest majority setting

910
00:35:44,520 --> 00:35:46,200
we have shown a quite surprising

911
00:35:46,200 --> 00:35:48,300
connection between these two models and

912
00:35:48,300 --> 00:35:50,040
surprising because there are two very

913
00:35:50,040 --> 00:35:51,780
different creatures on the left we have

914
00:35:51,780 --> 00:35:54,900
a non-interactive passively secure model

915
00:35:54,900 --> 00:35:56,700
and on the right we have a very

916
00:35:56,700 --> 00:35:58,920
interactive activist secure model and

917
00:35:58,920 --> 00:36:02,040
somehow they are equivalent

918
00:36:02,040 --> 00:36:02,700
um

919
00:36:02,700 --> 00:36:04,440
and this gives us a potential new

920
00:36:04,440 --> 00:36:05,940
approach to construct to employees if

921
00:36:05,940 --> 00:36:07,380
you can construct

922
00:36:07,380 --> 00:36:10,500
uh protocols in this new weak active

923
00:36:10,500 --> 00:36:13,380
attacks and by week we we restrict the

924
00:36:13,380 --> 00:36:15,359
power of the active adversity

925
00:36:15,359 --> 00:36:17,700
but it's technical detail which you will

926
00:36:17,700 --> 00:36:20,359
pay the paper

927
00:36:20,520 --> 00:36:23,339
finally let us have an overview of the

928
00:36:23,339 --> 00:36:26,099
proof of the main theorem

929
00:36:26,099 --> 00:36:29,040
the proof is made of two steps in the

930
00:36:29,040 --> 00:36:32,040
first step we take a 2mpre

931
00:36:32,040 --> 00:36:34,440
and we show that allowing the parties to

932
00:36:34,440 --> 00:36:36,300
have some conversation in the play model

933
00:36:36,300 --> 00:36:38,280
before the degree to functionality does

934
00:36:38,280 --> 00:36:40,619
not add any strength to the model

935
00:36:40,619 --> 00:36:43,079
in other words we show how to take a

936
00:36:43,079 --> 00:36:45,359
protocol in this new plane and quadratic

937
00:36:45,359 --> 00:36:47,280
model so this I mean they have a plane

938
00:36:47,280 --> 00:36:48,900
model conversation and then a degree to

939
00:36:48,900 --> 00:36:50,040
functionality

940
00:36:50,040 --> 00:36:52,380
and we compile such a protocol into a

941
00:36:52,380 --> 00:36:54,480
2mpre so we remove the plane model

942
00:36:54,480 --> 00:36:56,640
conversation

943
00:36:56,640 --> 00:36:59,040
and the second step of course we design

944
00:36:59,040 --> 00:37:00,660
a protocol in this new plane and

945
00:37:00,660 --> 00:37:02,940
quadratic model with the desired privacy

946
00:37:02,940 --> 00:37:05,880
threshold of Truth turns

947
00:37:05,880 --> 00:37:06,900
um

948
00:37:06,900 --> 00:37:10,200
I would love show in in sort of more

949
00:37:10,200 --> 00:37:11,760
detail only the Second Step because it's

950
00:37:11,760 --> 00:37:15,240
no more fun one to be honest

951
00:37:15,240 --> 00:37:18,119
um so we'll design such a protocol now

952
00:37:18,119 --> 00:37:19,980
but the works official love it's an

953
00:37:19,980 --> 00:37:21,960
apple bound we know that he suffices to

954
00:37:21,960 --> 00:37:23,520
handle only degree three functionality

955
00:37:23,520 --> 00:37:26,280
you can use them to compute any any

956
00:37:26,280 --> 00:37:27,540
functionality

957
00:37:27,540 --> 00:37:28,859
so we consider the following

958
00:37:28,859 --> 00:37:31,500
functionality which receives three three

959
00:37:31,500 --> 00:37:33,420
inputs from some three parties and

960
00:37:33,420 --> 00:37:36,000
delivers the product to some other party

961
00:37:36,000 --> 00:37:37,560
and for the sake of this presentation

962
00:37:37,560 --> 00:37:39,599
let us consider only four parties so

963
00:37:39,599 --> 00:37:42,420
this is a four-party functionality

964
00:37:42,420 --> 00:37:44,280
so a protocol will look something like

965
00:37:44,280 --> 00:37:46,740
this we have four parties three of them

966
00:37:46,740 --> 00:37:48,359
hold the inputs

967
00:37:48,359 --> 00:37:50,640
and then we will have a single round of

968
00:37:50,640 --> 00:37:52,980
plane model communication some degree to

969
00:37:52,980 --> 00:37:54,839
functionality and in the end the green

970
00:37:54,839 --> 00:37:57,540
party will receive the products of those

971
00:37:57,540 --> 00:37:59,160
so this is our goal to design such a

972
00:37:59,160 --> 00:38:01,859
protocol to the desired travel situation

973
00:38:01,859 --> 00:38:04,560
and our desired privacy threshold is T

974
00:38:04,560 --> 00:38:06,720
equals two so we allow two out of four

975
00:38:06,720 --> 00:38:09,980
corrupt parties

976
00:38:10,980 --> 00:38:13,020
um okay so like many other Protocols of

977
00:38:13,020 --> 00:38:15,420
the same type we utilize our first round

978
00:38:15,420 --> 00:38:16,800
of play model communication to

979
00:38:16,800 --> 00:38:18,900
distribute shells of the input

980
00:38:18,900 --> 00:38:21,540
and our secret sharing scheme of of

981
00:38:21,540 --> 00:38:24,540
choice is CNF signature

982
00:38:24,540 --> 00:38:26,520
you can see any of the coach telling

983
00:38:26,520 --> 00:38:28,920
we generate a shell for every potential

984
00:38:28,920 --> 00:38:31,020
adversarial Coalition which means in

985
00:38:31,020 --> 00:38:33,000
this case since T equals to you generate

986
00:38:33,000 --> 00:38:35,640
a share for every pair of parties and

987
00:38:35,640 --> 00:38:37,619
send this share to all other parties

988
00:38:37,619 --> 00:38:39,300
outside this pair

989
00:38:39,300 --> 00:38:42,300
so for example if you look at the terms

990
00:38:42,300 --> 00:38:44,880
of X and what x and what the red party

991
00:38:44,880 --> 00:38:46,680
sends the yellow party we look at all

992
00:38:46,680 --> 00:38:48,540
the shares and remove the shares of

993
00:38:48,540 --> 00:38:50,640
pairs that contain the yellow path and

994
00:38:50,640 --> 00:38:52,200
give it to the yellow part

995
00:38:52,200 --> 00:38:53,520
to also do the same for all other

996
00:38:53,520 --> 00:38:55,859
parties and this guarantees is privacy

997
00:38:55,859 --> 00:38:58,200
because every pair of parties does not

998
00:38:58,200 --> 00:39:00,599
know the share that represents it so it

999
00:39:00,599 --> 00:39:03,960
cannot reconstruct the secret

1000
00:39:03,960 --> 00:39:06,420
we do this for all other inputs

1001
00:39:06,420 --> 00:39:09,480
and now the product of the inputs when

1002
00:39:09,480 --> 00:39:11,339
we expand the shell becomes a sum of

1003
00:39:11,339 --> 00:39:12,780
products of shares

1004
00:39:12,780 --> 00:39:16,800
and our new goal is to compute this

1005
00:39:16,800 --> 00:39:19,859
sum of degree monomials using a degree 2

1006
00:39:19,859 --> 00:39:21,180
functionality

1007
00:39:21,180 --> 00:39:23,579
seemingly impossible but can be done

1008
00:39:23,579 --> 00:39:25,740
using the following key observation

1009
00:39:25,740 --> 00:39:27,900
that every one of these degree three

1010
00:39:27,900 --> 00:39:30,420
monomials is covered by two parties and

1011
00:39:30,420 --> 00:39:32,160
by this I mean that at least one of the

1012
00:39:32,160 --> 00:39:34,619
parties hold at least holds at least two

1013
00:39:34,619 --> 00:39:36,720
of the shares each monomial

1014
00:39:36,720 --> 00:39:39,240
so for example in the middle monomial we

1015
00:39:39,240 --> 00:39:40,619
can see that the red party holds the

1016
00:39:40,619 --> 00:39:42,599
shares of X and Y while the brown party

1017
00:39:42,599 --> 00:39:44,940
holds the show of Step

1018
00:39:44,940 --> 00:39:46,920
and it is not difficult to see that this

1019
00:39:46,920 --> 00:39:48,720
is indeed the case for all other

1020
00:39:48,720 --> 00:39:49,980
monomials

1021
00:39:49,980 --> 00:39:52,079
since we know each variable each share

1022
00:39:52,079 --> 00:39:53,820
is held by two parties the two parties

1023
00:39:53,820 --> 00:39:55,320
outside the pill

1024
00:39:55,320 --> 00:39:57,720
and if we suppose that there is such an

1025
00:39:57,720 --> 00:40:00,300
uncovered degree monomial we have three

1026
00:40:00,300 --> 00:40:03,300
variables each one is held by supposedly

1027
00:40:03,300 --> 00:40:05,819
two unique parties without overlap so we

1028
00:40:05,819 --> 00:40:07,920
get in total six unique parties but this

1029
00:40:07,920 --> 00:40:09,420
is a four-party functionality there are

1030
00:40:09,420 --> 00:40:11,940
no parties so there is always some

1031
00:40:11,940 --> 00:40:14,700
overlap always some party holds two of

1032
00:40:14,700 --> 00:40:16,200
the shares please

1033
00:40:16,200 --> 00:40:18,420
and since it holds two of the shares you

1034
00:40:18,420 --> 00:40:20,700
can just multiply them locally just save

1035
00:40:20,700 --> 00:40:22,920
all multiplication and we only use the

1036
00:40:22,920 --> 00:40:24,900
degree 2 functionality to multiply those

1037
00:40:24,900 --> 00:40:26,640
intermediate values

1038
00:40:26,640 --> 00:40:29,280
and compute the degree the degree three

1039
00:40:29,280 --> 00:40:31,079
monomials with the degree two

1040
00:40:31,079 --> 00:40:32,220
functionality

1041
00:40:32,220 --> 00:40:33,780
of course we do the same for all other

1042
00:40:33,780 --> 00:40:36,660
monomials and in this way the liver the

1043
00:40:36,660 --> 00:40:39,240
product of the inputs to the Green Party

1044
00:40:39,240 --> 00:40:41,579
so a quick recap of the protocol we

1045
00:40:41,579 --> 00:40:42,900
utilize

1046
00:40:42,900 --> 00:40:45,420
we have a degree three function that we

1047
00:40:45,420 --> 00:40:47,099
used to compete with the degree to

1048
00:40:47,099 --> 00:40:50,220
functionality so we use a first round of

1049
00:40:50,220 --> 00:40:52,200
plane model Communication in order to

1050
00:40:52,200 --> 00:40:54,480
distribute shares of the inputs in such

1051
00:40:54,480 --> 00:40:56,160
a way that there is always an overlap in

1052
00:40:56,160 --> 00:40:58,200
the monomials and then we use this

1053
00:40:58,200 --> 00:41:00,000
overlap to compute the degree function

1054
00:41:00,000 --> 00:41:03,020
with a degree to functional

1055
00:41:04,380 --> 00:41:06,599
now let us get some perspective of our

1056
00:41:06,599 --> 00:41:08,599
information periodic playing field

1057
00:41:08,599 --> 00:41:11,099
on the left

1058
00:41:11,099 --> 00:41:13,200
we have protocols in the plane model

1059
00:41:13,200 --> 00:41:14,520
which are restricted to the honest

1060
00:41:14,520 --> 00:41:17,220
majority setting and on the right we

1061
00:41:17,220 --> 00:41:19,020
have protocols in the OT hybrid model

1062
00:41:19,020 --> 00:41:21,660
which have full privacy we've just shown

1063
00:41:21,660 --> 00:41:23,880
that 2 ampere lies somewhere in the

1064
00:41:23,880 --> 00:41:26,099
middle between those two models public

1065
00:41:26,099 --> 00:41:27,660
can actually massage this picture a bit

1066
00:41:27,660 --> 00:41:29,339
to gain a better of intuition a better

1067
00:41:29,339 --> 00:41:31,980
intuition of what's going on here we can

1068
00:41:31,980 --> 00:41:33,540
take protocols on the right and

1069
00:41:33,540 --> 00:41:35,520
transform them in this form using for

1070
00:41:35,520 --> 00:41:38,040
example Beaver triplets so uh on the

1071
00:41:38,040 --> 00:41:39,660
first round we use the degree to

1072
00:41:39,660 --> 00:41:41,160
functionality to generate lots of

1073
00:41:41,160 --> 00:41:43,079
correlated Randomness and then we just

1074
00:41:43,079 --> 00:41:44,760
run the original OT hybrid protocol

1075
00:41:44,760 --> 00:41:46,619
every time you want to do an OT we just

1076
00:41:46,619 --> 00:41:48,900
consume some quality run

1077
00:41:48,900 --> 00:41:51,780
and we showed that for two queries we

1078
00:41:51,780 --> 00:41:53,099
can allow a plane model conversation to

1079
00:41:53,099 --> 00:41:54,300
happen before the degree to

1080
00:41:54,300 --> 00:41:55,920
functionality

1081
00:41:55,920 --> 00:41:57,480
so we can see that all of these

1082
00:41:57,480 --> 00:41:59,220
Protocols are very very similar to each

1083
00:41:59,220 --> 00:42:00,900
other we just take a degree to

1084
00:42:00,900 --> 00:42:02,760
functionality somewhere along the way

1085
00:42:02,760 --> 00:42:04,500
and we don't know whether the location

1086
00:42:04,500 --> 00:42:06,240
of the degree functionality If It's

1087
00:42:06,240 --> 00:42:08,099
Beginning of the End determines the

1088
00:42:08,099 --> 00:42:10,940
strength of the protocol

1089
00:42:11,780 --> 00:42:14,940
finally let us conclude with the recap

1090
00:42:14,940 --> 00:42:17,640
everything that we've done here

1091
00:42:17,640 --> 00:42:19,260
we've shown

1092
00:42:19,260 --> 00:42:21,660
um a connection between 2mpre and the

1093
00:42:21,660 --> 00:42:23,400
client server protocols which gave us a

1094
00:42:23,400 --> 00:42:26,520
full resolution in the 3D client setting

1095
00:42:26,520 --> 00:42:28,740
we also showed some connections between

1096
00:42:28,740 --> 00:42:31,579
two MP3 on all of and all of those

1097
00:42:31,579 --> 00:42:33,900
Lighting on almost non-interactive

1098
00:42:33,900 --> 00:42:35,460
models

1099
00:42:35,460 --> 00:42:36,420
um

1100
00:42:36,420 --> 00:42:38,640
that gave us new results with the new

1101
00:42:38,640 --> 00:42:41,339
privacy threshold in all of these models

1102
00:42:41,339 --> 00:42:44,400
and we have also shown some potential

1103
00:42:44,400 --> 00:42:46,020
new approach to construct better to

1104
00:42:46,020 --> 00:42:49,920
empiries on weekly active photos

1105
00:42:49,920 --> 00:42:51,780
and we still have two open questions

1106
00:42:51,780 --> 00:42:54,839
remaining first of all of course can we

1107
00:42:54,839 --> 00:42:56,640
construct two ampere Wheels with full

1108
00:42:56,640 --> 00:42:59,220
privacy or is this threshold actually an

1109
00:42:59,220 --> 00:43:01,680
upper lower bound of film queries

1110
00:43:01,680 --> 00:43:03,900
and we still there's still one Arrow

1111
00:43:03,900 --> 00:43:05,220
missing from this picture we don't know

1112
00:43:05,220 --> 00:43:07,200
whether client server protocols imply to

1113
00:43:07,200 --> 00:43:09,119
in periods so this could potentially

1114
00:43:09,119 --> 00:43:10,160
give us

1115
00:43:10,160 --> 00:43:14,160
another approach to construct to improve

1116
00:43:14,160 --> 00:43:17,359
and that is all thank you

1117
00:43:23,700 --> 00:43:27,020
we have time for questions

1118
00:43:33,780 --> 00:43:35,700
oh yeah thanks for the talk I really

1119
00:43:35,700 --> 00:43:37,079
enjoyed it

1120
00:43:37,079 --> 00:43:39,300
um I wanted to ask so just like a small

1121
00:43:39,300 --> 00:43:41,880
clarifying question so when you say uh T

1122
00:43:41,880 --> 00:43:43,380
equals n

1123
00:43:43,380 --> 00:43:46,140
does uh does that mean that like there's

1124
00:43:46,140 --> 00:43:49,819
our Coalition of uh like n minus one

1125
00:43:49,819 --> 00:43:52,020
parties or maybe maybe I don't

1126
00:43:52,020 --> 00:43:55,020
understand that oh no so

1127
00:43:55,020 --> 00:43:58,079
it's it's for ease of use but yeah it's

1128
00:43:58,079 --> 00:44:00,240
all by all but one but you can say that

1129
00:44:00,240 --> 00:44:02,099
if all parties are corrupt and your

1130
00:44:02,099 --> 00:44:05,180
protocol is secure by definition

1131
00:44:05,760 --> 00:44:09,619
okay I see thank you

1132
00:44:12,119 --> 00:44:15,079
more questions

1133
00:44:17,280 --> 00:44:19,920
okay so like just a quick question that

1134
00:44:19,920 --> 00:44:22,020
in the client server model that you have

1135
00:44:22,020 --> 00:44:24,000
number of corruption for the server and

1136
00:44:24,000 --> 00:44:25,319
then you have number of corruption for

1137
00:44:25,319 --> 00:44:28,140
the client and uh when you're talking

1138
00:44:28,140 --> 00:44:32,180
about the mpre like how does the core uh

1139
00:44:32,180 --> 00:44:35,339
threshold for corruption for mpret so

1140
00:44:35,339 --> 00:44:37,500
directly translates to the client yeah

1141
00:44:37,500 --> 00:44:39,540
number of Corruptions

1142
00:44:39,540 --> 00:44:42,300
I see and what would happen if you're in

1143
00:44:42,300 --> 00:44:44,400
the slightly weaker model where the

1144
00:44:44,400 --> 00:44:46,680
client is over are just the same

1145
00:44:46,680 --> 00:44:50,400
for the class but those yeah uh what

1146
00:44:50,400 --> 00:44:52,140
would happen like uh if you're in the

1147
00:44:52,140 --> 00:44:53,819
slightly simpler model where we just

1148
00:44:53,819 --> 00:44:56,099
have the same like client server are the

1149
00:44:56,099 --> 00:44:59,280
same just unparty MPC oh no that was

1150
00:44:59,280 --> 00:45:00,720
servers

1151
00:45:00,720 --> 00:45:02,300
then then

1152
00:45:02,300 --> 00:45:05,339
basically in some sense

1153
00:45:05,339 --> 00:45:07,740
uh things doesn't apply here because you

1154
00:45:07,740 --> 00:45:09,780
restricted the server corruption to be

1155
00:45:09,780 --> 00:45:13,260
uh honest majority yeah I mean you have

1156
00:45:13,260 --> 00:45:14,819
to have the service in order to allow

1157
00:45:14,819 --> 00:45:18,300
the play model communication to give you

1158
00:45:18,300 --> 00:45:20,339
better than other facility

1159
00:45:20,339 --> 00:45:22,140
if you don't have any servers and you

1160
00:45:22,140 --> 00:45:23,339
are basically in a playing model and

1161
00:45:23,339 --> 00:45:26,220
then you have only honest majority

1162
00:45:26,220 --> 00:45:28,759
okay

1163
00:45:29,099 --> 00:45:32,099
okay if no more

1164
00:45:32,099 --> 00:45:33,960
good then um

1165
00:45:33,960 --> 00:45:36,480
we're going to ask the

1166
00:45:36,480 --> 00:45:40,020
last speaker to get ready and is a tight

1167
00:45:40,020 --> 00:45:42,660
bounce on the randomness complexity of

1168
00:45:42,660 --> 00:45:45,740
secure multi-party computation and even

1169
00:45:45,740 --> 00:45:49,020
is the speaker and we were playing the

1170
00:45:49,020 --> 00:45:51,420
video that he has pre-prepared and

1171
00:45:51,420 --> 00:45:53,280
afterwards you would ask the authors

1172
00:45:53,280 --> 00:45:56,280
questions you found the people are here

1173
00:45:56,280 --> 00:45:58,079
okay

1174
00:45:58,079 --> 00:46:01,040
use that

1175
00:46:01,920 --> 00:46:05,160
hello everyone my name is Francis today

1176
00:46:05,160 --> 00:46:07,380
I'm happy to introduce our work Tech

1177
00:46:07,380 --> 00:46:09,660
Bank on the randomness complexity of the

1178
00:46:09,660 --> 00:46:11,700
Cure multi-party computation

1179
00:46:11,700 --> 00:46:13,740
this is the chance work with vivocary

1180
00:46:13,740 --> 00:46:16,380
and yuvo ishine

1181
00:46:16,380 --> 00:46:18,900
in this work we are interested in the

1182
00:46:18,900 --> 00:46:21,540
randomness complexity we motivate this

1183
00:46:21,540 --> 00:46:23,760
direction from two aspects

1184
00:46:23,760 --> 00:46:26,460
from a practical perspective generating

1185
00:46:26,460 --> 00:46:28,319
high quality Randomness from physical

1186
00:46:28,319 --> 00:46:31,500
sources is difficult therefore in

1187
00:46:31,500 --> 00:46:33,420
general we would like to reduce the

1188
00:46:33,420 --> 00:46:35,160
randomness required in either an

1189
00:46:35,160 --> 00:46:37,500
accident or a protocol as much as

1190
00:46:37,500 --> 00:46:39,300
possible

1191
00:46:39,300 --> 00:46:41,940
from the theoretical perspective the

1192
00:46:41,940 --> 00:46:44,460
study of randomized complexity has led

1193
00:46:44,460 --> 00:46:46,319
to important development in computer

1194
00:46:46,319 --> 00:46:48,599
science such as pseudo Randomness

1195
00:46:48,599 --> 00:46:52,040
Randomness extraction and so on

1196
00:46:52,040 --> 00:46:54,720
in this work we consider the randomness

1197
00:46:54,720 --> 00:46:56,460
complexity of the Cure multi-party

1198
00:46:56,460 --> 00:46:58,020
computation

1199
00:46:58,020 --> 00:47:00,060
multi-party computation is a protocol

1200
00:47:00,060 --> 00:47:02,700
that allows several parties to jointly

1201
00:47:02,700 --> 00:47:04,619
compute a common function on their

1202
00:47:04,619 --> 00:47:06,720
private inputs

1203
00:47:06,720 --> 00:47:09,060
we start with the simplest setting of

1204
00:47:09,060 --> 00:47:12,720
MP3 that is perfect and semi-on security

1205
00:47:12,720 --> 00:47:15,359
against Peak profit parties and

1206
00:47:15,359 --> 00:47:17,400
Computing the actual function

1207
00:47:17,400 --> 00:47:19,980
later I will mention extensions to other

1208
00:47:19,980 --> 00:47:23,460
functions and NPC models

1209
00:47:23,460 --> 00:47:25,980
the randomized complexity of an MBC

1210
00:47:25,980 --> 00:47:28,319
protocol is measured by the number of

1211
00:47:28,319 --> 00:47:31,200
random coins posed by all parties during

1212
00:47:31,200 --> 00:47:33,000
the product execution

1213
00:47:33,000 --> 00:47:34,920
we allow parties to toast different

1214
00:47:34,920 --> 00:47:36,599
number of random coins in different

1215
00:47:36,599 --> 00:47:39,300
executions which may depend on their own

1216
00:47:39,300 --> 00:47:41,640
input and messages received from other

1217
00:47:41,640 --> 00:47:42,839
parties

1218
00:47:42,839 --> 00:47:45,780
therefore the randomly complexity refers

1219
00:47:45,780 --> 00:47:47,760
to the maximum number of random coins

1220
00:47:47,760 --> 00:47:50,520
toast in an execution for all possible

1221
00:47:50,520 --> 00:47:52,619
inputs

1222
00:47:52,619 --> 00:47:55,020
we would like to remark that allowing

1223
00:47:55,020 --> 00:47:57,240
different number of along a different

1224
00:47:57,240 --> 00:47:59,339
number of coin forces in each execution

1225
00:47:59,339 --> 00:48:01,140
makes our lower boundary results

1226
00:48:01,140 --> 00:48:02,280
stronger

1227
00:48:02,280 --> 00:48:05,040
yeah our positive results all coins can

1228
00:48:05,040 --> 00:48:08,839
be told before the protocol begins

1229
00:48:09,240 --> 00:48:11,940
the problem of run misconductory of NPC

1230
00:48:11,940 --> 00:48:14,400
has been studied by a fairly large body

1231
00:48:14,400 --> 00:48:16,920
of Works which covers the directions of

1232
00:48:16,920 --> 00:48:18,960
both lower bound and upper bound

1233
00:48:18,960 --> 00:48:21,660
almost all of his work consider the same

1234
00:48:21,660 --> 00:48:24,599
simple model as we do

1235
00:48:24,599 --> 00:48:26,900
our research question is to understand

1236
00:48:26,900 --> 00:48:29,220
how the government complexity for

1237
00:48:29,220 --> 00:48:31,559
computing actor grows with the number of

1238
00:48:31,559 --> 00:48:33,780
private parties

1239
00:48:33,780 --> 00:48:36,300
before introducing our results I would

1240
00:48:36,300 --> 00:48:37,920
like to review what we know from

1241
00:48:37,920 --> 00:48:39,540
previous works

1242
00:48:39,540 --> 00:48:42,000
the textbook protocol for computing XL

1243
00:48:42,000 --> 00:48:46,800
from Burn 86 and ck93 requires out of n

1244
00:48:46,800 --> 00:48:51,300
times T random Beats then in km7 crucial

1245
00:48:51,300 --> 00:48:53,700
Levis and Mysore constructed a protocol

1246
00:48:53,700 --> 00:48:55,920
with randomized complexity out of

1247
00:48:55,920 --> 00:48:58,319
t-square Times log n over t

1248
00:48:58,319 --> 00:49:00,540
in particular it is the best known

1249
00:49:00,540 --> 00:49:03,119
result for the upper bound

1250
00:49:03,119 --> 00:49:05,520
on the other hand they also give a lower

1251
00:49:05,520 --> 00:49:08,040
bound of Omega T random Beats

1252
00:49:08,040 --> 00:49:11,280
in bdp v99 the authors obtained a lower

1253
00:49:11,280 --> 00:49:14,280
bound of Omega t-square over NSP random

1254
00:49:14,280 --> 00:49:15,480
Beats

1255
00:49:15,480 --> 00:49:18,839
then in gro5 the author showed a lower

1256
00:49:18,839 --> 00:49:21,540
bound of Omega log and random beats for

1257
00:49:21,540 --> 00:49:23,880
T that is larger than 1.

1258
00:49:23,880 --> 00:49:25,859
so what is implied from the previous

1259
00:49:25,859 --> 00:49:28,319
results

1260
00:49:28,319 --> 00:49:31,619
first of all when T is a constant the

1261
00:49:31,619 --> 00:49:34,740
upper bound from km97 matches the lower

1262
00:49:34,740 --> 00:49:37,400
bound from gro5

1263
00:49:37,400 --> 00:49:40,140
on the other hand when T is very close

1264
00:49:40,140 --> 00:49:42,720
to N State T is equal to n minus the

1265
00:49:42,720 --> 00:49:46,260
constant then the upper bound from km7

1266
00:49:46,260 --> 00:49:50,760
matches the lower bound from bdpv99

1267
00:49:50,760 --> 00:49:54,240
however for General T even if T is equal

1268
00:49:54,240 --> 00:49:57,540
to n half there is still a quadratic gap

1269
00:49:57,540 --> 00:49:59,460
between the known upper bound and lower

1270
00:49:59,460 --> 00:50:00,960
bound

1271
00:50:00,960 --> 00:50:04,200
in this work we prove that Computing XR

1272
00:50:04,200 --> 00:50:06,780
requires at least Omega T Square random

1273
00:50:06,780 --> 00:50:07,859
bits

1274
00:50:07,859 --> 00:50:09,900
our lower bound matches the upper bound

1275
00:50:09,900 --> 00:50:13,740
from km7 up to a logarithmic factor in

1276
00:50:13,740 --> 00:50:16,440
particular it is tight when T is out of

1277
00:50:16,440 --> 00:50:17,339
n

1278
00:50:17,339 --> 00:50:19,619
we extend our result and show the same

1279
00:50:19,619 --> 00:50:21,420
lower bound applies for arbitrary

1280
00:50:21,420 --> 00:50:23,880
symmetric booting functions such as the

1281
00:50:23,880 --> 00:50:27,440
end function and the majority function

1282
00:50:27,440 --> 00:50:31,020
our second result constructs an explicit

1283
00:50:31,020 --> 00:50:33,780
protocol for xor with out of t squared

1284
00:50:33,780 --> 00:50:36,059
times log square and random Beats

1285
00:50:36,059 --> 00:50:38,099
we would like to remark that the

1286
00:50:38,099 --> 00:50:41,099
construction in km97 relies on an

1287
00:50:41,099 --> 00:50:43,980
explicit combinatorial object

1288
00:50:43,980 --> 00:50:46,440
our upper bound matches our lower bound

1289
00:50:46,440 --> 00:50:49,619
up to a poly logarithmic Factor and we

1290
00:50:49,619 --> 00:50:52,020
also extend our result to arbitrate the

1291
00:50:52,020 --> 00:50:54,599
metric Boolean functions with out of t

1292
00:50:54,599 --> 00:50:58,579
squared times log Cube and random Beats

1293
00:50:58,579 --> 00:51:01,319
interestingly the executing T actual

1294
00:51:01,319 --> 00:51:03,839
functions in parallel we show how to

1295
00:51:03,839 --> 00:51:06,599
modify our protocol such that the total

1296
00:51:06,599 --> 00:51:09,059
number of random bits is still held up

1297
00:51:09,059 --> 00:51:10,559
out of t-square

1298
00:51:10,559 --> 00:51:13,740
here the count of big or notation all

1299
00:51:13,740 --> 00:51:16,380
means the poly logarithmic factors it

1300
00:51:16,380 --> 00:51:18,540
means that the amortized cost per

1301
00:51:18,540 --> 00:51:21,000
execution is reduced to the health of

1302
00:51:21,000 --> 00:51:24,140
out of T random Beats

1303
00:51:24,140 --> 00:51:26,940
finally our third result gives an

1304
00:51:26,940 --> 00:51:29,520
explicit protocol for January 30th with

1305
00:51:29,520 --> 00:51:31,980
health parties which uses out of

1306
00:51:31,980 --> 00:51:34,980
t-square Times log C random bits here

1307
00:51:34,980 --> 00:51:37,500
speaks the circuit size and the notion

1308
00:51:37,500 --> 00:51:40,140
of helper parties means that they do not

1309
00:51:40,140 --> 00:51:42,119
have inputs but participate in the

1310
00:51:42,119 --> 00:51:43,619
computation

1311
00:51:43,619 --> 00:51:46,619
human views have parties as servers that

1312
00:51:46,619 --> 00:51:49,500
conduct competition again this upper

1313
00:51:49,500 --> 00:51:51,480
bound matches our lower bounds how to

1314
00:51:51,480 --> 00:51:54,980
apply logarithmic Factor

1315
00:51:55,079 --> 00:51:57,780
here is an outline of my talk I will

1316
00:51:57,780 --> 00:51:59,579
first introduce our techniques for

1317
00:51:59,579 --> 00:52:01,380
proving the lower bound of computing

1318
00:52:01,380 --> 00:52:03,119
actual function

1319
00:52:03,119 --> 00:52:06,180
our idea is to establish a connection to

1320
00:52:06,180 --> 00:52:07,980
T property encoding which really

1321
00:52:07,980 --> 00:52:10,559
elaborates in the following

1322
00:52:10,559 --> 00:52:12,960
because that we focus on the perfect

1323
00:52:12,960 --> 00:52:15,599
security with key profit parties

1324
00:52:15,599 --> 00:52:18,240
each party holds any speed and the

1325
00:52:18,240 --> 00:52:20,640
functionality is to compute the XR of

1326
00:52:20,640 --> 00:52:23,460
all input bits

1327
00:52:23,460 --> 00:52:25,140
we first know about the number of

1328
00:52:25,140 --> 00:52:28,260
possible views of our parties then by

1329
00:52:28,260 --> 00:52:31,980
The Landmark shown in kr98 and 3r05

1330
00:52:31,980 --> 00:52:33,900
the randomized complexity is lower

1331
00:52:33,900 --> 00:52:35,760
bounded by the log of the number of

1332
00:52:35,760 --> 00:52:37,680
particle views

1333
00:52:37,680 --> 00:52:40,740
to this end we first established a

1334
00:52:40,740 --> 00:52:42,720
connection between views and team

1335
00:52:42,720 --> 00:52:44,880
private encodings

1336
00:52:44,880 --> 00:52:47,220
confidently we prove the volume two

1337
00:52:47,220 --> 00:52:48,359
claims

1338
00:52:48,359 --> 00:52:50,400
the messages exchanged with some party

1339
00:52:50,400 --> 00:52:53,059
TI together with the function output

1340
00:52:53,059 --> 00:52:56,400
encode PS input XI

1341
00:52:56,400 --> 00:52:58,680
and the append encoding scheme is T

1342
00:52:58,680 --> 00:52:59,760
private

1343
00:52:59,760 --> 00:53:03,359
here T privacy means that any TPS of a

1344
00:53:03,359 --> 00:53:05,160
codeword should review no information

1345
00:53:05,160 --> 00:53:08,220
about the secrets

1346
00:53:08,220 --> 00:53:11,579
then we prove that any type of encoding

1347
00:53:11,579 --> 00:53:14,280
scheme has codeword space at least Omega

1348
00:53:14,280 --> 00:53:15,960
2 to the power of t

1349
00:53:15,960 --> 00:53:18,359
it implies that the number of possible

1350
00:53:18,359 --> 00:53:21,119
views of Pi is at least Omega 2 to the

1351
00:53:21,119 --> 00:53:22,440
power of t

1352
00:53:22,440 --> 00:53:25,380
so far the result we obtain only yields

1353
00:53:25,380 --> 00:53:28,800
a lower bound of Omega T random B

1354
00:53:28,800 --> 00:53:32,040
to obtain the desired result we count

1355
00:53:32,040 --> 00:53:34,740
strong views of the first two parties

1356
00:53:34,740 --> 00:53:37,260
as before later this allows us to

1357
00:53:37,260 --> 00:53:39,780
improve the lower bonds from Omega T to

1358
00:53:39,780 --> 00:53:42,500
Omega T Square

1359
00:53:42,960 --> 00:53:44,520
I will first show you the connection

1360
00:53:44,520 --> 00:53:46,740
between parties views and encoding

1361
00:53:46,740 --> 00:53:47,880
schemes

1362
00:53:47,880 --> 00:53:50,339
we focused on the first party P1 for

1363
00:53:50,339 --> 00:53:52,880
example we claim that the messages

1364
00:53:52,880 --> 00:53:55,619
exchanged with P1 together with the

1365
00:53:55,619 --> 00:53:57,720
function output should determine the

1366
00:53:57,720 --> 00:54:00,000
input X1

1367
00:54:00,000 --> 00:54:03,180
suppose the statement is false then zero

1368
00:54:03,180 --> 00:54:04,980
should exist to a different executions

1369
00:54:04,980 --> 00:54:07,380
such that they have the same messages

1370
00:54:07,380 --> 00:54:09,780
exchanged with P1 and the same

1371
00:54:09,780 --> 00:54:12,420
functional output but different t1's

1372
00:54:12,420 --> 00:54:13,800
inputs

1373
00:54:13,800 --> 00:54:16,440
our idea is to construct a new execution

1374
00:54:16,440 --> 00:54:18,480
to break the correctness of the

1375
00:54:18,480 --> 00:54:21,200
underlying protocol

1376
00:54:21,200 --> 00:54:24,300
consider a new execution with input held

1377
00:54:24,300 --> 00:54:26,520
X and random type tell r

1378
00:54:26,520 --> 00:54:29,220
told X and Tails are are identical to X

1379
00:54:29,220 --> 00:54:32,099
and R except that the input and the

1380
00:54:32,099 --> 00:54:34,260
random tape of the first party are

1381
00:54:34,260 --> 00:54:38,460
replaced by X1 Trend and R1 trend

1382
00:54:38,460 --> 00:54:41,400
now we have three executions recall that

1383
00:54:41,400 --> 00:54:44,040
by assumption the first execution and

1384
00:54:44,040 --> 00:54:46,020
the third execution have the same

1385
00:54:46,020 --> 00:54:48,660
messages exchanged with P1 and function

1386
00:54:48,660 --> 00:54:50,280
outputs

1387
00:54:50,280 --> 00:54:52,920
since we compute the actual function and

1388
00:54:52,920 --> 00:54:55,440
since Tails x and x only differ in the

1389
00:54:55,440 --> 00:54:58,380
first party's inputs the output of X

1390
00:54:58,380 --> 00:55:00,780
equivalent 2 is different from that of

1391
00:55:00,780 --> 00:55:03,720
execution 1.

1392
00:55:03,720 --> 00:55:06,359
I will go is to show that the method is

1393
00:55:06,359 --> 00:55:08,520
exchanged with P1 in all three

1394
00:55:08,520 --> 00:55:10,619
executions are identical

1395
00:55:10,619 --> 00:55:13,799
then for participated p n we can now

1396
00:55:13,799 --> 00:55:16,140
distinguish execution one and execution

1397
00:55:16,140 --> 00:55:18,720
2 which means that they would always

1398
00:55:18,720 --> 00:55:20,579
output the same results in both

1399
00:55:20,579 --> 00:55:22,020
executions

1400
00:55:22,020 --> 00:55:24,059
it would it would lead to a

1401
00:55:24,059 --> 00:55:26,880
contradiction with the fact that FX is

1402
00:55:26,880 --> 00:55:30,500
not equal to X tan of x

1403
00:55:30,500 --> 00:55:34,500
to this end consider the volume two fast

1404
00:55:34,500 --> 00:55:37,260
so it focus on the first execution

1405
00:55:37,260 --> 00:55:40,799
knows that P2 to PN use the same inputs

1406
00:55:40,799 --> 00:55:43,799
and random tape in these two executions

1407
00:55:43,799 --> 00:55:46,680
now it's p to PN always receives the

1408
00:55:46,680 --> 00:55:48,540
same messages from P1 in these two

1409
00:55:48,540 --> 00:55:51,420
executions then they cannot distinguish

1410
00:55:51,420 --> 00:55:53,400
these two executions and will always

1411
00:55:53,400 --> 00:55:57,119
send the same messages to P1 as well

1412
00:55:57,119 --> 00:55:59,700
similarly when we only focus on

1413
00:55:59,700 --> 00:56:02,520
execution 2 and execution 3

1414
00:56:02,520 --> 00:56:05,339
the party P1 uses the same input and

1415
00:56:05,339 --> 00:56:06,900
random test

1416
00:56:06,900 --> 00:56:09,420
now if P1 always receives the same

1417
00:56:09,420 --> 00:56:11,520
messages from other parties in these two

1418
00:56:11,520 --> 00:56:12,660
executions

1419
00:56:12,660 --> 00:56:14,940
then he will always send the same

1420
00:56:14,940 --> 00:56:18,420
messages to other parties as well

1421
00:56:18,420 --> 00:56:20,099
combining these two facts and by

1422
00:56:20,099 --> 00:56:22,680
induction we can prove that the messages

1423
00:56:22,680 --> 00:56:25,680
exchanged with P1 are identical in all

1424
00:56:25,680 --> 00:56:27,540
three executions

1425
00:56:27,540 --> 00:56:30,900
as we have just argued P2 to PN would

1426
00:56:30,900 --> 00:56:32,640
get the same output in all three

1427
00:56:32,640 --> 00:56:33,839
executions

1428
00:56:33,839 --> 00:56:36,420
however it contradicts with the fact

1429
00:56:36,420 --> 00:56:39,780
that FX is not equal to F tail of x

1430
00:56:39,780 --> 00:56:42,540
therefore such three executions do not

1431
00:56:42,540 --> 00:56:46,460
exist and the statement holds

1432
00:56:46,520 --> 00:56:49,079
now we can view the messages it came

1433
00:56:49,079 --> 00:56:51,059
with P1 together with the function

1434
00:56:51,059 --> 00:56:54,299
output as an encoding of p1's inputs

1435
00:56:54,299 --> 00:56:56,640
the next step is to show that we

1436
00:56:56,640 --> 00:56:59,220
obtained encoding scheme is T private

1437
00:56:59,220 --> 00:57:02,160
confidently we want to show that any two

1438
00:57:02,160 --> 00:57:04,440
bits of a codeword should be independent

1439
00:57:04,440 --> 00:57:06,299
of the secret

1440
00:57:06,299 --> 00:57:08,760
to this and we may list all the messages

1441
00:57:08,760 --> 00:57:11,640
that P1 sends and receives basic

1442
00:57:11,640 --> 00:57:14,280
responding receivers and senders

1443
00:57:14,280 --> 00:57:17,040
in this example the first message is

1444
00:57:17,040 --> 00:57:19,619
sent to P2 the second message is

1445
00:57:19,619 --> 00:57:22,619
received from P2 the third message is

1446
00:57:22,619 --> 00:57:26,720
received from P3 and so on

1447
00:57:26,819 --> 00:57:29,220
consider any tips in the message list of

1448
00:57:29,220 --> 00:57:32,940
P1 say M2 M4 and M7

1449
00:57:32,940 --> 00:57:35,280
the corresponding receivers or senders

1450
00:57:35,280 --> 00:57:38,839
are P2 P3 and PCs

1451
00:57:38,839 --> 00:57:41,520
since the underlying protocol is

1452
00:57:41,520 --> 00:57:43,319
perfectly secure against T crappy

1453
00:57:43,319 --> 00:57:44,160
parties

1454
00:57:44,160 --> 00:57:47,819
corrupting parties P2 P3 and P6 should

1455
00:57:47,819 --> 00:57:50,819
give no information about p1's input to

1456
00:57:50,819 --> 00:57:53,400
the other three

1457
00:57:53,400 --> 00:57:55,799
in other words any team messages are

1458
00:57:55,799 --> 00:57:59,040
independent of P1 inputs

1459
00:57:59,040 --> 00:58:01,859
therefore we conclude that the messages

1460
00:58:01,859 --> 00:58:04,380
exchange with pi together with the

1461
00:58:04,380 --> 00:58:07,400
functional output in code PS input XI

1462
00:58:07,400 --> 00:58:10,140
and the obtained encoding scheme is T

1463
00:58:10,140 --> 00:58:12,618
private

1464
00:58:12,799 --> 00:58:15,480
next we will analyze the code workspace

1465
00:58:15,480 --> 00:58:17,700
of a t property encoding scheme

1466
00:58:17,700 --> 00:58:20,220
concretely we will show that the

1467
00:58:20,220 --> 00:58:22,859
codeword space is at least Omega 2 to

1468
00:58:22,859 --> 00:58:25,859
the power of T this implies that the

1469
00:58:25,859 --> 00:58:27,660
number of particle views of each party

1470
00:58:27,660 --> 00:58:32,899
TI is at least Omega 2 to the power of t

1471
00:58:33,180 --> 00:58:35,160
this claim follows from a very simple

1472
00:58:35,160 --> 00:58:36,359
induction

1473
00:58:36,359 --> 00:58:39,000
we first list our codewords of zero in a

1474
00:58:39,000 --> 00:58:41,220
table it's called a corresponds to a

1475
00:58:41,220 --> 00:58:43,500
possible codeword and the asteroid

1476
00:58:43,500 --> 00:58:45,299
corresponds to the F bits of all

1477
00:58:45,299 --> 00:58:46,619
codewords

1478
00:58:46,619 --> 00:58:48,780
our goal is to count the number of

1479
00:58:48,780 --> 00:58:51,660
columns in this table

1480
00:58:51,660 --> 00:58:54,240
now we consider our codewords with their

1481
00:58:54,240 --> 00:58:57,059
first piece to be zero we may show that

1482
00:58:57,059 --> 00:58:59,760
given the first B to be zero the

1483
00:58:59,760 --> 00:59:02,579
encoding scheme is T Mass 1 private

1484
00:59:02,579 --> 00:59:05,160
intuitively since the original encoding

1485
00:59:05,160 --> 00:59:07,859
scheme is key private any T must one

1486
00:59:07,859 --> 00:59:09,900
piece together with the first bits

1487
00:59:09,900 --> 00:59:12,180
should reveal no information about the

1488
00:59:12,180 --> 00:59:15,180
secrets therefore when we fix the first

1489
00:59:15,180 --> 00:59:17,700
bit to be zero the encoded scheme

1490
00:59:17,700 --> 00:59:21,119
becomes tms1 private similarly the

1491
00:59:21,119 --> 00:59:23,040
including scheme given the first P to be

1492
00:59:23,040 --> 00:59:25,680
one is also T minus one private

1493
00:59:25,680 --> 00:59:28,079
by a simple induction we can show that

1494
00:59:28,079 --> 00:59:30,780
the code workspace is at least Omega to

1495
00:59:30,780 --> 00:59:33,319
the power of t

1496
00:59:33,319 --> 00:59:36,000
combining the first two steps we obtain

1497
00:59:36,000 --> 00:59:38,400
that each party has Omega to the power

1498
00:59:38,400 --> 00:59:40,200
of T possible views

1499
00:59:40,200 --> 00:59:43,799
according to KR 98 and tr05 it means

1500
00:59:43,799 --> 00:59:47,099
that we need at least three random Beats

1501
00:59:47,099 --> 00:59:49,619
so far we only considered a view of a

1502
00:59:49,619 --> 00:59:51,059
single party

1503
00:59:51,059 --> 00:59:53,700
to obtain the desired results in the

1504
00:59:53,700 --> 00:59:55,799
last step we try to lower bound to the

1505
00:59:55,799 --> 00:59:57,780
number of possible joint views of the

1506
00:59:57,780 --> 01:00:00,299
first tea parties

1507
01:00:00,299 --> 01:00:02,640
let us first fix the view of the first

1508
01:00:02,640 --> 01:00:04,559
party and consider the view of the

1509
01:00:04,559 --> 01:00:05,880
second party

1510
01:00:05,880 --> 01:00:08,339
ing from the same argument we can show

1511
01:00:08,339 --> 01:00:10,740
that the messages exchanged with P2

1512
01:00:10,740 --> 01:00:12,540
together with the functional output

1513
01:00:12,540 --> 01:00:15,780
encode the input of P2

1514
01:00:15,780 --> 01:00:18,359
now the obtaining coding scheme is T

1515
01:00:18,359 --> 01:00:20,040
minus one private

1516
01:00:20,040 --> 01:00:22,500
this is because we have fixed the view

1517
01:00:22,500 --> 01:00:25,319
of P1 since the protocol is perfectly

1518
01:00:25,319 --> 01:00:28,200
secure against t-propic parties crafting

1519
01:00:28,200 --> 01:00:30,540
any other team Muslim parties together

1520
01:00:30,540 --> 01:00:33,420
with P1 should give no information about

1521
01:00:33,420 --> 01:00:36,380
p2's input

1522
01:00:36,540 --> 01:00:38,640
our lower Bound for encoding scheme

1523
01:00:38,640 --> 01:00:40,920
shows that the code workspace of the

1524
01:00:40,920 --> 01:00:43,740
tmf-1 private encoding scheme is of size

1525
01:00:43,740 --> 01:00:44,880
at least

1526
01:00:44,880 --> 01:00:48,059
Omega 2 to the power of T Mass 1.

1527
01:00:48,059 --> 01:00:52,079
in summary given p1's view P2 has at

1528
01:00:52,079 --> 01:00:54,000
least 2 to the power of T Mass 1

1529
01:00:54,000 --> 01:00:56,460
possible views

1530
01:00:56,460 --> 01:00:59,040
now we apply the same analysis for the

1531
01:00:59,040 --> 01:01:01,440
first three parties the number of parts

1532
01:01:01,440 --> 01:01:03,359
for joint views of the first three

1533
01:01:03,359 --> 01:01:06,240
parties is equal to 2 to the power of

1534
01:01:06,240 --> 01:01:07,799
Omega t squared

1535
01:01:07,799 --> 01:01:11,460
the applied techniques in kr98 and gr05

1536
01:01:11,460 --> 01:01:13,980
will obtain a lower bound of Omega T

1537
01:01:13,980 --> 01:01:15,680
Square random bits

1538
01:01:15,680 --> 01:01:17,940
regarding the extension to any arbitrary

1539
01:01:17,940 --> 01:01:20,220
symmetric booting function please refer

1540
01:01:20,220 --> 01:01:23,660
to our paper from a discussion

1541
01:01:23,700 --> 01:01:25,980
in the next part I will briefly talk

1542
01:01:25,980 --> 01:01:28,619
about our explicit Construction

1543
01:01:28,619 --> 01:01:30,780
we start with a basic instruction for

1544
01:01:30,780 --> 01:01:32,819
computing xor with the help of

1545
01:01:32,819 --> 01:01:34,619
correlated randomness

1546
01:01:34,619 --> 01:01:37,920
concretely each party TI has input XI

1547
01:01:37,920 --> 01:01:40,859
and the correlated Randomness RI which

1548
01:01:40,859 --> 01:01:44,040
satisfies that the parity of all rri is

1549
01:01:44,040 --> 01:01:46,140
equal to zero

1550
01:01:46,140 --> 01:01:48,480
in the first round each party locally

1551
01:01:48,480 --> 01:01:51,780
computes GI which is equal to x i XR

1552
01:01:51,780 --> 01:01:53,220
with RI

1553
01:01:53,220 --> 01:01:55,500
since the summation of all RI is equal

1554
01:01:55,500 --> 01:01:56,640
to 0

1555
01:01:56,640 --> 01:01:58,500
the function output is equal to the

1556
01:01:58,500 --> 01:02:01,619
summation of rgi

1557
01:02:01,619 --> 01:02:04,200
then we let each party conduct one

1558
01:02:04,200 --> 01:02:06,420
additional operation and the last party

1559
01:02:06,420 --> 01:02:07,940
will compute the function output

1560
01:02:07,940 --> 01:02:10,020
distribute the result to our other

1561
01:02:10,020 --> 01:02:11,880
parties

1562
01:02:11,880 --> 01:02:14,700
note that if the correlated Randomness

1563
01:02:14,700 --> 01:02:17,819
is uniform with part 0 then the protocol

1564
01:02:17,819 --> 01:02:19,079
is secure

1565
01:02:19,079 --> 01:02:21,660
this is because after masking their

1566
01:02:21,660 --> 01:02:25,559
interspace by R g134 are uniformly

1567
01:02:25,559 --> 01:02:27,599
random subject to the parity to be the

1568
01:02:27,599 --> 01:02:29,460
function outputs

1569
01:02:29,460 --> 01:02:31,559
however generating such quality

1570
01:02:31,559 --> 01:02:34,020
Randomness would require out of n random

1571
01:02:34,020 --> 01:02:35,640
bits

1572
01:02:35,640 --> 01:02:37,799
to the randomize the correlation

1573
01:02:37,799 --> 01:02:42,720
Randomness km97 and gis-22 consider a

1574
01:02:42,720 --> 01:02:45,299
sufficient condition of R which requires

1575
01:02:45,299 --> 01:02:48,119
that any T probably parties should not

1576
01:02:48,119 --> 01:02:50,880
be able to distinguish R from uniform

1577
01:02:50,880 --> 01:02:54,059
distribution with parity zero

1578
01:02:54,059 --> 01:02:57,359
note that if we send our GI to a single

1579
01:02:57,359 --> 01:02:59,579
party then there is no room to be

1580
01:02:59,579 --> 01:03:01,680
randomized according randomness

1581
01:03:01,680 --> 01:03:04,319
in the basic instruction each party only

1582
01:03:04,319 --> 01:03:07,079
computes a single Edition operation to

1583
01:03:07,079 --> 01:03:08,940
draw the views of any T property parties

1584
01:03:08,940 --> 01:03:11,880
is off size out of T which makes the

1585
01:03:11,880 --> 01:03:15,020
differentization possible

1586
01:03:15,240 --> 01:03:18,599
so work kmf7 identifies a distribution

1587
01:03:18,599 --> 01:03:20,700
of the correlated Randomness which

1588
01:03:20,700 --> 01:03:23,220
satisfies the sufficient condition

1589
01:03:23,220 --> 01:03:25,859
the sampling space is linear and has

1590
01:03:25,859 --> 01:03:28,079
that out of 2 to the power of T Times

1591
01:03:28,079 --> 01:03:29,760
log n over t

1592
01:03:29,760 --> 01:03:32,760
therefore we need T Times log on our T

1593
01:03:32,760 --> 01:03:36,059
random B's to sample from this space

1594
01:03:36,059 --> 01:03:38,520
to instead if such quality is Randomness

1595
01:03:38,520 --> 01:03:40,920
each of the first two plus one parties

1596
01:03:40,920 --> 01:03:43,859
samples one copy from the space

1597
01:03:43,859 --> 01:03:46,500
since the sampling space is linear all

1598
01:03:46,500 --> 01:03:48,720
parts take the summation of all copies

1599
01:03:48,720 --> 01:03:51,240
as the final correct randomness

1600
01:03:51,240 --> 01:03:54,000
therefore the random complexity is out

1601
01:03:54,000 --> 01:03:58,220
of t-square Times log n over t

1602
01:03:58,400 --> 01:04:01,799
very informally our main contribution is

1603
01:04:01,799 --> 01:04:03,960
explicit construction for such a

1604
01:04:03,960 --> 01:04:06,599
sampling space at the cost of exploding

1605
01:04:06,599 --> 01:04:08,579
the size of the sampling Space by

1606
01:04:08,579 --> 01:04:11,579
another log effector therefore our

1607
01:04:11,579 --> 01:04:13,619
explicit construction has randomized

1608
01:04:13,619 --> 01:04:15,900
complexity out of t squared times log

1609
01:04:15,900 --> 01:04:17,819
square and random Beats

1610
01:04:17,819 --> 01:04:19,500
please refer to our paper for more

1611
01:04:19,500 --> 01:04:22,740
details about our Construction

1612
01:04:22,740 --> 01:04:24,960
I want to briefly discuss our

1613
01:04:24,960 --> 01:04:26,700
construction for arbitrates metric

1614
01:04:26,700 --> 01:04:28,079
reporting function

1615
01:04:28,079 --> 01:04:30,960
by definition the output of a symmetric

1616
01:04:30,960 --> 01:04:33,359
Boolean function only depends on the

1617
01:04:33,359 --> 01:04:35,760
number of ones in the input bits

1618
01:04:35,760 --> 01:04:39,000
therefore there exists a function t such

1619
01:04:39,000 --> 01:04:42,180
as f x is equal to G inputting the

1620
01:04:42,180 --> 01:04:43,740
weight of x

1621
01:04:43,740 --> 01:04:46,500
our first step is to extend our Excel

1622
01:04:46,500 --> 01:04:49,020
protocol to compute addition or Finance

1623
01:04:49,020 --> 01:04:50,819
fields

1624
01:04:50,819 --> 01:04:52,980
by using our premise field of that out

1625
01:04:52,980 --> 01:04:55,740
of n we can compute the weight of input

1626
01:04:55,740 --> 01:04:58,140
bit we show how to use our addition

1627
01:04:58,140 --> 01:05:00,780
protocol or work on the field to compute

1628
01:05:00,780 --> 01:05:02,700
a degree key from your sharing of the

1629
01:05:02,700 --> 01:05:05,359
weight of x

1630
01:05:05,579 --> 01:05:07,799
note that the function tree can be

1631
01:05:07,799 --> 01:05:10,020
expressed as the polynomial of degree

1632
01:05:10,020 --> 01:05:12,780
order of n over the prime field

1633
01:05:12,780 --> 01:05:15,720
we show that computency can be done by a

1634
01:05:15,720 --> 01:05:18,299
circuit of depth out of log n in

1635
01:05:18,299 --> 01:05:20,099
particular the circuit contains two

1636
01:05:20,099 --> 01:05:22,980
parts the first part contains out of log

1637
01:05:22,980 --> 01:05:25,079
and multiplication and the second part

1638
01:05:25,079 --> 01:05:27,900
is an addition of several out of log and

1639
01:05:27,900 --> 01:05:29,400
turn modifications

1640
01:05:29,400 --> 01:05:32,640
here's an example when on login is three

1641
01:05:32,640 --> 01:05:35,039
we want to confuse the summation of AI

1642
01:05:35,039 --> 01:05:38,420
times bi times d i

1643
01:05:39,000 --> 01:05:42,119
we apply the PGW protocol with crop and

1644
01:05:42,119 --> 01:05:44,400
threshold T is smaller than n over log n

1645
01:05:44,400 --> 01:05:46,680
to compute that circuit

1646
01:05:46,680 --> 01:05:49,500
with more details for the first part we

1647
01:05:49,500 --> 01:05:51,180
use the multiplication protocol to

1648
01:05:51,180 --> 01:05:52,619
compute the order of log and

1649
01:05:52,619 --> 01:05:54,839
multiplication Gates such that the

1650
01:05:54,839 --> 01:05:56,940
results are shared by degrees and their

1651
01:05:56,940 --> 01:05:58,140
sharings

1652
01:05:58,140 --> 01:06:00,539
for the second part given T is

1653
01:06:00,539 --> 01:06:03,240
overbounded by an overlock N we show

1654
01:06:03,240 --> 01:06:05,520
that all parties can locally compute the

1655
01:06:05,520 --> 01:06:07,619
second part relying on the properties of

1656
01:06:07,619 --> 01:06:09,720
the xiaomi's division scheme

1657
01:06:09,720 --> 01:06:11,460
the random complexity of our

1658
01:06:11,460 --> 01:06:13,619
construction is dominated by the

1659
01:06:13,619 --> 01:06:16,020
addition protocol or finite fields

1660
01:06:16,020 --> 01:06:17,760
please refer to our paper for more

1661
01:06:17,760 --> 01:06:20,299
details

1662
01:06:20,460 --> 01:06:22,920
in summary we achieve the volume two

1663
01:06:22,920 --> 01:06:24,839
main results in our paper

1664
01:06:24,839 --> 01:06:26,819
the first one is the lower bound of

1665
01:06:26,819 --> 01:06:29,160
Omega t-square random B's for computing

1666
01:06:29,160 --> 01:06:31,380
xor and arbitrary symmetric Boolean

1667
01:06:31,380 --> 01:06:32,400
functions

1668
01:06:32,400 --> 01:06:35,220
and the second one is an explicit upper

1669
01:06:35,220 --> 01:06:37,260
Bound for Tales of all of T Square

1670
01:06:37,260 --> 01:06:39,839
random B's for computing X or an

1671
01:06:39,839 --> 01:06:42,980
arbitrary symmetric booting functions

1672
01:06:42,980 --> 01:06:45,480
here is a quick review of our main

1673
01:06:45,480 --> 01:06:48,119
technique for the lower bound we first

1674
01:06:48,119 --> 01:06:50,099
connect each party's View to a t

1675
01:06:50,099 --> 01:06:52,740
property encoding scheme we also give a

1676
01:06:52,740 --> 01:06:54,960
lower bound of the codeword space of any

1677
01:06:54,960 --> 01:06:57,780
T property encoding scheme

1678
01:06:57,780 --> 01:07:00,480
these two together give a lower bound of

1679
01:07:00,480 --> 01:07:03,839
the number of views of a single party

1680
01:07:03,839 --> 01:07:06,599
to obtain a stronger result we consider

1681
01:07:06,599 --> 01:07:09,200
the number of possible joint views

1682
01:07:09,200 --> 01:07:12,059
finally by applying the techniques in KR

1683
01:07:12,059 --> 01:07:15,900
98 and gr05 we obtain a lower bound of

1684
01:07:15,900 --> 01:07:18,980
Omega t-square random bits

1685
01:07:18,980 --> 01:07:22,500
as for the outer bound very formally we

1686
01:07:22,500 --> 01:07:24,660
give an explicit construction for the

1687
01:07:24,660 --> 01:07:27,780
combinatorial object in km97 together

1688
01:07:27,780 --> 01:07:29,819
with the basic construction we are

1689
01:07:29,819 --> 01:07:32,160
currently Randomness we obtain explicit

1690
01:07:32,160 --> 01:07:34,920
actual protocol

1691
01:07:34,920 --> 01:07:36,780
to extend our result and arbitrary

1692
01:07:36,780 --> 01:07:38,940
symmetric booting function we first

1693
01:07:38,940 --> 01:07:41,160
extend our actual function before it

1694
01:07:41,160 --> 01:07:43,079
extend our actual protocol to addition

1695
01:07:43,079 --> 01:07:46,559
our fields together with the BTW

1696
01:07:46,559 --> 01:07:49,380
protocol we obtain explicit protocol for

1697
01:07:49,380 --> 01:07:52,020
symmetric booting functions please refer

1698
01:07:52,020 --> 01:07:55,079
to our paper for more details

1699
01:07:55,079 --> 01:07:57,539
before finishing my talk I would like to

1700
01:07:57,539 --> 01:07:59,520
discuss some open questions we leave for

1701
01:07:59,520 --> 01:08:00,960
Future Works

1702
01:08:00,960 --> 01:08:03,059
the first question is about the

1703
01:08:03,059 --> 01:08:05,099
trade-off between randomized glass key

1704
01:08:05,099 --> 01:08:07,380
and statistical error

1705
01:08:07,380 --> 01:08:09,780
in our work we only consider the setting

1706
01:08:09,780 --> 01:08:12,480
of profit Security in particular our

1707
01:08:12,480 --> 01:08:14,579
lower bound no longer holds without

1708
01:08:14,579 --> 01:08:16,100
perfect Security

1709
01:08:16,100 --> 01:08:19,080
on the other hand we give an example

1710
01:08:19,080 --> 01:08:21,839
protocol that achieve out of end times

1711
01:08:21,839 --> 01:08:24,299
Sigma random beats will stigma is the

1712
01:08:24,299 --> 01:08:25,738
security parameter

1713
01:08:25,738 --> 01:08:28,140
note that this is less than T Square

1714
01:08:28,140 --> 01:08:31,080
when T is close to N therefore an

1715
01:08:31,080 --> 01:08:33,299
interesting direction would be exploring

1716
01:08:33,299 --> 01:08:35,399
the test lower bound and upper Bound in

1717
01:08:35,399 --> 01:08:37,319
this setting

1718
01:08:37,319 --> 01:08:39,238
the second question is to consider the

1719
01:08:39,238 --> 01:08:40,920
randomness complexity for maliciously

1720
01:08:40,920 --> 01:08:42,479
secure NPC

1721
01:08:42,479 --> 01:08:44,759
and the last question is about the lower

1722
01:08:44,759 --> 01:08:47,040
bound of the entropy of the dynamic

1723
01:08:47,040 --> 01:08:48,299
complexity

1724
01:08:48,299 --> 01:08:50,520
in our work we measure the randomly

1725
01:08:50,520 --> 01:08:52,319
complexity by counting the number of

1726
01:08:52,319 --> 01:08:53,819
random coins

1727
01:08:53,819 --> 01:08:56,698
a more liberal model is that each party

1728
01:08:56,698 --> 01:08:58,920
May pick Randomness from an arbitrary

1729
01:08:58,920 --> 01:09:01,380
probability distribution and the goal is

1730
01:09:01,380 --> 01:09:02,939
to minimize the entropy of this

1731
01:09:02,939 --> 01:09:04,560
distribution

1732
01:09:04,560 --> 01:09:06,839
an interesting question is whether our

1733
01:09:06,839 --> 01:09:08,939
lower bound applies to the entropy of

1734
01:09:08,939 --> 01:09:11,040
randomness

1735
01:09:11,040 --> 01:09:13,640
thank you

1736
01:09:20,299 --> 01:09:24,140
do we have any questions

1737
01:09:24,839 --> 01:09:28,620
yes can you come to the microphone and

1738
01:09:28,620 --> 01:09:30,779
can one of those also come to the

1739
01:09:30,779 --> 01:09:33,920
microphone to answer

1740
01:09:34,380 --> 01:09:36,299
yeah please go ahead with the question

1741
01:09:36,299 --> 01:09:38,759
yeah so I am just

1742
01:09:38,759 --> 01:09:42,719
I'm just wondering that like London is

1743
01:09:42,719 --> 01:09:46,020
complexity is typically a solid Topic in

1744
01:09:46,020 --> 01:09:47,299
theoretical

1745
01:09:47,299 --> 01:09:50,698
it's a pseudor Randomness but in crypto

1746
01:09:50,698 --> 01:09:55,199
we typical care less careless about the

1747
01:09:55,199 --> 01:09:57,480
number of random bits we used in our

1748
01:09:57,480 --> 01:10:00,900
protocol right so do you have more

1749
01:10:00,900 --> 01:10:04,679
motivation for this study

1750
01:10:04,679 --> 01:10:06,840
so there's been actually an active line

1751
01:10:06,840 --> 01:10:08,580
of working with practical chess

1752
01:10:08,580 --> 01:10:09,739
community

1753
01:10:09,739 --> 01:10:13,140
in minimizing Randomness complexity

1754
01:10:13,140 --> 01:10:15,300
private circuits which is the version of

1755
01:10:15,300 --> 01:10:17,280
secure multi-party computation and the

1756
01:10:17,280 --> 01:10:19,440
motivation there is that

1757
01:10:19,440 --> 01:10:22,320
the pseudo Randomness that is typically

1758
01:10:22,320 --> 01:10:24,600
considered cheap in standard

1759
01:10:24,600 --> 01:10:26,760
cryptographic context is expensive when

1760
01:10:26,760 --> 01:10:30,300
you consider a hardware design so

1761
01:10:30,300 --> 01:10:32,699
there is some motivation when you look

1762
01:10:32,699 --> 01:10:34,679
at the low end of Randomness complexity

1763
01:10:34,679 --> 01:10:37,380
to minimize it for very practical

1764
01:10:37,380 --> 01:10:39,659
purposes but our work is mainly Spirit

1765
01:10:39,659 --> 01:10:41,219
reason

1766
01:10:41,219 --> 01:10:44,480
sounds good thank you

1767
01:10:46,980 --> 01:10:50,059
any other questions

1768
01:10:51,440 --> 01:10:54,179
okay so then let's thank all the

1769
01:10:54,179 --> 01:10:55,980
speakers in this section and thank the

1770
01:10:55,980 --> 01:11:00,480
authors for answering the question and

1771
01:11:02,580 --> 01:11:05,580
this is officially the end of this

1772
01:11:05,580 --> 01:11:08,480
amazing crypto

1773
01:11:10,260 --> 01:11:12,120
let me just comment that we're still

1774
01:11:12,120 --> 01:11:13,920
looking for good ways to run hybrid

1775
01:11:13,920 --> 01:11:16,020
conferences so if you have any

1776
01:11:16,020 --> 01:11:17,640
observations about things that did or

1777
01:11:17,640 --> 01:11:19,260
didn't work we'd like to hear them send

1778
01:11:19,260 --> 01:11:21,060
them to Virtual Dash conferences at

1779
01:11:21,060 --> 01:11:24,060
iecr.org

