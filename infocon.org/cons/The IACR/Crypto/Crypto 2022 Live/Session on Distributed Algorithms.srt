1
00:00:01,920 --> 00:00:03,840
welcome everyone to the distributed

2
00:00:03,840 --> 00:00:06,240
algorithms session a brief session right

3
00:00:06,240 --> 00:00:08,160
before lunch uh we do want to get

4
00:00:08,160 --> 00:00:11,120
started promptly so i want to um get get

5
00:00:11,120 --> 00:00:12,719
things going

6
00:00:12,719 --> 00:00:13,840
right away

7
00:00:13,840 --> 00:00:16,720
um our first talk is

8
00:00:16,720 --> 00:00:19,600
log star round game theoretically fair

9
00:00:19,600 --> 00:00:21,039
leader election

10
00:00:21,039 --> 00:00:22,480
uh by

11
00:00:22,480 --> 00:00:23,110
elan

12
00:00:23,110 --> 00:00:26,219
[Music]

13
00:00:26,720 --> 00:00:30,000
apologies uh shinichiro matsuo elaine

14
00:00:30,000 --> 00:00:32,800
she and keiru who will be given the talk

15
00:00:32,800 --> 00:00:34,399
so welcome kay thank you

16
00:00:34,399 --> 00:00:36,719
thanks for the introduction so um you

17
00:00:36,719 --> 00:00:38,960
probably saw on the schedule log

18
00:00:38,960 --> 00:00:41,200
question round game there radically

19
00:00:41,200 --> 00:00:43,040
fairly reelection and here's the answer

20
00:00:43,040 --> 00:00:45,120
is lobster around and this is a joint

21
00:00:45,120 --> 00:00:47,360
work with ilan komar godski shinshua

22
00:00:47,360 --> 00:00:50,239
matsuo and ellen she

23
00:00:50,239 --> 00:00:52,559
so um elon and i need to decide who will

24
00:00:52,559 --> 00:00:55,199
go president's paper um both of us want

25
00:00:55,199 --> 00:00:57,280
to go enjoy the beautiful beach in santa

26
00:00:57,280 --> 00:00:59,440
barbara so we decide to toss a random

27
00:00:59,440 --> 00:01:00,320
coin

28
00:01:00,320 --> 00:01:02,559
if the output is zero elon will present

29
00:01:02,559 --> 00:01:04,799
the paper and if the output is one i

30
00:01:04,799 --> 00:01:06,479
will present the paper

31
00:01:06,479 --> 00:01:08,320
you probably already know the result but

32
00:01:08,320 --> 00:01:11,200
let me tell you the whole story

33
00:01:11,200 --> 00:01:13,040
um since we were in different city we

34
00:01:13,040 --> 00:01:15,119
decided to do bloms coin toss on the

35
00:01:15,119 --> 00:01:17,040
blockchain if you're not familiar with

36
00:01:17,040 --> 00:01:18,960
blockchain you can just think of it as a

37
00:01:18,960 --> 00:01:20,720
public bulletin board

38
00:01:20,720 --> 00:01:23,759
so we first each toss a random coin and

39
00:01:23,759 --> 00:01:25,600
we post the commitments of these two

40
00:01:25,600 --> 00:01:28,479
random coins on a blockchain

41
00:01:28,479 --> 00:01:30,799
after that we each open our random the

42
00:01:30,799 --> 00:01:32,400
random bit

43
00:01:32,400 --> 00:01:34,079
let's say my random bit is zero and

44
00:01:34,079 --> 00:01:35,920
anyone's random bit is one

45
00:01:35,920 --> 00:01:37,840
so the output is just the xor of these

46
00:01:37,840 --> 00:01:40,400
two random bits which is one so i went

47
00:01:40,400 --> 00:01:43,280
and here i am

48
00:01:44,079 --> 00:01:46,399
however elon really wants to go enjoy

49
00:01:46,399 --> 00:01:48,240
the beautiful beach in santa barbara so

50
00:01:48,240 --> 00:01:50,079
here there he is

51
00:01:50,079 --> 00:01:50,960
um

52
00:01:50,960 --> 00:01:53,600
after i post open my bid xero he knows

53
00:01:53,600 --> 00:01:55,119
that he's going to lose the game if he

54
00:01:55,119 --> 00:01:56,880
open his commitments

55
00:01:56,880 --> 00:01:57,840
so

56
00:01:57,840 --> 00:01:59,439
what if he refused to open his

57
00:01:59,439 --> 00:02:01,119
commitment

58
00:02:01,119 --> 00:02:03,759
in that case i just automatically win

59
00:02:03,759 --> 00:02:06,240
and the output is still won

60
00:02:06,240 --> 00:02:08,318
so this is the famous bloms coin toss

61
00:02:08,318 --> 00:02:10,318
protocol and it guarantees that a

62
00:02:10,318 --> 00:02:13,280
strategic player like elon cannot gain

63
00:02:13,280 --> 00:02:15,920
benefit for himself and an honest player

64
00:02:15,920 --> 00:02:19,679
like me will not be harmed

65
00:02:20,080 --> 00:02:22,800
so formally in a coin toss protocol our

66
00:02:22,800 --> 00:02:26,000
goal is to toss a uniformly random coin

67
00:02:26,000 --> 00:02:28,319
and the traditional notion of fairness

68
00:02:28,319 --> 00:02:30,160
considered in crypto literature is

69
00:02:30,160 --> 00:02:32,480
called strong fairness which requires

70
00:02:32,480 --> 00:02:34,640
that a strategic player cannot bias the

71
00:02:34,640 --> 00:02:37,120
output towards either direction by more

72
00:02:37,120 --> 00:02:39,120
than a negligible amount

73
00:02:39,120 --> 00:02:40,959
so if we have honest majority assumption

74
00:02:40,959 --> 00:02:42,480
we can just use secure multi-party

75
00:02:42,480 --> 00:02:44,160
computation to achieve this strong

76
00:02:44,160 --> 00:02:45,360
fairness

77
00:02:45,360 --> 00:02:48,640
however cleveland showed in 1986 that

78
00:02:48,640 --> 00:02:51,440
this strong fairness is impossible to

79
00:02:51,440 --> 00:02:53,680
achieve against half corruption

80
00:02:53,680 --> 00:02:55,519
indeed even in the bloom coin toss

81
00:02:55,519 --> 00:02:57,599
protocol we just see

82
00:02:57,599 --> 00:02:59,840
elon can always bias the output towards

83
00:02:59,840 --> 00:03:03,760
one by refusing to open the equipment

84
00:03:03,760 --> 00:03:06,159
so the fairness achieved by blom's point

85
00:03:06,159 --> 00:03:08,959
hospital is more of a game theory favor

86
00:03:08,959 --> 00:03:11,120
it guarantees that first a strategic

87
00:03:11,120 --> 00:03:13,599
player cannot benefit itself

88
00:03:13,599 --> 00:03:16,000
and second an honest player cannot be

89
00:03:16,000 --> 00:03:18,000
harmed

90
00:03:18,000 --> 00:03:20,239
so now that we've seen this bloms coin

91
00:03:20,239 --> 00:03:22,080
toss poco guarantees game theoretic

92
00:03:22,080 --> 00:03:24,560
fairness for two party

93
00:03:24,560 --> 00:03:27,040
what about maori party

94
00:03:27,040 --> 00:03:29,200
when it comes to maori players the

95
00:03:29,200 --> 00:03:31,360
problem becomes a leader election

96
00:03:31,360 --> 00:03:33,519
now let's say um we are electing our

97
00:03:33,519 --> 00:03:36,319
next crypto pc chair from sheffield dan

98
00:03:36,319 --> 00:03:38,400
brand and yell

99
00:03:38,400 --> 00:03:40,560
so our goal is to elect a uniformly

100
00:03:40,560 --> 00:03:43,440
random leader and the utility is just

101
00:03:43,440 --> 00:03:46,319
that winger takes all the elected leader

102
00:03:46,319 --> 00:03:48,720
will gain utility one and everyone else

103
00:03:48,720 --> 00:03:50,879
and utility zero

104
00:03:50,879 --> 00:03:52,560
although there are a lot of work to do

105
00:03:52,560 --> 00:03:54,640
but everyone wants to serve our

106
00:03:54,640 --> 00:03:56,159
community so everyone wants to be

107
00:03:56,159 --> 00:03:57,680
elected

108
00:03:57,680 --> 00:03:59,680
dan and brent they're so eager to be

109
00:03:59,680 --> 00:04:02,000
elected that they form a coalition and

110
00:04:02,000 --> 00:04:04,159
they want to bias the output towards

111
00:04:04,159 --> 00:04:06,000
their favor to increase their joint

112
00:04:06,000 --> 00:04:07,280
utility

113
00:04:07,280 --> 00:04:09,200
where the joint utility of a coalition

114
00:04:09,200 --> 00:04:12,319
is one if the elected leader is inside

115
00:04:12,319 --> 00:04:15,120
the coalition

116
00:04:15,120 --> 00:04:16,639
so formally in a leader election

117
00:04:16,639 --> 00:04:18,720
protocol our goal is to elect a

118
00:04:18,720 --> 00:04:20,959
uniformly random leader if everyone

119
00:04:20,959 --> 00:04:22,560
behave honestly

120
00:04:22,560 --> 00:04:24,240
and the game theoretic fairness notion

121
00:04:24,240 --> 00:04:26,400
we considered for a leer election portal

122
00:04:26,400 --> 00:04:28,880
is slightly different here we want that

123
00:04:28,880 --> 00:04:29,759
first

124
00:04:29,759 --> 00:04:32,240
no collision can increase its expected

125
00:04:32,240 --> 00:04:33,360
utility

126
00:04:33,360 --> 00:04:36,240
and second no coalition can harm any

127
00:04:36,240 --> 00:04:39,840
innocent honest individual

128
00:04:39,919 --> 00:04:42,160
so if we have a game theoretically fair

129
00:04:42,160 --> 00:04:44,400
leader election then the honest behavior

130
00:04:44,400 --> 00:04:47,680
actually forms an equilibrium

131
00:04:47,680 --> 00:04:50,240
so one thing is why do we care about the

132
00:04:50,240 --> 00:04:52,720
skin theoretic fairness because strong

133
00:04:52,720 --> 00:04:55,680
fairness as we saw is impossible to

134
00:04:55,680 --> 00:04:58,080
achieve against majority-sized coalition

135
00:04:58,080 --> 00:04:59,680
yet we still want some meaningful

136
00:04:59,680 --> 00:05:02,000
fairness that is achievable against

137
00:05:02,000 --> 00:05:04,080
moderate-sized coalition

138
00:05:04,080 --> 00:05:06,000
in decentralized applications game

139
00:05:06,000 --> 00:05:07,919
theoretic fairness is actually the de

140
00:05:07,919 --> 00:05:10,639
facto approach and we actually have many

141
00:05:10,639 --> 00:05:13,759
game theoretic design in practice

142
00:05:13,759 --> 00:05:15,680
although sometimes without provable

143
00:05:15,680 --> 00:05:18,080
security but this is the notion that

144
00:05:18,080 --> 00:05:21,039
people want to have

145
00:05:21,680 --> 00:05:24,000
now you may ask why should i care about

146
00:05:24,000 --> 00:05:26,000
corrupted modularity why can't we just

147
00:05:26,000 --> 00:05:27,919
assume we have honest majority and we

148
00:05:27,919 --> 00:05:30,080
only need to draw to do secure

149
00:05:30,080 --> 00:05:31,759
multi-party computation

150
00:05:31,759 --> 00:05:33,680
this is because in decentralized

151
00:05:33,680 --> 00:05:36,080
applications many pseudonyms may be

152
00:05:36,080 --> 00:05:38,400
controlled by the same entity

153
00:05:38,400 --> 00:05:40,320
and these pseudonyms will coordinate

154
00:05:40,320 --> 00:05:42,400
with with each other and they may

155
00:05:42,400 --> 00:05:44,080
deviate from the protocol to gain

156
00:05:44,080 --> 00:05:45,360
benefit

157
00:05:45,360 --> 00:05:47,520
it is very likely that these pseudonyms

158
00:05:47,520 --> 00:05:50,160
form a corrupted majority and this is

159
00:05:50,160 --> 00:05:52,160
actually a real world attack where

160
00:05:52,160 --> 00:05:55,039
someone faked a lot of identities and

161
00:05:55,039 --> 00:05:57,680
fake a d5 ecosystem to reduce value from

162
00:05:57,680 --> 00:05:59,120
cryptocurrency

163
00:05:59,120 --> 00:06:01,919
so in this work our focus is to achieve

164
00:06:01,919 --> 00:06:03,680
game theoretic fairness against

165
00:06:03,680 --> 00:06:07,240
corrupted majority

166
00:06:07,440 --> 00:06:10,880
now let's back to our pc cherry election

167
00:06:10,880 --> 00:06:12,800
the folklore way to do this is called

168
00:06:12,800 --> 00:06:15,440
the tournamentary vocal where each pair

169
00:06:15,440 --> 00:06:17,520
of players deal with each other with

170
00:06:17,520 --> 00:06:19,199
blums coin toss

171
00:06:19,199 --> 00:06:22,240
and the winner do with each other again

172
00:06:22,240 --> 00:06:25,039
until we have a leader

173
00:06:25,039 --> 00:06:27,280
so the game theoretic fairness in

174
00:06:27,280 --> 00:06:29,199
tournamentary protocol is guaranteed by

175
00:06:29,199 --> 00:06:31,199
bloum's coin toss

176
00:06:31,199 --> 00:06:34,240
however it takes log n rounds

177
00:06:34,240 --> 00:06:36,639
for general employers so a natural

178
00:06:36,639 --> 00:06:38,479
question to ask is

179
00:06:38,479 --> 00:06:40,880
can we reduce the round complexity can

180
00:06:40,880 --> 00:06:42,960
we achieve barely your election with

181
00:06:42,960 --> 00:06:45,440
less than log in rounds

182
00:06:45,440 --> 00:06:48,319
here are both bad news and good news the

183
00:06:48,319 --> 00:06:51,440
bad news is that if we insist on perfect

184
00:06:51,440 --> 00:06:52,800
fairness

185
00:06:52,800 --> 00:06:54,720
and if we insist on ideal commitment

186
00:06:54,720 --> 00:06:56,479
model where commitment is the only

187
00:06:56,479 --> 00:06:59,120
crypto primitive we can use then lock

188
00:06:59,120 --> 00:07:02,000
and runs is necessary

189
00:07:02,000 --> 00:07:05,039
however if we are willing to relax our

190
00:07:05,039 --> 00:07:07,120
fairness notion to 1 minus absolute

191
00:07:07,120 --> 00:07:08,160
fairness

192
00:07:08,160 --> 00:07:11,039
which requires that first no 1 minus

193
00:07:11,039 --> 00:07:13,280
absolute fraction corruption can

194
00:07:13,280 --> 00:07:15,680
increase its expected utility by more

195
00:07:15,680 --> 00:07:17,520
than epsilon fraction

196
00:07:17,520 --> 00:07:20,160
and second no one minus epsilon fraction

197
00:07:20,160 --> 00:07:21,680
corruption can harm any honest

198
00:07:21,680 --> 00:07:24,000
individual by more than epsilon fraction

199
00:07:24,000 --> 00:07:26,160
and moreover if we are willing to use

200
00:07:26,160 --> 00:07:27,759
other crypto primitives like zero

201
00:07:27,759 --> 00:07:28,960
knowledge proof

202
00:07:28,960 --> 00:07:30,960
then we can do log log and rounds for

203
00:07:30,960 --> 00:07:34,239
epsilon to be small 01.

204
00:07:34,479 --> 00:07:36,720
so here's a clear trade-off between the

205
00:07:36,720 --> 00:07:39,520
round complexity the fairness parameter

206
00:07:39,520 --> 00:07:41,120
and the size of a collision we can't

207
00:07:41,120 --> 00:07:42,639
tolerate

208
00:07:42,639 --> 00:07:44,400
for logging rounds we can achieve

209
00:07:44,400 --> 00:07:46,960
perfect fairness against arbitrary size

210
00:07:46,960 --> 00:07:50,560
collision by tormentary protocol

211
00:07:50,560 --> 00:07:52,960
for log log n rounds we can achieve one

212
00:07:52,960 --> 00:07:55,280
minus small o1 fairness against one

213
00:07:55,280 --> 00:07:57,680
minus small one fraction corruption

214
00:07:57,680 --> 00:08:00,960
and this is given in ccws 21

215
00:08:00,960 --> 00:08:03,440
but what about smaller round complexity

216
00:08:03,440 --> 00:08:06,000
can we achieve meaningful fairness with

217
00:08:06,000 --> 00:08:09,440
less than log log in rounds

218
00:08:10,560 --> 00:08:12,319
in this work we give an affirmative

219
00:08:12,319 --> 00:08:14,879
answer so in this work we give a log

220
00:08:14,879 --> 00:08:17,280
star round leader election that achieves

221
00:08:17,280 --> 00:08:19,840
1 minus small 01 game theoretic fairness

222
00:08:19,840 --> 00:08:23,120
against 99 craption so basically our

223
00:08:23,120 --> 00:08:25,840
leader election is round efficient and

224
00:08:25,840 --> 00:08:28,560
it achieves good fairness

225
00:08:28,560 --> 00:08:30,720
and it can tolerate a very large

226
00:08:30,720 --> 00:08:34,799
constant size fraction of corruption

227
00:08:34,799 --> 00:08:36,320
in the paper we also give a fully

228
00:08:36,320 --> 00:08:39,039
parametrized result about the trade-off

229
00:08:39,039 --> 00:08:41,599
between round complexity fairness and

230
00:08:41,599 --> 00:08:42,799
the size of a coalition we can't

231
00:08:42,799 --> 00:08:44,800
tolerate but in this talk we're just

232
00:08:44,800 --> 00:08:46,480
going to focus on the lockstar run

233
00:08:46,480 --> 00:08:48,880
result

234
00:08:48,959 --> 00:08:51,279
okay now let's see how we get our fair

235
00:08:51,279 --> 00:08:53,600
later election protocol

236
00:08:53,600 --> 00:08:55,360
the technique used in previous work in

237
00:08:55,360 --> 00:08:58,720
ccws21 does not directly generalize too

238
00:08:58,720 --> 00:09:01,279
small around complexity so we viewed our

239
00:09:01,279 --> 00:09:04,160
earlier election call from scratch

240
00:09:04,160 --> 00:09:05,279
and

241
00:09:05,279 --> 00:09:07,360
we start from a stroman solution which

242
00:09:07,360 --> 00:09:09,440
is a variant of vegas life is being

243
00:09:09,440 --> 00:09:10,640
protocol

244
00:09:10,640 --> 00:09:12,800
we'll see how it fails to achieve the

245
00:09:12,800 --> 00:09:15,760
fairness and we can fix it

246
00:09:15,760 --> 00:09:18,080
with a comedian open lifetime

247
00:09:18,080 --> 00:09:20,160
this is pretty much our final protocol

248
00:09:20,160 --> 00:09:22,480
except that it still has a little issue

249
00:09:22,480 --> 00:09:23,680
to fix

250
00:09:23,680 --> 00:09:26,000
and after fixing that we got our final

251
00:09:26,000 --> 00:09:27,040
purple

252
00:09:27,040 --> 00:09:28,720
so in the rest of the talk we'll walk

253
00:09:28,720 --> 00:09:31,120
along this path and see how we get our

254
00:09:31,120 --> 00:09:33,200
final literal election protocol step by

255
00:09:33,200 --> 00:09:37,839
step based on our strong solution

256
00:09:38,320 --> 00:09:40,240
first let's recall how vega's lifetime

257
00:09:40,240 --> 00:09:42,720
works he starts from n players a

258
00:09:42,720 --> 00:09:44,560
population of n

259
00:09:44,560 --> 00:09:46,640
and then he choose a preliminary

260
00:09:46,640 --> 00:09:48,839
committee of polylogin

261
00:09:48,839 --> 00:09:51,760
size then he chooses a smaller community

262
00:09:51,760 --> 00:09:53,519
of totally log log inside from the

263
00:09:53,519 --> 00:09:56,080
preliminary committee and he does this

264
00:09:56,080 --> 00:09:58,480
all the way till there's only one player

265
00:09:58,480 --> 00:10:01,360
left which is our elected leader

266
00:10:01,360 --> 00:10:04,240
so in total this takes loss lockstar and

267
00:10:04,240 --> 00:10:06,079
rounds of committee election and each

268
00:10:06,079 --> 00:10:08,240
committee election takes constant rounds

269
00:10:08,240 --> 00:10:12,320
so the round complexity is lockstarted

270
00:10:12,320 --> 00:10:14,720
in our strongest solution we also run

271
00:10:14,720 --> 00:10:16,720
several rounds of committee election as

272
00:10:16,720 --> 00:10:18,959
in biggest lattice being protocol

273
00:10:18,959 --> 00:10:22,000
the only difference is that we stop

274
00:10:22,000 --> 00:10:23,839
when the committee size reaches roughly

275
00:10:23,839 --> 00:10:26,880
2 to the lock start end we stop here and

276
00:10:26,880 --> 00:10:29,200
switch top entry protocol to elect a

277
00:10:29,200 --> 00:10:31,279
leader directly from this 2 to the

278
00:10:31,279 --> 00:10:33,120
lockstar and committee

279
00:10:33,120 --> 00:10:34,800
i'll talk about the reason of stopping

280
00:10:34,800 --> 00:10:36,399
early and switching to tottenham's

281
00:10:36,399 --> 00:10:38,320
reproduction later

282
00:10:38,320 --> 00:10:40,480
so in this drama solution we run no more

283
00:10:40,480 --> 00:10:42,160
than rockstar and rounds of committee

284
00:10:42,160 --> 00:10:44,399
election and we run a rock star and

285
00:10:44,399 --> 00:10:46,800
round tournamentary and in total the

286
00:10:46,800 --> 00:10:50,880
wrong complexity is still lockstar

287
00:10:51,440 --> 00:10:53,040
so now the remaining thing is really

288
00:10:53,040 --> 00:10:54,800
just how we round this committee

289
00:10:54,800 --> 00:10:56,000
election

290
00:10:56,000 --> 00:10:57,839
as long as the committee election is

291
00:10:57,839 --> 00:11:00,480
fair in each step then our final leader

292
00:11:00,480 --> 00:11:03,120
election is fair and by fair committee

293
00:11:03,120 --> 00:11:06,000
election i mean that corrupted coalition

294
00:11:06,000 --> 00:11:08,320
cannot increase their fraction in the

295
00:11:08,320 --> 00:11:10,560
committee by too much and they cannot

296
00:11:10,560 --> 00:11:12,959
determine the probability of an honest

297
00:11:12,959 --> 00:11:15,279
player being elected into the committee

298
00:11:15,279 --> 00:11:17,279
by too much

299
00:11:17,279 --> 00:11:20,000
so from now on we'll just focus on this

300
00:11:20,000 --> 00:11:22,720
one step of committee election and as a

301
00:11:22,720 --> 00:11:25,200
reminder we are focusing on 99

302
00:11:25,200 --> 00:11:28,200
corruption

303
00:11:28,959 --> 00:11:31,440
now say we have m players and these

304
00:11:31,440 --> 00:11:33,920
orange players are just crafty players

305
00:11:33,920 --> 00:11:36,720
and these great players they're honest

306
00:11:36,720 --> 00:11:39,040
to elect a committee of size c

307
00:11:39,040 --> 00:11:41,120
we let every player to uniformly

308
00:11:41,120 --> 00:11:42,880
randomly choose a being from university

309
00:11:42,880 --> 00:11:45,200
banks and the players in the light has

310
00:11:45,200 --> 00:11:49,360
been will be elected as the committee

311
00:11:49,760 --> 00:11:52,079
so by turn off bound the number of

312
00:11:52,079 --> 00:11:53,680
honest players in each beam should

313
00:11:53,680 --> 00:11:56,079
concentrate around its average which is

314
00:11:56,079 --> 00:11:57,360
one percent

315
00:11:57,360 --> 00:12:00,240
that means with a large probability

316
00:12:00,240 --> 00:12:02,560
every b should contain at least roughly

317
00:12:02,560 --> 00:12:04,079
one percent c

318
00:12:04,079 --> 00:12:06,000
with times one minus epsilon a small

319
00:12:06,000 --> 00:12:09,839
slack number of honest players

320
00:12:09,839 --> 00:12:12,320
by pigeonhole principle the lightest

321
00:12:12,320 --> 00:12:14,720
being definitely contains no more than c

322
00:12:14,720 --> 00:12:16,160
players

323
00:12:16,160 --> 00:12:18,079
so together this means that no matter

324
00:12:18,079 --> 00:12:20,000
how the corrupted player distributes

325
00:12:20,000 --> 00:12:22,320
themselves the fraction of corrupted

326
00:12:22,320 --> 00:12:24,079
players aim the lightest they must be

327
00:12:24,079 --> 00:12:28,319
roughly very close to 99

328
00:12:29,440 --> 00:12:32,000
so in this drama solution it actually

329
00:12:32,000 --> 00:12:33,920
guarantees that a large coalition cannot

330
00:12:33,920 --> 00:12:35,839
benefit too much with a large

331
00:12:35,839 --> 00:12:37,200
probability

332
00:12:37,200 --> 00:12:40,480
and this large probability is actually

333
00:12:40,480 --> 00:12:43,040
the reason we have to stop early and

334
00:12:43,040 --> 00:12:45,200
switch to tournament triple

335
00:12:45,200 --> 00:12:46,880
because if we round the committee

336
00:12:46,880 --> 00:12:49,360
election as in biggest life has been all

337
00:12:49,360 --> 00:12:50,959
the way till the end

338
00:12:50,959 --> 00:12:52,720
then in the last few rounds we are

339
00:12:52,720 --> 00:12:54,800
electing a small very small sized

340
00:12:54,800 --> 00:12:57,279
committee from a very small size

341
00:12:57,279 --> 00:13:00,399
population and this probability becomes

342
00:13:00,399 --> 00:13:03,839
a constant probability with respect to n

343
00:13:03,839 --> 00:13:06,079
and that means in the last few rounds

344
00:13:06,079 --> 00:13:08,160
the large coalition can gain benefit

345
00:13:08,160 --> 00:13:11,279
with constant probability and that ruins

346
00:13:11,279 --> 00:13:13,279
our fairness requirement

347
00:13:13,279 --> 00:13:15,360
so we have to stop early while this

348
00:13:15,360 --> 00:13:17,920
probability is still reasonably large

349
00:13:17,920 --> 00:13:20,399
which is one minus small one and we

350
00:13:20,399 --> 00:13:22,560
switch to total entry protocol which

351
00:13:22,560 --> 00:13:26,079
preserves the fairness for us

352
00:13:27,360 --> 00:13:28,399
so now

353
00:13:28,399 --> 00:13:30,079
this drama solution guarantees that a

354
00:13:30,079 --> 00:13:31,760
large coalition cannot get benefit too

355
00:13:31,760 --> 00:13:32,639
much

356
00:13:32,639 --> 00:13:34,320
but how about most uh how about the

357
00:13:34,320 --> 00:13:35,760
small coalition

358
00:13:35,760 --> 00:13:38,320
surprisingly english drama super uh

359
00:13:38,320 --> 00:13:40,480
invest ramen solution small coalition

360
00:13:40,480 --> 00:13:43,920
can gain significant advantage

361
00:13:43,920 --> 00:13:46,480
to see how this works let's say um

362
00:13:46,480 --> 00:13:49,040
there's only one corrupted player

363
00:13:49,040 --> 00:13:51,360
so it will wait until honest players to

364
00:13:51,360 --> 00:13:53,040
make their main choice

365
00:13:53,040 --> 00:13:55,199
and then it will decide its own being

366
00:13:55,199 --> 00:13:58,000
based on honest player's main choice

367
00:13:58,000 --> 00:13:59,600
now let's say the honest players

368
00:13:59,600 --> 00:14:02,560
distribute themselves as in the slides

369
00:14:02,560 --> 00:14:05,040
then a rational smart crafter player

370
00:14:05,040 --> 00:14:08,160
will definitely choose the last thing

371
00:14:08,160 --> 00:14:10,079
and after it put itself into the last

372
00:14:10,079 --> 00:14:11,440
thing the last thing becomes the

373
00:14:11,440 --> 00:14:13,920
lightest thing and it is guaranteed to

374
00:14:13,920 --> 00:14:16,959
be elected into the committee

375
00:14:16,959 --> 00:14:19,120
in general this attack can be performed

376
00:14:19,120 --> 00:14:20,800
as long as the second largest thing is

377
00:14:20,800 --> 00:14:22,720
too heavier than the lightest thing

378
00:14:22,720 --> 00:14:24,240
which happens with a very large

379
00:14:24,240 --> 00:14:25,839
probability

380
00:14:25,839 --> 00:14:28,000
so to fix this problem we come to our

381
00:14:28,000 --> 00:14:30,160
second try which is commit and open

382
00:14:30,160 --> 00:14:32,399
light as being

383
00:14:32,399 --> 00:14:34,560
so this corrupted player can perform

384
00:14:34,560 --> 00:14:36,959
this attack we just described simply

385
00:14:36,959 --> 00:14:38,959
because it can choose its own thing

386
00:14:38,959 --> 00:14:41,120
based on honest player's pain choice so

387
00:14:41,120 --> 00:14:43,279
we just hide the main choice of honors

388
00:14:43,279 --> 00:14:46,399
players by commitments

389
00:14:46,399 --> 00:14:49,360
now we let every player to commit to its

390
00:14:49,360 --> 00:14:51,680
pain choice first and now this crafted

391
00:14:51,680 --> 00:14:54,240
player has to commit to a beam choice

392
00:14:54,240 --> 00:14:56,399
which should be independent from honest

393
00:14:56,399 --> 00:14:58,320
players being choices because the

394
00:14:58,320 --> 00:14:59,920
commitments hide the honest player's

395
00:14:59,920 --> 00:15:02,000
main choice

396
00:15:02,000 --> 00:15:05,120
now after the honest players open their

397
00:15:05,120 --> 00:15:06,399
banks

398
00:15:06,399 --> 00:15:08,399
this corrupted player can either choose

399
00:15:08,399 --> 00:15:10,720
not to open or open to an incorrect

400
00:15:10,720 --> 00:15:12,639
thing in which case it will be

401
00:15:12,639 --> 00:15:14,399
immediately kicked out

402
00:15:14,399 --> 00:15:16,399
and it gains no benefit

403
00:15:16,399 --> 00:15:18,880
or it has to open to the big it commits

404
00:15:18,880 --> 00:15:21,120
to which is independent from honest

405
00:15:21,120 --> 00:15:22,800
player's main choice

406
00:15:22,800 --> 00:15:25,040
so in commit and open this corrupted

407
00:15:25,040 --> 00:15:27,199
player can only hit the lightest spin

408
00:15:27,199 --> 00:15:29,680
with probability c over n which is

409
00:15:29,680 --> 00:15:32,800
exactly what we want

410
00:15:33,600 --> 00:15:35,600
so now with this commit and open like

411
00:15:35,600 --> 00:15:38,079
this being we get no collision can

412
00:15:38,079 --> 00:15:40,079
noticeably increase its expected

413
00:15:40,079 --> 00:15:42,240
fraction in the lightest thing as long

414
00:15:42,240 --> 00:15:45,759
as it's no more than 99 corruption

415
00:15:45,759 --> 00:15:47,440
however as i mentioned to you this is

416
00:15:47,440 --> 00:15:49,440
almost the final protocol but it still

417
00:15:49,440 --> 00:15:51,600
has a remaining issue that

418
00:15:51,600 --> 00:15:54,000
a coalition can still harm an honest

419
00:15:54,000 --> 00:15:56,320
individual

420
00:15:56,320 --> 00:15:58,399
let's say this black player in the

421
00:15:58,399 --> 00:16:01,120
circle is an innocent honest player that

422
00:16:01,120 --> 00:16:02,800
the coalition wants to target because

423
00:16:02,800 --> 00:16:04,880
he's too smart

424
00:16:04,880 --> 00:16:07,600
so to harm this honest individual the

425
00:16:07,600 --> 00:16:09,839
coalition can just distribute themselves

426
00:16:09,839 --> 00:16:13,120
as even as possible into the banks

427
00:16:13,120 --> 00:16:15,120
and then they wait for honest players to

428
00:16:15,120 --> 00:16:16,800
open their bank choice

429
00:16:16,800 --> 00:16:19,040
now they see that honest player this

430
00:16:19,040 --> 00:16:22,480
honest target chooses bank three now

431
00:16:22,480 --> 00:16:24,160
they choose which commitments they want

432
00:16:24,160 --> 00:16:28,160
to open based on honest players openings

433
00:16:28,160 --> 00:16:30,880
to ex to exclude this honest target from

434
00:16:30,880 --> 00:16:33,759
being elected what they can do is

435
00:16:33,759 --> 00:16:35,199
they'll refuse to open these two

436
00:16:35,199 --> 00:16:37,519
commitments in the first bank

437
00:16:37,519 --> 00:16:38,880
and now as we mentioned they'll be

438
00:16:38,880 --> 00:16:40,320
kicked out

439
00:16:40,320 --> 00:16:42,160
and after they're kicked out the first

440
00:16:42,160 --> 00:16:44,399
game becomes the lightest thing and the

441
00:16:44,399 --> 00:16:46,560
players in the first being are elected

442
00:16:46,560 --> 00:16:48,480
as the committee and there's no way for

443
00:16:48,480 --> 00:16:50,320
this honest target this black honest

444
00:16:50,320 --> 00:16:52,880
target to be elected anymore because the

445
00:16:52,880 --> 00:16:56,959
coalition tries so hard to exclude it

446
00:16:56,959 --> 00:16:59,040
so we need to fix this problem and we

447
00:16:59,040 --> 00:17:00,959
come to our final protocol

448
00:17:00,959 --> 00:17:02,959
due to the time constraints i'm only to

449
00:17:02,959 --> 00:17:05,039
talk about a very high level idea of

450
00:17:05,039 --> 00:17:06,799
this fix

451
00:17:06,799 --> 00:17:09,039
so we basically use a virtual id

452
00:17:09,039 --> 00:17:12,000
technique introduced in ccws21

453
00:17:12,000 --> 00:17:14,480
we let every player to randomly choose a

454
00:17:14,480 --> 00:17:17,520
virtual id for themselves

455
00:17:17,520 --> 00:17:19,679
and we use this virtual id to do the

456
00:17:19,679 --> 00:17:22,000
commit and open latest thing

457
00:17:22,000 --> 00:17:24,240
now the coalition only get to see the

458
00:17:24,240 --> 00:17:27,359
main choices of these honest virtual ids

459
00:17:27,359 --> 00:17:28,160
so

460
00:17:28,160 --> 00:17:30,240
as long as the mapping between the real

461
00:17:30,240 --> 00:17:32,720
identity and the virtual id is hidden

462
00:17:32,720 --> 00:17:34,480
from the coalition

463
00:17:34,480 --> 00:17:36,400
then they doesn't know who should i

464
00:17:36,400 --> 00:17:38,320
exclude which virtual id should i

465
00:17:38,320 --> 00:17:40,880
exclude they doesn't know that and this

466
00:17:40,880 --> 00:17:44,880
mapping is hidden by commitments

467
00:17:44,880 --> 00:17:47,440
however it's not just this easy that we

468
00:17:47,440 --> 00:17:49,840
can hide the mapping by commitments

469
00:17:49,840 --> 00:17:52,000
because we're in authenticated

470
00:17:52,000 --> 00:17:53,280
broadcasting

471
00:17:53,280 --> 00:17:55,840
and we know the identity of the sender

472
00:17:55,840 --> 00:17:57,520
for each message

473
00:17:57,520 --> 00:18:00,240
so when the honest target opens his bank

474
00:18:00,240 --> 00:18:01,919
voice based on

475
00:18:01,919 --> 00:18:04,000
on behalf of his virtual id he has to

476
00:18:04,000 --> 00:18:06,559
send this message virtual id 3 chooses

477
00:18:06,559 --> 00:18:07,679
bank 3

478
00:18:07,679 --> 00:18:09,760
and once they post this message on block

479
00:18:09,760 --> 00:18:11,440
on the broadcast channel

480
00:18:11,440 --> 00:18:13,600
the coalition immediately knows oh

481
00:18:13,600 --> 00:18:15,919
you're behind virtual id3 and you choose

482
00:18:15,919 --> 00:18:18,720
being three we know how to target two

483
00:18:18,720 --> 00:18:20,480
and they can perform the same attack as

484
00:18:20,480 --> 00:18:22,160
before

485
00:18:22,160 --> 00:18:24,160
so to get rid of this problem we

486
00:18:24,160 --> 00:18:26,559
actually need to run this commit and

487
00:18:26,559 --> 00:18:29,039
opening an anonymous broadcast channel

488
00:18:29,039 --> 00:18:31,039
which hides the identity of the sender

489
00:18:31,039 --> 00:18:32,720
of each message

490
00:18:32,720 --> 00:18:34,799
assume that if we have this anonymous

491
00:18:34,799 --> 00:18:36,880
broadcast channel then the collision

492
00:18:36,880 --> 00:18:39,520
only get to see a message virtual id3

493
00:18:39,520 --> 00:18:41,600
chooses this bank 3 but the coalition

494
00:18:41,600 --> 00:18:43,520
doesn't know who sent this message and

495
00:18:43,520 --> 00:18:45,120
they doesn't know who is behind virtual

496
00:18:45,120 --> 00:18:46,240
id3

497
00:18:46,240 --> 00:18:49,120
and so they cannot target an honest

498
00:18:49,120 --> 00:18:51,280
individual anymore

499
00:18:51,280 --> 00:18:52,880
and in our paper this anonymous

500
00:18:52,880 --> 00:18:55,039
broadcast channel is instantiated with

501
00:18:55,039 --> 00:18:58,559
bonded concurrency or knowledge proof

502
00:18:58,559 --> 00:19:01,280
so now this is our final community

503
00:19:01,280 --> 00:19:03,919
election protocol it is commit and open

504
00:19:03,919 --> 00:19:06,240
with virtual id the anonymous broadcast

505
00:19:06,240 --> 00:19:08,559
channel it guarantees that first no

506
00:19:08,559 --> 00:19:10,400
coalition can noticeably increase its

507
00:19:10,400 --> 00:19:13,120
expected fraction and the lightest thing

508
00:19:13,120 --> 00:19:14,720
which is guaranteed by committee and

509
00:19:14,720 --> 00:19:15,600
open

510
00:19:15,600 --> 00:19:17,360
and second it guarantees that no

511
00:19:17,360 --> 00:19:19,760
coalition can noticeably harm an honest

512
00:19:19,760 --> 00:19:22,320
individual guaranteed by virtual id and

513
00:19:22,320 --> 00:19:25,439
anonymous room

514
00:19:25,520 --> 00:19:27,840
so to wrap up in this paper we give a

515
00:19:27,840 --> 00:19:29,679
game theoretically fairly dirty election

516
00:19:29,679 --> 00:19:32,880
that runs in lockster rounds and also we

517
00:19:32,880 --> 00:19:35,360
give a fully parametrized result for

518
00:19:35,360 --> 00:19:36,880
game theoretically fair committee

519
00:19:36,880 --> 00:19:38,960
election

520
00:19:38,960 --> 00:19:40,880
and there are some interesting open

521
00:19:40,880 --> 00:19:42,799
questions left in this work

522
00:19:42,799 --> 00:19:45,039
the first one is that in the previous

523
00:19:45,039 --> 00:19:48,000
work in ccws21 their later election

524
00:19:48,000 --> 00:19:50,240
actually satisfies a stronger fairness

525
00:19:50,240 --> 00:19:52,000
notion which is called sequential notion

526
00:19:52,000 --> 00:19:55,200
of fairness it guarantees that at any

527
00:19:55,200 --> 00:19:57,200
point in the protocol given the current

528
00:19:57,200 --> 00:19:59,360
information the collision doesn't have

529
00:19:59,360 --> 00:20:01,280
incentive to deviate

530
00:20:01,280 --> 00:20:03,039
and our but our per code does not

531
00:20:03,039 --> 00:20:05,440
satisfy this wrong notion so it would be

532
00:20:05,440 --> 00:20:08,960
interesting to see if it is uh if any

533
00:20:08,960 --> 00:20:11,120
meaningful result is achievable with

534
00:20:11,120 --> 00:20:12,640
less than log logging rounds for the

535
00:20:12,640 --> 00:20:16,000
strong sequential notion of fairness

536
00:20:16,000 --> 00:20:18,320
the second one is that in this paper we

537
00:20:18,320 --> 00:20:20,480
only give the upper bounds so it would

538
00:20:20,480 --> 00:20:22,000
be interesting to see if there's any

539
00:20:22,000 --> 00:20:23,679
lower bound on the wrong complexity

540
00:20:23,679 --> 00:20:25,360
necessary for achieving one minus

541
00:20:25,360 --> 00:20:27,039
epsilon fairness

542
00:20:27,039 --> 00:20:29,039
and the third is that we do not claim

543
00:20:29,039 --> 00:20:31,280
practicality of our protocol so it would

544
00:20:31,280 --> 00:20:33,360
be interesting to see if there's any

545
00:20:33,360 --> 00:20:35,280
practical variants of our protocol that

546
00:20:35,280 --> 00:20:37,360
is implementable in real world

547
00:20:37,360 --> 00:20:40,159
applications and that completes my talk

548
00:20:40,159 --> 00:20:42,559
thank you

549
00:20:47,679 --> 00:20:51,720
thank you kay any questions

550
00:21:02,960 --> 00:21:05,360
ah thank you for the talk so i have two

551
00:21:05,360 --> 00:21:06,960
questions actually the first one is if

552
00:21:06,960 --> 00:21:10,799
you're assuming synchrony and uh crypto

553
00:21:10,799 --> 00:21:12,480
why can't you use something like time

554
00:21:12,480 --> 00:21:14,400
lock puzzles to do this

555
00:21:14,400 --> 00:21:17,200
oh because we're not we're not assuming

556
00:21:17,200 --> 00:21:18,640
that we're in the time model like we're

557
00:21:18,640 --> 00:21:21,120
just considering synchronized uh we are

558
00:21:21,120 --> 00:21:24,880
in synchronized round uh model so

559
00:21:24,880 --> 00:21:26,960
without time right how do you how would

560
00:21:26,960 --> 00:21:29,440
you implement this without time

561
00:21:29,440 --> 00:21:31,200
how would you how would you implement

562
00:21:31,200 --> 00:21:33,039
the synchronous model without having

563
00:21:33,039 --> 00:21:34,960
having a notion of time

564
00:21:34,960 --> 00:21:37,039
um so we're just assuming that our

565
00:21:37,039 --> 00:21:39,280
protocol runs in the synchronized route

566
00:21:39,280 --> 00:21:41,679
so like uh it's lockstep but it's not

567
00:21:41,679 --> 00:21:44,000
synchronized

568
00:21:44,000 --> 00:21:45,840
in synchron it's in synchronized

569
00:21:45,840 --> 00:21:46,960
channels so

570
00:21:46,960 --> 00:21:47,760
um

571
00:21:47,760 --> 00:21:49,200
but how do you implement this without

572
00:21:49,200 --> 00:21:50,880
synchrony

573
00:21:50,880 --> 00:21:52,720
uh

574
00:21:52,720 --> 00:21:54,240
maybe we can discuss it offline but

575
00:21:54,240 --> 00:21:55,840
actually my other question relates to

576
00:21:55,840 --> 00:21:59,039
the first one so um if if the network is

577
00:21:59,039 --> 00:22:00,480
completely asynchronous is there

578
00:22:00,480 --> 00:22:02,320
anything known or

579
00:22:02,320 --> 00:22:05,520
um no okay so like our work focus on

580
00:22:05,520 --> 00:22:07,840
synchronous network and it would be

581
00:22:07,840 --> 00:22:10,320
interesting to see if there's any work

582
00:22:10,320 --> 00:22:11,840
that any work that can be done

583
00:22:11,840 --> 00:22:13,600
asynchronous channel but then probably

584
00:22:13,600 --> 00:22:15,600
fighter's protocol doesn't work because

585
00:22:15,600 --> 00:22:17,919
then you can uh yeah

586
00:22:17,919 --> 00:22:19,120
i think

587
00:22:19,120 --> 00:22:20,799
yeah okay

588
00:22:20,799 --> 00:22:23,919
okay thank you okay

589
00:22:23,919 --> 00:22:25,600
well the first very small question is

590
00:22:25,600 --> 00:22:27,280
just for commitments do we need on

591
00:22:27,280 --> 00:22:28,799
malleable commitments so just regular

592
00:22:28,799 --> 00:22:30,640
commitments uh the commitments that you

593
00:22:30,640 --> 00:22:32,000
use

594
00:22:32,000 --> 00:22:34,400
yeah so like we we have two commitments

595
00:22:34,400 --> 00:22:36,559
step one is to commit an open where

596
00:22:36,559 --> 00:22:37,840
players have to agree to their being

597
00:22:37,840 --> 00:22:40,080
choice there we need non-valuable

598
00:22:40,080 --> 00:22:42,799
commitments and the second is actually

599
00:22:42,799 --> 00:22:45,039
in uh for the instantiation of the

600
00:22:45,039 --> 00:22:46,799
anonymous broadcast channel we need

601
00:22:46,799 --> 00:22:48,720
commitments and there we just need uh

602
00:22:48,720 --> 00:22:50,480
normal commitments that is perfectly

603
00:22:50,480 --> 00:22:52,480
binding and competition yeah because i

604
00:22:52,480 --> 00:22:54,240
saw some of my normal liability things

605
00:22:54,240 --> 00:22:55,840
but you're saying yeah good so so you do

606
00:22:55,840 --> 00:22:57,280
use non-marble commitment yes we do use

607
00:22:57,280 --> 00:22:58,720
no malleable commitments yeah and in

608
00:22:58,720 --> 00:23:01,600
terms of the assumptions i uh

609
00:23:01,600 --> 00:23:03,120
i actually forgot whether the latest or

610
00:23:03,120 --> 00:23:04,799
non-valuable commitments i think one way

611
00:23:04,799 --> 00:23:07,600
functions but maybe isn't uh

612
00:23:07,600 --> 00:23:09,120
but in terms of assumptions like also

613
00:23:09,120 --> 00:23:11,520
for concurrent zero knowledge uh what

614
00:23:11,520 --> 00:23:13,280
are your final assumptions in terms of

615
00:23:13,280 --> 00:23:14,799
like the simplest possible assumptions

616
00:23:14,799 --> 00:23:16,080
can you base everything on one way

617
00:23:16,080 --> 00:23:17,919
functions so

618
00:23:17,919 --> 00:23:20,240
what's the final assumption we need

619
00:23:20,240 --> 00:23:23,360
we need trapdoor permutation

620
00:23:23,360 --> 00:23:25,280
and collision resistant hash for the

621
00:23:25,280 --> 00:23:27,360
bonded concurrencier knowledge proof

622
00:23:27,360 --> 00:23:29,520
using our instantiation of the anomalous

623
00:23:29,520 --> 00:23:31,919
broadcastones and just in general like

624
00:23:31,919 --> 00:23:33,200
for example even on malleable

625
00:23:33,200 --> 00:23:34,640
commitments

626
00:23:34,640 --> 00:23:35,919
interactive in general all your

627
00:23:35,919 --> 00:23:37,600
primitives are interactive so it's okay

628
00:23:37,600 --> 00:23:38,880
to use interaction but it's like small

629
00:23:38,880 --> 00:23:40,400
number of rounds so it's a constant yeah

630
00:23:40,400 --> 00:23:42,640
so

631
00:23:45,840 --> 00:23:46,799
okay

632
00:23:46,799 --> 00:23:50,440
well thank you again

633
00:24:09,120 --> 00:24:12,120
is

634
00:24:29,919 --> 00:24:32,919
oh

635
00:24:41,279 --> 00:24:43,600
so the second and final talk of this

636
00:24:43,600 --> 00:24:45,200
short session will be gossiping for a

637
00:24:45,200 --> 00:24:47,360
communication efficient broadcast by

638
00:24:47,360 --> 00:24:49,919
eurostimos julian loss

639
00:24:49,919 --> 00:24:53,120
and shalompos

640
00:24:54,799 --> 00:24:56,799
i think sorry

641
00:24:56,799 --> 00:24:58,640
and

642
00:24:58,640 --> 00:25:01,840
giving the talk thank you very much um

643
00:25:01,840 --> 00:25:03,279
so yeah

644
00:25:03,279 --> 00:25:05,200
i'm jorgos

645
00:25:05,200 --> 00:25:07,279
it's nice to be here today i'm going to

646
00:25:07,279 --> 00:25:08,799
talk about gossiping for communication

647
00:25:08,799 --> 00:25:10,720
efficient broadcast

648
00:25:10,720 --> 00:25:11,840
and

649
00:25:11,840 --> 00:25:13,440
this is a joint work with my amazing

650
00:25:13,440 --> 00:25:15,679
collaborators julian lawson bob small

651
00:25:15,679 --> 00:25:18,240
man for my advisor

652
00:25:18,240 --> 00:25:20,320
cis point bubbs is that here

653
00:25:20,320 --> 00:25:22,480
so let's dive in

654
00:25:22,480 --> 00:25:23,840
so broadcast

655
00:25:23,840 --> 00:25:26,720
is basically the problem or where end

656
00:25:26,720 --> 00:25:28,960
parties want to communicate a designated

657
00:25:28,960 --> 00:25:31,120
sender wants to send its input value to

658
00:25:31,120 --> 00:25:33,279
all design parties

659
00:25:33,279 --> 00:25:34,080
and

660
00:25:34,080 --> 00:25:35,840
broadcast broadcasted valid publishers

661
00:25:35,840 --> 00:25:37,039
and parties

662
00:25:37,039 --> 00:25:39,279
however the sender might be dishonest

663
00:25:39,279 --> 00:25:41,440
and in this case might send different

664
00:25:41,440 --> 00:25:43,279
values to different parties

665
00:25:43,279 --> 00:25:44,799
but still all honest partners want to

666
00:25:44,799 --> 00:25:47,279
agree eventually on the same

667
00:25:47,279 --> 00:25:49,039
output value

668
00:25:49,039 --> 00:25:51,600
in the authenticated broadcast setting

669
00:25:51,600 --> 00:25:53,600
it's basically broadcast with

670
00:25:53,600 --> 00:25:55,520
the additional use of the public key

671
00:25:55,520 --> 00:25:56,640
infrastructure

672
00:25:56,640 --> 00:25:58,159
or pki

673
00:25:58,159 --> 00:26:00,320
this can be a bulletin board pki or a

674
00:26:00,320 --> 00:26:02,559
trusted pki in the bulletin board

675
00:26:02,559 --> 00:26:04,240
setting

676
00:26:04,240 --> 00:26:06,799
basically parties post their own keys

677
00:26:06,799 --> 00:26:08,480
in a bulletin board

678
00:26:08,480 --> 00:26:10,159
whereas in the trusted setting there is

679
00:26:10,159 --> 00:26:11,760
a trusted authority that issues the keys

680
00:26:11,760 --> 00:26:14,480
and distributes them among the parties

681
00:26:14,480 --> 00:26:16,640
and therefore because of the access to

682
00:26:16,640 --> 00:26:17,919
pki

683
00:26:17,919 --> 00:26:19,919
each party can sign messages with their

684
00:26:19,919 --> 00:26:22,000
own signature

685
00:26:22,000 --> 00:26:23,360
so

686
00:26:23,360 --> 00:26:25,440
we can see this via an example assume

687
00:26:25,440 --> 00:26:26,960
now there are these five parties that

688
00:26:26,960 --> 00:26:28,880
designate sender is the king and he

689
00:26:28,880 --> 00:26:30,320
wants to send

690
00:26:30,320 --> 00:26:32,000
his message to all other parties in the

691
00:26:32,000 --> 00:26:35,520
protocol by using the broadcast protocol

692
00:26:35,520 --> 00:26:37,279
uh and still some parties might be

693
00:26:37,279 --> 00:26:39,840
dishonest however we want the properties

694
00:26:39,840 --> 00:26:41,760
that at the end of the protocol all

695
00:26:41,760 --> 00:26:43,279
honest parties will agree on the same

696
00:26:43,279 --> 00:26:45,200
output bit and

697
00:26:45,200 --> 00:26:46,880
if the sender is honest all honest

698
00:26:46,880 --> 00:26:50,159
parties will agree on the same bit

699
00:26:50,159 --> 00:26:52,720
so authenticator broadcast comes in many

700
00:26:52,720 --> 00:26:54,720
flavors depending on

701
00:26:54,720 --> 00:26:56,720
several factors

702
00:26:56,720 --> 00:26:59,200
such as whether we have synchronous or

703
00:26:59,200 --> 00:27:00,880
asynchronous communication between the

704
00:27:00,880 --> 00:27:02,080
parties

705
00:27:02,080 --> 00:27:03,919
the number of corruptions whether we're

706
00:27:03,919 --> 00:27:05,919
in this honest or dishonest majority

707
00:27:05,919 --> 00:27:07,279
setting

708
00:27:07,279 --> 00:27:09,120
the setup assumptions as we mentioned

709
00:27:09,120 --> 00:27:11,200
already we can have trusted setup or no

710
00:27:11,200 --> 00:27:12,799
trust at all

711
00:27:12,799 --> 00:27:14,480
and whether the adversary is static or

712
00:27:14,480 --> 00:27:16,720
adaptive basically a static adversary

713
00:27:16,720 --> 00:27:17,440
can

714
00:27:17,440 --> 00:27:18,880
corrupt parties only before the

715
00:27:18,880 --> 00:27:20,320
execution of the protocol whereas an

716
00:27:20,320 --> 00:27:23,440
adaptive adversary can corrupt parties

717
00:27:23,440 --> 00:27:24,960
dynamically during the execution of the

718
00:27:24,960 --> 00:27:26,480
protocol

719
00:27:26,480 --> 00:27:28,559
so we use different metrics

720
00:27:28,559 --> 00:27:30,960
for the broadcast protocols

721
00:27:30,960 --> 00:27:32,480
the the first one is the communication

722
00:27:32,480 --> 00:27:35,679
complexity which is the amount the total

723
00:27:35,679 --> 00:27:37,279
amount of information exchanged between

724
00:27:37,279 --> 00:27:38,559
parties throughout the execution of the

725
00:27:38,559 --> 00:27:41,039
protocol between honest parties

726
00:27:41,039 --> 00:27:42,880
and it's also the round complexity which

727
00:27:42,880 --> 00:27:44,320
is the total number of rounds that it

728
00:27:44,320 --> 00:27:47,440
takes for the protocol to execute

729
00:27:47,440 --> 00:27:50,720
um in our setting for this work uh we

730
00:27:50,720 --> 00:27:52,880
are in the synchronous communication

731
00:27:52,880 --> 00:27:54,799
uh and dishonest majority where the

732
00:27:54,799 --> 00:27:56,720
adversary can corrupt up the fraction of

733
00:27:56,720 --> 00:27:59,200
as many parties as you would like

734
00:27:59,200 --> 00:28:02,240
and if we also exclude trusted setup the

735
00:28:02,240 --> 00:28:04,000
state of the art in this setting is

736
00:28:04,000 --> 00:28:06,320
dollar strong paper

737
00:28:06,320 --> 00:28:07,120
with

738
00:28:07,120 --> 00:28:09,840
no cubic communication to the number of

739
00:28:09,840 --> 00:28:12,720
parties in the protocol

740
00:28:12,720 --> 00:28:13,600
so

741
00:28:13,600 --> 00:28:15,919
in this work today i will show how we

742
00:28:15,919 --> 00:28:18,720
achieve to have authenticated broadcast

743
00:28:18,720 --> 00:28:20,960
with quadratic communication complexity

744
00:28:20,960 --> 00:28:23,039
using only bulletin board pki thus

745
00:28:23,039 --> 00:28:24,799
improving the dollar song by an order of

746
00:28:24,799 --> 00:28:25,760
n

747
00:28:25,760 --> 00:28:27,760
we will also introduce gossiping and

748
00:28:27,760 --> 00:28:30,480
converts to

749
00:28:30,480 --> 00:28:32,799
new techniques in this area and we will

750
00:28:32,799 --> 00:28:34,960
show parallel broadcast we'll say i'll

751
00:28:34,960 --> 00:28:36,960
explain later what parallel brokers is i

752
00:28:36,960 --> 00:28:38,320
will show parallel builders protocols

753
00:28:38,320 --> 00:28:40,640
with cubic communication using bulletin

754
00:28:40,640 --> 00:28:42,799
board pki and quadratic communication

755
00:28:42,799 --> 00:28:46,159
using the trust apki setting

756
00:28:46,159 --> 00:28:47,760
so first of all let's dive into dollar

757
00:28:47,760 --> 00:28:49,200
strong and understand it a little bit

758
00:28:49,200 --> 00:28:50,399
better

759
00:28:50,399 --> 00:28:52,720
this is a very straightforward protocol

760
00:28:52,720 --> 00:28:54,240
in the first round of the protocol the

761
00:28:54,240 --> 00:28:56,399
designated sender sends its own

762
00:28:56,399 --> 00:28:58,480
message signed by its own signature to

763
00:28:58,480 --> 00:29:00,000
all parties

764
00:29:00,000 --> 00:29:02,080
and in every other round up to t plus

765
00:29:02,080 --> 00:29:04,080
one where t is the total number of

766
00:29:04,080 --> 00:29:06,080
corruptions the adversary can have

767
00:29:06,080 --> 00:29:08,080
each party checks whether it received a

768
00:29:08,080 --> 00:29:09,919
new valid message

769
00:29:09,919 --> 00:29:12,159
valid here in the sense that a message

770
00:29:12,159 --> 00:29:14,480
must be accompanied by at least many

771
00:29:14,480 --> 00:29:17,360
signatures from distinct parties

772
00:29:17,360 --> 00:29:19,120
and if it does

773
00:29:19,120 --> 00:29:21,520
receive a new valid message it adds its

774
00:29:21,520 --> 00:29:23,360
own signature to the message and send

775
00:29:23,360 --> 00:29:24,880
the message accompanied by all the

776
00:29:24,880 --> 00:29:28,240
signatures to all parties and protocols

777
00:29:28,240 --> 00:29:30,880
so as you can see

778
00:29:30,880 --> 00:29:32,640
dollar strong

779
00:29:32,640 --> 00:29:35,440
achieves an authenticated broadcast

780
00:29:35,440 --> 00:29:38,159
for any number of adaptive corruptions

781
00:29:38,159 --> 00:29:40,159
it's deterministic and takes all order

782
00:29:40,159 --> 00:29:41,600
event many rounds

783
00:29:41,600 --> 00:29:44,799
and it only assumes bulletin board bki

784
00:29:44,799 --> 00:29:46,559
but the total communication complexity

785
00:29:46,559 --> 00:29:48,240
is cubic to the number of parties as we

786
00:29:48,240 --> 00:29:49,840
already mentioned and we'd like to see

787
00:29:49,840 --> 00:29:51,840
if we can improve that

788
00:29:51,840 --> 00:29:53,760
so to improve that

789
00:29:53,760 --> 00:29:54,880
we

790
00:29:54,880 --> 00:29:56,960
we thought whether there is redundant

791
00:29:56,960 --> 00:29:58,799
information shared between parties

792
00:29:58,799 --> 00:30:00,640
throughout the protocol and you can see

793
00:30:00,640 --> 00:30:02,480
that because

794
00:30:02,480 --> 00:30:04,159
all parties will send to all other

795
00:30:04,159 --> 00:30:06,000
parties therefore including already a

796
00:30:06,000 --> 00:30:09,679
quadratic communication and the largest

797
00:30:09,679 --> 00:30:11,120
message that the party might send to all

798
00:30:11,120 --> 00:30:13,679
other parties is in total order of n

799
00:30:13,679 --> 00:30:15,520
because it will be a message accompanied

800
00:30:15,520 --> 00:30:18,640
by an order of very many signatures

801
00:30:18,640 --> 00:30:20,880
therefore the cubic communication seems

802
00:30:20,880 --> 00:30:23,679
to come from the fact that dolph song

803
00:30:23,679 --> 00:30:26,480
uses some redundant information

804
00:30:26,480 --> 00:30:28,399
and basically what parties want to

805
00:30:28,399 --> 00:30:30,559
achieve with sending

806
00:30:30,559 --> 00:30:33,200
is that they want to observe

807
00:30:33,200 --> 00:30:35,039
the information between each other

808
00:30:35,039 --> 00:30:36,240
exactly the same information between

809
00:30:36,240 --> 00:30:39,120
each other but this can take less than

810
00:30:39,120 --> 00:30:41,760
cubic communication to be achieved

811
00:30:41,760 --> 00:30:43,520
in order to do so what we think is the

812
00:30:43,520 --> 00:30:44,559
following

813
00:30:44,559 --> 00:30:46,799
uh every time a party has to send to

814
00:30:46,799 --> 00:30:49,039
another party it will fail it will first

815
00:30:49,039 --> 00:30:50,399
ask ask itself

816
00:30:50,399 --> 00:30:52,880
do i send to this party

817
00:30:52,880 --> 00:30:55,039
uh it will flip a coin to answer and if

818
00:30:55,039 --> 00:30:57,120
the coin lands heads then it will send

819
00:30:57,120 --> 00:30:59,200
otherwise it won't

820
00:30:59,200 --> 00:31:00,720
uh this is basically the main idea of

821
00:31:00,720 --> 00:31:02,000
gossiping

822
00:31:02,000 --> 00:31:04,399
it's honest party randomly picks a few

823
00:31:04,399 --> 00:31:06,720
other parties to send to

824
00:31:06,720 --> 00:31:09,760
and of course if it just did that then

825
00:31:09,760 --> 00:31:11,120
it wouldn't achieve propagation of the

826
00:31:11,120 --> 00:31:12,960
message to all parties therefore we're

827
00:31:12,960 --> 00:31:15,120
needing to have an additional order of

828
00:31:15,120 --> 00:31:16,960
end logan many rounds

829
00:31:16,960 --> 00:31:19,760
to achieve propagation to all parties

830
00:31:19,760 --> 00:31:21,919
so we can think of it be an example

831
00:31:21,919 --> 00:31:23,600
imagine the designated sender s here

832
00:31:23,600 --> 00:31:25,200
wants to send a specific message to all

833
00:31:25,200 --> 00:31:27,279
parties some of the parties might be

834
00:31:27,279 --> 00:31:28,960
corrupt

835
00:31:28,960 --> 00:31:31,840
and at some round alpha the sender

836
00:31:31,840 --> 00:31:34,559
begins to send the message picks a few

837
00:31:34,559 --> 00:31:36,799
random parties to send the message to

838
00:31:36,799 --> 00:31:38,960
and they in turn pick a few other random

839
00:31:38,960 --> 00:31:42,080
parts to send a message to etc etc and

840
00:31:42,080 --> 00:31:44,000
after a very small amount of rounds the

841
00:31:44,000 --> 00:31:46,080
message is being sent to everybody this

842
00:31:46,080 --> 00:31:48,720
is the basic idea of gossiping

843
00:31:48,720 --> 00:31:51,360
so we use this idea of gossiping

844
00:31:51,360 --> 00:31:52,080
in

845
00:31:52,080 --> 00:31:53,440
collaboration with dollar strong

846
00:31:53,440 --> 00:31:56,080
protocol to achieve an improvement

847
00:31:56,080 --> 00:31:58,399
our protocol works as follows it follows

848
00:31:58,399 --> 00:32:00,399
very close to dollar strong in the first

849
00:32:00,399 --> 00:32:02,559
round exactly the same happens

850
00:32:02,559 --> 00:32:04,480
the designated sender sends the message

851
00:32:04,480 --> 00:32:06,080
to all other parties

852
00:32:06,080 --> 00:32:08,320
but then for every round when a party

853
00:32:08,320 --> 00:32:09,840
wants to send a message instead of

854
00:32:09,840 --> 00:32:11,440
directly sending the message to everyone

855
00:32:11,440 --> 00:32:14,080
else it will gossip the message via

856
00:32:14,080 --> 00:32:17,039
login many rounds of gossiping

857
00:32:17,039 --> 00:32:19,039
so the result is that we achieve

858
00:32:19,039 --> 00:32:20,960
authenticated broadcast

859
00:32:20,960 --> 00:32:22,799
for any fraction of adapt of static

860
00:32:22,799 --> 00:32:24,480
corruptions

861
00:32:24,480 --> 00:32:26,399
which is a randomized protocol it takes

862
00:32:26,399 --> 00:32:28,320
over logan rounds in the way that

863
00:32:28,320 --> 00:32:30,960
explained here but actually in our paper

864
00:32:30,960 --> 00:32:33,279
the protocol saves of n rounds exactly

865
00:32:33,279 --> 00:32:35,279
the same as dollar strong

866
00:32:35,279 --> 00:32:38,159
and it assumes only bulletin board pki

867
00:32:38,159 --> 00:32:41,120
the total communication is over squared

868
00:32:41,120 --> 00:32:43,200
so if we compare our protocol to dollar

869
00:32:43,200 --> 00:32:45,120
strong we can see that

870
00:32:45,120 --> 00:32:47,200
it is actually improved in communication

871
00:32:47,200 --> 00:32:48,880
but it has the flaw that it is not

872
00:32:48,880 --> 00:32:51,200
secure against an adaptive adversary

873
00:32:51,200 --> 00:32:53,120
it is easy to see that

874
00:32:53,120 --> 00:32:55,200
because an adaptive adversary can wait

875
00:32:55,200 --> 00:32:57,120
during the propagation of a message

876
00:32:57,120 --> 00:32:58,559
in the

877
00:32:58,559 --> 00:33:01,440
gossiping phase and once it observes the

878
00:33:01,440 --> 00:33:04,000
communication pattern between parties

879
00:33:04,000 --> 00:33:05,679
and it observes that only a few parties

880
00:33:05,679 --> 00:33:07,760
receive the message it corrupts all

881
00:33:07,760 --> 00:33:09,440
these parties and breaks the propagation

882
00:33:09,440 --> 00:33:10,399
of the message

883
00:33:10,399 --> 00:33:12,000
and therefore breaks the security of the

884
00:33:12,000 --> 00:33:13,919
product

885
00:33:13,919 --> 00:33:16,240
so back to our motivation we would like

886
00:33:16,240 --> 00:33:18,799
to think if we can combine

887
00:33:18,799 --> 00:33:20,640
the gossiping technique with some other

888
00:33:20,640 --> 00:33:22,640
idea to achieve security against

889
00:33:22,640 --> 00:33:24,880
adaptive adversaries

890
00:33:24,880 --> 00:33:26,960
it is the case that many times when we

891
00:33:26,960 --> 00:33:29,679
actually need the broadcast

892
00:33:29,679 --> 00:33:32,000
in practicality we need it

893
00:33:32,000 --> 00:33:34,399
in another sense where all parties want

894
00:33:34,399 --> 00:33:36,559
to send information to all other parties

895
00:33:36,559 --> 00:33:39,039
in the protocol this is the case in many

896
00:33:39,039 --> 00:33:40,960
mpc protocols and verifiable secret

897
00:33:40,960 --> 00:33:43,279
sharing schemes

898
00:33:43,279 --> 00:33:45,120
so we introduced the notion of parallel

899
00:33:45,120 --> 00:33:46,240
broadcast

900
00:33:46,240 --> 00:33:48,080
this is an already known notion but we

901
00:33:48,080 --> 00:33:50,240
will use it in our protocol in a

902
00:33:50,240 --> 00:33:52,640
non-black box man

903
00:33:52,640 --> 00:33:54,320
in parallel broadcast we have again end

904
00:33:54,320 --> 00:33:56,399
parties two of which might be corrupted

905
00:33:56,399 --> 00:33:58,799
but now every party will act as a sender

906
00:33:58,799 --> 00:34:00,720
every party has some input value and

907
00:34:00,720 --> 00:34:02,159
they want to send it to other parties in

908
00:34:02,159 --> 00:34:03,919
the protocol

909
00:34:03,919 --> 00:34:06,880
so every party defines a slot in the in

910
00:34:06,880 --> 00:34:09,760
the sense that a slot is basically the

911
00:34:09,760 --> 00:34:11,520
the authenticated broadcast for this

912
00:34:11,520 --> 00:34:14,159
specific standard

913
00:34:14,159 --> 00:34:15,520
and

914
00:34:15,520 --> 00:34:17,599
each party in the end will output and

915
00:34:17,599 --> 00:34:20,639
many values one per slot the properties

916
00:34:20,639 --> 00:34:22,800
we want are still the same we want for

917
00:34:22,800 --> 00:34:25,119
every honest slot all honest parties to

918
00:34:25,119 --> 00:34:28,159
output the sender's input value

919
00:34:28,159 --> 00:34:30,719
and we want for for every slot all

920
00:34:30,719 --> 00:34:32,079
parties to agree on the same output

921
00:34:32,079 --> 00:34:33,599
value

922
00:34:33,599 --> 00:34:35,359
so again we can see it schematically now

923
00:34:35,359 --> 00:34:37,599
instead of having one designated sender

924
00:34:37,599 --> 00:34:39,918
acting as a king we have five generals

925
00:34:39,918 --> 00:34:41,359
they all want to communicate between

926
00:34:41,359 --> 00:34:42,800
each other they will use a parallel

927
00:34:42,800 --> 00:34:45,040
broadcast protocol to achieve the

928
00:34:45,040 --> 00:34:47,359
properties that we want

929
00:34:47,359 --> 00:34:49,119
however still some of them might be

930
00:34:49,119 --> 00:34:51,520
corrupt

931
00:34:51,679 --> 00:34:55,119
so the trivial solution that is actually

932
00:34:55,119 --> 00:34:57,440
because prior broadcast hasn't been

933
00:34:57,440 --> 00:34:59,280
studied very much it is the only

934
00:34:59,280 --> 00:35:01,599
solution that's been that's been applied

935
00:35:01,599 --> 00:35:03,440
so far the trivial solution is to use

936
00:35:03,440 --> 00:35:05,119
the best broadcast protocol for the

937
00:35:05,119 --> 00:35:07,599
underlying assumptions that we want

938
00:35:07,599 --> 00:35:10,480
n times in parallel once per slot

939
00:35:10,480 --> 00:35:12,480
and therefore if there is some specific

940
00:35:12,480 --> 00:35:13,760
communication of the underlying

941
00:35:13,760 --> 00:35:16,400
broadcast protocol say c the overall

942
00:35:16,400 --> 00:35:19,520
communication would be o of n times c

943
00:35:19,520 --> 00:35:20,400
and

944
00:35:20,400 --> 00:35:22,320
we also care for the amortized

945
00:35:22,320 --> 00:35:24,160
communication with which would be

946
00:35:24,160 --> 00:35:26,160
whatever communication is incurred over

947
00:35:26,160 --> 00:35:28,720
c because we have n authenticated

948
00:35:28,720 --> 00:35:30,960
broadcast one per slot

949
00:35:30,960 --> 00:35:32,240
the question though is if we can do

950
00:35:32,240 --> 00:35:34,800
better than that

951
00:35:34,800 --> 00:35:36,240
and

952
00:35:36,240 --> 00:35:37,680
as i already said we will introduce

953
00:35:37,680 --> 00:35:39,760
first of all converts and so

954
00:35:39,760 --> 00:35:41,119
two parallel brokers protocols that

955
00:35:41,119 --> 00:35:42,839
indeed do

956
00:35:42,839 --> 00:35:46,000
better so converge follows from the

957
00:35:46,000 --> 00:35:47,839
following

958
00:35:47,839 --> 00:35:50,400
we observe that in parallel broadcast

959
00:35:50,400 --> 00:35:52,079
parties have to propagate at least order

960
00:35:52,079 --> 00:35:53,760
event messages in total

961
00:35:53,760 --> 00:35:55,440
so they have to propagate

962
00:35:55,440 --> 00:35:57,280
if you think about it since there are n

963
00:35:57,280 --> 00:35:58,400
many slots

964
00:35:58,400 --> 00:36:00,160
and and many parties the total

965
00:36:00,160 --> 00:36:01,760
communication even in the information

966
00:36:01,760 --> 00:36:04,880
theoretic model would be over squared

967
00:36:04,880 --> 00:36:06,640
and we can therefore combine this

968
00:36:06,640 --> 00:36:08,800
inherently larger amount of information

969
00:36:08,800 --> 00:36:11,119
with gossiping but in parallel broadcast

970
00:36:11,119 --> 00:36:13,599
both more efficiently and also securely

971
00:36:13,599 --> 00:36:16,079
against adaptive adversaries

972
00:36:16,079 --> 00:36:17,599
the way to do that

973
00:36:17,599 --> 00:36:20,480
is the following observe that before

974
00:36:20,480 --> 00:36:22,079
in the gossipping parties would just

975
00:36:22,079 --> 00:36:22,960
pick

976
00:36:22,960 --> 00:36:24,640
some other parties at random and send

977
00:36:24,640 --> 00:36:26,400
the messages to them

978
00:36:26,400 --> 00:36:28,000
now however

979
00:36:28,000 --> 00:36:29,200
we have

980
00:36:29,200 --> 00:36:31,200
every party sending many more messages

981
00:36:31,200 --> 00:36:33,359
per round

982
00:36:33,359 --> 00:36:36,160
so like in gossiping if this party picks

983
00:36:36,160 --> 00:36:38,960
recipients at random for every message

984
00:36:38,960 --> 00:36:41,680
in the end with high probability all

985
00:36:41,680 --> 00:36:43,040
parties will receive approximately the

986
00:36:43,040 --> 00:36:45,520
same amount of messages

987
00:36:45,520 --> 00:36:47,839
we can increase the security by using

988
00:36:47,839 --> 00:36:49,599
cover traffic and ensuring that all

989
00:36:49,599 --> 00:36:51,280
parties will receive exactly the same

990
00:36:51,280 --> 00:36:52,720
information in the eyes of an adaptive

991
00:36:52,720 --> 00:36:54,720
adversary and that's what converge will

992
00:36:54,720 --> 00:36:56,240
do

993
00:36:56,240 --> 00:36:57,920
in this case the adaptive adversary will

994
00:36:57,920 --> 00:36:59,680
not gain any

995
00:36:59,680 --> 00:37:01,839
advantage by observing execution of the

996
00:37:01,839 --> 00:37:03,440
protocol and therefore the protocol will

997
00:37:03,440 --> 00:37:06,000
be adaptably secure

998
00:37:06,000 --> 00:37:08,720
so let's think of it be an example

999
00:37:08,720 --> 00:37:11,599
imagine that the party the

1000
00:37:11,599 --> 00:37:13,839
soil domain wants to send

1001
00:37:13,839 --> 00:37:15,359
five messages to another parties in the

1002
00:37:15,359 --> 00:37:16,480
protocol

1003
00:37:16,480 --> 00:37:18,480
so every list here

1004
00:37:18,480 --> 00:37:20,960
corresponds to what its corresponding

1005
00:37:20,960 --> 00:37:23,839
method the party so l1 for example

1006
00:37:23,839 --> 00:37:26,160
corresponds to party p1

1007
00:37:26,160 --> 00:37:29,280
l2 to the party p2 etc and every list

1008
00:37:29,280 --> 00:37:30,880
contains the messages that the party

1009
00:37:30,880 --> 00:37:33,280
will receive from a specific sender

1010
00:37:33,280 --> 00:37:35,040
so the sender what we'll do is it will

1011
00:37:35,040 --> 00:37:36,400
pick its message

1012
00:37:36,400 --> 00:37:38,720
and randomly select a few parties to

1013
00:37:38,720 --> 00:37:40,720
receive the message so for the first

1014
00:37:40,720 --> 00:37:42,800
message we'll randomly pick some parties

1015
00:37:42,800 --> 00:37:44,400
for the second the same et cetera et

1016
00:37:44,400 --> 00:37:46,480
cetera at some point it will fill the

1017
00:37:46,480 --> 00:37:48,079
lists

1018
00:37:48,079 --> 00:37:50,240
with this random process and the list

1019
00:37:50,240 --> 00:37:51,920
will already contain almost the same

1020
00:37:51,920 --> 00:37:53,599
amount of information

1021
00:37:53,599 --> 00:37:56,320
but what we also do is we add garbage

1022
00:37:56,320 --> 00:37:58,480
messages to all the lists so that they

1023
00:37:58,480 --> 00:38:02,000
all reach the same exact size

1024
00:38:02,000 --> 00:38:04,000
after that we will also encrypt the

1025
00:38:04,000 --> 00:38:06,880
lists so that only the recipient can

1026
00:38:06,880 --> 00:38:08,079
read them

1027
00:38:08,079 --> 00:38:09,760
and at this point the adversary

1028
00:38:09,760 --> 00:38:11,359
basically if it observes the

1029
00:38:11,359 --> 00:38:13,520
communication pattern of the protocol

1030
00:38:13,520 --> 00:38:16,160
it will observe exactly the same

1031
00:38:16,160 --> 00:38:18,160
communication communication information

1032
00:38:18,160 --> 00:38:20,160
for every recipient therefore the

1033
00:38:20,160 --> 00:38:22,960
adaptive adversary gives no

1034
00:38:22,960 --> 00:38:25,280
none of no advantage by observing the

1035
00:38:25,280 --> 00:38:27,839
execution of the protocol

1036
00:38:27,839 --> 00:38:29,599
with this in mind

1037
00:38:29,599 --> 00:38:32,160
we have our bull our first pvc protocol

1038
00:38:32,160 --> 00:38:34,720
which is in the bulletin board

1039
00:38:34,720 --> 00:38:37,359
it it is very simple actually again in

1040
00:38:37,359 --> 00:38:40,000
the first round every party will send

1041
00:38:40,000 --> 00:38:42,720
its own message signed by itself to all

1042
00:38:42,720 --> 00:38:44,320
other parties

1043
00:38:44,320 --> 00:38:46,560
and then for every round again up to t

1044
00:38:46,560 --> 00:38:48,800
plus one there are two stages

1045
00:38:48,800 --> 00:38:50,880
in the first stage again every party

1046
00:38:50,880 --> 00:38:52,720
will check whether it received a new

1047
00:38:52,720 --> 00:38:54,400
valid message

1048
00:38:54,400 --> 00:38:56,720
valid in the same sense as before

1049
00:38:56,720 --> 00:38:59,119
a valid message is accompanied by our

1050
00:38:59,119 --> 00:39:00,960
many signatures

1051
00:39:00,960 --> 00:39:02,960
if it does so it will add its own

1052
00:39:02,960 --> 00:39:04,640
signature to

1053
00:39:04,640 --> 00:39:07,119
a set of signatures that it needs to

1054
00:39:07,119 --> 00:39:09,839
propagate to all other parties

1055
00:39:09,839 --> 00:39:11,920
and in the second stage it will use

1056
00:39:11,920 --> 00:39:13,839
converge the idea of converge to

1057
00:39:13,839 --> 00:39:15,599
propagate this set of signatures to all

1058
00:39:15,599 --> 00:39:17,119
other parties

1059
00:39:17,119 --> 00:39:19,520
therefore after this stage all other

1060
00:39:19,520 --> 00:39:21,119
parties will receive the same signatures

1061
00:39:21,119 --> 00:39:23,520
that this party has observed and can

1062
00:39:23,520 --> 00:39:26,079
also decide whether a message is

1063
00:39:26,079 --> 00:39:28,400
valid or not in the next round

1064
00:39:28,400 --> 00:39:31,760
this very simple protocol uh achieves

1065
00:39:31,760 --> 00:39:34,000
an improved communication complexity the

1066
00:39:34,000 --> 00:39:35,359
reason for that is the following we can

1067
00:39:35,359 --> 00:39:36,720
think about it

1068
00:39:36,720 --> 00:39:39,040
so we have all order of n many rounds

1069
00:39:39,040 --> 00:39:41,440
and each round calls converts

1070
00:39:41,440 --> 00:39:43,599
the the total amount of messages that

1071
00:39:43,599 --> 00:39:45,280
the apartment need to propagate through

1072
00:39:45,280 --> 00:39:48,320
converge is order of n squared

1073
00:39:48,320 --> 00:39:50,079
therefore we would have

1074
00:39:50,079 --> 00:39:52,320
n parties propagating

1075
00:39:52,320 --> 00:39:54,079
increased amount of communication over a

1076
00:39:54,079 --> 00:39:55,280
third

1077
00:39:55,280 --> 00:39:56,800
per party

1078
00:39:56,800 --> 00:39:58,720
instead of doing that what we achieve in

1079
00:39:58,720 --> 00:40:01,200
our protocol is that we minimize the

1080
00:40:01,200 --> 00:40:03,599
amount of times a party will propagate

1081
00:40:03,599 --> 00:40:06,240
the same signature therefore

1082
00:40:06,240 --> 00:40:08,319
we make it constant and therefore we

1083
00:40:08,319 --> 00:40:10,800
achieve improved communication of

1084
00:40:10,800 --> 00:40:12,800
all vancouvers which is if you think

1085
00:40:12,800 --> 00:40:14,560
about it it's amortized over and spared

1086
00:40:14,560 --> 00:40:17,200
per broadcast

1087
00:40:17,200 --> 00:40:18,160
so

1088
00:40:18,160 --> 00:40:19,359
what we basically achieve is

1089
00:40:19,359 --> 00:40:21,359
authenticated parallel broadcast again

1090
00:40:21,359 --> 00:40:23,280
for any fraction of adaptive corruptions

1091
00:40:23,280 --> 00:40:25,920
this time it's adaptive

1092
00:40:25,920 --> 00:40:27,520
the number of rounds is over and logan

1093
00:40:27,520 --> 00:40:28,880
so we have a slight increase in the

1094
00:40:28,880 --> 00:40:30,560
number of rounds

1095
00:40:30,560 --> 00:40:32,079
again we only use only bulletin board

1096
00:40:32,079 --> 00:40:33,359
bki

1097
00:40:33,359 --> 00:40:35,680
and the total communication is as we

1098
00:40:35,680 --> 00:40:38,000
said oven cubed which is amortized over

1099
00:40:38,000 --> 00:40:40,000
spared

1100
00:40:40,000 --> 00:40:42,560
similarly we have another result uh in

1101
00:40:42,560 --> 00:40:44,400
the trusted setting

1102
00:40:44,400 --> 00:40:47,440
so for the trusted pvc uh we modified a

1103
00:40:47,440 --> 00:40:49,119
single sender broadcast protocol by

1104
00:40:49,119 --> 00:40:53,280
chanatal with a pair of pkc of 2020.

1105
00:40:53,280 --> 00:40:55,359
this protocol is a committee-based due

1106
00:40:55,359 --> 00:40:57,200
to the lack of time i will not go into

1107
00:40:57,200 --> 00:40:59,599
many details with this protocol

1108
00:40:59,599 --> 00:41:02,160
however but with the basic idea behind

1109
00:41:02,160 --> 00:41:04,160
it is that in every round

1110
00:41:04,160 --> 00:41:06,720
when we need message propagation

1111
00:41:06,720 --> 00:41:07,760
um

1112
00:41:07,760 --> 00:41:09,680
we instead of sending to everybody we

1113
00:41:09,680 --> 00:41:12,319
use converge

1114
00:41:12,319 --> 00:41:14,079
so this protocol achieves again

1115
00:41:14,079 --> 00:41:15,920
authenticated parallel broadcast

1116
00:41:15,920 --> 00:41:17,920
for any fraction of adaptive corruptions

1117
00:41:17,920 --> 00:41:20,319
is also adaptively secure it's

1118
00:41:20,319 --> 00:41:22,400
randomized and takes all kappa times

1119
00:41:22,400 --> 00:41:24,240
login rounds where kappa is the security

1120
00:41:24,240 --> 00:41:25,440
parameter

1121
00:41:25,440 --> 00:41:29,040
and however it assumes trusted pki

1122
00:41:29,040 --> 00:41:30,640
and the total communication is even more

1123
00:41:30,640 --> 00:41:32,800
improved it's oven squared which means

1124
00:41:32,800 --> 00:41:34,960
of and amortized

1125
00:41:34,960 --> 00:41:37,119
and we can compare our protocols to the

1126
00:41:37,119 --> 00:41:39,040
state of vr

1127
00:41:39,040 --> 00:41:40,720
we can see that in the bulletin board

1128
00:41:40,720 --> 00:41:42,240
settings

1129
00:41:42,240 --> 00:41:43,920
all protocols in the same setting

1130
00:41:43,920 --> 00:41:45,839
meaning dollar strong basically because

1131
00:41:45,839 --> 00:41:48,000
it's the only one that takes up to as

1132
00:41:48,000 --> 00:41:49,520
many corruptions

1133
00:41:49,520 --> 00:41:52,480
and it's in the bulletin board

1134
00:41:52,480 --> 00:41:54,880
all protocols fair far worse and

1135
00:41:54,880 --> 00:41:56,960
actually our bull team

1136
00:41:56,960 --> 00:41:58,560
broadcast protocol is even improved in

1137
00:41:58,560 --> 00:42:01,440
comparison to our single sender protocol

1138
00:42:01,440 --> 00:42:03,359
because it achieves adaptively secure

1139
00:42:03,359 --> 00:42:05,760
adapter security

1140
00:42:05,760 --> 00:42:08,560
and also in the trusted setup we improve

1141
00:42:08,560 --> 00:42:10,240
the amortized complexity in comparison

1142
00:42:10,240 --> 00:42:13,280
to the channel protocol by a factor of n

1143
00:42:13,280 --> 00:42:15,040
therefore our contribution from this

1144
00:42:15,040 --> 00:42:17,520
work include

1145
00:42:17,520 --> 00:42:19,359
gossiping introducing gossiping and

1146
00:42:19,359 --> 00:42:21,920
converts and three state-of-the-art of

1147
00:42:21,920 --> 00:42:23,520
the art protocols

1148
00:42:23,520 --> 00:42:26,000
a power broadcast protocol which

1149
00:42:26,000 --> 00:42:27,440
achieves

1150
00:42:27,440 --> 00:42:30,240
quadratic complexity using trusted pki

1151
00:42:30,240 --> 00:42:32,560
and is secure against an adaptive

1152
00:42:32,560 --> 00:42:34,800
adversary we can corrupt up to any

1153
00:42:34,800 --> 00:42:36,800
fraction of parties

1154
00:42:36,800 --> 00:42:39,359
another part is protocol which uses a

1155
00:42:39,359 --> 00:42:41,680
bulletin board pki and is again secured

1156
00:42:41,680 --> 00:42:43,040
against an adaptive adversary and

1157
00:42:43,040 --> 00:42:44,960
achieves a cubic communication

1158
00:42:44,960 --> 00:42:46,400
complexity

1159
00:42:46,400 --> 00:42:48,079
and the single center broadcast protocol

1160
00:42:48,079 --> 00:42:50,240
in the bulletin board setting but only

1161
00:42:50,240 --> 00:42:52,640
against the static adversary you can

1162
00:42:52,640 --> 00:42:56,240
corrupt up to as many parties again

1163
00:42:56,240 --> 00:42:59,720
thank you very much

1164
00:43:03,359 --> 00:43:06,799
thank you euros questions

1165
00:43:07,839 --> 00:43:10,960
hello thank you for the talk

1166
00:43:10,960 --> 00:43:13,760
a question about the big o notation

1167
00:43:13,760 --> 00:43:15,520
do you have an idea

1168
00:43:15,520 --> 00:43:17,760
uh on how many parts

1169
00:43:17,760 --> 00:43:19,680
starting how many on on how many parties

1170
00:43:19,680 --> 00:43:21,440
this becomes competitive

1171
00:43:21,440 --> 00:43:23,680
compared with other programs for example

1172
00:43:23,680 --> 00:43:25,920
let's say if you have 16 parties would

1173
00:43:25,920 --> 00:43:27,599
this already be

1174
00:43:27,599 --> 00:43:30,800
that is a good question uh no unless

1175
00:43:30,800 --> 00:43:33,680
when there is a small amount of parties

1176
00:43:33,680 --> 00:43:35,599
it is if you think about let's say the

1177
00:43:35,599 --> 00:43:37,440
specific example that you give we have

1178
00:43:37,440 --> 00:43:39,760
let's say 16 parties

1179
00:43:39,760 --> 00:43:41,280
and there is an adaptive address you can

1180
00:43:41,280 --> 00:43:42,560
corrupt dishonest majority things you

1181
00:43:42,560 --> 00:43:44,880
can have let's say 10 of them

1182
00:43:44,880 --> 00:43:46,319
there are already very few honest

1183
00:43:46,319 --> 00:43:48,480
parties

1184
00:43:48,480 --> 00:43:50,240
to communicate between each other

1185
00:43:50,240 --> 00:43:52,800
so if you just send

1186
00:43:52,800 --> 00:43:54,240
a logarithmic amount of information

1187
00:43:54,240 --> 00:43:56,640
would be very hard to even hit an honest

1188
00:43:56,640 --> 00:43:59,680
party so actually because of this our

1189
00:43:59,680 --> 00:44:01,520
protocol um

1190
00:44:01,520 --> 00:44:04,000
as it goes closer to a fewer amount of

1191
00:44:04,000 --> 00:44:05,760
honest parties it goes closer to the

1192
00:44:05,760 --> 00:44:08,400
dollar strong actually so there is a

1193
00:44:08,400 --> 00:44:10,880
factor over there which depends on the

1194
00:44:10,880 --> 00:44:13,119
fraction of uh dishonest parties and the

1195
00:44:13,119 --> 00:44:15,680
amount of total amount of parties uh i

1196
00:44:15,680 --> 00:44:18,960
think right now the protocol is

1197
00:44:18,960 --> 00:44:20,480
does not operate that well in practical

1198
00:44:20,480 --> 00:44:22,640
settings and that's actually a very good

1199
00:44:22,640 --> 00:44:25,599
question for further work work

1200
00:44:25,599 --> 00:44:28,000
so no i would say that we need a much

1201
00:44:28,000 --> 00:44:30,560
larger amount of parties to operate

1202
00:44:30,560 --> 00:44:32,799
better

1203
00:44:34,240 --> 00:44:36,960
all right thanks for the talk uh

1204
00:44:36,960 --> 00:44:38,560
i wanted to ask

1205
00:44:38,560 --> 00:44:40,240
why does the

1206
00:44:40,240 --> 00:44:42,079
parallel broadcast

1207
00:44:42,079 --> 00:44:44,720
uh work against adaptive corruptions

1208
00:44:44,720 --> 00:44:48,079
while the original protocol or like the

1209
00:44:48,079 --> 00:44:49,599
single broadcast seemed to only work

1210
00:44:49,599 --> 00:44:52,400
against uh static corruptions yeah sure

1211
00:44:52,400 --> 00:44:55,599
i can explain it further so in a single

1212
00:44:55,599 --> 00:44:58,079
in a single broadcast

1213
00:44:58,079 --> 00:44:59,920
an adversary can observe the

1214
00:44:59,920 --> 00:45:01,680
communication pattern between parties

1215
00:45:01,680 --> 00:45:03,200
and this communication pattern gives you

1216
00:45:03,200 --> 00:45:05,680
information this is because you have

1217
00:45:05,680 --> 00:45:08,880
only one or two messages to propagate

1218
00:45:08,880 --> 00:45:10,560
and therefore at the beginning of

1219
00:45:10,560 --> 00:45:11,920
gossiping

1220
00:45:11,920 --> 00:45:14,240
you will propagate these messages to at

1221
00:45:14,240 --> 00:45:16,880
most all vlogging many parties let's say

1222
00:45:16,880 --> 00:45:18,720
the adversary can observe which parties

1223
00:45:18,720 --> 00:45:21,200
receive messages corrupt them and

1224
00:45:21,200 --> 00:45:22,560
therefore stop the propagation of a

1225
00:45:22,560 --> 00:45:23,920
message

1226
00:45:23,920 --> 00:45:25,520
in the parallel setting because you have

1227
00:45:25,520 --> 00:45:27,839
many more messages propagate you can use

1228
00:45:27,839 --> 00:45:29,760
these messages and combine them to hide

1229
00:45:29,760 --> 00:45:32,480
the communication pattern uh therefore

1230
00:45:32,480 --> 00:45:34,400
an adversary will observe as we

1231
00:45:34,400 --> 00:45:36,000
explained in the propagate process that

1232
00:45:36,000 --> 00:45:37,680
person will observe

1233
00:45:37,680 --> 00:45:39,599
every party receiving

1234
00:45:39,599 --> 00:45:42,800
like i i am to send to to at least round

1235
00:45:42,800 --> 00:45:44,400
i will send i eventually will send a

1236
00:45:44,400 --> 00:45:46,560
list to all parties

1237
00:45:46,560 --> 00:45:48,480
and this list could be of same size

1238
00:45:48,480 --> 00:45:51,440
constant size but of the same size

1239
00:45:51,440 --> 00:45:52,800
therefore the adversary even if it's

1240
00:45:52,800 --> 00:45:54,960
adaptive will observe a communication

1241
00:45:54,960 --> 00:45:56,640
pattern that's indistinguishable between

1242
00:45:56,640 --> 00:45:59,119
parties and therefore it cannot decide

1243
00:45:59,119 --> 00:46:00,880
any better than randomly

1244
00:46:00,880 --> 00:46:02,560
this reason the reason behind this is

1245
00:46:02,560 --> 00:46:04,000
that in parallel broadcast inherently

1246
00:46:04,000 --> 00:46:05,839
you have more information to to

1247
00:46:05,839 --> 00:46:07,440
propagate and therefore you can use this

1248
00:46:07,440 --> 00:46:10,240
information uh to improve in the in

1249
00:46:10,240 --> 00:46:12,240
terms of security

1250
00:46:12,240 --> 00:46:15,839
okay thanks that makes sense

1251
00:46:15,920 --> 00:46:18,800
any other questions

1252
00:46:19,119 --> 00:46:20,960
okay well i think you're

1253
00:46:20,960 --> 00:46:22,480
you're uh standing between these good

1254
00:46:22,480 --> 00:46:24,560
people in their lunch so we'll thank you

1255
00:46:24,560 --> 00:46:27,560
again

1256
00:46:32,160 --> 00:46:34,240
you

