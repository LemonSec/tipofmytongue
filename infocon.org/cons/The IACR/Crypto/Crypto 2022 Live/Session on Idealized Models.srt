1
00:00:00,080 --> 00:00:02,720
idealized models um so our first speaker

2
00:00:02,720 --> 00:00:04,400
of the session will be

3
00:00:04,400 --> 00:00:07,040
uh mark zandry uh he will be talking

4
00:00:07,040 --> 00:00:11,200
about augmented random oracles all right

5
00:00:14,080 --> 00:00:15,759
all right so today i'll be talking about

6
00:00:15,759 --> 00:00:18,400
a new idealized model which refines the

7
00:00:18,400 --> 00:00:20,160
random oracle model

8
00:00:20,160 --> 00:00:22,480
um in a way that tries to avoid

9
00:00:22,480 --> 00:00:25,760
uninstantiability results

10
00:00:25,760 --> 00:00:28,160
uh so imagine we have a cryptosystem

11
00:00:28,160 --> 00:00:30,560
that makes use of a hash function h

12
00:00:30,560 --> 00:00:32,960
unfortunately no matter how hard we try

13
00:00:32,960 --> 00:00:34,960
we don't know how to prove security of

14
00:00:34,960 --> 00:00:36,960
the cryptosystem under any

15
00:00:36,960 --> 00:00:38,879
typical assumption about h such as

16
00:00:38,879 --> 00:00:40,480
collision resistance

17
00:00:40,480 --> 00:00:42,160
maybe there is even some sort of

18
00:00:42,160 --> 00:00:44,480
impossibility demonstrating that such a

19
00:00:44,480 --> 00:00:46,399
proof is impossible

20
00:00:46,399 --> 00:00:49,039
so what do we do

21
00:00:49,039 --> 00:00:52,000
uh sorry um so one proposal by bilaria

22
00:00:52,000 --> 00:00:54,079
and ragaway is the famous random oracle

23
00:00:54,079 --> 00:00:55,199
model

24
00:00:55,199 --> 00:00:57,440
um here they observe that most crypto

25
00:00:57,440 --> 00:01:01,280
systems only make black box use of the

26
00:01:01,280 --> 00:01:03,680
hash function and also you know most of

27
00:01:03,680 --> 00:01:04,879
the practical attacks we have on

28
00:01:04,879 --> 00:01:06,799
cryptosystems make black box use of the

29
00:01:06,799 --> 00:01:09,200
hash function so why not abstract that

30
00:01:09,200 --> 00:01:10,640
out and

31
00:01:10,640 --> 00:01:14,880
just force the adversary to only uh make

32
00:01:14,880 --> 00:01:17,200
black box use of the hash function and

33
00:01:17,200 --> 00:01:20,000
the way they formalize this is through a

34
00:01:20,000 --> 00:01:21,920
the random oracle model so

35
00:01:21,920 --> 00:01:23,840
instead of a hash function you have a

36
00:01:23,840 --> 00:01:26,159
truly random function on some domain and

37
00:01:26,159 --> 00:01:28,479
range and now the cryptosystem and the

38
00:01:28,479 --> 00:01:30,720
adversary both just make queries to the

39
00:01:30,720 --> 00:01:32,960
hash function

40
00:01:32,960 --> 00:01:36,640
instead of evaluating it for themselves

41
00:01:36,960 --> 00:01:38,560
right

42
00:01:38,560 --> 00:01:41,200
so the idea is that one proves security

43
00:01:41,200 --> 00:01:42,159
in this

44
00:01:42,159 --> 00:01:44,240
model this idealized model for the hash

45
00:01:44,240 --> 00:01:45,520
function

46
00:01:45,520 --> 00:01:46,960
and then we

47
00:01:46,960 --> 00:01:48,799
just hope that when we actually

48
00:01:48,799 --> 00:01:50,880
instantiate the hash function with the

49
00:01:50,880 --> 00:01:52,079
when we instantiate the random oracle

50
00:01:52,079 --> 00:01:53,360
with a concrete hash function such as

51
00:01:53,360 --> 00:01:58,479
sha2 the hope is that security remains

52
00:02:00,560 --> 00:02:02,320
unfortunately kennedy goldrick and

53
00:02:02,320 --> 00:02:03,840
halevi

54
00:02:03,840 --> 00:02:05,119
show what is now known as an

55
00:02:05,119 --> 00:02:07,520
uninstantiability result so what they

56
00:02:07,520 --> 00:02:11,360
show is a scheme such that if you

57
00:02:11,360 --> 00:02:13,200
have the hash function actually be a

58
00:02:13,200 --> 00:02:15,680
random oracle the scheme is secure so

59
00:02:15,680 --> 00:02:18,400
it's secure in the random oracle model

60
00:02:18,400 --> 00:02:19,520
however

61
00:02:19,520 --> 00:02:21,360
no matter how you try to instantiate the

62
00:02:21,360 --> 00:02:22,720
hash function if you instantiate with

63
00:02:22,720 --> 00:02:25,440
any concrete code

64
00:02:25,440 --> 00:02:28,879
suddenly the scheme is insecure

65
00:02:29,040 --> 00:02:30,400
and so this shows that in general

66
00:02:30,400 --> 00:02:32,480
there's no hope of instantiating the

67
00:02:32,480 --> 00:02:34,000
random oracle with any concrete hash

68
00:02:34,000 --> 00:02:36,080
function the r the random oracle model

69
00:02:36,080 --> 00:02:38,400
heuristic must sometimes fail

70
00:02:38,400 --> 00:02:39,840
um and since their work there have been

71
00:02:39,840 --> 00:02:42,160
a number of additional uninstantiability

72
00:02:42,160 --> 00:02:44,000
results proven throughout the the

73
00:02:44,000 --> 00:02:46,640
literature um showing a variety of

74
00:02:46,640 --> 00:02:49,360
protocols uh that are insecure once you

75
00:02:49,360 --> 00:02:51,280
instantiate them

76
00:02:51,280 --> 00:02:53,920
um nevertheless despite these works the

77
00:02:53,920 --> 00:02:55,760
random oracle model remains widely used

78
00:02:55,760 --> 00:02:57,680
in practice and in many cases it is the

79
00:02:57,680 --> 00:02:59,280
only way we know how to justify the

80
00:02:59,280 --> 00:03:03,440
security of practical cryptosystems

81
00:03:03,680 --> 00:03:05,280
uh so this brings us to the goal of our

82
00:03:05,280 --> 00:03:06,480
work

83
00:03:06,480 --> 00:03:09,680
which is to define a new model

84
00:03:09,680 --> 00:03:11,120
that somehow avoids these

85
00:03:11,120 --> 00:03:13,120
uninstantiability results while still

86
00:03:13,120 --> 00:03:15,280
being useful still being able to

87
00:03:15,280 --> 00:03:16,800
uh prove the security of crypto

88
00:03:16,800 --> 00:03:19,440
cryptosystems beyond what we can do in

89
00:03:19,440 --> 00:03:22,560
the standard model

90
00:03:22,800 --> 00:03:25,920
so to motivate our solution

91
00:03:25,920 --> 00:03:28,400
uh let's use the encrypt with hash

92
00:03:28,400 --> 00:03:30,840
transform as a case

93
00:03:30,840 --> 00:03:33,680
study so the this transform was

94
00:03:33,680 --> 00:03:36,000
introduced by belare boldreva and

95
00:03:36,000 --> 00:03:37,040
o'neill

96
00:03:37,040 --> 00:03:39,760
and it's a way to take a probabilistic

97
00:03:39,760 --> 00:03:40,959
encryption scheme and make it

98
00:03:40,959 --> 00:03:43,760
deterministic so what the

99
00:03:43,760 --> 00:03:46,159
protocol is very simple so you have some

100
00:03:46,159 --> 00:03:48,319
general public key encryption scheme and

101
00:03:48,319 --> 00:03:50,400
now when you want to encrypt a message m

102
00:03:50,400 --> 00:03:52,400
you simply hash the message m to get

103
00:03:52,400 --> 00:03:54,400
your randomness and okay you you also

104
00:03:54,400 --> 00:03:57,760
hash uh you hash m concat public key to

105
00:03:57,760 --> 00:04:00,400
give you domain separation

106
00:04:00,400 --> 00:04:01,560
so you derive your randomness

107
00:04:01,560 --> 00:04:03,519
deterministically through some hash

108
00:04:03,519 --> 00:04:05,519
function and then encrypt using those

109
00:04:05,519 --> 00:04:08,080
random coins

110
00:04:08,080 --> 00:04:10,879
right so i won't define security here

111
00:04:10,879 --> 00:04:12,560
because it's deterministic we can't get

112
00:04:12,560 --> 00:04:15,360
the usual semantic security notion

113
00:04:15,360 --> 00:04:17,358
um but there is a there is a nice

114
00:04:17,358 --> 00:04:19,040
security definition

115
00:04:19,040 --> 00:04:22,240
um and what uh this this work shows is

116
00:04:22,240 --> 00:04:24,720
that if the random if the hash function

117
00:04:24,720 --> 00:04:27,040
is actually modeled as a random oracle

118
00:04:27,040 --> 00:04:29,759
then encrypt with hash is secure

119
00:04:29,759 --> 00:04:33,520
according to this definition

120
00:04:35,199 --> 00:04:38,160
okay um but unfortunately it turns out

121
00:04:38,160 --> 00:04:40,639
that in general encrypt with hash is

122
00:04:40,639 --> 00:04:42,479
uninstantiable

123
00:04:42,479 --> 00:04:45,120
in the following sense so there is

124
00:04:45,120 --> 00:04:47,199
under a suitable assumption

125
00:04:47,199 --> 00:04:48,880
there is a

126
00:04:48,880 --> 00:04:51,919
cpa secure public key encryption scheme

127
00:04:51,919 --> 00:04:54,400
such that no matter what

128
00:04:54,400 --> 00:04:55,759
hash function

129
00:04:55,759 --> 00:04:58,160
you use to instantiate the encrypt with

130
00:04:58,160 --> 00:05:00,880
hash transform the result is an insecure

131
00:05:00,880 --> 00:05:03,199
protocol so we we know it's secure on

132
00:05:03,199 --> 00:05:05,600
the random oracle model by what bbo

133
00:05:05,600 --> 00:05:06,639
proved

134
00:05:06,639 --> 00:05:08,880
but now when we instantiate it with any

135
00:05:08,880 --> 00:05:12,479
concrete hash function becomes insecure

136
00:05:12,479 --> 00:05:14,960
okay so let's just take a moment to see

137
00:05:14,960 --> 00:05:17,280
how this uh impossibility or

138
00:05:17,280 --> 00:05:19,520
uninstantiability works

139
00:05:19,520 --> 00:05:22,320
so the we're going to start with some

140
00:05:22,320 --> 00:05:24,560
public key encryption scheme

141
00:05:24,560 --> 00:05:27,360
it may or may not be instantiable with

142
00:05:27,360 --> 00:05:29,680
with the hash function or it may or may

143
00:05:29,680 --> 00:05:31,120
not give you a secure transform if you

144
00:05:31,120 --> 00:05:33,680
reply to apply encrypt with hash to this

145
00:05:33,680 --> 00:05:35,759
public encryption scheme but we're going

146
00:05:35,759 --> 00:05:38,720
to do is modify it um

147
00:05:38,720 --> 00:05:40,880
to get a new public encryption scheme

148
00:05:40,880 --> 00:05:43,440
that will be insecure when you try to

149
00:05:43,440 --> 00:05:47,199
instantiate the encrypted hash transform

150
00:05:47,199 --> 00:05:49,039
so what happens so to encrypt the

151
00:05:49,039 --> 00:05:50,160
message m

152
00:05:50,160 --> 00:05:52,720
you encrypt under this starting public

153
00:05:52,720 --> 00:05:55,199
key encryption scheme um

154
00:05:55,199 --> 00:05:56,240
prime

155
00:05:56,240 --> 00:05:57,759
and then you additionally supply this

156
00:05:57,759 --> 00:05:59,600
program piece of mr

157
00:05:59,600 --> 00:06:00,880
and this piece of mr is what you're

158
00:06:00,880 --> 00:06:02,560
going to use to actually break the

159
00:06:02,560 --> 00:06:04,639
security of the transform

160
00:06:04,639 --> 00:06:06,720
so what does this program do it takes as

161
00:06:06,720 --> 00:06:09,840
input code for some function

162
00:06:09,840 --> 00:06:11,759
and it will evaluate the function on the

163
00:06:11,759 --> 00:06:13,199
so it'll have the message and randomness

164
00:06:13,199 --> 00:06:14,560
hardcoded

165
00:06:14,560 --> 00:06:16,319
it will evaluate the function on the

166
00:06:16,319 --> 00:06:17,919
message and see if it equals the random

167
00:06:17,919 --> 00:06:18,960
coins

168
00:06:18,960 --> 00:06:20,639
if it does then this function will just

169
00:06:20,639 --> 00:06:23,120
output m and otherwise it will reject

170
00:06:23,120 --> 00:06:25,280
and output this uh you know special bot

171
00:06:25,280 --> 00:06:27,599
symbol

172
00:06:28,000 --> 00:06:29,360
all right so

173
00:06:29,360 --> 00:06:30,800
the insecurity the encrypted hash

174
00:06:30,800 --> 00:06:33,199
transform here is trivial right you just

175
00:06:33,199 --> 00:06:35,680
feed the code of whatever hash function

176
00:06:35,680 --> 00:06:37,039
you're using to instantiate the

177
00:06:37,039 --> 00:06:38,160
transform

178
00:06:38,160 --> 00:06:40,319
into the program that's contained in the

179
00:06:40,319 --> 00:06:41,600
ciphertext

180
00:06:41,600 --> 00:06:43,759
and just by the functionality of the

181
00:06:43,759 --> 00:06:45,280
program it will output your original

182
00:06:45,280 --> 00:06:49,360
message completely breaking security

183
00:06:49,360 --> 00:06:51,599
um okay but we we actually need a secure

184
00:06:51,599 --> 00:06:53,039
public key encryption scheme in order to

185
00:06:53,039 --> 00:06:54,800
get an uninstantiability result because

186
00:06:54,800 --> 00:06:56,560
if we have starting from an insecure

187
00:06:56,560 --> 00:06:58,960
public encryption scheme is meaningless

188
00:06:58,960 --> 00:07:00,560
um and the problem is that this

189
00:07:00,560 --> 00:07:03,199
modification to our original public

190
00:07:03,199 --> 00:07:04,400
encryption scheme actually completely

191
00:07:04,400 --> 00:07:06,880
breaks security because this program has

192
00:07:06,880 --> 00:07:10,880
um just hard coded in it

193
00:07:10,960 --> 00:07:13,039
uh so what actually happens is you

194
00:07:13,039 --> 00:07:16,240
obfuscate it using um you know some sort

195
00:07:16,240 --> 00:07:18,639
of obfuscation scheme

196
00:07:18,639 --> 00:07:20,319
and um

197
00:07:20,319 --> 00:07:22,560
and once you obfuscate it

198
00:07:22,560 --> 00:07:23,440
it

199
00:07:23,440 --> 00:07:25,360
at least intuitively if you're hiding

200
00:07:25,360 --> 00:07:27,280
all the implementation details of this

201
00:07:27,280 --> 00:07:29,520
program and only sort of able to query

202
00:07:29,520 --> 00:07:31,840
the program on various inputs

203
00:07:31,840 --> 00:07:33,599
the the attacker will never be able to

204
00:07:33,599 --> 00:07:36,240
actually query the program on any

205
00:07:36,240 --> 00:07:38,400
message that causes or any code that

206
00:07:38,400 --> 00:07:40,240
causes the function to do anything other

207
00:07:40,240 --> 00:07:42,160
than return bots so this is just an

208
00:07:42,160 --> 00:07:45,120
intuition um the authors you know

209
00:07:45,120 --> 00:07:46,400
actually formally prove this under

210
00:07:46,400 --> 00:07:48,160
indistinguishability obfuscation which

211
00:07:48,160 --> 00:07:49,440
is the

212
00:07:49,440 --> 00:07:50,639
kind of the accepted notion of

213
00:07:50,639 --> 00:07:54,240
obfuscation that we use these days

214
00:07:54,639 --> 00:07:58,319
um okay so so the the the takeaway from

215
00:07:58,319 --> 00:08:00,319
this uh is that roman

216
00:08:00,319 --> 00:08:02,080
uninstantiabilities

217
00:08:02,080 --> 00:08:04,560
what they use is they use that the

218
00:08:04,560 --> 00:08:06,319
concrete hash function that you're

219
00:08:06,319 --> 00:08:08,800
trying to instantiate with has code

220
00:08:08,800 --> 00:08:11,440
um and random oracles do not right so we

221
00:08:11,440 --> 00:08:13,599
need that the hash function has code in

222
00:08:13,599 --> 00:08:16,319
order to create this program piece of mr

223
00:08:16,319 --> 00:08:19,120
that we then obfuscate in order to get

224
00:08:19,120 --> 00:08:21,520
our our counter example

225
00:08:21,520 --> 00:08:23,039
whereas random articles have no code

226
00:08:23,039 --> 00:08:26,720
there's no way to have a program that uh

227
00:08:26,720 --> 00:08:29,440
sort of implements the code for a random

228
00:08:29,440 --> 00:08:31,599
oracle because there is no code

229
00:08:31,599 --> 00:08:35,360
um however the the key point is that

230
00:08:35,360 --> 00:08:36,880
the uninstantiability doesn't actually

231
00:08:36,880 --> 00:08:39,120
so much care about what the code is all

232
00:08:39,120 --> 00:08:41,440
it cares about is that it exists so that

233
00:08:41,440 --> 00:08:43,279
you can say create a program that has

234
00:08:43,279 --> 00:08:45,760
the code in it and then feed it into

235
00:08:45,760 --> 00:08:48,800
a office skater

236
00:08:49,040 --> 00:08:51,040
so what our goal is going to be is to

237
00:08:51,040 --> 00:08:53,399
try to capture this kind of

238
00:08:53,399 --> 00:08:55,200
uninstantiability and so what we're

239
00:08:55,200 --> 00:08:56,959
going to do is we're going to design a

240
00:08:56,959 --> 00:08:58,080
model

241
00:08:58,080 --> 00:08:59,200
where

242
00:08:59,200 --> 00:09:00,720
a random oracle

243
00:09:00,720 --> 00:09:02,959
actually does have code namely the

244
00:09:02,959 --> 00:09:05,360
instruction to make a query

245
00:09:05,360 --> 00:09:06,880
now the problem is that you know for

246
00:09:06,880 --> 00:09:08,959
example our our indistinguishability

247
00:09:08,959 --> 00:09:11,760
obfuscators they we they don't work for

248
00:09:11,760 --> 00:09:12,800
for

249
00:09:12,800 --> 00:09:14,240
functions that make queries they only

250
00:09:14,240 --> 00:09:16,399
work for you know functions that are

251
00:09:16,399 --> 00:09:18,320
that are concrete code what we're going

252
00:09:18,320 --> 00:09:19,760
to do is we're going to design a model

253
00:09:19,760 --> 00:09:22,080
that basically gives us obfuscation for

254
00:09:22,080 --> 00:09:24,560
oracle aided programs and then this will

255
00:09:24,560 --> 00:09:26,560
allow us to

256
00:09:26,560 --> 00:09:28,240
actually carry out the understandability

257
00:09:28,240 --> 00:09:31,040
in our model

258
00:09:31,200 --> 00:09:33,920
okay so our inspiration is going to be

259
00:09:33,920 --> 00:09:38,800
this ashrae segev model for obfuscation

260
00:09:39,040 --> 00:09:40,160
they came up with this model for

261
00:09:40,160 --> 00:09:41,920
entirely different reasons but it'll be

262
00:09:41,920 --> 00:09:43,920
a useful starting point

263
00:09:43,920 --> 00:09:46,000
um so what they do is they they start

264
00:09:46,000 --> 00:09:48,080
out with a random oracle and then they

265
00:09:48,080 --> 00:09:50,800
augment it with another oracle that

266
00:09:50,800 --> 00:09:54,399
implements an obfuscation scheme

267
00:09:54,399 --> 00:09:55,680
so there's going to be a couple parts to

268
00:09:55,680 --> 00:09:58,640
this oracle so one is going to be

269
00:09:58,640 --> 00:10:01,279
a random permutation sigma

270
00:10:01,279 --> 00:10:02,959
and think of this permutation sigma as

271
00:10:02,959 --> 00:10:06,240
the the procedure to obfuscate code so

272
00:10:06,240 --> 00:10:08,000
it's going to take as input the

273
00:10:08,000 --> 00:10:10,480
description of some program p

274
00:10:10,480 --> 00:10:12,079
as well as some random coins so it can

275
00:10:12,079 --> 00:10:14,560
be a probabilistic obfuscator

276
00:10:14,560 --> 00:10:17,040
and we'll interpret the output the

277
00:10:17,040 --> 00:10:18,240
output's just a string but we'll

278
00:10:18,240 --> 00:10:20,160
interpret it as some obfuscated code p

279
00:10:20,160 --> 00:10:22,480
prime

280
00:10:23,279 --> 00:10:24,800
and then we need to allow you to

281
00:10:24,800 --> 00:10:27,200
actually evaluate the obfuscated program

282
00:10:27,200 --> 00:10:30,000
so we'll have another eval oracle

283
00:10:30,000 --> 00:10:32,000
and what it does is it'll take as input

284
00:10:32,000 --> 00:10:34,320
this bit string p prime representing

285
00:10:34,320 --> 00:10:36,079
some obfuscated program

286
00:10:36,079 --> 00:10:37,600
an input x

287
00:10:37,600 --> 00:10:39,120
and we'll

288
00:10:39,120 --> 00:10:41,360
actually evaluate the program for us so

289
00:10:41,360 --> 00:10:44,399
it'll it'll undo the permutation to

290
00:10:44,399 --> 00:10:46,880
recover the original program code p and

291
00:10:46,880 --> 00:10:50,480
then it will just evaluate p on x

292
00:10:50,480 --> 00:10:53,519
and the crucial point here is that

293
00:10:53,519 --> 00:10:57,040
at this point we can actually make eval

294
00:10:57,040 --> 00:10:58,959
or the whole obfuscation we can actually

295
00:10:58,959 --> 00:11:01,760
have it work on oracle aided programs on

296
00:11:01,760 --> 00:11:03,760
programs that make oracle queries

297
00:11:03,760 --> 00:11:06,079
um so the only issue is that we need

298
00:11:06,079 --> 00:11:07,600
eval to be able to make queries to the

299
00:11:07,600 --> 00:11:08,880
random oracle

300
00:11:08,880 --> 00:11:11,120
and so that's that's exactly um what

301
00:11:11,120 --> 00:11:12,079
they do

302
00:11:12,079 --> 00:11:14,640
so if we if the input code is a oracle

303
00:11:14,640 --> 00:11:16,240
related program that makes queries now

304
00:11:16,240 --> 00:11:18,160
the eval function after it recovers the

305
00:11:18,160 --> 00:11:20,399
original program code will actually you

306
00:11:20,399 --> 00:11:22,240
know make those queries to the oracle

307
00:11:22,240 --> 00:11:25,279
when it evaluates

308
00:11:25,360 --> 00:11:28,160
all right now the reason that um ashraf

309
00:11:28,160 --> 00:11:29,519
and sega have introduced this model was

310
00:11:29,519 --> 00:11:30,959
they were trying to study the limits of

311
00:11:30,959 --> 00:11:32,320
obfuscation and prove that you know

312
00:11:32,320 --> 00:11:34,320
obfuscation can't be used for certain

313
00:11:34,320 --> 00:11:35,920
applications

314
00:11:35,920 --> 00:11:36,959
um

315
00:11:36,959 --> 00:11:37,839
and

316
00:11:37,839 --> 00:11:39,360
but but nevertheless as i said we're

317
00:11:39,360 --> 00:11:41,279
going to use this model as our starting

318
00:11:41,279 --> 00:11:44,640
point so our initial idea

319
00:11:44,640 --> 00:11:48,320
is to prove security in this as model

320
00:11:48,320 --> 00:11:50,320
instead of the rom so if you if you had

321
00:11:50,320 --> 00:11:52,480
some crypto system

322
00:11:52,480 --> 00:11:54,079
let's say you could prove it secure in

323
00:11:54,079 --> 00:11:55,519
the random oracle model but you're kind

324
00:11:55,519 --> 00:11:57,279
of concerned that there's a

325
00:11:57,279 --> 00:11:58,639
uninstantiability there might be an

326
00:11:58,639 --> 00:12:00,959
uninstantiability result for it

327
00:12:00,959 --> 00:12:03,120
well what you might do is say well let's

328
00:12:03,120 --> 00:12:05,680
prove security in the in the as model

329
00:12:05,680 --> 00:12:07,440
instead of in the random oracle model so

330
00:12:07,440 --> 00:12:09,600
you prove security in the presence of

331
00:12:09,600 --> 00:12:12,000
the random oracle and this um

332
00:12:12,000 --> 00:12:14,720
this obfuscation article

333
00:12:14,720 --> 00:12:17,920
and what this would show is indeed that

334
00:12:17,920 --> 00:12:21,760
your your protocol is resilient to the

335
00:12:21,760 --> 00:12:22,959
the types of

336
00:12:22,959 --> 00:12:24,560
uninstantiabilities that arise from

337
00:12:24,560 --> 00:12:26,240
obfuscation

338
00:12:26,240 --> 00:12:28,000
because

339
00:12:28,000 --> 00:12:29,519
right because if if you had an

340
00:12:29,519 --> 00:12:31,200
unstability that arose from obfuscation

341
00:12:31,200 --> 00:12:32,720
you could probably implement it in this

342
00:12:32,720 --> 00:12:34,480
model and

343
00:12:34,480 --> 00:12:37,279
well you just proved that you

344
00:12:37,279 --> 00:12:39,120
you you don't have an instantiability in

345
00:12:39,120 --> 00:12:41,200
this model

346
00:12:41,200 --> 00:12:44,000
okay so okay that's a starting point

347
00:12:44,000 --> 00:12:46,639
um however this idea is probably not

348
00:12:46,639 --> 00:12:48,160
sufficient and there's a number of

349
00:12:48,160 --> 00:12:51,360
reasons why so first um

350
00:12:51,360 --> 00:12:52,800
in this as model they made some

351
00:12:52,800 --> 00:12:55,040
non-trivial design choices for their for

352
00:12:55,040 --> 00:12:56,480
their models so they considered

353
00:12:56,480 --> 00:12:58,320
obfuscation for circuits

354
00:12:58,320 --> 00:13:00,320
but you know maybe we have a we could

355
00:13:00,320 --> 00:13:02,720
consider obfuscation for turing machines

356
00:13:02,720 --> 00:13:04,720
we don't know if they necessarily exist

357
00:13:04,720 --> 00:13:06,480
but but they might

358
00:13:06,480 --> 00:13:09,120
and maybe that changes the nature of the

359
00:13:09,120 --> 00:13:10,800
of the problem

360
00:13:10,800 --> 00:13:12,240
um another

361
00:13:12,240 --> 00:13:16,880
um limitation of of the as model is that

362
00:13:16,880 --> 00:13:19,040
they don't allow they allow the programs

363
00:13:19,040 --> 00:13:20,560
to make queries to the random oracle but

364
00:13:20,560 --> 00:13:21,680
they don't allow the program to make

365
00:13:21,680 --> 00:13:24,560
queries to the obfuscation scheme itself

366
00:13:24,560 --> 00:13:25,720
uh but maybe there are

367
00:13:25,720 --> 00:13:28,160
uninstantiabilities where you're you

368
00:13:28,160 --> 00:13:29,680
know obfuscating a program that can

369
00:13:29,680 --> 00:13:32,000
itself make obfuscation queries

370
00:13:32,000 --> 00:13:33,760
and in which case this model wouldn't

371
00:13:33,760 --> 00:13:36,399
capture that

372
00:13:36,480 --> 00:13:38,160
um beyond obfuscation there are a

373
00:13:38,160 --> 00:13:40,959
variety of non-black box techniques that

374
00:13:40,959 --> 00:13:44,560
might be useful for an uninstantiability

375
00:13:44,560 --> 00:13:46,480
um so

376
00:13:46,480 --> 00:13:48,240
um

377
00:13:48,240 --> 00:13:49,760
in the ashrae of segaf paper they

378
00:13:49,760 --> 00:13:51,120
actually specifically mentioned the case

379
00:13:51,120 --> 00:13:53,360
of musics that a lot of obfuscation

380
00:13:53,360 --> 00:13:55,120
techniques use used in six and their

381
00:13:55,120 --> 00:13:57,440
model doesn't have any uh

382
00:13:57,440 --> 00:14:01,360
any way to obfuscate programs that

383
00:14:01,360 --> 00:14:04,000
make use of of nizix in their kind of

384
00:14:04,000 --> 00:14:05,120
model

385
00:14:05,120 --> 00:14:06,639
um

386
00:14:06,639 --> 00:14:08,720
and also if you look at say the the

387
00:14:08,720 --> 00:14:10,240
original uninstantiability for the

388
00:14:10,240 --> 00:14:12,079
random oracle by kennedy at all it

389
00:14:12,079 --> 00:14:13,440
actually didn't use obfuscation at all

390
00:14:13,440 --> 00:14:15,760
it used um macaulay cs proofs which we

391
00:14:15,760 --> 00:14:18,079
can abstract away as snars

392
00:14:18,079 --> 00:14:19,120
um

393
00:14:19,120 --> 00:14:20,639
maybe they're maybe you actually have an

394
00:14:20,639 --> 00:14:22,959
unstability based on fully homomorphic

395
00:14:22,959 --> 00:14:24,959
encryption and i will point out that

396
00:14:24,959 --> 00:14:27,040
actually this is not not crazy so one of

397
00:14:27,040 --> 00:14:28,880
the sort of side contributions of this

398
00:14:28,880 --> 00:14:31,360
work was to improve the assumptions

399
00:14:31,360 --> 00:14:32,880
underlying the encrypt with hash

400
00:14:32,880 --> 00:14:34,399
uninstantiability

401
00:14:34,399 --> 00:14:36,000
um to

402
00:14:36,000 --> 00:14:37,600
fully homophobic encryption and a weak

403
00:14:37,600 --> 00:14:39,199
form of obfuscation called lockable

404
00:14:39,199 --> 00:14:41,279
obfuscation both of these are being

405
00:14:41,279 --> 00:14:44,240
implied by circularly secure lwe so if

406
00:14:44,240 --> 00:14:46,399
you wanted to capture our new

407
00:14:46,399 --> 00:14:48,000
uninstantiability from cryptocache you

408
00:14:48,000 --> 00:14:49,839
would have to have you know both

409
00:14:49,839 --> 00:14:51,760
lockable obfuscation and fully market

410
00:14:51,760 --> 00:14:53,279
encryption

411
00:14:53,279 --> 00:14:55,040
and we can keep going you know maybe

412
00:14:55,040 --> 00:14:56,639
maybe you have an unsustainability based

413
00:14:56,639 --> 00:14:58,800
on mpc for

414
00:14:58,800 --> 00:15:01,680
you know non-black box programs garbled

415
00:15:01,680 --> 00:15:04,560
circuits uh function secret sharing and

416
00:15:04,560 --> 00:15:06,639
worse maybe there's some technique that

417
00:15:06,639 --> 00:15:08,240
we haven't yet discovered yet some

418
00:15:08,240 --> 00:15:10,000
non-black box technique that makes use

419
00:15:10,000 --> 00:15:11,440
of the code of a hash function that

420
00:15:11,440 --> 00:15:13,040
could be used in an instantiability

421
00:15:13,040 --> 00:15:14,880
result that we just haven't even thought

422
00:15:14,880 --> 00:15:16,160
of

423
00:15:16,160 --> 00:15:18,800
and to make things even worse maybe all

424
00:15:18,800 --> 00:15:20,560
these things are being run on programs

425
00:15:20,560 --> 00:15:22,000
they make queries to other ones so you

426
00:15:22,000 --> 00:15:23,839
need these all to sort of like make

427
00:15:23,839 --> 00:15:25,600
queries all to each other and it gets it

428
00:15:25,600 --> 00:15:28,639
gets really messy and good luck actually

429
00:15:28,639 --> 00:15:32,560
you know coming up with a coherent model

430
00:15:33,120 --> 00:15:37,199
okay so what do we do um so here here's

431
00:15:37,199 --> 00:15:38,560
here's going to be our model the

432
00:15:38,560 --> 00:15:40,399
augmented random oracle model and let me

433
00:15:40,399 --> 00:15:43,199
take a moment to describe this picture

434
00:15:43,199 --> 00:15:45,759
uh so the the starting point is the part

435
00:15:45,759 --> 00:15:47,680
circled here which is just

436
00:15:47,680 --> 00:15:51,600
uh something in the plain random oracle

437
00:15:51,600 --> 00:15:54,160
so we have some transform say encrypt

438
00:15:54,160 --> 00:15:55,759
with hash

439
00:15:55,759 --> 00:15:57,199
the transform

440
00:15:57,199 --> 00:15:58,160
takes

441
00:15:58,160 --> 00:16:00,320
as input some building block

442
00:16:00,320 --> 00:16:02,000
let's say a public key encryption scheme

443
00:16:02,000 --> 00:16:05,040
in the case in our in our example

444
00:16:05,040 --> 00:16:07,120
and so the transform can evaluate the

445
00:16:07,120 --> 00:16:09,120
building block and it also can make

446
00:16:09,120 --> 00:16:12,160
queries to the random oracle o

447
00:16:12,160 --> 00:16:15,040
then the adversary gets to

448
00:16:15,040 --> 00:16:16,880
interact with the transformer the

449
00:16:16,880 --> 00:16:19,440
security game for the transform and our

450
00:16:19,440 --> 00:16:20,880
in our case would be the deterministic

451
00:16:20,880 --> 00:16:22,639
encryption experiment

452
00:16:22,639 --> 00:16:24,880
and along the way the adversary can also

453
00:16:24,880 --> 00:16:27,040
query the random oracle okay so this is

454
00:16:27,040 --> 00:16:29,120
this is stuff for this part so we're all

455
00:16:29,120 --> 00:16:30,480
familiar with this is the standard

456
00:16:30,480 --> 00:16:33,360
random oracle model

457
00:16:33,360 --> 00:16:35,680
um and what we do is we add this extra

458
00:16:35,680 --> 00:16:37,199
oracle m

459
00:16:37,199 --> 00:16:39,440
and what this extra oracle m is going to

460
00:16:39,440 --> 00:16:42,639
do is model whatever

461
00:16:42,639 --> 00:16:45,360
non-black box technique you're going to

462
00:16:45,360 --> 00:16:47,440
try to throw at your problem in order to

463
00:16:47,440 --> 00:16:51,560
give an uninstantiability result

464
00:16:52,000 --> 00:16:53,199
um

465
00:16:53,199 --> 00:16:55,759
so what we're going to do is because we

466
00:16:55,759 --> 00:16:57,199
don't know necessarily whether you're

467
00:16:57,199 --> 00:16:58,639
going to use obfuscation photomorphic

468
00:16:58,639 --> 00:17:01,279
encryption garbo circuits whatever so

469
00:17:01,279 --> 00:17:03,199
we're going to do is

470
00:17:03,199 --> 00:17:05,760
quantify over all possible

471
00:17:05,760 --> 00:17:07,839
uh or m's

472
00:17:07,839 --> 00:17:10,799
and if your transform is secure in the

473
00:17:10,799 --> 00:17:12,720
augmented random oracle model

474
00:17:12,720 --> 00:17:15,839
if it is secure no matter what m you

475
00:17:15,839 --> 00:17:17,599
choose

476
00:17:17,599 --> 00:17:18,640
right so

477
00:17:18,640 --> 00:17:21,280
uh this m could for example be

478
00:17:21,280 --> 00:17:24,480
the ashraf segev obfuscation oracle

479
00:17:24,480 --> 00:17:26,720
um it could be some oracle for

480
00:17:26,720 --> 00:17:27,919
functional encryption it could be an

481
00:17:27,919 --> 00:17:30,320
oracle on the last slide that you know

482
00:17:30,320 --> 00:17:32,000
had all those different things all with

483
00:17:32,000 --> 00:17:34,000
arrows pointing to each other

484
00:17:34,000 --> 00:17:35,200
and we

485
00:17:35,200 --> 00:17:37,200
but because we quantify over all of them

486
00:17:37,200 --> 00:17:40,160
we just give one proof and immediately

487
00:17:40,160 --> 00:17:42,000
have resistance to uninstantiability

488
00:17:42,000 --> 00:17:44,480
results than to rely on any of these

489
00:17:44,480 --> 00:17:47,480
tools

490
00:17:47,760 --> 00:17:50,480
okay um so the the lingering questions

491
00:17:50,480 --> 00:17:51,200
are

492
00:17:51,200 --> 00:17:53,120
one how do you prove security in the

493
00:17:53,120 --> 00:17:55,360
augmented random oracle model we you

494
00:17:55,360 --> 00:17:57,520
know we now have this extra

495
00:17:57,520 --> 00:17:58,799
oracle m

496
00:17:58,799 --> 00:18:02,080
uh that is complicating things

497
00:18:02,080 --> 00:18:03,840
uh certainly we can do a standard model

498
00:18:03,840 --> 00:18:06,240
reduction so if you had some transform

499
00:18:06,240 --> 00:18:07,679
that was based on

500
00:18:07,679 --> 00:18:09,440
a standard model reduction you can do

501
00:18:09,440 --> 00:18:11,120
the same exact thing here

502
00:18:11,120 --> 00:18:12,400
there's really nothing different from

503
00:18:12,400 --> 00:18:14,559
the standard model from that perspective

504
00:18:14,559 --> 00:18:16,799
but can we do anything more than just a

505
00:18:16,799 --> 00:18:19,600
ordinary reduction

506
00:18:19,600 --> 00:18:21,120
and a related question is can the

507
00:18:21,120 --> 00:18:22,720
augmented random oracle model be used to

508
00:18:22,720 --> 00:18:24,960
prove anything beyond the standard model

509
00:18:24,960 --> 00:18:26,799
right if somehow we end up tying our

510
00:18:26,799 --> 00:18:28,720
hands and all we can do is prove the

511
00:18:28,720 --> 00:18:30,160
security of schemes that we could prove

512
00:18:30,160 --> 00:18:32,480
anyway in the standard model we kind of

513
00:18:32,480 --> 00:18:34,320
the the model is rather useless find it

514
00:18:34,320 --> 00:18:36,000
it captures uninstantiability but it

515
00:18:36,000 --> 00:18:37,760
doesn't really allow us to do anything

516
00:18:37,760 --> 00:18:39,840
else

517
00:18:39,840 --> 00:18:41,200
and there are a couple challenges to

518
00:18:41,200 --> 00:18:43,679
this so if we think about the kind of

519
00:18:43,679 --> 00:18:46,160
typical

520
00:18:46,559 --> 00:18:48,480
techniques for

521
00:18:48,480 --> 00:18:50,640
um proving security in the plain random

522
00:18:50,640 --> 00:18:51,679
oracle

523
00:18:51,679 --> 00:18:52,400
we

524
00:18:52,400 --> 00:18:55,200
two of them might be observability where

525
00:18:55,200 --> 00:18:57,679
the where the reduction gets to see the

526
00:18:57,679 --> 00:18:59,280
kinds of queries the adversary is making

527
00:18:59,280 --> 00:19:01,120
to the oracle learn about what the

528
00:19:01,120 --> 00:19:03,760
adversary is doing and use that to

529
00:19:03,760 --> 00:19:06,080
solve whatever problem

530
00:19:06,080 --> 00:19:09,039
the problem here is that the adversary

531
00:19:09,039 --> 00:19:10,880
might be making queries not only to the

532
00:19:10,880 --> 00:19:13,120
random variable but also to this oracle

533
00:19:13,120 --> 00:19:14,080
m

534
00:19:14,080 --> 00:19:16,400
and we don't know what m does right m

535
00:19:16,400 --> 00:19:18,799
m is sort of an arbitrary oracle

536
00:19:18,799 --> 00:19:20,559
and also importantly

537
00:19:20,559 --> 00:19:21,919
uh

538
00:19:21,919 --> 00:19:23,919
we don't necessarily get to see the

539
00:19:23,919 --> 00:19:25,679
queries that m makes to the random

540
00:19:25,679 --> 00:19:27,520
oracle o we only get to see the queries

541
00:19:27,520 --> 00:19:30,080
that the adversary makes to m

542
00:19:30,080 --> 00:19:32,160
um and so what it might be there might

543
00:19:32,160 --> 00:19:34,400
be oracle's m that allow the adversary

544
00:19:34,400 --> 00:19:37,280
to hide what queries they're making to o

545
00:19:37,280 --> 00:19:39,600
so i mean as a trivial example m might

546
00:19:39,600 --> 00:19:41,200
just offer a query forwarding

547
00:19:41,200 --> 00:19:42,480
functionality it might take queries from

548
00:19:42,480 --> 00:19:43,919
the adversary just send them to the

549
00:19:43,919 --> 00:19:45,440
oracle and tell the adversary what the

550
00:19:45,440 --> 00:19:47,679
response is so the adversary might not

551
00:19:47,679 --> 00:19:49,120
make any random oracle queries at all

552
00:19:49,120 --> 00:19:50,880
they might all go through m

553
00:19:50,880 --> 00:19:53,039
and worse maybe m is somehow scrambling

554
00:19:53,039 --> 00:19:54,720
the queries that the

555
00:19:54,720 --> 00:19:58,559
um that the adversary is making

556
00:19:58,720 --> 00:20:01,039
um so the other issue is programmability

557
00:20:01,039 --> 00:20:03,120
so this is a random oracle technique

558
00:20:03,120 --> 00:20:05,360
where you have some challenge that

559
00:20:05,360 --> 00:20:07,120
you're trying to solve as the reduction

560
00:20:07,120 --> 00:20:09,039
and you embed it into some random oracle

561
00:20:09,039 --> 00:20:10,320
output so you're actually programming

562
00:20:10,320 --> 00:20:12,559
the random oracle on certain points

563
00:20:12,559 --> 00:20:15,039
and hoping that by doing so you can

564
00:20:15,039 --> 00:20:16,240
force the adversary to use your

565
00:20:16,240 --> 00:20:18,720
challenge and break it

566
00:20:18,720 --> 00:20:20,480
but the problem here is that when you

567
00:20:20,480 --> 00:20:22,640
try to reprogram the random oracle it

568
00:20:22,640 --> 00:20:24,960
might be inconsistent with the m that

569
00:20:24,960 --> 00:20:26,640
you um

570
00:20:26,640 --> 00:20:28,480
that the adversary sees now you could

571
00:20:28,480 --> 00:20:29,760
say well

572
00:20:29,760 --> 00:20:31,280
i'm the reduction i get to sort of

573
00:20:31,280 --> 00:20:32,880
control the whole view of the adversary

574
00:20:32,880 --> 00:20:34,960
i can simulate both the random oracle

575
00:20:34,960 --> 00:20:37,600
and m but remember that m is arbitrary

576
00:20:37,600 --> 00:20:39,280
we're quantifying over all possible m's

577
00:20:39,280 --> 00:20:40,640
we don't necessarily even know what m

578
00:20:40,640 --> 00:20:42,799
does so how do we reason about

579
00:20:42,799 --> 00:20:43,600
uh

580
00:20:43,600 --> 00:20:45,200
how do we reason about m and show that

581
00:20:45,200 --> 00:20:46,960
we can program

582
00:20:46,960 --> 00:20:51,280
um challenges into o and also simulate

583
00:20:51,280 --> 00:20:53,679
the appropriate m in order to allow us

584
00:20:53,679 --> 00:20:55,360
to do anything

585
00:20:55,360 --> 00:20:56,640
and the fact that there are challenges

586
00:20:56,640 --> 00:20:59,280
here actually you know is is not

587
00:20:59,280 --> 00:21:00,640
surprising we're trying to capture

588
00:21:00,640 --> 00:21:02,400
uninstantiability results

589
00:21:02,400 --> 00:21:04,799
and so for any scheme that you could

590
00:21:04,799 --> 00:21:06,960
prove secure in the plain random oracle

591
00:21:06,960 --> 00:21:09,679
model but had an uninstantiability

592
00:21:09,679 --> 00:21:12,080
result we know that the techniques you

593
00:21:12,080 --> 00:21:13,760
use to prove the security of that scheme

594
00:21:13,760 --> 00:21:15,440
will not work in the augmented random

595
00:21:15,440 --> 00:21:17,840
workforce so the fact that we're kind of

596
00:21:17,840 --> 00:21:21,280
blocking techniques is a good sign

597
00:21:21,280 --> 00:21:23,520
but it also just raises the question of

598
00:21:23,520 --> 00:21:26,960
how how do we argue anything

599
00:21:27,120 --> 00:21:29,679
so we give an initial set of results

600
00:21:29,679 --> 00:21:31,440
for using the augmented random oracle

601
00:21:31,440 --> 00:21:32,320
model

602
00:21:32,320 --> 00:21:34,159
um so we show that if you took the

603
00:21:34,159 --> 00:21:36,000
encrypt with hash transform and upgraded

604
00:21:36,000 --> 00:21:37,520
the original public key encryption

605
00:21:37,520 --> 00:21:39,679
scheme to be lossy

606
00:21:39,679 --> 00:21:40,960
then encrypt with hash actually is

607
00:21:40,960 --> 00:21:44,400
secure in the augmented random or model

608
00:21:44,400 --> 00:21:46,080
so just by starting from a slightly

609
00:21:46,080 --> 00:21:47,360
stronger

610
00:21:47,360 --> 00:21:49,280
notion of security that follows from

611
00:21:49,280 --> 00:21:51,679
most of the algebraic techniques used to

612
00:21:51,679 --> 00:21:53,520
construct public encryption we can

613
00:21:53,520 --> 00:21:54,799
actually

614
00:21:54,799 --> 00:21:56,799
circumvent all the uninstantiability

615
00:21:56,799 --> 00:21:59,919
results we know and i'll note that the

616
00:21:59,919 --> 00:22:01,600
type of security we proved from crypto

617
00:22:01,600 --> 00:22:04,400
hash is unlikely to be able to be proven

618
00:22:04,400 --> 00:22:07,520
in the standard model this follows from

619
00:22:07,520 --> 00:22:09,600
some work by wix

620
00:22:09,600 --> 00:22:11,440
a while ago so

621
00:22:11,440 --> 00:22:13,360
you know what this proof is not a plane

622
00:22:13,360 --> 00:22:14,799
reduction we are doing something beyond

623
00:22:14,799 --> 00:22:16,480
the standard model so

624
00:22:16,480 --> 00:22:18,240
um you know there is utility in this

625
00:22:18,240 --> 00:22:20,880
model we can prove non-trivial things

626
00:22:20,880 --> 00:22:21,840
um

627
00:22:21,840 --> 00:22:24,840
so similarly we we show that if you

628
00:22:24,840 --> 00:22:27,200
upgrade um your

629
00:22:27,200 --> 00:22:30,400
interactive proof um from computational

630
00:22:30,400 --> 00:22:32,559
soundness to statistical soundness that

631
00:22:32,559 --> 00:22:34,799
the fiat schemer transform is secure in

632
00:22:34,799 --> 00:22:37,919
the augmented random oracle model

633
00:22:37,919 --> 00:22:40,880
and like the previous example

634
00:22:40,880 --> 00:22:42,960
it's you know was already shown by

635
00:22:42,960 --> 00:22:45,120
botansky at all that it's unlikely to be

636
00:22:45,120 --> 00:22:47,039
able to prove this case in a standard

637
00:22:47,039 --> 00:22:48,960
model

638
00:22:48,960 --> 00:22:51,039
uh and then finally we we look at the

639
00:22:51,039 --> 00:22:53,679
fujisaki okamoto transform um for

640
00:22:53,679 --> 00:22:55,760
getting chosen ciphertext secure public

641
00:22:55,760 --> 00:22:58,000
key encryption here we actually find

642
00:22:58,000 --> 00:23:00,400
that we we can't just upgrade the public

643
00:23:00,400 --> 00:23:02,240
key encryption scheme to lossy and

644
00:23:02,240 --> 00:23:04,960
suddenly get the transfer to work

645
00:23:04,960 --> 00:23:07,600
and so we had we designed some new

646
00:23:07,600 --> 00:23:09,679
protocol that's not very efficient

647
00:23:09,679 --> 00:23:12,080
um but you know the starting assumption

648
00:23:12,080 --> 00:23:14,400
is lossy public encryption

649
00:23:14,400 --> 00:23:17,600
and again it's unknown whether lossy

650
00:23:17,600 --> 00:23:19,679
public encryption can be used to build

651
00:23:19,679 --> 00:23:21,200
chosen ciphertext secure public

652
00:23:21,200 --> 00:23:22,960
encryption so this is again something

653
00:23:22,960 --> 00:23:24,640
that sort of inherently uses the

654
00:23:24,640 --> 00:23:27,520
idealized model

655
00:23:28,080 --> 00:23:30,559
i won't go into the the proofs here but

656
00:23:30,559 --> 00:23:32,880
the idea is that we're using the

657
00:23:32,880 --> 00:23:34,720
statistical properties of the base

658
00:23:34,720 --> 00:23:37,679
system to basically allow us to brute

659
00:23:37,679 --> 00:23:38,640
force

660
00:23:38,640 --> 00:23:40,799
the oracle's o and m

661
00:23:40,799 --> 00:23:42,480
um and once we

662
00:23:42,480 --> 00:23:44,559
so we you know in the lost encryption

663
00:23:44,559 --> 00:23:46,159
case we switched to a lossy mode and now

664
00:23:46,159 --> 00:23:48,799
it's now security statistical and now we

665
00:23:48,799 --> 00:23:50,559
can use our unbounded computational

666
00:23:50,559 --> 00:23:52,240
power in the statistical setting to

667
00:23:52,240 --> 00:23:54,640
actually just you know query m and o on

668
00:23:54,640 --> 00:23:57,520
all of their inputs and and this this

669
00:23:57,520 --> 00:23:59,440
allows us to actually

670
00:23:59,440 --> 00:24:01,600
um do the reprogramming and observing we

671
00:24:01,600 --> 00:24:04,559
need to prove security

672
00:24:04,559 --> 00:24:06,000
all right so before concluding i just

673
00:24:06,000 --> 00:24:07,520
want to mention that we're far from the

674
00:24:07,520 --> 00:24:09,440
first work to try to you know improve

675
00:24:09,440 --> 00:24:12,000
the random oracle model in order to get

676
00:24:12,000 --> 00:24:13,039
around

677
00:24:13,039 --> 00:24:14,640
various limitations

678
00:24:14,640 --> 00:24:16,960
um there's the non-programmable random

679
00:24:16,960 --> 00:24:18,480
oracle model the non-observable random

680
00:24:18,480 --> 00:24:20,080
oracle model that sort of explicitly

681
00:24:20,080 --> 00:24:22,799
just limit your your techniques

682
00:24:22,799 --> 00:24:24,480
uh that you can use

683
00:24:24,480 --> 00:24:26,559
to prove security um

684
00:24:26,559 --> 00:24:28,880
however note that for both these example

685
00:24:28,880 --> 00:24:30,159
both these

686
00:24:30,159 --> 00:24:31,760
refinements of the random oracle still

687
00:24:31,760 --> 00:24:33,520
have uninstantiability results namely

688
00:24:33,520 --> 00:24:34,960
encrypt with hash

689
00:24:34,960 --> 00:24:38,400
can be proven in neither of these

690
00:24:38,480 --> 00:24:41,600
so then moving beyond idealized models

691
00:24:41,600 --> 00:24:43,039
there's universal computational

692
00:24:43,039 --> 00:24:44,880
extractors which seek to define a

693
00:24:44,880 --> 00:24:46,480
standard model notion

694
00:24:46,480 --> 00:24:47,919
of

695
00:24:47,919 --> 00:24:49,360
of security for hash functions that

696
00:24:49,360 --> 00:24:52,000
captures a wide range of use cases

697
00:24:52,000 --> 00:24:54,159
um these ucs however many of the

698
00:24:54,159 --> 00:24:56,880
original uh versions of them are also

699
00:24:56,880 --> 00:24:59,120
uninstantiable encrypted hash is an

700
00:24:59,120 --> 00:25:01,919
example um which can be proven under

701
00:25:01,919 --> 00:25:04,559
some variant of uce

702
00:25:04,559 --> 00:25:05,919
um and then you know there's just been a

703
00:25:05,919 --> 00:25:07,840
lot of works either trying to directly

704
00:25:07,840 --> 00:25:10,080
instantiate random oracle model

705
00:25:10,080 --> 00:25:11,279
properties

706
00:25:11,279 --> 00:25:12,799
from well-established tools or just

707
00:25:12,799 --> 00:25:14,240
removing the random oracle model

708
00:25:14,240 --> 00:25:16,320
heuristic altogether but these usually

709
00:25:16,320 --> 00:25:19,360
result in much less efficient protocols

710
00:25:19,360 --> 00:25:20,960
so the advantage of the augmented random

711
00:25:20,960 --> 00:25:22,320
oracle model is that we specifically

712
00:25:22,320 --> 00:25:24,320
designed it with the uninstantiability

713
00:25:24,320 --> 00:25:27,120
results in mind and designed it to

714
00:25:27,120 --> 00:25:29,600
circumvent all the ones we know and

715
00:25:29,600 --> 00:25:32,480
that's it thank you

716
00:25:36,799 --> 00:25:38,720
all right thanks mark

717
00:25:38,720 --> 00:25:40,320
as a reminder if you have any questions

718
00:25:40,320 --> 00:25:43,440
please come to the microphone or

719
00:25:43,440 --> 00:25:46,960
type in the chat on zoom

720
00:25:49,120 --> 00:25:51,279
hey so thanks for the talk i had a

721
00:25:51,279 --> 00:25:52,880
couple questions

722
00:25:52,880 --> 00:25:55,120
so my first question is

723
00:25:55,120 --> 00:25:56,880
uh when you were saying that we showed

724
00:25:56,880 --> 00:25:59,679
that the encrypt with hash was

725
00:25:59,679 --> 00:26:01,440
uninstantiable it seemed like that only

726
00:26:01,440 --> 00:26:02,960
applied when we also

727
00:26:02,960 --> 00:26:04,559
provided this like

728
00:26:04,559 --> 00:26:06,799
obfuscated cheat function with it so

729
00:26:06,799 --> 00:26:09,360
like how come adding the cheat function

730
00:26:09,360 --> 00:26:11,039
makes you conclude that the original

731
00:26:11,039 --> 00:26:12,880
thing was insecure

732
00:26:12,880 --> 00:26:15,279
right good so so the the theorem that

733
00:26:15,279 --> 00:26:18,960
was proved by bbo was that for any

734
00:26:18,960 --> 00:26:20,640
public encryption scheme that's cpa

735
00:26:20,640 --> 00:26:21,840
secure

736
00:26:21,840 --> 00:26:24,799
the encrypted hash transform is a secure

737
00:26:24,799 --> 00:26:26,159
deterministic encryption scheme in the

738
00:26:26,159 --> 00:26:27,840
random oracle model

739
00:26:27,840 --> 00:26:29,520
right so it's that for all public key

740
00:26:29,520 --> 00:26:31,679
encryption schemes that's important so

741
00:26:31,679 --> 00:26:33,440
the uninstantiability result shows that

742
00:26:33,440 --> 00:26:35,600
there exists some public encryption

743
00:26:35,600 --> 00:26:37,440
scheme it's contrived we had to we had

744
00:26:37,440 --> 00:26:39,360
to tweak an existing scheme to add this

745
00:26:39,360 --> 00:26:41,440
obfuscated program it's certainly

746
00:26:41,440 --> 00:26:42,720
contrived you would never design a

747
00:26:42,720 --> 00:26:44,640
public encryption scheme this way but it

748
00:26:44,640 --> 00:26:46,960
shows that the the theorem

749
00:26:46,960 --> 00:26:49,120
for all public encryption schemes

750
00:26:49,120 --> 00:26:50,240
uh

751
00:26:50,240 --> 00:26:52,240
the transform and secure it does not

752
00:26:52,240 --> 00:26:54,960
hold in the standard model

753
00:26:54,960 --> 00:26:57,360
oh wait oh wait thank you um and then i

754
00:26:57,360 --> 00:26:59,360
had another question about one of one of

755
00:26:59,360 --> 00:27:01,200
your last slides you showed that

756
00:27:01,200 --> 00:27:02,720
in the

757
00:27:02,720 --> 00:27:04,880
in the arm you were able to show some

758
00:27:04,880 --> 00:27:07,919
things that seem unlikely to be proved

759
00:27:07,919 --> 00:27:10,080
in the standard random oracle model but

760
00:27:10,080 --> 00:27:11,679
i was a little confused because i

761
00:27:11,679 --> 00:27:13,440
thought the point of the augmented

762
00:27:13,440 --> 00:27:15,200
random oracle model was to like actually

763
00:27:15,200 --> 00:27:16,799
be able to prove less things so you

764
00:27:16,799 --> 00:27:18,240
don't accidentally prove something

765
00:27:18,240 --> 00:27:20,559
that's uninstantiable yeah so why can

766
00:27:20,559 --> 00:27:22,159
you prove more things yeah sorry for the

767
00:27:22,159 --> 00:27:23,360
confusion so what i meant by standard

768
00:27:23,360 --> 00:27:25,039
models no random oracles just playing

769
00:27:25,039 --> 00:27:26,240
the player oh that's what you mean by

770
00:27:26,240 --> 00:27:27,840
standard model okay

771
00:27:27,840 --> 00:27:30,158
thank you

772
00:27:30,799 --> 00:27:32,480
yeah um thank you very much for the talk

773
00:27:32,480 --> 00:27:34,320
i found very interesting uh i was just

774
00:27:34,320 --> 00:27:36,480
wondering where you think this goes from

775
00:27:36,480 --> 00:27:38,240
here like if there's directions of

776
00:27:38,240 --> 00:27:39,919
future work to like directly expand the

777
00:27:39,919 --> 00:27:42,559
model if like certain results should

778
00:27:42,559 --> 00:27:45,120
start using that is using it as is and

779
00:27:45,120 --> 00:27:46,399
etc

780
00:27:46,399 --> 00:27:48,880
i i mean i guess to the extent possible

781
00:27:48,880 --> 00:27:50,559
it would be great if you had a random

782
00:27:50,559 --> 00:27:53,279
oracle model proof of some protocol to

783
00:27:53,279 --> 00:27:55,440
sort of lift it to the augmented random

784
00:27:55,440 --> 00:27:57,600
oracle model that would just that would

785
00:27:57,600 --> 00:27:59,760
enable you to give um

786
00:27:59,760 --> 00:28:02,080
you know greater confidence that there's

787
00:28:02,080 --> 00:28:04,240
no uninstantiability result for your

788
00:28:04,240 --> 00:28:06,080
scheme

789
00:28:06,080 --> 00:28:08,960
thank you thank you very much

790
00:28:10,320 --> 00:28:12,399
all right uh thanks uh we're running a

791
00:28:12,399 --> 00:28:14,640
little bit over time so um i think we'll

792
00:28:14,640 --> 00:28:16,960
have the next speaker come up oh wait uh

793
00:28:16,960 --> 00:28:19,520
uh mark is right here um so

794
00:28:19,520 --> 00:28:23,039
uh next speaker is mark zandry again um

795
00:28:23,039 --> 00:28:24,480
and this time

796
00:28:24,480 --> 00:28:26,720
he'll be uh

797
00:28:26,720 --> 00:28:28,559
talking about uh

798
00:28:28,559 --> 00:28:30,960
okay the paper is titled to query or

799
00:28:30,960 --> 00:28:32,559
sorry to label or not to label in

800
00:28:32,559 --> 00:28:35,039
generic groups uh so

801
00:28:35,039 --> 00:28:36,720
i guess uh we'll give him a minute to

802
00:28:36,720 --> 00:28:41,159
set up the slide and then go ahead

803
00:29:05,919 --> 00:29:08,000
all right uh hi again

804
00:29:08,000 --> 00:29:11,840
um so this talk is going to be about the

805
00:29:11,840 --> 00:29:13,679
generic group model

806
00:29:13,679 --> 00:29:15,120
except that i've already lied to you

807
00:29:15,120 --> 00:29:17,200
actually this talk will be about the

808
00:29:17,200 --> 00:29:19,120
fact that there are two very different

809
00:29:19,120 --> 00:29:21,440
generic group models

810
00:29:21,440 --> 00:29:24,480
so the first is going to be shub's model

811
00:29:24,480 --> 00:29:26,720
and here the

812
00:29:26,720 --> 00:29:29,440
generic group is modeled as a

813
00:29:29,440 --> 00:29:30,320
uh

814
00:29:30,320 --> 00:29:32,640
random injection so you choose a random

815
00:29:32,640 --> 00:29:34,799
injection from zp into bit strings where

816
00:29:34,799 --> 00:29:36,720
p is the order of the group

817
00:29:36,720 --> 00:29:38,480
and what we're going to

818
00:29:38,480 --> 00:29:40,880
we're going to interpret this injection

819
00:29:40,880 --> 00:29:41,919
l

820
00:29:41,919 --> 00:29:44,640
as as the elements of the group so l of

821
00:29:44,640 --> 00:29:46,880
x is g to the x where g is some fixed

822
00:29:46,880 --> 00:29:48,799
generator of the group

823
00:29:48,799 --> 00:29:50,240
so everyone is given access to this

824
00:29:50,240 --> 00:29:51,440
oracle l

825
00:29:51,440 --> 00:29:52,480
and then additionally you're given

826
00:29:52,480 --> 00:29:54,880
access to a multiplication oracle

827
00:29:54,880 --> 00:29:56,240
um

828
00:29:56,240 --> 00:29:58,720
where you take as input to labels for

829
00:29:58,720 --> 00:30:01,360
group elements and it outputs the label

830
00:30:01,360 --> 00:30:02,240
for

831
00:30:02,240 --> 00:30:04,960
the the sum and if you think about um

832
00:30:04,960 --> 00:30:06,240
because the

833
00:30:06,240 --> 00:30:08,640
um the label of x is g to the x

834
00:30:08,640 --> 00:30:11,600
uh summing x and y is really multiplying

835
00:30:11,600 --> 00:30:14,559
the group elements together

836
00:30:14,559 --> 00:30:17,200
okay the other model is malware's model

837
00:30:17,200 --> 00:30:20,159
um and instead of using labels this uses

838
00:30:20,159 --> 00:30:22,640
pointers or handles um

839
00:30:22,640 --> 00:30:24,799
so the way i there's different

840
00:30:24,799 --> 00:30:26,159
interpretations of malware's model but

841
00:30:26,159 --> 00:30:27,760
the way i like to think about it is as a

842
00:30:27,760 --> 00:30:29,360
strong type system

843
00:30:29,360 --> 00:30:30,080
so

844
00:30:30,080 --> 00:30:32,320
there there is an element

845
00:30:32,320 --> 00:30:35,120
data type which contains a value namely

846
00:30:35,120 --> 00:30:37,360
the exponent

847
00:30:37,360 --> 00:30:38,640
for the group

848
00:30:38,640 --> 00:30:41,679
and the adversary and all algorithms are

849
00:30:41,679 --> 00:30:44,320
are restricted to just um being able to

850
00:30:44,320 --> 00:30:46,720
multiply group elements

851
00:30:46,720 --> 00:30:48,000
through a you know explicit

852
00:30:48,000 --> 00:30:49,919
multiplication procedure and also test

853
00:30:49,919 --> 00:30:53,039
the quality of group elements no other

854
00:30:53,039 --> 00:30:55,440
operations on on these element variables

855
00:30:55,440 --> 00:30:57,440
are allowed except multiplication and

856
00:30:57,440 --> 00:31:00,000
equality testing

857
00:31:00,000 --> 00:31:01,440
so if you take nothing else away from

858
00:31:01,440 --> 00:31:03,120
this talk

859
00:31:03,120 --> 00:31:06,080
the the key point is that these models

860
00:31:06,080 --> 00:31:07,919
should not be treated as the same they

861
00:31:07,919 --> 00:31:09,039
should be treated as very different

862
00:31:09,039 --> 00:31:10,399
models

863
00:31:10,399 --> 00:31:12,559
and moreover if you have any doubts on

864
00:31:12,559 --> 00:31:13,919
which model you should use you should

865
00:31:13,919 --> 00:31:15,679
strive to use troops model the ren the

866
00:31:15,679 --> 00:31:17,360
one with random labels this is always

867
00:31:17,360 --> 00:31:18,880
the preferred one

868
00:31:18,880 --> 00:31:21,440
and the reason is as we will see

869
00:31:21,440 --> 00:31:23,600
that malware's model fails to capture

870
00:31:23,600 --> 00:31:24,480
many

871
00:31:24,480 --> 00:31:27,039
uh textbook generic techniques to the

872
00:31:27,039 --> 00:31:29,919
point where many like the famous results

873
00:31:29,919 --> 00:31:32,720
that we know of from our undergrad or

874
00:31:32,720 --> 00:31:34,640
graduate cryptography classes just don't

875
00:31:34,640 --> 00:31:36,000
hold

876
00:31:36,000 --> 00:31:38,880
in malware's model

877
00:31:39,360 --> 00:31:41,279
okay um

878
00:31:41,279 --> 00:31:42,000
so

879
00:31:42,000 --> 00:31:44,399
what's interesting is that there is an

880
00:31:44,399 --> 00:31:47,120
apparent contradiction in the literature

881
00:31:47,120 --> 00:31:51,120
so um in 2008 jaeger and schweink proved

882
00:31:51,120 --> 00:31:53,679
that the maori troops model are

883
00:31:53,679 --> 00:31:55,200
equivalent

884
00:31:55,200 --> 00:31:57,600
and the intuition for why this might be

885
00:31:57,600 --> 00:31:58,640
the case

886
00:31:58,640 --> 00:32:00,640
is that if you have a random label from

887
00:32:00,640 --> 00:32:01,919
shupes model

888
00:32:01,919 --> 00:32:03,120
there's not really a whole lot you can

889
00:32:03,120 --> 00:32:04,640
do with it if you try to operate it on

890
00:32:04,640 --> 00:32:06,240
any way you're going to get junk

891
00:32:06,240 --> 00:32:08,559
unrelated to the original group element

892
00:32:08,559 --> 00:32:10,320
and so really it seems like all you can

893
00:32:10,320 --> 00:32:12,480
do with a random label and shoots model

894
00:32:12,480 --> 00:32:15,039
is feed it back into the oracle but if

895
00:32:15,039 --> 00:32:16,799
all you're doing is taking outputs of

896
00:32:16,799 --> 00:32:18,399
the oracle feeding them back in to the

897
00:32:18,399 --> 00:32:19,760
oracle or okay fine maybe you can also

898
00:32:19,760 --> 00:32:21,679
test equality or something like that

899
00:32:21,679 --> 00:32:24,159
really all you can do it seems like is

900
00:32:24,159 --> 00:32:26,640
work in malware model

901
00:32:26,640 --> 00:32:28,240
and vice versa there's an intuition for

902
00:32:28,240 --> 00:32:30,240
why you know if you have a malware model

903
00:32:30,240 --> 00:32:32,000
adversary you might be able to get a

904
00:32:32,000 --> 00:32:33,760
adversary

905
00:32:33,760 --> 00:32:36,159
um but on the other hand um there's a

906
00:32:36,159 --> 00:32:38,000
couple works that taken together prove

907
00:32:38,000 --> 00:32:40,559
that these are not the same um

908
00:32:40,559 --> 00:32:43,279
so there's this work by chen at all that

909
00:32:43,279 --> 00:32:46,240
shows that schnorr signatures

910
00:32:46,240 --> 00:32:48,799
are secure in shoop's model

911
00:32:48,799 --> 00:32:51,039
even if you use a non-cryptographic hash

912
00:32:51,039 --> 00:32:52,480
function for fiat mirror so even if you

913
00:32:52,480 --> 00:32:54,080
do like very basic

914
00:32:54,080 --> 00:32:55,360
uh

915
00:32:55,360 --> 00:32:57,120
uh a very basic hash function that just

916
00:32:57,120 --> 00:32:59,200
you know does some simple bit operations

917
00:32:59,200 --> 00:33:00,640
for fiat shamir

918
00:33:00,640 --> 00:33:02,399
you can still prove the security of

919
00:33:02,399 --> 00:33:04,640
schnoor's um identification port or

920
00:33:04,640 --> 00:33:06,720
schnorr signatures

921
00:33:06,720 --> 00:33:09,360
in shub's model

922
00:33:09,360 --> 00:33:10,559
however

923
00:33:10,559 --> 00:33:11,840
uh this

924
00:33:11,840 --> 00:33:14,159
um recent work of dotling null

925
00:33:14,159 --> 00:33:15,120
shows

926
00:33:15,120 --> 00:33:16,559
that signatures are just flat out and

927
00:33:16,559 --> 00:33:19,039
possible in mauro's model

928
00:33:19,039 --> 00:33:20,080
so we have

929
00:33:20,080 --> 00:33:22,000
very efficient signatures in shoes model

930
00:33:22,000 --> 00:33:24,000
no signatures at all in ours model and

931
00:33:24,000 --> 00:33:25,840
yet somehow

932
00:33:25,840 --> 00:33:27,200
the

933
00:33:27,200 --> 00:33:29,039
you know somehow they're equivalent so

934
00:33:29,039 --> 00:33:30,559
the point of this talk is to kind of

935
00:33:30,559 --> 00:33:33,360
clarify the landscape here and

936
00:33:33,360 --> 00:33:35,679
also provide some additional results um

937
00:33:35,679 --> 00:33:37,200
sort of showing that these models are

938
00:33:37,200 --> 00:33:39,519
actually quite different

939
00:33:39,519 --> 00:33:41,919
uh so the starting observation for this

940
00:33:41,919 --> 00:33:42,720
work

941
00:33:42,720 --> 00:33:43,679
um

942
00:33:43,679 --> 00:33:45,600
kind of inspired by the

943
00:33:45,600 --> 00:33:47,760
the contradiction on the previous slide

944
00:33:47,760 --> 00:33:50,720
is that many textbook techniques that we

945
00:33:50,720 --> 00:33:52,480
have that work in the standard model

946
00:33:52,480 --> 00:33:54,960
also work in shupes model but simply

947
00:33:54,960 --> 00:33:57,600
fail in ours model

948
00:33:57,600 --> 00:33:58,799
and i'm just going to list the whole

949
00:33:58,799 --> 00:34:02,000
bunch now so consider the blue macaulay

950
00:34:02,000 --> 00:34:03,440
prg

951
00:34:03,440 --> 00:34:04,840
and suppose that

952
00:34:04,840 --> 00:34:07,760
um right and suppose you're trying to

953
00:34:07,760 --> 00:34:10,079
like reason about this in mauer's model

954
00:34:10,079 --> 00:34:12,719
so what is the what does the prg do it

955
00:34:12,719 --> 00:34:14,639
takes as input the seed and it keeps

956
00:34:14,639 --> 00:34:16,800
doing a repeated exponentiation and

957
00:34:16,800 --> 00:34:20,719
every time it siphons off a single bit

958
00:34:20,719 --> 00:34:22,560
but if you think about it after every

959
00:34:22,560 --> 00:34:23,599
round

960
00:34:23,599 --> 00:34:25,760
the state is a group element because you

961
00:34:25,760 --> 00:34:27,760
did g to the x so you have a group

962
00:34:27,760 --> 00:34:28,879
element

963
00:34:28,879 --> 00:34:30,399
but when you want to feed it into the

964
00:34:30,399 --> 00:34:33,199
next round you're feeding in an exponent

965
00:34:33,199 --> 00:34:35,199
which is you know you know it's an

966
00:34:35,199 --> 00:34:36,560
integer

967
00:34:36,560 --> 00:34:38,159
so somehow you need to be able to go

968
00:34:38,159 --> 00:34:40,480
from a group element to an integer

969
00:34:40,480 --> 00:34:42,239
but this is explicitly not allowed in

970
00:34:42,239 --> 00:34:43,839
mauer's model

971
00:34:43,839 --> 00:34:45,839
it is allowed in shupes model you take

972
00:34:45,839 --> 00:34:48,320
your your take your label it's just bits

973
00:34:48,320 --> 00:34:49,679
you can interpret it as an integer

974
00:34:49,679 --> 00:34:51,040
however you want

975
00:34:51,040 --> 00:34:52,639
um so

976
00:34:52,639 --> 00:34:54,480
you know blown mcauley's prg does not

977
00:34:54,480 --> 00:34:57,520
does not work in malware's model

978
00:34:57,520 --> 00:34:59,440
hey there's a tons of examples like this

979
00:34:59,440 --> 00:35:01,119
merkle dam card also does not work in

980
00:35:01,119 --> 00:35:03,599
mauer's model if the

981
00:35:03,599 --> 00:35:05,280
underlying compression function is built

982
00:35:05,280 --> 00:35:07,200
in the canonical way from a group

983
00:35:07,200 --> 00:35:08,640
right because the output of the

984
00:35:08,640 --> 00:35:10,160
compression function is going to be a

985
00:35:10,160 --> 00:35:11,920
group element but now you're going to be

986
00:35:11,920 --> 00:35:13,839
trying to insert that group element into

987
00:35:13,839 --> 00:35:17,359
the input of another iteration of the

988
00:35:17,359 --> 00:35:20,560
compression function but the inputs are

989
00:35:20,560 --> 00:35:23,040
exponents or you know integers

990
00:35:23,040 --> 00:35:24,400
so somehow you have to be able to go

991
00:35:24,400 --> 00:35:28,560
again from a group element to an integer

992
00:35:28,640 --> 00:35:31,040
if we try to build the goldright goldwax

993
00:35:31,040 --> 00:35:32,720
or macaulay pseudorandom function from

994
00:35:32,720 --> 00:35:36,400
prgs and our prg was built from a group

995
00:35:36,400 --> 00:35:38,160
we're going to run into the same problem

996
00:35:38,160 --> 00:35:40,640
the output of the prg is probably going

997
00:35:40,640 --> 00:35:42,880
to be a group element but the inputs are

998
00:35:42,880 --> 00:35:45,520
probably going to be integers so somehow

999
00:35:45,520 --> 00:35:47,119
we need to go from

1000
00:35:47,119 --> 00:35:50,480
uh group elements to integers

1001
00:35:50,480 --> 00:35:51,839
for a slightly different example we can

1002
00:35:51,839 --> 00:35:54,160
consider feistel networks

1003
00:35:54,160 --> 00:35:56,000
so here we have this round function and

1004
00:35:56,000 --> 00:35:57,599
every and we're playing this round

1005
00:35:57,599 --> 00:35:59,119
function and xoring the output of the

1006
00:35:59,119 --> 00:36:01,680
round function into some other wire

1007
00:36:01,680 --> 00:36:03,760
now suppose a round function was built

1008
00:36:03,760 --> 00:36:06,480
from groups well the output is probably

1009
00:36:06,480 --> 00:36:08,560
going to be a group element for example

1010
00:36:08,560 --> 00:36:10,160
maybe the round function is now wrangled

1011
00:36:10,160 --> 00:36:11,440
prf

1012
00:36:11,440 --> 00:36:12,960
um so now we have to take a group

1013
00:36:12,960 --> 00:36:15,760
element and somehow xor it with a string

1014
00:36:15,760 --> 00:36:17,359
but all we have is a group element and

1015
00:36:17,359 --> 00:36:19,359
the type system of our model says that

1016
00:36:19,359 --> 00:36:21,359
all we can do is do group

1017
00:36:21,359 --> 00:36:23,440
multiplications and check equalities how

1018
00:36:23,440 --> 00:36:26,160
do we do an xor

1019
00:36:26,160 --> 00:36:28,240
what about authenticated encryption

1020
00:36:28,240 --> 00:36:30,800
well the obvious the the typical way we

1021
00:36:30,800 --> 00:36:33,599
do this um would be something like you

1022
00:36:33,599 --> 00:36:36,560
you apply a mac to the cipher text

1023
00:36:36,560 --> 00:36:39,040
but if your schemes were built from

1024
00:36:39,040 --> 00:36:41,599
uh from groups the output of your

1025
00:36:41,599 --> 00:36:43,280
encryption is probably going to be a

1026
00:36:43,280 --> 00:36:45,520
group element but your mac is probably

1027
00:36:45,520 --> 00:36:47,920
going to operate on bits so again you

1028
00:36:47,920 --> 00:36:49,520
know same problem

1029
00:36:49,520 --> 00:36:50,720
um

1030
00:36:50,720 --> 00:36:52,320
maybe let's give an example in the

1031
00:36:52,320 --> 00:36:53,520
public key setting let's consider

1032
00:36:53,520 --> 00:36:54,880
algamal

1033
00:36:54,880 --> 00:36:56,800
so the usual

1034
00:36:56,800 --> 00:36:57,920
i mean we can consider different

1035
00:36:57,920 --> 00:36:59,920
variants of alcohomol whether we

1036
00:36:59,920 --> 00:37:01,040
use

1037
00:37:01,040 --> 00:37:03,280
sort of an xor group operation to hide

1038
00:37:03,280 --> 00:37:04,720
the message

1039
00:37:04,720 --> 00:37:06,960
so in the first example

1040
00:37:06,960 --> 00:37:09,040
how you encrypt a message m is gdr h to

1041
00:37:09,040 --> 00:37:11,520
the r x or m where you just take htr and

1042
00:37:11,520 --> 00:37:13,119
interpret as a bit string and use it as

1043
00:37:13,119 --> 00:37:14,960
a one-time pad for your message but

1044
00:37:14,960 --> 00:37:16,720
again that requires interpreting a group

1045
00:37:16,720 --> 00:37:18,720
element as a bit string

1046
00:37:18,720 --> 00:37:20,400
alternatively you could just you

1047
00:37:20,400 --> 00:37:22,240
leverage the group operation interpret

1048
00:37:22,240 --> 00:37:24,960
the message m as a group element

1049
00:37:24,960 --> 00:37:26,800
now we're okay for encryption we

1050
00:37:26,800 --> 00:37:28,079
interpret the message m as a group

1051
00:37:28,079 --> 00:37:31,280
element um and now we can use the

1052
00:37:31,280 --> 00:37:32,960
the group operation which is allowed in

1053
00:37:32,960 --> 00:37:35,920
malware's model to multiply g to the rnm

1054
00:37:35,920 --> 00:37:37,680
but the problem is decryption

1055
00:37:37,680 --> 00:37:39,359
we have a group element that somehow

1056
00:37:39,359 --> 00:37:41,200
represents our message and we need to

1057
00:37:41,200 --> 00:37:43,200
decrypt and actually get the message

1058
00:37:43,200 --> 00:37:44,400
back but our message is probably going

1059
00:37:44,400 --> 00:37:46,640
to be bits not a group element

1060
00:37:46,640 --> 00:37:47,520
so

1061
00:37:47,520 --> 00:37:50,320
you know how do we do that

1062
00:37:50,320 --> 00:37:52,000
what about signature trees this is the

1063
00:37:52,000 --> 00:37:53,839
usual way you would build signatures

1064
00:37:53,839 --> 00:37:54,880
from

1065
00:37:54,880 --> 00:37:57,040
symmetra key crypto well here we have

1066
00:37:57,040 --> 00:37:58,960
this tree of public keys that are each

1067
00:37:58,960 --> 00:38:00,480
signing their

1068
00:38:00,480 --> 00:38:02,960
the public keys of their children

1069
00:38:02,960 --> 00:38:06,079
in a group based uh

1070
00:38:06,079 --> 00:38:08,240
like one-time signature scheme

1071
00:38:08,240 --> 00:38:10,160
uh that you might use to instantiate

1072
00:38:10,160 --> 00:38:11,200
this tree

1073
00:38:11,200 --> 00:38:12,880
your messages are going to be bits if we

1074
00:38:12,880 --> 00:38:14,320
think about like how lanport signatures

1075
00:38:14,320 --> 00:38:16,079
work your your your messages or bits and

1076
00:38:16,079 --> 00:38:17,839
you're encrypting bit by bit or not

1077
00:38:17,839 --> 00:38:20,079
encrypting a signing bit by bit

1078
00:38:20,079 --> 00:38:21,760
um but your public keys are going to be

1079
00:38:21,760 --> 00:38:22,960
group elements so somehow you need to

1080
00:38:22,960 --> 00:38:24,160
take the public key that's a group

1081
00:38:24,160 --> 00:38:26,800
element interpret it as bits in order to

1082
00:38:26,800 --> 00:38:29,359
sign that public key with the the public

1083
00:38:29,359 --> 00:38:31,040
key of the parent

1084
00:38:31,040 --> 00:38:32,960
so again this doesn't work

1085
00:38:32,960 --> 00:38:35,040
um and then here we have the example of

1086
00:38:35,040 --> 00:38:37,839
schnorr um signatures where okay we're

1087
00:38:37,839 --> 00:38:39,119
gonna turn things on their head from the

1088
00:38:39,119 --> 00:38:40,640
usual setting where you usually think of

1089
00:38:40,640 --> 00:38:42,320
the group as a concrete group and you

1090
00:38:42,320 --> 00:38:44,320
idealize the the hash function here

1091
00:38:44,320 --> 00:38:47,680
we're gonna do the opposite idealize the

1092
00:38:47,680 --> 00:38:49,760
generic group and treat the hash

1093
00:38:49,760 --> 00:38:52,000
function as a concrete object but the

1094
00:38:52,000 --> 00:38:53,680
problem is when you're applying the fiat

1095
00:38:53,680 --> 00:38:54,640
smear

1096
00:38:54,640 --> 00:38:57,040
transform to snore to get a signature

1097
00:38:57,040 --> 00:38:59,040
scheme you have to apply the hash

1098
00:38:59,040 --> 00:39:01,280
function to

1099
00:39:01,280 --> 00:39:02,079
the

1100
00:39:02,079 --> 00:39:03,599
prover's first message but the prover's

1101
00:39:03,599 --> 00:39:04,960
first message in snore is a group

1102
00:39:04,960 --> 00:39:07,200
element so how do you how do you apply a

1103
00:39:07,200 --> 00:39:08,720
hash function that probably you know

1104
00:39:08,720 --> 00:39:10,320
does bid operations or something like

1105
00:39:10,320 --> 00:39:13,839
that to a group element

1106
00:39:13,839 --> 00:39:15,920
okay so the point is that all of these

1107
00:39:15,920 --> 00:39:17,680
techniques are entirely generic they're

1108
00:39:17,680 --> 00:39:20,079
even the textbook we we see them in our

1109
00:39:20,079 --> 00:39:22,160
in our you know uh

1110
00:39:22,160 --> 00:39:22,960
in our

1111
00:39:22,960 --> 00:39:24,560
courses that we that we take as an

1112
00:39:24,560 --> 00:39:26,640
undergrad or grad student um they're

1113
00:39:26,640 --> 00:39:29,440
independent of what group is being used

1114
00:39:29,440 --> 00:39:31,119
and and they actually also work in shu's

1115
00:39:31,119 --> 00:39:32,800
model very easy to see that these work

1116
00:39:32,800 --> 00:39:34,079
in troops model

1117
00:39:34,079 --> 00:39:36,000
um but they don't work in mauer's model

1118
00:39:36,000 --> 00:39:37,440
and the reason is that really all that

1119
00:39:37,440 --> 00:39:39,599
we need to get these to work is some way

1120
00:39:39,599 --> 00:39:41,839
to interpret group elements as strings

1121
00:39:41,839 --> 00:39:43,359
maybe we need a little more some sort of

1122
00:39:43,359 --> 00:39:46,000
randomness property but we just more or

1123
00:39:46,000 --> 00:39:47,440
less need some way to interpret the

1124
00:39:47,440 --> 00:39:49,520
group elements as strings and malware's

1125
00:39:49,520 --> 00:39:51,040
model will explicitly for business from

1126
00:39:51,040 --> 00:39:52,640
doing that so these techniques don't

1127
00:39:52,640 --> 00:39:54,400
work

1128
00:39:54,400 --> 00:39:55,280
okay

1129
00:39:55,280 --> 00:39:57,440
um so we we give a few additional

1130
00:39:57,440 --> 00:39:58,880
results that kind of drives the point

1131
00:39:58,880 --> 00:39:59,599
home

1132
00:39:59,599 --> 00:40:01,119
showing that collision-resistant hash

1133
00:40:01,119 --> 00:40:02,720
functions with unbounded domain

1134
00:40:02,720 --> 00:40:05,920
pseudorandom permutations and rate one

1135
00:40:05,920 --> 00:40:07,839
um public key encryption just none of

1136
00:40:07,839 --> 00:40:10,720
these exist in malware's model

1137
00:40:10,720 --> 00:40:11,920
and what this shows is that if you're

1138
00:40:11,920 --> 00:40:13,920
going to prove a black box separation

1139
00:40:13,920 --> 00:40:15,040
mermaid if you're going to prove that

1140
00:40:15,040 --> 00:40:17,040
something is impossible you have to take

1141
00:40:17,040 --> 00:40:18,800
it with a big grain of salt because you

1142
00:40:18,800 --> 00:40:20,640
know these are all things that we

1143
00:40:20,640 --> 00:40:21,520
we know

1144
00:40:21,520 --> 00:40:23,680
even exist in the standard model

1145
00:40:23,680 --> 00:40:25,599
and are pretty standard

1146
00:40:25,599 --> 00:40:27,520
and don't exist in mars model so it

1147
00:40:27,520 --> 00:40:29,359
shows that you really need to

1148
00:40:29,359 --> 00:40:30,400
you know

1149
00:40:30,400 --> 00:40:32,000
some more careful interpretation of an

1150
00:40:32,000 --> 00:40:35,440
impossibility in ours model

1151
00:40:35,440 --> 00:40:37,839
okay so so now we've established that

1152
00:40:37,839 --> 00:40:40,079
the models are different so

1153
00:40:40,079 --> 00:40:42,880
how do we interpret the jager shrink

1154
00:40:42,880 --> 00:40:46,000
equip equivalents um

1155
00:40:46,000 --> 00:40:47,760
there's no flaw in their work there's no

1156
00:40:47,760 --> 00:40:50,319
there's no actual contradiction

1157
00:40:50,319 --> 00:40:52,480
but what actually happened here i think

1158
00:40:52,480 --> 00:40:53,760
is um

1159
00:40:53,760 --> 00:40:56,800
sort of just a change in perspective uh

1160
00:40:56,800 --> 00:40:57,760
um

1161
00:40:57,760 --> 00:40:59,839
so you know originally when generic

1162
00:40:59,839 --> 00:41:01,359
groups were proposed they were proposed

1163
00:41:01,359 --> 00:41:03,119
as methods for

1164
00:41:03,119 --> 00:41:05,520
analyzing the security of

1165
00:41:05,520 --> 00:41:07,440
computational assumptions on groups or

1166
00:41:07,440 --> 00:41:10,319
maybe crypto systems

1167
00:41:10,319 --> 00:41:11,200
and

1168
00:41:11,200 --> 00:41:13,280
they only started being used for black

1169
00:41:13,280 --> 00:41:14,640
box separations for proving

1170
00:41:14,640 --> 00:41:17,359
impossibilities some time later

1171
00:41:17,359 --> 00:41:19,839
maybe around a decade ago for example

1172
00:41:19,839 --> 00:41:21,280
with the

1173
00:41:21,280 --> 00:41:22,720
impossibility of identity based

1174
00:41:22,720 --> 00:41:26,000
encryption in the generic group model

1175
00:41:26,000 --> 00:41:28,000
um so with that in mind what jager

1176
00:41:28,000 --> 00:41:31,040
schwenk were proving was that

1177
00:41:31,040 --> 00:41:33,359
from the perspective of analyzing

1178
00:41:33,359 --> 00:41:35,359
security experiments

1179
00:41:35,359 --> 00:41:38,000
and not feasibility of cryptosystems the

1180
00:41:38,000 --> 00:41:40,400
models are actually equivalent in some

1181
00:41:40,400 --> 00:41:42,960
sense and there are some caveats here

1182
00:41:42,960 --> 00:41:44,240
but what they showed is that if you have

1183
00:41:44,240 --> 00:41:46,720
an adversary interacting with the game

1184
00:41:46,720 --> 00:41:48,480
and you have let's say an hour adversary

1185
00:41:48,480 --> 00:41:50,319
interacting with the game or or a shoot

1186
00:41:50,319 --> 00:41:52,400
adversary interacting with the game that

1187
00:41:52,400 --> 00:41:53,760
that you can go between them that you

1188
00:41:53,760 --> 00:41:55,440
can convert any malware adversary to a

1189
00:41:55,440 --> 00:41:57,599
shoot adversary and vice versa

1190
00:41:57,599 --> 00:41:59,440
and indeed this follows the intuition

1191
00:41:59,440 --> 00:42:01,200
that we talked about earlier that you

1192
00:42:01,200 --> 00:42:02,400
know there's not much you can do with a

1193
00:42:02,400 --> 00:42:04,480
random label other than feed it back

1194
00:42:04,480 --> 00:42:06,720
into the

1195
00:42:06,720 --> 00:42:08,800
into the oracle

1196
00:42:08,800 --> 00:42:11,680
um but the important caveats here is

1197
00:42:11,680 --> 00:42:14,079
that this equivalence only makes sense

1198
00:42:14,079 --> 00:42:16,640
if the game itself is a malware game if

1199
00:42:16,640 --> 00:42:18,319
the game itself works in mauer's model

1200
00:42:18,319 --> 00:42:20,079
the game itself works and

1201
00:42:20,079 --> 00:42:22,240
requires shoots model operate you know

1202
00:42:22,240 --> 00:42:23,760
say it's uh

1203
00:42:23,760 --> 00:42:24,880
you know i don't know it's the blue

1204
00:42:24,880 --> 00:42:27,040
macaulay prg or something like that

1205
00:42:27,040 --> 00:42:28,960
you would be in sort of it wouldn't make

1206
00:42:28,960 --> 00:42:31,359
sense to sort of to talk about malware

1207
00:42:31,359 --> 00:42:33,760
adversaries for shoop um security

1208
00:42:33,760 --> 00:42:35,280
experiments because the malware outside

1209
00:42:35,280 --> 00:42:36,720
wouldn't even be able to evaluate the

1210
00:42:36,720 --> 00:42:38,400
prg and you would end up with sort of

1211
00:42:38,400 --> 00:42:40,400
trivial or or

1212
00:42:40,400 --> 00:42:42,720
meaningless results

1213
00:42:42,720 --> 00:42:44,480
um so the jager strength equivalence

1214
00:42:44,480 --> 00:42:46,640
only applies if the game itself is

1215
00:42:46,640 --> 00:42:48,640
already a mower game which was the

1216
00:42:48,640 --> 00:42:49,520
setting

1217
00:42:49,520 --> 00:42:51,359
that was always considered in the

1218
00:42:51,359 --> 00:42:53,200
generic group model up until about a

1219
00:42:53,200 --> 00:42:55,680
decade ago

1220
00:42:55,680 --> 00:42:57,200
um there is a caveat that seems to have

1221
00:42:57,200 --> 00:42:59,440
gone unnoticed until now though

1222
00:42:59,440 --> 00:43:02,240
um which is that the younger shrank

1223
00:43:02,240 --> 00:43:03,760
equivalence only applies in what are

1224
00:43:03,760 --> 00:43:05,520
called single stage games so these are

1225
00:43:05,520 --> 00:43:07,280
most of the games we're familiar with in

1226
00:43:07,280 --> 00:43:09,440
the in cryptography the security of

1227
00:43:09,440 --> 00:43:11,760
signatures the security of encryption

1228
00:43:11,760 --> 00:43:14,160
cca cpa whatever

1229
00:43:14,160 --> 00:43:16,480
basically all the you know the classic

1230
00:43:16,480 --> 00:43:18,160
security games

1231
00:43:18,160 --> 00:43:19,920
um but there's another type of game

1232
00:43:19,920 --> 00:43:22,640
called multi-stage games where you have

1233
00:43:22,640 --> 00:43:25,280
multiple adversaries each interacting

1234
00:43:25,280 --> 00:43:27,119
with the game but the adversaries are

1235
00:43:27,119 --> 00:43:29,040
not allowed to interact with each other

1236
00:43:29,040 --> 00:43:31,839
except as regulated by the game

1237
00:43:31,839 --> 00:43:33,280
and some examples are things like

1238
00:43:33,280 --> 00:43:36,160
deterministic encryption where the

1239
00:43:36,160 --> 00:43:38,160
um the distribution of messages is

1240
00:43:38,160 --> 00:43:40,319
modeled as an adversary leakage

1241
00:43:40,319 --> 00:43:42,240
resilience where the leakage function is

1242
00:43:42,240 --> 00:43:44,720
modeled as an adversary or

1243
00:43:44,720 --> 00:43:46,720
one wayness against auxiliary inputs

1244
00:43:46,720 --> 00:43:49,599
where the distribution on inputs

1245
00:43:49,599 --> 00:43:51,680
is modeled as another adversary so

1246
00:43:51,680 --> 00:43:53,040
there's these classes of maybe more

1247
00:43:53,040 --> 00:43:55,599
exotic games that

1248
00:43:55,599 --> 00:43:56,560
are

1249
00:43:56,560 --> 00:43:58,720
are what we call multi-stage games and

1250
00:43:58,720 --> 00:44:00,079
it turns out that the jaeger shrink

1251
00:44:00,079 --> 00:44:03,200
equivalence does not apply to these

1252
00:44:03,200 --> 00:44:05,040
uh so this brings us to the second set

1253
00:44:05,040 --> 00:44:06,240
of results

1254
00:44:06,240 --> 00:44:09,520
um which is so we we sort of um

1255
00:44:09,520 --> 00:44:11,040
reinterpret the jaeger's rank

1256
00:44:11,040 --> 00:44:13,520
equivalents showing that

1257
00:44:13,520 --> 00:44:16,240
um any cryptosystem or game that works

1258
00:44:16,240 --> 00:44:18,960
in malware's model also works in shoot

1259
00:44:18,960 --> 00:44:21,040
so one direction the equivalence just

1260
00:44:21,040 --> 00:44:23,599
holds always

1261
00:44:23,599 --> 00:44:25,280
and we know that the converse is is

1262
00:44:25,280 --> 00:44:27,520
false in general by by kind of the prior

1263
00:44:27,520 --> 00:44:30,319
work and the prior results of this work

1264
00:44:30,319 --> 00:44:34,720
um then um if you have a maori game

1265
00:44:34,720 --> 00:44:37,680
then the converse actually does hold uh

1266
00:44:37,680 --> 00:44:40,240
i should say um

1267
00:44:40,240 --> 00:44:41,920
right so amongst our game if you have if

1268
00:44:41,920 --> 00:44:43,839
you have security against troupe then

1269
00:44:43,839 --> 00:44:45,760
you also have um security against

1270
00:44:45,760 --> 00:44:47,440
malware adversaries

1271
00:44:47,440 --> 00:44:50,240
um the converse of that only holds in

1272
00:44:50,240 --> 00:44:51,920
the single stage setting

1273
00:44:51,920 --> 00:44:53,599
um where you actually do get the full

1274
00:44:53,599 --> 00:44:55,359
equivalence and this is what jaeger's

1275
00:44:55,359 --> 00:44:56,560
trying to proved

1276
00:44:56,560 --> 00:44:58,960
and then we complement this with a

1277
00:44:58,960 --> 00:45:00,240
counter example showing that in the

1278
00:45:00,240 --> 00:45:02,400
multi-stage setting

1279
00:45:02,400 --> 00:45:03,520
malware

1280
00:45:03,520 --> 00:45:05,119
if you consider a security against

1281
00:45:05,119 --> 00:45:07,119
narrower type adversaries you actually

1282
00:45:07,119 --> 00:45:08,319
sort of

1283
00:45:08,319 --> 00:45:09,920
you you you can prove things secure that

1284
00:45:09,920 --> 00:45:11,680
shouldn't be secure um so we give a

1285
00:45:11,680 --> 00:45:13,040
deterministic encryption scheme that's

1286
00:45:13,040 --> 00:45:14,640
insecure and standard model insecure and

1287
00:45:14,640 --> 00:45:16,480
shoots model but you could you know

1288
00:45:16,480 --> 00:45:20,960
somehow prove secure in malware's model

1289
00:45:21,359 --> 00:45:23,119
okay

1290
00:45:23,119 --> 00:45:24,560
so

1291
00:45:24,560 --> 00:45:26,079
next i want to talk about

1292
00:45:26,079 --> 00:45:28,160
uninstantiability results

1293
00:45:28,160 --> 00:45:30,000
so this is

1294
00:45:30,000 --> 00:45:30,800
any

1295
00:45:30,800 --> 00:45:32,480
scheme that is secure in the generic

1296
00:45:32,480 --> 00:45:34,800
group model but insecure once you try to

1297
00:45:34,800 --> 00:45:37,520
instantiate the group the group with any

1298
00:45:37,520 --> 00:45:39,599
concrete group

1299
00:45:39,599 --> 00:45:40,560
um

1300
00:45:40,560 --> 00:45:43,599
and an observation is that all existing

1301
00:45:43,599 --> 00:45:45,040
single stage generic group

1302
00:45:45,040 --> 00:45:47,280
uninstantiability results actually only

1303
00:45:47,280 --> 00:45:49,119
work in troupe's model

1304
00:45:49,119 --> 00:45:50,960
and the the reason is is a typical

1305
00:45:50,960 --> 00:45:54,800
technique um will break the scheme

1306
00:45:54,800 --> 00:45:55,680
by

1307
00:45:55,680 --> 00:45:58,880
uh finding code for eight for the for

1308
00:45:58,880 --> 00:46:00,880
the group um

1309
00:46:00,880 --> 00:46:03,599
basically that such that you know h of x

1310
00:46:03,599 --> 00:46:05,760
equals the labeling function so if you

1311
00:46:05,760 --> 00:46:08,400
use this if you use the standard group

1312
00:46:08,400 --> 00:46:10,720
then the labeling function has code h

1313
00:46:10,720 --> 00:46:12,400
and so you just you know the adversary

1314
00:46:12,400 --> 00:46:15,280
can supply this and if you don't if you

1315
00:46:15,280 --> 00:46:17,839
have a generic group then you can't

1316
00:46:17,839 --> 00:46:21,839
and so all the existing single stage

1317
00:46:21,839 --> 00:46:23,680
uninstantiability results kind of have

1318
00:46:23,680 --> 00:46:25,920
this flavor and but this flavor only

1319
00:46:25,920 --> 00:46:28,319
makes sense in troupe's model and

1320
00:46:28,319 --> 00:46:30,000
particularly the crypto system that you

1321
00:46:30,000 --> 00:46:31,040
would

1322
00:46:31,040 --> 00:46:33,760
obtain the the game requires shupe's

1323
00:46:33,760 --> 00:46:37,280
model to operate because it actually

1324
00:46:37,280 --> 00:46:40,560
uses the labeling function itself

1325
00:46:40,560 --> 00:46:42,560
so this might lead you to think that

1326
00:46:42,560 --> 00:46:44,480
maybe malware's model can avoid these

1327
00:46:44,480 --> 00:46:46,800
uninstantiability results and we show no

1328
00:46:46,800 --> 00:46:49,440
it can't um and our our

1329
00:46:49,440 --> 00:46:51,119
our example is actually very simple it's

1330
00:46:51,119 --> 00:46:52,640
just bit wise

1331
00:46:52,640 --> 00:46:54,640
you just encrypt your message bitwise

1332
00:46:54,640 --> 00:46:57,119
with elgamal and then add one additional

1333
00:46:57,119 --> 00:46:58,640
bits of leakage

1334
00:46:58,640 --> 00:47:01,119
um this bit this leakage bits contrives

1335
00:47:01,119 --> 00:47:02,560
but you know the normal way we model

1336
00:47:02,560 --> 00:47:04,960
leakage resilience in crypto is

1337
00:47:04,960 --> 00:47:05,760
um

1338
00:47:05,760 --> 00:47:07,520
to allow the allow the leakage function

1339
00:47:07,520 --> 00:47:09,440
to be adversarial so this is

1340
00:47:09,440 --> 00:47:10,240
a

1341
00:47:10,240 --> 00:47:11,920
you know pretty

1342
00:47:11,920 --> 00:47:15,680
i guess a relatively uncontrived

1343
00:47:15,680 --> 00:47:18,079
scheme and it shows that oh and it works

1344
00:47:18,079 --> 00:47:19,440
in mauro's model

1345
00:47:19,440 --> 00:47:23,040
but it's nevertheless understandable

1346
00:47:23,200 --> 00:47:26,400
uh so next we we look at identity-based

1347
00:47:26,400 --> 00:47:27,680
encryption

1348
00:47:27,680 --> 00:47:30,000
and it turns out that the existing work

1349
00:47:30,000 --> 00:47:32,079
proving was proving the impossibility of

1350
00:47:32,079 --> 00:47:33,760
identi identity-based encryption from

1351
00:47:33,760 --> 00:47:34,880
groups

1352
00:47:34,880 --> 00:47:37,599
doesn't quite prove an impossibility

1353
00:47:37,599 --> 00:47:39,920
from shupe's model um

1354
00:47:39,920 --> 00:47:42,480
and i here i quoted some text from

1355
00:47:42,480 --> 00:47:44,640
from the paper and basically what they

1356
00:47:44,640 --> 00:47:46,559
say is they assume

1357
00:47:46,559 --> 00:47:48,079
that the

1358
00:47:48,079 --> 00:47:50,400
that all algorithms can only make

1359
00:47:50,400 --> 00:47:53,200
queries on group elements that they were

1360
00:47:53,200 --> 00:47:55,520
provided as input

1361
00:47:55,520 --> 00:47:56,960
but that's a malware type restriction

1362
00:47:56,960 --> 00:47:59,440
right it's it's saying you you know it's

1363
00:47:59,440 --> 00:48:00,880
sort of syntactically distinguishing

1364
00:48:00,880 --> 00:48:02,960
between bits and group elements and

1365
00:48:02,960 --> 00:48:04,559
taking the group and and saying you can

1366
00:48:04,559 --> 00:48:05,760
only operate on group elements in a

1367
00:48:05,760 --> 00:48:07,040
certain way

1368
00:48:07,040 --> 00:48:08,000
um

1369
00:48:08,000 --> 00:48:09,680
and this is actually not just the typo

1370
00:48:09,680 --> 00:48:12,800
it's um used um sort of crucially in the

1371
00:48:12,800 --> 00:48:14,160
in the proof

1372
00:48:14,160 --> 00:48:16,000
um so what we do is we just kind of go

1373
00:48:16,000 --> 00:48:18,160
through the proof and and sort of

1374
00:48:18,160 --> 00:48:19,920
redo it in a way that actually makes

1375
00:48:19,920 --> 00:48:21,680
sense in shoots model confirming that

1376
00:48:21,680 --> 00:48:23,119
actually identity-based encryption isn't

1377
00:48:23,119 --> 00:48:25,520
possible in shoots

1378
00:48:25,520 --> 00:48:27,599
uh okay and then finally we

1379
00:48:27,599 --> 00:48:29,839
we talk about the algebraic group model

1380
00:48:29,839 --> 00:48:31,200
so this has been a popular model

1381
00:48:31,200 --> 00:48:32,319
recently

1382
00:48:32,319 --> 00:48:33,359
for

1383
00:48:33,359 --> 00:48:35,760
analyzing the security of crypto systems

1384
00:48:35,760 --> 00:48:37,040
and here

1385
00:48:37,040 --> 00:48:38,559
the the model is

1386
00:48:38,559 --> 00:48:39,680
one where

1387
00:48:39,680 --> 00:48:41,920
you require so it's not not generic

1388
00:48:41,920 --> 00:48:43,359
you're allowed the adversary gets to you

1389
00:48:43,359 --> 00:48:45,920
know see the actual group representation

1390
00:48:45,920 --> 00:48:48,319
but you require that every group element

1391
00:48:48,319 --> 00:48:50,400
the adversary produces they have to

1392
00:48:50,400 --> 00:48:52,559
provide an explanation for they have to

1393
00:48:52,559 --> 00:48:54,880
provide a sequence of exponents such

1394
00:48:54,880 --> 00:48:57,119
that the exponent product

1395
00:48:57,119 --> 00:48:58,000
um

1396
00:48:58,000 --> 00:48:59,760
with the their input group elements

1397
00:48:59,760 --> 00:49:04,240
actually gives the element the outputted

1398
00:49:04,240 --> 00:49:06,480
um and our observation is that the

1399
00:49:06,480 --> 00:49:08,000
algebraic group model is actually not

1400
00:49:08,000 --> 00:49:09,599
fully specified

1401
00:49:09,599 --> 00:49:12,319
um in that work they were concerned

1402
00:49:12,319 --> 00:49:14,160
about um sort of trivial

1403
00:49:14,160 --> 00:49:16,240
uninstantiabilities where you can arise

1404
00:49:16,240 --> 00:49:18,319
from the ability to cast group elements

1405
00:49:18,319 --> 00:49:21,040
as bit strings and back again

1406
00:49:21,040 --> 00:49:22,880
and so they to get around this they say

1407
00:49:22,880 --> 00:49:25,040
well group elements should not um or

1408
00:49:25,040 --> 00:49:26,480
sorry non-group elements should not

1409
00:49:26,480 --> 00:49:27,599
depend

1410
00:49:27,599 --> 00:49:29,760
on group elements but they never really

1411
00:49:29,760 --> 00:49:32,319
elaborated on what this means

1412
00:49:32,319 --> 00:49:34,160
and our position is that the right way

1413
00:49:34,160 --> 00:49:37,040
to to think about this issue

1414
00:49:37,040 --> 00:49:40,000
is that the algebraic group model should

1415
00:49:40,000 --> 00:49:42,480
only be applied to malware type games

1416
00:49:42,480 --> 00:49:44,400
and this is this just cleanly resolves

1417
00:49:44,400 --> 00:49:46,079
it um so if you restrict the algebraic

1418
00:49:46,079 --> 00:49:48,800
group model to malware games then

1419
00:49:48,800 --> 00:49:50,559
you know lo and behold these kind of

1420
00:49:50,559 --> 00:49:52,640
trivial uninstant abilities resulting

1421
00:49:52,640 --> 00:49:53,920
from casting

1422
00:49:53,920 --> 00:49:55,520
uh group elements to strings and back

1423
00:49:55,520 --> 00:49:59,119
again don't don't play a role

1424
00:49:59,119 --> 00:50:01,119
i should mention that another concurrent

1425
00:50:01,119 --> 00:50:02,400
work also

1426
00:50:02,400 --> 00:50:03,920
observed the

1427
00:50:03,920 --> 00:50:06,160
ambiguity but they had a very different

1428
00:50:06,160 --> 00:50:08,319
interpretation

1429
00:50:08,319 --> 00:50:10,319
okay so this brings us to the final set

1430
00:50:10,319 --> 00:50:12,079
of results which is that under our

1431
00:50:12,079 --> 00:50:13,839
interpretation as a this is an immediate

1432
00:50:13,839 --> 00:50:16,079
corollary the algebraic group model is

1433
00:50:16,079 --> 00:50:18,319
actually incomparable to shuke's model

1434
00:50:18,319 --> 00:50:19,359
um

1435
00:50:19,359 --> 00:50:21,200
so there are limitations to the

1436
00:50:21,200 --> 00:50:23,839
algebraic group model um so it's not you

1437
00:50:23,839 --> 00:50:26,880
know necessarily between shoop's generic

1438
00:50:26,880 --> 00:50:28,559
group model and standard model for

1439
00:50:28,559 --> 00:50:30,640
example you would be able to prove

1440
00:50:30,640 --> 00:50:32,319
certain multi-stage games secure in the

1441
00:50:32,319 --> 00:50:33,760
algebraic group model that should not be

1442
00:50:33,760 --> 00:50:36,400
considered secure

1443
00:50:36,400 --> 00:50:38,240
and we also add an uninstantiability

1444
00:50:38,240 --> 00:50:39,599
result showing that the algebraic group

1445
00:50:39,599 --> 00:50:42,800
model is indeed uninstantiable

1446
00:50:42,800 --> 00:50:44,319
and this actually resolved an open

1447
00:50:44,319 --> 00:50:45,520
question from the original work on the

1448
00:50:45,520 --> 00:50:47,920
algebraic group model

1449
00:50:47,920 --> 00:50:50,400
okay um i had an open question but it's

1450
00:50:50,400 --> 00:50:51,359
not

1451
00:50:51,359 --> 00:50:53,200
i'll just skip it and just go to the

1452
00:50:53,200 --> 00:50:54,640
summary page

1453
00:50:54,640 --> 00:50:56,400
so the summary again shoop's model and

1454
00:50:56,400 --> 00:50:57,839
hours model should not be treated as the

1455
00:50:57,839 --> 00:50:59,520
same if you were going to be proving a

1456
00:50:59,520 --> 00:51:01,520
black box separation shupe is always

1457
00:51:01,520 --> 00:51:03,760
preferred malware model might be useful

1458
00:51:03,760 --> 00:51:06,240
for gaining some idea of what's going on

1459
00:51:06,240 --> 00:51:09,119
or guiding protocol design um

1460
00:51:09,119 --> 00:51:10,640
but in general if you can prove shoop

1461
00:51:10,640 --> 00:51:12,880
you should and for security proofs if

1462
00:51:12,880 --> 00:51:15,040
your game is single stage you're welcome

1463
00:51:15,040 --> 00:51:17,119
to use shoop or mower they are indeed

1464
00:51:17,119 --> 00:51:18,319
equivalent

1465
00:51:18,319 --> 00:51:19,760
but if you're in the multi-stage setting

1466
00:51:19,760 --> 00:51:21,359
maura's model is really unsuitable and

1467
00:51:21,359 --> 00:51:22,720
you should be using

1468
00:51:22,720 --> 00:51:25,680
and that's it thank you

1469
00:51:29,920 --> 00:51:32,000
all right we're running a little bit

1470
00:51:32,000 --> 00:51:33,760
over time so i think we'll have our next

1471
00:51:33,760 --> 00:51:36,240
speaker daniel come up and uh if we have

1472
00:51:36,240 --> 00:51:38,400
one quick question

1473
00:51:38,400 --> 00:51:39,680
we could take that

1474
00:51:39,680 --> 00:51:43,799
as daniel sets up

1475
00:52:58,559 --> 00:53:01,520
all right all right so our final talk of

1476
00:53:01,520 --> 00:53:03,200
the session is lower bounds on snarks

1477
00:53:03,200 --> 00:53:04,880
and the random oracle model and uh

1478
00:53:04,880 --> 00:53:07,359
daniel uh will give the talk

1479
00:53:07,359 --> 00:53:08,319
okay

1480
00:53:08,319 --> 00:53:10,240
thank you so we're going to discuss

1481
00:53:10,240 --> 00:53:12,400
today low bound on snarks in the random

1482
00:53:12,400 --> 00:53:14,559
workout model it's a joint work with

1483
00:53:14,559 --> 00:53:16,880
istha heitner from tel aviv university

1484
00:53:16,880 --> 00:53:18,400
and eliana guelph from barland

1485
00:53:18,400 --> 00:53:19,680
university

1486
00:53:19,680 --> 00:53:20,559
so

1487
00:53:20,559 --> 00:53:22,240
let's start with

1488
00:53:22,240 --> 00:53:24,079
breaking down snarts

1489
00:53:24,079 --> 00:53:26,880
succinct non-interactive arguments

1490
00:53:26,880 --> 00:53:28,880
and let's see we are all we are

1491
00:53:28,880 --> 00:53:30,160
cryptographic

1492
00:53:30,160 --> 00:53:32,559
audience most of us uh know about proof

1493
00:53:32,559 --> 00:53:34,960
systems and let's specifically focus for

1494
00:53:34,960 --> 00:53:37,200
one second an mp proof system that

1495
00:53:37,200 --> 00:53:40,319
approved p who wants to prove uh that

1496
00:53:40,319 --> 00:53:43,440
some instance x is uh

1497
00:53:43,440 --> 00:53:46,079
in some language l so he sends up with

1498
00:53:46,079 --> 00:53:48,480
pi and verifier verifies and everything

1499
00:53:48,480 --> 00:53:50,880
is good and

1500
00:53:50,880 --> 00:53:53,200
let's talk about what's the problem here

1501
00:53:53,200 --> 00:53:56,400
uh proof might be long so we're using a

1502
00:53:56,400 --> 00:53:58,160
crs

1503
00:53:58,160 --> 00:53:59,760
to use both for approval and the

1504
00:53:59,760 --> 00:54:02,160
verifier in order to allow shoulder

1505
00:54:02,160 --> 00:54:03,200
proof

1506
00:54:03,200 --> 00:54:04,480
uh

1507
00:54:04,480 --> 00:54:07,040
as shorter as we like

1508
00:54:07,040 --> 00:54:08,079
okay

1509
00:54:08,079 --> 00:54:10,079
so let's talk about the random oracle

1510
00:54:10,079 --> 00:54:10,960
model

1511
00:54:10,960 --> 00:54:14,319
which is specifically uh

1512
00:54:14,319 --> 00:54:17,680
a model which we replace the crs with a

1513
00:54:17,680 --> 00:54:20,160
random oracle that is a function who

1514
00:54:20,160 --> 00:54:22,559
takes bit strings of arbitrary length

1515
00:54:22,559 --> 00:54:25,280
two bit strings of specifically length

1516
00:54:25,280 --> 00:54:27,119
we'll call lambda is a security

1517
00:54:27,119 --> 00:54:30,000
parameter and the way that it works that

1518
00:54:30,000 --> 00:54:31,920
it sends a random

1519
00:54:31,920 --> 00:54:34,720
lambda line length bit string for each

1520
00:54:34,720 --> 00:54:37,760
input so approver interacts with random

1521
00:54:37,760 --> 00:54:38,799
oracle

1522
00:54:38,799 --> 00:54:41,920
then sends a proof pi to the verifier

1523
00:54:41,920 --> 00:54:44,240
and the fire also queries the random

1524
00:54:44,240 --> 00:54:45,440
oracle

1525
00:54:45,440 --> 00:54:48,000
and receives an input either accept or

1526
00:54:48,000 --> 00:54:50,400
reject

1527
00:54:51,119 --> 00:54:53,520
so when we are discussing this model

1528
00:54:53,520 --> 00:54:54,480
well

1529
00:54:54,480 --> 00:54:56,400
it's interesting to know what soundness

1530
00:54:56,400 --> 00:54:58,000
are we expecting we're expecting

1531
00:54:58,000 --> 00:55:00,079
soundness against uh probably

1532
00:55:00,079 --> 00:55:03,040
conventionally unlimited adversaries but

1533
00:55:03,040 --> 00:55:04,640
they are limited in the number of

1534
00:55:04,640 --> 00:55:06,000
queries they are making to the random

1535
00:55:06,000 --> 00:55:06,960
workflow

1536
00:55:06,960 --> 00:55:07,760
okay

1537
00:55:07,760 --> 00:55:08,559
and

1538
00:55:08,559 --> 00:55:11,119
for main of mainly technicality we

1539
00:55:11,119 --> 00:55:13,599
require some uh requirements on the

1540
00:55:13,599 --> 00:55:15,520
parameters so

1541
00:55:15,520 --> 00:55:19,280
it won't be completely trivial

1542
00:55:19,280 --> 00:55:20,880
so let's discuss completeness in this

1543
00:55:20,880 --> 00:55:22,240
model because we know completeness of

1544
00:55:22,240 --> 00:55:24,720
proof systems but uh that we have here

1545
00:55:24,720 --> 00:55:26,160
around a moral which changes the

1546
00:55:26,160 --> 00:55:29,200
completeness uh definition by a bit

1547
00:55:29,200 --> 00:55:32,480
and if you are having an instance fee

1548
00:55:32,480 --> 00:55:33,520
and

1549
00:55:33,520 --> 00:55:35,440
language l which we

1550
00:55:35,440 --> 00:55:38,079
allow for the stock think about as set

1551
00:55:38,079 --> 00:55:39,119
reset

1552
00:55:39,119 --> 00:55:42,000
and an instance fee is a formula which

1553
00:55:42,000 --> 00:55:45,280
you want to see if it's satisfiable then

1554
00:55:45,280 --> 00:55:47,119
the completeness says that

1555
00:55:47,119 --> 00:55:49,280
over high probability over the

1556
00:55:49,280 --> 00:55:51,599
distribution of the random oracle

1557
00:55:51,599 --> 00:55:54,079
we have that the verifier given the

1558
00:55:54,079 --> 00:55:55,440
proof

1559
00:55:55,440 --> 00:55:57,200
computed by the prover

1560
00:55:57,200 --> 00:56:00,240
will actually choose to accept okay

1561
00:56:00,240 --> 00:56:01,119
and

1562
00:56:01,119 --> 00:56:02,640
we get alpha completeness if this

1563
00:56:02,640 --> 00:56:06,640
probability is greater than alpha

1564
00:56:07,119 --> 00:56:09,920
so for soundness we have both parameters

1565
00:56:09,920 --> 00:56:12,319
which are t and epsilon and

1566
00:56:12,319 --> 00:56:14,799
t will be a bound of malicious approval

1567
00:56:14,799 --> 00:56:16,880
stability the number of queries he can

1568
00:56:16,880 --> 00:56:18,559
make to the random oracle

1569
00:56:18,559 --> 00:56:20,640
and epsilon will be a bound of its

1570
00:56:20,640 --> 00:56:23,119
security but the probability that he'll

1571
00:56:23,119 --> 00:56:24,640
actually manage to cheat

1572
00:56:24,640 --> 00:56:27,680
so we get tf7 soundness if for any

1573
00:56:27,680 --> 00:56:30,480
instance that is not satisfiable or in

1574
00:56:30,480 --> 00:56:32,319
in the general setting any input that

1575
00:56:32,319 --> 00:56:34,480
does not belong to the language we have

1576
00:56:34,480 --> 00:56:36,880
the probability uh t query

1577
00:56:36,880 --> 00:56:39,839
computationally unbounded adversary p

1578
00:56:39,839 --> 00:56:42,559
uh to make the verifier accept is

1579
00:56:42,559 --> 00:56:44,960
lower than epsilon

1580
00:56:44,960 --> 00:56:46,559
okay

1581
00:56:46,559 --> 00:56:49,119
so uh why do we like this model why it

1582
00:56:49,119 --> 00:56:51,839
is even important why am i considering

1583
00:56:51,839 --> 00:56:54,559
this as part of my research uh first it

1584
00:56:54,559 --> 00:56:56,559
is quite simple it's information

1585
00:56:56,559 --> 00:56:59,359
theoretic there are no uh

1586
00:56:59,359 --> 00:57:01,680
harness assumptions on groups or

1587
00:57:01,680 --> 00:57:04,400
anything like that uh that we need in

1588
00:57:04,400 --> 00:57:06,960
order to make useful constructions on

1589
00:57:06,960 --> 00:57:08,559
the first place

1590
00:57:08,559 --> 00:57:10,960
surely they are helping to build

1591
00:57:10,960 --> 00:57:13,440
stronger models uh but we we can

1592
00:57:13,440 --> 00:57:15,839
actually uh build models just in the by

1593
00:57:15,839 --> 00:57:17,200
random oracle

1594
00:57:17,200 --> 00:57:19,599
furthermore many known constructions our

1595
00:57:19,599 --> 00:57:21,839
first construction got started in the

1596
00:57:21,839 --> 00:57:24,960
random oracle model uh which we'll see

1597
00:57:24,960 --> 00:57:27,520
late shortly how snarks are constructed

1598
00:57:27,520 --> 00:57:29,760
in a random oracle model and

1599
00:57:29,760 --> 00:57:31,920
yeah when there are no constructions in

1600
00:57:31,920 --> 00:57:33,760
the underwater model there are also many

1601
00:57:33,760 --> 00:57:36,160
lower bounds in the rhino molecule model

1602
00:57:36,160 --> 00:57:39,280
when it is the basic step to prove it

1603
00:57:39,280 --> 00:57:40,880
all about

1604
00:57:40,880 --> 00:57:43,440
and which mainly is done by information

1605
00:57:43,440 --> 00:57:46,079
theoretic schemes and techniques

1606
00:57:46,079 --> 00:57:49,040
uh furthermore there's drum heuristic

1607
00:57:49,040 --> 00:57:50,720
which means that if you have a

1608
00:57:50,720 --> 00:57:52,640
construction of some primitive in the

1609
00:57:52,640 --> 00:57:54,799
random oracle model then you can switch

1610
00:57:54,799 --> 00:57:57,359
back to the standalone model by

1611
00:57:57,359 --> 00:57:59,839
replacing the random occur by some

1612
00:57:59,839 --> 00:58:02,240
lightweight people for example you can

1613
00:58:02,240 --> 00:58:04,160
take the random occult and substitute it

1614
00:58:04,160 --> 00:58:07,359
with some hash function when

1615
00:58:07,359 --> 00:58:08,880
and okay

1616
00:58:08,880 --> 00:58:09,760
so

1617
00:58:09,760 --> 00:58:12,640
this this haram heuristic has several uh

1618
00:58:12,640 --> 00:58:15,520
interesting features first one uh all of

1619
00:58:15,520 --> 00:58:16,960
the constructions are faster compute

1620
00:58:16,960 --> 00:58:19,280
because we use only lightweight crypto

1621
00:58:19,280 --> 00:58:23,280
and they need no trusted setup and well

1622
00:58:23,280 --> 00:58:25,200
potentially cross quantum depending on

1623
00:58:25,200 --> 00:58:27,200
which function are you using and how you

1624
00:58:27,200 --> 00:58:29,599
prove it in the random oracle model

1625
00:58:29,599 --> 00:58:32,720
and they are widely used in practice

1626
00:58:32,720 --> 00:58:34,000
okay

1627
00:58:34,000 --> 00:58:36,480
so let's talk about some snark

1628
00:58:36,480 --> 00:58:37,760
constructions

1629
00:58:37,760 --> 00:58:40,720
and the first one is due to mikali in

1630
00:58:40,720 --> 00:58:43,359
20194

1631
00:58:43,359 --> 00:58:46,319
which android the proof length of log t

1632
00:58:46,319 --> 00:58:49,200
over epsilon squared times slogan and is

1633
00:58:49,200 --> 00:58:51,359
the witness size for the np statement

1634
00:58:51,359 --> 00:58:52,880
and specifically we are talking about

1635
00:58:52,880 --> 00:58:55,280
reset here as well

1636
00:58:55,280 --> 00:58:57,520
and the number of verified queries to

1637
00:58:57,520 --> 00:59:00,319
the random oracle is log of t over

1638
00:59:00,319 --> 00:59:01,359
epsilon

1639
00:59:01,359 --> 00:59:02,640
okay

1640
00:59:02,640 --> 00:59:05,839
and recently approved in 2021 by cha

1641
00:59:05,839 --> 00:59:08,799
esta in yogev there are roof length of

1642
00:59:08,799 --> 00:59:11,280
log t over epsilon times log t times log

1643
00:59:11,280 --> 00:59:12,240
n

1644
00:59:12,240 --> 00:59:14,640
and the same number of vertical queries

1645
00:59:14,640 --> 00:59:15,839
and

1646
00:59:15,839 --> 00:59:17,839
you probably are asking yourself how did

1647
00:59:17,839 --> 00:59:18,880
you make

1648
00:59:18,880 --> 00:59:20,559
to manage build any of such

1649
00:59:20,559 --> 00:59:23,359
constructions so the overall view is the

1650
00:59:23,359 --> 00:59:25,839
following you took an if you take an

1651
00:59:25,839 --> 00:59:28,000
information theoretical for example a

1652
00:59:28,000 --> 00:59:29,760
pcp

1653
00:59:29,760 --> 00:59:31,680
and some sort of cryptographic

1654
00:59:31,680 --> 00:59:33,760
commitment scheme and mikali used the

1655
00:59:33,760 --> 00:59:36,160
miracle tree and chess and you give

1656
00:59:36,160 --> 00:59:38,720
specifically used a stronger notion of

1657
00:59:38,720 --> 00:59:41,520
pcp but a weaker version of commitment

1658
00:59:41,520 --> 00:59:44,480
scheme and they managed to

1659
00:59:44,480 --> 00:59:46,400
reduce the proof length so

1660
00:59:46,400 --> 00:59:48,640
you can see and have an intuition why

1661
00:59:48,640 --> 00:59:50,640
the commitment scheme is actually the

1662
00:59:50,640 --> 00:59:53,520
more heavier out here and we'll see in a

1663
00:59:53,520 --> 00:59:56,000
short while how this is helping us

1664
00:59:56,000 --> 00:59:56,960
okay

1665
00:59:56,960 --> 00:59:59,200
note that the verified queries stay the

1666
00:59:59,200 --> 01:00:01,920
same and this is because there's also a

1667
01:00:01,920 --> 01:00:04,480
known lower bound from json you get into

1668
01:00:04,480 --> 01:00:07,359
2020 which states that the number of

1669
01:00:07,359 --> 01:00:09,839
virtual queries required in order to

1670
01:00:09,839 --> 01:00:12,640
make such a scheme secure is indeed

1671
01:00:12,640 --> 01:00:14,960
omega of log of t of epsilon this is the

1672
01:00:14,960 --> 01:00:16,799
best we can hope for right now already

1673
01:00:16,799 --> 01:00:18,240
there

1674
01:00:18,240 --> 01:00:21,040
okay so in terms of roof length which is

1675
01:00:21,040 --> 01:00:23,280
the main uh

1676
01:00:23,280 --> 01:00:25,599
let's say parameter we're focusing on

1677
01:00:25,599 --> 01:00:28,319
we're talking about efficiency and this

1678
01:00:28,319 --> 01:00:30,079
is how the world looks like there was

1679
01:00:30,079 --> 01:00:32,640
mikali which was slightly more than

1680
01:00:32,640 --> 01:00:34,960
quadratic argument size

1681
01:00:34,960 --> 01:00:37,200
there's the trivial lower bound and

1682
01:00:37,200 --> 01:00:39,520
which is log t over epsilon

1683
01:00:39,520 --> 01:00:41,839
you can obtain it just by

1684
01:00:41,839 --> 01:00:43,440
playing with the definitions and

1685
01:00:43,440 --> 01:00:44,319
actually

1686
01:00:44,319 --> 01:00:46,799
just trying to cheat and hope you're the

1687
01:00:46,799 --> 01:00:49,920
best to yourself and see why chess enuge

1688
01:00:49,920 --> 01:00:51,760
has managed to improve the upper bound

1689
01:00:51,760 --> 01:00:53,040
by a bit

1690
01:00:53,040 --> 01:00:55,040
it is something quadratic which is

1691
01:00:55,040 --> 01:00:57,839
important but there is still a lot of

1692
01:00:57,839 --> 01:01:00,640
open space over here

1693
01:01:00,640 --> 01:01:03,440
so i've seen an open space so let's see

1694
01:01:03,440 --> 01:01:05,200
and improve the lower bar

1695
01:01:05,200 --> 01:01:07,359
and i'm going to discuss right now

1696
01:01:07,359 --> 01:01:10,079
although about

1697
01:01:10,079 --> 01:01:13,200
so this is out there it states that

1698
01:01:13,200 --> 01:01:14,000
uh

1699
01:01:14,000 --> 01:01:16,000
assuming directional randomized

1700
01:01:16,000 --> 01:01:18,160
exponential time hypothesis would state

1701
01:01:18,160 --> 01:01:19,200
that

1702
01:01:19,200 --> 01:01:22,400
sat cannot be proven by r cannot be

1703
01:01:22,400 --> 01:01:24,720
solved by a randomized algorithm

1704
01:01:24,720 --> 01:01:26,960
with with less than exponential linear

1705
01:01:26,960 --> 01:01:29,200
time 2 to the power of delta and for

1706
01:01:29,200 --> 01:01:30,720
some n

1707
01:01:30,720 --> 01:01:32,720
we are having the following

1708
01:01:32,720 --> 01:01:35,520
every snog in the random oracle which is

1709
01:01:35,520 --> 01:01:38,000
natural which i'll explain just just in

1710
01:01:38,000 --> 01:01:39,040
a second

1711
01:01:39,040 --> 01:01:40,319
has

1712
01:01:40,319 --> 01:01:42,799
which has t epsilon soundness

1713
01:01:42,799 --> 01:01:45,680
as also proof cells which is omega of

1714
01:01:45,680 --> 01:01:48,400
log t over epsilon times log t divided

1715
01:01:48,400 --> 01:01:50,799
by a log of q p which is the number of

1716
01:01:50,799 --> 01:01:53,040
queries the prover makes to the random

1717
01:01:53,040 --> 01:01:56,000
marker note that this is almost tight

1718
01:01:56,000 --> 01:01:58,559
because jessa and yogev's

1719
01:01:58,559 --> 01:02:01,839
constructions had a log n and

1720
01:02:01,839 --> 01:02:03,920
times uh

1721
01:02:03,920 --> 01:02:06,000
log qp

1722
01:02:06,000 --> 01:02:07,119
in length

1723
01:02:07,119 --> 01:02:10,000
okay so this is almost tight you can

1724
01:02:10,000 --> 01:02:12,799
think about qp as poly polynomial n so

1725
01:02:12,799 --> 01:02:15,039
it's actually log n squared uh in most

1726
01:02:15,039 --> 01:02:16,640
settings this is actually

1727
01:02:16,640 --> 01:02:19,599
correct and specifically

1728
01:02:19,599 --> 01:02:22,000
let's focus it now

1729
01:02:22,000 --> 01:02:24,559
okay so what are natural constructions

1730
01:02:24,559 --> 01:02:26,720
natural constructions enjoy the

1731
01:02:26,720 --> 01:02:28,880
following

1732
01:02:28,880 --> 01:02:31,119
let's say

1733
01:02:31,119 --> 01:02:33,359
okay natural constructions have

1734
01:02:33,359 --> 01:02:36,000
non-adaptive deterministic verifier this

1735
01:02:36,000 --> 01:02:38,319
means that when you get an

1736
01:02:38,319 --> 01:02:40,480
answer to some query to the random vocal

1737
01:02:40,480 --> 01:02:42,319
you don't use it to make another

1738
01:02:42,319 --> 01:02:44,319
creative random account this means that

1739
01:02:44,319 --> 01:02:46,960
you also can find a list of the queries

1740
01:02:46,960 --> 01:02:51,119
the random vocal before making any query

1741
01:02:51,119 --> 01:02:53,520
and enjoy salted soundness which i'll

1742
01:02:53,520 --> 01:02:56,000
also explain later in a in a different

1743
01:02:56,000 --> 01:02:57,599
slide

1744
01:02:57,599 --> 01:02:58,640
note that

1745
01:02:58,640 --> 01:03:01,440
we are we are requiring reasonable

1746
01:03:01,440 --> 01:03:03,119
number of queries both by the prover and

1747
01:03:03,119 --> 01:03:06,720
the verifier say polygam by approval um

1748
01:03:06,720 --> 01:03:08,319
for the verifier

1749
01:03:08,319 --> 01:03:09,750
not extremely

1750
01:03:09,750 --> 01:03:10,960
[Music]

1751
01:03:10,960 --> 01:03:11,839
large

1752
01:03:11,839 --> 01:03:14,078
and

1753
01:03:14,640 --> 01:03:16,720
this is more of a technical issue uh

1754
01:03:16,720 --> 01:03:19,280
over here for a low one not to be quite

1755
01:03:19,280 --> 01:03:21,760
trivial because you can use a large

1756
01:03:21,760 --> 01:03:24,400
amount of queries to make uh trivial

1757
01:03:24,400 --> 01:03:26,799
snarks for in some sense

1758
01:03:26,799 --> 01:03:28,559
and let's state

1759
01:03:28,559 --> 01:03:30,720
it is important to state that

1760
01:03:30,720 --> 01:03:32,240
current extractions

1761
01:03:32,240 --> 01:03:34,160
current constructions which are

1762
01:03:34,160 --> 01:03:37,039
non-contrived are are indeed natural

1763
01:03:37,039 --> 01:03:39,119
they do have salted sounds i'll explain

1764
01:03:39,119 --> 01:03:40,079
later

1765
01:03:40,079 --> 01:03:42,960
again what it is they are a

1766
01:03:42,960 --> 01:03:45,200
non-interactive or easily can made

1767
01:03:45,200 --> 01:03:48,160
non-interactive with allowing a constant

1768
01:03:48,160 --> 01:03:51,039
blow-up in argument size at most

1769
01:03:51,039 --> 01:03:53,599
and they have reasonable pq and

1770
01:03:53,599 --> 01:03:56,480
qp and qv

1771
01:03:56,720 --> 01:03:58,720
so this is how the world looks like for

1772
01:03:58,720 --> 01:04:01,119
natural constructions with this work we

1773
01:04:01,119 --> 01:04:04,000
can see mikali's argument and cys

1774
01:04:04,000 --> 01:04:05,680
constructions they say the same they're

1775
01:04:05,680 --> 01:04:07,200
also natural

1776
01:04:07,200 --> 01:04:09,680
and there are there's the improved lower

1777
01:04:09,680 --> 01:04:12,000
bound which almost matches the upper

1778
01:04:12,000 --> 01:04:13,680
bound uh

1779
01:04:13,680 --> 01:04:17,200
presented by jsn you get

1780
01:04:17,599 --> 01:04:18,640
okay

1781
01:04:18,640 --> 01:04:19,839
so

1782
01:04:19,839 --> 01:04:22,319
this directly implies a low bound on

1783
01:04:22,319 --> 01:04:24,960
sub-vector commitment which i'm going to

1784
01:04:24,960 --> 01:04:27,920
run through briefly but the main thing

1785
01:04:27,920 --> 01:04:30,160
you the main key take out from here is

1786
01:04:30,160 --> 01:04:31,680
that if you can build with a

1787
01:04:31,680 --> 01:04:34,079
cryptographic commitment scheme as nar

1788
01:04:34,079 --> 01:04:37,280
using a pcp then you can actually induce

1789
01:04:37,280 --> 01:04:39,440
a lower bound on sub vector commitment

1790
01:04:39,440 --> 01:04:41,200
from a lower bound on snarks

1791
01:04:41,200 --> 01:04:43,760
specifically if a subject of commitment

1792
01:04:43,760 --> 01:04:45,599
is t epsilon binding in the random

1793
01:04:45,599 --> 01:04:49,520
oracle model which is a similar uh

1794
01:04:49,520 --> 01:04:50,960
which is a similar definition to what

1795
01:04:50,960 --> 01:04:53,359
i've seen before and alpha is the

1796
01:04:53,359 --> 01:04:56,880
commitment length for the for the number

1797
01:04:56,880 --> 01:04:59,680
of n elements and beta of m is a

1798
01:04:59,680 --> 01:05:02,799
function would they was actually the

1799
01:05:02,799 --> 01:05:05,920
lengths of the string needed to open m

1800
01:05:05,920 --> 01:05:09,440
element then we get that alpha plus

1801
01:05:09,440 --> 01:05:13,280
beta evaluated at log t over epsilon is

1802
01:05:13,280 --> 01:05:14,480
uh

1803
01:05:14,480 --> 01:05:17,119
is of length at least omega log t over

1804
01:05:17,119 --> 01:05:19,760
epsilon times log t divided by log of

1805
01:05:19,760 --> 01:05:22,880
the number of queries the

1806
01:05:22,880 --> 01:05:25,200
subject or commitment the commitment

1807
01:05:25,200 --> 01:05:28,240
commitment party has

1808
01:05:28,240 --> 01:05:29,200
okay

1809
01:05:29,200 --> 01:05:32,079
and this is also thai because we have

1810
01:05:32,079 --> 01:05:34,079
american trees and other

1811
01:05:34,079 --> 01:05:36,000
construction they're actually actually

1812
01:05:36,000 --> 01:05:37,839
the construction in chess and you gave

1813
01:05:37,839 --> 01:05:40,799
is a subject of commitment

1814
01:05:40,799 --> 01:05:42,480
which almost matches

1815
01:05:42,480 --> 01:05:44,640
this lower one

1816
01:05:44,640 --> 01:05:46,880
and we prove it by showing that

1817
01:05:46,880 --> 01:05:48,880
sub-vector commitment together with a

1818
01:05:48,880 --> 01:05:52,400
pcp and indeed yield the snark

1819
01:05:52,400 --> 01:05:53,280
so

1820
01:05:53,280 --> 01:05:54,079
uh

1821
01:05:54,079 --> 01:05:56,319
you compile it and then uh get a

1822
01:05:56,319 --> 01:05:58,079
contradiction or however you want to

1823
01:05:58,079 --> 01:06:01,200
move it to the low bundles

1824
01:06:01,200 --> 01:06:02,880
okay

1825
01:06:02,880 --> 01:06:05,039
so let's discuss all that sounds because

1826
01:06:05,039 --> 01:06:07,119
uh this is the new definition that

1827
01:06:07,119 --> 01:06:09,280
what's uh noticing

1828
01:06:09,280 --> 01:06:11,440
and the main

1829
01:06:11,440 --> 01:06:13,359
idea of salted soundness is that

1830
01:06:13,359 --> 01:06:16,160
approval may query the random oracle

1831
01:06:16,160 --> 01:06:18,799
with specific query more than once

1832
01:06:18,799 --> 01:06:21,839
and get two different results he can

1833
01:06:21,839 --> 01:06:24,079
choose from let's talk about it more

1834
01:06:24,079 --> 01:06:25,280
formally

1835
01:06:25,280 --> 01:06:27,440
malicious proverbial query x

1836
01:06:27,440 --> 01:06:28,720
receives a y

1837
01:06:28,720 --> 01:06:31,920
and he may choose to query x once again

1838
01:06:31,920 --> 01:06:34,240
and get another y now

1839
01:06:34,240 --> 01:06:37,200
both y and y prime shown here

1840
01:06:37,200 --> 01:06:39,920
are independent and uniform of the

1841
01:06:39,920 --> 01:06:42,160
strings of length lambda the security

1842
01:06:42,160 --> 01:06:43,440
parameter

1843
01:06:43,440 --> 01:06:46,720
but they are distinct and the prover the

1844
01:06:46,720 --> 01:06:49,200
malicious proverb in in this sense

1845
01:06:49,200 --> 01:06:52,000
can choose which one that he likes if he

1846
01:06:52,000 --> 01:06:54,960
wants uh to take out y as the answer to

1847
01:06:54,960 --> 01:06:57,760
x he can choose if you take one to take

1848
01:06:57,760 --> 01:07:00,160
one y prime you can choose that as well

1849
01:07:00,160 --> 01:07:03,359
and then malicious approval sends a

1850
01:07:03,359 --> 01:07:06,160
message pi to the verb file the same way

1851
01:07:06,160 --> 01:07:07,520
we've seen again

1852
01:07:07,520 --> 01:07:08,319
and

1853
01:07:08,319 --> 01:07:10,319
the random marker the verifier have

1854
01:07:10,319 --> 01:07:11,520
access to

1855
01:07:11,520 --> 01:07:14,240
is fixed with the queries this means

1856
01:07:14,240 --> 01:07:16,319
that if the malicious prover have chosen

1857
01:07:16,319 --> 01:07:19,760
y prime and the verifier queries x he

1858
01:07:19,760 --> 01:07:21,839
will get right prime

1859
01:07:21,839 --> 01:07:24,079
okay this is a limited

1860
01:07:24,079 --> 01:07:28,319
ability to program the random oracle

1861
01:07:28,319 --> 01:07:31,359
and note that non-construction do indeed

1862
01:07:31,359 --> 01:07:33,760
have salted salmons it is actually quite

1863
01:07:33,760 --> 01:07:36,720
easy to prove from michali and

1864
01:07:36,720 --> 01:07:40,079
other construction do have this as well

1865
01:07:40,079 --> 01:07:42,880
and it is very easy to construct this

1866
01:07:42,880 --> 01:07:46,079
snog which has no centered sounders but

1867
01:07:46,079 --> 01:07:48,799
we haven't found until today a way to

1868
01:07:48,799 --> 01:07:50,720
use this to actually create a shorter

1869
01:07:50,720 --> 01:07:52,880
argument size

1870
01:07:52,880 --> 01:07:53,920
so

1871
01:07:53,920 --> 01:07:54,880
um

1872
01:07:54,880 --> 01:07:58,079
or and in addition it is seems quite

1873
01:07:58,079 --> 01:08:00,160
hard to get rid of flopper sounds

1874
01:08:00,160 --> 01:08:02,400
without making the fire adaptive in some

1875
01:08:02,400 --> 01:08:03,760
sense

1876
01:08:03,760 --> 01:08:05,039
okay

1877
01:08:05,039 --> 01:08:05,839
so

1878
01:08:05,839 --> 01:08:08,000
how do we prove our lower bound

1879
01:08:08,000 --> 01:08:10,160
now and now that we know what is salted

1880
01:08:10,160 --> 01:08:12,720
sounds we take a snog with a short proof

1881
01:08:12,720 --> 01:08:15,280
length and transform it with snow with

1882
01:08:15,280 --> 01:08:17,600
small verifier complexity

1883
01:08:17,600 --> 01:08:20,399
and specifically does the lower bound of

1884
01:08:20,399 --> 01:08:23,839
json ugev from 2020 states that a smart

1885
01:08:23,839 --> 01:08:26,000
snark with small perfect query

1886
01:08:26,000 --> 01:08:29,040
complexity can be transformed to a fast

1887
01:08:29,040 --> 01:08:30,960
algorithm for a stat

1888
01:08:30,960 --> 01:08:33,679
this means that if we have snag with two

1889
01:08:33,679 --> 01:08:35,198
small proof lines

1890
01:08:35,198 --> 01:08:37,040
smaller than the lower bound we are

1891
01:08:37,040 --> 01:08:40,158
about to see we will get as now with

1892
01:08:40,158 --> 01:08:42,640
small ray complexity which will then

1893
01:08:42,640 --> 01:08:44,960
enable maybe to transform to a

1894
01:08:44,960 --> 01:08:48,000
sub-exponential fast algorithm versus it

1895
01:08:48,000 --> 01:08:49,520
will be randomized but this will

1896
01:08:49,520 --> 01:08:50,880
contradict the exponential time

1897
01:08:50,880 --> 01:08:52,399
hypothesis

1898
01:08:52,399 --> 01:08:53,359
so

1899
01:08:53,359 --> 01:08:55,759
let's talk a bit more about properties

1900
01:08:55,759 --> 01:08:57,520
of this transformation

1901
01:08:57,520 --> 01:09:00,080
well the proof size is unchanged

1902
01:09:00,080 --> 01:09:03,359
actually the proof itself is unchanged

1903
01:09:03,359 --> 01:09:05,759
and especially its size

1904
01:09:05,759 --> 01:09:08,399
in addition soundness is unchanged note

1905
01:09:08,399 --> 01:09:09,198
that

1906
01:09:09,198 --> 01:09:11,279
we require the original snug with a

1907
01:09:11,279 --> 01:09:13,198
small proof length to have salted

1908
01:09:13,198 --> 01:09:15,920
salmons and the snow with small query

1909
01:09:15,920 --> 01:09:17,679
complexity will have

1910
01:09:17,679 --> 01:09:18,479
a

1911
01:09:18,479 --> 01:09:20,399
not experimental for salted sounds but

1912
01:09:20,399 --> 01:09:22,560
will have regular sadness with the same

1913
01:09:22,560 --> 01:09:24,719
parameter epsilon

1914
01:09:24,719 --> 01:09:27,359
and non-trivial completeness and when i

1915
01:09:27,359 --> 01:09:30,000
mean not when i say non-trivial i mean

1916
01:09:30,000 --> 01:09:33,279
that the completeness is slightly larger

1917
01:09:33,279 --> 01:09:35,679
than the soundness error well this is

1918
01:09:35,679 --> 01:09:36,399
not

1919
01:09:36,399 --> 01:09:38,238
the best competitors you would hope for

1920
01:09:38,238 --> 01:09:41,198
but it actually it is actually enough to

1921
01:09:41,198 --> 01:09:43,359
compute to transform it to fast

1922
01:09:43,359 --> 01:09:45,520
algorithm for some so i wouldn't

1923
01:09:45,520 --> 01:09:47,920
recommend doing this in a practical

1924
01:09:47,920 --> 01:09:49,839
world but it is enough to put the lower

1925
01:09:49,839 --> 01:09:51,759
bound

1926
01:09:51,759 --> 01:09:54,800
and the ver fire running time of the new

1927
01:09:54,800 --> 01:09:57,840
construction here is t to power of one

1928
01:09:57,840 --> 01:10:01,040
of our constants so

1929
01:10:01,040 --> 01:10:03,760
and where complexity is slightly less

1930
01:10:03,760 --> 01:10:06,320
than log of t over epsilon for the lower

1931
01:10:06,320 --> 01:10:08,480
bound if if you take exactly what the

1932
01:10:08,480 --> 01:10:11,440
lower one states it will get to log of e

1933
01:10:11,440 --> 01:10:13,920
over epsilon

1934
01:10:13,920 --> 01:10:14,640
so

1935
01:10:14,640 --> 01:10:15,920
let's discuss this information and

1936
01:10:15,920 --> 01:10:17,679
explain you how it works

1937
01:10:17,679 --> 01:10:20,560
so first let the node okay so the first

1938
01:10:20,560 --> 01:10:22,719
thing we're going to do is describe the

1939
01:10:22,719 --> 01:10:25,360
new valve y because the prover

1940
01:10:25,360 --> 01:10:28,640
of the new snog is completely unchanged

1941
01:10:28,640 --> 01:10:32,320
so let's let the oracle as zeta which

1942
01:10:32,320 --> 01:10:34,560
takes again these strings to run a bit

1943
01:10:34,560 --> 01:10:36,880
strings of length lambda

1944
01:10:36,880 --> 01:10:38,719
we have an input

1945
01:10:38,719 --> 01:10:41,920
which is the formula fee and the proof

1946
01:10:41,920 --> 01:10:44,719
by generated by the approval

1947
01:10:44,719 --> 01:10:46,320
and we're going to do the following

1948
01:10:46,320 --> 01:10:48,880
first let's enumerate the not the

1949
01:10:48,880 --> 01:10:51,600
queries of the original verify

1950
01:10:51,600 --> 01:10:56,080
when run on v and pi as u1 up to um i

1951
01:10:56,080 --> 01:10:57,199
mean some

1952
01:10:57,199 --> 01:10:59,760
parameter and recall that v is

1953
01:10:59,760 --> 01:11:02,320
non-adaptive so we can do this

1954
01:11:02,320 --> 01:11:03,679
okay there is no

1955
01:11:03,679 --> 01:11:06,320
we know in advance all of the queries

1956
01:11:06,320 --> 01:11:08,480
together

1957
01:11:08,480 --> 01:11:10,640
and the next thing we're going to do is

1958
01:11:10,640 --> 01:11:14,640
to sample a k1 k size subset of these

1959
01:11:14,640 --> 01:11:16,960
indices of the m indices it will

1960
01:11:16,960 --> 01:11:20,080
correspond to a set of length k of the

1961
01:11:20,080 --> 01:11:21,199
queries

1962
01:11:21,199 --> 01:11:22,560
why is this

1963
01:11:22,560 --> 01:11:25,120
we are actually three different

1964
01:11:25,120 --> 01:11:27,920
queries that in that are in the set and

1965
01:11:27,920 --> 01:11:30,239
various that are not queries that are in

1966
01:11:30,239 --> 01:11:32,880
this set we're going to query as usual

1967
01:11:32,880 --> 01:11:34,719
to the random oracle

1968
01:11:34,719 --> 01:11:37,199
whereas that are not in this set we are

1969
01:11:37,199 --> 01:11:39,440
gonna for them we're gonna uniformly

1970
01:11:39,440 --> 01:11:41,440
choose two to the power of gamma a

1971
01:11:41,440 --> 01:11:44,400
parameter candidate answers which are

1972
01:11:44,400 --> 01:11:46,960
independent random bit strings

1973
01:11:46,960 --> 01:11:49,199
so let me repeat that again to make sure

1974
01:11:49,199 --> 01:11:51,280
everything is clear we're gonna

1975
01:11:51,280 --> 01:11:53,120
query for

1976
01:11:53,120 --> 01:11:54,800
indices in j

1977
01:11:54,800 --> 01:11:57,360
as usual and when this is not in j we're

1978
01:11:57,360 --> 01:12:00,000
gonna create a large number a really

1979
01:12:00,000 --> 01:12:02,400
random number of candidate answers

1980
01:12:02,400 --> 01:12:05,040
and except if any combination of the

1981
01:12:05,040 --> 01:12:07,120
candidate answers for the query queries

1982
01:12:07,120 --> 01:12:08,880
knocking j together with the random

1983
01:12:08,880 --> 01:12:10,560
chord random oracle answers that

1984
01:12:10,560 --> 01:12:13,520
requires inj make the original verifier

1985
01:12:13,520 --> 01:12:14,719
accept

1986
01:12:14,719 --> 01:12:15,920
and this is well defined because the

1987
01:12:15,920 --> 01:12:18,560
verifier is not adapted

1988
01:12:18,560 --> 01:12:21,199
so we'll take a gamma to be around log t

1989
01:12:21,199 --> 01:12:23,600
log t over four for example

1990
01:12:23,600 --> 01:12:27,280
and k be the proof size divided by gamma

1991
01:12:27,280 --> 01:12:30,000
again this is our notation over here and

1992
01:12:30,000 --> 01:12:32,320
we'll we'll state that if the original

1993
01:12:32,320 --> 01:12:34,000
snag has t and epsilon unsalted

1994
01:12:34,000 --> 01:12:36,320
soundness then the new snark we're going

1995
01:12:36,320 --> 01:12:39,360
to have with p and v slide as t epsilon

1996
01:12:39,360 --> 01:12:41,280
soundness

1997
01:12:41,280 --> 01:12:43,760
and there is those also non-trivial

1998
01:12:43,760 --> 01:12:45,600
completeness when for our choices

1999
01:12:45,600 --> 01:12:48,320
parameter is slightly larger than

2000
01:12:48,320 --> 01:12:50,640
epsilon the soundness

2001
01:12:50,640 --> 01:12:51,920
parameter

2002
01:12:51,920 --> 01:12:54,560
so it is indeed a non-triple star

2003
01:12:54,560 --> 01:12:56,159
and let's discuss motivating examples

2004
01:12:56,159 --> 01:12:57,679
here because

2005
01:12:57,679 --> 01:13:00,800
i want you to understand why is this

2006
01:13:00,800 --> 01:13:02,159
built this way

2007
01:13:02,159 --> 01:13:04,960
and we're going to divide a word to to

2008
01:13:04,960 --> 01:13:07,679
the the queries of the local two two

2009
01:13:07,679 --> 01:13:10,880
types one that is has to be made anyway

2010
01:13:10,880 --> 01:13:12,880
to the random vocal and one that we

2011
01:13:12,880 --> 01:13:15,040
somehow can get rid of so let's see how

2012
01:13:15,040 --> 01:13:18,239
it goes the first example is following

2013
01:13:18,239 --> 01:13:20,239
there is a proof by who

2014
01:13:20,239 --> 01:13:22,800
is actually made of one answer to the

2015
01:13:22,800 --> 01:13:25,199
random to a query for the to the random

2016
01:13:25,199 --> 01:13:26,159
marker

2017
01:13:26,159 --> 01:13:30,000
so the val file where is that gray and

2018
01:13:30,000 --> 01:13:31,360
compares with the answer within the

2019
01:13:31,360 --> 01:13:34,320
proof except it is if it's equal reject

2020
01:13:34,320 --> 01:13:35,600
if not

2021
01:13:35,600 --> 01:13:36,480
and

2022
01:13:36,480 --> 01:13:38,719
what we what remaining that in our

2023
01:13:38,719 --> 01:13:41,040
transformation if we choose this query

2024
01:13:41,040 --> 01:13:43,600
as the set of j we created random marker

2025
01:13:43,600 --> 01:13:46,080
we will manage to get the new verifier

2026
01:13:46,080 --> 01:13:48,880
to accept and if not we have no chance

2027
01:13:48,880 --> 01:13:51,199
of doing so because we are only sampling

2028
01:13:51,199 --> 01:13:53,120
2 to the power of gamma options when

2029
01:13:53,120 --> 01:13:54,960
there are 2 to the power of lambda

2030
01:13:54,960 --> 01:13:57,920
options so the probability is bounded by

2031
01:13:57,920 --> 01:13:59,679
2 to the power of gamma minus lambda

2032
01:13:59,679 --> 01:14:00,719
which is

2033
01:14:00,719 --> 01:14:03,199
exponentially small in

2034
01:14:03,199 --> 01:14:04,480
block t

2035
01:14:04,480 --> 01:14:07,360
it's actually a polynomial in t

2036
01:14:07,360 --> 01:14:08,719
in this point number

2037
01:14:08,719 --> 01:14:09,520
so

2038
01:14:09,520 --> 01:14:12,000
note that we have to make them intersect

2039
01:14:12,000 --> 01:14:14,880
but a short proof cannot have many of

2040
01:14:14,880 --> 01:14:16,880
these queries written inside the book

2041
01:14:16,880 --> 01:14:18,640
because each one of them is a uniform

2042
01:14:18,640 --> 01:14:22,000
random string and has large entropy

2043
01:14:22,000 --> 01:14:24,320
in the other in the other hand we have

2044
01:14:24,320 --> 01:14:27,280
this stock which takes a k queries and

2045
01:14:27,280 --> 01:14:30,159
sort them and put the answer in a proof

2046
01:14:30,159 --> 01:14:31,360
so

2047
01:14:31,360 --> 01:14:34,320
it's a game of the same length but if

2048
01:14:34,320 --> 01:14:36,960
for each query we query we're having 2

2049
01:14:36,960 --> 01:14:39,040
to the power of gamma options

2050
01:14:39,040 --> 01:14:42,560
and gamma is indeed large and gamma is

2051
01:14:42,560 --> 01:14:44,400
indeed large enough more than lambda

2052
01:14:44,400 --> 01:14:46,880
over k then we will manage to find fit

2053
01:14:46,880 --> 01:14:49,199
an answer uh you can see power's

2054
01:14:49,199 --> 01:14:53,520
independence of the xor of two different

2055
01:14:53,520 --> 01:14:56,719
answer options and then yield that it is

2056
01:14:56,719 --> 01:14:59,679
actually uh plausible you will find the

2057
01:14:59,679 --> 01:15:02,159
fitting solution one that the consort is

2058
01:15:02,159 --> 01:15:04,320
indeed what's written

2059
01:15:04,320 --> 01:15:06,960
so we either have query we want to say

2060
01:15:06,960 --> 01:15:09,120
that the other half queries that we are

2061
01:15:09,120 --> 01:15:10,960
need to be in the proof

2062
01:15:10,960 --> 01:15:12,960
and because they have entropy that make

2063
01:15:12,960 --> 01:15:15,280
it too large or one that can get rid of

2064
01:15:15,280 --> 01:15:18,239
this is the one that in j and not in j

2065
01:15:18,239 --> 01:15:19,440
respectively

2066
01:15:19,440 --> 01:15:20,960
so let's discuss completeness we're

2067
01:15:20,960 --> 01:15:22,800
going to show a lemma

2068
01:15:22,800 --> 01:15:26,080
that shows that we must make around the

2069
01:15:26,080 --> 01:15:28,080
length of the proof divided by gamma

2070
01:15:28,080 --> 01:15:29,840
queries and the rest can be completed by

2071
01:15:29,840 --> 01:15:32,080
the uniform sampling that we discussed

2072
01:15:32,080 --> 01:15:33,280
earlier

2073
01:15:33,280 --> 01:15:36,239
it will be with particular probability

2074
01:15:36,239 --> 01:15:39,040
and the probability that v will guess

2075
01:15:39,040 --> 01:15:40,000
indeed

2076
01:15:40,000 --> 01:15:42,320
the queries that it actually needs to

2077
01:15:42,320 --> 01:15:45,679
make to random occur is small but as

2078
01:15:45,679 --> 01:15:47,120
long as j small

2079
01:15:47,120 --> 01:15:49,360
it is slightly larger than the soundness

2080
01:15:49,360 --> 01:15:52,599
error epsilon

2081
01:15:52,800 --> 01:15:54,960
uh does here are the amount that states

2082
01:15:54,960 --> 01:15:58,719
exactly that let's x the node to be a

2083
01:15:58,719 --> 01:16:01,199
series of random variables uh with n

2084
01:16:01,199 --> 01:16:03,120
coordinates of a

2085
01:16:03,120 --> 01:16:05,520
lambda bit strings to the power of n

2086
01:16:05,520 --> 01:16:08,159
which has high entropy almost they're

2087
01:16:08,159 --> 01:16:10,719
missing l bits to have full entropy

2088
01:16:10,719 --> 01:16:11,600
then

2089
01:16:11,600 --> 01:16:14,480
a sample consists of

2090
01:16:14,480 --> 01:16:16,400
about o of l

2091
01:16:16,400 --> 01:16:18,560
divided by gamma binding on us one that

2092
01:16:18,560 --> 01:16:20,960
you have to

2093
01:16:20,960 --> 01:16:23,920
fix and the other can be completed in

2094
01:16:23,920 --> 01:16:25,120
front of something

2095
01:16:25,120 --> 01:16:25,920
and

2096
01:16:25,920 --> 01:16:29,440
first we show that for a specific subset

2097
01:16:29,440 --> 01:16:30,960
uh all

2098
01:16:30,960 --> 01:16:32,800
if we fix that we have

2099
01:16:32,800 --> 01:16:34,880
large np for everything

2100
01:16:34,880 --> 01:16:36,800
and sorry i'm running it because i don't

2101
01:16:36,800 --> 01:16:39,120
have really much time

2102
01:16:39,120 --> 01:16:40,719
and

2103
01:16:40,719 --> 01:16:43,440
okay we can discuss it later if you want

2104
01:16:43,440 --> 01:16:46,320
come to me or read the paper um that's

2105
01:16:46,320 --> 01:16:48,400
cast soundness souness is actually

2106
01:16:48,400 --> 01:16:50,159
coming directly from the fact that we

2107
01:16:50,159 --> 01:16:52,320
have salted saunas uh as you described

2108
01:16:52,320 --> 01:16:55,520
earlier you can start the following uh

2109
01:16:55,520 --> 01:16:57,040
malicious further

2110
01:16:57,040 --> 01:17:00,080
given animalism with the force v glide

2111
01:17:00,080 --> 01:17:03,120
uh the first thing it does is simulates

2112
01:17:03,120 --> 01:17:05,760
uh p prime to obtain a booth

2113
01:17:05,760 --> 01:17:09,840
and then it emulates the r new verifier

2114
01:17:09,840 --> 01:17:11,840
and the verified where is the random

2115
01:17:11,840 --> 01:17:14,000
occult so you simulate it by wearing

2116
01:17:14,000 --> 01:17:16,239
install in the game we discussed earlier

2117
01:17:16,239 --> 01:17:18,880
for sorted soundness you'll see uh on

2118
01:17:18,880 --> 01:17:20,880
one minute

2119
01:17:20,880 --> 01:17:24,239
and choose the answer that will make the

2120
01:17:24,239 --> 01:17:26,400
our new buffer accept it samples a lot

2121
01:17:26,400 --> 01:17:28,880
of options you can sample them

2122
01:17:28,880 --> 01:17:30,800
in the solid soundness game i described

2123
01:17:30,800 --> 01:17:31,840
earlier

2124
01:17:31,840 --> 01:17:32,719
and

2125
01:17:32,719 --> 01:17:33,600
then

2126
01:17:33,600 --> 01:17:36,320
because these two games are identical

2127
01:17:36,320 --> 01:17:38,239
both attack and the game are quite

2128
01:17:38,239 --> 01:17:41,440
identical in nature we can find uh the

2129
01:17:41,440 --> 01:17:44,960
combination was making it to accept

2130
01:17:44,960 --> 01:17:47,120
and this house looked like both for the

2131
01:17:47,120 --> 01:17:49,360
sounded soundness game and what we

2132
01:17:49,360 --> 01:17:51,440
thought actually does but the verifier

2133
01:17:51,440 --> 01:17:55,360
does in the artisans so let's conclude

2134
01:17:55,360 --> 01:17:57,679
uh we have noise in the under marker

2135
01:17:57,679 --> 01:17:59,920
model who have optimal size between log

2136
01:17:59,920 --> 01:18:02,159
t over epsilon times the t times log n

2137
01:18:02,159 --> 01:18:04,239
js and you give and

2138
01:18:04,239 --> 01:18:06,960
our log p over epsilon

2139
01:18:06,960 --> 01:18:09,600
uh but for natural constructions we are

2140
01:18:09,600 --> 01:18:13,120
over almost a notching lower oh low ones

2141
01:18:13,120 --> 01:18:13,920
and

2142
01:18:13,920 --> 01:18:16,320
it is less left open to find a general

2143
01:18:16,320 --> 01:18:18,880
robot without requiring non-activity or

2144
01:18:18,880 --> 01:18:21,520
assaulted soundness or to improve to

2145
01:18:21,520 --> 01:18:23,440
improve our current constructions which

2146
01:18:23,440 --> 01:18:24,800
scenario that does not have salted

2147
01:18:24,800 --> 01:18:27,360
soundness and indeed is shorter inside

2148
01:18:27,360 --> 01:18:29,360
in argument

2149
01:18:29,360 --> 01:18:31,679
thank you

2150
01:18:38,719 --> 01:18:40,480
if there's any questions uh please come

2151
01:18:40,480 --> 01:18:42,560
to the microphone or type your question

2152
01:18:42,560 --> 01:18:45,199
in on zoom

2153
01:18:46,320 --> 01:18:48,719
so i guess so um one quick question

2154
01:18:48,719 --> 01:18:51,679
while we're waiting um i wonder uh if

2155
01:18:51,679 --> 01:18:54,880
you wanted to speculate uh um is it

2156
01:18:54,880 --> 01:18:56,960
going to be possible to build uh an

2157
01:18:56,960 --> 01:18:58,800
improved snark you know that's kind of

2158
01:18:58,800 --> 01:19:02,080
unnatural or do you think the current

2159
01:19:02,080 --> 01:19:04,640
lower bound is actually the right uh

2160
01:19:04,640 --> 01:19:06,880
right answer even if you eliminate this

2161
01:19:06,880 --> 01:19:09,120
natural assumption

2162
01:19:09,120 --> 01:19:11,760
um personally i think

2163
01:19:11,760 --> 01:19:13,199
the correct answer is that the lower

2164
01:19:13,199 --> 01:19:15,600
bound can be expanded and i think it

2165
01:19:15,600 --> 01:19:16,719
will be

2166
01:19:16,719 --> 01:19:18,000
quite easier to

2167
01:19:18,000 --> 01:19:20,840
expand it assuming some other more

2168
01:19:20,840 --> 01:19:22,320
natural uh

2169
01:19:22,320 --> 01:19:23,600
constructions

2170
01:19:23,600 --> 01:19:25,920
or let's say zero knowledge snarks or

2171
01:19:25,920 --> 01:19:28,000
everything like that and i think for the

2172
01:19:28,000 --> 01:19:29,920
general case it holds as well law one

2173
01:19:29,920 --> 01:19:32,640
should hold as well

2174
01:19:33,679 --> 01:19:35,360
all right so thank you for the talk uh

2175
01:19:35,360 --> 01:19:36,560
you

2176
01:19:36,560 --> 01:19:38,880
i i guess claimed that

2177
01:19:38,880 --> 01:19:41,040
there the gap between your lower bound

2178
01:19:41,040 --> 01:19:42,560
and the existing

2179
01:19:42,560 --> 01:19:44,800
uh size constructions which is like this

2180
01:19:44,800 --> 01:19:49,120
factor of log n times log q p

2181
01:19:49,120 --> 01:19:51,600
is small but i didn't get the intuition

2182
01:19:51,600 --> 01:19:53,199
for why i should think of that as small

2183
01:19:53,199 --> 01:19:55,360
like why for example why isn't

2184
01:19:55,360 --> 01:19:56,880
log qp

2185
01:19:56,880 --> 01:19:59,840
like large relative to log t and so we

2186
01:19:59,840 --> 01:20:02,560
like you know if if log qp is like

2187
01:20:02,560 --> 01:20:04,960
linear and log t then like the lower

2188
01:20:04,960 --> 01:20:07,120
bound hasn't changed really

2189
01:20:07,120 --> 01:20:08,320
right yeah

2190
01:20:08,320 --> 01:20:09,120
um

2191
01:20:09,120 --> 01:20:10,080
what would

2192
01:20:10,080 --> 01:20:12,159
for most parameters settings what we're

2193
01:20:12,159 --> 01:20:13,520
doing is that

2194
01:20:13,520 --> 01:20:17,040
qp is actually the in the order of

2195
01:20:17,040 --> 01:20:19,440
polygam and is uh

2196
01:20:19,440 --> 01:20:22,639
the number of queries now uh off there

2197
01:20:22,639 --> 01:20:25,199
is the instant it's the witness size

2198
01:20:25,199 --> 01:20:27,520
actually what's the witness size yeah

2199
01:20:27,520 --> 01:20:29,760
and it's the witness size and qp is

2200
01:20:29,760 --> 01:20:32,400
mostly polly in and so it's actually

2201
01:20:32,400 --> 01:20:34,800
out of log n note that

2202
01:20:34,800 --> 01:20:38,560
if log t were order of log n then anyway

2203
01:20:38,560 --> 01:20:39,920
we have

2204
01:20:39,920 --> 01:20:42,000
extremely short snares and actually we

2205
01:20:42,000 --> 01:20:43,280
can show that

2206
01:20:43,280 --> 01:20:45,600
this is uh we can show like

2207
01:20:45,600 --> 01:20:47,920
independently this is not possible

2208
01:20:47,920 --> 01:20:49,360
uh assuming some

2209
01:20:49,360 --> 01:20:52,639
standard complexity assumptions

2210
01:20:52,800 --> 01:20:54,880
all right uh let's take uh further

2211
01:20:54,880 --> 01:20:57,280
questions uh offline and uh let's thank

2212
01:20:57,280 --> 01:20:58,960
daniel and all the speakers of the

2213
01:20:58,960 --> 01:21:01,840
session

