1
00:00:00,080 --> 00:00:02,960
start with a new session it is the

2
00:00:02,960 --> 00:00:05,359
lattice signature session

3
00:00:05,359 --> 00:00:06,399
and

4
00:00:06,399 --> 00:00:08,639
okay got it so the first talk of the

5
00:00:08,639 --> 00:00:10,719
session is the compressing lattice

6
00:00:10,719 --> 00:00:12,880
hashing sign signatures

7
00:00:12,880 --> 00:00:16,160
by thomas espito mediterbushi alexandre

8
00:00:16,160 --> 00:00:18,560
vale and yanu and thomas will give the

9
00:00:18,560 --> 00:00:20,400
talk

10
00:00:20,400 --> 00:00:22,000
can you hear me yeah thank you daniel

11
00:00:22,000 --> 00:00:24,160
for the introduction i'm very happy to

12
00:00:24,160 --> 00:00:25,119
be

13
00:00:25,119 --> 00:00:27,439
in crypto this year to present you this

14
00:00:27,439 --> 00:00:30,560
uh result we get quite recently

15
00:00:30,560 --> 00:00:31,679
so

16
00:00:31,679 --> 00:00:34,880
yes okay so first and foremost let me

17
00:00:34,880 --> 00:00:36,880
give you a bit of context and explain

18
00:00:36,880 --> 00:00:38,879
you uh what kind of signatures we can

19
00:00:38,879 --> 00:00:43,040
find in the world in 2022

20
00:00:43,440 --> 00:00:45,920
so in this little panorama of signatures

21
00:00:45,920 --> 00:00:49,360
uh i will draw a big circles uh which

22
00:00:49,360 --> 00:00:52,239
area corresponds to the size of the

23
00:00:52,239 --> 00:00:54,399
signatures themselves so let's start

24
00:00:54,399 --> 00:00:55,520
with the

25
00:00:55,520 --> 00:00:59,600
hash based family so picnic sphanx plus

26
00:00:59,600 --> 00:01:02,000
and xmms

27
00:01:02,000 --> 00:01:04,239
then the lattice code one so the lithium

28
00:01:04,239 --> 00:01:06,960
falcon and wave

29
00:01:06,960 --> 00:01:09,840
and as a reference like the non-post

30
00:01:09,840 --> 00:01:12,240
quantum one so

31
00:01:12,240 --> 00:01:13,600
rsa

32
00:01:13,600 --> 00:01:14,479
and

33
00:01:14,479 --> 00:01:16,799
ecdsc networkers and the aim of this

34
00:01:16,799 --> 00:01:19,439
talk will be to take the ashen sign

35
00:01:19,439 --> 00:01:21,360
candidate so falcone

36
00:01:21,360 --> 00:01:24,320
and see how we can reduce

37
00:01:24,320 --> 00:01:26,720
the size of the falcon signature and

38
00:01:26,720 --> 00:01:29,040
marginally of ascension type

39
00:01:29,040 --> 00:01:32,560
for basically free

40
00:01:32,560 --> 00:01:34,320
okay so

41
00:01:34,320 --> 00:01:36,799
as i said falcon is a lattice-based

42
00:01:36,799 --> 00:01:38,400
hashing size signature so let me just

43
00:01:38,400 --> 00:01:40,400
give you a bit of background on lattices

44
00:01:40,400 --> 00:01:42,640
even though super that most of you are

45
00:01:42,640 --> 00:01:44,560
very familiar with that

46
00:01:44,560 --> 00:01:47,840
so latisse is a discrete subgroup of

47
00:01:47,840 --> 00:01:51,200
rn so we have this bunch of points which

48
00:01:51,200 --> 00:01:53,200
are very regularly spaced gregor is

49
00:01:53,200 --> 00:01:55,520
placed in in our ambient space

50
00:01:55,520 --> 00:01:59,520
and we can describe a lattice by uh

51
00:01:59,520 --> 00:02:01,119
one of its bases so i think in terms of

52
00:02:01,119 --> 00:02:03,040
linear algebra it will be sets of linear

53
00:02:03,040 --> 00:02:04,799
independent vectors that will span our

54
00:02:04,799 --> 00:02:06,880
lattice with uh integral in our

55
00:02:06,880 --> 00:02:08,878
combination so here it's a bad basis

56
00:02:08,878 --> 00:02:10,479
like long vectors

57
00:02:10,479 --> 00:02:12,319
that alternated effects

58
00:02:12,319 --> 00:02:14,800
but we have also good bases so short

59
00:02:14,800 --> 00:02:16,800
vectors almost orthogonal we're happy

60
00:02:16,800 --> 00:02:18,959
with that

61
00:02:18,959 --> 00:02:21,040
okay

62
00:02:21,040 --> 00:02:23,520
and like first motto about vertices is

63
00:02:23,520 --> 00:02:24,640
like finding short vectors in the

64
00:02:24,640 --> 00:02:27,280
lattice is a hard problem

65
00:02:27,280 --> 00:02:30,080
this quote comes from italian 98 and

66
00:02:30,080 --> 00:02:32,879
second motor you should remember uh is

67
00:02:32,879 --> 00:02:35,280
this one that's a better my base is the

68
00:02:35,280 --> 00:02:38,080
easier my problem becomes and basically

69
00:02:38,080 --> 00:02:40,160
apocrypha citation from every lattice

70
00:02:40,160 --> 00:02:42,239
cryptographer ever

71
00:02:42,239 --> 00:02:43,760
so just remember that for the rest of

72
00:02:43,760 --> 00:02:45,120
the talk

73
00:02:45,120 --> 00:02:47,120
okay so i was speaking of signatures so

74
00:02:47,120 --> 00:02:48,959
let's see now how to sign and what we

75
00:02:48,959 --> 00:02:51,680
can say a bit about that

76
00:02:51,680 --> 00:02:53,360
okay um

77
00:02:53,360 --> 00:02:56,080
so this uh frameworks is a so-called gpv

78
00:02:56,080 --> 00:02:57,680
framework from gateway by curtain by

79
00:02:57,680 --> 00:03:00,879
kutanathan from um 2008

80
00:03:00,879 --> 00:03:03,280
so it's an ashen sign based paradigm so

81
00:03:03,280 --> 00:03:05,519
how do we sign we take our

82
00:03:05,519 --> 00:03:07,519
preferred lattice so here it's something

83
00:03:07,519 --> 00:03:09,360
which is here's the hexagonal lattice

84
00:03:09,360 --> 00:03:11,120
that's my favorite one

85
00:03:11,120 --> 00:03:14,080
uh and to sign what will i do is first i

86
00:03:14,080 --> 00:03:16,720
will hash my message somewhere

87
00:03:16,720 --> 00:03:18,879
around the lattice so here my hash is

88
00:03:18,879 --> 00:03:21,040
here as you can see it's not a lattice

89
00:03:21,040 --> 00:03:24,319
point it's somewhere around okay

90
00:03:24,319 --> 00:03:26,000
then i will do a discrete gaussian

91
00:03:26,000 --> 00:03:29,200
sample uh around centered at this

92
00:03:29,200 --> 00:03:31,519
hash so okay

93
00:03:31,519 --> 00:03:33,599
please to my question sample

94
00:03:33,599 --> 00:03:35,280
okay nice

95
00:03:35,280 --> 00:03:37,440
so i have like i drawn the density here

96
00:03:37,440 --> 00:03:40,720
the darker the higher the probability

97
00:03:40,720 --> 00:03:41,760
so i will

98
00:03:41,760 --> 00:03:44,000
sample my lattice point and i will use

99
00:03:44,000 --> 00:03:45,920
for that the secret key which will be a

100
00:03:45,920 --> 00:03:48,319
good basis i will come a bit on that

101
00:03:48,319 --> 00:03:49,519
later

102
00:03:49,519 --> 00:03:53,200
so i have my sample and now my signature

103
00:03:53,200 --> 00:03:55,760
will simply be this difference vector

104
00:03:55,760 --> 00:03:57,439
here it's a short vector i'm pretty

105
00:03:57,439 --> 00:03:59,439
happy with that okay

106
00:03:59,439 --> 00:04:01,519
so this was for the signing now how do i

107
00:04:01,519 --> 00:04:03,760
verify it so i start with my uh

108
00:04:03,760 --> 00:04:07,519
signature i will first verify that the

109
00:04:07,519 --> 00:04:10,239
uh signature itself is small enough for

110
00:04:10,239 --> 00:04:12,319
certain bounds that will depends on the

111
00:04:12,319 --> 00:04:15,680
parameters and will be set by security

112
00:04:15,680 --> 00:04:17,839
um and then i will verify like let's say

113
00:04:17,839 --> 00:04:19,120
the functional equation which is

114
00:04:19,120 --> 00:04:21,040
basically saying that s minus a hash

115
00:04:21,040 --> 00:04:23,919
lies in l because as you remember my v

116
00:04:23,919 --> 00:04:26,560
here was a lattice point by definition

117
00:04:26,560 --> 00:04:29,120
of gaussian sampling okay and then if

118
00:04:29,120 --> 00:04:32,320
these two conditions are

119
00:04:32,560 --> 00:04:35,199
verified i will accept

120
00:04:35,199 --> 00:04:37,840
so now a bit on security

121
00:04:37,840 --> 00:04:39,919
first of all the key recoveries which

122
00:04:39,919 --> 00:04:42,639
consist in finding the secret key from

123
00:04:42,639 --> 00:04:44,639
the assault knowledge of the public key

124
00:04:44,639 --> 00:04:46,560
so my public key here will be any

125
00:04:46,560 --> 00:04:48,320
lattice basis and my secret key as i

126
00:04:48,320 --> 00:04:49,919
said would be a good one

127
00:04:49,919 --> 00:04:51,680
so this amount to do some lattice

128
00:04:51,680 --> 00:04:53,759
reduction or like which amounts itself

129
00:04:53,759 --> 00:04:57,120
to solve svp problem or process vp

130
00:04:57,120 --> 00:04:59,120
we will start from an arbitrary basis

131
00:04:59,120 --> 00:05:01,759
and we will like reduce it until we find

132
00:05:01,759 --> 00:05:04,720
a good moi so here it's just the case in

133
00:05:04,720 --> 00:05:06,479
dimension two gauss algorithm it's

134
00:05:06,479 --> 00:05:08,880
pretty easy okay however we want it to

135
00:05:08,880 --> 00:05:11,360
be hard so to make this problem hard we

136
00:05:11,360 --> 00:05:13,280
need to work in large dimension of

137
00:05:13,280 --> 00:05:15,759
course and we want the public basis to

138
00:05:15,759 --> 00:05:18,080
be bad in some sense because of course

139
00:05:18,080 --> 00:05:20,639
if i give you a good basis to begin with

140
00:05:20,639 --> 00:05:22,400
you don't have anything to do okay so

141
00:05:22,400 --> 00:05:24,720
that's first the key recovered and the

142
00:05:24,720 --> 00:05:27,520
second property we want to enforce

143
00:05:27,520 --> 00:05:30,000
is the forgery so

144
00:05:30,000 --> 00:05:32,160
the forgery amounts to find the lattice

145
00:05:32,160 --> 00:05:34,080
point which is close to the hash because

146
00:05:34,080 --> 00:05:35,600
as you saw the first step of the

147
00:05:35,600 --> 00:05:38,560
verification was to check that my

148
00:05:38,560 --> 00:05:40,320
signature is small

149
00:05:40,320 --> 00:05:42,479
so it's an approximate instance which

150
00:05:42,479 --> 00:05:43,759
means that i want to find the lattice

151
00:05:43,759 --> 00:05:46,000
points close to certain targets

152
00:05:46,000 --> 00:05:47,600
and like

153
00:05:47,600 --> 00:05:50,240
as i said like the motto is the better

154
00:05:50,240 --> 00:05:52,240
the base is easier my problem becomes in

155
00:05:52,240 --> 00:05:54,000
lattice prediction

156
00:05:54,000 --> 00:05:57,039
so to have this problem to be hard i

157
00:05:57,039 --> 00:05:59,919
need the distance between uh the

158
00:05:59,919 --> 00:06:01,199
like the guaranteed distance i want to

159
00:06:01,199 --> 00:06:03,280
solve approximately must be small so it

160
00:06:03,280 --> 00:06:05,280
means that the gaussian sample i'm doing

161
00:06:05,280 --> 00:06:06,720
to sign should be

162
00:06:06,720 --> 00:06:09,440
small as well and if it's small since

163
00:06:09,440 --> 00:06:11,199
doing good gauche and sample is a hard

164
00:06:11,199 --> 00:06:13,680
problem i want my private basis to be

165
00:06:13,680 --> 00:06:16,080
good in some sense

166
00:06:16,080 --> 00:06:19,120
so having short vectors having a very

167
00:06:19,120 --> 00:06:20,800
particular properties with regards to

168
00:06:20,800 --> 00:06:21,840
latitude

169
00:06:21,840 --> 00:06:23,840
to gaussian something so

170
00:06:23,840 --> 00:06:27,120
okay so that was for uh the security so

171
00:06:27,120 --> 00:06:28,960
in a nutshell what i need is a good

172
00:06:28,960 --> 00:06:32,000
enough private basis and whatever bad

173
00:06:32,000 --> 00:06:33,600
public basis

174
00:06:33,600 --> 00:06:35,280
okay

175
00:06:35,280 --> 00:06:37,840
so now to uh enhance a bit and get

176
00:06:37,840 --> 00:06:40,880
better uh smaller signatures we will not

177
00:06:40,880 --> 00:06:42,960
instantiate this gpv framework on an

178
00:06:42,960 --> 00:06:44,160
arbitrary lattice but we will

179
00:06:44,160 --> 00:06:45,919
instantiate it on

180
00:06:45,919 --> 00:06:47,680
nice enough lattices and in particular

181
00:06:47,680 --> 00:06:48,960
on and through

182
00:06:48,960 --> 00:06:52,000
lattices so what are in true

183
00:06:52,000 --> 00:06:54,160
and true is a ramp to lattice over some

184
00:06:54,160 --> 00:06:55,440
ring

185
00:06:55,440 --> 00:06:57,440
which can be written as follow so it's a

186
00:06:57,440 --> 00:06:59,520
parity check lattice i have an element h

187
00:06:59,520 --> 00:07:01,280
of the ring i will explain later how

188
00:07:01,280 --> 00:07:03,280
it's constructed and that's a set of

189
00:07:03,280 --> 00:07:05,520
vectors u v with u and v in the ring

190
00:07:05,520 --> 00:07:07,360
such that uv

191
00:07:07,360 --> 00:07:09,360
inner product with h minus one is equal

192
00:07:09,360 --> 00:07:10,720
to zero mod q

193
00:07:10,720 --> 00:07:12,319
okay

194
00:07:12,319 --> 00:07:15,440
so i have actually a very uh

195
00:07:15,440 --> 00:07:19,039
naive basis that will be a public one

196
00:07:19,039 --> 00:07:22,000
of the entry lattice it's uh the one h

197
00:07:22,000 --> 00:07:24,160
zero q because you can check that one h

198
00:07:24,160 --> 00:07:24,960
uh

199
00:07:24,960 --> 00:07:26,880
inner product with h minus one is uh

200
00:07:26,880 --> 00:07:30,000
zero so it's zero q and that zero q

201
00:07:30,000 --> 00:07:32,960
times h minus 1 is q so it's 0 mod q as

202
00:07:32,960 --> 00:07:35,199
well so you can prove that this is a

203
00:07:35,199 --> 00:07:38,479
base a full basis of my entry lattice

204
00:07:38,479 --> 00:07:40,319
but it's actually pretty bad in terms of

205
00:07:40,319 --> 00:07:42,160
quality

206
00:07:42,160 --> 00:07:44,080
how do i construct otherwise a good base

207
00:07:44,080 --> 00:07:46,240
is the one that we'll use to sign

208
00:07:46,240 --> 00:07:48,319
so actually i will do it backwards i

209
00:07:48,319 --> 00:07:49,599
will start by

210
00:07:49,599 --> 00:07:52,479
constructing the first vector of my uh

211
00:07:52,479 --> 00:07:55,280
to be good bases so let's take f and j

212
00:07:55,280 --> 00:07:58,000
which is a small vector with f and j in

213
00:07:58,000 --> 00:07:59,599
the ring

214
00:07:59,599 --> 00:08:02,879
and then i will set h to be j over f mod

215
00:08:02,879 --> 00:08:03,759
q

216
00:08:03,759 --> 00:08:06,000
okay so now like oh while i'm doing that

217
00:08:06,000 --> 00:08:07,360
and the answer is pretty simple because

218
00:08:07,360 --> 00:08:09,039
this is perfectly equivalent to having h

219
00:08:09,039 --> 00:08:11,280
f equal to j mode q and then you're like

220
00:08:11,280 --> 00:08:13,280
oh that's great because it means that by

221
00:08:13,280 --> 00:08:16,639
construction uh this f and j belongs to

222
00:08:16,639 --> 00:08:19,199
the uh gamma per page

223
00:08:19,199 --> 00:08:20,960
so right now i'm pretty happy i've done

224
00:08:20,960 --> 00:08:23,360
half of the work

225
00:08:23,360 --> 00:08:25,360
and now remember that since i know this

226
00:08:25,360 --> 00:08:27,759
public basis here i can easily see that

227
00:08:27,759 --> 00:08:30,560
the determinant is q so the determinant

228
00:08:30,560 --> 00:08:32,240
of my lattice is q since it's an

229
00:08:32,240 --> 00:08:35,200
invariant of the lattice i should have

230
00:08:35,200 --> 00:08:37,519
also

231
00:08:37,519 --> 00:08:39,519
a basis a short basis which determinant

232
00:08:39,519 --> 00:08:42,399
is q so my goal now is to find square

233
00:08:42,399 --> 00:08:44,720
and triangle in the lattice

234
00:08:44,720 --> 00:08:46,080
in the ring sorry such that the

235
00:08:46,080 --> 00:08:49,040
determinant of this is equal to q so i

236
00:08:49,040 --> 00:08:50,399
just do

237
00:08:50,399 --> 00:08:52,720
underground linear algebra here and i

238
00:08:52,720 --> 00:08:55,600
want to solve f triangle minus g square

239
00:08:55,600 --> 00:09:00,080
equal q in the ring okay

240
00:09:00,080 --> 00:09:01,519
this should remind you of your

241
00:09:01,519 --> 00:09:03,920
arithmetic 101 class and this is called

242
00:09:03,920 --> 00:09:05,519
a basis equation when you are over the

243
00:09:05,519 --> 00:09:07,040
integers and we know how to solve that

244
00:09:07,040 --> 00:09:09,680
we basically do extended uh euclidean

245
00:09:09,680 --> 00:09:11,040
algorithm

246
00:09:11,040 --> 00:09:14,800
interestingly enough on nice well sorry

247
00:09:14,800 --> 00:09:17,839
on nice enough rings uh we can do a

248
00:09:17,839 --> 00:09:20,480
variant of euclidean generalized one

249
00:09:20,480 --> 00:09:22,720
which works pretty efficiently uh if you

250
00:09:22,720 --> 00:09:24,720
are working over a tower fields

251
00:09:24,720 --> 00:09:27,040
and so in wall generality if the ring is

252
00:09:27,040 --> 00:09:30,000
nice enough we have a very uh nice way

253
00:09:30,000 --> 00:09:32,399
to generate this and through

254
00:09:32,399 --> 00:09:34,000
basis

255
00:09:34,000 --> 00:09:34,880
okay

256
00:09:34,880 --> 00:09:37,519
so just a bit of uh example in dimension

257
00:09:37,519 --> 00:09:39,839
two so which means that i'm looking at

258
00:09:39,839 --> 00:09:43,040
the n through base uh over the integers

259
00:09:43,040 --> 00:09:43,839
z

260
00:09:43,839 --> 00:09:46,399
so i'm taking uh f equal to two j equal

261
00:09:46,399 --> 00:09:48,000
to three q equal to seven because

262
00:09:48,000 --> 00:09:50,720
whatever seven is a prime if you do the

263
00:09:50,720 --> 00:09:53,040
computation you get that h is j over f

264
00:09:53,040 --> 00:09:56,000
mod of 7 is 5.

265
00:09:56,000 --> 00:10:00,320
and as such you can construct

266
00:10:00,320 --> 00:10:03,920
this public key i said so 1 h 0 q which

267
00:10:03,920 --> 00:10:07,760
gives you as i said a bad basis

268
00:10:07,760 --> 00:10:09,680
now you can construct the secret basis

269
00:10:09,680 --> 00:10:11,360
using the equilibrium algorithm as i

270
00:10:11,360 --> 00:10:14,560
said and you get a nicely

271
00:10:14,560 --> 00:10:17,279
shaped basis okay that's my secret one

272
00:10:17,279 --> 00:10:19,920
okay now let's uh see what we can do

273
00:10:19,920 --> 00:10:23,120
with this lattice um and in particular

274
00:10:23,120 --> 00:10:25,920
we can look at the slices of the lattice

275
00:10:25,920 --> 00:10:27,440
according to

276
00:10:27,440 --> 00:10:29,120
the vector zero plus so we're looking at

277
00:10:29,120 --> 00:10:32,399
all the cosets uh by zero q and we gave

278
00:10:32,399 --> 00:10:36,000
like all this nice slice of lattice okay

279
00:10:36,000 --> 00:10:37,839
why are we doing that it's because if i

280
00:10:37,839 --> 00:10:41,120
restrict this slices to the

281
00:10:41,120 --> 00:10:44,320
square of uh size q so it's minus q

282
00:10:44,320 --> 00:10:46,480
minus q over 2 minus q over 2 k over 2 k

283
00:10:46,480 --> 00:10:47,680
over 2.

284
00:10:47,680 --> 00:10:48,959
um

285
00:10:48,959 --> 00:10:50,800
i have an interesting property here in

286
00:10:50,800 --> 00:10:52,959
each of my slice

287
00:10:52,959 --> 00:10:56,480
here i only have one lattice point

288
00:10:56,480 --> 00:10:58,560
okay why is it interesting it's because

289
00:10:58,560 --> 00:11:01,680
it means that if i'm restricting to

290
00:11:01,680 --> 00:11:04,720
vectors here i can

291
00:11:04,720 --> 00:11:07,040
hello

292
00:11:07,120 --> 00:11:09,200
i can restrict it to these people

293
00:11:09,200 --> 00:11:14,360
probably but if possible i would like to

294
00:11:17,680 --> 00:11:19,519
my apologies please continue i didn't

295
00:11:19,519 --> 00:11:21,360
realize it would pop up anything i'm

296
00:11:21,360 --> 00:11:23,040
just helping out a speaker

297
00:11:23,040 --> 00:11:24,240
whatever

298
00:11:24,240 --> 00:11:25,200
can i

299
00:11:25,200 --> 00:11:28,680
get rid of them

300
00:11:39,680 --> 00:11:43,040
yeah that's okay

301
00:11:43,040 --> 00:11:44,160
i mean the interesting thing is

302
00:11:44,160 --> 00:11:47,959
happening behind like

303
00:12:00,959 --> 00:12:02,800
is there anything i can do on my end i'm

304
00:12:02,800 --> 00:12:06,120
really sorry

305
00:12:18,880 --> 00:12:20,639
hey

306
00:12:20,639 --> 00:12:22,079
i don't have to start all over again

307
00:12:22,079 --> 00:12:22,839
good

308
00:12:22,839 --> 00:12:26,240
yeah it's okay

309
00:12:35,839 --> 00:12:37,440
thank you

310
00:12:37,440 --> 00:12:38,720
so what was i saying yeah we have a very

311
00:12:38,720 --> 00:12:40,399
interesting property in the square so if

312
00:12:40,399 --> 00:12:42,399
i look at each slice i only have one

313
00:12:42,399 --> 00:12:45,279
lattice point in each of the slices

314
00:12:45,279 --> 00:12:47,279
why is it interesting it means that in

315
00:12:47,279 --> 00:12:50,000
terms of representation i can only

316
00:12:50,000 --> 00:12:52,720
represent my lattice points here by

317
00:12:52,720 --> 00:12:53,839
their

318
00:12:53,839 --> 00:12:55,360
x-coordinate

319
00:12:55,360 --> 00:12:57,120
so if i project everyone i just need to

320
00:12:57,120 --> 00:12:58,720
know that for instance represent that

321
00:12:58,720 --> 00:13:00,480
point i just need to know this

322
00:13:00,480 --> 00:13:02,480
coordinate that's pretty good because i

323
00:13:02,480 --> 00:13:04,399
mean it means that i need half

324
00:13:04,399 --> 00:13:07,519
of the space uh that i would normally

325
00:13:07,519 --> 00:13:09,839
need to represent this point

326
00:13:09,839 --> 00:13:13,040
so let's go back to signatures um

327
00:13:13,040 --> 00:13:16,079
and like now we can just uh take our

328
00:13:16,079 --> 00:13:18,839
very nice entry lattice instead of the

329
00:13:18,839 --> 00:13:22,639
uh random one i choose and we will do

330
00:13:22,639 --> 00:13:25,519
everything within this nice square so

331
00:13:25,519 --> 00:13:28,240
okay i'm doing the hash of the message

332
00:13:28,240 --> 00:13:30,720
um doing my gaussian sample we get this

333
00:13:30,720 --> 00:13:34,720
vector v and uh we'll let it go

334
00:13:34,720 --> 00:13:37,839
down if it wants please thank you uh i

335
00:13:37,839 --> 00:13:39,760
will uh i will look at it here and i

336
00:13:39,760 --> 00:13:41,279
give i have these signatures which is

337
00:13:41,279 --> 00:13:44,399
this point here okay very nice and i

338
00:13:44,399 --> 00:13:46,000
will do what i just said i'm in the

339
00:13:46,000 --> 00:13:48,480
slice so i will just represent it by

340
00:13:48,480 --> 00:13:52,560
it's called its x coordinates very good

341
00:13:52,560 --> 00:13:55,279
why is it sufficient because now if i

342
00:13:55,279 --> 00:13:56,399
take this

343
00:13:56,399 --> 00:13:58,160
half signature i can reconstruct the

344
00:13:58,160 --> 00:14:00,160
full signature from that

345
00:14:00,160 --> 00:14:02,639
by actually selecting the slice where i

346
00:14:02,639 --> 00:14:04,959
was uh supposed to work in so i have a

347
00:14:04,959 --> 00:14:07,600
unique lattice point here

348
00:14:07,600 --> 00:14:10,320
i uh take my hash here and i look at it

349
00:14:10,320 --> 00:14:14,079
mod q so i'm inside the cube

350
00:14:14,079 --> 00:14:15,199
and

351
00:14:15,199 --> 00:14:16,959
i look at the difference between the two

352
00:14:16,959 --> 00:14:18,959
and surprise surprise

353
00:14:18,959 --> 00:14:20,399
it's a signature

354
00:14:20,399 --> 00:14:22,320
so it's sufficient to have the knowledge

355
00:14:22,320 --> 00:14:23,760
of this

356
00:14:23,760 --> 00:14:26,000
x-coordinate to be able to reconstruct

357
00:14:26,000 --> 00:14:27,360
the signature

358
00:14:27,360 --> 00:14:29,680
so once we've done that we just do the

359
00:14:29,680 --> 00:14:32,000
same we check that the

360
00:14:32,000 --> 00:14:34,079
that the

361
00:14:34,079 --> 00:14:35,920
signature is reconstructed signature is

362
00:14:35,920 --> 00:14:39,519
small enough and we're happy with that

363
00:14:39,680 --> 00:14:41,760
and if then this condition is asserted

364
00:14:41,760 --> 00:14:45,040
we accept the signature okay so

365
00:14:45,040 --> 00:14:47,920
that was for the rational somehow of

366
00:14:47,920 --> 00:14:51,279
falcone this hash and sign on n2 let's

367
00:14:51,279 --> 00:14:53,600
see so now we want to go beyond that

368
00:14:53,600 --> 00:14:55,279
like halving the signature was not

369
00:14:55,279 --> 00:14:57,199
enough for us and we wanted to get

370
00:14:57,199 --> 00:15:00,240
even smaller ones so what can we do so

371
00:15:00,240 --> 00:15:01,760
right now we are so we're working in

372
00:15:01,760 --> 00:15:02,959
this uh

373
00:15:02,959 --> 00:15:05,760
cube of mod cube cubes

374
00:15:05,760 --> 00:15:07,600
and uh we are doing some gaussian

375
00:15:07,600 --> 00:15:09,040
something but it's

376
00:15:09,040 --> 00:15:11,199
an isotropic one it's we don't have a

377
00:15:11,199 --> 00:15:12,720
preferred direction

378
00:15:12,720 --> 00:15:14,079
we're doing

379
00:15:14,079 --> 00:15:16,639
spherical sampling okay so

380
00:15:16,639 --> 00:15:19,040
as you saw my signature will be points

381
00:15:19,040 --> 00:15:21,760
on this line so if i want shorter

382
00:15:21,760 --> 00:15:24,079
signatures i want to favorize points

383
00:15:24,079 --> 00:15:26,399
which will be close to the origin

384
00:15:26,399 --> 00:15:27,279
okay

385
00:15:27,279 --> 00:15:30,320
a way of doing that is to stop sampling

386
00:15:30,320 --> 00:15:32,560
in any direction and to favorize the

387
00:15:32,560 --> 00:15:34,079
points which are closer to the origin so

388
00:15:34,079 --> 00:15:36,240
basically i will sample with an elliptic

389
00:15:36,240 --> 00:15:38,240
gaussian which has now a favored

390
00:15:38,240 --> 00:15:40,240
direction and the direction will be the

391
00:15:40,240 --> 00:15:42,399
y-axis

392
00:15:42,399 --> 00:15:45,360
so an alternative way of looking at this

393
00:15:45,360 --> 00:15:47,839
elliptic sampling is actually to do some

394
00:15:47,839 --> 00:15:50,560
spherical sampling but in an unbalanced

395
00:15:50,560 --> 00:15:52,720
lens so how do that

396
00:15:52,720 --> 00:15:54,399
basically we start with our lattice and

397
00:15:54,399 --> 00:15:55,839
we say okay

398
00:15:55,839 --> 00:15:56,800
let's

399
00:15:56,800 --> 00:15:57,759
have

400
00:15:57,759 --> 00:16:00,639
more points on the y-axis but if i want

401
00:16:00,639 --> 00:16:03,199
to still work with this and through

402
00:16:03,199 --> 00:16:05,920
lattice and this nice module property i

403
00:16:05,920 --> 00:16:07,600
need to preserve my determinant because

404
00:16:07,600 --> 00:16:09,920
if i squeeze my lefties by two i have

405
00:16:09,920 --> 00:16:11,279
two two times more latest points my

406
00:16:11,279 --> 00:16:12,720
determinant is also multiplied by 2 is

407
00:16:12,720 --> 00:16:14,000
divided by 2.

408
00:16:14,000 --> 00:16:14,880
so

409
00:16:14,880 --> 00:16:18,000
i also need to expand it in the x

410
00:16:18,000 --> 00:16:20,079
direction so now that i divided by 2

411
00:16:20,079 --> 00:16:22,480
multiplied by 2 and basically uh still

412
00:16:22,480 --> 00:16:24,079
mod it's still working with the same

413
00:16:24,079 --> 00:16:25,759
data elements

414
00:16:25,759 --> 00:16:28,800
and if i do that i can take my nice uh

415
00:16:28,800 --> 00:16:31,199
mod q square but it's not a square

416
00:16:31,199 --> 00:16:33,040
anymore it's a rectangle and as you can

417
00:16:33,040 --> 00:16:35,040
see i have like a higher density of

418
00:16:35,040 --> 00:16:38,160
points on the slices so now i can do

419
00:16:38,160 --> 00:16:39,600
once again my

420
00:16:39,600 --> 00:16:41,920
spherical isotropic sampling but i will

421
00:16:41,920 --> 00:16:44,639
favorize more points on the slices which

422
00:16:44,639 --> 00:16:46,480
are closer to the origin so i'm happy

423
00:16:46,480 --> 00:16:48,800
with that

424
00:16:48,800 --> 00:16:51,120
so what i did actually was to uh did

425
00:16:51,120 --> 00:16:53,680
some uh distortion on

426
00:16:53,680 --> 00:16:56,800
each axis so i'm actually looking at the

427
00:16:56,800 --> 00:17:00,639
lattice under uh this new norm so i can

428
00:17:00,639 --> 00:17:02,399
do that in world generative for

429
00:17:02,399 --> 00:17:05,280
arbitrary gamma not necessarily two

430
00:17:05,280 --> 00:17:08,000
and i will just work in

431
00:17:08,000 --> 00:17:09,919
this new norm uh

432
00:17:09,919 --> 00:17:11,520
indexed by gamma

433
00:17:11,520 --> 00:17:13,359
so the algebraic part the functional

434
00:17:13,359 --> 00:17:15,760
part is exactly the same it's still an

435
00:17:15,760 --> 00:17:18,240
entry lattice so this lambda per h the

436
00:17:18,240 --> 00:17:20,799
equation is still the same h is still

437
00:17:20,799 --> 00:17:21,839
j over

438
00:17:21,839 --> 00:17:23,839
j over f mod q

439
00:17:23,839 --> 00:17:25,520
everything works exactly similarly for

440
00:17:25,520 --> 00:17:28,319
the algebraic part but the metric

441
00:17:28,319 --> 00:17:29,919
under which i'm looking at the lattice

442
00:17:29,919 --> 00:17:31,760
has changed so basically the way i'm

443
00:17:31,760 --> 00:17:34,640
embedding my lattice points in the

444
00:17:34,640 --> 00:17:37,600
r2dm space is different

445
00:17:37,600 --> 00:17:39,280
so why is it interesting because it

446
00:17:39,280 --> 00:17:40,919
means that i can use that

447
00:17:40,919 --> 00:17:43,440
straightforwardly in my passion sign

448
00:17:43,440 --> 00:17:46,559
construction i just replace everything

449
00:17:46,559 --> 00:17:49,600
by doing my operation in the new norm

450
00:17:49,600 --> 00:17:52,160
and since it's still uh

451
00:17:52,160 --> 00:17:53,919
it's still a euclidean norm everything

452
00:17:53,919 --> 00:17:55,360
remains the same the

453
00:17:55,360 --> 00:17:56,960
discrete gaussian sampling algorithm

454
00:17:56,960 --> 00:17:58,720
will be exactly the same it's just the

455
00:17:58,720 --> 00:18:00,960
quantities we'll have these gammas there

456
00:18:00,960 --> 00:18:03,120
and there and the uh

457
00:18:03,120 --> 00:18:05,440
affair that's s is small will just be

458
00:18:05,440 --> 00:18:07,840
done in this new norm so it's a very

459
00:18:07,840 --> 00:18:09,919
easy computation as well so nothing is

460
00:18:09,919 --> 00:18:12,640
really changing

461
00:18:12,840 --> 00:18:16,400
okay it was a neat idea and it's quite

462
00:18:16,400 --> 00:18:18,720
simple but we can be even more simple

463
00:18:18,720 --> 00:18:20,240
and you're like oh thomas what if

464
00:18:20,240 --> 00:18:23,039
actually i'm doing something very stupid

465
00:18:23,039 --> 00:18:25,600
what if i'm just saying oh everything is

466
00:18:25,600 --> 00:18:27,840
unique for mod q like all my quantities

467
00:18:27,840 --> 00:18:30,480
depends of q what if i just like take a

468
00:18:30,480 --> 00:18:31,760
small cube

469
00:18:31,760 --> 00:18:32,640
so

470
00:18:32,640 --> 00:18:34,640
you're like oh okay let's do it

471
00:18:34,640 --> 00:18:36,400
for instance here i it was my previous

472
00:18:36,400 --> 00:18:39,679
lattice so the the n true with q7 and i

473
00:18:39,679 --> 00:18:42,080
can do the same but with q equal five of

474
00:18:42,080 --> 00:18:43,840
course h is changing because the model

475
00:18:43,840 --> 00:18:46,400
equation is changing or i can do for um

476
00:18:46,400 --> 00:18:47,840
true equal three okay things start to

477
00:18:47,840 --> 00:18:49,280
degenerate a bit

478
00:18:49,280 --> 00:18:51,760
that's a hint that maybe some tricks

479
00:18:51,760 --> 00:18:52,799
must be

480
00:18:52,799 --> 00:18:56,400
must be found but as you can see if my

481
00:18:56,400 --> 00:18:59,039
cube is smaller of course i will only

482
00:18:59,039 --> 00:19:00,799
choose points between minus q over two

483
00:19:00,799 --> 00:19:02,880
and q over two so i'm pretty happy

484
00:19:02,880 --> 00:19:04,880
because it's indeed smaller so it's it's

485
00:19:04,880 --> 00:19:06,960
kind of for free so it could be like oh

486
00:19:06,960 --> 00:19:08,799
is it a free launch here like can i just

487
00:19:08,799 --> 00:19:10,480
reduce everything for absolutely free

488
00:19:10,480 --> 00:19:12,559
okay of course the answer is a big no

489
00:19:12,559 --> 00:19:14,880
you never have freelance crm in computer

490
00:19:14,880 --> 00:19:15,840
science

491
00:19:15,840 --> 00:19:18,559
so why it's not a freelance server

492
00:19:18,559 --> 00:19:20,480
okay for the small queue thing

493
00:19:20,480 --> 00:19:22,480
uh we reduce things uniformly with

494
00:19:22,480 --> 00:19:25,280
regards to q so in particular we reduce

495
00:19:25,280 --> 00:19:29,200
the size of this secret vector f j so

496
00:19:29,200 --> 00:19:31,120
for reasons which are linked to the way

497
00:19:31,120 --> 00:19:32,880
you want to sample and to have a good

498
00:19:32,880 --> 00:19:35,360
basis to sample you want f and j to be

499
00:19:35,360 --> 00:19:38,240
of size root q okay so it means that if

500
00:19:38,240 --> 00:19:40,640
q is getting smaller root q is getting

501
00:19:40,640 --> 00:19:42,880
smaller so this is getting smaller

502
00:19:42,880 --> 00:19:44,240
so

503
00:19:44,240 --> 00:19:46,160
if now it's very small compared to the

504
00:19:46,160 --> 00:19:48,320
dimension then the vector will become

505
00:19:48,320 --> 00:19:50,400
will start to become sparse means that

506
00:19:50,400 --> 00:19:51,919
we have a lot of zero which are going to

507
00:19:51,919 --> 00:19:54,720
appear uh i mean if i have a vector

508
00:19:54,720 --> 00:19:55,760
which all coefficients which are

509
00:19:55,760 --> 00:19:57,120
non-zero of course the norm of the

510
00:19:57,120 --> 00:19:58,559
vector should be greater than n i mean

511
00:19:58,559 --> 00:20:00,960
root n so if i'm smaller than root n

512
00:20:00,960 --> 00:20:02,559
strange things happen

513
00:20:02,559 --> 00:20:04,799
and it's pretty bad because we can have

514
00:20:04,799 --> 00:20:07,440
uh a bunch of combinatorial attacks uh

515
00:20:07,440 --> 00:20:08,799
in particular if you think of the very

516
00:20:08,799 --> 00:20:11,840
degenerate case where let's say uh

517
00:20:11,840 --> 00:20:14,159
the the norm of that is root two

518
00:20:14,159 --> 00:20:15,919
which means that we have two nonzero

519
00:20:15,919 --> 00:20:17,760
coefficients two nonzero coefficient in

520
00:20:17,760 --> 00:20:19,840
dimension n is basically oh i will just

521
00:20:19,840 --> 00:20:21,600
guess where they are and i will test and

522
00:20:21,600 --> 00:20:22,960
i will just have a quadratic number of

523
00:20:22,960 --> 00:20:24,880
tests so it's a polynomial effect

524
00:20:24,880 --> 00:20:27,120
so we need to be careful we can't be too

525
00:20:27,120 --> 00:20:28,880
small because of this reason

526
00:20:28,880 --> 00:20:30,720
for the distortion thing where we're

527
00:20:30,720 --> 00:20:33,520
unbalancing the lattice we are actually

528
00:20:33,520 --> 00:20:35,760
also uh changing the norm of aj because

529
00:20:35,760 --> 00:20:37,520
we are looking at it under this gamma

530
00:20:37,520 --> 00:20:40,640
node okay so uh f will be gamma times

531
00:20:40,640 --> 00:20:42,400
smaller and j will be gamma times larger

532
00:20:42,400 --> 00:20:44,559
so for very small f it will become

533
00:20:44,559 --> 00:20:47,120
sparse again for exactly the same reason

534
00:20:47,120 --> 00:20:48,559
and we're not very happy with that

535
00:20:48,559 --> 00:20:50,159
neither because what we can do is

536
00:20:50,159 --> 00:20:52,080
exactly what i just said for this very

537
00:20:52,080 --> 00:20:54,080
degenerate two case

538
00:20:54,080 --> 00:20:55,919
um we can guess the position of the

539
00:20:55,919 --> 00:20:58,960
zeros so here in whitish suppose that i

540
00:20:58,960 --> 00:21:00,640
have the zeros i guess them correctly

541
00:21:00,640 --> 00:21:02,080
and what i will do is i will just

542
00:21:02,080 --> 00:21:04,240
suppress them for from the lattice and i

543
00:21:04,240 --> 00:21:06,159
will have a lattice of smaller dimension

544
00:21:06,159 --> 00:21:08,480
and i can apply lattice reduction over

545
00:21:08,480 --> 00:21:10,799
the public basis to recover this

546
00:21:10,799 --> 00:21:12,720
reduced fj

547
00:21:12,720 --> 00:21:13,760
so

548
00:21:13,760 --> 00:21:15,520
the complexity of the attack is then the

549
00:21:15,520 --> 00:21:17,679
priority of making a right guess

550
00:21:17,679 --> 00:21:19,520
multiplied by the property or the

551
00:21:19,520 --> 00:21:21,520
complexity of lattice reduction in

552
00:21:21,520 --> 00:21:23,440
smaller dimensions

553
00:21:23,440 --> 00:21:25,039
it's an attack

554
00:21:25,039 --> 00:21:27,520
you can go even further than that

555
00:21:27,520 --> 00:21:30,559
if f is very small then k is small in

556
00:21:30,559 --> 00:21:33,200
the equation h is equal to g f minus 1

557
00:21:33,200 --> 00:21:35,919
plus k q so by construction i said that

558
00:21:35,919 --> 00:21:38,960
h was g over f mod q so it means that we

559
00:21:38,960 --> 00:21:41,760
have a coefficient k such that h is

560
00:21:41,760 --> 00:21:44,240
equal to that this number of modular

561
00:21:44,240 --> 00:21:46,640
reduction mode cube we are doing

562
00:21:46,640 --> 00:21:48,880
so what we can do since this is also

563
00:21:48,880 --> 00:21:52,320
small is to recover the extended vector

564
00:21:52,320 --> 00:21:54,559
f j and this k

565
00:21:54,559 --> 00:21:56,480
and we can recover it by doing lattice

566
00:21:56,480 --> 00:21:58,640
reduction in one age or cure the public

567
00:21:58,640 --> 00:22:00,080
basis here

568
00:22:00,080 --> 00:22:01,919
extended with zero one and we can

569
00:22:01,919 --> 00:22:04,000
combine that with the guessing thing i

570
00:22:04,000 --> 00:22:05,280
just explained

571
00:22:05,280 --> 00:22:09,600
so in practice what does this give

572
00:22:09,840 --> 00:22:10,799
question

573
00:22:10,799 --> 00:22:12,799
so we have a different regime and

574
00:22:12,799 --> 00:22:14,880
different corresponding attacks so

575
00:22:14,880 --> 00:22:17,120
when both f and j are sparse we mean

576
00:22:17,120 --> 00:22:20,400
like this very small q technique uh we

577
00:22:20,400 --> 00:22:23,200
will basically use this recovery of f j

578
00:22:23,200 --> 00:22:24,400
and k

579
00:22:24,400 --> 00:22:25,679
and we will combine that with the

580
00:22:25,679 --> 00:22:27,280
guessing so we are guessing the position

581
00:22:27,280 --> 00:22:29,840
of zeros um suppressing the zero so

582
00:22:29,840 --> 00:22:31,600
guess the correct gas from the lattice

583
00:22:31,600 --> 00:22:32,880
and doing latest reduction in smaller

584
00:22:32,880 --> 00:22:34,480
dimension

585
00:22:34,480 --> 00:22:36,320
then we have this large distortion

586
00:22:36,320 --> 00:22:39,120
setting where f is pass and j is large

587
00:22:39,120 --> 00:22:41,039
and we basically will apply the same

588
00:22:41,039 --> 00:22:42,960
technique and at one point for medium

589
00:22:42,960 --> 00:22:45,360
distortion f is small but not sparse and

590
00:22:45,360 --> 00:22:46,880
j will be lark

591
00:22:46,880 --> 00:22:49,600
and we will just k will become too big

592
00:22:49,600 --> 00:22:51,360
so the attack will not be as efficient

593
00:22:51,360 --> 00:22:53,679
and we will all do only do the basic

594
00:22:53,679 --> 00:22:55,600
recovery with lattice reduction and then

595
00:22:55,600 --> 00:22:57,600
we go to the standard regime and only

596
00:22:57,600 --> 00:23:00,720
lattice reduction applies

597
00:23:00,720 --> 00:23:02,180
so

598
00:23:02,180 --> 00:23:03,360
[Music]

599
00:23:03,360 --> 00:23:06,720
duca and post-elevator has

600
00:23:06,720 --> 00:23:08,960
sent me a an email recently that they

601
00:23:08,960 --> 00:23:11,280
might have found a new attack in the

602
00:23:11,280 --> 00:23:14,159
extreme uh small queue which is better

603
00:23:14,159 --> 00:23:16,880
than this recovery plus uh animation i'm

604
00:23:16,880 --> 00:23:18,799
guessing which is quite different

605
00:23:18,799 --> 00:23:21,280
because it exploits the shape of bkz

606
00:23:21,280 --> 00:23:24,080
reduced of qri lattices so

607
00:23:24,080 --> 00:23:25,520
this must be

608
00:23:25,520 --> 00:23:27,600
tested a bit more but it only affects

609
00:23:27,600 --> 00:23:28,320
the

610
00:23:28,320 --> 00:23:30,640
extremal cases

611
00:23:30,640 --> 00:23:31,679
so

612
00:23:31,679 --> 00:23:32,960
for a bit of

613
00:23:32,960 --> 00:23:36,480
practical things so you can see here a

614
00:23:36,480 --> 00:23:39,280
graph of the security uh with regards to

615
00:23:39,280 --> 00:23:41,039
the

616
00:23:41,039 --> 00:23:44,320
unbalancing factor gamma we have here

617
00:23:44,320 --> 00:23:46,640
gamma equal one is no distortion no no

618
00:23:46,640 --> 00:23:48,960
unbalancing at all

619
00:23:48,960 --> 00:23:52,080
for small gamma we are in this pointed

620
00:23:52,080 --> 00:23:54,240
small dots regime which will be uh the

621
00:23:54,240 --> 00:23:55,520
first regime i explained just like this

622
00:23:55,520 --> 00:23:57,279
reduction and at one point we will do

623
00:23:57,279 --> 00:24:00,159
this recovery of fjk so we have a phase

624
00:24:00,159 --> 00:24:03,440
transition around gamma equal five uh in

625
00:24:03,440 --> 00:24:08,080
dimension 512 512 and 124.

626
00:24:08,080 --> 00:24:10,799
so for the small q regime

627
00:24:10,799 --> 00:24:12,240
we'll have a curve which is a bit

628
00:24:12,240 --> 00:24:13,919
steeper but actually if you look at the

629
00:24:13,919 --> 00:24:16,960
scale it's a very small loss so you

630
00:24:16,960 --> 00:24:20,240
start from a big q over here and if you

631
00:24:20,240 --> 00:24:22,480
just say oh i can reduce from q equal

632
00:24:22,480 --> 00:24:25,279
one for 140 to let's say 100 you're

633
00:24:25,279 --> 00:24:26,240
making

634
00:24:26,240 --> 00:24:29,760
barely any loss in security

635
00:24:29,760 --> 00:24:32,240
um so correctly what do we have on

636
00:24:32,240 --> 00:24:35,200
falcon 512 so this num needs level one

637
00:24:35,200 --> 00:24:37,200
we start from a signature size which is

638
00:24:37,200 --> 00:24:39,760
uh the number of the beast and then we

639
00:24:39,760 --> 00:24:41,679
can reduce it with small q here i chose

640
00:24:41,679 --> 00:24:47,440
10 31 to uh 490 bytes of of size

641
00:24:47,440 --> 00:24:49,440
interestingly if i'm reducing q i'm also

642
00:24:49,440 --> 00:24:51,760
reducing the key size so for certain

643
00:24:51,760 --> 00:24:52,880
applications it can be very interesting

644
00:24:52,880 --> 00:24:55,360
to reduce both the sig size and the key

645
00:24:55,360 --> 00:24:59,200
size and for the distortion we can reach

646
00:24:59,200 --> 00:25:00,080
uh

647
00:25:00,080 --> 00:25:03,200
signatures of 410 bytes and as you can

648
00:25:03,200 --> 00:25:06,480
see the security is barely affected

649
00:25:06,480 --> 00:25:08,159
so same goes for

650
00:25:08,159 --> 00:25:10,799
falcon in falcon and

651
00:25:10,799 --> 00:25:12,559
nist level 5.

652
00:25:12,559 --> 00:25:14,880
so if i uh redraw my little boss from

653
00:25:14,880 --> 00:25:16,400
the beginning we goes from something

654
00:25:16,400 --> 00:25:17,200
here

655
00:25:17,200 --> 00:25:20,640
which was 66 six bytes to 410 and from

656
00:25:20,640 --> 00:25:24,000
the falcon 5 which was uh 1280 bytes to

657
00:25:24,000 --> 00:25:27,279
uh 780. so that's substantial

658
00:25:27,279 --> 00:25:30,559
special shrinks so around 30 40

659
00:25:30,559 --> 00:25:32,400
it's also applies to the variant of

660
00:25:32,400 --> 00:25:35,520
falcon represented at eurocrypt in 2022

661
00:25:35,520 --> 00:25:37,840
so mitaka where we start from a six size

662
00:25:37,840 --> 00:25:39,600
from seven ten bytes and we can reduce

663
00:25:39,600 --> 00:25:42,159
it using exactly the same technique to

664
00:25:42,159 --> 00:25:45,039
460 bytes and same for mitaka

665
00:25:45,039 --> 00:25:47,600
level 5.

666
00:25:47,600 --> 00:25:50,080
so thank you for your attention and i'm

667
00:25:50,080 --> 00:25:51,600
very happy to answer your question if

668
00:25:51,600 --> 00:25:54,760
you're there

669
00:25:58,960 --> 00:26:00,480
perhaps in the interest of time we

670
00:26:00,480 --> 00:26:02,559
should take the questions offline but

671
00:26:02,559 --> 00:26:05,440
please yeah ask a small question

672
00:26:05,440 --> 00:26:07,760
thank you

673
00:26:22,960 --> 00:26:24,480
yes so

674
00:26:24,480 --> 00:26:27,919
i think your implementation takes more

675
00:26:27,919 --> 00:26:32,080
overhead than telecom or mistaken so it

676
00:26:32,080 --> 00:26:33,520
actually depends so if we if we're

677
00:26:33,520 --> 00:26:34,880
changing the queue

678
00:26:34,880 --> 00:26:37,679
uh using a queue which is not this is a

679
00:26:37,679 --> 00:26:38,400
very

680
00:26:38,400 --> 00:26:40,159
nice queue whereas we have the splits

681
00:26:40,159 --> 00:26:42,720
for the uh entity in uh for using the

682
00:26:42,720 --> 00:26:44,960
entity we won't be able to use entity of

683
00:26:44,960 --> 00:26:46,799
course so depending on the application

684
00:26:46,799 --> 00:26:48,480
we might have this not have the same

685
00:26:48,480 --> 00:26:50,799
tricks of implementation but if you for

686
00:26:50,799 --> 00:26:52,960
instance uh not using

687
00:26:52,960 --> 00:26:54,480
this uh

688
00:26:54,480 --> 00:26:57,120
nice cue from the beginning like 12

689
00:26:57,120 --> 00:27:00,880
12 95 51 um

690
00:27:00,880 --> 00:27:02,400
it will not change anything basically

691
00:27:02,400 --> 00:27:04,400
because there is so we did not implement

692
00:27:04,400 --> 00:27:07,039
that so we don't know the exact uh

693
00:27:07,039 --> 00:27:08,799
change we have on efficiency but for

694
00:27:08,799 --> 00:27:10,320
instance since we are also reducing

695
00:27:10,320 --> 00:27:12,880
everything including the the size of the

696
00:27:12,880 --> 00:27:15,279
object we're manipulating the operations

697
00:27:15,279 --> 00:27:17,679
are slightly faster as well so there

698
00:27:17,679 --> 00:27:20,480
it's it's kind of complicated to have a

699
00:27:20,480 --> 00:27:21,919
definitive answer on which one is the

700
00:27:21,919 --> 00:27:23,760
fastest it really depends on specific

701
00:27:23,760 --> 00:27:25,919
parameter sets

702
00:27:25,919 --> 00:27:27,919
and uh yeah depending on the parameters

703
00:27:27,919 --> 00:27:29,120
you want

704
00:27:29,120 --> 00:27:31,120
it might be faster it might be slightly

705
00:27:31,120 --> 00:27:32,799
but it's very marginal and the world

706
00:27:32,799 --> 00:27:34,720
thing is uh is on the same range of

707
00:27:34,720 --> 00:27:35,840
efficiency

708
00:27:35,840 --> 00:27:37,840
one more thing yes

709
00:27:37,840 --> 00:27:40,960
how about uh content measure against

710
00:27:40,960 --> 00:27:43,520
side channel attacks thank you uh so

711
00:27:43,520 --> 00:27:45,679
that's a very interesting question uh so

712
00:27:45,679 --> 00:27:46,880
we're actually not changing the

713
00:27:46,880 --> 00:27:48,559
rationale of falcon here we're just

714
00:27:48,559 --> 00:27:52,559
changing parameters somehow so um

715
00:27:52,559 --> 00:27:55,200
falcon will be as far as protect but

716
00:27:55,200 --> 00:27:58,000
since mitaka was actually designed to be

717
00:27:58,000 --> 00:28:00,240
easily masked all these nice masking

718
00:28:00,240 --> 00:28:02,159
properties are really remaining and

719
00:28:02,159 --> 00:28:03,279
change so

720
00:28:03,279 --> 00:28:05,840
it's really as easy as protecting the

721
00:28:05,840 --> 00:28:07,440
base skin

722
00:28:07,440 --> 00:28:10,159
not changing anything

723
00:28:11,200 --> 00:28:14,200
again

724
00:28:18,640 --> 00:28:19,520
and

725
00:28:19,520 --> 00:28:21,600
yeah we can move to the next uh

726
00:28:21,600 --> 00:28:25,039
presentation when they get ready

727
00:28:25,039 --> 00:28:27,840
yeah so next speaker is akira takahashi

728
00:28:27,840 --> 00:28:30,159
they will be talking about latis base

729
00:28:30,159 --> 00:28:32,799
the multi-signatures we sing around

730
00:28:32,799 --> 00:28:36,720
online face work with churchilia boskini

731
00:28:36,720 --> 00:28:39,840
and the meditebushi

732
00:28:39,919 --> 00:28:43,880
and akira will give the talk

733
00:29:02,159 --> 00:29:05,159
um

734
00:29:17,600 --> 00:29:19,919
okay uh thanks for the introduction yes

735
00:29:19,919 --> 00:29:21,600
so this is the joint work with cecilia

736
00:29:21,600 --> 00:29:24,080
bosni from technion and rajma university

737
00:29:24,080 --> 00:29:26,480
in israel and the mediterrashi from ndt

738
00:29:26,480 --> 00:29:28,960
in japan so let's get started

739
00:29:28,960 --> 00:29:30,880
so what is a mode signature

740
00:29:30,880 --> 00:29:32,559
so mode signature is essentially a

741
00:29:32,559 --> 00:29:34,080
generalized version of the use of

742
00:29:34,080 --> 00:29:35,760
signature scheme where there are

743
00:29:35,760 --> 00:29:38,159
multiple signers holding individually

744
00:29:38,159 --> 00:29:41,120
generated secret signing keys

745
00:29:41,120 --> 00:29:42,080
so

746
00:29:42,080 --> 00:29:44,799
we consider in this work the interactive

747
00:29:44,799 --> 00:29:46,960
version of the mode signature so this

748
00:29:46,960 --> 00:29:49,200
means that parties interact with each

749
00:29:49,200 --> 00:29:50,000
other

750
00:29:50,000 --> 00:29:51,120
and then

751
00:29:51,120 --> 00:29:53,200
eventually output the single signature

752
00:29:53,200 --> 00:29:55,440
on the same message m

753
00:29:55,440 --> 00:29:58,320
so the verifier takes message signature

754
00:29:58,320 --> 00:29:59,919
and the list of public keys that

755
00:29:59,919 --> 00:30:02,320
participated in the signing operation

756
00:30:02,320 --> 00:30:05,360
and eventually outputs reject or accept

757
00:30:05,360 --> 00:30:07,679
so this is the basic syntax

758
00:30:07,679 --> 00:30:09,279
so what about the security

759
00:30:09,279 --> 00:30:10,720
so usually

760
00:30:10,720 --> 00:30:12,880
the security of the mode signature is

761
00:30:12,880 --> 00:30:15,679
defined using a game between an attacker

762
00:30:15,679 --> 00:30:18,000
and on a sign

763
00:30:18,000 --> 00:30:20,320
so we usually assume that the attacker

764
00:30:20,320 --> 00:30:23,679
wraps one all but one parties

765
00:30:23,679 --> 00:30:25,039
so this means that the attacker can

766
00:30:25,039 --> 00:30:27,120
query their own assigner uh with

767
00:30:27,120 --> 00:30:29,760
arbitrary message and dynamically chosen

768
00:30:29,760 --> 00:30:31,600
list of public keys

769
00:30:31,600 --> 00:30:33,120
then after some interaction attacker

770
00:30:33,120 --> 00:30:35,440
obtained the signature and then later

771
00:30:35,440 --> 00:30:38,480
outputs message signature and list of

772
00:30:38,480 --> 00:30:39,679
public keys

773
00:30:39,679 --> 00:30:41,360
so the winning condition of the attacker

774
00:30:41,360 --> 00:30:43,039
can be stated as follows the attacker

775
00:30:43,039 --> 00:30:45,840
wins as long as the output signature

776
00:30:45,840 --> 00:30:47,760
message list is valid

777
00:30:47,760 --> 00:30:49,760
the list contains the honest party's

778
00:30:49,760 --> 00:30:51,360
public keys

779
00:30:51,360 --> 00:30:53,279
and message list pair has not been

780
00:30:53,279 --> 00:30:54,720
varied so far

781
00:30:54,720 --> 00:30:56,880
okay so one important difference with

782
00:30:56,880 --> 00:30:58,399
the user signature scheme is that

783
00:30:58,399 --> 00:31:00,080
because now we are in the interactive

784
00:31:00,080 --> 00:31:02,559
setting we have to assume that attacker

785
00:31:02,559 --> 00:31:04,799
can concurrently queries assign a

786
00:31:04,799 --> 00:31:07,519
problem okay because for example

787
00:31:07,519 --> 00:31:10,080
attacker can start a new signing session

788
00:31:10,080 --> 00:31:12,480
without finishing the ongoing signing

789
00:31:12,480 --> 00:31:15,600
session with the owner's side

790
00:31:15,600 --> 00:31:19,039
so this is the security goal

791
00:31:19,039 --> 00:31:21,039
so in this work we'd like to construct

792
00:31:21,039 --> 00:31:23,440
the lattice-based mode signature our

793
00:31:23,440 --> 00:31:25,760
starting point is a user channel based

794
00:31:25,760 --> 00:31:27,519
identification scheme in the discrete

795
00:31:27,519 --> 00:31:28,960
log setting

796
00:31:28,960 --> 00:31:31,600
so let's recall that in the additional

797
00:31:31,600 --> 00:31:32,559
setting

798
00:31:32,559 --> 00:31:34,480
approval commits to the randomness and

799
00:31:34,480 --> 00:31:36,720
upon receiving some challenge prover

800
00:31:36,720 --> 00:31:38,240
responds with some

801
00:31:38,240 --> 00:31:40,159
some value c

802
00:31:40,159 --> 00:31:42,640
and then the verifier checks this basic

803
00:31:42,640 --> 00:31:44,559
linear equation

804
00:31:44,559 --> 00:31:46,320
so once you have schnorr it is well

805
00:31:46,320 --> 00:31:48,320
known that you can instantiate a similar

806
00:31:48,320 --> 00:31:50,399
identification scheme using lysis which

807
00:31:50,399 --> 00:31:52,240
is often referred to as a fiat chemical

808
00:31:52,240 --> 00:31:54,159
visa board originally proposed by the

809
00:31:54,159 --> 00:31:55,760
vashivsky

810
00:31:55,760 --> 00:31:58,000
so just like shino first provide commits

811
00:31:58,000 --> 00:31:59,919
to the randomness but this time the

812
00:31:59,919 --> 00:32:02,240
distribution of randomness is either

813
00:32:02,240 --> 00:32:04,960
gaussian or uniform distribution over

814
00:32:04,960 --> 00:32:07,200
some small range

815
00:32:07,200 --> 00:32:10,240
in this work we consider instantiation

816
00:32:10,240 --> 00:32:12,320
in the structural axis so the challenge

817
00:32:12,320 --> 00:32:15,519
space is a subset of the entire ring

818
00:32:15,519 --> 00:32:17,120
okay

819
00:32:17,120 --> 00:32:18,960
so one important difference with snow is

820
00:32:18,960 --> 00:32:21,840
that because all of the secret key

821
00:32:21,840 --> 00:32:24,240
challenge and randomness are small

822
00:32:24,240 --> 00:32:26,799
potential distribution of the response

823
00:32:26,799 --> 00:32:30,159
value z is also small and then also it's

824
00:32:30,159 --> 00:32:32,880
not independent of the secret key

825
00:32:32,880 --> 00:32:34,320
so this means that approval cannot

826
00:32:34,320 --> 00:32:36,960
review the response directly

827
00:32:36,960 --> 00:32:38,799
additionally the prover has to perform

828
00:32:38,799 --> 00:32:41,519
the so-called rejection sampling

829
00:32:41,519 --> 00:32:43,200
then after rejection sampling the

830
00:32:43,200 --> 00:32:45,120
verifier checks the similar linear

831
00:32:45,120 --> 00:32:46,640
equation

832
00:32:46,640 --> 00:32:49,200
also because the the norm of the vector

833
00:32:49,200 --> 00:32:51,440
z is somewhat small the verifier has to

834
00:32:51,440 --> 00:32:53,600
check that norm is smaller than the

835
00:32:53,600 --> 00:32:54,840
certain

836
00:32:54,840 --> 00:32:58,480
bound so once you have a channel-like

837
00:32:58,480 --> 00:33:00,000
identification scheme

838
00:33:00,000 --> 00:33:01,039
we can

839
00:33:01,039 --> 00:33:03,279
naively construct the two-round

840
00:33:03,279 --> 00:33:04,399
protocols

841
00:33:04,399 --> 00:33:06,559
in a possibly secure setting

842
00:33:06,559 --> 00:33:08,799
so this is relatively simple essentially

843
00:33:08,799 --> 00:33:12,080
we ask each signer to produce a locally

844
00:33:12,080 --> 00:33:14,399
additional signature

845
00:33:14,399 --> 00:33:15,760
so each

846
00:33:15,760 --> 00:33:17,919
first commits the randomness

847
00:33:17,919 --> 00:33:18,799
and then

848
00:33:18,799 --> 00:33:20,960
upon receiving the other party's

849
00:33:20,960 --> 00:33:22,880
commitment you take the sum of the

850
00:33:22,880 --> 00:33:24,640
commitments

851
00:33:24,640 --> 00:33:26,720
then you derive the joint challenge and

852
00:33:26,720 --> 00:33:27,840
then later

853
00:33:27,840 --> 00:33:30,640
exchange the response values

854
00:33:30,640 --> 00:33:32,640
it is well known that using the the

855
00:33:32,640 --> 00:33:34,399
existing technique you can actually

856
00:33:34,399 --> 00:33:37,360
public aggregate public keys

857
00:33:37,360 --> 00:33:39,440
so for example you can't take a single

858
00:33:39,440 --> 00:33:42,399
public key that looks like a single snow

859
00:33:42,399 --> 00:33:44,960
like public key and this single public

860
00:33:44,960 --> 00:33:46,799
key can be constructed through the run

861
00:33:46,799 --> 00:33:47,600
number

862
00:33:47,600 --> 00:33:49,919
so more concretely you can generate

863
00:33:49,919 --> 00:33:51,760
random coefficient through the random

864
00:33:51,760 --> 00:33:53,519
morocco and then take the linear

865
00:33:53,519 --> 00:33:55,440
combination

866
00:33:55,440 --> 00:33:57,279
so again exploiting the similarity

867
00:33:57,279 --> 00:33:59,440
between chinook and fiat samia visa

868
00:33:59,440 --> 00:34:01,360
board we can directly translate this

869
00:34:01,360 --> 00:34:04,159
protocol into the lattice based one

870
00:34:04,159 --> 00:34:06,399
so syntax is mostly the same

871
00:34:06,399 --> 00:34:08,320
but one difference is that of course you

872
00:34:08,320 --> 00:34:10,960
have to perform rejection something

873
00:34:10,960 --> 00:34:12,719
also the key aggregation can be done in

874
00:34:12,719 --> 00:34:15,199
a similar manner but we use random

875
00:34:15,199 --> 00:34:18,159
quotient uh from the challenge space

876
00:34:18,159 --> 00:34:19,520
okay

877
00:34:19,520 --> 00:34:21,520
so this works thanks to the essentially

878
00:34:21,520 --> 00:34:23,520
the homomorphism of the uh this function

879
00:34:23,520 --> 00:34:25,599
here

880
00:34:25,599 --> 00:34:27,679
okay so there are already few uh

881
00:34:27,679 --> 00:34:31,040
differences so for example as i said uh

882
00:34:31,040 --> 00:34:33,520
typically the distribution of randomness

883
00:34:33,520 --> 00:34:35,679
follows gaussian or input distribution

884
00:34:35,679 --> 00:34:37,119
over some small range

885
00:34:37,119 --> 00:34:40,399
so if it's instantiated with gaussian

886
00:34:40,399 --> 00:34:42,320
because the sum of the gaussian follows

887
00:34:42,320 --> 00:34:44,079
a gain gaussian

888
00:34:44,079 --> 00:34:46,000
eventually the verification bound has to

889
00:34:46,000 --> 00:34:49,119
be adjusted and basically we assume that

890
00:34:49,119 --> 00:34:51,520
the resulting response value follows

891
00:34:51,520 --> 00:34:53,760
gaussian with slightly expanded gaussian

892
00:34:53,760 --> 00:34:55,359
parameter

893
00:34:55,359 --> 00:34:56,480
okay

894
00:34:56,480 --> 00:34:58,880
so also because we have to wait for all

895
00:34:58,880 --> 00:35:00,320
the parties to pass the rejection

896
00:35:00,320 --> 00:35:02,400
sampling simultaneously

897
00:35:02,400 --> 00:35:04,000
in order to minimize the number of

898
00:35:04,000 --> 00:35:06,800
rejection you either have to increase

899
00:35:06,800 --> 00:35:09,440
the gaussian parameter accordingly or

900
00:35:09,440 --> 00:35:11,760
perform power repetition so that you can

901
00:35:11,760 --> 00:35:13,839
pick in one instance where all signers

902
00:35:13,839 --> 00:35:16,560
pass at the same time

903
00:35:16,560 --> 00:35:18,720
so this is a basic blueprint but it is

904
00:35:18,720 --> 00:35:21,200
well known that this naive construction

905
00:35:21,200 --> 00:35:23,440
is insecure whenever the attacker

906
00:35:23,440 --> 00:35:25,440
behaves maliciously

907
00:35:25,440 --> 00:35:27,280
so in the district log setting actually

908
00:35:27,280 --> 00:35:29,520
the existing uh two round

909
00:35:29,520 --> 00:35:31,119
snow-based protocols are insecure

910
00:35:31,119 --> 00:35:33,280
against concurrent attacks for example

911
00:35:33,280 --> 00:35:34,800
the driver's attack

912
00:35:34,800 --> 00:35:36,079
showed the attack

913
00:35:36,079 --> 00:35:38,640
exploiting the kelly sum problem

914
00:35:38,640 --> 00:35:40,720
and there's even more efficient attack

915
00:35:40,720 --> 00:35:44,480
using the rrsf ros problem

916
00:35:44,480 --> 00:35:46,480
so in order to achieve active security

917
00:35:46,480 --> 00:35:50,079
we have to do something more complicated

918
00:35:50,079 --> 00:35:51,680
in a discrete log setting there have

919
00:35:51,680 --> 00:35:52,720
been

920
00:35:52,720 --> 00:35:55,359
several interesting techniques

921
00:35:55,359 --> 00:35:57,520
so for example the most natural solution

922
00:35:57,520 --> 00:35:59,760
is commit and open

923
00:35:59,760 --> 00:36:02,079
so with this solution first you commit

924
00:36:02,079 --> 00:36:04,800
to the u value and then upon receiving

925
00:36:04,800 --> 00:36:06,640
the other party's commitment you open

926
00:36:06,640 --> 00:36:08,160
the commitment

927
00:36:08,160 --> 00:36:10,000
so this works nicely

928
00:36:10,000 --> 00:36:12,160
but unfortunately it requires three

929
00:36:12,160 --> 00:36:13,839
rounds of interaction it has to the run

930
00:36:13,839 --> 00:36:15,599
complexity

931
00:36:15,599 --> 00:36:17,599
so in order to preserve the random round

932
00:36:17,599 --> 00:36:19,920
complexity there's another method called

933
00:36:19,920 --> 00:36:22,480
a trapdoor homomorphic commitment

934
00:36:22,480 --> 00:36:24,720
so here you first generate a commitment

935
00:36:24,720 --> 00:36:27,359
key based on the message to be signed

936
00:36:27,359 --> 00:36:28,880
and then you send a commitment to the u

937
00:36:28,880 --> 00:36:29,920
value

938
00:36:29,920 --> 00:36:31,200
because now we instantiate the

939
00:36:31,200 --> 00:36:33,280
commitment with additively homophobic

940
00:36:33,280 --> 00:36:35,119
one you can take the commitment you can

941
00:36:35,119 --> 00:36:36,720
take the sum of the commitment in a

942
00:36:36,720 --> 00:36:38,960
meaningful way

943
00:36:38,960 --> 00:36:40,800
and if you additionally equip the

944
00:36:40,800 --> 00:36:43,440
commitment with a trapdoor the simulator

945
00:36:43,440 --> 00:36:45,280
can equivocate commitment to whatever

946
00:36:45,280 --> 00:36:47,920
value and turns out that this allows you

947
00:36:47,920 --> 00:36:49,359
to simulate

948
00:36:49,359 --> 00:36:52,960
even with the two-round protocol

949
00:36:52,960 --> 00:36:54,960
however uh one

950
00:36:54,960 --> 00:36:57,200
drawback of this method is that because

951
00:36:57,200 --> 00:36:58,960
the commitment key depends on the

952
00:36:58,960 --> 00:37:00,880
message to be signed two rounds of

953
00:37:00,880 --> 00:37:03,359
instruction must happen online you have

954
00:37:03,359 --> 00:37:05,359
to foresee the message and then perform

955
00:37:05,359 --> 00:37:08,079
two rounds of interaction

956
00:37:08,079 --> 00:37:10,160
there's more interesting method which

957
00:37:10,160 --> 00:37:12,960
uses linear combinations

958
00:37:12,960 --> 00:37:15,200
so in this method you first exchange a

959
00:37:15,200 --> 00:37:17,520
bunch of new values

960
00:37:17,520 --> 00:37:19,839
and then upon receiving all your values

961
00:37:19,839 --> 00:37:21,119
you take the random and linear

962
00:37:21,119 --> 00:37:23,359
combinations

963
00:37:23,359 --> 00:37:25,280
and how random linear combination

964
00:37:25,280 --> 00:37:26,720
coefficients are derived will be

965
00:37:26,720 --> 00:37:28,480
explained later

966
00:37:28,480 --> 00:37:30,240
so this is nice because the first round

967
00:37:30,240 --> 00:37:31,920
interaction can be essentially a

968
00:37:31,920 --> 00:37:33,520
performance offline

969
00:37:33,520 --> 00:37:35,599
so this leads to single round online

970
00:37:35,599 --> 00:37:37,200
interface

971
00:37:37,200 --> 00:37:39,040
so let's zoom out a bit and briefly

972
00:37:39,040 --> 00:37:41,280
recap existing constructions

973
00:37:41,280 --> 00:37:43,200
so actually using the existing method

974
00:37:43,200 --> 00:37:45,119
commit and open trapdoor homomorphic

975
00:37:45,119 --> 00:37:47,599
commitments you can instantiate three

976
00:37:47,599 --> 00:37:49,839
round and two-round protocols both

977
00:37:49,839 --> 00:37:52,800
industry log and large settings

978
00:37:52,800 --> 00:37:54,720
so here's a typical way to translate the

979
00:37:54,720 --> 00:37:57,040
snow based protocol to the fiat chamber

980
00:37:57,040 --> 00:37:58,240
visa board

981
00:37:58,240 --> 00:38:00,000
so first you take the snow based

982
00:38:00,000 --> 00:38:02,800
protocol and then replace all the

983
00:38:02,800 --> 00:38:04,480
discrete log base operations with

984
00:38:04,480 --> 00:38:06,480
lattice this one

985
00:38:06,480 --> 00:38:08,480
so you sort of emulate what's happening

986
00:38:08,480 --> 00:38:09,839
in the snow based protocol using

987
00:38:09,839 --> 00:38:11,599
analysis

988
00:38:11,599 --> 00:38:13,440
and typically as long as the underlying

989
00:38:13,440 --> 00:38:15,599
snow based scheme relies on this vlog

990
00:38:15,599 --> 00:38:16,880
based assumption

991
00:38:16,880 --> 00:38:19,040
the lattice-based counterparts can be

992
00:38:19,040 --> 00:38:20,880
also proven secure

993
00:38:20,880 --> 00:38:24,720
assuming the hardness of the sys program

994
00:38:24,720 --> 00:38:26,800
and the latest constructions on this

995
00:38:26,800 --> 00:38:29,359
line of research are music 2 and dwms

996
00:38:29,359 --> 00:38:32,240
which are presented encrypt last year

997
00:38:32,240 --> 00:38:34,480
so this construction nice because they

998
00:38:34,480 --> 00:38:36,160
essentially use this linear combination

999
00:38:36,160 --> 00:38:37,119
technique

1000
00:38:37,119 --> 00:38:39,200
and they can successfully achieve a

1001
00:38:39,200 --> 00:38:42,400
one-round online online phase

1002
00:38:42,400 --> 00:38:44,800
but here's the main technical challenge

1003
00:38:44,800 --> 00:38:46,960
because these constructions rely on

1004
00:38:46,960 --> 00:38:49,520
either algebraic model or one more

1005
00:38:49,520 --> 00:38:51,200
discrete log assumption

1006
00:38:51,200 --> 00:38:54,240
uh it's hard to directly translate this

1007
00:38:54,240 --> 00:38:56,400
construction into the lattice set

1008
00:38:56,400 --> 00:38:58,480
of course in principle you can consider

1009
00:38:58,480 --> 00:39:00,880
large space analog of agm or one more

1010
00:39:00,880 --> 00:39:03,040
discrete log assumption but definitely

1011
00:39:03,040 --> 00:39:04,800
at the moment it's not the standard

1012
00:39:04,800 --> 00:39:06,640
assumption yet

1013
00:39:06,640 --> 00:39:08,960
so our question was can we construct a

1014
00:39:08,960 --> 00:39:11,440
scheme with single round online face

1015
00:39:11,440 --> 00:39:14,880
from standard aw and sis assumptions in

1016
00:39:14,880 --> 00:39:17,599
this work we answer this question

1017
00:39:17,599 --> 00:39:21,680
by proposing a new scheme musical

1018
00:39:21,680 --> 00:39:24,400
so let's take a look at our scheme

1019
00:39:24,400 --> 00:39:26,160
so on a high level

1020
00:39:26,160 --> 00:39:28,800
it works as follows so the main

1021
00:39:28,800 --> 00:39:30,560
differences with the possibly secure

1022
00:39:30,560 --> 00:39:33,280
protocols are highlighted here

1023
00:39:33,280 --> 00:39:35,599
so during the first round of interaction

1024
00:39:35,599 --> 00:39:38,800
you exchange a bunch of u vectors

1025
00:39:38,800 --> 00:39:41,119
and please notice that this first random

1026
00:39:41,119 --> 00:39:43,280
interaction is completely independent of

1027
00:39:43,280 --> 00:39:44,000
the

1028
00:39:44,000 --> 00:39:46,640
independent of the message to be signed

1029
00:39:46,640 --> 00:39:49,040
we also assume uh power of two cytocycle

1030
00:39:49,040 --> 00:39:50,960
atomic ring here so everything operative

1031
00:39:50,960 --> 00:39:53,359
on polynomial ring

1032
00:39:53,359 --> 00:39:56,240
and then upon receiving all the u values

1033
00:39:56,240 --> 00:39:58,720
message to be signed you take the you

1034
00:39:58,720 --> 00:40:01,440
take all of them and hash them

1035
00:40:01,440 --> 00:40:03,599
and then eventually you derive the

1036
00:40:03,599 --> 00:40:06,160
random quotient b

1037
00:40:06,160 --> 00:40:08,960
so if you're familiar with music 2 dwms

1038
00:40:08,960 --> 00:40:12,400
or frost display based schemes

1039
00:40:12,400 --> 00:40:13,920
you probably see a lot of similarities

1040
00:40:13,920 --> 00:40:14,800
here

1041
00:40:14,800 --> 00:40:16,800
but there's one important difference so

1042
00:40:16,800 --> 00:40:18,960
this random coefficient b

1043
00:40:18,960 --> 00:40:20,880
actually follows gaussian the reason why

1044
00:40:20,880 --> 00:40:22,800
b follows gaussian is going to be clear

1045
00:40:22,800 --> 00:40:24,640
when i give an overview of security

1046
00:40:24,640 --> 00:40:26,879
proof

1047
00:40:27,119 --> 00:40:29,839
so uh basically thanks to this random

1048
00:40:29,839 --> 00:40:31,920
linear combination it makes it difficult

1049
00:40:31,920 --> 00:40:34,480
to predict the resulting value that is

1050
00:40:34,480 --> 00:40:36,839
going to be hashed when you apply field

1051
00:40:36,839 --> 00:40:39,280
sharing and this prevents the concurrent

1052
00:40:39,280 --> 00:40:41,280
attack essentially

1053
00:40:41,280 --> 00:40:44,319
so this is a very basic two-round

1054
00:40:44,319 --> 00:40:46,079
two-party protocol

1055
00:40:46,079 --> 00:40:47,599
but you can easily generalize this

1056
00:40:47,599 --> 00:40:49,440
protocol in the n-party setting so in

1057
00:40:49,440 --> 00:40:51,440
the n-party setting in a paper we show

1058
00:40:51,440 --> 00:40:53,200
that the signature size scales

1059
00:40:53,200 --> 00:40:55,359
logarithmically in the number of bodies

1060
00:40:55,359 --> 00:40:59,040
times the degree of the model

1061
00:40:59,119 --> 00:41:00,880
so at a high level the scheme is

1062
00:41:00,880 --> 00:41:02,240
relatively simple

1063
00:41:02,240 --> 00:41:04,720
but proving security from standard

1064
00:41:04,720 --> 00:41:06,880
assumption becomes quite

1065
00:41:06,880 --> 00:41:08,720
intricate

1066
00:41:08,720 --> 00:41:10,079
so i would like to give an overview of

1067
00:41:10,079 --> 00:41:11,760
the security

1068
00:41:11,760 --> 00:41:13,359
so typically

1069
00:41:13,359 --> 00:41:15,520
the main technical challenge of security

1070
00:41:15,520 --> 00:41:18,560
proof when you for the mod signature

1071
00:41:18,560 --> 00:41:20,480
is to simulate the owner's sinus

1072
00:41:20,480 --> 00:41:22,400
behavior without knowing the secret

1073
00:41:22,400 --> 00:41:24,720
signing key

1074
00:41:24,720 --> 00:41:26,560
so there are essentially two key

1075
00:41:26,560 --> 00:41:29,280
observations first we use a generalized

1076
00:41:29,280 --> 00:41:31,280
version of rejection sampling

1077
00:41:31,280 --> 00:41:33,680
this can fix the gaussian parameter of

1078
00:41:33,680 --> 00:41:36,960
the potential response value z

1079
00:41:36,960 --> 00:41:39,440
second we use pre-made sampling

1080
00:41:39,440 --> 00:41:41,520
algorithm uh using a standard large

1081
00:41:41,520 --> 00:41:43,680
structure technique

1082
00:41:43,680 --> 00:41:45,520
so with using the knowledge of the

1083
00:41:45,520 --> 00:41:47,680
trapdoor you can generate the bunch of

1084
00:41:47,680 --> 00:41:49,839
view vector and then later this helps

1085
00:41:49,839 --> 00:41:52,720
you simulate the signing oracle

1086
00:41:52,720 --> 00:41:55,520
so let's take a look at each technique

1087
00:41:55,520 --> 00:41:56,720
so

1088
00:41:56,720 --> 00:41:58,880
let's record a standard rejection

1089
00:41:58,880 --> 00:42:01,440
sampling from vivashivsky's paper

1090
00:42:01,440 --> 00:42:03,599
so as i said the potential response

1091
00:42:03,599 --> 00:42:05,839
value z somewhat depends on the secret

1092
00:42:05,839 --> 00:42:06,640
key

1093
00:42:06,640 --> 00:42:08,560
so this means that you have to perform

1094
00:42:08,560 --> 00:42:10,800
some rejection sampling algorithm so

1095
00:42:10,800 --> 00:42:12,720
that the resulting distribution is

1096
00:42:12,720 --> 00:42:14,640
centered at zero so this is the

1097
00:42:14,640 --> 00:42:17,200
potential the resulting z looks

1098
00:42:17,200 --> 00:42:18,800
completely uniform

1099
00:42:18,800 --> 00:42:20,000
and it

1100
00:42:20,000 --> 00:42:21,839
sorry the completely independent of the

1101
00:42:21,839 --> 00:42:23,599
secret key

1102
00:42:23,599 --> 00:42:26,319
however in music 2 we have to generalize

1103
00:42:26,319 --> 00:42:27,520
this setting

1104
00:42:27,520 --> 00:42:30,640
so as i said the randomness of the

1105
00:42:30,640 --> 00:42:33,280
signing algorithm is constructed using

1106
00:42:33,280 --> 00:42:34,880
the linear combination so this means

1107
00:42:34,880 --> 00:42:38,480
that the randomness z randomness r is

1108
00:42:38,480 --> 00:42:40,640
constructed from smaller gaussian

1109
00:42:40,640 --> 00:42:42,480
distribution

1110
00:42:42,480 --> 00:42:45,359
however the resulting output value z has

1111
00:42:45,359 --> 00:42:48,000
to be actually independent of the random

1112
00:42:48,000 --> 00:42:50,000
coefficient b

1113
00:42:50,000 --> 00:42:52,240
so the reason why we need we need to

1114
00:42:52,240 --> 00:42:54,720
make it independent of the b is that in

1115
00:42:54,720 --> 00:42:56,720
the security proof you actually have to

1116
00:42:56,720 --> 00:42:58,960
generate a z first and then only after

1117
00:42:58,960 --> 00:43:00,720
that you can generate b

1118
00:43:00,720 --> 00:43:03,440
so this requires us to fix the gaussian

1119
00:43:03,440 --> 00:43:06,000
parameter

1120
00:43:06,160 --> 00:43:07,760
also it turns out that the rejection

1121
00:43:07,760 --> 00:43:10,240
sampling works even if the distribution

1122
00:43:10,240 --> 00:43:13,119
of the z is restricted to the lattice

1123
00:43:13,119 --> 00:43:14,319
concept

1124
00:43:14,319 --> 00:43:16,160
i'm not going to the technical details

1125
00:43:16,160 --> 00:43:18,640
but this is going to be required during

1126
00:43:18,640 --> 00:43:20,880
the security tool

1127
00:43:20,880 --> 00:43:22,319
so in our paper we show this

1128
00:43:22,319 --> 00:43:23,760
generalization of the rejection

1129
00:43:23,760 --> 00:43:26,400
something works

1130
00:43:26,400 --> 00:43:28,000
so the second key technique is the

1131
00:43:28,000 --> 00:43:30,000
pre-image sampling using the standard

1132
00:43:30,000 --> 00:43:31,440
larystraptor

1133
00:43:31,440 --> 00:43:34,319
so let's look at the basic operations

1134
00:43:34,319 --> 00:43:36,560
that often happen in the lattice base

1135
00:43:36,560 --> 00:43:38,079
signatures

1136
00:43:38,079 --> 00:43:40,319
so you first generate the uniform matrix

1137
00:43:40,319 --> 00:43:41,280
u

1138
00:43:41,280 --> 00:43:44,079
and then take gaussian vector output the

1139
00:43:44,079 --> 00:43:46,400
multiplication between them

1140
00:43:46,400 --> 00:43:48,240
so it turns out that if you know the

1141
00:43:48,240 --> 00:43:50,640
trapdoor for the matrix u you can do

1142
00:43:50,640 --> 00:43:53,200
this operation in opposite direction

1143
00:43:53,200 --> 00:43:55,839
so you take the target vector u and with

1144
00:43:55,839 --> 00:43:57,839
the knowledge of trapdoor you can sample

1145
00:43:57,839 --> 00:43:59,280
the premade speed

1146
00:43:59,280 --> 00:44:01,599
following a gaussian distribution define

1147
00:44:01,599 --> 00:44:03,760
over some coset that satisfies this

1148
00:44:03,760 --> 00:44:05,920
equation

1149
00:44:05,920 --> 00:44:07,839
so given these key techniques it turns

1150
00:44:07,839 --> 00:44:10,720
out that we can give security proof uh

1151
00:44:10,720 --> 00:44:14,480
only assuming uh sis ended up

1152
00:44:14,480 --> 00:44:16,720
so this is the overview of the signing

1153
00:44:16,720 --> 00:44:18,720
oracle simulation

1154
00:44:18,720 --> 00:44:21,040
so in the first round of introduction

1155
00:44:21,040 --> 00:44:22,960
first parties generate a bunch of new

1156
00:44:22,960 --> 00:44:25,040
vectors with the non-traptor

1157
00:44:25,040 --> 00:44:27,280
and then output u

1158
00:44:27,280 --> 00:44:29,680
then on receiving

1159
00:44:29,680 --> 00:44:30,960
the vectors

1160
00:44:30,960 --> 00:44:33,119
you run on a verification or simulator

1161
00:44:33,119 --> 00:44:34,640
of the underlying identification

1162
00:44:34,640 --> 00:44:37,200
protocol and this ensures that honest

1163
00:44:37,200 --> 00:44:38,960
part is translated satisfies the

1164
00:44:38,960 --> 00:44:42,000
verification equation

1165
00:44:42,079 --> 00:44:44,319
then thanks to the knowledge trapdoor

1166
00:44:44,319 --> 00:44:47,200
now you can sample the pre-image of the

1167
00:44:47,200 --> 00:44:48,160
uh

1168
00:44:48,160 --> 00:44:48,839
the

1169
00:44:48,839 --> 00:44:52,720
coset so this is exactly why the random

1170
00:44:52,720 --> 00:44:55,680
quotient has to follow gaussian

1171
00:44:55,680 --> 00:44:58,160
so this helps actually uh

1172
00:44:58,160 --> 00:45:00,640
this helps us invoke the existing

1173
00:45:00,640 --> 00:45:02,640
premise something algorithm

1174
00:45:02,640 --> 00:45:04,480
so now you get the vector v

1175
00:45:04,480 --> 00:45:06,560
and then program the random oco using

1176
00:45:06,560 --> 00:45:09,359
the sample vector v

1177
00:45:09,359 --> 00:45:10,960
for example you can instantiate this

1178
00:45:10,960 --> 00:45:12,560
algorithm using the

1179
00:45:12,560 --> 00:45:14,800
well-known emi change of pi contract

1180
00:45:14,800 --> 00:45:16,640
by setting the number of vectors

1181
00:45:16,640 --> 00:45:19,119
appropriately

1182
00:45:19,119 --> 00:45:21,280
so this is the high level overview and

1183
00:45:21,280 --> 00:45:23,760
please notice that this simulation is

1184
00:45:23,760 --> 00:45:26,560
purely statistical

1185
00:45:26,560 --> 00:45:29,920
so uh in this work uh we pro we say the

1186
00:45:29,920 --> 00:45:32,079
feasibility of yatra visa board-based

1187
00:45:32,079 --> 00:45:33,760
mode signature with single round on

1188
00:45:33,760 --> 00:45:35,040
right phase

1189
00:45:35,040 --> 00:45:36,800
and then we can show static curve

1190
00:45:36,800 --> 00:45:39,520
simulation of sine oracle and remarkably

1191
00:45:39,520 --> 00:45:41,920
during the simulation we require no one

1192
00:45:41,920 --> 00:45:43,440
more assumption as in the discrete-look

1193
00:45:43,440 --> 00:45:45,040
setting

1194
00:45:45,040 --> 00:45:46,640
and once you have a simulation of the

1195
00:45:46,640 --> 00:45:49,200
sign oracle you can invoke the standard

1196
00:45:49,200 --> 00:45:51,760
poking lemma based argument so first you

1197
00:45:51,760 --> 00:45:54,640
rewind adversely and then obtain

1198
00:45:54,640 --> 00:45:56,640
two uh fusilies from which you can

1199
00:45:56,640 --> 00:45:59,119
construct the seed solution

1200
00:45:59,119 --> 00:46:00,720
and this reduction is done in the

1201
00:46:00,720 --> 00:46:03,440
vascular animal

1202
00:46:03,440 --> 00:46:05,920
and again we rely on essentially key two

1203
00:46:05,920 --> 00:46:08,240
keys observation one generalized

1204
00:46:08,240 --> 00:46:09,920
rejection something lemma

1205
00:46:09,920 --> 00:46:11,839
two pretty much something technique

1206
00:46:11,839 --> 00:46:13,680
using a large structure

1207
00:46:13,680 --> 00:46:15,599
but this only comes into play in the

1208
00:46:15,599 --> 00:46:17,200
security proof the actual signing

1209
00:46:17,200 --> 00:46:19,760
operation does not require a premium

1210
00:46:19,760 --> 00:46:23,040
something or trapdoor generation

1211
00:46:23,040 --> 00:46:24,720
so other concurrent work i would like to

1212
00:46:24,720 --> 00:46:27,680
mention the squirrel scheme which also

1213
00:46:27,680 --> 00:46:29,839
achieves a non-interactive mode

1214
00:46:29,839 --> 00:46:31,839
signature using analysis and their

1215
00:46:31,839 --> 00:46:33,520
scheme will completely

1216
00:46:33,520 --> 00:46:35,920
rely on completely different techniques

1217
00:46:35,920 --> 00:46:37,920
so if you're interested in concrete and

1218
00:46:37,920 --> 00:46:40,079
efficient scheme i recommend you look at

1219
00:46:40,079 --> 00:46:42,079
this paper

1220
00:46:42,079 --> 00:46:44,800
so in this paper we mostly focus on

1221
00:46:44,800 --> 00:46:46,960
feasibility of the one round

1222
00:46:46,960 --> 00:46:50,079
online phase using standard assumptions

1223
00:46:50,079 --> 00:46:52,160
so efficient instantiation and concrete

1224
00:46:52,160 --> 00:46:54,160
parameters are left for future work for

1225
00:46:54,160 --> 00:46:56,400
example can we exploit the entry

1226
00:46:56,400 --> 00:46:58,640
or one more sis assumption which was

1227
00:46:58,640 --> 00:47:00,640
proposed recently in order to minimize

1228
00:47:00,640 --> 00:47:02,640
the overhead introduced by

1229
00:47:02,640 --> 00:47:04,560
random question technique

1230
00:47:04,560 --> 00:47:06,400
and this might help reduce the signature

1231
00:47:06,400 --> 00:47:10,560
size or a communication complexity

1232
00:47:10,560 --> 00:47:12,319
also the natural question is whether we

1233
00:47:12,319 --> 00:47:13,839
can give a security reduction in the

1234
00:47:13,839 --> 00:47:14,960
quantum run

1235
00:47:14,960 --> 00:47:16,480
in this work we rely on the class

1236
00:47:16,480 --> 00:47:17,440
government

1237
00:47:17,440 --> 00:47:19,920
and the spoken labor-based document

1238
00:47:19,920 --> 00:47:21,760
another important interesting question

1239
00:47:21,760 --> 00:47:23,680
is to give a security proof in a

1240
00:47:23,680 --> 00:47:26,480
simulation-based model

1241
00:47:26,480 --> 00:47:28,640
so usually most signatures security is

1242
00:47:28,640 --> 00:47:31,839
defined using the game but since we care

1243
00:47:31,839 --> 00:47:34,079
so much about concurrent security it

1244
00:47:34,079 --> 00:47:35,920
probably is probably natural to consider

1245
00:47:35,920 --> 00:47:38,880
simulation-based security as well

1246
00:47:38,880 --> 00:47:40,720
so thank you so much for your attention

1247
00:47:40,720 --> 00:47:42,160
if you have any questions i'll be happy

1248
00:47:42,160 --> 00:47:45,319
to answer

1249
00:47:52,800 --> 00:47:54,580
so we have time for one brief question

1250
00:47:54,580 --> 00:47:57,659
[Music]

1251
00:48:00,960 --> 00:48:03,040
thank you for the presentation um any

1252
00:48:03,040 --> 00:48:04,880
intuition on what you would need to

1253
00:48:04,880 --> 00:48:09,040
prove a strong affordability and or

1254
00:48:09,040 --> 00:48:10,400
security under

1255
00:48:10,400 --> 00:48:12,960
adaptive corruptions

1256
00:48:12,960 --> 00:48:15,280
okay so regarding strong unforgetting in

1257
00:48:15,280 --> 00:48:16,880
this paper we didn't really consider

1258
00:48:16,880 --> 00:48:19,359
strong possibility so

1259
00:48:19,359 --> 00:48:21,280
i wouldn't guarantee uh any anything

1260
00:48:21,280 --> 00:48:23,440
about that setting

1261
00:48:23,440 --> 00:48:25,520
and i'm not sure about adaptive

1262
00:48:25,520 --> 00:48:27,200
corruption because now we are in more

1263
00:48:27,200 --> 00:48:29,520
signature setting that adversely doesn't

1264
00:48:29,520 --> 00:48:31,760
really move from one party to another to

1265
00:48:31,760 --> 00:48:34,079
corrupt the parties so we basically

1266
00:48:34,079 --> 00:48:35,839
assume that all but one part is already

1267
00:48:35,839 --> 00:48:39,280
corrupted and one spot is fixed so

1268
00:48:39,280 --> 00:48:40,640
yeah i'm not sure how you define

1269
00:48:40,640 --> 00:48:42,160
adaptive security in the most signature

1270
00:48:42,160 --> 00:48:45,520
setting that's the answer

1271
00:48:46,160 --> 00:48:49,160
okay

1272
00:48:54,000 --> 00:48:56,000
we can move to the next presentation

1273
00:48:56,000 --> 00:48:57,200
will be given

1274
00:48:57,200 --> 00:49:00,200
online

1275
00:49:10,000 --> 00:49:12,480
can you hear me on zoom

1276
00:49:12,480 --> 00:49:14,160
go ahead and share your screen for the

1277
00:49:14,160 --> 00:49:16,960
next presenter thank you

1278
00:49:16,960 --> 00:49:21,280
hello let me share my screen

1279
00:49:21,599 --> 00:49:24,880
so is everything fine

1280
00:49:27,359 --> 00:49:28,800
can you hear me

1281
00:49:28,800 --> 00:49:32,480
yes we can hear you uh your your uh

1282
00:49:32,480 --> 00:49:34,000
your presentation's up on the screen

1283
00:49:34,000 --> 00:49:36,720
you're good to go thank you perfect okay

1284
00:49:36,720 --> 00:49:39,440
so the next presentation is a new

1285
00:49:39,440 --> 00:49:42,160
framework for a more efficient lattice

1286
00:49:42,160 --> 00:49:45,119
base the partially brined signatures

1287
00:49:45,119 --> 00:49:47,440
by switching katsumata and rafael del

1288
00:49:47,440 --> 00:49:51,040
pino and raphael will give the talk

1289
00:49:51,040 --> 00:49:53,440
thank you thank you for the introduction

1290
00:49:53,440 --> 00:49:54,400
and

1291
00:49:54,400 --> 00:49:56,400
so in spite of the complicated title

1292
00:49:56,400 --> 00:49:58,559
what we are doing is simply

1293
00:49:58,559 --> 00:50:00,319
more efficient

1294
00:50:00,319 --> 00:50:02,880
blind signatures on lattices

1295
00:50:02,880 --> 00:50:03,680
so

1296
00:50:03,680 --> 00:50:05,440
first

1297
00:50:05,440 --> 00:50:07,839
like what is a blind signature

1298
00:50:07,839 --> 00:50:10,800
so we have two parties a user who has a

1299
00:50:10,800 --> 00:50:12,640
message and a server who has a signing

1300
00:50:12,640 --> 00:50:15,200
key and the user wants to have a

1301
00:50:15,200 --> 00:50:17,040
signature on his message

1302
00:50:17,040 --> 00:50:18,880
under the signing key of the server

1303
00:50:18,880 --> 00:50:20,960
without revealing his message

1304
00:50:20,960 --> 00:50:23,760
so we consider only rounded optimal

1305
00:50:23,760 --> 00:50:26,319
solutions here which are

1306
00:50:26,319 --> 00:50:29,280
solutions in two rounds in which first

1307
00:50:29,280 --> 00:50:31,520
the user will send a first flow which

1308
00:50:31,520 --> 00:50:33,760
we'll call the commitment and the server

1309
00:50:33,760 --> 00:50:36,240
will send a response and finally the

1310
00:50:36,240 --> 00:50:39,280
user will output the signature

1311
00:50:39,280 --> 00:50:41,920
as per usual we want correctness meaning

1312
00:50:41,920 --> 00:50:44,640
that if the protocol is run honestly

1313
00:50:44,640 --> 00:50:48,400
then the user outputs a valid signature

1314
00:50:48,400 --> 00:50:50,319
we want enforceability and more

1315
00:50:50,319 --> 00:50:53,040
specifically one more informability

1316
00:50:53,040 --> 00:50:55,839
meaning that if an adversary can observe

1317
00:50:55,839 --> 00:50:58,319
all sessions of the protocol it should

1318
00:50:58,319 --> 00:51:00,480
not be able to publish l plus one

1319
00:51:00,480 --> 00:51:02,480
signatures afterwards

1320
00:51:02,480 --> 00:51:05,280
and blindness meaning that intuitively

1321
00:51:05,280 --> 00:51:07,200
what we want is that the server should

1322
00:51:07,200 --> 00:51:09,680
not be able to link any signature sigma

1323
00:51:09,680 --> 00:51:12,079
to a specific execution of the protocol

1324
00:51:12,079 --> 00:51:12,720
c

1325
00:51:12,720 --> 00:51:14,880
sigma prime

1326
00:51:14,880 --> 00:51:16,240
so that's for

1327
00:51:16,240 --> 00:51:19,200
what blind signatures are and what we

1328
00:51:19,200 --> 00:51:20,559
obtain is

1329
00:51:20,559 --> 00:51:22,480
so a more efficient

1330
00:51:22,480 --> 00:51:24,640
lattice based round optimal meaning in

1331
00:51:24,640 --> 00:51:27,200
surround partially blind signature so

1332
00:51:27,200 --> 00:51:29,359
partially means that we can add any

1333
00:51:29,359 --> 00:51:30,800
fixed message

1334
00:51:30,800 --> 00:51:33,520
to the blind message

1335
00:51:33,520 --> 00:51:36,160
and that's useful for authentication

1336
00:51:36,160 --> 00:51:37,839
anonymous credential and other

1337
00:51:37,839 --> 00:51:39,040
constructions

1338
00:51:39,040 --> 00:51:40,720
and we obtain all of this in the queue

1339
00:51:40,720 --> 00:51:42,000
room

1340
00:51:42,000 --> 00:51:44,960
so how do we do this at a high level

1341
00:51:44,960 --> 00:51:46,960
we use the generic blind signature

1342
00:51:46,960 --> 00:51:50,240
construction of fishling 2005. which

1343
00:51:50,240 --> 00:51:53,200
needs a commitment a signature scheme

1344
00:51:53,200 --> 00:51:55,440
and a zero knowledge proof

1345
00:51:55,440 --> 00:51:57,520
so for the commitment we will just use

1346
00:51:57,520 --> 00:52:00,800
the bdlop commitment which is one

1347
00:52:00,800 --> 00:52:04,160
i would say most used in lattice-based

1348
00:52:04,160 --> 00:52:05,680
cryptography

1349
00:52:05,680 --> 00:52:07,440
and for the signature and zero knowledge

1350
00:52:07,440 --> 00:52:09,520
proof we will need a new approach

1351
00:52:09,520 --> 00:52:12,559
because things don't just work easily

1352
00:52:12,559 --> 00:52:14,640
when trying to do fishling on the

1353
00:52:14,640 --> 00:52:16,559
lattices

1354
00:52:16,559 --> 00:52:17,440
so

1355
00:52:17,440 --> 00:52:19,599
in fact there have been a lot of works

1356
00:52:19,599 --> 00:52:22,240
on trying to do uh blind signatures on

1357
00:52:22,240 --> 00:52:24,880
lattices and all of them have some

1358
00:52:24,880 --> 00:52:26,000
caveats

1359
00:52:26,000 --> 00:52:28,800
so a first line of work was started by

1360
00:52:28,800 --> 00:52:32,400
rukurt in 2010 and the last paper being

1361
00:52:32,400 --> 00:52:34,160
by how capital

1362
00:52:34,160 --> 00:52:35,839
in 2020

1363
00:52:35,839 --> 00:52:37,599
and the problem of this line of work

1364
00:52:37,599 --> 00:52:39,920
which is based based on the schnoor type

1365
00:52:39,920 --> 00:52:42,480
blind signature is that the first few

1366
00:52:42,480 --> 00:52:45,440
papers had the wrong proof of security

1367
00:52:45,440 --> 00:52:47,839
so the how capital repaired this proof

1368
00:52:47,839 --> 00:52:50,079
of security at the cost of having a

1369
00:52:50,079 --> 00:52:53,040
signature that is of several megabytes

1370
00:52:53,040 --> 00:52:57,160
so that's an issue a very recent work by

1371
00:52:57,160 --> 00:52:58,800
lukaszewskital

1372
00:52:58,800 --> 00:53:00,960
uses one time signature and or proofs

1373
00:53:00,960 --> 00:53:03,440
and it achieves small signatures with

1374
00:53:03,440 --> 00:53:05,040
roundup timo

1375
00:53:05,040 --> 00:53:07,760
small and random demo signatures

1376
00:53:07,760 --> 00:53:09,359
but it needs an upper bound on the

1377
00:53:09,359 --> 00:53:11,440
number of signatures because the running

1378
00:53:11,440 --> 00:53:15,359
time of the protocol is linear in the

1379
00:53:15,359 --> 00:53:18,160
total number of signatures

1380
00:53:18,160 --> 00:53:20,480
and finally there have been two other

1381
00:53:20,480 --> 00:53:22,720
recent constructions uh based on

1382
00:53:22,720 --> 00:53:25,040
fishlin's generic construction by

1383
00:53:25,040 --> 00:53:27,200
agrawal italy

1384
00:53:27,200 --> 00:53:30,480
and the first one requires evaluating a

1385
00:53:30,480 --> 00:53:33,040
random oracle via an fhe

1386
00:53:33,040 --> 00:53:34,880
so which if you think about is not

1387
00:53:34,880 --> 00:53:36,559
really possible because around america

1388
00:53:36,559 --> 00:53:38,880
does not have a circuit so what they do

1389
00:53:38,880 --> 00:53:41,359
is they take an explicit

1390
00:53:41,359 --> 00:53:45,359
circuit of an explicit hash function

1391
00:53:45,359 --> 00:53:47,680
instead of random oracle but even doing

1392
00:53:47,680 --> 00:53:50,240
this evaluating such a function with a

1393
00:53:50,240 --> 00:53:53,440
flimomorphic encryption is very costly

1394
00:53:53,440 --> 00:53:56,720
and the other solution requires a new

1395
00:53:56,720 --> 00:53:58,079
assumption

1396
00:53:58,079 --> 00:54:00,640
called one more sis which was created a

1397
00:54:00,640 --> 00:54:02,400
dock for this paper

1398
00:54:02,400 --> 00:54:05,520
and so has not really been studied

1399
00:54:05,520 --> 00:54:08,319
apart from the authors of the paper

1400
00:54:08,319 --> 00:54:10,480
so how do we compare

1401
00:54:10,480 --> 00:54:13,119
so the how curator as we said has a very

1402
00:54:13,119 --> 00:54:15,200
large signature size which is nearly two

1403
00:54:15,200 --> 00:54:17,119
orders of magnitude larger than other

1404
00:54:17,119 --> 00:54:18,079
schemes

1405
00:54:18,079 --> 00:54:20,640
the ubership schedule has a linear

1406
00:54:20,640 --> 00:54:22,000
signing time

1407
00:54:22,000 --> 00:54:24,480
in the total number of queries and the

1408
00:54:24,480 --> 00:54:27,200
aggregate tile paper uses one more sis

1409
00:54:27,200 --> 00:54:28,960
which is not treated at all

1410
00:54:28,960 --> 00:54:30,000
not at

1411
00:54:30,000 --> 00:54:32,720
not that's a little but not well studied

1412
00:54:32,720 --> 00:54:34,000
yet

1413
00:54:34,000 --> 00:54:36,079
so how do we compare well we have small

1414
00:54:36,079 --> 00:54:38,000
signatures which is in the same ballpark

1415
00:54:38,000 --> 00:54:40,079
as the two later ones

1416
00:54:40,079 --> 00:54:43,200
constant and even short signature times

1417
00:54:43,200 --> 00:54:45,839
and only

1418
00:54:46,640 --> 00:54:50,000
well studied standard assumptions

1419
00:54:50,000 --> 00:54:53,440
and it's worth noting that our signature

1420
00:54:53,440 --> 00:54:56,559
size is twice the one of agrawal at all

1421
00:54:56,559 --> 00:54:59,280
but as a matter of fact they use a

1422
00:54:59,280 --> 00:55:01,040
non-interactive zero-knowledge proof of

1423
00:55:01,040 --> 00:55:03,040
knowledge that was published after we

1424
00:55:03,040 --> 00:55:04,240
submitted

1425
00:55:04,240 --> 00:55:05,520
and we

1426
00:55:05,520 --> 00:55:07,280
are quite certain that we can use the

1427
00:55:07,280 --> 00:55:08,319
same

1428
00:55:08,319 --> 00:55:11,280
music to obtain an improvement of up to

1429
00:55:11,280 --> 00:55:13,359
a factor two so we could also

1430
00:55:13,359 --> 00:55:17,200
potentially go down to 50 kilobytes

1431
00:55:17,200 --> 00:55:18,000
so

1432
00:55:18,000 --> 00:55:20,960
in more detail we have random signature

1433
00:55:20,960 --> 00:55:22,799
meaning that only two rounds are needed

1434
00:55:22,799 --> 00:55:24,720
unbounded

1435
00:55:24,720 --> 00:55:27,359
and it's worth noting that um

1436
00:55:27,359 --> 00:55:30,240
in this previous slide the how can ital

1437
00:55:30,240 --> 00:55:32,480
and all prior works also have

1438
00:55:32,480 --> 00:55:34,960
technically bounded number of signatures

1439
00:55:34,960 --> 00:55:37,520
because they are based on the north side

1440
00:55:37,520 --> 00:55:39,119
blind signature

1441
00:55:39,119 --> 00:55:41,440
and all such constructions are subject

1442
00:55:41,440 --> 00:55:44,160
to the ros attack which only allows for

1443
00:55:44,160 --> 00:55:46,319
poly logarithmic parallel number of

1444
00:55:46,319 --> 00:55:47,599
signatures

1445
00:55:47,599 --> 00:55:50,799
so we are completely unbounded so there

1446
00:55:50,799 --> 00:55:52,480
is no rest attack on our signature

1447
00:55:52,480 --> 00:55:54,880
scheme we are only under standard

1448
00:55:54,880 --> 00:55:57,839
assumption being a modular wwe module

1449
00:55:57,839 --> 00:55:58,880
sis

1450
00:55:58,880 --> 00:56:01,280
and the decisional small matrix ratio

1451
00:56:01,280 --> 00:56:03,520
which is a another word for the just the

1452
00:56:03,520 --> 00:56:05,440
entro assumption

1453
00:56:05,440 --> 00:56:07,520
and we have quantum realm security and

1454
00:56:07,520 --> 00:56:09,119
here it's worth noting that really all

1455
00:56:09,119 --> 00:56:11,599
the proofs have been done in the qram

1456
00:56:11,599 --> 00:56:14,720
and even better than that is that

1457
00:56:14,720 --> 00:56:17,359
the qrm does not affect our signature

1458
00:56:17,359 --> 00:56:20,079
size adversarially meaning that uh we

1459
00:56:20,079 --> 00:56:22,160
don't incur any loss going from the rom

1460
00:56:22,160 --> 00:56:23,680
to the qram

1461
00:56:23,680 --> 00:56:26,000
in signature size

1462
00:56:26,000 --> 00:56:28,319
and we are as efficient if not more

1463
00:56:28,319 --> 00:56:30,880
efficient than prior works

1464
00:56:30,880 --> 00:56:33,280
as i said we have 100 kilobytes and

1465
00:56:33,280 --> 00:56:36,880
maybe can go down to even 50 kilobytes

1466
00:56:36,880 --> 00:56:38,960
so what is this fishling construction i

1467
00:56:38,960 --> 00:56:40,720
was talking about

1468
00:56:40,720 --> 00:56:42,559
so still uh

1469
00:56:42,559 --> 00:56:44,480
round optimal only two rounds between

1470
00:56:44,480 --> 00:56:47,040
the user and the server and first the

1471
00:56:47,040 --> 00:56:50,000
user sends a commitment to his message

1472
00:56:50,000 --> 00:56:51,920
which we will call c

1473
00:56:51,920 --> 00:56:54,559
the server will sign this commitment

1474
00:56:54,559 --> 00:56:56,640
and there is a signing key

1475
00:56:56,640 --> 00:56:57,440
and

1476
00:56:57,440 --> 00:56:59,920
the user will encrypt both the

1477
00:56:59,920 --> 00:57:02,319
commitment and the signature

1478
00:57:02,319 --> 00:57:04,160
and then you will output this cipher

1479
00:57:04,160 --> 00:57:05,040
text

1480
00:57:05,040 --> 00:57:07,280
a message and a proof pie

1481
00:57:07,280 --> 00:57:09,920
so in itself this scheme is very simple

1482
00:57:09,920 --> 00:57:13,280
and all the complicated parts realized

1483
00:57:13,280 --> 00:57:15,760
lies in this proof so what does he want

1484
00:57:15,760 --> 00:57:17,760
to prove he wants to prove that he has

1485
00:57:17,760 --> 00:57:19,920
public information being the message and

1486
00:57:19,920 --> 00:57:21,280
the cipher text

1487
00:57:21,280 --> 00:57:22,799
and private information being the

1488
00:57:22,799 --> 00:57:25,359
commitment and the signature

1489
00:57:25,359 --> 00:57:28,240
such that the ciphertext opens to a pair

1490
00:57:28,240 --> 00:57:31,040
c sigma such that the commitment opens

1491
00:57:31,040 --> 00:57:33,599
to the message m which is public

1492
00:57:33,599 --> 00:57:36,480
and the mass signs the commitment c

1493
00:57:36,480 --> 00:57:38,400
which is still private

1494
00:57:38,400 --> 00:57:41,920
so that can be uh represented as a

1495
00:57:41,920 --> 00:57:44,640
circuit and evaluated in zero knowledge

1496
00:57:44,640 --> 00:57:47,280
but that can be very complicated

1497
00:57:47,280 --> 00:57:48,799
so what are the issues we have on

1498
00:57:48,799 --> 00:57:51,920
lattices well the first issue

1499
00:57:51,920 --> 00:57:52,960
is that

1500
00:57:52,960 --> 00:57:55,200
in the signatures you have seen

1501
00:57:55,200 --> 00:57:57,280
before on this session and basically all

1502
00:57:57,280 --> 00:58:00,960
signatures that rely on lattices

1503
00:58:00,960 --> 00:58:03,839
we use a hash of the message instead of

1504
00:58:03,839 --> 00:58:06,799
a message simply because uh using the

1505
00:58:06,799 --> 00:58:09,040
message directly you could use the all

1506
00:58:09,040 --> 00:58:11,520
zero message and leak information about

1507
00:58:11,520 --> 00:58:13,839
the signing key in the most if not all

1508
00:58:13,839 --> 00:58:15,520
that is based signing

1509
00:58:15,520 --> 00:58:16,720
schemes

1510
00:58:16,720 --> 00:58:18,640
so we hash the message before signing

1511
00:58:18,640 --> 00:58:20,480
for security

1512
00:58:20,480 --> 00:58:23,119
and that is a huge issue because

1513
00:58:23,119 --> 00:58:24,079
as you

1514
00:58:24,079 --> 00:58:26,160
remember from the previous slide we have

1515
00:58:26,160 --> 00:58:28,960
to prove that sigma is a signature of c

1516
00:58:28,960 --> 00:58:31,280
and if we hash c then now we have to

1517
00:58:31,280 --> 00:58:33,040
prove that sigma is the signature of the

1518
00:58:33,040 --> 00:58:36,880
hash of c which is even more complicated

1519
00:58:36,880 --> 00:58:39,040
and and as a matter of fact when i

1520
00:58:39,040 --> 00:58:41,760
talked about the agra wallpaper ital

1521
00:58:41,760 --> 00:58:44,559
which uses fhe on the random morocco

1522
00:58:44,559 --> 00:58:46,000
that is what they do

1523
00:58:46,000 --> 00:58:48,880
they do prove that sigma is a signature

1524
00:58:48,880 --> 00:58:52,640
of h of c by using fhe

1525
00:58:52,640 --> 00:58:54,559
but we want to avoid that because well

1526
00:58:54,559 --> 00:58:57,440
first the proof is not

1527
00:58:57,440 --> 00:58:58,799
very nice

1528
00:58:58,799 --> 00:59:01,520
and that incurs a huge cost

1529
00:59:01,520 --> 00:59:03,599
and even if we avoid that there is an

1530
00:59:03,599 --> 00:59:06,319
another problem is that even without a

1531
00:59:06,319 --> 00:59:07,440
hash

1532
00:59:07,440 --> 00:59:09,119
the relation we have to prove is very

1533
00:59:09,119 --> 00:59:11,280
complicated so the signature size is

1534
00:59:11,280 --> 00:59:13,280
going to be very large anyway so we have

1535
00:59:13,280 --> 00:59:16,839
to find a way to prove a simpler

1536
00:59:16,839 --> 00:59:20,799
relation and we do this by finding an

1537
00:59:20,799 --> 00:59:22,640
iterative relation between the

1538
00:59:22,640 --> 00:59:25,359
commitment and the zero knowledge proof

1539
00:59:25,359 --> 00:59:28,799
that basically allows us to remove

1540
00:59:28,799 --> 00:59:32,000
the commitment from the signature and

1541
00:59:32,000 --> 00:59:34,160
then just obtain the signature directly

1542
00:59:34,160 --> 00:59:35,920
with very little work

1543
00:59:35,920 --> 00:59:37,760
so how do we do this

1544
00:59:37,760 --> 00:59:39,200
well first i need to present the

1545
00:59:39,200 --> 00:59:41,599
building blocks

1546
00:59:41,599 --> 00:59:44,839
so first we will use the bdlp

1547
00:59:44,839 --> 00:59:47,440
commitment by beau metal

1548
00:59:47,440 --> 00:59:49,119
which is very simple in fact the

1549
00:59:49,119 --> 00:59:51,520
commitment c is separated in two parts

1550
00:59:51,520 --> 00:59:54,079
the top part c1 and the bottom part c2

1551
00:59:54,079 --> 00:59:56,240
and it's just a tall matrix time a

1552
00:59:56,240 --> 00:59:58,000
randomness r

1553
00:59:58,000 --> 00:59:59,119
plus

1554
00:59:59,119 --> 01:00:00,880
zero on the top part and the message

1555
01:00:00,880 --> 01:00:03,599
time a gadget matrix on the bottom part

1556
01:00:03,599 --> 01:00:05,359
we don't care at all what the gadget

1557
01:00:05,359 --> 01:00:07,680
matrix is right now

1558
01:00:07,680 --> 01:00:10,400
what we do care about is that

1559
01:00:10,400 --> 01:00:12,799
we can notice that the top part of this

1560
01:00:12,799 --> 01:00:15,520
commitment a times r does not contain

1561
01:00:15,520 --> 01:00:18,640
any information on the message it's just

1562
01:00:18,640 --> 01:00:21,119
a random matrix time the randomness all

1563
01:00:21,119 --> 01:00:22,880
the random all the information on the

1564
01:00:22,880 --> 01:00:24,720
message is on the bottom part

1565
01:00:24,720 --> 01:00:27,359
and as a matter of fact the binding will

1566
01:00:27,359 --> 01:00:29,520
use the top part because if we suppose

1567
01:00:29,520 --> 01:00:32,000
that we open to two different messages

1568
01:00:32,000 --> 01:00:35,440
then we solve an sis on the top part

1569
01:00:35,440 --> 01:00:37,760
and the hiding we use the whole matrix

1570
01:00:37,760 --> 01:00:39,920
multiplied by the randomness we will use

1571
01:00:39,920 --> 01:00:41,200
lwe

1572
01:00:41,200 --> 01:00:43,440
but what matters is that the only part

1573
01:00:43,440 --> 01:00:45,520
of the commitment we need for the server

1574
01:00:45,520 --> 01:00:49,520
is the bottom part so what if

1575
01:00:49,520 --> 01:00:51,280
wait a minute first i need to present

1576
01:00:51,280 --> 01:00:54,079
the signature so the signature will be a

1577
01:00:54,079 --> 01:00:57,760
abb style signature meaning that we have

1578
01:00:57,760 --> 01:00:59,599
a public matrix

1579
01:00:59,599 --> 01:01:03,200
composed of two public matrices a0 a1

1580
01:01:03,200 --> 01:01:06,799
the message m and the gadget matrix g

1581
01:01:06,799 --> 01:01:09,359
and to sign the signer we sample a small

1582
01:01:09,359 --> 01:01:12,319
e such that this matrix times e is equal

1583
01:01:12,319 --> 01:01:15,280
to a fixed vector u

1584
01:01:15,280 --> 01:01:18,559
and to do to do this the sampler needs

1585
01:01:18,559 --> 01:01:19,280
to

1586
01:01:19,280 --> 01:01:22,319
have m be invertible and to know a

1587
01:01:22,319 --> 01:01:25,200
relation between a1 and a0 so the matrix

1588
01:01:25,200 --> 01:01:27,280
is constructed such that a1 is equal to

1589
01:01:27,280 --> 01:01:29,200
a0 times r0

1590
01:01:29,200 --> 01:01:31,440
and using standard techniques then we

1591
01:01:31,440 --> 01:01:33,839
can use g as a trapdoor and sample this

1592
01:01:33,839 --> 01:01:36,079
small vector

1593
01:01:36,079 --> 01:01:38,960
so now what if

1594
01:01:38,960 --> 01:01:41,440
we want to sample the pre-image directly

1595
01:01:41,440 --> 01:01:45,440
of c2 so in the previous slide we had

1596
01:01:45,440 --> 01:01:49,040
a public matrix with n times g and

1597
01:01:49,040 --> 01:01:52,000
signing m would be sampling e for this

1598
01:01:52,000 --> 01:01:53,359
periodic matrix

1599
01:01:53,359 --> 01:01:55,680
now what if we sign c2

1600
01:01:55,680 --> 01:01:59,039
where here a sine is a

1601
01:01:59,039 --> 01:02:00,880
different notion because we don't have

1602
01:02:00,880 --> 01:02:04,160
the g matrix but let's say we can sample

1603
01:02:04,160 --> 01:02:07,520
e such that 0 a 1 plus c 2 is equal to u

1604
01:02:07,520 --> 01:02:10,079
well first can we sample it

1605
01:02:10,079 --> 01:02:11,839
well not really because we don't have a

1606
01:02:11,839 --> 01:02:14,240
trap door here we need c 2 to be equal

1607
01:02:14,240 --> 01:02:16,160
to something invertible times the gadget

1608
01:02:16,160 --> 01:02:18,079
matrix and we don't have this

1609
01:02:18,079 --> 01:02:21,440
but that is easy to fix simply by taking

1610
01:02:21,440 --> 01:02:23,839
a trapdoor on the a0 part because

1611
01:02:23,839 --> 01:02:26,079
instead of using a trapdoor on a1 and

1612
01:02:26,079 --> 01:02:28,480
this part we can just say that the a0

1613
01:02:28,480 --> 01:02:30,960
part has a trapdoor for example an entry

1614
01:02:30,960 --> 01:02:34,640
door and now we can sample any matrix e

1615
01:02:34,640 --> 01:02:38,480
for any a0 concatenated with any matrix

1616
01:02:38,480 --> 01:02:39,440
so

1617
01:02:39,440 --> 01:02:41,760
we can just put a trapdoor in a0 instead

1618
01:02:41,760 --> 01:02:43,520
of the right part of the matrix and we

1619
01:02:43,520 --> 01:02:46,640
can sample so now we can sample this e

1620
01:02:46,640 --> 01:02:49,119
but what is the point of this

1621
01:02:49,119 --> 01:02:51,680
so remember that c2 is equal to b times

1622
01:02:51,680 --> 01:02:54,160
the randomness plus m times the gadget

1623
01:02:54,160 --> 01:02:56,559
matrix g

1624
01:02:56,559 --> 01:02:59,039
now what if we replace this in this

1625
01:02:59,039 --> 01:03:02,240
matrix well we can note that this is

1626
01:03:02,240 --> 01:03:05,200
nearly an abb signature because we have

1627
01:03:05,200 --> 01:03:06,880
a zero we have a

1628
01:03:06,880 --> 01:03:09,119
a1 we have m times g

1629
01:03:09,119 --> 01:03:10,079
and e

1630
01:03:10,079 --> 01:03:12,400
and just b times r that

1631
01:03:12,400 --> 01:03:14,160
bothers us

1632
01:03:14,160 --> 01:03:16,720
but apart from that we have an abb

1633
01:03:16,720 --> 01:03:18,720
signature and what is really nice is

1634
01:03:18,720 --> 01:03:19,520
that

1635
01:03:19,520 --> 01:03:22,079
well b we can just it's public so we can

1636
01:03:22,079 --> 01:03:23,680
just move it to the public matrix and

1637
01:03:23,680 --> 01:03:26,400
say that it's part of the signing matrix

1638
01:03:26,400 --> 01:03:28,559
in fact when using abb signature we can

1639
01:03:28,559 --> 01:03:30,480
append anything at the right

1640
01:03:30,480 --> 01:03:32,400
and we still have a valid signature so

1641
01:03:32,400 --> 01:03:34,079
we don't care we can just move b to the

1642
01:03:34,079 --> 01:03:35,920
public matrix

1643
01:03:35,920 --> 01:03:38,400
and we can move r to the

1644
01:03:38,400 --> 01:03:41,119
randomness vector because r is small so

1645
01:03:41,119 --> 01:03:44,319
if we just push it to the right we have

1646
01:03:44,319 --> 01:03:47,599
a new secret vector which is e1 e2 r

1647
01:03:47,599 --> 01:03:48,799
times

1648
01:03:48,799 --> 01:03:51,200
r times e2 where e1 e2 are the two parts

1649
01:03:51,200 --> 01:03:53,440
of e so what do we have we have a new

1650
01:03:53,440 --> 01:03:56,319
public matrix and a new private vector

1651
01:03:56,319 --> 01:03:59,200
such that this vector is

1652
01:03:59,200 --> 01:04:04,399
basically an abb signature for m

1653
01:04:05,200 --> 01:04:06,160
and

1654
01:04:06,160 --> 01:04:09,599
we cannot release this vector e1 e2 or

1655
01:04:09,599 --> 01:04:12,240
e2 directly as a signature because it is

1656
01:04:12,240 --> 01:04:14,640
directly correlated to e so the server

1657
01:04:14,640 --> 01:04:16,559
would be able to link the signature but

1658
01:04:16,559 --> 01:04:19,039
what we can do is just publish a very

1659
01:04:19,039 --> 01:04:20,480
simple

1660
01:04:20,480 --> 01:04:24,640
non-interactive knowledge proof for sis

1661
01:04:24,640 --> 01:04:25,680
where

1662
01:04:25,680 --> 01:04:27,599
we prove that this matrix which is

1663
01:04:27,599 --> 01:04:29,440
completely public time a small vector is

1664
01:04:29,440 --> 01:04:32,319
equal to u that is very simple to do

1665
01:04:32,319 --> 01:04:34,400
so what is our scheme now

1666
01:04:34,400 --> 01:04:37,760
so the user commits to the message sends

1667
01:04:37,760 --> 01:04:40,640
dependency to his commitment the server

1668
01:04:40,640 --> 01:04:44,559
samples e such that a0 a1 plus c2 times

1669
01:04:44,559 --> 01:04:46,880
e is equal to u sends e

1670
01:04:46,880 --> 01:04:49,119
and the user checks that the relation

1671
01:04:49,119 --> 01:04:51,119
that i said before is valid and then

1672
01:04:51,119 --> 01:04:53,680
output just is message and a proof by

1673
01:04:53,680 --> 01:04:55,680
where pi is just a

1674
01:04:55,680 --> 01:04:57,119
non-interactive knowledge proof of

1675
01:04:57,119 --> 01:04:59,599
knowledge

1676
01:04:59,599 --> 01:05:02,720
of a small secret e prime such that this

1677
01:05:02,720 --> 01:05:05,359
public matrix a zero a one plus message

1678
01:05:05,359 --> 01:05:08,240
times g b times z prime is equal to u

1679
01:05:08,240 --> 01:05:11,599
and that is very simple and efficient

1680
01:05:11,599 --> 01:05:13,680
but we still have a problem as i said

1681
01:05:13,680 --> 01:05:16,160
before we need to hash c because if we

1682
01:05:16,160 --> 01:05:17,680
don't hash c

1683
01:05:17,680 --> 01:05:21,039
here this the user could just send c2 is

1684
01:05:21,039 --> 01:05:22,480
equal to zero

1685
01:05:22,480 --> 01:05:24,400
and then if he sends c2 is equal to zero

1686
01:05:24,400 --> 01:05:26,799
then he gets a pre-image of just

1687
01:05:26,799 --> 01:05:29,119
basically a0 e1 and he gets a lot of

1688
01:05:29,119 --> 01:05:32,079
information on the trapdoor of a0 so

1689
01:05:32,079 --> 01:05:33,839
that would be an issue

1690
01:05:33,839 --> 01:05:35,039
so we

1691
01:05:35,039 --> 01:05:37,920
we should we have to hash c but we

1692
01:05:37,920 --> 01:05:40,079
really don't want to so what can we do

1693
01:05:40,079 --> 01:05:43,039
well we just prove that c is of the form

1694
01:05:43,039 --> 01:05:46,640
that we said it was so we do prove that

1695
01:05:46,640 --> 01:05:47,359
c

1696
01:05:47,359 --> 01:05:48,799
is

1697
01:05:48,799 --> 01:05:51,599
a matrix a b times r plus a message

1698
01:05:51,599 --> 01:05:53,359
times g

1699
01:05:53,359 --> 01:05:55,920
and that is enough in fact that is

1700
01:05:55,920 --> 01:05:58,400
enough but we need some specific zero

1701
01:05:58,400 --> 01:05:59,359
knowledge

1702
01:05:59,359 --> 01:06:01,359
so we need a straight line

1703
01:06:01,359 --> 01:06:03,760
extractable exact non-interactive their

1704
01:06:03,760 --> 01:06:06,000
knowledge proof of knowledge

1705
01:06:06,000 --> 01:06:07,839
so what does that mean

1706
01:06:07,839 --> 01:06:09,440
so

1707
01:06:09,440 --> 01:06:12,640
i will only consider a fiat chamier type

1708
01:06:12,640 --> 01:06:15,680
of zero knowledge proof so in which we

1709
01:06:15,680 --> 01:06:17,359
send the first transcript which is the

1710
01:06:17,359 --> 01:06:19,039
commitment we get the challenge and we

1711
01:06:19,039 --> 01:06:20,799
set the response

1712
01:06:20,799 --> 01:06:23,680
so usually when we do fiat schemer types

1713
01:06:23,680 --> 01:06:25,760
type of zero knowledge proof we have

1714
01:06:25,760 --> 01:06:28,319
special soundness meaning that given two

1715
01:06:28,319 --> 01:06:32,319
transcripts y c z and y c prime z prime

1716
01:06:32,319 --> 01:06:34,640
we can extract the witness

1717
01:06:34,640 --> 01:06:36,559
but that's not what we want because

1718
01:06:36,559 --> 01:06:38,640
having such a property means that we

1719
01:06:38,640 --> 01:06:41,200
need to rewind the

1720
01:06:41,200 --> 01:06:42,799
zero knowledge proof to obtain a

1721
01:06:42,799 --> 01:06:45,119
weakness and since the zero knowledge

1722
01:06:45,119 --> 01:06:46,960
proof is used as part as

1723
01:06:46,960 --> 01:06:49,280
of another protocol and in the first

1724
01:06:49,280 --> 01:06:51,520
flow of another protocol we cannot do

1725
01:06:51,520 --> 01:06:54,240
rewinding without incurring exponential

1726
01:06:54,240 --> 01:06:56,640
loss in security so we could accept an

1727
01:06:56,640 --> 01:06:58,720
exponential loss of security or we can

1728
01:06:58,720 --> 01:07:01,280
use a straight line uh non-interactive

1729
01:07:01,280 --> 01:07:03,039
zero knowledge proof

1730
01:07:03,039 --> 01:07:06,319
meaning that given only one transcript

1731
01:07:06,319 --> 01:07:09,200
and a trapdoor which is in this in the

1732
01:07:09,200 --> 01:07:11,599
common reference string model

1733
01:07:11,599 --> 01:07:13,760
we can extract a weakness so this way

1734
01:07:13,760 --> 01:07:15,760
there is no rewinding and we can extract

1735
01:07:15,760 --> 01:07:17,520
weaknesses on the fly

1736
01:07:17,520 --> 01:07:18,400
and

1737
01:07:18,400 --> 01:07:20,880
finish the proof and other thing we

1738
01:07:20,880 --> 01:07:22,240
don't really need

1739
01:07:22,240 --> 01:07:24,880
but which is much better is an exact

1740
01:07:24,880 --> 01:07:26,079
proof

1741
01:07:26,079 --> 01:07:28,640
so what do i mean by exact so this is a

1742
01:07:28,640 --> 01:07:30,880
problem that is specific to lattices in

1743
01:07:30,880 --> 01:07:33,119
that we want to prove that a times s is

1744
01:07:33,119 --> 01:07:34,480
equal to t

1745
01:07:34,480 --> 01:07:36,799
but the fiat chamber with the abort only

1746
01:07:36,799 --> 01:07:39,119
proved that a times s is equal to c bar

1747
01:07:39,119 --> 01:07:42,240
times t for some small c bar and that

1748
01:07:42,240 --> 01:07:45,039
has been around since 2009 in the

1749
01:07:45,039 --> 01:07:47,039
seminar ubashevsky paper

1750
01:07:47,039 --> 01:07:48,480
and

1751
01:07:48,480 --> 01:07:51,200
has basically always been a part of the

1752
01:07:51,200 --> 01:07:54,240
picture in lattices and very recently we

1753
01:07:54,240 --> 01:07:56,079
have had a series of work that

1754
01:07:56,079 --> 01:07:58,720
constructs exact proof for this relation

1755
01:07:58,720 --> 01:08:01,440
so where we don't have this small c bar

1756
01:08:01,440 --> 01:08:04,079
this proof are somewhat less efficient

1757
01:08:04,079 --> 01:08:06,000
but they prove a much stronger relation

1758
01:08:06,000 --> 01:08:08,160
which is much better for us because they

1759
01:08:08,160 --> 01:08:11,440
result in a smaller size of signature

1760
01:08:11,440 --> 01:08:14,160
so we have to combine this exact proof

1761
01:08:14,160 --> 01:08:17,040
with the straight line extractable proof

1762
01:08:17,040 --> 01:08:18,799
to make a new zero knowledge proof in

1763
01:08:18,799 --> 01:08:19,600
our

1764
01:08:19,600 --> 01:08:21,040
in our paper

1765
01:08:21,040 --> 01:08:22,799
so how does it work in the end we have

1766
01:08:22,799 --> 01:08:24,719
the previous scheme

1767
01:08:24,719 --> 01:08:27,040
which is as described before

1768
01:08:27,040 --> 01:08:29,679
and we simply add a proof which is going

1769
01:08:29,679 --> 01:08:31,198
to be a straight line

1770
01:08:31,198 --> 01:08:33,120
exact proof

1771
01:08:33,120 --> 01:08:35,120
and the server just verifies this proof

1772
01:08:35,120 --> 01:08:36,238
by one

1773
01:08:36,238 --> 01:08:37,120
and

1774
01:08:37,120 --> 01:08:39,120
does the rest of the protocol and what

1775
01:08:39,120 --> 01:08:41,839
is really nice is that this proof is

1776
01:08:41,839 --> 01:08:44,000
larger than uh

1777
01:08:44,000 --> 01:08:45,839
non straight line and not

1778
01:08:45,839 --> 01:08:47,439
non-extractable proof

1779
01:08:47,439 --> 01:08:49,279
but it does not have any impact in the

1780
01:08:49,279 --> 01:08:50,960
signature because the signature is the

1781
01:08:50,960 --> 01:08:52,640
message and the proof pie

1782
01:08:52,640 --> 01:08:54,799
and the by one is just for the server to

1783
01:08:54,799 --> 01:08:56,080
check so it's

1784
01:08:56,080 --> 01:08:58,799
some communication size but no impact at

1785
01:08:58,799 --> 01:09:01,439
all on the signature side

1786
01:09:01,439 --> 01:09:03,679
so what do we get as i said we get a

1787
01:09:03,679 --> 01:09:05,359
more efficient lattice-based round

1788
01:09:05,359 --> 01:09:07,600
optimal partially blind signature in the

1789
01:09:07,600 --> 01:09:09,600
q rom

1790
01:09:09,600 --> 01:09:11,920
and so the first thing to be done is to

1791
01:09:11,920 --> 01:09:15,279
use the new more efficient exact proofs

1792
01:09:15,279 --> 01:09:17,839
but that is in fact not as easy not as

1793
01:09:17,839 --> 01:09:22,000
easy as just plugging them in because

1794
01:09:22,000 --> 01:09:23,040
combining

1795
01:09:23,040 --> 01:09:24,319
exact proof and straight line

1796
01:09:24,319 --> 01:09:26,560
extractability can be very complicated

1797
01:09:26,560 --> 01:09:28,960
and the proofs of security are rather

1798
01:09:28,960 --> 01:09:31,040
complicated so that's something we are

1799
01:09:31,040 --> 01:09:33,520
going to do and another idea would be to

1800
01:09:33,520 --> 01:09:37,679
increase the efficiency of this uh

1801
01:09:37,679 --> 01:09:39,198
construction through stronger

1802
01:09:39,198 --> 01:09:42,080
assumptions so not maybe not as strong

1803
01:09:42,080 --> 01:09:45,198
as one more sis but stronger than just

1804
01:09:45,198 --> 01:09:46,960
standard assumptions

1805
01:09:46,960 --> 01:09:50,880
and that's it thank you for listening

1806
01:09:57,600 --> 01:10:01,880
so we have time for one brief question

1807
01:10:05,120 --> 01:10:07,040
okay so i have less one brief question

1808
01:10:07,040 --> 01:10:09,520
so raphael so then so currently there

1809
01:10:09,520 --> 01:10:12,239
seems to be a big gap between so the

1810
01:10:12,239 --> 01:10:14,320
efficiency gap between blind signatures

1811
01:10:14,320 --> 01:10:16,719
and regular syndromes for lattices

1812
01:10:16,719 --> 01:10:19,120
seems quite a bit bigger than

1813
01:10:19,120 --> 01:10:20,800
you know other problems based on the

1814
01:10:20,800 --> 01:10:23,600
number theory so is this indeed true and

1815
01:10:23,600 --> 01:10:25,760
do you think is this something intrinsic

1816
01:10:25,760 --> 01:10:28,000
about the difficulty of using lattices

1817
01:10:28,000 --> 01:10:30,719
or there is a hope to get the same level

1818
01:10:30,719 --> 01:10:32,320
of efficiency

1819
01:10:32,320 --> 01:10:34,800
so right now we have a gap because

1820
01:10:34,800 --> 01:10:37,360
basically we use zero knowledge and zero

1821
01:10:37,360 --> 01:10:39,520
knowledge on lattices increase the more

1822
01:10:39,520 --> 01:10:41,679
proof and the more complicated you you

1823
01:10:41,679 --> 01:10:42,719
do

1824
01:10:42,719 --> 01:10:45,440
they are the more the slack increases

1825
01:10:45,440 --> 01:10:48,719
and so the higher the gap becomes

1826
01:10:48,719 --> 01:10:50,719
but we are getting better and better

1827
01:10:50,719 --> 01:10:53,920
proofs so the gap is reduced by this

1828
01:10:53,920 --> 01:10:55,920
and if we use the constructions if we

1829
01:10:55,920 --> 01:10:57,760
can find some constructions that require

1830
01:10:57,760 --> 01:10:59,679
less zero-knowledge proofs

1831
01:10:59,679 --> 01:11:01,760
and uh that are more straightforward

1832
01:11:01,760 --> 01:11:06,000
then we can reduce the gap never to uh

1833
01:11:06,000 --> 01:11:10,080
maybe one for two or one for free ratio

1834
01:11:10,400 --> 01:11:12,560
okay so thanks raphael

1835
01:11:12,560 --> 01:11:14,880
thank you

1836
01:11:16,400 --> 01:11:18,080
and it's already almost time for the

1837
01:11:18,080 --> 01:11:21,840
next session the award paper session so

1838
01:11:21,840 --> 01:11:24,480
please stay here while they get ready

1839
01:11:24,480 --> 01:11:28,159
for the next session

1840
01:11:32,960 --> 01:11:34,880
oh sorry they they are telling me that

1841
01:11:34,880 --> 01:11:36,560
the session the next session is located

1842
01:11:36,560 --> 01:11:38,719
in the other room in okay so please

1843
01:11:38,719 --> 01:11:41,840
don't stay here

1844
01:14:52,239 --> 01:14:54,320
you

