1
00:00:00,000 --> 00:00:02,800
welcome everyone um

2
00:00:02,800 --> 00:00:04,480
to this afternoon session on postpartum

3
00:00:04,480 --> 00:00:06,799
crypto we have

4
00:00:06,799 --> 00:00:08,960
five papers and four talks in this

5
00:00:08,960 --> 00:00:10,160
session

6
00:00:10,160 --> 00:00:12,400
and this first talk is going to be about

7
00:00:12,400 --> 00:00:14,639
post quantum simulatable extraction with

8
00:00:14,639 --> 00:00:16,320
minimal assumptions black box and

9
00:00:16,320 --> 00:00:19,359
constant joint and it's authored by

10
00:00:19,359 --> 00:00:22,640
nairo jia kai ming chong ciao yang

11
00:00:22,640 --> 00:00:24,080
takashi

12
00:00:24,080 --> 00:00:27,119
yamakawa and xiaoliang is going to go

13
00:00:27,119 --> 00:00:31,240
talk maybe we wanna

14
00:00:50,000 --> 00:00:52,480
we don't hear the speaker

15
00:00:52,480 --> 00:00:53,840
hello

16
00:00:53,840 --> 00:00:56,559
yeah hi everyone uh i'm here to share

17
00:00:56,559 --> 00:00:58,399
without some post condom extract

18
00:00:58,399 --> 00:01:00,239
simulator for extraction this is john

19
00:01:00,239 --> 00:01:02,399
work with uh

20
00:01:02,399 --> 00:01:05,199
and takashi yamakawa okay

21
00:01:05,199 --> 00:01:07,520
uh the last name of climbing ends with

22
00:01:07,520 --> 00:01:10,799
c-h-u-n-g so i added that on purpose so

23
00:01:10,799 --> 00:01:12,720
you won't forget this is one of your

24
00:01:12,720 --> 00:01:15,040
courses okay

25
00:01:15,040 --> 00:01:18,000
so uh i want to start with the extract

26
00:01:18,000 --> 00:01:20,080
for equipment i think everyone here know

27
00:01:20,080 --> 00:01:21,600
what it is but i just want to make sure

28
00:01:21,600 --> 00:01:24,080
that we agree on the same definition

29
00:01:24,080 --> 00:01:25,520
and there's something i want to stress

30
00:01:25,520 --> 00:01:28,479
address so let's focus on statistical

31
00:01:28,479 --> 00:01:30,720
funding commitments for now

32
00:01:30,720 --> 00:01:33,360
such equipment scheme is extractable

33
00:01:33,360 --> 00:01:34,159
uh

34
00:01:34,159 --> 00:01:35,840
in the following sense we will compare

35
00:01:35,840 --> 00:01:38,000
to work the first word is nothing but

36
00:01:38,000 --> 00:01:40,079
the real execution between a potentially

37
00:01:40,079 --> 00:01:41,920
malicious committer and the honest

38
00:01:41,920 --> 00:01:43,200
receiver

39
00:01:43,200 --> 00:01:45,119
at the end of the execution

40
00:01:45,119 --> 00:01:47,680
we denote the final state of c star as

41
00:01:47,680 --> 00:01:50,960
st c star and b is the banner bit

42
00:01:50,960 --> 00:01:53,759
indicating if the receiver accepts mod

43
00:01:53,759 --> 00:01:54,399
the

44
00:01:54,399 --> 00:01:57,200
trend denotes the transcript transcripts

45
00:01:57,200 --> 00:01:59,680
all the messages exchanged between them

46
00:01:59,680 --> 00:02:01,040
in this

47
00:02:01,040 --> 00:02:02,320
real game

48
00:02:02,320 --> 00:02:05,119
we will focus on this tuple as tc star

49
00:02:05,119 --> 00:02:06,880
and b is pretty straightforward so i

50
00:02:06,880 --> 00:02:09,679
want to define this value vowel trend

51
00:02:09,679 --> 00:02:11,840
list value statistically bound in the

52
00:02:11,840 --> 00:02:13,040
transcript

53
00:02:13,040 --> 00:02:16,160
okay we compare this game with a

54
00:02:16,160 --> 00:02:18,720
simulation extraction board

55
00:02:18,720 --> 00:02:20,800
where we replace on this receiver with

56
00:02:20,800 --> 00:02:23,520
ic which is a simulation extractor

57
00:02:23,520 --> 00:02:24,720
and

58
00:02:24,720 --> 00:02:25,840
the job

59
00:02:25,840 --> 00:02:27,599
by the way the simulation extractor

60
00:02:27,599 --> 00:02:31,440
could potentially rewind the c star and

61
00:02:31,440 --> 00:02:34,480
is trying to simulate this tuple he's

62
00:02:34,480 --> 00:02:35,920
trying to simulate the final state of

63
00:02:35,920 --> 00:02:37,360
stc star

64
00:02:37,360 --> 00:02:40,000
uh meanwhile extracting the committed

65
00:02:40,000 --> 00:02:41,440
value until out

66
00:02:41,440 --> 00:02:43,360
so this scheme is

67
00:02:43,360 --> 00:02:44,879
extractable

68
00:02:44,879 --> 00:02:47,440
if there exists such an efficient as c

69
00:02:47,440 --> 00:02:49,920
make these two tubals indistinguishable

70
00:02:49,920 --> 00:02:51,920
here the thing i want to address is uh

71
00:02:51,920 --> 00:02:54,319
usually in the classroom setting we care

72
00:02:54,319 --> 00:02:55,840
more about extraction

73
00:02:55,840 --> 00:02:58,959
but here i explicitly require that the

74
00:02:58,959 --> 00:03:01,680
extractor also simulates the final post

75
00:03:01,680 --> 00:03:03,200
extraction state of the malicious

76
00:03:03,200 --> 00:03:05,599
committee

77
00:03:05,680 --> 00:03:07,040
let's first take a look at a very

78
00:03:07,040 --> 00:03:09,200
typical construction for

79
00:03:09,200 --> 00:03:10,800
extract equipment in the classroom

80
00:03:10,800 --> 00:03:11,760
setting

81
00:03:11,760 --> 00:03:13,840
this scheme again i think everyone knows

82
00:03:13,840 --> 00:03:16,239
that so to commit this value m a

83
00:03:16,239 --> 00:03:20,720
committer pick to run string a10 and a11

84
00:03:20,720 --> 00:03:22,640
they basically form a two out of two

85
00:03:22,640 --> 00:03:24,720
secret sharing of this message and he

86
00:03:24,720 --> 00:03:27,280
repeats this procedure for enhance where

87
00:03:27,280 --> 00:03:29,599
n is the security parameter

88
00:03:29,599 --> 00:03:30,400
then

89
00:03:30,400 --> 00:03:32,959
he commits to these random shares

90
00:03:32,959 --> 00:03:35,200
independently you'll say uh not our

91
00:03:35,200 --> 00:03:37,440
commitment

92
00:03:37,440 --> 00:03:40,799
next the receiver select a run stream of

93
00:03:40,799 --> 00:03:42,000
length n

94
00:03:42,000 --> 00:03:44,080
and give it to the committer the

95
00:03:44,080 --> 00:03:46,640
commissioner will decommit accordingly

96
00:03:46,640 --> 00:03:48,239
so

97
00:03:48,239 --> 00:03:50,560
this construction is very popular in the

98
00:03:50,560 --> 00:03:53,360
future you can find it on basically any

99
00:03:53,360 --> 00:03:56,720
zero knowledge or npc paper but it got

100
00:03:56,720 --> 00:03:59,040
popular for some reason uh it enjoys

101
00:03:59,040 --> 00:04:00,640
these good properties first it makes

102
00:04:00,640 --> 00:04:02,560
only black box usage of the underlying

103
00:04:02,560 --> 00:04:04,720
assumption of which is the only function

104
00:04:04,720 --> 00:04:06,400
the reason is you can't get the nars

105
00:04:06,400 --> 00:04:08,480
commandment in black box from a function

106
00:04:08,480 --> 00:04:10,640
and to do this you only need a

107
00:04:10,640 --> 00:04:12,959
commitment so you have a box

108
00:04:12,959 --> 00:04:14,159
construction phone one function

109
00:04:14,159 --> 00:04:16,798
eventually and also it comes around now

110
00:04:16,798 --> 00:04:18,880
these two properties are very important

111
00:04:18,880 --> 00:04:19,600
for

112
00:04:19,600 --> 00:04:21,839
efficiency concerns

113
00:04:21,839 --> 00:04:24,400
the third one is like we usually take it

114
00:04:24,400 --> 00:04:26,560
for granted in the classical setting but

115
00:04:26,560 --> 00:04:28,160
i want to say that it's very important

116
00:04:28,160 --> 00:04:30,720
for a protocol composition purpose for

117
00:04:30,720 --> 00:04:32,560
example if you want to use this scheme

118
00:04:32,560 --> 00:04:34,240
to build something else for example

119
00:04:34,240 --> 00:04:36,960
point housing or to pc

120
00:04:36,960 --> 00:04:38,880
it's a gadget appearing in the middle

121
00:04:38,880 --> 00:04:40,479
vapor pole you want to make sure that

122
00:04:40,479 --> 00:04:42,720
after extraction the final post

123
00:04:42,720 --> 00:04:44,880
extraction state remains closed to the

124
00:04:44,880 --> 00:04:47,120
reward so that you can use composition

125
00:04:47,120 --> 00:04:49,360
lamps to simulate the remaining parts of

126
00:04:49,360 --> 00:04:51,199
the protocol

127
00:04:51,199 --> 00:04:52,080
but

128
00:04:52,080 --> 00:04:55,199
this wire says take for granted because

129
00:04:55,199 --> 00:04:57,120
in the classical world

130
00:04:57,120 --> 00:04:59,040
you can just if you want to build a

131
00:04:59,040 --> 00:05:00,960
extractor your extractor can just behave

132
00:05:00,960 --> 00:05:03,039
like on this receiver finish the real

133
00:05:03,039 --> 00:05:05,199
execution straight line and then you

134
00:05:05,199 --> 00:05:07,680
learn the final state of a potentially

135
00:05:07,680 --> 00:05:09,440
malicious committer you just record this

136
00:05:09,440 --> 00:05:11,919
number or record the state and then you

137
00:05:11,919 --> 00:05:14,320
remind the execution back to

138
00:05:14,320 --> 00:05:16,800
right after the first message and then

139
00:05:16,800 --> 00:05:18,320
do whatever you want to perform the

140
00:05:18,320 --> 00:05:20,560
extraction in this way you can finish

141
00:05:20,560 --> 00:05:22,800
your extraction and get the post

142
00:05:22,800 --> 00:05:24,720
extraction state

143
00:05:24,720 --> 00:05:26,560
easily right

144
00:05:26,560 --> 00:05:29,039
however i want to mention that this

145
00:05:29,039 --> 00:05:31,600
procedure is typically hard in a

146
00:05:31,600 --> 00:05:34,000
postponed setting meaning if the

147
00:05:34,000 --> 00:05:36,800
committer is a malicious quantum machine

148
00:05:36,800 --> 00:05:39,919
because in that case because of the no

149
00:05:39,919 --> 00:05:41,520
cloning theorem you cannot do what i

150
00:05:41,520 --> 00:05:42,960
just said in the classic setting if you

151
00:05:42,960 --> 00:05:44,400
finish the protocol

152
00:05:44,400 --> 00:05:46,560
learn and record the final state of the

153
00:05:46,560 --> 00:05:48,960
malicious commuter it's hard to run it

154
00:05:48,960 --> 00:05:50,320
back

155
00:05:50,320 --> 00:05:52,800
and extract information out right

156
00:05:52,800 --> 00:05:53,759
so

157
00:05:53,759 --> 00:05:55,520
let's take a look at the state of arts

158
00:05:55,520 --> 00:05:57,680
if we want all the good properties

159
00:05:57,680 --> 00:06:00,560
uh shown uh earlier in this in last

160
00:06:00,560 --> 00:06:01,520
slide

161
00:06:01,520 --> 00:06:02,880
basically there are four known

162
00:06:02,880 --> 00:06:06,080
constructions you can see that only the

163
00:06:06,080 --> 00:06:07,680
last one achieves a black box

164
00:06:07,680 --> 00:06:09,520
construction and only the second one

165
00:06:09,520 --> 00:06:12,240
which is content runs

166
00:06:12,240 --> 00:06:14,720
in this column i also show

167
00:06:14,720 --> 00:06:16,720
if the honest parties to execute the

168
00:06:16,720 --> 00:06:17,840
protocol

169
00:06:17,840 --> 00:06:19,919
need quantum power for confusion and

170
00:06:19,919 --> 00:06:21,360
communication

171
00:06:21,360 --> 00:06:23,039
and here are the assumptions you can see

172
00:06:23,039 --> 00:06:24,720
that the first construction it

173
00:06:24,720 --> 00:06:26,400
assumptions as strong as obvious

174
00:06:26,400 --> 00:06:28,960
transfers and the second construction

175
00:06:28,960 --> 00:06:31,280
which is very elegant but it used

176
00:06:31,280 --> 00:06:32,639
a little bit

177
00:06:32,639 --> 00:06:35,280
a little bit heavy it falls like a fully

178
00:06:35,280 --> 00:06:38,720
homomorphic encryption for corn circuits

179
00:06:38,720 --> 00:06:39,919
yeah

180
00:06:39,919 --> 00:06:41,759
so it looks like the silver is not that

181
00:06:41,759 --> 00:06:43,680
satisfactory but actually there is a

182
00:06:43,680 --> 00:06:46,240
reason this problem is hard even if you

183
00:06:46,240 --> 00:06:48,560
only require these two properties

184
00:06:48,560 --> 00:06:51,039
and the reason is uh such a commitment

185
00:06:51,039 --> 00:06:52,560
with these two properties will imply

186
00:06:52,560 --> 00:06:54,479
construction knowledge

187
00:06:54,479 --> 00:06:56,639
in the postponed setting for which we

188
00:06:56,639 --> 00:06:59,280
have negative results

189
00:06:59,280 --> 00:07:01,280
due to time limit i won't explain these

190
00:07:01,280 --> 00:07:02,560
conditions if you're interested you

191
00:07:02,560 --> 00:07:05,759
can't find this paper in your reference

192
00:07:05,759 --> 00:07:06,560
so

193
00:07:06,560 --> 00:07:09,120
what do we do now because

194
00:07:09,120 --> 00:07:11,520
we cannot get everything

195
00:07:11,520 --> 00:07:13,039
we want shown here

196
00:07:13,039 --> 00:07:14,319
and

197
00:07:14,319 --> 00:07:16,319
these things we don't want to give up

198
00:07:16,319 --> 00:07:18,080
because there are there are good

199
00:07:18,080 --> 00:07:19,840
properties for efficiency

200
00:07:19,840 --> 00:07:20,800
purpose

201
00:07:20,800 --> 00:07:23,599
you you want to use minimal assumptions

202
00:07:23,599 --> 00:07:25,039
so

203
00:07:25,039 --> 00:07:27,280
eventually we choose to relax the

204
00:07:27,280 --> 00:07:28,880
security goal

205
00:07:28,880 --> 00:07:31,120
we relax it to something called epsilon

206
00:07:31,120 --> 00:07:32,880
simulation

207
00:07:32,880 --> 00:07:33,599
the

208
00:07:33,599 --> 00:07:35,599
there are two words these are just the

209
00:07:35,599 --> 00:07:38,000
tools i showed you on the second side

210
00:07:38,000 --> 00:07:40,800
previously i require the distributions

211
00:07:40,800 --> 00:07:42,960
of the output are

212
00:07:42,960 --> 00:07:44,479
conventionally closed

213
00:07:44,479 --> 00:07:47,039
here i change this

214
00:07:47,039 --> 00:07:48,800
this in this

215
00:07:48,800 --> 00:07:51,840
definition i will give a noticeable

216
00:07:51,840 --> 00:07:55,280
function epsilon as a parameter or input

217
00:07:55,280 --> 00:07:57,360
to the simulation extractor

218
00:07:57,360 --> 00:07:59,120
the requirement here is a

219
00:07:59,120 --> 00:08:01,759
as long as you fix epstein give it to

220
00:08:01,759 --> 00:08:04,080
the simulation extractor the simulation

221
00:08:04,080 --> 00:08:05,840
extractor's running time will depend on

222
00:08:05,840 --> 00:08:08,479
this epsilon however it can

223
00:08:08,479 --> 00:08:11,039
simulate to uh epsilon

224
00:08:11,039 --> 00:08:13,440
up to epsilon error or for whatever

225
00:08:13,440 --> 00:08:15,599
epsilon you pick

226
00:08:15,599 --> 00:08:18,400
so this is a

227
00:08:18,400 --> 00:08:19,919
okay for for people who are familiar

228
00:08:19,919 --> 00:08:21,199
with epsilon zero knowledge i think this

229
00:08:21,199 --> 00:08:24,080
is also standard so but before going on

230
00:08:24,080 --> 00:08:25,039
i want to

231
00:08:25,039 --> 00:08:27,440
mention that if some simulation is

232
00:08:27,440 --> 00:08:30,800
really useful still useful because

233
00:08:30,800 --> 00:08:34,320
a if some simulation security or implies

234
00:08:34,320 --> 00:08:37,679
a anti-based or game-based security in

235
00:08:37,679 --> 00:08:38,958
the sense that

236
00:08:38,958 --> 00:08:40,799
epsilon zk will imply witness in

237
00:08:40,799 --> 00:08:43,360
dismissability

238
00:08:43,360 --> 00:08:45,040
so

239
00:08:45,040 --> 00:08:47,440
we ask the question if we are happy with

240
00:08:47,440 --> 00:08:49,200
ibstrum simulation can we have a

241
00:08:49,200 --> 00:08:51,279
construction achieving all the remaining

242
00:08:51,279 --> 00:08:53,600
good properties

243
00:08:53,600 --> 00:08:56,080
uh in this work we showed that it is

244
00:08:56,080 --> 00:08:57,440
indeed possible

245
00:08:57,440 --> 00:08:59,920
and uh i think the classical setting

246
00:08:59,920 --> 00:09:02,000
extract document is a very powerful

247
00:09:02,000 --> 00:09:04,640
primitive you have that

248
00:09:04,640 --> 00:09:07,519
you can have a lot of applications and

249
00:09:07,519 --> 00:09:09,680
we are just uh doing the same thing in

250
00:09:09,680 --> 00:09:11,600
the post quantum setting

251
00:09:11,600 --> 00:09:12,720
uh you

252
00:09:12,720 --> 00:09:15,360
the three the first three implications

253
00:09:15,360 --> 00:09:17,920
are uh kind of not that hard achieve you

254
00:09:17,920 --> 00:09:20,560
just do what you will do in the

255
00:09:20,560 --> 00:09:22,240
classical setting but replace the

256
00:09:22,240 --> 00:09:24,959
extract.com with our or our ipsum

257
00:09:24,959 --> 00:09:25,839
version

258
00:09:25,839 --> 00:09:27,760
so i won't really discuss about this

259
00:09:27,760 --> 00:09:29,839
three but i will at the end of the talk

260
00:09:29,839 --> 00:09:31,680
i will mention a little bit how we do

261
00:09:31,680 --> 00:09:32,959
the last step

262
00:09:32,959 --> 00:09:33,920
uh

263
00:09:33,920 --> 00:09:35,760
all the properties all the protocols

264
00:09:35,760 --> 00:09:38,560
shown here enjoy this good purpose but

265
00:09:38,560 --> 00:09:40,959
uh since our extra.com is epsilon's

266
00:09:40,959 --> 00:09:42,959
meaningful so we only managed to achieve

267
00:09:42,959 --> 00:09:45,040
gibson's simulator version of all these

268
00:09:45,040 --> 00:09:47,040
primitives

269
00:09:47,040 --> 00:09:48,560
there's something i want to say about

270
00:09:48,560 --> 00:09:49,440
the

271
00:09:49,440 --> 00:09:50,880
blue error

272
00:09:50,880 --> 00:09:53,120
we know that if you want a two-part

273
00:09:53,120 --> 00:09:54,800
computation the minimum assumption is

274
00:09:54,800 --> 00:09:57,519
actually uh it's announced ot

275
00:09:57,519 --> 00:09:59,120
but uh

276
00:09:59,120 --> 00:10:01,519
that's like in the post-quantum setting

277
00:10:01,519 --> 00:10:02,959
you require that the

278
00:10:02,959 --> 00:10:05,600
honest parties has to perform classical

279
00:10:05,600 --> 00:10:06,720
tasks

280
00:10:06,720 --> 00:10:08,560
if you are happy with the quantum

281
00:10:08,560 --> 00:10:10,720
computing and quantum channel for the

282
00:10:10,720 --> 00:10:12,320
honest parties

283
00:10:12,320 --> 00:10:14,480
you actually you can replace something

284
00:10:14,480 --> 00:10:17,839
on ot with the post quantum sql function

285
00:10:17,839 --> 00:10:19,120
plus a quantum communication

286
00:10:19,120 --> 00:10:21,760
implementation

287
00:10:23,120 --> 00:10:27,360
so let me talk about our technique

288
00:10:27,360 --> 00:10:29,920
i want to start with a closer look at

289
00:10:29,920 --> 00:10:31,760
this classical construction i just shown

290
00:10:31,760 --> 00:10:34,000
i just showed before and i want to see

291
00:10:34,000 --> 00:10:35,600
if you want to make it or if you want to

292
00:10:35,600 --> 00:10:37,200
quantize this proof

293
00:10:37,200 --> 00:10:41,440
what difficulties will you encounter so

294
00:10:42,160 --> 00:10:45,680
to remind you how the extractor works

295
00:10:45,680 --> 00:10:48,079
first recall that all these columns of

296
00:10:48,079 --> 00:10:50,640
this matrix are the two other two secret

297
00:10:50,640 --> 00:10:52,399
sharing of the same message

298
00:10:52,399 --> 00:10:54,320
so how do you do

299
00:10:54,320 --> 00:10:56,640
extraction you can just

300
00:10:56,640 --> 00:10:58,880
rewind the extension back to the second

301
00:10:58,880 --> 00:11:02,320
stage and pick a fresh c prime

302
00:11:02,320 --> 00:11:04,480
and expect that the c star will dig to

303
00:11:04,480 --> 00:11:05,600
you

304
00:11:05,600 --> 00:11:08,240
as long as there is one position where c

305
00:11:08,240 --> 00:11:10,720
and c prime differs you can recover the

306
00:11:10,720 --> 00:11:14,000
m by just x or the two shares of the

307
00:11:14,000 --> 00:11:15,519
same column

308
00:11:15,519 --> 00:11:16,959
so

309
00:11:16,959 --> 00:11:19,600
this is how we do extraction in the

310
00:11:19,600 --> 00:11:21,839
classical setting now we want to contact

311
00:11:21,839 --> 00:11:23,360
this proof you can see that we need to

312
00:11:23,360 --> 00:11:24,800
handle rebounding

313
00:11:24,800 --> 00:11:27,200
and also extraction simulation

314
00:11:27,200 --> 00:11:29,200
in the post in the post quantum setting

315
00:11:29,200 --> 00:11:30,880
where the system is the quantum machine

316
00:11:30,880 --> 00:11:32,800
we don't have much tools to use actually

317
00:11:32,800 --> 00:11:35,440
you you may be able to use the waters

318
00:11:35,440 --> 00:11:38,480
for example to handle simulation but uh

319
00:11:38,480 --> 00:11:40,399
here we are also in a constant run

320
00:11:40,399 --> 00:11:41,519
regime

321
00:11:41,519 --> 00:11:43,839
so in this regime i guess the

322
00:11:43,839 --> 00:11:46,640
most closely related lemma is this

323
00:11:46,640 --> 00:11:49,120
simulation extraction mamma from a

324
00:11:49,120 --> 00:11:51,279
previous work by uh

325
00:11:51,279 --> 00:11:53,680
cha chong and yamakawa

326
00:11:53,680 --> 00:11:54,639
so

327
00:11:54,639 --> 00:11:57,120
we will take a look at this dilemma and

328
00:11:57,120 --> 00:11:59,600
see if we can use it in our setting to

329
00:11:59,600 --> 00:12:01,040
contact this proof

330
00:12:01,040 --> 00:12:03,279
let me first explain what does this lama

331
00:12:03,279 --> 00:12:05,839
say this islam is also compared towards

332
00:12:05,839 --> 00:12:07,600
again let me first explain the first

333
00:12:07,600 --> 00:12:10,000
word the first the first war is nothing

334
00:12:10,000 --> 00:12:12,720
but we have a malicious committee

335
00:12:12,720 --> 00:12:14,480
and he performed this committee

336
00:12:14,480 --> 00:12:16,560
commitment stage to commit a value and

337
00:12:16,560 --> 00:12:18,720
obtain a intermediate state he passed

338
00:12:18,720 --> 00:12:21,200
this state to the dickman phase they

339
00:12:21,200 --> 00:12:23,839
this represents a ticket phase adversary

340
00:12:23,839 --> 00:12:24,639
just

341
00:12:24,639 --> 00:12:27,440
perform the deployment and uh the output

342
00:12:27,440 --> 00:12:29,600
of this game is defined as follows

343
00:12:29,600 --> 00:12:32,959
if the dikmint is valid then

344
00:12:32,959 --> 00:12:35,600
it is not valid then we we just ask him

345
00:12:35,600 --> 00:12:37,680
to return bot we don't want to submit

346
00:12:37,680 --> 00:12:38,639
anything

347
00:12:38,639 --> 00:12:40,720
however as long as this commitment is

348
00:12:40,720 --> 00:12:43,760
valid we will will return the value and

349
00:12:43,760 --> 00:12:46,000
the commitment randomness together with

350
00:12:46,000 --> 00:12:46,800
the

351
00:12:46,800 --> 00:12:48,639
final state of the

352
00:12:48,639 --> 00:12:49,920
uh

353
00:12:49,920 --> 00:12:51,360
of the adversary at the end of the

354
00:12:51,360 --> 00:12:52,720
ticket phase

355
00:12:52,720 --> 00:12:54,959
as the output so

356
00:12:54,959 --> 00:12:58,320
this uh cco llama says

357
00:12:58,320 --> 00:13:01,680
this world actually is a epsilon close

358
00:13:01,680 --> 00:13:03,600
to the second word what is the second

359
00:13:03,600 --> 00:13:04,720
word it's

360
00:13:04,720 --> 00:13:06,399
the same as the first word

361
00:13:06,399 --> 00:13:08,399
except for the red text

362
00:13:08,399 --> 00:13:10,320
you can see that the only thing we do is

363
00:13:10,320 --> 00:13:12,639
we insert here the

364
00:13:12,639 --> 00:13:14,639
simulation extractor

365
00:13:14,639 --> 00:13:17,279
what it does intuitive here is it try to

366
00:13:17,279 --> 00:13:20,000
extract the commit value try to look at

367
00:13:20,000 --> 00:13:21,040
tutor

368
00:13:21,040 --> 00:13:23,839
uh before the dignity phase happens

369
00:13:23,839 --> 00:13:24,880
meanwhile

370
00:13:24,880 --> 00:13:26,880
after this extraction he also wants to

371
00:13:26,880 --> 00:13:28,160
simulate

372
00:13:28,160 --> 00:13:28,959
the

373
00:13:28,959 --> 00:13:31,600
intermediate state rule because in the

374
00:13:31,600 --> 00:13:33,279
concern if you extract something you may

375
00:13:33,279 --> 00:13:34,720
disturb the state

376
00:13:34,720 --> 00:13:37,279
this simulation extractor will extract

377
00:13:37,279 --> 00:13:39,680
value and return the original set back

378
00:13:39,680 --> 00:13:40,800
to you

379
00:13:40,800 --> 00:13:43,120
even though it's only if some calls the

380
00:13:43,120 --> 00:13:45,920
remaining steps is the same as here

381
00:13:45,920 --> 00:13:49,440
except for this uh additional condition

382
00:13:49,440 --> 00:13:51,360
here the intuition is uh

383
00:13:51,360 --> 00:13:55,199
if your extraction is not valid you just

384
00:13:55,199 --> 00:13:56,800
output bot

385
00:13:56,800 --> 00:13:59,360
so in this way we want to enforce that

386
00:13:59,360 --> 00:14:01,360
this simulation extractor should extract

387
00:14:01,360 --> 00:14:05,199
the valid valid commitment value okay

388
00:14:05,199 --> 00:14:07,199
so

389
00:14:07,199 --> 00:14:09,920
you can see that uh this one

390
00:14:09,920 --> 00:14:12,000
you want to extract the value and finish

391
00:14:12,000 --> 00:14:14,560
simulation together and this

392
00:14:14,560 --> 00:14:16,639
in some sense that is for you can i use

393
00:14:16,639 --> 00:14:20,320
this lemon in this setting

394
00:14:20,320 --> 00:14:23,440
after this is just epsilon simulation

395
00:14:23,440 --> 00:14:24,160
a

396
00:14:24,160 --> 00:14:26,800
it turns out to be that is unclear there

397
00:14:26,800 --> 00:14:29,680
are basically two obstacles uh the first

398
00:14:29,680 --> 00:14:32,720
one is uh if you look at this real game

399
00:14:32,720 --> 00:14:35,440
closely you'll see it it considers both

400
00:14:35,440 --> 00:14:37,760
commitment stage and dignity at the

401
00:14:37,760 --> 00:14:40,399
decrement stage you'll learn the value m

402
00:14:40,399 --> 00:14:41,920
explicitly

403
00:14:41,920 --> 00:14:44,880
however in this world it considers only

404
00:14:44,880 --> 00:14:46,880
commitment stage and no one will tell

405
00:14:46,880 --> 00:14:49,279
you the value n unless you do this

406
00:14:49,279 --> 00:14:50,959
extraction by yourself in the classic

407
00:14:50,959 --> 00:14:51,920
setting

408
00:14:51,920 --> 00:14:53,680
and in the clone setting it's not even

409
00:14:53,680 --> 00:14:55,600
clear how you can do that right

410
00:14:55,600 --> 00:14:58,000
a second issue is uh

411
00:14:58,000 --> 00:14:59,199
about uh

412
00:14:59,199 --> 00:15:01,519
this is a commitment so if it's

413
00:15:01,519 --> 00:15:03,360
statistical bonding as long as you have

414
00:15:03,360 --> 00:15:05,360
this commitment there is a unique value

415
00:15:05,360 --> 00:15:07,120
found within the government

416
00:15:07,120 --> 00:15:08,000
but

417
00:15:08,000 --> 00:15:12,639
this commit stage is more like flexible

418
00:15:12,639 --> 00:15:15,120
i said that all the columns should be

419
00:15:15,120 --> 00:15:17,199
the actual of the

420
00:15:17,199 --> 00:15:19,600
it should be xor to the same message n

421
00:15:19,600 --> 00:15:20,639
however

422
00:15:20,639 --> 00:15:22,480
the malicious c star may not follow the

423
00:15:22,480 --> 00:15:23,440
protocol

424
00:15:23,440 --> 00:15:25,839
so maybe he finished execution but

425
00:15:25,839 --> 00:15:28,639
there's no m well defined

426
00:15:28,639 --> 00:15:30,320
this represents the two obstacles

427
00:15:30,320 --> 00:15:32,399
because of that it's actually unclear

428
00:15:32,399 --> 00:15:35,440
how we can use this level

429
00:15:38,480 --> 00:15:41,199
so we will address these two obstacles

430
00:15:41,199 --> 00:15:43,839
one by one we start with the second one

431
00:15:43,839 --> 00:15:46,399
uh it's about the well-formedness of the

432
00:15:46,399 --> 00:15:49,279
committed value for now let's assume for

433
00:15:49,279 --> 00:15:50,720
simplicity that

434
00:15:50,720 --> 00:15:53,120
the c star will cheat in whatever ways

435
00:15:53,120 --> 00:15:54,639
but he will give

436
00:15:54,639 --> 00:15:56,320
he will give a consistent commitment

437
00:15:56,320 --> 00:15:59,279
here so let's first address the first

438
00:15:59,279 --> 00:16:00,560
issue and

439
00:16:00,560 --> 00:16:02,639
assume that the second issue is not

440
00:16:02,639 --> 00:16:05,279
not there yet

441
00:16:06,800 --> 00:16:08,639
yeah but even in this setting again

442
00:16:08,639 --> 00:16:10,720
because of the

443
00:16:10,720 --> 00:16:12,959
the problem i mentioned earlier there is

444
00:16:12,959 --> 00:16:15,040
no one that tells you the committed

445
00:16:15,040 --> 00:16:16,079
value m

446
00:16:16,079 --> 00:16:16,800
so

447
00:16:16,800 --> 00:16:19,600
it's unclear how you can how you can

448
00:16:19,600 --> 00:16:21,360
define the machine that gives you m and

449
00:16:21,360 --> 00:16:23,360
then use the specified lama

450
00:16:23,360 --> 00:16:26,480
at least in a blackbox way

451
00:16:26,480 --> 00:16:29,040
so we will handle this issue by opening

452
00:16:29,040 --> 00:16:32,399
the security proof of ccoi and

453
00:16:32,399 --> 00:16:36,680
do some number box modifications

454
00:16:36,880 --> 00:16:39,120
to do that i first need to

455
00:16:39,120 --> 00:16:41,120
remind you of the

456
00:16:41,120 --> 00:16:43,120
security proof i will give you a very

457
00:16:43,120 --> 00:16:44,160
high level

458
00:16:44,160 --> 00:16:45,360
explanation

459
00:16:45,360 --> 00:16:47,600
i mean a lot of details but i think it

460
00:16:47,600 --> 00:16:50,000
captures my intuition basically if you

461
00:16:50,000 --> 00:16:52,399
ask me what is the idea behind ccoi i

462
00:16:52,399 --> 00:16:55,279
will say the power of uncomputing

463
00:16:55,279 --> 00:16:57,680
it works as far as we want to do this

464
00:16:57,680 --> 00:17:01,600
extraction simulation given a state role

465
00:17:01,600 --> 00:17:02,800
we first

466
00:17:02,800 --> 00:17:05,199
decompose it by something called draw

467
00:17:05,199 --> 00:17:06,559
dilemma

468
00:17:06,559 --> 00:17:11,199
into two portions the first portion

469
00:17:11,280 --> 00:17:12,480
represents

470
00:17:12,480 --> 00:17:13,199
a

471
00:17:13,199 --> 00:17:15,280
the the state in the super position

472
00:17:15,280 --> 00:17:16,720
where the

473
00:17:16,720 --> 00:17:20,240
where the dignity algorithm will will

474
00:17:20,240 --> 00:17:22,720
will will tell you the correct decrement

475
00:17:22,720 --> 00:17:25,359
with probability greater than epsilon

476
00:17:25,359 --> 00:17:26,799
the epsilon

477
00:17:26,799 --> 00:17:28,319
you defined before because you want if

478
00:17:28,319 --> 00:17:29,600
some simulation

479
00:17:29,600 --> 00:17:30,400
now

480
00:17:30,400 --> 00:17:32,799
the second part is just the portion

481
00:17:32,799 --> 00:17:35,200
where this the digimon algorithm

482
00:17:35,200 --> 00:17:37,120
responsible with probability smaller

483
00:17:37,120 --> 00:17:38,320
than epsilon

484
00:17:38,320 --> 00:17:39,760
now

485
00:17:39,760 --> 00:17:42,640
if we do this decomposition there exists

486
00:17:42,640 --> 00:17:43,919
a

487
00:17:43,919 --> 00:17:45,919
unitary operation

488
00:17:45,919 --> 00:17:47,840
which we call amplifier

489
00:17:47,840 --> 00:17:50,240
it works in the following way we apply

490
00:17:50,240 --> 00:17:52,240
it in row it applies to these two

491
00:17:52,240 --> 00:17:55,200
portion separately independently

492
00:17:55,200 --> 00:17:57,760
and it will amplify the response

493
00:17:57,760 --> 00:17:59,440
response probability in this greater

494
00:17:59,440 --> 00:18:01,520
lifestyle portion to overwhelming

495
00:18:01,520 --> 00:18:02,400
but

496
00:18:02,400 --> 00:18:04,640
on the second the smaller than epsilon

497
00:18:04,640 --> 00:18:06,799
part we lose control we don't know

498
00:18:06,799 --> 00:18:09,520
what's happening there however the

499
00:18:09,520 --> 00:18:12,160
medical ways it will work on these two

500
00:18:12,160 --> 00:18:15,360
branches separately it won't get mixed

501
00:18:15,360 --> 00:18:17,600
so this this algorithm you can take for

502
00:18:17,600 --> 00:18:19,840
granted and uh

503
00:18:19,840 --> 00:18:21,760
let's see if we have this algorithm what

504
00:18:21,760 --> 00:18:23,280
do we do next

505
00:18:23,280 --> 00:18:25,440
next is you just apply the stigma

506
00:18:25,440 --> 00:18:27,520
algorithm on the state you obtained in

507
00:18:27,520 --> 00:18:29,679
the second phase let's analyze the

508
00:18:29,679 --> 00:18:31,840
behavior for these two branches

509
00:18:31,840 --> 00:18:34,000
separately you can see that for the

510
00:18:34,000 --> 00:18:35,200
first branch

511
00:18:35,200 --> 00:18:36,160
uh

512
00:18:36,160 --> 00:18:37,280
the

513
00:18:37,280 --> 00:18:39,200
the decrement algorithm responds to you

514
00:18:39,200 --> 00:18:41,840
with probability overwhelming so you can

515
00:18:41,840 --> 00:18:43,520
extract m from there

516
00:18:43,520 --> 00:18:45,919
however for the second part as i said we

517
00:18:45,919 --> 00:18:47,760
lose control so but for this one we

518
00:18:47,760 --> 00:18:49,600
don't care about it because we are only

519
00:18:49,600 --> 00:18:52,559
targeting the ips simulation

520
00:18:52,559 --> 00:18:55,039
after this step we at least learn the m

521
00:18:55,039 --> 00:18:57,600
in the good part and we memorize it

522
00:18:57,600 --> 00:18:59,919
technically you can think that we are

523
00:18:59,919 --> 00:19:02,320
denoted into a new register

524
00:19:02,320 --> 00:19:04,960
then we can and compute

525
00:19:04,960 --> 00:19:07,120
because quantum computing are always

526
00:19:07,120 --> 00:19:09,919
reversible you can view step two and

527
00:19:09,919 --> 00:19:12,240
three as a big unit operation

528
00:19:12,240 --> 00:19:14,880
what do i mean by reverse just apply the

529
00:19:14,880 --> 00:19:17,360
a conjugate transpose

530
00:19:17,360 --> 00:19:18,240
so

531
00:19:18,240 --> 00:19:20,320
after this operation

532
00:19:20,320 --> 00:19:22,960
let's look at these two parts

533
00:19:22,960 --> 00:19:24,960
again the easy part is a smaller than if

534
00:19:24,960 --> 00:19:26,640
some part as i said we lose control we

535
00:19:26,640 --> 00:19:28,559
don't know what's happening there but

536
00:19:28,559 --> 00:19:30,880
good pattern bad part always like

537
00:19:30,880 --> 00:19:33,120
independently perceives so it won't

538
00:19:33,120 --> 00:19:34,880
affect the good part then for the good

539
00:19:34,880 --> 00:19:36,480
part what we do is we amplify the

540
00:19:36,480 --> 00:19:39,039
responsive probability and then we

541
00:19:39,039 --> 00:19:41,440
extract

542
00:19:41,440 --> 00:19:43,280
we already know that they will response

543
00:19:43,280 --> 00:19:45,200
us with priority overwhelming then by

544
00:19:45,200 --> 00:19:46,640
something called a gentle measurement

545
00:19:46,640 --> 00:19:47,840
dilemma

546
00:19:47,840 --> 00:19:50,080
we can extract information from this

547
00:19:50,080 --> 00:19:52,240
state without disturbing i mean almost a

548
00:19:52,240 --> 00:19:54,720
perfectly extraction okay

549
00:19:54,720 --> 00:19:57,039
so to summarize what we do is first we

550
00:19:57,039 --> 00:19:58,320
use something called jordan

551
00:19:58,320 --> 00:20:01,280
decomposition to decompose it and then

552
00:20:01,280 --> 00:20:03,440
we amplify the response probability in a

553
00:20:03,440 --> 00:20:05,919
good part for the bad part we just

554
00:20:05,919 --> 00:20:07,360
ignore it

555
00:20:07,360 --> 00:20:09,280
now the real extraction happens at the

556
00:20:09,280 --> 00:20:12,559
step three and four we succeed in

557
00:20:12,559 --> 00:20:14,480
extraction for the m in a good part

558
00:20:14,480 --> 00:20:15,360
adjust

559
00:20:15,360 --> 00:20:17,520
now we do uncompute

560
00:20:17,520 --> 00:20:20,480
the problem i mentioned earlier is that

561
00:20:20,480 --> 00:20:22,559
this cci plumber

562
00:20:22,559 --> 00:20:23,520
have

563
00:20:23,520 --> 00:20:25,679
explicit construction of a machine that

564
00:20:25,679 --> 00:20:27,760
will tell you the value amp

565
00:20:27,760 --> 00:20:29,679
however in our

566
00:20:29,679 --> 00:20:31,520
in the extractor column i just showed

567
00:20:31,520 --> 00:20:34,720
you before there's no such a machine so

568
00:20:34,720 --> 00:20:38,080
let's take a look at these three steps

569
00:20:38,080 --> 00:20:39,760
you can see that step one two three

570
00:20:39,760 --> 00:20:41,760
depends on this uh

571
00:20:41,760 --> 00:20:42,799
uh

572
00:20:42,799 --> 00:20:45,280
secret teller right so

573
00:20:45,280 --> 00:20:46,960
our hope here is uh

574
00:20:46,960 --> 00:20:48,960
can we find such a

575
00:20:48,960 --> 00:20:51,520
counterpart in our extractable equipment

576
00:20:51,520 --> 00:20:54,480
construction so that we can plug it in

577
00:20:54,480 --> 00:20:56,559
to this uh template

578
00:20:56,559 --> 00:20:58,559
replace this uh becoming algorithm with

579
00:20:58,559 --> 00:21:01,120
it and then maybe we follow if we follow

580
00:21:01,120 --> 00:21:02,960
the same uh template we will we will

581
00:21:02,960 --> 00:21:04,080
we'll get

582
00:21:04,080 --> 00:21:06,799
we'll get symmetrical extraction

583
00:21:06,799 --> 00:21:09,120
so how to do that the starting point is

584
00:21:09,120 --> 00:21:10,880
uh

585
00:21:10,880 --> 00:21:11,919
we

586
00:21:11,919 --> 00:21:14,080
look at the classical extractor this is

587
00:21:14,080 --> 00:21:16,559
what the classical extreme does at least

588
00:21:16,559 --> 00:21:18,640
it extracts the value for you and we

589
00:21:18,640 --> 00:21:21,440
want to view it as the secret header

590
00:21:21,440 --> 00:21:23,600
however the problem is this extractor

591
00:21:23,600 --> 00:21:24,960
works only in the

592
00:21:24,960 --> 00:21:27,360
only in the classical setting if you are

593
00:21:27,360 --> 00:21:28,880
in a funnel setting

594
00:21:28,880 --> 00:21:30,559
maybe

595
00:21:30,559 --> 00:21:32,080
again you cannot perform a rewind it's

596
00:21:32,080 --> 00:21:33,679
hard

597
00:21:33,679 --> 00:21:34,150
however

598
00:21:34,150 --> 00:21:35,520
[Music]

599
00:21:35,520 --> 00:21:37,679
fortunately

600
00:21:37,679 --> 00:21:40,080
using a technique developed by unrule

601
00:21:40,080 --> 00:21:42,640
for post quantum proof of knowledge we

602
00:21:42,640 --> 00:21:44,880
actually can't finish the extraction but

603
00:21:44,880 --> 00:21:46,880
without simulation so

604
00:21:46,880 --> 00:21:49,360
this uh these results give us a

605
00:21:49,360 --> 00:21:52,320
simulationless extractor it can tell us

606
00:21:52,320 --> 00:21:53,039
the

607
00:21:53,039 --> 00:21:54,880
value m at least

608
00:21:54,880 --> 00:21:57,919
now we just use this simulation

609
00:21:57,919 --> 00:22:01,039
extractor to replace the decommitment

610
00:22:01,039 --> 00:22:04,799
algorithm in the cc valence and

611
00:22:04,799 --> 00:22:05,760
it will

612
00:22:05,760 --> 00:22:07,760
finish the proof basically the thing

613
00:22:07,760 --> 00:22:10,320
here what happens here is

614
00:22:10,320 --> 00:22:12,080
this first will get a simulation

615
00:22:12,080 --> 00:22:14,720
extractor and this is sufficient for

616
00:22:14,720 --> 00:22:16,799
step one two three and then this

617
00:22:16,799 --> 00:22:18,960
template will take care of the

618
00:22:18,960 --> 00:22:21,360
simulation to give you epsilon close

619
00:22:21,360 --> 00:22:24,320
simulation i admit a lot of details but

620
00:22:24,320 --> 00:22:25,760
that's the intuition behind the

621
00:22:25,760 --> 00:22:27,360
construction if you're interested please

622
00:22:27,360 --> 00:22:30,639
check our four version paper

623
00:22:30,720 --> 00:22:33,840
i solve this problem by uh assuming

624
00:22:33,840 --> 00:22:35,520
the committee's commitment is

625
00:22:35,520 --> 00:22:37,840
well-formed because they are consistent

626
00:22:37,840 --> 00:22:39,200
according to the

627
00:22:39,200 --> 00:22:41,520
real definition of the construction

628
00:22:41,520 --> 00:22:44,000
however in general historically cheat

629
00:22:44,000 --> 00:22:44,799
right

630
00:22:44,799 --> 00:22:46,559
this actually is easy to solve just add

631
00:22:46,559 --> 00:22:48,000
zero knowledge to prove all the

632
00:22:48,000 --> 00:22:51,120
commitments are performed honestly but

633
00:22:51,120 --> 00:22:53,919
we are also targeting at a box

634
00:22:53,919 --> 00:22:55,440
construction if you use your knowledge

635
00:22:55,440 --> 00:22:57,679
proof on some

636
00:22:57,679 --> 00:22:59,600
commitments you are making number box

637
00:22:59,600 --> 00:23:02,080
used comments however

638
00:23:02,080 --> 00:23:04,159
this issue actually is well known in the

639
00:23:04,159 --> 00:23:05,760
classical setting people developed a

640
00:23:05,760 --> 00:23:08,320
very powerful tool called pc they have

641
00:23:08,320 --> 00:23:09,520
basically

642
00:23:09,520 --> 00:23:12,320
it is the black box commit and proof

643
00:23:12,320 --> 00:23:14,000
technique

644
00:23:14,000 --> 00:23:16,240
addressing exactly same setting here so

645
00:23:16,240 --> 00:23:19,520
we just take their method and to make

646
00:23:19,520 --> 00:23:21,760
this commit and approve strategy

647
00:23:21,760 --> 00:23:24,159
blackbox i won't talk about this uh due

648
00:23:24,159 --> 00:23:26,559
to time constraints but i would say this

649
00:23:26,559 --> 00:23:28,320
is a very interesting technique you

650
00:23:28,320 --> 00:23:30,400
should you should like read about it and

651
00:23:30,400 --> 00:23:31,360
basically

652
00:23:31,360 --> 00:23:34,320
for all the blackbox constructions in

653
00:23:34,320 --> 00:23:37,360
cryptography i would say 95

654
00:23:37,360 --> 00:23:39,440
of them are using this technique so you

655
00:23:39,440 --> 00:23:41,360
can check our paper we have a good

656
00:23:41,360 --> 00:23:44,159
presentation with

657
00:23:44,159 --> 00:23:46,000
i want to give you some words

658
00:23:46,000 --> 00:23:48,640
a what i told you before is the extract

659
00:23:48,640 --> 00:23:50,799
for comment if some simulatable in the

660
00:23:50,799 --> 00:23:52,960
standalone setting however actually to

661
00:23:52,960 --> 00:23:55,440
use this mpc's in the head technique uh

662
00:23:55,440 --> 00:23:57,120
if you want to maintain constant run

663
00:23:57,120 --> 00:23:58,400
construction

664
00:23:58,400 --> 00:24:00,080
there will be some parallel repetition

665
00:24:00,080 --> 00:24:02,000
of the extrapolate

666
00:24:02,000 --> 00:24:02,880
and

667
00:24:02,880 --> 00:24:04,960
it turns out that our x.com is not

668
00:24:04,960 --> 00:24:07,840
parallel secure but we

669
00:24:07,840 --> 00:24:10,080
did achieve a weak version in the sense

670
00:24:10,080 --> 00:24:11,279
that uh

671
00:24:11,279 --> 00:24:13,520
you view all the sessions and happening

672
00:24:13,520 --> 00:24:15,440
together if one session board you can

673
00:24:15,440 --> 00:24:17,760
think that every like you don't want you

674
00:24:17,760 --> 00:24:18,880
don't need to submit anything you can

675
00:24:18,880 --> 00:24:20,960
sing all the session about

676
00:24:20,960 --> 00:24:22,559
uh

677
00:24:22,559 --> 00:24:24,480
the this is this turns out to be

678
00:24:24,480 --> 00:24:26,720
sufficient for the mtc in head technique

679
00:24:26,720 --> 00:24:28,320
because there's only a single commuter

680
00:24:28,320 --> 00:24:29,919
who's committing a lot of things to you

681
00:24:29,919 --> 00:24:31,520
and if one second board you can think of

682
00:24:31,520 --> 00:24:33,679
the receiver just reject doesn't

683
00:24:33,679 --> 00:24:34,720
simulate

684
00:24:34,720 --> 00:24:35,760
but

685
00:24:35,760 --> 00:24:37,279
don't try to use this construction in

686
00:24:37,279 --> 00:24:39,440
the uh for example

687
00:24:39,440 --> 00:24:41,360
parallel your knowledge setting because

688
00:24:41,360 --> 00:24:43,679
uh there you would want to simulate

689
00:24:43,679 --> 00:24:45,760
other and board sessions even though

690
00:24:45,760 --> 00:24:47,600
some sessions have brought it but our

691
00:24:47,600 --> 00:24:49,440
landmark won't take care of that that's

692
00:24:49,440 --> 00:24:52,880
actually an interesting open question

693
00:24:53,120 --> 00:24:54,559
so for the

694
00:24:54,559 --> 00:24:57,200
application to blackbox to pc

695
00:24:57,200 --> 00:24:58,799
we basically need

696
00:24:58,799 --> 00:25:00,960
to find some competitors but there are

697
00:25:00,960 --> 00:25:02,880
like a lot of competitors in

698
00:25:02,880 --> 00:25:05,600
the literature but we have restrictions

699
00:25:05,600 --> 00:25:07,120
we want black box and constant run

700
00:25:07,120 --> 00:25:08,240
construction

701
00:25:08,240 --> 00:25:09,480
this

702
00:25:09,480 --> 00:25:12,559
cdmw09 is a tcc paper this one is a

703
00:25:12,559 --> 00:25:15,440
black box and console it takes some so t

704
00:25:15,440 --> 00:25:18,240
plus a special commitment id

705
00:25:18,240 --> 00:25:19,600
functionality

706
00:25:19,600 --> 00:25:22,159
i will give you stamina also t and this

707
00:25:22,159 --> 00:25:24,640
special audio functionality actually it

708
00:25:24,640 --> 00:25:27,279
was implicit in the ancient literature

709
00:25:27,279 --> 00:25:29,600
shouldn't see ancient old dc charts but

710
00:25:29,600 --> 00:25:31,600
it just got abstract out by a recent

711
00:25:31,600 --> 00:25:34,880
work geos 21 giraffe 31 the reason is

712
00:25:34,880 --> 00:25:36,960
the these previous competitors they are

713
00:25:36,960 --> 00:25:39,600
more focusing on the uc setting they

714
00:25:39,600 --> 00:25:42,240
claim the standalone setting uh but they

715
00:25:42,240 --> 00:25:43,520
didn't really

716
00:25:43,520 --> 00:25:45,600
provide enough details and i think this

717
00:25:45,600 --> 00:25:47,840
is the first word get part explicit and

718
00:25:47,840 --> 00:25:48,880
rigorous

719
00:25:48,880 --> 00:25:49,679
uh

720
00:25:49,679 --> 00:25:51,840
once you have measures to pc there is a

721
00:25:51,840 --> 00:25:53,840
black box constant around the compiler

722
00:25:53,840 --> 00:25:55,360
to compile it into a two specific

723
00:25:55,360 --> 00:25:58,559
protocol so what we show here is our

724
00:25:58,559 --> 00:26:00,960
epsilon simulation uh simulatable

725
00:26:00,960 --> 00:26:03,360
expression that is triple component can

726
00:26:03,360 --> 00:26:04,799
be used to implement this idea

727
00:26:04,799 --> 00:26:06,720
functionality so we have the final

728
00:26:06,720 --> 00:26:07,840
result this is something i already

729
00:26:07,840 --> 00:26:09,360
showed you before if you are happy with

730
00:26:09,360 --> 00:26:11,200
quantum communication then you can take

731
00:26:11,200 --> 00:26:12,799
one function and uh

732
00:26:12,799 --> 00:26:14,880
this will give you a sentence it's an

733
00:26:14,880 --> 00:26:16,000
alternative

734
00:26:16,000 --> 00:26:19,600
approach to inventory reach to pc

735
00:26:19,600 --> 00:26:21,039
so finally i

736
00:26:21,039 --> 00:26:23,039
will mention some

737
00:26:23,039 --> 00:26:25,279
concurrent work uh there is a recent

738
00:26:25,279 --> 00:26:26,640
work by uh

739
00:26:26,640 --> 00:26:30,159
alex mumbai and from ima nick spooner

740
00:26:30,159 --> 00:26:31,919
they also achieved epsilon simulatable

741
00:26:31,919 --> 00:26:34,480
extraction commitment and the difference

742
00:26:34,480 --> 00:26:36,880
is they give a new and very powerful

743
00:26:36,880 --> 00:26:39,600
notion for a simulated running time what

744
00:26:39,600 --> 00:26:40,400
they

745
00:26:40,400 --> 00:26:42,559
that is what they call coherent expected

746
00:26:42,559 --> 00:26:44,480
uh qpt time

747
00:26:44,480 --> 00:26:46,480
this time this notion is strong it

748
00:26:46,480 --> 00:26:48,960
implies uh epsilon's measurability the

749
00:26:48,960 --> 00:26:50,799
difference is their construction number

750
00:26:50,799 --> 00:26:52,480
box and they need super polynomial

751
00:26:52,480 --> 00:26:56,000
harness of a one function

752
00:26:56,000 --> 00:26:58,400
uh another application of our reality is

753
00:26:58,400 --> 00:27:00,960
our extravagant plus the reason work by

754
00:27:00,960 --> 00:27:01,679
uh

755
00:27:01,679 --> 00:27:03,919
pitansky lin and smelly

756
00:27:03,919 --> 00:27:06,480
will give us the first uh log star

757
00:27:06,480 --> 00:27:08,799
lambda run post quantum number variable

758
00:27:08,799 --> 00:27:10,799
equipment from the minimum star span

759
00:27:10,799 --> 00:27:13,760
assumption of all functions and uh

760
00:27:13,760 --> 00:27:17,840
in a little bit more detail the box 21

761
00:27:17,840 --> 00:27:19,919
actually gives us a compiler going from

762
00:27:19,919 --> 00:27:20,960
any

763
00:27:20,960 --> 00:27:22,640
k round post quantum extractable

764
00:27:22,640 --> 00:27:24,480
equivalent to the

765
00:27:24,480 --> 00:27:26,799
k times log star lambda on postcolumn

766
00:27:26,799 --> 00:27:30,080
nonmetal.com and uh our

767
00:27:30,080 --> 00:27:31,360
post quantum

768
00:27:31,360 --> 00:27:33,360
extract document can be used here here

769
00:27:33,360 --> 00:27:35,200
in the caveat

770
00:27:35,200 --> 00:27:39,520
this this compiler uh requires a

771
00:27:39,520 --> 00:27:42,240
natural closed simulation for the post

772
00:27:42,240 --> 00:27:43,840
post extraction state of the measures

773
00:27:43,840 --> 00:27:47,600
computer however uh since you know

774
00:27:47,600 --> 00:27:50,000
non-metabolism is essentially a

775
00:27:50,000 --> 00:27:52,640
game-based definition or ind notion so

776
00:27:52,640 --> 00:27:54,080
in the same sense that if some

777
00:27:54,080 --> 00:27:55,679
terminology impressed witness in

778
00:27:55,679 --> 00:27:57,120
distinguishability

779
00:27:57,120 --> 00:28:00,080
you can replace the fully simulated or

780
00:28:00,080 --> 00:28:02,559
extra document with a ipstone simulation

781
00:28:02,559 --> 00:28:03,440
version

782
00:28:03,440 --> 00:28:05,520
and uh i will take the

783
00:28:05,520 --> 00:28:07,679
last seconds for uh to give an

784
00:28:07,679 --> 00:28:10,320
advertisement you can see that uh now we

785
00:28:10,320 --> 00:28:12,399
have a lot log star lamina around the

786
00:28:12,399 --> 00:28:14,159
construction for our postcard normal

787
00:28:14,159 --> 00:28:15,840
document

788
00:28:15,840 --> 00:28:17,840
can i hope to achieve concern

789
00:28:17,840 --> 00:28:21,200
actually these questions uh was pretty

790
00:28:21,200 --> 00:28:23,520
hard in the classical setting even and

791
00:28:23,520 --> 00:28:25,760
they took a lot of effort to go from

792
00:28:25,760 --> 00:28:27,919
lobster laminate to to come around

793
00:28:27,919 --> 00:28:30,320
because even though the house run

794
00:28:30,320 --> 00:28:32,640
complexity the gap may not be that that

795
00:28:32,640 --> 00:28:35,520
large but they took totally different uh

796
00:28:35,520 --> 00:28:37,919
techniques in the classical uh in the

797
00:28:37,919 --> 00:28:40,799
classical world so are we going are we

798
00:28:40,799 --> 00:28:42,960
going to run into the same trouble in

799
00:28:42,960 --> 00:28:44,720
the post quantum setting

800
00:28:44,720 --> 00:28:47,360
and i have some good news for you and

801
00:28:47,360 --> 00:28:49,200
there is a recent work

802
00:28:49,200 --> 00:28:50,720
by me

803
00:28:50,720 --> 00:28:51,840
by me

804
00:28:51,840 --> 00:28:54,080
and takashi yamatawa and we built the

805
00:28:54,080 --> 00:28:55,840
first constant around the postpartum

806
00:28:55,840 --> 00:28:57,120
number

807
00:28:57,120 --> 00:28:59,120
from the minimal assumption of post

808
00:28:59,120 --> 00:29:00,720
quantum 1 functions and if you are

809
00:29:00,720 --> 00:29:02,640
interested you should check this link

810
00:29:02,640 --> 00:29:04,960
and that's all i want to share i'm happy

811
00:29:04,960 --> 00:29:08,360
to take questions

812
00:29:12,720 --> 00:29:14,399
thanks for this talk uh we have maybe

813
00:29:14,399 --> 00:29:16,320
time for one quick question

814
00:29:16,320 --> 00:29:18,640
is there any question in the audience

815
00:29:18,640 --> 00:29:21,679
i don't see any questions in zoom so

816
00:29:21,679 --> 00:29:23,760
then let's join join me and thanking

817
00:29:23,760 --> 00:29:27,158
speaker again

818
00:29:28,960 --> 00:29:31,279
and while the next speaker sets up i can

819
00:29:31,279 --> 00:29:32,880
read you this very long title that's

820
00:29:32,880 --> 00:29:35,600
actually a soft merge of two papers the

821
00:29:35,600 --> 00:29:37,840
first paper is the gap is sensitive to

822
00:29:37,840 --> 00:29:39,760
size of three images collect some

823
00:29:39,760 --> 00:29:41,440
property doesn't go beyond quantum

824
00:29:41,440 --> 00:29:43,200
collision resistance for pre-images

825
00:29:43,200 --> 00:29:45,279
started hash functions

826
00:29:45,279 --> 00:29:47,279
that was the first paper that's by xu

827
00:29:47,279 --> 00:29:48,799
jiaoz

828
00:29:48,799 --> 00:29:51,039
way and ray 2

829
00:29:51,039 --> 00:29:53,520
and the second paper is

830
00:29:53,520 --> 00:29:55,679
much shorter title and it's called new

831
00:29:55,679 --> 00:29:57,200
constructions

832
00:29:57,200 --> 00:30:00,399
of collapsing hashes

833
00:30:00,399 --> 00:30:02,799
and it's by mark sandri and mark is

834
00:30:02,799 --> 00:30:05,120
going to give the talk so

835
00:30:05,120 --> 00:30:06,640
whenever you're ready

836
00:30:06,640 --> 00:30:09,840
just go ahead

837
00:30:48,840 --> 00:30:52,918
meeting um

838
00:31:20,640 --> 00:31:22,320
all right uh yeah so this talk will

839
00:31:22,320 --> 00:31:25,519
cover uh two recent works uh seeking to

840
00:31:25,519 --> 00:31:27,440
understand the security of hash

841
00:31:27,440 --> 00:31:31,399
functions in a quantum world

842
00:31:36,399 --> 00:31:38,720
okay so let's start with the notion of

843
00:31:38,720 --> 00:31:40,880
classical collision resistance uh so

844
00:31:40,880 --> 00:31:42,720
here we have a compressing function that

845
00:31:42,720 --> 00:31:45,840
maps large inputs down to small inputs

846
00:31:45,840 --> 00:31:49,039
and we want that despite it being

847
00:31:49,039 --> 00:31:50,640
compressing and there being a lot of

848
00:31:50,640 --> 00:31:52,720
collisions that exist in this function

849
00:31:52,720 --> 00:31:54,880
that is nevertheless hard for a

850
00:31:54,880 --> 00:31:56,480
computationally bounded adversary to

851
00:31:56,480 --> 00:31:58,399
find one

852
00:31:58,399 --> 00:32:00,480
okay um and this this ability to

853
00:32:00,480 --> 00:32:03,399
compress inputs while still uh

854
00:32:03,399 --> 00:32:06,320
computationally hiding any collisions

855
00:32:06,320 --> 00:32:07,840
has tons of applications throughout

856
00:32:07,840 --> 00:32:09,039
cryptography and has made collision

857
00:32:09,039 --> 00:32:10,320
resistance one of the fundamental

858
00:32:10,320 --> 00:32:13,120
cryptographic building blocks

859
00:32:13,120 --> 00:32:14,799
uh so the natural question is when we

860
00:32:14,799 --> 00:32:17,600
move to the post quantum setting what

861
00:32:17,600 --> 00:32:19,600
type of security do we want out of our

862
00:32:19,600 --> 00:32:21,519
hash functions

863
00:32:21,519 --> 00:32:23,840
and the the boring answer is why don't

864
00:32:23,840 --> 00:32:26,559
we just uh insist that when we talk

865
00:32:26,559 --> 00:32:27,679
about computationally done at

866
00:32:27,679 --> 00:32:30,159
adversaries we allow them to be quantum

867
00:32:30,159 --> 00:32:32,000
adversaries now so efficient quantum

868
00:32:32,000 --> 00:32:33,279
adversaries

869
00:32:33,279 --> 00:32:35,600
uh and we ask that

870
00:32:35,600 --> 00:32:37,440
you know it's hard for such an adversary

871
00:32:37,440 --> 00:32:40,080
to find a collision

872
00:32:40,080 --> 00:32:41,919
so i'll call this notion post-quantum

873
00:32:41,919 --> 00:32:43,600
collision resistance

874
00:32:43,600 --> 00:32:46,640
and unfortunately uh this is not the

875
00:32:46,640 --> 00:32:49,840
necessarily the right answer

876
00:32:49,840 --> 00:32:52,559
um so let's see why this is this is well

877
00:32:52,559 --> 00:32:56,000
known by now um so let's consider one of

878
00:32:56,000 --> 00:32:58,000
the canonical applications of hash

879
00:32:58,000 --> 00:32:59,519
functions which is to give us

880
00:32:59,519 --> 00:33:01,440
commitments i'm not going to worry about

881
00:33:01,440 --> 00:33:04,000
hiding because hiding isn't too too

882
00:33:04,000 --> 00:33:06,240
interesting in this setting

883
00:33:06,240 --> 00:33:07,760
and i'm just going to focus on binding

884
00:33:07,760 --> 00:33:09,039
so i'm going to i'm going to think of

885
00:33:09,039 --> 00:33:10,559
using a hash function

886
00:33:10,559 --> 00:33:13,360
to give a binding commitment

887
00:33:13,360 --> 00:33:15,440
to to a message and why might you want

888
00:33:15,440 --> 00:33:16,960
to use a hash function well maybe you

889
00:33:16,960 --> 00:33:19,919
want your your commitment to be small

890
00:33:19,919 --> 00:33:20,880
so

891
00:33:20,880 --> 00:33:22,399
i'm also not going to define what the

892
00:33:22,399 --> 00:33:24,559
security of the commitment scheme we

893
00:33:24,559 --> 00:33:26,880
want but at a minimum the following game

894
00:33:26,880 --> 00:33:28,720
should should be hard whatever

895
00:33:28,720 --> 00:33:30,559
definition of a commitment you want you

896
00:33:30,559 --> 00:33:32,000
would at least hope this game is hard

897
00:33:32,000 --> 00:33:33,279
where the

898
00:33:33,279 --> 00:33:36,640
adversary first sends over a commitment

899
00:33:36,640 --> 00:33:40,159
then the at some point the the the game

900
00:33:40,159 --> 00:33:42,080
gives them a random message and they

901
00:33:42,080 --> 00:33:43,760
have to somehow open the commitment to a

902
00:33:43,760 --> 00:33:45,840
random message so by open i mean come up

903
00:33:45,840 --> 00:33:48,159
with the random coins r such that the

904
00:33:48,159 --> 00:33:50,240
commitment is h of m r

905
00:33:50,240 --> 00:33:51,679
so this should definitely be hard if

906
00:33:51,679 --> 00:33:52,720
you're going to use your hash function

907
00:33:52,720 --> 00:33:55,360
as a commitment

908
00:33:55,360 --> 00:33:57,679
um well unfortunately

909
00:33:57,679 --> 00:34:00,480
uh it turns out that this uh that the

910
00:34:00,480 --> 00:34:02,080
notion of collision resistant hash

911
00:34:02,080 --> 00:34:03,600
function

912
00:34:03,600 --> 00:34:04,960
you know upgraded to the quantum setting

913
00:34:04,960 --> 00:34:07,200
to be post quantum is not enough to

914
00:34:07,200 --> 00:34:09,599
guarantee that this commitment is

915
00:34:09,599 --> 00:34:10,719
binding

916
00:34:10,719 --> 00:34:13,119
in particular and venus at all

917
00:34:13,119 --> 00:34:15,359
what they show is that there exists

918
00:34:15,359 --> 00:34:16,960
collision resistant

919
00:34:16,960 --> 00:34:19,520
post quantum hash functions

920
00:34:19,520 --> 00:34:21,280
such that there are not binding when

921
00:34:21,280 --> 00:34:23,199
used as a commitment

922
00:34:23,199 --> 00:34:24,800
with the caveat that this is relative to

923
00:34:24,800 --> 00:34:28,320
an oracle so it's not a standard model

924
00:34:28,320 --> 00:34:29,839
separation but it you know at least

925
00:34:29,839 --> 00:34:30,719
shows

926
00:34:30,719 --> 00:34:32,480
that you won't be able to prove a say a

927
00:34:32,480 --> 00:34:34,800
black box um

928
00:34:34,800 --> 00:34:36,000
that the hash function is a good

929
00:34:36,000 --> 00:34:37,520
commitment in this setting just from its

930
00:34:37,520 --> 00:34:39,918
collision resistance

931
00:34:39,918 --> 00:34:41,760
all right so so what's the intuition i

932
00:34:41,760 --> 00:34:43,918
won't i won't go into the proof but the

933
00:34:43,918 --> 00:34:46,000
intuition for why this is the case

934
00:34:46,000 --> 00:34:47,679
is that if we you know we're trying to

935
00:34:47,679 --> 00:34:49,440
prove a reduction we have an adversary

936
00:34:49,440 --> 00:34:51,440
that say breaks this binding notion for

937
00:34:51,440 --> 00:34:52,800
commitment

938
00:34:52,800 --> 00:34:54,960
we somehow need to construct a collision

939
00:34:54,960 --> 00:34:57,760
but this binding notion only gives us

940
00:34:57,760 --> 00:34:59,599
one pre-image of a hash function where

941
00:34:59,599 --> 00:35:02,640
where do we get a collision from

942
00:35:02,640 --> 00:35:04,480
classically we

943
00:35:04,480 --> 00:35:06,800
can actually complete the reduction and

944
00:35:06,800 --> 00:35:08,240
get a collision and basically what you

945
00:35:08,240 --> 00:35:10,000
do is you run the adversary twice using

946
00:35:10,000 --> 00:35:12,720
what's known as rewinding

947
00:35:12,720 --> 00:35:15,040
unfortunately as as was alluded to in

948
00:35:15,040 --> 00:35:17,359
the previous talk rewinding is known to

949
00:35:17,359 --> 00:35:19,119
be problematic quantumly this has to do

950
00:35:19,119 --> 00:35:21,200
with the no cloning theorem and quantum

951
00:35:21,200 --> 00:35:23,440
mechanics

952
00:35:23,440 --> 00:35:25,280
and and what the imbainus at all result

953
00:35:25,280 --> 00:35:27,680
does is it really shows that you know

954
00:35:27,680 --> 00:35:29,520
not only is rewinding problematic but

955
00:35:29,520 --> 00:35:30,720
there are cases where it is just

956
00:35:30,720 --> 00:35:33,680
outright impossible

957
00:35:34,240 --> 00:35:36,560
so instead um

958
00:35:36,560 --> 00:35:38,960
unruh in 2016 proposed the following

959
00:35:38,960 --> 00:35:40,800
notion for collision resistance that's

960
00:35:40,800 --> 00:35:42,240
called earth's right the falling notion

961
00:35:42,240 --> 00:35:43,680
of security for hash functions that's

962
00:35:43,680 --> 00:35:45,359
called collapsing

963
00:35:45,359 --> 00:35:47,200
and here's here's the game

964
00:35:47,200 --> 00:35:49,119
so the adversary gets to come up with a

965
00:35:49,119 --> 00:35:51,920
superposition of inputs they they send

966
00:35:51,920 --> 00:35:52,720
it to

967
00:35:52,720 --> 00:35:54,560
the challenger

968
00:35:54,560 --> 00:35:55,760
and the challenger does one of two

969
00:35:55,760 --> 00:35:57,119
things either they just measure the

970
00:35:57,119 --> 00:35:59,119
superposition of inputs and send back

971
00:35:59,119 --> 00:36:01,599
the resulting collapsed state which will

972
00:36:01,599 --> 00:36:04,160
just be a single classical input

973
00:36:04,160 --> 00:36:05,119
or

974
00:36:05,119 --> 00:36:07,440
they measure not the

975
00:36:07,440 --> 00:36:09,760
not the input itself but the result of

976
00:36:09,760 --> 00:36:12,480
applying the hash function to x

977
00:36:12,480 --> 00:36:15,599
so on the right what the resulting state

978
00:36:15,599 --> 00:36:18,079
is is it's a superposition over all

979
00:36:18,079 --> 00:36:20,480
pre-images to the hash function that map

980
00:36:20,480 --> 00:36:22,960
to the you know given output so rather

981
00:36:22,960 --> 00:36:24,079
than just being a single classical

982
00:36:24,079 --> 00:36:26,480
string it's this is collision i realize

983
00:36:26,480 --> 00:36:28,400
this superposition

984
00:36:28,400 --> 00:36:31,040
um nevertheless what collapsing demands

985
00:36:31,040 --> 00:36:32,079
is that

986
00:36:32,079 --> 00:36:34,000
these two these two cases are

987
00:36:34,000 --> 00:36:36,720
indistinguishable

988
00:36:37,119 --> 00:36:38,640
okay so this might seem like a bizarre

989
00:36:38,640 --> 00:36:42,720
notion for for a hash function but the

990
00:36:42,720 --> 00:36:45,359
the intuition is that if

991
00:36:45,359 --> 00:36:47,200
uh if you thought of h as being an

992
00:36:47,200 --> 00:36:48,800
objective function instead of

993
00:36:48,800 --> 00:36:50,320
compressing

994
00:36:50,320 --> 00:36:52,000
um with an injective function if you

995
00:36:52,000 --> 00:36:54,880
were to measure the output it actually

996
00:36:54,880 --> 00:36:57,440
would fully collapse the state to

997
00:36:57,440 --> 00:36:59,280
a single pre-image just because every

998
00:36:59,280 --> 00:37:01,760
output has at most one pre-image

999
00:37:01,760 --> 00:37:03,680
so in some sense what collapsing is

1000
00:37:03,680 --> 00:37:04,480
saying

1001
00:37:04,480 --> 00:37:07,760
is that in some quantum sense

1002
00:37:07,760 --> 00:37:09,680
a collision or a collapsing hash

1003
00:37:09,680 --> 00:37:11,760
function is as good as an injective

1004
00:37:11,760 --> 00:37:13,760
function which is you know some way of

1005
00:37:13,760 --> 00:37:16,160
thinking about what classical collision

1006
00:37:16,160 --> 00:37:18,480
resistance was also

1007
00:37:18,480 --> 00:37:20,240
um all right so so this is the

1008
00:37:20,240 --> 00:37:21,680
definition we're trying to achieve i

1009
00:37:21,680 --> 00:37:22,800
won't spend too much time on it because

1010
00:37:22,800 --> 00:37:24,079
it turns out it's actually not super

1011
00:37:24,079 --> 00:37:26,320
important for this talk

1012
00:37:26,320 --> 00:37:27,920
but the point is that now this has been

1013
00:37:27,920 --> 00:37:29,280
this is widely regarded as the right

1014
00:37:29,280 --> 00:37:30,800
notion of secured in the post quantum

1015
00:37:30,800 --> 00:37:33,280
setting and

1016
00:37:33,280 --> 00:37:34,720
it has been shown to be sufficient to

1017
00:37:34,720 --> 00:37:36,960
lift many classical results into the

1018
00:37:36,960 --> 00:37:39,680
quantum setting

1019
00:37:39,680 --> 00:37:41,359
okay so now let's talk about what was

1020
00:37:41,359 --> 00:37:43,440
previously known

1021
00:37:43,440 --> 00:37:44,880
uh so

1022
00:37:44,880 --> 00:37:47,760
unruh in 2016 showed that random oracles

1023
00:37:47,760 --> 00:37:49,200
are collapsing this is a good proof of

1024
00:37:49,200 --> 00:37:50,880
concept that says like you know if

1025
00:37:50,880 --> 00:37:52,160
random oracles weren't collapsing that

1026
00:37:52,160 --> 00:37:53,839
might suggest that

1027
00:37:53,839 --> 00:37:56,400
the definition is just unachievable

1028
00:37:56,400 --> 00:37:58,400
um and then in another work by owner and

1029
00:37:58,400 --> 00:38:01,359
a follow-up work by um

1030
00:38:01,359 --> 00:38:02,400
and myself

1031
00:38:02,400 --> 00:38:04,640
we we show that

1032
00:38:04,640 --> 00:38:06,320
we can achieve collapsing in the

1033
00:38:06,320 --> 00:38:07,599
standard model

1034
00:38:07,599 --> 00:38:09,440
by going through something called a

1035
00:38:09,440 --> 00:38:11,520
lossy function which in turn we can

1036
00:38:11,520 --> 00:38:15,119
instantiate via lwe

1037
00:38:15,680 --> 00:38:16,640
okay

1038
00:38:16,640 --> 00:38:18,720
and then here's another sort of positive

1039
00:38:18,720 --> 00:38:20,480
result for collapsing

1040
00:38:20,480 --> 00:38:24,000
um so we we showed that if you had a

1041
00:38:24,000 --> 00:38:25,280
post-quantum collision resistant hash

1042
00:38:25,280 --> 00:38:27,520
function that was not collapsing

1043
00:38:27,520 --> 00:38:29,040
that this would give you some pretty

1044
00:38:29,040 --> 00:38:31,920
powerful objects and um

1045
00:38:31,920 --> 00:38:33,599
quantum cryptography that have been

1046
00:38:33,599 --> 00:38:35,760
notoriously hard to construct and you

1047
00:38:35,760 --> 00:38:36,720
know that while there have been

1048
00:38:36,720 --> 00:38:38,880
candidates many of them have ultimately

1049
00:38:38,880 --> 00:38:40,320
been insecure

1050
00:38:40,320 --> 00:38:41,839
so if it turned out that your favorite

1051
00:38:41,839 --> 00:38:43,040
hash function

1052
00:38:43,040 --> 00:38:45,440
was post quantum collision resistant but

1053
00:38:45,440 --> 00:38:47,520
not collapsing this would actually allow

1054
00:38:47,520 --> 00:38:49,520
you to solve some you know long-standing

1055
00:38:49,520 --> 00:38:51,680
open problems in quantum

1056
00:38:51,680 --> 00:38:54,640
quantum cryptography

1057
00:38:54,800 --> 00:38:56,000
on the other hand we have this negative

1058
00:38:56,000 --> 00:38:57,599
result that says well at least relative

1059
00:38:57,599 --> 00:39:01,440
to an oracle you can't have all um

1060
00:39:01,440 --> 00:39:02,560
post quantum collision assistance and

1061
00:39:02,560 --> 00:39:04,160
hash functions be collapsing there will

1062
00:39:04,160 --> 00:39:05,839
be some

1063
00:39:05,839 --> 00:39:08,079
negative results

1064
00:39:08,079 --> 00:39:09,680
but this is this is really a frustrating

1065
00:39:09,680 --> 00:39:11,520
wide gap between what the positive and

1066
00:39:11,520 --> 00:39:13,200
negative results are you know it could

1067
00:39:13,200 --> 00:39:15,920
be on one hand that all standard model

1068
00:39:15,920 --> 00:39:17,280
post quantum collision is in hash

1069
00:39:17,280 --> 00:39:18,960
functions are actually collapsing right

1070
00:39:18,960 --> 00:39:20,480
the only negative result we have is

1071
00:39:20,480 --> 00:39:22,720
relative to an oracle or

1072
00:39:22,720 --> 00:39:25,359
um you know some some assumptions that

1073
00:39:25,359 --> 00:39:26,720
have not really withstood the test of

1074
00:39:26,720 --> 00:39:30,240
time or the other possibility is that

1075
00:39:30,240 --> 00:39:31,040
maybe

1076
00:39:31,040 --> 00:39:33,839
lwe based

1077
00:39:33,839 --> 00:39:35,920
constructions or in particular lossy

1078
00:39:35,920 --> 00:39:38,160
function based constructions of hash

1079
00:39:38,160 --> 00:39:39,200
functions

1080
00:39:39,200 --> 00:39:41,760
maybe those are the only collapsing hash

1081
00:39:41,760 --> 00:39:43,440
functions we have and everything else is

1082
00:39:43,440 --> 00:39:45,599
actually not collapsing we just really

1083
00:39:45,599 --> 00:39:47,440
you know prior to these works we really

1084
00:39:47,440 --> 00:39:49,839
didn't know

1085
00:39:50,240 --> 00:39:52,560
okay so so this brings me to the results

1086
00:39:52,560 --> 00:39:54,560
so i'll first discuss the results of the

1087
00:39:54,560 --> 00:39:56,960
concurrent work by kal and zu

1088
00:39:56,960 --> 00:40:00,160
so what they showed is that

1089
00:40:00,160 --> 00:40:01,680
if you assume

1090
00:40:01,680 --> 00:40:03,680
a post-quantum collision resistant hash

1091
00:40:03,680 --> 00:40:05,440
function

1092
00:40:05,440 --> 00:40:06,240
h

1093
00:40:06,240 --> 00:40:08,880
h may or may not itself be collapsing

1094
00:40:08,880 --> 00:40:11,040
but if you impose a certain regularity

1095
00:40:11,040 --> 00:40:12,480
condition on the hash function they call

1096
00:40:12,480 --> 00:40:14,079
almost regular

1097
00:40:14,079 --> 00:40:16,640
then you can compile that hash function

1098
00:40:16,640 --> 00:40:20,480
into a collapsing hash function

1099
00:40:20,480 --> 00:40:22,720
and as a corollary what they show is

1100
00:40:22,720 --> 00:40:25,200
that the cis hash function

1101
00:40:25,200 --> 00:40:27,040
is almost regular according to their

1102
00:40:27,040 --> 00:40:29,040
notion and therefore you can compile the

1103
00:40:29,040 --> 00:40:31,599
cis hash function into a collapsing hash

1104
00:40:31,599 --> 00:40:33,920
function

1105
00:40:33,920 --> 00:40:36,240
now i should note that the as a from a

1106
00:40:36,240 --> 00:40:38,560
feasibility perspective going from cis

1107
00:40:38,560 --> 00:40:39,520
to

1108
00:40:39,520 --> 00:40:41,359
collapsing was already known

1109
00:40:41,359 --> 00:40:43,200
right in particular cis and lw are

1110
00:40:43,200 --> 00:40:45,839
equivalent under quantum reductions

1111
00:40:45,839 --> 00:40:47,200
by regev

1112
00:40:47,200 --> 00:40:48,960
and so then you could just plug in the

1113
00:40:48,960 --> 00:40:51,359
lwe based

1114
00:40:51,359 --> 00:40:53,280
constructions of collapsing hash

1115
00:40:53,280 --> 00:40:55,119
functions

1116
00:40:55,119 --> 00:40:56,720
however

1117
00:40:56,720 --> 00:40:58,000
the

1118
00:40:58,000 --> 00:41:00,240
kawan zoo result does not use lossiness

1119
00:41:00,240 --> 00:41:02,400
anywhere in the proof and so it's really

1120
00:41:02,400 --> 00:41:04,240
a fundamentally different proof than

1121
00:41:04,240 --> 00:41:05,520
what was done before it shows that

1122
00:41:05,520 --> 00:41:08,160
lossiness is not inherent to justifying

1123
00:41:08,160 --> 00:41:11,680
uh collapsing hash functions

1124
00:41:11,680 --> 00:41:14,160
all right so so now let me discuss

1125
00:41:14,160 --> 00:41:16,720
our results um so we show how to

1126
00:41:16,720 --> 00:41:18,720
construct collision resistant hashes

1127
00:41:18,720 --> 00:41:20,720
under any of the following assumptions

1128
00:41:20,720 --> 00:41:22,319
the first is this what we call

1129
00:41:22,319 --> 00:41:24,160
semi-regular post-quantum

1130
00:41:24,160 --> 00:41:26,319
collision-resistant hash function um

1131
00:41:26,319 --> 00:41:28,319
semi-regular being our term for some

1132
00:41:28,319 --> 00:41:30,640
regularity condition which is um

1133
00:41:30,640 --> 00:41:31,680
somewhat

1134
00:41:31,680 --> 00:41:35,119
milder condition than the almost regular

1135
00:41:35,119 --> 00:41:36,960
notion and therefore more broadly

1136
00:41:36,960 --> 00:41:39,520
applicable

1137
00:41:39,760 --> 00:41:41,680
we show that you can construct

1138
00:41:41,680 --> 00:41:43,440
collapsing hash functions from the

1139
00:41:43,440 --> 00:41:46,000
hardness of lpn in certain parameter

1140
00:41:46,000 --> 00:41:47,440
regimes

1141
00:41:47,440 --> 00:41:49,040
which essentially match what we know how

1142
00:41:49,040 --> 00:41:51,040
to use lpn for to get cloud to get

1143
00:41:51,040 --> 00:41:53,520
collision resistance

1144
00:41:53,520 --> 00:41:55,680
we can construct collapsing hashes from

1145
00:41:55,680 --> 00:41:57,119
the quantum partners of finding short

1146
00:41:57,119 --> 00:41:58,880
cycles and exponentially large expander

1147
00:41:58,880 --> 00:42:01,680
graphs the canonical example of this is

1148
00:42:01,680 --> 00:42:04,240
isogenase over elliptic curves this also

1149
00:42:04,240 --> 00:42:07,520
matches what we know of for getting

1150
00:42:07,520 --> 00:42:08,880
collision resistant hashing from

1151
00:42:08,880 --> 00:42:11,280
exogeneous over elliptic curves

1152
00:42:11,280 --> 00:42:13,280
and then finally we show that we can

1153
00:42:13,280 --> 00:42:14,960
start collapsing hashes from any

1154
00:42:14,960 --> 00:42:16,800
optimally secure

1155
00:42:16,800 --> 00:42:18,560
collision resistant hash function here

1156
00:42:18,560 --> 00:42:20,400
we don't require any leg regularity

1157
00:42:20,400 --> 00:42:22,000
assumption but require this notion of

1158
00:42:22,000 --> 00:42:23,920
optimally secure which i'll elaborate on

1159
00:42:23,920 --> 00:42:25,760
later

1160
00:42:25,760 --> 00:42:28,000
um and then as a trivial corollary we

1161
00:42:28,000 --> 00:42:29,599
get the first feasibility we get these

1162
00:42:29,599 --> 00:42:30,880
feasibility results where we get the

1163
00:42:30,880 --> 00:42:32,720
first post quantum statistically hiding

1164
00:42:32,720 --> 00:42:34,960
commitments and first post quantum

1165
00:42:34,960 --> 00:42:36,560
succinct arguments under any of the

1166
00:42:36,560 --> 00:42:39,440
above assumptions

1167
00:42:40,000 --> 00:42:42,000
okay so let's get into techniques

1168
00:42:42,000 --> 00:42:44,480
so both work start from the the same

1169
00:42:44,480 --> 00:42:45,440
theorem

1170
00:42:45,440 --> 00:42:48,640
which says that if a function h is post

1171
00:42:48,640 --> 00:42:50,400
quantum collision resistant

1172
00:42:50,400 --> 00:42:52,880
and it's at most polymer polynomial to

1173
00:42:52,880 --> 00:42:54,880
one so no image has more than a

1174
00:42:54,880 --> 00:42:57,119
polynomial number of pre-images

1175
00:42:57,119 --> 00:42:58,640
then we can conclude that h is

1176
00:42:58,640 --> 00:43:00,720
collapsing

1177
00:43:00,720 --> 00:43:01,599
and

1178
00:43:01,599 --> 00:43:03,440
the the proof is uh pretty

1179
00:43:03,440 --> 00:43:06,240
straightforward um so the idea is all we

1180
00:43:06,240 --> 00:43:08,000
all we do is we we

1181
00:43:08,000 --> 00:43:10,480
um so we are given the state from the

1182
00:43:10,480 --> 00:43:12,720
absolute superposition of inputs

1183
00:43:12,720 --> 00:43:15,280
we measure it once

1184
00:43:15,280 --> 00:43:17,520
to get one input

1185
00:43:17,520 --> 00:43:19,280
then we apply the distinguisher the

1186
00:43:19,280 --> 00:43:22,000
hypothetical collapsing distinction we

1187
00:43:22,000 --> 00:43:23,440
measure the result we actually don't

1188
00:43:23,440 --> 00:43:25,839
care what it says we just throw it away

1189
00:43:25,839 --> 00:43:27,520
and then we measure the resulting state

1190
00:43:27,520 --> 00:43:29,839
again and get another x

1191
00:43:29,839 --> 00:43:31,520
and the claim is that this gives us a

1192
00:43:31,520 --> 00:43:32,720
collision with non-negligible

1193
00:43:32,720 --> 00:43:34,160
probability

1194
00:43:34,160 --> 00:43:36,480
uh just to get a sense of why this might

1195
00:43:36,480 --> 00:43:37,839
be the case let's consider the case

1196
00:43:37,839 --> 00:43:39,119
where the function is actually two to

1197
00:43:39,119 --> 00:43:41,119
one

1198
00:43:41,119 --> 00:43:42,720
in the two to one case

1199
00:43:42,720 --> 00:43:44,319
we can uh

1200
00:43:44,319 --> 00:43:46,000
we can more or less project down onto

1201
00:43:46,000 --> 00:43:48,319
two dimensions so suppose x1 and x2 are

1202
00:43:48,319 --> 00:43:50,400
two colliding inputs and the adversary

1203
00:43:50,400 --> 00:43:51,839
gave us

1204
00:43:51,839 --> 00:43:54,880
a superposition of these well okay we

1205
00:43:54,880 --> 00:43:57,520
measure the state we get

1206
00:43:57,520 --> 00:44:00,640
we get you know x1 or x2

1207
00:44:00,640 --> 00:44:02,079
and now the distinguisher the

1208
00:44:02,079 --> 00:44:04,880
distinguishing measurement is some other

1209
00:44:04,880 --> 00:44:06,800
measurements in this two-dimensional

1210
00:44:06,800 --> 00:44:08,400
plane and the fact that it actually

1211
00:44:08,400 --> 00:44:10,319
distinguishes the case where we measured

1212
00:44:10,319 --> 00:44:12,800
the output versus measuring the input

1213
00:44:12,800 --> 00:44:15,040
implies that the the basis for the state

1214
00:44:15,040 --> 00:44:17,839
is somewhat far from the from the basis

1215
00:44:17,839 --> 00:44:19,920
of x1 and x2

1216
00:44:19,920 --> 00:44:21,760
so when we measure the state we get say

1217
00:44:21,760 --> 00:44:24,640
x1 and now we measure the distinguisher

1218
00:44:24,640 --> 00:44:26,720
we're going to move a little bit at

1219
00:44:26,720 --> 00:44:29,119
least a little bit away from x1 and then

1220
00:44:29,119 --> 00:44:31,839
when we measure the the state again

1221
00:44:31,839 --> 00:44:33,680
there's some non-trivial

1222
00:44:33,680 --> 00:44:35,920
uh probability that we'll actually end

1223
00:44:35,920 --> 00:44:37,760
up transitioning to x2 and that gives us

1224
00:44:37,760 --> 00:44:39,280
our collision

1225
00:44:39,280 --> 00:44:41,839
so we show that this generalizes to

1226
00:44:41,839 --> 00:44:43,920
higher dimensions the issue is that the

1227
00:44:43,920 --> 00:44:45,760
loss in the reduction decreases with the

1228
00:44:45,760 --> 00:44:47,119
number of colliding inputs and that's

1229
00:44:47,119 --> 00:44:49,280
why we can only handle a polynomial

1230
00:44:49,280 --> 00:44:50,480
number of

1231
00:44:50,480 --> 00:44:53,280
colliding inputs

1232
00:44:53,520 --> 00:44:56,160
okay so now now both works try to extend

1233
00:44:56,160 --> 00:44:58,240
this result and we extend it in slightly

1234
00:44:58,240 --> 00:44:59,440
different ways

1235
00:44:59,440 --> 00:45:01,200
um so

1236
00:45:01,200 --> 00:45:03,440
what kal and zu show is that

1237
00:45:03,440 --> 00:45:04,800
you can

1238
00:45:04,800 --> 00:45:06,800
take a hash function h that maybe now

1239
00:45:06,800 --> 00:45:09,520
has a much larger input size than its

1240
00:45:09,520 --> 00:45:10,880
output size maybe it's exponentially

1241
00:45:10,880 --> 00:45:12,560
many to one

1242
00:45:12,560 --> 00:45:14,079
but as long as it satisfies this

1243
00:45:14,079 --> 00:45:16,800
regularity condition you can

1244
00:45:16,800 --> 00:45:18,319
compile it into a collapsing hash

1245
00:45:18,319 --> 00:45:19,359
function

1246
00:45:19,359 --> 00:45:20,880
and we show essentially the same thing

1247
00:45:20,880 --> 00:45:23,200
but with this semi-regular notion and

1248
00:45:23,200 --> 00:45:24,480
let's not worry about the difference

1249
00:45:24,480 --> 00:45:26,319
between almost regular semi-regular

1250
00:45:26,319 --> 00:45:28,319
there they're just some way of saying

1251
00:45:28,319 --> 00:45:30,240
that the worst case number of pre-images

1252
00:45:30,240 --> 00:45:32,640
is not too far from expected

1253
00:45:32,640 --> 00:45:33,359
where

1254
00:45:33,359 --> 00:45:35,440
what we mean by not too far unexpected

1255
00:45:35,440 --> 00:45:39,119
differ from in the two definitions

1256
00:45:39,440 --> 00:45:42,160
um so i'll i'll sketch our proof of this

1257
00:45:42,160 --> 00:45:44,319
theorem the the proof in by kalamazoo is

1258
00:45:44,319 --> 00:45:45,440
different

1259
00:45:45,440 --> 00:45:47,200
um so here's our construction it's it's

1260
00:45:47,200 --> 00:45:49,440
a merkle dam guard-like construction the

1261
00:45:49,440 --> 00:45:51,920
difference is being that um we're only

1262
00:45:51,920 --> 00:45:53,520
going to incorporate a single bit of the

1263
00:45:53,520 --> 00:45:56,000
message at any point in time at any

1264
00:45:56,000 --> 00:45:58,079
stage we're not going to be able to you

1265
00:45:58,079 --> 00:46:00,000
know incorporate a security parameter

1266
00:46:00,000 --> 00:46:02,240
number of bits or anything like that

1267
00:46:02,240 --> 00:46:04,400
and also at every stage we interleave

1268
00:46:04,400 --> 00:46:05,839
the applications of the hash function

1269
00:46:05,839 --> 00:46:09,359
with the ky's independent function f

1270
00:46:09,599 --> 00:46:11,440
the very rough intuition for why this

1271
00:46:11,440 --> 00:46:12,400
works

1272
00:46:12,400 --> 00:46:13,760
is that

1273
00:46:13,760 --> 00:46:17,280
we can show that the each stage of this

1274
00:46:17,280 --> 00:46:18,560
application

1275
00:46:18,560 --> 00:46:21,359
is at most polynomially many to one on

1276
00:46:21,359 --> 00:46:23,440
the image from the previous step so we

1277
00:46:23,440 --> 00:46:25,359
can apply our

1278
00:46:25,359 --> 00:46:26,240
um

1279
00:46:26,240 --> 00:46:28,560
our theorem from the previous slide

1280
00:46:28,560 --> 00:46:30,640
to each stage to see that each stage is

1281
00:46:30,640 --> 00:46:31,760
collapsing

1282
00:46:31,760 --> 00:46:33,440
and then it was already proven by prior

1283
00:46:33,440 --> 00:46:35,440
work that merkel dambard preserves

1284
00:46:35,440 --> 00:46:37,200
collapsingness so if we have that each

1285
00:46:37,200 --> 00:46:39,520
stage is collapsing then the overall

1286
00:46:39,520 --> 00:46:43,240
hash function is collapsing

1287
00:46:44,000 --> 00:46:45,920
now there are some technicalities that

1288
00:46:45,920 --> 00:46:47,040
make this

1289
00:46:47,040 --> 00:46:49,520
actually somewhat non-trivial to prove

1290
00:46:49,520 --> 00:46:51,760
um so so one thing is that we in order

1291
00:46:51,760 --> 00:46:53,280
to get the proof to work we need that

1292
00:46:53,280 --> 00:46:55,599
every stage uses its own kos independent

1293
00:46:55,599 --> 00:46:56,960
function

1294
00:46:56,960 --> 00:46:58,400
um and then maybe the more annoying

1295
00:46:58,400 --> 00:47:01,920
thing is that we actually need to

1296
00:47:01,920 --> 00:47:04,400
um we need to not incorporate even a

1297
00:47:04,400 --> 00:47:06,000
single bit to the message at every stage

1298
00:47:06,000 --> 00:47:07,280
in most stages we're actually going to

1299
00:47:07,280 --> 00:47:09,680
incorporate zero

1300
00:47:09,680 --> 00:47:11,680
and only incorporate the next message

1301
00:47:11,680 --> 00:47:13,359
bit occasionally

1302
00:47:13,359 --> 00:47:15,119
roughly the reason we need to do this is

1303
00:47:15,119 --> 00:47:17,040
we're trying to control the image size

1304
00:47:17,040 --> 00:47:19,920
at any given stage and it might be that

1305
00:47:19,920 --> 00:47:21,839
um you know every time you incorporate a

1306
00:47:21,839 --> 00:47:23,280
message a bit you could actually have

1307
00:47:23,280 --> 00:47:25,599
your image size at that stage

1308
00:47:25,599 --> 00:47:27,599
grow by a factor of two and if you had

1309
00:47:27,599 --> 00:47:29,599
too many messages in a row

1310
00:47:29,599 --> 00:47:32,000
maybe you end up getting your image size

1311
00:47:32,000 --> 00:47:33,599
to be way too big and now you won't be

1312
00:47:33,599 --> 00:47:36,000
polynomial to one anymore

1313
00:47:36,000 --> 00:47:37,680
so by inserting these zeros we can show

1314
00:47:37,680 --> 00:47:39,760
that sort of every time you insert a

1315
00:47:39,760 --> 00:47:41,520
zero you decrease the image size a

1316
00:47:41,520 --> 00:47:42,559
little bit

1317
00:47:42,559 --> 00:47:44,319
and then you you make sure to decrease

1318
00:47:44,319 --> 00:47:46,000
it enough that when you when you

1319
00:47:46,000 --> 00:47:47,520
incorporate your next message bit you'll

1320
00:47:47,520 --> 00:47:51,800
find that you doubled the image size

1321
00:47:52,000 --> 00:47:54,319
okay so let's move on to applications so

1322
00:47:54,319 --> 00:47:56,079
the first application is the cis hash

1323
00:47:56,079 --> 00:47:57,520
function

1324
00:47:57,520 --> 00:48:00,000
given here so the inputs are short

1325
00:48:00,000 --> 00:48:01,680
vectors x

1326
00:48:01,680 --> 00:48:03,119
shorts in

1327
00:48:03,119 --> 00:48:05,440
l2 norm and the hash function is

1328
00:48:05,440 --> 00:48:08,400
specified by a random wide matrix a and

1329
00:48:08,400 --> 00:48:10,079
you just evaluate by doing the inner

1330
00:48:10,079 --> 00:48:11,520
product and

1331
00:48:11,520 --> 00:48:14,960
reducing mod q for some appropriate cube

1332
00:48:14,960 --> 00:48:16,720
um so what calendars you showed is that

1333
00:48:16,720 --> 00:48:18,880
the sys hash function is almost regular

1334
00:48:18,880 --> 00:48:21,119
and many parameter settings

1335
00:48:21,119 --> 00:48:22,559
and we know that the cis hash function

1336
00:48:22,559 --> 00:48:25,440
is post-quantum collision resistant

1337
00:48:25,440 --> 00:48:27,599
following from the post-quantum hardness

1338
00:48:27,599 --> 00:48:29,839
of various lattice problems

1339
00:48:29,839 --> 00:48:31,599
so as a result you get

1340
00:48:31,599 --> 00:48:33,839
collapsing hash functions from bias

1341
00:48:33,839 --> 00:48:35,920
problems

1342
00:48:35,920 --> 00:48:38,640
okay so what about lpn hashing so

1343
00:48:38,640 --> 00:48:40,800
superficially lpn hashing looks very

1344
00:48:40,800 --> 00:48:43,040
similar except we've changed the norm so

1345
00:48:43,040 --> 00:48:45,359
now instead of short and l2 norm vectors

1346
00:48:45,359 --> 00:48:47,839
we have sparse vectors as our inputs and

1347
00:48:47,839 --> 00:48:50,000
also everything's mod 2 instead of mod

1348
00:48:50,000 --> 00:48:51,359
mod q

1349
00:48:51,359 --> 00:48:52,640
um

1350
00:48:52,640 --> 00:48:55,440
so it was it was previously shown that

1351
00:48:55,440 --> 00:48:56,240
the

1352
00:48:56,240 --> 00:48:58,960
that this lpn based hash function is

1353
00:48:58,960 --> 00:49:01,440
secure is a post quantum collision or as

1354
00:49:01,440 --> 00:49:03,280
a quantum path is a collision existing

1355
00:49:03,280 --> 00:49:04,720
hash function under

1356
00:49:04,720 --> 00:49:05,920
certain

1357
00:49:05,920 --> 00:49:09,040
lpn parameter regimes

1358
00:49:09,040 --> 00:49:10,960
and

1359
00:49:10,960 --> 00:49:14,559
we show that lpn hashing is semi-regular

1360
00:49:14,559 --> 00:49:15,280
so

1361
00:49:15,280 --> 00:49:16,720
what this allows us to do is then

1362
00:49:16,720 --> 00:49:21,359
compile lpn hashing into a post quantum

1363
00:49:21,359 --> 00:49:24,480
collapsing hash function

1364
00:49:24,480 --> 00:49:26,400
all right what about expander based

1365
00:49:26,400 --> 00:49:28,240
hashing so this was

1366
00:49:28,240 --> 00:49:29,599
introduced by

1367
00:49:29,599 --> 00:49:32,000
charles alter and goran and so here we

1368
00:49:32,000 --> 00:49:33,680
imagine there's some implicitly

1369
00:49:33,680 --> 00:49:35,599
represented exponentially large expander

1370
00:49:35,599 --> 00:49:37,680
graph together with a designated

1371
00:49:37,680 --> 00:49:39,280
starting node

1372
00:49:39,280 --> 00:49:40,480
and what they propose as the hash

1373
00:49:40,480 --> 00:49:42,960
function is you interpret your input

1374
00:49:42,960 --> 00:49:45,440
as describing a non-backtracking lock

1375
00:49:45,440 --> 00:49:47,440
through this graph and you just follow

1376
00:49:47,440 --> 00:49:49,280
the walk and whatever node you end up

1377
00:49:49,280 --> 00:49:52,400
with is your output

1378
00:49:52,960 --> 00:49:54,319
right and

1379
00:49:54,319 --> 00:49:57,280
so the the collision resistance of

1380
00:49:57,280 --> 00:49:59,040
of this hash function

1381
00:49:59,040 --> 00:50:01,680
follows from the hardness of finding

1382
00:50:01,680 --> 00:50:03,760
simple cycles in this graph

1383
00:50:03,760 --> 00:50:05,359
which could be positive this problem

1384
00:50:05,359 --> 00:50:07,040
could be positive hard for things like

1385
00:50:07,040 --> 00:50:08,880
the the graph of

1386
00:50:08,880 --> 00:50:12,400
isogenes over elliptic curves

1387
00:50:12,400 --> 00:50:15,520
so what we observe is that prior work

1388
00:50:15,520 --> 00:50:17,839
already showed that non-backtracking

1389
00:50:17,839 --> 00:50:20,880
locks on expanders will mix

1390
00:50:20,880 --> 00:50:21,920
and

1391
00:50:21,920 --> 00:50:24,000
data just immediately basically

1392
00:50:24,000 --> 00:50:26,480
trivially shows that the this

1393
00:50:26,480 --> 00:50:27,839
expander-based hash function is

1394
00:50:27,839 --> 00:50:30,720
semi-regular so then again plugging into

1395
00:50:30,720 --> 00:50:32,079
our compiler

1396
00:50:32,079 --> 00:50:33,599
we have a

1397
00:50:33,599 --> 00:50:35,680
semi-regular hash function uh collision

1398
00:50:35,680 --> 00:50:37,119
is in hash function we can compile it

1399
00:50:37,119 --> 00:50:40,440
into one that's

1400
00:50:40,720 --> 00:50:42,720
all right and then finally let's talk

1401
00:50:42,720 --> 00:50:45,119
about optimal collision resistance so we

1402
00:50:45,119 --> 00:50:47,280
define optimal collision resistance

1403
00:50:47,280 --> 00:50:49,920
as being any polynomial time adversary

1404
00:50:49,920 --> 00:50:51,280
the probability that the output of

1405
00:50:51,280 --> 00:50:53,440
collision is at most polynomial divided

1406
00:50:53,440 --> 00:50:55,119
by two to the n where n is the bit

1407
00:50:55,119 --> 00:50:58,079
length of the range

1408
00:50:58,079 --> 00:51:00,559
okay and note that um

1409
00:51:00,559 --> 00:51:02,240
you know random oracles for example are

1410
00:51:02,240 --> 00:51:03,760
often collision resistant both

1411
00:51:03,760 --> 00:51:05,839
classically as quantumly for different

1412
00:51:05,839 --> 00:51:07,839
notions of for different values of the

1413
00:51:07,839 --> 00:51:10,160
poem

1414
00:51:10,240 --> 00:51:13,680
so what we show is that if the

1415
00:51:13,680 --> 00:51:16,400
domain is not much bigger than the range

1416
00:51:16,400 --> 00:51:18,240
say you add log bits

1417
00:51:18,240 --> 00:51:19,599
to the domain

1418
00:51:19,599 --> 00:51:22,079
and if h is optimally post-quantum

1419
00:51:22,079 --> 00:51:24,160
collision resistant then h is actually

1420
00:51:24,160 --> 00:51:26,160
also collapsing

1421
00:51:26,160 --> 00:51:27,920
and the proof is

1422
00:51:27,920 --> 00:51:30,559
is not too hard the observation is that

1423
00:51:30,559 --> 00:51:33,520
if you have optimal collision resistance

1424
00:51:33,520 --> 00:51:35,760
what it means is that maybe there do

1425
00:51:35,760 --> 00:51:39,520
exist um x or that have many that

1426
00:51:39,520 --> 00:51:41,359
collide with exponentially many points

1427
00:51:41,359 --> 00:51:42,960
but it's actually hard to find

1428
00:51:42,960 --> 00:51:44,480
because if you could find an x that

1429
00:51:44,480 --> 00:51:46,800
collided with too many inputs you would

1430
00:51:46,800 --> 00:51:48,480
actually be able to break the optimal

1431
00:51:48,480 --> 00:51:50,640
collision resistance

1432
00:51:50,640 --> 00:51:51,680
so

1433
00:51:51,680 --> 00:51:53,359
so it's hard to find x that collide with

1434
00:51:53,359 --> 00:51:55,280
too many inputs and then we can more or

1435
00:51:55,280 --> 00:51:57,040
less use the same analysis as in the

1436
00:51:57,040 --> 00:51:59,040
polynomially mini to one case to

1437
00:51:59,040 --> 00:52:00,559
conclude that the hash function is

1438
00:52:00,559 --> 00:52:03,559
collapsing

1439
00:52:04,240 --> 00:52:06,640
okay um and that that's basically it for

1440
00:52:06,640 --> 00:52:08,880
the talk so um i guess the takeaway from

1441
00:52:08,880 --> 00:52:10,319
this is collapsing is perhaps more

1442
00:52:10,319 --> 00:52:11,839
prevalent than previously bought really

1443
00:52:11,839 --> 00:52:13,680
before all we knew was collapsing from

1444
00:52:13,680 --> 00:52:16,880
lwe or idealized models and here we

1445
00:52:16,880 --> 00:52:18,720
showed a number of new ways

1446
00:52:18,720 --> 00:52:21,520
to build uh collapsing hash functions

1447
00:52:21,520 --> 00:52:24,720
and essentially what we have matches all

1448
00:52:24,720 --> 00:52:25,920
of the

1449
00:52:25,920 --> 00:52:27,200
all of the known post-quantum

1450
00:52:27,200 --> 00:52:29,440
collision-resistant hash function

1451
00:52:29,440 --> 00:52:31,520
feasibility results so any

1452
00:52:31,520 --> 00:52:32,960
most of the assumptions we have that can

1453
00:52:32,960 --> 00:52:36,640
build collision resistance and withstand

1454
00:52:36,640 --> 00:52:39,280
quantum attacks will now also give us

1455
00:52:39,280 --> 00:52:41,119
collapsing hash functions

1456
00:52:41,119 --> 00:52:45,160
and that's it thank you

1457
00:52:50,000 --> 00:52:52,240
thanks for the nice talk are there any

1458
00:52:52,240 --> 00:52:54,720
questions

1459
00:52:56,559 --> 00:52:58,400
okay i don't see any questions here or

1460
00:52:58,400 --> 00:53:03,160
in soon so let's thank the speaker again

1461
00:53:17,200 --> 00:53:19,520
and while they switch the slides

1462
00:53:19,520 --> 00:53:21,200
uh the next paper is called

1463
00:53:21,200 --> 00:53:24,319
statistically sender private ot from lpn

1464
00:53:24,319 --> 00:53:26,559
and derandomization

1465
00:53:26,559 --> 00:53:29,920
by near butansky and superior right side

1466
00:53:29,920 --> 00:53:33,880
and sapir will give the torque

1467
00:53:50,720 --> 00:53:52,079
do you maybe want to full screen this

1468
00:53:52,079 --> 00:53:55,079
sir

1469
00:54:01,040 --> 00:54:04,040
um

1470
00:54:34,160 --> 00:54:36,880
okay hi everyone my name is sophia and

1471
00:54:36,880 --> 00:54:37,839
i'm going to tell you about

1472
00:54:37,839 --> 00:54:39,520
statistically central private oblivious

1473
00:54:39,520 --> 00:54:42,160
transfer form npn and the randomization

1474
00:54:42,160 --> 00:54:43,680
and this is a joint walk with anil

1475
00:54:43,680 --> 00:54:46,399
bensky

1476
00:54:47,359 --> 00:54:50,559
okay so just before i start let me

1477
00:54:50,559 --> 00:54:51,839
let me tell you about the work in a

1478
00:54:51,839 --> 00:54:53,119
nutshell

1479
00:54:53,119 --> 00:54:55,359
so what we the main goal of the work is

1480
00:54:55,359 --> 00:54:57,680
to expand our reach of the learning

1481
00:54:57,680 --> 00:55:00,079
party with noise assumption or lpn in

1482
00:55:00,079 --> 00:55:02,480
short

1483
00:55:03,359 --> 00:55:04,960
and we focus on two methods

1484
00:55:04,960 --> 00:55:06,559
statistically central pipeline limits

1485
00:55:06,559 --> 00:55:07,920
transfer

1486
00:55:07,920 --> 00:55:09,520
which is an oblivious transfer protocol

1487
00:55:09,520 --> 00:55:10,799
where we really take the round

1488
00:55:10,799 --> 00:55:12,240
complexity and the security to the

1489
00:55:12,240 --> 00:55:14,640
extreme

1490
00:55:15,599 --> 00:55:17,760
and the results we achieve is first we

1491
00:55:17,760 --> 00:55:20,960
construct an ss plt protocol

1492
00:55:20,960 --> 00:55:22,559
in the common random string model from

1493
00:55:22,559 --> 00:55:23,680
lpn

1494
00:55:23,680 --> 00:55:26,160
and then we remove the crs using the

1495
00:55:26,160 --> 00:55:28,799
standard the nissan vectors on style the

1496
00:55:28,799 --> 00:55:30,880
randomization assumption

1497
00:55:30,880 --> 00:55:32,960
okay so the talk is going to be divided

1498
00:55:32,960 --> 00:55:35,119
to two parts so in the first part i'm

1499
00:55:35,119 --> 00:55:37,760
just going to give you a brief overview

1500
00:55:37,760 --> 00:55:39,680
of the work and the definitions and then

1501
00:55:39,680 --> 00:55:41,359
i'm going to dive into the construction

1502
00:55:41,359 --> 00:55:43,759
itself

1503
00:55:44,000 --> 00:55:46,079
okay so first of all let me tell you

1504
00:55:46,079 --> 00:55:47,599
about lpn

1505
00:55:47,599 --> 00:55:49,280
so

1506
00:55:49,280 --> 00:55:50,319
npn

1507
00:55:50,319 --> 00:55:51,920
is the problem

1508
00:55:51,920 --> 00:55:52,960
where

1509
00:55:52,960 --> 00:55:54,559
first of all everything is over the

1510
00:55:54,559 --> 00:55:56,640
binary field here

1511
00:55:56,640 --> 00:55:59,760
and we are given a random binary matrix

1512
00:55:59,760 --> 00:56:02,319
a which indicates a random binary and

1513
00:56:02,319 --> 00:56:04,160
linear code

1514
00:56:04,160 --> 00:56:06,400
a is a

1515
00:56:06,400 --> 00:56:08,400
is longer matrix

1516
00:56:08,400 --> 00:56:10,240
and our goal is to distinguish between

1517
00:56:10,240 --> 00:56:12,319
the case of when we are getting a noisy

1518
00:56:12,319 --> 00:56:13,520
codeword

1519
00:56:13,520 --> 00:56:16,319
or just a random vector in the space of

1520
00:56:16,319 --> 00:56:18,640
all codewords

1521
00:56:18,640 --> 00:56:20,480
and the assumption says

1522
00:56:20,480 --> 00:56:22,160
that for every computationally bound

1523
00:56:22,160 --> 00:56:24,480
adversary this pro it's how to

1524
00:56:24,480 --> 00:56:27,040
distinguish between the cases

1525
00:56:27,040 --> 00:56:29,200
so lpn comes

1526
00:56:29,200 --> 00:56:31,680
with a so the noise

1527
00:56:31,680 --> 00:56:35,040
uh of the code words is distributed

1528
00:56:35,040 --> 00:56:36,640
iid bernoulli

1529
00:56:36,640 --> 00:56:38,400
and we have a parameter epsilon which

1530
00:56:38,400 --> 00:56:40,880
indicates the noise rate so as long as

1531
00:56:40,880 --> 00:56:43,520
epsilon is bigger the problem gets

1532
00:56:43,520 --> 00:56:45,839
harder

1533
00:56:46,240 --> 00:56:48,319
okay

1534
00:56:48,319 --> 00:56:51,040
so whenever we talk about lpn uh

1535
00:56:51,040 --> 00:56:53,040
we should keep in mind it's twin problem

1536
00:56:53,040 --> 00:56:55,440
nwe the learning with error the

1537
00:56:55,440 --> 00:56:57,599
assumption which is defined exactly the

1538
00:56:57,599 --> 00:56:58,559
same

1539
00:56:58,559 --> 00:57:00,960
uh only that we walk over a larger field

1540
00:57:00,960 --> 00:57:04,079
of q for some large q

1541
00:57:04,079 --> 00:57:06,559
and the error is distributed and

1542
00:57:06,559 --> 00:57:10,319
discrete gaussian instead of bernoulli

1543
00:57:10,480 --> 00:57:12,160
so both problems are considered to be

1544
00:57:12,160 --> 00:57:14,160
hard and resilient

1545
00:57:14,160 --> 00:57:16,400
to quantum attacks

1546
00:57:16,400 --> 00:57:18,240
but although they are very similar in

1547
00:57:18,240 --> 00:57:20,480
flavor they are very different

1548
00:57:20,480 --> 00:57:23,280
and generally speaking lpn is far behind

1549
00:57:23,280 --> 00:57:26,079
nwe both in terms of applications and in

1550
00:57:26,079 --> 00:57:29,119
terms of known hardness results

1551
00:57:29,119 --> 00:57:31,839
so from lpn we know uh mostly how to

1552
00:57:31,839 --> 00:57:33,839
construct a

1553
00:57:33,839 --> 00:57:35,760
pretty basic primitives like public

1554
00:57:35,760 --> 00:57:38,000
encryption secret key encryptions

1555
00:57:38,000 --> 00:57:41,680
commitments and so on while from nwe we

1556
00:57:41,680 --> 00:57:43,920
know how to extract much more advanced

1557
00:57:43,920 --> 00:57:46,160
primitives like fully homomorphic

1558
00:57:46,160 --> 00:57:47,680
encryption non-interactive zero

1559
00:57:47,680 --> 00:57:51,040
knowledge and much more

1560
00:57:51,040 --> 00:57:54,160
and in terms of awareness results

1561
00:57:54,160 --> 00:57:55,680
we know how to

1562
00:57:55,680 --> 00:57:57,280
prove

1563
00:57:57,280 --> 00:57:59,599
worst case to average case reductions

1564
00:57:59,599 --> 00:58:01,839
for interesting noise

1565
00:58:01,839 --> 00:58:04,799
for interesting parameters of the nwe

1566
00:58:04,799 --> 00:58:05,839
problem

1567
00:58:05,839 --> 00:58:08,400
and from lpn we or we almost know

1568
00:58:08,400 --> 00:58:11,200
nothing actually

1569
00:58:11,440 --> 00:58:14,400
uh so why do we still uh i want to

1570
00:58:14,400 --> 00:58:16,720
stick with with lp why do we answer

1571
00:58:16,720 --> 00:58:19,119
sorry so why do we still care about lpn

1572
00:58:19,119 --> 00:58:22,319
and not just want to stick with lwe so

1573
00:58:22,319 --> 00:58:24,720
first of all a lp hand has a very high

1574
00:58:24,720 --> 00:58:28,240
potential efficiency because it only

1575
00:58:28,240 --> 00:58:31,040
contains simple bit operations

1576
00:58:31,040 --> 00:58:33,440
and also of course because of robustness

1577
00:58:33,440 --> 00:58:36,640
we want to base crypto on as many

1578
00:58:36,640 --> 00:58:38,640
assumptions as possible

1579
00:58:38,640 --> 00:58:41,760
and lpn and nwe although they are

1580
00:58:41,760 --> 00:58:44,640
very similar they are not comparable to

1581
00:58:44,640 --> 00:58:46,480
each other and they are just different

1582
00:58:46,480 --> 00:58:48,799
assumptions

1583
00:58:48,799 --> 00:58:51,280
and also of course theoretical uh the

1584
00:58:51,280 --> 00:58:54,799
problem of lpn is related to

1585
00:58:54,799 --> 00:58:57,520
the very long static problem of decoding

1586
00:58:57,520 --> 00:58:59,760
random binary

1587
00:58:59,760 --> 00:59:01,280
linear codes

1588
00:59:01,280 --> 00:59:03,599
which is very interesting

1589
00:59:03,599 --> 00:59:06,960
and we want to understand it

1590
00:59:07,440 --> 00:59:10,000
okay so the lpn research continues uh

1591
00:59:10,000 --> 00:59:11,599
both in terms of applications and

1592
00:59:11,599 --> 00:59:13,599
harness results and our main

1593
00:59:13,599 --> 00:59:15,760
contribution is in the applications part

1594
00:59:15,760 --> 00:59:17,119
where we build

1595
00:59:17,119 --> 00:59:18,960
the first statistically central private

1596
00:59:18,960 --> 00:59:21,040
oblivious transfer from the lpn

1597
00:59:21,040 --> 00:59:22,559
assumption and an additional

1598
00:59:22,559 --> 00:59:25,680
randomization assumption

1599
00:59:25,839 --> 00:59:27,359
okay so let me tell you about oblivious

1600
00:59:27,359 --> 00:59:28,640
transfer

1601
00:59:28,640 --> 00:59:30,160
so oblivious transfer protocol is a

1602
00:59:30,160 --> 00:59:31,680
really fundamental protocol in a

1603
00:59:31,680 --> 00:59:32,960
cryptography

1604
00:59:32,960 --> 00:59:35,119
and it consists of a two parties the

1605
00:59:35,119 --> 00:59:36,880
receiver and the sender

1606
00:59:36,880 --> 00:59:39,280
and the receiver has a choice bit c and

1607
00:59:39,280 --> 00:59:42,160
the sender has two messages m0 and m1

1608
00:59:42,160 --> 00:59:44,160
and the common goal of two parties is to

1609
00:59:44,160 --> 00:59:46,160
let the receiver learn the message of

1610
00:59:46,160 --> 00:59:49,119
its choice emcee

1611
00:59:49,119 --> 00:59:52,160
we also require two s security and

1612
00:59:52,160 --> 00:59:54,079
guarantees and they are that the center

1613
00:59:54,079 --> 00:59:57,520
doesn't learn the bit of the receiver c

1614
00:59:57,520 --> 00:59:59,359
while the receiver doesn't know the and

1615
00:59:59,359 --> 01:00:01,119
the other message of the

1616
01:00:01,119 --> 01:00:03,920
sender m1 minus c

1617
01:00:03,920 --> 01:00:05,280
so

1618
01:00:05,280 --> 01:00:08,720
as most of you know this um

1619
01:00:08,720 --> 01:00:10,559
protocol is really basic and it's

1620
01:00:10,559 --> 01:00:13,119
complete for multiple computation and we

1621
01:00:13,119 --> 01:00:15,359
are interested in making it the best

1622
01:00:15,359 --> 01:00:17,520
possible in all features of interest

1623
01:00:17,520 --> 01:00:20,240
such as around complexity security level

1624
01:00:20,240 --> 01:00:23,599
and so on

1625
01:00:23,599 --> 01:00:26,000
okay so in this talk we focus on

1626
01:00:26,000 --> 01:00:27,520
statistically standard private oblivious

1627
01:00:27,520 --> 01:00:28,559
transfer

1628
01:00:28,559 --> 01:00:31,119
or ss plt in short

1629
01:00:31,119 --> 01:00:33,520
so this is a an oblivious transfer

1630
01:00:33,520 --> 01:00:35,520
protocol where we require the minimum

1631
01:00:35,520 --> 01:00:37,760
around complexity of only two messages

1632
01:00:37,760 --> 01:00:39,200
one message from the receivable to the

1633
01:00:39,200 --> 01:00:41,359
sec to the sender and the second message

1634
01:00:41,359 --> 01:00:43,920
from the center to the receiver

1635
01:00:43,920 --> 01:00:45,599
we require computational receiver

1636
01:00:45,599 --> 01:00:47,839
security meaning that the choice bit of

1637
01:00:47,839 --> 01:00:50,160
the receiver is kept hidden from any

1638
01:00:50,160 --> 01:00:53,200
computationally bounded sender

1639
01:00:53,200 --> 01:00:56,240
and also statistically center security

1640
01:00:56,240 --> 01:00:57,359
meaning that

1641
01:00:57,359 --> 01:01:00,160
every any receiver cannot learn the

1642
01:01:00,160 --> 01:01:02,000
other message of the sender even if the

1643
01:01:02,000 --> 01:01:04,640
receiver is unbounded okay so formally

1644
01:01:04,640 --> 01:01:05,920
it means that the first message of the

1645
01:01:05,920 --> 01:01:08,079
receiver fixes a

1646
01:01:08,079 --> 01:01:11,839
message that it won't be able to learn

1647
01:01:12,160 --> 01:01:13,839
okay so we are really taking on

1648
01:01:13,839 --> 01:01:15,839
complexity and security to the extreme

1649
01:01:15,839 --> 01:01:17,200
because it's really the minimum around

1650
01:01:17,200 --> 01:01:18,400
complexity

1651
01:01:18,400 --> 01:01:20,319
and with only two messages we cannot

1652
01:01:20,319 --> 01:01:23,119
hope for a statistical receiver security

1653
01:01:23,119 --> 01:01:24,720
so this is really the best we could hope

1654
01:01:24,720 --> 01:01:26,880
for

1655
01:01:26,880 --> 01:01:29,440
and uh okay so this this is an oblivious

1656
01:01:29,440 --> 01:01:31,839
transfer protocol which is very short in

1657
01:01:31,839 --> 01:01:34,160
their own complexity and very secure

1658
01:01:34,160 --> 01:01:35,680
and therefore it's not surprising it

1659
01:01:35,680 --> 01:01:37,760
found many applications

1660
01:01:37,760 --> 01:01:39,440
in the literature and then there are

1661
01:01:39,440 --> 01:01:42,480
many examples here

1662
01:01:42,720 --> 01:01:44,880
so a bit about firewall

1663
01:01:44,880 --> 01:01:47,520
so up until recently we only know how to

1664
01:01:47,520 --> 01:01:49,760
construct ss30

1665
01:01:49,760 --> 01:01:51,839
from number theoretic assumptions which

1666
01:01:51,839 --> 01:01:53,839
are breakable

1667
01:01:53,839 --> 01:01:56,640
and quantum computers

1668
01:01:56,640 --> 01:01:58,960
and there are a

1669
01:01:58,960 --> 01:02:00,640
post quantum

1670
01:02:00,640 --> 01:02:03,359
constructions of ssp

1671
01:02:03,359 --> 01:02:06,000
that were constructed pretty recently

1672
01:02:06,000 --> 01:02:09,839
and all of them are from lwe

1673
01:02:10,960 --> 01:02:12,559
and what we know

1674
01:02:12,559 --> 01:02:14,720
from lpn is how to construct an

1675
01:02:14,720 --> 01:02:15,839
oblivious transfer which is

1676
01:02:15,839 --> 01:02:17,200
computationally

1677
01:02:17,200 --> 01:02:19,599
secure in the common reference training

1678
01:02:19,599 --> 01:02:21,839
model

1679
01:02:22,079 --> 01:02:24,160
okay so let me again uh

1680
01:02:24,160 --> 01:02:26,559
repeat the results that we get

1681
01:02:26,559 --> 01:02:28,799
so again we construct

1682
01:02:28,799 --> 01:02:30,319
the first two methods statistically

1683
01:02:30,319 --> 01:02:32,559
sending private oblivious transfer

1684
01:02:32,559 --> 01:02:34,880
form lpn in the common random string

1685
01:02:34,880 --> 01:02:36,240
model

1686
01:02:36,240 --> 01:02:37,760
and then we show that we can actually

1687
01:02:37,760 --> 01:02:39,359
remove the series

1688
01:02:39,359 --> 01:02:43,359
using the randomization technique

1689
01:02:44,160 --> 01:02:45,680
okay so there is a caveat to a work

1690
01:02:45,680 --> 01:02:47,520
which which we should mention and it is

1691
01:02:47,520 --> 01:02:50,160
that we rely on the so called the

1692
01:02:50,160 --> 01:02:52,720
lpn in the low noise regime meaning that

1693
01:02:52,720 --> 01:02:55,039
it's breakable in quasi-polynomial time

1694
01:02:55,039 --> 01:02:56,640
so it could be viewed more as a

1695
01:02:56,640 --> 01:02:58,640
feasibility result that we can construct

1696
01:02:58,640 --> 01:03:02,520
the spirit from npm

1697
01:03:02,880 --> 01:03:04,160
but we should keep in mind that there

1698
01:03:04,160 --> 01:03:05,920
are also other basic primitives which

1699
01:03:05,920 --> 01:03:08,640
are only and on how to construct from

1700
01:03:08,640 --> 01:03:11,280
melbourne in this low noise regime

1701
01:03:11,280 --> 01:03:13,280
such as collision-resistant hash

1702
01:03:13,280 --> 01:03:15,200
functions

1703
01:03:15,200 --> 01:03:17,440
uh and also there is a potential

1704
01:03:17,440 --> 01:03:19,680
complexity barrier here

1705
01:03:19,680 --> 01:03:23,359
so right now uh and we know okay so lp

1706
01:03:23,359 --> 01:03:25,680
and epsilon if okay sorry if lp and

1707
01:03:25,680 --> 01:03:28,160
epsilon implies ss plt

1708
01:03:28,160 --> 01:03:30,799
then it means that lpn epsilon

1709
01:03:30,799 --> 01:03:33,839
is breakable in sdk

1710
01:03:33,839 --> 01:03:36,880
but right now we only know that uh lpn

1711
01:03:36,880 --> 01:03:38,720
we in the low noise regime is breakable

1712
01:03:38,720 --> 01:03:39,839
in sdk

1713
01:03:39,839 --> 01:03:41,200
so it doesn't mean that it's not

1714
01:03:41,200 --> 01:03:44,319
possible to to construct to achieve

1715
01:03:44,319 --> 01:03:46,640
experience from lpn with higher noise

1716
01:03:46,640 --> 01:03:49,280
but it means that uh it could be harder

1717
01:03:49,280 --> 01:03:52,160
to construct

1718
01:03:52,160 --> 01:03:54,480
such a

1719
01:03:54,480 --> 01:03:55,359
such

1720
01:03:55,359 --> 01:03:59,440
ss plt from lpn with higher noise um

1721
01:03:59,440 --> 01:04:01,119
it might be harder and it would break

1722
01:04:01,119 --> 01:04:02,400
the limit of what we know about the

1723
01:04:02,400 --> 01:04:05,039
complexity of lpn of course it's a very

1724
01:04:05,039 --> 01:04:08,799
interesting question raises up here

1725
01:04:08,880 --> 01:04:12,799
okay so this was the end of the first

1726
01:04:12,799 --> 01:04:15,520
the first part of the talk and now let

1727
01:04:15,520 --> 01:04:17,920
me dive into the actual construction and

1728
01:04:17,920 --> 01:04:19,440
we're going to be a bit more technical

1729
01:04:19,440 --> 01:04:21,680
here

1730
01:04:22,000 --> 01:04:23,119
okay so

1731
01:04:23,119 --> 01:04:24,839
we are starting with the receiver at the

1732
01:04:24,839 --> 01:04:29,200
center and the crs is going to be

1733
01:04:29,200 --> 01:04:31,520
is going to consist of a long matrix a

1734
01:04:31,520 --> 01:04:33,839
and a random vector v over the binary

1735
01:04:33,839 --> 01:04:36,319
field of course

1736
01:04:36,319 --> 01:04:39,200
and the receiver is going to sample

1737
01:04:39,200 --> 01:04:41,680
according to the lpn assumption

1738
01:04:41,680 --> 01:04:44,160
s and e and it's going to calculate v 0

1739
01:04:44,160 --> 01:04:46,799
which is going to be equal a s plus e

1740
01:04:46,799 --> 01:04:49,839
plus c times v

1741
01:04:50,240 --> 01:04:52,079
and it's going to send it to the center

1742
01:04:52,079 --> 01:04:54,640
now the sender is going to

1743
01:04:54,640 --> 01:04:57,920
set v1 to be the sum of v plus v0

1744
01:04:57,920 --> 01:05:00,960
v from the crs

1745
01:05:00,960 --> 01:05:03,839
and it's going to sample two vectors x0

1746
01:05:03,839 --> 01:05:05,680
and x1 according to some sparse

1747
01:05:05,680 --> 01:05:07,680
distribution here

1748
01:05:07,680 --> 01:05:10,160
and it's going to send for each bit it's

1749
01:05:10,160 --> 01:05:12,960
sending x transposed v plus m

1750
01:05:12,960 --> 01:05:15,119
and an additional information in the

1751
01:05:15,119 --> 01:05:18,720
term of x transpose times a

1752
01:05:18,880 --> 01:05:21,119
and then the receiver for a choice bit c

1753
01:05:21,119 --> 01:05:24,319
it outputs the relevant first

1754
01:05:24,319 --> 01:05:26,400
a part of the message from the sender

1755
01:05:26,400 --> 01:05:29,680
minus the second part

1756
01:05:29,680 --> 01:05:33,359
multiplied by the secret s

1757
01:05:33,359 --> 01:05:34,880
okay so why this

1758
01:05:34,880 --> 01:05:37,520
this should work so let's uh first um

1759
01:05:37,520 --> 01:05:39,680
talk about correctness

1760
01:05:39,680 --> 01:05:41,839
so note that vc

1761
01:05:41,839 --> 01:05:43,440
when this when the receiver and the

1762
01:05:43,440 --> 01:05:44,880
center are

1763
01:05:44,880 --> 01:05:48,160
honest then vc is just equal s plus e

1764
01:05:48,160 --> 01:05:50,079
and therefore the expression the

1765
01:05:50,079 --> 01:05:52,640
receiver outputs it just equals simple

1766
01:05:52,640 --> 01:05:54,720
calculation shows that it equals x

1767
01:05:54,720 --> 01:05:56,720
transpose a plus m c

1768
01:05:56,720 --> 01:05:59,440
and because both e and x are going to be

1769
01:05:59,440 --> 01:06:00,799
sparse enough

1770
01:06:00,799 --> 01:06:02,160
we are going to make sure that x

1771
01:06:02,160 --> 01:06:04,880
transpose times e is going to be equal

1772
01:06:04,880 --> 01:06:07,920
to zero with high probability

1773
01:06:07,920 --> 01:06:09,520
okay

1774
01:06:09,520 --> 01:06:12,000
the reciprocal privacy follows directly

1775
01:06:12,000 --> 01:06:14,160
from the lpn assumptions because

1776
01:06:14,160 --> 01:06:16,319
assumption because as plus e looks

1777
01:06:16,319 --> 01:06:19,119
random to any computationally bounded

1778
01:06:19,119 --> 01:06:21,599
sender so it completely hides the choice

1779
01:06:21,599 --> 01:06:24,799
bit of the receiver c

1780
01:06:24,880 --> 01:06:25,680
and

1781
01:06:25,680 --> 01:06:28,400
and uh regarding sender privacy

1782
01:06:28,400 --> 01:06:31,119
okay so first let's uh consider the case

1783
01:06:31,119 --> 01:06:35,280
of semi-honest receiver just for warm-up

1784
01:06:35,280 --> 01:06:36,480
so note that

1785
01:06:36,480 --> 01:06:38,559
v one minus c

1786
01:06:38,559 --> 01:06:41,200
equals a s plus e plus v because how the

1787
01:06:41,200 --> 01:06:42,720
center

1788
01:06:42,720 --> 01:06:45,280
a sets a v one and v zero and the

1789
01:06:45,280 --> 01:06:47,520
receiver here is honest

1790
01:06:47,520 --> 01:06:50,319
and therefore the the expression that

1791
01:06:50,319 --> 01:06:51,839
contains the second message of the

1792
01:06:51,839 --> 01:06:54,160
center is going to look like it's going

1793
01:06:54,160 --> 01:06:56,240
to look like the expression written down

1794
01:06:56,240 --> 01:06:59,520
here it's x transpose times v plus m1

1795
01:06:59,520 --> 01:07:01,839
minus c plus plus something that is

1796
01:07:01,839 --> 01:07:05,119
independent of v

1797
01:07:05,119 --> 01:07:06,079
and

1798
01:07:06,079 --> 01:07:08,799
because v is an inner product extra

1799
01:07:08,799 --> 01:07:10,400
extract or seed

1800
01:07:10,400 --> 01:07:12,400
we get that x transpose times v looks

1801
01:07:12,400 --> 01:07:14,079
random even given the leakage x

1802
01:07:14,079 --> 01:07:16,160
transpose a and we are going to make

1803
01:07:16,160 --> 01:07:18,960
sure that this distribution 3 also has

1804
01:07:18,960 --> 01:07:20,880
enough entropy

1805
01:07:20,880 --> 01:07:23,039
to to make this claim

1806
01:07:23,039 --> 01:07:25,520
okay so we are going to

1807
01:07:25,520 --> 01:07:26,640
so he

1808
01:07:26,640 --> 01:07:29,039
has to have enough entropy and it has to

1809
01:07:29,039 --> 01:07:31,599
be sparse enough

1810
01:07:31,599 --> 01:07:35,200
and this is why um

1811
01:07:35,200 --> 01:07:37,359
the protocol is uh this is like an

1812
01:07:37,359 --> 01:07:40,960
intuition why it should be correct

1813
01:07:40,960 --> 01:07:43,599
and i want to mention that

1814
01:07:43,599 --> 01:07:46,079
already here in the semi-honest case

1815
01:07:46,079 --> 01:07:49,039
uh we receive the bound on epsilon which

1816
01:07:49,039 --> 01:07:50,240
is a

1817
01:07:50,240 --> 01:07:52,960
going to be equal order of log n and

1818
01:07:52,960 --> 01:07:54,880
square divided by n and the calculation

1819
01:07:54,880 --> 01:07:56,559
shows that this is really

1820
01:07:56,559 --> 01:07:59,520
what happens here

1821
01:07:59,920 --> 01:08:02,640
okay so really the the construction

1822
01:08:02,640 --> 01:08:05,680
itself is pretty uh simple but the

1823
01:08:05,680 --> 01:08:07,920
challenge here is when we wanted to

1824
01:08:07,920 --> 01:08:08,480
prove that

1825
01:08:08,480 --> 01:08:09,680
[Music]

1826
01:08:09,680 --> 01:08:11,680
that the ssp

1827
01:08:11,680 --> 01:08:13,119
property

1828
01:08:13,119 --> 01:08:16,319
is is correct in the malicious receiver

1829
01:08:16,319 --> 01:08:18,319
case

1830
01:08:18,319 --> 01:08:20,960
so where is the challenge here so now

1831
01:08:20,960 --> 01:08:24,399
the receiver may choose v0 adaptively

1832
01:08:24,399 --> 01:08:26,560
and depending on the seed v

1833
01:08:26,560 --> 01:08:30,000
and therefore the extractor argument

1834
01:08:30,000 --> 01:08:32,880
no longer works

1835
01:08:33,198 --> 01:08:35,359
so the okay so the question rises up

1836
01:08:35,359 --> 01:08:38,238
here is does any adaptively split of v

1837
01:08:38,238 --> 01:08:40,479
to two seeds

1838
01:08:40,479 --> 01:08:43,120
v equals v zero plus v one contains a

1839
01:08:43,120 --> 01:08:44,799
good extractor v i

1840
01:08:44,799 --> 01:08:46,560
and this is because when the receiver

1841
01:08:46,560 --> 01:08:48,640
fixes v zero it actually fixes such

1842
01:08:48,640 --> 01:08:51,359
splits because remember that v equals v

1843
01:08:51,359 --> 01:08:53,679
0 plus v 1.

1844
01:08:53,679 --> 01:08:55,120
okay and we want to

1845
01:08:55,120 --> 01:08:56,960
what we want to argue is that one of the

1846
01:08:56,960 --> 01:09:01,198
messages still stays hidden

1847
01:09:01,759 --> 01:09:02,560
but

1848
01:09:02,560 --> 01:09:04,238
it turns out that the inner product

1849
01:09:04,238 --> 01:09:06,158
extractor is generally not resilient to

1850
01:09:06,158 --> 01:09:08,640
such linear quantum attacks we also show

1851
01:09:08,640 --> 01:09:10,799
a counter example in the paper

1852
01:09:10,799 --> 01:09:12,880
and therefore just arguing that he has

1853
01:09:12,880 --> 01:09:16,719
enough entropy is not going to be enough

1854
01:09:17,600 --> 01:09:19,920
but fortunately in our case we have a

1855
01:09:19,920 --> 01:09:22,719
specific leakage form x-transpose a

1856
01:09:22,719 --> 01:09:26,239
and also we can choose the source

1857
01:09:26,960 --> 01:09:29,759
okay so we choose 3 in the following way

1858
01:09:29,759 --> 01:09:32,719
so here is going to be the sum of k

1859
01:09:32,719 --> 01:09:36,560
independent unit vectors

1860
01:09:36,960 --> 01:09:38,000
which

1861
01:09:38,000 --> 01:09:39,520
we and we choose here like that because

1862
01:09:39,520 --> 01:09:41,120
it behaves nicely with the fourier

1863
01:09:41,120 --> 01:09:42,560
transform

1864
01:09:42,560 --> 01:09:46,839
and we summarize n divided by log n

1865
01:09:46,839 --> 01:09:49,759
vectors okay and after choosing three

1866
01:09:49,759 --> 01:09:52,319
what we want to show formally

1867
01:09:52,319 --> 01:09:55,840
is that without probability over the crs

1868
01:09:55,840 --> 01:09:58,480
for every split of v into two parts v

1869
01:09:58,480 --> 01:10:00,960
equals v zero plus v one there must

1870
01:10:00,960 --> 01:10:03,600
exist some vi among them

1871
01:10:03,600 --> 01:10:05,440
such that extra suppose

1872
01:10:05,440 --> 01:10:07,440
the eyes still looks random even given

1873
01:10:07,440 --> 01:10:10,879
the leakage x transpose a

1874
01:10:11,679 --> 01:10:12,960
okay

1875
01:10:12,960 --> 01:10:17,360
but how are we going to prove this

1876
01:10:17,360 --> 01:10:19,679
so i'm going to give you a

1877
01:10:19,679 --> 01:10:21,360
sketch of the proof

1878
01:10:21,360 --> 01:10:22,640
all the details are of course in the

1879
01:10:22,640 --> 01:10:25,040
paper

1880
01:10:25,360 --> 01:10:26,400
so

1881
01:10:26,400 --> 01:10:28,080
again this is just a reminder of our

1882
01:10:28,080 --> 01:10:29,199
goal here

1883
01:10:29,199 --> 01:10:31,040
so what we prove

1884
01:10:31,040 --> 01:10:33,360
in the paper is the following lemma and

1885
01:10:33,360 --> 01:10:35,600
it says that for every matrix a and

1886
01:10:35,600 --> 01:10:36,960
vector w

1887
01:10:36,960 --> 01:10:38,640
the statistical distance between these

1888
01:10:38,640 --> 01:10:41,199
two distributions is actually bounded by

1889
01:10:41,199 --> 01:10:43,120
how balanced are all the vectors in the

1890
01:10:43,120 --> 01:10:45,040
both set a plus w

1891
01:10:45,040 --> 01:10:47,040
and we use a fourier transform to prove

1892
01:10:47,040 --> 01:10:48,880
this

1893
01:10:48,880 --> 01:10:51,440
there is also a formal expression

1894
01:10:51,440 --> 01:10:53,920
for this state but i'm not going to dive

1895
01:10:53,920 --> 01:10:56,239
into the formal expression here

1896
01:10:56,239 --> 01:10:58,080
but i'm just going to try and give you

1897
01:10:58,080 --> 01:11:01,760
some intuition of why this maybe should

1898
01:11:01,760 --> 01:11:04,320
be true

1899
01:11:04,400 --> 01:11:07,360
so let's ask ourselves the other

1900
01:11:07,360 --> 01:11:10,400
question and it is when x transpose w is

1901
01:11:10,400 --> 01:11:13,600
actually predictable given x transpose a

1902
01:11:13,600 --> 01:11:14,960
so note that if

1903
01:11:14,960 --> 01:11:16,000
if

1904
01:11:16,000 --> 01:11:18,960
by chance there exists some vector some

1905
01:11:18,960 --> 01:11:21,679
small vector in in hemingway in the

1906
01:11:21,679 --> 01:11:23,760
coset a plus w

1907
01:11:23,760 --> 01:11:25,360
then x transpose a is actually

1908
01:11:25,360 --> 01:11:28,480
predictable given x sorry suppose w is

1909
01:11:28,480 --> 01:11:30,960
actually predictable given x transpose a

1910
01:11:30,960 --> 01:11:33,840
because x transpose times e star here

1911
01:11:33,840 --> 01:11:36,159
which is a low hemming weight vector is

1912
01:11:36,159 --> 01:11:38,880
usually equal to zero

1913
01:11:38,880 --> 01:11:42,000
okay and also if it happens that there

1914
01:11:42,000 --> 01:11:44,400
exists some large vector in the coset

1915
01:11:44,400 --> 01:11:46,719
then we can still predict x transpose w

1916
01:11:46,719 --> 01:11:49,199
and this is because the way we chose 3

1917
01:11:49,199 --> 01:11:51,679
which implies that x transpose time the

1918
01:11:51,679 --> 01:11:53,840
vectors of all ones

1919
01:11:53,840 --> 01:11:55,920
always equals to k modulo 2. this is

1920
01:11:55,920 --> 01:11:57,520
just also a simple calculation that

1921
01:11:57,520 --> 01:11:58,800
shows this

1922
01:11:58,800 --> 01:12:02,000
and therefore we we

1923
01:12:02,000 --> 01:12:04,080
these two observations tell us that we

1924
01:12:04,080 --> 01:12:06,080
must have that all the vectors in the

1925
01:12:06,080 --> 01:12:08,000
coset are balanced to have good

1926
01:12:08,000 --> 01:12:09,280
statistical distance between the

1927
01:12:09,280 --> 01:12:10,640
distributions

1928
01:12:10,640 --> 01:12:12,320
uh and dilemma shows that this is

1929
01:12:12,320 --> 01:12:13,600
actually

1930
01:12:13,600 --> 01:12:15,920
enough

1931
01:12:16,719 --> 01:12:18,080
okay

1932
01:12:18,080 --> 01:12:20,880
so now our goal becomes to show that

1933
01:12:20,880 --> 01:12:23,199
with without probability over the crs we

1934
01:12:23,199 --> 01:12:25,440
can vent for every split of v we can

1935
01:12:25,440 --> 01:12:28,159
find some vector for which the coset a

1936
01:12:28,159 --> 01:12:29,600
plus v i

1937
01:12:29,600 --> 01:12:31,360
is actually well balanced meaning that

1938
01:12:31,360 --> 01:12:33,360
all the vectors in the coset are well

1939
01:12:33,360 --> 01:12:35,440
balanced

1940
01:12:35,440 --> 01:12:38,800
and we prove this using a case analysis

1941
01:12:38,800 --> 01:12:40,480
and also we prove the following two

1942
01:12:40,480 --> 01:12:41,679
lemmas

1943
01:12:41,679 --> 01:12:43,360
so first we prove that with high

1944
01:12:43,360 --> 01:12:45,760
probability a is what we call the thinly

1945
01:12:45,760 --> 01:12:49,040
balanced meaning that for any w

1946
01:12:49,040 --> 01:12:51,360
in the coset a plus w most members are

1947
01:12:51,360 --> 01:12:53,840
well balanced so using this lemma we

1948
01:12:53,840 --> 01:12:57,520
control most of the balance parameters

1949
01:12:57,520 --> 01:13:00,080
but still we have maybe some

1950
01:13:00,080 --> 01:13:01,760
vectors which we don't

1951
01:13:01,760 --> 01:13:05,120
know what's going on with them

1952
01:13:05,120 --> 01:13:06,960
but for this we prove the second lemma

1953
01:13:06,960 --> 01:13:08,640
which mean which states that with a

1954
01:13:08,640 --> 01:13:11,199
probability v is what we call a balanced

1955
01:13:11,199 --> 01:13:13,360
four sums meaning that for every split

1956
01:13:13,360 --> 01:13:14,640
of v

1957
01:13:14,640 --> 01:13:16,000
e to two

1958
01:13:16,000 --> 01:13:18,719
seeds v equals v 0 plus v 1 there must

1959
01:13:18,719 --> 01:13:21,199
exist v i among them such that in the

1960
01:13:21,199 --> 01:13:24,000
coset a plus v i all the members are

1961
01:13:24,000 --> 01:13:25,920
somewhat balanced

1962
01:13:25,920 --> 01:13:28,320
so combining these two

1963
01:13:28,320 --> 01:13:31,199
bounds together we get a total bound on

1964
01:13:31,199 --> 01:13:33,199
the on the whole the all vectors in the

1965
01:13:33,199 --> 01:13:36,080
concept and it turns out to be uh just

1966
01:13:36,080 --> 01:13:38,400
enough

1967
01:13:38,480 --> 01:13:40,480
okay so this is a

1968
01:13:40,480 --> 01:13:43,920
this is a the end of how we prove

1969
01:13:43,920 --> 01:13:48,159
the statistical central privacy property

1970
01:13:48,159 --> 01:13:50,159
and now let me

1971
01:13:50,159 --> 01:13:52,880
tell you about a few words about how are

1972
01:13:52,880 --> 01:13:55,199
we going to remove the common random

1973
01:13:55,199 --> 01:13:57,840
string here

1974
01:13:57,840 --> 01:14:00,400
okay so we have the ss plt protocol

1975
01:14:00,400 --> 01:14:02,880
which we just constructed

1976
01:14:02,880 --> 01:14:04,400
and first we are going to use a

1977
01:14:04,400 --> 01:14:07,440
technique by dwarkend and all of reverse

1978
01:14:07,440 --> 01:14:09,040
randomization

1979
01:14:09,040 --> 01:14:11,040
and to get

1980
01:14:11,040 --> 01:14:11,840
some

1981
01:14:11,840 --> 01:14:13,360
middle results

1982
01:14:13,360 --> 01:14:15,600
of a protocol where the receiver

1983
01:14:15,600 --> 01:14:18,000
security holds for every crs even if

1984
01:14:18,000 --> 01:14:21,679
chosen by a malicious sender for example

1985
01:14:21,679 --> 01:14:24,159
and then we show how to transform the

1986
01:14:24,159 --> 01:14:26,560
the emitted results the middle result to

1987
01:14:26,560 --> 01:14:27,360
the

1988
01:14:27,360 --> 01:14:29,280
to the construction in the plane model

1989
01:14:29,280 --> 01:14:30,800
of ssplt

1990
01:14:30,800 --> 01:14:32,159
and here we

1991
01:14:32,159 --> 01:14:33,920
randomize the crs

1992
01:14:33,920 --> 01:14:37,080
uh using a prg that fools and

1993
01:14:37,080 --> 01:14:39,440
non-deterministic cells

1994
01:14:39,440 --> 01:14:41,760
which is known to be applied by standard

1995
01:14:41,760 --> 01:14:43,679
and disinvictus on style worst case

1996
01:14:43,679 --> 01:14:46,000
assumptions

1997
01:14:46,000 --> 01:14:48,320
so the challenge here is that we need an

1998
01:14:48,320 --> 01:14:50,640
algebraic characterization and it

1999
01:14:50,640 --> 01:14:52,640
captures what we call the bet crss

2000
01:14:52,640 --> 01:14:55,520
meaning the crss they don't have the ssp

2001
01:14:55,520 --> 01:14:56,640
property

2002
01:14:56,640 --> 01:15:00,239
so maybe this set of bit crss

2003
01:15:00,239 --> 01:15:02,000
cannot be

2004
01:15:02,000 --> 01:15:05,360
efficiently certified but maybe what we

2005
01:15:05,360 --> 01:15:07,520
show in the paper is that we can find a

2006
01:15:07,520 --> 01:15:10,640
bigger set that is still not too big

2007
01:15:10,640 --> 01:15:12,640
that is certifiable and it contains all

2008
01:15:12,640 --> 01:15:14,719
the bet crs

2009
01:15:14,719 --> 01:15:16,800
okay and then we use the prg and the

2010
01:15:16,800 --> 01:15:19,120
peer and the

2011
01:15:19,120 --> 01:15:20,880
and we we

2012
01:15:20,880 --> 01:15:23,360
we have the proof that the prg contains

2013
01:15:23,360 --> 01:15:25,199
a lot of good crss

2014
01:15:25,199 --> 01:15:26,960
and therefore if two the two parties

2015
01:15:26,960 --> 01:15:29,840
execute this pseudo-random generator and

2016
01:15:29,840 --> 01:15:32,480
use the outputs as common as the series

2017
01:15:32,480 --> 01:15:33,760
says

2018
01:15:33,760 --> 01:15:36,159
then it it's enough

2019
01:15:36,159 --> 01:15:38,080
and there are more details of course in

2020
01:15:38,080 --> 01:15:40,559
the paper

2021
01:15:41,120 --> 01:15:44,480
uh okay so the open questions uh

2022
01:15:44,480 --> 01:15:46,159
raises up here is

2023
01:15:46,159 --> 01:15:48,239
can we achieve accessibility from npn

2024
01:15:48,239 --> 01:15:50,080
with better noise

2025
01:15:50,080 --> 01:15:53,840
of course and also how expressive is lpn

2026
01:15:53,840 --> 01:15:54,719
in the

2027
01:15:54,719 --> 01:15:56,719
you know in the next noise regime like n

2028
01:15:56,719 --> 01:15:59,280
to the minus epsilon uh can we build the

2029
01:15:59,280 --> 01:16:02,159
collision resistance hashing from it uh

2030
01:16:02,159 --> 01:16:05,600
what about hardness in sdk and so on and

2031
01:16:05,600 --> 01:16:07,600
also in general how far can we push this

2032
01:16:07,600 --> 01:16:10,239
assumption of lpn

2033
01:16:10,239 --> 01:16:11,360
uh

2034
01:16:11,360 --> 01:16:12,640
so thanks

2035
01:16:12,640 --> 01:16:13,679
and

2036
01:16:13,679 --> 01:16:18,280
if you have questions feel free

2037
01:16:23,280 --> 01:16:24,719
thanks for this talk

2038
01:16:24,719 --> 01:16:27,920
are there any questions

2039
01:16:32,640 --> 01:16:36,000
hello so in azure crypt 21 we have a

2040
01:16:36,000 --> 01:16:38,960
paper showing that using a ring lwe it

2041
01:16:38,960 --> 01:16:41,280
is possible to give a version of the

2042
01:16:41,280 --> 01:16:43,600
protocol it is much more efficient and

2043
01:16:43,600 --> 01:16:44,800
also using

2044
01:16:44,800 --> 01:16:47,040
can you start obviously i wasn't

2045
01:16:47,040 --> 01:16:50,480
can you begin again yeah yeah so in asia

2046
01:16:50,480 --> 01:16:53,679
2021 we have a paper with a statistical

2047
01:16:53,679 --> 01:16:57,040
center private ot

2048
01:16:57,040 --> 01:16:59,840
showing that using ring lwe it is

2049
01:16:59,840 --> 01:17:02,400
possible to improve the efficiency but

2050
01:17:02,400 --> 01:17:04,320
also simplify part of the proof using

2051
01:17:04,320 --> 01:17:06,000
the fact that whenever you have one

2052
01:17:06,000 --> 01:17:07,920
short vector you have n linearly

2053
01:17:07,920 --> 01:17:09,840
independent ones

2054
01:17:09,840 --> 01:17:11,920
and so the question is did you look at

2055
01:17:11,920 --> 01:17:15,199
whether using ring lpn it is possible to

2056
01:17:15,199 --> 01:17:17,600
do something similar

2057
01:17:17,600 --> 01:17:18,719
actually

2058
01:17:18,719 --> 01:17:21,360
we didn't talk about training lpn

2059
01:17:21,360 --> 01:17:22,159
so

2060
01:17:22,159 --> 01:17:24,719
i don't know

2061
01:17:25,840 --> 01:17:28,640
thanks so let's thank the speaker again

2062
01:17:28,640 --> 01:17:31,840
thank you very much

2063
01:17:34,719 --> 01:17:36,560
that brings us to the last talk in this

2064
01:17:36,560 --> 01:17:38,239
session it's

2065
01:17:38,239 --> 01:17:40,000
called constructive post-quantum

2066
01:17:40,000 --> 01:17:42,719
reductions and the papers by

2067
01:17:42,719 --> 01:17:46,000
near bhutansky spka bakerski and joel

2068
01:17:46,000 --> 01:17:46,960
kalai

2069
01:17:46,960 --> 01:17:47,760
and

2070
01:17:47,760 --> 01:17:49,920
the talk is going to be given by

2071
01:17:49,920 --> 01:17:52,920
nir

2072
01:18:42,960 --> 01:18:44,480
hear me at home

2073
01:18:44,480 --> 01:18:45,600
okay great

2074
01:18:45,600 --> 01:18:48,800
um so hi um i'm near and uh i'd like to

2075
01:18:48,800 --> 01:18:51,120
tell you about uh constructive post one

2076
01:18:51,120 --> 01:18:53,520
from reductions and this is work with

2077
01:18:53,520 --> 01:18:55,360
that's vikka brokerski

2078
01:18:55,360 --> 01:18:58,480
and uh yeah collide uh so we're still in

2079
01:18:58,480 --> 01:19:01,120
the context of postquantum cryptography

2080
01:19:01,120 --> 01:19:03,600
we want to design classical protocols

2081
01:19:03,600 --> 01:19:06,960
that we stand quantum adversaries and uh

2082
01:19:06,960 --> 01:19:08,719
you know postdoc photography is

2083
01:19:08,719 --> 01:19:10,640
something that our community has been

2084
01:19:10,640 --> 01:19:12,320
studying for a while

2085
01:19:12,320 --> 01:19:14,719
and as you know uh as you know it has

2086
01:19:14,719 --> 01:19:17,520
required us to rethink uh many of the

2087
01:19:17,520 --> 01:19:20,719
aspects of crypto one obvious thing

2088
01:19:20,719 --> 01:19:23,120
is assumptions we can no longer use

2089
01:19:23,120 --> 01:19:24,640
assumptions like factoring that are

2090
01:19:24,640 --> 01:19:26,080
quantumly broken

2091
01:19:26,080 --> 01:19:27,760
we have to turn to new sources of

2092
01:19:27,760 --> 01:19:30,239
hardness like lattices

2093
01:19:30,239 --> 01:19:32,960
another aspect is how the quantum

2094
01:19:32,960 --> 01:19:36,000
adversary interacts with our classical

2095
01:19:36,000 --> 01:19:37,679
protocols

2096
01:19:37,679 --> 01:19:40,560
but perhaps uh an even more basic aspect

2097
01:19:40,560 --> 01:19:42,560
is reductions right

2098
01:19:42,560 --> 01:19:43,760
to the

2099
01:19:43,760 --> 01:19:46,400
many implications that uh we proved in

2100
01:19:46,400 --> 01:19:48,640
the classical setting

2101
01:19:48,640 --> 01:19:50,640
also hold in the quantum state for

2102
01:19:50,640 --> 01:19:51,760
example

2103
01:19:51,760 --> 01:19:54,800
the one-way functions still imply all of

2104
01:19:54,800 --> 01:19:56,719
symmetric key

2105
01:19:56,719 --> 01:19:58,080
cryptography

2106
01:19:58,080 --> 01:20:00,400
and this is going to be our focus today

2107
01:20:00,400 --> 01:20:02,800
reductions so let me be

2108
01:20:02,800 --> 01:20:04,640
more concrete about this

2109
01:20:04,640 --> 01:20:05,760
so

2110
01:20:05,760 --> 01:20:07,040
you know uh

2111
01:20:07,040 --> 01:20:08,400
we typically construct some

2112
01:20:08,400 --> 01:20:10,320
cryptographic primitive p

2113
01:20:10,320 --> 01:20:12,000
from an underlying

2114
01:20:12,000 --> 01:20:13,679
assumptions thank you

2115
01:20:13,679 --> 01:20:15,840
and we would like to show that breaking

2116
01:20:15,840 --> 01:20:19,840
p is no easier than breaking q and as

2117
01:20:19,840 --> 01:20:22,480
you know the way that we do this is by

2118
01:20:22,480 --> 01:20:24,639
designing the sufficient reduction

2119
01:20:24,639 --> 01:20:27,760
algorithm that can take any

2120
01:20:27,760 --> 01:20:29,520
adversary that breaks b

2121
01:20:29,520 --> 01:20:32,880
and use it in order to break right

2122
01:20:32,880 --> 01:20:34,960
and such rejections are really the the

2123
01:20:34,960 --> 01:20:39,040
bread and butter of uh cryptography um

2124
01:20:39,040 --> 01:20:40,800
we've been working on them uh for a

2125
01:20:40,800 --> 01:20:41,840
while

2126
01:20:41,840 --> 01:20:44,400
and you know it would be a shame if we

2127
01:20:44,400 --> 01:20:46,560
would have to redo all these reductions

2128
01:20:46,560 --> 01:20:48,880
from the classical setting in order to

2129
01:20:48,880 --> 01:20:52,080
achieve post-quantum uh security

2130
01:20:52,080 --> 01:20:53,920
um and then you know this this sort of

2131
01:20:53,920 --> 01:20:56,000
raises the natural question of like

2132
01:20:56,000 --> 01:20:58,560
whether we can lift all the reductions

2133
01:20:58,560 --> 01:21:01,360
that we have from the classical setting

2134
01:21:01,360 --> 01:21:04,639
into the post-quantum setting

2135
01:21:04,639 --> 01:21:07,760
and there seems to be a you know a good

2136
01:21:07,760 --> 01:21:10,080
reason to hope that we can do so because

2137
01:21:10,080 --> 01:21:12,639
really most of the

2138
01:21:12,639 --> 01:21:15,280
reductions that we have in costco crypto

2139
01:21:15,280 --> 01:21:17,360
or what we call black box we don't

2140
01:21:17,360 --> 01:21:19,520
really care how the adversary is

2141
01:21:19,520 --> 01:21:21,920
implemented in particular why should we

2142
01:21:21,920 --> 01:21:24,880
care that it's quantum these reductions

2143
01:21:24,880 --> 01:21:27,760
uh should still work

2144
01:21:27,760 --> 01:21:29,360
but it turns out that this question is

2145
01:21:29,360 --> 01:21:33,440
somewhat more nuanced and in particular

2146
01:21:33,440 --> 01:21:36,239
this is a known problem saying the

2147
01:21:36,239 --> 01:21:38,159
interactive setting

2148
01:21:38,159 --> 01:21:40,080
and the reason for that which is

2149
01:21:40,080 --> 01:21:41,920
something that xiao already mentioned in

2150
01:21:41,920 --> 01:21:43,679
the the first talk

2151
01:21:43,679 --> 01:21:46,480
is that something very basic

2152
01:21:46,480 --> 01:21:49,120
that the classical reduction would do

2153
01:21:49,120 --> 01:21:51,280
is rewind the adversary

2154
01:21:51,280 --> 01:21:52,880
some intermediate

2155
01:21:52,880 --> 01:21:56,000
point in the protocol

2156
01:21:56,000 --> 01:21:56,880
and

2157
01:21:56,880 --> 01:21:58,960
the problem is that in the quantum we

2158
01:21:58,960 --> 01:22:00,719
have what we call the the observer

2159
01:22:00,719 --> 01:22:02,800
effect whenever the reduction sort of

2160
01:22:02,800 --> 01:22:04,000
views

2161
01:22:04,000 --> 01:22:04,960
the

2162
01:22:04,960 --> 01:22:06,960
messages of the adversary its

2163
01:22:06,960 --> 01:22:09,600
intermediate quantum state is disturbed

2164
01:22:09,600 --> 01:22:11,600
and now we no longer have guaranteeing

2165
01:22:11,600 --> 01:22:14,320
what's going to happen next so this

2166
01:22:14,320 --> 01:22:16,239
doesn't generally work and as a matter

2167
01:22:16,239 --> 01:22:18,719
of fact we can even show examples

2168
01:22:18,719 --> 01:22:21,600
of interactive protocols where you have

2169
01:22:21,600 --> 01:22:25,040
a classical reduction to say lwe which

2170
01:22:25,040 --> 01:22:27,840
is allegedly a post-quantum secure

2171
01:22:27,840 --> 01:22:30,159
assumption and yet you can quantumly

2172
01:22:30,159 --> 01:22:32,159
break these protocols

2173
01:22:32,159 --> 01:22:34,239
so we really don't expect there to be a

2174
01:22:34,239 --> 01:22:36,719
post-quantum uh reduction you know

2175
01:22:36,719 --> 01:22:39,360
assuming that lwe is really uh both

2176
01:22:39,360 --> 01:22:40,719
quantum secure

2177
01:22:40,719 --> 01:22:41,600
okay

2178
01:22:41,600 --> 01:22:44,880
so let's put aside interactive protocols

2179
01:22:44,880 --> 01:22:48,080
and focus on non-interactive limitations

2180
01:22:48,080 --> 01:22:50,560
like random generators public key

2181
01:22:50,560 --> 01:22:53,040
encryption uh et cetera there are still

2182
01:22:53,040 --> 01:22:56,239
of course plenty of reductions in this

2183
01:22:56,239 --> 01:22:58,960
uh setting that we would like to uh

2184
01:22:58,960 --> 01:23:02,480
carry over uh to the post quantum regime

2185
01:23:02,480 --> 01:23:04,800
and you know here it may seem that that

2186
01:23:04,800 --> 01:23:07,199
things should work right after all the

2187
01:23:07,199 --> 01:23:09,120
adversary has no intermediate state in

2188
01:23:09,120 --> 01:23:11,600
the protocol it's a one-time thing you

2189
01:23:11,600 --> 01:23:13,520
know the reduction pairs it was a

2190
01:23:13,520 --> 01:23:16,080
challenge it immediately spits out an

2191
01:23:16,080 --> 01:23:19,360
answer and that's it

2192
01:23:19,360 --> 01:23:21,280
but the thing is that we should be a bit

2193
01:23:21,280 --> 01:23:23,679
more careful because what we actually

2194
01:23:23,679 --> 01:23:26,159
want is we want reductions that would

2195
01:23:26,159 --> 01:23:29,440
also work if the adversary has some

2196
01:23:29,440 --> 01:23:31,679
quantum auxiliary input

2197
01:23:31,679 --> 01:23:32,840
right

2198
01:23:32,840 --> 01:23:35,760
and such auxiliary input could come from

2199
01:23:35,760 --> 01:23:38,000
different places it could be the result

2200
01:23:38,000 --> 01:23:41,040
of expensive pre-processing

2201
01:23:41,040 --> 01:23:43,280
uh it could be some intermediate state

2202
01:23:43,280 --> 01:23:45,760
in a larger protocol where you're using

2203
01:23:45,760 --> 01:23:47,120
your primitive

2204
01:23:47,120 --> 01:23:49,440
and so on

2205
01:23:49,440 --> 01:23:51,920
but the problem now is that we're going

2206
01:23:51,920 --> 01:23:54,560
to encounter the same difficulty that we

2207
01:23:54,560 --> 01:23:57,280
just did in the interactive setting

2208
01:23:57,280 --> 01:23:59,040
because if we have a reduction that

2209
01:23:59,040 --> 01:24:02,480
calls the adversary multiple times

2210
01:24:02,480 --> 01:24:05,280
then again the states this auxiliary

2211
01:24:05,280 --> 01:24:07,920
quantum state is going to be disturbed

2212
01:24:07,920 --> 01:24:09,840
and after we make the first query we

2213
01:24:09,840 --> 01:24:12,719
actually have no guarantee whatsoever

2214
01:24:12,719 --> 01:24:17,199
on what's going to uh happen next

2215
01:24:17,199 --> 01:24:18,480
okay so

2216
01:24:18,480 --> 01:24:20,320
perhaps there's a

2217
01:24:20,320 --> 01:24:23,040
a simple solution uh to this problem

2218
01:24:23,040 --> 01:24:24,400
which is sometime

2219
01:24:24,400 --> 01:24:26,960
taken in the in the literature which is

2220
01:24:26,960 --> 01:24:29,600
why not just supply the reduction with

2221
01:24:29,600 --> 01:24:32,320
multiple copies of this

2222
01:24:32,320 --> 01:24:34,960
quantum state then everything should

2223
01:24:34,960 --> 01:24:36,800
work perfectly

2224
01:24:36,800 --> 01:24:39,600
and the problem with this is that it's

2225
01:24:39,600 --> 01:24:41,120
not constructive

2226
01:24:41,120 --> 01:24:42,080
right

2227
01:24:42,080 --> 01:24:44,320
so in general

2228
01:24:44,320 --> 01:24:47,760
you cannot copy a quantum state let

2229
01:24:47,760 --> 01:24:49,840
alone do it uh

2230
01:24:49,840 --> 01:24:51,520
efficiently

2231
01:24:51,520 --> 01:24:53,280
and you know maybe

2232
01:24:53,280 --> 01:24:55,120
in some contexts you wouldn't care about

2233
01:24:55,120 --> 01:24:57,199
this maybe if all that you care about is

2234
01:24:57,199 --> 01:24:58,400
your underlying

2235
01:24:58,400 --> 01:25:00,480
assumption q and you're sort of willing

2236
01:25:00,480 --> 01:25:03,199
to assume that it holds with respect to

2237
01:25:03,199 --> 01:25:05,760
any auxiliary quantum

2238
01:25:05,760 --> 01:25:08,960
input regardless of how many copies then

2239
01:25:08,960 --> 01:25:10,159
you're fine

2240
01:25:10,159 --> 01:25:13,120
uh but i want to argue that in general

2241
01:25:13,120 --> 01:25:15,520
we do care and

2242
01:25:15,520 --> 01:25:18,159
what we really want is constructive

2243
01:25:18,159 --> 01:25:19,360
deductions

2244
01:25:19,360 --> 01:25:21,760
and what i mean by that is that we want

2245
01:25:21,760 --> 01:25:23,520
the reduction to work

2246
01:25:23,520 --> 01:25:27,040
given the adversary and the same quantum

2247
01:25:27,040 --> 01:25:30,080
auxiliary input it shouldn't use any

2248
01:25:30,080 --> 01:25:31,840
further resources that it cannot

2249
01:25:31,840 --> 01:25:33,760
generate on its own

2250
01:25:33,760 --> 01:25:35,600
efficiently

2251
01:25:35,600 --> 01:25:37,920
and really reduction based cryptography

2252
01:25:37,920 --> 01:25:41,040
is is much about this win-win paradigm

2253
01:25:41,040 --> 01:25:43,760
right we want that if now someone comes

2254
01:25:43,760 --> 01:25:45,679
up with a concrete algorithm a complete

2255
01:25:45,679 --> 01:25:48,400
way of breaking our cryptographic scheme

2256
01:25:48,400 --> 01:25:50,480
it should immediately lead to some

2257
01:25:50,480 --> 01:25:52,800
algorithmic advance right and we should

2258
01:25:52,800 --> 01:25:55,360
be able to run this algorithm right here

2259
01:25:55,360 --> 01:25:56,719
and right now

2260
01:25:56,719 --> 01:25:58,480
and we're really not the first to argue

2261
01:25:58,480 --> 01:26:00,239
this this is also something that is

2262
01:26:00,239 --> 01:26:03,199
targeted uh classically right this is

2263
01:26:03,199 --> 01:26:05,600
why we put a lot of stress on designing

2264
01:26:05,600 --> 01:26:08,639
uniform as opposed to non-uniform

2265
01:26:08,639 --> 01:26:10,000
reductions

2266
01:26:10,000 --> 01:26:11,520
okay

2267
01:26:11,520 --> 01:26:13,760
so

2268
01:26:13,920 --> 01:26:17,320
another goal um on top of

2269
01:26:17,320 --> 01:26:19,360
constructiveness which

2270
01:26:19,360 --> 01:26:20,880
the gold doesn't really come up

2271
01:26:20,880 --> 01:26:24,080
classically is what we call durability

2272
01:26:24,080 --> 01:26:26,320
right like uh what we'd like is for our

2273
01:26:26,320 --> 01:26:28,320
reduction to

2274
01:26:28,320 --> 01:26:30,639
keep working forever someone actually

2275
01:26:30,639 --> 01:26:32,880
gave us an algorithm that breaks our

2276
01:26:32,880 --> 01:26:34,880
cryptographic scheme then now we should

2277
01:26:34,880 --> 01:26:37,600
have an algorithm that sort of works for

2278
01:26:37,600 --> 01:26:39,280
eternity that that is what would happen

2279
01:26:39,280 --> 01:26:40,960
in the classical setting we don't want

2280
01:26:40,960 --> 01:26:43,199
it to work only once or degrade over

2281
01:26:43,199 --> 01:26:46,239
time and then we can no longer use it so

2282
01:26:46,239 --> 01:26:48,000
this is another goal which we call uh

2283
01:26:48,000 --> 01:26:51,199
durability okay

2284
01:26:51,199 --> 01:26:53,920
so now that you know what we want let me

2285
01:26:53,920 --> 01:26:57,040
tell you uh what we actually uh show in

2286
01:26:57,040 --> 01:26:59,199
this uh work

2287
01:26:59,199 --> 01:27:00,719
so

2288
01:27:00,719 --> 01:27:03,040
basically we show how to lift a large

2289
01:27:03,040 --> 01:27:05,920
class of reductions uh from the

2290
01:27:05,920 --> 01:27:08,159
classical setting to the post quantum

2291
01:27:08,159 --> 01:27:09,120
city

2292
01:27:09,120 --> 01:27:13,120
and these are reductions from

2293
01:27:13,120 --> 01:27:14,239
hue to

2294
01:27:14,239 --> 01:27:15,760
breaking uh

2295
01:27:15,760 --> 01:27:17,840
some other primitive p

2296
01:27:17,840 --> 01:27:19,360
that have the following properties so

2297
01:27:19,360 --> 01:27:22,159
first the reduction should be black box

2298
01:27:22,159 --> 01:27:24,320
this sounds almost inherent for such

2299
01:27:24,320 --> 01:27:26,080
general lifting

2300
01:27:26,080 --> 01:27:27,280
theorem

2301
01:27:27,280 --> 01:27:29,199
uh the second thing is that we want the

2302
01:27:29,199 --> 01:27:31,760
reduction to be non-adoptive

2303
01:27:31,760 --> 01:27:33,920
meaning that it generates all of its

2304
01:27:33,920 --> 01:27:37,280
queries to the adversary ahead of time

2305
01:27:37,280 --> 01:27:40,719
and the last restriction is that the

2306
01:27:40,719 --> 01:27:43,360
primitive p we're reducing to should be

2307
01:27:43,360 --> 01:27:45,760
either a decision assumption like say a

2308
01:27:45,760 --> 01:27:47,440
pseudo-random generator

2309
01:27:47,440 --> 01:27:50,960
or maybe a search problem but with a few

2310
01:27:50,960 --> 01:27:52,960
solutions

2311
01:27:52,960 --> 01:27:54,480
and

2312
01:27:54,480 --> 01:27:56,560
the post-quantum reductions that we come

2313
01:27:56,560 --> 01:27:58,159
up with are all

2314
01:27:58,159 --> 01:28:00,400
constructive reductions and they're also

2315
01:28:00,400 --> 01:28:03,040
durable okay once you get them you can

2316
01:28:03,040 --> 01:28:04,719
sort of use them

2317
01:28:04,719 --> 01:28:07,199
forever

2318
01:28:07,199 --> 01:28:09,120
now along the way we introduce certain

2319
01:28:09,120 --> 01:28:11,679
uh intermediate models of

2320
01:28:11,679 --> 01:28:14,560
stateful adversaries that i think that

2321
01:28:14,560 --> 01:28:16,159
are interesting on their own even from a

2322
01:28:16,159 --> 01:28:18,320
classical perspective and i'll mention

2323
01:28:18,320 --> 01:28:21,040
those uh in a bit

2324
01:28:21,040 --> 01:28:23,440
and we also show a negative result that

2325
01:28:23,440 --> 01:28:26,000
sort of complements the

2326
01:28:26,000 --> 01:28:28,239
positive result we showed that this

2327
01:28:28,239 --> 01:28:29,679
restriction

2328
01:28:29,679 --> 01:28:30,560
on

2329
01:28:30,560 --> 01:28:32,880
on p on the the primitive we're reduced

2330
01:28:32,880 --> 01:28:35,040
to this restriction to say decision

2331
01:28:35,040 --> 01:28:38,880
uh assumptions is somewhat inherent

2332
01:28:38,880 --> 01:28:40,800
i probably won't have time to touch this

2333
01:28:40,800 --> 01:28:43,360
today but you can look at the paper

2334
01:28:43,360 --> 01:28:45,360
okay

2335
01:28:45,360 --> 01:28:47,760
so these are the results and for the

2336
01:28:47,760 --> 01:28:49,199
remaining time i want to give you a

2337
01:28:49,199 --> 01:28:52,320
taste of the techniques

2338
01:28:52,320 --> 01:28:54,480
some of you may already recognize this

2339
01:28:54,480 --> 01:28:57,520
dog from our video abstract

2340
01:28:57,520 --> 01:28:58,880
um

2341
01:28:58,880 --> 01:29:00,320
she's really in charge for some of the

2342
01:29:00,320 --> 01:29:01,920
techniques in the paper

2343
01:29:01,920 --> 01:29:03,840
um okay so

2344
01:29:03,840 --> 01:29:06,480
what we do is basically we want to sort

2345
01:29:06,480 --> 01:29:09,120
of bridge uh different

2346
01:29:09,120 --> 01:29:11,920
adversarial models

2347
01:29:11,920 --> 01:29:13,600
our finish line

2348
01:29:13,600 --> 01:29:14,880
is you know

2349
01:29:14,880 --> 01:29:17,360
what we know okay it's the setting where

2350
01:29:17,360 --> 01:29:19,120
classical reductions

2351
01:29:19,120 --> 01:29:20,480
actually work

2352
01:29:20,480 --> 01:29:22,800
where you're able to sort of make calls

2353
01:29:22,800 --> 01:29:24,880
to the same adversary again and again

2354
01:29:24,880 --> 01:29:27,280
you know as many times

2355
01:29:27,280 --> 01:29:29,199
as you need this is what we call a

2356
01:29:29,199 --> 01:29:31,520
stateless adversary

2357
01:29:31,520 --> 01:29:33,760
and what we start from and the quantum

2358
01:29:33,760 --> 01:29:36,159
setting is quite far from that is what

2359
01:29:36,159 --> 01:29:39,520
we call a one-shot adversary okay so we

2360
01:29:39,520 --> 01:29:42,000
have an adversary that breaks our scheme

2361
01:29:42,000 --> 01:29:43,920
but you know it does so

2362
01:29:43,920 --> 01:29:45,679
once and once we

2363
01:29:45,679 --> 01:29:47,600
even make a single query

2364
01:29:47,600 --> 01:29:49,760
the state is disturbed

2365
01:29:49,760 --> 01:29:52,159
we don't know what's going to uh happen

2366
01:29:52,159 --> 01:29:55,120
next okay so this is the the gap and we

2367
01:29:55,120 --> 01:29:56,560
want to somehow

2368
01:29:56,560 --> 01:29:58,080
bridge it

2369
01:29:58,080 --> 01:30:00,480
and we're going to do this in

2370
01:30:00,480 --> 01:30:02,719
several steps and i'll tell you about

2371
01:30:02,719 --> 01:30:04,000
these uh

2372
01:30:04,000 --> 01:30:05,440
steps

2373
01:30:05,440 --> 01:30:07,280
a little bit

2374
01:30:07,280 --> 01:30:08,800
so um

2375
01:30:08,800 --> 01:30:11,679
the first step is what we call

2376
01:30:11,679 --> 01:30:14,000
transitioning from this one-shot

2377
01:30:14,000 --> 01:30:17,600
adversaries to persistent adversaries

2378
01:30:17,600 --> 01:30:20,239
so what are persistent adversaries these

2379
01:30:20,239 --> 01:30:22,320
are adversaries that sort of you know

2380
01:30:22,320 --> 01:30:24,560
they never run out of steam they keep

2381
01:30:24,560 --> 01:30:27,199
solving so perhaps their internal state

2382
01:30:27,199 --> 01:30:28,320
changes

2383
01:30:28,320 --> 01:30:30,480
but the probability that you know they

2384
01:30:30,480 --> 01:30:32,320
break your primitive

2385
01:30:32,320 --> 01:30:34,800
remains roughly the same okay it still

2386
01:30:34,800 --> 01:30:36,480
still remains high

2387
01:30:36,480 --> 01:30:37,600
um

2388
01:30:37,600 --> 01:30:40,880
over time so these are uh persistent

2389
01:30:40,880 --> 01:30:43,360
um adversaries

2390
01:30:43,360 --> 01:30:46,719
and uh i'm not going to dive into how we

2391
01:30:46,719 --> 01:30:48,639
uh bridge this gap

2392
01:30:48,639 --> 01:30:51,760
but in a nutshell we leverage here a

2393
01:30:51,760 --> 01:30:54,400
recent quantum rewinding technique

2394
01:30:54,400 --> 01:30:57,360
uh but he has a mass owner and

2395
01:30:57,360 --> 01:30:58,800
anzandri

2396
01:30:58,800 --> 01:31:00,840
but i do want to mention that the

2397
01:31:00,840 --> 01:31:04,000
restriction to decision assumption etc

2398
01:31:04,000 --> 01:31:05,600
already comes up

2399
01:31:05,600 --> 01:31:06,719
here

2400
01:31:06,719 --> 01:31:09,040
but as i told you it turns out to be

2401
01:31:09,040 --> 01:31:12,639
somewhat inherent

2402
01:31:12,880 --> 01:31:14,000
okay

2403
01:31:14,000 --> 01:31:16,239
so this is sort of the the first step

2404
01:31:16,239 --> 01:31:17,760
now we have

2405
01:31:17,760 --> 01:31:20,080
uh a persistent adversary

2406
01:31:20,080 --> 01:31:22,320
and perhaps before uh moving on to the

2407
01:31:22,320 --> 01:31:24,880
next step we should ask ourselves why

2408
01:31:24,880 --> 01:31:27,040
isn't it enough right because now we

2409
01:31:27,040 --> 01:31:28,960
have an adversary it's a good you know

2410
01:31:28,960 --> 01:31:30,800
it's a good adversary

2411
01:31:30,800 --> 01:31:33,280
throughout uh uh time it will keep

2412
01:31:33,280 --> 01:31:35,840
breaking our assumptions so you know

2413
01:31:35,840 --> 01:31:38,400
what what is missing

2414
01:31:38,400 --> 01:31:41,600
and the point is that even though sort

2415
01:31:41,600 --> 01:31:44,000
of like the set of instances that the

2416
01:31:44,000 --> 01:31:46,080
adversary is able to solve

2417
01:31:46,080 --> 01:31:48,800
remains large remains roughly the same

2418
01:31:48,800 --> 01:31:49,760
size

2419
01:31:49,760 --> 01:31:52,400
it sort of drifts around okay the state

2420
01:31:52,400 --> 01:31:54,400
does change and it sort of drifts around

2421
01:31:54,400 --> 01:31:56,800
it's it's not really fixed

2422
01:31:56,800 --> 01:31:58,960
and this could present a problem for you

2423
01:31:58,960 --> 01:32:01,280
know reductions that make multiple

2424
01:32:01,280 --> 01:32:04,320
queries that could be very correlated

2425
01:32:04,320 --> 01:32:05,600
to each other

2426
01:32:05,600 --> 01:32:08,320
okay say like the the goliath levy if

2427
01:32:08,320 --> 01:32:09,280
you

2428
01:32:09,280 --> 01:32:11,840
think about it and in the extreme case

2429
01:32:11,840 --> 01:32:13,760
it would be that after you make your

2430
01:32:13,760 --> 01:32:15,600
first query

2431
01:32:15,600 --> 01:32:18,080
the state somehow remembers this query

2432
01:32:18,080 --> 01:32:20,080
and later on

2433
01:32:20,080 --> 01:32:22,800
it wouldn't answer correctly any related

2434
01:32:22,800 --> 01:32:25,280
query any query in its area and then

2435
01:32:25,280 --> 01:32:27,440
you're in trouble your reduction

2436
01:32:27,440 --> 01:32:29,679
won't really work okay

2437
01:32:29,679 --> 01:32:31,920
so we can't stop that persistent we have

2438
01:32:31,920 --> 01:32:35,920
to uh some somehow move on

2439
01:32:35,920 --> 01:32:40,080
and the next model we're going to uh uh

2440
01:32:40,080 --> 01:32:42,960
consider is what we call memories

2441
01:32:42,960 --> 01:32:44,560
adversaries okay so we're not just

2442
01:32:44,560 --> 01:32:46,800
persistent but also memoryless in the

2443
01:32:46,800 --> 01:32:49,679
following sense so here the adversarial

2444
01:32:49,679 --> 01:32:52,840
strategy is fixed ahead of time

2445
01:32:52,840 --> 01:32:56,159
independently of the queries that we're

2446
01:32:56,159 --> 01:32:57,920
going to make

2447
01:32:57,920 --> 01:33:00,480
but it could still be a different

2448
01:33:00,480 --> 01:33:01,760
adversary

2449
01:33:01,760 --> 01:33:03,760
at every time point you can think about

2450
01:33:03,760 --> 01:33:05,920
it as an adversary that simply has a

2451
01:33:05,920 --> 01:33:09,840
clock but otherwise it doesn't keep

2452
01:33:10,080 --> 01:33:11,760
any state

2453
01:33:11,760 --> 01:33:13,760
so we show how to move from persistent

2454
01:33:13,760 --> 01:33:16,800
adversaries to adversaries in uh

2455
01:33:16,800 --> 01:33:18,480
in this model

2456
01:33:18,480 --> 01:33:20,800
basically we show how to simulate

2457
01:33:20,800 --> 01:33:22,080
such uh

2458
01:33:22,080 --> 01:33:24,320
memories memoryless

2459
01:33:24,320 --> 01:33:25,360
behavior

2460
01:33:25,360 --> 01:33:28,159
in the case that our reduction is

2461
01:33:28,159 --> 01:33:30,880
non-adaptive so the non-adaptive

2462
01:33:30,880 --> 01:33:33,679
nanoductivity requirement already uh

2463
01:33:33,679 --> 01:33:36,480
comes up here and this sort of the

2464
01:33:36,480 --> 01:33:40,480
the most uh technical part perhaps um

2465
01:33:40,480 --> 01:33:43,120
in the paper let me uh tell you about it

2466
01:33:43,120 --> 01:33:44,400
at least uh

2467
01:33:44,400 --> 01:33:45,520
in uh

2468
01:33:45,520 --> 01:33:48,840
in a few words just give you some some

2469
01:33:48,840 --> 01:33:50,960
intuition so

2470
01:33:50,960 --> 01:33:52,639
we want to simulate this mirrorless

2471
01:33:52,639 --> 01:33:54,560
behavior we want to prevent

2472
01:33:54,560 --> 01:33:56,560
this extreme event where somehow the

2473
01:33:56,560 --> 01:33:58,719
state remembers our queries and then

2474
01:33:58,719 --> 01:34:02,159
refuses to answer correlated queries

2475
01:34:02,159 --> 01:34:04,400
and the basic idea

2476
01:34:04,400 --> 01:34:07,440
is to leverage the fact that after all

2477
01:34:07,440 --> 01:34:10,000
the adversary state is polynomially

2478
01:34:10,000 --> 01:34:11,120
bound

2479
01:34:11,120 --> 01:34:12,000
okay

2480
01:34:12,000 --> 01:34:14,800
so you know it only has some limited

2481
01:34:14,800 --> 01:34:16,320
memory of

2482
01:34:16,320 --> 01:34:19,120
past queries and what we're basically

2483
01:34:19,120 --> 01:34:21,280
going to do we're going to somehow flood

2484
01:34:21,280 --> 01:34:22,080
it

2485
01:34:22,080 --> 01:34:24,800
with queries in a way that prevents it

2486
01:34:24,800 --> 01:34:26,480
from sort of

2487
01:34:26,480 --> 01:34:28,639
remembering the meaningful

2488
01:34:28,639 --> 01:34:31,360
uh queries so let me be a bit more

2489
01:34:31,360 --> 01:34:33,360
specific

2490
01:34:33,360 --> 01:34:36,400
so whenever we want to make the i query

2491
01:34:36,400 --> 01:34:38,080
of the reduction

2492
01:34:38,080 --> 01:34:39,600
what we're first going to do is we're

2493
01:34:39,600 --> 01:34:42,320
going to sample many dumb equipments

2494
01:34:42,320 --> 01:34:43,840
okay we're going to sample many dummy

2495
01:34:43,840 --> 01:34:47,119
queries from the marginal of the ice

2496
01:34:47,119 --> 01:34:50,480
quarry and we're going to plant our real

2497
01:34:50,480 --> 01:34:51,679
query

2498
01:34:51,679 --> 01:34:53,360
somewhere at random between these

2499
01:34:53,360 --> 01:34:55,920
queries and then perform all these

2500
01:34:55,920 --> 01:34:57,600
queries with

2501
01:34:57,600 --> 01:35:00,480
our real query hidden between them

2502
01:35:00,480 --> 01:35:01,440
to the

2503
01:35:01,440 --> 01:35:02,719
uh

2504
01:35:02,719 --> 01:35:04,480
to the adversary

2505
01:35:04,480 --> 01:35:06,239
and what's the intuition here the

2506
01:35:06,239 --> 01:35:08,480
intuition is that the adversary cannot

2507
01:35:08,480 --> 01:35:09,840
really tell

2508
01:35:09,840 --> 01:35:12,480
the real query from the dummy queries

2509
01:35:12,480 --> 01:35:14,800
that come from the the same distribution

2510
01:35:14,800 --> 01:35:16,960
and because its memory is bounded it

2511
01:35:16,960 --> 01:35:19,360
cannot remember all of them

2512
01:35:19,360 --> 01:35:21,679
okay so that's the the intuition and why

2513
01:35:21,679 --> 01:35:23,040
it could work

2514
01:35:23,040 --> 01:35:25,520
and we actually managed to prove

2515
01:35:25,520 --> 01:35:27,520
that such an execution

2516
01:35:27,520 --> 01:35:29,679
is delta closed if you look at the the

2517
01:35:29,679 --> 01:35:31,679
query answer distribution that you get

2518
01:35:31,679 --> 01:35:34,400
it's actually close to an execution with

2519
01:35:34,400 --> 01:35:37,840
some predetermined set of oracles so i'm

2520
01:35:37,840 --> 01:35:40,239
not going to tell you how to define them

2521
01:35:40,239 --> 01:35:41,520
in a word

2522
01:35:41,520 --> 01:35:43,600
we're defined only depending on the

2523
01:35:43,600 --> 01:35:45,440
dummy queries and not

2524
01:35:45,440 --> 01:35:48,159
uh uh the real queries

2525
01:35:48,159 --> 01:35:50,400
and to get this closeness we of course

2526
01:35:50,400 --> 01:35:52,560
have to make sure that the number of

2527
01:35:52,560 --> 01:35:55,040
dummies the number the amount of noise

2528
01:35:55,040 --> 01:35:56,400
that we introduce

2529
01:35:56,400 --> 01:35:59,119
is sufficiently larger than the number

2530
01:35:59,119 --> 01:36:02,480
of qubits in the adversary state

2531
01:36:02,480 --> 01:36:05,119
okay so formally this is showing using

2532
01:36:05,119 --> 01:36:08,560
quantum mutual information arguments

2533
01:36:08,560 --> 01:36:11,920
you can look at the paper okay

2534
01:36:11,920 --> 01:36:14,080
so

2535
01:36:14,960 --> 01:36:17,920
this is how we bridge uh uh

2536
01:36:17,920 --> 01:36:19,840
um

2537
01:36:19,840 --> 01:36:22,880
from persistent to to memoryless and

2538
01:36:22,880 --> 01:36:24,639
we're still not

2539
01:36:24,639 --> 01:36:26,320
at the end

2540
01:36:26,320 --> 01:36:27,119
like

2541
01:36:27,119 --> 01:36:30,480
the the the gap is that at the moment we

2542
01:36:30,480 --> 01:36:32,880
know that at each time stamp we have a

2543
01:36:32,880 --> 01:36:35,280
different adversary providing us an

2544
01:36:35,280 --> 01:36:37,360
answer where we want to get is we want

2545
01:36:37,360 --> 01:36:39,520
to have basically the same

2546
01:36:39,520 --> 01:36:42,480
adversarial algorithm answering all of

2547
01:36:42,480 --> 01:36:45,199
our work that would guarantee that our

2548
01:36:45,199 --> 01:36:48,159
classical reduction would work okay so

2549
01:36:48,159 --> 01:36:51,199
this is the the last thing

2550
01:36:51,199 --> 01:36:53,199
that we need to bridge and here we show

2551
01:36:53,199 --> 01:36:55,360
another sort of uh uh

2552
01:36:55,360 --> 01:36:58,159
simulation uh argument

2553
01:36:58,159 --> 01:36:59,679
um

2554
01:36:59,679 --> 01:37:01,360
in two words the way that that we're

2555
01:37:01,360 --> 01:37:03,360
going to do this basically we're going

2556
01:37:03,360 --> 01:37:04,639
to answer

2557
01:37:04,639 --> 01:37:06,400
every query

2558
01:37:06,400 --> 01:37:09,280
with one of these oracles the trend okay

2559
01:37:09,280 --> 01:37:10,800
so every query we get we're going to

2560
01:37:10,800 --> 01:37:13,360
choose one of these oracles at random

2561
01:37:13,360 --> 01:37:14,719
and provide

2562
01:37:14,719 --> 01:37:16,880
the answer using that oracle

2563
01:37:16,880 --> 01:37:18,880
and here again we're going to leverage

2564
01:37:18,880 --> 01:37:21,199
the fact that reduction is non-adaptive

2565
01:37:21,199 --> 01:37:23,600
so we can make this random assignment

2566
01:37:23,600 --> 01:37:24,960
ahead of time

2567
01:37:24,960 --> 01:37:26,159
okay you have to watch out for

2568
01:37:26,159 --> 01:37:27,920
collisions etc

2569
01:37:27,920 --> 01:37:29,600
but uh

2570
01:37:29,600 --> 01:37:30,960
it works out

2571
01:37:30,960 --> 01:37:32,080
okay so

2572
01:37:32,080 --> 01:37:34,480
this way we eventually uh

2573
01:37:34,480 --> 01:37:36,560
bridge

2574
01:37:36,560 --> 01:37:38,320
the gap all the way

2575
01:37:38,320 --> 01:37:40,400
to the setting where we can actually

2576
01:37:40,400 --> 01:37:41,520
apply

2577
01:37:41,520 --> 01:37:43,760
our classical reduction

2578
01:37:43,760 --> 01:37:45,840
okay

2579
01:37:45,840 --> 01:37:47,280
so

2580
01:37:47,280 --> 01:37:50,400
we constructed uh all these mini bridges

2581
01:37:50,400 --> 01:37:53,199
we uh bridged the uh

2582
01:37:53,199 --> 01:37:54,800
the entire gap

2583
01:37:54,800 --> 01:37:58,560
and uh as i said i think that uh

2584
01:37:58,560 --> 01:38:01,760
this model this the stateful model and

2585
01:38:01,760 --> 01:38:04,719
also this uh memory models are pretty

2586
01:38:04,719 --> 01:38:07,520
natural to look on uh to look at on

2587
01:38:07,520 --> 01:38:09,840
their own right you could ask what can

2588
01:38:09,840 --> 01:38:11,920
you do when you have an adversary that

2589
01:38:11,920 --> 01:38:15,360
sort of adapts over time is stateful i

2590
01:38:15,360 --> 01:38:18,159
think these things uh uh are interesting

2591
01:38:18,159 --> 01:38:21,119
uh and in fact uh um

2592
01:38:21,119 --> 01:38:23,679
these kind of questions were also uh

2593
01:38:23,679 --> 01:38:26,000
explored in a concurrent work

2594
01:38:26,000 --> 01:38:29,199
uh by chen freitag and uh in past they

2595
01:38:29,199 --> 01:38:32,639
uh call it uh cosmic security uh in

2596
01:38:32,639 --> 01:38:34,719
particular this uh last step this

2597
01:38:34,719 --> 01:38:38,719
memoryless model and this last shuffling

2598
01:38:38,719 --> 01:38:41,119
uh step is also something that uh they

2599
01:38:41,119 --> 01:38:42,800
do there

2600
01:38:42,800 --> 01:38:45,600
okay

2601
01:38:45,600 --> 01:38:47,040
so uh

2602
01:38:47,040 --> 01:38:49,920
this is mostly what i wanted to say uh

2603
01:38:49,920 --> 01:38:51,360
um

2604
01:38:51,360 --> 01:38:54,080
about the techniques and uh the work but

2605
01:38:54,080 --> 01:38:56,400
uh i do want to leave you with uh

2606
01:38:56,400 --> 01:38:59,119
something to think about uh so what we

2607
01:38:59,119 --> 01:39:02,719
showed applies for non-adoptive uh

2608
01:39:02,719 --> 01:39:04,000
reductions

2609
01:39:04,000 --> 01:39:06,320
and really many perhaps most of the

2610
01:39:06,320 --> 01:39:09,119
reductions that we have in frasco crypto

2611
01:39:09,119 --> 01:39:10,960
are non-adoptive

2612
01:39:10,960 --> 01:39:14,320
but there are some notable examples of

2613
01:39:14,320 --> 01:39:15,920
adaptive reductions perhaps the most

2614
01:39:15,920 --> 01:39:18,400
notorious ones is pseudorandom

2615
01:39:18,400 --> 01:39:20,080
generators from

2616
01:39:20,080 --> 01:39:22,000
general one-way functions not say

2617
01:39:22,000 --> 01:39:23,920
regular or objective volume functions

2618
01:39:23,920 --> 01:39:26,880
but any one-way function this reduction

2619
01:39:26,880 --> 01:39:29,040
turns out to be uh

2620
01:39:29,040 --> 01:39:32,719
adaptive uh actually i had no idea uh i

2621
01:39:32,719 --> 01:39:35,679
discovered this uh recently uh it is

2622
01:39:35,679 --> 01:39:38,400
adoptive um so you know it's a very

2623
01:39:38,400 --> 01:39:40,639
basic question what what can you do here

2624
01:39:40,639 --> 01:39:42,320
and one thing you can try is of course

2625
01:39:42,320 --> 01:39:44,960
come up with a non-adaptive reduction

2626
01:39:44,960 --> 01:39:46,480
for prgs

2627
01:39:46,480 --> 01:39:48,480
from one-way function people have been

2628
01:39:48,480 --> 01:39:50,480
trying to do this for a long time good

2629
01:39:50,480 --> 01:39:53,199
luck with that

2630
01:39:53,600 --> 01:39:56,080
but more generally can we still do this

2631
01:39:56,080 --> 01:39:58,880
constructive lifting also in the

2632
01:39:58,880 --> 01:40:01,360
adaptive setting maybe this is a very

2633
01:40:01,360 --> 01:40:03,040
interesting question

2634
01:40:03,040 --> 01:40:05,920
uh okay so uh this is all that i want to

2635
01:40:05,920 --> 01:40:09,840
tell you uh thank you

2636
01:40:15,119 --> 01:40:17,119
thanks for the nice talk are there any

2637
01:40:17,119 --> 01:40:20,679
questions in the audience

2638
01:40:22,880 --> 01:40:24,000
um

2639
01:40:24,000 --> 01:40:26,719
what about a situation where um the

2640
01:40:26,719 --> 01:40:28,960
uh there is a random marker involved so

2641
01:40:28,960 --> 01:40:31,600
the adversary uses it so somehow the

2642
01:40:31,600 --> 01:40:33,199
reduction has to

2643
01:40:33,199 --> 01:40:34,960
simulate it to do any of these

2644
01:40:34,960 --> 01:40:36,880
techniques would uh have you thought

2645
01:40:36,880 --> 01:40:38,880
about that or do they yeah they won't

2646
01:40:38,880 --> 01:40:41,840
really work so this is uh a different

2647
01:40:41,840 --> 01:40:44,080
setting so what we considered is

2648
01:40:44,080 --> 01:40:46,480
completely non-interactive you can think

2649
01:40:46,480 --> 01:40:49,840
about like non-interactive things

2650
01:40:49,840 --> 01:40:52,400
there's also some access to an oracle

2651
01:40:52,400 --> 01:40:53,760
let's say okay even you know sort of

2652
01:40:53,760 --> 01:40:56,480
random functions and uh signatures

2653
01:40:56,480 --> 01:40:59,040
um and this is something that uh

2654
01:40:59,040 --> 01:40:59,840
uh

2655
01:40:59,840 --> 01:41:02,159
we didn't uh look at and their things

2656
01:41:02,159 --> 01:41:03,760
are uh

2657
01:41:03,760 --> 01:41:05,119
sort of challenging because the

2658
01:41:05,119 --> 01:41:07,920
adversary does you know inherently has

2659
01:41:07,920 --> 01:41:10,480
an intermediate state between different

2660
01:41:10,480 --> 01:41:11,920
oracles

2661
01:41:11,920 --> 01:41:13,440
uh and actually there are some

2662
01:41:13,440 --> 01:41:16,000
interesting results of also on

2663
01:41:16,000 --> 01:41:17,679
an archive or

2664
01:41:17,679 --> 01:41:19,679
recently i can tell you about this

2665
01:41:19,679 --> 01:41:22,880
offline thank you sure

2666
01:41:22,880 --> 01:41:25,600
any other questions

2667
01:41:25,600 --> 01:41:29,800
then let's thank the speaker again

2668
01:41:32,400 --> 01:41:33,920
that concludes this session on post

2669
01:41:33,920 --> 01:41:35,600
quantum crypto thanks everyone for

2670
01:41:35,600 --> 01:41:37,360
staying and

2671
01:41:37,360 --> 01:41:38,960
please make sure to bring some warm

2672
01:41:38,960 --> 01:41:40,719
clothes to the beach can get quite cold

2673
01:41:40,719 --> 01:41:43,719
there

2674
01:41:51,360 --> 01:41:53,440
you

