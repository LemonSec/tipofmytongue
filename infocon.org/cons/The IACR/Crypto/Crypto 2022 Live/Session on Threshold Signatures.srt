1
00:00:00,640 --> 00:00:02,960
my name is dominique and i'm happy to be

2
00:00:02,960 --> 00:00:04,720
the session chair today

3
00:00:04,720 --> 00:00:06,399
so the first talk is actually split

4
00:00:06,399 --> 00:00:09,280
between two papers it's a soft merge and

5
00:00:09,280 --> 00:00:11,360
the the both authors will switch in the

6
00:00:11,360 --> 00:00:13,120
middle so in case you have a question

7
00:00:13,120 --> 00:00:15,360
then please make sure you address the

8
00:00:15,360 --> 00:00:17,039
question of course to the right to the

9
00:00:17,039 --> 00:00:18,960
right author

10
00:00:18,960 --> 00:00:20,720
the title is better than at this

11
00:00:20,720 --> 00:00:22,640
advertised security for non-interactive

12
00:00:22,640 --> 00:00:25,039
threshold signatures by mia bellaria

13
00:00:25,039 --> 00:00:28,000
elizabeth wright jelisa comolo marie

14
00:00:28,000 --> 00:00:32,238
muller stefano tessaro and chen jui su

15
00:00:32,238 --> 00:00:35,120
i hope that this was correct

16
00:00:35,120 --> 00:00:37,440
and a little bethel will start with her

17
00:00:37,440 --> 00:00:40,440
talk

18
00:00:48,239 --> 00:00:49,520
i'm going to be talking about the

19
00:00:49,520 --> 00:00:51,600
security of non-interactive threshold

20
00:00:51,600 --> 00:00:54,000
signatures this is joint work with me

21
00:00:54,000 --> 00:00:56,879
here belare chelsea comolo mary mallor

22
00:00:56,879 --> 00:00:58,960
stefano tazzaro and chenzi zoo who will

23
00:00:58,960 --> 00:01:01,920
be my co-speaker

24
00:01:04,080 --> 00:01:06,080
threshold signatures allow multiple

25
00:01:06,080 --> 00:01:08,640
parties to jointly sign a message where

26
00:01:08,640 --> 00:01:10,840
some threshold of them is required to

27
00:01:10,840 --> 00:01:13,520
sign this is important for distributing

28
00:01:13,520 --> 00:01:14,479
trust

29
00:01:14,479 --> 00:01:16,320
because if we have a single key this

30
00:01:16,320 --> 00:01:18,720
represents a single point of failure

31
00:01:18,720 --> 00:01:20,400
but if we distribute the key amongst

32
00:01:20,400 --> 00:01:21,840
multiple parties

33
00:01:21,840 --> 00:01:23,759
then we can tolerate some

34
00:01:23,759 --> 00:01:26,560
fraction of corrupt signers

35
00:01:26,560 --> 00:01:28,240
this is important because threshold

36
00:01:28,240 --> 00:01:30,240
signatures are being used to secure

37
00:01:30,240 --> 00:01:33,360
cryptocurrency wallets

38
00:01:33,360 --> 00:01:35,360
threshold cryptography generally is

39
00:01:35,360 --> 00:01:37,680
being standardized through nist as well

40
00:01:37,680 --> 00:01:41,840
as specific schemes like frost

41
00:01:43,200 --> 00:01:44,799
in this work we're going to focus on

42
00:01:44,799 --> 00:01:47,920
non-interactive threshold signatures

43
00:01:47,920 --> 00:01:49,840
so consider an example where two out of

44
00:01:49,840 --> 00:01:53,360
three parties are required to sign

45
00:01:53,360 --> 00:01:55,680
if we consider a user called the leader

46
00:01:55,680 --> 00:01:58,640
and a fully non-interactive scheme the

47
00:01:58,640 --> 00:02:00,399
leader will send a message to the two

48
00:02:00,399 --> 00:02:02,560
signing parties

49
00:02:02,560 --> 00:02:04,719
they will each then form a partial

50
00:02:04,719 --> 00:02:08,080
signature which they send to the leader

51
00:02:08,080 --> 00:02:10,160
the leader then aggregates these partial

52
00:02:10,160 --> 00:02:12,160
signatures into a final signature

53
00:02:12,160 --> 00:02:15,200
representing the group

54
00:02:17,120 --> 00:02:18,879
examples of fully non-interactive

55
00:02:18,879 --> 00:02:21,280
schemes include threshold bls and

56
00:02:21,280 --> 00:02:23,760
threshold rsa

57
00:02:23,760 --> 00:02:25,360
but what about discrete log based

58
00:02:25,360 --> 00:02:27,040
schemes and in particular ones that are

59
00:02:27,040 --> 00:02:29,760
pairing free

60
00:02:31,840 --> 00:02:33,920
so currently there exists no fully

61
00:02:33,920 --> 00:02:36,720
non-interactive schemes

62
00:02:36,720 --> 00:02:38,560
but there is a scheme called frost which

63
00:02:38,560 --> 00:02:40,480
consists of two rounds

64
00:02:40,480 --> 00:02:42,640
there's a single signing round preceded

65
00:02:42,640 --> 00:02:44,720
by one message independent

66
00:02:44,720 --> 00:02:46,879
pre-processing round

67
00:02:46,879 --> 00:02:48,640
we refer to this as partially

68
00:02:48,640 --> 00:02:51,440
non-attractive

69
00:02:51,440 --> 00:02:53,760
for ecdsa there is also a scheme that

70
00:02:53,760 --> 00:02:56,160
consists of a single signing round

71
00:02:56,160 --> 00:02:58,319
however it also incorporates multiple

72
00:02:58,319 --> 00:03:00,080
pre-processing rounds

73
00:03:00,080 --> 00:03:04,519
which we do not consider in this work

74
00:03:05,920 --> 00:03:08,480
so in this paper we propose a formal

75
00:03:08,480 --> 00:03:10,800
framework for partially non-interactive

76
00:03:10,800 --> 00:03:12,640
threshold schemes

77
00:03:12,640 --> 00:03:15,440
we introduce a formal syntax as well as

78
00:03:15,440 --> 00:03:18,560
a hierarchy of security notions

79
00:03:18,560 --> 00:03:21,599
these can be applied to bls frost and

80
00:03:21,599 --> 00:03:23,440
other schemes

81
00:03:23,440 --> 00:03:27,040
but why is this framework needed

82
00:03:28,319 --> 00:03:30,560
prior to this work there existed no

83
00:03:30,560 --> 00:03:32,400
formalization for partially

84
00:03:32,400 --> 00:03:34,640
non-attractive schemes

85
00:03:34,640 --> 00:03:38,400
so we provide the first formal syntax

86
00:03:38,400 --> 00:03:40,319
we also note that existing security

87
00:03:40,319 --> 00:03:42,480
notions were actually weaker than what

88
00:03:42,480 --> 00:03:45,120
the schemes can achieve

89
00:03:45,120 --> 00:03:47,120
so we propose a fine-grained security

90
00:03:47,120 --> 00:03:49,280
hierarchy with stronger notions of

91
00:03:49,280 --> 00:03:51,920
security

92
00:03:52,400 --> 00:03:54,159
we also note that the original proof for

93
00:03:54,159 --> 00:03:57,840
frost relied on heuristic assumptions

94
00:03:57,840 --> 00:03:59,920
so in this work we analyzed the security

95
00:03:59,920 --> 00:04:04,399
of frost based on our security hierarchy

96
00:04:06,080 --> 00:04:08,480
we also analyze the security of bls and

97
00:04:08,480 --> 00:04:10,560
note that it achieves a stronger notion

98
00:04:10,560 --> 00:04:13,360
of security than was previously realized

99
00:04:13,360 --> 00:04:15,040
this is also implied by the concurrent

100
00:04:15,040 --> 00:04:17,839
work of yensgra

101
00:04:17,839 --> 00:04:19,600
in this talk i'm going to focus on the

102
00:04:19,600 --> 00:04:22,800
frost threshold scheme

103
00:04:22,800 --> 00:04:26,840
and our concrete contributions are as

104
00:04:26,840 --> 00:04:29,840
follows we present frost ii

105
00:04:29,840 --> 00:04:31,840
which is an optimized version of the

106
00:04:31,840 --> 00:04:33,840
original frost scheme that we call frost

107
00:04:33,840 --> 00:04:35,360
one

108
00:04:35,360 --> 00:04:36,960
frost two reduces the number of

109
00:04:36,960 --> 00:04:39,520
exponentiations required for signing

110
00:04:39,520 --> 00:04:43,199
from t to one

111
00:04:43,199 --> 00:04:46,000
we proved the security of both frost 1

112
00:04:46,000 --> 00:04:48,720
and frost 2 under the one more discrete

113
00:04:48,720 --> 00:04:50,479
logarithm assumption in the random

114
00:04:50,479 --> 00:04:52,240
oracle model

115
00:04:52,240 --> 00:04:56,240
this assumes a trusted dkg

116
00:04:56,240 --> 00:04:58,560
we proved the security of frost 2

117
00:04:58,560 --> 00:05:00,240
together with the distributed key

118
00:05:00,240 --> 00:05:02,320
generation protocol proposed in the

119
00:05:02,320 --> 00:05:04,479
original frost paper

120
00:05:04,479 --> 00:05:06,080
this allows any number of corrupt

121
00:05:06,080 --> 00:05:08,000
signers and in particular a dishonest

122
00:05:08,000 --> 00:05:11,000
majority

123
00:05:12,000 --> 00:05:15,039
our security framework

124
00:05:15,039 --> 00:05:17,520
introduces a separation in the notions

125
00:05:17,520 --> 00:05:20,400
of security achieved by frost one and

126
00:05:20,400 --> 00:05:21,919
frost ii

127
00:05:21,919 --> 00:05:24,000
but as we'll see both schemes achieve

128
00:05:24,000 --> 00:05:26,080
some of the highest notions of security

129
00:05:26,080 --> 00:05:28,960
in our framework

130
00:05:30,160 --> 00:05:32,000
so now i'd like to talk about frost in a

131
00:05:32,000 --> 00:05:34,000
little more detail

132
00:05:34,000 --> 00:05:36,639
ross stands for flexible round optimized

133
00:05:36,639 --> 00:05:38,880
schnorr threshold signature

134
00:05:38,880 --> 00:05:40,960
and it was introduced by common goldberg

135
00:05:40,960 --> 00:05:44,000
in 2020

136
00:05:44,000 --> 00:05:46,160
it consists of a distributed key

137
00:05:46,160 --> 00:05:47,759
generation protocol

138
00:05:47,759 --> 00:05:50,000
and a concurrently secure two-round

139
00:05:50,000 --> 00:05:53,280
signing protocol

140
00:05:53,280 --> 00:05:55,840
also importantly it outputs a signature

141
00:05:55,840 --> 00:05:58,000
which looks exactly like standard single

142
00:05:58,000 --> 00:06:00,319
party snore so this means that it can be

143
00:06:00,319 --> 00:06:02,080
used as a drop-in replacement anywhere

144
00:06:02,080 --> 00:06:06,280
where schnorr signatures are used

145
00:06:06,479 --> 00:06:07,919
we also note that there were prior

146
00:06:07,919 --> 00:06:11,440
attempts at achieving a two-round secure

147
00:06:11,440 --> 00:06:13,840
threshold schnorr scheme but they were

148
00:06:13,840 --> 00:06:16,000
thwarted by the ros attacks which we

149
00:06:16,000 --> 00:06:19,639
also show are feasible

150
00:06:21,039 --> 00:06:24,720
so frost was first published in 2020

151
00:06:24,720 --> 00:06:26,800
and since then it's being used to secure

152
00:06:26,800 --> 00:06:30,000
cryptocurrency wallets

153
00:06:30,000 --> 00:06:31,600
it is also being standardized through

154
00:06:31,600 --> 00:06:33,520
nist

155
00:06:33,520 --> 00:06:35,600
and there's an ietf draft which is

156
00:06:35,600 --> 00:06:37,840
almost complete

157
00:06:37,840 --> 00:06:39,039
there are also more than five

158
00:06:39,039 --> 00:06:42,318
implementations of frost

159
00:06:44,240 --> 00:06:45,680
now we'll talk a little bit about the

160
00:06:45,680 --> 00:06:48,880
distributed key generation protocol

161
00:06:48,880 --> 00:06:51,840
so we call it ped pop and it consists of

162
00:06:51,840 --> 00:06:53,599
the pedersen dkg

163
00:06:53,599 --> 00:06:56,479
together with proofs of possession

164
00:06:56,479 --> 00:06:57,840
these proofs of possession are

165
00:06:57,840 --> 00:07:00,400
themselves schnorr signatures so this

166
00:07:00,400 --> 00:07:02,080
requires a knowledge of exponent

167
00:07:02,080 --> 00:07:03,680
assumption

168
00:07:03,680 --> 00:07:05,360
this is for simplicity because we did

169
00:07:05,360 --> 00:07:09,039
not want to add rounds to the dkg

170
00:07:09,440 --> 00:07:11,599
it allows any number of corrupt signers

171
00:07:11,599 --> 00:07:15,039
including a dishonest majority

172
00:07:15,520 --> 00:07:17,599
now let's look at the frost construction

173
00:07:17,599 --> 00:07:20,160
which we'll call for us one

174
00:07:20,160 --> 00:07:22,400
we consider that the two out of three

175
00:07:22,400 --> 00:07:25,840
signers are participating

176
00:07:27,280 --> 00:07:30,000
in the first round each signer produces

177
00:07:30,000 --> 00:07:33,599
two nonces so a nods are and announce s

178
00:07:33,599 --> 00:07:35,599
and this is the generator raised to some

179
00:07:35,599 --> 00:07:38,080
uniformly random element r and the same

180
00:07:38,080 --> 00:07:39,759
for s

181
00:07:39,759 --> 00:07:42,080
each party produces these two nonces and

182
00:07:42,080 --> 00:07:45,120
then sends them to the leader

183
00:07:45,120 --> 00:07:46,800
at this point the leader chooses the

184
00:07:46,800 --> 00:07:49,199
message to be signed and sends that

185
00:07:49,199 --> 00:07:51,199
together with the signing set and the

186
00:07:51,199 --> 00:07:54,960
set of nonces for those parties

187
00:07:56,639 --> 00:07:59,840
each signer then computes the following

188
00:07:59,840 --> 00:08:02,000
so they compute a hash which takes us

189
00:08:02,000 --> 00:08:04,080
and put the signer index

190
00:08:04,080 --> 00:08:05,520
the message

191
00:08:05,520 --> 00:08:08,560
the public key output by the dkg as well

192
00:08:08,560 --> 00:08:13,400
as the set of all nonces for all parties

193
00:08:13,440 --> 00:08:15,520
the aggregate nods is computed as a

194
00:08:15,520 --> 00:08:18,400
product of each of the r values the s

195
00:08:18,400 --> 00:08:20,800
values raised to this hash value called

196
00:08:20,800 --> 00:08:22,960
dj

197
00:08:22,960 --> 00:08:25,199
then each party computes the hash of the

198
00:08:25,199 --> 00:08:27,360
aggregate public key the message and the

199
00:08:27,360 --> 00:08:30,240
aggregate nots

200
00:08:32,080 --> 00:08:34,159
they then use this to form their partial

201
00:08:34,159 --> 00:08:35,360
signature

202
00:08:35,360 --> 00:08:37,360
so a partial signature z

203
00:08:37,360 --> 00:08:41,039
equals r plus this hash value d

204
00:08:41,039 --> 00:08:44,640
times s plus the hash value c

205
00:08:44,640 --> 00:08:46,640
times the lagrange coefficient for that

206
00:08:46,640 --> 00:08:50,720
signing set times the secret key

207
00:08:51,200 --> 00:08:52,959
they then send their partial signatures

208
00:08:52,959 --> 00:08:55,279
to the leader

209
00:08:55,279 --> 00:08:57,920
the leader computes the aggregate value

210
00:08:57,920 --> 00:08:59,760
z by just simply adding the partial

211
00:08:59,760 --> 00:09:02,720
signatures together

212
00:09:02,959 --> 00:09:04,800
the final signature consists of the

213
00:09:04,800 --> 00:09:06,880
aggregate nonce r and the aggregate

214
00:09:06,880 --> 00:09:09,519
value z and note that it verifies

215
00:09:09,519 --> 00:09:11,279
exactly like standard single party

216
00:09:11,279 --> 00:09:13,440
schnorr

217
00:09:13,440 --> 00:09:15,360
also note that you can't actually tell

218
00:09:15,360 --> 00:09:17,600
who participated in signing which is

219
00:09:17,600 --> 00:09:21,000
great for privacy

220
00:09:22,000 --> 00:09:23,760
one of the observations that we made in

221
00:09:23,760 --> 00:09:25,839
this work was that you don't actually

222
00:09:25,839 --> 00:09:28,000
need to have a different hash value per

223
00:09:28,000 --> 00:09:30,240
signer so instead you can actually use

224
00:09:30,240 --> 00:09:32,959
the same hash value for all signers

225
00:09:32,959 --> 00:09:34,480
so i've highlighted and read here that

226
00:09:34,480 --> 00:09:37,360
the value d no longer takes as input the

227
00:09:37,360 --> 00:09:39,680
signer index

228
00:09:39,680 --> 00:09:41,279
everything else stays the same

229
00:09:41,279 --> 00:09:43,680
verification stays the same but note

230
00:09:43,680 --> 00:09:45,040
that this does reduce the number of

231
00:09:45,040 --> 00:09:47,600
exponentiations required for signing

232
00:09:47,600 --> 00:09:51,720
from t to one

233
00:09:53,040 --> 00:09:54,560
now we'll talk a little bit about

234
00:09:54,560 --> 00:09:57,519
proving the security of frost 2 together

235
00:09:57,519 --> 00:10:00,480
with the ped pop dkg

236
00:10:00,480 --> 00:10:02,720
so we observed that some of these

237
00:10:02,720 --> 00:10:04,640
reductions in the past have had flaws

238
00:10:04,640 --> 00:10:07,040
due to the complexity of modeling

239
00:10:07,040 --> 00:10:09,600
multiple parties interacting at once and

240
00:10:09,600 --> 00:10:11,519
also trying to extract a solution to

241
00:10:11,519 --> 00:10:13,360
some hard problem

242
00:10:13,360 --> 00:10:15,200
so in particular these reductions kind

243
00:10:15,200 --> 00:10:17,600
of consist of two moving parts

244
00:10:17,600 --> 00:10:19,680
we have to simulate the honest users

245
00:10:19,680 --> 00:10:21,760
with the adversary and we also have to

246
00:10:21,760 --> 00:10:24,399
extract a solution to the hard problem

247
00:10:24,399 --> 00:10:26,240
and our idea was actually to separate

248
00:10:26,240 --> 00:10:29,839
these two aspects of the proof

249
00:10:31,760 --> 00:10:33,920
so it looks a bit like this so we have

250
00:10:33,920 --> 00:10:35,760
frost two signing

251
00:10:35,760 --> 00:10:38,240
and which is a multi-party scheme and we

252
00:10:38,240 --> 00:10:40,800
introduce an intermediate assumption

253
00:10:40,800 --> 00:10:43,040
called the by assumption you can think

254
00:10:43,040 --> 00:10:44,640
of this kind of like a single party

255
00:10:44,640 --> 00:10:47,360
assumption so we first provide a

256
00:10:47,360 --> 00:10:49,839
straight line reduction from multi-party

257
00:10:49,839 --> 00:10:52,399
frost 2 to this kind of single party

258
00:10:52,399 --> 00:10:54,240
assumption

259
00:10:54,240 --> 00:10:56,079
we then prove security from the by

260
00:10:56,079 --> 00:10:57,680
schnauer assumption to the one more

261
00:10:57,680 --> 00:10:59,760
discrete logarithm assumption so this

262
00:10:59,760 --> 00:11:02,000
separates the multi-party aspects from

263
00:11:02,000 --> 00:11:05,920
the rewinding required for this part

264
00:11:05,920 --> 00:11:07,680
then for the ped pop distributed key

265
00:11:07,680 --> 00:11:09,680
generation i mentioned that these uh

266
00:11:09,680 --> 00:11:11,200
proofs of possession are schnorr

267
00:11:11,200 --> 00:11:14,000
signatures so we introduced the schnorr

268
00:11:14,000 --> 00:11:16,480
knowledge of exponent assumption and we

269
00:11:16,480 --> 00:11:18,079
prove it under the discrete logarithm

270
00:11:18,079 --> 00:11:20,480
assumption

271
00:11:20,480 --> 00:11:22,800
note that using ped pop again

272
00:11:22,800 --> 00:11:24,800
allows any number of corrupt signers

273
00:11:24,800 --> 00:11:28,800
including a dishonest majority

274
00:11:28,800 --> 00:11:32,319
and now i'll hand it over to chunky

275
00:11:34,079 --> 00:11:35,440
hello

276
00:11:35,440 --> 00:11:37,839
hello

277
00:11:38,399 --> 00:11:42,399
um yeah so thanks yeah

278
00:11:42,399 --> 00:11:44,880
yeah so uh from

279
00:11:44,880 --> 00:11:46,640
uh from the leaderboards part we saw how

280
00:11:46,640 --> 00:11:48,320
frost protocol work

281
00:11:48,320 --> 00:11:50,639
and now i'm going to um show you a

282
00:11:50,639 --> 00:11:52,800
framework and a security hierarchy that

283
00:11:52,800 --> 00:11:55,360
can be used to analyze like a fully or

284
00:11:55,360 --> 00:11:56,399
partially

285
00:11:56,399 --> 00:11:58,399
incorrectly terrestrial signatures such

286
00:11:58,399 --> 00:12:01,040
as the frog

287
00:12:01,040 --> 00:12:03,360
yeah so before we go into that let me

288
00:12:03,360 --> 00:12:05,040
briefly recall the

289
00:12:05,040 --> 00:12:06,880
uh two motivations

290
00:12:06,880 --> 00:12:08,399
the first

291
00:12:08,399 --> 00:12:10,560
there's no formalization for partially

292
00:12:10,560 --> 00:12:12,880
non-interactive schemes

293
00:12:12,880 --> 00:12:17,040
yet so the original frost paper um a

294
00:12:17,040 --> 00:12:18,560
trader

295
00:12:18,560 --> 00:12:20,160
scheme is a general interactive

296
00:12:20,160 --> 00:12:21,360
protocols

297
00:12:21,360 --> 00:12:23,920
and the simpler abstract abstraction

298
00:12:23,920 --> 00:12:25,920
only exists for fully non-interactive

299
00:12:25,920 --> 00:12:27,680
schemes

300
00:12:27,680 --> 00:12:30,800
and second more importantly

301
00:12:30,800 --> 00:12:32,240
we find that

302
00:12:32,240 --> 00:12:34,560
the existing security notions are weaker

303
00:12:34,560 --> 00:12:36,800
than a scheme can achieve

304
00:12:36,800 --> 00:12:39,519
so in particular uh in a security game

305
00:12:39,519 --> 00:12:41,839
defined by most of previous works

306
00:12:41,839 --> 00:12:44,880
an m is so a message m is considered

307
00:12:44,880 --> 00:12:47,279
signed as long as one on its part is

308
00:12:47,279 --> 00:12:48,800
signed

309
00:12:48,800 --> 00:12:49,600
so

310
00:12:49,600 --> 00:12:52,000
this provides actually a very weak

311
00:12:52,000 --> 00:12:55,040
guarantees when

312
00:12:55,040 --> 00:12:55,839
when

313
00:12:55,839 --> 00:12:59,040
the adversaries does not crop many part

314
00:12:59,040 --> 00:13:00,800
signers

315
00:13:00,800 --> 00:13:02,959
however only a very few

316
00:13:02,959 --> 00:13:05,279
prior works consider

317
00:13:05,279 --> 00:13:08,880
guarantees stronger than this

318
00:13:09,519 --> 00:13:12,480
so i will now first introduce

319
00:13:12,480 --> 00:13:15,279
our definition for the in syntax of

320
00:13:15,279 --> 00:13:18,959
non-interactive structural signature

321
00:13:18,959 --> 00:13:22,320
so in our setting there are n signers

322
00:13:22,320 --> 00:13:24,480
and a one leader

323
00:13:24,480 --> 00:13:26,160
so for simplicity let's consider the

324
00:13:26,160 --> 00:13:27,760
case where n is equal to three and the

325
00:13:27,760 --> 00:13:30,320
threshold t is two

326
00:13:30,320 --> 00:13:34,639
so after dkg the each signer will

327
00:13:34,639 --> 00:13:35,839
get

328
00:13:35,839 --> 00:13:37,839
a shares of the secret key and the

329
00:13:37,839 --> 00:13:40,079
leader will get a public key

330
00:13:40,079 --> 00:13:40,800
and

331
00:13:40,800 --> 00:13:42,320
during the pre-processing run each

332
00:13:42,320 --> 00:13:44,320
signer will send the

333
00:13:44,320 --> 00:13:46,880
tokens to the leader

334
00:13:46,880 --> 00:13:49,680
and then the leader started to create a

335
00:13:49,680 --> 00:13:52,480
leader request which contains a message

336
00:13:52,480 --> 00:13:54,639
m to be signed

337
00:13:54,639 --> 00:13:56,800
and a set of signer

338
00:13:56,800 --> 00:13:58,320
that are involved

339
00:13:58,320 --> 00:14:01,839
so which denoted as assets

340
00:14:01,839 --> 00:14:02,720
which

341
00:14:02,720 --> 00:14:05,120
require to have side the list t

342
00:14:05,120 --> 00:14:06,480
so over here

343
00:14:06,480 --> 00:14:09,519
for example it can be just one and three

344
00:14:09,519 --> 00:14:11,440
and this little request also can change

345
00:14:11,440 --> 00:14:14,160
some auxiliary information

346
00:14:14,160 --> 00:14:16,639
that can depend on pre-processing token

347
00:14:16,639 --> 00:14:19,199
and for example for frost

348
00:14:19,199 --> 00:14:21,040
the auxiliary information adjusts all

349
00:14:21,040 --> 00:14:23,600
the pre-processing tokens

350
00:14:23,600 --> 00:14:25,279
i will set the nouns

351
00:14:25,279 --> 00:14:28,000
for the designated sinus and then either

352
00:14:28,000 --> 00:14:30,399
send a request to all the designated

353
00:14:30,399 --> 00:14:32,560
signers and then each signer replies

354
00:14:32,560 --> 00:14:34,720
with a partial signature

355
00:14:34,720 --> 00:14:36,399
and finally later combine those

356
00:14:36,399 --> 00:14:38,399
signature partial signatures to get a

357
00:14:38,399 --> 00:14:41,920
valid signature for the mathematics

358
00:14:42,000 --> 00:14:44,560
so the security in terms of security we

359
00:14:44,560 --> 00:14:47,120
want to get uh the schemes to have i

360
00:14:47,120 --> 00:14:50,720
guarantee the unfoldability

361
00:14:50,720 --> 00:14:52,079
um

362
00:14:52,079 --> 00:14:54,079
so and uh

363
00:14:54,079 --> 00:14:56,720
so in the uh so in the setting we

364
00:14:56,720 --> 00:14:59,279
consider the leader as the adversary

365
00:14:59,279 --> 00:15:02,160
and so sorry yeah and

366
00:15:02,160 --> 00:15:04,320
they can corrupt um

367
00:15:04,320 --> 00:15:08,320
uh at most t-minus one signers

368
00:15:08,320 --> 00:15:10,880
and we're corrupting means uh just

369
00:15:10,880 --> 00:15:12,720
so the adversary will learn is the

370
00:15:12,720 --> 00:15:14,880
secret key of those signs the crop

371
00:15:14,880 --> 00:15:17,440
designers and then the anniversary will

372
00:15:17,440 --> 00:15:19,360
uh can interact with other audience

373
00:15:19,360 --> 00:15:21,440
signers

374
00:15:21,440 --> 00:15:24,399
and the goal is to output

375
00:15:24,399 --> 00:15:27,519
a signature for the message m star

376
00:15:27,519 --> 00:15:29,519
and here the unforgivability trying to

377
00:15:29,519 --> 00:15:30,720
guarantees

378
00:15:30,720 --> 00:15:31,600
that

379
00:15:31,600 --> 00:15:33,920
the rosary cannot forge any non-trivial

380
00:15:33,920 --> 00:15:35,759
signature

381
00:15:35,759 --> 00:15:37,920
so here the question is uh

382
00:15:37,920 --> 00:15:41,519
what is a trivial signature

383
00:15:41,519 --> 00:15:45,120
so it's the same as to ask

384
00:15:45,839 --> 00:15:48,160
it seem to ask

385
00:15:48,160 --> 00:15:50,560
what signatures are considered to be

386
00:15:50,560 --> 00:15:53,519
issued during the interaction

387
00:15:53,519 --> 00:15:54,399
and

388
00:15:54,399 --> 00:15:57,519
it turns out that uh this was the

389
00:15:57,519 --> 00:15:59,040
major problem we are dealing with in

390
00:15:59,040 --> 00:16:01,920
this work we find it's not easy to

391
00:16:01,920 --> 00:16:04,079
define

392
00:16:04,079 --> 00:16:05,279
the

393
00:16:05,279 --> 00:16:07,680
define it for the structural signature

394
00:16:07,680 --> 00:16:09,839
and also there's no canonical way to do

395
00:16:09,839 --> 00:16:12,000
it

396
00:16:12,399 --> 00:16:14,880
so before we go into that uh i will

397
00:16:14,880 --> 00:16:16,160
introduce

398
00:16:16,160 --> 00:16:18,480
our general framework for modeling the

399
00:16:18,480 --> 00:16:19,759
security

400
00:16:19,759 --> 00:16:21,360
so in

401
00:16:21,360 --> 00:16:23,199
in this work we use a game-based

402
00:16:23,199 --> 00:16:24,959
definition

403
00:16:24,959 --> 00:16:27,360
so we use the theater to know the set of

404
00:16:27,360 --> 00:16:29,920
crop designers

405
00:16:29,920 --> 00:16:32,800
and the interaction between the

406
00:16:32,800 --> 00:16:35,199
so between the adversary and the honest

407
00:16:35,199 --> 00:16:37,839
signers are modeled by

408
00:16:37,839 --> 00:16:41,279
um a true oracles with pp oracle and a p

409
00:16:41,279 --> 00:16:42,639
sign oracle

410
00:16:42,639 --> 00:16:44,560
so for the

411
00:16:44,560 --> 00:16:46,720
so when an affiliate query

412
00:16:46,720 --> 00:16:49,680
and index i to the pp oracle

413
00:16:49,680 --> 00:16:51,440
it sends a returns

414
00:16:51,440 --> 00:16:53,519
tokens for the signer i

415
00:16:53,519 --> 00:16:54,720
and when it

416
00:16:54,720 --> 00:16:57,759
queries the p sign oracle for index i

417
00:16:57,759 --> 00:16:59,279
and the erect

418
00:16:59,279 --> 00:17:02,880
uh it will answer the lrac um

419
00:17:02,880 --> 00:17:05,280
on the behave be on behalf of the

420
00:17:05,280 --> 00:17:07,199
designer i

421
00:17:07,199 --> 00:17:09,919
and here the i have uh must be a honest

422
00:17:09,919 --> 00:17:11,199
signer

423
00:17:11,199 --> 00:17:13,039
and the university can make arbitrary

424
00:17:13,039 --> 00:17:15,039
numbers of curry to them

425
00:17:15,039 --> 00:17:17,359
and here there are three wins if

426
00:17:17,359 --> 00:17:19,439
the final output message and signature

427
00:17:19,439 --> 00:17:22,799
pair is not of trivial faulty okay so

428
00:17:22,799 --> 00:17:24,640
let's come back to the problem of what

429
00:17:24,640 --> 00:17:27,839
is attribute boundary

430
00:17:28,640 --> 00:17:30,559
so here it turns out there so the rough

431
00:17:30,559 --> 00:17:33,520
picture as follows there is a

432
00:17:33,520 --> 00:17:35,679
several ways we can define it

433
00:17:35,679 --> 00:17:38,080
and a different way leads to a different

434
00:17:38,080 --> 00:17:40,080
security levels

435
00:17:40,080 --> 00:17:41,520
and moreover

436
00:17:41,520 --> 00:17:43,679
uh the more strictly the security level

437
00:17:43,679 --> 00:17:46,880
the most restricted the trigger forgery

438
00:17:46,880 --> 00:17:50,080
condition will lead to a stronger

439
00:17:50,080 --> 00:17:51,600
security level

440
00:17:51,600 --> 00:17:53,840
and which will give us a security

441
00:17:53,840 --> 00:17:56,559
hierarchy

442
00:17:57,039 --> 00:17:58,880
so uh

443
00:17:58,880 --> 00:18:01,360
so the starting example is i'm going to

444
00:18:01,360 --> 00:18:03,760
talk about the simplest and the weakest

445
00:18:03,760 --> 00:18:08,320
one in our hierarchy which is the tsuf0

446
00:18:08,320 --> 00:18:11,360
so here we uh let the l denote the set

447
00:18:11,360 --> 00:18:12,880
of

448
00:18:12,880 --> 00:18:15,039
all adversaries queries to the p sign

449
00:18:15,039 --> 00:18:16,480
oracle

450
00:18:16,480 --> 00:18:19,440
and uh so for tsuf0

451
00:18:19,440 --> 00:18:20,400
and

452
00:18:20,400 --> 00:18:22,640
folder is considered to be trivial

453
00:18:22,640 --> 00:18:25,520
if there exists a query to

454
00:18:25,520 --> 00:18:28,240
an l such for the m for the message m

455
00:18:28,240 --> 00:18:29,360
star

456
00:18:29,360 --> 00:18:32,480
so more visibly so if there was three

457
00:18:32,480 --> 00:18:34,720
as long as it makes a query to the p

458
00:18:34,720 --> 00:18:36,799
sign oracle for the amp star

459
00:18:36,799 --> 00:18:38,240
then

460
00:18:38,240 --> 00:18:40,240
um its folder is considered to be

461
00:18:40,240 --> 00:18:43,039
tribute so in other words

462
00:18:43,039 --> 00:18:45,360
uh this yes you have zero guarantees

463
00:18:45,360 --> 00:18:47,600
that as long as the anniversary

464
00:18:47,600 --> 00:18:48,640
um

465
00:18:48,640 --> 00:18:50,080
um so

466
00:18:50,080 --> 00:18:52,799
the adversary can afford the signatures

467
00:18:52,799 --> 00:18:53,760
uh

468
00:18:53,760 --> 00:18:55,280
as uh if

469
00:18:55,280 --> 00:18:57,280
only if there is at least one only

470
00:18:57,280 --> 00:19:00,559
signer that signs m star

471
00:19:00,559 --> 00:19:03,280
and this is notion considered uh by most

472
00:19:03,280 --> 00:19:05,200
of the previous work

473
00:19:05,200 --> 00:19:06,320
and

474
00:19:06,320 --> 00:19:09,280
so when the graphic set is less than t

475
00:19:09,280 --> 00:19:10,400
minus one

476
00:19:10,400 --> 00:19:12,160
firstly that

477
00:19:12,160 --> 00:19:13,520
there are stronger security

478
00:19:13,520 --> 00:19:15,120
considerations

479
00:19:15,120 --> 00:19:17,440
so to give you more intuitions so

480
00:19:17,440 --> 00:19:19,679
consider anniversary

481
00:19:19,679 --> 00:19:22,320
that does not corrupt any signer

482
00:19:22,320 --> 00:19:24,080
and it make a single query to p sign

483
00:19:24,080 --> 00:19:27,360
oracle for m star and then it outputs

484
00:19:27,360 --> 00:19:28,880
um

485
00:19:28,880 --> 00:19:30,960
a signature for m star

486
00:19:30,960 --> 00:19:31,760
so

487
00:19:31,760 --> 00:19:33,440
you can see that this does not root out

488
00:19:33,440 --> 00:19:35,919
by tsuf zero security

489
00:19:35,919 --> 00:19:38,160
but however if you're thinking about it

490
00:19:38,160 --> 00:19:39,360
we're in a

491
00:19:39,360 --> 00:19:41,200
a threshold setting we have a threshold

492
00:19:41,200 --> 00:19:43,679
t so it's reasonable to require that at

493
00:19:43,679 --> 00:19:46,640
least t signers to require to

494
00:19:46,640 --> 00:19:48,799
to answer to get a partial signature

495
00:19:48,799 --> 00:19:52,640
into for it to get the signature

496
00:19:52,640 --> 00:19:55,679
so this leads us to define our next uh

497
00:19:55,679 --> 00:19:57,679
security level

498
00:19:57,679 --> 00:19:58,480
so

499
00:19:58,480 --> 00:20:00,640
um to define it uh

500
00:20:00,640 --> 00:20:03,280
we first introduced a very convenient

501
00:20:03,280 --> 00:20:05,360
notion called mss

502
00:20:05,360 --> 00:20:08,400
for so intuitively this

503
00:20:08,400 --> 00:20:12,080
um the mss force a message m represents

504
00:20:12,080 --> 00:20:13,520
a set of

505
00:20:13,520 --> 00:20:17,200
only signers that assigns m

506
00:20:17,200 --> 00:20:19,520
so with this notion we can define the

507
00:20:19,520 --> 00:20:23,120
tsuf0 simply as um

508
00:20:23,120 --> 00:20:24,720
so

509
00:20:24,720 --> 00:20:27,520
so the trigonophobic condition is

510
00:20:27,520 --> 00:20:28,320
the

511
00:20:28,320 --> 00:20:31,360
size of ms for m star is greater than

512
00:20:31,360 --> 00:20:32,840
zero

513
00:20:32,840 --> 00:20:37,440
and so to extend to tsuf1 security

514
00:20:37,440 --> 00:20:39,039
um

515
00:20:39,039 --> 00:20:40,240
um

516
00:20:40,240 --> 00:20:41,039
the

517
00:20:41,039 --> 00:20:42,559
the trigger folder condition is

518
00:20:42,559 --> 00:20:46,240
transitioned as the size of ms s for m

519
00:20:46,240 --> 00:20:48,640
star is at least t minus the size of

520
00:20:48,640 --> 00:20:51,440
corrupted party

521
00:20:52,480 --> 00:20:55,760
and this is a notion uh so this security

522
00:20:55,760 --> 00:20:58,880
is considered by a few prior works

523
00:20:58,880 --> 00:21:01,679
and so then the next question is uh do

524
00:21:01,679 --> 00:21:04,799
we go even stronger

525
00:21:04,799 --> 00:21:07,280
so um to answer this we have to thinking

526
00:21:07,280 --> 00:21:10,080
about like what is missing in this tsu

527
00:21:10,080 --> 00:21:11,120
f1

528
00:21:11,120 --> 00:21:12,799
and it's turned out that

529
00:21:12,799 --> 00:21:15,039
the over 3

530
00:21:15,039 --> 00:21:17,760
it's actually possible in this tsuf1

531
00:21:17,760 --> 00:21:19,440
setting to

532
00:21:19,440 --> 00:21:21,200
um

533
00:21:21,200 --> 00:21:23,440
to combine different partial signatures

534
00:21:23,440 --> 00:21:26,320
plus message m star but from different l

535
00:21:26,320 --> 00:21:28,400
rack

536
00:21:28,400 --> 00:21:30,960
and it's natural that uh together we to

537
00:21:30,960 --> 00:21:33,039
root out these

538
00:21:33,039 --> 00:21:35,760
um so this uh

539
00:21:35,760 --> 00:21:38,080
this lets to define securities beyond

540
00:21:38,080 --> 00:21:41,039
the tsuf1

541
00:21:41,039 --> 00:21:43,280
um so our first

542
00:21:43,280 --> 00:21:44,000
and

543
00:21:44,000 --> 00:21:45,600
another

544
00:21:45,600 --> 00:21:48,000
meaning notion called rss

545
00:21:48,000 --> 00:21:50,240
so it was similar to mss but it's

546
00:21:50,240 --> 00:21:53,760
defined for each individual

547
00:21:53,760 --> 00:21:57,200
leader request instead of the message

548
00:21:57,200 --> 00:21:59,679
so intuitively this means the set of

549
00:21:59,679 --> 00:22:03,919
only signer that answered the lrac

550
00:22:04,320 --> 00:22:07,600
and now um so the next security level

551
00:22:07,600 --> 00:22:09,919
defined is called tsuf2

552
00:22:09,919 --> 00:22:12,640
and it's defined as the

553
00:22:12,640 --> 00:22:14,480
so a message signature pair is

554
00:22:14,480 --> 00:22:16,960
considered trivial if and only if the

555
00:22:16,960 --> 00:22:19,600
existing leader requests such that

556
00:22:19,600 --> 00:22:22,320
uh leader requests for message m

557
00:22:22,320 --> 00:22:24,799
and it was answered

558
00:22:24,799 --> 00:22:27,679
by a number of honest signers that is

559
00:22:27,679 --> 00:22:28,720
least

560
00:22:28,720 --> 00:22:32,000
t minus the size of corrupt parties

561
00:22:32,000 --> 00:22:35,760
and intuitively this

562
00:22:35,760 --> 00:22:38,480
this will like rule out the possibility

563
00:22:38,480 --> 00:22:41,120
to combine different

564
00:22:41,120 --> 00:22:44,320
partial signatures from different lraps

565
00:22:44,320 --> 00:22:46,159
and from this we can go all the way to

566
00:22:46,159 --> 00:22:50,320
the top of our security hierarchy

567
00:22:51,039 --> 00:22:53,760
which we call tsuf4 where the difference

568
00:22:53,760 --> 00:22:58,159
from tsuf2 is that now the rss for l

569
00:22:58,159 --> 00:23:00,559
rack is required to be all the only

570
00:23:00,559 --> 00:23:02,159
signers

571
00:23:02,159 --> 00:23:04,720
that is supposed to be query so in other

572
00:23:04,720 --> 00:23:09,760
words so this security guarantees that

573
00:23:09,760 --> 00:23:14,159
as um so inversely uh can um

574
00:23:14,159 --> 00:23:16,640
when it makes curry to erect they have

575
00:23:16,640 --> 00:23:18,480
to

576
00:23:18,480 --> 00:23:21,200
um send queries to all

577
00:23:21,200 --> 00:23:22,720
the uh

578
00:23:22,720 --> 00:23:25,039
or the only signer that is supposed to

579
00:23:25,039 --> 00:23:27,919
be sending together signature

580
00:23:27,919 --> 00:23:29,120
and

581
00:23:29,120 --> 00:23:32,239
the highest to consider

582
00:23:32,480 --> 00:23:34,720
and we also consider uh about like

583
00:23:34,720 --> 00:23:37,200
stronger affordability in this work

584
00:23:37,200 --> 00:23:38,559
so for

585
00:23:38,559 --> 00:23:40,159
which is analogous to the strong

586
00:23:40,159 --> 00:23:43,039
affordability for a signature scheme

587
00:23:43,039 --> 00:23:45,360
so for signature schemes

588
00:23:45,360 --> 00:23:47,919
the stronger forgivability is defined as

589
00:23:47,919 --> 00:23:49,039
um

590
00:23:49,039 --> 00:23:50,559
um so the

591
00:23:50,559 --> 00:23:52,000
so anniversary

592
00:23:52,000 --> 00:23:54,799
get the signature from a signer

593
00:23:54,799 --> 00:23:56,480
um even if you get a signature for

594
00:23:56,480 --> 00:23:58,960
message m it is not possible for it to

595
00:23:58,960 --> 00:23:59,919
forge

596
00:23:59,919 --> 00:24:02,559
a different signature for n

597
00:24:02,559 --> 00:24:05,520
however find it it's not easy to

598
00:24:05,520 --> 00:24:07,919
define it for stressful signature

599
00:24:07,919 --> 00:24:09,440
because now

600
00:24:09,440 --> 00:24:12,320
we have a partial signature instead of a

601
00:24:12,320 --> 00:24:15,520
thing a real signature sent by signer so

602
00:24:15,520 --> 00:24:17,279
it was unclear which signature is

603
00:24:17,279 --> 00:24:20,159
actually being issued

604
00:24:20,240 --> 00:24:22,000
therefore

605
00:24:22,000 --> 00:24:23,520
we have to reach

606
00:24:23,520 --> 00:24:26,640
so we'll restrict ourselves to a special

607
00:24:26,640 --> 00:24:27,919
class of

608
00:24:27,919 --> 00:24:31,600
schemes which has determination

609
00:24:31,600 --> 00:24:34,159
which means that

610
00:24:34,159 --> 00:24:36,240
for each public key and the leader

611
00:24:36,240 --> 00:24:38,400
request there is a unique message and

612
00:24:38,400 --> 00:24:41,600
signifier that is supposed to be

613
00:24:41,600 --> 00:24:45,200
issued if all the parties

614
00:24:45,200 --> 00:24:45,600
follow are

615
00:24:45,600 --> 00:24:47,440
protocol

616
00:24:47,440 --> 00:24:50,080
and we denote this map by phi

617
00:24:50,080 --> 00:24:52,400
notice here that this n must be equal to

618
00:24:52,400 --> 00:24:54,480
the leader uh the method containing a

619
00:24:54,480 --> 00:24:56,000
leader request

620
00:24:56,000 --> 00:24:58,559
and also note that it does not mean that

621
00:24:58,559 --> 00:25:02,559
the signature have to be deterministic

622
00:25:02,559 --> 00:25:05,360
have to be unique to each message things

623
00:25:05,360 --> 00:25:06,159
like

624
00:25:06,159 --> 00:25:08,000
this signature can be differed given a

625
00:25:08,000 --> 00:25:10,960
different lrac

626
00:25:11,039 --> 00:25:13,679
and the example for schemes such as

627
00:25:13,679 --> 00:25:17,440
schemes including frost one and two

628
00:25:17,679 --> 00:25:20,240
and with the help of this five function

629
00:25:20,240 --> 00:25:22,000
we can define a stronger forgibility

630
00:25:22,000 --> 00:25:27,200
version of the cross the tsuf2 and tsuf4

631
00:25:27,200 --> 00:25:29,120
where the difference are the highlighted

632
00:25:29,120 --> 00:25:30,559
part

633
00:25:30,559 --> 00:25:32,640
um

634
00:25:32,640 --> 00:25:36,000
and so uh in so in short like

635
00:25:36,000 --> 00:25:37,039
so the

636
00:25:37,039 --> 00:25:39,279
so it changed the

637
00:25:39,279 --> 00:25:40,720
when you're tracking the so the

638
00:25:40,720 --> 00:25:42,000
difference is that when you're tracking

639
00:25:42,000 --> 00:25:42,960
the

640
00:25:42,960 --> 00:25:44,320
uh

641
00:25:44,320 --> 00:25:46,559
to your forgery condition you only check

642
00:25:46,559 --> 00:25:48,960
you only check the leader request

643
00:25:48,960 --> 00:25:50,960
such that it was direct exactly

644
00:25:50,960 --> 00:25:54,799
corresponding to the output forgery

645
00:25:54,880 --> 00:25:58,559
now here's the full picture of

646
00:25:58,559 --> 00:25:59,360
our

647
00:25:59,360 --> 00:26:01,760
uh our security hierarchy

648
00:26:01,760 --> 00:26:03,360
um

649
00:26:03,360 --> 00:26:05,760
so the arrow from the a to b represents

650
00:26:05,760 --> 00:26:09,440
the security a implies b

651
00:26:09,440 --> 00:26:11,919
so i will now briefly mention the

652
00:26:11,919 --> 00:26:13,520
the result we're getting based on this

653
00:26:13,520 --> 00:26:15,120
hierarchy

654
00:26:15,120 --> 00:26:18,159
the first will show a loose reduction

655
00:26:18,159 --> 00:26:22,480
from a tsuf0 to psuf1 with a factor of

656
00:26:22,480 --> 00:26:24,400
n choose t

657
00:26:24,400 --> 00:26:25,360
yeah

658
00:26:25,360 --> 00:26:29,440
and uh for bls we show um that it is tsc

659
00:26:29,440 --> 00:26:33,279
uf one secure but not here you have two

660
00:26:33,279 --> 00:26:35,440
and this is showed uh

661
00:26:35,440 --> 00:26:37,919
the security is proved under the

662
00:26:37,919 --> 00:26:39,600
pvc dh assumption with the new

663
00:26:39,600 --> 00:26:41,520
assumption we proposed in the random

664
00:26:41,520 --> 00:26:43,440
oracle model

665
00:26:43,440 --> 00:26:45,840
and for us one for frost one we show

666
00:26:45,840 --> 00:26:47,279
that

667
00:26:47,279 --> 00:26:50,480
it is tsuf3 secure but not here yes you

668
00:26:50,480 --> 00:26:52,480
have four sig

669
00:26:52,480 --> 00:26:55,200
and for frost two it showed is ps as you

670
00:26:55,200 --> 00:26:56,880
have two secure but not yes you have

671
00:26:56,880 --> 00:26:58,559
three secure

672
00:26:58,559 --> 00:27:00,880
um so from this you can see a separation

673
00:27:00,880 --> 00:27:03,440
from the security of frost one and two

674
00:27:03,440 --> 00:27:04,960
and we proved their security under the

675
00:27:04,960 --> 00:27:06,960
one multilog assumption in the random

676
00:27:06,960 --> 00:27:09,120
oracle model

677
00:27:09,120 --> 00:27:11,760
so note here that all previous work for

678
00:27:11,760 --> 00:27:14,480
os and frostic only consider psu of zero

679
00:27:14,480 --> 00:27:16,720
security

680
00:27:16,720 --> 00:27:18,480
and finally we also show a general

681
00:27:18,480 --> 00:27:20,799
transformation from ts

682
00:27:20,799 --> 00:27:22,240
from the third level security to the

683
00:27:22,240 --> 00:27:25,360
force level security

684
00:27:25,919 --> 00:27:26,960
uh so

685
00:27:26,960 --> 00:27:28,799
finally i would like to

686
00:27:28,799 --> 00:27:29,679
give you

687
00:27:29,679 --> 00:27:32,000
uh some brief intuition about the

688
00:27:32,000 --> 00:27:35,840
separation between the frost one and two

689
00:27:35,840 --> 00:27:37,440
so let's consider the following

690
00:27:37,440 --> 00:27:40,080
anniversary for frost two

691
00:27:40,080 --> 00:27:42,240
so in the setting there is a

692
00:27:42,240 --> 00:27:43,840
four signers

693
00:27:43,840 --> 00:27:46,640
and the threshold is three

694
00:27:46,640 --> 00:27:47,760
so

695
00:27:47,760 --> 00:27:49,679
then the anniversary first crop the

696
00:27:49,679 --> 00:27:51,760
parties three and four

697
00:27:51,760 --> 00:27:54,320
sorry the sign is three and four and it

698
00:27:54,320 --> 00:27:57,520
makes two queries to the p uh pp oracle

699
00:27:57,520 --> 00:27:58,960
and getting the

700
00:27:58,960 --> 00:28:01,360
tokens for diner one and token was

701
00:28:01,360 --> 00:28:03,918
signed at 2.

702
00:28:04,000 --> 00:28:06,640
then it created a leader request with a

703
00:28:06,640 --> 00:28:09,120
message m star and the designated signer

704
00:28:09,120 --> 00:28:11,440
is one two and three

705
00:28:11,440 --> 00:28:13,919
and then it sets the for the token part

706
00:28:13,919 --> 00:28:15,440
it sets the

707
00:28:15,440 --> 00:28:16,720
token for

708
00:28:16,720 --> 00:28:18,880
party one and two honestly

709
00:28:18,880 --> 00:28:19,679
but

710
00:28:19,679 --> 00:28:23,039
he sent set a token for

711
00:28:23,039 --> 00:28:25,360
party three in the malicious way such

712
00:28:25,360 --> 00:28:27,919
that it can and only need to make one

713
00:28:27,919 --> 00:28:29,120
query to

714
00:28:29,120 --> 00:28:32,159
assign a one to get a valid signature

715
00:28:32,159 --> 00:28:34,240
so why this is interesting

716
00:28:34,240 --> 00:28:36,880
well we find that this attack is not

717
00:28:36,880 --> 00:28:39,919
possible for frost one so for first one

718
00:28:39,919 --> 00:28:41,679
it was perhaps the query both sine of

719
00:28:41,679 --> 00:28:44,000
one and sine of two

720
00:28:44,000 --> 00:28:47,600
and in general it's uh required that

721
00:28:47,600 --> 00:28:49,840
uh it to make queries to all the honest

722
00:28:49,840 --> 00:28:51,440
signers that

723
00:28:51,440 --> 00:28:55,360
who says tokens are honestly sad

724
00:28:55,360 --> 00:28:56,159
so

725
00:28:56,159 --> 00:28:58,640
this uh subtotal

726
00:28:58,640 --> 00:29:00,880
security consideration actually leads us

727
00:29:00,880 --> 00:29:04,159
to define the psuf3 secure which is

728
00:29:04,159 --> 00:29:08,240
satisfied by frost one but not cross two

729
00:29:08,240 --> 00:29:11,200
and to conclude uh here's

730
00:29:11,200 --> 00:29:14,799
a few highlights of the main

731
00:29:14,799 --> 00:29:16,880
contribution of this work and for the

732
00:29:16,880 --> 00:29:18,960
future work it's interesting

733
00:29:18,960 --> 00:29:21,679
to know that what are the applications

734
00:29:21,679 --> 00:29:25,039
for each of our security level

735
00:29:25,039 --> 00:29:26,880
and other interesting questions include

736
00:29:26,880 --> 00:29:29,919
like how to add adaptive security or how

737
00:29:29,919 --> 00:29:32,880
to consider the uc models

738
00:29:32,880 --> 00:29:36,320
and also uh they're possible to also

739
00:29:36,320 --> 00:29:38,880
capture the general dkg protocol in this

740
00:29:38,880 --> 00:29:40,880
framework

741
00:29:40,880 --> 00:29:42,000
so that's

742
00:29:42,000 --> 00:29:43,840
yeah that's all for the talk thank you

743
00:29:43,840 --> 00:29:47,320
thank you for this

744
00:29:57,919 --> 00:30:01,279
hello yeah please go ahead hello uh

745
00:30:01,279 --> 00:30:03,279
thank you for the nice talk i wanted to

746
00:30:03,279 --> 00:30:05,279
ask with respect to

747
00:30:05,279 --> 00:30:07,600
the future work adaptive security do you

748
00:30:07,600 --> 00:30:09,760
have any intuition on whether you may be

749
00:30:09,760 --> 00:30:11,520
able to do it with the current number of

750
00:30:11,520 --> 00:30:12,640
rounds

751
00:30:12,640 --> 00:30:14,720
or whether you might have to increase

752
00:30:14,720 --> 00:30:15,760
the number of rounds to have an

753
00:30:15,760 --> 00:30:18,559
adaptively secure protocol

754
00:30:18,559 --> 00:30:19,679
uh

755
00:30:19,679 --> 00:30:22,559
yeah thanks for the question um yeah

756
00:30:22,559 --> 00:30:25,760
we're we we're not like yeah we're not

757
00:30:25,760 --> 00:30:27,039
like doing

758
00:30:27,039 --> 00:30:30,080
yeah have many results on adapted now

759
00:30:30,080 --> 00:30:32,720
uh and i

760
00:30:32,720 --> 00:30:36,080
uh i think yeah it was hard to prove the

761
00:30:36,080 --> 00:30:38,080
like frauds have adapted security for

762
00:30:38,080 --> 00:30:40,880
now because of like um

763
00:30:40,880 --> 00:30:42,799
in the standard like i'm proving the

764
00:30:42,799 --> 00:30:44,960
standard model and you need the

765
00:30:44,960 --> 00:30:47,360
windings and then you

766
00:30:47,360 --> 00:30:49,520
you cannot yeah so the there are some

767
00:30:49,520 --> 00:30:52,639
technical difficulties there

768
00:30:56,320 --> 00:30:58,080
thanks for the nice talk so i have a

769
00:30:58,080 --> 00:31:00,080
question about the first two so you can

770
00:31:00,080 --> 00:31:02,080
understand correctly your optimization

771
00:31:02,080 --> 00:31:03,679
relates to

772
00:31:03,679 --> 00:31:06,000
random questions or

773
00:31:06,000 --> 00:31:08,399
aggregating the random nonsense

774
00:31:08,399 --> 00:31:10,159
um in that case like is it okay to

775
00:31:10,159 --> 00:31:12,799
derive the random quotient by hashing

776
00:31:12,799 --> 00:31:15,519
the product of rs and s or do you need

777
00:31:15,519 --> 00:31:16,720
to

778
00:31:16,720 --> 00:31:19,120
hash all these separately that's a good

779
00:31:19,120 --> 00:31:21,600
question um so because we introduced

780
00:31:21,600 --> 00:31:23,519
this intermediate assumption the by

781
00:31:23,519 --> 00:31:24,880
schnorr assumption

782
00:31:24,880 --> 00:31:27,039
um you actually need to have all of the

783
00:31:27,039 --> 00:31:29,200
nonces be separate i should note though

784
00:31:29,200 --> 00:31:30,960
that this isn't necessarily the case if

785
00:31:30,960 --> 00:31:32,640
you consider the multi-sig version of

786
00:31:32,640 --> 00:31:34,159
this then you can actually do the

787
00:31:34,159 --> 00:31:35,360
combination

788
00:31:35,360 --> 00:31:37,120
okay thank you that's very interesting

789
00:31:37,120 --> 00:31:38,640
thank you

790
00:31:38,640 --> 00:31:40,480
yeah um thank you very much for the talk

791
00:31:40,480 --> 00:31:42,320
i i just wanted to ask it looked like

792
00:31:42,320 --> 00:31:44,080
from some of the like between your

793
00:31:44,080 --> 00:31:46,240
security levels the separation was like

794
00:31:46,240 --> 00:31:48,720
oh and this one it's enough to get

795
00:31:48,720 --> 00:31:50,159
um

796
00:31:50,159 --> 00:31:51,279
like

797
00:31:51,279 --> 00:31:53,600
answers for this please sign this

798
00:31:53,600 --> 00:31:56,159
message corey for this lrec but then for

799
00:31:56,159 --> 00:31:57,840
other ones you needed them all to answer

800
00:31:57,840 --> 00:31:59,760
like the same specific lrex so the

801
00:31:59,760 --> 00:32:02,640
adversary couldn't append for like the

802
00:32:02,640 --> 00:32:05,440
servers that he knows like the partial

803
00:32:05,440 --> 00:32:07,200
key couldn't append

804
00:32:07,200 --> 00:32:09,360
um his signatures the signatures he got

805
00:32:09,360 --> 00:32:10,799
from the honest player i didn't

806
00:32:10,799 --> 00:32:12,399
understand the significance of this

807
00:32:12,399 --> 00:32:15,200
since the adversary can like send any l

808
00:32:15,200 --> 00:32:17,120
wreck so he can send the same l wreck to

809
00:32:17,120 --> 00:32:18,240
himself

810
00:32:18,240 --> 00:32:20,880
and then hence sign also i i think i

811
00:32:20,880 --> 00:32:22,720
missed level three

812
00:32:22,720 --> 00:32:25,840
i only saw levels one two and four

813
00:32:25,840 --> 00:32:28,799
yeah oh yeah sorry uh we yeah i accept

814
00:32:28,799 --> 00:32:29,919
the

815
00:32:29,919 --> 00:32:32,320
uh the the level three yeah because it's

816
00:32:32,320 --> 00:32:35,120
more technical

817
00:32:35,200 --> 00:32:36,480
and for the

818
00:32:36,480 --> 00:32:38,480
yeah for the question of yeah so the

819
00:32:38,480 --> 00:32:40,720
signing you mean like the university can

820
00:32:40,720 --> 00:32:43,279
choose the l rack itself so like it's

821
00:32:43,279 --> 00:32:44,000
like

822
00:32:44,000 --> 00:32:45,919
you can so you can choose that rack so

823
00:32:45,919 --> 00:32:48,240
like in include all the property party

824
00:32:48,240 --> 00:32:49,919
has is that what you're right so he can

825
00:32:49,919 --> 00:32:51,840
he can send the same l wreck to himself

826
00:32:51,840 --> 00:32:53,760
that he just sent to them to the honest

827
00:32:53,760 --> 00:32:55,279
players and got the answer for and then

828
00:32:55,279 --> 00:32:56,880
he can append so i didn't see like the

829
00:32:56,880 --> 00:32:58,159
separation

830
00:32:58,159 --> 00:33:00,399
and uh yeah i see so so

831
00:33:00,399 --> 00:33:02,640
um it prevents some attack like so

832
00:33:02,640 --> 00:33:04,799
diversity they don't actually

833
00:33:04,799 --> 00:33:06,720
do this so they they send different

834
00:33:06,720 --> 00:33:08,840
l-rack to different party

835
00:33:08,840 --> 00:33:12,640
um for some reason so and then like we

836
00:33:12,640 --> 00:33:15,760
want to like show that it's not possible

837
00:33:15,760 --> 00:33:18,960
like you just you just send like like

838
00:33:18,960 --> 00:33:21,360
different erect to just each one of them

839
00:33:21,360 --> 00:33:23,600
and then like each one they just feel

840
00:33:23,600 --> 00:33:27,679
they just receive one but they're not

841
00:33:27,679 --> 00:33:29,679
um

842
00:33:29,679 --> 00:33:31,760
yeah so it basically prevents there's

843
00:33:31,760 --> 00:33:34,080
some there's some basically it prevents

844
00:33:34,080 --> 00:33:37,279
adversary from like um being favorable

845
00:33:37,279 --> 00:33:39,120
with respect to its lrx like there's

846
00:33:39,120 --> 00:33:40,399
some attack that it prevents and we can

847
00:33:40,399 --> 00:33:42,960
take this later yeah

848
00:33:42,960 --> 00:33:45,519
thank you guys very much for the talk

849
00:33:45,519 --> 00:33:46,480
thanks

850
00:33:46,480 --> 00:33:50,840
so let's uh thank the speakers again

851
00:34:45,679 --> 00:34:47,199
the next and the last talk in this

852
00:34:47,199 --> 00:34:48,719
session is threshold signatures with

853
00:34:48,719 --> 00:34:50,399
private accountability

854
00:34:50,399 --> 00:34:52,399
by chelsea acomolo and then bonnie and

855
00:34:52,399 --> 00:34:55,520
chelsea will give the talk

856
00:34:55,520 --> 00:34:59,320
once the slides are there

857
00:35:42,640 --> 00:35:45,680
all right you're good to go

858
00:35:45,680 --> 00:35:48,079
okay uh hi everyone i'm chelsea comlow

859
00:35:48,079 --> 00:35:50,880
and i'm here to present joint work with

860
00:35:50,880 --> 00:35:54,240
dan bonet uh and this work is on private

861
00:35:54,240 --> 00:35:56,240
signatures or threshold signatures with

862
00:35:56,240 --> 00:35:58,960
private accountability uh and our eprint

863
00:35:58,960 --> 00:36:01,520
is coming soon so

864
00:36:01,520 --> 00:36:04,480
uh watch out for that

865
00:36:05,839 --> 00:36:07,200
so we just looked at threshold

866
00:36:07,200 --> 00:36:10,079
signatures in the past talk um so i'll

867
00:36:10,079 --> 00:36:12,960
just recap them briefly just in case you

868
00:36:12,960 --> 00:36:15,359
forgot so what a threshold signature

869
00:36:15,359 --> 00:36:17,200
scheme is is it's a public private

870
00:36:17,200 --> 00:36:18,240
scheme

871
00:36:18,240 --> 00:36:20,320
where you have some secret key that's

872
00:36:20,320 --> 00:36:22,960
partitioned among the set of parties

873
00:36:22,960 --> 00:36:24,320
and so here we look at a two out of

874
00:36:24,320 --> 00:36:26,400
three scheme there's three total parties

875
00:36:26,400 --> 00:36:27,440
um

876
00:36:27,440 --> 00:36:29,359
and then the threshold in the scheme is

877
00:36:29,359 --> 00:36:30,640
is two

878
00:36:30,640 --> 00:36:33,599
and um here the public key uh represents

879
00:36:33,599 --> 00:36:35,359
the entire group so here we have one

880
00:36:35,359 --> 00:36:37,599
single public key and then uh private

881
00:36:37,599 --> 00:36:40,000
keys shared amongst all these parties

882
00:36:40,000 --> 00:36:42,480
and to sign um

883
00:36:42,480 --> 00:36:43,280
you

884
00:36:43,280 --> 00:36:44,960
basically have a message coming in and

885
00:36:44,960 --> 00:36:46,560
then each of the signers sends a

886
00:36:46,560 --> 00:36:47,920
signature share

887
00:36:47,920 --> 00:36:50,160
to the combiner and so what's important

888
00:36:50,160 --> 00:36:52,400
here is that out of the three total

889
00:36:52,400 --> 00:36:54,400
parties um two of these parties are

890
00:36:54,400 --> 00:36:56,800
required to send signature shares

891
00:36:56,800 --> 00:36:58,480
and then the combiner outputs a

892
00:36:58,480 --> 00:37:02,240
signature that represents the group

893
00:37:03,200 --> 00:37:04,800
and what's nice about these types of

894
00:37:04,800 --> 00:37:06,480
schemes is that

895
00:37:06,480 --> 00:37:08,400
when participants perform signing

896
00:37:08,400 --> 00:37:10,160
they're not actually sending secret key

897
00:37:10,160 --> 00:37:12,800
material uh over the wire to each other

898
00:37:12,800 --> 00:37:14,960
and so um what's nice is that secret key

899
00:37:14,960 --> 00:37:17,599
material stays local and they can really

900
00:37:17,599 --> 00:37:20,000
use like generally like public but

901
00:37:20,000 --> 00:37:22,000
authenticated channels in order to send

902
00:37:22,000 --> 00:37:22,800
uh

903
00:37:22,800 --> 00:37:24,160
or to communicate with each other when

904
00:37:24,160 --> 00:37:27,200
performing this protocol

905
00:37:28,240 --> 00:37:31,520
so looking at the literature um there

906
00:37:31,520 --> 00:37:33,599
what this is something that we formalize

907
00:37:33,599 --> 00:37:34,880
in our work

908
00:37:34,880 --> 00:37:36,960
but there's actually two types of what

909
00:37:36,960 --> 00:37:38,560
are actually mutually exclusive

910
00:37:38,560 --> 00:37:40,480
threshold schemes uh in the literature

911
00:37:40,480 --> 00:37:42,400
today

912
00:37:42,400 --> 00:37:44,480
so the first type of threshold scheme in

913
00:37:44,480 --> 00:37:46,560
the literature is what we call a private

914
00:37:46,560 --> 00:37:49,280
threshold scheme or pts and we'll look

915
00:37:49,280 --> 00:37:51,520
at next what privacy actually means but

916
00:37:51,520 --> 00:37:53,119
just keep in your mind this is sort of

917
00:37:53,119 --> 00:37:55,839
one category of threshold scheme

918
00:37:55,839 --> 00:37:58,160
and then the second category is

919
00:37:58,160 --> 00:38:00,079
an accountable threshold scheme and we

920
00:38:00,079 --> 00:38:02,800
refer to this as an ats

921
00:38:02,800 --> 00:38:04,720
and in the literature you can also think

922
00:38:04,720 --> 00:38:06,560
about these as um

923
00:38:06,560 --> 00:38:08,800
accountable subgroup multi-signatures so

924
00:38:08,800 --> 00:38:09,920
that's sort of the name that's been

925
00:38:09,920 --> 00:38:11,760
given to them in the literature but we

926
00:38:11,760 --> 00:38:16,160
call these ats's really for symmetry

927
00:38:17,440 --> 00:38:19,520
so what do you you might say like okay

928
00:38:19,520 --> 00:38:21,440
pts versus ats how do these actually

929
00:38:21,440 --> 00:38:22,480
differ

930
00:38:22,480 --> 00:38:25,599
so with the pts um

931
00:38:25,599 --> 00:38:27,280
there's or with each of these schemes

932
00:38:27,280 --> 00:38:28,720
there's two types of information that we

933
00:38:28,720 --> 00:38:31,440
care about the first type of information

934
00:38:31,440 --> 00:38:33,839
is the signer quorum and the second type

935
00:38:33,839 --> 00:38:36,000
of information is the threshold

936
00:38:36,000 --> 00:38:38,560
so uh really the way that these schemes

937
00:38:38,560 --> 00:38:41,200
differ is what information is exposed to

938
00:38:41,200 --> 00:38:42,240
who

939
00:38:42,240 --> 00:38:45,520
so for pts on the signing forum uh is

940
00:38:45,520 --> 00:38:47,440
not learned either by the public so

941
00:38:47,440 --> 00:38:49,119
someone who isn't allowed to participate

942
00:38:49,119 --> 00:38:50,560
in the signing scheme

943
00:38:50,560 --> 00:38:53,599
or signers so looking at a signature

944
00:38:53,599 --> 00:38:56,160
after it's been published you can't see

945
00:38:56,160 --> 00:38:57,760
who participated in that signing

946
00:38:57,760 --> 00:38:59,760
operation

947
00:38:59,760 --> 00:39:01,520
and then for the threshold looking at a

948
00:39:01,520 --> 00:39:03,359
signature after it's been published the

949
00:39:03,359 --> 00:39:05,440
public also doesn't learn the threshold

950
00:39:05,440 --> 00:39:06,880
but if you're a signer you trivially

951
00:39:06,880 --> 00:39:07,920
learn the threshold just by

952
00:39:07,920 --> 00:39:11,280
participating in the signing protocol

953
00:39:11,280 --> 00:39:13,599
for an ats all this information is

954
00:39:13,599 --> 00:39:14,960
learned by everyone so once the

955
00:39:14,960 --> 00:39:16,400
signature's been published you're able

956
00:39:16,400 --> 00:39:18,640
to kind of learn everything um whether

957
00:39:18,640 --> 00:39:20,160
or not you're allowed to be a signer or

958
00:39:20,160 --> 00:39:22,399
not

959
00:39:23,839 --> 00:39:26,000
and so really uh what we do in this work

960
00:39:26,000 --> 00:39:28,160
our major contribution is we introduce

961
00:39:28,160 --> 00:39:30,560
what we call a taps and this is a new

962
00:39:30,560 --> 00:39:32,640
type of threshold signature so i want to

963
00:39:32,640 --> 00:39:35,040
emphasize that um this is kind of a new

964
00:39:35,040 --> 00:39:37,440
primitive to the threshold signature

965
00:39:37,440 --> 00:39:39,520
scheme literature

966
00:39:39,520 --> 00:39:41,440
and you might say okay what is the taps

967
00:39:41,440 --> 00:39:42,400
well

968
00:39:42,400 --> 00:39:45,280
uh it's really like combining these two

969
00:39:45,280 --> 00:39:47,119
notions so we talked about privacy and

970
00:39:47,119 --> 00:39:49,119
accountability and what etaps does is it

971
00:39:49,119 --> 00:39:50,960
allows for both of these notions to be

972
00:39:50,960 --> 00:39:53,440
achieved

973
00:39:54,160 --> 00:39:56,560
so like a pts um

974
00:39:56,560 --> 00:39:58,880
for a taps the public does not learn the

975
00:39:58,880 --> 00:40:02,240
signing forum or the threshold so to the

976
00:40:02,240 --> 00:40:06,640
public a taps looks exactly like a pts

977
00:40:06,640 --> 00:40:09,359
but like in ats the signing forum can be

978
00:40:09,359 --> 00:40:12,000
recovered by a designated entity

979
00:40:12,000 --> 00:40:13,920
so essentially the differentiator here

980
00:40:13,920 --> 00:40:16,319
is that if you're a designated entity

981
00:40:16,319 --> 00:40:17,680
you can participate in what is

982
00:40:17,680 --> 00:40:19,680
essentially an ats but if you're not

983
00:40:19,680 --> 00:40:23,640
everything else looks like a pts

984
00:40:24,880 --> 00:40:26,480
and you might say like okay this looks

985
00:40:26,480 --> 00:40:28,880
like magical cryptography why do we care

986
00:40:28,880 --> 00:40:30,079
about this

987
00:40:30,079 --> 00:40:32,160
and this is actually very useful if

988
00:40:32,160 --> 00:40:34,319
you're say a financial institution and

989
00:40:34,319 --> 00:40:36,319
you share secret signing material with

990
00:40:36,319 --> 00:40:39,280
your clients um your client might come

991
00:40:39,280 --> 00:40:42,160
and say like hey you participated in

992
00:40:42,160 --> 00:40:44,319
sending all my funds away and like i

993
00:40:44,319 --> 00:40:46,000
didn't get to participate in that so

994
00:40:46,000 --> 00:40:48,480
please give me my money back

995
00:40:48,480 --> 00:40:49,920
with the taps you're actually able to

996
00:40:49,920 --> 00:40:52,400
prove or disprove that you participated

997
00:40:52,400 --> 00:40:54,400
in issuing these signatures without

998
00:40:54,400 --> 00:40:58,400
revealing uh more information publicly

999
00:40:58,400 --> 00:40:59,680
and something that i think is really

1000
00:40:59,680 --> 00:41:01,920
interesting about atops is that um we're

1001
00:41:01,920 --> 00:41:04,240
actually able to achieve a notion of

1002
00:41:04,240 --> 00:41:06,800
post-compromise accountability that

1003
00:41:06,800 --> 00:41:08,720
hasn't been able to be achieved in the

1004
00:41:08,720 --> 00:41:10,160
literature before

1005
00:41:10,160 --> 00:41:12,240
so in threshold schemes in the past

1006
00:41:12,240 --> 00:41:14,160
really the threat model has considered

1007
00:41:14,160 --> 00:41:15,920
the adversary being able to compromise

1008
00:41:15,920 --> 00:41:18,720
up to a threshold number of signers and

1009
00:41:18,720 --> 00:41:20,480
after that you generally just sort of

1010
00:41:20,480 --> 00:41:22,400
consider threshold schemes to be broken

1011
00:41:22,400 --> 00:41:25,040
so after an adversary controls this many

1012
00:41:25,040 --> 00:41:26,319
number of parties

1013
00:41:26,319 --> 00:41:29,040
uh all security properties are lost

1014
00:41:29,040 --> 00:41:31,920
and so here like we can't prevent

1015
00:41:31,920 --> 00:41:33,599
unforgeability if more than a threshold

1016
00:41:33,599 --> 00:41:35,680
number of parties has been corrupted but

1017
00:41:35,680 --> 00:41:37,040
we can provide a notion of

1018
00:41:37,040 --> 00:41:39,920
post-compromise accountability so even

1019
00:41:39,920 --> 00:41:41,760
though maybe some bad behaviors happened

1020
00:41:41,760 --> 00:41:43,040
and adversary control's more than a

1021
00:41:43,040 --> 00:41:44,640
threshold you can at least go and

1022
00:41:44,640 --> 00:41:47,200
identify later uh what has happened and

1023
00:41:47,200 --> 00:41:48,640
so i think that's kind of

1024
00:41:48,640 --> 00:41:50,720
um a key distinction of the taps that

1025
00:41:50,720 --> 00:41:54,078
makes it useful in practice

1026
00:41:54,800 --> 00:41:57,359
so driving home how it taps

1027
00:41:57,359 --> 00:41:59,680
relates to a threshold signature again

1028
00:41:59,680 --> 00:42:01,680
we have our two out of three parties a

1029
00:42:01,680 --> 00:42:03,520
message comes in your signers send the

1030
00:42:03,520 --> 00:42:05,760
signature shares to the combiner and the

1031
00:42:05,760 --> 00:42:08,319
combiner outputs a signature

1032
00:42:08,319 --> 00:42:09,200
but

1033
00:42:09,200 --> 00:42:12,000
um here this in the tops the combiner

1034
00:42:12,000 --> 00:42:14,640
also provides a proof that t signers

1035
00:42:14,640 --> 00:42:16,400
signed and we'll look at how this proof

1036
00:42:16,400 --> 00:42:19,680
is actually produced later

1037
00:42:21,040 --> 00:42:22,079
then

1038
00:42:22,079 --> 00:42:24,079
the signature can be input into this

1039
00:42:24,079 --> 00:42:27,119
tracer which is our designated entity

1040
00:42:27,119 --> 00:42:30,560
and the tracer is then able to output

1041
00:42:30,560 --> 00:42:32,560
which parties participated

1042
00:42:32,560 --> 00:42:34,240
but again this tracer is our designated

1043
00:42:34,240 --> 00:42:36,240
entity and so no one else is able to

1044
00:42:36,240 --> 00:42:38,480
produce this information

1045
00:42:38,480 --> 00:42:40,560
so this is sort of writ large on how a

1046
00:42:40,560 --> 00:42:42,800
taps augments a threshold signature

1047
00:42:42,800 --> 00:42:45,800
scheme

1048
00:42:46,880 --> 00:42:49,280
and if you're familiar with

1049
00:42:49,280 --> 00:42:51,040
sort of multi-party signatures in the

1050
00:42:51,040 --> 00:42:53,440
literature you can think of a taps as a

1051
00:42:53,440 --> 00:42:56,240
generalization of a group signature so a

1052
00:42:56,240 --> 00:42:58,640
group signature really allows for this

1053
00:42:58,640 --> 00:43:01,040
these same properties but only with one

1054
00:43:01,040 --> 00:43:03,520
signer and so what a taps does is it

1055
00:43:03,520 --> 00:43:05,520
takes that and it allows for more than

1056
00:43:05,520 --> 00:43:08,160
one signer

1057
00:43:10,400 --> 00:43:12,000
so a little bit more formally when we

1058
00:43:12,000 --> 00:43:14,560
think about attacks we think about these

1059
00:43:14,560 --> 00:43:18,000
five algorithms so a key gen sign

1060
00:43:18,000 --> 00:43:21,280
combine verify and trace algorithms

1061
00:43:21,280 --> 00:43:23,599
and we say that a taps must be secure so

1062
00:43:23,599 --> 00:43:25,520
it has to be unforgivable it has to be

1063
00:43:25,520 --> 00:43:27,520
private and accountable so let's look at

1064
00:43:27,520 --> 00:43:30,400
what that means next

1065
00:43:31,359 --> 00:43:32,480
i guess looking a little bit more

1066
00:43:32,480 --> 00:43:34,240
closely at these algorithms

1067
00:43:34,240 --> 00:43:36,319
so again like a threshold signature

1068
00:43:36,319 --> 00:43:38,480
keygen will output the public key it

1069
00:43:38,480 --> 00:43:40,319
will output secret keys for each of the

1070
00:43:40,319 --> 00:43:41,839
participants

1071
00:43:41,839 --> 00:43:43,839
but then a little bit differently output

1072
00:43:43,839 --> 00:43:46,319
secret keys for both the combiner and

1073
00:43:46,319 --> 00:43:49,280
for the tracer so uh these secret keys

1074
00:43:49,280 --> 00:43:50,880
for combiner and tracer is what is

1075
00:43:50,880 --> 00:43:52,560
different from a lot of threshold

1076
00:43:52,560 --> 00:43:55,839
schemes you might have seen before

1077
00:43:56,960 --> 00:43:58,640
and while i show this here in a

1078
00:43:58,640 --> 00:44:00,160
centralized manner this could also be

1079
00:44:00,160 --> 00:44:01,839
performed in a distributed manner as

1080
00:44:01,839 --> 00:44:04,078
well

1081
00:44:05,920 --> 00:44:08,079
sine looks exactly like you'd expect in

1082
00:44:08,079 --> 00:44:10,720
a threshold scheme so it takes message

1083
00:44:10,720 --> 00:44:13,200
the secret key for the participant and a

1084
00:44:13,200 --> 00:44:14,800
coalition of signers

1085
00:44:14,800 --> 00:44:17,440
and outputs a partial signature for that

1086
00:44:17,440 --> 00:44:20,079
participant

1087
00:44:20,079 --> 00:44:22,079
combine takes the secret key for the

1088
00:44:22,079 --> 00:44:24,319
combiner the message the coalition of

1089
00:44:24,319 --> 00:44:27,440
signers and those signature shares and

1090
00:44:27,440 --> 00:44:29,839
it outputs the tap signature so it

1091
00:44:29,839 --> 00:44:31,040
really takes all of the partial

1092
00:44:31,040 --> 00:44:32,800
signatures and outputs the tap signature

1093
00:44:32,800 --> 00:44:34,839
for the

1094
00:44:34,839 --> 00:44:37,760
public verify is exactly as you'd expect

1095
00:44:37,760 --> 00:44:40,560
for threshold signature so it takes the

1096
00:44:40,560 --> 00:44:42,480
signature public k message now puts a

1097
00:44:42,480 --> 00:44:45,599
bit indicating if it's valid or not

1098
00:44:45,599 --> 00:44:47,839
and then trace takes a secret key for

1099
00:44:47,839 --> 00:44:50,079
the tracer so this is what um makes the

1100
00:44:50,079 --> 00:44:52,560
tracer a designated entity

1101
00:44:52,560 --> 00:44:55,119
the message and the tap signature and

1102
00:44:55,119 --> 00:44:57,680
either outputs the coalition of signers

1103
00:44:57,680 --> 00:44:59,280
or failure

1104
00:44:59,280 --> 00:45:01,440
um so this is sort of

1105
00:45:01,440 --> 00:45:03,839
what takes this tap signature and it

1106
00:45:03,839 --> 00:45:07,680
says who participated in signing

1107
00:45:09,040 --> 00:45:10,800
right so now we're going to look at um

1108
00:45:10,800 --> 00:45:13,200
the security properties for tops so i

1109
00:45:13,200 --> 00:45:15,920
said that attacks has to be unforgeable

1110
00:45:15,920 --> 00:45:17,839
private and accountable so let's look at

1111
00:45:17,839 --> 00:45:20,560
unforgeability and accountability next

1112
00:45:20,560 --> 00:45:22,400
so for unforgiability what we mean by

1113
00:45:22,400 --> 00:45:25,280
this is that an adversary cannot output

1114
00:45:25,280 --> 00:45:26,880
a valid signature

1115
00:45:26,880 --> 00:45:28,640
without controlling

1116
00:45:28,640 --> 00:45:30,000
or if they control fewer than a

1117
00:45:30,000 --> 00:45:32,160
threshold number of parties so this is

1118
00:45:32,160 --> 00:45:35,200
the same unforgeability notion that we

1119
00:45:35,200 --> 00:45:37,440
learned about in the prior talk and so

1120
00:45:37,440 --> 00:45:39,119
this is basically the same sort of base

1121
00:45:39,119 --> 00:45:40,800
notion of unforgiability you'd consider

1122
00:45:40,800 --> 00:45:43,839
for a threshold signature

1123
00:45:43,839 --> 00:45:45,599
for accountability what's interesting

1124
00:45:45,599 --> 00:45:47,920
here is we actually don't put

1125
00:45:47,920 --> 00:45:49,520
a restriction on the number of parties

1126
00:45:49,520 --> 00:45:51,760
that the adversary is able to control

1127
00:45:51,760 --> 00:45:54,000
um so for accountability all we say is

1128
00:45:54,000 --> 00:45:56,160
that the adversary can't output a valid

1129
00:45:56,160 --> 00:45:58,079
signature that traces to an honest

1130
00:45:58,079 --> 00:45:59,280
non-signer

1131
00:45:59,280 --> 00:46:01,280
so the adversary here can control more

1132
00:46:01,280 --> 00:46:03,280
than a threshold number of parties this

1133
00:46:03,280 --> 00:46:04,640
is what gets us that kind of

1134
00:46:04,640 --> 00:46:06,480
post-compromise

1135
00:46:06,480 --> 00:46:07,839
accountability

1136
00:46:07,839 --> 00:46:10,160
but we say that even if they are in that

1137
00:46:10,160 --> 00:46:12,640
setting they can't frame someone as

1138
00:46:12,640 --> 00:46:14,160
having signed that didn't actually

1139
00:46:14,160 --> 00:46:16,480
assign

1140
00:46:18,560 --> 00:46:20,880
so a little bit more formally for our

1141
00:46:20,880 --> 00:46:23,200
enforceability and accountability games

1142
00:46:23,200 --> 00:46:24,400
as we have our adversary and our

1143
00:46:24,400 --> 00:46:25,760
environment

1144
00:46:25,760 --> 00:46:28,160
and the adversary begins by choosing the

1145
00:46:28,160 --> 00:46:30,640
number of total parties the threshold

1146
00:46:30,640 --> 00:46:32,400
and the number of parties that it wants

1147
00:46:32,400 --> 00:46:34,000
to corrupt

1148
00:46:34,000 --> 00:46:36,240
and in return it re receives the public

1149
00:46:36,240 --> 00:46:38,319
key and the secret key is for all of the

1150
00:46:38,319 --> 00:46:41,440
parties that it chooses to corrupt

1151
00:46:41,440 --> 00:46:43,440
it's able to query for partial

1152
00:46:43,440 --> 00:46:45,599
signatures of any parties that it

1153
00:46:45,599 --> 00:46:46,800
chooses

1154
00:46:46,800 --> 00:46:48,560
so it can say i want a partial signature

1155
00:46:48,560 --> 00:46:51,119
for any of these end parties

1156
00:46:51,119 --> 00:46:54,160
and at the end it's required to output

1157
00:46:54,160 --> 00:46:56,640
some valid taps signature with respect

1158
00:46:56,640 --> 00:46:58,319
to a message

1159
00:46:58,319 --> 00:47:00,880
and what's interesting is here um we're

1160
00:47:00,880 --> 00:47:02,160
actually encoding both the

1161
00:47:02,160 --> 00:47:03,839
unforgeability and the accountability

1162
00:47:03,839 --> 00:47:04,960
games

1163
00:47:04,960 --> 00:47:06,880
so there's two win conditions that can

1164
00:47:06,880 --> 00:47:07,920
occur

1165
00:47:07,920 --> 00:47:08,640
so

1166
00:47:08,640 --> 00:47:10,720
um an adversary wins if it meets either

1167
00:47:10,720 --> 00:47:12,240
of these conditions

1168
00:47:12,240 --> 00:47:14,319
so the first condition is if the

1169
00:47:14,319 --> 00:47:16,800
adversary produces a valid signature and

1170
00:47:16,800 --> 00:47:18,560
it controls fewer than the threshold

1171
00:47:18,560 --> 00:47:20,400
number of parties so this is our

1172
00:47:20,400 --> 00:47:23,520
unforgiability setting

1173
00:47:23,520 --> 00:47:26,000
it outputs a valid signature that traces

1174
00:47:26,000 --> 00:47:28,160
to an honest non-signer this is the

1175
00:47:28,160 --> 00:47:29,680
accountability setting

1176
00:47:29,680 --> 00:47:32,640
so really what changes here is um the

1177
00:47:32,640 --> 00:47:36,559
the set c that the adversary designates

1178
00:47:36,559 --> 00:47:38,800
and we say that a tax is unfortunate

1179
00:47:38,800 --> 00:47:40,319
unforgivable and accountable if the

1180
00:47:40,319 --> 00:47:42,960
probability of it wins is negligible

1181
00:47:42,960 --> 00:47:44,960
so i think that's kind of uh what's neat

1182
00:47:44,960 --> 00:47:47,200
in in this game is that really the key

1183
00:47:47,200 --> 00:47:48,640
difference is the number of parties that

1184
00:47:48,640 --> 00:47:52,279
the adversary controls

1185
00:47:52,480 --> 00:47:55,280
so for privacy we actually um

1186
00:47:55,280 --> 00:47:57,280
sort of split privacy into two different

1187
00:47:57,280 --> 00:47:58,240
notions

1188
00:47:58,240 --> 00:48:00,720
so first we refer to privacy against the

1189
00:48:00,720 --> 00:48:03,280
public and this is for any entity that

1190
00:48:03,280 --> 00:48:04,000
um

1191
00:48:04,000 --> 00:48:06,880
isn't a valid signer so again as we

1192
00:48:06,880 --> 00:48:09,040
talked about before a tap signature is

1193
00:48:09,040 --> 00:48:11,040
considered private against the public

1194
00:48:11,040 --> 00:48:12,640
if they're not able to learn either the

1195
00:48:12,640 --> 00:48:16,160
threshold or the form of signers

1196
00:48:16,160 --> 00:48:17,760
and then we then

1197
00:48:17,760 --> 00:48:19,440
sort of go a bit more strongly and we

1198
00:48:19,440 --> 00:48:21,200
say that there's this notion of privacy

1199
00:48:21,200 --> 00:48:23,920
against signers so these are entities

1200
00:48:23,920 --> 00:48:26,079
that are allowed to

1201
00:48:26,079 --> 00:48:26,960
hold

1202
00:48:26,960 --> 00:48:28,640
secret key shares

1203
00:48:28,640 --> 00:48:30,079
and we say even if you're allowed to

1204
00:48:30,079 --> 00:48:31,839
participate in signing looking at the

1205
00:48:31,839 --> 00:48:33,599
top signature it shouldn't reveal

1206
00:48:33,599 --> 00:48:35,839
anything about who participated in

1207
00:48:35,839 --> 00:48:38,240
signing

1208
00:48:38,559 --> 00:48:41,040
so again looking at these games for the

1209
00:48:41,040 --> 00:48:43,040
privacy against the public game

1210
00:48:43,040 --> 00:48:45,280
the adversary here is again able to

1211
00:48:45,280 --> 00:48:47,440
choose the total number of parties but

1212
00:48:47,440 --> 00:48:50,240
here it chooses two different thresholds

1213
00:48:50,240 --> 00:48:53,119
so t zero and t one

1214
00:48:53,119 --> 00:48:55,520
um and then key gen is performed with

1215
00:48:55,520 --> 00:48:58,000
respect to some challenge uh

1216
00:48:58,000 --> 00:49:00,640
one of these two thresholds uh chosen at

1217
00:49:00,640 --> 00:49:03,040
random so this bit b is chosen at random

1218
00:49:03,040 --> 00:49:04,800
and then uh keygen is performed with

1219
00:49:04,800 --> 00:49:07,280
respect to tb

1220
00:49:07,280 --> 00:49:09,839
the adversary receives the public key

1221
00:49:09,839 --> 00:49:14,160
and then it's able to query uh

1222
00:49:14,720 --> 00:49:16,079
sorry i'll go through this a little bit

1223
00:49:16,079 --> 00:49:18,720
more so it's able to query um four tap

1224
00:49:18,720 --> 00:49:20,000
signatures that's the output of the

1225
00:49:20,000 --> 00:49:21,520
combined algorithm

1226
00:49:21,520 --> 00:49:23,920
um but again it provides two different

1227
00:49:23,920 --> 00:49:27,440
coalitions so c0 is a coalition that is

1228
00:49:27,440 --> 00:49:29,839
with respect to t0 and c1 is with

1229
00:49:29,839 --> 00:49:31,760
respect to t1

1230
00:49:31,760 --> 00:49:34,079
and it receives a tap signature that is

1231
00:49:34,079 --> 00:49:36,000
with respect to cb

1232
00:49:36,000 --> 00:49:37,599
so it's with respect to either one of

1233
00:49:37,599 --> 00:49:40,000
these uh coalitions which one the

1234
00:49:40,000 --> 00:49:42,960
adversary does not actually know

1235
00:49:42,960 --> 00:49:44,480
and then it's also allowed to query the

1236
00:49:44,480 --> 00:49:46,400
tracing oracle

1237
00:49:46,400 --> 00:49:49,760
um at the end outputs a bit b which is

1238
00:49:49,760 --> 00:49:51,280
its guess

1239
00:49:51,280 --> 00:49:53,040
and so we do put a restriction on this

1240
00:49:53,040 --> 00:49:55,200
game where the adversary can't query the

1241
00:49:55,200 --> 00:49:57,280
tracing oracle for anything that it

1242
00:49:57,280 --> 00:50:00,240
received uh from the combine oracle and

1243
00:50:00,240 --> 00:50:04,079
that's just to prevent a trivial one

1244
00:50:04,079 --> 00:50:05,440
and

1245
00:50:05,440 --> 00:50:07,359
yeah so basically uh this is a

1246
00:50:07,359 --> 00:50:09,200
distinguishing game so the adversary

1247
00:50:09,200 --> 00:50:12,480
wins if it's able to guess b correctly

1248
00:50:12,480 --> 00:50:15,119
um and if if it guesses b correctly then

1249
00:50:15,119 --> 00:50:18,079
it it's able and reliably it's able to

1250
00:50:18,079 --> 00:50:19,440
gain some information about the

1251
00:50:19,440 --> 00:50:21,680
threshold

1252
00:50:21,680 --> 00:50:23,599
and we say that taps is private against

1253
00:50:23,599 --> 00:50:26,240
the public if the probability that it

1254
00:50:26,240 --> 00:50:29,200
wins is negligible

1255
00:50:30,400 --> 00:50:31,440
so then

1256
00:50:31,440 --> 00:50:32,400
we

1257
00:50:32,400 --> 00:50:33,520
encode

1258
00:50:33,520 --> 00:50:36,160
the notion of privacy against signers

1259
00:50:36,160 --> 00:50:39,680
so here the adversary again chooses nnt

1260
00:50:39,680 --> 00:50:42,240
it doesn't choose a challenge

1261
00:50:42,240 --> 00:50:44,800
and what's interesting about this game

1262
00:50:44,800 --> 00:50:46,880
is it actually receives all of the end

1263
00:50:46,880 --> 00:50:48,400
signing keys

1264
00:50:48,400 --> 00:50:50,079
so this actually probably looks quite

1265
00:50:50,079 --> 00:50:51,599
different from a lot of the threshold

1266
00:50:51,599 --> 00:50:53,680
security games you've seen in the past

1267
00:50:53,680 --> 00:50:55,520
so it actually receives all of this

1268
00:50:55,520 --> 00:50:57,760
information

1269
00:50:57,760 --> 00:51:00,319
again it's able to query for

1270
00:51:00,319 --> 00:51:02,480
a tap signature with respect again to

1271
00:51:02,480 --> 00:51:05,760
either of these two coalitions

1272
00:51:05,760 --> 00:51:07,680
and again it's able to query the tracing

1273
00:51:07,680 --> 00:51:08,800
oracle

1274
00:51:08,800 --> 00:51:11,280
and it uh outputs a guess

1275
00:51:11,280 --> 00:51:13,440
b prime at the end

1276
00:51:13,440 --> 00:51:14,800
and we have the same restriction where

1277
00:51:14,800 --> 00:51:16,400
it can't query the tracing oracle with

1278
00:51:16,400 --> 00:51:18,319
outputs from combined again to prevent

1279
00:51:18,319 --> 00:51:20,559
the trivial one case

1280
00:51:20,559 --> 00:51:23,200
and um we say that adversary wins if

1281
00:51:23,200 --> 00:51:25,680
it's able to reliably guess b prime

1282
00:51:25,680 --> 00:51:27,359
which means that it can infer some kind

1283
00:51:27,359 --> 00:51:29,040
of information about the quorum of

1284
00:51:29,040 --> 00:51:31,440
signers

1285
00:51:31,440 --> 00:51:33,200
and so we say taxes private if the

1286
00:51:33,200 --> 00:51:35,760
probability that it wins is negligible

1287
00:51:35,760 --> 00:51:37,280
so i think what's what's interesting in

1288
00:51:37,280 --> 00:51:39,359
these two games is um they're

1289
00:51:39,359 --> 00:51:41,839
distinguishing games and the public game

1290
00:51:41,839 --> 00:51:43,520
the adversary is able to guess the

1291
00:51:43,520 --> 00:51:45,359
threshold or it's able to provide the

1292
00:51:45,359 --> 00:51:46,800
threshold and it must distinguish which

1293
00:51:46,800 --> 00:51:48,160
one is used

1294
00:51:48,160 --> 00:51:49,839
here um it's able to provide the

1295
00:51:49,839 --> 00:51:52,480
coalition the coalitions and it must get

1296
00:51:52,480 --> 00:51:54,559
guess which coalition is used but it

1297
00:51:54,559 --> 00:51:56,319
also is given the secret keys for all of

1298
00:51:56,319 --> 00:51:58,160
the signers um

1299
00:51:58,160 --> 00:51:59,680
and that's that looks a little bit

1300
00:51:59,680 --> 00:52:01,280
different than probably things you've

1301
00:52:01,280 --> 00:52:02,720
seen in the threshold literature in the

1302
00:52:02,720 --> 00:52:05,680
past

1303
00:52:05,680 --> 00:52:07,920
okay so um those are security notions we

1304
00:52:07,920 --> 00:52:11,119
then provide a generic taps construction

1305
00:52:11,119 --> 00:52:12,880
so what the generic taps construction

1306
00:52:12,880 --> 00:52:16,319
does is it um essentially

1307
00:52:16,319 --> 00:52:19,200
encrypts an ats signature and then it

1308
00:52:19,200 --> 00:52:20,960
proves in generic zero knowledge that

1309
00:52:20,960 --> 00:52:23,599
this encrypted ats signature is valid

1310
00:52:23,599 --> 00:52:26,640
so um again sort of referring what ats

1311
00:52:26,640 --> 00:52:28,240
is is it's an accountable threshold

1312
00:52:28,240 --> 00:52:31,200
scheme so just by looking at a plain ats

1313
00:52:31,200 --> 00:52:32,640
signature you should be able to see

1314
00:52:32,640 --> 00:52:34,000
who's signed

1315
00:52:34,000 --> 00:52:35,680
but here for the generic construction

1316
00:52:35,680 --> 00:52:37,920
what we do is we encrypt it and then we

1317
00:52:37,920 --> 00:52:39,839
prove in generic zero knowledge that

1318
00:52:39,839 --> 00:52:42,559
this uh signature is valid

1319
00:52:42,559 --> 00:52:45,520
and this um encrypted ats signature is

1320
00:52:45,520 --> 00:52:47,680
encrypted to the tracer so because the

1321
00:52:47,680 --> 00:52:49,520
tracer has a secret key it's able to

1322
00:52:49,520 --> 00:52:51,680
decrypt and therefore recover uh the set

1323
00:52:51,680 --> 00:52:54,319
of signers

1324
00:52:55,040 --> 00:52:58,079
uh and then on the threshold is we don't

1325
00:52:58,079 --> 00:53:00,000
reveal the threshold in the clear the

1326
00:53:00,000 --> 00:53:02,640
threshold is provided in the public key

1327
00:53:02,640 --> 00:53:04,319
simply as a commitment

1328
00:53:04,319 --> 00:53:05,920
and so again this generic zero knowledge

1329
00:53:05,920 --> 00:53:09,040
proof is able to prove that this ats is

1330
00:53:09,040 --> 00:53:11,040
valid it has

1331
00:53:11,040 --> 00:53:12,880
the proper set of signers with respect

1332
00:53:12,880 --> 00:53:14,640
to the public key where the threshold is

1333
00:53:14,640 --> 00:53:17,279
committed to

1334
00:53:18,079 --> 00:53:19,920
so um driving into this a little bit

1335
00:53:19,920 --> 00:53:22,000
more so what a generic taps signature

1336
00:53:22,000 --> 00:53:23,040
looks like

1337
00:53:23,040 --> 00:53:24,800
is again it has this public key

1338
00:53:24,800 --> 00:53:27,040
encryption of the ats signature

1339
00:53:27,040 --> 00:53:28,880
it has a zero knowledge proof that the

1340
00:53:28,880 --> 00:53:30,880
ats signature is valid

1341
00:53:30,880 --> 00:53:33,040
um and then we also require that the

1342
00:53:33,040 --> 00:53:34,160
combiner

1343
00:53:34,160 --> 00:53:35,280
um

1344
00:53:35,280 --> 00:53:37,440
authenticates this tap signature and

1345
00:53:37,440 --> 00:53:39,359
that's because we allow the adversary to

1346
00:53:39,359 --> 00:53:41,680
have access to this tracing oracle in

1347
00:53:41,680 --> 00:53:43,359
all of these games

1348
00:53:43,359 --> 00:53:46,079
so in order to

1349
00:53:46,079 --> 00:53:47,839
prevent different kinds of attacks we

1350
00:53:47,839 --> 00:53:49,280
require that the combiner does

1351
00:53:49,280 --> 00:53:52,960
authenticate this signature

1352
00:53:53,920 --> 00:53:55,520
so then

1353
00:53:55,520 --> 00:53:57,839
after we designed this generic scheme

1354
00:53:57,839 --> 00:54:00,480
what we wanted to do is we wanted to

1355
00:54:00,480 --> 00:54:03,359
provide a snore construction

1356
00:54:03,359 --> 00:54:05,359
so um

1357
00:54:05,359 --> 00:54:07,280
in looking at this though we actually

1358
00:54:07,280 --> 00:54:09,680
came up against some challenges

1359
00:54:09,680 --> 00:54:11,760
so the generic scheme requires proving

1360
00:54:11,760 --> 00:54:13,599
that the signature is valid in generic

1361
00:54:13,599 --> 00:54:15,520
zero knowledge

1362
00:54:15,520 --> 00:54:17,839
but schnorr requires proving that the

1363
00:54:17,839 --> 00:54:19,839
output from a hash function is derived

1364
00:54:19,839 --> 00:54:20,960
correctly

1365
00:54:20,960 --> 00:54:23,119
so in schnoor as we'll look at in the

1366
00:54:23,119 --> 00:54:27,200
next slide i the verifier derives um the

1367
00:54:27,200 --> 00:54:28,400
challenge

1368
00:54:28,400 --> 00:54:30,640
which is itself a hash of the commitment

1369
00:54:30,640 --> 00:54:32,960
and the message and this is expensive to

1370
00:54:32,960 --> 00:54:35,599
do in generic zero knowledge

1371
00:54:35,599 --> 00:54:36,400
so

1372
00:54:36,400 --> 00:54:37,680
in looking at this we actually had the

1373
00:54:37,680 --> 00:54:40,160
goal of finding a simpler more efficient

1374
00:54:40,160 --> 00:54:42,720
solution

1375
00:54:42,799 --> 00:54:46,319
uh and happily we were able to do so so

1376
00:54:46,319 --> 00:54:48,559
first i'm going to re-explain a little

1377
00:54:48,559 --> 00:54:49,839
bit about the structure of schnorr

1378
00:54:49,839 --> 00:54:51,119
signatures

1379
00:54:51,119 --> 00:54:54,240
so um if you recall schmore signatures

1380
00:54:54,240 --> 00:54:56,400
uh they're a tuple

1381
00:54:56,400 --> 00:54:58,880
of two elements the first element is a

1382
00:54:58,880 --> 00:55:00,799
commitment to a nonce

1383
00:55:00,799 --> 00:55:02,880
so this r value is a commitment to

1384
00:55:02,880 --> 00:55:05,119
randomness that's used during the

1385
00:55:05,119 --> 00:55:06,880
signing protocol

1386
00:55:06,880 --> 00:55:08,640
and then the second element is the

1387
00:55:08,640 --> 00:55:11,200
response so this is the the proof that

1388
00:55:11,200 --> 00:55:13,440
um the signer sign using their secret

1389
00:55:13,440 --> 00:55:15,359
key with respect to a message

1390
00:55:15,359 --> 00:55:16,480
um

1391
00:55:16,480 --> 00:55:18,240
where there's randomness that was

1392
00:55:18,240 --> 00:55:21,359
committed to in r

1393
00:55:21,359 --> 00:55:23,280
and then in shore like i said before the

1394
00:55:23,280 --> 00:55:25,280
verifier derives the challenge which is

1395
00:55:25,280 --> 00:55:26,559
the hash of

1396
00:55:26,559 --> 00:55:28,559
uh the commitment and the message and

1397
00:55:28,559 --> 00:55:30,559
then they check um that the response is

1398
00:55:30,559 --> 00:55:32,640
valid with respect to the public key the

1399
00:55:32,640 --> 00:55:35,599
challenge and this commitment

1400
00:55:35,599 --> 00:55:38,240
so um we actually had this insight which

1401
00:55:38,240 --> 00:55:40,240
is very simple but actually quite

1402
00:55:40,240 --> 00:55:42,640
powerful and allows um everything else

1403
00:55:42,640 --> 00:55:44,799
to sort of follow quite simply

1404
00:55:44,799 --> 00:55:47,119
and so our insight is that publishing uh

1405
00:55:47,119 --> 00:55:48,720
this commitment in the clear doesn't

1406
00:55:48,720 --> 00:55:51,599
actually hurt privacy so only publishing

1407
00:55:51,599 --> 00:55:53,599
the response or only the response must

1408
00:55:53,599 --> 00:55:55,040
be protected

1409
00:55:55,040 --> 00:55:56,880
um so once we have this insight we're

1410
00:55:56,880 --> 00:55:59,119
like oh we can actually publish r we can

1411
00:55:59,119 --> 00:56:02,400
deviate from the generic construction uh

1412
00:56:02,400 --> 00:56:04,319
creating this schnorr taps became much

1413
00:56:04,319 --> 00:56:06,799
simpler

1414
00:56:07,200 --> 00:56:09,920
so uh our snoretaps deviates a little

1415
00:56:09,920 --> 00:56:11,760
bit from our engineering construction

1416
00:56:11,760 --> 00:56:13,200
where we additionally publish this

1417
00:56:13,200 --> 00:56:15,280
commitment and what that allows for is

1418
00:56:15,280 --> 00:56:17,920
improved efficiency and simplicity over

1419
00:56:17,920 --> 00:56:20,160
the generic construction

1420
00:56:20,160 --> 00:56:22,079
and so the verifier drives uh the

1421
00:56:22,079 --> 00:56:24,880
challenge directly

1422
00:56:26,240 --> 00:56:26,960
so

1423
00:56:26,960 --> 00:56:28,880
i'm going to show you the zero knowledge

1424
00:56:28,880 --> 00:56:30,720
relation now very quickly you don't need

1425
00:56:30,720 --> 00:56:33,040
to understand all this math but uh the

1426
00:56:33,040 --> 00:56:34,720
reason why i'm showing you is because um

1427
00:56:34,720 --> 00:56:36,799
it sort of drives home the fact that in

1428
00:56:36,799 --> 00:56:38,400
our short construction we're able to get

1429
00:56:38,400 --> 00:56:40,559
something which is actually quite simple

1430
00:56:40,559 --> 00:56:42,799
for the zero knowledge relation

1431
00:56:42,799 --> 00:56:45,680
so um the statement and our schnartops

1432
00:56:45,680 --> 00:56:47,760
we have the generators

1433
00:56:47,760 --> 00:56:50,240
we have a commitment on to the threshold

1434
00:56:50,240 --> 00:56:52,319
t which is just elgamal

1435
00:56:52,319 --> 00:56:54,240
we have the schnorr commitment

1436
00:56:54,240 --> 00:56:56,079
fishner challenge

1437
00:56:56,079 --> 00:56:58,400
the encrypted ats or

1438
00:56:58,400 --> 00:57:00,960
the encrypted ats signature

1439
00:57:00,960 --> 00:57:02,640
and then for the witness we simply have

1440
00:57:02,640 --> 00:57:06,079
randomizers along with um

1441
00:57:06,079 --> 00:57:06,799
uh

1442
00:57:06,799 --> 00:57:09,280
the ats response

1443
00:57:09,280 --> 00:57:11,119
and bits indicating which sign are

1444
00:57:11,119 --> 00:57:13,839
signed

1445
00:57:14,079 --> 00:57:16,640
so then our relation is very simple so

1446
00:57:16,640 --> 00:57:18,640
first it proves that the response is

1447
00:57:18,640 --> 00:57:21,920
valid for a subset of public keys

1448
00:57:21,920 --> 00:57:25,200
so what it does is this response is in

1449
00:57:25,200 --> 00:57:28,480
the witness so it says for some uh

1450
00:57:28,480 --> 00:57:31,119
subset of public keys

1451
00:57:31,119 --> 00:57:33,040
at least t of them

1452
00:57:33,040 --> 00:57:36,160
this response must be valid

1453
00:57:36,160 --> 00:57:39,599
it then proves that the ciphertext of

1454
00:57:39,599 --> 00:57:42,160
this ats is valid and it's a valid

1455
00:57:42,160 --> 00:57:46,160
encryption to the tracer's public key

1456
00:57:46,319 --> 00:57:48,640
it then proves that the signing form

1457
00:57:48,640 --> 00:57:51,839
contains key signers

1458
00:57:51,839 --> 00:57:52,799
and then

1459
00:57:52,799 --> 00:57:54,240
for completeness it proves that each of

1460
00:57:54,240 --> 00:57:56,319
the bits are zero or one so really what

1461
00:57:56,319 --> 00:57:58,400
these last two lines are is it's proving

1462
00:57:58,400 --> 00:58:01,200
that at least t sign or signed without

1463
00:58:01,200 --> 00:58:03,920
revealing what t actually is

1464
00:58:03,920 --> 00:58:06,400
so this is how we're able to achieve

1465
00:58:06,400 --> 00:58:10,960
proving that this ats signature

1466
00:58:10,960 --> 00:58:13,839
is valid without actually revealing what

1467
00:58:13,839 --> 00:58:16,000
the signature is or what the threshold

1468
00:58:16,000 --> 00:58:18,960
is so this is sort of all the magic in a

1469
00:58:18,960 --> 00:58:21,960
nutshell

1470
00:58:22,000 --> 00:58:24,880
um and the performance of our schnoor

1471
00:58:24,880 --> 00:58:26,640
taps is actually quite good

1472
00:58:26,640 --> 00:58:29,359
um it does grow linearly with respect to

1473
00:58:29,359 --> 00:58:31,520
the number of signers so in the public

1474
00:58:31,520 --> 00:58:32,400
key

1475
00:58:32,400 --> 00:58:33,920
for both

1476
00:58:33,920 --> 00:58:36,480
constructions that we give but

1477
00:58:36,480 --> 00:58:39,119
considering most instantiations of

1478
00:58:39,119 --> 00:58:40,559
threshold schemes

1479
00:58:40,559 --> 00:58:42,160
you know we're looking at two out of

1480
00:58:42,160 --> 00:58:43,760
three examples

1481
00:58:43,760 --> 00:58:45,680
so if the total number of signers is

1482
00:58:45,680 --> 00:58:48,839
three this is actually quite reasonable

1483
00:58:48,839 --> 00:58:51,440
um and then however when the total

1484
00:58:51,440 --> 00:58:53,599
number of signers is large

1485
00:58:53,599 --> 00:58:55,760
uh we do provide a bulletproof uh

1486
00:58:55,760 --> 00:58:58,240
instantiation so essentially the

1487
00:58:58,240 --> 00:59:00,720
difference is we provide a sigma

1488
00:59:00,720 --> 00:59:01,920
construction

1489
00:59:01,920 --> 00:59:03,839
where it's reasonable if the total

1490
00:59:03,839 --> 00:59:05,520
number of signers is small

1491
00:59:05,520 --> 00:59:07,520
if the total number of centers is large

1492
00:59:07,520 --> 00:59:11,119
you can use bulletproofs and

1493
00:59:11,119 --> 00:59:13,280
that means that the signature size

1494
00:59:13,280 --> 00:59:17,480
is remains quite reasonable

1495
00:59:18,799 --> 00:59:20,960
so overall what do we do in this work um

1496
00:59:20,960 --> 00:59:21,839
we

1497
00:59:21,839 --> 00:59:24,079
uh introduce a new type of threshold

1498
00:59:24,079 --> 00:59:25,680
signature scheme and we refer to this

1499
00:59:25,680 --> 00:59:28,559
threshold signature scheme as a taps

1500
00:59:28,559 --> 00:59:33,280
and what a tops does is it um

1501
00:59:33,280 --> 00:59:35,119
it ensures both privacy and

1502
00:59:35,119 --> 00:59:37,760
accountability of the signature

1503
00:59:37,760 --> 00:59:40,240
we define a generic construction uh that

1504
00:59:40,240 --> 00:59:43,200
employs an encrypted ats

1505
00:59:43,200 --> 00:59:44,400
and then we define a schnorr

1506
00:59:44,400 --> 00:59:46,480
construction that actually leverages the

1507
00:59:46,480 --> 00:59:47,599
structure of

1508
00:59:47,599 --> 00:59:49,520
signatures to simplify the

1509
00:59:49,520 --> 00:59:51,200
zero-knowledge relation

1510
00:59:51,200 --> 00:59:52,720
so we do provide a generic construction

1511
00:59:52,720 --> 00:59:55,280
but then we're able to do better in our

1512
00:59:55,280 --> 00:59:57,760
schnoor instantiation

1513
00:59:57,760 --> 00:59:59,280
and then we define both sigma and

1514
00:59:59,280 --> 01:00:01,520
bulletproof's instantiations of the zero

1515
01:00:01,520 --> 01:00:03,200
knowledge argument for our external

1516
01:00:03,200 --> 01:00:05,200
instantiation

1517
01:00:05,200 --> 01:00:09,960
and that's all so thank you very much

1518
01:00:20,559 --> 01:00:22,960
yes i had a secret key it did not have

1519
01:00:22,960 --> 01:00:24,640
the secret key

1520
01:00:24,640 --> 01:00:27,640
um

1521
01:00:28,000 --> 01:00:30,240
so yeah so i should have gone over this

1522
01:00:30,240 --> 01:00:32,240
a little bit more in detail so keygen

1523
01:00:32,240 --> 01:00:33,920
outputs secret keys for all of the

1524
01:00:33,920 --> 01:00:36,640
signers it outputs a secret key for the

1525
01:00:36,640 --> 01:00:39,680
combiner and a secret key for the tracer

1526
01:00:39,680 --> 01:00:42,319
so that secret key for the combiner just

1527
01:00:42,319 --> 01:00:45,280
allows it to authenticate on the tap

1528
01:00:45,280 --> 01:00:47,680
signatures that are output so it's not

1529
01:00:47,680 --> 01:00:49,520
the same secret key as what all of the

1530
01:00:49,520 --> 01:00:51,359
signers hold so

1531
01:00:51,359 --> 01:00:52,799
yeah so it can't

1532
01:00:52,799 --> 01:00:54,720
forge signatures it can't really do

1533
01:00:54,720 --> 01:00:57,119
anything that signers can do it's just

1534
01:00:57,119 --> 01:01:01,480
to allow authentication of the taps

1535
01:01:11,280 --> 01:01:14,799
so um it it depends a little bit so for

1536
01:01:14,799 --> 01:01:15,599
uh

1537
01:01:15,599 --> 01:01:18,400
actually quite a lot of um

1538
01:01:18,400 --> 01:01:21,200
at least some of the use cases i know of

1539
01:01:21,200 --> 01:01:24,559
uh signers are distributed but um the

1540
01:01:24,559 --> 01:01:28,319
proof for example if you're producing um

1541
01:01:28,319 --> 01:01:30,880
a more involved proof the prover is

1542
01:01:30,880 --> 01:01:32,400
actually one entity

1543
01:01:32,400 --> 01:01:34,079
so this is uh

1544
01:01:34,079 --> 01:01:36,480
for example in the z cash setting uh the

1545
01:01:36,480 --> 01:01:38,799
signers are distributed but the prover

1546
01:01:38,799 --> 01:01:40,240
that actually produces the snark

1547
01:01:40,240 --> 01:01:42,480
demonstrating that you know all these

1548
01:01:42,480 --> 01:01:45,200
you know relations that the merkle trees

1549
01:01:45,200 --> 01:01:47,920
past miracle trees valid um that's a

1550
01:01:47,920 --> 01:01:50,400
single entity so this kind of use case

1551
01:01:50,400 --> 01:01:52,880
actually fits very well in that setting

1552
01:01:52,880 --> 01:01:54,799
if you wanted to distribute the role of

1553
01:01:54,799 --> 01:01:56,960
the combiner you could also do that but

1554
01:01:56,960 --> 01:01:59,440
really here the combiner's

1555
01:01:59,440 --> 01:02:00,640
trusted

1556
01:02:00,640 --> 01:02:04,079
to aggregate signatures and not disclose

1557
01:02:04,079 --> 01:02:05,599
the privacy of the signers and and

1558
01:02:05,599 --> 01:02:06,960
that's it

1559
01:02:06,960 --> 01:02:08,640
so

1560
01:02:08,640 --> 01:02:09,520
hi

1561
01:02:09,520 --> 01:02:11,200
thanks for talking they asked a question

1562
01:02:11,200 --> 01:02:13,280
about the accountability definitions

1563
01:02:13,280 --> 01:02:15,440
that they prevent adversary to do the

1564
01:02:15,440 --> 01:02:17,359
signature that's uh

1565
01:02:17,359 --> 01:02:20,160
traced to strictly subsets strict subset

1566
01:02:20,160 --> 01:02:22,160
of designers so that some malicious

1567
01:02:22,160 --> 01:02:23,280
party can

1568
01:02:23,280 --> 01:02:25,920
sign without being translated because i

1569
01:02:25,920 --> 01:02:28,559
saw the definition only says that you

1570
01:02:28,559 --> 01:02:31,280
prevent someone the non-like

1571
01:02:31,280 --> 01:02:34,000
some someone that doesn't sign this

1572
01:02:34,000 --> 01:02:36,880
being traced but it doesn't prevent some

1573
01:02:36,880 --> 01:02:37,920
right

1574
01:02:37,920 --> 01:02:39,440
um

1575
01:02:39,440 --> 01:02:40,960
so let me just restate the question and

1576
01:02:40,960 --> 01:02:42,640
make sure i understand so

1577
01:02:42,640 --> 01:02:44,000
uh

1578
01:02:44,000 --> 01:02:45,440
accountability

1579
01:02:45,440 --> 01:02:46,720
means that

1580
01:02:46,720 --> 01:02:49,359
uh a dishonest party cannot frame

1581
01:02:49,359 --> 01:02:51,359
someone who did not participate in

1582
01:02:51,359 --> 01:02:54,160
signing but he doesn't prevent someone

1583
01:02:54,160 --> 01:02:56,880
that few times but like being entrees

1584
01:02:56,880 --> 01:02:59,520
later right it's possible that someone

1585
01:02:59,520 --> 01:03:01,760
died but he can he can prevent the

1586
01:03:01,760 --> 01:03:02,960
insurance

1587
01:03:02,960 --> 01:03:05,760
um that should yeah so if you look at

1588
01:03:05,760 --> 01:03:08,240
our our definition it it prevents

1589
01:03:08,240 --> 01:03:10,480
against that case i just didn't uh talk

1590
01:03:10,480 --> 01:03:12,960
about it very closely but yeah so

1591
01:03:12,960 --> 01:03:15,520
accountability means that you can't lie

1592
01:03:15,520 --> 01:03:17,920
about who participated in signing so you

1593
01:03:17,920 --> 01:03:19,440
can't frame

1594
01:03:19,440 --> 01:03:21,520
a signer but you also can't exclude

1595
01:03:21,520 --> 01:03:24,000
yourself so um if you look at our

1596
01:03:24,000 --> 01:03:26,400
definition tracing must be like exactly

1597
01:03:26,400 --> 01:03:29,599
tracy that's that assignment right yes

1598
01:03:29,599 --> 01:03:31,839
yes it considers that but yeah we can

1599
01:03:31,839 --> 01:03:33,920
talk more

1600
01:03:33,920 --> 01:03:35,520
um so

1601
01:03:35,520 --> 01:03:37,039
i was just trying to figure out when

1602
01:03:37,039 --> 01:03:38,720
you're talking about privacy from the

1603
01:03:38,720 --> 01:03:40,000
signers

1604
01:03:40,000 --> 01:03:41,839
it seems like unless you're doing some

1605
01:03:41,839 --> 01:03:44,720
extra blinding sort of thing um the

1606
01:03:44,720 --> 01:03:46,559
signers who participated know that they

1607
01:03:46,559 --> 01:03:48,880
were in on the on the forum they just

1608
01:03:48,880 --> 01:03:50,559
don't know who the other members of the

1609
01:03:50,559 --> 01:03:52,640
forum is is that the idea

1610
01:03:52,640 --> 01:03:53,520
so

1611
01:03:53,520 --> 01:03:55,760
right so this so privacy against signers

1612
01:03:55,760 --> 01:03:58,640
is it's a bit ambiguous so here

1613
01:03:58,640 --> 01:04:00,400
you're you're correct that if you

1614
01:04:00,400 --> 01:04:02,400
participated in signings

1615
01:04:02,400 --> 01:04:04,480
you'll know that you participated in

1616
01:04:04,480 --> 01:04:07,280
signing um that's sort of a different

1617
01:04:07,280 --> 01:04:09,280
notion we didn't know how to give that

1618
01:04:09,280 --> 01:04:11,039
notion a name so we don't actually

1619
01:04:11,039 --> 01:04:13,920
consider it and it also seems hard to

1620
01:04:13,920 --> 01:04:15,839
achieve that without

1621
01:04:15,839 --> 01:04:18,160
extra notions like

1622
01:04:18,160 --> 01:04:20,240
private channels and

1623
01:04:20,240 --> 01:04:22,799
um anonymity and like

1624
01:04:22,799 --> 01:04:24,240
additional things

1625
01:04:24,240 --> 01:04:26,559
um so yes this

1626
01:04:26,559 --> 01:04:28,720
doesn't prevent um

1627
01:04:28,720 --> 01:04:30,400
if you're a signer knowing that you

1628
01:04:30,400 --> 01:04:32,559
participated in signing of a particular

1629
01:04:32,559 --> 01:04:35,039
signature but you can't know who else

1630
01:04:35,039 --> 01:04:37,280
participated in simon right so if

1631
01:04:37,280 --> 01:04:39,760
if alice and bob both participated in

1632
01:04:39,760 --> 01:04:42,640
signing in a two of three scheme alice

1633
01:04:42,640 --> 01:04:43,920
knows she signed but she doesn't know

1634
01:04:43,920 --> 01:04:45,520
whether it was bob or carol who helped

1635
01:04:45,520 --> 01:04:46,880
right

1636
01:04:46,880 --> 01:04:50,799
um that's a little bit outside of what

1637
01:04:50,799 --> 01:04:53,520
so here we don't consider that because

1638
01:04:53,520 --> 01:04:56,240
um for example in sign it takes the

1639
01:04:56,240 --> 01:04:58,000
quorum of signers

1640
01:04:58,000 --> 01:05:00,400
in our algorithm so it would be it would

1641
01:05:00,400 --> 01:05:02,240
be a different scheme to not know what

1642
01:05:02,240 --> 01:05:04,160
other signers signed okay so i guess

1643
01:05:04,160 --> 01:05:05,760
what i'm trying to understand what's

1644
01:05:05,760 --> 01:05:08,160
what do what do you guarantee from the

1645
01:05:08,160 --> 01:05:10,720
signer privacy then because i don't i i

1646
01:05:10,720 --> 01:05:12,000
just realized i don't understand what

1647
01:05:12,000 --> 01:05:13,680
the what the definition is from the

1648
01:05:13,680 --> 01:05:15,839
signature looking at the signature you

1649
01:05:15,839 --> 01:05:18,720
can't extrapolate who signed

1650
01:05:18,720 --> 01:05:20,880
okay so i can still remember what

1651
01:05:20,880 --> 01:05:23,119
happened my own participation i just

1652
01:05:23,119 --> 01:05:25,680
can't look at a signature and say oh now

1653
01:05:25,680 --> 01:05:28,240
looking at that i know

1654
01:05:28,240 --> 01:05:30,880
art okay yeah so this actually it

1655
01:05:30,880 --> 01:05:33,200
depends we have a note on this um so

1656
01:05:33,200 --> 01:05:35,359
which signature scheme like this whole

1657
01:05:35,359 --> 01:05:37,039
remembering thing

1658
01:05:37,039 --> 01:05:41,280
um you it will influence um this

1659
01:05:41,280 --> 01:05:42,160
uh

1660
01:05:42,160 --> 01:05:44,480
signer privacy notion so like for

1661
01:05:44,480 --> 01:05:46,000
schnorr for example

1662
01:05:46,000 --> 01:05:48,319
if i participate in schwarz signature i

1663
01:05:48,319 --> 01:05:50,240
can look at the commit commitment later

1664
01:05:50,240 --> 01:05:52,319
and say like oh i participated in that

1665
01:05:52,319 --> 01:05:54,880
um you can have the combiner do some

1666
01:05:54,880 --> 01:05:57,039
kind of blinding step and we note that

1667
01:05:57,039 --> 01:05:58,400
as future work

1668
01:05:58,400 --> 01:06:00,400
um but yeah by this notion we just mean

1669
01:06:00,400 --> 01:06:02,559
looking strictly at the signature can

1670
01:06:02,559 --> 01:06:04,799
you explain information from that all

1671
01:06:04,799 --> 01:06:07,280
right thank you

1672
01:06:07,599 --> 01:06:09,359
um hey thanks for the talk hopefully a

1673
01:06:09,359 --> 01:06:11,119
brief question so everybody can go uh

1674
01:06:11,119 --> 01:06:12,720
just follow up on that question uh

1675
01:06:12,720 --> 01:06:15,039
because the key gen also generates like

1676
01:06:15,039 --> 01:06:17,119
a secret key for the combiner so like

1677
01:06:17,119 --> 01:06:19,119
this this scheme doesn't support the

1678
01:06:19,119 --> 01:06:20,799
generic thing that like you know there's

1679
01:06:20,799 --> 01:06:23,599
there's a big group of end potential

1680
01:06:23,599 --> 01:06:26,079
signers and then people would pat

1681
01:06:26,079 --> 01:06:28,160
different people would pass them

1682
01:06:28,160 --> 01:06:30,799
messages which they can examine decide

1683
01:06:30,799 --> 01:06:32,960
if they want to sign and then combine

1684
01:06:32,960 --> 01:06:36,319
right it's only that one combiner can

1685
01:06:36,319 --> 01:06:39,119
query those like n servers for

1686
01:06:39,119 --> 01:06:40,000
their

1687
01:06:40,000 --> 01:06:42,079
signature shares

1688
01:06:42,079 --> 01:06:44,240
right

1689
01:06:44,240 --> 01:06:46,079
let me rephrase the question to make

1690
01:06:46,079 --> 01:06:47,680
sure i understand uh so you're asking

1691
01:06:47,680 --> 01:06:49,200
like does this model

1692
01:06:49,200 --> 01:06:51,760
assume like anyone but the combiner can

1693
01:06:51,760 --> 01:06:54,799
query signers yeah um

1694
01:06:54,799 --> 01:06:57,280
so in our in our notions we assume that

1695
01:06:57,280 --> 01:06:58,960
adversary can

1696
01:06:58,960 --> 01:07:00,880
query so like in the unforgetability

1697
01:07:00,880 --> 01:07:02,319
game the adversary is querying for

1698
01:07:02,319 --> 01:07:03,920
signature shares

1699
01:07:03,920 --> 01:07:06,720
um so i think we do consider that notion

1700
01:07:06,720 --> 01:07:09,039
unforgeability and accountability

1701
01:07:09,039 --> 01:07:11,039
um but i'm happy to talk more yeah yeah

1702
01:07:11,039 --> 01:07:14,319
for sure yeah thank you thank you

1703
01:07:14,319 --> 01:07:16,720
so there are questions from

1704
01:07:16,720 --> 01:07:18,799
from the internet

1705
01:07:18,799 --> 01:07:20,720
so the first one is the following group

1706
01:07:20,720 --> 01:07:22,960
signature tracing openings normally

1707
01:07:22,960 --> 01:07:25,280
output a publicly checkable proof that

1708
01:07:25,280 --> 01:07:27,599
the tracing was correctly done do you

1709
01:07:27,599 --> 01:07:29,680
have something similar to this for tabs

1710
01:07:29,680 --> 01:07:31,760
do you consider the trace uh to always

1711
01:07:31,760 --> 01:07:33,359
be honest

1712
01:07:33,359 --> 01:07:34,559
um

1713
01:07:34,559 --> 01:07:35,599
here

1714
01:07:35,599 --> 01:07:38,400
right so here the the tracing algorithm

1715
01:07:38,400 --> 01:07:40,400
does output either

1716
01:07:40,400 --> 01:07:42,960
just the coalition uh there's no reason

1717
01:07:42,960 --> 01:07:45,440
why it couldn't also output the

1718
01:07:45,440 --> 01:07:47,359
um unencrypted

1719
01:07:47,359 --> 01:07:50,799
ats or depending on whatever model so i

1720
01:07:50,799 --> 01:07:53,119
think that it can be extended to that

1721
01:07:53,119 --> 01:07:55,119
setting we did not do that but

1722
01:07:55,119 --> 01:07:57,599
there's no reason why it couldn't be

1723
01:07:57,599 --> 01:07:59,440
okay and the second question

1724
01:07:59,440 --> 01:08:01,280
am i right that you couldn't do the zk

1725
01:08:01,280 --> 01:08:04,160
proof alongside the planche no sick

1726
01:08:04,160 --> 01:08:06,240
to have accountability on top of a plane

1727
01:08:06,240 --> 01:08:10,880
to norsic because you need to hide the s

1728
01:08:10,880 --> 01:08:13,119
um sorry

1729
01:08:13,119 --> 01:08:14,480
let me rephrase so the question is

1730
01:08:14,480 --> 01:08:16,000
asking that this your knowledge proof is

1731
01:08:16,000 --> 01:08:18,158
to ensure accountability for the

1732
01:08:18,158 --> 01:08:19,198
encrypted

1733
01:08:19,198 --> 01:08:20,319
uh

1734
01:08:20,319 --> 01:08:22,238
schnorr signature

1735
01:08:22,238 --> 01:08:25,040
is is that the question or

1736
01:08:25,040 --> 01:08:27,600
um it seems to me the question is

1737
01:08:27,600 --> 01:08:30,238
towards why you didn't do it exactly on

1738
01:08:30,238 --> 01:08:32,880
top of schnoor maybe the person online

1739
01:08:32,880 --> 01:08:34,560
can rephrase it quickly

1740
01:08:34,560 --> 01:08:36,479
okay so the reason why we didn't do it

1741
01:08:36,479 --> 01:08:39,040
on top of plain snorers because it's a

1742
01:08:39,040 --> 01:08:42,000
schnoor ats so looking at the plain

1743
01:08:42,000 --> 01:08:44,560
schnorr ats you can tell who signed so

1744
01:08:44,560 --> 01:08:46,799
we have to encrypt the schnorr ats in

1745
01:08:46,799 --> 01:08:49,120
order to hide in order to achieve

1746
01:08:49,120 --> 01:08:51,679
privacy and then in order to prove that

1747
01:08:51,679 --> 01:08:53,198
the signature is valid we have the zero

1748
01:08:53,198 --> 01:08:55,759
knowledge proof

1749
01:08:56,399 --> 01:08:58,000
did this answer the question online

1750
01:08:58,000 --> 01:08:59,359
hopefully

1751
01:08:59,359 --> 01:09:02,080
yeah he got it okay great

1752
01:09:02,080 --> 01:09:03,439
good thank you

1753
01:09:03,439 --> 01:09:06,919
people from the internet

1754
01:09:07,920 --> 01:09:09,920
let's thank chelsea again

1755
01:09:09,920 --> 01:09:12,480
thank you very much

1756
01:09:16,158 --> 01:09:17,359
yeah

1757
01:09:17,359 --> 01:09:19,279
that's it from us at the safe trip back

1758
01:09:19,279 --> 01:09:21,839
thank you

