1
00:00:05,049 --> 00:00:11,510
thank you for<font color="#CCCCCC"> instruction I would like</font>

2
00:00:09,139 --> 00:00:13,459
<font color="#E5E5E5">to talk on the tightness of</font><font color="#CCCCCC"> the</font>

3
00:00:11,510 --> 00:00:17,300
<font color="#CCCCCC">Berenstain bound and there are some</font>

4
00:00:13,459 --> 00:00:19,220
recent<font color="#E5E5E5"> works on that and issues and at</font>

5
00:00:17,300 --> 00:00:24,189
the end I would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to prepare the</font>

6
00:00:19,220 --> 00:00:27,738
recent attacks due to looks and pinning

7
00:00:24,189 --> 00:00:30,619
<font color="#CCCCCC">okay so I</font><font color="#E5E5E5"> first want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about what</font>

8
00:00:27,739 --> 00:00:33,260
<font color="#E5E5E5">Wakeman</font><font color="#CCCCCC"> cutters soup mac this</font><font color="#E5E5E5"> is</font>

9
00:00:30,619 --> 00:00:35,600
actually non-space<font color="#CCCCCC"> authenticator</font>

10
00:00:33,260 --> 00:00:37,730
where the<font color="#CCCCCC"> initial variant is actually</font>

11
00:00:35,600 --> 00:00:40,340
known as<font color="#CCCCCC"> Wakeman carter</font><font color="#E5E5E5"> authenticator</font>

12
00:00:37,730 --> 00:00:43,669
the little soup<font color="#CCCCCC"> introduced the block</font>

13
00:00:40,340 --> 00:00:48,110
cipher<font color="#CCCCCC"> and since then we also call it</font><font color="#E5E5E5"> a</font>

14
00:00:43,670 --> 00:00:49,340
1/4<font color="#E5E5E5"> so so first</font><font color="#CCCCCC"> i want to talk about the</font>

15
00:00:48,110 --> 00:00:52,580
brief<font color="#CCCCCC"> history of the Whitman Carter</font>

16
00:00:49,340 --> 00:00:55,550
<font color="#CCCCCC">Authenticator</font><font color="#E5E5E5"> it starts from a 74 where</font>

17
00:00:52,580 --> 00:00:57,560
Gilbert<font color="#CCCCCC"> McWilliam and Sloan solve a</font>

18
00:00:55,550 --> 00:01:00,290
coding<font color="#CCCCCC"> based problem which actually</font>

19
00:00:57,560 --> 00:01:04,430
solve some authentication<font color="#CCCCCC"> protocol but</font>

20
00:01:00,290 --> 00:01:06,619
there is some issues which requires a

21
00:01:04,430 --> 00:01:09,140
key size which is as large<font color="#E5E5E5"> as the</font>

22
00:01:06,619 --> 00:01:11,420
message says and it has to<font color="#E5E5E5"> be refreshed</font>

23
00:01:09,140 --> 00:01:14,620
<font color="#E5E5E5">every time so</font><font color="#CCCCCC"> it's the issue</font><font color="#E5E5E5"> is similar</font>

24
00:01:11,420 --> 00:01:20,330
as like one time<font color="#E5E5E5"> padding so this issue</font>

25
00:01:14,620 --> 00:01:23,540
can be solved<font color="#CCCCCC"> if you use</font><font color="#E5E5E5"> Universal to</font>

26
00:01:20,330 --> 00:01:25,908
hash function which is considered<font color="#E5E5E5"> by</font>

27
00:01:23,540 --> 00:01:28,310
workman<font color="#CCCCCC"> Carter and they they consider</font>

28
00:01:25,909 --> 00:01:30,920
the earlier<font color="#CCCCCC"> walk they use some universal</font>

29
00:01:28,310 --> 00:01:33,409
hash function from in 79<font color="#CCCCCC"> so what they</font>

30
00:01:30,920 --> 00:01:34,940
did<font color="#E5E5E5"> instead of the code they</font><font color="#CCCCCC"> apply they</font>

31
00:01:33,409 --> 00:01:36,970
considered the universal<font color="#E5E5E5"> two hash</font>

32
00:01:34,940 --> 00:01:40,250
function strong<font color="#E5E5E5"> Universal hash function</font>

33
00:01:36,970 --> 00:01:42,710
we<font color="#CCCCCC"> applied to the message</font><font color="#E5E5E5"> and but still</font>

34
00:01:40,250 --> 00:01:44,570
it requires a<font color="#E5E5E5"> one-time key but the size</font>

35
00:01:42,710 --> 00:01:47,479
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> one-time key is now is the</font><font color="#E5E5E5"> size</font>

36
00:01:44,570 --> 00:01:50,059
of<font color="#E5E5E5"> the tag size so this our eyes are the</font>

37
00:01:47,479 --> 00:01:52,670
<font color="#E5E5E5">secret keys which are the</font><font color="#CCCCCC"> one-time case</font>

38
00:01:50,060 --> 00:01:56,720
where the size of the Arizer<font color="#E5E5E5"> the size of</font>

39
00:01:52,670 --> 00:01:59,000
the tag<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you're the hash key is is a</font>

40
00:01:56,720 --> 00:02:01,340
key chosen once for you for the whole

41
00:01:59,000 --> 00:02:04,790
<font color="#CCCCCC">life</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it is just</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> one-time key</font>

42
00:02:01,340 --> 00:02:07,310
student<font color="#CCCCCC"> ones ok so this is the eggman</font>

43
00:02:04,790 --> 00:02:10,310
<font color="#E5E5E5">Carter Authenticator but you if</font><font color="#CCCCCC"> you see</font>

44
00:02:07,310 --> 00:02:12,439
the picture<font color="#E5E5E5"> so it's like a we have the</font>

45
00:02:10,310 --> 00:02:17,030
message which goes to the hash<font color="#E5E5E5"> and we</font>

46
00:02:12,439 --> 00:02:18,870
have a the random mask which is<font color="#CCCCCC"> pressed</font>

47
00:02:17,030 --> 00:02:22,260
<font color="#E5E5E5">refreshed</font><font color="#CCCCCC"> every time when you</font>

48
00:02:18,870 --> 00:02:24,209
<font color="#CCCCCC">they</font><font color="#E5E5E5"> get the message</font><font color="#CCCCCC"> so so that's the</font>

49
00:02:22,260 --> 00:02:27,870
picture<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are two directions like</font>

50
00:02:24,209 --> 00:02:29,510
<font color="#E5E5E5">one direction okay so how we can what is</font>

51
00:02:27,870 --> 00:02:32,190
<font color="#E5E5E5">the requirement of these hash functions</font>

52
00:02:29,510 --> 00:02:33,540
<font color="#E5E5E5">it initially it was the strongly</font>

53
00:02:32,190 --> 00:02:36,690
<font color="#CCCCCC">universal hash function where this</font>

54
00:02:33,540 --> 00:02:38,849
<font color="#E5E5E5">required or not so this has been</font><font color="#CCCCCC"> started</font>

55
00:02:36,690 --> 00:02:41,549
like<font color="#E5E5E5"> you can relax to their weaker hash</font>

56
00:02:38,849 --> 00:02:44,250
function<font color="#E5E5E5"> something known as almost extra</font>

57
00:02:41,549 --> 00:02:47,489
<font color="#CCCCCC">universal hash so cross Nik and 94 and</font>

58
00:02:44,250 --> 00:02:49,290
then logo in 95 they consider<font color="#E5E5E5"> this hash</font>

59
00:02:47,489 --> 00:02:51,780
functions<font color="#E5E5E5"> so what this hash function</font>

60
00:02:49,290 --> 00:02:53,730
says it says<font color="#E5E5E5"> that the differential</font>

61
00:02:51,780 --> 00:02:55,590
probability for<font color="#E5E5E5"> this hash function</font><font color="#CCCCCC"> is</font>

62
00:02:53,730 --> 00:02:58,798
small<font color="#E5E5E5"> so there a maximum differential</font>

63
00:02:55,590 --> 00:03:00,329
probability is small<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you can</font>

64
00:02:58,799 --> 00:03:02,340
consider polynomial hashing so that's

65
00:03:00,329 --> 00:03:05,459
the hash<font color="#CCCCCC"> I will mostly consider</font>

66
00:03:02,340 --> 00:03:07,920
throughout the talk<font color="#E5E5E5"> so what what this</font>

67
00:03:05,459 --> 00:03:11,970
<font color="#E5E5E5">hash is</font><font color="#CCCCCC"> so you have a key which is</font><font color="#E5E5E5"> Kappa</font>

68
00:03:07,920 --> 00:03:13,768
<font color="#E5E5E5">and you the message as several blocks</font>

69
00:03:11,970 --> 00:03:15,959
which is like<font color="#E5E5E5"> a safe</font><font color="#CCCCCC"> field elements and</font>

70
00:03:13,769 --> 00:03:20,010
these<font color="#E5E5E5"> are coefficient of your polynomial</font>

71
00:03:15,959 --> 00:03:21,659
<font color="#E5E5E5">and the polynomial</font><font color="#CCCCCC"> is regulated or your</font>

72
00:03:20,010 --> 00:03:24,418
secret key<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is the polynomial</font>

73
00:03:21,659 --> 00:03:26,340
hash and this is it can<font color="#E5E5E5"> be easily shown</font>

74
00:03:24,419 --> 00:03:28,560
<font color="#CCCCCC">that if you take two different masses</font>

75
00:03:26,340 --> 00:03:30,690
that maximum differential probability

76
00:03:28,560 --> 00:03:32,519
can<font color="#CCCCCC"> be at most D by two</font><font color="#E5E5E5"> Pauline where</font>

77
00:03:30,690 --> 00:03:34,980
these degree of the<font color="#CCCCCC"> Parliament that</font>

78
00:03:32,519 --> 00:03:40,260
means these the number of blocks present

79
00:03:34,980 --> 00:03:43,319
in<font color="#E5E5E5"> your message</font><font color="#CCCCCC"> okay so the next</font><font color="#E5E5E5"> issue</font>

80
00:03:40,260 --> 00:03:46,078
<font color="#CCCCCC">is how we can get</font><font color="#E5E5E5"> rid of the this random</font>

81
00:03:43,319 --> 00:03:48,480
string like which is<font color="#E5E5E5"> refreshed every</font>

82
00:03:46,079 --> 00:03:49,949
<font color="#E5E5E5">time so that's definitely an issue</font>

83
00:03:48,480 --> 00:03:53,910
<font color="#E5E5E5">because we need to have a</font><font color="#CCCCCC"> one-time</font>

84
00:03:49,949 --> 00:03:57,209
randomness<font color="#E5E5E5"> so somehow we have to compute</font>

85
00:03:53,910 --> 00:03:59,489
this<font color="#E5E5E5"> island directly on your secret key</font>

86
00:03:57,209 --> 00:04:03,209
and the message<font color="#E5E5E5"> number so the one</font>

87
00:03:59,489 --> 00:04:05,639
<font color="#E5E5E5">solution was due to Brassard three you</font>

88
00:04:03,209 --> 00:04:07,410
<font color="#E5E5E5">just</font><font color="#CCCCCC"> consider</font><font color="#E5E5E5"> the pyramid a bit</font>

89
00:04:05,639 --> 00:04:10,620
<font color="#E5E5E5">generator you</font><font color="#CCCCCC"> have your mask and you</font>

90
00:04:07,410 --> 00:04:12,900
express<font color="#CCCCCC"> that mask</font><font color="#E5E5E5"> as long</font><font color="#CCCCCC"> as you like</font>

91
00:04:10,620 --> 00:04:14,940
<font color="#CCCCCC">but the point</font><font color="#E5E5E5"> is if you</font><font color="#CCCCCC"> the message</font>

92
00:04:12,900 --> 00:04:16,440
number comes into and you in in random

93
00:04:14,940 --> 00:04:18,209
order<font color="#E5E5E5"> then you have to compute the</font>

94
00:04:16,440 --> 00:04:20,870
<font color="#E5E5E5">Senate</font>

95
00:04:18,209 --> 00:04:23,430
random key stream in a direct manner<font color="#E5E5E5"> and</font>

96
00:04:20,870 --> 00:04:25,080
that's also pointed<font color="#E5E5E5"> out by browser in</font>

97
00:04:23,430 --> 00:04:26,789
the same paper here<font color="#CCCCCC"> and he pointed out</font>

98
00:04:25,080 --> 00:04:30,060
that blum blum sub serial number

99
00:04:26,789 --> 00:04:31,590
generator has this feature<font color="#E5E5E5"> if you've if</font>

100
00:04:30,060 --> 00:04:32,740
you<font color="#E5E5E5"> think this in abstract way this</font>

101
00:04:31,590 --> 00:04:35,679
<font color="#E5E5E5">actually models</font>

102
00:04:32,740 --> 00:04:38,530
<font color="#CCCCCC">function</font><font color="#E5E5E5"> so we can compute the</font><font color="#CCCCCC"> i8p</font>

103
00:04:35,680 --> 00:04:40,840
<font color="#CCCCCC">stream directly so what that that's</font><font color="#E5E5E5"> what</font>

104
00:04:38,530 --> 00:04:42,489
children function does<font color="#E5E5E5"> so we can</font>

105
00:04:40,840 --> 00:04:44,770
<font color="#CCCCCC">actually consider a</font><font color="#E5E5E5"> pseudo-random</font>

106
00:04:42,490 --> 00:04:48,190
function which takes<font color="#E5E5E5"> once as an input</font>

107
00:04:44,770 --> 00:04:52,659
and that<font color="#CCCCCC"> masks your hash</font><font color="#E5E5E5"> output</font><font color="#CCCCCC"> of a</font>

108
00:04:48,190 --> 00:04:54,190
<font color="#E5E5E5">message but</font><font color="#CCCCCC"> solarium</font><font color="#E5E5E5"> function</font><font color="#CCCCCC"> is not</font>

109
00:04:52,660 --> 00:04:56,530
that available compared to the block

110
00:04:54,190 --> 00:04:58,569
<font color="#E5E5E5">cipher so what you can see that</font><font color="#CCCCCC"> okay so</font>

111
00:04:56,530 --> 00:05:00,729
replace this block cipher<font color="#CCCCCC"> so if you play</font>

112
00:04:58,569 --> 00:05:03,940
the<font color="#E5E5E5"> Sweden function like the block</font>

113
00:05:00,729 --> 00:05:04,900
cipher<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the popular model of the</font>

114
00:05:03,940 --> 00:05:08,349
block cipher<font color="#CCCCCC"> is the pseudo-random</font>

115
00:05:04,900 --> 00:05:10,388
permutation<font color="#CCCCCC"> so now it's like</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so at</font>

116
00:05:08,349 --> 00:05:12,909
the cost<font color="#E5E5E5"> of the switching lemma you can</font>

117
00:05:10,389 --> 00:05:14,830
<font color="#E5E5E5">analyze the same thing so so this is the</font>

118
00:05:12,909 --> 00:05:16,780
basically brief history of<font color="#CCCCCC"> the</font>

119
00:05:14,830 --> 00:05:19,180
<font color="#E5E5E5">development Carter so in this talk I</font>

120
00:05:16,780 --> 00:05:22,349
will<font color="#E5E5E5"> talk about the different attacks on</font>

121
00:05:19,180 --> 00:05:25,060
the<font color="#CCCCCC"> Wakeman</font><font color="#E5E5E5"> Carter and for example</font>

122
00:05:22,349 --> 00:05:27,520
<font color="#E5E5E5">Swoopes analysis and attack and the</font>

123
00:05:25,060 --> 00:05:30,150
security analysis so the soup has

124
00:05:27,520 --> 00:05:32,770
<font color="#CCCCCC">analysis and then</font><font color="#E5E5E5"> bounce train</font><font color="#CCCCCC"> have ever</font>

125
00:05:30,150 --> 00:05:35,739
bound<font color="#E5E5E5"> and I will try to interpret that</font>

126
00:05:32,770 --> 00:05:39,549
bound and also the some recent

127
00:05:35,740 --> 00:05:42,219
development in this year<font color="#CCCCCC"> you</font><font color="#E5E5E5"> look it</font><font color="#CCCCCC"> we</font>

128
00:05:39,550 --> 00:05:43,990
have two papers<font color="#E5E5E5"> one</font><font color="#CCCCCC"> paper is</font><font color="#E5E5E5"> talk about</font>

129
00:05:42,219 --> 00:05:46,240
<font color="#CCCCCC">the missing</font><font color="#E5E5E5"> difference problem the other</font>

130
00:05:43,990 --> 00:05:49,630
one is which is our main<font color="#E5E5E5"> focus is the</font>

131
00:05:46,240 --> 00:05:53,229
<font color="#E5E5E5">look spinnel for jealousy we identify</font>

132
00:05:49,630 --> 00:05:55,599
some issues<font color="#E5E5E5"> in their effort and and we</font>

133
00:05:53,229 --> 00:05:57,639
resolve it<font color="#CCCCCC"> we resolve peacefully resolve</font>

134
00:05:55,599 --> 00:06:00,580
it and<font color="#E5E5E5"> put the optimality or the</font>

135
00:05:57,639 --> 00:06:03,870
tightness<font color="#CCCCCC"> of the Berenstain</font><font color="#E5E5E5"> bomb so what</font>

136
00:06:00,580 --> 00:06:06,789
they if you<font color="#E5E5E5"> I will talk about this for</font>

137
00:06:03,870 --> 00:06:08,860
<font color="#E5E5E5">their approach so they they consider the</font>

138
00:06:06,789 --> 00:06:11,080
false key based approach<font color="#E5E5E5"> and the</font>

139
00:06:08,860 --> 00:06:13,060
approach is<font color="#CCCCCC"> very nice so I actually I</font>

140
00:06:11,080 --> 00:06:15,550
would take that approach<font color="#E5E5E5"> once again but</font>

141
00:06:13,060 --> 00:06:18,370
we will make appropriate<font color="#CCCCCC"> analysis and we</font>

142
00:06:15,550 --> 00:06:20,440
proved that the tightness<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the bastion</font>

143
00:06:18,370 --> 00:06:22,440
<font color="#E5E5E5">bound in two scenario when the message</font>

144
00:06:20,440 --> 00:06:25,240
<font color="#E5E5E5">has chosen random that's easy to analyze</font>

145
00:06:22,440 --> 00:06:27,490
<font color="#E5E5E5">but the analysis is also analysis also</font>

146
00:06:25,240 --> 00:06:29,469
<font color="#E5E5E5">works if the message are fixed</font><font color="#CCCCCC"> things</font>

147
00:06:27,490 --> 00:06:30,969
so even adversary has no<font color="#E5E5E5"> control on</font>

148
00:06:29,469 --> 00:06:33,190
choice of the message<font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> the</font>

149
00:06:30,969 --> 00:06:36,719
<font color="#E5E5E5">message are we</font><font color="#CCCCCC"> actually the attack works</font>

150
00:06:33,190 --> 00:06:39,280
but it requires more complex<font color="#E5E5E5"> analysis</font>

151
00:06:36,719 --> 00:06:42,099
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> finally we extend</font><font color="#CCCCCC"> that attack</font>

152
00:06:39,280 --> 00:06:44,260
<font color="#CCCCCC">RAF to the GCM also because GCM</font><font color="#E5E5E5"> tag is</font>

153
00:06:42,099 --> 00:06:45,919
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> Weidman Carter</font><font color="#E5E5E5"> Authenticator</font>

154
00:06:44,260 --> 00:06:47,930
<font color="#E5E5E5">where the</font>

155
00:06:45,919 --> 00:06:50,799
the cipher<font color="#CCCCCC"> is authenticated</font><font color="#E5E5E5"> the</font>

156
00:06:47,930 --> 00:06:54,889
<font color="#CCCCCC">ciphertext</font><font color="#E5E5E5"> rather than the plaintext</font>

157
00:06:50,800 --> 00:06:58,009
<font color="#E5E5E5">okay so come back to Edwin Carter soup</font>

158
00:06:54,889 --> 00:06:59,930
<font color="#E5E5E5">Authenticator WCS no just focus on the</font>

159
00:06:58,009 --> 00:07:01,879
<font color="#E5E5E5">poly hash so you can actually think any</font>

160
00:06:59,930 --> 00:07:04,490
other<font color="#E5E5E5"> universal almost takes</font><font color="#CCCCCC"> on</font>

161
00:07:01,879 --> 00:07:07,879
universal hash functions but just for

162
00:07:04,490 --> 00:07:09,680
simplicity consider the poly has but if

163
00:07:07,879 --> 00:07:12,020
you apply the poly<font color="#E5E5E5"> has there is some</font>

164
00:07:09,680 --> 00:07:12,949
some attack is known like if the<font color="#CCCCCC"> Noles</font>

165
00:07:12,020 --> 00:07:15,620
is misused

166
00:07:12,949 --> 00:07:17,330
if the nonce<font color="#E5E5E5"> is misused for two but that</font>

167
00:07:15,620 --> 00:07:19,009
computation so it's<font color="#CCCCCC"> a non suspecting</font>

168
00:07:17,330 --> 00:07:21,169
scenarios you should not repeat<font color="#E5E5E5"> noise so</font>

169
00:07:19,009 --> 00:07:23,569
what happens if<font color="#E5E5E5"> no snippets so if nonce</font>

170
00:07:21,169 --> 00:07:26,919
is repeated then actually there is a

171
00:07:23,569 --> 00:07:29,810
forgery attack which can recover the<font color="#CCCCCC"> the</font>

172
00:07:26,919 --> 00:07:32,688
hash<font color="#E5E5E5"> key so what how you can do that you</font>

173
00:07:29,810 --> 00:07:35,150
just have collect<font color="#E5E5E5"> two</font><font color="#CCCCCC"> tags T and T prime</font>

174
00:07:32,689 --> 00:07:38,330
for two messages<font color="#CCCCCC"> M & M pain but the same</font>

175
00:07:35,150 --> 00:07:41,719
<font color="#E5E5E5">noise so just ixora</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> north it will</font>

176
00:07:38,330 --> 00:07:44,900
be kept so what what do get at the end

177
00:07:41,719 --> 00:07:47,090
is a polynomial<font color="#E5E5E5"> in hash key and you can</font>

178
00:07:44,900 --> 00:07:49,429
solve the polynomial and<font color="#E5E5E5"> you get the</font>

179
00:07:47,090 --> 00:07:50,929
root and and<font color="#CCCCCC"> we will we high probability</font>

180
00:07:49,430 --> 00:07:52,550
<font color="#CCCCCC">you will recover</font><font color="#E5E5E5"> the root so</font><font color="#CCCCCC"> you can</font>

181
00:07:50,930 --> 00:07:56,750
<font color="#CCCCCC">forger you can have a forgery at the</font>

182
00:07:52,550 --> 00:07:58,759
after<font color="#CCCCCC"> that okay so this is for in</font><font color="#E5E5E5"> non</font>

183
00:07:56,750 --> 00:08:01,580
<font color="#E5E5E5">system issues but when noise is</font>

184
00:07:58,759 --> 00:08:04,729
respected<font color="#E5E5E5"> how can they do that so in</font>

185
00:08:01,580 --> 00:08:08,690
<font color="#E5E5E5">that case what we can</font><font color="#CCCCCC"> do to first</font>

186
00:08:04,729 --> 00:08:11,180
collect<font color="#E5E5E5"> attack from some message and</font>

187
00:08:08,690 --> 00:08:14,120
noise and then we<font color="#E5E5E5"> make a forgery</font><font color="#CCCCCC"> item</font>

188
00:08:11,180 --> 00:08:16,520
<font color="#E5E5E5">okay so whenever you</font><font color="#CCCCCC"> make a forgery atom</font>

189
00:08:14,120 --> 00:08:18,949
if it is<font color="#E5E5E5"> valid then you are done so you</font>

190
00:08:16,520 --> 00:08:21,919
have successfully<font color="#CCCCCC"> data</font><font color="#E5E5E5"> but if it is not</font>

191
00:08:18,949 --> 00:08:24,169
then then you actually<font color="#E5E5E5"> know that the</font>

192
00:08:21,919 --> 00:08:27,500
hash key is not in the<font color="#CCCCCC"> solution space of</font>

193
00:08:24,169 --> 00:08:29,960
<font color="#E5E5E5">this equations so because the</font><font color="#CCCCCC"> previous</font>

194
00:08:27,500 --> 00:08:31,219
case when these are actually valid then

195
00:08:29,960 --> 00:08:33,289
the hash key in the solution<font color="#E5E5E5"> space of</font>

196
00:08:31,219 --> 00:08:35,029
<font color="#E5E5E5">this your polynomial equations but now</font>

197
00:08:33,289 --> 00:08:40,458
it's<font color="#CCCCCC"> invalid</font><font color="#E5E5E5"> so it's not in that in this</font>

198
00:08:35,029 --> 00:08:42,110
equations<font color="#E5E5E5"> so what you try to do if your</font>

199
00:08:40,458 --> 00:08:46,130
<font color="#CCCCCC">polynomial is of degree D method that</font>

200
00:08:42,110 --> 00:08:48,410
<font color="#E5E5E5">means you you have a D block message for</font>

201
00:08:46,130 --> 00:08:51,680
each posing at him<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> try to guess</font>

202
00:08:48,410 --> 00:08:54,050
<font color="#E5E5E5">D solutions even case that have like</font>

203
00:08:51,680 --> 00:08:56,540
hash key in one of the<font color="#CCCCCC"> D solutions the</font>

204
00:08:54,050 --> 00:08:58,969
<font color="#CCCCCC">Nevada</font><font color="#E5E5E5"> done so you will try to choose</font>

205
00:08:56,540 --> 00:08:59,839
<font color="#E5E5E5">the message here in such a manner so</font>

206
00:08:58,970 --> 00:09:02,509
<font color="#CCCCCC">that all the</font>

207
00:08:59,839 --> 00:09:05,959
<font color="#E5E5E5">in all atoms you actually try exhaust</font>

208
00:09:02,509 --> 00:09:08,990
the<font color="#CCCCCC"> roots</font><font color="#E5E5E5"> and if you make</font><font color="#CCCCCC"> reforging</font>

209
00:09:05,959 --> 00:09:11,839
atoms then you're successful it will<font color="#CCCCCC"> be</font>

210
00:09:08,990 --> 00:09:14,569
<font color="#CCCCCC">BA D</font><font color="#E5E5E5"> by 2 power n because after we've</font>

211
00:09:11,839 --> 00:09:17,569
atom you actually<font color="#CCCCCC"> getting</font><font color="#E5E5E5"> PD many roots</font>

212
00:09:14,569 --> 00:09:20,029
and<font color="#E5E5E5"> that if we</font><font color="#CCCCCC"> had the key space is to</font>

213
00:09:17,569 --> 00:09:21,439
pour in<font color="#CCCCCC"> for so the</font><font color="#E5E5E5"> power between me PD</font>

214
00:09:20,029 --> 00:09:25,249
by to<font color="#CCCCCC"> pour it so that's the non</font>

215
00:09:21,439 --> 00:09:28,490
suspecting forgery<font color="#E5E5E5"> and now I recall I</font>

216
00:09:25,249 --> 00:09:31,189
<font color="#CCCCCC">know we recall the bounds which are</font>

217
00:09:28,490 --> 00:09:33,529
known for this<font color="#E5E5E5"> oil</font><font color="#CCCCCC"> 1/4</font><font color="#E5E5E5"> Authenticator so</font>

218
00:09:31,189 --> 00:09:35,660
if you look at the classical<font color="#E5E5E5"> bound where</font>

219
00:09:33,529 --> 00:09:37,490
the key streams are perfectly<font color="#E5E5E5"> random</font><font color="#CCCCCC"> its</font>

220
00:09:35,660 --> 00:09:39,680
<font color="#E5E5E5">genetic maybe from the random functions</font>

221
00:09:37,490 --> 00:09:41,809
then you can see that<font color="#CCCCCC"> the bound will be</font>

222
00:09:39,680 --> 00:09:44,120
<font color="#E5E5E5">P times epsilon where P is the</font><font color="#CCCCCC"> number of</font>

223
00:09:41,809 --> 00:09:45,559
forging<font color="#CCCCCC"> atom and epsilon is the maximum</font>

224
00:09:44,120 --> 00:09:47,720
differential probability of the hash

225
00:09:45,559 --> 00:09:49,819
<font color="#E5E5E5">function it actually doesn't matter how</font>

226
00:09:47,720 --> 00:09:53,559
many Mac queries you do so it is

227
00:09:49,819 --> 00:09:56,360
<font color="#E5E5E5">independent of the Mac well but if you</font>

228
00:09:53,559 --> 00:09:59,180
consider<font color="#E5E5E5"> egg 1/4 soup authenticated</font>

229
00:09:56,360 --> 00:10:01,339
where the random<font color="#CCCCCC"> P stream is replaced by</font>

230
00:09:59,180 --> 00:10:04,579
<font color="#E5E5E5">the block cipher output now you have to</font>

231
00:10:01,339 --> 00:10:07,309
the one approaches<font color="#CCCCCC"> the</font><font color="#E5E5E5"> applied</font><font color="#CCCCCC"> plpl pp</font>

232
00:10:04,579 --> 00:10:10,758
switching lemma<font color="#E5E5E5"> then that cost some but</font>

233
00:10:07,309 --> 00:10:12,589
the bound of your number of queries<font color="#E5E5E5"> so</font>

234
00:10:10,759 --> 00:10:16,870
this is the<font color="#E5E5E5"> the by using standard</font>

235
00:10:12,589 --> 00:10:19,250
<font color="#E5E5E5">switching lemma</font><font color="#CCCCCC"> but who did more</font>

236
00:10:16,870 --> 00:10:22,639
<font color="#CCCCCC">ridiculous</font><font color="#E5E5E5"> analysis and he actually</font>

237
00:10:19,250 --> 00:10:24,889
proved that<font color="#CCCCCC"> ok you can prove the bowel</font>

238
00:10:22,639 --> 00:10:27,439
is similar to the classical<font color="#CCCCCC"> bout is 2</font>

239
00:10:24,889 --> 00:10:29,360
times<font color="#CCCCCC"> V epsilon</font><font color="#E5E5E5"> but there is a</font>

240
00:10:27,439 --> 00:10:31,579
restriction that the number<font color="#E5E5E5"> of queries</font>

241
00:10:29,360 --> 00:10:33,800
the<font color="#CCCCCC"> map queries cannot be large</font><font color="#E5E5E5"> it</font>

242
00:10:31,579 --> 00:10:36,170
should<font color="#E5E5E5"> be less than some amount</font><font color="#CCCCCC"> ok then</font>

243
00:10:33,800 --> 00:10:39,170
the bound works<font color="#E5E5E5"> and after that I don't</font>

244
00:10:36,170 --> 00:10:42,740
<font color="#CCCCCC">know about you is more</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> he</font>

245
00:10:39,170 --> 00:10:46,550
doesn't show anything on that so what

246
00:10:42,740 --> 00:10:49,399
Bernstein did<font color="#CCCCCC"> well actually it extend</font>

247
00:10:46,550 --> 00:10:52,910
that bounds in some sense<font color="#E5E5E5"> so what he</font>

248
00:10:49,399 --> 00:10:54,980
proved he proved it<font color="#CCCCCC"> again we have a V</font>

249
00:10:52,910 --> 00:10:57,559
epsilon factor that's coming from the

250
00:10:54,980 --> 00:11:01,879
forging<font color="#CCCCCC"> atom but there is the other term</font>

251
00:10:57,559 --> 00:11:03,490
which is actually goes to<font color="#E5E5E5"> the with the</font>

252
00:11:01,879 --> 00:11:05,959
<font color="#E5E5E5">collision probability if you see the</font>

253
00:11:03,490 --> 00:11:08,990
pollution<font color="#CCCCCC"> are distinct probability this</font>

254
00:11:05,959 --> 00:11:11,300
is the probability<font color="#E5E5E5"> you will see that</font><font color="#CCCCCC"> our</font>

255
00:11:08,990 --> 00:11:13,699
inverse of this so if you if you write

256
00:11:11,300 --> 00:11:16,608
rewrite this in terms<font color="#CCCCCC"> of the order it</font>

257
00:11:13,699 --> 00:11:19,128
purifies<font color="#E5E5E5"> with</font><font color="#CCCCCC"> V times epsilon</font><font color="#E5E5E5"> e power Q</font>

258
00:11:16,609 --> 00:11:21,589
<font color="#E5E5E5">scrubber to pour it so this</font><font color="#CCCCCC"> is the</font>

259
00:11:19,129 --> 00:11:27,169
<font color="#CCCCCC">muslin bound</font><font color="#E5E5E5"> so there is no limit on Q</font>

260
00:11:21,589 --> 00:11:29,959
<font color="#E5E5E5">and B but if you see that if you is say</font>

261
00:11:27,169 --> 00:11:31,730
<font color="#CCCCCC">to power n by 2 so what it turns</font><font color="#E5E5E5"> out to</font>

262
00:11:29,959 --> 00:11:34,849
be the D<font color="#E5E5E5"> power Q square by 2 power n is</font>

263
00:11:31,730 --> 00:11:37,339
some constant then we get again

264
00:11:34,850 --> 00:11:39,470
something like<font color="#E5E5E5"> P times epsilon so</font>

265
00:11:37,339 --> 00:11:41,509
epsilon you can imagine<font color="#CCCCCC"> D by 2 power n</font>

266
00:11:39,470 --> 00:11:43,639
in case of the poly<font color="#CCCCCC"> has or just 1 over</font><font color="#E5E5E5"> 2</font>

267
00:11:41,509 --> 00:11:48,799
power n if the number<font color="#E5E5E5"> of blocks is small</font>

268
00:11:43,639 --> 00:11:50,959
<font color="#E5E5E5">so it's actually it's very bad it's</font>

269
00:11:48,799 --> 00:11:54,858
close to<font color="#E5E5E5"> the classical bound going to</font>

270
00:11:50,959 --> 00:11:56,299
have a random strip but you have the key

271
00:11:54,859 --> 00:11:58,999
<font color="#E5E5E5">dumb block where is the Mac well should</font>

272
00:11:56,299 --> 00:12:01,220
<font color="#E5E5E5">be up to</font><font color="#CCCCCC"> 2 power n by 2</font><font color="#E5E5E5"> but even on the</font>

273
00:11:58,999 --> 00:12:04,759
to Pauline by 2 you have a very very low

274
00:12:01,220 --> 00:12:06,290
status probability so let's understand

275
00:12:04,759 --> 00:12:09,889
this in more detail like if you have a

276
00:12:06,290 --> 00:12:13,219
classical bound<font color="#E5E5E5"> which says that as</font><font color="#CCCCCC"> long</font>

277
00:12:09,889 --> 00:12:15,019
<font color="#E5E5E5">as there is two pi n by 2 smaller than 2</font>

278
00:12:13,220 --> 00:12:16,790
<font color="#E5E5E5">pi N by 2 the</font><font color="#CCCCCC"> advent is small and</font>

279
00:12:15,019 --> 00:12:19,939
<font color="#E5E5E5">because the</font><font color="#CCCCCC"> soup spout</font><font color="#E5E5E5"> okay your number</font>

280
00:12:16,790 --> 00:12:21,738
of query<font color="#E5E5E5"> to point by 2 times by square</font>

281
00:12:19,939 --> 00:12:24,349
root of<font color="#E5E5E5"> D then your advantage will</font><font color="#CCCCCC"> be</font>

282
00:12:21,739 --> 00:12:26,480
<font color="#CCCCCC">again</font><font color="#E5E5E5"> small and Bastion bounds actually</font>

283
00:12:24,350 --> 00:12:28,879
improve<font color="#E5E5E5"> this the limit</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> queue that</font>

284
00:12:26,480 --> 00:12:32,029
if<font color="#E5E5E5"> even if your Q</font><font color="#CCCCCC"> is less up</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> point</font>

285
00:12:28,879 --> 00:12:34,339
by 2 the advantage is small<font color="#E5E5E5"> in</font>

286
00:12:32,029 --> 00:12:35,839
particular you<font color="#E5E5E5"> can see like just the</font>

287
00:12:34,339 --> 00:12:38,660
same thing I<font color="#E5E5E5"> am giving some particular</font>

288
00:12:35,839 --> 00:12:41,779
values<font color="#E5E5E5"> like in case of 128-bit block</font>

289
00:12:38,660 --> 00:12:43,579
size the<font color="#E5E5E5"> Swoopes bound granted the</font>

290
00:12:41,779 --> 00:12:45,859
negligible advantage like 1<font color="#E5E5E5"> over 2</font><font color="#CCCCCC"> or</font>

291
00:12:43,579 --> 00:12:51,049
<font color="#E5E5E5">128 order of that if the number of</font>

292
00:12:45,859 --> 00:12:52,730
purging item is small sorry but you can

293
00:12:51,049 --> 00:12:55,220
you<font color="#E5E5E5"> can make a</font><font color="#CCCCCC"> detailed data limit or</font>

294
00:12:52,730 --> 00:12:56,899
like<font color="#E5E5E5"> order up to</font><font color="#CCCCCC"> power 54 but</font><font color="#E5E5E5"> if you</font>

295
00:12:55,220 --> 00:12:58,819
upload the Boston bound<font color="#CCCCCC"> you can actually</font>

296
00:12:56,899 --> 00:13:01,189
keep your<font color="#E5E5E5"> data limit to power 64 even</font>

297
00:12:58,819 --> 00:13:03,009
even if you use to power 64 queries you

298
00:13:01,189 --> 00:13:06,529
are still safe

299
00:13:03,009 --> 00:13:08,029
<font color="#CCCCCC">okay so now</font><font color="#E5E5E5"> we talk about the recent</font>

300
00:13:06,529 --> 00:13:10,720
development<font color="#CCCCCC"> there</font><font color="#E5E5E5"> so there is a missing</font>

301
00:13:08,029 --> 00:13:13,039
the difference problem which<font color="#E5E5E5"> actually</font>

302
00:13:10,720 --> 00:13:14,839
takes care this type of problem<font color="#E5E5E5"> but in</font>

303
00:13:13,039 --> 00:13:17,209
different<font color="#CCCCCC"> ways so suppose you have a two</font>

304
00:13:14,839 --> 00:13:19,279
<font color="#E5E5E5">list and there is one number which is</font>

305
00:13:17,209 --> 00:13:21,469
<font color="#E5E5E5">secret number which is not</font><font color="#CCCCCC"> in the sum of</font>

306
00:13:19,279 --> 00:13:23,839
<font color="#E5E5E5">two</font><font color="#CCCCCC"> lists</font><font color="#E5E5E5"> so how we</font><font color="#CCCCCC"> can find that</font><font color="#E5E5E5"> s</font>

307
00:13:21,470 --> 00:13:27,939
that's<font color="#E5E5E5"> the missing difference problem so</font>

308
00:13:23,839 --> 00:13:27,939
what<font color="#CCCCCC"> you they</font><font color="#E5E5E5"> are different</font>

309
00:13:27,950 --> 00:13:35,990
<font color="#E5E5E5">progress on this</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> particular we can</font>

310
00:13:32,030 --> 00:13:38,150
consider that this s is my hash key from

311
00:13:35,990 --> 00:13:41,120
the hash key space and the list will

312
00:13:38,150 --> 00:13:44,470
come in some manners<font color="#CCCCCC"> okay so it</font>

313
00:13:41,120 --> 00:13:50,090
<font color="#CCCCCC">certainly</font><font color="#E5E5E5"> laurent and syphilis in</font><font color="#CCCCCC"> europe</font>

314
00:13:44,470 --> 00:13:52,850
<font color="#E5E5E5">2010 he showed a reconstructed a missing</font>

315
00:13:50,090 --> 00:13:55,400
difference have problem<font color="#E5E5E5"> here which</font>

316
00:13:52,850 --> 00:13:58,730
<font color="#E5E5E5">actually equals to four twin by three up</font>

317
00:13:55,400 --> 00:14:00,470
to log factors<font color="#E5E5E5"> query a time and memory</font>

318
00:13:58,730 --> 00:14:04,820
<font color="#E5E5E5">as well as</font><font color="#CCCCCC"> the quell means the</font><font color="#E5E5E5"> list eyes</font>

319
00:14:00,470 --> 00:14:07,130
are in that<font color="#E5E5E5"> side but you can show that</font>

320
00:14:04,820 --> 00:14:08,870
optimally size is actually<font color="#CCCCCC"> two point by</font>

321
00:14:07,130 --> 00:14:11,480
two times square root of n we don't need

322
00:14:08,870 --> 00:14:13,670
that<font color="#CCCCCC"> tuple but</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> end by three so</font>

323
00:14:11,480 --> 00:14:15,440
basically what you<font color="#CCCCCC"> can do if you look</font><font color="#E5E5E5"> at</font>

324
00:14:13,670 --> 00:14:17,360
two lists of size<font color="#E5E5E5"> 2.0</font><font color="#CCCCCC"> i 2</font><font color="#E5E5E5"> times square</font>

325
00:14:15,440 --> 00:14:20,720
<font color="#CCCCCC">root of n</font><font color="#E5E5E5"> you acts on it</font><font color="#CCCCCC"> basically you</font>

326
00:14:17,360 --> 00:14:24,380
are having<font color="#E5E5E5"> 2 power n times in many pairs</font>

327
00:14:20,720 --> 00:14:25,730
and if you<font color="#E5E5E5"> assume that all these sum is</font>

328
00:14:24,380 --> 00:14:27,470
independent and<font color="#E5E5E5"> uniform distributed</font>

329
00:14:25,730 --> 00:14:30,890
which is not<font color="#E5E5E5"> true because they are not</font>

330
00:14:27,470 --> 00:14:32,330
independent<font color="#CCCCCC"> and then you can</font><font color="#E5E5E5"> kind of</font>

331
00:14:30,890 --> 00:14:35,870
coupon packing problem<font color="#CCCCCC"> argument</font>

332
00:14:32,330 --> 00:14:37,490
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> are trying to get your</font>

333
00:14:35,870 --> 00:14:39,920
time to exhaust<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> coupons which</font>

334
00:14:37,490 --> 00:14:42,110
are not the s so<font color="#CCCCCC"> all elements which are</font>

335
00:14:39,920 --> 00:14:44,060
<font color="#E5E5E5">not</font><font color="#CCCCCC"> s</font><font color="#E5E5E5"> you can imagine</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> a coupon</font><font color="#CCCCCC"> and</font>

336
00:14:42,110 --> 00:14:46,730
those elements<font color="#CCCCCC"> you are</font><font color="#E5E5E5"> getting from the</font>

337
00:14:44,060 --> 00:14:49,130
sum of two peers you<font color="#CCCCCC"> are</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> are trying</font>

338
00:14:46,730 --> 00:14:55,430
to exhaust<font color="#E5E5E5"> that least and that</font><font color="#CCCCCC"> requires</font>

339
00:14:49,130 --> 00:14:57,650
n log<font color="#E5E5E5"> n many atoms</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> now these are</font>

340
00:14:55,430 --> 00:14:59,510
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> hash</font><font color="#E5E5E5"> key recovery approach</font>

341
00:14:57,650 --> 00:15:03,650
and this from<font color="#E5E5E5"> the missing list but</font><font color="#CCCCCC"> i</font>

342
00:14:59,510 --> 00:15:05,270
<font color="#CCCCCC">would go</font><font color="#E5E5E5"> to the look spinel forgery</font>

343
00:15:03,650 --> 00:15:09,140
across this<font color="#E5E5E5"> we see the</font><font color="#CCCCCC"> main book so</font>

344
00:15:05,270 --> 00:15:11,030
these dual approach up the this problem

345
00:15:09,140 --> 00:15:14,030
so here instead<font color="#E5E5E5"> of considering the</font><font color="#CCCCCC"> two</font>

346
00:15:11,030 --> 00:15:16,339
<font color="#CCCCCC">lists here I try</font><font color="#E5E5E5"> to consider how in</font>

347
00:15:14,030 --> 00:15:18,110
after some atoms how many coupons<font color="#CCCCCC"> I can</font>

348
00:15:16,340 --> 00:15:19,760
exhaust<font color="#E5E5E5"> what is the expected number of</font>

349
00:15:18,110 --> 00:15:20,930
coupons I can exhaust<font color="#E5E5E5"> the other cases</font>

350
00:15:19,760 --> 00:15:22,490
<font color="#CCCCCC">coupon that</font><font color="#E5E5E5"> a problem</font>

351
00:15:20,930 --> 00:15:24,500
to exhaust all<font color="#CCCCCC"> the coupons</font><font color="#E5E5E5"> how many</font>

352
00:15:22,490 --> 00:15:27,230
<font color="#E5E5E5">tries had to make so it's a kind of</font><font color="#CCCCCC"> wall</font>

353
00:15:24,500 --> 00:15:30,650
problem<font color="#E5E5E5"> so in this case we</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> the</font>

354
00:15:27,230 --> 00:15:33,320
false key set which is be sincerely<font color="#E5E5E5"> set</font>

355
00:15:30,650 --> 00:15:36,439
of all X for<font color="#E5E5E5"> which hkh x mi plus TR</font>

356
00:15:33,320 --> 00:15:39,590
<font color="#E5E5E5">equal to HX MJ plus TJ you can see that</font>

357
00:15:36,440 --> 00:15:41,150
this X cannot<font color="#CCCCCC"> be the this</font><font color="#E5E5E5"> only any</font>

358
00:15:39,590 --> 00:15:42,860
element of<font color="#E5E5E5"> this cannot be a</font>

359
00:15:41,150 --> 00:15:45,829
<font color="#E5E5E5">Heskey because if in</font><font color="#CCCCCC"> case of the hash</font>

360
00:15:42,860 --> 00:15:48,560
key<font color="#CCCCCC"> this should not be true</font><font color="#E5E5E5"> for any idea</font>

361
00:15:45,830 --> 00:15:51,890
because<font color="#CCCCCC"> all output of the</font><font color="#E5E5E5"> nonce are</font><font color="#CCCCCC"> on</font>

362
00:15:48,560 --> 00:15:53,869
listing<font color="#E5E5E5"> so what you will do after</font><font color="#CCCCCC"> you</font>

363
00:15:51,890 --> 00:15:55,670
<font color="#E5E5E5">least make a false key list you</font><font color="#CCCCCC"> would</font>

364
00:15:53,870 --> 00:15:58,310
just choose<font color="#E5E5E5"> an element outside the false</font>

365
00:15:55,670 --> 00:16:00,050
key<font color="#E5E5E5"> set I call it true key set randomly</font>

366
00:15:58,310 --> 00:16:01,969
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> you can show</font><font color="#CCCCCC"> that the key</font>

367
00:16:00,050 --> 00:16:04,569
recovery<font color="#E5E5E5"> advantage is 1 over 2 power n</font>

368
00:16:01,970 --> 00:16:08,000
by the<font color="#E5E5E5"> expected size of the true P set</font>

369
00:16:04,570 --> 00:16:10,160
so<font color="#E5E5E5"> that's the theorem and 2018 so what</font>

370
00:16:08,000 --> 00:16:12,140
is sure<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> show that ok the</font>

371
00:16:10,160 --> 00:16:14,930
expected<font color="#E5E5E5"> size of the false key set is at</font>

372
00:16:12,140 --> 00:16:17,000
least<font color="#CCCCCC"> u square</font><font color="#E5E5E5"> over 4</font><font color="#CCCCCC"> but when</font><font color="#E5E5E5"> Q is is</font>

373
00:16:14,930 --> 00:16:18,920
up<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bad the bomb and the key takeaway</font>

374
00:16:17,000 --> 00:16:21,260
advantage will be<font color="#E5E5E5"> 1 over</font><font color="#CCCCCC"> 2 pi</font><font color="#E5E5E5"> n by minus</font>

375
00:16:18,920 --> 00:16:22,459
Q<font color="#E5E5E5"> squared over 4 and they concluded that</font>

376
00:16:21,260 --> 00:16:29,000
Bastion bound is<font color="#CCCCCC"> tight</font>

377
00:16:22,460 --> 00:16:32,420
is it so<font color="#E5E5E5"> actually not if you calculate</font>

378
00:16:29,000 --> 00:16:34,910
the maximum P recovery at advantage you

379
00:16:32,420 --> 00:16:38,510
can<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can replace Q is 2 power n by 2</font>

380
00:16:34,910 --> 00:16:40,250
so you actually get 1 over 0.75 every

381
00:16:38,510 --> 00:16:42,460
time<font color="#CCCCCC"> su point</font><font color="#E5E5E5"> so it's again roughly 1</font>

382
00:16:40,250 --> 00:16:44,660
about<font color="#E5E5E5"> to pour</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> and there is</font><font color="#CCCCCC"> no</font>

383
00:16:42,460 --> 00:16:46,580
guarantee<font color="#E5E5E5"> when the Q is greater than</font>

384
00:16:44,660 --> 00:16:48,560
equal<font color="#CCCCCC"> to power</font><font color="#E5E5E5"> n by 2 what happens the</font>

385
00:16:46,580 --> 00:16:50,600
aspect<font color="#E5E5E5"> ratio so there's no</font><font color="#CCCCCC"> analysis on</font>

386
00:16:48,560 --> 00:16:52,760
<font color="#CCCCCC">that basically</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the range is</font>

387
00:16:50,600 --> 00:16:54,260
interesting so when Q is<font color="#E5E5E5"> greater than</font>

388
00:16:52,760 --> 00:16:56,840
equal<font color="#CCCCCC"> to power n by 2 what is the</font>

389
00:16:54,260 --> 00:16:59,319
expected<font color="#E5E5E5"> side of the false key</font><font color="#CCCCCC"> seen so</font>

390
00:16:56,840 --> 00:17:02,390
this does not<font color="#E5E5E5"> actually solve the problem</font>

391
00:16:59,320 --> 00:17:04,730
<font color="#CCCCCC">the optimality problem so what I</font><font color="#E5E5E5"> did I</font>

392
00:17:02,390 --> 00:17:07,190
have shown<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> it's actually</font><font color="#CCCCCC"> key</font>

393
00:17:04,730 --> 00:17:08,839
requirement<font color="#E5E5E5"> is at least 1 over 2 power</font><font color="#CCCCCC"> N</font>

394
00:17:07,190 --> 00:17:12,200
times E power minus P Square to power n

395
00:17:08,839 --> 00:17:16,639
plus<font color="#CCCCCC"> 1 so when</font><font color="#E5E5E5"> you is order of 2 power n</font>

396
00:17:12,200 --> 00:17:17,839
by 2 times n then<font color="#E5E5E5"> if you can see</font><font color="#CCCCCC"> R</font>

397
00:17:16,640 --> 00:17:19,820
square root of n then you<font color="#E5E5E5"> can see that</font>

398
00:17:17,839 --> 00:17:23,270
<font color="#CCCCCC">this</font><font color="#E5E5E5"> term will be close to 1 so it</font><font color="#CCCCCC"> will</font>

399
00:17:19,819 --> 00:17:25,189
<font color="#CCCCCC">be at least half so we can actually have</font>

400
00:17:23,270 --> 00:17:28,010
a key recovery advantage at<font color="#E5E5E5"> least half</font>

401
00:17:25,190 --> 00:17:29,360
and and as I<font color="#CCCCCC"> said like there are two</font>

402
00:17:28,010 --> 00:17:34,000
cases<font color="#CCCCCC"> the message</font><font color="#E5E5E5"> has chosen randomly</font>

403
00:17:29,360 --> 00:17:36,500
<font color="#CCCCCC">all messages</font><font color="#E5E5E5"> are fixed</font><font color="#CCCCCC"> ok so this</font><font color="#E5E5E5"> is the</font>

404
00:17:34,000 --> 00:17:38,060
yeah<font color="#E5E5E5"> this is this is my</font><font color="#CCCCCC"> word</font><font color="#E5E5E5"> like yeah</font>

405
00:17:36,500 --> 00:17:40,340
we have shown the<font color="#CCCCCC"> critical value at but</font>

406
00:17:38,060 --> 00:17:42,860
is at his apartment is at least half

407
00:17:40,340 --> 00:17:45,320
when the<font color="#E5E5E5"> Q is up order up to point by 2</font>

408
00:17:42,860 --> 00:17:48,169
times square<font color="#CCCCCC"> root of</font><font color="#E5E5E5"> n so</font><font color="#CCCCCC"> it actually</font>

409
00:17:45,320 --> 00:17:49,970
cannot get any advantage<font color="#CCCCCC"> in the range</font>

410
00:17:48,170 --> 00:17:52,070
<font color="#CCCCCC">after 2 point by 2 you have to go beyond</font>

411
00:17:49,970 --> 00:17:54,620
<font color="#E5E5E5">2 power n by 2 and then you can actually</font>

412
00:17:52,070 --> 00:17:57,000
<font color="#E5E5E5">agree Kobus an advantage</font>

413
00:17:54,620 --> 00:17:58,080
<font color="#E5E5E5">okay and will also extend that analysis</font>

414
00:17:57,000 --> 00:18:01,080
<font color="#CCCCCC">to decision</font><font color="#E5E5E5"> that's a straightforward</font>

415
00:17:58,080 --> 00:18:04,770
<font color="#E5E5E5">extension but this actually</font><font color="#CCCCCC"> shows the</font>

416
00:18:01,080 --> 00:18:07,439
<font color="#E5E5E5">tightness of</font><font color="#CCCCCC"> the DCM bound also okay so</font>

417
00:18:04,770 --> 00:18:10,470
I'm briefly describing the how the

418
00:18:07,440 --> 00:18:12,090
random<font color="#E5E5E5"> message works</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I consider</font><font color="#CCCCCC"> the</font>

419
00:18:10,470 --> 00:18:14,520
true<font color="#CCCCCC"> case it actually is the same but it</font>

420
00:18:12,090 --> 00:18:16,290
is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> analysis</font><font color="#E5E5E5"> point of view</font>

421
00:18:14,520 --> 00:18:18,780
it is easy to see so what kruky<font color="#E5E5E5"> success</font>

422
00:18:16,290 --> 00:18:22,020
<font color="#E5E5E5">so setup</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> follows this values TI</font>

423
00:18:18,780 --> 00:18:24,600
plus XM eyes this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> kind of</font>

424
00:18:22,020 --> 00:18:27,510
potential encrypted nonce<font color="#E5E5E5"> and that</font>

425
00:18:24,600 --> 00:18:28,560
should be<font color="#E5E5E5"> destroyed distinct for all inj</font>

426
00:18:27,510 --> 00:18:31,080
<font color="#E5E5E5">okay</font>

427
00:18:28,560 --> 00:18:33,840
and<font color="#CCCCCC"> i and i</font><font color="#E5E5E5"> to the one element randomly</font>

428
00:18:31,080 --> 00:18:35,220
from the<font color="#E5E5E5"> true pset</font><font color="#CCCCCC"> okay so it's exactly</font>

429
00:18:33,840 --> 00:18:38,220
like a<font color="#E5E5E5"> complement of the false key said</font>

430
00:18:35,220 --> 00:18:40,740
so observation is that<font color="#E5E5E5"> whenever X is not</font>

431
00:18:38,220 --> 00:18:42,900
the<font color="#E5E5E5"> true piece a hash key</font><font color="#CCCCCC"> then all these</font>

432
00:18:40,740 --> 00:18:45,270
<font color="#E5E5E5">are IX</font><font color="#CCCCCC"> are uniformly and independent</font>

433
00:18:42,900 --> 00:18:46,980
distributed<font color="#E5E5E5"> so this this is important so</font>

434
00:18:45,270 --> 00:18:48,240
we<font color="#CCCCCC"> actually have a uniform</font><font color="#E5E5E5"> in depends</font>

435
00:18:46,980 --> 00:18:50,130
<font color="#CCCCCC">because the ami is that using</font><font color="#E5E5E5"> uniform</font>

436
00:18:48,240 --> 00:18:53,010
<font color="#CCCCCC">random</font><font color="#E5E5E5"> so we have a randomness on the</font>

437
00:18:50,130 --> 00:18:55,440
<font color="#CCCCCC">MIS so</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can we can</font><font color="#CCCCCC"> we can</font>

438
00:18:53,010 --> 00:18:58,140
say that<font color="#E5E5E5"> our</font><font color="#CCCCCC"> IX a uniformly on in the</font>

439
00:18:55,440 --> 00:19:02,100
pen distributed and if X is<font color="#E5E5E5"> not in that</font>

440
00:18:58,140 --> 00:19:05,820
<font color="#E5E5E5">true tea set then if I</font><font color="#CCCCCC"> don't live RI x</font>

441
00:19:02,100 --> 00:19:07,740
<font color="#E5E5E5">values are distinct</font><font color="#CCCCCC"> so sorry</font><font color="#E5E5E5"> X in the</font>

442
00:19:05,820 --> 00:19:10,020
true P set then if<font color="#CCCCCC"> another arrival of</font>

443
00:19:07,740 --> 00:19:11,520
sadistic<font color="#CCCCCC"> so what you can write the size</font>

444
00:19:10,020 --> 00:19:14,129
of the two tea set is the sum of

445
00:19:11,520 --> 00:19:16,290
<font color="#E5E5E5">integrated functions where the indicator</font>

446
00:19:14,130 --> 00:19:18,390
function takes values 1 if all the

447
00:19:16,290 --> 00:19:19,800
arrives are distinct<font color="#CCCCCC"> so now it's</font><font color="#E5E5E5"> easy to</font>

448
00:19:18,390 --> 00:19:21,900
<font color="#E5E5E5">calculate the expected sign of true tea</font>

449
00:19:19,800 --> 00:19:24,780
set because the expectance by linearity

450
00:19:21,900 --> 00:19:26,850
<font color="#CCCCCC">of the expectation you actually get the</font>

451
00:19:24,780 --> 00:19:28,080
term of this<font color="#E5E5E5"> probability here and this</font>

452
00:19:26,850 --> 00:19:30,060
<font color="#CCCCCC">poor which is</font><font color="#E5E5E5"> nothing but what is the</font>

453
00:19:28,080 --> 00:19:32,669
<font color="#E5E5E5">probability that the random values are</font>

454
00:19:30,060 --> 00:19:34,169
distinct<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that we know by but the</font>

455
00:19:32,670 --> 00:19:36,060
<font color="#E5E5E5">paradox is the</font><font color="#CCCCCC"> compliment</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> bath</font>

456
00:19:34,170 --> 00:19:38,100
the<font color="#CCCCCC"> paradox is in power minus Q square</font>

457
00:19:36,060 --> 00:19:40,620
over 2 power n plus<font color="#CCCCCC"> 1 so we</font><font color="#E5E5E5"> get the sum</font>

458
00:19:38,100 --> 00:19:43,139
<font color="#E5E5E5">and we get</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> because when the X is</font>

459
00:19:40,620 --> 00:19:46,229
actually<font color="#CCCCCC"> 2 P</font><font color="#E5E5E5"> set actually the hash key</font>

460
00:19:43,140 --> 00:19:47,730
then<font color="#E5E5E5"> you get</font><font color="#CCCCCC"> thumb</font><font color="#E5E5E5"> 1 so then we get the</font>

461
00:19:46,230 --> 00:19:51,030
expected<font color="#E5E5E5"> values or less than equal to 1</font>

462
00:19:47,730 --> 00:19:53,310
<font color="#E5E5E5">plus</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> so 1 over that is at</font><font color="#CCCCCC"> least</font><font color="#E5E5E5"> 1</font>

463
00:19:51,030 --> 00:19:54,660
by that<font color="#E5E5E5"> that that's that's the proof and</font>

464
00:19:53,310 --> 00:19:56,490
the interesting thing<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> this</font>

465
00:19:54,660 --> 00:19:58,590
doesn't<font color="#E5E5E5"> require the hash key side means</font>

466
00:19:56,490 --> 00:20:01,410
even if the hash key is a twin<font color="#CCCCCC"> bit or</font>

467
00:19:58,590 --> 00:20:03,990
foreign beat<font color="#CCCCCC"> this</font><font color="#E5E5E5"> actually works in the</font>

468
00:20:01,410 --> 00:20:07,000
<font color="#E5E5E5">almost same complexity so even if your</font>

469
00:20:03,990 --> 00:20:08,980
hash key space is large but<font color="#E5E5E5"> still works</font>

470
00:20:07,000 --> 00:20:11,530
almost in two point by two times square

471
00:20:08,980 --> 00:20:13,030
<font color="#CCCCCC">root of log of h where h denotes the</font>

472
00:20:11,530 --> 00:20:17,950
hash key space size of the<font color="#E5E5E5"> hash key</font>

473
00:20:13,030 --> 00:20:19,750
space<font color="#E5E5E5"> okay so so but the fixed message</font>

474
00:20:17,950 --> 00:20:21,910
is it was a little bit deeper divided<font color="#CCCCCC"> I</font>

475
00:20:19,750 --> 00:20:24,390
don't<font color="#E5E5E5"> have the randomness of the</font><font color="#CCCCCC"> M eyes</font>

476
00:20:21,910 --> 00:20:26,590
<font color="#E5E5E5">but you still have the e KN</font><font color="#CCCCCC"> I which is a</font>

477
00:20:24,390 --> 00:20:29,440
<font color="#E5E5E5">which is you can</font><font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> like without</font>

478
00:20:26,590 --> 00:20:31,480
<font color="#E5E5E5">replacement sampling because their model</font>

479
00:20:29,440 --> 00:20:32,710
<font color="#CCCCCC">is random permutation so if the pH</font><font color="#E5E5E5"> will</font>

480
00:20:31,480 --> 00:20:34,540
be without<font color="#CCCCCC"> replacing the</font><font color="#E5E5E5"> sampling so we</font>

481
00:20:32,710 --> 00:20:37,270
need this technical lemma<font color="#E5E5E5"> you see that</font>

482
00:20:34,540 --> 00:20:39,540
you can find the proof in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> paper so</font>

483
00:20:37,270 --> 00:20:42,010
what we can prove<font color="#E5E5E5"> in the same like a</font>

484
00:20:39,540 --> 00:20:44,110
previously<font color="#E5E5E5"> I could prove that B 1 plus a</font>

485
00:20:42,010 --> 00:20:46,810
1 times B<font color="#E5E5E5"> Q plus a clue all are distinct</font>

486
00:20:44,110 --> 00:20:49,360
<font color="#E5E5E5">with that similar like but the bound</font>

487
00:20:46,810 --> 00:20:51,250
distinct probability and then we apply

488
00:20:49,360 --> 00:20:53,229
<font color="#CCCCCC">lay up this lemma with a I is exactly</font>

489
00:20:51,250 --> 00:20:55,030
like<font color="#CCCCCC"> K I came</font><font color="#E5E5E5"> up kappa plus x times</font><font color="#CCCCCC"> am</font><font color="#E5E5E5"> i</font>

490
00:20:53,230 --> 00:20:56,860
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rest are similar so main thing</font>

491
00:20:55,030 --> 00:21:00,190
is to<font color="#CCCCCC"> to show this lemma and which is</font>

492
00:20:56,860 --> 00:21:03,219
not trivial<font color="#CCCCCC"> you can find the proof</font>

493
00:21:00,190 --> 00:21:05,980
details in the paper and<font color="#E5E5E5"> I quickly</font>

494
00:21:03,220 --> 00:21:07,660
recall how<font color="#E5E5E5"> we can apply to logician</font><font color="#CCCCCC"> okay</font>

495
00:21:05,980 --> 00:21:09,340
you know that<font color="#CCCCCC"> how DCM works we have</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> 1</font>

496
00:21:07,660 --> 00:21:11,020
<font color="#CCCCCC">hypertext generation part we have a</font><font color="#E5E5E5"> one</font>

497
00:21:09,340 --> 00:21:12,909
<font color="#E5E5E5">text generation part the translation</font>

498
00:21:11,020 --> 00:21:14,889
part<font color="#E5E5E5"> is exactly the movement Carter</font>

499
00:21:12,910 --> 00:21:18,130
where the share data and hypertext are

500
00:21:14,890 --> 00:21:20,020
coming and what<font color="#E5E5E5"> you can do actually you</font>

501
00:21:18,130 --> 00:21:22,240
can<font color="#E5E5E5"> construct a false key set by</font>

502
00:21:20,020 --> 00:21:23,980
comparing these values and these values

503
00:21:22,240 --> 00:21:26,950
these values<font color="#E5E5E5"> are known because</font><font color="#CCCCCC"> we will</font>

504
00:21:23,980 --> 00:21:28,870
<font color="#CCCCCC">observe the</font><font color="#E5E5E5"> minc</font><font color="#CCCCCC"> we observe the CF where</font>

505
00:21:26,950 --> 00:21:31,570
am I so all these<font color="#CCCCCC"> values are</font><font color="#E5E5E5"> known and</font>

506
00:21:28,870 --> 00:21:35,560
but this<font color="#E5E5E5"> value can be</font><font color="#CCCCCC"> written as sum of</font>

507
00:21:31,570 --> 00:21:37,510
<font color="#E5E5E5">a polynomial hash plus TI so</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> should</font>

508
00:21:35,560 --> 00:21:40,000
not<font color="#E5E5E5"> be same because that the inputs are</font>

509
00:21:37,510 --> 00:21:42,310
different<font color="#E5E5E5"> so if we compare</font><font color="#CCCCCC"> that and</font>

510
00:21:40,000 --> 00:21:44,860
<font color="#E5E5E5">again you do the</font><font color="#CCCCCC"> same same analysis and</font>

511
00:21:42,310 --> 00:21:47,440
you assume that message<font color="#CCCCCC"> are randomly</font>

512
00:21:44,860 --> 00:21:50,080
chosen<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually have a similar</font>

513
00:21:47,440 --> 00:21:52,420
analysis like you look at the true<font color="#CCCCCC"> key</font>

514
00:21:50,080 --> 00:21:54,639
set and then clearly<font color="#E5E5E5"> that hash key will</font>

515
00:21:52,420 --> 00:21:56,590
<font color="#E5E5E5">be in the true key and then again assume</font>

516
00:21:54,640 --> 00:21:58,180
that it's a<font color="#E5E5E5"> random acid analysis not the</font>

517
00:21:56,590 --> 00:22:01,330
fixed message is you<font color="#E5E5E5"> can actually do the</font>

518
00:21:58,180 --> 00:22:03,580
<font color="#E5E5E5">same thing</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> before if we assume the</font>

519
00:22:01,330 --> 00:22:05,889
<font color="#CCCCCC">message</font><font color="#E5E5E5"> at random then the expected size</font>

520
00:22:03,580 --> 00:22:09,370
will be<font color="#E5E5E5"> this so</font><font color="#CCCCCC"> one by that will be your</font>

521
00:22:05,890 --> 00:22:10,990
success probability of poaching<font color="#E5E5E5"> and here</font>

522
00:22:09,370 --> 00:22:13,060
that<font color="#E5E5E5"> you can see the query complexity</font>

523
00:22:10,990 --> 00:22:14,860
<font color="#E5E5E5">should</font><font color="#CCCCCC"> be in such a manner</font><font color="#E5E5E5"> that l2</font>

524
00:22:13,060 --> 00:22:17,800
square should be of the<font color="#CCCCCC"> order of 2 power</font>

525
00:22:14,860 --> 00:22:18,860
n times<font color="#E5E5E5"> n so you</font><font color="#CCCCCC"> actually exploit the</font>

526
00:22:17,800 --> 00:22:21,200
the

527
00:22:18,860 --> 00:22:23,120
in fact<font color="#CCCCCC"> early L is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> length of</font><font color="#E5E5E5"> the</font>

528
00:22:21,200 --> 00:22:25,220
message<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can actually exploit the</font>

529
00:22:23,120 --> 00:22:27,290
<font color="#CCCCCC">length</font><font color="#E5E5E5"> previously it was the number</font><font color="#CCCCCC"> of</font>

530
00:22:25,220 --> 00:22:29,390
queries is the<font color="#E5E5E5"> Q then Q squared should</font>

531
00:22:27,290 --> 00:22:33,250
be order<font color="#E5E5E5"> of n times to pour in but now</font>

532
00:22:29,390 --> 00:22:37,370
<font color="#E5E5E5">we can exploit L</font><font color="#CCCCCC"> ok so I conclude like</font>

533
00:22:33,250 --> 00:22:40,429
<font color="#E5E5E5">so I have</font><font color="#CCCCCC"> shown that the</font><font color="#E5E5E5"> Luke spinel</font>

534
00:22:37,370 --> 00:22:43,159
forgery<font color="#E5E5E5"> actually doesn't give the</font>

535
00:22:40,429 --> 00:22:46,100
anything better than a<font color="#CCCCCC"> random guess but</font>

536
00:22:43,160 --> 00:22:49,460
idea is important<font color="#E5E5E5"> so I take that up idea</font>

537
00:22:46,100 --> 00:22:50,659
that was<font color="#CCCCCC"> key said approach and</font><font color="#E5E5E5"> also</font>

538
00:22:49,460 --> 00:22:52,610
missing<font color="#CCCCCC"> people's problem is useful but</font>

539
00:22:50,660 --> 00:22:58,280
this is<font color="#E5E5E5"> a dual approach and using that</font>

540
00:22:52,610 --> 00:23:00,320
approach<font color="#E5E5E5"> I</font><font color="#CCCCCC"> prove the prove the national</font>

541
00:22:58,280 --> 00:23:02,540
boundaries tight and that actually works

542
00:23:00,320 --> 00:23:05,178
for arbitrary hash functions and<font color="#E5E5E5"> it's</font>

543
00:23:02,540 --> 00:23:07,460
applicable for both<font color="#CCCCCC"> random and any fixed</font>

544
00:23:05,179 --> 00:23:10,650
message and also<font color="#CCCCCC"> I exchange the result</font>

545
00:23:07,460 --> 00:23:16,009
for<font color="#E5E5E5"> this year thank you</font>

546
00:23:10,650 --> 00:23:16,009
[Applause]

