1
00:00:05,059 --> 00:00:12,299
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so here's a reminder</font><font color="#CCCCCC"> of the</font>

2
00:00:10,200 --> 00:00:14,070
efficiency parameters that we<font color="#CCCCCC"> want to</font>

3
00:00:12,299 --> 00:00:17,130
<font color="#E5E5E5">optimize in searchable symmetric</font>

4
00:00:14,070 --> 00:00:19,140
encryption<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> the space</font><font color="#CCCCCC"> usage of</font>

5
00:00:17,130 --> 00:00:21,000
<font color="#E5E5E5">this</font><font color="#CCCCCC"> scheme which is</font><font color="#E5E5E5"> the size of the</font>

6
00:00:19,140 --> 00:00:23,820
<font color="#E5E5E5">encrypted database and ideally we would</font>

7
00:00:21,000 --> 00:00:26,090
like<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to be of</font><font color="#E5E5E5"> n where n is the</font><font color="#CCCCCC"> size</font>

8
00:00:23,820 --> 00:00:29,130
<font color="#CCCCCC">of the original database</font>

9
00:00:26,090 --> 00:00:30,960
there's the read efficiency of<font color="#E5E5E5"> the</font>

10
00:00:29,130 --> 00:00:32,970
scheme which is<font color="#E5E5E5"> the ratio</font><font color="#CCCCCC"> between the</font>

11
00:00:30,960 --> 00:00:35,309
number<font color="#CCCCCC"> of bits</font><font color="#E5E5E5"> that the server is with</font>

12
00:00:32,970 --> 00:00:37,379
each query and the actual size of<font color="#CCCCCC"> the</font>

13
00:00:35,309 --> 00:00:40,290
result<font color="#CCCCCC"> and ideally</font><font color="#E5E5E5"> we would like this</font>

14
00:00:37,379 --> 00:00:42,330
<font color="#CCCCCC">ratio to be constant</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> there's the</font>

15
00:00:40,290 --> 00:00:43,680
locality<font color="#CCCCCC"> of the scheme which</font><font color="#E5E5E5"> is the</font>

16
00:00:42,330 --> 00:00:46,349
number<font color="#E5E5E5"> of non contiguous memory</font>

17
00:00:43,680 --> 00:00:48,720
locations<font color="#E5E5E5"> that the server accesses</font><font color="#CCCCCC"> with</font>

18
00:00:46,350 --> 00:00:51,290
<font color="#CCCCCC">each wearing and ideally</font><font color="#E5E5E5"> we would like</font>

19
00:00:48,720 --> 00:00:54,900
<font color="#CCCCCC">you to be a constant number of locations</font>

20
00:00:51,290 --> 00:00:59,610
<font color="#E5E5E5">so let's go over existing schemes and</font>

21
00:00:54,900 --> 00:01:01,890
<font color="#CCCCCC">our bounds in and</font><font color="#E5E5E5"> we work we focus on</font>

22
00:00:59,610 --> 00:01:05,010
schemes that do not modify<font color="#E5E5E5"> the encrypted</font>

23
00:01:01,890 --> 00:01:09,210
<font color="#E5E5E5">database while searching and while this</font>

24
00:01:05,010 --> 00:01:11,219
captures most of the schemes or a<font color="#CCCCCC"> base</font>

25
00:01:09,210 --> 00:01:14,639
techniques such as in the works<font color="#CCCCCC"> there</font>

26
00:01:11,219 --> 00:01:20,158
<font color="#E5E5E5">heard about are not captured in</font><font color="#CCCCCC"> our work</font>

27
00:01:14,640 --> 00:01:22,890
and schemes that<font color="#CCCCCC"> have what is called the</font>

28
00:01:20,159 --> 00:01:26,219
<font color="#CCCCCC">minimum leakage</font><font color="#E5E5E5"> which means that they</font>

29
00:01:22,890 --> 00:01:29,130
leak only the size of the database<font color="#CCCCCC"> the</font>

30
00:01:26,219 --> 00:01:32,219
size of the result<font color="#E5E5E5"> of each query that is</font>

31
00:01:29,130 --> 00:01:35,490
performed and the query repetition

32
00:01:32,219 --> 00:01:37,318
pattern<font color="#E5E5E5"> what Eric called the quality</font>

33
00:01:35,490 --> 00:01:40,740
<font color="#CCCCCC">pattern that is what queries are</font>

34
00:01:37,319 --> 00:01:42,990
repeated and<font color="#CCCCCC"> first there are various</font>

35
00:01:40,740 --> 00:01:46,079
schemes<font color="#CCCCCC"> that did not a cloak ality into</font>

36
00:01:42,990 --> 00:01:48,600
account so they have optimal space and

37
00:01:46,079 --> 00:01:52,229
read efficiency however<font color="#E5E5E5"> the locality is</font>

38
00:01:48,600 --> 00:01:55,189
as bad as o of n then caching<font color="#CCCCCC"> Tesoro</font>

39
00:01:52,229 --> 00:01:57,630
suggested<font color="#CCCCCC"> a scheme with space</font><font color="#E5E5E5"> n log n</font>

40
00:01:55,189 --> 00:02:00,958
locality log N and constant read

41
00:01:57,630 --> 00:02:03,899
efficiency it was later improved by<font color="#CCCCCC"> a</font>

42
00:02:00,959 --> 00:02:07,619
<font color="#CCCCCC">shallow Battelle to have a constant</font>

43
00:02:03,899 --> 00:02:10,288
locality and was later a generalized by

44
00:02:07,619 --> 00:02:13,410
the<font color="#E5E5E5"> metrics and</font><font color="#CCCCCC"> path amento to have an</font>

45
00:02:10,288 --> 00:02:15,579
arbitrary locality and for locality<font color="#CCCCCC"> L</font>

46
00:02:13,410 --> 00:02:19,090
the space<font color="#E5E5E5"> overhead is</font>

47
00:02:15,580 --> 00:02:21,730
and log n<font color="#E5E5E5"> over log in and actually the</font>

48
00:02:19,090 --> 00:02:24,150
their scheme also supports<font color="#E5E5E5"> non-constant</font>

49
00:02:21,730 --> 00:02:30,070
<font color="#E5E5E5">read efficiency however in those cases</font>

50
00:02:24,150 --> 00:02:33,040
the the leakage is not<font color="#E5E5E5"> minimal and in</font>

51
00:02:30,070 --> 00:02:34,660
terms of<font color="#E5E5E5"> lower bounds there's the lower</font>

52
00:02:33,040 --> 00:02:38,260
bound of<font color="#E5E5E5"> caching</font><font color="#CCCCCC"> to zero</font>

53
00:02:34,660 --> 00:02:40,720
that applies to schemes that have non

54
00:02:38,260 --> 00:02:43,149
overlapping reads which roughly means

55
00:02:40,720 --> 00:02:45,880
that the locations that<font color="#E5E5E5"> are accessed</font>

56
00:02:43,150 --> 00:02:49,780
when querying different keywords do not

57
00:02:45,880 --> 00:02:53,320
have a significant overlap<font color="#CCCCCC"> so they show</font>

58
00:02:49,780 --> 00:02:57,040
<font color="#E5E5E5">that such schemes cannot have both</font>

59
00:02:53,320 --> 00:03:00,459
<font color="#E5E5E5">optimal space and locality and other</font>

60
00:02:57,040 --> 00:03:03,040
<font color="#E5E5E5">above schemes fall into indeed have non</font>

61
00:03:00,460 --> 00:03:07,080
overlapping reads so this explains why

62
00:03:03,040 --> 00:03:09,940
<font color="#CCCCCC">they can't be optimal</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> parameters</font>

63
00:03:07,080 --> 00:03:12,790
<font color="#E5E5E5">but still there's a substantial gap</font>

64
00:03:09,940 --> 00:03:15,910
between the lower bound<font color="#E5E5E5"> and upper bound</font>

65
00:03:12,790 --> 00:03:20,019
so<font color="#CCCCCC"> in this work we ask can we close this</font>

66
00:03:15,910 --> 00:03:23,410
gap<font color="#E5E5E5"> now not all schemes have</font>

67
00:03:20,020 --> 00:03:26,980
<font color="#E5E5E5">non-overlapping grids and</font><font color="#CCCCCC"> the two such</font>

68
00:03:23,410 --> 00:03:29,109
instances are as follows<font color="#E5E5E5"> and the first</font>

69
00:03:26,980 --> 00:03:32,140
one is another scheme by<font color="#CCCCCC"> asha orbital</font>

70
00:03:29,110 --> 00:03:35,140
<font color="#CCCCCC">we've optimized</font><font color="#E5E5E5"> space and locality so</font>

71
00:03:32,140 --> 00:03:35,950
they circumvent the<font color="#E5E5E5"> the lower bound of</font>

72
00:03:35,140 --> 00:03:38,320
<font color="#CCCCCC">caching to zero</font>

73
00:03:35,950 --> 00:03:42,220
but still the read efficiency is not

74
00:03:38,320 --> 00:03:44,320
<font color="#E5E5E5">optimal it's</font><font color="#CCCCCC"> Oh till dove login and they</font>

75
00:03:42,220 --> 00:03:47,320
also<font color="#CCCCCC"> improve</font><font color="#E5E5E5"> the read efficiency to out</font>

76
00:03:44,320 --> 00:03:48,970
it<font color="#CCCCCC"> off lock logon and</font><font color="#E5E5E5"> however this</font>

77
00:03:47,320 --> 00:03:51,220
scheme<font color="#E5E5E5"> only works under the assumption</font>

78
00:03:48,970 --> 00:03:53,050
that no<font color="#CCCCCC"> key</font><font color="#E5E5E5"> word appears in more than n</font>

79
00:03:51,220 --> 00:03:56,430
to the 1 minus 1 over<font color="#E5E5E5"> log log n</font>

80
00:03:53,050 --> 00:03:59,620
documents now in terms of lower<font color="#CCCCCC"> bound</font>

81
00:03:56,430 --> 00:04:02,170
<font color="#E5E5E5">they show a lower bound</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> applies to</font>

82
00:03:59,620 --> 00:04:03,820
schemes that fall into<font color="#E5E5E5"> a framework that</font>

83
00:04:02,170 --> 00:04:07,059
we call the statistical independence

84
00:04:03,820 --> 00:04:09,040
framework which roughly means that the

85
00:04:07,060 --> 00:04:10,660
locations that<font color="#CCCCCC"> are accessed</font><font color="#E5E5E5"> when</font>

86
00:04:09,040 --> 00:04:14,769
querying different keywords are

87
00:04:10,660 --> 00:04:17,500
essentially<font color="#E5E5E5"> independent and they show</font>

88
00:04:14,769 --> 00:04:21,160
that<font color="#CCCCCC"> such a scheme with space off</font><font color="#E5E5E5"> n or</font>

89
00:04:17,500 --> 00:04:25,630
even larger<font color="#E5E5E5"> and locality o of 1 when</font>

90
00:04:21,160 --> 00:04:28,720
querying a<font color="#CCCCCC"> keyword w associated with n w</font>

91
00:04:25,630 --> 00:04:31,780
documents the read efficiency

92
00:04:28,720 --> 00:04:36,520
<font color="#E5E5E5">be a super constant function times</font><font color="#CCCCCC"> one</font>

93
00:04:31,780 --> 00:04:38,770
over<font color="#E5E5E5"> epsilon</font><font color="#CCCCCC"> and W where n W where W the</font>

94
00:04:36,520 --> 00:04:42,849
number of documents associated with W

95
00:04:38,770 --> 00:04:45,099
and<font color="#E5E5E5"> epsilon and W is the unique epsilon</font>

96
00:04:42,850 --> 00:04:47,560
such that<font color="#CCCCCC"> began to demand minus epsilon</font>

97
00:04:45,100 --> 00:04:50,080
equals<font color="#CCCCCC"> end Avenue</font><font color="#E5E5E5"> and they're both two</font>

98
00:04:47,560 --> 00:04:53,830
schemes<font color="#E5E5E5"> indeed fall into this framework</font>

99
00:04:50,080 --> 00:04:57,359
so the lower bound<font color="#CCCCCC"> explains why the</font>

100
00:04:53,830 --> 00:05:00,490
<font color="#E5E5E5">assumption on the log log n scheme is</font>

101
00:04:57,360 --> 00:05:02,320
necessary but still there's a gap

102
00:05:00,490 --> 00:05:06,370
between the lower bound and upper<font color="#E5E5E5"> bound</font>

103
00:05:02,320 --> 00:05:10,900
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> again ask can we close this gap</font>

104
00:05:06,370 --> 00:05:13,960
<font color="#E5E5E5">and our contributions are as follows we</font>

105
00:05:10,900 --> 00:05:17,650
<font color="#CCCCCC">observe that all current sse techniques</font>

106
00:05:13,960 --> 00:05:20,109
in this context and<font color="#CCCCCC"> our fall</font><font color="#E5E5E5"> into two</font>

107
00:05:17,650 --> 00:05:21,669
frameworks<font color="#CCCCCC"> the first one is the already</font>

108
00:05:20,110 --> 00:05:24,430
mentioned<font color="#E5E5E5"> statistical independence</font>

109
00:05:21,669 --> 00:05:26,469
framework and the second one is the new

110
00:05:24,430 --> 00:05:29,650
framework<font color="#E5E5E5"> that we introduced and called</font>

111
00:05:26,470 --> 00:05:31,840
<font color="#CCCCCC">the apparent split framework so this</font>

112
00:05:29,650 --> 00:05:34,750
framework refines the<font color="#CCCCCC"> non-overlapping</font>

113
00:05:31,840 --> 00:05:37,690
<font color="#E5E5E5">grid property but still captures the</font>

114
00:05:34,750 --> 00:05:40,030
same existing schemes and within<font color="#E5E5E5"> this</font>

115
00:05:37,690 --> 00:05:42,669
framework<font color="#E5E5E5"> we show a tight lower bound</font>

116
00:05:40,030 --> 00:05:46,000
<font color="#E5E5E5">that matches the scheme of the Matteson</font>

117
00:05:42,669 --> 00:05:48,520
<font color="#CCCCCC">path amento and within the statistical</font>

118
00:05:46,000 --> 00:05:51,160
<font color="#E5E5E5">independence framework and where main</font>

119
00:05:48,520 --> 00:05:54,340
result is an<font color="#E5E5E5"> improved upper bound that</font>

120
00:05:51,160 --> 00:05:58,090
<font color="#CCCCCC">is</font><font color="#E5E5E5"> we construct a new ssa ssi scheme and</font>

121
00:05:54,340 --> 00:06:00,789
it actually<font color="#E5E5E5"> matches the</font><font color="#CCCCCC"> lower bound</font><font color="#E5E5E5"> of</font>

122
00:05:58,090 --> 00:06:04,210
<font color="#CCCCCC">Asherah Vittal for a range of parameters</font>

123
00:06:00,790 --> 00:06:07,270
as we will see<font color="#E5E5E5"> and so more formally in</font>

124
00:06:04,210 --> 00:06:09,820
<font color="#CCCCCC">the patterns fleet</font><font color="#E5E5E5"> where framework our</font>

125
00:06:07,270 --> 00:06:12,820
lower bound states that<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a scheme</font>

126
00:06:09,820 --> 00:06:16,469
with locality<font color="#CCCCCC"> l the read efficiency must</font>

127
00:06:12,820 --> 00:06:18,400
be<font color="#CCCCCC"> omega of n log n over log n and</font>

128
00:06:16,470 --> 00:06:22,050
within the statistical<font color="#E5E5E5"> independence</font>

129
00:06:18,400 --> 00:06:25,539
framework we construct a new<font color="#CCCCCC"> SSE scheme</font>

130
00:06:22,050 --> 00:06:28,510
with an optimal space and locality and

131
00:06:25,540 --> 00:06:32,410
the<font color="#CCCCCC"> read efficiency depends on the size</font>

132
00:06:28,510 --> 00:06:34,870
of the result<font color="#CCCCCC"> and</font><font color="#E5E5E5"> W and matches</font><font color="#CCCCCC"> the</font>

133
00:06:32,410 --> 00:06:40,700
<font color="#CCCCCC">lower bound up to an additive term of</font>

134
00:06:34,870 --> 00:06:43,930
all log log log<font color="#CCCCCC"> n</font><font color="#E5E5E5"> and the Omega</font><font color="#CCCCCC"> one</font>

135
00:06:40,700 --> 00:06:47,000
term can be<font color="#E5E5E5"> any super constant function</font>

136
00:06:43,930 --> 00:06:49,580
and still our scheme works in the

137
00:06:47,000 --> 00:06:52,910
<font color="#CCCCCC">resumption that no</font><font color="#E5E5E5"> keyword appears in</font>

138
00:06:49,580 --> 00:06:55,280
more than n<font color="#E5E5E5"> over log n cube documents</font>

139
00:06:52,910 --> 00:06:58,550
which is<font color="#CCCCCC"> the fair less restrictive</font>

140
00:06:55,280 --> 00:07:02,299
assumption than the previous one<font color="#CCCCCC"> so what</font>

141
00:06:58,550 --> 00:07:04,760
it means<font color="#E5E5E5"> is that as long as n</font><font color="#CCCCCC"> W is not</font>

142
00:07:02,300 --> 00:07:08,420
too large<font color="#E5E5E5"> a</font><font color="#CCCCCC"> worried efficiency is as</font>

143
00:07:04,760 --> 00:07:11,570
small<font color="#CCCCCC"> as a log log n and for larger</font>

144
00:07:08,420 --> 00:07:16,220
values of<font color="#E5E5E5"> n W</font><font color="#CCCCCC"> a worried efficiency</font>

145
00:07:11,570 --> 00:07:19,130
matches<font color="#E5E5E5"> the lower bound</font><font color="#CCCCCC"> and so in</font><font color="#E5E5E5"> this</font>

146
00:07:16,220 --> 00:07:22,130
work<font color="#E5E5E5"> and</font><font color="#CCCCCC"> in this talk I will</font><font color="#E5E5E5"> focus on</font>

147
00:07:19,130 --> 00:07:24,380
our skin so for the pendants with a

148
00:07:22,130 --> 00:07:29,240
framework and lower bound<font color="#E5E5E5"> please check</font>

149
00:07:24,380 --> 00:07:31,730
our paper<font color="#E5E5E5"> so to understand our scheme we</font>

150
00:07:29,240 --> 00:07:35,120
need to understand the log log n scheme

151
00:07:31,730 --> 00:07:37,610
of a shallow<font color="#CCCCCC"> Vittal so what they</font><font color="#E5E5E5"> do is</font>

152
00:07:35,120 --> 00:07:39,670
to introduce a process called<font color="#E5E5E5"> the</font>

153
00:07:37,610 --> 00:07:43,310
<font color="#CCCCCC">two-dimensional to choice allocation</font>

154
00:07:39,670 --> 00:07:46,220
which on a high level<font color="#CCCCCC"> is a way to</font>

155
00:07:43,310 --> 00:07:49,160
allocate lists<font color="#E5E5E5"> into bins with the</font>

156
00:07:46,220 --> 00:07:51,020
following<font color="#E5E5E5"> two desired properties the</font>

157
00:07:49,160 --> 00:07:53,780
first one is that the elements<font color="#E5E5E5"> of each</font>

158
00:07:51,020 --> 00:07:57,229
list<font color="#E5E5E5"> are placed in consecutive bins</font>

159
00:07:53,780 --> 00:07:59,030
which helps us<font color="#E5E5E5"> in</font><font color="#CCCCCC"> terms of locality and</font>

160
00:07:57,230 --> 00:08:01,490
<font color="#E5E5E5">the second one is</font><font color="#CCCCCC"> that the location of</font>

161
00:07:59,030 --> 00:08:05,179
<font color="#E5E5E5">the</font><font color="#CCCCCC"> first element of each</font><font color="#E5E5E5"> list is in one</font>

162
00:08:01,490 --> 00:08:08,000
out of two random bins which allows

163
00:08:05,180 --> 00:08:12,590
proving security<font color="#E5E5E5"> via the statistical</font>

164
00:08:08,000 --> 00:08:15,970
independence framework<font color="#E5E5E5"> and to</font><font color="#CCCCCC"> prevent</font>

165
00:08:12,590 --> 00:08:18,950
overflowing bins what they do is to

166
00:08:15,970 --> 00:08:21,560
limit<font color="#E5E5E5"> the</font><font color="#CCCCCC"> length of the each list and</font>

167
00:08:18,950 --> 00:08:24,289
set the size of each bin to<font color="#E5E5E5"> out healed</font>

168
00:08:21,560 --> 00:08:26,930
of log log<font color="#CCCCCC"> n</font><font color="#E5E5E5"> and this results in their</font>

169
00:08:24,290 --> 00:08:29,810
scheme that has space<font color="#E5E5E5"> often locality of</font>

170
00:08:26,930 --> 00:08:32,539
<font color="#CCCCCC">one and the</font><font color="#E5E5E5"> read</font><font color="#CCCCCC"> efficiency is altered</font>

171
00:08:29,810 --> 00:08:35,780
of log log n<font color="#E5E5E5"> because instead</font><font color="#CCCCCC"> of reading</font>

172
00:08:32,539 --> 00:08:38,620
a single elements they read entire bins

173
00:08:35,780 --> 00:08:43,339
<font color="#E5E5E5">and actually it's two bins per element</font>

174
00:08:38,620 --> 00:08:47,540
and so our idea<font color="#E5E5E5"> is to</font><font color="#CCCCCC"> actually allow</font>

175
00:08:43,340 --> 00:08:49,880
overflow and so we show that assuming

176
00:08:47,540 --> 00:08:54,079
all lists are of<font color="#E5E5E5"> length at most n over</font>

177
00:08:49,880 --> 00:08:56,570
<font color="#CCCCCC">log n cubed if we set the number of</font>

178
00:08:54,080 --> 00:08:58,459
the size of<font color="#E5E5E5"> each</font><font color="#CCCCCC"> bin 200 local or</font>

179
00:08:56,570 --> 00:09:01,580
<font color="#E5E5E5">cloggin and the number of</font><font color="#CCCCCC"> Bin's</font>

180
00:08:58,459 --> 00:09:05,630
accordingly<font color="#E5E5E5"> then there are at</font><font color="#CCCCCC"> most n</font>

181
00:09:01,580 --> 00:09:08,330
<font color="#CCCCCC">over log n overflowing elements so the</font>

182
00:09:05,630 --> 00:09:13,279
remaining<font color="#E5E5E5"> question is what</font><font color="#CCCCCC"> should we do</font>

183
00:09:08,330 --> 00:09:16,820
with those<font color="#E5E5E5"> overflowing lists so here's a</font>

184
00:09:13,279 --> 00:09:19,880
knave attempt to solve this maybe we

185
00:09:16,820 --> 00:09:23,360
should use the first scheme of a<font color="#CCCCCC"> show</font>

186
00:09:19,880 --> 00:09:26,269
orbital for those overflowing the list

187
00:09:23,360 --> 00:09:29,029
<font color="#E5E5E5">and the reason</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> is because it</font>

188
00:09:26,269 --> 00:09:32,329
<font color="#CCCCCC">has optimal locality</font><font color="#E5E5E5"> and read efficiency</font>

189
00:09:29,029 --> 00:09:35,149
and even though the space overhead<font color="#CCCCCC"> is</font>

190
00:09:32,329 --> 00:09:39,170
not<font color="#E5E5E5"> optimal it's n</font><font color="#CCCCCC"> log n</font><font color="#E5E5E5"> but it in our</font>

191
00:09:35,149 --> 00:09:42,459
case it's<font color="#E5E5E5"> actually n over log n so this</font>

192
00:09:39,170 --> 00:09:45,380
<font color="#E5E5E5">only costs in an additional</font><font color="#CCCCCC"> of instance</font>

193
00:09:42,459 --> 00:09:48,319
and but the problem with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> solution is</font>

194
00:09:45,380 --> 00:09:51,050
in<font color="#CCCCCC"> its security</font><font color="#E5E5E5"> because it reveals which</font>

195
00:09:48,320 --> 00:09:53,660
lists are overflowing<font color="#E5E5E5"> and it's in turn</font>

196
00:09:51,050 --> 00:09:58,310
<font color="#E5E5E5">leaks</font><font color="#CCCCCC"> information about the database</font>

197
00:09:53,660 --> 00:10:01,579
itself<font color="#E5E5E5"> so our solution</font><font color="#CCCCCC"> to that is to</font>

198
00:09:58,310 --> 00:10:03,439
<font color="#E5E5E5">modify the scheme</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a sure orbital such</font>

199
00:10:01,579 --> 00:10:06,529
that it will<font color="#E5E5E5"> not reveal whether a list</font>

200
00:10:03,440 --> 00:10:09,470
is stored<font color="#E5E5E5"> in it or not and I won't go</font>

201
00:10:06,529 --> 00:10:13,250
into<font color="#CCCCCC"> the technical details of this but a</font>

202
00:10:09,470 --> 00:10:16,160
key I did in there is to avoid rehashing

203
00:10:13,250 --> 00:10:19,790
the hash tables<font color="#E5E5E5"> in their skin by using</font>

204
00:10:16,160 --> 00:10:22,399
<font color="#CCCCCC">cocoa</font><font color="#E5E5E5"> hashing with a stash</font><font color="#CCCCCC"> and since the</font>

205
00:10:19,790 --> 00:10:25,130
stash size depends on the<font color="#E5E5E5"> length of</font><font color="#CCCCCC"> the</font>

206
00:10:22,399 --> 00:10:29,120
<font color="#CCCCCC">list our read efficiency depends on the</font>

207
00:10:25,130 --> 00:10:31,970
size<font color="#E5E5E5"> of the result so this results in an</font>

208
00:10:29,120 --> 00:10:35,690
<font color="#E5E5E5">SSE scheme with space often locality</font><font color="#CCCCCC"> of</font>

209
00:10:31,970 --> 00:10:37,970
<font color="#CCCCCC">one and the read efficiency consists of</font>

210
00:10:35,690 --> 00:10:40,820
two terms<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first one is caused by the</font>

211
00:10:37,970 --> 00:10:45,140
size of each bin and the second one is

212
00:10:40,820 --> 00:10:47,449
cost is caused by the<font color="#E5E5E5"> stash size so to</font>

213
00:10:45,140 --> 00:10:50,470
conclude and here's the summary<font color="#E5E5E5"> of our</font>

214
00:10:47,449 --> 00:10:56,139
result<font color="#E5E5E5"> and thank you for this</font>

215
00:10:50,470 --> 00:10:56,139
[Applause]

