1
00:00:05,609 --> 00:00:13,030
thanks for the introduction<font color="#E5E5E5"> and good</font>

2
00:00:08,260 --> 00:00:14,799
<font color="#CCCCCC">afternoon</font><font color="#E5E5E5"> yeah so my my paper is about</font>

3
00:00:13,030 --> 00:00:16,720
<font color="#CCCCCC">information theoretically</font><font color="#E5E5E5"> secure</font>

4
00:00:14,799 --> 00:00:18,970
multi-party computation so before I<font color="#E5E5E5"> get</font>

5
00:00:16,720 --> 00:00:22,149
<font color="#E5E5E5">into the into the problem let</font><font color="#CCCCCC"> me</font><font color="#E5E5E5"> just</font>

6
00:00:18,970 --> 00:00:24,939
remind you once<font color="#CCCCCC"> more about secure</font>

7
00:00:22,149 --> 00:00:27,820
computation<font color="#E5E5E5"> so it's the fixed notation</font>

8
00:00:24,939 --> 00:00:30,189
and<font color="#CCCCCC"> so on we have M parties each of them</font>

9
00:00:27,820 --> 00:00:34,600
has private inputs and they want<font color="#E5E5E5"> to</font>

10
00:00:30,189 --> 00:00:37,539
compute some<font color="#E5E5E5"> of some function they want</font>

11
00:00:34,600 --> 00:00:39,460
to do that through protocol where they

12
00:00:37,539 --> 00:00:41,890
communicate to each other they have

13
00:00:39,460 --> 00:00:45,940
<font color="#E5E5E5">secure channels</font><font color="#CCCCCC"> between each pair of</font>

14
00:00:41,890 --> 00:00:47,769
parties and then the the security<font color="#CCCCCC"> will</font>

15
00:00:45,940 --> 00:00:50,260
is captured<font color="#CCCCCC"> by the the notion of an</font>

16
00:00:47,769 --> 00:00:52,989
adversary<font color="#CCCCCC"> that corrupts the citizen it</font>

17
00:00:50,260 --> 00:00:54,730
can corrupt some subsets of parties and

18
00:00:52,989 --> 00:00:59,199
then you<font color="#E5E5E5"> should not get the information</font>

19
00:00:54,730 --> 00:01:01,178
<font color="#E5E5E5">on the uncorrupted</font><font color="#CCCCCC"> inputs or the inputs</font>

20
00:00:59,199 --> 00:01:04,269
of<font color="#E5E5E5"> the uncorrupted parties beyond what</font>

21
00:01:01,179 --> 00:01:06,880
it is implied but the output and the

22
00:01:04,269 --> 00:01:09,250
corrupted inputs and<font color="#E5E5E5"> furthermore it</font>

23
00:01:06,880 --> 00:01:12,160
cannot alter the the computation of the

24
00:01:09,250 --> 00:01:17,470
<font color="#E5E5E5">function except by changing the</font>

25
00:01:12,160 --> 00:01:19,780
corrupted inputs so<font color="#E5E5E5"> you also know that</font>

26
00:01:17,470 --> 00:01:23,679
<font color="#CCCCCC">there are many ways of coming up with</font>

27
00:01:19,780 --> 00:01:26,080
protocols<font color="#E5E5E5"> as garbling that</font><font color="#CCCCCC"> it's</font>

28
00:01:23,680 --> 00:01:27,930
homomorphic encryption so on and then

29
00:01:26,080 --> 00:01:31,679
there's also secret setting based

30
00:01:27,930 --> 00:01:35,460
multi-party computation protocols<font color="#E5E5E5"> and</font>

31
00:01:31,680 --> 00:01:37,780
the way this work usually<font color="#CCCCCC"> is that you</font>

32
00:01:35,460 --> 00:01:40,149
represent<font color="#E5E5E5"> your function as an arithmetic</font>

33
00:01:37,780 --> 00:01:43,060
circuit<font color="#E5E5E5"> of a certain finite field so</font>

34
00:01:40,150 --> 00:01:47,290
basically<font color="#E5E5E5"> a bunch of samson products and</font>

35
00:01:43,060 --> 00:01:49,720
then the parties have some linear

36
00:01:47,290 --> 00:01:52,420
secrecy<font color="#CCCCCC"> and scheme</font><font color="#E5E5E5"> over over that same</font>

37
00:01:49,720 --> 00:01:54,220
<font color="#E5E5E5">finite field that they use to share</font>

38
00:01:52,420 --> 00:01:56,800
their inputs at the beginning of<font color="#E5E5E5"> the</font>

39
00:01:54,220 --> 00:02:00,220
protocol<font color="#E5E5E5"> and then the computation goes</font>

40
00:01:56,800 --> 00:02:03,670
by gate by gates on<font color="#CCCCCC"> the undersheriff so</font>

41
00:02:00,220 --> 00:02:05,679
they the parties are able<font color="#CCCCCC"> to compute the</font>

42
00:02:03,670 --> 00:02:08,229
sharing of the output given<font color="#E5E5E5"> the</font><font color="#CCCCCC"> chains</font>

43
00:02:05,680 --> 00:02:10,929
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> inputs in each gate</font><font color="#E5E5E5"> and then they</font>

44
00:02:08,229 --> 00:02:14,049
can just reconstruct the output of<font color="#E5E5E5"> the</font>

45
00:02:10,929 --> 00:02:15,030
circuit<font color="#CCCCCC"> now when the gates are</font><font color="#E5E5E5"> linear</font>

46
00:02:14,049 --> 00:02:19,380
then<font color="#E5E5E5"> it's</font>

47
00:02:15,030 --> 00:02:21,690
is very<font color="#E5E5E5"> easy because they can the</font>

48
00:02:19,380 --> 00:02:23,040
parties<font color="#E5E5E5"> can compute locally using the</font>

49
00:02:21,690 --> 00:02:24,359
linearity of secrecy<font color="#E5E5E5"> and a scheme they</font>

50
00:02:23,040 --> 00:02:27,049
can compute locally sharing of the

51
00:02:24,360 --> 00:02:29,730
output<font color="#CCCCCC"> of the gate</font><font color="#E5E5E5"> when it is multi</font>

52
00:02:27,050 --> 00:02:31,470
multiplicative then<font color="#E5E5E5"> but it becomes a</font>

53
00:02:29,730 --> 00:02:33,709
<font color="#E5E5E5">little bit more complicated and then it</font>

54
00:02:31,470 --> 00:02:39,600
depends<font color="#CCCCCC"> on</font><font color="#E5E5E5"> which protocol you are using</font>

55
00:02:33,709 --> 00:02:43,620
and yeah<font color="#E5E5E5"> so the motivation of this work</font>

56
00:02:39,600 --> 00:02:45,569
is that many<font color="#CCCCCC"> secretion based the</font>

57
00:02:43,620 --> 00:02:48,120
multi-party computation protocols

58
00:02:45,569 --> 00:02:50,040
actually require large finite fields to

59
00:02:48,120 --> 00:02:51,200
work<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not saying that all</font><font color="#CCCCCC"> of them do</font>

60
00:02:50,040 --> 00:02:55,980
I mean that<font color="#CCCCCC"> there are of course</font>

61
00:02:51,200 --> 00:02:58,320
<font color="#E5E5E5">protocols for for small fields but many</font>

62
00:02:55,980 --> 00:03:00,530
of the efficient protocols work over<font color="#E5E5E5"> a</font>

63
00:02:58,320 --> 00:03:02,280
<font color="#E5E5E5">large finite fields and I have some</font>

64
00:03:00,530 --> 00:03:05,400
examples there<font color="#E5E5E5"> are different</font>

65
00:03:02,280 --> 00:03:07,140
manifestations<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this so for example in</font>

66
00:03:05,400 --> 00:03:08,970
an information theoretical case that is

67
00:03:07,140 --> 00:03:12,929
the<font color="#CCCCCC"> one that we are</font><font color="#E5E5E5"> going to talk about</font>

68
00:03:08,970 --> 00:03:15,680
<font color="#E5E5E5">here</font><font color="#CCCCCC"> well if you are using sha means</font><font color="#E5E5E5"> the</font>

69
00:03:12,930 --> 00:03:18,269
scheme<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> which you do often</font><font color="#CCCCCC"> and</font>

70
00:03:15,680 --> 00:03:19,980
for example<font color="#E5E5E5"> in the protocol by</font><font color="#CCCCCC"> when</font>

71
00:03:18,269 --> 00:03:22,190
<font color="#CCCCCC">Oracle Bastion and big</font><font color="#E5E5E5"> there's not many</font>

72
00:03:19,980 --> 00:03:25,290
others that follow the same pattern and

73
00:03:22,190 --> 00:03:27,660
then you need<font color="#E5E5E5"> that the size of the</font>

74
00:03:25,290 --> 00:03:32,420
finite field is that<font color="#E5E5E5"> at least</font><font color="#CCCCCC"> the number</font>

75
00:03:27,660 --> 00:03:35,400
of parties and there are other

76
00:03:32,420 --> 00:03:38,100
techniques<font color="#CCCCCC"> for example hyper invertible</font>

77
00:03:35,400 --> 00:03:40,530
matrices this is something some object

78
00:03:38,100 --> 00:03:43,709
that<font color="#E5E5E5"> was introduced by the</font><font color="#CCCCCC"> Oba</font><font color="#E5E5E5"> and here</font>

79
00:03:40,530 --> 00:03:46,590
<font color="#E5E5E5">in 2008 in a very efficient protocol</font>

80
00:03:43,709 --> 00:03:50,579
<font color="#E5E5E5">that I will talk more about later and</font>

81
00:03:46,590 --> 00:03:55,609
that also requires that<font color="#CCCCCC"> the size of</font><font color="#E5E5E5"> the</font>

82
00:03:50,579 --> 00:03:58,829
<font color="#E5E5E5">field is large for</font><font color="#CCCCCC"> different reasons and</font>

83
00:03:55,609 --> 00:04:01,530
<font color="#E5E5E5">so actually you need to be at</font><font color="#CCCCCC"> least two</font>

84
00:03:58,829 --> 00:04:05,269
times the number<font color="#CCCCCC"> of parties and now I</font>

85
00:04:01,530 --> 00:04:09,120
want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mention some some result</font><font color="#E5E5E5"> that we</font>

86
00:04:05,269 --> 00:04:12,480
<font color="#E5E5E5">found out it is unrelated to the</font><font color="#CCCCCC"> rest of</font>

87
00:04:09,120 --> 00:04:16,709
the talk<font color="#E5E5E5"> but we can actually replace</font>

88
00:04:12,480 --> 00:04:19,529
this<font color="#E5E5E5"> -</font><font color="#CCCCCC"> inverted</font><font color="#E5E5E5"> hyper invert invertible</font>

89
00:04:16,709 --> 00:04:21,449
matrices by a notion that<font color="#CCCCCC"> is a little</font>

90
00:04:19,529 --> 00:04:24,628
bit weaker<font color="#CCCCCC"> that has</font><font color="#E5E5E5"> little bit</font>

91
00:04:21,449 --> 00:04:27,930
weaker requirements but it allows to

92
00:04:24,629 --> 00:04:30,029
<font color="#CCCCCC">obtain the same functionality</font><font color="#E5E5E5"> and in</font>

93
00:04:27,930 --> 00:04:32,580
that<font color="#E5E5E5"> notion</font><font color="#CCCCCC"> actually only requires</font>

94
00:04:30,029 --> 00:04:34,110
constant size fields but still which at

95
00:04:32,580 --> 00:04:35,699
<font color="#E5E5E5">least 64 elements so if you are</font>

96
00:04:34,110 --> 00:04:39,870
<font color="#E5E5E5">interested in this you can you can ask</font>

97
00:04:35,699 --> 00:04:41,969
me later<font color="#CCCCCC"> but I will not</font><font color="#E5E5E5"> talking more</font>

98
00:04:39,870 --> 00:04:43,800
<font color="#E5E5E5">about that this this is just</font><font color="#CCCCCC"> a side</font>

99
00:04:41,969 --> 00:04:46,979
<font color="#CCCCCC">result and related to what I'm going to</font>

100
00:04:43,800 --> 00:04:51,779
talk<font color="#CCCCCC"> about later</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I also wanted to</font>

101
00:04:46,979 --> 00:04:54,180
mention<font color="#E5E5E5"> that you also need the field to</font>

102
00:04:51,779 --> 00:04:56,879
be large in other types of protocols<font color="#E5E5E5"> for</font>

103
00:04:54,180 --> 00:04:59,279
example speeds<font color="#E5E5E5"> computationally secure</font>

104
00:04:56,879 --> 00:05:00,900
protocol<font color="#E5E5E5"> if you are using</font><font color="#CCCCCC"> a message</font>

105
00:04:59,279 --> 00:05:04,050
authentication codes you are<font color="#E5E5E5"> going to</font>

106
00:05:00,900 --> 00:05:05,849
need that the field is large<font color="#E5E5E5"> because the</font>

107
00:05:04,050 --> 00:05:10,080
probability<font color="#CCCCCC"> that an adversary cheats and</font>

108
00:05:05,849 --> 00:05:11,580
it's not caught is going to be inversely

109
00:05:10,080 --> 00:05:15,120
proportional to<font color="#E5E5E5"> the size of the field</font>

110
00:05:11,580 --> 00:05:17,639
<font color="#E5E5E5">and you saw some other manifestation of</font>

111
00:05:15,120 --> 00:05:20,099
that<font color="#E5E5E5"> in in the</font><font color="#CCCCCC"> in the talk yesterday by</font>

112
00:05:17,639 --> 00:05:22,409
<font color="#E5E5E5">by</font><font color="#CCCCCC"> arielle</font><font color="#E5E5E5"> but depending on whether you</font>

113
00:05:20,099 --> 00:05:25,110
have large or small<font color="#E5E5E5"> finite field you you</font>

114
00:05:22,409 --> 00:05:28,819
<font color="#E5E5E5">needed to do in a different or you</font>

115
00:05:25,110 --> 00:05:33,779
needed<font color="#E5E5E5"> to use a different</font><font color="#CCCCCC"> protocol and</font>

116
00:05:28,819 --> 00:05:37,770
yes so so then the<font color="#CCCCCC"> question is is there</font>

117
00:05:33,779 --> 00:05:40,860
any<font color="#E5E5E5"> way that we can use these protocols</font>

118
00:05:37,770 --> 00:05:43,289
that work<font color="#E5E5E5"> over large finite fields when</font>

119
00:05:40,860 --> 00:05:46,229
actually we have that our function is

120
00:05:43,289 --> 00:05:50,360
more<font color="#CCCCCC"> naturally represented as a circuit</font>

121
00:05:46,229 --> 00:05:53,099
<font color="#E5E5E5">over a small field so for example say</font>

122
00:05:50,360 --> 00:05:55,050
<font color="#E5E5E5">comparison of off bit strings or maybe I</font>

123
00:05:53,099 --> 00:05:58,560
don't<font color="#E5E5E5"> know set intersection something</font>

124
00:05:55,050 --> 00:06:01,379
like that so I'm going<font color="#CCCCCC"> to talk just</font>

125
00:05:58,560 --> 00:06:03,569
<font color="#E5E5E5">mainly about</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> binary field but our</font>

126
00:06:01,379 --> 00:06:07,349
<font color="#E5E5E5">results just work for any small field</font>

127
00:06:03,569 --> 00:06:11,069
<font color="#CCCCCC">just it's easier to talk about the</font>

128
00:06:07,349 --> 00:06:13,979
<font color="#CCCCCC">binary field and of course one can</font>

129
00:06:11,069 --> 00:06:17,099
<font color="#CCCCCC">always say</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and the field of two</font>

130
00:06:13,979 --> 00:06:22,110
elements<font color="#E5E5E5"> is just contained in any</font><font color="#CCCCCC"> field</font>

131
00:06:17,099 --> 00:06:26,339
of<font color="#E5E5E5"> two to the K so you just take a power</font>

132
00:06:22,110 --> 00:06:28,439
of<font color="#E5E5E5"> two that is large enough</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so that</font>

133
00:06:26,339 --> 00:06:31,590
you can use your your your arithmetic

134
00:06:28,439 --> 00:06:34,180
protocol and then

135
00:06:31,590 --> 00:06:37,929
<font color="#CCCCCC">and then basically you just compute the</font>

136
00:06:34,180 --> 00:06:39,939
same circuit with what your sums and

137
00:06:37,930 --> 00:06:43,210
products will now be in<font color="#E5E5E5"> the extension</font>

138
00:06:39,939 --> 00:06:45,580
<font color="#CCCCCC">field you can do that but that</font><font color="#E5E5E5"> seems</font>

139
00:06:43,210 --> 00:06:49,359
wasteful<font color="#E5E5E5"> because you are essentially</font>

140
00:06:45,580 --> 00:06:53,650
<font color="#E5E5E5">using</font><font color="#CCCCCC"> n bits to represent what would be</font>

141
00:06:49,360 --> 00:06:56,699
<font color="#CCCCCC">just one so then the question that we</font>

142
00:06:53,650 --> 00:07:01,530
<font color="#CCCCCC">have is can</font><font color="#E5E5E5"> we get more out of this and</font>

143
00:06:56,699 --> 00:07:06,960
why what do I<font color="#E5E5E5"> mean by that so basically</font>

144
00:07:01,530 --> 00:07:11,948
<font color="#E5E5E5">since we are anyway going to work use</font>

145
00:07:06,960 --> 00:07:13,989
arithmetic<font color="#CCCCCC"> a protocol</font><font color="#E5E5E5"> over a large</font>

146
00:07:11,949 --> 00:07:16,840
finite field<font color="#E5E5E5"> then the question is</font>

147
00:07:13,990 --> 00:07:19,680
whether we<font color="#CCCCCC"> can use it to evaluate more</font>

148
00:07:16,840 --> 00:07:23,919
<font color="#E5E5E5">than one instances instance of the</font>

149
00:07:19,680 --> 00:07:27,879
binary circuit<font color="#E5E5E5"> okay so we want to in</font>

150
00:07:23,919 --> 00:07:31,330
other words<font color="#E5E5E5"> embed K parallel evaluations</font>

151
00:07:27,879 --> 00:07:34,539
of the binary<font color="#E5E5E5"> circuits into one of the</font>

152
00:07:31,330 --> 00:07:36,128
circuit of over the large field<font color="#E5E5E5"> and of</font>

153
00:07:34,539 --> 00:07:39,039
course when we<font color="#CCCCCC"> are doing</font><font color="#E5E5E5"> this embedding</font>

154
00:07:36,129 --> 00:07:44,409
we don't want to add too much complexity

155
00:07:39,039 --> 00:07:46,839
<font color="#CCCCCC">that sort of</font><font color="#E5E5E5"> Dwarfs the one by</font><font color="#CCCCCC"> the you</font>

156
00:07:44,409 --> 00:07:49,509
use for the protocol over the large

157
00:07:46,839 --> 00:07:52,930
field<font color="#E5E5E5"> so we are going to be concerned</font>

158
00:07:49,509 --> 00:07:57,940
here about communication complexity by

159
00:07:52,930 --> 00:08:01,360
the way so<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> question and what</font>

160
00:07:57,940 --> 00:08:03,129
we did concretely was to<font color="#CCCCCC"> focus</font><font color="#E5E5E5"> on the</font>

161
00:08:01,360 --> 00:08:06,389
case of<font color="#E5E5E5"> information theoretically</font>

162
00:08:03,129 --> 00:08:11,319
perfectly<font color="#E5E5E5"> secure multi-party computation</font>

163
00:08:06,389 --> 00:08:14,349
<font color="#E5E5E5">no no broadcast and in that case and the</font>

164
00:08:11,319 --> 00:08:17,949
best protocol<font color="#E5E5E5"> at least if you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going</font>

165
00:08:14,349 --> 00:08:23,409
for the strongest adversary is the one

166
00:08:17,949 --> 00:08:26,289
by<font color="#CCCCCC"> Berlin</font><font color="#E5E5E5"> and here in from 2008 and so</font>

167
00:08:23,409 --> 00:08:30,279
what they get is<font color="#E5E5E5"> exactly this here this</font>

168
00:08:26,289 --> 00:08:31,969
<font color="#E5E5E5">thing here so they they are able</font><font color="#CCCCCC"> to</font>

169
00:08:30,279 --> 00:08:35,570
<font color="#CCCCCC">tolerate</font>

170
00:08:31,970 --> 00:08:39,849
and minus 1/3 octave corruptions<font color="#E5E5E5"> and</font>

171
00:08:35,570 --> 00:08:41,870
<font color="#E5E5E5">that's is optimal in in this setting and</font>

172
00:08:39,849 --> 00:08:46,130
the protocol has a communication

173
00:08:41,870 --> 00:08:50,830
<font color="#E5E5E5">complexity of Oh</font><font color="#CCCCCC"> n</font><font color="#E5E5E5"> field elements per</font>

174
00:08:46,130 --> 00:08:54,439
gate and but it has the restriction that

175
00:08:50,830 --> 00:09:00,410
the field<font color="#CCCCCC"> has to have at least two N</font>

176
00:08:54,440 --> 00:09:04,160
parties so what we did is to<font color="#CCCCCC"> show</font><font color="#E5E5E5"> that</font>

177
00:09:00,410 --> 00:09:08,180
<font color="#E5E5E5">we can use</font><font color="#CCCCCC"> that protocol in</font><font color="#E5E5E5"> order</font><font color="#CCCCCC"> to</font>

178
00:09:04,160 --> 00:09:13,040
compute log n evaluations of a boolean

179
00:09:08,180 --> 00:09:15,229
circuit<font color="#E5E5E5"> and so if you do that and again</font>

180
00:09:13,040 --> 00:09:17,480
<font color="#E5E5E5">we are</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> increase too much</font>

181
00:09:15,230 --> 00:09:20,750
the communication complexity while while

182
00:09:17,480 --> 00:09:24,620
doing this embedding and if you<font color="#CCCCCC"> do that</font>

183
00:09:20,750 --> 00:09:26,930
then<font color="#E5E5E5"> if you now count how many how</font><font color="#CCCCCC"> much</font>

184
00:09:24,620 --> 00:09:28,160
information<font color="#CCCCCC"> you</font><font color="#E5E5E5"> are you are sending then</font>

185
00:09:26,930 --> 00:09:32,449
it turns out<font color="#CCCCCC"> that the communication</font>

186
00:09:28,160 --> 00:09:36,140
complexity is linear<font color="#E5E5E5"> bits per gate</font><font color="#CCCCCC"> in</font>

187
00:09:32,450 --> 00:09:38,510
each instance<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so we are able to</font>

188
00:09:36,140 --> 00:09:43,010
<font color="#E5E5E5">remove the limitation on the size of the</font>

189
00:09:38,510 --> 00:09:45,740
field<font color="#E5E5E5"> but well at the cost of having to</font>

190
00:09:43,010 --> 00:09:49,730
compute log and evaluations of this of

191
00:09:45,740 --> 00:09:53,360
this circuit<font color="#CCCCCC"> ok so that</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> main</font>

192
00:09:49,730 --> 00:09:55,490
<font color="#E5E5E5">result that we have and now you may be</font>

193
00:09:53,360 --> 00:09:57,980
thinking<font color="#E5E5E5"> at this point</font><font color="#CCCCCC"> that the way</font><font color="#E5E5E5"> that</font>

194
00:09:55,490 --> 00:10:01,760
we did<font color="#CCCCCC"> it was by using</font><font color="#E5E5E5"> back secret</font>

195
00:09:57,980 --> 00:10:04,280
<font color="#CCCCCC">sharing but the point is that we cannot</font>

196
00:10:01,760 --> 00:10:08,390
do that<font color="#E5E5E5"> because</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> we do that</font><font color="#CCCCCC"> then we</font>

197
00:10:04,280 --> 00:10:11,630
lose this corruption tolerance of third

198
00:10:08,390 --> 00:10:14,449
parties<font color="#CCCCCC"> that will we will</font><font color="#E5E5E5"> not be able to</font>

199
00:10:11,630 --> 00:10:19,640
tolerate this optimal adversary anymore

200
00:10:14,450 --> 00:10:22,820
and<font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact we can</font><font color="#CCCCCC"> even combine our</font>

201
00:10:19,640 --> 00:10:25,430
techniques that I will explain with<font color="#CCCCCC"> back</font>

202
00:10:22,820 --> 00:10:29,720
<font color="#E5E5E5">secret</font><font color="#CCCCCC"> sharing</font><font color="#E5E5E5"> and if we do that then we</font>

203
00:10:25,430 --> 00:10:32,020
get this other result<font color="#E5E5E5"> where now we are</font>

204
00:10:29,720 --> 00:10:36,860
<font color="#E5E5E5">not able to tolerate an optimal</font>

205
00:10:32,020 --> 00:10:38,860
adversary but we have an amortized

206
00:10:36,860 --> 00:10:43,070
communication complexity of<font color="#E5E5E5"> constant</font>

207
00:10:38,860 --> 00:10:44,810
bits per gate in existence and<font color="#E5E5E5"> now we</font>

208
00:10:43,070 --> 00:10:48,200
need to<font color="#CCCCCC"> evaluate</font>

209
00:10:44,810 --> 00:10:50,079
n log and circuits in order to get<font color="#E5E5E5"> this</font>

210
00:10:48,200 --> 00:10:58,130
because<font color="#E5E5E5"> we are using this</font><font color="#CCCCCC"> bucked</font>

211
00:10:50,080 --> 00:11:01,370
<font color="#E5E5E5">strategy</font><font color="#CCCCCC"> okay so now let me explain</font><font color="#E5E5E5"> how</font>

212
00:10:58,130 --> 00:11:03,770
we did this<font color="#CCCCCC"> and for now we can just</font>

213
00:11:01,370 --> 00:11:06,440
forget<font color="#CCCCCC"> about which specific protocol we</font>

214
00:11:03,770 --> 00:11:08,230
are using<font color="#CCCCCC"> over the</font><font color="#E5E5E5"> tension field so this</font>

215
00:11:06,440 --> 00:11:11,870
is the situation<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to solve</font>

216
00:11:08,230 --> 00:11:14,090
we have a binary circuit and again we

217
00:11:11,870 --> 00:11:16,370
want to<font color="#E5E5E5"> evaluate</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in K different sets</font>

218
00:11:14,090 --> 00:11:19,520
of inputs<font color="#E5E5E5"> that I represent by the</font>

219
00:11:16,370 --> 00:11:22,760
different<font color="#CCCCCC"> colors here</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> now if you</font>

220
00:11:19,520 --> 00:11:25,610
think<font color="#E5E5E5"> about it you could just think that</font>

221
00:11:22,760 --> 00:11:30,319
you<font color="#E5E5E5"> have a circuit that</font><font color="#CCCCCC"> does one</font>

222
00:11:25,610 --> 00:11:31,820
evaluation<font color="#E5E5E5"> in your circuit the gates of</font>

223
00:11:30,320 --> 00:11:35,750
your circuit just operate coordinate

224
00:11:31,820 --> 00:11:38,060
wise in vectors<font color="#CCCCCC"> of K elements so then</font>

225
00:11:35,750 --> 00:11:41,480
your<font color="#CCCCCC"> Samson products would be coordinate</font>

226
00:11:38,060 --> 00:11:44,239
wise and in the resource<font color="#CCCCCC"> that we have</font>

227
00:11:41,480 --> 00:11:46,820
<font color="#CCCCCC">the thing that we know how to do is how</font>

228
00:11:44,240 --> 00:11:51,380
<font color="#E5E5E5">to compute an arithmetic circuit over a</font>

229
00:11:46,820 --> 00:11:53,540
large field so now<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the sort</font><font color="#E5E5E5"> of</font>

230
00:11:51,380 --> 00:11:56,300
algebraic<font color="#CCCCCC"> structure of this large field</font>

231
00:11:53,540 --> 00:11:59,750
was<font color="#E5E5E5"> the same as the algebraic structure</font>

232
00:11:56,300 --> 00:12:03,170
of a set of<font color="#CCCCCC"> vectors over f2 with a</font>

233
00:11:59,750 --> 00:12:05,600
<font color="#E5E5E5">coordinate wise operations then we would</font>

234
00:12:03,170 --> 00:12:09,170
basically be<font color="#E5E5E5"> done I mean we could just</font>

235
00:12:05,600 --> 00:12:13,160
use directly<font color="#E5E5E5"> this this protocol now the</font>

236
00:12:09,170 --> 00:12:18,110
problem is<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is not the case so</font>

237
00:12:13,160 --> 00:12:21,110
if you have your vectors of length K

238
00:12:18,110 --> 00:12:24,110
over f2 and you consider<font color="#CCCCCC"> their sum and</font>

239
00:12:21,110 --> 00:12:26,900
product<font color="#E5E5E5"> but in advice this doesn't have</font>

240
00:12:24,110 --> 00:12:31,490
the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> structure as the</font>

241
00:12:26,900 --> 00:12:33,829
fields<font color="#E5E5E5"> of decay because while the sums</font>

242
00:12:31,490 --> 00:12:36,140
are essentially the same so they are

243
00:12:33,830 --> 00:12:38,090
<font color="#CCCCCC">isomorphic us</font><font color="#E5E5E5"> as vector spaces the</font>

244
00:12:36,140 --> 00:12:40,010
<font color="#CCCCCC">products cannot</font><font color="#E5E5E5"> be the same in one case</font>

245
00:12:38,090 --> 00:12:44,600
you<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> basis of</font><font color="#CCCCCC"> 0 in the</font><font color="#E5E5E5"> other you</font>

246
00:12:40,010 --> 00:12:46,880
don't so we cannot do that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> not</font>

247
00:12:44,600 --> 00:12:51,230
<font color="#E5E5E5">isomorphic sfq algebra that</font><font color="#CCCCCC"> will be the</font>

248
00:12:46,880 --> 00:12:53,600
way of<font color="#E5E5E5"> saying this mathematically and so</font>

249
00:12:51,230 --> 00:12:56,510
the<font color="#E5E5E5"> better the next best</font><font color="#CCCCCC"> thing that we</font>

250
00:12:53,600 --> 00:12:58,840
can<font color="#CCCCCC"> think</font><font color="#E5E5E5"> of is using what we call to</font>

251
00:12:56,510 --> 00:13:02,300
reverse multiplication friend<font color="#E5E5E5"> embedded</font>

252
00:12:58,840 --> 00:13:05,300
so this what what is this<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a pair</font>

253
00:13:02,300 --> 00:13:09,800
<font color="#CCCCCC">of functions now one function takes</font>

254
00:13:05,300 --> 00:13:12,020
vectors over<font color="#E5E5E5"> f2 and and outputs an</font>

255
00:13:09,800 --> 00:13:13,839
element<font color="#E5E5E5"> of a field and now the</font><font color="#CCCCCC"> field has</font>

256
00:13:12,020 --> 00:13:17,569
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit larger it has degree</font>

257
00:13:13,840 --> 00:13:20,540
<font color="#CCCCCC">m and the other map goes the other way</font>

258
00:13:17,570 --> 00:13:23,270
around<font color="#CCCCCC"> and the condition is that</font><font color="#E5E5E5"> in</font>

259
00:13:20,540 --> 00:13:27,469
<font color="#E5E5E5">order to compute the products</font><font color="#CCCCCC"> Coronel</font>

260
00:13:23,270 --> 00:13:30,980
wines of of<font color="#E5E5E5"> two vectors x and y we</font><font color="#CCCCCC"> can</font>

261
00:13:27,470 --> 00:13:34,310
first apply this<font color="#E5E5E5"> map fight multiply them</font>

262
00:13:30,980 --> 00:13:42,890
as<font color="#CCCCCC"> filled elements and then apply</font>

263
00:13:34,310 --> 00:13:46,520
Sybok<font color="#CCCCCC"> ok now since i said before that</font>

264
00:13:42,890 --> 00:13:48,890
these<font color="#E5E5E5"> two structures are not isomorphic</font>

265
00:13:46,520 --> 00:13:51,199
then you can never have<font color="#CCCCCC"> that sy and Phi</font>

266
00:13:48,890 --> 00:13:52,850
are<font color="#E5E5E5"> the inverse of each other but you</font>

267
00:13:51,200 --> 00:13:57,860
have that<font color="#E5E5E5"> Phi's invertible and this is</font>

268
00:13:52,850 --> 00:14:00,290
sort of important<font color="#E5E5E5"> for our product</font><font color="#CCCCCC"> m so i</font>

269
00:13:57,860 --> 00:14:02,360
want<font color="#E5E5E5"> to say something</font><font color="#CCCCCC"> about the</font><font color="#E5E5E5"> history</font>

270
00:14:00,290 --> 00:14:04,339
<font color="#CCCCCC">of this notion why do we call</font><font color="#E5E5E5"> it first</font>

271
00:14:02,360 --> 00:14:06,530
reverse multiplication friend embeddings

272
00:14:04,339 --> 00:14:10,160
well we had the notion<font color="#E5E5E5"> of multiplication</font>

273
00:14:06,530 --> 00:14:12,350
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the embeddings some some of the</font>

274
00:14:10,160 --> 00:14:16,010
authors of this paper<font color="#E5E5E5"> had introduced</font>

275
00:14:12,350 --> 00:14:19,220
this notion in in in crypto 2009 in a

276
00:14:16,010 --> 00:14:23,420
paper about multiplicative<font color="#CCCCCC"> secure</font>

277
00:14:19,220 --> 00:14:25,640
<font color="#E5E5E5">sharing and in that</font><font color="#CCCCCC"> notion was just the</font>

278
00:14:23,420 --> 00:14:28,000
same as<font color="#CCCCCC"> I'm considering</font><font color="#E5E5E5"> here but with</font>

279
00:14:25,640 --> 00:14:32,800
the<font color="#CCCCCC"> rules of the</font><font color="#E5E5E5"> field and and the ring</font>

280
00:14:28,000 --> 00:14:37,120
or the<font color="#E5E5E5"> vector</font><font color="#CCCCCC"> space over F 2</font><font color="#E5E5E5"> swapped and</font>

281
00:14:32,800 --> 00:14:38,979
now this notion<font color="#CCCCCC"> had been studied in</font>

282
00:14:37,120 --> 00:14:42,850
under the name of bilinear

283
00:14:38,980 --> 00:14:44,830
multiplication algorithms while the new

284
00:14:42,850 --> 00:14:49,680
notion that we are<font color="#CCCCCC"> introducing seems to</font>

285
00:14:44,830 --> 00:14:53,740
be studied much less and it is<font color="#E5E5E5"> sort of</font>

286
00:14:49,680 --> 00:14:55,390
natural because or the<font color="#CCCCCC"> notion is is</font>

287
00:14:53,740 --> 00:14:59,410
<font color="#E5E5E5">actually not so</font><font color="#CCCCCC"> natural because i mean</font>

288
00:14:55,390 --> 00:15:02,199
you<font color="#E5E5E5"> are expressing some simple object</font>

289
00:14:59,410 --> 00:15:04,510
which is like you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> f2 o products</font>

290
00:15:02,200 --> 00:15:07,170
<font color="#CCCCCC">pollinate why</font><font color="#E5E5E5"> sprouts over f2 in terms</font>

291
00:15:04,510 --> 00:15:10,390
of a more complicated<font color="#E5E5E5"> notion which is</font>

292
00:15:07,170 --> 00:15:14,529
<font color="#CCCCCC">product in extension field</font><font color="#E5E5E5"> so it looks</font>

293
00:15:10,390 --> 00:15:17,589
like it's<font color="#E5E5E5"> upside</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> we knew how about</font>

294
00:15:14,529 --> 00:15:19,630
<font color="#E5E5E5">this notion and we could use it</font><font color="#CCCCCC"> to</font>

295
00:15:17,589 --> 00:15:23,050
improve a<font color="#CCCCCC"> little bit the construction in</font>

296
00:15:19,630 --> 00:15:27,310
in crypto<font color="#CCCCCC"> onine</font><font color="#E5E5E5"> and we never published</font>

297
00:15:23,050 --> 00:15:29,109
it now the the first authors<font color="#CCCCCC"> that came</font>

298
00:15:27,310 --> 00:15:33,550
up with an<font color="#CCCCCC"> application for</font><font color="#E5E5E5"> this notion</font>

299
00:15:29,110 --> 00:15:37,060
were block magic in<font color="#CCCCCC"> GU yang in crypto</font>

300
00:15:33,550 --> 00:15:38,920
last year and they didn't in<font color="#E5E5E5"> that paper</font>

301
00:15:37,060 --> 00:15:43,000
<font color="#E5E5E5">explicitly</font><font color="#CCCCCC"> defined this notion they just</font>

302
00:15:38,920 --> 00:15:46,270
use a construction for that but now they

303
00:15:43,000 --> 00:15:47,680
they have uploaded a preprint<font color="#E5E5E5"> more or</font>

304
00:15:46,270 --> 00:15:50,050
less at the<font color="#CCCCCC"> same time that we got this</font>

305
00:15:47,680 --> 00:15:52,479
this paper accepted where they

306
00:15:50,050 --> 00:15:57,219
explicitly<font color="#E5E5E5"> define that and study this</font>

307
00:15:52,480 --> 00:16:01,029
<font color="#CCCCCC">notion also and the</font><font color="#E5E5E5"> their applications</font>

308
00:15:57,220 --> 00:16:04,330
is<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> little bit different than ours</font>

309
00:16:01,029 --> 00:16:08,140
they<font color="#CCCCCC"> are trying to constrain</font><font color="#E5E5E5"> or they</font>

310
00:16:04,330 --> 00:16:10,750
construct<font color="#CCCCCC"> oaties from one instantiation</font>

311
00:16:08,140 --> 00:16:13,480
of oblivious linear evaluation<font color="#E5E5E5"> over</font><font color="#CCCCCC"> a</font>

312
00:16:10,750 --> 00:16:17,020
large field so the focus is<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font>

313
00:16:13,480 --> 00:16:21,810
different but it<font color="#E5E5E5"> shows</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> notion</font>

314
00:16:17,020 --> 00:16:27,449
seems to be interested in<font color="#CCCCCC"> different</font>

315
00:16:21,810 --> 00:16:30,880
<font color="#E5E5E5">regimes so what about the constructions</font>

316
00:16:27,450 --> 00:16:34,120
so in<font color="#CCCCCC"> order to get the results of of</font>

317
00:16:30,880 --> 00:16:36,070
this paper we need that we need<font color="#E5E5E5"> to come</font>

318
00:16:34,120 --> 00:16:38,050
<font color="#CCCCCC">up with</font><font color="#E5E5E5"> constructions of reverse</font>

319
00:16:36,070 --> 00:16:40,029
multiplication friend embeddings where

320
00:16:38,050 --> 00:16:41,979
the<font color="#E5E5E5"> degree of the field is linear in the</font>

321
00:16:40,029 --> 00:16:46,060
number of<font color="#E5E5E5"> copies of f2 that</font><font color="#CCCCCC"> you want to</font>

322
00:16:41,980 --> 00:16:48,010
to embed and we can do that by means of

323
00:16:46,060 --> 00:16:51,130
algebraic geometry and actually

324
00:16:48,010 --> 00:16:52,900
mathematically<font color="#CCCCCC"> this notion and the</font><font color="#E5E5E5"> one</font>

325
00:16:51,130 --> 00:16:54,880
without the reverse<font color="#CCCCCC"> parts or the</font>

326
00:16:52,900 --> 00:16:57,310
multiplication<font color="#E5E5E5"> friend embeddings they</font>

327
00:16:54,880 --> 00:16:59,740
are not so so different<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> I</font>

328
00:16:57,310 --> 00:17:03,369
mean when it comes<font color="#E5E5E5"> to constructions you</font>

329
00:16:59,740 --> 00:17:05,589
can use the same techniques and so you

330
00:17:03,370 --> 00:17:10,060
can use algebraic geometry for this<font color="#E5E5E5"> but</font>

331
00:17:05,589 --> 00:17:12,220
I<font color="#E5E5E5"> wanted</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> also mention that for quite</font>

332
00:17:10,060 --> 00:17:14,859
large parameters<font color="#CCCCCC"> actually the best</font><font color="#E5E5E5"> thing</font>

333
00:17:12,220 --> 00:17:17,949
that you<font color="#CCCCCC"> can do is still polynomial</font>

334
00:17:14,859 --> 00:17:22,869
interpolation based constructions what

335
00:17:17,949 --> 00:17:25,839
you maybe have<font color="#CCCCCC"> to concatenate to two of</font>

336
00:17:22,869 --> 00:17:29,040
<font color="#CCCCCC">these over</font><font color="#E5E5E5"> over some different fields</font>

337
00:17:25,839 --> 00:17:33,220
<font color="#E5E5E5">and so on for example you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> embed 99</font>

338
00:17:29,040 --> 00:17:36,610
<font color="#E5E5E5">copies of</font><font color="#CCCCCC"> f2 into a field of</font><font color="#E5E5E5"> degree 325</font>

339
00:17:33,220 --> 00:17:39,850
<font color="#E5E5E5">and this is the best way</font><font color="#CCCCCC"> you can do this</font>

340
00:17:36,610 --> 00:17:42,939
<font color="#E5E5E5">is by polynomial interpolation and there</font>

341
00:17:39,850 --> 00:17:45,850
is there<font color="#E5E5E5"> seems to be it seems to be</font>

342
00:17:42,940 --> 00:17:51,550
<font color="#E5E5E5">already quite large for</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> possible</font>

343
00:17:45,850 --> 00:17:54,490
practical purpose of<font color="#E5E5E5"> this so now how do</font>

344
00:17:51,550 --> 00:17:57,909
we<font color="#E5E5E5"> use that or why is this notion</font>

345
00:17:54,490 --> 00:18:01,090
important<font color="#E5E5E5"> so so the point is that again</font>

346
00:17:57,910 --> 00:18:07,140
<font color="#CCCCCC">we want to</font><font color="#E5E5E5"> compute this our circuit over</font>

347
00:18:01,090 --> 00:18:12,659
a over a boolean<font color="#CCCCCC"> or a boolean</font><font color="#E5E5E5"> field so</font>

348
00:18:07,140 --> 00:18:15,940
what the parties do is to embed their

349
00:18:12,660 --> 00:18:18,850
vector of inputs into<font color="#E5E5E5"> an element</font><font color="#CCCCCC"> of a</font>

350
00:18:15,940 --> 00:18:22,090
<font color="#E5E5E5">fan of the large finite field by</font>

351
00:18:18,850 --> 00:18:24,639
applying Phi and then they will compute

352
00:18:22,090 --> 00:18:28,209
certain<font color="#E5E5E5"> circuit with</font><font color="#CCCCCC"> the protocol for</font>

353
00:18:24,640 --> 00:18:30,790
<font color="#CCCCCC">the</font><font color="#E5E5E5"> large for the large finite field and</font>

354
00:18:28,210 --> 00:18:33,790
then they will retrieve<font color="#CCCCCC"> the result</font><font color="#E5E5E5"> back</font>

355
00:18:30,790 --> 00:18:37,030
by applying the<font color="#CCCCCC"> inverse of Phi and now</font>

356
00:18:33,790 --> 00:18:38,980
what is<font color="#E5E5E5"> this circuit here C</font><font color="#CCCCCC"> prime</font><font color="#E5E5E5"> you</font>

357
00:18:37,030 --> 00:18:41,860
may<font color="#E5E5E5"> think that it is</font><font color="#CCCCCC"> the same as the one</font>

358
00:18:38,980 --> 00:18:45,520
<font color="#CCCCCC">that we want to to compute the boolean</font>

359
00:18:41,860 --> 00:18:48,820
one but it has<font color="#CCCCCC"> some</font><font color="#E5E5E5"> differences and the</font>

360
00:18:45,520 --> 00:18:51,610
main difference<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that whenever you in</font>

361
00:18:48,820 --> 00:18:53,530
the boolean case you are going to

362
00:18:51,610 --> 00:18:56,320
multiply you have a multiplication<font color="#E5E5E5"> gate</font>

363
00:18:53,530 --> 00:18:57,899
or an and in the case<font color="#E5E5E5"> of the last</font>

364
00:18:56,320 --> 00:19:00,909
<font color="#E5E5E5">extension field you are going to</font>

365
00:18:57,900 --> 00:19:03,280
multiply<font color="#E5E5E5"> your your inputs but then apply</font>

366
00:19:00,910 --> 00:19:06,559
this

367
00:19:03,280 --> 00:19:10,100
concatenation<font color="#E5E5E5"> of functions of science I</font>

368
00:19:06,559 --> 00:19:13,070
where they come<font color="#CCCCCC"> from the multiplication</font>

369
00:19:10,100 --> 00:19:16,219
of<font color="#CCCCCC"> an embedding the idea of</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> that</font>

370
00:19:13,070 --> 00:19:18,830
is<font color="#E5E5E5"> that what we want is that basically</font>

371
00:19:16,220 --> 00:19:22,610
at<font color="#E5E5E5"> every point of the protocol we are we</font>

372
00:19:18,830 --> 00:19:25,760
we have<font color="#E5E5E5"> Phi in or sharings of Phi</font>

373
00:19:22,610 --> 00:19:31,040
encodings<font color="#E5E5E5"> of the vectors that</font><font color="#CCCCCC"> would be</font>

374
00:19:25,760 --> 00:19:35,919
in the boolean circuit and by<font color="#E5E5E5"> doing this</font>

375
00:19:31,040 --> 00:19:39,440
this<font color="#E5E5E5"> concatenation here you have that if</font>

376
00:19:35,919 --> 00:19:44,290
if you have<font color="#CCCCCC"> n codons</font><font color="#E5E5E5"> of a and B by fine</font>

377
00:19:39,440 --> 00:19:46,720
<font color="#E5E5E5">and these are vectors then this will map</font>

378
00:19:44,290 --> 00:19:48,918
that<font color="#E5E5E5"> into an encoding of the</font>

379
00:19:46,720 --> 00:19:51,820
<font color="#CCCCCC">component-wise product of a and</font><font color="#E5E5E5"> B and</font>

380
00:19:48,919 --> 00:19:54,890
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> because of the properties of</font>

381
00:19:51,820 --> 00:19:57,200
multiplication of random variables<font color="#CCCCCC"> so</font>

382
00:19:54,890 --> 00:20:02,030
this is this<font color="#E5E5E5"> is how we modify the</font>

383
00:19:57,200 --> 00:20:04,520
circuit<font color="#E5E5E5"> but but then we have two</font>

384
00:20:02,030 --> 00:20:07,340
obstacles<font color="#CCCCCC"> because now we have</font><font color="#E5E5E5"> introduced</font>

385
00:20:04,520 --> 00:20:10,040
a new<font color="#E5E5E5"> gate what is this</font><font color="#CCCCCC"> Phi</font><font color="#E5E5E5"> compost with</font>

386
00:20:07,340 --> 00:20:12,530
<font color="#CCCCCC">side guys how do we compute that if it</font>

387
00:20:10,040 --> 00:20:14,330
was a linear<font color="#E5E5E5"> over the large field and we</font>

388
00:20:12,530 --> 00:20:15,918
could just locally I mean the parties

389
00:20:14,330 --> 00:20:19,000
could<font color="#E5E5E5"> just locally come and compute that</font>

390
00:20:15,919 --> 00:20:22,700
and it wouldn't increase<font color="#E5E5E5"> the complexity</font>

391
00:20:19,000 --> 00:20:24,860
<font color="#E5E5E5">but the problem is it's not linear</font><font color="#CCCCCC"> over</font>

392
00:20:22,700 --> 00:20:27,980
the large field<font color="#E5E5E5"> is linear</font><font color="#CCCCCC"> over the base</font>

393
00:20:24,860 --> 00:20:29,870
field<font color="#E5E5E5"> f2 and that is that is a problem</font>

394
00:20:27,980 --> 00:20:33,590
<font color="#E5E5E5">and that already happens</font><font color="#CCCCCC"> even for</font>

395
00:20:29,870 --> 00:20:35,899
passive adversaries and another<font color="#E5E5E5"> problem</font>

396
00:20:33,590 --> 00:20:38,750
is how do we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> that actually the</font>

397
00:20:35,900 --> 00:20:41,090
the part is input and<font color="#E5E5E5"> columns by Phi</font>

398
00:20:38,750 --> 00:20:45,440
<font color="#E5E5E5">because the image of Phi is actually</font><font color="#CCCCCC"> not</font>

399
00:20:41,090 --> 00:20:47,780
the full field the full extension field

400
00:20:45,440 --> 00:20:49,940
and the protocol<font color="#CCCCCC"> aware over that field</font>

401
00:20:47,780 --> 00:20:52,129
<font color="#E5E5E5">doesn't care what it</font><font color="#CCCCCC"> gets I mean doesn't</font>

402
00:20:49,940 --> 00:20:54,140
get care if it gets an encoding by fire

403
00:20:52,130 --> 00:20:57,290
<font color="#CCCCCC">or it gets</font><font color="#E5E5E5"> another element as long as it</font>

404
00:20:54,140 --> 00:20:58,730
gets<font color="#E5E5E5"> some element of the large field so</font>

405
00:20:57,290 --> 00:21:03,290
these two<font color="#CCCCCC"> things are</font><font color="#E5E5E5"> are the ones that</font>

406
00:20:58,730 --> 00:21:06,919
<font color="#E5E5E5">we have to solve</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also there's some</font>

407
00:21:03,290 --> 00:21:09,470
some protocols also require random

408
00:21:06,919 --> 00:21:12,080
elements of a large field and we would

409
00:21:09,470 --> 00:21:14,120
maybe needs that they are also<font color="#CCCCCC"> n columns</font>

410
00:21:12,080 --> 00:21:15,409
by Phi so but that this<font color="#E5E5E5"> model is</font><font color="#CCCCCC"> the</font>

411
00:21:14,120 --> 00:21:18,860
same as the second<font color="#E5E5E5"> problem</font>

412
00:21:15,410 --> 00:21:22,280
<font color="#CCCCCC">and</font><font color="#E5E5E5"> now I'm not going to give the</font>

413
00:21:18,860 --> 00:21:24,229
<font color="#CCCCCC">details of how to solve this</font><font color="#E5E5E5"> but yes</font><font color="#CCCCCC"> to</font>

414
00:21:22,280 --> 00:21:28,490
say that we can reduce<font color="#E5E5E5"> this into some</font>

415
00:21:24,230 --> 00:21:30,500
other problem in this<font color="#CCCCCC"> problem I mean we</font>

416
00:21:28,490 --> 00:21:33,740
can reduce both of the<font color="#E5E5E5"> programs that</font>

417
00:21:30,500 --> 00:21:35,630
<font color="#CCCCCC">that I mentioned before</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> this is the</font>

418
00:21:33,740 --> 00:21:41,060
<font color="#CCCCCC">following problem we have a subspace V</font>

419
00:21:35,630 --> 00:21:44,330
and this subspace is yeah I mean

420
00:21:41,060 --> 00:21:46,190
contains<font color="#E5E5E5"> vectors</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> L coordinates in the</font>

421
00:21:44,330 --> 00:21:49,760
extension<font color="#E5E5E5"> field but it's only linear</font>

422
00:21:46,190 --> 00:21:50,570
over<font color="#E5E5E5"> the base field</font><font color="#CCCCCC"> f2 and now you want</font>

423
00:21:49,760 --> 00:21:53,000
to create

424
00:21:50,570 --> 00:21:59,870
sharings<font color="#E5E5E5"> of coordinates of a random</font>

425
00:21:53,000 --> 00:22:02,180
element<font color="#E5E5E5"> in V</font><font color="#CCCCCC"> and now if you if you know</font>

426
00:21:59,870 --> 00:22:05,020
a little<font color="#CCCCCC"> bit about this Hilton you</font>

427
00:22:02,180 --> 00:22:07,640
<font color="#CCCCCC">haven't here protocol you you think that</font>

428
00:22:05,020 --> 00:22:11,090
we<font color="#CCCCCC"> are going to use hyper invertible</font>

429
00:22:07,640 --> 00:22:12,680
matrices and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> actually are but the</font>

430
00:22:11,090 --> 00:22:16,159
problem is<font color="#E5E5E5"> that they don't work directly</font>

431
00:22:12,680 --> 00:22:19,340
<font color="#E5E5E5">because in</font><font color="#CCCCCC"> order to do that you would</font>

432
00:22:16,160 --> 00:22:21,200
<font color="#CCCCCC">need that</font><font color="#E5E5E5"> V is f2 to the M linear</font>

433
00:22:19,340 --> 00:22:24,050
subspace and it's<font color="#CCCCCC"> only linear</font><font color="#E5E5E5"> over the</font>

434
00:22:21,200 --> 00:22:25,840
base field so in order to<font color="#E5E5E5"> solve that we</font>

435
00:22:24,050 --> 00:22:29,960
need to introduce some<font color="#CCCCCC"> other technique</font>

436
00:22:25,840 --> 00:22:34,250
which is to<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> this hyper invertible</font>

437
00:22:29,960 --> 00:22:36,920
matrices to some related vector space

438
00:22:34,250 --> 00:22:39,590
which is<font color="#CCCCCC"> the tensor product</font><font color="#E5E5E5"> of the</font>

439
00:22:36,920 --> 00:22:42,260
extension<font color="#E5E5E5"> field with</font><font color="#CCCCCC"> V this is a vector</font>

440
00:22:39,590 --> 00:22:45,590
<font color="#E5E5E5">space over the large field and so we can</font>

441
00:22:42,260 --> 00:22:48,260
create series of random elements there

442
00:22:45,590 --> 00:22:51,500
and you may think<font color="#CCCCCC"> ok but</font><font color="#E5E5E5"> that's not what</font>

443
00:22:48,260 --> 00:22:54,480
you<font color="#E5E5E5"> wanted and so why do you do that</font>

444
00:22:51,500 --> 00:22:57,150
well the thing is<font color="#CCCCCC"> that actually this</font>

445
00:22:54,480 --> 00:23:00,630
tensor<font color="#CCCCCC"> products or the elements can be</font>

446
00:22:57,150 --> 00:23:03,750
seen as vector vectors of<font color="#E5E5E5"> M components</font>

447
00:23:00,630 --> 00:23:06,900
in V so basically you<font color="#E5E5E5"> are</font><font color="#CCCCCC"> just creating</font>

448
00:23:03,750 --> 00:23:10,590
<font color="#E5E5E5">random elements in your in your</font><font color="#CCCCCC"> subspace</font>

449
00:23:06,900 --> 00:23:15,299
in the<font color="#CCCCCC"> sub subspace V but in batches of</font>

450
00:23:10,590 --> 00:23:18,120
M elements<font color="#E5E5E5"> so that is how we solve</font><font color="#CCCCCC"> that</font>

451
00:23:15,299 --> 00:23:19,740
that's the problem<font color="#E5E5E5"> and then this gives</font>

452
00:23:18,120 --> 00:23:22,379
us the<font color="#CCCCCC"> solution for the for the problems</font>

453
00:23:19,740 --> 00:23:26,330
<font color="#CCCCCC">before all these all</font><font color="#E5E5E5"> of these would be</font>

454
00:23:22,380 --> 00:23:29,940
<font color="#E5E5E5">done in the</font><font color="#CCCCCC"> pre-processing phase and</font>

455
00:23:26,330 --> 00:23:32,399
<font color="#E5E5E5">okay so I of course don't have my time</font>

456
00:23:29,940 --> 00:23:35,070
for<font color="#E5E5E5"> more details</font><font color="#CCCCCC"> so I just</font><font color="#E5E5E5"> finished by</font>

457
00:23:32,400 --> 00:23:38,490
<font color="#E5E5E5">saying that yeah we have introduced a</font>

458
00:23:35,070 --> 00:23:40,379
methodology to<font color="#E5E5E5"> just take a protocol</font>

459
00:23:38,490 --> 00:23:44,340
multi-party computation protocol that

460
00:23:40,380 --> 00:23:48,000
works<font color="#E5E5E5"> over the large field and use it to</font>

461
00:23:44,340 --> 00:23:50,879
evaluate several<font color="#E5E5E5"> instances of of a</font>

462
00:23:48,000 --> 00:23:54,090
boolean<font color="#CCCCCC"> set circuit of a small field</font>

463
00:23:50,880 --> 00:23:57,330
<font color="#E5E5E5">then we got these results</font><font color="#CCCCCC"> that we can</font>

464
00:23:54,090 --> 00:24:01,620
remove the limitation<font color="#E5E5E5"> and on the size of</font>

465
00:23:57,330 --> 00:24:04,949
the<font color="#E5E5E5"> field in in value and here and the</font>

466
00:24:01,620 --> 00:24:06,620
<font color="#E5E5E5">main technical handle is this</font><font color="#CCCCCC"> reverse</font>

467
00:24:04,950 --> 00:24:09,480
multiplication friend embeddings

468
00:24:06,620 --> 00:24:13,168
although we also use<font color="#E5E5E5"> these other tricks</font>

469
00:24:09,480 --> 00:24:17,450
with the tensor product<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on which</font>

470
00:24:13,169 --> 00:24:21,870
we<font color="#E5E5E5"> think maybe has independent interest</font>

471
00:24:17,450 --> 00:24:24,330
and I guess natural<font color="#E5E5E5"> feature work is how</font>

472
00:24:21,870 --> 00:24:26,959
to extend<font color="#E5E5E5"> these techniques to other to</font>

473
00:24:24,330 --> 00:24:29,250
<font color="#CCCCCC">other models</font><font color="#E5E5E5"> of course the the point is</font>

474
00:24:26,960 --> 00:24:32,460
probably it can be done the<font color="#E5E5E5"> problem the</font>

475
00:24:29,250 --> 00:24:35,640
point is how much complexity<font color="#E5E5E5"> I mean to</font>

476
00:24:32,460 --> 00:24:37,470
<font color="#E5E5E5">get the right complexity not because we</font>

477
00:24:35,640 --> 00:24:40,470
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> add</font><font color="#CCCCCC"> this all these extra steps</font>

478
00:24:37,470 --> 00:24:45,390
so they should not add more<font color="#E5E5E5"> complexity</font>

479
00:24:40,470 --> 00:24:48,550
than<font color="#E5E5E5"> than necessary so yeah that's a</font>

480
00:24:45,390 --> 00:24:53,950
<font color="#CCCCCC">that's the end of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> talk questions</font>

481
00:24:48,550 --> 00:24:53,950
[Applause]

