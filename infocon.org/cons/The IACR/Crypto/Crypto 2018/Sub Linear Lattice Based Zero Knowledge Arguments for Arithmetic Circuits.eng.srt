1
00:00:05,310 --> 00:00:09,309
<font color="#CCCCCC">okay thanks very</font><font color="#E5E5E5"> much for the</font>

2
00:00:07,270 --> 00:00:12,160
introduction<font color="#CCCCCC"> so today I'm going to</font><font color="#E5E5E5"> tell</font>

3
00:00:09,309 --> 00:00:14,198
you about our new lattice based protocol

4
00:00:12,160 --> 00:00:16,630
I just thought quickly<font color="#E5E5E5"> by talking</font><font color="#CCCCCC"> about</font>

5
00:00:14,199 --> 00:00:19,119
the lattice<font color="#E5E5E5"> assumption based on protocol</font>

6
00:00:16,630 --> 00:00:22,240
so I was<font color="#E5E5E5"> there a knowledge argument is</font>

7
00:00:19,119 --> 00:00:25,960
based on this<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> the short</font><font color="#E5E5E5"> integer</font>

8
00:00:22,240 --> 00:00:29,049
solution<font color="#E5E5E5"> problem in that problem</font><font color="#CCCCCC"> the</font>

9
00:00:25,960 --> 00:00:31,390
input<font color="#CCCCCC"> is a random matrix a of a some</font>

10
00:00:29,050 --> 00:00:34,360
<font color="#CCCCCC">finite field</font><font color="#E5E5E5"> is that cute</font><font color="#CCCCCC"> it's a wide</font>

11
00:00:31,390 --> 00:00:37,540
matrix<font color="#E5E5E5"> and you can solve this</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> by</font>

12
00:00:34,360 --> 00:00:40,810
finding some short some short vector<font color="#CCCCCC"> s</font>

13
00:00:37,540 --> 00:00:43,329
which<font color="#E5E5E5"> is in the</font><font color="#CCCCCC"> kernel of a so we're</font>

14
00:00:40,810 --> 00:00:45,910
going<font color="#E5E5E5"> to make use of this problem to</font>

15
00:00:43,329 --> 00:00:48,460
<font color="#E5E5E5">create a hash function or commitment</font>

16
00:00:45,910 --> 00:00:50,800
scheme where<font color="#E5E5E5"> we just apply the public</font>

17
00:00:48,460 --> 00:00:53,739
system<font color="#CCCCCC"> Atrix</font><font color="#E5E5E5"> to a vector s in order to</font>

18
00:00:50,800 --> 00:00:55,750
hash it<font color="#CCCCCC"> or commit to it</font><font color="#E5E5E5"> so if this</font>

19
00:00:53,739 --> 00:00:58,328
<font color="#CCCCCC">problem is</font><font color="#E5E5E5"> hard to solve</font><font color="#CCCCCC"> then this gives</font>

20
00:00:55,750 --> 00:01:02,500
<font color="#E5E5E5">us a binding commitment scheme or a</font>

21
00:00:58,329 --> 00:01:04,269
collision resistant<font color="#E5E5E5"> hash this is going</font>

22
00:01:02,500 --> 00:01:06,280
to give<font color="#E5E5E5"> us a hiding commitment scheme by</font>

23
00:01:04,269 --> 00:01:08,110
the<font color="#E5E5E5"> leftover hash lemma if we choose the</font>

24
00:01:06,280 --> 00:01:10,749
last<font color="#CCCCCC"> parts</font><font color="#E5E5E5"> of our message that were</font>

25
00:01:08,110 --> 00:01:14,409
committing to randomly from some

26
00:01:10,749 --> 00:01:16,479
<font color="#E5E5E5">distribution</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> enough entropy well</font>

27
00:01:14,409 --> 00:01:19,060
<font color="#CCCCCC">The Commitments</font><font color="#E5E5E5"> washing operation is</font>

28
00:01:16,479 --> 00:01:21,840
<font color="#E5E5E5">just the matrix</font><font color="#CCCCCC"> multiplication so this</font>

29
00:01:19,060 --> 00:01:24,039
is a whole morphic commitment scheme<font color="#CCCCCC"> and</font>

30
00:01:21,840 --> 00:01:26,200
lastly<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that's important for</font><font color="#E5E5E5"> us</font>

31
00:01:24,039 --> 00:01:28,299
for our zero knowledge proof is<font color="#CCCCCC"> that</font>

32
00:01:26,200 --> 00:01:30,549
this is a compressing commitment scheme

33
00:01:28,299 --> 00:01:32,049
we can make the matrix<font color="#CCCCCC"> as wide as we</font>

34
00:01:30,549 --> 00:01:33,700
like and we can<font color="#E5E5E5"> make the message that</font>

35
00:01:32,049 --> 00:01:35,380
we're committing to as<font color="#E5E5E5"> long as we like</font>

36
00:01:33,700 --> 00:01:39,969
<font color="#E5E5E5">and we'll still get really short</font>

37
00:01:35,380 --> 00:01:43,119
succinct<font color="#E5E5E5"> commitments okay so now once</font>

38
00:01:39,969 --> 00:01:45,399
the zero-knowledge<font color="#E5E5E5"> part of the title in</font>

39
00:01:43,119 --> 00:01:48,669
zero knowledge<font color="#CCCCCC"> Bruce we have two parties</font>

40
00:01:45,399 --> 00:01:50,380
approver and<font color="#E5E5E5"> a verifier and the prover</font>

41
00:01:48,669 --> 00:01:52,959
would like to convince the<font color="#E5E5E5"> verifier</font><font color="#CCCCCC"> that</font>

42
00:01:50,380 --> 00:01:56,139
some statements<font color="#CCCCCC"> is true without</font>

43
00:01:52,959 --> 00:01:57,459
<font color="#E5E5E5">revealing any extra</font><font color="#CCCCCC"> information and in</font>

44
00:01:56,139 --> 00:01:59,229
particular the<font color="#E5E5E5"> approver might have a</font>

45
00:01:57,459 --> 00:02:02,349
<font color="#E5E5E5">secret</font><font color="#CCCCCC"> witness that they don't want to</font>

46
00:01:59,229 --> 00:02:04,060
<font color="#CCCCCC">verify it to learn about so the proven</font>

47
00:02:02,349 --> 00:02:05,829
verify will interact somehow and then

48
00:02:04,060 --> 00:02:07,630
the verify is going to accept or reject

49
00:02:05,829 --> 00:02:10,239
<font color="#E5E5E5">depending on whether they will convince</font>

50
00:02:07,630 --> 00:02:12,549
that<font color="#E5E5E5"> this</font><font color="#CCCCCC"> thing that is true or not and</font>

51
00:02:10,239 --> 00:02:14,190
this<font color="#CCCCCC"> is a ton of applications like mixed</font>

52
00:02:12,550 --> 00:02:18,050
<font color="#E5E5E5">Nets you voting and</font>

53
00:02:14,190 --> 00:02:20,820
identification<font color="#CCCCCC"> and verifiable computing</font>

54
00:02:18,050 --> 00:02:23,310
so all zero knowledge proof should

55
00:02:20,820 --> 00:02:25,049
satisfy three<font color="#E5E5E5"> basic properties we've got</font>

56
00:02:23,310 --> 00:02:27,330
<font color="#E5E5E5">a completeness so if the statement</font><font color="#CCCCCC"> is</font>

57
00:02:25,050 --> 00:02:30,810
true<font color="#E5E5E5"> the verify should always accept the</font>

58
00:02:27,330 --> 00:02:32,580
proof we've got<font color="#E5E5E5"> soundness so a dishonest</font>

59
00:02:30,810 --> 00:02:33,930
prover trying to prove at false

60
00:02:32,580 --> 00:02:35,880
statement should never convince the

61
00:02:33,930 --> 00:02:38,280
<font color="#E5E5E5">verifier and if this is only a</font>

62
00:02:35,880 --> 00:02:41,040
computational<font color="#CCCCCC"> security guarantee we get</font>

63
00:02:38,280 --> 00:02:42,800
the word argument<font color="#CCCCCC"> and we get a zero</font>

64
00:02:41,040 --> 00:02:45,060
knowledge argument just like the<font color="#E5E5E5"> title</font>

65
00:02:42,800 --> 00:02:46,290
<font color="#E5E5E5">can strengthen this a bit to knowledge</font>

66
00:02:45,060 --> 00:02:48,360
soundness meaning that the<font color="#E5E5E5"> prove</font>

67
00:02:46,290 --> 00:02:49,950
actually has to<font color="#E5E5E5"> no witness in order to</font>

68
00:02:48,360 --> 00:02:52,860
convince<font color="#E5E5E5"> the verifier</font><font color="#CCCCCC"> then we get a</font>

69
00:02:49,950 --> 00:02:55,109
<font color="#E5E5E5">proof for argument of knowledge and the</font>

70
00:02:52,860 --> 00:02:57,030
last property is zero knowledge to

71
00:02:55,110 --> 00:02:59,220
verify or anybody else who sees the

72
00:02:57,030 --> 00:03:00,660
proof can learn anything about<font color="#E5E5E5"> the</font>

73
00:02:59,220 --> 00:03:04,830
<font color="#E5E5E5">previous witness they just learned that</font>

74
00:03:00,660 --> 00:03:08,240
<font color="#CCCCCC">the statement was true okay so the last</font>

75
00:03:04,830 --> 00:03:10,680
<font color="#E5E5E5">part of the title arithmetic circuits</font>

76
00:03:08,240 --> 00:03:13,970
<font color="#CCCCCC">arithmetic circuit is a generalization</font>

77
00:03:10,680 --> 00:03:16,500
<font color="#E5E5E5">of a boolean circuit the uses gates and</font>

78
00:03:13,970 --> 00:03:19,800
compute some statement<font color="#E5E5E5"> over a finite</font>

79
00:03:16,500 --> 00:03:21,200
field let's say<font color="#CCCCCC"> zenki and as part of</font><font color="#E5E5E5"> our</font>

80
00:03:19,800 --> 00:03:23,550
zero knowledge proof<font color="#CCCCCC"> we'll be targeting</font>

81
00:03:21,200 --> 00:03:25,470
<font color="#E5E5E5">arithmetic circuits satisfiability is</font>

82
00:03:23,550 --> 00:03:28,230
the statement<font color="#E5E5E5"> so the statement is going</font>

83
00:03:25,470 --> 00:03:30,209
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be an arithmetic circuit and some</font>

84
00:03:28,230 --> 00:03:33,269
output values for the circuit which a

85
00:03:30,209 --> 00:03:35,790
finite field<font color="#E5E5E5"> values the previous witness</font>

86
00:03:33,270 --> 00:03:38,550
is<font color="#E5E5E5"> going to be some input values</font><font color="#CCCCCC"> to the</font>

87
00:03:35,790 --> 00:03:40,049
circuit<font color="#E5E5E5"> and some field elements which</font>

88
00:03:38,550 --> 00:03:42,570
give the correct<font color="#E5E5E5"> output to the circuit</font>

89
00:03:40,050 --> 00:03:43,890
and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is an attractive target because</font>

90
00:03:42,570 --> 00:03:46,829
deciding whether or<font color="#CCCCCC"> not this witness</font>

91
00:03:43,890 --> 00:03:48,839
exists is an NP complete problem<font color="#E5E5E5"> so if</font>

92
00:03:46,830 --> 00:03:51,450
we come<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> zero knowledge proof for</font>

93
00:03:48,840 --> 00:03:52,890
arithmetic<font color="#CCCCCC"> circuit satisfiability</font><font color="#E5E5E5"> then</font>

94
00:03:51,450 --> 00:03:54,780
we can<font color="#E5E5E5"> target all sorts of interesting</font>

95
00:03:52,890 --> 00:03:56,809
statements<font color="#E5E5E5"> and there are other practical</font>

96
00:03:54,780 --> 00:04:00,150
reasons why circuits are a good choice

97
00:03:56,810 --> 00:04:06,239
<font color="#E5E5E5">namely these these compilers from other</font>

98
00:04:00,150 --> 00:04:09,300
formats<font color="#E5E5E5"> into mathematics circuits so as</font>

99
00:04:06,239 --> 00:04:11,070
<font color="#E5E5E5">part of this work</font><font color="#CCCCCC"> we largely focused on</font>

100
00:04:09,300 --> 00:04:13,739
the communication cost of the protocol

101
00:04:11,070 --> 00:04:15,810
<font color="#CCCCCC">if we're dealing with an arithmetic</font>

102
00:04:13,739 --> 00:04:17,108
circuit with<font color="#E5E5E5"> n gates then we want the</font>

103
00:04:15,810 --> 00:04:19,629
size of the zero knowledge proof

104
00:04:17,108 --> 00:04:22,359
to be sublinear<font color="#E5E5E5"> compared to the number</font>

105
00:04:19,629 --> 00:04:24,699
<font color="#CCCCCC">of gates</font><font color="#E5E5E5"> in the circuit</font><font color="#CCCCCC"> we care about</font>

106
00:04:22,360 --> 00:04:27,250
cryptographic assumption we're using we

107
00:04:24,699 --> 00:04:29,889
explicitly chose the assist assumption<font color="#E5E5E5"> a</font>

108
00:04:27,250 --> 00:04:31,419
lattice assumption for<font color="#E5E5E5"> our zero</font>

109
00:04:29,889 --> 00:04:33,400
knowledge proof<font color="#E5E5E5"> because we wanted to</font>

110
00:04:31,419 --> 00:04:36,909
<font color="#E5E5E5">have</font><font color="#CCCCCC"> a protocol which was post quantum</font>

111
00:04:33,400 --> 00:04:38,888
secure<font color="#CCCCCC"> lastly there are lots of other</font>

112
00:04:36,909 --> 00:04:40,560
lattice<font color="#E5E5E5"> based sirenoid proofs that don't</font>

113
00:04:38,889 --> 00:04:43,750
target<font color="#E5E5E5"> arithmetic circuits but more</font>

114
00:04:40,560 --> 00:04:44,949
restricted<font color="#E5E5E5"> statements we wanted</font>

115
00:04:43,750 --> 00:04:48,879
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> could deal with</font><font color="#E5E5E5"> the full</font>

116
00:04:44,949 --> 00:04:50,830
generality of<font color="#CCCCCC"> arithmetic circuits but we</font>

117
00:04:48,879 --> 00:04:53,199
do also get efficient<font color="#CCCCCC"> approval</font>

118
00:04:50,830 --> 00:04:56,979
computation and verify computation<font color="#CCCCCC"> you</font>

119
00:04:53,199 --> 00:05:00,430
<font color="#CCCCCC">know principles</font><font color="#E5E5E5"> and so here's a quick</font>

120
00:04:56,979 --> 00:05:02,469
<font color="#CCCCCC">summary of</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> results so if there's an</font>

121
00:05:00,430 --> 00:05:04,150
<font color="#CCCCCC">arithmetic circuit with n gates then the</font>

122
00:05:02,469 --> 00:05:07,229
prove it can prove to the verify that

123
00:05:04,150 --> 00:05:11,198
the<font color="#E5E5E5"> circuit satisfiable using roughly</font>

124
00:05:07,229 --> 00:05:13,240
square<font color="#E5E5E5"> root n square root n bits so</font>

125
00:05:11,199 --> 00:05:15,250
that's a square root cost relative<font color="#E5E5E5"> to</font>

126
00:05:13,240 --> 00:05:17,289
the size<font color="#E5E5E5"> of the circuit</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> approver</font><font color="#CCCCCC"> of</font>

127
00:05:15,250 --> 00:05:20,050
complexity in the<font color="#E5E5E5"> verify complexity are</font>

128
00:05:17,289 --> 00:05:22,240
just<font color="#E5E5E5"> a quasi linear size of the second</font>

129
00:05:20,050 --> 00:05:26,190
and so this meets previous<font color="#E5E5E5"> works which</font>

130
00:05:22,240 --> 00:05:26,190
<font color="#E5E5E5">will had linear communication complexity</font>

131
00:05:26,550 --> 00:05:33,069
okay so how does<font color="#E5E5E5"> I would even work well</font>

132
00:05:30,879 --> 00:05:34,569
there's a typical strategy<font color="#E5E5E5"> for this sort</font>

133
00:05:33,069 --> 00:05:37,029
of<font color="#E5E5E5"> thing and that's to take the</font>

134
00:05:34,569 --> 00:05:39,099
arithmetic<font color="#CCCCCC"> circuit and turn it into a</font>

135
00:05:37,029 --> 00:05:42,159
collection<font color="#CCCCCC"> of matrix equations and some</font>

136
00:05:39,099 --> 00:05:43,719
polynomial equations<font color="#CCCCCC"> commit</font><font color="#E5E5E5"> to various</font>

137
00:05:42,159 --> 00:05:46,180
<font color="#CCCCCC">coefficients of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> polynomials</font><font color="#E5E5E5"> and</font>

138
00:05:43,719 --> 00:05:49,150
this gives<font color="#CCCCCC"> rise to zero knowledge</font>

139
00:05:46,180 --> 00:05:51,610
<font color="#E5E5E5">protocol in the end now the first parts</font>

140
00:05:49,150 --> 00:05:53,409
<font color="#E5E5E5">of this process</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is not</font><font color="#CCCCCC"> new at all</font>

141
00:05:51,610 --> 00:05:54,819
this<font color="#E5E5E5"> is featured in lots of prior works</font>

142
00:05:53,409 --> 00:05:56,560
lots of discrete logarithm based

143
00:05:54,819 --> 00:06:00,580
protocols<font color="#E5E5E5"> and different information</font>

144
00:05:56,560 --> 00:06:02,740
<font color="#CCCCCC">theoretic proofs but when we tried to</font>

145
00:06:00,580 --> 00:06:04,628
<font color="#E5E5E5">take the existing discrete logarithm</font>

146
00:06:02,740 --> 00:06:07,330
<font color="#E5E5E5">based protocols and just translate them</font>

147
00:06:04,629 --> 00:06:09,370
into<font color="#E5E5E5"> the lattice settings we ran into</font>

148
00:06:07,330 --> 00:06:11,859
various problems<font color="#E5E5E5"> so we had to add some</font>

149
00:06:09,370 --> 00:06:13,689
new stuff in we had<font color="#E5E5E5"> to do some stuff</font>

150
00:06:11,860 --> 00:06:15,129
<font color="#CCCCCC">with finite</font><font color="#E5E5E5"> field extensions and we had</font>

151
00:06:13,689 --> 00:06:17,469
to come up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a new lattice based</font>

152
00:06:15,129 --> 00:06:19,300
proof of knowledge so these bits are

153
00:06:17,469 --> 00:06:22,719
really the interesting<font color="#CCCCCC"> and</font><font color="#E5E5E5"> novel parts</font>

154
00:06:19,300 --> 00:06:25,120
of our work<font color="#CCCCCC"> okay</font>

155
00:06:22,719 --> 00:06:25,760
so first I'll talk<font color="#E5E5E5"> about our new proof</font>

156
00:06:25,120 --> 00:06:28,850
of knowledge

157
00:06:25,760 --> 00:06:32,630
and how it improves<font color="#E5E5E5"> on existing lattice</font>

158
00:06:28,850 --> 00:06:36,650
based zero knowledge proof<font color="#E5E5E5"> knowledge so</font>

159
00:06:32,630 --> 00:06:38,710
here we have a sis has function we've

160
00:06:36,650 --> 00:06:42,020
got this public matrix a and a hash<font color="#CCCCCC"> T</font>

161
00:06:38,710 --> 00:06:43,190
<font color="#E5E5E5">those are going to be the the public</font>

162
00:06:42,020 --> 00:06:45,440
<font color="#CCCCCC">parts those are going</font><font color="#E5E5E5"> to be the</font>

163
00:06:43,190 --> 00:06:47,240
statement<font color="#CCCCCC"> that prove approves the proof</font>

164
00:06:45,440 --> 00:06:49,580
is<font color="#E5E5E5"> going to demonstrate to the</font><font color="#CCCCCC"> verify</font>

165
00:06:47,240 --> 00:06:50,810
but they know sis<font color="#CCCCCC"> preimage without</font>

166
00:06:49,580 --> 00:06:54,500
leaking any information about the

167
00:06:50,810 --> 00:06:57,230
<font color="#CCCCCC">preimage actually we won't</font><font color="#E5E5E5"> do this for</font>

168
00:06:54,500 --> 00:06:59,720
<font color="#CCCCCC">just one</font><font color="#E5E5E5"> pretty image at once will do</font>

169
00:06:57,230 --> 00:07:02,300
this for lots<font color="#E5E5E5"> of sis pre images at the</font>

170
00:06:59,720 --> 00:07:03,560
<font color="#CCCCCC">same time so you can see this is a proof</font>

171
00:07:02,300 --> 00:07:06,440
of knowledge for lots of sis pretty

172
00:07:03,560 --> 00:07:08,210
images or<font color="#E5E5E5"> alternatively the way we'll</font>

173
00:07:06,440 --> 00:07:10,480
view<font color="#E5E5E5"> it as a component of possible</font>

174
00:07:08,210 --> 00:07:13,070
<font color="#E5E5E5">arithmetic circuit argument later on is</font>

175
00:07:10,480 --> 00:07:15,290
<font color="#CCCCCC">we'll take roughly a square root n</font><font color="#E5E5E5"> pre</font>

176
00:07:13,070 --> 00:07:16,790
<font color="#E5E5E5">images and each pre image will be a</font>

177
00:07:15,290 --> 00:07:18,740
vector<font color="#E5E5E5"> of</font><font color="#CCCCCC"> length the square root of n</font>

178
00:07:16,790 --> 00:07:21,440
this will prove<font color="#E5E5E5"> that the proven</font><font color="#CCCCCC"> nose and</font>

179
00:07:18,740 --> 00:07:26,330
small hashed integers are related to the

180
00:07:21,440 --> 00:07:28,100
<font color="#CCCCCC">arithmetic circuit</font><font color="#E5E5E5"> so this is going to</font>

181
00:07:26,330 --> 00:07:31,760
be better than<font color="#E5E5E5"> previous works because</font>

182
00:07:28,100 --> 00:07:35,300
often previous works needed over lambda

183
00:07:31,760 --> 00:07:37,310
<font color="#CCCCCC">squared pre images</font><font color="#E5E5E5"> in order to get some</font>

184
00:07:35,300 --> 00:07:38,660
<font color="#CCCCCC">good asymptotic efficiency of elaborate</font>

185
00:07:37,310 --> 00:07:41,150
<font color="#CCCCCC">scores they needed to wait some time</font>

186
00:07:38,660 --> 00:07:43,340
before<font color="#E5E5E5"> amortization benefits kicked in</font>

187
00:07:41,150 --> 00:07:45,429
and but<font color="#E5E5E5"> our protocols are actually</font>

188
00:07:43,340 --> 00:07:47,840
efficient<font color="#E5E5E5"> as long as you have at least</font>

189
00:07:45,430 --> 00:07:53,090
lambda pre images<font color="#E5E5E5"> they are proving to</font>

190
00:07:47,840 --> 00:07:55,070
<font color="#CCCCCC">just</font><font color="#E5E5E5"> the security parameter some other</font>

191
00:07:53,090 --> 00:07:57,409
advantages<font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> so typically</font>

192
00:07:55,070 --> 00:08:00,380
letters based<font color="#CCCCCC"> zur knowledge proofs of</font>

193
00:07:57,410 --> 00:08:01,850
<font color="#E5E5E5">knowledge for pre images have some gap</font>

194
00:08:00,380 --> 00:08:04,760
<font color="#E5E5E5">between the completeness properties and</font>

195
00:08:01,850 --> 00:08:06,530
the science properties<font color="#E5E5E5"> so first of all</font>

196
00:08:04,760 --> 00:08:08,030
if<font color="#E5E5E5"> the proven knows some pre image s</font>

197
00:08:06,530 --> 00:08:11,840
were all the entries of s<font color="#E5E5E5"> are less than</font>

198
00:08:08,030 --> 00:08:14,299
some pizza<font color="#CCCCCC"> the sanest guarantee of the</font>

199
00:08:11,840 --> 00:08:16,429
protocol<font color="#CCCCCC"> only proves the proven</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> son</font>

200
00:08:14,300 --> 00:08:18,740
vector where the entries<font color="#CCCCCC"> were less than</font>

201
00:08:16,430 --> 00:08:20,630
<font color="#CCCCCC">K times pizza so</font><font color="#E5E5E5"> recall this K the sign</font>

202
00:08:18,740 --> 00:08:23,000
is slack so like other protocols we do

203
00:08:20,630 --> 00:08:24,890
get some<font color="#CCCCCC"> Sona slack but this is not too</font>

204
00:08:23,000 --> 00:08:29,170
<font color="#E5E5E5">much just polynomial in the security</font>

205
00:08:24,890 --> 00:08:32,059
parameter some other protocols

206
00:08:29,170 --> 00:08:33,599
<font color="#CCCCCC">actually fail to extract pre images</font><font color="#E5E5E5"> to</font>

207
00:08:32,059 --> 00:08:34,978
the original hash

208
00:08:33,599 --> 00:08:38,009
instead you<font color="#E5E5E5"> can get</font><font color="#CCCCCC"> something like a</font>

209
00:08:34,979 --> 00:08:39,360
pre-image<font color="#E5E5E5"> to twice the original hash</font><font color="#CCCCCC"> we</font>

210
00:08:38,009 --> 00:08:42,930
don't have anything<font color="#E5E5E5"> like this we managed</font>

211
00:08:39,360 --> 00:08:44,970
<font color="#E5E5E5">to extract exact pre images for the for</font>

212
00:08:42,929 --> 00:08:45,870
the<font color="#E5E5E5"> SIS hashes</font><font color="#CCCCCC"> but if we do allow a</font>

213
00:08:44,970 --> 00:08:48,560
multiple like this

214
00:08:45,870 --> 00:08:52,470
and we can get more efficient protocols

215
00:08:48,560 --> 00:08:53,880
<font color="#CCCCCC">it's a list of</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> a list of all</font>

216
00:08:52,470 --> 00:08:56,550
previous<font color="#CCCCCC"> Caesar knowledge proofs in this</font>

217
00:08:53,880 --> 00:08:59,100
setting if you wanted<font color="#E5E5E5"> to prove pre</font>

218
00:08:56,550 --> 00:09:01,680
images of<font color="#CCCCCC"> M hashes</font><font color="#E5E5E5"> he required</font><font color="#CCCCCC"> oh of M</font>

219
00:08:59,100 --> 00:09:02,970
size proofs<font color="#E5E5E5"> actually I was there a</font>

220
00:09:01,680 --> 00:09:05,638
knowledge Bruce<font color="#E5E5E5"> approach scale very</font>

221
00:09:02,970 --> 00:09:07,410
differently<font color="#E5E5E5"> more like</font><font color="#CCCCCC"> over lambda the</font>

222
00:09:05,639 --> 00:09:12,899
security parameter<font color="#E5E5E5"> so this can be a</font>

223
00:09:07,410 --> 00:09:14,219
<font color="#CCCCCC">little less so to show</font><font color="#E5E5E5"> you how our</font>

224
00:09:12,899 --> 00:09:15,839
protocol works I'm<font color="#E5E5E5"> gonna start by</font>

225
00:09:14,220 --> 00:09:17,430
<font color="#CCCCCC">showing</font><font color="#E5E5E5"> you a very simplistic protocol</font>

226
00:09:15,839 --> 00:09:19,380
<font color="#E5E5E5">and showing you</font><font color="#CCCCCC"> how it</font><font color="#E5E5E5"> can be</font>

227
00:09:17,430 --> 00:09:23,310
transformed<font color="#CCCCCC"> into ours by some simple</font>

228
00:09:19,380 --> 00:09:26,699
extensions so the proof<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to</font>

229
00:09:23,310 --> 00:09:29,040
choose a<font color="#E5E5E5"> random blinding a vector</font><font color="#CCCCCC"> Y hash</font>

230
00:09:26,699 --> 00:09:31,229
that and send it over<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> verify the</font>

231
00:09:29,040 --> 00:09:33,180
verify is going to respond with a bit

232
00:09:31,230 --> 00:09:34,110
and then depending<font color="#E5E5E5"> on whether the bit</font>

233
00:09:33,180 --> 00:09:37,469
was<font color="#E5E5E5"> 0 or 1</font>

234
00:09:34,110 --> 00:09:41,730
the proof is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to add</font><font color="#E5E5E5"> secretss</font>

235
00:09:37,470 --> 00:09:44,550
<font color="#CCCCCC">preimage on to</font><font color="#E5E5E5"> the blending value</font><font color="#CCCCCC"> Y or</font>

236
00:09:41,730 --> 00:09:47,339
not send<font color="#E5E5E5"> this value to the verifier and</font>

237
00:09:44,550 --> 00:09:50,189
it verify is going to hash said and

238
00:09:47,339 --> 00:09:53,550
check the value of<font color="#CCCCCC"> Z against the hashes</font>

239
00:09:50,189 --> 00:09:56,099
<font color="#CCCCCC">are already new</font><font color="#E5E5E5"> T and W and so that's a</font>

240
00:09:53,550 --> 00:10:02,069
<font color="#E5E5E5">very simplistic zero knowledge proof of</font>

241
00:09:56,100 --> 00:10:04,019
knowledge of assists<font color="#CCCCCC"> and preimage so our</font>

242
00:10:02,069 --> 00:10:05,969
protocol<font color="#E5E5E5"> actually we want to prove that</font>

243
00:10:04,019 --> 00:10:08,579
<font color="#E5E5E5">we know lots and lots of pre images at</font>

244
00:10:05,970 --> 00:10:10,230
<font color="#CCCCCC">the</font><font color="#E5E5E5"> same time so what should the prover</font>

245
00:10:08,579 --> 00:10:11,750
do well

246
00:10:10,230 --> 00:10:14,730
the prove it does the obvious thing

247
00:10:11,750 --> 00:10:16,980
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> just having one</font><font color="#E5E5E5"> China Sea</font>

248
00:10:14,730 --> 00:10:18,899
which determines whether the secret is

249
00:10:16,980 --> 00:10:20,699
included in<font color="#E5E5E5"> set or not</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> just use lots</font>

250
00:10:18,899 --> 00:10:23,459
of challenge bits which determine

251
00:10:20,699 --> 00:10:28,758
whether a particular half assists<font color="#CCCCCC"> pre</font>

252
00:10:23,459 --> 00:10:32,849
<font color="#E5E5E5">image should be included in the Sun</font><font color="#CCCCCC"> I</font>

253
00:10:28,759 --> 00:10:34,980
won't talk about<font color="#E5E5E5"> completeness and the</font>

254
00:10:32,850 --> 00:10:36,389
zero knowledge property and because

255
00:10:34,980 --> 00:10:39,029
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are the main difficulties in the</font>

256
00:10:36,389 --> 00:10:40,480
proof but<font color="#E5E5E5"> you can sort of you can sort</font>

257
00:10:39,029 --> 00:10:42,160
of see<font color="#CCCCCC"> intuitively that this part</font>

258
00:10:40,480 --> 00:10:44,829
it's gonna have knowledge<font color="#CCCCCC"> sinus because</font>

259
00:10:42,160 --> 00:10:46,630
if the if the prover could send<font color="#E5E5E5"> a good</font>

260
00:10:44,829 --> 00:10:50,109
response to the verifier which included

261
00:10:46,630 --> 00:10:53,170
<font color="#E5E5E5">s1 and had some other values for C</font><font color="#CCCCCC"> to</font>

262
00:10:50,110 --> 00:10:54,880
<font color="#CCCCCC">2cm some other different bits if the</font>

263
00:10:53,170 --> 00:10:57,189
prover could also send some<font color="#CCCCCC"> Zed</font><font color="#E5E5E5"> prime</font>

264
00:10:54,880 --> 00:10:58,630
which didn't include s1<font color="#E5E5E5"> but had the same</font>

265
00:10:57,190 --> 00:11:01,000
values<font color="#CCCCCC"> for all the other random</font>

266
00:10:58,630 --> 00:11:02,769
challenges then as part<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> security</font>

267
00:11:01,000 --> 00:11:04,540
proof<font color="#E5E5E5"> we could subtract one of these</font>

268
00:11:02,769 --> 00:11:07,899
<font color="#E5E5E5">values from the other we could recover</font>

269
00:11:04,540 --> 00:11:09,910
<font color="#E5E5E5">s1 and this is basically enough to show</font>

270
00:11:07,899 --> 00:11:12,339
that<font color="#E5E5E5"> the protocol is knowledge sound if</font>

271
00:11:09,910 --> 00:11:15,459
<font color="#E5E5E5">we apply the same</font><font color="#CCCCCC"> idea to</font><font color="#E5E5E5"> all of these</font>

272
00:11:12,339 --> 00:11:16,779
differences<font color="#E5E5E5"> preimages as part of the</font>

273
00:11:15,459 --> 00:11:19,000
<font color="#E5E5E5">security roof we can</font><font color="#CCCCCC"> guarantee that</font>

274
00:11:16,779 --> 00:11:20,980
we're<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be able to get responses</font>

275
00:11:19,000 --> 00:11:24,449
like<font color="#CCCCCC"> this from the prover using some</font>

276
00:11:20,980 --> 00:11:28,060
kind<font color="#E5E5E5"> of probabilistic averaging argument</font>

277
00:11:24,449 --> 00:11:30,189
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> but that approach doesn't</font><font color="#E5E5E5"> need a</font>

278
00:11:28,060 --> 00:11:32,589
very<font color="#E5E5E5"> good sinus in the end we get a</font>

279
00:11:30,190 --> 00:11:35,889
<font color="#E5E5E5">terrible</font><font color="#CCCCCC"> so nice error so the simple way</font>

280
00:11:32,589 --> 00:11:38,649
around<font color="#E5E5E5"> this is just to repeat the</font>

281
00:11:35,889 --> 00:11:40,470
protocol<font color="#CCCCCC"> about a security</font><font color="#E5E5E5"> parameter</font>

282
00:11:38,649 --> 00:11:44,290
number<font color="#CCCCCC"> of times</font><font color="#E5E5E5"> so this means we use</font>

283
00:11:40,470 --> 00:11:44,829
<font color="#E5E5E5">random challenge vectors of length about</font>

284
00:11:44,290 --> 00:11:50,469
<font color="#E5E5E5">wonder</font>

285
00:11:44,829 --> 00:11:52,329
instead of random challenge<font color="#CCCCCC"> bids so if</font>

286
00:11:50,470 --> 00:11:53,910
we measure the communication<font color="#CCCCCC"> cost of</font>

287
00:11:52,329 --> 00:11:56,019
<font color="#CCCCCC">operate</font><font color="#E5E5E5"> the protocol we get in the end</font>

288
00:11:53,910 --> 00:11:57,550
against the number of pre images that

289
00:11:56,019 --> 00:11:59,230
we're proving on actually<font color="#E5E5E5"> the</font>

290
00:11:57,550 --> 00:12:01,149
communication cost of the proof scale

291
00:11:59,230 --> 00:12:03,970
<font color="#CCCCCC">logarithmic ly</font><font color="#E5E5E5"> in the number of pre</font>

292
00:12:01,149 --> 00:12:07,540
images rather than linearly<font color="#E5E5E5"> which is big</font>

293
00:12:03,970 --> 00:12:09,850
advantage of a previous protocols<font color="#E5E5E5"> when</font>

294
00:12:07,540 --> 00:12:13,240
we<font color="#E5E5E5"> use this as a small component of our</font>

295
00:12:09,850 --> 00:12:15,760
arithmetic<font color="#E5E5E5"> circuit argument then we want</font>

296
00:12:13,240 --> 00:12:18,279
<font color="#E5E5E5">to we want to minimize the total size of</font>

297
00:12:15,760 --> 00:12:20,170
<font color="#E5E5E5">all the commitments</font><font color="#CCCCCC"> or hashes and plus</font>

298
00:12:18,279 --> 00:12:23,350
the<font color="#CCCCCC"> total size of the proof</font><font color="#E5E5E5"> so when we</font>

299
00:12:20,170 --> 00:12:25,439
do<font color="#E5E5E5"> this the entire zero knowledge proof</font>

300
00:12:23,350 --> 00:12:28,060
of knowledge it's going to cost about<font color="#CCCCCC"> Oh</font>

301
00:12:25,440 --> 00:12:31,800
<font color="#CCCCCC">square root of n when we use it as a</font>

302
00:12:28,060 --> 00:12:33,939
<font color="#CCCCCC">components</font><font color="#E5E5E5"> of our circuit protocol and</font>

303
00:12:31,800 --> 00:12:38,500
so<font color="#CCCCCC"> here's a quick comparison with</font>

304
00:12:33,940 --> 00:12:39,760
previous works for us<font color="#E5E5E5"> I'll commute the</font>

305
00:12:38,500 --> 00:12:42,190
communication<font color="#CCCCCC"> cost of our proof of</font>

306
00:12:39,760 --> 00:12:44,740
knowledge<font color="#E5E5E5"> scale linearly in</font><font color="#CCCCCC"> lambda and</font>

307
00:12:42,190 --> 00:12:47,920
logarithmically<font color="#CCCCCC"> in the number of pre</font>

308
00:12:44,740 --> 00:12:48,960
images so particularly when you have<font color="#E5E5E5"> a</font>

309
00:12:47,920 --> 00:12:50,550
large number<font color="#CCCCCC"> of pre image</font>

310
00:12:48,960 --> 00:12:55,350
this can be much better<font color="#E5E5E5"> than the</font>

311
00:12:50,550 --> 00:12:57,089
previous<font color="#E5E5E5"> Bruce okay so now</font><font color="#CCCCCC"> I'll move</font><font color="#E5E5E5"> on</font>

312
00:12:55,350 --> 00:13:00,360
and<font color="#E5E5E5"> talk a little bit about how</font><font color="#CCCCCC"> our</font>

313
00:12:57,090 --> 00:13:01,740
arithmetic<font color="#E5E5E5"> circuit argument works so</font>

314
00:13:00,360 --> 00:13:04,640
I'll start just<font color="#E5E5E5"> by giving a few details</font>

315
00:13:01,740 --> 00:13:06,480
<font color="#E5E5E5">on these matrix equations and</font>

316
00:13:04,640 --> 00:13:07,830
polynomials and how the circuits

317
00:13:06,480 --> 00:13:12,480
actually encoded as<font color="#E5E5E5"> parts of the</font>

318
00:13:07,830 --> 00:13:14,910
<font color="#CCCCCC">argument so the high-level</font><font color="#E5E5E5"> structure of</font>

319
00:13:12,480 --> 00:13:17,150
the<font color="#CCCCCC"> argument</font><font color="#E5E5E5"> takes an arithmetic circuit</font>

320
00:13:14,910 --> 00:13:19,469
like the toy example on the right<font color="#E5E5E5"> and</font>

321
00:13:17,150 --> 00:13:20,970
looks at all the wire values for the

322
00:13:19,470 --> 00:13:23,130
arithmetic<font color="#E5E5E5"> circuit and splits everything</font>

323
00:13:20,970 --> 00:13:26,460
<font color="#E5E5E5">up depending on whether the</font><font color="#CCCCCC"> y-value is</font><font color="#E5E5E5"> a</font>

324
00:13:23,130 --> 00:13:29,070
left input<font color="#E5E5E5"> a right input or an output of</font>

325
00:13:26,460 --> 00:13:30,600
<font color="#E5E5E5">the particular gate and</font><font color="#CCCCCC"> you can see the</font>

326
00:13:29,070 --> 00:13:34,020
the three columns<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> corresponding</font>

327
00:13:30,600 --> 00:13:37,200
to<font color="#CCCCCC"> left-right</font><font color="#E5E5E5"> and output and then to</font>

328
00:13:34,020 --> 00:13:39,300
verify all the multiplication gates we

329
00:13:37,200 --> 00:13:41,790
can check that<font color="#E5E5E5"> the entryways product of</font>

330
00:13:39,300 --> 00:13:43,349
the two<font color="#CCCCCC"> matrices at the top is</font><font color="#E5E5E5"> equal to</font>

331
00:13:41,790 --> 00:13:45,630
the third one to<font color="#E5E5E5"> check all</font><font color="#CCCCCC"> of the</font>

332
00:13:43,350 --> 00:13:47,280
addition gates we can check<font color="#E5E5E5"> that the sum</font>

333
00:13:45,630 --> 00:13:50,880
<font color="#CCCCCC">of the two</font><font color="#E5E5E5"> matrices at the bottom is</font>

334
00:13:47,280 --> 00:13:53,160
<font color="#CCCCCC">equal to the third one now of course you</font>

335
00:13:50,880 --> 00:13:55,560
<font color="#E5E5E5">always have some output waves from some</font>

336
00:13:53,160 --> 00:13:57,839
gates<font color="#E5E5E5"> feeding into the inputs of other</font>

337
00:13:55,560 --> 00:14:00,060
gates<font color="#E5E5E5"> so we also need to check</font><font color="#CCCCCC"> that</font>

338
00:13:57,840 --> 00:14:01,880
various values across<font color="#E5E5E5"> these matrices</font><font color="#CCCCCC"> are</font>

339
00:14:00,060 --> 00:14:05,040
<font color="#CCCCCC">equal to one</font><font color="#E5E5E5"> another</font>

340
00:14:01,880 --> 00:14:06,930
so this whole<font color="#E5E5E5"> thing gives rise to a way</font>

341
00:14:05,040 --> 00:14:08,880
<font color="#E5E5E5">of checking the circuit where we</font><font color="#CCCCCC"> check</font>

342
00:14:06,930 --> 00:14:11,780
some multiplication relations<font color="#E5E5E5"> for all of</font>

343
00:14:08,880 --> 00:14:14,040
the multiplication gates and for the

344
00:14:11,780 --> 00:14:16,980
consistency checks<font color="#E5E5E5"> across the matrix and</font>

345
00:14:14,040 --> 00:14:20,780
the addition checks at<font color="#E5E5E5"> the bottom we</font>

346
00:14:16,980 --> 00:14:20,780
have some linear consistency constraints

347
00:14:21,740 --> 00:14:27,770
<font color="#E5E5E5">for a larger circuit we just do much the</font>

348
00:14:24,570 --> 00:14:31,500
<font color="#E5E5E5">same thing with larger matrices</font><font color="#CCCCCC"> and</font>

349
00:14:27,770 --> 00:14:34,199
similar<font color="#CCCCCC"> consistency checks and to get</font>

350
00:14:31,500 --> 00:14:35,460
the best<font color="#CCCCCC"> efficiency at the</font><font color="#E5E5E5"> end in the</font>

351
00:14:34,200 --> 00:14:37,290
<font color="#E5E5E5">end it turns out you want</font><font color="#CCCCCC"> to choose</font>

352
00:14:35,460 --> 00:14:43,050
matrices<font color="#CCCCCC"> which are</font><font color="#E5E5E5"> roughly a square root</font>

353
00:14:37,290 --> 00:14:45,120
n by<font color="#E5E5E5"> square root n</font><font color="#CCCCCC"> so the approach to</font>

354
00:14:43,050 --> 00:14:47,729
giving a zero<font color="#CCCCCC"> knowledge proof then for</font>

355
00:14:45,120 --> 00:14:50,520
arithmetic<font color="#CCCCCC"> circuit satisfiability is the</font>

356
00:14:47,730 --> 00:14:52,650
same in lots of previous arguments<font color="#E5E5E5"> the</font>

357
00:14:50,520 --> 00:14:54,510
prover commits to some vectors receives

358
00:14:52,650 --> 00:14:56,610
a random charge X from the verifier and

359
00:14:54,510 --> 00:14:57,520
then computes various different linear

360
00:14:56,610 --> 00:15:00,580
combinations of the

361
00:14:57,520 --> 00:15:01,990
vectors<font color="#E5E5E5"> using</font><font color="#CCCCCC"> the challenge</font><font color="#E5E5E5"> X and 1 for</font>

362
00:15:00,580 --> 00:15:04,800
<font color="#CCCCCC">the</font><font color="#E5E5E5"> verifier receives those from the</font>

363
00:15:01,990 --> 00:15:07,330
prover the verify essentially conducts a

364
00:15:04,800 --> 00:15:09,130
polynomial identity test which has

365
00:15:07,330 --> 00:15:11,080
arithmetic<font color="#CCCCCC"> circuits satisfiability</font>

366
00:15:09,130 --> 00:15:13,870
<font color="#E5E5E5">embedded into the coefficients of the</font>

367
00:15:11,080 --> 00:15:19,410
<font color="#E5E5E5">polynomial so that's a</font><font color="#CCCCCC"> specially</font>

368
00:15:13,870 --> 00:15:21,520
<font color="#CCCCCC">designed polynomial so with that in mind</font>

369
00:15:19,410 --> 00:15:23,500
<font color="#E5E5E5">here's a quick overview of what our</font>

370
00:15:21,520 --> 00:15:25,240
protocol<font color="#E5E5E5"> looks like and in the first</font>

371
00:15:23,500 --> 00:15:28,420
step<font color="#CCCCCC"> of the protocol</font><font color="#E5E5E5"> the proof is going</font>

372
00:15:25,240 --> 00:15:31,330
<font color="#E5E5E5">to commit to</font><font color="#CCCCCC"> all of the</font><font color="#E5E5E5"> wire values from</font>

373
00:15:28,420 --> 00:15:33,599
the<font color="#E5E5E5"> matrices we saw earlier and send all</font>

374
00:15:31,330 --> 00:15:35,950
the committed values to the verifier

375
00:15:33,600 --> 00:15:37,390
after<font color="#E5E5E5"> receiving a random challenge from</font>

376
00:15:35,950 --> 00:15:40,150
<font color="#E5E5E5">the verifier the proof is going</font><font color="#CCCCCC"> to</font>

377
00:15:37,390 --> 00:15:42,280
commit to<font color="#E5E5E5"> the coefficients of some</font>

378
00:15:40,150 --> 00:15:46,360
polynomial<font color="#CCCCCC"> used in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> verifiers</font>

379
00:15:42,280 --> 00:15:48,459
polynomial identity test<font color="#E5E5E5"> then we have</font>

380
00:15:46,360 --> 00:15:50,470
them have another<font color="#E5E5E5"> step where the prover</font>

381
00:15:48,460 --> 00:15:52,330
<font color="#E5E5E5">connects to some mod</font><font color="#CCCCCC"> G correction</font>

382
00:15:50,470 --> 00:15:55,540
factors I'll get into that<font color="#E5E5E5"> in a moment</font>

383
00:15:52,330 --> 00:15:57,400
<font color="#E5E5E5">and lastly the prover computes some</font>

384
00:15:55,540 --> 00:15:59,380
<font color="#E5E5E5">linear combinations of</font><font color="#CCCCCC"> there the</font>

385
00:15:57,400 --> 00:16:01,720
committed vectors<font color="#E5E5E5"> doesn't rejection</font>

386
00:15:59,380 --> 00:16:02,950
something on the result<font color="#CCCCCC"> runs a proof</font><font color="#E5E5E5"> of</font>

387
00:16:01,720 --> 00:16:04,660
knowledge for all the commitments in<font color="#E5E5E5"> the</font>

388
00:16:02,950 --> 00:16:07,510
protocol and then sends the results to

389
00:16:04,660 --> 00:16:09,939
the verify okay so these mod<font color="#E5E5E5"> P</font>

390
00:16:07,510 --> 00:16:14,950
correction factors what exactly are they

391
00:16:09,940 --> 00:16:17,860
<font color="#E5E5E5">used for well let's say we're computing</font>

392
00:16:14,950 --> 00:16:20,950
a zero knowledge proof<font color="#E5E5E5"> we're working in</font>

393
00:16:17,860 --> 00:16:22,690
a ring<font color="#CCCCCC"> said Q in which the in which we</font>

394
00:16:20,950 --> 00:16:25,900
have<font color="#CCCCCC"> assistants which we're using for</font>

395
00:16:22,690 --> 00:16:27,700
hashing and committing<font color="#E5E5E5"> we might be</font><font color="#CCCCCC"> doing</font>

396
00:16:25,900 --> 00:16:31,630
arithmetic<font color="#CCCCCC"> circuits satisfiability</font>

397
00:16:27,700 --> 00:16:34,090
<font color="#E5E5E5">modulo P for a much smaller</font><font color="#CCCCCC"> P and when</font>

398
00:16:31,630 --> 00:16:36,070
you commit to stuff<font color="#E5E5E5"> using</font><font color="#CCCCCC"> a syst based</font>

399
00:16:34,090 --> 00:16:38,140
commitment scheme<font color="#E5E5E5"> essentially everything</font>

400
00:16:36,070 --> 00:16:39,700
<font color="#E5E5E5">you're committing to is really small</font><font color="#CCCCCC"> you</font>

401
00:16:38,140 --> 00:16:41,650
can treat all the calculations you<font color="#E5E5E5"> do on</font>

402
00:16:39,700 --> 00:16:43,900
<font color="#E5E5E5">those values as calculations over the</font>

403
00:16:41,650 --> 00:16:45,610
<font color="#E5E5E5">integers so if you're trying</font><font color="#CCCCCC"> to prove</font>

404
00:16:43,900 --> 00:16:49,000
something<font color="#E5E5E5"> like arithmetic circuit</font>

405
00:16:45,610 --> 00:16:51,160
satisfiability<font color="#E5E5E5"> mod</font><font color="#CCCCCC"> p then the prover</font>

406
00:16:49,000 --> 00:16:53,050
will need<font color="#CCCCCC"> to commit to some extra</font><font color="#E5E5E5"> mode</font>

407
00:16:51,160 --> 00:16:55,360
<font color="#E5E5E5">key correction factors to turn this</font>

408
00:16:53,050 --> 00:16:57,579
integer<font color="#CCCCCC"> light computation into a</font>

409
00:16:55,360 --> 00:16:58,180
computation<font color="#E5E5E5"> more key to check some kind</font>

410
00:16:57,580 --> 00:17:02,230
of condition

411
00:16:58,180 --> 00:17:03,939
<font color="#CCCCCC">what</font><font color="#E5E5E5"> people okay</font><font color="#CCCCCC"> so at the end</font><font color="#E5E5E5"> of the</font>

412
00:17:02,230 --> 00:17:05,949
Brits<font color="#CCCCCC"> gone the verify is going to check</font>

413
00:17:03,940 --> 00:17:08,110
some some<font color="#CCCCCC"> sized bands</font><font color="#E5E5E5"> on the information</font>

414
00:17:05,949 --> 00:17:09,819
<font color="#E5E5E5">they receive and check that all</font><font color="#CCCCCC"> the</font>

415
00:17:08,109 --> 00:17:12,099
<font color="#CCCCCC">linen accommodations they received from</font>

416
00:17:09,819 --> 00:17:14,109
the prover were correctly<font color="#E5E5E5"> made up in</font>

417
00:17:12,099 --> 00:17:18,669
terms<font color="#E5E5E5"> of all of the previous committed</font>

418
00:17:14,109 --> 00:17:20,369
values so in terms of the efficiency<font color="#CCCCCC"> of</font>

419
00:17:18,670 --> 00:17:25,480
<font color="#E5E5E5">the protocol and where the hard work</font><font color="#CCCCCC"> is</font>

420
00:17:20,369 --> 00:17:26,678
<font color="#E5E5E5">the</font><font color="#CCCCCC"> prover commits to about a square</font>

421
00:17:25,480 --> 00:17:29,650
root and<font color="#E5E5E5"> vectors</font>

422
00:17:26,679 --> 00:17:31,090
maintaining<font color="#E5E5E5"> a squirt and</font><font color="#CCCCCC"> y-values</font><font color="#E5E5E5"> as</font>

423
00:17:29,650 --> 00:17:34,210
part of the first step of the protocol

424
00:17:31,090 --> 00:17:37,000
<font color="#E5E5E5">and about the same number of polynomial</font>

425
00:17:34,210 --> 00:17:38,670
coefficients in the second step<font color="#CCCCCC"> there</font>

426
00:17:37,000 --> 00:17:41,170
<font color="#E5E5E5">were just the constant</font><font color="#CCCCCC"> number of vectors</font>

427
00:17:38,670 --> 00:17:43,480
which make up these<font color="#CCCCCC"> multi correction</font>

428
00:17:41,170 --> 00:17:45,970
factors and then finally the proof is

429
00:17:43,480 --> 00:17:48,490
<font color="#E5E5E5">going to</font><font color="#CCCCCC"> send</font><font color="#E5E5E5"> like a constant</font><font color="#CCCCCC"> number of</font>

430
00:17:45,970 --> 00:17:54,250
vectors to the<font color="#CCCCCC"> verifier</font><font color="#E5E5E5"> these are linear</font>

431
00:17:48,490 --> 00:17:56,740
combinations<font color="#CCCCCC"> of commitment openings so</font>

432
00:17:54,250 --> 00:17:59,110
this<font color="#E5E5E5"> diagram just gives</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> intuition</font>

433
00:17:56,740 --> 00:18:01,510
<font color="#E5E5E5">about</font><font color="#CCCCCC"> how we choose parameters</font><font color="#E5E5E5"> to make</font>

434
00:17:59,110 --> 00:18:03,580
<font color="#E5E5E5">sure our protocols secure so at the</font>

435
00:18:01,510 --> 00:18:06,990
bottom<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> peak we might be trying</font>

436
00:18:03,580 --> 00:18:10,659
<font color="#E5E5E5">to verify</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> arithmetic circuit modulo P</font>

437
00:18:06,990 --> 00:18:11,890
since the values<font color="#CCCCCC"> P are much smaller than</font>

438
00:18:10,660 --> 00:18:13,570
the<font color="#E5E5E5"> binding space of the commitment</font>

439
00:18:11,890 --> 00:18:15,760
scheme once the<font color="#CCCCCC"> prove it has some</font>

440
00:18:13,570 --> 00:18:17,290
calculations on<font color="#E5E5E5"> these</font><font color="#CCCCCC"> values the maximum</font>

441
00:18:15,760 --> 00:18:18,910
size<font color="#E5E5E5"> of the values</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> proven</font><font color="#CCCCCC"> needs</font>

442
00:18:17,290 --> 00:18:22,540
to commit to as<font color="#E5E5E5"> part of the protocol or</font>

443
00:18:18,910 --> 00:18:24,820
a bit bigger<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then due to this Sanger</font>

444
00:18:22,540 --> 00:18:26,440
slack<font color="#E5E5E5"> appearing in an earlier slide the</font>

445
00:18:24,820 --> 00:18:28,750
maximum size<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the openings that you</font>

446
00:18:26,440 --> 00:18:31,390
<font color="#E5E5E5">can</font><font color="#CCCCCC"> guarantee</font><font color="#E5E5E5"> through knowledge</font><font color="#CCCCCC"> Simas</font>

447
00:18:28,750 --> 00:18:32,650
are a bit bigger than<font color="#CCCCCC"> that</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> for</font>

448
00:18:31,390 --> 00:18:34,420
our protocol to<font color="#CCCCCC"> be secure</font>

449
00:18:32,650 --> 00:18:36,010
we need the binding space for the<font color="#E5E5E5"> sis</font>

450
00:18:34,420 --> 00:18:39,670
commitment scheme to be a little larger

451
00:18:36,010 --> 00:18:41,559
still and so the modulus<font color="#CCCCCC"> Q for the</font>

452
00:18:39,670 --> 00:18:44,290
<font color="#E5E5E5">assistance than this has to be even</font>

453
00:18:41,559 --> 00:18:46,240
bigger<font color="#E5E5E5"> than</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but luckily this is</font>

454
00:18:44,290 --> 00:18:47,770
just a polynomial size gap between these

455
00:18:46,240 --> 00:18:49,960
two<font color="#E5E5E5"> so some back of the envelope</font>

456
00:18:47,770 --> 00:18:52,750
calculations revealed that<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> Q had</font>

457
00:18:49,960 --> 00:18:56,860
to be<font color="#E5E5E5"> about P to the power 5</font><font color="#CCCCCC"> or e to the</font>

458
00:18:52,750 --> 00:18:58,240
power<font color="#E5E5E5"> 6 something like that</font><font color="#CCCCCC"> okay there</font>

459
00:18:56,860 --> 00:19:00,850
<font color="#E5E5E5">are</font><font color="#CCCCCC"> some additional issues</font><font color="#E5E5E5"> to take care</font>

460
00:18:58,240 --> 00:19:03,220
<font color="#CCCCCC">of too</font><font color="#E5E5E5"> so this kind of protocol in</font><font color="#CCCCCC"> the</font>

461
00:19:00,850 --> 00:19:06,090
discrete logarithm setting uses

462
00:19:03,220 --> 00:19:08,350
polynomial identity testing<font color="#CCCCCC"> too and then</font>

463
00:19:06,090 --> 00:19:10,000
since the<font color="#CCCCCC"> prime that</font><font color="#E5E5E5"> you're using in the</font>

464
00:19:08,350 --> 00:19:12,250
<font color="#E5E5E5">discrete logarithm setting is is very</font>

465
00:19:10,000 --> 00:19:13,480
<font color="#E5E5E5">large the probability that</font><font color="#CCCCCC"> something</font>

466
00:19:12,250 --> 00:19:16,480
will go<font color="#CCCCCC"> wrong with the polynomial</font>

467
00:19:13,480 --> 00:19:18,280
identity test is very<font color="#E5E5E5"> small but when we</font>

468
00:19:16,480 --> 00:19:19,600
work in<font color="#CCCCCC"> assists based</font><font color="#E5E5E5"> setting the</font>

469
00:19:18,280 --> 00:19:22,178
<font color="#CCCCCC">Prime's involved are much smaller so</font>

470
00:19:19,600 --> 00:19:24,699
this isn't<font color="#E5E5E5"> the case to get around this</font>

471
00:19:22,179 --> 00:19:27,580
we<font color="#E5E5E5"> adapt some finite</font><font color="#CCCCCC"> field extension</font>

472
00:19:24,700 --> 00:19:29,130
techniques from previous work<font color="#CCCCCC"> and we</font>

473
00:19:27,580 --> 00:19:33,129
also have some clever ways of embedding

474
00:19:29,130 --> 00:19:35,380
<font color="#E5E5E5">base field operations into operations on</font>

475
00:19:33,130 --> 00:19:37,300
<font color="#E5E5E5">field extension elements this is</font>

476
00:19:35,380 --> 00:19:39,429
basically a trick to get much better

477
00:19:37,300 --> 00:19:45,280
<font color="#E5E5E5">sign</font><font color="#CCCCCC"> this as part of the polynomial I</font>

478
00:19:39,429 --> 00:19:47,410
density test so this protocol achieves

479
00:19:45,280 --> 00:19:49,629
<font color="#E5E5E5">square root communication complexity in</font>

480
00:19:47,410 --> 00:19:51,340
the end in the number<font color="#E5E5E5"> of gates in the</font>

481
00:19:49,630 --> 00:19:52,870
<font color="#CCCCCC">arithmetic circuit but</font><font color="#E5E5E5"> it's a</font>

482
00:19:51,340 --> 00:19:54,550
<font color="#E5E5E5">translation of discrete logarithm based</font>

483
00:19:52,870 --> 00:19:56,110
protocols<font color="#E5E5E5"> and the best discrete</font>

484
00:19:54,550 --> 00:19:59,050
logarithm<font color="#CCCCCC"> based protocol</font><font color="#E5E5E5"> achieves</font>

485
00:19:56,110 --> 00:20:00,760
<font color="#E5E5E5">logarithmic communication cost so this</font>

486
00:19:59,050 --> 00:20:04,260
is good result I<font color="#CCCCCC"> think but we still have</font>

487
00:20:00,760 --> 00:20:10,260
some work to do thank you very<font color="#E5E5E5"> much</font>

488
00:20:04,260 --> 00:20:10,260
[Applause]

