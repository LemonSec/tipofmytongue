1
00:00:06,319 --> 00:00:10,540
<font color="#E5E5E5">okay so hopefully</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> here</font>

2
00:00:09,340 --> 00:00:13,960
about what fully homomorphic encryption

3
00:00:10,540 --> 00:00:16,439
is all about it in a nutshell allows for

4
00:00:13,960 --> 00:00:23,340
arbitrary computation unencrypted<font color="#E5E5E5"> data</font>

5
00:00:16,439 --> 00:00:23,340
<font color="#E5E5E5">in this talk in this talk</font>

6
00:00:25,369 --> 00:00:33,830
hello<font color="#CCCCCC"> I need help oh now it's working in</font>

7
00:00:31,160 --> 00:00:36,410
this talk I'll<font color="#E5E5E5"> be focusing on linear</font>

8
00:00:33,830 --> 00:00:38,629
transformations<font color="#E5E5E5"> and more specifically on</font>

9
00:00:36,410 --> 00:00:42,069
applying a fixed<font color="#E5E5E5"> public linear</font>

10
00:00:38,629 --> 00:00:44,150
transformation to an encrypted vector

11
00:00:42,070 --> 00:00:47,960
<font color="#CCCCCC">there are many other variations you</font>

12
00:00:44,150 --> 00:00:51,290
could consider like computations

13
00:00:47,960 --> 00:00:53,300
involving an encrypted matrix<font color="#E5E5E5"> and a</font>

14
00:00:51,290 --> 00:00:55,610
plaintext vector or a cryptid matrix and

15
00:00:53,300 --> 00:00:57,199
a<font color="#E5E5E5"> an encrypted vector but I'll be</font>

16
00:00:55,610 --> 00:01:02,449
focusing on the situation where we have

17
00:00:57,199 --> 00:01:04,190
<font color="#CCCCCC">a public plaintext matrix</font><font color="#E5E5E5"> and an</font>

18
00:01:02,449 --> 00:01:07,630
encrypted vector and I'll be focusing on

19
00:01:04,190 --> 00:01:10,039
the case where we're looking<font color="#E5E5E5"> at the bgv</font>

20
00:01:07,630 --> 00:01:11,810
<font color="#E5E5E5">fully homomorphic encryption scheme a</font>

21
00:01:10,040 --> 00:01:15,520
lot of the stuff I<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> today will</font>

22
00:01:11,810 --> 00:01:15,520
actually<font color="#CCCCCC"> apply to other schemes as well</font>

23
00:01:28,119 --> 00:01:33,440
<font color="#E5E5E5">okay</font>

24
00:01:29,650 --> 00:01:35,479
so I'll present some<font color="#CCCCCC"> new algorithms</font><font color="#E5E5E5"> and</font>

25
00:01:33,440 --> 00:01:37,399
talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> their implementation the</font>

26
00:01:35,479 --> 00:01:39,409
implementations are all in<font color="#E5E5E5"> aichi</font><font color="#CCCCCC"> Lib</font>

27
00:01:37,400 --> 00:01:42,350
<font color="#E5E5E5">library</font><font color="#CCCCCC"> which shahe Levy and I have been</font>

28
00:01:39,409 --> 00:01:47,479
<font color="#E5E5E5">working on</font><font color="#CCCCCC"> for a few years we get speed</font>

29
00:01:42,350 --> 00:01:50,240
ups of up to 75 times<font color="#E5E5E5"> so that's you have</font>

30
00:01:47,479 --> 00:01:52,399
to take this maybe with a bit of

31
00:01:50,240 --> 00:01:54,919
<font color="#E5E5E5">skepticism or a grain of salt to truth</font>

32
00:01:52,399 --> 00:01:57,979
in<font color="#E5E5E5"> advertising I mean yes we</font><font color="#CCCCCC"> do get</font><font color="#E5E5E5"> a 75</font>

33
00:01:54,920 --> 00:02:00,340
times<font color="#CCCCCC"> speed-up on some parameter</font>

34
00:01:57,979 --> 00:02:03,890
settings<font color="#E5E5E5"> that do arise in practice</font>

35
00:02:00,340 --> 00:02:05,860
<font color="#E5E5E5">sometimes we get less but that's about</font>

36
00:02:03,890 --> 00:02:08,060
<font color="#CCCCCC">the best that</font><font color="#E5E5E5"> we get out of what we do</font>

37
00:02:05,860 --> 00:02:10,130
<font color="#CCCCCC">of course you could also look at</font><font color="#E5E5E5"> this</font>

38
00:02:08,060 --> 00:02:12,769
more pessimistically and say well our

39
00:02:10,130 --> 00:02:16,810
<font color="#CCCCCC">old implementation</font><font color="#E5E5E5"> was 75 times slower</font>

40
00:02:12,769 --> 00:02:21,050
than<font color="#CCCCCC"> it really should have</font><font color="#E5E5E5"> been and now</font>

41
00:02:16,810 --> 00:02:22,610
we're doing<font color="#E5E5E5"> better</font><font color="#CCCCCC"> so why this</font><font color="#E5E5E5"> problem</font>

42
00:02:21,050 --> 00:02:24,440
well one<font color="#CCCCCC"> reason that</font><font color="#E5E5E5"> we focused a lot on</font>

43
00:02:22,610 --> 00:02:27,620
<font color="#E5E5E5">this problem is that it arises in</font>

44
00:02:24,440 --> 00:02:29,269
bootstrapping<font color="#CCCCCC"> for a lot of</font><font color="#E5E5E5"> different for</font>

45
00:02:27,620 --> 00:02:32,060
there's a few different<font color="#E5E5E5"> ways of doing</font>

46
00:02:29,269 --> 00:02:33,739
bootstrapping but inevitably<font color="#E5E5E5"> it involves</font>

47
00:02:32,060 --> 00:02:35,959
some<font color="#E5E5E5"> kind of a change of basis somewhere</font>

48
00:02:33,739 --> 00:02:39,079
<font color="#CCCCCC">during the computation</font><font color="#E5E5E5"> and and that's</font>

49
00:02:35,959 --> 00:02:41,900
where this<font color="#E5E5E5"> comes up there's a new</font><font color="#CCCCCC"> way of</font>

50
00:02:39,079 --> 00:02:43,579
doing bootstrapping that we that came

51
00:02:41,900 --> 00:02:45,920
out this year<font color="#E5E5E5"> at</font><font color="#CCCCCC"> euro cribs and</font><font color="#E5E5E5"> we</font>

52
00:02:43,579 --> 00:02:48,260
<font color="#E5E5E5">implemented this and we found that most</font>

53
00:02:45,920 --> 00:02:53,809
of<font color="#CCCCCC"> the time is spent</font><font color="#E5E5E5"> performing this</font>

54
00:02:48,260 --> 00:02:57,140
<font color="#E5E5E5">change of basis and so improving the the</font>

55
00:02:53,810 --> 00:02:59,810
linear<font color="#CCCCCC"> maps is very important here this</font>

56
00:02:57,140 --> 00:03:03,048
problem<font color="#E5E5E5"> really needs to get fixed</font><font color="#CCCCCC"> and we</font>

57
00:02:59,810 --> 00:03:08,450
get a speed-up of up<font color="#CCCCCC"> to about six</font><font color="#E5E5E5"> times</font>

58
00:03:03,049 --> 00:03:10,220
for the bootstrapping as a whole because

59
00:03:08,450 --> 00:03:12,858
not<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the time is spent in</font>

60
00:03:10,220 --> 00:03:14,150
bootstrapping<font color="#E5E5E5"> on linear transformations</font>

61
00:03:12,859 --> 00:03:15,019
<font color="#E5E5E5">but a lot</font><font color="#CCCCCC"> of it is and so with</font><font color="#E5E5E5"> our</font>

62
00:03:14,150 --> 00:03:20,180
improvements we could have six times

63
00:03:15,019 --> 00:03:22,790
<font color="#E5E5E5">speed-up okay I'm gonna stop and ask for</font>

64
00:03:20,180 --> 00:03:23,450
this<font color="#E5E5E5"> problem to be fixed before I</font>

65
00:03:22,790 --> 00:03:25,370
continue

66
00:03:23,450 --> 00:03:27,970
<font color="#E5E5E5">I've wasted about five minutes on</font><font color="#CCCCCC"> a two</font>

67
00:03:25,370 --> 00:03:29,810
minute slide<font color="#E5E5E5"> because of this</font>

68
00:03:27,970 --> 00:03:32,040
[Music]

69
00:03:29,810 --> 00:03:33,599
am i<font color="#CCCCCC"> pressing the button</font><font color="#E5E5E5"> it's not</font>

70
00:03:32,040 --> 00:03:37,260
<font color="#E5E5E5">advancing when I press it and press it</font>

71
00:03:33,599 --> 00:03:39,599
like<font color="#CCCCCC"> ten times</font><font color="#E5E5E5"> okay are you doing it</font>

72
00:03:37,260 --> 00:03:48,720
something different<font color="#CCCCCC"> the left one left</font><font color="#E5E5E5"> or</font>

73
00:03:39,599 --> 00:03:51,328
right right to<font color="#E5E5E5"> advance okay okay so some</font>

74
00:03:48,720 --> 00:03:53,840
review of<font color="#CCCCCC"> the bgv crypto system</font><font color="#E5E5E5"> we're</font>

75
00:03:51,329 --> 00:03:57,000
going to be<font color="#E5E5E5"> working a lot in</font><font color="#CCCCCC"> a ring our</font>

76
00:03:53,840 --> 00:03:58,470
<font color="#CCCCCC">width which</font><font color="#E5E5E5"> is the ring of integer</font>

77
00:03:57,000 --> 00:04:01,319
polynomials modulo<font color="#E5E5E5"> is cyclotomic</font>

78
00:03:58,470 --> 00:04:03,480
polynomials<font color="#E5E5E5"> INF</font><font color="#CCCCCC"> X the</font><font color="#E5E5E5"> plain text space</font>

79
00:04:01,319 --> 00:04:05,458
is<font color="#E5E5E5"> going to be this ring of polynomials</font>

80
00:04:03,480 --> 00:04:08,190
modulus<font color="#CCCCCC"> tick atomic modulo a small prime</font>

81
00:04:05,459 --> 00:04:09,599
P<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> ciphertext space is going to</font>

82
00:04:08,190 --> 00:04:12,480
<font color="#E5E5E5">be built from we're going to be working</font>

83
00:04:09,599 --> 00:04:16,108
<font color="#CCCCCC">a lot in</font><font color="#E5E5E5"> this ring the ring of</font>

84
00:04:12,480 --> 00:04:19,649
polynomials modulo<font color="#CCCCCC"> an integer Q where Q</font>

85
00:04:16,108 --> 00:04:22,349
will be<font color="#E5E5E5"> a large number actually and and</font>

86
00:04:19,649 --> 00:04:25,650
the<font color="#CCCCCC"> ciphertext will be a pair of these</font>

87
00:04:22,349 --> 00:04:28,469
ring elements in our<font color="#E5E5E5"> Q secret key will</font>

88
00:04:25,650 --> 00:04:31,080
be<font color="#E5E5E5"> also a pair of these ring elements</font>

89
00:04:28,470 --> 00:04:33,330
where the<font color="#E5E5E5"> first one is actually the unit</font>

90
00:04:31,080 --> 00:04:37,050
and the second one is kind of<font color="#E5E5E5"> a random</font>

91
00:04:33,330 --> 00:04:38,609
<font color="#E5E5E5">element in this ring chosen with a</font>

92
00:04:37,050 --> 00:04:40,710
specific<font color="#CCCCCC"> kind of distribution though</font>

93
00:04:38,610 --> 00:04:43,979
it's a small a small<font color="#E5E5E5"> norm ring element</font>

94
00:04:40,710 --> 00:04:45,630
<font color="#CCCCCC">and if you're given a ciphertext which</font>

95
00:04:43,979 --> 00:04:47,400
<font color="#E5E5E5">is a pair of these ring elements and you</font>

96
00:04:45,630 --> 00:04:49,800
want to decrypt<font color="#E5E5E5"> you basically just take</font>

97
00:04:47,400 --> 00:04:52,020
<font color="#E5E5E5">the inner product of the</font><font color="#CCCCCC"> ciphertext and</font>

98
00:04:49,800 --> 00:04:55,139
<font color="#E5E5E5">the secret key you do everything mod Q</font>

99
00:04:52,020 --> 00:04:59,940
<font color="#CCCCCC">reducing mod Q and then what you're left</font>

100
00:04:55,139 --> 00:05:08,610
with is the<font color="#CCCCCC"> message</font><font color="#E5E5E5"> plus some noise and</font>

101
00:04:59,940 --> 00:05:14,909
the<font color="#CCCCCC"> noise is a small multiple of P just</font>

102
00:05:08,610 --> 00:05:17,159
<font color="#E5E5E5">like you did okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we're going to be</font>

103
00:05:14,909 --> 00:05:20,370
so a lot of the computation is in this

104
00:05:17,159 --> 00:05:22,039
ring our<font color="#CCCCCC"> Q and</font><font color="#E5E5E5"> I want to talk</font><font color="#CCCCCC"> about a</font>

105
00:05:20,370 --> 00:05:24,120
couple<font color="#CCCCCC"> different ways of representing</font>

106
00:05:22,039 --> 00:05:25,889
elements in<font color="#E5E5E5"> this ring because that will</font>

107
00:05:24,120 --> 00:05:28,020
<font color="#E5E5E5">really have a bearing on</font>

108
00:05:25,889 --> 00:05:28,949
algorithms<font color="#E5E5E5"> and their efficiency</font><font color="#CCCCCC"> the most</font>

109
00:05:28,020 --> 00:05:30,270
<font color="#E5E5E5">natural one would just</font><font color="#CCCCCC"> be the</font>

110
00:05:28,949 --> 00:05:32,970
coefficient representation you're

111
00:05:30,270 --> 00:05:34,770
working with<font color="#E5E5E5"> polynomials</font><font color="#CCCCCC"> and you just</font>

112
00:05:32,970 --> 00:05:39,349
<font color="#E5E5E5">write down their coefficients the other</font>

113
00:05:34,770 --> 00:05:42,030
one we call<font color="#CCCCCC"> CC RT and here we're gonna</font>

114
00:05:39,349 --> 00:05:44,400
impose the restriction that the module

115
00:05:42,030 --> 00:05:46,710
<font color="#E5E5E5">is Q is a product of small</font><font color="#CCCCCC"> Prime's</font><font color="#E5E5E5"> so</font>

116
00:05:44,400 --> 00:05:48,539
each of these small<font color="#E5E5E5"> Prime's has to</font>

117
00:05:46,710 --> 00:05:51,330
<font color="#E5E5E5">contain an end through</font><font color="#CCCCCC"> the unity and is</font>

118
00:05:48,539 --> 00:05:53,849
the working with the cyclotomic

119
00:05:51,330 --> 00:05:56,340
polynomial Phi<font color="#CCCCCC"> N and we need nth roots</font>

120
00:05:53,849 --> 00:06:00,900
of unity<font color="#E5E5E5"> in each of these small fields</font>

121
00:05:56,340 --> 00:06:02,849
<font color="#E5E5E5">and an element in our Q is going to</font><font color="#CCCCCC"> be</font>

122
00:06:00,900 --> 00:06:04,888
I'm<font color="#CCCCCC"> just</font><font color="#E5E5E5"> gonna put everything up here an</font>

123
00:06:02,849 --> 00:06:07,530
element in<font color="#E5E5E5"> our Q is gonna be</font><font color="#CCCCCC"> within</font>

124
00:06:04,889 --> 00:06:10,590
<font color="#CCCCCC">double</font><font color="#E5E5E5"> CRT we're just gonna take our</font>

125
00:06:07,530 --> 00:06:11,909
polynomial<font color="#E5E5E5"> reduce it module each of</font>

126
00:06:10,590 --> 00:06:15,330
these small<font color="#E5E5E5"> Prime's and then evaluate</font>

127
00:06:11,909 --> 00:06:16,680
<font color="#CCCCCC">each of those polynomials at these roots</font>

128
00:06:15,330 --> 00:06:19,710
of unity<font color="#E5E5E5"> and that's kind of an</font>

129
00:06:16,680 --> 00:06:22,349
equivalent<font color="#E5E5E5"> representation so that's the</font>

130
00:06:19,710 --> 00:06:24,539
double CRT representation<font color="#E5E5E5"> the nice thing</font>

131
00:06:22,349 --> 00:06:28,110
about double CRT representation now is

132
00:06:24,539 --> 00:06:30,930
that<font color="#CCCCCC"> while addition takes linear time</font>

133
00:06:28,110 --> 00:06:32,880
<font color="#E5E5E5">you just add things modulo each of these</font>

134
00:06:30,930 --> 00:06:34,849
small<font color="#CCCCCC"> Prime's</font><font color="#E5E5E5"> and so does multiplication</font>

135
00:06:32,880 --> 00:06:36,599
by a constant<font color="#E5E5E5"> also takes linear time</font>

136
00:06:34,849 --> 00:06:38,940
<font color="#E5E5E5">assuming that the constants are</font>

137
00:06:36,599 --> 00:06:41,430
themselves<font color="#CCCCCC"> represented</font><font color="#E5E5E5"> as double CRT</font>

138
00:06:38,940 --> 00:06:43,080
format<font color="#CCCCCC"> the one thing you're known is</font>

139
00:06:41,430 --> 00:06:45,960
that<font color="#E5E5E5"> switching back and forth between CC</font>

140
00:06:43,080 --> 00:06:47,669
RT and coefficient representation is is

141
00:06:45,960 --> 00:06:49,080
somewhat<font color="#E5E5E5"> expensive</font><font color="#CCCCCC"> you have to do</font>

142
00:06:47,669 --> 00:06:52,258
chinese remaindering and you have to do

143
00:06:49,080 --> 00:06:54,568
this FF FF T's fast<font color="#CCCCCC"> Fourier transforms</font>

144
00:06:52,259 --> 00:06:59,479
to<font color="#E5E5E5"> go in between the coefficient and and</font>

145
00:06:54,569 --> 00:06:59,479
the evaluation representation

146
00:07:01,669 --> 00:07:07,789
so to<font color="#CCCCCC"> multiply to</font><font color="#E5E5E5"> ciphertext in CC</font><font color="#CCCCCC"> are</font>

147
00:07:05,360 --> 00:07:08,990
<font color="#CCCCCC">to</font><font color="#E5E5E5"> representation I won't go into the</font>

148
00:07:07,789 --> 00:07:12,650
details<font color="#CCCCCC"> but basically</font><font color="#E5E5E5"> you're just</font>

149
00:07:08,990 --> 00:07:15,740
<font color="#CCCCCC">multiplying these CC RT with CC artis</font>

150
00:07:12,650 --> 00:07:17,479
which that itself<font color="#E5E5E5"> is linear time but</font>

151
00:07:15,740 --> 00:07:19,219
then you<font color="#CCCCCC"> end</font><font color="#E5E5E5"> up with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> ciphertext that's</font>

152
00:07:17,479 --> 00:07:21,498
defined with respect to a different

153
00:07:19,219 --> 00:07:25,240
secret<font color="#E5E5E5"> key so you have to do some</font>

154
00:07:21,499 --> 00:07:25,240
operation which we call key switching

155
00:07:40,130 --> 00:07:48,560
one of those<font color="#CCCCCC"> two okay so what we have to</font>

156
00:07:46,490 --> 00:07:49,880
do is encrypt this other key right we

157
00:07:48,560 --> 00:07:51,260
get<font color="#CCCCCC"> an encryption</font><font color="#E5E5E5"> with respect to the</font>

158
00:07:49,880 --> 00:07:54,080
wrong key we encrypt<font color="#CCCCCC"> this other key</font>

159
00:07:51,260 --> 00:07:55,940
under the<font color="#CCCCCC"> original public key that has</font>

160
00:07:54,080 --> 00:07:57,500
<font color="#E5E5E5">to go into the</font><font color="#CCCCCC"> public</font><font color="#E5E5E5"> information which</font>

161
00:07:55,940 --> 00:07:59,810
we call<font color="#E5E5E5"> the key switching matrix and</font>

162
00:07:57,500 --> 00:08:03,620
using this we<font color="#CCCCCC"> can convert this product</font>

163
00:07:59,810 --> 00:08:05,300
ciphertext<font color="#E5E5E5"> back to equivalent</font>

164
00:08:03,620 --> 00:08:06,590
<font color="#CCCCCC">Equipe</font><font color="#E5E5E5"> ssin under the original</font><font color="#CCCCCC"> key so</font>

165
00:08:05,300 --> 00:08:10,790
that's<font color="#E5E5E5"> called key switching which is</font>

166
00:08:06,590 --> 00:08:12,650
kind of a key part of any homomorphic

167
00:08:10,790 --> 00:08:14,720
encryption scheme<font color="#E5E5E5"> this key switching</font>

168
00:08:12,650 --> 00:08:16,130
though is expensive<font color="#E5E5E5"> I'll talk a little</font>

169
00:08:14,720 --> 00:08:18,170
<font color="#CCCCCC">bit more about it later</font><font color="#E5E5E5"> but it does</font>

170
00:08:16,130 --> 00:08:19,700
require conversions between coefficients

171
00:08:18,170 --> 00:08:22,810
and<font color="#CCCCCC"> doubles CRT</font><font color="#E5E5E5"> representations and</font>

172
00:08:19,700 --> 00:08:22,810
those are actually<font color="#CCCCCC"> somewhat expensive</font>

173
00:08:22,840 --> 00:08:27,799
now before I talk<font color="#E5E5E5"> about linear</font>

174
00:08:26,450 --> 00:08:29,840
transformations I need to<font color="#E5E5E5"> talk a little</font>

175
00:08:27,800 --> 00:08:31,940
<font color="#E5E5E5">bit about the structure</font><font color="#CCCCCC"> of the plaintext</font>

176
00:08:29,840 --> 00:08:35,120
space itself<font color="#E5E5E5"> remember</font><font color="#CCCCCC"> that the plaintext</font>

177
00:08:31,940 --> 00:08:40,520
space is the ring of polynomials<font color="#E5E5E5"> mod</font><font color="#CCCCCC"> P</font>

178
00:08:35,120 --> 00:08:43,400
<font color="#CCCCCC">and mod vayan basically</font><font color="#E5E5E5"> and if we look</font>

179
00:08:40,520 --> 00:08:46,010
<font color="#E5E5E5">at how the sickle atomic polynomial</font>

180
00:08:43,400 --> 00:08:47,660
factors mod<font color="#E5E5E5"> P then we get a bunch of</font>

181
00:08:46,010 --> 00:08:50,030
<font color="#E5E5E5">irreducible factors and by the Chinese</font>

182
00:08:47,660 --> 00:08:51,980
remainder theorem<font color="#E5E5E5"> for</font><font color="#CCCCCC"> polynomials we get</font>

183
00:08:50,030 --> 00:08:56,020
that this coefficient<font color="#CCCCCC"> that this</font>

184
00:08:51,980 --> 00:09:01,250
<font color="#E5E5E5">plaintext space is is isomorphic to a</font>

185
00:08:56,020 --> 00:09:07,220
product of finite<font color="#CCCCCC"> fields so</font><font color="#E5E5E5"> we can think</font>

186
00:09:01,250 --> 00:09:09,320
of<font color="#E5E5E5"> the plaintext space as being a vector</font>

187
00:09:07,220 --> 00:09:12,860
representing a<font color="#E5E5E5"> vector of finite field</font>

188
00:09:09,320 --> 00:09:15,680
elements so there'll be<font color="#CCCCCC"> H of them H</font>

189
00:09:12,860 --> 00:09:18,170
elements in the<font color="#CCCCCC"> vector</font><font color="#E5E5E5"> each entry is</font>

190
00:09:15,680 --> 00:09:22,040
<font color="#E5E5E5">going to be an entry in the</font><font color="#CCCCCC"> finite field</font>

191
00:09:18,170 --> 00:09:24,680
of cardinality P to the D where D times

192
00:09:22,040 --> 00:09:27,079
H<font color="#E5E5E5"> is equal to</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> n so we can view the</font>

193
00:09:24,680 --> 00:09:29,510
<font color="#E5E5E5">plaintext space as a vector in this</font>

194
00:09:27,080 --> 00:09:33,230
sense and we can<font color="#E5E5E5"> do addition and</font>

195
00:09:29,510 --> 00:09:35,420
multiplication on<font color="#CCCCCC"> plaintext</font><font color="#E5E5E5"> and also</font>

196
00:09:33,230 --> 00:09:37,220
homomorphic Leon<font color="#CCCCCC"> cipher texts</font><font color="#E5E5E5"> kind of in</font>

197
00:09:35,420 --> 00:09:43,550
<font color="#CCCCCC">parallel like this</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of in a sim</font><font color="#E5E5E5"> D</font>

198
00:09:37,220 --> 00:09:45,200
fashion in addition to<font color="#E5E5E5"> that we can we</font>

199
00:09:43,550 --> 00:09:49,910
can move data around in<font color="#CCCCCC"> between</font><font color="#E5E5E5"> the</font>

200
00:09:45,200 --> 00:09:52,430
slots<font color="#E5E5E5"> each if we look at integers J that</font>

201
00:09:49,910 --> 00:09:54,010
are relatively<font color="#E5E5E5"> prime to n then each such</font>

202
00:09:52,430 --> 00:09:55,780
integer<font color="#CCCCCC"> jada finds an autumn or</font>

203
00:09:54,010 --> 00:09:58,510
on the<font color="#E5E5E5"> plane tech space that basically</font>

204
00:09:55,780 --> 00:10:00,490
<font color="#E5E5E5">just takes the monomial X and maps it</font><font color="#CCCCCC"> to</font>

205
00:09:58,510 --> 00:10:03,420
X to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> power J and leaves all the</font>

206
00:10:00,490 --> 00:10:03,420
<font color="#E5E5E5">coefficients alone</font>

207
00:10:09,250 --> 00:10:16,509
so homomorphic evaluation is easy<font color="#CCCCCC"> just</font>

208
00:10:13,779 --> 00:10:18,129
<font color="#CCCCCC">you especially in</font><font color="#E5E5E5"> CC RC representation</font>

209
00:10:16,509 --> 00:10:22,269
<font color="#E5E5E5">just</font><font color="#CCCCCC"> to just move shuffle things around</font>

210
00:10:18,129 --> 00:10:23,889
<font color="#E5E5E5">in the CC representation but it again</font>

211
00:10:22,269 --> 00:10:26,199
<font color="#E5E5E5">just like for multiplication</font><font color="#CCCCCC"> it gives us</font>

212
00:10:23,889 --> 00:10:28,779
something<font color="#E5E5E5"> that's encrypted with respect</font>

213
00:10:26,199 --> 00:10:32,979
to the wrong secret key<font color="#E5E5E5"> and it requires</font>

214
00:10:28,779 --> 00:10:34,750
<font color="#E5E5E5">another type</font><font color="#CCCCCC"> of key switching but once</font>

215
00:10:32,980 --> 00:10:36,930
we have that then<font color="#CCCCCC"> this</font><font color="#E5E5E5"> gives us a set of</font>

216
00:10:34,750 --> 00:10:39,639
rotations<font color="#E5E5E5"> that allow us</font><font color="#CCCCCC"> to move data</font>

217
00:10:36,930 --> 00:10:42,758
between the slots<font color="#E5E5E5"> so we can do things in</font>

218
00:10:39,639 --> 00:10:44,920
the sim<font color="#CCCCCC"> D</font><font color="#E5E5E5"> fashion slot wise and then we</font>

219
00:10:42,759 --> 00:10:46,899
can also move data around in between<font color="#CCCCCC"> the</font>

220
00:10:44,920 --> 00:10:49,680
<font color="#E5E5E5">slots just to give you</font><font color="#CCCCCC"> more of</font><font color="#E5E5E5"> a</font>

221
00:10:46,899 --> 00:10:49,680
concrete<font color="#CCCCCC"> idea</font>

222
00:10:53,410 --> 00:10:58,269
here's a simple<font color="#E5E5E5"> simplified but actually</font>

223
00:10:55,629 --> 00:10:59,829
not<font color="#CCCCCC"> very typical settings</font><font color="#E5E5E5"> so if if</font><font color="#CCCCCC"> P the</font>

224
00:10:58,269 --> 00:11:02,319
thing defining the<font color="#E5E5E5"> plain text space is 1</font>

225
00:10:59,829 --> 00:11:05,319
mod n then the sickle atomic<font color="#E5E5E5"> polynomial</font>

226
00:11:02,319 --> 00:11:06,930
<font color="#E5E5E5">splits completely over</font><font color="#CCCCCC"> ZP and what we</font>

227
00:11:05,319 --> 00:11:09,878
really have<font color="#CCCCCC"> is that then in this</font><font color="#E5E5E5"> case</font>

228
00:11:06,930 --> 00:11:12,128
<font color="#CCCCCC">the plain text space is isomorphic to</font><font color="#E5E5E5"> a</font>

229
00:11:09,879 --> 00:11:15,819
vector of elements<font color="#E5E5E5"> where each element</font><font color="#CCCCCC"> is</font>

230
00:11:12,129 --> 00:11:19,000
in G<font color="#E5E5E5"> of P and then we have an</font>

231
00:11:15,819 --> 00:11:23,500
isomorphism that basically<font color="#CCCCCC"> Maps</font><font color="#E5E5E5"> a</font>

232
00:11:19,000 --> 00:11:25,720
polynomial f of<font color="#E5E5E5"> X to F evaluated at a</font>

233
00:11:23,500 --> 00:11:28,149
primitive root of unity<font color="#E5E5E5"> Omega to the</font>

234
00:11:25,720 --> 00:11:32,199
power I Omega<font color="#CCCCCC"> is some primitive and</font>

235
00:11:28,149 --> 00:11:33,879
through the unity<font color="#E5E5E5"> mod</font><font color="#CCCCCC"> P</font><font color="#E5E5E5"> and then if we</font>

236
00:11:32,199 --> 00:11:36,550
look<font color="#E5E5E5"> at this autumn morphism that sends</font>

237
00:11:33,879 --> 00:11:39,100
X to X to the<font color="#E5E5E5"> J if we're looking at this</font>

238
00:11:36,550 --> 00:11:42,449
<font color="#CCCCCC">thing as a</font><font color="#E5E5E5"> as a vector of elements what</font>

239
00:11:39,100 --> 00:11:45,399
that's doing is it's<font color="#CCCCCC"> taking the the</font>

240
00:11:42,449 --> 00:11:47,559
component of this vector<font color="#E5E5E5"> whose value</font><font color="#CCCCCC"> is</font>

241
00:11:45,399 --> 00:11:52,449
f evaluated<font color="#CCCCCC"> at Omega to the I</font><font color="#E5E5E5"> and</font>

242
00:11:47,559 --> 00:11:55,600
sending that to<font color="#E5E5E5"> the F evaluated</font><font color="#CCCCCC"> oh may</font>

243
00:11:52,449 --> 00:11:59,170
go to the power I times<font color="#E5E5E5"> J</font><font color="#CCCCCC"> so in effect</font>

244
00:11:55,600 --> 00:12:02,350
<font color="#CCCCCC">this is moving the data I guess you have</font>

245
00:11:59,170 --> 00:12:04,410
to<font color="#CCCCCC"> reverse this</font><font color="#E5E5E5"> in slot</font><font color="#CCCCCC"> IJ what used to</font>

246
00:12:02,350 --> 00:12:07,389
be in slot<font color="#E5E5E5"> I times J is now in slot</font><font color="#CCCCCC"> pi</font>

247
00:12:04,410 --> 00:12:08,290
if<font color="#E5E5E5"> P does not</font><font color="#CCCCCC"> equal</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> Mudd and then</font>

248
00:12:07,389 --> 00:12:09,670
something<font color="#E5E5E5"> else</font>

249
00:12:08,290 --> 00:12:11,230
similar to happens to this but the

250
00:12:09,670 --> 00:12:14,099
algebra<font color="#E5E5E5"> is slightly more complicated and</font>

251
00:12:11,230 --> 00:12:14,100
<font color="#E5E5E5">I won't go</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> here</font>

252
00:12:23,870 --> 00:12:28,430
the general case the set of<font color="#CCCCCC"> wrote the</font>

253
00:12:26,360 --> 00:12:30,050
set of data movements or rotations is

254
00:12:28,430 --> 00:12:33,140
kind<font color="#E5E5E5"> of determined by the structure of</font>

255
00:12:30,050 --> 00:12:35,719
the group<font color="#E5E5E5"> Zn star</font><font color="#CCCCCC"> modded out by the</font><font color="#E5E5E5"> sub</font>

256
00:12:33,140 --> 00:12:38,650
<font color="#E5E5E5">group generated</font><font color="#CCCCCC"> by P and if you look at</font>

257
00:12:35,720 --> 00:12:41,720
the you know<font color="#E5E5E5"> the structure theorem for</font>

258
00:12:38,650 --> 00:12:44,420
<font color="#E5E5E5">finite abelian groups then</font><font color="#CCCCCC"> ya you'll</font><font color="#E5E5E5"> get</font>

259
00:12:41,720 --> 00:12:46,760
some kind of<font color="#E5E5E5"> decomposition of groups</font><font color="#CCCCCC"> so</font>

260
00:12:44,420 --> 00:12:49,010
for<font color="#CCCCCC"> example maybe</font><font color="#E5E5E5"> this group structure</font>

261
00:12:46,760 --> 00:12:51,050
<font color="#CCCCCC">is you know a product of two cyclic</font>

262
00:12:49,010 --> 00:12:53,240
groups of order<font color="#E5E5E5"> three in which case we</font>

263
00:12:51,050 --> 00:12:58,930
<font color="#CCCCCC">have nine slots</font><font color="#E5E5E5"> which we can view as a</font>

264
00:12:53,240 --> 00:13:01,550
three by three array eventually<font color="#E5E5E5"> and</font>

265
00:12:58,930 --> 00:13:06,439
using the set of wrote the<font color="#CCCCCC"> the autumn</font>

266
00:13:01,550 --> 00:13:08,959
morphisms that we have<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can either</font>

267
00:13:06,440 --> 00:13:10,730
like rotate all<font color="#E5E5E5"> the rows simultaneously</font>

268
00:13:08,960 --> 00:13:14,140
by any amount<font color="#E5E5E5"> or we can rotate all the</font>

269
00:13:10,730 --> 00:13:19,360
columns<font color="#E5E5E5"> simultaneously by any amount and</font>

270
00:13:14,140 --> 00:13:19,360
<font color="#E5E5E5">more generally we</font><font color="#CCCCCC"> have</font>

271
00:13:24,820 --> 00:13:28,800
because there is there something else I

272
00:13:26,890 --> 00:13:32,890
can<font color="#E5E5E5"> press I'll happily do that</font>

273
00:13:28,800 --> 00:13:36,880
no there's<font color="#E5E5E5"> nothing up here except some</font>

274
00:13:32,890 --> 00:13:40,900
strange thing yeah<font color="#E5E5E5"> can</font><font color="#CCCCCC"> i press another</font>

275
00:13:36,880 --> 00:13:44,920
button<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> I I know when you do it it</font>

276
00:13:40,900 --> 00:13:46,470
<font color="#E5E5E5">works but when I do it it doesn't so</font>

277
00:13:44,920 --> 00:13:48,640
maybe you should<font color="#CCCCCC"> just press the button</font>

278
00:13:46,470 --> 00:13:51,150
<font color="#CCCCCC">you want watch how I'm doing it am i</font>

279
00:13:48,640 --> 00:13:51,150
doing something<font color="#E5E5E5"> wrong</font>

280
00:13:51,270 --> 00:14:00,310
see what I'm doing it<font color="#CCCCCC"> okay so I'll</font><font color="#E5E5E5"> just</font>

281
00:13:56,860 --> 00:14:01,750
keep<font color="#E5E5E5"> clicking there we go</font><font color="#CCCCCC"> so something</font>

282
00:14:00,310 --> 00:14:05,140
<font color="#E5E5E5">happened there</font><font color="#CCCCCC"> and something</font><font color="#E5E5E5"> happens in</font>

283
00:14:01,750 --> 00:14:07,000
<font color="#E5E5E5">this slide so so we have</font><font color="#CCCCCC"> an encrypted</font>

284
00:14:05,140 --> 00:14:09,490
vector with<font color="#CCCCCC"> H slots that's where we're</font>

285
00:14:07,000 --> 00:14:11,080
<font color="#E5E5E5">at</font><font color="#CCCCCC"> right so in the</font><font color="#E5E5E5"> plaintext space and</font>

286
00:14:09,490 --> 00:14:14,500
we have an encryption of this and we

287
00:14:11,080 --> 00:14:16,660
want to<font color="#E5E5E5"> apply public matrix to this</font>

288
00:14:14,500 --> 00:14:18,610
<font color="#E5E5E5">encrypted vector right so that's the the</font>

289
00:14:16,660 --> 00:14:20,469
whole<font color="#E5E5E5"> point of this talk and because I'm</font>

290
00:14:18,610 --> 00:14:21,790
I don't<font color="#CCCCCC"> know how much</font><font color="#E5E5E5"> of this I'm gonna</font>

291
00:14:20,470 --> 00:14:23,500
<font color="#E5E5E5">be able to cover</font><font color="#CCCCCC"> because I spend most of</font>

292
00:14:21,790 --> 00:14:25,240
my time<font color="#CCCCCC"> just pressing this clicker</font><font color="#E5E5E5"> so</font>

293
00:14:23,500 --> 00:14:27,130
I'll stop there's an obvious<font color="#E5E5E5"> approach</font>

294
00:14:25,240 --> 00:14:29,010
which is stupid<font color="#E5E5E5"> and you shouldn't do it</font>

295
00:14:27,130 --> 00:14:37,750
and I'm gonna<font color="#E5E5E5"> just skip over this</font><font color="#CCCCCC"> slide</font>

296
00:14:29,010 --> 00:14:39,340
<font color="#E5E5E5">as soon as I can</font><font color="#CCCCCC"> I can explain it while</font>

297
00:14:37,750 --> 00:14:40,750
I'm doing<font color="#CCCCCC"> this except I'm very mad and</font>

298
00:14:39,340 --> 00:14:43,140
so I'm<font color="#E5E5E5"> not in a</font><font color="#CCCCCC"> very good</font><font color="#E5E5E5"> mood</font><font color="#CCCCCC"> right now</font>

299
00:14:40,750 --> 00:14:43,140
<font color="#E5E5E5">okay</font>

300
00:14:43,440 --> 00:14:48,190
quickly right so here you<font color="#CCCCCC"> have a matrix</font>

301
00:14:45,760 --> 00:14:50,710
<font color="#CCCCCC">times</font><font color="#E5E5E5"> a vector somewhere in high school</font>

302
00:14:48,190 --> 00:14:52,510
or college the first<font color="#E5E5E5"> time you learned</font>

303
00:14:50,710 --> 00:14:53,500
about matrix vector multiplication is

304
00:14:52,510 --> 00:14:55,180
maybe you<font color="#E5E5E5"> learned that you can kind of</font>

305
00:14:53,500 --> 00:14:57,700
sort of<font color="#E5E5E5"> think of it as</font><font color="#CCCCCC"> multiplying a</font>

306
00:14:55,180 --> 00:14:59,079
column times<font color="#CCCCCC"> b1 plus</font><font color="#E5E5E5"> the column times b2</font>

307
00:14:57,700 --> 00:15:00,250
<font color="#E5E5E5">what's come times b3 right so you might</font>

308
00:14:59,080 --> 00:15:02,560
say well<font color="#CCCCCC"> we can do something with that</font>

309
00:15:00,250 --> 00:15:05,770
<font color="#E5E5E5">but you have to remember the the vector</font>

310
00:15:02,560 --> 00:15:07,540
<font color="#CCCCCC">is</font><font color="#E5E5E5"> encrypted right so to apply this idea</font>

311
00:15:05,770 --> 00:15:09,310
naively you'd have to like come up<font color="#CCCCCC"> with</font>

312
00:15:07,540 --> 00:15:11,770
a way<font color="#CCCCCC"> to take this</font><font color="#E5E5E5"> encrypted vector and</font>

313
00:15:09,310 --> 00:15:14,199
get three encryptions one of all<font color="#E5E5E5"> v1 one</font>

314
00:15:11,770 --> 00:15:16,990
<font color="#E5E5E5">of all v2 and one of all v3 so in kind</font>

315
00:15:14,200 --> 00:15:18,010
of the<font color="#E5E5E5"> Intel sim D lingo</font><font color="#CCCCCC"> that would be</font>

316
00:15:16,990 --> 00:15:20,110
like a broadcast

317
00:15:18,010 --> 00:15:23,230
type of thing<font color="#E5E5E5"> right so you could do that</font>

318
00:15:20,110 --> 00:15:26,260
in<font color="#E5E5E5"> fact you'd do it with order H if H is</font>

319
00:15:23,230 --> 00:15:27,790
the number<font color="#CCCCCC"> of slots rotations</font><font color="#E5E5E5"> and</font>

320
00:15:26,260 --> 00:15:29,230
multiplication by constants but it's

321
00:15:27,790 --> 00:15:32,890
<font color="#E5E5E5">overkill and it's not the most efficient</font>

322
00:15:29,230 --> 00:15:34,900
<font color="#CCCCCC">way to do it a better idea which</font>

323
00:15:32,890 --> 00:15:36,240
thankfully<font color="#CCCCCC"> Dan Bernstein's</font><font color="#E5E5E5"> straighten us</font>

324
00:15:34,900 --> 00:15:38,459
out early<font color="#E5E5E5"> on</font><font color="#CCCCCC"> in</font>

325
00:15:36,240 --> 00:15:40,139
get us not to do this<font color="#CCCCCC"> and suggested an</font>

326
00:15:38,459 --> 00:15:45,899
old<font color="#E5E5E5"> idea that was known to</font><font color="#CCCCCC"> people to</font>

327
00:15:40,139 --> 00:15:48,119
work<font color="#E5E5E5"> in the parallel computing industry</font>

328
00:15:45,899 --> 00:15:53,279
is to do something<font color="#E5E5E5"> more directly with</font>

329
00:15:48,119 --> 00:15:56,059
rotations so what we can do is we can

330
00:15:53,279 --> 00:15:58,019
<font color="#CCCCCC">start with our vector that we have and</font>

331
00:15:56,059 --> 00:16:00,118
if you look what happens when<font color="#E5E5E5"> we</font>

332
00:15:58,019 --> 00:16:04,559
multiply the diagonal component wise we

333
00:16:00,119 --> 00:16:07,170
get this vector<font color="#CCCCCC"> and then if we rotate if</font>

334
00:16:04,559 --> 00:16:11,309
we<font color="#E5E5E5"> rotate if we rotate if we rotate if</font>

335
00:16:07,170 --> 00:16:13,439
we rotate<font color="#CCCCCC"> through this</font><font color="#E5E5E5"> vector by one</font>

336
00:16:11,309 --> 00:16:14,969
position<font color="#E5E5E5"> and we then look at</font><font color="#CCCCCC"> what</font>

337
00:16:13,439 --> 00:16:16,439
<font color="#E5E5E5">happens when we multiply by kind of a</font>

338
00:16:14,970 --> 00:16:19,050
diagonal<font color="#E5E5E5"> it's saying</font><font color="#CCCCCC"> if I diagonal it</font>

339
00:16:16,439 --> 00:16:20,998
that bends around<font color="#E5E5E5"> and goes</font><font color="#CCCCCC"> around and</font>

340
00:16:19,050 --> 00:16:23,969
picks up some<font color="#E5E5E5"> other elements you</font><font color="#CCCCCC"> get you</font>

341
00:16:20,999 --> 00:16:26,249
get<font color="#E5E5E5"> this vector and then you rotate one</font>

342
00:16:23,970 --> 00:16:29,279
<font color="#E5E5E5">more time and you pick up another</font>

343
00:16:26,249 --> 00:16:31,889
diagonal<font color="#E5E5E5"> and you can check what you get</font>

344
00:16:29,279 --> 00:16:33,029
is exactly<font color="#CCCCCC"> the major expected product</font>

345
00:16:31,889 --> 00:16:35,550
<font color="#E5E5E5">that we want so you just do it with</font>

346
00:16:33,029 --> 00:16:37,470
three rotations<font color="#E5E5E5"> or really your initial</font>

347
00:16:35,550 --> 00:16:39,420
vector<font color="#E5E5E5"> plus two now</font>

348
00:16:37,470 --> 00:16:41,939
this<font color="#E5E5E5"> matrix remember is public and</font>

349
00:16:39,420 --> 00:16:44,339
<font color="#E5E5E5">everybody knows it so there's constants</font>

350
00:16:41,939 --> 00:16:46,709
and<font color="#E5E5E5"> we can just kind of compute ring</font>

351
00:16:44,339 --> 00:16:48,899
elements that we form by computing a

352
00:16:46,709 --> 00:16:50,339
chinese remaindering of of these three

353
00:16:48,899 --> 00:16:53,160
<font color="#E5E5E5">guys</font><font color="#CCCCCC"> and this diagonal and</font><font color="#E5E5E5"> then these</font>

354
00:16:50,339 --> 00:16:55,679
three<font color="#E5E5E5"> guys on the off diagonals and</font><font color="#CCCCCC"> then</font>

355
00:16:53,160 --> 00:16:58,579
we can even convert them<font color="#CCCCCC"> to CC art form</font>

356
00:16:55,679 --> 00:17:01,850
<font color="#CCCCCC">double</font><font color="#E5E5E5"> CRT format is pre-computation</font><font color="#CCCCCC"> and</font>

357
00:16:58,579 --> 00:17:06,629
<font color="#E5E5E5">and then what we're left with</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> an</font>

358
00:17:01,850 --> 00:17:07,919
algorithm<font color="#E5E5E5"> that takes about</font><font color="#CCCCCC"> H rotations</font>

359
00:17:06,630 --> 00:17:09,959
which are expensive<font color="#CCCCCC"> because they</font>

360
00:17:07,919 --> 00:17:12,510
<font color="#E5E5E5">involved key switching and change of</font>

361
00:17:09,959 --> 00:17:14,490
change the representation<font color="#CCCCCC"> and the and</font>

362
00:17:12,510 --> 00:17:19,049
these multiplication by<font color="#E5E5E5"> H multiplication</font>

363
00:17:14,490 --> 00:17:21,089
by constant<font color="#CCCCCC"> so here's a better idea very</font>

364
00:17:19,049 --> 00:17:23,459
<font color="#E5E5E5">old idea baby subgiant step</font><font color="#CCCCCC"> it's always</font>

365
00:17:21,089 --> 00:17:26,970
something to try<font color="#E5E5E5"> and in indeed it helps</font>

366
00:17:23,459 --> 00:17:29,640
a lot here<font color="#E5E5E5"> so let's define</font><font color="#CCCCCC"> row to the</font><font color="#E5E5E5"> I</font>

367
00:17:26,970 --> 00:17:32,580
as the operation of rotating a vector<font color="#E5E5E5"> V</font>

368
00:17:29,640 --> 00:17:35,190
<font color="#E5E5E5">I positions and here's what we want to</font>

369
00:17:32,580 --> 00:17:36,330
compute<font color="#E5E5E5"> based on the idea</font><font color="#CCCCCC"> the previous</font>

370
00:17:35,190 --> 00:17:38,880
slide we<font color="#CCCCCC"> just</font><font color="#E5E5E5"> want to sum over</font><font color="#CCCCCC"> all</font>

371
00:17:36,330 --> 00:17:41,070
indices<font color="#E5E5E5"> I some constant I that we pre</font>

372
00:17:38,880 --> 00:17:42,390
computed times<font color="#E5E5E5"> the ice rotation of this</font>

373
00:17:41,070 --> 00:17:45,480
vector<font color="#E5E5E5"> that's what we want to compute</font>

374
00:17:42,390 --> 00:17:47,760
and and the<font color="#CCCCCC"> CIS are</font><font color="#E5E5E5"> just constants so</font>

375
00:17:45,480 --> 00:17:49,110
the observation<font color="#CCCCCC"> is that Rho</font><font color="#E5E5E5"> is actually</font>

376
00:17:47,760 --> 00:17:49,770
an autumn<font color="#CCCCCC"> morphism on the plain text</font>

377
00:17:49,110 --> 00:17:51,149
space and we can

378
00:17:49,770 --> 00:17:52,800
exploit that fact<font color="#E5E5E5"> right so this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> what</font>

379
00:17:51,150 --> 00:18:02,880
we want<font color="#E5E5E5"> to compute</font><font color="#CCCCCC"> so let's write each</font>

380
00:17:52,800 --> 00:18:09,090
index<font color="#E5E5E5"> I as J + FK where where F and G F</font>

381
00:18:02,880 --> 00:18:11,790
and G<font color="#CCCCCC"> are like</font><font color="#E5E5E5"> square root</font><font color="#CCCCCC"> of H and J is</font>

382
00:18:09,090 --> 00:18:13,949
running up to<font color="#E5E5E5"> F and K is running up to G</font>

383
00:18:11,790 --> 00:18:17,760
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I'm just kind of like decomposing I</font>

384
00:18:13,950 --> 00:18:20,570
like this and so<font color="#E5E5E5"> this is just the same</font>

385
00:18:17,760 --> 00:18:27,960
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> and then what we're gonna do on</font>

386
00:18:20,570 --> 00:18:30,990
<font color="#CCCCCC">the next line is just pull out this this</font>

387
00:18:27,960 --> 00:18:33,780
row to the FK we pull that out of<font color="#CCCCCC"> course</font>

388
00:18:30,990 --> 00:18:35,190
<font color="#CCCCCC">that</font><font color="#E5E5E5"> messes up this constant but but</font>

389
00:18:33,780 --> 00:18:36,660
it's an autumn<font color="#CCCCCC"> morphism so we</font><font color="#E5E5E5"> have a</font>

390
00:18:35,190 --> 00:18:38,280
handle on what everything is right so

391
00:18:36,660 --> 00:18:40,470
when<font color="#CCCCCC"> we pull this out</font><font color="#E5E5E5"> we just</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font>

392
00:18:38,280 --> 00:18:43,050
<font color="#E5E5E5">replace this constant by row to the</font>

393
00:18:40,470 --> 00:18:44,610
inverse power<font color="#CCCCCC"> FK times the original</font>

394
00:18:43,050 --> 00:18:45,810
constant and<font color="#E5E5E5"> these are all constants so</font>

395
00:18:44,610 --> 00:18:48,479
they can be<font color="#E5E5E5"> pre computed so we don't</font>

396
00:18:45,810 --> 00:18:51,470
care and that's it

397
00:18:48,480 --> 00:18:51,470
so the algorithm<font color="#E5E5E5"> becomes</font>

398
00:18:57,490 --> 00:19:03,220
we first compute<font color="#E5E5E5"> powers</font><font color="#CCCCCC"> ro</font><font color="#E5E5E5"> to the J for</font>

399
00:19:01,120 --> 00:19:05,500
<font color="#E5E5E5">J running up</font><font color="#CCCCCC"> to this</font><font color="#E5E5E5"> square root of H</font>

400
00:19:03,220 --> 00:19:09,670
<font color="#CCCCCC">bound</font><font color="#E5E5E5"> those are the baby steps and then</font>

401
00:19:05,500 --> 00:19:11,980
<font color="#E5E5E5">we compute all</font><font color="#CCCCCC"> of these sums of x</font>

402
00:19:09,670 --> 00:19:14,230
constants<font color="#E5E5E5"> and add everything up and then</font>

403
00:19:11,980 --> 00:19:18,340
we<font color="#E5E5E5"> have the giant steps where we apply</font>

404
00:19:14,230 --> 00:19:24,700
Rho to the power<font color="#E5E5E5"> FK for different values</font>

405
00:19:18,340 --> 00:19:26,830
<font color="#CCCCCC">of K and</font><font color="#E5E5E5"> the cost then is square root of</font>

406
00:19:24,700 --> 00:19:29,560
H rotations for<font color="#E5E5E5"> the baby steps</font>

407
00:19:26,830 --> 00:19:32,320
step two is<font color="#CCCCCC"> just computing</font><font color="#E5E5E5"> we sell to</font>

408
00:19:29,560 --> 00:19:34,710
compute H multiplication by constants we

409
00:19:32,320 --> 00:19:37,570
don't reduce<font color="#E5E5E5"> that and step three is</font>

410
00:19:34,710 --> 00:19:38,650
square<font color="#CCCCCC"> root</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> H rotations itself so</font>

411
00:19:37,570 --> 00:19:42,250
that's<font color="#E5E5E5"> what we gain with the baby step</font>

412
00:19:38,650 --> 00:19:45,460
giant step method<font color="#E5E5E5"> I can try to cover the</font>

413
00:19:42,250 --> 00:19:48,460
other idea<font color="#CCCCCC"> that I wanted</font><font color="#E5E5E5"> to get at so</font>

414
00:19:45,460 --> 00:19:50,980
here's even a more better idea<font color="#E5E5E5"> or in</font>

415
00:19:48,460 --> 00:19:52,300
other words if<font color="#CCCCCC"> two times H rotations are</font>

416
00:19:50,980 --> 00:19:54,970
good then maybe<font color="#E5E5E5"> a single rotation</font><font color="#CCCCCC"> is</font>

417
00:19:52,300 --> 00:19:57,040
even better<font color="#E5E5E5"> so can we do</font><font color="#CCCCCC"> this at</font><font color="#E5E5E5"> the cut</font>

418
00:19:54,970 --> 00:19:59,350
<font color="#E5E5E5">equivalent that cost equivalent to a</font>

419
00:19:57,040 --> 00:20:00,940
<font color="#CCCCCC">single rotation so let's</font><font color="#E5E5E5"> look at what so</font>

420
00:19:59,350 --> 00:20:03,189
to do that<font color="#CCCCCC"> I really need</font><font color="#E5E5E5"> to dive into</font>

421
00:20:00,940 --> 00:20:07,870
what happens when we do a homomorphic

422
00:20:03,190 --> 00:20:11,620
rotation<font color="#E5E5E5"> so we want to apply a rotation</font>

423
00:20:07,870 --> 00:20:13,000
<font color="#E5E5E5">to an encrypted vector and generally</font>

424
00:20:11,620 --> 00:20:17,770
speaking<font color="#E5E5E5"> remember we want we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

425
00:20:13,000 --> 00:20:19,810
apply a bunch of rotations so so a

426
00:20:17,770 --> 00:20:21,250
cipher text is now remember what<font color="#E5E5E5"> the</font>

427
00:20:19,810 --> 00:20:23,080
cipher text<font color="#CCCCCC"> is</font><font color="#E5E5E5"> it's a pair of these ring</font>

428
00:20:21,250 --> 00:20:25,060
elements the first<font color="#E5E5E5"> thing we do is we</font>

429
00:20:23,080 --> 00:20:26,770
apply<font color="#E5E5E5"> this raw automorphism</font><font color="#CCCCCC"> autumn</font>

430
00:20:25,060 --> 00:20:28,540
<font color="#E5E5E5">morphism to the components of the cipher</font>

431
00:20:26,770 --> 00:20:31,710
text itself<font color="#E5E5E5"> and that's just shuffling</font>

432
00:20:28,540 --> 00:20:33,580
around<font color="#E5E5E5"> some data in these double CRT</font>

433
00:20:31,710 --> 00:20:34,960
representations but<font color="#E5E5E5"> now we have to do</font>

434
00:20:33,580 --> 00:20:36,580
this thing<font color="#CCCCCC"> called</font><font color="#E5E5E5"> key switching which</font>

435
00:20:34,960 --> 00:20:38,560
now I have to kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> show you a</font><font color="#CCCCCC"> little</font>

436
00:20:36,580 --> 00:20:41,560
<font color="#E5E5E5">bit what it is the first step in key</font>

437
00:20:38,560 --> 00:20:42,909
switching is it's hot<font color="#CCCCCC"> you really have to</font>

438
00:20:41,560 --> 00:20:44,409
understand<font color="#E5E5E5"> what all the issues are with</font>

439
00:20:42,910 --> 00:20:45,580
<font color="#E5E5E5">in terms of managing the noise and</font>

440
00:20:44,410 --> 00:20:47,380
everything<font color="#E5E5E5"> in a homomorphic encryption</font>

441
00:20:45,580 --> 00:20:50,379
scheme<font color="#E5E5E5"> but the first thing</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> need to do</font>

442
00:20:47,380 --> 00:20:53,560
is is is take the<font color="#CCCCCC"> components c1 or</font>

443
00:20:50,380 --> 00:20:55,690
<font color="#E5E5E5">actually c1 prime after we've applied</font>

444
00:20:53,560 --> 00:20:59,800
the autumn<font color="#CCCCCC"> morphism</font><font color="#E5E5E5"> to it and</font><font color="#CCCCCC"> decompose</font>

445
00:20:55,690 --> 00:21:02,080
it as a<font color="#CCCCCC"> sum</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> into digits so we're</font>

446
00:20:59,800 --> 00:21:04,659
gonna you<font color="#CCCCCC"> can think</font><font color="#E5E5E5"> of our sub K is</font><font color="#CCCCCC"> you</font>

447
00:21:02,080 --> 00:21:06,879
know powers of some number and we just

448
00:21:04,660 --> 00:21:09,880
want to decompose it into digits

449
00:21:06,880 --> 00:21:13,840
so each coefficient<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> polynomials</font>

450
00:21:09,880 --> 00:21:15,760
gets<font color="#E5E5E5"> written as a sum</font><font color="#CCCCCC"> of digits so that</font>

451
00:21:13,840 --> 00:21:19,149
each digit is small enough<font color="#E5E5E5"> so that we</font>

452
00:21:15,760 --> 00:21:20,200
can manage the noise appropriately<font color="#E5E5E5"> and</font>

453
00:21:19,150 --> 00:21:22,840
this is<font color="#E5E5E5"> expensive</font>

454
00:21:20,200 --> 00:21:24,040
this requires<font color="#CCCCCC"> CC</font><font color="#E5E5E5"> RT the coefficient</font>

455
00:21:22,840 --> 00:21:26,290
conversion because the only way<font color="#CCCCCC"> we</font>

456
00:21:24,040 --> 00:21:27,670
really<font color="#E5E5E5"> know how</font><font color="#CCCCCC"> to do this breaking</font><font color="#E5E5E5"> in</font>

457
00:21:26,290 --> 00:21:31,030
<font color="#E5E5E5">the digit stuff is we really need things</font>

458
00:21:27,670 --> 00:21:32,950
in coefficient form and then once we

459
00:21:31,030 --> 00:21:34,510
have that then<font color="#E5E5E5"> we</font><font color="#CCCCCC"> take the public</font>

460
00:21:32,950 --> 00:21:36,190
<font color="#E5E5E5">information is key switching matrices</font>

461
00:21:34,510 --> 00:21:39,400
that<font color="#E5E5E5"> are part of the public key really</font>

462
00:21:36,190 --> 00:21:41,950
and we need to take the digits that<font color="#CCCCCC"> we</font>

463
00:21:39,400 --> 00:21:45,130
<font color="#E5E5E5">computed and just apply some linear maps</font>

464
00:21:41,950 --> 00:21:47,830
to them some some simple public<font color="#E5E5E5"> linear</font>

465
00:21:45,130 --> 00:21:50,440
maps<font color="#E5E5E5"> everything here now you can assume</font>

466
00:21:47,830 --> 00:21:52,810
is in<font color="#E5E5E5"> CC RT representation so it's fast</font>

467
00:21:50,440 --> 00:22:00,460
and cheap so the expensive<font color="#E5E5E5"> part is just</font>

468
00:21:52,810 --> 00:22:02,050
<font color="#E5E5E5">this part here</font><font color="#CCCCCC"> so the idea</font><font color="#E5E5E5"> is to</font><font color="#CCCCCC"> just</font>

469
00:22:00,460 --> 00:22:03,850
refactor these<font color="#E5E5E5"> three steps basically</font>

470
00:22:02,050 --> 00:22:06,159
<font color="#E5E5E5">we're just</font><font color="#CCCCCC"> gonna swap the first two</font>

471
00:22:03,850 --> 00:22:07,480
steps by using<font color="#E5E5E5"> the fact again</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> row</font>

472
00:22:06,160 --> 00:22:09,100
<font color="#E5E5E5">to the eyes in autumn orphism that</font>

473
00:22:07,480 --> 00:22:11,320
doesn't<font color="#E5E5E5"> change the norm of anything by</font>

474
00:22:09,100 --> 00:22:12,909
very much<font color="#E5E5E5"> so what we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> do is</font>

475
00:22:11,320 --> 00:22:16,510
we're gonna initially do the key

476
00:22:12,910 --> 00:22:18,610
switching with part<font color="#E5E5E5"> one which is the</font>

477
00:22:16,510 --> 00:22:20,379
break in the<font color="#E5E5E5"> digit part we're gonna do</font>

478
00:22:18,610 --> 00:22:24,070
that to<font color="#E5E5E5"> the original ciphertext instead</font>

479
00:22:20,380 --> 00:22:25,930
of<font color="#E5E5E5"> to the rotated ciphertext and so so</font>

480
00:22:24,070 --> 00:22:28,689
we get bad<font color="#E5E5E5"> so we just break this</font><font color="#CCCCCC"> into</font>

481
00:22:25,930 --> 00:22:30,370
digits<font color="#E5E5E5"> that's expensive but then then</font>

482
00:22:28,690 --> 00:22:34,660
we're gonna do<font color="#CCCCCC"> the raw automorphism step</font>

483
00:22:30,370 --> 00:22:39,580
applied<font color="#E5E5E5"> to the individual digits that</font><font color="#CCCCCC"> we</font>

484
00:22:34,660 --> 00:22:41,590
got from step one step<font color="#E5E5E5"> a here</font><font color="#CCCCCC"> so we're</font>

485
00:22:39,580 --> 00:22:42,939
gonna do the cheap raw automorphism step

486
00:22:41,590 --> 00:22:45,669
there and then we're gonna do<font color="#E5E5E5"> the key</font>

487
00:22:42,940 --> 00:22:47,200
switching step<font color="#E5E5E5"> just</font><font color="#CCCCCC"> as before and this</font>

488
00:22:45,670 --> 00:22:49,540
<font color="#CCCCCC">is equivalent</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> of the fact that</font>

489
00:22:47,200 --> 00:22:50,050
this<font color="#E5E5E5"> row to the</font><font color="#CCCCCC"> I actually</font><font color="#E5E5E5"> is an autumn</font>

490
00:22:49,540 --> 00:22:55,780
orphism

491
00:22:50,050 --> 00:22:57,250
on on the ring and and and it<font color="#E5E5E5"> doesn't</font>

492
00:22:55,780 --> 00:22:58,629
<font color="#CCCCCC">change the norm very much so all the</font>

493
00:22:57,250 --> 00:23:02,500
<font color="#E5E5E5">things you need to make the key</font>

494
00:22:58,630 --> 00:23:07,870
switching work still work here<font color="#CCCCCC"> why is</font>

495
00:23:02,500 --> 00:23:09,820
this better because we can<font color="#CCCCCC"> perform this</font>

496
00:23:07,870 --> 00:23:12,310
first expensive step just once for many

497
00:23:09,820 --> 00:23:14,169
rotations<font color="#CCCCCC"> row to the</font><font color="#E5E5E5"> I the only thing I</font>

498
00:23:12,310 --> 00:23:16,200
<font color="#E5E5E5">really used row to the</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> is this guy up</font>

499
00:23:14,170 --> 00:23:16,200
here

500
00:23:18,440 --> 00:23:27,270
and so we just<font color="#CCCCCC"> can do this one so if we</font>

501
00:23:24,210 --> 00:23:28,680
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> apply many powers of this row we</font>

502
00:23:27,270 --> 00:23:30,840
can<font color="#CCCCCC"> just do this</font><font color="#E5E5E5"> break in two digits</font>

503
00:23:28,680 --> 00:23:33,090
once<font color="#E5E5E5"> that's independent of row to the I</font>

504
00:23:30,840 --> 00:23:37,740
and then these<font color="#E5E5E5"> other parts are cheap so</font>

505
00:23:33,090 --> 00:23:39,780
<font color="#CCCCCC">they should actually</font><font color="#E5E5E5"> we can do those for</font>

506
00:23:37,740 --> 00:23:41,430
each individual<font color="#E5E5E5"> row to the I so in the</font>

507
00:23:39,780 --> 00:23:44,720
paper we call this idea hoisting just

508
00:23:41,430 --> 00:23:47,310
because compiler writers<font color="#E5E5E5"> called this</font>

509
00:23:44,720 --> 00:23:51,150
optimization<font color="#CCCCCC"> of pulling</font><font color="#E5E5E5"> out of a loop</font><font color="#CCCCCC"> a</font>

510
00:23:47,310 --> 00:23:52,679
common<font color="#E5E5E5"> computation outside the loop kind</font>

511
00:23:51,150 --> 00:23:53,790
of hoist you hoist the computation

512
00:23:52,680 --> 00:23:56,280
outside of a loop so that's what we're

513
00:23:53,790 --> 00:23:59,040
doing<font color="#CCCCCC"> here so for a given encryption</font><font color="#E5E5E5"> of</font>

514
00:23:56,280 --> 00:24:02,670
a vector V we<font color="#CCCCCC"> can compute an encryption</font>

515
00:23:59,040 --> 00:24:06,360
of many<font color="#E5E5E5"> rotations of V which is one</font>

516
00:24:02,670 --> 00:24:09,180
<font color="#E5E5E5">expensive step and H if we need to get</font><font color="#CCCCCC"> H</font>

517
00:24:06,360 --> 00:24:12,000
rotations<font color="#E5E5E5"> H cheap steps that's the</font>

518
00:24:09,180 --> 00:24:14,070
takeaway<font color="#E5E5E5"> so if we apply</font><font color="#CCCCCC"> this to matrix</font>

519
00:24:12,000 --> 00:24:15,930
multiplication on the one hand this<font color="#CCCCCC"> is</font>

520
00:24:14,070 --> 00:24:18,620
going to be faster than<font color="#E5E5E5"> the basic method</font>

521
00:24:15,930 --> 00:24:21,090
that uses<font color="#CCCCCC"> H rotations</font><font color="#E5E5E5"> because now</font>

522
00:24:18,620 --> 00:24:23,340
computing all these<font color="#E5E5E5"> eight rotations just</font>

523
00:24:21,090 --> 00:24:25,919
requires one expensive step in a cheap

524
00:24:23,340 --> 00:24:27,629
steps on the other<font color="#CCCCCC"> hand it actually may</font>

525
00:24:25,920 --> 00:24:29,520
be<font color="#E5E5E5"> slower than the baby step giant step</font>

526
00:24:27,630 --> 00:24:32,280
thing just because we're doing<font color="#E5E5E5"> these H</font>

527
00:24:29,520 --> 00:24:35,190
cheap things they're cheap<font color="#CCCCCC"> but they're</font>

528
00:24:32,280 --> 00:24:38,610
not freeze<font color="#E5E5E5"> and when in doing square root</font>

529
00:24:35,190 --> 00:24:41,460
of<font color="#CCCCCC"> H expensive things can be faster than</font>

530
00:24:38,610 --> 00:24:42,929
doing<font color="#CCCCCC"> H cheap things</font><font color="#E5E5E5"> depending on the</font>

531
00:24:41,460 --> 00:24:44,910
relative<font color="#CCCCCC"> cost of everything and in</font>

532
00:24:42,930 --> 00:24:47,160
practice you have<font color="#E5E5E5"> to look at really</font><font color="#CCCCCC"> the</font>

533
00:24:44,910 --> 00:24:49,440
constants in<font color="#CCCCCC"> the running time that</font><font color="#E5E5E5"> come</font>

534
00:24:47,160 --> 00:24:51,390
in and for very large<font color="#E5E5E5"> H this can be</font>

535
00:24:49,440 --> 00:24:53,370
slower than than the baby step down step

536
00:24:51,390 --> 00:24:55,410
method but on the other<font color="#CCCCCC"> hand we can</font>

537
00:24:53,370 --> 00:24:56,790
<font color="#E5E5E5">combine both techniques and do the baby</font>

538
00:24:55,410 --> 00:24:58,440
step<font color="#CCCCCC"> science step in the first</font><font color="#E5E5E5"> step</font>

539
00:24:56,790 --> 00:25:00,030
where we compute the baby steps<font color="#E5E5E5"> we can</font>

540
00:24:58,440 --> 00:25:03,900
definitely use<font color="#E5E5E5"> the hoisting technique to</font>

541
00:25:00,030 --> 00:25:06,629
<font color="#E5E5E5">to to compute to hoist</font><font color="#CCCCCC"> all of these</font>

542
00:25:03,900 --> 00:25:09,510
rotations out so and<font color="#E5E5E5"> we save a factor of</font>

543
00:25:06,630 --> 00:25:14,310
<font color="#E5E5E5">two so instead of two times H rotations</font>

544
00:25:09,510 --> 00:25:15,770
we get<font color="#CCCCCC"> H</font><font color="#E5E5E5"> rotations so that's it thank</font>

545
00:25:14,310 --> 00:25:21,750
<font color="#CCCCCC">you</font>

546
00:25:15,770 --> 00:25:21,750
[Applause]

