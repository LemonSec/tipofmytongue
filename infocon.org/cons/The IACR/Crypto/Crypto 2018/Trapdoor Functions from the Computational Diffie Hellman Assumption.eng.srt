1
00:00:05,710 --> 00:00:10,670
<font color="#E5E5E5">all right thank you for</font><font color="#CCCCCC"> the introduction</font>

2
00:00:08,809 --> 00:00:13,489
<font color="#CCCCCC">hi</font><font color="#E5E5E5"> everyone welcome to</font><font color="#CCCCCC"> last talk of</font><font color="#E5E5E5"> the</font>

3
00:00:10,670 --> 00:00:15,260
conference<font color="#CCCCCC"> and thanks for</font><font color="#E5E5E5"> sticking</font>

4
00:00:13,490 --> 00:00:17,660
<font color="#CCCCCC">around and</font><font color="#E5E5E5"> my name is</font><font color="#CCCCCC"> Mohammed Haji</font>

5
00:00:15,260 --> 00:00:19,460
<font color="#CCCCCC">obody and I want to tell you about a</font>

6
00:00:17,660 --> 00:00:21,739
joint piece of work with<font color="#CCCCCC"> San John Court</font>

7
00:00:19,460 --> 00:00:22,669
on a construction of<font color="#CCCCCC"> trapdoor functions</font>

8
00:00:21,739 --> 00:00:24,070
from the computational diffie-hellman

9
00:00:22,669 --> 00:00:26,840
assumption

10
00:00:24,070 --> 00:00:28,250
<font color="#E5E5E5">okay so chapter functions you have heard</font>

11
00:00:26,840 --> 00:00:31,160
about<font color="#E5E5E5"> them probably</font><font color="#CCCCCC"> a lot during</font><font color="#E5E5E5"> this</font>

12
00:00:28,250 --> 00:00:32,689
conference<font color="#E5E5E5"> and they are a fundamental</font>

13
00:00:31,160 --> 00:00:36,440
primitive<font color="#E5E5E5"> in crypto they were first</font>

14
00:00:32,689 --> 00:00:39,410
introduced in a landmark landmark paper

15
00:00:36,440 --> 00:00:41,360
by<font color="#E5E5E5"> defeat and Hellman in 1976 which sort</font>

16
00:00:39,410 --> 00:00:44,779
<font color="#E5E5E5">of fun developed the foundations of what</font>

17
00:00:41,360 --> 00:00:47,420
we now call<font color="#CCCCCC"> public key crypto so another</font>

18
00:00:44,780 --> 00:00:49,520
fundamental primitive in<font color="#E5E5E5"> cryptography is</font>

19
00:00:47,420 --> 00:00:55,640
<font color="#CCCCCC">the public</font><font color="#E5E5E5"> key encryption that was first</font>

20
00:00:49,520 --> 00:00:59,110
<font color="#E5E5E5">design in the famous RSA paper in 1970s</font>

21
00:00:55,640 --> 00:01:03,110
and they were and<font color="#E5E5E5"> they</font><font color="#CCCCCC"> were later</font>

22
00:00:59,110 --> 00:01:07,579
rigorously defined by<font color="#CCCCCC"> young goldwasser</font>

23
00:01:03,110 --> 00:01:09,109
and<font color="#CCCCCC"> Mikkeli in 1982 so in order for</font><font color="#E5E5E5"> me</font>

24
00:01:07,579 --> 00:01:13,428
<font color="#CCCCCC">to</font><font color="#E5E5E5"> muster up</font><font color="#CCCCCC"> the stage and</font><font color="#E5E5E5"> notation for</font>

25
00:01:09,109 --> 00:01:15,048
<font color="#CCCCCC">this talk with me quickly go over these</font>

26
00:01:13,429 --> 00:01:17,899
two notions<font color="#E5E5E5"> I'm sure that all of you</font><font color="#CCCCCC"> are</font>

27
00:01:15,049 --> 00:01:21,950
familiar<font color="#CCCCCC"> with</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> just to set up</font><font color="#E5E5E5"> the</font>

28
00:01:17,899 --> 00:01:24,889
notation public encryption as you all

29
00:01:21,950 --> 00:01:27,289
know<font color="#E5E5E5"> now as as you all know is given by</font>

30
00:01:24,889 --> 00:01:28,880
three algorithms<font color="#CCCCCC"> G E and D the key</font>

31
00:01:27,289 --> 00:01:31,039
generation<font color="#E5E5E5"> encryption and decryption</font>

32
00:01:28,880 --> 00:01:32,600
algorithm where the key generation

33
00:01:31,039 --> 00:01:34,340
algorithm gives us<font color="#CCCCCC"> a public key and</font>

34
00:01:32,600 --> 00:01:35,509
secret<font color="#CCCCCC"> key and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can use the</font>

35
00:01:34,340 --> 00:01:37,459
encryption algorithm to encrypt a

36
00:01:35,509 --> 00:01:38,630
<font color="#CCCCCC">plaintiff message em to a public key</font><font color="#E5E5E5"> PK</font>

37
00:01:37,459 --> 00:01:40,429
using some randomness or to get a

38
00:01:38,630 --> 00:01:41,658
<font color="#E5E5E5">ciphertext C and you can use the</font>

39
00:01:40,429 --> 00:01:43,249
decryption<font color="#E5E5E5"> algorithm to decrypt the</font>

40
00:01:41,659 --> 00:01:45,859
<font color="#E5E5E5">ciphertext if you have the right secret</font>

41
00:01:43,249 --> 00:01:47,779
key in<font color="#E5E5E5"> terms of security we</font><font color="#CCCCCC"> have the</font>

42
00:01:45,859 --> 00:01:50,658
basic notion of semantic security which

43
00:01:47,779 --> 00:01:52,389
says that's encryptions of any<font color="#CCCCCC"> tool</font><font color="#E5E5E5"> a</font>

44
00:01:50,659 --> 00:01:56,060
plain text<font color="#CCCCCC"> should be computationally</font>

45
00:01:52,389 --> 00:01:57,259
indistinguishable<font color="#CCCCCC"> now our separate</font>

46
00:01:56,060 --> 00:01:58,249
functions are defined exactly<font color="#CCCCCC"> like</font>

47
00:01:57,259 --> 00:02:00,469
public<font color="#CCCCCC"> encryption with the only</font>

48
00:01:58,249 --> 00:02:02,380
difference that's<font color="#E5E5E5"> the encryption</font>

49
00:02:00,469 --> 00:02:04,548
algorithm that we now call<font color="#E5E5E5"> the</font>

50
00:02:02,380 --> 00:02:07,068
<font color="#E5E5E5">evaluation algorithm there's not take as</font>

51
00:02:04,549 --> 00:02:09,560
input<font color="#E5E5E5"> any randomness okay so this</font><font color="#CCCCCC"> means</font>

52
00:02:07,069 --> 00:02:11,810
that<font color="#E5E5E5"> the decryption algorithm that we</font>

53
00:02:09,560 --> 00:02:15,440
now<font color="#E5E5E5"> call the inversion algorithm can</font>

54
00:02:11,810 --> 00:02:17,630
recover the entire<font color="#E5E5E5"> input to the to the</font>

55
00:02:15,440 --> 00:02:19,910
chapter function evaluation algorithm

56
00:02:17,630 --> 00:02:22,579
and since we make use of no randomness

57
00:02:19,910 --> 00:02:24,230
<font color="#CCCCCC">we cannot achieve</font><font color="#E5E5E5"> our semantic security</font>

58
00:02:22,580 --> 00:02:26,960
but<font color="#E5E5E5"> we should settle for something</font>

59
00:02:24,230 --> 00:02:29,030
weaker<font color="#E5E5E5"> in particular the one</font><font color="#CCCCCC"> brainless</font>

60
00:02:26,960 --> 00:02:30,230
<font color="#E5E5E5">notion says that's</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> a random which</font>

61
00:02:29,030 --> 00:02:34,070
was in function<font color="#E5E5E5"> from the family should</font>

62
00:02:30,230 --> 00:02:35,869
<font color="#CCCCCC">be</font><font color="#E5E5E5"> one way okay so as I mentioned</font>

63
00:02:34,070 --> 00:02:38,989
<font color="#E5E5E5">earlier</font><font color="#CCCCCC"> a main distinctive feature of</font>

64
00:02:35,870 --> 00:02:42,350
<font color="#E5E5E5">trapdoor functions is that no randomness</font>

65
00:02:38,990 --> 00:02:43,640
<font color="#E5E5E5">is used in the evaluation algorithm in</font>

66
00:02:42,350 --> 00:02:45,140
terms<font color="#CCCCCC"> of the relationship between these</font>

67
00:02:43,640 --> 00:02:47,149
<font color="#E5E5E5">two notions we know about classical</font>

68
00:02:45,140 --> 00:02:49,359
results<font color="#CCCCCC"> that</font><font color="#E5E5E5"> trapdoor functions imply</font>

69
00:02:47,150 --> 00:02:52,130
the existence of public encryption<font color="#CCCCCC"> as</font>

70
00:02:49,360 --> 00:02:54,050
for the other direction<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> know that</font>

71
00:02:52,130 --> 00:02:57,170
it's<font color="#CCCCCC"> impossible with respect to blackbox</font>

72
00:02:54,050 --> 00:02:58,820
<font color="#E5E5E5">reductions okay so in particular what</font>

73
00:02:57,170 --> 00:03:02,660
<font color="#CCCCCC">does impossibility result says is that</font>

74
00:02:58,820 --> 00:03:04,130
<font color="#E5E5E5">some techniques that generically give us</font>

75
00:03:02,660 --> 00:03:07,820
public encryption<font color="#CCCCCC"> may not be sufficient</font>

76
00:03:04,130 --> 00:03:10,670
for chapter functions<font color="#E5E5E5"> if we are working</font>

77
00:03:07,820 --> 00:03:13,040
with blackbox reductions which are most

78
00:03:10,670 --> 00:03:14,780
of the techniques are in crypto<font color="#E5E5E5"> so I</font>

79
00:03:13,040 --> 00:03:16,780
want you<font color="#E5E5E5"> to remember at this point</font>

80
00:03:14,780 --> 00:03:21,290
<font color="#CCCCCC">because I want to</font><font color="#E5E5E5"> come back to it later</font>

81
00:03:16,780 --> 00:03:22,700
<font color="#E5E5E5">all right so</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> you might ask</font><font color="#CCCCCC"> that we</font>

82
00:03:21,290 --> 00:03:25,850
have public encryption<font color="#E5E5E5"> it's pretty</font>

83
00:03:22,700 --> 00:03:28,010
useful why do we care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> each</font><font color="#CCCCCC"> other</font>

84
00:03:25,850 --> 00:03:31,000
functions<font color="#E5E5E5"> are they a theoretical object</font>

85
00:03:28,010 --> 00:03:34,040
that<font color="#E5E5E5"> people want to build out of</font><font color="#CCCCCC"> our</font>

86
00:03:31,000 --> 00:03:37,550
curiosity<font color="#E5E5E5"> or do we</font><font color="#CCCCCC"> have any applications</font>

87
00:03:34,040 --> 00:03:39,410
of this notion so let me motivate this

88
00:03:37,550 --> 00:03:40,850
notion<font color="#CCCCCC"> a little bit suppose</font><font color="#E5E5E5"> we have a</font>

89
00:03:39,410 --> 00:03:42,620
<font color="#E5E5E5">chapter function and imagine we have two</font>

90
00:03:40,850 --> 00:03:45,620
<font color="#E5E5E5">users Alice and Bob where Alice has to</font>

91
00:03:42,620 --> 00:03:48,470
index<font color="#E5E5E5"> keys by</font><font color="#CCCCCC"> k1 and k2</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> suppose that</font>

92
00:03:45,620 --> 00:03:51,620
<font color="#CCCCCC">Bob</font><font color="#E5E5E5"> has both these keys plus a trapdoor</font>

93
00:03:48,470 --> 00:03:54,109
<font color="#E5E5E5">key for our k1 okay what is happening is</font>

94
00:03:51,620 --> 00:03:56,990
that alice<font color="#CCCCCC"> is sending to image points y1</font>

95
00:03:54,110 --> 00:03:59,000
and y2<font color="#CCCCCC"> - Bob which were made with</font>

96
00:03:56,990 --> 00:04:01,580
respect to index keys<font color="#CCCCCC"> okay one and I K -</font>

97
00:03:59,000 --> 00:04:03,260
<font color="#E5E5E5">and she wants</font><font color="#CCCCCC"> to convince Bob</font><font color="#E5E5E5"> that's</font>

98
00:04:01,580 --> 00:04:06,620
<font color="#E5E5E5">these two image points correspond to the</font>

99
00:04:03,260 --> 00:04:08,720
same inputs<font color="#E5E5E5"> okay so the question is how</font>

100
00:04:06,620 --> 00:04:10,370
<font color="#CCCCCC">alice can do this does she need to</font>

101
00:04:08,720 --> 00:04:12,350
<font color="#E5E5E5">provide some kind of proof for Bob in</font>

102
00:04:10,370 --> 00:04:17,660
order<font color="#E5E5E5"> for about</font><font color="#CCCCCC"> you'd check</font><font color="#E5E5E5"> for this or</font>

103
00:04:12,350 --> 00:04:19,519
<font color="#E5E5E5">can Bob do it by himself so it turns out</font>

104
00:04:17,660 --> 00:04:21,470
<font color="#E5E5E5">that it turns</font><font color="#CCCCCC"> out since</font><font color="#E5E5E5"> we deal with</font>

105
00:04:19,519 --> 00:04:24,460
trapdoor functions which make use of no

106
00:04:21,470 --> 00:04:27,830
randomness<font color="#E5E5E5"> this is easy for Bob to check</font>

107
00:04:24,460 --> 00:04:30,560
himself<font color="#E5E5E5"> namely Bob can use can make use</font>

108
00:04:27,830 --> 00:04:31,279
of his knowledge of<font color="#CCCCCC"> tk1 to recover</font><font color="#E5E5E5"> x1</font>

109
00:04:30,560 --> 00:04:34,789
and

110
00:04:31,279 --> 00:04:39,199
you can check whether<font color="#CCCCCC"> F of</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> k2 comma x1</font>

111
00:04:34,789 --> 00:04:41,449
<font color="#E5E5E5">gives us</font><font color="#CCCCCC"> Y 2 or not</font><font color="#E5E5E5"> this is not that</font>

112
00:04:39,199 --> 00:04:43,429
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is not a toy example</font><font color="#E5E5E5"> in fact this</font>

113
00:04:41,449 --> 00:04:45,799
is<font color="#CCCCCC"> the main reason</font><font color="#E5E5E5"> behind the success</font><font color="#CCCCCC"> of</font>

114
00:04:43,429 --> 00:04:48,378
building<font color="#CCCCCC"> CCA to secure public</font><font color="#E5E5E5"> encryption</font>

115
00:04:45,799 --> 00:04:52,068
schemes from<font color="#E5E5E5"> in a blackbox way from</font>

116
00:04:48,379 --> 00:04:53,599
various<font color="#E5E5E5"> forms of chat door functions in</font>

117
00:04:52,069 --> 00:04:55,189
contrast when you think<font color="#CCCCCC"> about the same</font>

118
00:04:53,599 --> 00:04:56,779
<font color="#E5E5E5">situation but when we use public</font>

119
00:04:55,189 --> 00:04:59,059
encryption<font color="#E5E5E5"> this is difficult</font><font color="#CCCCCC"> to do</font>

120
00:04:56,779 --> 00:05:00,909
<font color="#E5E5E5">because in general it is difficult</font><font color="#CCCCCC"> to</font>

121
00:04:59,059 --> 00:05:03,699
check whether<font color="#CCCCCC"> two cipher texts are</font>

122
00:05:00,909 --> 00:05:06,709
encrypting the same plain text you need

123
00:05:03,699 --> 00:05:08,779
<font color="#E5E5E5">non-interactive zero-knowledge tools to</font>

124
00:05:06,709 --> 00:05:10,909
do this<font color="#CCCCCC"> and when</font><font color="#E5E5E5"> you use music in a</font>

125
00:05:08,779 --> 00:05:12,979
protocol the protocol will be non black

126
00:05:10,909 --> 00:05:15,860
box<font color="#E5E5E5"> and will not be efficient</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

127
00:05:12,979 --> 00:05:20,449
this is one important property<font color="#CCCCCC"> of</font>

128
00:05:15,860 --> 00:05:22,099
<font color="#E5E5E5">charter functions so so far we knew how</font>

129
00:05:20,449 --> 00:05:23,419
to<font color="#E5E5E5"> build</font><font color="#CCCCCC"> trapdoor functions from a very</font>

130
00:05:22,099 --> 00:05:28,039
<font color="#E5E5E5">small set</font><font color="#CCCCCC"> of assumptions which are</font>

131
00:05:23,419 --> 00:05:29,688
limited<font color="#E5E5E5"> to factor in</font><font color="#CCCCCC"> DDH and lwe and in</font>

132
00:05:28,039 --> 00:05:31,429
fact there is<font color="#E5E5E5"> a very</font><font color="#CCCCCC"> big gap from list</font>

133
00:05:29,689 --> 00:05:34,939
of assumptions<font color="#CCCCCC"> that's give us public</font>

134
00:05:31,429 --> 00:05:38,239
encryption in our work we show how<font color="#CCCCCC"> to we</font>

135
00:05:34,939 --> 00:05:39,559
showed how<font color="#CCCCCC"> to build</font><font color="#E5E5E5"> our PDFs from the</font>

136
00:05:38,239 --> 00:05:41,989
computational diffie-hellman assumption

137
00:05:39,559 --> 00:05:48,919
and this question<font color="#E5E5E5"> has been open for</font><font color="#CCCCCC"> more</font>

138
00:05:41,989 --> 00:05:51,498
than 30 years<font color="#CCCCCC"> ok so let me</font><font color="#E5E5E5"> review the</font>

139
00:05:48,919 --> 00:05:53,719
notion of<font color="#CCCCCC"> CDH and the related notion of</font>

140
00:05:51,499 --> 00:05:56,239
<font color="#CCCCCC">DDH both these assumptions are defined</font>

141
00:05:53,719 --> 00:05:58,519
<font color="#E5E5E5">by respect to a group G and the</font><font color="#CCCCCC"> series</font>

142
00:05:56,239 --> 00:06:00,438
assumption says<font color="#E5E5E5"> that's from G G to the X</font>

143
00:05:58,519 --> 00:06:02,419
and G to the<font color="#E5E5E5"> Y it is hard to compute G</font>

144
00:06:00,439 --> 00:06:04,579
to the<font color="#CCCCCC"> power of X times y where G is</font><font color="#E5E5E5"> the</font>

145
00:06:02,419 --> 00:06:08,209
random generator of the<font color="#E5E5E5"> group and x and</font>

146
00:06:04,579 --> 00:06:09,919
y are random exponents and the<font color="#CCCCCC"> DDH</font>

147
00:06:08,209 --> 00:06:11,569
assumption says that's the Joint

148
00:06:09,919 --> 00:06:14,719
Distribution of G G to the X is e<font color="#CCCCCC"> to the</font>

149
00:06:11,569 --> 00:06:20,119
<font color="#E5E5E5">Y and G to the</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> times y is</font>

150
00:06:14,719 --> 00:06:22,729
pseudo-random<font color="#CCCCCC"> ok so you might ask that</font>

151
00:06:20,119 --> 00:06:23,719
why do we care<font color="#CCCCCC"> about building PDFs</font>

152
00:06:22,729 --> 00:06:26,688
around the<font color="#E5E5E5"> competition defy human</font>

153
00:06:23,719 --> 00:06:29,058
assumption the answer is very<font color="#CCCCCC"> simple</font>

154
00:06:26,689 --> 00:06:31,459
because<font color="#CCCCCC"> seed EHR is a weaker and more</font>

155
00:06:29,059 --> 00:06:35,659
trustable assumption in fact we have

156
00:06:31,459 --> 00:06:40,239
examples of groups which are a plausibly

157
00:06:35,659 --> 00:06:43,579
CDH heart but are provably not<font color="#CCCCCC"> DDA chart</font>

158
00:06:40,239 --> 00:06:44,960
<font color="#E5E5E5">ok</font><font color="#CCCCCC"> so let</font><font color="#E5E5E5"> me tell you a little bit about</font>

159
00:06:43,579 --> 00:06:47,060
the challenges<font color="#CCCCCC"> that's one would say</font>

160
00:06:44,960 --> 00:06:48,919
when wanting to build chapter functions

161
00:06:47,060 --> 00:06:51,410
from diffie-hellman<font color="#E5E5E5"> related assumptions</font>

162
00:06:48,919 --> 00:06:53,690
<font color="#E5E5E5">in general this is</font><font color="#CCCCCC"> not a trivial task</font>

163
00:06:51,410 --> 00:06:56,690
<font color="#E5E5E5">and</font><font color="#CCCCCC"> and the short answer for this</font><font color="#E5E5E5"> is</font>

164
00:06:53,690 --> 00:06:58,639
<font color="#CCCCCC">that all these difficult men relate</font>

165
00:06:56,690 --> 00:07:00,560
assumptions<font color="#E5E5E5"> rely</font><font color="#CCCCCC"> on the discrete log</font>

166
00:06:58,639 --> 00:07:03,069
problem<font color="#CCCCCC"> and we don't have</font><font color="#E5E5E5"> a generic</font>

167
00:07:00,560 --> 00:07:05,960
trapdoor for the discrete log function

168
00:07:03,069 --> 00:07:09,440
so to see how this make<font color="#CCCCCC"> things more</font>

169
00:07:05,960 --> 00:07:10,818
difficult<font color="#E5E5E5"> let's try to solve an easier</font>

170
00:07:09,440 --> 00:07:15,199
problem<font color="#E5E5E5"> let's try to build a chapter</font>

171
00:07:10,819 --> 00:07:16,970
functions from<font color="#CCCCCC"> DDH</font><font color="#E5E5E5"> okay so from D th we</font>

172
00:07:15,199 --> 00:07:20,780
know how to build public<font color="#E5E5E5"> encryption</font><font color="#CCCCCC"> so</font>

173
00:07:16,970 --> 00:07:22,220
let's try<font color="#E5E5E5"> to do randomized</font><font color="#CCCCCC"> elgar</font>

174
00:07:20,780 --> 00:07:23,659
encryption which is the CPA secure

175
00:07:22,220 --> 00:07:28,099
public<font color="#E5E5E5"> encryption based based on</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> D H</font>

176
00:07:23,660 --> 00:07:30,349
so remember that<font color="#E5E5E5"> elgamal works as</font>

177
00:07:28,099 --> 00:07:32,389
follows the secret key is<font color="#E5E5E5"> a random</font>

178
00:07:30,349 --> 00:07:34,070
exponent alpha and the public key is<font color="#E5E5E5"> G</font>

179
00:07:32,389 --> 00:07:38,419
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> alpha where G is</font><font color="#E5E5E5"> the generator</font>

180
00:07:34,070 --> 00:07:40,639
and if you want to encrypt a group

181
00:07:38,419 --> 00:07:42,979
<font color="#E5E5E5">element M you raise G to the power of r</font>

182
00:07:40,639 --> 00:07:45,470
and you<font color="#CCCCCC"> also raise the</font><font color="#E5E5E5"> public key to the</font>

183
00:07:42,979 --> 00:07:47,000
power<font color="#E5E5E5"> of r and multiply it with m okay</font>

184
00:07:45,470 --> 00:07:49,880
now you<font color="#E5E5E5"> can see that if you have the</font>

185
00:07:47,000 --> 00:07:51,949
secret key alpha you<font color="#CCCCCC"> can easily recover</font>

186
00:07:49,880 --> 00:07:55,009
<font color="#CCCCCC">M which is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> plaintext</font>

187
00:07:51,949 --> 00:07:57,849
<font color="#CCCCCC">but</font><font color="#E5E5E5"> you cannot recover our and we cannot</font>

188
00:07:55,009 --> 00:08:02,060
recover our is<font color="#E5E5E5"> not because we</font><font color="#CCCCCC"> are not</font>

189
00:07:57,849 --> 00:08:03,409
smart<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> to recover our we can if we</font>

190
00:08:02,060 --> 00:08:05,930
<font color="#E5E5E5">have a very good reason</font><font color="#CCCCCC"> that why we</font>

191
00:08:03,409 --> 00:08:08,060
cannot recover you are why we cannot

192
00:08:05,930 --> 00:08:09,880
recover<font color="#E5E5E5"> art because recovering R is as</font>

193
00:08:08,060 --> 00:08:12,889
hard as solving the discrete log problem

194
00:08:09,880 --> 00:08:15,979
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> take-home message that I</font>

195
00:08:12,889 --> 00:08:17,810
want you to<font color="#E5E5E5"> take from a desert slide is</font>

196
00:08:15,979 --> 00:08:20,240
<font color="#CCCCCC">that if you want to</font><font color="#E5E5E5"> design a chapter</font>

197
00:08:17,810 --> 00:08:22,430
function based on and defeat

198
00:08:20,240 --> 00:08:25,280
<font color="#CCCCCC">human-related</font><font color="#E5E5E5"> assumptions you should not</font>

199
00:08:22,430 --> 00:08:27,080
perform exponentiation<font color="#CCCCCC"> in the evaluation</font>

200
00:08:25,280 --> 00:08:30,349
algorithm<font color="#E5E5E5"> because for the exponentiation</font>

201
00:08:27,080 --> 00:08:33,110
function we don't know a chap door<font color="#E5E5E5"> okay</font>

202
00:08:30,349 --> 00:08:35,299
so with<font color="#E5E5E5"> this intuition in mind let's let</font>

203
00:08:33,110 --> 00:08:37,310
me review how the<font color="#E5E5E5"> previous work managed</font>

204
00:08:35,299 --> 00:08:39,679
to build a<font color="#CCCCCC"> trapdoor</font><font color="#E5E5E5"> function from the</font>

205
00:08:37,309 --> 00:08:43,520
DDS assumption<font color="#E5E5E5"> okay so this was first</font>

206
00:08:39,679 --> 00:08:47,839
built by<font color="#CCCCCC"> tracker and Watters</font><font color="#E5E5E5"> and it was</font>

207
00:08:43,520 --> 00:08:50,089
simplified by some other paper and now<font color="#E5E5E5"> I</font>

208
00:08:47,839 --> 00:08:52,430
just<font color="#CCCCCC"> realized that's</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> they don't have</font>

209
00:08:50,089 --> 00:08:57,860
the<font color="#E5E5E5"> most updated</font><font color="#CCCCCC"> version</font><font color="#E5E5E5"> of my slides</font>

210
00:08:52,430 --> 00:08:58,760
<font color="#CCCCCC">okay so the chapter function works as</font>

211
00:08:57,860 --> 00:09:02,660
follow

212
00:08:58,760 --> 00:09:04,790
the injective<font color="#E5E5E5"> key of the</font><font color="#CCCCCC"> TD F is G to</font>

213
00:09:02,660 --> 00:09:08,660
<font color="#CCCCCC">the M where m is the</font><font color="#E5E5E5"> random invertible</font>

214
00:09:04,790 --> 00:09:10,459
matrix of exponents and the G to the<font color="#E5E5E5"> M</font>

215
00:09:08,660 --> 00:09:12,529
means G to<font color="#E5E5E5"> the first element G to the</font>

216
00:09:10,459 --> 00:09:15,800
second<font color="#E5E5E5"> element</font><font color="#CCCCCC"> and so on</font><font color="#E5E5E5"> and the</font>

217
00:09:12,529 --> 00:09:17,269
trapdoor key is M inverse okay<font color="#E5E5E5"> now you</font>

218
00:09:15,800 --> 00:09:19,670
can<font color="#CCCCCC"> see that for the evaluation</font>

219
00:09:17,269 --> 00:09:22,430
algorithm if you have G to the<font color="#CCCCCC"> M and if</font>

220
00:09:19,670 --> 00:09:27,139
you have an input<font color="#CCCCCC"> X which which is given</font>

221
00:09:22,430 --> 00:09:30,349
<font color="#CCCCCC">to you as a as a row vector</font><font color="#E5E5E5"> you can</font>

222
00:09:27,139 --> 00:09:32,120
perform<font color="#E5E5E5"> linear</font><font color="#CCCCCC"> a linear algebra</font><font color="#E5E5E5"> in the</font>

223
00:09:30,350 --> 00:09:34,519
<font color="#E5E5E5">exponent to compute G to the power of M</font>

224
00:09:32,120 --> 00:09:36,709
times<font color="#E5E5E5"> X transpose okay</font>

225
00:09:34,519 --> 00:09:39,380
now if you have the trapdoor key which

226
00:09:36,709 --> 00:09:41,630
is M inverse from<font color="#E5E5E5"> front image</font><font color="#CCCCCC"> input Y</font>

227
00:09:39,380 --> 00:09:45,079
you can very easily compute<font color="#CCCCCC"> X bit-by-bit</font>

228
00:09:41,630 --> 00:09:48,769
<font color="#E5E5E5">where the ice</font><font color="#CCCCCC"> bit is given as</font><font color="#E5E5E5"> G to the X</font>

229
00:09:45,079 --> 00:09:51,560
I<font color="#E5E5E5"> okay so when we</font><font color="#CCCCCC"> want to prove that</font>

230
00:09:48,769 --> 00:09:52,699
<font color="#CCCCCC">this chapter</font><font color="#E5E5E5"> function is one way we need</font>

231
00:09:51,560 --> 00:09:54,560
to<font color="#E5E5E5"> rely on this rank</font>

232
00:09:52,699 --> 00:09:57,139
<font color="#E5E5E5">indistinguishability property which is</font>

233
00:09:54,560 --> 00:09:58,638
implied<font color="#E5E5E5"> by DTH which says that's the</font>

234
00:09:57,139 --> 00:10:00,560
distribution of G to the<font color="#CCCCCC"> M is</font>

235
00:09:58,639 --> 00:10:03,019
computationally indistinguishable from G

236
00:10:00,560 --> 00:10:05,420
to<font color="#CCCCCC"> the M prime</font><font color="#E5E5E5"> where m is a random</font>

237
00:10:03,019 --> 00:10:08,540
invertible matrix<font color="#E5E5E5"> and M prime is</font><font color="#CCCCCC"> the low</font>

238
00:10:05,420 --> 00:10:10,519
rank<font color="#E5E5E5"> random matrix okay this property</font>

239
00:10:08,540 --> 00:10:13,519
<font color="#E5E5E5">can be proved based on</font><font color="#CCCCCC"> DDH but it cannot</font>

240
00:10:10,519 --> 00:10:16,190
<font color="#E5E5E5">be proved based on</font><font color="#CCCCCC"> CDH the main reason</font>

241
00:10:13,519 --> 00:10:19,670
is<font color="#E5E5E5"> that when you want</font><font color="#CCCCCC"> to prove this</font>

242
00:10:16,190 --> 00:10:23,720
property<font color="#E5E5E5"> one way or another we should</font>

243
00:10:19,670 --> 00:10:25,939
reason<font color="#E5E5E5"> about a home</font><font color="#CCCCCC"> Orphic property of</font>

244
00:10:23,720 --> 00:10:27,470
the underlying hard core function and we

245
00:10:25,940 --> 00:10:30,170
don't have such a property<font color="#E5E5E5"> based on</font><font color="#CCCCCC"> CDH</font>

246
00:10:27,470 --> 00:10:33,019
<font color="#E5E5E5">so we do not really have any techniques</font>

247
00:10:30,170 --> 00:10:38,360
that are give us<font color="#E5E5E5"> chapter functions based</font>

248
00:10:33,019 --> 00:10:39,980
on<font color="#CCCCCC"> CDH so this is what we do are in</font><font color="#E5E5E5"> our</font>

249
00:10:38,360 --> 00:10:41,269
<font color="#E5E5E5">world we gave the first construction of</font>

250
00:10:39,980 --> 00:10:48,430
chapter functions from the computational

251
00:10:41,269 --> 00:10:52,660
diffie-hellman assumption our<font color="#CCCCCC"> around</font>

252
00:10:48,430 --> 00:10:55,670
methodology in a very high level

253
00:10:52,660 --> 00:10:58,040
involves<font color="#E5E5E5"> the randomizing a specific</font>

254
00:10:55,670 --> 00:11:00,410
class of<font color="#E5E5E5"> public encryption schemes okay</font>

255
00:10:58,040 --> 00:11:03,500
so what I'm going<font color="#CCCCCC"> to do is that I will</font>

256
00:11:00,410 --> 00:11:05,269
<font color="#CCCCCC">first and tell you what this notion is</font>

257
00:11:03,500 --> 00:11:07,519
which is the class of<font color="#E5E5E5"> public corruption</font>

258
00:11:05,269 --> 00:11:10,399
schemes that we do randomized<font color="#E5E5E5"> you know</font>

259
00:11:07,519 --> 00:11:12,080
we call it<font color="#E5E5E5"> recyclable targeted key</font>

260
00:11:10,399 --> 00:11:15,140
encapsulation schemes

261
00:11:12,080 --> 00:11:16,910
and we actually<font color="#E5E5E5"> called it something else</font>

262
00:11:15,140 --> 00:11:20,600
<font color="#CCCCCC">in the paper I'm calling it this way in</font>

263
00:11:16,910 --> 00:11:22,730
<font color="#E5E5E5">the stock and this notion combines</font>

264
00:11:20,600 --> 00:11:25,300
properties from some previous<font color="#CCCCCC"> words from</font>

265
00:11:22,730 --> 00:11:29,120
from a piece of work<font color="#E5E5E5"> outside John and</font>

266
00:11:25,300 --> 00:11:32,780
dwelling<font color="#E5E5E5"> last year and from a paper of</font>

267
00:11:29,120 --> 00:11:36,050
<font color="#E5E5E5">blotter at all from 2003 so I will tell</font>

268
00:11:32,780 --> 00:11:37,790
you what this notion is and then I will

269
00:11:36,050 --> 00:11:40,370
show you how we<font color="#E5E5E5"> can build our chapter</font>

270
00:11:37,790 --> 00:11:43,819
functions<font color="#E5E5E5"> from this notion and I will</font>

271
00:11:40,370 --> 00:11:47,390
refer<font color="#CCCCCC"> you to the paper on how we can</font>

272
00:11:43,820 --> 00:11:49,340
<font color="#E5E5E5">build this notion from</font><font color="#CCCCCC"> CDH ok</font><font color="#E5E5E5"> so let me</font>

273
00:11:47,390 --> 00:11:53,980
tell you<font color="#CCCCCC"> what's our</font><font color="#E5E5E5"> recyclable targeted</font>

274
00:11:49,340 --> 00:11:57,650
<font color="#E5E5E5">Kim is so it's a kind of key</font>

275
00:11:53,980 --> 00:12:01,430
<font color="#E5E5E5">encapsulation mechanism enhanced with</font>

276
00:11:57,650 --> 00:12:06,140
some property out<font color="#E5E5E5"> some properties so</font>

277
00:12:01,430 --> 00:12:07,699
let's review the notion of<font color="#CCCCCC"> Kim</font><font color="#E5E5E5"> a chemist</font>

278
00:12:06,140 --> 00:12:08,720
<font color="#E5E5E5">Kim is defined</font><font color="#CCCCCC"> exactly like a public</font>

279
00:12:07,700 --> 00:12:10,340
<font color="#CCCCCC">encryption</font><font color="#E5E5E5"> scheme with the only</font>

280
00:12:08,720 --> 00:12:11,840
difference<font color="#E5E5E5"> that's the encapsulation</font>

281
00:12:10,340 --> 00:12:14,180
algorithm does<font color="#CCCCCC"> not take as input any</font>

282
00:12:11,840 --> 00:12:16,370
<font color="#E5E5E5">plaintext message m now it takes as</font>

283
00:12:14,180 --> 00:12:18,380
input<font color="#CCCCCC"> the public you PPK and some</font><font color="#E5E5E5"> random</font>

284
00:12:16,370 --> 00:12:20,810
is<font color="#CCCCCC"> r and it</font><font color="#E5E5E5"> gives us</font><font color="#CCCCCC"> a ciphertext C</font>

285
00:12:18,380 --> 00:12:21,890
which is encapsulating in some sense a

286
00:12:20,810 --> 00:12:24,680
key<font color="#E5E5E5"> e</font>

287
00:12:21,890 --> 00:12:26,090
<font color="#CCCCCC">ok so it is encapsulating in the sense</font>

288
00:12:24,680 --> 00:12:29,060
that if<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> the right secret key</font>

289
00:12:26,090 --> 00:12:33,200
you can derive the value<font color="#E5E5E5"> of e from C all</font>

290
00:12:29,060 --> 00:12:35,750
<font color="#E5E5E5">right so in my talk</font><font color="#CCCCCC"> I'm always</font><font color="#E5E5E5"> going to</font>

291
00:12:33,200 --> 00:12:35,930
<font color="#E5E5E5">assume</font><font color="#CCCCCC"> that E is</font><font color="#E5E5E5"> the single bit</font><font color="#CCCCCC"> all</font>

292
00:12:35,750 --> 00:12:38,540
<font color="#CCCCCC">right</font>

293
00:12:35,930 --> 00:12:41,920
so<font color="#E5E5E5"> this is the notion of</font><font color="#CCCCCC"> CAM</font><font color="#E5E5E5"> now let me</font>

294
00:12:38,540 --> 00:12:45,760
tell<font color="#E5E5E5"> you what these two properties me</font>

295
00:12:41,920 --> 00:12:50,000
<font color="#E5E5E5">these let us start with the targeting</font>

296
00:12:45,760 --> 00:12:51,920
property what it says<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> the input</font>

297
00:12:50,000 --> 00:12:56,650
<font color="#E5E5E5">to the encapsulation algorithm contains</font>

298
00:12:51,920 --> 00:13:00,560
<font color="#E5E5E5">two D are two new values and index a</font>

299
00:12:56,650 --> 00:13:02,959
target index<font color="#E5E5E5"> I and a target bit B okay</font>

300
00:13:00,560 --> 00:13:06,229
so<font color="#CCCCCC"> the output is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same as before</font><font color="#E5E5E5"> is</font>

301
00:13:02,960 --> 00:13:07,880
<font color="#CCCCCC">the ciphertext and a key value E</font><font color="#E5E5E5"> now</font>

302
00:13:06,230 --> 00:13:10,550
what is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to happen is that</font><font color="#E5E5E5"> in order</font>

303
00:13:07,880 --> 00:13:13,010
<font color="#CCCCCC">for you to be able to</font><font color="#E5E5E5"> decrypt not only</font>

304
00:13:10,550 --> 00:13:13,969
should you come up with<font color="#CCCCCC"> the valid secret</font>

305
00:13:13,010 --> 00:13:16,580
key for<font color="#E5E5E5"> pk</font>

306
00:13:13,970 --> 00:13:20,000
but that secret key<font color="#CCCCCC"> should</font><font color="#E5E5E5"> have the</font>

307
00:13:16,580 --> 00:13:22,070
property<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> AF bit</font><font color="#E5E5E5"> is B okay</font><font color="#CCCCCC"> so a</font>

308
00:13:20,000 --> 00:13:24,020
and<font color="#CCCCCC"> B where we're specified in the</font>

309
00:13:22,070 --> 00:13:25,760
encapsulation phase so you<font color="#CCCCCC"> might ask</font>

310
00:13:24,020 --> 00:13:28,279
<font color="#CCCCCC">that what will happen if I</font>

311
00:13:25,760 --> 00:13:31,160
secret key<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is valid relative to</font><font color="#E5E5E5"> pk</font>

312
00:13:28,279 --> 00:13:32,930
<font color="#E5E5E5">but it's</font><font color="#CCCCCC"> ice bid is not be this brings</font>

313
00:13:31,160 --> 00:13:35,600
<font color="#CCCCCC">me to</font><font color="#E5E5E5"> the security notion that says that</font>

314
00:13:32,930 --> 00:13:38,689
even if you have the secret key<font color="#CCCCCC"> but if</font>

315
00:13:35,600 --> 00:13:41,449
you are given an inconsistently form

316
00:13:38,690 --> 00:13:43,880
<font color="#E5E5E5">ciphertext</font><font color="#CCCCCC"> C T you cannot distinguish</font>

317
00:13:41,449 --> 00:13:49,099
the true value of<font color="#CCCCCC"> e from</font><font color="#E5E5E5"> a totally</font>

318
00:13:43,880 --> 00:13:51,230
random bit<font color="#E5E5E5"> okay now there recyclability</font>

319
00:13:49,100 --> 00:13:55,449
property in a very high<font color="#E5E5E5"> level says</font>

320
00:13:51,230 --> 00:13:59,630
that's the ciphertext<font color="#E5E5E5"> are the ciphertext</font>

321
00:13:55,449 --> 00:14:03,469
<font color="#E5E5E5">output part of the of the encapsulation</font>

322
00:13:59,630 --> 00:14:06,019
<font color="#E5E5E5">algorithm does</font><font color="#CCCCCC"> not depend</font><font color="#E5E5E5"> on the on the</font>

323
00:14:03,470 --> 00:14:08,420
given public<font color="#CCCCCC"> key it only depends</font><font color="#E5E5E5"> on a</font>

324
00:14:06,019 --> 00:14:10,820
public parameter which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the same</font>

325
00:14:08,420 --> 00:14:14,779
across all public keys<font color="#E5E5E5"> okay now you can</font>

326
00:14:10,820 --> 00:14:18,199
<font color="#E5E5E5">see that I have I have</font><font color="#CCCCCC"> specified the</font>

327
00:14:14,779 --> 00:14:20,769
outputs of<font color="#E5E5E5"> e as e1 and e2</font><font color="#CCCCCC"> and I and I</font>

328
00:14:18,199 --> 00:14:25,639
didn't<font color="#E5E5E5"> put</font><font color="#CCCCCC"> PK as an input</font><font color="#E5E5E5"> to e1 because</font>

329
00:14:20,769 --> 00:14:28,070
<font color="#CCCCCC">a1</font><font color="#E5E5E5"> is independent of PK</font><font color="#CCCCCC"> okay so these</font>

330
00:14:25,639 --> 00:14:30,170
are<font color="#CCCCCC"> the two properties and this</font>

331
00:14:28,070 --> 00:14:34,010
<font color="#CCCCCC">concludes the notion</font><font color="#E5E5E5"> of recyclable</font>

332
00:14:30,170 --> 00:14:35,899
<font color="#E5E5E5">target that can now this picture</font>

333
00:14:34,010 --> 00:14:39,589
summarizes the two properties<font color="#CCCCCC"> that I</font>

334
00:14:35,899 --> 00:14:41,149
just told<font color="#E5E5E5"> you about</font><font color="#CCCCCC"> whenever we want</font><font color="#E5E5E5"> to</font>

335
00:14:39,589 --> 00:14:44,329
<font color="#E5E5E5">build a chapter function from any</font>

336
00:14:41,149 --> 00:14:47,750
assumption one way or another<font color="#E5E5E5"> we should</font>

337
00:14:44,329 --> 00:14:52,099
show two different deterministic ways of

338
00:14:47,750 --> 00:14:56,990
reaching the same output<font color="#CCCCCC"> okay and the</font>

339
00:14:52,100 --> 00:15:00,440
way that this<font color="#E5E5E5"> is enabled</font><font color="#CCCCCC"> in our study is</font>

340
00:14:56,990 --> 00:15:02,660
that you can drive the value<font color="#E5E5E5"> of e in in</font>

341
00:15:00,440 --> 00:15:04,910
two<font color="#CCCCCC"> different ways either</font><font color="#E5E5E5"> by applying</font>

342
00:15:02,660 --> 00:15:08,000
<font color="#E5E5E5">the algorithm</font><font color="#CCCCCC"> e to to a public key PK</font>

343
00:15:04,910 --> 00:15:10,459
and a random value<font color="#E5E5E5"> R or by applying the</font>

344
00:15:08,000 --> 00:15:13,130
algorithm D to a ciphertext<font color="#E5E5E5"> which uses</font>

345
00:15:10,459 --> 00:15:15,229
<font color="#E5E5E5">that randomness value R and</font><font color="#CCCCCC"> to a secret</font>

346
00:15:13,130 --> 00:15:15,949
key which<font color="#E5E5E5"> is consistent with</font><font color="#CCCCCC"> the</font>

347
00:15:15,230 --> 00:15:18,470
<font color="#E5E5E5">ciphertext</font>

348
00:15:15,949 --> 00:15:20,599
<font color="#E5E5E5">so with this intuition in mind let me</font>

349
00:15:18,470 --> 00:15:23,480
<font color="#CCCCCC">give you a version</font><font color="#E5E5E5"> of a chapter function</font>

350
00:15:20,600 --> 00:15:27,139
of our other functions which which<font color="#E5E5E5"> are</font>

351
00:15:23,480 --> 00:15:31,550
<font color="#CCCCCC">house us to recover</font><font color="#E5E5E5"> the first bit of the</font>

352
00:15:27,139 --> 00:15:34,220
input<font color="#E5E5E5"> all right so what we are going to</font>

353
00:15:31,550 --> 00:15:36,649
<font color="#E5E5E5">do is that the index key of</font><font color="#CCCCCC"> my chapter</font>

354
00:15:34,220 --> 00:15:39,500
function consists of<font color="#E5E5E5"> two</font><font color="#CCCCCC"> camp cipher</font>

355
00:15:36,649 --> 00:15:43,730
texts<font color="#E5E5E5"> and the chapter key contains</font>

356
00:15:39,500 --> 00:15:45,980
<font color="#E5E5E5">underlying randomness values okay</font>

357
00:15:43,730 --> 00:15:49,510
the input to<font color="#CCCCCC"> the chapter function is the</font>

358
00:15:45,980 --> 00:15:51,620
secret<font color="#CCCCCC"> tsk of the chemists scheme</font><font color="#E5E5E5"> and</font>

359
00:15:49,510 --> 00:15:53,840
what we<font color="#E5E5E5"> are going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do is that we are</font>

360
00:15:51,620 --> 00:15:59,410
going<font color="#E5E5E5"> to first compute the corresponding</font>

361
00:15:53,840 --> 00:16:01,490
<font color="#CCCCCC">public key</font><font color="#E5E5E5"> and then depending on a a</font>

362
00:15:59,410 --> 00:16:05,089
<font color="#E5E5E5">depending on the value of the first bits</font>

363
00:16:01,490 --> 00:16:08,200
of<font color="#E5E5E5"> SK I'm going to apply the algorithm D</font>

364
00:16:05,090 --> 00:16:10,520
to<font color="#E5E5E5"> either</font><font color="#CCCCCC"> C t1 or a CT</font><font color="#E5E5E5"> prime one</font>

365
00:16:08,200 --> 00:16:12,110
<font color="#E5E5E5">remember that I</font><font color="#CCCCCC"> told you that</font><font color="#E5E5E5"> we can</font>

366
00:16:10,520 --> 00:16:15,110
apply<font color="#E5E5E5"> the algorithm</font><font color="#CCCCCC"> d2 a ciphertext</font>

367
00:16:12,110 --> 00:16:17,120
<font color="#E5E5E5">which is consistent with</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> socket</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> to a</font>

368
00:16:15,110 --> 00:16:21,290
<font color="#CCCCCC">surface which is consistent with the</font>

369
00:16:17,120 --> 00:16:25,310
secret key okay<font color="#CCCCCC"> D</font><font color="#E5E5E5"> are the depart that</font>

370
00:16:21,290 --> 00:16:26,780
<font color="#E5E5E5">I've marked with orange comes from the</font>

371
00:16:25,310 --> 00:16:30,319
property<font color="#CCCCCC"> that I told you</font><font color="#E5E5E5"> in the previous</font>

372
00:16:26,780 --> 00:16:32,060
slide now if you want to invert<font color="#CCCCCC"> you have</font>

373
00:16:30,320 --> 00:16:35,600
all the<font color="#E5E5E5"> randomness values you can form</font>

374
00:16:32,060 --> 00:16:39,819
both<font color="#E5E5E5"> these e</font><font color="#CCCCCC"> two values</font><font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can</font>

375
00:16:35,600 --> 00:16:44,410
check for<font color="#E5E5E5"> a match okay so this allows us</font>

376
00:16:39,820 --> 00:16:47,240
<font color="#CCCCCC">to recover</font><font color="#E5E5E5"> the first bits of</font><font color="#CCCCCC"> SK with</font>

377
00:16:44,410 --> 00:16:49,910
probability<font color="#E5E5E5"> 1/2 but this is</font><font color="#CCCCCC"> another</font>

378
00:16:47,240 --> 00:16:51,920
<font color="#CCCCCC">problem because you can</font><font color="#E5E5E5"> repeat this</font>

379
00:16:49,910 --> 00:16:55,130
process in parallel<font color="#E5E5E5"> to amplify</font>

380
00:16:51,920 --> 00:16:57,740
correctness so this is not<font color="#CCCCCC"> a problem</font><font color="#E5E5E5"> but</font>

381
00:16:55,130 --> 00:16:59,990
we<font color="#CCCCCC"> have a problem</font><font color="#E5E5E5"> when we</font><font color="#CCCCCC"> want to prove</font>

382
00:16:57,740 --> 00:17:03,980
security we<font color="#E5E5E5"> will not be</font><font color="#CCCCCC"> able to improve</font>

383
00:16:59,990 --> 00:17:05,990
our security<font color="#CCCCCC"> the main reason is that the</font>

384
00:17:03,980 --> 00:17:07,939
<font color="#E5E5E5">security property of the</font><font color="#CCCCCC"> chemists scheme</font>

385
00:17:05,990 --> 00:17:12,439
that I told<font color="#E5E5E5"> you about does and it does</font>

386
00:17:07,939 --> 00:17:15,439
not guarantee that<font color="#E5E5E5"> we can hide</font><font color="#CCCCCC"> the value</font>

387
00:17:12,439 --> 00:17:18,410
<font color="#E5E5E5">of the target</font><font color="#CCCCCC"> bits B that this</font><font color="#E5E5E5"> is the</font>

388
00:17:15,439 --> 00:17:21,020
main challenge that<font color="#E5E5E5"> song will have the</font>

389
00:17:18,410 --> 00:17:25,220
fix that<font color="#CCCCCC"> we give to this problem is very</font>

390
00:17:21,020 --> 00:17:27,770
easy and that<font color="#CCCCCC"> is based on this idea</font><font color="#E5E5E5"> that</font>

391
00:17:25,220 --> 00:17:31,070
<font color="#CCCCCC">we put a</font><font color="#E5E5E5"> random bits are in</font><font color="#CCCCCC"> the inputs</font>

392
00:17:27,770 --> 00:17:32,840
of the<font color="#E5E5E5"> trapdoor function and that random</font>

393
00:17:31,070 --> 00:17:35,629
<font color="#E5E5E5">bit is going to be placed in the output</font>

394
00:17:32,840 --> 00:17:38,540
<font color="#E5E5E5">in the place where we cannot apply the</font>

395
00:17:35,630 --> 00:17:43,580
algorithm D now in a<font color="#E5E5E5"> little bit more</font>

396
00:17:38,540 --> 00:17:45,170
detail<font color="#CCCCCC"> in a much more detail ok so the</font>

397
00:17:43,580 --> 00:17:48,760
key<font color="#E5E5E5"> generation algorithm is exactly like</font>

398
00:17:45,170 --> 00:17:51,920
<font color="#CCCCCC">before</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> the only difference</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

399
00:17:48,760 --> 00:17:54,460
in the evaluation algorithm I haven't

400
00:17:51,920 --> 00:17:58,820
you<font color="#CCCCCC"> bet</font><font color="#E5E5E5"> v1 and the way that I'm</font><font color="#CCCCCC"> going to</font>

401
00:17:54,460 --> 00:18:00,950
form the<font color="#CCCCCC"> outputs is that I will apply</font>

402
00:17:58,820 --> 00:18:02,629
<font color="#CCCCCC">the algorithm D to one of the - one of</font>

403
00:18:00,950 --> 00:18:05,870
the two cipher texts<font color="#CCCCCC"> I can apply</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font>

404
00:18:02,630 --> 00:18:07,190
<font color="#E5E5E5">only one cipher text and for the and end</font>

405
00:18:05,870 --> 00:18:10,250
up for the position<font color="#E5E5E5"> that I cannot apply</font>

406
00:18:07,190 --> 00:18:13,270
D I<font color="#E5E5E5"> will put the bit B 1 which is which</font>

407
00:18:10,250 --> 00:18:15,680
<font color="#CCCCCC">is</font><font color="#E5E5E5"> coming from the</font><font color="#CCCCCC"> input this magically</font>

408
00:18:13,270 --> 00:18:17,150
solves the problem<font color="#E5E5E5"> and if you want to</font>

409
00:18:15,680 --> 00:18:21,950
know how it solves<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> I will</font>

410
00:18:17,150 --> 00:18:23,920
<font color="#E5E5E5">refer you to the paper</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so so I gave</font>

411
00:18:21,950 --> 00:18:27,410
you a construction<font color="#CCCCCC"> that allows us to</font>

412
00:18:23,920 --> 00:18:31,040
<font color="#E5E5E5">recover the first bits of the input you</font>

413
00:18:27,410 --> 00:18:34,240
<font color="#E5E5E5">can do the same idea to recover all</font><font color="#CCCCCC"> the</font>

414
00:18:31,040 --> 00:18:38,570
bits<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the inputs in a secure manner</font>

415
00:18:34,240 --> 00:18:40,250
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so let me conclude we gave a</font>

416
00:18:38,570 --> 00:18:41,649
construction of<font color="#CCCCCC"> trapdoor functions from</font>

417
00:18:40,250 --> 00:18:44,600
the competition of<font color="#CCCCCC"> difficult assumption</font>

418
00:18:41,650 --> 00:18:47,770
as a couple of open<font color="#CCCCCC"> problems we would</font>

419
00:18:44,600 --> 00:18:50,330
like<font color="#CCCCCC"> to know whether we</font><font color="#E5E5E5"> can build more</font>

420
00:18:47,770 --> 00:18:52,129
<font color="#E5E5E5">advanced forms of</font><font color="#CCCCCC"> TDF from the CDH</font>

421
00:18:50,330 --> 00:18:55,939
assumption<font color="#E5E5E5"> like loss each other</font>

422
00:18:52,130 --> 00:18:57,200
lossy chapter functions<font color="#E5E5E5"> and as a second</font>

423
00:18:55,940 --> 00:19:02,000
open problem which i think is very

424
00:18:57,200 --> 00:19:05,560
<font color="#CCCCCC">interesting it is whether whether we can</font>

425
00:19:02,000 --> 00:19:11,750
build or separate<font color="#CCCCCC"> chapter permutations</font>

426
00:19:05,560 --> 00:19:17,009
from<font color="#E5E5E5"> a CD h or DD h thank you</font><font color="#CCCCCC"> very much</font>

427
00:19:11,750 --> 00:19:17,009
[Applause]

