1
00:00:05,380 --> 00:00:09,830
thank you for<font color="#E5E5E5"> that introduction</font><font color="#CCCCCC"> this is</font>

2
00:00:08,000 --> 00:00:11,389
joint work my co-authors a<font color="#E5E5E5"> yep</font><font color="#CCCCCC"> Gainey</font>

3
00:00:09,830 --> 00:00:14,330
<font color="#CCCCCC">DotA's Thomas person part and Joanne</font>

4
00:00:11,389 --> 00:00:15,590
would itch<font color="#E5E5E5"> so the subject of this talk</font>

5
00:00:14,330 --> 00:00:17,449
<font color="#CCCCCC">is going to be end-to-end encrypted</font>

6
00:00:15,590 --> 00:00:18,770
messaging these systems are gaining

7
00:00:17,449 --> 00:00:20,689
<font color="#E5E5E5">widespread adoption and their</font>

8
00:00:18,770 --> 00:00:22,490
architecture is pretty simple<font color="#CCCCCC"> a central</font>

9
00:00:20,689 --> 00:00:27,200
service<font color="#E5E5E5"> provider routes messages between</font>

10
00:00:22,490 --> 00:00:29,630
<font color="#CCCCCC">a sender and a receiver crucially though</font>

11
00:00:27,200 --> 00:00:31,430
the service provider is blind<font color="#E5E5E5"> in the</font>

12
00:00:29,630 --> 00:00:33,680
sense that it can't actually read the

13
00:00:31,430 --> 00:00:35,059
messages or modify them the messages

14
00:00:33,680 --> 00:00:37,489
<font color="#CCCCCC">that are being</font><font color="#E5E5E5"> transmitted from sender</font>

15
00:00:35,059 --> 00:00:39,730
to receiver<font color="#E5E5E5"> perhaps because they're</font>

16
00:00:37,489 --> 00:00:42,459
encrypted using authenticated encryption

17
00:00:39,730 --> 00:00:44,779
<font color="#E5E5E5">there are tons of these these these</font>

18
00:00:42,460 --> 00:00:46,969
end-to-end encrypted messaging systems

19
00:00:44,780 --> 00:00:49,699
now for example whatsapp<font color="#CCCCCC"> Facebook</font>

20
00:00:46,969 --> 00:00:52,219
<font color="#E5E5E5">Messenger and signal and and others and</font>

21
00:00:49,699 --> 00:00:54,199
most of them are believed<font color="#E5E5E5"> to be to use</font>

22
00:00:52,219 --> 00:00:56,780
<font color="#E5E5E5">good crypto and to be secure</font><font color="#CCCCCC"> in standard</font>

23
00:00:54,199 --> 00:00:58,699
threat models additionally there's been

24
00:00:56,780 --> 00:01:00,139
some academic work recently analyzing

25
00:00:58,699 --> 00:01:02,210
the security of<font color="#E5E5E5"> end-to-end encrypted</font>

26
00:01:00,139 --> 00:01:02,600
messaging including<font color="#CCCCCC"> someone we saw this</font>

27
00:01:02,210 --> 00:01:04,820
morning

28
00:01:02,600 --> 00:01:06,260
but there's one threat model that hasn't

29
00:01:04,819 --> 00:01:11,270
<font color="#E5E5E5">received a lot of attention</font><font color="#CCCCCC"> in Prior</font>

30
00:01:06,260 --> 00:01:14,360
work which is abuse abusive messaging in

31
00:01:11,270 --> 00:01:16,250
imagine an abusive<font color="#E5E5E5"> more malicious sender</font>

32
00:01:14,360 --> 00:01:18,020
sends a message to<font color="#CCCCCC"> a receiver</font><font color="#E5E5E5"> that</font>

33
00:01:16,250 --> 00:01:21,109
upsets them or threatens them or

34
00:01:18,020 --> 00:01:22,880
harasses them<font color="#E5E5E5"> the receiver might want</font><font color="#CCCCCC"> to</font>

35
00:01:21,109 --> 00:01:24,380
block<font color="#E5E5E5"> this</font><font color="#CCCCCC"> person the further they might</font>

36
00:01:22,880 --> 00:01:25,850
want to<font color="#E5E5E5"> report this message to the</font>

37
00:01:24,380 --> 00:01:27,259
central service provider to have the

38
00:01:25,850 --> 00:01:30,259
malicious sender banned from the

39
00:01:27,259 --> 00:01:31,909
platform however<font color="#E5E5E5"> because of the</font>

40
00:01:30,259 --> 00:01:34,369
end-to-end security<font color="#E5E5E5"> guarantees of the</font>

41
00:01:31,909 --> 00:01:36,469
messaging system<font color="#CCCCCC"> the central service</font>

42
00:01:34,369 --> 00:01:38,630
provider can't<font color="#CCCCCC"> actually verify that this</font>

43
00:01:36,469 --> 00:01:40,969
message<font color="#E5E5E5"> was</font><font color="#CCCCCC"> sent</font><font color="#E5E5E5"> and if it takes the</font>

44
00:01:38,630 --> 00:01:43,369
receivers word for it<font color="#CCCCCC"> this opens up the</font>

45
00:01:40,969 --> 00:01:45,859
<font color="#E5E5E5">door</font><font color="#CCCCCC"> to a different</font><font color="#E5E5E5"> kind of abuse where</font>

46
00:01:43,369 --> 00:01:47,899
in a malicious receiver accuses a sender

47
00:01:45,859 --> 00:01:52,249
of<font color="#E5E5E5"> hat of saying something</font><font color="#CCCCCC"> they didn't</font>

48
00:01:47,899 --> 00:01:53,479
actually say so in 2016<font color="#E5E5E5"> Facebook</font>

49
00:01:52,249 --> 00:01:55,548
introduced a technique they called

50
00:01:53,479 --> 00:01:57,499
message franking which seeks to<font color="#CCCCCC"> resolve</font>

51
00:01:55,549 --> 00:01:59,810
this<font color="#E5E5E5"> tension between</font><font color="#CCCCCC"> Enda</font><font color="#E5E5E5"> and security</font>

52
00:01:57,499 --> 00:02:01,520
and abuse reporting which allows the

53
00:01:59,810 --> 00:02:03,200
receiver<font color="#E5E5E5"> of a message to essentially</font>

54
00:02:01,520 --> 00:02:06,109
generate a cryptographic proof of its

55
00:02:03,200 --> 00:02:10,910
contents in a report of an abusive

56
00:02:06,109 --> 00:02:12,200
message last year my co-authors<font color="#CCCCCC"> djalu</font>

57
00:02:10,910 --> 00:02:14,540
and<font color="#E5E5E5"> Thomas</font><font color="#CCCCCC"> christen</font><font color="#E5E5E5"> part and I had a</font>

58
00:02:12,200 --> 00:02:16,549
paper<font color="#E5E5E5"> that formalized the primitive</font>

59
00:02:14,540 --> 00:02:20,299
that's required for<font color="#E5E5E5"> this kind of</font>

60
00:02:16,550 --> 00:02:21,920
<font color="#CCCCCC">a abuse reporting setting</font><font color="#E5E5E5"> which we call</font>

61
00:02:20,300 --> 00:02:24,140
to compact with committing authenticated

62
00:02:21,920 --> 00:02:25,670
encryption<font color="#E5E5E5"> and we prove that</font><font color="#CCCCCC"> a</font>

63
00:02:24,140 --> 00:02:28,820
simplified variant to Facebook's

64
00:02:25,670 --> 00:02:33,200
protocol is<font color="#CCCCCC"> secure as a CC AE scheme in</font>

65
00:02:28,820 --> 00:02:35,840
the way that we defined it this talk has

66
00:02:33,200 --> 00:02:37,850
four main contributions<font color="#CCCCCC"> first we show</font>

67
00:02:35,840 --> 00:02:40,610
that while the security<font color="#E5E5E5"> proofs of GL are</font>

68
00:02:37,850 --> 00:02:44,299
still hold<font color="#E5E5E5"> if we consider</font><font color="#CCCCCC"> facebook's</font>

69
00:02:40,610 --> 00:02:46,070
full<font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> there facebook's</font><font color="#E5E5E5"> full</font>

70
00:02:44,300 --> 00:02:48,110
protocol itself<font color="#E5E5E5"> is not secure in the</font>

71
00:02:46,070 --> 00:02:50,060
<font color="#CCCCCC">sense of being</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> CCA e</font><font color="#E5E5E5"> and we'll see a</font>

72
00:02:48,110 --> 00:02:51,650
<font color="#E5E5E5">vulnerability which allows a malicious</font>

73
00:02:50,060 --> 00:02:55,220
sender to send<font color="#CCCCCC"> a message</font><font color="#E5E5E5"> that can't be</font>

74
00:02:51,650 --> 00:02:57,560
reported motivated<font color="#E5E5E5"> by</font><font color="#CCCCCC"> this flaw we'll</font>

75
00:02:55,220 --> 00:02:59,780
<font color="#E5E5E5">then turn to studying the the efficiency</font>

76
00:02:57,560 --> 00:03:03,260
<font color="#CCCCCC">of CC e schemes how to build the fastest</font>

77
00:02:59,780 --> 00:03:06,710
possible<font color="#E5E5E5"> CCA schemes unfortunately</font><font color="#CCCCCC"> we'll</font>

78
00:03:03,260 --> 00:03:09,649
show a negative<font color="#E5E5E5"> result which connects</font><font color="#CCCCCC"> CC</font>

79
00:03:06,710 --> 00:03:11,990
<font color="#E5E5E5">AE to</font><font color="#CCCCCC"> a block cipher</font><font color="#E5E5E5"> based collision</font>

80
00:03:09,650 --> 00:03:14,510
resistant hash<font color="#CCCCCC"> in' and showed that</font><font color="#E5E5E5"> there</font>

81
00:03:11,990 --> 00:03:15,830
can't exist a<font color="#CCCCCC"> CC e scheme that's as</font>

82
00:03:14,510 --> 00:03:19,359
efficient as the most efficient

83
00:03:15,830 --> 00:03:22,580
authenticated encryption schemes but

84
00:03:19,360 --> 00:03:24,739
using<font color="#E5E5E5"> this connection to</font><font color="#CCCCCC"> collision</font>

85
00:03:22,580 --> 00:03:26,420
resistant<font color="#E5E5E5"> hash in a little more</font><font color="#CCCCCC"> we</font>

86
00:03:24,739 --> 00:03:28,370
define a<font color="#E5E5E5"> new symmetric key primitive</font>

87
00:03:26,420 --> 00:03:30,079
which we call encrypt meant and we

88
00:03:28,370 --> 00:03:32,330
define a construction of equipment based

89
00:03:30,080 --> 00:03:33,890
on collision resistant hash functions

90
00:03:32,330 --> 00:03:36,620
and this gives<font color="#E5E5E5"> actually a single pass</font>

91
00:03:33,890 --> 00:03:38,630
<font color="#CCCCCC">increment construction and finally we'll</font>

92
00:03:36,620 --> 00:03:41,660
show<font color="#CCCCCC"> that increment is kind of the the</font>

93
00:03:38,630 --> 00:03:43,609
core primitive underlying<font color="#E5E5E5"> ccae basically</font>

94
00:03:41,660 --> 00:03:46,250
meaning<font color="#E5E5E5"> that you can take an encryption</font>

95
00:03:43,610 --> 00:03:49,040
scheme<font color="#CCCCCC"> and do a simple and generic</font>

96
00:03:46,250 --> 00:03:50,900
transform<font color="#E5E5E5"> that constructs the CCA</font><font color="#CCCCCC"> e from</font>

97
00:03:49,040 --> 00:03:54,769
it and we'll see a transform<font color="#E5E5E5"> that uses</font>

98
00:03:50,900 --> 00:03:56,660
<font color="#CCCCCC">just a compression</font><font color="#E5E5E5"> function so first</font>

99
00:03:54,770 --> 00:03:59,209
we'll we'll discuss the attack<font color="#E5E5E5"> and to</font>

100
00:03:56,660 --> 00:04:01,400
understand the attack we<font color="#CCCCCC"> need to review</font>

101
00:03:59,209 --> 00:04:07,400
Facebook's message franking protocol so

102
00:04:01,400 --> 00:04:09,560
in oh sorry<font color="#CCCCCC"> about that in Facebook's</font>

103
00:04:07,400 --> 00:04:12,020
message franking protocol<font color="#E5E5E5"> the the sender</font>

104
00:04:09,560 --> 00:04:13,760
begins by generating<font color="#E5E5E5"> a random</font><font color="#CCCCCC"> H Mak key</font>

105
00:04:12,020 --> 00:04:15,830
and computing a kind<font color="#E5E5E5"> of cryptographic</font>

106
00:04:13,760 --> 00:04:19,399
commitment to the message it wants to

107
00:04:15,830 --> 00:04:21,350
send<font color="#E5E5E5"> using H</font><font color="#CCCCCC"> Mak then it takes</font><font color="#E5E5E5"> the</font>

108
00:04:19,399 --> 00:04:23,390
<font color="#CCCCCC">message and the H Mak key</font><font color="#E5E5E5"> and encrypts</font>

109
00:04:21,350 --> 00:04:27,220
them using a standard<font color="#E5E5E5"> encrypt an H Mac</font>

110
00:04:23,390 --> 00:04:29,810
authenticated encryption scheme then the

111
00:04:27,220 --> 00:04:31,520
the sender sends<font color="#CCCCCC"> the mess</font>

112
00:04:29,810 --> 00:04:34,910
<font color="#E5E5E5">to the receiver through Facebook and</font>

113
00:04:31,520 --> 00:04:39,020
<font color="#E5E5E5">Facebook evaluates an</font><font color="#CCCCCC"> H Mac using its</font>

114
00:04:34,910 --> 00:04:42,139
own key<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> deceit</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> CB the CB</font>

115
00:04:39,020 --> 00:04:44,750
value and finally the receiver<font color="#E5E5E5"> receives</font>

116
00:04:42,139 --> 00:04:46,820
the<font color="#E5E5E5"> two-part message decrypts the AE</font>

117
00:04:44,750 --> 00:04:50,389
ciphertext to recover the opening and

118
00:04:46,820 --> 00:04:52,639
then verifies the commitment to report

119
00:04:50,389 --> 00:04:55,669
an abusive message the<font color="#CCCCCC"> receiver sends</font>

120
00:04:52,639 --> 00:04:58,700
the message as well as the H max<font color="#E5E5E5"> opening</font>

121
00:04:55,669 --> 00:05:00,200
the<font color="#E5E5E5"> HMA and then the the</font><font color="#CCCCCC"> Facebook tag</font>

122
00:04:58,700 --> 00:05:03,260
that<font color="#E5E5E5"> Facebook generated for it</font>

123
00:05:00,200 --> 00:05:07,400
and using this<font color="#E5E5E5"> Facebook can essentially</font>

124
00:05:03,260 --> 00:05:10,789
verify both its<font color="#E5E5E5"> its</font><font color="#CCCCCC"> H</font><font color="#E5E5E5"> Mac and</font><font color="#CCCCCC"> also that</font>

125
00:05:07,400 --> 00:05:13,638
the H Mac of the of the of the abusive

126
00:05:10,790 --> 00:05:15,700
message with<font color="#E5E5E5"> this opening key is</font><font color="#CCCCCC"> correct</font>

127
00:05:13,639 --> 00:05:17,960
<font color="#CCCCCC">and</font><font color="#E5E5E5"> doing this it essentially has</font>

128
00:05:15,700 --> 00:05:21,169
verified that<font color="#CCCCCC"> this message was actually</font>

129
00:05:17,960 --> 00:05:24,530
<font color="#E5E5E5">received</font><font color="#CCCCCC"> by the receiver</font><font color="#E5E5E5"> and so this is</font>

130
00:05:21,169 --> 00:05:27,139
<font color="#E5E5E5">really just the the</font><font color="#CCCCCC"> message frankly</font>

131
00:05:24,530 --> 00:05:29,330
protocol for chat messages attachments

132
00:05:27,139 --> 00:05:31,460
are like images<font color="#E5E5E5"> and videos are handled a</font>

133
00:05:29,330 --> 00:05:36,050
<font color="#CCCCCC">little bit differently for</font><font color="#E5E5E5"> efficiency</font>

134
00:05:31,460 --> 00:05:38,330
reasons and so the the<font color="#E5E5E5"> question that we</font>

135
00:05:36,050 --> 00:05:41,180
addressed<font color="#E5E5E5"> last year here at crypto is</font>

136
00:05:38,330 --> 00:05:43,400
<font color="#E5E5E5">basically is Facebook's approach secure</font>

137
00:05:41,180 --> 00:05:46,190
is this scheme secure<font color="#E5E5E5"> and we showed last</font>

138
00:05:43,400 --> 00:05:49,429
<font color="#E5E5E5">year that if we only consider the chat</font>

139
00:05:46,190 --> 00:05:52,130
protocol itself<font color="#CCCCCC"> with with no attachments</font>

140
00:05:49,430 --> 00:05:53,870
<font color="#E5E5E5">that</font><font color="#CCCCCC"> it is a ccae scheme</font><font color="#E5E5E5"> but next we'll</font>

141
00:05:52,130 --> 00:05:54,890
see that<font color="#E5E5E5"> if we include</font><font color="#CCCCCC"> the attachments</font>

142
00:05:53,870 --> 00:05:57,020
in the protocol there is a vulnerability

143
00:05:54,890 --> 00:06:01,190
<font color="#CCCCCC">that</font><font color="#E5E5E5"> allows you to bypass the abuse</font>

144
00:05:57,020 --> 00:06:03,530
reporting so to understand exactly what

145
00:06:01,190 --> 00:06:06,680
the the root of the flaw<font color="#CCCCCC"> was let's</font>

146
00:06:03,530 --> 00:06:09,260
remember what the GL are defined as the

147
00:06:06,680 --> 00:06:11,000
security goals for message ranking<font color="#E5E5E5"> first</font>

148
00:06:09,260 --> 00:06:12,860
<font color="#E5E5E5">a message Franken scheme should be</font>

149
00:06:11,000 --> 00:06:14,780
receiver binding<font color="#E5E5E5"> which essentially means</font>

150
00:06:12,860 --> 00:06:17,150
<font color="#E5E5E5">that a receiver shouldn't be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to a</font>

151
00:06:14,780 --> 00:06:19,280
report shouldn't be able<font color="#E5E5E5"> to kind</font><font color="#CCCCCC"> of</font>

152
00:06:17,150 --> 00:06:20,659
create<font color="#CCCCCC"> a fake abuse report by accusing</font>

153
00:06:19,280 --> 00:06:24,138
<font color="#E5E5E5">the sender of sending a message</font><font color="#CCCCCC"> that</font>

154
00:06:20,660 --> 00:06:25,460
<font color="#CCCCCC">they didn't actually send a message</font>

155
00:06:24,139 --> 00:06:27,200
franking scheme should<font color="#E5E5E5"> also be sender</font>

156
00:06:25,460 --> 00:06:29,060
bindings<font color="#E5E5E5"> which essentially means that</font>

157
00:06:27,200 --> 00:06:30,440
<font color="#E5E5E5">it's impossible</font><font color="#CCCCCC"> for a sender to send a</font>

158
00:06:29,060 --> 00:06:35,240
message<font color="#CCCCCC"> that can't be reported as</font>

159
00:06:30,440 --> 00:06:36,800
<font color="#E5E5E5">abusive and finally for messages for</font>

160
00:06:35,240 --> 00:06:38,720
messages that aren't reported as abusive

161
00:06:36,800 --> 00:06:42,020
<font color="#CCCCCC">we should still be</font><font color="#E5E5E5"> able to have the same</font>

162
00:06:38,720 --> 00:06:43,340
kind<font color="#E5E5E5"> of a standard confidentiality</font><font color="#CCCCCC"> and</font>

163
00:06:42,020 --> 00:06:47,150
authenticity the authenticated

164
00:06:43,340 --> 00:06:49,190
encryption<font color="#E5E5E5"> provides so the attachment</font>

165
00:06:47,150 --> 00:06:51,710
franking protocol is somewhat<font color="#CCCCCC"> similar</font>

166
00:06:49,190 --> 00:06:53,630
and<font color="#CCCCCC"> uses the the</font><font color="#E5E5E5"> basic message</font><font color="#CCCCCC"> franking</font>

167
00:06:51,710 --> 00:06:55,880
protocol as a kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> cannon</font><font color="#E5E5E5"> so the</font>

168
00:06:53,630 --> 00:06:58,580
first thing the sender does is generates

169
00:06:55,880 --> 00:07:01,190
an attachment encryption key<font color="#E5E5E5"> and an H</font>

170
00:06:58,580 --> 00:07:03,620
<font color="#CCCCCC">Mak key and then computes</font><font color="#E5E5E5"> an hmm</font>

171
00:07:01,190 --> 00:07:06,800
<font color="#CCCCCC">computer commitment using H Mack - the</font>

172
00:07:03,620 --> 00:07:08,780
attachment encryption key then it

173
00:07:06,800 --> 00:07:12,320
encrypts<font color="#E5E5E5"> the attachment encryption key</font>

174
00:07:08,780 --> 00:07:15,770
along<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the H Mack opening then it</font>

175
00:07:12,320 --> 00:07:17,300
uses<font color="#CCCCCC"> AES GCM to encrypt the attachment</font>

176
00:07:15,770 --> 00:07:20,570
<font color="#CCCCCC">plaintext itself using this file</font>

177
00:07:17,300 --> 00:07:22,400
<font color="#CCCCCC">encryption key</font><font color="#E5E5E5"> and remember remember for</font>

178
00:07:20,570 --> 00:07:23,719
<font color="#E5E5E5">later</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> is this is GCM because</font>

179
00:07:22,400 --> 00:07:26,479
this is kind of where<font color="#CCCCCC"> the problem is</font>

180
00:07:23,720 --> 00:07:29,060
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to start so then it</font><font color="#CCCCCC"> sends the</font>

181
00:07:26,479 --> 00:07:30,889
sender concludes by sending the<font color="#CCCCCC"> two-part</font>

182
00:07:29,060 --> 00:07:33,680
<font color="#CCCCCC">cipher text which</font><font color="#E5E5E5"> kind of wraps the</font>

183
00:07:30,889 --> 00:07:35,600
attachment encryption key<font color="#E5E5E5"> as well as the</font>

184
00:07:33,680 --> 00:07:37,450
attachment<font color="#CCCCCC"> ciphertext itself</font><font color="#E5E5E5"> through</font>

185
00:07:35,600 --> 00:07:41,060
<font color="#E5E5E5">Facebook and Facebook does the same</font>

186
00:07:37,450 --> 00:07:44,240
<font color="#E5E5E5">tagging with its own H</font><font color="#CCCCCC"> Mac key and sends</font>

187
00:07:41,060 --> 00:07:46,310
the the encryption of<font color="#E5E5E5"> the attachment key</font>

188
00:07:44,240 --> 00:07:48,050
and the attachment plaintext<font color="#E5E5E5"> or the</font>

189
00:07:46,310 --> 00:07:52,700
attachment<font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> rather itself</font>

190
00:07:48,050 --> 00:07:56,150
<font color="#E5E5E5">through through to the receiver and</font><font color="#CCCCCC"> the</font>

191
00:07:52,700 --> 00:07:58,340
receiver decrypts<font color="#E5E5E5"> the attachment key</font>

192
00:07:56,150 --> 00:08:01,099
<font color="#E5E5E5">ciphertext to obtain the key and then</font>

193
00:07:58,340 --> 00:08:04,039
decrypt the attachment and verifies the

194
00:08:01,099 --> 00:08:05,659
commitment as before and if the<font color="#E5E5E5"> although</font>

195
00:08:04,039 --> 00:08:10,550
commitments verify then it displays<font color="#CCCCCC"> the</font>

196
00:08:05,660 --> 00:08:13,250
<font color="#E5E5E5">the attachment so if there's a</font>

197
00:08:10,550 --> 00:08:14,599
transcript<font color="#E5E5E5"> of messages transcript of</font>

198
00:08:13,250 --> 00:08:16,039
attachments rather than a single

199
00:08:14,599 --> 00:08:19,400
attachment this<font color="#CCCCCC"> is essentially it just</font>

200
00:08:16,039 --> 00:08:21,860
<font color="#E5E5E5">runs the protocol several times once for</font>

201
00:08:19,400 --> 00:08:23,419
each attachment<font color="#CCCCCC"> and to report an abusive</font>

202
00:08:21,860 --> 00:08:26,060
<font color="#CCCCCC">to purport a conversation rather</font>

203
00:08:23,419 --> 00:08:28,700
including abuse of attachments the

204
00:08:26,060 --> 00:08:30,979
receiver opens all<font color="#E5E5E5"> the attachment keys</font>

205
00:08:28,700 --> 00:08:34,098
and all the other<font color="#E5E5E5"> recent messages so</font>

206
00:08:30,979 --> 00:08:36,409
there's no kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> granular selection of</font>

207
00:08:34,099 --> 00:08:39,080
messages<font color="#E5E5E5"> to report all all recent</font>

208
00:08:36,409 --> 00:08:42,140
messages are reported<font color="#E5E5E5"> to to Facebook and</font>

209
00:08:39,080 --> 00:08:43,669
kind<font color="#E5E5E5"> of all the keys are</font><font color="#CCCCCC"> sent so to</font>

210
00:08:42,140 --> 00:08:46,400
generate the<font color="#CCCCCC"> report that</font><font color="#E5E5E5"> the human</font>

211
00:08:43,669 --> 00:08:48,949
actually<font color="#E5E5E5"> consumes to verify whether this</font>

212
00:08:46,400 --> 00:08:52,640
<font color="#E5E5E5">is indeed an abusive message</font><font color="#CCCCCC"> Facebook</font>

213
00:08:48,950 --> 00:08:55,610
will fetch the attachment cipher texts

214
00:08:52,640 --> 00:08:56,329
from<font color="#E5E5E5"> its internal storage crucially here</font>

215
00:08:55,610 --> 00:08:58,279
the

216
00:08:56,329 --> 00:08:59,929
the receiver doesn't<font color="#E5E5E5"> actually open</font><font color="#CCCCCC"> to</font>

217
00:08:58,279 --> 00:09:01,819
the attachment<font color="#CCCCCC"> plain text themselves</font>

218
00:08:59,929 --> 00:09:03,230
<font color="#E5E5E5">these the attachment cipher texts are</font>

219
00:09:01,819 --> 00:09:05,329
stored inside<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Facebook and Facebook</font>

220
00:09:03,230 --> 00:09:07,999
<font color="#E5E5E5">will refetch them when a report is filed</font>

221
00:09:05,329 --> 00:09:11,329
<font color="#E5E5E5">so</font><font color="#CCCCCC"> Facebook refetch is the attachment</font>

222
00:09:07,999 --> 00:09:12,619
<font color="#E5E5E5">cipher texts decrypts them verifies all</font>

223
00:09:11,329 --> 00:09:17,238
<font color="#E5E5E5">the commitments</font><font color="#CCCCCC"> and then creates</font><font color="#E5E5E5"> the</font>

224
00:09:12,619 --> 00:09:20,059
report if everything checks so our

225
00:09:17,239 --> 00:09:22,899
attack basically<font color="#E5E5E5"> exploits the use of AES</font>

226
00:09:20,059 --> 00:09:25,879
GCM combined with<font color="#E5E5E5"> this kind of unique</font>

227
00:09:22,899 --> 00:09:28,549
deduplication behavior that that happens

228
00:09:25,879 --> 00:09:30,439
when the reports are generated<font color="#CCCCCC"> so the</font>

229
00:09:28,549 --> 00:09:32,149
attack basically<font color="#E5E5E5"> has four</font><font color="#CCCCCC"> parts the</font>

230
00:09:30,439 --> 00:09:35,149
first<font color="#E5E5E5"> is when the malicious sender</font>

231
00:09:32,149 --> 00:09:37,459
<font color="#E5E5E5">crafts a AES GCM</font><font color="#CCCCCC"> cypher text with the</font>

232
00:09:35,149 --> 00:09:39,279
property that<font color="#E5E5E5"> there are two valid</font>

233
00:09:37,459 --> 00:09:42,559
decryption keys for this<font color="#CCCCCC"> ciphertext</font>

234
00:09:39,279 --> 00:09:45,049
<font color="#E5E5E5">under one key the</font><font color="#CCCCCC"> cipher text decrypt</font><font color="#E5E5E5"> to</font>

235
00:09:42,559 --> 00:09:46,819
an innocuous image and under the<font color="#E5E5E5"> other</font>

236
00:09:45,049 --> 00:09:54,399
key the attachment<font color="#CCCCCC"> decrypts to an</font>

237
00:09:46,819 --> 00:09:59,029
abusive<font color="#E5E5E5"> image then the the</font><font color="#CCCCCC"> start button</font>

238
00:09:54,399 --> 00:10:01,189
the<font color="#E5E5E5"> the sender sends</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the same cipher</font>

239
00:09:59,029 --> 00:10:02,989
<font color="#CCCCCC">text twice it basically does this</font>

240
00:10:01,189 --> 00:10:05,149
attachment franking protocol twice with

241
00:10:02,989 --> 00:10:12,679
<font color="#CCCCCC">the two different keys but the same the</font>

242
00:10:05,149 --> 00:10:17,209
same attachment<font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> I'm sorry my</font>

243
00:10:12,679 --> 00:10:20,660
<font color="#CCCCCC">mic my clicker is a little yeah okay so</font>

244
00:10:17,209 --> 00:10:21,949
the<font color="#E5E5E5"> the when the receiver receives both</font>

245
00:10:20,660 --> 00:10:23,929
of these attachments<font color="#CCCCCC"> that will decrypt</font>

246
00:10:21,949 --> 00:10:26,179
<font color="#E5E5E5">them twice and decrypt the same the same</font>

247
00:10:23,929 --> 00:10:27,889
<font color="#E5E5E5">ciphertext</font><font color="#CCCCCC"> under both keys and it'll</font>

248
00:10:26,179 --> 00:10:30,429
essentially see both the innocuous

249
00:10:27,889 --> 00:10:33,860
decryption and the abusive decryption

250
00:10:30,429 --> 00:10:36,049
but when the the<font color="#CCCCCC"> the attachment when the</font>

251
00:10:33,860 --> 00:10:38,360
conversation is reported as abusive only

252
00:10:36,049 --> 00:10:40,850
the innocuous decryption will appear in

253
00:10:38,360 --> 00:10:43,449
the abuse report<font color="#CCCCCC"> so this violates the</font>

254
00:10:40,850 --> 00:10:47,569
sender binding property of Facebook's

255
00:10:43,449 --> 00:10:50,118
<font color="#E5E5E5">Facebook's attachment ranking scheme so</font>

256
00:10:47,569 --> 00:10:52,459
let's just<font color="#E5E5E5"> review what we've seen so</font>

257
00:10:50,119 --> 00:10:54,769
this attack<font color="#CCCCCC"> basically has to craft an</font>

258
00:10:52,459 --> 00:10:56,419
<font color="#E5E5E5">Aes GCM</font><font color="#CCCCCC"> ciphertext that decrypts</font>

259
00:10:54,769 --> 00:10:58,999
correctly under two<font color="#CCCCCC"> different keys</font><font color="#E5E5E5"> and</font>

260
00:10:56,419 --> 00:11:00,739
you might be wondering it<font color="#CCCCCC"> seems kind</font><font color="#E5E5E5"> of</font>

261
00:10:58,999 --> 00:11:03,110
<font color="#CCCCCC">weird that</font><font color="#E5E5E5"> this is possible because a es</font>

262
00:11:00,739 --> 00:11:07,490
GCM is<font color="#CCCCCC"> a secure authenticated encryption</font>

263
00:11:03,110 --> 00:11:08,970
scheme<font color="#E5E5E5"> but recall</font><font color="#CCCCCC"> that the standard</font>

264
00:11:07,490 --> 00:11:10,980
authenticated encryption<font color="#CCCCCC"> gear</font>

265
00:11:08,970 --> 00:11:13,709
<font color="#CCCCCC">tea's only actually hold when the</font>

266
00:11:10,980 --> 00:11:15,629
<font color="#CCCCCC">attacker can't choose the keys but</font><font color="#E5E5E5"> in</font>

267
00:11:13,709 --> 00:11:19,410
this attack<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the sender chooses</font>

268
00:11:15,629 --> 00:11:23,160
these keys it can<font color="#E5E5E5"> basically craft the</font>

269
00:11:19,410 --> 00:11:24,569
<font color="#CCCCCC">ciphertext and the reason why GCM in</font>

270
00:11:23,160 --> 00:11:27,810
particular is vulnerable<font color="#CCCCCC"> to this attack</font>

271
00:11:24,569 --> 00:11:30,449
<font color="#E5E5E5">is because it uses a kind of universal</font>

272
00:11:27,810 --> 00:11:32,459
hash<font color="#E5E5E5"> based Mac which in</font><font color="#CCCCCC"> particular isn't</font>

273
00:11:30,449 --> 00:11:36,389
collision resistant under<font color="#E5E5E5"> adversarially</font>

274
00:11:32,459 --> 00:11:38,099
chosen<font color="#E5E5E5"> keys so the property that's</font>

275
00:11:36,389 --> 00:11:40,680
<font color="#E5E5E5">actually being violated by our attack is</font>

276
00:11:38,100 --> 00:11:42,899
the robustness of GCM which basically

277
00:11:40,680 --> 00:11:44,339
robustness requires that you can't do

278
00:11:42,899 --> 00:11:45,660
exactly this that you can't find a

279
00:11:44,339 --> 00:11:48,629
<font color="#CCCCCC">cipher texts</font><font color="#E5E5E5"> that decrypt correctly</font>

280
00:11:45,660 --> 00:11:50,490
under two different<font color="#CCCCCC"> keys and I'm happy</font>

281
00:11:48,629 --> 00:11:51,959
to<font color="#CCCCCC"> be corrected on this but as far as I</font>

282
00:11:50,490 --> 00:11:53,819
know this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the first attack on</font>

283
00:11:51,959 --> 00:11:56,310
robustness<font color="#E5E5E5"> ever ever demonstrated</font>

284
00:11:53,819 --> 00:11:57,899
against a real deployed system which is

285
00:11:56,310 --> 00:12:00,029
kind of cool<font color="#E5E5E5"> although there have been</font>

286
00:11:57,899 --> 00:12:03,779
<font color="#E5E5E5">some some prior academic works on a</font>

287
00:12:00,029 --> 00:12:05,250
robust encryption<font color="#E5E5E5"> but this I don't think</font>

288
00:12:03,779 --> 00:12:09,959
I<font color="#CCCCCC"> need them demonstrated an attack</font>

289
00:12:05,250 --> 00:12:13,259
against a real system so just to just to

290
00:12:09,959 --> 00:12:15,089
<font color="#CCCCCC">be</font><font color="#E5E5E5"> concrete here</font><font color="#CCCCCC"> imagine</font><font color="#E5E5E5"> that this left</font>

291
00:12:13,259 --> 00:12:18,000
hand<font color="#E5E5E5"> side for</font><font color="#CCCCCC"> Tek this left hand</font><font color="#E5E5E5"> image</font>

292
00:12:15,089 --> 00:12:20,850
rather is the the abusive decryption<font color="#CCCCCC"> and</font>

293
00:12:18,000 --> 00:12:24,269
this right<font color="#E5E5E5"> hand image is the innocuous</font>

294
00:12:20,850 --> 00:12:27,170
decryption so this is the the<font color="#E5E5E5"> titular</font>

295
00:12:24,269 --> 00:12:31,079
invisible salamander from the talk<font color="#E5E5E5"> title</font>

296
00:12:27,170 --> 00:12:32,969
<font color="#CCCCCC">this</font><font color="#E5E5E5"> actually doing building these these</font>

297
00:12:31,079 --> 00:12:34,410
colliding images took a little<font color="#E5E5E5"> bit of</font>

298
00:12:32,970 --> 00:12:36,480
work and<font color="#E5E5E5"> it</font><font color="#CCCCCC"> requires a</font><font color="#E5E5E5"> little bit</font><font color="#CCCCCC"> of</font>

299
00:12:34,410 --> 00:12:37,860
messing<font color="#CCCCCC"> with image file formats</font><font color="#E5E5E5"> and you</font>

300
00:12:36,480 --> 00:12:46,050
can see the<font color="#E5E5E5"> paper if</font><font color="#CCCCCC"> you want more</font>

301
00:12:37,860 --> 00:12:48,329
details on that<font color="#E5E5E5"> but yeah so we disclosed</font>

302
00:12:46,050 --> 00:12:49,859
<font color="#E5E5E5">this vulnerability to Facebook and they</font>

303
00:12:48,329 --> 00:12:52,109
helped us understand the impact<font color="#E5E5E5"> of the</font>

304
00:12:49,860 --> 00:12:53,399
bug<font color="#E5E5E5"> and we'd like to in particular</font><font color="#CCCCCC"> thank</font>

305
00:12:52,110 --> 00:12:55,019
John Milken for<font color="#E5E5E5"> answering a lot of</font>

306
00:12:53,399 --> 00:12:57,809
questions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we had about the behavior</font>

307
00:12:55,019 --> 00:13:00,420
of<font color="#E5E5E5"> Facebook's systems and they chose</font><font color="#CCCCCC"> to</font>

308
00:12:57,809 --> 00:13:02,370
change this<font color="#E5E5E5"> basically by fixing the the</font>

309
00:13:00,420 --> 00:13:05,189
way<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the attachment cipher texts are</font>

310
00:13:02,370 --> 00:13:07,620
<font color="#E5E5E5">deduplicated during an abuse report now</font>

311
00:13:05,189 --> 00:13:08,930
they did this<font color="#E5E5E5"> for a valid reason which</font>

312
00:13:07,620 --> 00:13:11,689
<font color="#CCCCCC">is</font><font color="#E5E5E5"> that they didn't want to have to</font>

313
00:13:08,930 --> 00:13:14,099
introduce some<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of cipher</font>

314
00:13:11,689 --> 00:13:15,269
negotiation<font color="#E5E5E5"> into their attachment</font>

315
00:13:14,100 --> 00:13:18,360
franking protocol because<font color="#E5E5E5"> they already</font>

316
00:13:15,269 --> 00:13:20,130
<font color="#E5E5E5">had GCM deployed</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> unfortunately this</font>

317
00:13:18,360 --> 00:13:22,050
does leave the underlying flaw intact

318
00:13:20,130 --> 00:13:22,410
which is that GCM is<font color="#CCCCCC"> still used to</font>

319
00:13:22,050 --> 00:13:25,139
<font color="#E5E5E5">encrypt</font>

320
00:13:22,410 --> 00:13:27,209
attachments in<font color="#CCCCCC"> facebook scheme and they</font>

321
00:13:25,139 --> 00:13:32,430
also awarded us a bug bounty<font color="#E5E5E5"> for</font>

322
00:13:27,209 --> 00:13:39,119
reporting<font color="#E5E5E5"> it so now that we now that we</font>

323
00:13:32,430 --> 00:13:40,800
see<font color="#E5E5E5"> now so now that we understand the</font>

324
00:13:39,120 --> 00:13:44,000
attack we<font color="#CCCCCC"> can kind of</font><font color="#E5E5E5"> try to reflect on</font>

325
00:13:40,800 --> 00:13:47,430
why it was<font color="#E5E5E5"> possible in the first place</font>

326
00:13:44,000 --> 00:13:48,930
<font color="#E5E5E5">so Facebook uses a basically generic</font>

327
00:13:47,430 --> 00:13:51,930
composition of a<font color="#E5E5E5"> commitment and an</font>

328
00:13:48,930 --> 00:13:53,638
authenticated<font color="#E5E5E5"> encryption scheme which we</font>

329
00:13:51,930 --> 00:13:57,540
proved<font color="#E5E5E5"> last year as secure as a</font><font color="#CCCCCC"> ccae</font>

330
00:13:53,639 --> 00:13:59,250
scheme<font color="#E5E5E5"> but they didn't actually</font><font color="#CCCCCC"> use this</font>

331
00:13:57,540 --> 00:14:01,019
<font color="#CCCCCC">for attachments for a couple</font><font color="#E5E5E5"> of reasons</font>

332
00:13:59,250 --> 00:14:03,420
but one<font color="#CCCCCC"> major one</font><font color="#E5E5E5"> is that it's a three</font>

333
00:14:01,019 --> 00:14:05,519
pass scheme which on especially on

334
00:14:03,420 --> 00:14:07,439
low-power mobile phones is much too slow

335
00:14:05,519 --> 00:14:10,290
<font color="#E5E5E5">to encrypt kind of like large image or</font>

336
00:14:07,439 --> 00:14:11,370
<font color="#CCCCCC">video files</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> motivates the</font>

337
00:14:10,290 --> 00:14:13,199
question that<font color="#CCCCCC"> we'll treat for the rest</font>

338
00:14:11,370 --> 00:14:15,449
of<font color="#E5E5E5"> the talk which is essentially can we</font>

339
00:14:13,199 --> 00:14:19,709
<font color="#CCCCCC">actually build CCEE schemes that</font><font color="#E5E5E5"> are</font>

340
00:14:15,449 --> 00:14:21,479
faster than<font color="#E5E5E5"> Facebook's so when I say</font>

341
00:14:19,709 --> 00:14:24,000
fast here are we should make our design

342
00:14:21,480 --> 00:14:26,790
target about one block<font color="#E5E5E5"> safer call per</font>

343
00:14:24,000 --> 00:14:31,079
block<font color="#CCCCCC"> of message in some existing</font><font color="#E5E5E5"> AE</font>

344
00:14:26,790 --> 00:14:34,079
schemes do<font color="#CCCCCC"> achieve this but none of</font><font color="#E5E5E5"> them</font>

345
00:14:31,079 --> 00:14:39,599
<font color="#E5E5E5">are actually secure</font><font color="#CCCCCC"> at CC AE schemes</font><font color="#E5E5E5"> and</font>

346
00:14:34,079 --> 00:14:41,399
it turns<font color="#E5E5E5"> out</font><font color="#CCCCCC"> that there is a there's a</font>

347
00:14:39,600 --> 00:14:44,040
<font color="#E5E5E5">there's a there's a fundamental</font><font color="#CCCCCC"> reason</font>

348
00:14:41,399 --> 00:14:46,740
<font color="#CCCCCC">for this which</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> CC AE</font>

349
00:14:44,040 --> 00:14:49,380
implies a collision resistant hash<font color="#E5E5E5"> kind</font>

350
00:14:46,740 --> 00:14:51,120
of you can give a generic transformation

351
00:14:49,380 --> 00:14:55,410
that builds a collision resistant<font color="#CCCCCC"> hash</font>

352
00:14:51,120 --> 00:14:56,759
function out of<font color="#E5E5E5"> CC AE scheme so we</font>

353
00:14:55,410 --> 00:14:58,860
<font color="#E5E5E5">basically prove that this is impossible</font>

354
00:14:56,759 --> 00:15:01,649
<font color="#E5E5E5">in two steps first we gave this generic</font>

355
00:14:58,860 --> 00:15:03,779
transformation that shows<font color="#E5E5E5"> that CC AE</font>

356
00:15:01,649 --> 00:15:06,509
implies collision resistance and then we

357
00:15:03,779 --> 00:15:08,279
leveraged prior prior work on lower

358
00:15:06,509 --> 00:15:10,860
bounding the efficiency<font color="#CCCCCC"> of block cipher</font>

359
00:15:08,279 --> 00:15:12,990
based hash functions<font color="#E5E5E5"> done by black</font>

360
00:15:10,860 --> 00:15:15,959
<font color="#E5E5E5">Cochran</font><font color="#CCCCCC"> and Shrimpton and</font><font color="#E5E5E5"> ragga way in</font>

361
00:15:12,990 --> 00:15:18,990
<font color="#CCCCCC">Steinberger and</font><font color="#E5E5E5"> basically using these</font>

362
00:15:15,959 --> 00:15:23,309
two things we<font color="#CCCCCC"> can combine them to rule</font>

363
00:15:18,990 --> 00:15:25,319
out the<font color="#CCCCCC"> existence of</font><font color="#E5E5E5"> CC AE schemes that</font>

364
00:15:23,309 --> 00:15:28,860
<font color="#E5E5E5">only make one block</font><font color="#CCCCCC"> safer call per block</font>

365
00:15:25,319 --> 00:15:33,750
<font color="#E5E5E5">a message so this is unfortunate in some</font>

366
00:15:28,860 --> 00:15:35,270
sense but it also demonstrates an

367
00:15:33,750 --> 00:15:37,160
interesting<font color="#CCCCCC"> connection to collisions</font>

368
00:15:35,270 --> 00:15:39,199
<font color="#CCCCCC">passion which</font><font color="#E5E5E5"> is actually the approach</font>

369
00:15:37,160 --> 00:15:41,449
we're going to take in<font color="#E5E5E5"> building a faster</font>

370
00:15:39,200 --> 00:15:43,280
<font color="#E5E5E5">ccae scheme and we're gonna do this in</font>

371
00:15:41,450 --> 00:15:45,080
two<font color="#CCCCCC"> steps first we're</font><font color="#E5E5E5"> going to define a</font>

372
00:15:43,280 --> 00:15:47,180
new<font color="#CCCCCC"> primitive called encrypt min</font><font color="#E5E5E5"> which</font>

373
00:15:45,080 --> 00:15:49,910
is<font color="#E5E5E5"> essentially a one-time ccae scheme</font>

374
00:15:47,180 --> 00:15:51,589
<font color="#E5E5E5">and we're gonna do this because</font><font color="#CCCCCC"> ccae</font><font color="#E5E5E5"> is</font>

375
00:15:49,910 --> 00:15:53,180
a little bit complicated<font color="#E5E5E5"> to reason about</font>

376
00:15:51,590 --> 00:15:55,460
<font color="#CCCCCC">and it</font><font color="#E5E5E5"> has a lot</font><font color="#CCCCCC"> of bells</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> whistles</font>

377
00:15:53,180 --> 00:15:58,370
<font color="#CCCCCC">so we're gonna just</font><font color="#E5E5E5"> kind of isolate the</font>

378
00:15:55,460 --> 00:16:00,950
the hard parts<font color="#E5E5E5"> of building it into this</font>

379
00:15:58,370 --> 00:16:03,800
new primitive<font color="#CCCCCC"> called</font><font color="#E5E5E5"> equipment and then</font>

380
00:16:00,950 --> 00:16:05,780
we're<font color="#E5E5E5"> going to show how to basically</font>

381
00:16:03,800 --> 00:16:10,910
transform equipment in a very fast and

382
00:16:05,780 --> 00:16:12,920
<font color="#E5E5E5">simple transform to a full CCA scheme so</font>

383
00:16:10,910 --> 00:16:14,300
<font color="#CCCCCC">we'll will demonstrate increment and</font>

384
00:16:12,920 --> 00:16:15,860
<font color="#E5E5E5">then we'll demonstrate our construction</font>

385
00:16:14,300 --> 00:16:18,109
<font color="#E5E5E5">of equipment which we</font><font color="#CCCCCC"> call a hash</font>

386
00:16:15,860 --> 00:16:20,600
function chaining scheme and then we'll

387
00:16:18,110 --> 00:16:21,740
show a one particular transform from

388
00:16:20,600 --> 00:16:24,160
equipment<font color="#CCCCCC"> to ccae</font>

389
00:16:21,740 --> 00:16:29,360
using a<font color="#E5E5E5"> compression function and</font>

390
00:16:24,160 --> 00:16:31,699
together<font color="#E5E5E5"> this will imply this will imply</font>

391
00:16:29,360 --> 00:16:34,520
basically a CCA scheme that can<font color="#E5E5E5"> be</font>

392
00:16:31,700 --> 00:16:38,690
evaluated<font color="#E5E5E5"> in only one call to sha-256</font>

393
00:16:34,520 --> 00:16:40,250
for example<font color="#E5E5E5"> so this is not not one block</font>

394
00:16:38,690 --> 00:16:42,530
cipher called per block of message but

395
00:16:40,250 --> 00:16:45,980
<font color="#E5E5E5">this is still one pass and we expect to</font>

396
00:16:42,530 --> 00:16:48,490
<font color="#CCCCCC">be pretty fast in practice</font><font color="#E5E5E5"> so encrypt</font>

397
00:16:45,980 --> 00:16:51,380
meant<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> a kind of one-time</font>

398
00:16:48,490 --> 00:16:54,140
ccae scheme and it's a basically just

399
00:16:51,380 --> 00:16:57,140
three algorithms<font color="#CCCCCC"> we omit key</font><font color="#E5E5E5"> generation</font>

400
00:16:54,140 --> 00:16:58,819
and associated data but these<font color="#E5E5E5"> can be</font>

401
00:16:57,140 --> 00:17:01,550
added<font color="#CCCCCC"> back without</font><font color="#E5E5E5"> too much complexity</font>

402
00:16:58,820 --> 00:17:03,890
you know in the presentation<font color="#E5E5E5"> so the</font>

403
00:17:01,550 --> 00:17:05,599
first<font color="#E5E5E5"> algorithm is EC which takes a key</font>

404
00:17:03,890 --> 00:17:08,119
<font color="#CCCCCC">in a message and produces a 2-part</font>

405
00:17:05,599 --> 00:17:10,849
<font color="#CCCCCC">ciphertext the</font><font color="#E5E5E5"> second part of the</font>

406
00:17:08,119 --> 00:17:15,050
ciphertext<font color="#E5E5E5"> CB should be short like for</font>

407
00:17:10,849 --> 00:17:19,939
example about 256 bits so EC encrypts<font color="#CCCCCC"> M</font>

408
00:17:15,050 --> 00:17:22,190
but also commits to<font color="#CCCCCC"> it and do</font><font color="#E5E5E5"> takes a</font>

409
00:17:19,940 --> 00:17:25,280
key and<font color="#CCCCCC"> a 2-part ciphertext and outputs</font>

410
00:17:22,190 --> 00:17:27,290
either a message or the<font color="#CCCCCC"> baht symbol so</font>

411
00:17:25,280 --> 00:17:29,530
do basically decrypts<font color="#CCCCCC"> the 2-part</font>

412
00:17:27,290 --> 00:17:32,480
ciphertext and<font color="#E5E5E5"> opens to</font><font color="#CCCCCC"> the message</font><font color="#E5E5E5"> m</font>

413
00:17:29,530 --> 00:17:35,810
<font color="#E5E5E5">the final algorithm is</font><font color="#CCCCCC"> iver which takes</font>

414
00:17:32,480 --> 00:17:37,100
a<font color="#CCCCCC"> message a key and</font><font color="#E5E5E5"> a the second part of</font>

415
00:17:35,810 --> 00:17:38,870
a<font color="#E5E5E5"> two-part</font><font color="#CCCCCC"> ciphertext which</font><font color="#E5E5E5"> will</font>

416
00:17:37,100 --> 00:17:41,149
sometimes call the<font color="#E5E5E5"> binding tag and</font>

417
00:17:38,870 --> 00:17:43,699
outputs a 0 or<font color="#CCCCCC"> a 1</font><font color="#E5E5E5"> and this essentially</font>

418
00:17:41,150 --> 00:17:45,420
<font color="#E5E5E5">just verifies the commitment verifies</font>

419
00:17:43,700 --> 00:17:49,590
this binding tag is a commitment

420
00:17:45,420 --> 00:17:51,180
message<font color="#CCCCCC"> M so encryption should have four</font>

421
00:17:49,590 --> 00:17:53,639
basic<font color="#CCCCCC"> security properties which</font><font color="#E5E5E5"> will</font>

422
00:17:51,180 --> 00:17:55,620
describe<font color="#E5E5E5"> at a high level it should have</font>

423
00:17:53,640 --> 00:17:58,320
confidentiality<font color="#CCCCCC"> in the sense that it</font>

424
00:17:55,620 --> 00:17:59,689
should be<font color="#CCCCCC"> one-time real or random secure</font>

425
00:17:58,320 --> 00:18:01,500
this is kind of the standard<font color="#CCCCCC"> ie</font>

426
00:17:59,690 --> 00:18:04,950
<font color="#E5E5E5">confidentiality goal restricted to a</font>

427
00:18:01,500 --> 00:18:06,480
single<font color="#CCCCCC"> query it should have a property</font>

428
00:18:04,950 --> 00:18:10,020
<font color="#E5E5E5">we call second ciphertext unforgeable</font>

429
00:18:06,480 --> 00:18:12,330
<font color="#CCCCCC">'ti which basically says that ciphertext</font>

430
00:18:10,020 --> 00:18:14,340
can't be forged but in a way that is a

431
00:18:12,330 --> 00:18:16,740
<font color="#E5E5E5">little bit specific to the to the</font>

432
00:18:14,340 --> 00:18:18,780
<font color="#E5E5E5">construction or to the to the to this</font>

433
00:18:16,740 --> 00:18:21,360
primitive<font color="#CCCCCC"> and so I</font><font color="#E5E5E5"> won't actually go</font>

434
00:18:18,780 --> 00:18:23,370
into detail on exactly<font color="#E5E5E5"> how the forgeries</font>

435
00:18:21,360 --> 00:18:26,129
should be ruled out but you can see the

436
00:18:23,370 --> 00:18:27,389
paper for more details and<font color="#E5E5E5"> finally it</font>

437
00:18:26,130 --> 00:18:29,700
should have these same two<font color="#E5E5E5"> security</font>

438
00:18:27,390 --> 00:18:31,410
goals as before<font color="#CCCCCC"> basically it should be</font>

439
00:18:29,700 --> 00:18:32,970
receiver binding which in the sense that

440
00:18:31,410 --> 00:18:35,040
it shouldn't<font color="#E5E5E5"> be possible to come up with</font>

441
00:18:32,970 --> 00:18:37,080
pairs of keys<font color="#E5E5E5"> and message that verify</font>

442
00:18:35,040 --> 00:18:41,010
that for<font color="#E5E5E5"> the same binding tag and it</font>

443
00:18:37,080 --> 00:18:43,889
should be sender binding<font color="#CCCCCC"> in that cipher</font>

444
00:18:41,010 --> 00:18:48,900
text that<font color="#CCCCCC"> decrypts correctly also</font>

445
00:18:43,890 --> 00:18:51,990
verifies so next<font color="#E5E5E5"> we'll describe our</font><font color="#CCCCCC"> HFC</font>

446
00:18:48,900 --> 00:18:54,360
scheme which<font color="#E5E5E5"> constructs an equipment</font>

447
00:18:51,990 --> 00:18:56,100
<font color="#E5E5E5">from a compression function and so to do</font>

448
00:18:54,360 --> 00:18:59,100
this<font color="#E5E5E5"> will first briefly review</font>

449
00:18:56,100 --> 00:19:00,929
merkle-damgard style hash functions<font color="#CCCCCC"> so a</font>

450
00:18:59,100 --> 00:19:02,610
merkle-damgard<font color="#CCCCCC"> style hash function</font>

451
00:19:00,930 --> 00:19:04,920
basically<font color="#E5E5E5"> takes a compression function</font>

452
00:19:02,610 --> 00:19:07,169
and iterates it in a particular<font color="#CCCCCC"> way to</font>

453
00:19:04,920 --> 00:19:10,470
<font color="#CCCCCC">obtain</font><font color="#E5E5E5"> a kind of arbitrary</font><font color="#CCCCCC"> lash function</font>

454
00:19:07,170 --> 00:19:13,320
on<font color="#E5E5E5"> arbitrary length inputs with some</font>

455
00:19:10,470 --> 00:19:15,900
some suitable padding<font color="#E5E5E5"> and there's this</font>

456
00:19:13,320 --> 00:19:18,450
IV here at the beginning<font color="#CCCCCC"> and this is</font>

457
00:19:15,900 --> 00:19:22,860
just a constant<font color="#E5E5E5"> string</font><font color="#CCCCCC"> that's just kind</font>

458
00:19:18,450 --> 00:19:23,760
of fixed in<font color="#E5E5E5"> in the parameters so</font><font color="#CCCCCC"> HFC is</font>

459
00:19:22,860 --> 00:19:26,010
<font color="#E5E5E5">going to look a lot like a</font>

460
00:19:23,760 --> 00:19:28,830
merkle-damgard hash function<font color="#CCCCCC"> with a few</font>

461
00:19:26,010 --> 00:19:31,290
<font color="#CCCCCC">principle modifications the first is</font>

462
00:19:28,830 --> 00:19:32,939
that rather than just<font color="#CCCCCC"> hashing the</font>

463
00:19:31,290 --> 00:19:35,940
message we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> prepend a block of</font>

464
00:19:32,940 --> 00:19:38,760
zeros and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> xor the key</font><font color="#E5E5E5"> into every</font>

465
00:19:35,940 --> 00:19:40,980
block of<font color="#E5E5E5"> message now this isn't gonna</font>

466
00:19:38,760 --> 00:19:42,720
result in<font color="#E5E5E5"> a compression function that's</font>

467
00:19:40,980 --> 00:19:45,180
collision resistant in the kind of key

468
00:19:42,720 --> 00:19:46,710
message pairs<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we're gonna be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

469
00:19:45,180 --> 00:19:50,730
recover collision resistance kind of in

470
00:19:46,710 --> 00:19:52,440
<font color="#CCCCCC">in the iteration so to speak the next</font>

471
00:19:50,730 --> 00:19:55,120
thing is rather than kind<font color="#E5E5E5"> of throwing</font>

472
00:19:52,440 --> 00:19:57,519
<font color="#E5E5E5">away the internal chaining variables</font>

473
00:19:55,120 --> 00:19:59,709
in the merkle-damgard<font color="#E5E5E5"> iteration we're</font>

474
00:19:57,519 --> 00:20:02,350
gonna kind of extract<font color="#E5E5E5"> them and use them</font>

475
00:19:59,710 --> 00:20:05,320
as pads in a<font color="#E5E5E5"> camera mode</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of like a</font>

476
00:20:02,350 --> 00:20:07,059
stream cipher<font color="#E5E5E5"> encryption construction to</font>

477
00:20:05,320 --> 00:20:10,750
encrypt the message<font color="#E5E5E5"> and obtain the kind</font>

478
00:20:07,059 --> 00:20:12,668
<font color="#E5E5E5">of ciphertext blocks and finally we're</font>

479
00:20:10,750 --> 00:20:14,289
<font color="#E5E5E5">going to use the</font><font color="#CCCCCC"> the final chaining</font>

480
00:20:12,669 --> 00:20:16,059
variable which is the<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> output of</font>

481
00:20:14,289 --> 00:20:19,899
<font color="#E5E5E5">the merkle-damgard iteration as this</font>

482
00:20:16,059 --> 00:20:23,529
binding tag sees of B so the algorithm

483
00:20:19,899 --> 00:20:24,969
the do and<font color="#CCCCCC"> iver work</font><font color="#E5E5E5"> more or</font><font color="#CCCCCC"> less the</font>

484
00:20:23,529 --> 00:20:26,590
way you would expect<font color="#CCCCCC"> basically you just</font>

485
00:20:24,970 --> 00:20:30,309
rerun the iteration and recover the

486
00:20:26,590 --> 00:20:31,779
message or verify the tag<font color="#E5E5E5"> and so one</font>

487
00:20:30,309 --> 00:20:33,970
cool thing<font color="#E5E5E5"> about this construction is</font>

488
00:20:31,779 --> 00:20:35,620
that<font color="#CCCCCC"> it only</font><font color="#E5E5E5"> requires one pass of the</font>

489
00:20:33,970 --> 00:20:37,330
hash function<font color="#CCCCCC"> all three</font><font color="#E5E5E5"> of these</font>

490
00:20:35,620 --> 00:20:39,399
<font color="#CCCCCC">algorithms just kind</font><font color="#E5E5E5"> of run</font>

491
00:20:37,330 --> 00:20:41,260
merkle-damgard iteration and then you

492
00:20:39,399 --> 00:20:44,709
have a<font color="#E5E5E5"> cipher text or a</font><font color="#CCCCCC"> verification or</font>

493
00:20:41,260 --> 00:20:47,200
whatever so this construction is similar

494
00:20:44,710 --> 00:20:48,970
to two previous<font color="#CCCCCC"> AE</font><font color="#E5E5E5"> constructions the</font>

495
00:20:47,200 --> 00:20:51,220
first is the OM deconstruction of

496
00:20:48,970 --> 00:20:54,340
Colleoni at all and the second is the

497
00:20:51,220 --> 00:20:59,799
the duplex sponge<font color="#E5E5E5"> AE construction by</font>

498
00:20:54,340 --> 00:21:02,709
Buitoni at all so finally we'll see that

499
00:20:59,799 --> 00:21:04,269
this H of<font color="#CCCCCC"> C</font><font color="#E5E5E5"> construction and indeed any</font>

500
00:21:02,710 --> 00:21:07,029
increment construction can be kind<font color="#E5E5E5"> of</font>

501
00:21:04,269 --> 00:21:10,330
generically transformed into a CCE

502
00:21:07,029 --> 00:21:11,590
scheme using a fast transform and so<font color="#CCCCCC"> the</font>

503
00:21:10,330 --> 00:21:14,139
way we're going<font color="#E5E5E5"> to do this is just using</font>

504
00:21:11,590 --> 00:21:17,860
an<font color="#E5E5E5"> additional two compression function</font>

505
00:21:14,139 --> 00:21:20,408
calls as follows so we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

506
00:21:17,860 --> 00:21:23,289
derive<font color="#CCCCCC"> a long-term key</font><font color="#E5E5E5"> which is the kind</font>

507
00:21:20,409 --> 00:21:25,510
of<font color="#E5E5E5"> a long-term a e key and then we're</font>

508
00:21:23,289 --> 00:21:27,309
gonna<font color="#CCCCCC"> use it we're gonna key</font><font color="#E5E5E5"> to</font>

509
00:21:25,510 --> 00:21:29,559
<font color="#E5E5E5">compression function calls with</font><font color="#CCCCCC"> it one</font>

510
00:21:27,309 --> 00:21:31,809
at the beginning<font color="#CCCCCC"> and</font><font color="#E5E5E5"> one at the end the</font>

511
00:21:29,559 --> 00:21:33,549
<font color="#E5E5E5">first thing the first</font><font color="#CCCCCC"> compression</font>

512
00:21:31,809 --> 00:21:35,590
<font color="#E5E5E5">function call with this long term key is</font>

513
00:21:33,549 --> 00:21:37,779
going<font color="#E5E5E5"> to be evaluated on this long term</font>

514
00:21:35,590 --> 00:21:39,639
key and<font color="#E5E5E5"> some like an IV some randomness</font>

515
00:21:37,779 --> 00:21:41,340
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we derive and this is actually</font>

516
00:21:39,639 --> 00:21:43,809
going to be used to<font color="#CCCCCC"> derive the one-time</font>

517
00:21:41,340 --> 00:21:46,470
<font color="#CCCCCC">increment key</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> going to be used</font>

518
00:21:43,809 --> 00:21:49,029
for<font color="#CCCCCC"> kind of a</font><font color="#E5E5E5"> single equipment call and</font>

519
00:21:46,470 --> 00:21:50,409
the last thing we're gonna<font color="#E5E5E5"> do at the end</font>

520
00:21:49,029 --> 00:21:53,230
we're going<font color="#E5E5E5"> to evaluate the compression</font>

521
00:21:50,409 --> 00:21:55,240
<font color="#CCCCCC">function again on with the binding Tagus</font>

522
00:21:53,230 --> 00:21:57,549
input and<font color="#E5E5E5"> the kind of a long term key</font>

523
00:21:55,240 --> 00:22:00,730
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is gonna let us derive a</font><font color="#CCCCCC"> Mac</font>

524
00:21:57,549 --> 00:22:02,799
tag<font color="#E5E5E5"> for this for the</font><font color="#CCCCCC"> cipher text</font><font color="#E5E5E5"> and so</font>

525
00:22:00,730 --> 00:22:05,110
the the cipher<font color="#E5E5E5"> text here is going to be</font>

526
00:22:02,799 --> 00:22:08,320
the<font color="#E5E5E5"> concatenation of the rant this</font>

527
00:22:05,110 --> 00:22:08,740
randomness<font color="#CCCCCC"> here the ciphertext blocks CB</font>

528
00:22:08,320 --> 00:22:13,480
and

529
00:22:08,740 --> 00:22:16,090
tag-team<font color="#E5E5E5"> so in the paper</font><font color="#CCCCCC"> we proved that</font>

530
00:22:13,480 --> 00:22:18,970
if<font color="#E5E5E5"> EC is a secure encryption scheme and</font>

531
00:22:16,090 --> 00:22:21,189
again the the transform I showed I

532
00:22:18,970 --> 00:22:23,350
showed it with<font color="#CCCCCC"> HFC but it is</font><font color="#E5E5E5"> fully</font>

533
00:22:21,190 --> 00:22:25,059
generic for any encryption<font color="#E5E5E5"> scheme and so</font>

534
00:22:23,350 --> 00:22:27,158
if<font color="#CCCCCC"> that encryption</font><font color="#E5E5E5"> scheme is secure and</font>

535
00:22:25,059 --> 00:22:28,690
the compression<font color="#E5E5E5"> function</font><font color="#CCCCCC"> is a PRF then</font>

536
00:22:27,159 --> 00:22:33,760
this construction results in a CCA e

537
00:22:28,690 --> 00:22:36,549
scheme so we just saw<font color="#CCCCCC"> that</font><font color="#E5E5E5"> equipment can</font>

538
00:22:33,760 --> 00:22:38,649
be<font color="#CCCCCC"> used to build CC e</font><font color="#E5E5E5"> pretty quickly and</font>

539
00:22:36,549 --> 00:22:40,510
easily<font color="#E5E5E5"> but encryption is a primitive</font>

540
00:22:38,649 --> 00:22:43,989
<font color="#E5E5E5">that might also have independent</font>

541
00:22:40,510 --> 00:22:45,669
applications in<font color="#CCCCCC"> particular</font><font color="#E5E5E5"> we we show in</font>

542
00:22:43,990 --> 00:22:48,309
the paper how you can use encryption<font color="#E5E5E5"> to</font>

543
00:22:45,669 --> 00:22:50,679
construct single pass<font color="#CCCCCC"> constructions of</font>

544
00:22:48,309 --> 00:22:52,360
things like concealments remote in the

545
00:22:50,679 --> 00:22:54,580
<font color="#E5E5E5">key to authenticate encryption robust</font>

546
00:22:52,360 --> 00:22:55,990
encryption<font color="#CCCCCC"> because I</font><font color="#E5E5E5"> don't really have</font>

547
00:22:54,580 --> 00:22:58,620
<font color="#CCCCCC">time to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that you should</font><font color="#CCCCCC"> see</font>

548
00:22:55,990 --> 00:23:01,929
the paper<font color="#E5E5E5"> for details so in conclusion</font>

549
00:22:58,620 --> 00:23:04,779
this talk<font color="#E5E5E5"> showed four things first was</font>

550
00:23:01,929 --> 00:23:07,270
an attack against Facebook's message

551
00:23:04,779 --> 00:23:08,860
ranking scheme which allowed malicious

552
00:23:07,270 --> 00:23:11,020
senders<font color="#CCCCCC"> to bypass the abuse reporting</font>

553
00:23:08,860 --> 00:23:12,939
functionality<font color="#CCCCCC"> the second was a lower</font>

554
00:23:11,020 --> 00:23:18,279
bound on the efficiency<font color="#CCCCCC"> of ccae</font>

555
00:23:12,940 --> 00:23:19,840
ruling out very fast<font color="#CCCCCC"> ccae schemes the</font>

556
00:23:18,279 --> 00:23:21,549
third was a new primitive<font color="#E5E5E5"> which we call</font>

557
00:23:19,840 --> 00:23:22,959
equipment and a construction of

558
00:23:21,549 --> 00:23:24,970
increment<font color="#E5E5E5"> which we call hash function</font>

559
00:23:22,960 --> 00:23:26,980
chaining the fourth is a way to

560
00:23:24,970 --> 00:23:30,250
transform<font color="#E5E5E5"> any equipment scheme into a</font>

561
00:23:26,980 --> 00:23:33,130
<font color="#CCCCCC">ccae scheme in a kind of generic</font><font color="#E5E5E5"> and</font>

562
00:23:30,250 --> 00:23:35,050
efficient transformation so thanks<font color="#CCCCCC"> for</font>

563
00:23:33,130 --> 00:23:40,069
<font color="#CCCCCC">listening are there any</font><font color="#E5E5E5"> questions</font>

564
00:23:35,050 --> 00:23:40,069
[Applause]

