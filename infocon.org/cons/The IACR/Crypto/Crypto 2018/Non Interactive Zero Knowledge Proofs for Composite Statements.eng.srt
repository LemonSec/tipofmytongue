1
00:00:05,220 --> 00:00:09,129
thank you<font color="#CCCCCC"> I'll talk about</font>

2
00:00:07,420 --> 00:00:10,809
non-interactive<font color="#E5E5E5"> zero-knowledge proves</font>

3
00:00:09,129 --> 00:00:12,519
for composite statements this is joint

4
00:00:10,809 --> 00:00:16,029
work<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Shashank</font><font color="#E5E5E5"> arrival and payment</font>

5
00:00:12,519 --> 00:00:18,130
<font color="#CCCCCC">mahadji zero knowledge proof spre</font><font color="#E5E5E5"> vide a</font>

6
00:00:16,029 --> 00:00:20,380
powerful<font color="#E5E5E5"> tool that allows</font><font color="#CCCCCC"> approver to</font>

7
00:00:18,130 --> 00:00:21,910
convince a verifier<font color="#E5E5E5"> that a statement is</font>

8
00:00:20,380 --> 00:00:23,860
<font color="#E5E5E5">true without revealing any further</font>

9
00:00:21,910 --> 00:00:25,619
information<font color="#CCCCCC"> zero knowledge proof</font>

10
00:00:23,860 --> 00:00:28,000
satisfies the<font color="#CCCCCC"> following two properties</font>

11
00:00:25,619 --> 00:00:30,309
<font color="#E5E5E5">soundness which means that a cheating</font>

12
00:00:28,000 --> 00:00:32,558
prover cannot convince a verifier of a

13
00:00:30,309 --> 00:00:34,059
statement that is false and the property

14
00:00:32,558 --> 00:00:36,010
of<font color="#CCCCCC"> zero knowledge</font><font color="#E5E5E5"> which means that a</font>

15
00:00:34,059 --> 00:00:37,718
cheating verifier cannot learn anything

16
00:00:36,010 --> 00:00:40,780
<font color="#E5E5E5">more than the validity of the statement</font>

17
00:00:37,719 --> 00:00:42,550
<font color="#E5E5E5">itself it is</font><font color="#CCCCCC"> known that</font><font color="#E5E5E5"> all languages in</font>

18
00:00:40,780 --> 00:00:44,829
<font color="#CCCCCC">NP have</font><font color="#E5E5E5"> a zero knowledge proof system</font>

19
00:00:42,550 --> 00:00:46,899
<font color="#E5E5E5">but it remains challenging</font><font color="#CCCCCC"> to design</font>

20
00:00:44,829 --> 00:00:50,320
proof systems that are efficient<font color="#E5E5E5"> enough</font>

21
00:00:46,899 --> 00:00:51,850
<font color="#CCCCCC">to be</font><font color="#E5E5E5"> implemented in practice so if we</font>

22
00:00:50,320 --> 00:00:54,129
look at the<font color="#CCCCCC"> state-of-the-art</font><font color="#E5E5E5"> and zero</font>

23
00:00:51,850 --> 00:00:55,929
knowledge<font color="#CCCCCC"> today we have</font><font color="#E5E5E5"> Sigma protocols</font>

24
00:00:54,129 --> 00:00:57,940
that<font color="#E5E5E5"> are efficient in terms of proof</font>

25
00:00:55,929 --> 00:01:00,159
size and publicly operations for both

26
00:00:57,940 --> 00:01:02,979
<font color="#CCCCCC">the prover and the verifier and they do</font>

27
00:01:00,159 --> 00:01:04,750
not rely on any<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> assumptions but</font>

28
00:01:02,979 --> 00:01:06,580
they apply only to a<font color="#E5E5E5"> restricted set of</font>

29
00:01:04,750 --> 00:01:08,710
languages<font color="#E5E5E5"> like proving knowledge of</font>

30
00:01:06,580 --> 00:01:11,259
discrete<font color="#E5E5E5"> logarithm of a public value or</font>

31
00:01:08,710 --> 00:01:14,949
roots or polynomial relationships among

32
00:01:11,260 --> 00:01:16,690
committed values and so on<font color="#E5E5E5"> then there</font>

33
00:01:14,950 --> 00:01:19,570
<font color="#E5E5E5">are approaches that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> based on garbled</font>

34
00:01:16,690 --> 00:01:21,940
circuits and<font color="#CCCCCC"> MPC in the head</font><font color="#E5E5E5"> this line</font>

35
00:01:19,570 --> 00:01:23,710
of work<font color="#E5E5E5"> is very efficient for the prover</font>

36
00:01:21,940 --> 00:01:26,920
requiring only<font color="#CCCCCC"> a few symmetric key</font>

37
00:01:23,710 --> 00:01:28,630
operations per gate in the circuit<font color="#E5E5E5"> but</font>

38
00:01:26,920 --> 00:01:30,700
<font color="#E5E5E5">unfortunately they lead to large proofs</font>

39
00:01:28,630 --> 00:01:32,259
<font color="#CCCCCC">and the system based on</font><font color="#E5E5E5"> garbled circuit</font>

40
00:01:30,700 --> 00:01:35,260
<font color="#CCCCCC">also leads to a proved</font><font color="#E5E5E5"> system that is</font>

41
00:01:32,260 --> 00:01:37,000
interactive<font color="#CCCCCC"> and then we have succinct</font>

42
00:01:35,260 --> 00:01:39,400
<font color="#E5E5E5">non interactive arguments of knowledge</font>

43
00:01:37,000 --> 00:01:41,110
also<font color="#E5E5E5"> called snarks or they allow for</font>

44
00:01:39,400 --> 00:01:43,480
<font color="#CCCCCC">very short proofs and efficient</font>

45
00:01:41,110 --> 00:01:45,730
verification but they rely on a trusted

46
00:01:43,480 --> 00:01:47,710
<font color="#E5E5E5">setup and they also require approval</font>

47
00:01:45,730 --> 00:01:51,040
public key operations per gate in the

48
00:01:47,710 --> 00:01:53,169
circuit<font color="#E5E5E5"> so now we have very different</font>

49
00:01:51,040 --> 00:01:54,880
techniques to prove different kinds<font color="#E5E5E5"> of</font>

50
00:01:53,170 --> 00:01:56,890
statements<font color="#CCCCCC"> if we want to</font><font color="#E5E5E5"> prove an</font>

51
00:01:54,880 --> 00:01:58,750
algebraic statement<font color="#E5E5E5"> like knowledge of a</font>

52
00:01:56,890 --> 00:02:01,540
discrete<font color="#CCCCCC"> logarithm of a public value Y</font>

53
00:01:58,750 --> 00:02:03,310
Sigma protocols are really efficient<font color="#E5E5E5"> on</font>

54
00:02:01,540 --> 00:02:05,110
the<font color="#CCCCCC"> other hand if we want</font><font color="#E5E5E5"> to prove a non</font>

55
00:02:03,310 --> 00:02:07,450
algebraic statement<font color="#E5E5E5"> that's represented</font>

56
00:02:05,110 --> 00:02:09,419
as a circuit<font color="#CCCCCC"> for instance knowledge of</font>

57
00:02:07,450 --> 00:02:11,830
<font color="#CCCCCC">preimage of</font><font color="#E5E5E5"> a hash</font><font color="#CCCCCC"> function like sha</font>

58
00:02:09,419 --> 00:02:13,420
<font color="#E5E5E5">then the garbled circuit approach or the</font>

59
00:02:11,830 --> 00:02:16,900
<font color="#E5E5E5">snark approach is more efficient than</font>

60
00:02:13,420 --> 00:02:18,250
Sigma protocols<font color="#E5E5E5"> so the question is how</font>

61
00:02:16,900 --> 00:02:19,900
do<font color="#E5E5E5"> we prove a statement</font>

62
00:02:18,250 --> 00:02:22,050
that is a combination<font color="#CCCCCC"> of an algebraic</font>

63
00:02:19,900 --> 00:02:24,520
component and a non algebraic component

64
00:02:22,050 --> 00:02:26,470
we call such statements composite

65
00:02:24,520 --> 00:02:29,560
statements and<font color="#CCCCCC"> ask how to</font><font color="#E5E5E5"> efficiently</font>

66
00:02:26,470 --> 00:02:31,060
prove such composite statements such

67
00:02:29,560 --> 00:02:34,060
statements frequently arise in practice

68
00:02:31,060 --> 00:02:35,800
<font color="#CCCCCC">and for the purposes</font><font color="#E5E5E5"> of this talk we</font>

69
00:02:34,060 --> 00:02:37,330
look at privacy-preserving<font color="#CCCCCC"> audits and</font>

70
00:02:35,800 --> 00:02:40,900
<font color="#CCCCCC">cryptocurrencies as a motivating</font>

71
00:02:37,330 --> 00:02:42,970
application so we have the Bitcoin

72
00:02:40,900 --> 00:02:45,100
<font color="#CCCCCC">network here and most Bitcoin users</font>

73
00:02:42,970 --> 00:02:48,400
<font color="#E5E5E5">prefer to store their assets</font><font color="#CCCCCC"> on an</font>

74
00:02:45,100 --> 00:02:50,200
<font color="#CCCCCC">exchange like coinbase</font><font color="#E5E5E5"> which provides</font>

75
00:02:48,400 --> 00:02:52,540
<font color="#E5E5E5">services like online banking with</font>

76
00:02:50,200 --> 00:02:54,579
account management<font color="#E5E5E5"> and so</font><font color="#CCCCCC"> on while this</font>

77
00:02:52,540 --> 00:02:56,739
<font color="#E5E5E5">is very convenient</font><font color="#CCCCCC"> this also leaves</font><font color="#E5E5E5"> the</font>

78
00:02:54,580 --> 00:02:59,350
users vulnerable to loss of their assets

79
00:02:56,739 --> 00:03:03,010
<font color="#CCCCCC">in case the exchange loses bitcoins due</font>

80
00:02:59,350 --> 00:03:05,260
to fault or fraud<font color="#CCCCCC"> a famously mount</font><font color="#E5E5E5"> GOx</font>

81
00:03:03,010 --> 00:03:07,989
which was one of<font color="#CCCCCC"> the largest exchanges</font><font color="#E5E5E5"> a</font>

82
00:03:05,260 --> 00:03:10,269
few years ago<font color="#E5E5E5"> and handled</font><font color="#CCCCCC"> about 70% of</font>

83
00:03:07,989 --> 00:03:12,459
all Bitcoin transactions<font color="#E5E5E5"> filed for</font>

84
00:03:10,270 --> 00:03:16,120
bankruptcy but only<font color="#E5E5E5"> after losing for</font>

85
00:03:12,459 --> 00:03:18,340
fifty million dollars in<font color="#CCCCCC"> client money so</font>

86
00:03:16,120 --> 00:03:20,380
the goal<font color="#CCCCCC"> here is it is desirable</font><font color="#E5E5E5"> to have</font>

87
00:03:18,340 --> 00:03:23,860
<font color="#CCCCCC">exchanges prove that they are solvent</font>

88
00:03:20,380 --> 00:03:25,810
<font color="#CCCCCC">and what does it</font><font color="#E5E5E5"> mean to be solvent it</font>

89
00:03:23,860 --> 00:03:28,209
means that the exchange controls<font color="#E5E5E5"> enough</font>

90
00:03:25,810 --> 00:03:32,350
assets<font color="#E5E5E5"> to clear each of its customers</font>

91
00:03:28,209 --> 00:03:34,420
balances<font color="#E5E5E5"> and this is easy to do if it is</font>

92
00:03:32,350 --> 00:03:36,730
public<font color="#E5E5E5"> what bitcoin addresses and</font>

93
00:03:34,420 --> 00:03:38,109
exchange controls and a list<font color="#E5E5E5"> of its</font>

94
00:03:36,730 --> 00:03:40,929
customers along<font color="#E5E5E5"> with their corresponding</font>

95
00:03:38,110 --> 00:03:43,090
<font color="#E5E5E5">balances one can publicly compute the</font>

96
00:03:40,930 --> 00:03:45,820
total<font color="#CCCCCC"> assets of the exchange and the</font>

97
00:03:43,090 --> 00:03:47,980
total<font color="#CCCCCC"> liabilities</font><font color="#E5E5E5"> and check that the</font>

98
00:03:45,820 --> 00:03:49,870
total assets is at<font color="#E5E5E5"> least as much of as</font>

99
00:03:47,980 --> 00:03:53,950
the total<font color="#CCCCCC"> liabilities and</font><font color="#E5E5E5"> therefore the</font>

100
00:03:49,870 --> 00:03:56,769
<font color="#CCCCCC">exchanges indeed solvent but</font><font color="#E5E5E5"> this is of</font>

101
00:03:53,950 --> 00:03:58,780
course<font color="#E5E5E5"> not private it reveals both the</font>

102
00:03:56,769 --> 00:04:00,610
<font color="#E5E5E5">total holdings of the exchange itself</font>

103
00:03:58,780 --> 00:04:04,239
and the holdings<font color="#E5E5E5"> of each of its</font>

104
00:04:00,610 --> 00:04:06,070
customers so the question is can we<font color="#E5E5E5"> have</font>

105
00:04:04,239 --> 00:04:07,930
an exchange prove that it is solvent

106
00:04:06,070 --> 00:04:12,370
while preserving<font color="#E5E5E5"> privacy of the exchange</font>

107
00:04:07,930 --> 00:04:14,079
<font color="#CCCCCC">and</font><font color="#E5E5E5"> its customers the</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> of the art</font>

108
00:04:12,370 --> 00:04:15,880
in our privacy<font color="#E5E5E5"> preserving proof of</font>

109
00:04:14,079 --> 00:04:17,590
<font color="#E5E5E5">solvency is a system called prohibitions</font>

110
00:04:15,880 --> 00:04:19,390
<font color="#CCCCCC">that was proposed a couple of years ago</font>

111
00:04:17,589 --> 00:04:21,940
which is based on Sigma protocol proofs

112
00:04:19,390 --> 00:04:23,770
but unfortunately it doesn't work<font color="#E5E5E5"> for</font>

113
00:04:21,940 --> 00:04:26,620
Bitcoin because of the following<font color="#E5E5E5"> reason</font>

114
00:04:23,770 --> 00:04:29,380
<font color="#CCCCCC">if we look at</font><font color="#E5E5E5"> Bitcoin addresses they are</font>

115
00:04:26,620 --> 00:04:30,400
of the<font color="#E5E5E5"> form H which</font><font color="#CCCCCC"> is hash of</font><font color="#E5E5E5"> Y where Y</font>

116
00:04:29,380 --> 00:04:33,940
<font color="#E5E5E5">is G to the</font>

117
00:04:30,400 --> 00:04:36,250
for a secret<font color="#CCCCCC"> P X and H is a</font>

118
00:04:33,940 --> 00:04:38,050
cryptographic<font color="#CCCCCC"> hash function</font><font color="#E5E5E5"> so if we</font>

119
00:04:36,250 --> 00:04:40,990
look at the statement<font color="#CCCCCC"> that we want to</font>

120
00:04:38,050 --> 00:04:43,210
prove<font color="#E5E5E5"> for a proof</font><font color="#CCCCCC"> of solvency it</font>

121
00:04:40,990 --> 00:04:46,150
involves proving knowledge of<font color="#E5E5E5"> X and Y</font>

122
00:04:43,210 --> 00:04:49,239
such that Y<font color="#CCCCCC"> is G to the</font><font color="#E5E5E5"> X and hash of</font><font color="#CCCCCC"> Y</font>

123
00:04:46,150 --> 00:04:52,270
is H for a public<font color="#E5E5E5"> edge now notice that</font>

124
00:04:49,240 --> 00:04:54,610
this involves a non algebraic component

125
00:04:52,270 --> 00:04:55,960
which is<font color="#E5E5E5"> the hash function here and an</font>

126
00:04:54,610 --> 00:04:57,910
algebraic component which is<font color="#E5E5E5"> the</font>

127
00:04:55,960 --> 00:04:59,440
exponentiation<font color="#E5E5E5"> here so we have a</font>

128
00:04:57,910 --> 00:05:01,180
<font color="#E5E5E5">composite statement and because</font>

129
00:04:59,440 --> 00:05:03,160
provisions is based on Sigma protocol

130
00:05:01,180 --> 00:05:08,110
proofs<font color="#CCCCCC"> it does not really</font><font color="#E5E5E5"> work with</font>

131
00:05:03,160 --> 00:05:09,580
Bitcoin hash addresses of this form<font color="#E5E5E5"> so</font>

132
00:05:08,110 --> 00:05:11,590
how do<font color="#E5E5E5"> we prove such a composite</font>

133
00:05:09,580 --> 00:05:13,719
statement<font color="#E5E5E5"> in principle one could use</font>

134
00:05:11,590 --> 00:05:15,489
Sigma protocols to even prove a non

135
00:05:13,720 --> 00:05:17,919
algebraic statement represented as a

136
00:05:15,490 --> 00:05:19,900
circuit by writing out each gate as an

137
00:05:17,919 --> 00:05:21,520
algebraic relation between the input<font color="#CCCCCC"> and</font>

138
00:05:19,900 --> 00:05:24,250
<font color="#E5E5E5">the output wires and using Sigma</font>

139
00:05:21,520 --> 00:05:25,510
protocols to prove such a relation but

140
00:05:24,250 --> 00:05:27,880
that don't mean the prover

141
00:05:25,510 --> 00:05:29,770
<font color="#E5E5E5">exponentiation and the proof size grows</font>

142
00:05:27,880 --> 00:05:31,509
with the size<font color="#E5E5E5"> of the circuit and it</font>

143
00:05:29,770 --> 00:05:33,909
becomes prohibitively expensive<font color="#E5E5E5"> for</font>

144
00:05:31,509 --> 00:05:36,550
large circuits like<font color="#E5E5E5"> a hash function on</font>

145
00:05:33,910 --> 00:05:38,349
the other hand we could also prove

146
00:05:36,550 --> 00:05:40,419
algebraic statements by writing<font color="#E5E5E5"> it out</font>

147
00:05:38,349 --> 00:05:43,030
<font color="#E5E5E5">as a circuit and using circuit based</font>

148
00:05:40,419 --> 00:05:44,740
proofs like snarks but this would<font color="#E5E5E5"> mean</font>

149
00:05:43,030 --> 00:05:47,049
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we have to represent group</font>

150
00:05:44,740 --> 00:05:49,150
operations as a circuit and this<font color="#E5E5E5"> would</font>

151
00:05:47,050 --> 00:05:52,120
<font color="#E5E5E5">blow up the size of the circuit for</font>

152
00:05:49,150 --> 00:05:55,630
instance exponentiation requires cubic

153
00:05:52,120 --> 00:05:59,110
size for<font color="#E5E5E5"> n where n is</font><font color="#CCCCCC"> the bit size</font><font color="#E5E5E5"> of</font>

154
00:05:55,630 --> 00:06:01,000
the modulus so what we ideally want<font color="#E5E5E5"> to</font>

155
00:05:59,110 --> 00:06:02,560
<font color="#E5E5E5">do is to use Sigma protocols for the</font>

156
00:06:01,000 --> 00:06:04,270
algebraic part<font color="#E5E5E5"> of the statement</font><font color="#CCCCCC"> and</font>

157
00:06:02,560 --> 00:06:08,830
snark for the non algebraic<font color="#E5E5E5"> part of the</font>

158
00:06:04,270 --> 00:06:10,240
<font color="#E5E5E5">statement can we simply combine two</font>

159
00:06:08,830 --> 00:06:11,620
<font color="#CCCCCC">different protocols one for the</font>

160
00:06:10,240 --> 00:06:14,349
algebraic<font color="#E5E5E5"> part and one for</font><font color="#CCCCCC"> the non</font>

161
00:06:11,620 --> 00:06:16,120
algebraic<font color="#E5E5E5"> part if we</font><font color="#CCCCCC"> do that a cheating</font>

162
00:06:14,349 --> 00:06:18,130
<font color="#E5E5E5">prove</font><font color="#CCCCCC"> our could simply use two different</font>

163
00:06:16,120 --> 00:06:20,500
witnesses<font color="#CCCCCC"> in the two different</font><font color="#E5E5E5"> protocols</font>

164
00:06:18,130 --> 00:06:22,960
<font color="#E5E5E5">without having a single valid witness</font>

165
00:06:20,500 --> 00:06:24,820
for the entire combination statement<font color="#E5E5E5"> so</font>

166
00:06:22,960 --> 00:06:27,638
such a live combination does not work

167
00:06:24,820 --> 00:06:29,590
<font color="#CCCCCC">and one of the challenges we face when</font>

168
00:06:27,639 --> 00:06:31,330
<font color="#E5E5E5">dealing with composite statements is to</font>

169
00:06:29,590 --> 00:06:33,669
be able to<font color="#E5E5E5"> bind the values that the</font>

170
00:06:31,330 --> 00:06:35,349
prover uses in the Sigma protocol with

171
00:06:33,669 --> 00:06:38,049
<font color="#E5E5E5">the input</font><font color="#CCCCCC"> that he uses in the snark</font>

172
00:06:35,349 --> 00:06:40,810
proof<font color="#E5E5E5"> and we want to be</font><font color="#CCCCCC"> able to do this</font>

173
00:06:38,050 --> 00:06:42,940
without having<font color="#E5E5E5"> to</font><font color="#CCCCCC"> prove large circuit</font>

174
00:06:40,810 --> 00:06:44,620
statements using<font color="#E5E5E5"> Sigma protocols</font>

175
00:06:42,940 --> 00:06:49,420
without<font color="#E5E5E5"> having</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> represent group</font>

176
00:06:44,620 --> 00:06:50,680
operations as circuits so we study how

177
00:06:49,420 --> 00:06:53,140
<font color="#E5E5E5">to prove composite statements</font>

178
00:06:50,680 --> 00:06:54,820
efficiently and show the following<font color="#E5E5E5"> we</font>

179
00:06:53,140 --> 00:06:56,890
give constructions for snark on

180
00:06:54,820 --> 00:06:59,469
algebraically committed input and output

181
00:06:56,890 --> 00:07:02,530
<font color="#E5E5E5">and then we give constructions of Sigma</font>

182
00:06:59,470 --> 00:07:04,240
protocols on committed output then<font color="#CCCCCC"> we</font>

183
00:07:02,530 --> 00:07:06,159
show how<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> these two building</font>

184
00:07:04,240 --> 00:07:08,290
<font color="#CCCCCC">blocks to prove composite statements</font>

185
00:07:06,160 --> 00:07:10,380
that arbitrarily compose algebraic and

186
00:07:08,290 --> 00:07:13,000
arithmetic representations of functions

187
00:07:10,380 --> 00:07:15,400
<font color="#E5E5E5">for instance a composite function like</font>

188
00:07:13,000 --> 00:07:16,630
this where each if I could have an

189
00:07:15,400 --> 00:07:18,580
<font color="#E5E5E5">arithmetic or an algebraic</font>

190
00:07:16,630 --> 00:07:23,260
representation and have<font color="#E5E5E5"> shared secret</font>

191
00:07:18,580 --> 00:07:25,120
inputs<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> begin by</font><font color="#CCCCCC"> talking about snark</font>

192
00:07:23,260 --> 00:07:28,570
construction on algebraically committed

193
00:07:25,120 --> 00:07:30,460
input and output our starting point is

194
00:07:28,570 --> 00:07:32,050
<font color="#E5E5E5">the</font><font color="#CCCCCC"> snark construction based on a</font>

195
00:07:30,460 --> 00:07:34,090
<font color="#E5E5E5">quadratic arithmetic program</font>

196
00:07:32,050 --> 00:07:36,370
representation of an arithmetic<font color="#E5E5E5"> circuit</font>

197
00:07:34,090 --> 00:07:40,060
<font color="#CCCCCC">I will give a very high-level</font><font color="#E5E5E5"> overview</font>

198
00:07:36,370 --> 00:07:41,410
<font color="#E5E5E5">of a quadratic arithmetic program so we</font>

199
00:07:40,060 --> 00:07:44,050
have a circuit with addition and

200
00:07:41,410 --> 00:07:45,790
<font color="#CCCCCC">multiplication gates over a field and a</font>

201
00:07:44,050 --> 00:07:47,770
quadratic arithmetic program encodes

202
00:07:45,790 --> 00:07:50,590
this computation in the<font color="#E5E5E5"> following way</font>

203
00:07:47,770 --> 00:07:52,599
we pick a distinct root<font color="#E5E5E5"> RG for each</font>

204
00:07:50,590 --> 00:07:54,789
multiplicative gate in the circuit and

205
00:07:52,600 --> 00:07:57,100
define a polynomial<font color="#CCCCCC"> that is called the</font>

206
00:07:54,790 --> 00:08:01,090
<font color="#E5E5E5">target polynomial to have roots at each</font>

207
00:07:57,100 --> 00:08:03,669
of these chosen<font color="#CCCCCC"> RG</font><font color="#E5E5E5"> and now to encode the</font>

208
00:08:01,090 --> 00:08:06,729
values on the<font color="#E5E5E5"> wires we define sets of</font>

209
00:08:03,669 --> 00:08:08,530
<font color="#E5E5E5">polynomials</font><font color="#CCCCCC"> V W</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Y where the</font>

210
00:08:06,730 --> 00:08:11,050
high-level idea is that the we set

211
00:08:08,530 --> 00:08:13,840
handles the left input<font color="#E5E5E5"> of a gate so we</font>

212
00:08:11,050 --> 00:08:16,110
<font color="#E5E5E5">define</font><font color="#CCCCCC"> V I of RG to be</font><font color="#E5E5E5"> 1 if the</font><font color="#CCCCCC"> iith</font>

213
00:08:13,840 --> 00:08:19,210
wire is the left input<font color="#E5E5E5"> of the gate and</font>

214
00:08:16,110 --> 00:08:22,390
the W set of polynomials handles the

215
00:08:19,210 --> 00:08:24,609
right input to forget so WI at RG is 1

216
00:08:22,390 --> 00:08:27,159
if the<font color="#CCCCCC"> eyuth wire is the right input of</font>

217
00:08:24,610 --> 00:08:29,200
a gate and 0 otherwise<font color="#CCCCCC"> and the Y</font>

218
00:08:27,160 --> 00:08:31,900
polynomials handle the output of<font color="#E5E5E5"> the</font>

219
00:08:29,200 --> 00:08:34,919
gate<font color="#E5E5E5"> so why I of RG is 1 if the</font><font color="#CCCCCC"> eyuth</font>

220
00:08:31,900 --> 00:08:38,799
wire is the<font color="#CCCCCC"> output wire and 0 otherwise</font>

221
00:08:34,919 --> 00:08:40,510
<font color="#E5E5E5">so to illustrate this if I label the</font>

222
00:08:38,799 --> 00:08:43,838
input and output wires of<font color="#CCCCCC"> the gain G</font>

223
00:08:40,510 --> 00:08:45,850
here as<font color="#E5E5E5"> 1 2 & 3 we see that V 1 of RJ is</font>

224
00:08:43,839 --> 00:08:48,940
1<font color="#E5E5E5"> because 1 is the left</font><font color="#CCCCCC"> input of the</font>

225
00:08:45,850 --> 00:08:52,060
gain G and we do and V 3 of<font color="#CCCCCC"> RG will be 0</font>

226
00:08:48,940 --> 00:08:55,570
<font color="#E5E5E5">W 2 of RG is 1 because</font><font color="#CCCCCC"> 2 is the right</font>

227
00:08:52,060 --> 00:08:59,920
input wire of the<font color="#CCCCCC"> gain G + y 3 of our</font>

228
00:08:55,570 --> 00:09:02,050
is<font color="#E5E5E5"> one so now the quadratic arithmetic</font>

229
00:08:59,920 --> 00:09:04,270
program itself consists of these sets of

230
00:09:02,050 --> 00:09:07,390
<font color="#E5E5E5">polynomials and the target polynomial</font>

231
00:09:04,270 --> 00:09:10,480
<font color="#E5E5E5">and it is said to compute the circuit</font><font color="#CCCCCC"> F</font>

232
00:09:07,390 --> 00:09:13,810
if the following condition holds<font color="#E5E5E5"> a 1 to</font>

233
00:09:10,480 --> 00:09:16,210
a n and a<font color="#CCCCCC"> k2 am</font><font color="#E5E5E5"> is a valid</font><font color="#CCCCCC"> assignment of</font>

234
00:09:13,810 --> 00:09:18,760
the input<font color="#E5E5E5"> and output</font><font color="#CCCCCC"> variables of F if</font>

235
00:09:16,210 --> 00:09:21,700
and<font color="#E5E5E5"> only if there</font><font color="#CCCCCC"> exists intermediate</font>

236
00:09:18,760 --> 00:09:24,939
values of a that<font color="#E5E5E5"> is a n plus 1 to a</font><font color="#CCCCCC"> k</font>

237
00:09:21,700 --> 00:09:27,390
minus 1 such<font color="#CCCCCC"> that the target polynomial</font>

238
00:09:24,940 --> 00:09:31,270
divides this<font color="#CCCCCC"> polynomial expression P</font>

239
00:09:27,390 --> 00:09:34,000
this<font color="#E5E5E5"> polynomial P is is a linear</font>

240
00:09:31,270 --> 00:09:35,620
combination<font color="#E5E5E5"> of the V polynomials and the</font>

241
00:09:34,000 --> 00:09:39,130
W polynomials<font color="#CCCCCC"> minus</font><font color="#E5E5E5"> the linear</font>

242
00:09:35,620 --> 00:09:40,540
combination of the Y polynomials so at a

243
00:09:39,130 --> 00:09:42,189
<font color="#E5E5E5">very high</font><font color="#CCCCCC"> level why does this</font>

244
00:09:40,540 --> 00:09:44,530
divisibility condition encode<font color="#E5E5E5"> this</font>

245
00:09:42,190 --> 00:09:46,900
computation if we look at the

246
00:09:44,530 --> 00:09:48,850
divisibility<font color="#CCCCCC"> it means that at every root</font>

247
00:09:46,900 --> 00:09:51,579
<font color="#E5E5E5">our G of</font><font color="#CCCCCC"> the target polynomial T the</font>

248
00:09:48,850 --> 00:09:54,580
polynomial P is 0 and that<font color="#CCCCCC"> gives</font><font color="#E5E5E5"> us this</font>

249
00:09:51,580 --> 00:09:58,510
equality<font color="#E5E5E5"> and at a</font><font color="#CCCCCC"> particular gate G at</font>

250
00:09:54,580 --> 00:10:00,250
root<font color="#CCCCCC"> RG this equality basically gives</font><font color="#E5E5E5"> us</font>

251
00:09:58,510 --> 00:10:03,220
<font color="#E5E5E5">the gate equation because of</font><font color="#CCCCCC"> the way we</font>

252
00:10:00,250 --> 00:10:05,230
have<font color="#CCCCCC"> defined the V and W polynomials so</font>

253
00:10:03,220 --> 00:10:12,040
the divisibility<font color="#E5E5E5"> check handles all</font><font color="#CCCCCC"> the</font>

254
00:10:05,230 --> 00:10:13,750
gate equations in parallel now to

255
00:10:12,040 --> 00:10:15,880
construct<font color="#E5E5E5"> a snark from a quadratic</font>

256
00:10:13,750 --> 00:10:18,790
arithmetic program representation of a

257
00:10:15,880 --> 00:10:21,340
circuit the<font color="#E5E5E5"> high-level idea is to encode</font>

258
00:10:18,790 --> 00:10:24,040
the polynomials<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> qap in the CRS</font>

259
00:10:21,340 --> 00:10:25,810
<font color="#E5E5E5">and this is done by evaluating</font><font color="#CCCCCC"> each of</font>

260
00:10:24,040 --> 00:10:27,760
these polynomials<font color="#E5E5E5"> at a secret point in</font>

261
00:10:25,810 --> 00:10:29,969
the field<font color="#E5E5E5"> and encoding it by</font>

262
00:10:27,760 --> 00:10:32,260
exponentiating within a bilinear group

263
00:10:29,970 --> 00:10:34,600
so<font color="#E5E5E5"> I show it here only for the V</font>

264
00:10:32,260 --> 00:10:37,660
polynomials but this is done for W<font color="#CCCCCC"> and Y</font>

265
00:10:34,600 --> 00:10:41,860
polynomials as well<font color="#E5E5E5"> and now the prover</font>

266
00:10:37,660 --> 00:10:45,160
uses the witness to compute the values

267
00:10:41,860 --> 00:10:48,490
on the<font color="#CCCCCC"> wires the AIS</font><font color="#E5E5E5"> and now are using</font>

268
00:10:45,160 --> 00:10:50,319
<font color="#E5E5E5">VC RS and the AI values he can compute</font>

269
00:10:48,490 --> 00:10:52,960
the encoding of the<font color="#E5E5E5"> four polynomials</font>

270
00:10:50,320 --> 00:10:54,970
here so the V polynomial is a linear

271
00:10:52,960 --> 00:10:56,680
<font color="#E5E5E5">combination of the VI polynomials where</font>

272
00:10:54,970 --> 00:11:00,610
the coefficients are<font color="#CCCCCC"> the wire values</font>

273
00:10:56,680 --> 00:11:02,319
<font color="#E5E5E5">that he</font><font color="#CCCCCC"> obtained W&Y polynomials are</font>

274
00:11:00,610 --> 00:11:05,530
defined in<font color="#E5E5E5"> a similar way with the same</font>

275
00:11:02,320 --> 00:11:08,030
coefficients AI<font color="#E5E5E5"> H is the quotient</font>

276
00:11:05,530 --> 00:11:09,980
polynomial with respect to T

277
00:11:08,030 --> 00:11:13,730
well<font color="#CCCCCC"> tea is the target polynomial of the</font>

278
00:11:09,980 --> 00:11:15,890
quadratic arithmetic program<font color="#E5E5E5"> and now the</font>

279
00:11:13,730 --> 00:11:18,170
divisibility<font color="#E5E5E5"> check of the</font><font color="#CCCCCC"> qap can</font>

280
00:11:15,890 --> 00:11:20,780
proceed using<font color="#E5E5E5"> the bilinear map so this</font>

281
00:11:18,170 --> 00:11:25,760
verification equation here tests for the

282
00:11:20,780 --> 00:11:28,459
divisibility<font color="#E5E5E5"> now to construct</font><font color="#CCCCCC"> a snark on</font>

283
00:11:25,760 --> 00:11:31,010
committed input<font color="#CCCCCC"> we</font><font color="#E5E5E5"> begin with the</font><font color="#CCCCCC"> QA P</font>

284
00:11:28,460 --> 00:11:33,320
based snark<font color="#CCCCCC"> and then separate the</font>

285
00:11:31,010 --> 00:11:35,720
circuit wires into committed input and

286
00:11:33,320 --> 00:11:37,640
intermediate values so we have a

287
00:11:35,720 --> 00:11:40,850
distinct CRS and proof elements

288
00:11:37,640 --> 00:11:42,770
corresponding to them recall<font color="#CCCCCC"> that in a</font>

289
00:11:40,850 --> 00:11:44,600
<font color="#E5E5E5">QA p</font><font color="#CCCCCC"> based not the prover computes the</font>

290
00:11:42,770 --> 00:11:45,470
<font color="#E5E5E5">encoding of these four polynomials like</font>

291
00:11:44,600 --> 00:11:48,290
<font color="#E5E5E5">we just saw</font>

292
00:11:45,470 --> 00:11:50,420
and now<font color="#E5E5E5"> the prover computes the encoding</font>

293
00:11:48,290 --> 00:11:53,630
of two different polynomials<font color="#CCCCCC"> we</font><font color="#E5E5E5"> come and</font>

294
00:11:50,420 --> 00:11:55,849
<font color="#E5E5E5">we met where we define we come to be a</font>

295
00:11:53,630 --> 00:11:58,280
linear<font color="#CCCCCC"> combination of the VI polynomials</font>

296
00:11:55,850 --> 00:12:00,320
<font color="#E5E5E5">but</font><font color="#CCCCCC"> only for those via values that</font>

297
00:11:58,280 --> 00:12:02,839
correspond to the committed input and

298
00:12:00,320 --> 00:12:04,730
the V mid polynomial is a linear

299
00:12:02,840 --> 00:12:06,500
combination<font color="#E5E5E5"> of the VI polynomial but</font>

300
00:12:04,730 --> 00:12:10,880
<font color="#CCCCCC">only for those indices of wires that</font>

301
00:12:06,500 --> 00:12:12,560
<font color="#E5E5E5">correspond to the intermediate values so</font>

302
00:12:10,880 --> 00:12:14,270
this<font color="#CCCCCC"> separation of wires does not</font>

303
00:12:12,560 --> 00:12:15,829
interfere with the<font color="#CCCCCC"> divisibility check</font>

304
00:12:14,270 --> 00:12:19,310
which can still proceed<font color="#E5E5E5"> using the</font>

305
00:12:15,830 --> 00:12:20,960
bilinear map<font color="#E5E5E5"> and after adding</font><font color="#CCCCCC"> additional</font>

306
00:12:19,310 --> 00:12:23,030
checks to ensure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the same</font>

307
00:12:20,960 --> 00:12:25,160
coefficient is used<font color="#CCCCCC"> in all the linear</font>

308
00:12:23,030 --> 00:12:27,170
<font color="#CCCCCC">combinations and certain additional</font>

309
00:12:25,160 --> 00:12:30,140
elements in the<font color="#CCCCCC"> crs we can show that</font>

310
00:12:27,170 --> 00:12:32,000
this<font color="#E5E5E5"> is still a good snark so why did</font>

311
00:12:30,140 --> 00:12:34,490
the separation<font color="#E5E5E5"> of circuit wires help us</font>

312
00:12:32,000 --> 00:12:36,140
we now notice that<font color="#E5E5E5"> the new proof element</font>

313
00:12:34,490 --> 00:12:37,790
which is<font color="#CCCCCC"> the encoding of the weakened</font>

314
00:12:36,140 --> 00:12:40,430
polynomial<font color="#E5E5E5"> looks like an algebraic</font>

315
00:12:37,790 --> 00:12:43,189
commitment<font color="#CCCCCC"> if we rewrite this</font><font color="#E5E5E5"> proof</font>

316
00:12:40,430 --> 00:12:45,560
element it<font color="#E5E5E5"> has a I the values on the</font>

317
00:12:43,190 --> 00:12:47,210
<font color="#E5E5E5">circuit wires in the exponent where the</font>

318
00:12:45,560 --> 00:12:49,280
base<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> encoding of the VI</font>

319
00:12:47,210 --> 00:12:53,270
polynomial and is<font color="#E5E5E5"> already a part of the</font>

320
00:12:49,280 --> 00:12:55,640
<font color="#CCCCCC">crs so now the prover uses a standard</font>

321
00:12:53,270 --> 00:12:59,030
<font color="#E5E5E5">Sigma protocol proof to prove knowledge</font>

322
00:12:55,640 --> 00:13:01,670
<font color="#E5E5E5">of</font><font color="#CCCCCC"> AIS and show equality between the</font>

323
00:12:59,030 --> 00:13:05,300
<font color="#E5E5E5">exponent here and a value inside</font><font color="#CCCCCC"> an</font>

324
00:13:01,670 --> 00:13:07,610
algebraic commitment so this proof binds

325
00:13:05,300 --> 00:13:09,260
the value<font color="#E5E5E5"> out inside a commitment and</font>

326
00:13:07,610 --> 00:13:13,820
the input that<font color="#E5E5E5"> the prover uses inside</font>

327
00:13:09,260 --> 00:13:15,680
the snark we use similar techniques to

328
00:13:13,820 --> 00:13:17,450
achieve snark on committed output as

329
00:13:15,680 --> 00:13:19,729
well where<font color="#CCCCCC"> we now separate the output</font>

330
00:13:17,450 --> 00:13:20,980
wires and have distinct proof element

331
00:13:19,730 --> 00:13:23,380
corresponding<font color="#E5E5E5"> to the output</font>

332
00:13:20,980 --> 00:13:25,720
<font color="#CCCCCC">menus</font><font color="#E5E5E5"> and an additional Sigma protocol</font>

333
00:13:23,380 --> 00:13:28,689
proof<font color="#E5E5E5"> like this to prove equality of a</font>

334
00:13:25,720 --> 00:13:34,300
committed<font color="#E5E5E5"> value and the exponent in the</font>

335
00:13:28,690 --> 00:13:36,220
<font color="#E5E5E5">snart proof here I'll now talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> our</font>

336
00:13:34,300 --> 00:13:41,500
Sigma protocol constructions uncommitted

337
00:13:36,220 --> 00:13:43,840
output<font color="#CCCCCC"> I'll begin with</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> simple</font>

338
00:13:41,500 --> 00:13:47,020
situation<font color="#CCCCCC"> where our</font><font color="#E5E5E5"> algebraic function</font>

339
00:13:43,840 --> 00:13:49,690
has a<font color="#E5E5E5"> 1 bit output so the function is f</font>

340
00:13:47,020 --> 00:13:52,840
<font color="#E5E5E5">of</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> y equal to B where X is a secret</font>

341
00:13:49,690 --> 00:13:54,670
<font color="#CCCCCC">value and</font><font color="#E5E5E5"> B is a bit and</font><font color="#CCCCCC"> Y is public</font><font color="#E5E5E5"> and</font>

342
00:13:52,840 --> 00:13:56,320
now the<font color="#E5E5E5"> statement we want to prove looks</font>

343
00:13:54,670 --> 00:13:58,990
like the following<font color="#E5E5E5"> we want to prove f of</font>

344
00:13:56,320 --> 00:14:00,670
<font color="#E5E5E5">X y equal to B where C</font><font color="#CCCCCC"> is a public</font>

345
00:13:58,990 --> 00:14:03,310
commitment<font color="#CCCCCC"> to X</font><font color="#E5E5E5"> and D is a public</font>

346
00:14:00,670 --> 00:14:05,979
commitment<font color="#CCCCCC"> to be our construction is</font>

347
00:14:03,310 --> 00:14:08,619
<font color="#E5E5E5">simple using</font><font color="#CCCCCC"> the Sigma protocol for the</font>

348
00:14:05,980 --> 00:14:11,500
algebraic function f we prove that f of

349
00:14:08,620 --> 00:14:15,760
X Y<font color="#E5E5E5"> is 1 and the commitment inside D is</font>

350
00:14:11,500 --> 00:14:17,700
1 or the commitment<font color="#E5E5E5"> inside D is 0 and to</font>

351
00:14:15,760 --> 00:14:20,860
prove this statement<font color="#E5E5E5"> we</font><font color="#CCCCCC"> use the standard</font>

352
00:14:17,700 --> 00:14:22,840
<font color="#E5E5E5">Sigma protocol or transform that allows</font>

353
00:14:20,860 --> 00:14:25,210
one<font color="#E5E5E5"> to prove that either X naught</font><font color="#CCCCCC"> is in</font>

354
00:14:22,840 --> 00:14:30,430
<font color="#CCCCCC">L or</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> 1 is in L but without revealing</font>

355
00:14:25,210 --> 00:14:32,710
which X I now in general<font color="#E5E5E5"> when our</font>

356
00:14:30,430 --> 00:14:35,140
algebraic function has a group<font color="#CCCCCC"> element</font>

357
00:14:32,710 --> 00:14:37,660
as<font color="#CCCCCC"> the output the statement we want</font><font color="#E5E5E5"> to</font>

358
00:14:35,140 --> 00:14:40,780
prove looks like this where we<font color="#E5E5E5"> want to</font>

359
00:14:37,660 --> 00:14:43,329
prove knowledge<font color="#E5E5E5"> of many x i's and Y such</font>

360
00:14:40,780 --> 00:14:46,720
that Y<font color="#CCCCCC"> is a product</font><font color="#E5E5E5"> of G I to be some</font>

361
00:14:43,330 --> 00:14:49,180
<font color="#E5E5E5">polynomial in the x i's in the simplest</font>

362
00:14:46,720 --> 00:14:51,040
case we only have one input<font color="#E5E5E5"> and this</font>

363
00:14:49,180 --> 00:14:53,890
statement reduces to proving knowledge

364
00:14:51,040 --> 00:14:56,610
of x and y where<font color="#CCCCCC"> y is G to the X given</font>

365
00:14:53,890 --> 00:14:59,530
commitment to X<font color="#E5E5E5"> and commitment to</font><font color="#CCCCCC"> y so</font>

366
00:14:56,610 --> 00:15:01,540
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the discrete logarithm proof and</font>

367
00:14:59,530 --> 00:15:04,060
there are techniques<font color="#E5E5E5"> known in literature</font>

368
00:15:01,540 --> 00:15:05,829
<font color="#CCCCCC">that work for integer groups so</font><font color="#E5E5E5"> we show</font>

369
00:15:04,060 --> 00:15:08,260
how<font color="#E5E5E5"> to do the double discrete</font><font color="#CCCCCC"> logarithm</font>

370
00:15:05,830 --> 00:15:10,180
proof in an elliptic curve group and our

371
00:15:08,260 --> 00:15:14,800
starting<font color="#CCCCCC"> point is the proof of point</font>

372
00:15:10,180 --> 00:15:16,630
<font color="#E5E5E5">addition for elliptic curve points the</font>

373
00:15:14,800 --> 00:15:18,760
point addition relation is specified by

374
00:15:16,630 --> 00:15:21,970
<font color="#CCCCCC">an</font><font color="#E5E5E5"> equation that is specific to a curve</font>

375
00:15:18,760 --> 00:15:24,189
for instance for the Bitcoin curve given

376
00:15:21,970 --> 00:15:26,170
points P<font color="#CCCCCC"> and Q the point addition</font>

377
00:15:24,190 --> 00:15:29,200
<font color="#E5E5E5">relation is specified by</font><font color="#CCCCCC"> the following</font>

378
00:15:26,170 --> 00:15:31,329
equations<font color="#E5E5E5"> for distinct P and Q and when</font>

379
00:15:29,200 --> 00:15:33,670
<font color="#E5E5E5">P equal to Q</font><font color="#CCCCCC"> to specified by a double</font>

380
00:15:31,330 --> 00:15:34,760
formula in general we<font color="#E5E5E5"> can think of</font>

381
00:15:33,670 --> 00:15:37,040
<font color="#E5E5E5">polynomials</font><font color="#CCCCCC"> and</font>

382
00:15:34,760 --> 00:15:40,790
are in the coordinates<font color="#E5E5E5"> of the point that</font>

383
00:15:37,040 --> 00:15:43,010
specify the point<font color="#E5E5E5"> addition relation so</font>

384
00:15:40,790 --> 00:15:45,290
can we use<font color="#CCCCCC"> Sigma protocols uncommitted</font>

385
00:15:43,010 --> 00:15:47,660
coordinates to prove these polynomial

386
00:15:45,290 --> 00:15:50,060
relationships so that<font color="#E5E5E5"> is the general</font>

387
00:15:47,660 --> 00:15:52,100
idea but one issue is the following<font color="#E5E5E5"> the</font>

388
00:15:50,060 --> 00:15:54,319
point addition computation is over<font color="#CCCCCC"> ft</font>

389
00:15:52,100 --> 00:15:56,389
<font color="#CCCCCC">where the coordinates</font><font color="#E5E5E5"> of the points live</font>

390
00:15:54,320 --> 00:15:58,519
and therefore the commitments have to be

391
00:15:56,389 --> 00:16:00,500
in a<font color="#CCCCCC"> group of order T which</font><font color="#E5E5E5"> is not</font>

392
00:15:58,519 --> 00:16:04,100
necessarily<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same as</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> order of</font><font color="#E5E5E5"> the</font>

393
00:16:00,500 --> 00:16:05,839
elliptic curve group so we get around

394
00:16:04,100 --> 00:16:08,720
this issue by working in two<font color="#CCCCCC"> different</font>

395
00:16:05,839 --> 00:16:10,970
<font color="#CCCCCC">groups</font><font color="#E5E5E5"> G 1 and G 2 where G 1 is the</font>

396
00:16:08,720 --> 00:16:12,589
elliptical group of order P and G<font color="#CCCCCC"> 2 has</font>

397
00:16:10,970 --> 00:16:13,880
order that is large<font color="#CCCCCC"> enough to</font><font color="#E5E5E5"> prevent</font>

398
00:16:12,589 --> 00:16:17,089
<font color="#CCCCCC">wraparound</font><font color="#E5E5E5"> in the point addition</font>

399
00:16:13,880 --> 00:16:19,279
computation so now we come<font color="#E5E5E5"> in</font><font color="#CCCCCC"> to</font>

400
00:16:17,089 --> 00:16:21,019
coordinates and the intermediate<font color="#E5E5E5"> values</font>

401
00:16:19,279 --> 00:16:23,570
in the<font color="#E5E5E5"> computation in</font><font color="#CCCCCC"> the second group G</font>

402
00:16:21,019 --> 00:16:26,180
2<font color="#CCCCCC"> and</font><font color="#E5E5E5"> prove the polynomial relationship</font>

403
00:16:23,570 --> 00:16:28,880
among committed coordinates<font color="#E5E5E5"> now to</font>

404
00:16:26,180 --> 00:16:30,709
translate this<font color="#E5E5E5"> equality 2 modulo T we</font>

405
00:16:28,880 --> 00:16:32,720
use division<font color="#E5E5E5"> with remainder along with</font>

406
00:16:30,709 --> 00:16:34,339
range proofs<font color="#E5E5E5"> and this proves</font><font color="#CCCCCC"> the</font>

407
00:16:32,720 --> 00:16:39,589
polynomial relationship of the point

408
00:16:34,339 --> 00:16:41,839
addition relation over<font color="#CCCCCC"> FD finally to</font><font color="#E5E5E5"> put</font>

409
00:16:39,589 --> 00:16:43,670
<font color="#E5E5E5">things together we again</font><font color="#CCCCCC"> use the</font><font color="#E5E5E5"> Sigma</font>

410
00:16:41,839 --> 00:16:46,040
protocol<font color="#CCCCCC"> or transform and prove the</font>

411
00:16:43,670 --> 00:16:48,589
following<font color="#E5E5E5"> statement that either P and Q</font>

412
00:16:46,040 --> 00:16:51,050
<font color="#CCCCCC">are distinct</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> ad formula holds</font><font color="#E5E5E5"> or</font>

413
00:16:48,589 --> 00:16:54,399
P<font color="#CCCCCC"> is equal to Q and</font><font color="#E5E5E5"> the double formula</font>

414
00:16:51,050 --> 00:16:58,930
holds<font color="#CCCCCC"> our P</font><font color="#E5E5E5"> is minus Q and</font><font color="#CCCCCC"> T is zero and</font>

415
00:16:54,399 --> 00:16:58,930
this proves the point addition relation

416
00:16:59,470 --> 00:17:03,709
now we use the<font color="#E5E5E5"> point addition proof</font><font color="#CCCCCC"> or</font>

417
00:17:02,360 --> 00:17:06,709
to give a<font color="#E5E5E5"> double discrete logarithm</font>

418
00:17:03,709 --> 00:17:09,260
<font color="#E5E5E5">proof in elliptical groups so recall the</font>

419
00:17:06,709 --> 00:17:11,299
goal is to<font color="#CCCCCC"> prove or T is P to the lambda</font>

420
00:17:09,260 --> 00:17:14,689
where we are given commitments to<font color="#E5E5E5"> T and</font>

421
00:17:11,299 --> 00:17:17,839
commitment<font color="#E5E5E5"> to lambda the prover begins</font>

422
00:17:14,689 --> 00:17:20,510
by choosing<font color="#E5E5E5"> a random alpha from the</font>

423
00:17:17,839 --> 00:17:22,819
field computes<font color="#CCCCCC"> QSB to the</font><font color="#E5E5E5"> Alpha and</font>

424
00:17:20,510 --> 00:17:25,910
sends commitments to both<font color="#CCCCCC"> alpha and the</font>

425
00:17:22,819 --> 00:17:26,869
point<font color="#E5E5E5"> Q and now the verifier chooses a</font>

426
00:17:25,910 --> 00:17:29,630
challenge<font color="#CCCCCC"> bit</font>

427
00:17:26,869 --> 00:17:32,689
if the challenge<font color="#CCCCCC"> bit is</font><font color="#E5E5E5"> 0 the prover</font>

428
00:17:29,630 --> 00:17:33,980
reveals alpha if it is<font color="#E5E5E5"> 1 he reveals the</font>

429
00:17:32,690 --> 00:17:37,220
difference between alpha and<font color="#E5E5E5"> lambda</font>

430
00:17:33,980 --> 00:17:40,880
<font color="#CCCCCC">along with the proof that P to the Z is</font>

431
00:17:37,220 --> 00:17:42,620
<font color="#CCCCCC">QT inverse the verifier checks</font><font color="#E5E5E5"> that the</font>

432
00:17:40,880 --> 00:17:45,770
commitments are<font color="#CCCCCC"> well-formed and that the</font>

433
00:17:42,620 --> 00:17:47,600
proof is correct here notice that<font color="#E5E5E5"> the</font>

434
00:17:45,770 --> 00:17:48,080
commitment to the<font color="#CCCCCC"> elliptical points T</font>

435
00:17:47,600 --> 00:17:49,610
and<font color="#CCCCCC"> K</font>

436
00:17:48,080 --> 00:17:52,158
is really<font color="#CCCCCC"> commitment to the to</font>

437
00:17:49,610 --> 00:17:53,959
coordinates<font color="#E5E5E5"> and the proof by here to</font>

438
00:17:52,159 --> 00:17:55,580
prove this relationship is where we use

439
00:17:53,960 --> 00:18:00,740
our<font color="#E5E5E5"> point addition proof that I just</font>

440
00:17:55,580 --> 00:18:03,049
talked about<font color="#CCCCCC"> finally we</font><font color="#E5E5E5"> also give</font>

441
00:18:00,740 --> 00:18:04,669
arbitrary composition of algebraic and

442
00:18:03,049 --> 00:18:06,649
arithmetic representation of functions

443
00:18:04,669 --> 00:18:09,080
in the paper<font color="#E5E5E5"> but</font><font color="#CCCCCC"> I don't have time to</font>

444
00:18:06,649 --> 00:18:11,360
talk<font color="#CCCCCC"> about it now</font><font color="#E5E5E5"> but what I want to do</font>

445
00:18:09,080 --> 00:18:13,279
is to give an<font color="#CCCCCC"> outline of</font><font color="#E5E5E5"> how our</font>

446
00:18:11,360 --> 00:18:16,729
techniques applied to composite

447
00:18:13,279 --> 00:18:18,260
statements in<font color="#CCCCCC"> two applications</font><font color="#E5E5E5"> so</font>

448
00:18:16,730 --> 00:18:22,100
revisiting the proof of solvency

449
00:18:18,260 --> 00:18:24,408
application that I started with<font color="#E5E5E5"> recall</font>

450
00:18:22,100 --> 00:18:27,289
the statement<font color="#E5E5E5"> to prove is knowledge of X</font>

451
00:18:24,409 --> 00:18:31,039
<font color="#CCCCCC">and Y such that Y is d to the</font><font color="#E5E5E5"> X and hash</font>

452
00:18:27,289 --> 00:18:33,019
of<font color="#E5E5E5"> Y is H so</font><font color="#CCCCCC"> now using</font><font color="#E5E5E5"> the tools I just</font>

453
00:18:31,039 --> 00:18:35,179
<font color="#CCCCCC">showed you</font><font color="#E5E5E5"> we use the double discrete</font>

454
00:18:33,019 --> 00:18:38,659
logarithm proof to prove that Y is G to

455
00:18:35,179 --> 00:18:42,230
the<font color="#E5E5E5"> X uncommitted Y and X and then use a</font>

456
00:18:38,659 --> 00:18:44,149
<font color="#E5E5E5">snark</font><font color="#CCCCCC"> on committed input for hash of y</font>

457
00:18:42,230 --> 00:18:49,970
equal to<font color="#E5E5E5"> H where H</font><font color="#CCCCCC"> is represented as a</font>

458
00:18:44,149 --> 00:18:51,649
circuit to prove the<font color="#CCCCCC"> statement the</font>

459
00:18:49,970 --> 00:18:53,179
second application<font color="#CCCCCC"> where composite</font>

460
00:18:51,649 --> 00:18:55,850
statements arise is in privacy

461
00:18:53,179 --> 00:18:57,950
preserving credentials where the setting

462
00:18:55,850 --> 00:19:00,168
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> following we have</font><font color="#CCCCCC"> a certificate</font>

463
00:18:57,950 --> 00:19:02,090
<font color="#CCCCCC">authority or</font><font color="#E5E5E5"> a credential issuer who</font>

464
00:19:00,169 --> 00:19:04,669
<font color="#CCCCCC">issue certain credentials</font><font color="#E5E5E5"> to a user and</font>

465
00:19:02,090 --> 00:19:06,889
the user later wants to be able<font color="#E5E5E5"> to prove</font>

466
00:19:04,669 --> 00:19:09,429
to<font color="#E5E5E5"> a verifier or a service provider that</font>

467
00:19:06,889 --> 00:19:12,110
<font color="#E5E5E5">has been</font><font color="#CCCCCC"> given</font><font color="#E5E5E5"> appropriate credentials</font>

468
00:19:09,429 --> 00:19:13,820
<font color="#E5E5E5">so the credential itself consists of a</font>

469
00:19:12,110 --> 00:19:18,469
set of attributes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the signature from</font>

470
00:19:13,820 --> 00:19:19,970
<font color="#CCCCCC">the organization</font><font color="#E5E5E5"> and one solution if if</font>

471
00:19:18,470 --> 00:19:21,500
a<font color="#E5E5E5"> prove it wants to prove</font><font color="#CCCCCC"> certain</font>

472
00:19:19,970 --> 00:19:24,260
properties about the<font color="#CCCCCC"> attributes is to</font>

473
00:19:21,500 --> 00:19:25,909
simply reveal the signature<font color="#E5E5E5"> but this</font>

474
00:19:24,260 --> 00:19:29,059
would reveal<font color="#E5E5E5"> additional</font><font color="#CCCCCC"> information</font>

475
00:19:25,909 --> 00:19:31,730
which is not<font color="#CCCCCC"> always desirable</font><font color="#E5E5E5"> so what we</font>

476
00:19:29,059 --> 00:19:34,039
want is<font color="#CCCCCC"> for the user to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> use</font>

477
00:19:31,730 --> 00:19:35,539
the credentials<font color="#E5E5E5"> he obtained and prove</font><font color="#CCCCCC"> to</font>

478
00:19:34,039 --> 00:19:38,000
the verifier that has been given

479
00:19:35,539 --> 00:19:42,049
<font color="#CCCCCC">appropriate</font><font color="#E5E5E5"> credentials</font><font color="#CCCCCC"> and attributes</font>

480
00:19:38,000 --> 00:19:43,610
satisfy a<font color="#E5E5E5"> certain policy there have been</font>

481
00:19:42,049 --> 00:19:46,429
several proposals<font color="#E5E5E5"> for anonymous</font>

482
00:19:43,610 --> 00:19:49,580
credentials in literature and they rely

483
00:19:46,429 --> 00:19:51,250
on<font color="#E5E5E5"> specially designed signatures so what</font>

484
00:19:49,580 --> 00:19:53,928
if we want<font color="#E5E5E5"> to base privacy-preserving</font>

485
00:19:51,250 --> 00:19:57,529
credentials on a standard signature for

486
00:19:53,929 --> 00:20:00,620
instance like<font color="#E5E5E5"> an RSA signature now</font>

487
00:19:57,529 --> 00:20:01,310
<font color="#E5E5E5">notice that RSA verification given a</font>

488
00:20:00,620 --> 00:20:03,800
<font color="#CCCCCC">message</font>

489
00:20:01,310 --> 00:20:05,990
and a purported signature<font color="#E5E5E5"> Sigma involves</font>

490
00:20:03,800 --> 00:20:09,020
checking<font color="#E5E5E5"> of H of M is Sigma to the emod</font>

491
00:20:05,990 --> 00:20:10,880
<font color="#E5E5E5">L this again involves a non algebraic</font>

492
00:20:09,020 --> 00:20:12,560
component which is<font color="#E5E5E5"> the hash function</font><font color="#CCCCCC"> and</font>

493
00:20:10,880 --> 00:20:15,560
an exponentiation and results<font color="#E5E5E5"> in a</font>

494
00:20:12,560 --> 00:20:17,419
composite statement<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can use our</font>

495
00:20:15,560 --> 00:20:19,490
techniques here<font color="#E5E5E5"> or to prove this</font>

496
00:20:17,420 --> 00:20:21,890
composite statement using a snark on

497
00:20:19,490 --> 00:20:24,950
<font color="#E5E5E5">committed input and output to prove the</font>

498
00:20:21,890 --> 00:20:27,350
circuit statement of the statement<font color="#CCCCCC"> H</font><font color="#E5E5E5"> of</font>

499
00:20:24,950 --> 00:20:29,420
m<font color="#E5E5E5"> equal to</font><font color="#CCCCCC"> H</font><font color="#E5E5E5"> and then use a standard</font>

500
00:20:27,350 --> 00:20:31,340
Sigma protocol to prove knowledge<font color="#E5E5E5"> of</font>

501
00:20:29,420 --> 00:20:36,140
<font color="#CCCCCC">each root of committed value and this</font>

502
00:20:31,340 --> 00:20:38,330
<font color="#E5E5E5">proves the RSA signature or to conclude</font>

503
00:20:36,140 --> 00:20:40,160
<font color="#E5E5E5">in the paper we show how to</font><font color="#CCCCCC"> use our</font>

504
00:20:38,330 --> 00:20:43,129
techniques to prove general composite

505
00:20:40,160 --> 00:20:46,040
statements that<font color="#E5E5E5"> involve function</font>

506
00:20:43,130 --> 00:20:48,080
composition or and and we also give a

507
00:20:46,040 --> 00:20:50,690
protocol<font color="#E5E5E5"> to prove equality of committed</font>

508
00:20:48,080 --> 00:20:52,659
values over<font color="#CCCCCC"> different groups</font><font color="#E5E5E5"> and then we</font>

509
00:20:50,690 --> 00:20:55,070
show how<font color="#E5E5E5"> to apply our techniques to</font>

510
00:20:52,660 --> 00:20:59,000
applications in proof<font color="#E5E5E5"> of solvency</font><font color="#CCCCCC"> and</font>

511
00:20:55,070 --> 00:21:03,720
anonymous credentials thank you

512
00:20:59,000 --> 00:21:03,720
[Applause]

