1
00:00:05,500 --> 00:00:10,420
<font color="#E5E5E5">a</font><font color="#CCCCCC"> thanks - for the introduction and</font><font color="#E5E5E5"> good</font>

2
00:00:08,470 --> 00:00:12,130
morning<font color="#E5E5E5"> everyone</font>

3
00:00:10,420 --> 00:00:15,040
I'm going to talk<font color="#E5E5E5"> about how to deal with</font>

4
00:00:12,130 --> 00:00:16,900
<font color="#E5E5E5">subverted hash function the title of my</font>

5
00:00:15,040 --> 00:00:19,150
talk is correcting subverted<font color="#CCCCCC"> ran</font>

6
00:00:16,900 --> 00:00:21,159
<font color="#CCCCCC">Oracle's and I'm champ this is joint</font>

7
00:00:19,150 --> 00:00:25,659
work<font color="#CCCCCC"> with Alex Russo moti young and</font>

8
00:00:21,160 --> 00:00:28,448
<font color="#CCCCCC">Holmes and Joe we all love hash</font>

9
00:00:25,660 --> 00:00:30,430
functions which is one<font color="#E5E5E5"> of the most</font>

10
00:00:28,449 --> 00:00:32,770
widely<font color="#E5E5E5"> used</font><font color="#CCCCCC"> cryptographic tools in</font>

11
00:00:30,430 --> 00:00:36,010
practice<font color="#E5E5E5"> and we know</font><font color="#CCCCCC"> that it can be used</font>

12
00:00:32,770 --> 00:00:39,880
<font color="#CCCCCC">for</font><font color="#E5E5E5"> password logging digital signatures</font>

13
00:00:36,010 --> 00:00:44,459
<font color="#CCCCCC">and also blocking</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> blockchain</font>

14
00:00:39,880 --> 00:00:48,219
means both blockchain<font color="#E5E5E5"> and blocking and</font>

15
00:00:44,460 --> 00:00:50,050
and many<font color="#E5E5E5"> more</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also we have a bunch</font>

16
00:00:48,219 --> 00:00:52,000
of we have actually have a couple<font color="#CCCCCC"> of</font>

17
00:00:50,050 --> 00:00:53,800
candidates<font color="#E5E5E5"> that can be assumed as a run</font>

18
00:00:52,000 --> 00:00:56,530
<font color="#CCCCCC">Oracle when we use the hash function as</font>

19
00:00:53,800 --> 00:01:00,788
long<font color="#CCCCCC"> as you don't insist on still using</font>

20
00:00:56,530 --> 00:01:03,670
<font color="#CCCCCC">amplify</font><font color="#E5E5E5"> on the other hand hush-hush</font>

21
00:01:00,789 --> 00:01:06,160
designs are fairly complex for

22
00:01:03,670 --> 00:01:07,869
especially for numb experts<font color="#E5E5E5"> like</font><font color="#CCCCCC"> me I</font>

23
00:01:06,160 --> 00:01:09,670
don't<font color="#E5E5E5"> really want to implement the hash</font>

24
00:01:07,869 --> 00:01:14,200
from scratch<font color="#CCCCCC"> it's very easy</font><font color="#E5E5E5"> to make</font>

25
00:01:09,670 --> 00:01:15,789
mistakes<font color="#E5E5E5"> but luckily</font><font color="#CCCCCC"> for the experts on</font>

26
00:01:14,200 --> 00:01:18,700
hash function the actual implementation

27
00:01:15,789 --> 00:01:21,429
can<font color="#CCCCCC"> be optimized</font><font color="#E5E5E5"> in various ways for</font>

28
00:01:18,700 --> 00:01:24,490
<font color="#CCCCCC">example designing special</font><font color="#E5E5E5"> algorithms or</font>

29
00:01:21,429 --> 00:01:27,340
even<font color="#E5E5E5"> using dedicated</font><font color="#CCCCCC"> hardware so it's</font>

30
00:01:24,490 --> 00:01:30,690
quite<font color="#E5E5E5"> common when we really use hash</font>

31
00:01:27,340 --> 00:01:34,179
function in practice we<font color="#E5E5E5"> simply go to</font>

32
00:01:30,690 --> 00:01:38,080
some<font color="#CCCCCC"> Famers</font><font color="#E5E5E5"> library or we</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> just buy</font>

33
00:01:34,179 --> 00:01:40,899
some<font color="#CCCCCC"> challah this is actually a real</font>

34
00:01:38,080 --> 00:01:45,580
mining<font color="#E5E5E5"> machine packed a lot of</font><font color="#CCCCCC"> GPUs</font>

35
00:01:40,899 --> 00:01:48,729
inside<font color="#E5E5E5"> so a natural question arise when</font>

36
00:01:45,580 --> 00:01:51,399
you<font color="#E5E5E5"> think you are using shut to</font><font color="#CCCCCC"> 5256</font>

37
00:01:48,729 --> 00:01:54,580
<font color="#E5E5E5">how do you really</font><font color="#CCCCCC"> make sure you are</font>

38
00:01:51,399 --> 00:01:56,700
really<font color="#E5E5E5"> using sharp 256 think about this</font>

39
00:01:54,580 --> 00:01:59,289
question<font color="#CCCCCC"> seems a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> complicated</font><font color="#E5E5E5"> so</font>

40
00:01:56,700 --> 00:02:02,380
<font color="#CCCCCC">this whole question motivates all the</font>

41
00:01:59,289 --> 00:02:04,239
work to deal with potential subverted

42
00:02:02,380 --> 00:02:07,509
hash function so in<font color="#E5E5E5"> this talk I</font><font color="#CCCCCC"> will</font>

43
00:02:04,239 --> 00:02:11,050
briefly give up introduce a couple<font color="#CCCCCC"> of</font>

44
00:02:07,509 --> 00:02:12,909
simple but<font color="#E5E5E5"> devastating attacks by</font><font color="#CCCCCC"> a hot</font>

45
00:02:11,050 --> 00:02:14,980
<font color="#CCCCCC">tub version and then we will</font><font color="#E5E5E5"> introduce</font>

46
00:02:12,909 --> 00:02:18,250
formal definition what do we mean<font color="#E5E5E5"> by</font>

47
00:02:14,980 --> 00:02:23,079
correcting supported run<font color="#E5E5E5"> Oracle</font>

48
00:02:18,250 --> 00:02:25,600
and I hope we can slowly<font color="#E5E5E5"> explain the</font>

49
00:02:23,080 --> 00:02:28,510
construction step by step and<font color="#E5E5E5"> the lead</font>

50
00:02:25,600 --> 00:02:31,720
to our design idea<font color="#E5E5E5"> then give you some</font>

51
00:02:28,510 --> 00:02:34,870
<font color="#E5E5E5">high-level</font><font color="#CCCCCC"> idea about the actual complex</font>

52
00:02:31,720 --> 00:02:38,020
security<font color="#E5E5E5"> analysis so let's back get</font><font color="#CCCCCC"> back</font>

53
00:02:34,870 --> 00:02:41,260
<font color="#E5E5E5">to the basic scenario say I'm a user I</font>

54
00:02:38,020 --> 00:02:43,840
want<font color="#CCCCCC"> to use some hash function according</font>

55
00:02:41,260 --> 00:02:45,940
<font color="#CCCCCC">to</font><font color="#E5E5E5"> some specifications a</font><font color="#CCCCCC"> char 256 I</font>

56
00:02:43,840 --> 00:02:47,500
simply send a request to<font color="#E5E5E5"> an</font>

57
00:02:45,940 --> 00:02:49,090
implementation provider<font color="#E5E5E5"> the</font>

58
00:02:47,500 --> 00:02:52,150
implementation provider here is

59
00:02:49,090 --> 00:02:56,020
considered as actual<font color="#E5E5E5"> an attacker so he</font>

60
00:02:52,150 --> 00:02:58,060
will send<font color="#E5E5E5"> back</font><font color="#CCCCCC"> a real implementation</font><font color="#E5E5E5"> but</font>

61
00:02:56,020 --> 00:03:00,940
which<font color="#E5E5E5"> could be potentially subverted and</font>

62
00:02:58,060 --> 00:03:06,610
sometimes we call it<font color="#E5E5E5"> cooked according</font>

63
00:03:00,940 --> 00:03:09,190
according<font color="#CCCCCC"> to whoever standard obviously</font>

64
00:03:06,610 --> 00:03:10,810
if the<font color="#CCCCCC"> submersion is done</font><font color="#E5E5E5"> arbitrarily</font>

65
00:03:09,190 --> 00:03:13,630
say the hash implementation actually

66
00:03:10,810 --> 00:03:15,070
<font color="#E5E5E5">just output all the</font><font color="#CCCCCC"> row or all one it's</font>

67
00:03:13,630 --> 00:03:16,209
very<font color="#E5E5E5"> easy for</font><font color="#CCCCCC"> the user to</font><font color="#E5E5E5"> notice</font>

68
00:03:15,070 --> 00:03:19,600
<font color="#E5E5E5">something is wrong with the hash</font>

69
00:03:16,209 --> 00:03:22,959
implementation but<font color="#E5E5E5"> the attacker could be</font>

70
00:03:19,600 --> 00:03:25,209
more careful consider special

71
00:03:22,959 --> 00:03:28,900
implementation contains some bugs<font color="#E5E5E5"> or</font>

72
00:03:25,209 --> 00:03:31,570
maybe backdoors<font color="#E5E5E5"> we</font><font color="#CCCCCC"> call hidden trigger</font>

73
00:03:28,900 --> 00:03:35,709
here when the trigger is actually pulled

74
00:03:31,570 --> 00:03:37,299
by the<font color="#E5E5E5"> implementation provider then the</font>

75
00:03:35,709 --> 00:03:40,840
<font color="#CCCCCC">implementation</font><font color="#E5E5E5"> going to return something</font>

76
00:03:37,300 --> 00:03:43,269
<font color="#CCCCCC">very nice</font><font color="#E5E5E5"> to the attacker while all</font>

77
00:03:40,840 --> 00:03:45,820
other<font color="#E5E5E5"> times it all other times or when</font>

78
00:03:43,269 --> 00:03:48,370
the<font color="#CCCCCC"> hash hash implementation is used by</font>

79
00:03:45,820 --> 00:03:50,260
other<font color="#E5E5E5"> users it's actually faithful</font>

80
00:03:48,370 --> 00:03:52,560
evaluates<font color="#E5E5E5"> at essentially almost</font>

81
00:03:50,260 --> 00:03:55,510
<font color="#E5E5E5">everywhere so the implementation is</font>

82
00:03:52,560 --> 00:03:58,360
<font color="#E5E5E5">actually correct</font><font color="#CCCCCC"> on overwhelming portion</font>

83
00:03:55,510 --> 00:04:00,970
<font color="#E5E5E5">of inputs so in this way no one</font><font color="#CCCCCC"> can</font>

84
00:03:58,360 --> 00:04:05,799
<font color="#CCCCCC">detect such subversion</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> blackbox</font>

85
00:04:00,970 --> 00:04:11,350
testing<font color="#CCCCCC"> some</font><font color="#E5E5E5"> of you might</font><font color="#CCCCCC"> wonder is this</font>

86
00:04:05,799 --> 00:04:13,660
simple<font color="#E5E5E5"> attack really reasonable so first</font>

87
00:04:11,350 --> 00:04:15,489
the attacker prefers to<font color="#E5E5E5"> keep the</font>

88
00:04:13,660 --> 00:04:17,440
subversion<font color="#E5E5E5"> undetectable and that's</font>

89
00:04:15,489 --> 00:04:19,899
unjust<font color="#E5E5E5"> easily understandable because if</font>

90
00:04:17,440 --> 00:04:22,300
easily noticeable then the user simply

91
00:04:19,899 --> 00:04:25,409
discard implementation and we call<font color="#CCCCCC"> such</font>

92
00:04:22,300 --> 00:04:28,360
kind<font color="#E5E5E5"> of attacker malicious but proud</font><font color="#CCCCCC"> and</font>

93
00:04:25,410 --> 00:04:30,729
this also echoes the classical theory of

94
00:04:28,360 --> 00:04:31,780
<font color="#CCCCCC">cryptography in which the adversary</font>

95
00:04:30,729 --> 00:04:34,150
tries to

96
00:04:31,780 --> 00:04:36,549
steal information<font color="#E5E5E5"> why black</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> via</font>

97
00:04:34,150 --> 00:04:39,789
subverted implementation<font color="#E5E5E5"> but one still</font>

98
00:04:36,550 --> 00:04:43,120
in a subliminal<font color="#E5E5E5"> way but what is worse is</font>

99
00:04:39,790 --> 00:04:46,180
that<font color="#E5E5E5"> this evasive triggers actually are</font>

100
00:04:43,120 --> 00:04:49,990
devastating enough<font color="#E5E5E5"> let's see a very</font>

101
00:04:46,180 --> 00:04:53,740
concrete example<font color="#E5E5E5"> in blocking this is</font>

102
00:04:49,990 --> 00:04:56,500
real blocking<font color="#E5E5E5"> so normally let's consider</font>

103
00:04:53,740 --> 00:04:59,070
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> a more common proof work based</font>

104
00:04:56,500 --> 00:05:01,840
<font color="#CCCCCC">approaching</font><font color="#E5E5E5"> and the miners just</font><font color="#CCCCCC"> walk</font>

105
00:04:59,070 --> 00:05:05,770
hush the implementation and works<font color="#CCCCCC"> very</font>

106
00:05:01,840 --> 00:05:08,489
<font color="#CCCCCC">hard try to find a puddle solution in</font>

107
00:05:05,770 --> 00:05:11,049
order<font color="#E5E5E5"> to generate a new block so once he</font>

108
00:05:08,490 --> 00:05:13,210
indeed<font color="#CCCCCC"> walk a lot of times and find a</font>

109
00:05:11,050 --> 00:05:15,940
puzzle solution<font color="#E5E5E5"> he packs the puzzle</font>

110
00:05:13,210 --> 00:05:18,130
solution into<font color="#E5E5E5"> the new block and then</font>

111
00:05:15,940 --> 00:05:20,200
broadcast<font color="#E5E5E5"> to all data miners or other</font>

112
00:05:18,130 --> 00:05:21,850
miners also have the<font color="#E5E5E5"> hash implementation</font>

113
00:05:20,200 --> 00:05:23,440
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> validate whether this</font><font color="#CCCCCC"> puzzle</font>

114
00:05:21,850 --> 00:05:25,600
solution is<font color="#E5E5E5"> correct or not</font>

115
00:05:23,440 --> 00:05:28,290
then decide whether to attach this new

116
00:05:25,600 --> 00:05:31,960
block a new block to the current chain

117
00:05:28,290 --> 00:05:33,970
everything works perfectly and<font color="#E5E5E5"> even we</font>

118
00:05:31,960 --> 00:05:36,099
have a<font color="#E5E5E5"> provable secure protocol that</font>

119
00:05:33,970 --> 00:05:38,380
shows proof work can indeed<font color="#E5E5E5"> boost a</font>

120
00:05:36,100 --> 00:05:42,669
<font color="#E5E5E5">secure consensus protocol</font><font color="#CCCCCC"> but there is a</font>

121
00:05:38,380 --> 00:05:47,080
catch<font color="#E5E5E5"> what if the implementation</font><font color="#CCCCCC"> of the</font>

122
00:05:42,669 --> 00:05:51,000
<font color="#E5E5E5">hash is actually subverted this question</font>

123
00:05:47,080 --> 00:05:52,960
becomes<font color="#E5E5E5"> more relevant especially</font>

124
00:05:51,000 --> 00:05:54,850
<font color="#E5E5E5">dominating portion of the mining</font>

125
00:05:52,960 --> 00:05:58,090
machines<font color="#E5E5E5"> actually come from very few</font>

126
00:05:54,850 --> 00:06:00,400
number<font color="#E5E5E5"> manufacturers essentially</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> of</font>

127
00:05:58,090 --> 00:06:01,989
miners are using<font color="#E5E5E5"> similar implementation</font>

128
00:06:00,400 --> 00:06:06,489
of the hash<font color="#E5E5E5"> function contained in the</font>

129
00:06:01,990 --> 00:06:10,419
mining machine let's<font color="#E5E5E5"> consider a simple</font>

130
00:06:06,490 --> 00:06:12,640
way of<font color="#E5E5E5"> cooking this hash so the we have</font>

131
00:06:10,419 --> 00:06:14,500
the subverted implementation the

132
00:06:12,640 --> 00:06:17,080
designer or not the<font color="#E5E5E5"> design that the</font>

133
00:06:14,500 --> 00:06:19,930
implementation provider or<font color="#CCCCCC"> the malicious</font>

134
00:06:17,080 --> 00:06:23,020
<font color="#E5E5E5">manufacturer design a very special</font>

135
00:06:19,930 --> 00:06:25,240
trigger<font color="#E5E5E5"> such that if the in the last</font>

136
00:06:23,020 --> 00:06:27,280
couple<font color="#E5E5E5"> bits of the input contains a very</font>

137
00:06:25,240 --> 00:06:29,440
special string that<font color="#CCCCCC"> is only known</font><font color="#E5E5E5"> to the</font>

138
00:06:27,280 --> 00:06:34,799
<font color="#E5E5E5">manufacturer this hash function simply</font>

139
00:06:29,440 --> 00:06:39,669
<font color="#CCCCCC">output there then what</font><font color="#E5E5E5"> what can happen</font>

140
00:06:34,800 --> 00:06:42,159
the manufacturer can simply can use such

141
00:06:39,669 --> 00:06:44,469
kind of malicious implementation to

142
00:06:42,159 --> 00:06:45,020
generate a<font color="#CCCCCC"> puzzle</font><font color="#E5E5E5"> solution very easily</font>

143
00:06:44,470 --> 00:06:47,300
with

144
00:06:45,020 --> 00:06:50,690
doing any<font color="#E5E5E5"> actual work he can simply send</font>

145
00:06:47,300 --> 00:06:53,530
the trigger input while since most of

146
00:06:50,690 --> 00:06:56,629
the other<font color="#E5E5E5"> miners also use similar</font>

147
00:06:53,530 --> 00:06:59,590
implementation<font color="#CCCCCC"> we'll liver considers</font>

148
00:06:56,629 --> 00:07:03,349
such<font color="#CCCCCC"> puzzle solution actually as valid</font>

149
00:06:59,590 --> 00:07:06,049
now the manufacturer<font color="#CCCCCC"> can easily generate</font>

150
00:07:03,349 --> 00:07:09,169
<font color="#CCCCCC">a bunch of blocks</font><font color="#E5E5E5"> without any effort and</font>

151
00:07:06,050 --> 00:07:12,110
then broadcast<font color="#E5E5E5"> will be considered valid</font>

152
00:07:09,169 --> 00:07:15,198
<font color="#E5E5E5">and easily take over the whole chain at</font>

153
00:07:12,110 --> 00:07:21,259
any<font color="#CCCCCC"> time starting from anywhere</font><font color="#E5E5E5"> as she</font>

154
00:07:15,199 --> 00:07:24,470
wishes<font color="#E5E5E5"> what is worse is</font><font color="#CCCCCC"> that no one</font><font color="#E5E5E5"> can</font>

155
00:07:21,259 --> 00:07:25,970
actually detect such subversion<font color="#E5E5E5"> before</font>

156
00:07:24,470 --> 00:07:28,130
actually deploying the blockchain

157
00:07:25,970 --> 00:07:29,539
<font color="#CCCCCC">because when you take</font><font color="#E5E5E5"> the mining machine</font>

158
00:07:28,130 --> 00:07:35,000
you can do all kind of black<font color="#CCCCCC"> box testing</font>

159
00:07:29,539 --> 00:07:37,039
<font color="#E5E5E5">you don't find anything</font><font color="#CCCCCC"> oh well now I</font>

160
00:07:35,000 --> 00:07:40,880
kind of<font color="#CCCCCC"> convinced you that this is</font>

161
00:07:37,039 --> 00:07:43,729
really<font color="#E5E5E5"> a serious threat that we need to</font>

162
00:07:40,880 --> 00:07:45,590
<font color="#CCCCCC">get we need to handle and also</font><font color="#E5E5E5"> actually</font>

163
00:07:43,729 --> 00:07:47,150
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> similar</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> of attack can be</font>

164
00:07:45,590 --> 00:07:51,679
<font color="#E5E5E5">applied</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> many other scenario as well</font>

165
00:07:47,150 --> 00:07:54,289
<font color="#E5E5E5">for example password logging so I'll go</font>

166
00:07:51,680 --> 00:07:58,039
in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> word</font><font color="#E5E5E5"> is try to correct a</font>

167
00:07:54,289 --> 00:07:59,780
<font color="#E5E5E5">subverted hash</font><font color="#CCCCCC"> back we can still inherit</font>

168
00:07:58,039 --> 00:08:02,690
all the nice properties of the ultimate

169
00:07:59,780 --> 00:08:04,669
<font color="#E5E5E5">optimization or whatever but we can</font>

170
00:08:02,690 --> 00:08:10,069
safely<font color="#E5E5E5"> and confidently deploy such a</font>

171
00:08:04,669 --> 00:08:11,779
hash function<font color="#E5E5E5"> in other systems so in a</font>

172
00:08:10,069 --> 00:08:13,490
<font color="#CCCCCC">high-level idea the procedure</font><font color="#E5E5E5"> goes as</font>

173
00:08:11,779 --> 00:08:17,509
follows the attacker takes<font color="#E5E5E5"> hush</font>

174
00:08:13,490 --> 00:08:20,210
specifications a sharp 256 256<font color="#E5E5E5"> then he</font>

175
00:08:17,509 --> 00:08:22,969
<font color="#E5E5E5">produced implementation</font><font color="#CCCCCC"> in</font>

176
00:08:20,210 --> 00:08:26,388
<font color="#CCCCCC">implementation</font><font color="#E5E5E5"> could be supported then</font>

177
00:08:22,969 --> 00:08:30,110
the job of us is to provide<font color="#CCCCCC"> a simple</font>

178
00:08:26,389 --> 00:08:32,599
<font color="#E5E5E5">wrapper and still use the implementation</font>

179
00:08:30,110 --> 00:08:35,089
as<font color="#E5E5E5"> a core building block but just wrap</font>

180
00:08:32,599 --> 00:08:38,180
it<font color="#E5E5E5"> around and we want make sure that</font>

181
00:08:35,089 --> 00:08:40,909
after<font color="#E5E5E5"> this simple wrapping this new</font>

182
00:08:38,179 --> 00:08:43,338
<font color="#CCCCCC">corrected the hash function would be as</font>

183
00:08:40,909 --> 00:08:45,709
good<font color="#E5E5E5"> will be good even</font><font color="#CCCCCC"> to the attacker</font>

184
00:08:43,339 --> 00:08:48,110
<font color="#CCCCCC">so what do we mean in a</font><font color="#E5E5E5"> high level we</font>

185
00:08:45,709 --> 00:08:50,390
want to preserve<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the properties of a</font>

186
00:08:48,110 --> 00:08:52,279
random Oracle<font color="#E5E5E5"> if the original</font>

187
00:08:50,390 --> 00:08:55,250
specification is assumed<font color="#E5E5E5"> to be a run</font>

188
00:08:52,279 --> 00:08:57,649
Oracle<font color="#E5E5E5"> so in this way we want to clip</font>

189
00:08:55,250 --> 00:08:58,220
the power of such cryptographic attacks

190
00:08:57,649 --> 00:09:03,920
on the

191
00:08:58,220 --> 00:09:05,150
function so before I<font color="#E5E5E5"> explain the formal</font>

192
00:09:03,920 --> 00:09:07,459
definition<font color="#E5E5E5"> of what do we mean by</font>

193
00:09:05,150 --> 00:09:08,840
correcting<font color="#CCCCCC"> around</font><font color="#E5E5E5"> Oracle let me briefly</font>

194
00:09:07,460 --> 00:09:13,850
introduce a couple<font color="#E5E5E5"> of a simple</font>

195
00:09:08,840 --> 00:09:17,320
observations so first actually

196
00:09:13,850 --> 00:09:20,840
<font color="#E5E5E5">deterministic correction will never work</font>

197
00:09:17,320 --> 00:09:23,900
<font color="#E5E5E5">why we say so let's see a concrete</font>

198
00:09:20,840 --> 00:09:25,760
example suppose the capital G is the

199
00:09:23,900 --> 00:09:28,699
corrected version of the hash<font color="#E5E5E5"> function</font>

200
00:09:25,760 --> 00:09:30,590
<font color="#CCCCCC">and H tilde is the malicious</font>

201
00:09:28,700 --> 00:09:33,020
implementation what we're gonna do we're

202
00:09:30,590 --> 00:09:35,750
<font color="#E5E5E5">gonna first pre-process the input using</font>

203
00:09:33,020 --> 00:09:38,750
some function f<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> post-processed</font>

204
00:09:35,750 --> 00:09:40,820
of the output using<font color="#E5E5E5"> some function G but</font>

205
00:09:38,750 --> 00:09:44,090
our claim this can never be<font color="#CCCCCC"> run</font><font color="#E5E5E5"> Oracle</font>

206
00:09:40,820 --> 00:09:45,860
the<font color="#CCCCCC"> attack is pretty simple so the</font>

207
00:09:44,090 --> 00:09:47,960
attacker gonna<font color="#CCCCCC"> plan the trigger</font><font color="#E5E5E5"> in a</font>

208
00:09:45,860 --> 00:09:50,480
different way<font color="#CCCCCC"> so instead of directly</font>

209
00:09:47,960 --> 00:09:52,100
putting<font color="#E5E5E5"> the backdoor Z at the</font><font color="#CCCCCC"> hash</font>

210
00:09:50,480 --> 00:09:56,390
<font color="#E5E5E5">implementation he gonna choose a</font>

211
00:09:52,100 --> 00:09:59,410
backdoor but evaluate first at first<font color="#E5E5E5"> and</font>

212
00:09:56,390 --> 00:10:02,270
<font color="#CCCCCC">plan</font><font color="#E5E5E5"> this value as a trigger</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> H tilde</font>

213
00:09:59,410 --> 00:10:05,150
now<font color="#E5E5E5"> it's very easy the attacker knows</font>

214
00:10:02,270 --> 00:10:07,550
<font color="#E5E5E5">for sure when the capital</font><font color="#CCCCCC"> G value it had</font>

215
00:10:05,150 --> 00:10:10,490
this back to a point Z it can<font color="#CCCCCC"> always</font>

216
00:10:07,550 --> 00:10:15,439
<font color="#CCCCCC">have equal to G 0 is fully predictable -</font>

217
00:10:10,490 --> 00:10:17,660
that was well on the<font color="#E5E5E5"> other hand if we</font>

218
00:10:15,440 --> 00:10:19,520
use so this means we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to use</font>

219
00:10:17,660 --> 00:10:22,010
randomness<font color="#E5E5E5"> but if we use private</font>

220
00:10:19,520 --> 00:10:24,350
<font color="#CCCCCC">roundness</font><font color="#E5E5E5"> everything become</font><font color="#CCCCCC"> trivial</font><font color="#E5E5E5"> so</font>

221
00:10:22,010 --> 00:10:26,390
we simply shift at the<font color="#E5E5E5"> input intuitively</font>

222
00:10:24,350 --> 00:10:29,450
the input<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be mapped to a random</font>

223
00:10:26,390 --> 00:10:31,610
point and if the malicious

224
00:10:29,450 --> 00:10:33,560
implementation is correct on

225
00:10:31,610 --> 00:10:36,200
overwhelming personal input<font color="#CCCCCC"> a random</font>

226
00:10:33,560 --> 00:10:38,420
point likely will be good but

227
00:10:36,200 --> 00:10:41,120
unfortunately<font color="#E5E5E5"> this model is not</font>

228
00:10:38,420 --> 00:10:43,520
realistic<font color="#E5E5E5"> at all because hash function</font>

229
00:10:41,120 --> 00:10:46,550
especially run or<font color="#CCCCCC"> go is a public object</font>

230
00:10:43,520 --> 00:10:48,260
<font color="#E5E5E5">which which needs</font><font color="#CCCCCC"> to be accessible by</font>

231
00:10:46,550 --> 00:10:50,089
everyone<font color="#CCCCCC"> which can be evaluated</font><font color="#E5E5E5"> by</font>

232
00:10:48,260 --> 00:10:51,950
<font color="#E5E5E5">everyone and in particularly different</font>

233
00:10:50,090 --> 00:10:55,640
people evaluate<font color="#E5E5E5"> that same point it</font>

234
00:10:51,950 --> 00:10:58,160
should<font color="#CCCCCC"> always return the same output</font><font color="#E5E5E5"> so</font>

235
00:10:55,640 --> 00:11:01,640
what do we<font color="#CCCCCC"> learn here</font><font color="#E5E5E5"> there seems the</font>

236
00:10:58,160 --> 00:11:03,949
<font color="#E5E5E5">only choice we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> is to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> some small</font>

237
00:11:01,640 --> 00:11:06,380
<font color="#E5E5E5">amount of public randomness and this</font>

238
00:11:03,950 --> 00:11:10,000
public roundness is<font color="#E5E5E5"> chosen after the</font>

239
00:11:06,380 --> 00:11:10,000
<font color="#CCCCCC">implementation is provided</font>

240
00:11:11,750 --> 00:11:17,029
so now we are<font color="#CCCCCC"> ready to actually consider</font>

241
00:11:13,610 --> 00:11:19,160
the formal definition<font color="#CCCCCC"> we want to correct</font>

242
00:11:17,029 --> 00:11:21,079
a<font color="#E5E5E5"> subverted implementation back to a</font>

243
00:11:19,160 --> 00:11:24,560
good one<font color="#E5E5E5"> right so we want to capture as</font>

244
00:11:21,079 --> 00:11:26,628
good as so that's<font color="#E5E5E5"> a very nice framework</font>

245
00:11:24,560 --> 00:11:31,128
called<font color="#E5E5E5"> in differentiability captures the</font>

246
00:11:26,629 --> 00:11:34,189
idea object<font color="#E5E5E5"> in cryptography</font><font color="#CCCCCC"> especially</font>

247
00:11:31,129 --> 00:11:37,370
the property as good as so how it<font color="#E5E5E5"> works</font>

248
00:11:34,189 --> 00:11:41,360
<font color="#CCCCCC">so</font><font color="#E5E5E5"> construction takes the idea object G</font>

249
00:11:37,370 --> 00:11:43,579
try to mimic another idea object F and

250
00:11:41,360 --> 00:11:46,029
what<font color="#E5E5E5"> do</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> mean is as good the</font>

251
00:11:43,579 --> 00:11:48,920
construction<font color="#CCCCCC"> C gonna be as good as</font><font color="#E5E5E5"> f is</font>

252
00:11:46,029 --> 00:11:51,879
for any distinguisher there<font color="#CCCCCC"> exists a</font>

253
00:11:48,920 --> 00:11:54,949
simulator<font color="#E5E5E5"> and when the distinguisher</font>

254
00:11:51,879 --> 00:11:56,810
communicates with<font color="#E5E5E5"> real world or ideal</font>

255
00:11:54,949 --> 00:12:00,199
<font color="#E5E5E5">word the distinguisher cannot tell them</font>

256
00:11:56,810 --> 00:12:02,029
<font color="#E5E5E5">apart and what was very nice</font><font color="#CCCCCC"> about it</font>

257
00:12:00,199 --> 00:12:03,829
that there was something<font color="#E5E5E5"> called a</font>

258
00:12:02,029 --> 00:12:07,610
replacement<font color="#E5E5E5"> theorem was proved before</font>

259
00:12:03,829 --> 00:12:09,620
<font color="#E5E5E5">that the actual construction</font><font color="#CCCCCC"> C by Oracle</font>

260
00:12:07,610 --> 00:12:12,139
access to the idea of Jack G actually

261
00:12:09,620 --> 00:12:16,790
<font color="#CCCCCC">indeed</font><font color="#E5E5E5"> can replace the idea</font><font color="#CCCCCC"> of an ideal</font>

262
00:12:12,139 --> 00:12:19,759
object<font color="#CCCCCC"> F in larger</font><font color="#E5E5E5"> systems so we can</font>

263
00:12:16,790 --> 00:12:22,849
safely just plug<font color="#CCCCCC"> in two other</font><font color="#E5E5E5"> places now</font>

264
00:12:19,759 --> 00:12:25,009
we want to model similar<font color="#CCCCCC"> sin</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> none of</font>

265
00:12:22,850 --> 00:12:27,529
<font color="#E5E5E5">we immediately meet a trouble</font>

266
00:12:25,009 --> 00:12:29,509
so first the construction now setting

267
00:12:27,529 --> 00:12:32,750
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> even have direct access</font>

268
00:12:29,509 --> 00:12:35,420
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> idea original idea object the</font>

269
00:12:32,750 --> 00:12:37,870
original<font color="#CCCCCC"> run Oracle because it can only</font>

270
00:12:35,420 --> 00:12:41,839
access while the malicious

271
00:12:37,870 --> 00:12:46,550
implementation actually<font color="#E5E5E5"> to tailor his</font>

272
00:12:41,839 --> 00:12:50,480
model<font color="#CCCCCC"> to refract I was you know setting</font>

273
00:12:46,550 --> 00:12:52,219
is quite quite highly<font color="#E5E5E5"> non-trivial so we</font>

274
00:12:50,480 --> 00:12:54,439
call the new notion<font color="#E5E5E5"> crook'd in</font>

275
00:12:52,220 --> 00:12:55,040
differentiability<font color="#CCCCCC"> so what's the</font>

276
00:12:54,439 --> 00:12:58,699
procedure

277
00:12:55,040 --> 00:13:01,129
so first the distinguisher carries the

278
00:12:58,699 --> 00:13:03,050
original idea object and<font color="#E5E5E5"> try to do all</font>

279
00:13:01,129 --> 00:13:04,550
kind of pre-processing<font color="#E5E5E5"> prepare the</font>

280
00:13:03,050 --> 00:13:06,829
backdoor prepare the malicious

281
00:13:04,550 --> 00:13:10,099
implementation then he just dispersed

282
00:13:06,829 --> 00:13:11,508
the malicious segmentation and the

283
00:13:10,100 --> 00:13:13,269
<font color="#E5E5E5">construction comes the construction</font>

284
00:13:11,509 --> 00:13:15,620
<font color="#E5E5E5">gonna sample some public randomness and</font>

285
00:13:13,269 --> 00:13:18,620
reveal the public<font color="#CCCCCC"> run</font><font color="#E5E5E5"> is to</font><font color="#CCCCCC"> distinguish</font>

286
00:13:15,620 --> 00:13:20,720
<font color="#CCCCCC">then the distinguisher cannot</font><font color="#E5E5E5"> interact</font>

287
00:13:18,620 --> 00:13:22,370
with two words again<font color="#E5E5E5"> try to distinguish</font>

288
00:13:20,720 --> 00:13:23,899
whether he's talking<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

289
00:13:22,370 --> 00:13:25,160
construction<font color="#E5E5E5"> using the subverted</font>

290
00:13:23,899 --> 00:13:27,110
implementation or<font color="#E5E5E5"> see</font>

291
00:13:25,160 --> 00:13:31,490
he's talking beside your<font color="#CCCCCC"> ideal world</font>

292
00:13:27,110 --> 00:13:36,680
object and here the run is we only use a

293
00:13:31,490 --> 00:13:39,800
<font color="#E5E5E5">small fixed amount and very nicely we</font>

294
00:13:36,680 --> 00:13:42,229
also show<font color="#E5E5E5"> a</font><font color="#CCCCCC"> version of variant</font><font color="#E5E5E5"> of the</font>

295
00:13:39,800 --> 00:13:45,410
replacement<font color="#E5E5E5"> serum we call - cooked</font><font color="#CCCCCC"> a</font>

296
00:13:42,230 --> 00:13:48,910
replacement serum<font color="#E5E5E5"> is that the our</font>

297
00:13:45,410 --> 00:13:51,949
construction<font color="#E5E5E5"> if any construction is</font>

298
00:13:48,910 --> 00:13:54,110
could satisfy the<font color="#E5E5E5"> crooked in this eating</font>

299
00:13:51,949 --> 00:13:56,979
differentiability<font color="#CCCCCC"> we can also</font><font color="#E5E5E5"> safely</font>

300
00:13:54,110 --> 00:13:59,990
replace idea object in larger systems

301
00:13:56,980 --> 00:14:01,879
<font color="#E5E5E5">now is the model settle down let's try</font>

302
00:13:59,990 --> 00:14:07,970
<font color="#CCCCCC">to see how</font><font color="#E5E5E5"> we can get the actual</font>

303
00:14:01,879 --> 00:14:10,220
<font color="#E5E5E5">construction let's make some attempt so</font>

304
00:14:07,970 --> 00:14:11,750
first very natural and simple<font color="#E5E5E5"> idea is</font>

305
00:14:10,220 --> 00:14:13,430
still<font color="#E5E5E5"> we want to shifting the input</font><font color="#CCCCCC"> rack</font>

306
00:14:11,750 --> 00:14:15,829
because<font color="#CCCCCC"> that the trigger is contained an</font>

307
00:14:13,430 --> 00:14:19,069
input if we can map<font color="#E5E5E5"> the input somehow to</font>

308
00:14:15,829 --> 00:14:22,300
<font color="#CCCCCC">a random places</font><font color="#E5E5E5"> long ago but this</font>

309
00:14:19,069 --> 00:14:26,990
construction<font color="#E5E5E5"> obviously is easy to attack</font>

310
00:14:22,300 --> 00:14:29,449
because the<font color="#E5E5E5"> run is here used is public</font>

311
00:14:26,990 --> 00:14:31,399
<font color="#E5E5E5">the</font><font color="#CCCCCC"> attacker actually</font><font color="#E5E5E5"> knows when the</font>

312
00:14:29,449 --> 00:14:33,949
attacker originally implanted<font color="#CCCCCC"> backdoor Z</font>

313
00:14:31,399 --> 00:14:36,079
in the<font color="#E5E5E5"> edge</font><font color="#CCCCCC"> theater all the attacker</font>

314
00:14:33,949 --> 00:14:37,430
<font color="#E5E5E5">needs is just</font><font color="#CCCCCC"> to find back</font><font color="#E5E5E5"> this at this</font>

315
00:14:36,079 --> 00:14:39,380
this<font color="#E5E5E5"> back</font><font color="#CCCCCC"> door</font>

316
00:14:37,430 --> 00:14:42,319
it simply<font color="#E5E5E5"> shipped he choose the input</font>

317
00:14:39,380 --> 00:14:44,750
<font color="#E5E5E5">such that when shifted after</font><font color="#CCCCCC"> the run</font>

318
00:14:42,319 --> 00:14:46,610
<font color="#CCCCCC">nazar</font><font color="#E5E5E5"> he will map back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the original</font>

319
00:14:44,750 --> 00:14:49,329
back to Z so it's very easy<font color="#E5E5E5"> he and</font>

320
00:14:46,610 --> 00:14:52,579
trivially distinguished from<font color="#E5E5E5"> this point</font>

321
00:14:49,329 --> 00:14:54,829
let's try something<font color="#E5E5E5"> more slightly more</font>

322
00:14:52,579 --> 00:14:56,420
complicated<font color="#CCCCCC"> well just shifting input</font>

323
00:14:54,829 --> 00:14:59,300
<font color="#E5E5E5">might not be good how</font><font color="#CCCCCC"> about we also</font>

324
00:14:56,420 --> 00:15:03,680
shift output we also mix<font color="#E5E5E5"> several items</font>

325
00:14:59,300 --> 00:15:07,040
<font color="#E5E5E5">of the output now it seems the immediate</font>

326
00:15:03,680 --> 00:15:10,069
attack<font color="#E5E5E5"> one won't be helpful because even</font>

327
00:15:07,040 --> 00:15:11,959
if the adverse refines the back door

328
00:15:10,069 --> 00:15:13,910
here but it's going<font color="#E5E5E5"> to be shifted</font><font color="#CCCCCC"> to</font>

329
00:15:11,959 --> 00:15:17,779
some other places<font color="#E5E5E5"> intuitively</font><font color="#CCCCCC"> it seems</font>

330
00:15:13,910 --> 00:15:20,329
<font color="#E5E5E5">good</font><font color="#CCCCCC"> but actually the attack could just</font>

331
00:15:17,779 --> 00:15:22,250
do<font color="#E5E5E5"> something</font><font color="#CCCCCC"> slightly smarter he</font><font color="#E5E5E5"> plans</font>

332
00:15:20,329 --> 00:15:24,949
slightly more back doors<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

333
00:15:22,250 --> 00:15:27,410
<font color="#E5E5E5">planting one he gonna try to divide</font>

334
00:15:24,949 --> 00:15:29,000
input into<font color="#E5E5E5"> half they're gonna be two</font>

335
00:15:27,410 --> 00:15:31,610
types of<font color="#CCCCCC"> backdoor</font><font color="#E5E5E5"> the first type of</font>

336
00:15:29,000 --> 00:15:33,980
backdoor contains a very special string

337
00:15:31,610 --> 00:15:35,990
<font color="#CCCCCC">z as long as the first</font><font color="#E5E5E5"> half of string is</font>

338
00:15:33,980 --> 00:15:38,760
<font color="#E5E5E5">equal to Z ain't gonna be backward</font>

339
00:15:35,990 --> 00:15:41,160
similarly another half<font color="#CCCCCC"> if the second</font>

340
00:15:38,760 --> 00:15:43,439
half inspector is equal to a special

341
00:15:41,160 --> 00:15:45,600
<font color="#CCCCCC">struensee it's also backdoors</font><font color="#E5E5E5"> still it's</font>

342
00:15:43,440 --> 00:15:49,620
only exponentially small portion of the

343
00:15:45,600 --> 00:15:52,470
input so in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> break the</font><font color="#CCCCCC"> attacker</font>

344
00:15:49,620 --> 00:15:55,020
can simply find<font color="#E5E5E5"> the input</font><font color="#CCCCCC"> satisfied that</font>

345
00:15:52,470 --> 00:15:56,910
when<font color="#E5E5E5"> shipped</font><font color="#CCCCCC"> arrays are</font><font color="#E5E5E5"> one gonna map to</font>

346
00:15:55,020 --> 00:16:00,060
the first type of<font color="#CCCCCC"> vector force</font><font color="#E5E5E5"> to the</font>

347
00:15:56,910 --> 00:16:02,939
first part of the 40 inputs<font color="#E5E5E5"> and when</font>

348
00:16:00,060 --> 00:16:04,979
shifted using<font color="#CCCCCC"> r2 gonna be</font><font color="#E5E5E5"> forced back to</font>

349
00:16:02,940 --> 00:16:08,610
the second type<font color="#CCCCCC"> of vector so in this way</font>

350
00:16:04,980 --> 00:16:13,230
again<font color="#E5E5E5"> he can trivially distinguish by</font>

351
00:16:08,610 --> 00:16:15,540
finding such kind<font color="#E5E5E5"> of input what is worse</font>

352
00:16:13,230 --> 00:16:19,860
is that<font color="#E5E5E5"> this type of attack actually can</font>

353
00:16:15,540 --> 00:16:21,900
be<font color="#E5E5E5"> generalized even to suppose the</font>

354
00:16:19,860 --> 00:16:24,720
<font color="#E5E5E5">length of input is n we can generalize</font>

355
00:16:21,900 --> 00:16:26,490
<font color="#CCCCCC">this attack to and divide</font><font color="#E5E5E5"> by security</font>

356
00:16:24,720 --> 00:16:29,040
<font color="#E5E5E5">map a security parameter this many of</font>

357
00:16:26,490 --> 00:16:31,170
terms even<font color="#E5E5E5"> with shift and mix and shift</font>

358
00:16:29,040 --> 00:16:33,569
using<font color="#E5E5E5"> this many terms the idea is</font>

359
00:16:31,170 --> 00:16:35,760
actually<font color="#E5E5E5"> very simple we just cut the</font>

360
00:16:33,570 --> 00:16:38,520
input into chunks and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> plan</font><font color="#E5E5E5"> back</font>

361
00:16:35,760 --> 00:16:39,960
doing<font color="#E5E5E5"> each chunk and still all the back</font>

362
00:16:38,520 --> 00:16:42,750
total number back doors<font color="#E5E5E5"> to</font><font color="#CCCCCC"> it's</font>

363
00:16:39,960 --> 00:16:46,140
exponentially small this sounds quite

364
00:16:42,750 --> 00:16:48,510
disappointing but<font color="#E5E5E5"> the attack only</font>

365
00:16:46,140 --> 00:16:52,890
generalized to this term<font color="#CCCCCC"> these many of</font>

366
00:16:48,510 --> 00:16:55,890
<font color="#E5E5E5">terms let's think a little bit how about</font>

367
00:16:52,890 --> 00:16:58,980
we keep adding<font color="#E5E5E5"> since it seems our attack</font>

368
00:16:55,890 --> 00:17:03,660
<font color="#E5E5E5">only works to this many terms right</font><font color="#CCCCCC"> if</font>

369
00:16:58,980 --> 00:17:05,790
we have more terms<font color="#E5E5E5"> would it help</font><font color="#CCCCCC"> if this</font>

370
00:17:03,660 --> 00:17:08,099
<font color="#E5E5E5">idea of mice sounds a little silly from</font>

371
00:17:05,790 --> 00:17:11,369
<font color="#E5E5E5">the beginning but actually it do have</font>

372
00:17:08,099 --> 00:17:13,980
some rationale behind because in order

373
00:17:11,369 --> 00:17:16,260
<font color="#CCCCCC">for the attacker to influence any value</font>

374
00:17:13,980 --> 00:17:18,209
of<font color="#E5E5E5"> any term it has to pass some trigger</font>

375
00:17:16,260 --> 00:17:20,220
input in right trigger<font color="#E5E5E5"> input means</font>

376
00:17:18,209 --> 00:17:22,440
information<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to burn the</font>

377
00:17:20,220 --> 00:17:25,110
original bits at least one trigger needs

378
00:17:22,440 --> 00:17:27,600
to burn one bit so if<font color="#E5E5E5"> total number will</font>

379
00:17:25,109 --> 00:17:31,050
be say<font color="#E5E5E5"> n that means the attacker can at</font>

380
00:17:27,599 --> 00:17:33,600
most influence<font color="#E5E5E5"> n terms so if we mixing</font>

381
00:17:31,050 --> 00:17:36,389
enough times it seems there must exist

382
00:17:33,600 --> 00:17:40,760
some term that<font color="#E5E5E5"> is never influenced by</font>

383
00:17:36,390 --> 00:17:44,520
the malicious input<font color="#E5E5E5"> that's the hope</font>

384
00:17:40,760 --> 00:17:47,129
let us try<font color="#CCCCCC"> to</font><font color="#E5E5E5"> analyze this this whether</font>

385
00:17:44,520 --> 00:17:49,500
<font color="#E5E5E5">this construction really works it turns</font>

386
00:17:47,130 --> 00:17:52,260
out the analysis is surprisingly

387
00:17:49,500 --> 00:17:54,840
difficult<font color="#CCCCCC"> or maybe complex</font>

388
00:17:52,260 --> 00:17:59,158
or maybe you<font color="#CCCCCC"> guys</font><font color="#E5E5E5"> can find a much</font>

389
00:17:54,840 --> 00:18:00,629
simpler way<font color="#CCCCCC"> than let me</font><font color="#E5E5E5"> know so what we</font>

390
00:17:59,159 --> 00:18:03,289
really want<font color="#CCCCCC"> to show we want to show that</font>

391
00:18:00,630 --> 00:18:06,480
<font color="#CCCCCC">for every input</font><font color="#E5E5E5"> X there exists some term</font>

392
00:18:03,289 --> 00:18:08,370
<font color="#CCCCCC">what we observe now is whatever</font><font color="#E5E5E5"> input X</font>

393
00:18:06,480 --> 00:18:10,769
there exists some term that will be

394
00:18:08,370 --> 00:18:13,649
honestly generated<font color="#E5E5E5"> honestly generated</font>

395
00:18:10,769 --> 00:18:16,409
means the output<font color="#CCCCCC"> of this that this</font>

396
00:18:13,649 --> 00:18:20,580
particular<font color="#CCCCCC"> input value is equal to the</font>

397
00:18:16,409 --> 00:18:23,460
specification but this is not enough<font color="#CCCCCC"> at</font>

398
00:18:20,580 --> 00:18:26,279
<font color="#CCCCCC">all because</font><font color="#E5E5E5"> the reason that this term is</font>

399
00:18:23,460 --> 00:18:27,960
not changed in might because other words

400
00:18:26,279 --> 00:18:30,809
we actually want to keep<font color="#E5E5E5"> it unchanged</font>

401
00:18:27,960 --> 00:18:33,330
<font color="#E5E5E5">their word might do a very complex</font>

402
00:18:30,809 --> 00:18:36,658
rejection sampling using<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> them as</font>

403
00:18:33,330 --> 00:18:38,760
a whole if no output is something he

404
00:18:36,659 --> 00:18:42,360
likes he can<font color="#E5E5E5"> he would be happy</font><font color="#CCCCCC"> to keep</font>

405
00:18:38,760 --> 00:18:44,279
some terms<font color="#CCCCCC"> unchanged so let me</font><font color="#E5E5E5"> that</font>

406
00:18:42,360 --> 00:18:46,469
<font color="#CCCCCC">suggests we need to prove something more</font>

407
00:18:44,279 --> 00:18:48,419
<font color="#E5E5E5">so suppose this term is honest</font><font color="#CCCCCC"> we also</font>

408
00:18:46,470 --> 00:18:51,990
need to prove there<font color="#E5E5E5"> exists some some</font>

409
00:18:48,419 --> 00:18:53,100
term that is kind of independent with

410
00:18:51,990 --> 00:18:56,880
<font color="#E5E5E5">all any other terms</font>

411
00:18:53,100 --> 00:18:59,820
so by independent here<font color="#CCCCCC"> I mean the</font><font color="#E5E5E5"> value</font>

412
00:18:56,880 --> 00:19:03,539
of here is not influenced by any<font color="#E5E5E5"> other</font>

413
00:18:59,820 --> 00:19:06,269
term at<font color="#CCCCCC"> all or to put</font><font color="#E5E5E5"> in more concretely</font>

414
00:19:03,539 --> 00:19:09,750
when<font color="#CCCCCC"> evaluate the the</font><font color="#E5E5E5"> particular input</font>

415
00:19:06,269 --> 00:19:12,480
<font color="#E5E5E5">that this point is never</font><font color="#CCCCCC"> cured</font><font color="#E5E5E5"> by the</font>

416
00:19:09,750 --> 00:19:15,059
<font color="#CCCCCC">renewal cost when evaluating any any at</font>

417
00:19:12,480 --> 00:19:18,600
any<font color="#CCCCCC"> other points</font><font color="#E5E5E5"> that's what we want to</font>

418
00:19:15,059 --> 00:19:21,299
prove<font color="#E5E5E5"> if we have this both both</font>

419
00:19:18,600 --> 00:19:23,519
<font color="#CCCCCC">properties then we try to find ensure</font>

420
00:19:21,299 --> 00:19:28,429
<font color="#CCCCCC">there's a good firm that satisfy</font><font color="#E5E5E5"> both</font>

421
00:19:23,519 --> 00:19:31,919
now we're going<font color="#E5E5E5"> to be happy but</font><font color="#CCCCCC"> there's</font>

422
00:19:28,429 --> 00:19:34,289
<font color="#E5E5E5">two challenges remain in order to first</font>

423
00:19:31,919 --> 00:19:37,200
one in order<font color="#E5E5E5"> to really show such</font>

424
00:19:34,289 --> 00:19:41,158
independence intuitively<font color="#E5E5E5"> we really need</font>

425
00:19:37,200 --> 00:19:44,159
to<font color="#E5E5E5"> examine all the values at this all</font>

426
00:19:41,159 --> 00:19:46,679
<font color="#E5E5E5">points after</font><font color="#CCCCCC"> we expose all the</font><font color="#E5E5E5"> possible</font>

427
00:19:44,159 --> 00:19:49,200
random<font color="#E5E5E5"> values we identify some</font><font color="#CCCCCC"> sometime</font>

428
00:19:46,679 --> 00:19:51,210
if we replace this term it done really

429
00:19:49,200 --> 00:19:54,059
<font color="#CCCCCC">influenced other terms at all and also</font>

430
00:19:51,210 --> 00:19:57,740
when evaluating at other<font color="#CCCCCC"> and all other</font>

431
00:19:54,059 --> 00:20:01,340
terms<font color="#E5E5E5"> this single input is never</font><font color="#CCCCCC"> cured</font>

432
00:19:57,740 --> 00:20:04,679
that seems easy but<font color="#E5E5E5"> the the the</font>

433
00:20:01,340 --> 00:20:06,090
<font color="#CCCCCC">immediate question we will face is that</font>

434
00:20:04,679 --> 00:20:08,610
since we already

435
00:20:06,090 --> 00:20:15,000
<font color="#E5E5E5">term how can we still claim this is</font>

436
00:20:08,610 --> 00:20:17,100
uniformly generated and also<font color="#E5E5E5"> another</font>

437
00:20:15,000 --> 00:20:19,770
<font color="#CCCCCC">challenge is that we still need</font><font color="#E5E5E5"> to</font>

438
00:20:17,100 --> 00:20:20,730
<font color="#CCCCCC">finish the stimulator and</font><font color="#E5E5E5"> inherit or</font>

439
00:20:19,770 --> 00:20:23,550
nice properties for example

440
00:20:20,730 --> 00:20:28,770
<font color="#E5E5E5">programmability it's not clear how we</font>

441
00:20:23,550 --> 00:20:30,810
can get this<font color="#E5E5E5"> property so we handle the</font>

442
00:20:28,770 --> 00:20:34,379
first challenge<font color="#E5E5E5"> by developing a new</font>

443
00:20:30,810 --> 00:20:36,000
analytic tool<font color="#E5E5E5"> and for the second</font>

444
00:20:34,380 --> 00:20:40,650
<font color="#CCCCCC">challenge we actually need to trick the</font>

445
00:20:36,000 --> 00:20:43,740
construction a little<font color="#CCCCCC"> bit more so in</font>

446
00:20:40,650 --> 00:20:46,770
order<font color="#E5E5E5"> to tackle the first challenge we</font>

447
00:20:43,740 --> 00:20:49,440
develop a new analytic machinery we call

448
00:20:46,770 --> 00:20:51,750
rejection resampling lemma<font color="#E5E5E5"> so consider a</font>

449
00:20:49,440 --> 00:20:54,840
<font color="#CCCCCC">vector of random variables</font><font color="#E5E5E5"> and there was</font>

450
00:20:51,750 --> 00:20:57,530
<font color="#E5E5E5">redefining his favorite event</font><font color="#CCCCCC"> II and the</font>

451
00:20:54,840 --> 00:21:00,860
<font color="#E5E5E5">MU means the probability</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> event</font>

452
00:20:57,530 --> 00:21:03,060
<font color="#CCCCCC">then the</font><font color="#E5E5E5"> reverse we can choose arbitrary</font>

453
00:21:00,860 --> 00:21:04,110
arbitrarily one of the random variable

454
00:21:03,060 --> 00:21:07,500
<font color="#CCCCCC">and a wrist and</font><font color="#E5E5E5"> poit</font>

455
00:21:04,110 --> 00:21:09,240
according to be a uniform<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to</font>

456
00:21:07,500 --> 00:21:11,640
the uniform distribution then this

457
00:21:09,240 --> 00:21:15,810
defines again another probability of the

458
00:21:11,640 --> 00:21:18,120
<font color="#CCCCCC">semi-wet event that adversary likes so</font>

459
00:21:15,810 --> 00:21:20,310
what we<font color="#E5E5E5"> actually prove is that these two</font>

460
00:21:18,120 --> 00:21:24,389
events<font color="#E5E5E5"> the two probabilities actually do</font>

461
00:21:20,310 --> 00:21:26,490
not differ much<font color="#E5E5E5"> why the resampling lemma</font>

462
00:21:24,390 --> 00:21:29,130
<font color="#E5E5E5">is needed because</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to pretend</font>

463
00:21:26,490 --> 00:21:31,950
<font color="#E5E5E5">after we evaluating all the points we</font>

464
00:21:29,130 --> 00:21:34,830
identify one good item<font color="#CCCCCC"> right</font><font color="#E5E5E5"> we still</font>

465
00:21:31,950 --> 00:21:37,350
<font color="#CCCCCC">want to pretend originally</font><font color="#E5E5E5"> it's we never</font>

466
00:21:34,830 --> 00:21:40,139
see<font color="#E5E5E5"> it and it gonna be originally</font>

467
00:21:37,350 --> 00:21:41,969
uniform we simply rerun<font color="#E5E5E5"> a resample at</font>

468
00:21:40,140 --> 00:21:44,100
this point then these are<font color="#E5E5E5"> completely</font>

469
00:21:41,970 --> 00:21:46,500
uniform stuff then we can have the

470
00:21:44,100 --> 00:21:48,689
probability<font color="#E5E5E5"> here and because of the</font>

471
00:21:46,500 --> 00:21:50,280
resampling lemma<font color="#CCCCCC"> these two probability</font>

472
00:21:48,690 --> 00:21:54,500
<font color="#CCCCCC">doesn't really differ much we can</font>

473
00:21:50,280 --> 00:21:59,700
establish<font color="#E5E5E5"> original</font><font color="#CCCCCC"> bound</font><font color="#E5E5E5"> of our original</font>

474
00:21:54,500 --> 00:22:01,710
evaluation so our final construction<font color="#CCCCCC"> oh</font>

475
00:21:59,700 --> 00:22:02,850
there's a second challenge<font color="#CCCCCC"> second</font>

476
00:22:01,710 --> 00:22:04,730
challenge we want<font color="#E5E5E5"> to get the</font>

477
00:22:02,850 --> 00:22:06,840
programmability or the other nice stuff

478
00:22:04,730 --> 00:22:08,910
<font color="#CCCCCC">so in order to</font><font color="#E5E5E5"> have full simulation</font>

479
00:22:06,840 --> 00:22:13,730
<font color="#CCCCCC">actually we just add one more layer</font><font color="#E5E5E5"> of</font>

480
00:22:08,910 --> 00:22:13,730
<font color="#CCCCCC">hash and though at all the constructions</font>

481
00:22:14,519 --> 00:22:20,320
<font color="#E5E5E5">okay I already almost explained how we</font>

482
00:22:18,100 --> 00:22:23,199
tackle<font color="#E5E5E5"> the two challenges the first</font><font color="#CCCCCC"> one</font>

483
00:22:20,320 --> 00:22:24,700
is after<font color="#CCCCCC"> we've know</font><font color="#E5E5E5"> after we draw all</font>

484
00:22:23,200 --> 00:22:27,039
the possible expose all the<font color="#CCCCCC"> random</font>

485
00:22:24,700 --> 00:22:29,460
values and we just went pick up the good

486
00:22:27,039 --> 00:22:32,169
turn and resample this one pretend this

487
00:22:29,460 --> 00:22:34,659
pretend we<font color="#E5E5E5"> never see it because</font><font color="#CCCCCC"> the the</font>

488
00:22:32,169 --> 00:22:36,580
after<font color="#E5E5E5"> a sampling is a uniform thing and</font>

489
00:22:34,659 --> 00:22:41,559
the whole string<font color="#E5E5E5"> would be essentially</font>

490
00:22:36,580 --> 00:22:43,240
<font color="#E5E5E5">uniform and after do the resampling</font><font color="#CCCCCC"> we</font>

491
00:22:41,559 --> 00:22:45,460
<font color="#E5E5E5">get</font><font color="#CCCCCC"> a bound</font><font color="#E5E5E5"> we can essentially prove</font>

492
00:22:43,240 --> 00:22:46,899
that the internal terms<font color="#E5E5E5"> is kind of</font>

493
00:22:45,460 --> 00:22:50,889
<font color="#E5E5E5">completely out of control of the</font>

494
00:22:46,899 --> 00:22:52,508
advisory and it will be<font color="#E5E5E5"> unpredictable to</font>

495
00:22:50,889 --> 00:22:55,330
the<font color="#E5E5E5"> adversary if he never really</font>

496
00:22:52,509 --> 00:22:59,080
evaluated all these points then applying

497
00:22:55,330 --> 00:23:01,750
one actual layer<font color="#E5E5E5"> I'm sorry then applying</font>

498
00:22:59,080 --> 00:23:04,199
one<font color="#CCCCCC"> extra layer</font><font color="#E5E5E5"> we can easily</font><font color="#CCCCCC"> imagine</font>

499
00:23:01,750 --> 00:23:06,639
<font color="#E5E5E5">the whole thing gonna be uniform again</font>

500
00:23:04,200 --> 00:23:08,440
<font color="#E5E5E5">and also of course we need to handle all</font>

501
00:23:06,639 --> 00:23:10,990
the conditions<font color="#E5E5E5"> all based on different</font>

502
00:23:08,440 --> 00:23:12,580
adaptive<font color="#CCCCCC"> Curie's but the all this</font>

503
00:23:10,990 --> 00:23:16,080
condition can be<font color="#E5E5E5"> handled in a similar</font>

504
00:23:12,580 --> 00:23:19,449
way<font color="#E5E5E5"> of the following</font><font color="#CCCCCC"> the same structure</font>

505
00:23:16,080 --> 00:23:22,178
so now we after were seeing<font color="#E5E5E5"> this</font>

506
00:23:19,450 --> 00:23:25,570
construction we show you the proof<font color="#E5E5E5"> that</font>

507
00:23:22,179 --> 00:23:27,909
if we just mixing and shifting the<font color="#E5E5E5"> hash</font>

508
00:23:25,570 --> 00:23:30,129
function<font color="#E5E5E5"> enough times we can we indeed</font>

509
00:23:27,909 --> 00:23:31,240
get a corrected<font color="#CCCCCC"> version of run</font><font color="#E5E5E5"> Oracle</font>

510
00:23:30,129 --> 00:23:36,610
what does that mean

511
00:23:31,240 --> 00:23:38,769
<font color="#E5E5E5">that means we can safely deploy the hash</font>

512
00:23:36,610 --> 00:23:40,840
implementation in<font color="#CCCCCC"> realist or in real</font>

513
00:23:38,769 --> 00:23:44,710
<font color="#E5E5E5">life as long as we wrap it according</font><font color="#CCCCCC"> to</font>

514
00:23:40,840 --> 00:23:46,928
our correction<font color="#E5E5E5"> so the or the early</font>

515
00:23:44,710 --> 00:23:49,840
<font color="#E5E5E5">threat I mentioned in the attack</font><font color="#CCCCCC"> now we</font>

516
00:23:46,929 --> 00:23:53,830
can be prevented<font color="#E5E5E5"> we can safely deploy a</font>

517
00:23:49,840 --> 00:23:55,269
<font color="#CCCCCC">new chain while still using the hash</font>

518
00:23:53,830 --> 00:23:56,678
implementation<font color="#CCCCCC"> say we have the hash</font>

519
00:23:55,269 --> 00:24:00,129
implementation<font color="#E5E5E5"> in the mining machine</font>

520
00:23:56,679 --> 00:24:02,769
then the<font color="#CCCCCC"> Genesius</font><font color="#E5E5E5"> brach gonna be chosen</font>

521
00:24:00,129 --> 00:24:05,230
<font color="#E5E5E5">and the public random is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be put in</font>

522
00:24:02,769 --> 00:24:07,899
<font color="#CCCCCC">the Genesis block</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> the miners are</font>

523
00:24:05,230 --> 00:24:10,320
them the<font color="#CCCCCC"> miners essentially going</font><font color="#E5E5E5"> to use</font>

524
00:24:07,899 --> 00:24:13,149
the wrapped hash function to safely

525
00:24:10,320 --> 00:24:18,460
<font color="#CCCCCC">doing solving their puzzle solutions and</font>

526
00:24:13,149 --> 00:24:20,289
confidently deployed new chain<font color="#E5E5E5"> and many</font>

527
00:24:18,460 --> 00:24:24,549
more implementing applications when we

528
00:24:20,289 --> 00:24:26,379
<font color="#E5E5E5">replace a malicious</font><font color="#CCCCCC"> implementation and</font><font color="#E5E5E5"> I</font>

529
00:24:24,549 --> 00:24:27,549
would like to end the talk with a very

530
00:24:26,379 --> 00:24:31,629
simple<font color="#E5E5E5"> reflection</font>

531
00:24:27,549 --> 00:24:34,059
so it seems a lot similar<font color="#E5E5E5"> to a classical</font>

532
00:24:31,629 --> 00:24:37,320
result of<font color="#E5E5E5"> God</font><font color="#CCCCCC"> self-correcting programs</font>

533
00:24:34,059 --> 00:24:40,720
well there<font color="#E5E5E5"> takes a 40 program try to</font>

534
00:24:37,320 --> 00:24:42,460
correct it that is arrow at<font color="#CCCCCC"> the small</font>

535
00:24:40,720 --> 00:24:45,639
fraction<font color="#E5E5E5"> or input we won't turn it to be</font>

536
00:24:42,460 --> 00:24:48,549
correct<font color="#E5E5E5"> with almost correct at every</font>

537
00:24:45,639 --> 00:24:50,619
input<font color="#CCCCCC"> well here we also have a hash</font>

538
00:24:48,549 --> 00:24:53,679
<font color="#CCCCCC">function which gonna</font><font color="#E5E5E5"> be incorrect at a</font>

539
00:24:50,619 --> 00:24:55,720
small portion<font color="#CCCCCC"> of input</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> sort of</font>

540
00:24:53,679 --> 00:24:57,549
differences<font color="#CCCCCC"> first</font><font color="#E5E5E5"> in self correcting</font>

541
00:24:55,720 --> 00:25:00,220
programs<font color="#E5E5E5"> we are allowed</font><font color="#CCCCCC"> to use probably</font>

542
00:24:57,549 --> 00:25:02,259
<font color="#E5E5E5">reminisce</font><font color="#CCCCCC"> but on the other</font><font color="#E5E5E5"> hand we need</font>

543
00:25:00,220 --> 00:25:04,090
<font color="#E5E5E5">to preserve the exact functionality</font><font color="#CCCCCC"> if</font>

544
00:25:02,259 --> 00:25:05,109
we compute<font color="#E5E5E5"> X plus</font><font color="#CCCCCC"> 2 we still need to</font>

545
00:25:04,090 --> 00:25:07,209
compute<font color="#E5E5E5"> X plus 2</font>

546
00:25:05,109 --> 00:25:09,519
but in<font color="#E5E5E5"> our setting we don't have the</font>

547
00:25:07,210 --> 00:25:11,049
luxury<font color="#E5E5E5"> of a public</font><font color="#CCCCCC"> run needs</font><font color="#E5E5E5"> to use as</font>

548
00:25:09,519 --> 00:25:13,779
we explained because<font color="#E5E5E5"> run or</font><font color="#CCCCCC"> Co is a</font>

549
00:25:11,049 --> 00:25:15,580
public object but on the other hand<font color="#E5E5E5"> we</font>

550
00:25:13,779 --> 00:25:18,249
<font color="#E5E5E5">don't really need to preserve the exact</font>

551
00:25:15,580 --> 00:25:20,949
functionality<font color="#CCCCCC"> shot of 56</font><font color="#E5E5E5"> after wrapping</font>

552
00:25:18,249 --> 00:25:22,330
might not even be<font color="#CCCCCC"> sha-256</font><font color="#E5E5E5"> but we</font>

553
00:25:20,950 --> 00:25:26,169
preserve<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> distribution of</font>

554
00:25:22,330 --> 00:25:28,059
properties in some sense we can view<font color="#CCCCCC"> our</font>

555
00:25:26,169 --> 00:25:30,759
is out this<font color="#E5E5E5"> kind of distributional</font>

556
00:25:28,059 --> 00:25:32,889
version of the classical theory and I

557
00:25:30,759 --> 00:25:35,080
hope this<font color="#E5E5E5"> perspective might it</font><font color="#CCCCCC"> give some</font>

558
00:25:32,889 --> 00:25:37,539
<font color="#CCCCCC">more</font><font color="#E5E5E5"> inspiration</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> may consider</font>

559
00:25:35,080 --> 00:25:41,259
developer<font color="#E5E5E5"> a different parts of the</font>

560
00:25:37,539 --> 00:25:43,989
classical theory<font color="#E5E5E5"> and there are many open</font>

561
00:25:41,259 --> 00:25:45,970
problems left for example<font color="#CCCCCC"> we may</font>

562
00:25:43,989 --> 00:25:47,710
optimize the analysis a little bit to

563
00:25:45,970 --> 00:25:50,139
get<font color="#CCCCCC"> the</font><font color="#E5E5E5"> better parameters get better</font>

564
00:25:47,710 --> 00:25:52,149
constructions and or maybe we<font color="#E5E5E5"> don't</font>

565
00:25:50,139 --> 00:25:54,219
<font color="#E5E5E5">really need</font><font color="#CCCCCC"> to save all the properties</font>

566
00:25:52,149 --> 00:25:56,580
of the<font color="#CCCCCC"> run Oracle that</font><font color="#E5E5E5"> we also leads to</font>

567
00:25:54,220 --> 00:25:58,610
simpler construction<font color="#CCCCCC"> and many more</font>

568
00:25:56,580 --> 00:26:04,110
<font color="#CCCCCC">Thanks</font>

569
00:25:58,610 --> 00:26:04,110
[Applause]

