1
00:00:05,800 --> 00:00:10,029
<font color="#E5E5E5">hello thanks for the nice introduction</font>

2
00:00:10,820 --> 00:00:14,719
different talk it's about primitive

3
00:00:12,650 --> 00:00:17,810
<font color="#CCCCCC">designs or there are no</font><font color="#E5E5E5"> proofs in there</font>

4
00:00:14,719 --> 00:00:21,700
to loosen<font color="#CCCCCC"> this thing up the top this</font>

5
00:00:17,810 --> 00:00:25,640
talk<font color="#E5E5E5"> is about streamside record Rasta</font>

6
00:00:21,700 --> 00:00:29,689
<font color="#E5E5E5">which has a low</font><font color="#CCCCCC"> ant F and few ants per</font>

7
00:00:25,640 --> 00:00:32,360
<font color="#E5E5E5">bit at the same time so first of all a</font>

8
00:00:29,689 --> 00:00:36,800
bit<font color="#E5E5E5"> of motivation</font><font color="#CCCCCC"> why do we want to</font>

9
00:00:32,360 --> 00:00:38,839
design<font color="#E5E5E5"> such a specific construction</font><font color="#CCCCCC"> over</font>

10
00:00:36,800 --> 00:00:41,809
<font color="#CCCCCC">the past years we</font><font color="#E5E5E5"> have seen several</font>

11
00:00:38,839 --> 00:00:44,809
applications in<font color="#CCCCCC"> full amorphic encryption</font>

12
00:00:41,809 --> 00:00:47,230
multi-party computation and even<font color="#E5E5E5"> both</font>

13
00:00:44,809 --> 00:00:52,339
quantum<font color="#CCCCCC"> secure signature schemes that</font>

14
00:00:47,230 --> 00:00:54,648
<font color="#E5E5E5">can profit from dedicated symmetric</font>

15
00:00:52,340 --> 00:00:58,210
primitives which minimize the number<font color="#E5E5E5"> of</font>

16
00:00:54,649 --> 00:01:03,019
multiplications<font color="#CCCCCC"> in one way or another</font>

17
00:00:58,210 --> 00:01:05,869
<font color="#CCCCCC">clearly this has</font><font color="#E5E5E5"> then been addressed by</font>

18
00:01:03,019 --> 00:01:10,700
designers who design<font color="#E5E5E5"> new primitives</font><font color="#CCCCCC"> for</font>

19
00:01:05,869 --> 00:01:13,509
instance<font color="#CCCCCC"> flip</font><font color="#E5E5E5"> Trivium low MCM MC where</font>

20
00:01:10,700 --> 00:01:17,930
the first three<font color="#CCCCCC"> of those primitives here</font>

21
00:01:13,509 --> 00:01:23,030
<font color="#CCCCCC">just focus on multiplications in GF 2</font>

22
00:01:17,930 --> 00:01:26,390
which<font color="#E5E5E5"> simply and gates from a research</font>

23
00:01:23,030 --> 00:01:29,290
perspective<font color="#CCCCCC"> having a new optimization</font>

24
00:01:26,390 --> 00:01:32,689
goal is quite interesting because<font color="#E5E5E5"> this</font>

25
00:01:29,290 --> 00:01:35,479
allows or enables new<font color="#E5E5E5"> design strategies</font>

26
00:01:32,689 --> 00:01:38,720
for symmetric primitives and also

27
00:01:35,479 --> 00:01:40,970
requires new crypt analysis techniques

28
00:01:38,720 --> 00:01:46,310
to get insight<font color="#E5E5E5"> into the security of the</font>

29
00:01:40,970 --> 00:01:49,549
resulting constructions so if we just

30
00:01:46,310 --> 00:01:55,390
consider the<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> ends for one</font>

31
00:01:49,549 --> 00:01:59,030
<font color="#CCCCCC">moment and one can minimize several</font>

32
00:01:55,390 --> 00:02:02,450
<font color="#E5E5E5">momís within his ciphers</font><font color="#CCCCCC"> for instance</font><font color="#E5E5E5"> a</font>

33
00:01:59,030 --> 00:02:04,759
designer can try to minimize the total

34
00:02:02,450 --> 00:02:08,030
number of ants used where a primitive

35
00:02:04,759 --> 00:02:10,090
call what's also possible is<font color="#E5E5E5"> to minimize</font>

36
00:02:08,030 --> 00:02:12,829
the number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> ends bankrupted bit and</font>

37
00:02:10,090 --> 00:02:15,560
also the<font color="#CCCCCC"> NDF</font><font color="#E5E5E5"> which is the number of</font>

38
00:02:12,829 --> 00:02:18,799
cascaded<font color="#E5E5E5"> end gates the key has go</font>

39
00:02:15,560 --> 00:02:23,840
through and if we look at<font color="#E5E5E5"> existing</font>

40
00:02:18,799 --> 00:02:27,190
designs<font color="#E5E5E5"> and print on the</font><font color="#CCCCCC"> x-axis the</font>

41
00:02:23,840 --> 00:02:30,520
number of<font color="#E5E5E5"> ants per bit required and</font>

42
00:02:27,190 --> 00:02:34,180
y-axis the ant<font color="#E5E5E5"> death we see that</font>

43
00:02:30,520 --> 00:02:38,690
<font color="#E5E5E5">existing</font><font color="#CCCCCC"> designs either have a writer hi</font>

44
00:02:34,180 --> 00:02:43,100
<font color="#E5E5E5">and deaf and few ants per bits or they</font>

45
00:02:38,690 --> 00:02:46,520
have a high<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> n spirits</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> low</font>

46
00:02:43,100 --> 00:02:49,510
<font color="#E5E5E5">end death</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and we were asking</font><font color="#CCCCCC"> also</font>

47
00:02:46,520 --> 00:02:52,310
after questions<font color="#E5E5E5"> why is this the case</font><font color="#CCCCCC"> and</font>

48
00:02:49,510 --> 00:02:56,380
can<font color="#E5E5E5"> we design a primitive which</font>

49
00:02:52,310 --> 00:02:59,120
<font color="#E5E5E5">minimizes both at the same time and</font>

50
00:02:56,380 --> 00:03:02,200
hopefully we<font color="#CCCCCC"> can could given positive</font>

51
00:02:59,120 --> 00:03:06,709
answer with Rasta which as<font color="#E5E5E5"> you can see</font>

52
00:03:02,200 --> 00:03:12,079
minimizes and<font color="#CCCCCC"> DEF</font><font color="#E5E5E5"> and the number of ends</font>

53
00:03:06,709 --> 00:03:13,610
the bits at<font color="#E5E5E5"> the same time so clearly</font>

54
00:03:12,080 --> 00:03:16,130
during the design we faced<font color="#E5E5E5"> some</font>

55
00:03:13,610 --> 00:03:20,030
<font color="#CCCCCC">challenges</font><font color="#E5E5E5"> and the first challenge</font><font color="#CCCCCC"> we</font>

56
00:03:16,130 --> 00:03:22,850
had is<font color="#E5E5E5"> how to design</font><font color="#CCCCCC"> such a thing</font><font color="#E5E5E5"> how to</font>

57
00:03:20,030 --> 00:03:24,670
<font color="#E5E5E5">design a cipher which minimizes and DEF</font>

58
00:03:22,850 --> 00:03:27,980
and end stab it at the same<font color="#E5E5E5"> time because</font>

59
00:03:24,670 --> 00:03:31,309
<font color="#E5E5E5">to the best of our</font><font color="#CCCCCC"> knowledge such a</font>

60
00:03:27,980 --> 00:03:34,850
construction<font color="#E5E5E5"> has</font><font color="#CCCCCC"> not existed before so</font>

61
00:03:31,310 --> 00:03:37,010
it's likely<font color="#E5E5E5"> that we might deviate from</font>

62
00:03:34,850 --> 00:03:39,650
the classical design strategies and

63
00:03:37,010 --> 00:03:46,579
<font color="#E5E5E5">especially in this case the low end have</font>

64
00:03:39,650 --> 00:03:47,810
seen challenging to us<font color="#E5E5E5"> and then if we</font>

65
00:03:46,580 --> 00:03:50,390
<font color="#E5E5E5">came up with</font><font color="#CCCCCC"> the construction with</font><font color="#E5E5E5"> the</font>

66
00:03:47,810 --> 00:03:52,579
design then we<font color="#CCCCCC"> face the problem how to</font>

67
00:03:50,390 --> 00:03:57,018
analyze the outcome and<font color="#CCCCCC"> how to argue</font>

68
00:03:52,579 --> 00:03:58,459
<font color="#CCCCCC">about its security but first of all</font><font color="#E5E5E5"> in</font>

69
00:03:57,019 --> 00:04:02,420
classical designs<font color="#CCCCCC"> where</font><font color="#E5E5E5"> do we have a</font>

70
00:03:58,459 --> 00:04:04,400
<font color="#E5E5E5">high end tough at all</font><font color="#CCCCCC"> so let us consider</font>

71
00:04:02,420 --> 00:04:07,160
<font color="#E5E5E5">some symmetric cryptographic primitives</font>

72
00:04:04,400 --> 00:04:09,440
for instance<font color="#E5E5E5"> at block cipher which takes</font>

73
00:04:07,160 --> 00:04:14,209
<font color="#CCCCCC">some input and processes the input under</font>

74
00:04:09,440 --> 00:04:17,269
<font color="#CCCCCC">a secret key and produces output</font><font color="#E5E5E5"> for</font>

75
00:04:14,209 --> 00:04:19,790
classical application such a block

76
00:04:17,269 --> 00:04:26,169
<font color="#CCCCCC">cipher or symmetric primitives</font><font color="#E5E5E5"> looks</font>

77
00:04:19,790 --> 00:04:31,729
like this it's a static set of functions

78
00:04:26,169 --> 00:04:33,710
<font color="#CCCCCC">where only the inputs change</font><font color="#E5E5E5"> such a</font>

79
00:04:31,729 --> 00:04:35,510
construction<font color="#E5E5E5"> has</font><font color="#CCCCCC"> benefited</font>

80
00:04:33,710 --> 00:04:39,530
that it can be efficiently implemented

81
00:04:35,510 --> 00:04:42,560
in heart and<font color="#E5E5E5"> his software but also</font><font color="#CCCCCC"> to do</font>

82
00:04:39,530 --> 00:04:46,219
this<font color="#E5E5E5"> fact that this is a static system</font>

83
00:04:42,560 --> 00:04:46,610
<font color="#CCCCCC">of equations</font><font color="#E5E5E5"> we rather need high-end</font>

84
00:04:46,220 --> 00:04:50,540
<font color="#E5E5E5">toughs</font>

85
00:04:46,610 --> 00:04:51,910
<font color="#E5E5E5">and a high degree because otherwise</font>

86
00:04:50,540 --> 00:04:57,080
[Music]

87
00:04:51,910 --> 00:04:59,360
having<font color="#E5E5E5"> low degree would mean that we do</font>

88
00:04:57,080 --> 00:05:01,010
not<font color="#CCCCCC"> have</font><font color="#E5E5E5"> protection against certain</font>

89
00:04:59,360 --> 00:05:02,480
classes<font color="#E5E5E5"> of attacks like higher order</font>

90
00:05:01,010 --> 00:05:07,159
differential attacks<font color="#CCCCCC"> in queue</font><font color="#E5E5E5"> block</font>

91
00:05:02,480 --> 00:05:09,230
attacks for<font color="#CCCCCC"> instance let us consider an</font>

92
00:05:07,160 --> 00:05:12,740
attacker who has control<font color="#CCCCCC"> over</font><font color="#E5E5E5"> the input</font>

93
00:05:09,230 --> 00:05:16,040
and we have some symmetric primitives

94
00:05:12,740 --> 00:05:18,830
<font color="#E5E5E5">which has a low degree output function</font>

95
00:05:16,040 --> 00:05:26,060
then an attacker<font color="#E5E5E5"> could do the following</font>

96
00:05:18,830 --> 00:05:30,370
he could just set some input bits the

97
00:05:26,060 --> 00:05:34,220
constant value<font color="#E5E5E5"> while iterating over the</font>

98
00:05:30,370 --> 00:05:36,470
all<font color="#E5E5E5"> possible values of some bits and</font>

99
00:05:34,220 --> 00:05:39,260
<font color="#E5E5E5">then as you can see here if he sums up</font>

100
00:05:36,470 --> 00:05:45,050
the output<font color="#CCCCCC"> bit he gets a linear equation</font>

101
00:05:39,260 --> 00:05:49,750
to keep<font color="#E5E5E5"> it which is quite bad</font><font color="#CCCCCC"> so how</font><font color="#E5E5E5"> did</font>

102
00:05:45,050 --> 00:05:52,760
<font color="#E5E5E5">we overcome this fact our idea was that</font>

103
00:05:49,750 --> 00:05:55,400
<font color="#E5E5E5">the</font><font color="#CCCCCC"> problem lies</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> fact that low</font>

104
00:05:52,760 --> 00:05:58,460
degree function<font color="#E5E5E5"> is evaluated</font><font color="#CCCCCC"> several</font>

105
00:05:55,400 --> 00:06:03,710
times but what if if it's just<font color="#CCCCCC"> evaluated</font>

106
00:05:58,460 --> 00:06:09,049
for<font color="#CCCCCC"> one time</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we end up</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> hasta as</font>

107
00:06:03,710 --> 00:06:12,680
you can see here and the<font color="#E5E5E5"> idea is to take</font>

108
00:06:09,050 --> 00:06:15,140
or define a family of different low

109
00:06:12,680 --> 00:06:18,880
degree permutations which are<font color="#E5E5E5"> just</font>

110
00:06:15,140 --> 00:06:22,940
<font color="#CCCCCC">average once by the key</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> feed-forward</font>

111
00:06:18,880 --> 00:06:25,400
<font color="#E5E5E5">and to produce in this way the key</font>

112
00:06:22,940 --> 00:06:27,430
stream<font color="#E5E5E5"> which is used to encrypt the</font>

113
00:06:25,400 --> 00:06:30,020
plaintext

114
00:06:27,430 --> 00:06:32,090
the choice of the permutation<font color="#CCCCCC"> he passed</font>

115
00:06:30,020 --> 00:06:34,159
solely relies on public parameters which

116
00:06:32,090 --> 00:06:37,369
is<font color="#E5E5E5"> the public knowledge</font><font color="#CCCCCC"> which has to</font><font color="#E5E5E5"> be</font>

117
00:06:34,160 --> 00:06:39,530
sent together<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> ciphertext and</font>

118
00:06:37,370 --> 00:06:42,070
<font color="#E5E5E5">also block counter for the different</font>

119
00:06:39,530 --> 00:06:42,070
time of<font color="#E5E5E5"> blocks</font>

120
00:06:42,420 --> 00:06:48,660
so clearly<font color="#CCCCCC"> one way to do this would be</font>

121
00:06:46,440 --> 00:06:50,940
to<font color="#E5E5E5"> create and design many different</font>

122
00:06:48,660 --> 00:06:54,450
<font color="#CCCCCC">computations billions of permutations</font>

123
00:06:50,940 --> 00:06:56,100
but<font color="#E5E5E5"> this is a</font><font color="#CCCCCC"> time-consuming</font><font color="#E5E5E5"> task so how</font>

124
00:06:54,450 --> 00:06:57,690
<font color="#E5E5E5">did we design the permutation of the</font>

125
00:06:56,100 --> 00:07:01,350
<font color="#CCCCCC">ciphers so that the equation system</font>

126
00:06:57,690 --> 00:07:03,719
changes every<font color="#E5E5E5"> time and actually what we</font>

127
00:07:01,350 --> 00:07:05,430
are<font color="#E5E5E5"> doing is we rely</font><font color="#CCCCCC"> on the classical</font>

128
00:07:03,720 --> 00:07:08,450
layered structure we see<font color="#E5E5E5"> in symmetric</font>

129
00:07:05,430 --> 00:07:13,260
primitives which consists of the

130
00:07:08,450 --> 00:07:16,440
<font color="#E5E5E5">alternating applications of linear fine</font>

131
00:07:13,260 --> 00:07:20,270
layers and nonlinear layers but in

132
00:07:16,440 --> 00:07:24,390
contrast<font color="#E5E5E5"> to classical designs of</font><font color="#CCCCCC"> rasta</font>

133
00:07:20,270 --> 00:07:27,390
the fine layers are<font color="#CCCCCC"> nonce dependent so</font>

134
00:07:24,390 --> 00:07:30,390
will it change for every<font color="#E5E5E5"> different block</font>

135
00:07:27,390 --> 00:07:33,000
and every<font color="#E5E5E5"> different</font><font color="#CCCCCC"> mods to</font><font color="#E5E5E5"> be</font>

136
00:07:30,390 --> 00:07:35,550
particular<font color="#CCCCCC"> but we do in Rasta we seat an</font>

137
00:07:33,000 --> 00:07:39,389
extendable<font color="#E5E5E5"> output function with the</font>

138
00:07:35,550 --> 00:07:42,139
public<font color="#E5E5E5"> non-static block counter and out</font>

139
00:07:39,389 --> 00:07:45,240
of this stream which comes<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

140
00:07:42,139 --> 00:07:47,580
extendable<font color="#E5E5E5"> output function</font><font color="#CCCCCC"> we create</font>

141
00:07:45,240 --> 00:07:50,520
invertible matrices and<font color="#CCCCCC"> prom constants</font>

142
00:07:47,580 --> 00:07:52,789
<font color="#CCCCCC">together as fine layers in can't address</font>

143
00:07:50,520 --> 00:07:56,310
<font color="#E5E5E5">- they're always changing finally as the</font>

144
00:07:52,790 --> 00:08:00,090
<font color="#CCCCCC">modeling</font><font color="#E5E5E5"> of functions</font><font color="#CCCCCC"> aesthetic those</font>

145
00:07:56,310 --> 00:08:03,450
are simply<font color="#CCCCCC"> the cuy function over the</font>

146
00:08:00,090 --> 00:08:07,590
whole block with<font color="#CCCCCC"> okay and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> also</font>

147
00:08:03,450 --> 00:08:13,140
the reason by<font color="#CCCCCC"> rasta</font><font color="#E5E5E5"> is only</font><font color="#CCCCCC"> defined for</font>

148
00:08:07,590 --> 00:08:14,880
an odd number of block sizes<font color="#CCCCCC"> because on</font>

149
00:08:13,140 --> 00:08:20,580
the<font color="#E5E5E5"> front odd number</font><font color="#CCCCCC"> disk</font><font color="#E5E5E5"> a layer here</font>

150
00:08:14,880 --> 00:08:24,060
<font color="#CCCCCC">is invertible so the</font><font color="#E5E5E5"> high level</font><font color="#CCCCCC"> idea to</font>

151
00:08:20,580 --> 00:08:27,840
make relevant computations of<font color="#CCCCCC"> decipher</font>

152
00:08:24,060 --> 00:08:31,820
independent of the key was first used in

153
00:08:27,840 --> 00:08:34,709
flip but here<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> used to permute</font>

154
00:08:31,820 --> 00:08:37,950
<font color="#E5E5E5">input key to a static set of function</font>

155
00:08:34,710 --> 00:08:41,099
and we<font color="#CCCCCC"> have taking this approach further</font>

156
00:08:37,950 --> 00:08:45,540
in making more parts of the<font color="#CCCCCC"> cipher</font>

157
00:08:41,099 --> 00:08:47,730
essentially changing<font color="#E5E5E5"> and what's also</font>

158
00:08:45,540 --> 00:08:50,640
important is since the extensible output

159
00:08:47,730 --> 00:08:52,590
function do not use any key material it

160
00:08:50,640 --> 00:09:00,270
doesn't<font color="#CCCCCC"> influence</font><font color="#E5E5E5"> the relevant</font>

161
00:08:52,590 --> 00:09:03,600
and metric so okay<font color="#E5E5E5"> so what's the</font><font color="#CCCCCC"> idea</font>

162
00:09:00,270 --> 00:09:05,279
<font color="#CCCCCC">paint is design as</font><font color="#E5E5E5"> mentioned before the</font>

163
00:09:03,600 --> 00:09:07,320
idea<font color="#CCCCCC"> is that we</font><font color="#E5E5E5"> have changing a fine</font>

164
00:09:05,279 --> 00:09:09,810
layers to get a changing system of

165
00:09:07,320 --> 00:09:11,790
equations<font color="#E5E5E5"> to provide</font><font color="#CCCCCC"> protection against</font>

166
00:09:09,810 --> 00:09:13,589
differential and<font color="#E5E5E5"> possible differential</font>

167
00:09:11,790 --> 00:09:16,650
attack<font color="#E5E5E5"> cube and high order differential</font>

168
00:09:13,589 --> 00:09:20,490
<font color="#CCCCCC">accent</font><font color="#E5E5E5"> of interval text however some</font>

169
00:09:16,650 --> 00:09:25,529
<font color="#E5E5E5">attack vectors remain especially attacks</font>

170
00:09:20,490 --> 00:09:28,589
which exploit potential good existing

171
00:09:25,529 --> 00:09:30,630
linear approximations or even attacks

172
00:09:28,589 --> 00:09:34,110
targeting directly the polymer system of

173
00:09:30,630 --> 00:09:37,170
equations we get and for this reason we

174
00:09:34,110 --> 00:09:40,110
<font color="#CCCCCC">also</font><font color="#E5E5E5"> might to use a block size</font><font color="#CCCCCC"> and the</font>

175
00:09:37,170 --> 00:09:45,329
key size for<font color="#CCCCCC"> rasta which is bigger than</font>

176
00:09:40,110 --> 00:09:47,790
<font color="#CCCCCC">the</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> level so but with what we</font>

177
00:09:45,330 --> 00:09:50,220
end up<font color="#E5E5E5"> now is a kind of</font><font color="#CCCCCC"> perimeter</font>

178
00:09:47,790 --> 00:09:52,709
<font color="#E5E5E5">cerebral problem regarding the block</font>

179
00:09:50,220 --> 00:09:55,260
size<font color="#CCCCCC"> sent in a more from</font><font color="#E5E5E5"> the question we</font>

180
00:09:52,710 --> 00:09:58,230
face is now how<font color="#E5E5E5"> to choose the block size</font>

181
00:09:55,260 --> 00:10:00,900
and<font color="#CCCCCC"> the number of rounds</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> actually we</font>

182
00:09:58,230 --> 00:10:06,060
have two answers<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> the</font>

183
00:10:00,900 --> 00:10:09,569
first<font color="#CCCCCC"> one is a parameter set which we</font>

184
00:10:06,060 --> 00:10:13,319
call<font color="#E5E5E5"> Rasta as</font><font color="#CCCCCC"> the design strategy which</font>

185
00:10:09,570 --> 00:10:15,720
is based on<font color="#E5E5E5"> bounds</font><font color="#CCCCCC"> and arguments and</font>

186
00:10:13,320 --> 00:10:17,520
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is our conservative approaches we</font>

187
00:10:15,720 --> 00:10:21,470
see later why we call it conservative

188
00:10:17,520 --> 00:10:24,720
approach and the second approach is<font color="#CCCCCC"> a</font>

189
00:10:21,470 --> 00:10:29,580
<font color="#CCCCCC">Cresta which is our aggressive parameter</font>

190
00:10:24,720 --> 00:10:31,200
set which is solely<font color="#E5E5E5"> you which is the</font>

191
00:10:29,580 --> 00:10:34,080
aggressive parameter set for the<font color="#CCCCCC"> raster</font>

192
00:10:31,200 --> 00:10:36,750
science strategy where we<font color="#E5E5E5"> only</font><font color="#CCCCCC"> pass our</font>

193
00:10:34,080 --> 00:10:42,320
parameters on the best known attacks<font color="#E5E5E5"> and</font>

194
00:10:36,750 --> 00:10:42,320
<font color="#CCCCCC">its kind of challenge to cryptanalysis</font>

195
00:10:42,680 --> 00:10:51,930
so how do we<font color="#E5E5E5"> get to</font><font color="#CCCCCC"> the parameters for</font>

196
00:10:46,380 --> 00:10:54,990
Rasta<font color="#CCCCCC"> first of all we do not</font><font color="#E5E5E5"> want to</font>

197
00:10:51,930 --> 00:10:56,790
have in Rasta good linear approximation

198
00:10:54,990 --> 00:10:59,730
so we have to<font color="#CCCCCC"> point the probability the</font>

199
00:10:56,790 --> 00:11:03,719
good approximations exist and we can do

200
00:10:59,730 --> 00:11:04,740
this in the following way we can as<font color="#E5E5E5"> kind</font>

201
00:11:03,720 --> 00:11:07,439
of

202
00:11:04,740 --> 00:11:11,579
<font color="#E5E5E5">partition last night to these sandwiches</font>

203
00:11:07,439 --> 00:11:16,248
of matrixes<font color="#E5E5E5"> and</font><font color="#CCCCCC"> nonlinear</font><font color="#E5E5E5"> Leia</font><font color="#CCCCCC"> and then</font>

204
00:11:11,579 --> 00:11:20,339
we know<font color="#CCCCCC"> that good linear characteristic</font>

205
00:11:16,249 --> 00:11:23,420
has few active bits on the<font color="#CCCCCC"> input</font><font color="#E5E5E5"> and the</font>

206
00:11:20,339 --> 00:11:26,279
output of the matrix<font color="#E5E5E5"> and the probability</font>

207
00:11:23,420 --> 00:11:29,128
<font color="#CCCCCC">that such a good linear characteristic</font>

208
00:11:26,279 --> 00:11:31,860
woven<font color="#CCCCCC"> around</font><font color="#E5E5E5"> exists solely depends on</font>

209
00:11:29,129 --> 00:11:37,290
the matrix<font color="#CCCCCC"> and it gets more improbable</font>

210
00:11:31,860 --> 00:11:43,410
<font color="#CCCCCC">they're largely matrix cat and so we can</font>

211
00:11:37,290 --> 00:11:46,679
do this for every<font color="#E5E5E5"> two round sandwich for</font>

212
00:11:43,410 --> 00:11:51,990
<font color="#E5E5E5">the sake of simplicity we just assumed</font>

213
00:11:46,679 --> 00:11:53,790
<font color="#E5E5E5">that the middle matrix</font><font color="#CCCCCC"> liked the linear</font>

214
00:11:51,990 --> 00:11:56,579
characteristics you get here<font color="#CCCCCC"> and here</font><font color="#E5E5E5"> or</font>

215
00:11:53,790 --> 00:12:02,360
the<font color="#CCCCCC"> past linear characteristics so if I</font>

216
00:11:56,579 --> 00:12:06,239
put this into a figure<font color="#CCCCCC"> you can see that</font>

217
00:12:02,360 --> 00:12:09,259
<font color="#CCCCCC">with increasing proc size</font><font color="#E5E5E5"> staying at a</font>

218
00:12:06,240 --> 00:12:12,769
certain<font color="#CCCCCC"> amount the existence of</font>

219
00:12:09,259 --> 00:12:15,749
exploitable linear approximations gets

220
00:12:12,769 --> 00:12:23,100
<font color="#E5E5E5">more more improbable</font><font color="#CCCCCC"> so you can do two</font>

221
00:12:15,749 --> 00:12:25,230
<font color="#CCCCCC">things to protect</font><font color="#E5E5E5"> the SyFy against the</font>

222
00:12:23,100 --> 00:12:28,079
existence of<font color="#CCCCCC"> coupling approximations</font><font color="#E5E5E5"> is</font>

223
00:12:25,230 --> 00:12:30,269
to either increase<font color="#CCCCCC"> the block size with a</font>

224
00:12:28,079 --> 00:12:37,229
fixed number of rounds or to increase

225
00:12:30,269 --> 00:12:39,120
the number of<font color="#E5E5E5"> rounds</font><font color="#CCCCCC"> so another attack</font>

226
00:12:37,230 --> 00:12:43,139
vector is an attack which targets

227
00:12:39,120 --> 00:12:48,089
directly the polynomial equation systems

228
00:12:43,139 --> 00:12:52,679
you get so this is<font color="#E5E5E5"> not a problem only</font>

229
00:12:48,089 --> 00:12:55,790
<font color="#CCCCCC">rasta has so in principle it's it's a</font>

230
00:12:52,679 --> 00:12:59,299
channeler problem first<font color="#E5E5E5"> for each cipher</font>

231
00:12:55,790 --> 00:13:03,179
how to<font color="#E5E5E5"> argue against such attacks which</font>

232
00:12:59,299 --> 00:13:05,790
directly target<font color="#CCCCCC"> a polynomial system of</font>

233
00:13:03,179 --> 00:13:08,040
equations<font color="#E5E5E5"> and why this cannot be soft in</font>

234
00:13:05,790 --> 00:13:10,259
<font color="#CCCCCC">rasta we have the speciality</font><font color="#E5E5E5"> that we</font>

235
00:13:08,040 --> 00:13:13,429
kind of hardly<font color="#CCCCCC"> limited</font><font color="#E5E5E5"> degree because we</font>

236
00:13:10,259 --> 00:13:16,019
want<font color="#E5E5E5"> to get the low and tough which</font><font color="#CCCCCC"> also</font>

237
00:13:13,429 --> 00:13:16,860
limits<font color="#CCCCCC"> the possible number of difference</font>

238
00:13:16,019 --> 00:13:19,140
monomial

239
00:13:16,860 --> 00:13:23,310
we have a<font color="#CCCCCC"> polynomial equation</font><font color="#E5E5E5"> system and</font>

240
00:13:19,140 --> 00:13:25,920
if this number<font color="#E5E5E5"> gets too low</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> might</font>

241
00:13:23,310 --> 00:13:27,989
allow<font color="#CCCCCC"> driven linearization</font><font color="#E5E5E5"> where you</font>

242
00:13:25,920 --> 00:13:31,079
just replaced the<font color="#E5E5E5"> monomers with new</font>

243
00:13:27,990 --> 00:13:34,290
secrets<font color="#E5E5E5"> and then solve the</font><font color="#CCCCCC"> resulting</font>

244
00:13:31,080 --> 00:13:37,230
linear system of<font color="#CCCCCC"> equations and</font><font color="#E5E5E5"> for these</font>

245
00:13:34,290 --> 00:13:40,260
<font color="#CCCCCC">reasons</font><font color="#E5E5E5"> we might want to increase the</font>

246
00:13:37,230 --> 00:13:43,080
number<font color="#CCCCCC"> of Secrets and also block size to</font>

247
00:13:40,260 --> 00:13:45,120
<font color="#E5E5E5">get more monomers</font><font color="#CCCCCC"> also if we put this</font>

248
00:13:43,080 --> 00:13:48,810
into<font color="#CCCCCC"> figure we see that the number of</font>

249
00:13:45,120 --> 00:13:54,480
monomers<font color="#CCCCCC"> for a certain fixed number of</font>

250
00:13:48,810 --> 00:13:56,729
rounds<font color="#E5E5E5"> increases with an increasing key</font>

251
00:13:54,480 --> 00:13:59,460
<font color="#E5E5E5">in the block size and what's also shown</font>

252
00:13:56,730 --> 00:14:01,740
<font color="#E5E5E5">here is how the number of monomers</font>

253
00:13:59,460 --> 00:14:06,930
behave if<font color="#E5E5E5"> we guess a certain amount of</font>

254
00:14:01,740 --> 00:14:10,710
<font color="#E5E5E5">key bits at the inputs and for</font><font color="#CCCCCC"> asta</font><font color="#E5E5E5"> we</font>

255
00:14:06,930 --> 00:14:13,800
have decided that we want to<font color="#E5E5E5"> have that</font>

256
00:14:10,710 --> 00:14:16,580
the number of monomers<font color="#E5E5E5"> matches to</font><font color="#CCCCCC"> the</font>

257
00:14:13,800 --> 00:14:19,740
power of<font color="#E5E5E5"> the security</font><font color="#CCCCCC"> lever</font><font color="#E5E5E5"> and i</font>

258
00:14:16,580 --> 00:14:21,930
guessing<font color="#E5E5E5"> together to keep it and to</font>

259
00:14:19,740 --> 00:14:26,010
protect further against such attacks<font color="#E5E5E5"> we</font>

260
00:14:21,930 --> 00:14:27,770
also apply a<font color="#E5E5E5"> limit on the data</font>

261
00:14:26,010 --> 00:14:32,850
<font color="#CCCCCC">complexity which limits you</font><font color="#E5E5E5"> in</font>

262
00:14:27,770 --> 00:14:38,189
collecting enough equations<font color="#E5E5E5"> to solve the</font>

263
00:14:32,850 --> 00:14:42,030
system so we end up<font color="#CCCCCC"> with this number</font><font color="#E5E5E5"> for</font>

264
00:14:38,190 --> 00:14:46,740
the instances of<font color="#CCCCCC"> rasta in this</font><font color="#E5E5E5"> triangle</font>

265
00:14:42,030 --> 00:14:48,959
here those numbers come from<font color="#E5E5E5"> the linear</font>

266
00:14:46,740 --> 00:14:53,450
approximation<font color="#E5E5E5"> so from the bounds we get</font>

267
00:14:48,960 --> 00:14:58,050
on the linear<font color="#CCCCCC"> approximations and</font><font color="#E5E5E5"> this</font>

268
00:14:53,450 --> 00:15:02,250
triangle here comes from the<font color="#E5E5E5"> fact that</font>

269
00:14:58,050 --> 00:15:07,260
we do not<font color="#E5E5E5"> want to have a low number</font><font color="#CCCCCC"> of</font>

270
00:15:02,250 --> 00:15:09,540
<font color="#E5E5E5">maximum possible monomials and we do not</font>

271
00:15:07,260 --> 00:15:11,490
define<font color="#CCCCCC"> rasta for</font><font color="#E5E5E5"> two and</font><font color="#CCCCCC"> three rounds</font>

272
00:15:09,540 --> 00:15:13,920
since our analysis relies on good

273
00:15:11,490 --> 00:15:15,450
diffusion properties which are<font color="#E5E5E5"> not</font>

274
00:15:13,920 --> 00:15:21,479
guaranteed<font color="#CCCCCC"> for such a low number of</font>

275
00:15:15,450 --> 00:15:23,580
rounds<font color="#CCCCCC"> and now we come to crypt analysis</font>

276
00:15:21,480 --> 00:15:26,060
or how we get to<font color="#CCCCCC"> the parameter set for a</font>

277
00:15:23,580 --> 00:15:26,060
<font color="#E5E5E5">Cresta</font>

278
00:15:27,589 --> 00:15:32,610
besides computing such<font color="#CCCCCC"> pounds we also</font>

279
00:15:30,089 --> 00:15:35,970
tried to<font color="#E5E5E5"> break the cipher so for</font>

280
00:15:32,610 --> 00:15:38,160
instance we tried to use<font color="#CCCCCC"> Sat server and</font>

281
00:15:35,970 --> 00:15:40,560
the result<font color="#E5E5E5"> was that exhaustive search</font>

282
00:15:38,160 --> 00:15:43,259
performs better for more<font color="#E5E5E5"> amount of</font><font color="#CCCCCC"> rasta</font>

283
00:15:40,560 --> 00:15:45,689
<font color="#E5E5E5">who acid at various experiments with</font><font color="#CCCCCC"> dye</font>

284
00:15:43,259 --> 00:15:48,480
<font color="#E5E5E5">versions for instance counting the</font>

285
00:15:45,690 --> 00:15:51,149
number<font color="#CCCCCC"> of possible monomials you get at</font>

286
00:15:48,480 --> 00:15:53,910
the output and we do not have any

287
00:15:51,149 --> 00:15:56,190
<font color="#E5E5E5">abusive outliers here and who also tried</font>

288
00:15:53,910 --> 00:16:00,269
<font color="#E5E5E5">various</font><font color="#CCCCCC"> educated attacks for instance on</font>

289
00:15:56,190 --> 00:16:04,889
SAS<font color="#E5E5E5"> of various versions of SAS we're</font>

290
00:16:00,269 --> 00:16:07,740
just have<font color="#E5E5E5"> nonlinearly and finally and</font>

291
00:16:04,889 --> 00:16:09,389
only<font color="#CCCCCC"> in</font><font color="#E5E5E5"> area and also variants of two</font>

292
00:16:07,740 --> 00:16:13,079
rounds<font color="#CCCCCC"> and</font><font color="#E5E5E5"> three rounds of</font><font color="#CCCCCC"> Rustaveli</font>

293
00:16:09,389 --> 00:16:18,089
security lever is approximately the

294
00:16:13,079 --> 00:16:20,670
block size<font color="#CCCCCC"> and how does</font><font color="#E5E5E5"> such a tack on</font>

295
00:16:18,089 --> 00:16:22,380
<font color="#E5E5E5">three round trust</font><font color="#CCCCCC"> aware the</font><font color="#E5E5E5"> proc size is</font>

296
00:16:20,670 --> 00:16:26,069
approximately<font color="#CCCCCC"> a security level looks</font>

297
00:16:22,380 --> 00:16:28,050
like I<font color="#CCCCCC"> was shown</font><font color="#E5E5E5"> next in principle what</font>

298
00:16:26,069 --> 00:16:31,290
we do here is an guess into German

299
00:16:28,050 --> 00:16:34,410
attack<font color="#E5E5E5"> but in contrast</font><font color="#CCCCCC"> to normal</font><font color="#E5E5E5"> gas and</font>

300
00:16:31,290 --> 00:16:36,810
<font color="#E5E5E5">determine attacks</font><font color="#CCCCCC"> where try</font><font color="#E5E5E5"> to get in</font>

301
00:16:34,410 --> 00:16:38,339
from both sides and I guess bits you do

302
00:16:36,810 --> 00:16:42,119
<font color="#E5E5E5">not know and verify the gas in the</font>

303
00:16:38,339 --> 00:16:44,610
middle<font color="#CCCCCC"> we just come from the front</font><font color="#E5E5E5"> side</font>

304
00:16:42,120 --> 00:16:47,399
<font color="#CCCCCC">since</font><font color="#E5E5E5"> we use de</font><font color="#CCCCCC"> Callier and the inverse</font>

305
00:16:44,610 --> 00:16:51,720
<font color="#CCCCCC">require</font><font color="#E5E5E5"> layer is quite hard to deal</font><font color="#CCCCCC"> with</font>

306
00:16:47,399 --> 00:16:55,709
deal<font color="#E5E5E5"> with so what we do in this attack</font>

307
00:16:51,720 --> 00:16:58,410
is we exploit the fact that unknown<font color="#E5E5E5"> is</font>

308
00:16:55,709 --> 00:17:01,920
<font color="#E5E5E5">matrix here we can express the input</font>

309
00:16:58,410 --> 00:17:05,790
bits of the first<font color="#E5E5E5"> s layer as fine</font>

310
00:17:01,920 --> 00:17:08,730
functions<font color="#CCCCCC"> in to keep it</font><font color="#E5E5E5"> and if we guess</font>

311
00:17:05,790 --> 00:17:11,069
every second<font color="#E5E5E5"> bit of the s layer this</font>

312
00:17:08,730 --> 00:17:14,459
gives us an equation<font color="#E5E5E5"> to keep it with a</font>

313
00:17:11,069 --> 00:17:19,649
<font color="#E5E5E5">solution but also this allows us to</font>

314
00:17:14,459 --> 00:17:22,020
<font color="#E5E5E5">express the output of the S layer as</font>

315
00:17:19,650 --> 00:17:25,049
<font color="#E5E5E5">linear functions or fine functions in</font>

316
00:17:22,020 --> 00:17:27,000
the key bits<font color="#E5E5E5"> and since we can express</font>

317
00:17:25,049 --> 00:17:31,490
the output bits we can<font color="#E5E5E5"> also express</font><font color="#CCCCCC"> the</font>

318
00:17:27,000 --> 00:17:35,909
input bits here for next<font color="#CCCCCC"> aasaiya and</font>

319
00:17:31,490 --> 00:17:39,000
here we cannot guess every second bit

320
00:17:35,909 --> 00:17:41,759
anymore so we have to guess less and as

321
00:17:39,000 --> 00:17:45,009
a consequence we only

322
00:17:41,759 --> 00:17:47,529
can only express<font color="#E5E5E5"> a limited</font><font color="#CCCCCC"> amount of</font>

323
00:17:45,009 --> 00:17:50,700
bits at the<font color="#CCCCCC"> output of</font><font color="#E5E5E5"> the second</font><font color="#CCCCCC"> test</font>

324
00:17:47,529 --> 00:17:56,490
layer as a fine function to keep it and

325
00:17:50,700 --> 00:17:56,490
so we actually cannot can only attack

326
00:17:56,580 --> 00:18:03,009
<font color="#E5E5E5">permutations which in this case have an</font>

327
00:17:59,440 --> 00:18:07,389
<font color="#E5E5E5">weak</font><font color="#CCCCCC"> affine they</font><font color="#E5E5E5"> are here which means we</font>

328
00:18:03,009 --> 00:18:09,909
<font color="#CCCCCC">have to search for a block which</font>

329
00:18:07,389 --> 00:18:13,559
<font color="#CCCCCC">contains such a weak a fine layer that</font>

330
00:18:09,909 --> 00:18:17,080
allows<font color="#E5E5E5"> us to map several consecutive</font>

331
00:18:13,559 --> 00:18:20,168
bits as function of just<font color="#E5E5E5"> these bits and</font>

332
00:18:17,080 --> 00:18:23,080
<font color="#CCCCCC">not</font><font color="#E5E5E5"> its above here</font><font color="#CCCCCC"> and then what we can</font>

333
00:18:20,169 --> 00:18:27,190
do next is guess every second bit of

334
00:18:23,080 --> 00:18:30,789
this range here<font color="#E5E5E5"> and then we get a linear</font>

335
00:18:27,190 --> 00:18:34,440
function of these bits and<font color="#E5E5E5"> keep it which</font>

336
00:18:30,789 --> 00:18:40,720
we can connect to the key again if we

337
00:18:34,440 --> 00:18:42,460
know the<font color="#CCCCCC"> keystream here so as I have</font>

338
00:18:40,720 --> 00:18:45,429
<font color="#CCCCCC">mentioned we consider raster to be very</font>

339
00:18:42,460 --> 00:18:48,399
conservative<font color="#CCCCCC"> the main reason is that</font>

340
00:18:45,429 --> 00:18:51,580
I've colored here<font color="#E5E5E5"> the parameter sets</font>

341
00:18:48,399 --> 00:18:56,168
that<font color="#E5E5E5"> we can actually attack for</font><font color="#CCCCCC"> hasta</font>

342
00:18:51,580 --> 00:18:59,129
and here are the chosen parameters of

343
00:18:56,169 --> 00:19:03,340
raster<font color="#E5E5E5"> and as you can</font><font color="#CCCCCC"> see in this figure</font>

344
00:18:59,129 --> 00:19:09,369
<font color="#CCCCCC">just quite some distance to the attacker</font>

345
00:19:03,340 --> 00:19:14,529
<font color="#E5E5E5">area and for this</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> we have also</font>

346
00:19:09,369 --> 00:19:18,039
defined a<font color="#E5E5E5"> Cresta which is just based on</font>

347
00:19:14,529 --> 00:19:22,499
<font color="#E5E5E5">the past attacks we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> last one round</font>

348
00:19:18,039 --> 00:19:25,619
<font color="#E5E5E5">so this is a</font><font color="#CCCCCC"> cross Tahir and this</font><font color="#E5E5E5"> should</font>

349
00:19:22,499 --> 00:19:30,369
serve as kind<font color="#E5E5E5"> of challenge for future</font>

350
00:19:25,619 --> 00:19:32,139
<font color="#CCCCCC">cryptanalysts analysis basically to see</font>

351
00:19:30,369 --> 00:19:36,999
if they can break you more rounds than

352
00:19:32,139 --> 00:19:40,209
we<font color="#E5E5E5"> can and what</font><font color="#CCCCCC"> we how do we define a</font>

353
00:19:36,999 --> 00:19:42,629
<font color="#CCCCCC">Cresta basically we just take the</font>

354
00:19:40,210 --> 00:19:46,059
minimum block size plus<font color="#CCCCCC"> one bit to get</font>

355
00:19:42,629 --> 00:19:49,299
not block size and at one<font color="#CCCCCC"> Morant as</font>

356
00:19:46,059 --> 00:19:52,629
mentioned before<font color="#E5E5E5"> so we have four and</font>

357
00:19:49,299 --> 00:19:55,000
<font color="#CCCCCC">four rounds</font><font color="#E5E5E5"> for 1828 bit and five rounds</font>

358
00:19:52,629 --> 00:19:57,939
for 256 bits

359
00:19:55,000 --> 00:20:01,090
so let's come to inclusion<font color="#CCCCCC"> what have you</font>

360
00:19:57,940 --> 00:20:03,730
seen here we have<font color="#E5E5E5"> seen</font><font color="#CCCCCC"> a new design</font>

361
00:20:01,090 --> 00:20:06,820
strategy which is called Rasta<font color="#E5E5E5"> and</font><font color="#CCCCCC"> two</font>

362
00:20:03,730 --> 00:20:08,260
<font color="#E5E5E5">parameter sets of it</font><font color="#CCCCCC"> one is conservative</font>

363
00:20:06,820 --> 00:20:10,480
and<font color="#CCCCCC"> pasting pounds and security</font>

364
00:20:08,260 --> 00:20:12,190
arguments and also one which is more

365
00:20:10,480 --> 00:20:16,419
<font color="#CCCCCC">aggressive and it's solely based on the</font>

366
00:20:12,190 --> 00:20:19,120
<font color="#E5E5E5">past attacks we can do in the paper you</font>

367
00:20:16,419 --> 00:20:22,150
can find benchmarks we did in he<font color="#CCCCCC"> lip</font>

368
00:20:19,120 --> 00:20:24,610
which shows that<font color="#CCCCCC"> even</font><font color="#E5E5E5"> the conservative</font>

369
00:20:22,150 --> 00:20:27,669
versions of<font color="#CCCCCC"> Rastus are competitive with</font>

370
00:20:24,610 --> 00:20:31,090
existing designs<font color="#E5E5E5"> and as I've shown in</font>

371
00:20:27,669 --> 00:20:34,150
<font color="#E5E5E5">the last figure there's actually a huge</font>

372
00:20:31,090 --> 00:20:36,668
gap between<font color="#E5E5E5"> the known attacks or</font><font color="#CCCCCC"> the</font>

373
00:20:34,150 --> 00:20:40,820
past<font color="#E5E5E5"> attacks that we can do and the</font>

374
00:20:36,669 --> 00:20:47,099
<font color="#CCCCCC">bounds that we get so thank you</font>

375
00:20:40,820 --> 00:20:47,099
[Applause]

