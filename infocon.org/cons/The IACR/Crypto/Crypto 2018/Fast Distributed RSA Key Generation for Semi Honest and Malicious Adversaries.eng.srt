1
00:00:05,970 --> 00:00:11,370
so yes<font color="#E5E5E5"> basically what we are showing is</font>

2
00:00:08,920 --> 00:00:13,629
<font color="#CCCCCC">how to make</font><font color="#E5E5E5"> Melissa</font><font color="#CCCCCC"> to secure and</font>

3
00:00:11,370 --> 00:00:15,190
<font color="#E5E5E5">distributed</font><font color="#CCCCCC"> Prime generation an order of</font>

4
00:00:13,630 --> 00:00:17,650
magnitude<font color="#CCCCCC"> faster than the</font><font color="#E5E5E5"> previous semi</font>

5
00:00:15,190 --> 00:00:19,390
honest and to give some<font color="#CCCCCC"> numbers we</font>

6
00:00:17,650 --> 00:00:21,430
<font color="#CCCCCC">talked 15 minutes</font><font color="#E5E5E5"> for the previous</font>

7
00:00:19,390 --> 00:00:23,829
faster semi honest<font color="#CCCCCC"> versus around for the</font>

8
00:00:21,430 --> 00:00:28,689
second for<font color="#E5E5E5"> the new maliciously secured</font>

9
00:00:23,829 --> 00:00:30,099
one<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> so what I</font><font color="#E5E5E5"> would be talking</font>

10
00:00:28,689 --> 00:00:33,730
<font color="#E5E5E5">about today</font><font color="#CCCCCC"> I will start with an</font>

11
00:00:30,099 --> 00:00:35,260
introduction<font color="#E5E5E5"> then I will sort of a</font>

12
00:00:33,730 --> 00:00:36,760
motivation<font color="#CCCCCC"> for how we get</font><font color="#E5E5E5"> Melissa to</font>

13
00:00:35,260 --> 00:00:39,370
<font color="#E5E5E5">secure very fast go through a semi</font>

14
00:00:36,760 --> 00:00:41,170
honest construction and then I will talk

15
00:00:39,370 --> 00:00:42,849
<font color="#CCCCCC">about how what we are on top to actually</font>

16
00:00:41,170 --> 00:00:44,980
<font color="#CCCCCC">get a</font><font color="#E5E5E5"> very fast maliciously</font><font color="#CCCCCC"> secure</font>

17
00:00:42,850 --> 00:00:47,649
construction<font color="#E5E5E5"> and in the end I will</font><font color="#CCCCCC"> give</font>

18
00:00:44,980 --> 00:00:49,750
a bit more<font color="#CCCCCC"> of</font><font color="#E5E5E5"> discussion regarding the</font>

19
00:00:47,649 --> 00:00:52,929
<font color="#E5E5E5">efficiency and the implementation with</font>

20
00:00:49,750 --> 00:00:54,760
it<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so just</font><font color="#CCCCCC"> so we're all on the</font>

21
00:00:52,929 --> 00:00:56,320
same<font color="#E5E5E5"> page I'm just gonna start very</font>

22
00:00:54,760 --> 00:00:59,320
briefly to say what I mean<font color="#CCCCCC"> when I talk</font>

23
00:00:56,320 --> 00:01:01,539
<font color="#E5E5E5">about public key encryption I mean that</font>

24
00:00:59,320 --> 00:01:03,550
we have a party or server that can

25
00:01:01,539 --> 00:01:05,890
generate<font color="#E5E5E5"> a private key and a public</font><font color="#CCCCCC"> key</font>

26
00:01:03,550 --> 00:01:08,289
<font color="#E5E5E5">the public key can then be made public</font>

27
00:01:05,890 --> 00:01:10,000
<font color="#CCCCCC">for</font><font color="#E5E5E5"> example given to another person the</font>

28
00:01:08,290 --> 00:01:12,070
other person<font color="#CCCCCC"> can encrypt some message at</font>

29
00:01:10,000 --> 00:01:13,960
a later point in<font color="#E5E5E5"> time using</font><font color="#CCCCCC"> the public</font>

30
00:01:12,070 --> 00:01:15,729
key<font color="#E5E5E5"> sending back and then that can be</font>

31
00:01:13,960 --> 00:01:17,949
<font color="#CCCCCC">decrypted so the server learns the</font>

32
00:01:15,730 --> 00:01:19,510
message<font color="#E5E5E5"> that was sent so that's it</font>

33
00:01:17,950 --> 00:01:21,250
that's<font color="#CCCCCC"> the</font><font color="#E5E5E5"> general case except that</font>

34
00:01:19,510 --> 00:01:23,380
since<font color="#E5E5E5"> the public key</font><font color="#CCCCCC"> is public we can</font>

35
00:01:21,250 --> 00:01:26,080
have many parties that actually increase

36
00:01:23,380 --> 00:01:27,429
ages and since those<font color="#E5E5E5"> to the server so</font>

37
00:01:26,080 --> 00:01:29,740
what I mean in the distributed

38
00:01:27,430 --> 00:01:31,210
distributed setting is<font color="#CCCCCC"> that instead of</font>

39
00:01:29,740 --> 00:01:32,979
<font color="#E5E5E5">having a single server we have several</font>

40
00:01:31,210 --> 00:01:34,990
parties that act sort<font color="#E5E5E5"> of</font><font color="#CCCCCC"> us to serve in</font>

41
00:01:32,980 --> 00:01:37,150
this case so<font color="#E5E5E5"> this means these parties</font>

42
00:01:34,990 --> 00:01:41,470
are<font color="#E5E5E5"> communicating together to construct</font>

43
00:01:37,150 --> 00:01:43,750
<font color="#CCCCCC">a sharing of a private key along</font><font color="#E5E5E5"> with a</font>

44
00:01:41,470 --> 00:01:46,390
public<font color="#E5E5E5"> key so again the</font><font color="#CCCCCC"> public key can</font>

45
00:01:43,750 --> 00:01:47,860
<font color="#E5E5E5">be distributed</font><font color="#CCCCCC"> and some other party can</font>

46
00:01:46,390 --> 00:01:51,250
encrypt the message with<font color="#E5E5E5"> the public key</font>

47
00:01:47,860 --> 00:01:53,950
<font color="#CCCCCC">and send</font><font color="#E5E5E5"> them back</font><font color="#CCCCCC"> to the - to the - to</font>

48
00:01:51,250 --> 00:01:56,980
parties that<font color="#CCCCCC"> act</font><font color="#E5E5E5"> as the server they can</font>

49
00:01:53,950 --> 00:02:00,220
then run a decryption algorithm using

50
00:01:56,980 --> 00:02:02,260
the shares of<font color="#E5E5E5"> the secret key and then in</font>

51
00:02:00,220 --> 00:02:03,970
the end learned some partial decrypted

52
00:02:02,260 --> 00:02:06,070
message which they can exchange<font color="#E5E5E5"> to</font>

53
00:02:03,970 --> 00:02:09,550
actually learn<font color="#E5E5E5"> the message that</font><font color="#CCCCCC"> was</font>

54
00:02:06,070 --> 00:02:11,290
supposed to be sent all right<font color="#CCCCCC"> so why is</font>

55
00:02:09,550 --> 00:02:13,570
this actually interesting<font color="#E5E5E5"> there are</font>

56
00:02:11,290 --> 00:02:16,540
several cases<font color="#E5E5E5"> where</font><font color="#CCCCCC"> it makes sense</font><font color="#E5E5E5"> to</font>

57
00:02:13,570 --> 00:02:19,400
<font color="#CCCCCC">have a distributive private key in in in</font>

58
00:02:16,540 --> 00:02:21,350
such a scheme for

59
00:02:19,400 --> 00:02:23,300
<font color="#CCCCCC">it can be used as a gateway to make</font>

60
00:02:21,350 --> 00:02:26,870
<font color="#CCCCCC">distributors signature schemes which is</font>

61
00:02:23,300 --> 00:02:29,060
an end in<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is also it also</font>

62
00:02:26,870 --> 00:02:30,260
comes up in several NPC protocols in

63
00:02:29,060 --> 00:02:33,500
particular when the public key

64
00:02:30,260 --> 00:02:36,950
encryption is it's a additively

65
00:02:33,500 --> 00:02:38,840
multiplicative homomorphic<font color="#E5E5E5"> and even more</font>

66
00:02:36,950 --> 00:02:41,660
<font color="#E5E5E5">interesting it</font><font color="#CCCCCC"> can be used in a</font>

67
00:02:38,840 --> 00:02:44,600
commercial<font color="#CCCCCC"> setting you where you want to</font>

68
00:02:41,660 --> 00:02:46,640
actually put<font color="#CCCCCC"> our</font><font color="#E5E5E5"> security module in the</font>

69
00:02:44,600 --> 00:02:49,190
cloud<font color="#E5E5E5"> meaning</font><font color="#CCCCCC"> that your instead of</font>

70
00:02:46,640 --> 00:02:53,179
actually<font color="#CCCCCC"> having a box from from</font><font color="#E5E5E5"> multi</font>

71
00:02:49,190 --> 00:02:56,060
<font color="#E5E5E5">Marco or cameltoe</font><font color="#CCCCCC"> you actually have to</font>

72
00:02:53,180 --> 00:02:58,760
<font color="#CCCCCC">cloud us that</font><font color="#E5E5E5"> basically act as as to</font>

73
00:02:56,060 --> 00:03:05,150
construct<font color="#E5E5E5"> constructor and keeper of</font><font color="#CCCCCC"> of</font>

74
00:02:58,760 --> 00:03:07,760
the keys okay<font color="#CCCCCC"> so in this specific work</font>

75
00:03:05,150 --> 00:03:11,750
we consider the public<font color="#E5E5E5"> encryption scheme</font>

76
00:03:07,760 --> 00:03:13,850
RSA so why why are<font color="#E5E5E5"> say well there's a</font>

77
00:03:11,750 --> 00:03:15,890
<font color="#E5E5E5">lot of reasons it's a try to test</font><font color="#CCCCCC"> it</font>

78
00:03:13,850 --> 00:03:17,120
it's very applicable in practice it's

79
00:03:15,890 --> 00:03:21,200
used in a<font color="#E5E5E5"> lot of places</font>

80
00:03:17,120 --> 00:03:23,030
<font color="#E5E5E5">TLS</font><font color="#CCCCCC"> PGP and furthermore there's a lot of</font>

81
00:03:21,200 --> 00:03:24,380
<font color="#E5E5E5">people's work in this setting which I</font>

82
00:03:23,030 --> 00:03:26,060
mean means that the<font color="#E5E5E5"> community</font><font color="#CCCCCC"> is</font>

83
00:03:24,380 --> 00:03:28,310
<font color="#CCCCCC">interested and it</font><font color="#E5E5E5"> also makes it more fun</font>

84
00:03:26,060 --> 00:03:31,549
<font color="#E5E5E5">to actually see how how fast you can get</font>

85
00:03:28,310 --> 00:03:33,470
things going<font color="#CCCCCC"> and just</font><font color="#E5E5E5"> to recap when</font><font color="#CCCCCC"> I</font>

86
00:03:31,549 --> 00:03:35,510
don't mean RSA in this case I mean that

87
00:03:33,470 --> 00:03:38,359
we have a public<font color="#CCCCCC"> key which is which we</font>

88
00:03:35,510 --> 00:03:40,489
call<font color="#E5E5E5"> M which is</font><font color="#CCCCCC"> the product</font><font color="#E5E5E5"> of two large</font>

89
00:03:38,360 --> 00:03:43,880
<font color="#E5E5E5">primes</font><font color="#CCCCCC"> we have a public exponent</font><font color="#E5E5E5"> which</font>

90
00:03:40,489 --> 00:03:47,570
we call<font color="#E5E5E5"> E and that usually 3 or</font><font color="#CCCCCC"> 2 to 16</font>

91
00:03:43,880 --> 00:03:51,140
plus<font color="#E5E5E5"> 1 and then we</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> private</font><font color="#CCCCCC"> key</font>

92
00:03:47,570 --> 00:04:00,440
is<font color="#E5E5E5"> the inverse of e modulo Phi of the</font>

93
00:03:51,140 --> 00:04:02,570
public key<font color="#CCCCCC"> n yeah so in the distribution</font>

94
00:04:00,440 --> 00:04:05,630
<font color="#E5E5E5">so in the distributed</font><font color="#CCCCCC"> setting of RSA</font>

95
00:04:02,570 --> 00:04:06,650
basically what we consider<font color="#E5E5E5"> is it's the</font>

96
00:04:05,630 --> 00:04:09,200
same way as<font color="#E5E5E5"> our</font><font color="#CCCCCC"> previous work has</font>

97
00:04:06,650 --> 00:04:10,880
<font color="#CCCCCC">considered is that</font><font color="#E5E5E5"> the we generate</font>

98
00:04:09,200 --> 00:04:13,010
<font color="#E5E5E5">Prime's as you could normally do in a</font>

99
00:04:10,880 --> 00:04:15,530
general RSA case except<font color="#E5E5E5"> these Prime's</font>

100
00:04:13,010 --> 00:04:17,209
are<font color="#E5E5E5"> secret yet in an additive additive</font>

101
00:04:15,530 --> 00:04:19,310
way so each<font color="#E5E5E5"> partner so each</font><font color="#CCCCCC"> of the two</font>

102
00:04:17,209 --> 00:04:22,370
parties acting<font color="#E5E5E5"> a server</font><font color="#CCCCCC"> Alice and</font><font color="#E5E5E5"> Bob</font>

103
00:04:19,310 --> 00:04:25,220
<font color="#E5E5E5">have an additive share of a prime P</font><font color="#CCCCCC"> and</font>

104
00:04:22,370 --> 00:04:26,600
an additive she have a prime Q<font color="#E5E5E5"> these are</font>

105
00:04:25,220 --> 00:04:29,930
multiplied<font color="#E5E5E5"> together again to construct</font>

106
00:04:26,600 --> 00:04:32,060
the public public<font color="#CCCCCC"> key</font><font color="#E5E5E5"> N and then the</font>

107
00:04:29,930 --> 00:04:32,810
private<font color="#E5E5E5"> key is also an additive sharing</font>

108
00:04:32,060 --> 00:04:35,240
such that when

109
00:04:32,810 --> 00:04:38,150
this year of<font color="#CCCCCC"> Ellis and Shabaab it</font>

110
00:04:35,240 --> 00:04:42,260
settles together<font color="#CCCCCC"> we get</font><font color="#E5E5E5"> the value of the</font>

111
00:04:38,150 --> 00:04:44,120
inverse<font color="#CCCCCC"> V modulo 5</font><font color="#E5E5E5"> n all right so now</font>

112
00:04:42,260 --> 00:04:46,880
the question<font color="#CCCCCC"> is how do actually how do</font>

113
00:04:44,120 --> 00:04:50,180
we do this well we have<font color="#E5E5E5"> we have we have</font>

114
00:04:46,880 --> 00:04:52,700
<font color="#CCCCCC">have two parties and we want something</font>

115
00:04:50,180 --> 00:04:55,130
<font color="#CCCCCC">that's secret here I mean if we</font><font color="#E5E5E5"> look at</font>

116
00:04:52,700 --> 00:04:57,200
our<font color="#E5E5E5"> tool box and</font><font color="#CCCCCC"> a lot of the talks this</font>

117
00:04:55,130 --> 00:04:58,760
week<font color="#E5E5E5"> well</font><font color="#CCCCCC"> we have we have a</font><font color="#E5E5E5"> very nice</font>

118
00:04:57,200 --> 00:05:00,740
tool<font color="#E5E5E5"> to solve this kind of thing which</font>

119
00:04:58,760 --> 00:05:02,570
<font color="#CCCCCC">is called MPC</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> long</font><font color="#E5E5E5"> we just have the</font>

120
00:05:00,740 --> 00:05:04,910
parties pick random<font color="#CCCCCC"> primes</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> Rabin</font>

121
00:05:02,570 --> 00:05:06,710
<font color="#E5E5E5">Miller</font><font color="#CCCCCC"> to into your</font><font color="#E5E5E5"> pick random values</font>

122
00:05:04,910 --> 00:05:08,990
<font color="#CCCCCC">do</font><font color="#E5E5E5"> Raven</font><font color="#CCCCCC"> villo to into your primal</font><font color="#E5E5E5"> T and</font>

123
00:05:06,710 --> 00:05:11,750
then repeat and just do<font color="#CCCCCC"> it all in an</font><font color="#E5E5E5"> MPC</font>

124
00:05:08,990 --> 00:05:13,250
<font color="#E5E5E5">computation well it would be nice</font><font color="#CCCCCC"> if if</font>

125
00:05:11,750 --> 00:05:15,320
<font color="#CCCCCC">that would actually be</font><font color="#E5E5E5"> the case then we</font>

126
00:05:13,250 --> 00:05:17,570
would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> done unfortunately</font><font color="#CCCCCC"> it's not</font>

127
00:05:15,320 --> 00:05:19,640
because<font color="#E5E5E5"> Raven</font><font color="#CCCCCC"> Millis</font><font color="#E5E5E5"> it's very</font>

128
00:05:17,570 --> 00:05:22,370
inefficient<font color="#CCCCCC"> to do an MPC because we are</font>

129
00:05:19,640 --> 00:05:24,979
<font color="#E5E5E5">talking exponentiation</font><font color="#CCCCCC"> or very large</font>

130
00:05:22,370 --> 00:05:27,830
numbers along with modulo reductions and

131
00:05:24,980 --> 00:05:29,960
so on<font color="#CCCCCC"> so it's very hard</font><font color="#E5E5E5"> to actually get</font>

132
00:05:27,830 --> 00:05:35,900
directly<font color="#CCCCCC"> to work</font><font color="#E5E5E5"> in a practical setting</font>

133
00:05:29,960 --> 00:05:38,390
<font color="#E5E5E5">using directly in MPC</font><font color="#CCCCCC"> so what we do</font>

134
00:05:35,900 --> 00:05:40,219
instead<font color="#CCCCCC"> and with what</font><font color="#E5E5E5"> basically all</font>

135
00:05:38,390 --> 00:05:43,880
previous work<font color="#CCCCCC"> and the settings have</font><font color="#E5E5E5"> done</font>

136
00:05:40,220 --> 00:05:45,500
<font color="#CCCCCC">instead is to do a few different faces</font>

137
00:05:43,880 --> 00:05:47,930
<font color="#E5E5E5">that then end up</font><font color="#CCCCCC"> with what we actually</font>

138
00:05:45,500 --> 00:05:50,600
want<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the face it starts with a</font>

139
00:05:47,930 --> 00:05:53,690
candidate generation phase where some

140
00:05:50,600 --> 00:05:55,060
<font color="#E5E5E5">sampling and light weeding is done</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> of</font>

141
00:05:53,690 --> 00:05:58,790
the secret shares of the<font color="#E5E5E5"> primes</font>

142
00:05:55,060 --> 00:06:01,370
<font color="#E5E5E5">afterwards a construction of the modular</font>

143
00:05:58,790 --> 00:06:04,040
system in some secure manner<font color="#E5E5E5"> this</font>

144
00:06:01,370 --> 00:06:06,050
<font color="#E5E5E5">modulus is then verified in some way to</font>

145
00:06:04,040 --> 00:06:09,350
ensure that<font color="#E5E5E5"> it's actually a product of</font>

146
00:06:06,050 --> 00:06:11,240
two primes<font color="#E5E5E5"> and then in the end a face is</font>

147
00:06:09,350 --> 00:06:15,590
executed<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> construct the</font>

148
00:06:11,240 --> 00:06:18,200
distributed keys so just to give a

149
00:06:15,590 --> 00:06:19,760
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of a visual outline of this</font>

150
00:06:18,200 --> 00:06:23,000
we<font color="#CCCCCC"> basically consider we have a whole</font>

151
00:06:19,760 --> 00:06:24,500
bunch of random<font color="#E5E5E5"> values in the beginning</font>

152
00:06:23,000 --> 00:06:26,290
<font color="#E5E5E5">and then as</font><font color="#CCCCCC"> part of the candidate</font>

153
00:06:24,500 --> 00:06:29,479
generation face some get weeded out

154
00:06:26,290 --> 00:06:33,320
these get<font color="#E5E5E5"> these then get they get paired</font>

155
00:06:29,479 --> 00:06:34,940
up to<font color="#E5E5E5"> construct moduli again the</font><font color="#CCCCCC"> module</font>

156
00:06:33,320 --> 00:06:36,200
<font color="#CCCCCC">eyes get weeded out because they might</font>

157
00:06:34,940 --> 00:06:38,750
<font color="#CCCCCC">not actually be</font><font color="#E5E5E5"> the product of two</font>

158
00:06:36,200 --> 00:06:41,150
primes<font color="#E5E5E5"> so in the end we have one</font><font color="#CCCCCC"> modular</font>

159
00:06:38,750 --> 00:06:45,080
left and then that gets<font color="#E5E5E5"> split up into</font>

160
00:06:41,150 --> 00:06:46,400
two shares of the of keys which is what

161
00:06:45,080 --> 00:06:49,310
the<font color="#CCCCCC"> parties will learn in the end</font>

162
00:06:46,400 --> 00:06:50,840
and and then we're done<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that was</font>

163
00:06:49,310 --> 00:06:53,840
a bit<font color="#E5E5E5"> of an introduction regarding what</font>

164
00:06:50,840 --> 00:06:55,820
we're actually<font color="#CCCCCC"> looking at and what's the</font>

165
00:06:53,840 --> 00:06:58,849
<font color="#CCCCCC">general approach to solve this issue</font><font color="#E5E5E5"> so</font>

166
00:06:55,820 --> 00:07:00,289
let<font color="#E5E5E5"> me give a bit</font><font color="#CCCCCC"> more specific start of</font>

167
00:06:58,850 --> 00:07:04,190
how we do<font color="#E5E5E5"> this in</font><font color="#CCCCCC"> the semi honest</font>

168
00:07:00,289 --> 00:07:06,949
setting<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right we start we start by</font>

169
00:07:04,190 --> 00:07:08,900
by picking by picking some random values

170
00:07:06,949 --> 00:07:13,039
<font color="#E5E5E5">under the constraint that the some of</font>

171
00:07:08,900 --> 00:07:16,280
<font color="#E5E5E5">these are congruent to 3 modulo 4 then</font>

172
00:07:13,039 --> 00:07:18,650
what we do<font color="#E5E5E5"> is we execute a trial</font>

173
00:07:16,280 --> 00:07:23,419
division and based<font color="#E5E5E5"> on some ideas from</font>

174
00:07:18,650 --> 00:07:24,229
from the 90s where we use a<font color="#E5E5E5"> 1 out of out</font>

175
00:07:23,419 --> 00:07:27,710
<font color="#CCCCCC">of beta</font>

176
00:07:24,229 --> 00:07:29,389
<font color="#E5E5E5">ot to ensure that the sum of these</font>

177
00:07:27,710 --> 00:07:33,799
Prime's are not divisible by a small

178
00:07:29,389 --> 00:07:36,260
prime factor<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this basically means we</font>

179
00:07:33,800 --> 00:07:40,580
have one party<font color="#E5E5E5"> taking Alice taking her</font>

180
00:07:36,260 --> 00:07:43,849
share P a modulo B<font color="#E5E5E5"> and using that as as</font>

181
00:07:40,580 --> 00:07:47,659
a choice<font color="#E5E5E5"> input to a</font><font color="#CCCCCC"> 1 out</font><font color="#E5E5E5"> of beta random</font>

182
00:07:43,849 --> 00:07:51,770
<font color="#CCCCCC">OT</font><font color="#E5E5E5"> Bob gets beta random strings and</font>

183
00:07:47,660 --> 00:07:57,039
Alice gets the random<font color="#CCCCCC"> swing that fits</font><font color="#E5E5E5"> P</font>

184
00:07:51,770 --> 00:08:00,229
a modulo modulo be but then computes

185
00:07:57,039 --> 00:08:01,729
<font color="#CCCCCC">minus P B modulo beta and then</font><font color="#E5E5E5"> sends</font>

186
00:08:00,229 --> 00:08:04,219
that to Ellis who can then compare

187
00:08:01,729 --> 00:08:06,110
whether they equal or not<font color="#E5E5E5"> and if they</font>

188
00:08:04,220 --> 00:08:09,250
are equal<font color="#E5E5E5"> then</font><font color="#CCCCCC"> it means</font><font color="#E5E5E5"> that beta is</font>

189
00:08:06,110 --> 00:08:11,810
actually a factor of<font color="#E5E5E5"> the sum of P a and</font>

190
00:08:09,250 --> 00:08:13,669
<font color="#CCCCCC">M PB and thus it's definitely</font><font color="#E5E5E5"> not a</font>

191
00:08:11,810 --> 00:08:15,320
prime and the candidate can<font color="#E5E5E5"> be discarded</font>

192
00:08:13,669 --> 00:08:17,150
<font color="#CCCCCC">so this is a very efficient</font><font color="#E5E5E5"> way because</font>

193
00:08:15,320 --> 00:08:21,349
<font color="#CCCCCC">we have a lot of</font><font color="#E5E5E5"> reason and excellent</font>

194
00:08:17,150 --> 00:08:23,239
work<font color="#E5E5E5"> in OT extensions</font><font color="#CCCCCC"> so that's a</font><font color="#E5E5E5"> very</font>

195
00:08:21,349 --> 00:08:25,280
good good start to<font color="#E5E5E5"> read out a lot of</font>

196
00:08:23,240 --> 00:08:29,270
random numbers that<font color="#CCCCCC"> aren't actually not</font>

197
00:08:25,280 --> 00:08:30,859
<font color="#CCCCCC">Prime's afterwards when we</font><font color="#E5E5E5"> have</font>

198
00:08:29,270 --> 00:08:33,228
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that might be prime maybe not</font>

199
00:08:30,860 --> 00:08:35,419
prime<font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> compute the modulo set</font>

200
00:08:33,229 --> 00:08:38,900
which is basically computing the product

201
00:08:35,419 --> 00:08:40,848
<font color="#CCCCCC">of the sum of the of this</font><font color="#E5E5E5"> years this can</font>

202
00:08:38,900 --> 00:08:43,699
also be<font color="#E5E5E5"> done very efficiently using</font><font color="#CCCCCC"> a</font>

203
00:08:40,849 --> 00:08:47,990
previous transfer by<font color="#E5E5E5"> a protocol by PI n</font>

204
00:08:43,700 --> 00:08:50,750
Gilboa<font color="#CCCCCC"> the idea is basically that this</font>

205
00:08:47,990 --> 00:08:52,279
protocol we have<font color="#E5E5E5"> two parties one with</font>

206
00:08:50,750 --> 00:08:54,250
<font color="#CCCCCC">one fact</font><font color="#E5E5E5"> and one with the other facts</font>

207
00:08:52,279 --> 00:08:59,120
and<font color="#CCCCCC"> we what you want to get is a</font>

208
00:08:54,250 --> 00:09:00,019
additive secret sharing<font color="#CCCCCC"> so what happens</font>

209
00:08:59,120 --> 00:09:02,779
is the one<font color="#E5E5E5"> part</font>

210
00:09:00,019 --> 00:09:05,300
in puts a bit of her factor<font color="#CCCCCC"> to one out</font>

211
00:09:02,779 --> 00:09:08,119
of<font color="#E5E5E5"> two</font><font color="#CCCCCC"> ot the other party input a</font><font color="#E5E5E5"> random</font>

212
00:09:05,300 --> 00:09:12,679
number<font color="#CCCCCC"> plus is factored into the one out</font>

213
00:09:08,119 --> 00:09:17,809
of two<font color="#E5E5E5"> ot</font><font color="#CCCCCC"> and then what they get</font><font color="#E5E5E5"> back</font>

214
00:09:12,679 --> 00:09:19,549
can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be used to</font><font color="#E5E5E5"> create a it can be</font>

215
00:09:17,809 --> 00:09:21,529
used with linearity to create an

216
00:09:19,549 --> 00:09:23,149
additive secret sharing<font color="#E5E5E5"> of what</font><font color="#CCCCCC"> is</font>

217
00:09:21,529 --> 00:09:30,290
<font color="#E5E5E5">actually the product of these two</font>

218
00:09:23,149 --> 00:09:31,910
<font color="#E5E5E5">factors once we have the modulus we need</font>

219
00:09:30,290 --> 00:09:34,160
to<font color="#CCCCCC"> execute a Python</font><font color="#E5E5E5"> mallets it says for</font>

220
00:09:31,910 --> 00:09:36,170
this we use some<font color="#E5E5E5"> excellent</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> Cohn</font>

221
00:09:34,160 --> 00:09:38,139
<font color="#E5E5E5">and Franklin from 2001</font>

222
00:09:36,170 --> 00:09:41,329
I'm not going<font color="#E5E5E5"> to detail with the math</font>

223
00:09:38,139 --> 00:09:43,970
here<font color="#CCCCCC"> but it basically involves</font><font color="#E5E5E5"> some</font>

224
00:09:41,329 --> 00:09:48,138
exponentiations you need to do s times

225
00:09:43,970 --> 00:09:50,329
to ensure<font color="#CCCCCC"> that what you have in a public</font>

226
00:09:48,139 --> 00:09:54,459
modulus is actually a<font color="#E5E5E5"> product of two</font>

227
00:09:50,329 --> 00:09:59,269
primes except with exponentially small

228
00:09:54,459 --> 00:10:01,339
probability each of these iteration only

229
00:09:59,269 --> 00:10:03,139
<font color="#E5E5E5">gives a gift give</font><font color="#CCCCCC"> it can give a false</font>

230
00:10:01,339 --> 00:10:05,689
<font color="#CCCCCC">positive</font><font color="#E5E5E5"> would up to probability</font><font color="#CCCCCC"> 1/2 so</font>

231
00:10:03,139 --> 00:10:06,199
<font color="#E5E5E5">that's why it needs to be executed</font><font color="#CCCCCC"> many</font>

232
00:10:05,689 --> 00:10:09,199
times

233
00:10:06,199 --> 00:10:11,449
<font color="#CCCCCC">finally computing the actual</font><font color="#E5E5E5"> additive</font>

234
00:10:09,199 --> 00:10:12,859
share of the keys can be done quite

235
00:10:11,449 --> 00:10:17,899
efficiently also using the same<font color="#E5E5E5"> approach</font>

236
00:10:12,860 --> 00:10:19,279
<font color="#E5E5E5">as when</font><font color="#CCCCCC"> entering from 2001 okay so that</font>

237
00:10:17,899 --> 00:10:21,079
<font color="#E5E5E5">was a brief outline</font><font color="#CCCCCC"> of the simians</font>

238
00:10:19,279 --> 00:10:23,059
construction as<font color="#CCCCCC"> you might</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> noticed a</font>

239
00:10:21,079 --> 00:10:26,359
lot<font color="#CCCCCC"> of these things we do here</font><font color="#E5E5E5"> actually</font>

240
00:10:23,059 --> 00:10:28,309
<font color="#E5E5E5">based on previous work and that's</font>

241
00:10:26,360 --> 00:10:29,809
completely<font color="#CCCCCC"> intentional because</font><font color="#E5E5E5"> our main</font>

242
00:10:28,309 --> 00:10:35,299
contribution is actually how<font color="#E5E5E5"> we take</font>

243
00:10:29,809 --> 00:10:38,059
this and turn it<font color="#E5E5E5"> maliciously secure so</font>

244
00:10:35,299 --> 00:10:40,699
to give an outline if we look at what

245
00:10:38,059 --> 00:10:43,129
can go wrong in the semi honest protocol

246
00:10:40,699 --> 00:10:48,368
<font color="#E5E5E5">in case any of the parties act</font>

247
00:10:43,129 --> 00:10:51,410
maliciously<font color="#CCCCCC"> well a few things there's</font>

248
00:10:48,369 --> 00:10:53,990
there's this issue of selective failure

249
00:10:51,410 --> 00:10:56,988
there's the issue of<font color="#E5E5E5"> not staying</font>

250
00:10:53,990 --> 00:10:58,549
<font color="#E5E5E5">consistent with what you pick as a prime</font>

251
00:10:56,989 --> 00:11:01,160
share throughout the different<font color="#CCCCCC"> stages of</font>

252
00:10:58,549 --> 00:11:02,660
the protocol<font color="#CCCCCC"> and finally but absolutely</font>

253
00:11:01,160 --> 00:11:06,379
not least<font color="#CCCCCC"> leaders</font><font color="#E5E5E5"> the problem of</font>

254
00:11:02,660 --> 00:11:08,899
correctness of by prime<font color="#CCCCCC"> ality so the</font>

255
00:11:06,379 --> 00:11:10,939
question is how<font color="#CCCCCC"> can we</font><font color="#E5E5E5"> get this all to</font>

256
00:11:08,899 --> 00:11:13,370
<font color="#E5E5E5">work securely in a malicious</font><font color="#CCCCCC"> way without</font>

257
00:11:10,939 --> 00:11:15,709
<font color="#E5E5E5">basically not not paying anything</font>

258
00:11:13,370 --> 00:11:18,440
the main<font color="#E5E5E5"> idea we had is that we</font><font color="#CCCCCC"> give the</font>

259
00:11:15,710 --> 00:11:21,560
adversary slightly more power than what

260
00:11:18,440 --> 00:11:24,260
we would<font color="#E5E5E5"> normally</font><font color="#CCCCCC"> allow in a way that's</font>

261
00:11:21,560 --> 00:11:27,140
basically<font color="#E5E5E5"> useless to him</font><font color="#CCCCCC"> so the idea is</font>

262
00:11:24,260 --> 00:11:29,870
<font color="#CCCCCC">that the adversary is allowed to fail</font>

263
00:11:27,140 --> 00:11:33,260
good candidates<font color="#CCCCCC"> so it</font><font color="#E5E5E5"> means even if we</font>

264
00:11:29,870 --> 00:11:35,270
<font color="#E5E5E5">construct a something that is actually</font><font color="#CCCCCC"> a</font>

265
00:11:33,260 --> 00:11:36,950
prime and we have a product<font color="#CCCCCC"> of</font><font color="#E5E5E5"> two</font>

266
00:11:35,270 --> 00:11:39,770
<font color="#CCCCCC">primes the adversary is allowed if he</font>

267
00:11:36,950 --> 00:11:41,029
acts maliciously<font color="#E5E5E5"> to not use that that</font>

268
00:11:39,770 --> 00:11:42,920
doesn't<font color="#CCCCCC"> really give him much power</font>

269
00:11:41,029 --> 00:11:46,520
<font color="#E5E5E5">because the shares that are picked in</font>

270
00:11:42,920 --> 00:11:49,459
this practice are<font color="#E5E5E5"> all random so so and</font>

271
00:11:46,520 --> 00:11:52,370
and and and and<font color="#E5E5E5"> by the fact that we want</font>

272
00:11:49,460 --> 00:11:55,550
this protocol to<font color="#CCCCCC"> only run in what she</font>

273
00:11:52,370 --> 00:11:57,140
<font color="#E5E5E5">was a pretty finite time</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> he does this</font>

274
00:11:55,550 --> 00:11:59,569
<font color="#E5E5E5">too much well then the other party will</font>

275
00:11:57,140 --> 00:12:01,069
<font color="#E5E5E5">basically abort in that case so he</font>

276
00:11:59,570 --> 00:12:01,970
cannot run super-pulling do the

277
00:12:01,070 --> 00:12:07,520
<font color="#E5E5E5">superpolynomial</font>

278
00:12:01,970 --> 00:12:09,740
<font color="#CCCCCC">Lee many times the other thing we do to</font>

279
00:12:07,520 --> 00:12:14,240
<font color="#E5E5E5">ensure that that this can be achieved</font>

280
00:12:09,740 --> 00:12:16,339
very efficiently is that we allow<font color="#E5E5E5"> the</font>

281
00:12:14,240 --> 00:12:19,160
officer to learn a little<font color="#CCCCCC"> bit of</font><font color="#E5E5E5"> leakage</font>

282
00:12:16,339 --> 00:12:24,050
on<font color="#E5E5E5"> each of the prime shares which is not</font>

283
00:12:19,160 --> 00:12:25,910
actually<font color="#CCCCCC"> a big issues because because</font>

284
00:12:24,050 --> 00:12:28,189
they<font color="#E5E5E5"> are random they're very long and we</font>

285
00:12:25,910 --> 00:12:30,500
can<font color="#E5E5E5"> argue that it doesn't</font><font color="#CCCCCC"> give him more</font>

286
00:12:28,190 --> 00:12:32,180
because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> liquids</font><font color="#E5E5E5"> is basically</font>

287
00:12:30,500 --> 00:12:35,540
<font color="#CCCCCC">constant it</font><font color="#E5E5E5"> doesn't give him more than a</font>

288
00:12:32,180 --> 00:12:39,020
constant advantage so that's the main

289
00:12:35,540 --> 00:12:40,430
ideas we have of how to of<font color="#E5E5E5"> of going</font><font color="#CCCCCC"> here</font>

290
00:12:39,020 --> 00:12:43,699
<font color="#E5E5E5">from the semi honest construction to the</font>

291
00:12:40,430 --> 00:12:45,920
maliciously<font color="#CCCCCC"> secured construction so the</font>

292
00:12:43,700 --> 00:12:46,520
contribution<font color="#E5E5E5"> is in how we actually do</font>

293
00:12:45,920 --> 00:12:49,959
<font color="#E5E5E5">these steps</font>

294
00:12:46,520 --> 00:12:52,339
well the<font color="#E5E5E5"> selective failure prevention</font>

295
00:12:49,959 --> 00:12:53,689
<font color="#CCCCCC">basically means that</font><font color="#E5E5E5"> when we use</font><font color="#CCCCCC"> ot and</font>

296
00:12:52,339 --> 00:12:55,610
the<font color="#CCCCCC"> malicious setting there's almost</font>

297
00:12:53,690 --> 00:12:59,959
always<font color="#E5E5E5"> an issue of selective failure</font>

298
00:12:55,610 --> 00:13:03,170
where one party can input something

299
00:12:59,959 --> 00:13:04,430
<font color="#E5E5E5">malicious for the choice</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and something</font>

300
00:13:03,170 --> 00:13:06,469
right for<font color="#E5E5E5"> the choice one and then at a</font>

301
00:13:04,430 --> 00:13:08,420
later<font color="#E5E5E5"> point in time depending on whether</font>

302
00:13:06,470 --> 00:13:13,130
whether the<font color="#E5E5E5"> receiving party</font><font color="#CCCCCC"> picks zero</font>

303
00:13:08,420 --> 00:13:15,439
<font color="#CCCCCC">one we find out according to an abort or</font>

304
00:13:13,130 --> 00:13:18,770
not some information of of this party's

305
00:13:15,440 --> 00:13:20,930
input this can we<font color="#E5E5E5"> shall</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> of how to do</font>

306
00:13:18,770 --> 00:13:24,500
this because<font color="#E5E5E5"> do this very efficiently</font>

307
00:13:20,930 --> 00:13:26,680
using random linear encoding<font color="#E5E5E5"> efficiently</font>

308
00:13:24,500 --> 00:13:29,439
here means<font color="#E5E5E5"> that we get an additive</font>

309
00:13:26,680 --> 00:13:31,300
/ we can an additive overhead of s where

310
00:13:29,439 --> 00:13:33,790
<font color="#E5E5E5">s is a statistical security parameter in</font>

311
00:13:31,300 --> 00:13:38,319
the amount of oblivious transfers<font color="#E5E5E5"> we</font>

312
00:13:33,790 --> 00:13:39,790
need to do and<font color="#E5E5E5"> that's actually not</font><font color="#CCCCCC"> a lot</font>

313
00:13:38,319 --> 00:13:41,949
in this<font color="#E5E5E5"> case because</font><font color="#CCCCCC"> we are multiplying</font>

314
00:13:39,790 --> 00:13:47,050
very large<font color="#E5E5E5"> numbers so it means that we</font>

315
00:13:41,949 --> 00:13:50,199
do<font color="#E5E5E5"> several thousand OTS to ensure that</font><font color="#CCCCCC"> a</font>

316
00:13:47,050 --> 00:13:51,910
party basically<font color="#E5E5E5"> commits to its</font><font color="#CCCCCC"> input</font>

317
00:13:50,199 --> 00:13:53,469
from the beginning from when<font color="#E5E5E5"> we</font>

318
00:13:51,910 --> 00:13:55,990
construct the candidates all the way to

319
00:13:53,470 --> 00:13:58,809
the end when the keys are constructed<font color="#E5E5E5"> we</font>

320
00:13:55,990 --> 00:14:03,279
put some commitments to<font color="#E5E5E5"> this and verify</font>

321
00:13:58,809 --> 00:14:06,040
<font color="#CCCCCC">this at the</font><font color="#E5E5E5"> end so commitments are often</font>

322
00:14:03,279 --> 00:14:08,199
quite expensive so<font color="#CCCCCC"> we come</font><font color="#E5E5E5"> up with with</font>

323
00:14:06,040 --> 00:14:12,029
a<font color="#CCCCCC"> with a new scheme which basically</font>

324
00:14:08,199 --> 00:14:16,209
allows<font color="#E5E5E5"> to make very cheap commitments</font>

325
00:14:12,029 --> 00:14:18,129
assuming we only want<font color="#E5E5E5"> to ever use one of</font>

326
00:14:16,209 --> 00:14:19,329
these commitments<font color="#E5E5E5"> so that that's that's</font>

327
00:14:18,129 --> 00:14:22,420
a bit of a weird<font color="#CCCCCC"> thing it might</font><font color="#E5E5E5"> be</font>

328
00:14:19,329 --> 00:14:25,239
applicable<font color="#E5E5E5"> in other situations</font><font color="#CCCCCC"> I will go</font>

329
00:14:22,420 --> 00:14:28,779
into detail with<font color="#E5E5E5"> that in a</font><font color="#CCCCCC"> moment and</font>

330
00:14:25,240 --> 00:14:31,269
finally to ensure<font color="#E5E5E5"> correctness of the by</font>

331
00:14:28,779 --> 00:14:33,879
primality test<font color="#E5E5E5"> in case of a religious</font>

332
00:14:31,269 --> 00:14:36,730
malicious adversary<font color="#E5E5E5"> we basically use the</font>

333
00:14:33,879 --> 00:14:40,589
standard tool of putting some turning

334
00:14:36,730 --> 00:14:40,589
this into a<font color="#CCCCCC"> stand as your notes</font><font color="#E5E5E5"> proof</font>

335
00:14:41,459 --> 00:14:47,859
<font color="#E5E5E5">okay so let me</font><font color="#CCCCCC"> mention this issue with</font>

336
00:14:44,920 --> 00:14:51,099
consistency basically we what we do is

337
00:14:47,860 --> 00:14:55,120
we commit and notice the quotation mark

338
00:14:51,100 --> 00:14:56,980
using a yes<font color="#CCCCCC"> what this means is that the</font>

339
00:14:55,120 --> 00:15:02,170
committee commitment is<font color="#CCCCCC"> not in and of</font>

340
00:14:56,980 --> 00:15:03,970
itself<font color="#CCCCCC"> binding but because it turns</font><font color="#E5E5E5"> out</font>

341
00:15:02,170 --> 00:15:06,939
<font color="#E5E5E5">we only need to</font><font color="#CCCCCC"> open to commitments in</font>

342
00:15:03,970 --> 00:15:08,829
<font color="#CCCCCC">the end we can we can we can do some</font>

343
00:15:06,939 --> 00:15:10,509
similar verification then<font color="#E5E5E5"> sewers</font><font color="#CCCCCC"> that</font>

344
00:15:08,829 --> 00:15:12,099
show us<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> particular commitment</font>

345
00:15:10,509 --> 00:15:14,529
is correct<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> actually all we</font>

346
00:15:12,100 --> 00:15:16,509
<font color="#E5E5E5">need since we allow the adversary to</font>

347
00:15:14,529 --> 00:15:18,689
fail<font color="#E5E5E5"> good candidates so basically the</font>

348
00:15:16,509 --> 00:15:22,059
overall<font color="#CCCCCC"> idea is</font><font color="#E5E5E5"> that in a</font><font color="#CCCCCC"> setup phase</font>

349
00:15:18,689 --> 00:15:24,279
Alice picks a random key<font color="#E5E5E5"> commits to</font><font color="#CCCCCC"> it</font>

350
00:15:22,059 --> 00:15:27,329
towards Bob then they execute a zero

351
00:15:24,279 --> 00:15:32,079
knowledge proof that this commitment is

352
00:15:27,329 --> 00:15:34,870
is<font color="#E5E5E5"> correct</font><font color="#CCCCCC"> and afterwards</font><font color="#E5E5E5"> what they do</font>

353
00:15:32,079 --> 00:15:37,839
is they<font color="#CCCCCC"> use this scheme to commit</font><font color="#E5E5E5"> to</font>

354
00:15:34,870 --> 00:15:40,150
shares<font color="#CCCCCC"> the sooners proof iya is needed</font>

355
00:15:37,839 --> 00:15:42,460
since our simulator

356
00:15:40,150 --> 00:15:45,130
<font color="#CCCCCC">know whatever key the malicious party</font>

357
00:15:42,460 --> 00:15:47,500
<font color="#E5E5E5">Alice in this case uses to commit to her</font>

358
00:15:45,130 --> 00:15:48,939
<font color="#CCCCCC">Shia's and thus we get extract ability</font>

359
00:15:47,500 --> 00:15:51,070
of<font color="#CCCCCC"> that from the from the zero knowledge</font>

360
00:15:48,940 --> 00:15:52,630
proof<font color="#CCCCCC"> so this means</font><font color="#E5E5E5"> that later on we can</font>

361
00:15:51,070 --> 00:16:00,340
extract<font color="#E5E5E5"> whatever she inputs to these</font>

362
00:15:52,630 --> 00:16:03,550
commitments to verify the modulus again

363
00:16:00,340 --> 00:16:07,090
we execute<font color="#E5E5E5"> to get miscue by primality</font>

364
00:16:03,550 --> 00:16:09,969
<font color="#CCCCCC">test we follow the step as before by by</font>

365
00:16:07,090 --> 00:16:13,510
<font color="#CCCCCC">Pony and</font><font color="#E5E5E5"> Franklin but what we add on top</font>

366
00:16:09,970 --> 00:16:16,690
is the<font color="#E5E5E5"> typical knowledge aspect where</font><font color="#CCCCCC"> we</font>

367
00:16:13,510 --> 00:16:20,680
pick some randomness<font color="#CCCCCC"> and then make some</font>

368
00:16:16,690 --> 00:16:22,600
challenge<font color="#CCCCCC"> depending on this</font><font color="#E5E5E5"> we're at</font>

369
00:16:20,680 --> 00:16:24,400
<font color="#E5E5E5">some point the other party gets to pick</font>

370
00:16:22,600 --> 00:16:26,380
<font color="#CCCCCC">a bit</font><font color="#E5E5E5"> either it actually learns what</font>

371
00:16:24,400 --> 00:16:28,689
this<font color="#E5E5E5"> randomness</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> worse or what this</font>

372
00:16:26,380 --> 00:16:32,380
<font color="#E5E5E5">randomness plus the actual secret we</font>

373
00:16:28,690 --> 00:16:34,690
work on was the actual<font color="#E5E5E5"> witness</font><font color="#CCCCCC"> again</font>

374
00:16:32,380 --> 00:16:37,360
this<font color="#E5E5E5"> means that we do need</font><font color="#CCCCCC"> to repeat it</font>

375
00:16:34,690 --> 00:16:40,600
repeat it<font color="#E5E5E5"> s times to ensure this with</font>

376
00:16:37,360 --> 00:16:42,790
<font color="#E5E5E5">negligible probability and because this</font>

377
00:16:40,600 --> 00:16:44,710
<font color="#E5E5E5">Cyrano's proof needs to be composable</font>

378
00:16:42,790 --> 00:16:46,990
with the rest of<font color="#E5E5E5"> the protocols we also</font>

379
00:16:44,710 --> 00:16:48,760
need<font color="#E5E5E5"> to commit</font><font color="#CCCCCC"> to this challenge</font><font color="#E5E5E5"> and</font>

380
00:16:46,990 --> 00:16:50,620
verify it later on<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> also</font>

381
00:16:48,760 --> 00:16:57,310
again<font color="#CCCCCC"> where we can get</font><font color="#E5E5E5"> used these a</font>

382
00:16:50,620 --> 00:16:59,800
us-based commitments<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so the end</font>

383
00:16:57,310 --> 00:17:01,209
of<font color="#E5E5E5"> all of this is that we we now we give</font>

384
00:16:59,800 --> 00:17:05,169
the<font color="#CCCCCC"> ever</font><font color="#E5E5E5"> say a lot of how we allow him</font><font color="#CCCCCC"> a</font>

385
00:17:01,210 --> 00:17:06,850
lot of cheating during during<font color="#E5E5E5"> this</font>

386
00:17:05,170 --> 00:17:08,320
protocol<font color="#CCCCCC"> and the important thing is that</font>

387
00:17:06,849 --> 00:17:10,510
we<font color="#E5E5E5"> must in the end ensure that whatever</font>

388
00:17:08,319 --> 00:17:12,520
we accept<font color="#E5E5E5"> has actually been been been</font>

389
00:17:10,510 --> 00:17:14,740
<font color="#CCCCCC">done correctly</font><font color="#E5E5E5"> so this means in the</font><font color="#CCCCCC"> end</font>

390
00:17:12,520 --> 00:17:16,629
we execute a<font color="#CCCCCC"> CEO knowledge</font><font color="#E5E5E5"> assume</font>

391
00:17:14,740 --> 00:17:18,579
knowledge proof<font color="#E5E5E5"> that verifies the</font>

392
00:17:16,630 --> 00:17:20,589
commitments to<font color="#CCCCCC"> the shares that have</font><font color="#E5E5E5"> been</font>

393
00:17:18,579 --> 00:17:22,629
used<font color="#E5E5E5"> to construct the moduli</font><font color="#CCCCCC"> are</font>

394
00:17:20,589 --> 00:17:27,069
actually<font color="#E5E5E5"> those that were committed to</font>

395
00:17:22,630 --> 00:17:28,660
using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AES scheme along with the</font>

396
00:17:27,069 --> 00:17:34,629
<font color="#E5E5E5">challenges that were used in the</font><font color="#CCCCCC"> BI</font>

397
00:17:28,660 --> 00:17:37,270
primality by primality<font color="#CCCCCC"> test and</font><font color="#E5E5E5"> and</font>

398
00:17:34,630 --> 00:17:38,770
<font color="#E5E5E5">basically we notice that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can do this</font>

399
00:17:37,270 --> 00:17:41,379
<font color="#CCCCCC">kind of CEO knowledge since it's a</font>

400
00:17:38,770 --> 00:17:43,120
basically<font color="#E5E5E5"> AES circuits we can do this</font>

401
00:17:41,380 --> 00:17:45,790
<font color="#E5E5E5">very efficiently using Gauss up</font><font color="#CCCCCC"> it</font>

402
00:17:43,120 --> 00:17:47,709
doubled<font color="#E5E5E5"> the</font><font color="#CCCCCC"> gobble circuit by some</font>

403
00:17:45,790 --> 00:17:51,879
approached by a<font color="#E5E5E5"> very good</font><font color="#CCCCCC"> owl from from</font>

404
00:17:47,710 --> 00:17:53,950
from<font color="#CCCCCC"> from earlier on so when we put all</font>

405
00:17:51,880 --> 00:17:57,340
this together<font color="#E5E5E5"> we are get our</font>

406
00:17:53,950 --> 00:18:00,130
maliciously<font color="#E5E5E5"> secure scheme with basically</font>

407
00:17:57,340 --> 00:18:02,049
<font color="#E5E5E5">the</font><font color="#CCCCCC"> only overhead of adding the adding</font>

408
00:18:00,130 --> 00:18:04,200
the<font color="#CCCCCC"> AES base commitments which are very</font>

409
00:18:02,049 --> 00:18:07,330
light<font color="#CCCCCC"> in the grand scheme of things the</font>

410
00:18:04,200 --> 00:18:08,950
<font color="#CCCCCC">by primality proof</font><font color="#E5E5E5"> must be</font><font color="#CCCCCC"> malicious</font><font color="#E5E5E5"> is</font>

411
00:18:07,330 --> 00:18:11,799
secure<font color="#E5E5E5"> but this only actually needs to</font>

412
00:18:08,950 --> 00:18:13,330
<font color="#CCCCCC">be done</font><font color="#E5E5E5"> once for the entire protocol not</font>

413
00:18:11,799 --> 00:18:15,158
for each of the candidates or anything

414
00:18:13,330 --> 00:18:17,649
like that<font color="#E5E5E5"> so this also does only add</font>

415
00:18:15,159 --> 00:18:19,029
some constant overhead<font color="#CCCCCC"> the same with the</font>

416
00:18:17,649 --> 00:18:21,340
<font color="#CCCCCC">Serie knowledge proof it's also</font><font color="#E5E5E5"> a little</font>

417
00:18:19,029 --> 00:18:23,110
<font color="#CCCCCC">bit heavy</font><font color="#E5E5E5"> again it's only done once in</font>

418
00:18:21,340 --> 00:18:24,699
the grand scheme<font color="#CCCCCC"> of things</font><font color="#E5E5E5"> this means</font>

419
00:18:23,110 --> 00:18:27,250
<font color="#E5E5E5">that we actually get this maliciously</font>

420
00:18:24,700 --> 00:18:31,600
secure<font color="#E5E5E5"> protocol very cheaply</font><font color="#CCCCCC"> on top of</font>

421
00:18:27,250 --> 00:18:34,120
the semi honest so we<font color="#CCCCCC"> implemented</font><font color="#E5E5E5"> we</font>

422
00:18:31,600 --> 00:18:36,668
implemented this<font color="#E5E5E5"> for constructing 2048</font>

423
00:18:34,120 --> 00:18:38,289
bit RSA<font color="#CCCCCC"> it's just a liberal detail</font><font color="#E5E5E5"> of</font>

424
00:18:36,669 --> 00:18:41,799
the<font color="#CCCCCC"> implementation we of course use des</font>

425
00:18:38,289 --> 00:18:46,539
es mi for doing AES and where we use the

426
00:18:41,799 --> 00:18:49,000
PRG<font color="#CCCCCC"> we used ot extension by Khalid Al to</font>

427
00:18:46,539 --> 00:18:52,480
implement all the<font color="#E5E5E5"> OT s which is more or</font>

428
00:18:49,000 --> 00:18:54,820
less<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only really big cryptographic</font>

429
00:18:52,480 --> 00:18:56,919
primitive<font color="#E5E5E5"> other than AES we</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> in this</font>

430
00:18:54,820 --> 00:18:58,510
protocol<font color="#E5E5E5"> the</font><font color="#CCCCCC"> serial knowledge was done</font>

431
00:18:56,919 --> 00:19:00,029
using using the<font color="#CCCCCC"> capital Circuit's</font>

432
00:18:58,510 --> 00:19:02,019
approach and basically most<font color="#E5E5E5"> of the</font>

433
00:19:00,029 --> 00:19:06,880
primitives that<font color="#E5E5E5"> are computed otherwise</font>

434
00:19:02,019 --> 00:19:10,870
in the<font color="#E5E5E5"> protocol are based on open SSL so</font>

435
00:19:06,880 --> 00:19:13,570
we ran some experiments<font color="#E5E5E5"> on this on the</font>

436
00:19:10,870 --> 00:19:16,719
issue<font color="#CCCCCC"> that is for using a</font><font color="#E5E5E5"> Sen machine</font>

437
00:19:13,570 --> 00:19:19,120
and what we get<font color="#E5E5E5"> the numbers we get is</font>

438
00:19:16,720 --> 00:19:21,580
for a single<font color="#CCCCCC"> thread we get a lowest time</font>

439
00:19:19,120 --> 00:19:23,979
of 56 seconds<font color="#E5E5E5"> and the highest time of</font>

440
00:19:21,580 --> 00:19:26,649
182 seconds

441
00:19:23,980 --> 00:19:29,440
sorry highest time of 5 98<font color="#E5E5E5"> seconds an</font>

442
00:19:26,649 --> 00:19:33,580
average of 182<font color="#CCCCCC"> so that's a</font><font color="#E5E5E5"> very big</font>

443
00:19:29,440 --> 00:19:35,080
variance here<font color="#E5E5E5"> and the reason</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> probably</font>

444
00:19:33,580 --> 00:19:36,820
that this<font color="#E5E5E5"> is actually an</font><font color="#CCCCCC"> extremely</font>

445
00:19:35,080 --> 00:19:39,760
random<font color="#E5E5E5"> process we don't know how quickly</font>

446
00:19:36,820 --> 00:19:42,279
we actually end up<font color="#CCCCCC"> getting some some</font>

447
00:19:39,760 --> 00:19:44,649
good values<font color="#CCCCCC"> so this is based</font><font color="#E5E5E5"> on an</font>

448
00:19:42,279 --> 00:19:46,419
average of 30<font color="#E5E5E5"> times for the executions</font>

449
00:19:44,649 --> 00:19:47,979
<font color="#E5E5E5">and this is actually</font><font color="#CCCCCC"> also consistent</font>

450
00:19:46,419 --> 00:19:49,690
with<font color="#CCCCCC"> the big variants that have</font><font color="#E5E5E5"> been</font>

451
00:19:47,980 --> 00:19:52,870
<font color="#E5E5E5">reported in previous implementations of</font>

452
00:19:49,690 --> 00:19:54,970
this I<font color="#E5E5E5"> think the main results highlight</font>

453
00:19:52,870 --> 00:19:56,889
is that<font color="#E5E5E5"> for an 8 threaded implementation</font>

454
00:19:54,970 --> 00:20:01,350
we managed to<font color="#E5E5E5"> get an average of 40 about</font>

455
00:19:56,889 --> 00:20:04,689
40 41 seconds and that the comparison is

456
00:20:01,350 --> 00:20:07,899
some work by us IRL from 2012 where<font color="#CCCCCC"> they</font>

457
00:20:04,690 --> 00:20:08,290
get the best times of<font color="#E5E5E5"> 50 minutes for the</font>

458
00:20:07,899 --> 00:20:10,060
<font color="#CCCCCC">SM</font>

459
00:20:08,290 --> 00:20:12,550
honest<font color="#E5E5E5"> protocol so we get a big</font>

460
00:20:10,060 --> 00:20:16,060
difference<font color="#E5E5E5"> when we</font><font color="#CCCCCC"> look at where the</font>

461
00:20:12,550 --> 00:20:17,919
time<font color="#E5E5E5"> is actually actually spent we see</font>

462
00:20:16,060 --> 00:20:20,590
that the<font color="#E5E5E5"> serial knowledge aspects</font>

463
00:20:17,920 --> 00:20:22,720
<font color="#CCCCCC">actually don't take a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of a lot of a</font>

464
00:20:20,590 --> 00:20:25,090
lot of the total time as I argued<font color="#CCCCCC"> so</font>

465
00:20:22,720 --> 00:20:26,770
this is basically the thing that gives

466
00:20:25,090 --> 00:20:29,320
<font color="#E5E5E5">the malicious security and it's it</font>

467
00:20:26,770 --> 00:20:30,730
<font color="#E5E5E5">doesn't contribute a lot</font><font color="#CCCCCC"> the main thing</font>

468
00:20:29,320 --> 00:20:32,320
is<font color="#CCCCCC"> actually the construction of</font><font color="#E5E5E5"> the</font>

469
00:20:30,730 --> 00:20:35,380
modulus<font color="#CCCCCC"> I should</font><font color="#E5E5E5"> have mentioned that</font>

470
00:20:32,320 --> 00:20:37,510
this also involves<font color="#CCCCCC"> the</font><font color="#E5E5E5"> prevention of</font>

471
00:20:35,380 --> 00:20:40,210
selective failure<font color="#E5E5E5"> which might actually</font>

472
00:20:37,510 --> 00:20:43,840
<font color="#E5E5E5">end up taking</font><font color="#CCCCCC"> a bit of the time so</font><font color="#E5E5E5"> this</font>

473
00:20:40,210 --> 00:20:52,510
<font color="#CCCCCC">is definitely where we</font><font color="#E5E5E5"> would like to to</font>

474
00:20:43,840 --> 00:20:54,939
shave a bit of time<font color="#CCCCCC"> off so some some</font>

475
00:20:52,510 --> 00:20:56,470
<font color="#E5E5E5">concluding remark we basically showed a</font>

476
00:20:54,940 --> 00:20:58,690
new protocol for<font color="#E5E5E5"> maliciously secured</font>

477
00:20:56,470 --> 00:21:01,000
<font color="#E5E5E5">distributed RSA key generation in the</font>

478
00:20:58,690 --> 00:21:03,820
<font color="#CCCCCC">two-party setting where we</font><font color="#E5E5E5"> get malicious</font>

479
00:21:01,000 --> 00:21:05,620
security almost for<font color="#CCCCCC"> free it doesn't</font><font color="#E5E5E5"> rely</font>

480
00:21:03,820 --> 00:21:07,419
on specific number theoretic assumptions

481
00:21:05,620 --> 00:21:09,790
since basically everything is sharp<font color="#CCCCCC"> into</font>

482
00:21:07,420 --> 00:21:13,210
oblivious transfers we also showed a

483
00:21:09,790 --> 00:21:16,629
proof of concept implementation<font color="#CCCCCC"> among</font>

484
00:21:13,210 --> 00:21:18,780
other things we managed to use this<font color="#E5E5E5"> this</font>

485
00:21:16,630 --> 00:21:21,310
weird construction with<font color="#CCCCCC"> the AES for</font>

486
00:21:18,780 --> 00:21:24,700
<font color="#CCCCCC">lightly extractable commitments where</font>

487
00:21:21,310 --> 00:21:27,460
only some<font color="#CCCCCC"> of it has to be</font><font color="#E5E5E5"> used and we</font>

488
00:21:24,700 --> 00:21:31,090
also show some way of doing selective

489
00:21:27,460 --> 00:21:35,020
failure prevention<font color="#CCCCCC"> when you do</font><font color="#E5E5E5"> ot for</font>

490
00:21:31,090 --> 00:21:36,909
multiplication<font color="#E5E5E5"> of large numbers so yeah</font>

491
00:21:35,020 --> 00:21:38,350
thank you<font color="#CCCCCC"> for sticking around</font><font color="#E5E5E5"> and thank</font>

492
00:21:36,910 --> 00:21:43,599
<font color="#E5E5E5">you for attention</font>

493
00:21:38,350 --> 00:21:43,599
[Applause]

