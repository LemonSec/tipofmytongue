1
00:00:04,910 --> 00:00:08,990
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> hello</font><font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> thank you Mike</font>

2
00:00:07,770 --> 00:00:14,600
for<font color="#E5E5E5"> the introduction</font>

3
00:00:08,990 --> 00:00:18,960
so in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> work we consider the setting</font>

4
00:00:14,600 --> 00:00:21,030
<font color="#E5E5E5">n parties wish to compute some</font>

5
00:00:18,960 --> 00:00:22,860
functionality which is represented by<font color="#CCCCCC"> an</font>

6
00:00:21,030 --> 00:00:26,160
arithmetic circuit over some finite

7
00:00:22,860 --> 00:00:28,830
field<font color="#CCCCCC"> F in the presence of a malicious</font>

8
00:00:26,160 --> 00:00:32,940
as well<font color="#CCCCCC"> to control less than half of the</font>

9
00:00:28,830 --> 00:00:35,039
parties our security model is<font color="#E5E5E5"> secured</font>

10
00:00:32,940 --> 00:00:37,199
with a<font color="#CCCCCC"> board which means that the</font>

11
00:00:35,039 --> 00:00:39,150
adversary may receive its output while

12
00:00:37,200 --> 00:00:42,810
preventing the<font color="#E5E5E5"> honest parties from</font>

13
00:00:39,150 --> 00:00:44,339
receiving<font color="#E5E5E5"> very output although</font><font color="#CCCCCC"> in the</font>

14
00:00:42,810 --> 00:00:46,380
honest majority setting<font color="#CCCCCC"> full security</font>

15
00:00:44,340 --> 00:00:48,480
<font color="#E5E5E5">can be achieved</font><font color="#CCCCCC"> since we want</font><font color="#E5E5E5"> to achieve</font>

16
00:00:46,380 --> 00:00:52,350
<font color="#CCCCCC">efficiency we consider only this</font>

17
00:00:48,480 --> 00:00:57,569
slightly<font color="#E5E5E5"> weaker notion of security but</font>

18
00:00:52,350 --> 00:01:00,270
very reasonable for many applications<font color="#CCCCCC"> so</font>

19
00:00:57,570 --> 00:01:03,840
this<font color="#E5E5E5"> is the setting and</font><font color="#CCCCCC"> the starting</font>

20
00:01:00,270 --> 00:01:06,119
point of our protocol is<font color="#E5E5E5"> two very simple</font>

21
00:01:03,840 --> 00:01:09,090
observations<font color="#E5E5E5"> so the first observation</font>

22
00:01:06,119 --> 00:01:14,189
made by<font color="#CCCCCC"> ganging Atari in a series of</font>

23
00:01:09,090 --> 00:01:16,139
works is that protocols that are<font color="#E5E5E5"> many</font>

24
00:01:14,189 --> 00:01:18,928
semi honest protocols that<font color="#CCCCCC"> are based on</font>

25
00:01:16,139 --> 00:01:21,209
<font color="#CCCCCC">sickly cheering have</font><font color="#E5E5E5"> actually not that</font>

26
00:01:18,929 --> 00:01:23,429
weak<font color="#CCCCCC"> they're actually</font><font color="#E5E5E5"> secure up to</font>

27
00:01:21,209 --> 00:01:25,950
additive attack even in the presence of

28
00:01:23,429 --> 00:01:27,600
malicious adversary<font color="#CCCCCC"> otherwise</font><font color="#E5E5E5"> which</font>

29
00:01:25,950 --> 00:01:30,299
<font color="#E5E5E5">means that the only thing that that we</font>

30
00:01:27,600 --> 00:01:33,359
can do is to add<font color="#CCCCCC"> some</font><font color="#E5E5E5"> value</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

31
00:01:30,299 --> 00:01:34,889
<font color="#CCCCCC">output</font><font color="#E5E5E5"> but nothing beyond that</font><font color="#CCCCCC"> even if</font>

32
00:01:33,359 --> 00:01:36,359
it's a malicious adversary and<font color="#CCCCCC"> the</font>

33
00:01:34,889 --> 00:01:40,199
protocol that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> being logging is the</font>

34
00:01:36,359 --> 00:01:41,669
<font color="#E5E5E5">kill only</font><font color="#CCCCCC"> against semi honest and this</font>

35
00:01:40,200 --> 00:01:44,009
was used<font color="#E5E5E5"> in their work</font><font color="#CCCCCC"> to construct</font>

36
00:01:41,670 --> 00:01:46,770
circuit sort of resilient to additive

37
00:01:44,009 --> 00:01:48,569
attack the second observation is<font color="#E5E5E5"> that in</font>

38
00:01:46,770 --> 00:01:52,139
<font color="#CCCCCC">the honest majority setting which is our</font>

39
00:01:48,569 --> 00:01:54,649
setting<font color="#E5E5E5"> that exists many highly</font>

40
00:01:52,139 --> 00:01:58,439
efficient<font color="#E5E5E5"> semi honest protocol which</font>

41
00:01:54,649 --> 00:02:00,749
<font color="#E5E5E5">very low computation cost and with</font>

42
00:01:58,439 --> 00:02:02,119
communication that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> only linear with</font>

43
00:02:00,749 --> 00:02:05,609
the number of parties

44
00:02:02,119 --> 00:02:09,270
so using this<font color="#CCCCCC"> observation and following</font>

45
00:02:05,609 --> 00:02:11,640
the work of<font color="#E5E5E5"> gonca natal we present in</font>

46
00:02:09,270 --> 00:02:14,970
this<font color="#CCCCCC"> book a new protocol which is</font>

47
00:02:11,640 --> 00:02:17,040
maliciously secured with<font color="#CCCCCC"> about which</font><font color="#E5E5E5"> for</font>

48
00:02:14,970 --> 00:02:18,250
<font color="#E5E5E5">large file field requires the parties to</font>

49
00:02:17,040 --> 00:02:21,700
run a semi honest

50
00:02:18,250 --> 00:02:23,530
<font color="#CCCCCC">called exactly</font><font color="#E5E5E5"> twice and when I say</font>

51
00:02:21,700 --> 00:02:25,450
large<font color="#CCCCCC"> fill I</font><font color="#E5E5E5"> mean that the size of the</font>

52
00:02:23,530 --> 00:02:28,330
<font color="#E5E5E5">field divided by three is larger than</font>

53
00:02:25,450 --> 00:02:31,179
<font color="#E5E5E5">two to the security parameter if we walk</font>

54
00:02:28,330 --> 00:02:33,400
over<font color="#E5E5E5"> smaller fields then we will have to</font>

55
00:02:31,180 --> 00:02:36,940
run the semi honest<font color="#E5E5E5"> protocol Delta times</font>

56
00:02:33,400 --> 00:02:41,200
where Delta is such that this inequality

57
00:02:36,940 --> 00:02:42,190
is satisfied and we present<font color="#E5E5E5"> in</font><font color="#CCCCCC"> our work</font>

58
00:02:41,200 --> 00:02:44,950
<font color="#CCCCCC">to instantiation</font>

59
00:02:42,190 --> 00:02:47,170
<font color="#CCCCCC">to a protocol</font><font color="#E5E5E5"> the first one is for the</font>

60
00:02:44,950 --> 00:02:49,660
<font color="#CCCCCC">specific</font><font color="#E5E5E5"> case of three party computation</font>

61
00:02:47,170 --> 00:02:51,970
<font color="#CCCCCC">well we use replicated secret</font><font color="#E5E5E5"> sharing</font>

62
00:02:49,660 --> 00:02:54,100
and we<font color="#E5E5E5"> present a protocol based on our</font>

63
00:02:51,970 --> 00:02:56,920
<font color="#CCCCCC">construction</font><font color="#E5E5E5"> where each party is</font>

64
00:02:54,100 --> 00:03:00,130
required to<font color="#E5E5E5"> send just two field elements</font>

65
00:02:56,920 --> 00:03:01,600
<font color="#E5E5E5">per</font><font color="#CCCCCC"> a multiplication gate and a second</font>

66
00:03:00,130 --> 00:03:03,459
<font color="#CCCCCC">differentiation for any number</font><font color="#E5E5E5"> of</font>

67
00:03:01,600 --> 00:03:07,329
parties<font color="#CCCCCC"> that which is based on</font><font color="#E5E5E5"> shamil</font>

68
00:03:03,459 --> 00:03:10,270
<font color="#CCCCCC">secret selling well we present a</font>

69
00:03:07,330 --> 00:03:12,459
protocol<font color="#E5E5E5"> where each party is required to</font>

70
00:03:10,270 --> 00:03:16,239
<font color="#E5E5E5">send just</font><font color="#CCCCCC"> twelve</font><font color="#E5E5E5"> field elements per</font>

71
00:03:12,459 --> 00:03:19,120
multiplication gate the previous best

72
00:03:16,239 --> 00:03:21,489
result was I think<font color="#E5E5E5"> 42 if I remember</font>

73
00:03:19,120 --> 00:03:23,950
correctly<font color="#E5E5E5"> field elements per</font>

74
00:03:21,489 --> 00:03:27,820
multiplication gate so this is a<font color="#E5E5E5"> big</font>

75
00:03:23,950 --> 00:03:30,190
concrete improvement and later<font color="#CCCCCC"> will</font><font color="#E5E5E5"> also</font>

76
00:03:27,820 --> 00:03:32,140
show some experimental<font color="#CCCCCC"> results</font><font color="#E5E5E5"> and some</font>

77
00:03:30,190 --> 00:03:33,910
running times<font color="#E5E5E5"> so this is this of course</font>

78
00:03:32,140 --> 00:03:35,679
<font color="#CCCCCC">is</font><font color="#E5E5E5"> for large field if</font><font color="#CCCCCC"> we walk over small</font>

79
00:03:33,910 --> 00:03:39,130
things<font color="#E5E5E5"> then the communication goes</font>

80
00:03:35,680 --> 00:03:41,410
linear with the<font color="#E5E5E5"> Delta parameter so this</font>

81
00:03:39,130 --> 00:03:43,690
is our main results<font color="#E5E5E5"> now let's go into</font>

82
00:03:41,410 --> 00:03:45,370
<font color="#E5E5E5">the details so but before</font><font color="#CCCCCC"> proceed is</font>

83
00:03:43,690 --> 00:03:48,609
some attention so we<font color="#CCCCCC"> use the standard</font>

84
00:03:45,370 --> 00:03:50,200
notation<font color="#CCCCCC"> for sharing or value</font><font color="#E5E5E5"> X we</font>

85
00:03:48,610 --> 00:03:52,660
<font color="#E5E5E5">assume that the secretary scheme that is</font>

86
00:03:50,200 --> 00:03:56,380
being used is has linear properties and

87
00:03:52,660 --> 00:03:57,730
that<font color="#E5E5E5"> and therefore only when only for</font>

88
00:03:56,380 --> 00:04:00,820
multiplication gates there is

89
00:03:57,730 --> 00:04:03,250
interaction between<font color="#E5E5E5"> the parties F multi</font>

90
00:04:00,820 --> 00:04:05,739
is our functionality<font color="#E5E5E5"> that captures the I</font>

91
00:04:03,250 --> 00:04:08,560
did<font color="#E5E5E5"> the idea of security up to additive</font>

92
00:04:05,739 --> 00:04:11,709
attack<font color="#E5E5E5"> and which can be</font><font color="#CCCCCC"> realized as I</font>

93
00:04:08,560 --> 00:04:14,260
said as I just said by many semi honest

94
00:04:11,709 --> 00:04:17,019
multiplication protocols<font color="#E5E5E5"> and the front</font>

95
00:04:14,260 --> 00:04:19,930
is a functionality<font color="#E5E5E5"> to generate random</font>

96
00:04:17,019 --> 00:04:22,090
sharings and also here the<font color="#CCCCCC"> way to</font>

97
00:04:19,930 --> 00:04:24,430
realize it depends on<font color="#E5E5E5"> the signature</font>

98
00:04:22,089 --> 00:04:27,880
scheme that is being used in the

99
00:04:24,430 --> 00:04:30,789
protocol<font color="#E5E5E5"> so these are our building box</font>

100
00:04:27,880 --> 00:04:31,510
and let's go into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> details so we have</font>

101
00:04:30,789 --> 00:04:33,190
the

102
00:04:31,510 --> 00:04:34,539
functionality<font color="#CCCCCC"> F month which is</font><font color="#E5E5E5"> the queue</font>

103
00:04:33,190 --> 00:04:36,400
up<font color="#E5E5E5"> to</font><font color="#CCCCCC"> additive attack which means that</font>

104
00:04:34,540 --> 00:04:39,970
the only<font color="#E5E5E5"> thing that they</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> do is to</font>

105
00:04:36,400 --> 00:04:43,419
add<font color="#CCCCCC"> some value to the output</font><font color="#E5E5E5"> now</font>

106
00:04:39,970 --> 00:04:45,580
achieving<font color="#CCCCCC"> movie security with about when</font>

107
00:04:43,420 --> 00:04:49,630
<font color="#CCCCCC">we use a smart</font><font color="#E5E5E5"> eventually reduces the</font>

108
00:04:45,580 --> 00:04:52,180
one basic<font color="#E5E5E5"> question which is how</font><font color="#CCCCCC"> can the</font>

109
00:04:49,630 --> 00:04:57,250
parties detect when cheating took place

110
00:04:52,180 --> 00:05:00,910
and and the value<font color="#CCCCCC"> that was added to the</font>

111
00:04:57,250 --> 00:05:03,250
output<font color="#E5E5E5"> is not zero so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is basically</font>

112
00:05:00,910 --> 00:05:07,810
the question that we need<font color="#E5E5E5"> to ask and now</font>

113
00:05:03,250 --> 00:05:09,580
let's see how we answer<font color="#E5E5E5"> this so the main</font>

114
00:05:07,810 --> 00:05:11,740
idea<font color="#CCCCCC"> is as follows so we start by</font>

115
00:05:09,580 --> 00:05:14,080
generate some random shelling some

116
00:05:11,740 --> 00:05:17,410
global random shelling<font color="#CCCCCC"> are by calling</font>

117
00:05:14,080 --> 00:05:20,409
our<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> flood and then for</font>

118
00:05:17,410 --> 00:05:22,030
each y<font color="#E5E5E5"> of the circuit we have</font><font color="#CCCCCC"> this</font>

119
00:05:20,410 --> 00:05:23,860
<font color="#E5E5E5">environment where the parties hold a</font>

120
00:05:22,030 --> 00:05:25,929
pair of<font color="#E5E5E5"> shellings on each while a</font>

121
00:05:23,860 --> 00:05:28,210
sharing of<font color="#E5E5E5"> the actual value tags on the</font>

122
00:05:25,930 --> 00:05:30,670
wire and the<font color="#E5E5E5"> randomized</font><font color="#CCCCCC"> shelling of this</font>

123
00:05:28,210 --> 00:05:32,919
value this randomization can be also

124
00:05:30,670 --> 00:05:35,770
viewed as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> map of the value which is</font>

125
00:05:32,920 --> 00:05:38,080
exactly what Daniel mentioned<font color="#E5E5E5"> in the</font>

126
00:05:35,770 --> 00:05:40,840
first talk<font color="#E5E5E5"> exactly the same mark that is</font>

127
00:05:38,080 --> 00:05:45,820
used in<font color="#E5E5E5"> speed mascot you know in and all</font>

128
00:05:40,840 --> 00:05:47,409
these family of protocols<font color="#E5E5E5"> so the idea is</font>

129
00:05:45,820 --> 00:05:49,630
that<font color="#CCCCCC"> to maintain this invariant so in</font>

130
00:05:47,410 --> 00:05:52,060
order<font color="#E5E5E5"> to</font><font color="#CCCCCC"> achieve this the party is start</font>

131
00:05:49,630 --> 00:05:55,390
by randomizing<font color="#E5E5E5"> the input wires of</font><font color="#CCCCCC"> the</font>

132
00:05:52,060 --> 00:05:57,970
circuit<font color="#E5E5E5"> by taking each sharing on the</font>

133
00:05:55,390 --> 00:06:00,700
input<font color="#E5E5E5"> file and multiply it with the</font>

134
00:05:57,970 --> 00:06:03,220
global random shelling al by calling<font color="#E5E5E5"> F</font>

135
00:06:00,700 --> 00:06:04,659
miles and then the parties<font color="#CCCCCC"> go over the</font>

136
00:06:03,220 --> 00:06:06,640
circuit<font color="#E5E5E5"> in topological order and</font>

137
00:06:04,660 --> 00:06:09,160
maintain this invariant<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> addition</font>

138
00:06:06,640 --> 00:06:12,130
gate the party can just locally add the

139
00:06:09,160 --> 00:06:14,650
shells but for multiplication gate gates

140
00:06:12,130 --> 00:06:17,740
the parties<font color="#E5E5E5"> need to interact and this</font>

141
00:06:14,650 --> 00:06:20,130
has<font color="#E5E5E5"> done its follows so on each input</font>

142
00:06:17,740 --> 00:06:23,470
wire<font color="#E5E5E5"> of each multiplication gate we have</font>

143
00:06:20,130 --> 00:06:25,540
<font color="#E5E5E5">to a pair of sharing so the party is</font>

144
00:06:23,470 --> 00:06:28,540
<font color="#E5E5E5">called F multi stressed time they call F</font>

145
00:06:25,540 --> 00:06:30,400
mark to multiply the shellings<font color="#E5E5E5"> of the</font>

146
00:06:28,540 --> 00:06:33,430
actual values that<font color="#E5E5E5"> are on the wires and</font>

147
00:06:30,400 --> 00:06:36,549
the second time so this by this<font color="#E5E5E5"> way they</font>

148
00:06:33,430 --> 00:06:38,620
<font color="#CCCCCC">have the sharing of the output</font><font color="#E5E5E5"> and then</font>

149
00:06:36,550 --> 00:06:41,770
they call F multi at again in order<font color="#E5E5E5"> to</font>

150
00:06:38,620 --> 00:06:43,700
multiply<font color="#E5E5E5"> the randomized sharing on the</font>

151
00:06:41,770 --> 00:06:45,169
left<font color="#E5E5E5"> input wire and</font>

152
00:06:43,700 --> 00:06:48,650
actual<font color="#E5E5E5"> in the shelling of the actual</font>

153
00:06:45,170 --> 00:06:52,070
value on the right input wire<font color="#E5E5E5"> and by</font>

154
00:06:48,650 --> 00:06:54,289
this they<font color="#CCCCCC"> have and</font><font color="#E5E5E5"> and this is how they</font>

155
00:06:52,070 --> 00:06:56,659
obtained the<font color="#E5E5E5"> randomized sharing on the</font>

156
00:06:54,290 --> 00:06:58,460
output<font color="#E5E5E5"> but of course</font><font color="#CCCCCC"> F Mart is not fully</font>

157
00:06:56,660 --> 00:07:00,260
<font color="#CCCCCC">secure right it is the queue up to</font>

158
00:06:58,460 --> 00:07:04,130
<font color="#E5E5E5">native attack and the</font><font color="#CCCCCC"> other stream a</font>

159
00:07:00,260 --> 00:07:05,870
chip in this computation but what<font color="#CCCCCC"> we can</font>

160
00:07:04,130 --> 00:07:07,760
use what we<font color="#CCCCCC"> will see in a moment</font><font color="#E5E5E5"> that we</font>

161
00:07:05,870 --> 00:07:10,340
can use the<font color="#E5E5E5"> randomized sharing in order</font>

162
00:07:07,760 --> 00:07:12,349
to verify<font color="#E5E5E5"> the correctness of the</font><font color="#CCCCCC"> sharing</font>

163
00:07:10,340 --> 00:07:13,729
of<font color="#E5E5E5"> the actual value we will use the</font>

164
00:07:12,350 --> 00:07:16,610
shelling<font color="#E5E5E5"> of outside in order to verify</font>

165
00:07:13,730 --> 00:07:22,340
<font color="#E5E5E5">the correctness of Z and this is done as</font>

166
00:07:16,610 --> 00:07:23,570
<font color="#E5E5E5">follows so the parties can take the</font><font color="#CCCCCC"> the</font>

167
00:07:22,340 --> 00:07:25,280
sharing<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> day the</font><font color="#E5E5E5"> sharing of the</font>

168
00:07:23,570 --> 00:07:28,010
actual value on the wire and call s

169
00:07:25,280 --> 00:07:30,830
multi<font color="#E5E5E5"> it again to multiply it with the</font>

170
00:07:28,010 --> 00:07:32,810
<font color="#E5E5E5">random shelling out and then we have</font>

171
00:07:30,830 --> 00:07:35,120
another randomized sharing of this value

172
00:07:32,810 --> 00:07:37,190
<font color="#E5E5E5">that was computed in a different way now</font>

173
00:07:35,120 --> 00:07:39,800
the party is called this<font color="#E5E5E5"> checking</font>

174
00:07:37,190 --> 00:07:42,710
equality is a protocol that we have<font color="#E5E5E5"> okay</font>

175
00:07:39,800 --> 00:07:45,380
<font color="#CCCCCC">and and check that the two random are</font>

176
00:07:42,710 --> 00:07:47,840
sharing that<font color="#E5E5E5"> they have is</font><font color="#CCCCCC"> about sharing</font>

177
00:07:45,380 --> 00:07:49,909
of the same value and<font color="#E5E5E5"> the problem that</font>

178
00:07:47,840 --> 00:07:52,849
<font color="#CCCCCC">we have is that if chatting took place</font>

179
00:07:49,910 --> 00:07:54,740
then since<font color="#CCCCCC"> R is unknown and since we use</font>

180
00:07:52,850 --> 00:07:56,300
<font color="#E5E5E5">F</font><font color="#CCCCCC"> pal which is secure is that we can</font>

181
00:07:54,740 --> 00:08:00,380
show that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> probability that</font><font color="#E5E5E5"> the</font>

182
00:07:56,300 --> 00:08:04,460
<font color="#CCCCCC">quality holds and the</font><font color="#E5E5E5"> only spot is don't</font>

183
00:08:00,380 --> 00:08:05,960
<font color="#E5E5E5">about FGM to place is negligible</font><font color="#CCCCCC"> so this</font>

184
00:08:04,460 --> 00:08:08,690
is the main D but we<font color="#CCCCCC"> actually can</font>

185
00:08:05,960 --> 00:08:12,200
optimize<font color="#CCCCCC"> it</font><font color="#E5E5E5"> a little bit more and use</font>

186
00:08:08,690 --> 00:08:15,160
this standard<font color="#CCCCCC"> standard trick of batch</font>

187
00:08:12,200 --> 00:08:17,420
batch checking instead of checking<font color="#E5E5E5"> each</font>

188
00:08:15,160 --> 00:08:19,460
multiplication<font color="#E5E5E5"> gets separately</font><font color="#CCCCCC"> okay so</font>

189
00:08:17,420 --> 00:08:21,710
at the moment we have<font color="#E5E5E5"> three calls to F</font>

190
00:08:19,460 --> 00:08:24,409
<font color="#CCCCCC">mal for each multiplication gate</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font>

191
00:08:21,710 --> 00:08:27,409
get rid<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> last call to</font><font color="#CCCCCC"> F Mart for</font>

192
00:08:24,410 --> 00:08:29,870
verification<font color="#E5E5E5"> so what we can do is</font>

193
00:08:27,410 --> 00:08:32,210
instead<font color="#E5E5E5"> what you can do is to take the</font>

194
00:08:29,870 --> 00:08:38,060
linear combination of the<font color="#E5E5E5"> sharing of the</font>

195
00:08:32,210 --> 00:08:40,430
value on<font color="#E5E5E5"> each wire</font><font color="#CCCCCC"> by by first</font><font color="#E5E5E5"> is do</font>

196
00:08:38,059 --> 00:08:43,400
some coin tossing and obtain<font color="#CCCCCC"> these alpha</font>

197
00:08:40,429 --> 00:08:46,810
<font color="#CCCCCC">either</font><font color="#E5E5E5"> here which are public random</font>

198
00:08:43,400 --> 00:08:49,850
values and then they can locally compute

199
00:08:46,810 --> 00:08:51,050
this value this linear combination<font color="#CCCCCC"> and</font>

200
00:08:49,850 --> 00:08:53,480
then call F<font color="#E5E5E5"> mult</font>

201
00:08:51,050 --> 00:08:56,569
to multiply it with the<font color="#CCCCCC"> random shelling</font>

202
00:08:53,480 --> 00:09:00,570
<font color="#E5E5E5">are thereby obtaining</font>

203
00:08:56,570 --> 00:09:02,940
this value then the<font color="#CCCCCC"> Katy</font><font color="#E5E5E5"> they can take</font>

204
00:09:00,570 --> 00:09:05,880
<font color="#CCCCCC">the</font><font color="#E5E5E5"> linear</font><font color="#CCCCCC"> combination of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> randomized</font>

205
00:09:02,940 --> 00:09:08,850
sharing on each<font color="#E5E5E5"> value and then</font><font color="#CCCCCC"> call the</font>

206
00:09:05,880 --> 00:09:10,500
checking equality protocol<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> once</font>

207
00:09:08,850 --> 00:09:12,870
for<font color="#CCCCCC"> the entire protocol</font><font color="#E5E5E5"> so now instead</font>

208
00:09:10,500 --> 00:09:15,089
of having<font color="#E5E5E5"> verification for each</font>

209
00:09:12,870 --> 00:09:19,250
multiplication<font color="#E5E5E5"> get separately where one</font>

210
00:09:15,089 --> 00:09:21,870
verification for the entire circuit and

211
00:09:19,250 --> 00:09:25,140
the property that we<font color="#CCCCCC"> have is</font><font color="#E5E5E5"> that if</font>

212
00:09:21,870 --> 00:09:28,170
cheating took place then<font color="#E5E5E5"> only thought is</font>

213
00:09:25,140 --> 00:09:29,640
about<font color="#E5E5E5"> it were</font><font color="#CCCCCC"> 81 minus 3 over the</font><font color="#E5E5E5"> size</font>

214
00:09:28,170 --> 00:09:31,520
of<font color="#E5E5E5"> the field</font><font color="#CCCCCC"> so if the field is large</font>

215
00:09:29,640 --> 00:09:35,699
then<font color="#E5E5E5"> three of</font><font color="#CCCCCC"> the size</font><font color="#E5E5E5"> of the field is</font>

216
00:09:31,520 --> 00:09:37,800
negligible<font color="#E5E5E5"> however this is the cheating</font>

217
00:09:35,700 --> 00:09:42,510
of<font color="#E5E5E5"> ability is indeed negligible however</font>

218
00:09:37,800 --> 00:09:45,990
this this optimization<font color="#E5E5E5"> causes a security</font>

219
00:09:42,510 --> 00:09:48,540
<font color="#CCCCCC">problem and</font><font color="#E5E5E5"> the security problem is</font>

220
00:09:45,990 --> 00:09:50,940
caused by the fact<font color="#E5E5E5"> that this last call</font>

221
00:09:48,540 --> 00:09:53,189
to<font color="#E5E5E5"> a spot this one call that</font><font color="#CCCCCC"> we do to a</font>

222
00:09:50,940 --> 00:09:57,180
smart in the verification<font color="#CCCCCC"> step is done</font>

223
00:09:53,190 --> 00:10:00,270
<font color="#CCCCCC">after the random</font><font color="#E5E5E5"> coefficients this alpha</font>

224
00:09:57,180 --> 00:10:02,219
this alpha<font color="#CCCCCC"> I will chosen and what</font><font color="#E5E5E5"> we</font>

225
00:10:00,270 --> 00:10:04,680
<font color="#E5E5E5">show</font><font color="#CCCCCC"> in the paper is that in this one</font>

226
00:10:02,220 --> 00:10:06,779
call to a<font color="#CCCCCC"> smell the roadway can carry</font>

227
00:10:04,680 --> 00:10:09,569
out an<font color="#CCCCCC"> attack which allows</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> to learn</font>

228
00:10:06,779 --> 00:10:12,060
some<font color="#CCCCCC"> information about internal values</font>

229
00:10:09,570 --> 00:10:15,420
from<font color="#E5E5E5"> the fact that the only spot is</font>

230
00:10:12,060 --> 00:10:18,899
about<font color="#CCCCCC"> or not</font><font color="#E5E5E5"> so what we need here</font><font color="#CCCCCC"> is</font>

231
00:10:15,420 --> 00:10:23,459
that the this random coefficients this

232
00:10:18,899 --> 00:10:25,620
<font color="#E5E5E5">alpha eyes will be chosen only only</font>

233
00:10:23,459 --> 00:10:27,630
<font color="#E5E5E5">after all the cost of multi-beam</font>

234
00:10:25,620 --> 00:10:29,520
concluded<font color="#E5E5E5"> this is achieved this is</font>

235
00:10:27,630 --> 00:10:31,740
solved by doing<font color="#E5E5E5"> the following</font>

236
00:10:29,520 --> 00:10:33,540
so now after<font color="#E5E5E5"> so after we computed the</font>

237
00:10:31,740 --> 00:10:35,399
circuit and we<font color="#E5E5E5"> have two pairs</font><font color="#CCCCCC"> a pair of</font>

238
00:10:33,540 --> 00:10:37,410
sharings on each<font color="#E5E5E5"> Y of the circuit now</font><font color="#CCCCCC"> we</font>

239
00:10:35,399 --> 00:10:40,290
can open<font color="#E5E5E5"> up and reveal its value to the</font>

240
00:10:37,410 --> 00:10:43,699
parties and<font color="#CCCCCC"> then we can compute here in</font>

241
00:10:40,290 --> 00:10:46,349
step<font color="#CCCCCC"> two we</font><font color="#E5E5E5"> can do local computation and</font>

242
00:10:43,700 --> 00:10:50,100
proceed with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> quality checking as</font>

243
00:10:46,350 --> 00:10:52,760
before<font color="#E5E5E5"> okay so now here in step two</font><font color="#CCCCCC"> all</font>

244
00:10:50,100 --> 00:10:55,589
<font color="#E5E5E5">to</font><font color="#CCCCCC"> compute local computation after we</font>

245
00:10:52,760 --> 00:10:57,350
<font color="#CCCCCC">depart is no</font><font color="#E5E5E5"> alpha I and no</font><font color="#CCCCCC"> L and</font>

246
00:10:55,589 --> 00:11:01,500
therefore<font color="#E5E5E5"> we don't need to call F mult</font>

247
00:10:57,350 --> 00:11:03,510
even once in the<font color="#CCCCCC"> verification step</font><font color="#E5E5E5"> and</font>

248
00:11:01,500 --> 00:11:05,339
<font color="#E5E5E5">therefore now it is fully optimized and</font>

249
00:11:03,510 --> 00:11:06,959
securing we are the sample of years

250
00:11:05,339 --> 00:11:09,630
before<font color="#CCCCCC"> that the cheating probability is</font>

251
00:11:06,959 --> 00:11:10,250
negligible<font color="#E5E5E5"> and as you can</font><font color="#CCCCCC"> see we have</font>

252
00:11:09,630 --> 00:11:12,590
<font color="#E5E5E5">eventually</font>

253
00:11:10,250 --> 00:11:14,420
we end up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a protocol</font><font color="#E5E5E5"> where we need</font>

254
00:11:12,590 --> 00:11:17,000
<font color="#E5E5E5">to call F</font><font color="#CCCCCC"> multix exactly twice for each</font>

255
00:11:14,420 --> 00:11:19,849
multiplication gate as<font color="#E5E5E5"> you can see here</font>

256
00:11:17,000 --> 00:11:24,850
one<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the real circuit</font><font color="#E5E5E5"> gate if you can</font>

257
00:11:19,850 --> 00:11:28,340
want<font color="#E5E5E5"> to compute the randomized sharing</font>

258
00:11:24,850 --> 00:11:31,970
<font color="#E5E5E5">okay so this is what we've seen now is</font>

259
00:11:28,340 --> 00:11:33,500
true for is correct for large<font color="#CCCCCC"> scales</font>

260
00:11:31,970 --> 00:11:36,130
<font color="#E5E5E5">what</font><font color="#CCCCCC"> happened when we</font><font color="#E5E5E5"> moved to when we</font>

261
00:11:33,500 --> 00:11:38,780
walk over smaller fields so the

262
00:11:36,130 --> 00:11:40,430
<font color="#E5E5E5">straightforward extension of our ready</font>

263
00:11:38,780 --> 00:11:44,720
to small<font color="#CCCCCC"> fields would be that</font><font color="#E5E5E5"> instead of</font>

264
00:11:40,430 --> 00:11:47,599
randomizing<font color="#CCCCCC"> the value ones</font><font color="#E5E5E5"> we can now</font>

265
00:11:44,720 --> 00:11:50,510
<font color="#E5E5E5">randomize it multiple times</font><font color="#CCCCCC"> so instead</font>

266
00:11:47,600 --> 00:11:52,790
of<font color="#E5E5E5"> holding to a pair of sharings on each</font>

267
00:11:50,510 --> 00:11:54,939
wire now we will hold<font color="#E5E5E5"> a total of Delta</font>

268
00:11:52,790 --> 00:11:56,959
<font color="#E5E5E5">plus</font><font color="#CCCCCC"> one sharings on each wire which</font>

269
00:11:54,940 --> 00:12:01,880
randomization is with a different

270
00:11:56,960 --> 00:12:04,490
independent<font color="#CCCCCC"> are independent are</font><font color="#E5E5E5"> okay now</font>

271
00:12:01,880 --> 00:12:06,230
when we want<font color="#E5E5E5"> to meet</font><font color="#CCCCCC"> a nice in dalian so</font>

272
00:12:04,490 --> 00:12:07,940
when you compute multiplication<font color="#E5E5E5"> guys</font>

273
00:12:06,230 --> 00:12:11,090
instead<font color="#E5E5E5"> of calling F</font><font color="#CCCCCC"> Multi sui we'll</font>

274
00:12:07,940 --> 00:12:13,250
call it Delta plus<font color="#CCCCCC"> one times once for</font>

275
00:12:11,090 --> 00:12:17,210
<font color="#E5E5E5">the copies for the multiplication of the</font>

276
00:12:13,250 --> 00:12:19,850
shelling<font color="#CCCCCC"> of the actual values and</font><font color="#E5E5E5"> Delta</font>

277
00:12:17,210 --> 00:12:22,220
more times in order to<font color="#E5E5E5"> move to obtain</font>

278
00:12:19,850 --> 00:12:24,589
the randomized<font color="#E5E5E5"> sharing on the output</font>

279
00:12:22,220 --> 00:12:26,690
wire<font color="#E5E5E5"> and then we Camille and</font>

280
00:12:24,589 --> 00:12:29,930
<font color="#E5E5E5">verification step through each</font>

281
00:12:26,690 --> 00:12:31,940
randomization separately<font color="#CCCCCC"> and since all</font>

282
00:12:29,930 --> 00:12:33,739
the randomization<font color="#E5E5E5"> of independent of each</font>

283
00:12:31,940 --> 00:12:35,510
other we have that the<font color="#CCCCCC"> chetak validity</font>

284
00:12:33,740 --> 00:12:37,220
for each revocation step is<font color="#E5E5E5"> three over</font>

285
00:12:35,510 --> 00:12:38,720
the<font color="#CCCCCC"> South field and</font><font color="#E5E5E5"> over all the</font>

286
00:12:37,220 --> 00:12:42,410
<font color="#E5E5E5">cheating mobility is two</font><font color="#CCCCCC"> over the</font>

287
00:12:38,720 --> 00:12:46,250
<font color="#CCCCCC">cellular field to Delta and then Delta</font>

288
00:12:42,410 --> 00:12:49,930
<font color="#CCCCCC">can be can be chosen in order to achieve</font>

289
00:12:46,250 --> 00:12:54,350
a certain<font color="#E5E5E5"> desired level of security</font>

290
00:12:49,930 --> 00:12:59,870
<font color="#E5E5E5">however when this although intuitively</font>

291
00:12:54,350 --> 00:13:03,110
this looks correct<font color="#E5E5E5"> the when trying to to</font>

292
00:12:59,870 --> 00:13:05,000
prove this<font color="#E5E5E5"> the proof fails and I want to</font>

293
00:13:03,110 --> 00:13:09,680
explain<font color="#CCCCCC"> very briefly why so if we look</font>

294
00:13:05,000 --> 00:13:11,600
at our verification<font color="#E5E5E5"> procedure we can</font><font color="#CCCCCC"> see</font>

295
00:13:09,680 --> 00:13:14,000
<font color="#E5E5E5">that eventually everything</font><font color="#CCCCCC"> almost</font><font color="#E5E5E5"> is</font>

296
00:13:11,600 --> 00:13:15,530
known in this<font color="#CCCCCC"> location step</font><font color="#E5E5E5"> all is</font>

297
00:13:14,000 --> 00:13:17,089
revealed<font color="#E5E5E5"> to the party it is known to</font><font color="#CCCCCC"> all</font>

298
00:13:15,530 --> 00:13:20,329
<font color="#E5E5E5">the party to diversity to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> real</font><font color="#CCCCCC"> world</font>

299
00:13:17,089 --> 00:13:21,560
<font color="#CCCCCC">already to the idea old simulator</font><font color="#E5E5E5"> of I</font>

300
00:13:20,330 --> 00:13:23,630
is known the only<font color="#E5E5E5"> thing that is not</font>

301
00:13:21,560 --> 00:13:25,849
known is the value<font color="#E5E5E5"> of that</font>

302
00:13:23,630 --> 00:13:28,100
<font color="#E5E5E5">the actual values that</font><font color="#CCCCCC"> are on the wires</font>

303
00:13:25,850 --> 00:13:30,259
however this<font color="#E5E5E5"> what these values are known</font>

304
00:13:28,100 --> 00:13:33,110
to<font color="#CCCCCC"> distinguish so the distinguisher</font>

305
00:13:30,259 --> 00:13:36,110
knows exactly<font color="#E5E5E5"> whether the Equality that</font>

306
00:13:33,110 --> 00:13:38,060
<font color="#E5E5E5">we check will hold or not</font><font color="#CCCCCC"> and it knows</font>

307
00:13:36,110 --> 00:13:40,430
exactly<font color="#E5E5E5"> it's the honest part issue the</font>

308
00:13:38,060 --> 00:13:42,489
boat or not<font color="#E5E5E5"> now</font><font color="#CCCCCC"> we simulate the</font>

309
00:13:40,430 --> 00:13:45,290
simulator<font color="#CCCCCC"> does</font><font color="#E5E5E5"> that doesn't know that</font>

310
00:13:42,490 --> 00:13:46,850
so before we could say<font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay so this</font>

311
00:13:45,290 --> 00:13:48,349
<font color="#CCCCCC">dimensions felt but this happens with</font>

312
00:13:46,850 --> 00:13:50,029
negligible probability because<font color="#E5E5E5"> three</font>

313
00:13:48,350 --> 00:13:51,199
over the size of<font color="#E5E5E5"> the field is negligible</font>

314
00:13:50,029 --> 00:13:52,850
<font color="#CCCCCC">but now it's</font><font color="#E5E5E5"> three over the size of the</font>

315
00:13:51,199 --> 00:13:55,099
field<font color="#E5E5E5"> is not it's not negligible anymore</font>

316
00:13:52,850 --> 00:13:56,649
so we cannot say so<font color="#E5E5E5"> and we cannot say</font>

317
00:13:55,100 --> 00:14:00,519
that<font color="#E5E5E5"> the simulation fails with</font>

318
00:13:56,649 --> 00:14:03,290
non-negligible probability<font color="#E5E5E5"> so the proof</font>

319
00:14:00,519 --> 00:14:05,269
<font color="#CCCCCC">fails when we move to small fields and</font>

320
00:14:03,290 --> 00:14:06,860
we need to change something in<font color="#E5E5E5"> our</font>

321
00:14:05,269 --> 00:14:09,380
<font color="#E5E5E5">verification step in order for this to</font>

322
00:14:06,860 --> 00:14:12,380
work<font color="#CCCCCC"> and the idea is that</font><font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font>

323
00:14:09,380 --> 00:14:14,540
<font color="#E5E5E5">keep something else secret in the</font>

324
00:14:12,380 --> 00:14:17,060
pacification<font color="#CCCCCC"> steps</font><font color="#E5E5E5"> so even the</font>

325
00:14:14,540 --> 00:14:19,939
distinguisher won't know if<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only</font>

326
00:14:17,060 --> 00:14:22,969
spot<font color="#E5E5E5"> issue the boat or not and what we</font>

327
00:14:19,940 --> 00:14:27,230
do<font color="#CCCCCC"> here is that instead of</font><font color="#E5E5E5"> do point to</font>

328
00:14:22,970 --> 00:14:30,889
<font color="#E5E5E5">do some coin tossing to to to obtain the</font>

329
00:14:27,230 --> 00:14:33,680
random public<font color="#E5E5E5"> alpha eyes we now call a</font>

330
00:14:30,889 --> 00:14:36,769
front<font color="#E5E5E5"> to receive random a random</font>

331
00:14:33,680 --> 00:14:38,779
shellings<font color="#E5E5E5"> of this alpha so alpha eyes</font>

332
00:14:36,769 --> 00:14:41,029
are kept<font color="#E5E5E5"> secret now throughout the</font>

333
00:14:38,779 --> 00:14:43,160
verification step<font color="#E5E5E5"> however this looks</font>

334
00:14:41,029 --> 00:14:45,439
from first glance<font color="#E5E5E5"> like like not such a</font>

335
00:14:43,160 --> 00:14:50,540
good idea<font color="#E5E5E5"> right because now when we</font>

336
00:14:45,439 --> 00:14:52,579
compute step<font color="#CCCCCC"> three and in step</font><font color="#E5E5E5"> four we</font>

337
00:14:50,540 --> 00:14:54,110
have here<font color="#E5E5E5"> multiplication between shared</font>

338
00:14:52,579 --> 00:14:57,829
values each time we want<font color="#CCCCCC"> to multiply</font>

339
00:14:54,110 --> 00:14:59,360
alpha and Zi<font color="#E5E5E5"> now alpha is is a shared</font>

340
00:14:57,829 --> 00:15:00,800
value so we need to call earth mouth

341
00:14:59,360 --> 00:15:03,860
each time we need to<font color="#E5E5E5"> do that so it looks</font>

342
00:15:00,800 --> 00:15:06,979
<font color="#CCCCCC">like we need two more calls two more</font>

343
00:15:03,860 --> 00:15:08,480
calls to<font color="#E5E5E5"> a</font><font color="#CCCCCC"> smelt for each multiplication</font>

344
00:15:06,980 --> 00:15:13,180
gate so this double the community<font color="#E5E5E5"> this</font>

345
00:15:08,480 --> 00:15:15,500
doubles the the<font color="#E5E5E5"> cost of the protocol but</font>

346
00:15:13,180 --> 00:15:18,138
<font color="#CCCCCC">fortunately we have a way</font><font color="#E5E5E5"> to overcome</font>

347
00:15:15,500 --> 00:15:20,990
<font color="#E5E5E5">this problem</font><font color="#CCCCCC"> and what I</font><font color="#E5E5E5"> will show now is</font>

348
00:15:18,139 --> 00:15:24,230
how we can<font color="#CCCCCC"> compute</font><font color="#E5E5E5"> this sum of products</font>

349
00:15:20,990 --> 00:15:27,139
of shared at<font color="#E5E5E5"> the cost of one</font>

350
00:15:24,230 --> 00:15:30,800
multiplication<font color="#E5E5E5"> at the cost of running</font>

351
00:15:27,139 --> 00:15:34,380
one multiplication protocols<font color="#CCCCCC"> oh okay so</font>

352
00:15:30,800 --> 00:15:37,079
and I will<font color="#CCCCCC"> show</font><font color="#E5E5E5"> it by by an example</font>

353
00:15:34,380 --> 00:15:39,270
<font color="#E5E5E5">using this example it can be</font><font color="#CCCCCC"> a signal</font>

354
00:15:37,080 --> 00:15:42,210
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> that the ID and this can</font>

355
00:15:39,270 --> 00:15:46,050
<font color="#CCCCCC">apply this can be</font><font color="#E5E5E5"> applied to</font><font color="#CCCCCC"> to many</font>

356
00:15:42,210 --> 00:15:49,100
other cases<font color="#E5E5E5"> so let's assume</font><font color="#CCCCCC"> for example</font>

357
00:15:46,050 --> 00:15:52,109
that we work with<font color="#E5E5E5"> shamil</font><font color="#CCCCCC"> secure</font><font color="#E5E5E5"> chilling</font>

358
00:15:49,100 --> 00:15:54,690
so we want to<font color="#E5E5E5"> compute this sum</font><font color="#CCCCCC"> of</font>

359
00:15:52,110 --> 00:15:58,290
products of shared values<font color="#E5E5E5"> so ensure</font>

360
00:15:54,690 --> 00:16:01,860
<font color="#E5E5E5">musical challenge each sharing is points</font>

361
00:15:58,290 --> 00:16:04,380
of a polynomial<font color="#CCCCCC"> of degree T now if we</font>

362
00:16:01,860 --> 00:16:06,990
<font color="#E5E5E5">work in an</font><font color="#CCCCCC"> invoice</font><font color="#E5E5E5"> so we look at each of</font>

363
00:16:04,380 --> 00:16:09,810
the values<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> if two values</font>

364
00:16:06,990 --> 00:16:11,640
<font color="#CCCCCC">what we</font><font color="#E5E5E5"> want to multiply and then run a</font>

365
00:16:09,810 --> 00:16:13,260
multiplication protocol for each of them

366
00:16:11,640 --> 00:16:16,050
<font color="#CCCCCC">separately</font><font color="#E5E5E5"> so usually multiplication</font>

367
00:16:13,260 --> 00:16:19,110
protocols<font color="#CCCCCC"> for Tamils secretion of for</font>

368
00:16:16,050 --> 00:16:20,880
shamil<font color="#CCCCCC"> second workers work as</font><font color="#E5E5E5"> follows so</font>

369
00:16:19,110 --> 00:16:23,610
the party start by locally multiplying

370
00:16:20,880 --> 00:16:25,320
those shares and then they have<font color="#CCCCCC"> then</font>

371
00:16:23,610 --> 00:16:27,270
they<font color="#E5E5E5"> hold a correct sharing of the</font>

372
00:16:25,320 --> 00:16:31,770
result<font color="#E5E5E5"> but the problem is that</font><font color="#CCCCCC"> this is</font>

373
00:16:27,270 --> 00:16:35,010
sharing<font color="#E5E5E5"> using a</font><font color="#CCCCCC"> polynomial of degree 2 T</font>

374
00:16:31,770 --> 00:16:37,199
and not a degree T so what the parties

375
00:16:35,010 --> 00:16:39,600
do is run some interactive protocol

376
00:16:37,200 --> 00:16:41,130
which is<font color="#E5E5E5"> eventually the main cost of the</font>

377
00:16:39,600 --> 00:16:45,690
entire multiplication<font color="#CCCCCC"> otoko</font>

378
00:16:41,130 --> 00:16:47,280
well they do<font color="#E5E5E5"> decree</font><font color="#CCCCCC"> reduction and then</font>

379
00:16:45,690 --> 00:16:50,940
they have a correct sharing of the

380
00:16:47,280 --> 00:16:52,860
result with the correct degree<font color="#E5E5E5"> and then</font>

381
00:16:50,940 --> 00:16:55,530
they can<font color="#CCCCCC"> sum all those or they have and</font>

382
00:16:52,860 --> 00:16:58,590
obtain a sharing of the sum of<font color="#E5E5E5"> products</font>

383
00:16:55,530 --> 00:17:01,110
<font color="#E5E5E5">now the very simple but very powerful</font>

384
00:16:58,590 --> 00:17:03,690
idea<font color="#E5E5E5"> is that we</font><font color="#CCCCCC"> can reverse the order</font>

385
00:17:01,110 --> 00:17:05,970
here<font color="#E5E5E5"> now we can start with the same way</font>

386
00:17:03,690 --> 00:17:08,579
it's<font color="#E5E5E5"> party locally multiply those shares</font>

387
00:17:05,970 --> 00:17:11,189
but now let's sum the results now before

388
00:17:08,579 --> 00:17:14,369
we do<font color="#E5E5E5"> the degree reduction and now we</font>

389
00:17:11,189 --> 00:17:16,140
will have<font color="#CCCCCC"> a quick sharing of the sum of</font>

390
00:17:14,369 --> 00:17:17,609
products but with<font color="#E5E5E5"> the gratuity</font><font color="#CCCCCC"> and then</font>

391
00:17:16,140 --> 00:17:20,220
we can<font color="#E5E5E5"> run the interactive protocol for</font>

392
00:17:17,609 --> 00:17:23,550
<font color="#CCCCCC">delegation</font><font color="#E5E5E5"> only once for the entire sum</font>

393
00:17:20,220 --> 00:17:26,160
of products<font color="#E5E5E5"> so this is very simple but</font>

394
00:17:23,550 --> 00:17:28,139
very powerful<font color="#E5E5E5"> and by</font><font color="#CCCCCC"> doing this we can</font>

395
00:17:26,160 --> 00:17:29,880
<font color="#E5E5E5">see</font><font color="#CCCCCC"> that we can compute the sum of</font>

396
00:17:28,140 --> 00:17:31,290
<font color="#E5E5E5">products of</font><font color="#CCCCCC"> shares</font><font color="#E5E5E5"> doesn't matter</font>

397
00:17:29,880 --> 00:17:34,380
<font color="#E5E5E5">doesn't matter how</font><font color="#CCCCCC"> many shells</font><font color="#E5E5E5"> we have</font>

398
00:17:31,290 --> 00:17:36,480
here at the cost of adventure the cost

399
00:17:34,380 --> 00:17:38,100
of one single multiplication because

400
00:17:36,480 --> 00:17:41,970
<font color="#E5E5E5">eventually the interactive protocol is</font>

401
00:17:38,100 --> 00:17:44,010
the the main the main bottleneck of all

402
00:17:41,970 --> 00:17:46,880
this<font color="#E5E5E5"> all the matific multiplication</font>

403
00:17:44,010 --> 00:17:48,600
protocol<font color="#E5E5E5"> so if we go back this I</font>

404
00:17:46,880 --> 00:17:51,000
<font color="#E5E5E5">presented it using</font>

405
00:17:48,600 --> 00:17:54,389
music<font color="#CCCCCC"> returning but</font><font color="#E5E5E5"> this can be easily</font>

406
00:17:51,000 --> 00:17:56,539
applied to<font color="#E5E5E5"> too many other</font><font color="#CCCCCC"> signature</font>

407
00:17:54,390 --> 00:17:59,490
schemes<font color="#CCCCCC"> let's work in the very same</font><font color="#E5E5E5"> way</font>

408
00:17:56,539 --> 00:18:03,150
<font color="#E5E5E5">so going back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> vacation step now</font>

409
00:17:59,490 --> 00:18:04,770
we can see that we<font color="#CCCCCC"> can compute these sum</font>

410
00:18:03,150 --> 00:18:07,700
of products the<font color="#CCCCCC"> term vertex here and the</font>

411
00:18:04,770 --> 00:18:11,820
sum<font color="#CCCCCC"> of products here we can compute it</font>

412
00:18:07,700 --> 00:18:15,000
<font color="#CCCCCC">at the cost of one single call to F</font>

413
00:18:11,820 --> 00:18:17,159
<font color="#CCCCCC">module for the cost of one one</font><font color="#E5E5E5"> single</font>

414
00:18:15,000 --> 00:18:18,570
execution<font color="#E5E5E5"> of our same ion it's</font>

415
00:18:17,160 --> 00:18:20,909
multiplication particular<font color="#CCCCCC"> so eventually</font>

416
00:18:18,570 --> 00:18:22,110
when<font color="#CCCCCC"> we all Mota amortize it over the</font>

417
00:18:20,909 --> 00:18:26,059
entire<font color="#E5E5E5"> circuit this is eventually</font>

418
00:18:22,110 --> 00:18:31,949
nothing<font color="#E5E5E5"> and we are left with the same</font>

419
00:18:26,059 --> 00:18:33,990
cost as before as but<font color="#E5E5E5"> as with as of two</font>

420
00:18:31,950 --> 00:18:35,940
calls<font color="#E5E5E5"> to F mult for each multiplication</font>

421
00:18:33,990 --> 00:18:38,610
<font color="#E5E5E5">gate there's one little thing</font><font color="#CCCCCC"> here that</font>

422
00:18:35,940 --> 00:18:40,350
<font color="#E5E5E5">we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to call a front</font><font color="#CCCCCC"> because alpha</font><font color="#E5E5E5"> we</font>

423
00:18:38,610 --> 00:18:43,620
<font color="#CCCCCC">have alpha</font><font color="#E5E5E5"> for each multiplication gate</font>

424
00:18:40,350 --> 00:18:45,990
so we<font color="#CCCCCC"> need one call to F run but it is</font>

425
00:18:43,620 --> 00:18:47,939
not too bad eventually we don't need to

426
00:18:45,990 --> 00:18:50,789
call a<font color="#CCCCCC"> smelt more times for each</font>

427
00:18:47,940 --> 00:18:53,900
multiplication gate so this is the idea

428
00:18:50,789 --> 00:18:57,900
for this this is<font color="#CCCCCC"> the replication step</font>

429
00:18:53,900 --> 00:19:00,270
when<font color="#E5E5E5"> we walk all those small things</font>

430
00:18:57,900 --> 00:19:05,130
another small adventures<font color="#CCCCCC"> that advantage</font>

431
00:19:00,270 --> 00:19:07,889
that this<font color="#E5E5E5"> purification procedure has is</font>

432
00:19:05,130 --> 00:19:09,900
<font color="#CCCCCC">that now we can</font><font color="#E5E5E5"> before we had to open</font>

433
00:19:07,890 --> 00:19:12,419
<font color="#E5E5E5">our because we had some security problem</font>

434
00:19:09,900 --> 00:19:14,159
now because alpha is kept<font color="#CCCCCC"> secret</font><font color="#E5E5E5"> we</font>

435
00:19:12,419 --> 00:19:17,940
don't have this<font color="#E5E5E5"> problem anymore so we</font>

436
00:19:14,159 --> 00:19:20,220
<font color="#E5E5E5">can keep our also as a secret this has</font>

437
00:19:17,940 --> 00:19:22,470
advantage when we<font color="#E5E5E5"> for example a computer</font>

438
00:19:20,220 --> 00:19:24,750
<font color="#E5E5E5">the active functionality or some or some</font>

439
00:19:22,470 --> 00:19:26,460
<font color="#CCCCCC">ongoing computation when we release</font>

440
00:19:24,750 --> 00:19:28,679
output<font color="#E5E5E5"> and continuing</font><font color="#CCCCCC"> with the</font>

441
00:19:26,460 --> 00:19:31,140
<font color="#E5E5E5">computation so if we open our we will</font>

442
00:19:28,679 --> 00:19:34,350
<font color="#E5E5E5">have to</font><font color="#CCCCCC"> randomized we randomize the all</font>

443
00:19:31,140 --> 00:19:35,820
the values<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> circuit each time we</font>

444
00:19:34,350 --> 00:19:37,350
release<font color="#E5E5E5"> an output if our skeptic</font>

445
00:19:35,820 --> 00:19:40,020
security we don't need to do<font color="#CCCCCC"> that so</font>

446
00:19:37,350 --> 00:19:43,049
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> it's there is a small advantage</font>

447
00:19:40,020 --> 00:19:46,320
advantage why not if we do if<font color="#E5E5E5"> you don't</font>

448
00:19:43,049 --> 00:19:48,720
open<font color="#E5E5E5"> up so to sum up what we've seen</font>

449
00:19:46,320 --> 00:19:52,200
till now<font color="#CCCCCC"> so we've</font><font color="#E5E5E5"> seen two protocols one</font>

450
00:19:48,720 --> 00:19:53,789
that is suited for<font color="#E5E5E5"> large</font><font color="#CCCCCC"> field where the</font>

451
00:19:52,200 --> 00:19:57,809
ammeter is called<font color="#E5E5E5"> spur multiplication</font>

452
00:19:53,789 --> 00:20:00,780
gate<font color="#E5E5E5"> is is too close</font><font color="#CCCCCC"> to a smart and the</font>

453
00:19:57,809 --> 00:20:02,340
protocol<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can work also</font><font color="#CCCCCC"> for small</font>

454
00:20:00,780 --> 00:20:05,070
fields were the emoticon

455
00:20:02,340 --> 00:20:08,429
multiplication gate is 1 plus<font color="#CCCCCC"> Delta</font>

456
00:20:05,070 --> 00:20:12,270
calls<font color="#E5E5E5"> to F</font><font color="#CCCCCC"> mult</font><font color="#E5E5E5"> and Delta calls to F</font>

457
00:20:08,430 --> 00:20:14,220
front<font color="#CCCCCC"> if we of course work on large</font>

458
00:20:12,270 --> 00:20:17,129
field with this<font color="#E5E5E5"> motor current Delta is</font>

459
00:20:14,220 --> 00:20:21,210
just equals<font color="#E5E5E5"> 1 so it</font><font color="#CCCCCC"> is almost</font><font color="#E5E5E5"> the same</font>

460
00:20:17,130 --> 00:20:23,310
as<font color="#E5E5E5"> the first protocol so these are these</font>

461
00:20:21,210 --> 00:20:27,210
<font color="#CCCCCC">are our two protocols our two</font>

462
00:20:23,310 --> 00:20:28,770
constructions in in our paper<font color="#E5E5E5"> and now I</font>

463
00:20:27,210 --> 00:20:30,510
will<font color="#E5E5E5"> finish with showing some</font>

464
00:20:28,770 --> 00:20:32,639
experimental<font color="#CCCCCC"> results so as I said at</font><font color="#E5E5E5"> the</font>

465
00:20:30,510 --> 00:20:35,390
beginning we<font color="#E5E5E5"> have two instantiations you</font>

466
00:20:32,640 --> 00:20:37,860
know<font color="#CCCCCC"> photo</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> 1 4 3 parties</font><font color="#E5E5E5"> using</font>

467
00:20:35,390 --> 00:20:40,260
<font color="#CCCCCC">replicator</font><font color="#E5E5E5"> 2</font><font color="#CCCCCC"> co-chairing and one for any</font>

468
00:20:37,860 --> 00:20:42,389
number of<font color="#E5E5E5"> parties using</font><font color="#CCCCCC"> shammiracle</font>

469
00:20:40,260 --> 00:20:48,030
sharing and here in<font color="#E5E5E5"> this table you can</font>

470
00:20:42,390 --> 00:20:49,890
<font color="#CCCCCC">see the way we instantiate</font><font color="#E5E5E5"> each of the</font>

471
00:20:48,030 --> 00:20:52,500
building blocks of<font color="#E5E5E5"> a protocol</font><font color="#CCCCCC"> for each</font>

472
00:20:49,890 --> 00:20:55,740
of these signature<font color="#CCCCCC"> schemes so for</font>

473
00:20:52,500 --> 00:20:58,290
example if you<font color="#E5E5E5"> shamil signal cheering so</font>

474
00:20:55,740 --> 00:21:01,080
we have a protocol that<font color="#E5E5E5"> which is which</font>

475
00:20:58,290 --> 00:21:03,210
<font color="#E5E5E5">realizes</font><font color="#CCCCCC"> f</font><font color="#E5E5E5"> month which is basically</font>

476
00:21:01,080 --> 00:21:08,399
<font color="#E5E5E5">secure absolutive attack which requires</font>

477
00:21:03,210 --> 00:21:11,580
each party<font color="#CCCCCC"> to send 6 elements per gate</font>

478
00:21:08,400 --> 00:21:13,170
the way we realized a front<font color="#E5E5E5"> our protocol</font>

479
00:21:11,580 --> 00:21:16,520
to generate<font color="#E5E5E5"> random shelling requires</font>

480
00:21:13,170 --> 00:21:23,090
<font color="#E5E5E5">each party</font><font color="#CCCCCC"> to send to field elements</font>

481
00:21:16,520 --> 00:21:26,370
<font color="#CCCCCC">tailgate</font><font color="#E5E5E5"> so two filaments not forget for</font>

482
00:21:23,090 --> 00:21:27,919
<font color="#E5E5E5">ramming for execution of a front so this</font>

483
00:21:26,370 --> 00:21:33,750
is our building blocks<font color="#E5E5E5"> for</font><font color="#CCCCCC"> each of these</font>

484
00:21:27,920 --> 00:21:36,780
signature schemes<font color="#E5E5E5"> and we examined our</font>

485
00:21:33,750 --> 00:21:39,180
protocol by running<font color="#E5E5E5"> a very</font><font color="#CCCCCC"> large circuit</font>

486
00:21:36,780 --> 00:21:40,740
of 1 million multiplication gates with

487
00:21:39,180 --> 00:21:46,470
different depths you can see them here

488
00:21:40,740 --> 00:21:49,470
<font color="#E5E5E5">from 20 depths up to</font><font color="#CCCCCC"> 10,000 layers and</font>

489
00:21:46,470 --> 00:21:52,530
here<font color="#E5E5E5"> you can see we run it to different</font>

490
00:21:49,470 --> 00:21:55,980
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of parties from 3 up to 110 and</font>

491
00:21:52,530 --> 00:21:57,750
the execution time is<font color="#E5E5E5"> in milliseconds so</font>

492
00:21:55,980 --> 00:22:00,060
we'll highlight<font color="#E5E5E5"> two results as you can</font>

493
00:21:57,750 --> 00:22:05,250
see we can compute 1 million gates<font color="#E5E5E5"> with</font>

494
00:22:00,060 --> 00:22:07,830
<font color="#CCCCCC">dev</font><font color="#E5E5E5"> 20 and</font><font color="#CCCCCC"> 3 parties in only</font><font color="#E5E5E5"> 319</font>

495
00:22:05,250 --> 00:22:11,220
milliseconds<font color="#CCCCCC"> and we can compute</font>

496
00:22:07,830 --> 00:22:15,100
100 so 110 parties can compute 1 million

497
00:22:11,220 --> 00:22:18,010
<font color="#CCCCCC">gates in just about 8.2 seconds</font>

498
00:22:15,100 --> 00:22:21,879
so our protocol performs very well<font color="#CCCCCC"> this</font>

499
00:22:18,010 --> 00:22:23,919
<font color="#E5E5E5">is little dots</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> when the parties are</font>

500
00:22:21,880 --> 00:22:27,580
<font color="#CCCCCC">in the same region</font><font color="#E5E5E5"> what happens when we</font>

501
00:22:23,919 --> 00:22:29,610
moved<font color="#E5E5E5"> to one configuration so here</font><font color="#CCCCCC"> the</font>

502
00:22:27,580 --> 00:22:33,549
parties<font color="#E5E5E5"> are in three different regions</font>

503
00:22:29,610 --> 00:22:37,059
which<font color="#E5E5E5"> are very far away</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the world and</font>

504
00:22:33,549 --> 00:22:40,590
here we run<font color="#E5E5E5"> only</font><font color="#CCCCCC"> two circuit depth</font><font color="#E5E5E5"> and</font>

505
00:22:37,059 --> 00:22:43,780
up to<font color="#CCCCCC"> fifty parties</font><font color="#E5E5E5"> obviously here the</font>

506
00:22:40,590 --> 00:22:45,879
<font color="#E5E5E5">time is increased by much because</font>

507
00:22:43,780 --> 00:22:47,530
obviously<font color="#E5E5E5"> this kind of protocols for</font>

508
00:22:45,880 --> 00:22:51,059
<font color="#E5E5E5">that are based on secret sharing</font>

509
00:22:47,530 --> 00:22:54,280
requires many<font color="#CCCCCC"> rounds of</font><font color="#E5E5E5"> communication so</font>

510
00:22:51,059 --> 00:22:57,250
obviously<font color="#E5E5E5"> it's it's when the parties are</font>

511
00:22:54,280 --> 00:23:02,320
not<font color="#E5E5E5"> a closely located obviously these</font>

512
00:22:57,250 --> 00:23:04,960
<font color="#CCCCCC">two forms this</font><font color="#E5E5E5"> is not as good as</font><font color="#CCCCCC"> before</font>

513
00:23:02,320 --> 00:23:06,399
<font color="#CCCCCC">as you can see now</font><font color="#E5E5E5"> three parties can</font>

514
00:23:04,960 --> 00:23:09,010
compute one middle<font color="#E5E5E5"> gates in three</font>

515
00:23:06,400 --> 00:23:11,530
seconds not fit not before<font color="#E5E5E5"> it was 300</font>

516
00:23:09,010 --> 00:23:14,950
milliseconds and<font color="#CCCCCC"> fifty parties</font>

517
00:23:11,530 --> 00:23:18,700
<font color="#E5E5E5">contribute 1 million gates in 128</font>

518
00:23:14,950 --> 00:23:21,520
seconds before it was I think<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 5</font>

519
00:23:18,700 --> 00:23:23,230
seconds for<font color="#CCCCCC"> 50 parties but eventually as</font>

520
00:23:21,520 --> 00:23:28,120
<font color="#E5E5E5">you can see our protocol can perform</font>

521
00:23:23,230 --> 00:23:31,179
very well<font color="#CCCCCC"> in the in</font><font color="#E5E5E5"> in it could be from</font>

522
00:23:28,120 --> 00:23:34,178
very<font color="#E5E5E5"> well and</font><font color="#CCCCCC"> can be</font><font color="#E5E5E5"> used</font><font color="#CCCCCC"> to solve a</font>

523
00:23:31,179 --> 00:23:35,890
<font color="#CCCCCC">real-world application and with that I</font>

524
00:23:34,179 --> 00:23:36,730
will conclude my<font color="#E5E5E5"> talk thank you very</font>

525
00:23:35,890 --> 00:23:42,680
much

526
00:23:36,730 --> 00:23:42,680
[Applause]

