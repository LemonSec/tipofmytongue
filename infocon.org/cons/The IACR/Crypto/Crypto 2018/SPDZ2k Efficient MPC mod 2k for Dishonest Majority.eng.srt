1
00:00:06,479 --> 00:00:11,080
that's yeah that's<font color="#E5E5E5"> me</font>

2
00:00:08,530 --> 00:00:14,350
excellent<font color="#E5E5E5"> thank you so indeed I'm going</font>

3
00:00:11,080 --> 00:00:15,219
to talk about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> speeds</font><font color="#E5E5E5"> okay okay</font>

4
00:00:14,350 --> 00:00:19,539
<font color="#CCCCCC">excellent</font>

5
00:00:15,219 --> 00:00:21,279
thank<font color="#E5E5E5"> you okay and before I get</font><font color="#CCCCCC"> started</font>

6
00:00:19,539 --> 00:00:23,019
I would like to introduce what a

7
00:00:21,279 --> 00:00:24,820
multi-party computation is because it's

8
00:00:23,019 --> 00:00:26,939
the<font color="#E5E5E5"> first talk on the multi-party</font>

9
00:00:24,820 --> 00:00:29,529
computation is session

10
00:00:26,939 --> 00:00:31,300
it's<font color="#E5E5E5"> very quickly imagine as sending</font>

11
00:00:29,529 --> 00:00:33,070
<font color="#CCCCCC">when you have four parties at least</font><font color="#E5E5E5"> both</font>

12
00:00:31,300 --> 00:00:37,630
<font color="#E5E5E5">Charlie and Dave and each one of them</font>

13
00:00:33,070 --> 00:00:38,770
has a secret<font color="#CCCCCC"> x1 up to X 4 so one way in</font>

14
00:00:37,630 --> 00:00:40,450
<font color="#E5E5E5">the ones who can be the function on this</font>

15
00:00:38,770 --> 00:00:42,400
on the simple so one way<font color="#E5E5E5"> to do this is</font>

16
00:00:40,450 --> 00:00:43,630
everyone sends their inputs to a trusted

17
00:00:42,400 --> 00:00:45,460
party who<font color="#E5E5E5"> promises not to reveal</font>

18
00:00:43,630 --> 00:00:48,340
<font color="#E5E5E5">anything else but the actual output of</font>

19
00:00:45,460 --> 00:00:51,010
<font color="#E5E5E5">this function Z so what we want a</font>

20
00:00:48,340 --> 00:00:52,840
multi-party computation<font color="#E5E5E5"> is to</font><font color="#CCCCCC"> achieve</font>

21
00:00:51,010 --> 00:00:54,760
like the same sort<font color="#CCCCCC"> of security but</font>

22
00:00:52,840 --> 00:00:57,910
involving only<font color="#E5E5E5"> a communication between</font>

23
00:00:54,760 --> 00:00:59,739
the<font color="#E5E5E5"> parties</font><font color="#CCCCCC"> and there are several ways</font>

24
00:00:57,910 --> 00:01:01,029
<font color="#CCCCCC">to achieve this</font><font color="#E5E5E5"> it all depends on how do</font>

25
00:00:59,740 --> 00:01:02,410
you model the circuit and<font color="#E5E5E5"> what is the</font>

26
00:01:01,030 --> 00:01:05,590
security model that you want<font color="#CCCCCC"> to achieve</font>

27
00:01:02,410 --> 00:01:07,720
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> example if you model the circuit</font>

28
00:01:05,590 --> 00:01:09,159
as a circuit over<font color="#E5E5E5"> f2 so as a binary</font>

29
00:01:07,720 --> 00:01:11,649
circuit<font color="#E5E5E5"> then you can have different</font>

30
00:01:09,159 --> 00:01:13,659
<font color="#E5E5E5">approaches like garbled circuits or VMR</font>

31
00:01:11,649 --> 00:01:16,960
which is a generalization for a multiple

32
00:01:13,659 --> 00:01:18,939
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of parties G&W and so on now you</font>

33
00:01:16,960 --> 00:01:22,899
want<font color="#E5E5E5"> to model the circuit over a finite</font>

34
00:01:18,939 --> 00:01:25,029
field<font color="#E5E5E5"> of any characteristic</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can have</font>

35
00:01:22,899 --> 00:01:27,460
<font color="#E5E5E5">vgw you can have a protocol like Pedrosa</font>

36
00:01:25,030 --> 00:01:29,229
<font color="#E5E5E5">or speed or mass code that work in the</font>

37
00:01:27,460 --> 00:01:31,059
<font color="#E5E5E5">dishonest majority setting or you</font><font color="#CCCCCC"> can</font>

38
00:01:29,229 --> 00:01:32,829
also<font color="#E5E5E5"> have</font><font color="#CCCCCC"> another sort of protocols that</font>

39
00:01:31,060 --> 00:01:35,829
<font color="#CCCCCC">work in the onus</font><font color="#E5E5E5"> model setting based on</font>

40
00:01:32,829 --> 00:01:37,899
<font color="#CCCCCC">Sameer secret shared however all</font><font color="#E5E5E5"> these</font>

41
00:01:35,829 --> 00:01:40,119
protocols work in the setting<font color="#E5E5E5"> or field</font>

42
00:01:37,899 --> 00:01:42,189
because fields have many nice properties

43
00:01:40,119 --> 00:01:43,960
they are very nice when it comes to

44
00:01:42,189 --> 00:01:47,318
invertible elements when it comes to<font color="#CCCCCC"> a</font>

45
00:01:43,960 --> 00:01:49,568
<font color="#CCCCCC">property support random elements and few</font>

46
00:01:47,319 --> 00:01:52,060
works<font color="#E5E5E5"> actually address the case of</font>

47
00:01:49,569 --> 00:01:54,340
<font color="#E5E5E5">computation of a ring like</font><font color="#CCCCCC"> c 2k the</font>

48
00:01:52,060 --> 00:01:57,789
integers modulo 2 to the<font color="#CCCCCC"> K</font><font color="#E5E5E5"> and with</font>

49
00:01:54,340 --> 00:02:00,249
<font color="#CCCCCC">acting security why do we think</font><font color="#E5E5E5"> this is</font>

50
00:01:57,789 --> 00:02:01,810
<font color="#E5E5E5">an important case of study well the</font>

51
00:02:00,249 --> 00:02:04,449
first from the practical<font color="#E5E5E5"> point</font><font color="#CCCCCC"> of view</font>

52
00:02:01,810 --> 00:02:07,630
it's<font color="#CCCCCC"> very natural</font><font color="#E5E5E5"> because it's closer to</font>

53
00:02:04,450 --> 00:02:10,090
<font color="#E5E5E5">well</font><font color="#CCCCCC"> standard</font><font color="#E5E5E5"> CPUs that do so it's it's</font>

54
00:02:07,630 --> 00:02:12,459
<font color="#CCCCCC">very natural</font><font color="#E5E5E5"> to think that if</font><font color="#CCCCCC"> you do</font>

55
00:02:10,090 --> 00:02:14,590
<font color="#E5E5E5">computation model</font><font color="#CCCCCC"> 2 today for example 64</font>

56
00:02:12,459 --> 00:02:16,810
or 32<font color="#E5E5E5"> you're going to get an efficiency</font>

57
00:02:14,590 --> 00:02:18,560
<font color="#E5E5E5">improvement because</font><font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> need to</font>

58
00:02:16,810 --> 00:02:20,630
reduce modulo P

59
00:02:18,560 --> 00:02:22,730
example<font color="#CCCCCC"> two to the 64</font><font color="#E5E5E5"> plus 15 which</font><font color="#CCCCCC"> is a</font>

60
00:02:20,630 --> 00:02:26,510
prime do you need to do<font color="#E5E5E5"> this every time</font>

61
00:02:22,730 --> 00:02:27,738
that<font color="#E5E5E5"> you run in your computation also it</font>

62
00:02:26,510 --> 00:02:30,349
allows you if you already<font color="#E5E5E5"> have a program</font>

63
00:02:27,739 --> 00:02:32,660
<font color="#E5E5E5">really in C or in C++ for example that</font>

64
00:02:30,349 --> 00:02:34,340
allows you to<font color="#E5E5E5"> do some computation and</font>

65
00:02:32,660 --> 00:02:36,709
data types<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> a model 2 to the 32</font>

66
00:02:34,340 --> 00:02:38,239
<font color="#E5E5E5">or 2 to the 64 it should be easier to</font>

67
00:02:36,709 --> 00:02:40,099
compile<font color="#E5E5E5"> this type of program into a</font>

68
00:02:38,239 --> 00:02:42,500
circuit<font color="#E5E5E5"> if there is the modulus</font><font color="#CCCCCC"> it's</font>

69
00:02:40,099 --> 00:02:45,109
exactly the same and finally there are

70
00:02:42,500 --> 00:02:47,930
some<font color="#CCCCCC"> functions that are very natural to</font>

71
00:02:45,110 --> 00:02:50,660
implement a model<font color="#CCCCCC"> 2 today some power</font>

72
00:02:47,930 --> 00:02:51,890
like<font color="#CCCCCC"> bid the composition bit comparison</font>

73
00:02:50,660 --> 00:02:54,019
and so on if there are functions<font color="#CCCCCC"> that</font>

74
00:02:51,890 --> 00:02:55,640
work at the level<font color="#E5E5E5"> of bits so if you have</font>

75
00:02:54,019 --> 00:02:57,340
a protocol that works<font color="#E5E5E5"> in this setting it</font>

76
00:02:55,640 --> 00:03:00,339
would be very<font color="#E5E5E5"> natural to shift</font><font color="#CCCCCC"> these</font>

77
00:02:57,340 --> 00:03:02,630
functions<font color="#E5E5E5"> to a secure implementation</font>

78
00:03:00,340 --> 00:03:03,950
also<font color="#CCCCCC"> from the theoretical</font><font color="#E5E5E5"> point of</font><font color="#CCCCCC"> view</font>

79
00:03:02,630 --> 00:03:06,019
is a<font color="#E5E5E5"> very interesting problem</font><font color="#CCCCCC"> to study</font>

80
00:03:03,950 --> 00:03:07,369
<font color="#E5E5E5">so there is a gap in the theory of MPC</font>

81
00:03:06,019 --> 00:03:08,959
we know that we can compute absolutely

82
00:03:07,370 --> 00:03:11,480
<font color="#E5E5E5">everything because we have like every</font>

83
00:03:08,959 --> 00:03:14,000
circuit if it's a open field<font color="#CCCCCC"> it's</font>

84
00:03:11,480 --> 00:03:16,250
complete<font color="#E5E5E5"> but if you are trying to</font>

85
00:03:14,000 --> 00:03:17,780
emulate<font color="#CCCCCC"> like a circuit model to decay</font>

86
00:03:16,250 --> 00:03:19,640
using a circuit<font color="#CCCCCC"> mandra prime you will</font>

87
00:03:17,780 --> 00:03:21,739
<font color="#E5E5E5">always have this overhead of taking</font>

88
00:03:19,640 --> 00:03:24,140
model all<font color="#E5E5E5"> the time so what we like</font><font color="#CCCCCC"> to</font>

89
00:03:21,739 --> 00:03:26,269
avoid<font color="#E5E5E5"> is that will let to show</font><font color="#CCCCCC"> it's a</font>

90
00:03:24,140 --> 00:03:28,608
protocol<font color="#CCCCCC"> that chips this without this</font>

91
00:03:26,269 --> 00:03:29,660
overhead<font color="#E5E5E5"> and of course just</font><font color="#CCCCCC"> for fun is</font>

92
00:03:28,609 --> 00:03:31,459
<font color="#CCCCCC">like an interesting</font><font color="#E5E5E5"> problem to take a</font>

93
00:03:29,660 --> 00:03:33,140
look at these rings are<font color="#CCCCCC"> very strange</font>

94
00:03:31,459 --> 00:03:34,579
compared to the fields<font color="#E5E5E5"> so it's like a</font>

95
00:03:33,140 --> 00:03:37,399
lot<font color="#CCCCCC"> of interesting properties arises in</font>

96
00:03:34,579 --> 00:03:38,840
this world<font color="#CCCCCC"> and there are</font><font color="#E5E5E5"> some works in</font>

97
00:03:37,400 --> 00:03:39,650
this direction<font color="#E5E5E5"> we are not the person</font>

98
00:03:38,840 --> 00:03:42,470
taking<font color="#E5E5E5"> a look at this</font>

99
00:03:39,650 --> 00:03:44,450
so a criminal role in<font color="#CCCCCC"> Europe 2003</font><font color="#E5E5E5"> they</font>

100
00:03:42,470 --> 00:03:45,799
show a<font color="#E5E5E5"> possibility result that this is</font>

101
00:03:44,450 --> 00:03:48,888
possible<font color="#E5E5E5"> in the setting of a nice</font>

102
00:03:45,799 --> 00:03:50,209
majority<font color="#E5E5E5"> a developer protocol using only</font>

103
00:03:48,889 --> 00:03:52,970
<font color="#E5E5E5">black box operations of the</font><font color="#CCCCCC"> Ring</font><font color="#E5E5E5"> goes</font>

104
00:03:50,209 --> 00:03:55,790
only<font color="#E5E5E5"> addition and multiplication we have</font>

105
00:03:52,970 --> 00:03:58,880
<font color="#CCCCCC">also booked an overall in SRX a 2008</font><font color="#E5E5E5"> and</font>

106
00:03:55,790 --> 00:04:00,500
a key role in<font color="#E5E5E5"> CES 2016 who use</font>

107
00:03:58,880 --> 00:04:01,760
<font color="#CCCCCC">replicated secret sharing</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is not</font>

108
00:04:00,500 --> 00:04:03,380
<font color="#CCCCCC">dependent on the offer filtered</font>

109
00:04:01,760 --> 00:04:05,600
structure<font color="#E5E5E5"> to get computation</font><font color="#CCCCCC"> over this</font>

110
00:04:03,380 --> 00:04:07,069
field however it<font color="#E5E5E5"> doesn't scale</font><font color="#CCCCCC"> to work</font>

111
00:04:05,600 --> 00:04:09,500
because<font color="#E5E5E5"> it's precisely is replicated</font>

112
00:04:07,069 --> 00:04:12,589
<font color="#E5E5E5">across sharing and it only has accepts</font>

113
00:04:09,500 --> 00:04:14,480
<font color="#CCCCCC">one corruption finally there is a work</font>

114
00:04:12,590 --> 00:04:17,389
<font color="#E5E5E5">that will be</font><font color="#CCCCCC"> presented after</font><font color="#E5E5E5"> mine which</font>

115
00:04:14,480 --> 00:04:18,858
is<font color="#E5E5E5"> a compiler that</font><font color="#CCCCCC"> takes a possibility</font>

116
00:04:17,389 --> 00:04:20,090
of<font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> that works over any ring and</font>

117
00:04:18,858 --> 00:04:22,219
compiles it in<font color="#E5E5E5"> an active one</font>

118
00:04:20,089 --> 00:04:24,260
so that is<font color="#CCCCCC"> Suites perfectly in this</font>

119
00:04:22,220 --> 00:04:26,030
setting<font color="#E5E5E5"> the problem is that the number</font>

120
00:04:24,260 --> 00:04:26,510
of corruptions<font color="#E5E5E5"> gets a lower down body</font>

121
00:04:26,030 --> 00:04:28,880
like

122
00:04:26,510 --> 00:04:32,900
square root<font color="#CCCCCC"> sort of so it's not like a</font>

123
00:04:28,880 --> 00:04:34,640
very<font color="#CCCCCC"> completed result in that sense so</font>

124
00:04:32,900 --> 00:04:36,229
why is<font color="#E5E5E5"> it so difficult to</font><font color="#CCCCCC"> develop a</font>

125
00:04:34,640 --> 00:04:38,539
<font color="#E5E5E5">protocol in</font><font color="#CCCCCC"> this setting well many</font>

126
00:04:36,230 --> 00:04:40,790
practical solutions of this<font color="#CCCCCC"> Honus</font>

127
00:04:38,540 --> 00:04:42,500
majority<font color="#CCCCCC"> MPC require the use of message</font>

128
00:04:40,790 --> 00:04:45,080
authentication codes<font color="#E5E5E5"> to make sure that</font>

129
00:04:42,500 --> 00:04:47,000
everything is<font color="#E5E5E5"> correct and these things</font>

130
00:04:45,080 --> 00:04:49,219
work very<font color="#E5E5E5"> nicely over fields but when</font>

131
00:04:47,000 --> 00:04:50,360
you take them to this ring setting you

132
00:04:49,220 --> 00:04:51,890
<font color="#E5E5E5">have a lot of</font><font color="#CCCCCC"> issues because you have</font>

133
00:04:50,360 --> 00:04:53,480
like zero divisors<font color="#CCCCCC"> so numbers that</font>

134
00:04:51,890 --> 00:04:54,560
multiply together gives you<font color="#CCCCCC"> surrender</font>

135
00:04:53,480 --> 00:04:56,090
which number is<font color="#CCCCCC"> nonzero</font>

136
00:04:54,560 --> 00:04:58,490
you have<font color="#CCCCCC"> nothing virtual elements</font><font color="#E5E5E5"> which</font>

137
00:04:56,090 --> 00:04:59,900
is a very annoying issue and you also

138
00:04:58,490 --> 00:05:01,340
have this interesting<font color="#E5E5E5"> property which is</font>

139
00:04:59,900 --> 00:05:02,989
<font color="#E5E5E5">that taking the dot product is not a</font>

140
00:05:01,340 --> 00:05:04,039
<font color="#CCCCCC">true</font><font color="#E5E5E5"> universal hash function which is</font>

141
00:05:02,990 --> 00:05:06,620
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is very</font><font color="#E5E5E5"> standard</font><font color="#CCCCCC"> robot</font>

142
00:05:04,040 --> 00:05:08,090
<font color="#CCCCCC">fields and we use all the time</font><font color="#E5E5E5"> so it's</font>

143
00:05:06,620 --> 00:05:09,650
<font color="#E5E5E5">been an open problem due to these</font><font color="#CCCCCC"> Hey</font>

144
00:05:08,090 --> 00:05:12,140
<font color="#E5E5E5">kind of issues of working over this ring</font>

145
00:05:09,650 --> 00:05:15,049
<font color="#E5E5E5">to develop an efficient homomorphic</font><font color="#CCCCCC"> the</font>

146
00:05:12,140 --> 00:05:18,830
authentication scheme that is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> morphic</font>

147
00:05:15,050 --> 00:05:19,310
of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> 7 what do we achieve in</font><font color="#E5E5E5"> this</font>

148
00:05:18,830 --> 00:05:20,900
work

149
00:05:19,310 --> 00:05:23,270
well it's precisely this question<font color="#CCCCCC"> I just</font>

150
00:05:20,900 --> 00:05:25,549
named<font color="#E5E5E5"> so</font><font color="#CCCCCC"> a we develop a new additively</font>

151
00:05:23,270 --> 00:05:29,060
homomorphic authentication scheme over

152
00:05:25,550 --> 00:05:30,530
<font color="#E5E5E5">these ring the solution is actually very</font>

153
00:05:29,060 --> 00:05:32,240
simple<font color="#E5E5E5"> when it comes to number theoretic</font>

154
00:05:30,530 --> 00:05:33,979
tricks so we use very elementary number

155
00:05:32,240 --> 00:05:36,770
theory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also it's quite efficient</font>

156
00:05:33,980 --> 00:05:38,300
<font color="#E5E5E5">which is a good feature and we also</font>

157
00:05:36,770 --> 00:05:39,919
<font color="#E5E5E5">perform fine grained analysis</font><font color="#CCCCCC"> at the</font>

158
00:05:38,300 --> 00:05:43,100
<font color="#E5E5E5">badge max checking as I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> show</font>

159
00:05:39,920 --> 00:05:45,410
later<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the slides we also show how to</font>

160
00:05:43,100 --> 00:05:46,670
generate triples our<font color="#E5E5E5"> computation will</font><font color="#CCCCCC"> be</font>

161
00:05:45,410 --> 00:05:48,560
in the<font color="#E5E5E5"> proper sizing</font><font color="#CCCCCC"> model so we will</font>

162
00:05:46,670 --> 00:05:50,630
triple<font color="#CCCCCC"> to handle the multiplication</font>

163
00:05:48,560 --> 00:05:53,300
gates we show how to generate those<font color="#E5E5E5"> and</font>

164
00:05:50,630 --> 00:05:54,950
it's roughly twice<font color="#CCCCCC"> involves roll it</font>

165
00:05:53,300 --> 00:05:56,420
<font color="#E5E5E5">twice the communication of mascot if</font>

166
00:05:54,950 --> 00:05:59,750
<font color="#E5E5E5">you're familiar with the mascot protocol</font>

167
00:05:56,420 --> 00:06:02,480
for<font color="#E5E5E5"> this honest majority and with these</font>

168
00:05:59,750 --> 00:06:04,160
<font color="#E5E5E5">two tools and also another like small</font>

169
00:06:02,480 --> 00:06:06,170
tools that we<font color="#E5E5E5"> need to use we can develop</font>

170
00:06:04,160 --> 00:06:08,240
a protocol for<font color="#E5E5E5"> the silent majority</font><font color="#CCCCCC"> MPC</font>

171
00:06:06,170 --> 00:06:10,310
<font color="#E5E5E5">over this ring our protocol is quite</font>

172
00:06:08,240 --> 00:06:12,320
efficient<font color="#E5E5E5"> involves asymptotically the</font>

173
00:06:10,310 --> 00:06:13,730
same operations that the parties will do

174
00:06:12,320 --> 00:06:17,480
<font color="#E5E5E5">if they are competing the circuit</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

175
00:06:13,730 --> 00:06:19,280
clear so that's a nice<font color="#CCCCCC"> feature and it's</font>

176
00:06:17,480 --> 00:06:20,360
also a it's also expected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be quite</font>

177
00:06:19,280 --> 00:06:22,130
efficient because<font color="#CCCCCC"> we are doing our</font>

178
00:06:20,360 --> 00:06:24,530
<font color="#CCCCCC">computational</font><font color="#E5E5E5"> computations modulo</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> to</font>

179
00:06:22,130 --> 00:06:28,100
<font color="#E5E5E5">the 32</font><font color="#CCCCCC"> or two to</font><font color="#E5E5E5"> the 64 used to cite an</font>

180
00:06:24,530 --> 00:06:29,419
example<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so that's roughly the</font>

181
00:06:28,100 --> 00:06:31,820
<font color="#E5E5E5">introduction of what we achieve I'm</font>

182
00:06:29,420 --> 00:06:33,230
going to show how we<font color="#E5E5E5"> did it but before</font>

183
00:06:31,820 --> 00:06:34,520
that I<font color="#E5E5E5"> need to start with speeds which</font>

184
00:06:33,230 --> 00:06:36,830
is the protocol where we base our

185
00:06:34,520 --> 00:06:38,599
<font color="#E5E5E5">protocol on top so this protocol is a</font>

186
00:06:36,830 --> 00:06:39,599
protocol for<font color="#CCCCCC"> this honest majority and</font><font color="#E5E5E5"> it</font>

187
00:06:38,600 --> 00:06:42,360
works over<font color="#E5E5E5"> fields</font>

188
00:06:39,600 --> 00:06:44,730
and basically it<font color="#E5E5E5"> goes as follows so the</font>

189
00:06:42,360 --> 00:06:47,700
key ingredient of the<font color="#CCCCCC"> spits protocol is</font>

190
00:06:44,730 --> 00:06:49,950
something that we<font color="#E5E5E5"> call</font><font color="#CCCCCC"> the secret</font>

191
00:06:47,700 --> 00:06:52,349
sharing so<font color="#CCCCCC"> to secret</font><font color="#E5E5E5"> share</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> value X</font>

192
00:06:49,950 --> 00:06:54,630
where X is<font color="#E5E5E5"> an element of a field what we</font>

193
00:06:52,350 --> 00:06:57,270
do is that<font color="#E5E5E5"> each part</font><font color="#CCCCCC"> will have a share</font><font color="#E5E5E5"> X</font>

194
00:06:54,630 --> 00:06:59,040
<font color="#E5E5E5">I such that the sum of this excise gives</font>

195
00:06:57,270 --> 00:07:02,669
you X so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> an additive sharing of</font>

196
00:06:59,040 --> 00:07:04,020
X so if no more than n minus<font color="#CCCCCC"> 1 part is</font>

197
00:07:02,670 --> 00:07:05,910
<font color="#E5E5E5">get together they won't learn anything</font>

198
00:07:04,020 --> 00:07:09,180
about X<font color="#E5E5E5"> only they actually have all the</font>

199
00:07:05,910 --> 00:07:11,910
<font color="#E5E5E5">shares but on top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this we also have</font>

200
00:07:09,180 --> 00:07:14,940
an authentication mechanism<font color="#E5E5E5"> by means of</font>

201
00:07:11,910 --> 00:07:17,340
<font color="#E5E5E5">this key alpha so</font><font color="#CCCCCC"> we have alpha which is</font>

202
00:07:14,940 --> 00:07:19,380
a random<font color="#E5E5E5"> global key and they have also</font>

203
00:07:17,340 --> 00:07:21,479
additive<font color="#E5E5E5"> shares of</font><font color="#CCCCCC"> this random global</font>

204
00:07:19,380 --> 00:07:23,760
key<font color="#CCCCCC"> and finally they</font><font color="#E5E5E5"> have also additive</font>

205
00:07:21,480 --> 00:07:25,410
shares of the<font color="#E5E5E5"> attack of X the</font><font color="#CCCCCC"> tag is</font>

206
00:07:23,760 --> 00:07:26,700
alpha times<font color="#E5E5E5"> X this will allow the</font>

207
00:07:25,410 --> 00:07:28,940
parties to<font color="#CCCCCC"> make sure that when something</font>

208
00:07:26,700 --> 00:07:31,830
is open this value is indeed correct

209
00:07:28,940 --> 00:07:33,660
<font color="#E5E5E5">something important about</font><font color="#CCCCCC"> this scheme is</font>

210
00:07:31,830 --> 00:07:35,969
that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> linear in the sense that if</font>

211
00:07:33,660 --> 00:07:37,260
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> secrecy</font><font color="#E5E5E5"> of executions of Y and</font>

212
00:07:35,970 --> 00:07:38,940
you want to<font color="#E5E5E5"> compute the secret shares of</font>

213
00:07:37,260 --> 00:07:40,560
<font color="#E5E5E5">X plus y it's just a matter of adding</font>

214
00:07:38,940 --> 00:07:42,120
things locally except the<font color="#E5E5E5"> map key</font>

215
00:07:40,560 --> 00:07:43,950
because the map key is global<font color="#CCCCCC"> but you</font>

216
00:07:42,120 --> 00:07:44,910
add the shares of the<font color="#E5E5E5"> tag and the shares</font>

217
00:07:43,950 --> 00:07:46,530
of the value<font color="#E5E5E5"> and that will give you</font>

218
00:07:44,910 --> 00:07:48,270
shares<font color="#E5E5E5"> of the sound the same with</font>

219
00:07:46,530 --> 00:07:50,099
multiplication<font color="#CCCCCC"> by constant and the same</font>

220
00:07:48,270 --> 00:07:51,419
<font color="#E5E5E5">with a addition</font><font color="#CCCCCC"> bit concept you</font><font color="#E5E5E5"> can do</font>

221
00:07:50,100 --> 00:07:52,860
these<font color="#E5E5E5"> operations locally which is</font>

222
00:07:51,420 --> 00:07:55,770
already<font color="#E5E5E5"> a nice feature</font><font color="#CCCCCC"> of the of the</font>

223
00:07:52,860 --> 00:07:57,570
<font color="#E5E5E5">secret school now once you</font><font color="#CCCCCC"> have this</font>

224
00:07:55,770 --> 00:07:59,909
tool getting<font color="#CCCCCC"> that computation in the</font>

225
00:07:57,570 --> 00:08:01,560
processing model<font color="#E5E5E5"> is not so hard so the</font>

226
00:07:59,910 --> 00:08:03,420
input phase you<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> prepare</font><font color="#E5E5E5"> some</font>

227
00:08:01,560 --> 00:08:06,120
values so for<font color="#CCCCCC"> the input phase you use</font>

228
00:08:03,420 --> 00:08:10,560
random<font color="#E5E5E5"> values RI such that party I knows</font>

229
00:08:06,120 --> 00:08:12,300
the<font color="#CCCCCC"> value R I and our is</font><font color="#E5E5E5"> secured and you</font>

230
00:08:10,560 --> 00:08:14,400
open the value so party I will<font color="#CCCCCC"> open the</font>

231
00:08:12,300 --> 00:08:16,890
value<font color="#E5E5E5"> X I minus RI which is</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> because</font>

232
00:08:14,400 --> 00:08:19,799
R<font color="#E5E5E5"> is random so it in so it masks</font><font color="#CCCCCC"> the</font>

233
00:08:16,890 --> 00:08:21,000
input X I<font color="#E5E5E5"> and then they do this a local</font>

234
00:08:19,800 --> 00:08:22,320
operation because of<font color="#CCCCCC"> the properties of</font>

235
00:08:21,000 --> 00:08:25,020
the secret sharing scheme to get shares

236
00:08:22,320 --> 00:08:27,330
of X I so that<font color="#E5E5E5"> secret shares the</font><font color="#CCCCCC"> inputs</font>

237
00:08:25,020 --> 00:08:27,930
of<font color="#E5E5E5"> each party then</font><font color="#CCCCCC"> you run through the</font>

238
00:08:27,330 --> 00:08:29,729
circuit

239
00:08:27,930 --> 00:08:31,440
computing gate by gate<font color="#CCCCCC"> addition gates</font>

240
00:08:29,730 --> 00:08:33,599
<font color="#E5E5E5">are for free because the scheme is</font>

241
00:08:31,440 --> 00:08:35,789
linear and multiplication gates<font color="#E5E5E5"> are</font>

242
00:08:33,599 --> 00:08:39,390
handled by mean by means of this nice

243
00:08:35,789 --> 00:08:41,130
trick<font color="#E5E5E5"> the trick which is if you open X</font>

244
00:08:39,390 --> 00:08:42,780
<font color="#CCCCCC">minus if you have a triple which is</font>

245
00:08:41,130 --> 00:08:45,480
<font color="#E5E5E5">processed and we secret shared</font>

246
00:08:42,780 --> 00:08:47,459
<font color="#CCCCCC">ABC where C is</font><font color="#E5E5E5"> equal to in turn</font><font color="#CCCCCC"> C you</font>

247
00:08:45,480 --> 00:08:49,050
can<font color="#E5E5E5"> just hop</font><font color="#CCCCCC"> an X minus a open</font><font color="#E5E5E5"> Y minus B</font>

248
00:08:47,460 --> 00:08:51,440
this<font color="#CCCCCC"> doesn't reveal anything about the</font><font color="#E5E5E5"> x</font>

249
00:08:49,050 --> 00:08:54,109
and y and then you can do you can

250
00:08:51,440 --> 00:08:56,480
<font color="#CCCCCC">from these a fine operation for free</font>

251
00:08:54,110 --> 00:08:58,330
<font color="#E5E5E5">using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> properties of the</font><font color="#CCCCCC"> linearity of</font>

252
00:08:56,480 --> 00:09:01,910
the<font color="#CCCCCC"> allah near secret sharing scheme</font>

253
00:08:58,330 --> 00:09:04,280
<font color="#E5E5E5">finally you need to open</font><font color="#CCCCCC"> things do as I</font>

254
00:09:01,910 --> 00:09:06,020
said<font color="#E5E5E5"> here you have to open</font><font color="#CCCCCC"> X I -</font><font color="#E5E5E5"> Arad</font>

255
00:09:04,280 --> 00:09:07,339
you need to open<font color="#E5E5E5"> X</font><font color="#CCCCCC"> - I</font><font color="#E5E5E5"> and at the end</font>

256
00:09:06,020 --> 00:09:08,180
<font color="#E5E5E5">you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to open the output also because</font>

257
00:09:07,340 --> 00:09:09,920
you want to<font color="#E5E5E5"> get the output of the</font>

258
00:09:08,180 --> 00:09:11,209
<font color="#E5E5E5">computation</font><font color="#CCCCCC"> so what you do is that</font>

259
00:09:09,920 --> 00:09:13,099
essentially each party announced<font color="#E5E5E5"> their</font>

260
00:09:11,210 --> 00:09:14,840
shared<font color="#E5E5E5"> this is X 1 this is X</font><font color="#CCCCCC"> 2 this</font><font color="#E5E5E5"> is 3</font>

261
00:09:13,100 --> 00:09:16,790
this is<font color="#E5E5E5"> X 4 and then they</font><font color="#CCCCCC"> just take</font><font color="#E5E5E5"> the</font>

262
00:09:14,840 --> 00:09:19,070
salmon<font color="#CCCCCC"> that's X</font><font color="#E5E5E5"> because that's how X was</font>

263
00:09:16,790 --> 00:09:21,020
constructed by something<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the shares</font>

264
00:09:19,070 --> 00:09:23,480
now the problem is<font color="#E5E5E5"> that Alice can just</font>

265
00:09:21,020 --> 00:09:25,569
choose to lie about its share you can

266
00:09:23,480 --> 00:09:27,950
say my share is<font color="#CCCCCC"> not X 1 by X</font><font color="#E5E5E5"> 1 plus 1 so</font>

267
00:09:25,570 --> 00:09:29,600
<font color="#CCCCCC">that</font><font color="#E5E5E5"> additive error is going to be</font>

268
00:09:27,950 --> 00:09:32,090
<font color="#CCCCCC">reflected in the output at the very end</font>

269
00:09:29,600 --> 00:09:35,540
<font color="#E5E5E5">and we don't want that so to avoid</font><font color="#CCCCCC"> these</font>

270
00:09:32,090 --> 00:09:38,480
<font color="#E5E5E5">kind of attacks we actually show we</font>

271
00:09:35,540 --> 00:09:41,660
actually<font color="#CCCCCC"> use the</font><font color="#E5E5E5"> tags that were directly</font>

272
00:09:38,480 --> 00:09:43,370
that were used at the<font color="#E5E5E5"> beginning so party</font>

273
00:09:41,660 --> 00:09:45,709
one is going to<font color="#E5E5E5"> compute C 1 equal to the</font>

274
00:09:43,370 --> 00:09:48,170
<font color="#E5E5E5">shared of the tag - the share</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> Mac</font>

275
00:09:45,710 --> 00:09:50,000
key times the<font color="#E5E5E5"> value that was opened the</font>

276
00:09:48,170 --> 00:09:52,459
same with Z<font color="#E5E5E5"> 2 the same with xiii the</font>

277
00:09:50,000 --> 00:09:54,890
same with c4<font color="#CCCCCC"> and they're</font><font color="#E5E5E5"> going to</font>

278
00:09:52,460 --> 00:09:57,080
announce<font color="#E5E5E5"> these values</font><font color="#CCCCCC"> okay I</font><font color="#E5E5E5"> didn't</font>

279
00:09:54,890 --> 00:09:58,340
<font color="#E5E5E5">mention this in the</font><font color="#CCCCCC"> actio commit before</font>

280
00:09:57,080 --> 00:10:02,450
opening so<font color="#CCCCCC"> that we know</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> all the</font>

281
00:09:58,340 --> 00:10:03,680
shares are unrelated<font color="#E5E5E5"> and then once they</font>

282
00:10:02,450 --> 00:10:05,810
open this<font color="#E5E5E5"> value they check that the</font>

283
00:10:03,680 --> 00:10:07,219
<font color="#CCCCCC">Edition</font><font color="#E5E5E5"> gives you 0 this should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the</font>

284
00:10:05,810 --> 00:10:09,140
case because<font color="#CCCCCC"> if you think</font><font color="#E5E5E5"> about it the</font>

285
00:10:07,220 --> 00:10:11,300
sum of the<font color="#CCCCCC"> mis</font><font color="#E5E5E5"> is alpha times X by</font>

286
00:10:09,140 --> 00:10:13,670
construction<font color="#E5E5E5"> and the sums of the alphas</font>

287
00:10:11,300 --> 00:10:15,530
gives you alpha<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the same mix in</font>

288
00:10:13,670 --> 00:10:17,270
all the operations<font color="#CCCCCC"> so it should</font><font color="#E5E5E5"> be alpha</font>

289
00:10:15,530 --> 00:10:19,579
<font color="#E5E5E5">times X minus alpha</font><font color="#CCCCCC"> times X and</font><font color="#E5E5E5"> that</font>

290
00:10:17,270 --> 00:10:21,680
should give you 0 now what happens if

291
00:10:19,580 --> 00:10:24,080
the<font color="#E5E5E5"> adversary actually tries to cheat we</font>

292
00:10:21,680 --> 00:10:25,760
can show the<font color="#CCCCCC"> following so if an</font>

293
00:10:24,080 --> 00:10:27,530
adversary tries to open<font color="#E5E5E5"> an X prime</font><font color="#CCCCCC"> that</font>

294
00:10:25,760 --> 00:10:29,780
<font color="#E5E5E5">is not X so X plus Delta enter this is</font>

295
00:10:27,530 --> 00:10:34,010
an error and<font color="#E5E5E5"> also tries to lie about</font>

296
00:10:29,780 --> 00:10:35,959
<font color="#CCCCCC">these commitments about</font><font color="#E5E5E5"> the max Z then</font>

297
00:10:34,010 --> 00:10:37,910
we<font color="#CCCCCC"> can show the dead birds I know</font><font color="#E5E5E5"> a big</font>

298
00:10:35,960 --> 00:10:40,220
Delta<font color="#E5E5E5"> and a small Delta such that Delta</font>

299
00:10:37,910 --> 00:10:41,930
<font color="#CCCCCC">x alpha</font><font color="#E5E5E5"> gives you equal it gives you a</font>

300
00:10:40,220 --> 00:10:43,850
big<font color="#E5E5E5"> Delta this can be seen as a</font>

301
00:10:41,930 --> 00:10:46,579
supporter<font color="#E5E5E5"> e to the actually mark</font>

302
00:10:43,850 --> 00:10:48,200
<font color="#CCCCCC">underlined Mac skin and then you can</font>

303
00:10:46,580 --> 00:10:50,510
solve<font color="#CCCCCC"> for alpha you can</font><font color="#E5E5E5"> take the inverse</font>

304
00:10:48,200 --> 00:10:52,240
<font color="#CCCCCC">of Delta and this gives you the Delta</font><font color="#E5E5E5"> is</font>

305
00:10:50,510 --> 00:10:54,589
equal to Delta inverse times big Delta

306
00:10:52,240 --> 00:10:55,670
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> adversary knows alpha because</font>

307
00:10:54,589 --> 00:10:57,800
adversary knows everything on the right

308
00:10:55,670 --> 00:10:59,339
side and since alpha was chosen<font color="#CCCCCC"> in a</font>

309
00:10:57,800 --> 00:11:01,530
<font color="#CCCCCC">uniformly random the</font>

310
00:10:59,340 --> 00:11:03,030
this happening is<font color="#CCCCCC"> 1 divided by</font><font color="#E5E5E5"> the size</font>

311
00:11:01,530 --> 00:11:04,350
<font color="#E5E5E5">of the field</font><font color="#CCCCCC"> and if the field is large</font>

312
00:11:03,030 --> 00:11:04,980
enough then we can show<font color="#CCCCCC"> that this is</font>

313
00:11:04,350 --> 00:11:06,300
negligible

314
00:11:04,980 --> 00:11:08,100
which is essentially the security

315
00:11:06,300 --> 00:11:10,589
argument speeds in mascot<font color="#E5E5E5"> and other</font>

316
00:11:08,100 --> 00:11:12,480
<font color="#E5E5E5">protocols of similar nature</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> want you</font>

317
00:11:10,590 --> 00:11:14,670
to note is that this<font color="#E5E5E5"> doesn't translate</font>

318
00:11:12,480 --> 00:11:16,410
directly on the setting of<font color="#CCCCCC"> moderator to</font>

319
00:11:14,670 --> 00:11:18,180
the<font color="#CCCCCC"> KA of</font><font color="#E5E5E5"> integers</font><font color="#CCCCCC"> mother Ricci okay</font>

320
00:11:16,410 --> 00:11:20,280
simply because we cannot<font color="#E5E5E5"> take the</font>

321
00:11:18,180 --> 00:11:22,709
inverse of Delta Delta may not be

322
00:11:20,280 --> 00:11:24,030
<font color="#E5E5E5">invertible in fact we cannot argue that</font>

323
00:11:22,710 --> 00:11:25,500
<font color="#E5E5E5">this equation is satisfied with</font><font color="#CCCCCC"> no</font>

324
00:11:24,030 --> 00:11:27,150
probability<font color="#E5E5E5"> because it can be satisfied</font>

325
00:11:25,500 --> 00:11:29,400
with high probability<font color="#CCCCCC"> a small</font><font color="#E5E5E5"> Delta for</font>

326
00:11:27,150 --> 00:11:31,020
example is 2 to<font color="#E5E5E5"> the K minus 1 what is</font>

327
00:11:29,400 --> 00:11:32,760
<font color="#E5E5E5">the probability</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> something times 2</font>

328
00:11:31,020 --> 00:11:35,010
to the<font color="#E5E5E5"> K minus 1 gives you 0 if big</font>

329
00:11:32,760 --> 00:11:37,350
Delta<font color="#CCCCCC"> is 0</font><font color="#E5E5E5"> that's something that our</font>

330
00:11:35,010 --> 00:11:38,670
family<font color="#E5E5E5"> needs to be even so it's 1/2</font>

331
00:11:37,350 --> 00:11:40,410
probability of this equation<font color="#E5E5E5"> being</font>

332
00:11:38,670 --> 00:11:44,130
satisfied so the adversary<font color="#E5E5E5"> can cheat</font>

333
00:11:40,410 --> 00:11:46,939
with high probability so what do we<font color="#E5E5E5"> do</font>

334
00:11:44,130 --> 00:11:51,720
in<font color="#CCCCCC"> speeds to K to overcome this issue</font>

335
00:11:46,940 --> 00:11:54,090
this sentence hopefully summarizes 0 so

336
00:11:51,720 --> 00:11:56,790
the computation is going to be done in a

337
00:11:54,090 --> 00:11:58,650
larger ring in<font color="#E5E5E5"> C 2 to the K + s for</font>

338
00:11:56,790 --> 00:12:01,170
specific parameters thinks of think of K

339
00:11:58,650 --> 00:12:02,370
as 64 and<font color="#CCCCCC"> s as another 64 so we're</font><font color="#E5E5E5"> going</font>

340
00:12:01,170 --> 00:12:03,180
<font color="#E5E5E5">to do the computation</font><font color="#CCCCCC"> woodruf 2 to the</font>

341
00:12:02,370 --> 00:12:05,460
128

342
00:12:03,180 --> 00:12:07,229
<font color="#E5E5E5">however the correctness is not going to</font>

343
00:12:05,460 --> 00:12:08,640
be<font color="#E5E5E5"> current it on this modulus is going</font>

344
00:12:07,230 --> 00:12:12,410
to be<font color="#E5E5E5"> guaranteed</font><font color="#CCCCCC"> and a smaller modulus</font>

345
00:12:08,640 --> 00:12:15,240
say modulo 2064<font color="#E5E5E5"> so that's the whole</font>

346
00:12:12,410 --> 00:12:17,390
approach that would<font color="#E5E5E5"> take a more</font>

347
00:12:15,240 --> 00:12:21,180
precisely so to share<font color="#CCCCCC"> a value that is</font><font color="#E5E5E5"> a</font>

348
00:12:17,390 --> 00:12:23,010
in<font color="#CCCCCC"> situ to the K what we do is that we</font>

349
00:12:21,180 --> 00:12:25,439
have<font color="#E5E5E5"> just</font><font color="#CCCCCC"> like before</font><font color="#E5E5E5"> additive shares</font>

350
00:12:23,010 --> 00:12:25,980
but additive shares not of X but of X

351
00:12:25,440 --> 00:12:28,320
<font color="#CCCCCC">Prime</font>

352
00:12:25,980 --> 00:12:30,390
so we had additive shares of a value X

353
00:12:28,320 --> 00:12:33,240
<font color="#CCCCCC">Prime these</font><font color="#E5E5E5"> shares are modular</font><font color="#CCCCCC"> 2 to the</font>

354
00:12:30,390 --> 00:12:35,520
<font color="#E5E5E5">K + s but we</font><font color="#CCCCCC"> actually care only about</font>

355
00:12:33,240 --> 00:12:37,350
the lower K bits so<font color="#E5E5E5"> we know that</font><font color="#CCCCCC"> X prime</font>

356
00:12:35,520 --> 00:12:40,290
<font color="#CCCCCC">is going to</font><font color="#E5E5E5"> be congruent to X modulo 2</font>

357
00:12:37,350 --> 00:12:41,580
to the K naught 2 to the<font color="#E5E5E5"> K</font><font color="#CCCCCC"> +</font><font color="#E5E5E5"> s other</font>

358
00:12:40,290 --> 00:12:43,319
than that is essentially the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> so we</font>

359
00:12:41,580 --> 00:12:45,600
<font color="#CCCCCC">have shares of the map</font><font color="#E5E5E5"> key alpha a</font>

360
00:12:43,320 --> 00:12:48,300
notice<font color="#E5E5E5"> that alpha</font><font color="#CCCCCC"> is in 2 to the S</font>

361
00:12:45,600 --> 00:12:50,100
<font color="#E5E5E5">naught</font><font color="#CCCCCC"> to the K + s we as we will</font><font color="#E5E5E5"> show</font>

362
00:12:48,300 --> 00:12:52,979
in a minute<font color="#CCCCCC"> this is enough for purposes</font>

363
00:12:50,100 --> 00:12:53,730
<font color="#E5E5E5">and also we have shares of the tag just</font>

364
00:12:52,980 --> 00:12:55,110
<font color="#E5E5E5">like before</font>

365
00:12:53,730 --> 00:12:58,410
so<font color="#E5E5E5"> essentially everything is the same</font>

366
00:12:55,110 --> 00:13:00,150
<font color="#E5E5E5">but we</font><font color="#CCCCCC"> are just considering the</font><font color="#E5E5E5"> size of</font>

367
00:12:58,410 --> 00:13:02,360
<font color="#E5E5E5">the share value</font><font color="#CCCCCC"> s V as being smaller as</font>

368
00:13:00,150 --> 00:13:05,069
<font color="#CCCCCC">being 2 to the</font><font color="#E5E5E5"> K naught 2 to the K + s</font>

369
00:13:02,360 --> 00:13:07,110
why is<font color="#CCCCCC"> that this</font><font color="#E5E5E5"> say sorry this is the</font>

370
00:13:05,070 --> 00:13:08,400
<font color="#E5E5E5">intuition about what is going on so we</font>

371
00:13:07,110 --> 00:13:10,830
have shares of X<font color="#E5E5E5"> Prime</font>

372
00:13:08,400 --> 00:13:12,579
<font color="#E5E5E5">this is X 1</font><font color="#CCCCCC"> X 2 up to X n but we only</font>

373
00:13:10,830 --> 00:13:16,029
care about the lower K bits

374
00:13:12,580 --> 00:13:17,740
or only care in the final output<font color="#CCCCCC"> but the</font>

375
00:13:16,029 --> 00:13:22,720
<font color="#CCCCCC">whole computation</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> done not</font><font color="#E5E5E5"> a look to</font>

376
00:13:17,740 --> 00:13:25,269
the k<font color="#CCCCCC"> plus s so why is this actually why</font>

377
00:13:22,720 --> 00:13:26,709
<font color="#E5E5E5">is that this actually help so let's</font><font color="#CCCCCC"> say</font>

378
00:13:25,269 --> 00:13:28,029
perform the analysis that we did<font color="#CCCCCC"> before</font>

379
00:13:26,709 --> 00:13:29,709
<font color="#E5E5E5">in the field case but now in the ring</font>

380
00:13:28,029 --> 00:13:31,149
case<font color="#E5E5E5"> so suppose</font><font color="#CCCCCC"> that there is an error</font>

381
00:13:29,709 --> 00:13:34,479
<font color="#E5E5E5">so the address re opens an X prime</font><font color="#CCCCCC"> that</font>

382
00:13:31,149 --> 00:13:36,370
<font color="#CCCCCC">is not X</font><font color="#E5E5E5"> but X X</font><font color="#CCCCCC"> X plus</font><font color="#E5E5E5"> Delta so for it</font>

383
00:13:34,480 --> 00:13:38,769
to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> considered there an error</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> it</font>

384
00:13:36,370 --> 00:13:40,149
<font color="#E5E5E5">to be wrong Delta has to be nonzero but</font>

385
00:13:38,769 --> 00:13:42,910
not<font color="#E5E5E5"> only</font><font color="#CCCCCC"> nonzero</font><font color="#E5E5E5"> it has to be nonzero</font>

386
00:13:40,149 --> 00:13:45,010
model<font color="#CCCCCC"> to to decay because if it's zero</font>

387
00:13:42,910 --> 00:13:48,040
model to to decay<font color="#E5E5E5"> then maybe the</font>

388
00:13:45,010 --> 00:13:49,269
adversary cheated<font color="#E5E5E5"> in the upper s</font><font color="#CCCCCC"> bit but</font>

389
00:13:48,040 --> 00:13:50,529
we don't carry that<font color="#E5E5E5"> percentage it's</font>

390
00:13:49,269 --> 00:13:52,540
there we only carried<font color="#E5E5E5"> the adversary</font>

391
00:13:50,529 --> 00:13:54,310
cheats in the lower<font color="#E5E5E5"> cabinets so this</font>

392
00:13:52,540 --> 00:13:56,949
error is<font color="#E5E5E5"> nonzero model to decay</font>

393
00:13:54,310 --> 00:13:59,709
now if the check passes this<font color="#E5E5E5"> equation is</font>

394
00:13:56,950 --> 00:14:01,570
satisfied<font color="#E5E5E5"> just like</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> I'm going</font>

395
00:13:59,709 --> 00:14:03,790
to try<font color="#E5E5E5"> to convince you that if with</font>

396
00:14:01,570 --> 00:14:04,990
these two conditions<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> the</font>

397
00:14:03,790 --> 00:14:07,300
<font color="#CCCCCC">probability that this equation is</font>

398
00:14:04,990 --> 00:14:09,279
<font color="#E5E5E5">satisfied is</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> which is what we didn't</font>

399
00:14:07,300 --> 00:14:11,979
<font color="#E5E5E5">have</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> before Delta was</font>

400
00:14:09,279 --> 00:14:13,570
large<font color="#E5E5E5"> Delta was a sorry Delta was not</font>

401
00:14:11,980 --> 00:14:16,000
zero model<font color="#E5E5E5"> okay process but here is</font>

402
00:14:13,570 --> 00:14:19,060
<font color="#CCCCCC">nonzero model okay 2 to the</font><font color="#E5E5E5"> K which</font><font color="#CCCCCC"> is</font>

403
00:14:16,000 --> 00:14:21,730
an<font color="#E5E5E5"> additional property</font><font color="#CCCCCC"> we have so how</font>

404
00:14:19,060 --> 00:14:23,649
does<font color="#E5E5E5"> the analysis works so we have alpha</font>

405
00:14:21,730 --> 00:14:26,110
<font color="#E5E5E5">times Delta equal</font><font color="#CCCCCC"> to big Delta model or</font>

406
00:14:23,649 --> 00:14:28,329
<font color="#CCCCCC">2 to the K process what we know about</font>

407
00:14:26,110 --> 00:14:30,279
these guys<font color="#E5E5E5"> is that alpha is not all of</font>

408
00:14:28,329 --> 00:14:32,290
it<font color="#E5E5E5"> is random but the first s</font><font color="#CCCCCC"> beats</font><font color="#E5E5E5"> at</font>

409
00:14:30,279 --> 00:14:34,420
random<font color="#E5E5E5"> I'm taking K to be</font><font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> s</font>

410
00:14:32,290 --> 00:14:36,189
<font color="#CCCCCC">here for simplicity so we know this</font><font color="#E5E5E5"> is</font>

411
00:14:34,420 --> 00:14:38,469
the<font color="#E5E5E5"> blue region and what we also know</font>

412
00:14:36,190 --> 00:14:40,120
about<font color="#E5E5E5"> small Delta is that small Delta</font>

413
00:14:38,470 --> 00:14:42,160
has some<font color="#CCCCCC"> zeros and then</font><font color="#E5E5E5"> less significant</font>

414
00:14:40,120 --> 00:14:44,260
bits<font color="#E5E5E5"> but it doesn't have</font><font color="#CCCCCC"> so many zeros</font>

415
00:14:42,160 --> 00:14:47,529
it has to face it has to encounter one

416
00:14:44,260 --> 00:14:49,810
<font color="#E5E5E5">at some point</font><font color="#CCCCCC"> below this</font><font color="#E5E5E5"> line here</font>

417
00:14:47,529 --> 00:14:52,300
<font color="#E5E5E5">because it's</font><font color="#CCCCCC"> non zero</font><font color="#E5E5E5"> to decay otherwise</font>

418
00:14:49,810 --> 00:14:53,949
it<font color="#CCCCCC"> will be similar to</font><font color="#E5E5E5"> the K so this red</font>

419
00:14:52,300 --> 00:14:56,140
region<font color="#E5E5E5"> has a property that the less</font>

420
00:14:53,950 --> 00:14:57,820
significant<font color="#E5E5E5"> bit is</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and it's easy to</font>

421
00:14:56,140 --> 00:15:00,550
see<font color="#E5E5E5"> that big</font><font color="#CCCCCC"> Delta also has the</font><font color="#E5E5E5"> exactly</font>

422
00:14:57,820 --> 00:15:03,490
<font color="#E5E5E5">the</font><font color="#CCCCCC"> same shape then what we</font><font color="#E5E5E5"> can do with</font>

423
00:15:00,550 --> 00:15:05,380
this<font color="#E5E5E5"> equation is</font><font color="#CCCCCC"> just shift it</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> / -</font>

424
00:15:03,490 --> 00:15:07,089
to the V where V is<font color="#CCCCCC"> the number</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> zeros</font>

425
00:15:05,380 --> 00:15:08,649
<font color="#E5E5E5">that we had in this lower region so when</font>

426
00:15:07,089 --> 00:15:10,630
you shift it down<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> goes</font><font color="#E5E5E5"> down</font>

427
00:15:08,649 --> 00:15:12,490
the left side<font color="#E5E5E5"> goes down</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> right side</font>

428
00:15:10,630 --> 00:15:13,720
goes down<font color="#E5E5E5"> and also the modulus goes down</font>

429
00:15:12,490 --> 00:15:16,660
by<font color="#E5E5E5"> Vivid's</font>

430
00:15:13,720 --> 00:15:18,730
and the cool<font color="#CCCCCC"> thing about this equation</font>

431
00:15:16,660 --> 00:15:20,800
<font color="#E5E5E5">is now that Delta divided by 2 to the B</font>

432
00:15:18,730 --> 00:15:22,990
is invertible<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the less</font>

433
00:15:20,800 --> 00:15:24,069
significant<font color="#CCCCCC"> PD</font><font color="#E5E5E5"> is 1 so it's an odd</font>

434
00:15:22,990 --> 00:15:27,370
<font color="#E5E5E5">number and not number 7</font>

435
00:15:24,070 --> 00:15:28,810
any power<font color="#CCCCCC"> to so we can</font><font color="#E5E5E5"> now take the</font>

436
00:15:27,370 --> 00:15:30,940
<font color="#E5E5E5">inverse of it just</font><font color="#CCCCCC"> like we did in the</font>

437
00:15:28,810 --> 00:15:32,800
<font color="#E5E5E5">fuel case so this is what we do we take</font>

438
00:15:30,940 --> 00:15:35,260
the<font color="#E5E5E5"> inverse of it</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> to take a plus s</font>

439
00:15:32,800 --> 00:15:36,609
minus<font color="#CCCCCC"> B and you can</font><font color="#E5E5E5"> see that alpha</font><font color="#CCCCCC"> is</font>

440
00:15:35,260 --> 00:15:38,680
<font color="#E5E5E5">equal to something that the adversary</font>

441
00:15:36,610 --> 00:15:40,090
knows<font color="#E5E5E5"> this is known by the adversary so</font>

442
00:15:38,680 --> 00:15:43,390
it<font color="#E5E5E5"> means</font><font color="#CCCCCC"> that the adversary</font><font color="#E5E5E5"> has guessed</font>

443
00:15:40,090 --> 00:15:44,740
<font color="#E5E5E5">alpha and since if we take s to</font><font color="#CCCCCC"> be large</font>

444
00:15:43,390 --> 00:15:45,970
enough this<font color="#E5E5E5"> only happens with</font>

445
00:15:44,740 --> 00:15:48,460
<font color="#CCCCCC">probability Z</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> s which is</font>

446
00:15:45,970 --> 00:15:50,770
negligible<font color="#E5E5E5"> this really the argument</font><font color="#CCCCCC"> that</font>

447
00:15:48,460 --> 00:15:52,420
we take in our approach so I'm just

448
00:15:50,770 --> 00:15:54,160
<font color="#CCCCCC">going to write it very formally here</font><font color="#E5E5E5"> or</font>

449
00:15:52,420 --> 00:15:56,410
at<font color="#E5E5E5"> least a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit more formally so</font>

450
00:15:54,160 --> 00:15:58,060
you take and divide the<font color="#CCCCCC"> equation by 2 to</font>

451
00:15:56,410 --> 00:16:00,790
<font color="#E5E5E5">the B I will be the largest integer that</font>

452
00:15:58,060 --> 00:16:02,380
divides<font color="#E5E5E5"> a small Delta now Delta the body</font>

453
00:16:00,790 --> 00:16:03,849
back to<font color="#CCCCCC"> the B is</font><font color="#E5E5E5"> invertible you can send</font>

454
00:16:02,380 --> 00:16:06,040
it to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other side</font><font color="#E5E5E5"> and then alpha was</font>

455
00:16:03,850 --> 00:16:07,600
guessed<font color="#E5E5E5"> essentially does does the</font>

456
00:16:06,040 --> 00:16:09,819
argument<font color="#CCCCCC"> work</font><font color="#E5E5E5"> and this trick we apply it</font>

457
00:16:07,600 --> 00:16:11,440
over<font color="#E5E5E5"> and</font><font color="#CCCCCC"> over again to achieve all the</font>

458
00:16:09,820 --> 00:16:15,640
security checks<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make it to make them</font>

459
00:16:11,440 --> 00:16:17,320
work<font color="#CCCCCC"> so we have this is the overview of</font>

460
00:16:15,640 --> 00:16:19,600
the protocol once we have this trick so

461
00:16:17,320 --> 00:16:21,310
we have two<font color="#CCCCCC"> faces an oakland face and an</font>

462
00:16:19,600 --> 00:16:22,720
<font color="#E5E5E5">online face in the offline face you have</font>

463
00:16:21,310 --> 00:16:24,699
to<font color="#CCCCCC"> prepare some</font><font color="#E5E5E5"> data you have to dinner</font>

464
00:16:22,720 --> 00:16:26,530
ate some random authenticated<font color="#E5E5E5"> bodies in</font>

465
00:16:24,700 --> 00:16:28,030
order<font color="#E5E5E5"> to be able to share the input as I</font>

466
00:16:26,530 --> 00:16:29,050
showed initially with speeds you also

467
00:16:28,030 --> 00:16:30,880
need to process of multiplication

468
00:16:29,050 --> 00:16:33,250
triples which are<font color="#CCCCCC"> necessary for the</font>

469
00:16:30,880 --> 00:16:35,260
multiplication gates and you also need

470
00:16:33,250 --> 00:16:37,570
<font color="#E5E5E5">two generations of the</font><font color="#CCCCCC"> Mac key alpha and</font>

471
00:16:35,260 --> 00:16:38,740
also you need<font color="#CCCCCC"> to implement some</font>

472
00:16:37,570 --> 00:16:41,220
functionality<font color="#CCCCCC"> that allows you to</font>

473
00:16:38,740 --> 00:16:43,360
<font color="#CCCCCC">authenticate</font><font color="#E5E5E5"> values as you</font><font color="#CCCCCC"> need them</font><font color="#E5E5E5"> and</font>

474
00:16:41,220 --> 00:16:45,130
for the<font color="#E5E5E5"> only face you need</font><font color="#CCCCCC"> to actually</font>

475
00:16:43,360 --> 00:16:46,990
<font color="#CCCCCC">make use of</font><font color="#E5E5E5"> these processing you need to</font>

476
00:16:45,130 --> 00:16:49,180
<font color="#E5E5E5">distribute the inputs using the values</font>

477
00:16:46,990 --> 00:16:50,950
that were constructed in<font color="#E5E5E5"> the step one</font>

478
00:16:49,180 --> 00:16:52,660
problem<font color="#CCCCCC"> phase you need</font><font color="#E5E5E5"> to compute shares</font>

479
00:16:50,950 --> 00:16:54,520
of the values of the circuit you're

480
00:16:52,660 --> 00:16:55,810
going gate the gate<font color="#E5E5E5"> again</font><font color="#CCCCCC"> addition gates</font>

481
00:16:54,520 --> 00:16:57,449
<font color="#CCCCCC">are for free multiplication gates</font>

482
00:16:55,810 --> 00:16:59,349
require<font color="#E5E5E5"> the multiplication triples</font>

483
00:16:57,450 --> 00:17:00,730
<font color="#E5E5E5">finally when you check correctness of</font>

484
00:16:59,350 --> 00:17:03,670
the you need<font color="#CCCCCC"> to check correctness of</font>

485
00:17:00,730 --> 00:17:05,980
every open value that<font color="#E5E5E5"> they do partially</font>

486
00:17:03,670 --> 00:17:07,659
reconstructed on<font color="#CCCCCC"> the circuit</font><font color="#E5E5E5"> you can do</font>

487
00:17:05,980 --> 00:17:09,250
this by checking every individual

488
00:17:07,660 --> 00:17:10,480
markers or by performing<font color="#CCCCCC"> a batch map</font>

489
00:17:09,250 --> 00:17:12,459
checking which I will show<font color="#CCCCCC"> in a minute</font>

490
00:17:10,480 --> 00:17:15,459
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is the overview of the protocol</font>

491
00:17:12,459 --> 00:17:17,820
<font color="#CCCCCC">but from this point</font><font color="#E5E5E5"> of the talk I'm just</font>

492
00:17:15,459 --> 00:17:20,020
going to<font color="#E5E5E5"> focus on two main parts of it</font>

493
00:17:17,819 --> 00:17:21,550
<font color="#E5E5E5">I'm going to focus in the multiplication</font>

494
00:17:20,020 --> 00:17:23,410
triples<font color="#E5E5E5"> and I'm going</font><font color="#CCCCCC"> to focus in the</font>

495
00:17:21,550 --> 00:17:24,339
<font color="#CCCCCC">batch Mac checking and I'm going</font><font color="#E5E5E5"> to</font>

496
00:17:23,410 --> 00:17:27,430
begin<font color="#E5E5E5"> right now with</font><font color="#CCCCCC"> the badge</font><font color="#E5E5E5"> Mac</font>

497
00:17:24,339 --> 00:17:29,800
second so<font color="#E5E5E5"> what is the</font><font color="#CCCCCC"> batch much</font><font color="#E5E5E5"> shaking</font>

498
00:17:27,430 --> 00:17:31,300
as I said you<font color="#E5E5E5"> have to open many many</font>

499
00:17:29,800 --> 00:17:32,740
values for the inputs<font color="#E5E5E5"> you how to open</font>

500
00:17:31,300 --> 00:17:34,210
values for the multiplication case you

501
00:17:32,740 --> 00:17:36,070
have to open values also<font color="#CCCCCC"> for the output</font>

502
00:17:34,210 --> 00:17:37,539
<font color="#E5E5E5">itself you</font><font color="#CCCCCC"> have to open values and it's</font>

503
00:17:36,070 --> 00:17:40,200
time<font color="#E5E5E5"> to open it</font>

504
00:17:37,539 --> 00:17:43,809
<font color="#E5E5E5">some interaction involves some</font>

505
00:17:40,200 --> 00:17:45,009
complication communication that a at

506
00:17:43,809 --> 00:17:48,428
some point<font color="#E5E5E5"> that if you do this every</font>

507
00:17:45,009 --> 00:17:48,850
<font color="#CCCCCC">time</font><font color="#E5E5E5"> is going to be not so efficient to</font>

508
00:17:48,429 --> 00:17:49,989
do it

509
00:17:48,850 --> 00:17:52,119
moreover<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is something</font><font color="#CCCCCC"> that I</font>

510
00:17:49,989 --> 00:17:53,679
haven't mentioned which<font color="#CCCCCC"> is every time</font>

511
00:17:52,119 --> 00:17:56,889
<font color="#E5E5E5">that you open</font><font color="#CCCCCC"> about it that you</font><font color="#E5E5E5"> check</font><font color="#CCCCCC"> or</font>

512
00:17:53,679 --> 00:17:58,960
Agnes<font color="#E5E5E5"> you have to mask the topic s</font><font color="#CCCCCC"> beats</font>

513
00:17:56,889 --> 00:18:00,789
<font color="#E5E5E5">just to be able to realize the</font>

514
00:17:58,960 --> 00:18:02,889
functionality<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would have in mind so</font>

515
00:18:00,789 --> 00:18:04,389
this mask involves<font color="#E5E5E5"> an authenticated</font>

516
00:18:02,889 --> 00:18:05,738
random value and this<font color="#E5E5E5"> also takes some</font>

517
00:18:04,389 --> 00:18:08,019
communication so we<font color="#CCCCCC"> want to avoid</font>

518
00:18:05,739 --> 00:18:09,820
<font color="#E5E5E5">checking each value each time that is</font>

519
00:18:08,019 --> 00:18:12,029
open this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a standard</font><font color="#E5E5E5"> technique and</font>

520
00:18:09,820 --> 00:18:14,379
when you have to check<font color="#E5E5E5"> a values in NPC</font>

521
00:18:12,029 --> 00:18:16,509
the typical solution of<font color="#E5E5E5"> our fields to</font>

522
00:18:14,379 --> 00:18:19,719
avoid<font color="#E5E5E5"> checking every</font><font color="#CCCCCC"> single value is</font>

523
00:18:16,509 --> 00:18:20,979
just you<font color="#E5E5E5"> have T value so check</font><font color="#CCCCCC"> x1 up to</font>

524
00:18:19,720 --> 00:18:22,840
<font color="#E5E5E5">exceed you don't know if they're</font><font color="#CCCCCC"> correct</font>

525
00:18:20,979 --> 00:18:24,429
<font color="#E5E5E5">then you apply the principle to the</font><font color="#CCCCCC"> FIR</font>

526
00:18:22,840 --> 00:18:25,959
<font color="#E5E5E5">result and you say</font><font color="#CCCCCC"> okay then if there is</font>

527
00:18:24,429 --> 00:18:27,609
<font color="#E5E5E5">at least one of them that is not correct</font>

528
00:18:25,960 --> 00:18:28,989
I just<font color="#E5E5E5"> take a linear combination of them</font>

529
00:18:27,609 --> 00:18:30,369
and with high probability<font color="#CCCCCC"> this new</font>

530
00:18:28,989 --> 00:18:32,470
<font color="#E5E5E5">combination</font><font color="#CCCCCC"> is not going to be</font><font color="#E5E5E5"> correct</font>

531
00:18:30,369 --> 00:18:33,639
either<font color="#CCCCCC"> so I can just</font><font color="#E5E5E5"> check this linear</font>

532
00:18:32,470 --> 00:18:35,950
combination instead of checking<font color="#CCCCCC"> each one</font>

533
00:18:33,639 --> 00:18:38,109
of them so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what you do over</font>

534
00:18:35,950 --> 00:18:41,409
fields and the argument<font color="#CCCCCC"> number fields is</font>

535
00:18:38,109 --> 00:18:43,299
very<font color="#E5E5E5"> straightforward</font><font color="#CCCCCC"> you say</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> if one</font>

536
00:18:41,409 --> 00:18:46,149
of them so<font color="#E5E5E5"> Delta eyes are the errors of</font>

537
00:18:43,299 --> 00:18:47,590
each X I and the<font color="#CCCCCC"> arrows also get</font>

538
00:18:46,149 --> 00:18:49,258
<font color="#E5E5E5">aggregated using the same linear</font>

539
00:18:47,590 --> 00:18:52,928
combination as Delta equal<font color="#CCCCCC"> to</font>

540
00:18:49,259 --> 00:18:54,970
accumulation of the<font color="#CCCCCC"> de ties now</font><font color="#E5E5E5"> first</font>

541
00:18:52,929 --> 00:18:56,710
argument is Delta<font color="#E5E5E5"> is</font><font color="#CCCCCC"> nonzero with high</font>

542
00:18:54,970 --> 00:18:57,970
probability<font color="#CCCCCC"> and this is very</font>

543
00:18:56,710 --> 00:19:00,399
<font color="#E5E5E5">straightforward to prove over fields</font>

544
00:18:57,970 --> 00:19:03,700
it's a very simple<font color="#E5E5E5"> argument just</font>

545
00:19:00,399 --> 00:19:05,289
involving a<font color="#CCCCCC"> it's just involves the fact</font>

546
00:19:03,700 --> 00:19:07,239
<font color="#CCCCCC">that taking the dot product</font><font color="#E5E5E5"> is a to</font>

547
00:19:05,289 --> 00:19:09,039
<font color="#E5E5E5">universal hash function and the second</font>

548
00:19:07,239 --> 00:19:10,509
argument is if Delta is<font color="#CCCCCC"> nonzero then</font><font color="#E5E5E5"> the</font>

549
00:19:09,039 --> 00:19:12,299
check passes with no probability<font color="#CCCCCC"> but</font>

550
00:19:10,509 --> 00:19:14,109
that this<font color="#E5E5E5"> we already showed</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> so</font>

551
00:19:12,299 --> 00:19:16,389
this argument<font color="#E5E5E5"> is very</font><font color="#CCCCCC"> straight forward</font>

552
00:19:14,109 --> 00:19:18,090
over fields what do we want to do in

553
00:19:16,389 --> 00:19:20,168
spits<font color="#E5E5E5"> okay is essentially do the</font><font color="#CCCCCC"> same</font>

554
00:19:18,090 --> 00:19:22,928
<font color="#E5E5E5">but the problem is that the analysis</font>

555
00:19:20,169 --> 00:19:24,489
<font color="#E5E5E5">gets trickier because now in</font><font color="#CCCCCC"> this</font>

556
00:19:22,929 --> 00:19:26,109
setting we cannot just<font color="#E5E5E5"> simply argue that</font>

557
00:19:24,489 --> 00:19:29,229
taking<font color="#E5E5E5"> that product is a universal hash</font>

558
00:19:26,109 --> 00:19:31,178
function because it's not so we have to

559
00:19:29,229 --> 00:19:33,669
apply like<font color="#CCCCCC"> a different set of tricks</font><font color="#E5E5E5"> to</font>

560
00:19:31,179 --> 00:19:36,580
<font color="#E5E5E5">achieve this basically there are two</font>

561
00:19:33,669 --> 00:19:38,619
ways<font color="#E5E5E5"> of doing this in our setting so let</font>

562
00:19:36,580 --> 00:19:40,658
<font color="#CCCCCC">EVD event in which the check passes so</font>

563
00:19:38,619 --> 00:19:42,668
this equation is satisfied<font color="#CCCCCC"> so one way to</font>

564
00:19:40,659 --> 00:19:45,249
do<font color="#CCCCCC"> it just like</font><font color="#E5E5E5"> we added another</font>

565
00:19:42,669 --> 00:19:47,019
<font color="#E5E5E5">register of s bits to</font><font color="#CCCCCC"> tour numbers to</font>

566
00:19:45,249 --> 00:19:49,830
<font color="#E5E5E5">ensure security we</font><font color="#CCCCCC"> can add another as</font>

567
00:19:47,019 --> 00:19:52,470
bit and this will<font color="#E5E5E5"> allows us to</font><font color="#CCCCCC"> to</font>

568
00:19:49,830 --> 00:19:54,299
<font color="#E5E5E5">prove that</font><font color="#CCCCCC"> the function is at universal</font>

569
00:19:52,470 --> 00:19:56,070
hash<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> sort of and this should</font>

570
00:19:54,299 --> 00:19:58,470
<font color="#CCCCCC">be fine enough</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> our purposes and you</font>

571
00:19:56,070 --> 00:20:00,240
can do this<font color="#E5E5E5"> it is but if</font><font color="#CCCCCC"> you do this you</font>

572
00:19:58,470 --> 00:20:03,090
get a<font color="#CCCCCC"> probability of</font><font color="#E5E5E5"> 2 to</font><font color="#CCCCCC"> the minus s</font>

573
00:20:00,240 --> 00:20:05,669
<font color="#CCCCCC">half not by</font><font color="#E5E5E5"> adding twice the yes but by</font>

574
00:20:03,090 --> 00:20:06,809
dividing<font color="#CCCCCC"> ESS is half plus half</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font>

575
00:20:05,669 --> 00:20:08,370
get a<font color="#E5E5E5"> probability of 2 to the minus 1/2</font>

576
00:20:06,809 --> 00:20:09,779
<font color="#CCCCCC">which means that if you want an error</font>

577
00:20:08,370 --> 00:20:12,000
probability of 2 to the minus<font color="#E5E5E5"> 18 you</font>

578
00:20:09,779 --> 00:20:13,080
need<font color="#E5E5E5"> to set s to be 160 which is</font>

579
00:20:12,000 --> 00:20:15,029
something that which is<font color="#E5E5E5"> very large</font>

580
00:20:13,080 --> 00:20:18,240
<font color="#E5E5E5">because you already have also the K so k</font>

581
00:20:15,029 --> 00:20:19,320
<font color="#E5E5E5">in 64 is 160</font><font color="#CCCCCC"> this will give you a pallet</font>

582
00:20:18,240 --> 00:20:21,899
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> true</font><font color="#E5E5E5"> that's very large</font>

583
00:20:19,320 --> 00:20:24,510
<font color="#E5E5E5">repetition so what we do instead we do</font>

584
00:20:21,899 --> 00:20:26,549
more fine-grained analysis and we get

585
00:20:24,510 --> 00:20:28,710
this probability<font color="#E5E5E5"> which is much better</font><font color="#CCCCCC"> so</font>

586
00:20:26,549 --> 00:20:31,379
2 to the<font color="#E5E5E5"> minus s and 2 to the minus s</font>

587
00:20:28,710 --> 00:20:33,840
<font color="#E5E5E5">plus log s so you still have some</font><font color="#CCCCCC"> lots</font>

588
00:20:31,380 --> 00:20:35,880
of security<font color="#E5E5E5"> bits is not exactly if you</font>

589
00:20:33,840 --> 00:20:37,559
set s to be 80<font color="#E5E5E5"> it's not 80 bits of</font>

590
00:20:35,880 --> 00:20:39,659
<font color="#CCCCCC">security you</font><font color="#E5E5E5"> get you have to subtract</font>

591
00:20:37,559 --> 00:20:42,090
<font color="#E5E5E5">the log of s but still not</font><font color="#CCCCCC"> so bad</font>

592
00:20:39,659 --> 00:20:43,440
you need to subtract<font color="#CCCCCC"> six or seven so you</font>

593
00:20:42,090 --> 00:20:47,070
set up to<font color="#CCCCCC"> be a little bit larger</font><font color="#E5E5E5"> if you</font>

594
00:20:43,440 --> 00:20:48,389
<font color="#E5E5E5">want a security of 80 bits</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> for the</font>

595
00:20:47,070 --> 00:20:49,980
details of<font color="#E5E5E5"> this analysis I would like to</font>

596
00:20:48,389 --> 00:20:51,000
refer you to the<font color="#E5E5E5"> paper but the analysis</font>

597
00:20:49,980 --> 00:20:52,230
is really<font color="#E5E5E5"> straightforward you just</font><font color="#CCCCCC"> need</font>

598
00:20:51,000 --> 00:20:55,649
to<font color="#CCCCCC"> apply this trick like in a more</font>

599
00:20:52,230 --> 00:20:56,610
clever way finally I would like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> talk</font>

600
00:20:55,649 --> 00:20:58,918
a little<font color="#E5E5E5"> bit about the multiplication</font>

601
00:20:56,610 --> 00:21:00,689
triples<font color="#E5E5E5"> is going very fast through them</font>

602
00:20:58,919 --> 00:21:03,960
and just<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to keep the slide and go</font>

603
00:21:00,690 --> 00:21:06,510
into<font color="#CCCCCC"> racket of</font><font color="#E5E5E5"> this one so the way that</font>

604
00:21:03,960 --> 00:21:07,919
they<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we take the approach</font><font color="#CCCCCC"> that we</font>

605
00:21:06,510 --> 00:21:09,600
take<font color="#E5E5E5"> for the multiplication triples is</font>

606
00:21:07,919 --> 00:21:12,600
the mascot approach in which<font color="#CCCCCC"> we use of T</font>

607
00:21:09,600 --> 00:21:15,510
so we<font color="#CCCCCC"> have basically four steps</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

608
00:21:12,600 --> 00:21:17,820
first step we<font color="#E5E5E5"> run ot to get shares of C</font>

609
00:21:15,510 --> 00:21:20,190
equal to<font color="#E5E5E5"> a times P to get additive</font>

610
00:21:17,820 --> 00:21:22,559
shares where the bold symbols are

611
00:21:20,190 --> 00:21:24,330
vectors<font color="#CCCCCC"> so C is a vector it</font><font color="#E5E5E5"> is a vector</font>

612
00:21:22,559 --> 00:21:26,850
and<font color="#CCCCCC"> B is a number so essentially we get</font>

613
00:21:24,330 --> 00:21:29,129
many many triples<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you see the</font><font color="#E5E5E5"> same B</font>

614
00:21:26,850 --> 00:21:30,330
for all<font color="#CCCCCC"> these</font><font color="#E5E5E5"> triples so this is this is</font>

615
00:21:29,130 --> 00:21:31,830
the<font color="#E5E5E5"> first step and you do a double use</font>

616
00:21:30,330 --> 00:21:33,600
if you do it using<font color="#CCCCCC"> could be destruction</font>

617
00:21:31,830 --> 00:21:35,399
<font color="#CCCCCC">the second step</font><font color="#E5E5E5"> is that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't want</font>

618
00:21:33,600 --> 00:21:36,959
vectors you actually want numbers so<font color="#E5E5E5"> to</font>

619
00:21:35,399 --> 00:21:38,518
get numbers do<font color="#E5E5E5"> you collapse them down</font>

620
00:21:36,960 --> 00:21:40,139
taking<font color="#CCCCCC"> a random linear combination</font><font color="#E5E5E5"> I</font>

621
00:21:38,519 --> 00:21:41,279
just<font color="#E5E5E5"> want to mark here is that in</font>

622
00:21:40,139 --> 00:21:44,370
<font color="#E5E5E5">maskull's you can do this just by taking</font>

623
00:21:41,279 --> 00:21:46,679
numbers and<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> okay but if you</font><font color="#E5E5E5"> use</font>

624
00:21:44,370 --> 00:21:48,959
numbers<font color="#CCCCCC"> you cannot use the</font><font color="#E5E5E5"> leftover hash</font>

625
00:21:46,679 --> 00:21:51,840
lemma to actually argue<font color="#E5E5E5"> a randomness</font>

626
00:21:48,960 --> 00:21:53,909
<font color="#E5E5E5">because it doesn't hold like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in the</font>

627
00:21:51,840 --> 00:21:55,769
setting of<font color="#E5E5E5"> C 2 to the K instead you have</font>

628
00:21:53,909 --> 00:21:57,149
<font color="#CCCCCC">to take a to be a vector</font><font color="#E5E5E5"> of beads so</font>

629
00:21:55,769 --> 00:21:58,710
<font color="#CCCCCC">that taking a random linear combination</font>

630
00:21:57,149 --> 00:22:00,959
corresponds to taking a<font color="#CCCCCC"> random subset</font>

631
00:21:58,710 --> 00:22:01,770
<font color="#CCCCCC">sum</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is in these random so there</font>

632
00:22:00,960 --> 00:22:03,900
you can<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> apply</font>

633
00:22:01,770 --> 00:22:05,639
the same analysis<font color="#E5E5E5"> so</font><font color="#CCCCCC"> do collapsin</font><font color="#E5E5E5"> down</font>

634
00:22:03,900 --> 00:22:07,650
taking<font color="#E5E5E5"> a linear</font><font color="#CCCCCC"> combination and then you</font>

635
00:22:05,640 --> 00:22:08,850
authenticate them using this Mac

636
00:22:07,650 --> 00:22:09,810
functionality I mentioned at the

637
00:22:08,850 --> 00:22:11,969
beginning you<font color="#E5E5E5"> need to authenticate</font>

638
00:22:09,810 --> 00:22:13,530
<font color="#E5E5E5">values and then you sacrifice to</font>

639
00:22:11,970 --> 00:22:15,270
<font color="#CCCCCC">sacrifice you also need to apply</font><font color="#E5E5E5"> the</font>

640
00:22:13,530 --> 00:22:16,889
same<font color="#E5E5E5"> trick over going over a larger rink</font>

641
00:22:15,270 --> 00:22:18,600
and<font color="#E5E5E5"> so on to make sure that things are</font>

642
00:22:16,890 --> 00:22:20,340
correct<font color="#CCCCCC"> sacrifice is just a step in</font>

643
00:22:18,600 --> 00:22:21,899
which you take<font color="#E5E5E5"> one triple to check the</font>

644
00:22:20,340 --> 00:22:25,830
correctness of another triple<font color="#E5E5E5"> and then</font>

645
00:22:21,900 --> 00:22:27,900
the first triple discarded then<font color="#E5E5E5"> I would</font>

646
00:22:25,830 --> 00:22:29,790
like<font color="#E5E5E5"> to conclude now so a this</font><font color="#CCCCCC"> what we</font>

647
00:22:27,900 --> 00:22:31,470
had developed<font color="#E5E5E5"> a protocol for efficient</font>

648
00:22:29,790 --> 00:22:33,180
by multiple<font color="#CCCCCC"> T computation</font><font color="#E5E5E5"> in the disk</font>

649
00:22:31,470 --> 00:22:35,850
only<font color="#CCCCCC"> model</font><font color="#E5E5E5"> is setting modulo two today</font>

650
00:22:33,180 --> 00:22:37,470
<font color="#CCCCCC">any power</font><font color="#E5E5E5"> in fact model</font><font color="#CCCCCC"> or any prime to</font>

651
00:22:35,850 --> 00:22:38,969
any power<font color="#E5E5E5"> we just focus on the case of</font>

652
00:22:37,470 --> 00:22:41,730
two but this<font color="#E5E5E5"> extends to</font><font color="#CCCCCC"> any part any</font>

653
00:22:38,970 --> 00:22:44,130
prime<font color="#E5E5E5"> we</font><font color="#CCCCCC"> introduce a number</font><font color="#E5E5E5"> of a set of</font>

654
00:22:41,730 --> 00:22:45,840
number theoretic tricks<font color="#E5E5E5"> to overcome the</font>

655
00:22:44,130 --> 00:22:47,010
issues of<font color="#CCCCCC"> working</font><font color="#E5E5E5"> over this ring and we</font>

656
00:22:45,840 --> 00:22:48,570
<font color="#CCCCCC">have given</font><font color="#E5E5E5"> the first efficient a</font>

657
00:22:47,010 --> 00:22:50,700
homomorphic authentication scheme over

658
00:22:48,570 --> 00:22:53,550
<font color="#E5E5E5">this setting which may be also of</font>

659
00:22:50,700 --> 00:22:55,200
independent interest now some future

660
00:22:53,550 --> 00:22:56,399
work which is important<font color="#E5E5E5"> to mention so we</font>

661
00:22:55,200 --> 00:22:57,600
didn't give an implementation so<font color="#E5E5E5"> it's</font>

662
00:22:56,400 --> 00:22:58,920
<font color="#E5E5E5">portent to give an implementation and to</font>

663
00:22:57,600 --> 00:23:01,320
<font color="#CCCCCC">actually give some performance in them</font>

664
00:22:58,920 --> 00:23:03,180
performance numbers our<font color="#E5E5E5"> own interface is</font>

665
00:23:01,320 --> 00:23:04,740
suspected<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> fast because we are</font>

666
00:23:03,180 --> 00:23:07,860
doing<font color="#CCCCCC"> operations in native data</font><font color="#E5E5E5"> types</font>

667
00:23:04,740 --> 00:23:09,480
like<font color="#E5E5E5"> 2 to the 32</font><font color="#CCCCCC"> or two to</font><font color="#E5E5E5"> the 64 but</font>

668
00:23:07,860 --> 00:23:12,240
<font color="#E5E5E5">the processing is erratically slower by</font>

669
00:23:09,480 --> 00:23:14,190
mask<font color="#CCCCCC"> or than mascot by the simple reason</font>

670
00:23:12,240 --> 00:23:15,420
<font color="#E5E5E5">that our data types are larger so</font><font color="#CCCCCC"> you</font>

671
00:23:14,190 --> 00:23:17,310
want to do some<font color="#CCCCCC"> commutation side</font><font color="#E5E5E5"> you</font>

672
00:23:15,420 --> 00:23:20,670
need<font color="#E5E5E5"> to always add this additional</font>

673
00:23:17,310 --> 00:23:22,350
register<font color="#E5E5E5"> we also have developed a it's</font>

674
00:23:20,670 --> 00:23:24,090
important to develop soft protocols for

675
00:23:22,350 --> 00:23:25,949
basic primitives<font color="#E5E5E5"> you want to use a PC in</font>

676
00:23:24,090 --> 00:23:27,810
any meaningful in in any<font color="#E5E5E5"> meaningful way</font>

677
00:23:25,950 --> 00:23:29,640
you need<font color="#E5E5E5"> to have like a set of</font>

678
00:23:27,810 --> 00:23:31,110
primitives<font color="#CCCCCC"> for a quality testing or</font>

679
00:23:29,640 --> 00:23:32,910
comparison or<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> the composition or</font>

680
00:23:31,110 --> 00:23:35,219
shifting and so on<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> a huge line</font>

681
00:23:32,910 --> 00:23:37,380
<font color="#CCCCCC">of research in this direction but most</font>

682
00:23:35,220 --> 00:23:38,580
of it only<font color="#CCCCCC"> wars</font><font color="#E5E5E5"> over fields because you</font>

683
00:23:37,380 --> 00:23:40,080
need<font color="#E5E5E5"> for example the simple reason that</font>

684
00:23:38,580 --> 00:23:41,040
<font color="#E5E5E5">you need to divide by 2 which is</font><font color="#CCCCCC"> not</font>

685
00:23:40,080 --> 00:23:42,600
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can do</font><font color="#CCCCCC"> very easily</font>

686
00:23:41,040 --> 00:23:44,220
<font color="#E5E5E5">over</font><font color="#CCCCCC"> this setting</font><font color="#E5E5E5"> so this is another</font>

687
00:23:42,600 --> 00:23:46,139
line<font color="#CCCCCC"> of research that</font><font color="#E5E5E5"> is very</font>

688
00:23:44,220 --> 00:23:47,850
interesting in the setting and<font color="#E5E5E5"> finally</font>

689
00:23:46,140 --> 00:23:49,440
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is all in the</font><font color="#E5E5E5"> setting of</font><font color="#CCCCCC"> dishonest</font>

690
00:23:47,850 --> 00:23:50,760
majority so it's a very natural question

691
00:23:49,440 --> 00:23:52,260
whether or<font color="#E5E5E5"> not this can be extended to</font>

692
00:23:50,760 --> 00:23:54,060
the<font color="#E5E5E5"> set of is to the setting of honest</font>

693
00:23:52,260 --> 00:23:55,500
majority or<font color="#E5E5E5"> T less</font><font color="#CCCCCC"> than in thirds where</font>

694
00:23:54,060 --> 00:23:57,540
<font color="#E5E5E5">you have to use shammiracle</font><font color="#CCCCCC"> sharing</font>

695
00:23:55,500 --> 00:24:00,540
which doesn't extend directly to the

696
00:23:57,540 --> 00:24:01,990
setting of rings and with that I would

697
00:24:00,540 --> 00:24:08,129
<font color="#E5E5E5">like</font><font color="#CCCCCC"> to conclude thank you so much</font>

698
00:24:01,990 --> 00:24:08,130
[Applause]

