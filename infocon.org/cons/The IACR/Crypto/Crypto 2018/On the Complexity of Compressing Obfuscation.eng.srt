1
00:00:05,359 --> 00:00:10,440
so I'll be talking<font color="#E5E5E5"> about the complexity</font>

2
00:00:08,280 --> 00:00:12,539
<font color="#CCCCCC">of compressing obfuscation this is joint</font>

3
00:00:10,440 --> 00:00:16,020
work with<font color="#CCCCCC"> Gilad Astra Ilan Komarovsky</font>

4
00:00:12,539 --> 00:00:17,910
<font color="#E5E5E5">and Rafael Paz so over the last few</font>

5
00:00:16,020 --> 00:00:20,070
years in distinguishability obfuscation

6
00:00:17,910 --> 00:00:21,419
<font color="#CCCCCC">or</font><font color="#E5E5E5"> i/o has become one of the most</font>

7
00:00:20,070 --> 00:00:24,210
exciting primitives in modern

8
00:00:21,419 --> 00:00:26,220
cryptography<font color="#CCCCCC"> at high level</font><font color="#E5E5E5"> an obfuscator</font>

9
00:00:24,210 --> 00:00:28,230
is a compiler which transforms one

10
00:00:26,220 --> 00:00:29,820
circuit into another in such a way that

11
00:00:28,230 --> 00:00:31,949
<font color="#E5E5E5">it should satisfy the</font><font color="#CCCCCC"> following two</font>

12
00:00:29,820 --> 00:00:34,200
<font color="#E5E5E5">properties first it should preserve</font>

13
00:00:31,949 --> 00:00:35,730
functionality meaning<font color="#E5E5E5"> that both circuits</font>

14
00:00:34,200 --> 00:00:38,699
<font color="#E5E5E5">should have the same input-output</font>

15
00:00:35,730 --> 00:00:40,800
behavior<font color="#CCCCCC"> second the obfuscated circuit</font>

16
00:00:38,699 --> 00:00:43,468
should<font color="#E5E5E5"> be unintelligible</font><font color="#CCCCCC"> or hard</font><font color="#E5E5E5"> to</font>

17
00:00:40,800 --> 00:00:45,390
<font color="#CCCCCC">reverse-engineer</font><font color="#E5E5E5"> in the case of i/o</font><font color="#CCCCCC"> this</font>

18
00:00:43,469 --> 00:00:47,399
<font color="#E5E5E5">is formulas formalized by require</font>

19
00:00:45,390 --> 00:00:49,649
requiring that for two circuits which

20
00:00:47,399 --> 00:00:52,280
compute the same function<font color="#E5E5E5"> their options</font>

21
00:00:49,649 --> 00:00:55,350
<font color="#E5E5E5">are computationally indistinguishable</font>

22
00:00:52,280 --> 00:00:56,969
<font color="#E5E5E5">the main reason why I Oh has become such</font>

23
00:00:55,350 --> 00:00:59,100
an exciting<font color="#CCCCCC"> area of</font><font color="#E5E5E5"> research is its</font>

24
00:00:56,969 --> 00:01:01,199
power there's a large body<font color="#CCCCCC"> of work</font>

25
00:00:59,100 --> 00:01:03,390
<font color="#E5E5E5">showing that IO implies nearly all</font>

26
00:01:01,199 --> 00:01:05,280
concepts in cryptography<font color="#E5E5E5"> ranging from</font>

27
00:01:03,390 --> 00:01:07,680
those in classical crypto<font color="#E5E5E5"> like one wave</font>

28
00:01:05,280 --> 00:01:09,060
function and public encryption<font color="#E5E5E5"> to more</font>

29
00:01:07,680 --> 00:01:11,670
modern concepts like fully homomorphic

30
00:01:09,060 --> 00:01:13,439
encryption<font color="#E5E5E5"> and even to those beyond the</font>

31
00:01:11,670 --> 00:01:15,150
reach of any other assumption like

32
00:01:13,439 --> 00:01:17,699
deniable encryption<font color="#E5E5E5"> or multi input</font>

33
00:01:15,150 --> 00:01:19,740
functional encryption because<font color="#CCCCCC"> of this</font>

34
00:01:17,700 --> 00:01:22,170
the main question we should be asking is

35
00:01:19,740 --> 00:01:25,619
<font color="#CCCCCC">how do we construct how do</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> construct</font>

36
00:01:22,170 --> 00:01:28,170
it there have<font color="#E5E5E5"> been two approaches</font>

37
00:01:25,619 --> 00:01:30,000
towards constructing<font color="#CCCCCC"> IO</font><font color="#E5E5E5"> the first tries</font>

38
00:01:28,170 --> 00:01:32,520
to<font color="#E5E5E5"> reduce IO to the existence of</font>

39
00:01:30,000 --> 00:01:34,740
seemingly weaker building blocks such as

40
00:01:32,520 --> 00:01:37,640
<font color="#E5E5E5">taking some cryptographic building block</font>

41
00:01:34,740 --> 00:01:40,560
and transforming<font color="#E5E5E5"> it into IO in some way</font>

42
00:01:37,640 --> 00:01:43,140
the second tries<font color="#CCCCCC"> to reduce IO to new</font>

43
00:01:40,560 --> 00:01:45,180
concrete assumptions however in this

44
00:01:43,140 --> 00:01:47,040
<font color="#CCCCCC">case</font><font color="#E5E5E5"> the assumption is not standard so</font>

45
00:01:45,180 --> 00:01:48,420
the security<font color="#CCCCCC"> of these assumptions unless</font>

46
00:01:47,040 --> 00:01:50,130
these constructions are not well

47
00:01:48,420 --> 00:01:51,110
<font color="#CCCCCC">understood</font><font color="#E5E5E5"> and thus they're vulnerable</font>

48
00:01:50,130 --> 00:01:53,490
<font color="#E5E5E5">to attacks</font>

49
00:01:51,110 --> 00:01:55,500
for this reason<font color="#CCCCCC"> let us focus on</font><font color="#E5E5E5"> this</font>

50
00:01:53,490 --> 00:01:58,169
first approach<font color="#E5E5E5"> of reducing IO to weaker</font>

51
00:01:55,500 --> 00:01:59,460
building blocks there are quite a few<font color="#E5E5E5"> of</font>

52
00:01:58,170 --> 00:02:01,710
<font color="#E5E5E5">these building</font><font color="#CCCCCC"> blocks which have</font><font color="#E5E5E5"> been</font>

53
00:01:59,460 --> 00:02:02,880
<font color="#CCCCCC">shown to imply IO such as different</font>

54
00:02:01,710 --> 00:02:06,780
types of functional encryption

55
00:02:02,880 --> 00:02:08,430
<font color="#CCCCCC">randomized encodings</font><font color="#E5E5E5"> and others however</font>

56
00:02:06,780 --> 00:02:10,440
one drawback of<font color="#E5E5E5"> these types of</font>

57
00:02:08,430 --> 00:02:12,390
constructions<font color="#E5E5E5"> is that for many of</font><font color="#CCCCCC"> these</font>

58
00:02:10,440 --> 00:02:14,519
not only<font color="#CCCCCC"> do we not</font><font color="#E5E5E5"> know how to base them</font>

59
00:02:12,390 --> 00:02:15,750
on standard assumptions<font color="#E5E5E5"> we also don't</font>

60
00:02:14,519 --> 00:02:17,160
<font color="#E5E5E5">know how</font><font color="#CCCCCC"> to base them on</font>

61
00:02:15,750 --> 00:02:19,770
something that is even weaker<font color="#CCCCCC"> than I oh</font>

62
00:02:17,160 --> 00:02:21,450
and some provable what in<font color="#E5E5E5"> particular the</font>

63
00:02:19,770 --> 00:02:25,320
only way we<font color="#E5E5E5"> know</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> to obtain many of</font>

64
00:02:21,450 --> 00:02:27,209
these is based on<font color="#E5E5E5"> IO itself so if we</font>

65
00:02:25,320 --> 00:02:29,790
want to<font color="#E5E5E5"> understand the foundations</font><font color="#CCCCCC"> of IO</font>

66
00:02:27,210 --> 00:02:31,650
<font color="#E5E5E5">it's crucial to know what the minimal</font>

67
00:02:29,790 --> 00:02:34,500
building block is upon which we can<font color="#E5E5E5"> base</font>

68
00:02:31,650 --> 00:02:36,390
<font color="#E5E5E5">IO thus the question</font><font color="#CCCCCC"> that motivates</font><font color="#E5E5E5"> this</font>

69
00:02:34,500 --> 00:02:38,040
work is understanding what is<font color="#E5E5E5"> the</font>

70
00:02:36,390 --> 00:02:42,208
weakest building block which<font color="#CCCCCC"> is known to</font>

71
00:02:38,040 --> 00:02:43,500
<font color="#E5E5E5">imply</font><font color="#CCCCCC"> AIA towards</font><font color="#E5E5E5"> answering this</font><font color="#CCCCCC"> one</font>

72
00:02:42,209 --> 00:02:45,120
thing we can notice<font color="#E5E5E5"> is that each of</font>

73
00:02:43,500 --> 00:02:47,840
these building blocks<font color="#CCCCCC"> require</font><font color="#E5E5E5"> purpose</font>

74
00:02:45,120 --> 00:02:50,910
requires<font color="#E5E5E5"> some sort of compression in</font>

75
00:02:47,840 --> 00:02:52,860
particular in the case<font color="#E5E5E5"> of compact</font>

76
00:02:50,910 --> 00:02:55,109
functional encryption the cipher texts

77
00:02:52,860 --> 00:02:57,270
are short<font color="#CCCCCC"> in the case</font><font color="#E5E5E5"> of collision</font>

78
00:02:55,110 --> 00:02:58,830
resistant functional encryption the

79
00:02:57,270 --> 00:03:00,780
<font color="#E5E5E5">ciphertext don't grow with a number of</font>

80
00:02:58,830 --> 00:03:04,830
functional<font color="#E5E5E5"> keys and similarly in the</font>

81
00:03:00,780 --> 00:03:07,590
case of<font color="#CCCCCC"> randomizing coatings so if we</font>

82
00:03:04,830 --> 00:03:09,660
want<font color="#CCCCCC"> to base I own something weaker it</font>

83
00:03:07,590 --> 00:03:11,610
seems that compression might be inherent

84
00:03:09,660 --> 00:03:14,130
towards achieving<font color="#E5E5E5"> IO or</font><font color="#CCCCCC"> at least</font>

85
00:03:11,610 --> 00:03:15,900
<font color="#E5E5E5">inherently</font><font color="#CCCCCC"> no techniques for</font><font color="#E5E5E5"> this reason</font>

86
00:03:14,130 --> 00:03:17,910
we focus<font color="#E5E5E5"> on the weakest primitive which</font>

87
00:03:15,900 --> 00:03:22,320
<font color="#CCCCCC">implies IO namely compressing</font>

88
00:03:17,910 --> 00:03:24,269
obfuscation so throughout this talk I'll

89
00:03:22,320 --> 00:03:27,420
<font color="#E5E5E5">be talking about circuits</font><font color="#CCCCCC"> II with size</font><font color="#E5E5E5"> s</font>

90
00:03:24,269 --> 00:03:29,430
and input<font color="#E5E5E5"> length n with adaptation we</font>

91
00:03:27,420 --> 00:03:31,708
can define a TL compressing obfuscator

92
00:03:29,430 --> 00:03:34,980
<font color="#E5E5E5">as one</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> the time to obfuscate is</font><font color="#CCCCCC"> sum</font>

93
00:03:31,709 --> 00:03:37,410
<font color="#E5E5E5">function T</font><font color="#CCCCCC"> of s</font><font color="#E5E5E5"> n</font><font color="#CCCCCC"> N</font><font color="#E5E5E5"> and the resulting</font>

94
00:03:34,980 --> 00:03:39,570
size of the<font color="#CCCCCC"> obstacle that</font><font color="#E5E5E5"> is the size of</font>

95
00:03:37,410 --> 00:03:44,459
<font color="#E5E5E5">the arc and circuit is</font><font color="#CCCCCC"> some function L</font>

96
00:03:39,570 --> 00:03:46,890
of s and n now<font color="#CCCCCC"> parametrizing IO</font><font color="#E5E5E5"> or</font>

97
00:03:44,459 --> 00:03:49,410
<font color="#E5E5E5">rather obfuscation in this way already</font>

98
00:03:46,890 --> 00:03:51,540
captures some known primitives<font color="#E5E5E5"> first and</font>

99
00:03:49,410 --> 00:03:53,760
<font color="#CCCCCC">foremost IO is a compressing obfuscator</font>

100
00:03:51,540 --> 00:03:55,828
<font color="#E5E5E5">where all we require from IO is to be</font>

101
00:03:53,760 --> 00:03:57,450
efficient namely polynomial and the size

102
00:03:55,829 --> 00:03:59,940
<font color="#E5E5E5">of the circuit that it</font><font color="#CCCCCC"> office gates</font><font color="#E5E5E5"> on</font>

103
00:03:57,450 --> 00:04:02,100
the other<font color="#CCCCCC"> extreme we could conceive of a</font>

104
00:03:59,940 --> 00:04:04,590
trivial<font color="#E5E5E5"> obfuscator which</font><font color="#CCCCCC"> receives some</font>

105
00:04:02,100 --> 00:04:06,720
circuit<font color="#E5E5E5"> it runs it on all</font><font color="#CCCCCC"> two then</font>

106
00:04:04,590 --> 00:04:10,049
inputs and then just outputs<font color="#CCCCCC"> thought of</font>

107
00:04:06,720 --> 00:04:12,690
the truth table of<font color="#E5E5E5"> size 2 then this</font>

108
00:04:10,049 --> 00:04:14,190
obfuscator is not weak not powerful

109
00:04:12,690 --> 00:04:16,529
enough<font color="#CCCCCC"> for any cryptographic</font>

110
00:04:14,190 --> 00:04:17,940
applications<font color="#E5E5E5"> but by strengthening</font><font color="#CCCCCC"> it a</font>

111
00:04:16,529 --> 00:04:19,018
<font color="#E5E5E5">little bit we can get something that</font><font color="#CCCCCC"> is</font>

112
00:04:17,940 --> 00:04:22,530
powerful<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> for cryptographic</font>

113
00:04:19,019 --> 00:04:24,450
<font color="#E5E5E5">applications in particular</font><font color="#CCCCCC"> one such one</font>

114
00:04:22,530 --> 00:04:28,739
such obfuscator is exponentially

115
00:04:24,450 --> 00:04:30,030
efficient<font color="#E5E5E5"> IO or x io in x io the run</font>

116
00:04:28,740 --> 00:04:32,370
time is<font color="#E5E5E5"> just as in the trivial</font>

117
00:04:30,030 --> 00:04:33,690
obfuscator<font color="#E5E5E5"> namely it's polynomial in the</font>

118
00:04:32,370 --> 00:04:35,759
truth<font color="#E5E5E5"> table of the circuit so it's very</font>

119
00:04:33,690 --> 00:04:37,530
<font color="#E5E5E5">inefficient but the output length is</font>

120
00:04:35,759 --> 00:04:40,440
just<font color="#E5E5E5"> slightly smaller than the truth</font>

121
00:04:37,530 --> 00:04:42,000
table<font color="#CCCCCC"> in particular</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> two</font>

122
00:04:40,440 --> 00:04:43,919
to the N times<font color="#CCCCCC"> one minus</font><font color="#E5E5E5"> Epsilon</font>

123
00:04:42,000 --> 00:04:46,710
usually for some constant<font color="#CCCCCC"> epsilon times</font>

124
00:04:43,919 --> 00:04:49,680
<font color="#E5E5E5">polynomial in the circus</font><font color="#CCCCCC"> s this can also</font>

125
00:04:46,710 --> 00:04:51,690
be strengthened<font color="#E5E5E5"> to strong</font><font color="#CCCCCC"> xio</font><font color="#E5E5E5"> in which</font>

126
00:04:49,680 --> 00:04:54,270
the both the running time and<font color="#CCCCCC"> the output</font>

127
00:04:51,690 --> 00:04:56,009
length<font color="#E5E5E5"> are as in the upper length of XO</font>

128
00:04:54,270 --> 00:04:59,400
namely slightly smaller than the truth

129
00:04:56,009 --> 00:05:02,009
table<font color="#CCCCCC"> of the circuit one thing to note</font>

130
00:04:59,400 --> 00:05:03,989
though is<font color="#E5E5E5"> that in both</font><font color="#CCCCCC"> xio and SXL the</font>

131
00:05:02,009 --> 00:05:06,060
out pulling<font color="#E5E5E5"> this exponential so we can</font>

132
00:05:03,990 --> 00:05:08,370
only<font color="#E5E5E5"> use these obfuscators on circuits</font>

133
00:05:06,060 --> 00:05:13,020
with short inputs such as<font color="#E5E5E5"> a logarithmic</font>

134
00:05:08,370 --> 00:05:15,060
<font color="#CCCCCC">size inputs so parametrizing obfuscation</font>

135
00:05:13,020 --> 00:05:17,068
<font color="#CCCCCC">these sorry</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> four settings</font><font color="#E5E5E5"> of</font>

136
00:05:15,060 --> 00:05:19,110
parameters<font color="#E5E5E5"> already give us a sort of</font>

137
00:05:17,069 --> 00:05:22,740
compression hierarchy<font color="#E5E5E5"> for compressing</font>

138
00:05:19,110 --> 00:05:26,849
obfuscation<font color="#E5E5E5"> based on</font><font color="#CCCCCC"> known results for</font>

139
00:05:22,740 --> 00:05:29,729
example<font color="#CCCCCC"> xio along with lwe is already</font>

140
00:05:26,849 --> 00:05:31,979
known<font color="#E5E5E5"> to imply IO if you're willing to</font>

141
00:05:29,729 --> 00:05:34,020
strengthen the assumption from<font color="#CCCCCC"> XO to</font><font color="#E5E5E5"> s</font>

142
00:05:31,979 --> 00:05:36,229
<font color="#CCCCCC">except we can weaken the assumptions</font>

143
00:05:34,020 --> 00:05:38,729
<font color="#E5E5E5">from LW</font><font color="#CCCCCC"> each down to long wave functions</font>

144
00:05:36,229 --> 00:05:41,849
however<font color="#E5E5E5"> both of these instructions</font><font color="#CCCCCC"> are</font>

145
00:05:38,729 --> 00:05:43,979
in a<font color="#E5E5E5"> sub</font><font color="#CCCCCC"> exponential regime</font><font color="#E5E5E5"> meaning they</font>

146
00:05:41,849 --> 00:05:47,070
require sub-exponential security from

147
00:05:43,979 --> 00:05:50,008
the<font color="#E5E5E5"> underlying primitives so one thing</font>

148
00:05:47,070 --> 00:05:51,449
we<font color="#E5E5E5"> can ask already is what can we get</font>

149
00:05:50,009 --> 00:05:56,009
from<font color="#CCCCCC"> these primitives with only</font>

150
00:05:51,449 --> 00:05:57,840
polynomial security for comparison<font color="#E5E5E5"> the</font>

151
00:05:56,009 --> 00:06:00,229
holy<font color="#E5E5E5"> grail of this area would</font><font color="#CCCCCC"> be to base</font>

152
00:05:57,840 --> 00:06:03,810
<font color="#E5E5E5">I own something like</font><font color="#CCCCCC"> 1 wave functions</font>

153
00:06:00,229 --> 00:06:05,550
but based on known impossibility results

154
00:06:03,810 --> 00:06:07,650
<font color="#E5E5E5">this is very unlikely</font><font color="#CCCCCC"> to be the case</font>

155
00:06:05,550 --> 00:06:08,990
such as<font color="#E5E5E5"> the impossibilities of</font><font color="#CCCCCC"> Mahmood</font>

156
00:06:07,650 --> 00:06:11,099
<font color="#CCCCCC">E&L and Garg at all</font>

157
00:06:08,990 --> 00:06:13,259
nevertheless there's still room<font color="#CCCCCC"> for</font>

158
00:06:11,099 --> 00:06:16,289
improvements between<font color="#E5E5E5"> these norm results</font>

159
00:06:13,259 --> 00:06:19,650
and this<font color="#CCCCCC"> holy grail</font><font color="#E5E5E5"> result for example</font>

160
00:06:16,289 --> 00:06:22,409
<font color="#CCCCCC">one such improvement is what can we why</font>

161
00:06:19,650 --> 00:06:24,900
do we need<font color="#CCCCCC"> lwe here with x io for</font>

162
00:06:22,409 --> 00:06:27,719
example can<font color="#CCCCCC"> we use only one wave</font>

163
00:06:24,900 --> 00:06:31,349
functions I'm gonna come back<font color="#E5E5E5"> to this in</font>

164
00:06:27,719 --> 00:06:33,630
a little<font color="#E5E5E5"> bit another thing though is</font>

165
00:06:31,349 --> 00:06:36,330
that<font color="#E5E5E5"> one strong motivation for looking</font>

166
00:06:33,630 --> 00:06:38,490
at relaxation<font color="#CCCCCC"> of IO</font><font color="#E5E5E5"> is to see if there's</font>

167
00:06:36,330 --> 00:06:40,950
some relaxation<font color="#E5E5E5"> which is just which</font>

168
00:06:38,490 --> 00:06:43,080
retains much of the power<font color="#E5E5E5"> of</font><font color="#CCCCCC"> i/o but</font>

169
00:06:40,950 --> 00:06:44,510
easier<font color="#E5E5E5"> to construct towards this end</font>

170
00:06:43,080 --> 00:06:47,490
<font color="#E5E5E5">suppose we're willing to assume</font>

171
00:06:44,510 --> 00:06:50,969
<font color="#E5E5E5">sub-exponential one-way functions then</font>

172
00:06:47,490 --> 00:06:52,800
assuming<font color="#CCCCCC"> sxi oh we can already get IO</font>

173
00:06:50,970 --> 00:06:56,130
and all of its applications<font color="#E5E5E5"> like public</font>

174
00:06:52,800 --> 00:06:57,570
key encryption<font color="#CCCCCC"> etc on the other</font><font color="#E5E5E5"> hand if</font>

175
00:06:56,130 --> 00:06:59,730
we're only assuming one-way functions

176
00:06:57,570 --> 00:07:02,310
then over here<font color="#CCCCCC"> at the trivial obfuscator</font>

177
00:06:59,730 --> 00:07:05,880
we only have mini crypt<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is no</font>

178
00:07:02,310 --> 00:07:07,590
public<font color="#CCCCCC"> key encryption</font><font color="#E5E5E5"> thus there's a</font>

179
00:07:05,880 --> 00:07:11,010
huge gap in<font color="#CCCCCC"> our knowledge surrounding</font>

180
00:07:07,590 --> 00:07:15,030
<font color="#CCCCCC">xio</font><font color="#E5E5E5"> for example how powerful is X IO or</font>

181
00:07:11,010 --> 00:07:16,950
how weak is it in this work we focus<font color="#CCCCCC"> on</font>

182
00:07:15,030 --> 00:07:19,950
this<font color="#E5E5E5"> setting of</font><font color="#CCCCCC"> parameters and try and</font>

183
00:07:16,950 --> 00:07:21,479
answer<font color="#E5E5E5"> some of these questions</font><font color="#CCCCCC"> in</font>

184
00:07:19,950 --> 00:07:23,940
particular<font color="#E5E5E5"> we have the following main</font>

185
00:07:21,480 --> 00:07:25,920
results<font color="#E5E5E5"> we look at compressing on</font>

186
00:07:23,940 --> 00:07:28,380
vacation as an independent cryptographic

187
00:07:25,920 --> 00:07:31,260
primitive<font color="#E5E5E5"> and first we look at its power</font>

188
00:07:28,380 --> 00:07:34,800
<font color="#E5E5E5">in particular we're able to show that</font>

189
00:07:31,260 --> 00:07:37,380
<font color="#E5E5E5">that</font><font color="#CCCCCC"> x io</font><font color="#E5E5E5"> is a</font><font color="#CCCCCC"> weak</font><font color="#E5E5E5"> that is with one-way</font>

190
00:07:34,800 --> 00:07:39,840
functions<font color="#CCCCCC"> x io does not imply a public</font>

191
00:07:37,380 --> 00:07:42,210
key encryption<font color="#E5E5E5"> in a blackbox way now</font>

192
00:07:39,840 --> 00:07:44,580
this holds even<font color="#E5E5E5"> if the x io and moment</font>

193
00:07:42,210 --> 00:07:46,710
functions are sub exponentially secure

194
00:07:44,580 --> 00:07:49,740
and even if the public<font color="#CCCCCC"> encryption is</font>

195
00:07:46,710 --> 00:07:52,200
only polynomial is secure<font color="#E5E5E5"> moreover since</font>

196
00:07:49,740 --> 00:07:54,390
<font color="#E5E5E5">IO does imply public encryption when</font>

197
00:07:52,200 --> 00:07:57,210
assuming one-way functions this actually

198
00:07:54,390 --> 00:08:00,180
separates between<font color="#E5E5E5"> x io and</font><font color="#CCCCCC"> io thus</font>

199
00:07:57,210 --> 00:08:01,739
showing the XO is<font color="#E5E5E5"> the first thing</font><font color="#CCCCCC"> that</font>

200
00:08:00,180 --> 00:08:04,830
does not come<font color="#E5E5E5"> from sanity assumptions</font>

201
00:08:01,740 --> 00:08:08,240
which is probably weaker than<font color="#E5E5E5"> IO yet</font>

202
00:08:04,830 --> 00:08:12,150
implies it with standard assumptions

203
00:08:08,240 --> 00:08:15,840
thus X IO is very weak<font color="#E5E5E5"> it's so weak in</font>

204
00:08:12,150 --> 00:08:19,049
<font color="#E5E5E5">fact that we</font><font color="#CCCCCC"> even show that it exists</font>

205
00:08:15,840 --> 00:08:21,659
<font color="#CCCCCC">for</font><font color="#E5E5E5"> non</font><font color="#CCCCCC"> trivial classes of circuits in</font>

206
00:08:19,050 --> 00:08:24,780
particular<font color="#CCCCCC"> we're able able</font><font color="#E5E5E5"> to show</font>

207
00:08:21,660 --> 00:08:27,720
constructions of x io with statistical

208
00:08:24,780 --> 00:08:30,780
security for classes of circuits like<font color="#E5E5E5"> AC</font>

209
00:08:27,720 --> 00:08:33,170
<font color="#E5E5E5">0 now AC 0 is already a</font><font color="#CCCCCC"> non trivial</font>

210
00:08:30,780 --> 00:08:38,309
class it contains things like<font color="#E5E5E5"> weak</font><font color="#CCCCCC"> PRS</font>

211
00:08:33,169 --> 00:08:40,709
so and this<font color="#E5E5E5"> is also in contrast to IO we</font>

212
00:08:38,309 --> 00:08:42,989
also match this<font color="#E5E5E5"> with a lower bound</font>

213
00:08:40,710 --> 00:08:45,510
<font color="#E5E5E5">showing that if you improve the</font><font color="#CCCCCC"> running</font>

214
00:08:42,990 --> 00:08:47,940
time here<font color="#CCCCCC"> and the output length it's</font>

215
00:08:45,510 --> 00:08:51,810
unlikely that<font color="#CCCCCC"> XO that this type of</font>

216
00:08:47,940 --> 00:08:54,180
obvious<font color="#E5E5E5"> cater exists for AC 0 however</font><font color="#CCCCCC"> I</font>

217
00:08:51,810 --> 00:08:56,910
should<font color="#CCCCCC"> note that</font><font color="#E5E5E5"> this positive result</font>

218
00:08:54,180 --> 00:08:58,290
for<font color="#CCCCCC"> annex IO which</font><font color="#E5E5E5"> is has somewhat</font>

219
00:08:56,910 --> 00:09:00,449
weaker compression than what I've

220
00:08:58,290 --> 00:09:03,150
discussed so so far<font color="#E5E5E5"> but I'll get into</font>

221
00:09:00,450 --> 00:09:05,250
that<font color="#E5E5E5"> a little bit later finally we look</font>

222
00:09:03,150 --> 00:09:08,520
at<font color="#E5E5E5"> weakening</font><font color="#CCCCCC"> xio under computational</font>

223
00:09:05,250 --> 00:09:11,040
assumptions and<font color="#E5E5E5"> we're able to show that</font>

224
00:09:08,520 --> 00:09:13,260
if you want exhale it suffice<font color="#CCCCCC"> us to only</font>

225
00:09:11,040 --> 00:09:15,839
<font color="#E5E5E5">assume a version of X IO which is</font><font color="#CCCCCC"> only</font>

226
00:09:13,260 --> 00:09:18,089
approximately correct<font color="#E5E5E5"> this is called</font>

227
00:09:15,839 --> 00:09:19,380
correctness<font color="#E5E5E5"> amplification where we take</font>

228
00:09:18,089 --> 00:09:21,300
something<font color="#E5E5E5"> that's approximately</font><font color="#CCCCCC"> correct</font>

229
00:09:19,380 --> 00:09:24,810
<font color="#E5E5E5">and transform it into something that's</font>

230
00:09:21,300 --> 00:09:26,579
<font color="#E5E5E5">fully correct now I won't be</font><font color="#CCCCCC"> able to</font>

231
00:09:24,810 --> 00:09:27,839
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> about this third results in this</font>

232
00:09:26,580 --> 00:09:30,180
talk I'm only going to<font color="#E5E5E5"> focus on the</font>

233
00:09:27,839 --> 00:09:33,839
first<font color="#E5E5E5"> two but I'll just say about it is</font>

234
00:09:30,180 --> 00:09:35,599
that<font color="#E5E5E5"> it might seem like we could adapt</font><font color="#CCCCCC"> a</font>

235
00:09:33,839 --> 00:09:37,830
<font color="#CCCCCC">known results for IO</font><font color="#E5E5E5"> to do this</font>

236
00:09:35,600 --> 00:09:39,600
<font color="#E5E5E5">correctness amplification simply by</font>

237
00:09:37,830 --> 00:09:42,720
scaling<font color="#E5E5E5"> the parameters but that's</font>

238
00:09:39,600 --> 00:09:45,029
actually<font color="#CCCCCC"> not the</font><font color="#E5E5E5"> case so our solution to</font>

239
00:09:42,720 --> 00:09:47,430
<font color="#CCCCCC">this</font><font color="#E5E5E5"> uses information</font><font color="#CCCCCC"> theoretic</font><font color="#E5E5E5"> tools</font>

240
00:09:45,029 --> 00:09:49,650
like different types<font color="#E5E5E5"> of error correcting</font>

241
00:09:47,430 --> 00:09:51,329
codes and also computational tools like

242
00:09:49,650 --> 00:09:53,970
<font color="#E5E5E5">not interactive zero knowledge to</font>

243
00:09:51,330 --> 00:09:55,620
achieve<font color="#E5E5E5"> this result so if you're</font>

244
00:09:53,970 --> 00:09:57,330
<font color="#CCCCCC">interested</font><font color="#E5E5E5"> in just this third</font><font color="#CCCCCC"> result</font>

245
00:09:55,620 --> 00:09:59,940
please<font color="#E5E5E5"> see the paper but</font><font color="#CCCCCC"> I'm gonna</font><font color="#E5E5E5"> talk</font>

246
00:09:57,330 --> 00:10:03,180
<font color="#CCCCCC">about it the first</font><font color="#E5E5E5"> two before I do that</font>

247
00:09:59,940 --> 00:10:05,730
though<font color="#CCCCCC"> we can look at the impact of our</font>

248
00:10:03,180 --> 00:10:07,290
souls<font color="#E5E5E5"> so this is the picture we had</font>

249
00:10:05,730 --> 00:10:10,550
before<font color="#E5E5E5"> where if we assume when we</font>

250
00:10:07,290 --> 00:10:13,110
functions with<font color="#E5E5E5"> sxa o we get up</font><font color="#CCCCCC"> Sophia</font>

251
00:10:10,550 --> 00:10:16,829
trivially we get my functions<font color="#E5E5E5"> as we're</font>

252
00:10:13,110 --> 00:10:19,400
assuming them<font color="#CCCCCC"> and our first result</font><font color="#E5E5E5"> that</font>

253
00:10:16,830 --> 00:10:22,320
<font color="#CCCCCC">xio doesn't imply public key encryption</font>

254
00:10:19,400 --> 00:10:24,900
implies the<font color="#E5E5E5"> essence re that</font><font color="#CCCCCC"> xio doesn't</font>

255
00:10:22,320 --> 00:10:27,930
imply<font color="#E5E5E5"> IO but also</font><font color="#CCCCCC"> implies that</font><font color="#E5E5E5"> x io</font>

256
00:10:24,900 --> 00:10:30,180
doesn't invite<font color="#CCCCCC"> sx io because sx io does</font>

257
00:10:27,930 --> 00:10:31,939
imply<font color="#CCCCCC"> a public key encryption in a model</font>

258
00:10:30,180 --> 00:10:35,400
that<font color="#E5E5E5"> fits into our black box model</font>

259
00:10:31,940 --> 00:10:37,830
<font color="#E5E5E5">therefore this result</font><font color="#CCCCCC"> actually shows</font>

260
00:10:35,400 --> 00:10:41,490
that<font color="#CCCCCC"> assuming exhale</font><font color="#E5E5E5"> am all my functions</font>

261
00:10:37,830 --> 00:10:44,279
<font color="#CCCCCC">we still only</font><font color="#E5E5E5"> have mini crypt thus we</font>

262
00:10:41,490 --> 00:10:46,830
<font color="#E5E5E5">have simultaneously made the gap in our</font>

263
00:10:44,279 --> 00:10:49,130
knowledge smaller and<font color="#E5E5E5"> also</font><font color="#CCCCCC"> weaken the</font>

264
00:10:46,830 --> 00:10:51,720
assumptions<font color="#CCCCCC"> underlying</font><font color="#E5E5E5"> IO</font>

265
00:10:49,130 --> 00:10:54,000
moreover we<font color="#E5E5E5"> further weaken these with</font>

266
00:10:51,720 --> 00:10:55,980
our<font color="#E5E5E5"> correctness amplification showing</font>

267
00:10:54,000 --> 00:10:59,160
<font color="#E5E5E5">that you only need a very approximate</font>

268
00:10:55,980 --> 00:11:02,220
<font color="#CCCCCC">version of Excel to get with standard</font>

269
00:10:59,160 --> 00:11:03,660
assumptions<font color="#E5E5E5"> all the way to</font><font color="#CCCCCC"> IO so with</font>

270
00:11:02,220 --> 00:11:06,150
that in mind<font color="#CCCCCC"> I'm gonna start by talking</font>

271
00:11:03,660 --> 00:11:07,030
about our<font color="#E5E5E5"> first results on the power of</font>

272
00:11:06,150 --> 00:11:11,540
<font color="#E5E5E5">exile</font>

273
00:11:07,030 --> 00:11:12,079
so recall<font color="#CCCCCC"> that xio with lwe</font><font color="#E5E5E5"> does imply</font>

274
00:11:11,540 --> 00:11:14,000
<font color="#CCCCCC">IO</font>

275
00:11:12,080 --> 00:11:17,030
so if we want to understand its power

276
00:11:14,000 --> 00:11:19,010
<font color="#E5E5E5">it's useful to look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> it by itself</font><font color="#CCCCCC"> with</font>

277
00:11:17,030 --> 00:11:22,069
maybe the minimal computational

278
00:11:19,010 --> 00:11:23,420
assumptions necessary<font color="#CCCCCC"> and one good</font>

279
00:11:22,070 --> 00:11:25,010
<font color="#E5E5E5">starting point here is one of the</font>

280
00:11:23,420 --> 00:11:27,290
original applications of<font color="#CCCCCC"> IO</font>

281
00:11:25,010 --> 00:11:29,360
that is transforming a secret key

282
00:11:27,290 --> 00:11:32,689
encryption scheme into a public key one

283
00:11:29,360 --> 00:11:34,460
<font color="#E5E5E5">as we've already said</font><font color="#CCCCCC"> xio does not</font>

284
00:11:32,690 --> 00:11:37,910
suffice<font color="#CCCCCC"> for this transformation in a</font>

285
00:11:34,460 --> 00:11:39,590
<font color="#E5E5E5">blackbox way so to gain some intuition</font>

286
00:11:37,910 --> 00:11:40,730
<font color="#E5E5E5">for this results consider the</font>

287
00:11:39,590 --> 00:11:43,400
construction of<font color="#E5E5E5"> public key encryption</font>

288
00:11:40,730 --> 00:11:47,180
<font color="#E5E5E5">from IO and all my functions do to say</font>

289
00:11:43,400 --> 00:11:49,550
<font color="#E5E5E5">hi</font><font color="#CCCCCC"> and waters in this construction the</font>

290
00:11:47,180 --> 00:11:51,530
public key<font color="#CCCCCC"> is an obfuscation of the</font>

291
00:11:49,550 --> 00:11:53,359
<font color="#E5E5E5">encryption circuit for secret key</font>

292
00:11:51,530 --> 00:11:56,360
encryption scheme<font color="#E5E5E5"> with the secret key</font>

293
00:11:53,360 --> 00:11:58,850
hard-coded inside to encrypt a message

294
00:11:56,360 --> 00:12:00,920
you simply need to<font color="#E5E5E5"> sample the randomness</font>

295
00:11:58,850 --> 00:12:03,440
<font color="#CCCCCC">R and then evaluate this obfuscated</font>

296
00:12:00,920 --> 00:12:06,979
circuit on m and<font color="#E5E5E5"> r to obtain the</font><font color="#CCCCCC"> cipher</font>

297
00:12:03,440 --> 00:12:11,120
<font color="#CCCCCC">text</font><font color="#E5E5E5"> now consider what happens if we</font>

298
00:12:06,980 --> 00:12:13,670
replace<font color="#CCCCCC"> io here with x io x io runs an</font>

299
00:12:11,120 --> 00:12:15,290
exponential time in the input length so

300
00:12:13,670 --> 00:12:17,209
if we want<font color="#E5E5E5"> to have an efficient</font><font color="#CCCCCC"> public</font>

301
00:12:15,290 --> 00:12:19,849
key encryption scheme we need the<font color="#CCCCCC"> input</font>

302
00:12:17,210 --> 00:12:22,580
length to<font color="#CCCCCC"> be small but if the input</font>

303
00:12:19,850 --> 00:12:23,360
length is say logarithmic<font color="#E5E5E5"> the adversary</font>

304
00:12:22,580 --> 00:12:25,610
<font color="#E5E5E5">contribut</font>

305
00:12:23,360 --> 00:12:28,430
upon receiving the public he<font color="#E5E5E5"> learned all</font>

306
00:12:25,610 --> 00:12:30,230
possible<font color="#CCCCCC"> cybertek's of this scheme which</font>

307
00:12:28,430 --> 00:12:34,250
would make such a scheme trivially

308
00:12:30,230 --> 00:12:36,260
insecure now this is only one

309
00:12:34,250 --> 00:12:38,150
construction<font color="#E5E5E5"> but we show that this is</font>

310
00:12:36,260 --> 00:12:41,660
inherent for any<font color="#E5E5E5"> construction which</font>

311
00:12:38,150 --> 00:12:43,610
starts with exhale<font color="#E5E5E5"> but one thing I want</font>

312
00:12:41,660 --> 00:12:46,400
<font color="#E5E5E5">to add here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that this intuition is a</font>

313
00:12:43,610 --> 00:12:48,590
little bit oversimplified<font color="#CCCCCC"> in particular</font>

314
00:12:46,400 --> 00:12:50,630
<font color="#E5E5E5">this intuition on the one hand it does</font>

315
00:12:48,590 --> 00:12:51,920
carry<font color="#E5E5E5"> through throughout our proof our</font>

316
00:12:50,630 --> 00:12:56,060
adversary for public key encryption

317
00:12:51,920 --> 00:12:57,680
<font color="#CCCCCC">learns also for all the whole truth</font>

318
00:12:56,060 --> 00:12:59,930
table for<font color="#E5E5E5"> every object skeeted circuit</font>

319
00:12:57,680 --> 00:13:03,530
but on the other<font color="#CCCCCC"> hand this intuition</font>

320
00:12:59,930 --> 00:13:06,319
<font color="#E5E5E5">also holds for</font><font color="#CCCCCC"> sx</font><font color="#E5E5E5"> IO and SX</font><font color="#CCCCCC"> io does</font>

321
00:13:03,530 --> 00:13:07,790
imply public key encryption<font color="#E5E5E5"> so it can't</font>

322
00:13:06,320 --> 00:13:10,040
<font color="#E5E5E5">be</font><font color="#CCCCCC"> that we're ruling out and know in</font>

323
00:13:07,790 --> 00:13:11,959
construction but<font color="#E5E5E5"> actually the reason</font><font color="#CCCCCC"> is</font>

324
00:13:10,040 --> 00:13:14,630
<font color="#CCCCCC">that this intuition</font><font color="#E5E5E5"> is incomplete is</font>

325
00:13:11,960 --> 00:13:16,490
because while we use<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fact that the</font>

326
00:13:14,630 --> 00:13:19,089
adversary can learn all the<font color="#E5E5E5"> cipher texts</font>

327
00:13:16,490 --> 00:13:21,490
we also need<font color="#E5E5E5"> the obfuscator to know that</font>

328
00:13:19,089 --> 00:13:25,720
table which only holds in<font color="#CCCCCC"> xio and</font>

329
00:13:21,490 --> 00:13:27,610
doesn't hold<font color="#E5E5E5"> an</font><font color="#CCCCCC"> s xio so the general</font>

330
00:13:25,720 --> 00:13:30,339
model for showing these types of lower

331
00:13:27,610 --> 00:13:31,959
bounds is a black box model<font color="#E5E5E5"> so in this</font>

332
00:13:30,339 --> 00:13:33,639
context that<font color="#E5E5E5"> means that we'd like</font><font color="#CCCCCC"> to</font>

333
00:13:31,959 --> 00:13:36,729
show that<font color="#CCCCCC"> there's no</font><font color="#E5E5E5"> construction of</font>

334
00:13:33,639 --> 00:13:38,740
public<font color="#CCCCCC"> key encryption</font><font color="#E5E5E5"> from which uses</font>

335
00:13:36,730 --> 00:13:42,999
<font color="#CCCCCC">xio and</font><font color="#E5E5E5"> one-way functions in a black box</font>

336
00:13:38,740 --> 00:13:45,699
way<font color="#E5E5E5"> so the thing is that obfuscation is</font>

337
00:13:42,999 --> 00:13:48,129
inherently non black box<font color="#E5E5E5"> for example</font>

338
00:13:45,699 --> 00:13:51,490
take this construction<font color="#E5E5E5"> this secret key</font>

339
00:13:48,129 --> 00:13:53,680
encryption circuit it's built from a

340
00:13:51,490 --> 00:13:55,720
one-way<font color="#E5E5E5"> function f so it has the</font>

341
00:13:53,680 --> 00:13:57,998
concrete implementation of a one-way

342
00:13:55,720 --> 00:13:59,769
function<font color="#CCCCCC"> f inside of it and the obvious</font>

343
00:13:57,999 --> 00:14:01,139
<font color="#CCCCCC">carrier needs the code of the one-way</font>

344
00:13:59,769 --> 00:14:04,449
function<font color="#E5E5E5"> to obvious get it</font>

345
00:14:01,139 --> 00:14:06,579
however<font color="#E5E5E5"> using the model of correlated</font>

346
00:14:04,449 --> 00:14:09,609
circuits<font color="#CCCCCC"> we can capture and</font><font color="#E5E5E5"> not black</font>

347
00:14:06,579 --> 00:14:11,649
<font color="#E5E5E5">box constructions as follows</font><font color="#CCCCCC"> we gave the</font>

348
00:14:09,610 --> 00:14:12,970
obvious<font color="#CCCCCC"> Gator Oracle access to an</font><font color="#E5E5E5"> Oracle</font>

349
00:14:11,649 --> 00:14:15,550
implementing the one-way function and

350
00:14:12,970 --> 00:14:17,110
then we<font color="#CCCCCC"> replaced all concrete</font><font color="#E5E5E5"> one of my</font>

351
00:14:15,550 --> 00:14:19,269
function<font color="#E5E5E5"> gates in</font><font color="#CCCCCC"> this circuit</font><font color="#E5E5E5"> with</font>

352
00:14:17,110 --> 00:14:21,970
<font color="#E5E5E5">Oracle gates and this allows</font><font color="#CCCCCC"> us to</font>

353
00:14:19,269 --> 00:14:23,709
capture<font color="#CCCCCC"> non black box constructions</font><font color="#E5E5E5"> so</font>

354
00:14:21,970 --> 00:14:26,499
we do use this model<font color="#E5E5E5"> of Oracle</font><font color="#CCCCCC"> eiated</font>

355
00:14:23,709 --> 00:14:27,998
<font color="#E5E5E5">circuits and this model was first used</font>

356
00:14:26,499 --> 00:14:30,040
for circuits<font color="#E5E5E5"> only containing one</font>

357
00:14:27,999 --> 00:14:31,959
<font color="#CCCCCC">wavefunction gates</font><font color="#E5E5E5"> as in the</font>

358
00:14:30,040 --> 00:14:33,879
construction<font color="#E5E5E5"> on the previous slide and</font>

359
00:14:31,959 --> 00:14:36,008
this in particular<font color="#CCCCCC"> this model was first</font>

360
00:14:33,879 --> 00:14:37,839
introduced by<font color="#E5E5E5"> broker's brokers sceeto</font>

361
00:14:36,009 --> 00:14:40,660
<font color="#E5E5E5">and by a show</font><font color="#CCCCCC"> of and Sega's</font>

362
00:14:37,839 --> 00:14:43,110
but the problem here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> new</font>

363
00:14:40,660 --> 00:14:46,629
constructions overcame this type of

364
00:14:43,110 --> 00:14:49,149
model because they use obfuscation in a

365
00:14:46,629 --> 00:14:50,589
nested way such as<font color="#E5E5E5"> an obfuscator which</font>

366
00:14:49,149 --> 00:14:53,139
<font color="#E5E5E5">obviously</font><font color="#CCCCCC"> it's circuits</font><font color="#E5E5E5"> which itself</font>

367
00:14:50,589 --> 00:14:56,079
<font color="#E5E5E5">outputs an obvious gated circuit and so</font>

368
00:14:53,139 --> 00:14:59,679
forth one such construction is public

369
00:14:56,079 --> 00:15:02,800
<font color="#CCCCCC">encryption from sx IL so if we want to</font>

370
00:14:59,679 --> 00:15:05,740
<font color="#CCCCCC">capture</font><font color="#E5E5E5"> the most the the right class of</font>

371
00:15:02,800 --> 00:15:07,719
constructions<font color="#CCCCCC"> it's important</font><font color="#E5E5E5"> to capture</font>

372
00:15:05,740 --> 00:15:10,120
<font color="#E5E5E5">these types of constructions and this is</font>

373
00:15:07,720 --> 00:15:12,879
exactly<font color="#CCCCCC"> what was done</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> Garg mamuni and</font>

374
00:15:10,120 --> 00:15:17,019
<font color="#CCCCCC">muhammad who extended this to in this</font>

375
00:15:12,879 --> 00:15:19,389
context work for<font color="#CCCCCC"> obfuscate for</font>

376
00:15:17,019 --> 00:15:20,980
obfuscators which<font color="#CCCCCC"> accept circuits with</font>

377
00:15:19,389 --> 00:15:23,499
obfuscation gates and with one-way

378
00:15:20,980 --> 00:15:26,019
function gates<font color="#E5E5E5"> and we are exactly in</font>

379
00:15:23,499 --> 00:15:28,779
<font color="#E5E5E5">this extended model in our</font><font color="#CCCCCC"> result</font><font color="#E5E5E5"> so</font>

380
00:15:26,019 --> 00:15:30,459
this captures all all the techniques

381
00:15:28,779 --> 00:15:32,110
that<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been used</font><font color="#E5E5E5"> in this context and</font>

382
00:15:30,459 --> 00:15:33,939
in particularly

383
00:15:32,110 --> 00:15:36,100
<font color="#E5E5E5">it captures the</font><font color="#CCCCCC"> self-feeding</font><font color="#E5E5E5"> techniques</font>

384
00:15:33,940 --> 00:15:38,170
that are used<font color="#E5E5E5"> in these IO constructions</font>

385
00:15:36,100 --> 00:15:40,089
<font color="#E5E5E5">where there's an obfuscated circuit that</font>

386
00:15:38,170 --> 00:15:42,670
outputs<font color="#E5E5E5"> that obviously</font><font color="#CCCCCC"> a circuits for</font>

387
00:15:40,089 --> 00:15:44,620
<font color="#E5E5E5">the</font><font color="#CCCCCC"> obvious gate circuits</font><font color="#E5E5E5"> etc so we view</font>

388
00:15:42,670 --> 00:15:47,890
<font color="#CCCCCC">this that's really</font><font color="#E5E5E5"> ruling out the right</font>

389
00:15:44,620 --> 00:15:50,320
class of constructions one thing I'll

390
00:15:47,890 --> 00:15:54,670
add here is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> even if you don't care</font>

391
00:15:50,320 --> 00:15:56,860
about IO or<font color="#E5E5E5"> got</font><font color="#CCCCCC"> xio this is a non</font>

392
00:15:54,670 --> 00:15:58,899
<font color="#CCCCCC">blackbox tension of the classical</font><font color="#E5E5E5"> impala</font>

393
00:15:56,860 --> 00:16:01,360
lots of<font color="#CCCCCC"> rudik separation ruling out</font>

394
00:15:58,899 --> 00:16:03,880
<font color="#CCCCCC">blackbox constructions of public key</font>

395
00:16:01,360 --> 00:16:05,620
encryption from<font color="#CCCCCC"> one-way functions so</font>

396
00:16:03,880 --> 00:16:09,910
this does shed light on this very

397
00:16:05,620 --> 00:16:12,490
<font color="#CCCCCC">long-standing open problem</font><font color="#E5E5E5"> so now I'm</font>

398
00:16:09,910 --> 00:16:14,110
<font color="#E5E5E5">going to tell you a little bit about the</font>

399
00:16:12,490 --> 00:16:17,920
existence of compressing obfuscation

400
00:16:14,110 --> 00:16:19,450
with statistical security so if we want

401
00:16:17,920 --> 00:16:21,849
to<font color="#E5E5E5"> construct obfuscation with</font>

402
00:16:19,450 --> 00:16:25,209
statistical security<font color="#E5E5E5"> the main advantage</font>

403
00:16:21,850 --> 00:16:27,519
that we have over constructions<font color="#E5E5E5"> of for</font>

404
00:16:25,209 --> 00:16:29,890
<font color="#E5E5E5">example IO with statistical security is</font>

405
00:16:27,519 --> 00:16:32,470
that we can take advantage<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

406
00:16:29,890 --> 00:16:34,720
running time of<font color="#E5E5E5"> x io namely we know the</font>

407
00:16:32,470 --> 00:16:36,459
truth table<font color="#CCCCCC"> so the main point here is to</font>

408
00:16:34,720 --> 00:16:38,339
see how we can<font color="#CCCCCC"> use the truth table to</font>

409
00:16:36,459 --> 00:16:41,199
<font color="#E5E5E5">help us in these types of constructions</font>

410
00:16:38,339 --> 00:16:43,870
we're able to<font color="#CCCCCC"> obtain a statistically</font>

411
00:16:41,199 --> 00:16:46,870
secure<font color="#CCCCCC"> x</font><font color="#E5E5E5"> AO with perfect correctness for</font>

412
00:16:43,870 --> 00:16:49,000
<font color="#CCCCCC">a c0 but without put lengths slightly</font>

413
00:16:46,870 --> 00:16:51,190
worse than<font color="#CCCCCC"> what i've talked about</font><font color="#E5E5E5"> thus</font>

414
00:16:49,000 --> 00:16:53,800
far<font color="#E5E5E5"> namely output length 2 to the N</font>

415
00:16:51,190 --> 00:16:56,130
times<font color="#CCCCCC"> 1 minus little</font><font color="#E5E5E5"> o</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 1 so it's not</font>

416
00:16:53,800 --> 00:16:58,779
<font color="#E5E5E5">very strong compression but still</font><font color="#CCCCCC"> xio</font>

417
00:16:56,130 --> 00:17:00,760
the main tool we use to<font color="#CCCCCC"> get this</font>

418
00:16:58,779 --> 00:17:02,380
<font color="#CCCCCC">construction it's called circuit</font>

419
00:17:00,760 --> 00:17:06,609
compression and this was recently

420
00:17:02,380 --> 00:17:09,099
studied by<font color="#CCCCCC"> Chen at all</font><font color="#E5E5E5"> in 2015 circuit</font>

421
00:17:06,609 --> 00:17:11,319
compression in circuit compression<font color="#E5E5E5"> one</font>

422
00:17:09,099 --> 00:17:13,599
is given<font color="#E5E5E5"> the truth table</font><font color="#CCCCCC"> of some book of</font>

423
00:17:11,319 --> 00:17:16,569
some function f<font color="#E5E5E5"> and the goal is</font><font color="#CCCCCC"> to</font>

424
00:17:13,599 --> 00:17:18,609
<font color="#E5E5E5">output some circuit which computes</font><font color="#CCCCCC"> f but</font>

425
00:17:16,569 --> 00:17:20,770
the circuit has<font color="#CCCCCC"> to have non-trivial</font><font color="#E5E5E5"> size</font>

426
00:17:18,609 --> 00:17:22,859
<font color="#E5E5E5">can't just output the truth table</font><font color="#CCCCCC"> it has</font>

427
00:17:20,770 --> 00:17:25,869
to be<font color="#E5E5E5"> something smaller than</font><font color="#CCCCCC"> to 2 then</font>

428
00:17:22,859 --> 00:17:28,270
but that's<font color="#CCCCCC"> exactly the situation</font><font color="#E5E5E5"> that we</font>

429
00:17:25,869 --> 00:17:30,610
have<font color="#CCCCCC"> here with</font><font color="#E5E5E5"> exile</font><font color="#CCCCCC"> so if we want to</font>

430
00:17:28,270 --> 00:17:32,379
<font color="#E5E5E5">obtain</font><font color="#CCCCCC"> xio for a class which has a</font>

431
00:17:30,610 --> 00:17:34,178
circuit compression algorithm we can

432
00:17:32,380 --> 00:17:35,830
<font color="#CCCCCC">just take</font><font color="#E5E5E5"> the circuit run it on all the</font>

433
00:17:34,179 --> 00:17:37,150
inputs and then run the circuit

434
00:17:35,830 --> 00:17:39,820
compression algorithm on the truth table

435
00:17:37,150 --> 00:17:41,980
<font color="#E5E5E5">so by using these new results for</font>

436
00:17:39,820 --> 00:17:45,820
circuit compression for<font color="#CCCCCC"> AC 0 we get xio</font>

437
00:17:41,980 --> 00:17:48,040
<font color="#E5E5E5">for AC 0 now this construction is</font>

438
00:17:45,820 --> 00:17:49,899
very simple<font color="#E5E5E5"> all we're doing is getting</font>

439
00:17:48,040 --> 00:17:52,930
<font color="#E5E5E5">the truth table and then we're using no</font>

440
00:17:49,900 --> 00:17:54,550
results but it shows this<font color="#E5E5E5"> intrinsic</font>

441
00:17:52,930 --> 00:17:56,710
connection<font color="#E5E5E5"> between</font><font color="#CCCCCC"> X IO and</font><font color="#E5E5E5"> these</font>

442
00:17:54,550 --> 00:17:58,000
concepts and complexity theory<font color="#E5E5E5"> and thus</font>

443
00:17:56,710 --> 00:18:00,490
we do<font color="#E5E5E5"> view</font><font color="#CCCCCC"> it as one of the central</font>

444
00:17:58,000 --> 00:18:02,110
<font color="#E5E5E5">takeaways of this work one thing that</font>

445
00:18:00,490 --> 00:18:04,060
I'd hear is that<font color="#CCCCCC"> this</font><font color="#E5E5E5"> construction is</font>

446
00:18:02,110 --> 00:18:06,399
completely black box in the circuit it

447
00:18:04,060 --> 00:18:08,770
even implies compressing virtual black

448
00:18:06,400 --> 00:18:11,290
box obfuscation<font color="#CCCCCC"> so if we want</font><font color="#E5E5E5"> to use</font>

449
00:18:08,770 --> 00:18:12,760
this to get<font color="#CCCCCC"> X IO in a even in a</font>

450
00:18:11,290 --> 00:18:14,920
computational setting if we want to<font color="#E5E5E5"> use</font>

451
00:18:12,760 --> 00:18:19,390
these types of techniques<font color="#CCCCCC"> we need to use</font>

452
00:18:14,920 --> 00:18:21,460
the circuit in a non<font color="#E5E5E5"> black box way so we</font>

453
00:18:19,390 --> 00:18:23,560
also show a lower bound here we show

454
00:18:21,460 --> 00:18:25,750
<font color="#E5E5E5">that if you improve both the running</font>

455
00:18:23,560 --> 00:18:27,129
time and the output length<font color="#E5E5E5"> we get</font>

456
00:18:25,750 --> 00:18:30,340
non-trivial speed ups for the

457
00:18:27,130 --> 00:18:31,420
unsatisfiability problem but actually<font color="#E5E5E5"> we</font>

458
00:18:30,340 --> 00:18:33,429
show us something a little bit stronger

459
00:18:31,420 --> 00:18:35,710
<font color="#E5E5E5">we show that if you have an obfuscator</font>

460
00:18:33,430 --> 00:18:38,200
<font color="#E5E5E5">with both running time and output length</font>

461
00:18:35,710 --> 00:18:41,800
<font color="#CCCCCC">2 to the epsilon n for any epsilon be a</font>

462
00:18:38,200 --> 00:18:44,110
constant or a sub constant this implies

463
00:18:41,800 --> 00:18:46,480
that unset the unsatisfiability problem

464
00:18:44,110 --> 00:18:49,649
has an<font color="#E5E5E5"> AM protocol in which the verifier</font>

465
00:18:46,480 --> 00:18:52,030
runs in time roughly<font color="#CCCCCC"> 2 to the epsilon</font><font color="#E5E5E5"> n</font>

466
00:18:49,650 --> 00:18:54,730
so what I want to<font color="#CCCCCC"> point out here is this</font>

467
00:18:52,030 --> 00:18:56,649
<font color="#E5E5E5">conclusion this conclusion is one you</font>

468
00:18:54,730 --> 00:19:00,520
might<font color="#E5E5E5"> not have seen in some</font><font color="#CCCCCC"> of these</font>

469
00:18:56,650 --> 00:19:01,540
impossibility results and<font color="#CCCCCC"> actually it's</font>

470
00:19:00,520 --> 00:19:05,500
not<font color="#E5E5E5"> always false</font>

471
00:19:01,540 --> 00:19:07,629
so so by the recent breakthrough result

472
00:19:05,500 --> 00:19:09,730
of Williams it's actually true when

473
00:19:07,630 --> 00:19:11,380
epsilon<font color="#CCCCCC"> is 1/2</font><font color="#E5E5E5"> so we don't rule out</font>

474
00:19:09,730 --> 00:19:14,200
<font color="#E5E5E5">these compressing obfuscators when</font>

475
00:19:11,380 --> 00:19:16,720
epsilon<font color="#E5E5E5"> is 1/2 but for smaller epsilon</font>

476
00:19:14,200 --> 00:19:18,610
<font color="#CCCCCC">it's somewhat believed to be true that</font>

477
00:19:16,720 --> 00:19:20,650
<font color="#CCCCCC">has</font><font color="#E5E5E5"> otherwise unset would have this</font>

478
00:19:18,610 --> 00:19:22,889
<font color="#E5E5E5">non-trivial protocol</font><font color="#CCCCCC"> even though it's</font>

479
00:19:20,650 --> 00:19:25,480
not it's<font color="#E5E5E5"> just a little bit non-trivial</font>

480
00:19:22,890 --> 00:19:27,910
<font color="#CCCCCC">so this is just</font><font color="#E5E5E5"> another connection</font>

481
00:19:25,480 --> 00:19:32,590
<font color="#E5E5E5">between compressing obfuscators and</font>

482
00:19:27,910 --> 00:19:35,140
complexity theory so I have<font color="#CCCCCC"> two takeaway</font>

483
00:19:32,590 --> 00:19:37,240
messages for<font color="#E5E5E5"> this work the first is that</font>

484
00:19:35,140 --> 00:19:40,240
compressing obfuscation<font color="#E5E5E5"> it's really it's</font>

485
00:19:37,240 --> 00:19:42,100
unusual<font color="#CCCCCC"> it doesn't fit</font><font color="#E5E5E5"> into the</font>

486
00:19:40,240 --> 00:19:44,620
classical model of primitives that<font color="#CCCCCC"> we</font>

487
00:19:42,100 --> 00:19:47,020
have so far<font color="#CCCCCC"> and</font><font color="#E5E5E5"> by this I mean the</font>

488
00:19:44,620 --> 00:19:49,300
<font color="#CCCCCC">following in crypto we really like to</font>

489
00:19:47,020 --> 00:19:50,860
<font color="#E5E5E5">classify primitives into these bins like</font>

490
00:19:49,300 --> 00:19:54,010
a mini crypt or cut dough mania and

491
00:19:50,860 --> 00:19:56,620
these are<font color="#CCCCCC"> they're generally separated</font>

492
00:19:54,010 --> 00:19:59,230
<font color="#E5E5E5">and if I take something from a powerful</font>

493
00:19:56,620 --> 00:20:01,090
<font color="#E5E5E5">class like I take</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> and I</font>

494
00:19:59,230 --> 00:20:03,850
<font color="#CCCCCC">too many Krypt then all of a sudden I'm</font>

495
00:20:01,090 --> 00:20:06,699
gonna get basically everything but this

496
00:20:03,850 --> 00:20:09,010
<font color="#E5E5E5">is not</font><font color="#CCCCCC"> the case with exile with exile if</font>

497
00:20:06,700 --> 00:20:10,929
I add it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> mini</font><font color="#CCCCCC"> crypt</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> this desert</font>

498
00:20:09,010 --> 00:20:13,120
<font color="#E5E5E5">containing basically all my</font><font color="#CCCCCC"> functions</font>

499
00:20:10,929 --> 00:20:16,299
and all my functions applications<font color="#CCCCCC"> I get</font>

500
00:20:13,120 --> 00:20:18,518
nothing<font color="#CCCCCC"> I just get many crypt</font><font color="#E5E5E5"> but if I</font>

501
00:20:16,299 --> 00:20:21,179
add it<font color="#CCCCCC"> to crypto mania all of a</font><font color="#E5E5E5"> sudden</font>

502
00:20:18,519 --> 00:20:23,710
<font color="#E5E5E5">it in the right environment with the</font>

503
00:20:21,179 --> 00:20:26,679
applications of<font color="#E5E5E5"> lwe that it needs it</font>

504
00:20:23,710 --> 00:20:27,730
gets to<font color="#CCCCCC"> IB sopia</font><font color="#E5E5E5"> and all of its</font>

505
00:20:26,679 --> 00:20:31,539
applications

506
00:20:27,730 --> 00:20:34,960
so that's exhale<font color="#E5E5E5"> it just it's not it's a</font>

507
00:20:31,539 --> 00:20:39,100
very non-standard<font color="#E5E5E5"> the second takeaway</font>

508
00:20:34,960 --> 00:20:41,320
message of<font color="#E5E5E5"> this work is that</font><font color="#CCCCCC"> xio doesn't</font>

509
00:20:39,100 --> 00:20:43,149
compress running time and this<font color="#E5E5E5"> type</font><font color="#CCCCCC"> of</font>

510
00:20:41,320 --> 00:20:43,750
compression<font color="#E5E5E5"> in running time and an</font>

511
00:20:43,149 --> 00:20:47,860
output length

512
00:20:43,750 --> 00:20:50,370
it seems inherent<font color="#E5E5E5"> for IO and as some</font>

513
00:20:47,860 --> 00:20:53,709
evidence for<font color="#E5E5E5"> this we have the following</font>

514
00:20:50,370 --> 00:20:57,969
so recall<font color="#E5E5E5"> as I've said that</font><font color="#CCCCCC"> X io + LW e</font>

515
00:20:53,710 --> 00:20:59,620
<font color="#CCCCCC">implies</font><font color="#E5E5E5"> IO now x io here it compresses</font>

516
00:20:57,970 --> 00:21:02,710
you<font color="#E5E5E5"> could view it as</font><font color="#CCCCCC"> thing which</font>

517
00:20:59,620 --> 00:21:05,199
compresses the size of the function<font color="#CCCCCC"> that</font>

518
00:21:02,710 --> 00:21:07,620
it<font color="#CCCCCC"> receives</font><font color="#E5E5E5"> it doesn't compress in</font>

519
00:21:05,200 --> 00:21:10,570
running time it only compresses in size

520
00:21:07,620 --> 00:21:12,309
<font color="#CCCCCC">lwe in this transformation</font><font color="#E5E5E5"> is used to</font>

521
00:21:10,570 --> 00:21:15,340
<font color="#E5E5E5">create a type of functional encryption</font>

522
00:21:12,309 --> 00:21:17,470
<font color="#E5E5E5">due to</font><font color="#CCCCCC"> goldwasser at all which</font><font color="#E5E5E5"> you can</font>

523
00:21:15,340 --> 00:21:21,668
view as compressing only in time but<font color="#E5E5E5"> not</font>

524
00:21:17,470 --> 00:21:23,380
<font color="#CCCCCC">in</font><font color="#E5E5E5"> size so it seems that x io</font><font color="#CCCCCC"> and lwe</font>

525
00:21:21,669 --> 00:21:25,840
here are compressing along different

526
00:21:23,380 --> 00:21:28,210
axes<font color="#E5E5E5"> and somehow working together to</font>

527
00:21:25,840 --> 00:21:31,178
give<font color="#CCCCCC"> us aisle and both of these type of</font>

528
00:21:28,210 --> 00:21:35,559
compression<font color="#CCCCCC"> seem inherent because</font><font color="#E5E5E5"> x io</font>

529
00:21:31,179 --> 00:21:37,120
<font color="#E5E5E5">without</font><font color="#CCCCCC"> lwe gives us nothing</font><font color="#E5E5E5"> so for that</font>

530
00:21:35,559 --> 00:21:39,010
<font color="#CCCCCC">reason it seems</font><font color="#E5E5E5"> that compression is</font>

531
00:21:37,120 --> 00:21:43,449
really the<font color="#E5E5E5"> right one of the right</font>

532
00:21:39,010 --> 00:21:49,299
approaches towards studying<font color="#CCCCCC"> io thank you</font>

533
00:21:43,450 --> 00:21:49,299
[Applause]

