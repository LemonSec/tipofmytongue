1
00:00:05,870 --> 00:00:09,710
<font color="#E5E5E5">okay so I'm going to</font>

2
00:00:07,730 --> 00:00:11,690
about the limits of practical<font color="#CCCCCC"> sublinear</font>

3
00:00:09,710 --> 00:00:15,620
secure<font color="#CCCCCC"> computation which is a joint work</font>

4
00:00:11,690 --> 00:00:17,300
<font color="#CCCCCC">with</font><font color="#E5E5E5"> in Latin</font><font color="#CCCCCC"> your Val security party</font>

5
00:00:15,620 --> 00:00:19,280
<font color="#E5E5E5">computation allows the set of two</font>

6
00:00:17,300 --> 00:00:21,710
parties to compute a joint function<font color="#E5E5E5"> on</font>

7
00:00:19,280 --> 00:00:23,539
the inputs in such a way that the<font color="#E5E5E5"> honest</font>

8
00:00:21,710 --> 00:00:25,279
party receives the<font color="#CCCCCC"> correct output</font><font color="#E5E5E5"> and</font>

9
00:00:23,539 --> 00:00:27,679
the<font color="#CCCCCC"> output is the only new information</font>

10
00:00:25,279 --> 00:00:30,470
<font color="#CCCCCC">leaked</font><font color="#E5E5E5"> and we want this to halt in</font><font color="#CCCCCC"> the</font>

11
00:00:27,679 --> 00:00:32,060
presence of an adversary<font color="#CCCCCC"> in</font><font color="#E5E5E5"> our work for</font>

12
00:00:30,470 --> 00:00:35,000
simplicity the adversary is going<font color="#CCCCCC"> to be</font>

13
00:00:32,060 --> 00:00:39,500
semi honest and our negative result will

14
00:00:35,000 --> 00:00:42,590
translate to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> militia setting so</font><font color="#E5E5E5"> we</font>

15
00:00:39,500 --> 00:00:46,280
live in<font color="#CCCCCC"> a world with ever-expanding</font>

16
00:00:42,590 --> 00:00:48,379
volumes of data<font color="#E5E5E5"> and our ability to</font>

17
00:00:46,280 --> 00:00:51,620
collect and analyze this data<font color="#E5E5E5"> increases</font>

18
00:00:48,379 --> 00:00:54,079
our understanding<font color="#E5E5E5"> and while</font><font color="#CCCCCC"> big data</font>

19
00:00:51,620 --> 00:00:58,160
technology<font color="#E5E5E5"> offers great promises it</font>

20
00:00:54,079 --> 00:00:59,929
poses<font color="#CCCCCC"> a challenge</font><font color="#E5E5E5"> we want to compute and</font>

21
00:00:58,160 --> 00:01:02,870
perform complex computations while

22
00:00:59,929 --> 00:01:04,699
preserving the privacy and we want to

23
00:01:02,870 --> 00:01:06,620
<font color="#E5E5E5">ask this guy to perform like complex</font>

24
00:01:04,699 --> 00:01:08,600
computation<font color="#CCCCCC"> on big</font><font color="#E5E5E5"> data and secure</font>

25
00:01:06,620 --> 00:01:12,410
computation<font color="#E5E5E5"> and we don't want this to</font>

26
00:01:08,600 --> 00:01:14,539
happen<font color="#CCCCCC"> so</font><font color="#E5E5E5"> efficiency of secure</font>

27
00:01:12,410 --> 00:01:17,570
multi-party<font color="#E5E5E5"> two-party computation</font>

28
00:01:14,540 --> 00:01:19,910
<font color="#E5E5E5">protocols and</font><font color="#CCCCCC"> Big Data refers to how</font>

29
00:01:17,570 --> 00:01:22,279
much<font color="#E5E5E5"> data we need to transfer during the</font>

30
00:01:19,910 --> 00:01:24,470
execution<font color="#E5E5E5"> of the protocol refer to</font><font color="#CCCCCC"> as</font>

31
00:01:22,280 --> 00:01:26,270
communication complexity<font color="#E5E5E5"> and how quickly</font>

32
00:01:24,470 --> 00:01:29,000
the protocol runs<font color="#CCCCCC"> referred to as</font>

33
00:01:26,270 --> 00:01:31,160
<font color="#CCCCCC">computational complexity so with no one</font>

34
00:01:29,000 --> 00:01:34,730
I have complexities that<font color="#E5E5E5"> grow linear</font>

35
00:01:31,160 --> 00:01:38,090
with the input size of the<font color="#CCCCCC"> database</font><font color="#E5E5E5"> and</font>

36
00:01:34,730 --> 00:01:40,250
we have actually all genetic protocols

37
00:01:38,090 --> 00:01:43,310
<font color="#E5E5E5">that we know they have sub linear</font>

38
00:01:40,250 --> 00:01:45,650
<font color="#E5E5E5">communication complexity in the</font><font color="#CCCCCC"> size</font><font color="#E5E5E5"> of</font>

39
00:01:43,310 --> 00:01:48,070
the<font color="#E5E5E5"> database like fully homomorphic</font>

40
00:01:45,650 --> 00:01:50,570
encryption and PIR based protocols

41
00:01:48,070 --> 00:01:53,000
however<font color="#CCCCCC"> these protocols</font><font color="#E5E5E5"> pay the price of</font>

42
00:01:50,570 --> 00:01:55,570
high<font color="#CCCCCC"> computational complexity which is</font>

43
00:01:53,000 --> 00:01:58,400
linear in the input size of the database

44
00:01:55,570 --> 00:02:00,559
<font color="#E5E5E5">and in fact it's like bad linear in the</font>

45
00:01:58,400 --> 00:02:02,870
sense<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> doesn't require</font><font color="#E5E5E5"> symmetric</font>

46
00:02:00,560 --> 00:02:07,070
crypto operation but it<font color="#E5E5E5"> requires heavy</font>

47
00:02:02,870 --> 00:02:08,080
public key operations so ideally we

48
00:02:07,070 --> 00:02:11,060
would like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have sub linear</font>

49
00:02:08,080 --> 00:02:13,400
computational complexity as well<font color="#E5E5E5"> and if</font>

50
00:02:11,060 --> 00:02:15,920
we<font color="#E5E5E5"> stuck with linear computational</font>

51
00:02:13,400 --> 00:02:17,569
complexity<font color="#CCCCCC"> it better be symmetric key</font>

52
00:02:15,920 --> 00:02:19,429
operations and not have a public<font color="#CCCCCC"> key</font>

53
00:02:17,569 --> 00:02:21,780
operations

54
00:02:19,430 --> 00:02:23,040
so from now on when I will refer to

55
00:02:21,780 --> 00:02:25,920
<font color="#E5E5E5">communication complexity</font>

56
00:02:23,040 --> 00:02:28,170
<font color="#E5E5E5">I would always mean sub linear so we</font>

57
00:02:25,920 --> 00:02:30,569
said<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> PR protocols and</font><font color="#CCCCCC"> fhc</font>

58
00:02:28,170 --> 00:02:33,599
protocols they have linear computational

59
00:02:30,569 --> 00:02:35,819
complexity see here I mark them<font color="#E5E5E5"> with the</font>

60
00:02:33,599 --> 00:02:38,250
red sign<font color="#E5E5E5"> but there are some</font><font color="#CCCCCC"> exceptions</font>

61
00:02:35,819 --> 00:02:40,589
<font color="#CCCCCC">so there's some combinatorial problems</font>

62
00:02:38,250 --> 00:02:42,810
<font color="#CCCCCC">and which</font><font color="#E5E5E5"> are actually some graph</font>

63
00:02:40,590 --> 00:02:45,690
problems were like the two<font color="#CCCCCC"> parties have</font>

64
00:02:42,810 --> 00:02:48,090
<font color="#E5E5E5">some like parts of the graph but</font>

65
00:02:45,690 --> 00:02:50,730
actually do<font color="#E5E5E5"> enjoy sub linear computation</font>

66
00:02:48,090 --> 00:02:53,220
<font color="#E5E5E5">and communication complexity like</font><font color="#CCCCCC"> it's</font>

67
00:02:50,730 --> 00:02:54,090
the median convex hull single source or

68
00:02:53,220 --> 00:02:55,920
<font color="#CCCCCC">the destination</font>

69
00:02:54,090 --> 00:02:58,049
approximate set cover<font color="#E5E5E5"> and all pair</font>

70
00:02:55,920 --> 00:03:01,679
<font color="#E5E5E5">shortest distance and minimum spanning</font>

71
00:02:58,049 --> 00:03:04,190
trees so<font color="#E5E5E5"> that this works</font><font color="#CCCCCC"> a gravel at all</font>

72
00:03:01,680 --> 00:03:07,760
<font color="#CCCCCC">brick URLs Manta Cove and salat</font><font color="#E5E5E5"> and mu2</font>

73
00:03:04,190 --> 00:03:09,810
<font color="#E5E5E5">they provide it as I call them easy</font>

74
00:03:07,760 --> 00:03:12,599
<font color="#E5E5E5">protocols which enjoy</font><font color="#CCCCCC"> sub</font><font color="#E5E5E5"> linear</font>

75
00:03:09,810 --> 00:03:14,819
communication<font color="#E5E5E5"> and computation so are</font>

76
00:03:12,599 --> 00:03:19,108
these<font color="#CCCCCC"> like functionalities here</font><font color="#E5E5E5"> a</font>

77
00:03:14,819 --> 00:03:23,780
special case so<font color="#CCCCCC"> are all can we have more</font>

78
00:03:19,109 --> 00:03:27,510
functionalities with<font color="#E5E5E5"> these complexities</font>

79
00:03:23,780 --> 00:03:30,480
so can we characterize which functions

80
00:03:27,510 --> 00:03:32,220
can and cannot be computed<font color="#CCCCCC"> with sub</font>

81
00:03:30,480 --> 00:03:33,869
linear overhead<font color="#E5E5E5"> okay</font>

82
00:03:32,220 --> 00:03:35,790
are<font color="#E5E5E5"> these the median problem in the</font>

83
00:03:33,870 --> 00:03:39,329
comments called<font color="#E5E5E5"> only like isolated cases</font>

84
00:03:35,790 --> 00:03:42,418
so can we classify these functions we're

85
00:03:39,329 --> 00:03:46,880
going to actually<font color="#E5E5E5"> provide a framework</font>

86
00:03:42,419 --> 00:03:50,430
for separating hard and easy problems

87
00:03:46,880 --> 00:03:53,069
<font color="#CCCCCC">and once we have such a framework</font><font color="#E5E5E5"> we can</font>

88
00:03:50,430 --> 00:03:57,359
<font color="#CCCCCC">actually provide formal reduction sewing</font>

89
00:03:53,069 --> 00:04:00,328
if the problems actually are hard it's

90
00:03:57,359 --> 00:04:01,889
like<font color="#E5E5E5"> the NP completeness</font><font color="#CCCCCC"> what we like we</font>

91
00:04:00,329 --> 00:04:03,599
<font color="#CCCCCC">can show that</font><font color="#E5E5E5"> some variants of some</font>

92
00:04:01,889 --> 00:04:06,959
protocols are easy and<font color="#CCCCCC"> some of them are</font>

93
00:04:03,599 --> 00:04:10,349
hard and moreover we<font color="#E5E5E5"> are going to</font>

94
00:04:06,959 --> 00:04:12,060
provide some intermediate hardness which

95
00:04:10,349 --> 00:04:14,668
is going<font color="#E5E5E5"> to cut two protocols</font><font color="#CCCCCC"> that are</font>

96
00:04:12,060 --> 00:04:16,889
neither easy on your heart<font color="#E5E5E5"> it's like</font>

97
00:04:14,669 --> 00:04:19,168
<font color="#E5E5E5">with np-complete and be completely like</font>

98
00:04:16,889 --> 00:04:20,579
<font color="#CCCCCC">meant that Factory factoring is</font>

99
00:04:19,168 --> 00:04:22,770
conjectured to be<font color="#E5E5E5"> like</font>

100
00:04:20,579 --> 00:04:25,010
<font color="#CCCCCC">nodes</font><font color="#E5E5E5"> to be np-hard but we believe it's</font>

101
00:04:22,770 --> 00:04:25,010
hard

102
00:04:26,280 --> 00:04:30,419
and we're<font color="#E5E5E5"> going to consider three types</font>

103
00:04:28,140 --> 00:04:32,280
of functionalities so we have the<font color="#CCCCCC"> two</font>

104
00:04:30,420 --> 00:04:34,500
<font color="#CCCCCC">sided functionalities</font><font color="#E5E5E5"> where both parties</font>

105
00:04:32,280 --> 00:04:37,200
<font color="#E5E5E5">receive the output then we have</font>

106
00:04:34,500 --> 00:04:40,890
<font color="#CCCCCC">one-sided functionalities</font><font color="#E5E5E5"> where only one</font>

107
00:04:37,200 --> 00:04:42,539
party receives the output<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and the</font>

108
00:04:40,890 --> 00:04:44,159
<font color="#CCCCCC">one sending functionalities are going to</font>

109
00:04:42,540 --> 00:04:47,850
imply this<font color="#E5E5E5"> secret</font><font color="#CCCCCC"> cert other</font>

110
00:04:44,160 --> 00:04:50,400
functionalities<font color="#E5E5E5"> where one party it can</font>

111
00:04:47,850 --> 00:04:52,260
be<font color="#E5E5E5"> viewed as one party that receives the</font>

112
00:04:50,400 --> 00:04:54,750
output in a secret<font color="#E5E5E5"> third form the</font>

113
00:04:52,260 --> 00:04:56,700
brackets means the<font color="#CCCCCC"> concerned and then he</font>

114
00:04:54,750 --> 00:04:59,310
can send the secret<font color="#CCCCCC"> set output to the</font>

115
00:04:56,700 --> 00:05:01,979
other party<font color="#E5E5E5"> so this is a</font><font color="#CCCCCC"> two-sided</font>

116
00:04:59,310 --> 00:05:03,360
functionality where parties get secret

117
00:05:01,980 --> 00:05:05,070
server<font color="#E5E5E5"> in of the outputs and this is</font>

118
00:05:03,360 --> 00:05:08,700
very<font color="#CCCCCC"> useful when I</font><font color="#E5E5E5"> want to compose many</font>

119
00:05:05,070 --> 00:05:12,200
<font color="#CCCCCC">NPC protocols</font><font color="#E5E5E5"> like put an ABC protocol</font>

120
00:05:08,700 --> 00:05:12,200
in a larger<font color="#E5E5E5"> and</font><font color="#CCCCCC"> BC protocol</font>

121
00:05:14,630 --> 00:05:19,409
so we're going to take the<font color="#E5E5E5"> one-sided</font>

122
00:05:17,310 --> 00:05:21,210
version of all these<font color="#E5E5E5"> problems</font><font color="#CCCCCC"> and the</font>

123
00:05:19,410 --> 00:05:23,040
secret server of all these<font color="#E5E5E5"> problems and</font>

124
00:05:21,210 --> 00:05:31,260
<font color="#E5E5E5">in fact we're going to show that they</font>

125
00:05:23,040 --> 00:05:35,070
they<font color="#E5E5E5"> are hard the answer is true so to</font>

126
00:05:31,260 --> 00:05:36,570
<font color="#CCCCCC">capture this hardness the measure</font><font color="#E5E5E5"> weight</font>

127
00:05:35,070 --> 00:05:39,419
that we are<font color="#E5E5E5"> going to use is private</font>

128
00:05:36,570 --> 00:05:42,690
information retrieval<font color="#E5E5E5"> let me first</font>

129
00:05:39,419 --> 00:05:45,060
define you the problem so the problem is

130
00:05:42,690 --> 00:05:47,840
very<font color="#E5E5E5"> simple we have Alice and she</font><font color="#CCCCCC"> wants</font>

131
00:05:45,060 --> 00:05:50,700
<font color="#CCCCCC">to get some entry from a remote database</font>

132
00:05:47,840 --> 00:05:53,810
so<font color="#E5E5E5"> sends a request</font><font color="#CCCCCC"> and she wants to</font>

133
00:05:50,700 --> 00:05:57,120
<font color="#E5E5E5">receive back the entry at location</font><font color="#CCCCCC"> I</font>

134
00:05:53,810 --> 00:05:59,340
<font color="#CCCCCC">okay and the progress</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> don't</font>

135
00:05:57,120 --> 00:06:03,020
<font color="#E5E5E5">want the server to learn anything about</font>

136
00:05:59,340 --> 00:06:06,000
<font color="#E5E5E5">the index I so is this possible</font>

137
00:06:03,020 --> 00:06:09,570
there's a<font color="#E5E5E5"> trivial solution so Alice can</font>

138
00:06:06,000 --> 00:06:12,750
send like a generic request like wake<font color="#E5E5E5"> up</font>

139
00:06:09,570 --> 00:06:16,469
<font color="#E5E5E5">and then the database sends back like</font>

140
00:06:12,750 --> 00:06:18,600
<font color="#E5E5E5">all the entries</font><font color="#CCCCCC"> that it has ok so does</font>

141
00:06:16,470 --> 00:06:21,240
<font color="#CCCCCC">this satisfy the the privacy notion yes</font>

142
00:06:18,600 --> 00:06:24,300
because I mean the database<font color="#E5E5E5"> sends all</font>

143
00:06:21,240 --> 00:06:27,770
<font color="#E5E5E5">the data so she cannot learn anything</font>

144
00:06:24,300 --> 00:06:30,270
about<font color="#E5E5E5"> the index</font><font color="#CCCCCC"> I of the of</font><font color="#E5E5E5"> Alice</font>

145
00:06:27,770 --> 00:06:32,180
however this is very<font color="#CCCCCC"> inefficient the</font>

146
00:06:30,270 --> 00:06:34,729
communication complexity<font color="#CCCCCC"> is huge</font>

147
00:06:32,180 --> 00:06:37,790
imagine that<font color="#E5E5E5"> the server is Google and</font>

148
00:06:34,729 --> 00:06:39,680
<font color="#E5E5E5">Alice asks for like a website and then</font>

149
00:06:37,790 --> 00:06:42,460
the server<font color="#E5E5E5"> sends back the whole internet</font>

150
00:06:39,680 --> 00:06:45,290
and I say<font color="#E5E5E5"> okay try to find your website</font>

151
00:06:42,460 --> 00:06:47,930
<font color="#E5E5E5">so what do we want</font><font color="#CCCCCC"> to do oops we have</font>

152
00:06:45,290 --> 00:06:49,520
this<font color="#E5E5E5"> non-trivial</font><font color="#CCCCCC"> T requirement that</font><font color="#E5E5E5"> we</font>

153
00:06:47,930 --> 00:06:51,440
want the communication complexity<font color="#E5E5E5"> to be</font>

154
00:06:49,520 --> 00:06:55,370
sub linear in the input size of<font color="#E5E5E5"> the</font>

155
00:06:51,440 --> 00:06:57,380
<font color="#CCCCCC">database and based on the current state</font>

156
00:06:55,370 --> 00:06:59,120
<font color="#CCCCCC">of the art on one server</font><font color="#E5E5E5"> pit protocols</font>

157
00:06:57,380 --> 00:07:00,710
like<font color="#E5E5E5"> ver acquire communication</font>

158
00:06:59,120 --> 00:07:04,190
<font color="#E5E5E5">complexity with the sub linear in the</font>

159
00:07:00,710 --> 00:07:06,229
input size but they require a lot<font color="#CCCCCC"> of</font>

160
00:07:04,190 --> 00:07:08,140
computational complexity and this<font color="#E5E5E5"> is</font>

161
00:07:06,230 --> 00:07:10,850
inherent even if we have pre-processing

162
00:07:08,140 --> 00:07:15,080
<font color="#CCCCCC">and as I said</font><font color="#E5E5E5"> before it even requires a</font>

163
00:07:10,850 --> 00:07:17,150
lot<font color="#CCCCCC"> of public key operations</font><font color="#E5E5E5"> and despite</font>

164
00:07:15,080 --> 00:07:19,250
these great advances in lattice<font color="#E5E5E5"> base</font>

165
00:07:17,150 --> 00:07:22,099
<font color="#CCCCCC">pair protocols like then the system</font>

166
00:07:19,250 --> 00:07:25,300
<font color="#CCCCCC">expiry and still peel still these</font>

167
00:07:22,100 --> 00:07:31,670
systems are magnitudes<font color="#CCCCCC"> of orders like</font>

168
00:07:25,300 --> 00:07:32,810
slower than symmetric key operation yeah

169
00:07:31,670 --> 00:07:34,370
and we cannot have<font color="#CCCCCC"> one server</font>

170
00:07:32,810 --> 00:07:36,170
information<font color="#E5E5E5"> theoretic</font><font color="#CCCCCC"> peer so I wouldn't</font>

171
00:07:34,370 --> 00:07:40,070
if you<font color="#E5E5E5"> have pre-processing like that</font>

172
00:07:36,170 --> 00:07:42,920
it's not<font color="#CCCCCC"> going to help yeah and also</font>

173
00:07:40,070 --> 00:07:44,000
there's<font color="#E5E5E5"> more work</font><font color="#CCCCCC"> so assuming</font><font color="#E5E5E5"> some</font>

174
00:07:42,920 --> 00:07:46,190
people setting but they're still<font color="#E5E5E5"> very</font>

175
00:07:44,000 --> 00:07:49,340
<font color="#E5E5E5">slow so given the current state</font><font color="#CCCCCC"> of</font>

176
00:07:46,190 --> 00:07:50,750
affairs<font color="#E5E5E5"> like we can see that</font><font color="#CCCCCC"> Pierre is</font>

177
00:07:49,340 --> 00:07:53,239
<font color="#E5E5E5">really the measure that can really</font>

178
00:07:50,750 --> 00:07:55,580
capture<font color="#CCCCCC"> the hardness of</font><font color="#E5E5E5"> two PC protocols</font>

179
00:07:53,240 --> 00:07:57,110
because<font color="#E5E5E5"> if a protocol reduces to peel</font>

180
00:07:55,580 --> 00:07:59,960
then it really<font color="#E5E5E5"> means</font><font color="#CCCCCC"> that it's going to</font>

181
00:07:57,110 --> 00:08:05,090
have linear computational complexity and

182
00:07:59,960 --> 00:08:07,520
even given pre-processing so this brings

183
00:08:05,090 --> 00:08:10,909
me<font color="#E5E5E5"> to</font><font color="#CCCCCC"> our framework</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> we define</font><font color="#E5E5E5"> Pierre</font>

184
00:08:07,520 --> 00:08:14,090
hardness<font color="#E5E5E5"> and a problem</font><font color="#CCCCCC"> is very hard</font><font color="#E5E5E5"> if</font>

185
00:08:10,910 --> 00:08:16,490
any secure protocol for this problem

186
00:08:14,090 --> 00:08:18,859
<font color="#E5E5E5">implies non-trivial Pierre on a large</font>

187
00:08:16,490 --> 00:08:21,560
database<font color="#CCCCCC"> non-trivial I mean that we have</font>

188
00:08:18,860 --> 00:08:24,350
sub linear communication<font color="#E5E5E5"> complexity and</font>

189
00:08:21,560 --> 00:08:25,220
if this<font color="#E5E5E5"> happens that means that this</font>

190
00:08:24,350 --> 00:08:27,230
<font color="#CCCCCC">program</font><font color="#E5E5E5"> really</font>

191
00:08:25,220 --> 00:08:29,420
<font color="#CCCCCC">inherence all like the bad consequences</font>

192
00:08:27,230 --> 00:08:32,330
<font color="#CCCCCC">that Pierre has like the bad</font>

193
00:08:29,420 --> 00:08:34,100
<font color="#E5E5E5">communication complexity and he says</font>

194
00:08:32,330 --> 00:08:36,260
like the simplest notion that<font color="#CCCCCC"> we'll</font>

195
00:08:34,100 --> 00:08:39,500
provide<font color="#E5E5E5"> in our paper</font><font color="#CCCCCC"> we say that the two</font>

196
00:08:36,260 --> 00:08:41,689
<font color="#CCCCCC">party functionality is</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> hard if</font>

197
00:08:39,500 --> 00:08:45,560
<font color="#E5E5E5">there is a single server protocol on a</font>

198
00:08:41,690 --> 00:08:48,590
<font color="#E5E5E5">database of the size end-to-end making a</font>

199
00:08:45,560 --> 00:08:49,189
<font color="#E5E5E5">single call to</font><font color="#CCCCCC"> the function</font><font color="#E5E5E5"> f and this</font>

200
00:08:48,590 --> 00:08:50,959
<font color="#CCCCCC">no</font>

201
00:08:49,190 --> 00:08:57,649
we can<font color="#CCCCCC"> actually extend</font><font color="#E5E5E5"> it to multiple</font>

202
00:08:50,959 --> 00:08:59,388
calls so now I'm going<font color="#E5E5E5"> to show you like</font>

203
00:08:57,649 --> 00:09:03,620
a simple example why the<font color="#CCCCCC"> one-sided</font>

204
00:08:59,389 --> 00:09:05,480
median problem<font color="#E5E5E5"> is peer hard so what is</font>

205
00:09:03,620 --> 00:09:08,480
the median protocol like<font color="#E5E5E5"> to party server</font>

206
00:09:05,480 --> 00:09:10,519
list of some<font color="#CCCCCC"> chimerical entries</font><font color="#E5E5E5"> and they</font>

207
00:09:08,480 --> 00:09:15,170
want<font color="#E5E5E5"> to find the median</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the combined</font>

208
00:09:10,519 --> 00:09:17,480
set and it's one-sided so only Alice

209
00:09:15,170 --> 00:09:19,969
will get the output<font color="#E5E5E5"> so to prove</font><font color="#CCCCCC"> that the</font>

210
00:09:17,480 --> 00:09:21,910
one-sided<font color="#E5E5E5"> median is pure heart we're</font>

211
00:09:19,970 --> 00:09:24,740
<font color="#E5E5E5">going to construct a</font><font color="#CCCCCC"> pill protocol</font>

212
00:09:21,910 --> 00:09:27,910
making<font color="#E5E5E5"> only a single Oracle call to this</font>

213
00:09:24,740 --> 00:09:30,560
function f to<font color="#CCCCCC"> the medium functionality</font>

214
00:09:27,910 --> 00:09:32,810
so how<font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that here we</font>

215
00:09:30,560 --> 00:09:38,209
<font color="#CCCCCC">have Alice and Bob</font><font color="#E5E5E5"> no it's not Bob with</font>

216
00:09:32,810 --> 00:09:41,180
the<font color="#E5E5E5"> server so how we're going to make</font>

217
00:09:38,209 --> 00:09:42,680
our call to the<font color="#CCCCCC"> medium functionality</font><font color="#E5E5E5"> so</font>

218
00:09:41,180 --> 00:09:45,079
for<font color="#E5E5E5"> simplicity suppose that the server</font>

219
00:09:42,680 --> 00:09:47,378
<font color="#E5E5E5">has only two entries so what he's going</font>

220
00:09:45,079 --> 00:09:50,029
to<font color="#E5E5E5"> do he's going</font><font color="#CCCCCC"> to sort the two entries</font>

221
00:09:47,379 --> 00:09:53,120
and then suppose that<font color="#E5E5E5"> alice is</font>

222
00:09:50,029 --> 00:09:56,240
interested in the first<font color="#E5E5E5"> element say I is</font>

223
00:09:53,120 --> 00:09:58,399
<font color="#E5E5E5">zero so then the two parties are going</font>

224
00:09:56,240 --> 00:10:01,189
<font color="#E5E5E5">to call the medium functionality with</font>

225
00:09:58,399 --> 00:10:02,480
these<font color="#E5E5E5"> inputs</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> 0 and</font><font color="#CCCCCC"> the 1 and</font>

226
00:10:01,189 --> 00:10:04,939
the minimum<font color="#CCCCCC"> element</font><font color="#E5E5E5"> where the minimum</font>

227
00:10:02,480 --> 00:10:11,180
element<font color="#E5E5E5"> is like the smallest element</font><font color="#CCCCCC"> in</font>

228
00:10:04,939 --> 00:10:13,160
the field<font color="#CCCCCC"> where the numbers lie so now</font>

229
00:10:11,180 --> 00:10:14,449
if we<font color="#E5E5E5"> run the medium protocol so you can</font>

230
00:10:13,160 --> 00:10:16,939
see<font color="#E5E5E5"> that the order</font><font color="#CCCCCC"> of the elements is</font>

231
00:10:14,449 --> 00:10:19,490
<font color="#CCCCCC">going to be like this</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that would the</font>

232
00:10:16,939 --> 00:10:23,750
medium is<font color="#E5E5E5"> going to be like the</font><font color="#CCCCCC"> d0</font><font color="#E5E5E5"> so in</font>

233
00:10:19,490 --> 00:10:25,370
that case unless we received<font color="#CCCCCC"> d0</font><font color="#E5E5E5"> and here</font>

234
00:10:23,750 --> 00:10:28,509
we<font color="#E5E5E5"> can see that we constructed</font><font color="#CCCCCC"> Pierre</font>

235
00:10:25,370 --> 00:10:31,220
where Alice is getting this<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and</font>

236
00:10:28,509 --> 00:10:34,220
likewise if<font color="#E5E5E5"> I is interested in the</font>

237
00:10:31,220 --> 00:10:37,220
<font color="#E5E5E5">second element this is going to put the</font>

238
00:10:34,220 --> 00:10:40,639
max element in the in the field<font color="#E5E5E5"> and then</font>

239
00:10:37,220 --> 00:10:44,630
the ordering is going to be like this<font color="#CCCCCC"> ok</font>

240
00:10:40,639 --> 00:10:46,819
<font color="#CCCCCC">not d1 is the</font><font color="#E5E5E5"> median element and then</font>

241
00:10:44,630 --> 00:10:49,730
the protocol is gonna give the<font color="#CCCCCC"> 1 to</font>

242
00:10:46,819 --> 00:10:51,529
Alice<font color="#CCCCCC"> ok that was</font><font color="#E5E5E5"> a toy exam and for</font><font color="#CCCCCC"> the</font>

243
00:10:49,730 --> 00:10:54,110
<font color="#E5E5E5">generic case</font><font color="#CCCCCC"> 1 we have like</font><font color="#E5E5E5"> many data in</font>

244
00:10:51,529 --> 00:10:57,170
the database<font color="#CCCCCC"> the client is trying to</font>

245
00:10:54,110 --> 00:10:57,769
make the set<font color="#E5E5E5"> such as the median element</font>

246
00:10:57,170 --> 00:11:02,059
is

247
00:10:57,769 --> 00:11:03,529
<font color="#CCCCCC">once</font><font color="#E5E5E5"> through the database so you can</font>

248
00:11:02,059 --> 00:11:05,329
actually<font color="#E5E5E5"> notice that this reduction</font>

249
00:11:03,529 --> 00:11:07,639
<font color="#E5E5E5">completely fails if we're in the</font>

250
00:11:05,329 --> 00:11:09,498
<font color="#CCCCCC">two-sided case</font><font color="#E5E5E5"> because if the server</font>

251
00:11:07,639 --> 00:11:12,350
receives the element d0 and d1 he can

252
00:11:09,499 --> 00:11:14,509
<font color="#E5E5E5">really see the index of the client what</font>

253
00:11:12,350 --> 00:11:18,980
he asked<font color="#E5E5E5"> so this reduction</font><font color="#CCCCCC"> completed</font>

254
00:11:14,509 --> 00:11:22,249
phase and these are<font color="#CCCCCC"> the beer hard</font>

255
00:11:18,980 --> 00:11:24,230
problems<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the two we saw in the paper</font>

256
00:11:22,249 --> 00:11:26,480
so we saw it<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> median a convex</font>

257
00:11:24,230 --> 00:11:30,739
<font color="#E5E5E5">hull and these problems I'm not going to</font>

258
00:11:26,480 --> 00:11:33,110
<font color="#E5E5E5">repeat them and just as a side</font><font color="#CCCCCC"> note in</font>

259
00:11:30,739 --> 00:11:34,999
the paper<font color="#E5E5E5"> like to make this reduction we</font>

260
00:11:33,110 --> 00:11:36,619
use a combinatorial<font color="#E5E5E5"> tool which is the VC</font>

261
00:11:34,999 --> 00:11:42,379
dimension<font color="#CCCCCC"> usually used in learning</font>

262
00:11:36,619 --> 00:11:44,600
<font color="#E5E5E5">theory so this measure tells us about</font>

263
00:11:42,379 --> 00:11:48,290
the capacity<font color="#CCCCCC"> or the richness</font><font color="#E5E5E5"> of a</font>

264
00:11:44,600 --> 00:11:50,509
function so<font color="#E5E5E5"> a functionality is very hard</font>

265
00:11:48,290 --> 00:11:53,149
if it<font color="#E5E5E5"> has some certain</font><font color="#CCCCCC"> VC dimension</font>

266
00:11:50,509 --> 00:11:55,459
essentially<font color="#E5E5E5"> we're saying how much peer</font>

267
00:11:53,149 --> 00:11:58,489
we can squeeze out<font color="#E5E5E5"> of some functionality</font>

268
00:11:55,459 --> 00:12:00,439
and if<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> functionality has</font>

269
00:11:58,489 --> 00:12:02,749
high VC dimension<font color="#E5E5E5"> then</font><font color="#CCCCCC"> it's peer</font><font color="#E5E5E5"> hard</font>

270
00:12:00,439 --> 00:12:06,410
and if it has low busy dimension then

271
00:12:02,749 --> 00:12:09,579
it's not<font color="#E5E5E5"> been hard I'm not going to talk</font>

272
00:12:06,410 --> 00:12:11,959
<font color="#E5E5E5">more about this with</font><font color="#CCCCCC"> just a side note</font>

273
00:12:09,579 --> 00:12:16,099
<font color="#E5E5E5">so are</font><font color="#CCCCCC"> we happy</font><font color="#E5E5E5"> now so we</font><font color="#CCCCCC"> prove</font><font color="#E5E5E5"> that</font>

274
00:12:11,959 --> 00:12:18,768
<font color="#CCCCCC">one-sided functionalities are hard very</font>

275
00:12:16,100 --> 00:12:20,329
<font color="#CCCCCC">hard</font><font color="#E5E5E5"> and we have</font><font color="#CCCCCC"> all these</font><font color="#E5E5E5"> two-sided</font>

276
00:12:18,769 --> 00:12:24,049
functionalities that<font color="#E5E5E5"> the previous works</font>

277
00:12:20,329 --> 00:12:25,758
of<font color="#CCCCCC"> mu2 and not be thought</font><font color="#E5E5E5"> that they are</font>

278
00:12:24,049 --> 00:12:28,189
easy<font color="#E5E5E5"> okay they have</font><font color="#CCCCCC"> sub</font><font color="#E5E5E5"> linear</font>

279
00:12:25,759 --> 00:12:28,730
<font color="#CCCCCC">communication and computation</font><font color="#E5E5E5"> so are we</font>

280
00:12:28,189 --> 00:12:30,379
happy now

281
00:12:28,730 --> 00:12:36,410
is this a generic phenomena that two

282
00:12:30,379 --> 00:12:38,180
sided functionalities are easy so maybe

283
00:12:36,410 --> 00:12:42,810
not

284
00:12:38,180 --> 00:12:46,530
let's see so take<font color="#E5E5E5"> this</font><font color="#CCCCCC"> cereal</font><font color="#E5E5E5"> real</font>

285
00:12:42,810 --> 00:12:48,810
scenario<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we have like a party like</font><font color="#CCCCCC"> a</font>

286
00:12:46,530 --> 00:12:51,000
<font color="#CCCCCC">lease</font><font color="#E5E5E5"> again so</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> has a location in</font>

287
00:12:48,810 --> 00:12:53,250
Manhattan<font color="#E5E5E5"> and</font><font color="#CCCCCC"> she wants to go</font><font color="#E5E5E5"> to a</font>

288
00:12:51,000 --> 00:12:54,750
restaurant<font color="#CCCCCC"> and</font><font color="#E5E5E5"> Bob has like the map of</font>

289
00:12:53,250 --> 00:12:57,870
all<font color="#CCCCCC"> the restaurants as you see there</font><font color="#E5E5E5"> are</font>

290
00:12:54,750 --> 00:13:02,130
too many so now we have the<font color="#CCCCCC"> nearest able</font>

291
00:12:57,870 --> 00:13:03,870
neighborhood problem where it outputs

292
00:13:02,130 --> 00:13:07,350
the<font color="#E5E5E5"> nearest location like the nearest</font>

293
00:13:03,870 --> 00:13:11,460
<font color="#E5E5E5">restaurant</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> Alice's location analysis</font>

294
00:13:07,350 --> 00:13:13,430
wants to keep your location private so

295
00:13:11,460 --> 00:13:16,050
this is the<font color="#E5E5E5"> setting of the problem and</font>

296
00:13:13,430 --> 00:13:19,050
why is<font color="#E5E5E5"> this the two sided functionality</font>

297
00:13:16,050 --> 00:13:21,569
why we should send the output<font color="#E5E5E5"> to Bob but</font>

298
00:13:19,050 --> 00:13:23,640
this is like we<font color="#CCCCCC"> are acting on the output</font>

299
00:13:21,570 --> 00:13:25,200
we<font color="#CCCCCC"> are going to the restaurant so</font><font color="#E5E5E5"> this</font>

300
00:13:23,640 --> 00:13:27,810
<font color="#CCCCCC">information is going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be publicly</font>

301
00:13:25,200 --> 00:13:31,200
<font color="#E5E5E5">known so it's inherently two-sided the</font>

302
00:13:27,810 --> 00:13:34,680
functionality<font color="#E5E5E5"> and it captures natural</font>

303
00:13:31,200 --> 00:13:37,020
problems that we want<font color="#CCCCCC"> to solve so based</font>

304
00:13:34,680 --> 00:13:40,229
on this example we're<font color="#E5E5E5"> going to define</font>

305
00:13:37,020 --> 00:13:43,620
<font color="#E5E5E5">say my</font><font color="#CCCCCC"> pier hardness which is the</font>

306
00:13:40,230 --> 00:13:50,370
<font color="#E5E5E5">relaxation of beer hardness where we</font>

307
00:13:43,620 --> 00:13:55,530
only have privacy<font color="#E5E5E5"> if the the element in</font>

308
00:13:50,370 --> 00:13:59,340
the database is only<font color="#CCCCCC"> the</font><font color="#E5E5E5"> one okay so if</font>

309
00:13:55,530 --> 00:14:01,110
the element in the database is<font color="#CCCCCC"> zero then</font>

310
00:13:59,340 --> 00:14:04,860
the server is<font color="#CCCCCC"> going to learn the</font>

311
00:14:01,110 --> 00:14:07,110
location<font color="#CCCCCC"> I of the client</font><font color="#E5E5E5"> okay there's</font>

312
00:14:04,860 --> 00:14:10,500
some asymmetry<font color="#CCCCCC"> here so you only</font><font color="#E5E5E5"> the</font>

313
00:14:07,110 --> 00:14:15,270
server<font color="#E5E5E5"> only learns the output if the</font>

314
00:14:10,500 --> 00:14:16,620
entry is<font color="#CCCCCC"> zero so this is</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> useful</font>

315
00:14:15,270 --> 00:14:18,870
also for<font color="#E5E5E5"> some other example suppose that</font>

316
00:14:16,620 --> 00:14:20,880
<font color="#E5E5E5">you have a list of candidates and</font><font color="#CCCCCC"> you</font>

317
00:14:18,870 --> 00:14:22,050
are revealing<font color="#E5E5E5"> the winning candidate so</font>

318
00:14:20,880 --> 00:14:23,430
the fact that you<font color="#E5E5E5"> are willing the</font>

319
00:14:22,050 --> 00:14:25,020
winning candidate<font color="#E5E5E5"> everybody is going</font><font color="#CCCCCC"> to</font>

320
00:14:23,430 --> 00:14:27,630
know that<font color="#E5E5E5"> but you want</font><font color="#CCCCCC"> to hide the</font><font color="#E5E5E5"> rest</font>

321
00:14:25,020 --> 00:14:33,420
of the candidates so this notion

322
00:14:27,630 --> 00:14:35,310
motivates these kind of problems so<font color="#E5E5E5"> now</font>

323
00:14:33,420 --> 00:14:39,780
I'm<font color="#E5E5E5"> going to show you why the nearest</font>

324
00:14:35,310 --> 00:14:41,650
<font color="#E5E5E5">neighbor problem is two-sided all this</font>

325
00:14:39,780 --> 00:14:47,600
<font color="#CCCCCC">counts like downtown</font>

326
00:14:41,650 --> 00:14:51,439
so<font color="#E5E5E5"> if</font><font color="#CCCCCC"> 10 minutes right so</font><font color="#E5E5E5"> remember that</font>

327
00:14:47,600 --> 00:14:55,520
<font color="#E5E5E5">in the semi pure notion the server gets</font>

328
00:14:51,440 --> 00:14:59,600
the<font color="#E5E5E5"> index I of the client</font><font color="#CCCCCC"> only if the</font>

329
00:14:55,520 --> 00:15:00,800
element in the database is<font color="#CCCCCC"> zero so what</font>

330
00:14:59,600 --> 00:15:03,590
we're<font color="#E5E5E5"> going to do we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to build</font>

331
00:15:00,800 --> 00:15:05,630
again<font color="#CCCCCC"> a</font><font color="#E5E5E5"> peer protocol using only a</font>

332
00:15:03,590 --> 00:15:08,450
single invocation of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> V nearest</font>

333
00:15:05,630 --> 00:15:09,890
neighborhood<font color="#E5E5E5"> problem so again suppose</font>

334
00:15:08,450 --> 00:15:14,750
for simplicity that<font color="#E5E5E5"> the database has</font>

335
00:15:09,890 --> 00:15:16,160
<font color="#E5E5E5">like</font><font color="#CCCCCC"> 4 entries</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> 1 0 1 so how are we</font>

336
00:15:14,750 --> 00:15:18,260
going<font color="#E5E5E5"> to do the mapping of the inputs</font>

337
00:15:16,160 --> 00:15:21,410
<font color="#E5E5E5">like</font><font color="#CCCCCC"> the inputs that they need to use in</font>

338
00:15:18,260 --> 00:15:24,470
the<font color="#E5E5E5"> name nearest</font><font color="#CCCCCC"> neighborhood problem so</font>

339
00:15:21,410 --> 00:15:28,400
if the entry is<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> then we get the circle</font>

340
00:15:24,470 --> 00:15:32,000
with Center C and if the entry is<font color="#CCCCCC"> 0 we</font>

341
00:15:28,400 --> 00:15:34,189
are picking allocation<font color="#CCCCCC"> on the circle ok</font>

342
00:15:32,000 --> 00:15:36,830
so it's going<font color="#E5E5E5"> to be like that so when we</font>

343
00:15:34,190 --> 00:15:40,090
have a<font color="#E5E5E5"> 0 we pick</font><font color="#CCCCCC"> allocation on the</font>

344
00:15:36,830 --> 00:15:44,270
circle<font color="#E5E5E5"> and</font><font color="#CCCCCC"> if it is a 1 we pick</font>

345
00:15:40,090 --> 00:15:45,950
<font color="#CCCCCC">allocation outside of the circle so this</font>

346
00:15:44,270 --> 00:15:49,400
is how the server is going<font color="#E5E5E5"> to encounter</font>

347
00:15:45,950 --> 00:15:52,310
his database<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> suppose that</font><font color="#E5E5E5"> Alice</font>

348
00:15:49,400 --> 00:15:55,430
since interested in some location

349
00:15:52,310 --> 00:15:58,010
suppose he's interested in location 3 so

350
00:15:55,430 --> 00:16:01,670
house is<font color="#E5E5E5"> going to pick her</font><font color="#CCCCCC"> location so</font>

351
00:15:58,010 --> 00:16:04,130
it's going to take<font color="#E5E5E5"> like the location</font>

352
00:16:01,670 --> 00:16:05,689
that intersects the lines of<font color="#CCCCCC"> cross</font><font color="#E5E5E5"> is</font>

353
00:16:04,130 --> 00:16:08,150
the<font color="#CCCCCC"> center with</font><font color="#E5E5E5"> the elemental</font><font color="#CCCCCC"> C's</font>

354
00:16:05,690 --> 00:16:11,710
interested<font color="#E5E5E5"> and another circle</font><font color="#CCCCCC"> that has</font>

355
00:16:08,150 --> 00:16:16,910
like half radius<font color="#E5E5E5"> from the bigger circle</font>

356
00:16:11,710 --> 00:16:19,520
<font color="#E5E5E5">ok so now if we</font><font color="#CCCCCC"> run the to the nearest</font>

357
00:16:16,910 --> 00:16:21,620
<font color="#E5E5E5">neighborhood problem where</font><font color="#CCCCCC"> Alice gives</font>

358
00:16:19,520 --> 00:16:24,230
the<font color="#E5E5E5"> location X comma</font><font color="#CCCCCC"> y which is</font><font color="#E5E5E5"> this one</font>

359
00:16:21,620 --> 00:16:27,530
the red one<font color="#CCCCCC"> and Bob's gives the center</font>

360
00:16:24,230 --> 00:16:32,960
<font color="#CCCCCC">and all this like four points here so</font>

361
00:16:27,530 --> 00:16:35,750
<font color="#CCCCCC">you can see that if the location</font><font color="#E5E5E5"> is one</font>

362
00:16:32,960 --> 00:16:37,430
so we<font color="#CCCCCC"> are here</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> example so the</font>

363
00:16:35,750 --> 00:16:41,480
nearest<font color="#E5E5E5"> element to this location is the</font>

364
00:16:37,430 --> 00:16:43,609
center it's not this element because

365
00:16:41,480 --> 00:16:45,290
this is half<font color="#CCCCCC"> radius of the circle so</font>

366
00:16:43,610 --> 00:16:48,500
this means that we are revealing to the

367
00:16:45,290 --> 00:16:50,540
server at the<font color="#E5E5E5"> center so this means that</font>

368
00:16:48,500 --> 00:16:52,820
we didn't reveal the location<font color="#E5E5E5"> I so we</font>

369
00:16:50,540 --> 00:16:53,870
are good and now suppose<font color="#E5E5E5"> that the</font>

370
00:16:52,820 --> 00:16:57,740
location is like

371
00:16:53,870 --> 00:16:59,390
<font color="#E5E5E5">is zero so the client gives this element</font>

372
00:16:57,740 --> 00:17:03,140
if<font color="#CCCCCC"> she's in if she's</font><font color="#E5E5E5"> interested in this</font>

373
00:16:59,390 --> 00:17:05,990
<font color="#E5E5E5">in the first</font><font color="#CCCCCC"> element</font><font color="#E5E5E5"> so in that case the</font>

374
00:17:03,140 --> 00:17:09,050
nearest element to the red<font color="#CCCCCC"> spot is the</font>

375
00:17:05,990 --> 00:17:11,750
<font color="#E5E5E5">center and the element</font><font color="#CCCCCC"> that we want</font><font color="#E5E5E5"> so</font>

376
00:17:09,050 --> 00:17:15,500
in that case we see that<font color="#E5E5E5"> the server does</font>

377
00:17:11,750 --> 00:17:18,199
learn the location the index I that

378
00:17:15,500 --> 00:17:21,109
Alice asked<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> really say my</font>

379
00:17:18,199 --> 00:17:24,260
<font color="#CCCCCC">peer so you learn the output the</font>

380
00:17:21,109 --> 00:17:26,599
surveillance output only<font color="#CCCCCC"> if the entry in</font>

381
00:17:24,260 --> 00:17:29,480
<font color="#E5E5E5">the database is zero so that's why it</font>

382
00:17:26,599 --> 00:17:31,300
implies<font color="#E5E5E5"> say my peer and you can imagine</font>

383
00:17:29,480 --> 00:17:35,179
how<font color="#CCCCCC"> it goes if you have like more</font>

384
00:17:31,300 --> 00:17:37,669
elements<font color="#E5E5E5"> in the database they said that</font>

385
00:17:35,179 --> 00:17:39,710
was an example<font color="#E5E5E5"> to show what</font><font color="#CCCCCC"> that the</font>

386
00:17:37,670 --> 00:17:42,320
<font color="#E5E5E5">nearest neighbourhood is the</font><font color="#CCCCCC"> semi peer</font>

387
00:17:39,710 --> 00:17:45,590
<font color="#CCCCCC">hard problem and in the paper we saw</font>

388
00:17:42,320 --> 00:17:47,330
that other natural our problems are say

389
00:17:45,590 --> 00:17:49,040
my period like<font color="#E5E5E5"> singles or single</font>

390
00:17:47,330 --> 00:17:52,790
destination shortest<font color="#E5E5E5"> path so</font><font color="#CCCCCC"> this list</font>

391
00:17:49,040 --> 00:17:55,090
<font color="#CCCCCC">selection and</font><font color="#E5E5E5"> closes destination here</font>

392
00:17:52,790 --> 00:17:57,559
are problems that<font color="#E5E5E5"> we want to pick like</font>

393
00:17:55,090 --> 00:18:02,720
say the minimum<font color="#E5E5E5"> or maximum element from</font>

394
00:17:57,559 --> 00:18:05,360
a list so we also show like information

395
00:18:02,720 --> 00:18:07,429
<font color="#CCCCCC">theoretic separations between say my P R</font>

396
00:18:05,360 --> 00:18:11,149
and<font color="#CCCCCC"> P R and in fact we prove that</font><font color="#E5E5E5"> we</font>

397
00:18:07,429 --> 00:18:14,120
cannot construct P R making a one call

398
00:18:11,150 --> 00:18:16,520
to<font color="#E5E5E5"> semi peer and in fact in the paper we</font>

399
00:18:14,120 --> 00:18:20,540
<font color="#CCCCCC">can afford more calls</font><font color="#E5E5E5"> I'm going to be</font>

400
00:18:16,520 --> 00:18:22,700
specific here<font color="#E5E5E5"> about this so this really</font>

401
00:18:20,540 --> 00:18:25,780
means<font color="#CCCCCC"> that semi P</font><font color="#E5E5E5"> really captures the</font>

402
00:18:22,700 --> 00:18:29,450
<font color="#CCCCCC">true complexity of some natural problems</font>

403
00:18:25,780 --> 00:18:32,899
then we given evidence<font color="#E5E5E5"> that</font><font color="#CCCCCC"> actually</font>

404
00:18:29,450 --> 00:18:33,950
<font color="#E5E5E5">semi</font><font color="#CCCCCC"> P R is as hard as P</font><font color="#E5E5E5"> R because we</font>

405
00:18:32,900 --> 00:18:36,110
saw that<font color="#E5E5E5"> the existence of poly</font>

406
00:18:33,950 --> 00:18:38,050
logarithmic semi peer implies the

407
00:18:36,110 --> 00:18:40,850
existence of<font color="#E5E5E5"> slightly sub linear peer</font>

408
00:18:38,050 --> 00:18:43,370
using an adaptive reduction that<font color="#E5E5E5"> makes</font>

409
00:18:40,850 --> 00:18:46,928
<font color="#CCCCCC">multiple calls to</font><font color="#E5E5E5"> semi peer and our</font>

410
00:18:43,370 --> 00:18:50,209
reduction uses locally decodable codes

411
00:18:46,929 --> 00:18:52,160
and in fact if<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to show</font><font color="#CCCCCC"> that both</font>

412
00:18:50,210 --> 00:18:55,429
<font color="#E5E5E5">logarithmic appear implies for</font>

413
00:18:52,160 --> 00:18:57,080
logarithmic<font color="#E5E5E5"> no if we want to construct</font>

414
00:18:55,429 --> 00:18:58,280
for<font color="#CCCCCC"> a liquor is</font><font color="#E5E5E5"> make P from</font><font color="#CCCCCC"> Polly</font>

415
00:18:57,080 --> 00:19:01,470
<font color="#CCCCCC">logarithms I might</font>

416
00:18:58,280 --> 00:19:03,690
<font color="#E5E5E5">we will have a breakthrough in coding</font>

417
00:19:01,470 --> 00:19:05,760
theory because for that who we need<font color="#E5E5E5"> to</font>

418
00:19:03,690 --> 00:19:08,190
<font color="#CCCCCC">construct this dream locally decodable</font>

419
00:19:05,760 --> 00:19:11,129
<font color="#E5E5E5">codes where they have like constant</font>

420
00:19:08,190 --> 00:19:12,960
query complexity in<font color="#CCCCCC"> polynomial rate so</font>

421
00:19:11,130 --> 00:19:15,390
for<font color="#E5E5E5"> the rest of the talk like I have</font>

422
00:19:12,960 --> 00:19:17,340
five<font color="#CCCCCC"> minutes I'm going to</font><font color="#E5E5E5"> show you how</font>

423
00:19:15,390 --> 00:19:21,450
we can construct poly logarithmic semi

424
00:19:17,340 --> 00:19:23,429
peer know how<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to construct</font>

425
00:19:21,450 --> 00:19:27,810
<font color="#E5E5E5">from poly logarithmic semi appear</font>

426
00:19:23,430 --> 00:19:32,310
slightly sub linear peer<font color="#CCCCCC"> okay and we're</font>

427
00:19:27,810 --> 00:19:34,220
going<font color="#E5E5E5"> to use Q query and locally</font>

428
00:19:32,310 --> 00:19:38,510
decodable codes<font color="#E5E5E5"> and we're going to make</font>

429
00:19:34,220 --> 00:19:40,980
<font color="#E5E5E5">two to the Q adaptive calls to semi here</font>

430
00:19:38,510 --> 00:19:44,700
okay so we're going to call<font color="#E5E5E5"> the same</font>

431
00:19:40,980 --> 00:19:49,020
appeared to do the Q times to construct

432
00:19:44,700 --> 00:19:51,600
<font color="#CCCCCC">P R so as a first step</font><font color="#E5E5E5"> I'm gonna reduce</font>

433
00:19:49,020 --> 00:19:54,629
mi piel to what we call<font color="#CCCCCC"> round half beer</font>

434
00:19:51,600 --> 00:19:56,550
what is<font color="#CCCCCC"> round half</font><font color="#E5E5E5"> beer is a</font>

435
00:19:54,630 --> 00:19:59,430
probabilistic peer where the server

436
00:19:56,550 --> 00:20:01,290
<font color="#E5E5E5">learns the index with half probability</font>

437
00:19:59,430 --> 00:20:03,990
so how we're going to do it's very

438
00:20:01,290 --> 00:20:05,550
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> so we get the database and</font>

439
00:20:03,990 --> 00:20:08,310
essentially we double the database

440
00:20:05,550 --> 00:20:11,550
<font color="#E5E5E5">adding the</font><font color="#CCCCCC"> compliment of the</font><font color="#E5E5E5"> database so</font>

441
00:20:08,310 --> 00:20:14,250
if this is like 0 0 0 1 1<font color="#CCCCCC"> then the</font>

442
00:20:11,550 --> 00:20:17,370
complement<font color="#E5E5E5"> will be 1 1 1 0 0</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so we</font>

443
00:20:14,250 --> 00:20:21,060
<font color="#E5E5E5">double the database and now if the</font>

444
00:20:17,370 --> 00:20:24,929
<font color="#CCCCCC">client wants</font><font color="#E5E5E5"> to ask for say entry I he's</font>

445
00:20:21,060 --> 00:20:27,300
gonna ask either for entry I or I I plus

446
00:20:24,930 --> 00:20:29,520
<font color="#CCCCCC">1</font><font color="#E5E5E5"> plus n where n is the</font><font color="#CCCCCC"> size of</font><font color="#E5E5E5"> the</font>

447
00:20:27,300 --> 00:20:31,830
<font color="#CCCCCC">database</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> elements</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> 1</font>

448
00:20:29,520 --> 00:20:35,160
will<font color="#E5E5E5"> be 0 1 will be 1 because we took</font>

449
00:20:31,830 --> 00:20:37,379
the<font color="#E5E5E5"> compliment here so this really</font><font color="#CCCCCC"> means</font>

450
00:20:35,160 --> 00:20:41,490
<font color="#CCCCCC">that we have probability the server will</font>

451
00:20:37,380 --> 00:20:44,070
get the answer<font color="#E5E5E5"> get the index I</font><font color="#CCCCCC"> okay so</font>

452
00:20:41,490 --> 00:20:46,590
having this<font color="#E5E5E5"> now I'm gonna show you how</font>

453
00:20:44,070 --> 00:20:51,510
<font color="#E5E5E5">we can construct</font><font color="#CCCCCC"> from around</font><font color="#E5E5E5"> half</font><font color="#CCCCCC"> peer</font>

454
00:20:46,590 --> 00:20:53,250
<font color="#CCCCCC">peer so how we're going</font><font color="#E5E5E5"> to do that so</font>

455
00:20:51,510 --> 00:20:55,680
the server<font color="#CCCCCC"> is getting the</font><font color="#E5E5E5"> database which</font>

456
00:20:53,250 --> 00:21:00,360
is like like this and he in codes is

457
00:20:55,680 --> 00:21:04,050
using a<font color="#E5E5E5"> low quality code blue code then</font>

458
00:21:00,360 --> 00:21:06,990
the<font color="#CCCCCC"> client he's going to like run the</font>

459
00:21:04,050 --> 00:21:09,840
decoder of the locally decodable code to

460
00:21:06,990 --> 00:21:11,460
get<font color="#E5E5E5"> the index that he's interested in</font>

461
00:21:09,840 --> 00:21:13,789
luckily decodable codes they can be

462
00:21:11,460 --> 00:21:18,029
viewed<font color="#E5E5E5"> as</font><font color="#CCCCCC"> one round multi-server</font>

463
00:21:13,789 --> 00:21:21,240
<font color="#CCCCCC">peer where if we want</font><font color="#E5E5E5"> to access some</font>

464
00:21:18,029 --> 00:21:23,730
entry<font color="#E5E5E5"> I in the original database we need</font>

465
00:21:21,240 --> 00:21:26,549
to do<font color="#E5E5E5"> like</font><font color="#CCCCCC"> cube queries to the database</font>

466
00:21:23,730 --> 00:21:29,789
<font color="#CCCCCC">right</font><font color="#E5E5E5"> that's why the local decodable</font>

467
00:21:26,549 --> 00:21:32,580
code is cube query<font color="#CCCCCC"> okay so to access and</font>

468
00:21:29,789 --> 00:21:34,529
<font color="#E5E5E5">thrive we</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to make</font><font color="#CCCCCC"> queue calls to</font>

469
00:21:32,580 --> 00:21:40,379
the database so for on the slide

470
00:21:34,529 --> 00:21:46,500
<font color="#E5E5E5">I assume that Q is</font><font color="#CCCCCC"> 5 so how we're going</font>

471
00:21:40,380 --> 00:21:48,659
to<font color="#E5E5E5"> do that so to</font><font color="#CCCCCC"> recover</font><font color="#E5E5E5"> entry I we need</font>

472
00:21:46,500 --> 00:21:50,460
<font color="#E5E5E5">to make five calls so because this</font><font color="#CCCCCC"> is</font>

473
00:21:48,659 --> 00:21:53,130
<font color="#E5E5E5">the</font><font color="#CCCCCC"> ransom</font><font color="#E5E5E5"> I filled it means that</font><font color="#CCCCCC"> it's</font>

474
00:21:50,460 --> 00:21:55,710
query<font color="#CCCCCC"> leaks with</font><font color="#E5E5E5"> half probability</font><font color="#CCCCCC"> okay</font>

475
00:21:53,130 --> 00:21:58,140
but we want to build<font color="#E5E5E5"> peer so we cannot</font>

476
00:21:55,710 --> 00:22:00,120
<font color="#E5E5E5">afford any like leakage so how we're</font>

477
00:21:58,140 --> 00:22:00,990
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> so imagine that</font><font color="#CCCCCC"> we are</font>

478
00:22:00,120 --> 00:22:02,939
<font color="#E5E5E5">playing a video game</font>

479
00:22:00,990 --> 00:22:04,919
<font color="#CCCCCC">and we are</font><font color="#E5E5E5"> telling you if you lose</font><font color="#CCCCCC"> two</font>

480
00:22:02,940 --> 00:22:07,110
times then<font color="#E5E5E5"> your device is going to</font>

481
00:22:04,919 --> 00:22:11,700
self-destruct<font color="#CCCCCC"> okay so what</font><font color="#E5E5E5"> you're going</font>

482
00:22:07,110 --> 00:22:14,070
to do so what you're going to do<font color="#E5E5E5"> okay if</font>

483
00:22:11,700 --> 00:22:16,710
you<font color="#E5E5E5"> lose once you restart the</font><font color="#CCCCCC"> game</font><font color="#E5E5E5"> and</font>

484
00:22:14,070 --> 00:22:20,090
the device is there right<font color="#E5E5E5"> so what you're</font>

485
00:22:16,710 --> 00:22:25,049
<font color="#E5E5E5">going to do you ask like one</font><font color="#CCCCCC"> query</font><font color="#E5E5E5"> and</font>

486
00:22:20,090 --> 00:22:26,959
if it<font color="#E5E5E5"> licks the</font><font color="#CCCCCC"> beat then you restart</font>

487
00:22:25,049 --> 00:22:31,080
<font color="#CCCCCC">again</font>

488
00:22:26,960 --> 00:22:35,789
so since I<font color="#CCCCCC"> assume that</font><font color="#E5E5E5"> Q is five so now</font>

489
00:22:31,080 --> 00:22:38,549
it's<font color="#CCCCCC"> Kure</font><font color="#E5E5E5"> leaks</font><font color="#CCCCCC"> with probability 1/2 so</font>

490
00:22:35,789 --> 00:22:41,669
the<font color="#E5E5E5"> probability that nothing leaks is 1</font>

491
00:22:38,549 --> 00:22:43,470
over 2 to<font color="#CCCCCC"> the 5 right and this</font><font color="#E5E5E5"> means</font>

492
00:22:41,669 --> 00:22:46,370
that the<font color="#CCCCCC"> expected number of</font><font color="#E5E5E5"> times that</font>

493
00:22:43,470 --> 00:22:51,390
<font color="#CCCCCC">we need</font><font color="#E5E5E5"> to run to restart actually the</font>

494
00:22:46,370 --> 00:22:55,350
reduction is 2 to the<font color="#E5E5E5"> 5 yes so this</font><font color="#CCCCCC"> is</font>

495
00:22:51,390 --> 00:22:56,940
why the reduction works and we<font color="#CCCCCC"> prove</font>

496
00:22:55,350 --> 00:23:00,449
that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can have 2 to</font><font color="#E5E5E5"> the cube which is</font>

497
00:22:56,940 --> 00:23:07,000
here five calls<font color="#E5E5E5"> in fact is Q times to do</font>

498
00:23:00,450 --> 00:23:11,360
the cube<font color="#CCCCCC"> ok so this is the</font><font color="#E5E5E5"> the reduction</font>

499
00:23:07,000 --> 00:23:14,240
so to conclude we<font color="#CCCCCC"> gave this framework</font>

500
00:23:11,360 --> 00:23:18,678
<font color="#E5E5E5">for classifying like if a problem is</font>

501
00:23:14,240 --> 00:23:20,570
<font color="#E5E5E5">hard or easy based on</font><font color="#CCCCCC"> peer hardness and</font>

502
00:23:18,679 --> 00:23:23,149
then we also so based on our framework

503
00:23:20,570 --> 00:23:25,250
that<font color="#E5E5E5"> some problems are peer hard so</font>

504
00:23:23,149 --> 00:23:27,799
changing slightly some functions we saw

505
00:23:25,250 --> 00:23:29,629
that when we<font color="#E5E5E5"> go from one sided from two</font>

506
00:23:27,799 --> 00:23:34,759
sided to one sided we saw that it's

507
00:23:29,629 --> 00:23:36,080
actually hard they<font color="#CCCCCC"> appear hard and then</font>

508
00:23:34,759 --> 00:23:38,779
we also<font color="#CCCCCC"> introduce</font><font color="#E5E5E5"> the same</font><font color="#CCCCCC"> appear</font>

509
00:23:36,080 --> 00:23:43,610
hardness which capture the complexity<font color="#CCCCCC"> of</font>

510
00:23:38,779 --> 00:23:45,409
some natural problems<font color="#CCCCCC"> as we saw here is</font>

511
00:23:43,610 --> 00:23:48,408
like our taxon so we have all<font color="#E5E5E5"> these easy</font>

512
00:23:45,409 --> 00:23:50,600
problems then we have<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> IP heart</font>

513
00:23:48,409 --> 00:23:56,000
problems<font color="#CCCCCC"> and here are the</font><font color="#E5E5E5"> peer heart</font>

514
00:23:50,600 --> 00:23:58,250
problems<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> we provided this the</font>

515
00:23:56,000 --> 00:23:59,899
classification of<font color="#CCCCCC"> hardness</font><font color="#E5E5E5"> problems but</font>

516
00:23:58,250 --> 00:24:02,720
<font color="#E5E5E5">as you know like reality</font><font color="#CCCCCC"> is more complex</font>

517
00:23:59,899 --> 00:24:05,199
<font color="#E5E5E5">and like NP completeness you should take</font>

518
00:24:02,720 --> 00:24:08,059
our framework with<font color="#CCCCCC"> the grain</font><font color="#E5E5E5"> of salt and</font>

519
00:24:05,200 --> 00:24:10,820
there are many future directions<font color="#CCCCCC"> to</font>

520
00:24:08,059 --> 00:24:14,509
explore<font color="#E5E5E5"> so for example like can</font><font color="#CCCCCC"> we have</font>

521
00:24:10,820 --> 00:24:16,879
a<font color="#CCCCCC"> hierarchy of hardness beyond semi</font><font color="#E5E5E5"> peer</font>

522
00:24:14,509 --> 00:24:19,490
<font color="#E5E5E5">and peer hardness for example can we</font>

523
00:24:16,879 --> 00:24:21,408
<font color="#E5E5E5">have like different</font><font color="#CCCCCC"> levels of somewhat</font>

524
00:24:19,490 --> 00:24:25,610
home<font color="#E5E5E5"> morphic encryption which is</font>

525
00:24:21,409 --> 00:24:28,299
actually more inefficient<font color="#E5E5E5"> that than peer</font>

526
00:24:25,610 --> 00:24:31,000
and let's say if<font color="#E5E5E5"> we want to do that for</font>

527
00:24:28,299 --> 00:24:33,879
polynomials<font color="#E5E5E5"> of degree two polynomials</font>

528
00:24:31,000 --> 00:24:37,190
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so in</font><font color="#CCCCCC"> surface talk like degree one</font>

529
00:24:33,879 --> 00:24:40,699
computations with<font color="#E5E5E5"> homo fie encryption is</font>

530
00:24:37,190 --> 00:24:42,440
easy so<font color="#E5E5E5"> what</font><font color="#CCCCCC"> about the grid tool and</font>

531
00:24:40,700 --> 00:24:45,669
then also we want<font color="#E5E5E5"> to have a better</font>

532
00:24:42,440 --> 00:24:47,720
<font color="#E5E5E5">understanding of our semi peer-to-peer</font>

533
00:24:45,669 --> 00:24:49,610
reduction so here we said<font color="#E5E5E5"> that we had</font>

534
00:24:47,720 --> 00:24:52,159
<font color="#CCCCCC">the talk of codes we were starting and</font>

535
00:24:49,610 --> 00:24:54,168
we saw<font color="#E5E5E5"> that if we're gonna have a non</font>

536
00:24:52,159 --> 00:24:57,700
adaptive reduction we need to like build

537
00:24:54,169 --> 00:25:00,950
this<font color="#E5E5E5"> dream locally decodable codes and</font>

538
00:24:57,700 --> 00:25:06,259
then also this which dimension measure

539
00:25:00,950 --> 00:25:07,669
that<font color="#CCCCCC"> I that I mentioned we want</font><font color="#E5E5E5"> to see</font>

540
00:25:06,259 --> 00:25:10,700
like if<font color="#CCCCCC"> it can capture actually</font><font color="#E5E5E5"> two</font>

541
00:25:07,669 --> 00:25:13,700
<font color="#E5E5E5">sided functionalities it works very</font><font color="#CCCCCC"> good</font>

542
00:25:10,700 --> 00:25:16,909
with<font color="#CCCCCC"> one-sided or two-sided we want</font><font color="#E5E5E5"> to</font>

543
00:25:13,700 --> 00:25:17,770
explore this even more<font color="#E5E5E5"> and what about</font>

544
00:25:16,909 --> 00:25:21,010
multi-party<font color="#CCCCCC"> fun</font>

545
00:25:17,770 --> 00:25:23,600
<font color="#CCCCCC">analogies there are more</font><font color="#E5E5E5"> problems but</font>

546
00:25:21,010 --> 00:25:28,850
I'm gonna<font color="#E5E5E5"> end here thank you</font>

547
00:25:23,600 --> 00:25:28,850
[Applause]

