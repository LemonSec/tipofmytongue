1
00:00:05,759 --> 00:00:10,930
<font color="#E5E5E5">thank you attack</font><font color="#CCCCCC"> so this in this</font><font color="#E5E5E5"> talk</font>

2
00:00:09,459 --> 00:00:12,519
I'll be<font color="#E5E5E5"> talking about the limits on the</font>

3
00:00:10,930 --> 00:00:14,830
power of gobbling techniques for public

4
00:00:12,519 --> 00:00:17,200
encryption<font color="#E5E5E5"> this is joint work with San</font>

5
00:00:14,830 --> 00:00:21,070
<font color="#CCCCCC">Jam guard mamataji Abadi and mom and mom</font>

6
00:00:17,200 --> 00:00:23,250
<font color="#E5E5E5">woody so in this talk we will</font><font color="#CCCCCC"> revisit</font>

7
00:00:21,070 --> 00:00:26,050
the long-standing open problem of

8
00:00:23,250 --> 00:00:29,950
whether we could base public encryption

9
00:00:26,050 --> 00:00:32,710
on one-way functions so the seminal

10
00:00:29,950 --> 00:00:35,019
result of<font color="#CCCCCC"> implosion revision 89 have</font>

11
00:00:32,710 --> 00:00:39,399
shown that this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not possible in a</font>

12
00:00:35,020 --> 00:00:41,410
<font color="#CCCCCC">blackbox way so the still leaves</font><font color="#E5E5E5"> open</font>

13
00:00:39,399 --> 00:00:43,030
the possibility that there<font color="#CCCCCC"> are no black</font>

14
00:00:41,410 --> 00:00:45,190
box methods that we might use<font color="#CCCCCC"> in order</font>

15
00:00:43,030 --> 00:00:48,489
<font color="#E5E5E5">to</font><font color="#CCCCCC"> build public key encryption from</font>

16
00:00:45,190 --> 00:00:51,129
<font color="#E5E5E5">one-way functions so let us first</font>

17
00:00:48,489 --> 00:00:54,159
briefly define what it<font color="#CCCCCC"> means to be black</font>

18
00:00:51,129 --> 00:00:55,690
box and<font color="#CCCCCC"> not black</font><font color="#E5E5E5"> box so the standard</font>

19
00:00:54,159 --> 00:00:58,059
notion<font color="#E5E5E5"> of black box construction was</font>

20
00:00:55,690 --> 00:00:59,800
introduced by<font color="#CCCCCC"> Ferguson rootage</font><font color="#E5E5E5"> and later</font>

21
00:00:58,059 --> 00:01:02,800
formalized and expanded<font color="#E5E5E5"> upon</font><font color="#CCCCCC"> in</font>

22
00:00:59,800 --> 00:01:04,360
<font color="#E5E5E5">subsequent works and basically what this</font>

23
00:01:02,800 --> 00:01:06,640
<font color="#CCCCCC">means</font><font color="#E5E5E5"> is that a black box construction</font>

24
00:01:04,360 --> 00:01:08,770
over of a primitive<font color="#CCCCCC"> queue</font><font color="#E5E5E5"> from another</font>

25
00:01:06,640 --> 00:01:10,630
premise<font color="#E5E5E5"> P there is</font><font color="#CCCCCC"> a construct where</font><font color="#E5E5E5"> the</font>

26
00:01:08,770 --> 00:01:12,640
construction<font color="#CCCCCC"> queue</font><font color="#E5E5E5"> only uses P as an</font>

27
00:01:10,630 --> 00:01:14,500
<font color="#E5E5E5">Oracle it makes oracle calls and</font>

28
00:01:12,640 --> 00:01:16,720
receives an answer back and<font color="#E5E5E5"> forth it</font>

29
00:01:14,500 --> 00:01:19,270
only uses<font color="#CCCCCC"> it in a</font><font color="#E5E5E5"> black box way and so</font>

30
00:01:16,720 --> 00:01:21,370
it cannot use<font color="#CCCCCC"> for example the code or</font>

31
00:01:19,270 --> 00:01:26,020
<font color="#E5E5E5">the description</font><font color="#CCCCCC"> of P in its construction</font>

32
00:01:21,370 --> 00:01:28,330
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the security requirements is that</font>

33
00:01:26,020 --> 00:01:30,640
<font color="#CCCCCC">any adversary that breaks the</font>

34
00:01:28,330 --> 00:01:33,340
construction queue can<font color="#E5E5E5"> be turned into an</font>

35
00:01:30,640 --> 00:01:35,980
adversary that<font color="#E5E5E5"> breaks the underlying</font>

36
00:01:33,340 --> 00:01:40,690
primitive<font color="#E5E5E5"> P and in this stuff will only</font>

37
00:01:35,980 --> 00:01:41,950
be considering a black box<font color="#E5E5E5"> security so</font>

38
00:01:40,690 --> 00:01:45,210
the<font color="#CCCCCC"> adversary can only use the</font>

39
00:01:41,950 --> 00:01:48,310
underlying<font color="#E5E5E5"> adversary in a black box way</font>

40
00:01:45,210 --> 00:01:51,369
so then when we<font color="#E5E5E5"> say that we have</font><font color="#CCCCCC"> an old</font>

41
00:01:48,310 --> 00:01:53,920
black box construction<font color="#E5E5E5"> of Q from P the</font>

42
00:01:51,370 --> 00:01:57,040
code of P is<font color="#CCCCCC"> actually fed into the</font>

43
00:01:53,920 --> 00:01:58,780
construction<font color="#E5E5E5"> of Q and informally</font>

44
00:01:57,040 --> 00:02:00,370
speaking we<font color="#CCCCCC"> can roughly divide the</font>

45
00:01:58,780 --> 00:02:04,570
common<font color="#CCCCCC"> no black box techniques into two</font>

46
00:02:00,370 --> 00:02:05,680
categories the first category being

47
00:02:04,570 --> 00:02:07,899
<font color="#E5E5E5">so-called low-tech</font>

48
00:02:05,680 --> 00:02:09,610
<font color="#CCCCCC">node black box techniques</font><font color="#E5E5E5"> is basically</font>

49
00:02:07,900 --> 00:02:10,899
the ones that can<font color="#CCCCCC"> be realized using a</font>

50
00:02:09,610 --> 00:02:13,690
one-way<font color="#CCCCCC"> function</font><font color="#E5E5E5"> such as for example</font>

51
00:02:10,899 --> 00:02:16,510
<font color="#E5E5E5">gobbling zero knowledge proof and</font>

52
00:02:13,690 --> 00:02:18,010
witness<font color="#CCCCCC"> indistinguishability</font><font color="#E5E5E5"> proofs and</font>

53
00:02:16,510 --> 00:02:20,200
<font color="#E5E5E5">then we have the second category which</font>

54
00:02:18,010 --> 00:02:22,060
<font color="#CCCCCC">we'll call high</font><font color="#E5E5E5"> tech and these are</font>

55
00:02:20,200 --> 00:02:24,339
basically<font color="#E5E5E5"> those techniques that are</font>

56
00:02:22,060 --> 00:02:26,830
<font color="#E5E5E5">based that require stronger assumptions</font>

57
00:02:24,340 --> 00:02:31,630
so just fully on<font color="#E5E5E5"> morphic Krypton or even</font>

58
00:02:26,830 --> 00:02:34,450
<font color="#CCCCCC">IO and in</font><font color="#E5E5E5"> this talk we will be focusing</font>

59
00:02:31,630 --> 00:02:36,370
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the widely used</font><font color="#CCCCCC"> non black box</font>

60
00:02:34,450 --> 00:02:40,890
technique of garbling which as we will

61
00:02:36,370 --> 00:02:47,770
see later on<font color="#E5E5E5"> will also</font><font color="#CCCCCC"> imply limits on</font>

62
00:02:40,890 --> 00:02:50,859
the other<font color="#E5E5E5"> low-tech techniques so let us</font>

63
00:02:47,770 --> 00:02:52,870
briefly remind ourselves for the

64
00:02:50,860 --> 00:02:53,740
<font color="#E5E5E5">garbling schemas so basically a</font>

65
00:02:52,870 --> 00:02:55,540
governing scheme

66
00:02:53,740 --> 00:02:57,880
consists of a<font color="#E5E5E5"> subroutine we'll call it</font>

67
00:02:55,540 --> 00:02:59,950
garb that<font color="#E5E5E5"> accepts input a circuit and a</font>

68
00:02:57,880 --> 00:03:02,859
seed and outputs a gobble circuit with

69
00:02:59,950 --> 00:03:07,780
some<font color="#E5E5E5"> input labels were for each bit of</font>

70
00:03:02,860 --> 00:03:10,990
<font color="#E5E5E5">the</font><font color="#CCCCCC"> input and looking ahead</font><font color="#E5E5E5"> we note that</font>

71
00:03:07,780 --> 00:03:12,820
<font color="#E5E5E5">since what what what makes what usually</font>

72
00:03:10,990 --> 00:03:14,440
makes<font color="#CCCCCC"> note</font><font color="#E5E5E5"> black and what what usually</font>

73
00:03:12,820 --> 00:03:16,570
makes<font color="#CCCCCC"> construction's don't black box</font>

74
00:03:14,440 --> 00:03:19,530
when<font color="#E5E5E5"> the</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> garbling is the fact that</font>

75
00:03:16,570 --> 00:03:22,600
this<font color="#E5E5E5"> garb subroutine accepts a circuit</font>

76
00:03:19,530 --> 00:03:24,480
but<font color="#CCCCCC"> i will</font><font color="#E5E5E5"> explain what</font><font color="#CCCCCC"> it means what</font>

77
00:03:22,600 --> 00:03:26,500
what<font color="#E5E5E5"> this means in more detail</font><font color="#CCCCCC"> later on</font>

78
00:03:24,480 --> 00:03:28,390
<font color="#E5E5E5">furthermore we have a second subroutine</font>

79
00:03:26,500 --> 00:03:30,910
<font color="#CCCCCC">that given the global</font><font color="#E5E5E5"> circuit and a</font>

80
00:03:28,390 --> 00:03:34,149
sequence of input encodings representing

81
00:03:30,910 --> 00:03:39,850
each for each<font color="#E5E5E5"> bit of the input it would</font>

82
00:03:34,150 --> 00:03:41,320
evaluate C of X and the<font color="#E5E5E5"> security basic C</font>

83
00:03:39,850 --> 00:03:44,019
basically<font color="#CCCCCC"> said that there is a simulator</font>

84
00:03:41,320 --> 00:03:45,220
<font color="#E5E5E5">that given C of X without put something</font>

85
00:03:44,020 --> 00:03:47,680
that's indistinguishable from the

86
00:03:45,220 --> 00:03:51,340
garbled circuit plus the input<font color="#E5E5E5"> encodings</font>

87
00:03:47,680 --> 00:03:53,320
<font color="#E5E5E5">for that inputs and in this talk we will</font>

88
00:03:51,340 --> 00:03:56,290
mainly be dealing with<font color="#E5E5E5"> the decomposable</font>

89
00:03:53,320 --> 00:03:59,010
or projective variant of garbling<font color="#E5E5E5"> which</font>

90
00:03:56,290 --> 00:04:02,380
<font color="#E5E5E5">basically states that we are allowed to</font>

91
00:03:59,010 --> 00:04:08,440
encode<font color="#CCCCCC"> each bit of</font><font color="#E5E5E5"> the input one by one</font>

92
00:04:02,380 --> 00:04:11,590
individually so now going<font color="#CCCCCC"> back to our</font>

93
00:04:08,440 --> 00:04:13,900
<font color="#E5E5E5">main question</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> say if</font><font color="#E5E5E5"> we could</font>

94
00:04:11,590 --> 00:04:17,548
<font color="#E5E5E5">get public key encryption for one wave</font>

95
00:04:13,900 --> 00:04:21,728
function<font color="#CCCCCC"> plus garbling can we do</font><font color="#E5E5E5"> that</font>

96
00:04:17,548 --> 00:04:24,159
<font color="#E5E5E5">and what motivates this main question is</font>

97
00:04:21,728 --> 00:04:25,659
that we know first<font color="#E5E5E5"> that we can get</font>

98
00:04:24,160 --> 00:04:26,949
gobbling from one wave function by the

99
00:04:25,660 --> 00:04:31,659
result of<font color="#E5E5E5"> yell</font>

100
00:04:26,949 --> 00:04:33,159
and by the recent result of dot<font color="#E5E5E5"> Megan</font>

101
00:04:31,659 --> 00:04:35,979
<font color="#E5E5E5">Kerik they</font><font color="#CCCCCC"> showed that</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> could get</font>

102
00:04:33,159 --> 00:04:37,300
identity based encryption<font color="#E5E5E5"> from the</font>

103
00:04:35,979 --> 00:04:39,849
computational diffie-hellman assumption

104
00:04:37,300 --> 00:04:42,129
using garbling<font color="#E5E5E5"> and this is done</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> not</font>

105
00:04:39,849 --> 00:04:44,770
<font color="#E5E5E5">black box way</font><font color="#CCCCCC"> due to</font><font color="#E5E5E5"> gobbling and the</font>

106
00:04:42,129 --> 00:04:47,110
circumvents<font color="#CCCCCC"> the previous and possibility</font>

107
00:04:44,770 --> 00:04:50,799
result that shows it cannot actually<font color="#E5E5E5"> get</font>

108
00:04:47,110 --> 00:04:53,169
<font color="#CCCCCC">IBM CDH so we want to ask</font><font color="#E5E5E5"> the same thing</font>

109
00:04:50,800 --> 00:04:54,879
<font color="#E5E5E5">can we do the same thing can we use</font>

110
00:04:53,169 --> 00:04:57,340
<font color="#CCCCCC">gobbling</font><font color="#E5E5E5"> and circumvent impossibility</font>

111
00:04:54,879 --> 00:04:59,139
result of<font color="#CCCCCC"> bug no</font><font color="#E5E5E5"> sandwich in order to</font>

112
00:04:57,340 --> 00:05:01,198
build<font color="#CCCCCC"> pke</font><font color="#E5E5E5"> from one wave function</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> a</font>

113
00:04:59,139 --> 00:05:05,919
not<font color="#E5E5E5"> black box way we're okay with that</font>

114
00:05:01,199 --> 00:05:11,020
and our main results is that essentially

115
00:05:05,919 --> 00:05:12,849
no you can't do<font color="#E5E5E5"> that and we will do so</font>

116
00:05:11,020 --> 00:05:16,240
<font color="#CCCCCC">we will prove</font><font color="#E5E5E5"> we will allow such</font>

117
00:05:12,849 --> 00:05:18,938
construction in a model where<font color="#CCCCCC"> that this</font>

118
00:05:16,240 --> 00:05:21,550
<font color="#E5E5E5">model captures the known</font><font color="#CCCCCC"> garbling based</font>

119
00:05:18,939 --> 00:05:24,039
positive constructions and this is the

120
00:05:21,550 --> 00:05:25,839
same model that's used<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> previous</font>

121
00:05:24,039 --> 00:05:28,659
<font color="#E5E5E5">works of brokers</font><font color="#CCCCCC"> kitty-cats a</font><font color="#E5E5E5"> given</font>

122
00:05:25,839 --> 00:05:30,669
<font color="#CCCCCC">eureka mortgage</font><font color="#E5E5E5"> and our office I gave</font>

123
00:05:28,659 --> 00:05:35,110
under a different<font color="#E5E5E5"> context but</font><font color="#CCCCCC"> I will</font>

124
00:05:30,669 --> 00:05:36,789
explain that<font color="#CCCCCC"> in more detail later on so</font>

125
00:05:35,110 --> 00:05:39,250
now that we<font color="#E5E5E5"> have seen what the problem</font>

126
00:05:36,789 --> 00:05:41,020
<font color="#E5E5E5">and motivation is I will go now</font><font color="#CCCCCC"> and</font>

127
00:05:39,250 --> 00:05:42,669
explain<font color="#E5E5E5"> what how we can model our</font>

128
00:05:41,020 --> 00:05:48,399
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> that we can be able</font><font color="#E5E5E5"> to solve</font>

129
00:05:42,669 --> 00:05:51,399
it<font color="#E5E5E5"> and prove our result so when we talk</font>

130
00:05:48,399 --> 00:05:53,080
about black box operations<font color="#E5E5E5"> we usually</font>

131
00:05:51,399 --> 00:05:55,779
<font color="#E5E5E5">use black box separation techniques in</font>

132
00:05:53,080 --> 00:05:57,580
<font color="#CCCCCC">order</font><font color="#E5E5E5"> to separate a primitive</font><font color="#CCCCCC"> queue</font><font color="#E5E5E5"> from</font>

133
00:05:55,779 --> 00:06:00,969
it from another<font color="#E5E5E5"> primitive P that uses it</font>

134
00:05:57,580 --> 00:06:02,438
in a black box way and using<font color="#CCCCCC"> these</font>

135
00:06:00,969 --> 00:06:07,539
separations would imply that such

136
00:06:02,439 --> 00:06:09,129
constructions do not exist however we

137
00:06:07,539 --> 00:06:11,080
cannot simply use black box operations

138
00:06:09,129 --> 00:06:12,339
in our case why because the

139
00:06:11,080 --> 00:06:17,469
constructions<font color="#CCCCCC"> that we want</font><font color="#E5E5E5"> to rule out</font>

140
00:06:12,339 --> 00:06:20,189
are inherently<font color="#E5E5E5"> not black box the so</font><font color="#CCCCCC"> and</font>

141
00:06:17,469 --> 00:06:23,949
any time we<font color="#CCCCCC"> use garbling</font><font color="#E5E5E5"> in order to</font>

142
00:06:20,189 --> 00:06:27,060
build<font color="#E5E5E5"> our</font><font color="#CCCCCC"> PK e scheme</font><font color="#E5E5E5"> we're going to use</font>

143
00:06:23,949 --> 00:06:31,539
a one-way function<font color="#CCCCCC"> in our black box</font><font color="#E5E5E5"> way</font>

144
00:06:27,060 --> 00:06:33,669
so how can we can we possibly cast this

145
00:06:31,539 --> 00:06:35,199
null black box instruction as a black

146
00:06:33,669 --> 00:06:37,330
box construction so<font color="#CCCCCC"> that we can</font><font color="#E5E5E5"> apply</font>

147
00:06:35,199 --> 00:06:39,190
the known<font color="#E5E5E5"> standard black box separation</font>

148
00:06:37,330 --> 00:06:40,620
techniques and prove our<font color="#CCCCCC"> result that's</font>

149
00:06:39,190 --> 00:06:43,350
<font color="#E5E5E5">the question that we'd like</font><font color="#CCCCCC"> to</font>

150
00:06:40,620 --> 00:06:46,750
so in order to<font color="#E5E5E5"> do that we're going to</font>

151
00:06:43,350 --> 00:06:48,640
look at first<font color="#E5E5E5"> exactly we're</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to see</font>

152
00:06:46,750 --> 00:06:53,890
what how does gobbling make<font color="#CCCCCC"> construction</font>

153
00:06:48,640 --> 00:06:55,870
<font color="#E5E5E5">is no black box and so the way that</font>

154
00:06:53,890 --> 00:06:57,370
gobbling is usually used is that<font color="#CCCCCC"> if you</font>

155
00:06:55,870 --> 00:07:00,010
recall this<font color="#CCCCCC"> is the garb subroutine it</font>

156
00:06:57,370 --> 00:07:01,390
takes us in for the circuit and outputs

157
00:07:00,010 --> 00:07:07,050
a gobble circuit what's up some input

158
00:07:01,390 --> 00:07:11,979
labels right<font color="#E5E5E5"> and one could potentially</font>

159
00:07:07,050 --> 00:07:14,470
<font color="#E5E5E5">feed this gobble circuit</font><font color="#CCCCCC"> and you feed</font>

160
00:07:11,980 --> 00:07:16,930
this gobble subroutine a circuit with

161
00:07:14,470 --> 00:07:19,420
some one with the circuit of the<font color="#E5E5E5"> one</font>

162
00:07:16,930 --> 00:07:22,300
<font color="#E5E5E5">with one wave function code and this</font>

163
00:07:19,420 --> 00:07:25,360
makes any<font color="#E5E5E5"> construction that uses the</font>

164
00:07:22,300 --> 00:07:31,860
<font color="#CCCCCC">garbling subroutine</font><font color="#E5E5E5"> become non black box</font>

165
00:07:25,360 --> 00:07:34,210
and<font color="#E5E5E5"> the use</font><font color="#CCCCCC"> of the one wave function so</font>

166
00:07:31,860 --> 00:07:39,580
we're going to<font color="#CCCCCC"> redefine</font><font color="#E5E5E5"> our doubling</font>

167
00:07:34,210 --> 00:07:42,340
subroutine so that it allows so that it

168
00:07:39,580 --> 00:07:44,140
allows as input<font color="#E5E5E5"> circuits with one wave</font>

169
00:07:42,340 --> 00:07:46,479
function gates<font color="#E5E5E5"> we're going to</font>

170
00:07:44,140 --> 00:07:51,180
reinterpret<font color="#E5E5E5"> this is a governing</font>

171
00:07:46,480 --> 00:07:53,560
subroutine so now instead<font color="#E5E5E5"> of injecting</font>

172
00:07:51,180 --> 00:07:55,090
the<font color="#E5E5E5"> one way the one which is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> circuit</font>

173
00:07:53,560 --> 00:07:58,000
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> one wave</font><font color="#E5E5E5"> function in our circuit</font>

174
00:07:55,090 --> 00:08:01,780
<font color="#CCCCCC">we can just plant one wavefunction gates</font>

175
00:07:58,000 --> 00:08:04,360
<font color="#CCCCCC">at the</font><font color="#E5E5E5"> auricle in the in the circuit and</font>

176
00:08:01,780 --> 00:08:08,549
so<font color="#E5E5E5"> note now we're back to</font><font color="#CCCCCC"> being black</font>

177
00:08:04,360 --> 00:08:08,550
box in the use<font color="#CCCCCC"> of the one wave function</font>

178
00:08:10,260 --> 00:08:15,969
so given that we can<font color="#CCCCCC"> now reinterpret our</font>

179
00:08:14,080 --> 00:08:18,070
construction our<font color="#CCCCCC"> not black box</font>

180
00:08:15,970 --> 00:08:20,920
<font color="#CCCCCC">instruction into a black box</font><font color="#E5E5E5"> one by</font>

181
00:08:18,070 --> 00:08:22,810
saying by saying<font color="#E5E5E5"> that any pkeq</font>

182
00:08:20,920 --> 00:08:25,030
<font color="#E5E5E5">instruction if we could construct any</font>

183
00:08:22,810 --> 00:08:28,770
<font color="#E5E5E5">pkeq instruction from this new primitive</font>

184
00:08:25,030 --> 00:08:30,489
of one wave function was<font color="#E5E5E5"> garbling</font>

185
00:08:28,770 --> 00:08:32,409
<font color="#E5E5E5">possibly gobbling subroutine that</font>

186
00:08:30,490 --> 00:08:34,590
<font color="#E5E5E5">accepts circuited or neural function</font>

187
00:08:32,409 --> 00:08:34,589
gates

188
00:08:38,840 --> 00:08:43,640
and now we can state our<font color="#CCCCCC"> main theory</font>

189
00:08:41,390 --> 00:08:46,790
<font color="#E5E5E5">more formally that there exists no black</font>

190
00:08:43,640 --> 00:08:48,439
box construction<font color="#E5E5E5"> of</font><font color="#CCCCCC"> PKA from one way</font>

191
00:08:46,790 --> 00:08:52,910
function<font color="#CCCCCC"> plus curb-link that accepts 1</font>

192
00:08:48,440 --> 00:08:57,710
<font color="#E5E5E5">our function gates this is our formal</font>

193
00:08:52,910 --> 00:08:59,779
<font color="#E5E5E5">theorem great so the big picture</font><font color="#CCCCCC"> of our</font>

194
00:08:57,710 --> 00:09:02,420
proposed is<font color="#CCCCCC"> that return this no black</font>

195
00:08:59,779 --> 00:09:05,089
box construction<font color="#E5E5E5"> we remodel it at the</font>

196
00:09:02,420 --> 00:09:08,560
black box construction<font color="#E5E5E5"> of</font><font color="#CCCCCC"> PKA</font><font color="#E5E5E5"> from this</font>

197
00:09:05,089 --> 00:09:13,130
new model<font color="#E5E5E5"> from this new primitive and</font>

198
00:09:08,560 --> 00:09:15,099
our goal is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show using using the</font>

199
00:09:13,130 --> 00:09:19,189
standard black box separation techniques

200
00:09:15,100 --> 00:09:21,470
that<font color="#CCCCCC"> pje constructions do not exist from</font>

201
00:09:19,190 --> 00:09:23,450
these from from<font color="#CCCCCC"> one-way function post</font>

202
00:09:21,470 --> 00:09:26,420
garbling from one<font color="#E5E5E5"> wave function gates</font>

203
00:09:23,450 --> 00:09:29,150
that's our<font color="#E5E5E5"> goal right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> but before</font>

204
00:09:26,420 --> 00:09:30,529
that I<font color="#E5E5E5"> would like</font><font color="#CCCCCC"> to go over</font><font color="#E5E5E5"> some of the</font>

205
00:09:29,150 --> 00:09:32,569
previous separation result that<font color="#E5E5E5"> uses</font>

206
00:09:30,529 --> 00:09:35,839
method because it's quite related<font color="#CCCCCC"> to</font>

207
00:09:32,570 --> 00:09:37,490
ours as well so this model<font color="#E5E5E5"> wasn't this</font>

208
00:09:35,839 --> 00:09:40,460
<font color="#E5E5E5">in one lap or using wasn't the first</font>

209
00:09:37,490 --> 00:09:43,640
time<font color="#E5E5E5"> that's used it was introduced back</font>

210
00:09:40,460 --> 00:09:45,800
by<font color="#CCCCCC"> Viper curse Kato back when they</font><font color="#E5E5E5"> were</font>

211
00:09:43,640 --> 00:09:48,050
showing that<font color="#E5E5E5"> there exists no pje</font>

212
00:09:45,800 --> 00:09:51,020
construction from<font color="#E5E5E5"> one</font><font color="#CCCCCC"> way function plus</font>

213
00:09:48,050 --> 00:09:52,310
music where<font color="#E5E5E5"> the music could accept</font>

214
00:09:51,020 --> 00:09:55,339
statements that<font color="#E5E5E5"> could have one way</font>

215
00:09:52,310 --> 00:09:59,630
function<font color="#CCCCCC"> a one way function calls within</font>

216
00:09:55,339 --> 00:10:01,370
<font color="#E5E5E5">them so the difference</font><font color="#CCCCCC"> between their</font>

217
00:09:59,630 --> 00:10:03,860
result in ours is that<font color="#CCCCCC"> the result only</font>

218
00:10:01,370 --> 00:10:07,100
rules it out<font color="#E5E5E5"> all the rules out perfectly</font>

219
00:10:03,860 --> 00:10:09,650
complete<font color="#CCCCCC"> PK or as we extend</font><font color="#E5E5E5"> the result</font>

220
00:10:07,100 --> 00:10:11,810
to rule out even and perfectly complete

221
00:10:09,650 --> 00:10:14,060
<font color="#E5E5E5">to</font><font color="#CCCCCC"> begin we do</font><font color="#E5E5E5"> not make the assumption</font>

222
00:10:11,810 --> 00:10:19,969
that we that that<font color="#E5E5E5"> we will not</font><font color="#CCCCCC"> only</font>

223
00:10:14,060 --> 00:10:22,040
perfectly complete<font color="#E5E5E5"> speaking furthermore</font>

224
00:10:19,970 --> 00:10:23,870
there's the the other result<font color="#CCCCCC"> are</font>

225
00:10:22,040 --> 00:10:26,719
sheriffís<font color="#CCCCCC"> a gap</font><font color="#E5E5E5"> where they show that</font>

226
00:10:23,870 --> 00:10:30,200
<font color="#CCCCCC">secret key functional encryption if you</font>

227
00:10:26,720 --> 00:10:33,560
allow the key generation subroutine of

228
00:10:30,200 --> 00:10:36,650
the secret key popular<font color="#E5E5E5"> crip</font><font color="#CCCCCC"> ssin to have</font>

229
00:10:33,560 --> 00:10:38,930
one way function<font color="#CCCCCC"> Oracle gates</font><font color="#E5E5E5"> this</font>

230
00:10:36,650 --> 00:10:40,760
primitive<font color="#E5E5E5"> does not imply a public key</font>

231
00:10:38,930 --> 00:10:44,900
encryption<font color="#E5E5E5"> and they also use the model</font>

232
00:10:40,760 --> 00:10:47,480
that we<font color="#E5E5E5"> use as well about the difference</font>

233
00:10:44,900 --> 00:10:50,010
here the difference in the result from

234
00:10:47,480 --> 00:10:53,880
ours is<font color="#E5E5E5"> that</font>

235
00:10:50,010 --> 00:10:56,189
they would rule<font color="#E5E5E5"> out non projective but</font>

236
00:10:53,880 --> 00:10:59,220
reusable garbling by non projective we

237
00:10:56,190 --> 00:11:01,830
mean that they need<font color="#CCCCCC"> to encode input</font><font color="#E5E5E5"> all</font>

238
00:10:59,220 --> 00:11:03,690
at once whereas an<font color="#E5E5E5"> our result we</font>

239
00:11:01,830 --> 00:11:06,090
<font color="#E5E5E5">actually rule out projective garbling</font>

240
00:11:03,690 --> 00:11:08,130
<font color="#CCCCCC">alright well if</font><font color="#E5E5E5"> you recall projective</font>

241
00:11:06,090 --> 00:11:13,290
means we are allowed to encode bit by

242
00:11:08,130 --> 00:11:17,700
bit and this projected property is often

243
00:11:13,290 --> 00:11:20,250
<font color="#E5E5E5">used in positive constructions such as</font>

244
00:11:17,700 --> 00:11:22,680
<font color="#CCCCCC">the and it's often required</font><font color="#E5E5E5"> saying</font>

245
00:11:20,250 --> 00:11:25,800
houses<font color="#CCCCCC"> secured function evaluation or</font>

246
00:11:22,680 --> 00:11:27,060
even in the recent result of the of dot

247
00:11:25,800 --> 00:11:29,069
<font color="#CCCCCC">link and</font><font color="#E5E5E5"> Carrick where they where they</font>

248
00:11:27,060 --> 00:11:31,050
<font color="#CCCCCC">acquired</font><font color="#E5E5E5"> this positive projected</font>

249
00:11:29,070 --> 00:11:37,230
property in order<font color="#CCCCCC"> to build</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> based</font>

250
00:11:31,050 --> 00:11:38,910
encryption scheme from<font color="#CCCCCC"> CD h and it's</font>

251
00:11:37,230 --> 00:11:40,350
important<font color="#E5E5E5"> to understand what are</font><font color="#CCCCCC"> the</font>

252
00:11:38,910 --> 00:11:43,500
<font color="#E5E5E5">constructions that are captured in this</font>

253
00:11:40,350 --> 00:11:46,050
model so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can identify how useful</font>

254
00:11:43,500 --> 00:11:49,560
this model is<font color="#E5E5E5"> so these are the</font>

255
00:11:46,050 --> 00:11:51,120
constructions<font color="#E5E5E5"> that that use these are</font>

256
00:11:49,560 --> 00:11:53,489
the<font color="#CCCCCC"> constructions that</font><font color="#E5E5E5"> you use gobbling</font>

257
00:11:51,120 --> 00:11:55,620
to gobble circulatory function gates so

258
00:11:53,490 --> 00:12:01,980
just beavers or<font color="#CCCCCC"> T accession protocol or</font>

259
00:11:55,620 --> 00:12:04,470
the the<font color="#CCCCCC"> ramp</font><font color="#E5E5E5"> carbon link schemes</font><font color="#CCCCCC"> due</font><font color="#E5E5E5"> to</font>

260
00:12:01,980 --> 00:12:09,180
<font color="#CCCCCC">Lu</font><font color="#E5E5E5"> Ostrovsky and the</font><font color="#CCCCCC"> calculus</font><font color="#E5E5E5"> firstly is</font>

261
00:12:04,470 --> 00:12:11,490
capital however<font color="#E5E5E5"> if you say wanted to</font>

262
00:12:09,180 --> 00:12:12,810
gobble a circuit<font color="#CCCCCC"> that gobbles the</font>

263
00:12:11,490 --> 00:12:17,370
gobbling subroutine in<font color="#CCCCCC"> a recursive</font>

264
00:12:12,810 --> 00:12:19,829
manner<font color="#E5E5E5"> then this this is that this is</font>

265
00:12:17,370 --> 00:12:21,630
not captured<font color="#CCCCCC"> by this</font><font color="#E5E5E5"> model what is in</font>

266
00:12:19,830 --> 00:12:24,270
<font color="#E5E5E5">fact falls under something called</font><font color="#CCCCCC"> the</font>

267
00:12:21,630 --> 00:12:27,480
monolithic framework of God Muhammad in

268
00:12:24,270 --> 00:12:32,900
which was done<font color="#CCCCCC"> in</font><font color="#E5E5E5"> last Krypton just</font>

269
00:12:27,480 --> 00:12:36,300
presented last Krypton so now that<font color="#E5E5E5"> I</font>

270
00:12:32,900 --> 00:12:38,069
described<font color="#E5E5E5"> our separation model</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> can now</font>

271
00:12:36,300 --> 00:12:41,430
go into<font color="#E5E5E5"> more details behind ideas of the</font>

272
00:12:38,070 --> 00:12:45,450
proof<font color="#E5E5E5"> of how to use this model in order</font>

273
00:12:41,430 --> 00:12:47,069
to prove our result so basically let's

274
00:12:45,450 --> 00:12:49,410
recall a standard<font color="#E5E5E5"> method for proving</font>

275
00:12:47,070 --> 00:12:52,320
black box to Bregenz first so that<font color="#E5E5E5"> we</font>

276
00:12:49,410 --> 00:12:53,610
can use it in<font color="#E5E5E5"> our work as well</font><font color="#CCCCCC"> so in</font>

277
00:12:52,320 --> 00:12:55,920
order to<font color="#E5E5E5"> prove</font><font color="#CCCCCC"> that a black box</font>

278
00:12:53,610 --> 00:12:57,810
separation of a primitive<font color="#CCCCCC"> Q</font><font color="#E5E5E5"> from in</font>

279
00:12:55,920 --> 00:13:00,979
<font color="#E5E5E5">order to prove a black box operation of</font>

280
00:12:57,810 --> 00:13:03,119
Q from<font color="#E5E5E5"> P we need to define an Oracle</font>

281
00:13:00,980 --> 00:13:05,790
just that this Oracle

282
00:13:03,120 --> 00:13:09,690
securely realizes<font color="#CCCCCC"> P meaning that there</font>

283
00:13:05,790 --> 00:13:12,540
is no adversary<font color="#CCCCCC"> that breaks B but any</font>

284
00:13:09,690 --> 00:13:15,420
construction<font color="#E5E5E5"> of Q a relative</font><font color="#CCCCCC"> this Oracle</font>

285
00:13:12,540 --> 00:13:19,040
can be broken using an adversary<font color="#CCCCCC"> that</font>

286
00:13:15,420 --> 00:13:19,040
asks a polynomial time number of queries

287
00:13:19,310 --> 00:13:25,920
so if I show<font color="#E5E5E5"> an</font><font color="#CCCCCC"> Oracle that</font><font color="#E5E5E5"> is P</font><font color="#CCCCCC"> secure</font>

288
00:13:23,300 --> 00:13:27,900
but any adversary<font color="#E5E5E5"> could break any Q on</font>

289
00:13:25,920 --> 00:13:34,800
this model<font color="#E5E5E5"> then we basically saw a</font>

290
00:13:27,900 --> 00:13:36,209
<font color="#CCCCCC">separation between P and Q okay so we</font>

291
00:13:34,800 --> 00:13:38,390
<font color="#E5E5E5">want to use the same technique in our</font>

292
00:13:36,210 --> 00:13:41,930
work how would<font color="#CCCCCC"> we do that</font>

293
00:13:38,390 --> 00:13:45,540
so the first attempt is to show that

294
00:13:41,930 --> 00:13:48,569
<font color="#CCCCCC">okay we want to define an</font><font color="#E5E5E5"> Oracle such</font>

295
00:13:45,540 --> 00:13:50,310
that the such as that<font color="#E5E5E5"> realizes this</font>

296
00:13:48,570 --> 00:13:53,339
<font color="#CCCCCC">one-way function</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> garbling that</font>

297
00:13:50,310 --> 00:13:53,910
could have<font color="#CCCCCC"> one-way function keys so how</font>

298
00:13:53,339 --> 00:13:56,160
would we do that

299
00:13:53,910 --> 00:13:58,350
so the Oracle or would consist of<font color="#E5E5E5"> the</font>

300
00:13:56,160 --> 00:14:01,140
<font color="#CCCCCC">following first let's</font><font color="#E5E5E5"> just realize</font><font color="#CCCCCC"> our</font>

301
00:13:58,350 --> 00:14:04,920
<font color="#E5E5E5">one-way function we can just use random</font>

302
00:14:01,140 --> 00:14:08,339
Oracle right this gives us a secure

303
00:14:04,920 --> 00:14:10,140
one-way function so how do you<font color="#E5E5E5"> realize</font>

304
00:14:08,339 --> 00:14:14,400
the gobbling part of this second<font color="#CCCCCC"> part of</font>

305
00:14:10,140 --> 00:14:17,490
the of our<font color="#E5E5E5"> Oracle so to realize</font><font color="#CCCCCC"> this</font>

306
00:14:14,400 --> 00:14:19,199
<font color="#CCCCCC">garbling</font><font color="#E5E5E5"> the other part we're going</font><font color="#CCCCCC"> to</font>

307
00:14:17,490 --> 00:14:21,360
<font color="#CCCCCC">define an ideal coupling scheme for</font>

308
00:14:19,200 --> 00:14:23,010
circuits with<font color="#CCCCCC"> F gates</font><font color="#E5E5E5"> or random Oracle</font>

309
00:14:21,360 --> 00:14:26,550
<font color="#CCCCCC">gates which represent one way function</font>

310
00:14:23,010 --> 00:14:30,420
gates and these are composed of<font color="#E5E5E5"> two</font>

311
00:14:26,550 --> 00:14:32,699
<font color="#E5E5E5">subroutines which which map to the same</font>

312
00:14:30,420 --> 00:14:37,860
subroutines<font color="#CCCCCC"> that belong to the cobbling</font>

313
00:14:32,700 --> 00:14:40,080
scheme garb and eval garb can be seen as

314
00:14:37,860 --> 00:14:42,870
<font color="#E5E5E5">a random function that map's seed</font>

315
00:14:40,080 --> 00:14:45,810
circuit pairs to gobble circuits and

316
00:14:42,870 --> 00:14:51,920
<font color="#E5E5E5">input labels just around the function</font>

317
00:14:45,810 --> 00:14:56,189
and eval takes the<font color="#CCCCCC"> gobble circuit and</font>

318
00:14:51,920 --> 00:14:57,719
input labels finds<font color="#E5E5E5"> the corresponding</font>

319
00:14:56,190 --> 00:15:00,450
circuits and the inputs belonging to

320
00:14:57,720 --> 00:15:05,850
that<font color="#CCCCCC"> to these input labels and outputs</font>

321
00:15:00,450 --> 00:15:10,060
the<font color="#CCCCCC"> result</font><font color="#E5E5E5"> C of X</font><font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> we defined our</font>

322
00:15:05,850 --> 00:15:12,940
local is it

323
00:15:10,060 --> 00:15:16,209
which is<font color="#CCCCCC"> F and</font><font color="#E5E5E5"> carbonate</font><font color="#CCCCCC"> valve</font><font color="#E5E5E5"> however</font>

324
00:15:12,940 --> 00:15:18,339
the<font color="#E5E5E5"> problem is that this this</font><font color="#CCCCCC"> article is</font>

325
00:15:16,209 --> 00:15:20,560
too strong<font color="#E5E5E5"> it's actually strong enough</font>

326
00:15:18,339 --> 00:15:21,970
<font color="#CCCCCC">to realize a strong</font><font color="#E5E5E5"> form of office</font>

327
00:15:20,560 --> 00:15:24,430
kitchen<font color="#E5E5E5"> which is called virtual</font>

328
00:15:21,970 --> 00:15:28,089
Blackwell confiscation and this in fact

329
00:15:24,430 --> 00:15:32,769
<font color="#CCCCCC">implies P key</font><font color="#E5E5E5"> so this won't work we need</font>

330
00:15:28,089 --> 00:15:35,670
<font color="#E5E5E5">to somehow to weaken this Oracle so that</font>

331
00:15:32,769 --> 00:15:38,740
it still gives<font color="#E5E5E5"> us gobbling but it's not</font>

332
00:15:35,670 --> 00:15:39,839
strong enough<font color="#E5E5E5"> to</font><font color="#CCCCCC"> give us beginning so</font>

333
00:15:38,740 --> 00:15:42,130
how would we do that

334
00:15:39,839 --> 00:15:44,230
so the right version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this Oracle is</font>

335
00:15:42,130 --> 00:15:46,420
that we would<font color="#E5E5E5"> you take we take this</font>

336
00:15:44,230 --> 00:15:49,120
original<font color="#E5E5E5"> Oracle that we have and we add</font>

337
00:15:46,420 --> 00:15:51,819
<font color="#E5E5E5">a weakening subroutine no call to</font><font color="#CCCCCC"> reveal</font>

338
00:15:49,120 --> 00:15:54,880
subroutine which takes as input the

339
00:15:51,820 --> 00:15:57,790
<font color="#CCCCCC">global circuit</font><font color="#E5E5E5"> and two different</font>

340
00:15:54,880 --> 00:15:59,170
<font color="#CCCCCC">sequences of input labels</font><font color="#E5E5E5"> belonging to</font>

341
00:15:57,790 --> 00:16:02,620
the corresponding to two different

342
00:15:59,170 --> 00:16:04,180
<font color="#E5E5E5">inputs and reveals</font><font color="#CCCCCC"> the secret the</font>

343
00:16:02,620 --> 00:16:09,279
reveals of the seed<font color="#E5E5E5"> and the underlying</font>

344
00:16:04,180 --> 00:16:14,109
circuit<font color="#CCCCCC"> this</font><font color="#E5E5E5"> basically this this</font>

345
00:16:09,279 --> 00:16:15,550
intuitively<font color="#E5E5E5"> says some realizes the</font>

346
00:16:14,110 --> 00:16:18,640
security of<font color="#E5E5E5"> a gobbling scheme where it</font>

347
00:16:15,550 --> 00:16:20,949
says that if you<font color="#CCCCCC"> go if you evaluate the</font>

348
00:16:18,640 --> 00:16:23,680
<font color="#CCCCCC">circuit and do</font><font color="#E5E5E5"> different inputs all bets</font>

349
00:16:20,950 --> 00:16:25,540
<font color="#E5E5E5">are off</font><font color="#CCCCCC"> we build</font><font color="#E5E5E5"> a circuit that's what</font>

350
00:16:23,680 --> 00:16:26,890
it means<font color="#E5E5E5"> for the reveal function so</font>

351
00:16:25,540 --> 00:16:28,329
we're fine with that because the

352
00:16:26,890 --> 00:16:33,069
gobbling scheme is anyways at one time

353
00:16:28,329 --> 00:16:36,189
use<font color="#E5E5E5"> garlic scheme so now our Oracle</font><font color="#CCCCCC"> o</font><font color="#E5E5E5"> is</font>

354
00:16:33,070 --> 00:16:38,260
this new Oracle which is composed<font color="#E5E5E5"> of the</font>

355
00:16:36,190 --> 00:16:39,640
<font color="#E5E5E5">random Oracle garb</font><font color="#CCCCCC"> IVA and the real</font>

356
00:16:38,260 --> 00:16:44,560
function<font color="#E5E5E5"> which is the weakening</font>

357
00:16:39,640 --> 00:16:47,829
subroutine great so I'll come now going

358
00:16:44,560 --> 00:16:50,229
back<font color="#E5E5E5"> our goal is to show this is our</font>

359
00:16:47,829 --> 00:16:53,170
focus<font color="#CCCCCC"> is our</font><font color="#E5E5E5"> construction and our goal</font>

360
00:16:50,230 --> 00:16:55,839
<font color="#CCCCCC">is to</font><font color="#E5E5E5"> show an attacker that</font><font color="#CCCCCC"> uses this</font>

361
00:16:53,170 --> 00:16:57,899
<font color="#E5E5E5">Oracle to break the speaker a scheme in</font>

362
00:16:55,839 --> 00:17:00,850
<font color="#CCCCCC">order</font><font color="#E5E5E5"> to prove the black</font><font color="#CCCCCC"> box separation</font>

363
00:16:57,899 --> 00:17:02,980
and<font color="#E5E5E5"> we want to show that any</font><font color="#CCCCCC"> PK</font><font color="#E5E5E5"> it can</font>

364
00:17:00,850 --> 00:17:06,240
be<font color="#CCCCCC"> broken using only polynomial number</font>

365
00:17:02,980 --> 00:17:06,240
queries to<font color="#CCCCCC"> the Oracle</font>

366
00:17:08,180 --> 00:17:12,900
so specifically what<font color="#E5E5E5"> we will do is</font><font color="#CCCCCC"> that</font>

367
00:17:11,099 --> 00:17:15,839
this adversary will make exclusive use

368
00:17:12,900 --> 00:17:19,230
of the<font color="#E5E5E5"> reveal function we want allow the</font>

369
00:17:15,839 --> 00:17:21,389
pka scheme to ask to query the reveal

370
00:17:19,230 --> 00:17:25,020
<font color="#E5E5E5">Oracle and this is still sufficient to</font>

371
00:17:21,390 --> 00:17:27,420
proving<font color="#E5E5E5"> a black box separation this is</font>

372
00:17:25,020 --> 00:17:30,930
similar<font color="#CCCCCC"> to the techniques used by</font>

373
00:17:27,420 --> 00:17:33,630
<font color="#CCCCCC">Gartner</font><font color="#E5E5E5"> at all and shower reason which</font>

374
00:17:30,930 --> 00:17:39,240
defined<font color="#E5E5E5"> the to Oracle separation</font>

375
00:17:33,630 --> 00:17:40,650
technique for separation results great

376
00:17:39,240 --> 00:17:45,330
so our approach at a high level is as

377
00:17:40,650 --> 00:17:47,820
follows<font color="#E5E5E5"> we have this</font><font color="#CCCCCC"> PKA scheme</font><font color="#E5E5E5"> in the</font>

378
00:17:45,330 --> 00:17:49,800
or in the Oracle<font color="#CCCCCC"> model</font><font color="#E5E5E5"> that we defined</font>

379
00:17:47,820 --> 00:17:51,389
and what we're<font color="#E5E5E5"> going to do is we're</font>

380
00:17:49,800 --> 00:17:55,010
going<font color="#E5E5E5"> to compile out the evaluation</font>

381
00:17:51,390 --> 00:17:57,420
queries from<font color="#E5E5E5"> this public focus</font><font color="#CCCCCC"> pke and</font>

382
00:17:55,010 --> 00:18:00,480
what by compiling out this<font color="#E5E5E5"> means that we</font>

383
00:17:57,420 --> 00:18:02,520
simulate<font color="#E5E5E5"> any evaluation queries that the</font>

384
00:18:00,480 --> 00:18:04,790
new PKA scheme will do we will simulate

385
00:18:02,520 --> 00:18:07,580
it<font color="#E5E5E5"> without asking the Oracle explicitly</font>

386
00:18:04,790 --> 00:18:10,440
so what we end up<font color="#CCCCCC"> with is a</font><font color="#E5E5E5"> PKA scheme</font>

387
00:18:07,580 --> 00:18:12,149
that is we're going<font color="#E5E5E5"> to make sure that is</font>

388
00:18:10,440 --> 00:18:16,010
the<font color="#E5E5E5"> PK scheme is almost as correct and</font>

389
00:18:12,150 --> 00:18:20,250
as secure as the original PKA scheme and

390
00:18:16,010 --> 00:18:22,800
this new<font color="#E5E5E5"> Oracle is going to simply</font><font color="#CCCCCC"> just</font>

391
00:18:20,250 --> 00:18:25,440
a random Oracle if you recall garb was

392
00:18:22,800 --> 00:18:28,250
just<font color="#E5E5E5"> a random Oracle</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the new PK</font>

393
00:18:25,440 --> 00:18:30,510
scheme doesn't ask<font color="#E5E5E5"> any eval queries and</font>

394
00:18:28,250 --> 00:18:32,190
<font color="#E5E5E5">we know that by the result of</font><font color="#CCCCCC"> progress</font>

395
00:18:30,510 --> 00:18:35,340
<font color="#CCCCCC">in rooted that there is a poly query</font>

396
00:18:32,190 --> 00:18:38,100
attack against this new PKA scheme<font color="#E5E5E5"> so we</font>

397
00:18:35,340 --> 00:18:40,830
can reduce<font color="#E5E5E5"> this attack with the help of</font>

398
00:18:38,100 --> 00:18:44,310
the reveal subroutine which we defined

399
00:18:40,830 --> 00:18:46,230
specifically to weaken the<font color="#E5E5E5"> Oracle we</font>

400
00:18:44,310 --> 00:18:50,250
will use this reveal subroutine<font color="#E5E5E5"> in order</font>

401
00:18:46,230 --> 00:18:51,990
<font color="#E5E5E5">to break the original PK scheme and this</font>

402
00:18:50,250 --> 00:18:53,670
basically<font color="#E5E5E5"> conclude this basically</font><font color="#CCCCCC"> shows</font>

403
00:18:51,990 --> 00:18:55,910
that<font color="#CCCCCC"> the security</font><font color="#E5E5E5"> of the original PK</font>

404
00:18:53,670 --> 00:18:55,910
scheme

405
00:18:57,560 --> 00:19:03,260
so<font color="#E5E5E5"> our fortune more detail is that we're</font>

406
00:19:00,980 --> 00:19:06,710
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to actually remove the evaluation</font>

407
00:19:03,260 --> 00:19:08,450
queries one by one in order<font color="#E5E5E5"> to simplify</font>

408
00:19:06,710 --> 00:19:10,040
our<font color="#E5E5E5"> approach so first we're going to</font>

409
00:19:08,450 --> 00:19:12,140
compile out the evaluation queries from

410
00:19:10,040 --> 00:19:14,080
<font color="#E5E5E5">the key generation then we're going to</font>

411
00:19:12,140 --> 00:19:16,580
compile them out from<font color="#E5E5E5"> the encryption</font>

412
00:19:14,080 --> 00:19:18,290
then finally<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> coming compiling the</font>

413
00:19:16,580 --> 00:19:21,679
evaluation queries from<font color="#E5E5E5"> the decryption</font>

414
00:19:18,290 --> 00:19:24,830
<font color="#CCCCCC">and in each phase and at the end we're</font>

415
00:19:21,680 --> 00:19:27,410
going to<font color="#E5E5E5"> get the get the</font><font color="#CCCCCC"> PTI scheme in</font>

416
00:19:24,830 --> 00:19:29,379
the random Oracle model<font color="#E5E5E5"> so we're going</font>

417
00:19:27,410 --> 00:19:31,400
to<font color="#E5E5E5"> use the attacker</font><font color="#CCCCCC"> of the ir scheme</font>

418
00:19:29,380 --> 00:19:34,940
<font color="#CCCCCC">noir</font><font color="#E5E5E5"> and we're going to reduce this</font>

419
00:19:31,400 --> 00:19:37,640
attack back<font color="#CCCCCC"> to an attack to the previous</font>

420
00:19:34,940 --> 00:19:38,930
scheme and so on to the<font color="#E5E5E5"> again back to</font>

421
00:19:37,640 --> 00:19:40,580
<font color="#E5E5E5">the previous scheme until we get an</font>

422
00:19:38,930 --> 00:19:43,280
attacker and<font color="#CCCCCC"> you're for the</font><font color="#E5E5E5"> original</font>

423
00:19:40,580 --> 00:19:47,689
scheme so this is how we will do<font color="#E5E5E5"> it in</font>

424
00:19:43,280 --> 00:19:48,860
<font color="#E5E5E5">more in more detail so let's look at</font>

425
00:19:47,690 --> 00:19:50,360
<font color="#E5E5E5">first how do we compile out the</font>

426
00:19:48,860 --> 00:19:53,570
evaluation queries from<font color="#E5E5E5"> the keygen album</font>

427
00:19:50,360 --> 00:19:55,129
from<font color="#E5E5E5"> the key generation algorithm so</font>

428
00:19:53,570 --> 00:19:57,830
suppose we<font color="#E5E5E5"> want to compile out the</font>

429
00:19:55,130 --> 00:20:01,130
evaluation query from<font color="#E5E5E5"> the from the key</font>

430
00:19:57,830 --> 00:20:02,960
generation<font color="#E5E5E5"> Oracle from</font><font color="#CCCCCC"> the key</font>

431
00:20:01,130 --> 00:20:05,780
<font color="#E5E5E5">generation algorithm so we're going to</font>

432
00:20:02,960 --> 00:20:08,780
use this key property<font color="#CCCCCC"> of our of our do</font>

433
00:20:05,780 --> 00:20:10,250
all<font color="#E5E5E5"> our defined garb subroutine</font><font color="#CCCCCC"> that the</font>

434
00:20:08,780 --> 00:20:13,040
<font color="#CCCCCC">gobble size of the gobble circuit is</font>

435
00:20:10,250 --> 00:20:14,960
much larger than the<font color="#E5E5E5"> input circuit size</font>

436
00:20:13,040 --> 00:20:16,310
and<font color="#E5E5E5"> this basically means</font><font color="#CCCCCC"> that it's hard</font>

437
00:20:14,960 --> 00:20:21,320
<font color="#CCCCCC">to find any</font><font color="#E5E5E5"> gobble circuit</font><font color="#CCCCCC"> without</font>

438
00:20:16,310 --> 00:20:23,990
explicitly<font color="#E5E5E5"> asking garb itself so in this</font>

439
00:20:21,320 --> 00:20:26,240
case the<font color="#E5E5E5"> keygen algorithm would know</font><font color="#CCCCCC"> c1</font>

440
00:20:23,990 --> 00:20:29,660
and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> doesn't need to ask evil could</font>

441
00:20:26,240 --> 00:20:31,010
just compute<font color="#CCCCCC"> cc1</font><font color="#E5E5E5"> of X on its own so</font>

442
00:20:29,660 --> 00:20:34,970
we're done in this case that's an easy

443
00:20:31,010 --> 00:20:36,170
<font color="#E5E5E5">keys so suppose now were to compile out</font>

444
00:20:34,970 --> 00:20:39,830
the evaluation queries<font color="#CCCCCC"> from the</font>

445
00:20:36,170 --> 00:20:41,570
encryption algorithm<font color="#E5E5E5"> in that case the</font>

446
00:20:39,830 --> 00:20:44,149
<font color="#E5E5E5">evaluation let's let's look at this</font>

447
00:20:41,570 --> 00:20:46,189
evaluation query where in fact

448
00:20:44,150 --> 00:20:48,080
<font color="#E5E5E5">encryption does not know c1 because it</font>

449
00:20:46,190 --> 00:20:49,850
did<font color="#CCCCCC"> not generate the</font><font color="#E5E5E5"> correct the</font>

450
00:20:48,080 --> 00:20:53,720
<font color="#E5E5E5">corresponding garbled circuit for the</font>

451
00:20:49,850 --> 00:20:56,379
circuit so our<font color="#E5E5E5"> ideas to let the decay</font>

452
00:20:53,720 --> 00:20:58,970
generation algorithm help the encryption

453
00:20:56,380 --> 00:21:01,400
<font color="#E5E5E5">and in order to do that we're going to</font>

454
00:20:58,970 --> 00:21:02,630
<font color="#E5E5E5">modify the key generation algorithm and</font>

455
00:21:01,400 --> 00:21:04,820
make it into a new key<font color="#E5E5E5"> generation</font>

456
00:21:02,630 --> 00:21:06,500
algorithm<font color="#E5E5E5"> that sends a hint to</font>

457
00:21:04,820 --> 00:21:08,769
<font color="#CCCCCC">encryption to help the encryption</font>

458
00:21:06,500 --> 00:21:11,200
algorithm<font color="#E5E5E5"> asks</font>

459
00:21:08,769 --> 00:21:14,409
to help the encryption algorithm

460
00:21:11,200 --> 00:21:17,299
<font color="#E5E5E5">simulate the evaluation query on its own</font>

461
00:21:14,409 --> 00:21:21,169
so what should the<font color="#CCCCCC"> hit be how about we</font>

462
00:21:17,299 --> 00:21:23,899
do we just include gobs you want<font color="#E5E5E5"> plus</font>

463
00:21:21,169 --> 00:21:26,090
the<font color="#CCCCCC"> combo circuit</font><font color="#E5E5E5"> that's a valve that's</font>

464
00:21:23,899 --> 00:21:28,969
I mean that's<font color="#CCCCCC"> one way to do it</font><font color="#E5E5E5"> but the</font>

465
00:21:26,090 --> 00:21:30,499
<font color="#E5E5E5">thing is this break security because we</font>

466
00:21:28,970 --> 00:21:33,729
can't release information<font color="#CCCCCC"> that we can't</font>

467
00:21:30,499 --> 00:21:36,889
get<font color="#E5E5E5"> from the original scheme ourselves</font>

468
00:21:33,729 --> 00:21:38,419
so the actual solution is that<font color="#CCCCCC"> we allow</font>

469
00:21:36,889 --> 00:21:39,918
<font color="#E5E5E5">the kitchen the new kitchen kitchen</font>

470
00:21:38,419 --> 00:21:42,679
algorithm to run<font color="#E5E5E5"> the encryption many</font>

471
00:21:39,919 --> 00:21:45,440
times then add the answers of evaluation

472
00:21:42,679 --> 00:21:47,929
queries to the<font color="#CCCCCC"> hit</font><font color="#E5E5E5"> list these are</font>

473
00:21:45,440 --> 00:21:49,009
basically the highly probable<font color="#CCCCCC"> evaluation</font>

474
00:21:47,929 --> 00:21:52,580
queries<font color="#E5E5E5"> that will be asked by</font><font color="#CCCCCC"> the</font>

475
00:21:49,009 --> 00:21:53,960
<font color="#CCCCCC">encryption algorithm</font><font color="#E5E5E5"> and this way the</font>

476
00:21:52,580 --> 00:21:57,710
<font color="#E5E5E5">encryption algorithm can use the hit</font>

477
00:21:53,960 --> 00:22:02,359
list<font color="#E5E5E5"> to assimilate evaluation answer on</font>

478
00:21:57,710 --> 00:22:04,820
<font color="#CCCCCC">and so on</font><font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> we have this</font>

479
00:22:02,359 --> 00:22:08,210
decryption algorithm we want to remove

480
00:22:04,820 --> 00:22:11,119
the evaluation query<font color="#E5E5E5"> from this from this</font>

481
00:22:08,210 --> 00:22:14,809
from<font color="#E5E5E5"> the decryption algorithm</font><font color="#CCCCCC"> and the</font>

482
00:22:11,119 --> 00:22:17,209
way that is<font color="#E5E5E5"> done is that well the</font>

483
00:22:14,809 --> 00:22:18,739
question Algrim doesn't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> c2 so again</font>

484
00:22:17,210 --> 00:22:21,649
let's the encryption algorithm help the

485
00:22:18,739 --> 00:22:23,840
decryption algorithm so our first

486
00:22:21,649 --> 00:22:27,590
instinct is a game<font color="#CCCCCC"> send a hint list to</font>

487
00:22:23,840 --> 00:22:29,149
the decryption<font color="#E5E5E5"> algorithm</font><font color="#CCCCCC"> and let the</font>

488
00:22:27,590 --> 00:22:30,949
encryption algorithm run decryption many

489
00:22:29,149 --> 00:22:32,748
times<font color="#E5E5E5"> just the same with</font><font color="#CCCCCC"> same thing we</font>

490
00:22:30,950 --> 00:22:34,700
<font color="#E5E5E5">did for the encryption and add the</font>

491
00:22:32,749 --> 00:22:37,549
answers<font color="#E5E5E5"> of the evaluation queries to the</font>

492
00:22:34,700 --> 00:22:39,169
<font color="#E5E5E5">headless however here's the problem is</font>

493
00:22:37,549 --> 00:22:44,989
that the encryption<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> no secret</font>

494
00:22:39,169 --> 00:22:46,789
key<font color="#E5E5E5"> so while this at initial at first</font>

495
00:22:44,989 --> 00:22:48,590
glance won't work<font color="#CCCCCC"> what we're going to do</font>

496
00:22:46,789 --> 00:22:50,090
something<font color="#E5E5E5"> very similar but instead of</font>

497
00:22:48,590 --> 00:22:51,859
<font color="#E5E5E5">running the decryption algorithm</font><font color="#CCCCCC"> on the</font>

498
00:22:50,090 --> 00:22:55,099
real secret key<font color="#E5E5E5"> we're going to simulate</font>

499
00:22:51,859 --> 00:22:59,149
a fake secret key and<font color="#CCCCCC"> this fake secret</font>

500
00:22:55,099 --> 00:23:00,499
key<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will yield a distribution of</font>

501
00:22:59,149 --> 00:23:03,228
decryption that's very close<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

502
00:23:00,499 --> 00:23:04,609
decryption under the real secret key<font color="#CCCCCC"> and</font>

503
00:23:03,229 --> 00:23:06,259
we're going<font color="#CCCCCC"> to run this many times and</font>

504
00:23:04,609 --> 00:23:11,749
<font color="#E5E5E5">add the answers of the eval queries to</font>

505
00:23:06,259 --> 00:23:16,789
the<font color="#E5E5E5"> head list and this concludes the</font>

506
00:23:11,749 --> 00:23:19,070
<font color="#CCCCCC">compliation</font><font color="#E5E5E5"> process so to summarize</font><font color="#CCCCCC"> our</font>

507
00:23:16,789 --> 00:23:20,870
main result says<font color="#CCCCCC"> that one-way</font><font color="#E5E5E5"> function</font>

508
00:23:19,070 --> 00:23:24,110
<font color="#CCCCCC">plus garbling for circuits one</font><font color="#E5E5E5"> function</font>

509
00:23:20,870 --> 00:23:26,479
<font color="#E5E5E5">are sufficient for constructing a in a</font>

510
00:23:24,110 --> 00:23:27,949
black box way<font color="#CCCCCC"> and there are other</font>

511
00:23:26,480 --> 00:23:31,009
<font color="#CCCCCC">extension</font><font color="#E5E5E5"> this work that I</font><font color="#CCCCCC"> did not</font>

512
00:23:27,950 --> 00:23:34,460
discuss in this work in the stock<font color="#E5E5E5"> that</font>

513
00:23:31,009 --> 00:23:38,389
is we extended it<font color="#E5E5E5"> to link out even</font>

514
00:23:34,460 --> 00:23:41,120
constant<font color="#CCCCCC"> around keeping</font><font color="#E5E5E5"> particles and we</font>

515
00:23:38,389 --> 00:23:43,008
also extended<font color="#E5E5E5"> the</font><font color="#CCCCCC"> work of backers</font><font color="#E5E5E5"> get</font>

516
00:23:41,120 --> 00:23:44,570
<font color="#E5E5E5">all to show that career function plus</font>

517
00:23:43,009 --> 00:23:46,580
music with<font color="#CCCCCC"> one-way function gates are</font>

518
00:23:44,570 --> 00:23:49,269
insufficient are not sufficient for

519
00:23:46,580 --> 00:23:54,470
constructing<font color="#CCCCCC"> pke</font><font color="#E5E5E5"> without even assuming</font>

520
00:23:49,269 --> 00:23:56,289
completeness and finally I leave you

521
00:23:54,470 --> 00:23:59,090
with some open problems<font color="#E5E5E5"> which is</font>

522
00:23:56,289 --> 00:24:00,470
<font color="#CCCCCC">extensive drooling out BKE</font><font color="#E5E5E5"> even a free</font>

523
00:23:59,090 --> 00:24:03,408
loud gobbling of the<font color="#CCCCCC"> grabbing scheme</font>

524
00:24:00,470 --> 00:24:04,730
itself<font color="#E5E5E5"> that's a very</font><font color="#CCCCCC"> interesting problem</font>

525
00:24:03,409 --> 00:24:07,190
<font color="#E5E5E5">and it somehow falls under the</font>

526
00:24:04,730 --> 00:24:08,659
monolithic model and there's the

527
00:24:07,190 --> 00:24:10,639
<font color="#CCCCCC">extension to ruling out key exchange</font>

528
00:24:08,659 --> 00:24:13,730
with polynomial number of rounds from

529
00:24:10,639 --> 00:24:14,909
<font color="#E5E5E5">one function</font><font color="#CCCCCC"> plus garbling so yeah thank</font>

530
00:24:13,730 --> 00:24:19,979
<font color="#E5E5E5">you</font>

531
00:24:14,910 --> 00:24:19,979
[Applause]

