1
00:00:04,930 --> 00:00:15,790
I want to start with<font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> I want</font>

2
00:00:10,180 --> 00:00:17,410
<font color="#E5E5E5">to start with the problem and we let us</font>

3
00:00:15,790 --> 00:00:21,060
see how this<font color="#E5E5E5"> connect relates to</font>

4
00:00:17,410 --> 00:00:23,950
cryptography<font color="#E5E5E5"> so in this problem</font>

5
00:00:21,060 --> 00:00:26,290
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> below two spaceships arriving</font>

6
00:00:23,950 --> 00:00:30,189
on on adjacent<font color="#CCCCCC"> cells inside another</font>

7
00:00:26,290 --> 00:00:34,300
<font color="#E5E5E5">field is on animals the goal is to stop</font>

8
00:00:30,189 --> 00:00:36,460
on the same cell or to meet and what

9
00:00:34,300 --> 00:00:38,949
<font color="#E5E5E5">Ellison Bob cannot do is that they</font>

10
00:00:36,460 --> 00:00:40,329
cannot<font color="#E5E5E5"> communicate and they do not know</font>

11
00:00:38,949 --> 00:00:44,920
which one of them is to the left of<font color="#E5E5E5"> the</font>

12
00:00:40,329 --> 00:00:47,350
other what<font color="#CCCCCC"> else in Bob can do is that</font>

13
00:00:44,920 --> 00:00:50,170
each of<font color="#E5E5E5"> them</font><font color="#CCCCCC"> is allowed to read T cells</font>

14
00:00:47,350 --> 00:00:54,550
from the array and then decide well I'm

15
00:00:50,170 --> 00:00:57,519
not<font color="#CCCCCC"> still not self to stop</font><font color="#E5E5E5"> on and so</font>

16
00:00:54,550 --> 00:01:00,879
again the the goal is<font color="#CCCCCC"> to stop on the</font>

17
00:00:57,519 --> 00:01:02,858
same cell it can<font color="#CCCCCC"> be shown</font><font color="#E5E5E5"> that no matter</font>

18
00:01:00,879 --> 00:01:04,179
what started here is<font color="#CCCCCC"> an Bob follow they</font>

19
00:01:02,859 --> 00:01:09,640
cannot guarantee to stop on the same

20
00:01:04,180 --> 00:01:11,680
cell<font color="#E5E5E5"> so the specific problem is what</font>

21
00:01:09,640 --> 00:01:13,810
strategy should Alice and Bob follow in

22
00:01:11,680 --> 00:01:18,010
order for them to<font color="#CCCCCC"> maximize the</font>

23
00:01:13,810 --> 00:01:20,770
probability<font color="#E5E5E5"> to meet or to synchronize so</font>

24
00:01:18,010 --> 00:01:22,900
this is the space it problem and let<font color="#CCCCCC"> us</font>

25
00:01:20,770 --> 00:01:25,929
know<font color="#E5E5E5"> a view a simple</font><font color="#CCCCCC"> solution for</font><font color="#E5E5E5"> this</font>

26
00:01:22,900 --> 00:01:31,750
<font color="#CCCCCC">basic problem so in this solution</font><font color="#E5E5E5"> each</font>

27
00:01:25,930 --> 00:01:33,670
of this each<font color="#E5E5E5"> of the spaceships read T</font>

28
00:01:31,750 --> 00:01:36,340
consecutive cells<font color="#CCCCCC"> starting from the</font>

29
00:01:33,670 --> 00:01:40,750
stopping stop stopping<font color="#CCCCCC"> fold from</font><font color="#E5E5E5"> the</font>

30
00:01:36,340 --> 00:01:44,440
<font color="#E5E5E5">arrival point and after reading</font><font color="#CCCCCC"> all</font>

31
00:01:40,750 --> 00:01:47,380
these cells they go back and stop on the

32
00:01:44,440 --> 00:01:50,679
minimal value<font color="#CCCCCC"> they encounter so this is</font>

33
00:01:47,380 --> 00:01:54,850
the algorithm to use<font color="#E5E5E5"> and let us now</font>

34
00:01:50,680 --> 00:01:57,280
analyze this algorithm<font color="#CCCCCC"> so since Alice</font>

35
00:01:54,850 --> 00:01:59,530
and Bob's start on adjacent<font color="#E5E5E5"> cells the</font>

36
00:01:57,280 --> 00:02:03,970
<font color="#CCCCCC">only way they will not find the</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> in</font>

37
00:01:59,530 --> 00:02:06,370
<font color="#CCCCCC">EMU is if the minimum is on one of the</font>

38
00:02:03,970 --> 00:02:10,929
cells<font color="#E5E5E5"> only one of them read there are</font>

39
00:02:06,370 --> 00:02:14,140
only two the only 2/3 which only<font color="#E5E5E5"> one of</font>

40
00:02:10,929 --> 00:02:15,549
them<font color="#E5E5E5"> read which are this two and</font><font color="#CCCCCC"> this</font>

41
00:02:14,140 --> 00:02:17,988
means that

42
00:02:15,549 --> 00:02:21,620
the probability for<font color="#E5E5E5"> Bob</font><font color="#CCCCCC"> to not</font>

43
00:02:17,989 --> 00:02:23,810
synchronize is about<font color="#CCCCCC"> to over T so this</font>

44
00:02:21,620 --> 00:02:26,780
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> basic solution for the spaceship</font>

45
00:02:23,810 --> 00:02:29,599
<font color="#E5E5E5">slalom and let us now</font><font color="#CCCCCC"> show</font>

46
00:02:26,780 --> 00:02:33,079
let<font color="#CCCCCC"> us now see the original motivation</font>

47
00:02:29,599 --> 00:02:35,810
<font color="#E5E5E5">for the spaceship problem and so this is</font>

48
00:02:33,079 --> 00:02:37,700
the<font color="#CCCCCC"> most</font><font color="#E5E5E5"> executed</font><font color="#CCCCCC"> challenge</font><font color="#E5E5E5"> and this is</font>

49
00:02:35,810 --> 00:02:41,239
a concept<font color="#E5E5E5"> introduced by Boyle Galvani</font>

50
00:02:37,700 --> 00:02:42,828
shy of<font color="#E5E5E5"> BTI two years ago and it is an</font>

51
00:02:41,239 --> 00:02:46,519
alternative to fully on morphic

52
00:02:42,829 --> 00:02:49,849
encryption in the very<font color="#CCCCCC"> eye</font><font color="#E5E5E5"> level</font><font color="#CCCCCC"> the</font>

53
00:02:46,519 --> 00:02:52,099
difference between HSN fhe is that HSS

54
00:02:49,849 --> 00:02:56,298
<font color="#E5E5E5">is more efficient however</font><font color="#CCCCCC"> it is less</font>

55
00:02:52,099 --> 00:02:58,159
functional so the first problem<font color="#E5E5E5"> of</font>

56
00:02:56,299 --> 00:03:02,359
morphic secret sharing<font color="#CCCCCC"> sauce is the</font>

57
00:02:58,159 --> 00:03:05,450
<font color="#E5E5E5">problem of out of securely outsourcing</font>

58
00:03:02,359 --> 00:03:07,280
<font color="#CCCCCC">the heavy computational task and so</font>

59
00:03:05,450 --> 00:03:10,608
<font color="#E5E5E5">indeed suppose they want to compute some</font>

60
00:03:07,280 --> 00:03:13,939
public function f<font color="#E5E5E5"> on a secret input X</font>

61
00:03:10,609 --> 00:03:16,790
what HSS does is to split<font color="#E5E5E5"> X into two</font>

62
00:03:13,939 --> 00:03:19,370
parts or two shells and send each of the

63
00:03:16,790 --> 00:03:22,870
<font color="#E5E5E5">is each</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the cells to a different</font>

64
00:03:19,370 --> 00:03:26,419
server itself well then compute some

65
00:03:22,870 --> 00:03:30,139
<font color="#CCCCCC">then evaluate some function of a in</font>

66
00:03:26,419 --> 00:03:32,750
shell and this<font color="#E5E5E5"> is how the HSS scheme</font>

67
00:03:30,139 --> 00:03:37,609
goes so what are the<font color="#CCCCCC"> requirements</font>

68
00:03:32,750 --> 00:03:40,099
<font color="#CCCCCC">waveform from</font><font color="#E5E5E5"> a good HSS scheme we want</font>

69
00:03:37,609 --> 00:03:42,229
privacy<font color="#CCCCCC"> we want that each of these</font>

70
00:03:40,099 --> 00:03:44,988
shells<font color="#E5E5E5"> does not</font><font color="#CCCCCC"> easily reveal</font>

71
00:03:42,229 --> 00:03:49,489
information<font color="#E5E5E5"> about the original circuit</font>

72
00:03:44,989 --> 00:03:53,739
input X another thing we want is

73
00:03:49,489 --> 00:03:56,250
<font color="#CCCCCC">efficiency we don't want the service to</font>

74
00:03:53,739 --> 00:03:58,770
<font color="#E5E5E5">we don't want</font><font color="#CCCCCC"> the</font>

75
00:03:56,250 --> 00:04:01,020
the overhead<font color="#CCCCCC"> of the evaluation of the of</font>

76
00:03:58,770 --> 00:04:03,870
the service to<font color="#CCCCCC"> be too high compared</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> s</font>

77
00:04:01,020 --> 00:04:08,990
<font color="#E5E5E5">and finally</font><font color="#CCCCCC"> one correctness we want to</font>

78
00:04:03,870 --> 00:04:15,000
<font color="#CCCCCC">easily to easily cover</font><font color="#E5E5E5"> f of X from the</font>

79
00:04:08,990 --> 00:04:18,870
from the outputs of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> server's so</font>

80
00:04:15,000 --> 00:04:22,079
indeed after after presenting the the

81
00:04:18,870 --> 00:04:29,300
<font color="#E5E5E5">concept of HSS BG I managed</font><font color="#CCCCCC"> to construct</font>

82
00:04:22,079 --> 00:04:32,909
<font color="#CCCCCC">the GU</font><font color="#E5E5E5"> basis HSS protocol the protocol</font>

83
00:04:29,300 --> 00:04:34,470
the security of the protocol relies only

84
00:04:32,910 --> 00:04:36,870
on the traditional decisional

85
00:04:34,470 --> 00:04:41,700
diffie-hellman<font color="#CCCCCC"> oddness assumption and</font>

86
00:04:36,870 --> 00:04:42,900
also the the communication complexity of

87
00:04:41,700 --> 00:04:48,030
the protocol is low

88
00:04:42,900 --> 00:04:49,859
however the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> construction is only</font>

89
00:04:48,030 --> 00:04:53,090
good for it<font color="#E5E5E5"> restricted class of</font>

90
00:04:49,860 --> 00:04:55,820
functions mainly for<font color="#CCCCCC"> branching programs</font>

91
00:04:53,090 --> 00:04:58,080
HSS has many applications<font color="#CCCCCC"> such as</font>

92
00:04:55,820 --> 00:05:00,000
private information with level and

93
00:04:58,080 --> 00:05:02,159
<font color="#E5E5E5">secure multi-party computation in</font>

94
00:05:00,000 --> 00:05:04,260
subliminal communication<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sabrina</font>

95
00:05:02,160 --> 00:05:10,320
<font color="#E5E5E5">communication is</font><font color="#CCCCCC"> the interesting part</font><font color="#E5E5E5"> in</font>

96
00:05:04,260 --> 00:05:15,180
<font color="#CCCCCC">iam</font><font color="#E5E5E5"> so let us now go present the HSS</font>

97
00:05:10,320 --> 00:05:18,240
protocol in more detail the HSS protocol

98
00:05:15,180 --> 00:05:19,800
builds with functions<font color="#CCCCCC"> F that can be</font>

99
00:05:18,240 --> 00:05:22,350
implemented<font color="#E5E5E5"> as a sequence of the</font>

100
00:05:19,800 --> 00:05:25,260
following kinds of of instructions<font color="#CCCCCC"> the</font>

101
00:05:22,350 --> 00:05:30,510
main one<font color="#CCCCCC"> of them are the middle two</font>

102
00:05:25,260 --> 00:05:35,190
which<font color="#CCCCCC"> enables us to add to add to memory</font>

103
00:05:30,510 --> 00:05:38,700
variables and and second one allows us

104
00:05:35,190 --> 00:05:42,000
to multiply<font color="#CCCCCC"> an a an arbitrary memory</font>

105
00:05:38,700 --> 00:05:50,130
<font color="#E5E5E5">variable by only an input so this is</font>

106
00:05:42,000 --> 00:05:53,040
well HSS is not generic so what is

107
00:05:50,130 --> 00:05:57,060
<font color="#E5E5E5">service do the evaluation functions the</font>

108
00:05:53,040 --> 00:05:58,230
<font color="#CCCCCC">tawanda service mainly simulate the</font>

109
00:05:57,060 --> 00:06:02,460
function f instruction by instruction

110
00:05:58,230 --> 00:06:05,190
<font color="#E5E5E5">and the main thing about them that</font>

111
00:06:02,460 --> 00:06:07,979
about the variation functions that the

112
00:06:05,190 --> 00:06:12,230
is that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> following valiant that each</font>

113
00:06:07,980 --> 00:06:16,170
variable<font color="#CCCCCC"> Y appearing in the program</font><font color="#E5E5E5"> F</font>

114
00:06:12,230 --> 00:06:18,800
equal to<font color="#E5E5E5"> is equal to two corresponding</font>

115
00:06:16,170 --> 00:06:23,060
variables that<font color="#CCCCCC"> lie on the only servers</font>

116
00:06:18,800 --> 00:06:27,090
so in the this means that the<font color="#E5E5E5"> server's</font>

117
00:06:23,060 --> 00:06:31,800
shared the each memo available in<font color="#E5E5E5"> the</font>

118
00:06:27,090 --> 00:06:35,460
program<font color="#CCCCCC"> of F so basically it is pretty</font>

119
00:06:31,800 --> 00:06:38,880
<font color="#E5E5E5">easy to to</font><font color="#CCCCCC"> implement an</font><font color="#E5E5E5"> addition</font>

120
00:06:35,460 --> 00:06:40,770
instruction because it is linear so it

121
00:06:38,880 --> 00:06:46,110
<font color="#E5E5E5">behaves good with this</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> invariant</font>

122
00:06:40,770 --> 00:06:49,969
<font color="#CCCCCC">and the problem is to to implement the</font>

123
00:06:46,110 --> 00:06:53,760
multiplication the<font color="#E5E5E5"> multiplication</font>

124
00:06:49,970 --> 00:06:56,010
instruction so in<font color="#CCCCCC"> order to see how</font><font color="#E5E5E5"> to do</font>

125
00:06:53,760 --> 00:06:59,820
this let<font color="#CCCCCC"> us go even further</font><font color="#E5E5E5"> in the</font>

126
00:06:56,010 --> 00:07:02,670
<font color="#E5E5E5">application in the implementation of the</font>

127
00:06:59,820 --> 00:07:04,620
<font color="#E5E5E5">HSS protocol so the setting is that we</font>

128
00:07:02,670 --> 00:07:10,860
have some cryptographic group<font color="#E5E5E5"> generated</font>

129
00:07:04,620 --> 00:07:15,180
by some generator G and suppose that<font color="#E5E5E5"> we</font>

130
00:07:10,860 --> 00:07:22,400
have some<font color="#E5E5E5"> output of a multiplication</font><font color="#CCCCCC"> of</font>

131
00:07:15,180 --> 00:07:22,400
my<font color="#E5E5E5"> multiplication instruction so if we</font>

132
00:07:23,300 --> 00:07:30,210
so we turns out that the parties can

133
00:07:26,300 --> 00:07:33,930
multiplicate multiplicative<font color="#CCCCCC"> little G to</font>

134
00:07:30,210 --> 00:07:36,960
the power of Z that<font color="#CCCCCC"> means</font><font color="#E5E5E5"> that each each</font>

135
00:07:33,930 --> 00:07:39,210
<font color="#CCCCCC">one of the server's</font><font color="#E5E5E5"> has some group</font>

136
00:07:36,960 --> 00:07:41,400
element so that<font color="#E5E5E5"> the product of the</font><font color="#CCCCCC"> this</font>

137
00:07:39,210 --> 00:07:46,380
element equal to G to dizzy

138
00:07:41,400 --> 00:07:49,710
and and the main problem<font color="#E5E5E5"> in in in the</font>

139
00:07:46,380 --> 00:07:53,580
HSS protocol is<font color="#E5E5E5"> to somehow transform</font>

140
00:07:49,710 --> 00:07:57,060
<font color="#E5E5E5">this multiple multiplicative shell into</font>

141
00:07:53,580 --> 00:07:59,820
additive ones<font color="#E5E5E5"> and so this is the</font><font color="#CCCCCC"> shoc</font>

142
00:07:57,060 --> 00:08:03,140
conversion problem and it is<font color="#E5E5E5"> a very</font>

143
00:07:59,820 --> 00:08:07,260
<font color="#E5E5E5">simple solution basically if you just</font>

144
00:08:03,140 --> 00:08:10,190
compute<font color="#E5E5E5"> the discrete logs of the of of</font>

145
00:08:07,260 --> 00:08:13,289
<font color="#E5E5E5">your input you can transform</font>

146
00:08:10,190 --> 00:08:14,430
multiplicative same things into additive

147
00:08:13,290 --> 00:08:17,139
ones

148
00:08:14,430 --> 00:08:20,619
however this is<font color="#E5E5E5"> very inefficient you</font>

149
00:08:17,139 --> 00:08:22,509
know taking<font color="#CCCCCC"> mosquitos</font><font color="#E5E5E5"> out and so in</font>

150
00:08:20,619 --> 00:08:23,699
order to<font color="#E5E5E5"> solve the</font><font color="#CCCCCC"> shock inversion</font>

151
00:08:22,509 --> 00:08:27,719
problem

152
00:08:23,699 --> 00:08:30,580
<font color="#CCCCCC">be giant reduce the DD log problem</font>

153
00:08:27,719 --> 00:08:32,409
<font color="#E5E5E5">distribute the discrete log problem in</font>

154
00:08:30,580 --> 00:08:38,559
this problem<font color="#CCCCCC"> we</font><font color="#E5E5E5"> search for two</font>

155
00:08:32,409 --> 00:08:41,169
algorithms<font color="#E5E5E5"> a and B and so that so that</font>

156
00:08:38,559 --> 00:08:44,529
<font color="#E5E5E5">they transform the input difference in</font>

157
00:08:41,169 --> 00:08:46,600
the in the exponent<font color="#E5E5E5"> to an integer</font>

158
00:08:44,529 --> 00:08:49,389
additive difference in the output<font color="#CCCCCC"> so</font>

159
00:08:46,600 --> 00:08:53,139
there is a difference in<font color="#E5E5E5"> the exponent</font>

160
00:08:49,389 --> 00:08:58,110
<font color="#CCCCCC">and little some</font><font color="#E5E5E5"> it to some some</font>

161
00:08:53,139 --> 00:09:01,029
difference in<font color="#E5E5E5"> the in the output</font><font color="#CCCCCC"> so</font>

162
00:08:58,110 --> 00:09:03,009
basically we<font color="#CCCCCC"> can do this by just by</font>

163
00:09:01,029 --> 00:09:04,990
taking logs<font color="#E5E5E5"> however we search for a</font>

164
00:09:03,009 --> 00:09:10,509
trade-off between<font color="#E5E5E5"> the running times of</font>

165
00:09:04,990 --> 00:09:12,579
<font color="#E5E5E5">the algorithms can be</font><font color="#CCCCCC"> and and and</font><font color="#E5E5E5"> and we</font>

166
00:09:10,509 --> 00:09:15,100
give<font color="#E5E5E5"> them the space to</font><font color="#CCCCCC"> twelve</font><font color="#E5E5E5"> with some</font>

167
00:09:12,579 --> 00:09:16,989
probability so we search for<font color="#E5E5E5"> a trade-off</font>

168
00:09:15,100 --> 00:09:21,310
between<font color="#E5E5E5"> the low probability</font><font color="#CCCCCC"> and the</font>

169
00:09:16,990 --> 00:09:23,560
<font color="#E5E5E5">running times so it if you see the</font>

170
00:09:21,310 --> 00:09:25,630
details and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see that you can</font>

171
00:09:23,560 --> 00:09:27,250
solve the show conversion problem if we

172
00:09:25,630 --> 00:09:31,240
have<font color="#CCCCCC"> a solution for that which</font><font color="#E5E5E5"> totally</font>

173
00:09:27,250 --> 00:09:35,949
<font color="#CCCCCC">skip block problem and so let us</font><font color="#E5E5E5"> now get</font>

174
00:09:31,240 --> 00:09:39,339
to<font color="#CCCCCC"> twelve</font><font color="#E5E5E5"> results</font><font color="#CCCCCC"> and so our main result</font>

175
00:09:35,949 --> 00:09:41,469
is a as an optimal developer token we

176
00:09:39,339 --> 00:09:45,399
<font color="#CCCCCC">devised the duty log protocol with our</font>

177
00:09:41,470 --> 00:09:48,370
probability of<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> over T</font><font color="#CCCCCC"> Square which</font>

178
00:09:45,399 --> 00:09:50,680
improves upon the<font color="#CCCCCC"> BGI videolog protocol</font>

179
00:09:48,370 --> 00:09:53,860
<font color="#E5E5E5">the tomten and our probability of 1 over</font>

180
00:09:50,680 --> 00:09:56,739
T and this<font color="#E5E5E5"> probability</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 1 over T is</font>

181
00:09:53,860 --> 00:10:00,519
basically<font color="#CCCCCC"> the bureau of the</font><font color="#E5E5E5"> basic</font>

182
00:09:56,740 --> 00:10:03,819
algorithm<font color="#E5E5E5"> we had we had earlier so this</font>

183
00:10:00,519 --> 00:10:09,089
is the main the main is that the second

184
00:10:03,819 --> 00:10:11,829
<font color="#E5E5E5">result is and the multi part of the</font>

185
00:10:09,089 --> 00:10:13,680
algorithm<font color="#CCCCCC"> which means that the protocol</font>

186
00:10:11,829 --> 00:10:16,239
<font color="#E5E5E5">is optimal in</font><font color="#CCCCCC"> group satisfying the</font>

187
00:10:13,680 --> 00:10:19,239
discrete log in a short interval on this

188
00:10:16,240 --> 00:10:22,329
assumption which is<font color="#E5E5E5"> assumed to the</font>

189
00:10:19,240 --> 00:10:23,769
dishonest assumption is is assumed to

190
00:10:22,329 --> 00:10:25,819
hold in all standard cryptographic

191
00:10:23,769 --> 00:10:33,930
groups

192
00:10:25,820 --> 00:10:39,420
and lastly we can apply the<font color="#E5E5E5"> the digital</font>

193
00:10:33,930 --> 00:10:43,050
<font color="#E5E5E5">protocol and and and and improve the</font>

194
00:10:39,420 --> 00:10:46,800
efficiency<font color="#CCCCCC"> of</font><font color="#E5E5E5"> of the HSS protocol</font><font color="#CCCCCC"> so</font>

195
00:10:43,050 --> 00:10:49,800
basically we we prove the running time

196
00:10:46,800 --> 00:10:52,290
from of the evaluation functions of the

197
00:10:49,800 --> 00:10:56,520
<font color="#E5E5E5">service from a squad to s to the players</font>

198
00:10:52,290 --> 00:10:59,430
<font color="#E5E5E5">well what s is the is the</font><font color="#CCCCCC"> number of</font>

199
00:10:56,520 --> 00:11:03,540
<font color="#E5E5E5">multiplication multiplications in the in</font>

200
00:10:59,430 --> 00:11:07,939
the program<font color="#CCCCCC"> F we want to compute so how</font>

201
00:11:03,540 --> 00:11:14,250
how does<font color="#E5E5E5"> the the digital</font><font color="#CCCCCC"> portable</font><font color="#E5E5E5"> a</font>

202
00:11:07,940 --> 00:11:16,950
<font color="#CCCCCC">implies H SS so basically h SS forever</font>

203
00:11:14,250 --> 00:11:21,930
multiplication h SS<font color="#E5E5E5"> needs to solve added</font>

204
00:11:16,950 --> 00:11:24,600
some<font color="#CCCCCC"> DD log problem</font><font color="#E5E5E5"> so if we look on all</font>

205
00:11:21,930 --> 00:11:29,160
the little<font color="#CCCCCC"> problems needed to be served</font>

206
00:11:24,600 --> 00:11:32,580
in<font color="#CCCCCC"> a single in a single in a single</font>

207
00:11:29,160 --> 00:11:34,829
program and use our<font color="#CCCCCC"> little o protocol</font>

208
00:11:32,580 --> 00:11:37,040
<font color="#E5E5E5">the total probability of the of the</font>

209
00:11:34,830 --> 00:11:43,320
<font color="#CCCCCC">riddle of</font><font color="#E5E5E5"> algorithms is s over T</font><font color="#CCCCCC"> squared</font>

210
00:11:37,040 --> 00:11:45,839
<font color="#E5E5E5">by taking the by taking the running</font>

211
00:11:43,320 --> 00:11:48,630
times of the<font color="#CCCCCC"> Dillo protocol to</font><font color="#E5E5E5"> be square</font>

212
00:11:45,840 --> 00:11:51,780
root<font color="#E5E5E5"> of s the overall probability we get</font>

213
00:11:48,630 --> 00:11:56,450
is a constant probability<font color="#E5E5E5"> this means</font>

214
00:11:51,780 --> 00:11:59,250
that we all the the<font color="#CCCCCC"> old</font><font color="#E5E5E5"> evaluation of</font>

215
00:11:56,450 --> 00:12:02,220
the the time<font color="#E5E5E5"> for the OL evaluation of</font>

216
00:11:59,250 --> 00:12:04,890
the of the service is s times<font color="#E5E5E5"> T which is</font>

217
00:12:02,220 --> 00:12:09,810
<font color="#E5E5E5">s to the CF</font><font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> how improve the</font>

218
00:12:04,890 --> 00:12:13,110
HSS protocol and<font color="#E5E5E5"> now let us see how the</font>

219
00:12:09,810 --> 00:12:14,849
<font color="#E5E5E5">the problem a solution for the specific</font>

220
00:12:13,110 --> 00:12:20,310
problem implies<font color="#E5E5E5"> the solution for the</font>

221
00:12:14,850 --> 00:12:23,610
develop problem so basically to solve

222
00:12:20,310 --> 00:12:27,630
this little problem<font color="#CCCCCC"> you just let you</font>

223
00:12:23,610 --> 00:12:31,860
just make a and<font color="#E5E5E5"> B arrive on the</font>

224
00:12:27,630 --> 00:12:35,820
the on the<font color="#CCCCCC"> array full of</font><font color="#E5E5E5"> power love</font>

225
00:12:31,860 --> 00:12:39,360
powers of G<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> stardom</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> a jason</font>

226
00:12:35,820 --> 00:12:40,980
<font color="#E5E5E5">says and then we solve the spaceship</font>

227
00:12:39,360 --> 00:12:44,820
problem with our<font color="#E5E5E5"> black box</font><font color="#CCCCCC"> that solve</font>

228
00:12:40,980 --> 00:12:48,240
<font color="#E5E5E5">the solve spaceship solemn and and after</font>

229
00:12:44,820 --> 00:12:51,570
a<font color="#CCCCCC"> recent bob synchronized</font><font color="#E5E5E5"> on some on</font>

230
00:12:48,240 --> 00:12:55,500
<font color="#E5E5E5">some on some position then each one of</font>

231
00:12:51,570 --> 00:12:57,060
them can can output<font color="#CCCCCC"> the distance between</font>

232
00:12:55,500 --> 00:13:00,960
its starting<font color="#E5E5E5"> point and its stopping</font>

233
00:12:57,060 --> 00:13:03,989
point and because<font color="#CCCCCC"> Edison Bob</font><font color="#E5E5E5"> started on</font>

234
00:13:00,960 --> 00:13:08,100
<font color="#CCCCCC">adjacent cells the the difference</font>

235
00:13:03,990 --> 00:13:10,050
<font color="#CCCCCC">between the output is</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> one as</font>

236
00:13:08,100 --> 00:13:11,730
needed<font color="#E5E5E5"> except for of course the</font>

237
00:13:10,050 --> 00:13:17,280
<font color="#CCCCCC">probability the spaceships problem was</font>

238
00:13:11,730 --> 00:13:19,470
not so and we also need to<font color="#E5E5E5"> perform a</font>

239
00:13:17,280 --> 00:13:23,040
pseudo-random function over the of<font color="#CCCCCC"> nyssa</font>

240
00:13:19,470 --> 00:13:26,910
over this array so<font color="#E5E5E5"> that because group</font>

241
00:13:23,040 --> 00:13:30,449
elements are not really random<font color="#CCCCCC"> okay so</font>

242
00:13:26,910 --> 00:13:33,510
and this<font color="#E5E5E5"> and this is why okay now we got</font>

243
00:13:30,450 --> 00:13:37,350
<font color="#E5E5E5">we get to the spaceships problem again</font>

244
00:13:33,510 --> 00:13:39,810
and<font color="#CCCCCC"> we we want to</font><font color="#E5E5E5"> improve the basic</font>

245
00:13:37,350 --> 00:13:44,130
<font color="#CCCCCC">algorithm</font><font color="#E5E5E5"> so let us visit the basic</font>

246
00:13:39,810 --> 00:13:45,599
<font color="#E5E5E5">algorithm so suppose we as a game of</font>

247
00:13:44,130 --> 00:13:47,610
thought suppose we let the basic

248
00:13:45,600 --> 00:13:51,360
algorithm<font color="#E5E5E5"> use only</font><font color="#CCCCCC"> F the number of steps</font>

249
00:13:47,610 --> 00:13:54,390
we<font color="#CCCCCC"> had before so how does this is going</font>

250
00:13:51,360 --> 00:13:57,180
to affect to the<font color="#E5E5E5"> the all probability of</font>

251
00:13:54,390 --> 00:13:58,770
the algorithm<font color="#E5E5E5"> and so basically because</font>

252
00:13:57,180 --> 00:14:06,569
the probability of the basic algorithm

253
00:13:58,770 --> 00:14:09,090
<font color="#CCCCCC">is of the order of</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> T using only F</font>

254
00:14:06,570 --> 00:14:11,790
done off of steps<font color="#E5E5E5"> increases the</font>

255
00:14:09,090 --> 00:14:15,150
<font color="#E5E5E5">probability</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> a constant but now we</font>

256
00:14:11,790 --> 00:14:17,490
have many steps left<font color="#E5E5E5"> so the main</font>

257
00:14:15,150 --> 00:14:19,829
<font color="#E5E5E5">question</font><font color="#CCCCCC"> is how should we invest these</font>

258
00:14:17,490 --> 00:14:22,680
<font color="#E5E5E5">remaining steps in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to reduce the</font>

259
00:14:19,830 --> 00:14:23,160
all probability the answer for this

260
00:14:22,680 --> 00:14:25,800
question

261
00:14:23,160 --> 00:14:28,740
is a<font color="#CCCCCC"> two-stage state algorithm and the</font>

262
00:14:25,800 --> 00:14:30,990
first stage in this in this<font color="#CCCCCC"> algorithm is</font>

263
00:14:28,740 --> 00:14:34,640
<font color="#CCCCCC">just using</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> basic algorithm</font><font color="#E5E5E5"> with a</font>

264
00:14:30,990 --> 00:14:37,410
<font color="#E5E5E5">phenomena of steps as as we just saw and</font>

265
00:14:34,640 --> 00:14:40,680
the the second<font color="#E5E5E5"> stage</font>

266
00:14:37,410 --> 00:14:45,269
<font color="#E5E5E5">is to is basically the same you just</font>

267
00:14:40,680 --> 00:14:47,819
each spaceship just read some values

268
00:14:45,269 --> 00:14:50,480
from the array and then goes back<font color="#E5E5E5"> and</font>

269
00:14:47,819 --> 00:14:54,089
<font color="#CCCCCC">stop on the minimal value it encounter</font>

270
00:14:50,480 --> 00:14:59,550
so in distance this<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> however</font>

271
00:14:54,089 --> 00:15:02,790
this time<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> values we</font><font color="#CCCCCC"> koala form</font>

272
00:14:59,550 --> 00:15:06,000
the LA I want<font color="#E5E5E5"> some random walk this</font>

273
00:15:02,790 --> 00:15:07,969
random walk<font color="#E5E5E5"> starts from the the the</font>

274
00:15:06,000 --> 00:15:13,860
stopping point of the of the former

275
00:15:07,970 --> 00:15:17,670
stage and then the the steps of of each

276
00:15:13,860 --> 00:15:20,160
of the steps of each spaceship<font color="#E5E5E5"> only</font>

277
00:15:17,670 --> 00:15:25,800
depends on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> on the most recent value</font>

278
00:15:20,160 --> 00:15:33,449
<font color="#E5E5E5">he read from the from the</font><font color="#CCCCCC"> LA so this is</font>

279
00:15:25,800 --> 00:15:36,709
how the two-stage algorithm goes and let

280
00:15:33,449 --> 00:15:40,889
us quickly analyze this this algorithm

281
00:15:36,709 --> 00:15:44,880
<font color="#CCCCCC">the despotic all and so the main point</font>

282
00:15:40,889 --> 00:15:50,670
in this in<font color="#E5E5E5"> this touch two-stage</font>

283
00:15:44,880 --> 00:15:52,949
algorithm is that<font color="#E5E5E5"> if the</font><font color="#CCCCCC"> part is managed</font>

284
00:15:50,670 --> 00:15:56,009
to synchronize in the first date they

285
00:15:52,949 --> 00:15:58,258
<font color="#CCCCCC">will</font><font color="#E5E5E5"> remain they will remain</font>

286
00:15:56,009 --> 00:16:02,490
synchronized in the in the second stage

287
00:15:58,259 --> 00:16:05,790
<font color="#E5E5E5">because the the the</font><font color="#CCCCCC"> size of the</font><font color="#E5E5E5"> jump</font>

288
00:16:02,490 --> 00:16:11,060
<font color="#E5E5E5">only depends on the current value they</font>

289
00:16:05,790 --> 00:16:12,899
read and<font color="#E5E5E5"> do not forget</font><font color="#CCCCCC"> that the</font>

290
00:16:11,060 --> 00:16:16,459
probability of the<font color="#E5E5E5"> first stage is</font>

291
00:16:12,899 --> 00:16:21,029
<font color="#E5E5E5">already small</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is already</font><font color="#CCCCCC"> 1 over T and</font>

292
00:16:16,459 --> 00:16:23,399
so now we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> understand what is the</font>

293
00:16:21,029 --> 00:16:27,449
<font color="#E5E5E5">operator of the second stage given that</font>

294
00:16:23,399 --> 00:16:29,939
the first stage failed so<font color="#E5E5E5"> the part is so</font>

295
00:16:27,449 --> 00:16:34,740
the spaceships begin with the distance

296
00:16:29,939 --> 00:16:37,719
of of T and they make T over<font color="#E5E5E5"> two steps</font>

297
00:16:34,740 --> 00:16:39,970
of size square root of<font color="#CCCCCC"> thing</font>

298
00:16:37,720 --> 00:16:46,930
[Music]

299
00:16:39,970 --> 00:16:50,350
the idea is that<font color="#E5E5E5"> the the spaceships are</font>

300
00:16:46,930 --> 00:16:52,569
going to the<font color="#E5E5E5"> random walks of</font><font color="#CCCCCC"> the of the</font>

301
00:16:50,350 --> 00:16:56,200
<font color="#CCCCCC">second-stage are going to meet in about</font>

302
00:16:52,570 --> 00:17:00,040
<font color="#CCCCCC">scout of the steps and why is that</font>

303
00:16:56,200 --> 00:17:01,270
<font color="#E5E5E5">because in order for</font><font color="#CCCCCC"> a to pass the</font>

304
00:17:00,040 --> 00:17:04,149
location of me

305
00:17:01,270 --> 00:17:07,540
<font color="#CCCCCC">it needs scrote of these steps</font><font color="#E5E5E5"> because</font>

306
00:17:04,150 --> 00:17:09,820
<font color="#CCCCCC">each step size</font><font color="#E5E5E5"> of a is about square root</font>

307
00:17:07,540 --> 00:17:15,099
of T and the initial distance<font color="#E5E5E5"> between a</font>

308
00:17:09,819 --> 00:17:19,329
is envy and esteem after reaching the

309
00:17:15,099 --> 00:17:22,480
region of<font color="#CCCCCC"> beat then its standard</font>

310
00:17:19,329 --> 00:17:25,149
birthday paradox<font color="#E5E5E5"> argument that says that</font>

311
00:17:22,480 --> 00:17:26,710
the<font color="#E5E5E5"> the random walks of the parties are</font>

312
00:17:25,150 --> 00:17:31,780
going<font color="#CCCCCC"> to collide in about Scout of these</font>

313
00:17:26,710 --> 00:17:35,230
steps so<font color="#CCCCCC"> over all the</font><font color="#E5E5E5"> parties</font><font color="#CCCCCC"> shell</font>

314
00:17:31,780 --> 00:17:37,470
about<font color="#E5E5E5"> shell all the steps except for</font>

315
00:17:35,230 --> 00:17:41,700
square root of<font color="#E5E5E5"> T steps</font>

316
00:17:37,470 --> 00:17:45,460
this means<font color="#CCCCCC"> that because they show almost</font>

317
00:17:41,700 --> 00:17:47,350
all the all these<font color="#E5E5E5"> steps they have and</font>

318
00:17:45,460 --> 00:17:49,570
then with very<font color="#CCCCCC"> high probability they are</font>

319
00:17:47,350 --> 00:17:51,429
going<font color="#E5E5E5"> to have the same</font><font color="#CCCCCC"> anymore and so</font>

320
00:17:49,570 --> 00:17:53,770
they are going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> stop on the same</font>

321
00:17:51,430 --> 00:17:55,300
location<font color="#E5E5E5"> overall the total fail</font>

322
00:17:53,770 --> 00:17:58,540
probability of the two-stage algorithm

323
00:17:55,300 --> 00:18:01,530
is<font color="#CCCCCC"> 2 to the</font><font color="#E5E5E5"> ministry</font><font color="#CCCCCC"> s which is better</font>

324
00:17:58,540 --> 00:18:05,040
than<font color="#CCCCCC"> the</font><font color="#E5E5E5"> basic algorithm of course and</font>

325
00:18:01,530 --> 00:18:10,060
<font color="#CCCCCC">ok so we</font><font color="#E5E5E5"> can ask this question again</font>

326
00:18:05,040 --> 00:18:12,790
<font color="#E5E5E5">suppose we have some black box that that</font>

327
00:18:10,060 --> 00:18:15,310
implements the two-stage algorithm now

328
00:18:12,790 --> 00:18:20,680
let's give it<font color="#CCCCCC"> only</font><font color="#E5E5E5"> F the number of steps</font>

329
00:18:15,310 --> 00:18:22,330
we have so again this is only going to

330
00:18:20,680 --> 00:18:29,200
<font color="#CCCCCC">increase our all probability by a</font>

331
00:18:22,330 --> 00:18:32,889
constant and<font color="#E5E5E5"> and but now again we have</font>

332
00:18:29,200 --> 00:18:35,140
many steps left<font color="#E5E5E5"> so we can ask what what</font>

333
00:18:32,890 --> 00:18:38,740
can we do is the with the<font color="#E5E5E5"> remaining</font>

334
00:18:35,140 --> 00:18:44,620
steps where and so<font color="#CCCCCC"> the answer is we</font>

335
00:18:38,740 --> 00:18:49,400
<font color="#E5E5E5">perform a third stage we perform a third</font>

336
00:18:44,620 --> 00:18:51,100
stage which have a larger step<font color="#E5E5E5"> size</font>

337
00:18:49,400 --> 00:18:54,820
[Music]

338
00:18:51,100 --> 00:19:00,730
okay so<font color="#E5E5E5"> continuing this line of thought</font>

339
00:18:54,820 --> 00:19:06,980
and we use many steps with including

340
00:19:00,730 --> 00:19:08,360
step sizes and and we're taking<font color="#E5E5E5"> the many</font>

341
00:19:06,980 --> 00:19:11,509
parameters in which<font color="#E5E5E5"> the algorithm</font>

342
00:19:08,360 --> 00:19:14,029
depends<font color="#E5E5E5"> on for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> the dynamic the</font>

343
00:19:11,509 --> 00:19:18,019
distribution<font color="#E5E5E5"> of steps in each stage and</font>

344
00:19:14,029 --> 00:19:21,350
the<font color="#CCCCCC"> sizes of steps in</font><font color="#E5E5E5"> in each of these</font>

345
00:19:18,019 --> 00:19:26,419
stages<font color="#E5E5E5"> so if we carefully choose</font>

346
00:19:21,350 --> 00:19:28,699
<font color="#CCCCCC">parameters</font><font color="#E5E5E5"> then induce many stages</font>

347
00:19:26,419 --> 00:19:32,529
instead<font color="#CCCCCC"> of two or three</font><font color="#E5E5E5"> we can get</font>

348
00:19:28,700 --> 00:19:36,620
<font color="#E5E5E5">another probability of 1 over T</font><font color="#CCCCCC"> squared</font>

349
00:19:32,529 --> 00:19:40,519
the analysis is<font color="#E5E5E5"> quite is quite complex</font>

350
00:19:36,620 --> 00:19:44,539
so we also we prove this formally<font color="#E5E5E5"> and</font>

351
00:19:40,519 --> 00:19:46,940
also we without<font color="#E5E5E5"> the validator be the</font>

352
00:19:44,539 --> 00:19:51,549
this result<font color="#E5E5E5"> with</font><font color="#CCCCCC"> extensive simulations</font>

353
00:19:46,940 --> 00:19:51,549
<font color="#E5E5E5">we proved it what we also validated it</font>

354
00:19:51,820 --> 00:19:59,330
yeah<font color="#E5E5E5"> and</font><font color="#CCCCCC"> okay</font>

355
00:19:56,299 --> 00:20:01,908
let<font color="#E5E5E5"> us now summarize everything where we</font>

356
00:19:59,330 --> 00:20:04,009
have some algorithm that enables<font color="#CCCCCC"> n be to</font>

357
00:20:01,909 --> 00:20:10,129
synchronize except for for<font color="#E5E5E5"> Bill T 1 over</font>

358
00:20:04,009 --> 00:20:12,080
T Square<font color="#CCCCCC"> and but this used that the we</font>

359
00:20:10,129 --> 00:20:18,678
we use that the distance between Alice

360
00:20:12,080 --> 00:20:20,689
and Bob is<font color="#CCCCCC"> 1 start</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> 1 so so</font><font color="#E5E5E5"> an</font>

361
00:20:18,679 --> 00:20:24,679
<font color="#CCCCCC">actual question question is what happens</font>

362
00:20:20,690 --> 00:20:29,090
if<font color="#E5E5E5"> the spaceships start with some</font>

363
00:20:24,679 --> 00:20:31,190
unknown distance<font color="#CCCCCC"> M</font><font color="#E5E5E5"> and what what now so</font>

364
00:20:29,090 --> 00:20:35,299
it turns out<font color="#CCCCCC"> that if they use exactly</font>

365
00:20:31,190 --> 00:20:40,669
<font color="#E5E5E5">the same algorithm they can still meet</font>

366
00:20:35,299 --> 00:20:42,740
except for for for small probability the

367
00:20:40,669 --> 00:20:47,799
optimal probability which is<font color="#CCCCCC"> M over</font><font color="#E5E5E5"> T</font>

368
00:20:42,740 --> 00:20:51,360
<font color="#E5E5E5">squared</font><font color="#CCCCCC"> and so why that and to see this</font>

369
00:20:47,799 --> 00:20:53,340
<font color="#E5E5E5">introduce some</font><font color="#CCCCCC"> pictures parties and</font>

370
00:20:51,360 --> 00:20:59,280
that follow exactly the same<font color="#CCCCCC"> I with them</font>

371
00:20:53,340 --> 00:21:01,020
<font color="#CCCCCC">anything Bob follow</font><font color="#E5E5E5"> now to analyze the</font>

372
00:20:59,280 --> 00:21:03,750
probability that Alice<font color="#E5E5E5"> and Bob do not</font>

373
00:21:01,020 --> 00:21:05,820
synchronize<font color="#E5E5E5"> notice that in order for</font><font color="#CCCCCC"> s</font>

374
00:21:03,750 --> 00:21:10,260
and<font color="#CCCCCC"> Bob</font><font color="#E5E5E5"> do not synchronized we must have</font>

375
00:21:05,820 --> 00:21:11,820
two consecutive people that did not

376
00:21:10,260 --> 00:21:14,030
manage to synchronize because if

377
00:21:11,820 --> 00:21:17,730
everyone<font color="#E5E5E5"> managed to synchronize with</font>

378
00:21:14,030 --> 00:21:21,450
successive and<font color="#E5E5E5"> so Alice and Bob will</font>

379
00:21:17,730 --> 00:21:23,160
synchronize and so the<font color="#E5E5E5"> probability of s</font>

380
00:21:21,450 --> 00:21:25,679
<font color="#E5E5E5">and Bob</font><font color="#CCCCCC"> to not synchronize is Union</font>

381
00:21:23,160 --> 00:21:27,570
bound in<font color="#E5E5E5"> Union bounded by the</font>

382
00:21:25,679 --> 00:21:29,400
probability of<font color="#CCCCCC"> NC - not synchronized</font>

383
00:21:27,570 --> 00:21:30,510
<font color="#E5E5E5">plus the probability of CND - not</font>

384
00:21:29,400 --> 00:21:33,450
synchronized with the<font color="#E5E5E5"> probability</font><font color="#CCCCCC"> of</font>

385
00:21:30,510 --> 00:21:36,240
being eternal<font color="#CCCCCC"> simple and so on and this</font>

386
00:21:33,450 --> 00:21:41,540
gives<font color="#CCCCCC"> that the party synchronized occurs</font>

387
00:21:36,240 --> 00:21:41,540
except for this small probability<font color="#E5E5E5"> and</font>

388
00:21:41,960 --> 00:21:53,050
another interesting<font color="#CCCCCC"> thing is that our</font>

389
00:21:44,370 --> 00:21:54,799
algorithm<font color="#E5E5E5"> is optimal and basically the</font>

390
00:21:53,050 --> 00:21:57,720
[Music]

391
00:21:54,799 --> 00:22:00,000
<font color="#CCCCCC">discrete log in</font><font color="#E5E5E5"> a short interval problem</font>

392
00:21:57,720 --> 00:22:03,950
is<font color="#E5E5E5"> suppose</font><font color="#CCCCCC"> we have some cryptographic</font>

393
00:22:00,000 --> 00:22:08,160
<font color="#CCCCCC">orgy generated by</font><font color="#E5E5E5"> a generator and slowly</font>

394
00:22:03,950 --> 00:22:12,690
and let<font color="#CCCCCC"> R be</font><font color="#E5E5E5"> some small small a small</font>

395
00:22:08,160 --> 00:22:14,730
<font color="#E5E5E5">interval so given some input G to the X</font>

396
00:22:12,690 --> 00:22:17,130
well X is small<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to find it this</font>

397
00:22:14,730 --> 00:22:19,950
<font color="#E5E5E5">is the discrete log</font><font color="#CCCCCC"> near ensure a short</font>

398
00:22:17,130 --> 00:22:22,309
interval problem and the discrete log in

399
00:22:19,950 --> 00:22:25,320
short interval on this assumption<font color="#E5E5E5"> is</font>

400
00:22:22,309 --> 00:22:31,139
solve the discrete log problem<font color="#E5E5E5"> in a</font>

401
00:22:25,320 --> 00:22:32,730
short interval so you can if you think

402
00:22:31,140 --> 00:22:38,450
about<font color="#E5E5E5"> it a little you</font><font color="#CCCCCC"> can say that the</font>

403
00:22:32,730 --> 00:22:40,280
digital portable<font color="#E5E5E5"> a solve the solve the</font>

404
00:22:38,450 --> 00:22:46,720
there is discrete<font color="#CCCCCC"> Oh being shot in</font><font color="#E5E5E5"> the</font>

405
00:22:40,280 --> 00:22:50,000
<font color="#E5E5E5">world in in the optimal time and so the</font>

406
00:22:46,720 --> 00:22:53,290
the the<font color="#CCCCCC"> Li oddness</font><font color="#E5E5E5"> assumption is assumed</font>

407
00:22:50,000 --> 00:22:58,370
as far as we know on all standard

408
00:22:53,290 --> 00:23:02,960
families of cryptographic<font color="#E5E5E5"> groups and so</font>

409
00:22:58,370 --> 00:23:05,570
ends the<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> our the</font><font color="#E5E5E5"> de la</font><font color="#CCCCCC"> Protocol</font>

410
00:23:02,960 --> 00:23:08,380
is optimal<font color="#CCCCCC"> and let us summarize</font>

411
00:23:05,570 --> 00:23:11,810
everything wet<font color="#E5E5E5"> and we presented</font><font color="#CCCCCC"> the</font>

412
00:23:08,380 --> 00:23:13,730
<font color="#E5E5E5">distributed</font><font color="#CCCCCC"> skeet log</font><font color="#E5E5E5"> problem then we</font>

413
00:23:11,810 --> 00:23:17,360
presented an optimal algorithm<font color="#E5E5E5"> solving</font>

414
00:23:13,730 --> 00:23:19,340
the DD<font color="#E5E5E5"> log problem and we improved</font><font color="#CCCCCC"> the</font>

415
00:23:17,360 --> 00:23:22,159
all probability of the<font color="#CCCCCC"> video log</font>

416
00:23:19,340 --> 00:23:24,679
algorithm from<font color="#CCCCCC"> all probability</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> one</font>

417
00:23:22,160 --> 00:23:27,080
over<font color="#CCCCCC"> T</font><font color="#E5E5E5"> to a no probability of one over T</font>

418
00:23:24,680 --> 00:23:31,220
squared which<font color="#E5E5E5"> is quadratic improvement</font>

419
00:23:27,080 --> 00:23:35,179
<font color="#E5E5E5">and then we</font><font color="#CCCCCC"> had some application to</font><font color="#E5E5E5"> to</font>

420
00:23:31,220 --> 00:23:37,010
move<font color="#E5E5E5"> my second challenge and optimizing</font>

421
00:23:35,180 --> 00:23:41,950
the<font color="#E5E5E5"> the running time of the evaluation</font>

422
00:23:37,010 --> 00:23:45,379
from<font color="#CCCCCC"> SQL to s 2 to the 8th to the</font><font color="#E5E5E5"> CF</font>

423
00:23:41,950 --> 00:23:51,420
well s is the size of<font color="#E5E5E5"> the of the program</font>

424
00:23:45,380 --> 00:23:52,840
we want to do a morphic<font color="#E5E5E5"> recompute and so</font>

425
00:23:51,420 --> 00:23:56,450
[Music]

426
00:23:52,840 --> 00:23:59,030
in the paper<font color="#E5E5E5"> we have the</font><font color="#CCCCCC"> stamp</font><font color="#E5E5E5"> some</font>

427
00:23:56,450 --> 00:24:01,670
other<font color="#E5E5E5"> interesting stuff among them we</font>

428
00:23:59,030 --> 00:24:03,860
have form analysis of the<font color="#E5E5E5"> protocol and</font>

429
00:24:01,670 --> 00:24:06,040
we use<font color="#E5E5E5"> many kinds of not in religion</font>

430
00:24:03,860 --> 00:24:10,639
martingales in order to<font color="#E5E5E5"> prove this we</font>

431
00:24:06,040 --> 00:24:13,610
<font color="#CCCCCC">also have</font><font color="#E5E5E5"> a matching global assuming the</font>

432
00:24:10,640 --> 00:24:17,630
rely<font color="#CCCCCC"> on assumptions and we also have a</font>

433
00:24:13,610 --> 00:24:20,300
lower bound<font color="#CCCCCC"> assuming the the</font><font color="#E5E5E5"> generic</font>

434
00:24:17,630 --> 00:24:24,530
couponer<font color="#E5E5E5"> and interestingly we also</font>

435
00:24:20,300 --> 00:24:27,260
<font color="#CCCCCC">proved</font><font color="#E5E5E5"> that the basic</font><font color="#CCCCCC"> algorithm is in</font>

436
00:24:24,530 --> 00:24:28,940
some sense<font color="#E5E5E5"> some sense optimal it is an</font>

437
00:24:27,260 --> 00:24:31,580
optimal non adaptive protocol in genetic

438
00:24:28,940 --> 00:24:34,430
component this basically mean if that if

439
00:24:31,580 --> 00:24:36,590
you make some small<font color="#CCCCCC"> variations to</font><font color="#E5E5E5"> the to</font>

440
00:24:34,430 --> 00:24:39,260
the basic<font color="#CCCCCC"> algorithm you cannot go better</font>

441
00:24:36,590 --> 00:24:41,600
than and the basic<font color="#CCCCCC"> algorithm and</font>

442
00:24:39,260 --> 00:24:51,080
interestingly they poof uses for

443
00:24:41,600 --> 00:24:54,949
analysis thank you all right<font color="#CCCCCC"> you think</font>

444
00:24:51,080 --> 00:24:58,340
we have time for maybe one<font color="#E5E5E5"> question so</font>

445
00:24:54,950 --> 00:24:59,780
we're running close so<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right let's</font>

446
00:24:58,340 --> 00:25:04,619
<font color="#E5E5E5">second speaker again</font>

447
00:24:59,780 --> 00:25:04,619
[Applause]

