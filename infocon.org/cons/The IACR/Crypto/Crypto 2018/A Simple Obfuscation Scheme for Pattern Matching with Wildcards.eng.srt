1
00:00:04,980 --> 00:00:09,370
<font color="#E5E5E5">all right thank you</font><font color="#CCCCCC"> for the introduction</font>

2
00:00:06,910 --> 00:00:12,280
<font color="#CCCCCC">this is work and everyone</font><font color="#E5E5E5"> hear me cool</font>

3
00:00:09,370 --> 00:00:13,780
so the purpose of<font color="#E5E5E5"> this work is we want</font>

4
00:00:12,280 --> 00:00:15,610
<font color="#E5E5E5">to try</font><font color="#CCCCCC"> and construct</font><font color="#E5E5E5"> an obfuscation</font>

5
00:00:13,780 --> 00:00:17,230
scheme that we can prove from<font color="#CCCCCC"> the</font>

6
00:00:15,610 --> 00:00:19,240
standard assumptions without<font color="#E5E5E5"> coming up</font>

7
00:00:17,230 --> 00:00:20,890
with something<font color="#CCCCCC"> new</font><font color="#E5E5E5"> and we'll try and do</font>

8
00:00:19,240 --> 00:00:22,570
this for<font color="#CCCCCC"> a more limited function class</font>

9
00:00:20,890 --> 00:00:23,649
that will still be non-trivial to

10
00:00:22,570 --> 00:00:27,489
obfuscate

11
00:00:23,649 --> 00:00:28,899
<font color="#E5E5E5">so why do you why do we</font><font color="#CCCCCC"> purify office</font>

12
00:00:27,489 --> 00:00:30,340
<font color="#CCCCCC">Gatien I suppose you've written some</font>

13
00:00:28,899 --> 00:00:32,439
amazing piece<font color="#CCCCCC"> of code and you want</font>

14
00:00:30,340 --> 00:00:34,120
everyone<font color="#CCCCCC"> to run it</font><font color="#E5E5E5"> and you know maybe</font>

15
00:00:32,439 --> 00:00:35,710
<font color="#CCCCCC">it'll reduce</font><font color="#E5E5E5"> carbon</font><font color="#CCCCCC"> emissions and help</font>

16
00:00:34,120 --> 00:00:37,059
<font color="#E5E5E5">save the environment</font><font color="#CCCCCC"> the problem is</font>

17
00:00:35,710 --> 00:00:39,190
within your code<font color="#E5E5E5"> maybe you have like</font><font color="#CCCCCC"> a</font>

18
00:00:37,059 --> 00:00:41,649
cryptographic secret key and you don't

19
00:00:39,190 --> 00:00:44,230
want<font color="#CCCCCC"> people</font><font color="#E5E5E5"> to read a part of your code</font>

20
00:00:41,649 --> 00:00:46,210
and learn<font color="#E5E5E5"> something from</font><font color="#CCCCCC"> that so an</font>

21
00:00:44,230 --> 00:00:47,709
office<font color="#CCCCCC"> keishon scheme will do</font><font color="#E5E5E5"> something</font>

22
00:00:46,210 --> 00:00:51,579
<font color="#CCCCCC">like the following we'll take this and</font>

23
00:00:47,710 --> 00:00:53,379
<font color="#E5E5E5">then return code that is guaranteed</font><font color="#CCCCCC"> so</font>

24
00:00:51,579 --> 00:00:55,659
that you can only treat it as a black

25
00:00:53,379 --> 00:00:57,909
<font color="#E5E5E5">box right we want the user</font><font color="#CCCCCC"> to only get</font>

26
00:00:55,659 --> 00:01:00,010
<font color="#E5E5E5">input-output query access</font><font color="#CCCCCC"> to code and if</font>

27
00:00:57,909 --> 00:01:02,890
I run any algorithm<font color="#CCCCCC"> that does a partial</font>

28
00:01:00,010 --> 00:01:04,449
evaluation<font color="#E5E5E5"> or tries to read some bits of</font>

29
00:01:02,890 --> 00:01:05,650
memory<font color="#E5E5E5"> this should</font><font color="#CCCCCC"> just give you a</font>

30
00:01:04,449 --> 00:01:07,690
randomness that<font color="#CCCCCC"> you could</font><font color="#E5E5E5"> otherwise</font>

31
00:01:05,650 --> 00:01:09,700
simulate without seeing the code itself

32
00:01:07,690 --> 00:01:12,880
<font color="#E5E5E5">so if you could do this</font><font color="#CCCCCC"> for any</font>

33
00:01:09,700 --> 00:01:14,530
arbitrary<font color="#E5E5E5"> fixed function this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

34
00:01:12,880 --> 00:01:17,350
standard notion of virtual black box

35
00:01:14,530 --> 00:01:18,550
<font color="#CCCCCC">tapas keishon now</font><font color="#E5E5E5"> unfortunately or</font>

36
00:01:17,350 --> 00:01:20,470
fortunately<font color="#E5E5E5"> depending on your</font>

37
00:01:18,550 --> 00:01:22,360
perspective<font color="#CCCCCC"> this is not possible in</font>

38
00:01:20,470 --> 00:01:24,550
<font color="#E5E5E5">general for all circuits but it is still</font>

39
00:01:22,360 --> 00:01:27,220
<font color="#CCCCCC">possible for</font><font color="#E5E5E5"> maybe some limited function</font>

40
00:01:24,550 --> 00:01:29,950
classes such<font color="#CCCCCC"> as point functions so as</font>

41
00:01:27,220 --> 00:01:31,510
the previous work<font color="#E5E5E5"> toggle is mentioned</font>

42
00:01:29,950 --> 00:01:33,760
like most of the<font color="#CCCCCC"> follow-up work on</font>

43
00:01:31,510 --> 00:01:35,170
obfuscation has been on<font color="#E5E5E5"> trying to come</font>

44
00:01:33,760 --> 00:01:37,930
up<font color="#E5E5E5"> with a weaker notion of obfuscation</font>

45
00:01:35,170 --> 00:01:40,810
<font color="#CCCCCC">IO</font><font color="#E5E5E5"> and trying to do this for general</font>

46
00:01:37,930 --> 00:01:42,490
circuits so we're gonna sort<font color="#E5E5E5"> of take the</font>

47
00:01:40,810 --> 00:01:43,780
opposite direction<font color="#E5E5E5"> in this work and</font>

48
00:01:42,490 --> 00:01:46,030
we're<font color="#E5E5E5"> gonna ask the question</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know</font>

49
00:01:43,780 --> 00:01:49,090
let's say we start from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> v4 point</font>

50
00:01:46,030 --> 00:01:50,560
functions what's the most complex

51
00:01:49,090 --> 00:01:52,540
function class that we can still

52
00:01:50,560 --> 00:01:54,870
obfuscate from something like<font color="#CCCCCC"> BBB</font>

53
00:01:52,540 --> 00:01:57,910
without coming with the new assumption

54
00:01:54,870 --> 00:01:59,800
so<font color="#E5E5E5"> specifically we're going to use the</font>

55
00:01:57,910 --> 00:02:01,570
notion<font color="#CCCCCC"> of distributional</font><font color="#E5E5E5"> dvb and we're</font>

56
00:01:59,800 --> 00:02:03,070
going to<font color="#E5E5E5"> look at the following function</font>

57
00:02:01,570 --> 00:02:05,440
class which we call pattern<font color="#E5E5E5"> matching</font>

58
00:02:03,070 --> 00:02:07,479
with<font color="#CCCCCC"> wildcards</font><font color="#E5E5E5"> so here's how the</font>

59
00:02:05,440 --> 00:02:09,250
function class<font color="#CCCCCC"> for so it's you have</font>

60
00:02:07,480 --> 00:02:11,980
<font color="#E5E5E5">let's say you're trying to evaluate your</font>

61
00:02:09,250 --> 00:02:14,409
input on an in dimensional boolean

62
00:02:11,980 --> 00:02:17,349
vector<font color="#E5E5E5"> so a pattern is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be an</font>

63
00:02:14,409 --> 00:02:17,910
<font color="#CCCCCC">n-dimensional length</font><font color="#E5E5E5"> and string where</font>

64
00:02:17,349 --> 00:02:20,549
the

65
00:02:17,910 --> 00:02:22,410
<font color="#CCCCCC">said is 0-1 or</font><font color="#E5E5E5"> star so if we didn't</font><font color="#CCCCCC"> have</font>

66
00:02:20,550 --> 00:02:24,810
the star<font color="#E5E5E5"> character this is exactly a</font>

67
00:02:22,410 --> 00:02:27,240
point function<font color="#CCCCCC"> it outputs one if it</font>

68
00:02:24,810 --> 00:02:28,890
<font color="#E5E5E5">agrees with</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> zero or one on the input</font>

69
00:02:27,240 --> 00:02:31,980
now what the star character<font color="#E5E5E5"> we</font>

70
00:02:28,890 --> 00:02:33,359
essentially<font color="#E5E5E5"> ignore the dimensions that</font>

71
00:02:31,980 --> 00:02:35,040
<font color="#CCCCCC">are stars that you can think</font><font color="#E5E5E5"> of it as</font>

72
00:02:33,360 --> 00:02:36,510
projecting out those dimensions and then

73
00:02:35,040 --> 00:02:39,060
just<font color="#E5E5E5"> doing a point function</font><font color="#CCCCCC"> of the</font>

74
00:02:36,510 --> 00:02:41,820
remaining<font color="#E5E5E5"> and importantly we want</font><font color="#CCCCCC"> W the</font>

75
00:02:39,060 --> 00:02:42,990
number of<font color="#CCCCCC"> wildcards to be large to</font><font color="#E5E5E5"> be a</font>

76
00:02:41,820 --> 00:02:45,090
constant fraction

77
00:02:42,990 --> 00:02:46,560
<font color="#CCCCCC">all right SW was smaller than</font><font color="#E5E5E5"> this would</font>

78
00:02:45,090 --> 00:02:47,640
just be a union of<font color="#E5E5E5"> like two point</font>

79
00:02:46,560 --> 00:02:50,280
functions and I wouldn't<font color="#E5E5E5"> be standing</font>

80
00:02:47,640 --> 00:02:52,140
<font color="#CCCCCC">here talking so here's an example right</font>

81
00:02:50,280 --> 00:02:54,540
<font color="#E5E5E5">let's say for a</font><font color="#CCCCCC"> length six you</font><font color="#E5E5E5"> have zero</font>

82
00:02:52,140 --> 00:02:56,880
<font color="#E5E5E5">one star star zero one is your</font><font color="#CCCCCC"> pattern</font>

83
00:02:54,540 --> 00:02:58,620
right so any input<font color="#CCCCCC"> that</font><font color="#E5E5E5"> agrees with</font><font color="#CCCCCC"> the</font>

84
00:02:56,880 --> 00:02:59,820
first two or<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last two bits is going</font>

85
00:02:58,620 --> 00:03:02,250
<font color="#E5E5E5">to be one and doesn't matter what the</font>

86
00:02:59,820 --> 00:03:05,040
middle two bits are but if you<font color="#E5E5E5"> de</font><font color="#CCCCCC"> see if</font>

87
00:03:02,250 --> 00:03:08,460
you have one in the<font color="#E5E5E5"> first bit then this</font>

88
00:03:05,040 --> 00:03:12,120
is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> help with zero so hopefully</font>

89
00:03:08,460 --> 00:03:13,830
a function class is<font color="#CCCCCC"> clear okay so to</font>

90
00:03:12,120 --> 00:03:16,710
some possible<font color="#E5E5E5"> applications of</font><font color="#CCCCCC"> Y this</font>

91
00:03:13,830 --> 00:03:17,970
<font color="#E5E5E5">function class might be useful</font><font color="#CCCCCC"> suppose</font>

92
00:03:16,710 --> 00:03:21,030
<font color="#CCCCCC">where you're suppose you're trying</font><font color="#E5E5E5"> to</font>

93
00:03:17,970 --> 00:03:22,890
check code for a security flaw and the

94
00:03:21,030 --> 00:03:26,100
non<font color="#E5E5E5"> wild card</font><font color="#CCCCCC"> slot sort of indicate</font>

95
00:03:22,890 --> 00:03:27,899
where the security flaw is so if the

96
00:03:26,100 --> 00:03:29,430
<font color="#E5E5E5">person has</font><font color="#CCCCCC"> the security</font><font color="#E5E5E5"> flaw you want</font>

97
00:03:27,900 --> 00:03:30,660
them to be able to detect<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the code</font>

98
00:03:29,430 --> 00:03:32,580
<font color="#E5E5E5">but you don't want to tell everyone</font>

99
00:03:30,660 --> 00:03:34,350
where the non wild card slots are<font color="#E5E5E5"> is</font>

100
00:03:32,580 --> 00:03:35,910
<font color="#E5E5E5">that everyone else who does not already</font>

101
00:03:34,350 --> 00:03:41,160
<font color="#E5E5E5">have this problem can then go and try</font>

102
00:03:35,910 --> 00:03:43,500
<font color="#E5E5E5">and look</font><font color="#CCCCCC"> for it so this</font><font color="#E5E5E5"> function class</font>

103
00:03:41,160 --> 00:03:46,590
was previously<font color="#E5E5E5"> studied</font><font color="#CCCCCC"> under the name of</font>

104
00:03:43,500 --> 00:03:48,780
<font color="#CCCCCC">office gating conjunctions and in the</font>

105
00:03:46,590 --> 00:03:50,400
past the schemes were constructed based

106
00:03:48,780 --> 00:03:51,870
on<font color="#CCCCCC"> multi linear</font><font color="#E5E5E5"> maps and based on</font>

107
00:03:50,400 --> 00:03:54,780
<font color="#E5E5E5">something</font><font color="#CCCCCC"> called the entropic lwe</font>

108
00:03:51,870 --> 00:03:56,160
assumption<font color="#E5E5E5"> so we want to get an</font>

109
00:03:54,780 --> 00:03:57,989
obfuscation scheme for<font color="#E5E5E5"> this same</font>

110
00:03:56,160 --> 00:04:00,150
function class but just<font color="#CCCCCC"> in the generic</font>

111
00:03:57,989 --> 00:04:01,560
group<font color="#CCCCCC"> model</font><font color="#E5E5E5"> so on one</font><font color="#CCCCCC"> hand this</font>

112
00:04:00,150 --> 00:04:02,910
<font color="#CCCCCC">assumption will be easy</font><font color="#E5E5E5"> on the</font>

113
00:04:01,560 --> 00:04:04,830
understand on the other hand the

114
00:04:02,910 --> 00:04:06,840
construction<font color="#E5E5E5"> itself will be much simpler</font>

115
00:04:04,830 --> 00:04:08,250
to<font color="#E5E5E5"> describe</font><font color="#CCCCCC"> and implement because</font><font color="#E5E5E5"> it</font>

116
00:04:06,840 --> 00:04:10,230
<font color="#CCCCCC">will essentially just be computing some</font>

117
00:04:08,250 --> 00:04:14,450
number and<font color="#E5E5E5"> exponentiate it</font><font color="#CCCCCC"> using a group</font>

118
00:04:10,230 --> 00:04:16,440
<font color="#E5E5E5">Oracle and then multiplying those so the</font>

119
00:04:14,450 --> 00:04:18,839
definition<font color="#E5E5E5"> of security that we're going</font>

120
00:04:16,440 --> 00:04:20,548
<font color="#E5E5E5">to use is distributional</font><font color="#CCCCCC"> VBB so as I</font>

121
00:04:18,839 --> 00:04:22,619
mentioned earlier<font color="#CCCCCC"> VBB was</font><font color="#E5E5E5"> for if we</font>

122
00:04:20,548 --> 00:04:24,870
<font color="#E5E5E5">could fix any function and then</font>

123
00:04:22,620 --> 00:04:26,190
obfuscate it<font color="#E5E5E5"> so here instead the</font>

124
00:04:24,870 --> 00:04:27,960
function itself we're<font color="#CCCCCC"> going to allow</font>

125
00:04:26,190 --> 00:04:29,460
<font color="#E5E5E5">that to be sampled so let me just say</font>

126
00:04:27,960 --> 00:04:30,280
specifically<font color="#CCCCCC"> what</font><font color="#E5E5E5"> this is for</font><font color="#CCCCCC"> our</font>

127
00:04:29,460 --> 00:04:32,590
function class

128
00:04:30,280 --> 00:04:34,239
we have this pattern<font color="#CCCCCC"> Sigma</font><font color="#E5E5E5"> of zero one</font>

129
00:04:32,590 --> 00:04:36,039
star so<font color="#CCCCCC"> you can imagine</font><font color="#E5E5E5"> some sampling</font>

130
00:04:34,240 --> 00:04:38,710
<font color="#E5E5E5">scheme of how I sample this length and</font>

131
00:04:36,040 --> 00:04:41,169
string<font color="#CCCCCC"> you can sample</font><font color="#E5E5E5"> each character</font>

132
00:04:38,710 --> 00:04:43,510
slot individually from the three

133
00:04:41,169 --> 00:04:45,340
<font color="#E5E5E5">possible choices independently you could</font>

134
00:04:43,510 --> 00:04:47,349
fix the number<font color="#CCCCCC"> of wild card</font><font color="#E5E5E5"> spots and</font>

135
00:04:45,340 --> 00:04:49,330
sample a subset whatever you want us

136
00:04:47,350 --> 00:04:51,400
however<font color="#E5E5E5"> you want to sample it so then we</font>

137
00:04:49,330 --> 00:04:53,260
have this<font color="#E5E5E5"> joint distribution over both</font>

138
00:04:51,400 --> 00:04:55,479
<font color="#CCCCCC">the sampling the function</font><font color="#E5E5E5"> and over the</font>

139
00:04:53,260 --> 00:04:57,250
obfuscators randomness<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we want to</font>

140
00:04:55,480 --> 00:04:59,860
say that with probability<font color="#CCCCCC"> over this</font>

141
00:04:57,250 --> 00:05:01,660
<font color="#E5E5E5">joint</font><font color="#CCCCCC"> distribution</font><font color="#E5E5E5"> this whole thing can</font>

142
00:04:59,860 --> 00:05:03,310
<font color="#CCCCCC">be simulated</font><font color="#E5E5E5"> so we're going to</font><font color="#CCCCCC"> well</font>

143
00:05:01,660 --> 00:05:06,520
construct an explicit simulator which

144
00:05:03,310 --> 00:05:08,020
runs the adversaries algorithm on

145
00:05:06,520 --> 00:05:10,359
something that represents a zero

146
00:05:08,020 --> 00:05:14,049
function<font color="#E5E5E5"> so what this says</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> if</font>

147
00:05:10,360 --> 00:05:15,580
you have this pattern<font color="#E5E5E5"> and</font><font color="#CCCCCC"> our prior you</font>

148
00:05:14,050 --> 00:05:17,530
don't know what the pattern is then this

149
00:05:15,580 --> 00:05:19,090
should<font color="#E5E5E5"> behave to any adversarial</font>

150
00:05:17,530 --> 00:05:20,710
algorithm a this should<font color="#E5E5E5"> behave just</font><font color="#CCCCCC"> like</font>

151
00:05:19,090 --> 00:05:26,770
something<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> always zero that never</font>

152
00:05:20,710 --> 00:05:28,388
has an accepting<font color="#CCCCCC"> input so the proof of</font>

153
00:05:26,770 --> 00:05:31,510
security this is<font color="#E5E5E5"> going to be an</font>

154
00:05:28,389 --> 00:05:33,430
<font color="#CCCCCC">engineered group model so the way this</font>

155
00:05:31,510 --> 00:05:35,140
is<font color="#CCCCCC"> set</font><font color="#E5E5E5"> up is the following so I so let's</font>

156
00:05:33,430 --> 00:05:39,210
say<font color="#E5E5E5"> again we're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> evaluate a</font>

157
00:05:35,140 --> 00:05:43,090
length and input and each kick<font color="#E5E5E5"> in each</font>

158
00:05:39,210 --> 00:05:45,969
<font color="#CCCCCC">x0 through</font><font color="#E5E5E5"> xn has two possible slots and</font>

159
00:05:43,090 --> 00:05:47,409
I so<font color="#CCCCCC"> will</font><font color="#E5E5E5"> start off</font><font color="#CCCCCC"> by giving</font><font color="#E5E5E5"> a table of</font>

160
00:05:45,970 --> 00:05:49,360
<font color="#E5E5E5">two and handles you can think of these</font>

161
00:05:47,410 --> 00:05:50,650
handles<font color="#E5E5E5"> as just being arbitrary strings</font>

162
00:05:49,360 --> 00:05:53,350
in a space that's large<font color="#CCCCCC"> enough that</font>

163
00:05:50,650 --> 00:05:55,030
<font color="#E5E5E5">there's no collisions and these handles</font>

164
00:05:53,350 --> 00:05:57,640
will not have any meaning themselves

165
00:05:55,030 --> 00:06:00,340
except for interacting with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> generic</font>

166
00:05:57,640 --> 00:06:02,110
group<font color="#E5E5E5"> Oracle so the group Oracle itself</font>

167
00:06:00,340 --> 00:06:03,760
is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to have some underlying group</font>

168
00:06:02,110 --> 00:06:07,060
it could be a cyclic group it<font color="#E5E5E5"> could be</font><font color="#CCCCCC"> a</font>

169
00:06:03,760 --> 00:06:09,250
<font color="#E5E5E5">integer</font><font color="#CCCCCC"> ring</font><font color="#E5E5E5"> or polynomials and so it'll</font>

170
00:06:07,060 --> 00:06:10,690
have a<font color="#CCCCCC"> so the group or group will</font>

171
00:06:09,250 --> 00:06:12,400
initialize<font color="#CCCCCC"> the random embedding from</font>

172
00:06:10,690 --> 00:06:14,740
this<font color="#E5E5E5"> group into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> space</font><font color="#CCCCCC"> of handles and</font>

173
00:06:12,400 --> 00:06:16,299
so the interaction<font color="#E5E5E5"> is modeled as a</font>

174
00:06:14,740 --> 00:06:18,100
following<font color="#E5E5E5"> you can give the group Oracle</font>

175
00:06:16,300 --> 00:06:19,240
<font color="#CCCCCC">two of these elements</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> it'll compute</font>

176
00:06:18,100 --> 00:06:20,680
<font color="#E5E5E5">the product and its internal</font>

177
00:06:19,240 --> 00:06:22,600
representation and give you a handle

178
00:06:20,680 --> 00:06:24,490
corresponding to that product<font color="#CCCCCC"> so if</font>

179
00:06:22,600 --> 00:06:26,169
you've<font color="#E5E5E5"> never seen this handled</font><font color="#CCCCCC"> before if</font>

180
00:06:24,490 --> 00:06:27,700
it's for<font color="#CCCCCC"> example if I took to the</font><font color="#E5E5E5"> table</font>

181
00:06:26,169 --> 00:06:29,229
<font color="#E5E5E5">elements</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> computer something that was</font>

182
00:06:27,700 --> 00:06:30,940
not<font color="#E5E5E5"> in the table then that that new</font>

183
00:06:29,229 --> 00:06:35,650
handle element should be uniformly

184
00:06:30,940 --> 00:06:38,440
<font color="#CCCCCC">distributed in</font><font color="#E5E5E5"> this space age so this is</font>

185
00:06:35,650 --> 00:06:40,710
the model<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> generic group now the</font>

186
00:06:38,440 --> 00:06:43,000
way we want to<font color="#E5E5E5"> think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> a proper</font>

187
00:06:40,710 --> 00:06:43,960
computation of<font color="#E5E5E5"> a function in</font><font color="#CCCCCC"> this model</font>

188
00:06:43,000 --> 00:06:45,789
is<font color="#E5E5E5"> the following right we</font>

189
00:06:43,960 --> 00:06:48,969
<font color="#E5E5E5">this table with all</font><font color="#CCCCCC"> the possible bit</font>

190
00:06:45,789 --> 00:06:51,818
values so in order to<font color="#E5E5E5"> evaluate an input</font>

191
00:06:48,970 --> 00:06:54,699
X we're going<font color="#E5E5E5"> to choose the handles that</font>

192
00:06:51,819 --> 00:06:57,490
<font color="#CCCCCC">are indicated by</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> input so if X 0 was</font>

193
00:06:54,699 --> 00:06:59,590
<font color="#CCCCCC">1</font><font color="#E5E5E5"> then we're going to choose H 0 1 do</font>

194
00:06:57,490 --> 00:07:00,580
this for<font color="#CCCCCC"> each input</font><font color="#E5E5E5"> you get n handles</font>

195
00:06:59,590 --> 00:07:03,159
and<font color="#E5E5E5"> then we're going to do some</font>

196
00:07:00,580 --> 00:07:07,539
computation<font color="#E5E5E5"> over these and handles that</font>

197
00:07:03,160 --> 00:07:10,900
will tell us<font color="#CCCCCC"> the output value so how do</font>

198
00:07:07,539 --> 00:07:12,610
we<font color="#E5E5E5"> do this computation so this differs</font>

199
00:07:10,900 --> 00:07:14,440
from a point function<font color="#CCCCCC"> in sort of</font><font color="#E5E5E5"> this</font>

200
00:07:12,610 --> 00:07:16,570
<font color="#E5E5E5">following symmetry right let's say the</font>

201
00:07:14,440 --> 00:07:18,550
pattern<font color="#E5E5E5"> is 0 1 star the first two</font>

202
00:07:16,570 --> 00:07:19,840
coordinates are just same<font color="#CCCCCC"> as a point</font>

203
00:07:18,550 --> 00:07:22,120
function<font color="#E5E5E5"> but on the third</font><font color="#CCCCCC"> corner we want</font>

204
00:07:19,840 --> 00:07:23,469
these two handles to look the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> when</font>

205
00:07:22,120 --> 00:07:25,180
<font color="#E5E5E5">we compute the whole function it</font>

206
00:07:23,470 --> 00:07:27,099
shouldn't matter which one<font color="#CCCCCC"> we choose but</font>

207
00:07:25,180 --> 00:07:28,840
on the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> hand they can't actually be</font>

208
00:07:27,099 --> 00:07:30,340
identical before you complete the entire

209
00:07:28,840 --> 00:07:32,109
function evaluation<font color="#CCCCCC"> because then the</font>

210
00:07:30,340 --> 00:07:36,070
adversary<font color="#CCCCCC"> would be able</font><font color="#E5E5E5"> to see that</font><font color="#CCCCCC"> this</font>

211
00:07:32,110 --> 00:07:38,500
is a wild<font color="#E5E5E5"> card slot</font><font color="#CCCCCC"> so these</font><font color="#E5E5E5"> solutions</font>

212
00:07:36,070 --> 00:07:40,120
that we're going<font color="#E5E5E5"> to use for this is the</font>

213
00:07:38,500 --> 00:07:43,479
standard technique of polynomial

214
00:07:40,120 --> 00:07:45,400
interpolation<font color="#CCCCCC"> right so it</font><font color="#E5E5E5"> doesn't matter</font>

215
00:07:43,479 --> 00:07:47,349
which samples you get as<font color="#E5E5E5"> long as all of</font>

216
00:07:45,400 --> 00:07:49,120
them are<font color="#CCCCCC"> n unique samples you can</font>

217
00:07:47,349 --> 00:07:51,430
<font color="#E5E5E5">construct the same interpolating</font>

218
00:07:49,120 --> 00:07:54,310
polynomial<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> setup is the</font><font color="#E5E5E5"> following</font>

219
00:07:51,430 --> 00:07:57,849
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> sample a polynomial such that P of</font>

220
00:07:54,310 --> 00:08:00,849
<font color="#E5E5E5">0 is 0</font><font color="#CCCCCC"> so you can simple</font><font color="#E5E5E5"> this by just</font>

221
00:07:57,849 --> 00:08:03,789
<font color="#E5E5E5">sampling the coefficients</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> first</font>

222
00:08:00,849 --> 00:08:05,849
to the nth terms and then constructing

223
00:08:03,789 --> 00:08:08,620
the polynomial as a sum<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> and</font>

224
00:08:05,849 --> 00:08:11,110
then the way we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> initialize that</font>

225
00:08:08,620 --> 00:08:16,270
table of<font color="#CCCCCC"> 2 and handles is as follows</font>

226
00:08:11,110 --> 00:08:17,770
so first let's say we have for the slots

227
00:08:16,270 --> 00:08:20,799
<font color="#CCCCCC">that</font><font color="#E5E5E5"> are not supposed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be accepting</font>

228
00:08:17,770 --> 00:08:22,719
right so it's<font color="#CCCCCC"> for 0 1</font><font color="#E5E5E5"> star if</font><font color="#CCCCCC"> x 0</font><font color="#E5E5E5"> was 1</font>

229
00:08:20,800 --> 00:08:24,340
<font color="#E5E5E5">then we'd never want this to</font><font color="#CCCCCC"> be part of</font>

230
00:08:22,719 --> 00:08:27,190
an accepting<font color="#CCCCCC"> input so for</font><font color="#E5E5E5"> that slot</font>

231
00:08:24,340 --> 00:08:29,919
<font color="#CCCCCC">we're gonna give a completely random</font>

232
00:08:27,190 --> 00:08:31,599
group element<font color="#E5E5E5"> and then give the mapping</font>

233
00:08:29,919 --> 00:08:34,088
<font color="#E5E5E5">from that to the handle space so</font><font color="#CCCCCC"> R here</font>

234
00:08:31,599 --> 00:08:36,458
represents just an<font color="#E5E5E5"> independent we sample</font>

235
00:08:34,089 --> 00:08:38,740
<font color="#E5E5E5">random group element for the slots that</font>

236
00:08:36,458 --> 00:08:42,429
<font color="#E5E5E5">are part of an accepting</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> we're</font>

237
00:08:38,740 --> 00:08:43,959
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to give it</font><font color="#CCCCCC"> a unique sample from</font>

238
00:08:42,429 --> 00:08:45,069
the polynomial<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so the inputs of</font><font color="#E5E5E5"> the</font>

239
00:08:43,958 --> 00:08:46,930
polynomial<font color="#E5E5E5"> is just going to be this</font>

240
00:08:45,070 --> 00:08:49,000
index that<font color="#E5E5E5"> you can compute beforehand</font>

241
00:08:46,930 --> 00:08:51,609
<font color="#E5E5E5">just by looking at the</font><font color="#CCCCCC"> table so</font><font color="#E5E5E5"> here's</font>

242
00:08:49,000 --> 00:08:54,820
this<font color="#E5E5E5"> P I plus 2 I plus J so we'll do</font>

243
00:08:51,610 --> 00:08:56,410
this for<font color="#CCCCCC"> both</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> non</font><font color="#E5E5E5"> wild card slots</font>

244
00:08:54,820 --> 00:08:57,580
<font color="#E5E5E5">and for the wild card slots maybe these</font>

245
00:08:56,410 --> 00:09:02,079
will<font color="#E5E5E5"> all be generated</font>

246
00:08:57,580 --> 00:09:04,830
the same way so then once<font color="#E5E5E5"> you have this</font>

247
00:09:02,080 --> 00:09:07,570
table<font color="#E5E5E5"> but then we can follow</font><font color="#CCCCCC"> our</font>

248
00:09:04,830 --> 00:09:09,130
previous evaluation scheme<font color="#E5E5E5"> pick these</font>

249
00:09:07,570 --> 00:09:11,950
samples construct the interpolating

250
00:09:09,130 --> 00:09:14,339
polynomial and then we'll just say you

251
00:09:11,950 --> 00:09:16,540
know if this out if P hat the

252
00:09:14,339 --> 00:09:18,310
interpolating<font color="#E5E5E5"> polynomial evaluates to</font>

253
00:09:16,540 --> 00:09:21,010
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> on the input</font><font color="#CCCCCC"> zero then we'll just</font>

254
00:09:18,310 --> 00:09:25,180
output<font color="#E5E5E5"> one so this corresponds to if all</font>

255
00:09:21,010 --> 00:09:26,500
my samples<font color="#CCCCCC"> were legitimate samples in</font>

256
00:09:25,180 --> 00:09:28,479
the polynomial<font color="#CCCCCC"> as opposed to if I had a</font>

257
00:09:26,500 --> 00:09:32,920
completely random sample then P of 0

258
00:09:28,480 --> 00:09:35,950
<font color="#E5E5E5">would not be 0 so this</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> work</font>

259
00:09:32,920 --> 00:09:38,649
obviously because so<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> think of</font>

260
00:09:35,950 --> 00:09:40,660
<font color="#E5E5E5">this as</font><font color="#CCCCCC"> I had this</font><font color="#E5E5E5"> table of</font><font color="#CCCCCC"> two n</font>

261
00:09:38,649 --> 00:09:42,910
<font color="#E5E5E5">samples but there's actually</font><font color="#CCCCCC"> more than n</font>

262
00:09:40,660 --> 00:09:45,459
samples so you<font color="#CCCCCC"> don't so an adversary</font>

263
00:09:42,910 --> 00:09:48,399
could<font color="#E5E5E5"> try and figure out the extra</font>

264
00:09:45,459 --> 00:09:50,310
<font color="#CCCCCC">samples</font><font color="#E5E5E5"> that he's not supposed to do I'm</font>

265
00:09:48,399 --> 00:09:52,630
<font color="#CCCCCC">doing honest evaluation</font><font color="#E5E5E5"> so there's these</font>

266
00:09:50,310 --> 00:09:54,399
<font color="#E5E5E5">decoding attacks or reed-solomon codes</font>

267
00:09:52,630 --> 00:09:56,920
with noisy samples<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example the</font>

268
00:09:54,399 --> 00:09:58,570
<font color="#CCCCCC">Berlocq and welsh album</font><font color="#E5E5E5"> where in this</font>

269
00:09:56,920 --> 00:10:00,910
<font color="#E5E5E5">case that the</font><font color="#CCCCCC"> number of wild card slots</font>

270
00:09:58,570 --> 00:10:03,160
was greater than<font color="#CCCCCC"> n over</font><font color="#E5E5E5"> 2 you could</font>

271
00:10:00,910 --> 00:10:05,079
construct<font color="#E5E5E5"> an error polynomial</font><font color="#CCCCCC"> and solve</font>

272
00:10:03,160 --> 00:10:07,660
<font color="#CCCCCC">for that and figure out the distinction</font>

273
00:10:05,079 --> 00:10:11,399
between<font color="#E5E5E5"> the slots so we can't release</font>

274
00:10:07,660 --> 00:10:15,160
the scheme like<font color="#E5E5E5"> that quite yeah but so</font>

275
00:10:11,399 --> 00:10:17,130
one thing<font color="#E5E5E5"> to note is that the</font><font color="#CCCCCC"> birla camp</font>

276
00:10:15,160 --> 00:10:18,730
<font color="#E5E5E5">vulture algorithm requires a nonlinear</font>

277
00:10:17,130 --> 00:10:20,890
computation because you're actually

278
00:10:18,730 --> 00:10:23,610
<font color="#CCCCCC">multiplying this interpolating</font>

279
00:10:20,890 --> 00:10:26,920
polynomial by other algebraic terms

280
00:10:23,610 --> 00:10:29,200
however as we'll show next<font color="#E5E5E5"> if you want</font>

281
00:10:26,920 --> 00:10:30,729
if you just<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to compute the value of</font>

282
00:10:29,200 --> 00:10:32,440
the interpolating polynomial on<font color="#CCCCCC"> zero</font>

283
00:10:30,730 --> 00:10:38,770
this only<font color="#E5E5E5"> requires a linear combination</font>

284
00:10:32,440 --> 00:10:41,170
over<font color="#CCCCCC"> thee over the elements so</font><font color="#E5E5E5"> in there</font>

285
00:10:38,770 --> 00:10:42,819
so with this realization<font color="#E5E5E5"> we can just put</font>

286
00:10:41,170 --> 00:10:45,010
everything<font color="#E5E5E5"> in the exponent as follows</font>

287
00:10:42,820 --> 00:10:47,140
so we'll sample the same degree<font color="#E5E5E5"> n</font>

288
00:10:45,010 --> 00:10:50,079
polynomial in the same way but then

289
00:10:47,140 --> 00:10:52,360
we'll<font color="#E5E5E5"> also fix a cyclic group of the</font>

290
00:10:50,079 --> 00:10:56,019
same prime order as the modulus of the

291
00:10:52,360 --> 00:10:59,230
integer ring right so<font color="#E5E5E5"> that's the</font><font color="#CCCCCC"> setup</font>

292
00:10:56,019 --> 00:11:00,790
<font color="#E5E5E5">and then that's the way</font><font color="#CCCCCC"> you give the</font>

293
00:10:59,230 --> 00:11:02,410
handles will be the same as<font color="#E5E5E5"> before we</font>

294
00:11:00,790 --> 00:11:07,520
just put everything<font color="#CCCCCC"> in the exponent of</font>

295
00:11:02,410 --> 00:11:09,649
this<font color="#E5E5E5"> same generator element</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so</font>

296
00:11:07,520 --> 00:11:11,329
now that we have this how do we<font color="#E5E5E5"> do this</font>

297
00:11:09,649 --> 00:11:14,980
linear combination<font color="#CCCCCC"> of computation to</font>

298
00:11:11,330 --> 00:11:16,970
<font color="#E5E5E5">evaluate the polynomial interpolant well</font>

299
00:11:14,980 --> 00:11:19,730
you can think<font color="#CCCCCC"> of polynomial</font>

300
00:11:16,970 --> 00:11:21,740
<font color="#CCCCCC">interpolation</font><font color="#E5E5E5"> as a linear combination of</font>

301
00:11:19,730 --> 00:11:25,190
basis elements and because our inputs

302
00:11:21,740 --> 00:11:27,890
are<font color="#CCCCCC"> 2i plus J and then we also only a</font>

303
00:11:25,190 --> 00:11:29,270
volunteer evaluated on the terms<font color="#CCCCCC"> 0 we</font>

304
00:11:27,890 --> 00:11:30,680
<font color="#E5E5E5">don't care about what the interplay</font>

305
00:11:29,270 --> 00:11:32,630
empowerment was in anything<font color="#CCCCCC"> else</font><font color="#E5E5E5"> we can</font>

306
00:11:30,680 --> 00:11:34,760
just plug<font color="#E5E5E5"> in all these terms and get a</font>

307
00:11:32,630 --> 00:11:37,160
<font color="#E5E5E5">single</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of them we call</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> a</font>

308
00:11:34,760 --> 00:11:38,720
<font color="#CCCCCC">background coefficient so then we're</font>

309
00:11:37,160 --> 00:11:40,130
just<font color="#E5E5E5"> computing a sum over</font><font color="#CCCCCC"> like brownish</font>

310
00:11:38,720 --> 00:11:42,320
coefficients which is just<font color="#E5E5E5"> the product</font>

311
00:11:40,130 --> 00:11:43,580
over<font color="#CCCCCC"> thee which is just</font><font color="#E5E5E5"> some in the</font>

312
00:11:42,320 --> 00:11:46,570
<font color="#E5E5E5">exponent which we can compute as a</font>

313
00:11:43,580 --> 00:11:48,980
product of these generic<font color="#E5E5E5"> group elements</font>

314
00:11:46,570 --> 00:11:51,740
so for correct yes so for correctness

315
00:11:48,980 --> 00:11:53,209
then if each thing is a sampled and

316
00:11:51,740 --> 00:11:56,630
you'll see that in the exponent<font color="#E5E5E5"> you get</font>

317
00:11:53,209 --> 00:11:59,930
the sum of<font color="#E5E5E5"> the CIL a garnish coefficient</font>

318
00:11:56,630 --> 00:12:01,220
times<font color="#E5E5E5"> the value of the</font><font color="#CCCCCC"> polynomial and so</font>

319
00:11:59,930 --> 00:12:04,160
<font color="#E5E5E5">this is going to give you</font><font color="#CCCCCC"> G to the P of</font>

320
00:12:01,220 --> 00:12:06,050
<font color="#E5E5E5">0 and so if P</font><font color="#CCCCCC"> of 0 is the correct</font>

321
00:12:04,160 --> 00:12:08,689
polynomial then this will show you<font color="#E5E5E5"> that</font>

322
00:12:06,050 --> 00:12:10,189
the scheme<font color="#E5E5E5"> gives you the correct</font><font color="#CCCCCC"> output</font>

323
00:12:08,690 --> 00:12:11,660
and<font color="#E5E5E5"> but then if any of them was random</font>

324
00:12:10,190 --> 00:12:15,100
then you're just<font color="#CCCCCC"> going to kill just get</font>

325
00:12:11,660 --> 00:12:17,930
the product with a random<font color="#E5E5E5"> group element</font>

326
00:12:15,100 --> 00:12:20,120
so the correctness of this scheme is

327
00:12:17,930 --> 00:12:22,729
pretty<font color="#E5E5E5"> straightforward and now we're</font>

328
00:12:20,120 --> 00:12:26,060
gonna show security of this<font color="#E5E5E5"> through the</font>

329
00:12:22,730 --> 00:12:29,240
<font color="#E5E5E5">following game between the generic group</font>

330
00:12:26,060 --> 00:12:31,369
<font color="#E5E5E5">simulators right so the proof of this</font>

331
00:12:29,240 --> 00:12:34,040
will be a so I'll go through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> high</font>

332
00:12:31,370 --> 00:12:40,160
<font color="#E5E5E5">level proof of how we set</font><font color="#CCCCCC"> up the</font><font color="#E5E5E5"> generic</font>

333
00:12:34,040 --> 00:12:41,810
group arguments so we can think of this

334
00:12:40,160 --> 00:12:43,969
<font color="#CCCCCC">proof will be</font><font color="#E5E5E5"> hybrid over the actual</font>

335
00:12:41,810 --> 00:12:45,410
internal group representation<font color="#CCCCCC"> of each</font>

336
00:12:43,970 --> 00:12:48,020
<font color="#CCCCCC">Oracle</font><font color="#E5E5E5"> right so for the first one that</font>

337
00:12:45,410 --> 00:12:50,060
we're going<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> with is the actual</font>

338
00:12:48,020 --> 00:12:52,339
implementation this will be the cyclic

339
00:12:50,060 --> 00:12:53,719
<font color="#CCCCCC">group of order P so a</font><font color="#E5E5E5"> group</font><font color="#CCCCCC"> element will</font>

340
00:12:52,339 --> 00:12:57,500
look like this it'll<font color="#E5E5E5"> actually be G to</font>

341
00:12:53,720 --> 00:12:59,300
the<font color="#CCCCCC"> sum</font><font color="#E5E5E5"> T</font><font color="#CCCCCC"> of some polynomial</font><font color="#E5E5E5"> the group</font>

342
00:12:57,500 --> 00:13:01,070
that we're going<font color="#E5E5E5"> to end with is going to</font>

343
00:12:59,300 --> 00:13:03,050
<font color="#CCCCCC">be this thing which represents the zero</font>

344
00:13:01,070 --> 00:13:04,880
function<font color="#CCCCCC"> now what is that that's going</font>

345
00:13:03,050 --> 00:13:07,459
<font color="#CCCCCC">to be a</font><font color="#E5E5E5"> group over</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> going to be a</font>

346
00:13:04,880 --> 00:13:09,890
free group over<font color="#CCCCCC"> 2 n basis elements right</font>

347
00:13:07,459 --> 00:13:12,469
so the reason<font color="#CCCCCC"> this represents</font><font color="#E5E5E5"> the zero</font>

348
00:13:09,890 --> 00:13:13,850
<font color="#E5E5E5">function is because each basis element</font>

349
00:13:12,470 --> 00:13:15,740
here is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to correspond</font><font color="#E5E5E5"> to one</font>

350
00:13:13,850 --> 00:13:16,270
handle so any<font color="#E5E5E5"> linear combination that</font><font color="#CCCCCC"> is</font>

351
00:13:15,740 --> 00:13:18,310
never going to be

352
00:13:16,270 --> 00:13:20,470
zero because<font color="#CCCCCC"> these are all independent</font>

353
00:13:18,310 --> 00:13:22,209
elements with no relations<font color="#E5E5E5"> so then any</font>

354
00:13:20,470 --> 00:13:23,860
adversary trying to construct an

355
00:13:22,210 --> 00:13:25,900
interpolation over this<font color="#E5E5E5"> group will</font>

356
00:13:23,860 --> 00:13:29,290
<font color="#E5E5E5">always get something</font><font color="#CCCCCC"> nonzero so this</font>

357
00:13:25,900 --> 00:13:31,090
represents the<font color="#E5E5E5"> zero function so this is</font>

358
00:13:29,290 --> 00:13:32,890
the simulator efore<font color="#E5E5E5"> n now we also have</font>

359
00:13:31,090 --> 00:13:34,000
now we'll have<font color="#E5E5E5"> a third similar in the</font>

360
00:13:32,890 --> 00:13:36,520
middle which is<font color="#E5E5E5"> sort of like</font><font color="#CCCCCC"> an</font>

361
00:13:34,000 --> 00:13:38,440
algebraic hybrid between<font color="#E5E5E5"> these two so</font>

362
00:13:36,520 --> 00:13:40,150
for this last simulator<font color="#E5E5E5"> remember earlier</font>

363
00:13:38,440 --> 00:13:42,790
we sampled the polynomial by sampling

364
00:13:40,150 --> 00:13:44,199
coefficients they went through a<font color="#E5E5E5"> n here</font>

365
00:13:42,790 --> 00:13:45,819
we're gonna leave those coefficients<font color="#CCCCCC"> on</font>

366
00:13:44,200 --> 00:13:48,040
samples<font color="#CCCCCC"> so this will be a polynomial</font>

367
00:13:45,820 --> 00:13:50,710
<font color="#E5E5E5">ring over the coefficients a 1 through a</font>

368
00:13:48,040 --> 00:13:54,219
<font color="#CCCCCC">n and then we'll also have</font><font color="#E5E5E5"> variables for</font>

369
00:13:50,710 --> 00:13:57,760
each non accepting slot<font color="#E5E5E5"> right so we had</font>

370
00:13:54,220 --> 00:13:59,530
and accepting slots plus<font color="#E5E5E5"> W</font><font color="#CCCCCC"> wild cards</font>

371
00:13:57,760 --> 00:14:01,720
<font color="#E5E5E5">thoughts so there's n minus W non</font>

372
00:13:59,530 --> 00:14:04,839
accepting slots<font color="#E5E5E5"> each of those gets its</font>

373
00:14:01,720 --> 00:14:06,790
<font color="#E5E5E5">own variable</font><font color="#CCCCCC"> V 1 so the initial handle</font>

374
00:14:04,840 --> 00:14:10,030
table will<font color="#CCCCCC"> look like this right so P of</font>

375
00:14:06,790 --> 00:14:14,500
<font color="#CCCCCC">3</font><font color="#E5E5E5"> will be this algebra polynomial 3 a 1</font>

376
00:14:10,030 --> 00:14:15,850
plus a 9 and if you had a non accepting

377
00:14:14,500 --> 00:14:19,390
slot then there would just be its own

378
00:14:15,850 --> 00:14:21,850
independent free variable<font color="#CCCCCC"> V 1 so this is</font>

379
00:14:19,390 --> 00:14:23,230
<font color="#E5E5E5">what the three internal group</font>

380
00:14:21,850 --> 00:14:26,580
representations will look<font color="#E5E5E5"> like in our</font>

381
00:14:23,230 --> 00:14:28,570
proof now<font color="#E5E5E5"> how do we show</font>

382
00:14:26,580 --> 00:14:30,460
indistinguishability between any two<font color="#E5E5E5"> of</font>

383
00:14:28,570 --> 00:14:32,490
<font color="#E5E5E5">them so I'll just so for the rest of</font>

384
00:14:30,460 --> 00:14:34,720
this I'm<font color="#CCCCCC"> just</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to focus on</font><font color="#E5E5E5"> B</font>

385
00:14:32,490 --> 00:14:36,490
indistinguishability game between<font color="#E5E5E5"> s</font><font color="#CCCCCC"> and</font>

386
00:14:34,720 --> 00:14:38,800
M<font color="#E5E5E5"> right the first two and you can think</font>

387
00:14:36,490 --> 00:14:42,700
<font color="#E5E5E5">of the game between the second step as</font>

388
00:14:38,800 --> 00:14:44,859
roughly<font color="#E5E5E5"> similar so personal generic</font>

389
00:14:42,700 --> 00:14:46,810
group<font color="#CCCCCC"> model in the past have been sort</font>

390
00:14:44,860 --> 00:14:47,860
<font color="#E5E5E5">of difficult to formalize because</font>

391
00:14:46,810 --> 00:14:48,969
there's a lot of<font color="#CCCCCC"> things you need</font><font color="#E5E5E5"> to keep</font>

392
00:14:47,860 --> 00:14:50,620
<font color="#E5E5E5">track</font><font color="#CCCCCC"> of maybe the case trap</font><font color="#E5E5E5"> have</font>

393
00:14:48,970 --> 00:14:52,840
handles how these correspond to group

394
00:14:50,620 --> 00:14:54,040
elements and you also need to<font color="#E5E5E5"> formalize</font>

395
00:14:52,840 --> 00:14:56,110
this<font color="#CCCCCC"> notion</font><font color="#E5E5E5"> of you know what does it</font>

396
00:14:54,040 --> 00:14:58,329
mean for a generic<font color="#E5E5E5"> to generic gruesomely</font>

397
00:14:56,110 --> 00:15:00,130
it is the different in the<font color="#CCCCCC"> past</font><font color="#E5E5E5"> a lot of</font>

398
00:14:58,330 --> 00:15:02,140
<font color="#E5E5E5">this has just</font><font color="#CCCCCC"> been formalized as you</font>

399
00:15:00,130 --> 00:15:04,450
know the simulation is perfect except if

400
00:15:02,140 --> 00:15:06,760
this happens so we like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make that</font>

401
00:15:04,450 --> 00:15:09,370
statement<font color="#E5E5E5"> a bit more rigorous so we're</font>

402
00:15:06,760 --> 00:15:11,350
gonna define<font color="#CCCCCC"> a security game as follows</font>

403
00:15:09,370 --> 00:15:14,140
so the<font color="#CCCCCC"> adversary is given two articles</font>

404
00:15:11,350 --> 00:15:16,000
<font color="#CCCCCC">one of them you</font><font color="#E5E5E5"> know it's the US here</font>

405
00:15:14,140 --> 00:15:18,340
<font color="#CCCCCC">we'll say it's the middle Oracle with</font>

406
00:15:16,000 --> 00:15:20,590
the Xia join a<font color="#E5E5E5"> be polynomial</font>

407
00:15:18,340 --> 00:15:22,720
representation<font color="#E5E5E5"> the other Oracle is going</font>

408
00:15:20,590 --> 00:15:24,100
to be either S or M with probability<font color="#CCCCCC"> 1/2</font>

409
00:15:22,720 --> 00:15:27,340
and the goal<font color="#E5E5E5"> of this game is</font><font color="#CCCCCC"> to guess</font>

410
00:15:24,100 --> 00:15:29,110
which one<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is so the adversary is</font>

411
00:15:27,340 --> 00:15:29,880
going<font color="#CCCCCC"> to start off with the table from</font>

412
00:15:29,110 --> 00:15:32,160
<font color="#E5E5E5">each one and</font><font color="#CCCCCC"> you're</font>

413
00:15:29,880 --> 00:15:35,520
and each round he asked the<font color="#E5E5E5"> same query</font>

414
00:15:32,160 --> 00:15:37,170
<font color="#E5E5E5">so each Oracle and the</font><font color="#CCCCCC"> adversary wins if</font>

415
00:15:35,520 --> 00:15:43,010
you can guessed correctly the identity

416
00:15:37,170 --> 00:15:46,770
of<font color="#E5E5E5"> what the unknown Oracle is okay so</font>

417
00:15:43,010 --> 00:15:48,420
how do we okay so what do we<font color="#CCCCCC"> need to</font>

418
00:15:46,770 --> 00:15:50,640
define this game where we had these two

419
00:15:48,420 --> 00:15:53,550
different<font color="#CCCCCC"> group representations one was</font>

420
00:15:50,640 --> 00:15:55,380
a polynomial<font color="#CCCCCC"> Z</font><font color="#E5E5E5"> adjoint a B one was the</font>

421
00:15:53,550 --> 00:15:57,390
<font color="#E5E5E5">actual group so it turns out that in</font>

422
00:15:55,380 --> 00:15:59,310
order<font color="#CCCCCC"> to make this game work</font><font color="#E5E5E5"> there's a</font>

423
00:15:57,390 --> 00:16:02,100
relationship<font color="#E5E5E5"> between these</font><font color="#CCCCCC"> two which is</font>

424
00:15:59,310 --> 00:16:03,719
exactly the evaluation map in<font color="#E5E5E5"> which you</font>

425
00:16:02,100 --> 00:16:06,930
<font color="#E5E5E5">take the polynomial</font><font color="#CCCCCC"> and plug in the</font>

426
00:16:03,720 --> 00:16:09,150
values<font color="#CCCCCC"> that were actually sampled in</font>

427
00:16:06,930 --> 00:16:11,819
<font color="#CCCCCC">those simulators start so this gives you</font>

428
00:16:09,150 --> 00:16:14,040
a group homomorphism from the group in

429
00:16:11,820 --> 00:16:16,800
the simulator<font color="#CCCCCC"> m2 the group in the</font>

430
00:16:14,040 --> 00:16:20,040
<font color="#E5E5E5">cemetery s so we have</font><font color="#CCCCCC"> this invalidation</font>

431
00:16:16,800 --> 00:16:21,540
map<font color="#E5E5E5"> I'll denote</font><font color="#CCCCCC"> at Phi</font><font color="#E5E5E5"> now I do need to</font>

432
00:16:20,040 --> 00:16:23,130
<font color="#E5E5E5">establish some notation</font><font color="#CCCCCC"> just to keep</font>

433
00:16:21,540 --> 00:16:26,010
<font color="#E5E5E5">track</font><font color="#CCCCCC"> of the rest of the bookkeeping so</font>

434
00:16:23,130 --> 00:16:27,870
let's say<font color="#CCCCCC"> that we have these</font><font color="#E5E5E5"> to handle</font>

435
00:16:26,010 --> 00:16:30,390
sets<font color="#E5E5E5"> right we had an adversary playing</font>

436
00:16:27,870 --> 00:16:33,210
<font color="#E5E5E5">two Oracle's simultaneously so I have to</font>

437
00:16:30,390 --> 00:16:34,680
handle sets and so H H superscript<font color="#CCCCCC"> 0 is</font>

438
00:16:33,210 --> 00:16:37,230
just<font color="#CCCCCC"> the initial table of the to n</font>

439
00:16:34,680 --> 00:16:39,329
handles and as each round as the

440
00:16:37,230 --> 00:16:41,130
adversary<font color="#CCCCCC"> has a</font><font color="#E5E5E5"> product and gets a new</font>

441
00:16:39,330 --> 00:16:44,400
handle he'll keep adding it to this set

442
00:16:41,130 --> 00:16:45,960
<font color="#E5E5E5">and in order some make precise</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> notion</font>

443
00:16:44,400 --> 00:16:48,090
of asking the<font color="#E5E5E5"> same query</font><font color="#CCCCCC"> we'll have this</font>

444
00:16:45,960 --> 00:16:50,190
other map that identifies<font color="#E5E5E5"> between the</font>

445
00:16:48,090 --> 00:16:52,380
two sets<font color="#E5E5E5"> right so initially this will</font>

446
00:16:50,190 --> 00:16:53,970
correspond to just the same entry<font color="#CCCCCC"> in</font><font color="#E5E5E5"> one</font>

447
00:16:52,380 --> 00:16:55,770
table<font color="#E5E5E5"> maps</font><font color="#CCCCCC"> of the same enter in the</font>

448
00:16:53,970 --> 00:16:58,080
other<font color="#E5E5E5"> table and then if I ask a query</font>

449
00:16:55,770 --> 00:17:00,870
and<font color="#E5E5E5"> get this new pair of handles on each</font>

450
00:16:58,080 --> 00:17:03,180
<font color="#E5E5E5">one</font><font color="#CCCCCC"> that will be added to this map and</font>

451
00:17:00,870 --> 00:17:05,579
<font color="#E5E5E5">then lastly each each group simulator</font>

452
00:17:03,180 --> 00:17:07,709
will have its own embedding<font color="#CCCCCC"> his own</font>

453
00:17:05,579 --> 00:17:12,180
sample to fix the random embedding from

454
00:17:07,709 --> 00:17:15,060
the group into<font color="#CCCCCC"> the space of handles okay</font>

455
00:17:12,180 --> 00:17:17,760
so the proof is<font color="#CCCCCC"> going to be</font><font color="#E5E5E5"> our proof by</font>

456
00:17:15,060 --> 00:17:19,708
<font color="#E5E5E5">induction and so the idea is false let's</font>

457
00:17:17,760 --> 00:17:23,540
say the adversary<font color="#E5E5E5"> has made T queries so</font>

458
00:17:19,709 --> 00:17:27,300
far and has these two sets of T handles

459
00:17:23,540 --> 00:17:29,310
<font color="#CCCCCC">okay now first</font><font color="#E5E5E5"> I want to formalize you</font>

460
00:17:27,300 --> 00:17:32,100
know what does<font color="#E5E5E5"> it mean that the answers</font>

461
00:17:29,310 --> 00:17:37,500
I've seen so<font color="#CCCCCC"> far are the same</font><font color="#E5E5E5"> so that's</font>

462
00:17:32,100 --> 00:17:39,629
going to<font color="#E5E5E5"> be either</font><font color="#CCCCCC"> I see one handle from</font>

463
00:17:37,500 --> 00:17:41,460
peach and I already<font color="#E5E5E5"> knew that</font><font color="#CCCCCC"> Sai of one</font>

464
00:17:39,630 --> 00:17:42,659
map to<font color="#CCCCCC"> sy of another so I've seen both</font>

465
00:17:41,460 --> 00:17:44,190
handles and I know

466
00:17:42,659 --> 00:17:46,229
<font color="#E5E5E5">one after another then</font><font color="#CCCCCC"> that means this</font>

467
00:17:44,190 --> 00:17:48,359
is<font color="#E5E5E5"> the same answer the other option is</font>

468
00:17:46,229 --> 00:17:50,519
of both<font color="#CCCCCC"> our new handles and so because</font>

469
00:17:48,359 --> 00:17:52,619
these are each fires are random and

470
00:17:50,519 --> 00:17:54,149
<font color="#E5E5E5">betting then these new handles will both</font>

471
00:17:52,619 --> 00:17:56,789
be drawn from a uniform<font color="#CCCCCC"> distribution</font>

472
00:17:54,149 --> 00:18:00,359
<font color="#E5E5E5">over the handle space so in this case</font>

473
00:17:56,789 --> 00:18:03,529
we'll also<font color="#E5E5E5"> say that the query output</font>

474
00:18:00,359 --> 00:18:06,389
<font color="#E5E5E5">from the two simulators are the same so</font>

475
00:18:03,529 --> 00:18:08,129
<font color="#E5E5E5">we want this to be true for every query</font>

476
00:18:06,389 --> 00:18:10,678
<font color="#E5E5E5">and if that's the</font><font color="#CCCCCC"> case then we can say</font>

477
00:18:08,129 --> 00:18:12,928
this game is indistinguishable<font color="#E5E5E5"> but we</font>

478
00:18:10,679 --> 00:18:14,669
also need another condition<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

479
00:18:12,929 --> 00:18:17,249
show that<font color="#CCCCCC"> this is true and so this</font>

480
00:18:14,669 --> 00:18:19,259
condition is<font color="#CCCCCC"> that where we have this</font>

481
00:18:17,249 --> 00:18:21,979
non-trivial kernel from<font color="#E5E5E5"> the polynomial</font>

482
00:18:19,259 --> 00:18:23,909
<font color="#CCCCCC">rings the adjoining TB</font><font color="#E5E5E5"> to the group and</font>

483
00:18:21,979 --> 00:18:25,710
because this kernel is non-trivial

484
00:18:23,909 --> 00:18:28,349
there's multiple<font color="#CCCCCC"> things</font><font color="#E5E5E5"> that map down</font>

485
00:18:25,710 --> 00:18:31,259
<font color="#E5E5E5">but we want there</font><font color="#CCCCCC"> to only be one that</font>

486
00:18:28,349 --> 00:18:33,570
the adversary<font color="#CCCCCC"> has seen so far in the</font>

487
00:18:31,259 --> 00:18:35,519
handle space of M<font color="#E5E5E5"> so that's so what this</font>

488
00:18:33,570 --> 00:18:37,320
<font color="#E5E5E5">the thing is let's say we get a handle</font>

489
00:18:35,519 --> 00:18:40,080
in the handle space of pests there's a

490
00:18:37,320 --> 00:18:44,269
unique<font color="#E5E5E5"> polynomial which corresponds to a</font>

491
00:18:40,080 --> 00:18:46,320
handle<font color="#CCCCCC"> you seen</font><font color="#E5E5E5"> in M which maps to this</font>

492
00:18:44,269 --> 00:18:48,840
<font color="#E5E5E5">okay so this will be inductive</font>

493
00:18:46,320 --> 00:18:51,269
hypothesis now<font color="#CCCCCC"> given these two things</font>

494
00:18:48,840 --> 00:18:53,519
let's look at what a round<font color="#E5E5E5"> in this game</font>

495
00:18:51,269 --> 00:18:54,929
looks<font color="#E5E5E5"> like a round of simulation let's</font>

496
00:18:53,519 --> 00:18:57,960
say we've<font color="#CCCCCC"> done two rounds on</font><font color="#E5E5E5"> the t-post</font>

497
00:18:54,929 --> 00:19:01,590
want round<font color="#E5E5E5"> the adversary</font><font color="#CCCCCC"> we'll want to</font>

498
00:18:57,960 --> 00:19:03,389
<font color="#E5E5E5">ask a group query of say</font><font color="#CCCCCC"> h1 h2</font><font color="#E5E5E5"> to</font>

499
00:19:01,590 --> 00:19:05,279
<font color="#CCCCCC">Simulator</font><font color="#E5E5E5"> m and then the same</font>

500
00:19:03,389 --> 00:19:06,840
corresponding one this simulator<font color="#CCCCCC"> s which</font>

501
00:19:05,279 --> 00:19:09,090
will be defined<font color="#E5E5E5"> by this time map and</font>

502
00:19:06,840 --> 00:19:12,178
he'll get back<font color="#E5E5E5"> two handles one from each</font>

503
00:19:09,090 --> 00:19:14,099
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so we have we have basically four</font>

504
00:19:12,179 --> 00:19:16,320
cases here these two handles can<font color="#E5E5E5"> be the</font>

505
00:19:14,099 --> 00:19:17,759
same that you've seen<font color="#CCCCCC"> already they can</font>

506
00:19:16,320 --> 00:19:19,529
both be different<font color="#E5E5E5"> or one can</font><font color="#CCCCCC"> be</font>

507
00:19:17,759 --> 00:19:21,929
different<font color="#E5E5E5"> and one can be one that you've</font>

508
00:19:19,529 --> 00:19:24,869
seen<font color="#CCCCCC"> already so one of these</font><font color="#E5E5E5"> cases is</font>

509
00:19:21,929 --> 00:19:26,789
impossible two of them are<font color="#CCCCCC"> already will</font>

510
00:19:24,869 --> 00:19:28,379
still satisfy<font color="#CCCCCC"> the inductive hypothesis</font>

511
00:19:26,789 --> 00:19:29,849
and there's<font color="#CCCCCC"> only</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> and we can</font>

512
00:19:28,379 --> 00:19:31,830
show<font color="#CCCCCC"> that there's</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> one problematic</font>

513
00:19:29,849 --> 00:19:34,320
case which is<font color="#CCCCCC"> that if you get a</font><font color="#E5E5E5"> new</font>

514
00:19:31,830 --> 00:19:36,359
handle in the simulator corresponding to

515
00:19:34,320 --> 00:19:38,009
the<font color="#CCCCCC"> Ziya during a be polynomial</font><font color="#E5E5E5"> ring but</font>

516
00:19:36,359 --> 00:19:39,478
you<font color="#E5E5E5"> get one that you already seen</font>

517
00:19:38,009 --> 00:19:42,479
already corresponding<font color="#E5E5E5"> to the simulator</font>

518
00:19:39,479 --> 00:19:44,039
<font color="#E5E5E5">in the generic group all</font><font color="#CCCCCC"> right so then</font>

519
00:19:42,479 --> 00:19:45,690
<font color="#CCCCCC">basically this comes down</font><font color="#E5E5E5"> to an</font>

520
00:19:44,039 --> 00:19:48,299
algebraic argument we can show that<font color="#E5E5E5"> the</font>

521
00:19:45,690 --> 00:19:50,970
only<font color="#E5E5E5"> way this is happens is if you get</font>

522
00:19:48,299 --> 00:19:53,190
<font color="#E5E5E5">something in the kernel of this map in</font>

523
00:19:50,970 --> 00:19:55,499
this<font color="#CCCCCC"> evaluation map that's not that's</font>

524
00:19:53,190 --> 00:19:56,610
<font color="#E5E5E5">non-trivial and so once you get to this</font>

525
00:19:55,499 --> 00:19:58,950
step then

526
00:19:56,610 --> 00:20:00,659
the rest is<font color="#E5E5E5"> combinatorial calculations</font>

527
00:19:58,950 --> 00:20:03,540
so we can apply<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same argument to</font>

528
00:20:00,660 --> 00:20:05,880
both of the games<font color="#E5E5E5"> so right so the</font>

529
00:20:03,540 --> 00:20:07,500
<font color="#E5E5E5">valuation map here I've defined is just</font>

530
00:20:05,880 --> 00:20:10,080
<font color="#CCCCCC">for</font><font color="#E5E5E5"> s</font><font color="#CCCCCC"> to M but you can define a</font>

531
00:20:07,500 --> 00:20:13,680
different<font color="#E5E5E5"> evaluation map from</font><font color="#CCCCCC"> MTE which</font>

532
00:20:10,080 --> 00:20:18,870
evaluates<font color="#E5E5E5"> on</font><font color="#CCCCCC"> BR random and on</font><font color="#E5E5E5"> different</font>

533
00:20:13,680 --> 00:20:20,250
<font color="#CCCCCC">random countries so so this is also so</font>

534
00:20:18,870 --> 00:20:22,919
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a high-level</font><font color="#E5E5E5"> overview of this</font>

535
00:20:20,250 --> 00:20:25,260
framework<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we give for the arguing</font>

536
00:20:22,920 --> 00:20:27,930
in the generic group<font color="#E5E5E5"> model and I will</font>

537
00:20:25,260 --> 00:20:33,030
spare you all the combinatorics<font color="#E5E5E5"> details</font>

538
00:20:27,930 --> 00:20:34,440
<font color="#E5E5E5">so to conclude</font><font color="#CCCCCC"> we give</font><font color="#E5E5E5"> a fist</font><font color="#CCCCCC"> ocation</font>

539
00:20:33,030 --> 00:20:36,240
scheme<font color="#E5E5E5"> for this function class so we're</font>

540
00:20:34,440 --> 00:20:38,220
able to<font color="#E5E5E5"> show it from a standard</font>

541
00:20:36,240 --> 00:20:41,760
assumption just<font color="#CCCCCC"> which is just a generic</font>

542
00:20:38,220 --> 00:20:43,710
group<font color="#E5E5E5"> model and this assumption itself</font>

543
00:20:41,760 --> 00:20:45,930
is easy to describe<font color="#E5E5E5"> and</font><font color="#CCCCCC"> when you</font><font color="#E5E5E5"> just</font>

544
00:20:43,710 --> 00:20:48,210
pray you're raising<font color="#E5E5E5"> your computing this</font>

545
00:20:45,930 --> 00:20:49,470
rational number outside<font color="#CCCCCC"> of the group</font><font color="#E5E5E5"> and</font>

546
00:20:48,210 --> 00:20:52,470
<font color="#E5E5E5">then your explanation using the group</font>

547
00:20:49,470 --> 00:20:54,450
Oracle<font color="#E5E5E5"> and so we also give this new</font>

548
00:20:52,470 --> 00:20:55,770
framework<font color="#CCCCCC"> for</font><font color="#E5E5E5"> how you can maybe more</font>

549
00:20:54,450 --> 00:20:57,630
formally think about generic group

550
00:20:55,770 --> 00:20:59,580
arguments using<font color="#E5E5E5"> this simultaneous or a</font>

551
00:20:57,630 --> 00:21:01,710
coracle game and how<font color="#E5E5E5"> you can more</font>

552
00:20:59,580 --> 00:21:07,780
explicitly identify when a simulation

553
00:21:01,710 --> 00:21:12,530
<font color="#E5E5E5">fails in this generic group case</font><font color="#CCCCCC"> Thanks</font>

554
00:21:07,780 --> 00:21:12,530
[Applause]

