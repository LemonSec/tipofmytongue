1
00:00:04,910 --> 00:00:09,440
yeah thanks<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the introduction</font><font color="#CCCCCC"> so I</font>

2
00:00:07,430 --> 00:00:12,440
will talk<font color="#CCCCCC"> about on the</font><font color="#E5E5E5"> run complexity of</font>

3
00:00:09,440 --> 00:00:14,390
<font color="#CCCCCC">ot extension</font><font color="#E5E5E5"> but before I go</font><font color="#CCCCCC"> into detect</font>

4
00:00:12,440 --> 00:00:16,219
you know go details I want to talk a

5
00:00:14,390 --> 00:00:18,290
<font color="#E5E5E5">little bit about secure multi-party</font>

6
00:00:16,219 --> 00:00:20,330
computation<font color="#E5E5E5"> because that's the reason</font>

7
00:00:18,290 --> 00:00:22,460
<font color="#CCCCCC">why it's so important why oblivious</font>

8
00:00:20,330 --> 00:00:24,258
transfer is so important in this picture

9
00:00:22,460 --> 00:00:26,300
<font color="#CCCCCC">you can see</font><font color="#E5E5E5"> two parties so it's a</font>

10
00:00:24,259 --> 00:00:29,029
simplified setting of secure multi-party

11
00:00:26,300 --> 00:00:31,550
<font color="#E5E5E5">computation we have a party R which has</font>

12
00:00:29,029 --> 00:00:33,829
an input<font color="#E5E5E5"> X and we</font><font color="#CCCCCC"> have a party S</font><font color="#E5E5E5"> which</font>

13
00:00:31,550 --> 00:00:36,649
<font color="#E5E5E5">has an input Y and they want to compute</font>

14
00:00:33,829 --> 00:00:38,540
some functionality F and in the end of

15
00:00:36,649 --> 00:00:41,000
the protocol the party r wants to

16
00:00:38,540 --> 00:00:43,700
receive the<font color="#CCCCCC"> output or the</font><font color="#E5E5E5"> evaluation</font><font color="#CCCCCC"> of</font>

17
00:00:41,000 --> 00:00:47,600
the functionality on the<font color="#E5E5E5"> inputs x and y</font>

18
00:00:43,700 --> 00:00:50,180
so<font color="#CCCCCC"> in this talk I</font><font color="#E5E5E5"> in particularly want</font>

19
00:00:47,600 --> 00:00:52,820
to<font color="#CCCCCC"> focus on a special round complexity</font>

20
00:00:50,180 --> 00:00:54,650
<font color="#E5E5E5">which is just two messages there will be</font>

21
00:00:52,820 --> 00:00:58,900
only one<font color="#E5E5E5"> message sent</font><font color="#CCCCCC"> by the receiver</font>

22
00:00:54,650 --> 00:01:01,460
and a second message sent<font color="#CCCCCC"> by the sender</font>

23
00:00:58,900 --> 00:01:04,400
<font color="#E5E5E5">realizing multi-party computation is</font>

24
00:01:01,460 --> 00:01:06,950
easy until we consider security security

25
00:01:04,400 --> 00:01:08,929
really<font color="#E5E5E5"> makes it a</font><font color="#CCCCCC"> non-trivial thing to</font>

26
00:01:06,950 --> 00:01:11,060
construct and what do<font color="#E5E5E5"> we ask for</font>

27
00:01:08,929 --> 00:01:12,770
<font color="#E5E5E5">security</font><font color="#CCCCCC"> we want to have that the</font>

28
00:01:11,060 --> 00:01:15,409
receiver<font color="#E5E5E5"> only learns the very minimum</font>

29
00:01:12,770 --> 00:01:17,990
<font color="#CCCCCC">you should only learn</font><font color="#E5E5E5"> the functionality</font>

30
00:01:15,409 --> 00:01:19,880
evaluated on the input<font color="#CCCCCC"> X and y</font><font color="#E5E5E5"> but you</font>

31
00:01:17,990 --> 00:01:21,439
shouldn't learn<font color="#CCCCCC"> anything beyond that</font><font color="#E5E5E5"> in</font>

32
00:01:19,880 --> 00:01:25,310
particularly<font color="#E5E5E5"> you should not learn</font>

33
00:01:21,439 --> 00:01:28,758
anything about<font color="#CCCCCC"> senders input Y further</font>

34
00:01:25,310 --> 00:01:30,619
for the sender or for the party s it

35
00:01:28,759 --> 00:01:32,780
should learn nothing it should not learn

36
00:01:30,619 --> 00:01:36,709
anything<font color="#E5E5E5"> about the input of the party</font>

37
00:01:32,780 --> 00:01:38,030
<font color="#CCCCCC">are oblivious transfer can be</font><font color="#E5E5E5"> seen as a</font>

38
00:01:36,709 --> 00:01:40,459
special<font color="#E5E5E5"> case of secure multi-party</font>

39
00:01:38,030 --> 00:01:42,530
<font color="#E5E5E5">computation where I have a very very</font>

40
00:01:40,459 --> 00:01:44,689
simple<font color="#E5E5E5"> functionality and this</font>

41
00:01:42,530 --> 00:01:48,560
functionality<font color="#CCCCCC"> just</font><font color="#E5E5E5"> takes as input to</font>

42
00:01:44,689 --> 00:01:50,898
<font color="#E5E5E5">input strengths y0 and y1 and the choice</font>

43
00:01:48,560 --> 00:01:52,999
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> x which selects one of the input</font>

44
00:01:50,899 --> 00:01:56,090
strings and outputs<font color="#E5E5E5"> the selected input</font>

45
00:01:52,999 --> 00:01:58,429
<font color="#E5E5E5">string so in case of oblivious transfer</font>

46
00:01:56,090 --> 00:02:01,490
<font color="#CCCCCC">i would can call this party are the</font>

47
00:01:58,429 --> 00:02:03,409
receiver<font color="#E5E5E5"> and the party as the sender and</font>

48
00:02:01,490 --> 00:02:05,958
<font color="#E5E5E5">the</font><font color="#CCCCCC"> sender will</font><font color="#E5E5E5"> have these two input</font>

49
00:02:03,409 --> 00:02:08,959
strings<font color="#CCCCCC"> this</font><font color="#E5E5E5"> receiver choose</font><font color="#CCCCCC"> ones one of</font>

50
00:02:05,959 --> 00:02:10,759
<font color="#CCCCCC">them and learned said while it doesn't</font>

51
00:02:08,959 --> 00:02:13,490
learn anything<font color="#E5E5E5"> about the</font><font color="#CCCCCC"> other input</font>

52
00:02:10,758 --> 00:02:14,899
<font color="#E5E5E5">string that's required for security as</font>

53
00:02:13,490 --> 00:02:16,760
well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the sender shouldn't learn</font>

54
00:02:14,900 --> 00:02:18,360
<font color="#E5E5E5">anything about the choice bit anything</font>

55
00:02:16,760 --> 00:02:20,310
but you shouldn't learn

56
00:02:18,360 --> 00:02:23,160
which of the<font color="#E5E5E5"> string the receiver has</font>

57
00:02:20,310 --> 00:02:26,370
learned<font color="#E5E5E5"> so this is a very very simple</font>

58
00:02:23,160 --> 00:02:28,350
functionality<font color="#E5E5E5"> that we realize here but</font>

59
00:02:26,370 --> 00:02:30,420
the very interesting fact is<font color="#CCCCCC"> that this</font>

60
00:02:28,350 --> 00:02:32,190
<font color="#E5E5E5">is a fundamental building block of</font>

61
00:02:30,420 --> 00:02:34,980
realizing secure multi-party computation

62
00:02:32,190 --> 00:02:37,829
for any functionality<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that was shown</font>

63
00:02:34,980 --> 00:02:41,310
<font color="#CCCCCC">for example</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> Killian but also by ish I</font>

64
00:02:37,830 --> 00:02:42,930
proper<font color="#CCCCCC"> Karan</font><font color="#E5E5E5"> and Sahai and that's really</font>

65
00:02:41,310 --> 00:02:44,490
amazing<font color="#CCCCCC"> because we want to</font><font color="#E5E5E5"> have</font>

66
00:02:42,930 --> 00:02:46,620
multi-party<font color="#CCCCCC"> competition for much more</font>

67
00:02:44,490 --> 00:02:48,420
complex functionalities but it can

68
00:02:46,620 --> 00:02:52,290
really<font color="#CCCCCC"> focus</font><font color="#E5E5E5"> on the case of oblivious</font>

69
00:02:48,420 --> 00:02:54,269
transfer but<font color="#E5E5E5"> they are still kind of a</font>

70
00:02:52,290 --> 00:02:55,920
drawback<font color="#CCCCCC"> or a bottleneck</font><font color="#E5E5E5"> that we need to</font>

71
00:02:54,270 --> 00:02:57,870
consider and<font color="#E5E5E5"> data sufficiency</font><font color="#CCCCCC"> that</font>

72
00:02:55,920 --> 00:02:59,700
<font color="#CCCCCC">brings me to the next</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> how</font>

73
00:02:57,870 --> 00:03:02,450
efficiently can we realize secure

74
00:02:59,700 --> 00:03:05,429
multi-party computation<font color="#E5E5E5"> when we base</font>

75
00:03:02,450 --> 00:03:08,040
<font color="#E5E5E5">when we use this fundamental by building</font>

76
00:03:05,430 --> 00:03:11,700
block of oblivious transfer and the

77
00:03:08,040 --> 00:03:13,679
first observation<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> make is</font><font color="#CCCCCC"> that</font>

78
00:03:11,700 --> 00:03:15,750
secure computation<font color="#E5E5E5"> typically needs a</font>

79
00:03:13,680 --> 00:03:19,110
large amount of oblivious transfers

80
00:03:15,750 --> 00:03:23,130
usually<font color="#E5E5E5"> or like several thousands and</font>

81
00:03:19,110 --> 00:03:25,170
there's another bottleneck<font color="#E5E5E5"> namely that</font>

82
00:03:23,130 --> 00:03:27,959
oblivious transfer implies key exchange

83
00:03:25,170 --> 00:03:30,660
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that means</font><font color="#E5E5E5"> that it requires public</font>

84
00:03:27,959 --> 00:03:32,850
key operations because key exchange was

85
00:03:30,660 --> 00:03:36,209
separated from<font color="#E5E5E5"> one-way functions by the</font>

86
00:03:32,850 --> 00:03:37,950
result of impact<font color="#CCCCCC"> layer 0 and</font><font color="#E5E5E5"> rudik</font><font color="#CCCCCC"> that</font>

87
00:03:36,209 --> 00:03:39,690
<font color="#CCCCCC">is really one of the obstacles for</font>

88
00:03:37,950 --> 00:03:45,209
<font color="#E5E5E5">realizing secure multi-party computation</font>

89
00:03:39,690 --> 00:03:48,450
and practice but there is a nice<font color="#CCCCCC"> way to</font>

90
00:03:45,209 --> 00:03:51,090
<font color="#CCCCCC">bypass that issue and increase</font><font color="#E5E5E5"> the</font>

91
00:03:48,450 --> 00:03:53,730
efficiency<font color="#E5E5E5"> by a lot by using</font><font color="#CCCCCC"> ot</font>

92
00:03:51,090 --> 00:03:56,040
extension so what is Ooty extension and

93
00:03:53,730 --> 00:03:58,079
what is the goal<font color="#CCCCCC"> of ot extension the</font>

94
00:03:56,040 --> 00:04:01,140
goal is that I start with<font color="#CCCCCC"> a critical</font>

95
00:03:58,080 --> 00:04:03,090
mass of oblivious transfers and extend

96
00:04:01,140 --> 00:04:06,299
it very efficiently to<font color="#CCCCCC"> a much</font><font color="#E5E5E5"> larger</font>

97
00:04:03,090 --> 00:04:08,250
amount for example if you<font color="#E5E5E5"> consider a</font>

98
00:04:06,300 --> 00:04:10,620
security setting where of 80 bits of

99
00:04:08,250 --> 00:04:13,380
<font color="#CCCCCC">security</font><font color="#E5E5E5"> I need</font><font color="#CCCCCC"> to start with around</font>

100
00:04:10,620 --> 00:04:15,720
8000<font color="#E5E5E5"> T's and I need to use public key</font>

101
00:04:13,380 --> 00:04:18,870
operations to<font color="#E5E5E5"> construct these ATO</font><font color="#CCCCCC"> T's</font>

102
00:04:15,720 --> 00:04:20,660
but n starting from these ATO T's<font color="#E5E5E5"> I can</font>

103
00:04:18,870 --> 00:04:24,150
extend them very efficiently<font color="#CCCCCC"> to</font>

104
00:04:20,660 --> 00:04:26,700
<font color="#E5E5E5">thousands of our T's but what do I mean</font>

105
00:04:24,150 --> 00:04:29,219
with efficiently here<font color="#E5E5E5"> obviously I</font><font color="#CCCCCC"> don't</font>

106
00:04:26,700 --> 00:04:30,750
<font color="#E5E5E5">want to use public key operations and I</font>

107
00:04:29,220 --> 00:04:31,650
want to<font color="#E5E5E5"> restrict myself to only</font>

108
00:04:30,750 --> 00:04:35,280
symmetric

109
00:04:31,650 --> 00:04:38,159
operations and this is in<font color="#E5E5E5"> fact also</font>

110
00:04:35,280 --> 00:04:39,599
necessary<font color="#E5E5E5"> because we cannot realize</font><font color="#CCCCCC"> ot</font>

111
00:04:38,160 --> 00:04:41,759
extension in an information

112
00:04:39,600 --> 00:04:44,639
theoretically secure way that was shown

113
00:04:41,759 --> 00:04:46,889
<font color="#E5E5E5">by Weaver</font><font color="#CCCCCC"> and later it</font><font color="#E5E5E5"> was extended by a</font>

114
00:04:44,639 --> 00:04:48,990
<font color="#CCCCCC">Lindell</font><font color="#E5E5E5"> and sarasim showing that</font><font color="#CCCCCC"> ot</font>

115
00:04:46,889 --> 00:04:51,330
extension in fact implies<font color="#CCCCCC"> one way</font>

116
00:04:48,990 --> 00:04:53,250
functions<font color="#E5E5E5"> so one way functions is</font><font color="#CCCCCC"> the</font>

117
00:04:51,330 --> 00:04:55,560
bare<font color="#CCCCCC"> minimum that we need to assume</font><font color="#E5E5E5"> and</font>

118
00:04:53,250 --> 00:04:58,410
there are<font color="#E5E5E5"> basically two</font><font color="#CCCCCC"> kinds of</font>

119
00:04:55,560 --> 00:05:00,180
constructions<font color="#E5E5E5"> for</font><font color="#CCCCCC"> ot extension one uses</font>

120
00:04:58,410 --> 00:05:01,889
a PRG which can be<font color="#E5E5E5"> constructed from</font>

121
00:05:00,180 --> 00:05:03,840
<font color="#CCCCCC">one-way functions</font><font color="#E5E5E5"> and the other</font>

122
00:05:01,889 --> 00:05:06,150
construction uses some special kind<font color="#E5E5E5"> of a</font>

123
00:05:03,840 --> 00:05:09,030
hash<font color="#CCCCCC"> function and in the</font><font color="#E5E5E5"> following two</font>

124
00:05:06,150 --> 00:05:10,770
slides<font color="#E5E5E5"> I want to go into the</font><font color="#CCCCCC"> detail or a</font>

125
00:05:09,030 --> 00:05:13,698
little bit more into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> details of d2</font>

126
00:05:10,770 --> 00:05:18,570
these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> OTA extension constructions</font>

127
00:05:13,699 --> 00:05:22,470
<font color="#E5E5E5">the first one was</font><font color="#CCCCCC"> done by beavers</font><font color="#E5E5E5"> yeah</font>

128
00:05:18,570 --> 00:05:24,210
by beaver and the great if the great

129
00:05:22,470 --> 00:05:26,639
merit<font color="#E5E5E5"> of this construction is that</font><font color="#CCCCCC"> it</font>

130
00:05:24,210 --> 00:05:29,370
only<font color="#CCCCCC"> uses two</font><font color="#E5E5E5"> messages when I start with</font>

131
00:05:26,639 --> 00:05:32,130
a<font color="#E5E5E5"> two message</font><font color="#CCCCCC"> ot so I don't increase the</font>

132
00:05:29,370 --> 00:05:33,860
<font color="#E5E5E5">round complexity and iris preserve it</font>

133
00:05:32,130 --> 00:05:37,110
and<font color="#E5E5E5"> that's really really nice</font>

134
00:05:33,860 --> 00:05:39,150
but it also has a<font color="#E5E5E5"> drawback namely</font><font color="#CCCCCC"> that</font>

135
00:05:37,110 --> 00:05:41,150
it<font color="#CCCCCC"> uses non blackbox techniques and what</font>

136
00:05:39,150 --> 00:05:43,919
do I<font color="#E5E5E5"> mean with non blackbox techniques</font>

137
00:05:41,150 --> 00:05:45,960
with<font color="#CCCCCC"> blackbox</font><font color="#E5E5E5"> access to a cryptographic</font>

138
00:05:43,919 --> 00:05:48,330
functionality I mean that we only look

139
00:05:45,960 --> 00:05:51,030
at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> end and output</font><font color="#E5E5E5"> behavior of the</font>

140
00:05:48,330 --> 00:05:53,639
cryptographic functionality<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font>

141
00:05:51,030 --> 00:05:56,820
in<font color="#CCCCCC"> that picture you can see that that I</font>

142
00:05:53,639 --> 00:05:59,400
treat<font color="#CCCCCC"> Phe as a black box I don't</font><font color="#E5E5E5"> look</font>

143
00:05:56,820 --> 00:06:01,620
how<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Phe operates</font><font color="#E5E5E5"> internally I just</font>

144
00:05:59,400 --> 00:06:04,109
<font color="#CCCCCC">care about the input which is a</font><font color="#E5E5E5"> seat and</font>

145
00:06:01,620 --> 00:06:06,750
the output which is<font color="#E5E5E5"> the PRG evaluated on</font>

146
00:06:04,110 --> 00:06:08,760
the seat<font color="#CCCCCC"> and that is typically the way</font>

147
00:06:06,750 --> 00:06:10,770
we<font color="#CCCCCC"> use cryptography right we just</font><font color="#E5E5E5"> look</font>

148
00:06:08,760 --> 00:06:11,969
at the input<font color="#E5E5E5"> and the output</font><font color="#CCCCCC"> but not at</font>

149
00:06:10,770 --> 00:06:14,490
the code how<font color="#E5E5E5"> their cryptographic</font>

150
00:06:11,970 --> 00:06:15,810
primitive is implemented but

151
00:06:14,490 --> 00:06:17,340
<font color="#E5E5E5">unfortunately</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the beavers</font>

152
00:06:15,810 --> 00:06:19,590
construction that's not the case<font color="#CCCCCC"> I</font>

153
00:06:17,340 --> 00:06:23,159
really<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> look into the code of</font><font color="#CCCCCC"> the</font>

154
00:06:19,590 --> 00:06:25,109
PRG<font color="#CCCCCC"> or better say set on the circuit</font><font color="#E5E5E5"> and</font>

155
00:06:23,159 --> 00:06:27,210
even further I need<font color="#CCCCCC"> to perform</font>

156
00:06:25,110 --> 00:06:29,460
<font color="#E5E5E5">cryptographic operations for every gate</font>

157
00:06:27,210 --> 00:06:31,919
of the PRG circuit<font color="#E5E5E5"> and that's definitely</font>

158
00:06:29,460 --> 00:06:35,659
<font color="#CCCCCC">an efficiency drawback</font><font color="#E5E5E5"> which makes this</font>

159
00:06:31,919 --> 00:06:38,039
<font color="#E5E5E5">ot extension less relevant for practice</font>

160
00:06:35,659 --> 00:06:40,740
<font color="#E5E5E5">but there's an alternative</font><font color="#CCCCCC"> construction</font>

161
00:06:38,039 --> 00:06:42,930
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that was is called the I</font><font color="#CCCCCC"> K and P</font>

162
00:06:40,740 --> 00:06:45,630
construction named after the authors who

163
00:06:42,930 --> 00:06:48,360
<font color="#CCCCCC">are shy Killian ISM and</font>

164
00:06:45,630 --> 00:06:51,900
<font color="#E5E5E5">Petrin and the</font><font color="#CCCCCC"> crate merit of that ot</font>

165
00:06:48,360 --> 00:06:54,240
extension is that<font color="#CCCCCC"> it is black box</font><font color="#E5E5E5"> which</font>

166
00:06:51,900 --> 00:06:56,219
makes it very efficient<font color="#E5E5E5"> and that's also</font>

167
00:06:54,240 --> 00:06:58,320
<font color="#E5E5E5">the</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> why this is the one that</font>

168
00:06:56,220 --> 00:07:01,380
<font color="#E5E5E5">people use to realize to keep York</font>

169
00:06:58,320 --> 00:07:03,810
multi-party computation in practice but

170
00:07:01,380 --> 00:07:05,580
it also has a drawback<font color="#E5E5E5"> an approach</font>

171
00:07:03,810 --> 00:07:08,100
drawback is that it requires<font color="#CCCCCC"> three</font>

172
00:07:05,580 --> 00:07:10,859
<font color="#E5E5E5">messages when I start with a</font><font color="#CCCCCC"> two message</font>

173
00:07:08,100 --> 00:07:12,450
of livius<font color="#CCCCCC"> transfer that's really</font>

174
00:07:10,860 --> 00:07:14,730
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that I wouldn't like</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> have</font>

175
00:07:12,450 --> 00:07:16,590
in particular<font color="#CCCCCC"> we already know no</font><font color="#E5E5E5"> T</font>

176
00:07:14,730 --> 00:07:18,930
extension<font color="#E5E5E5"> that only takes two messages</font>

177
00:07:16,590 --> 00:07:30,359
<font color="#E5E5E5">that brings up a very</font><font color="#CCCCCC"> natural question</font>

178
00:07:18,930 --> 00:07:34,020
of<font color="#E5E5E5"> yeah that brings</font><font color="#CCCCCC"> up the very natural</font>

179
00:07:30,360 --> 00:07:37,650
<font color="#E5E5E5">questions of can we get</font><font color="#CCCCCC"> to message black</font>

180
00:07:34,020 --> 00:07:39,560
box<font color="#E5E5E5"> ot extension</font><font color="#CCCCCC"> and that's the thing</font>

181
00:07:37,650 --> 00:07:42,150
<font color="#CCCCCC">that we really try to solve and we</font>

182
00:07:39,560 --> 00:07:45,210
<font color="#CCCCCC">somehow</font><font color="#E5E5E5"> didn't manage</font><font color="#CCCCCC"> to solve it</font><font color="#E5E5E5"> and</font>

183
00:07:42,150 --> 00:07:46,710
then<font color="#CCCCCC"> Mohammed Mahmud II was visiting and</font>

184
00:07:45,210 --> 00:07:49,440
then it was a natural<font color="#E5E5E5"> question is</font><font color="#CCCCCC"> that</font>

185
00:07:46,710 --> 00:07:53,310
<font color="#E5E5E5">even possible</font><font color="#CCCCCC"> and it turned out yeah</font>

186
00:07:49,440 --> 00:07:55,560
unfortunately<font color="#E5E5E5"> is not possible and we</font>

187
00:07:53,310 --> 00:07:58,110
were able<font color="#E5E5E5"> in fact to prove a very strong</font>

188
00:07:55,560 --> 00:08:00,270
impossibility result and this is our

189
00:07:58,110 --> 00:08:02,220
<font color="#E5E5E5">main result in the paper theorem</font><font color="#CCCCCC"> one</font>

190
00:08:00,270 --> 00:08:05,400
which stays there is no secure to

191
00:08:02,220 --> 00:08:07,830
message black box or<font color="#E5E5E5"> T extension</font><font color="#CCCCCC"> even if</font>

192
00:08:05,400 --> 00:08:10,799
I start<font color="#E5E5E5"> with an arbitrary</font><font color="#CCCCCC"> amount of base</font>

193
00:08:07,830 --> 00:08:12,539
<font color="#E5E5E5">or T's and I even</font><font color="#CCCCCC"> if I just want</font><font color="#E5E5E5"> to</font>

194
00:08:10,800 --> 00:08:16,140
increase the amount<font color="#CCCCCC"> of our T's by a</font>

195
00:08:12,540 --> 00:08:17,970
single one<font color="#E5E5E5"> and that theorem might sound</font>

196
00:08:16,140 --> 00:08:19,800
really<font color="#E5E5E5"> surprising to you because how</font>

197
00:08:17,970 --> 00:08:21,660
would<font color="#E5E5E5"> you potentially prove such a</font>

198
00:08:19,800 --> 00:08:23,490
<font color="#E5E5E5">result because we</font><font color="#CCCCCC"> have all these</font>

199
00:08:21,660 --> 00:08:26,250
<font color="#E5E5E5">constraints that we only want to look at</font>

200
00:08:23,490 --> 00:08:28,200
<font color="#CCCCCC">round preserving or to message or</font><font color="#E5E5E5"> T</font>

201
00:08:26,250 --> 00:08:30,900
extensions<font color="#E5E5E5"> we also want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have black</font>

202
00:08:28,200 --> 00:08:33,539
box constructions we have some base or

203
00:08:30,900 --> 00:08:35,659
T's that we need to consider<font color="#E5E5E5"> but at the</font>

204
00:08:33,539 --> 00:08:38,010
same time<font color="#E5E5E5"> we only want to allow</font>

205
00:08:35,659 --> 00:08:40,049
<font color="#E5E5E5">additionally to the</font><font color="#CCCCCC"> base or T's only</font>

206
00:08:38,010 --> 00:08:42,929
symmetric key operations to make<font color="#E5E5E5"> the</font>

207
00:08:40,049 --> 00:08:45,569
whole thing efficiently so before even

208
00:08:42,929 --> 00:08:47,370
trying to prove such a result<font color="#E5E5E5"> we need to</font>

209
00:08:45,570 --> 00:08:50,160
come a model<font color="#CCCCCC"> that captures all of these</font>

210
00:08:47,370 --> 00:08:51,780
constraints<font color="#CCCCCC"> and in the following slides</font>

211
00:08:50,160 --> 00:08:54,270
I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> go a little bit</font><font color="#CCCCCC"> more into</font><font color="#E5E5E5"> the</font>

212
00:08:51,780 --> 00:08:56,730
<font color="#CCCCCC">details how this model</font><font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like so we</font>

213
00:08:54,270 --> 00:08:58,530
have for<font color="#CCCCCC"> our model we need to consider</font>

214
00:08:56,730 --> 00:08:59,959
the following<font color="#E5E5E5"> or need we need to</font><font color="#CCCCCC"> capture</font>

215
00:08:58,530 --> 00:09:02,850
the following constraint

216
00:08:59,959 --> 00:09:05,459
the first constraint<font color="#CCCCCC"> is that we want to</font>

217
00:09:02,850 --> 00:09:07,649
allow only<font color="#E5E5E5"> black box access to symmetric</font>

218
00:09:05,459 --> 00:09:10,290
operations because we want to<font color="#E5E5E5"> have an</font>

219
00:09:07,649 --> 00:09:12,209
efficient<font color="#CCCCCC"> ot extension scheme</font><font color="#E5E5E5"> the same</font>

220
00:09:10,290 --> 00:09:15,209
time we want to<font color="#E5E5E5"> allow only black box</font>

221
00:09:12,209 --> 00:09:20,040
access and we also don't<font color="#E5E5E5"> want to allow</font>

222
00:09:15,209 --> 00:09:21,719
any public key operations but of course

223
00:09:20,040 --> 00:09:23,430
I need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> allow some public key</font>

224
00:09:21,720 --> 00:09:25,800
operations because I need<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> with</font>

225
00:09:23,430 --> 00:09:27,899
<font color="#E5E5E5">this critical</font><font color="#CCCCCC"> amount of beso T's in</font>

226
00:09:25,800 --> 00:09:29,790
order to extend them<font color="#E5E5E5"> so I also need to</font>

227
00:09:27,899 --> 00:09:33,810
<font color="#CCCCCC">allow</font><font color="#E5E5E5"> black box access to a certain</font>

228
00:09:29,790 --> 00:09:36,000
<font color="#E5E5E5">amount of</font><font color="#CCCCCC"> HO T's</font><font color="#E5E5E5"> and further I also want</font>

229
00:09:33,810 --> 00:09:41,189
to consider the<font color="#E5E5E5"> round complexity I only</font>

230
00:09:36,000 --> 00:09:44,070
want to allow two messages so how do I

231
00:09:41,190 --> 00:09:46,079
capture these constraints the next three

232
00:09:44,070 --> 00:09:47,670
slides I<font color="#E5E5E5"> will go through</font><font color="#CCCCCC"> all of these</font>

233
00:09:46,079 --> 00:09:49,979
three points<font color="#E5E5E5"> starting with the first</font>

234
00:09:47,670 --> 00:09:53,849
<font color="#E5E5E5">point we</font><font color="#CCCCCC"> only want to allow black box</font>

235
00:09:49,980 --> 00:09:55,649
access to symmetric cryptography<font color="#E5E5E5"> in a</font>

236
00:09:53,850 --> 00:09:58,370
straightforward way<font color="#CCCCCC"> of doing that is</font>

237
00:09:55,649 --> 00:10:01,740
<font color="#E5E5E5">giving access to</font><font color="#CCCCCC"> a random Oracle</font><font color="#E5E5E5"> and</font>

238
00:09:58,370 --> 00:10:06,060
assuming an unbounded adversary innocent

239
00:10:01,740 --> 00:10:07,589
in terms of time<font color="#E5E5E5"> but we want to restrict</font>

240
00:10:06,060 --> 00:10:09,869
the amount<font color="#E5E5E5"> of queries that that</font>

241
00:10:07,589 --> 00:10:13,170
adversary can make to the random Oracle

242
00:10:09,870 --> 00:10:15,089
so what is a random<font color="#E5E5E5"> Oracle random Oracle</font>

243
00:10:13,170 --> 00:10:17,550
is<font color="#E5E5E5"> functionality that every party can</font>

244
00:10:15,089 --> 00:10:20,010
query<font color="#E5E5E5"> and some input queue and the</font>

245
00:10:17,550 --> 00:10:21,870
random Oracle will return a uniform

246
00:10:20,010 --> 00:10:25,950
unique string that<font color="#CCCCCC"> is consistent</font><font color="#E5E5E5"> for all</font>

247
00:10:21,870 --> 00:10:28,680
parties<font color="#E5E5E5"> H</font><font color="#CCCCCC"> of Q and it is well known that</font>

248
00:10:25,950 --> 00:10:30,390
this<font color="#E5E5E5"> random Oracle implies symmetric</font>

249
00:10:28,680 --> 00:10:32,310
cryptography because<font color="#E5E5E5"> it can be seen as</font>

250
00:10:30,390 --> 00:10:34,949
an ideal version<font color="#CCCCCC"> of that</font><font color="#E5E5E5"> one-way</font>

251
00:10:32,310 --> 00:10:36,689
function<font color="#CCCCCC"> or hash function but this of</font>

252
00:10:34,950 --> 00:10:39,180
course is<font color="#CCCCCC"> only the case if I restrict</font>

253
00:10:36,690 --> 00:10:42,540
the adversary<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> only a polynomial</font>

254
00:10:39,180 --> 00:10:44,609
amount<font color="#E5E5E5"> of</font><font color="#CCCCCC"> krei very</font><font color="#E5E5E5"> easily</font><font color="#CCCCCC"> but in</font>

255
00:10:42,540 --> 00:10:46,589
<font color="#E5E5E5">general we really want to have an</font>

256
00:10:44,610 --> 00:10:49,500
unbounded<font color="#CCCCCC"> adversary in order to prank</font>

257
00:10:46,589 --> 00:10:52,100
all public key operations<font color="#E5E5E5"> that one might</font>

258
00:10:49,500 --> 00:10:54,870
use<font color="#CCCCCC"> to</font><font color="#E5E5E5"> construct an OT extension scheme</font>

259
00:10:52,100 --> 00:10:56,970
but<font color="#E5E5E5"> as I</font><font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> earlier we need to</font>

260
00:10:54,870 --> 00:10:59,910
allow a critical mass of oblivious

261
00:10:56,970 --> 00:11:02,880
transfers and that brings us to the

262
00:10:59,910 --> 00:11:08,430
second point<font color="#E5E5E5"> so how would I incorporate</font>

263
00:11:02,880 --> 00:11:11,040
these<font color="#CCCCCC"> disparities the idea is to use a</font>

264
00:11:08,430 --> 00:11:14,219
simple<font color="#E5E5E5"> similar approach I will model</font>

265
00:11:11,040 --> 00:11:17,020
these<font color="#E5E5E5"> basil T's as an ideal functional</font>

266
00:11:14,220 --> 00:11:19,690
now allow<font color="#E5E5E5"> the sender and</font><font color="#CCCCCC"> the receiver</font>

267
00:11:17,020 --> 00:11:21,460
to<font color="#E5E5E5"> send their inputs to these this ideal</font>

268
00:11:19,690 --> 00:11:24,040
functionality which could be seen as a

269
00:11:21,460 --> 00:11:26,740
trusted<font color="#CCCCCC"> third party in this trusted</font>

270
00:11:24,040 --> 00:11:28,839
third party or the<font color="#CCCCCC"> ideality would simply</font>

271
00:11:26,740 --> 00:11:32,830
output the output of the oblivious

272
00:11:28,840 --> 00:11:34,840
transfer to the receiver<font color="#E5E5E5"> and again this</font>

273
00:11:32,830 --> 00:11:36,490
<font color="#E5E5E5">only allows black box access because</font><font color="#CCCCCC"> we</font>

274
00:11:34,840 --> 00:11:37,840
<font color="#E5E5E5">here we only look at the</font><font color="#CCCCCC"> in and output</font>

275
00:11:36,490 --> 00:11:43,120
<font color="#CCCCCC">behavior there is</font><font color="#E5E5E5"> no code</font><font color="#CCCCCC"> of</font>

276
00:11:37,840 --> 00:11:45,720
implementation but<font color="#E5E5E5"> now to the</font><font color="#CCCCCC"> Third</font>

277
00:11:43,120 --> 00:11:47,650
<font color="#CCCCCC">Point that's</font><font color="#E5E5E5"> maybe the least</font>

278
00:11:45,720 --> 00:11:49,510
<font color="#E5E5E5">straightforward because how can we</font>

279
00:11:47,650 --> 00:11:50,920
ensure that<font color="#E5E5E5"> we you can</font><font color="#CCCCCC"> only make two</font>

280
00:11:49,510 --> 00:11:53,590
messages<font color="#E5E5E5"> that</font><font color="#CCCCCC"> there will be only one</font>

281
00:11:50,920 --> 00:11:57,339
message sent by<font color="#E5E5E5"> the receiver and another</font>

282
00:11:53,590 --> 00:12:00,220
<font color="#E5E5E5">message sent by the sender and</font><font color="#CCCCCC"> the way</font>

283
00:11:57,340 --> 00:12:03,910
how we deal that is that we enforce that

284
00:12:00,220 --> 00:12:06,280
the output of the<font color="#CCCCCC"> IDL</font><font color="#E5E5E5"> ot is sent after</font>

285
00:12:03,910 --> 00:12:09,550
<font color="#E5E5E5">all the transcript is completed and</font>

286
00:12:06,280 --> 00:12:12,430
after the receiver has<font color="#CCCCCC"> our</font><font color="#E5E5E5"> the sender</font>

287
00:12:09,550 --> 00:12:14,020
<font color="#CCCCCC">has sent the last</font><font color="#E5E5E5"> message what do I mean</font>

288
00:12:12,430 --> 00:12:14,650
with<font color="#E5E5E5"> that let me be a little</font><font color="#CCCCCC"> bit more</font>

289
00:12:14,020 --> 00:12:17,770
explicit

290
00:12:14,650 --> 00:12:18,910
<font color="#E5E5E5">I'll just with a picture so we have a</font>

291
00:12:17,770 --> 00:12:22,090
sender<font color="#CCCCCC"> and a receiver</font>

292
00:12:18,910 --> 00:12:25,660
both submit their inputs to the ideal<font color="#CCCCCC"> ot</font>

293
00:12:22,090 --> 00:12:28,810
functionality<font color="#E5E5E5"> then they are allowed to</font>

294
00:12:25,660 --> 00:12:31,000
<font color="#E5E5E5">have some interaction</font><font color="#CCCCCC"> and in the very</font>

295
00:12:28,810 --> 00:12:33,880
<font color="#E5E5E5">end after the interaction</font><font color="#CCCCCC"> is done the</font>

296
00:12:31,000 --> 00:12:37,120
<font color="#CCCCCC">ideality</font><font color="#E5E5E5"> will submit</font><font color="#CCCCCC"> its in output to</font>

297
00:12:33,880 --> 00:12:39,670
the receiver that<font color="#CCCCCC"> really ensures that we</font>

298
00:12:37,120 --> 00:12:42,460
<font color="#CCCCCC">preserve the round complexity because we</font>

299
00:12:39,670 --> 00:12:44,740
can run the transcript in parallel to

300
00:12:42,460 --> 00:12:47,350
the interaction<font color="#E5E5E5"> that is required when</font>

301
00:12:44,740 --> 00:12:51,310
implementing the<font color="#E5E5E5"> IDL</font><font color="#CCCCCC"> ot</font><font color="#E5E5E5"> in particularly</font>

302
00:12:47,350 --> 00:12:54,090
<font color="#E5E5E5">we don't need to wait until the</font><font color="#CCCCCC"> ideality</font>

303
00:12:51,310 --> 00:12:57,250
<font color="#CCCCCC">has finished it</font><font color="#E5E5E5"> or finished</font><font color="#CCCCCC"> or sent a</font>

304
00:12:54,090 --> 00:12:58,900
output in order to<font color="#E5E5E5"> compute some of the</font>

305
00:12:57,250 --> 00:13:02,080
messages and<font color="#CCCCCC"> that really captures what</font>

306
00:12:58,900 --> 00:13:05,140
<font color="#CCCCCC">we want to have when we</font><font color="#E5E5E5"> say when we want</font>

307
00:13:02,080 --> 00:13:10,060
to have<font color="#E5E5E5"> to message</font><font color="#CCCCCC"> or T extension or</font>

308
00:13:05,140 --> 00:13:11,800
<font color="#E5E5E5">around preserving or</font><font color="#CCCCCC"> - extension so this</font>

309
00:13:10,060 --> 00:13:14,589
is an<font color="#E5E5E5"> overview over our model and now we</font>

310
00:13:11,800 --> 00:13:18,750
can<font color="#CCCCCC"> think of how could we potentially</font>

311
00:13:14,590 --> 00:13:23,200
<font color="#E5E5E5">yeah proof prove it using</font><font color="#CCCCCC"> that model and</font>

312
00:13:18,750 --> 00:13:25,990
in our paper we basically do two steps

313
00:13:23,200 --> 00:13:27,220
the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> step is an information</font>

314
00:13:25,990 --> 00:13:30,250
theoretic attack

315
00:13:27,220 --> 00:13:32,710
when we don't consider any random<font color="#CCCCCC"> Oracle</font>

316
00:13:30,250 --> 00:13:36,040
<font color="#E5E5E5">so we will only have access to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ideal</font>

317
00:13:32,710 --> 00:13:39,490
<font color="#CCCCCC">ot but we don't consider a</font><font color="#E5E5E5"> random Oracle</font>

318
00:13:36,040 --> 00:13:41,949
for simplicity<font color="#E5E5E5"> and that will really help</font>

319
00:13:39,490 --> 00:13:43,420
us<font color="#CCCCCC"> to get kept this information</font>

320
00:13:41,950 --> 00:13:46,240
theoretic attack in a very simple<font color="#CCCCCC"> way</font>

321
00:13:43,420 --> 00:13:48,760
<font color="#CCCCCC">and that on its own</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> not an</font>

322
00:13:46,240 --> 00:13:50,470
<font color="#E5E5E5">interesting novel thing because it has</font>

323
00:13:48,760 --> 00:13:52,480
<font color="#E5E5E5">been known</font><font color="#CCCCCC"> previously that we cannot</font>

324
00:13:50,470 --> 00:13:55,660
have an information theoretically<font color="#E5E5E5"> secure</font>

325
00:13:52,480 --> 00:13:59,290
<font color="#E5E5E5">ot extension and further we also know</font>

326
00:13:55,660 --> 00:14:02,230
that ot extension at least implies<font color="#CCCCCC"> R</font><font color="#E5E5E5"> on</font>

327
00:13:59,290 --> 00:14:05,199
wave functions but the<font color="#E5E5E5"> merit of this</font>

328
00:14:02,230 --> 00:14:09,280
attack<font color="#E5E5E5"> is really that we can</font><font color="#CCCCCC"> easily</font>

329
00:14:05,200 --> 00:14:12,040
extend<font color="#E5E5E5"> it to the random Oracle model and</font>

330
00:14:09,280 --> 00:14:14,230
that's the reason why this attack is so

331
00:14:12,040 --> 00:14:16,120
nice and it's because it's<font color="#E5E5E5"> like also</font>

332
00:14:14,230 --> 00:14:18,880
really tailored to the specific<font color="#CCCCCC"> case of</font>

333
00:14:16,120 --> 00:14:20,920
<font color="#E5E5E5">of</font><font color="#CCCCCC"> livius transfer and in the following</font>

334
00:14:18,880 --> 00:14:26,140
slide<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> give you an overview how</font>

335
00:14:20,920 --> 00:14:28,510
this attack looks like in the attack<font color="#E5E5E5"> I</font>

336
00:14:26,140 --> 00:14:30,580
will in particularly assume that the

337
00:14:28,510 --> 00:14:32,650
receivers input is picked uniformly at

338
00:14:30,580 --> 00:14:35,590
random<font color="#CCCCCC"> which is the</font><font color="#E5E5E5"> input string beep</font>

339
00:14:32,650 --> 00:14:37,569
<font color="#E5E5E5">and there is also this string D which</font>

340
00:14:35,590 --> 00:14:43,420
serves as<font color="#CCCCCC"> the input</font><font color="#E5E5E5"> to the ideal</font>

341
00:14:37,570 --> 00:14:45,550
functionality so the<font color="#E5E5E5"> sender and</font><font color="#CCCCCC"> the</font>

342
00:14:43,420 --> 00:14:49,510
receiver they both submit their inputs

343
00:14:45,550 --> 00:14:51,339
to the ideality functionality they have

344
00:14:49,510 --> 00:14:53,950
some interaction<font color="#E5E5E5"> and after the</font>

345
00:14:51,340 --> 00:14:55,810
<font color="#CCCCCC">interaction is done the receiver will</font>

346
00:14:53,950 --> 00:15:00,370
receive the<font color="#CCCCCC"> output of the ideality</font>

347
00:14:55,810 --> 00:15:02,859
functionality so now how does this

348
00:15:00,370 --> 00:15:05,830
<font color="#CCCCCC">attack looks like I will use an entropy</font>

349
00:15:02,860 --> 00:15:08,170
argument<font color="#E5E5E5"> over</font><font color="#CCCCCC"> the input of the receiver</font>

350
00:15:05,830 --> 00:15:16,089
which<font color="#CCCCCC"> is this uniform string</font><font color="#E5E5E5"> beat which</font>

351
00:15:08,170 --> 00:15:21,520
has n<font color="#CCCCCC"> plus 1 bits of entropy</font><font color="#E5E5E5"> so first as</font>

352
00:15:16,089 --> 00:15:23,110
<font color="#CCCCCC">a</font><font color="#E5E5E5"> first idea</font><font color="#CCCCCC"> I will</font><font color="#E5E5E5"> look at look whether</font>

353
00:15:21,520 --> 00:15:26,140
the transcript is correlated<font color="#CCCCCC"> with that</font>

354
00:15:23,110 --> 00:15:29,830
<font color="#E5E5E5">input so I look at</font><font color="#CCCCCC"> B conditioned on the</font>

355
00:15:26,140 --> 00:15:31,600
<font color="#E5E5E5">transcript and if I lose some entropy</font>

356
00:15:29,830 --> 00:15:34,330
when<font color="#CCCCCC"> I</font><font color="#E5E5E5"> condition on the transcript</font><font color="#CCCCCC"> that</font>

357
00:15:31,600 --> 00:15:36,280
<font color="#CCCCCC">would be a bad thing</font><font color="#E5E5E5"> it would be a bad</font>

358
00:15:34,330 --> 00:15:38,589
thing<font color="#CCCCCC"> we could because that would mean</font>

359
00:15:36,280 --> 00:15:40,660
<font color="#CCCCCC">that there is some information</font><font color="#E5E5E5"> contained</font>

360
00:15:38,589 --> 00:15:41,140
<font color="#E5E5E5">in the transcript about the receivers</font>

361
00:15:40,660 --> 00:15:44,110
<font color="#E5E5E5">end</font>

362
00:15:41,140 --> 00:15:46,120
and of course an unbounded<font color="#CCCCCC"> serve</font><font color="#E5E5E5"> stander</font>

363
00:15:44,110 --> 00:15:47,740
could exploit that<font color="#E5E5E5"> and learn</font><font color="#CCCCCC"> to parse</font>

364
00:15:46,120 --> 00:15:49,540
<font color="#CCCCCC">impartial information</font><font color="#E5E5E5"> about the</font>

365
00:15:47,740 --> 00:15:51,430
receivers input<font color="#CCCCCC"> that would definitely</font>

366
00:15:49,540 --> 00:15:53,380
<font color="#E5E5E5">constitute an attack against the</font>

367
00:15:51,430 --> 00:15:55,060
security<font color="#CCCCCC"> of an</font><font color="#E5E5E5"> o-type extension scheme</font>

368
00:15:53,380 --> 00:15:58,660
because the sender<font color="#CCCCCC"> should not learn</font>

369
00:15:55,060 --> 00:16:00,069
<font color="#E5E5E5">anything about the receivers input so</font>

370
00:15:58,660 --> 00:16:02,579
let's assume that this<font color="#CCCCCC"> is not the case</font>

371
00:16:00,070 --> 00:16:05,980
that<font color="#E5E5E5"> there is no attack by the sender</font>

372
00:16:02,579 --> 00:16:08,019
<font color="#CCCCCC">that means that they ain't the receivers</font>

373
00:16:05,980 --> 00:16:11,950
input conditioned on<font color="#E5E5E5"> the transcript as</font>

374
00:16:08,019 --> 00:16:14,800
still<font color="#E5E5E5"> full entropy but what does that</font>

375
00:16:11,950 --> 00:16:17,709
mean<font color="#E5E5E5"> that allows me</font><font color="#CCCCCC"> to also</font><font color="#E5E5E5"> condition on</font>

376
00:16:14,800 --> 00:16:20,319
<font color="#E5E5E5">the input to their ideal</font><font color="#CCCCCC"> IOT</font>

377
00:16:17,709 --> 00:16:22,300
functionality<font color="#E5E5E5"> D which has just n bits</font><font color="#CCCCCC"> at</font>

378
00:16:20,320 --> 00:16:24,640
maximum<font color="#CCCCCC"> and bits of entropy because</font><font color="#E5E5E5"> it's</font>

379
00:16:22,300 --> 00:16:28,019
an N bit strength so that<font color="#E5E5E5"> means there's</font>

380
00:16:24,640 --> 00:16:30,730
at least one bit<font color="#CCCCCC"> of entropy left and</font>

381
00:16:28,019 --> 00:16:33,220
that actually leads<font color="#CCCCCC"> to an attack by</font><font color="#E5E5E5"> the</font>

382
00:16:30,730 --> 00:16:36,820
receiver<font color="#E5E5E5"> and that's also yeah</font><font color="#CCCCCC"> a bad</font>

383
00:16:33,220 --> 00:16:38,980
<font color="#E5E5E5">thing but why is this the</font><font color="#CCCCCC"> case if you</font>

384
00:16:36,820 --> 00:16:40,810
<font color="#E5E5E5">look at the receiver</font><font color="#CCCCCC"> if the receiver has</font>

385
00:16:38,980 --> 00:16:43,510
still some entropy left in its input

386
00:16:40,810 --> 00:16:45,760
even conditioned on<font color="#CCCCCC"> the in and outputs</font>

387
00:16:43,510 --> 00:16:47,709
to<font color="#E5E5E5"> their ideal</font><font color="#CCCCCC"> ot functionality and even</font>

388
00:16:45,760 --> 00:16:49,300
conditioned on<font color="#CCCCCC"> the transcript that means</font>

389
00:16:47,709 --> 00:16:54,069
that there<font color="#CCCCCC"> are multiple inputs for which</font>

390
00:16:49,300 --> 00:16:55,959
<font color="#E5E5E5">the receiver can can execute</font><font color="#CCCCCC"> its code</font>

391
00:16:54,070 --> 00:16:59,529
right while using the same transcript

392
00:16:55,959 --> 00:17:01,180
and in an output of<font color="#E5E5E5"> the ideal ot so</font>

393
00:16:59,529 --> 00:17:06,160
there are at least two inputs for which

394
00:17:01,180 --> 00:17:09,099
he can compute its output<font color="#E5E5E5"> the outputs of</font>

395
00:17:06,160 --> 00:17:10,870
<font color="#E5E5E5">the</font><font color="#CCCCCC"> n plus one</font><font color="#E5E5E5"> Ortiz that means there's</font>

396
00:17:09,099 --> 00:17:12,790
at least one bit position<font color="#CCCCCC"> where these</font>

397
00:17:10,869 --> 00:17:14,589
two inputs don't match where the

398
00:17:12,790 --> 00:17:16,918
receiver can learn both of the input

399
00:17:14,589 --> 00:17:16,918
strings

400
00:17:17,369 --> 00:17:22,869
therefore in therefore if we have the<font color="#CCCCCC"> B</font>

401
00:17:21,579 --> 00:17:23,589
<font color="#CCCCCC">condition</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the transcript</font><font color="#E5E5E5"> as</font>

402
00:17:22,869 --> 00:17:26,678
<font color="#CCCCCC">philantropy</font>

403
00:17:23,589 --> 00:17:30,100
the sender will<font color="#CCCCCC"> able at the receiver</font>

404
00:17:26,679 --> 00:17:31,660
will able<font color="#E5E5E5"> to be attack to attack the</font>

405
00:17:30,100 --> 00:17:35,860
sender security by<font color="#CCCCCC"> learning multiple</font>

406
00:17:31,660 --> 00:17:38,830
<font color="#E5E5E5">inputs which is also a bad thing but now</font>

407
00:17:35,860 --> 00:17:41,110
how can<font color="#E5E5E5"> we extend that to random Oracle</font>

408
00:17:38,830 --> 00:17:45,490
model<font color="#E5E5E5"> and the issue with the random</font>

409
00:17:41,110 --> 00:17:47,350
<font color="#E5E5E5">Oracle</font><font color="#CCCCCC"> model is that the</font><font color="#E5E5E5"> entropy</font>

410
00:17:45,490 --> 00:17:49,210
argument fails because<font color="#E5E5E5"> we cannot only</font>

411
00:17:47,350 --> 00:17:51,639
<font color="#CCCCCC">look at the transcript anymore because</font>

412
00:17:49,210 --> 00:17:53,919
the random Oracle it creates additional

413
00:17:51,640 --> 00:17:54,669
correlations between the senders and the

414
00:17:53,919 --> 00:17:58,169
receivers

415
00:17:54,669 --> 00:18:00,879
you so far we<font color="#E5E5E5"> could use an</font><font color="#CCCCCC"> argument</font>

416
00:17:58,169 --> 00:18:02,799
saying<font color="#E5E5E5"> that if we condition the view on</font>

417
00:18:00,879 --> 00:18:04,480
end of the sender<font color="#CCCCCC"> and the receiver and</font>

418
00:18:02,799 --> 00:18:06,340
the<font color="#E5E5E5"> transcript</font><font color="#CCCCCC"> they're independent but</font>

419
00:18:04,480 --> 00:18:08,259
<font color="#CCCCCC">that's not the case anymore as soon as I</font>

420
00:18:06,340 --> 00:18:10,330
consider a random<font color="#CCCCCC"> Oracle</font><font color="#E5E5E5"> because they</font>

421
00:18:08,259 --> 00:18:12,820
can query some functionality<font color="#E5E5E5"> which gives</font>

422
00:18:10,330 --> 00:18:15,428
them<font color="#E5E5E5"> some common entropy and we really</font>

423
00:18:12,820 --> 00:18:18,039
need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> incorporate that fact the way</font>

424
00:18:15,429 --> 00:18:19,989
you typically deal with that is using

425
00:18:18,039 --> 00:18:23,200
<font color="#CCCCCC">blackbox separation techniques which</font>

426
00:18:19,989 --> 00:18:25,059
have also<font color="#E5E5E5"> been used previously</font><font color="#CCCCCC"> and it's</font>

427
00:18:23,200 --> 00:18:28,090
really a nice way<font color="#E5E5E5"> in a straightforward</font>

428
00:18:25,059 --> 00:18:30,700
way of handle these<font color="#E5E5E5"> correlations but in</font>

429
00:18:28,090 --> 00:18:34,238
<font color="#E5E5E5">our setting this unfortunately it does</font>

430
00:18:30,700 --> 00:18:37,210
not<font color="#CCCCCC"> work because</font><font color="#E5E5E5"> we also have</font><font color="#CCCCCC"> access</font><font color="#E5E5E5"> to</font>

431
00:18:34,239 --> 00:18:38,830
this<font color="#CCCCCC"> ideal ot functionality which allows</font>

432
00:18:37,210 --> 00:18:41,649
us to<font color="#CCCCCC"> do our betrayal public key</font>

433
00:18:38,830 --> 00:18:43,989
operations we could run<font color="#CCCCCC"> some multi-party</font>

434
00:18:41,649 --> 00:18:46,359
computation for arbitrary functions and

435
00:18:43,989 --> 00:18:49,269
we could also run<font color="#CCCCCC"> some key exchange</font>

436
00:18:46,359 --> 00:18:53,139
which also<font color="#E5E5E5"> creates some some hidden</font>

437
00:18:49,269 --> 00:18:55,899
entropy and for that<font color="#E5E5E5"> the sender and the</font>

438
00:18:53,139 --> 00:18:57,998
receiver share<font color="#E5E5E5"> so this is really an</font>

439
00:18:55,899 --> 00:18:59,830
<font color="#CCCCCC">obstacle and</font><font color="#E5E5E5"> that's also one of the main</font>

440
00:18:57,999 --> 00:19:04,059
challenges<font color="#E5E5E5"> that we are solving in our</font>

441
00:18:59,830 --> 00:19:06,908
paper we<font color="#CCCCCC"> don't need to only yeah we can</font>

442
00:19:04,059 --> 00:19:08,200
<font color="#CCCCCC">easily deal with the idea latias</font><font color="#E5E5E5"> I have</font>

443
00:19:06,909 --> 00:19:12,100
shown in the previous<font color="#E5E5E5"> information</font>

444
00:19:08,200 --> 00:19:14,710
<font color="#CCCCCC">theoretic attack and it's also easy to</font>

445
00:19:12,100 --> 00:19:16,330
<font color="#E5E5E5">deal just with</font><font color="#CCCCCC"> a random Oracle</font><font color="#E5E5E5"> because</font>

446
00:19:14,710 --> 00:19:20,080
that's basically<font color="#E5E5E5"> the result of impact</font>

447
00:19:16,330 --> 00:19:22,749
<font color="#CCCCCC">layers you're neurotic that that ot is</font>

448
00:19:20,080 --> 00:19:24,428
separated from<font color="#CCCCCC"> one-way functions</font><font color="#E5E5E5"> but the</font>

449
00:19:22,749 --> 00:19:27,190
challenge is really<font color="#CCCCCC"> to bring</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> of</font>

450
00:19:24,429 --> 00:19:28,809
these ideal primitives together<font color="#E5E5E5"> and here</font>

451
00:19:27,190 --> 00:19:31,330
we really<font color="#E5E5E5"> need to exploit that we want</font>

452
00:19:28,809 --> 00:19:33,820
to<font color="#CCCCCC"> preserve</font><font color="#E5E5E5"> the round complexity and as</font>

453
00:19:31,330 --> 00:19:35,499
I have shown<font color="#CCCCCC"> you previously the way we</font>

454
00:19:33,820 --> 00:19:37,720
deal with<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> that we submit the</font>

455
00:19:35,499 --> 00:19:40,149
output of the ideal<font color="#CCCCCC"> ot in the very end</font>

456
00:19:37,720 --> 00:19:42,249
after transcript is finished to the

457
00:19:40,149 --> 00:19:44,649
receiver<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that allows us to use these</font>

458
00:19:42,249 --> 00:19:47,259
<font color="#E5E5E5">blackbox separation techniques before</font>

459
00:19:44,649 --> 00:19:48,939
<font color="#CCCCCC">this output</font><font color="#E5E5E5"> is being submit because</font>

460
00:19:47,259 --> 00:19:51,460
before this output being submit the

461
00:19:48,940 --> 00:19:53,139
ideal<font color="#CCCCCC"> ot is actually not present it</font>

462
00:19:51,460 --> 00:19:54,309
doesn't have any<font color="#E5E5E5"> impact</font><font color="#CCCCCC"> on the</font>

463
00:19:53,139 --> 00:19:55,988
interaction of the sender<font color="#CCCCCC"> and the</font>

464
00:19:54,309 --> 00:19:58,029
receiver<font color="#CCCCCC"> now it's really</font><font color="#E5E5E5"> one of the key</font>

465
00:19:55,989 --> 00:20:00,429
<font color="#CCCCCC">ideas I won't go into the technical</font>

466
00:19:58,029 --> 00:20:02,169
<font color="#CCCCCC">details here but I would</font><font color="#E5E5E5"> like to refer</font>

467
00:20:00,429 --> 00:20:04,629
you<font color="#CCCCCC"> for that to the</font><font color="#E5E5E5"> paper and I'm also</font>

468
00:20:02,169 --> 00:20:07,139
happy to to discuss that with you if you

469
00:20:04,629 --> 00:20:07,139
have<font color="#E5E5E5"> questions</font>

470
00:20:07,870 --> 00:20:12,010
on my<font color="#E5E5E5"> last slide I want to repeat</font><font color="#CCCCCC"> again</font>

471
00:20:10,240 --> 00:20:14,169
<font color="#CCCCCC">our theorem which is a very</font><font color="#E5E5E5"> strong</font>

472
00:20:12,010 --> 00:20:16,299
impossibility result<font color="#E5E5E5"> saying that we</font>

473
00:20:14,169 --> 00:20:19,090
cannot have to message black box<font color="#E5E5E5"> or T</font>

474
00:20:16,299 --> 00:20:21,639
extension and that impossibility result

475
00:20:19,090 --> 00:20:23,620
holds<font color="#E5E5E5"> in a very strong sense because we</font>

476
00:20:21,640 --> 00:20:26,590
were using this entropy argument just

477
00:20:23,620 --> 00:20:29,080
over the<font color="#CCCCCC"> receiver's input that actually</font>

478
00:20:26,590 --> 00:20:31,689
allows us<font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> for an</font><font color="#CCCCCC"> arbitrary</font>

479
00:20:29,080 --> 00:20:34,750
string<font color="#E5E5E5"> length so even if you would start</font>

480
00:20:31,690 --> 00:20:36,760
<font color="#E5E5E5">with a really long string length of the</font>

481
00:20:34,750 --> 00:20:39,700
<font color="#E5E5E5">receivers input strength and even</font><font color="#CCCCCC"> we if</font>

482
00:20:36,760 --> 00:20:43,360
<font color="#E5E5E5">you would like</font><font color="#CCCCCC"> to extend it</font><font color="#E5E5E5"> to n plus 1</font>

483
00:20:39,700 --> 00:20:46,120
or<font color="#CCCCCC"> T's of a single bit</font><font color="#E5E5E5"> string length it</font>

484
00:20:43,360 --> 00:20:47,979
would<font color="#E5E5E5"> be impossible also</font><font color="#CCCCCC"> that this</font>

485
00:20:46,120 --> 00:20:49,840
result holds also<font color="#E5E5E5"> in the common</font>

486
00:20:47,980 --> 00:20:51,730
reference string<font color="#CCCCCC"> model and it</font><font color="#E5E5E5"> holds for</font>

487
00:20:49,840 --> 00:20:54,610
<font color="#CCCCCC">all round</font><font color="#E5E5E5"> complexities so if you start</font>

488
00:20:51,730 --> 00:20:56,980
<font color="#E5E5E5">with K around oblivious</font><font color="#CCCCCC"> transfer you</font>

489
00:20:54,610 --> 00:21:00,539
cannot have a K round<font color="#CCCCCC"> OT extension or</font>

490
00:20:56,980 --> 00:21:03,130
you cannot have a fixed amount<font color="#E5E5E5"> of</font>

491
00:21:00,539 --> 00:21:06,460
applications<font color="#E5E5E5"> to have an arbitrary larger</font>

492
00:21:03,130 --> 00:21:08,230
amount of oblivious transfers so thanks

493
00:21:06,460 --> 00:21:10,100
for<font color="#E5E5E5"> your attention I'm happy to answer</font>

494
00:21:08,230 --> 00:21:14,859
your<font color="#E5E5E5"> questions</font>

495
00:21:10,100 --> 00:21:14,859
[Applause]

