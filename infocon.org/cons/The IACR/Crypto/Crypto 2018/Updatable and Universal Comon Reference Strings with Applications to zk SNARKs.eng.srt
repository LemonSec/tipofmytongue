1
00:00:05,359 --> 00:00:10,620
thank you for the<font color="#E5E5E5"> introduction so the</font>

2
00:00:08,400 --> 00:00:14,190
key aim in this work was to try and<font color="#CCCCCC"> find</font>

3
00:00:10,620 --> 00:00:16,169
<font color="#CCCCCC">a better method than</font><font color="#E5E5E5"> trusted</font><font color="#CCCCCC"> setup for</font>

4
00:00:14,190 --> 00:00:20,279
trying to generate<font color="#E5E5E5"> the public parameters</font>

5
00:00:16,170 --> 00:00:22,710
for<font color="#CCCCCC"> zero-knowledge</font><font color="#E5E5E5"> snacks zero-knowledge</font>

6
00:00:20,279 --> 00:00:24,390
snacks are a<font color="#E5E5E5"> particular type of zero</font>

7
00:00:22,710 --> 00:00:26,789
knowledge proof that have been<font color="#CCCCCC"> receiving</font>

8
00:00:24,390 --> 00:00:28,859
a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of interest lately</font><font color="#E5E5E5"> both from</font>

9
00:00:26,789 --> 00:00:31,769
academia and<font color="#E5E5E5"> from industry due to their</font>

10
00:00:28,859 --> 00:00:34,230
application<font color="#E5E5E5"> to scalable systems however</font>

11
00:00:31,769 --> 00:00:36,360
<font color="#E5E5E5">they come with one big floor maybe they</font>

12
00:00:34,230 --> 00:00:39,059
have a<font color="#E5E5E5"> trapdoor</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can be used to</font>

13
00:00:36,360 --> 00:00:42,390
generate false proofs<font color="#E5E5E5"> even when you</font>

14
00:00:39,059 --> 00:00:44,030
shouldn't<font color="#E5E5E5"> be able to previously this has</font>

15
00:00:42,390 --> 00:00:46,500
been an tackled at<font color="#E5E5E5"> the implementation</font>

16
00:00:44,030 --> 00:00:47,879
<font color="#E5E5E5">layer and they've been trying to come up</font>

17
00:00:46,500 --> 00:00:49,460
<font color="#CCCCCC">with ways</font><font color="#E5E5E5"> to do multi-party computation</font>

18
00:00:47,879 --> 00:00:51,899
is in order<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> around this fact</font>

19
00:00:49,460 --> 00:00:54,449
<font color="#E5E5E5">however</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> feel like it would</font><font color="#CCCCCC"> be better</font>

20
00:00:51,899 --> 00:00:56,070
<font color="#CCCCCC">to try and address</font><font color="#E5E5E5"> a session issue by</font>

21
00:00:54,449 --> 00:00:57,989
building a<font color="#E5E5E5"> better trust model at the</font>

22
00:00:56,070 --> 00:01:02,190
theory layer<font color="#E5E5E5"> and that's exactly what we</font>

23
00:00:57,989 --> 00:01:03,839
try<font color="#CCCCCC"> and do in</font><font color="#E5E5E5"> this paper what</font><font color="#CCCCCC"> Azera</font>

24
00:01:02,190 --> 00:01:05,789
<font color="#CCCCCC">knows snacks</font><font color="#E5E5E5"> they are zero knowledge</font>

25
00:01:03,839 --> 00:01:07,770
succinct<font color="#E5E5E5"> non interactive arguments of</font>

26
00:01:05,790 --> 00:01:09,570
knowledge and<font color="#E5E5E5"> essentially they're</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> K</font>

27
00:01:07,770 --> 00:01:11,939
key properties is<font color="#CCCCCC"> that they have</font><font color="#E5E5E5"> very</font>

28
00:01:09,570 --> 00:01:14,699
<font color="#CCCCCC">small proofs</font><font color="#E5E5E5"> and very fast verification</font>

29
00:01:11,939 --> 00:01:16,289
time<font color="#E5E5E5"> on the downside they require</font>

30
00:01:14,700 --> 00:01:18,600
trusted<font color="#CCCCCC"> setup and this is what we mean</font>

31
00:01:16,290 --> 00:01:21,380
by there being<font color="#E5E5E5"> a</font><font color="#CCCCCC"> trap door and also they</font>

32
00:01:18,600 --> 00:01:23,699
use knowledge<font color="#E5E5E5"> of explained assumptions</font>

33
00:01:21,380 --> 00:01:26,460
we managed<font color="#CCCCCC"> to build a zero knowledge</font>

34
00:01:23,700 --> 00:01:29,040
snack<font color="#E5E5E5"> in our</font><font color="#CCCCCC"> updatable and</font><font color="#E5E5E5"> universal</font>

35
00:01:26,460 --> 00:01:31,530
setting and we managed<font color="#CCCCCC"> to keep the</font>

36
00:01:29,040 --> 00:01:33,840
efficiency<font color="#CCCCCC"> of previous schemes</font><font color="#E5E5E5"> however</font>

37
00:01:31,530 --> 00:01:38,810
we are still<font color="#CCCCCC"> using knowledge of exponent</font>

38
00:01:33,840 --> 00:01:41,369
assumptions when would<font color="#CCCCCC"> you use snacks</font>

39
00:01:38,810 --> 00:01:42,840
<font color="#CCCCCC">there</font><font color="#E5E5E5"> they really work best when you're</font>

40
00:01:41,369 --> 00:01:43,979
trying<font color="#E5E5E5"> to prove the same problem over</font>

41
00:01:42,840 --> 00:01:45,979
<font color="#E5E5E5">and over</font><font color="#CCCCCC"> and over</font><font color="#E5E5E5"> and over and over and</font>

42
00:01:43,979 --> 00:01:48,539
<font color="#CCCCCC">over again</font><font color="#E5E5E5"> so in the</font><font color="#CCCCCC"> immortai setting</font>

43
00:01:45,979 --> 00:01:50,219
also if you need small proofs and<font color="#CCCCCC"> fast</font>

44
00:01:48,539 --> 00:01:52,170
verifiers and this is<font color="#CCCCCC"> exactly their two</font>

45
00:01:50,219 --> 00:01:54,270
key<font color="#CCCCCC"> properties and this is great</font><font color="#E5E5E5"> for</font>

46
00:01:52,170 --> 00:01:55,860
block chains because in block chains<font color="#E5E5E5"> all</font>

47
00:01:54,270 --> 00:01:58,200
information has<font color="#CCCCCC"> to be stored forever</font>

48
00:01:55,860 --> 00:02:00,990
so you need things to be small and<font color="#E5E5E5"> also</font>

49
00:01:58,200 --> 00:02:03,240
<font color="#CCCCCC">where proofs are generated by one party</font>

50
00:02:00,990 --> 00:02:05,100
<font color="#E5E5E5">they have to be</font><font color="#CCCCCC"> verified by every single</font>

51
00:02:03,240 --> 00:02:06,990
<font color="#E5E5E5">party in the network so if you have</font>

52
00:02:05,100 --> 00:02:11,310
large verification<font color="#E5E5E5"> Custis is really</font>

53
00:02:06,990 --> 00:02:13,049
<font color="#E5E5E5">going to be a problem however</font><font color="#CCCCCC"> where</font>

54
00:02:11,310 --> 00:02:14,819
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> not so good for block chances of</font>

55
00:02:13,050 --> 00:02:16,560
course is trapdoor and<font color="#E5E5E5"> the trapdoor</font>

56
00:02:14,819 --> 00:02:17,470
cannot be used to<font color="#E5E5E5"> break zero knowledge</font>

57
00:02:16,560 --> 00:02:21,970
<font color="#E5E5E5">basic</font>

58
00:02:17,470 --> 00:02:24,070
we used to break integrity when snacks

59
00:02:21,970 --> 00:02:27,130
were originally introduced they were

60
00:02:24,070 --> 00:02:29,290
more designed<font color="#E5E5E5"> for verifiable computation</font>

61
00:02:27,130 --> 00:02:31,390
<font color="#E5E5E5">so this wasn't so much a problem because</font>

62
00:02:29,290 --> 00:02:33,670
<font color="#E5E5E5">you can rely on the verifier so get rid</font>

63
00:02:31,390 --> 00:02:36,369
of the<font color="#CCCCCC"> trapdoor but in a</font><font color="#E5E5E5"> distributive</font>

64
00:02:33,670 --> 00:02:37,959
<font color="#E5E5E5">system where the entire</font><font color="#CCCCCC"> philosophy is</font>

65
00:02:36,370 --> 00:02:40,030
that<font color="#CCCCCC"> there</font><font color="#E5E5E5"> shouldn't be like a trusted</font>

66
00:02:37,960 --> 00:02:45,730
third<font color="#E5E5E5"> party anywhere in the system it's</font>

67
00:02:40,030 --> 00:02:47,710
less ideal so our contributions we

68
00:02:45,730 --> 00:02:49,450
introduced the<font color="#CCCCCC"> updatable trust model</font>

69
00:02:47,710 --> 00:02:51,780
<font color="#E5E5E5">which I would say is something of a</font>

70
00:02:49,450 --> 00:02:55,269
compromise between<font color="#E5E5E5"> trusted setter and</font>

71
00:02:51,780 --> 00:02:56,800
untrusted<font color="#CCCCCC"> setup we show</font><font color="#E5E5E5"> that it's very</font>

72
00:02:55,270 --> 00:03:00,670
feasible by building an efficient new

73
00:02:56,800 --> 00:03:02,320
<font color="#E5E5E5">snarking up we also as a by-product I</font>

74
00:03:00,670 --> 00:03:04,030
would say achieve universality<font color="#CCCCCC"> and that</font>

75
00:03:02,320 --> 00:03:07,299
might<font color="#CCCCCC"> be an even</font><font color="#E5E5E5"> bigger argument</font><font color="#CCCCCC"> for</font>

76
00:03:04,030 --> 00:03:08,920
using<font color="#CCCCCC"> our</font><font color="#E5E5E5"> scheme and in order</font><font color="#CCCCCC"> to build a</font>

77
00:03:07,300 --> 00:03:13,270
snack we<font color="#CCCCCC"> introduced in our space</font>

78
00:03:08,920 --> 00:03:14,739
argument I'm not actually going to

79
00:03:13,270 --> 00:03:16,360
<font color="#E5E5E5">explain what</font><font color="#CCCCCC"> Sara knowledge is but I'm</font>

80
00:03:14,740 --> 00:03:18,280
<font color="#CCCCCC">just</font><font color="#E5E5E5"> going to say that the key thing</font>

81
00:03:16,360 --> 00:03:20,230
here is that<font color="#E5E5E5"> there is a trapdoor</font>

82
00:03:18,280 --> 00:03:21,820
<font color="#E5E5E5">embedded in a common reference string</font>

83
00:03:20,230 --> 00:03:26,320
which<font color="#CCCCCC"> is shared by both the prover and</font>

84
00:03:21,820 --> 00:03:28,000
the verifier<font color="#E5E5E5"> and unlike in</font><font color="#CCCCCC"> other zero</font>

85
00:03:26,320 --> 00:03:30,640
knowledge proving systems it's very hard

86
00:03:28,000 --> 00:03:37,720
to<font color="#CCCCCC"> argue in snarks why this trapdoor</font>

87
00:03:30,640 --> 00:03:39,250
<font color="#E5E5E5">would</font><font color="#CCCCCC"> not be leased</font><font color="#E5E5E5"> to any party so a</font>

88
00:03:37,720 --> 00:03:41,530
<font color="#E5E5E5">couple of years</font><font color="#CCCCCC"> ago there was</font><font color="#E5E5E5"> a paper</font>

89
00:03:39,250 --> 00:03:44,200
that<font color="#E5E5E5"> showed that</font><font color="#CCCCCC"> it's impossible</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> have</font>

90
00:03:41,530 --> 00:03:45,910
a zero knowledge<font color="#E5E5E5"> non-interactive zero</font>

91
00:03:44,200 --> 00:03:48,690
<font color="#E5E5E5">knowledge system sorry which is both</font>

92
00:03:45,910 --> 00:03:50,829
<font color="#E5E5E5">subversion sand and subversion knowledge</font>

93
00:03:48,690 --> 00:03:53,320
but<font color="#E5E5E5"> you can have</font><font color="#CCCCCC"> something that is</font>

94
00:03:50,830 --> 00:03:55,810
subversion zero<font color="#CCCCCC"> knowledge ie</font><font color="#E5E5E5"> a verifier</font>

95
00:03:53,320 --> 00:03:57,850
who does<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> trapdoor</font><font color="#E5E5E5"> cannot tell</font>

96
00:03:55,810 --> 00:03:59,140
anything about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> witness and because</font>

97
00:03:57,850 --> 00:04:04,329
it's possible<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> this and we do</font>

98
00:03:59,140 --> 00:04:07,208
<font color="#CCCCCC">achieve this</font><font color="#E5E5E5"> for our scheme however they</font>

99
00:04:04,330 --> 00:04:09,160
did show is not possible<font color="#CCCCCC"> to have it be</font>

100
00:04:07,209 --> 00:04:10,420
<font color="#E5E5E5">subversion</font><font color="#CCCCCC"> sand at the</font><font color="#E5E5E5"> same time so</font>

101
00:04:09,160 --> 00:04:13,959
there's<font color="#E5E5E5"> always going to be a trapdoor</font>

102
00:04:10,420 --> 00:04:15,910
<font color="#CCCCCC">that a prove</font><font color="#E5E5E5"> I could use however what we</font>

103
00:04:13,959 --> 00:04:17,320
try<font color="#CCCCCC"> and do is we try and</font><font color="#E5E5E5"> argue why it</font>

104
00:04:15,910 --> 00:04:19,858
might<font color="#E5E5E5"> be difficult to actually get hold</font>

105
00:04:17,320 --> 00:04:19,858
<font color="#E5E5E5">of this trapdoor</font>

106
00:04:20,970 --> 00:04:26,590
so there are nesic systems out<font color="#CCCCCC"> there</font>

107
00:04:23,820 --> 00:04:28,270
where this can be<font color="#CCCCCC"> done in the random</font>

108
00:04:26,590 --> 00:04:29,948
Oracle model<font color="#E5E5E5"> and it's not difficult</font>

109
00:04:28,270 --> 00:04:32,258
and the reason it's<font color="#CCCCCC"> not difficult</font><font color="#E5E5E5"> is</font>

110
00:04:29,949 --> 00:04:34,810
<font color="#CCCCCC">because they have no structure</font><font color="#E5E5E5"> but for</font>

111
00:04:32,259 --> 00:04:37,660
snacks<font color="#CCCCCC"> pretty much all of their</font>

112
00:04:34,810 --> 00:04:39,400
efficiency<font color="#CCCCCC"> is</font><font color="#E5E5E5"> gained</font><font color="#CCCCCC"> and because you do</font>

113
00:04:37,660 --> 00:04:40,780
a lot a lot of<font color="#E5E5E5"> pre-computation</font>

114
00:04:39,400 --> 00:04:43,090
<font color="#E5E5E5">and you stick it into the common</font>

115
00:04:40,780 --> 00:04:44,349
reference string<font color="#E5E5E5"> so if you were to then</font>

116
00:04:43,090 --> 00:04:47,049
get rid<font color="#CCCCCC"> of all of that pre-computation</font>

117
00:04:44,349 --> 00:04:52,599
<font color="#E5E5E5">you've we don't know how to build</font>

118
00:04:47,050 --> 00:04:54,580
systems<font color="#CCCCCC"> without doing this</font><font color="#E5E5E5"> basically so</font>

119
00:04:52,599 --> 00:04:56,380
as an<font color="#CCCCCC"> example as to</font><font color="#E5E5E5"> what a trusted</font><font color="#CCCCCC"> setup</font>

120
00:04:54,580 --> 00:04:57,639
is there was a one that was around<font color="#E5E5E5"> a</font>

121
00:04:56,380 --> 00:05:00,699
<font color="#E5E5E5">couple of</font><font color="#CCCCCC"> years ago and a more recent</font>

122
00:04:57,639 --> 00:05:03,430
<font color="#E5E5E5">one by Z</font><font color="#CCCCCC"> cache and</font><font color="#E5E5E5"> they essentially ran</font>

123
00:05:00,699 --> 00:05:05,500
a multi-party computation in order<font color="#E5E5E5"> to</font>

124
00:05:03,430 --> 00:05:07,150
generate the public parameters that<font color="#E5E5E5"> I</font>

125
00:05:05,500 --> 00:05:11,259
get used<font color="#CCCCCC"> in the Z cash system so they</font>

126
00:05:07,150 --> 00:05:13,810
<font color="#CCCCCC">can use snacks</font><font color="#E5E5E5"> and provided that that</font>

127
00:05:11,259 --> 00:05:14,919
<font color="#CCCCCC">was a single</font><font color="#E5E5E5"> honest user amongst the</font>

128
00:05:13,810 --> 00:05:17,490
people that run the<font color="#E5E5E5"> multi-party</font>

129
00:05:14,919 --> 00:05:20,229
computation<font color="#E5E5E5"> the</font><font color="#CCCCCC"> systems should be secure</font>

130
00:05:17,490 --> 00:05:22,870
<font color="#E5E5E5">however there's no way of knowing</font>

131
00:05:20,229 --> 00:05:28,030
whether there was whether the setup<font color="#E5E5E5"> was</font>

132
00:05:22,870 --> 00:05:30,240
compromised or not<font color="#E5E5E5"> and moreover this is</font>

133
00:05:28,030 --> 00:05:34,119
something<font color="#CCCCCC"> that they've ran twice</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> far</font>

134
00:05:30,240 --> 00:05:35,289
and in the second time they<font color="#E5E5E5"> run it was</font>

135
00:05:34,120 --> 00:05:37,150
probably a<font color="#E5E5E5"> good thing they run it</font>

136
00:05:35,289 --> 00:05:39,759
<font color="#E5E5E5">because they were able</font><font color="#CCCCCC"> to introduce more</font>

137
00:05:37,150 --> 00:05:41,799
parties<font color="#E5E5E5"> however</font><font color="#CCCCCC"> if you think about</font><font color="#E5E5E5"> it if</font>

138
00:05:39,759 --> 00:05:43,300
you have<font color="#CCCCCC"> to run a new trusted</font><font color="#E5E5E5"> set up</font>

139
00:05:41,800 --> 00:05:45,639
<font color="#E5E5E5">every single</font><font color="#CCCCCC"> time you want to make a</font>

140
00:05:43,300 --> 00:05:47,080
security improvement<font color="#CCCCCC"> or if maybe you're</font>

141
00:05:45,639 --> 00:05:48,550
a less<font color="#CCCCCC"> well-known</font><font color="#E5E5E5"> application where it's</font>

142
00:05:47,080 --> 00:05:51,280
very<font color="#E5E5E5"> hard to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> a high level</font><font color="#CCCCCC"> of</font>

143
00:05:48,550 --> 00:05:53,949
participation<font color="#E5E5E5"> in the trusted</font><font color="#CCCCCC"> setup</font><font color="#E5E5E5"> this</font>

144
00:05:51,280 --> 00:05:55,330
becomes more and more<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> problem so</font>

145
00:05:53,949 --> 00:05:59,219
what we want<font color="#E5E5E5"> is we want something where</font>

146
00:05:55,330 --> 00:06:01,810
you can use the same trusted<font color="#CCCCCC"> setup or</font>

147
00:05:59,219 --> 00:06:03,370
<font color="#CCCCCC">updatable model in</font><font color="#E5E5E5"> our case for every</font>

148
00:06:01,810 --> 00:06:08,560
single<font color="#E5E5E5"> application</font><font color="#CCCCCC"> we don't want to be</font>

149
00:06:03,370 --> 00:06:11,800
doing<font color="#E5E5E5"> one per application so now I'm</font>

150
00:06:08,560 --> 00:06:15,909
going<font color="#E5E5E5"> to explain a notion of update</font>

151
00:06:11,800 --> 00:06:18,699
ability<font color="#E5E5E5"> okay so here's a theory world</font>

152
00:06:15,909 --> 00:06:20,530
there's perfectly trusted being who

153
00:06:18,699 --> 00:06:23,880
generates your common reference string

154
00:06:20,530 --> 00:06:26,068
and it's secure<font color="#CCCCCC"> because you trust them</font>

155
00:06:23,880 --> 00:06:28,150
<font color="#CCCCCC">you get around</font><font color="#E5E5E5"> this at the</font><font color="#CCCCCC"> moment</font>

156
00:06:26,069 --> 00:06:29,620
<font color="#E5E5E5">implementation layer by running a</font>

157
00:06:28,150 --> 00:06:32,229
multi-party computation<font color="#E5E5E5"> it's secure</font>

158
00:06:29,620 --> 00:06:34,599
provided one of<font color="#E5E5E5"> them is secure but this</font>

159
00:06:32,229 --> 00:06:37,289
<font color="#E5E5E5">process has to have an</font><font color="#CCCCCC"> endpoint there</font>

160
00:06:34,599 --> 00:06:39,450
has to be at some<font color="#CCCCCC"> point in the</font>

161
00:06:37,290 --> 00:06:41,790
when you decide that you want<font color="#CCCCCC"> to go live</font>

162
00:06:39,450 --> 00:06:45,210
with<font color="#CCCCCC"> your system</font><font color="#E5E5E5"> and these are the</font>

163
00:06:41,790 --> 00:06:47,970
public parameters<font color="#E5E5E5"> that you use in our</font>

164
00:06:45,210 --> 00:06:49,830
system<font color="#CCCCCC"> we do</font><font color="#E5E5E5"> not need an</font><font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> so for</font>

165
00:06:47,970 --> 00:06:52,669
example I could<font color="#CCCCCC"> generate the</font><font color="#E5E5E5"> first loss</font>

166
00:06:49,830 --> 00:06:55,200
of public parameters and then<font color="#E5E5E5"> broadcast</font>

167
00:06:52,669 --> 00:06:56,940
<font color="#E5E5E5">then someone</font><font color="#CCCCCC"> else could come along</font><font color="#E5E5E5"> they</font>

168
00:06:55,200 --> 00:06:59,520
could update<font color="#E5E5E5"> my parameters provide a</font>

169
00:06:56,940 --> 00:07:03,270
proof<font color="#E5E5E5"> of update and then provided myself</font>

170
00:06:59,520 --> 00:07:05,250
or the updater was honest<font color="#E5E5E5"> the common</font>

171
00:07:03,270 --> 00:07:06,960
reference<font color="#CCCCCC"> string is secure</font><font color="#E5E5E5"> and someone</font>

172
00:07:05,250 --> 00:07:09,180
<font color="#E5E5E5">else can come along and update that</font><font color="#CCCCCC"> and</font>

173
00:07:06,960 --> 00:07:10,979
provided<font color="#E5E5E5"> either myself or the first</font>

174
00:07:09,180 --> 00:07:13,710
<font color="#E5E5E5">updater or the second</font><font color="#CCCCCC"> update so it was</font>

175
00:07:10,980 --> 00:07:15,000
honest<font color="#E5E5E5"> the system is secure and you can</font>

176
00:07:13,710 --> 00:07:16,859
just keep<font color="#CCCCCC"> doing this</font><font color="#E5E5E5"> and keep doing this</font>

177
00:07:15,000 --> 00:07:18,060
and<font color="#E5E5E5"> keep doing this even after</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> system</font>

178
00:07:16,860 --> 00:07:19,470
goes live<font color="#E5E5E5"> although of course you</font>

179
00:07:18,060 --> 00:07:23,340
<font color="#CCCCCC">probably want a good few updates before</font>

180
00:07:19,470 --> 00:07:24,750
<font color="#E5E5E5">the</font><font color="#CCCCCC"> system goes live but nonetheless so</font>

181
00:07:23,340 --> 00:07:27,510
in our eyes this is<font color="#E5E5E5"> no longer really a</font>

182
00:07:24,750 --> 00:07:29,190
<font color="#CCCCCC">setup because</font><font color="#E5E5E5"> you can always have the</font>

183
00:07:27,510 --> 00:07:31,320
parties that's actually<font color="#E5E5E5"> using the scheme</font>

184
00:07:29,190 --> 00:07:35,610
take part in the trusted<font color="#E5E5E5"> set up if you</font>

185
00:07:31,320 --> 00:07:37,770
want<font color="#E5E5E5"> so just to highlight</font><font color="#CCCCCC"> the two key</font>

186
00:07:35,610 --> 00:07:39,210
differences<font color="#CCCCCC"> in a trusted set</font><font color="#E5E5E5"> up the</font>

187
00:07:37,770 --> 00:07:41,789
<font color="#CCCCCC">setup has</font><font color="#E5E5E5"> to be completed</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> the</font>

188
00:07:39,210 --> 00:07:43,229
system<font color="#E5E5E5"> goes live and it's secure</font>

189
00:07:41,790 --> 00:07:46,260
provided<font color="#E5E5E5"> there was a single honest user</font>

190
00:07:43,229 --> 00:07:48,479
for an updatable CRS<font color="#E5E5E5"> the parameters can</font>

191
00:07:46,260 --> 00:07:51,180
<font color="#CCCCCC">be updated</font><font color="#E5E5E5"> at any point in time and it</font>

192
00:07:48,479 --> 00:07:56,430
<font color="#E5E5E5">is secure at any time after</font><font color="#CCCCCC"> a single</font>

193
00:07:51,180 --> 00:08:00,150
<font color="#E5E5E5">honest user has participated how do we</font>

194
00:07:56,430 --> 00:08:02,070
do this well I was talking<font color="#CCCCCC"> before about</font>

195
00:08:00,150 --> 00:08:04,260
<font color="#CCCCCC">snack</font><font color="#E5E5E5"> common reference</font><font color="#CCCCCC"> drinks having</font>

196
00:08:02,070 --> 00:08:06,030
structure essentially the structure<font color="#E5E5E5"> is</font>

197
00:08:04,260 --> 00:08:10,140
coming from<font color="#E5E5E5"> there being secrets in the</font>

198
00:08:06,030 --> 00:08:12,479
exponent<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> is secret polynomial</font>

199
00:08:10,140 --> 00:08:14,880
evaluations for known polynomials<font color="#E5E5E5"> and</font>

200
00:08:12,479 --> 00:08:17,659
when the polynomials in question<font color="#CCCCCC"> happen</font>

201
00:08:14,880 --> 00:08:20,550
<font color="#E5E5E5">to be monomials this is very easy to do</font>

202
00:08:17,660 --> 00:08:22,740
<font color="#E5E5E5">so for</font><font color="#CCCCCC"> example say your monomials the</font>

203
00:08:20,550 --> 00:08:24,750
<font color="#E5E5E5">simplest simplest possible one</font><font color="#CCCCCC"> use the</font>

204
00:08:22,740 --> 00:08:27,150
<font color="#CCCCCC">ax</font><font color="#E5E5E5"> when the first person which is to</font>

205
00:08:24,750 --> 00:08:29,640
calculate<font color="#CCCCCC"> use the x1 provide a proof</font><font color="#E5E5E5"> of</font>

206
00:08:27,150 --> 00:08:31,739
knowledge the second<font color="#E5E5E5"> person would then</font>

207
00:08:29,640 --> 00:08:33,569
<font color="#E5E5E5">update that so they would calculate T to</font>

208
00:08:31,740 --> 00:08:35,789
the<font color="#E5E5E5"> power of X 1</font><font color="#CCCCCC"> X 2 which they can do</font>

209
00:08:33,570 --> 00:08:37,770
because<font color="#E5E5E5"> they have</font><font color="#CCCCCC"> T to the x1 provide a</font>

210
00:08:35,789 --> 00:08:40,080
proof<font color="#CCCCCC"> of knowledge of XJ and you can</font>

211
00:08:37,770 --> 00:08:41,520
keep<font color="#CCCCCC"> doing this and then if you had to</font>

212
00:08:40,080 --> 00:08:43,349
do to<font color="#CCCCCC"> the x squared say you could</font><font color="#E5E5E5"> be</font>

213
00:08:41,520 --> 00:08:46,790
able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> check consistency because we're</font>

214
00:08:43,349 --> 00:08:46,790
working<font color="#E5E5E5"> in pairing based groups</font>

215
00:08:47,540 --> 00:08:50,930
and this is great<font color="#CCCCCC"> because there are</font>

216
00:08:49,070 --> 00:08:53,269
<font color="#E5E5E5">schemes in the literature that use only</font>

217
00:08:50,930 --> 00:08:54,709
monomials<font color="#E5E5E5"> namely the first few snacks</font>

218
00:08:53,269 --> 00:08:57,649
<font color="#E5E5E5">that were introduced one by</font><font color="#CCCCCC"> Grutter and</font>

219
00:08:54,709 --> 00:08:59,959
<font color="#E5E5E5">the other pilot</font><font color="#CCCCCC"> ma the trouble is is</font>

220
00:08:57,649 --> 00:09:04,100
that these works<font color="#CCCCCC"> have quadratic preper</font>

221
00:08:59,959 --> 00:09:06,589
<font color="#E5E5E5">time and we have improved snacks a lot</font>

222
00:09:04,100 --> 00:09:09,110
since then<font color="#CCCCCC"> mostly due to breakthrough</font>

223
00:09:06,589 --> 00:09:13,399
work by<font color="#E5E5E5"> Gennaro and others which managed</font>

224
00:09:09,110 --> 00:09:14,660
to put the<font color="#E5E5E5"> a circuit dependent hidden</font>

225
00:09:13,399 --> 00:09:17,510
polynomial in the common reference

226
00:09:14,660 --> 00:09:18,889
string and what this<font color="#E5E5E5"> did is it meant</font>

227
00:09:17,510 --> 00:09:20,600
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you could have a lot</font><font color="#CCCCCC"> of the</font>

228
00:09:18,889 --> 00:09:25,579
<font color="#CCCCCC">information related</font><font color="#E5E5E5"> to that particular</font>

229
00:09:20,600 --> 00:09:27,079
circuit<font color="#CCCCCC"> pre-computed so they were able</font>

230
00:09:25,579 --> 00:09:29,029
to take the product<font color="#E5E5E5"> time down from</font>

231
00:09:27,079 --> 00:09:30,380
quadratic to<font color="#CCCCCC"> cosy linear which is why</font>

232
00:09:29,029 --> 00:09:33,519
we're actually able<font color="#CCCCCC"> to use these</font><font color="#E5E5E5"> things</font>

233
00:09:30,380 --> 00:09:36,130
<font color="#E5E5E5">in</font><font color="#CCCCCC"> practice now</font><font color="#E5E5E5"> we weren't</font><font color="#CCCCCC"> before and</font>

234
00:09:33,519 --> 00:09:39,170
updating polynomials is really hard

235
00:09:36,130 --> 00:09:41,600
because you have two things which are

236
00:09:39,170 --> 00:09:43,910
<font color="#CCCCCC">correlated and if you then want to take</font>

237
00:09:41,600 --> 00:09:45,440
them apart and update them then you

238
00:09:43,910 --> 00:09:46,790
don't<font color="#E5E5E5"> have the original secrets to do</font>

239
00:09:45,440 --> 00:09:50,899
this that's a whole kind<font color="#E5E5E5"> of point of</font>

240
00:09:46,790 --> 00:09:52,160
update ability and by<font color="#E5E5E5"> hard we we don't</font>

241
00:09:50,899 --> 00:09:54,649
just mean that<font color="#E5E5E5"> we can't think of a way</font>

242
00:09:52,160 --> 00:09:56,120
<font color="#CCCCCC">to do it</font><font color="#E5E5E5"> we mean it is hard so for</font>

243
00:09:54,649 --> 00:10:00,500
<font color="#E5E5E5">example</font><font color="#CCCCCC"> suppose you have G to the power</font>

244
00:09:56,120 --> 00:10:03,079
<font color="#CCCCCC">of f of x times</font><font color="#E5E5E5"> delta any adversary</font>

245
00:10:00,500 --> 00:10:05,089
which is<font color="#CCCCCC"> L ball to update this is able</font>

246
00:10:03,079 --> 00:10:07,250
to<font color="#E5E5E5"> extract the monomials due to the</font>

247
00:10:05,089 --> 00:10:09,949
Delta<font color="#CCCCCC"> due to the X Delta just the x</font>

248
00:10:07,250 --> 00:10:11,690
<font color="#E5E5E5">squared Delta etc every single monomial</font>

249
00:10:09,949 --> 00:10:14,319
that<font color="#E5E5E5"> was used to calculate f of X and</font>

250
00:10:11,690 --> 00:10:16,970
this<font color="#E5E5E5"> is something</font><font color="#CCCCCC"> we proved in the paper</font>

251
00:10:14,319 --> 00:10:19,010
so the moral<font color="#E5E5E5"> of the story here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that</font>

252
00:10:16,970 --> 00:10:20,329
we cannot rely on hidden polynomial

253
00:10:19,010 --> 00:10:22,370
evaluations and<font color="#E5E5E5"> I common reference</font>

254
00:10:20,329 --> 00:10:27,290
<font color="#E5E5E5">string when we're building an updatable</font>

255
00:10:22,370 --> 00:10:29,720
zero knowledge<font color="#CCCCCC"> smack and this is</font><font color="#E5E5E5"> highly</font>

256
00:10:27,290 --> 00:10:33,469
related to<font color="#E5E5E5"> why we gets a universal set</font>

257
00:10:29,720 --> 00:10:35,899
up because<font color="#CCCCCC"> for the updatable setup we</font>

258
00:10:33,470 --> 00:10:38,120
cannot rely on<font color="#E5E5E5"> circuit dependent</font><font color="#CCCCCC"> things</font>

259
00:10:35,899 --> 00:10:40,040
in the common reference string and for<font color="#CCCCCC"> a</font>

260
00:10:38,120 --> 00:10:41,720
universal set up which<font color="#E5E5E5"> means that you</font>

261
00:10:40,040 --> 00:10:44,599
<font color="#E5E5E5">have the same</font><font color="#CCCCCC"> setup</font><font color="#E5E5E5"> for every single</font>

262
00:10:41,720 --> 00:10:45,709
circuit<font color="#E5E5E5"> you also cannot rely on circuit</font>

263
00:10:44,600 --> 00:10:48,110
<font color="#E5E5E5">dependent things in the common reference</font>

264
00:10:45,709 --> 00:10:49,819
string<font color="#E5E5E5"> so essentially in solving one</font>

265
00:10:48,110 --> 00:10:54,589
problem we have also solved<font color="#CCCCCC"> the other</font>

266
00:10:49,819 --> 00:10:56,180
problem so<font color="#E5E5E5"> roughly how do we do this we</font>

267
00:10:54,589 --> 00:10:58,370
<font color="#E5E5E5">start with a global common reference</font>

268
00:10:56,180 --> 00:10:59,989
string that contains just<font color="#E5E5E5"> monomials it</font>

269
00:10:58,370 --> 00:11:02,570
completely<font color="#E5E5E5"> independent</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the circuit</font>

270
00:10:59,990 --> 00:11:04,610
<font color="#E5E5E5">and it is not used by either the prover</font>

271
00:11:02,570 --> 00:11:09,410
or the verifier it is only used for

272
00:11:04,610 --> 00:11:12,680
updating we then have a<font color="#CCCCCC"> publicly ran</font>

273
00:11:09,410 --> 00:11:14,120
derive algorithm<font color="#E5E5E5"> and this all this needs</font>

274
00:11:12,680 --> 00:11:15,709
<font color="#E5E5E5">is</font><font color="#CCCCCC"> a global common reference string it</font>

275
00:11:14,120 --> 00:11:19,790
doesn't need any secrets anyone can<font color="#CCCCCC"> run</font>

276
00:11:15,710 --> 00:11:21,020
it<font color="#E5E5E5"> and from it we output a circuit</font>

277
00:11:19,790 --> 00:11:23,360
dependent derived common reference

278
00:11:21,020 --> 00:11:26,360
string and these we<font color="#CCCCCC"> are not able to</font>

279
00:11:23,360 --> 00:11:28,730
<font color="#E5E5E5">update however we can generate proofs</font>

280
00:11:26,360 --> 00:11:32,390
<font color="#E5E5E5">and we can verify proofs</font><font color="#CCCCCC"> just by using</font>

281
00:11:28,730 --> 00:11:34,279
the derived common reference string so

282
00:11:32,390 --> 00:11:36,350
essentially each of these derived common

283
00:11:34,279 --> 00:11:38,660
reference strings<font color="#E5E5E5"> is equivalent</font><font color="#CCCCCC"> to the</font>

284
00:11:36,350 --> 00:11:43,790
output of<font color="#E5E5E5"> one of the trusted</font><font color="#CCCCCC"> set ups in</font>

285
00:11:38,660 --> 00:11:45,949
any of the previous schemes roughly how

286
00:11:43,790 --> 00:11:47,120
much does discussed the global common

287
00:11:45,950 --> 00:11:50,029
<font color="#CCCCCC">reference</font><font color="#E5E5E5"> during</font><font color="#CCCCCC"> its quadratic and</font><font color="#E5E5E5"> I</font>

288
00:11:47,120 --> 00:11:51,950
will explain why<font color="#E5E5E5"> although</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> caveat I</font>

289
00:11:50,029 --> 00:11:53,270
put there is you don't<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to store the</font>

290
00:11:51,950 --> 00:11:57,890
whole chain you only need to<font color="#CCCCCC"> store the</font>

291
00:11:53,270 --> 00:12:00,319
most recent<font color="#CCCCCC"> T the update proofs are very</font>

292
00:11:57,890 --> 00:12:01,460
small<font color="#E5E5E5"> however you do need to store every</font>

293
00:12:00,320 --> 00:12:02,779
single<font color="#CCCCCC"> one of</font><font color="#E5E5E5"> these and moreover they</font>

294
00:12:01,460 --> 00:12:03,980
have<font color="#E5E5E5"> to be stored sequentially if you</font>

295
00:12:02,779 --> 00:12:09,080
swap the order<font color="#E5E5E5"> then things will no</font>

296
00:12:03,980 --> 00:12:10,760
longer verify the derive algorithm<font color="#CCCCCC"> costs</font>

297
00:12:09,080 --> 00:12:14,870
<font color="#CCCCCC">a cubic number of multiplications due</font>

298
00:12:10,760 --> 00:12:16,700
<font color="#CCCCCC">due</font><font color="#E5E5E5"> to the Gaussian elimination however</font>

299
00:12:14,870 --> 00:12:18,350
you can run multiple updates<font color="#CCCCCC"> between</font>

300
00:12:16,700 --> 00:12:19,520
each time<font color="#E5E5E5"> you derive a new derived</font>

301
00:12:18,350 --> 00:12:23,089
common reference string you don't have

302
00:12:19,520 --> 00:12:25,010
to run it all<font color="#E5E5E5"> the time and the derived</font>

303
00:12:23,089 --> 00:12:27,080
common reference string is linear sized

304
00:12:25,010 --> 00:12:33,080
<font color="#E5E5E5">and this is all the proof</font><font color="#CCCCCC"> ax and the</font>

305
00:12:27,080 --> 00:12:34,339
<font color="#CCCCCC">verifier need to store so now we have a</font>

306
00:12:33,080 --> 00:12:36,050
derived common reference string that we

307
00:12:34,339 --> 00:12:37,760
can use for proving<font color="#E5E5E5"> and verifying but</font>

308
00:12:36,050 --> 00:12:39,439
how do we<font color="#CCCCCC"> guess I prefer</font><font color="#E5E5E5"> security to go</font>

309
00:12:37,760 --> 00:12:41,569
through when<font color="#CCCCCC"> we have to consider the</font>

310
00:12:39,440 --> 00:12:43,339
<font color="#CCCCCC">fact that the prover has</font><font color="#E5E5E5"> access to all</font>

311
00:12:41,570 --> 00:12:45,290
of<font color="#E5E5E5"> the monomials in the global common</font>

312
00:12:43,339 --> 00:12:48,860
reference string the answer is that we

313
00:12:45,290 --> 00:12:50,660
use<font color="#CCCCCC"> a nospace argument so we start</font><font color="#E5E5E5"> with</font>

314
00:12:48,860 --> 00:12:52,970
a common<font color="#E5E5E5"> reference string that contains</font>

315
00:12:50,660 --> 00:12:54,770
monomials in two variables<font color="#CCCCCC"> actually in</font>

316
00:12:52,970 --> 00:12:58,160
three<font color="#E5E5E5"> variables but for</font><font color="#CCCCCC"> Harris emits two</font>

317
00:12:54,770 --> 00:13:01,220
<font color="#E5E5E5">variables and the proven is to show that</font>

318
00:12:58,160 --> 00:13:03,790
<font color="#CCCCCC">they have evaluated</font><font color="#E5E5E5"> some component which</font>

319
00:13:01,220 --> 00:13:08,209
<font color="#CCCCCC">is</font><font color="#E5E5E5"> in the span of a known polynomial</font>

320
00:13:03,790 --> 00:13:11,390
evaluated as a hidden point they want to

321
00:13:08,209 --> 00:13:13,410
keep exactly what the weight<font color="#CCCCCC"> is secret</font>

322
00:13:11,390 --> 00:13:16,470
so when<font color="#E5E5E5"> I</font><font color="#CCCCCC"> would use the rank nullity</font>

323
00:13:13,410 --> 00:13:18,810
theorem from<font color="#E5E5E5"> linear</font><font color="#CCCCCC"> algebra</font><font color="#E5E5E5"> and this</font>

324
00:13:16,470 --> 00:13:21,990
says that<font color="#E5E5E5"> the span</font><font color="#CCCCCC"> of any matrix</font><font color="#E5E5E5"> is</font>

325
00:13:18,810 --> 00:13:24,719
orthogonal to<font color="#E5E5E5"> the null space meaning</font>

326
00:13:21,990 --> 00:13:27,480
that if we have that a if a is in the

327
00:13:24,720 --> 00:13:29,220
<font color="#E5E5E5">correct span then when you dot product</font>

328
00:13:27,480 --> 00:13:32,130
it with something<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> in the null</font>

329
00:13:29,220 --> 00:13:33,960
<font color="#CCCCCC">space it will equal</font><font color="#E5E5E5"> zero and if it dot</font>

330
00:13:32,130 --> 00:13:35,850
<font color="#E5E5E5">products to equal zero with every single</font>

331
00:13:33,960 --> 00:13:39,180
element<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the null</font><font color="#CCCCCC"> space</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> it's in</font>

332
00:13:35,850 --> 00:13:41,070
the correct span and this is<font color="#E5E5E5"> something</font>

333
00:13:39,180 --> 00:13:44,040
that verify can check because<font color="#E5E5E5"> it's got</font>

334
00:13:41,070 --> 00:13:45,480
pairings however it does<font color="#E5E5E5"> have to</font>

335
00:13:44,040 --> 00:13:46,890
separate out the<font color="#E5E5E5"> different</font><font color="#CCCCCC"> null space</font>

336
00:13:45,480 --> 00:13:49,500
vectors<font color="#E5E5E5"> because it needs to be equal to</font>

337
00:13:46,890 --> 00:13:53,930
<font color="#E5E5E5">zero at all of them and this</font><font color="#CCCCCC"> is why we</font>

338
00:13:49,500 --> 00:13:56,160
need lots of different<font color="#CCCCCC"> values of</font><font color="#E5E5E5"> set and</font>

339
00:13:53,930 --> 00:13:57,630
then for the<font color="#E5E5E5"> actual scheme you</font><font color="#CCCCCC"> have more</font>

340
00:13:56,160 --> 00:13:59,790
than one polynomial<font color="#E5E5E5"> but this is fine</font>

341
00:13:57,630 --> 00:14:03,210
because<font color="#E5E5E5"> it doesn't really affect things</font>

342
00:13:59,790 --> 00:14:04,530
<font color="#E5E5E5">too much what does affect things is the</font>

343
00:14:03,210 --> 00:14:07,620
<font color="#E5E5E5">fact that our null</font><font color="#CCCCCC"> space is actually</font>

344
00:14:04,530 --> 00:14:10,170
<font color="#E5E5E5">quite big it's linear sized and the</font>

345
00:14:07,620 --> 00:14:12,450
reason for<font color="#CCCCCC"> this is when you</font><font color="#E5E5E5"> take our</font>

346
00:14:10,170 --> 00:14:16,170
polynomial F and<font color="#CCCCCC"> you lay</font><font color="#E5E5E5"> it out in a</font>

347
00:14:12,450 --> 00:14:17,880
matrix<font color="#E5E5E5"> it's wider than it is long the</font>

348
00:14:16,170 --> 00:14:19,829
width is roughly equal<font color="#CCCCCC"> to 3 times the</font>

349
00:14:17,880 --> 00:14:21,270
<font color="#CCCCCC">number of multiplication gates and the</font>

350
00:14:19,830 --> 00:14:23,130
length is<font color="#CCCCCC"> equal to the number of wires</font>

351
00:14:21,270 --> 00:14:25,260
<font color="#E5E5E5">which because we're working with</font><font color="#CCCCCC"> fan</font>

352
00:14:23,130 --> 00:14:28,110
<font color="#CCCCCC">into gates</font><font color="#E5E5E5"> is roughly equal to 2 times</font>

353
00:14:25,260 --> 00:14:30,480
<font color="#E5E5E5">the number</font><font color="#CCCCCC"> of gates so rank nullity</font>

354
00:14:28,110 --> 00:14:32,100
theorem again you have the size of the

355
00:14:30,480 --> 00:14:35,010
null<font color="#E5E5E5"> space is</font><font color="#CCCCCC"> equal to</font><font color="#E5E5E5"> the width of F</font>

356
00:14:32,100 --> 00:14:37,440
minus the rank of<font color="#E5E5E5"> F and the rank of F is</font>

357
00:14:35,010 --> 00:14:40,650
bounded<font color="#E5E5E5"> by whichever is smaller the</font>

358
00:14:37,440 --> 00:14:43,230
width or<font color="#E5E5E5"> the or the</font><font color="#CCCCCC"> length of F which in</font>

359
00:14:40,650 --> 00:14:46,620
our case is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> length so what we get is</font>

360
00:14:43,230 --> 00:14:49,320
that<font color="#E5E5E5"> the null space is d so open problem</font>

361
00:14:46,620 --> 00:14:50,880
for you<font color="#E5E5E5"> if you can get this F to be more</font>

362
00:14:49,320 --> 00:14:55,800
square then<font color="#CCCCCC"> we might</font><font color="#E5E5E5"> be able to do</font>

363
00:14:50,880 --> 00:14:57,330
<font color="#E5E5E5">something about that quadratic cost I'm</font>

364
00:14:55,800 --> 00:15:01,020
just going<font color="#E5E5E5"> to finish up by saying</font><font color="#CCCCCC"> what</font>

365
00:14:57,330 --> 00:15:03,170
else not<font color="#E5E5E5"> cliques like first of all we</font>

366
00:15:01,020 --> 00:15:06,650
have to check<font color="#E5E5E5"> the null space argument</font>

367
00:15:03,170 --> 00:15:08,939
and this we do by<font color="#CCCCCC"> checking a</font><font color="#E5E5E5"> pairing</font>

368
00:15:06,650 --> 00:15:11,579
second we<font color="#E5E5E5"> need proof of knowledge and</font>

369
00:15:08,940 --> 00:15:12,750
this we do<font color="#CCCCCC"> by replicating</font><font color="#E5E5E5"> the thing</font>

370
00:15:11,580 --> 00:15:14,550
that's in the correct span<font color="#E5E5E5"> on to the</font>

371
00:15:12,750 --> 00:15:17,850
other<font color="#E5E5E5"> side</font><font color="#CCCCCC"> of the group</font><font color="#E5E5E5"> and checking</font>

372
00:15:14,550 --> 00:15:19,829
<font color="#E5E5E5">that with a pairing and third we need to</font>

373
00:15:17,850 --> 00:15:21,970
<font color="#CCCCCC">actually check that the circuit</font><font color="#E5E5E5"> has been</font>

374
00:15:19,830 --> 00:15:24,399
<font color="#E5E5E5">evaluated correctly</font>

375
00:15:21,970 --> 00:15:25,810
and I haven't<font color="#CCCCCC"> actually described how</font>

376
00:15:24,399 --> 00:15:29,649
this works but<font color="#E5E5E5"> the details are all in</font>

377
00:15:25,810 --> 00:15:32,258
the paper so feel free to check<font color="#E5E5E5"> out over</font>

378
00:15:29,649 --> 00:15:34,269
<font color="#CCCCCC">all our proof sighs just</font><font color="#E5E5E5"> has three group</font>

379
00:15:32,259 --> 00:15:37,750
elements<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> exactly matching</font>

380
00:15:34,269 --> 00:15:39,939
the<font color="#CCCCCC"> stake yup</font><font color="#E5E5E5"> we also require a linear</font>

381
00:15:37,750 --> 00:15:41,350
number of<font color="#CCCCCC"> group exponentiations</font><font color="#E5E5E5"> also</font>

382
00:15:39,939 --> 00:15:42,910
matching the<font color="#E5E5E5"> state of the art possibly</font>

383
00:15:41,350 --> 00:15:46,930
not<font color="#CCCCCC"> in terms</font><font color="#E5E5E5"> of constants but certainly</font>

384
00:15:42,910 --> 00:15:49,120
in terms<font color="#E5E5E5"> of asymptotics and our scheme</font>

385
00:15:46,930 --> 00:15:50,589
requires<font color="#CCCCCC"> five pairings for</font><font color="#E5E5E5"> the verifier</font>

386
00:15:49,120 --> 00:15:52,269
<font color="#CCCCCC">unlike the state of the art which</font>

387
00:15:50,589 --> 00:15:56,949
requires<font color="#CCCCCC"> four pairings so we're really</font>

388
00:15:52,269 --> 00:15:59,079
very<font color="#E5E5E5"> close so overall our</font><font color="#CCCCCC"> key</font>

389
00:15:56,949 --> 00:16:02,079
contribution is<font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> introduced</font>

390
00:15:59,079 --> 00:16:03,609
this notion of<font color="#E5E5E5"> update ability and we</font>

391
00:16:02,079 --> 00:16:05,979
have shown that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> is possible</font><font color="#E5E5E5"> to build</font>

392
00:16:03,610 --> 00:16:07,180
<font color="#E5E5E5">an updatable</font><font color="#CCCCCC"> and universal common</font>

393
00:16:05,980 --> 00:16:09,160
reference string from<font color="#E5E5E5"> which you can</font>

394
00:16:07,180 --> 00:16:12,910
<font color="#E5E5E5">build a zero knowledge snark which is</font>

395
00:16:09,160 --> 00:16:14,379
matching<font color="#CCCCCC"> the</font><font color="#E5E5E5"> state of the art this I've</font>

396
00:16:12,910 --> 00:16:16,910
mostly included because<font color="#CCCCCC"> I like the</font>

397
00:16:14,379 --> 00:16:21,630
picture<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

398
00:16:16,910 --> 00:16:21,630
[Applause]

