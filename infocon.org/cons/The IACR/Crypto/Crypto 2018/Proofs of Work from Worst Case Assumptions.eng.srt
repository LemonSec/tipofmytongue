1
00:00:06,189 --> 00:00:11,049
so let's dive<font color="#CCCCCC"> right in first I</font><font color="#E5E5E5"> have a</font>

2
00:00:09,580 --> 00:00:12,820
confession<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make I'm not actually</font>

3
00:00:11,049 --> 00:00:15,849
going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about Bitcoin in this talk</font>

4
00:00:12,820 --> 00:00:17,830
I'm not<font color="#E5E5E5"> going to talk about any sort of</font>

5
00:00:15,849 --> 00:00:20,250
motivating examples instead<font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to</font>

6
00:00:17,830 --> 00:00:23,500
use this time sort of<font color="#E5E5E5"> as a platform to</font>

7
00:00:20,250 --> 00:00:26,890
motivate a sort of larger program we

8
00:00:23,500 --> 00:00:30,880
have about where cryptography is the

9
00:00:26,890 --> 00:00:33,850
application of<font color="#E5E5E5"> complexity theory so what</font>

10
00:00:30,880 --> 00:00:35,950
do I mean<font color="#CCCCCC"> exactly so right</font><font color="#E5E5E5"> this is the</font>

11
00:00:33,850 --> 00:00:37,510
sort of thing this sort of<font color="#CCCCCC"> win-win</font>

12
00:00:35,950 --> 00:00:39,579
that's on the screen<font color="#E5E5E5"> here is the sort of</font>

13
00:00:37,510 --> 00:00:42,218
thing that naive grad students such as

14
00:00:39,579 --> 00:00:44,050
<font color="#CCCCCC">myself dreams of proving</font><font color="#E5E5E5"> you know</font>

15
00:00:42,219 --> 00:00:45,429
<font color="#E5E5E5">material</font><font color="#CCCCCC"> of statement of the form</font><font color="#E5E5E5"> like</font>

16
00:00:44,050 --> 00:00:48,248
we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> either</font><font color="#E5E5E5"> have interesting</font>

17
00:00:45,429 --> 00:00:49,960
cryptography or efficient Sat algorithms

18
00:00:48,249 --> 00:00:52,929
well you may<font color="#CCCCCC"> say like right we have</font>

19
00:00:49,960 --> 00:00:56,949
efficient sad algorithms so efficient

20
00:00:52,929 --> 00:00:58,600
worst-case algorithms<font color="#CCCCCC"> why would why do</font>

21
00:00:56,949 --> 00:01:00,099
we want to<font color="#E5E5E5"> win win like</font><font color="#CCCCCC"> this it's</font>

22
00:00:58,600 --> 00:01:02,379
<font color="#CCCCCC">probably pretty obvious right</font><font color="#E5E5E5"> we have</font>

23
00:01:00,100 --> 00:01:06,280
this<font color="#E5E5E5"> amazing</font><font color="#CCCCCC"> rich theory of</font>

24
00:01:02,379 --> 00:01:09,250
<font color="#CCCCCC">np-completeness</font><font color="#E5E5E5"> so that right if you</font>

25
00:01:06,280 --> 00:01:11,980
break the<font color="#E5E5E5"> cryptographic scheme then you</font>

26
00:01:09,250 --> 00:01:13,690
have far-reaching consequences<font color="#CCCCCC"> right</font>

27
00:01:11,980 --> 00:01:15,790
right unfortunately<font color="#CCCCCC"> we know there are</font>

28
00:01:13,690 --> 00:01:17,980
explicit barriers to too<font color="#E5E5E5"> many</font><font color="#CCCCCC"> people</font>

29
00:01:15,790 --> 00:01:19,720
<font color="#E5E5E5">sitting in this audience to proving</font>

30
00:01:17,980 --> 00:01:21,880
statements like this we can't even<font color="#E5E5E5"> prove</font>

31
00:01:19,720 --> 00:01:25,480
we<font color="#E5E5E5"> know barriers to be improving average</font>

32
00:01:21,880 --> 00:01:28,240
<font color="#E5E5E5">case hardness from</font><font color="#CCCCCC"> np-hard</font><font color="#E5E5E5"> risk so in</font>

33
00:01:25,480 --> 00:01:31,330
this work we sort of<font color="#CCCCCC"> we consider the</font>

34
00:01:28,240 --> 00:01:32,619
following<font color="#E5E5E5"> sort of win-win situation we</font>

35
00:01:31,330 --> 00:01:33,760
prove<font color="#E5E5E5"> theorems statements</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> sort</font>

36
00:01:32,620 --> 00:01:36,760
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> form we</font><font color="#CCCCCC"> have interesting</font>

37
00:01:33,760 --> 00:01:40,000
cryptography or non-trivial Sat<font color="#CCCCCC"> speedups</font>

38
00:01:36,760 --> 00:01:41,650
<font color="#E5E5E5">right again these set speed ups are only</font>

39
00:01:40,000 --> 00:01:44,680
interesting if they're on<font color="#E5E5E5"> the worst case</font>

40
00:01:41,650 --> 00:01:46,480
and why do we<font color="#CCCCCC"> think</font><font color="#E5E5E5"> this is particularly</font>

41
00:01:44,680 --> 00:01:50,050
<font color="#E5E5E5">interesting because</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> sort of connects</font>

42
00:01:46,480 --> 00:01:51,640
to this emerging theory of<font color="#CCCCCC"> fine-grained</font>

43
00:01:50,050 --> 00:01:55,660
complexity which there's<font color="#E5E5E5"> been an</font>

44
00:01:51,640 --> 00:01:57,400
explosion<font color="#E5E5E5"> in recent years so before we</font>

45
00:01:55,660 --> 00:02:01,240
go any<font color="#E5E5E5"> further what exactly do I mean by</font>

46
00:01:57,400 --> 00:02:03,280
interesting<font color="#E5E5E5"> cryptography here it's right</font>

47
00:02:01,240 --> 00:02:05,050
what<font color="#E5E5E5"> we're going to talk about today is</font>

48
00:02:03,280 --> 00:02:07,210
<font color="#E5E5E5">proof of work right this is a notion</font>

49
00:02:05,050 --> 00:02:10,690
introduced by<font color="#CCCCCC"> cynthia torque</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> moanin</font>

50
00:02:07,210 --> 00:02:13,358
<font color="#CCCCCC">or</font><font color="#E5E5E5"> and 92 and in the proof-of-work</font>

51
00:02:10,690 --> 00:02:15,519
scheme<font color="#E5E5E5"> first we're going to parametrize</font>

52
00:02:13,359 --> 00:02:17,590
this proof<font color="#E5E5E5"> work scheme with a parameter</font>

53
00:02:15,519 --> 00:02:18,100
<font color="#E5E5E5">T which</font><font color="#CCCCCC"> is going to quantify the sort of</font>

54
00:02:17,590 --> 00:02:20,860
amount

55
00:02:18,100 --> 00:02:22,690
work that we want proven<font color="#E5E5E5"> we're gonna</font>

56
00:02:20,860 --> 00:02:24,970
have two players approver in a verifier

57
00:02:22,690 --> 00:02:27,010
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Fair fire and it's</font><font color="#E5E5E5"> going to consist</font>

58
00:02:24,970 --> 00:02:28,330
of three<font color="#E5E5E5"> algorithms</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> first we're</font>

59
00:02:27,010 --> 00:02:29,679
<font color="#E5E5E5">gonna have challenge generation</font>

60
00:02:28,330 --> 00:02:31,030
algorithm it's gonna generate<font color="#CCCCCC"> a</font>

61
00:02:29,680 --> 00:02:32,500
challenge for<font color="#E5E5E5"> the purposes of this talk</font>

62
00:02:31,030 --> 00:02:37,510
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> just going to be select</font>

63
00:02:32,500 --> 00:02:40,120
something<font color="#E5E5E5"> uniformly the prover is going</font>

64
00:02:37,510 --> 00:02:42,519
to take this<font color="#CCCCCC"> challenge and run this</font>

65
00:02:40,120 --> 00:02:45,580
algorithm proof - proof<font color="#E5E5E5"> produce a proof</font>

66
00:02:42,520 --> 00:02:48,550
and the verifier will then run this

67
00:02:45,580 --> 00:02:50,530
algorithm verify which verifies that the

68
00:02:48,550 --> 00:02:53,860
proof is indeed correct<font color="#CCCCCC"> right and what</font>

69
00:02:50,530 --> 00:02:56,610
sort<font color="#CCCCCC"> of properties do we want here first</font>

70
00:02:53,860 --> 00:03:00,250
<font color="#E5E5E5">we want efficiency the honest prover</font>

71
00:02:56,610 --> 00:03:02,710
should basically<font color="#E5E5E5"> run in time T and the</font>

72
00:03:00,250 --> 00:03:06,370
verifier should be very efficient<font color="#E5E5E5"> here</font>

73
00:03:02,710 --> 00:03:10,120
<font color="#E5E5E5">linear in this parameter and my</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> is</font>

74
00:03:06,370 --> 00:03:12,280
going<font color="#E5E5E5"> to be a function we want</font>

75
00:03:10,120 --> 00:03:14,770
completeness<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> honours</font><font color="#E5E5E5"> proofer</font>

76
00:03:12,280 --> 00:03:17,050
actually works it actually convinces the

77
00:03:14,770 --> 00:03:20,560
verifier he always says yes<font color="#E5E5E5"> when you run</font>

78
00:03:17,050 --> 00:03:23,620
the honest prover and finally we want

79
00:03:20,560 --> 00:03:25,960
hardness right that you can't cheat<font color="#CCCCCC"> if</font>

80
00:03:23,620 --> 00:03:29,170
you do less<font color="#CCCCCC"> than T work</font><font color="#E5E5E5"> you're unable to</font>

81
00:03:25,960 --> 00:03:32,620
<font color="#E5E5E5">convince the verifier but let's dive</font>

82
00:03:29,170 --> 00:03:33,970
into this a little<font color="#CCCCCC"> bit further instead</font>

83
00:03:32,620 --> 00:03:36,060
we want to consider<font color="#E5E5E5"> a slightly more</font>

84
00:03:33,970 --> 00:03:38,260
robust notion here where we don't<font color="#E5E5E5"> want</font>

85
00:03:36,060 --> 00:03:41,050
<font color="#E5E5E5">consider the situation where a</font><font color="#CCCCCC"> verifier</font>

86
00:03:38,260 --> 00:03:42,940
<font color="#CCCCCC">is interacting with a sort of</font><font color="#E5E5E5"> Meg</font>

87
00:03:41,050 --> 00:03:47,290
approver<font color="#CCCCCC"> and he sends</font><font color="#E5E5E5"> this prover and</font>

88
00:03:42,940 --> 00:03:50,109
challenges all at once and the approver

89
00:03:47,290 --> 00:03:53,109
sends back and proofs<font color="#CCCCCC"> back in return</font>

90
00:03:50,110 --> 00:03:55,870
<font color="#CCCCCC">right</font><font color="#E5E5E5"> we don't want we want this this</font>

91
00:03:53,110 --> 00:03:58,540
<font color="#E5E5E5">prove</font><font color="#CCCCCC"> er to be forced to</font><font color="#E5E5E5"> work basically</font>

92
00:03:55,870 --> 00:04:01,270
<font color="#CCCCCC">the best you can do is to produce proofs</font>

93
00:03:58,540 --> 00:04:03,040
for each individual challenge one by one

94
00:04:01,270 --> 00:04:05,140
<font color="#E5E5E5">right and that's sort of captured by</font>

95
00:04:03,040 --> 00:04:08,799
<font color="#CCCCCC">this statement right given em challenges</font>

96
00:04:05,140 --> 00:04:12,399
batch processing event proofs<font color="#E5E5E5"> in time</font>

97
00:04:08,800 --> 00:04:15,250
<font color="#E5E5E5">less than</font><font color="#CCCCCC"> M times T this parameter</font><font color="#E5E5E5"> T</font>

98
00:04:12,400 --> 00:04:17,920
again<font color="#E5E5E5"> time shaving off epsilon factor</font>

99
00:04:15,250 --> 00:04:21,940
<font color="#CCCCCC">from</font><font color="#E5E5E5"> this parameter</font><font color="#CCCCCC"> T succeeds with low</font>

100
00:04:17,920 --> 00:04:23,620
probability<font color="#CCCCCC"> okay this epsilon we're</font>

101
00:04:21,940 --> 00:04:26,770
going to see<font color="#CCCCCC"> why are this where this</font>

102
00:04:23,620 --> 00:04:29,420
comes from<font color="#E5E5E5"> loosely in a couple</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> slides</font>

103
00:04:26,770 --> 00:04:31,880
so<font color="#CCCCCC"> right</font>

104
00:04:29,420 --> 00:04:33,740
sort of the statements we<font color="#CCCCCC"> proved in this</font>

105
00:04:31,880 --> 00:04:37,040
work can sort<font color="#E5E5E5"> of fit into this generic</font>

106
00:04:33,740 --> 00:04:39,170
<font color="#E5E5E5">sort of bad lid format right assuming</font>

107
00:04:37,040 --> 00:04:41,270
some<font color="#CCCCCC"> worst-case conjecture from</font>

108
00:04:39,170 --> 00:04:43,850
fine-grained complexity it's not totally

109
00:04:41,270 --> 00:04:45,289
generic<font color="#E5E5E5"> we instantiate</font><font color="#CCCCCC"> it with</font><font color="#E5E5E5"> specific</font>

110
00:04:43,850 --> 00:04:47,690
conjectures but there are a<font color="#E5E5E5"> variety of</font>

111
00:04:45,290 --> 00:04:49,730
them<font color="#E5E5E5"> then this recipe</font><font color="#CCCCCC"> that I'm about to</font>

112
00:04:47,690 --> 00:04:52,219
<font color="#E5E5E5">describe to you yields a proof-of-work</font>

113
00:04:49,730 --> 00:04:56,620
scheme that requires amount of work that

114
00:04:52,220 --> 00:04:56,620
<font color="#E5E5E5">corresponds to the conjectured hardness</font>

115
00:04:56,740 --> 00:05:01,910
so<font color="#E5E5E5"> right what's the</font><font color="#CCCCCC"> roadmap</font><font color="#E5E5E5"> for the rest</font>

116
00:04:59,270 --> 00:05:03,200
of<font color="#E5E5E5"> this talk first I'm going to guide</font>

117
00:05:01,910 --> 00:05:04,550
you through<font color="#CCCCCC"> some of these assumptions</font>

118
00:05:03,200 --> 00:05:06,200
<font color="#CCCCCC">some of these conjectures</font><font color="#E5E5E5"> from</font>

119
00:05:04,550 --> 00:05:08,690
<font color="#CCCCCC">fine-grained complexity hopefully you</font>

120
00:05:06,200 --> 00:05:11,659
were at Virginia's talk on Sunday<font color="#E5E5E5"> but if</font>

121
00:05:08,690 --> 00:05:13,030
you want or<font color="#E5E5E5"> you don't remember</font><font color="#CCCCCC"> I'll jog</font>

122
00:05:11,660 --> 00:05:15,710
your memory

123
00:05:13,030 --> 00:05:17,900
second we're going to instantiate this

124
00:05:15,710 --> 00:05:20,419
recipe<font color="#CCCCCC"> that I alluded</font><font color="#E5E5E5"> to the previous</font>

125
00:05:17,900 --> 00:05:23,109
slide<font color="#CCCCCC"> with a specific example</font><font color="#E5E5E5"> orthogonal</font>

126
00:05:20,420 --> 00:05:26,030
vectors<font color="#E5E5E5"> and sort of carry it through</font><font color="#CCCCCC"> and</font>

127
00:05:23,110 --> 00:05:27,530
finally if we<font color="#E5E5E5"> have time we'll talk about</font>

128
00:05:26,030 --> 00:05:31,669
<font color="#E5E5E5">some nice properties that come out of</font>

129
00:05:27,530 --> 00:05:33,590
<font color="#CCCCCC">this</font><font color="#E5E5E5"> specific proof of</font><font color="#CCCCCC"> Orcs game so</font>

130
00:05:31,670 --> 00:05:35,090
<font color="#E5E5E5">right</font><font color="#CCCCCC"> fine-grain complexity some of you</font>

131
00:05:33,590 --> 00:05:36,979
may<font color="#E5E5E5"> not be familiar</font><font color="#CCCCCC"> with this notion</font><font color="#E5E5E5"> so</font>

132
00:05:35,090 --> 00:05:40,159
what is fine-grained<font color="#CCCCCC"> complexity sort of</font>

133
00:05:36,980 --> 00:05:42,260
in a<font color="#E5E5E5"> nutshell</font><font color="#CCCCCC"> right follows from this</font>

134
00:05:40,160 --> 00:05:45,140
sort of basic observation that<font color="#E5E5E5"> for many</font>

135
00:05:42,260 --> 00:05:47,240
natural problems this<font color="#E5E5E5"> would basically</font>

136
00:05:45,140 --> 00:05:49,190
<font color="#E5E5E5">the</font><font color="#CCCCCC"> brute-force</font><font color="#E5E5E5"> procedure are oftentimes</font>

137
00:05:47,240 --> 00:05:50,510
<font color="#CCCCCC">this obvious procedure is essentially</font>

138
00:05:49,190 --> 00:05:53,780
comparable to the state-of-the-art

139
00:05:50,510 --> 00:05:55,580
<font color="#E5E5E5">despite lots of work being done by very</font>

140
00:05:53,780 --> 00:05:57,859
very<font color="#CCCCCC"> intelligent people</font><font color="#E5E5E5"> to improve these</font>

141
00:05:55,580 --> 00:06:01,190
parameters<font color="#E5E5E5"> and what do I mean by</font>

142
00:05:57,860 --> 00:06:03,380
essentially<font color="#E5E5E5"> I mean that if brute force</font>

143
00:06:01,190 --> 00:06:06,290
like like searching<font color="#E5E5E5"> over the entire</font>

144
00:06:03,380 --> 00:06:08,710
solution space takes time T then it's

145
00:06:06,290 --> 00:06:11,720
hard to<font color="#E5E5E5"> shave off an epsilon factor</font>

146
00:06:08,710 --> 00:06:15,489
<font color="#E5E5E5">right even the best algorithms that we</font>

147
00:06:11,720 --> 00:06:18,920
<font color="#CCCCCC">have failed to</font><font color="#E5E5E5"> even improve by this much</font>

148
00:06:15,490 --> 00:06:21,020
and so this is where<font color="#E5E5E5"> this epsilon on the</font>

149
00:06:18,920 --> 00:06:25,460
in the hardness definition it's coming

150
00:06:21,020 --> 00:06:29,659
from<font color="#CCCCCC"> actually so right this observation</font>

151
00:06:25,460 --> 00:06:32,000
<font color="#E5E5E5">led to sort of the theory we're sort of</font>

152
00:06:29,660 --> 00:06:33,590
<font color="#E5E5E5">with people we have many including</font>

153
00:06:32,000 --> 00:06:35,090
Virginia<font color="#E5E5E5"> proving statements as a form</font>

154
00:06:33,590 --> 00:06:38,330
<font color="#CCCCCC">that if you can improve the exact</font>

155
00:06:35,090 --> 00:06:41,210
complexity of<font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> Y then you can</font>

156
00:06:38,330 --> 00:06:45,039
improve the exact complexity of the

157
00:06:41,210 --> 00:06:45,039
problem<font color="#CCCCCC"> X or vice-versa I guess</font>

158
00:06:45,490 --> 00:06:50,330
right and how do you<font color="#E5E5E5"> prove this sort of</font>

159
00:06:47,660 --> 00:06:52,220
<font color="#E5E5E5">thing they have this framework</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> fine</font>

160
00:06:50,330 --> 00:06:53,990
<font color="#E5E5E5">grained reductions which it's something</font>

161
00:06:52,220 --> 00:06:57,380
that's probably<font color="#E5E5E5"> relatively familiar to</font>

162
00:06:53,990 --> 00:07:01,520
people<font color="#E5E5E5"> cryptographers is sort</font><font color="#CCCCCC"> of tight</font>

163
00:06:57,380 --> 00:07:02,930
reductions in disguise and this theory

164
00:07:01,520 --> 00:07:04,190
so maybe this<font color="#E5E5E5"> arrow is</font><font color="#CCCCCC"> going in the</font>

165
00:07:02,930 --> 00:07:06,560
wrong direction<font color="#E5E5E5"> this theory is led to</font>

166
00:07:04,190 --> 00:07:09,080
<font color="#E5E5E5">their conjectures</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> for many of these</font>

167
00:07:06,560 --> 00:07:12,280
natural problems<font color="#E5E5E5"> this brute force this</font>

168
00:07:09,080 --> 00:07:15,590
simple obvious<font color="#E5E5E5"> algorithm is in fact</font>

169
00:07:12,280 --> 00:07:19,340
<font color="#E5E5E5">essentially</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> best you can do up</font><font color="#CCCCCC"> to</font>

170
00:07:15,590 --> 00:07:21,229
small polynomial factors so<font color="#CCCCCC"> right what</font>

171
00:07:19,340 --> 00:07:25,580
sorts of problems are<font color="#CCCCCC"> we talking about</font>

172
00:07:21,230 --> 00:07:27,740
<font color="#E5E5E5">if I</font><font color="#CCCCCC"> make like the most and</font><font color="#E5E5E5"> one of the</font>

173
00:07:25,580 --> 00:07:30,409
most important<font color="#CCCCCC"> ones</font><font color="#E5E5E5"> this case</font><font color="#CCCCCC"> at its</font>

174
00:07:27,740 --> 00:07:32,120
right we have a case<font color="#CCCCCC"> enf CNF with clause</font>

175
00:07:30,410 --> 00:07:35,180
with<font color="#E5E5E5"> K we just want to know if it's</font>

176
00:07:32,120 --> 00:07:37,670
satisfiable so lots of work has<font color="#CCCCCC"> been</font>

177
00:07:35,180 --> 00:07:39,710
<font color="#CCCCCC">done on</font><font color="#E5E5E5"> this problem obviously and so</font>

178
00:07:37,670 --> 00:07:43,160
far the best<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we know how to</font>

179
00:07:39,710 --> 00:07:45,530
do is essentially takes two to the end

180
00:07:43,160 --> 00:07:47,600
time we can<font color="#E5E5E5"> barely shave off anything</font>

181
00:07:45,530 --> 00:07:50,469
<font color="#E5E5E5">not even a constant factor in the</font>

182
00:07:47,600 --> 00:07:55,550
exponent<font color="#E5E5E5"> if you consider K increasing</font>

183
00:07:50,470 --> 00:07:57,950
and so<font color="#CCCCCC"> this led</font><font color="#E5E5E5"> Russell in</font><font color="#CCCCCC"> pegaso and</font>

184
00:07:55,550 --> 00:07:59,660
Patwari to formulate<font color="#E5E5E5"> what is known as</font>

185
00:07:57,950 --> 00:08:01,789
the strong exponential time hypothesis

186
00:07:59,660 --> 00:08:03,770
<font color="#CCCCCC">this</font><font color="#E5E5E5"> says that for any epsilon there</font>

187
00:08:01,790 --> 00:08:06,950
exists a<font color="#E5E5E5"> K such that case that cannot be</font>

188
00:08:03,770 --> 00:08:11,810
<font color="#E5E5E5">solved in time less than 2</font><font color="#CCCCCC"> to the 1</font>

189
00:08:06,950 --> 00:08:15,229
minus epsilon to the<font color="#CCCCCC"> a times n what</font><font color="#E5E5E5"> else</font>

190
00:08:11,810 --> 00:08:17,180
do we have<font color="#CCCCCC"> another sort of foundational</font>

191
00:08:15,230 --> 00:08:19,580
problem here is<font color="#E5E5E5"> orthogonal vectors</font>

192
00:08:17,180 --> 00:08:22,940
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> so we have n 2 sets of n vectors</font>

193
00:08:19,580 --> 00:08:25,580
<font color="#E5E5E5">each a very small dimension D D you</font>

194
00:08:22,940 --> 00:08:28,550
<font color="#E5E5E5">should think of</font><font color="#CCCCCC"> as poly log right and 0</font>

195
00:08:25,580 --> 00:08:30,530
1 0 1 vectors<font color="#E5E5E5"> and all we're asking is is</font>

196
00:08:28,550 --> 00:08:32,599
<font color="#CCCCCC">there a vector in U and a vector in V</font>

197
00:08:30,530 --> 00:08:35,770
such that the inner product<font color="#CCCCCC"> is 0 right</font>

198
00:08:32,599 --> 00:08:39,469
<font color="#E5E5E5">this is sort of asking this subset</font>

199
00:08:35,770 --> 00:08:41,960
disjoint in this question and<font color="#CCCCCC"> write</font>

200
00:08:39,469 --> 00:08:44,600
again<font color="#CCCCCC"> the</font><font color="#E5E5E5"> best that we know how to do is</font>

201
00:08:41,960 --> 00:08:49,880
essentially enumerate over<font color="#CCCCCC"> all pairs in</font>

202
00:08:44,600 --> 00:08:54,620
check<font color="#E5E5E5"> and more or less right and this is</font>

203
00:08:49,880 --> 00:08:56,990
in the<font color="#E5E5E5"> worst case and right and so right</font>

204
00:08:54,620 --> 00:08:59,540
this is led<font color="#E5E5E5"> Brian Williams in</font>

205
00:08:56,990 --> 00:09:02,300
<font color="#E5E5E5">2005</font><font color="#CCCCCC"> to conjecture that this problem</font>

206
00:08:59,540 --> 00:09:06,140
<font color="#E5E5E5">fundamentally requires quadratic time</font>

207
00:09:02,300 --> 00:09:08,449
when D is slightly<font color="#E5E5E5"> super logarithmic and</font>

208
00:09:06,140 --> 00:09:12,860
in fact<font color="#E5E5E5"> the strong exponential time</font>

209
00:09:08,450 --> 00:09:14,420
hypothesis implies this conjecture<font color="#CCCCCC"> right</font>

210
00:09:12,860 --> 00:09:16,610
there's many<font color="#E5E5E5"> other</font><font color="#CCCCCC"> examples for example</font>

211
00:09:14,420 --> 00:09:18,680
<font color="#CCCCCC">you can generalize the previous problem</font>

212
00:09:16,610 --> 00:09:20,780
and consider<font color="#CCCCCC"> that I would call it what</font>

213
00:09:18,680 --> 00:09:23,300
is called the<font color="#CCCCCC"> KY is inner product here</font>

214
00:09:20,780 --> 00:09:26,199
which<font color="#CCCCCC"> basically involves</font><font color="#E5E5E5"> multiplying</font>

215
00:09:23,300 --> 00:09:30,229
<font color="#E5E5E5">component-wise across your vectors and</font>

216
00:09:26,200 --> 00:09:32,030
this problem<font color="#E5E5E5"> is conjectured to</font><font color="#CCCCCC"> be n to</font>

217
00:09:30,230 --> 00:09:34,760
the K hard<font color="#CCCCCC"> right the best you can</font><font color="#E5E5E5"> do is</font>

218
00:09:32,030 --> 00:09:37,850
<font color="#E5E5E5">enumerate</font><font color="#CCCCCC"> over all</font><font color="#E5E5E5"> K tuples this is</font>

219
00:09:34,760 --> 00:09:41,420
again<font color="#E5E5E5"> implied by says for all constant K</font>

220
00:09:37,850 --> 00:09:43,370
this<font color="#E5E5E5"> is implied</font><font color="#CCCCCC"> by says right there's</font>

221
00:09:41,420 --> 00:09:45,740
even more examples all<font color="#CCCCCC"> pair shortest</font>

222
00:09:43,370 --> 00:09:47,660
paths like there's been basically<font color="#E5E5E5"> no</font>

223
00:09:45,740 --> 00:09:50,960
improvement over the algorithm you learn

224
00:09:47,660 --> 00:09:52,459
and algorithms<font color="#CCCCCC"> 101 3 sub 0 way triangle</font>

225
00:09:50,960 --> 00:09:54,170
<font color="#E5E5E5">I'm not going to go into the definitions</font>

226
00:09:52,460 --> 00:09:57,770
there's a lot all<font color="#E5E5E5"> right so let's</font><font color="#CCCCCC"> zoom</font>

227
00:09:54,170 --> 00:09:59,870
out a second and look sort of it this<font color="#E5E5E5"> is</font>

228
00:09:57,770 --> 00:10:01,670
<font color="#CCCCCC">actually a relatively</font><font color="#E5E5E5"> small map of this</font>

229
00:09:59,870 --> 00:10:04,460
<font color="#E5E5E5">area</font><font color="#CCCCCC"> just the stuff that's relevant to</font>

230
00:10:01,670 --> 00:10:08,180
this line of<font color="#CCCCCC"> work and so this is a map</font>

231
00:10:04,460 --> 00:10:09,980
<font color="#CCCCCC">of sort of hardness conjecture islands I</font>

232
00:10:08,180 --> 00:10:11,030
guess right so these arrows represent

233
00:10:09,980 --> 00:10:14,690
these<font color="#E5E5E5"> fine-grained</font>

234
00:10:11,030 --> 00:10:17,839
reductions or implications and I<font color="#E5E5E5"> don't</font>

235
00:10:14,690 --> 00:10:19,910
know how to write so over here on<font color="#CCCCCC"> the</font>

236
00:10:17,840 --> 00:10:23,210
<font color="#CCCCCC">Left right we have these conjecture</font>

237
00:10:19,910 --> 00:10:25,640
worst case conjectures then in the

238
00:10:23,210 --> 00:10:28,460
<font color="#E5E5E5">middle we have these</font><font color="#CCCCCC"> reductions to</font><font color="#E5E5E5"> these</font>

239
00:10:25,640 --> 00:10:31,160
algebra tiles problems from previous

240
00:10:28,460 --> 00:10:33,920
work<font color="#CCCCCC"> of ours from</font><font color="#E5E5E5"> a year ago</font>

241
00:10:31,160 --> 00:10:35,839
where<font color="#E5E5E5"> we were able</font><font color="#CCCCCC"> to succeed in proving</font>

242
00:10:33,920 --> 00:10:41,000
that there in fact<font color="#CCCCCC"> average</font><font color="#E5E5E5"> heart on</font>

243
00:10:35,840 --> 00:10:42,530
average and<font color="#E5E5E5"> well not prove</font><font color="#CCCCCC"> that they're</font>

244
00:10:41,000 --> 00:10:44,600
hard on<font color="#E5E5E5"> a conditionally hard on average</font>

245
00:10:42,530 --> 00:10:46,459
<font color="#E5E5E5">right if you can this these networks of</font>

246
00:10:44,600 --> 00:10:48,860
conditions right if you can prove any<font color="#E5E5E5"> of</font>

247
00:10:46,460 --> 00:10:50,870
these islands<font color="#E5E5E5"> is in fact hard right all</font>

248
00:10:48,860 --> 00:10:53,720
<font color="#CCCCCC">of their</font><font color="#E5E5E5"> descendants will you have</font>

249
00:10:50,870 --> 00:10:56,060
equivalent hardness<font color="#E5E5E5"> and you can also in</font>

250
00:10:53,720 --> 00:10:57,800
<font color="#E5E5E5">this work we prove</font><font color="#CCCCCC"> that these algebra</font>

251
00:10:56,060 --> 00:10:59,180
tiles problems in the middle are also

252
00:10:57,800 --> 00:11:01,849
non amortizable

253
00:10:59,180 --> 00:11:06,260
or we prove<font color="#E5E5E5"> it direct sum theorem for</font>

254
00:11:01,850 --> 00:11:08,600
them and<font color="#E5E5E5"> finally we also prove that they</font>

255
00:11:06,260 --> 00:11:10,120
<font color="#CCCCCC">take if these hardness conjectures imply</font>

256
00:11:08,600 --> 00:11:13,600
various proofs<font color="#E5E5E5"> of work</font>

257
00:11:10,120 --> 00:11:15,970
schemes<font color="#CCCCCC"> on the far right let's keep</font>

258
00:11:13,600 --> 00:11:18,070
going<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> right so I should mention</font><font color="#CCCCCC"> that</font>

259
00:11:15,970 --> 00:11:19,690
anything<font color="#E5E5E5"> above cubic these proof-of-work</font>

260
00:11:18,070 --> 00:11:21,970
schemes are not<font color="#E5E5E5"> exactly what I described</font>

261
00:11:19,690 --> 00:11:23,529
<font color="#E5E5E5">they're interactive and so if you want</font>

262
00:11:21,970 --> 00:11:27,490
<font color="#E5E5E5">to compress them the best way we know</font>

263
00:11:23,529 --> 00:11:28,930
how<font color="#E5E5E5"> it is to apply for</font><font color="#CCCCCC"> Amir</font><font color="#E5E5E5"> okay so for</font>

264
00:11:27,490 --> 00:11:31,630
the purpose<font color="#E5E5E5"> of this talk which there's</font>

265
00:11:28,930 --> 00:11:34,380
not<font color="#CCCCCC"> a ton</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> time left but we're going</font>

266
00:11:31,630 --> 00:11:37,900
<font color="#E5E5E5">to focus on one</font><font color="#CCCCCC"> specific sort of</font>

267
00:11:34,380 --> 00:11:40,990
instantiation<font color="#CCCCCC"> of this Madlib orthogonal</font>

268
00:11:37,900 --> 00:11:43,689
vectors right<font color="#E5E5E5"> oh I should mention</font><font color="#CCCCCC"> also</font>

269
00:11:40,990 --> 00:11:46,450
that read very recently

270
00:11:43,690 --> 00:11:49,660
Oded<font color="#E5E5E5"> gold</font><font color="#CCCCCC"> right and wrong a guy Ross</font>

271
00:11:46,450 --> 00:11:51,880
<font color="#CCCCCC">Bloom showed</font><font color="#E5E5E5"> worst case to average</font>

272
00:11:49,660 --> 00:11:53,740
reduction<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the problem of counting</font>

273
00:11:51,880 --> 00:11:55,810
<font color="#CCCCCC">tee</font><font color="#E5E5E5"> quakes</font><font color="#CCCCCC"> to the problem of twenty</font>

274
00:11:53,740 --> 00:12:00,460
<font color="#CCCCCC">clinks not an algebra tiles version and</font>

275
00:11:55,810 --> 00:12:02,589
this also leads to<font color="#E5E5E5"> a</font><font color="#CCCCCC"> proof-of-work</font><font color="#E5E5E5"> right</font>

276
00:12:00,460 --> 00:12:04,810
<font color="#CCCCCC">so what are we doing again</font><font color="#E5E5E5"> reminder</font>

277
00:12:02,589 --> 00:12:06,730
<font color="#CCCCCC">we're showing</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> there's diagonal</font>

278
00:12:04,810 --> 00:12:10,119
vectors conjecture<font color="#E5E5E5"> or says whatever you</font>

279
00:12:06,730 --> 00:12:11,589
like<font color="#E5E5E5"> if we apply the recipe</font><font color="#CCCCCC"> that I'm</font>

280
00:12:10,120 --> 00:12:14,950
about to<font color="#E5E5E5"> describe gives you a</font>

281
00:12:11,589 --> 00:12:17,440
quadratically hard proof of work so what

282
00:12:14,950 --> 00:12:19,300
is the<font color="#CCCCCC"> recipe first</font><font color="#E5E5E5"> we're going to</font>

283
00:12:17,440 --> 00:12:21,900
represent<font color="#E5E5E5"> orthogonal vectors as a low</font>

284
00:12:19,300 --> 00:12:24,160
degree polynomial which<font color="#E5E5E5"> I'll call</font><font color="#CCCCCC"> fov</font>

285
00:12:21,900 --> 00:12:26,650
right what is the benefit of doing<font color="#E5E5E5"> this</font>

286
00:12:24,160 --> 00:12:29,430
<font color="#E5E5E5">first we can apply</font><font color="#CCCCCC"> fine-grained</font>

287
00:12:26,650 --> 00:12:32,110
worst-case to<font color="#E5E5E5"> average case reduction</font>

288
00:12:29,430 --> 00:12:33,550
second we<font color="#E5E5E5"> can prove a direct</font><font color="#CCCCCC"> sum theorem</font>

289
00:12:32,110 --> 00:12:35,950
which<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> fancy way of saying the</font>

290
00:12:33,550 --> 00:12:37,569
<font color="#E5E5E5">problem is not advertised</font><font color="#CCCCCC"> Abul and then</font>

291
00:12:35,950 --> 00:12:39,610
<font color="#E5E5E5">we'll proceed to</font><font color="#CCCCCC"> the second</font><font color="#E5E5E5"> step which</font>

292
00:12:37,570 --> 00:12:43,900
is<font color="#E5E5E5"> efficiently delegate evaluation of</font>

293
00:12:39,610 --> 00:12:47,230
<font color="#CCCCCC">FOV to the prover using some tricks</font><font color="#E5E5E5"> from</font>

294
00:12:43,900 --> 00:12:49,319
Ryan Williams and basic<font color="#E5E5E5"> some</font><font color="#CCCCCC"> check</font>

295
00:12:47,230 --> 00:12:51,970
protocol from say IP versus Pittsburgh

296
00:12:49,320 --> 00:12:54,279
<font color="#E5E5E5">equals</font><font color="#CCCCCC"> pspace right and this</font><font color="#E5E5E5"> will allow</font>

297
00:12:51,970 --> 00:12:55,839
<font color="#CCCCCC">the prover to the verifier to check</font><font color="#E5E5E5"> that</font>

298
00:12:54,279 --> 00:13:00,730
the<font color="#E5E5E5"> prove were actually verified this</font>

299
00:12:55,839 --> 00:13:03,900
hard to batch polynomial and so if<font color="#E5E5E5"> he</font>

300
00:13:00,730 --> 00:13:05,860
can do this too quickly<font color="#E5E5E5"> he broke the</font>

301
00:13:03,900 --> 00:13:09,939
<font color="#CCCCCC">earlier he can break the earlier</font>

302
00:13:05,860 --> 00:13:12,040
<font color="#E5E5E5">conjecture right so how are we can</font>

303
00:13:09,940 --> 00:13:15,880
represent orthogonal vectors<font color="#E5E5E5"> as a</font>

304
00:13:12,040 --> 00:13:17,920
polynomial<font color="#CCCCCC"> so what does this mean in the</font>

305
00:13:15,880 --> 00:13:19,300
first<font color="#CCCCCC"> place right this</font><font color="#E5E5E5"> means so we're</font>

306
00:13:17,920 --> 00:13:22,060
gonna say that<font color="#CCCCCC"> it's represented as</font>

307
00:13:19,300 --> 00:13:22,660
polynomial if you V has orthogonal

308
00:13:22,060 --> 00:13:24,910
vectors

309
00:13:22,660 --> 00:13:28,870
then this polynomial<font color="#E5E5E5"> should not evaluate</font>

310
00:13:24,910 --> 00:13:30,910
to<font color="#CCCCCC"> zero and otherwise it should so right</font>

311
00:13:28,870 --> 00:13:32,290
<font color="#E5E5E5">to recall what orthogonal vectors</font>

312
00:13:30,910 --> 00:13:35,009
problem looks like<font color="#E5E5E5"> we have these two</font>

313
00:13:32,290 --> 00:13:40,509
matrices<font color="#E5E5E5"> of</font><font color="#CCCCCC"> zero one vectors for now</font><font color="#E5E5E5"> and</font>

314
00:13:35,009 --> 00:13:41,920
we<font color="#CCCCCC"> just want to</font><font color="#E5E5E5"> determine is the inner</font>

315
00:13:40,509 --> 00:13:43,569
<font color="#E5E5E5">product of any of these two</font><font color="#CCCCCC"> vectors</font><font color="#E5E5E5"> zero</font>

316
00:13:41,920 --> 00:13:45,250
<font color="#E5E5E5">right it already looks like</font><font color="#CCCCCC"> a polynomial</font>

317
00:13:43,569 --> 00:13:47,259
<font color="#E5E5E5">but it's sort of equal to zero at the</font>

318
00:13:45,250 --> 00:13:49,839
wrong time<font color="#E5E5E5"> so we're</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> apply</font><font color="#CCCCCC"> a</font>

319
00:13:47,259 --> 00:13:52,000
trick<font color="#E5E5E5"> flip things around so</font><font color="#CCCCCC"> now it's</font><font color="#E5E5E5"> one</font>

320
00:13:49,839 --> 00:13:52,810
<font color="#E5E5E5">if the inner product is zero zero</font>

321
00:13:52,000 --> 00:13:55,029
otherwise

322
00:13:52,810 --> 00:13:57,819
<font color="#CCCCCC">right this</font><font color="#E5E5E5"> is for two specific vectors U</font>

323
00:13:55,029 --> 00:14:01,240
and V<font color="#E5E5E5"> from any set and then we simply</font>

324
00:13:57,819 --> 00:14:05,259
sum over all<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these spectrums</font><font color="#E5E5E5"> all</font>

325
00:14:01,240 --> 00:14:07,180
possible vectors<font color="#E5E5E5"> right and then we're</font>

326
00:14:05,259 --> 00:14:09,939
<font color="#E5E5E5">going to look at define this polynomial</font>

327
00:14:07,180 --> 00:14:11,680
<font color="#E5E5E5">in particular over F P so P this</font>

328
00:14:09,939 --> 00:14:13,089
polynomial<font color="#E5E5E5"> is essentially counting the</font>

329
00:14:11,680 --> 00:14:15,699
number<font color="#CCCCCC"> of orthogonal</font><font color="#E5E5E5"> vectors when you</font>

330
00:14:13,089 --> 00:14:16,839
give it binary inputs and so P we're

331
00:14:15,699 --> 00:14:21,128
going<font color="#CCCCCC"> to take to be greater</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> n</font>

332
00:14:16,839 --> 00:14:22,569
squared so there's no wraparound<font color="#E5E5E5"> and the</font>

333
00:14:21,129 --> 00:14:28,149
degree<font color="#CCCCCC"> that you should note that the</font>

334
00:14:22,569 --> 00:14:29,979
degree is just<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> d2d why do we</font>

335
00:14:28,149 --> 00:14:31,660
care why did we embed this<font color="#E5E5E5"> thing in a</font>

336
00:14:29,980 --> 00:14:33,939
low<font color="#E5E5E5"> degree polynomial in the first place</font>

337
00:14:31,660 --> 00:14:36,730
well this goes<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to old ideas</font><font color="#E5E5E5"> of I</font>

338
00:14:33,939 --> 00:14:41,439
think<font color="#E5E5E5"> Lipton and many others since then</font>

339
00:14:36,730 --> 00:14:42,730
<font color="#E5E5E5">so right yes right this is the idea from</font>

340
00:14:41,439 --> 00:14:44,800
the previous paper this fine-grained

341
00:14:42,730 --> 00:14:47,199
<font color="#E5E5E5">worst case to average case reduction all</font>

342
00:14:44,800 --> 00:14:49,750
<font color="#E5E5E5">right so if we</font><font color="#CCCCCC"> consider the truth table</font>

343
00:14:47,199 --> 00:14:51,069
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this polynomial</font><font color="#CCCCCC"> fov it's not really a</font>

344
00:14:49,750 --> 00:14:52,750
truth table because it's over a finite

345
00:14:51,069 --> 00:14:54,639
field but whatever<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right this is</font>

346
00:14:52,750 --> 00:14:56,019
defining<font color="#E5E5E5"> a</font><font color="#CCCCCC"> codeword in the error</font>

347
00:14:54,639 --> 00:14:58,389
<font color="#E5E5E5">correcting code</font><font color="#CCCCCC"> a very nice error</font>

348
00:14:56,019 --> 00:15:00,730
correcting code<font color="#E5E5E5"> and this means that</font>

349
00:14:58,389 --> 00:15:05,740
roughly<font color="#E5E5E5"> right if we have some algorithm</font>

350
00:15:00,730 --> 00:15:07,329
that does well most of the time then<font color="#CCCCCC"> we</font>

351
00:15:05,740 --> 00:15:10,750
can<font color="#CCCCCC"> and say we're interested in</font>

352
00:15:07,329 --> 00:15:12,729
evaluating<font color="#CCCCCC"> X I like</font><font color="#E5E5E5"> this input X I of</font>

353
00:15:10,750 --> 00:15:15,339
this polynomial<font color="#E5E5E5"> right because it's in</font>

354
00:15:12,730 --> 00:15:17,170
this code we have this<font color="#E5E5E5"> this code has</font>

355
00:15:15,339 --> 00:15:19,750
very nice sort<font color="#E5E5E5"> of local reconstruction</font>

356
00:15:17,170 --> 00:15:22,420
properties<font color="#E5E5E5"> we just need to call this</font>

357
00:15:19,750 --> 00:15:25,029
algorithm a<font color="#E5E5E5"> on a few randomly drawn</font>

358
00:15:22,420 --> 00:15:26,769
instances and<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> reconstruct with</font>

359
00:15:25,029 --> 00:15:28,509
for any<font color="#CCCCCC"> X I with very high probability</font>

360
00:15:26,769 --> 00:15:29,860
so it allows us<font color="#CCCCCC"> to correct from</font>

361
00:15:28,509 --> 00:15:32,800
something<font color="#E5E5E5"> that's good on average to</font>

362
00:15:29,860 --> 00:15:36,370
something<font color="#E5E5E5"> that's good all the time great</font>

363
00:15:32,800 --> 00:15:38,258
<font color="#CCCCCC">the</font><font color="#E5E5E5"> actual way that</font><font color="#CCCCCC"> you prove</font>

364
00:15:36,370 --> 00:15:39,699
theorem<font color="#E5E5E5"> statement on the board is a bit</font>

365
00:15:38,259 --> 00:15:42,220
more complicated<font color="#E5E5E5"> than</font><font color="#CCCCCC"> what I just showed</font>

366
00:15:39,699 --> 00:15:43,569
<font color="#CCCCCC">you but</font><font color="#E5E5E5"> right basically so what is the</font>

367
00:15:42,220 --> 00:15:46,209
theorem<font color="#CCCCCC"> statement</font><font color="#E5E5E5"> right orthogonal</font>

368
00:15:43,569 --> 00:15:48,189
vectors conjecture implies that any

369
00:15:46,209 --> 00:15:50,949
algorithm running<font color="#E5E5E5"> in</font><font color="#CCCCCC"> some quadratic time</font>

370
00:15:48,189 --> 00:15:53,860
it's correct<font color="#CCCCCC"> on a uniformly drawn</font>

371
00:15:50,949 --> 00:15:56,199
instance with low probability<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font>

372
00:15:53,860 --> 00:15:58,300
promised you more<font color="#CCCCCC"> fov is non amortizable</font>

373
00:15:56,199 --> 00:16:00,519
<font color="#CCCCCC">so what is this</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> basic intuition</font>

374
00:15:58,300 --> 00:16:01,899
for non amarilla<font color="#E5E5E5"> T how we're going to</font>

375
00:16:00,519 --> 00:16:03,309
<font color="#E5E5E5">prove this the basic idea is not</font>

376
00:16:01,899 --> 00:16:06,339
downward<font color="#CCCCCC"> self reducibility</font>

377
00:16:03,309 --> 00:16:08,649
so if we had an average case reduction

378
00:16:06,339 --> 00:16:11,499
so if we<font color="#E5E5E5"> were</font><font color="#CCCCCC"> just thinking about the</font>

379
00:16:08,649 --> 00:16:13,300
worst case or we had a sort of<font color="#CCCCCC"> Karp</font>

380
00:16:11,499 --> 00:16:15,339
style average case reduction<font color="#E5E5E5"> like we do</font>

381
00:16:13,300 --> 00:16:15,998
for say discrete log<font color="#CCCCCC"> down roots off</font>

382
00:16:15,339 --> 00:16:19,180
reducibility

383
00:16:15,999 --> 00:16:21,480
would in fact be enough but you'll see

384
00:16:19,180 --> 00:16:23,620
this in a second<font color="#E5E5E5"> so now what is a</font>

385
00:16:21,480 --> 00:16:24,249
downward<font color="#CCCCCC"> self or disability here how</font>

386
00:16:23,620 --> 00:16:26,050
<font color="#E5E5E5">does it work</font>

387
00:16:24,249 --> 00:16:27,670
right we have our two sets of<font color="#CCCCCC"> vectors U</font>

388
00:16:26,050 --> 00:16:29,319
and V it's very simple<font color="#E5E5E5"> what are we going</font>

389
00:16:27,670 --> 00:16:32,589
to<font color="#E5E5E5"> do we're</font><font color="#CCCCCC"> just going to</font><font color="#E5E5E5"> split them</font>

390
00:16:29,319 --> 00:16:34,689
into<font color="#CCCCCC"> two each U and V into two smaller</font>

391
00:16:32,589 --> 00:16:37,089
sets and we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> compare all of</font>

392
00:16:34,689 --> 00:16:41,589
the pairs<font color="#CCCCCC"> of these smaller sets right</font>

393
00:16:37,089 --> 00:16:45,149
<font color="#E5E5E5">and</font><font color="#CCCCCC"> fov is simply the</font><font color="#E5E5E5"> sum of</font><font color="#CCCCCC"> fo v called</font>

394
00:16:41,589 --> 00:16:47,379
on these smaller sets so right and

395
00:16:45,149 --> 00:16:49,329
combining<font color="#E5E5E5"> solutions to the smaller</font>

396
00:16:47,379 --> 00:16:51,040
problems very easily translates to a

397
00:16:49,329 --> 00:16:53,319
<font color="#E5E5E5">solution to the bigger problem and</font><font color="#CCCCCC"> this</font>

398
00:16:51,040 --> 00:16:55,269
<font color="#E5E5E5">is going to with some more work you can</font>

399
00:16:53,319 --> 00:16:58,349
prove<font color="#E5E5E5"> that it works even in this sort of</font>

400
00:16:55,269 --> 00:17:00,790
Turing style<font color="#CCCCCC"> productions that we need</font>

401
00:16:58,350 --> 00:17:02,439
<font color="#E5E5E5">right what is what do we prove right</font>

402
00:17:00,790 --> 00:17:04,779
that or thuggin<font color="#CCCCCC"> objectors conjecture</font>

403
00:17:02,439 --> 00:17:08,168
implies that any algorithm running in

404
00:17:04,779 --> 00:17:11,260
time<font color="#CCCCCC"> m times two to the</font><font color="#E5E5E5"> n minus epsilon</font>

405
00:17:08,169 --> 00:17:14,289
is correct<font color="#CCCCCC"> on M uniform instances with</font>

406
00:17:11,260 --> 00:17:17,500
low probability<font color="#CCCCCC"> we're out right I should</font>

407
00:17:14,289 --> 00:17:19,750
mention<font color="#CCCCCC"> M is any polynomial</font><font color="#E5E5E5"> in it</font>

408
00:17:17,500 --> 00:17:21,579
<font color="#E5E5E5">doesn't matter all right and this</font><font color="#CCCCCC"> is a</font>

409
00:17:19,750 --> 00:17:22,329
bit surprising<font color="#CCCCCC"> because batch univariate</font>

410
00:17:21,579 --> 00:17:24,158
polynomial

411
00:17:22,329 --> 00:17:27,069
evaluation is something that we've known

412
00:17:24,159 --> 00:17:31,899
is easy<font color="#E5E5E5"> you can do it's in quasi linear</font>

413
00:17:27,069 --> 00:17:33,309
time since the seventies okay so right

414
00:17:31,899 --> 00:17:34,870
let's go back to<font color="#CCCCCC"> our</font><font color="#E5E5E5"> recipe we're sort</font>

415
00:17:33,309 --> 00:17:37,389
of<font color="#CCCCCC"> halfway done now I'm going</font><font color="#E5E5E5"> to show</font>

416
00:17:34,870 --> 00:17:42,279
you<font color="#E5E5E5"> how to delegate evaluation of this</font>

417
00:17:37,390 --> 00:17:43,210
polynomial<font color="#E5E5E5"> roughly so right we're how</font>

418
00:17:42,279 --> 00:17:45,100
we're going to<font color="#E5E5E5"> do this we're going</font><font color="#CCCCCC"> to</font>

419
00:17:43,210 --> 00:17:47,950
basically<font color="#E5E5E5"> run the song check protocol</font><font color="#CCCCCC"> so</font>

420
00:17:45,100 --> 00:17:48,990
the verifier has some instance of

421
00:17:47,950 --> 00:17:52,559
orthogonal this

422
00:17:48,990 --> 00:17:56,790
<font color="#CCCCCC">fov problem evaluating fov problem and</font>

423
00:17:52,559 --> 00:17:59,700
he<font color="#E5E5E5"> sends it to the prover the prover is</font>

424
00:17:56,790 --> 00:18:01,230
going to compute FOV of why he's going

425
00:17:59,700 --> 00:18:03,330
<font color="#E5E5E5">to compute the coefficients of this</font>

426
00:18:01,230 --> 00:18:06,660
<font color="#E5E5E5">uniquely defined pala univariate</font>

427
00:18:03,330 --> 00:18:09,300
polynomial G sub<font color="#E5E5E5"> u</font><font color="#CCCCCC"> V it's defined by U</font>

428
00:18:06,660 --> 00:18:11,070
and<font color="#CCCCCC"> V</font><font color="#E5E5E5"> and he's going to send this back</font>

429
00:18:09,300 --> 00:18:15,990
<font color="#CCCCCC">to the prover</font><font color="#E5E5E5"> I'm not going to tell you</font>

430
00:18:11,070 --> 00:18:17,490
exactly<font color="#CCCCCC"> what gu v is but</font><font color="#E5E5E5"> fine so how</font>

431
00:18:15,990 --> 00:18:19,800
does<font color="#E5E5E5"> this what is the</font><font color="#CCCCCC"> verifier going to</font>

432
00:18:17,490 --> 00:18:22,350
do now he's going<font color="#E5E5E5"> to check that what the</font>

433
00:18:19,800 --> 00:18:25,649
prover sent is in fact what it is

434
00:18:22,350 --> 00:18:29,370
uniquely defined<font color="#CCCCCC"> G</font><font color="#E5E5E5"> u v and he's going to</font>

435
00:18:25,650 --> 00:18:32,580
check<font color="#CCCCCC"> that y equals f of e of</font><font color="#E5E5E5"> UV right</font>

436
00:18:29,370 --> 00:18:34,919
<font color="#E5E5E5">why why this sounds like the</font><font color="#CCCCCC"> verifiers</font>

437
00:18:32,580 --> 00:18:37,320
to do a lot of<font color="#E5E5E5"> work but the key thing</font><font color="#CCCCCC"> is</font>

438
00:18:34,920 --> 00:18:40,620
<font color="#E5E5E5">this g UV is very</font><font color="#CCCCCC"> helpful here so it's</font>

439
00:18:37,320 --> 00:18:44,730
this univariate polynomial<font color="#E5E5E5"> of just</font>

440
00:18:40,620 --> 00:18:46,350
linear degree which first of all can be

441
00:18:44,730 --> 00:18:48,120
computed the coefficients<font color="#E5E5E5"> of which can</font>

442
00:18:46,350 --> 00:18:53,760
<font color="#E5E5E5">be computed in essentially quadratic</font>

443
00:18:48,120 --> 00:18:56,729
time from you and<font color="#E5E5E5"> b4 and it enables the</font>

444
00:18:53,760 --> 00:18:58,860
verifier to check that<font color="#E5E5E5"> he can check that</font>

445
00:18:56,730 --> 00:19:03,720
it's<font color="#E5E5E5"> correct the correct UV the correct</font>

446
00:18:58,860 --> 00:19:09,449
G sub UV in linear time the essentially

447
00:19:03,720 --> 00:19:11,429
<font color="#E5E5E5">the short simple lemma and finally given</font>

448
00:19:09,450 --> 00:19:15,420
this univariate polynomial he can

449
00:19:11,429 --> 00:19:18,630
evaluate<font color="#E5E5E5"> he can check property</font><font color="#CCCCCC"> two very</font>

450
00:19:15,420 --> 00:19:19,650
quickly<font color="#CCCCCC"> in just</font><font color="#E5E5E5"> linear time so</font><font color="#CCCCCC"> write</font>

451
00:19:18,630 --> 00:19:21,480
this<font color="#E5E5E5"> starting to</font><font color="#CCCCCC"> look like a</font>

452
00:19:19,650 --> 00:19:24,470
proof-of-work scheme<font color="#CCCCCC"> right here our</font>

453
00:19:21,480 --> 00:19:27,210
algorithms generators just<font color="#E5E5E5"> pick random</font>

454
00:19:24,470 --> 00:19:31,440
<font color="#CCCCCC">filled</font><font color="#E5E5E5"> out like vector field elements</font>

455
00:19:27,210 --> 00:19:33,990
<font color="#E5E5E5">proof is this two-step computation and</font>

456
00:19:31,440 --> 00:19:40,020
verify is this two-step verification

457
00:19:33,990 --> 00:19:41,820
procedure it<font color="#E5E5E5"> satisfies is if you</font>

458
00:19:40,020 --> 00:19:43,889
believed me<font color="#CCCCCC"> what I</font><font color="#E5E5E5"> just said it</font>

459
00:19:41,820 --> 00:19:45,870
satisfies efficiency completeness and

460
00:19:43,890 --> 00:19:48,030
right if you had a very efficient<font color="#E5E5E5"> prover</font>

461
00:19:45,870 --> 00:19:49,678
you just can simulate the<font color="#E5E5E5"> whole thing by</font>

462
00:19:48,030 --> 00:19:51,389
<font color="#CCCCCC">yourself</font><font color="#E5E5E5"> the verifier systems</font><font color="#CCCCCC"> at times</font>

463
00:19:49,679 --> 00:19:56,660
simulates everything by himself<font color="#CCCCCC"> and</font>

464
00:19:51,390 --> 00:19:56,660
breaks the the earlier theorems

465
00:19:58,520 --> 00:20:04,970
finally I<font color="#CCCCCC"> should note that</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> y is not</font>

466
00:20:01,730 --> 00:20:06,410
actually needed in the<font color="#E5E5E5"> first place it's</font>

467
00:20:04,970 --> 00:20:08,929
the everything<font color="#E5E5E5"> will go through without</font>

468
00:20:06,410 --> 00:20:10,640
it<font color="#CCCCCC"> she's maybe yes</font><font color="#E5E5E5"> for a second so what</font>

469
00:20:08,929 --> 00:20:12,530
did we<font color="#CCCCCC"> just</font><font color="#E5E5E5"> see we saw that the</font>

470
00:20:10,640 --> 00:20:13,790
orthogonal vectors conjecture assuming

471
00:20:12,530 --> 00:20:16,360
there was<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little vectors conjecture</font>

472
00:20:13,790 --> 00:20:18,649
then this the recipe<font color="#CCCCCC"> that I described</font>

473
00:20:16,360 --> 00:20:23,780
yields a proof-of-work scheme with

474
00:20:18,650 --> 00:20:26,140
quadratic work also<font color="#CCCCCC"> if you're sort</font><font color="#E5E5E5"> of</font>

475
00:20:23,780 --> 00:20:28,520
paying<font color="#CCCCCC"> attention note that this</font>

476
00:20:26,140 --> 00:20:32,030
proof-of-work scheme has unique proofs

477
00:20:28,520 --> 00:20:35,090
and these proofs have a very simple

478
00:20:32,030 --> 00:20:39,920
<font color="#E5E5E5">algebraic structure just involve</font>

479
00:20:35,090 --> 00:20:41,870
<font color="#E5E5E5">evaluating polynomials so oh right</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font>

480
00:20:39,920 --> 00:20:44,000
<font color="#E5E5E5">should as I mentioned before though for</font>

481
00:20:41,870 --> 00:20:47,330
the sort of harder polynomial problems

482
00:20:44,000 --> 00:20:49,070
right we we need<font color="#E5E5E5"> interactive protocols</font>

483
00:20:47,330 --> 00:20:52,570
<font color="#E5E5E5">we're not sure how to do it done</font>

484
00:20:49,070 --> 00:20:56,780
interactively without assumptions

485
00:20:52,570 --> 00:20:58,520
additional assumptions so right how<font color="#E5E5E5"> can</font>

486
00:20:56,780 --> 00:20:59,840
we<font color="#E5E5E5"> exploit this algebraic structure I</font>

487
00:20:58,520 --> 00:21:01,220
was just talking<font color="#E5E5E5"> about right everything</font>

488
00:20:59,840 --> 00:21:05,780
is<font color="#CCCCCC"> just evaluating polynomials</font>

489
00:21:01,220 --> 00:21:07,520
essentially so<font color="#E5E5E5"> one one instantiation of</font>

490
00:21:05,780 --> 00:21:09,170
this idea<font color="#E5E5E5"> that we have in the paper is</font>

491
00:21:07,520 --> 00:21:12,110
what we call<font color="#CCCCCC"> zero knowledge proof Civ</font>

492
00:21:09,170 --> 00:21:14,000
work what does this mean exactly<font color="#CCCCCC"> this</font>

493
00:21:12,110 --> 00:21:15,800
<font color="#CCCCCC">means that the verifier learns</font><font color="#E5E5E5"> nothing</font>

494
00:21:14,000 --> 00:21:17,990
from the prover beyond the fact that<font color="#E5E5E5"> he</font>

495
00:21:15,800 --> 00:21:19,909
performed some work he can't say take

496
00:21:17,990 --> 00:21:21,980
this proof and perform<font color="#E5E5E5"> some other work</font>

497
00:21:19,910 --> 00:21:24,130
essentially exploiting<font color="#E5E5E5"> as</font><font color="#CCCCCC"> improvers</font>

498
00:21:21,980 --> 00:21:27,290
additional power or something<font color="#CCCCCC"> like this</font>

499
00:21:24,130 --> 00:21:28,760
right<font color="#CCCCCC"> what does this mean though like he</font>

500
00:21:27,290 --> 00:21:31,550
learns nothing<font color="#E5E5E5"> it means that we can</font>

501
00:21:28,760 --> 00:21:35,809
efficiently<font color="#E5E5E5"> simulate interactions with</font>

502
00:21:31,550 --> 00:21:37,399
this with an honest verifier<font color="#E5E5E5"> right</font>

503
00:21:35,809 --> 00:21:38,990
efficiently here we have to be a bit

504
00:21:37,400 --> 00:21:40,640
careful right because all these<font color="#E5E5E5"> problems</font>

505
00:21:38,990 --> 00:21:43,940
<font color="#E5E5E5">I've been describing</font><font color="#CCCCCC"> to you are actually</font>

506
00:21:40,640 --> 00:21:46,220
<font color="#E5E5E5">in P so right our normal notion of zero</font>

507
00:21:43,940 --> 00:21:48,590
<font color="#CCCCCC">knowledge doesn't</font><font color="#E5E5E5"> it seems very trivial</font>

508
00:21:46,220 --> 00:21:50,540
<font color="#E5E5E5">in some sense but here if we're going to</font>

509
00:21:48,590 --> 00:21:53,178
say efficiency<font color="#E5E5E5"> means that you can</font>

510
00:21:50,540 --> 00:21:57,920
simulate<font color="#CCCCCC"> in</font><font color="#E5E5E5"> quasi linear time so right</font>

511
00:21:53,179 --> 00:22:00,320
he's really not learning anything<font color="#CCCCCC"> and</font>

512
00:21:57,920 --> 00:22:03,110
how would<font color="#CCCCCC"> we</font><font color="#E5E5E5"> do this very very roughly</font>

513
00:22:00,320 --> 00:22:04,490
right to recall that our proof<font color="#CCCCCC"> work</font>

514
00:22:03,110 --> 00:22:06,469
<font color="#CCCCCC">scheme all the verifier needs to do is</font>

515
00:22:04,490 --> 00:22:08,300
evaluate this univariate polynomial<font color="#E5E5E5"> and</font>

516
00:22:06,470 --> 00:22:09,950
compare<font color="#E5E5E5"> it okay I didn't tell you this</font>

517
00:22:08,300 --> 00:22:12,220
explicitly<font color="#E5E5E5"> but he compares it</font><font color="#CCCCCC"> to a value</font>

518
00:22:09,950 --> 00:22:16,510
<font color="#E5E5E5">that he computes by himself</font>

519
00:22:12,220 --> 00:22:20,409
efficiently so the idea here<font color="#CCCCCC"> is just to</font>

520
00:22:16,510 --> 00:22:22,900
assume some<font color="#CCCCCC"> DDH homomorphic commitment</font>

521
00:22:20,409 --> 00:22:24,429
scheme basically<font color="#CCCCCC"> write the</font><font color="#E5E5E5"> prover</font><font color="#CCCCCC"> is</font>

522
00:22:22,900 --> 00:22:26,530
going to send some public key<font color="#E5E5E5"> and a</font>

523
00:22:24,429 --> 00:22:29,530
commitment<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this univariate polynomial</font>

524
00:22:26,530 --> 00:22:30,700
then the verifier instead of<font color="#E5E5E5"> evaluating</font>

525
00:22:29,530 --> 00:22:33,820
the polynomial<font color="#E5E5E5"> and the clear he</font>

526
00:22:30,700 --> 00:22:35,440
evaluates it holomorphic<font color="#CCCCCC"> li he commits</font>

527
00:22:33,820 --> 00:22:38,408
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the value himself using the public</font>

528
00:22:35,440 --> 00:22:41,890
<font color="#CCCCCC">key</font><font color="#E5E5E5"> and then we test the quality</font><font color="#CCCCCC"> of</font>

529
00:22:38,409 --> 00:22:44,710
these<font color="#E5E5E5"> two things which is you know all</font>

530
00:22:41,890 --> 00:22:47,740
the techniques that's it<font color="#E5E5E5"> we think that</font>

531
00:22:44,710 --> 00:22:49,780
this this indicates<font color="#E5E5E5"> that there may be</font>

532
00:22:47,740 --> 00:22:53,140
more applications to this sort of thing

533
00:22:49,780 --> 00:22:55,030
<font color="#CCCCCC">I don't know any cryptography</font><font color="#E5E5E5"> right so I</font>

534
00:22:53,140 --> 00:22:57,640
want to just mention one big open

535
00:22:55,030 --> 00:22:59,889
question sort of this larger paradigm

536
00:22:57,640 --> 00:23:01,330
<font color="#CCCCCC">that one that we were</font><font color="#E5E5E5"> initially hoping</font>

537
00:22:59,890 --> 00:23:03,340
to solve and<font color="#E5E5E5"> we didn't</font><font color="#CCCCCC"> quite make it</font>

538
00:23:01,330 --> 00:23:05,049
<font color="#E5E5E5">this is</font><font color="#CCCCCC"> the notion of moderately</font><font color="#E5E5E5"> hard</font>

539
00:23:03,340 --> 00:23:07,870
<font color="#E5E5E5">one-way functions which is a notion due</font>

540
00:23:05,049 --> 00:23:09,940
to I believe<font color="#E5E5E5"> money</font><font color="#CCCCCC"> naught and</font><font color="#E5E5E5"> so like</font>

541
00:23:07,870 --> 00:23:12,219
<font color="#E5E5E5">can you show the existence of moderately</font>

542
00:23:09,940 --> 00:23:13,690
<font color="#E5E5E5">hard on my function from similar</font>

543
00:23:12,220 --> 00:23:15,909
assumptions to the ones that<font color="#CCCCCC"> I described</font>

544
00:23:13,690 --> 00:23:19,570
today<font color="#CCCCCC"> and here what is a moderately hard</font>

545
00:23:15,909 --> 00:23:22,150
<font color="#CCCCCC">one-way</font><font color="#E5E5E5"> functions really mouthful</font><font color="#CCCCCC"> so</font>

546
00:23:19,570 --> 00:23:23,980
like given<font color="#E5E5E5"> it's this function f we're</font>

547
00:23:22,150 --> 00:23:25,809
given some<font color="#CCCCCC"> X you</font><font color="#E5E5E5"> can compute in the</font>

548
00:23:23,980 --> 00:23:28,000
forward direction and<font color="#E5E5E5"> say quasi linear</font>

549
00:23:25,809 --> 00:23:31,059
time<font color="#E5E5E5"> but if you want to but it should be</font>

550
00:23:28,000 --> 00:23:33,809
basically<font color="#E5E5E5"> impossible to invert in some</font>

551
00:23:31,059 --> 00:23:33,809
quadratic<font color="#E5E5E5"> time</font>

552
00:23:37,430 --> 00:23:43,109
[Applause]

