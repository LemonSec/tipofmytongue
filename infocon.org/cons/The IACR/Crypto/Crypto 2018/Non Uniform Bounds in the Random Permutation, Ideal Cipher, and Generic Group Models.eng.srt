1
00:00:04,960 --> 00:00:10,209
good morning everyone

2
00:00:08,048 --> 00:00:14,160
this is joint work with TF<font color="#E5E5E5"> ganito since</font>

3
00:00:10,209 --> 00:00:18,849
Iago<font color="#E5E5E5"> and so let's start</font><font color="#CCCCCC"> by so suppose</font>

4
00:00:14,160 --> 00:00:22,390
<font color="#E5E5E5">Alice and Bob</font><font color="#CCCCCC"> go for a trip</font><font color="#E5E5E5"> to New York</font>

5
00:00:18,849 --> 00:00:25,570
<font color="#CCCCCC">City and Alice is very excited and Bob</font>

6
00:00:22,390 --> 00:00:28,270
<font color="#E5E5E5">kind of has a hangover from a party the</font>

7
00:00:25,570 --> 00:00:30,660
<font color="#CCCCCC">night before but at some point they walk</font>

8
00:00:28,270 --> 00:00:34,329
up to the museum of modern<font color="#E5E5E5"> cryptography</font>

9
00:00:30,660 --> 00:00:36,520
<font color="#CCCCCC">and</font><font color="#E5E5E5"> Alice is all excited is like let's</font>

10
00:00:34,329 --> 00:00:40,539
go see some cryptography<font color="#E5E5E5"> and Bob's like</font>

11
00:00:36,520 --> 00:00:42,339
you know if we have to it let's do<font color="#E5E5E5"> it so</font>

12
00:00:40,539 --> 00:00:46,089
they they pay an admission fee and they

13
00:00:42,339 --> 00:00:49,600
enter the museum<font color="#E5E5E5"> of</font><font color="#CCCCCC"> modern cryptography</font>

14
00:00:46,089 --> 00:00:51,489
<font color="#E5E5E5">and they come to like this directory and</font>

15
00:00:49,600 --> 00:00:54,399
they see all<font color="#CCCCCC"> the all the cool exhibits</font>

16
00:00:51,489 --> 00:00:56,949
<font color="#E5E5E5">and then after staring at it</font><font color="#CCCCCC"> for a</font><font color="#E5E5E5"> while</font>

17
00:00:54,399 --> 00:01:00,699
<font color="#E5E5E5">Alice decides okay</font><font color="#CCCCCC"> what I want to see</font>

18
00:00:56,949 --> 00:01:02,949
some practical<font color="#E5E5E5"> crypto and Bob agrees so</font>

19
00:01:00,699 --> 00:01:06,670
they<font color="#E5E5E5"> they end up going to the</font><font color="#CCCCCC"> cripton</font>

20
00:01:02,949 --> 00:01:08,500
practice exhibition and they come by a

21
00:01:06,670 --> 00:01:10,570
couple of cool<font color="#CCCCCC"> things so the first</font>

22
00:01:08,500 --> 00:01:13,030
exhibit they<font color="#CCCCCC"> stopped</font><font color="#E5E5E5"> at is like the</font>

23
00:01:10,570 --> 00:01:15,399
<font color="#E5E5E5">miracle</font><font color="#CCCCCC"> down guard construction with</font><font color="#E5E5E5"> the</font>

24
00:01:13,030 --> 00:01:17,800
Davis<font color="#CCCCCC"> Mars compression function which is</font>

25
00:01:15,400 --> 00:01:20,470
basically you<font color="#CCCCCC"> take the top input</font><font color="#E5E5E5"> here</font>

26
00:01:17,800 --> 00:01:23,140
use it<font color="#CCCCCC"> as a key for a block cipher</font><font color="#E5E5E5"> and</font>

27
00:01:20,470 --> 00:01:24,880
then the lower part here<font color="#E5E5E5"> it</font>

28
00:01:23,140 --> 00:01:26,680
it's the input to the block<font color="#CCCCCC"> cipher but</font>

29
00:01:24,880 --> 00:01:29,229
then it's also XOR to the output and

30
00:01:26,680 --> 00:01:33,130
this<font color="#CCCCCC"> is the design</font><font color="#E5E5E5"> paradigm</font><font color="#CCCCCC"> that</font>

31
00:01:29,230 --> 00:01:36,010
underlies<font color="#CCCCCC"> the sha-2 hash function so</font>

32
00:01:33,130 --> 00:01:38,020
they stared it for a<font color="#CCCCCC"> moment and then</font>

33
00:01:36,010 --> 00:01:40,000
they go<font color="#CCCCCC"> on to the next item</font><font color="#E5E5E5"> in the</font>

34
00:01:38,020 --> 00:01:43,619
<font color="#CCCCCC">exhibit they come by like the sponge</font>

35
00:01:40,000 --> 00:01:46,450
construction which<font color="#CCCCCC"> is so there is a</font>

36
00:01:43,620 --> 00:01:49,060
message block is XOR into the top part

37
00:01:46,450 --> 00:01:52,150
<font color="#E5E5E5">here and then a permutation is applied</font>

38
00:01:49,060 --> 00:01:54,460
to the entire input<font color="#E5E5E5"> and then the next</font>

39
00:01:52,150 --> 00:01:56,530
<font color="#CCCCCC">message block is again next</font><font color="#E5E5E5"> sort to the</font>

40
00:01:54,460 --> 00:01:58,300
top part<font color="#E5E5E5"> and so on and so on and they</font>

41
00:01:56,530 --> 00:01:59,800
can read here somewhere<font color="#CCCCCC"> on it on a</font>

42
00:01:58,300 --> 00:02:01,810
caption<font color="#CCCCCC"> that you know this is</font><font color="#E5E5E5"> widely</font>

43
00:01:59,800 --> 00:02:04,840
<font color="#E5E5E5">used they it's used for</font><font color="#CCCCCC"> collision</font>

44
00:02:01,810 --> 00:02:06,580
resistance it's used to build<font color="#CCCCCC"> Mac's for</font>

45
00:02:04,840 --> 00:02:10,479
<font color="#CCCCCC">pure apps and so on and so on pseudo</font>

46
00:02:06,580 --> 00:02:13,150
random number generation<font color="#CCCCCC"> so it's a very</font>

47
00:02:10,479 --> 00:02:15,939
impressive they stare at<font color="#E5E5E5"> it for a moment</font>

48
00:02:13,150 --> 00:02:18,219
<font color="#E5E5E5">they go on they come to like key</font>

49
00:02:15,939 --> 00:02:19,230
alternating ciphers which is a way<font color="#E5E5E5"> to</font>

50
00:02:18,219 --> 00:02:24,880
abstract

51
00:02:19,230 --> 00:02:26,769
yes<font color="#E5E5E5"> so in a yes basically</font><font color="#CCCCCC"> so first a</font><font color="#E5E5E5"> key</font>

52
00:02:24,880 --> 00:02:28,750
<font color="#CCCCCC">X over to the message then a permutation</font>

53
00:02:26,770 --> 00:02:30,610
<font color="#E5E5E5">is applied then another key</font><font color="#CCCCCC"> Zak swords</font>

54
00:02:28,750 --> 00:02:33,850
and another permutation is applied<font color="#E5E5E5"> and</font>

55
00:02:30,610 --> 00:02:35,530
of course<font color="#CCCCCC"> a special case of this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

56
00:02:33,850 --> 00:02:39,609
<font color="#CCCCCC">well-known even</font><font color="#E5E5E5"> one source effort which</font>

57
00:02:35,530 --> 00:02:42,790
<font color="#CCCCCC">is simply like one round of this of</font><font color="#E5E5E5"> this</font>

58
00:02:39,610 --> 00:02:46,330
thing here<font color="#CCCCCC"> okay so they look at it</font><font color="#E5E5E5"> for a</font>

59
00:02:42,790 --> 00:02:49,329
moment<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> they go on</font><font color="#CCCCCC"> and they</font><font color="#E5E5E5"> come</font>

60
00:02:46,330 --> 00:02:51,520
to like a public key crypto section and

61
00:02:49,330 --> 00:02:53,650
and they see like the discrete<font color="#CCCCCC"> logarithm</font>

62
00:02:51,520 --> 00:02:56,020
problem<font color="#CCCCCC"> so</font><font color="#E5E5E5"> then you know it's</font><font color="#CCCCCC"> like</font>

63
00:02:53,650 --> 00:02:58,660
<font color="#CCCCCC">there's a</font><font color="#E5E5E5"> attacker and</font><font color="#CCCCCC"> the Challenger</font>

64
00:02:56,020 --> 00:03:01,480
the Challenger<font color="#E5E5E5"> chooses a random exponent</font>

65
00:02:58,660 --> 00:03:03,010
applies computes G to<font color="#CCCCCC"> the X since that</font>

66
00:03:01,480 --> 00:03:06,549
to the attacker the attacker tries to

67
00:03:03,010 --> 00:03:10,299
find the discrete log so they'll stare

68
00:03:06,550 --> 00:03:12,310
at it for a<font color="#CCCCCC"> moment</font><font color="#E5E5E5"> and then this is like</font>

69
00:03:10,300 --> 00:03:15,790
but you know<font color="#E5E5E5"> how do you assess security</font>

70
00:03:12,310 --> 00:03:19,480
<font color="#E5E5E5">of these things and Bob there's no idea</font>

71
00:03:15,790 --> 00:03:22,510
but<font color="#CCCCCC"> you know you just</font><font color="#E5E5E5"> they get an audio</font>

72
00:03:19,480 --> 00:03:24,040
guy<font color="#E5E5E5"> so the audio guide says well in</font>

73
00:03:22,510 --> 00:03:26,170
cryptography<font color="#CCCCCC"> in symmetric</font><font color="#E5E5E5"> cryptography</font>

74
00:03:24,040 --> 00:03:28,239
what what often happens if you<font color="#E5E5E5"> try to</font>

75
00:03:26,170 --> 00:03:31,750
derive security bounds for for such

76
00:03:28,240 --> 00:03:34,380
primitives is that you you replace your

77
00:03:31,750 --> 00:03:37,600
your your basic primitive by something

78
00:03:34,380 --> 00:03:40,269
<font color="#E5E5E5">ideal so in the case whenever there is a</font>

79
00:03:37,600 --> 00:03:42,880
permutation above usually<font color="#E5E5E5"> it's replaced</font>

80
00:03:40,270 --> 00:03:44,500
by a public random permutation that<font color="#CCCCCC"> is</font>

81
00:03:42,880 --> 00:03:47,079
<font color="#E5E5E5">chosen uniformly at random from</font><font color="#CCCCCC"> the set</font>

82
00:03:44,500 --> 00:03:48,730
<font color="#CCCCCC">of all permutations and there can</font><font color="#E5E5E5"> be</font>

83
00:03:47,080 --> 00:03:51,550
queried<font color="#CCCCCC"> by everyone in the forward and</font>

84
00:03:48,730 --> 00:03:53,380
<font color="#E5E5E5">the</font><font color="#CCCCCC"> backward direction if there is some</font>

85
00:03:51,550 --> 00:03:55,120
some block cipher involved like here

86
00:03:53,380 --> 00:03:57,130
<font color="#E5E5E5">with merkle-damgard it's coming to</font>

87
00:03:55,120 --> 00:03:59,350
consider the ideal<font color="#E5E5E5"> cipher</font><font color="#CCCCCC"> mouse</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

88
00:03:57,130 --> 00:04:01,120
a block cipher chosen uniformly at

89
00:03:59,350 --> 00:04:03,370
random from from our block ciphers and

90
00:04:01,120 --> 00:04:06,180
<font color="#E5E5E5">again for every key can be queried in</font>

91
00:04:03,370 --> 00:04:10,930
the forward and<font color="#E5E5E5"> the backward direction</font>

92
00:04:06,180 --> 00:04:13,209
so you know then they just next to this

93
00:04:10,930 --> 00:04:17,019
<font color="#E5E5E5">they see this idealized model</font>

94
00:04:13,209 --> 00:04:19,298
methodology which which which claims

95
00:04:17,019 --> 00:04:21,310
that<font color="#CCCCCC"> you know for natural applications</font>

96
00:04:19,298 --> 00:04:23,739
whatever you prove in the idealized

97
00:04:21,310 --> 00:04:25,570
model you<font color="#E5E5E5"> hope</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in the standard</font>

98
00:04:23,740 --> 00:04:29,710
model you get<font color="#E5E5E5"> similar security if you</font>

99
00:04:25,570 --> 00:04:32,750
use a good<font color="#E5E5E5"> instantiation for your for</font>

100
00:04:29,710 --> 00:04:35,460
your idealized primitive

101
00:04:32,750 --> 00:04:37,770
<font color="#CCCCCC">so you don't always like everything you</font>

102
00:04:35,460 --> 00:04:43,680
see at<font color="#E5E5E5"> a museum</font><font color="#CCCCCC"> so here is a here is a</font>

103
00:04:37,770 --> 00:04:45,210
toy example<font color="#E5E5E5"> how can you so suppose</font><font color="#CCCCCC"> for a</font>

104
00:04:43,680 --> 00:04:46,770
moment<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> here you can only make</font>

105
00:04:45,210 --> 00:04:49,258
forward queries to your random

106
00:04:46,770 --> 00:04:50,969
permutation<font color="#E5E5E5"> so this models this models</font>

107
00:04:49,259 --> 00:04:52,860
like the security<font color="#E5E5E5"> or for my permutations</font>

108
00:04:50,970 --> 00:04:54,240
in the random<font color="#E5E5E5"> permutation model so</font>

109
00:04:52,860 --> 00:04:56,550
basically the Challenger chooses a

110
00:04:54,240 --> 00:04:59,310
random X computes PI of X<font color="#CCCCCC"> since that to</font>

111
00:04:56,550 --> 00:05:02,759
<font color="#CCCCCC">Y and the</font><font color="#E5E5E5"> job of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> attacker is to find</font>

112
00:04:59,310 --> 00:05:04,620
is to find X and so this is super<font color="#CCCCCC"> easy</font>

113
00:05:02,759 --> 00:05:08,219
to<font color="#CCCCCC"> analyze in the random permutation</font>

114
00:05:04,620 --> 00:05:10,020
model right so basically at some point

115
00:05:08,219 --> 00:05:12,389
the attacker is gonna make a bunch of

116
00:05:10,020 --> 00:05:14,128
like<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> requires here and the you know</font>

117
00:05:12,389 --> 00:05:16,949
bad thing that<font color="#CCCCCC"> can happen is if at some</font>

118
00:05:14,129 --> 00:05:18,599
<font color="#CCCCCC">point</font><font color="#E5E5E5"> the attacker queries the actual X</font>

119
00:05:16,949 --> 00:05:21,210
and if he doesn't query the actual

120
00:05:18,599 --> 00:05:23,159
accident<font color="#CCCCCC"> it has</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> it can only guess</font>

121
00:05:21,210 --> 00:05:25,138
what what X<font color="#E5E5E5"> is in the random permutation</font>

122
00:05:23,159 --> 00:05:27,569
<font color="#CCCCCC">model and the probability by</font><font color="#E5E5E5"> simply</font>

123
00:05:25,139 --> 00:05:32,009
<font color="#E5E5E5">Union</font><font color="#CCCCCC"> boundary queries the the actual</font><font color="#E5E5E5"> X</font>

124
00:05:27,569 --> 00:05:34,409
is T divided by<font color="#E5E5E5"> M so you know conclusion</font>

125
00:05:32,009 --> 00:05:37,560
<font color="#E5E5E5">in the random permutation model</font><font color="#CCCCCC"> a sort</font>

126
00:05:34,409 --> 00:05:41,069
of inverting a permutation<font color="#E5E5E5"> is secured up</font>

127
00:05:37,560 --> 00:05:43,800
to 2 to n queries to<font color="#CCCCCC"> the to the</font>

128
00:05:41,069 --> 00:05:45,719
permutation<font color="#E5E5E5"> okay so here is another</font>

129
00:05:43,800 --> 00:05:49,199
<font color="#CCCCCC">example here's the the even monster</font>

130
00:05:45,719 --> 00:05:51,509
cipher<font color="#CCCCCC"> so here the attacker is trying to</font>

131
00:05:49,199 --> 00:05:53,449
distinguish real from ideal<font color="#E5E5E5"> so in the</font>

132
00:05:51,509 --> 00:05:57,719
real world

133
00:05:53,449 --> 00:06:00,590
he can make queries to the actual<font color="#E5E5E5"> even</font>

134
00:05:57,719 --> 00:06:03,180
<font color="#E5E5E5">answer construction forward or backward</font>

135
00:06:00,590 --> 00:06:05,400
and he can make queries<font color="#E5E5E5"> to the</font>

136
00:06:03,180 --> 00:06:07,050
<font color="#E5E5E5">underlying primitive forward or backward</font>

137
00:06:05,400 --> 00:06:08,638
and of course the same in the ideal

138
00:06:07,050 --> 00:06:09,690
<font color="#CCCCCC">world except in</font><font color="#E5E5E5"> the ideal</font><font color="#CCCCCC"> world instead</font>

139
00:06:08,639 --> 00:06:11,669
of<font color="#E5E5E5"> the construction we have</font><font color="#CCCCCC"> an</font>

140
00:06:09,690 --> 00:06:14,370
independent uniform random<font color="#E5E5E5"> permutation</font>

141
00:06:11,669 --> 00:06:17,460
and the job<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the attacker is trying to</font>

142
00:06:14,370 --> 00:06:19,830
tell this apart<font color="#CCCCCC"> and again it's in it's</font>

143
00:06:17,460 --> 00:06:21,870
not<font color="#E5E5E5"> difficult to analyze this so</font>

144
00:06:19,830 --> 00:06:24,539
basically<font color="#CCCCCC"> there's some bad event that</font>

145
00:06:21,870 --> 00:06:27,750
says roughly says that if the attacker

146
00:06:24,539 --> 00:06:29,400
makes a primitive query that corresponds

147
00:06:27,750 --> 00:06:32,190
<font color="#CCCCCC">to into a construction query that</font><font color="#E5E5E5"> he</font>

148
00:06:29,400 --> 00:06:33,810
made then<font color="#E5E5E5"> we give up and otherwise if</font>

149
00:06:32,190 --> 00:06:36,810
that doesn't happen he can tell these

150
00:06:33,810 --> 00:06:38,270
<font color="#E5E5E5">two things apart</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> again by a simple</font>

151
00:06:36,810 --> 00:06:40,550
Union bound you

152
00:06:38,270 --> 00:06:42,140
<font color="#CCCCCC">derive this</font><font color="#E5E5E5"> bound here construct number</font>

153
00:06:40,550 --> 00:06:45,410
of construction queries<font color="#CCCCCC"> times number</font><font color="#E5E5E5"> of</font>

154
00:06:42,140 --> 00:06:46,940
primitive queries divided by M so what

155
00:06:45,410 --> 00:06:49,940
do you contract or what do we see here

156
00:06:46,940 --> 00:06:51,680
well in the random permutation while<font color="#CCCCCC"> we</font>

157
00:06:49,940 --> 00:06:55,969
conjecture security of even mint syrup

158
00:06:51,680 --> 00:06:58,880
<font color="#E5E5E5">to the birthday</font><font color="#CCCCCC"> bar and well</font><font color="#E5E5E5"> similarly</font>

159
00:06:55,970 --> 00:07:00,410
so<font color="#E5E5E5"> for discrete logarithms we can we can</font>

160
00:06:58,880 --> 00:07:04,190
<font color="#CCCCCC">use the generic group</font><font color="#E5E5E5"> model to at least</font>

161
00:07:00,410 --> 00:07:05,840
rule<font color="#E5E5E5"> out generic attacks</font><font color="#CCCCCC"> so the general</font>

162
00:07:04,190 --> 00:07:08,240
group model<font color="#E5E5E5"> simply the group is</font>

163
00:07:05,840 --> 00:07:09,979
represented<font color="#CCCCCC"> by a random injection which</font>

164
00:07:08,240 --> 00:07:13,270
is a labeling function that simply

165
00:07:09,980 --> 00:07:17,180
assigns a random label to every possible

166
00:07:13,270 --> 00:07:19,130
<font color="#CCCCCC">discrete log and there is a group</font>

167
00:07:17,180 --> 00:07:21,500
operation Oracle<font color="#CCCCCC"> that allows you to give</font>

168
00:07:19,130 --> 00:07:24,650
<font color="#E5E5E5">to two labels and then you get back the</font>

169
00:07:21,500 --> 00:07:26,930
label the corresponds to the to the

170
00:07:24,650 --> 00:07:30,679
group operation<font color="#CCCCCC"> applied to the things</font>

171
00:07:26,930 --> 00:07:32,720
that<font color="#CCCCCC"> are inside</font><font color="#E5E5E5"> these two labels so if</font>

172
00:07:30,680 --> 00:07:36,700
you look at<font color="#E5E5E5"> discrete logarithms in the</font>

173
00:07:32,720 --> 00:07:39,950
generic<font color="#CCCCCC"> group model</font><font color="#E5E5E5"> again there's a</font>

174
00:07:36,700 --> 00:07:41,930
victor<font color="#CCCCCC"> Shoob it says roughly</font><font color="#E5E5E5"> what</font>

175
00:07:39,950 --> 00:07:44,240
happens and here is<font color="#E5E5E5"> that the attacker</font>

176
00:07:41,930 --> 00:07:45,170
computes<font color="#E5E5E5"> like degree one polynomial in</font>

177
00:07:44,240 --> 00:07:47,060
some indeterminate

178
00:07:45,170 --> 00:07:49,130
<font color="#CCCCCC">X and the bad thing that can</font><font color="#E5E5E5"> happen is</font>

179
00:07:47,060 --> 00:07:51,290
like if<font color="#E5E5E5"> two is that two polynomials</font>

180
00:07:49,130 --> 00:07:54,409
collide and at the actual X that<font color="#E5E5E5"> you</font>

181
00:07:51,290 --> 00:07:58,370
choose so you again get like security<font color="#E5E5E5"> up</font>

182
00:07:54,410 --> 00:08:02,110
to<font color="#CCCCCC"> the birthday bound</font><font color="#E5E5E5"> even for discrete</font>

183
00:07:58,370 --> 00:08:04,190
logarithms<font color="#E5E5E5"> in the generic group</font><font color="#CCCCCC"> model so</font>

184
00:08:02,110 --> 00:08:06,590
after a<font color="#E5E5E5"> while</font>

185
00:08:04,190 --> 00:08:08,750
Bob wakes up from his hangover<font color="#E5E5E5"> and and</font>

186
00:08:06,590 --> 00:08:13,700
asks the<font color="#E5E5E5"> question well what whatever it</font>

187
00:08:08,750 --> 00:08:17,510
was like<font color="#E5E5E5"> pre-processing attacks and so</font>

188
00:08:13,700 --> 00:08:19,610
it's a good point<font color="#CCCCCC"> in in</font><font color="#E5E5E5"> practice of</font>

189
00:08:17,510 --> 00:08:21,890
<font color="#CCCCCC">course often</font><font color="#E5E5E5"> the security parameter is</font>

190
00:08:19,610 --> 00:08:23,930
fixed and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know dedicated attacker</font>

191
00:08:21,890 --> 00:08:27,110
may perform some pre-computation<font color="#CCCCCC"> to</font>

192
00:08:23,930 --> 00:08:28,820
speed up<font color="#E5E5E5"> its online attack and this we</font>

193
00:08:27,110 --> 00:08:31,670
can capture by simply considering an

194
00:08:28,820 --> 00:08:33,500
unbounded like first stage attacker<font color="#E5E5E5"> that</font>

195
00:08:31,670 --> 00:08:35,270
you know does whatever it wants but then

196
00:08:33,500 --> 00:08:37,190
it gives like s bits of advice<font color="#E5E5E5"> to the</font>

197
00:08:35,270 --> 00:08:40,520
main attacker that then tries to<font color="#E5E5E5"> break</font>

198
00:08:37,190 --> 00:08:43,610
<font color="#E5E5E5">whatever primitive in question and this</font>

199
00:08:40,520 --> 00:08:46,819
kind<font color="#CCCCCC"> of mouse non-uniformity</font><font color="#E5E5E5"> so here is</font>

200
00:08:43,610 --> 00:08:48,590
a<font color="#CCCCCC"> well-known</font><font color="#E5E5E5"> pre-processing attack is by</font>

201
00:08:46,820 --> 00:08:50,170
<font color="#CCCCCC">helmet it allows you to invert</font>

202
00:08:48,590 --> 00:08:51,470
<font color="#CCCCCC">permutation so what do you do is like</font>

203
00:08:50,170 --> 00:08:53,030
<font color="#E5E5E5">you know</font>

204
00:08:51,470 --> 00:08:54,740
supposed to<font color="#E5E5E5"> for simplicity</font><font color="#CCCCCC"> the</font>

205
00:08:53,030 --> 00:08:58,280
<font color="#CCCCCC">permutation is just a single cycle</font><font color="#E5E5E5"> so</font>

206
00:08:54,740 --> 00:09:00,230
you you<font color="#E5E5E5"> you go around the</font><font color="#CCCCCC"> cycle in the</font>

207
00:08:58,280 --> 00:09:03,350
<font color="#CCCCCC">pre-processing</font><font color="#E5E5E5"> and you store like points</font>

208
00:09:00,230 --> 00:09:05,720
at distance like<font color="#E5E5E5"> and</font><font color="#CCCCCC"> divided by</font><font color="#E5E5E5"> s for</font>

209
00:09:03,350 --> 00:09:07,640
some space parameter<font color="#E5E5E5"> s and then these</font>

210
00:09:05,720 --> 00:09:10,280
points<font color="#CCCCCC"> you leak is advice and then when</font>

211
00:09:07,640 --> 00:09:12,350
you get the<font color="#E5E5E5"> actual challenge here y-you</font>

212
00:09:10,280 --> 00:09:14,089
just<font color="#E5E5E5"> simply apply the permutation until</font>

213
00:09:12,350 --> 00:09:16,310
you hit one of<font color="#E5E5E5"> those points then you go</font>

214
00:09:14,090 --> 00:09:18,110
to the<font color="#E5E5E5"> preceding point you keep applying</font>

215
00:09:16,310 --> 00:09:19,609
your permutation until you get<font color="#E5E5E5"> back to</font>

216
00:09:18,110 --> 00:09:21,380
the origin<font color="#CCCCCC"> or Y and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> value</font>

217
00:09:19,610 --> 00:09:26,390
immediately<font color="#CCCCCC"> before is the value that</font>

218
00:09:21,380 --> 00:09:28,100
you're looking for so what is the what

219
00:09:26,390 --> 00:09:30,260
<font color="#CCCCCC">is</font><font color="#E5E5E5"> the space complexity</font><font color="#CCCCCC"> of this attack</font>

220
00:09:28,100 --> 00:09:32,060
well it's like<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> s because we</font><font color="#E5E5E5"> will</font>

221
00:09:30,260 --> 00:09:35,000
leak roughly as points the time

222
00:09:32,060 --> 00:09:37,369
complexity is<font color="#E5E5E5"> T because</font><font color="#CCCCCC"> we have to do it</font>

223
00:09:35,000 --> 00:09:39,020
most like<font color="#CCCCCC"> enter by the</font><font color="#E5E5E5"> best step so if</font>

224
00:09:37,370 --> 00:09:41,060
you choose s and T to be square<font color="#CCCCCC"> root</font><font color="#E5E5E5"> of</font>

225
00:09:39,020 --> 00:09:43,390
and this<font color="#E5E5E5"> is an attack that</font><font color="#CCCCCC"> branch in</font>

226
00:09:41,060 --> 00:09:46,219
square root of<font color="#CCCCCC"> N and</font><font color="#E5E5E5"> like invert</font><font color="#CCCCCC"> you're</font>

227
00:09:43,390 --> 00:09:47,630
in virtual permutation except that in

228
00:09:46,220 --> 00:09:49,880
the random<font color="#E5E5E5"> permutation model we</font>

229
00:09:47,630 --> 00:09:51,410
conjectured security after n queries so

230
00:09:49,880 --> 00:09:54,800
there seems to be some kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> mismatch</font>

231
00:09:51,410 --> 00:09:56,719
here<font color="#CCCCCC"> similarly there are</font><font color="#E5E5E5"> a bunch of</font>

232
00:09:54,800 --> 00:09:59,199
other pre-processing or many other

233
00:09:56,720 --> 00:10:02,000
pre-processing attacks so there we can

234
00:09:59,200 --> 00:10:05,360
break discrete logarithms with better

235
00:10:02,000 --> 00:10:07,340
<font color="#E5E5E5">advantage than conjectured in the random</font>

236
00:10:05,360 --> 00:10:09,890
permit sorry generic group model<font color="#E5E5E5"> and</font>

237
00:10:07,340 --> 00:10:12,200
also<font color="#CCCCCC"> the this similar thing</font><font color="#E5E5E5"> holds for</font>

238
00:10:09,890 --> 00:10:14,960
<font color="#E5E5E5">the Eva mats or cipher so it seems</font><font color="#CCCCCC"> that</font>

239
00:10:12,200 --> 00:10:18,250
our<font color="#CCCCCC"> beautiful idealized models</font>

240
00:10:14,960 --> 00:10:20,780
methodologies is on fire but<font color="#E5E5E5"> luckily</font>

241
00:10:18,250 --> 00:10:22,910
it's<font color="#CCCCCC"> a mob they run into the curator of</font>

242
00:10:20,780 --> 00:10:26,449
the museum<font color="#CCCCCC"> who had some experience with</font>

243
00:10:22,910 --> 00:10:30,500
<font color="#E5E5E5">this in the random Oracle model so the</font>

244
00:10:26,450 --> 00:10:33,020
curator in had like the<font color="#E5E5E5"> following idea</font>

245
00:10:30,500 --> 00:10:35,870
for the random Oracle model<font color="#E5E5E5"> which now we</font>

246
00:10:33,020 --> 00:10:38,840
<font color="#E5E5E5">generalize to like these other idealized</font>

247
00:10:35,870 --> 00:10:40,760
models is that<font color="#E5E5E5"> this you know standard</font>

248
00:10:38,840 --> 00:10:42,470
format of a security game is<font color="#E5E5E5"> simply</font>

249
00:10:40,760 --> 00:10:44,780
extended<font color="#CCCCCC"> by this</font><font color="#E5E5E5"> this pre-processing</font>

250
00:10:42,470 --> 00:10:46,970
attacker here with who sees the entire

251
00:10:44,780 --> 00:10:48,770
<font color="#E5E5E5">function table and then based on</font><font color="#CCCCCC"> the</font>

252
00:10:46,970 --> 00:10:50,450
entire<font color="#E5E5E5"> function table can simply compute</font>

253
00:10:48,770 --> 00:10:54,500
some aspects of advice and leave this to

254
00:10:50,450 --> 00:10:56,930
<font color="#CCCCCC">the</font><font color="#E5E5E5"> main attacker and now we can hope</font><font color="#CCCCCC"> to</font>

255
00:10:54,500 --> 00:10:58,700
update<font color="#CCCCCC"> our idealized models methodology</font>

256
00:10:56,930 --> 00:11:01,489
<font color="#CCCCCC">to say that if we prove something in</font>

257
00:10:58,700 --> 00:11:03,080
this<font color="#E5E5E5"> auxilary input model then this</font>

258
00:11:01,490 --> 00:11:05,059
corresponds to security in the standard

259
00:11:03,080 --> 00:11:06,919
model against<font color="#E5E5E5"> pre-processing attacks</font>

260
00:11:05,059 --> 00:11:08,118
again<font color="#E5E5E5"> assuming</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> know you</font><font color="#CCCCCC"> Stan</font>

261
00:11:06,919 --> 00:11:14,269
she ate your ideal primitive or

262
00:11:08,119 --> 00:11:16,879
something<font color="#E5E5E5"> something good so for example</font>

263
00:11:14,269 --> 00:11:18,919
our toy example run<font color="#CCCCCC"> one-way permutations</font>

264
00:11:16,879 --> 00:11:20,479
here now now you<font color="#E5E5E5"> can see that it</font><font color="#CCCCCC"> becomes</font>

265
00:11:18,919 --> 00:11:22,129
really<font color="#CCCCCC"> hard to analyze</font><font color="#E5E5E5"> it however</font>

266
00:11:20,479 --> 00:11:23,599
<font color="#E5E5E5">because as soon as you like see the</font>

267
00:11:22,129 --> 00:11:25,369
leakage value conditioned on this

268
00:11:23,599 --> 00:11:27,979
leakage value whatever<font color="#E5E5E5"> it is in general</font>

269
00:11:25,369 --> 00:11:30,859
<font color="#CCCCCC">the distribution</font><font color="#E5E5E5"> of your of your</font>

270
00:11:27,979 --> 00:11:32,899
idealized primitive becomes like<font color="#E5E5E5"> pretty</font>

271
00:11:30,859 --> 00:11:34,339
messy and<font color="#E5E5E5"> you don't know what is the</font>

272
00:11:32,899 --> 00:11:35,749
distribution of the coordinates how do

273
00:11:34,339 --> 00:11:39,999
the coordinates depend on each<font color="#E5E5E5"> other so</font>

274
00:11:35,749 --> 00:11:44,029
it seems<font color="#CCCCCC"> really</font><font color="#E5E5E5"> hard to</font><font color="#CCCCCC"> to analyze this</font>

275
00:11:39,999 --> 00:11:46,639
so let's see what happened in<font color="#E5E5E5"> the random</font>

276
00:11:44,029 --> 00:11:49,699
Oracle model<font color="#E5E5E5"> with this with this setting</font>

277
00:11:46,639 --> 00:11:51,169
<font color="#CCCCCC">so</font><font color="#E5E5E5"> again so own</font><font color="#CCCCCC"> drew</font><font color="#E5E5E5"> our curator</font><font color="#CCCCCC"> he</font>

278
00:11:49,699 --> 00:11:52,519
introduced what is known as the pre

279
00:11:51,169 --> 00:11:55,579
sampling technique which we'll talk

280
00:11:52,519 --> 00:11:57,469
<font color="#CCCCCC">about in a moment and the pre sampling</font>

281
00:11:55,579 --> 00:11:59,628
technique is is generally easy<font color="#E5E5E5"> to</font>

282
00:11:57,469 --> 00:12:01,729
analyze and and allow us to derive bound

283
00:11:59,629 --> 00:12:03,799
and this bounds in this model and<font color="#E5E5E5"> it's</font>

284
00:12:01,729 --> 00:12:06,199
generic<font color="#E5E5E5"> which means like you can apply</font>

285
00:12:03,799 --> 00:12:07,699
to almost any application<font color="#CCCCCC"> but</font>

286
00:12:06,199 --> 00:12:10,159
<font color="#E5E5E5">unfortunately the bounds that come out</font>

287
00:12:07,699 --> 00:12:12,589
are usually a little<font color="#E5E5E5"> loose and also</font>

288
00:12:10,159 --> 00:12:13,718
there's like limited applicability to<font color="#CCCCCC"> to</font>

289
00:12:12,589 --> 00:12:16,909
settings where you<font color="#E5E5E5"> have additional</font>

290
00:12:13,719 --> 00:12:19,549
computational hardness assumptions<font color="#E5E5E5"> so</font>

291
00:12:16,909 --> 00:12:22,339
not so long ago there was a<font color="#E5E5E5"> paper by</font>

292
00:12:19,549 --> 00:12:24,619
<font color="#CCCCCC">yves</font><font color="#E5E5E5"> Ganesha and Jonathan where they</font>

293
00:12:22,339 --> 00:12:29,089
<font color="#E5E5E5">used generic resins compression paradigm</font>

294
00:12:24,619 --> 00:12:33,379
to analyze<font color="#E5E5E5"> like specific</font><font color="#CCCCCC"> primitives and</font>

295
00:12:29,089 --> 00:12:35,359
<font color="#CCCCCC">in this auxiliary input model</font><font color="#E5E5E5"> and so the</font>

296
00:12:33,379 --> 00:12:36,769
thing is<font color="#CCCCCC"> it's application specific so</font>

297
00:12:35,359 --> 00:12:38,509
for every<font color="#CCCCCC"> application</font><font color="#E5E5E5"> you need to come</font>

298
00:12:36,769 --> 00:12:40,459
<font color="#E5E5E5">up</font><font color="#CCCCCC"> with a completely new proof and it's</font>

299
00:12:38,509 --> 00:12:42,709
<font color="#E5E5E5">also generally kind of tricky</font><font color="#CCCCCC"> to make</font>

300
00:12:40,459 --> 00:12:44,659
this compression proofs<font color="#E5E5E5"> works but the</font>

301
00:12:42,709 --> 00:12:47,929
<font color="#E5E5E5">the upside here is of course the the</font>

302
00:12:44,659 --> 00:12:49,909
proofs are usually tight<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> ok also</font>

303
00:12:47,929 --> 00:12:51,108
<font color="#E5E5E5">here it's</font><font color="#CCCCCC"> it's not clear how you can</font>

304
00:12:49,909 --> 00:12:55,929
apply<font color="#CCCCCC"> this to like stuff with</font>

305
00:12:51,109 --> 00:12:58,999
computational assumptions<font color="#E5E5E5"> so recently</font>

306
00:12:55,929 --> 00:13:01,129
<font color="#E5E5E5">together with</font><font color="#CCCCCC"> John Steinberger we came</font>

307
00:12:58,999 --> 00:13:04,509
<font color="#E5E5E5">up with an improved pre sampling that</font>

308
00:13:01,129 --> 00:13:06,859
you know it retains like easy generic

309
00:13:04,509 --> 00:13:08,629
properties of the<font color="#CCCCCC"> original one</font><font color="#E5E5E5"> but it</font>

310
00:13:06,859 --> 00:13:11,409
also yields tight bounds in<font color="#E5E5E5"> the random</font>

311
00:13:08,629 --> 00:13:16,579
Oracle model<font color="#E5E5E5"> and also it's applicable</font><font color="#CCCCCC"> to</font>

312
00:13:11,409 --> 00:13:18,200
computational stuff<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so what is</font>

313
00:13:16,579 --> 00:13:20,300
<font color="#CCCCCC">the</font><font color="#E5E5E5"> history in the</font>

314
00:13:18,200 --> 00:13:23,750
random permutation<font color="#CCCCCC"> levels stephannie</font>

315
00:13:20,300 --> 00:13:26,359
like sort of extended<font color="#CCCCCC"> wondrous technique</font>

316
00:13:23,750 --> 00:13:29,120
to the random<font color="#E5E5E5"> permutation model but of</font>

317
00:13:26,360 --> 00:13:31,190
course the<font color="#E5E5E5"> the bouncers are still loose</font>

318
00:13:29,120 --> 00:13:32,780
<font color="#E5E5E5">and then there is known compression</font>

319
00:13:31,190 --> 00:13:36,710
results for example<font color="#CCCCCC"> for one-way</font>

320
00:13:32,780 --> 00:13:38,750
permutations<font color="#CCCCCC"> but again</font><font color="#E5E5E5"> it's application</font>

321
00:13:36,710 --> 00:13:41,060
specific and hard and<font color="#E5E5E5"> so in this paper</font>

322
00:13:38,750 --> 00:13:42,500
<font color="#E5E5E5">weak stand the pre sampling technique to</font>

323
00:13:41,060 --> 00:13:44,119
improve pre sampling techniques to<font color="#E5E5E5"> the</font>

324
00:13:42,500 --> 00:13:46,820
random permutation model and to<font color="#E5E5E5"> the</font>

325
00:13:44,120 --> 00:13:49,670
ideal<font color="#E5E5E5"> cypher model and we get like easy</font>

326
00:13:46,820 --> 00:13:52,070
generic and<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I proofs and again it's</font>

327
00:13:49,670 --> 00:13:53,930
a you can<font color="#E5E5E5"> apply to two applications that</font>

328
00:13:52,070 --> 00:13:56,810
<font color="#E5E5E5">rely on additional hardness assumptions</font>

329
00:13:53,930 --> 00:13:59,089
and maybe it's worth pointing<font color="#E5E5E5"> out that</font>

330
00:13:56,810 --> 00:14:01,699
<font color="#E5E5E5">for like stuff for symmetric primitives</font>

331
00:13:59,090 --> 00:14:03,440
<font color="#CCCCCC">like Xiao hua SEO</font><font color="#E5E5E5"> two or three and and</font>

332
00:14:01,700 --> 00:14:05,390
and even<font color="#CCCCCC"> my</font><font color="#E5E5E5"> server and so on there were</font>

333
00:14:03,440 --> 00:14:08,600
no<font color="#E5E5E5"> like at least to the</font><font color="#CCCCCC"> best of our</font>

334
00:14:05,390 --> 00:14:10,069
<font color="#E5E5E5">knowledge no known non-uniform</font><font color="#CCCCCC"> balance</font>

335
00:14:08,600 --> 00:14:13,340
<font color="#E5E5E5">so no bounds that account for</font>

336
00:14:10,070 --> 00:14:15,860
pre-processing right so<font color="#CCCCCC"> here's same</font>

337
00:14:13,340 --> 00:14:19,120
<font color="#CCCCCC">thing in the</font><font color="#E5E5E5"> general group</font><font color="#CCCCCC"> model at your</font>

338
00:14:15,860 --> 00:14:21,860
crypt is here<font color="#E5E5E5"> Corinne Gibson</font><font color="#CCCCCC"> Cogan</font><font color="#E5E5E5"> did</font>

339
00:14:19,120 --> 00:14:24,110
<font color="#E5E5E5">showed how you can derive</font><font color="#CCCCCC"> tight bounce</font>

340
00:14:21,860 --> 00:14:26,030
using compression proofs<font color="#E5E5E5"> and again also</font>

341
00:14:24,110 --> 00:14:27,320
<font color="#E5E5E5">it turns out this pre sampling thing you</font>

342
00:14:26,030 --> 00:14:30,770
can use it in the generic group model

343
00:14:27,320 --> 00:14:33,170
<font color="#E5E5E5">and you get again the the advantages of</font>

344
00:14:30,770 --> 00:14:35,329
the of the pre sampling<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right so</font>

345
00:14:33,170 --> 00:14:37,910
<font color="#E5E5E5">I've been talking about it so what is it</font>

346
00:14:35,330 --> 00:14:39,710
so it basically is two<font color="#E5E5E5"> steps so first</font>

347
00:14:37,910 --> 00:14:41,959
you analyze something<font color="#E5E5E5"> that in a much</font>

348
00:14:39,710 --> 00:14:44,000
simpler model which we which is<font color="#E5E5E5"> called</font>

349
00:14:41,960 --> 00:14:45,740
the bit fixing model and then<font color="#E5E5E5"> you use a</font>

350
00:14:44,000 --> 00:14:47,540
generic connection between the bit

351
00:14:45,740 --> 00:14:50,300
fixing model and the<font color="#CCCCCC"> auxiliary input</font>

352
00:14:47,540 --> 00:14:52,849
model<font color="#E5E5E5"> to derive your final back</font><font color="#CCCCCC"> so</font>

353
00:14:50,300 --> 00:14:54,650
<font color="#E5E5E5">here's the bit fixing model so instead</font>

354
00:14:52,850 --> 00:14:57,080
of like<font color="#CCCCCC"> leaking the entire function</font>

355
00:14:54,650 --> 00:14:58,790
<font color="#CCCCCC">table to the first stage attacker will</font>

356
00:14:57,080 --> 00:15:00,560
you do is you allow the<font color="#E5E5E5"> first stage</font>

357
00:14:58,790 --> 00:15:02,120
attacker to preset your<font color="#E5E5E5"> idealized</font>

358
00:15:00,560 --> 00:15:05,540
primitive so in<font color="#E5E5E5"> this case the random</font>

359
00:15:02,120 --> 00:15:07,280
permutation<font color="#E5E5E5"> at a bunch of</font><font color="#CCCCCC"> coordinates so</font>

360
00:15:05,540 --> 00:15:09,170
<font color="#E5E5E5">without collisions so there's still a</font>

361
00:15:07,280 --> 00:15:11,600
permutation but then you choose<font color="#CCCCCC"> the</font>

362
00:15:09,170 --> 00:15:13,310
<font color="#CCCCCC">remain that the rest of</font><font color="#E5E5E5"> the permutation</font>

363
00:15:11,600 --> 00:15:15,620
<font color="#E5E5E5">uniformly at random from all the</font>

364
00:15:13,310 --> 00:15:18,530
permutations there that are consistent

365
00:15:15,620 --> 00:15:20,060
with<font color="#E5E5E5"> the prefix coordinates but note</font>

366
00:15:18,530 --> 00:15:22,100
<font color="#CCCCCC">that there is</font><font color="#E5E5E5"> no leakage so the</font>

367
00:15:20,060 --> 00:15:24,260
prefixing is the<font color="#E5E5E5"> only thing that we're</font>

368
00:15:22,100 --> 00:15:26,210
allowed to do here<font color="#E5E5E5"> and the same you can</font>

369
00:15:24,260 --> 00:15:28,939
do for ideal ciphers<font color="#E5E5E5"> and generic groups</font>

370
00:15:26,210 --> 00:15:30,780
and then there's this magic connection

371
00:15:28,940 --> 00:15:33,420
between the two worlds<font color="#E5E5E5"> that</font>

372
00:15:30,780 --> 00:15:36,150
that we show that so if if<font color="#E5E5E5"> something has</font>

373
00:15:33,420 --> 00:15:38,610
like<font color="#CCCCCC"> epsilon security in this bit fixing</font>

374
00:15:36,150 --> 00:15:42,150
model<font color="#E5E5E5"> then it has epsilon</font><font color="#CCCCCC"> Prime security</font>

375
00:15:38,610 --> 00:15:44,340
in the<font color="#E5E5E5"> auxiliary input model and what</font>

376
00:15:42,150 --> 00:15:49,550
you pay is this additive<font color="#E5E5E5"> error of s T</font>

377
00:15:44,340 --> 00:15:52,320
divided<font color="#CCCCCC"> by the size</font><font color="#E5E5E5"> of the list so now</font>

378
00:15:49,550 --> 00:15:54,390
<font color="#CCCCCC">and the same connection holds for the</font>

379
00:15:52,320 --> 00:15:57,690
other idealized models so as an example

380
00:15:54,390 --> 00:15:59,939
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can go back to</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> mnsure</font><font color="#E5E5E5"> so this</font>

381
00:15:57,690 --> 00:16:01,890
time I only<font color="#CCCCCC"> drew the real world</font><font color="#E5E5E5"> so you</font>

382
00:15:59,940 --> 00:16:04,590
<font color="#CCCCCC">know like this this first stage attacker</font>

383
00:16:01,890 --> 00:16:06,720
he doesn't like he'd simply preset some

384
00:16:04,590 --> 00:16:08,640
points of the permutation<font color="#E5E5E5"> so the</font>

385
00:16:06,720 --> 00:16:10,650
permutation is twice here so<font color="#CCCCCC"> doesn't</font>

386
00:16:08,640 --> 00:16:12,449
<font color="#E5E5E5">matter where</font><font color="#CCCCCC"> but so these are the prefix</font>

387
00:16:10,650 --> 00:16:13,800
coordinates<font color="#E5E5E5"> and then he</font><font color="#CCCCCC"> leaks some</font>

388
00:16:12,450 --> 00:16:15,180
leakage but<font color="#E5E5E5"> the leakage is I'm not only</font>

389
00:16:13,800 --> 00:16:16,770
going<font color="#E5E5E5"> to depend on the points that are</font>

390
00:16:15,180 --> 00:16:18,810
<font color="#E5E5E5">prefixed it's not going to depend on the</font>

391
00:16:16,770 --> 00:16:21,120
rest of the permutation so what you can

392
00:16:18,810 --> 00:16:24,510
do is basically can repeat<font color="#CCCCCC"> your original</font>

393
00:16:21,120 --> 00:16:26,580
analysis and extend the bad event<font color="#CCCCCC"> to</font>

394
00:16:24,510 --> 00:16:29,640
<font color="#E5E5E5">incorporate stuff that that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> in this</font>

395
00:16:26,580 --> 00:16:31,500
list<font color="#E5E5E5"> okay and when you do that you get a</font>

396
00:16:29,640 --> 00:16:34,020
new bound<font color="#E5E5E5"> so this is like sort of the</font>

397
00:16:31,500 --> 00:16:35,820
<font color="#CCCCCC">original bound here and then this</font><font color="#E5E5E5"> is the</font>

398
00:16:34,020 --> 00:16:37,890
boundary corresponds to the extended bad

399
00:16:35,820 --> 00:16:40,380
event which is simply<font color="#CCCCCC"> that one of the</font>

400
00:16:37,890 --> 00:16:43,500
<font color="#E5E5E5">construction queries interferes with the</font>

401
00:16:40,380 --> 00:16:45,420
prefix coordinates here so now what you

402
00:16:43,500 --> 00:16:48,870
can<font color="#CCCCCC"> do is you take the bound in the bit</font>

403
00:16:45,420 --> 00:16:51,180
fixing model and you use the generic

404
00:16:48,870 --> 00:16:53,790
theorem to<font color="#E5E5E5"> and you get this error as T</font>

405
00:16:51,180 --> 00:16:55,829
divided by P<font color="#E5E5E5"> and now you can choose P so</font>

406
00:16:53,790 --> 00:16:57,810
<font color="#CCCCCC">that you know this part back here gets</font>

407
00:16:55,830 --> 00:17:00,210
is minimized so<font color="#E5E5E5"> in this case this would</font>

408
00:16:57,810 --> 00:17:03,650
be the appropriate<font color="#CCCCCC"> P and if you</font><font color="#E5E5E5"> inserted</font>

409
00:17:00,210 --> 00:17:06,900
this this is gonna be your final<font color="#CCCCCC"> ban</font>

410
00:17:03,650 --> 00:17:09,300
okay<font color="#E5E5E5"> so and then similar things you can</font>

411
00:17:06,900 --> 00:17:12,720
do for<font color="#E5E5E5"> our here's our toy example the</font>

412
00:17:09,300 --> 00:17:14,760
<font color="#CCCCCC">one-way permutations so again we prefix</font>

413
00:17:12,720 --> 00:17:17,880
coordinates and you extend<font color="#E5E5E5"> the bad event</font>

414
00:17:14,760 --> 00:17:19,890
- like<font color="#E5E5E5"> include these prefix coordinates</font>

415
00:17:17,880 --> 00:17:22,650
and you get a new you get<font color="#E5E5E5"> a new bound</font>

416
00:17:19,890 --> 00:17:25,050
<font color="#E5E5E5">and then here since this is an</font><font color="#CCCCCC"> so-called</font>

417
00:17:22,650 --> 00:17:28,470
unpredictability application we have a

418
00:17:25,050 --> 00:17:29,850
second<font color="#CCCCCC"> version of of the pre sampling</font>

419
00:17:28,470 --> 00:17:33,000
<font color="#E5E5E5">that says you basically only lose a</font>

420
00:17:29,850 --> 00:17:36,770
factor of<font color="#CCCCCC"> two provided you choose P to</font>

421
00:17:33,000 --> 00:17:40,260
be at least s times T so in our case

422
00:17:36,770 --> 00:17:42,210
<font color="#CCCCCC">okay this should say this</font><font color="#E5E5E5"> should say</font><font color="#CCCCCC"> rpm</font>

423
00:17:40,260 --> 00:17:44,260
<font color="#CCCCCC">not</font><font color="#E5E5E5"> DTM but otherwise so this was our</font>

424
00:17:42,210 --> 00:17:46,510
bound here<font color="#E5E5E5"> so if we said P equals</font><font color="#CCCCCC"> two</font>

425
00:17:44,260 --> 00:17:48,610
<font color="#CCCCCC">st</font><font color="#E5E5E5"> then we basically lose a factor of 2</font>

426
00:17:46,510 --> 00:17:51,070
<font color="#CCCCCC">so</font><font color="#E5E5E5"> it's empathically it's the same and</font>

427
00:17:48,610 --> 00:17:54,159
this<font color="#CCCCCC"> will be our final bound and it</font>

428
00:17:51,070 --> 00:17:59,439
matches<font color="#CCCCCC"> a compression based proof that</font>

429
00:17:54,160 --> 00:18:03,010
was known before<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so the same</font>

430
00:17:59,440 --> 00:18:04,750
you can<font color="#CCCCCC"> do for discrete logarithms you</font>

431
00:18:03,010 --> 00:18:07,510
update that<font color="#E5E5E5"> event you get a new bound</font>

432
00:18:04,750 --> 00:18:09,220
you set P equals to<font color="#E5E5E5"> s T you get the</font>

433
00:18:07,510 --> 00:18:10,720
final bound and<font color="#E5E5E5"> this also matches the</font>

434
00:18:09,220 --> 00:18:18,760
compression based proof that was known

435
00:18:10,720 --> 00:18:22,500
before<font color="#CCCCCC"> ok ok so let me sum up</font><font color="#E5E5E5"> mmm the</font>

436
00:18:18,760 --> 00:18:25,240
balance that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> so the we analyze</font>

437
00:18:22,500 --> 00:18:27,370
some basic applications like<font color="#E5E5E5"> one-way</font>

438
00:18:25,240 --> 00:18:30,100
<font color="#CCCCCC">preparations</font><font color="#E5E5E5"> even mnsure even like</font>

439
00:18:27,370 --> 00:18:32,110
something as trivial as the ideal cipher

440
00:18:30,100 --> 00:18:34,090
used as a block cipher<font color="#E5E5E5"> has never been</font>

441
00:18:32,110 --> 00:18:37,120
analyzed with non-uniform<font color="#CCCCCC"> bounce so this</font>

442
00:18:34,090 --> 00:18:38,530
<font color="#CCCCCC">is we do this but then we also have like</font>

443
00:18:37,120 --> 00:18:40,899
more complicated things so we<font color="#E5E5E5"> analyze</font>

444
00:18:38,530 --> 00:18:43,930
sha-1<font color="#CCCCCC"> and share too</font><font color="#E5E5E5"> so we have</font>

445
00:18:40,900 --> 00:18:46,660
merkle-damgard<font color="#E5E5E5"> with Davis Myers and</font><font color="#CCCCCC"> the</font>

446
00:18:43,930 --> 00:18:48,360
sponges and we analyze them whether with

447
00:18:46,660 --> 00:18:50,920
respect<font color="#CCCCCC"> to their collision resistance</font>

448
00:18:48,360 --> 00:18:54,939
<font color="#E5E5E5">whether they're good</font><font color="#CCCCCC"> PRF son Max and so</font>

449
00:18:50,920 --> 00:18:56,650
on and we look at a<font color="#E5E5E5"> bunch of primitives</font>

450
00:18:54,940 --> 00:18:59,440
in the generic group models such as

451
00:18:56,650 --> 00:19:01,620
discrete logarithms<font color="#CCCCCC"> computational</font>

452
00:18:59,440 --> 00:19:04,270
diffie-hellman and so and<font color="#CCCCCC"> so on</font><font color="#E5E5E5"> and like</font>

453
00:19:01,620 --> 00:19:05,830
for here for example<font color="#E5E5E5"> all the bounds that</font>

454
00:19:04,270 --> 00:19:08,440
we<font color="#E5E5E5"> derive with the simple pre sampling</font>

455
00:19:05,830 --> 00:19:11,919
method matched the<font color="#CCCCCC"> moral like involved</font>

456
00:19:08,440 --> 00:19:14,950
<font color="#E5E5E5">bounds that or the balance that you get</font>

457
00:19:11,920 --> 00:19:17,020
by more<font color="#E5E5E5"> involved proofs using using a</font>

458
00:19:14,950 --> 00:19:20,890
compression the compression techniques

459
00:19:17,020 --> 00:19:23,110
<font color="#E5E5E5">and then just to illustrate like that it</font>

460
00:19:20,890 --> 00:19:25,030
also applies to<font color="#E5E5E5"> to</font><font color="#CCCCCC"> two applications</font><font color="#E5E5E5"> that</font>

461
00:19:23,110 --> 00:19:26,770
would rely on additional hardness

462
00:19:25,030 --> 00:19:27,970
assumption we<font color="#CCCCCC"> we analyze something</font>

463
00:19:26,770 --> 00:19:33,129
<font color="#E5E5E5">that's called the full domain</font>

464
00:19:27,970 --> 00:19:35,740
permutation encryption<font color="#E5E5E5"> and and and</font>

465
00:19:33,130 --> 00:19:37,930
<font color="#E5E5E5">derive bounds there as well okay so here</font>

466
00:19:35,740 --> 00:19:41,320
<font color="#CCCCCC">maybe some things</font><font color="#E5E5E5"> that are interesting</font>

467
00:19:37,930 --> 00:19:43,510
<font color="#CCCCCC">to</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> out in the future so for I</font>

468
00:19:41,320 --> 00:19:45,580
listed two of our favorite applications

469
00:19:43,510 --> 00:19:47,500
one is the<font color="#E5E5E5"> even</font><font color="#CCCCCC"> mansur cipher so we we</font>

470
00:19:45,580 --> 00:19:49,600
<font color="#CCCCCC">only know how to</font><font color="#E5E5E5"> prove a bound of square</font>

471
00:19:47,500 --> 00:19:52,360
root S T squared over<font color="#E5E5E5"> N and the best</font>

472
00:19:49,600 --> 00:19:55,240
attack gets like<font color="#E5E5E5"> s T</font><font color="#CCCCCC"> Square divided by n</font>

473
00:19:52,360 --> 00:19:57,020
so there is there's like a challenge of

474
00:19:55,240 --> 00:19:59,150
getting<font color="#E5E5E5"> rid of the square root here</font>

475
00:19:57,020 --> 00:20:01,940
and similarly for decisional

476
00:19:59,150 --> 00:20:04,760
diffie-hellman<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> still open so</font>

477
00:20:01,940 --> 00:20:06,670
<font color="#CCCCCC">this is like the best bound that</font><font color="#E5E5E5"> one can</font>

478
00:20:04,760 --> 00:20:09,950
<font color="#E5E5E5">arrive is square root S T squared</font><font color="#CCCCCC"> over N</font>

479
00:20:06,670 --> 00:20:13,670
<font color="#E5E5E5">but the best attack only achieves</font><font color="#CCCCCC"> SD</font>

480
00:20:09,950 --> 00:20:15,680
square divided by n<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and other</font>

481
00:20:13,670 --> 00:20:16,940
things<font color="#E5E5E5"> like we analyzed</font><font color="#CCCCCC"> even when Sir</font>

482
00:20:15,680 --> 00:20:19,370
but<font color="#CCCCCC"> they will be interesting</font><font color="#E5E5E5"> to have</font>

483
00:20:16,940 --> 00:20:22,100
like non-uniform bounds for like full

484
00:20:19,370 --> 00:20:24,639
key alternating ciphers<font color="#CCCCCC"> in see what can</font>

485
00:20:22,100 --> 00:20:24,639
<font color="#CCCCCC">be get there</font>

486
00:20:26,160 --> 00:20:31,539
[Applause]

