1
00:00:05,010 --> 00:00:12,190
<font color="#E5E5E5">okay cool so this talk is very related</font>

2
00:00:09,760 --> 00:00:13,930
previous<font color="#E5E5E5"> talk and</font><font color="#CCCCCC"> I'll just</font><font color="#E5E5E5"> work with</font>

3
00:00:12,190 --> 00:00:17,320
<font color="#CCCCCC">you and I'm dirty or lungi and penny</font>

4
00:00:13,930 --> 00:00:18,670
<font color="#CCCCCC">marks Lincoln so we also look at the</font>

5
00:00:17,320 --> 00:00:20,080
multi-party computation setting and I'm

6
00:00:18,670 --> 00:00:21,820
not going to explain<font color="#E5E5E5"> again where does</font>

7
00:00:20,080 --> 00:00:23,709
multi-party computation<font color="#CCCCCC"> but there is</font>

8
00:00:21,820 --> 00:00:26,289
like one point<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> highlight</font>

9
00:00:23,710 --> 00:00:28,240
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that like let's say we have three</font>

10
00:00:26,289 --> 00:00:30,280
<font color="#E5E5E5">parties and they run some protocol and</font>

11
00:00:28,240 --> 00:00:32,680
their private inputs and they obtain

12
00:00:30,280 --> 00:00:34,120
some output now if we consider passive

13
00:00:32,680 --> 00:00:36,250
security then kind of<font color="#E5E5E5"> what we know is</font>

14
00:00:34,120 --> 00:00:39,190
that<font color="#CCCCCC"> all of the parties</font><font color="#E5E5E5"> behave honestly</font>

15
00:00:36,250 --> 00:00:41,170
<font color="#CCCCCC">and if the protocol</font><font color="#E5E5E5"> is passively</font><font color="#CCCCCC"> secure</font>

16
00:00:39,190 --> 00:00:42,820
then they<font color="#E5E5E5"> don't learn anything beyond</font>

17
00:00:41,170 --> 00:00:44,860
<font color="#E5E5E5">what they like learn from their input</font>

18
00:00:42,820 --> 00:00:47,440
and their output and if we<font color="#E5E5E5"> consider</font>

19
00:00:44,860 --> 00:00:48,610
active<font color="#CCCCCC"> security</font><font color="#E5E5E5"> like when we think about</font>

20
00:00:47,440 --> 00:00:50,199
<font color="#CCCCCC">what is the difference between the two</font>

21
00:00:48,610 --> 00:00:51,940
<font color="#CCCCCC">well basically</font><font color="#E5E5E5"> there could be a</font>

22
00:00:50,199 --> 00:00:55,150
<font color="#E5E5E5">malicious party and he could start</font>

23
00:00:51,940 --> 00:00:57,190
sending messages<font color="#E5E5E5"> which are which do not</font>

24
00:00:55,150 --> 00:00:59,260
<font color="#CCCCCC">follow the protocol specification</font><font color="#E5E5E5"> and</font>

25
00:00:57,190 --> 00:01:01,809
from these messages<font color="#E5E5E5"> secret for example</font>

26
00:00:59,260 --> 00:01:05,319
<font color="#CCCCCC">learned something about another party's</font>

27
00:01:01,809 --> 00:01:07,869
input or she could influence the<font color="#E5E5E5"> output</font>

28
00:01:05,319 --> 00:01:09,699
<font color="#CCCCCC">of the computation</font><font color="#E5E5E5"> so on a very</font><font color="#CCCCCC"> very</font>

29
00:01:07,869 --> 00:01:11,830
abstract<font color="#E5E5E5"> level the</font><font color="#CCCCCC"> only thing we need to</font>

30
00:01:09,700 --> 00:01:13,600
<font color="#E5E5E5">do to go from passive security to active</font>

31
00:01:11,830 --> 00:01:15,730
security<font color="#CCCCCC"> is we</font><font color="#E5E5E5"> need to prevent malicious</font>

32
00:01:13,600 --> 00:01:17,649
parties from behaving maliciously or

33
00:01:15,730 --> 00:01:20,620
<font color="#E5E5E5">like from not following the protocol</font>

34
00:01:17,650 --> 00:01:24,220
specification and so this is what<font color="#E5E5E5"> we do</font>

35
00:01:20,620 --> 00:01:26,200
<font color="#E5E5E5">in this talk</font><font color="#CCCCCC"> okay so we have several</font>

36
00:01:24,220 --> 00:01:28,600
<font color="#E5E5E5">contributions so the first one</font><font color="#CCCCCC"> is we</font>

37
00:01:26,200 --> 00:01:30,160
show a generic way of<font color="#CCCCCC"> taking any</font>

38
00:01:28,600 --> 00:01:32,350
passively secure protocol and

39
00:01:30,160 --> 00:01:35,039
transforming<font color="#CCCCCC"> it into an actively secure</font>

40
00:01:32,350 --> 00:01:37,479
protocol for some<font color="#CCCCCC"> slightly worse</font>

41
00:01:35,040 --> 00:01:39,550
<font color="#E5E5E5">corruption threshold and the nice thing</font>

42
00:01:37,480 --> 00:01:42,370
<font color="#CCCCCC">about this compiler is that so first</font><font color="#E5E5E5"> of</font>

43
00:01:39,550 --> 00:01:43,960
all<font color="#E5E5E5"> it doesn't look at the specific way</font>

44
00:01:42,370 --> 00:01:45,700
the semi<font color="#E5E5E5"> honestly secure protocol works</font>

45
00:01:43,960 --> 00:01:47,080
so like if you<font color="#CCCCCC"> fulfill the security</font>

46
00:01:45,700 --> 00:01:48,310
<font color="#E5E5E5">properties that we need then you can</font>

47
00:01:47,080 --> 00:01:50,440
plug it in and you get an actively

48
00:01:48,310 --> 00:01:52,480
secure protocol the compilers

49
00:01:50,440 --> 00:01:54,039
information theoretically secure<font color="#E5E5E5"> which</font>

50
00:01:52,480 --> 00:01:56,020
means that if you<font color="#E5E5E5"> plug in an information</font>

51
00:01:54,040 --> 00:01:57,190
theoretically secure passive protocol

52
00:01:56,020 --> 00:01:59,140
then you get an information

53
00:01:57,190 --> 00:02:03,009
theoretically secure actively secure

54
00:01:59,140 --> 00:02:05,920
protocol<font color="#CCCCCC"> to kind of give a concrete</font>

55
00:02:03,010 --> 00:02:07,990
<font color="#E5E5E5">example in the paper and of a protocol</font>

56
00:02:05,920 --> 00:02:09,580
that<font color="#E5E5E5"> we can plug</font><font color="#CCCCCC"> in there is we look at</font>

57
00:02:07,990 --> 00:02:10,780
<font color="#E5E5E5">beaver circuit evaluation approach which</font>

58
00:02:09,580 --> 00:02:13,930
is very similar to<font color="#E5E5E5"> what you've seen</font>

59
00:02:10,780 --> 00:02:15,670
<font color="#CCCCCC">before</font><font color="#E5E5E5"> so this is again something</font><font color="#CCCCCC"> where</font>

60
00:02:13,930 --> 00:02:17,920
you compute on this multiplication these

61
00:02:15,670 --> 00:02:19,208
additive secret shares and<font color="#CCCCCC"> you add them</font>

62
00:02:17,920 --> 00:02:21,999
locally and<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> multiply them</font>

63
00:02:19,209 --> 00:02:23,330
<font color="#CCCCCC">with some correlated randomness so</font><font color="#E5E5E5"> we</font>

64
00:02:21,999 --> 00:02:25,549
apply our compiler to the

65
00:02:23,330 --> 00:02:27,350
<font color="#E5E5E5">and face and then we give a specific</font>

66
00:02:25,550 --> 00:02:29,840
pre-processing phase which we can then

67
00:02:27,350 --> 00:02:32,030
<font color="#E5E5E5">kind of use along with</font><font color="#CCCCCC"> our compiler</font><font color="#E5E5E5"> to</font>

68
00:02:29,840 --> 00:02:34,460
get a full protocol<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of from start</font>

69
00:02:32,030 --> 00:02:37,250
<font color="#CCCCCC">to end and then</font><font color="#E5E5E5"> the last thing that I'm</font>

70
00:02:34,460 --> 00:02:39,080
not<font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about in the socket</font>

71
00:02:37,250 --> 00:02:40,550
<font color="#CCCCCC">and</font><font color="#E5E5E5"> detail is we also provide a complete</font>

72
00:02:39,080 --> 00:02:42,380
<font color="#CCCCCC">fairness compiler so what does this</font>

73
00:02:40,550 --> 00:02:44,630
compiler do it it takes<font color="#CCCCCC"> an actively</font>

74
00:02:42,380 --> 00:02:46,160
secure protocol<font color="#E5E5E5"> where active security</font><font color="#CCCCCC"> I</font>

75
00:02:44,630 --> 00:02:48,620
mean active<font color="#CCCCCC"> security with</font><font color="#E5E5E5"> the board</font>

76
00:02:46,160 --> 00:02:50,390
<font color="#E5E5E5">which means that</font><font color="#CCCCCC"> okay if the adversary</font>

77
00:02:48,620 --> 00:02:52,340
<font color="#E5E5E5">gets to see the output and based on the</font>

78
00:02:50,390 --> 00:02:54,429
output he can decide whether he wants<font color="#CCCCCC"> to</font>

79
00:02:52,340 --> 00:02:57,500
<font color="#CCCCCC">abort the protocol execution or not</font><font color="#E5E5E5"> and</font>

80
00:02:54,430 --> 00:02:58,910
in complete fairness we have the case

81
00:02:57,500 --> 00:03:00,920
<font color="#CCCCCC">that the adversary doesn't see the</font>

82
00:02:58,910 --> 00:03:02,750
output of the computation<font color="#E5E5E5"> and she has to</font>

83
00:03:00,920 --> 00:03:04,700
decide<font color="#E5E5E5"> kind of blindly whether he abort</font>

84
00:03:02,750 --> 00:03:06,740
or not so we show a compiler that takes

85
00:03:04,700 --> 00:03:09,290
<font color="#CCCCCC">an protocol that is actively</font><font color="#E5E5E5"> secure with</font>

86
00:03:06,740 --> 00:03:11,120
<font color="#CCCCCC">a</font><font color="#E5E5E5"> board and the compiler makes the</font>

87
00:03:09,290 --> 00:03:14,929
protocol actively secure with complete

88
00:03:11,120 --> 00:03:16,340
fairness<font color="#CCCCCC"> ok so let's start with the</font>

89
00:03:14,930 --> 00:03:18,140
<font color="#E5E5E5">first question</font><font color="#CCCCCC"> like how can</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> go from</font>

90
00:03:16,340 --> 00:03:19,820
<font color="#E5E5E5">passive to</font><font color="#CCCCCC"> active security in a blackbox</font>

91
00:03:18,140 --> 00:03:21,049
manner and again<font color="#E5E5E5"> like in a blackbox</font>

92
00:03:19,820 --> 00:03:22,970
manner means we cannot look at the

93
00:03:21,050 --> 00:03:25,850
<font color="#E5E5E5">specifics of how the protocol works we</font>

94
00:03:22,970 --> 00:03:27,920
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find some generic way and there</font>

95
00:03:25,850 --> 00:03:29,959
are<font color="#CCCCCC"> two very simple main ideas</font><font color="#E5E5E5"> so let's</font>

96
00:03:27,920 --> 00:03:31,790
say<font color="#E5E5E5"> for the sake</font><font color="#CCCCCC"> of this talk we focus</font>

97
00:03:29,959 --> 00:03:33,080
on<font color="#E5E5E5"> three parties and we want to have a</font>

98
00:03:31,790 --> 00:03:34,730
protocol that<font color="#E5E5E5"> is secure against one</font>

99
00:03:33,080 --> 00:03:36,170
active<font color="#E5E5E5"> corruptions</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> three party</font>

100
00:03:34,730 --> 00:03:38,810
computation with one active corruption

101
00:03:36,170 --> 00:03:41,450
so then there is a simple<font color="#CCCCCC"> observation</font>

102
00:03:38,810 --> 00:03:43,640
which is<font color="#CCCCCC"> well known</font><font color="#E5E5E5"> I guess and so if we</font>

103
00:03:41,450 --> 00:03:44,869
<font color="#CCCCCC">take any</font><font color="#E5E5E5"> pair of two parties and one of</font>

104
00:03:43,640 --> 00:03:49,220
them is malicious then the other one is

105
00:03:44,870 --> 00:03:50,840
honest<font color="#E5E5E5"> and the other thing that we do is</font>

106
00:03:49,220 --> 00:03:52,580
<font color="#CCCCCC">instead</font><font color="#E5E5E5"> of letting the real part is</font>

107
00:03:50,840 --> 00:03:54,530
directly execute the<font color="#CCCCCC"> semi honestly</font>

108
00:03:52,580 --> 00:03:56,570
secure protocol<font color="#E5E5E5"> we will kind of</font>

109
00:03:54,530 --> 00:03:58,640
introduce one layer of indirection so

110
00:03:56,570 --> 00:04:00,320
the real parties will kind of simulate

111
00:03:58,640 --> 00:04:03,079
some virtual parties and this virtual

112
00:04:00,320 --> 00:04:04,820
parties will execute<font color="#CCCCCC"> the</font><font color="#E5E5E5"> semi honestly</font>

113
00:04:03,080 --> 00:04:07,010
secure protocol and the idea is<font color="#E5E5E5"> kind of</font>

114
00:04:04,820 --> 00:04:09,350
in<font color="#E5E5E5"> the way the real part is simulate the</font>

115
00:04:07,010 --> 00:04:13,010
virtual parties we prevent an active

116
00:04:09,350 --> 00:04:16,070
<font color="#CCCCCC">adversary from misbehaving ok so let's</font>

117
00:04:13,010 --> 00:04:18,620
look<font color="#E5E5E5"> at the idea</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> imagine we have</font>

118
00:04:16,070 --> 00:04:21,380
three virtual parties v1 v2 and<font color="#CCCCCC"> v3 and</font>

119
00:04:18,620 --> 00:04:22,700
we are given<font color="#CCCCCC"> some semi honestly secure</font>

120
00:04:21,380 --> 00:04:25,130
protocol<font color="#E5E5E5"> that tells us how we can</font>

121
00:04:22,700 --> 00:04:26,870
compute some functionality<font color="#E5E5E5"> and these</font>

122
00:04:25,130 --> 00:04:29,659
three virtual parties<font color="#E5E5E5"> would like to run</font>

123
00:04:26,870 --> 00:04:32,120
<font color="#CCCCCC">this</font><font color="#E5E5E5"> product this protocol so what this</font>

124
00:04:29,660 --> 00:04:34,070
<font color="#CCCCCC">means is like</font><font color="#E5E5E5"> if the protocol says like</font>

125
00:04:32,120 --> 00:04:35,930
v1 sends a message to v2 then we kind of

126
00:04:34,070 --> 00:04:39,050
simulate<font color="#E5E5E5"> this in some way and</font>

127
00:04:35,930 --> 00:04:40,550
if neither v1 v2 or v3<font color="#E5E5E5"> misbehave if they</font>

128
00:04:39,050 --> 00:04:43,300
all behave<font color="#CCCCCC"> honestly then kind of</font><font color="#E5E5E5"> the</font>

129
00:04:40,550 --> 00:04:46,039
<font color="#E5E5E5">same</font><font color="#CCCCCC"> IANA Security oranges tell us</font><font color="#E5E5E5"> that</font>

130
00:04:43,300 --> 00:04:48,500
they learn nothing apart from<font color="#E5E5E5"> the output</font>

131
00:04:46,039 --> 00:04:51,159
<font color="#E5E5E5">and what they learn from their input so</font>

132
00:04:48,500 --> 00:04:54,350
how do we simulate well we<font color="#E5E5E5"> let kind of</font>

133
00:04:51,160 --> 00:04:56,150
always<font color="#CCCCCC"> two parties in this case simulate</font>

134
00:04:54,350 --> 00:04:59,389
one virtual party so for example in this

135
00:04:56,150 --> 00:05:02,030
<font color="#E5E5E5">case we have p2 in the real parties p2</font>

136
00:04:59,389 --> 00:05:04,729
and p3<font color="#E5E5E5"> simulate the virtual party v1</font>

137
00:05:02,030 --> 00:05:06,679
<font color="#CCCCCC">okay and then we do this kind of for all</font>

138
00:05:04,729 --> 00:05:10,130
of them<font color="#E5E5E5"> and what you can already observe</font>

139
00:05:06,680 --> 00:05:12,169
here is<font color="#E5E5E5"> that every real party simulates</font>

140
00:05:10,130 --> 00:05:14,330
<font color="#E5E5E5">two virtual parties okay so for</font><font color="#CCCCCC"> example</font>

141
00:05:12,169 --> 00:05:18,349
we have the real party p2 it simulates

142
00:05:14,330 --> 00:05:20,930
v1 and it simulates the<font color="#E5E5E5"> real party v3</font>

143
00:05:18,350 --> 00:05:22,760
<font color="#E5E5E5">okay and what do they do to simulate</font>

144
00:05:20,930 --> 00:05:25,940
let's for<font color="#E5E5E5"> the moment assume that somehow</font>

145
00:05:22,760 --> 00:05:27,800
the for<font color="#E5E5E5"> example the real</font><font color="#CCCCCC"> parties in</font><font color="#E5E5E5"> v1</font>

146
00:05:25,940 --> 00:05:29,449
let's say P 2 and P 2 somehow they

147
00:05:27,800 --> 00:05:31,520
already agreed on<font color="#E5E5E5"> an input and they</font>

148
00:05:29,449 --> 00:05:33,949
<font color="#E5E5E5">already agreed on</font><font color="#CCCCCC"> a random tape that</font>

149
00:05:31,520 --> 00:05:35,330
they want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use for the computation so</font>

150
00:05:33,949 --> 00:05:37,250
if they have<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> input and if they</font>

151
00:05:35,330 --> 00:05:39,859
have the same random tape and they run

152
00:05:37,250 --> 00:05:41,300
the same protocol<font color="#E5E5E5"> then they always</font><font color="#CCCCCC"> then</font>

153
00:05:39,860 --> 00:05:44,690
they can<font color="#CCCCCC"> always send the identical</font>

154
00:05:41,300 --> 00:05:47,720
message so what we then<font color="#E5E5E5"> do is kind of</font>

155
00:05:44,690 --> 00:05:49,340
<font color="#E5E5E5">let's say v1 should send a message to v3</font>

156
00:05:47,720 --> 00:05:51,440
and the protocol execution of the<font color="#E5E5E5"> same</font>

157
00:05:49,340 --> 00:05:54,799
<font color="#CCCCCC">unity secure protocol then we will let</font>

158
00:05:51,440 --> 00:05:55,070
<font color="#E5E5E5">p2 and p3 send a message</font><font color="#CCCCCC"> to each</font><font color="#E5E5E5"> p1 and</font>

159
00:05:54,800 --> 00:05:56,840
p2

160
00:05:55,070 --> 00:05:59,570
<font color="#CCCCCC">so p1 in this case will receive a</font>

161
00:05:56,840 --> 00:06:01,159
message<font color="#E5E5E5"> from P 2 and P 3 and P 2 will</font>

162
00:05:59,570 --> 00:06:03,050
also<font color="#E5E5E5"> receive a message from p2 and p3</font>

163
00:06:01,159 --> 00:06:05,150
<font color="#E5E5E5">like it doesn't make sense</font><font color="#CCCCCC"> that p2 send</font>

164
00:06:03,050 --> 00:06:09,590
the message to p2<font color="#E5E5E5"> but like you get the</font>

165
00:06:05,150 --> 00:06:12,919
point so now that<font color="#E5E5E5"> let's say p1 receives</font>

166
00:06:09,590 --> 00:06:14,179
<font color="#CCCCCC">2 messages and we know that</font><font color="#E5E5E5"> we have we</font>

167
00:06:12,919 --> 00:06:15,560
<font color="#E5E5E5">want to be secure against one active</font>

168
00:06:14,180 --> 00:06:18,139
corruption<font color="#E5E5E5"> so what does that mean that</font>

169
00:06:15,560 --> 00:06:19,550
<font color="#CCCCCC">means if the adversary misbehaved then</font>

170
00:06:18,139 --> 00:06:21,830
he will<font color="#CCCCCC"> not be consistent</font><font color="#E5E5E5"> with the other</font>

171
00:06:19,550 --> 00:06:23,360
<font color="#E5E5E5">honest party because he</font><font color="#CCCCCC"> can either</font>

172
00:06:21,830 --> 00:06:25,550
behave honestly<font color="#E5E5E5"> then the two messages</font>

173
00:06:23,360 --> 00:06:27,080
<font color="#CCCCCC">that the party receives are the same or</font>

174
00:06:25,550 --> 00:06:29,120
if one party misbehaves then the two

175
00:06:27,080 --> 00:06:30,979
<font color="#CCCCCC">messages</font><font color="#E5E5E5"> a receiving party receives are</font>

176
00:06:29,120 --> 00:06:33,500
not the same<font color="#E5E5E5"> and in this case the party</font>

177
00:06:30,979 --> 00:06:36,110
can abort and it doesn't respond<font color="#CCCCCC"> to a</font>

178
00:06:33,500 --> 00:06:38,750
maliciously formed message<font color="#E5E5E5"> so this is</font>

179
00:06:36,110 --> 00:06:41,630
the idea of the protocol<font color="#E5E5E5"> and this way</font>

180
00:06:38,750 --> 00:06:43,340
like we can see that in this case V for

181
00:06:41,630 --> 00:06:45,110
example achieve security<font color="#E5E5E5"> against one</font>

182
00:06:43,340 --> 00:06:46,580
active corruption and now the question

183
00:06:45,110 --> 00:06:48,110
<font color="#CCCCCC">is what do we need from the semi</font>

184
00:06:46,580 --> 00:06:49,229
honestly secure protocol in terms of

185
00:06:48,110 --> 00:06:51,630
security<font color="#E5E5E5"> guarantees</font>

186
00:06:49,230 --> 00:06:54,600
well as I said<font color="#CCCCCC"> before like</font><font color="#E5E5E5"> every real</font>

187
00:06:51,630 --> 00:06:57,420
party participates in the simulation of

188
00:06:54,600 --> 00:06:59,970
<font color="#E5E5E5">two virtual parties so now if basically</font>

189
00:06:57,420 --> 00:07:03,420
if<font color="#E5E5E5"> I corrupt one real party then</font><font color="#CCCCCC"> i</font>

190
00:06:59,970 --> 00:07:05,520
corrupt<font color="#CCCCCC"> two virtual parties</font><font color="#E5E5E5"> so that</font>

191
00:07:03,420 --> 00:07:07,200
means<font color="#E5E5E5"> that the underlying semi honestly</font>

192
00:07:05,520 --> 00:07:09,060
<font color="#CCCCCC">secret protocol</font><font color="#E5E5E5"> that I need it needs to</font>

193
00:07:07,200 --> 00:07:13,110
be<font color="#E5E5E5"> secured against to</font><font color="#CCCCCC"> semie moseley</font>

194
00:07:09,060 --> 00:07:15,810
<font color="#CCCCCC">secure corruptions okay and this idea</font>

195
00:07:13,110 --> 00:07:17,310
also generalizes so for example there is

196
00:07:15,810 --> 00:07:19,110
<font color="#CCCCCC">no reason why this needs to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> three so</font>

197
00:07:17,310 --> 00:07:21,660
it can also be<font color="#E5E5E5"> more than three it can be</font>

198
00:07:19,110 --> 00:07:24,990
in like an<font color="#E5E5E5"> end party protocol and you</font>

199
00:07:21,660 --> 00:07:26,790
can also increase the<font color="#CCCCCC"> number of</font>

200
00:07:24,990 --> 00:07:28,890
corruptions that you can handle<font color="#E5E5E5"> the main</font>

201
00:07:26,790 --> 00:07:31,590
point<font color="#CCCCCC"> here is that every virtual party</font>

202
00:07:28,890 --> 00:07:33,599
contains one honest party<font color="#E5E5E5"> so that means</font>

203
00:07:31,590 --> 00:07:36,299
that if all but one part like if you

204
00:07:33,600 --> 00:07:37,530
have let's say<font color="#E5E5E5"> five corruptions if you</font>

205
00:07:36,300 --> 00:07:39,450
want to be<font color="#E5E5E5"> secure against five active</font>

206
00:07:37,530 --> 00:07:42,659
corruptions<font color="#E5E5E5"> then every virtual party</font>

207
00:07:39,450 --> 00:07:45,180
will be simulated by<font color="#E5E5E5"> six parties which</font>

208
00:07:42,660 --> 00:07:46,620
means that if<font color="#E5E5E5"> any of them or</font><font color="#CCCCCC"> all of them</font>

209
00:07:45,180 --> 00:07:48,960
<font color="#E5E5E5">is behaved there will be at least one</font>

210
00:07:46,620 --> 00:07:53,610
<font color="#E5E5E5">same like one honest party that sends</font>

211
00:07:48,960 --> 00:07:55,049
the correct message<font color="#E5E5E5"> wait cool so there</font>

212
00:07:53,610 --> 00:07:58,050
<font color="#E5E5E5">are two kind of small</font><font color="#CCCCCC"> details today</font>

213
00:07:55,050 --> 00:07:59,760
glossed over so the first one is<font color="#E5E5E5"> I said</font>

214
00:07:58,050 --> 00:08:01,740
they<font color="#E5E5E5"> already agreed and if on an input</font>

215
00:07:59,760 --> 00:08:03,900
<font color="#E5E5E5">and a random</font><font color="#CCCCCC"> tape that</font><font color="#E5E5E5"> they will use but</font>

216
00:08:01,740 --> 00:08:05,580
<font color="#E5E5E5">obviously like one party cannot just</font>

217
00:08:03,900 --> 00:08:07,200
distribute their plain input<font color="#E5E5E5"> so we need</font>

218
00:08:05,580 --> 00:08:08,880
to somehow take care of this<font color="#E5E5E5"> and the</font>

219
00:08:07,200 --> 00:08:11,789
second thing is what<font color="#CCCCCC"> about the random</font>

220
00:08:08,880 --> 00:08:15,000
<font color="#CCCCCC">tapes so the random tapes we either use</font>

221
00:08:11,790 --> 00:08:18,420
<font color="#E5E5E5">a coin tossing for so that kind of the</font>

222
00:08:15,000 --> 00:08:20,160
group<font color="#E5E5E5"> like a group of a set of real</font>

223
00:08:18,420 --> 00:08:21,870
parties to simulate a specific<font color="#CCCCCC"> virtual</font>

224
00:08:20,160 --> 00:08:24,540
party they will basically run<font color="#E5E5E5"> a coin</font>

225
00:08:21,870 --> 00:08:27,600
tossing protocol to agree on a random

226
00:08:24,540 --> 00:08:30,210
<font color="#CCCCCC">tape that they will use and then the</font>

227
00:08:27,600 --> 00:08:32,010
inputs of<font color="#E5E5E5"> the virtual heart is we take</font>

228
00:08:30,210 --> 00:08:34,289
<font color="#E5E5E5">care</font><font color="#CCCCCC"> of them as</font><font color="#E5E5E5"> follows so let's say I</font>

229
00:08:32,010 --> 00:08:36,479
have again the real part is p1 p2<font color="#CCCCCC"> and p3</font>

230
00:08:34,289 --> 00:08:38,909
<font color="#E5E5E5">and they would like to compute the</font>

231
00:08:36,479 --> 00:08:42,660
function f of<font color="#CCCCCC"> XY is</font><font color="#E5E5E5"> that where x y&z are</font>

232
00:08:38,909 --> 00:08:45,089
their actual inputs but now we have the

233
00:08:42,659 --> 00:08:48,270
<font color="#E5E5E5">virtual parties and what we now do is</font>

234
00:08:45,090 --> 00:08:49,770
well we simply<font color="#CCCCCC"> split</font><font color="#E5E5E5"> so for example</font>

235
00:08:48,270 --> 00:08:52,560
people<font color="#E5E5E5"> and simply splits his input X</font>

236
00:08:49,770 --> 00:08:54,449
into<font color="#CCCCCC"> three shares</font><font color="#E5E5E5"> and then he gives one</font>

237
00:08:52,560 --> 00:08:55,979
share to every virtual party so what

238
00:08:54,450 --> 00:08:57,960
does it<font color="#E5E5E5"> mean by he gives</font><font color="#CCCCCC"> a share to a</font>

239
00:08:55,980 --> 00:08:59,670
virtual party<font color="#E5E5E5"> he sends it to all the</font>

240
00:08:57,960 --> 00:09:02,180
real parties that simulate<font color="#E5E5E5"> that virtual</font>

241
00:08:59,670 --> 00:09:05,479
party<font color="#E5E5E5"> okay now</font>

242
00:09:02,180 --> 00:09:07,729
<font color="#CCCCCC">as I said like an active adversary</font><font color="#E5E5E5"> would</font>

243
00:09:05,480 --> 00:09:09,649
kind<font color="#CCCCCC"> of corrupt</font><font color="#E5E5E5"> to virtual parties and</font>

244
00:09:07,730 --> 00:09:12,589
this means<font color="#CCCCCC"> that she's still missing one</font>

245
00:09:09,649 --> 00:09:14,630
<font color="#E5E5E5">share to reconstruct the input okay and</font>

246
00:09:12,589 --> 00:09:16,010
all of the other<font color="#E5E5E5"> people do that as well</font>

247
00:09:14,630 --> 00:09:17,870
and<font color="#E5E5E5"> then instead of</font><font color="#CCCCCC"> computing the</font>

248
00:09:16,010 --> 00:09:19,130
original<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> we compute a</font>

249
00:09:17,870 --> 00:09:20,959
related<font color="#E5E5E5"> functionality which first</font>

250
00:09:19,130 --> 00:09:24,680
<font color="#E5E5E5">reconstructs the inputs and then</font>

251
00:09:20,959 --> 00:09:29,989
evaluates the function f on them<font color="#E5E5E5"> okay so</font>

252
00:09:24,680 --> 00:09:32,689
apart from this<font color="#E5E5E5"> being I guess nice</font><font color="#CCCCCC"> what</font>

253
00:09:29,990 --> 00:09:34,520
is this good for<font color="#E5E5E5"> so what we then looked</font>

254
00:09:32,690 --> 00:09:36,620
at we said<font color="#E5E5E5"> okay let's</font><font color="#CCCCCC"> take a specific</font>

255
00:09:34,520 --> 00:09:39,230
<font color="#E5E5E5">protocol and see how efficient our</font>

256
00:09:36,620 --> 00:09:41,870
compiler gets with this<font color="#E5E5E5"> so we've focused</font>

257
00:09:39,230 --> 00:09:44,870
on the<font color="#CCCCCC"> bieber's a circuit evaluation</font>

258
00:09:41,870 --> 00:09:46,490
<font color="#E5E5E5">approach which requires a pre-processing</font>

259
00:09:44,870 --> 00:09:48,740
<font color="#E5E5E5">phase so we design a pre-processing</font>

260
00:09:46,490 --> 00:09:51,020
phase with active security<font color="#CCCCCC"> we apply our</font>

261
00:09:48,740 --> 00:09:52,910
compiler to the online<font color="#E5E5E5"> phase and then we</font>

262
00:09:51,020 --> 00:09:54,800
get an efficient<font color="#E5E5E5"> 3pc over rings and like</font>

263
00:09:52,910 --> 00:09:56,630
so why is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> interesting that</font><font color="#E5E5E5"> it's over</font>

264
00:09:54,800 --> 00:09:58,790
ring<font color="#E5E5E5"> so I didn't</font><font color="#CCCCCC"> mention</font><font color="#E5E5E5"> it before</font><font color="#CCCCCC"> like</font>

265
00:09:56,630 --> 00:10:00,620
when we consider semi<font color="#CCCCCC"> honestly secure</font>

266
00:09:58,790 --> 00:10:02,420
protocols<font color="#E5E5E5"> we can do them over many</font>

267
00:10:00,620 --> 00:10:04,670
<font color="#CCCCCC">domains we can do it</font><font color="#E5E5E5"> over a field we can</font>

268
00:10:02,420 --> 00:10:05,839
do binary circuits we can do<font color="#E5E5E5"> rings but</font>

269
00:10:04,670 --> 00:10:08,270
as you have<font color="#E5E5E5"> seen in the previous talks</font>

270
00:10:05,839 --> 00:10:09,920
it's quite<font color="#E5E5E5"> challenging to get active</font>

271
00:10:08,270 --> 00:10:11,660
security<font color="#E5E5E5"> over a ring for</font><font color="#CCCCCC"> example the</font>

272
00:10:09,920 --> 00:10:13,130
approaches with<font color="#CCCCCC"> necks you need to like</font>

273
00:10:11,660 --> 00:10:15,500
you<font color="#E5E5E5"> know do a lot of trickery</font><font color="#CCCCCC"> and magic</font>

274
00:10:13,130 --> 00:10:17,870
to get there<font color="#CCCCCC"> but</font><font color="#E5E5E5"> since the compiler</font>

275
00:10:15,500 --> 00:10:19,130
<font color="#E5E5E5">doesn't use any kind of mechs if you</font>

276
00:10:17,870 --> 00:10:20,750
start with<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> Annesley secure</font>

277
00:10:19,130 --> 00:10:22,730
<font color="#E5E5E5">protocol over rings the actively secure</font>

278
00:10:20,750 --> 00:10:24,170
protocol will just will work over rings

279
00:10:22,730 --> 00:10:26,990
just fine because the<font color="#E5E5E5"> only thing you do</font>

280
00:10:24,170 --> 00:10:28,339
is you send message like redundantly you

281
00:10:26,990 --> 00:10:30,440
don't need to exploit any<font color="#E5E5E5"> kind of</font>

282
00:10:28,339 --> 00:10:33,980
<font color="#E5E5E5">underlying structure over which you do</font>

283
00:10:30,440 --> 00:10:35,540
the computations<font color="#E5E5E5"> okay so like this I</font>

284
00:10:33,980 --> 00:10:37,550
will<font color="#E5E5E5"> be very quick</font><font color="#CCCCCC"> because we've just</font>

285
00:10:35,540 --> 00:10:39,260
seen it so<font color="#E5E5E5"> the beaver circuit evaluation</font>

286
00:10:37,550 --> 00:10:41,810
<font color="#CCCCCC">approach everybody additively secret</font>

287
00:10:39,260 --> 00:10:43,250
shares this<font color="#CCCCCC"> input they evaluate the</font>

288
00:10:41,810 --> 00:10:45,680
circuit gate by gate<font color="#CCCCCC"> and then they</font>

289
00:10:43,250 --> 00:10:47,720
reconstruct the outputs so for example

290
00:10:45,680 --> 00:10:49,160
if you have an input<font color="#E5E5E5"> X they were it will</font>

291
00:10:47,720 --> 00:10:50,779
be split for<font color="#CCCCCC"> the case of three parties</font>

292
00:10:49,160 --> 00:10:53,810
<font color="#E5E5E5">that will be split into X 1 X 2</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> X 3</font>

293
00:10:50,779 --> 00:10:56,209
<font color="#CCCCCC">and one of the real players</font><font color="#E5E5E5"> gets one of</font>

294
00:10:53,810 --> 00:10:57,560
those if they<font color="#CCCCCC"> want to add them they can</font>

295
00:10:56,209 --> 00:10:58,969
do it<font color="#CCCCCC"> locally</font><font color="#E5E5E5"> and if they want to</font>

296
00:10:57,560 --> 00:11:01,670
multiply<font color="#E5E5E5"> them well then they</font><font color="#CCCCCC"> need</font>

297
00:10:58,970 --> 00:11:02,750
multiplication triple<font color="#E5E5E5"> so now can if the</font>

298
00:11:01,670 --> 00:11:04,130
question<font color="#E5E5E5"> is how do we generate</font><font color="#CCCCCC"> these</font>

299
00:11:02,750 --> 00:11:08,209
multiplication triples efficiently over

300
00:11:04,130 --> 00:11:09,709
rings and I will only give a<font color="#E5E5E5"> very</font>

301
00:11:08,209 --> 00:11:11,989
high-level idea<font color="#CCCCCC"> of the protocol to</font><font color="#E5E5E5"> not</font>

302
00:11:09,709 --> 00:11:14,180
get lost<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the details</font><font color="#CCCCCC"> but kind of</font><font color="#E5E5E5"> the</font>

303
00:11:11,990 --> 00:11:15,860
main challenges<font color="#E5E5E5"> we can generate</font>

304
00:11:14,180 --> 00:11:18,589
multiplication triples with

305
00:11:15,860 --> 00:11:20,390
on a security very easily and then how

306
00:11:18,590 --> 00:11:22,280
do we<font color="#E5E5E5"> lift them to</font><font color="#CCCCCC"> active security as we</font>

307
00:11:20,390 --> 00:11:24,560
generate<font color="#E5E5E5"> to multiplication triples which</font>

308
00:11:22,280 --> 00:11:26,360
may be potentially incorrect<font color="#E5E5E5"> and then we</font>

309
00:11:24,560 --> 00:11:28,280
sacrifice one of<font color="#CCCCCC"> them to check the</font>

310
00:11:26,360 --> 00:11:29,840
correctness of the other one<font color="#E5E5E5"> so can if</font>

311
00:11:28,280 --> 00:11:31,660
we<font color="#E5E5E5"> generate two triples we lose one of</font>

312
00:11:29,840 --> 00:11:33,680
them but<font color="#E5E5E5"> we know that the</font><font color="#CCCCCC"> other one is</font>

313
00:11:31,660 --> 00:11:35,000
<font color="#E5E5E5">correct and</font><font color="#CCCCCC"> we don't learn anything</font>

314
00:11:33,680 --> 00:11:36,739
about<font color="#E5E5E5"> the secret shared values of those</font>

315
00:11:35,000 --> 00:11:38,480
multiplication triples<font color="#CCCCCC"> the issue with</font>

316
00:11:36,740 --> 00:11:40,850
this is<font color="#E5E5E5"> that if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to generate</font>

317
00:11:38,480 --> 00:11:42,620
multiplication triples<font color="#E5E5E5"> over a ring then</font>

318
00:11:40,850 --> 00:11:43,610
this check of sacrificing one<font color="#E5E5E5"> triple to</font>

319
00:11:42,620 --> 00:11:45,890
check the other one doesn't<font color="#E5E5E5"> work</font>

320
00:11:43,610 --> 00:11:48,440
directly<font color="#E5E5E5"> over a ring so what we do</font>

321
00:11:45,890 --> 00:11:50,569
instead<font color="#E5E5E5"> now as we say we will kind of</font>

322
00:11:48,440 --> 00:11:52,550
first generate a triple over the

323
00:11:50,570 --> 00:11:54,920
<font color="#E5E5E5">integers</font><font color="#CCCCCC"> so that means we will generate</font>

324
00:11:52,550 --> 00:11:57,859
a triple which is not a secret shirt

325
00:11:54,920 --> 00:11:59,540
modulo some number M but instead we will

326
00:11:57,860 --> 00:12:01,280
just<font color="#E5E5E5"> throw a lot of noise</font><font color="#CCCCCC"> onto it so if</font>

327
00:11:59,540 --> 00:12:04,670
you want<font color="#E5E5E5"> to for example share a number</font>

328
00:12:01,280 --> 00:12:06,560
in<font color="#CCCCCC"> that</font><font color="#E5E5E5"> M then we will expand this</font>

329
00:12:04,670 --> 00:12:09,290
number<font color="#E5E5E5"> and with security parameter many</font>

330
00:12:06,560 --> 00:12:10,729
bits of noise and if you secret share

331
00:12:09,290 --> 00:12:15,170
something over the<font color="#E5E5E5"> integers without any</font>

332
00:12:10,730 --> 00:12:16,850
<font color="#E5E5E5">modular operation then the the parties</font>

333
00:12:15,170 --> 00:12:17,750
can still not learn which value a secret

334
00:12:16,850 --> 00:12:20,210
<font color="#CCCCCC">shared even though you didn't perform</font>

335
00:12:17,750 --> 00:12:21,650
any modular arithmetic on<font color="#CCCCCC"> this values</font><font color="#E5E5E5"> so</font>

336
00:12:20,210 --> 00:12:24,500
the first step what we do is<font color="#CCCCCC"> we a secret</font>

337
00:12:21,650 --> 00:12:26,000
share<font color="#E5E5E5"> we use the standard approaches of</font>

338
00:12:24,500 --> 00:12:28,520
semi honestly generating a

339
00:12:26,000 --> 00:12:32,690
multiplication triple<font color="#E5E5E5"> over the integers</font>

340
00:12:28,520 --> 00:12:34,579
with these<font color="#CCCCCC"> noise things in the second</font>

341
00:12:32,690 --> 00:12:36,380
step<font color="#E5E5E5"> we generate a triple a</font>

342
00:12:34,580 --> 00:12:38,420
multiplication triple<font color="#E5E5E5"> against a -</font><font color="#CCCCCC"> Lea</font>

343
00:12:36,380 --> 00:12:42,080
<font color="#E5E5E5">secured over a field and what we require</font>

344
00:12:38,420 --> 00:12:44,120
is that<font color="#E5E5E5"> the field is so large that the</font>

345
00:12:42,080 --> 00:12:47,570
<font color="#E5E5E5">multiplication triple from</font><font color="#CCCCCC"> that M does</font>

346
00:12:44,120 --> 00:12:50,240
<font color="#E5E5E5">not overflow so kind of we can embed the</font>

347
00:12:47,570 --> 00:12:53,300
multiplication triple from<font color="#CCCCCC"> ZM into the</font>

348
00:12:50,240 --> 00:12:56,060
prime<font color="#E5E5E5"> field without requiring to ever do</font>

349
00:12:53,300 --> 00:13:00,500
a modular reduction<font color="#E5E5E5"> like mod mod P</font>

350
00:12:56,060 --> 00:13:02,689
<font color="#E5E5E5">operation and then we interpret the</font>

351
00:13:00,500 --> 00:13:05,180
triple over the integers<font color="#E5E5E5"> as a triple in</font>

352
00:13:02,690 --> 00:13:06,680
<font color="#CCCCCC">the field and we</font><font color="#E5E5E5"> sacrifice the original</font>

353
00:13:05,180 --> 00:13:08,420
triple in the<font color="#E5E5E5"> field that we generated to</font>

354
00:13:06,680 --> 00:13:11,270
check the correctness of the triple over

355
00:13:08,420 --> 00:13:13,189
the<font color="#E5E5E5"> integers and why is this useful well</font>

356
00:13:11,270 --> 00:13:15,230
the kind of the whole point<font color="#E5E5E5"> of this is</font>

357
00:13:13,190 --> 00:13:17,150
<font color="#CCCCCC">that now we know that the triples</font><font color="#E5E5E5"> are</font>

358
00:13:15,230 --> 00:13:19,550
correct and we can simply<font color="#E5E5E5"> reduce the</font>

359
00:13:17,150 --> 00:13:22,340
triple over the<font color="#E5E5E5"> integers modulo</font><font color="#CCCCCC"> m to</font>

360
00:13:19,550 --> 00:13:23,839
obtain a triple<font color="#CCCCCC"> NZ m</font><font color="#E5E5E5"> because if it's a</font>

361
00:13:22,340 --> 00:13:24,950
valid multiplication triple over the

362
00:13:23,840 --> 00:13:28,310
integers<font color="#E5E5E5"> then it's a valid</font>

363
00:13:24,950 --> 00:13:29,649
multiplication triple<font color="#E5E5E5"> NZ</font><font color="#CCCCCC"> m so this is</font>

364
00:13:28,310 --> 00:13:32,920
the idea

365
00:13:29,649 --> 00:13:35,699
and so we<font color="#E5E5E5"> are at the summary which means</font>

366
00:13:32,920 --> 00:13:40,300
I am<font color="#E5E5E5"> way too fast</font>

367
00:13:35,699 --> 00:13:42,128
so to recall the results<font color="#E5E5E5"> we propose a</font>

368
00:13:40,300 --> 00:13:45,459
compiler<font color="#E5E5E5"> where you have an end party</font>

369
00:13:42,129 --> 00:13:49,300
protocol which<font color="#CCCCCC"> has let's say roughly a</font><font color="#E5E5E5"> T</font>

370
00:13:45,459 --> 00:13:51,160
<font color="#E5E5E5">squared privacy</font><font color="#CCCCCC"> Agron T and then you can</font>

371
00:13:49,300 --> 00:13:53,709
generate<font color="#CCCCCC"> an actively secure protocol</font>

372
00:13:51,160 --> 00:13:56,618
which only is<font color="#CCCCCC"> secured against</font><font color="#E5E5E5"> T active</font>

373
00:13:53,709 --> 00:13:58,809
corruptions<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the compiler also works</font>

374
00:13:56,619 --> 00:14:00,509
for adaptive corruptions if you assume

375
00:13:58,809 --> 00:14:04,319
that<font color="#E5E5E5"> the same entity secure protocol is</font>

376
00:14:00,509 --> 00:14:07,360
also<font color="#E5E5E5"> secure under adaptive corruptions</font>

377
00:14:04,319 --> 00:14:08,800
<font color="#CCCCCC">the second thing that we do is we show</font>

378
00:14:07,360 --> 00:14:11,529
that you can transform an actively

379
00:14:08,800 --> 00:14:13,269
secure protocol into an<font color="#E5E5E5"> active with</font><font color="#CCCCCC"> a</font>

380
00:14:11,529 --> 00:14:14,769
protocol<font color="#E5E5E5"> that is actively secured with a</font>

381
00:14:13,269 --> 00:14:17,589
board into a protocol<font color="#E5E5E5"> that is actively</font>

382
00:14:14,769 --> 00:14:19,059
<font color="#E5E5E5">secure</font><font color="#CCCCCC"> with complete fairness</font><font color="#E5E5E5"> and then</font>

383
00:14:17,589 --> 00:14:22,029
the last thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I just highlight</font>

384
00:14:19,059 --> 00:14:24,670
<font color="#E5E5E5">like gave a sketch off is we also</font>

385
00:14:22,029 --> 00:14:26,439
<font color="#CCCCCC">propose this</font><font color="#E5E5E5"> three party</font><font color="#CCCCCC"> one actively</font>

386
00:14:24,670 --> 00:14:28,179
<font color="#E5E5E5">secure for generating triples over a</font>

387
00:14:26,439 --> 00:14:31,118
ring and<font color="#E5E5E5"> then combining it compiling it</font>

388
00:14:28,179 --> 00:14:33,459
with our compiler<font color="#E5E5E5"> we get three party</font>

389
00:14:31,119 --> 00:14:35,110
computation over rings with one which

390
00:14:33,459 --> 00:14:36,429
tolerate one<font color="#E5E5E5"> active corruptions and</font>

391
00:14:35,110 --> 00:14:38,499
where the computation overhead is very

392
00:14:36,429 --> 00:14:40,899
low because all you do is you just<font color="#E5E5E5"> send</font>

393
00:14:38,499 --> 00:14:43,240
values redundantly there is no heavy

394
00:14:40,899 --> 00:14:45,680
computation<font color="#E5E5E5"> involved there yeah</font>

395
00:14:43,240 --> 00:14:52,520
questions

396
00:14:45,680 --> 00:14:52,520
[Applause]

