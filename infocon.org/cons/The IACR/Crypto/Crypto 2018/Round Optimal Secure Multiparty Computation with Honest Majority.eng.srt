1
00:00:06,760 --> 00:00:11,600
good morning everyone

2
00:00:08,420 --> 00:00:13,519
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> Irish</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about a</font>

3
00:00:11,600 --> 00:00:15,739
result on round optimal secure

4
00:00:13,519 --> 00:00:18,590
multi-party computation with honest

5
00:00:15,740 --> 00:00:20,810
majority<font color="#E5E5E5"> this is joint work with my</font>

6
00:00:18,590 --> 00:00:25,070
co-authors prevention<font color="#CCCCCC"> Anant arca right</font>

7
00:00:20,810 --> 00:00:28,009
<font color="#E5E5E5">Ravi and Abhishek</font><font color="#CCCCCC"> ten so first let me</font>

8
00:00:25,070 --> 00:00:30,470
start<font color="#E5E5E5"> by describing the setting of</font><font color="#CCCCCC"> multi</font>

9
00:00:28,009 --> 00:00:32,329
<font color="#CCCCCC">body competition so we have a group of</font>

10
00:00:30,470 --> 00:00:34,969
parties<font color="#E5E5E5"> each with their private</font>

11
00:00:32,329 --> 00:00:37,820
individual inputs<font color="#E5E5E5"> and they wish to</font>

12
00:00:34,969 --> 00:00:40,040
securely compute a joint function<font color="#E5E5E5"> over</font>

13
00:00:37,820 --> 00:00:42,770
these inputs and what do we<font color="#CCCCCC"> mean</font><font color="#E5E5E5"> by</font>

14
00:00:40,040 --> 00:00:45,200
securely computing a function<font color="#E5E5E5"> it</font>

15
00:00:42,770 --> 00:00:47,420
essentially<font color="#E5E5E5"> means that an adversary who</font>

16
00:00:45,200 --> 00:00:49,540
can<font color="#CCCCCC"> corrupt</font><font color="#E5E5E5"> a subset of these parties</font>

17
00:00:47,420 --> 00:00:52,280
should not be<font color="#E5E5E5"> able to learn anything</font>

18
00:00:49,540 --> 00:00:54,500
<font color="#E5E5E5">about the inputs of the honest parties</font>

19
00:00:52,280 --> 00:00:58,670
<font color="#E5E5E5">beyond what is already revealed by the</font>

20
00:00:54,500 --> 00:01:01,030
output of the function<font color="#CCCCCC"> our</font><font color="#E5E5E5"> focus here is</font>

21
00:00:58,670 --> 00:01:03,470
<font color="#E5E5E5">mainly</font><font color="#CCCCCC"> on the honest majority setting</font>

22
00:01:01,030 --> 00:01:05,420
where the adversary<font color="#E5E5E5"> is allowed to</font>

23
00:01:03,470 --> 00:01:09,380
<font color="#E5E5E5">corrupt up to</font><font color="#CCCCCC"> t less than n by two</font>

24
00:01:05,420 --> 00:01:11,659
parties honest majority<font color="#E5E5E5"> MPC has been</font>

25
00:01:09,380 --> 00:01:13,339
studied since<font color="#CCCCCC"> the 80s</font><font color="#E5E5E5"> and there are a</font>

26
00:01:11,659 --> 00:01:16,090
<font color="#E5E5E5">couple of reasons that make it an</font>

27
00:01:13,340 --> 00:01:19,130
<font color="#CCCCCC">interesting area</font><font color="#E5E5E5"> of study so firstly</font>

28
00:01:16,090 --> 00:01:23,360
oblivious transfer is<font color="#E5E5E5"> not necessary</font><font color="#CCCCCC"> for</font>

29
00:01:19,130 --> 00:01:25,640
achieving honest majority<font color="#E5E5E5"> MPC also it</font>

30
00:01:23,360 --> 00:01:27,799
allows for<font color="#E5E5E5"> stronger security notions</font>

31
00:01:25,640 --> 00:01:30,560
such as<font color="#E5E5E5"> fairness and guaranteed output</font>

32
00:01:27,799 --> 00:01:32,960
delivery<font color="#E5E5E5"> which are impossible</font><font color="#CCCCCC"> to achieve</font>

33
00:01:30,560 --> 00:01:35,869
<font color="#E5E5E5">in the dishonest majorities I think I</font>

34
00:01:32,960 --> 00:01:40,610
will talk<font color="#E5E5E5"> about these security notions</font>

35
00:01:35,869 --> 00:01:42,920
<font color="#E5E5E5">in more detail in a while</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> you see</font>

36
00:01:40,610 --> 00:01:45,590
security<font color="#CCCCCC"> is achievable in the</font><font color="#E5E5E5"> honest</font>

37
00:01:42,920 --> 00:01:49,520
majority setting<font color="#E5E5E5"> without any additional</font>

38
00:01:45,590 --> 00:01:51,740
trusted<font color="#E5E5E5"> setups</font><font color="#CCCCCC"> one of the primary</font>

39
00:01:49,520 --> 00:01:54,229
<font color="#E5E5E5">focuses of this talk is</font><font color="#CCCCCC"> on the round</font>

40
00:01:51,740 --> 00:01:56,330
complexity and interestingly enough<font color="#E5E5E5"> the</font>

41
00:01:54,229 --> 00:01:58,189
round complexity lower bounds of the

42
00:01:56,330 --> 00:02:02,330
dishonest majority setting do not apply

43
00:01:58,189 --> 00:02:03,679
<font color="#CCCCCC">here</font><font color="#E5E5E5"> okay so what what is the question</font>

44
00:02:02,330 --> 00:02:05,780
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> are interested in we are</font>

45
00:02:03,680 --> 00:02:08,119
interested in the exact round complexity

46
00:02:05,780 --> 00:02:10,848
of honest majority<font color="#CCCCCC"> MPC in the plain</font>

47
00:02:08,119 --> 00:02:13,760
<font color="#E5E5E5">model and to make this question</font><font color="#CCCCCC"> a little</font>

48
00:02:10,848 --> 00:02:16,040
<font color="#E5E5E5">more concrete let me start by talking</font>

49
00:02:13,760 --> 00:02:19,700
about this various<font color="#E5E5E5"> security</font>

50
00:02:16,040 --> 00:02:22,010
<font color="#E5E5E5">that we have in the setting so first we</font>

51
00:02:19,700 --> 00:02:24,409
have security with<font color="#CCCCCC"> a bot</font><font color="#E5E5E5"> which is the</font>

52
00:02:22,010 --> 00:02:26,750
<font color="#E5E5E5">most well studied notion where the</font>

53
00:02:24,409 --> 00:02:28,849
<font color="#CCCCCC">adversary can learn the output but it</font>

54
00:02:26,750 --> 00:02:31,250
<font color="#E5E5E5">can prevent the honest parties from</font>

55
00:02:28,849 --> 00:02:34,988
learning<font color="#CCCCCC"> the output by aborting</font>

56
00:02:31,250 --> 00:02:37,879
prematurely<font color="#E5E5E5"> next we have the strongest</font>

57
00:02:34,989 --> 00:02:40,549
security<font color="#CCCCCC"> notion called a guaranteed</font>

58
00:02:37,879 --> 00:02:42,290
output delivery where no matter<font color="#E5E5E5"> what the</font>

59
00:02:40,549 --> 00:02:45,079
it was<font color="#E5E5E5"> we cannot prevent the honest</font>

60
00:02:42,290 --> 00:02:47,719
parties from learning the output a

61
00:02:45,079 --> 00:02:49,970
relaxation<font color="#CCCCCC"> of this notion called</font>

62
00:02:47,719 --> 00:02:52,189
fairness guarantees that<font color="#CCCCCC"> either all</font>

63
00:02:49,970 --> 00:02:56,060
parties learn the output or or nobody

64
00:02:52,189 --> 00:03:00,138
learns the output<font color="#E5E5E5"> and clearly guaranteed</font>

65
00:02:56,060 --> 00:03:02,510
output delivery implies fairness so our

66
00:03:00,139 --> 00:03:04,159
goal<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> to develop round optimal</font>

67
00:03:02,510 --> 00:03:05,899
protocols in<font color="#E5E5E5"> the honest majority</font>

68
00:03:04,159 --> 00:03:09,168
settings for each of these security

69
00:03:05,900 --> 00:03:12,799
notions and we will consider both semi

70
00:03:09,169 --> 00:03:15,139
honest and malicious<font color="#CCCCCC"> adversaries okay so</font>

71
00:03:12,799 --> 00:03:18,590
let<font color="#CCCCCC"> me start by giving an overview of</font>

72
00:03:15,139 --> 00:03:21,169
what is already<font color="#E5E5E5"> known in this area so</font>

73
00:03:18,590 --> 00:03:23,629
feasibility results for security with

74
00:03:21,169 --> 00:03:27,069
abort were already established<font color="#CCCCCC"> in the</font>

75
00:03:23,629 --> 00:03:30,948
80s<font color="#E5E5E5"> and these protocols</font><font color="#CCCCCC"> gave us</font>

76
00:03:27,069 --> 00:03:34,659
polynomial round protocols<font color="#CCCCCC"> then later in</font>

77
00:03:30,949 --> 00:03:37,190
in 1990<font color="#E5E5E5"> we were Macaulay and rogue away</font>

78
00:03:34,659 --> 00:03:40,040
initiated the study of constant round

79
00:03:37,190 --> 00:03:42,349
protocols and since then there have<font color="#CCCCCC"> been</font>

80
00:03:40,040 --> 00:03:44,840
<font color="#CCCCCC">several works</font><font color="#E5E5E5"> improving over these</font>

81
00:03:42,349 --> 00:03:48,649
<font color="#E5E5E5">results but due to lack</font><font color="#CCCCCC"> of time</font><font color="#E5E5E5"> I'll</font>

82
00:03:44,840 --> 00:03:51,159
skip over<font color="#E5E5E5"> to just to round protocols so</font>

83
00:03:48,650 --> 00:03:53,329
<font color="#E5E5E5">in Tehran protocols</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> shy at all</font>

84
00:03:51,159 --> 00:03:56,569
<font color="#E5E5E5">constructed to</font><font color="#CCCCCC"> around unconditionally</font>

85
00:03:53,329 --> 00:04:01,040
secure protocol for T less<font color="#E5E5E5"> than n by</font><font color="#CCCCCC"> 3</font>

86
00:03:56,569 --> 00:04:03,798
corruptions<font color="#E5E5E5"> and more recently in</font><font color="#CCCCCC"> Europe</font>

87
00:04:01,040 --> 00:04:06,138
<font color="#CCCCCC">20:17 been Oh m'darlin</font><font color="#E5E5E5"> and gulp</font>

88
00:04:03,799 --> 00:04:09,139
<font color="#E5E5E5">Srinivasan constructed to round</font>

89
00:04:06,139 --> 00:04:11,150
dishonest majority protocols<font color="#E5E5E5"> their semi</font>

90
00:04:09,139 --> 00:04:13,549
honest protocols were based on<font color="#CCCCCC"> ot and</font>

91
00:04:11,150 --> 00:04:16,579
the malicious protocols were in the<font color="#CCCCCC"> crs</font>

92
00:04:13,549 --> 00:04:19,728
model and so based on these

93
00:04:16,579 --> 00:04:21,769
state-of-the-art<font color="#E5E5E5"> results we</font><font color="#CCCCCC"> ask the</font>

94
00:04:19,728 --> 00:04:25,130
<font color="#E5E5E5">following question does there exist a</font>

95
00:04:21,769 --> 00:04:27,229
<font color="#CCCCCC">two round</font><font color="#E5E5E5"> MPC protocol in the honest</font>

96
00:04:25,130 --> 00:04:27,980
majority setting for malicious

97
00:04:27,229 --> 00:04:32,990
corruptions

98
00:04:27,980 --> 00:04:35,120
the plane<font color="#CCCCCC"> model things to note here</font><font color="#E5E5E5"> are</font>

99
00:04:32,990 --> 00:04:38,450
that<font color="#E5E5E5"> this question</font><font color="#CCCCCC"> was open regardless</font>

100
00:04:35,120 --> 00:04:40,970
<font color="#E5E5E5">of assumptions</font><font color="#CCCCCC"> moreover we know the</font>

101
00:04:38,450 --> 00:04:42,770
<font color="#CCCCCC">two-round</font><font color="#E5E5E5"> protocols in the dishonest</font>

102
00:04:40,970 --> 00:04:45,740
majority setting are impossible<font color="#E5E5E5"> to</font>

103
00:04:42,770 --> 00:04:48,590
<font color="#CCCCCC">achieve and in fact this question</font><font color="#E5E5E5"> was</font>

104
00:04:45,740 --> 00:04:52,550
open in the semi honest case<font color="#E5E5E5"> if we seek</font>

105
00:04:48,590 --> 00:04:55,340
assumptions<font color="#E5E5E5"> weaker than</font><font color="#CCCCCC"> OT</font><font color="#E5E5E5"> okay so</font>

106
00:04:52,550 --> 00:04:57,920
moving on<font color="#E5E5E5"> to what is known for</font>

107
00:04:55,340 --> 00:04:59,539
guaranteed output is a livery again for

108
00:04:57,920 --> 00:05:01,130
guaranteed output delivery the

109
00:04:59,540 --> 00:05:04,610
feasibility results were already

110
00:05:01,130 --> 00:05:07,490
established<font color="#CCCCCC"> in the 80s and I'm going to</font>

111
00:05:04,610 --> 00:05:10,940
<font color="#E5E5E5">skip over a large body of intermediate</font>

112
00:05:07,490 --> 00:05:12,650
results and move on to the through the

113
00:05:10,940 --> 00:05:16,430
<font color="#E5E5E5">results that consider exact</font><font color="#CCCCCC"> round</font>

114
00:05:12,650 --> 00:05:18,349
complexity so starting<font color="#E5E5E5"> with the work of</font>

115
00:05:16,430 --> 00:05:20,480
<font color="#E5E5E5">Asia at all who constructed</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> round</font>

116
00:05:18,350 --> 00:05:23,930
protocols for guaranteed out<font color="#E5E5E5"> to delivery</font>

117
00:05:20,480 --> 00:05:27,020
for a single malicious corruption and

118
00:05:23,930 --> 00:05:29,840
more recently<font color="#E5E5E5"> Gordon</font><font color="#CCCCCC"> it all constructed</font>

119
00:05:27,020 --> 00:05:31,340
three round maliciously secure protocols

120
00:05:29,840 --> 00:05:34,429
that achieve guaranteed out<font color="#E5E5E5"> of the</font>

121
00:05:31,340 --> 00:05:39,739
output delivery in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> crs setting from</font>

122
00:05:34,430 --> 00:05:42,110
<font color="#CCCCCC">lwe</font><font color="#E5E5E5"> and musics for lower rounds for</font>

123
00:05:39,740 --> 00:05:43,550
lower bounds<font color="#E5E5E5"> Gennaro it all showed that</font>

124
00:05:42,110 --> 00:05:45,500
<font color="#E5E5E5">two round</font>

125
00:05:43,550 --> 00:05:48,110
<font color="#E5E5E5">protocols with T greater than two</font>

126
00:05:45,500 --> 00:05:51,080
malicious corruptions<font color="#E5E5E5"> are impossible in</font>

127
00:05:48,110 --> 00:05:53,420
two<font color="#CCCCCC"> rounds and</font><font color="#E5E5E5"> again more recently</font>

128
00:05:51,080 --> 00:05:56,419
<font color="#CCCCCC">Gordon</font><font color="#E5E5E5"> at all extended</font><font color="#CCCCCC"> their results</font><font color="#E5E5E5"> to</font>

129
00:05:53,420 --> 00:05:58,070
<font color="#CCCCCC">show that two round broadcast channel</font>

130
00:05:56,420 --> 00:06:00,080
protocols with guaranteed<font color="#E5E5E5"> output</font>

131
00:05:58,070 --> 00:06:03,230
delivery are impossible<font color="#CCCCCC"> to achieve</font><font color="#E5E5E5"> even</font>

132
00:06:00,080 --> 00:06:05,630
<font color="#E5E5E5">against fail stop adversary's so given</font>

133
00:06:03,230 --> 00:06:08,570
these works we<font color="#CCCCCC"> ask the</font><font color="#E5E5E5"> following natural</font>

134
00:06:05,630 --> 00:06:11,780
<font color="#E5E5E5">questions first does there exist a</font><font color="#CCCCCC"> two</font>

135
00:06:08,570 --> 00:06:14,500
<font color="#CCCCCC">round NPC</font><font color="#E5E5E5"> forty less than n by two fail</font>

136
00:06:11,780 --> 00:06:17,479
stop corruptions in the<font color="#E5E5E5"> plane model and</font>

137
00:06:14,500 --> 00:06:19,610
in the<font color="#E5E5E5"> malicious setting we</font><font color="#CCCCCC"> ask if there</font>

138
00:06:17,480 --> 00:06:21,320
exists a three round protocol<font color="#E5E5E5"> that is</font>

139
00:06:19,610 --> 00:06:23,950
<font color="#E5E5E5">secure against</font><font color="#CCCCCC"> T less than n by two</font>

140
00:06:21,320 --> 00:06:27,140
malicious corruptions<font color="#E5E5E5"> in the plane model</font>

141
00:06:23,950 --> 00:06:29,240
and<font color="#E5E5E5"> know that both these questions are</font>

142
00:06:27,140 --> 00:06:31,490
open regardless<font color="#E5E5E5"> of assumptions and</font>

143
00:06:29,240 --> 00:06:35,270
moreover from the previous results we

144
00:06:31,490 --> 00:06:37,760
know that if if there exists a<font color="#E5E5E5"> two round</font>

145
00:06:35,270 --> 00:06:40,190
protocol again that is<font color="#CCCCCC"> secured against</font>

146
00:06:37,760 --> 00:06:41,680
<font color="#E5E5E5">real stop corruptions that protocol must</font>

147
00:06:40,190 --> 00:06:47,650
use both<font color="#E5E5E5"> private</font>

148
00:06:41,680 --> 00:06:49,630
and broadcast channels<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> am going</font>

149
00:06:47,650 --> 00:06:51,729
<font color="#CCCCCC">to proceed to our results now for</font>

150
00:06:49,630 --> 00:06:54,820
<font color="#CCCCCC">security with a bot we show that there</font>

151
00:06:51,729 --> 00:06:56,680
exists a<font color="#CCCCCC"> two round protocol for general</font>

152
00:06:54,820 --> 00:06:59,919
functionalities in the<font color="#CCCCCC"> plain</font><font color="#E5E5E5"> model</font>

153
00:06:56,680 --> 00:07:02,050
assuming<font color="#E5E5E5"> only</font><font color="#CCCCCC"> one way functions</font><font color="#E5E5E5"> and all</font>

154
00:06:59,919 --> 00:07:04,659
<font color="#E5E5E5">known constant round approaches</font>

155
00:07:02,050 --> 00:07:08,440
including<font color="#CCCCCC"> us is based on randomized</font>

156
00:07:04,660 --> 00:07:10,030
recordings and<font color="#E5E5E5"> a currently random</font>

157
00:07:08,440 --> 00:07:12,789
<font color="#CCCCCC">information-theoretic randomized in</font>

158
00:07:10,030 --> 00:07:14,650
<font color="#E5E5E5">codings are only known for NC one</font>

159
00:07:12,789 --> 00:07:16,840
circuits<font color="#E5E5E5"> so based on our current</font>

160
00:07:14,650 --> 00:07:18,489
understanding of randomized recordings

161
00:07:16,840 --> 00:07:20,739
<font color="#E5E5E5">it seems like for general functionality</font>

162
00:07:18,490 --> 00:07:24,310
<font color="#E5E5E5">is this might</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the best that we can</font>

163
00:07:20,740 --> 00:07:26,830
hope for for guaranteed output delivery

164
00:07:24,310 --> 00:07:29,169
we get the following<font color="#E5E5E5"> two round protocols</font>

165
00:07:26,830 --> 00:07:31,030
for general functionalities again<font color="#E5E5E5"> so we</font>

166
00:07:29,169 --> 00:07:33,280
get a broadcast channel protocol in the

167
00:07:31,030 --> 00:07:36,369
<font color="#CCCCCC">bell public key model and this</font><font color="#E5E5E5"> is</font>

168
00:07:33,280 --> 00:07:38,229
assuming public key encryption<font color="#CCCCCC"> and in</font>

169
00:07:36,370 --> 00:07:40,060
the<font color="#E5E5E5"> point-to-point channel case we get a</font>

170
00:07:38,229 --> 00:07:43,840
tool on<font color="#E5E5E5"> protocol in the</font><font color="#CCCCCC"> plain</font><font color="#E5E5E5"> model</font>

171
00:07:40,060 --> 00:07:45,789
assuming<font color="#CCCCCC"> OT</font><font color="#E5E5E5"> if we allow an extra round</font>

172
00:07:43,840 --> 00:07:48,909
<font color="#E5E5E5">we can in</font><font color="#CCCCCC"> fact get a three-round</font>

173
00:07:45,789 --> 00:07:52,150
Protocol secure against field stop

174
00:07:48,909 --> 00:07:55,659
corruptions in the<font color="#CCCCCC"> plain</font><font color="#E5E5E5"> model assuming</font>

175
00:07:52,150 --> 00:07:57,520
only<font color="#E5E5E5"> one-way functions for malicious</font>

176
00:07:55,659 --> 00:08:01,060
corruptions we get a<font color="#CCCCCC"> three</font><font color="#E5E5E5"> round</font>

177
00:07:57,520 --> 00:08:03,549
protocol in the broadcast channel using

178
00:08:01,060 --> 00:08:06,539
broadcast channels in the<font color="#CCCCCC"> plain</font><font color="#E5E5E5"> model</font>

179
00:08:03,550 --> 00:08:10,389
assuming zaps<font color="#E5E5E5"> and public key encryption</font>

180
00:08:06,539 --> 00:08:12,849
<font color="#E5E5E5">okay so let me now give an overview of</font>

181
00:08:10,389 --> 00:08:15,400
<font color="#E5E5E5">our techniques starting</font><font color="#CCCCCC"> with our two</font>

182
00:08:12,849 --> 00:08:18,820
round maliciously secure protocol<font color="#CCCCCC"> that</font>

183
00:08:15,400 --> 00:08:21,460
achieves security with a bond so our

184
00:08:18,820 --> 00:08:24,550
starting<font color="#E5E5E5"> point</font><font color="#CCCCCC"> is the recent work of</font>

185
00:08:21,460 --> 00:08:27,130
Gershwin Emerson who give a compiler to

186
00:08:24,550 --> 00:08:29,500
<font color="#E5E5E5">obtain a</font><font color="#CCCCCC"> two round protocol from</font><font color="#E5E5E5"> any</font>

187
00:08:27,130 --> 00:08:33,700
polynomial round protocol using two

188
00:08:29,500 --> 00:08:36,159
round<font color="#CCCCCC"> ot and our</font><font color="#E5E5E5"> starting idea here is</font>

189
00:08:33,700 --> 00:08:38,050
<font color="#CCCCCC">to try</font><font color="#E5E5E5"> and leverage the fact that we are</font>

190
00:08:36,159 --> 00:08:41,380
in the honest majority setting and get

191
00:08:38,049 --> 00:08:43,208
rid of voting<font color="#E5E5E5"> okay so to proceed with</font>

192
00:08:41,380 --> 00:08:45,399
<font color="#E5E5E5">this approach let me first start by</font>

193
00:08:43,208 --> 00:08:48,189
listing where<font color="#E5E5E5"> ot is used in their</font>

194
00:08:45,399 --> 00:08:50,460
protocol<font color="#E5E5E5"> so they start with a two round</font>

195
00:08:48,190 --> 00:08:52,620
<font color="#E5E5E5">sorry</font><font color="#CCCCCC"> a polynomial</font><font color="#E5E5E5"> round this</font><font color="#CCCCCC"> one</font>

196
00:08:50,460 --> 00:08:55,290
majority protocol over<font color="#CCCCCC"> broadcast</font>

197
00:08:52,620 --> 00:08:57,240
channels and<font color="#E5E5E5"> know that in the dishonest</font>

198
00:08:55,290 --> 00:09:00,689
majority setting such protocols<font color="#E5E5E5"> are only</font>

199
00:08:57,240 --> 00:09:02,760
<font color="#E5E5E5">known from</font><font color="#CCCCCC"> ot</font><font color="#E5E5E5"> and then they use ot and</font>

200
00:09:00,690 --> 00:09:05,280
gobble<font color="#CCCCCC"> sockets</font><font color="#E5E5E5"> to compress the round</font>

201
00:09:02,760 --> 00:09:09,780
complexity of this protocol<font color="#E5E5E5"> to</font><font color="#CCCCCC"> obtain a</font>

202
00:09:05,280 --> 00:09:12,569
<font color="#E5E5E5">two round protocol okay so our</font><font color="#CCCCCC"> strategy</font>

203
00:09:09,780 --> 00:09:14,790
here<font color="#E5E5E5"> is to first start with an</font>

204
00:09:12,570 --> 00:09:18,960
unconditionally secured honest majority

205
00:09:14,790 --> 00:09:20,819
protocol and<font color="#E5E5E5"> note</font><font color="#CCCCCC"> that such honest</font>

206
00:09:18,960 --> 00:09:21,900
majority protocols from assumptions

207
00:09:20,820 --> 00:09:25,140
weaker than public key encryption

208
00:09:21,900 --> 00:09:27,510
<font color="#CCCCCC">require the use of private channels but</font>

209
00:09:25,140 --> 00:09:29,790
unfortunately the J's compiler<font color="#E5E5E5"> only</font>

210
00:09:27,510 --> 00:09:31,830
gives us way<font color="#E5E5E5"> to compile or compress the</font>

211
00:09:29,790 --> 00:09:34,890
round complexity of broadcast channel

212
00:09:31,830 --> 00:09:38,010
protocols therefore our first<font color="#CCCCCC"> challenger</font>

213
00:09:34,890 --> 00:09:40,410
is to try and<font color="#E5E5E5"> modify the GS compiler in</font>

214
00:09:38,010 --> 00:09:42,689
order to obtain in<font color="#E5E5E5"> order to</font><font color="#CCCCCC"> enable a</font>

215
00:09:40,410 --> 00:09:45,540
<font color="#E5E5E5">compression of private channel protocols</font>

216
00:09:42,690 --> 00:09:48,360
and<font color="#E5E5E5"> a second challenger is to leverage</font>

217
00:09:45,540 --> 00:09:51,469
<font color="#E5E5E5">honest majority and achieve OD</font>

218
00:09:48,360 --> 00:09:54,390
functionality without<font color="#E5E5E5"> actually using</font><font color="#CCCCCC"> OD</font>

219
00:09:51,470 --> 00:09:56,880
<font color="#CCCCCC">okay so let me first give a recap</font><font color="#E5E5E5"> of</font>

220
00:09:54,390 --> 00:09:58,949
their work<font color="#E5E5E5"> so they start with a</font>

221
00:09:56,880 --> 00:10:02,150
polynomial round dishonest majority

222
00:09:58,950 --> 00:10:04,970
protocol over broadcast<font color="#E5E5E5"> channels and</font>

223
00:10:02,150 --> 00:10:08,670
transform it<font color="#CCCCCC"> into a conforming protocol</font>

224
00:10:04,970 --> 00:10:10,620
that<font color="#E5E5E5"> has</font><font color="#CCCCCC"> a very specific syntactic</font>

225
00:10:08,670 --> 00:10:12,599
structure it consists of a

226
00:10:10,620 --> 00:10:16,860
<font color="#E5E5E5">pre-processing phase and a computation</font>

227
00:10:12,600 --> 00:10:20,610
phase okay so in the computation phase

228
00:10:16,860 --> 00:10:23,970
<font color="#CCCCCC">only a</font><font color="#E5E5E5"> single party is allowed to speak</font>

229
00:10:20,610 --> 00:10:25,770
<font color="#CCCCCC">in each</font><font color="#E5E5E5"> round</font><font color="#CCCCCC"> this particular party acts</font>

230
00:10:23,970 --> 00:10:27,840
as the speaker for<font color="#E5E5E5"> the round and all</font>

231
00:10:25,770 --> 00:10:30,180
other parties<font color="#E5E5E5"> act as listener parties</font>

232
00:10:27,840 --> 00:10:31,920
and only a single<font color="#CCCCCC"> bit can be</font>

233
00:10:30,180 --> 00:10:36,000
communicated<font color="#E5E5E5"> in each round of this</font>

234
00:10:31,920 --> 00:10:37,770
computation phase finally they use<font color="#CCCCCC"> OT</font>

235
00:10:36,000 --> 00:10:39,540
and<font color="#CCCCCC"> gobble circuits to compress the</font>

236
00:10:37,770 --> 00:10:41,819
round complexity of this conforming

237
00:10:39,540 --> 00:10:45,540
protocol to get a two round protocol and

238
00:10:41,820 --> 00:10:49,500
in the first round<font color="#CCCCCC"> of this compressed</font><font color="#E5E5E5"> to</font>

239
00:10:45,540 --> 00:10:50,849
run protocol<font color="#E5E5E5"> party's send their messages</font>

240
00:10:49,500 --> 00:10:53,940
that they send in the pre-processing

241
00:10:50,850 --> 00:10:56,460
<font color="#E5E5E5">phase along with</font><font color="#CCCCCC"> OT</font><font color="#E5E5E5"> one receiver</font>

242
00:10:53,940 --> 00:10:58,830
messages<font color="#E5E5E5"> so each speaker party from the</font>

243
00:10:56,460 --> 00:11:00,720
<font color="#E5E5E5">computation phase sends</font><font color="#CCCCCC"> OT receiver</font>

244
00:10:58,830 --> 00:11:03,630
messages in the first round

245
00:11:00,720 --> 00:11:05,730
<font color="#CCCCCC">od</font><font color="#E5E5E5"> receiver messages somehow commit to</font>

246
00:11:03,630 --> 00:11:08,550
all their subsequent<font color="#E5E5E5"> actions in the</font>

247
00:11:05,730 --> 00:11:11,000
first round itself<font color="#E5E5E5"> then in the second</font>

248
00:11:08,550 --> 00:11:13,890
round<font color="#CCCCCC"> each party sends a series of</font>

249
00:11:11,000 --> 00:11:17,010
<font color="#E5E5E5">gobble</font><font color="#CCCCCC"> circuits one for each round of</font>

250
00:11:13,890 --> 00:11:19,830
<font color="#E5E5E5">the computation phase and these garbled</font>

251
00:11:17,010 --> 00:11:24,120
circuits<font color="#CCCCCC"> output</font><font color="#E5E5E5"> OD sender messages and</font>

252
00:11:19,830 --> 00:11:26,100
these<font color="#E5E5E5"> ot sender messages are used to</font>

253
00:11:24,120 --> 00:11:30,570
deliver wire labels<font color="#E5E5E5"> for the next couple</font>

254
00:11:26,100 --> 00:11:32,700
circuit<font color="#E5E5E5"> okay so now let's try to solve</font>

255
00:11:30,570 --> 00:11:34,650
<font color="#E5E5E5">our second challenge first</font><font color="#CCCCCC"> which is to</font>

256
00:11:32,700 --> 00:11:36,570
atop which is on achieving<font color="#CCCCCC"> OT</font>

257
00:11:34,650 --> 00:11:39,420
functionality<font color="#E5E5E5"> without actually</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> OT</font>

258
00:11:36,570 --> 00:11:42,330
<font color="#E5E5E5">for which we devised this new</font><font color="#CCCCCC"> gadget</font>

259
00:11:39,420 --> 00:11:45,560
that<font color="#E5E5E5"> we call multi-party</font><font color="#CCCCCC"> OT</font><font color="#E5E5E5"> as the name</font>

260
00:11:42,330 --> 00:11:48,120
suggests this is a multi-party protocol

261
00:11:45,560 --> 00:11:50,760
<font color="#E5E5E5">where only two parties have inputs and</font>

262
00:11:48,120 --> 00:11:53,850
all other parties have<font color="#E5E5E5"> no inputs but all</font>

263
00:11:50,760 --> 00:11:56,700
parties<font color="#CCCCCC"> learn the output and</font><font color="#E5E5E5"> an OD</font>

264
00:11:53,850 --> 00:11:59,820
functionality with<font color="#E5E5E5"> sender inputs</font><font color="#CCCCCC"> m0</font><font color="#E5E5E5"> m1</font>

265
00:11:56,700 --> 00:12:01,710
<font color="#E5E5E5">and the receiver input</font><font color="#CCCCCC"> B can</font><font color="#E5E5E5"> be viewed</font>

266
00:11:59,820 --> 00:12:06,870
as a degree<font color="#CCCCCC"> two polynomial of the</font>

267
00:12:01,710 --> 00:12:09,000
following<font color="#E5E5E5"> form okay</font><font color="#CCCCCC"> III</font><font color="#E5E5E5"> will talk about</font>

268
00:12:06,870 --> 00:12:11,190
how we<font color="#E5E5E5"> can construct such a protocol and</font>

269
00:12:09,000 --> 00:12:13,350
its security later<font color="#E5E5E5"> but for now let's try</font>

270
00:12:11,190 --> 00:12:16,110
to<font color="#E5E5E5"> use this</font><font color="#CCCCCC"> new gadget</font><font color="#E5E5E5"> to solve our</font>

271
00:12:13,350 --> 00:12:19,740
first challenge which<font color="#CCCCCC"> is on</font><font color="#E5E5E5"> compressing</font>

272
00:12:16,110 --> 00:12:21,780
private channel protocols so in order<font color="#E5E5E5"> to</font>

273
00:12:19,740 --> 00:12:27,030
compress a protocol<font color="#E5E5E5"> that uses both</font>

274
00:12:21,780 --> 00:12:29,250
broadcast<font color="#E5E5E5"> and private channels we add an</font>

275
00:12:27,030 --> 00:12:31,740
additional setup<font color="#E5E5E5"> phase where the parties</font>

276
00:12:29,250 --> 00:12:33,480
<font color="#E5E5E5">exchange</font><font color="#CCCCCC"> one-time patch to emulate</font>

277
00:12:31,740 --> 00:12:36,270
private channel protocols in subsequent

278
00:12:33,480 --> 00:12:38,460
rounds<font color="#CCCCCC"> and so now</font><font color="#E5E5E5"> all the remaining</font>

279
00:12:36,270 --> 00:12:43,770
rounds<font color="#E5E5E5"> can be</font><font color="#CCCCCC"> executed</font><font color="#E5E5E5"> over broadcast</font>

280
00:12:38,460 --> 00:12:45,720
<font color="#CCCCCC">results we now use the the GS compiler</font>

281
00:12:43,770 --> 00:12:47,400
to transform this into<font color="#CCCCCC"> a conforming</font>

282
00:12:45,720 --> 00:12:49,170
protocol with the<font color="#CCCCCC"> pre-processing phase</font>

283
00:12:47,400 --> 00:12:50,910
in the computation phase<font color="#E5E5E5"> the only</font>

284
00:12:49,170 --> 00:12:52,979
difference here<font color="#CCCCCC"> is that we have an</font>

285
00:12:50,910 --> 00:12:54,689
additional<font color="#CCCCCC"> setup</font><font color="#E5E5E5"> phase and now we</font>

286
00:12:52,980 --> 00:12:57,300
finally<font color="#E5E5E5"> want to compress the round</font>

287
00:12:54,690 --> 00:12:58,920
complexity of this protocol in to get a

288
00:12:57,300 --> 00:13:01,709
<font color="#CCCCCC">two</font><font color="#E5E5E5"> round protocol in the</font><font color="#CCCCCC"> plain</font><font color="#E5E5E5"> model</font>

289
00:12:58,920 --> 00:13:03,329
but<font color="#E5E5E5"> unfortunately the GS compiler</font>

290
00:13:01,710 --> 00:13:05,550
<font color="#E5E5E5">only gives</font><font color="#CCCCCC"> us a way to compress the</font>

291
00:13:03,330 --> 00:13:07,680
<font color="#E5E5E5">pre-processing phase and the computation</font>

292
00:13:05,550 --> 00:13:11,250
phase the setup phase still remains

293
00:13:07,680 --> 00:13:12,689
intact<font color="#E5E5E5"> so our natural next</font><font color="#CCCCCC"> step is to</font>

294
00:13:11,250 --> 00:13:15,540
somehow try<font color="#CCCCCC"> and parallel</font>

295
00:13:12,690 --> 00:13:17,879
the<font color="#E5E5E5"> setup fees and the first round</font><font color="#CCCCCC"> of</font>

296
00:13:15,540 --> 00:13:22,500
this<font color="#E5E5E5"> protocol so let's see if we can do</font>

297
00:13:17,879 --> 00:13:25,740
that with our new gadget so in the

298
00:13:22,500 --> 00:13:27,959
conforming protocol<font color="#E5E5E5"> with</font><font color="#CCCCCC"> setup let's say</font>

299
00:13:25,740 --> 00:13:30,120
the<font color="#E5E5E5"> listener of round</font><font color="#CCCCCC"> T from the</font>

300
00:13:27,959 --> 00:13:32,699
computation phase<font color="#CCCCCC"> chooses chooses a</font>

301
00:13:30,120 --> 00:13:35,550
random pad R and sends it across to the

302
00:13:32,699 --> 00:13:38,579
<font color="#E5E5E5">speaker of that round then later in</font>

303
00:13:35,550 --> 00:13:41,069
round T of the computation phase<font color="#CCCCCC"> this</font>

304
00:13:38,579 --> 00:13:42,930
particular the speaker encrypts the

305
00:13:41,069 --> 00:13:46,019
<font color="#E5E5E5">message using this random</font><font color="#CCCCCC"> pan and</font>

306
00:13:42,930 --> 00:13:47,910
broadcasted over<font color="#E5E5E5"> a broadcast</font><font color="#CCCCCC"> channel now</font>

307
00:13:46,019 --> 00:13:50,639
when we transform this into a<font color="#CCCCCC"> two round</font>

308
00:13:47,910 --> 00:13:53,730
protocol with set up the speaker party

309
00:13:50,639 --> 00:13:55,980
of round<font color="#E5E5E5"> T is expected to broadcast</font><font color="#CCCCCC"> its</font>

310
00:13:53,730 --> 00:13:59,370
<font color="#E5E5E5">ot receive a message in the first round</font>

311
00:13:55,980 --> 00:14:02,279
<font color="#E5E5E5">and recall that in the GS compiler this</font>

312
00:13:59,370 --> 00:14:05,129
<font color="#CCCCCC">ot message is somehow supposed to commit</font>

313
00:14:02,279 --> 00:14:08,310
to<font color="#E5E5E5"> all its actions in the subsequent</font>

314
00:14:05,129 --> 00:14:11,370
rounds<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now that</font><font color="#E5E5E5"> this action in round</font>

315
00:14:08,310 --> 00:14:14,250
P depends on R this<font color="#CCCCCC"> ot</font><font color="#E5E5E5"> one message must</font>

316
00:14:11,370 --> 00:14:16,769
also<font color="#E5E5E5"> depend</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> random pad R but</font>

317
00:14:14,250 --> 00:14:19,680
unfortunately this random pad R is

318
00:14:16,769 --> 00:14:22,529
unknown to<font color="#E5E5E5"> the speaker before the setup</font>

319
00:14:19,680 --> 00:14:26,008
phase so clearly this strategy doesn't

320
00:14:22,529 --> 00:14:27,720
work<font color="#E5E5E5"> here but what if we try to work at</font>

321
00:14:26,009 --> 00:14:32,130
the other<font color="#E5E5E5"> way around</font><font color="#CCCCCC"> and have the</font>

322
00:14:27,720 --> 00:14:35,220
speaker exchange the random pad<font color="#E5E5E5"> now note</font>

323
00:14:32,130 --> 00:14:37,769
that<font color="#CCCCCC"> the the listener of round T will</font>

324
00:14:35,220 --> 00:14:40,380
act as a speaker in some future round

325
00:14:37,769 --> 00:14:42,269
and there it<font color="#E5E5E5"> might have to decrypt this</font>

326
00:14:40,380 --> 00:14:45,540
message that<font color="#E5E5E5"> it received in the th round</font>

327
00:14:42,269 --> 00:14:47,759
<font color="#E5E5E5">using this message R which means that</font>

328
00:14:45,540 --> 00:14:51,680
<font color="#CCCCCC">it's it's action in that particular</font>

329
00:14:47,759 --> 00:14:54,569
round will depend<font color="#E5E5E5"> on this random</font><font color="#CCCCCC"> pad R</font>

330
00:14:51,680 --> 00:14:56,939
and since this<font color="#E5E5E5"> particular listener is</font>

331
00:14:54,569 --> 00:14:59,160
also expected to<font color="#CCCCCC"> commit to all its</font>

332
00:14:56,939 --> 00:15:01,410
<font color="#CCCCCC">actions</font><font color="#E5E5E5"> in the first round itself</font><font color="#CCCCCC"> the</font>

333
00:14:59,160 --> 00:15:03,660
same problem arises the listener doesn't

334
00:15:01,410 --> 00:15:05,490
<font color="#E5E5E5">know what this value of R is before the</font>

335
00:15:03,660 --> 00:15:07,559
set of phase so<font color="#CCCCCC"> we essentially just</font>

336
00:15:05,490 --> 00:15:11,939
transferred this problem to<font color="#E5E5E5"> another</font>

337
00:15:07,559 --> 00:15:13,920
round<font color="#E5E5E5"> and not managed to</font><font color="#CCCCCC"> solve it yet so</font>

338
00:15:11,939 --> 00:15:15,990
<font color="#E5E5E5">these approaches clearly don't work we</font>

339
00:15:13,920 --> 00:15:20,370
potentially<font color="#E5E5E5"> need a stronger property</font>

340
00:15:15,990 --> 00:15:23,459
<font color="#E5E5E5">from our</font><font color="#CCCCCC"> OT primitive which is why we</font>

341
00:15:20,370 --> 00:15:25,699
devised<font color="#E5E5E5"> this new primitive that we call</font>

342
00:15:23,459 --> 00:15:30,018
multi-party homomorphic<font color="#CCCCCC"> OT</font>

343
00:15:25,699 --> 00:15:31,488
this is also a<font color="#E5E5E5"> multiparty primitive</font><font color="#CCCCCC"> with</font>

344
00:15:30,019 --> 00:15:33,889
the<font color="#CCCCCC"> only difference that instead of</font><font color="#E5E5E5"> just</font>

345
00:15:31,489 --> 00:15:37,160
<font color="#E5E5E5">two</font><font color="#CCCCCC"> bodies</font><font color="#E5E5E5"> three parties have inputs</font>

346
00:15:33,889 --> 00:15:40,040
here<font color="#E5E5E5"> so apart from the sender and the</font>

347
00:15:37,160 --> 00:15:43,279
receiver<font color="#CCCCCC"> there is a designated sender</font>

348
00:15:40,040 --> 00:15:47,238
with an input<font color="#E5E5E5"> R and the output of</font><font color="#CCCCCC"> this</font>

349
00:15:43,279 --> 00:15:50,869
<font color="#E5E5E5">multi-party homomorphic</font><font color="#CCCCCC"> OT is the bit MB</font>

350
00:15:47,239 --> 00:15:53,569
plus R and similar to<font color="#E5E5E5"> a regular oh</font><font color="#CCCCCC"> d</font>

351
00:15:50,869 --> 00:15:56,600
functionality the<font color="#CCCCCC"> multi-party</font><font color="#E5E5E5"> would be</font>

352
00:15:53,569 --> 00:15:59,089
functionality can also be<font color="#E5E5E5"> viewed as a</font>

353
00:15:56,600 --> 00:16:04,519
degree<font color="#E5E5E5"> two polynomial in F</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> of the</font>

354
00:15:59,089 --> 00:16:06,589
following<font color="#E5E5E5"> form okay so now I will again</font>

355
00:16:04,519 --> 00:16:08,540
<font color="#E5E5E5">talk about how we can construct this</font>

356
00:16:06,589 --> 00:16:10,819
particular<font color="#E5E5E5"> primitive and its security</font><font color="#CCCCCC"> in</font>

357
00:16:08,540 --> 00:16:13,730
more detail later<font color="#CCCCCC"> but for now let's see</font>

358
00:16:10,819 --> 00:16:16,660
if this helps<font color="#E5E5E5"> us in</font><font color="#CCCCCC"> paralyzing the the</font>

359
00:16:13,730 --> 00:16:19,369
<font color="#E5E5E5">setup phase and the first round okay so</font>

360
00:16:16,660 --> 00:16:21,608
in the first round the speaker of round

361
00:16:19,369 --> 00:16:25,389
<font color="#CCCCCC">t is expected to broadcast an OD message</font>

362
00:16:21,609 --> 00:16:28,549
<font color="#CCCCCC">ot receive a message to be specific and</font>

363
00:16:25,389 --> 00:16:30,739
we can actually<font color="#E5E5E5"> now use the homomorphic</font>

364
00:16:28,549 --> 00:16:34,970
property of a multi-party homomorphic<font color="#CCCCCC"> ot</font>

365
00:16:30,739 --> 00:16:37,579
<font color="#E5E5E5">and split the OT receiver message the</font>

366
00:16:34,970 --> 00:16:40,459
listener<font color="#E5E5E5"> of round t also broadcasts an</font>

367
00:16:37,579 --> 00:16:42,469
<font color="#E5E5E5">OD message using its input R which</font><font color="#CCCCCC"> is</font>

368
00:16:40,459 --> 00:16:45,589
already<font color="#CCCCCC"> known</font><font color="#E5E5E5"> to him at the time of the</font>

369
00:16:42,470 --> 00:16:48,019
<font color="#E5E5E5">setup phase and so now the message that</font>

370
00:16:45,589 --> 00:16:50,299
the speaker of round<font color="#CCCCCC"> T has to send in</font>

371
00:16:48,019 --> 00:16:53,419
the<font color="#CCCCCC"> first round does not depend</font><font color="#E5E5E5"> on the</font>

372
00:16:50,299 --> 00:16:56,389
<font color="#E5E5E5">random pad R and this message only</font>

373
00:16:53,419 --> 00:16:58,629
<font color="#E5E5E5">depends</font><font color="#CCCCCC"> on the information</font><font color="#E5E5E5"> that it</font>

374
00:16:56,389 --> 00:17:01,970
<font color="#E5E5E5">already has before the setup phase</font>

375
00:16:58,629 --> 00:17:06,260
therefore<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> analyze</font><font color="#CCCCCC"> the</font>

376
00:17:01,970 --> 00:17:09,110
setup phase and the first round<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this</font>

377
00:17:06,260 --> 00:17:13,158
<font color="#E5E5E5">protocol and we get a two round protocol</font>

378
00:17:09,109 --> 00:17:15,049
in the<font color="#CCCCCC"> plain model</font><font color="#E5E5E5"> okay so now moving on</font>

379
00:17:13,159 --> 00:17:18,559
<font color="#CCCCCC">to how we can instantiate this</font>

380
00:17:15,049 --> 00:17:21,408
<font color="#E5E5E5">particular primitive so a shy</font><font color="#CCCCCC"> crucial</font>

381
00:17:18,559 --> 00:17:24,199
<font color="#CCCCCC">events</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> tasks</font><font color="#E5E5E5"> in in in 2010</font><font color="#CCCCCC"> gave a</font>

382
00:17:21,409 --> 00:17:26,329
<font color="#CCCCCC">construction to construct such</font><font color="#E5E5E5"> two round</font>

383
00:17:24,199 --> 00:17:28,880
protocols for these degree<font color="#E5E5E5"> two</font>

384
00:17:26,329 --> 00:17:32,090
polynomial<font color="#E5E5E5"> computations the only issue</font>

385
00:17:28,880 --> 00:17:34,269
is that their protocol only<font color="#E5E5E5"> satisfies</font>

386
00:17:32,090 --> 00:17:35,850
privacy with knowledge of outputs

387
00:17:34,269 --> 00:17:39,390
privacy with no

388
00:17:35,850 --> 00:17:43,020
<font color="#E5E5E5">outputs is a weaker variant of security</font>

389
00:17:39,390 --> 00:17:44,970
by the<font color="#E5E5E5"> vaad</font><font color="#CCCCCC"> so the ideal world for</font>

390
00:17:43,020 --> 00:17:46,139
<font color="#E5E5E5">privacy with knowledge</font><font color="#CCCCCC"> of outputs looks</font>

391
00:17:44,970 --> 00:17:49,260
something like this

392
00:17:46,140 --> 00:17:52,350
so each party sends its private inputs

393
00:17:49,260 --> 00:17:54,870
to the trusted party the trusted party

394
00:17:52,350 --> 00:17:58,679
then computes the function<font color="#CCCCCC"> over these</font>

395
00:17:54,870 --> 00:18:00,629
inputs<font color="#E5E5E5"> and sends it</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> adversary the</font>

396
00:17:58,680 --> 00:18:03,390
adversity can then<font color="#E5E5E5"> arbitrarily choose</font>

397
00:18:00,630 --> 00:18:05,370
what output it wants to force onto<font color="#CCCCCC"> the</font>

398
00:18:03,390 --> 00:18:07,890
honest parties<font color="#E5E5E5"> and sends it</font><font color="#CCCCCC"> to the</font>

399
00:18:05,370 --> 00:18:11,459
trusted party the trusted party then

400
00:18:07,890 --> 00:18:14,940
forwards<font color="#CCCCCC"> this output</font><font color="#E5E5E5"> to the honest</font>

401
00:18:11,460 --> 00:18:16,940
parties<font color="#E5E5E5"> and clearly this is a weaker</font>

402
00:18:14,940 --> 00:18:18,990
variant than security<font color="#CCCCCC"> whether bad since</font>

403
00:18:16,940 --> 00:18:22,080
correctness<font color="#E5E5E5"> of output for the guaranteed</font>

404
00:18:18,990 --> 00:18:23,150
<font color="#E5E5E5">for the honest parties is not guaranteed</font>

405
00:18:22,080 --> 00:18:27,540
<font color="#E5E5E5">anymore</font>

406
00:18:23,150 --> 00:18:30,030
<font color="#CCCCCC">but since we want to obtain</font><font color="#E5E5E5"> or achieve</font>

407
00:18:27,540 --> 00:18:31,800
<font color="#E5E5E5">security with</font><font color="#CCCCCC"> abort</font><font color="#E5E5E5"> how do we ensure</font>

408
00:18:30,030 --> 00:18:35,430
correctness of outputs for the<font color="#E5E5E5"> honest</font>

409
00:18:31,800 --> 00:18:37,470
parties<font color="#CCCCCC"> ok so going back to the ideal</font>

410
00:18:35,430 --> 00:18:38,820
world<font color="#CCCCCC"> for privacy with knowledge</font><font color="#E5E5E5"> of</font>

411
00:18:37,470 --> 00:18:41,310
outputs<font color="#CCCCCC"> if you look at</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> OT</font>

412
00:18:38,820 --> 00:18:44,159
functionality the output that<font color="#CCCCCC"> the</font>

413
00:18:41,310 --> 00:18:46,560
adversary receives<font color="#E5E5E5"> in this case is one</font>

414
00:18:44,160 --> 00:18:49,290
of the input bits of the sender<font color="#E5E5E5"> while</font>

415
00:18:46,560 --> 00:18:53,490
the other input bit remains completely

416
00:18:49,290 --> 00:18:55,440
<font color="#E5E5E5">hidden therefore the message</font><font color="#CCCCCC"> y-prime</font>

417
00:18:53,490 --> 00:18:57,750
<font color="#E5E5E5">that's the output</font><font color="#CCCCCC"> that it wants to</font><font color="#E5E5E5"> force</font>

418
00:18:55,440 --> 00:19:00,930
onto<font color="#CCCCCC"> the honest parties it's completely</font>

419
00:18:57,750 --> 00:19:04,650
independent<font color="#CCCCCC"> of the other sender input</font>

420
00:19:00,930 --> 00:19:07,590
bit again<font color="#E5E5E5"> recall</font><font color="#CCCCCC"> that the OD</font>

421
00:19:04,650 --> 00:19:10,110
functionality in this protocol<font color="#E5E5E5"> is used</font>

422
00:19:07,590 --> 00:19:12,300
<font color="#E5E5E5">only for transmitting</font><font color="#CCCCCC"> the garbled</font>

423
00:19:10,110 --> 00:19:15,000
circuit wire labels and from the

424
00:19:12,300 --> 00:19:18,419
security of garbled circuits<font color="#E5E5E5"> we know</font>

425
00:19:15,000 --> 00:19:21,470
that unless valid wire labels are used

426
00:19:18,420 --> 00:19:23,970
<font color="#CCCCCC">garbled</font><font color="#E5E5E5"> circuits cannot be</font><font color="#CCCCCC"> evaluated so</font>

427
00:19:21,470 --> 00:19:26,820
so<font color="#E5E5E5"> this means that</font><font color="#CCCCCC"> either the honest</font>

428
00:19:23,970 --> 00:19:29,300
parties learn the correct<font color="#E5E5E5"> output or they</font>

429
00:19:26,820 --> 00:19:31,649
don't<font color="#E5E5E5"> receive any output</font><font color="#CCCCCC"> at all which</font><font color="#E5E5E5"> is</font>

430
00:19:29,300 --> 00:19:33,149
security<font color="#E5E5E5"> by the</font><font color="#CCCCCC"> bot and is essentially</font>

431
00:19:31,650 --> 00:19:36,600
what<font color="#E5E5E5"> we wanted to achieve in the first</font>

432
00:19:33,150 --> 00:19:39,240
place unfortunately<font color="#CCCCCC"> I won't have time to</font>

433
00:19:36,600 --> 00:19:42,209
go<font color="#CCCCCC"> over our protocols for the guaranteed</font>

434
00:19:39,240 --> 00:19:44,610
output delivery<font color="#E5E5E5"> but you can take a look</font>

435
00:19:42,210 --> 00:19:44,990
<font color="#E5E5E5">at</font><font color="#CCCCCC"> re print version for more details</font><font color="#E5E5E5"> on</font>

436
00:19:44,610 --> 00:19:47,479
this

437
00:19:44,990 --> 00:19:50,110
struction and<font color="#E5E5E5"> our other protocols for</font>

438
00:19:47,480 --> 00:19:57,090
guaranteed<font color="#CCCCCC"> are</font><font color="#E5E5E5"> to delivery thank you</font>

439
00:19:50,110 --> 00:19:57,090
[Applause]

