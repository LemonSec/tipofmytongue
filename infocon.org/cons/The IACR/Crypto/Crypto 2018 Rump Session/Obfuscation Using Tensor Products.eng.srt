1
00:00:05,399 --> 00:00:12,789
okay so I'm gonna<font color="#E5E5E5"> describe a new</font>

2
00:00:09,250 --> 00:00:18,640
efficient scheme with my co-author Craig

3
00:00:12,789 --> 00:00:21,340
Gentry<font color="#E5E5E5"> so this of the Schism scheme uses</font>

4
00:00:18,640 --> 00:00:29,349
tensor product so the title<font color="#CCCCCC"> optician</font>

5
00:00:21,340 --> 00:00:31,360
using tensor product so<font color="#CCCCCC"> it's first of</font>

6
00:00:29,349 --> 00:00:35,710
<font color="#E5E5E5">all it's a purely algebraic construction</font>

7
00:00:31,360 --> 00:00:38,199
and over the last few years<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> seen</font>

8
00:00:35,710 --> 00:00:42,059
some office kitchen candidates<font color="#CCCCCC"> they were</font>

9
00:00:38,199 --> 00:00:44,498
based on multi linear maps and

10
00:00:42,059 --> 00:00:46,199
<font color="#CCCCCC">multimedia maps themselves based on</font>

11
00:00:44,499 --> 00:00:49,089
noisy and codings

12
00:00:46,199 --> 00:00:51,699
so our scheme<font color="#E5E5E5"> is completely</font><font color="#CCCCCC"> different in</font>

13
00:00:49,089 --> 00:00:55,358
that regard<font color="#CCCCCC"> we do not use any</font><font color="#E5E5E5"> noisy</font>

14
00:00:51,699 --> 00:01:00,909
<font color="#CCCCCC">encoding x' it's purely algebraic as</font><font color="#E5E5E5"> I</font>

15
00:00:55,359 --> 00:01:06,700
said and it uses<font color="#E5E5E5"> matrix algebra and some</font>

16
00:01:00,909 --> 00:01:09,370
tensor algebra<font color="#CCCCCC"> tensor sub matrices it</font>

17
00:01:06,700 --> 00:01:12,010
still<font color="#E5E5E5"> uses Barrington's theorem which is</font>

18
00:01:09,370 --> 00:01:16,330
what the multi<font color="#CCCCCC"> linear map based schemes</font>

19
00:01:12,010 --> 00:01:20,020
<font color="#CCCCCC">were using so this also works for so far</font>

20
00:01:16,330 --> 00:01:26,140
it works<font color="#E5E5E5"> for branching programs and so</font>

21
00:01:20,020 --> 00:01:30,699
also for<font color="#CCCCCC"> nc1 circuits</font><font color="#E5E5E5"> okay so the main</font>

22
00:01:26,140 --> 00:01:34,810
idea is<font color="#E5E5E5"> that we take a branching program</font>

23
00:01:30,700 --> 00:01:37,180
and normally you could try<font color="#E5E5E5"> doing a</font>

24
00:01:34,810 --> 00:01:43,180
<font color="#CCCCCC">Kilian ization of</font><font color="#E5E5E5"> all the matrices in</font>

25
00:01:37,180 --> 00:01:47,080
your branching matrix product program so

26
00:01:43,180 --> 00:01:49,540
that obviously<font color="#E5E5E5"> is not secure</font><font color="#CCCCCC"> so what we</font>

27
00:01:47,080 --> 00:01:53,980
really<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to do is build these</font><font color="#CCCCCC"> Kilian</font>

28
00:01:49,540 --> 00:01:56,740
matrices<font color="#E5E5E5"> in a dynamic</font><font color="#CCCCCC"> fashion</font><font color="#E5E5E5"> dynamic</font>

29
00:01:53,980 --> 00:01:59,980
meaning that the<font color="#CCCCCC"> kilian</font><font color="#E5E5E5"> matrix will</font>

30
00:01:56,740 --> 00:02:02,070
actually<font color="#E5E5E5"> depend on the input on which</font>

31
00:01:59,980 --> 00:02:06,190
<font color="#E5E5E5">you're trying to</font><font color="#CCCCCC"> evaluate</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> program</font>

32
00:02:02,070 --> 00:02:08,470
<font color="#E5E5E5">okay and</font><font color="#CCCCCC"> these Kilian matrices for each</font>

33
00:02:06,190 --> 00:02:11,200
input will yield a completely new random

34
00:02:08,470 --> 00:02:16,379
<font color="#CCCCCC">Kilian matrix but</font><font color="#E5E5E5"> obviously we have to</font>

35
00:02:11,200 --> 00:02:16,379
give<font color="#CCCCCC"> you some gadgets</font><font color="#E5E5E5"> or to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

36
00:02:16,459 --> 00:02:25,099
implement this strategy<font color="#E5E5E5"> so before I</font>

37
00:02:22,790 --> 00:02:26,540
describe something more about<font color="#E5E5E5"> it if me</font>

38
00:02:25,099 --> 00:02:28,429
here was<font color="#E5E5E5"> there he would</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> be</font>

39
00:02:26,540 --> 00:02:33,170
<font color="#E5E5E5">already shocked</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I'm claiming some</font>

40
00:02:28,430 --> 00:02:34,970
efficiency thinks about<font color="#E5E5E5"> our scheme but</font>

41
00:02:33,170 --> 00:02:39,920
luckily<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> around I haven't seen him</font>

42
00:02:34,970 --> 00:02:42,170
so so so this this thing<font color="#CCCCCC"> is also much</font>

43
00:02:39,920 --> 00:02:45,230
more efficient<font color="#CCCCCC"> than the multilinear maps</font>

44
00:02:42,170 --> 00:02:47,629
based scheme so we ran some back of the

45
00:02:45,230 --> 00:02:52,700
<font color="#CCCCCC">envelope calculations</font><font color="#E5E5E5"> so if you have a</font>

46
00:02:47,629 --> 00:02:56,000
branching program with thousand<font color="#E5E5E5"> or with</font>

47
00:02:52,700 --> 00:02:59,480
<font color="#E5E5E5">a million steps and the input is of</font><font color="#CCCCCC"> 100</font>

48
00:02:56,000 --> 00:03:04,609
bits<font color="#E5E5E5"> your office</font><font color="#CCCCCC"> carrot program will fit</font>

49
00:02:59,480 --> 00:03:06,738
in 256<font color="#E5E5E5"> gig gigabyte all right which is</font>

50
00:03:04,609 --> 00:03:10,730
nowadays<font color="#E5E5E5"> a server will have that kind of</font>

51
00:03:06,739 --> 00:03:14,750
<font color="#E5E5E5">RAM at least and to evaluate it on a</font>

52
00:03:10,730 --> 00:03:18,738
single core<font color="#CCCCCC"> Intel i7 my guess it will</font>

53
00:03:14,750 --> 00:03:21,230
<font color="#CCCCCC">just</font><font color="#E5E5E5"> take one to ten minutes so which</font>

54
00:03:18,739 --> 00:03:24,049
like I said<font color="#E5E5E5"> comparatively speaking it's</font>

55
00:03:21,230 --> 00:03:26,690
fast<font color="#CCCCCC"> ok so I</font><font color="#E5E5E5"> don't want to cite the</font>

56
00:03:24,049 --> 00:03:29,660
numbers for the multi<font color="#E5E5E5"> linear map based</font>

57
00:03:26,690 --> 00:03:33,760
schemes<font color="#CCCCCC"> I did talk to shy about it and</font>

58
00:03:29,660 --> 00:03:33,760
he was like<font color="#CCCCCC"> ok let's not talk about</font><font color="#E5E5E5"> it</font>

59
00:03:37,569 --> 00:03:44,720
ok so<font color="#CCCCCC"> what about security of this scheme</font>

60
00:03:41,200 --> 00:03:46,849
<font color="#E5E5E5">so this since we have this algebraic</font>

61
00:03:44,720 --> 00:03:49,280
construction and we have matrices<font color="#CCCCCC"> you</font>

62
00:03:46,849 --> 00:03:54,018
know each of<font color="#CCCCCC"> those things</font><font color="#E5E5E5"> you can think</font>

63
00:03:49,280 --> 00:03:56,510
<font color="#E5E5E5">of as variables which are hidden and/or</font>

64
00:03:54,019 --> 00:03:58,400
secret<font color="#E5E5E5"> so you can build</font><font color="#CCCCCC"> whole</font><font color="#E5E5E5"> bunch of</font>

65
00:03:56,510 --> 00:04:00,410
polynomial equations<font color="#CCCCCC"> and you can try to</font>

66
00:03:58,400 --> 00:04:03,019
<font color="#E5E5E5">solve them so it this will fall into</font><font color="#CCCCCC"> the</font>

67
00:04:00,410 --> 00:04:07,370
<font color="#E5E5E5">realm of multivariate cryptography and</font>

68
00:04:03,019 --> 00:04:09,019
as we know over<font color="#E5E5E5"> the</font><font color="#CCCCCC"> last couple</font><font color="#E5E5E5"> of</font>

69
00:04:07,370 --> 00:04:11,739
decades people<font color="#CCCCCC"> have</font><font color="#E5E5E5"> worked on these</font>

70
00:04:09,019 --> 00:04:14,329
things and<font color="#E5E5E5"> they were lot</font><font color="#CCCCCC"> of attacks also</font>

71
00:04:11,739 --> 00:04:17,870
<font color="#E5E5E5">so in this one we</font><font color="#CCCCCC"> actually prove a</font>

72
00:04:14,329 --> 00:04:19,970
theorem<font color="#E5E5E5"> that given</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the information</font>

73
00:04:17,870 --> 00:04:22,400
<font color="#E5E5E5">you get from</font><font color="#CCCCCC"> the obfuscated program</font>

74
00:04:19,970 --> 00:04:25,580
whatever polynomial equations you can

75
00:04:22,400 --> 00:04:28,700
build<font color="#E5E5E5"> generate</font><font color="#CCCCCC"> Grovner basis techniques</font>

76
00:04:25,580 --> 00:04:30,050
are going to be inefficient<font color="#E5E5E5"> so this</font>

77
00:04:28,700 --> 00:04:32,750
would<font color="#E5E5E5"> include</font>

78
00:04:30,050 --> 00:04:35,390
the Kipnis<font color="#CCCCCC"> Shamir real inner ization</font>

79
00:04:32,750 --> 00:04:37,730
techniques<font color="#E5E5E5"> and it's generalization which</font>

80
00:04:35,390 --> 00:04:40,280
is called the<font color="#CCCCCC"> excel methodology by coat</font>

81
00:04:37,730 --> 00:04:43,340
<font color="#CCCCCC">wash a mere</font><font color="#E5E5E5"> patterning and</font><font color="#CCCCCC"> I think there</font>

82
00:04:40,280 --> 00:04:45,650
<font color="#E5E5E5">was another author there so so we prove</font>

83
00:04:43,340 --> 00:04:47,810
<font color="#CCCCCC">that such generic Graebner basis</font>

84
00:04:45,650 --> 00:04:49,340
techniques will require exponential

85
00:04:47,810 --> 00:04:51,580
<font color="#E5E5E5">number of</font><font color="#CCCCCC"> monomials so that would</font>

86
00:04:49,340 --> 00:04:55,789
<font color="#E5E5E5">require exponential attack</font><font color="#CCCCCC"> and we also</font>

87
00:04:51,580 --> 00:04:57,880
give arguments<font color="#CCCCCC"> as to why algebraic</font>

88
00:04:55,790 --> 00:05:00,230
techniques in general will<font color="#CCCCCC"> not succeed</font>

89
00:04:57,880 --> 00:05:02,420
<font color="#CCCCCC">all right but obviously we can't give a</font>

90
00:05:00,230 --> 00:05:04,220
lower bound because that will be

91
00:05:02,420 --> 00:05:07,690
equivalent<font color="#E5E5E5"> to proving circuit lower</font>

92
00:05:04,220 --> 00:05:07,690
bounds<font color="#E5E5E5"> or something similar to</font><font color="#CCCCCC"> that</font>

93
00:05:10,270 --> 00:05:18,770
so one<font color="#E5E5E5"> take away from this because these</font>

94
00:05:15,470 --> 00:05:22,130
<font color="#CCCCCC">are new assumptions</font><font color="#E5E5E5"> is that</font><font color="#CCCCCC"> I can or we</font>

95
00:05:18,770 --> 00:05:24,950
can formulate this problem<font color="#E5E5E5"> which</font><font color="#CCCCCC"> you can</font>

96
00:05:22,130 --> 00:05:29,030
<font color="#CCCCCC">think about</font><font color="#E5E5E5"> so what we call the one more</font>

97
00:05:24,950 --> 00:05:31,670
masked tensor problem so here you know

98
00:05:29,030 --> 00:05:34,099
you are given lots of tensor products

99
00:05:31,670 --> 00:05:35,750
masked by a<font color="#E5E5E5"> single matrix and you are</font>

100
00:05:34,100 --> 00:05:38,540
supposed to come up<font color="#E5E5E5"> with a new</font><font color="#CCCCCC"> masked</font>

101
00:05:35,750 --> 00:05:40,940
<font color="#CCCCCC">principle which is not a scalar multiple</font>

102
00:05:38,540 --> 00:05:44,180
<font color="#CCCCCC">of the previous one so we consider this</font>

103
00:05:40,940 --> 00:05:48,810
problem<font color="#E5E5E5"> to be hard and our security</font><font color="#CCCCCC"> is</font>

104
00:05:44,180 --> 00:05:53,069
related to<font color="#E5E5E5"> this problem thank you</font>

105
00:05:48,810 --> 00:05:53,069
[Applause]

