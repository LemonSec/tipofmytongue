1
00:00:04,880 --> 00:00:10,370
so I'm here to talk about a new RSA

2
00:00:08,210 --> 00:00:12,459
variant that I have been developing with

3
00:00:10,370 --> 00:00:16,128
Brian LaMacchia

4
00:00:12,459 --> 00:00:21,009
so RSA we've all seen the shirt we all

5
00:00:16,129 --> 00:00:24,520
know how it works you know the primes

6
00:00:21,010 --> 00:00:28,100
modulus etc

7
00:00:24,520 --> 00:00:29,930
but RSA is becoming obsolete it's not

8
00:00:28,100 --> 00:00:32,840
post quantum secure and a lot of

9
00:00:29,930 --> 00:00:38,269
side-channel attacks fault attacks these

10
00:00:32,840 --> 00:00:40,370
are too big so you know to make our

11
00:00:38,269 --> 00:00:43,100
variant of RSA first thing you need to

12
00:00:40,370 --> 00:00:44,899
do is generate keys right so this is the

13
00:00:43,100 --> 00:00:47,390
traditional RSA key generation out

14
00:00:44,899 --> 00:00:49,159
rhythm you start with your exponent you

15
00:00:47,390 --> 00:00:52,609
pick your primes and you just loop to

16
00:00:49,159 --> 00:00:57,739
make sure that the public exponent is

17
00:00:52,609 --> 00:01:01,729
relatively prime to Y of n so with just

18
00:00:57,739 --> 00:01:04,599
a single character we can change that to

19
00:01:01,729 --> 00:01:09,490
make sure that V of n is in fact

20
00:01:04,599 --> 00:01:12,589
divisible by the public exponent and

21
00:01:09,490 --> 00:01:16,820
then we a single letter change to the

22
00:01:12,590 --> 00:01:18,890
name and indeed it doesn't make any

23
00:01:16,820 --> 00:01:21,908
sense to calculate the decrypt exponent

24
00:01:18,890 --> 00:01:24,229
any longer so we can just throw that out

25
00:01:21,909 --> 00:01:29,420
sure it still works we just need to get

26
00:01:24,229 --> 00:01:31,250
rid of that one line so what's going on

27
00:01:29,420 --> 00:01:35,299
here with our new RSA encryption

28
00:01:31,250 --> 00:01:38,840
algorithm is that if the public exponent

29
00:01:35,299 --> 00:01:42,859
divides fee of n then you are going to

30
00:01:38,840 --> 00:01:45,710
have elements mod n integers mod n that

31
00:01:42,859 --> 00:01:47,419
have order e and then in which case all

32
00:01:45,710 --> 00:01:50,119
the integers mod n can be written as a

33
00:01:47,420 --> 00:01:54,079
product of an order element and an order

34
00:01:50,119 --> 00:01:58,009
of n divided by e element so if you do

35
00:01:54,079 --> 00:02:00,320
public the public exponent encryption

36
00:01:58,009 --> 00:02:04,759
what you end up with is you lose that

37
00:02:00,320 --> 00:02:06,288
factor of L and also there's no decrypt

38
00:02:04,759 --> 00:02:07,579
exponent so it's not immediately clear

39
00:02:06,289 --> 00:02:11,960
how you would get anything back from

40
00:02:07,579 --> 00:02:13,640
this but you know so all right so the

41
00:02:11,960 --> 00:02:15,980
strength of RSA encryption is that it is

42
00:02:13,640 --> 00:02:18,920
in fact a one character fix

43
00:02:15,980 --> 00:02:21,909
the RSA algorithm both in the code and

44
00:02:18,920 --> 00:02:25,129
name but we've got some problems it's uh

45
00:02:21,909 --> 00:02:27,679
still not post quantum secure the keys

46
00:02:25,129 --> 00:02:31,670
are still too big and you also can't

47
00:02:27,680 --> 00:02:33,110
decrypt but oh no what have you were

48
00:02:31,670 --> 00:02:35,510
really excited by the beginning of this

49
00:02:33,110 --> 00:02:38,510
talk and Ewan crafted some of your

50
00:02:35,510 --> 00:02:41,078
really important stuff in which case

51
00:02:38,510 --> 00:02:44,510
we've got a decryption algorithm for you

52
00:02:41,079 --> 00:02:46,459
so assuming that the message has been

53
00:02:44,510 --> 00:02:49,069
padded with some known padding algorithm

54
00:02:46,459 --> 00:02:51,530
and that the public exponent divides fee

55
00:02:49,069 --> 00:02:53,798
event but e squared doesn't divide via

56
00:02:51,530 --> 00:02:57,349
ven and then if we're given the

57
00:02:53,799 --> 00:03:00,709
ciphertext and prime factors P and Q

58
00:02:57,349 --> 00:03:04,459
what we can do is then calculate D as a

59
00:03:00,709 --> 00:03:08,569
inverse mod the event divided by e and

60
00:03:04,459 --> 00:03:11,720
then we pick a G generator G of the e

61
00:03:08,569 --> 00:03:15,980
order elements mod n initialize an empty

62
00:03:11,720 --> 00:03:18,049
set set Z equal to C to the D we just

63
00:03:15,980 --> 00:03:21,798
calculated mod n and then we'll just

64
00:03:18,049 --> 00:03:25,250
loop over all one up to public exponent

65
00:03:21,799 --> 00:03:27,530
minus one and try each one of those

66
00:03:25,250 --> 00:03:29,569
times Z and check the padding on that

67
00:03:27,530 --> 00:03:31,400
and if it does have valid padding then

68
00:03:29,569 --> 00:03:33,018
we add it to the set and when this is

69
00:03:31,400 --> 00:03:35,930
all said and done you should have either

70
00:03:33,019 --> 00:03:39,380
one or just a very small number of

71
00:03:35,930 --> 00:03:41,540
possible decryptions d craptions that

72
00:03:39,380 --> 00:03:45,410
you can then check and see if that's the

73
00:03:41,540 --> 00:03:47,200
one that you're looking for so message

74
00:03:45,410 --> 00:03:50,150
here is don't craft yourself all right

75
00:03:47,200 --> 00:03:52,790
but if you do it's ok we've got a tool

76
00:03:50,150 --> 00:03:54,950
that we can use to D crap things so

77
00:03:52,790 --> 00:03:56,900
please contact us if you're interested

78
00:03:54,950 --> 00:03:59,839
or if you've accidentally crapped

79
00:03:56,900 --> 00:04:01,270
yourself or your important stuff thank

80
00:03:59,840 --> 00:04:05,029
you very much

81
00:04:01,270 --> 00:04:05,029
[Applause]

