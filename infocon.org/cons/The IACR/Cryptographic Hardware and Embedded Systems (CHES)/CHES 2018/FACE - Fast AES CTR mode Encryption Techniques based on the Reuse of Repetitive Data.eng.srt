1
00:00:00,030 --> 00:00:04,589
and finally the last talk of<font color="#E5E5E5"> the session</font>

2
00:00:03,060 --> 00:00:08,250
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> also the last word of the day</font>

3
00:00:04,589 --> 00:00:09,870
is<font color="#E5E5E5"> entitled face fast</font><font color="#CCCCCC"> a yes counter mode</font>

4
00:00:08,250 --> 00:00:13,080
encryption techniques based on<font color="#E5E5E5"> the reuse</font>

5
00:00:09,870 --> 00:00:17,070
<font color="#E5E5E5">of repetitive</font><font color="#CCCCCC"> data it's a paper by</font>

6
00:00:13,080 --> 00:00:20,310
Jinyoung<font color="#E5E5E5"> park</font><font color="#CCCCCC"> and dong hoon</font><font color="#E5E5E5"> Lee is</font>

7
00:00:17,070 --> 00:00:22,590
giving the talk thank you for the

8
00:00:20,310 --> 00:00:25,619
introduction<font color="#CCCCCC"> now</font><font color="#E5E5E5"> I will start my</font>

9
00:00:22,590 --> 00:00:28,830
presentation<font color="#CCCCCC"> the topic of</font><font color="#E5E5E5"> my</font>

10
00:00:25,619 --> 00:00:33,059
presentation is performance improvement

11
00:00:28,830 --> 00:00:36,030
<font color="#CCCCCC">service</font><font color="#E5E5E5"> continuity</font><font color="#CCCCCC"> in software as you</font>

12
00:00:33,059 --> 00:00:38,489
<font color="#CCCCCC">notice I play yes and counter mode are</font>

13
00:00:36,030 --> 00:00:41,250
used<font color="#E5E5E5"> for numerous applications as an</font>

14
00:00:38,489 --> 00:00:43,919
encryption technique<font color="#E5E5E5"> because of each</font>

15
00:00:41,250 --> 00:00:46,050
various advantages such<font color="#CCCCCC"> as problem</font>

16
00:00:43,920 --> 00:00:50,129
security no<font color="#E5E5E5"> randomness requirement</font>

17
00:00:46,050 --> 00:00:52,530
<font color="#E5E5E5">impaired processing and so on yes the</font>

18
00:00:50,129 --> 00:00:55,160
AES counter mode is not only operative

19
00:00:52,530 --> 00:00:57,899
operated on its own or it also

20
00:00:55,160 --> 00:01:01,398
incorporated within authenticated

21
00:00:57,899 --> 00:01:04,470
encryption schemes such as<font color="#CCCCCC"> ASG CMAs</font><font color="#E5E5E5"> ECM</font>

22
00:01:01,399 --> 00:01:06,930
so<font color="#E5E5E5"> optimizing is counter mode has</font>

23
00:01:04,470 --> 00:01:10,408
numerous<font color="#E5E5E5"> benefit beyond the infection</font>

24
00:01:06,930 --> 00:01:13,020
<font color="#E5E5E5">itself there are special</font><font color="#CCCCCC"> characteristics</font>

25
00:01:10,409 --> 00:01:16,490
on<font color="#E5E5E5"> ACE algorithm which</font><font color="#CCCCCC"> is used in</font>

26
00:01:13,020 --> 00:01:18,750
counter mode the counter mode encryption

27
00:01:16,490 --> 00:01:21,270
<font color="#E5E5E5">sequentially increase the counter rather</font>

28
00:01:18,750 --> 00:01:23,939
than plaintext sequences the entire

29
00:01:21,270 --> 00:01:28,320
output<font color="#E5E5E5"> is operated on using plaintext</font>

30
00:01:23,939 --> 00:01:31,020
sequences and XOR operation<font color="#E5E5E5"> so as shown</font>

31
00:01:28,320 --> 00:01:34,408
in the figure<font color="#E5E5E5"> that present the initial</font>

32
00:01:31,020 --> 00:01:36,979
whitening pace of<font color="#E5E5E5"> AES our processing</font>

33
00:01:34,409 --> 00:01:40,619
multiple<font color="#E5E5E5"> blocks the counter increases</font>

34
00:01:36,979 --> 00:01:45,600
<font color="#E5E5E5">but changes in changes only the last</font>

35
00:01:40,619 --> 00:01:47,700
<font color="#CCCCCC">byte in most cases so as as a result we</font>

36
00:01:45,600 --> 00:01:50,039
<font color="#E5E5E5">can find that the output show will</font>

37
00:01:47,700 --> 00:01:53,790
ensure<font color="#CCCCCC"> heightening also differ</font><font color="#E5E5E5"> in the</font>

38
00:01:50,040 --> 00:01:56,009
last one byte<font color="#CCCCCC"> others are identical to</font>

39
00:01:53,790 --> 00:01:58,710
some of them there<font color="#E5E5E5"> are always more</font>

40
00:01:56,009 --> 00:02:01,619
changes<font color="#CCCCCC"> in each other in foot block</font><font color="#E5E5E5"> so</font>

41
00:01:58,710 --> 00:02:05,100
this<font color="#E5E5E5"> means</font><font color="#CCCCCC"> that the front</font><font color="#E5E5E5"> located</font><font color="#CCCCCC"> rounds</font>

42
00:02:01,619 --> 00:02:08,310
operation menu<font color="#CCCCCC"> overlapped</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> put in a s</font>

43
00:02:05,100 --> 00:02:11,310
counter mode<font color="#CCCCCC"> so if these overlap values</font>

44
00:02:08,310 --> 00:02:12,810
are tested and reused properly<font color="#CCCCCC"> by its</font>

45
00:02:11,310 --> 00:02:13,850
counter mode can't guarantee the

46
00:02:12,810 --> 00:02:16,190
<font color="#CCCCCC">enhanced</font>

47
00:02:13,850 --> 00:02:18,470
performance if kind of techne was

48
00:02:16,190 --> 00:02:22,490
already<font color="#E5E5E5"> known as counter mode caching</font>

49
00:02:18,470 --> 00:02:24,830
however<font color="#E5E5E5"> previous continent caching only</font>

50
00:02:22,490 --> 00:02:30,110
reused<font color="#CCCCCC"> straight for non changing by it</font>

51
00:02:24,830 --> 00:02:33,410
<font color="#E5E5E5">so they have to recalculate the rest</font>

52
00:02:30,110 --> 00:02:37,490
which is<font color="#E5E5E5"> not covered</font><font color="#CCCCCC"> by caching caching</font>

53
00:02:33,410 --> 00:02:40,490
technique in every block<font color="#E5E5E5"> artist</font><font color="#CCCCCC"> I will</font>

54
00:02:37,490 --> 00:02:45,020
discuss<font color="#E5E5E5"> this limitation in more detail</font>

55
00:02:40,490 --> 00:02:48,320
after<font color="#CCCCCC"> a while I'm sure that you already</font>

56
00:02:45,020 --> 00:02:52,030
know well about each<font color="#E5E5E5"> transformation of a</font>

57
00:02:48,320 --> 00:02:56,000
strong functional or passive page and

58
00:02:52,030 --> 00:02:58,700
now I remind<font color="#CCCCCC"> you about some of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ACE</font>

59
00:02:56,000 --> 00:03:01,490
implementation methods first<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> a</font>

60
00:02:58,700 --> 00:03:04,549
terror based implementation this method

61
00:03:01,490 --> 00:03:06,680
really uses the<font color="#E5E5E5"> pre-competition table</font>

62
00:03:04,550 --> 00:03:10,360
and the round<font color="#CCCCCC"> function is done by</font>

63
00:03:06,680 --> 00:03:15,160
<font color="#E5E5E5">several table</font><font color="#CCCCCC"> lookups and XOR operation</font>

64
00:03:10,360 --> 00:03:17,960
<font color="#E5E5E5">this method was</font><font color="#CCCCCC"> very useful because the</font>

65
00:03:15,160 --> 00:03:21,170
<font color="#CCCCCC">belly useful for efficiently</font>

66
00:03:17,960 --> 00:03:23,990
implementing AES in counter mode<font color="#E5E5E5"> however</font>

67
00:03:21,170 --> 00:03:24,980
this method<font color="#E5E5E5"> is vulnerable to</font><font color="#CCCCCC"> comfortable</font>

68
00:03:23,990 --> 00:03:27,920
to count

69
00:03:24,980 --> 00:03:30,980
<font color="#CCCCCC">hash time inside channels</font><font color="#E5E5E5"> because the</font>

70
00:03:27,920 --> 00:03:34,940
look of indices<font color="#E5E5E5"> are depending on the</font>

71
00:03:30,980 --> 00:03:38,690
round key that is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> skew information so</font>

72
00:03:34,940 --> 00:03:41,540
to<font color="#CCCCCC"> overcome - timing vulnerabilities on</font>

73
00:03:38,690 --> 00:03:45,170
software implementation this last method

74
00:03:41,540 --> 00:03:46,910
has me<font color="#E5E5E5"> introduced it is less the</font>

75
00:03:45,170 --> 00:03:49,459
implementation is a constant time

76
00:03:46,910 --> 00:03:52,430
<font color="#CCCCCC">implementation there is no secret</font>

77
00:03:49,460 --> 00:03:57,070
dependent<font color="#E5E5E5"> there is no variable type</font>

78
00:03:52,430 --> 00:03:59,630
instructions and conditional branches or

79
00:03:57,070 --> 00:04:04,430
memory access patterns that depends<font color="#E5E5E5"> on</font>

80
00:03:59,630 --> 00:04:07,430
<font color="#CCCCCC">cycle information and finally Intel has</font>

81
00:04:04,430 --> 00:04:11,630
announced a<font color="#E5E5E5"> third instruction called a</font>

82
00:04:07,430 --> 00:04:14,240
<font color="#CCCCCC">SNI that support</font><font color="#E5E5E5"> that provides dedicated</font>

83
00:04:11,630 --> 00:04:16,010
hardware support for<font color="#CCCCCC"> lace acceleration</font>

84
00:04:14,240 --> 00:04:18,710
and to circumvent

85
00:04:16,010 --> 00:04:21,289
cache leaves by using the AES

86
00:04:18,709 --> 00:04:25,640
instruction set<font color="#CCCCCC"> operon came to a full</font>

87
00:04:21,290 --> 00:04:27,620
<font color="#E5E5E5">round in a single instruction this table</font>

88
00:04:25,640 --> 00:04:30,830
shows the fastest<font color="#E5E5E5"> result</font>

89
00:04:27,620 --> 00:04:32,870
each<font color="#CCCCCC"> implementation method a simple</font>

90
00:04:30,830 --> 00:04:34,789
numerical<font color="#E5E5E5"> comparison is</font><font color="#CCCCCC"> not appropriate</font>

91
00:04:32,870 --> 00:04:37,250
because the<font color="#E5E5E5"> testing furniture</font><font color="#CCCCCC"> are</font>

92
00:04:34,790 --> 00:04:40,699
different however<font color="#CCCCCC"> through this result we</font>

93
00:04:37,250 --> 00:04:45,740
can<font color="#CCCCCC"> peripherally rank each</font><font color="#E5E5E5"> method by two</font>

94
00:04:40,699 --> 00:04:47,750
<font color="#E5E5E5">performers in order to record on the</font>

95
00:04:45,740 --> 00:04:50,180
improved performance<font color="#CCCCCC"> someone might try</font>

96
00:04:47,750 --> 00:04:52,520
to leverage<font color="#E5E5E5"> into existing count</font>

97
00:04:50,180 --> 00:04:56,300
modification technique<font color="#E5E5E5"> however such an</font>

98
00:04:52,520 --> 00:04:58,909
attempt can associate easily<font color="#E5E5E5"> previous</font>

99
00:04:56,300 --> 00:05:00,919
<font color="#CCCCCC">contemn of</font><font color="#E5E5E5"> caching is not effective on</font>

100
00:04:58,910 --> 00:05:03,830
<font color="#CCCCCC">bitter sliced</font><font color="#E5E5E5"> and a stain</font><font color="#CCCCCC"> I based</font>

101
00:05:00,919 --> 00:05:06,680
implementation<font color="#E5E5E5"> it only covered partial</font>

102
00:05:03,830 --> 00:05:08,780
data<font color="#CCCCCC"> of round transformation</font><font color="#E5E5E5"> so the rest</font>

103
00:05:06,680 --> 00:05:11,150
which<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> covered</font><font color="#CCCCCC"> by caching</font>

104
00:05:08,780 --> 00:05:14,739
technique should<font color="#CCCCCC"> be calculated</font><font color="#E5E5E5"> in every</font>

105
00:05:11,150 --> 00:05:17,750
block for example<font color="#CCCCCC"> in the case of</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> sin I</font>

106
00:05:14,740 --> 00:05:21,830
around operation can be done<font color="#E5E5E5"> using only</font>

107
00:05:17,750 --> 00:05:24,350
one<font color="#CCCCCC"> AAS an instruction so adding some</font>

108
00:05:21,830 --> 00:05:26,620
operations to<font color="#E5E5E5"> calculate the rest becomes</font>

109
00:05:24,350 --> 00:05:29,389
<font color="#E5E5E5">a considerable burden our benefit</font>

110
00:05:26,620 --> 00:05:32,200
<font color="#E5E5E5">therefore the previous code mode caching</font>

111
00:05:29,389 --> 00:05:35,150
only<font color="#CCCCCC"> applies only has been applied to</font>

112
00:05:32,200 --> 00:05:39,620
table based implementation to show its

113
00:05:35,150 --> 00:05:41,239
efficiency<font color="#E5E5E5"> so now we propose on</font>

114
00:05:39,620 --> 00:05:44,030
<font color="#E5E5E5">implementation technique for lays</font>

115
00:05:41,240 --> 00:05:47,360
counter mode in software<font color="#E5E5E5"> our method</font>

116
00:05:44,030 --> 00:05:50,330
<font color="#E5E5E5">extend the</font><font color="#CCCCCC"> using ultimate cashing and we</font>

117
00:05:47,360 --> 00:05:53,389
<font color="#CCCCCC">name</font><font color="#E5E5E5"> the face</font><font color="#CCCCCC"> like a previous counter</font>

118
00:05:50,330 --> 00:05:56,560
mode<font color="#E5E5E5"> caching technique that deals with</font>

119
00:05:53,389 --> 00:05:59,389
<font color="#E5E5E5">partial</font><font color="#CCCCCC"> Izzard of roundel operation</font><font color="#E5E5E5"> our</font>

120
00:05:56,560 --> 00:06:02,389
<font color="#E5E5E5">nestled</font><font color="#CCCCCC"> phase can cover a round</font>

121
00:05:59,389 --> 00:06:05,389
operation entirely<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> showed that</font>

122
00:06:02,389 --> 00:06:07,970
<font color="#E5E5E5">our extended communication technique can</font>

123
00:06:05,389 --> 00:06:11,270
be applied to use to<font color="#CCCCCC"> peace</font><font color="#E5E5E5"> last</font>

124
00:06:07,970 --> 00:06:14,449
implementation and even implementation

125
00:06:11,270 --> 00:06:16,669
using<font color="#E5E5E5"> a</font><font color="#CCCCCC"> SMI instruction our work is the</font>

126
00:06:14,449 --> 00:06:19,190
<font color="#E5E5E5">first to apply counter mode caching to</font>

127
00:06:16,669 --> 00:06:22,039
be<font color="#E5E5E5"> sliced and even</font><font color="#CCCCCC"> Asuna based</font>

128
00:06:19,190 --> 00:06:24,710
implementation and consequently we

129
00:06:22,039 --> 00:06:25,580
record recorded the highest surf forever

130
00:06:24,710 --> 00:06:28,430
odd-shaped

131
00:06:25,580 --> 00:06:31,340
our literature shows that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are</font>

132
00:06:28,430 --> 00:06:37,580
approximately<font color="#E5E5E5"> 15</font><font color="#CCCCCC"> to 20 percent more</font>

133
00:06:31,340 --> 00:06:41,359
faster than those<font color="#E5E5E5"> previously reported</font><font color="#CCCCCC"> ok</font>

134
00:06:37,580 --> 00:06:44,359
now I will<font color="#CCCCCC"> explain</font><font color="#E5E5E5"> our proposal</font><font color="#CCCCCC"> nestled</font>

135
00:06:41,360 --> 00:06:47,080
<font color="#CCCCCC">techne including previous</font><font color="#E5E5E5"> ones</font><font color="#CCCCCC"> I think</font>

136
00:06:44,360 --> 00:06:49,969
these are probably<font color="#E5E5E5"> the end the result of</font>

137
00:06:47,080 --> 00:06:52,878
counter mode<font color="#E5E5E5"> caching there are five</font>

138
00:06:49,969 --> 00:06:55,460
types of caching technique and they are

139
00:06:52,879 --> 00:06:59,900
distinguished depending on the round

140
00:06:55,460 --> 00:07:02,568
that applied<font color="#E5E5E5"> the figure that figure at</font>

141
00:06:59,900 --> 00:07:06,049
the bottom<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> slide shows how the</font>

142
00:07:02,569 --> 00:07:09,110
difference in the counter is spread by

143
00:07:06,050 --> 00:07:13,039
<font color="#E5E5E5">round operation as I mentioned before</font>

144
00:07:09,110 --> 00:07:16,789
the difference in the encounter<font color="#CCCCCC"> between</font>

145
00:07:13,039 --> 00:07:20,150
<font color="#E5E5E5">two successive blocks is just last one</font>

146
00:07:16,789 --> 00:07:25,039
<font color="#CCCCCC">byte and at the end of round</font><font color="#E5E5E5"> two this</font>

147
00:07:20,150 --> 00:07:27,469
difference is spread to fully dirt now

148
00:07:25,039 --> 00:07:35,389
let's take a closer look<font color="#E5E5E5"> at how to make</font>

149
00:07:27,469 --> 00:07:39,610
<font color="#E5E5E5">the repetitive data useful first</font><font color="#CCCCCC"> base</font>

150
00:07:35,389 --> 00:07:42,439
are<font color="#E5E5E5"> the zero targets the initial writing</font>

151
00:07:39,610 --> 00:07:44,990
in this<font color="#CCCCCC"> pace were processing multiple</font>

152
00:07:42,439 --> 00:07:48,139
<font color="#E5E5E5">blocks the value of counter increases</font>

153
00:07:44,990 --> 00:07:52,699
<font color="#E5E5E5">but changes only the last byte in most</font>

154
00:07:48,139 --> 00:07:54,800
cases most<font color="#CCCCCC"> patch</font><font color="#E5E5E5"> is not changing on most</font>

155
00:07:52,699 --> 00:08:00,560
<font color="#CCCCCC">bite changes until the last by the</font>

156
00:07:54,800 --> 00:08:03,710
counter causes or<font color="#E5E5E5"> carry as you can see</font>

157
00:08:00,560 --> 00:08:05,509
after<font color="#CCCCCC"> the</font><font color="#E5E5E5"> initial</font><font color="#CCCCCC"> heightening this</font>

158
00:08:03,710 --> 00:08:08,870
<font color="#E5E5E5">characteristic is still maintained in</font>

159
00:08:05,509 --> 00:08:13,699
the result the<font color="#CCCCCC"> output is before in the</font>

160
00:08:08,870 --> 00:08:16,250
<font color="#E5E5E5">last one</font><font color="#CCCCCC"> byte</font><font color="#E5E5E5"> so unchanged</font><font color="#CCCCCC"> patch can be</font>

161
00:08:13,699 --> 00:08:21,199
<font color="#E5E5E5">Khurshid and reused to accelerate the</font>

162
00:08:16,250 --> 00:08:24,289
operation<font color="#CCCCCC"> base reuses</font><font color="#E5E5E5"> only tell bite out</font>

163
00:08:21,199 --> 00:08:30,620
of<font color="#E5E5E5"> often change the 15</font><font color="#CCCCCC"> byte to minimize</font>

164
00:08:24,289 --> 00:08:32,779
the cache updating so this can use the

165
00:08:30,620 --> 00:08:35,799
same cached information until the levels

166
00:08:32,779 --> 00:08:38,809
<font color="#E5E5E5">elements of counter changes because</font>

167
00:08:35,799 --> 00:08:43,279
<font color="#E5E5E5">interpreting</font><font color="#CCCCCC"> pace is just</font><font color="#E5E5E5"> a so operation</font>

168
00:08:38,809 --> 00:08:45,800
of encounter and<font color="#E5E5E5"> round key so while</font>

169
00:08:43,279 --> 00:08:48,680
processing<font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> the power</font><font color="#CCCCCC"> of a 32 -</font>

170
00:08:45,800 --> 00:08:52,069
accessible blocks<font color="#CCCCCC"> wasted</font><font color="#E5E5E5"> no need to</font>

171
00:08:48,680 --> 00:08:55,310
update the cached information<font color="#E5E5E5"> in</font><font color="#CCCCCC"> face</font>

172
00:08:52,069 --> 00:09:01,449
<font color="#CCCCCC">art</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> r d1 + Torito</font>

173
00:08:55,310 --> 00:09:06,138
round one<font color="#E5E5E5"> Finster out</font><font color="#CCCCCC"> of the ground zero</font>

174
00:09:01,449 --> 00:09:13,160
it means inch of heightening<font color="#CCCCCC"> is used as</font>

175
00:09:06,139 --> 00:09:16,790
<font color="#CCCCCC">the input of round one</font><font color="#E5E5E5"> so the so</font><font color="#CCCCCC"> the</font>

176
00:09:13,160 --> 00:09:20,930
last<font color="#CCCCCC"> byte of InTouch differ in the last</font>

177
00:09:16,790 --> 00:09:23,509
one<font color="#CCCCCC"> byte and this difference of actually</font>

178
00:09:20,930 --> 00:09:29,689
the<font color="#E5E5E5"> first column instead of</font><font color="#CCCCCC"> affecting</font>

179
00:09:23,509 --> 00:09:32,209
the first<font color="#CCCCCC"> eight so we can stay cash</font><font color="#E5E5E5"> and</font>

180
00:09:29,689 --> 00:09:35,839
reuse the result of round one except<font color="#CCCCCC"> for</font>

181
00:09:32,209 --> 00:09:38,388
<font color="#E5E5E5">the first column since the cache data is</font>

182
00:09:35,839 --> 00:09:41,480
change it when the<font color="#CCCCCC"> fourteenth element of</font>

183
00:09:38,389 --> 00:09:45,589
round on input is<font color="#CCCCCC"> changed so face</font>

184
00:09:41,480 --> 00:09:48,050
updates the test data<font color="#E5E5E5"> once for every 256</font>

185
00:09:45,589 --> 00:09:51,920
blocks the previous<font color="#CCCCCC"> hungins</font>

186
00:09:48,050 --> 00:09:54,109
implementation is or so<font color="#E5E5E5"> caches partial</font>

187
00:09:51,920 --> 00:09:57,110
data<font color="#CCCCCC"> the first column</font><font color="#E5E5E5"> of round one</font>

188
00:09:54,110 --> 00:10:00,860
lizard<font color="#E5E5E5"> however</font><font color="#CCCCCC"> faced us the</font><font color="#E5E5E5"> live Takeshi</font>

189
00:09:57,110 --> 00:10:07,040
<font color="#CCCCCC">or the first column data can be covered</font>

190
00:10:00,860 --> 00:10:10,040
<font color="#CCCCCC">by face</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> t1 plus</font><font color="#E5E5E5"> fell down face</font><font color="#CCCCCC"> our</font>

191
00:10:07,040 --> 00:10:15,439
<font color="#E5E5E5">t1 plus generator</font><font color="#CCCCCC"> pre-computation</font><font color="#E5E5E5"> values</font>

192
00:10:10,040 --> 00:10:18,339
for the first<font color="#E5E5E5"> column</font><font color="#CCCCCC"> this pre contention</font>

193
00:10:15,439 --> 00:10:21,649
values can<font color="#CCCCCC"> be generated during</font>

194
00:10:18,339 --> 00:10:29,990
initialization<font color="#E5E5E5"> space or during in</font>

195
00:10:21,649 --> 00:10:32,839
encryption pays most of the first for

196
00:10:29,990 --> 00:10:36,740
most of the<font color="#CCCCCC"> result state of round</font><font color="#E5E5E5"> one</font>

197
00:10:32,839 --> 00:10:40,819
<font color="#CCCCCC">are covered by face</font><font color="#E5E5E5"> or the one however</font>

198
00:10:36,740 --> 00:10:48,410
the first column is change it for every

199
00:10:40,819 --> 00:10:52,399
block so as you can<font color="#E5E5E5"> see the factors</font><font color="#CCCCCC"> that</font>

200
00:10:48,410 --> 00:10:56,889
<font color="#E5E5E5">determine the first column are zeros if</font>

201
00:10:52,399 --> 00:11:00,199
10th and 15th element of<font color="#CCCCCC"> round</font><font color="#E5E5E5"> one input</font>

202
00:10:56,889 --> 00:11:03,769
since the round key remains the same

203
00:11:00,199 --> 00:11:06,979
who are working<font color="#CCCCCC"> those fifteen element of</font>

204
00:11:03,769 --> 00:11:08,380
round one input determine divide the

205
00:11:06,980 --> 00:11:11,320
last<font color="#CCCCCC"> byte of a counter</font>

206
00:11:08,380 --> 00:11:15,010
and according to the increasing<font color="#CCCCCC"> lortab</font>

207
00:11:11,320 --> 00:11:18,010
as one to the previous<font color="#CCCCCC"> counter</font><font color="#E5E5E5"> value</font>

208
00:11:15,010 --> 00:11:24,189
this<font color="#E5E5E5"> last byte of counter is increased</font>

209
00:11:18,010 --> 00:11:26,950
linearly so those who fight shall<font color="#E5E5E5"> never</font>

210
00:11:24,190 --> 00:11:38,560
<font color="#CCCCCC">change the word processing to ^</font><font color="#E5E5E5"> fully</font>

211
00:11:26,950 --> 00:11:44,080
<font color="#CCCCCC">blocks so this means that the same</font>

212
00:11:38,560 --> 00:11:48,780
values are duplicated<font color="#E5E5E5"> for every 256</font>

213
00:11:44,080 --> 00:11:52,120
blocks<font color="#E5E5E5"> for example the</font><font color="#CCCCCC"> zeros plug and</font>

214
00:11:48,780 --> 00:11:56,290
256<font color="#CCCCCC"> this block has</font><font color="#E5E5E5"> the same value and</font>

215
00:11:52,120 --> 00:12:00,190
similarly<font color="#E5E5E5"> first block</font><font color="#CCCCCC"> and the 257</font>

216
00:11:56,290 --> 00:12:02,050
<font color="#CCCCCC">spurlock has the same value so we</font><font color="#E5E5E5"> can</font>

217
00:12:00,190 --> 00:12:04,630
generate<font color="#E5E5E5"> our temporarily lookup table</font>

218
00:12:02,050 --> 00:12:07,719
<font color="#CCCCCC">that uses</font><font color="#E5E5E5"> the last part of counter</font>

219
00:12:04,630 --> 00:12:11,560
<font color="#CCCCCC">lesson index</font><font color="#E5E5E5"> we need an additional</font><font color="#CCCCCC"> 1</font>

220
00:12:07,720 --> 00:12:14,290
kilobyte to<font color="#CCCCCC"> create the</font><font color="#E5E5E5"> creature or</font><font color="#CCCCCC"> ruko</font>

221
00:12:11,560 --> 00:12:17,260
table<font color="#E5E5E5"> because the first column is a</font><font color="#CCCCCC"> 4</font>

222
00:12:14,290 --> 00:12:21,180
byte and<font color="#E5E5E5"> the respite</font><font color="#CCCCCC"> or counter changes</font>

223
00:12:17,260 --> 00:12:24,520
from 0 to<font color="#E5E5E5"> 255</font>

224
00:12:21,180 --> 00:12:28,060
<font color="#CCCCCC">if pre-competition tables can be used</font>

225
00:12:24,520 --> 00:12:32,020
for processing<font color="#CCCCCC"> 2 ^</font><font color="#E5E5E5"> fully</font><font color="#CCCCCC"> constructed</font>

226
00:12:28,060 --> 00:12:36,640
<font color="#E5E5E5">blocks without the need for on any of</font>

227
00:12:32,020 --> 00:12:40,380
the additional<font color="#E5E5E5"> updating process this is</font>

228
00:12:36,640 --> 00:12:46,680
<font color="#E5E5E5">the caching procedure for face</font><font color="#CCCCCC"> LD 1 plus</font>

229
00:12:40,380 --> 00:12:49,090
at the end of round<font color="#E5E5E5"> 1 the</font><font color="#CCCCCC"> first column</font>

230
00:12:46,680 --> 00:12:51,699
<font color="#CCCCCC">sorry at the end of round</font><font color="#E5E5E5"> 1 the first</font>

231
00:12:49,090 --> 00:12:55,660
<font color="#E5E5E5">column is stored in the</font><font color="#CCCCCC"> temporally</font>

232
00:12:51,700 --> 00:12:59,830
lookup table and at this time the last

233
00:12:55,660 --> 00:13:04,420
byte of<font color="#E5E5E5"> counter is used as an index</font><font color="#CCCCCC"> so</font>

234
00:12:59,830 --> 00:13:08,680
finally in encryption pays by leveraging

235
00:13:04,420 --> 00:13:11,530
face are<font color="#E5E5E5"> the 1 and face are</font><font color="#CCCCCC"> the 1</font><font color="#E5E5E5"> plus 4</font>

236
00:13:08,680 --> 00:13:14,290
<font color="#E5E5E5">operations</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> to round 1 can be done</font>

237
00:13:11,530 --> 00:13:17,010
with<font color="#CCCCCC"> 2 memory road and</font><font color="#E5E5E5"> one merge</font>

238
00:13:14,290 --> 00:13:17,010
operation

239
00:13:23,720 --> 00:13:32,070
<font color="#CCCCCC">face RT - and face are the</font><font color="#E5E5E5"> tuples target</font>

240
00:13:27,089 --> 00:13:34,500
around<font color="#E5E5E5"> - in round</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> richer state</font>

241
00:13:32,070 --> 00:13:38,070
of<font color="#E5E5E5"> round one is also used as the input</font>

242
00:13:34,500 --> 00:13:40,649
of round<font color="#E5E5E5"> two so</font><font color="#CCCCCC"> in this case the</font>

243
00:13:38,070 --> 00:13:43,910
<font color="#E5E5E5">difference in the number</font><font color="#CCCCCC"> of parties of</font>

244
00:13:40,649 --> 00:13:48,329
<font color="#CCCCCC">four which composes the first column</font><font color="#E5E5E5"> and</font>

245
00:13:43,910 --> 00:13:51,779
this difference at the end<font color="#CCCCCC"> of the round</font>

246
00:13:48,329 --> 00:13:55,890
<font color="#CCCCCC">-</font><font color="#E5E5E5"> the difference in input</font><font color="#CCCCCC"> effects tofu</font>

247
00:13:51,779 --> 00:13:58,290
lizard<font color="#E5E5E5"> so the output of two successive</font>

248
00:13:55,890 --> 00:14:01,890
<font color="#CCCCCC">blocks are completely different</font>

249
00:13:58,290 --> 00:14:07,319
however we can also make a read<font color="#CCCCCC"> making</font>

250
00:14:01,890 --> 00:14:09,449
<font color="#E5E5E5">caches in round two the</font><font color="#CCCCCC"> box on the right</font>

251
00:14:07,320 --> 00:14:12,480
<font color="#CCCCCC">side of the figure describes the</font>

252
00:14:09,450 --> 00:14:15,149
calculation from<font color="#CCCCCC"> mixcolumns</font><font color="#E5E5E5"> to the end</font>

253
00:14:12,480 --> 00:14:19,680
of round<font color="#E5E5E5"> two especially</font><font color="#CCCCCC"> for the first</font>

254
00:14:15,149 --> 00:14:24,029
<font color="#E5E5E5">column as you can see since juice a</font>

255
00:14:19,680 --> 00:14:27,270
lemon tea is different<font color="#E5E5E5"> so the data</font>

256
00:14:24,029 --> 00:14:31,170
<font color="#E5E5E5">related to Jerusalem to the change but</font>

257
00:14:27,270 --> 00:14:33,779
the others<font color="#E5E5E5"> - not therefore we can catch</font>

258
00:14:31,170 --> 00:14:37,199
the intermediate calculation result for

259
00:14:33,779 --> 00:14:41,550
the first column<font color="#E5E5E5"> as shown in the figure</font>

260
00:14:37,200 --> 00:14:43,649
by the red boxes here<font color="#E5E5E5"> and similarly the</font>

261
00:14:41,550 --> 00:14:46,380
other columns or<font color="#CCCCCC"> Sukesh the intermediate</font>

262
00:14:43,649 --> 00:14:48,810
calculation<font color="#E5E5E5"> result for example the</font>

263
00:14:46,380 --> 00:14:54,170
second column can<font color="#E5E5E5"> cache it except</font><font color="#CCCCCC"> for</font>

264
00:14:48,810 --> 00:14:57,599
the data relates to this<font color="#E5E5E5"> salt element</font>

265
00:14:54,170 --> 00:15:01,709
<font color="#E5E5E5">this can read the disk cache data while</font>

266
00:14:57,600 --> 00:15:03,870
processing 255<font color="#CCCCCC"> cell blocks and the</font>

267
00:15:01,709 --> 00:15:07,709
frequency of update is equal to that of

268
00:15:03,870 --> 00:15:11,250
a hard one<font color="#E5E5E5"> because the alteration of</font><font color="#CCCCCC"> the</font>

269
00:15:07,709 --> 00:15:16,859
second column<font color="#CCCCCC"> of round</font><font color="#E5E5E5"> the to affect the</font>

270
00:15:11,250 --> 00:15:20,100
test<font color="#CCCCCC"> information base RT</font><font color="#E5E5E5"> 2</font><font color="#CCCCCC"> +</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> so</font>

271
00:15:16,860 --> 00:15:23,790
target also generate the<font color="#CCCCCC"> pre-computation</font>

272
00:15:20,100 --> 00:15:27,290
tables for the remaining intermediate

273
00:15:23,790 --> 00:15:30,660
data which is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> covered</font><font color="#CCCCCC"> by face</font><font color="#E5E5E5"> Rd - a</font>

274
00:15:27,290 --> 00:15:32,969
<font color="#CCCCCC">Weber</font><font color="#E5E5E5"> face are the two plus reverse the</font>

275
00:15:30,660 --> 00:15:33,600
similar<font color="#E5E5E5"> properties of a facial the</font><font color="#CCCCCC"> one</font>

276
00:15:32,970 --> 00:15:39,210
<font color="#E5E5E5">plus</font>

277
00:15:33,600 --> 00:15:41,700
while the target is different<font color="#E5E5E5"> so I would</font>

278
00:15:39,210 --> 00:15:45,680
like<font color="#E5E5E5"> to ask you your understanding force</font>

279
00:15:41,700 --> 00:15:48,660
keeping the<font color="#CCCCCC"> details of</font><font color="#E5E5E5"> race</font><font color="#CCCCCC"> Rd 2</font><font color="#E5E5E5"> plus</font>

280
00:15:45,680 --> 00:15:51,270
however in<font color="#CCCCCC"> eventually by leveraging</font>

281
00:15:48,660 --> 00:15:54,750
<font color="#CCCCCC">phase are</font><font color="#E5E5E5"> the two and</font><font color="#CCCCCC"> phase hardly two</font>

282
00:15:51,270 --> 00:15:58,290
plus the full<font color="#E5E5E5"> operations</font><font color="#CCCCCC"> of Toronto can</font>

283
00:15:54,750 --> 00:16:03,030
be done by two memory<font color="#CCCCCC"> Road and one</font><font color="#E5E5E5"> XOR</font>

284
00:15:58,290 --> 00:16:05,459
<font color="#E5E5E5">operation solely at this point of time</font>

285
00:16:03,030 --> 00:16:13,430
<font color="#CCCCCC">there may be concerned about</font><font color="#E5E5E5"> our test</font>

286
00:16:05,460 --> 00:16:15,990
timing vulnerabilities because since our

287
00:16:13,430 --> 00:16:19,140
<font color="#E5E5E5">messily uses the look up additional</font>

288
00:16:15,990 --> 00:16:22,980
lookup table it seems<font color="#E5E5E5"> that our method</font>

289
00:16:19,140 --> 00:16:27,330
will reintroduce timing side channels

290
00:16:22,980 --> 00:16:34,740
<font color="#E5E5E5">into protected implementation</font>

291
00:16:27,330 --> 00:16:40,680
however in conclusion our<font color="#CCCCCC"> miss the</font>

292
00:16:34,740 --> 00:16:44,610
condom<font color="#E5E5E5"> to</font><font color="#CCCCCC"> fish timing size channels</font>

293
00:16:40,680 --> 00:16:48,439
<font color="#CCCCCC">cannot apply to our improve our purpose</font>

294
00:16:44,610 --> 00:16:51,890
method<font color="#E5E5E5"> this is because there is no</font>

295
00:16:48,440 --> 00:16:55,290
<font color="#E5E5E5">secret dependent</font><font color="#CCCCCC"> assess patterns</font>

296
00:16:51,890 --> 00:17:00,569
instructions<font color="#E5E5E5"> and/or concern branches in</font>

297
00:16:55,290 --> 00:17:03,089
our proposed method and we to evaluate

298
00:17:00,570 --> 00:17:06,660
our proposed implementation the

299
00:17:03,090 --> 00:17:09,750
implemented face by modifying the AAS

300
00:17:06,660 --> 00:17:12,780
source code which contained in the open

301
00:17:09,750 --> 00:17:15,810
<font color="#E5E5E5">source libraries to the best of best of</font>

302
00:17:12,780 --> 00:17:19,220
our knowledge our<font color="#E5E5E5"> targets are</font><font color="#CCCCCC"> the</font>

303
00:17:15,810 --> 00:17:23,159
fastest ones<font color="#E5E5E5"> and we tested our</font>

304
00:17:19,220 --> 00:17:27,290
implementations in several several

305
00:17:23,160 --> 00:17:27,290
environments as shown in the table

306
00:17:29,450 --> 00:17:36,930
<font color="#CCCCCC">comprehensive comparison</font><font color="#E5E5E5"> research is</font>

307
00:17:33,450 --> 00:17:39,270
summarized in the in this table we

308
00:17:36,930 --> 00:17:41,820
measure the<font color="#E5E5E5"> circle using three key</font>

309
00:17:39,270 --> 00:17:46,170
lenses<font color="#E5E5E5"> while changing</font><font color="#CCCCCC"> the input of the</font>

310
00:17:41,820 --> 00:17:48,470
input<font color="#CCCCCC"> plots in case of the in size over</font>

311
00:17:46,170 --> 00:17:53,390
4000 by<font color="#E5E5E5"> 10</font>

312
00:17:48,470 --> 00:17:56,909
<font color="#E5E5E5">128k beat our pitiful eyes face records</font>

313
00:17:53,390 --> 00:17:59,789
6.41 cycles per<font color="#CCCCCC"> bite where the</font><font color="#E5E5E5"> previous</font>

314
00:17:56,909 --> 00:18:03,090
fastest one<font color="#E5E5E5"> records seven point two five</font>

315
00:17:59,789 --> 00:18:06,779
nine cycles per bite<font color="#CCCCCC"> and in case of</font><font color="#E5E5E5"> a</font>

316
00:18:03,090 --> 00:18:10,320
<font color="#CCCCCC">Sen I face records</font><font color="#E5E5E5"> zero point four four</font>

317
00:18:06,779 --> 00:18:13,860
cycles per bite<font color="#E5E5E5"> where the previous one</font>

318
00:18:10,320 --> 00:18:20,460
records zero point five four cycles per

319
00:18:13,860 --> 00:18:23,340
<font color="#E5E5E5">bite so we should</font><font color="#CCCCCC"> hear</font><font color="#E5E5E5"> operation on the</font>

320
00:18:20,460 --> 00:18:26,250
structure<font color="#CCCCCC"> of counter mode so for AES</font>

321
00:18:23,340 --> 00:18:29,639
<font color="#CCCCCC">that can</font><font color="#E5E5E5"> be leveraged it for gaining a</font>

322
00:18:26,250 --> 00:18:33,000
noticeable performance boost in<font color="#E5E5E5"> software</font>

323
00:18:29,640 --> 00:18:35,070
implementation our method<font color="#E5E5E5"> phase can</font>

324
00:18:33,000 --> 00:18:37,919
improve the performance<font color="#CCCCCC"> of a is counter</font>

325
00:18:35,070 --> 00:18:40,730
mode approximately 15 to 20 percent<font color="#E5E5E5"> and</font>

326
00:18:37,919 --> 00:18:44,039
<font color="#E5E5E5">phase can</font><font color="#CCCCCC"> be employed illegally so</font>

327
00:18:40,730 --> 00:18:47,370
implementation method<font color="#E5E5E5"> and lastly it will</font>

328
00:18:44,039 --> 00:18:49,649
<font color="#E5E5E5">be</font><font color="#CCCCCC"> interesting to verify whether such</font>

329
00:18:47,370 --> 00:18:52,729
attention techniques can be applied<font color="#E5E5E5"> to</font>

330
00:18:49,649 --> 00:18:56,699
other algorithms<font color="#E5E5E5"> that had the similar</font>

331
00:18:52,730 --> 00:18:59,800
<font color="#CCCCCC">catalyst to delays counter mode this</font>

332
00:18:56,700 --> 00:19:07,230
concludes my presentation thank you

333
00:18:59,800 --> 00:19:18,340
[Applause]

334
00:19:07,230 --> 00:19:20,830
questions ready then I<font color="#E5E5E5"> think we are just</font>

335
00:19:18,340 --> 00:19:24,639
<font color="#E5E5E5">on time to</font><font color="#CCCCCC"> conclude the session thanks</font>

336
00:19:20,830 --> 00:19:31,019
again<font color="#CCCCCC"> and I give the</font><font color="#E5E5E5"> floor to Vito again</font>

337
00:19:24,640 --> 00:19:31,019
[Applause]

