1
00:00:01,580 --> 00:00:08,670
<font color="#CCCCCC">all right so the next talk here will be</font>

2
00:00:05,549 --> 00:00:12,480
cash quote efficiently<font color="#CCCCCC"> Lee recovering</font>

3
00:00:08,670 --> 00:00:15,350
<font color="#E5E5E5">long-term secrets of</font><font color="#CCCCCC"> SGX e PID by a cash</font>

4
00:00:12,480 --> 00:00:18,240
attacks<font color="#E5E5E5"> now this is work</font><font color="#CCCCCC"> by fergus doll</font>

5
00:00:15,350 --> 00:00:21,270
<font color="#CCCCCC">Gabriel to me Kelly Thomas Ethan but</font>

6
00:00:18,240 --> 00:00:24,209
Ison<font color="#CCCCCC"> Barth Daniel gankin Nadia hanging</font>

7
00:00:21,270 --> 00:00:26,369
her<font color="#CCCCCC"> Hamid Mogami</font><font color="#E5E5E5"> you've all your own and</font>

8
00:00:24,210 --> 00:00:29,160
it will be<font color="#E5E5E5"> presented by Gabrielle</font><font color="#CCCCCC"> okay</font>

9
00:00:26,369 --> 00:00:32,099
thank<font color="#CCCCCC"> you for</font><font color="#E5E5E5"> the introduction</font><font color="#CCCCCC"> so first</font>

10
00:00:29,160 --> 00:00:33,989
let<font color="#CCCCCC"> me present this paper so cash quote</font>

11
00:00:32,098 --> 00:00:37,800
efficiently recovering<font color="#CCCCCC"> long-term secrets</font>

12
00:00:33,989 --> 00:00:39,209
of SDXC PID via cash attacks so<font color="#E5E5E5"> I will</font>

13
00:00:37,800 --> 00:00:41,430
give<font color="#E5E5E5"> you a bit of background about Intel</font>

14
00:00:39,210 --> 00:00:43,980
suffer guard extensions to start with<font color="#E5E5E5"> so</font>

15
00:00:41,430 --> 00:00:47,730
as<font color="#CCCCCC"> J X is this security</font><font color="#E5E5E5"> technology that</font>

16
00:00:43,980 --> 00:00:49,620
was introduced by Intel in 2015 and it's

17
00:00:47,730 --> 00:00:53,519
basically just a set of<font color="#CCCCCC"> extensions of</font>

18
00:00:49,620 --> 00:00:55,110
Intel's x86 architecture and as<font color="#CCCCCC"> chips</font>

19
00:00:53,520 --> 00:00:57,180
allows users to perform secure

20
00:00:55,110 --> 00:00:59,430
computation on potentially compromised

21
00:00:57,180 --> 00:01:01,769
platforms<font color="#E5E5E5"> where an attacker controls</font>

22
00:00:59,430 --> 00:01:05,880
everything<font color="#E5E5E5"> including the operating</font>

23
00:01:01,770 --> 00:01:07,830
system<font color="#CCCCCC"> so in order</font><font color="#E5E5E5"> to do this as J X</font>

24
00:01:05,880 --> 00:01:09,600
introduces this new technology this<font color="#CCCCCC"> new</font>

25
00:01:07,830 --> 00:01:12,210
environment which are called<font color="#E5E5E5"> enclaves</font>

26
00:01:09,600 --> 00:01:14,610
<font color="#E5E5E5">and these enclaves are isolated</font><font color="#CCCCCC"> from the</font>

27
00:01:12,210 --> 00:01:16,080
rest of<font color="#E5E5E5"> the software</font><font color="#CCCCCC"> and as J X is going</font>

28
00:01:14,610 --> 00:01:18,330
<font color="#E5E5E5">to control the access to these enclaves</font>

29
00:01:16,080 --> 00:01:20,429
<font color="#E5E5E5">in such a way</font><font color="#CCCCCC"> that even the operating</font>

30
00:01:18,330 --> 00:01:22,200
system which could be malicious<font color="#E5E5E5"> do not</font>

31
00:01:20,430 --> 00:01:23,880
have access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the content in the</font>

32
00:01:22,200 --> 00:01:28,049
enclaves so the code<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> data in the</font>

33
00:01:23,880 --> 00:01:29,520
enclaves<font color="#E5E5E5"> so now we are in the</font><font color="#CCCCCC"> situation</font>

34
00:01:28,049 --> 00:01:31,650
where we<font color="#CCCCCC"> want to put</font><font color="#E5E5E5"> the end clave on</font>

35
00:01:29,520 --> 00:01:34,170
the cloud and<font color="#E5E5E5"> we have the following</font>

36
00:01:31,650 --> 00:01:36,200
<font color="#E5E5E5">setup where</font><font color="#CCCCCC"> we have an Intel SGX machine</font>

37
00:01:34,170 --> 00:01:38,579
on the cloud and<font color="#CCCCCC"> we have a client and</font>

38
00:01:36,200 --> 00:01:40,979
the client wants to make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that it is</font>

39
00:01:38,579 --> 00:01:42,689
communicating with first of<font color="#E5E5E5"> all and</font><font color="#CCCCCC"> in</font>

40
00:01:40,979 --> 00:01:45,090
clave which is correctly initialized<font color="#E5E5E5"> and</font>

41
00:01:42,689 --> 00:01:47,398
most importantly with an<font color="#E5E5E5"> N clave which</font>

42
00:01:45,090 --> 00:01:50,250
is<font color="#E5E5E5"> running some genuine</font><font color="#CCCCCC"> SGX</font><font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> and</font>

43
00:01:47,399 --> 00:01:52,110
to do so<font color="#CCCCCC"> SGX introduces this remote</font>

44
00:01:50,250 --> 00:01:55,619
attestation protocol which<font color="#CCCCCC"> is called EP</font>

45
00:01:52,110 --> 00:01:56,969
<font color="#CCCCCC">ID and hence privacy ID and so the cloud</font>

46
00:01:55,619 --> 00:01:59,369
is going<font color="#E5E5E5"> to want to prove to</font><font color="#CCCCCC"> the client</font>

47
00:01:56,969 --> 00:02:01,949
<font color="#E5E5E5">that it is this genuine</font><font color="#CCCCCC"> SGX machine and</font>

48
00:01:59,369 --> 00:02:04,320
to do so it<font color="#CCCCCC"> is the proof here is going</font>

49
00:02:01,950 --> 00:02:07,009
<font color="#E5E5E5">to be this cryptographic signature which</font>

50
00:02:04,320 --> 00:02:09,628
is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to certify the</font><font color="#CCCCCC"> enclaves content</font>

51
00:02:07,009 --> 00:02:11,819
so first of all<font color="#E5E5E5"> every</font><font color="#CCCCCC"> sjx machine has</font>

52
00:02:09,628 --> 00:02:13,350
<font color="#E5E5E5">this EP ID key which is given to</font><font color="#CCCCCC"> it by</font>

53
00:02:11,819 --> 00:02:15,750
<font color="#E5E5E5">Intel</font>

54
00:02:13,350 --> 00:02:17,970
and when<font color="#E5E5E5"> launching</font><font color="#CCCCCC"> and enclaves</font><font color="#E5E5E5"> the</font>

55
00:02:15,750 --> 00:02:20,430
cloud is going<font color="#CCCCCC"> to use some special as</font>

56
00:02:17,970 --> 00:02:23,160
<font color="#CCCCCC">Jake's instructions along with is this</font>

57
00:02:20,430 --> 00:02:26,280
<font color="#CCCCCC">epi D key</font><font color="#E5E5E5"> to hash and sign the enclaves</font>

58
00:02:23,160 --> 00:02:27,960
content and the<font color="#CCCCCC"> psytrance signature is</font>

59
00:02:26,280 --> 00:02:32,490
what we call this attestation quote

60
00:02:27,960 --> 00:02:35,310
<font color="#E5E5E5">which is</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> sent to the client now the</font>

61
00:02:32,490 --> 00:02:37,110
client sends this attestation quote to

62
00:02:35,310 --> 00:02:40,620
<font color="#CCCCCC">Intelsat the station service for</font>

63
00:02:37,110 --> 00:02:43,500
verification<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> Intel is fine with</font>

64
00:02:40,620 --> 00:02:46,110
the quote says<font color="#CCCCCC"> ok this is a fine quote</font>

65
00:02:43,500 --> 00:02:48,450
then the client can communicate securely

66
00:02:46,110 --> 00:02:52,400
with the<font color="#E5E5E5"> end clave using this ephemeral</font>

67
00:02:48,450 --> 00:02:54,570
<font color="#E5E5E5">key that has been a joined to the quote</font>

68
00:02:52,400 --> 00:02:56,640
now there's various<font color="#E5E5E5"> important things to</font>

69
00:02:54,570 --> 00:02:58,980
notice about<font color="#E5E5E5"> this slide first of all the</font>

70
00:02:56,640 --> 00:03:01,799
<font color="#E5E5E5">full trust of this protocol is based on</font>

71
00:02:58,980 --> 00:03:03,480
<font color="#E5E5E5">this</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> key the client can be assured</font>

72
00:03:01,800 --> 00:03:06,090
<font color="#CCCCCC">that it is communicating with a genuine</font>

73
00:03:03,480 --> 00:03:08,340
<font color="#CCCCCC">SGX machine</font><font color="#E5E5E5"> because only these as TX</font>

74
00:03:06,090 --> 00:03:10,170
machines have access to this<font color="#CCCCCC"> API key</font>

75
00:03:08,340 --> 00:03:12,270
this attestation key that is given<font color="#CCCCCC"> to it</font>

76
00:03:10,170 --> 00:03:14,910
by Intel and can then use<font color="#E5E5E5"> these special</font>

77
00:03:12,270 --> 00:03:18,300
sets of instructions<font color="#CCCCCC"> to produce the</font>

78
00:03:14,910 --> 00:03:19,859
attestation<font color="#E5E5E5"> quote now when the client</font>

79
00:03:18,300 --> 00:03:22,020
receives<font color="#CCCCCC"> the code it has to send it to</font>

80
00:03:19,860 --> 00:03:23,160
<font color="#E5E5E5">Intel's attestation service and one of</font>

81
00:03:22,020 --> 00:03:24,840
the reason<font color="#CCCCCC"> why</font><font color="#E5E5E5"> Intel has this</font>

82
00:03:23,160 --> 00:03:27,270
attestation service is<font color="#E5E5E5"> because of</font>

83
00:03:24,840 --> 00:03:29,340
revocation<font color="#E5E5E5"> Intel wants to be able to</font>

84
00:03:27,270 --> 00:03:32,700
revoke platforms whose signatures or

85
00:03:29,340 --> 00:03:34,260
keys have<font color="#CCCCCC"> been compromised</font><font color="#E5E5E5"> now another</font>

86
00:03:32,700 --> 00:03:36,239
reason why the<font color="#E5E5E5"> client cannot verify the</font>

87
00:03:34,260 --> 00:03:38,130
code itself<font color="#E5E5E5"> is because</font><font color="#CCCCCC"> Intel is gonna</font>

88
00:03:36,240 --> 00:03:40,590
<font color="#E5E5E5">entail or</font><font color="#CCCCCC"> SGX in particular is gonna</font>

89
00:03:38,130 --> 00:03:42,780
<font color="#E5E5E5">encrypt these attestation quotes</font><font color="#CCCCCC"> so the</font>

90
00:03:40,590 --> 00:03:44,430
client cannot verify it itself<font color="#E5E5E5"> and again</font>

91
00:03:42,780 --> 00:03:48,090
<font color="#E5E5E5">has to send</font><font color="#CCCCCC"> it to Intel's attestation</font>

92
00:03:44,430 --> 00:03:51,150
service now if we're the scenario where

93
00:03:48,090 --> 00:03:53,430
until is malicious<font color="#E5E5E5"> then this brings up a</font>

94
00:03:51,150 --> 00:03:55,080
privacy issue<font color="#E5E5E5"> because this</font><font color="#CCCCCC"> decision</font>

95
00:03:53,430 --> 00:03:56,610
service basically<font color="#E5E5E5"> has access to all this</font>

96
00:03:55,080 --> 00:03:58,710
information<font color="#E5E5E5"> which client is</font>

97
00:03:56,610 --> 00:04:01,410
communicating with which<font color="#CCCCCC"> enclaves that's</font>

98
00:03:58,710 --> 00:04:05,100
a lot<font color="#E5E5E5"> of information and so in order to</font>

99
00:04:01,410 --> 00:04:07,200
<font color="#E5E5E5">remedy to this privacy problem issue</font><font color="#CCCCCC"> SGX</font>

100
00:04:05,100 --> 00:04:09,810
implements this security<font color="#E5E5E5"> guarantee which</font>

101
00:04:07,200 --> 00:04:11,369
is called a link ability<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then the</font>

102
00:04:09,810 --> 00:04:13,950
<font color="#CCCCCC">quality basically tells</font><font color="#E5E5E5"> you that it</font><font color="#CCCCCC"> is</font>

103
00:04:11,370 --> 00:04:15,540
impossible<font color="#CCCCCC"> to identify</font><font color="#E5E5E5"> a platform that</font>

104
00:04:13,950 --> 00:04:18,630
produced some signature on some message

105
00:04:15,540 --> 00:04:20,608
<font color="#CCCCCC">M so if the attestation</font><font color="#E5E5E5"> service receives</font>

106
00:04:18,630 --> 00:04:22,469
this quote from<font color="#E5E5E5"> this read processor this</font>

107
00:04:20,608 --> 00:04:24,090
<font color="#E5E5E5">is basically undistinguishable from any</font>

108
00:04:22,470 --> 00:04:26,630
other quotes<font color="#E5E5E5"> produced by any other</font>

109
00:04:24,090 --> 00:04:26,630
processor

110
00:04:27,169 --> 00:04:31,219
another security<font color="#E5E5E5"> guarantee that</font><font color="#CCCCCC"> SGX has</font>

111
00:04:29,509 --> 00:04:32,930
is this unfortunate<font color="#E5E5E5"> II so it's</font>

112
00:04:31,219 --> 00:04:35,150
<font color="#CCCCCC">impossible for an attacker to forge a</font>

113
00:04:32,930 --> 00:04:39,680
valid signature<font color="#CCCCCC"> on some message if it</font>

114
00:04:35,150 --> 00:04:42,020
does not know the<font color="#CCCCCC"> secret key so now in</font>

115
00:04:39,680 --> 00:04:43,699
our work<font color="#E5E5E5"> we give a</font><font color="#CCCCCC"> cash attack on</font>

116
00:04:42,020 --> 00:04:46,698
<font color="#E5E5E5">Intel's EP ID protocol which is</font>

117
00:04:43,699 --> 00:04:48,680
implemented inside<font color="#CCCCCC"> SGX and</font><font color="#E5E5E5"> using this</font>

118
00:04:46,699 --> 00:04:50,210
cash attack we were able<font color="#E5E5E5"> to recover part</font>

119
00:04:48,680 --> 00:04:53,689
of the<font color="#E5E5E5"> enclave's</font><font color="#CCCCCC"> long-term secret key</font>

120
00:04:50,210 --> 00:04:55,340
<font color="#CCCCCC">and if we have part</font><font color="#E5E5E5"> of this secret key</font>

121
00:04:53,689 --> 00:04:57,590
then a malicious at the station server

122
00:04:55,340 --> 00:05:00,609
<font color="#E5E5E5">such as Intel can break this unlink</font>

123
00:04:57,590 --> 00:05:03,438
ability guarantee that<font color="#E5E5E5"> I just mentioned</font>

124
00:05:00,610 --> 00:05:05,750
<font color="#E5E5E5">so now in order to explain to you how</font>

125
00:05:03,439 --> 00:05:07,479
<font color="#CCCCCC">this attack</font><font color="#E5E5E5"> actually works I'll just</font>

126
00:05:05,750 --> 00:05:11,750
give a little<font color="#E5E5E5"> bit of background on EP ID</font>

127
00:05:07,479 --> 00:05:14,180
so EP ID has four entities basically has

128
00:05:11,750 --> 00:05:16,909
an issuer<font color="#E5E5E5"> a revocation manager a</font>

129
00:05:14,180 --> 00:05:18,710
platform and a verifier which in our

130
00:05:16,909 --> 00:05:23,240
<font color="#E5E5E5">case the verifier</font><font color="#CCCCCC"> is going to be</font><font color="#E5E5E5"> Intel</font>

131
00:05:18,710 --> 00:05:25,039
and we have the following algorithms so

132
00:05:23,240 --> 00:05:26,749
first of<font color="#E5E5E5"> all we have the setup algorithm</font>

133
00:05:25,039 --> 00:05:28,370
so the<font color="#E5E5E5"> issuer here is like a group</font>

134
00:05:26,749 --> 00:05:31,400
manager it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> decide who joins the</font>

135
00:05:28,370 --> 00:05:33,379
group or not and on some input<font color="#CCCCCC"> one K</font>

136
00:05:31,400 --> 00:05:35,448
where K<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just a security parameter the</font>

137
00:05:33,379 --> 00:05:38,029
issuer<font color="#E5E5E5"> is gonna use the</font><font color="#CCCCCC"> setup algorithm</font>

138
00:05:35,449 --> 00:05:41,870
to output a pair<font color="#E5E5E5"> of keys a group public</font>

139
00:05:38,029 --> 00:05:43,789
key<font color="#E5E5E5"> and an issuer secret key now a</font>

140
00:05:41,870 --> 00:05:46,039
platform wants to join the group<font color="#E5E5E5"> and so</font>

141
00:05:43,789 --> 00:05:48,800
it performs<font color="#E5E5E5"> this join protocol along</font>

142
00:05:46,039 --> 00:05:51,020
with the issuer<font color="#CCCCCC"> where the issuer has its</font>

143
00:05:48,800 --> 00:05:52,879
pair of keys as input the<font color="#E5E5E5"> platform uses</font>

144
00:05:51,020 --> 00:05:54,799
the group public key and then the

145
00:05:52,879 --> 00:05:58,219
<font color="#CCCCCC">platform learns a secret key SK the</font>

146
00:05:54,800 --> 00:06:01,550
<font color="#CCCCCC">secret key is</font><font color="#E5E5E5"> private and a unique per</font>

147
00:05:58,219 --> 00:06:03,589
platform<font color="#E5E5E5"> now if the platform wants to</font>

148
00:06:01,550 --> 00:06:05,659
sign a<font color="#E5E5E5"> message m using the secret key SK</font>

149
00:06:03,589 --> 00:06:08,240
it produces a signature that it<font color="#E5E5E5"> sends to</font>

150
00:06:05,659 --> 00:06:10,339
<font color="#E5E5E5">the client and the send the</font><font color="#CCCCCC"> client sends</font>

151
00:06:08,240 --> 00:06:12,830
<font color="#E5E5E5">it to the verifier so until in this case</font>

152
00:06:10,339 --> 00:06:15,800
<font color="#E5E5E5">and finally if we want to</font><font color="#CCCCCC"> verify</font><font color="#E5E5E5"> a</font>

153
00:06:12,830 --> 00:06:17,628
signature until verifies it for us

154
00:06:15,800 --> 00:06:21,319
basically and tells us if the sila<font color="#CCCCCC"> the</font>

155
00:06:17,629 --> 00:06:22,909
signature is valid or not so in our work

156
00:06:21,319 --> 00:06:24,889
we were we look in particular at the

157
00:06:22,909 --> 00:06:27,770
signing<font color="#CCCCCC"> algorithm which is in this EP ID</font>

158
00:06:24,889 --> 00:06:29,419
protocol<font color="#E5E5E5"> so or remember that at the end</font>

159
00:06:27,770 --> 00:06:31,490
<font color="#E5E5E5">of this joint protocol the platform</font>

160
00:06:29,419 --> 00:06:33,649
learned<font color="#E5E5E5"> a secret</font><font color="#CCCCCC"> key SK and</font><font color="#E5E5E5"> the secret</font>

161
00:06:31,490 --> 00:06:35,330
key is composed of some element F which

162
00:06:33,649 --> 00:06:38,330
is<font color="#E5E5E5"> taken</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> group set</font><font color="#E5E5E5"> P for some</font>

163
00:06:35,330 --> 00:06:40,128
prime P<font color="#CCCCCC"> and some Intel signature on</font><font color="#E5E5E5"> F so</font>

164
00:06:38,330 --> 00:06:40,849
until uses this<font color="#CCCCCC"> VBS plus signature</font>

165
00:06:40,129 --> 00:06:42,169
scheme which

166
00:06:40,849 --> 00:06:45,709
does<font color="#E5E5E5"> not really matter for the attack</font>

167
00:06:42,169 --> 00:06:47,508
here part<font color="#E5E5E5"> of the group public key we</font>

168
00:06:45,709 --> 00:06:49,459
<font color="#E5E5E5">have a cyclic group G and from the</font>

169
00:06:47,509 --> 00:06:52,039
cyclic group G the platform defines<font color="#CCCCCC"> or</font>

170
00:06:49,459 --> 00:06:54,050
chooses a basis B and then computes<font color="#E5E5E5"> a</font>

171
00:06:52,039 --> 00:06:56,558
value K which is<font color="#E5E5E5"> equal</font><font color="#CCCCCC"> to B to the F</font>

172
00:06:54,050 --> 00:06:58,789
where F is<font color="#E5E5E5"> again part of the secret key</font>

173
00:06:56,559 --> 00:07:00,319
now how do you assign or how does the

174
00:06:58,789 --> 00:07:02,149
platform sign so remember<font color="#CCCCCC"> that we have</font>

175
00:07:00,319 --> 00:07:03,469
this unlink ability<font color="#E5E5E5"> guarantee where we</font>

176
00:07:02,149 --> 00:07:05,659
want to make<font color="#CCCCCC"> sure that</font><font color="#E5E5E5"> from a given</font>

177
00:07:03,469 --> 00:07:08,029
signature we're not able to retrace our

178
00:07:05,659 --> 00:07:09,830
<font color="#E5E5E5">way back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the platform</font><font color="#CCCCCC"> so in order to</font>

179
00:07:08,029 --> 00:07:11,869
sign the platform uses a<font color="#CCCCCC"> non-interactive</font>

180
00:07:09,830 --> 00:07:13,490
<font color="#E5E5E5">zero knowledge proof of knowledge or the</font>

181
00:07:11,869 --> 00:07:15,649
proof<font color="#E5E5E5"> or the statement</font><font color="#CCCCCC"> that the platform</font>

182
00:07:13,490 --> 00:07:18,110
has is the<font color="#E5E5E5"> platform knows</font><font color="#CCCCCC"> son</font><font color="#E5E5E5"> and</font>

183
00:07:15,649 --> 00:07:22,669
revoked<font color="#CCCCCC"> F such that</font><font color="#E5E5E5"> the F satisfies the</font>

184
00:07:18,110 --> 00:07:25,240
<font color="#CCCCCC">following equation so K equals B F now</font>

185
00:07:22,669 --> 00:07:27,649
along in the protocol we require

186
00:07:25,240 --> 00:07:30,019
<font color="#E5E5E5">computing this exponentiation so we have</font>

187
00:07:27,649 --> 00:07:31,999
some value<font color="#CCCCCC"> a and we raise this value to</font>

188
00:07:30,019 --> 00:07:36,019
R where R as a nonce<font color="#E5E5E5"> again</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> random</font>

189
00:07:31,999 --> 00:07:37,669
element<font color="#CCCCCC"> chosen from the group set P at</font>

190
00:07:36,019 --> 00:07:40,580
the<font color="#E5E5E5"> end of the signing protocol we</font>

191
00:07:37,669 --> 00:07:42,198
output a signature<font color="#E5E5E5"> the signature has the</font>

192
00:07:40,580 --> 00:07:44,688
values K and V in<font color="#E5E5E5"> its</font><font color="#CCCCCC"> ok and</font><font color="#E5E5E5"> B are</font>

193
00:07:42,199 --> 00:07:47,180
public and it also has this value<font color="#CCCCCC"> S</font>

194
00:07:44,689 --> 00:07:50,180
which<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to be equal to R plus h</font>

195
00:07:47,180 --> 00:07:52,430
<font color="#E5E5E5">times F R again is the exponent in the</font>

196
00:07:50,180 --> 00:07:54,559
line above so the<font color="#E5E5E5"> nonce that we have</font><font color="#CCCCCC"> H</font>

197
00:07:52,430 --> 00:07:59,089
is<font color="#E5E5E5"> the hash of some public values and F</font>

198
00:07:54,559 --> 00:08:01,879
is part of the<font color="#E5E5E5"> secret key so now what's</font>

199
00:07:59,089 --> 00:08:04,129
the<font color="#E5E5E5"> idea behind the attack so we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

200
00:08:01,879 --> 00:08:05,869
get<font color="#E5E5E5"> information about the length of the</font>

201
00:08:04,129 --> 00:08:07,099
nonce are in this exponentiation and

202
00:08:05,869 --> 00:08:10,459
<font color="#E5E5E5">this can be done</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> out a side</font>

203
00:08:07,099 --> 00:08:12,829
channel<font color="#E5E5E5"> attack now if</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> able to get</font>

204
00:08:10,459 --> 00:08:14,360
<font color="#E5E5E5">a lot of information</font><font color="#CCCCCC"> about these lengths</font>

205
00:08:12,829 --> 00:08:16,159
of the nonce R so we have<font color="#E5E5E5"> many</font>

206
00:08:14,360 --> 00:08:18,439
observation<font color="#E5E5E5"> we can use this information</font>

207
00:08:16,159 --> 00:08:20,179
<font color="#E5E5E5">to mount a lattice attack and this</font>

208
00:08:18,439 --> 00:08:22,729
lattice attack will allow us to<font color="#CCCCCC"> recover</font>

209
00:08:20,179 --> 00:08:25,489
<font color="#CCCCCC">the</font><font color="#E5E5E5"> secret or F the value F here which</font>

210
00:08:22,729 --> 00:08:28,818
is part of the<font color="#E5E5E5"> secret key and if an</font>

211
00:08:25,490 --> 00:08:31,399
attacker from<font color="#E5E5E5"> recovered F then it breaks</font>

212
00:08:28,819 --> 00:08:33,318
the unlink ability guarantee so more

213
00:08:31,399 --> 00:08:36,349
<font color="#CCCCCC">precisely how is this unlink ability</font>

214
00:08:33,318 --> 00:08:40,188
broken<font color="#E5E5E5"> so remember that the secret key F</font>

215
00:08:36,349 --> 00:08:42,789
is unique<font color="#E5E5E5"> per platform in private now</font>

216
00:08:40,188 --> 00:08:45,410
the attacker<font color="#E5E5E5"> knows a signature Sigma and</font>

217
00:08:42,789 --> 00:08:48,889
then using this side<font color="#E5E5E5"> shell attack</font>

218
00:08:45,410 --> 00:08:50,750
<font color="#E5E5E5">managed to recover F so if the attacker</font>

219
00:08:48,889 --> 00:08:52,610
knows<font color="#E5E5E5"> F since K and B are public then</font>

220
00:08:50,750 --> 00:08:54,110
<font color="#E5E5E5">you know the attacker can verify whether</font>

221
00:08:52,610 --> 00:08:56,450
<font color="#CCCCCC">K equals</font>

222
00:08:54,110 --> 00:08:58,640
<font color="#CCCCCC">2df and so if we have a list of</font>

223
00:08:56,450 --> 00:09:00,800
<font color="#CCCCCC">signatures and we can verify whether</font><font color="#E5E5E5"> K</font>

224
00:08:58,640 --> 00:09:02,270
equals<font color="#CCCCCC"> VF for each</font><font color="#E5E5E5"> signature then we</font>

225
00:09:00,800 --> 00:09:04,670
know which of these<font color="#E5E5E5"> signatures was</font>

226
00:09:02,270 --> 00:09:07,810
actually signed<font color="#CCCCCC"> by the given platform so</font>

227
00:09:04,670 --> 00:09:10,459
this breaks<font color="#CCCCCC"> the</font><font color="#E5E5E5"> unlink ability guarantee</font>

228
00:09:07,810 --> 00:09:11,780
so now let us go back<font color="#CCCCCC"> to the first step</font>

229
00:09:10,460 --> 00:09:13,550
of<font color="#E5E5E5"> the attack so</font><font color="#CCCCCC"> we want to have this</font>

230
00:09:11,780 --> 00:09:16,189
side channel information<font color="#E5E5E5"> about the</font>

231
00:09:13,550 --> 00:09:17,569
length<font color="#E5E5E5"> of the nonce R and to do so I'll</font>

232
00:09:16,190 --> 00:09:20,780
give a<font color="#CCCCCC"> little bit</font><font color="#E5E5E5"> of background about</font>

233
00:09:17,570 --> 00:09:22,760
<font color="#E5E5E5">cache attacks so we know we have this</font>

234
00:09:20,780 --> 00:09:26,360
gap between the speed of a processor and

235
00:09:22,760 --> 00:09:27,710
<font color="#E5E5E5">the memory latency</font><font color="#CCCCCC"> and this results</font><font color="#E5E5E5"> in</font>

236
00:09:26,360 --> 00:09:29,660
the<font color="#E5E5E5"> fact that if a processor</font><font color="#CCCCCC"> wants to</font>

237
00:09:27,710 --> 00:09:33,050
access<font color="#E5E5E5"> some data from</font><font color="#CCCCCC"> memory then it has</font>

238
00:09:29,660 --> 00:09:35,540
to<font color="#E5E5E5"> wait and if the processor wants to</font>

239
00:09:33,050 --> 00:09:37,910
access<font color="#CCCCCC"> memory again the same data</font><font color="#E5E5E5"> then</font>

240
00:09:35,540 --> 00:09:39,530
it has to wait again<font color="#E5E5E5"> and so this means</font>

241
00:09:37,910 --> 00:09:41,750
<font color="#E5E5E5">that all the speed that</font><font color="#CCCCCC"> we have in the</font>

242
00:09:39,530 --> 00:09:44,750
processor<font color="#E5E5E5"> is kind of counter balanced</font><font color="#CCCCCC"> by</font>

243
00:09:41,750 --> 00:09:46,400
<font color="#CCCCCC">the fact that</font><font color="#E5E5E5"> we just wait for memory so</font>

244
00:09:44,750 --> 00:09:48,260
to bridge this gap processor designers

245
00:09:46,400 --> 00:09:51,110
<font color="#E5E5E5">introduced</font><font color="#CCCCCC"> the small memory bank which</font>

246
00:09:48,260 --> 00:09:53,240
<font color="#CCCCCC">is called the cache</font><font color="#E5E5E5"> it's located between</font>

247
00:09:51,110 --> 00:09:55,040
the<font color="#E5E5E5"> memory and the processor it's closer</font>

248
00:09:53,240 --> 00:09:57,950
to<font color="#CCCCCC"> the execution core and it also runs</font>

249
00:09:55,040 --> 00:09:59,750
with more expensive<font color="#E5E5E5"> technology so the</font>

250
00:09:57,950 --> 00:10:01,790
cache is going to<font color="#E5E5E5"> divide the memory into</font>

251
00:09:59,750 --> 00:10:03,290
memory line and when the processor wants

252
00:10:01,790 --> 00:10:04,640
<font color="#E5E5E5">to access some data the cache is going</font>

253
00:10:03,290 --> 00:10:06,469
<font color="#E5E5E5">to bring the data to the processor and</font>

254
00:10:04,640 --> 00:10:08,840
<font color="#CCCCCC">also store a copy of this data in the</font>

255
00:10:06,470 --> 00:10:10,670
<font color="#CCCCCC">cache and when the processor wants</font><font color="#E5E5E5"> to</font>

256
00:10:08,840 --> 00:10:13,220
access<font color="#E5E5E5"> this data again it accesses</font>

257
00:10:10,670 --> 00:10:16,610
directly<font color="#E5E5E5"> from the cache which is</font><font color="#CCCCCC"> a much</font>

258
00:10:13,220 --> 00:10:18,230
faster<font color="#CCCCCC"> axis and this behavior</font><font color="#E5E5E5"> is</font>

259
00:10:16,610 --> 00:10:21,260
exploited in an attack which<font color="#CCCCCC"> is called</font>

260
00:10:18,230 --> 00:10:22,790
the<font color="#E5E5E5"> prime and probe attack so we</font><font color="#CCCCCC"> have</font>

261
00:10:21,260 --> 00:10:24,740
the following<font color="#E5E5E5"> setup we have a spy</font><font color="#CCCCCC"> in a</font>

262
00:10:22,790 --> 00:10:26,360
victim and the<font color="#E5E5E5"> spy wants to learn</font>

263
00:10:24,740 --> 00:10:29,900
<font color="#CCCCCC">information about the victims memory</font>

264
00:10:26,360 --> 00:10:31,700
axis<font color="#E5E5E5"> so first of all the spy is going to</font>

265
00:10:29,900 --> 00:10:33,290
allocate<font color="#E5E5E5"> a cache size memory buffer and</font>

266
00:10:31,700 --> 00:10:35,960
then the<font color="#CCCCCC"> spy is going to prime the</font>

267
00:10:33,290 --> 00:10:37,579
caches<font color="#CCCCCC"> it</font><font color="#E5E5E5"> accesses every single</font><font color="#CCCCCC"> memory</font>

268
00:10:35,960 --> 00:10:39,500
line in the buffer bringing the memory

269
00:10:37,580 --> 00:10:45,680
lines to the cache and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the cache is</font>

270
00:10:39,500 --> 00:10:47,660
filled up and now the spy<font color="#CCCCCC"> Waits</font><font color="#E5E5E5"> the spy</font>

271
00:10:45,680 --> 00:10:50,270
waits for the victim<font color="#E5E5E5"> to execute some</font>

272
00:10:47,660 --> 00:10:52,819
code and<font color="#E5E5E5"> when executing some cone the</font>

273
00:10:50,270 --> 00:10:53,270
victim brings some instructions to

274
00:10:52,820 --> 00:10:55,130
memory

275
00:10:53,270 --> 00:10:56,870
now since the cache is full<font color="#CCCCCC"> it has to</font>

276
00:10:55,130 --> 00:11:00,860
evict some of the<font color="#CCCCCC"> spiced data in one of</font>

277
00:10:56,870 --> 00:11:03,500
the cache sets so the victim stops stops

278
00:11:00,860 --> 00:11:04,880
waiting and then what is<font color="#E5E5E5"> it</font><font color="#CCCCCC"> that victim</font>

279
00:11:03,500 --> 00:11:06,320
is<font color="#E5E5E5"> gonna probe the cache and it's going</font>

280
00:11:04,880 --> 00:11:07,910
<font color="#E5E5E5">to measure the time it takes</font><font color="#CCCCCC"> to access</font>

281
00:11:06,320 --> 00:11:11,660
<font color="#E5E5E5">everything</font><font color="#CCCCCC"> or every</font><font color="#E5E5E5"> single</font>

282
00:11:07,910 --> 00:11:13,430
<font color="#CCCCCC">cash</font><font color="#E5E5E5"> sets if the axis is fast that means</font>

283
00:11:11,660 --> 00:11:16,459
that the<font color="#E5E5E5"> spy is accessing directly from</font>

284
00:11:13,430 --> 00:11:18,800
the<font color="#CCCCCC"> cache</font><font color="#E5E5E5"> if the access is slow that</font>

285
00:11:16,460 --> 00:11:20,930
<font color="#E5E5E5">means that the spy is accessing the main</font>

286
00:11:18,800 --> 00:11:22,430
memory<font color="#E5E5E5"> which</font><font color="#CCCCCC"> means that the specific</font>

287
00:11:20,930 --> 00:11:25,939
cache said he's<font color="#CCCCCC"> looking at has been</font>

288
00:11:22,430 --> 00:11:28,250
accessed by the victim<font color="#E5E5E5"> so if we repeat</font>

289
00:11:25,940 --> 00:11:31,430
this<font color="#CCCCCC"> priming</font><font color="#E5E5E5"> probe cycle over time the</font>

290
00:11:28,250 --> 00:11:36,080
<font color="#E5E5E5">spy is able to learn the cache access</font>

291
00:11:31,430 --> 00:11:38,630
behavior of the victim so now going back

292
00:11:36,080 --> 00:11:41,330
<font color="#CCCCCC">to our attack</font><font color="#E5E5E5"> remember that in the</font>

293
00:11:38,630 --> 00:11:44,450
signing algorithm we required computing

294
00:11:41,330 --> 00:11:46,880
this exponentiation<font color="#E5E5E5"> a to the</font><font color="#CCCCCC"> R now the</font>

295
00:11:44,450 --> 00:11:48,200
exponentiation<font color="#CCCCCC"> is using some sort of</font>

296
00:11:46,880 --> 00:11:51,880
variant of the square<font color="#E5E5E5"> and multiply</font>

297
00:11:48,200 --> 00:11:54,500
<font color="#CCCCCC">algorithm with a fixed</font><font color="#E5E5E5"> window length</font>

298
00:11:51,880 --> 00:11:55,850
another information to know is that<font color="#CCCCCC"> in</font>

299
00:11:54,500 --> 00:11:58,910
<font color="#E5E5E5">the coding and clave where the signing</font>

300
00:11:55,850 --> 00:12:01,160
algorithm<font color="#E5E5E5"> takes place the nonce R is</font>

301
00:11:58,910 --> 00:12:06,050
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be recoded with a fixed window</font>

302
00:12:01,160 --> 00:12:08,000
length of<font color="#E5E5E5"> size</font><font color="#CCCCCC"> five so now if we look</font><font color="#E5E5E5"> at</font>

303
00:12:06,050 --> 00:12:09,530
this<font color="#CCCCCC"> Square and</font><font color="#E5E5E5"> multiply sorry there's</font>

304
00:12:08,000 --> 00:12:11,570
killer multiplication algorithm so this

305
00:12:09,530 --> 00:12:13,189
variant of square<font color="#E5E5E5"> and multiply this</font>

306
00:12:11,570 --> 00:12:15,230
algorithm is going<font color="#E5E5E5"> to look at the</font>

307
00:12:13,190 --> 00:12:16,940
recoded representation of the nonce R

308
00:12:15,230 --> 00:12:20,390
from the most significant bit to the

309
00:12:16,940 --> 00:12:22,850
least significant bit for every single

310
00:12:20,390 --> 00:12:24,949
<font color="#E5E5E5">digit it is going to perform W squaring</font>

311
00:12:22,850 --> 00:12:27,200
operations<font color="#E5E5E5"> followed up</font><font color="#CCCCCC"> by a single</font>

312
00:12:24,950 --> 00:12:30,560
multiplication and here<font color="#CCCCCC"> w is</font><font color="#E5E5E5"> equal</font><font color="#CCCCCC"> to</font>

313
00:12:27,200 --> 00:12:31,790
<font color="#E5E5E5">five is the window size</font><font color="#CCCCCC"> so now</font><font color="#E5E5E5"> an</font>

314
00:12:30,560 --> 00:12:33,800
important<font color="#CCCCCC"> thing to notice here is</font><font color="#E5E5E5"> that</font>

315
00:12:31,790 --> 00:12:36,349
<font color="#E5E5E5">everything in the while loop is constant</font>

316
00:12:33,800 --> 00:12:37,939
time<font color="#E5E5E5"> however this algorithm is going to</font>

317
00:12:36,350 --> 00:12:39,530
leak information about the number<font color="#CCCCCC"> of</font>

318
00:12:37,940 --> 00:12:42,800
<font color="#E5E5E5">iterations that is performed in this</font>

319
00:12:39,530 --> 00:12:45,530
<font color="#E5E5E5">algorithm so if we have a scalar of</font>

320
00:12:42,800 --> 00:12:47,270
<font color="#E5E5E5">length 256 for example the recoded</font>

321
00:12:45,530 --> 00:12:49,400
representation of this scalar is going

322
00:12:47,270 --> 00:12:51,980
to have 52 digits<font color="#E5E5E5"> again because we're</font>

323
00:12:49,400 --> 00:12:54,319
using a window of size<font color="#CCCCCC"> 5 and this</font><font color="#E5E5E5"> means</font>

324
00:12:51,980 --> 00:12:56,080
<font color="#CCCCCC">that this this main loop is going</font><font color="#E5E5E5"> to</font>

325
00:12:54,320 --> 00:12:59,690
iterate 51 times

326
00:12:56,080 --> 00:13:01,880
now if bits 256 and 255<font color="#E5E5E5"> of our scalar</font>

327
00:12:59,690 --> 00:13:03,860
are equal to<font color="#E5E5E5"> 0 the recoded</font>

328
00:13:01,880 --> 00:13:06,560
representation of our scalar is<font color="#E5E5E5"> only</font>

329
00:13:03,860 --> 00:13:08,480
<font color="#E5E5E5">going to be of length 51 and so this is</font>

330
00:13:06,560 --> 00:13:10,550
going<font color="#E5E5E5"> to slip is going to iterate only</font>

331
00:13:08,480 --> 00:13:12,560
50 times and if we<font color="#CCCCCC"> continue like this</font>

332
00:13:10,550 --> 00:13:15,319
<font color="#E5E5E5">every time we</font><font color="#CCCCCC"> have a chunk</font><font color="#E5E5E5"> of 5 is equal</font>

333
00:13:12,560 --> 00:13:17,660
<font color="#E5E5E5">to</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> recoded representation of our</font>

334
00:13:15,320 --> 00:13:20,660
nonce has one less digit and<font color="#CCCCCC"> so the loop</font>

335
00:13:17,660 --> 00:13:21,649
iterates<font color="#E5E5E5"> one less time and basically if</font>

336
00:13:20,660 --> 00:13:24,170
<font color="#CCCCCC">we are</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to count</font>

337
00:13:21,649 --> 00:13:26,240
the number<font color="#E5E5E5"> of iterations in this loop of</font>

338
00:13:24,170 --> 00:13:28,670
this algorithm<font color="#CCCCCC"> this gives</font><font color="#E5E5E5"> us information</font>

339
00:13:26,240 --> 00:13:30,319
about<font color="#E5E5E5"> the length of the recoded nonce</font>

340
00:13:28,670 --> 00:13:32,420
which then gives us information about

341
00:13:30,319 --> 00:13:34,368
<font color="#E5E5E5">the most significant bits or the number</font>

342
00:13:32,420 --> 00:13:37,519
of<font color="#E5E5E5"> zeros in our scalar which is the kind</font>

343
00:13:34,369 --> 00:13:39,920
<font color="#CCCCCC">of</font><font color="#E5E5E5"> information</font><font color="#CCCCCC"> we're interested in so</font>

344
00:13:37,519 --> 00:13:42,259
counting loops<font color="#E5E5E5"> this is using this prime</font>

345
00:13:39,920 --> 00:13:44,540
<font color="#E5E5E5">and probe attack that I explained before</font>

346
00:13:42,259 --> 00:13:46,249
so we're modern<font color="#E5E5E5"> monitoring cache access</font>

347
00:13:44,540 --> 00:13:49,300
patterns<font color="#E5E5E5"> during</font><font color="#CCCCCC"> the computation</font><font color="#E5E5E5"> of this</font>

348
00:13:46,249 --> 00:13:52,009
algorithm<font color="#E5E5E5"> we obtain traces of this form</font>

349
00:13:49,300 --> 00:13:54,949
<font color="#E5E5E5">so basically we have a constant pattern</font>

350
00:13:52,009 --> 00:13:56,779
<font color="#E5E5E5">that is separated by Peaks constant</font>

351
00:13:54,949 --> 00:13:59,179
pattern<font color="#E5E5E5"> basically corresponds to</font>

352
00:13:56,779 --> 00:14:01,100
iterations in our algorithm and<font color="#E5E5E5"> counting</font>

353
00:13:59,179 --> 00:14:03,499
the peaks<font color="#E5E5E5"> and this trace will allow us</font>

354
00:14:01,100 --> 00:14:07,189
to<font color="#E5E5E5"> get information about the</font><font color="#CCCCCC"> number of</font>

355
00:14:03,499 --> 00:14:08,749
iterations we have in our algorithm so

356
00:14:07,189 --> 00:14:10,699
we<font color="#CCCCCC"> obtain traces of</font><font color="#E5E5E5"> this form this is</font>

357
00:14:08,749 --> 00:14:15,740
<font color="#E5E5E5">just an example here if we</font><font color="#CCCCCC"> look at the</font>

358
00:14:10,699 --> 00:14:17,628
blue part we can count 48 traces 48

359
00:14:15,740 --> 00:14:21,079
Peaks sorry<font color="#E5E5E5"> and this means that our</font>

360
00:14:17,629 --> 00:14:27,009
algorithm has 48 computed I mean

361
00:14:21,079 --> 00:14:29,359
executed 48 iterations<font color="#CCCCCC"> so now we have</font>

362
00:14:27,009 --> 00:14:32,029
used<font color="#E5E5E5"> the side channel attack to get</font>

363
00:14:29,360 --> 00:14:34,100
information about<font color="#E5E5E5"> the length of the</font>

364
00:14:32,029 --> 00:14:35,990
nonce<font color="#CCCCCC"> R and we want to use this</font>

365
00:14:34,100 --> 00:14:38,540
<font color="#CCCCCC">information</font><font color="#E5E5E5"> in a lattice attack</font><font color="#CCCCCC"> to</font>

366
00:14:35,990 --> 00:14:41,929
recover F so the goal in the end<font color="#E5E5E5"> is to</font>

367
00:14:38,540 --> 00:14:44,179
get the secret key<font color="#E5E5E5"> so remember that we</font>

368
00:14:41,929 --> 00:14:46,550
have this at<font color="#E5E5E5"> the end of the signing</font>

369
00:14:44,179 --> 00:14:50,029
protocol we have<font color="#CCCCCC"> this quantity S which</font>

370
00:14:46,550 --> 00:14:52,008
is<font color="#E5E5E5"> was equal to R plus h times</font><font color="#CCCCCC"> F again H</font>

371
00:14:50,029 --> 00:14:54,740
was the<font color="#E5E5E5"> hash of some</font><font color="#CCCCCC"> public values F is</font>

372
00:14:52,009 --> 00:14:56,240
part of<font color="#E5E5E5"> our secret key now through</font>

373
00:14:54,740 --> 00:14:59,449
outside<font color="#E5E5E5"> channel information we get all</font>

374
00:14:56,240 --> 00:15:04,309
these<font color="#CCCCCC"> samples SH that satisfy this</font>

375
00:14:59,449 --> 00:15:07,040
equality<font color="#E5E5E5"> and if we reorder a little bit</font>

376
00:15:04,309 --> 00:15:11,509
the terms of this equation<font color="#E5E5E5"> we have s</font>

377
00:15:07,040 --> 00:15:14,329
minus HF<font color="#E5E5E5"> which is equal to R now R</font><font color="#CCCCCC"> is</font>

378
00:15:11,509 --> 00:15:16,610
<font color="#E5E5E5">our nonce and we have information about</font>

379
00:15:14,329 --> 00:15:18,589
<font color="#E5E5E5">the number</font><font color="#CCCCCC"> of most significant 0 bits in</font>

380
00:15:16,610 --> 00:15:19,579
this nonce this is what we got from<font color="#E5E5E5"> the</font>

381
00:15:18,589 --> 00:15:22,670
side<font color="#E5E5E5"> channel attack</font>

382
00:15:19,579 --> 00:15:25,069
so since R has a lot of<font color="#E5E5E5"> leading</font><font color="#CCCCCC"> zeros or</font>

383
00:15:22,670 --> 00:15:27,709
<font color="#E5E5E5">we know how many leading</font><font color="#CCCCCC"> 0 it has it's</font>

384
00:15:25,069 --> 00:15:30,139
small<font color="#CCCCCC"> and so the length of R is actually</font>

385
00:15:27,709 --> 00:15:32,899
<font color="#E5E5E5">upper bounded by P which</font><font color="#CCCCCC"> is the prime</font>

386
00:15:30,139 --> 00:15:35,660
divided by<font color="#E5E5E5"> 2 to the L again 2 to the L</font>

387
00:15:32,899 --> 00:15:38,600
is the number<font color="#CCCCCC"> of leading zeroes</font>

388
00:15:35,660 --> 00:15:40,670
so we have s minus<font color="#E5E5E5"> H times F</font><font color="#CCCCCC"> an absolute</font>

389
00:15:38,600 --> 00:15:43,580
<font color="#E5E5E5">value which is smaller than P to the</font><font color="#CCCCCC"> two</font>

390
00:15:40,670 --> 00:15:46,189
<font color="#E5E5E5">TL divided by 2 to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> L sorry and so</font>

391
00:15:43,580 --> 00:15:47,720
this is exactly the<font color="#E5E5E5"> set up that</font><font color="#CCCCCC"> we can</font>

392
00:15:46,190 --> 00:15:49,820
that<font color="#E5E5E5"> we have if we want to use the</font>

393
00:15:47,720 --> 00:15:52,160
hidden<font color="#E5E5E5"> number problem so the hidden</font>

394
00:15:49,820 --> 00:15:54,110
<font color="#E5E5E5">number problem is this algorithm which</font>

395
00:15:52,160 --> 00:15:56,270
allows us to<font color="#E5E5E5"> recover some secret under</font>

396
00:15:54,110 --> 00:15:58,420
some assumptions<font color="#E5E5E5"> in polynomial time with</font>

397
00:15:56,270 --> 00:16:00,949
some probability<font color="#CCCCCC"> greater than</font><font color="#E5E5E5"> 1/2 and</font>

398
00:15:58,420 --> 00:16:03,020
this equation<font color="#CCCCCC"> gives us this</font><font color="#E5E5E5"> inequality</font>

399
00:16:00,950 --> 00:16:04,940
sorry gives us the assumption that we

400
00:16:03,020 --> 00:16:06,650
need to use this algorithm<font color="#E5E5E5"> and so the</font>

401
00:16:04,940 --> 00:16:09,560
hidden<font color="#E5E5E5"> number problem using lattices</font><font color="#CCCCCC"> a</font>

402
00:16:06,650 --> 00:16:14,480
what we will use<font color="#E5E5E5"> to recover F which is</font>

403
00:16:09,560 --> 00:16:17,750
<font color="#E5E5E5">the secret we want</font><font color="#CCCCCC"> to learn so now in</font>

404
00:16:14,480 --> 00:16:20,180
our experiments<font color="#CCCCCC"> we have a</font><font color="#E5E5E5"> few numbers</font>

405
00:16:17,750 --> 00:16:23,120
that I can<font color="#CCCCCC"> show you</font><font color="#E5E5E5"> so basically it</font>

406
00:16:20,180 --> 00:16:25,699
required approximately a little<font color="#CCCCCC"> less</font>

407
00:16:23,120 --> 00:16:28,460
than<font color="#CCCCCC"> 8,000 signatures to recover the</font>

408
00:16:25,700 --> 00:16:31,880
full key so it is<font color="#E5E5E5"> possible to</font><font color="#CCCCCC"> use some</font>

409
00:16:28,460 --> 00:16:33,770
<font color="#CCCCCC">trade-offs</font><font color="#E5E5E5"> in order to reduce the</font>

410
00:16:31,880 --> 00:16:35,240
<font color="#E5E5E5">sampling time</font><font color="#CCCCCC"> this is all explained in</font>

411
00:16:33,770 --> 00:16:37,520
<font color="#E5E5E5">the paper I don't</font><font color="#CCCCCC"> have a lot of time</font>

412
00:16:35,240 --> 00:16:39,500
here<font color="#CCCCCC"> to talk about this but basically we</font>

413
00:16:37,520 --> 00:16:41,600
<font color="#E5E5E5">can</font><font color="#CCCCCC"> use loops of different</font><font color="#E5E5E5"> lengths in</font>

414
00:16:39,500 --> 00:16:43,010
order<font color="#E5E5E5"> to reduce the sampling sizes some</font>

415
00:16:41,600 --> 00:16:46,100
signatures are easier<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find than</font>

416
00:16:43,010 --> 00:16:48,730
others and in the end<font color="#E5E5E5"> adding some manual</font>

417
00:16:46,100 --> 00:16:51,800
<font color="#CCCCCC">inspection to this</font><font color="#E5E5E5"> a little less than</font>

418
00:16:48,730 --> 00:16:56,810
<font color="#E5E5E5">7500 the signatures were required</font><font color="#CCCCCC"> to</font>

419
00:16:51,800 --> 00:17:01,370
recover the full key so finally we're

420
00:16:56,810 --> 00:17:02,930
happy<font color="#E5E5E5"> we have F or an attacker has F now</font>

421
00:17:01,370 --> 00:17:04,430
as I mentioned in<font color="#CCCCCC"> the beginning</font><font color="#E5E5E5"> this</font>

422
00:17:02,930 --> 00:17:08,329
attack has some limitations because

423
00:17:04,430 --> 00:17:10,640
<font color="#CCCCCC">intel encrypts</font><font color="#E5E5E5"> the attestation quotes so</font>

424
00:17:08,329 --> 00:17:12,109
there's no way<font color="#E5E5E5"> for a client</font><font color="#CCCCCC"> to decrypt</font>

425
00:17:10,640 --> 00:17:14,870
these attestation quotes so this attack

426
00:17:12,109 --> 00:17:18,530
<font color="#CCCCCC">can only be run by Intel</font><font color="#E5E5E5"> because</font>

427
00:17:14,869 --> 00:17:20,179
<font color="#CCCCCC">everything's encrypted</font><font color="#E5E5E5"> so a malicious</font>

428
00:17:18,530 --> 00:17:24,200
Intel<font color="#E5E5E5"> though can break the unlink</font>

429
00:17:20,180 --> 00:17:30,410
ability<font color="#E5E5E5"> guarantee of this protocol which</font>

430
00:17:24,200 --> 00:17:33,640
<font color="#CCCCCC">is still interesting thank you thank you</font>

431
00:17:30,410 --> 00:17:36,350
very<font color="#E5E5E5"> much so I think we'll have time</font>

432
00:17:33,640 --> 00:17:40,970
just<font color="#E5E5E5"> for a question or</font><font color="#CCCCCC"> two if there's</font>

433
00:17:36,350 --> 00:17:43,100
any if not I had a quick<font color="#E5E5E5"> question so I'm</font>

434
00:17:40,970 --> 00:17:45,170
not<font color="#CCCCCC"> very familiar with the SGX where's</font>

435
00:17:43,100 --> 00:17:49,139
this found is this in<font color="#E5E5E5"> all sort of Intel</font>

436
00:17:45,170 --> 00:17:59,750
products<font color="#E5E5E5"> or what's the applicability yes</font>

437
00:17:49,140 --> 00:18:07,470
found in most intelligent<font color="#E5E5E5"> meantime</font>

438
00:17:59,750 --> 00:18:09,360
question yeah your product<font color="#CCCCCC"> uses a</font>

439
00:18:07,470 --> 00:18:12,900
windowing method have you also looked

440
00:18:09,360 --> 00:18:16,830
<font color="#CCCCCC">into whether the</font><font color="#E5E5E5"> prime improper tech is</font>

441
00:18:12,900 --> 00:18:18,450
also capable of seeing<font color="#E5E5E5"> which one which</font>

442
00:18:16,830 --> 00:18:21,689
one<font color="#CCCCCC"> of the pre computed values is</font>

443
00:18:18,450 --> 00:18:36,270
accessed so you can could recover the

444
00:18:21,690 --> 00:18:37,800
key directly a<font color="#E5E5E5"> follow-up question</font>

445
00:18:36,270 --> 00:18:40,230
<font color="#E5E5E5">actually I had quickly how much</font>

446
00:18:37,800 --> 00:18:41,040
information<font color="#CCCCCC"> was available on the</font><font color="#E5E5E5"> like</font>

447
00:18:40,230 --> 00:18:44,250
how<font color="#E5E5E5"> much did you have to reverse</font>

448
00:18:41,040 --> 00:18:46,610
<font color="#E5E5E5">engineer of the firmware or anything</font>

449
00:18:44,250 --> 00:18:49,770
<font color="#E5E5E5">like that or is</font><font color="#CCCCCC"> there public information</font>

450
00:18:46,610 --> 00:18:52,320
the code is public<font color="#CCCCCC"> sjx code is public so</font>

451
00:18:49,770 --> 00:18:54,330
we can look<font color="#E5E5E5"> at it and use it in decoding</font>

452
00:18:52,320 --> 00:18:55,679
<font color="#E5E5E5">mode</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> you know for example so the</font>

453
00:18:54,330 --> 00:18:57,750
reason why we were<font color="#CCCCCC"> able to run</font><font color="#E5E5E5"> the</font>

454
00:18:55,680 --> 00:19:00,720
<font color="#E5E5E5">attack is because we can look at the</font>

455
00:18:57,750 --> 00:19:02,430
code<font color="#E5E5E5"> change the public key you know and</font>

456
00:19:00,720 --> 00:19:06,750
so<font color="#E5E5E5"> actually run the attack otherwise we</font>

457
00:19:02,430 --> 00:19:10,950
couldn't as I just mentioned<font color="#E5E5E5"> any other</font>

458
00:19:06,750 --> 00:19:12,270
questions from the<font color="#E5E5E5"> audience if not well</font>

459
00:19:10,950 --> 00:19:16,680
thank you very<font color="#CCCCCC"> much thank the speaker</font>

460
00:19:12,270 --> 00:19:18,870
game<font color="#E5E5E5"> and there are a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> free seats</font>

461
00:19:16,680 --> 00:19:20,610
in the<font color="#E5E5E5"> front here so at</font><font color="#CCCCCC"> least as</font><font color="#E5E5E5"> many</font>

462
00:19:18,870 --> 00:19:23,310
people as I see standing<font color="#E5E5E5"> could be</font>

463
00:19:20,610 --> 00:19:25,469
sitting if not will force everyone to<font color="#E5E5E5"> do</font>

464
00:19:23,310 --> 00:19:29,010
a defrag and<font color="#CCCCCC"> it's much easier to just</font>

465
00:19:25,470 --> 00:19:32,060
sit in<font color="#E5E5E5"> the front here</font><font color="#CCCCCC"> but with that</font>

466
00:19:29,010 --> 00:19:32,060
<font color="#E5E5E5">we'll switch</font>

