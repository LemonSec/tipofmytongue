1
00:00:04,609 --> 00:00:09,269
<font color="#E5E5E5">so the next talk is again on FPGA</font>

2
00:00:07,230 --> 00:00:12,059
implementation this time for swings<font color="#CCCCCC"> to</font>

3
00:00:09,269 --> 00:00:15,809
<font color="#CCCCCC">56 this joint work between Darin</font><font color="#E5E5E5"> Emmett</font>

4
00:00:12,059 --> 00:00:23,789
<font color="#CCCCCC">Andrea screw Liga poets binden</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Doran</font>

5
00:00:15,809 --> 00:00:26,359
is giving the talk<font color="#E5E5E5"> okay thank you</font><font color="#CCCCCC"> for</font>

6
00:00:23,789 --> 00:00:29,939
<font color="#E5E5E5">the introduction and welcome to my talk</font>

7
00:00:26,359 --> 00:00:32,910
<font color="#E5E5E5">so we all know that clock is ticking and</font>

8
00:00:29,939 --> 00:00:35,640
as soon<font color="#E5E5E5"> as the hardware is build enough</font>

9
00:00:32,910 --> 00:00:39,809
and<font color="#E5E5E5"> ready it will break today's public</font>

10
00:00:35,640 --> 00:00:42,360
<font color="#E5E5E5">key encryption signing so which is based</font>

11
00:00:39,809 --> 00:00:45,870
on RSA and I<font color="#E5E5E5"> click curve cryptography</font>

12
00:00:42,360 --> 00:00:47,940
<font color="#CCCCCC">the good thing</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that at least hash</font>

13
00:00:45,870 --> 00:00:52,500
functions will stay alive<font color="#CCCCCC"> although they</font>

14
00:00:47,940 --> 00:00:55,230
<font color="#CCCCCC">lose a few bits in security rather</font><font color="#E5E5E5"> I</font>

15
00:00:52,500 --> 00:00:58,710
will<font color="#E5E5E5"> talk today is make a short</font>

16
00:00:55,230 --> 00:01:01,050
introduction<font color="#E5E5E5"> about hash based signatures</font>

17
00:00:58,710 --> 00:01:04,589
<font color="#E5E5E5">so this talk is all only about</font>

18
00:01:01,050 --> 00:01:07,830
signatures<font color="#E5E5E5"> and then I show the key ideas</font>

19
00:01:04,589 --> 00:01:10,590
of my<font color="#CCCCCC"> implementation about it</font><font color="#E5E5E5"> Sphinx 256</font>

20
00:01:07,830 --> 00:01:14,490
<font color="#E5E5E5">and I have some new</font><font color="#CCCCCC"> results about the</font>

21
00:01:10,590 --> 00:01:19,799
<font color="#CCCCCC">swings Plus which is</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the team in</font>

22
00:01:14,490 --> 00:01:23,369
the NIST<font color="#E5E5E5"> post quantum competition so</font>

23
00:01:19,799 --> 00:01:26,970
post quantum signature algorithm enables

24
00:01:23,369 --> 00:01:30,210
signal signing<font color="#E5E5E5"> even when the time of</font>

25
00:01:26,970 --> 00:01:34,289
quantum computer<font color="#E5E5E5"> is arrived there are</font>

26
00:01:30,210 --> 00:01:36,210
several approach for post quantum signal

27
00:01:34,290 --> 00:01:39,170
signing there is also this website which

28
00:01:36,210 --> 00:01:41,579
we hear from the post quantum<font color="#CCCCCC"> SU and</font>

29
00:01:39,170 --> 00:01:44,460
there are this lattice faced call space

30
00:01:41,579 --> 00:01:49,079
and so<font color="#CCCCCC"> on but whenever</font><font color="#E5E5E5"> we do signature</font>

31
00:01:44,460 --> 00:01:52,408
<font color="#E5E5E5">we rely always or on hash function</font>

32
00:01:49,079 --> 00:01:55,258
because line<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> of almost all signature</font>

33
00:01:52,409 --> 00:01:59,340
schemes have take<font color="#E5E5E5"> the hash from biggest</font>

34
00:01:55,259 --> 00:02:01,380
so they all lie on<font color="#E5E5E5"> the security</font><font color="#CCCCCC"> of</font>

35
00:01:59,340 --> 00:02:05,280
breaking the hash function<font color="#CCCCCC"> and hash</font>

36
00:02:01,380 --> 00:02:08,750
based signing algorithms just only<font color="#E5E5E5"> rely</font>

37
00:02:05,280 --> 00:02:11,910
on<font color="#E5E5E5"> the security</font><font color="#CCCCCC"> of the hash functions</font>

38
00:02:08,750 --> 00:02:13,680
so hash<font color="#E5E5E5"> bison regimes are just the most</font>

39
00:02:11,910 --> 00:02:17,069
conservative

40
00:02:13,680 --> 00:02:20,819
in this case<font color="#E5E5E5"> because we are rely only on</font>

41
00:02:17,069 --> 00:02:23,609
the hash function<font color="#E5E5E5"> nothing else so let's</font>

42
00:02:20,819 --> 00:02:25,379
<font color="#E5E5E5">go back</font><font color="#CCCCCC"> to the 19 I don't know seventies</font>

43
00:02:23,610 --> 00:02:29,310
eighties<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> Lampert one-time</font>

44
00:02:25,379 --> 00:02:33,268
<font color="#CCCCCC">signature scheme I make an example just</font>

45
00:02:29,310 --> 00:02:36,959
<font color="#E5E5E5">for 256-bit security and we have all</font>

46
00:02:33,269 --> 00:02:40,319
parameters are just 256-bit lungs the

47
00:02:36,959 --> 00:02:45,810
first thing we need<font color="#E5E5E5"> is 512 random</font>

48
00:02:40,319 --> 00:02:48,530
<font color="#E5E5E5">numbers which are unpredictable and for</font>

49
00:02:45,810 --> 00:02:51,290
all random number we calculate<font color="#E5E5E5"> its hash</font>

50
00:02:48,530 --> 00:02:56,010
geeks are the<font color="#E5E5E5"> random number and write</font>

51
00:02:51,290 --> 00:02:58,828
<font color="#CCCCCC">corresponding hash of x and</font><font color="#E5E5E5"> although ice</font>

52
00:02:56,010 --> 00:03:03,689
is now our public key which we can

53
00:02:58,829 --> 00:03:07,099
publish<font color="#E5E5E5"> and</font><font color="#CCCCCC"> now if we</font><font color="#E5E5E5"> sign we take the</font>

54
00:03:03,689 --> 00:03:09,769
first line as all hash algorithm we

55
00:03:07,099 --> 00:03:13,828
calculate the deist of the message<font color="#E5E5E5"> and</font>

56
00:03:09,769 --> 00:03:19,019
then have a look at the bits<font color="#E5E5E5"> and for all</font>

57
00:03:13,829 --> 00:03:22,169
<font color="#CCCCCC">bits</font><font color="#E5E5E5"> if the biggest bit zero is a zero I</font>

58
00:03:19,019 --> 00:03:24,989
take the X<font color="#CCCCCC"> zero zero</font><font color="#E5E5E5"> the next one</font><font color="#CCCCCC"> or</font>

59
00:03:22,169 --> 00:03:27,660
it's a<font color="#E5E5E5"> one so I take the</font><font color="#CCCCCC"> 1 and so on</font><font color="#E5E5E5"> and</font>

60
00:03:24,989 --> 00:03:30,690
go all this<font color="#E5E5E5"> through and give this 256</font>

61
00:03:27,660 --> 00:03:34,260
random number in my<font color="#E5E5E5"> signature so a</font>

62
00:03:30,690 --> 00:03:37,799
verifier<font color="#CCCCCC"> which get the</font><font color="#E5E5E5"> signature can now</font>

63
00:03:34,260 --> 00:03:40,918
calculate the the<font color="#CCCCCC"> biggest as well and</font>

64
00:03:37,799 --> 00:03:44,459
then check if X<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> is URI</font><font color="#CCCCCC"> correspondent</font>

65
00:03:40,919 --> 00:03:48,239
and take the hash<font color="#CCCCCC"> it's gets y 0</font><font color="#E5E5E5"> 0 and so</font>

66
00:03:44,459 --> 00:03:53,099
on<font color="#E5E5E5"> so and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> simply the base idea</font>

67
00:03:48,239 --> 00:03:55,019
of this hash based signature<font color="#E5E5E5"> schemes</font><font color="#CCCCCC"> the</font>

68
00:03:53,099 --> 00:03:58,290
problem here is that we can only<font color="#E5E5E5"> use</font>

69
00:03:55,019 --> 00:04:00,690
such a<font color="#CCCCCC"> big key pair once</font><font color="#E5E5E5"> because let's</font>

70
00:03:58,290 --> 00:04:04,108
imagine we I make a second<font color="#E5E5E5"> signature</font>

71
00:04:00,690 --> 00:04:06,930
<font color="#E5E5E5">they have already</font><font color="#CCCCCC"> 75% of my signature</font>

72
00:04:04,109 --> 00:04:09,569
random numbers are then in public domain

73
00:04:06,930 --> 00:04:12,419
<font color="#E5E5E5">and in other words you may find biggest</font>

74
00:04:09,569 --> 00:04:13,679
which correspondent<font color="#E5E5E5"> - yeah - to do the</font>

75
00:04:12,419 --> 00:04:19,340
<font color="#E5E5E5">random numbers which are already</font><font color="#CCCCCC"> in</font>

76
00:04:13,680 --> 00:04:25,080
public so now it's<font color="#E5E5E5"> my time step</font><font color="#CCCCCC"> to the</font>

77
00:04:19,339 --> 00:04:27,539
closer and this team<font color="#CCCCCC"> has been introduced</font>

78
00:04:25,080 --> 00:04:32,300
a<font color="#E5E5E5"> little bit so that instead of</font>

79
00:04:27,540 --> 00:04:35,370
we need<font color="#CCCCCC"> 512</font><font color="#E5E5E5"> random numbers we</font><font color="#CCCCCC"> just need</font>

80
00:04:32,300 --> 00:04:39,360
much less<font color="#E5E5E5"> and we can sign more than one</font>

81
00:04:35,370 --> 00:04:41,430
<font color="#E5E5E5">beat per</font><font color="#CCCCCC"> per random number it</font><font color="#E5E5E5"> is paid</font>

82
00:04:39,360 --> 00:04:45,480
with a bit<font color="#E5E5E5"> more computation time but it</font>

83
00:04:41,430 --> 00:04:51,210
<font color="#E5E5E5">really shrinks the key</font><font color="#CCCCCC"> sizes and more</font>

84
00:04:45,480 --> 00:04:54,450
important<font color="#CCCCCC"> signature sizes so what we</font>

85
00:04:51,210 --> 00:04:56,549
have so far<font color="#E5E5E5"> is a secure signing system</font>

86
00:04:54,450 --> 00:05:00,650
which is<font color="#E5E5E5"> quite fast because it's our</font>

87
00:04:56,550 --> 00:05:02,700
only hash calls for a small input and

88
00:05:00,650 --> 00:05:05,969
what we still can only make one

89
00:05:02,700 --> 00:05:09,090
signature<font color="#E5E5E5"> per</font><font color="#CCCCCC"> keeper</font><font color="#E5E5E5"> so then we come to</font>

90
00:05:05,970 --> 00:05:12,510
<font color="#E5E5E5">the</font><font color="#CCCCCC"> idea of Merkle trees where we just</font>

91
00:05:09,090 --> 00:05:15,900
<font color="#E5E5E5">put some key pairs together disorder as</font>

92
00:05:12,510 --> 00:05:19,140
example for<font color="#CCCCCC"> four key pairs</font><font color="#E5E5E5"> we have X&Y</font>

93
00:05:15,900 --> 00:05:22,739
exist<font color="#CCCCCC"> a secret tree with the</font>

94
00:05:19,140 --> 00:05:26,400
corresponding public key and let's take

95
00:05:22,740 --> 00:05:28,830
just<font color="#CCCCCC"> the hash of the public key and then</font>

96
00:05:26,400 --> 00:05:33,330
hash some public keys<font color="#CCCCCC"> together until we</font>

97
00:05:28,830 --> 00:05:37,109
get this structure<font color="#E5E5E5"> here so all the ends</font>

98
00:05:33,330 --> 00:05:39,150
are a function<font color="#E5E5E5"> of the public keys and if</font>

99
00:05:37,110 --> 00:05:43,500
we will now<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to sign with let's say</font>

100
00:05:39,150 --> 00:05:47,190
<font color="#CCCCCC">the key pair too</font><font color="#E5E5E5"> we simply put the</font>

101
00:05:43,500 --> 00:05:51,180
signature<font color="#CCCCCC"> turn</font><font color="#E5E5E5"> the public</font><font color="#CCCCCC"> key and this</font>

102
00:05:47,190 --> 00:05:54,750
<font color="#E5E5E5">to yellow nodes so that the verifier can</font>

103
00:05:51,180 --> 00:05:55,500
verify if it takes the hash of<font color="#CCCCCC"> + -</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> + +</font>

104
00:05:54,750 --> 00:05:59,310
<font color="#E5E5E5">3 0</font>

105
00:05:55,500 --> 00:06:05,100
<font color="#E5E5E5">it gets</font><font color="#CCCCCC"> n1</font><font color="#E5E5E5"> 1 and if we take the upper</font>

106
00:05:59,310 --> 00:06:07,440
layer<font color="#CCCCCC"> and 0 1 and NC 1 1 then he should</font>

107
00:06:05,100 --> 00:06:10,140
get<font color="#E5E5E5"> the top node and so he can check if</font>

108
00:06:07,440 --> 00:06:13,080
the public key from<font color="#E5E5E5"> the one time</font>

109
00:06:10,140 --> 00:06:16,800
signature<font color="#CCCCCC"> is correct</font><font color="#E5E5E5"> and can therefore</font>

110
00:06:13,080 --> 00:06:22,609
all also verify if the whole signature

111
00:06:16,800 --> 00:06:27,000
<font color="#E5E5E5">is correct but we still have a problem</font>

112
00:06:22,610 --> 00:06:31,260
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a list where we write</font>

113
00:06:27,000 --> 00:06:34,770
which private keys which key pairs in

114
00:06:31,260 --> 00:06:37,530
the in the<font color="#E5E5E5"> notes did we already use so</font>

115
00:06:34,770 --> 00:06:38,909
because if we have I<font color="#E5E5E5"> don't know crash or</font>

116
00:06:37,530 --> 00:06:40,888
something<font color="#E5E5E5"> of our system</font><font color="#CCCCCC"> we have to</font>

117
00:06:38,910 --> 00:06:43,740
<font color="#CCCCCC">ensure that it's</font><font color="#E5E5E5"> not start</font>

118
00:06:40,889 --> 00:06:46,710
the beginning<font color="#E5E5E5"> was from the keeper one if</font>

119
00:06:43,740 --> 00:06:48,810
you already used it<font color="#E5E5E5"> so it's kind of</font>

120
00:06:46,710 --> 00:06:51,590
problem and<font color="#E5E5E5"> it's called the</font><font color="#CCCCCC"> state-based</font>

121
00:06:48,810 --> 00:06:55,439
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is a criticism of hash by Singham</font>

122
00:06:51,590 --> 00:06:57,929
and now this is<font color="#E5E5E5"> where the</font><font color="#CCCCCC"> Sphinx</font><font color="#E5E5E5"> came in</font>

123
00:06:55,439 --> 00:07:00,590
<font color="#CCCCCC">just</font><font color="#E5E5E5"> think this is</font><font color="#CCCCCC"> a group published in</font>

124
00:06:57,930 --> 00:07:04,110
<font color="#E5E5E5">2015 the</font><font color="#CCCCCC"> group were</font><font color="#E5E5E5"> on the wrestling and</font>

125
00:07:00,590 --> 00:07:06,888
so the<font color="#E5E5E5"> basic idea</font><font color="#CCCCCC"> is make the the Merkel</font>

126
00:07:04,110 --> 00:07:10,319
<font color="#CCCCCC">Terry just</font><font color="#E5E5E5"> very big so that</font><font color="#CCCCCC"> we can</font>

127
00:07:06,889 --> 00:07:14,430
choose<font color="#CCCCCC"> a random start point and then we</font>

128
00:07:10,319 --> 00:07:16,710
<font color="#E5E5E5">don't have to make this list the a big</font>

129
00:07:14,430 --> 00:07:18,629
big tree needs a lot of competition

130
00:07:16,710 --> 00:07:21,539
<font color="#CCCCCC">because to calculate the public key we</font>

131
00:07:18,629 --> 00:07:24,229
<font color="#CCCCCC">have to calculate the whole tree so the</font>

132
00:07:21,539 --> 00:07:28,529
second<font color="#E5E5E5"> idea is that they break this</font>

133
00:07:24,229 --> 00:07:30,930
whole tree in small sub trees and every

134
00:07:28,529 --> 00:07:33,180
sub tree kind<font color="#E5E5E5"> of signs the previous</font>

135
00:07:30,930 --> 00:07:37,169
public key and so we can build a really

136
00:07:33,180 --> 00:07:39,749
huge tree with less<font color="#E5E5E5"> processing power</font>

137
00:07:37,169 --> 00:07:42,779
than if you like one big tree and the

138
00:07:39,749 --> 00:07:45,839
<font color="#CCCCCC">first</font><font color="#E5E5E5"> thing is that in the very lowest</font>

139
00:07:42,779 --> 00:07:48,839
<font color="#E5E5E5">level</font><font color="#CCCCCC"> there were</font><font color="#E5E5E5"> really sign our message</font>

140
00:07:45,839 --> 00:07:53,129
we add some security margin<font color="#E5E5E5"> that if we</font>

141
00:07:48,839 --> 00:07:56,460
take<font color="#E5E5E5"> the same note twice in because we</font>

142
00:07:53,129 --> 00:07:58,649
choose it<font color="#E5E5E5"> random it's not broken yet so</font>

143
00:07:56,460 --> 00:08:03,349
we can have a few things<font color="#E5E5E5"> it's on the</font>

144
00:07:58,649 --> 00:08:06,419
same starting point and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

145
00:08:03,349 --> 00:08:10,520
picture<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> things for the</font><font color="#CCCCCC"> dice</font>

146
00:08:06,419 --> 00:08:10,520
<font color="#CCCCCC">which I</font><font color="#E5E5E5"> still from the otras thank you</font>

147
00:08:11,000 --> 00:08:18,149
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> this is about the</font><font color="#CCCCCC"> theme of things</font>

148
00:08:14,430 --> 00:08:22,020
and what I did is I took<font color="#CCCCCC"> the</font><font color="#E5E5E5"> algorithm</font>

149
00:08:18,149 --> 00:08:26,879
and put it on an FPGA so I started with

150
00:08:22,020 --> 00:08:29,068
counting how much processing<font color="#E5E5E5"> do I really</font>

151
00:08:26,879 --> 00:08:32,250
need so<font color="#E5E5E5"> this order what you see here are</font>

152
00:08:29,069 --> 00:08:35,550
the functions and it's mainly the<font color="#CCCCCC"> chacha</font>

153
00:08:32,250 --> 00:08:41,729
<font color="#E5E5E5">permutation and</font><font color="#CCCCCC"> ChaCha</font><font color="#E5E5E5"> 12 which have to</font>

154
00:08:35,549 --> 00:08:44,039
<font color="#E5E5E5">be processed a lot of times and this is</font>

155
00:08:41,729 --> 00:08:47,970
<font color="#CCCCCC">also the basic idea for</font><font color="#E5E5E5"> my hardware it's</font>

156
00:08:44,039 --> 00:08:50,579
simply if<font color="#E5E5E5"> I have a very fast calculation</font>

157
00:08:47,970 --> 00:08:55,050
for this<font color="#E5E5E5"> Chacho permutation</font><font color="#CCCCCC"> I have a</font>

158
00:08:50,579 --> 00:08:59,459
fast<font color="#CCCCCC"> signing implementation this leads</font>

159
00:08:55,050 --> 00:09:02,490
this architecture<font color="#E5E5E5"> in the center is the</font>

160
00:08:59,459 --> 00:09:04,199
<font color="#CCCCCC">cha cha 12 which can count which can</font>

161
00:09:02,490 --> 00:09:07,649
calculate<font color="#CCCCCC"> the P ChaCha and the Chechen</font>

162
00:09:04,200 --> 00:09:10,010
<font color="#CCCCCC">12 instructions and it's a fully</font>

163
00:09:07,649 --> 00:09:14,640
unrolled pipeline so I can give a

164
00:09:10,010 --> 00:09:17,640
message in on the top<font color="#E5E5E5"> and every cycle</font>

165
00:09:14,640 --> 00:09:20,970
<font color="#E5E5E5">and it goes through all stages always</font>

166
00:09:17,640 --> 00:09:23,100
unrolled<font color="#E5E5E5"> that decides the advantage that</font>

167
00:09:20,970 --> 00:09:25,170
<font color="#CCCCCC">there are no</font><font color="#E5E5E5"> marks and boxes for the</font>

168
00:09:23,100 --> 00:09:27,300
rounds<font color="#CCCCCC"> because they're just</font><font color="#E5E5E5"> linear</font>

169
00:09:25,170 --> 00:09:30,660
through and then on the<font color="#CCCCCC"> output I got</font>

170
00:09:27,300 --> 00:09:33,839
always<font color="#CCCCCC"> a</font><font color="#E5E5E5"> result this leads to very high</font>

171
00:09:30,660 --> 00:09:36,630
throughput<font color="#E5E5E5"> in the hash function and the</font>

172
00:09:33,839 --> 00:09:39,060
system<font color="#E5E5E5"> around it's</font><font color="#CCCCCC"> just it's just bill</font>

173
00:09:36,630 --> 00:09:43,550
to<font color="#E5E5E5"> ensure that I can really handle one</font>

174
00:09:39,060 --> 00:09:47,040
input and one<font color="#CCCCCC"> output</font><font color="#E5E5E5"> per clock cycle</font><font color="#CCCCCC"> and</font>

175
00:09:43,550 --> 00:09:51,329
if you do<font color="#CCCCCC"> Hardware implementation side</font>

176
00:09:47,040 --> 00:09:54,060
channels are always a team<font color="#CCCCCC"> what you see</font>

177
00:09:51,329 --> 00:09:56,010
on the left is the<font color="#E5E5E5"> team again with the</font>

178
00:09:54,060 --> 00:10:00,180
<font color="#CCCCCC">poorest which</font><font color="#E5E5E5"> is this view time</font>

179
00:09:56,010 --> 00:10:01,800
<font color="#CCCCCC">signatures team and</font><font color="#E5E5E5"> this 12 trees up</font>

180
00:10:00,180 --> 00:10:06,180
<font color="#CCCCCC">here so this is just a single channel</font>

181
00:10:01,800 --> 00:10:07,949
and what we found so<font color="#CCCCCC"> far is that</font><font color="#E5E5E5"> you can</font>

182
00:10:06,180 --> 00:10:10,500
see and you<font color="#CCCCCC"> know where</font><font color="#E5E5E5"> it is and if you</font>

183
00:10:07,950 --> 00:10:12,750
make you have<font color="#E5E5E5"> closer look on</font><font color="#CCCCCC"> the side</font>

184
00:10:10,500 --> 00:10:14,760
channels you can<font color="#E5E5E5"> find out which starting</font>

185
00:10:12,750 --> 00:10:18,589
point you<font color="#CCCCCC"> choose</font><font color="#E5E5E5"> so the running starting</font>

186
00:10:14,760 --> 00:10:21,660
point but we did not manage<font color="#CCCCCC"> to get any</font>

187
00:10:18,589 --> 00:10:23,610
private bits<font color="#E5E5E5"> because the starting point</font>

188
00:10:21,660 --> 00:10:26,699
is<font color="#CCCCCC"> always in public domain</font><font color="#E5E5E5"> it's part of</font>

189
00:10:23,610 --> 00:10:33,029
<font color="#E5E5E5">the signature and so for the moment we</font>

190
00:10:26,700 --> 00:10:36,500
<font color="#CCCCCC">are safe with</font><font color="#E5E5E5"> our implementation so what</font>

191
00:10:33,029 --> 00:10:40,589
<font color="#E5E5E5">this is not the end</font><font color="#CCCCCC"> because for the nist</font>

192
00:10:36,500 --> 00:10:43,920
<font color="#E5E5E5">not competition the outers made some</font>

193
00:10:40,589 --> 00:10:45,920
changes to<font color="#E5E5E5"> the to the stream it mainly</font>

194
00:10:43,920 --> 00:10:50,910
<font color="#E5E5E5">they changed the hash function</font><font color="#CCCCCC"> to</font>

195
00:10:45,920 --> 00:10:52,890
<font color="#E5E5E5">shastri soshe to shake the Sigler team</font>

196
00:10:50,910 --> 00:10:55,319
in the bottom is a bit<font color="#E5E5E5"> different and</font>

197
00:10:52,890 --> 00:10:59,010
they generate<font color="#CCCCCC"> masks</font><font color="#E5E5E5"> I didn't talk about</font>

198
00:10:55,320 --> 00:11:01,350
<font color="#E5E5E5">masks yet but they were in the keys</font>

199
00:10:59,010 --> 00:11:04,649
<font color="#E5E5E5">before and now they are see there</font><font color="#CCCCCC"> so I</font>

200
00:11:01,350 --> 00:11:07,760
randomly generated<font color="#E5E5E5"> and this just reduces</font>

201
00:11:04,649 --> 00:11:07,760
the key size a bit

202
00:11:08,310 --> 00:11:14,609
compared to<font color="#E5E5E5"> the strings 256 they have</font>

203
00:11:11,130 --> 00:11:19,459
some trade-offs<font color="#CCCCCC"> actually they published</font>

204
00:11:14,610 --> 00:11:23,519
six in sensation<font color="#CCCCCC"> three for every</font>

205
00:11:19,459 --> 00:11:25,859
<font color="#E5E5E5">security level and there is always a</font>

206
00:11:23,519 --> 00:11:28,649
fast version<font color="#CCCCCC"> which the signal is a</font>

207
00:11:25,860 --> 00:11:35,100
little bigger and the small versions

208
00:11:28,649 --> 00:11:38,579
which is also<font color="#E5E5E5"> slower so I took this new</font>

209
00:11:35,100 --> 00:11:40,829
algorithm<font color="#CCCCCC"> and adjusted my</font><font color="#E5E5E5"> implementation</font>

210
00:11:38,579 --> 00:11:42,630
and as you see it always looks the same

211
00:11:40,829 --> 00:11:46,620
<font color="#E5E5E5">than before it's a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more</font>

212
00:11:42,630 --> 00:11:48,930
generic because there are the<font color="#E5E5E5"> different</font>

213
00:11:46,620 --> 00:11:53,100
security<font color="#CCCCCC"> levels and the hash function</font>

214
00:11:48,930 --> 00:11:55,649
changed of course there<font color="#E5E5E5"> are also some</font>

215
00:11:53,100 --> 00:11:58,010
changements in the control unit in the

216
00:11:55,649 --> 00:12:02,149
state<font color="#CCCCCC"> machine but they do not affect</font>

217
00:11:58,010 --> 00:12:06,750
performance<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> implementation a lot</font>

218
00:12:02,149 --> 00:12:09,389
so and here are the<font color="#CCCCCC"> results you can see</font>

219
00:12:06,750 --> 00:12:11,310
on the first view it's especially

220
00:12:09,389 --> 00:12:16,800
<font color="#E5E5E5">compared to the presentation before it's</font>

221
00:12:11,310 --> 00:12:19,979
<font color="#E5E5E5">quite big</font><font color="#CCCCCC"> but it's easy to get a high</font>

222
00:12:16,800 --> 00:12:22,500
frequency<font color="#CCCCCC"> on the hash function because</font>

223
00:12:19,980 --> 00:12:26,430
as you may know from<font color="#E5E5E5"> the shower</font>

224
00:12:22,500 --> 00:12:28,290
competition especially<font color="#CCCCCC"> shower three is</font>

225
00:12:26,430 --> 00:12:30,329
<font color="#E5E5E5">very good for</font><font color="#CCCCCC"> Hardware implementation</font>

226
00:12:28,290 --> 00:12:32,099
and we get a high<font color="#E5E5E5"> throughput</font><font color="#CCCCCC"> there are</font>

227
00:12:30,329 --> 00:12:37,890
no additions<font color="#CCCCCC"> are so it'll just come in</font>

228
00:12:32,100 --> 00:12:42,300
at Oriel<font color="#E5E5E5"> for settings and this is really</font>

229
00:12:37,890 --> 00:12:45,029
good for hardware<font color="#CCCCCC"> our latency</font><font color="#E5E5E5"> is in the</font>

230
00:12:42,300 --> 00:12:49,099
<font color="#CCCCCC">is in</font><font color="#E5E5E5"> milliseconds which is</font><font color="#CCCCCC"> maybe</font>

231
00:12:45,029 --> 00:12:54,140
<font color="#E5E5E5">comparable to some RSA implementations</font>

232
00:12:49,100 --> 00:12:56,670
but<font color="#E5E5E5"> they are quite big</font><font color="#CCCCCC"> but it's not</font><font color="#E5E5E5"> huge</font>

233
00:12:54,140 --> 00:12:59,610
so let's see it this way here<font color="#E5E5E5"> you see</font>

234
00:12:56,670 --> 00:13:01,949
<font color="#CCCCCC">these red hearts</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is I love</font><font color="#E5E5E5"> FPGAs</font>

235
00:12:59,610 --> 00:13:05,250
and<font color="#CCCCCC"> this is right</font><font color="#E5E5E5"> for this</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> and the</font>

236
00:13:01,949 --> 00:13:08,430
blue dots<font color="#CCCCCC"> are the performance result of</font>

237
00:13:05,250 --> 00:13:10,769
the<font color="#CCCCCC"> outers for Sphinx Plus which is in</font>

238
00:13:08,430 --> 00:13:12,870
the<font color="#E5E5E5"> nist competitions and they have a</font>

239
00:13:10,769 --> 00:13:15,180
second in sensation<font color="#CCCCCC"> with the horrorcore</font>

240
00:13:12,870 --> 00:13:20,100
<font color="#CCCCCC">hash function</font><font color="#E5E5E5"> where they have an</font>

241
00:13:15,180 --> 00:13:21,810
accelerator on their processor and the

242
00:13:20,100 --> 00:13:24,270
blue to green<font color="#E5E5E5"> compare</font>

243
00:13:21,810 --> 00:13:27,719
is more or<font color="#CCCCCC"> less a factor of 10</font><font color="#E5E5E5"> in speed</font>

244
00:13:24,270 --> 00:13:30,290
and compared<font color="#E5E5E5"> to my FPGA implementation I</font>

245
00:13:27,720 --> 00:13:32,580
got more than<font color="#CCCCCC"> a factor</font><font color="#E5E5E5"> 10 again so</font>

246
00:13:30,290 --> 00:13:34,620
compared<font color="#E5E5E5"> to only the processor without</font>

247
00:13:32,580 --> 00:13:40,290
acceleration<font color="#CCCCCC"> I'm more than 100 times</font>

248
00:13:34,620 --> 00:13:42,750
faster<font color="#E5E5E5"> an interesting side note here is</font>

249
00:13:40,290 --> 00:13:47,219
that<font color="#E5E5E5"> these things 256 which is the red</font>

250
00:13:42,750 --> 00:13:49,380
one performs quite well compared to the

251
00:13:47,220 --> 00:13:51,740
Sphinx<font color="#CCCCCC"> Plus which is</font><font color="#E5E5E5"> now at in</font><font color="#CCCCCC"> its</font>

252
00:13:49,380 --> 00:13:51,740
competition

253
00:13:52,520 --> 00:14:01,500
so to summarize<font color="#CCCCCC"> I think it's the first</font>

254
00:13:58,710 --> 00:14:07,290
<font color="#CCCCCC">implementation of Sphinx</font><font color="#E5E5E5"> I have not seen</font>

255
00:14:01,500 --> 00:14:09,000
any other published<font color="#CCCCCC"> I have got six</font>

256
00:14:07,290 --> 00:14:11,160
<font color="#E5E5E5">hundred</font><font color="#CCCCCC"> signature preparation if I have</font>

257
00:14:09,000 --> 00:14:13,260
one<font color="#E5E5E5"> instance on an FPGA it's a</font><font color="#CCCCCC"> chronic</font>

258
00:14:11,160 --> 00:14:18,569
<font color="#CCCCCC">index 7</font><font color="#E5E5E5"> box eiling's</font>

259
00:14:13,260 --> 00:14:31,050
and it's quite robust<font color="#E5E5E5"> again side-channel</font>

260
00:14:18,570 --> 00:14:32,430
<font color="#E5E5E5">attacks do you have any questions thanks</font>

261
00:14:31,050 --> 00:14:34,439
Dorian for<font color="#E5E5E5"> the talk we have actually</font>

262
00:14:32,430 --> 00:14:40,020
time<font color="#E5E5E5"> for plenty of questions so</font>

263
00:14:34,440 --> 00:14:42,600
volunteers first you mentioned<font color="#CCCCCC"> that it's</font>

264
00:14:40,020 --> 00:14:44,460
protected against such an a simple power

265
00:14:42,600 --> 00:14:46,320
analysis can you elaborate a bit<font color="#E5E5E5"> why</font>

266
00:14:44,460 --> 00:14:49,770
because as far<font color="#E5E5E5"> as</font><font color="#CCCCCC"> I understand it's just</font>

267
00:14:46,320 --> 00:14:52,410
a fully unrolled<font color="#E5E5E5"> pipelined</font>

268
00:14:49,770 --> 00:14:55,760
implementation<font color="#CCCCCC"> whereas the protection</font>

269
00:14:52,410 --> 00:15:02,520
come from so it's actually unprotected

270
00:14:55,760 --> 00:15:05,030
but it's hard to<font color="#E5E5E5"> attack</font><font color="#CCCCCC"> ok and you</font>

271
00:15:02,520 --> 00:15:09,360
didn't<font color="#CCCCCC"> succeed we didn't succeed</font><font color="#E5E5E5"> in</font>

272
00:15:05,030 --> 00:15:13,350
attacking<font color="#E5E5E5"> the</font><font color="#CCCCCC"> thing is that the key bits</font>

273
00:15:09,360 --> 00:15:18,660
<font color="#E5E5E5">are just part of</font><font color="#CCCCCC"> the input of the hash</font>

274
00:15:13,350 --> 00:15:21,540
function<font color="#CCCCCC"> and so the cat</font><font color="#E5E5E5"> circ I think</font>

275
00:15:18,660 --> 00:15:24,689
there<font color="#CCCCCC"> are some papers</font><font color="#E5E5E5"> which at</font><font color="#CCCCCC"> TACC kids</font>

276
00:15:21,540 --> 00:15:27,000
are but<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know if my heart if from</font>

277
00:15:24,690 --> 00:15:31,080
an FPGA implementation<font color="#E5E5E5"> and so we have</font>

278
00:15:27,000 --> 00:15:33,900
about 60,000<font color="#E5E5E5"> flip-flops</font><font color="#CCCCCC"> in the cat shark</font>

279
00:15:31,080 --> 00:15:35,520
<font color="#E5E5E5">and I turn it all always so there are</font>

280
00:15:33,900 --> 00:15:39,089
always 50% of this<font color="#E5E5E5"> fee</font>

281
00:15:35,520 --> 00:15:41,850
<font color="#CCCCCC">love toggling</font><font color="#E5E5E5"> and we made some</font>

282
00:15:39,089 --> 00:15:46,040
correlations if you just change a single

283
00:15:41,850 --> 00:15:50,940
bit<font color="#CCCCCC"> in the input we had like weeks for</font>

284
00:15:46,040 --> 00:15:53,099
tracing<font color="#E5E5E5"> and we have like a million races</font>

285
00:15:50,940 --> 00:15:56,010
for<font color="#CCCCCC"> the first and we changed some of the</font>

286
00:15:53,100 --> 00:15:59,490
input make a million choices again and

287
00:15:56,010 --> 00:16:01,860
then a test of course<font color="#E5E5E5"> it again</font><font color="#CCCCCC"> a lot of</font>

288
00:15:59,490 --> 00:16:06,060
<font color="#CCCCCC">choices</font><font color="#E5E5E5"> and then we try to correlate but</font>

289
00:16:01,860 --> 00:16:09,690
<font color="#E5E5E5">we could not</font><font color="#CCCCCC"> find difference in the yeah</font>

290
00:16:06,060 --> 00:16:11,790
<font color="#E5E5E5">okay do you open source source code no</font>

291
00:16:09,690 --> 00:16:13,709
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> it would be</font><font color="#CCCCCC"> a nice</font>

292
00:16:11,790 --> 00:16:16,740
challenge<font color="#E5E5E5"> I</font><font color="#CCCCCC"> guess</font><font color="#E5E5E5"> I know it's it would</font>

293
00:16:13,709 --> 00:16:20,279
be nice so you have actually<font color="#E5E5E5"> asked the</font>

294
00:16:16,740 --> 00:16:24,420
sales from the company which all rights

295
00:16:20,279 --> 00:16:25,580
the IP is authority of any other

296
00:16:24,420 --> 00:16:28,920
questions<font color="#CCCCCC"> okay</font>

297
00:16:25,580 --> 00:16:33,300
hey<font color="#CCCCCC"> I'm which processor did you use for</font>

298
00:16:28,920 --> 00:16:35,010
your performance comparisons I<font color="#E5E5E5"> think do</font>

299
00:16:33,300 --> 00:16:39,660
you mean<font color="#E5E5E5"> this one here yes</font>

300
00:16:35,010 --> 00:16:40,410
oh I<font color="#CCCCCC"> think it's a</font><font color="#E5E5E5"> real health</font><font color="#CCCCCC"> Kiger 3.5</font>

301
00:16:39,660 --> 00:16:42,420
gigahertz

302
00:16:40,410 --> 00:16:45,029
it's the this one which<font color="#E5E5E5"> used</font><font color="#CCCCCC"> the outers</font>

303
00:16:42,420 --> 00:16:47,310
from<font color="#E5E5E5"> Fink's i don't know if i</font><font color="#CCCCCC"> hard which</font>

304
00:16:45,029 --> 00:16:49,079
<font color="#E5E5E5">processor it is it's also not my</font><font color="#CCCCCC"> code</font>

305
00:16:47,310 --> 00:16:55,859
but I know that<font color="#E5E5E5"> the outers are in here</font>

306
00:16:49,079 --> 00:16:58,529
maybe think him give an<font color="#CCCCCC"> answer nope okay</font>

307
00:16:55,860 --> 00:17:02,600
so it's I think it's a sky it's a sky

308
00:16:58,529 --> 00:17:02,600
like this<font color="#CCCCCC"> 300 gigahertz</font><font color="#E5E5E5"> so select this</font>

309
00:17:04,339 --> 00:17:09,869
you said it's in a product<font color="#E5E5E5"> there's a</font>

310
00:17:06,720 --> 00:17:14,429
<font color="#E5E5E5">product available for purchase it's a</font>

311
00:17:09,869 --> 00:17:17,219
chess<font color="#E5E5E5"> M yeah yeah have any further</font>

312
00:17:14,429 --> 00:17:19,429
questions if not let things<font color="#E5E5E5"> to speaker</font>

313
00:17:17,220 --> 00:17:19,429
again

314
00:17:21,410 --> 00:17:23,470
you

