1
00:00:00,120 --> 00:00:09,209
welcome to the post quantum cryptography

2
00:00:04,710 --> 00:00:11,879
session<font color="#E5E5E5"> part 2</font><font color="#CCCCCC"> in this session we'll we</font>

3
00:00:09,210 --> 00:00:15,389
will have two presentations<font color="#E5E5E5"> the first</font>

4
00:00:11,880 --> 00:00:17,340
presentation pyro cyber<font color="#CCCCCC"> unarmed CCA</font>

5
00:00:15,389 --> 00:00:20,039
secure module<font color="#E5E5E5"> that is base key</font>

6
00:00:17,340 --> 00:00:22,948
encapsulation<font color="#E5E5E5"> and</font><font color="#CCCCCC"> are the paper was</font>

7
00:00:20,039 --> 00:00:25,289
<font color="#CCCCCC">mastered by uncommon Karmakar Jose Maria</font>

8
00:00:22,949 --> 00:00:29,099
vermouth<font color="#E5E5E5"> O'Meara</font><font color="#CCCCCC"> Tsuyoshi now Roy and</font>

9
00:00:25,289 --> 00:00:30,779
Ingrid<font color="#CCCCCC"> Berber well</font><font color="#E5E5E5"> and here we have fine</font>

10
00:00:29,099 --> 00:00:32,340
<font color="#CCCCCC">Schumann to give the presentation okay</font>

11
00:00:30,779 --> 00:00:34,770
yeah<font color="#E5E5E5"> thank you battery for the</font>

12
00:00:32,340 --> 00:00:36,930
introduction<font color="#E5E5E5"> so yeah</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> we are going</font>

13
00:00:34,770 --> 00:00:38,940
<font color="#E5E5E5">to talk</font><font color="#CCCCCC"> about implementing module</font><font color="#E5E5E5"> at its</font>

14
00:00:36,930 --> 00:00:41,940
best<font color="#CCCCCC"> post quantum cryptography on</font><font color="#E5E5E5"> our</font>

15
00:00:38,940 --> 00:00:45,209
microcontrollers our specific focus is

16
00:00:41,940 --> 00:00:46,530
on<font color="#E5E5E5"> Sabre which is our submission to the</font>

17
00:00:45,210 --> 00:00:48,750
ongoing nice post quantum

18
00:00:46,530 --> 00:00:51,149
<font color="#E5E5E5">standardization procedure in the key</font>

19
00:00:48,750 --> 00:00:54,539
encapsulation mechanism category so

20
00:00:51,149 --> 00:00:56,910
little bit<font color="#E5E5E5"> about saber saber is a</font><font color="#CCCCCC"> CCA</font>

21
00:00:54,539 --> 00:00:59,280
secure post quantum<font color="#E5E5E5"> Kim it's hardness is</font>

22
00:00:56,910 --> 00:01:01,468
based on the module<font color="#CCCCCC"> LWR so what is</font>

23
00:00:59,280 --> 00:01:03,930
modules modules are<font color="#E5E5E5"> the trade-off</font>

24
00:01:01,469 --> 00:01:05,580
<font color="#E5E5E5">between security and the efficiency</font>

25
00:01:03,930 --> 00:01:09,119
<font color="#CCCCCC">between the standard and the ideal</font>

26
00:01:05,580 --> 00:01:10,830
lattices<font color="#E5E5E5"> and the LWR</font><font color="#CCCCCC"> LWR stands for the</font>

27
00:01:09,119 --> 00:01:12,840
learning with rounding is very close to

28
00:01:10,830 --> 00:01:16,080
<font color="#CCCCCC">the very well-known</font><font color="#E5E5E5"> learning with errors</font>

29
00:01:12,840 --> 00:01:18,990
problem the only difference from<font color="#CCCCCC"> the lwe</font>

30
00:01:16,080 --> 00:01:21,060
is that in<font color="#CCCCCC"> lwe</font><font color="#E5E5E5"> you have a sample and you</font>

31
00:01:18,990 --> 00:01:23,460
add external<font color="#E5E5E5"> noises like gaussian or the</font>

32
00:01:21,060 --> 00:01:25,140
binomial noise noise to it<font color="#E5E5E5"> but in</font>

33
00:01:23,460 --> 00:01:28,048
<font color="#E5E5E5">learning with sounding we don't need to</font>

34
00:01:25,140 --> 00:01:30,479
do<font color="#CCCCCC"> that we get our inherent noise</font><font color="#E5E5E5"> just</font>

35
00:01:28,049 --> 00:01:36,110
<font color="#E5E5E5">by rounding the sample down to a lower</font>

36
00:01:30,479 --> 00:01:39,570
<font color="#CCCCCC">modulae so we use less so we use less</font>

37
00:01:36,110 --> 00:01:43,409
<font color="#CCCCCC">randomness</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> during the design phase of</font>

38
00:01:39,570 --> 00:01:46,070
<font color="#CCCCCC">sabre our the</font><font color="#E5E5E5"> implement of the</font>

39
00:01:43,409 --> 00:01:48,990
<font color="#E5E5E5">efficiency was</font><font color="#CCCCCC"> of horror most</font>

40
00:01:46,070 --> 00:01:51,839
consideration so as a result<font color="#CCCCCC"> Sabre is</font>

41
00:01:48,990 --> 00:01:55,110
very efficient and<font color="#CCCCCC"> is</font><font color="#E5E5E5"> very flexible so</font>

42
00:01:51,840 --> 00:01:56,729
if you want a higher or<font color="#CCCCCC"> lower</font><font color="#E5E5E5"> security</font>

43
00:01:55,110 --> 00:01:58,380
<font color="#E5E5E5">you can just increase or decrease the</font>

44
00:01:56,729 --> 00:01:58,649
dimensions<font color="#E5E5E5"> of the matrix and you'll get</font>

45
00:01:58,380 --> 00:02:01,560
it

46
00:01:58,649 --> 00:02:03,600
and for this because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> mu all the</font>

47
00:02:01,560 --> 00:02:05,460
basic<font color="#CCCCCC"> operations stays same you don't</font>

48
00:02:03,600 --> 00:02:09,538
have to change<font color="#E5E5E5"> the code much it's a</font>

49
00:02:05,460 --> 00:02:12,030
minimal code change<font color="#E5E5E5"> also another very</font>

50
00:02:09,538 --> 00:02:13,950
important aspect of the of the<font color="#CCCCCC"> Sabre</font>

51
00:02:12,030 --> 00:02:17,129
<font color="#E5E5E5">which is differs from the other lattice</font>

52
00:02:13,950 --> 00:02:20,220
with submissions<font color="#E5E5E5"> is we don't use</font><font color="#CCCCCC"> prime</font>

53
00:02:17,129 --> 00:02:22,679
<font color="#CCCCCC">modulae we use more power of</font><font color="#E5E5E5"> two modulae</font>

54
00:02:20,220 --> 00:02:25,319
so it has two big advantage<font color="#CCCCCC"> first</font><font color="#E5E5E5"> one</font>

55
00:02:22,680 --> 00:02:27,510
the bounding<font color="#CCCCCC"> the one I said earlier to</font>

56
00:02:25,319 --> 00:02:29,399
generate the inherent noise and the

57
00:02:27,510 --> 00:02:30,899
modular<font color="#E5E5E5"> rejection is basically free in</font>

58
00:02:29,400 --> 00:02:35,099
both hardware and software platforms

59
00:02:30,900 --> 00:02:36,810
<font color="#E5E5E5">it's just bit shifts right but yeah of</font>

60
00:02:35,099 --> 00:02:38,518
course we cannot use entity because

61
00:02:36,810 --> 00:02:41,819
entity need requires some specific

62
00:02:38,519 --> 00:02:43,830
structure of the primes<font color="#E5E5E5"> and you may know</font>

63
00:02:41,819 --> 00:02:46,349
<font color="#CCCCCC">that in most</font><font color="#E5E5E5"> lattices</font>

64
00:02:43,830 --> 00:02:48,299
I mean protocols the polynomial

65
00:02:46,349 --> 00:02:50,910
multiplication is is the most

66
00:02:48,299 --> 00:02:52,860
computationally intensive part but<font color="#E5E5E5"> we</font>

67
00:02:50,910 --> 00:02:56,099
the entity is almost the best

68
00:02:52,860 --> 00:02:57,599
<font color="#E5E5E5">asymptotically best polynomial</font>

69
00:02:56,099 --> 00:03:01,619
multiplication and<font color="#E5E5E5"> we cannot use it</font>

70
00:02:57,599 --> 00:03:03,540
this may makes think that the the Sabre

71
00:03:01,620 --> 00:03:05,579
may suffer in performance<font color="#E5E5E5"> but actually</font>

72
00:03:03,540 --> 00:03:07,519
if we use a combination of Tim Cook

73
00:03:05,579 --> 00:03:09,989
karatsuba and schoolbook<font color="#E5E5E5"> and as our</font>

74
00:03:07,519 --> 00:03:12,690
polynomials are small only<font color="#E5E5E5"> 256 of size</font>

75
00:03:09,989 --> 00:03:15,239
<font color="#E5E5E5">we will</font><font color="#CCCCCC"> show it later</font><font color="#E5E5E5"> that we don't</font>

76
00:03:12,690 --> 00:03:18,510
<font color="#E5E5E5">suffer much in in the efficiency</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> in</font>

77
00:03:15,239 --> 00:03:20,069
the speed<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> just for</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> capture</font>

78
00:03:18,510 --> 00:03:23,548
listen how this<font color="#CCCCCC"> multiplexing is done</font>

79
00:03:20,069 --> 00:03:27,298
actually<font color="#E5E5E5"> okay so if we have</font><font color="#CCCCCC"> two</font>

80
00:03:23,549 --> 00:03:30,389
<font color="#CCCCCC">polynomials a and</font><font color="#E5E5E5"> B both of</font><font color="#CCCCCC"> with size</font>

81
00:03:27,299 --> 00:03:33,840
256<font color="#E5E5E5"> and we want to multiply them to get</font>

82
00:03:30,389 --> 00:03:37,889
the product<font color="#E5E5E5"> C in the first level we</font><font color="#CCCCCC"> use</font>

83
00:03:33,840 --> 00:03:41,549
<font color="#E5E5E5">Tim Cook</font><font color="#CCCCCC"> 4-way it reduces the big 256</font>

84
00:03:37,889 --> 00:03:44,400
256 multiplication<font color="#E5E5E5"> into seven smaller 64</font>

85
00:03:41,549 --> 00:03:47,370
costs<font color="#E5E5E5"> sixty four multiplications then we</font>

86
00:03:44,400 --> 00:03:50,489
use two levels of<font color="#CCCCCC"> cards</font><font color="#E5E5E5"> over which</font>

87
00:03:47,370 --> 00:03:53,430
reduces<font color="#E5E5E5"> 164</font><font color="#CCCCCC"> costs each of the</font><font color="#E5E5E5"> 64 + 64</font>

88
00:03:50,489 --> 00:03:55,769
multiplication<font color="#E5E5E5"> into</font><font color="#CCCCCC"> nine 16</font><font color="#E5E5E5"> plus 16</font>

89
00:03:53,430 --> 00:03:57,389
multiplication and then we do the

90
00:03:55,769 --> 00:03:59,430
multiplication using schoolbook

91
00:03:57,389 --> 00:04:00,690
multiplication<font color="#E5E5E5"> and after we are done</font>

92
00:03:59,430 --> 00:04:02,639
<font color="#CCCCCC">with</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> schoolbook multiplication we</font>

93
00:04:00,690 --> 00:04:05,040
<font color="#CCCCCC">can go we will</font><font color="#E5E5E5"> go back and actually</font>

94
00:04:02,639 --> 00:04:09,780
generate<font color="#E5E5E5"> our</font><font color="#CCCCCC"> product see so you see to</font>

95
00:04:05,040 --> 00:04:10,470
multiply<font color="#CCCCCC"> 1 256</font><font color="#E5E5E5"> cross 256 for 2 250 250</font>

96
00:04:09,780 --> 00:04:13,169
<font color="#CCCCCC">simul debilitation</font>

97
00:04:10,470 --> 00:04:15,540
we have to do<font color="#E5E5E5"> 7 into 9 63 schoolbook</font>

98
00:04:13,169 --> 00:04:18,539
multiplications<font color="#CCCCCC"> so to speed up our</font>

99
00:04:15,540 --> 00:04:20,430
overall multiplication<font color="#E5E5E5"> if we can speed</font>

100
00:04:18,539 --> 00:04:27,150
up<font color="#E5E5E5"> our school</font><font color="#CCCCCC"> move multiplication</font><font color="#E5E5E5"> it's</font>

101
00:04:20,430 --> 00:04:27,930
great in the next in<font color="#E5E5E5"> the in this work we</font>

102
00:04:27,150 --> 00:04:29,609
all we have

103
00:04:27,930 --> 00:04:31,889
<font color="#E5E5E5">seen that</font><font color="#CCCCCC"> favor</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> very efficient in</font><font color="#E5E5E5"> a</font>

104
00:04:29,610 --> 00:04:33,419
<font color="#CCCCCC">high-end</font><font color="#E5E5E5"> processors</font><font color="#CCCCCC"> we also want to show</font>

105
00:04:31,889 --> 00:04:36,090
that<font color="#CCCCCC"> Sabre is also very efficient in</font>

106
00:04:33,419 --> 00:04:39,150
<font color="#E5E5E5">low-end resource constants platforms</font>

107
00:04:36,090 --> 00:04:42,000
like<font color="#CCCCCC"> cortex M</font><font color="#E5E5E5"> 0 and M 4 so for this</font><font color="#CCCCCC"> or</font>

108
00:04:39,150 --> 00:04:45,150
to target devices<font color="#E5E5E5"> are M 0 M</font><font color="#CCCCCC"> 0 is a very</font>

109
00:04:42,000 --> 00:04:48,660
<font color="#CCCCCC">low-power microcontroller and</font><font color="#E5E5E5"> it has</font>

110
00:04:45,150 --> 00:04:51,659
very I<font color="#E5E5E5"> am only</font><font color="#CCCCCC"> 8 or 16</font><font color="#E5E5E5"> KB's of</font><font color="#CCCCCC"> RAM 8</font>

111
00:04:48,660 --> 00:04:54,930
registers<font color="#E5E5E5"> for data processing other</font>

112
00:04:51,660 --> 00:04:57,150
other is the cortex m4 which actually

113
00:04:54,930 --> 00:04:59,880
not very<font color="#E5E5E5"> high-end but a kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> 6 in the</font>

114
00:04:57,150 --> 00:05:01,710
middle of the cortex<font color="#E5E5E5"> M series and it has</font>

115
00:04:59,880 --> 00:05:03,599
it is<font color="#CCCCCC"> the first processor of the</font><font color="#E5E5E5"> cortex</font>

116
00:05:01,710 --> 00:05:05,489
<font color="#E5E5E5">M series which has DSP instructions and</font>

117
00:05:03,599 --> 00:05:08,599
will so how<font color="#E5E5E5"> you can utilize</font><font color="#CCCCCC"> these days</font>

118
00:05:05,490 --> 00:05:11,849
<font color="#E5E5E5">space</font><font color="#CCCCCC"> trestles</font><font color="#E5E5E5"> to our benefit also</font>

119
00:05:08,599 --> 00:05:14,580
cortex m4<font color="#E5E5E5"> is a very popular platform to</font>

120
00:05:11,849 --> 00:05:17,759
implement post count in any public key

121
00:05:14,580 --> 00:05:22,409
cryptography<font color="#E5E5E5"> which are targeted for IOT</font>

122
00:05:17,759 --> 00:05:25,650
devices or low-power microcontrollers we

123
00:05:22,410 --> 00:05:28,560
saw we have we provided<font color="#CCCCCC"> two very high</font>

124
00:05:25,650 --> 00:05:30,150
two types of implementations<font color="#E5E5E5"> one is very</font>

125
00:05:28,560 --> 00:05:31,860
high speed implementation on cortex m4

126
00:05:30,150 --> 00:05:34,948
will<font color="#CCCCCC"> so how we can</font><font color="#E5E5E5"> use the DSP</font>

127
00:05:31,860 --> 00:05:36,750
instructions to reduce the number<font color="#CCCCCC"> of</font>

128
00:05:34,949 --> 00:05:39,870
multiplications<font color="#CCCCCC"> in each</font><font color="#E5E5E5"> schoolbook</font>

129
00:05:36,750 --> 00:05:41,580
multiple multiplication we also provide

130
00:05:39,870 --> 00:05:44,520
an in<font color="#E5E5E5"> register version of the</font><font color="#CCCCCC"> term cook</font>

131
00:05:41,580 --> 00:05:47,250
<font color="#CCCCCC">multiply multiplication or the wrapper</font>

132
00:05:44,520 --> 00:05:51,570
which actually<font color="#CCCCCC"> reduces the</font><font color="#E5E5E5"> access to the</font>

133
00:05:47,250 --> 00:05:53,220
<font color="#E5E5E5">memory a lot we have a another compact</font>

134
00:05:51,570 --> 00:05:55,590
<font color="#E5E5E5">very memory efficient</font><font color="#CCCCCC"> person on the</font>

135
00:05:53,220 --> 00:05:57,870
cortex<font color="#E5E5E5"> m0 will so and just-in-time</font>

136
00:05:55,590 --> 00:06:00,960
<font color="#E5E5E5">approach to generate the public matrix</font>

137
00:05:57,870 --> 00:06:04,740
which is very memory hungry

138
00:06:00,960 --> 00:06:07,739
in module lattice<font color="#E5E5E5"> descriptor and also so</font>

139
00:06:04,740 --> 00:06:09,539
we also provide some optimizations in

140
00:06:07,740 --> 00:06:12,539
place using<font color="#E5E5E5"> an in-place karatsuba</font>

141
00:06:09,539 --> 00:06:15,330
multiplication<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> place kasuba</font>

142
00:06:12,539 --> 00:06:16,469
is was known for<font color="#E5E5E5"> quite some time but we</font>

143
00:06:15,330 --> 00:06:21,060
<font color="#CCCCCC">haven't</font><font color="#E5E5E5"> seen it much use in</font>

144
00:06:16,470 --> 00:06:23,340
implementation<font color="#E5E5E5"> of public</font><font color="#CCCCCC"> key crypto okay</font>

145
00:06:21,060 --> 00:06:25,860
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> schoolbook multiplication so in</font>

146
00:06:23,340 --> 00:06:28,409
our case each coefficients is 13 bits

147
00:06:25,860 --> 00:06:31,110
<font color="#E5E5E5">long</font><font color="#CCCCCC"> so it easily fits</font><font color="#E5E5E5"> into the half</font>

148
00:06:28,409 --> 00:06:33,680
word of<font color="#E5E5E5"> each register in other words</font>

149
00:06:31,110 --> 00:06:37,650
each register can have to go<font color="#CCCCCC"> officiants</font>

150
00:06:33,680 --> 00:06:38,400
now we have this<font color="#E5E5E5"> DSP instructions sm l</font>

151
00:06:37,650 --> 00:06:41,219
ABT

152
00:06:38,400 --> 00:06:41,820
which can<font color="#E5E5E5"> actually operate on the half</font>

153
00:06:41,219 --> 00:06:43,980
words of

154
00:06:41,820 --> 00:06:45,719
of<font color="#CCCCCC"> registers so</font><font color="#E5E5E5"> you can multiply the</font>

155
00:06:43,980 --> 00:06:49,860
bottom<font color="#E5E5E5"> before the top top with the</font>

156
00:06:45,720 --> 00:06:53,340
bottom or in any combination<font color="#E5E5E5"> okay so</font>

157
00:06:49,860 --> 00:06:55,830
it's an example<font color="#E5E5E5"> just</font><font color="#CCCCCC"> to understand the</font>

158
00:06:53,340 --> 00:06:59,190
optimizes<font color="#E5E5E5"> it's say we are multiplying</font><font color="#CCCCCC"> a</font>

159
00:06:55,830 --> 00:07:02,099
4 cross 4 polynomial<font color="#E5E5E5"> so in a very</font><font color="#CCCCCC"> nice</font>

160
00:06:59,190 --> 00:07:06,390
<font color="#E5E5E5">way even if we use</font><font color="#CCCCCC"> this DSP instruction</font>

161
00:07:02,100 --> 00:07:10,830
it takes 16 instructions to calculate

162
00:07:06,390 --> 00:07:13,830
the 16 small products but again we have

163
00:07:10,830 --> 00:07:15,719
this SML<font color="#E5E5E5"> EDX instruction which can</font>

164
00:07:13,830 --> 00:07:19,650
<font color="#E5E5E5">actually cross multiply</font><font color="#CCCCCC"> and accumulate</font>

165
00:07:15,720 --> 00:07:21,840
<font color="#CCCCCC">to</font><font color="#E5E5E5"> half words of a register okay now</font>

166
00:07:19,650 --> 00:07:25,229
focus<font color="#E5E5E5"> on these two products a 1 B 0</font><font color="#CCCCCC"> and</font>

167
00:07:21,840 --> 00:07:27,210
a 0 B 1 it is<font color="#CCCCCC"> 2</font><font color="#E5E5E5"> products so if you use</font>

168
00:07:25,230 --> 00:07:33,240
<font color="#CCCCCC">only SML a</font><font color="#E5E5E5"> BT we need two instructions</font>

169
00:07:27,210 --> 00:07:36,419
fine now if I replace<font color="#CCCCCC"> RA with</font><font color="#E5E5E5"> C 1</font><font color="#CCCCCC"> RB so</font>

170
00:07:33,240 --> 00:07:39,420
the RB with a and RC with a what do we

171
00:07:36,420 --> 00:07:43,920
<font color="#E5E5E5">get we get this product</font><font color="#CCCCCC"> in only one</font>

172
00:07:39,420 --> 00:07:47,070
instruction<font color="#CCCCCC"> and in this way we reduce it</font>

173
00:07:43,920 --> 00:07:48,840
<font color="#CCCCCC">too much to have these</font><font color="#E5E5E5"> two products we</font>

174
00:07:47,070 --> 00:07:50,849
can<font color="#E5E5E5"> do it in only in one instruction and</font>

175
00:07:48,840 --> 00:07:54,119
thus we reduce instruction count here

176
00:07:50,850 --> 00:07:56,970
and now we can<font color="#CCCCCC"> apply this trick for all</font>

177
00:07:54,120 --> 00:07:59,340
these registers<font color="#E5E5E5"> similarly we</font><font color="#CCCCCC"> can</font>

178
00:07:56,970 --> 00:08:01,710
<font color="#E5E5E5">calculate all</font><font color="#CCCCCC"> of them in in single</font>

179
00:07:59,340 --> 00:08:03,810
instructions each of them so<font color="#CCCCCC"> now our</font>

180
00:08:01,710 --> 00:08:07,049
total instruction count has reduced<font color="#E5E5E5"> to</font>

181
00:08:03,810 --> 00:08:09,090
only 12 which is<font color="#E5E5E5"> that 25% reduction but</font>

182
00:08:07,050 --> 00:08:11,970
actually you can<font color="#CCCCCC"> do even</font><font color="#E5E5E5"> better consider</font>

183
00:08:09,090 --> 00:08:13,890
<font color="#E5E5E5">these two coefficients which are</font>

184
00:08:11,970 --> 00:08:17,490
adjacent but<font color="#E5E5E5"> they do not reside in the</font>

185
00:08:13,890 --> 00:08:20,310
same register then we cannot use<font color="#CCCCCC"> this</font>

186
00:08:17,490 --> 00:08:22,890
trick SML<font color="#CCCCCC"> at DX</font><font color="#E5E5E5"> but we have some spare</font>

187
00:08:20,310 --> 00:08:26,490
registers<font color="#CCCCCC"> using some</font><font color="#E5E5E5"> tricks we</font><font color="#CCCCCC"> can free</font>

188
00:08:22,890 --> 00:08:29,250
<font color="#CCCCCC">up some registers so we have unpacking</font>

189
00:08:26,490 --> 00:08:31,230
instruction pkg BT we can<font color="#E5E5E5"> back this</font><font color="#CCCCCC"> to</font>

190
00:08:29,250 --> 00:08:33,960
is these two coefficients<font color="#E5E5E5"> in SPO</font>

191
00:08:31,230 --> 00:08:37,070
register and then apply the<font color="#E5E5E5"> same SML</font>

192
00:08:33,960 --> 00:08:40,650
<font color="#CCCCCC">Attucks trick again so using that</font>

193
00:08:37,070 --> 00:08:43,470
instruction we can perform again this

194
00:08:40,650 --> 00:08:45,990
<font color="#E5E5E5">these</font><font color="#CCCCCC"> four products in</font><font color="#E5E5E5"> only two</font>

195
00:08:43,470 --> 00:08:48,840
instructions<font color="#E5E5E5"> but in this case we lose</font>

196
00:08:45,990 --> 00:08:53,150
one<font color="#E5E5E5"> so we save two instructions but we</font>

197
00:08:48,840 --> 00:08:55,459
lose one in the packing instruction so

198
00:08:53,150 --> 00:08:58,889
for this<font color="#E5E5E5"> example</font>

199
00:08:55,459 --> 00:09:00,599
<font color="#E5E5E5">multiplication now we need only</font><font color="#CCCCCC"> 11</font>

200
00:08:58,889 --> 00:09:04,110
instructions for the<font color="#CCCCCC"> multiplication</font>

201
00:09:00,600 --> 00:09:06,420
instead<font color="#E5E5E5"> of 16 in our case I showed you</font>

202
00:09:04,110 --> 00:09:08,190
earlier<font color="#E5E5E5"> we have 16 plus 16 polynomial</font>

203
00:09:06,420 --> 00:09:11,550
multiplication<font color="#CCCCCC"> so in the very</font><font color="#E5E5E5"> naive way</font>

204
00:09:08,190 --> 00:09:13,829
it takes 256 instructions<font color="#E5E5E5"> but here we</font>

205
00:09:11,550 --> 00:09:17,008
need only<font color="#E5E5E5"> 168 instructions which is</font>

206
00:09:13,829 --> 00:09:20,250
actually<font color="#CCCCCC"> 30 7.5% reduction</font><font color="#E5E5E5"> in the total</font>

207
00:09:17,009 --> 00:09:22,410
instruction count so<font color="#E5E5E5"> it may look similar</font>

208
00:09:20,250 --> 00:09:24,449
but<font color="#CCCCCC"> just recall the slide I showed you</font>

209
00:09:22,410 --> 00:09:27,209
earlier to have<font color="#CCCCCC"> one 256 kosta koufos in</font>

210
00:09:24,449 --> 00:09:29,160
<font color="#E5E5E5">multiplication you have 60 you need 63</font>

211
00:09:27,209 --> 00:09:31,290
schoolbook multiplications<font color="#CCCCCC"> so even a</font>

212
00:09:29,160 --> 00:09:33,000
very small savings here can actually

213
00:09:31,290 --> 00:09:37,550
<font color="#CCCCCC">result in a big saving in the overall</font>

214
00:09:33,000 --> 00:09:39,680
multiplication okay<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> our</font>

215
00:09:37,550 --> 00:09:42,240
multiplication we have<font color="#E5E5E5"> in the top levels</font>

216
00:09:39,680 --> 00:09:43,920
<font color="#CCCCCC">Tim Cook then the car Suba and then we</font>

217
00:09:42,240 --> 00:09:45,629
have a schoolbook<font color="#E5E5E5"> we have shown you</font><font color="#CCCCCC"> how</font>

218
00:09:43,920 --> 00:09:48,300
<font color="#CCCCCC">to speed up</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> schoolbook</font>

219
00:09:45,629 --> 00:09:51,029
multiplication<font color="#CCCCCC"> gas uber we just unrolled</font>

220
00:09:48,300 --> 00:09:52,979
and did some small optimizations the

221
00:09:51,029 --> 00:09:57,149
details are in<font color="#CCCCCC"> the paper</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> I am going</font>

222
00:09:52,980 --> 00:09:59,069
to show you how we can<font color="#E5E5E5"> make the over the</font>

223
00:09:57,149 --> 00:10:02,910
<font color="#E5E5E5">school book multiplication sorry</font><font color="#CCCCCC"> rectum</font>

224
00:09:59,069 --> 00:10:04,649
<font color="#E5E5E5">cook multiplication faster so for the</font>

225
00:10:02,910 --> 00:10:07,439
term<font color="#CCCCCC"> quick multiplication it has</font><font color="#E5E5E5"> an</font>

226
00:10:04,649 --> 00:10:10,069
<font color="#E5E5E5">initial each has an evaluation phase so</font>

227
00:10:07,439 --> 00:10:13,259
in the evolution phase<font color="#E5E5E5"> it partisans the</font>

228
00:10:10,069 --> 00:10:15,420
polynomials in for smaller polynomials

229
00:10:13,259 --> 00:10:18,029
<font color="#CCCCCC">so our our polynomial has 256</font>

230
00:10:15,420 --> 00:10:22,139
coefficients<font color="#CCCCCC"> its partisans</font><font color="#E5E5E5"> each of them</font>

231
00:10:18,029 --> 00:10:24,689
in a<font color="#E5E5E5"> three</font><font color="#CCCCCC"> to a</font><font color="#E5E5E5"> zero for partisans each</font>

232
00:10:22,139 --> 00:10:26,399
of<font color="#CCCCCC"> weights 64 coefficients</font><font color="#E5E5E5"> and then it</font>

233
00:10:24,689 --> 00:10:29,399
actually<font color="#E5E5E5"> needs</font><font color="#CCCCCC"> to create a weighted sum</font>

234
00:10:26,399 --> 00:10:31,230
<font color="#CCCCCC">of these polynomials</font><font color="#E5E5E5"> actually it</font><font color="#CCCCCC"> leads</font><font color="#E5E5E5"> 7</font>

235
00:10:29,399 --> 00:10:34,829
which is<font color="#E5E5E5"> some of the polynomials but a</font><font color="#CCCCCC"> 0</font>

236
00:10:31,230 --> 00:10:38,370
<font color="#E5E5E5">and a sorry aw 0 and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> w6r a 0 and a 3</font>

237
00:10:34,829 --> 00:10:39,000
only<font color="#E5E5E5"> so only 5 here now focus on the</font><font color="#CCCCCC"> a</font>

238
00:10:38,370 --> 00:10:43,019
<font color="#CCCCCC">w-2</font>

239
00:10:39,000 --> 00:10:45,300
<font color="#E5E5E5">so any so here you see to get one</font>

240
00:10:43,019 --> 00:10:47,910
<font color="#CCCCCC">awaited polynomial we have to access a 0</font>

241
00:10:45,300 --> 00:10:50,279
a 1 a 2 and a 3<font color="#E5E5E5"> all and each other them</font>

242
00:10:47,910 --> 00:10:53,939
has 64<font color="#E5E5E5"> coefficients so we need to access</font>

243
00:10:50,279 --> 00:10:56,730
<font color="#E5E5E5">the main memory 256 times so it's just</font>

244
00:10:53,939 --> 00:10:59,519
<font color="#E5E5E5">like here we load the coefficients here</font>

245
00:10:56,730 --> 00:11:01,439
<font color="#CCCCCC">in the registers we put the</font><font color="#E5E5E5"> weighted we</font>

246
00:10:59,519 --> 00:11:04,110
<font color="#CCCCCC">do the weighted arithmetic</font><font color="#E5E5E5"> and then put</font>

247
00:11:01,439 --> 00:11:06,779
them in<font color="#CCCCCC"> the in the respective poison</font><font color="#E5E5E5"> so</font>

248
00:11:04,110 --> 00:11:08,790
just think if<font color="#E5E5E5"> we have to do this we'll</font>

249
00:11:06,779 --> 00:11:09,420
do<font color="#E5E5E5"> this for other all 5 weighted</font>

250
00:11:08,790 --> 00:11:12,000
polynomials

251
00:11:09,420 --> 00:11:18,180
we have to access<font color="#E5E5E5"> the main memory</font><font color="#CCCCCC"> 5 into</font>

252
00:11:12,000 --> 00:11:20,430
256<font color="#CCCCCC"> 5 times 256</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the main</font><font color="#E5E5E5"> memory which</font>

253
00:11:18,180 --> 00:11:23,939
is<font color="#E5E5E5"> actually huge overhead in</font><font color="#CCCCCC"> the memory</font>

254
00:11:20,430 --> 00:11:25,680
access<font color="#E5E5E5"> instead we do did an vertical</font>

255
00:11:23,940 --> 00:11:30,000
<font color="#CCCCCC">co-efficient scanning and in register</font>

256
00:11:25,680 --> 00:11:34,079
person of the Tim Cook multiplication so

257
00:11:30,000 --> 00:11:35,820
we<font color="#CCCCCC"> load our coefficients as usual</font><font color="#E5E5E5"> we put</font>

258
00:11:34,080 --> 00:11:38,130
them<font color="#E5E5E5"> in the registers</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we have some</font>

259
00:11:35,820 --> 00:11:40,050
spare registers<font color="#E5E5E5"> we do the all the</font>

260
00:11:38,130 --> 00:11:41,580
weighted<font color="#E5E5E5"> H</font><font color="#CCCCCC"> predict inside the registers</font>

261
00:11:40,050 --> 00:11:45,329
and<font color="#E5E5E5"> put them back in their corresponding</font>

262
00:11:41,580 --> 00:11:47,130
<font color="#E5E5E5">positions now actually we don't add this</font>

263
00:11:45,330 --> 00:11:49,860
weighted arithmetic is quite complex and

264
00:11:47,130 --> 00:11:52,530
we don't have so much<font color="#E5E5E5"> fare registers so</font>

265
00:11:49,860 --> 00:11:55,260
we did some partial sum and some

266
00:11:52,530 --> 00:11:57,000
<font color="#E5E5E5">arrangements inside just to aim with</font><font color="#CCCCCC"> the</font>

267
00:11:55,260 --> 00:12:01,590
to reduce the<font color="#E5E5E5"> memory access as much as</font>

268
00:11:57,000 --> 00:12:05,160
possible<font color="#CCCCCC"> so here you can see instead</font><font color="#E5E5E5"> of</font>

269
00:12:01,590 --> 00:12:08,700
<font color="#CCCCCC">5 times 256</font><font color="#E5E5E5"> memory accesses now we need</font>

270
00:12:05,160 --> 00:12:10,589
only<font color="#E5E5E5"> 256 times memory</font><font color="#CCCCCC"> as external memory</font>

271
00:12:08,700 --> 00:12:14,540
access to generate all the weighted

272
00:12:10,590 --> 00:12:17,760
polynomials so it's a huge<font color="#E5E5E5"> savings in</font>

273
00:12:14,540 --> 00:12:20,490
memory access from 5<font color="#E5E5E5"> times 256 to 256</font>

274
00:12:17,760 --> 00:12:24,780
<font color="#E5E5E5">only but the problem is now</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> to</font>

275
00:12:20,490 --> 00:12:29,900
keep this this this space in the memory

276
00:12:24,780 --> 00:12:35,270
to save to put our weighted polynomials

277
00:12:29,900 --> 00:12:38,120
<font color="#CCCCCC">ok so till now we I showed you some in</font>

278
00:12:35,270 --> 00:12:40,770
<font color="#CCCCCC">Saudia optimizations which reduces our</font>

279
00:12:38,120 --> 00:12:43,080
<font color="#E5E5E5">increases our efficiency and</font><font color="#CCCCCC"> also memory</font>

280
00:12:40,770 --> 00:12:46,319
<font color="#CCCCCC">optimization so in the reference</font>

281
00:12:43,080 --> 00:12:49,440
implementation of<font color="#CCCCCC"> Saveur we first we we</font>

282
00:12:46,320 --> 00:12:51,150
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> generate a public key public</font>

283
00:12:49,440 --> 00:12:54,420
matrix a which is<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> collection of</font>

284
00:12:51,150 --> 00:12:56,939
<font color="#CCCCCC">nine polynomials here so what</font><font color="#E5E5E5"> we did we</font>

285
00:12:54,420 --> 00:13:00,000
we<font color="#CCCCCC"> first of course generate</font><font color="#E5E5E5"> random seed</font>

286
00:12:56,940 --> 00:13:02,880
then we run<font color="#CCCCCC"> SiC 128 and we have a</font><font color="#E5E5E5"> huge a</font>

287
00:13:00,000 --> 00:13:04,470
2.8<font color="#CCCCCC"> k kilobytes of</font><font color="#E5E5E5"> the array</font><font color="#CCCCCC"> we put all</font>

288
00:13:02,880 --> 00:13:06,420
the seed random bytes here then we

289
00:13:04,470 --> 00:13:08,870
<font color="#E5E5E5">actually generate each of the</font>

290
00:13:06,420 --> 00:13:12,449
polynomials one by one there but it's

291
00:13:08,870 --> 00:13:15,660
this array<font color="#CCCCCC"> is 3.8 T V</font><font color="#E5E5E5"> which is huge and</font>

292
00:13:12,450 --> 00:13:17,760
the for the<font color="#CCCCCC"> flower platforms like</font><font color="#E5E5E5"> cortex</font>

293
00:13:15,660 --> 00:13:21,000
<font color="#CCCCCC">m0 it's profitably large we cannot even</font>

294
00:13:17,760 --> 00:13:23,279
put it there<font color="#E5E5E5"> so we took a just-in-time</font>

295
00:13:21,000 --> 00:13:27,779
<font color="#E5E5E5">approach so you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> sake</font>

296
00:13:23,279 --> 00:13:29,519
<font color="#E5E5E5">is composed of absorb and the squeeze we</font>

297
00:13:27,779 --> 00:13:31,259
took<font color="#CCCCCC"> and just-in-time</font><font color="#E5E5E5"> approach we</font>

298
00:13:29,519 --> 00:13:35,009
generate the polynomials<font color="#E5E5E5"> only when it's</font>

299
00:13:31,259 --> 00:13:37,589
needed<font color="#E5E5E5"> we first took the random seed we</font>

300
00:13:35,009 --> 00:13:39,809
absorb it<font color="#E5E5E5"> and then run a check squeeze</font>

301
00:13:37,589 --> 00:13:43,259
<font color="#E5E5E5">we generate the required number of seed</font>

302
00:13:39,809 --> 00:13:44,879
random bytes generate<font color="#E5E5E5"> the polynomial go</font>

303
00:13:43,259 --> 00:13:48,180
<font color="#E5E5E5">do whatever we want with</font><font color="#CCCCCC"> that</font>

304
00:13:44,879 --> 00:13:50,129
<font color="#E5E5E5">polynomials all our computations we say</font>

305
00:13:48,180 --> 00:13:52,800
we all have also<font color="#E5E5E5"> saved the state of the</font>

306
00:13:50,129 --> 00:13:56,180
case<font color="#E5E5E5"> check squeeze and when you need the</font>

307
00:13:52,800 --> 00:13:58,649
next polynomial we come back we<font color="#CCCCCC"> fill</font><font color="#E5E5E5"> the</font>

308
00:13:56,180 --> 00:14:00,899
<font color="#E5E5E5">state back to the hey check squeeze we</font>

309
00:13:58,649 --> 00:14:03,660
generate the<font color="#CCCCCC"> twit against against some</font>

310
00:14:00,899 --> 00:14:05,879
<font color="#CCCCCC">seed</font><font color="#E5E5E5"> random bytes and again generate the</font>

311
00:14:03,660 --> 00:14:08,339
next<font color="#CCCCCC"> value meal and again</font><font color="#E5E5E5"> do whatever we</font>

312
00:14:05,879 --> 00:14:11,999
want<font color="#E5E5E5"> with that polynomial so this goes</font>

313
00:14:08,339 --> 00:14:14,819
on for each<font color="#CCCCCC"> polynomial</font><font color="#E5E5E5"> so now instead of</font>

314
00:14:11,999 --> 00:14:16,920
having<font color="#CCCCCC"> nine with space</font><font color="#E5E5E5"> for nine</font>

315
00:14:14,819 --> 00:14:22,290
polynomials we need space<font color="#E5E5E5"> for only one</font>

316
00:14:16,920 --> 00:14:24,599
polynomial<font color="#E5E5E5"> and it goes on like this of</font>

317
00:14:22,290 --> 00:14:26,089
course<font color="#E5E5E5"> it requires some I mean many</font>

318
00:14:24,600 --> 00:14:30,300
bookkeeping so that we don't<font color="#CCCCCC"> break the</font>

319
00:14:26,089 --> 00:14:33,029
like<font color="#CCCCCC"> consistence you disable</font><font color="#E5E5E5"> with</font>

320
00:14:30,300 --> 00:14:35,219
submission<font color="#E5E5E5"> but the me the diesels are</font>

321
00:14:33,029 --> 00:14:37,379
all in the paper but<font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory</font>

322
00:14:35,220 --> 00:14:41,970
requirement in the cases to the<font color="#E5E5E5"> 1/9 of</font>

323
00:14:37,379 --> 00:14:45,720
the initial requirement okay<font color="#CCCCCC"> so for the</font>

324
00:14:41,970 --> 00:14:47,879
reasons<font color="#CCCCCC"> here</font><font color="#E5E5E5"> is our most fastest</font>

325
00:14:45,720 --> 00:14:50,759
implementation on cortex input and here

326
00:14:47,879 --> 00:14:54,300
is our most compact<font color="#CCCCCC"> version of the</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> m0</font>

327
00:14:50,759 --> 00:14:56,490
so<font color="#E5E5E5"> here you can see we of course we are</font>

328
00:14:54,300 --> 00:15:00,149
<font color="#CCCCCC">using Tim coop karatsuba in school book</font>

329
00:14:56,490 --> 00:15:05,550
and the<font color="#CCCCCC"> tiber</font><font color="#E5E5E5"> which is actually similar</font>

330
00:15:00,149 --> 00:15:08,970
module at its best<font color="#E5E5E5"> game but it uses my</font>

331
00:15:05,550 --> 00:15:10,769
entity<font color="#E5E5E5"> and prime prime</font><font color="#CCCCCC"> model II so here</font>

332
00:15:08,970 --> 00:15:14,279
you can<font color="#E5E5E5"> see that in the fastest version</font>

333
00:15:10,769 --> 00:15:17,189
<font color="#E5E5E5">of our implementation</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> actually little</font>

334
00:15:14,279 --> 00:15:19,860
bit faster than them and it's important

335
00:15:17,189 --> 00:15:21,599
<font color="#E5E5E5">to remember</font><font color="#CCCCCC"> that in in microcontrollers</font>

336
00:15:19,860 --> 00:15:23,129
we are<font color="#E5E5E5"> never going to run keygen and</font><font color="#CCCCCC"> D</font>

337
00:15:21,600 --> 00:15:25,019
<font color="#CCCCCC">carefully</font><font color="#E5E5E5"> in the microcontrollers it's</font>

338
00:15:23,129 --> 00:15:28,379
mostly the encapsulation<font color="#CCCCCC"> so it's the</font>

339
00:15:25,019 --> 00:15:31,079
most important operation<font color="#E5E5E5"> and here we are</font>

340
00:15:28,379 --> 00:15:33,809
<font color="#E5E5E5">a little bit faster than</font><font color="#CCCCCC"> the tiber</font><font color="#E5E5E5"> and</font>

341
00:15:31,079 --> 00:15:37,170
the most memory efficient<font color="#E5E5E5"> we need at</font>

342
00:15:33,809 --> 00:15:39,329
<font color="#E5E5E5">most</font><font color="#CCCCCC"> 6.3 kv our instantly government was</font>

343
00:15:37,170 --> 00:15:42,029
<font color="#CCCCCC">giving so we have almost</font><font color="#E5E5E5"> three times</font>

344
00:15:39,329 --> 00:15:45,420
<font color="#CCCCCC">reduction in the memory requirement so</font>

345
00:15:42,029 --> 00:15:47,959
<font color="#E5E5E5">uh so it's a it's also I should</font><font color="#CCCCCC"> say</font>

346
00:15:45,420 --> 00:15:50,939
here's<font color="#E5E5E5"> like this</font><font color="#CCCCCC"> though</font><font color="#E5E5E5"> all the</font>

347
00:15:47,959 --> 00:15:53,388
optimizations I have described<font color="#E5E5E5"> here till</font>

348
00:15:50,940 --> 00:15:56,279
now<font color="#E5E5E5"> or in which are in the paper</font><font color="#CCCCCC"> it's</font>

349
00:15:53,389 --> 00:15:56,579
you can apply them<font color="#E5E5E5"> on top</font><font color="#CCCCCC"> over each</font>

350
00:15:56,279 --> 00:15:58,500
other

351
00:15:56,579 --> 00:16:00,660
it all depends on<font color="#CCCCCC"> the user so if you</font>

352
00:15:58,500 --> 00:16:03,029
want<font color="#E5E5E5"> to have some efficiency and some</font>

353
00:16:00,660 --> 00:16:04,620
memory speed<font color="#CCCCCC"> efficiency and memory</font>

354
00:16:03,029 --> 00:16:05,750
efficiency<font color="#CCCCCC"> you can take some of the</font>

355
00:16:04,620 --> 00:16:08,579
<font color="#CCCCCC">optimizations merge them together</font>

356
00:16:05,750 --> 00:16:11,220
<font color="#E5E5E5">minimal codes to change and have a very</font>

357
00:16:08,579 --> 00:16:13,410
good implementation<font color="#CCCCCC"> according</font><font color="#E5E5E5"> to your</font>

358
00:16:11,220 --> 00:16:16,290
need so here we did we applied in the

359
00:16:13,410 --> 00:16:17,610
<font color="#E5E5E5">Sabre memory we applied some of our</font>

360
00:16:16,290 --> 00:16:19,560
memory saving technique with our

361
00:16:17,610 --> 00:16:21,750
efficiency so here you can see the

362
00:16:19,560 --> 00:16:24,599
<font color="#E5E5E5">memory requirement drops from almost</font>

363
00:16:21,750 --> 00:16:26,399
half of half in almost<font color="#E5E5E5"> in all the cases</font>

364
00:16:24,600 --> 00:16:28,470
and<font color="#CCCCCC"> we don't lose</font><font color="#E5E5E5"> much in the</font>

365
00:16:26,399 --> 00:16:30,510
performance here so still we have very

366
00:16:28,470 --> 00:16:35,850
close<font color="#E5E5E5"> with the fiber</font><font color="#CCCCCC"> which is an entity</font>

367
00:16:30,510 --> 00:16:38,819
based<font color="#E5E5E5"> multiplication okay so yeah so in</font>

368
00:16:35,850 --> 00:16:40,560
<font color="#E5E5E5">conclusion we show that module at</font>

369
00:16:38,820 --> 00:16:45,089
isthmus cryptography is very practical

370
00:16:40,560 --> 00:16:48,119
<font color="#CCCCCC">in resource constant platforms</font><font color="#E5E5E5"> so in</font>

371
00:16:45,089 --> 00:16:50,010
part<font color="#CCCCCC"> X M 0 or most the we need maximum</font>

372
00:16:48,120 --> 00:16:52,560
<font color="#E5E5E5">6.2 KB which is for the decapsulation</font>

373
00:16:50,010 --> 00:16:53,970
<font color="#E5E5E5">encryption since</font><font color="#CCCCCC"> even list which is</font>

374
00:16:52,560 --> 00:16:58,079
actually one third of<font color="#E5E5E5"> our reference</font>

375
00:16:53,970 --> 00:17:00,540
implementation<font color="#CCCCCC"> for the cortex m4</font><font color="#E5E5E5"> we had</font>

376
00:16:58,079 --> 00:17:02,250
we<font color="#E5E5E5"> can do the most critical that he kept</font>

377
00:17:00,540 --> 00:17:04,260
<font color="#CCCCCC">us universal in</font><font color="#E5E5E5"> only nine milliseconds</font>

378
00:17:02,250 --> 00:17:05,510
which is<font color="#E5E5E5"> around eight times faster</font><font color="#CCCCCC"> than</font>

379
00:17:04,260 --> 00:17:08,520
the our reference implements

380
00:17:05,510 --> 00:17:10,109
implementation<font color="#E5E5E5"> yeah as and as I said</font>

381
00:17:08,520 --> 00:17:12,150
<font color="#CCCCCC">earlier the optimizations which I</font>

382
00:17:10,109 --> 00:17:14,729
described earlier<font color="#CCCCCC"> they</font><font color="#E5E5E5"> can be applied</font><font color="#CCCCCC"> on</font>

383
00:17:12,150 --> 00:17:16,829
top of each other<font color="#E5E5E5"> so</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> we also showed</font>

384
00:17:14,730 --> 00:17:20,220
that the choice of<font color="#CCCCCC"> parameters is very</font>

385
00:17:16,829 --> 00:17:24,688
crucial here and for small dimensions

386
00:17:20,220 --> 00:17:26,490
the asymptotically faster<font color="#E5E5E5"> entity the</font>

387
00:17:24,689 --> 00:17:29,100
same<font color="#E5E5E5"> particular age of entity over the</font>

388
00:17:26,490 --> 00:17:33,630
other multiplications don't much matter

389
00:17:29,100 --> 00:17:36,780
because this age is<font color="#E5E5E5"> actually gone by the</font>

390
00:17:33,630 --> 00:17:38,220
irregular memory access of<font color="#E5E5E5"> NTD and they</font>

391
00:17:36,780 --> 00:17:40,770
cannot directly use<font color="#E5E5E5"> the special</font>

392
00:17:38,220 --> 00:17:43,230
<font color="#CCCCCC">interests they may but in Ichigo has</font>

393
00:17:40,770 --> 00:17:45,299
<font color="#E5E5E5">some special considerations so it's like</font>

394
00:17:43,230 --> 00:17:47,309
Inception sort and quicksort you<font color="#E5E5E5"> know in</font>

395
00:17:45,299 --> 00:17:49,590
quicksort is asymptotically<font color="#E5E5E5"> faster but</font>

396
00:17:47,309 --> 00:17:50,850
even<font color="#E5E5E5"> for small dimensions in certain</font>

397
00:17:49,590 --> 00:17:53,850
soft performs very<font color="#E5E5E5"> well</font>

398
00:17:50,850 --> 00:17:56,149
so that asymptotic is sometimes it's

399
00:17:53,850 --> 00:17:59,009
lost over<font color="#E5E5E5"> there is the overhead of</font><font color="#CCCCCC"> the</font>

400
00:17:56,149 --> 00:18:02,699
recursion<font color="#E5E5E5"> or something and for the movie</font>

401
00:17:59,009 --> 00:18:04,559
<font color="#CCCCCC">SSS</font><font color="#E5E5E5"> so yeah the paper and the implement</font>

402
00:18:02,700 --> 00:18:06,240
<font color="#CCCCCC">sonoran in public</font><font color="#E5E5E5"> so you are most</font>

403
00:18:04,559 --> 00:18:07,620
welcome to<font color="#CCCCCC"> visit them the implement</font>

404
00:18:06,240 --> 00:18:12,299
series and github<font color="#E5E5E5"> in our tail lumen</font>

405
00:18:07,620 --> 00:18:15,719
<font color="#E5E5E5">again github page and the paper is an</font>

406
00:18:12,299 --> 00:18:18,049
ePrint<font color="#E5E5E5"> yeah that concludes my talk</font><font color="#CCCCCC"> thank</font>

407
00:18:15,720 --> 00:18:18,049
you<font color="#CCCCCC"> very much</font>

408
00:18:22,380 --> 00:18:33,600
<font color="#E5E5E5">thank you mom for the nice presentation</font>

409
00:18:25,080 --> 00:18:37,789
<font color="#E5E5E5">are there any questions if not I have a</font>

410
00:18:33,600 --> 00:18:44,580
question would<font color="#CCCCCC"> you</font><font color="#E5E5E5"> go back</font><font color="#CCCCCC"> to slide 11</font>

411
00:18:37,789 --> 00:18:47,610
<font color="#E5E5E5">yeah so was as far as I understand this</font>

412
00:18:44,580 --> 00:18:50,309
implementation<font color="#E5E5E5"> of cyber yeah much is</font>

413
00:18:47,610 --> 00:18:53,309
category<font color="#CCCCCC"> 3 of there yeah and a nice</font>

414
00:18:50,309 --> 00:18:55,289
category<font color="#CCCCCC"> it's far almost 128 push</font>

415
00:18:53,309 --> 00:18:59,370
quantum security yeah so it's<font color="#E5E5E5"> pretty</font>

416
00:18:55,289 --> 00:19:03,029
high<font color="#CCCCCC"> so so the the first question is if</font>

417
00:18:59,370 --> 00:19:06,120
you're targeting<font color="#E5E5E5"> microcontrollers is it</font>

418
00:19:03,029 --> 00:19:08,940
a little<font color="#E5E5E5"> too</font><font color="#CCCCCC"> much use that high security</font>

419
00:19:06,120 --> 00:19:13,110
why not try to take<font color="#CCCCCC"> advantage of</font><font color="#E5E5E5"> lower</font>

420
00:19:08,940 --> 00:19:15,659
security<font color="#E5E5E5"> was our recommended parameters</font>

421
00:19:13,110 --> 00:19:17,519
and so we<font color="#E5E5E5"> just implemented it and as I</font>

422
00:19:15,659 --> 00:19:19,860
showed<font color="#E5E5E5"> earlier decreasing and increasing</font>

423
00:19:17,519 --> 00:19:22,200
is not<font color="#E5E5E5"> an issue it's</font><font color="#CCCCCC"> just small code</font>

424
00:19:19,860 --> 00:19:24,418
change and you can have that<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> just</font>

425
00:19:22,200 --> 00:19:26,909
go<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> not too high not</font><font color="#CCCCCC"> too low</font>

426
00:19:24,419 --> 00:19:29,039
<font color="#CCCCCC">nothing</font><font color="#E5E5E5"> media yeah and you get well but</font>

427
00:19:26,909 --> 00:19:31,110
yeah if<font color="#E5E5E5"> you reduce the security and</font>

428
00:19:29,039 --> 00:19:34,860
target category<font color="#CCCCCC"> one maybe</font><font color="#E5E5E5"> you will get</font>

429
00:19:31,110 --> 00:19:38,340
much better<font color="#CCCCCC"> performance</font><font color="#E5E5E5"> nice</font><font color="#CCCCCC"> this the</font>

430
00:19:34,860 --> 00:19:40,830
second question is how<font color="#E5E5E5"> they</font><font color="#CCCCCC"> regard</font>

431
00:19:38,340 --> 00:19:42,689
regarding the bit security<font color="#CCCCCC"> how</font><font color="#E5E5E5"> how the</font>

432
00:19:40,830 --> 00:19:44,070
bit security compares between<font color="#E5E5E5"> cyber and</font>

433
00:19:42,690 --> 00:19:46,529
and the<font color="#CCCCCC"> one</font><font color="#E5E5E5"> that you're comparing here</font>

434
00:19:44,070 --> 00:19:48,870
<font color="#E5E5E5">yeah that with the</font><font color="#CCCCCC"> khyber yeah we know</font>

435
00:19:46,529 --> 00:19:51,269
<font color="#E5E5E5">the same levels of security okay yeah</font>

436
00:19:48,870 --> 00:19:55,709
<font color="#E5E5E5">the same category yeah okay that they</font>

437
00:19:51,269 --> 00:20:00,750
already<font color="#E5E5E5"> think</font><font color="#CCCCCC"> then yes okay okay thank</font>

438
00:19:55,710 --> 00:20:02,850
you it's there are any questions<font color="#E5E5E5"> no so</font>

439
00:20:00,750 --> 00:20:05,450
then let's think<font color="#CCCCCC"> and Shema again please</font>

440
00:20:02,850 --> 00:20:05,449
<font color="#E5E5E5">okay thank you</font>

441
00:20:06,010 --> 00:20:08,070
you

