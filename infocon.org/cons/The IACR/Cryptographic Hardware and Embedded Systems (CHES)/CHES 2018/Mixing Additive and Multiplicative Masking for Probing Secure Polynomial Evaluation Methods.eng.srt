1
00:00:00,410 --> 00:00:07,620
so the<font color="#CCCCCC"> third talk of this question of</font>

2
00:00:05,640 --> 00:00:09,629
the<font color="#E5E5E5"> session sorry is on</font><font color="#CCCCCC"> Miska narrative</font>

3
00:00:07,620 --> 00:00:11,610
and multiplicative masking for probing

4
00:00:09,630 --> 00:00:15,509
<font color="#CCCCCC">secured pre-nominal evaluation methods</font>

5
00:00:11,610 --> 00:00:17,609
<font color="#CCCCCC">its from excel matthew manages and</font>

6
00:00:15,509 --> 00:00:25,470
<font color="#CCCCCC">Michalak</font><font color="#E5E5E5"> with quarter and Excel will</font>

7
00:00:17,609 --> 00:00:29,070
<font color="#CCCCCC">give</font><font color="#E5E5E5"> took so hi thank you for</font><font color="#CCCCCC"> the</font>

8
00:00:25,470 --> 00:00:31,560
introduction<font color="#E5E5E5"> so in this paper we were</font>

9
00:00:29,070 --> 00:00:34,770
interested<font color="#E5E5E5"> in putting</font><font color="#CCCCCC"> a polynomial</font>

10
00:00:31,560 --> 00:00:38,070
evaluation methods which are very

11
00:00:34,770 --> 00:00:40,020
relevant methods for masking when<font color="#CCCCCC"> S</font>

12
00:00:38,070 --> 00:00:43,260
<font color="#CCCCCC">boxes can</font><font color="#E5E5E5"> be represented as polynomials</font>

13
00:00:40,020 --> 00:00:47,489
<font color="#E5E5E5">and therefore providing fast and secure</font>

14
00:00:43,260 --> 00:00:52,199
methods in<font color="#E5E5E5"> this case results in</font>

15
00:00:47,489 --> 00:00:54,839
efficient and secure<font color="#E5E5E5"> masking schemes so</font>

16
00:00:52,199 --> 00:00:57,449
we do that using a mix of additive and

17
00:00:54,840 --> 00:00:59,359
multiplicative masking<font color="#E5E5E5"> now in the</font>

18
00:00:57,449 --> 00:01:01,530
context of side channel<font color="#E5E5E5"> analysis</font>

19
00:00:59,359 --> 00:01:04,710
<font color="#E5E5E5">information</font><font color="#CCCCCC"> leaked through the</font><font color="#E5E5E5"> physical</font>

20
00:01:01,530 --> 00:01:08,060
<font color="#CCCCCC">cages of a running device because</font><font color="#E5E5E5"> the</font>

21
00:01:04,709 --> 00:01:11,130
data and physical cages are dependent

22
00:01:08,060 --> 00:01:13,380
now masking is a popular method<font color="#E5E5E5"> that</font>

23
00:01:11,130 --> 00:01:17,158
prevent<font color="#CCCCCC"> these</font><font color="#E5E5E5"> correlation by randomizing</font>

24
00:01:13,380 --> 00:01:19,830
<font color="#E5E5E5">physically cages the</font><font color="#CCCCCC"> connemara splits</font>

25
00:01:17,159 --> 00:01:22,650
<font color="#E5E5E5">every sensitive viable into several</font>

26
00:01:19,830 --> 00:01:24,750
shares and<font color="#CCCCCC"> secure the brush with</font><font color="#E5E5E5"> the</font>

27
00:01:22,650 --> 00:01:26,659
processing of the shares<font color="#E5E5E5"> through every</font>

28
00:01:24,750 --> 00:01:29,520
internal operations

29
00:01:26,659 --> 00:01:32,670
now when the can measure is applied with

30
00:01:29,520 --> 00:01:34,740
more<font color="#E5E5E5"> than two shares then the masking is</font>

31
00:01:32,670 --> 00:01:36,360
said to be of higher order which has

32
00:01:34,740 --> 00:01:40,560
been proved to<font color="#E5E5E5"> be a sound can measure in</font>

33
00:01:36,360 --> 00:01:43,350
several security<font color="#E5E5E5"> models now in our paper</font>

34
00:01:40,560 --> 00:01:45,630
<font color="#CCCCCC">we proved the security of</font><font color="#E5E5E5"> all of our</font>

35
00:01:43,350 --> 00:01:48,210
constructions in the probing model which

36
00:01:45,630 --> 00:01:52,829
has been<font color="#E5E5E5"> introduced by a high sign magna</font>

37
00:01:48,210 --> 00:01:55,729
in 2003 in this model<font color="#E5E5E5"> an adversary has</font>

38
00:01:52,829 --> 00:01:58,320
access to<font color="#E5E5E5"> T intermediate variables and</font>

39
00:01:55,729 --> 00:02:01,140
tries<font color="#CCCCCC"> to recover</font><font color="#E5E5E5"> any sensitive</font>

40
00:01:58,320 --> 00:02:02,908
information<font color="#CCCCCC"> from the set</font><font color="#E5E5E5"> and therefore</font>

41
00:02:01,140 --> 00:02:06,000
what we call T probing security is

42
00:02:02,909 --> 00:02:09,050
achieved<font color="#E5E5E5"> if any set of T observation is</font>

43
00:02:06,000 --> 00:02:11,280
independent<font color="#E5E5E5"> of every sensitive variables</font>

44
00:02:09,050 --> 00:02:12,390
now there are two important security

45
00:02:11,280 --> 00:02:15,420
notions

46
00:02:12,390 --> 00:02:17,820
concerning<font color="#E5E5E5"> probing security da the</font><font color="#CCCCCC"> TNI</font>

47
00:02:15,420 --> 00:02:23,670
and the<font color="#E5E5E5"> TSN</font><font color="#CCCCCC"> AI properties</font><font color="#E5E5E5"> introduced by</font>

48
00:02:17,820 --> 00:02:26,090
<font color="#CCCCCC">Barton Al in 2015</font><font color="#E5E5E5"> the TSI property is</font>

49
00:02:23,670 --> 00:02:27,959
<font color="#E5E5E5">very convenient since it allows</font>

50
00:02:26,090 --> 00:02:31,650
transformations<font color="#E5E5E5"> that satisfy this</font>

51
00:02:27,960 --> 00:02:33,270
property<font color="#E5E5E5"> to be composed safely which is</font>

52
00:02:31,650 --> 00:02:38,130
very convenient<font color="#E5E5E5"> to make to prove probing</font>

53
00:02:33,270 --> 00:02:41,459
security now usually<font color="#E5E5E5"> masking schemes</font>

54
00:02:38,130 --> 00:02:44,280
<font color="#E5E5E5">uses additive masking and what means in</font>

55
00:02:41,459 --> 00:02:47,220
practice is<font color="#CCCCCC"> that every</font><font color="#E5E5E5"> shelfs</font><font color="#CCCCCC"> has to be</font>

56
00:02:44,280 --> 00:02:49,830
splitted<font color="#E5E5E5"> into cheapest one shares such</font>

57
00:02:47,220 --> 00:02:54,090
that the<font color="#E5E5E5"> sum of the shares is equal to</font>

58
00:02:49,830 --> 00:02:56,190
the original value<font color="#E5E5E5"> now in this case the</font>

59
00:02:54,090 --> 00:02:59,070
processing<font color="#E5E5E5"> of linear transformation</font><font color="#CCCCCC"> is</font>

60
00:02:56,190 --> 00:03:02,810
<font color="#E5E5E5">very efficient while the processing of</font>

61
00:02:59,070 --> 00:03:02,810
multiplication is<font color="#E5E5E5"> much more expensive</font>

62
00:03:02,840 --> 00:03:08,520
now the first<font color="#E5E5E5"> probing</font><font color="#CCCCCC"> secure masking</font>

63
00:03:05,940 --> 00:03:11,390
scheme that uses<font color="#E5E5E5"> additive masking has</font>

64
00:03:08,520 --> 00:03:16,280
been proposed<font color="#E5E5E5"> by</font><font color="#CCCCCC"> ravine proof in 2010</font>

65
00:03:11,390 --> 00:03:20,760
the idea was to<font color="#E5E5E5"> express the AES</font><font color="#CCCCCC"> sbox as</font>

66
00:03:16,280 --> 00:03:23,420
<font color="#E5E5E5">a power function which rely on linear</font>

67
00:03:20,760 --> 00:03:26,399
transformations<font color="#E5E5E5"> and multiplications</font>

68
00:03:23,420 --> 00:03:28,859
namely<font color="#CCCCCC"> square and multiplications</font><font color="#E5E5E5"> now</font>

69
00:03:26,400 --> 00:03:33,090
the approach has been extended to<font color="#E5E5E5"> the</font>

70
00:03:28,860 --> 00:03:35,610
generic<font color="#E5E5E5"> case by</font><font color="#CCCCCC"> kalanor</font><font color="#E5E5E5"> in 2012 they</font>

71
00:03:33,090 --> 00:03:38,100
proved<font color="#CCCCCC"> that any ambitous</font><font color="#E5E5E5"> boxes can</font><font color="#CCCCCC"> be</font>

72
00:03:35,610 --> 00:03:41,519
represented as a polynomial<font color="#CCCCCC"> function</font><font color="#E5E5E5"> of</font>

73
00:03:38,100 --> 00:03:43,320
a binary<font color="#E5E5E5"> of a binary finite field which</font>

74
00:03:41,519 --> 00:03:47,000
evaluation<font color="#CCCCCC"> also rely on linear</font>

75
00:03:43,320 --> 00:03:50,010
<font color="#E5E5E5">transformations and multiplication and</font>

76
00:03:47,000 --> 00:03:52,620
therefore since multiplications are very

77
00:03:50,010 --> 00:03:54,630
costly<font color="#CCCCCC"> to processing in additive masking</font>

78
00:03:52,620 --> 00:03:56,610
several works have been<font color="#E5E5E5"> tried to</font>

79
00:03:54,630 --> 00:03:59,940
<font color="#CCCCCC">optimize the number of nonlinear</font>

80
00:03:56,610 --> 00:04:05,040
multiplications<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> involved in the</font>

81
00:03:59,940 --> 00:04:07,859
polynomial evaluation method now some

82
00:04:05,040 --> 00:04:11,670
other masking scheme use even<font color="#CCCCCC"> other</font>

83
00:04:07,860 --> 00:04:15,120
<font color="#E5E5E5">encoding</font><font color="#CCCCCC"> x' and some others can even use</font>

84
00:04:11,670 --> 00:04:19,048
several encoding simultaneously so this

85
00:04:15,120 --> 00:04:22,470
is the case<font color="#E5E5E5"> of gpq which is a masking</font>

86
00:04:19,048 --> 00:04:24,440
masking schemes for power function that

87
00:04:22,470 --> 00:04:26,780
has<font color="#E5E5E5"> been introduced by</font><font color="#CCCCCC"> gianelle</font><font color="#E5E5E5"> mal in</font>

88
00:04:24,440 --> 00:04:30,449
2011

89
00:04:26,780 --> 00:04:32,938
this<font color="#E5E5E5"> scheme mixes additive and</font>

90
00:04:30,449 --> 00:04:35,580
multiplicative masking now the idea is

91
00:04:32,939 --> 00:04:37,800
<font color="#CCCCCC">that linear</font><font color="#E5E5E5"> transformations are very</font>

92
00:04:35,580 --> 00:04:40,109
<font color="#E5E5E5">efficiently processing additive masking</font>

93
00:04:37,800 --> 00:04:41,639
<font color="#E5E5E5">while multiplications are very</font>

94
00:04:40,110 --> 00:04:45,990
efficiently processing multiplicative

95
00:04:41,639 --> 00:04:47,819
masking however using a mix of additive

96
00:04:45,990 --> 00:04:51,120
and multiplicative masking comes at a

97
00:04:47,819 --> 00:04:54,479
cost<font color="#E5E5E5"> it requires to secure the</font>

98
00:04:51,120 --> 00:04:56,759
processing<font color="#E5E5E5"> of a Dirac function because</font>

99
00:04:54,479 --> 00:05:00,419
multiplicative masking is only<font color="#E5E5E5"> defined</font>

100
00:04:56,759 --> 00:05:02,550
for<font color="#E5E5E5"> nonzero values then it also requires</font>

101
00:05:00,419 --> 00:05:04,289
to secure to provide secure

102
00:05:02,550 --> 00:05:06,689
transformations to switch from<font color="#E5E5E5"> an</font>

103
00:05:04,289 --> 00:05:10,349
additive into a multiplicative masking

104
00:05:06,689 --> 00:05:13,500
and conversely those transformations<font color="#E5E5E5"> are</font>

105
00:05:10,349 --> 00:05:16,979
respectively<font color="#E5E5E5"> called</font><font color="#CCCCCC"> a.m. - mm</font><font color="#E5E5E5"> and mm -</font>

106
00:05:13,500 --> 00:05:19,889
<font color="#E5E5E5">a.m. now if we take a closer look at how</font>

107
00:05:16,979 --> 00:05:24,000
<font color="#E5E5E5">jpq works to evaluate a power</font><font color="#CCCCCC"> function</font>

108
00:05:19,889 --> 00:05:25,860
it first requires to compute the secure

109
00:05:24,000 --> 00:05:28,979
Dirac function in order<font color="#E5E5E5"> to get a nonzero</font>

110
00:05:25,860 --> 00:05:31,560
<font color="#CCCCCC">element</font><font color="#E5E5E5"> before converting it into a</font>

111
00:05:28,979 --> 00:05:34,469
multiplicative masking with the<font color="#E5E5E5"> a.m.</font><font color="#CCCCCC"> -</font>

112
00:05:31,560 --> 00:05:36,839
<font color="#CCCCCC">mm transformation then it processes the</font>

113
00:05:34,469 --> 00:05:39,139
<font color="#CCCCCC">power function very efficiently since a</font>

114
00:05:36,839 --> 00:05:42,330
multiplicative masking is used<font color="#E5E5E5"> and</font>

115
00:05:39,139 --> 00:05:44,969
<font color="#E5E5E5">finally it converts it converts back the</font>

116
00:05:42,330 --> 00:05:47,128
power into an additive masking and

117
00:05:44,969 --> 00:05:51,599
removes<font color="#E5E5E5"> the Dirac to obtain the desired</font>

118
00:05:47,129 --> 00:05:54,419
power now the first contribution<font color="#E5E5E5"> in the</font>

119
00:05:51,599 --> 00:05:57,000
article is that<font color="#CCCCCC"> we have proved this</font>

120
00:05:54,419 --> 00:06:02,430
scheme for power functions<font color="#E5E5E5"> to actually</font>

121
00:05:57,000 --> 00:06:04,529
satisfy the<font color="#CCCCCC"> t-sne requirements now since</font>

122
00:06:02,430 --> 00:06:07,080
this scheme is one of the most efficient

123
00:06:04,529 --> 00:06:11,189
scheme<font color="#E5E5E5"> for the AES which is a power</font>

124
00:06:07,080 --> 00:06:13,529
functions<font color="#E5E5E5"> a natural</font><font color="#CCCCCC"> question</font><font color="#E5E5E5"> is how to</font>

125
00:06:11,189 --> 00:06:17,779
extend<font color="#E5E5E5"> gpq to evaluate polynomials very</font>

126
00:06:13,529 --> 00:06:21,240
efficiently of course there are<font color="#CCCCCC"> issues</font>

127
00:06:17,779 --> 00:06:23,029
because adding monomials<font color="#E5E5E5"> is not</font>

128
00:06:21,240 --> 00:06:25,770
efficient<font color="#E5E5E5"> in multiplicative masking and</font>

129
00:06:23,029 --> 00:06:28,379
converting every monomials back<font color="#E5E5E5"> into</font>

130
00:06:25,770 --> 00:06:30,270
additive masking before adding them<font color="#E5E5E5"> is</font>

131
00:06:28,379 --> 00:06:33,719
<font color="#E5E5E5">also not efficient because</font><font color="#CCCCCC"> the</font>

132
00:06:30,270 --> 00:06:35,330
conversions<font color="#E5E5E5"> am</font><font color="#CCCCCC"> - mm-mm to am</font><font color="#E5E5E5"> are very</font>

133
00:06:33,719 --> 00:06:37,750
<font color="#E5E5E5">costly</font>

134
00:06:35,330 --> 00:06:40,870
now we provide

135
00:06:37,750 --> 00:06:42,700
<font color="#CCCCCC">to TSN I proposals that achieved this</font>

136
00:06:40,870 --> 00:06:45,460
goal<font color="#E5E5E5"> and uses additive and</font>

137
00:06:42,700 --> 00:06:48,430
multiplicative masking the first<font color="#CCCCCC"> met</font>

138
00:06:45,460 --> 00:06:52,330
method is based on<font color="#E5E5E5"> the cycle atomic</font>

139
00:06:48,430 --> 00:06:54,250
method<font color="#E5E5E5"> by</font><font color="#CCCCCC"> Colin Ali 2012 and the second</font>

140
00:06:52,330 --> 00:06:57,760
one is based<font color="#E5E5E5"> on</font><font color="#CCCCCC"> our first proposal and</font>

141
00:06:54,250 --> 00:07:03,780
under<font color="#CCCCCC"> crv method proposed by Cornell in</font>

142
00:06:57,760 --> 00:07:07,240
2014 now let's start by our first

143
00:07:03,780 --> 00:07:09,969
proposal the<font color="#CCCCCC"> alternate cycle atomic</font>

144
00:07:07,240 --> 00:07:14,350
method by<font color="#CCCCCC"> quick by a quick reminder of</font>

145
00:07:09,970 --> 00:07:15,850
the cyclotomic method basically<font color="#CCCCCC"> it</font>

146
00:07:14,350 --> 00:07:20,380
relies on the<font color="#CCCCCC"> notion of secret semi</font>

147
00:07:15,850 --> 00:07:22,990
class which is<font color="#E5E5E5"> very convenient since</font>

148
00:07:20,380 --> 00:07:24,969
every powers whose exponents lie in the

149
00:07:22,990 --> 00:07:27,760
same secret<font color="#CCCCCC"> Ouma class can be derived</font>

150
00:07:24,970 --> 00:07:29,710
<font color="#E5E5E5">very efficiently with squares only in</font>

151
00:07:27,760 --> 00:07:36,250
additive masking this is also<font color="#E5E5E5"> very</font>

152
00:07:29,710 --> 00:07:38,560
efficient now<font color="#E5E5E5"> therefore every monomers</font>

153
00:07:36,250 --> 00:07:42,220
of some polynomials<font color="#E5E5E5"> can be splitted into</font>

154
00:07:38,560 --> 00:07:44,440
several distinct sets and by doing so it

155
00:07:42,220 --> 00:07:49,020
<font color="#E5E5E5">is possible to express any</font><font color="#CCCCCC"> n detest bugs</font>

156
00:07:44,440 --> 00:07:52,390
<font color="#E5E5E5">as the sum</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> linearize polynomials</font>

157
00:07:49,020 --> 00:07:57,430
whose monomials belong to the same

158
00:07:52,390 --> 00:08:00,039
<font color="#E5E5E5">sequence my class however the method</font>

159
00:07:57,430 --> 00:08:03,460
still requires to derive at most<font color="#E5E5E5"> at</font>

160
00:08:00,040 --> 00:08:05,890
least<font color="#E5E5E5"> one power for each distinct</font>

161
00:08:03,460 --> 00:08:09,580
distinct<font color="#CCCCCC"> linearized polynomials first</font>

162
00:08:05,890 --> 00:08:14,710
and<font color="#CCCCCC"> if this step</font><font color="#E5E5E5"> is very</font><font color="#CCCCCC"> expensive in</font>

163
00:08:09,580 --> 00:08:18,580
additive masking so our first proposal

164
00:08:14,710 --> 00:08:21,000
deal with these steps using<font color="#E5E5E5"> a</font>

165
00:08:18,580 --> 00:08:25,539
multiplicative masking and this is our

166
00:08:21,000 --> 00:08:27,580
alternate<font color="#CCCCCC"> cyclotomic method so it still</font>

167
00:08:25,540 --> 00:08:29,260
requires to process the<font color="#E5E5E5"> secure</font>

168
00:08:27,580 --> 00:08:32,799
processing of a Dirac function<font color="#E5E5E5"> in</font><font color="#CCCCCC"> order</font>

169
00:08:29,260 --> 00:08:35,380
<font color="#E5E5E5">to get a nonzero element and then it</font>

170
00:08:32,799 --> 00:08:38,409
computes the am<font color="#E5E5E5"> 2mm transformation in</font>

171
00:08:35,380 --> 00:08:41,979
order to get multiplicative masking then

172
00:08:38,409 --> 00:08:44,980
it processes<font color="#E5E5E5"> one it evaluates one</font>

173
00:08:41,979 --> 00:08:48,730
monomial per distinct for each<font color="#E5E5E5"> distinct</font>

174
00:08:44,980 --> 00:08:50,880
linear as<font color="#E5E5E5"> poly polynomials in additive</font>

175
00:08:48,730 --> 00:08:54,240
in multiplicative masking which is very

176
00:08:50,880 --> 00:08:57,390
very efficient finally it converts back

177
00:08:54,240 --> 00:09:00,170
<font color="#E5E5E5">those power and those powers</font><font color="#CCCCCC"> only into</font>

178
00:08:57,390 --> 00:09:04,140
an additive masking with several use of

179
00:09:00,170 --> 00:09:06,300
<font color="#E5E5E5">mm2</font><font color="#CCCCCC"> am transformation</font><font color="#E5E5E5"> and finally it can</font>

180
00:09:04,140 --> 00:09:08,370
evaluate the linearized<font color="#E5E5E5"> polynomials</font>

181
00:09:06,300 --> 00:09:09,750
whose monomials belong to the same

182
00:09:08,370 --> 00:09:13,380
<font color="#E5E5E5">secret to</font><font color="#CCCCCC"> me class very efficiently</font>

183
00:09:09,750 --> 00:09:18,480
since negative masking is used and the

184
00:09:13,380 --> 00:09:20,880
evaluation<font color="#CCCCCC"> of s of</font><font color="#E5E5E5"> X is completed</font><font color="#CCCCCC"> only</font>

185
00:09:18,480 --> 00:09:24,540
with linear processing using an additive

186
00:09:20,880 --> 00:09:26,970
masking so the red arrows and the figure

187
00:09:24,540 --> 00:09:30,390
shows that we only use<font color="#CCCCCC"> a multiplicative</font>

188
00:09:26,970 --> 00:09:33,210
masking to derive only<font color="#CCCCCC"> few set a set of</font>

189
00:09:30,390 --> 00:09:35,910
few powers and since the conversions are

190
00:09:33,210 --> 00:09:38,220
very costly we only have a few

191
00:09:35,910 --> 00:09:41,939
<font color="#CCCCCC">transformations</font><font color="#E5E5E5"> to compute which is also</font>

192
00:09:38,220 --> 00:09:48,500
<font color="#CCCCCC">very efficient</font><font color="#E5E5E5"> now we have proved that</font>

193
00:09:41,940 --> 00:09:48,500
<font color="#E5E5E5">the alternate cyclotomic method is TSN</font><font color="#CCCCCC"> i</font>

194
00:09:48,800 --> 00:09:55,219
we also have implemented our<font color="#E5E5E5"> solution</font>

195
00:09:52,980 --> 00:09:58,530
our<font color="#E5E5E5"> approach and the original method</font>

196
00:09:55,220 --> 00:10:02,910
directly<font color="#E5E5E5"> in assembly language for 8-bit</font>

197
00:09:58,530 --> 00:10:05,069
architecture for s boxes<font color="#E5E5E5"> of size</font><font color="#CCCCCC"> four to</font>

198
00:10:02,910 --> 00:10:08,660
<font color="#CCCCCC">eight at practical orders one two and</font>

199
00:10:05,070 --> 00:10:13,110
three<font color="#E5E5E5"> and what the</font><font color="#CCCCCC"> table shows here is</font>

200
00:10:08,660 --> 00:10:15,480
that<font color="#E5E5E5"> our proposal is more efficient</font>

201
00:10:13,110 --> 00:10:18,060
<font color="#E5E5E5">nearly three times faster</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> the</font>

202
00:10:15,480 --> 00:10:23,130
original<font color="#CCCCCC"> method for envy</font><font color="#E5E5E5"> test boxes of</font>

203
00:10:18,060 --> 00:10:25,319
size five to eight<font color="#E5E5E5"> now let's move</font><font color="#CCCCCC"> to our</font>

204
00:10:23,130 --> 00:10:27,150
second purpose<font color="#CCCCCC"> or the</font><font color="#E5E5E5"> alternate</font><font color="#CCCCCC"> cr-v</font>

205
00:10:25,320 --> 00:10:29,640
<font color="#E5E5E5">method by a quick reminder</font><font color="#CCCCCC"> of the</font>

206
00:10:27,150 --> 00:10:33,840
original method proposed by groinal in

207
00:10:29,640 --> 00:10:39,870
2014 the idea of this method is to

208
00:10:33,840 --> 00:10:42,630
<font color="#E5E5E5">express any</font><font color="#CCCCCC"> n box as sums</font><font color="#E5E5E5"> of some terms</font>

209
00:10:39,870 --> 00:10:46,380
of products between polynomials where

210
00:10:42,630 --> 00:10:48,990
the monomials<font color="#E5E5E5"> of the P I and the Q is</font>

211
00:10:46,380 --> 00:10:53,030
belong<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> pre computed set of powers</font>

212
00:10:48,990 --> 00:10:57,300
whose exponents<font color="#E5E5E5"> lie in a</font><font color="#CCCCCC"> union set of</font><font color="#E5E5E5"> L</font>

213
00:10:53,030 --> 00:11:00,390
secret<font color="#E5E5E5"> omec classes now the evaluation</font>

214
00:10:57,300 --> 00:11:04,020
is done<font color="#E5E5E5"> in two steps first it requires</font>

215
00:11:00,390 --> 00:11:04,769
to evaluate the<font color="#E5E5E5"> Qi and the PI's which</font>

216
00:11:04,020 --> 00:11:09,810
require

217
00:11:04,769 --> 00:11:12,699
<font color="#E5E5E5">l- two multiplications and in order to</font>

218
00:11:09,810 --> 00:11:16,329
have at most<font color="#E5E5E5"> n minus two multiplications</font>

219
00:11:12,699 --> 00:11:18,250
to process this step<font color="#CCCCCC"> the set of the</font>

220
00:11:16,329 --> 00:11:22,719
<font color="#CCCCCC">union set of</font><font color="#E5E5E5"> secret</font><font color="#CCCCCC"> emma classes has to</font>

221
00:11:18,250 --> 00:11:26,100
be<font color="#E5E5E5"> chosen very very carefully now it</font>

222
00:11:22,720 --> 00:11:29,050
completes<font color="#E5E5E5"> the evaluation of s of X with</font>

223
00:11:26,100 --> 00:11:31,899
K minus<font color="#CCCCCC"> one additional multiplications</font>

224
00:11:29,050 --> 00:11:34,779
<font color="#CCCCCC">so in this method there is a</font><font color="#E5E5E5"> trade off</font>

225
00:11:31,899 --> 00:11:36,639
between L which is<font color="#E5E5E5"> the number of</font><font color="#CCCCCC"> secret</font>

226
00:11:34,779 --> 00:11:40,089
<font color="#CCCCCC">Emma classes from which the polynomials</font>

227
00:11:36,639 --> 00:11:41,319
P inq eyes are generated<font color="#E5E5E5"> and K which is</font>

228
00:11:40,089 --> 00:11:46,839
<font color="#E5E5E5">the number of</font><font color="#CCCCCC"> product between</font>

229
00:11:41,319 --> 00:11:48,399
polynomials we need to do now<font color="#E5E5E5"> since our</font>

230
00:11:46,839 --> 00:11:51,939
first purpose<font color="#E5E5E5"> of the alternate</font>

231
00:11:48,399 --> 00:11:55,240
cyclotomic method evaluates polynomial

232
00:11:51,939 --> 00:11:57,719
very efficiently we can evaluate the<font color="#CCCCCC"> PI</font>

233
00:11:55,240 --> 00:12:01,240
in the<font color="#CCCCCC"> Qi with it</font>

234
00:11:57,720 --> 00:12:03,459
mother<font color="#E5E5E5"> our method is TSN I it has been</font>

235
00:12:01,240 --> 00:12:07,139
<font color="#E5E5E5">proved to be</font><font color="#CCCCCC"> TSN I and</font><font color="#E5E5E5"> therefore it can</font>

236
00:12:03,459 --> 00:12:12,518
be<font color="#E5E5E5"> used inside the</font><font color="#CCCCCC"> crv construction very</font>

237
00:12:07,139 --> 00:12:14,649
safely right<font color="#CCCCCC"> and since our cyclotomic</font>

238
00:12:12,519 --> 00:12:18,189
method<font color="#E5E5E5"> outputs the evaluation of</font>

239
00:12:14,649 --> 00:12:20,319
polynomial in an additive masking there

240
00:12:18,189 --> 00:12:23,189
for the evaluation of s of<font color="#E5E5E5"> X is</font>

241
00:12:20,319 --> 00:12:25,209
completed in additive masking which is

242
00:12:23,189 --> 00:12:30,069
unchanged compared to the<font color="#CCCCCC"> original</font>

243
00:12:25,209 --> 00:12:34,180
method now since we use our alternate

244
00:12:30,069 --> 00:12:37,139
<font color="#E5E5E5">cyclotomic method for the first step we</font>

245
00:12:34,180 --> 00:12:39,939
have<font color="#E5E5E5"> more choice of cyclotomic classes</font>

246
00:12:37,139 --> 00:12:43,300
<font color="#E5E5E5">and also we can consider a</font><font color="#CCCCCC"> larger sets</font>

247
00:12:39,939 --> 00:12:46,660
to<font color="#E5E5E5"> further the evaluation of the</font><font color="#CCCCCC"> P I</font><font color="#E5E5E5"> and</font>

248
00:12:43,300 --> 00:12:52,990
<font color="#E5E5E5">the Q eyes and by doing</font><font color="#CCCCCC"> so we were</font><font color="#E5E5E5"> able</font>

249
00:12:46,660 --> 00:12:54,610
<font color="#CCCCCC">to derive new</font><font color="#E5E5E5"> parameters which improves</font>

250
00:12:52,990 --> 00:12:57,730
<font color="#E5E5E5">even more the performances</font><font color="#CCCCCC"> of our</font>

251
00:12:54,610 --> 00:13:03,699
solution we also<font color="#E5E5E5"> have proved</font><font color="#CCCCCC"> that the</font>

252
00:12:57,730 --> 00:13:05,980
<font color="#E5E5E5">alternate cr-v method is TSN</font><font color="#CCCCCC"> I now</font>

253
00:13:03,699 --> 00:13:08,079
regarding<font color="#E5E5E5"> the performances we also did</font>

254
00:13:05,980 --> 00:13:15,730
some implementation directly in assembly

255
00:13:08,079 --> 00:13:16,270
language for<font color="#E5E5E5"> 8-bit architecture and the</font>

256
00:13:15,730 --> 00:13:19,540
performance

257
00:13:16,270 --> 00:13:22,300
<font color="#E5E5E5">she's done for</font><font color="#CCCCCC"> n bit s boxes of size</font>

258
00:13:19,540 --> 00:13:25,329
<font color="#E5E5E5">four to eight like for the</font><font color="#CCCCCC"> alternate</font>

259
00:13:22,300 --> 00:13:27,609
<font color="#E5E5E5">academic method at others one two and</font>

260
00:13:25,330 --> 00:13:31,120
three<font color="#E5E5E5"> and what the table shows now is</font>

261
00:13:27,610 --> 00:13:35,140
that<font color="#E5E5E5"> our proposal</font><font color="#CCCCCC"> is more efficient than</font>

262
00:13:31,120 --> 00:13:40,630
<font color="#CCCCCC">the original one by nearly</font><font color="#E5E5E5"> 30% for s</font>

263
00:13:35,140 --> 00:13:45,550
<font color="#CCCCCC">boxes of size</font><font color="#E5E5E5"> five to eight now</font><font color="#CCCCCC"> to</font>

264
00:13:40,630 --> 00:13:48,520
summarize<font color="#CCCCCC"> our contribution we have</font>

265
00:13:45,550 --> 00:13:51,459
proved that the<font color="#E5E5E5"> gpq scheme actually</font>

266
00:13:48,520 --> 00:13:53,590
<font color="#CCCCCC">satisfies the stronger</font><font color="#E5E5E5"> property in the</font>

267
00:13:51,460 --> 00:13:57,580
<font color="#CCCCCC">prodding model which is the GS ni</font>

268
00:13:53,590 --> 00:13:59,620
requirement we<font color="#CCCCCC"> have also extended GP q</font>

269
00:13:57,580 --> 00:14:02,110
power function<font color="#CCCCCC"> masking schemes to</font>

270
00:13:59,620 --> 00:14:04,120
evaluate polynomial functions which

271
00:14:02,110 --> 00:14:06,790
results in an alternate<font color="#E5E5E5"> cyclotomic</font>

272
00:14:04,120 --> 00:14:07,930
method which is three times<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> than</font>

273
00:14:06,790 --> 00:14:11,290
<font color="#E5E5E5">the</font><font color="#CCCCCC"> original one</font>

274
00:14:07,930 --> 00:14:14,229
and this method<font color="#E5E5E5"> satisfies the PSNI</font>

275
00:14:11,290 --> 00:14:16,949
property and therefore can be<font color="#E5E5E5"> safely</font>

276
00:14:14,230 --> 00:14:21,490
plugged<font color="#CCCCCC"> into</font><font color="#E5E5E5"> another larger construction</font>

277
00:14:16,950 --> 00:14:24,040
which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> CRV met method and it</font>

278
00:14:21,490 --> 00:14:26,740
results<font color="#E5E5E5"> in an alternate CRV method which</font>

279
00:14:24,040 --> 00:14:31,000
<font color="#E5E5E5">are performs the original for most</font>

280
00:14:26,740 --> 00:14:33,910
<font color="#E5E5E5">scenarios redressed we also proved that</font>

281
00:14:31,000 --> 00:14:39,420
<font color="#CCCCCC">our second</font><font color="#E5E5E5"> proposal satisfy the</font><font color="#CCCCCC"> TSI</font>

282
00:14:33,910 --> 00:14:39,420
<font color="#CCCCCC">poverty thanks for your attention</font>

283
00:14:44,569 --> 00:14:49,309
thank you<font color="#E5E5E5"> we have time</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> questions</font>

284
00:14:51,470 --> 00:14:58,889
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> for the talk can you</font><font color="#E5E5E5"> comment</font>

285
00:14:55,230 --> 00:15:01,859
on how<font color="#E5E5E5"> you perform the secure</font><font color="#CCCCCC"> possession</font>

286
00:14:58,889 --> 00:15:04,109
of the<font color="#E5E5E5"> drug function at i/o those with</font>

287
00:15:01,859 --> 00:15:06,959
<font color="#E5E5E5">efficiency yeah we did</font>

288
00:15:04,109 --> 00:15:12,089
<font color="#CCCCCC">implemented</font><font color="#E5E5E5"> that using bit slicing which</font>

289
00:15:06,959 --> 00:15:13,799
is a bit<font color="#E5E5E5"> tricky because this is not you</font>

290
00:15:12,089 --> 00:15:15,989
you cannot do you cannot perform<font color="#E5E5E5"> a</font>

291
00:15:13,799 --> 00:15:17,790
security<font color="#CCCCCC"> rack function without bit</font>

292
00:15:15,989 --> 00:15:21,199
slicing very efficiently so<font color="#CCCCCC"> we had to do</font>

293
00:15:17,790 --> 00:15:26,669
bit slicing<font color="#E5E5E5"> okay thank you</font>

294
00:15:21,199 --> 00:15:28,310
and<font color="#CCCCCC"> user Christian let's thank the</font>

295
00:15:26,669 --> 00:15:34,750
speaker<font color="#CCCCCC"> again</font>

296
00:15:28,310 --> 00:15:34,750
[Applause]

