1
00:00:04,430 --> 00:00:09,750
so the final<font color="#E5E5E5"> talk of this session how</font>

2
00:00:07,379 --> 00:00:11,969
implementation is from<font color="#CCCCCC"> low</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> amaya</font>

3
00:00:09,750 --> 00:00:14,639
<font color="#CCCCCC">I mean mihari and felix Vigna a fix is</font>

4
00:00:11,969 --> 00:00:16,650
given a talk<font color="#E5E5E5"> it's called spin me right</font>

5
00:00:14,639 --> 00:00:19,169
round rotational symmetry for<font color="#E5E5E5"> fpga</font>

6
00:00:16,650 --> 00:00:20,070
specific areas yeah thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font>

7
00:00:19,170 --> 00:00:23,359
kind introduction

8
00:00:20,070 --> 00:00:26,220
so<font color="#E5E5E5"> fpga specific what does that mean</font>

9
00:00:23,359 --> 00:00:27,960
let's start with mapping a boolean

10
00:00:26,220 --> 00:00:29,910
function to an ASIC what you would

11
00:00:27,960 --> 00:00:32,040
usually consider is how does<font color="#E5E5E5"> it look</font>

12
00:00:29,910 --> 00:00:33,750
like in the terms<font color="#E5E5E5"> of gates and gates</font>

13
00:00:32,040 --> 00:00:37,050
have a specific function<font color="#CCCCCC"> and they have</font>

14
00:00:33,750 --> 00:00:39,180
very few<font color="#CCCCCC"> inputs</font><font color="#E5E5E5"> now for FPGA devices</font>

15
00:00:37,050 --> 00:00:40,820
<font color="#E5E5E5">it's a completely different story what</font>

16
00:00:39,180 --> 00:00:43,860
you have<font color="#E5E5E5"> here is look-up tables</font>

17
00:00:40,820 --> 00:00:46,200
<font color="#E5E5E5">specifically in the Xilinx</font><font color="#CCCCCC"> 6 and</font><font color="#E5E5E5"> c 7</font>

18
00:00:43,860 --> 00:00:48,629
series we<font color="#E5E5E5"> looked at you have looked six</font>

19
00:00:46,200 --> 00:00:50,820
tables that means an arbitrary boolean

20
00:00:48,629 --> 00:00:52,739
function that depends<font color="#E5E5E5"> on six input bits</font>

21
00:00:50,820 --> 00:00:55,710
and one<font color="#CCCCCC"> output bit can just be</font>

22
00:00:52,739 --> 00:00:57,989
represented in one load<font color="#E5E5E5"> so if you try to</font>

23
00:00:55,710 --> 00:00:59,460
do area<font color="#CCCCCC"> optimization on that of course</font>

24
00:00:57,989 --> 00:01:01,980
<font color="#E5E5E5">you have to think</font><font color="#CCCCCC"> about very different</font>

25
00:00:59,460 --> 00:01:04,170
things<font color="#CCCCCC"> yeah you have to break</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> your</font>

26
00:01:01,980 --> 00:01:06,750
function in<font color="#E5E5E5"> that component and it's very</font>

27
00:01:04,170 --> 00:01:08,549
much important on how many input bits

28
00:01:06,750 --> 00:01:11,040
something depends it does not matter

29
00:01:08,549 --> 00:01:12,720
that<font color="#E5E5E5"> much what</font><font color="#CCCCCC"> the edge</font><font color="#E5E5E5"> abroad degree is</font>

30
00:01:11,040 --> 00:01:14,580
for example<font color="#CCCCCC"> or the</font><font color="#E5E5E5"> multiplicative</font>

31
00:01:12,720 --> 00:01:16,408
complexity<font color="#CCCCCC"> of something and you should</font>

32
00:01:14,580 --> 00:01:18,539
<font color="#CCCCCC">of course not waste the inputs</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font>

33
00:01:16,409 --> 00:01:21,930
you should<font color="#E5E5E5"> most definitely always use</font>

34
00:01:18,540 --> 00:01:23,520
the<font color="#E5E5E5"> six input bits if you can to add to</font>

35
00:01:21,930 --> 00:01:27,180
hide a complex function in a lookup

36
00:01:23,520 --> 00:01:29,520
table<font color="#E5E5E5"> now going to more complex blocks</font>

37
00:01:27,180 --> 00:01:33,810
<font color="#E5E5E5">an FPGA is further structured into</font>

38
00:01:29,520 --> 00:01:35,899
slices<font color="#CCCCCC"> and the slice contains four nodes</font>

39
00:01:33,810 --> 00:01:39,150
<font color="#E5E5E5">six elements and some additional</font>

40
00:01:35,900 --> 00:01:41,070
multiplexers also some registers though

41
00:01:39,150 --> 00:01:43,200
<font color="#CCCCCC">I chose</font><font color="#E5E5E5"> not to illustrate them here</font>

42
00:01:41,070 --> 00:01:44,939
because<font color="#CCCCCC"> I want to get one very</font><font color="#E5E5E5"> crucial</font>

43
00:01:43,200 --> 00:01:48,500
point across<font color="#E5E5E5"> on this slide and this is</font>

44
00:01:44,939 --> 00:01:53,070
<font color="#CCCCCC">there you can think</font><font color="#E5E5E5"> about one slice as</font>

45
00:01:48,500 --> 00:01:56,250
as<font color="#E5E5E5"> a bigger lookup table that depends on</font>

46
00:01:53,070 --> 00:01:57,960
<font color="#E5E5E5">eight bits so basically just keep in</font>

47
00:01:56,250 --> 00:02:01,049
<font color="#CCCCCC">mind for the rest</font><font color="#E5E5E5"> of the talk</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> only</font>

48
00:01:57,960 --> 00:02:02,789
one slice you<font color="#CCCCCC"> can realize an arbitrary</font>

49
00:02:01,049 --> 00:02:06,990
boolean function that depends<font color="#E5E5E5"> on eight</font>

50
00:02:02,790 --> 00:02:09,000
input bits and has one<font color="#CCCCCC"> output bit so</font>

51
00:02:06,990 --> 00:02:12,359
enough of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> basics now let's apply</font>

52
00:02:09,000 --> 00:02:13,319
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> are looking</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the AES sbox so</font>

53
00:02:12,360 --> 00:02:14,879
<font color="#CCCCCC">to</font>

54
00:02:13,319 --> 00:02:16,828
recall but you already<font color="#E5E5E5"> saw it in a</font>

55
00:02:14,879 --> 00:02:19,379
previous<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> we're thinking about the</font>

56
00:02:16,829 --> 00:02:21,239
inversion in a finite field here and we

57
00:02:19,379 --> 00:02:25,649
can also represent<font color="#E5E5E5"> it as a power map</font>

58
00:02:21,239 --> 00:02:27,930
with the exponent<font color="#CCCCCC"> 250 for now and next</font>

59
00:02:25,650 --> 00:02:29,549
<font color="#E5E5E5">there's also an affine function but</font>

60
00:02:27,930 --> 00:02:31,379
please just disregard that<font color="#E5E5E5"> for now</font>

61
00:02:29,549 --> 00:02:32,969
because<font color="#CCCCCC"> we can just easily integrate</font>

62
00:02:31,379 --> 00:02:34,828
that somewhere in our<font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> structure</font>

63
00:02:32,969 --> 00:02:37,260
<font color="#E5E5E5">I will also show you where</font><font color="#CCCCCC"> exactly we do</font>

64
00:02:34,829 --> 00:02:41,969
that so let's just<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about the power</font>

65
00:02:37,260 --> 00:02:45,358
map itself as the AES sbox<font color="#E5E5E5"> now we want</font>

66
00:02:41,969 --> 00:02:47,430
to realize<font color="#E5E5E5"> that in an FPGA device how</font>

67
00:02:45,359 --> 00:02:49,739
are we going<font color="#CCCCCC"> to do that now</font>

68
00:02:47,430 --> 00:02:52,260
the<font color="#CCCCCC"> naive idea would be</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> just take</font>

69
00:02:49,739 --> 00:02:55,680
<font color="#E5E5E5">each of the</font><font color="#CCCCCC"> eight output components</font>

70
00:02:52,260 --> 00:02:58,980
because you map<font color="#CCCCCC"> eight bits to eight bits</font>

71
00:02:55,680 --> 00:03:01,739
<font color="#CCCCCC">in a separate slice</font><font color="#E5E5E5"> of course that is</font>

72
00:02:58,980 --> 00:03:04,319
rather naive you can directly implement

73
00:03:01,739 --> 00:03:06,510
<font color="#E5E5E5">that in a few minutes</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> there's a</font>

74
00:03:04,319 --> 00:03:08,369
<font color="#E5E5E5">more elaborate approach so if you look</font>

75
00:03:06,510 --> 00:03:10,560
at the algebraic degree it's very very

76
00:03:08,370 --> 00:03:13,769
high so it's not really<font color="#CCCCCC"> clear how to do</font>

77
00:03:10,560 --> 00:03:15,419
that<font color="#CCCCCC"> if you look at approaches we</font>

78
00:03:13,769 --> 00:03:17,819
already know for example<font color="#CCCCCC"> they can</font><font color="#E5E5E5"> write</font>

79
00:03:15,419 --> 00:03:20,310
<font color="#CCCCCC">sbox</font><font color="#E5E5E5"> to just represent</font><font color="#CCCCCC"> it in a talk and</font>

80
00:03:17,819 --> 00:03:22,560
<font color="#CCCCCC">at</font><font color="#E5E5E5"> our field based on normal basis it</font>

81
00:03:20,310 --> 00:03:24,449
doesn't really suit the<font color="#E5E5E5"> the structure of</font>

82
00:03:22,560 --> 00:03:26,069
an FPGA for a reason I<font color="#CCCCCC"> told you in</font><font color="#E5E5E5"> the</font>

83
00:03:24,449 --> 00:03:28,379
<font color="#E5E5E5">first slide because then you</font><font color="#CCCCCC"> just waste</font>

84
00:03:26,069 --> 00:03:29,759
<font color="#E5E5E5">input bits in a little six you should</font>

85
00:03:28,379 --> 00:03:31,709
have a function depending on six bits

86
00:03:29,759 --> 00:03:33,358
<font color="#E5E5E5">but in a tower field you have</font><font color="#CCCCCC"> a function</font>

87
00:03:31,709 --> 00:03:35,579
depending on<font color="#CCCCCC"> four bids or two bits</font>

88
00:03:33,359 --> 00:03:38,970
<font color="#E5E5E5">depending</font><font color="#CCCCCC"> on how how deep you go</font><font color="#E5E5E5"> in the</font>

89
00:03:35,579 --> 00:03:41,549
tower field so<font color="#E5E5E5"> none</font><font color="#CCCCCC"> of that really</font><font color="#E5E5E5"> works</font>

90
00:03:38,970 --> 00:03:44,759
and so far most implementations<font color="#E5E5E5"> just use</font>

91
00:03:41,549 --> 00:03:46,829
the naive implementation of it now our

92
00:03:44,759 --> 00:03:49,559
contribution here in this talk<font color="#E5E5E5"> is how</font><font color="#CCCCCC"> to</font>

93
00:03:46,829 --> 00:03:53,430
<font color="#E5E5E5">reduce</font><font color="#CCCCCC"> that by</font><font color="#E5E5E5"> 50%</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> eight</font><font color="#CCCCCC"> slices to</font>

94
00:03:49,560 --> 00:03:56,549
only<font color="#E5E5E5"> four slices now how are we going to</font>

95
00:03:53,430 --> 00:03:59,729
do<font color="#E5E5E5"> that we need some</font><font color="#CCCCCC"> help</font><font color="#E5E5E5"> from the</font>

96
00:03:56,549 --> 00:04:01,650
theory perspective<font color="#CCCCCC"> so one rotation first</font>

97
00:03:59,729 --> 00:04:04,759
<font color="#E5E5E5">so first of all we</font><font color="#CCCCCC"> consider the</font>

98
00:04:01,650 --> 00:04:07,229
inversion represented as a power map we

99
00:04:04,759 --> 00:04:09,509
will<font color="#E5E5E5"> have a conversion function to the</font>

100
00:04:07,229 --> 00:04:11,669
normal base the normal base is<font color="#CCCCCC"> just a</font>

101
00:04:09,509 --> 00:04:13,858
different base similar to the polynomial

102
00:04:11,669 --> 00:04:16,769
base having different kind of properties

103
00:04:13,859 --> 00:04:19,650
<font color="#CCCCCC">and we need the rotation</font><font color="#E5E5E5"> of bits</font><font color="#CCCCCC"> so you</font>

104
00:04:16,769 --> 00:04:23,000
can think of the simple rotation<font color="#E5E5E5"> in a</font>

105
00:04:19,649 --> 00:04:26,940
register<font color="#E5E5E5"> just just a usual rotate and</font>

106
00:04:23,000 --> 00:04:29,490
yeah with those terms we can borrow

107
00:04:26,940 --> 00:04:31,830
<font color="#CCCCCC">REME from diamond and all</font><font color="#E5E5E5"> stating that</font>

108
00:04:29,490 --> 00:04:34,200
if you have a power map<font color="#E5E5E5"> and you</font>

109
00:04:31,830 --> 00:04:36,450
represent it in the<font color="#E5E5E5"> normal base you call</font>

110
00:04:34,200 --> 00:04:38,580
this new function s and this<font color="#E5E5E5"> function</font>

111
00:04:36,450 --> 00:04:40,950
has<font color="#CCCCCC"> a certain</font><font color="#E5E5E5"> property and this property</font>

112
00:04:38,580 --> 00:04:43,590
is called<font color="#E5E5E5"> rotational symmetry it means</font>

113
00:04:40,950 --> 00:04:46,310
if you rotate the<font color="#E5E5E5"> input bits through the</font>

114
00:04:43,590 --> 00:04:48,750
output<font color="#CCCCCC"> bits are</font><font color="#E5E5E5"> also rotated through and</font>

115
00:04:46,310 --> 00:04:49,950
I will<font color="#E5E5E5"> now show</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> how to use that for</font>

116
00:04:48,750 --> 00:04:51,960
<font color="#E5E5E5">hardware implementation</font>

117
00:04:49,950 --> 00:04:56,219
so let's first illustrate<font color="#E5E5E5"> that a bit</font>

118
00:04:51,960 --> 00:04:59,219
<font color="#CCCCCC">further let's consider this s star</font><font color="#E5E5E5"> is</font>

119
00:04:56,220 --> 00:05:02,610
<font color="#E5E5E5">just realizing one component of the S</font>

120
00:04:59,220 --> 00:05:05,070
box we target<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have all the input bits</font>

121
00:05:02,610 --> 00:05:08,250
and now we<font color="#CCCCCC"> rotate</font><font color="#E5E5E5"> the inputs bits</font>

122
00:05:05,070 --> 00:05:11,250
<font color="#E5E5E5">through by one position we get the next</font>

123
00:05:08,250 --> 00:05:13,050
output<font color="#E5E5E5"> bit by another position and the</font>

124
00:05:11,250 --> 00:05:15,750
next output<font color="#CCCCCC"> bit yeah we can do that all</font>

125
00:05:13,050 --> 00:05:17,370
the<font color="#E5E5E5"> way</font><font color="#CCCCCC"> to get all the output bits now</font>

126
00:05:15,750 --> 00:05:20,310
we<font color="#E5E5E5"> gained quite a lot from this because</font>

127
00:05:17,370 --> 00:05:22,920
we only realize the LSB of<font color="#E5E5E5"> this S box</font><font color="#CCCCCC"> in</font>

128
00:05:20,310 --> 00:05:26,010
a<font color="#E5E5E5"> circuit and not all eight coordinates</font>

129
00:05:22,920 --> 00:05:29,100
separately so now now let's look<font color="#E5E5E5"> at a</font>

130
00:05:26,010 --> 00:05:30,110
real circuit how to how<font color="#E5E5E5"> to realize that</font>

131
00:05:29,100 --> 00:05:35,820
in hardware

132
00:05:30,110 --> 00:05:38,040
so our<font color="#E5E5E5"> AES sbox proposal</font><font color="#CCCCCC"> takes a</font><font color="#E5E5E5"> bite</font>

133
00:05:35,820 --> 00:05:40,409
and first<font color="#E5E5E5"> it converts that from the</font>

134
00:05:38,040 --> 00:05:43,140
standard polynomial base to the normal

135
00:05:40,410 --> 00:05:45,570
base then it is in one<font color="#CCCCCC"> rotation and</font>

136
00:05:43,140 --> 00:05:49,110
register<font color="#E5E5E5"> and the function s star is</font>

137
00:05:45,570 --> 00:05:51,090
evaluated on it in each cycle<font color="#E5E5E5"> and the</font>

138
00:05:49,110 --> 00:05:53,610
results<font color="#E5E5E5"> always shift</font><font color="#CCCCCC"> into a second</font>

139
00:05:51,090 --> 00:05:55,229
<font color="#E5E5E5">register where this is buffered until it</font>

140
00:05:53,610 --> 00:05:57,840
is complete and then it is converted

141
00:05:55,230 --> 00:06:01,140
<font color="#CCCCCC">back from the normal base to the</font>

142
00:05:57,840 --> 00:06:02,729
polynomial base and if by<font color="#CCCCCC"> now you're</font>

143
00:06:01,140 --> 00:06:04,590
still worried about<font color="#E5E5E5"> whether</font><font color="#CCCCCC"> you're fine</font>

144
00:06:02,730 --> 00:06:06,570
function is the affine function can<font color="#CCCCCC"> be</font>

145
00:06:04,590 --> 00:06:08,400
hidden here<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the entropy conversion</font>

146
00:06:06,570 --> 00:06:10,230
this is a linear<font color="#E5E5E5"> function by itself</font><font color="#CCCCCC"> so</font>

147
00:06:08,400 --> 00:06:14,070
you can<font color="#CCCCCC"> easily integrate</font><font color="#E5E5E5"> the affine part</font>

148
00:06:10,230 --> 00:06:15,960
of the<font color="#E5E5E5"> AES</font><font color="#CCCCCC"> sbox into that</font><font color="#E5E5E5"> yeah and we</font>

149
00:06:14,070 --> 00:06:17,640
<font color="#CCCCCC">actually found a normal base to realize</font>

150
00:06:15,960 --> 00:06:22,710
this<font color="#E5E5E5"> whole construction</font><font color="#CCCCCC"> in only</font><font color="#E5E5E5"> eight</font>

151
00:06:17,640 --> 00:06:25,169
cycles<font color="#E5E5E5"> and in only four slices so this</font>

152
00:06:22,710 --> 00:06:27,270
is<font color="#E5E5E5"> only</font><font color="#CCCCCC"> an sbox so what we now want</font><font color="#E5E5E5"> to</font>

153
00:06:25,169 --> 00:06:29,400
do is of<font color="#CCCCCC"> course have the full a es and</font>

154
00:06:27,270 --> 00:06:32,909
show that<font color="#CCCCCC"> this is actually worthwhile</font><font color="#E5E5E5"> to</font>

155
00:06:29,400 --> 00:06:35,880
use<font color="#E5E5E5"> it</font><font color="#CCCCCC"> what we do is we look</font><font color="#E5E5E5"> at the</font>

156
00:06:32,910 --> 00:06:38,100
former record by the<font color="#E5E5E5"> Sahara they</font><font color="#CCCCCC"> manage</font>

157
00:06:35,880 --> 00:06:38,889
to<font color="#CCCCCC"> implement</font><font color="#E5E5E5"> AES on as eiling's</font>

158
00:06:38,100 --> 00:06:43,479
spot

159
00:06:38,889 --> 00:06:45,370
<font color="#E5E5E5">six and only 21 slices so they use some</font>

160
00:06:43,479 --> 00:06:47,650
interesting points<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example to</font>

161
00:06:45,370 --> 00:06:49,840
<font color="#CCCCCC">represent the key</font><font color="#E5E5E5"> and the state they use</font>

162
00:06:47,650 --> 00:06:53,020
<font color="#E5E5E5">distributed</font><font color="#CCCCCC"> ram they used a</font><font color="#E5E5E5"> very</font>

163
00:06:49,840 --> 00:06:54,580
unconventional<font color="#E5E5E5"> way to compute</font><font color="#CCCCCC"> mixed</font>

164
00:06:53,020 --> 00:06:57,219
<font color="#CCCCCC">columns so they can reduce the memory</font>

165
00:06:54,580 --> 00:06:59,020
<font color="#CCCCCC">footprint and this is all really good</font>

166
00:06:57,219 --> 00:07:02,080
<font color="#CCCCCC">and there's</font><font color="#E5E5E5"> a huge reduction in the</font>

167
00:06:59,020 --> 00:07:06,188
number of<font color="#E5E5E5"> slices</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only problem is</font>

168
00:07:02,080 --> 00:07:07,919
they use<font color="#E5E5E5"> the naive</font><font color="#CCCCCC"> s box which is good</font>

169
00:07:06,189 --> 00:07:11,800
<font color="#E5E5E5">for us in that sense because we can just</font>

170
00:07:07,919 --> 00:07:13,930
<font color="#E5E5E5">replace</font><font color="#CCCCCC"> it with our s box and the</font>

171
00:07:11,800 --> 00:07:15,729
reduction I just showed just translates

172
00:07:13,930 --> 00:07:19,270
to the whole design so due<font color="#CCCCCC"> to the</font>

173
00:07:15,729 --> 00:07:21,580
reduced<font color="#E5E5E5"> s box we get</font><font color="#CCCCCC"> a total design</font><font color="#E5E5E5"> here</font>

174
00:07:19,270 --> 00:07:29,049
<font color="#CCCCCC">that is minimal in the number</font><font color="#E5E5E5"> of slices</font>

175
00:07:21,580 --> 00:07:31,330
with only<font color="#E5E5E5"> 17 slices okay so next I want</font>

176
00:07:29,050 --> 00:07:33,849
to present another<font color="#E5E5E5"> design because maybe</font>

177
00:07:31,330 --> 00:07:35,948
it is also worthwhile<font color="#E5E5E5"> to not just start</font>

178
00:07:33,849 --> 00:07:39,099
with an FPGA design but<font color="#E5E5E5"> maybe start</font><font color="#CCCCCC"> with</font>

179
00:07:35,949 --> 00:07:41,979
the best the smallest<font color="#E5E5E5"> ASIC design poured</font>

180
00:07:39,099 --> 00:07:45,729
it to<font color="#E5E5E5"> FPGAs and then apply our ratash</font>

181
00:07:41,979 --> 00:07:49,120
rotational symmetry so as you may

182
00:07:45,729 --> 00:07:50,949
remember<font color="#E5E5E5"> from last year's chess this is</font>

183
00:07:49,120 --> 00:07:54,009
the bit sliding design presented<font color="#E5E5E5"> there</font>

184
00:07:50,949 --> 00:07:55,509
and what we're now<font color="#E5E5E5"> going to do is look</font>

185
00:07:54,009 --> 00:07:57,699
at<font color="#E5E5E5"> the components and I will tell you</font>

186
00:07:55,509 --> 00:08:00,819
<font color="#CCCCCC">how to optimize them for</font><font color="#E5E5E5"> FPGA</font>

187
00:07:57,699 --> 00:08:04,330
<font color="#E5E5E5">implementations the first thing you</font>

188
00:08:00,819 --> 00:08:08,800
should<font color="#E5E5E5"> have a look at is the S box</font><font color="#CCCCCC"> so it</font>

189
00:08:04,330 --> 00:08:10,960
<font color="#E5E5E5">uses an only a</font><font color="#CCCCCC"> 1 bit</font><font color="#E5E5E5"> data path so we</font><font color="#CCCCCC"> use</font>

190
00:08:08,800 --> 00:08:16,089
an 8 bit<font color="#E5E5E5"> data path so</font><font color="#CCCCCC"> far so we have to</font>

191
00:08:10,960 --> 00:08:19,810
<font color="#E5E5E5">slightly adapt that</font><font color="#CCCCCC"> ok so in our fully</font>

192
00:08:16,089 --> 00:08:22,089
bit serial<font color="#CCCCCC"> s</font><font color="#E5E5E5"> box</font><font color="#CCCCCC"> it's yeah it's only</font>

193
00:08:19,810 --> 00:08:26,649
slightly<font color="#CCCCCC"> different so the the main</font>

194
00:08:22,089 --> 00:08:29,830
difference is<font color="#E5E5E5"> that the that the X is</font>

195
00:08:26,649 --> 00:08:32,708
shifted in<font color="#E5E5E5"> bit serially and his first</font>

196
00:08:29,830 --> 00:08:34,809
buffered in<font color="#E5E5E5"> a register and after all the</font>

197
00:08:32,708 --> 00:08:37,059
bits are there<font color="#E5E5E5"> the transformation to the</font>

198
00:08:34,809 --> 00:08:39,698
normal base happens<font color="#CCCCCC"> right</font><font color="#E5E5E5"> sit back into</font>

199
00:08:37,059 --> 00:08:42,489
<font color="#E5E5E5">the</font><font color="#CCCCCC"> register and then it starts as you</font>

200
00:08:39,698 --> 00:08:44,769
already<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that the s stars valuated</font>

201
00:08:42,490 --> 00:08:47,970
cycle wise<font color="#CCCCCC"> honored it's</font><font color="#E5E5E5"> written</font><font color="#CCCCCC"> to the</font>

202
00:08:44,769 --> 00:08:50,440
other register and converted back so

203
00:08:47,970 --> 00:08:52,720
unsurprisingly<font color="#CCCCCC"> this has of course a</font>

204
00:08:50,440 --> 00:08:55,300
lower a higher latency<font color="#E5E5E5"> so</font>

205
00:08:52,720 --> 00:08:58,300
we need<font color="#E5E5E5"> 16 cycles here because we need</font>

206
00:08:55,300 --> 00:09:01,599
<font color="#CCCCCC">8-bit 8 cycles to shift the operand in</font>

207
00:08:58,300 --> 00:09:03,729
but again here we found a normal base

208
00:09:01,600 --> 00:09:06,279
that is very suitable for<font color="#E5E5E5"> area</font>

209
00:09:03,730 --> 00:09:11,199
minimizations<font color="#CCCCCC"> and with that we</font><font color="#E5E5E5"> can</font>

210
00:09:06,279 --> 00:09:13,720
actually realize it in<font color="#CCCCCC"> four slices now</font>

211
00:09:11,199 --> 00:09:15,839
the other part<font color="#CCCCCC"> of the design</font><font color="#E5E5E5"> is both the</font>

212
00:09:13,720 --> 00:09:18,310
state and<font color="#CCCCCC"> the mixcolumns</font>

213
00:09:15,839 --> 00:09:19,829
<font color="#E5E5E5">most interesting is</font><font color="#CCCCCC"> the state which is</font>

214
00:09:18,310 --> 00:09:23,018
here

215
00:09:19,829 --> 00:09:25,599
<font color="#E5E5E5">yeah separated in 8-bit chunks using</font>

216
00:09:23,019 --> 00:09:28,240
<font color="#E5E5E5">scan flip-flops and we do not have</font><font color="#CCCCCC"> those</font>

217
00:09:25,600 --> 00:09:30,970
<font color="#CCCCCC">things on FPGA devices so we</font><font color="#E5E5E5"> have to</font>

218
00:09:28,240 --> 00:09:33,279
somehow solve<font color="#E5E5E5"> that differently</font><font color="#CCCCCC"> and what</font>

219
00:09:30,970 --> 00:09:37,329
we chose<font color="#CCCCCC"> to do is instead represent the</font>

220
00:09:33,279 --> 00:09:39,699
state<font color="#E5E5E5"> in 32-bit registers but not</font>

221
00:09:37,329 --> 00:09:42,849
naively but we used a lookup table as a

222
00:09:39,699 --> 00:09:45,128
32-bit shift register<font color="#E5E5E5"> this of</font><font color="#CCCCCC"> course</font>

223
00:09:42,850 --> 00:09:47,519
<font color="#E5E5E5">allows</font><font color="#CCCCCC"> us to realize that in a really</font>

224
00:09:45,129 --> 00:09:50,290
really minimal space of only one slice

225
00:09:47,519 --> 00:09:52,660
but the latency<font color="#E5E5E5"> is of course increased</font>

226
00:09:50,290 --> 00:09:54,849
because<font color="#E5E5E5"> now the shift</font><font color="#CCCCCC"> rose has to</font>

227
00:09:52,660 --> 00:09:58,899
<font color="#CCCCCC">actually shift through the entire 32</font>

228
00:09:54,850 --> 00:10:01,389
bits<font color="#CCCCCC"> the other thing is the mixcolumns</font>

229
00:09:58,899 --> 00:10:03,670
<font color="#E5E5E5">operation which due to some</font>

230
00:10:01,389 --> 00:10:05,800
optimizations we did<font color="#E5E5E5"> also fits very</font>

231
00:10:03,670 --> 00:10:09,040
neatly in only<font color="#CCCCCC"> six look-up tables and</font>

232
00:10:05,800 --> 00:10:12,000
<font color="#E5E5E5">four flip-flops now if you take</font>

233
00:10:09,040 --> 00:10:15,069
everything<font color="#E5E5E5"> I just said together and you</font>

234
00:10:12,000 --> 00:10:17,589
<font color="#E5E5E5">you receive an optimized</font><font color="#CCCCCC"> design which is</font>

235
00:10:15,069 --> 00:10:19,990
also<font color="#E5E5E5"> area optimal but here not in the</font>

236
00:10:17,589 --> 00:10:24,970
terms<font color="#E5E5E5"> of slices but in the terms of</font>

237
00:10:19,990 --> 00:10:27,519
look-up tables so this is the first

238
00:10:24,970 --> 00:10:29,379
comparison in this talk the first row

239
00:10:27,519 --> 00:10:31,269
shows<font color="#E5E5E5"> the former record by the</font><font color="#CCCCCC"> stew</font>

240
00:10:29,379 --> 00:10:34,360
header and then you can see<font color="#E5E5E5"> on the</font>

241
00:10:31,269 --> 00:10:38,620
second row our design optimized for the

242
00:10:34,360 --> 00:10:41,199
number<font color="#E5E5E5"> of slices 17 slices and on row 3</font>

243
00:10:38,620 --> 00:10:44,860
our design<font color="#E5E5E5"> with the minimum</font><font color="#CCCCCC"> number of</font>

244
00:10:41,199 --> 00:10:47,740
look-up tables in terms of clock<font color="#E5E5E5"> cycles</font>

245
00:10:44,860 --> 00:10:51,639
<font color="#E5E5E5">of course the latency is increased but</font>

246
00:10:47,740 --> 00:10:54,250
this is not exactly about<font color="#CCCCCC"> an area</font>

247
00:10:51,639 --> 00:10:57,040
latency<font color="#E5E5E5"> trade-off</font><font color="#CCCCCC"> it is just</font><font color="#E5E5E5"> about</font>

248
00:10:54,250 --> 00:11:03,100
<font color="#E5E5E5">providing a new area record for FPGA</font>

249
00:10:57,040 --> 00:11:05,290
devices<font color="#CCCCCC"> now let's go further and talk</font>

250
00:11:03,100 --> 00:11:06,490
<font color="#E5E5E5">about</font><font color="#CCCCCC"> side-channel</font><font color="#E5E5E5"> protection because</font>

251
00:11:05,290 --> 00:11:08,949
it's nice<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a small</font>

252
00:11:06,490 --> 00:11:11,230
unprotected<font color="#CCCCCC"> design</font><font color="#E5E5E5"> but it would be even</font>

253
00:11:08,950 --> 00:11:14,500
<font color="#CCCCCC">nicer to</font><font color="#E5E5E5"> have a protected really small</font>

254
00:11:11,230 --> 00:11:16,570
design so we<font color="#CCCCCC"> actually are going to</font>

255
00:11:14,500 --> 00:11:21,010
<font color="#E5E5E5">continue the last design I presented the</font>

256
00:11:16,570 --> 00:11:24,760
<font color="#CCCCCC">bit sliding design</font><font color="#E5E5E5"> and we need some more</font>

257
00:11:21,010 --> 00:11:26,589
mathematics here<font color="#CCCCCC"> so first of all you</font>

258
00:11:24,760 --> 00:11:29,080
<font color="#E5E5E5">still remember</font><font color="#CCCCCC"> that we consider the</font>

259
00:11:26,589 --> 00:11:31,060
power function and we're going<font color="#CCCCCC"> to</font>

260
00:11:29,080 --> 00:11:34,180
decompose<font color="#E5E5E5"> this power function now into</font>

261
00:11:31,060 --> 00:11:37,959
two separate power functions<font color="#E5E5E5"> the</font>

262
00:11:34,180 --> 00:11:39,729
<font color="#CCCCCC">exponents are</font><font color="#E5E5E5"> 26 and 49 this was first</font>

263
00:11:37,959 --> 00:11:43,569
suggested<font color="#CCCCCC"> by Moratti</font>

264
00:11:39,730 --> 00:11:45,279
and<font color="#E5E5E5"> we are now because we still have</font>

265
00:11:43,570 --> 00:11:47,490
power functions yeah this is not just

266
00:11:45,279 --> 00:11:49,480
some<font color="#CCCCCC"> arbitrary decomposition into</font>

267
00:11:47,490 --> 00:11:52,570
<font color="#E5E5E5">ejective functions but it's very</font>

268
00:11:49,480 --> 00:11:55,209
important to<font color="#E5E5E5"> still harness the power map</font>

269
00:11:52,570 --> 00:11:57,370
properties so we<font color="#E5E5E5"> can still apply the</font>

270
00:11:55,209 --> 00:12:00,699
theorem by<font color="#CCCCCC"> Raman at all you saw before</font>

271
00:11:57,370 --> 00:12:05,440
<font color="#E5E5E5">and</font><font color="#CCCCCC"> just apply it individually to both</font>

272
00:12:00,700 --> 00:12:09,310
parts of<font color="#E5E5E5"> this decomposition</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

273
00:12:05,440 --> 00:12:11,920
allows<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to now mask functions of lower</font>

274
00:12:09,310 --> 00:12:15,339
degree because masking the inversion in

275
00:12:11,920 --> 00:12:17,199
one step<font color="#E5E5E5"> with algebraic degree</font><font color="#CCCCCC"> 7 is very</font>

276
00:12:15,339 --> 00:12:19,630
very<font color="#CCCCCC"> difficult you would need</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

277
00:12:17,200 --> 00:12:22,570
<font color="#E5E5E5">output yes but now just masking</font><font color="#CCCCCC"> two</font>

278
00:12:19,630 --> 00:12:25,029
cubic functions<font color="#CCCCCC"> requires fewer output</font>

279
00:12:22,570 --> 00:12:27,279
shares<font color="#E5E5E5"> so if we are going for first</font>

280
00:12:25,029 --> 00:12:29,320
order security here<font color="#E5E5E5"> and you know the</font>

281
00:12:27,279 --> 00:12:31,980
consolidated<font color="#CCCCCC"> massing schemed and</font><font color="#E5E5E5"> you</font>

282
00:12:29,320 --> 00:12:34,779
know that we need<font color="#E5E5E5"> to input shares and</font>

283
00:12:31,980 --> 00:12:37,089
the minimal<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of output shares we</font>

284
00:12:34,779 --> 00:12:40,660
can achieve<font color="#E5E5E5"> is</font><font color="#CCCCCC"> eight but it is not</font>

285
00:12:37,089 --> 00:12:43,060
really guaranteed<font color="#E5E5E5"> and there's also not</font>

286
00:12:40,660 --> 00:12:47,350
really<font color="#E5E5E5"> a constructive way to find it</font>

287
00:12:43,060 --> 00:12:50,229
there are some<font color="#E5E5E5"> suggestions</font><font color="#CCCCCC"> but what we</font>

288
00:12:47,350 --> 00:12:53,140
did is we<font color="#CCCCCC"> developed a completely new</font>

289
00:12:50,230 --> 00:12:55,360
heuristic to do that<font color="#E5E5E5"> and very important</font>

290
00:12:53,140 --> 00:12:57,970
in<font color="#E5E5E5"> our heuristic is that we</font><font color="#CCCCCC"> actually</font>

291
00:12:55,360 --> 00:13:01,180
separate the<font color="#E5E5E5"> function so instead</font><font color="#CCCCCC"> of</font>

292
00:12:57,970 --> 00:13:03,820
sharing one cubic function in one go<font color="#E5E5E5"> we</font>

293
00:13:01,180 --> 00:13:06,250
<font color="#E5E5E5">split it</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> parts</font><font color="#CCCCCC"> and for each part</font><font color="#E5E5E5"> it</font>

294
00:13:03,820 --> 00:13:08,800
is guaranteed that's that the minimal

295
00:13:06,250 --> 00:13:10,660
bound holds so that each of<font color="#E5E5E5"> those parts</font>

296
00:13:08,800 --> 00:13:13,750
can<font color="#E5E5E5"> be shared with actually the</font><font color="#CCCCCC"> minimum</font>

297
00:13:10,660 --> 00:13:16,120
<font color="#CCCCCC">number of eight output shares now if you</font>

298
00:13:13,750 --> 00:13:18,670
want to know how it works<font color="#E5E5E5"> please look in</font>

299
00:13:16,120 --> 00:13:20,290
<font color="#E5E5E5">the paper because I don't think I</font><font color="#CCCCCC"> will</font>

300
00:13:18,670 --> 00:13:23,290
<font color="#E5E5E5">find the time here to explain it</font>

301
00:13:20,290 --> 00:13:24,969
but what we're<font color="#CCCCCC"> going to do is we're</font>

302
00:13:23,290 --> 00:13:29,949
<font color="#E5E5E5">going to look at the end result this</font>

303
00:13:24,970 --> 00:13:34,089
heuristic produces now this is a circuit

304
00:13:29,949 --> 00:13:36,310
for<font color="#CCCCCC"> the function block</font><font color="#E5E5E5"> F star G Star so</font>

305
00:13:34,089 --> 00:13:39,639
what you can see<font color="#CCCCCC"> here is that each of</font>

306
00:13:36,310 --> 00:13:42,790
the functions<font color="#E5E5E5"> G and F is split into</font>

307
00:13:39,639 --> 00:13:45,040
three blocks and you can see basically

308
00:13:42,790 --> 00:13:48,430
<font color="#CCCCCC">in each block the consolidated masking</font>

309
00:13:45,040 --> 00:13:51,069
scheme to evaluate it<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you take in a</font>

310
00:13:48,430 --> 00:13:53,469
shared representation<font color="#E5E5E5"> you also take in</font>

311
00:13:51,069 --> 00:13:57,160
three bits of randomness<font color="#CCCCCC"> each making it</font>

312
00:13:53,470 --> 00:13:59,800
<font color="#CCCCCC">18 bits of randomness total and then to</font>

313
00:13:57,160 --> 00:14:02,889
prevent glitches you store the<font color="#CCCCCC"> 8 bits</font>

314
00:13:59,800 --> 00:14:08,620
<font color="#E5E5E5">output each in a register and then you</font>

315
00:14:02,889 --> 00:14:12,610
compress<font color="#CCCCCC"> it back to 2 shares</font><font color="#E5E5E5"> and yeah</font>

316
00:14:08,620 --> 00:14:14,829
this has quite nice area properties<font color="#E5E5E5"> one</font>

317
00:14:12,610 --> 00:14:17,560
thing I really<font color="#E5E5E5"> want you to notice here</font>

318
00:14:14,829 --> 00:14:20,500
is the number<font color="#E5E5E5"> of input bits so you can</font>

319
00:14:17,560 --> 00:14:23,079
see that<font color="#E5E5E5"> 16 input bits because</font><font color="#CCCCCC"> two</font>

320
00:14:20,500 --> 00:14:26,440
shares of<font color="#E5E5E5"> eight bits are provided and</font>

321
00:14:23,079 --> 00:14:28,510
<font color="#E5E5E5">the start but we only need 14 in each</font>

322
00:14:26,440 --> 00:14:31,269
<font color="#E5E5E5">component and this is a really crucial</font>

323
00:14:28,510 --> 00:14:34,060
part<font color="#CCCCCC"> of our heuristic</font><font color="#E5E5E5"> that really gives</font>

324
00:14:31,269 --> 00:14:36,699
<font color="#E5E5E5">us a lot of reduction in area</font><font color="#CCCCCC"> so we</font>

325
00:14:34,060 --> 00:14:39,550
basically find<font color="#E5E5E5"> a split here</font><font color="#CCCCCC"> such that</font>

326
00:14:36,699 --> 00:14:42,819
each of<font color="#E5E5E5"> the components it is split</font><font color="#CCCCCC"> in</font>

327
00:14:39,550 --> 00:14:46,479
<font color="#E5E5E5">two does not depend on all variables so</font>

328
00:14:42,819 --> 00:14:48,130
of course this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> huge area reduction</font>

329
00:14:46,480 --> 00:14:51,160
if you think in<font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> look-up tables</font>

330
00:14:48,130 --> 00:14:55,269
<font color="#E5E5E5">where area means on how many variables</font>

331
00:14:51,160 --> 00:14:57,760
does something depend yeah<font color="#E5E5E5"> and with that</font>

332
00:14:55,269 --> 00:15:00,699
we can<font color="#E5E5E5"> realize the function</font><font color="#CCCCCC"> and 144</font>

333
00:14:57,760 --> 00:15:02,560
<font color="#E5E5E5">look-up tables and now we're actually</font>

334
00:15:00,699 --> 00:15:07,029
going<font color="#E5E5E5"> to integrate that in the full</font><font color="#CCCCCC"> s</font>

335
00:15:02,560 --> 00:15:09,760
box so<font color="#E5E5E5"> you already saw the bit</font><font color="#CCCCCC"> cereal</font>

336
00:15:07,029 --> 00:15:12,339
design earlier<font color="#E5E5E5"> so you already know we</font>

337
00:15:09,760 --> 00:15:15,790
shift in bits first<font color="#E5E5E5"> we converted with a</font>

338
00:15:12,339 --> 00:15:17,740
p2n function and then we have the

339
00:15:15,790 --> 00:15:20,860
correct<font color="#CCCCCC"> representation in the upper</font>

340
00:15:17,740 --> 00:15:24,069
<font color="#CCCCCC">register the only difference now</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

341
00:15:20,860 --> 00:15:26,829
we're not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to do that only once the</font>

342
00:15:24,069 --> 00:15:29,469
evaluation<font color="#CCCCCC"> of</font><font color="#E5E5E5"> F star on it but we're</font>

343
00:15:26,829 --> 00:15:31,810
going<font color="#E5E5E5"> to evaluate F star in eight cycles</font>

344
00:15:29,470 --> 00:15:34,100
on it<font color="#E5E5E5"> put the result in the lower</font>

345
00:15:31,810 --> 00:15:37,459
register<font color="#CCCCCC"> write it back in power</font>

346
00:15:34,100 --> 00:15:39,950
and then in the<font color="#E5E5E5"> next eight cycles we</font>

347
00:15:37,460 --> 00:15:42,530
will evaluate<font color="#E5E5E5"> the function G on</font><font color="#CCCCCC"> it to</font>

348
00:15:39,950 --> 00:15:45,290
have actually the final result<font color="#E5E5E5"> stored in</font>

349
00:15:42,530 --> 00:15:47,890
<font color="#E5E5E5">the register</font><font color="#CCCCCC"> - and then we convert it</font>

350
00:15:45,290 --> 00:15:52,760
back<font color="#E5E5E5"> and we have the actual end result</font>

351
00:15:47,890 --> 00:15:57,130
<font color="#E5E5E5">so in total this S box has an area of</font>

352
00:15:52,760 --> 00:16:00,770
<font color="#CCCCCC">182 lots and the latency of 26 cycles</font>

353
00:15:57,130 --> 00:16:03,530
<font color="#CCCCCC">from a security perspective I want you</font>

354
00:16:00,770 --> 00:16:05,689
to know<font color="#CCCCCC"> that it's really important here</font>

355
00:16:03,530 --> 00:16:09,170
to protect<font color="#E5E5E5"> against traditional leakage</font>

356
00:16:05,690 --> 00:16:13,760
<font color="#E5E5E5">because the input of the</font><font color="#CCCCCC"> f star g star</font>

357
00:16:09,170 --> 00:16:17,089
block<font color="#E5E5E5"> gets the same input variables just</font>

358
00:16:13,760 --> 00:16:19,069
<font color="#CCCCCC">rotated so it's very</font><font color="#E5E5E5"> import important to</font>

359
00:16:17,090 --> 00:16:21,050
get a clearing register beforehand<font color="#E5E5E5"> that</font>

360
00:16:19,070 --> 00:16:23,030
clears on a negative<font color="#CCCCCC"> clock edge to</font>

361
00:16:21,050 --> 00:16:26,079
prevent<font color="#E5E5E5"> any kind of leakage due to</font>

362
00:16:23,030 --> 00:16:28,699
transitions between two clock cycles

363
00:16:26,080 --> 00:16:31,640
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> if we</font><font color="#E5E5E5"> put that then and the full</font>

364
00:16:28,700 --> 00:16:34,070
bit sliding design with<font color="#CCCCCC"> two shares we of</font>

365
00:16:31,640 --> 00:16:36,920
<font color="#E5E5E5">course want to evaluate that</font><font color="#CCCCCC"> and we did</font>

366
00:16:34,070 --> 00:16:39,440
moments correlating<font color="#E5E5E5"> dpa I refer to</font><font color="#CCCCCC"> the</font>

367
00:16:36,920 --> 00:16:40,819
talk yesterday<font color="#CCCCCC"> given by Tomas</font><font color="#E5E5E5"> if you</font>

368
00:16:39,440 --> 00:16:43,480
want to know why we<font color="#CCCCCC"> did a moment</font>

369
00:16:40,820 --> 00:16:46,430
<font color="#E5E5E5">correlating</font><font color="#CCCCCC"> dpa instead of t-tests and</font>

370
00:16:43,480 --> 00:16:50,060
we implemented<font color="#E5E5E5"> it on a security board</font>

371
00:16:46,430 --> 00:16:53,089
<font color="#E5E5E5">and you can see at</font><font color="#CCCCCC"> first the evaluation</font>

372
00:16:50,060 --> 00:16:55,459
<font color="#CCCCCC">that yeah our implementation is</font><font color="#E5E5E5"> correct</font>

373
00:16:53,090 --> 00:16:58,370
so if we don't use<font color="#E5E5E5"> round</font><font color="#CCCCCC"> in and it</font>

374
00:16:55,460 --> 00:17:00,290
should<font color="#E5E5E5"> leak with only few</font><font color="#CCCCCC"> traces</font><font color="#E5E5E5"> and if</font>

375
00:16:58,370 --> 00:17:03,260
we then<font color="#E5E5E5"> show you the whole evaluation</font>

376
00:17:00,290 --> 00:17:04,699
<font color="#E5E5E5">you see that there's no exploitable</font>

377
00:17:03,260 --> 00:17:06,980
leakage in<font color="#E5E5E5"> the first order with</font>

378
00:17:04,699 --> 00:17:08,660
<font color="#CCCCCC">10,000,000 traces but of</font><font color="#E5E5E5"> course in the</font>

379
00:17:06,980 --> 00:17:12,760
second<font color="#E5E5E5"> order as this is only</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> first</font>

380
00:17:08,660 --> 00:17:15,350
<font color="#CCCCCC">order</font><font color="#E5E5E5"> secure design you can see leakage</font>

381
00:17:12,760 --> 00:17:16,879
<font color="#CCCCCC">we briefly compare that to others</font>

382
00:17:15,349 --> 00:17:19,429
<font color="#CCCCCC">state-of-the-art</font><font color="#E5E5E5"> first order secure</font>

383
00:17:16,880 --> 00:17:23,240
implementations but<font color="#CCCCCC"> I have to say that</font>

384
00:17:19,430 --> 00:17:25,900
of course<font color="#E5E5E5"> they did not target</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> FPGA</font>

385
00:17:23,240 --> 00:17:30,530
specific improvements they are<font color="#CCCCCC"> only</font>

386
00:17:25,900 --> 00:17:34,850
mapped to<font color="#E5E5E5"> FPGAs from starting from an</font>

387
00:17:30,530 --> 00:17:37,190
ASIC design<font color="#E5E5E5"> so we can see that we have</font>

388
00:17:34,850 --> 00:17:39,860
the smallest area<font color="#CCCCCC"> regardless of the area</font>

389
00:17:37,190 --> 00:17:43,090
metric you<font color="#CCCCCC"> want to consider so in terms</font>

390
00:17:39,860 --> 00:17:45,770
of<font color="#E5E5E5"> look up tables flip-flops or slices</font>

391
00:17:43,090 --> 00:17:48,649
<font color="#CCCCCC">we use a competitive amount of random</font>

392
00:17:45,770 --> 00:17:51,049
bits<font color="#E5E5E5"> per</font><font color="#CCCCCC"> sbox evaluation</font>

393
00:17:48,649 --> 00:17:53,268
the only<font color="#E5E5E5"> thing that was of course far</font>

394
00:17:51,049 --> 00:17:57,499
higher here is the number<font color="#CCCCCC"> of cycles it</font>

395
00:17:53,269 --> 00:18:00,519
needs to be evaluated<font color="#CCCCCC"> yeah but</font><font color="#E5E5E5"> again we</font>

396
00:17:57,499 --> 00:18:03,799
focused on<font color="#E5E5E5"> area on this in this paper</font>

397
00:18:00,519 --> 00:18:06,350
so to summarize<font color="#CCCCCC"> that briefly I</font><font color="#E5E5E5"> provided</font>

398
00:18:03,799 --> 00:18:09,259
three designs<font color="#CCCCCC"> two of them</font><font color="#E5E5E5"> our area</font>

399
00:18:06,350 --> 00:18:11,748
records of unprotected<font color="#CCCCCC"> designs specific</font>

400
00:18:09,259 --> 00:18:15,259
to<font color="#E5E5E5"> FPGA another one is the smallest</font>

401
00:18:11,749 --> 00:18:18,080
<font color="#CCCCCC">first order</font><font color="#E5E5E5"> secure AES design in FPGA</font>

402
00:18:15,259 --> 00:18:20,090
devices<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> more contributions we</font>

403
00:18:18,080 --> 00:18:22,580
made for<font color="#CCCCCC"> example latency optimizations</font>

404
00:18:20,090 --> 00:18:26,600
<font color="#E5E5E5">of the original paper by</font><font color="#CCCCCC"> zesting at all</font>

405
00:18:22,580 --> 00:18:28,879
<font color="#CCCCCC">and we also provided a new heuristic</font><font color="#E5E5E5"> how</font>

406
00:18:26,600 --> 00:18:31,189
to find a consolidated masking scheme or

407
00:18:28,879 --> 00:18:33,350
sharing with<font color="#CCCCCC"> T plus 1 shares and</font><font color="#E5E5E5"> you can</font>

408
00:18:31,190 --> 00:18:41,840
find them in<font color="#E5E5E5"> the paper thank you</font><font color="#CCCCCC"> very</font>

409
00:18:33,350 --> 00:18:45,230
<font color="#E5E5E5">much thank you</font><font color="#CCCCCC"> for the talk we have time</font>

410
00:18:41,840 --> 00:18:49,100
for plenty<font color="#E5E5E5"> of questions that</font><font color="#CCCCCC"> did take</font>

411
00:18:45,230 --> 00:18:51,679
mine so I have a<font color="#E5E5E5"> question</font><font color="#CCCCCC"> like you are</font>

412
00:18:49,100 --> 00:18:54,049
using normal basis<font color="#E5E5E5"> so did you consider</font>

413
00:18:51,679 --> 00:18:56,419
<font color="#E5E5E5">like fault tolerance because it probably</font>

414
00:18:54,049 --> 00:18:58,759
<font color="#E5E5E5">comes with some inherent fault tolerance</font>

415
00:18:56,419 --> 00:19:01,249
so did you consider like protections

416
00:18:58,759 --> 00:19:02,990
against fault attacks<font color="#E5E5E5"> well not yet but</font>

417
00:19:01,249 --> 00:19:06,159
<font color="#CCCCCC">that seems to be an</font><font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> idea for</font>

418
00:19:02,990 --> 00:19:06,159
<font color="#E5E5E5">follow-up work</font><font color="#CCCCCC"> thank you</font>

419
00:19:16,700 --> 00:19:22,759
<font color="#CCCCCC">Oh so for that decomposition</font><font color="#E5E5E5"> are you</font>

420
00:19:20,629 --> 00:19:25,908
aware of any decomposition works with

421
00:19:22,759 --> 00:19:28,489
only kinetic permutations rather than

422
00:19:25,909 --> 00:19:30,499
cubic permutations<font color="#CCCCCC"> do you mean for power</font>

423
00:19:28,489 --> 00:19:33,379
functions yes

424
00:19:30,499 --> 00:19:35,179
<font color="#CCCCCC">is</font><font color="#E5E5E5"> it possible</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> to know</font><font color="#CCCCCC"> it's</font>

425
00:19:33,379 --> 00:19:38,418
<font color="#E5E5E5">provably not possible</font>

426
00:19:35,179 --> 00:19:40,489
so it's impossible yes<font color="#CCCCCC"> okay thank you</font><font color="#E5E5E5"> so</font>

427
00:19:38,419 --> 00:19:42,289
just<font color="#E5E5E5"> to clarify that statement only</font>

428
00:19:40,489 --> 00:19:44,269
<font color="#E5E5E5">holds for power maps in general it might</font>

429
00:19:42,289 --> 00:19:47,450
be possible<font color="#CCCCCC"> to find by ejections that</font>

430
00:19:44,269 --> 00:19:56,869
are quadratic<font color="#E5E5E5"> but again they will not be</font>

431
00:19:47,450 --> 00:19:58,850
<font color="#CCCCCC">power enough other questions I have a</font>

432
00:19:56,869 --> 00:20:00,649
final<font color="#CCCCCC"> question</font><font color="#E5E5E5"> then are you planning to</font>

433
00:19:58,850 --> 00:20:03,709
also do higher order protection<font color="#E5E5E5"> or</font>

434
00:20:00,649 --> 00:20:06,939
what's the<font color="#E5E5E5"> future work for this</font><font color="#CCCCCC"> I mean</font>

435
00:20:03,710 --> 00:20:09,649
<font color="#CCCCCC">the general scheme we provide as</font>

436
00:20:06,940 --> 00:20:12,590
applicable<font color="#CCCCCC"> to</font><font color="#E5E5E5"> D shares so you can easily</font>

437
00:20:09,649 --> 00:20:15,289
<font color="#E5E5E5">use our heuristic</font><font color="#CCCCCC"> also for higher order</font>

438
00:20:12,590 --> 00:20:18,230
<font color="#CCCCCC">countermeasures more specifically about</font>

439
00:20:15,289 --> 00:20:20,899
<font color="#CCCCCC">this design you could also try to fix</font>

440
00:20:18,230 --> 00:20:22,549
the higher order just with some noise

441
00:20:20,899 --> 00:20:26,809
generations and there are<font color="#E5E5E5"> known methods</font>

442
00:20:22,549 --> 00:20:28,549
<font color="#E5E5E5">for that so right and let's thank</font><font color="#CCCCCC"> the</font>

443
00:20:26,809 --> 00:20:31,480
<font color="#E5E5E5">author because of the session again and</font>

444
00:20:28,549 --> 00:20:31,480
<font color="#E5E5E5">enjoy the coffee break</font>

