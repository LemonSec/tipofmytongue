1
00:00:05,390 --> 00:00:13,280
so good<font color="#E5E5E5"> afternoon everybody</font>

2
00:00:08,820 --> 00:00:16,830
so there is no coffee break now<font color="#CCCCCC"> so</font>

3
00:00:13,280 --> 00:00:19,770
<font color="#CCCCCC">welcome</font><font color="#E5E5E5"> to the seventh session about</font><font color="#CCCCCC"> a</font>

4
00:00:16,830 --> 00:00:22,320
<font color="#CCCCCC">morphic encryption and the first torque</font>

5
00:00:19,770 --> 00:00:24,330
is<font color="#E5E5E5"> an</font><font color="#CCCCCC"> Title I performance thundercutter</font>

6
00:00:22,320 --> 00:00:27,689
and somewhat<font color="#CCCCCC"> a</font><font color="#E5E5E5"> morphic encryption on</font>

7
00:00:24,330 --> 00:00:31,979
GPUs an<font color="#E5E5E5"> implementation using CUDA</font><font color="#CCCCCC"> and</font>

8
00:00:27,689 --> 00:00:37,769
the other are a mod<font color="#CCCCCC"> R by</font><font color="#E5E5E5"> the way but</font><font color="#CCCCCC"> how</font>

9
00:00:31,980 --> 00:00:40,559
<font color="#CCCCCC">bad</font><font color="#E5E5E5"> was the</font><font color="#CCCCCC"> Pahlavi Jang Hyun Kim Mimi</font>

10
00:00:37,770 --> 00:00:45,660
<font color="#CCCCCC">pound and</font><font color="#E5E5E5"> Ahmad will give</font><font color="#CCCCCC"> zok Tolkien</font>

11
00:00:40,559 --> 00:00:48,510
thank you<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very much</font><font color="#E5E5E5"> hello</font>

12
00:00:45,660 --> 00:00:50,069
<font color="#E5E5E5">everyone thanks for being here at this</font>

13
00:00:48,510 --> 00:00:52,920
time to attend<font color="#E5E5E5"> our more can keep</font>

14
00:00:50,070 --> 00:00:56,340
transition in this talk I<font color="#CCCCCC"> would share</font>

15
00:00:52,920 --> 00:00:59,699
<font color="#CCCCCC">with</font><font color="#E5E5E5"> you my experience while developing</font>

16
00:00:56,340 --> 00:01:02,670
of implementing the<font color="#E5E5E5"> EFI or some people</font>

17
00:00:59,699 --> 00:01:07,470
<font color="#CCCCCC">call it the</font><font color="#E5E5E5"> pfv some atomic encryption</font>

18
00:01:02,670 --> 00:01:09,390
scheme on GPUs and<font color="#CCCCCC"> homework encryption</font>

19
00:01:07,470 --> 00:01:12,630
or<font color="#E5E5E5"> form of encryption as everyone maybe</font>

20
00:01:09,390 --> 00:01:14,909
<font color="#E5E5E5">you know it's what we call the holy</font>

21
00:01:12,630 --> 00:01:17,339
grail of cryptography<font color="#E5E5E5"> and the reason for</font>

22
00:01:14,909 --> 00:01:20,430
that is<font color="#CCCCCC"> because it</font><font color="#E5E5E5"> allows you to compute</font>

23
00:01:17,340 --> 00:01:22,439
on encrypted data<font color="#E5E5E5"> as you can see in the</font>

24
00:01:20,430 --> 00:01:25,080
figure the<font color="#E5E5E5"> client</font><font color="#CCCCCC"> sends that private</font>

25
00:01:22,439 --> 00:01:28,710
data encrypted to the cloud<font color="#E5E5E5"> the cloud</font>

26
00:01:25,080 --> 00:01:30,539
somehow can still manage to compute some

27
00:01:28,710 --> 00:01:32,429
useful functions<font color="#CCCCCC"> on the data have</font>

28
00:01:30,540 --> 00:01:34,409
attained encrypted result to the client

29
00:01:32,430 --> 00:01:36,570
who has the decryption key<font color="#E5E5E5"> and can</font>

30
00:01:34,409 --> 00:01:40,799
decrypt and see the results in<font color="#E5E5E5"> the clear</font>

31
00:01:36,570 --> 00:01:45,240
text for in theory<font color="#E5E5E5"> we can compute any</font>

32
00:01:40,799 --> 00:01:48,450
function if but in practice we are quite

33
00:01:45,240 --> 00:01:50,460
limited<font color="#CCCCCC"> and maybe the main challenge in</font>

34
00:01:48,450 --> 00:01:56,490
<font color="#E5E5E5">on</font><font color="#CCCCCC"> wafak encryption is that it requires</font>

35
00:01:50,460 --> 00:01:58,469
enormous computation how this<font color="#E5E5E5"> problem is</font>

36
00:01:56,490 --> 00:02:00,298
being handled<font color="#E5E5E5"> the performance issue in a</font>

37
00:01:58,469 --> 00:02:03,509
mock encryption<font color="#CCCCCC"> I would say there are</font>

38
00:02:00,299 --> 00:02:07,079
two<font color="#CCCCCC"> directions</font><font color="#E5E5E5"> so one is trying to find</font>

39
00:02:03,509 --> 00:02:09,479
the new schemas or techniques to improve

40
00:02:07,079 --> 00:02:12,629
<font color="#CCCCCC">the performance of a future like plant</font>

41
00:02:09,479 --> 00:02:13,720
expecting encoding schemes<font color="#E5E5E5"> approximated</font>

42
00:02:12,629 --> 00:02:15,519
computing or

43
00:02:13,720 --> 00:02:19,150
bubbly squashing the target function

44
00:02:15,520 --> 00:02:21,460
that you need and even<font color="#CCCCCC"> dag optimizations</font>

45
00:02:19,150 --> 00:02:24,730
<font color="#E5E5E5">or the circuit that you want to compute</font>

46
00:02:21,460 --> 00:02:27,700
<font color="#E5E5E5">and there was the other direction who</font>

47
00:02:24,730 --> 00:02:30,670
accept<font color="#E5E5E5"> the status quo of fhe and try</font>

48
00:02:27,700 --> 00:02:33,429
just to speed up<font color="#E5E5E5"> what we have like we</font>

49
00:02:30,670 --> 00:02:35,290
speed up<font color="#E5E5E5"> the effigy basically motives</font>

50
00:02:33,430 --> 00:02:37,840
<font color="#CCCCCC">like degeneration encryption decryption</font>

51
00:02:35,290 --> 00:02:40,420
and homomorphic operations additional

52
00:02:37,840 --> 00:02:42,610
multiplication and we<font color="#E5E5E5"> use modular</font>

53
00:02:40,420 --> 00:02:45,880
algorithms parallel implementations<font color="#E5E5E5"> and</font>

54
00:02:42,610 --> 00:02:49,600
even<font color="#CCCCCC"> hardware implementations such as</font>

55
00:02:45,880 --> 00:02:53,220
GPU FPGA and ASIC<font color="#E5E5E5"> and please let me add</font>

56
00:02:49,600 --> 00:02:57,370
GPUs to<font color="#CCCCCC"> this</font><font color="#E5E5E5"> category as a hardware</font>

57
00:02:53,220 --> 00:03:00,760
execution platform so the contributions

58
00:02:57,370 --> 00:03:02,680
<font color="#E5E5E5">are implementing</font><font color="#CCCCCC"> the affion GPU like</font>

59
00:03:00,760 --> 00:03:05,350
this is the main contribution of these

60
00:03:02,680 --> 00:03:07,959
<font color="#E5E5E5">people we include a set</font><font color="#CCCCCC"> of good</font>

61
00:03:05,350 --> 00:03:10,510
optimization and other algebraic tools

62
00:03:07,959 --> 00:03:13,690
also<font color="#CCCCCC"> and we benchmark against</font>

63
00:03:10,510 --> 00:03:17,079
<font color="#E5E5E5">state-of-the-art implementations of the</font>

64
00:03:13,690 --> 00:03:18,820
<font color="#CCCCCC">efi</font><font color="#E5E5E5"> so now a</font><font color="#CCCCCC"> question that may arise why</font>

65
00:03:17,080 --> 00:03:22,750
GPUs for<font color="#CCCCCC"> FEG</font>

66
00:03:18,820 --> 00:03:26,019
well GPUs are becoming more naturally

67
00:03:22,750 --> 00:03:28,690
available<font color="#E5E5E5"> they include many many</font>

68
00:03:26,019 --> 00:03:31,360
computing calls and they are they<font color="#CCCCCC"> prove</font>

69
00:03:28,690 --> 00:03:34,450
<font color="#CCCCCC">to be actually strong in handling</font>

70
00:03:31,360 --> 00:03:37,810
parallel problems<font color="#E5E5E5"> or problems that</font>

71
00:03:34,450 --> 00:03:40,390
include high level of parallelism<font color="#E5E5E5"> and it</font>

72
00:03:37,810 --> 00:03:42,940
happens<font color="#E5E5E5"> to be that if itchy or movavi</font>

73
00:03:40,390 --> 00:03:45,670
encryption general has a huge<font color="#E5E5E5"> level of</font>

74
00:03:42,940 --> 00:03:49,390
parallelism<font color="#E5E5E5"> and that can be exploited by</font>

75
00:03:45,670 --> 00:03:51,609
<font color="#E5E5E5">the GPUs and that's why these two like</font>

76
00:03:49,390 --> 00:03:56,798
the platform<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> they seem to be</font>

77
00:03:51,610 --> 00:03:58,840
a good match<font color="#E5E5E5"> this is the textbook</font><font color="#CCCCCC"> a fee</font>

78
00:03:56,799 --> 00:04:01,630
I will not go through<font color="#E5E5E5"> the basic</font>

79
00:03:58,840 --> 00:04:04,299
primitives<font color="#E5E5E5"> but I would like you to know</font>

80
00:04:01,630 --> 00:04:06,579
to emphasize that in this<font color="#E5E5E5"> scheme we deal</font>

81
00:04:04,299 --> 00:04:09,450
with polynomials and these<font color="#E5E5E5"> polynomials</font>

82
00:04:06,580 --> 00:04:11,830
happen to be very<font color="#E5E5E5"> long polynomial and</font>

83
00:04:09,450 --> 00:04:13,839
also the coefficients happened to be

84
00:04:11,830 --> 00:04:22,180
multi precision coefficients like

85
00:04:13,840 --> 00:04:26,080
<font color="#E5E5E5">thousands of bits each</font><font color="#CCCCCC"> coefficient also</font>

86
00:04:22,180 --> 00:04:27,490
<font color="#E5E5E5">in this one operation here that we focus</font>

87
00:04:26,080 --> 00:04:31,198
on<font color="#E5E5E5"> usually which is the home</font>

88
00:04:27,490 --> 00:04:33,430
with multiplication other than being

89
00:04:31,199 --> 00:04:35,710
computationally intensive<font color="#E5E5E5"> especially in</font>

90
00:04:33,430 --> 00:04:38,169
the<font color="#CCCCCC"> FE schema there's a weird I would</font>

91
00:04:35,710 --> 00:04:41,590
call I<font color="#E5E5E5"> would</font><font color="#CCCCCC"> see a weird operation in</font>

92
00:04:38,169 --> 00:04:44,139
the homework multiplication which is the

93
00:04:41,590 --> 00:04:45,969
first one<font color="#E5E5E5"> this scaling T over a queue</font>

94
00:04:44,139 --> 00:04:49,330
some people call it scale and round

95
00:04:45,970 --> 00:04:51,340
<font color="#E5E5E5">others call it divide and round it's not</font>

96
00:04:49,330 --> 00:04:55,300
quite compatible with the

97
00:04:51,340 --> 00:04:57,159
representations we know about the

98
00:04:55,300 --> 00:05:00,340
representation will present polynomials

99
00:04:57,160 --> 00:05:02,470
in and also there's<font color="#CCCCCC"> another one which is</font>

100
00:05:00,340 --> 00:05:05,698
<font color="#CCCCCC">the phase</font><font color="#E5E5E5"> two compositions who how to do</font>

101
00:05:02,470 --> 00:05:10,990
this<font color="#E5E5E5"> in current is or in</font><font color="#CCCCCC"> entity</font>

102
00:05:05,699 --> 00:05:14,289
representations the implementation

103
00:05:10,990 --> 00:05:17,650
requirements we<font color="#CCCCCC"> will need to do penomet</font>

104
00:05:14,289 --> 00:05:20,469
arithmetic apparently and these problems

105
00:05:17,650 --> 00:05:24,698
as I say they<font color="#CCCCCC"> are long the DGE can be a</font>

106
00:05:20,470 --> 00:05:26,199
few thousand we stick to<font color="#E5E5E5"> a power of 2</font>

107
00:05:24,699 --> 00:05:29,590
<font color="#E5E5E5">cyclo</font><font color="#CCCCCC"> tommix because they have nice</font>

108
00:05:26,199 --> 00:05:32,229
<font color="#CCCCCC">opera</font><font color="#E5E5E5"> for parties addition can</font><font color="#CCCCCC"> be done</font>

109
00:05:29,590 --> 00:05:35,469
linearly multiplication and<font color="#CCCCCC"> Casa linear</font>

110
00:05:32,229 --> 00:05:37,930
complexity and their coefficients as we

111
00:05:35,469 --> 00:05:43,090
see<font color="#CCCCCC"> their multi precision a few hundreds</font>

112
00:05:37,930 --> 00:05:47,979
of bits we use modular arithmetic<font color="#CCCCCC"> 7s or</font>

113
00:05:43,090 --> 00:05:52,060
CRT<font color="#E5E5E5"> to decompose them and also we use</font>

114
00:05:47,979 --> 00:05:54,508
some techniques<font color="#E5E5E5"> from budget people to do</font>

115
00:05:52,060 --> 00:05:58,780
the scaling<font color="#E5E5E5"> and run T</font><font color="#CCCCCC"> over QX and</font><font color="#E5E5E5"> base</font>

116
00:05:54,509 --> 00:06:01,900
decomposition<font color="#E5E5E5"> so first let's see how</font><font color="#CCCCCC"> the</font>

117
00:05:58,780 --> 00:06:04,109
<font color="#E5E5E5">polynomials</font><font color="#CCCCCC"> would be represented now the</font>

118
00:06:01,900 --> 00:06:06,609
Q which happens to<font color="#CCCCCC"> be the polynomial</font>

119
00:06:04,110 --> 00:06:10,180
coefficient which was it as a<font color="#CCCCCC"> smooth</font>

120
00:06:06,610 --> 00:06:13,780
number and it would<font color="#E5E5E5"> be the product</font><font color="#CCCCCC"> of</font>

121
00:06:10,180 --> 00:06:17,080
many small<font color="#CCCCCC"> primes</font><font color="#E5E5E5"> be eyes these points</font>

122
00:06:13,780 --> 00:06:21,068
<font color="#CCCCCC">should fit in the GPU or</font><font color="#E5E5E5"> the execution</font>

123
00:06:17,080 --> 00:06:22,750
platform war machine<font color="#E5E5E5"> world</font><font color="#CCCCCC"> size and the</font>

124
00:06:21,069 --> 00:06:24,580
<font color="#E5E5E5">polynomial will</font><font color="#CCCCCC"> be represented in this</font>

125
00:06:22,750 --> 00:06:28,150
matrix<font color="#E5E5E5"> what we call</font><font color="#CCCCCC"> Darwin is</font>

126
00:06:24,580 --> 00:06:31,840
representation<font color="#E5E5E5"> it is K by n n is the</font>

127
00:06:28,150 --> 00:06:33,758
<font color="#CCCCCC">degree of the polynomial</font><font color="#E5E5E5"> and K is the</font>

128
00:06:31,840 --> 00:06:37,630
parameter<font color="#CCCCCC"> that we can't control</font>

129
00:06:33,759 --> 00:06:40,089
<font color="#E5E5E5">which is log</font><font color="#CCCCCC"> to of Q over look two of P</font>

130
00:06:37,630 --> 00:06:41,200
so by choosing the size of P<font color="#CCCCCC"> you can</font>

131
00:06:40,089 --> 00:06:44,530
<font color="#E5E5E5">either increase K</font>

132
00:06:41,200 --> 00:06:46,750
<font color="#E5E5E5">would use it and it's important actually</font>

133
00:06:44,530 --> 00:06:49,349
<font color="#E5E5E5">to try to minimize</font><font color="#CCCCCC"> care as much as you</font>

134
00:06:46,750 --> 00:06:53,170
can so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you don't do much</font>

135
00:06:49,350 --> 00:06:57,100
transformations in this representation

136
00:06:53,170 --> 00:07:00,520
you<font color="#CCCCCC"> can do ultimately infinite number of</font>

137
00:06:57,100 --> 00:07:06,970
<font color="#CCCCCC">a track apps</font><font color="#E5E5E5"> addition or subtraction by</font>

138
00:07:00,520 --> 00:07:08,620
only<font color="#E5E5E5"> doing component wise now to do the</font>

139
00:07:06,970 --> 00:07:10,600
multiplication<font color="#CCCCCC"> we need to go to</font><font color="#E5E5E5"> another</font>

140
00:07:08,620 --> 00:07:14,500
representation<font color="#E5E5E5"> which we call that entity</font>

141
00:07:10,600 --> 00:07:18,490
<font color="#E5E5E5">and they will apply this operation for</font>

142
00:07:14,500 --> 00:07:22,750
each row<font color="#CCCCCC"> of the matrix and once you go</font>

143
00:07:18,490 --> 00:07:24,670
to<font color="#E5E5E5"> the entity you</font><font color="#CCCCCC"> can do addition</font>

144
00:07:22,750 --> 00:07:32,200
subtraction<font color="#CCCCCC"> and multiplication using</font>

145
00:07:24,670 --> 00:07:34,390
called component wise operations now a

146
00:07:32,200 --> 00:07:36,580
question<font color="#E5E5E5"> that may arise what it</font>

147
00:07:34,390 --> 00:07:39,039
transformed to use<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we have so many</font>

148
00:07:36,580 --> 00:07:42,520
transform<font color="#E5E5E5"> there is the standard</font><font color="#CCCCCC"> DFT</font>

149
00:07:39,040 --> 00:07:45,070
there's<font color="#CCCCCC"> NTT there's DWT and what we use</font>

150
00:07:42,520 --> 00:07:47,890
<font color="#CCCCCC">here in this implementation the dgt the</font>

151
00:07:45,070 --> 00:07:50,770
<font color="#E5E5E5">discrete Galois transform and in this</font>

152
00:07:47,890 --> 00:07:53,770
table<font color="#E5E5E5"> we summarized</font><font color="#CCCCCC"> like the pause and</font>

153
00:07:50,770 --> 00:07:56,260
<font color="#CCCCCC">comes from our perspective for the of</font>

154
00:07:53,770 --> 00:07:58,840
these transforms so the DFT<font color="#CCCCCC"> is well</font>

155
00:07:56,260 --> 00:08:01,240
<font color="#CCCCCC">established you can have many several</font>

156
00:07:58,840 --> 00:08:03,429
<font color="#CCCCCC">levels that can</font><font color="#E5E5E5"> you just use in your</font>

157
00:08:01,240 --> 00:08:04,360
implementation<font color="#E5E5E5"> but the</font><font color="#CCCCCC"> Portlander</font>

158
00:08:03,430 --> 00:08:07,890
floating<font color="#E5E5E5"> point</font>

159
00:08:04,360 --> 00:08:11,230
arrows will increase as<font color="#CCCCCC"> n increases and</font>

160
00:08:07,890 --> 00:08:13,719
probably to mitigate this problem<font color="#E5E5E5"> you</font>

161
00:08:11,230 --> 00:08:16,600
will either increase<font color="#CCCCCC"> the precision of</font>

162
00:08:13,720 --> 00:08:20,500
computing the DFT which will affect<font color="#E5E5E5"> the</font>

163
00:08:16,600 --> 00:08:24,430
<font color="#E5E5E5">performance or you can reduce the</font><font color="#CCCCCC"> size</font>

164
00:08:20,500 --> 00:08:26,590
<font color="#E5E5E5">of the P the</font><font color="#CCCCCC"> points the CRT Prime's you</font>

165
00:08:24,430 --> 00:08:29,080
use and you<font color="#E5E5E5"> will have at this case and</font>

166
00:08:26,590 --> 00:08:33,400
longer matrix and you will do<font color="#E5E5E5"> higher</font>

167
00:08:29,080 --> 00:08:35,829
number<font color="#CCCCCC"> of transforms other it transforms</font>

168
00:08:33,400 --> 00:08:39,549
which are the extinction of<font color="#CCCCCC"> the FTO over</font>

169
00:08:35,830 --> 00:08:42,660
Galois fields like the<font color="#E5E5E5"> NTT</font><font color="#CCCCCC"> DW T and DG t</font>

170
00:08:39,549 --> 00:08:44,920
<font color="#E5E5E5">the nice thing about them they are exact</font>

171
00:08:42,659 --> 00:08:48,640
but the difference<font color="#E5E5E5"> between them</font><font color="#CCCCCC"> is</font>

172
00:08:44,920 --> 00:08:51,599
<font color="#E5E5E5">probably the</font><font color="#CCCCCC"> transform link in</font><font color="#E5E5E5"> NTT you</font>

173
00:08:48,640 --> 00:08:55,920
will need to do<font color="#E5E5E5"> to end</font><font color="#CCCCCC"> transform</font>

174
00:08:51,600 --> 00:09:00,269
and in<font color="#CCCCCC"> DWT</font><font color="#E5E5E5"> you can do it using</font><font color="#CCCCCC"> em</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> dgt</font>

175
00:08:55,920 --> 00:09:02,040
you can do it using<font color="#E5E5E5"> n over to transform</font>

176
00:09:00,269 --> 00:09:05,790
<font color="#E5E5E5">link and this is quite interesting</font>

177
00:09:02,040 --> 00:09:08,519
<font color="#E5E5E5">actually because as we will see you</font>

178
00:09:05,790 --> 00:09:11,040
<font color="#E5E5E5">later</font><font color="#CCCCCC"> if you want to implement this</font>

179
00:09:08,519 --> 00:09:13,470
transform on GPU efficiently<font color="#E5E5E5"> you will</font>

180
00:09:11,040 --> 00:09:17,579
<font color="#CCCCCC">need to store the powers of the</font>

181
00:09:13,470 --> 00:09:20,430
primitive<font color="#E5E5E5"> roots of unity and on GPU we</font>

182
00:09:17,579 --> 00:09:23,339
are quite limited<font color="#CCCCCC"> in fast memory and you</font>

183
00:09:20,430 --> 00:09:25,649
need to try<font color="#E5E5E5"> to shrink the size</font><font color="#CCCCCC"> of these</font>

184
00:09:23,339 --> 00:09:27,959
lookup tables as much as you can<font color="#E5E5E5"> and</font>

185
00:09:25,649 --> 00:09:30,930
that's why<font color="#CCCCCC"> dgt here happens to be quite</font>

186
00:09:27,959 --> 00:09:32,910
<font color="#E5E5E5">useful</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this problem but there is one</font>

187
00:09:30,930 --> 00:09:36,449
problem<font color="#E5E5E5"> with the DDT is that it requires</font>

188
00:09:32,910 --> 00:09:38,850
<font color="#CCCCCC">gaussian arithmetic</font><font color="#E5E5E5"> and will include a</font>

189
00:09:36,449 --> 00:09:41,939
larger number of multiplications

190
00:09:38,850 --> 00:09:44,850
but our hypothesis<font color="#E5E5E5"> was well GPU is good</font>

191
00:09:41,940 --> 00:09:47,430
<font color="#E5E5E5">in computation probably is not that fast</font>

192
00:09:44,850 --> 00:09:52,589
<font color="#CCCCCC">in memory operation so let's see what</font>

193
00:09:47,430 --> 00:09:53,910
<font color="#E5E5E5">happened if we use the</font><font color="#CCCCCC"> DDT</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> even</font>

194
00:09:52,589 --> 00:09:59,060
<font color="#CCCCCC">surely we use the DDT</font><font color="#E5E5E5"> in our</font>

195
00:09:53,910 --> 00:10:01,589
implementation so these are the common

196
00:09:59,060 --> 00:10:04,949
equations of the transforms as I said

197
00:10:01,589 --> 00:10:06,569
you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> store these primitive roots</font>

198
00:10:04,949 --> 00:10:09,660
in the<font color="#E5E5E5"> look-up tables and the nice</font><font color="#CCCCCC"> thing</font>

199
00:10:06,569 --> 00:10:12,719
about the<font color="#CCCCCC"> DWT is that you the digit is</font>

200
00:10:09,660 --> 00:10:15,420
that you need n over<font color="#E5E5E5"> two of these</font><font color="#CCCCCC"> boots</font>

201
00:10:12,720 --> 00:10:20,310
now the second question is how<font color="#CCCCCC"> to</font>

202
00:10:15,420 --> 00:10:25,229
<font color="#E5E5E5">compute the</font><font color="#CCCCCC"> theoretical transform in</font><font color="#E5E5E5"> GFP</font>

203
00:10:20,310 --> 00:10:28,439
hat or in GFP<font color="#E5E5E5"> I in the CM field point</font>

204
00:10:25,230 --> 00:10:32,600
that<font color="#CCCCCC"> you used for the CRT well we found</font>

205
00:10:28,439 --> 00:10:32,599
<font color="#E5E5E5">that if</font><font color="#CCCCCC"> you do</font><font color="#E5E5E5"> it in the FBI is better</font>

206
00:10:32,720 --> 00:10:40,980
let's let's<font color="#E5E5E5"> look at each solution so you</font>

207
00:10:37,560 --> 00:10:44,310
can choose a nice<font color="#E5E5E5"> time let's call it P</font>

208
00:10:40,980 --> 00:10:46,949
hat<font color="#E5E5E5"> and let's take our scales let's say</font>

209
00:10:44,310 --> 00:10:50,399
it's a 64-bit<font color="#CCCCCC"> time so that it can fit in</font>

210
00:10:46,949 --> 00:10:53,819
the machine<font color="#E5E5E5"> what size the problem if you</font>

211
00:10:50,399 --> 00:10:56,730
choose this<font color="#CCCCCC"> approach is that you will</font>

212
00:10:53,819 --> 00:11:02,219
need<font color="#CCCCCC"> to take to be careful that them you</font>

213
00:10:56,730 --> 00:11:04,410
don't trap<font color="#CCCCCC"> beyond people</font><font color="#E5E5E5"> B hat for the</font>

214
00:11:02,220 --> 00:11:05,460
maximum convolution<font color="#CCCCCC"> so if you do one</font>

215
00:11:04,410 --> 00:11:07,230
multiplication

216
00:11:05,460 --> 00:11:10,050
this will be the maximum convolution

217
00:11:07,230 --> 00:11:12,720
value<font color="#E5E5E5"> you get and you will need to</font>

218
00:11:10,050 --> 00:11:15,630
<font color="#CCCCCC">ensure that the param</font><font color="#E5E5E5"> or the open and</font>

219
00:11:12,720 --> 00:11:17,580
you start with are less than<font color="#CCCCCC"> this bound</font>

220
00:11:15,630 --> 00:11:20,970
and<font color="#E5E5E5"> this is only for one multiplication</font>

221
00:11:17,580 --> 00:11:24,779
<font color="#CCCCCC">in this table you can see</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> for</font>

222
00:11:20,970 --> 00:11:27,060
<font color="#E5E5E5">different and sizes</font><font color="#CCCCCC"> let's the</font><font color="#E5E5E5"> the size</font>

223
00:11:24,779 --> 00:11:30,540
of the point that you can use so you<font color="#CCCCCC"> can</font>

224
00:11:27,060 --> 00:11:33,239
use in case<font color="#CCCCCC"> two to four 1226 up to 24</font>

225
00:11:30,540 --> 00:11:37,349
<font color="#CCCCCC">bit Prime's</font><font color="#E5E5E5"> only and this means that</font>

226
00:11:33,240 --> 00:11:39,149
your matrix if n is large will probably

227
00:11:37,350 --> 00:11:45,209
become longer and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will have to do</font>

228
00:11:39,149 --> 00:11:48,120
<font color="#CCCCCC">more transforms and another thing so</font>

229
00:11:45,209 --> 00:11:51,959
here we said that<font color="#CCCCCC"> these Prime's will be</font>

230
00:11:48,120 --> 00:11:57,149
like let's say<font color="#CCCCCC"> 32-bit</font><font color="#E5E5E5"> primes when you</font>

231
00:11:51,959 --> 00:11:59,339
choose this<font color="#E5E5E5"> 64-bit prime the storage</font>

232
00:11:57,149 --> 00:12:01,470
will double when you do the entity so

233
00:11:59,339 --> 00:12:04,020
you started with 32 and<font color="#E5E5E5"> now you're</font>

234
00:12:01,470 --> 00:12:06,500
<font color="#CCCCCC">working with 64-bit so the</font><font color="#E5E5E5"> storage is</font>

235
00:12:04,020 --> 00:12:09,560
doubled<font color="#E5E5E5"> whereas if you choose the other</font>

236
00:12:06,500 --> 00:12:12,180
solution where you<font color="#E5E5E5"> compute</font><font color="#CCCCCC"> that</font>

237
00:12:09,560 --> 00:12:14,069
theoretic transform<font color="#E5E5E5"> and each of the</font>

238
00:12:12,180 --> 00:12:17,250
<font color="#E5E5E5">prime in different fields</font><font color="#CCCCCC"> you will not</font>

239
00:12:14,070 --> 00:12:21,660
have these problems<font color="#CCCCCC"> you can work with</font>

240
00:12:17,250 --> 00:12:27,089
the same<font color="#E5E5E5"> bit precision of the prime</font>

241
00:12:21,660 --> 00:12:29,100
<font color="#E5E5E5">64-bit there is no sized uplink and you</font>

242
00:12:27,089 --> 00:12:35,700
can also support<font color="#E5E5E5"> unlimited number of</font>

243
00:12:29,100 --> 00:12:37,800
patients<font color="#E5E5E5"> in this domain well is this the</font>

244
00:12:35,700 --> 00:12:39,540
theoretically<font color="#E5E5E5"> transform important yes</font>

245
00:12:37,800 --> 00:12:42,660
it's<font color="#E5E5E5"> very critical for the home of</font>

246
00:12:39,540 --> 00:12:46,920
<font color="#E5E5E5">encryption in this</font><font color="#CCCCCC"> diagram we see</font><font color="#E5E5E5"> the</font>

247
00:12:42,660 --> 00:12:49,500
basic operations included in the FV

248
00:12:46,920 --> 00:12:51,689
schema<font color="#CCCCCC"> as you can see the entity is</font>

249
00:12:49,500 --> 00:12:54,900
almost<font color="#CCCCCC"> 50%</font><font color="#E5E5E5"> these are just different</font>

250
00:12:51,690 --> 00:12:59,190
settings of the problem entity almost

251
00:12:54,900 --> 00:13:02,640
<font color="#CCCCCC">50%</font><font color="#E5E5E5"> and we also have the</font><font color="#CCCCCC"> RNs tools for</font>

252
00:12:59,190 --> 00:13:05,399
the base decomposition and<font color="#E5E5E5"> the scale and</font>

253
00:13:02,640 --> 00:13:10,800
round also<font color="#CCCCCC"> they consume about 30 percent</font>

254
00:13:05,399 --> 00:13:13,260
<font color="#CCCCCC">of</font><font color="#E5E5E5"> 85</font><font color="#CCCCCC"> percent so we need to pay</font>

255
00:13:10,800 --> 00:13:16,370
attention<font color="#CCCCCC"> to these two to this</font>

256
00:13:13,260 --> 00:13:16,370
particular<font color="#CCCCCC"> operation</font>

257
00:13:16,870 --> 00:13:21,530
CRT we also<font color="#E5E5E5"> in the people include</font><font color="#CCCCCC"> an</font>

258
00:13:19,520 --> 00:13:24,430
implementation of the CRT using the

259
00:13:21,530 --> 00:13:27,470
<font color="#E5E5E5">Gartner algorithm on GPU we found that</font>

260
00:13:24,430 --> 00:13:30,530
<font color="#E5E5E5">garner algorithm is better than the</font>

261
00:13:27,470 --> 00:13:34,220
classic algorithm of computing the CRT

262
00:13:30,530 --> 00:13:37,250
and the reason is in this table we<font color="#E5E5E5"> show</font>

263
00:13:34,220 --> 00:13:39,710
first<font color="#CCCCCC"> the</font><font color="#E5E5E5"> lookup table size you will</font>

264
00:13:37,250 --> 00:13:41,030
need K square for the classic<font color="#CCCCCC"> computers</font>

265
00:13:39,710 --> 00:13:43,820
you will<font color="#CCCCCC"> need less than that in</font>

266
00:13:41,030 --> 00:13:46,730
<font color="#E5E5E5">governor's not much less but</font><font color="#CCCCCC"> a little</font>

267
00:13:43,820 --> 00:13:48,530
<font color="#E5E5E5">less thread divergence which is an</font>

268
00:13:46,730 --> 00:13:51,050
important concept concept<font color="#CCCCCC"> in GPU</font>

269
00:13:48,530 --> 00:13:53,630
<font color="#E5E5E5">programming if used a classic you</font>

270
00:13:51,050 --> 00:13:56,180
probably you will end up<font color="#CCCCCC"> with</font><font color="#E5E5E5"> divergence</font>

271
00:13:53,630 --> 00:13:58,189
which will<font color="#CCCCCC"> limit the performance whereas</font>

272
00:13:56,180 --> 00:14:03,170
in the gun algorithm there will be no

273
00:13:58,190 --> 00:14:05,420
<font color="#CCCCCC">fade divergence but scrt critical</font><font color="#E5E5E5"> to</font>

274
00:14:03,170 --> 00:14:08,420
performance<font color="#E5E5E5"> no it just</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the input and</font>

275
00:14:05,420 --> 00:14:12,920
<font color="#CCCCCC">output of</font><font color="#E5E5E5"> the problem so it's not that</font>

276
00:14:08,420 --> 00:14:16,030
critical to the performance and<font color="#E5E5E5"> also we</font>

277
00:14:12,920 --> 00:14:20,240
adopted some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the tools</font><font color="#CCCCCC"> provided by</font>

278
00:14:16,030 --> 00:14:23,350
<font color="#E5E5E5">budget inured</font><font color="#CCCCCC"> Hassan</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Zuki paper for</font>

279
00:14:20,240 --> 00:14:26,120
adapting the<font color="#CCCCCC"> efi schema to be rnas</font>

280
00:14:23,350 --> 00:14:30,080
compatible so that we can do the scale

281
00:14:26,120 --> 00:14:35,680
<font color="#E5E5E5">and round and</font><font color="#CCCCCC"> base decomposition in the</font>

282
00:14:30,080 --> 00:14:38,480
<font color="#E5E5E5">rnas domain in this flow diagram</font><font color="#CCCCCC"> we show</font>

283
00:14:35,680 --> 00:14:41,780
how<font color="#E5E5E5"> to do the homework multiplication</font>

284
00:14:38,480 --> 00:14:44,450
for this<font color="#CCCCCC"> scheme</font><font color="#E5E5E5"> as you can see we start</font>

285
00:14:41,780 --> 00:14:49,100
by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cipher text each ciphertext is 2</font>

286
00:14:44,450 --> 00:14:51,260
matrices and<font color="#E5E5E5"> well Darin is tools these</font>

287
00:14:49,100 --> 00:14:55,430
but these<font color="#CCCCCC"> matrices will double in size</font>

288
00:14:51,260 --> 00:14:58,430
and then<font color="#E5E5E5"> we do the</font><font color="#CCCCCC"> DT</font><font color="#E5E5E5"> or wise for each</font>

289
00:14:55,430 --> 00:15:01,250
<font color="#CCCCCC">matrix</font><font color="#E5E5E5"> we do the tensor product and then</font>

290
00:14:58,430 --> 00:15:05,959
<font color="#E5E5E5">we go back to the</font><font color="#CCCCCC"> RNs domain to do the</font>

291
00:15:01,250 --> 00:15:08,270
scale and round<font color="#E5E5E5"> and then we do the first</font>

292
00:15:05,960 --> 00:15:12,320
<font color="#CCCCCC">base extinction go back to digiti to do</font>

293
00:15:08,270 --> 00:15:14,180
the<font color="#CCCCCC"> Leary</font><font color="#E5E5E5"> linearization and what I want</font>

294
00:15:12,320 --> 00:15:16,240
to point<font color="#E5E5E5"> out here is</font><font color="#CCCCCC"> that as</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font>

295
00:15:14,180 --> 00:15:20,989
we<font color="#E5E5E5"> keep going</font><font color="#CCCCCC"> back and forth between</font>

296
00:15:16,240 --> 00:15:22,850
entity and RNAs representations<font color="#E5E5E5"> it would</font>

297
00:15:20,990 --> 00:15:26,150
be very<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> actually to</font><font color="#E5E5E5"> do these</font>

298
00:15:22,850 --> 00:15:28,780
operations<font color="#E5E5E5"> directly in the entity domain</font>

299
00:15:26,150 --> 00:15:30,170
I mean the scale and round<font color="#E5E5E5"> and the base</font>

300
00:15:28,780 --> 00:15:32,779
decomposition

301
00:15:30,170 --> 00:15:38,120
they<font color="#CCCCCC"> can't be done</font><font color="#E5E5E5"> in the entity still</font>

302
00:15:32,779 --> 00:15:39,560
<font color="#CCCCCC">an open</font><font color="#E5E5E5"> a problem so for the</font>

303
00:15:38,120 --> 00:15:42,320
benchmarking we<font color="#CCCCCC"> compared our</font>

304
00:15:39,560 --> 00:15:44,529
implementation with seal<font color="#E5E5E5"> the latest</font>

305
00:15:42,320 --> 00:15:48,019
version of<font color="#CCCCCC"> seal</font><font color="#E5E5E5"> which implements the</font>

306
00:15:44,529 --> 00:15:53,240
<font color="#CCCCCC">rnase variant of the EFI scheme and we</font>

307
00:15:48,019 --> 00:15:54,680
also compared with the NFL lab<font color="#E5E5E5"> a fee for</font>

308
00:15:53,240 --> 00:15:56,360
these basic<font color="#E5E5E5"> parameters the key</font>

309
00:15:54,680 --> 00:15:58,519
generation decryption encryption and

310
00:15:56,360 --> 00:16:01,339
homomorphic multiplication plus<font color="#CCCCCC"> they're</font>

311
00:15:58,519 --> 00:16:05,300
<font color="#E5E5E5">in</font><font color="#CCCCCC"> a really near ization</font><font color="#E5E5E5"> actually the</font>

312
00:16:01,339 --> 00:16:09,550
GPU<font color="#CCCCCC"> can get us sometimes a fun I would</font>

313
00:16:05,300 --> 00:16:12,500
say 30<font color="#E5E5E5"> to 40 X speed up against these</font>

314
00:16:09,550 --> 00:16:14,240
implementations<font color="#CCCCCC"> if you want the number</font>

315
00:16:12,500 --> 00:16:20,899
the exact numbers you can refer to<font color="#E5E5E5"> the</font>

316
00:16:14,240 --> 00:16:23,209
<font color="#E5E5E5">people and I actually kind of thought</font>

317
00:16:20,899 --> 00:16:25,060
<font color="#E5E5E5">ahead and thought that would this</font>

318
00:16:23,209 --> 00:16:28,459
question will come<font color="#CCCCCC"> from the audience</font>

319
00:16:25,060 --> 00:16:31,099
<font color="#E5E5E5">which is like which iron is variant of</font>

320
00:16:28,459 --> 00:16:33,229
the<font color="#E5E5E5"> FE should I choose or implement in</font>

321
00:16:31,100 --> 00:16:36,079
the literature<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are two variants</font>

322
00:16:33,230 --> 00:16:38,630
actually of this scheme<font color="#E5E5E5"> the first is due</font>

323
00:16:36,079 --> 00:16:41,719
<font color="#E5E5E5">to best budget in artisan tsuki</font><font color="#CCCCCC"> and the</font>

324
00:16:38,630 --> 00:16:44,959
other one is it you<font color="#E5E5E5"> to</font><font color="#CCCCCC"> Halevi and</font>

325
00:16:41,720 --> 00:16:46,699
<font color="#CCCCCC">Polyakov and shop and the answer for</font>

326
00:16:44,959 --> 00:16:50,449
<font color="#E5E5E5">that can be found in these people where</font>

327
00:16:46,699 --> 00:16:53,569
we<font color="#CCCCCC"> analyzed both</font><font color="#E5E5E5"> schemas in terms of</font>

328
00:16:50,449 --> 00:16:56,029
<font color="#CCCCCC">performance</font><font color="#E5E5E5"> noise analysis and you can</font>

329
00:16:53,570 --> 00:16:59,480
find the answer<font color="#CCCCCC"> or this question in the</font>

330
00:16:56,029 --> 00:17:02,529
people thank<font color="#E5E5E5"> you very much</font><font color="#CCCCCC"> I'll be happy</font>

331
00:16:59,480 --> 00:17:02,529
to<font color="#E5E5E5"> answer and it was</font>

332
00:17:06,770 --> 00:17:12,020
Thank You Hamid<font color="#CCCCCC"> is there any question</font>

333
00:17:17,930 --> 00:17:28,100
there<font color="#E5E5E5"> is no question so I have one so</font>

334
00:17:24,750 --> 00:17:33,420
you present in slide<font color="#CCCCCC"> 11 many different</font>

335
00:17:28,099 --> 00:17:36,300
transformation for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> entity and have</font>

336
00:17:33,420 --> 00:17:39,840
you<font color="#CCCCCC"> tried to test which is the</font><font color="#E5E5E5"> best or</font>

337
00:17:36,300 --> 00:17:46,260
<font color="#CCCCCC">you just</font><font color="#E5E5E5"> implement one we tested</font>

338
00:17:39,840 --> 00:17:47,639
actually<font color="#E5E5E5"> we tested the</font><font color="#CCCCCC"> dgt and DWT</font><font color="#E5E5E5"> so in</font>

339
00:17:46,260 --> 00:17:49,710
terms<font color="#CCCCCC"> of</font><font color="#E5E5E5"> performance one time</font>

340
00:17:47,640 --> 00:17:52,200
performance<font color="#CCCCCC"> I would say they both</font><font color="#E5E5E5"> like</font>

341
00:17:49,710 --> 00:17:55,290
comparable sometimes the GT<font color="#E5E5E5"> is even</font>

342
00:17:52,200 --> 00:17:57,150
faster<font color="#CCCCCC"> but</font><font color="#E5E5E5"> not that much a little but</font>

343
00:17:55,290 --> 00:18:00,899
the most important thing actually<font color="#CCCCCC"> it's</font>

344
00:17:57,150 --> 00:18:02,640
that as I say it<font color="#CCCCCC"> dgt use in order</font><font color="#E5E5E5"> to</font>

345
00:18:00,900 --> 00:18:05,970
transform which means you will<font color="#E5E5E5"> need less</font>

346
00:18:02,640 --> 00:18:11,000
our smaller<font color="#E5E5E5"> look-up tables which is very</font>

347
00:18:05,970 --> 00:18:15,600
a an important factor<font color="#E5E5E5"> on GPU development</font>

348
00:18:11,000 --> 00:18:19,070
<font color="#E5E5E5">thank you so see since there is no</font><font color="#CCCCCC"> more</font>

349
00:18:15,600 --> 00:18:21,179
question we<font color="#E5E5E5"> will move to the next door</font>

350
00:18:19,070 --> 00:18:21,179
[Music]

