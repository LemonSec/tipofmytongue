1
00:00:00,030 --> 00:00:04,980
so our<font color="#E5E5E5"> next presenter will</font><font color="#CCCCCC"> be presenting</font>

2
00:00:02,610 --> 00:00:06,839
s<font color="#CCCCCC"> ith on</font><font color="#E5E5E5"> arm faster modular</font>

3
00:00:04,980 --> 00:00:08,309
multiplication for faster post quantum

4
00:00:06,839 --> 00:00:13,759
super singular<font color="#CCCCCC"> isagen oh that's the</font>

5
00:00:08,309 --> 00:00:17,910
wrong the first<font color="#E5E5E5"> one yeah sorry</font><font color="#CCCCCC"> run page</font>

6
00:00:13,759 --> 00:00:19,680
so this<font color="#CCCCCC"> is actually FPGA hammer remote</font>

7
00:00:17,910 --> 00:00:22,619
voltage full detects on shared<font color="#CCCCCC"> fpga</font>

8
00:00:19,680 --> 00:00:26,550
<font color="#E5E5E5">suitable for DFA Rheneas presented by</font>

9
00:00:22,619 --> 00:00:28,939
you and Jonas Kurata<font color="#CCCCCC"> it was co-authored</font>

10
00:00:26,550 --> 00:00:33,320
with Dennis can add and<font color="#E5E5E5"> Mehdi to hurry</font>

11
00:00:28,939 --> 00:00:35,790
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> it was good enough</font>

12
00:00:33,320 --> 00:00:38,309
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much good morning</font>

13
00:00:35,790 --> 00:00:40,800
everyone<font color="#E5E5E5"> and</font><font color="#CCCCCC"> welcome to my talk</font><font color="#E5E5E5"> on</font>

14
00:00:38,309 --> 00:00:43,769
remote voltage<font color="#E5E5E5"> fault attacks on shared</font>

15
00:00:40,800 --> 00:00:46,410
<font color="#E5E5E5">FPGAs before I will go</font><font color="#CCCCCC"> into detail I</font>

16
00:00:43,770 --> 00:00:50,309
first want to motivate<font color="#E5E5E5"> a bit why we are</font>

17
00:00:46,410 --> 00:00:52,410
considering shared<font color="#E5E5E5"> FPGAs at all so with</font>

18
00:00:50,309 --> 00:00:56,839
the increasing amount of resources we

19
00:00:52,410 --> 00:00:59,760
<font color="#E5E5E5">have our FPGA chip they are increasingly</font>

20
00:00:56,840 --> 00:01:02,969
considered for usage in<font color="#CCCCCC"> multi-user</font>

21
00:00:59,760 --> 00:01:06,119
environments<font color="#E5E5E5"> so a lot of providers are</font>

22
00:01:02,969 --> 00:01:07,770
introducing them to cloud<font color="#CCCCCC"> computing</font><font color="#E5E5E5"> we</font>

23
00:01:06,119 --> 00:01:10,560
see a lot of system-on-chip<font color="#CCCCCC"> variants</font>

24
00:01:07,770 --> 00:01:14,490
where we have<font color="#CCCCCC"> FPGA is</font><font color="#E5E5E5"> couple very</font>

25
00:01:10,560 --> 00:01:16,470
tightly with<font color="#E5E5E5"> a hard processor and the</font>

26
00:01:14,490 --> 00:01:19,919
Linux kernel<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> already introduced</font>

27
00:01:16,470 --> 00:01:23,460
support for partial reconfiguration of

28
00:01:19,920 --> 00:01:25,470
<font color="#E5E5E5">FPGAs which gives us</font><font color="#CCCCCC"> multi-tenant fpga</font>

29
00:01:23,460 --> 00:01:29,089
is where the accelerators per user can

30
00:01:25,470 --> 00:01:32,220
deployed<font color="#CCCCCC"> to partitions</font><font color="#E5E5E5"> on the same chip</font>

31
00:01:29,090 --> 00:01:35,189
<font color="#E5E5E5">so and this opens up a range of new</font>

32
00:01:32,220 --> 00:01:37,829
attack scenarios two of<font color="#E5E5E5"> which have been</font>

33
00:01:35,189 --> 00:01:40,439
already<font color="#E5E5E5"> considered in previous works</font>

34
00:01:37,829 --> 00:01:43,889
such as on chip<font color="#CCCCCC"> site channels or denial</font>

35
00:01:40,439 --> 00:01:48,869
of service attacks<font color="#E5E5E5"> and for this work</font><font color="#CCCCCC"> we</font>

36
00:01:43,890 --> 00:01:51,649
<font color="#E5E5E5">wanted to consider fault attacks and as</font>

37
00:01:48,869 --> 00:01:54,570
a proof<font color="#E5E5E5"> of</font><font color="#CCCCCC"> concept we successfully</font>

38
00:01:51,649 --> 00:01:58,590
deployed<font color="#CCCCCC"> a differential fault attack on</font>

39
00:01:54,570 --> 00:02:01,289
<font color="#CCCCCC">a es so the threat model</font><font color="#E5E5E5"> we are</font>

40
00:01:58,590 --> 00:02:04,200
considering is a single shared<font color="#E5E5E5"> fpga</font>

41
00:02:01,290 --> 00:02:06,479
fabric so that<font color="#E5E5E5"> also includes a shared</font>

42
00:02:04,200 --> 00:02:11,129
power distribution network<font color="#E5E5E5"> for both</font>

43
00:02:06,479 --> 00:02:13,800
adversary and victim and<font color="#E5E5E5"> the designs on</font>

44
00:02:11,129 --> 00:02:16,950
the<font color="#E5E5E5"> fpga are in logically isolate</font>

45
00:02:13,800 --> 00:02:18,870
<font color="#CCCCCC">get partitions but we have some kind</font><font color="#E5E5E5"> of</font>

46
00:02:16,950 --> 00:02:22,380
public interface<font color="#E5E5E5"> in the victim process</font>

47
00:02:18,870 --> 00:02:24,900
which is running<font color="#E5E5E5"> on</font><font color="#CCCCCC"> a CPU and which can</font>

48
00:02:22,380 --> 00:02:27,769
<font color="#E5E5E5">be accessed</font><font color="#CCCCCC"> by the adversary to make the</font>

49
00:02:24,900 --> 00:02:32,490
victim use his cryptographic

50
00:02:27,770 --> 00:02:34,470
implementation on<font color="#E5E5E5"> the FPGA so this gives</font>

51
00:02:32,490 --> 00:02:37,140
us<font color="#CCCCCC"> for in the case</font><font color="#E5E5E5"> of AES gives us this</font>

52
00:02:34,470 --> 00:02:40,640
<font color="#CCCCCC">chosen plaintext attack scenario where</font>

53
00:02:37,140 --> 00:02:43,260
the adversary<font color="#CCCCCC"> can just issue requests</font>

54
00:02:40,640 --> 00:02:48,269
with plain texts to the<font color="#E5E5E5"> victim process</font>

55
00:02:43,260 --> 00:02:49,950
and get the<font color="#CCCCCC"> ciphertext back so in the</font>

56
00:02:48,270 --> 00:02:52,320
<font color="#CCCCCC">fair</font><font color="#E5E5E5"> the course of this talk I will give</font>

57
00:02:49,950 --> 00:02:55,260
you some background<font color="#E5E5E5"> information on the</font>

58
00:02:52,320 --> 00:02:57,180
mechanics behind these attacks<font color="#CCCCCC"> I will</font>

59
00:02:55,260 --> 00:03:00,959
talk<font color="#CCCCCC"> about how</font><font color="#E5E5E5"> we specifically design</font>

60
00:02:57,180 --> 00:03:02,910
the fault injection<font color="#E5E5E5"> and analysis I will</font>

61
00:03:00,960 --> 00:03:05,820
present details on the hardware we used

62
00:03:02,910 --> 00:03:09,150
in the<font color="#E5E5E5"> experimental setup</font><font color="#CCCCCC"> I will present</font>

63
00:03:05,820 --> 00:03:11,100
<font color="#E5E5E5">the results then I will discuss them and</font>

64
00:03:09,150 --> 00:03:15,720
give some perspective<font color="#E5E5E5"> on future works</font>

65
00:03:11,100 --> 00:03:17,489
<font color="#E5E5E5">and finally conclude with the</font><font color="#CCCCCC"> tasks so</font>

66
00:03:15,720 --> 00:03:19,620
for the background information<font color="#E5E5E5"> we first</font>

67
00:03:17,490 --> 00:03:22,680
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk about these power</font>

68
00:03:19,620 --> 00:03:24,690
distribution<font color="#E5E5E5"> networks which basically</font>

69
00:03:22,680 --> 00:03:27,209
include all the interconnections from

70
00:03:24,690 --> 00:03:30,359
the voltage regulator<font color="#E5E5E5"> on the board down</font>

71
00:03:27,209 --> 00:03:33,530
to each logic element<font color="#E5E5E5"> in the chip and</font>

72
00:03:30,360 --> 00:03:35,520
they are usually<font color="#E5E5E5"> modeled as this mesh of</font>

73
00:03:33,530 --> 00:03:40,590
resistive inductive and capacitive

74
00:03:35,520 --> 00:03:45,410
elements and the influence of the

75
00:03:40,590 --> 00:03:47,910
inductive and resistive elements on the

76
00:03:45,410 --> 00:03:50,459
power<font color="#E5E5E5"> supply voltage are reflected in</font>

77
00:03:47,910 --> 00:03:53,670
this law of inductance and we can see

78
00:03:50,459 --> 00:03:57,780
that<font color="#CCCCCC"> a</font><font color="#E5E5E5"> high current variation can cause</font>

79
00:03:53,670 --> 00:03:59,700
a power supply voltage variation and a

80
00:03:57,780 --> 00:04:02,190
lower supply voltage can<font color="#CCCCCC"> eventually</font>

81
00:03:59,700 --> 00:04:07,679
<font color="#E5E5E5">cause timing faults in critical parts of</font>

82
00:04:02,190 --> 00:04:09,720
<font color="#E5E5E5">a design on an FPGA for example so the</font>

83
00:04:07,680 --> 00:04:12,510
logic element we use<font color="#E5E5E5"> to cause high</font>

84
00:04:09,720 --> 00:04:14,370
current variation is ring oscillators

85
00:04:12,510 --> 00:04:16,320
and they have been<font color="#CCCCCC"> already used in</font>

86
00:04:14,370 --> 00:04:20,430
previous<font color="#E5E5E5"> works on denial of service</font>

87
00:04:16,320 --> 00:04:22,800
attacks<font color="#E5E5E5"> to crash FPGAs</font><font color="#CCCCCC"> and we use not</font>

88
00:04:20,430 --> 00:04:25,470
<font color="#CCCCCC">only a single</font><font color="#E5E5E5"> one but an entire grid of</font>

89
00:04:22,800 --> 00:04:28,070
ring<font color="#E5E5E5"> ostriches to have a high impact on</font>

90
00:04:25,470 --> 00:04:30,420
<font color="#CCCCCC">the</font><font color="#E5E5E5"> power supply</font><font color="#CCCCCC"> voltage</font>

91
00:04:28,070 --> 00:04:32,040
so the principle<font color="#E5E5E5"> is that the high</font>

92
00:04:30,420 --> 00:04:33,780
oscillation of<font color="#E5E5E5"> these oscillators the</font>

93
00:04:32,040 --> 00:04:35,550
<font color="#E5E5E5">gate switching of them causes a high</font>

94
00:04:33,780 --> 00:04:38,099
<font color="#E5E5E5">current variation and eventually a</font>

95
00:04:35,550 --> 00:04:42,180
voltage drop to inject a fault<font color="#E5E5E5"> into</font>

96
00:04:38,100 --> 00:04:44,460
another design on the FPGA<font color="#E5E5E5"> and we found</font>

97
00:04:42,180 --> 00:04:47,130
<font color="#E5E5E5">that it's not enough to just switch it</font>

98
00:04:44,460 --> 00:04:49,260
<font color="#E5E5E5">on and let it oscillate but the ring</font>

99
00:04:47,130 --> 00:04:52,110
oscillator<font color="#E5E5E5"> grid must be toggled in a</font>

100
00:04:49,260 --> 00:04:54,930
very specific way<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> identified</font>

101
00:04:52,110 --> 00:04:57,270
three parameters that have<font color="#CCCCCC"> an</font><font color="#E5E5E5"> effect on</font>

102
00:04:54,930 --> 00:05:00,450
the<font color="#E5E5E5"> successful success of the fault</font>

103
00:04:57,270 --> 00:05:02,400
injection<font color="#E5E5E5"> which is the frequency duty</font>

104
00:05:00,450 --> 00:05:06,800
cycle<font color="#E5E5E5"> and the initial delay of this</font>

105
00:05:02,400 --> 00:05:10,799
toggle signal so for example in<font color="#E5E5E5"> this</font>

106
00:05:06,800 --> 00:05:13,440
<font color="#CCCCCC">diagram you see the externally measured</font>

107
00:05:10,800 --> 00:05:16,710
supply voltage of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> FPGA while</font>

108
00:05:13,440 --> 00:05:24,150
decreasing<font color="#E5E5E5"> the toggle frequency in the</font>

109
00:05:16,710 --> 00:05:26,580
area between the red bars so the fault

110
00:05:24,150 --> 00:05:30,409
injection the fault analysis<font color="#E5E5E5"> we used is</font>

111
00:05:26,580 --> 00:05:34,530
<font color="#E5E5E5">a</font><font color="#CCCCCC"> very well-known by piri</font><font color="#E5E5E5"> from 2003 and</font>

112
00:05:30,410 --> 00:05:35,910
<font color="#E5E5E5">the original scheme intends to inject</font>

113
00:05:34,530 --> 00:05:38,700
single byte faults<font color="#E5E5E5"> before the eight</font>

114
00:05:35,910 --> 00:05:42,120
<font color="#E5E5E5">front of the AES encryption which leads</font>

115
00:05:38,700 --> 00:05:43,849
to all<font color="#E5E5E5"> output bytes to be faulty</font><font color="#CCCCCC"> so they</font>

116
00:05:42,120 --> 00:05:47,340
can all be detected<font color="#CCCCCC"> maintained</font><font color="#E5E5E5"> easily</font>

117
00:05:43,850 --> 00:05:48,720
but since we needed to get a very<font color="#CCCCCC"> high</font>

118
00:05:47,340 --> 00:05:52,320
precision<font color="#CCCCCC"> to inject before the</font><font color="#E5E5E5"> eighth</font>

119
00:05:48,720 --> 00:05:54,720
round<font color="#E5E5E5"> we decided to inject before the</font>

120
00:05:52,320 --> 00:05:59,010
ninth rod instead<font color="#E5E5E5"> and attack only four</font>

121
00:05:54,720 --> 00:06:00,900
bytes at a<font color="#CCCCCC"> time so this allows us since</font>

122
00:05:59,010 --> 00:06:03,840
the propagation of a single byte falls

123
00:06:00,900 --> 00:06:06,030
before<font color="#E5E5E5"> the ninth rod results in a</font>

124
00:06:03,840 --> 00:06:08,669
specific<font color="#E5E5E5"> set</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> four bytes in</font><font color="#CCCCCC"> the output</font>

125
00:06:06,030 --> 00:06:11,280
ciphertext<font color="#CCCCCC"> to be affected this</font><font color="#E5E5E5"> allows us</font>

126
00:06:08,669 --> 00:06:13,950
<font color="#CCCCCC">to verify the successful</font><font color="#E5E5E5"> at injection</font>

127
00:06:11,280 --> 00:06:18,510
<font color="#E5E5E5">from the ciphertext</font><font color="#CCCCCC"> ok we can filter out</font>

128
00:06:13,950 --> 00:06:22,440
basically<font color="#E5E5E5"> a whole lot of faults injected</font>

129
00:06:18,510 --> 00:06:25,050
at the wrong time<font color="#E5E5E5"> and we developed some</font>

130
00:06:22,440 --> 00:06:27,660
<font color="#E5E5E5">kind of calibration for</font><font color="#CCCCCC"> the attacker</font>

131
00:06:25,050 --> 00:06:28,950
<font color="#E5E5E5">where he can first issue an encryption</font>

132
00:06:27,660 --> 00:06:32,240
request with<font color="#CCCCCC"> the plaintext</font>

133
00:06:28,950 --> 00:06:36,479
<font color="#CCCCCC">X to get</font><font color="#E5E5E5"> the correct ciphertext and then</font>

134
00:06:32,240 --> 00:06:38,970
continuously issues encryption requests

135
00:06:36,479 --> 00:06:41,310
with the same plaintext while activating

136
00:06:38,970 --> 00:06:42,119
the ring<font color="#CCCCCC"> oscillator grid with a very</font>

137
00:06:41,310 --> 00:06:46,270
specific

138
00:06:42,119 --> 00:06:48,129
parameters<font color="#E5E5E5"> and he can then as previously</font>

139
00:06:46,270 --> 00:06:50,948
explained verify the successful

140
00:06:48,129 --> 00:06:53,559
injection from the<font color="#CCCCCC"> outfit ciphertexts</font>

141
00:06:50,949 --> 00:06:56,680
<font color="#E5E5E5">and can adapt these parameters</font>

142
00:06:53,559 --> 00:06:59,710
accordingly and reissue requests to the

143
00:06:56,680 --> 00:07:02,319
victim<font color="#E5E5E5"> until he found parameters where</font>

144
00:06:59,710 --> 00:07:04,359
he could successfully inject<font color="#CCCCCC"> false at</font>

145
00:07:02,319 --> 00:07:08,649
<font color="#E5E5E5">the right round of a</font><font color="#CCCCCC"> ES and</font><font color="#E5E5E5"> then</font>

146
00:07:04,360 --> 00:07:10,599
continue<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> actual attack so this</font>

147
00:07:08,649 --> 00:07:13,689
calibration needs to be only done once

148
00:07:10,599 --> 00:07:17,469
for<font color="#E5E5E5"> a specific board and then we can</font>

149
00:07:13,689 --> 00:07:22,240
just continuously perform new attacks on

150
00:07:17,469 --> 00:07:24,430
the same<font color="#E5E5E5"> board the hardware we used is</font>

151
00:07:22,240 --> 00:07:29,020
these two boards<font color="#E5E5E5"> from interest like the</font>

152
00:07:24,430 --> 00:07:31,479
<font color="#CCCCCC">d1 SOC and the d0 nano SOC so we use the</font>

153
00:07:29,020 --> 00:07:33,459
three boards at the<font color="#E5E5E5"> same time type and</font>

154
00:07:31,479 --> 00:07:37,270
two different<font color="#CCCCCC"> boards in total to show</font>

155
00:07:33,459 --> 00:07:38,860
the generality<font color="#CCCCCC"> of this attack</font><font color="#E5E5E5"> and how</font>

156
00:07:37,270 --> 00:07:42,248
the calibration can adapt to<font color="#E5E5E5"> different</font>

157
00:07:38,860 --> 00:07:44,589
<font color="#E5E5E5">boards and all of these boards are by</font>

158
00:07:42,249 --> 00:07:47,319
based<font color="#E5E5E5"> on the cyclone v fpga together</font>

159
00:07:44,589 --> 00:07:49,569
with an ARM Cortex a9<font color="#E5E5E5"> on a single chip</font>

160
00:07:47,319 --> 00:07:54,430
<font color="#CCCCCC">and we have a</font><font color="#E5E5E5"> Linux environment running</font>

161
00:07:49,569 --> 00:07:56,439
<font color="#E5E5E5">on this arm core so this essentially</font>

162
00:07:54,430 --> 00:07:59,439
gives<font color="#E5E5E5"> us the entire spread model on one</font>

163
00:07:56,439 --> 00:08:01,599
<font color="#E5E5E5">SOC we have attacked and victim running</font>

164
00:07:59,439 --> 00:08:04,719
software on the<font color="#CCCCCC"> aam core and they have</font>

165
00:08:01,599 --> 00:08:08,860
their respective<font color="#E5E5E5"> IP cores on the FPGA</font>

166
00:08:04,719 --> 00:08:11,589
<font color="#E5E5E5">fabric and we only did the fault</font>

167
00:08:08,860 --> 00:08:14,199
injection part on this system<font color="#CCCCCC"> on chip</font>

168
00:08:11,589 --> 00:08:16,120
and collected faulty<font color="#E5E5E5"> cipher texts and</font>

169
00:08:14,199 --> 00:08:20,559
the key<font color="#CCCCCC"> recovery was afterwards done on</font>

170
00:08:16,120 --> 00:08:22,930
the on a PC<font color="#CCCCCC"> so for the results we</font><font color="#E5E5E5"> first</font>

171
00:08:20,559 --> 00:08:26,680
evaluated the general fault injection

172
00:08:22,930 --> 00:08:28,839
rates for 1 million requests<font color="#CCCCCC"> research</font>

173
00:08:26,680 --> 00:08:32,680
with respect to the<font color="#E5E5E5"> number of ring</font>

174
00:08:28,839 --> 00:08:35,130
oscillators used by the attacker<font color="#CCCCCC"> and we</font>

175
00:08:32,679 --> 00:08:40,208
performed<font color="#E5E5E5"> these experiments first on the</font>

176
00:08:35,130 --> 00:08:42,458
d1 SOC board where the<font color="#CCCCCC"> AAS design of the</font>

177
00:08:40,208 --> 00:08:44,800
victim was fully<font color="#E5E5E5"> constrained</font><font color="#CCCCCC"> so no</font>

178
00:08:42,458 --> 00:08:49,000
potential timing violations were

179
00:08:44,800 --> 00:08:53,410
reported by<font color="#CCCCCC"> the development</font><font color="#E5E5E5"> development</font>

180
00:08:49,000 --> 00:08:55,690
tools and we distinguished usable and

181
00:08:53,410 --> 00:08:58,750
the total<font color="#CCCCCC"> amount of faults so</font>

182
00:08:55,690 --> 00:09:00,190
total<font color="#E5E5E5"> amount of</font><font color="#CCCCCC"> folds is just any</font><font color="#E5E5E5"> kind</font>

183
00:08:58,750 --> 00:09:03,430
of fault<font color="#E5E5E5"> appearing in the output</font>

184
00:09:00,190 --> 00:09:05,350
<font color="#E5E5E5">ciphertext while only</font><font color="#CCCCCC"> the usable faults</font>

185
00:09:03,430 --> 00:09:07,630
can<font color="#E5E5E5"> be used for key recoveries or the</font>

186
00:09:05,350 --> 00:09:12,580
correct<font color="#CCCCCC"> four bytes</font><font color="#E5E5E5"> in the output</font>

187
00:09:07,630 --> 00:09:15,280
<font color="#E5E5E5">ciphertext are affected and we see here</font>

188
00:09:12,580 --> 00:09:16,870
in this<font color="#E5E5E5"> diagram where the blue</font><font color="#CCCCCC"> line is</font>

189
00:09:15,280 --> 00:09:20,199
<font color="#CCCCCC">the total</font><font color="#E5E5E5"> amount of folds and the red</font>

190
00:09:16,870 --> 00:09:22,840
line<font color="#CCCCCC"> their usable faults for DFA</font><font color="#E5E5E5"> we see</font>

191
00:09:20,200 --> 00:09:25,300
that<font color="#E5E5E5"> the injection</font><font color="#CCCCCC"> rate in general</font>

192
00:09:22,840 --> 00:09:28,210
<font color="#E5E5E5">increases with the</font><font color="#CCCCCC"> amount of ring</font>

193
00:09:25,300 --> 00:09:32,520
oscillators<font color="#E5E5E5"> but we have some at</font><font color="#CCCCCC"> some</font>

194
00:09:28,210 --> 00:09:35,440
point here<font color="#E5E5E5"> for this board after</font><font color="#CCCCCC"> 44%</font>

195
00:09:32,520 --> 00:09:38,380
<font color="#CCCCCC">resource usage by the attacker</font><font color="#E5E5E5"> we have</font>

196
00:09:35,440 --> 00:09:40,270
the case that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> curacy decreases</font>

197
00:09:38,380 --> 00:09:43,390
actually so the amount of usable<font color="#CCCCCC"> faults</font>

198
00:09:40,270 --> 00:09:45,699
decreases again simply<font color="#E5E5E5"> because the ring</font>

199
00:09:43,390 --> 00:09:48,370
oscillator grid is has too much effect

200
00:09:45,700 --> 00:09:51,100
<font color="#E5E5E5">on the victim design and the calibration</font>

201
00:09:48,370 --> 00:09:55,750
cannot find any parameters<font color="#E5E5E5"> anymore to</font>

202
00:09:51,100 --> 00:09:57,370
adapt to<font color="#E5E5E5"> this new situation</font><font color="#CCCCCC"> this attack</font>

203
00:09:55,750 --> 00:10:00,190
<font color="#CCCCCC">we this evaluation</font><font color="#E5E5E5"> of fault injection</font>

204
00:09:57,370 --> 00:10:02,920
rates we<font color="#CCCCCC"> extended to</font><font color="#E5E5E5"> three different e1</font>

205
00:10:00,190 --> 00:10:04,450
<font color="#CCCCCC">SOC boards</font><font color="#E5E5E5"> and we see that all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> them</font>

206
00:10:02,920 --> 00:10:06,790
are vulnerable<font color="#E5E5E5"> and in general the</font>

207
00:10:04,450 --> 00:10:09,580
calibration can find the<font color="#E5E5E5"> appropriate</font>

208
00:10:06,790 --> 00:10:14,290
parameters<font color="#E5E5E5"> to inject the fault with the</font>

209
00:10:09,580 --> 00:10:16,660
needed position but we also see that due

210
00:10:14,290 --> 00:10:20,260
to process variation<font color="#E5E5E5"> there's a different</font>

211
00:10:16,660 --> 00:10:22,689
optimal amount of ring oscillators used

212
00:10:20,260 --> 00:10:26,050
by the attacker for the attack<font color="#CCCCCC"> but you</font>

213
00:10:22,690 --> 00:10:30,280
can<font color="#E5E5E5"> simply find the amount that works on</font>

214
00:10:26,050 --> 00:10:34,140
<font color="#E5E5E5">all the boards so by looking at the</font>

215
00:10:30,280 --> 00:10:37,930
overlap<font color="#E5E5E5"> of the different evaluations and</font>

216
00:10:34,140 --> 00:10:42,310
actually we also evaluated the actual

217
00:10:37,930 --> 00:10:44,109
key<font color="#E5E5E5"> recovery on for</font><font color="#CCCCCC"> 5000 random Keys and</font>

218
00:10:42,310 --> 00:10:47,229
<font color="#CCCCCC">these experiments we also did on the d1</font>

219
00:10:44,110 --> 00:10:49,420
SOC with the best configuration<font color="#E5E5E5"> for each</font>

220
00:10:47,230 --> 00:10:52,810
<font color="#CCCCCC">specific board for</font><font color="#E5E5E5"> the fault injection</font>

221
00:10:49,420 --> 00:10:56,170
<font color="#E5E5E5">and we see that the majority of</font><font color="#CCCCCC"> keys</font>

222
00:10:52,810 --> 00:10:58,750
could be recovered<font color="#E5E5E5"> so about 90% of the</font>

223
00:10:56,170 --> 00:11:01,329
keys can be recovered<font color="#E5E5E5"> for each board we</font>

224
00:10:58,750 --> 00:11:02,950
have a couple<font color="#E5E5E5"> of keys</font><font color="#CCCCCC"> with only a few</font>

225
00:11:01,330 --> 00:11:05,560
<font color="#E5E5E5">candidates remaining two or four</font>

226
00:11:02,950 --> 00:11:07,899
candidates which can be easily<font color="#CCCCCC"> finalized</font>

227
00:11:05,560 --> 00:11:11,859
root for search but we also have some

228
00:11:07,899 --> 00:11:15,189
keys which cannot be<font color="#E5E5E5"> recovered</font><font color="#CCCCCC"> because</font>

229
00:11:11,860 --> 00:11:17,699
this<font color="#E5E5E5"> verification by looking at the the</font>

230
00:11:15,189 --> 00:11:21,099
<font color="#CCCCCC">Auto bytes of the output ciphertext</font>

231
00:11:17,699 --> 00:11:23,079
<font color="#CCCCCC">cannot distinguish between some</font>

232
00:11:21,100 --> 00:11:26,499
<font color="#CCCCCC">multibyte faults and single byte faults</font>

233
00:11:23,079 --> 00:11:30,128
<font color="#E5E5E5">injected before the ninth round so some</font>

234
00:11:26,499 --> 00:11:32,499
<font color="#CCCCCC">multibyte faults are still collected but</font>

235
00:11:30,129 --> 00:11:37,439
cannot<font color="#E5E5E5"> be</font><font color="#CCCCCC"> used for</font><font color="#E5E5E5"> key recovery which</font>

236
00:11:32,499 --> 00:11:41,290
leads to<font color="#E5E5E5"> this few non recoverable keys</font>

237
00:11:37,439 --> 00:11:43,498
so we showed this attack<font color="#CCCCCC"> on a fully</font>

238
00:11:41,290 --> 00:11:47,709
constrained design on this d1 SOC board

239
00:11:43,499 --> 00:11:51,550
with less than<font color="#CCCCCC"> 50% resources used by</font><font color="#E5E5E5"> the</font>

240
00:11:47,709 --> 00:11:53,439
attacker<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the smaller de 0 nano it has</font>

241
00:11:51,550 --> 00:11:55,719
only half the amount<font color="#CCCCCC"> of resources and</font>

242
00:11:53,439 --> 00:11:58,149
the fully constrained design was<font color="#CCCCCC"> not</font>

243
00:11:55,720 --> 00:12:00,040
vulnerable<font color="#CCCCCC"> so we see</font><font color="#E5E5E5"> that not all</font>

244
00:11:58,149 --> 00:12:03,910
<font color="#E5E5E5">devices are equally vulnerable</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font>

245
00:12:00,040 --> 00:12:06,579
case the power supply was the same on

246
00:12:03,910 --> 00:12:08,620
both<font color="#E5E5E5"> boards but with only half</font><font color="#CCCCCC"> the</font>

247
00:12:06,579 --> 00:12:11,170
<font color="#CCCCCC">amount</font><font color="#E5E5E5"> of resources the attacker could</font>

248
00:12:08,620 --> 00:12:14,529
not attack<font color="#E5E5E5"> a fully constrained design</font>

249
00:12:11,170 --> 00:12:17,649
with less than<font color="#CCCCCC"> 50% of these</font><font color="#E5E5E5"> produced</font>

250
00:12:14,529 --> 00:12:20,009
resources and there may be<font color="#E5E5E5"> also</font>

251
00:12:17,649 --> 00:12:22,540
alternatives to<font color="#CCCCCC"> using ring oscillators</font>

252
00:12:20,009 --> 00:12:24,490
<font color="#CCCCCC">so there may be other malicious logic</font>

253
00:12:22,540 --> 00:12:27,430
that causes<font color="#CCCCCC"> a</font><font color="#E5E5E5"> high current variation and</font>

254
00:12:24,490 --> 00:12:30,579
eventually voltage drops and we<font color="#CCCCCC"> also</font>

255
00:12:27,430 --> 00:12:32,819
thought about extending this<font color="#E5E5E5"> attack to</font>

256
00:12:30,579 --> 00:12:35,769
other<font color="#E5E5E5"> devices connected to the same</font>

257
00:12:32,819 --> 00:12:38,878
power<font color="#E5E5E5"> distribution networks such</font><font color="#CCCCCC"> as in</font>

258
00:12:35,769 --> 00:12:41,980
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case the arm core on the SOC</font>

259
00:12:38,879 --> 00:12:43,889
we also discussed some possible

260
00:12:41,980 --> 00:12:48,670
mitigations for example by using

261
00:12:43,889 --> 00:12:51,550
internal sensors TDC based probably to

262
00:12:48,670 --> 00:12:54,429
detect an attack or use<font color="#CCCCCC"> bitstream</font>

263
00:12:51,550 --> 00:12:57,819
checking to identify malicious logic in

264
00:12:54,429 --> 00:12:59,649
an<font color="#E5E5E5"> attacker design and finally</font><font color="#CCCCCC"> what we</font>

265
00:12:57,819 --> 00:13:02,319
can also do but requires<font color="#CCCCCC"> Hardware</font>

266
00:12:59,649 --> 00:13:04,899
modifications is<font color="#E5E5E5"> putting</font><font color="#CCCCCC"> different</font>

267
00:13:02,319 --> 00:13:08,019
designs on different voltage islands on

268
00:13:04,899 --> 00:13:11,679
<font color="#E5E5E5">the FPGA sacrificing some flexibility of</font>

269
00:13:08,019 --> 00:13:14,170
course so in conclusion we showed how

270
00:13:11,679 --> 00:13:17,740
<font color="#E5E5E5">high position fault injection on shared</font>

271
00:13:14,170 --> 00:13:18,939
<font color="#E5E5E5">FPGAs as possible and logical isolation</font>

272
00:13:17,740 --> 00:13:21,130
between designs

273
00:13:18,940 --> 00:13:24,310
<font color="#E5E5E5">is not enough to prevent manipulation</font>

274
00:13:21,130 --> 00:13:27,040
and we show<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> thread model must</font>

275
00:13:24,310 --> 00:13:30,880
<font color="#E5E5E5">be considered if we want to use FPGAs in</font>

276
00:13:27,040 --> 00:13:34,180
<font color="#E5E5E5">multi-user environments and mitigation</font>

277
00:13:30,880 --> 00:13:36,990
<font color="#E5E5E5">may even need some modifications through</font>

278
00:13:34,180 --> 00:13:40,140
hardware or new hardware architectures

279
00:13:36,990 --> 00:13:43,240
with that I want to<font color="#CCCCCC"> conclude my</font><font color="#E5E5E5"> talk and</font>

280
00:13:40,140 --> 00:13:53,340
you're welcome<font color="#E5E5E5"> to</font><font color="#CCCCCC"> ask</font><font color="#E5E5E5"> questions thank</font>

281
00:13:43,240 --> 00:13:53,340
<font color="#E5E5E5">you any questions</font>

282
00:14:01,000 --> 00:14:05,649
thank you for<font color="#CCCCCC"> your nice draw</font><font color="#E5E5E5"> like well I</font>

283
00:14:03,490 --> 00:14:07,839
want<font color="#CCCCCC"> to ask that you are</font><font color="#E5E5E5"> assuming the</font>

284
00:14:05,649 --> 00:14:10,540
ring oscillator to be already present in

285
00:14:07,839 --> 00:14:12,220
<font color="#CCCCCC">the</font><font color="#E5E5E5"> FPGA no the ring oscillator is</font>

286
00:14:10,540 --> 00:14:16,569
introduced by the attacker so basically

287
00:14:12,220 --> 00:14:19,240
we have some architecture where multiple

288
00:14:16,569 --> 00:14:21,430
users<font color="#CCCCCC"> can put their accelerators through</font>

289
00:14:19,240 --> 00:14:24,009
partial reconfiguration on the same FPGA

290
00:14:21,430 --> 00:14:25,959
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> and the attacker can just simply</font>

291
00:14:24,009 --> 00:14:29,230
deploy a grid of<font color="#CCCCCC"> ring ostrich's to</font>

292
00:14:25,959 --> 00:14:44,378
attack another user who probably put his

293
00:14:29,230 --> 00:14:47,110
<font color="#E5E5E5">a</font><font color="#CCCCCC"> Ehsan module on the same chip hello</font>

294
00:14:44,379 --> 00:14:50,259
yeah<font color="#E5E5E5"> so that model as it seems to me is</font>

295
00:14:47,110 --> 00:14:53,470
like somebody has already reconfigured a

296
00:14:50,259 --> 00:14:54,910
PGA and<font color="#E5E5E5"> put some green oscillator and</font>

297
00:14:53,470 --> 00:14:57,699
now you<font color="#E5E5E5"> are an attacker you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> gonna</font>

298
00:14:54,910 --> 00:15:00,339
<font color="#E5E5E5">use that yes not I mean not necessarily</font>

299
00:14:57,699 --> 00:15:02,979
<font color="#E5E5E5">use an existing structure for the attack</font>

300
00:15:00,339 --> 00:15:04,899
but<font color="#E5E5E5"> deploy your own ring oscillator grid</font>

301
00:15:02,980 --> 00:15:16,899
<font color="#E5E5E5">onto another another partition of the</font>

302
00:15:04,899 --> 00:15:19,329
<font color="#CCCCCC">same FPGA</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> okay so did you</font>

303
00:15:16,899 --> 00:15:22,180
<font color="#E5E5E5">somehow have to have to modify</font><font color="#CCCCCC"> your</font>

304
00:15:19,329 --> 00:15:25,209
<font color="#CCCCCC">power supply</font><font color="#E5E5E5"> of your victim boards no it</font>

305
00:15:22,180 --> 00:15:36,160
wasn't a<font color="#E5E5E5"> body fight it's just</font><font color="#CCCCCC"> stock</font>

306
00:15:25,209 --> 00:15:37,569
thank you the different<font color="#CCCCCC"> full-rate</font><font color="#E5E5E5"> should</font>

307
00:15:36,160 --> 00:15:39,730
<font color="#E5E5E5">be getting</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> is the success rate</font>

308
00:15:37,569 --> 00:15:41,709
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the different associate testing yeah</font>

309
00:15:39,730 --> 00:15:44,189
you have any intuition<font color="#E5E5E5"> in the intuition</font>

310
00:15:41,709 --> 00:15:47,170
why<font color="#E5E5E5"> you were</font><font color="#CCCCCC"> seeing those differences</font>

311
00:15:44,189 --> 00:15:48,879
<font color="#E5E5E5">yeah I'm I mean I</font><font color="#CCCCCC"> I think the the</font>

312
00:15:47,170 --> 00:15:51,550
<font color="#E5E5E5">oscillation of the ring ostrich's is</font>

313
00:15:48,879 --> 00:15:53,829
also highly dependent on the process

314
00:15:51,550 --> 00:15:56,319
variation<font color="#E5E5E5"> so maybe the attacker design</font>

315
00:15:53,829 --> 00:15:59,170
was simply more effective on some of

316
00:15:56,319 --> 00:16:01,149
these<font color="#E5E5E5"> FPGAs because</font><font color="#CCCCCC"> due to</font><font color="#E5E5E5"> process</font>

317
00:15:59,170 --> 00:16:06,430
variation the oscillation<font color="#E5E5E5"> was more high</font>

318
00:16:01,149 --> 00:16:09,329
frequent or something yeah so we<font color="#E5E5E5"> still</font>

319
00:16:06,430 --> 00:16:09,329
<font color="#E5E5E5">have time if anyone</font><font color="#CCCCCC"> has any</font><font color="#E5E5E5"> questions</font>

320
00:16:11,720 --> 00:16:28,550
oh there's some way back hello<font color="#CCCCCC"> oh did</font>

321
00:16:26,480 --> 00:16:31,190
<font color="#E5E5E5">you test it on Amazon called service</font>

322
00:16:28,550 --> 00:16:33,920
<font color="#CCCCCC">liked</font><font color="#E5E5E5"> was the</font><font color="#CCCCCC"> name service attack I know</font>

323
00:16:31,190 --> 00:16:36,350
we did<font color="#CCCCCC"> not</font><font color="#E5E5E5"> read it</font><font color="#CCCCCC"> not tested yet</font><font color="#E5E5E5"> but</font>

324
00:16:33,920 --> 00:16:38,540
does<font color="#E5E5E5"> it work</font><font color="#CCCCCC"> like in I don't</font><font color="#E5E5E5"> know if the</font>

325
00:16:36,350 --> 00:16:42,080
Amazon Cloud<font color="#CCCCCC"> services allows the other</font>

326
00:16:38,540 --> 00:16:46,099
<font color="#E5E5E5">partition to access the same inputs and</font>

327
00:16:42,080 --> 00:16:48,260
outputs of<font color="#E5E5E5"> the other partition</font><font color="#CCCCCC"> I mean we</font>

328
00:16:46,100 --> 00:16:51,470
don't<font color="#E5E5E5"> necessarily</font><font color="#CCCCCC"> need a</font><font color="#E5E5E5"> direct access</font>

329
00:16:48,260 --> 00:16:54,110
<font color="#E5E5E5">of the inputs of the other partition</font><font color="#CCCCCC"> the</font>

330
00:16:51,470 --> 00:16:57,290
idea was that the<font color="#CCCCCC"> victim has his</font>

331
00:16:54,110 --> 00:16:59,720
software<font color="#CCCCCC"> process</font><font color="#E5E5E5"> running and using the</font>

332
00:16:57,290 --> 00:17:02,410
software<font color="#CCCCCC"> process uses the AES module or</font>

333
00:16:59,720 --> 00:17:05,540
whatever<font color="#CCCCCC"> this victim</font><font color="#E5E5E5"> put on the FPGA and</font>

334
00:17:02,410 --> 00:17:07,010
the attacker can access the<font color="#CCCCCC"> software</font>

335
00:17:05,540 --> 00:17:09,980
part<font color="#E5E5E5"> through some kind</font><font color="#CCCCCC"> of public</font>

336
00:17:07,010 --> 00:17:13,280
<font color="#E5E5E5">interface which</font><font color="#CCCCCC"> makes the victim use</font>

337
00:17:09,980 --> 00:17:15,620
<font color="#E5E5E5">here's a s module so it could be also a</font>

338
00:17:13,280 --> 00:17:17,300
replay<font color="#CCCCCC"> attack or something</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> that so</font>

339
00:17:15,619 --> 00:17:20,659
there's no direct logical connection

340
00:17:17,300 --> 00:17:22,790
between the designs on the<font color="#E5E5E5"> FPGA but the</font>

341
00:17:20,660 --> 00:17:24,589
attacker can just issue requests to some

342
00:17:22,790 --> 00:17:28,000
kind of<font color="#E5E5E5"> software interface provided by</font>

343
00:17:24,589 --> 00:17:30,919
the victim<font color="#E5E5E5"> does it answer your question</font>

344
00:17:28,000 --> 00:17:32,960
yeah but I mean if you technically<font color="#E5E5E5"> on</font>

345
00:17:30,920 --> 00:17:34,520
<font color="#CCCCCC">our cloud</font><font color="#E5E5E5"> service I would suspect there</font>

346
00:17:32,960 --> 00:17:38,750
will<font color="#CCCCCC"> be some software isolation between</font>

347
00:17:34,520 --> 00:17:42,020
process<font color="#E5E5E5"> so</font><font color="#CCCCCC"> no but I mean</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> victim</font><font color="#E5E5E5"> put</font>

348
00:17:38,750 --> 00:17:45,040
his a s module or whatever<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the on the</font>

349
00:17:42,020 --> 00:17:48,200
FPGA to use it for something<font color="#E5E5E5"> right and</font>

350
00:17:45,040 --> 00:17:51,830
so in some scenarios<font color="#E5E5E5"> maybe the attacker</font>

351
00:17:48,200 --> 00:17:54,500
<font color="#E5E5E5">may be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make the victim encrypt</font>

352
00:17:51,830 --> 00:17:57,679
the same plaintext twice which<font color="#CCCCCC"> is all he</font>

353
00:17:54,500 --> 00:17:58,790
needs right to<font color="#CCCCCC"> perform a DFA or there</font>

354
00:17:57,680 --> 00:18:00,850
may be<font color="#E5E5E5"> some other attacks on other</font>

355
00:17:58,790 --> 00:18:05,210
ciphers this was just a<font color="#E5E5E5"> proof of concept</font>

356
00:18:00,850 --> 00:18:06,830
<font color="#CCCCCC">so in the</font><font color="#E5E5E5"> real world scenario it might</font>

357
00:18:05,210 --> 00:18:09,080
be different<font color="#E5E5E5"> yeah</font>

358
00:18:06,830 --> 00:18:12,169
this model of<font color="#E5E5E5"> FPGA supports partial</font>

359
00:18:09,080 --> 00:18:14,510
configuration or you use FPGA in target

360
00:18:12,170 --> 00:18:16,130
languages through it I mean we used

361
00:18:14,510 --> 00:18:18,560
<font color="#E5E5E5">because it was simpler we use just as a</font>

362
00:18:16,130 --> 00:18:20,390
single<font color="#CCCCCC"> design and put it on the FPGA but</font>

363
00:18:18,560 --> 00:18:22,789
it<font color="#E5E5E5"> supports partial reconfiguration yeah</font>

364
00:18:20,390 --> 00:18:25,310
<font color="#CCCCCC">okay</font>

365
00:18:22,789 --> 00:18:33,230
great thing<font color="#CCCCCC"> says don't speak her again</font>

366
00:18:25,310 --> 00:18:33,230
[Applause]

