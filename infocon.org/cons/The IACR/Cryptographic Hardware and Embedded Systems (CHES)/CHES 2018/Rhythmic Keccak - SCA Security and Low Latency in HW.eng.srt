1
00:00:00,120 --> 00:00:06,080
we have<font color="#E5E5E5"> no the session of threshold</font>

2
00:00:02,220 --> 00:00:08,910
implementations<font color="#E5E5E5"> consisting of two talks</font>

3
00:00:06,080 --> 00:00:10,740
<font color="#CCCCCC">please note that this this</font><font color="#E5E5E5"> session is</font>

4
00:00:08,910 --> 00:00:12,599
followed directly by the first<font color="#CCCCCC"> inverter</font>

5
00:00:10,740 --> 00:00:16,590
<font color="#E5E5E5">talked and</font><font color="#CCCCCC"> then please don't leave the</font>

6
00:00:12,599 --> 00:00:20,490
<font color="#E5E5E5">hall</font><font color="#CCCCCC"> the talk</font><font color="#E5E5E5"> the first talk of the</font>

7
00:00:16,590 --> 00:00:23,090
session is titled<font color="#CCCCCC"> Rich</font><font color="#E5E5E5"> McKay</font><font color="#CCCCCC"> Chuck SC a</font>

8
00:00:20,490 --> 00:00:26,220
security and low<font color="#CCCCCC"> latency in Hardware</font>

9
00:00:23,090 --> 00:00:26,849
altered by<font color="#CCCCCC"> Victor Arriba's big old</font>

10
00:00:26,220 --> 00:00:29,849
<font color="#CCCCCC">building</font>

11
00:00:26,849 --> 00:00:33,420
<font color="#E5E5E5">Georg</font><font color="#CCCCCC"> Petra des</font><font color="#E5E5E5"> Svetlana</font><font color="#CCCCCC"> cava and</font>

12
00:00:29,849 --> 00:00:36,270
<font color="#E5E5E5">Vincent Hyman from Co 11 and now Victor</font>

13
00:00:33,420 --> 00:00:38,850
is giving a talk<font color="#E5E5E5"> Thank You Amir for the</font>

14
00:00:36,270 --> 00:00:41,910
introduction<font color="#CCCCCC"> good morning everybody</font>

15
00:00:38,850 --> 00:00:45,510
<font color="#CCCCCC">thank you for being here</font>

16
00:00:41,910 --> 00:00:48,390
hackers can<font color="#E5E5E5"> get</font><font color="#CCCCCC"> spins</font><font color="#E5E5E5"> using your smart</font>

17
00:00:45,510 --> 00:00:52,468
<font color="#E5E5E5">phone sensor data or also as</font><font color="#CCCCCC"> well-known</font>

18
00:00:48,390 --> 00:00:55,520
<font color="#E5E5E5">side channel information today</font><font color="#CCCCCC"> I bring</font>

19
00:00:52,469 --> 00:00:59,670
you two topics<font color="#CCCCCC"> I'll start by introducing</font>

20
00:00:55,520 --> 00:01:03,329
<font color="#E5E5E5">key concepts to securely successfully</font>

21
00:00:59,670 --> 00:01:06,780
<font color="#E5E5E5">Security's hardware and second I will</font>

22
00:01:03,329 --> 00:01:10,320
present a methodology that that we used

23
00:01:06,780 --> 00:01:13,200
to reduce<font color="#E5E5E5"> the latency of these secure</font>

24
00:01:10,320 --> 00:01:17,250
implementations so my talk is divided

25
00:01:13,200 --> 00:01:20,479
<font color="#E5E5E5">into two parts</font><font color="#CCCCCC"> first I'll introduce this</font>

26
00:01:17,250 --> 00:01:22,619
concept and<font color="#E5E5E5"> then I'll continue by</font>

27
00:01:20,479 --> 00:01:25,229
introducing my<font color="#E5E5E5"> methodology the</font>

28
00:01:22,619 --> 00:01:28,490
methodology we used for reducing<font color="#CCCCCC"> the</font>

29
00:01:25,229 --> 00:01:33,539
latency of<font color="#E5E5E5"> these secure implementations</font>

30
00:01:28,490 --> 00:01:36,439
so let<font color="#E5E5E5"> me start by introducing two of</font>

31
00:01:33,540 --> 00:01:38,850
masking schemes we used in our<font color="#E5E5E5"> work</font>

32
00:01:36,439 --> 00:01:42,119
<font color="#E5E5E5">through</font><font color="#CCCCCC"> selling them in implementations</font>

33
00:01:38,850 --> 00:01:44,970
or<font color="#CCCCCC"> TI</font><font color="#E5E5E5"> very well known</font><font color="#CCCCCC"> already this is an</font>

34
00:01:42,119 --> 00:01:48,000
example of<font color="#E5E5E5"> an and</font><font color="#CCCCCC"> gate secure first</font>

35
00:01:44,970 --> 00:01:49,369
<font color="#CCCCCC">order secure and gate on the inputs</font>

36
00:01:48,000 --> 00:01:53,070
<font color="#E5E5E5">given in TI</font>

37
00:01:49,369 --> 00:01:54,869
are dependent<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> decree the</font>

38
00:01:53,070 --> 00:01:56,850
algebraic degree of the function and the

39
00:01:54,869 --> 00:01:59,640
degree<font color="#CCCCCC"> of security that we</font><font color="#E5E5E5"> want to</font>

40
00:01:56,850 --> 00:02:02,250
<font color="#E5E5E5">achieve</font><font color="#CCCCCC"> a key property of</font><font color="#E5E5E5"> TI</font>

41
00:01:59,640 --> 00:02:06,570
it's the third<font color="#CCCCCC"> Anan completeness that is</font>

42
00:02:02,250 --> 00:02:09,449
define as follows every<font color="#CCCCCC"> D combination of</font>

43
00:02:06,570 --> 00:02:12,060
<font color="#E5E5E5">output shares must be</font><font color="#CCCCCC"> independent of one</font>

44
00:02:09,449 --> 00:02:13,828
input share so here in this example<font color="#CCCCCC"> we</font>

45
00:02:12,060 --> 00:02:17,010
see<font color="#CCCCCC"> that every output</font>

46
00:02:13,829 --> 00:02:21,120
it's depending on only<font color="#E5E5E5"> two shares to</font>

47
00:02:17,010 --> 00:02:23,700
input shares<font color="#CCCCCC"> second sharing scheme we</font>

48
00:02:21,120 --> 00:02:27,689
use in our work<font color="#E5E5E5"> is domain oriented</font>

49
00:02:23,700 --> 00:02:30,929
masking also known as<font color="#CCCCCC"> done in this case</font>

50
00:02:27,689 --> 00:02:34,379
the input the number of input shares is

51
00:02:30,930 --> 00:02:37,260
given only by<font color="#E5E5E5"> the desired degree of</font>

52
00:02:34,379 --> 00:02:40,108
<font color="#E5E5E5">security</font><font color="#CCCCCC"> it's important</font><font color="#E5E5E5"> to note that we</font>

53
00:02:37,260 --> 00:02:42,390
need a<font color="#E5E5E5"> layer of registers to secure this</font>

54
00:02:40,109 --> 00:02:46,500
multiplier<font color="#E5E5E5"> in order to synchronize</font>

55
00:02:42,390 --> 00:02:48,510
randomization<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also we need an extra</font>

56
00:02:46,500 --> 00:02:50,730
property<font color="#E5E5E5"> we need the inputs to</font><font color="#CCCCCC"> be</font>

57
00:02:48,510 --> 00:02:54,388
independent of one another<font color="#E5E5E5"> to ensure</font>

58
00:02:50,730 --> 00:02:55,980
<font color="#E5E5E5">security so I'll be focusing on these</font>

59
00:02:54,389 --> 00:03:00,000
input dependencies why they are

60
00:02:55,980 --> 00:03:01,950
dangerous<font color="#E5E5E5"> and how they are caused so to</font>

61
00:03:00,000 --> 00:03:04,799
<font color="#CCCCCC">illustrate that</font><font color="#E5E5E5"> I'll bring you a very</font>

62
00:03:01,950 --> 00:03:09,988
small example this is a<font color="#E5E5E5"> Dom multiplier</font><font color="#CCCCCC"> X</font>

63
00:03:04,799 --> 00:03:12,599
times y here we<font color="#E5E5E5"> see the four cross</font>

64
00:03:09,989 --> 00:03:15,060
products there are<font color="#E5E5E5"> two dangerous cross</font>

65
00:03:12,599 --> 00:03:18,268
products that are mixing<font color="#E5E5E5"> the two shares</font>

66
00:03:15,060 --> 00:03:21,060
that we use right so these are the two

67
00:03:18,269 --> 00:03:25,019
dangerous<font color="#E5E5E5"> ones now assuming our inputs</font>

68
00:03:21,060 --> 00:03:28,260
are independent<font color="#CCCCCC"> we are safe and</font><font color="#E5E5E5"> non</font>

69
00:03:25,019 --> 00:03:30,389
completeness<font color="#E5E5E5"> is fulfilled then I bring</font>

70
00:03:28,260 --> 00:03:35,909
you another small example calculating

71
00:03:30,389 --> 00:03:39,030
<font color="#E5E5E5">this operation x times X shifted once so</font>

72
00:03:35,909 --> 00:03:40,948
we<font color="#E5E5E5"> previously before them nonlinear</font>

73
00:03:39,030 --> 00:03:43,620
operation we execute a linear operation

74
00:03:40,949 --> 00:03:46,290
<font color="#E5E5E5">it could be whatever even the identity</font>

75
00:03:43,620 --> 00:03:48,750
function<font color="#E5E5E5"> would work as well</font><font color="#CCCCCC"> so we see</font>

76
00:03:46,290 --> 00:03:50,429
the result of the linear function<font color="#CCCCCC"> and</font>

77
00:03:48,750 --> 00:03:52,889
then<font color="#E5E5E5"> the result of the nonlinear</font>

78
00:03:50,430 --> 00:03:56,579
function again look at the cross

79
00:03:52,889 --> 00:03:58,500
products that are dangerous<font color="#CCCCCC"> now due</font><font color="#E5E5E5"> to</font>

80
00:03:56,579 --> 00:04:01,739
these dependencies we have non

81
00:03:58,500 --> 00:04:06,389
completeness broken<font color="#E5E5E5"> there this is a</font>

82
00:04:01,739 --> 00:04:08,459
security and important<font color="#E5E5E5"> security for this</font>

83
00:04:06,389 --> 00:04:11,159
previous<font color="#CCCCCC"> example was pretty simple was</font>

84
00:04:08,459 --> 00:04:13,560
<font color="#E5E5E5">very maybe very obvious</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> what happens</font>

85
00:04:11,159 --> 00:04:18,209
<font color="#E5E5E5">when we have more complex operations</font>

86
00:04:13,560 --> 00:04:21,358
<font color="#E5E5E5">like the theta step in</font><font color="#CCCCCC"> in K check that</font>

87
00:04:18,209 --> 00:04:24,719
introduces<font color="#E5E5E5"> these intricate dependencies</font>

88
00:04:21,358 --> 00:04:27,330
in the<font color="#CCCCCC"> in the state</font><font color="#E5E5E5"> run based</font>

89
00:04:24,719 --> 00:04:31,170
implementations are very risky

90
00:04:27,330 --> 00:04:33,229
and we found a flaw<font color="#E5E5E5"> in previous round</font>

91
00:04:31,170 --> 00:04:38,220
based implementations<font color="#CCCCCC"> in the literature</font>

92
00:04:33,230 --> 00:04:41,190
using<font color="#E5E5E5"> a</font><font color="#CCCCCC"> toe multiplier this could</font><font color="#E5E5E5"> lead</font>

93
00:04:38,220 --> 00:04:43,770
to<font color="#E5E5E5"> potentially exploitable leakage</font><font color="#CCCCCC"> we</font>

94
00:04:41,190 --> 00:04:47,280
<font color="#E5E5E5">contacted the outdoors they</font><font color="#CCCCCC"> acknowledged</font>

95
00:04:43,770 --> 00:04:52,320
our findings<font color="#E5E5E5"> and they updated their work</font>

96
00:04:47,280 --> 00:04:56,429
in<font color="#CCCCCC"> ePrint so I'll show</font><font color="#E5E5E5"> fill</font>

97
00:04:52,320 --> 00:04:59,700
implementations we did<font color="#CCCCCC"> first we</font>

98
00:04:56,430 --> 00:05:02,730
implemented first<font color="#E5E5E5"> order</font><font color="#CCCCCC"> Security check</font>

99
00:04:59,700 --> 00:05:06,690
implementation with this Dom sharing

100
00:05:02,730 --> 00:05:11,220
scheme um and we see we saw that there

101
00:05:06,690 --> 00:05:15,450
was a leakage<font color="#CCCCCC"> not completeness flaw in T</font>

102
00:05:11,220 --> 00:05:19,350
and now I'll show<font color="#CCCCCC"> you</font><font color="#E5E5E5"> how we saw this</font>

103
00:05:15,450 --> 00:05:22,650
leakage how this leakage appears so<font color="#E5E5E5"> let</font>

104
00:05:19,350 --> 00:05:26,280
me go over one round<font color="#E5E5E5"> of K check first we</font>

105
00:05:22,650 --> 00:05:28,979
applied theta<font color="#E5E5E5"> with these intricate</font>

106
00:05:26,280 --> 00:05:34,109
dependencies we focus on these<font color="#CCCCCC"> two</font><font color="#E5E5E5"> bits</font>

107
00:05:28,980 --> 00:05:39,200
<font color="#E5E5E5">and let's see where they</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> then we</font>

108
00:05:34,110 --> 00:05:43,800
apply<font color="#CCCCCC"> the raw step</font><font color="#E5E5E5"> row it's just shift</font>

109
00:05:39,200 --> 00:05:50,310
along the seats<font color="#CCCCCC"> Lane</font><font color="#E5E5E5"> then it comes peel</font>

110
00:05:43,800 --> 00:05:53,190
<font color="#CCCCCC">P is just a shift in the XY plane this</font>

111
00:05:50,310 --> 00:05:57,000
<font color="#E5E5E5">last you</font><font color="#CCCCCC"> are only wiring</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> they're they</font>

112
00:05:53,190 --> 00:05:59,490
<font color="#E5E5E5">don't mean any problem but then we have</font>

113
00:05:57,000 --> 00:06:02,130
the nonlinear<font color="#E5E5E5"> permutation team which</font>

114
00:05:59,490 --> 00:06:04,860
<font color="#E5E5E5">combine these two bits we</font><font color="#CCCCCC"> were looking</font>

115
00:06:02,130 --> 00:06:08,700
at into just one bit failing on

116
00:06:04,860 --> 00:06:11,160
completeness we found a total<font color="#CCCCCC"> of 112</font>

117
00:06:08,700 --> 00:06:14,599
bits failing<font color="#E5E5E5"> this non non completeness</font>

118
00:06:11,160 --> 00:06:17,250
in this way out of 200 bits of the state

119
00:06:14,600 --> 00:06:23,790
with<font color="#E5E5E5"> the tool we we implemented</font>

120
00:06:17,250 --> 00:06:25,800
ourselves<font color="#CCCCCC"> later we evaluate this</font>

121
00:06:23,790 --> 00:06:28,440
<font color="#E5E5E5">implementation with a test vector</font>

122
00:06:25,800 --> 00:06:32,310
leakage assessment we use<font color="#E5E5E5"> 55 million</font>

123
00:06:28,440 --> 00:06:35,010
traces for<font color="#E5E5E5"> the evaluation we test first</font>

124
00:06:32,310 --> 00:06:37,620
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> contour measure</font><font color="#E5E5E5"> switched off we</font>

125
00:06:35,010 --> 00:06:40,920
see huge leakage<font color="#E5E5E5"> we see how the</font><font color="#CCCCCC"> t-value</font>

126
00:06:37,620 --> 00:06:43,830
the blue graph is way out<font color="#E5E5E5"> of the</font>

127
00:06:40,920 --> 00:06:46,440
<font color="#CCCCCC">read</font><font color="#E5E5E5"> threshold then we switch on they</font>

128
00:06:43,830 --> 00:06:49,169
implement a them countermeasure<font color="#E5E5E5"> sorry</font>

129
00:06:46,440 --> 00:06:52,500
<font color="#E5E5E5">and we see small leakage</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the first</font>

130
00:06:49,170 --> 00:06:54,720
<font color="#E5E5E5">order which</font><font color="#CCCCCC"> should</font><font color="#E5E5E5"> have no leakage at</font>

131
00:06:52,500 --> 00:06:56,730
all<font color="#CCCCCC"> its small leakage but</font><font color="#E5E5E5"> we are not</font>

132
00:06:54,720 --> 00:07:02,360
<font color="#E5E5E5">sure if</font><font color="#CCCCCC"> we don't know if this could lead</font>

133
00:06:56,730 --> 00:07:06,630
to an attack so<font color="#E5E5E5"> we propose a fix our fix</font>

134
00:07:02,360 --> 00:07:10,520
<font color="#CCCCCC">in our fix we introduce a</font><font color="#E5E5E5"> linearly layer</font>

135
00:07:06,630 --> 00:07:12,330
of registers<font color="#E5E5E5"> in the middle of the linear</font>

136
00:07:10,520 --> 00:07:14,969
permutations and the nonlinear

137
00:07:12,330 --> 00:07:17,580
permutation<font color="#E5E5E5"> this way we break the</font>

138
00:07:14,970 --> 00:07:21,780
dependencies<font color="#E5E5E5"> created by this complex</font>

139
00:07:17,580 --> 00:07:24,960
<font color="#E5E5E5">theta operation and this way we ensure</font>

140
00:07:21,780 --> 00:07:27,539
non<font color="#CCCCCC"> completeness is fulfilled</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> ran our</font>

141
00:07:24,960 --> 00:07:30,510
tool and we see<font color="#E5E5E5"> that indeed non</font>

142
00:07:27,540 --> 00:07:33,240
completeness is safe we<font color="#E5E5E5"> added a new</font>

143
00:07:30,510 --> 00:07:36,330
<font color="#CCCCCC">layer of</font><font color="#E5E5E5"> registers so we</font><font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to</font>

144
00:07:33,240 --> 00:07:38,820
<font color="#CCCCCC">optimize that</font><font color="#E5E5E5"> we try then we merge the</font>

145
00:07:36,330 --> 00:07:40,979
<font color="#E5E5E5">state register and the and this new</font>

146
00:07:38,820 --> 00:07:43,500
layer<font color="#E5E5E5"> of registers in order to reduce a</font>

147
00:07:40,980 --> 00:07:46,830
<font color="#E5E5E5">bit more the latency so that the latency</font>

148
00:07:43,500 --> 00:07:50,520
<font color="#E5E5E5">is not affected that much and the</font>

149
00:07:46,830 --> 00:07:53,609
resulting implementation is this one so

150
00:07:50,520 --> 00:07:55,859
first we have the linear operations<font color="#E5E5E5"> then</font>

151
00:07:53,610 --> 00:07:57,780
we have the state register breaking the

152
00:07:55,860 --> 00:08:01,440
dependencies<font color="#E5E5E5"> and then already the</font>

153
00:07:57,780 --> 00:08:05,039
nonlinear operation we evaluate this

154
00:08:01,440 --> 00:08:08,130
implementation<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well with the same</font>

155
00:08:05,040 --> 00:08:13,950
<font color="#CCCCCC">setup we don't change anything in the</font>

156
00:08:08,130 --> 00:08:16,050
<font color="#CCCCCC">setup</font><font color="#E5E5E5"> and then uhm we get indeed</font><font color="#CCCCCC"> first</font>

157
00:08:13,950 --> 00:08:19,890
<font color="#E5E5E5">order secure implementation with no</font>

158
00:08:16,050 --> 00:08:24,450
leakage and second order huge leakage<font color="#E5E5E5"> as</font>

159
00:08:19,890 --> 00:08:28,380
we<font color="#E5E5E5"> expected right so now I'll continue</font>

160
00:08:24,450 --> 00:08:30,270
<font color="#E5E5E5">with the second part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> my talk</font><font color="#CCCCCC"> I'll let</font>

161
00:08:28,380 --> 00:08:33,419
you<font color="#E5E5E5"> I'll tell you about the methodology</font>

162
00:08:30,270 --> 00:08:37,319
I use for securing<font color="#CCCCCC"> these and world</font>

163
00:08:33,419 --> 00:08:39,780
implementations what's what's<font color="#E5E5E5"> what's our</font>

164
00:08:37,320 --> 00:08:43,620
aim now<font color="#CCCCCC"> we want to have the</font><font color="#E5E5E5"> number of</font>

165
00:08:39,780 --> 00:08:45,870
cycles<font color="#E5E5E5"> in in our implementation for that</font>

166
00:08:43,620 --> 00:08:50,250
<font color="#CCCCCC">we will</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to avoid registers</font><font color="#E5E5E5"> and</font>

167
00:08:45,870 --> 00:08:52,560
you've seen how how<font color="#E5E5E5"> this Dom sharing</font>

168
00:08:50,250 --> 00:08:54,630
scheme<font color="#E5E5E5"> good needs registers in order to</font>

169
00:08:52,560 --> 00:08:57,329
bring the these<font color="#E5E5E5"> dependencies so</font>

170
00:08:54,630 --> 00:09:01,140
now is when we<font color="#CCCCCC"> use we will use TI in</font>

171
00:08:57,330 --> 00:09:02,940
order<font color="#E5E5E5"> to successfully achieve these to</font>

172
00:09:01,140 --> 00:09:05,130
illustrate<font color="#CCCCCC"> my methodology I bring you a</font>

173
00:09:02,940 --> 00:09:09,270
small<font color="#E5E5E5"> example of a QWERTY cooperation a</font>

174
00:09:05,130 --> 00:09:12,660
<font color="#CCCCCC">four bit</font><font color="#E5E5E5"> for input and</font><font color="#CCCCCC"> gates</font><font color="#E5E5E5"> to secure</font>

175
00:09:09,270 --> 00:09:15,630
it we split the operation<font color="#E5E5E5"> into two</font>

176
00:09:12,660 --> 00:09:18,959
<font color="#E5E5E5">layers of quadratic operations which we</font>

177
00:09:15,630 --> 00:09:23,189
know better how<font color="#CCCCCC"> to secure in the first</font>

178
00:09:18,960 --> 00:09:27,270
time we implement<font color="#CCCCCC"> two first order</font>

179
00:09:23,190 --> 00:09:30,720
sharing schemes<font color="#E5E5E5"> in both layers so if we</font>

180
00:09:27,270 --> 00:09:32,550
look<font color="#E5E5E5"> at the input dependencies on the</font>

181
00:09:30,720 --> 00:09:35,580
output of<font color="#E5E5E5"> the first layer and then we</font>

182
00:09:32,550 --> 00:09:38,430
compute the second layer every<font color="#CCCCCC"> output</font>

183
00:09:35,580 --> 00:09:41,070
will break<font color="#CCCCCC"> non completeness as</font><font color="#E5E5E5"> Ti needs</font>

184
00:09:38,430 --> 00:09:43,739
it<font color="#CCCCCC"> so then what do we</font><font color="#E5E5E5"> do how do we fix</font>

185
00:09:41,070 --> 00:09:45,570
this problem<font color="#E5E5E5"> we implement a first a</font>

186
00:09:43,740 --> 00:09:47,820
second order sharing<font color="#E5E5E5"> scheme in the first</font>

187
00:09:45,570 --> 00:09:50,820
layer and<font color="#E5E5E5"> its first order sharing scheme</font>

188
00:09:47,820 --> 00:09:54,150
<font color="#E5E5E5">in the second layer</font><font color="#CCCCCC"> so this way no</font>

189
00:09:50,820 --> 00:09:59,340
output<font color="#E5E5E5"> at the end is failing non</font>

190
00:09:54,150 --> 00:10:02,310
completeness<font color="#E5E5E5"> why this works</font><font color="#CCCCCC"> um due to</font>

191
00:09:59,340 --> 00:10:05,910
the two-bit nature of a NAND gate<font color="#CCCCCC"> we</font>

192
00:10:02,310 --> 00:10:09,599
know that the<font color="#E5E5E5"> output of the first layer</font>

193
00:10:05,910 --> 00:10:12,719
<font color="#E5E5E5">needs need twice</font><font color="#CCCCCC"> as much</font><font color="#E5E5E5"> security than</font>

194
00:10:09,600 --> 00:10:14,880
the<font color="#E5E5E5"> outputs of the second layer</font><font color="#CCCCCC"> so then</font>

195
00:10:12,720 --> 00:10:16,770
we extend this<font color="#E5E5E5"> methodology and we</font>

196
00:10:14,880 --> 00:10:22,470
generalize for higher orders and<font color="#E5E5E5"> higher</font>

197
00:10:16,770 --> 00:10:25,410
the algebraic<font color="#E5E5E5"> decrees we start from the</font>

198
00:10:22,470 --> 00:10:27,810
targeted DF degree of security<font color="#CCCCCC"> of the</font>

199
00:10:25,410 --> 00:10:30,780
last layer<font color="#E5E5E5"> and from there we crawl back</font>

200
00:10:27,810 --> 00:10:33,300
to<font color="#E5E5E5"> subsequent</font><font color="#CCCCCC"> previous layers</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the</font>

201
00:10:30,780 --> 00:10:34,920
current layer will depend on<font color="#E5E5E5"> the</font>

202
00:10:33,300 --> 00:10:38,729
algebraic degree and the<font color="#CCCCCC"> degree of</font>

203
00:10:34,920 --> 00:10:41,430
security<font color="#E5E5E5"> of the next layer so this</font>

204
00:10:38,730 --> 00:10:43,860
<font color="#CCCCCC">methodology</font><font color="#E5E5E5"> does not specify the sharing</font>

205
00:10:41,430 --> 00:10:45,810
scheme to<font color="#CCCCCC"> use it just specifies the</font>

206
00:10:43,860 --> 00:10:49,650
degree<font color="#CCCCCC"> of security</font><font color="#E5E5E5"> that every layer</font>

207
00:10:45,810 --> 00:10:53,699
should have we don't provide<font color="#E5E5E5"> the the</font>

208
00:10:49,650 --> 00:10:56,520
<font color="#CCCCCC">randomness needed for multivariate</font>

209
00:10:53,700 --> 00:11:01,560
security and it might<font color="#CCCCCC"> not</font><font color="#E5E5E5"> be the</font><font color="#CCCCCC"> most</font>

210
00:10:56,520 --> 00:11:04,650
optimal<font color="#E5E5E5"> design but we aim to we aim this</font>

211
00:11:01,560 --> 00:11:08,290
as a starting point towards reduced and

212
00:11:04,650 --> 00:11:13,100
fastest secure implementations

213
00:11:08,290 --> 00:11:16,790
so we use this methodology to to speed

214
00:11:13,100 --> 00:11:20,660
up our<font color="#E5E5E5"> EHR implementations and what do</font>

215
00:11:16,790 --> 00:11:23,689
<font color="#E5E5E5">we want we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> run to execute two</font>

216
00:11:20,660 --> 00:11:27,649
rounds at once without registers in the

217
00:11:23,689 --> 00:11:30,110
<font color="#E5E5E5">middle so with using the previous</font>

218
00:11:27,649 --> 00:11:33,529
equations<font color="#E5E5E5"> we have that the first layer</font>

219
00:11:30,110 --> 00:11:35,329
needs a second order sharing and the

220
00:11:33,529 --> 00:11:38,000
first layer needs a<font color="#E5E5E5"> first order sharing</font>

221
00:11:35,329 --> 00:11:40,638
<font color="#E5E5E5">since the nonlinear operation used in</font>

222
00:11:38,000 --> 00:11:43,129
<font color="#CCCCCC">kichaka's algebraic degree two and we</font>

223
00:11:40,639 --> 00:11:47,029
<font color="#CCCCCC">are aiming for a first order secure</font>

224
00:11:43,129 --> 00:11:50,600
implementation<font color="#E5E5E5"> first we use</font><font color="#CCCCCC"> this sharing</font>

225
00:11:47,029 --> 00:11:54,529
scheme with five inputs<font color="#E5E5E5"> in the first</font>

226
00:11:50,600 --> 00:11:57,740
layer<font color="#CCCCCC"> and</font><font color="#E5E5E5"> ten outputs of the first layer</font>

227
00:11:54,529 --> 00:12:00,589
then second layer will use these<font color="#E5E5E5"> ten</font>

228
00:11:57,740 --> 00:12:02,870
outputs compressing them to<font color="#E5E5E5"> five outputs</font>

229
00:12:00,589 --> 00:12:06,350
to five yes five outputs in<font color="#CCCCCC"> the second</font>

230
00:12:02,870 --> 00:12:07,819
layer then this was not<font color="#CCCCCC"> very optimal</font>

231
00:12:06,350 --> 00:12:11,029
<font color="#E5E5E5">because there are a lot</font><font color="#CCCCCC"> of shares</font>

232
00:12:07,819 --> 00:12:15,559
<font color="#E5E5E5">involved so we try to optimize this and</font>

233
00:12:11,029 --> 00:12:21,199
we found six to six<font color="#E5E5E5"> sharing scheme that</font>

234
00:12:15,559 --> 00:12:23,449
we can apply for both layers so I'll

235
00:12:21,199 --> 00:12:25,790
talk<font color="#E5E5E5"> a</font><font color="#CCCCCC"> bit more in detail of the six to</font>

236
00:12:23,449 --> 00:12:29,508
six sharing scheme<font color="#E5E5E5"> if you are interested</font>

237
00:12:25,790 --> 00:12:33,469
on the five to ten you<font color="#CCCCCC"> can you can check</font>

238
00:12:29,509 --> 00:12:38,449
the paper<font color="#CCCCCC"> so first layer</font><font color="#E5E5E5"> has these</font>

239
00:12:33,470 --> 00:12:42,319
dependencies we every<font color="#CCCCCC"> output has uses</font>

240
00:12:38,449 --> 00:12:44,569
three input shares in the<font color="#E5E5E5"> in in the</font><font color="#CCCCCC"> way</font>

241
00:12:42,319 --> 00:12:47,959
we see in the slide and<font color="#E5E5E5"> then second</font>

242
00:12:44,569 --> 00:12:50,479
layer uses in the same way<font color="#E5E5E5"> three input</font>

243
00:12:47,959 --> 00:12:54,109
search in this<font color="#E5E5E5"> case the outputs from the</font>

244
00:12:50,480 --> 00:12:56,629
first layer<font color="#CCCCCC"> and then with</font><font color="#E5E5E5"> this we get</font>

245
00:12:54,110 --> 00:12:59,149
<font color="#E5E5E5">that</font><font color="#CCCCCC"> at the very output of the second</font>

246
00:12:56,629 --> 00:13:01,579
<font color="#E5E5E5">layer every output sure is missing at</font>

247
00:12:59,149 --> 00:13:07,040
least<font color="#E5E5E5"> one input share from the inputs in</font>

248
00:13:01,579 --> 00:13:11,149
the way<font color="#E5E5E5"> we see in the slides</font><font color="#CCCCCC"> we evaluate</font>

249
00:13:07,040 --> 00:13:14,920
this this design as well with the same

250
00:13:11,149 --> 00:13:18,290
<font color="#CCCCCC">test</font><font color="#E5E5E5"> we used in the previous evaluations</font>

251
00:13:14,920 --> 00:13:20,829
we get that masks off with

252
00:13:18,290 --> 00:13:24,870
countermeasure streets of indeed leaks

253
00:13:20,830 --> 00:13:27,580
expected<font color="#E5E5E5"> and when we switch on the</font>

254
00:13:24,870 --> 00:13:30,760
<font color="#E5E5E5">countermeasure</font><font color="#CCCCCC"> we see that</font><font color="#E5E5E5"> first order</font>

255
00:13:27,580 --> 00:13:33,130
doesn't<font color="#E5E5E5"> leak these expected and</font>

256
00:13:30,760 --> 00:13:36,910
second-order and third-order<font color="#CCCCCC"> they told</font>

257
00:13:33,130 --> 00:13:39,400
<font color="#E5E5E5">like either and this is due</font><font color="#CCCCCC"> to the great</font>

258
00:13:36,910 --> 00:13:42,750
<font color="#CCCCCC">number of</font><font color="#E5E5E5"> shares we are using six years</font>

259
00:13:39,400 --> 00:13:47,010
generate a lot of<font color="#E5E5E5"> noise which cover the</font>

260
00:13:42,750 --> 00:13:50,560
delegates in<font color="#CCCCCC"> the second and third order</font>

261
00:13:47,010 --> 00:13:54,189
to<font color="#E5E5E5"> finish with my talk I conclude with</font>

262
00:13:50,560 --> 00:13:56,739
<font color="#CCCCCC">wrapping up with</font><font color="#E5E5E5"> the contributions we</font>

263
00:13:54,190 --> 00:13:59,520
<font color="#CCCCCC">discovered the flowing previous round</font>

264
00:13:56,740 --> 00:14:03,940
based<font color="#E5E5E5"> secure implementations of</font><font color="#CCCCCC"> K check</font>

265
00:13:59,520 --> 00:14:07,449
we fix it we propose a fix we analyze

266
00:14:03,940 --> 00:14:11,380
the causes<font color="#E5E5E5"> and evaluate them practically</font>

267
00:14:07,450 --> 00:14:16,110
<font color="#E5E5E5">and then later</font><font color="#CCCCCC"> second</font><font color="#E5E5E5"> fault we give a</font>

268
00:14:11,380 --> 00:14:20,080
methodology to secure unrolled

269
00:14:16,110 --> 00:14:24,640
implementations which is very<font color="#E5E5E5"> related</font><font color="#CCCCCC"> to</font>

270
00:14:20,080 --> 00:14:26,860
<font color="#E5E5E5">the previous</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> and then we propose the</font>

271
00:14:24,640 --> 00:14:32,080
fastest<font color="#CCCCCC"> K check known to date in the</font>

272
00:14:26,860 --> 00:14:35,650
literature which<font color="#CCCCCC"> is 70 K</font><font color="#E5E5E5"> gate equivalent</font>

273
00:14:32,080 --> 00:14:40,660
<font color="#E5E5E5">and it takes</font><font color="#CCCCCC"> 20</font><font color="#E5E5E5"> point 61 nanoseconds to</font>

274
00:14:35,650 --> 00:14:43,090
compute<font color="#CCCCCC"> that was all my part thank you</font>

275
00:14:40,660 --> 00:14:46,350
so much for listening<font color="#E5E5E5"> and I'll be happy</font>

276
00:14:43,090 --> 00:14:46,350
to<font color="#CCCCCC"> answer any question</font>

277
00:14:47,200 --> 00:14:50,459
[Music]

278
00:14:50,750 --> 00:15:06,690
Thank You<font color="#E5E5E5"> Victor any questions yeah</font>

279
00:14:56,880 --> 00:15:11,670
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the talk</font><font color="#CCCCCC"> on slide 21 yeah</font>

280
00:15:06,690 --> 00:15:15,570
yeah I just<font color="#E5E5E5"> wanted to to</font><font color="#CCCCCC"> be sure</font><font color="#E5E5E5"> so when</font>

281
00:15:11,670 --> 00:15:18,510
you look<font color="#CCCCCC"> up the the pigs of the graph on</font>

282
00:15:15,570 --> 00:15:21,720
<font color="#CCCCCC">the so the first</font><font color="#E5E5E5"> graph</font><font color="#CCCCCC"> you say that</font>

283
00:15:18,510 --> 00:15:23,670
there is no<font color="#CCCCCC"> leakage but from me</font><font color="#E5E5E5"> there is</font>

284
00:15:21,720 --> 00:15:25,589
a peak achieving the<font color="#E5E5E5"> special so why do</font>

285
00:15:23,670 --> 00:15:30,060
you<font color="#E5E5E5"> see do</font><font color="#CCCCCC"> you say that there is no</font>

286
00:15:25,589 --> 00:15:33,540
leakage<font color="#CCCCCC"> I see that it</font><font color="#E5E5E5"> is four point five</font>

287
00:15:30,060 --> 00:15:35,849
but<font color="#E5E5E5"> that it's a spike that went at that</font>

288
00:15:33,540 --> 00:15:39,480
point and<font color="#CCCCCC"> that goes down it went up</font><font color="#E5E5E5"> and</font>

289
00:15:35,850 --> 00:15:41,610
<font color="#E5E5E5">down so it's due to the statistical test</font>

290
00:15:39,480 --> 00:15:44,100
but we don't think<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a leakage since</font>

291
00:15:41,610 --> 00:15:45,690
it went<font color="#E5E5E5"> up and down during</font><font color="#CCCCCC"> the test</font><font color="#E5E5E5"> so</font>

292
00:15:44,100 --> 00:15:49,080
we<font color="#E5E5E5"> don't find we don't find it as a</font>

293
00:15:45,690 --> 00:15:51,990
<font color="#E5E5E5">foundation leakage okay so you</font><font color="#CCCCCC"> tested</font>

294
00:15:49,080 --> 00:15:54,240
you tested this point and you yes you

295
00:15:51,990 --> 00:15:57,770
verify<font color="#CCCCCC"> that it yes</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> to the catcher</font>

296
00:15:54,240 --> 00:16:02,130
yeah<font color="#E5E5E5"> and the second question I had is</font>

297
00:15:57,770 --> 00:16:03,480
<font color="#E5E5E5">you achieve some security with six</font>

298
00:16:02,130 --> 00:16:05,760
shares<font color="#CCCCCC"> mm-hm</font>

299
00:16:03,480 --> 00:16:07,920
do you have an idea of<font color="#E5E5E5"> the optimality of</font>

300
00:16:05,760 --> 00:16:13,770
optimal number of<font color="#E5E5E5"> shares needed to</font>

301
00:16:07,920 --> 00:16:16,770
achieve<font color="#E5E5E5"> your goal it is six good for my</font>

302
00:16:13,770 --> 00:16:18,900
for<font color="#CCCCCC"> my implementation six was the most</font>

303
00:16:16,770 --> 00:16:23,400
optimal<font color="#E5E5E5"> in the way we wanted to achieve</font>

304
00:16:18,900 --> 00:16:25,650
it<font color="#E5E5E5"> in the sense</font><font color="#CCCCCC"> you cannot achieve this</font>

305
00:16:23,400 --> 00:16:29,160
second-order<font color="#E5E5E5"> non completeness we look</font>

306
00:16:25,650 --> 00:16:32,150
for if you go under six<font color="#CCCCCC"> years because</font>

307
00:16:29,160 --> 00:16:35,339
<font color="#E5E5E5">the</font><font color="#CCCCCC"> combination</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to do</font><font color="#E5E5E5"> four</font>

308
00:16:32,150 --> 00:16:37,350
integers cannot satisfy<font color="#E5E5E5"> this non</font>

309
00:16:35,339 --> 00:16:40,680
completeness if you go lower than five

310
00:16:37,350 --> 00:16:42,930
shares it can<font color="#E5E5E5"> only say if you</font><font color="#CCCCCC"> have lower</font>

311
00:16:40,680 --> 00:16:46,620
<font color="#E5E5E5">to five input cells as we aim at</font><font color="#CCCCCC"> the</font>

312
00:16:42,930 --> 00:16:49,469
beginning you need to expand it<font color="#CCCCCC"> in order</font>

313
00:16:46,620 --> 00:16:52,020
<font color="#CCCCCC">to satisfy</font><font color="#E5E5E5"> all the combinations so that</font>

314
00:16:49,470 --> 00:16:54,180
<font color="#E5E5E5">ain't no combination fails non</font>

315
00:16:52,020 --> 00:16:56,370
completeness<font color="#CCCCCC"> okay this is true for your</font>

316
00:16:54,180 --> 00:16:59,189
<font color="#E5E5E5">construction or do you think</font><font color="#CCCCCC"> it's true</font>

317
00:16:56,370 --> 00:17:02,120
<font color="#CCCCCC">for</font><font color="#E5E5E5"> any anyway</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> to implement</font>

318
00:16:59,190 --> 00:17:05,990
I think it's true<font color="#CCCCCC"> for</font><font color="#E5E5E5"> any implementation</font>

319
00:17:02,120 --> 00:17:09,740
was to achieve<font color="#CCCCCC"> these</font><font color="#E5E5E5"> this objective</font>

320
00:17:05,990 --> 00:17:14,809
using<font color="#CCCCCC"> di okay thank you any other</font>

321
00:17:09,740 --> 00:17:16,180
<font color="#E5E5E5">question we have time for one more</font>

322
00:17:14,809 --> 00:17:19,069
question

323
00:17:16,180 --> 00:17:26,900
you know<font color="#CCCCCC"> then can</font><font color="#E5E5E5"> you get to a slight</font>

324
00:17:19,069 --> 00:17:29,809
number not a<font color="#E5E5E5"> slider number 19 yeah</font><font color="#CCCCCC"> um or</font>

325
00:17:26,900 --> 00:17:32,180
<font color="#E5E5E5">even the next one doesn't matter</font><font color="#CCCCCC"> but can</font>

326
00:17:29,809 --> 00:17:33,950
you just say<font color="#E5E5E5"> something about the amount</font>

327
00:17:32,180 --> 00:17:36,170
of fresh randomness that<font color="#E5E5E5"> you need to add</font>

328
00:17:33,950 --> 00:17:39,350
here<font color="#CCCCCC"> between these two stages</font><font color="#E5E5E5"> do you</font>

329
00:17:36,170 --> 00:17:43,460
need any<font color="#CCCCCC"> no we don't add extra</font>

330
00:17:39,350 --> 00:17:46,370
randomness<font color="#E5E5E5"> we rely on so we you saw the</font>

331
00:17:43,460 --> 00:17:50,059
dependencies that<font color="#E5E5E5"> theta creates so we</font>

332
00:17:46,370 --> 00:17:53,330
rely on<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> in dependency of bits of</font>

333
00:17:50,059 --> 00:17:56,990
other s<font color="#CCCCCC"> boxes of the same state to</font><font color="#E5E5E5"> act</font>

334
00:17:53,330 --> 00:17:58,939
<font color="#E5E5E5">as that fresh randomness so</font><font color="#CCCCCC"> that you</font>

335
00:17:56,990 --> 00:18:03,290
only need this layer of registers in

336
00:17:58,940 --> 00:18:05,080
order to synchronize that<font color="#E5E5E5"> sum of beats</font>

337
00:18:03,290 --> 00:18:08,330
<font color="#E5E5E5">okay thank you</font>

338
00:18:05,080 --> 00:18:12,030
<font color="#E5E5E5">okay if there is a no more question then</font>

339
00:18:08,330 --> 00:18:20,699
<font color="#E5E5E5">let's tank</font><font color="#CCCCCC"> Victor again</font><font color="#E5E5E5"> thank you</font>

340
00:18:12,030 --> 00:18:20,700
[Applause]

