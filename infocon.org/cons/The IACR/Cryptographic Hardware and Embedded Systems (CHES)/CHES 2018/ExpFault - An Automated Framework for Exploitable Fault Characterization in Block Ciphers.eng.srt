1
00:00:00,030 --> 00:00:05,089
so our next<font color="#E5E5E5"> presentation</font><font color="#CCCCCC"> is m:x fault</font>

2
00:00:03,179 --> 00:00:07,289
<font color="#CCCCCC">and also automated</font><font color="#E5E5E5"> framework for</font>

3
00:00:05,089 --> 00:00:10,320
exploitable fault characterization in

4
00:00:07,290 --> 00:00:13,049
block ciphers by<font color="#E5E5E5"> tsiyon deep</font><font color="#CCCCCC"> Saha depth</font>

5
00:00:10,320 --> 00:00:25,800
even a cop ID a<font color="#CCCCCC"> palpable</font><font color="#E5E5E5"> and perhaps a</font>

6
00:00:13,049 --> 00:00:26,880
scooped and presented<font color="#CCCCCC"> biased cyan people</font>

7
00:00:25,800 --> 00:00:29,130
<font color="#E5E5E5">standing</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the back they were plenty of</font>

8
00:00:26,880 --> 00:00:45,180
<font color="#E5E5E5">seats at the frontier if you want to sit</font>

9
00:00:29,130 --> 00:00:49,590
<font color="#E5E5E5">down hello thank you</font><font color="#CCCCCC"> note</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> straight</font>

10
00:00:45,180 --> 00:00:50,879
for your interaction so I'm shiny sharp

11
00:00:49,590 --> 00:00:53,699
from IIT Kharagpur

12
00:00:50,879 --> 00:00:56,339
<font color="#E5E5E5">and today I'm going to</font><font color="#CCCCCC"> present our work</font>

13
00:00:53,699 --> 00:00:58,199
called<font color="#E5E5E5"> X fault which is an automated</font>

14
00:00:56,340 --> 00:01:00,870
framework for exploitable fault

15
00:00:58,199 --> 00:01:03,570
characterization block ciphers by

16
00:01:00,870 --> 00:01:06,030
exploitable fault<font color="#CCCCCC"> I want to mean</font><font color="#E5E5E5"> those</font>

17
00:01:03,570 --> 00:01:08,070
faults which can be used<font color="#E5E5E5"> by an attacker</font>

18
00:01:06,030 --> 00:01:11,760
to<font color="#E5E5E5"> launch a successful fault attack at</font>

19
00:01:08,070 --> 00:01:14,070
the algorithmic level so fault attacks

20
00:01:11,760 --> 00:01:17,250
<font color="#CCCCCC">and new</font><font color="#E5E5E5"> reality and we have to prevent</font>

21
00:01:14,070 --> 00:01:18,899
them there exist several countermeasures

22
00:01:17,250 --> 00:01:21,659
some of them are<font color="#E5E5E5"> extremely resource</font>

23
00:01:18,900 --> 00:01:23,820
hungry some of them are not<font color="#E5E5E5"> but many a</font>

24
00:01:21,659 --> 00:01:26,729
time they do not<font color="#E5E5E5"> provide 100% fault</font>

25
00:01:23,820 --> 00:01:28,979
coverage<font color="#E5E5E5"> now in practice faults are</font>

26
00:01:26,729 --> 00:01:30,539
extremely<font color="#E5E5E5"> repeatable so if you can</font>

27
00:01:28,979 --> 00:01:32,640
figure out one fault<font color="#E5E5E5"> which can bypass</font>

28
00:01:30,540 --> 00:01:35,610
your countermeasure<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it's exploitable</font>

29
00:01:32,640 --> 00:01:36,150
<font color="#E5E5E5">then your countermeasure is not of any</font>

30
00:01:35,610 --> 00:01:39,630
<font color="#E5E5E5">use</font>

31
00:01:36,150 --> 00:01:41,729
now while designing<font color="#E5E5E5"> precise proper</font>

32
00:01:39,630 --> 00:01:43,829
countermeasure<font color="#CCCCCC"> especially for resource</font>

33
00:01:41,729 --> 00:01:45,479
constrained environment<font color="#CCCCCC"> you really need</font>

34
00:01:43,829 --> 00:01:48,389
to<font color="#E5E5E5"> know which faults we do we need</font><font color="#CCCCCC"> to</font>

35
00:01:45,479 --> 00:01:49,890
<font color="#CCCCCC">really prevent against but the problem</font>

36
00:01:48,390 --> 00:01:52,140
is<font color="#E5E5E5"> that who is</font><font color="#CCCCCC"> going to tell you you</font>

37
00:01:49,890 --> 00:01:54,000
don't<font color="#CCCCCC"> have any rhetorical right</font><font color="#E5E5E5"> but this</font>

38
00:01:52,140 --> 00:01:57,149
<font color="#E5E5E5">information</font><font color="#CCCCCC"> is extremely</font><font color="#E5E5E5"> useful</font><font color="#CCCCCC"> because</font>

39
00:01:54,000 --> 00:01:59,399
if you have the exploitable faults<font color="#E5E5E5"> you</font>

40
00:01:57,149 --> 00:02:01,680
can design precise countermeasure<font color="#E5E5E5"> you</font>

41
00:01:59,399 --> 00:02:05,130
can taste those countermeasures<font color="#E5E5E5"> properly</font>

42
00:02:01,680 --> 00:02:07,649
and also you can select better ciphers

43
00:02:05,130 --> 00:02:09,090
<font color="#CCCCCC">you can design better</font><font color="#E5E5E5"> ciphers with more</font>

44
00:02:07,649 --> 00:02:12,120
robustness provided against<font color="#CCCCCC"> water</font>

45
00:02:09,090 --> 00:02:13,879
attacks<font color="#CCCCCC"> probably but there are several</font>

46
00:02:12,120 --> 00:02:16,650
challenges<font color="#E5E5E5"> involved</font>

47
00:02:13,879 --> 00:02:19,980
first of<font color="#E5E5E5"> all not every possible fault is</font>

48
00:02:16,650 --> 00:02:22,500
<font color="#CCCCCC">malicious</font><font color="#E5E5E5"> are exploitable</font><font color="#CCCCCC"> The Fault</font>

49
00:02:19,980 --> 00:02:25,379
space of ciphers are<font color="#CCCCCC"> huge</font><font color="#E5E5E5"> of prohibitive</font>

50
00:02:22,500 --> 00:02:27,569
size most of<font color="#E5E5E5"> the time and analysis is</font>

51
00:02:25,379 --> 00:02:29,760
quite complex for<font color="#CCCCCC"> example it took kind</font>

52
00:02:27,569 --> 00:02:32,250
of<font color="#E5E5E5"> eight years to figure</font><font color="#CCCCCC"> out the optimal</font>

53
00:02:29,760 --> 00:02:34,859
attack on AES due to<font color="#E5E5E5"> progress at transit</font>

54
00:02:32,250 --> 00:02:37,019
<font color="#E5E5E5">or</font><font color="#CCCCCC"> only and even after</font><font color="#E5E5E5"> that people</font>

55
00:02:34,860 --> 00:02:39,230
figured out like new attacks at<font color="#E5E5E5"> seventh</font>

56
00:02:37,019 --> 00:02:42,180
round and all<font color="#E5E5E5"> its game never ends</font>

57
00:02:39,230 --> 00:02:43,920
now we have too many ciphers<font color="#CCCCCC"> like</font>

58
00:02:42,180 --> 00:02:46,200
hundreds of<font color="#E5E5E5"> them probably</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> know</font>

59
00:02:43,920 --> 00:02:48,119
and more are going<font color="#E5E5E5"> to come</font><font color="#CCCCCC"> within couple</font>

60
00:02:46,200 --> 00:02:50,940
of years with this nice call<font color="#E5E5E5"> for</font>

61
00:02:48,120 --> 00:02:54,209
lightweight cryptography so the call of

62
00:02:50,940 --> 00:02:56,670
<font color="#CCCCCC">time is an automation which we</font><font color="#E5E5E5"> require</font>

63
00:02:54,209 --> 00:02:58,950
what are the properties<font color="#CCCCCC"> should we expect</font>

64
00:02:56,670 --> 00:03:01,530
<font color="#CCCCCC">first of all it</font><font color="#E5E5E5"> should be genetic to be</font>

65
00:02:58,950 --> 00:03:03,629
scaled for all possible block ciphers we

66
00:03:01,530 --> 00:03:06,150
have in hand<font color="#E5E5E5"> it has to be fast enough</font>

67
00:03:03,629 --> 00:03:09,420
<font color="#E5E5E5">and</font><font color="#CCCCCC"> it stuff has to be</font><font color="#E5E5E5"> scalable for</font>

68
00:03:06,150 --> 00:03:12,000
large ciphers like<font color="#E5E5E5"> yes in this context</font>

69
00:03:09,420 --> 00:03:14,309
there<font color="#CCCCCC"> are a couple of works working at</font>

70
00:03:12,000 --> 00:03:17,720
algorithmic level like the most

71
00:03:14,310 --> 00:03:20,430
<font color="#E5E5E5">remarkable one</font><font color="#CCCCCC"> Instituto zhang is</font>

72
00:03:17,720 --> 00:03:22,560
<font color="#CCCCCC">algebraic fault attack it provides a</font>

73
00:03:20,430 --> 00:03:24,630
nice generic present representation of

74
00:03:22,560 --> 00:03:26,609
ciphers using polynomials as well as the

75
00:03:24,630 --> 00:03:28,680
faults<font color="#E5E5E5"> and</font><font color="#CCCCCC"> user sad solvers to</font><font color="#E5E5E5"> solve</font>

76
00:03:26,609 --> 00:03:31,500
them<font color="#E5E5E5"> the problem with this approach is</font>

77
00:03:28,680 --> 00:03:33,630
that it's not so fast<font color="#CCCCCC"> and it lacks</font>

78
00:03:31,500 --> 00:03:35,519
<font color="#E5E5E5">interpretability do you tell you whether</font>

79
00:03:33,630 --> 00:03:37,590
it's it's a<font color="#E5E5E5"> fault</font><font color="#CCCCCC"> is exploitable or not</font>

80
00:03:35,519 --> 00:03:39,419
but I'll tell you why it is exploitable

81
00:03:37,590 --> 00:03:42,180
so that information<font color="#CCCCCC"> is to be</font><font color="#E5E5E5"> covered</font>

82
00:03:39,419 --> 00:03:45,329
right<font color="#E5E5E5"> another nice</font><font color="#CCCCCC"> forgives due to Gili</font>

83
00:03:42,180 --> 00:03:47,519
as birthday<font color="#CCCCCC"> its</font><font color="#E5E5E5"> users program synthesis</font>

84
00:03:45,329 --> 00:03:52,280
technique<font color="#E5E5E5"> but this is mostly</font><font color="#CCCCCC"> applicable</font>

85
00:03:47,519 --> 00:03:55,829
for public key ciphers<font color="#E5E5E5"> so there are gaps</font>

86
00:03:52,280 --> 00:03:58,079
when we take a deep few inside<font color="#CCCCCC"> DF</font>

87
00:03:55,829 --> 00:04:00,180
<font color="#E5E5E5">attacks how they work we found that the</font>

88
00:03:58,079 --> 00:04:02,549
main<font color="#CCCCCC"> idea is</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> basically introduce a</font>

89
00:04:00,180 --> 00:04:04,739
fault<font color="#CCCCCC"> to reduce the key</font><font color="#E5E5E5"> search space to</font>

90
00:04:02,549 --> 00:04:07,799
some<font color="#E5E5E5"> extent where you can do an</font>

91
00:04:04,739 --> 00:04:09,900
<font color="#CCCCCC">exhaustive search practically so what is</font>

92
00:04:07,799 --> 00:04:11,430
<font color="#CCCCCC">suggest here</font><font color="#E5E5E5"> let's not perform the</font>

93
00:04:09,900 --> 00:04:13,889
exhaustive search it will take too much

94
00:04:11,430 --> 00:04:16,470
time<font color="#CCCCCC"> let's automatically compute the</font>

95
00:04:13,889 --> 00:04:19,139
such complexity<font color="#E5E5E5"> that's sufficient to</font>

96
00:04:16,470 --> 00:04:21,539
understand<font color="#E5E5E5"> now the challenge is</font><font color="#CCCCCC"> how to</font>

97
00:04:19,139 --> 00:04:24,599
do it<font color="#E5E5E5"> in a generic manner for every</font>

98
00:04:21,539 --> 00:04:27,120
algorithm<font color="#E5E5E5"> fortunately it came up</font><font color="#CCCCCC"> with</font>

99
00:04:24,599 --> 00:04:31,569
one approach which<font color="#E5E5E5"> you call as</font><font color="#CCCCCC"> x4</font>

100
00:04:27,120 --> 00:04:33,940
so basically<font color="#CCCCCC"> x4 takes two kinds of input</font>

101
00:04:31,569 --> 00:04:35,740
one is an executable of the<font color="#E5E5E5"> cipher and</font>

102
00:04:33,940 --> 00:04:38,889
one is an abstract description of the

103
00:04:35,740 --> 00:04:41,409
cipher<font color="#E5E5E5"> here it also takes a description</font>

104
00:04:38,889 --> 00:04:44,440
of the fault<font color="#CCCCCC"> now when it has a fault</font><font color="#E5E5E5"> it</font>

105
00:04:41,409 --> 00:04:46,060
simulates the fault over<font color="#E5E5E5"> the executable</font>

106
00:04:44,440 --> 00:04:48,099
provided and<font color="#E5E5E5"> generates some fault</font>

107
00:04:46,060 --> 00:04:49,360
simulation data over the fault

108
00:04:48,099 --> 00:04:52,539
simulation data

109
00:04:49,360 --> 00:04:54,879
it basically<font color="#E5E5E5"> minds</font><font color="#CCCCCC"> that fault simulation</font>

110
00:04:52,539 --> 00:04:56,800
data and tries<font color="#CCCCCC"> to figure out</font><font color="#E5E5E5"> certain</font>

111
00:04:54,879 --> 00:04:58,419
properties<font color="#CCCCCC"> which gives us</font><font color="#E5E5E5"> some hint</font>

112
00:04:56,800 --> 00:05:01,419
whether the<font color="#E5E5E5"> fault of exploitable or not</font>

113
00:04:58,419 --> 00:05:04,359
<font color="#E5E5E5">after that it uses some grab this</font>

114
00:05:01,419 --> 00:05:06,849
abstraction<font color="#E5E5E5"> of the cipher and tries</font><font color="#CCCCCC"> to</font>

115
00:05:04,360 --> 00:05:10,389
tell if the fault is really exploitable

116
00:05:06,849 --> 00:05:12,729
and also returns<font color="#E5E5E5"> data complexity the</font>

117
00:05:10,389 --> 00:05:14,800
attack procedure<font color="#E5E5E5"> complete attack path</font>

118
00:05:12,729 --> 00:05:18,758
<font color="#E5E5E5">the required number of fault injection</font>

119
00:05:14,800 --> 00:05:20,680
<font color="#CCCCCC">so pretty</font><font color="#E5E5E5"> much everything an attacker</font><font color="#CCCCCC"> or</font>

120
00:05:18,759 --> 00:05:23,620
an evaluator needs<font color="#CCCCCC"> to know about</font><font color="#E5E5E5"> a fault</font>

121
00:05:20,680 --> 00:05:26,219
attack now there are a<font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of results</font>

122
00:05:23,620 --> 00:05:29,680
<font color="#E5E5E5">here just</font><font color="#CCCCCC"> honorable mentions</font><font color="#E5E5E5"> have kept</font>

123
00:05:26,219 --> 00:05:34,360
like the first one is<font color="#CCCCCC"> four</font><font color="#E5E5E5"> eighth round</font>

124
00:05:29,680 --> 00:05:35,800
attack on<font color="#E5E5E5"> AES sbox so it's this attack</font>

125
00:05:34,360 --> 00:05:37,389
is due to<font color="#CCCCCC"> professor Tunstall we</font>

126
00:05:35,800 --> 00:05:39,669
<font color="#E5E5E5">reproduce the attack with our tools</font>

127
00:05:37,389 --> 00:05:41,500
within minutes and it took remaining

128
00:05:39,669 --> 00:05:43,060
<font color="#E5E5E5">give complexities to power of eight and</font>

129
00:05:41,500 --> 00:05:44,860
number<font color="#E5E5E5"> of injection required is</font><font color="#CCCCCC"> one</font>

130
00:05:43,060 --> 00:05:46,569
there<font color="#E5E5E5"> is a seventh</font><font color="#CCCCCC"> round impossible</font>

131
00:05:44,860 --> 00:05:48,669
differential attack<font color="#E5E5E5"> also found out by a</font>

132
00:05:46,569 --> 00:05:50,770
tool and<font color="#E5E5E5"> you figure out couple of</font>

133
00:05:48,669 --> 00:05:53,799
attacks on present<font color="#E5E5E5"> the most remarkable</font>

134
00:05:50,770 --> 00:05:55,389
one<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> list instance gift attack</font>

135
00:05:53,800 --> 00:05:58,479
<font color="#E5E5E5">gift has</font><font color="#CCCCCC"> been proposed last year</font><font color="#E5E5E5"> at</font>

136
00:05:55,389 --> 00:06:00,400
chess<font color="#CCCCCC"> and this year we found optimal</font>

137
00:05:58,479 --> 00:06:08,620
attacks on gift using our tool<font color="#CCCCCC"> within</font>

138
00:06:00,400 --> 00:06:10,568
minutes so let's see how we do it so for

139
00:06:08,620 --> 00:06:13,479
that we<font color="#E5E5E5"> have a formalization first we</font>

140
00:06:10,569 --> 00:06:15,310
formalize the<font color="#E5E5E5"> cipher itself so the idea</font>

141
00:06:13,479 --> 00:06:17,020
<font color="#E5E5E5">is to formalize the execution of</font><font color="#CCCCCC"> a</font>

142
00:06:15,310 --> 00:06:18,699
cipher so we<font color="#E5E5E5"> considered here to</font>

143
00:06:17,020 --> 00:06:20,919
execution one is the correct<font color="#E5E5E5"> execution</font>

144
00:06:18,699 --> 00:06:23,020
another one is the faulty execution<font color="#E5E5E5"> and</font>

145
00:06:20,919 --> 00:06:25,120
<font color="#E5E5E5">we</font><font color="#CCCCCC"> represent this as a sequence of</font>

146
00:06:23,020 --> 00:06:27,159
<font color="#CCCCCC">States now when you take</font><font color="#E5E5E5"> the</font>

147
00:06:25,120 --> 00:06:29,319
differential we symbolically represent

148
00:06:27,159 --> 00:06:32,199
<font color="#E5E5E5">each differential as state differential</font>

149
00:06:29,319 --> 00:06:34,930
<font color="#E5E5E5">Delta IJ we are going to analyze this</font>

150
00:06:32,199 --> 00:06:36,909
differential itself let us take a look

151
00:06:34,930 --> 00:06:38,710
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> parameterised fault model that we</font>

152
00:06:36,909 --> 00:06:40,480
<font color="#E5E5E5">are providing this is the state</font><font color="#CCCCCC"> where</font>

153
00:06:38,710 --> 00:06:42,549
I'm injecting the fault<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the</font>

154
00:06:40,480 --> 00:06:44,410
width of the state is a<font color="#CCCCCC"> very important</font>

155
00:06:42,550 --> 00:06:47,200
parameter<font color="#CCCCCC"> which determines</font><font color="#E5E5E5"> the fault</font>

156
00:06:44,410 --> 00:06:49,180
model and this<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> location of the</font>

157
00:06:47,200 --> 00:06:53,229
<font color="#E5E5E5">fault in the</font><font color="#CCCCCC"> state say which might have</font>

158
00:06:49,180 --> 00:06:55,690
got corrupted<font color="#CCCCCC"> that's it</font><font color="#E5E5E5"> now let's get</font><font color="#CCCCCC"> in</font>

159
00:06:53,230 --> 00:06:58,450
the main concept of our tool which you

160
00:06:55,690 --> 00:07:01,600
<font color="#E5E5E5">call as</font><font color="#CCCCCC"> distinguisher so what is the</font>

161
00:06:58,450 --> 00:07:03,909
distinguisher basically it works like<font color="#CCCCCC"> a</font>

162
00:07:01,600 --> 00:07:06,670
filter<font color="#CCCCCC"> which filters out most of the</font>

163
00:07:03,910 --> 00:07:08,680
part of<font color="#E5E5E5"> your key space and returns you a</font>

164
00:07:06,670 --> 00:07:10,300
smaller key space over you can do<font color="#E5E5E5"> over</font>

165
00:07:08,680 --> 00:07:12,790
which you can do an<font color="#E5E5E5"> exhaustive search</font>

166
00:07:10,300 --> 00:07:16,000
and correct key is guaranteed to<font color="#CCCCCC"> be</font>

167
00:07:12,790 --> 00:07:18,220
<font color="#E5E5E5">there</font><font color="#CCCCCC"> present there</font><font color="#E5E5E5"> now the</font>

168
00:07:16,000 --> 00:07:20,140
<font color="#E5E5E5">distinguishes are manifested</font><font color="#CCCCCC"> in the form</font>

169
00:07:18,220 --> 00:07:21,970
<font color="#E5E5E5">of constraints over the state</font>

170
00:07:20,140 --> 00:07:25,469
differential<font color="#CCCCCC"> loss we consider state</font>

171
00:07:21,970 --> 00:07:27,940
differential as random vectors here now

172
00:07:25,470 --> 00:07:30,490
variables inside the state differential

173
00:07:27,940 --> 00:07:33,310
becomes constrained<font color="#E5E5E5"> when it becomes a</font>

174
00:07:30,490 --> 00:07:34,000
<font color="#E5E5E5">distinguisher how it gets constrained</font>

175
00:07:33,310 --> 00:07:36,970
will come later

176
00:07:34,000 --> 00:07:38,740
now that results in a<font color="#CCCCCC"> non-uniform nature</font>

177
00:07:36,970 --> 00:07:41,140
of state differential distribution and

178
00:07:38,740 --> 00:07:42,850
this<font color="#CCCCCC"> non-uniform</font><font color="#E5E5E5"> nature or the bias in</font>

179
00:07:41,140 --> 00:07:46,360
the distribution<font color="#CCCCCC"> actually gives you</font><font color="#E5E5E5"> the</font>

180
00:07:42,850 --> 00:07:48,910
key filter<font color="#CCCCCC"> let's take an example</font><font color="#E5E5E5"> it's</font>

181
00:07:46,360 --> 00:07:52,090
AIT's round attack on<font color="#CCCCCC"> AES we put a fault</font>

182
00:07:48,910 --> 00:07:54,550
<font color="#E5E5E5">here it propagates like this and at this</font>

183
00:07:52,090 --> 00:07:57,520
level<font color="#E5E5E5"> you see there are nice patterns</font>

184
00:07:54,550 --> 00:07:59,710
<font color="#E5E5E5">you can observe like this column is</font>

185
00:07:57,520 --> 00:08:02,049
correlated linearly correlated<font color="#E5E5E5"> and that</font>

186
00:07:59,710 --> 00:08:03,789
gives you this nice<font color="#E5E5E5"> set of equations</font><font color="#CCCCCC"> so</font>

187
00:08:02,050 --> 00:08:07,780
this is one of<font color="#CCCCCC"> the distinguisher</font><font color="#E5E5E5"> in our</font>

188
00:08:03,790 --> 00:08:10,030
picture<font color="#CCCCCC"> now let's formalize DFA</font><font color="#E5E5E5"> how we</font>

189
00:08:07,780 --> 00:08:11,260
really formalize a DFA<font color="#E5E5E5"> not only the</font>

190
00:08:10,030 --> 00:08:13,989
<font color="#CCCCCC">Distinguished art there are a couple of</font>

191
00:08:11,260 --> 00:08:16,360
other things<font color="#CCCCCC"> as well the first one is</font><font color="#E5E5E5"> an</font>

192
00:08:13,990 --> 00:08:18,160
algorithm to evaluate distinguisher over

193
00:08:16,360 --> 00:08:20,560
the key guesses now if you have a

194
00:08:18,160 --> 00:08:22,450
<font color="#E5E5E5">distinguisher a filter you have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> test</font>

195
00:08:20,560 --> 00:08:24,400
all<font color="#CCCCCC"> possible keys over that filter right</font>

196
00:08:22,450 --> 00:08:26,740
now if you have a key space of<font color="#CCCCCC"> 2 power</font>

197
00:08:24,400 --> 00:08:28,200
of<font color="#E5E5E5"> 128 is quite not possible so you have</font>

198
00:08:26,740 --> 00:08:31,150
to<font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out a nice and clever</font>

199
00:08:28,200 --> 00:08:33,010
<font color="#CCCCCC">divide-and-conquer policy to do so the</font>

200
00:08:31,150 --> 00:08:34,449
second<font color="#E5E5E5"> component is</font><font color="#CCCCCC"> the remaining</font><font color="#E5E5E5"> key</font>

201
00:08:33,010 --> 00:08:35,919
space complexity the filtering

202
00:08:34,450 --> 00:08:37,540
<font color="#E5E5E5">capability of the distinguisher</font>

203
00:08:35,919 --> 00:08:42,669
what is the size<font color="#E5E5E5"> of the key space you</font>

204
00:08:37,539 --> 00:08:44,380
have to<font color="#CCCCCC"> search exhaustively</font><font color="#E5E5E5"> later so in</font>

205
00:08:42,669 --> 00:08:46,150
<font color="#E5E5E5">our tool we just automate these three</font>

206
00:08:44,380 --> 00:08:47,890
<font color="#E5E5E5">steps one by one the first step is</font>

207
00:08:46,150 --> 00:08:49,630
finding our distinguisher for<font color="#E5E5E5"> fault</font>

208
00:08:47,890 --> 00:08:53,830
simulation<font color="#E5E5E5"> data as</font><font color="#CCCCCC"> i mentioned already</font>

209
00:08:49,630 --> 00:08:56,110
<font color="#CCCCCC">we use a metric</font><font color="#E5E5E5"> for that the metric is</font>

210
00:08:53,830 --> 00:08:58,030
well known<font color="#CCCCCC"> Shannon</font><font color="#E5E5E5"> entropy the criteria</font>

211
00:08:56,110 --> 00:09:01,030
here is that if a state differential

212
00:08:58,030 --> 00:09:04,030
<font color="#E5E5E5">either distinguisher if and only if the</font>

213
00:09:01,030 --> 00:09:05,800
entropy of<font color="#CCCCCC"> e is lesser than its maximum</font>

214
00:09:04,030 --> 00:09:08,560
<font color="#CCCCCC">possible entropy that actually indicates</font>

215
00:09:05,800 --> 00:09:11,229
a statistical bias<font color="#E5E5E5"> now to identify the</font>

216
00:09:08,560 --> 00:09:13,479
constraints on the distinguisher there

217
00:09:11,230 --> 00:09:15,970
are two possible<font color="#E5E5E5"> cases</font><font color="#CCCCCC"> first of all the</font>

218
00:09:13,480 --> 00:09:18,460
random<font color="#E5E5E5"> vector we are considering whether</font>

219
00:09:15,970 --> 00:09:20,320
each variable<font color="#E5E5E5"> in that and statistically</font>

220
00:09:18,460 --> 00:09:22,360
independent<font color="#CCCCCC"> or</font><font color="#E5E5E5"> whether they are</font>

221
00:09:20,320 --> 00:09:24,490
<font color="#CCCCCC">statistically independent if they are</font>

222
00:09:22,360 --> 00:09:26,620
independent<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> easily</font><font color="#CCCCCC"> mind them out</font>

223
00:09:24,490 --> 00:09:29,200
from<font color="#E5E5E5"> the fault simulation data but if</font>

224
00:09:26,620 --> 00:09:30,960
they are dependent<font color="#CCCCCC"> we have to apply some</font>

225
00:09:29,200 --> 00:09:33,310
<font color="#E5E5E5">other technique here we apply</font>

226
00:09:30,960 --> 00:09:35,410
classically well known a priori

227
00:09:33,310 --> 00:09:38,410
algorithm for that<font color="#E5E5E5"> purpose with</font><font color="#CCCCCC"> - out</font>

228
00:09:35,410 --> 00:09:40,480
relationships among the variable if you

229
00:09:38,410 --> 00:09:41,980
give some data<font color="#CCCCCC"> to it</font><font color="#E5E5E5"> now using this</font>

230
00:09:40,480 --> 00:09:44,580
<font color="#CCCCCC">two-step</font><font color="#E5E5E5"> we can figure out the</font>

231
00:09:41,980 --> 00:09:46,990
distinguishes<font color="#E5E5E5"> their quality as well as</font>

232
00:09:44,580 --> 00:09:50,110
constraints<font color="#E5E5E5"> they actually impose on the</font>

233
00:09:46,990 --> 00:09:51,610
<font color="#E5E5E5">earth space let's take an example</font><font color="#CCCCCC"> so</font>

234
00:09:50,110 --> 00:09:53,620
this is an example of impossible

235
00:09:51,610 --> 00:09:56,140
<font color="#E5E5E5">differential distinguisher you see the</font>

236
00:09:53,620 --> 00:09:59,080
variables are quite independent<font color="#CCCCCC"> here but</font>

237
00:09:56,140 --> 00:10:01,870
none of them can take the value<font color="#E5E5E5"> 0</font><font color="#CCCCCC"> so</font>

238
00:09:59,080 --> 00:10:03,700
basically the range it<font color="#E5E5E5"> should take value</font>

239
00:10:01,870 --> 00:10:06,490
is<font color="#CCCCCC"> shrinked and</font><font color="#E5E5E5"> that causes the entropy</font>

240
00:10:03,700 --> 00:10:09,550
<font color="#E5E5E5">reduction here it should be 128 but it</font>

241
00:10:06,490 --> 00:10:12,430
becomes<font color="#CCCCCC"> 120 7.90</font><font color="#E5E5E5"> that makes it a</font>

242
00:10:09,550 --> 00:10:14,439
distribution<font color="#E5E5E5"> the next example we</font><font color="#CCCCCC"> have</font>

243
00:10:12,430 --> 00:10:16,359
<font color="#CCCCCC">already talked on this see this nice</font>

244
00:10:14,440 --> 00:10:17,680
patterns here the variables are

245
00:10:16,360 --> 00:10:19,570
dependent among each<font color="#E5E5E5"> other there are</font>

246
00:10:17,680 --> 00:10:21,819
dependencies<font color="#CCCCCC"> these columns</font><font color="#E5E5E5"> are dependent</font>

247
00:10:19,570 --> 00:10:24,130
<font color="#E5E5E5">and then that makes this</font><font color="#CCCCCC"> stage has a</font>

248
00:10:21,820 --> 00:10:27,070
<font color="#E5E5E5">distinguisher and our tool can figure</font>

249
00:10:24,130 --> 00:10:29,350
this out quantitatively now once you

250
00:10:27,070 --> 00:10:31,300
<font color="#CCCCCC">have the set of distinguishers we have</font>

251
00:10:29,350 --> 00:10:33,430
to figure out that divide and<font color="#E5E5E5"> conquer</font>

252
00:10:31,300 --> 00:10:36,849
<font color="#CCCCCC">strategy</font><font color="#E5E5E5"> automatically how can I do</font><font color="#CCCCCC"> that</font>

253
00:10:33,430 --> 00:10:39,099
we use<font color="#E5E5E5"> a cipher dependency graph that's</font>

254
00:10:36,850 --> 00:10:40,990
a graph based abstraction<font color="#E5E5E5"> of the cipher</font>

255
00:10:39,100 --> 00:10:43,090
it looks like this this graph is

256
00:10:40,990 --> 00:10:45,400
<font color="#E5E5E5">specifically new to present this</font>

257
00:10:43,090 --> 00:10:48,700
jangling nodes here represents<font color="#CCCCCC"> the key</font>

258
00:10:45,400 --> 00:10:51,340
nodes<font color="#E5E5E5"> and this blocks complete graphs we</font>

259
00:10:48,700 --> 00:10:56,380
present there is boxes there's a form

260
00:10:51,340 --> 00:10:59,670
layer now you see there are 32 key nodes

261
00:10:56,380 --> 00:11:01,630
in these<font color="#CCCCCC"> two layers but if you consider</font>

262
00:10:59,670 --> 00:11:04,569
evaluating this node of the

263
00:11:01,630 --> 00:11:07,470
distinguisher by guessing<font color="#E5E5E5"> keys but</font><font color="#CCCCCC"> you</font>

264
00:11:04,570 --> 00:11:09,480
<font color="#E5E5E5">see here 16 here for this red key</font>

265
00:11:07,470 --> 00:11:13,410
you have to guess the<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> red key</font>

266
00:11:09,480 --> 00:11:15,990
nodes are only<font color="#E5E5E5"> 20 so effectively instead</font>

267
00:11:13,410 --> 00:11:18,540
of key guessing of<font color="#CCCCCC"> 2 power of</font><font color="#E5E5E5"> 32 you are</font>

268
00:11:15,990 --> 00:11:21,390
<font color="#E5E5E5">guessing only 2 power</font><font color="#CCCCCC"> of 20 that</font><font color="#E5E5E5"> gives</font>

269
00:11:18,540 --> 00:11:24,060
<font color="#CCCCCC">you a divide-and-conquer effectively</font><font color="#E5E5E5"> now</font>

270
00:11:21,390 --> 00:11:26,520
<font color="#CCCCCC">after a couple of more steps you can</font>

271
00:11:24,060 --> 00:11:28,949
<font color="#E5E5E5">identify individual independent</font>

272
00:11:26,520 --> 00:11:30,180
<font color="#E5E5E5">computation chunks in</font><font color="#CCCCCC"> your cipher which</font>

273
00:11:28,950 --> 00:11:33,060
if you do

274
00:11:30,180 --> 00:11:35,160
I mean<font color="#CCCCCC"> parallely</font><font color="#E5E5E5"> you can reduce the</font>

275
00:11:33,060 --> 00:11:36,989
complexity a lot<font color="#CCCCCC"> and that effectively</font>

276
00:11:35,160 --> 00:11:38,310
gives you the<font color="#CCCCCC"> divide-and-conquer and now</font>

277
00:11:36,990 --> 00:11:41,040
once you have<font color="#E5E5E5"> the divide-and-conquer</font>

278
00:11:38,310 --> 00:11:43,020
policy<font color="#E5E5E5"> you can quite easily figure out</font>

279
00:11:41,040 --> 00:11:46,349
<font color="#E5E5E5">what is the evaluation complexity of the</font>

280
00:11:43,020 --> 00:11:48,380
distinguish<font color="#E5E5E5"> are going through me once</font>

281
00:11:46,350 --> 00:11:51,000
you have the distinguisher and

282
00:11:48,380 --> 00:11:53,340
independent pairs you<font color="#CCCCCC"> can individually</font>

283
00:11:51,000 --> 00:11:55,800
<font color="#E5E5E5">figure out the remaining key complexity</font>

284
00:11:53,340 --> 00:11:58,470
for each individual pairs and you can

285
00:11:55,800 --> 00:12:00,660
combine<font color="#E5E5E5"> them giving you the filtering</font>

286
00:11:58,470 --> 00:12:04,290
capability of the whole distinguisher

287
00:12:00,660 --> 00:12:06,540
<font color="#E5E5E5">and that kind of completes the</font><font color="#CCCCCC"> X fault</font>

288
00:12:04,290 --> 00:12:08,339
<font color="#CCCCCC">you can compute the attack complexity in</font>

289
00:12:06,540 --> 00:12:10,829
the form of<font color="#E5E5E5"> remaining key complexity and</font>

290
00:12:08,340 --> 00:12:13,470
evaluation complexity<font color="#E5E5E5"> that a procedure</font>

291
00:12:10,830 --> 00:12:16,410
is given the required number of fault

292
00:12:13,470 --> 00:12:18,330
injection can also be returned and after

293
00:12:16,410 --> 00:12:21,600
all it<font color="#E5E5E5"> takes it says your fault is</font>

294
00:12:18,330 --> 00:12:23,370
exploitable<font color="#CCCCCC"> or not</font><font color="#E5E5E5"> now</font>

295
00:12:21,600 --> 00:12:25,620
this is one of the inputs of our tool

296
00:12:23,370 --> 00:12:28,020
how<font color="#CCCCCC"> it input</font><font color="#E5E5E5"> the CDG craft how you</font>

297
00:12:25,620 --> 00:12:29,910
construct<font color="#E5E5E5"> it so</font><font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> this is one</font>

298
00:12:28,020 --> 00:12:33,840
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> s boxes and this is represented</font>

299
00:12:29,910 --> 00:12:36,329
<font color="#CCCCCC">like just node by node</font><font color="#E5E5E5"> so basically a</font>

300
00:12:33,840 --> 00:12:38,550
textual representation of<font color="#E5E5E5"> this graph is</font>

301
00:12:36,330 --> 00:12:42,210
presented and internally it converts<font color="#CCCCCC"> you</font>

302
00:12:38,550 --> 00:12:46,530
<font color="#CCCCCC">to a craft</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> one now let's see</font><font color="#E5E5E5"> an</font>

303
00:12:42,210 --> 00:12:48,480
outlet so this is Q<font color="#E5E5E5"> this our example is</font>

304
00:12:46,530 --> 00:12:50,040
due to the gift block cipher<font color="#E5E5E5"> this is one</font>

305
00:12:48,480 --> 00:12:52,680
of<font color="#CCCCCC"> the distinguishes that</font><font color="#E5E5E5"> we use for</font>

306
00:12:50,040 --> 00:12:57,150
gives<font color="#CCCCCC"> The Associated key bits are 32 in</font>

307
00:12:52,680 --> 00:12:59,459
number now<font color="#E5E5E5"> what I found instead of a key</font>

308
00:12:57,150 --> 00:13:02,430
search of<font color="#CCCCCC"> 2 power of</font><font color="#E5E5E5"> 32 here you require</font>

309
00:12:59,460 --> 00:13:04,680
a key search of<font color="#E5E5E5"> 2 power of 11.5 3 that's</font>

310
00:13:02,430 --> 00:13:07,229
a<font color="#CCCCCC"> redaction</font><font color="#E5E5E5"> and the evaluation</font>

311
00:13:04,680 --> 00:13:10,790
complexity is 2 power of<font color="#E5E5E5"> 8 that</font><font color="#CCCCCC"> is you</font>

312
00:13:07,230 --> 00:13:13,320
have to<font color="#CCCCCC"> surge the key in 8-bit chunks</font>

313
00:13:10,790 --> 00:13:15,000
here<font color="#E5E5E5"> is another output so I was</font>

314
00:13:13,320 --> 00:13:16,980
mentioning<font color="#CCCCCC"> about independent computation</font>

315
00:13:15,000 --> 00:13:18,780
chunk<font color="#E5E5E5"> here it is one independent</font>

316
00:13:16,980 --> 00:13:20,940
computation<font color="#E5E5E5"> chunk you can see that if</font>

317
00:13:18,780 --> 00:13:23,160
you<font color="#CCCCCC"> guess</font><font color="#E5E5E5"> two key bits at a</font><font color="#CCCCCC"> time</font>

318
00:13:20,940 --> 00:13:25,290
then you<font color="#CCCCCC"> can't evaluate</font><font color="#E5E5E5"> these</font>

319
00:13:23,160 --> 00:13:27,569
<font color="#E5E5E5">distinguishers so this is from</font><font color="#CCCCCC"> another</font>

320
00:13:25,290 --> 00:13:30,420
layer actually<font color="#E5E5E5"> and it says that if you</font>

321
00:13:27,570 --> 00:13:33,360
<font color="#CCCCCC">just come to guess</font><font color="#E5E5E5"> two key bits at a</font>

322
00:13:30,420 --> 00:13:35,370
time<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can get the whole key of a yes</font>

323
00:13:33,360 --> 00:13:39,630
I mean gift<font color="#E5E5E5"> in</font><font color="#CCCCCC"> tile there are 32</font>

324
00:13:35,370 --> 00:13:42,510
<font color="#CCCCCC">keywords in this layer easily now to</font>

325
00:13:39,630 --> 00:13:45,600
conclude<font color="#E5E5E5"> this is the first time we have</font>

326
00:13:42,510 --> 00:13:48,560
provided a mean of doing<font color="#CCCCCC"> DF a completely</font>

327
00:13:45,600 --> 00:13:52,020
automatically<font color="#E5E5E5"> and in a scalable manner</font>

328
00:13:48,560 --> 00:13:53,790
and additionally provides the<font color="#E5E5E5"> complete</font>

329
00:13:52,020 --> 00:13:56,310
description<font color="#E5E5E5"> of the attack there</font><font color="#CCCCCC"> are</font>

330
00:13:53,790 --> 00:13:58,829
several augmentations possible over

331
00:13:56,310 --> 00:14:01,099
<font color="#E5E5E5">these like for the generalization for</font><font color="#CCCCCC"> T</font>

332
00:13:58,830 --> 00:14:03,420
<font color="#CCCCCC">shedule attacks the FI attracts</font>

333
00:14:01,100 --> 00:14:05,490
synthesis the optimal countermeasures

334
00:14:03,420 --> 00:14:08,819
countermeasure vulnerability<font color="#CCCCCC"> analysis</font>

335
00:14:05,490 --> 00:14:17,670
<font color="#CCCCCC">etc but</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> first step</font><font color="#CCCCCC"> let's see</font>

336
00:14:08,820 --> 00:14:20,370
a demo on<font color="#E5E5E5"> X fault so I'm going</font><font color="#CCCCCC"> to show</font>

337
00:14:17,670 --> 00:14:22,349
the eighth round<font color="#E5E5E5"> attack on AES so there</font>

338
00:14:20,370 --> 00:14:27,270
<font color="#E5E5E5">are two kinds of inputs one is the fault</font>

339
00:14:22,350 --> 00:14:31,490
simulation data represented<font color="#CCCCCC"> necessary</font>

340
00:14:27,270 --> 00:14:34,439
<font color="#CCCCCC">for files</font><font color="#E5E5E5"> so here we show one of them</font>

341
00:14:31,490 --> 00:14:36,000
pretty much<font color="#E5E5E5"> random</font><font color="#CCCCCC"> it has</font><font color="#E5E5E5"> been generated</font>

342
00:14:34,440 --> 00:14:40,590
by<font color="#CCCCCC"> varying that Keys varying the</font>

343
00:14:36,000 --> 00:14:42,900
plaintext<font color="#CCCCCC"> and fault values of course the</font>

344
00:14:40,590 --> 00:14:48,200
second thing is the abstract description

345
00:14:42,900 --> 00:14:48,199
of the cipher there's a lot cipher file

346
00:14:48,440 --> 00:14:53,640
so you<font color="#E5E5E5"> see there are two blocks like</font>

347
00:14:51,330 --> 00:14:56,040
begin block<font color="#E5E5E5"> and block construct and</font>

348
00:14:53,640 --> 00:14:58,949
within<font color="#E5E5E5"> that I represent each function of</font>

349
00:14:56,040 --> 00:15:01,380
<font color="#E5E5E5">AES in this graphical form and then you</font>

350
00:14:58,950 --> 00:15:04,460
can internally construct the<font color="#E5E5E5"> CDG inside</font>

351
00:15:01,380 --> 00:15:04,460
<font color="#E5E5E5">that's not the tool</font>

352
00:15:12,310 --> 00:15:21,260
now let's run the<font color="#E5E5E5"> export so we are</font>

353
00:15:18,260 --> 00:15:29,060
selecting<font color="#E5E5E5"> a yes because we are targeting</font>

354
00:15:21,260 --> 00:15:32,000
<font color="#E5E5E5">a yes in this case so the</font><font color="#CCCCCC"> distinguisher</font>

355
00:15:29,060 --> 00:15:34,160
<font color="#E5E5E5">identification step is running</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have</font>

356
00:15:32,000 --> 00:15:37,160
<font color="#CCCCCC">eleven state differentials to analyze</font>

357
00:15:34,160 --> 00:15:39,439
now it is finished almost<font color="#E5E5E5"> now we are</font>

358
00:15:37,160 --> 00:15:41,870
<font color="#E5E5E5">kampl calculating the</font><font color="#CCCCCC"> gravis using the</font>

359
00:15:39,440 --> 00:15:45,080
<font color="#E5E5E5">graph based</font><font color="#CCCCCC"> abstraction and in</font><font color="#E5E5E5"> this</font>

360
00:15:41,870 --> 00:15:46,820
attack<font color="#CCCCCC"> we found that</font><font color="#E5E5E5"> to distinguish are</font>

361
00:15:45,080 --> 00:15:48,950
required to be used<font color="#E5E5E5"> head-on</font>

362
00:15:46,820 --> 00:15:51,650
now attack is complete<font color="#E5E5E5"> to distinguish</font>

363
00:15:48,950 --> 00:15:53,990
<font color="#CCCCCC">shirts have been found</font><font color="#E5E5E5"> so it reports</font>

364
00:15:51,650 --> 00:15:56,150
evaluation complexity to be<font color="#E5E5E5"> to power of</font>

365
00:15:53,990 --> 00:15:57,980
32<font color="#E5E5E5"> and offline complexity that is the</font>

366
00:15:56,150 --> 00:15:59,180
<font color="#E5E5E5">remaining key space size is to power of</font>

367
00:15:57,980 --> 00:16:01,400
seven point nine seven

368
00:15:59,180 --> 00:16:04,489
that's roughly<font color="#CCCCCC"> to power of eight that</font>

369
00:16:01,400 --> 00:16:05,930
gives the optimal attack on a yes<font color="#E5E5E5"> now</font>

370
00:16:04,490 --> 00:16:07,460
let's see<font color="#E5E5E5"> that</font><font color="#CCCCCC"> to distinguish shirts</font>

371
00:16:05,930 --> 00:16:09,020
that we have used if you<font color="#CCCCCC"> have them you</font>

372
00:16:07,460 --> 00:16:09,980
<font color="#CCCCCC">can reproduce the attack on any</font>

373
00:16:09,020 --> 00:16:12,260
<font color="#CCCCCC">implementation</font>

374
00:16:09,980 --> 00:16:14,780
so the first distinguisher evaluation

375
00:16:12,260 --> 00:16:16,670
complexity<font color="#E5E5E5"> is to power of 32</font><font color="#CCCCCC"> and it</font>

376
00:16:14,780 --> 00:16:20,390
reduces<font color="#E5E5E5"> the keys are spaced from two</font>

377
00:16:16,670 --> 00:16:23,719
power of 128 to<font color="#E5E5E5"> two power of 32</font><font color="#CCCCCC"> roughly</font>

378
00:16:20,390 --> 00:16:26,030
<font color="#E5E5E5">to power of 32 actually and here is the</font>

379
00:16:23,720 --> 00:16:28,370
second distinguisher which reduces the

380
00:16:26,030 --> 00:16:30,199
key<font color="#CCCCCC"> space farther through</font><font color="#E5E5E5"> to power of</font>

381
00:16:28,370 --> 00:16:32,450
seven point nine seven<font color="#E5E5E5"> that's roughly</font><font color="#CCCCCC"> to</font>

382
00:16:30,200 --> 00:16:34,610
power of eight<font color="#E5E5E5"> now let's see the example</font>

383
00:16:32,450 --> 00:16:36,740
<font color="#E5E5E5">CDG graph this is due</font><font color="#CCCCCC"> to the first</font>

384
00:16:34,610 --> 00:16:38,810
distinguisher that we have evaluated<font color="#CCCCCC"> you</font>

385
00:16:36,740 --> 00:16:41,750
can clearly identify the independent

386
00:16:38,810 --> 00:16:43,760
computation chunks if you just compute

387
00:16:41,750 --> 00:16:54,890
over<font color="#E5E5E5"> this chance in a divide-and-conquer</font>

388
00:16:43,760 --> 00:16:57,890
manner you can<font color="#E5E5E5"> do that</font><font color="#CCCCCC"> AK scalable so</font>

389
00:16:54,890 --> 00:17:04,010
that's all this project is<font color="#E5E5E5"> funded by</font>

390
00:16:57,890 --> 00:17:06,339
synopsis<font color="#CCCCCC"> CAD labs</font><font color="#E5E5E5"> under title thank you</font>

391
00:17:04,010 --> 00:17:06,339
for listening

392
00:17:10,500 --> 00:17:18,790
so to be any questions<font color="#CCCCCC"> say is this</font>

393
00:17:15,970 --> 00:17:21,089
available<font color="#E5E5E5"> on someone</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> it up not yet</font>

394
00:17:18,790 --> 00:17:30,510
<font color="#E5E5E5">but we are planning to make it available</font>

395
00:17:21,089 --> 00:17:30,510
<font color="#E5E5E5">as soon as possible anybody sorry</font>

396
00:17:34,590 --> 00:17:45,939
<font color="#E5E5E5">speaker is this mining part does it</font>

397
00:17:43,240 --> 00:17:49,300
depend on<font color="#CCCCCC"> the one on which inputs you're</font>

398
00:17:45,940 --> 00:17:53,080
<font color="#E5E5E5">an or</font><font color="#CCCCCC"> enrich</font><font color="#E5E5E5"> plaintext your nor Europe</font>

399
00:17:49,300 --> 00:17:56,350
loin no but you have to just<font color="#CCCCCC"> give</font>

400
00:17:53,080 --> 00:17:58,419
sufficient simulation data<font color="#E5E5E5"> that's it but</font>

401
00:17:56,350 --> 00:18:00,219
we<font color="#E5E5E5"> found that the amount of</font><font color="#CCCCCC"> data I</font><font color="#E5E5E5"> mean</font>

402
00:17:58,420 --> 00:18:02,200
number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> simulations you have to do to</font>

403
00:18:00,220 --> 00:18:06,070
get<font color="#E5E5E5"> the distinguishes is quite less I</font>

404
00:18:02,200 --> 00:18:08,950
<font color="#CCCCCC">mean for AES</font><font color="#E5E5E5"> I use two keys and couple</font>

405
00:18:06,070 --> 00:18:10,510
of<font color="#CCCCCC"> fifty plain texts probably and I get</font>

406
00:18:08,950 --> 00:18:17,050
the<font color="#CCCCCC"> answer it takes it does</font><font color="#E5E5E5"> not take</font>

407
00:18:10,510 --> 00:18:19,090
much<font color="#E5E5E5"> time</font><font color="#CCCCCC"> but I mean this bit flips no</font>

408
00:18:17,050 --> 00:18:20,980
it's not bit flips<font color="#E5E5E5"> you can provide many</font>

409
00:18:19,090 --> 00:18:23,320
<font color="#E5E5E5">kind of fault models we</font><font color="#CCCCCC"> have tasted with</font>

410
00:18:20,980 --> 00:18:24,910
<font color="#E5E5E5">multiple for white fault nimble fault</font>

411
00:18:23,320 --> 00:18:26,678
<font color="#E5E5E5">everything yeah but suppose</font><font color="#CCCCCC"> you unlock</font>

412
00:18:24,910 --> 00:18:28,179
on like an algorithm level I mean if you

413
00:18:26,679 --> 00:18:30,820
<font color="#CCCCCC">must</font><font color="#E5E5E5"> have like a</font><font color="#CCCCCC"> physical fault</font><font color="#E5E5E5"> whatever</font>

414
00:18:28,179 --> 00:18:34,660
a glitch or something<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have input</font>

415
00:18:30,820 --> 00:18:36,820
dependency then you can say<font color="#E5E5E5"> that but</font>

416
00:18:34,660 --> 00:18:38,800
this is an analysis<font color="#E5E5E5"> that algorithmic</font>

417
00:18:36,820 --> 00:18:42,309
level we are analyzing algorithms<font color="#CCCCCC"> we are</font>

418
00:18:38,800 --> 00:18:44,889
not taking implementations in account

419
00:18:42,309 --> 00:18:46,809
for the time being<font color="#E5E5E5"> later</font><font color="#CCCCCC"> will exchange</font>

420
00:18:44,890 --> 00:18:48,370
it on<font color="#CCCCCC"> implementation then that those</font>

421
00:18:46,809 --> 00:18:50,770
things<font color="#E5E5E5"> will also be included</font><font color="#CCCCCC"> in the</font>

422
00:18:48,370 --> 00:18:52,600
fault model<font color="#CCCCCC"> it depends</font><font color="#E5E5E5"> how you design</font>

423
00:18:50,770 --> 00:18:54,210
your fault more I mean<font color="#E5E5E5"> the abstraction</font>

424
00:18:52,600 --> 00:18:59,020
of the fault<font color="#E5E5E5"> that's it</font>

425
00:18:54,210 --> 00:19:00,080
<font color="#E5E5E5">thanks well let's thank the speaker</font>

426
00:18:59,020 --> 00:19:08,030
<font color="#CCCCCC">again</font>

427
00:19:00,080 --> 00:19:08,030
[Applause]

