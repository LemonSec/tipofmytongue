1
00:00:00,829 --> 00:00:08,760
<font color="#E5E5E5">okay the third</font><font color="#CCCCCC"> sort or court decision</font>

2
00:00:04,470 --> 00:00:11,460
will be<font color="#E5E5E5"> about the scp-024 protocol and</font>

3
00:00:08,760 --> 00:00:13,200
the<font color="#E5E5E5"> talk will</font><font color="#CCCCCC"> be given by Loic yeah</font>

4
00:00:11,460 --> 00:00:17,699
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for the introduction</font>

5
00:00:13,200 --> 00:00:20,220
<font color="#E5E5E5">so good morning everyone</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> outline</font>

6
00:00:17,699 --> 00:00:22,769
of my<font color="#E5E5E5"> talk is the</font><font color="#CCCCCC"> following</font><font color="#E5E5E5"> first I will</font>

7
00:00:20,220 --> 00:00:24,359
briefly describe<font color="#CCCCCC"> the the CPU</font><font color="#E5E5E5"> to protocol</font>

8
00:00:22,769 --> 00:00:27,689
then I will present<font color="#E5E5E5"> the padding Oracle</font>

9
00:00:24,359 --> 00:00:29,609
attack and next I<font color="#CCCCCC"> will</font><font color="#E5E5E5"> explain the the</font>

10
00:00:27,689 --> 00:00:33,210
<font color="#E5E5E5">infernal results that we have obtained</font>

11
00:00:29,609 --> 00:00:35,280
<font color="#CCCCCC">and finally</font><font color="#E5E5E5"> I will</font><font color="#CCCCCC"> conclude so a CPU -</font>

12
00:00:33,210 --> 00:00:37,440
is a security protocol protocol promoted

13
00:00:35,280 --> 00:00:39,719
by<font color="#CCCCCC"> approval platform</font><font color="#E5E5E5"> and in fact it's an</font>

14
00:00:37,440 --> 00:00:42,930
<font color="#E5E5E5">element of a wider set of protocols</font><font color="#CCCCCC"> such</font>

15
00:00:39,719 --> 00:00:45,270
as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> CP o</font><font color="#E5E5E5"> 3 or</font><font color="#CCCCCC"> a CPA team and each</font>

16
00:00:42,930 --> 00:00:47,430
protocol has different<font color="#CCCCCC"> features</font><font color="#E5E5E5"> and a</font>

17
00:00:45,270 --> 00:00:49,890
<font color="#CCCCCC">CPU</font><font color="#E5E5E5"> - is based on two symmetric key</font>

18
00:00:47,430 --> 00:00:52,980
functions<font color="#CCCCCC"> death</font><font color="#E5E5E5"> and Triple DES and with</font>

19
00:00:49,890 --> 00:00:54,989
<font color="#E5E5E5">these two functions</font><font color="#CCCCCC"> mutual</font>

20
00:00:52,980 --> 00:00:56,849
authentication scheme a<font color="#E5E5E5"> given stream and</font>

21
00:00:54,989 --> 00:00:58,468
finally a secure<font color="#E5E5E5"> channel are provided</font>

22
00:00:56,850 --> 00:01:00,239
<font color="#E5E5E5">and the secure channel</font><font color="#CCCCCC"> aims at</font>

23
00:00:58,469 --> 00:01:03,660
guaranteeing data<font color="#E5E5E5"> confidentiality and</font>

24
00:01:00,239 --> 00:01:05,700
data integrity<font color="#E5E5E5"> the main purpose of a CPU</font>

25
00:01:03,660 --> 00:01:08,189
<font color="#E5E5E5">- as well as</font><font color="#CCCCCC"> the other recipe protocols</font>

26
00:01:05,700 --> 00:01:10,470
is to provide a secure<font color="#CCCCCC"> channel in fact</font>

27
00:01:08,189 --> 00:01:12,929
SCP stands<font color="#CCCCCC"> for secure channel photo</font>

28
00:01:10,470 --> 00:01:16,289
color and the genuine classical scenario

29
00:01:12,930 --> 00:01:17,600
when<font color="#E5E5E5"> the CPU to</font><font color="#CCCCCC"> ISM used is when one</font>

30
00:01:16,290 --> 00:01:20,189
wants<font color="#CCCCCC"> to</font><font color="#E5E5E5"> upload in the</font><font color="#CCCCCC"> SIM</font><font color="#E5E5E5"> card</font>

31
00:01:17,600 --> 00:01:22,140
<font color="#CCCCCC">unapplied</font><font color="#E5E5E5"> so I'm pretty sure that every</font>

32
00:01:20,189 --> 00:01:23,339
one<font color="#CCCCCC"> of us has a</font><font color="#E5E5E5"> SIM card plugged into</font>

33
00:01:22,140 --> 00:01:25,890
his or her smartphone

34
00:01:23,340 --> 00:01:27,960
and when one wants<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> a new service</font>

35
00:01:25,890 --> 00:01:30,060
with the widow smartphone for instance a

36
00:01:27,960 --> 00:01:32,460
transportation service or a<font color="#E5E5E5"> payment</font>

37
00:01:30,060 --> 00:01:36,119
service through NFC<font color="#E5E5E5"> the first step is to</font>

38
00:01:32,460 --> 00:01:38,130
<font color="#E5E5E5">install an applied into the SIM card so</font>

39
00:01:36,119 --> 00:01:40,350
very likely<font color="#E5E5E5"> the scenario the following</font>

40
00:01:38,130 --> 00:01:42,630
scenario is followed<font color="#E5E5E5"> so there are there</font>

41
00:01:40,350 --> 00:01:45,179
is<font color="#E5E5E5"> a remote server that stores all the</font>

42
00:01:42,630 --> 00:01:46,890
applets and<font color="#CCCCCC"> an</font><font color="#E5E5E5"> SCP</font><font color="#CCCCCC"> YouTube channel is</font>

43
00:01:45,180 --> 00:01:49,710
<font color="#CCCCCC">established between this remote server</font>

44
00:01:46,890 --> 00:01:51,180
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sim card it's a channel</font><font color="#E5E5E5"> and when</font>

45
00:01:49,710 --> 00:01:53,729
between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sim card and the remote</font>

46
00:01:51,180 --> 00:01:56,189
server<font color="#E5E5E5"> there is an</font><font color="#CCCCCC"> application on the</font>

47
00:01:53,729 --> 00:01:58,079
<font color="#E5E5E5">smartphone that</font><font color="#CCCCCC"> will relay the encrypted</font>

48
00:01:56,189 --> 00:02:00,689
commands sent by the server to<font color="#E5E5E5"> the SIM</font>

49
00:01:58,079 --> 00:02:04,020
card<font color="#E5E5E5"> which commands carry pieces of the</font>

50
00:02:00,689 --> 00:02:07,020
<font color="#CCCCCC">applet and it may also be</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> that</font>

51
00:02:04,020 --> 00:02:08,639
an additional security protocol be used

52
00:02:07,020 --> 00:02:10,799
<font color="#CCCCCC">between the remote server</font><font color="#E5E5E5"> and the</font>

53
00:02:08,639 --> 00:02:12,390
application on<font color="#E5E5E5"> the smartphone</font><font color="#CCCCCC"> and in</font>

54
00:02:10,800 --> 00:02:13,760
that case there is there are two

55
00:02:12,390 --> 00:02:15,589
<font color="#E5E5E5">security layers between</font>

56
00:02:13,760 --> 00:02:19,099
<font color="#E5E5E5">Salva</font><font color="#CCCCCC"> and the application</font><font color="#E5E5E5"> for instance</font>

57
00:02:15,590 --> 00:02:20,690
<font color="#E5E5E5">se</font><font color="#CCCCCC"> po2 over TLS and</font><font color="#E5E5E5"> there is only a CPU</font>

58
00:02:19,099 --> 00:02:23,659
<font color="#CCCCCC">- between the</font><font color="#E5E5E5"> application on the</font>

59
00:02:20,690 --> 00:02:25,129
smartphone and<font color="#E5E5E5"> the sim</font><font color="#CCCCCC"> Khaldun so since</font>

60
00:02:23,659 --> 00:02:27,048
what I'm going<font color="#E5E5E5"> to describe does not lie</font>

61
00:02:25,129 --> 00:02:29,690
on the way the mutual authentication is

62
00:02:27,049 --> 00:02:32,000
<font color="#CCCCCC">done and how</font><font color="#E5E5E5"> the King strange is done</font><font color="#CCCCCC"> I</font>

63
00:02:29,690 --> 00:02:34,010
will<font color="#CCCCCC"> skip this</font><font color="#E5E5E5"> description I really</font>

64
00:02:32,000 --> 00:02:36,620
assume that the remote server and<font color="#E5E5E5"> the</font>

65
00:02:34,010 --> 00:02:38,660
<font color="#CCCCCC">sim card our material indicated and they</font>

66
00:02:36,620 --> 00:02:40,610
do share new channel keys and now the

67
00:02:38,660 --> 00:02:44,390
<font color="#CCCCCC">server is ready to send</font><font color="#E5E5E5"> everything</font>

68
00:02:40,610 --> 00:02:46,129
commands to the sim cam<font color="#E5E5E5"> so when the</font>

69
00:02:44,390 --> 00:02:48,230
server<font color="#E5E5E5"> wants to send a</font><font color="#CCCCCC"> grid commands</font><font color="#E5E5E5"> to</font>

70
00:02:46,129 --> 00:02:50,599
the<font color="#CCCCCC"> sim card it does</font><font color="#E5E5E5"> two main operations</font>

71
00:02:48,230 --> 00:02:52,879
<font color="#E5E5E5">the first one is to compute an octagonal</font>

72
00:02:50,599 --> 00:02:55,040
<font color="#E5E5E5">so an unencrypted command is made of two</font>

73
00:02:52,879 --> 00:02:56,929
<font color="#CCCCCC">fields</font><font color="#E5E5E5"> the header and data field and</font>

74
00:02:55,040 --> 00:02:58,760
this<font color="#E5E5E5"> is a field contains the</font><font color="#CCCCCC"> plaintext</font>

75
00:02:56,930 --> 00:03:00,799
<font color="#CCCCCC">which may be a piece</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> applet the</font>

76
00:02:58,760 --> 00:03:03,230
server wants<font color="#CCCCCC"> to upload India in the in</font>

77
00:03:00,799 --> 00:03:05,329
the SIM<font color="#CCCCCC"> card so this first operation</font>

78
00:03:03,230 --> 00:03:07,429
outputs<font color="#E5E5E5"> an 8 byte</font><font color="#CCCCCC"> Mac tagging and</font><font color="#E5E5E5"> the</font>

79
00:03:05,329 --> 00:03:09,970
second operation is to<font color="#E5E5E5"> actually encrypt</font>

80
00:03:07,430 --> 00:03:12,590
the data since the encryption<font color="#CCCCCC"> is done</font><font color="#E5E5E5"> in</font>

81
00:03:09,970 --> 00:03:15,109
with a block<font color="#E5E5E5"> cipher</font><font color="#CCCCCC"> nice Imboden it's</font>

82
00:03:12,590 --> 00:03:17,299
<font color="#CCCCCC">tripled and that is used the plaintext</font>

83
00:03:15,109 --> 00:03:19,700
is always followed<font color="#CCCCCC"> by the padding data</font>

84
00:03:17,299 --> 00:03:22,040
and then the plaintext<font color="#E5E5E5"> plus the padding</font>

85
00:03:19,700 --> 00:03:25,089
data are encrypted and this outputs the

86
00:03:22,040 --> 00:03:27,980
<font color="#E5E5E5">ciphertext and finally one gets</font>

87
00:03:25,090 --> 00:03:29,000
encrypted command which appears at the

88
00:03:27,980 --> 00:03:31,099
bottom of the<font color="#E5E5E5"> slide</font>

89
00:03:29,000 --> 00:03:33,950
this<font color="#CCCCCC"> included command is made of an</font>

90
00:03:31,099 --> 00:03:35,899
unencrypted letter and the data field

91
00:03:33,950 --> 00:03:39,619
which contains<font color="#CCCCCC"> the cipher text</font><font color="#E5E5E5"> followed</font>

92
00:03:35,900 --> 00:03:41,750
<font color="#E5E5E5">by the eight bytes</font><font color="#CCCCCC"> mac</font><font color="#E5E5E5"> tylium upon</font>

93
00:03:39,620 --> 00:03:43,609
reception of an encrypted command on the

94
00:03:41,750 --> 00:03:45,519
card<font color="#CCCCCC"> does exactly</font><font color="#E5E5E5"> the reverse operations</font>

95
00:03:43,609 --> 00:03:48,919
<font color="#E5E5E5">first the card extracts the</font><font color="#CCCCCC"> ciphertext</font>

96
00:03:45,519 --> 00:03:50,810
decrypt the ciphertext<font color="#E5E5E5"> and</font><font color="#CCCCCC"> gets a byte</font>

97
00:03:48,919 --> 00:03:52,700
string that awfully is made of first<font color="#E5E5E5"> to</font>

98
00:03:50,810 --> 00:03:55,430
the plaintext<font color="#E5E5E5"> followed by the padding</font>

99
00:03:52,700 --> 00:03:57,470
data<font color="#E5E5E5"> since the pad Anita has a specific</font>

100
00:03:55,430 --> 00:03:58,970
format<font color="#E5E5E5"> the</font><font color="#CCCCCC"> card</font><font color="#E5E5E5"> must be</font><font color="#CCCCCC"> able to</font>

101
00:03:57,470 --> 00:04:01,549
discriminate between the<font color="#CCCCCC"> plaintext and</font>

102
00:03:58,970 --> 00:04:04,220
the padding<font color="#E5E5E5"> and in a CPU to the padding</font>

103
00:04:01,549 --> 00:04:07,190
is made of at least one byte which is

104
00:04:04,220 --> 00:04:09,379
equal<font color="#E5E5E5"> to 80 followed by one or</font><font color="#CCCCCC"> possibly</font>

105
00:04:07,190 --> 00:04:12,590
known<font color="#CCCCCC"> null bytes</font>

106
00:04:09,379 --> 00:04:14,388
so once the SIM card has extracted as

107
00:04:12,590 --> 00:04:16,639
<font color="#E5E5E5">discriminates of the plaintext the card</font>

108
00:04:14,389 --> 00:04:18,410
can recompute the<font color="#E5E5E5"> Mac tagger and</font><font color="#CCCCCC"> this</font>

109
00:04:16,639 --> 00:04:20,060
<font color="#CCCCCC">competition</font><font color="#E5E5E5"> is done over the genuine</font>

110
00:04:18,410 --> 00:04:22,520
header and the plaintext<font color="#CCCCCC"> and</font><font color="#E5E5E5"> some</font>

111
00:04:20,060 --> 00:04:24,770
padding<font color="#E5E5E5"> Anita and then the car compares</font>

112
00:04:22,520 --> 00:04:26,690
this new tag with the<font color="#CCCCCC"> cloud the car has</font>

113
00:04:24,770 --> 00:04:27,500
received on the on the<font color="#CCCCCC"> credit command</font>

114
00:04:26,690 --> 00:04:28,760
and if both

115
00:04:27,500 --> 00:04:31,370
tags I recall they can assume that

116
00:04:28,760 --> 00:04:33,530
<font color="#E5E5E5">integrity is preserved and then the</font>

117
00:04:31,370 --> 00:04:38,360
<font color="#E5E5E5">plain text may be stored at some of</font>

118
00:04:33,530 --> 00:04:40,760
thethe in the card memory so<font color="#E5E5E5"> encryption</font>

119
00:04:38,360 --> 00:04:42,320
<font color="#CCCCCC">decryption in spo2</font><font color="#E5E5E5"> is done using a CBC</font>

120
00:04:40,760 --> 00:04:44,719
mode so I'm pretty<font color="#CCCCCC"> sure that even knows</font>

121
00:04:42,320 --> 00:04:47,240
how CBC mode works<font color="#E5E5E5"> when one</font><font color="#CCCCCC"> wants to</font>

122
00:04:44,720 --> 00:04:49,310
<font color="#CCCCCC">encrypt</font><font color="#E5E5E5"> a plaintext block b1 this block</font>

123
00:04:47,240 --> 00:04:51,620
<font color="#E5E5E5">is first masked with the previous</font>

124
00:04:49,310 --> 00:04:53,930
encrypted<font color="#E5E5E5"> Block C 0 and then this result</font>

125
00:04:51,620 --> 00:04:57,290
is actually<font color="#E5E5E5"> encrypted and this outputs a</font>

126
00:04:53,930 --> 00:05:00,050
block<font color="#E5E5E5"> C 1 conversely when one wants</font><font color="#CCCCCC"> to</font>

127
00:04:57,290 --> 00:05:01,460
decrypt<font color="#E5E5E5"> any great</font><font color="#CCCCCC"> Block C 1</font><font color="#E5E5E5"> this block</font>

128
00:05:00,050 --> 00:05:04,880
<font color="#E5E5E5">is sent as input to the decryption</font>

129
00:05:01,460 --> 00:05:06,919
<font color="#E5E5E5">function and the result is unmasked with</font>

130
00:05:04,880 --> 00:05:10,510
the previous<font color="#CCCCCC"> Anchorage</font><font color="#E5E5E5"> block and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> of</font>

131
00:05:06,919 --> 00:05:13,070
<font color="#E5E5E5">3 outputs the genuine plaintext block</font><font color="#CCCCCC"> b1</font>

132
00:05:10,510 --> 00:05:15,349
so as we can<font color="#E5E5E5"> see at the previous</font>

133
00:05:13,070 --> 00:05:18,110
accreted<font color="#CCCCCC"> block c 0 as a direct influence</font>

134
00:05:15,350 --> 00:05:20,630
on the<font color="#CCCCCC"> result of</font><font color="#E5E5E5"> the decryption</font><font color="#CCCCCC"> that is</font>

135
00:05:18,110 --> 00:05:23,240
if an adversary<font color="#CCCCCC"> eavesdrops on encrypt</font>

136
00:05:20,630 --> 00:05:26,180
command and changes for<font color="#CCCCCC"> instance</font><font color="#E5E5E5"> of the</font>

137
00:05:23,240 --> 00:05:27,950
last byte of<font color="#CCCCCC"> the Block C</font><font color="#E5E5E5"> 0 this</font>

138
00:05:26,180 --> 00:05:32,000
<font color="#CCCCCC">modification will appear at</font><font color="#E5E5E5"> the same</font>

139
00:05:27,950 --> 00:05:34,340
<font color="#CCCCCC">position on the decrypted block if these</font>

140
00:05:32,000 --> 00:05:36,860
<font color="#E5E5E5">two blocks is R 1 C 1 are the two last</font>

141
00:05:34,340 --> 00:05:38,919
blocks of unencrypted command the

142
00:05:36,860 --> 00:05:41,330
<font color="#CCCCCC">simcard</font><font color="#E5E5E5"> expects after decryption</font><font color="#CCCCCC"> to find</font>

143
00:05:38,919 --> 00:05:44,000
some plain text followed but at least

144
00:05:41,330 --> 00:05:45,650
<font color="#E5E5E5">one byte of padding data and in that</font>

145
00:05:44,000 --> 00:05:47,990
case if there is only<font color="#CCCCCC"> one</font><font color="#E5E5E5"> byte of</font>

146
00:05:45,650 --> 00:05:50,390
<font color="#CCCCCC">padding data</font><font color="#E5E5E5"> this byte must be equal to</font>

147
00:05:47,990 --> 00:05:52,970
80 purpose if<font color="#CCCCCC"> occation but of course</font>

148
00:05:50,390 --> 00:05:55,340
<font color="#E5E5E5">since the attacker modifies</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> 0 with</font>

149
00:05:52,970 --> 00:05:59,360
some value it<font color="#E5E5E5"> from Demetrius chooses</font>

150
00:05:55,340 --> 00:06:01,219
some value G<font color="#E5E5E5"> of course this the result</font>

151
00:05:59,360 --> 00:06:04,669
of the decryption very likely will<font color="#E5E5E5"> not</font>

152
00:06:01,220 --> 00:06:07,430
will not output<font color="#CCCCCC"> a very padding data if</font>

153
00:06:04,669 --> 00:06:10,010
the attacker<font color="#E5E5E5"> likewise repeatedly make</font>

154
00:06:07,430 --> 00:06:12,710
the same change with the same block<font color="#E5E5E5"> C 0</font>

155
00:06:10,010 --> 00:06:14,599
with different values<font color="#E5E5E5"> G once again this</font>

156
00:06:12,710 --> 00:06:17,260
will<font color="#E5E5E5"> not output a valid padding byte 80</font>

157
00:06:14,600 --> 00:06:21,470
<font color="#E5E5E5">but in one</font><font color="#CCCCCC"> case only</font><font color="#E5E5E5"> in one case among</font>

158
00:06:17,260 --> 00:06:24,349
256 with a specific<font color="#CCCCCC"> value G this will</font>

159
00:06:21,470 --> 00:06:25,700
output a very padding data so of course

160
00:06:24,350 --> 00:06:27,770
the other<font color="#E5E5E5"> course not does not</font><font color="#CCCCCC"> talk</font>

161
00:06:25,700 --> 00:06:29,419
what's going on inside the card<font color="#E5E5E5"> it does</font>

162
00:06:27,770 --> 00:06:31,700
not have access<font color="#E5E5E5"> at least the</font><font color="#CCCCCC"> Dirac</font>

163
00:06:29,419 --> 00:06:33,890
access to the result of the decryption

164
00:06:31,700 --> 00:06:35,960
but let us<font color="#E5E5E5"> assume</font><font color="#CCCCCC"> that the adversary is</font>

165
00:06:33,890 --> 00:06:38,300
able to get<font color="#E5E5E5"> this binary information</font>

166
00:06:35,960 --> 00:06:40,260
<font color="#E5E5E5">whether the padding is correct or not</font>

167
00:06:38,300 --> 00:06:42,420
<font color="#CCCCCC">after decryption</font>

168
00:06:40,260 --> 00:06:45,630
then when the attacker<font color="#CCCCCC"> knows that the</font>

169
00:06:42,420 --> 00:06:48,240
padding is correct<font color="#CCCCCC"> it knows that B</font><font color="#E5E5E5"> 7</font><font color="#CCCCCC"> +</font><font color="#E5E5E5"> G</font>

170
00:06:45,630 --> 00:06:51,270
is equal<font color="#CCCCCC"> to 80</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the attacker</font><font color="#E5E5E5"> can</font>

171
00:06:48,240 --> 00:06:53,430
deduce the cigarette bite b<font color="#CCCCCC"> 7</font><font color="#E5E5E5"> so this</font>

172
00:06:51,270 --> 00:06:55,200
<font color="#E5E5E5">means that knowing the validity of the</font>

173
00:06:53,430 --> 00:06:57,810
padding after decryption<font color="#E5E5E5"> allows the</font>

174
00:06:55,200 --> 00:06:59,370
attacker<font color="#CCCCCC"> to deduce</font><font color="#E5E5E5"> one byte</font><font color="#CCCCCC"> of secret</font>

175
00:06:57,810 --> 00:07:02,670
data<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this technique</font><font color="#E5E5E5"> is called</font>

176
00:06:59,370 --> 00:07:05,850
padding Oracle<font color="#E5E5E5"> attack and is due to</font><font color="#CCCCCC"> cell</font>

177
00:07:02,670 --> 00:07:08,070
<font color="#CCCCCC">phone a which was founded in 2002 so the</font>

178
00:07:05,850 --> 00:07:09,810
question now is<font color="#E5E5E5"> how</font><font color="#CCCCCC"> may the attacker</font>

179
00:07:08,070 --> 00:07:11,430
know when the padding is correct<font color="#CCCCCC"> and</font>

180
00:07:09,810 --> 00:07:13,620
when the padding is incorrect<font color="#E5E5E5"> after</font>

181
00:07:11,430 --> 00:07:16,080
decryption<font color="#E5E5E5"> so there are basically two</font>

182
00:07:13,620 --> 00:07:18,090
main cases the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> case is when</font><font color="#E5E5E5"> after</font>

183
00:07:16,080 --> 00:07:21,150
decryption<font color="#CCCCCC"> the card is</font><font color="#E5E5E5"> not able to find</font>

184
00:07:18,090 --> 00:07:23,099
a valid padding data and the second case

185
00:07:21,150 --> 00:07:25,169
when the card<font color="#E5E5E5"> finds a variant</font><font color="#CCCCCC"> body valid</font>

186
00:07:23,100 --> 00:07:27,120
padding data so in the<font color="#E5E5E5"> fraud case it may</font>

187
00:07:25,170 --> 00:07:30,870
happen that<font color="#E5E5E5"> the decryption will or the</font>

188
00:07:27,120 --> 00:07:32,820
smart card<font color="#CCCCCC"> send a specific error code</font>

189
00:07:30,870 --> 00:07:34,710
saying that something wrong went with

190
00:07:32,820 --> 00:07:36,719
the decryption<font color="#E5E5E5"> because in the first case</font>

191
00:07:34,710 --> 00:07:38,810
after the caption<font color="#CCCCCC"> the card has not</font>

192
00:07:36,720 --> 00:07:42,090
cannot distinguish<font color="#CCCCCC"> the plaintext and</font>

193
00:07:38,810 --> 00:07:43,170
like click and not compute the Mac<font color="#E5E5E5"> tiger</font>

194
00:07:42,090 --> 00:07:45,150
in the other<font color="#E5E5E5"> car</font>

195
00:07:43,170 --> 00:07:47,760
in the other case the<font color="#E5E5E5"> card decrypted</font>

196
00:07:45,150 --> 00:07:49,620
data finds some valid padding Delta and

197
00:07:47,760 --> 00:07:51,840
then can proceed to<font color="#E5E5E5"> the mag verification</font>

198
00:07:49,620 --> 00:07:53,730
but recall<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the secret encrypted</font>

199
00:07:51,840 --> 00:07:55,710
command has<font color="#CCCCCC"> been modified</font><font color="#E5E5E5"> in the first</font>

200
00:07:53,730 --> 00:07:58,290
place by the<font color="#E5E5E5"> attacker therefore the Mac</font>

201
00:07:55,710 --> 00:08:00,570
verification will be incorrect<font color="#E5E5E5"> so it may</font>

202
00:07:58,290 --> 00:08:02,250
happen<font color="#CCCCCC"> that the car in that case send a</font>

203
00:08:00,570 --> 00:08:05,520
<font color="#E5E5E5">different her whole</font><font color="#CCCCCC"> thing that</font><font color="#E5E5E5"> something</font>

204
00:08:02,250 --> 00:08:07,650
wrong went with<font color="#CCCCCC"> the Mac so if</font><font color="#E5E5E5"> the card</font>

205
00:08:05,520 --> 00:08:09,120
behaved so then this provides the

206
00:08:07,650 --> 00:08:11,429
<font color="#CCCCCC">information the attacker needs to</font>

207
00:08:09,120 --> 00:08:14,850
<font color="#E5E5E5">perform the padding Oracle attack but</font>

208
00:08:11,430 --> 00:08:16,890
there may be also<font color="#E5E5E5"> another case and the</font>

209
00:08:14,850 --> 00:08:19,260
<font color="#CCCCCC">the other case the other possibility is</font>

210
00:08:16,890 --> 00:08:20,909
<font color="#E5E5E5">the following in the first case when the</font>

211
00:08:19,260 --> 00:08:22,980
card after<font color="#E5E5E5"> decryption does that find a</font>

212
00:08:20,910 --> 00:08:25,920
valid padding data<font color="#E5E5E5"> it may happen that</font>

213
00:08:22,980 --> 00:08:28,170
<font color="#E5E5E5">the card be not they will not be able</font><font color="#CCCCCC"> to</font>

214
00:08:25,920 --> 00:08:31,890
compute<font color="#CCCCCC"> the Mac Tahlia on the other case</font>

215
00:08:28,170 --> 00:08:33,539
<font color="#E5E5E5">the card can decrypt find a valid patent</font>

216
00:08:31,890 --> 00:08:35,610
Delta and then can proceed to<font color="#E5E5E5"> the Mac</font>

217
00:08:33,539 --> 00:08:37,228
verification<font color="#E5E5E5"> therefore the computation</font>

218
00:08:35,610 --> 00:08:39,450
time<font color="#E5E5E5"> in either case is different and</font>

219
00:08:37,229 --> 00:08:41,190
this can also be<font color="#CCCCCC"> used by the attacker if</font>

220
00:08:39,450 --> 00:08:45,030
<font color="#CCCCCC">it's able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> get this</font><font color="#E5E5E5"> information to</font>

221
00:08:41,190 --> 00:08:47,490
<font color="#CCCCCC">mount the padding</font><font color="#E5E5E5"> Oracle attack so back</font>

222
00:08:45,030 --> 00:08:49,110
to our practical experiments in our case

223
00:08:47,490 --> 00:08:51,030
we have tested several smart cards and

224
00:08:49,110 --> 00:08:52,830
what we have observed<font color="#E5E5E5"> is that the card</font>

225
00:08:51,030 --> 00:08:54,150
open<font color="#E5E5E5"> reception of an agreed common</font>

226
00:08:52,830 --> 00:08:56,310
always<font color="#CCCCCC"> sends</font>

227
00:08:54,150 --> 00:08:58,530
<font color="#CCCCCC">a response this</font><font color="#E5E5E5"> is per specification</font>

228
00:08:56,310 --> 00:09:00,959
this is the<font color="#E5E5E5"> so-called</font><font color="#CCCCCC"> two byte status</font>

229
00:08:58,530 --> 00:09:03,209
<font color="#CCCCCC">word</font><font color="#E5E5E5"> we have also observed that be the</font>

230
00:09:00,960 --> 00:09:05,810
<font color="#CCCCCC">patent</font><font color="#E5E5E5"> correct or not</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> decryption</font>

231
00:09:03,210 --> 00:09:09,120
<font color="#CCCCCC">the</font><font color="#E5E5E5"> card says always the same error code</font>

232
00:09:05,810 --> 00:09:11,760
to the server<font color="#E5E5E5"> and this is per se P or to</font>

233
00:09:09,120 --> 00:09:14,220
a<font color="#CCCCCC"> specification but we have also</font>

234
00:09:11,760 --> 00:09:15,930
observed the<font color="#E5E5E5"> following</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this this</font>

235
00:09:14,220 --> 00:09:18,900
graph depicts<font color="#E5E5E5"> the response time of the</font>

236
00:09:15,930 --> 00:09:20,790
<font color="#CCCCCC">card in either</font><font color="#E5E5E5"> case the red curve</font>

237
00:09:18,900 --> 00:09:22,590
correspond to rest to the response time

238
00:09:20,790 --> 00:09:24,300
when the padding data is invalid<font color="#E5E5E5"> after</font>

239
00:09:22,590 --> 00:09:25,980
decryption<font color="#E5E5E5"> and the blue curve</font>

240
00:09:24,300 --> 00:09:28,740
corresponds to the response time when

241
00:09:25,980 --> 00:09:31,230
the padding is valid after<font color="#E5E5E5"> decryption so</font>

242
00:09:28,740 --> 00:09:33,720
this leads to two observation the first

243
00:09:31,230 --> 00:09:36,180
one is that seemingly the<font color="#E5E5E5"> card behaves</font>

244
00:09:33,720 --> 00:09:39,410
differently<font color="#CCCCCC"> in neither case very likely</font>

245
00:09:36,180 --> 00:09:42,300
<font color="#E5E5E5">when the padding is incorrect the</font><font color="#CCCCCC"> cloud</font>

246
00:09:39,410 --> 00:09:45,150
decrypt the data<font color="#E5E5E5"> but does not make the</font>

247
00:09:42,300 --> 00:09:47,280
<font color="#CCCCCC">mag computation where</font><font color="#E5E5E5"> ad in the second</font>

248
00:09:45,150 --> 00:09:49,590
<font color="#E5E5E5">case the card decrypt finds some valid</font>

249
00:09:47,280 --> 00:09:51,780
padding data and then make<font color="#E5E5E5"> the mock</font>

250
00:09:49,590 --> 00:09:53,430
computation<font color="#E5E5E5"> and this leads to the second</font>

251
00:09:51,780 --> 00:09:55,860
observation which is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font>

252
00:09:53,430 --> 00:09:58,439
<font color="#CCCCCC">computation time spent by the card is in</font>

253
00:09:55,860 --> 00:10:01,560
<font color="#CCCCCC">fact directly</font><font color="#E5E5E5"> reflected in the response</font>

254
00:09:58,440 --> 00:10:03,990
time<font color="#CCCCCC"> so this response time provides a</font>

255
00:10:01,560 --> 00:10:06,060
suitable if padding record in<font color="#E5E5E5"> order for</font>

256
00:10:03,990 --> 00:10:08,670
an attacker to mount the<font color="#CCCCCC"> D attack</font><font color="#E5E5E5"> and</font>

257
00:10:06,060 --> 00:10:10,890
this observation have been made in

258
00:10:08,670 --> 00:10:12,900
several<font color="#E5E5E5"> account that we have tested the</font>

259
00:10:10,890 --> 00:10:14,910
response<font color="#CCCCCC"> time the</font><font color="#E5E5E5"> response times may be</font>

260
00:10:12,900 --> 00:10:16,740
different depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the card but in</font>

261
00:10:14,910 --> 00:10:18,780
all cases<font color="#E5E5E5"> we have been able</font><font color="#CCCCCC"> to clearly</font>

262
00:10:16,740 --> 00:10:20,400
<font color="#E5E5E5">distinguish between the case when the</font>

263
00:10:18,780 --> 00:10:22,350
padding is incorrect<font color="#E5E5E5"> after decryption</font>

264
00:10:20,400 --> 00:10:25,380
<font color="#CCCCCC">which corresponds</font><font color="#E5E5E5"> to the red curve and</font>

265
00:10:22,350 --> 00:10:29,400
when the<font color="#E5E5E5"> case in the case when</font><font color="#CCCCCC"> the</font>

266
00:10:25,380 --> 00:10:31,410
padding is correct after<font color="#E5E5E5"> decryption so</font>

267
00:10:29,400 --> 00:10:32,699
more practically more precisely what<font color="#E5E5E5"> we</font>

268
00:10:31,410 --> 00:10:34,230
have<font color="#E5E5E5"> done is</font><font color="#CCCCCC"> that we have</font><font color="#E5E5E5"> used an</font>

269
00:10:32,700 --> 00:10:37,140
experimental setting we<font color="#E5E5E5"> have simulated</font>

270
00:10:34,230 --> 00:10:38,660
<font color="#E5E5E5">the server and</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> tested</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> models</font>

271
00:10:37,140 --> 00:10:41,130
of smart cards<font color="#E5E5E5"> provided by different</font>

272
00:10:38,660 --> 00:10:44,939
<font color="#E5E5E5">manufacturers we have tested two types</font>

273
00:10:41,130 --> 00:10:47,189
of<font color="#CCCCCC"> Schmucker of SIM cards</font><font color="#E5E5E5"> either two</font>

274
00:10:44,940 --> 00:10:49,500
types<font color="#E5E5E5"> of smart answering either</font><font color="#CCCCCC"> sim card</font>

275
00:10:47,190 --> 00:10:50,940
<font color="#E5E5E5">or a generator</font><font color="#CCCCCC"> alcohol and the</font>

276
00:10:49,500 --> 00:10:53,270
experiment that<font color="#E5E5E5"> we have done is to</font>

277
00:10:50,940 --> 00:10:55,560
randomly generate<font color="#CCCCCC"> sixteen bytes and</font>

278
00:10:53,270 --> 00:10:57,870
these<font color="#CCCCCC"> sixteen bytes have been sent</font>

279
00:10:55,560 --> 00:11:00,660
<font color="#E5E5E5">through encrypted a CPU to command to</font>

280
00:10:57,870 --> 00:11:02,490
the<font color="#CCCCCC"> card and the purpose for our</font>

281
00:11:00,660 --> 00:11:04,350
attacker was to<font color="#E5E5E5"> retrieve these</font><font color="#CCCCCC"> sixteen</font>

282
00:11:02,490 --> 00:11:06,570
bytes<font color="#E5E5E5"> using this padding Oracle attack</font>

283
00:11:04,350 --> 00:11:07,110
and the timing side<font color="#E5E5E5"> channel we have made</font>

284
00:11:06,570 --> 00:11:08,790
the<font color="#E5E5E5"> semak's</font>

285
00:11:07,110 --> 00:11:10,500
<font color="#CCCCCC">Ramon several times with</font><font color="#E5E5E5"> each card and</font>

286
00:11:08,790 --> 00:11:13,709
in all<font color="#E5E5E5"> cases we have been able to</font>

287
00:11:10,500 --> 00:11:17,160
<font color="#E5E5E5">retrieve these 16 bytes which could be a</font>

288
00:11:13,709 --> 00:11:18,959
<font color="#CCCCCC">symmetry</font><font color="#E5E5E5"> key for instance</font><font color="#CCCCCC"> the complexity</font>

289
00:11:17,160 --> 00:11:21,149
of the attack is<font color="#E5E5E5"> almost optimal and</font>

290
00:11:18,959 --> 00:11:24,029
regarding the<font color="#E5E5E5"> duration of the attack</font>

291
00:11:21,149 --> 00:11:26,310
<font color="#E5E5E5">this it ranges from roughly</font><font color="#CCCCCC"> 3</font><font color="#E5E5E5"> minutes up</font>

292
00:11:24,029 --> 00:11:30,240
<font color="#E5E5E5">to 12</font><font color="#CCCCCC"> minutes and in fact this duration</font>

293
00:11:26,310 --> 00:11:32,189
depends<font color="#CCCCCC"> almost only</font><font color="#E5E5E5"> on the cada but not</font>

294
00:11:30,240 --> 00:11:34,290
on the specifics of<font color="#E5E5E5"> the attack we could</font>

295
00:11:32,190 --> 00:11:37,470
because the<font color="#E5E5E5"> some card send the response</font>

296
00:11:34,290 --> 00:11:39,089
to the<font color="#E5E5E5"> server faster than other</font><font color="#CCCCCC"> cards so</font>

297
00:11:37,470 --> 00:11:42,390
this shows that the padding Oracle

298
00:11:39,089 --> 00:11:43,920
<font color="#CCCCCC">attack is applicable to sp2 into</font><font color="#E5E5E5"> several</font>

299
00:11:42,390 --> 00:11:45,990
<font color="#CCCCCC">model</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Scout</font><font color="#E5E5E5"> that do implement the</font>

300
00:11:43,920 --> 00:11:48,510
protocol and<font color="#E5E5E5"> the question now is how</font>

301
00:11:45,990 --> 00:11:51,720
many<font color="#E5E5E5"> smart cards can be impacted in real</font>

302
00:11:48,510 --> 00:11:54,000
life so I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have the answer to</font><font color="#CCCCCC"> that</font>

303
00:11:51,720 --> 00:11:55,769
<font color="#E5E5E5">question</font><font color="#CCCCCC"> but at least one can propose a</font>

304
00:11:54,000 --> 00:11:59,100
realistic scenario<font color="#CCCCCC"> that an attacker can</font>

305
00:11:55,769 --> 00:12:00,810
apply in<font color="#E5E5E5"> real life so this scenario is</font>

306
00:11:59,100 --> 00:12:02,370
in fact the<font color="#E5E5E5"> standard the classical</font>

307
00:12:00,810 --> 00:12:05,130
scenario when one wants<font color="#CCCCCC"> to upload an</font>

308
00:12:02,370 --> 00:12:07,019
applet into its<font color="#E5E5E5"> sim card in order to be</font>

309
00:12:05,130 --> 00:12:09,060
able later on<font color="#E5E5E5"> to use some service such</font>

310
00:12:07,019 --> 00:12:11,790
as a<font color="#E5E5E5"> payment service or transposition</font>

311
00:12:09,060 --> 00:12:15,810
service through NFC with the<font color="#E5E5E5"> or his</font>

312
00:12:11,790 --> 00:12:17,699
<font color="#E5E5E5">smartphone so the applet carries a</font>

313
00:12:15,810 --> 00:12:19,680
<font color="#E5E5E5">symmetric key that will be used</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the</font>

314
00:12:17,699 --> 00:12:21,660
legitimate legitimate<font color="#E5E5E5"> owner of the</font>

315
00:12:19,680 --> 00:12:23,339
<font color="#CCCCCC">smartphone to authenticate and grant</font>

316
00:12:21,660 --> 00:12:25,740
access to<font color="#E5E5E5"> the service</font><font color="#CCCCCC"> and the purpose of</font>

317
00:12:23,339 --> 00:12:28,949
<font color="#E5E5E5">our attacker is to</font><font color="#CCCCCC"> get to retrieve this</font>

318
00:12:25,740 --> 00:12:30,990
key in order to impersonate<font color="#E5E5E5"> the user so</font>

319
00:12:28,949 --> 00:12:32,640
the first step of this<font color="#E5E5E5"> scenario is to</font>

320
00:12:30,990 --> 00:12:35,459
<font color="#E5E5E5">infect the smartphone with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> trillion</font>

321
00:12:32,640 --> 00:12:37,769
<font color="#E5E5E5">so this seems difficult to achieve but</font>

322
00:12:35,459 --> 00:12:40,920
<font color="#E5E5E5">last year</font><font color="#CCCCCC"> Google has detected in its</font>

323
00:12:37,769 --> 00:12:43,110
store<font color="#E5E5E5"> 700,000 applications that were</font>

324
00:12:40,920 --> 00:12:45,899
potentially<font color="#E5E5E5"> harmful and this</font><font color="#CCCCCC"> number</font>

325
00:12:43,110 --> 00:12:48,930
refers also to applications that<font color="#E5E5E5"> were</font>

326
00:12:45,899 --> 00:12:52,800
embedding malware or<font color="#CCCCCC"> Trojans</font><font color="#E5E5E5"> so this may</font>

327
00:12:48,930 --> 00:12:55,019
be<font color="#E5E5E5"> a suitable contamination vector once</font>

328
00:12:52,800 --> 00:12:56,969
the<font color="#CCCCCC"> fryin</font><font color="#E5E5E5"> is on the smartphone it can</font>

329
00:12:55,019 --> 00:12:58,680
get through<font color="#E5E5E5"> privilege escalation</font>

330
00:12:56,970 --> 00:13:00,449
access to<font color="#CCCCCC"> the memory space</font><font color="#E5E5E5"> of the</font>

331
00:12:58,680 --> 00:13:02,819
application<font color="#CCCCCC"> the</font><font color="#E5E5E5"> legitimate application</font>

332
00:13:00,449 --> 00:13:06,120
that relies the the included<font color="#CCCCCC"> command</font>

333
00:13:02,820 --> 00:13:08,699
between the server and the<font color="#CCCCCC"> SIM card then</font>

334
00:13:06,120 --> 00:13:11,190
to the added point the<font color="#E5E5E5"> drone can modify</font>

335
00:13:08,699 --> 00:13:13,620
different<font color="#E5E5E5"> commands and can detect when</font>

336
00:13:11,190 --> 00:13:15,660
the SIM card sends the<font color="#CCCCCC"> response to the</font>

337
00:13:13,620 --> 00:13:18,510
server<font color="#E5E5E5"> that is the</font><font color="#CCCCCC"> Train can apply the</font>

338
00:13:15,660 --> 00:13:20,760
<font color="#CCCCCC">Panamera</font><font color="#E5E5E5"> attack moreover since the</font>

339
00:13:18,510 --> 00:13:20,970
attacker needs to make several<font color="#E5E5E5"> trials in</font>

340
00:13:20,760 --> 00:13:23,220
order

341
00:13:20,970 --> 00:13:25,199
to get one bite<font color="#CCCCCC"> the train can repeatedly</font>

342
00:13:23,220 --> 00:13:29,220
trigger<font color="#E5E5E5"> the installation and the</font>

343
00:13:25,199 --> 00:13:31,050
installation<font color="#E5E5E5"> of the applet in order to</font>

344
00:13:29,220 --> 00:13:35,370
<font color="#E5E5E5">compel the server to repeatedly send</font><font color="#CCCCCC"> at</font>

345
00:13:31,050 --> 00:13:37,740
the same applied to the same<font color="#E5E5E5"> town so now</font>

346
00:13:35,370 --> 00:13:39,509
what<font color="#E5E5E5"> can be the possible mitigations so</font>

347
00:13:37,740 --> 00:13:41,699
the first mitigation obviously is to

348
00:13:39,509 --> 00:13:43,649
correct<font color="#E5E5E5"> the implementation I think that</font>

349
00:13:41,699 --> 00:13:45,269
it's not an easy<font color="#E5E5E5"> task to achieve and</font>

350
00:13:43,649 --> 00:13:47,610
<font color="#CCCCCC">moreover</font><font color="#E5E5E5"> it's not a mitigation that can</font>

351
00:13:45,269 --> 00:13:51,000
be used for<font color="#E5E5E5"> a cab</font><font color="#CCCCCC"> that are already</font>

352
00:13:47,610 --> 00:13:53,389
<font color="#CCCCCC">deployed</font><font color="#E5E5E5"> another possibility is to use</font>

353
00:13:51,000 --> 00:13:56,399
<font color="#E5E5E5">additional security mechanisms either</font>

354
00:13:53,389 --> 00:13:59,250
<font color="#CCCCCC">instead or in addition to a CPU but once</font>

355
00:13:56,399 --> 00:14:00,899
<font color="#CCCCCC">again this assumes that such mechanisms</font>

356
00:13:59,250 --> 00:14:04,500
be available on the smart<font color="#CCCCCC"> car</font><font color="#E5E5E5"> that are</font>

357
00:14:00,899 --> 00:14:06,060
<font color="#CCCCCC">already deployed</font><font color="#E5E5E5"> also one can</font><font color="#CCCCCC"> use a</font>

358
00:14:04,500 --> 00:14:08,250
<font color="#CCCCCC">specific a CPU to command which is</font>

359
00:14:06,060 --> 00:14:09,930
<font color="#E5E5E5">called put key and this command when</font>

360
00:14:08,250 --> 00:14:12,269
data is encrypted<font color="#E5E5E5"> with this command the</font>

361
00:14:09,930 --> 00:14:14,430
<font color="#CCCCCC">attacks encrypted in fat in fact</font><font color="#E5E5E5"> twice</font><font color="#CCCCCC"> a</font>

362
00:14:12,269 --> 00:14:16,439
first time with an extra channel key and

363
00:14:14,430 --> 00:14:17,910
the second<font color="#E5E5E5"> a second time with the</font>

364
00:14:16,439 --> 00:14:20,519
procedure<font color="#E5E5E5"> that I have described in this</font>

365
00:14:17,910 --> 00:14:22,740
<font color="#CCCCCC">world so if an attacker using this</font>

366
00:14:20,519 --> 00:14:24,889
command<font color="#E5E5E5"> to apply the attack the attacker</font>

367
00:14:22,740 --> 00:14:27,959
will succeed in breaking the outer

368
00:14:24,889 --> 00:14:30,480
encryption layer<font color="#E5E5E5"> but eventually</font><font color="#CCCCCC"> we'll</font>

369
00:14:27,959 --> 00:14:33,420
get data that<font color="#E5E5E5"> are encrypted with this</font>

370
00:14:30,480 --> 00:14:35,250
extra<font color="#E5E5E5"> channel so regarding the padding</font>

371
00:14:33,420 --> 00:14:36,779
<font color="#CCCCCC">regular tag this seems a should an</font>

372
00:14:35,250 --> 00:14:39,660
efficient way<font color="#CCCCCC"> to mitigate</font><font color="#E5E5E5"> the attack</font>

373
00:14:36,779 --> 00:14:41,759
<font color="#E5E5E5">nonetheless in the CPU to the encryption</font>

374
00:14:39,660 --> 00:14:45,149
<font color="#E5E5E5">schemes are deterministic</font><font color="#CCCCCC"> so in</font><font color="#E5E5E5"> fact</font>

375
00:14:41,759 --> 00:14:47,189
<font color="#CCCCCC">even if one uses this command key it's</font>

376
00:14:45,149 --> 00:14:48,959
possible to retrieve a lot type of

377
00:14:47,189 --> 00:14:51,540
cigarettes maybe a password or open code

378
00:14:48,959 --> 00:14:52,579
if the<font color="#E5E5E5"> attacker has access to an</font>

379
00:14:51,540 --> 00:14:57,120
encryption<font color="#CCCCCC"> Oracle</font>

380
00:14:52,579 --> 00:14:58,769
finally<font color="#E5E5E5"> what</font><font color="#CCCCCC"> another way to mitigate the</font>

381
00:14:57,120 --> 00:15:01,470
attack is to forbid<font color="#CCCCCC"> the server from</font>

382
00:14:58,769 --> 00:15:03,569
sending too many<font color="#E5E5E5"> times the same</font><font color="#CCCCCC"> secret</font>

383
00:15:01,470 --> 00:15:06,420
to the SIM card<font color="#E5E5E5"> since the attacker needs</font>

384
00:15:03,569 --> 00:15:08,309
to make<font color="#E5E5E5"> several trials to get to</font>

385
00:15:06,420 --> 00:15:12,719
retrieve one single byte this is an

386
00:15:08,309 --> 00:15:14,879
efficient<font color="#CCCCCC"> way to thwart</font><font color="#E5E5E5"> the attack so to</font>

387
00:15:12,720 --> 00:15:17,220
<font color="#E5E5E5">summary we</font><font color="#CCCCCC"> have shown that the burning</font>

388
00:15:14,879 --> 00:15:19,529
record attack against<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cpu is</font>

389
00:15:17,220 --> 00:15:21,209
possible<font color="#E5E5E5"> this is a possible for</font>

390
00:15:19,529 --> 00:15:23,160
turbulent reasons<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> one is</font>

391
00:15:21,209 --> 00:15:26,189
theoretical and lies on the way the

392
00:15:23,160 --> 00:15:28,439
protocol is<font color="#E5E5E5"> designed and more precisely</font>

393
00:15:26,189 --> 00:15:31,199
in the<font color="#E5E5E5"> encryption</font><font color="#CCCCCC"> max scheme and the</font>

394
00:15:28,439 --> 00:15:33,269
second reason<font color="#CCCCCC"> very</font><font color="#E5E5E5"> likely is related to</font>

395
00:15:31,199 --> 00:15:34,469
<font color="#E5E5E5">the way the protocol is implemented in</font>

396
00:15:33,269 --> 00:15:36,660
<font color="#E5E5E5">the smart card</font>

397
00:15:34,470 --> 00:15:38,129
of course<font color="#E5E5E5"> the role requirements must be</font>

398
00:15:36,660 --> 00:15:40,110
<font color="#E5E5E5">fulfilled for an attacker to be a</font>

399
00:15:38,129 --> 00:15:41,579
successful<font color="#E5E5E5"> and particular</font><font color="#CCCCCC"> such an</font>

400
00:15:40,110 --> 00:15:43,829
attacker must be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to discriminate</font>

401
00:15:41,579 --> 00:15:46,920
between the response<font color="#E5E5E5"> times sent by the</font>

402
00:15:43,829 --> 00:15:48,689
card in practice we have shown<font color="#E5E5E5"> that</font><font color="#CCCCCC"> in</font>

403
00:15:46,920 --> 00:15:50,910
an experimental<font color="#E5E5E5"> setting that different</font>

404
00:15:48,690 --> 00:15:54,149
models of smart card can<font color="#CCCCCC"> be attacked</font>

405
00:15:50,910 --> 00:15:55,620
<font color="#CCCCCC">with these with this attack and the</font>

406
00:15:54,149 --> 00:15:58,139
question is now<font color="#E5E5E5"> how many card can be</font>

407
00:15:55,620 --> 00:15:59,670
<font color="#E5E5E5">impacted in fin</font><font color="#CCCCCC"> real-life we have</font>

408
00:15:58,139 --> 00:16:01,769
<font color="#E5E5E5">informed the card</font><font color="#CCCCCC"> manufacturers that</font>

409
00:15:59,670 --> 00:16:03,209
<font color="#CCCCCC">have produced</font><font color="#E5E5E5"> the card we have tested</font>

410
00:16:01,769 --> 00:16:06,000
and also provide a form which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> in</font>

411
00:16:03,209 --> 00:16:08,849
<font color="#CCCCCC">charge of the protocol and</font><font color="#E5E5E5"> while this</font>

412
00:16:06,000 --> 00:16:10,709
paper was under submission<font color="#CCCCCC"> a CPU</font><font color="#E5E5E5"> has</font>

413
00:16:08,850 --> 00:16:13,230
been deprecated by our<font color="#E5E5E5"> platform and now</font>

414
00:16:10,709 --> 00:16:16,199
what is recommended is<font color="#E5E5E5"> to use the CPU</font>

415
00:16:13,230 --> 00:16:18,509
<font color="#CCCCCC">tree instead</font><font color="#E5E5E5"> and this concludes my talk</font>

416
00:16:16,199 --> 00:16:22,099
<font color="#CCCCCC">I thank you</font><font color="#E5E5E5"> and I'm willing to answer</font>

417
00:16:18,509 --> 00:16:22,100
any question if you want<font color="#E5E5E5"> thank you</font>

418
00:16:25,570 --> 00:16:38,960
Thank You<font color="#E5E5E5"> Olivia do you have question</font>

419
00:16:30,530 --> 00:16:41,209
yes did<font color="#E5E5E5"> they get</font><font color="#CCCCCC"> rid of the</font><font color="#E5E5E5"> Mack when I</font>

420
00:16:38,960 --> 00:16:43,160
encrypt an SCP<font color="#E5E5E5"> three yes in SPO three</font>

421
00:16:41,210 --> 00:16:47,120
the<font color="#CCCCCC"> scheme is</font><font color="#E5E5E5"> completely</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> it's</font>

422
00:16:43,160 --> 00:16:51,400
a Mac<font color="#E5E5E5"> it's a encrypt-then-mac</font><font color="#CCCCCC"> scheme and</font>

423
00:16:47,120 --> 00:16:51,400
more varied uses a yes and not<font color="#CCCCCC"> Triple S</font>

424
00:16:52,780 --> 00:17:02,480
other question be<font color="#E5E5E5"> one short</font><font color="#CCCCCC"> question the</font>

425
00:16:59,630 --> 00:17:05,270
the<font color="#CCCCCC"> attack</font><font color="#E5E5E5"> is existing since 2002</font><font color="#CCCCCC"> outer</font>

426
00:17:02,480 --> 00:17:07,640
<font color="#CCCCCC">UX how do you explain that</font><font color="#E5E5E5"> developers</font>

427
00:17:05,270 --> 00:17:10,069
have not developed<font color="#CCCCCC"> have not implemented</font>

428
00:17:07,640 --> 00:17:13,340
<font color="#CCCCCC">contours</font><font color="#E5E5E5"> against this padding Oracle</font>

429
00:17:10,069 --> 00:17:15,169
<font color="#E5E5E5">attack well I don't have exactly an</font>

430
00:17:13,339 --> 00:17:18,949
explanation<font color="#CCCCCC"> but I think that the</font><font color="#E5E5E5"> reason</font>

431
00:17:15,170 --> 00:17:21,650
<font color="#E5E5E5">why this attack has not been found in</font>

432
00:17:18,950 --> 00:17:23,660
this photo<font color="#CCCCCC"> vault cp2 is</font><font color="#E5E5E5"> because as far</font>

433
00:17:21,650 --> 00:17:26,000
<font color="#E5E5E5">as I know the protocol the specification</font>

434
00:17:23,660 --> 00:17:29,240
was presented publicly<font color="#CCCCCC"> maybe a few weeks</font>

435
00:17:26,000 --> 00:17:30,800
<font color="#CCCCCC">or few months</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> Sunday as</font><font color="#E5E5E5"> presented</font>

436
00:17:29,240 --> 00:17:34,520
is<font color="#CCCCCC"> the seminal paper on the padding</font>

437
00:17:30,800 --> 00:17:38,270
Oracle attack<font color="#CCCCCC"> and I think that this</font>

438
00:17:34,520 --> 00:17:40,580
shows that in<font color="#CCCCCC"> fact</font><font color="#E5E5E5"> all terrific schemes</font>

439
00:17:38,270 --> 00:17:42,320
<font color="#CCCCCC">should be</font><font color="#E5E5E5"> analyzed the new based on the</font>

440
00:17:40,580 --> 00:17:44,600
new findings<font color="#E5E5E5"> in</font><font color="#CCCCCC"> cryptography in security</font>

441
00:17:42,320 --> 00:17:48,260
another reason may be that<font color="#E5E5E5"> in fact</font><font color="#CCCCCC"> even</font>

442
00:17:44,600 --> 00:17:50,840
though a CPU<font color="#E5E5E5"> and other NCP protocols are</font>

443
00:17:48,260 --> 00:17:53,390
according<font color="#E5E5E5"> to me widely used in numerous</font>

444
00:17:50,840 --> 00:17:54,949
security<font color="#CCCCCC"> Munhall smart cards I think</font>

445
00:17:53,390 --> 00:17:57,260
<font color="#CCCCCC">that in</font><font color="#E5E5E5"> fact there</font><font color="#CCCCCC"> are pretty</font>

446
00:17:54,950 --> 00:18:00,650
confidential schemes and there are not

447
00:17:57,260 --> 00:18:02,840
they are<font color="#E5E5E5"> not publicly discussed nor</font>

448
00:18:00,650 --> 00:18:05,150
analyzed and this is this may also

449
00:18:02,840 --> 00:18:08,810
explain<font color="#CCCCCC"> why such attack</font><font color="#E5E5E5"> is possible</font>

450
00:18:05,150 --> 00:18:11,600
<font color="#CCCCCC">nowhere else but but this flow of a</font><font color="#E5E5E5"> CPU</font>

451
00:18:08,810 --> 00:18:14,810
<font color="#CCCCCC">which</font><font color="#E5E5E5"> was already</font><font color="#CCCCCC"> no no no so the</font><font color="#E5E5E5"> fact</font>

452
00:18:11,600 --> 00:18:17,090
that a padding Oracle was<font color="#CCCCCC"> possibly</font><font color="#E5E5E5"> I as</font>

453
00:18:14,810 --> 00:18:20,320
far<font color="#CCCCCC"> as I know it was not known or at</font>

454
00:18:17,090 --> 00:18:20,320
least was not publicly known

455
00:18:22,210 --> 00:18:29,700
thank you other question<font color="#E5E5E5"> No</font>

456
00:18:27,970 --> 00:18:37,229
we<font color="#E5E5E5"> thank the speaker</font><font color="#CCCCCC"> again</font>

457
00:18:29,700 --> 00:18:37,229
[Applause]

