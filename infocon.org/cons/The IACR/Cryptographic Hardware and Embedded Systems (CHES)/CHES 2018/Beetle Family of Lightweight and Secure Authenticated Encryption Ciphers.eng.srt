1
00:00:00,770 --> 00:00:05,130
you can move<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> second tool called</font>

2
00:00:03,300 --> 00:00:07,410
accession and title beetle family of

3
00:00:05,130 --> 00:00:10,920
<font color="#E5E5E5">lightweight and security</font><font color="#CCCCCC"> ticketed and</font>

4
00:00:07,410 --> 00:00:15,089
encryption ciphers<font color="#E5E5E5"> the paper is by a</font>

5
00:00:10,920 --> 00:00:20,039
<font color="#E5E5E5">week a club with both</font><font color="#CCCCCC"> T nil engine data</font>

6
00:00:15,089 --> 00:00:22,279
<font color="#E5E5E5">1 and E and can</font><font color="#CCCCCC"> gesture which is giving</font>

7
00:00:20,039 --> 00:00:22,279
the<font color="#E5E5E5"> tool</font>

8
00:00:27,779 --> 00:00:36,000
thanks for us<font color="#E5E5E5"> all for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> introduction</font>

9
00:00:29,340 --> 00:00:37,559
<font color="#E5E5E5">so I'm a week Chakraborty so I'm of each</font>

10
00:00:36,000 --> 00:00:39,809
<font color="#CCCCCC">Revati from entity secure platform</font>

11
00:00:37,559 --> 00:00:41,459
<font color="#E5E5E5">laboratories so today I'm going to</font>

12
00:00:39,809 --> 00:00:43,140
present the family of lightweight and

13
00:00:41,460 --> 00:00:45,329
secure authenticated encryption ciphers

14
00:00:43,140 --> 00:00:47,579
named as brittle and this work has<font color="#CCCCCC"> been</font>

15
00:00:45,329 --> 00:00:52,559
<font color="#E5E5E5">jointly done with engine data module and</font>

16
00:00:47,579 --> 00:00:54,270
<font color="#E5E5E5">II and carne asada so I have divided</font><font color="#CCCCCC"> my</font>

17
00:00:52,559 --> 00:00:55,949
presentation into<font color="#CCCCCC"> five parts in the</font>

18
00:00:54,270 --> 00:00:57,930
first part I will<font color="#E5E5E5"> briefly give the</font>

19
00:00:55,949 --> 00:01:00,000
prerequisites<font color="#E5E5E5"> for to understand our</font>

20
00:00:57,930 --> 00:01:01,680
contribution in the second part<font color="#E5E5E5"> I will</font>

21
00:01:00,000 --> 00:01:03,570
<font color="#E5E5E5">give some motivation behind our design</font>

22
00:01:01,680 --> 00:01:05,400
in the third part I will give a

23
00:01:03,570 --> 00:01:07,770
specification for brittle<font color="#E5E5E5"> in the fourth</font>

24
00:01:05,400 --> 00:01:09,119
part I will describe briefly about the

25
00:01:07,770 --> 00:01:11,189
<font color="#E5E5E5">hardware implementation results for</font>

26
00:01:09,119 --> 00:01:15,540
brittle and finally I will conclude<font color="#E5E5E5"> my</font>

27
00:01:11,189 --> 00:01:17,039
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> so middle is a authenticated</font>

28
00:01:15,540 --> 00:01:19,020
encryption<font color="#CCCCCC"> size family of authenticated</font>

29
00:01:17,040 --> 00:01:20,460
encryption cipher<font color="#E5E5E5"> so an authenticated</font>

30
00:01:19,020 --> 00:01:21,979
encryption<font color="#CCCCCC"> cipher is actually a</font>

31
00:01:20,460 --> 00:01:24,689
symmetric key based encryption scheme

32
00:01:21,979 --> 00:01:28,200
which has<font color="#CCCCCC"> two algorithms</font><font color="#E5E5E5"> encryption and</font>

33
00:01:24,689 --> 00:01:30,600
decryption<font color="#E5E5E5"> the encryption takes a secret</font>

34
00:01:28,200 --> 00:01:32,880
key a message unknowns and<font color="#E5E5E5"> an</font><font color="#CCCCCC"> Associated</font>

35
00:01:30,600 --> 00:01:34,679
data<font color="#E5E5E5"> and it outputs a tenth</font><font color="#CCCCCC"> ciphertext</font>

36
00:01:32,880 --> 00:01:37,020
<font color="#E5E5E5">so here</font><font color="#CCCCCC"> at at ciphertext means the</font>

37
00:01:34,680 --> 00:01:39,840
<font color="#E5E5E5">cipher</font><font color="#CCCCCC"> text on a tab here where</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> C</font>

38
00:01:37,020 --> 00:01:41,070
<font color="#CCCCCC">provides the privacy of</font><font color="#E5E5E5"> the data and T</font>

39
00:01:39,840 --> 00:01:43,170
provides the authenticity of the<font color="#E5E5E5"> data</font>

40
00:01:41,070 --> 00:01:45,389
<font color="#E5E5E5">and there is a corresponding decryption</font>

41
00:01:43,170 --> 00:01:47,340
function which which takes a secret key

42
00:01:45,390 --> 00:01:49,200
<font color="#E5E5E5">which takes a</font><font color="#CCCCCC"> tact cipher text takes a</font>

43
00:01:47,340 --> 00:01:50,640
non-stress and associated data<font color="#E5E5E5"> and</font>

44
00:01:49,200 --> 00:01:52,680
outputs<font color="#E5E5E5"> the message if the cipher text</font>

45
00:01:50,640 --> 00:01:57,390
matches the tag<font color="#CCCCCC"> and otherwise it will</font>

46
00:01:52,680 --> 00:01:59,549
reject so as we can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> different</font>

47
00:01:57,390 --> 00:02:03,180
<font color="#E5E5E5">from normal encryption and it uses two</font>

48
00:01:59,549 --> 00:02:05,430
additional types of data which is nonce

49
00:02:03,180 --> 00:02:07,530
which is an arbitrary<font color="#E5E5E5"> number which is</font>

50
00:02:05,430 --> 00:02:09,750
<font color="#E5E5E5">used only once for each encryption so</font>

51
00:02:07,530 --> 00:02:10,310
you can visualize<font color="#E5E5E5"> you can visualize it</font>

52
00:02:09,750 --> 00:02:12,319
as a

53
00:02:10,310 --> 00:02:14,450
<font color="#E5E5E5">as the initialization vector like for</font>

54
00:02:12,319 --> 00:02:16,069
example counters<font color="#E5E5E5"> and there is another</font>

55
00:02:14,450 --> 00:02:18,170
<font color="#E5E5E5">type of data called associated data</font>

56
00:02:16,069 --> 00:02:20,450
which is<font color="#E5E5E5"> actually the data about the</font>

57
00:02:18,170 --> 00:02:23,269
<font color="#CCCCCC">data</font><font color="#E5E5E5"> transmission</font><font color="#CCCCCC"> so you can think</font><font color="#E5E5E5"> eat</font>

58
00:02:20,450 --> 00:02:24,920
of as a header of the<font color="#E5E5E5"> message so for</font>

59
00:02:23,270 --> 00:02:26,540
<font color="#E5E5E5">example like I P address of the sender</font>

60
00:02:24,920 --> 00:02:30,920
<font color="#E5E5E5">IP address of the receiver or MAC</font>

61
00:02:26,540 --> 00:02:32,480
address for<font color="#E5E5E5"> some devices and now the</font>

62
00:02:30,920 --> 00:02:34,040
<font color="#E5E5E5">question</font><font color="#CCCCCC"> comes why authenticated</font>

63
00:02:32,480 --> 00:02:36,470
encryption<font color="#CCCCCC"> there are several</font>

64
00:02:34,040 --> 00:02:38,209
applications<font color="#E5E5E5"> where we where we</font><font color="#CCCCCC"> need both</font>

65
00:02:36,470 --> 00:02:41,150
<font color="#E5E5E5">confidentiality and privacy over data</font>

66
00:02:38,209 --> 00:02:43,489
like<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example some</font><font color="#E5E5E5"> other doctor</font>

67
00:02:41,150 --> 00:02:45,680
wishes to send<font color="#E5E5E5"> a medical some medical</font>

68
00:02:43,489 --> 00:02:47,150
information about<font color="#E5E5E5"> Alice then Alice may</font>

69
00:02:45,680 --> 00:02:49,580
not want to disclose our medical records

70
00:02:47,150 --> 00:02:51,799
<font color="#CCCCCC">and in that case we need privacy</font><font color="#E5E5E5"> over</font>

71
00:02:49,580 --> 00:02:53,900
Alice's records and you also want

72
00:02:51,799 --> 00:02:55,130
integrity to ensure<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> person who</font>

73
00:02:53,900 --> 00:02:57,739
is sending the information<font color="#E5E5E5"> to the</font>

74
00:02:55,130 --> 00:02:59,660
database<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> the doctor and the</font>

75
00:02:57,739 --> 00:03:02,120
<font color="#E5E5E5">information has not been modified in</font>

76
00:02:59,660 --> 00:03:04,190
transit<font color="#CCCCCC"> so for this</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> applications</font>

77
00:03:02,120 --> 00:03:08,239
<font color="#E5E5E5">authenticated encryption is the most</font>

78
00:03:04,190 --> 00:03:10,250
convenient<font color="#E5E5E5"> one for the security so for</font>

79
00:03:08,239 --> 00:03:12,739
privacy<font color="#E5E5E5"> we need in CPA security waste</font>

80
00:03:10,250 --> 00:03:15,200
which is<font color="#E5E5E5"> very standard for integrity</font><font color="#CCCCCC"> we</font>

81
00:03:12,739 --> 00:03:16,310
need in<font color="#E5E5E5"> C txt which stands</font><font color="#CCCCCC"> for integrity</font>

82
00:03:15,200 --> 00:03:19,760
<font color="#E5E5E5">of ciphertext</font>

83
00:03:16,310 --> 00:03:22,220
so here the<font color="#CCCCCC"> cipher text is integrated</font>

84
00:03:19,760 --> 00:03:25,489
with<font color="#E5E5E5"> the tag so that's why the term in C</font>

85
00:03:22,220 --> 00:03:27,470
txt<font color="#E5E5E5"> and overall we need in CPA security</font>

86
00:03:25,489 --> 00:03:31,519
<font color="#E5E5E5">and in</font><font color="#CCCCCC"> cipher in CTX T security both</font>

87
00:03:27,470 --> 00:03:36,319
from the same<font color="#E5E5E5"> construction so these are</font>

88
00:03:31,519 --> 00:03:37,910
unified a security model<font color="#E5E5E5"> so and in</font>

89
00:03:36,319 --> 00:03:40,429
<font color="#E5E5E5">addition to the standard Oracle's we</font>

90
00:03:37,910 --> 00:03:41,930
also give the adversary some additional

91
00:03:40,430 --> 00:03:44,269
<font color="#CCCCCC">oracle called a public random</font>

92
00:03:41,930 --> 00:03:46,040
<font color="#E5E5E5">permutation</font><font color="#CCCCCC"> Oracle and this is called</font>

93
00:03:44,269 --> 00:03:47,810
<font color="#E5E5E5">random permutation model unified a</font>

94
00:03:46,040 --> 00:03:50,209
security under<font color="#E5E5E5"> and of permutation model</font>

95
00:03:47,810 --> 00:03:54,200
so here we<font color="#CCCCCC"> assume that</font><font color="#E5E5E5"> the adversary</font>

96
00:03:50,209 --> 00:03:55,850
<font color="#CCCCCC">here unseen time</font><font color="#E5E5E5"> P and here M xqv</font>

97
00:03:54,200 --> 00:03:57,858
encryption queries<font color="#E5E5E5"> with total number</font><font color="#CCCCCC"> of</font>

98
00:03:55,850 --> 00:04:01,069
Sigma encryption blocks<font color="#CCCCCC"> the encryption</font>

99
00:03:57,859 --> 00:04:03,980
<font color="#E5E5E5">Oracle it makes QD forging attempts or</font>

100
00:04:01,069 --> 00:04:05,780
with Sigma D<font color="#E5E5E5"> number of force blocks to</font>

101
00:04:03,980 --> 00:04:07,459
the decryption<font color="#E5E5E5"> Oracle and in the Edition</font>

102
00:04:05,780 --> 00:04:09,829
it gets access<font color="#CCCCCC"> to on public random</font>

103
00:04:07,459 --> 00:04:13,310
permutation and it queries to a for F

104
00:04:09,829 --> 00:04:15,769
inverse<font color="#E5E5E5"> and number of queries we assume</font>

105
00:04:13,310 --> 00:04:19,190
<font color="#CCCCCC">is</font><font color="#E5E5E5"> bounded by</font><font color="#CCCCCC"> QF</font><font color="#E5E5E5"> and simply call this</font>

106
00:04:15,769 --> 00:04:20,930
Oracle<font color="#E5E5E5"> as</font><font color="#CCCCCC"> f plus minus now to calculate</font>

107
00:04:19,190 --> 00:04:22,380
<font color="#CCCCCC">the authenticated</font><font color="#E5E5E5"> encryption we assume</font>

108
00:04:20,930 --> 00:04:24,420
<font color="#E5E5E5">that the in the real</font>

109
00:04:22,380 --> 00:04:26,159
the adversary gets<font color="#CCCCCC"> f+</font><font color="#E5E5E5"> - Oracle</font>

110
00:04:24,420 --> 00:04:28,890
<font color="#CCCCCC">encryption Oracle and decryption Oracle</font>

111
00:04:26,160 --> 00:04:30,420
<font color="#E5E5E5">and in the ideal world it gets</font><font color="#CCCCCC"> f+ - one</font>

112
00:04:28,890 --> 00:04:32,550
<font color="#CCCCCC">oracle it gets random</font><font color="#E5E5E5"> Oracle which</font>

113
00:04:30,420 --> 00:04:34,110
always returns a random<font color="#E5E5E5"> string and a</font>

114
00:04:32,550 --> 00:04:36,780
rejection<font color="#CCCCCC"> Oracle</font><font color="#E5E5E5"> who is which always</font>

115
00:04:34,110 --> 00:04:39,000
<font color="#E5E5E5">rejects the query</font><font color="#CCCCCC"> and when we calculate</font>

116
00:04:36,780 --> 00:04:42,450
<font color="#CCCCCC">the advantage so</font><font color="#E5E5E5"> the expression is</font>

117
00:04:39,000 --> 00:04:45,570
parametrized by<font color="#CCCCCC"> QA q fq d + Sigma</font><font color="#E5E5E5"> Sigma</font>

118
00:04:42,450 --> 00:04:47,130
T and time T and<font color="#E5E5E5"> it is taken over it is</font>

119
00:04:45,570 --> 00:04:50,730
taken<font color="#E5E5E5"> as</font><font color="#CCCCCC"> the maximum over</font><font color="#E5E5E5"> the advantage</font>

120
00:04:47,130 --> 00:04:52,950
values of all<font color="#CCCCCC"> that versus now I'm coming</font>

121
00:04:50,730 --> 00:04:56,580
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> motivation behind our design so</font>

122
00:04:52,950 --> 00:04:59,640
in the<font color="#E5E5E5"> past few</font><font color="#CCCCCC"> years</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> attempts</font>

123
00:04:56,580 --> 00:05:00,659
have<font color="#CCCCCC"> been done to make some to get some</font>

124
00:04:59,640 --> 00:05:04,380
standardized authenticated encryption

125
00:05:00,660 --> 00:05:05,850
ciphers<font color="#E5E5E5"> and nowadays</font><font color="#CCCCCC"> the applications</font>

126
00:05:04,380 --> 00:05:07,170
are becoming<font color="#E5E5E5"> more lightweight that they</font>

127
00:05:05,850 --> 00:05:09,120
need more<font color="#CCCCCC"> light they</font><font color="#E5E5E5"> are using more</font>

128
00:05:07,170 --> 00:05:10,920
<font color="#CCCCCC">lightweight devices</font><font color="#E5E5E5"> so there is a huge</font>

129
00:05:09,120 --> 00:05:12,870
requirement<font color="#E5E5E5"> for some lightweight</font>

130
00:05:10,920 --> 00:05:15,540
authenticated encryption schemes so

131
00:05:12,870 --> 00:05:18,030
recently<font color="#E5E5E5"> in each test</font><font color="#CCCCCC"> were proposed the</font>

132
00:05:15,540 --> 00:05:20,580
<font color="#E5E5E5">lightweight cryptographic competition</font>

133
00:05:18,030 --> 00:05:23,369
<font color="#E5E5E5">and they're trying to get some standard</font>

134
00:05:20,580 --> 00:05:25,140
lightweight designs<font color="#E5E5E5"> which is lightweight</font>

135
00:05:23,370 --> 00:05:27,210
as<font color="#CCCCCC"> well as highly secure in and in</font>

136
00:05:25,140 --> 00:05:29,280
addition there they also need some other

137
00:05:27,210 --> 00:05:31,530
properties so<font color="#CCCCCC"> we have taken up the</font>

138
00:05:29,280 --> 00:05:33,419
challenge and<font color="#E5E5E5"> we wanted</font><font color="#CCCCCC"> to construct</font>

139
00:05:31,530 --> 00:05:35,159
authenticated encryption mode<font color="#E5E5E5"> which</font>

140
00:05:33,420 --> 00:05:37,530
should be<font color="#CCCCCC"> very light</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> should</font>

141
00:05:35,160 --> 00:05:39,060
provide sufficient<font color="#CCCCCC"> security level and it</font>

142
00:05:37,530 --> 00:05:41,690
should have a<font color="#E5E5E5"> better area security</font>

143
00:05:39,060 --> 00:05:45,050
trade-off among all the existing<font color="#E5E5E5"> designs</font>

144
00:05:41,690 --> 00:05:47,190
now there are several<font color="#E5E5E5"> ways of designing</font>

145
00:05:45,050 --> 00:05:48,810
authenticated encryption modes one one

146
00:05:47,190 --> 00:05:50,940
can be block cipher based can be stream

147
00:05:48,810 --> 00:05:52,800
cipher based or can be<font color="#E5E5E5"> permutation based</font>

148
00:05:50,940 --> 00:05:54,930
so permutation based mode has been

149
00:05:52,800 --> 00:05:59,160
<font color="#E5E5E5">evolved with the designing of the spawns</font>

150
00:05:54,930 --> 00:06:00,750
mode and<font color="#E5E5E5"> and we thought the base</font><font color="#CCCCCC"> chests</font>

151
00:05:59,160 --> 00:06:03,090
should<font color="#E5E5E5"> be sponge based constructions for</font>

152
00:06:00,750 --> 00:06:04,560
<font color="#E5E5E5">the best mode because it we believe it's</font>

153
00:06:03,090 --> 00:06:06,570
all in one<font color="#E5E5E5"> construction so not only</font>

154
00:06:04,560 --> 00:06:09,030
<font color="#E5E5E5">authenticated encryption we can also get</font>

155
00:06:06,570 --> 00:06:12,570
<font color="#E5E5E5">hashing hashing mode and in any</font><font color="#CCCCCC"> Edition</font>

156
00:06:09,030 --> 00:06:14,250
it only<font color="#E5E5E5"> uses the permutation</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> it it</font>

157
00:06:12,570 --> 00:06:15,840
<font color="#CCCCCC">only use a storage</font><font color="#E5E5E5"> for storing the</font>

158
00:06:14,250 --> 00:06:18,600
permutation<font color="#CCCCCC"> state</font><font color="#E5E5E5"> and it does not have</font>

159
00:06:15,840 --> 00:06:21,239
any additional storage so here we have

160
00:06:18,600 --> 00:06:23,430
<font color="#CCCCCC">taken up we have</font><font color="#E5E5E5"> chosen a sponge based a</font>

161
00:06:21,240 --> 00:06:26,340
mode which is a sequential nonce based a

162
00:06:23,430 --> 00:06:28,560
you would it<font color="#E5E5E5"> uses a BB Beach State Park</font>

163
00:06:26,340 --> 00:06:30,900
<font color="#E5E5E5">Edition and we divide the permutation</font>

164
00:06:28,560 --> 00:06:33,150
<font color="#E5E5E5">into two state into two parts the first</font>

165
00:06:30,900 --> 00:06:35,010
<font color="#E5E5E5">our part is called first our bit part is</font>

166
00:06:33,150 --> 00:06:35,479
correlate<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the second C will last</font>

167
00:06:35,010 --> 00:06:37,190
<font color="#CCCCCC">seaweed</font>

168
00:06:35,480 --> 00:06:40,070
what is called the capacity where<font color="#CCCCCC"> B</font>

169
00:06:37,190 --> 00:06:42,290
<font color="#E5E5E5">equal to R plus C now when the data so</font>

170
00:06:40,070 --> 00:06:44,240
this<font color="#E5E5E5"> mode actually processes the</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> so</font>

171
00:06:42,290 --> 00:06:45,740
<font color="#E5E5E5">the first</font><font color="#CCCCCC"> era beat part and it</font><font color="#E5E5E5"> is a</font>

172
00:06:44,240 --> 00:06:47,120
feedback<font color="#E5E5E5"> based mode so the data is</font>

173
00:06:45,740 --> 00:06:48,740
<font color="#E5E5E5">processed through the first era beat</font>

174
00:06:47,120 --> 00:06:51,230
part and it is<font color="#CCCCCC"> feed back to</font><font color="#E5E5E5"> the next</font>

175
00:06:48,740 --> 00:06:53,030
<font color="#CCCCCC">permutation</font><font color="#E5E5E5"> call and the last CB see</font>

176
00:06:51,230 --> 00:06:55,700
which part is<font color="#E5E5E5"> directly feed back to the</font>

177
00:06:53,030 --> 00:06:58,880
<font color="#E5E5E5">next permutation call so these are</font>

178
00:06:55,700 --> 00:07:00,740
picture of the first spawns mode<font color="#E5E5E5"> so it</font>

179
00:06:58,880 --> 00:07:02,750
has been introduced as a hash mode with

180
00:07:00,740 --> 00:07:05,870
ketchup<font color="#E5E5E5"> hash function which is a shuffle</font>

181
00:07:02,750 --> 00:07:09,170
<font color="#CCCCCC">winner</font><font color="#E5E5E5"> and it has</font><font color="#CCCCCC"> or in later it has</font>

182
00:07:05,870 --> 00:07:11,360
been<font color="#E5E5E5"> accepted in Europe 2013 so we can</font>

183
00:07:09,170 --> 00:07:13,310
see<font color="#E5E5E5"> that a white sponge mode because it</font>

184
00:07:11,360 --> 00:07:14,960
s<font color="#CCCCCC"> just like spawns it has two part on</font>

185
00:07:13,310 --> 00:07:18,170
his<font color="#E5E5E5"> absorbing part and the squeezing</font>

186
00:07:14,960 --> 00:07:20,479
phase so in the absorbing phase<font color="#E5E5E5"> it just</font>

187
00:07:18,170 --> 00:07:22,490
<font color="#E5E5E5">observed the message message blocks</font><font color="#CCCCCC"> just</font>

188
00:07:20,480 --> 00:07:24,200
<font color="#E5E5E5">the sponge absorbs the water absorbs</font>

189
00:07:22,490 --> 00:07:26,660
water so<font color="#E5E5E5"> it's it</font><font color="#CCCCCC"> just absorbs Mitchell's</font>

190
00:07:24,200 --> 00:07:30,469
message blocks and the squeezing part<font color="#E5E5E5"> it</font>

191
00:07:26,660 --> 00:07:33,680
squeezes the public digest as digest so

192
00:07:30,470 --> 00:07:35,300
and later<font color="#E5E5E5"> the designers of</font><font color="#CCCCCC"> k-chat they</font>

193
00:07:33,680 --> 00:07:37,820
have<font color="#CCCCCC"> also</font><font color="#E5E5E5"> designed one sponge based a</font>

194
00:07:35,300 --> 00:07:39,740
scheme we just<font color="#E5E5E5"> called</font><font color="#CCCCCC"> sponge a and it</font>

195
00:07:37,820 --> 00:07:42,230
works in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> something called duplex mode</font>

196
00:07:39,740 --> 00:07:44,660
now what is duplex mode<font color="#E5E5E5"> so in the in</font>

197
00:07:42,230 --> 00:07:46,310
ketchup<font color="#E5E5E5"> we are processing the data first</font>

198
00:07:44,660 --> 00:07:49,250
and<font color="#E5E5E5"> then we are releasing the hash for</font>

199
00:07:46,310 --> 00:07:50,930
the digest but<font color="#E5E5E5"> here we will process one</font>

200
00:07:49,250 --> 00:07:53,540
day develop and release squeeze<font color="#E5E5E5"> one</font>

201
00:07:50,930 --> 00:07:56,650
output<font color="#E5E5E5"> block then next data block next</font>

202
00:07:53,540 --> 00:08:00,530
output<font color="#E5E5E5"> book and so on so it works in a</font>

203
00:07:56,650 --> 00:08:02,270
duplexing manner<font color="#E5E5E5"> and and and the</font>

204
00:08:00,530 --> 00:08:04,400
security<font color="#E5E5E5"> for spawns may stay has been</font>

205
00:08:02,270 --> 00:08:09,590
proven to be<font color="#CCCCCC"> it has</font><font color="#E5E5E5"> been proven to have</font>

206
00:08:04,400 --> 00:08:12,590
<font color="#E5E5E5">C by</font><font color="#CCCCCC"> two-bit</font><font color="#E5E5E5"> any security now later</font>

207
00:08:09,590 --> 00:08:13,940
<font color="#E5E5E5">jovanovich at all they have taken up</font>

208
00:08:12,590 --> 00:08:15,950
this<font color="#E5E5E5"> problem and they</font><font color="#CCCCCC"> have tried to</font>

209
00:08:13,940 --> 00:08:18,710
<font color="#E5E5E5">increase</font><font color="#CCCCCC"> the security level</font><font color="#E5E5E5"> of minimum</font>

210
00:08:15,950 --> 00:08:20,570
<font color="#CCCCCC">of B by 2 comma C with a security for</font>

211
00:08:18,710 --> 00:08:23,150
this duplex<font color="#E5E5E5"> sponge and they achieved it</font>

212
00:08:20,570 --> 00:08:25,219
but they have some inconvenient

213
00:08:23,150 --> 00:08:27,409
assumption that the number of decryption

214
00:08:25,220 --> 00:08:30,590
blocks is bounded by<font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> 1st C</font><font color="#E5E5E5"> by 2</font>

215
00:08:27,410 --> 00:08:34,120
which we found it's<font color="#CCCCCC"> very impractical</font>

216
00:08:30,590 --> 00:08:37,220
because<font color="#E5E5E5"> normally</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> always give the</font>

217
00:08:34,120 --> 00:08:39,370
adversary to<font color="#CCCCCC"> make a</font><font color="#E5E5E5"> full square forging</font>

218
00:08:37,220 --> 00:08:41,720
<font color="#CCCCCC">attempts as much as possible so</font>

219
00:08:39,370 --> 00:08:44,450
<font color="#CCCCCC">essentially it has similar</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> with</font>

220
00:08:41,720 --> 00:08:46,580
security<font color="#E5E5E5"> and now we have taken up this</font>

221
00:08:44,450 --> 00:08:47,600
challenge<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> and actually the main</font>

222
00:08:46,580 --> 00:08:49,370
difficulty of<font color="#E5E5E5"> this</font>

223
00:08:47,600 --> 00:08:50,930
what is that<font color="#CCCCCC"> ciphertext is directly</font>

224
00:08:49,370 --> 00:08:53,209
injected as a feedback<font color="#CCCCCC"> to the next</font>

225
00:08:50,930 --> 00:08:56,060
permutation call so the adversary<font color="#CCCCCC"> can</font>

226
00:08:53,209 --> 00:08:57,410
easily control<font color="#CCCCCC"> the feedback to the next</font>

227
00:08:56,060 --> 00:08:59,000
<font color="#E5E5E5">permutation by controlling the</font>

228
00:08:57,410 --> 00:09:01,310
ciphertext<font color="#E5E5E5"> blocks during</font><font color="#CCCCCC"> the decryption</font>

229
00:08:59,000 --> 00:09:03,199
queries so and this this property

230
00:09:01,310 --> 00:09:05,449
actually actually resists the designers

231
00:09:03,199 --> 00:09:08,540
<font color="#CCCCCC">to prove to have a flu</font><font color="#E5E5E5"> more than see</font><font color="#CCCCCC"> y2</font>

232
00:09:05,449 --> 00:09:09,680
which<font color="#CCCCCC"> security</font><font color="#E5E5E5"> so now we have we thought</font>

233
00:09:08,540 --> 00:09:11,509
that can we stop

234
00:09:09,680 --> 00:09:13,579
<font color="#E5E5E5">can we stop that</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> increase the</font>

235
00:09:11,509 --> 00:09:15,199
security<font color="#CCCCCC"> level by adding</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> simple</font>

236
00:09:13,579 --> 00:09:17,899
tweaks in the design which<font color="#E5E5E5"> does not have</font>

237
00:09:15,199 --> 00:09:21,459
much overhead<font color="#E5E5E5"> so the answer is yes so</font>

238
00:09:17,899 --> 00:09:25,009
<font color="#E5E5E5">the answer is</font><font color="#CCCCCC"> coming in the next section</font>

239
00:09:21,459 --> 00:09:28,899
this<font color="#E5E5E5"> is the design</font><font color="#CCCCCC"> of brittle this is</font>

240
00:09:25,009 --> 00:09:32,509
some<font color="#E5E5E5"> information</font><font color="#CCCCCC"> about so normally in</font>

241
00:09:28,899 --> 00:09:34,880
tradition we for<font color="#CCCCCC"> us to</font><font color="#E5E5E5"> design a feedback</font>

242
00:09:32,509 --> 00:09:36,290
based a scheme we use message feedback

243
00:09:34,880 --> 00:09:39,199
or ciphertext feedback or output

244
00:09:36,290 --> 00:09:41,149
feedback but here we we<font color="#E5E5E5"> observe that if</font>

245
00:09:39,199 --> 00:09:43,609
we use a combined feedback<font color="#E5E5E5"> then we can</font>

246
00:09:41,149 --> 00:09:46,579
up the security<font color="#E5E5E5"> level so what</font><font color="#CCCCCC"> combine</font>

247
00:09:43,610 --> 00:09:48,110
feedback is like in message ciphertext

248
00:09:46,579 --> 00:09:49,790
<font color="#CCCCCC">or output feedback</font><font color="#E5E5E5"> the message block a</font>

249
00:09:48,110 --> 00:09:51,980
ciphertext<font color="#CCCCCC"> block or</font><font color="#E5E5E5"> the output block</font>

250
00:09:49,790 --> 00:09:54,230
respectively<font color="#E5E5E5"> they can compute the nest</font>

251
00:09:51,980 --> 00:09:56,720
feedback<font color="#CCCCCC"> but in in combine feedback</font><font color="#E5E5E5"> we</font>

252
00:09:54,230 --> 00:09:59,660
need at least<font color="#E5E5E5"> two of them so they cannot</font>

253
00:09:56,720 --> 00:10:01,459
compute the feedback individually<font color="#CCCCCC"> we</font>

254
00:09:59,660 --> 00:10:04,310
need at least two<font color="#E5E5E5"> of them and this</font>

255
00:10:01,459 --> 00:10:06,500
actually resists the adversary to

256
00:10:04,310 --> 00:10:07,969
<font color="#E5E5E5">control the</font><font color="#CCCCCC"> X I the</font><font color="#E5E5E5"> next</font><font color="#CCCCCC"> feedback</font><font color="#E5E5E5"> by</font>

257
00:10:06,500 --> 00:10:10,579
<font color="#E5E5E5">encryption or decryption</font><font color="#CCCCCC"> quinn's</font>

258
00:10:07,970 --> 00:10:14,209
so this concept has been introduced in

259
00:10:10,579 --> 00:10:16,089
<font color="#E5E5E5">Co</font><font color="#CCCCCC"> every last</font><font color="#E5E5E5"> year in chess and this is</font>

260
00:10:14,209 --> 00:10:18,138
the picture<font color="#E5E5E5"> so</font><font color="#CCCCCC"> these message feedback</font>

261
00:10:16,089 --> 00:10:20,389
ciphertext feedback and output<font color="#CCCCCC"> feedback</font>

262
00:10:18,139 --> 00:10:22,790
<font color="#E5E5E5">and this is the combined feedback where</font>

263
00:10:20,389 --> 00:10:25,310
we generate<font color="#E5E5E5"> the next feedback by using a</font>

264
00:10:22,790 --> 00:10:26,779
G matrix<font color="#E5E5E5"> and essentially we generate the</font>

265
00:10:25,310 --> 00:10:29,779
cipher text<font color="#E5E5E5"> by</font><font color="#CCCCCC"> using the identity matrix</font>

266
00:10:26,779 --> 00:10:31,430
<font color="#CCCCCC">that</font><font color="#E5E5E5"> means the</font><font color="#CCCCCC"> output form from R is</font>

267
00:10:29,779 --> 00:10:33,949
multiplied with<font color="#E5E5E5"> identity matrix and</font>

268
00:10:31,430 --> 00:10:35,719
added<font color="#E5E5E5"> with M</font><font color="#CCCCCC"> to generate C and output</font>

269
00:10:33,949 --> 00:10:38,479
from<font color="#E5E5E5"> our is multiplied with</font><font color="#CCCCCC"> G matrix</font><font color="#E5E5E5"> and</font>

270
00:10:35,720 --> 00:10:40,610
added with<font color="#CCCCCC"> M to generate X I so this</font><font color="#E5E5E5"> G</font>

271
00:10:38,480 --> 00:10:42,199
naught<font color="#E5E5E5"> is not equal to I so</font><font color="#CCCCCC"> this this</font>

272
00:10:40,610 --> 00:10:44,480
property<font color="#CCCCCC"> makes it a</font><font color="#E5E5E5"> combine feedback</font>

273
00:10:42,199 --> 00:10:49,910
mode so if G<font color="#CCCCCC"> is equal</font><font color="#E5E5E5"> to Y then it will</font>

274
00:10:44,480 --> 00:10:51,560
become<font color="#E5E5E5"> cipher text feedback mode now now</font>

275
00:10:49,910 --> 00:10:52,850
<font color="#E5E5E5">bit will use a combined feedback in the</font>

276
00:10:51,560 --> 00:10:55,130
first<font color="#CCCCCC"> orbit</font><font color="#E5E5E5"> because the data is</font>

277
00:10:52,850 --> 00:10:57,050
<font color="#E5E5E5">processed to the first orbit and it</font>

278
00:10:55,130 --> 00:11:00,079
needs it<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to store only a be</font><font color="#CCCCCC"> beach</font>

279
00:10:57,050 --> 00:11:01,130
<font color="#CCCCCC">state for storing the permutation so and</font>

280
00:11:00,079 --> 00:11:02,420
then each

281
00:11:01,130 --> 00:11:04,670
- an output is processed with<font color="#CCCCCC"> the</font>

282
00:11:02,420 --> 00:11:07,010
<font color="#E5E5E5">message block using a combined feedback</font>

283
00:11:04,670 --> 00:11:08,780
<font color="#CCCCCC">row</font><font color="#E5E5E5"> and here this is</font><font color="#CCCCCC"> the combined</font>

284
00:11:07,010 --> 00:11:12,080
<font color="#CCCCCC">feedback X is</font><font color="#E5E5E5"> the next feedback see the</font>

285
00:11:08,780 --> 00:11:15,350
<font color="#E5E5E5">ciphertext</font><font color="#CCCCCC"> 0 is a combiner and</font><font color="#E5E5E5"> here X is</font>

286
00:11:12,080 --> 00:11:16,790
influenced<font color="#E5E5E5"> by both Y</font><font color="#CCCCCC"> and M</font><font color="#E5E5E5"> and it has</font>

287
00:11:15,350 --> 00:11:20,240
high security bound due to<font color="#CCCCCC"> this feedback</font>

288
00:11:16,790 --> 00:11:22,310
function and it<font color="#E5E5E5"> is hard to</font><font color="#CCCCCC"> forge now</font>

289
00:11:20,240 --> 00:11:24,050
this is the<font color="#CCCCCC"> picture of</font><font color="#E5E5E5"> brittle so here</font>

290
00:11:22,310 --> 00:11:25,910
the nonce<font color="#E5E5E5"> and the key is injected to</font><font color="#CCCCCC"> the</font>

291
00:11:24,050 --> 00:11:27,500
permutation state and then<font color="#E5E5E5"> the</font>

292
00:11:25,910 --> 00:11:29,900
<font color="#E5E5E5">Associated data is processed using these</font>

293
00:11:27,500 --> 00:11:31,760
<font color="#E5E5E5">comp</font><font color="#CCCCCC"> - and it generates intermediate</font>

294
00:11:29,900 --> 00:11:33,530
value and this intermediate<font color="#E5E5E5"> value is</font>

295
00:11:31,760 --> 00:11:35,660
again processed with<font color="#E5E5E5"> the message blocks</font>

296
00:11:33,530 --> 00:11:37,640
and permutation outputs with the

297
00:11:35,660 --> 00:11:39,709
combiner to generate<font color="#CCCCCC"> ciphertext with the</font>

298
00:11:37,640 --> 00:11:42,500
identity<font color="#E5E5E5"> matrix and the next feedback</font>

299
00:11:39,710 --> 00:11:44,780
with the<font color="#E5E5E5"> G matrix</font><font color="#CCCCCC"> and finally it outputs</font>

300
00:11:42,500 --> 00:11:47,750
<font color="#CCCCCC">a tag</font><font color="#E5E5E5"> so it's a very simple design</font><font color="#CCCCCC"> and</font>

301
00:11:44,780 --> 00:11:50,480
we use some constant value here and here

302
00:11:47,750 --> 00:11:53,540
to make<font color="#CCCCCC"> a domain separation</font><font color="#E5E5E5"> so and</font>

303
00:11:50,480 --> 00:11:55,220
constant<font color="#CCCCCC"> Ami's is 1 if it's a full block</font>

304
00:11:53,540 --> 00:12:00,140
the last block is a full block and it is

305
00:11:55,220 --> 00:12:01,370
<font color="#CCCCCC">- if the last block is not full so these</font>

306
00:12:00,140 --> 00:12:03,980
are choice of the combiner

307
00:12:01,370 --> 00:12:08,660
so here<font color="#CCCCCC"> X</font><font color="#E5E5E5"> X and C is generated by</font><font color="#CCCCCC"> no</font>

308
00:12:03,980 --> 00:12:10,460
into<font color="#E5E5E5"> y you know of Y and M so so here X</font>

309
00:12:08,660 --> 00:12:12,829
<font color="#E5E5E5">is actually no one of ym which is</font>

310
00:12:10,460 --> 00:12:16,310
actually G into y plus m and<font color="#E5E5E5"> as C is</font>

311
00:12:12,830 --> 00:12:18,170
just<font color="#E5E5E5"> X or C into I into y plus</font><font color="#CCCCCC"> M and we</font>

312
00:12:16,310 --> 00:12:20,599
need both<font color="#CCCCCC"> g and</font><font color="#E5E5E5"> g</font><font color="#CCCCCC"> plus i</font><font color="#E5E5E5"> as a full rank</font>

313
00:12:18,170 --> 00:12:23,420
matrix not equal to<font color="#CCCCCC"> Y because in the</font>

314
00:12:20,600 --> 00:12:26,210
decryption<font color="#E5E5E5"> we need to compute X using</font>

315
00:12:23,420 --> 00:12:29,060
see by using<font color="#E5E5E5"> G</font><font color="#CCCCCC"> plus I</font><font color="#E5E5E5"> matrix so we</font><font color="#CCCCCC"> need</font>

316
00:12:26,210 --> 00:12:31,550
<font color="#E5E5E5">both GG + G + I as full</font><font color="#CCCCCC"> length and not</font>

317
00:12:29,060 --> 00:12:33,589
equal<font color="#E5E5E5"> to</font><font color="#CCCCCC"> I and this distinction between</font>

318
00:12:31,550 --> 00:12:36,589
G and I makes makes it a<font color="#E5E5E5"> combined</font>

319
00:12:33,590 --> 00:12:39,080
feedback mode and now<font color="#E5E5E5"> this the choice of</font>

320
00:12:36,590 --> 00:12:42,140
G is very<font color="#E5E5E5"> simple it's like 0 1 1 0</font>

321
00:12:39,080 --> 00:12:44,030
identity identity identity so it<font color="#CCCCCC"> is very</font>

322
00:12:42,140 --> 00:12:46,580
<font color="#E5E5E5">easy to implement</font><font color="#CCCCCC"> it's just</font><font color="#E5E5E5"> R by 2 bit</font>

323
00:12:44,030 --> 00:12:50,180
left shift<font color="#E5E5E5"> and no 1 R by 2 V tags are so</font>

324
00:12:46,580 --> 00:12:52,520
it's very efficient now we recommend<font color="#E5E5E5"> two</font>

325
00:12:50,180 --> 00:12:54,500
versions for<font color="#CCCCCC"> brittle for</font><font color="#E5E5E5"> butyl family</font>

326
00:12:52,520 --> 00:12:56,780
like one is<font color="#CCCCCC"> bit too light Plus which is</font>

327
00:12:54,500 --> 00:12:58,850
which aims to<font color="#E5E5E5"> be light fit</font><font color="#CCCCCC"> and one</font>

328
00:12:56,780 --> 00:13:00,560
another is butyl secure<font color="#E5E5E5"> Plus which which</font>

329
00:12:58,850 --> 00:13:02,420
aims to<font color="#E5E5E5"> have higher security level and</font>

330
00:13:00,560 --> 00:13:04,849
also it has some<font color="#E5E5E5"> light weight property</font>

331
00:13:02,420 --> 00:13:07,400
now for<font color="#CCCCCC"> middle light light</font><font color="#E5E5E5"> plus the</font>

332
00:13:04,850 --> 00:13:09,589
choice of<font color="#E5E5E5"> F is P 144</font><font color="#CCCCCC"> permutation</font>

333
00:13:07,400 --> 00:13:12,439
describing<font color="#CCCCCC"> 4 photon</font><font color="#E5E5E5"> hash function with</font>

334
00:13:09,589 --> 00:13:14,870
the state size 144<font color="#E5E5E5"> late 64 and capacity</font>

335
00:13:12,440 --> 00:13:17,779
80 and for<font color="#E5E5E5"> between secure</font><font color="#CCCCCC"> Plus</font>

336
00:13:14,870 --> 00:13:20,480
<font color="#CCCCCC">we use P 256 permutation</font><font color="#E5E5E5"> from photos for</font>

337
00:13:17,779 --> 00:13:25,970
the hash function with state size 256

338
00:13:20,480 --> 00:13:27,560
and<font color="#CCCCCC"> words rate and capacity 128 so when</font>

339
00:13:25,970 --> 00:13:29,330
we try to<font color="#E5E5E5"> prove when we proved the</font>

340
00:13:27,560 --> 00:13:32,839
security of<font color="#E5E5E5"> this design we assume that</font>

341
00:13:29,330 --> 00:13:34,430
it we assume the proof under nonce

342
00:13:32,839 --> 00:13:36,170
respecting adversary<font color="#E5E5E5"> where the adversary</font>

343
00:13:34,430 --> 00:13:38,180
do not repeat the nonce<font color="#E5E5E5"> for the</font>

344
00:13:36,170 --> 00:13:41,029
encryption queries and<font color="#E5E5E5"> we have uplift</font>

345
00:13:38,180 --> 00:13:43,250
the security level to minimum<font color="#E5E5E5"> of B by</font><font color="#CCCCCC"> 2c</font>

346
00:13:41,029 --> 00:13:45,290
minus<font color="#E5E5E5"> log R and R so I forward to</font>

347
00:13:43,250 --> 00:13:48,050
mention that the tax<font color="#E5E5E5"> sizes are beat</font>

348
00:13:45,290 --> 00:13:49,670
so definitely<font color="#CCCCCC"> arch should</font><font color="#E5E5E5"> be there</font><font color="#CCCCCC"> now</font>

349
00:13:48,050 --> 00:13:52,069
<font color="#E5E5E5">text size can be</font><font color="#CCCCCC"> anything actually but</font>

350
00:13:49,670 --> 00:13:55,069
for our design we<font color="#CCCCCC"> hard code editors as</font>

351
00:13:52,070 --> 00:13:59,930
<font color="#E5E5E5">Arbit so for brittle light plus it has</font>

352
00:13:55,070 --> 00:14:02,390
<font color="#E5E5E5">our beat</font><font color="#CCCCCC"> R is</font><font color="#E5E5E5"> equal to 64 so it has a 64</font>

353
00:13:59,930 --> 00:14:05,779
<font color="#E5E5E5">bit security and be</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> secure plus C</font>

354
00:14:02,390 --> 00:14:08,779
minus log<font color="#CCCCCC"> R C n R</font><font color="#E5E5E5"> both of them are 128</font>

355
00:14:05,779 --> 00:14:11,689
<font color="#E5E5E5">so it has</font><font color="#CCCCCC"> C minus log on 21 bit security</font>

356
00:14:08,779 --> 00:14:15,170
and when we make<font color="#E5E5E5"> comparative study with</font>

357
00:14:11,690 --> 00:14:17,930
the<font color="#CCCCCC"> spawns a you</font><font color="#E5E5E5"> won't so we can observe</font>

358
00:14:15,170 --> 00:14:20,029
<font color="#CCCCCC">that</font><font color="#E5E5E5"> when the state size is B then</font><font color="#CCCCCC"> each</font>

359
00:14:17,930 --> 00:14:25,160
<font color="#CCCCCC">little</font><font color="#E5E5E5"> has a much higher security level</font>

360
00:14:20,029 --> 00:14:27,980
then<font color="#E5E5E5"> spawn J so finally so it has very</font>

361
00:14:25,160 --> 00:14:29,449
<font color="#CCCCCC">low stage size of B we beat</font><font color="#E5E5E5"> it has very</font>

362
00:14:27,980 --> 00:14:31,730
flexible mode we<font color="#CCCCCC"> can fit any permutation</font>

363
00:14:29,450 --> 00:14:33,740
here this inverse free<font color="#E5E5E5"> so we do not need</font>

364
00:14:31,730 --> 00:14:36,440
to compute F inverse<font color="#CCCCCC"> for the decryption</font>

365
00:14:33,740 --> 00:14:38,930
<font color="#E5E5E5">it's a</font><font color="#CCCCCC"> very simple linear feedback</font><font color="#E5E5E5"> from</font>

366
00:14:36,440 --> 00:14:41,390
<font color="#E5E5E5">minor and it is very lightweight and</font>

367
00:14:38,930 --> 00:14:42,949
<font color="#E5E5E5">consumes</font><font color="#CCCCCC"> low</font><font color="#E5E5E5"> hardware idea and the</font>

368
00:14:41,390 --> 00:14:44,360
limitation is that<font color="#E5E5E5"> both the encryption</font>

369
00:14:42,950 --> 00:14:46,070
and decryption is compared are

370
00:14:44,360 --> 00:14:49,339
completely serial so if we want to<font color="#E5E5E5"> gain</font>

371
00:14:46,070 --> 00:14:50,709
something<font color="#E5E5E5"> we have to do something so now</font>

372
00:14:49,339 --> 00:14:54,920
I'm<font color="#E5E5E5"> coming to the hardware implement an</font>

373
00:14:50,709 --> 00:14:56,630
implementation results of<font color="#CCCCCC"> Biddle so so</font>

374
00:14:54,920 --> 00:14:59,079
<font color="#E5E5E5">is the CPB analysis for little light</font>

375
00:14:56,630 --> 00:15:02,180
plus so for middle<font color="#CCCCCC"> c QA plus</font><font color="#E5E5E5"> it is same</font>

376
00:14:59,080 --> 00:15:04,459
so we<font color="#E5E5E5"> assume a block</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> and M block</font>

377
00:15:02,180 --> 00:15:06,500
message<font color="#E5E5E5"> well each each block is 64 bit</font>

378
00:15:04,459 --> 00:15:09,380
block<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> 8 byte blocks and the</font>

379
00:15:06,500 --> 00:15:12,589
cycle<font color="#E5E5E5"> count is 13 into a plus M plus 12</font>

380
00:15:09,380 --> 00:15:15,290
<font color="#E5E5E5">because P 144 round runs for 12</font><font color="#CCCCCC"> roms</font><font color="#E5E5E5"> and</font>

381
00:15:12,589 --> 00:15:18,890
in this<font color="#E5E5E5"> calculation we assume equal</font><font color="#CCCCCC"> to M</font>

382
00:15:15,290 --> 00:15:21,589
and<font color="#E5E5E5"> finally we get this is the CPB value</font>

383
00:15:18,890 --> 00:15:22,850
and when the size of M<font color="#E5E5E5"> increases the</font>

384
00:15:21,589 --> 00:15:25,760
length of M increases it becomes

385
00:15:22,850 --> 00:15:29,150
negligible so it is essentially it it is

386
00:15:25,760 --> 00:15:30,860
converts to<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> 2 5</font>

387
00:15:29,150 --> 00:15:32,689
so this is the base architecture<font color="#E5E5E5"> for</font>

388
00:15:30,860 --> 00:15:34,190
<font color="#CCCCCC">brittle light plus so it is again same</font>

389
00:15:32,690 --> 00:15:37,339
form it will secure<font color="#CCCCCC"> plus except the data</font>

390
00:15:34,190 --> 00:15:40,130
path<font color="#CCCCCC"> links so it just uses one state</font>

391
00:15:37,339 --> 00:15:41,600
register of size 144 it uses three

392
00:15:40,130 --> 00:15:43,310
modules<font color="#E5E5E5"> so it is a round based</font>

393
00:15:41,600 --> 00:15:45,529
implementation<font color="#CCCCCC"> very basic round based</font>

394
00:15:43,310 --> 00:15:47,119
implementation<font color="#CCCCCC"> so this F round module is</font>

395
00:15:45,529 --> 00:15:49,730
actually<font color="#CCCCCC"> one round of the F permutation</font>

396
00:15:47,120 --> 00:15:52,339
<font color="#E5E5E5">this</font><font color="#CCCCCC"> row comp is the linear</font><font color="#E5E5E5"> for minor</font>

397
00:15:49,730 --> 00:15:54,860
<font color="#CCCCCC">and this corner</font><font color="#E5E5E5"> addition</font><font color="#CCCCCC"> the connector</font>

398
00:15:52,339 --> 00:15:57,800
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> constant</font><font color="#CCCCCC"> addition</font><font color="#E5E5E5"> and we have</font>

399
00:15:54,860 --> 00:16:01,940
some other signals to control<font color="#E5E5E5"> the</font>

400
00:15:57,800 --> 00:16:03,469
circuit<font color="#E5E5E5"> now regarding the base</font>

401
00:16:01,940 --> 00:16:06,589
architecture of<font color="#E5E5E5"> little light plus it</font>

402
00:16:03,470 --> 00:16:08,120
uses in the serial processing of<font color="#CCCCCC"> data it</font>

403
00:16:06,589 --> 00:16:11,600
does round based architecture of photon

404
00:16:08,120 --> 00:16:14,600
P 144 permutation<font color="#E5E5E5"> it processes one one</font>

405
00:16:11,600 --> 00:16:16,420
<font color="#CCCCCC">64 bit block about</font><font color="#E5E5E5"> 12 clock cycles he</font>

406
00:16:14,600 --> 00:16:19,520
teams has a very low storage register

407
00:16:16,420 --> 00:16:20,900
which is<font color="#E5E5E5"> only only be bit and it has the</font>

408
00:16:19,520 --> 00:16:24,740
minimum<font color="#E5E5E5"> hardware idea among all the</font>

409
00:16:20,900 --> 00:16:26,540
<font color="#E5E5E5">known implementations now this is the</font>

410
00:16:24,740 --> 00:16:28,640
<font color="#E5E5E5">FPGA implemented results for middle</font>

411
00:16:26,540 --> 00:16:31,010
light plus so<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> observe</font><font color="#CCCCCC"> that both</font>

412
00:16:28,640 --> 00:16:33,050
vertex<font color="#E5E5E5"> six and seven it achieves a very</font>

413
00:16:31,010 --> 00:16:34,939
low number of annuities and slices

414
00:16:33,050 --> 00:16:36,680
<font color="#CCCCCC">another and on</font><font color="#E5E5E5"> the other</font><font color="#CCCCCC"> hand</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> has</font>

415
00:16:34,940 --> 00:16:39,140
very<font color="#CCCCCC"> comparative value for any</font>

416
00:16:36,680 --> 00:16:41,750
efficiency<font color="#E5E5E5"> ratio and this</font><font color="#CCCCCC"> 4-bit</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> see</font>

417
00:16:39,140 --> 00:16:44,470
<font color="#CCCCCC">qr+ so it is heavier than brittle light</font>

418
00:16:41,750 --> 00:16:48,529
plus but still it<font color="#E5E5E5"> gives a competitive</font>

419
00:16:44,470 --> 00:16:53,029
<font color="#E5E5E5">Hardware footprint and good any</font>

420
00:16:48,529 --> 00:16:54,860
efficiency<font color="#E5E5E5"> ratio and this is the</font><font color="#CCCCCC"> debate</font>

421
00:16:53,029 --> 00:16:57,200
<font color="#E5E5E5">sparking orbital light plus with the</font>

422
00:16:54,860 --> 00:16:59,510
existing<font color="#CCCCCC"> lightweight designs</font><font color="#E5E5E5"> and we can</font>

423
00:16:57,200 --> 00:17:01,580
found<font color="#E5E5E5"> that brittle light plus as much</font>

424
00:16:59,510 --> 00:17:03,770
lighter<font color="#CCCCCC"> middle light plus is much</font>

425
00:17:01,580 --> 00:17:06,410
lighter<font color="#E5E5E5"> than the other designs and it</font>

426
00:17:03,770 --> 00:17:08,480
has a<font color="#E5E5E5"> higher any efficiency ratio</font><font color="#CCCCCC"> but we</font>

427
00:17:06,410 --> 00:17:11,030
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> admit that this design does</font><font color="#E5E5E5"> not</font>

428
00:17:08,480 --> 00:17:13,040
<font color="#E5E5E5">follow Caesar API so when we implement</font>

429
00:17:11,030 --> 00:17:15,859
<font color="#E5E5E5">brittle light passing</font><font color="#CCCCCC"> Caesar a</font><font color="#E5E5E5"> PA it</font>

430
00:17:13,040 --> 00:17:17,839
will have some over it so but but still

431
00:17:15,859 --> 00:17:20,479
still<font color="#E5E5E5"> we have very very</font><font color="#CCCCCC"> good result so</font>

432
00:17:17,839 --> 00:17:23,020
<font color="#CCCCCC">even if he does over it we believe</font><font color="#E5E5E5"> it</font>

433
00:17:20,480 --> 00:17:26,630
can beat all the other implementations

434
00:17:23,020 --> 00:17:28,189
so this is the benchmarking<font color="#CCCCCC"> orbital</font>

435
00:17:26,630 --> 00:17:29,690
<font color="#CCCCCC">secure</font><font color="#E5E5E5"> plus with the existing sponge</font>

436
00:17:28,189 --> 00:17:32,270
constructions with the<font color="#E5E5E5"> equivalent</font>

437
00:17:29,690 --> 00:17:34,280
security level so we<font color="#E5E5E5"> can observe that it</font>

438
00:17:32,270 --> 00:17:37,610
has better<font color="#CCCCCC"> lut and slices than the other</font>

439
00:17:34,280 --> 00:17:41,629
designs and it has a good value<font color="#E5E5E5"> for any</font>

440
00:17:37,610 --> 00:17:42,800
efficiency<font color="#E5E5E5"> ratio yeah so finally I would</font>

441
00:17:41,630 --> 00:17:46,430
like<font color="#E5E5E5"> to conclude</font>

442
00:17:42,800 --> 00:17:47,899
it's a permutation based<font color="#E5E5E5"> a</font><font color="#CCCCCC"> mode we just</font>

443
00:17:46,430 --> 00:17:51,530
seek you high security level of minimum

444
00:17:47,900 --> 00:17:53,210
<font color="#E5E5E5">of B by 2 comma C</font><font color="#CCCCCC"> minus</font><font color="#E5E5E5"> log R</font><font color="#CCCCCC"> and R and</font>

445
00:17:51,530 --> 00:17:55,280
he just low area it is<font color="#CCCCCC"> a low area</font>

446
00:17:53,210 --> 00:17:57,320
authenticated encryption<font color="#CCCCCC"> family and it</font>

447
00:17:55,280 --> 00:17:59,240
can be used<font color="#CCCCCC"> very efficiently in low</font>

448
00:17:57,320 --> 00:18:01,389
<font color="#CCCCCC">resource embedded devices and thanks a</font>

449
00:17:59,240 --> 00:18:01,390
<font color="#E5E5E5">lot</font>

450
00:18:01,520 --> 00:18:11,100
[Applause]

451
00:18:07,740 --> 00:18:20,590
we have time for<font color="#E5E5E5"> one quick</font><font color="#CCCCCC"> question if</font>

452
00:18:11,100 --> 00:18:22,419
<font color="#CCCCCC">any</font><font color="#E5E5E5"> maybe one one quick can you comment</font>

453
00:18:20,590 --> 00:18:25,510
<font color="#E5E5E5">like in terms of state size for example</font>

454
00:18:22,420 --> 00:18:27,220
compared to a block cipher<font color="#CCCCCC"> basin in</font>

455
00:18:25,510 --> 00:18:29,020
<font color="#E5E5E5">terms of state size yeah which is</font>

456
00:18:27,220 --> 00:18:31,870
<font color="#E5E5E5">important in the</font><font color="#CCCCCC"> lightweight</font><font color="#E5E5E5"> cons</font>

457
00:18:29,020 --> 00:18:33,990
context<font color="#E5E5E5"> compared</font><font color="#CCCCCC"> to a solution</font><font color="#E5E5E5"> based on</font>

458
00:18:31,870 --> 00:18:36,939
block ciphers<font color="#E5E5E5"> like</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> previous talk</font>

459
00:18:33,990 --> 00:18:38,650
how does it compare<font color="#E5E5E5"> so actually for</font>

460
00:18:36,940 --> 00:18:40,480
spawns construction it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually</font>

461
00:18:38,650 --> 00:18:42,190
<font color="#E5E5E5">better than block</font><font color="#CCCCCC"> ciphers</font><font color="#E5E5E5"> constructions</font>

462
00:18:40,480 --> 00:18:44,470
<font color="#E5E5E5">because in case of block ciphers</font>

463
00:18:42,190 --> 00:18:46,810
construction we need to store we need<font color="#CCCCCC"> to</font>

464
00:18:44,470 --> 00:18:48,550
also store the key not only<font color="#CCCCCC"> the state</font><font color="#E5E5E5"> so</font>

465
00:18:46,810 --> 00:18:52,020
but here we do not<font color="#E5E5E5"> need to store the key</font>

466
00:18:48,550 --> 00:18:54,430
so mainly<font color="#E5E5E5"> the block cipher may stay here</font>

467
00:18:52,020 --> 00:18:56,950
<font color="#CCCCCC">the state size for block cipher</font><font color="#E5E5E5"> by stay</font>

468
00:18:54,430 --> 00:18:58,630
<font color="#E5E5E5">there represented in</font><font color="#CCCCCC"> only the state say</font>

469
00:18:56,950 --> 00:19:01,420
<font color="#E5E5E5">only on the state size but actually we</font>

470
00:18:58,630 --> 00:19:02,950
need<font color="#E5E5E5"> to add the key also so here we do</font>

471
00:19:01,420 --> 00:19:04,750
<font color="#E5E5E5">not need to add any key so it is much</font>

472
00:19:02,950 --> 00:19:08,040
lighter than<font color="#E5E5E5"> block</font><font color="#CCCCCC"> cipher this</font>

473
00:19:04,750 --> 00:19:11,060
constructions thank you

474
00:19:08,040 --> 00:19:18,089
we can thank<font color="#E5E5E5"> the speaker again</font>

475
00:19:11,060 --> 00:19:18,089
[Applause]

