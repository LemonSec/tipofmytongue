1
00:00:00,620 --> 00:00:08,219
<font color="#E5E5E5">okay welcome</font><font color="#CCCCCC"> back for this session on</font>

2
00:00:05,310 --> 00:00:10,440
<font color="#CCCCCC">Hardware masking we have three talks in</font>

3
00:00:08,220 --> 00:00:12,210
this session<font color="#E5E5E5"> and they all three have</font>

4
00:00:10,440 --> 00:00:14,070
<font color="#CCCCCC">Hardware masking in their</font><font color="#E5E5E5"> title so I</font>

5
00:00:12,210 --> 00:00:16,470
guess it was very<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to put them in</font>

6
00:00:14,070 --> 00:00:18,750
the<font color="#E5E5E5"> right session so first one is</font>

7
00:00:16,470 --> 00:00:21,479
<font color="#CCCCCC">Hannah's</font><font color="#E5E5E5"> gross from Graz</font>

8
00:00:18,750 --> 00:00:26,039
<font color="#E5E5E5">so he will speak about generic lowlife</font>

9
00:00:21,480 --> 00:00:28,529
and<font color="#CCCCCC"> C masking in</font><font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> says and</font>

10
00:00:26,039 --> 00:00:30,869
it's a collaboration with<font color="#E5E5E5"> his colleagues</font>

11
00:00:28,529 --> 00:00:35,239
from<font color="#E5E5E5"> Graz</font><font color="#CCCCCC"> Eddie not usable</font><font color="#E5E5E5"> and Roderick</font>

12
00:00:30,869 --> 00:00:38,340
<font color="#CCCCCC">bloom thanks for the introduction</font>

13
00:00:35,239 --> 00:00:42,690
<font color="#CCCCCC">semantics on</font><font color="#E5E5E5"> generics low latency</font>

14
00:00:38,340 --> 00:00:45,719
masking in hardware<font color="#E5E5E5"> and with this work</font>

15
00:00:42,690 --> 00:00:47,459
<font color="#E5E5E5">we try to give answers to two very</font>

16
00:00:45,719 --> 00:00:51,270
intriguing masking questions<font color="#E5E5E5"> so the</font>

17
00:00:47,460 --> 00:00:54,629
first one is is<font color="#E5E5E5"> it possible to secure it</font>

18
00:00:51,270 --> 00:00:59,789
<font color="#E5E5E5">securely evaluate really complex math</font>

19
00:00:54,629 --> 00:01:02,760
function in a single clock cycle<font color="#E5E5E5"> and yes</font>

20
00:00:59,789 --> 00:01:06,240
we achieve this and the second question

21
00:01:02,760 --> 00:01:09,390
<font color="#E5E5E5">is does higher or</font><font color="#CCCCCC"> the masking require</font>

22
00:01:06,240 --> 00:01:12,649
any online randomness and quite

23
00:01:09,390 --> 00:01:16,530
surprisingly<font color="#CCCCCC"> the answer to this is</font><font color="#E5E5E5"> no</font>

24
00:01:12,650 --> 00:01:18,750
but as always<font color="#E5E5E5"> when things sound just too</font>

25
00:01:16,530 --> 00:01:21,450
<font color="#E5E5E5">good to be true there's a huge</font><font color="#CCCCCC"> butt</font>

26
00:01:18,750 --> 00:01:24,479
<font color="#E5E5E5">trailing our answers but we'll come</font><font color="#CCCCCC"> to</font>

27
00:01:21,450 --> 00:01:27,090
<font color="#CCCCCC">that afterwards</font><font color="#E5E5E5"> so let's start from the</font>

28
00:01:24,479 --> 00:01:29,520
<font color="#CCCCCC">beginning</font><font color="#E5E5E5"> since I'm</font><font color="#CCCCCC"> the first guy in</font>

29
00:01:27,090 --> 00:01:32,430
this this session<font color="#E5E5E5"> I thought</font><font color="#CCCCCC"> I'd give</font><font color="#E5E5E5"> you</font>

30
00:01:29,520 --> 00:01:34,530
some brief introduction into<font color="#E5E5E5"> masking so</font>

31
00:01:32,430 --> 00:01:36,689
what we're trying<font color="#CCCCCC"> to</font><font color="#E5E5E5"> achieve or</font><font color="#CCCCCC"> what</font>

32
00:01:34,530 --> 00:01:39,930
we're<font color="#E5E5E5"> doing is we're splitting up secret</font>

33
00:01:36,689 --> 00:01:43,199
information into a couple of fresh

34
00:01:39,930 --> 00:01:46,140
random shares<font color="#E5E5E5"> well we denote random</font>

35
00:01:43,200 --> 00:01:51,380
shares by capital letters<font color="#CCCCCC"> starting from</font>

36
00:01:46,140 --> 00:01:55,619
a then<font color="#CCCCCC"> B C and so on till we</font><font color="#E5E5E5"> reach our</font>

37
00:01:51,380 --> 00:01:57,658
security<font color="#E5E5E5"> parameter D and at all time we</font>

38
00:01:55,619 --> 00:02:00,180
ensure that<font color="#E5E5E5"> only by bringing all the</font>

39
00:01:57,659 --> 00:02:02,250
shares together<font color="#CCCCCC"> we can reveal the secret</font>

40
00:02:00,180 --> 00:02:04,829
<font color="#CCCCCC">information and this</font><font color="#E5E5E5"> is what we try to</font>

41
00:02:02,250 --> 00:02:07,950
compute on and the goal<font color="#E5E5E5"> of a masking</font>

42
00:02:04,829 --> 00:02:10,258
scheme is now to give simple<font color="#E5E5E5"> rules to</font>

43
00:02:07,950 --> 00:02:13,410
<font color="#CCCCCC">keep this separation</font><font color="#E5E5E5"> of their shares</font>

44
00:02:10,258 --> 00:02:15,839
<font color="#E5E5E5">throughout the entire circuit</font>

45
00:02:13,410 --> 00:02:17,760
and since we<font color="#E5E5E5"> built a bond flying's of</font>

46
00:02:15,840 --> 00:02:22,040
<font color="#CCCCCC">Dom I just give you a</font><font color="#E5E5E5"> short introduction</font>

47
00:02:17,760 --> 00:02:25,230
<font color="#E5E5E5">what we</font><font color="#CCCCCC"> how we</font><font color="#E5E5E5"> how we transform</font>

48
00:02:22,040 --> 00:02:28,650
<font color="#E5E5E5">unprotected circuit to a Dom protected</font>

49
00:02:25,230 --> 00:02:30,780
circuit so this<font color="#E5E5E5"> is quite easy</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we have</font>

50
00:02:28,650 --> 00:02:34,530
here an example circuit<font color="#E5E5E5"> consisting of</font>

51
00:02:30,780 --> 00:02:37,440
some inputs and outputs<font color="#E5E5E5"> and some linear</font>

52
00:02:34,530 --> 00:02:40,650
gates<font color="#CCCCCC"> and</font><font color="#E5E5E5"> two nonlinear gate and the</font>

53
00:02:37,440 --> 00:02:43,020
first thing we do is we're just<font color="#E5E5E5"> copying</font>

54
00:02:40,650 --> 00:02:45,650
the original<font color="#E5E5E5"> circuit two times so we're</font>

55
00:02:43,020 --> 00:02:49,050
<font color="#E5E5E5">targeting first order protection and</font>

56
00:02:45,650 --> 00:02:51,600
these copies now become our domains so

57
00:02:49,050 --> 00:02:56,430
the first domain<font color="#CCCCCC"> we will</font><font color="#E5E5E5"> from now on</font>

58
00:02:51,600 --> 00:03:00,000
denote a<font color="#CCCCCC"> the second B and</font><font color="#E5E5E5"> we also will</font>

59
00:02:56,430 --> 00:03:02,670
identify the<font color="#E5E5E5"> the wires in domain a by</font>

60
00:03:00,000 --> 00:03:07,260
prefix with the domain<font color="#E5E5E5"> letter and for</font>

61
00:03:02,670 --> 00:03:10,679
the main be accordingly<font color="#CCCCCC"> so up to this</font>

62
00:03:07,260 --> 00:03:13,940
point<font color="#CCCCCC"> everything was</font><font color="#E5E5E5"> really simple and</font>

63
00:03:10,680 --> 00:03:16,230
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can obviously see</font><font color="#CCCCCC"> that this achieve</font>

64
00:03:13,940 --> 00:03:18,359
<font color="#CCCCCC">achieved the goal that we set so we want</font>

65
00:03:16,230 --> 00:03:20,700
to have a separation<font color="#E5E5E5"> of all the a shares</font>

66
00:03:18,360 --> 00:03:23,100
and all the B shares the<font color="#E5E5E5"> only problem</font>

67
00:03:20,700 --> 00:03:25,200
with this circuit is now that<font color="#E5E5E5"> it's not</font>

68
00:03:23,100 --> 00:03:28,620
<font color="#E5E5E5">already correct so it's secure or not</font>

69
00:03:25,200 --> 00:03:30,810
correct<font color="#E5E5E5"> so we need to change this in</font>

70
00:03:28,620 --> 00:03:32,790
order to change<font color="#CCCCCC"> this for linear</font>

71
00:03:30,810 --> 00:03:35,250
operations<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is actually quite simple</font>

72
00:03:32,790 --> 00:03:38,700
<font color="#CCCCCC">the only thing we have to do is to throw</font>

73
00:03:35,250 --> 00:03:42,450
the inverters<font color="#E5E5E5"> from our second domain</font>

74
00:03:38,700 --> 00:03:45,119
<font color="#E5E5E5">here</font><font color="#CCCCCC"> then we are actually fine so all</font>

75
00:03:42,450 --> 00:03:48,209
the<font color="#E5E5E5"> other stuff change stays completely</font>

76
00:03:45,120 --> 00:03:50,880
unchanged<font color="#CCCCCC"> things get a bit more</font>

77
00:03:48,209 --> 00:03:52,490
<font color="#E5E5E5">complicated once we change to nonlinear</font>

78
00:03:50,880 --> 00:03:55,799
operations like<font color="#CCCCCC"> the</font><font color="#E5E5E5"> end gate here</font>

79
00:03:52,490 --> 00:03:57,780
because this means that<font color="#E5E5E5"> our domains need</font>

80
00:03:55,800 --> 00:04:00,000
to communicate<font color="#E5E5E5"> with</font><font color="#CCCCCC"> each other of a</font>

81
00:03:57,780 --> 00:04:03,420
protected<font color="#CCCCCC"> Channel and this usually</font>

82
00:04:00,000 --> 00:04:06,420
involves<font color="#E5E5E5"> some fresh randomness but we go</font>

83
00:04:03,420 --> 00:04:08,670
into<font color="#E5E5E5"> details</font><font color="#CCCCCC"> on this later on</font><font color="#E5E5E5"> just a</font>

84
00:04:06,420 --> 00:04:12,089
brief summary about<font color="#E5E5E5"> the main</font><font color="#CCCCCC"> evented</font>

85
00:04:08,670 --> 00:04:15,420
masking so it's a circuit<font color="#CCCCCC"> centred scheme</font>

86
00:04:12,090 --> 00:04:17,548
with circular centered rules<font color="#CCCCCC"> so this</font>

87
00:04:15,420 --> 00:04:20,640
makes<font color="#E5E5E5"> it really convenient for hardware</font>

88
00:04:17,548 --> 00:04:22,679
designers it uses<font color="#CCCCCC"> D plus 1 shares with</font>

89
00:04:20,640 --> 00:04:25,289
which is<font color="#E5E5E5"> the minimum amount of shares to</font>

90
00:04:22,680 --> 00:04:27,210
achieve<font color="#CCCCCC"> leaf order security</font><font color="#E5E5E5"> so this</font>

91
00:04:25,290 --> 00:04:29,729
leads to<font color="#E5E5E5"> quite efficient</font>

92
00:04:27,210 --> 00:04:32,008
masking<font color="#CCCCCC"> designs</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> also a completely</font>

93
00:04:29,729 --> 00:04:33,930
generic<font color="#E5E5E5"> which means that we can easily</font>

94
00:04:32,009 --> 00:04:37,710
synthesized<font color="#E5E5E5"> or circuits for any</font>

95
00:04:33,930 --> 00:04:39,240
protection order that we target<font color="#E5E5E5"> and also</font>

96
00:04:37,710 --> 00:04:46,560
compared<font color="#E5E5E5"> to other generic masking</font>

97
00:04:39,240 --> 00:04:48,330
schemes<font color="#E5E5E5"> it is low randomness so what is</font>

98
00:04:46,560 --> 00:04:51,600
it that<font color="#CCCCCC"> we actually</font><font color="#E5E5E5"> tried to achieve</font>

99
00:04:48,330 --> 00:04:52,500
<font color="#E5E5E5">here what's the issue with latency</font><font color="#CCCCCC"> and</font>

100
00:04:51,600 --> 00:04:56,759
where does<font color="#E5E5E5"> it come from</font>

101
00:04:52,500 --> 00:04:58,830
<font color="#E5E5E5">in order to see what</font><font color="#CCCCCC"> where we where we</font>

102
00:04:56,759 --> 00:05:04,199
<font color="#CCCCCC">spent our cycles on let's have a closer</font>

103
00:04:58,830 --> 00:05:06,630
look<font color="#E5E5E5"> at a two-bit end gate</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't</font>

104
00:05:04,199 --> 00:05:10,050
<font color="#E5E5E5">protect stupid end gate so this is like</font>

105
00:05:06,630 --> 00:05:14,550
a<font color="#E5E5E5"> multiplication of two</font><font color="#CCCCCC"> element</font><font color="#E5E5E5"> of two</font>

106
00:05:10,050 --> 00:05:18,630
<font color="#E5E5E5">elements over GF 2 and once we put</font><font color="#CCCCCC"> it in</font>

107
00:05:14,550 --> 00:05:20,580
this shared form here and try to to

108
00:05:18,630 --> 00:05:22,259
manage the multiplication terms in such

109
00:05:20,580 --> 00:05:24,570
a way<font color="#CCCCCC"> that we put everything into the</font>

110
00:05:22,259 --> 00:05:26,190
<font color="#E5E5E5">according domain we immediately see</font><font color="#CCCCCC"> that</font>

111
00:05:24,570 --> 00:05:28,830
there we will always end<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with two</font>

112
00:05:26,190 --> 00:05:32,340
shares per<font color="#CCCCCC"> domain that don't belong into</font>

113
00:05:28,830 --> 00:05:35,190
<font color="#CCCCCC">this domain here</font><font color="#E5E5E5"> and so for this reason</font>

114
00:05:32,340 --> 00:05:40,080
we constructed this<font color="#E5E5E5"> dumb end gate here</font>

115
00:05:35,190 --> 00:05:42,630
and what we do<font color="#E5E5E5"> here is for for this</font>

116
00:05:40,080 --> 00:05:45,599
critical across the main terms we add

117
00:05:42,630 --> 00:05:47,909
some fresh randomness and then also put

118
00:05:45,599 --> 00:05:49,740
everything into a register<font color="#E5E5E5"> to make sure</font>

119
00:05:47,909 --> 00:05:51,780
that the glitches don't<font color="#CCCCCC"> propagate</font><font color="#E5E5E5"> and</font>

120
00:05:49,740 --> 00:05:54,510
then finally we compress everything

121
00:05:51,780 --> 00:05:57,210
<font color="#E5E5E5">together and so from this you</font>

122
00:05:54,510 --> 00:05:59,729
<font color="#CCCCCC">immediately see well the latency</font>

123
00:05:57,210 --> 00:06:02,299
obviously<font color="#E5E5E5"> comes from so we have this</font>

124
00:05:59,729 --> 00:06:04,860
register stage here and in<font color="#E5E5E5"> order</font><font color="#CCCCCC"> to</font>

125
00:06:02,300 --> 00:06:06,870
<font color="#E5E5E5">evaluate this and</font><font color="#CCCCCC"> gate we need to spend</font>

126
00:06:04,860 --> 00:06:08,729
two cycles on it however there is

127
00:06:06,870 --> 00:06:13,349
<font color="#E5E5E5">another issue which comes from the</font>

128
00:06:08,729 --> 00:06:15,599
inputs<font color="#CCCCCC"> so in</font><font color="#E5E5E5"> order that</font><font color="#CCCCCC"> this multiplier</font>

129
00:06:13,349 --> 00:06:20,009
is<font color="#E5E5E5"> secure we need to</font><font color="#CCCCCC"> ensure that the</font>

130
00:06:15,599 --> 00:06:21,810
inputs are independently shared and if

131
00:06:20,009 --> 00:06:24,360
this is<font color="#E5E5E5"> not the case usually it is</font>

132
00:06:21,810 --> 00:06:27,780
enough<font color="#CCCCCC"> to place a register before before</font>

133
00:06:24,360 --> 00:06:31,830
the multipliers here and this would cost

134
00:06:27,780 --> 00:06:34,948
us an additional additional register

135
00:06:31,830 --> 00:06:36,900
stage so in order to get rid of the

136
00:06:34,949 --> 00:06:39,610
first issue this<font color="#E5E5E5"> is actually kind of</font>

137
00:06:36,900 --> 00:06:43,060
<font color="#E5E5E5">easy we</font><font color="#CCCCCC"> can just completely</font>

138
00:06:39,610 --> 00:06:45,460
the compression<font color="#E5E5E5"> here we don't need to do</font>

139
00:06:43,060 --> 00:06:47,680
<font color="#E5E5E5">fro in randomness and have registers</font>

140
00:06:45,460 --> 00:06:49,030
<font color="#E5E5E5">this is a bit surprising at</font><font color="#CCCCCC"> first but</font>

141
00:06:47,680 --> 00:06:51,340
actually when we<font color="#E5E5E5"> look at the</font>

142
00:06:49,030 --> 00:06:54,219
multiplication terms<font color="#CCCCCC"> themselves</font><font color="#E5E5E5"> they are</font>

143
00:06:51,340 --> 00:06:56,340
all<font color="#CCCCCC"> secure so as long as we don't add</font>

144
00:06:54,219 --> 00:07:00,580
them together<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is totally fine</font><font color="#CCCCCC"> so</font>

145
00:06:56,340 --> 00:07:03,549
<font color="#CCCCCC">the first thing we introduced</font><font color="#E5E5E5"> new in</font>

146
00:07:00,580 --> 00:07:06,810
<font color="#E5E5E5">this paper is</font><font color="#CCCCCC"> that we extended on by</font>

147
00:07:03,550 --> 00:07:09,280
allowing<font color="#E5E5E5"> for multi-dimensional domains</font>

148
00:07:06,810 --> 00:07:13,289
<font color="#E5E5E5">so if this we already say if this</font>

149
00:07:09,280 --> 00:07:16,900
<font color="#CCCCCC">register stage here the</font><font color="#E5E5E5"> only problem is</font>

150
00:07:13,289 --> 00:07:19,000
the more multiplications we<font color="#E5E5E5"> do in a</font>

151
00:07:16,900 --> 00:07:21,698
sequence<font color="#E5E5E5"> the more shares we get the more</font>

152
00:07:19,000 --> 00:07:23,949
domains we create and at some point this

153
00:07:21,699 --> 00:07:26,530
becomes<font color="#E5E5E5"> unbearable and so we can't do</font>

154
00:07:23,949 --> 00:07:29,289
this<font color="#E5E5E5"> forever but</font><font color="#CCCCCC"> at least to bring the</font>

155
00:07:26,530 --> 00:07:31,960
latest<font color="#E5E5E5"> down for to some extent we can do</font>

156
00:07:29,289 --> 00:07:35,860
this the other<font color="#E5E5E5"> issue is if</font><font color="#CCCCCC"> we have</font>

157
00:07:31,960 --> 00:07:38,859
related<font color="#E5E5E5"> inputs because of glitches</font><font color="#CCCCCC"> then</font>

158
00:07:35,860 --> 00:07:40,930
<font color="#CCCCCC">it could happen</font><font color="#E5E5E5"> that in a short moment</font>

159
00:07:38,860 --> 00:07:42,909
in time<font color="#CCCCCC"> what we actually calculating is</font>

160
00:07:40,930 --> 00:07:44,860
for example<font color="#CCCCCC"> we</font><font color="#E5E5E5"> are doing the</font>

161
00:07:42,909 --> 00:07:47,680
multiplication<font color="#E5E5E5"> of the same element with</font>

162
00:07:44,860 --> 00:07:50,409
<font color="#CCCCCC">its</font><font color="#E5E5E5"> yeah of the same element and</font>

163
00:07:47,680 --> 00:07:53,319
therefore bringing together the shares

164
00:07:50,409 --> 00:07:57,219
of this variable in a<font color="#E5E5E5"> straightforward</font>

165
00:07:53,319 --> 00:07:59,050
<font color="#CCCCCC">way and in order to</font><font color="#E5E5E5"> circumvent this in a</font>

166
00:07:57,219 --> 00:08:04,810
circuit where<font color="#CCCCCC"> we don't prevent witches</font>

167
00:07:59,050 --> 00:08:06,550
by registers<font color="#CCCCCC"> we just copy the or</font><font color="#E5E5E5"> add an</font>

168
00:08:04,810 --> 00:08:09,759
additional sharing for the same variable

169
00:08:06,550 --> 00:08:11,800
<font color="#CCCCCC">and now the equation becomes fine so we</font>

170
00:08:09,759 --> 00:08:14,169
use fresh randomness for<font color="#E5E5E5"> the sharing of</font>

171
00:08:11,800 --> 00:08:17,800
<font color="#E5E5E5">this X prime here that is independent of</font>

172
00:08:14,169 --> 00:08:20,139
<font color="#E5E5E5">the sharing of X as a first simple</font>

173
00:08:17,800 --> 00:08:23,500
example let's have a look at the<font color="#E5E5E5"> ask on</font>

174
00:08:20,139 --> 00:08:26,139
<font color="#E5E5E5">s box and already here on</font><font color="#CCCCCC"> the</font>

175
00:08:23,500 --> 00:08:29,949
<font color="#CCCCCC">unprotected circuit</font><font color="#E5E5E5"> we see that there</font>

176
00:08:26,139 --> 00:08:34,779
will be some colliding inputs<font color="#E5E5E5"> once we</font>

177
00:08:29,949 --> 00:08:36,610
reach this multiplier stage here<font color="#E5E5E5"> so what</font>

178
00:08:34,779 --> 00:08:40,029
we would<font color="#E5E5E5"> do in Dom now is we would</font><font color="#CCCCCC"> just</font>

179
00:08:36,610 --> 00:08:41,890
days<font color="#E5E5E5"> after the after the XOR gates after</font>

180
00:08:40,029 --> 00:08:44,290
<font color="#E5E5E5">the fiend Lane layer we will place some</font>

181
00:08:41,890 --> 00:08:48,459
registers to get rid of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> glitches and</font>

182
00:08:44,290 --> 00:08:50,920
make the shares independent and here we

183
00:08:48,459 --> 00:08:53,530
try<font color="#E5E5E5"> to avoid this by</font><font color="#CCCCCC"> coping some of the</font>

184
00:08:50,920 --> 00:08:57,670
of the inputs of this

185
00:08:53,530 --> 00:09:00,310
of this<font color="#CCCCCC"> Oscar nest</font><font color="#E5E5E5"> box and then we would</font>

186
00:08:57,670 --> 00:09:04,439
<font color="#CCCCCC">just</font><font color="#E5E5E5"> use the multiplication get scissors</font>

187
00:09:00,310 --> 00:09:11,319
<font color="#CCCCCC">from before that</font><font color="#E5E5E5"> the Lola</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> get</font>

188
00:09:04,440 --> 00:09:13,870
for the photomultipliers here so some

189
00:09:11,320 --> 00:09:16,060
intermediate results<font color="#CCCCCC"> so as you can see</font>

190
00:09:13,870 --> 00:09:18,670
<font color="#E5E5E5">here for for the full implementation of</font>

191
00:09:16,060 --> 00:09:21,880
asking we successfully managed to bring

192
00:09:18,670 --> 00:09:24,000
down the cycles from<font color="#E5E5E5"> three to seven</font>

193
00:09:21,880 --> 00:09:29,290
depending on the<font color="#E5E5E5"> protection or</font><font color="#CCCCCC"> to only</font>

194
00:09:24,000 --> 00:09:32,110
one cycle<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also in</font><font color="#CCCCCC"> terms of actual</font>

195
00:09:29,290 --> 00:09:34,630
latency in nanoseconds<font color="#E5E5E5"> we achieve the</font>

196
00:09:32,110 --> 00:09:37,570
reduction however when we look at the

197
00:09:34,630 --> 00:09:40,540
first order numbers for example<font color="#E5E5E5"> we see</font>

198
00:09:37,570 --> 00:09:43,660
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> needed to invest more</font><font color="#CCCCCC"> than ten</font>

199
00:09:40,540 --> 00:09:47,110
kilo gates<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to achieve this and</font>

200
00:09:43,660 --> 00:09:51,459
also we<font color="#E5E5E5"> use more</font><font color="#CCCCCC"> than six times the</font>

201
00:09:47,110 --> 00:09:51,970
<font color="#E5E5E5">randomness so</font><font color="#CCCCCC"> it cost</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> but it</font>

202
00:09:51,460 --> 00:09:57,610
works

203
00:09:51,970 --> 00:10:00,280
however the asking<font color="#E5E5E5"> box was actually</font>

204
00:09:57,610 --> 00:10:03,010
<font color="#CCCCCC">designed to</font><font color="#E5E5E5"> be very</font><font color="#CCCCCC"> easy to be protected</font>

205
00:10:00,280 --> 00:10:05,890
against sectional analysis so<font color="#CCCCCC"> we also</font>

206
00:10:03,010 --> 00:10:09,130
picked a much more difficult<font color="#CCCCCC"> example for</font>

207
00:10:05,890 --> 00:10:11,589
<font color="#E5E5E5">this which is</font><font color="#CCCCCC"> the AES</font><font color="#E5E5E5"> sbox</font><font color="#CCCCCC"> and the first</font>

208
00:10:09,130 --> 00:10:13,839
thing we<font color="#CCCCCC"> needed</font><font color="#E5E5E5"> to decide on was which</font>

209
00:10:11,589 --> 00:10:16,570
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> s box design we are targeting</font>

210
00:10:13,839 --> 00:10:20,560
so there are a couple<font color="#CCCCCC"> of designs in the</font>

211
00:10:16,570 --> 00:10:23,410
literature<font color="#E5E5E5"> and the first presumably</font>

212
00:10:20,560 --> 00:10:25,449
<font color="#E5E5E5">suitable</font><font color="#CCCCCC"> choice would be the appetite</font>

213
00:10:23,410 --> 00:10:29,290
the<font color="#CCCCCC"> s box because it was</font><font color="#E5E5E5"> especially</font>

214
00:10:25,450 --> 00:10:30,420
<font color="#E5E5E5">designed to have a low circuit</font><font color="#CCCCCC"> F and low</font>

215
00:10:29,290 --> 00:10:34,270
complexity

216
00:10:30,420 --> 00:10:36,339
however<font color="#CCCCCC"> we build</font><font color="#E5E5E5"> a tool that helps</font><font color="#CCCCCC"> us to</font>

217
00:10:34,270 --> 00:10:38,350
trace<font color="#E5E5E5"> all the signals through the entire</font>

218
00:10:36,339 --> 00:10:41,200
second will tell us where we would get a

219
00:10:38,350 --> 00:10:43,480
collision<font color="#E5E5E5"> and as it turned out actually</font>

220
00:10:41,200 --> 00:10:46,780
this isn't<font color="#E5E5E5"> so optimal for for our</font>

221
00:10:43,480 --> 00:10:49,710
scenario because we get<font color="#E5E5E5"> a lot of eight</font>

222
00:10:46,780 --> 00:10:53,709
collisions and input collisions for<font color="#E5E5E5"> that</font>

223
00:10:49,710 --> 00:10:56,020
<font color="#E5E5E5">another s box instruction is quite</font>

224
00:10:53,710 --> 00:10:58,960
frequently<font color="#CCCCCC"> frequently used is to</font><font color="#E5E5E5"> can</font>

225
00:10:56,020 --> 00:11:02,020
write s box<font color="#E5E5E5"> however</font><font color="#CCCCCC"> this also</font><font color="#E5E5E5"> turned out</font>

226
00:10:58,960 --> 00:11:04,420
<font color="#E5E5E5">to be not suitable and so we finally</font>

227
00:11:02,020 --> 00:11:06,760
<font color="#E5E5E5">decided</font><font color="#CCCCCC"> on using</font><font color="#E5E5E5"> the action most simple</font>

228
00:11:04,420 --> 00:11:13,569
s box design we found which is<font color="#CCCCCC"> the</font>

229
00:11:06,760 --> 00:11:15,939
<font color="#CCCCCC">Mui s</font><font color="#E5E5E5"> box</font><font color="#CCCCCC"> either when we</font><font color="#E5E5E5"> trace trace the</font>

230
00:11:13,570 --> 00:11:18,580
input signals here food and for the

231
00:11:15,940 --> 00:11:21,330
<font color="#E5E5E5">circuit and we would still detect</font><font color="#CCCCCC"> it we</font>

232
00:11:18,580 --> 00:11:25,630
have at<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> these points here</font>

233
00:11:21,330 --> 00:11:29,110
<font color="#CCCCCC">collisions</font><font color="#E5E5E5"> of the inputs and so what we</font>

234
00:11:25,630 --> 00:11:31,720
<font color="#E5E5E5">did is we in order to avoid these</font>

235
00:11:29,110 --> 00:11:34,680
collisions<font color="#E5E5E5"> we again copied the input and</font>

236
00:11:31,720 --> 00:11:38,320
for some things we also needed<font color="#CCCCCC"> to copy</font>

237
00:11:34,680 --> 00:11:40,989
the<font color="#E5E5E5"> fan in circuit of the of the inputs</font>

238
00:11:38,320 --> 00:11:43,840
for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> here for</font><font color="#E5E5E5"> this GF 16</font>

239
00:11:40,990 --> 00:11:47,170
multiplier<font color="#E5E5E5"> we need it not only to copy</font>

240
00:11:43,840 --> 00:11:49,060
the the<font color="#CCCCCC"> input X prime here but</font><font color="#E5E5E5"> also need</font>

241
00:11:47,170 --> 00:11:52,540
to copy the input transformation it

242
00:11:49,060 --> 00:11:57,369
comes with it and for inverter<font color="#E5E5E5"> we had to</font>

243
00:11:52,540 --> 00:12:01,719
copy the this whole area before that

244
00:11:57,370 --> 00:12:04,540
feeds into the inverter<font color="#E5E5E5"> and so on since</font>

245
00:12:01,720 --> 00:12:07,390
with each multiplication stage we

246
00:12:04,540 --> 00:12:13,750
increase the<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> shares</font><font color="#CCCCCC"> thought</font>

247
00:12:07,390 --> 00:12:15,670
that we also tried<font color="#CCCCCC"> to to to find</font>

248
00:12:13,750 --> 00:12:17,800
suitable<font color="#E5E5E5"> spots where</font><font color="#CCCCCC"> we do an</font>

249
00:12:15,670 --> 00:12:21,640
intermediate compression to bring down

250
00:12:17,800 --> 00:12:25,329
the<font color="#CCCCCC"> number of shares so we we also have</font>

251
00:12:21,640 --> 00:12:27,760
some<font color="#E5E5E5"> two additional variants of this S</font>

252
00:12:25,330 --> 00:12:30,160
<font color="#CCCCCC">box so the first one</font><font color="#E5E5E5"> you should use as a</font>

253
00:12:27,760 --> 00:12:30,730
<font color="#E5E5E5">compression at the output of the AES</font>

254
00:12:30,160 --> 00:12:33,189
sbox

255
00:12:30,730 --> 00:12:37,980
at the second one<font color="#E5E5E5"> use is additionally a</font>

256
00:12:33,190 --> 00:12:40,330
compression<font color="#E5E5E5"> in between so from the</font>

257
00:12:37,980 --> 00:12:43,720
results<font color="#E5E5E5"> of the AES sbox</font>

258
00:12:40,330 --> 00:12:46,480
<font color="#E5E5E5">we again see that we succeeded in</font>

259
00:12:43,720 --> 00:12:50,760
bringing<font color="#E5E5E5"> down the cyclists</font><font color="#CCCCCC"> that we spend</font>

260
00:12:46,480 --> 00:12:58,660
on the S box<font color="#E5E5E5"> from</font><font color="#CCCCCC"> three to eight cycles</font>

261
00:12:50,760 --> 00:13:01,180
<font color="#CCCCCC">to only do below free however</font><font color="#E5E5E5"> again we</font>

262
00:12:58,660 --> 00:13:04,810
<font color="#E5E5E5">see that depending</font><font color="#CCCCCC"> on which actual</font>

263
00:13:01,180 --> 00:13:07,390
design we<font color="#CCCCCC"> use we have</font><font color="#E5E5E5"> quite some</font>

264
00:13:04,810 --> 00:13:10,869
overhead<font color="#E5E5E5"> in in terms of chip area and</font>

265
00:13:07,390 --> 00:13:13,689
retinas so this zero latency variant

266
00:13:10,870 --> 00:13:16,750
here was only<font color="#E5E5E5"> to show that in general</font>

267
00:13:13,690 --> 00:13:20,020
<font color="#E5E5E5">it's possible to create how to designs</font>

268
00:13:16,750 --> 00:13:20,560
in the<font color="#E5E5E5"> generics in</font><font color="#CCCCCC"> ask</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> higher order</font>

269
00:13:20,020 --> 00:13:22,779
design

270
00:13:20,560 --> 00:13:24,969
that don't require<font color="#E5E5E5"> any online</font><font color="#CCCCCC"> randomness</font>

271
00:13:22,779 --> 00:13:27,790
<font color="#E5E5E5">because we could continue with this</font>

272
00:13:24,970 --> 00:13:30,610
approach<font color="#CCCCCC"> as for the S box</font><font color="#E5E5E5"> for the rest</font>

273
00:13:27,790 --> 00:13:35,079
<font color="#E5E5E5">of the circuit but as you see we will</font>

274
00:13:30,610 --> 00:13:38,380
end up with quite<font color="#E5E5E5"> some chip area here</font><font color="#CCCCCC"> so</font>

275
00:13:35,080 --> 00:13:41,110
it's more<font color="#CCCCCC"> theoretical result finally</font><font color="#E5E5E5"> we</font>

276
00:13:38,380 --> 00:13:43,420
also did a<font color="#E5E5E5"> formal verification of our</font>

277
00:13:41,110 --> 00:13:45,730
designs so therefore we use<font color="#E5E5E5"> our tools</font>

278
00:13:43,420 --> 00:13:49,479
that will be<font color="#E5E5E5"> sent to Europe</font><font color="#CCCCCC"> this year</font>

279
00:13:45,730 --> 00:13:52,900
<font color="#CCCCCC">and this works by doing an approximation</font>

280
00:13:49,480 --> 00:13:55,050
<font color="#E5E5E5">of the Fourier</font><font color="#CCCCCC"> spectrum of the circuit</font>

281
00:13:52,900 --> 00:13:57,819
for all possible signal timings

282
00:13:55,050 --> 00:14:00,969
however for<font color="#CCCCCC"> largest circuits this can</font>

283
00:13:57,820 --> 00:14:03,029
take<font color="#CCCCCC"> quite some time</font><font color="#E5E5E5"> so we also gave</font><font color="#CCCCCC"> it</font>

284
00:14:00,970 --> 00:14:05,200
some thoughts on about how it can

285
00:14:03,029 --> 00:14:07,960
increase the verification speed

286
00:14:05,200 --> 00:14:11,370
especially<font color="#CCCCCC"> for this all our designs</font><font color="#E5E5E5"> that</font>

287
00:14:07,960 --> 00:14:15,040
we created<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we came up</font><font color="#E5E5E5"> with this idea</font>

288
00:14:11,370 --> 00:14:16,990
<font color="#CCCCCC">so since what we are actually trying to</font>

289
00:14:15,040 --> 00:14:19,959
do is we are<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to avoid collisions</font>

290
00:14:16,990 --> 00:14:22,089
<font color="#E5E5E5">of all of the</font><font color="#CCCCCC"> shares so what we can do</font>

291
00:14:19,960 --> 00:14:26,220
now<font color="#CCCCCC"> is we just split</font><font color="#E5E5E5"> up the whole</font>

292
00:14:22,089 --> 00:14:28,630
circuit into the domains we use and

293
00:14:26,220 --> 00:14:30,940
simply<font color="#E5E5E5"> by ensuring that there is no</font>

294
00:14:28,630 --> 00:14:34,300
connection<font color="#CCCCCC"> between either</font><font color="#E5E5E5"> of these</font>

295
00:14:30,940 --> 00:14:37,630
domains<font color="#E5E5E5"> we can give the security</font>

296
00:14:34,300 --> 00:14:41,020
<font color="#E5E5E5">guarantee that this is actually DeForest</font>

297
00:14:37,630 --> 00:14:44,250
secure and this turned out<font color="#E5E5E5"> to be quite</font>

298
00:14:41,020 --> 00:14:47,740
faster so we<font color="#CCCCCC"> verified the zero latency</font>

299
00:14:44,250 --> 00:14:51,460
<font color="#CCCCCC">AES sbox design in only</font><font color="#E5E5E5"> 11</font><font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> and</font>

300
00:14:47,740 --> 00:14:57,130
also verified the<font color="#E5E5E5"> ask us box up to order</font>

301
00:14:51,460 --> 00:14:59,620
<font color="#E5E5E5">free with both with both approaches so</font>

302
00:14:57,130 --> 00:15:02,260
this brings<font color="#E5E5E5"> me</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the conclusions so</font>

303
00:14:59,620 --> 00:15:04,540
what we demonstrated is this<font color="#E5E5E5"> the masking</font>

304
00:15:02,260 --> 00:15:07,390
does not always doesn't necessarily

305
00:15:04,540 --> 00:15:11,349
require any registers or<font color="#CCCCCC"> online</font>

306
00:15:07,390 --> 00:15:14,380
randomness however we see our

307
00:15:11,350 --> 00:15:17,770
contribution<font color="#CCCCCC"> really as to</font><font color="#E5E5E5"> give designers</font>

308
00:15:14,380 --> 00:15:20,610
of protected circuits a new design

309
00:15:17,770 --> 00:15:26,380
choice<font color="#CCCCCC"> for trading area and randomness</font>

310
00:15:20,610 --> 00:15:30,220
<font color="#E5E5E5">against latency and also this is only</font>

311
00:15:26,380 --> 00:15:33,850
our<font color="#CCCCCC"> first</font><font color="#E5E5E5"> approach into bringing this</font>

312
00:15:30,220 --> 00:15:34,360
low latency to generic designs<font color="#CCCCCC"> and so</font>

313
00:15:33,850 --> 00:15:37,660
there

314
00:15:34,360 --> 00:15:40,149
quite some open<font color="#CCCCCC"> questions and</font><font color="#E5E5E5"> if you're</font>

315
00:15:37,660 --> 00:15:41,350
<font color="#E5E5E5">interested in low latency masking then I</font>

316
00:15:40,149 --> 00:15:45,459
suggest<font color="#E5E5E5"> you have a look at the paper</font>

317
00:15:41,350 --> 00:15:48,010
<font color="#E5E5E5">because there we give a list on some</font>

318
00:15:45,459 --> 00:15:51,430
open<font color="#E5E5E5"> research questions that we think</font>

319
00:15:48,010 --> 00:16:06,420
will<font color="#CCCCCC"> be interesting in the future</font><font color="#E5E5E5"> thank</font>

320
00:15:51,430 --> 00:16:06,420
you questions comments

321
00:16:09,870 --> 00:16:19,690
throwing<font color="#E5E5E5"> cubes okay</font><font color="#CCCCCC"> then I have to have</font>

322
00:16:16,720 --> 00:16:22,750
you considered randomness recycling to

323
00:16:19,690 --> 00:16:24,610
cut the randomness down<font color="#E5E5E5"> no not really</font>

324
00:16:22,750 --> 00:16:27,399
<font color="#E5E5E5">sorry this would be one</font><font color="#CCCCCC"> of the open</font>

325
00:16:24,610 --> 00:16:28,899
research questions I'm sure<font color="#E5E5E5"> also we</font>

326
00:16:27,399 --> 00:16:30,940
tried<font color="#CCCCCC"> the quite straightforward approach</font>

327
00:16:28,899 --> 00:16:33,250
for this compression<font color="#E5E5E5"> where we didn't use</font>

328
00:16:30,940 --> 00:16:35,950
domain oriented masking<font color="#E5E5E5"> for that because</font>

329
00:16:33,250 --> 00:16:39,100
<font color="#E5E5E5">this would again cost us two sizes so we</font>

330
00:16:35,950 --> 00:16:41,560
used<font color="#E5E5E5"> a CMS for death but I'm pretty sure</font>

331
00:16:39,100 --> 00:16:43,839
<font color="#CCCCCC">that this is not the optimal choice</font><font color="#E5E5E5"> so I</font>

332
00:16:41,560 --> 00:16:46,839
<font color="#CCCCCC">think we</font><font color="#E5E5E5"> can bring</font><font color="#CCCCCC"> down the randomness</font>

333
00:16:43,839 --> 00:16:49,839
as well and also for the<font color="#E5E5E5"> AES sbox design</font>

334
00:16:46,839 --> 00:16:51,730
for example<font color="#E5E5E5"> the numbers seem really</font>

335
00:16:49,839 --> 00:16:55,300
impressive in<font color="#CCCCCC"> terms of</font><font color="#E5E5E5"> area and and</font>

336
00:16:51,730 --> 00:16:57,910
<font color="#E5E5E5">randomness but so it's important</font><font color="#CCCCCC"> to see</font>

337
00:16:55,300 --> 00:17:00,339
<font color="#CCCCCC">that we really try to go to an extreme</font>

338
00:16:57,910 --> 00:17:04,599
<font color="#CCCCCC">and just demonstrate that the scheme</font>

339
00:17:00,339 --> 00:17:07,299
<font color="#E5E5E5">itself is</font><font color="#CCCCCC"> working and</font><font color="#E5E5E5"> that the theory is</font>

340
00:17:04,599 --> 00:17:10,240
<font color="#CCCCCC">sound I'm</font><font color="#E5E5E5"> pretty sure that you will</font><font color="#CCCCCC"> find</font>

341
00:17:07,299 --> 00:17:14,650
or can with a with much more<font color="#E5E5E5"> effort</font>

342
00:17:10,240 --> 00:17:18,730
create more suitable<font color="#CCCCCC"> low latency design</font>

343
00:17:14,650 --> 00:17:21,839
based on this so for example<font color="#CCCCCC"> you can cut</font>

344
00:17:18,730 --> 00:17:26,740
off<font color="#CCCCCC"> the linear layer on on before of the</font>

345
00:17:21,839 --> 00:17:30,340
<font color="#CCCCCC">after AES</font><font color="#E5E5E5"> sbox so if you what is here</font>

346
00:17:26,740 --> 00:17:31,600
for example then<font color="#E5E5E5"> a lot of your of of</font>

347
00:17:30,340 --> 00:17:34,149
your variable collisions will

348
00:17:31,600 --> 00:17:36,580
immediately vanish<font color="#CCCCCC"> so we didn't consider</font>

349
00:17:34,150 --> 00:17:38,260
<font color="#E5E5E5">this in the first place</font><font color="#CCCCCC"> but this would</font>

350
00:17:36,580 --> 00:17:43,210
be<font color="#E5E5E5"> just one of the things you could try</font>

351
00:17:38,260 --> 00:17:43,770
<font color="#CCCCCC">for example</font><font color="#E5E5E5"> okay let's thank the speaker</font>

352
00:17:43,210 --> 00:17:44,660
you

353
00:17:43,770 --> 00:17:45,860
[Music]

354
00:17:44,660 --> 00:17:46,070
[Applause]

355
00:17:45,860 --> 00:17:50,409
[Music]

356
00:17:46,070 --> 00:17:50,409
[Applause]

