1
00:00:01,639 --> 00:00:09,360
the last<font color="#E5E5E5"> talk of the session is but</font>

2
00:00:06,089 --> 00:00:15,650
<font color="#CCCCCC">white-box implementation</font><font color="#E5E5E5"> how to attack</font>

3
00:00:09,360 --> 00:00:15,649
them the way Cobras<font color="#E5E5E5"> are fine</font><font color="#CCCCCC"> encoding</font>

4
00:00:15,949 --> 00:00:28,948
and<font color="#E5E5E5"> the talk will</font><font color="#CCCCCC"> be given by</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> Baptist</font>

5
00:00:19,890 --> 00:00:30,630
number so yeah<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will talk</font><font color="#CCCCCC"> about we</font>

6
00:00:28,949 --> 00:00:33,540
<font color="#E5E5E5">covenant colleagues in white boys</font>

7
00:00:30,630 --> 00:00:37,589
implementations and this is a joint<font color="#CCCCCC"> work</font>

8
00:00:33,540 --> 00:00:38,070
with<font color="#CCCCCC"> Pat Rita</font><font color="#E5E5E5"> beyond</font><font color="#CCCCCC"> fook</font><font color="#E5E5E5"> and bris</font>

9
00:00:37,590 --> 00:00:41,579
<font color="#CCCCCC">minnow</font>

10
00:00:38,070 --> 00:00:43,730
so I will first<font color="#CCCCCC"> start with a quick</font>

11
00:00:41,579 --> 00:00:46,170
introduction to<font color="#E5E5E5"> give a bit of context</font>

12
00:00:43,730 --> 00:00:49,379
then I will present<font color="#E5E5E5"> our generic</font>

13
00:00:46,170 --> 00:00:51,899
algorithm and do a quick part<font color="#E5E5E5"> but they</font>

14
00:00:49,379 --> 00:00:55,890
did a dedicated<font color="#E5E5E5"> attack we mounted on a</font>

15
00:00:51,899 --> 00:01:00,780
specific<font color="#E5E5E5"> white</font><font color="#CCCCCC"> board scheme so first</font>

16
00:00:55,890 --> 00:01:03,300
what is modern<font color="#E5E5E5"> so classically when we</font>

17
00:01:00,780 --> 00:01:06,090
study a block cipher<font color="#E5E5E5"> we are in the black</font>

18
00:01:03,300 --> 00:01:09,658
box model<font color="#E5E5E5"> so for example you have this</font>

19
00:01:06,090 --> 00:01:13,110
box which you<font color="#CCCCCC"> know those some</font><font color="#E5E5E5"> AES with</font>

20
00:01:09,659 --> 00:01:15,960
<font color="#CCCCCC">fixed</font><font color="#E5E5E5"> at key K and the attacker wants to</font>

21
00:01:13,110 --> 00:01:18,710
try<font color="#E5E5E5"> to recover this key and he can</font>

22
00:01:15,960 --> 00:01:21,990
<font color="#CCCCCC">unused inputs and outputs of the our</font>

23
00:01:18,710 --> 00:01:24,689
algorithm basically so this<font color="#E5E5E5"> is a</font>

24
00:01:21,990 --> 00:01:27,419
classical<font color="#E5E5E5"> model and it evolves recently</font>

25
00:01:24,689 --> 00:01:29,639
in the<font color="#E5E5E5"> gray box model well well the</font>

26
00:01:27,420 --> 00:01:31,710
<font color="#E5E5E5">hypotheses are the same except that now</font>

27
00:01:29,640 --> 00:01:35,630
you have also access to<font color="#CCCCCC"> some leakage</font>

28
00:01:31,710 --> 00:01:40,758
when the<font color="#E5E5E5"> computation is done so subtract</font>

29
00:01:35,630 --> 00:01:42,929
electromagnetics<font color="#E5E5E5"> power or whatever and</font>

30
00:01:40,759 --> 00:01:45,990
if you go a bit<font color="#CCCCCC"> further</font>

31
00:01:42,930 --> 00:01:49,530
then<font color="#E5E5E5"> you get white box so white box is</font>

32
00:01:45,990 --> 00:01:52,740
like the ultimate<font color="#E5E5E5"> gray box</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> just</font>

33
00:01:49,530 --> 00:01:54,960
access<font color="#CCCCCC"> to the implementation of this</font><font color="#E5E5E5"> box</font>

34
00:01:52,740 --> 00:01:57,899
you know<font color="#E5E5E5"> exactly all</font><font color="#CCCCCC"> it's implemented</font>

35
00:01:54,960 --> 00:02:01,649
and you could do whatever<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want with</font>

36
00:01:57,899 --> 00:02:04,439
it<font color="#E5E5E5"> you can set breakpoints</font><font color="#CCCCCC"> you can skip</font>

37
00:02:01,649 --> 00:02:07,229
<font color="#E5E5E5">an instruction you can even modify the</font>

38
00:02:04,439 --> 00:02:09,389
implementation if it can add<font color="#CCCCCC"> to tricks</font>

39
00:02:07,229 --> 00:02:11,250
are tricky<font color="#E5E5E5"> and</font><font color="#CCCCCC"> obviously you can read</font>

40
00:02:09,389 --> 00:02:13,589
the implementation so if the key<font color="#CCCCCC"> is like</font>

41
00:02:11,250 --> 00:02:16,430
just plain text<font color="#E5E5E5"> written it's</font>

42
00:02:13,590 --> 00:02:20,280
useless<font color="#E5E5E5"> so the goal of white boss</font>

43
00:02:16,430 --> 00:02:24,810
<font color="#CCCCCC">cryptography is to try to provide an</font>

44
00:02:20,280 --> 00:02:29,730
implementation which is<font color="#E5E5E5"> secure against</font>

45
00:02:24,810 --> 00:02:33,330
such attacks<font color="#CCCCCC"> so the attacker of</font><font color="#E5E5E5"> to as</font><font color="#CCCCCC"> to</font>

46
00:02:29,730 --> 00:02:36,530
<font color="#CCCCCC">girl as if you want to just extract some</font>

47
00:02:33,330 --> 00:02:39,569
key material so this<font color="#E5E5E5"> is like the best</font>

48
00:02:36,530 --> 00:02:43,769
<font color="#E5E5E5">the best way to attack it but you can</font>

49
00:02:39,569 --> 00:02:46,018
also just<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> compute the inverse of</font>

50
00:02:43,769 --> 00:02:48,750
the function<font color="#CCCCCC"> so for example if you're</font>

51
00:02:46,019 --> 00:02:52,380
given a white box implementation of an

52
00:02:48,750 --> 00:02:55,819
equation<font color="#E5E5E5"> you want to get the decryption</font>

53
00:02:52,380 --> 00:02:58,260
scheme while<font color="#CCCCCC"> you not a</font><font color="#E5E5E5"> lot forget it and</font>

54
00:02:55,819 --> 00:03:01,548
so the main application<font color="#CCCCCC"> of this is</font>

55
00:02:58,260 --> 00:03:05,179
<font color="#CCCCCC">probably digital rights management</font>

56
00:03:01,549 --> 00:03:09,360
<font color="#CCCCCC">because you need to do something on the</font>

57
00:03:05,180 --> 00:03:12,810
client side<font color="#E5E5E5"> and you can also think of it</font>

58
00:03:09,360 --> 00:03:16,079
<font color="#E5E5E5">as some form of first consume</font><font color="#CCCCCC"> for leaky</font>

59
00:03:12,810 --> 00:03:21,540
<font color="#CCCCCC">encryption</font><font color="#E5E5E5"> where your implementation is</font>

60
00:03:16,079 --> 00:03:27,389
your public<font color="#CCCCCC"> key but just like more any</font>

61
00:03:21,540 --> 00:03:32,430
stuff so yeah<font color="#E5E5E5"> there</font><font color="#CCCCCC"> were quite</font><font color="#E5E5E5"> a lot of</font>

62
00:03:27,389 --> 00:03:36,660
<font color="#E5E5E5">proposals for white box</font><font color="#CCCCCC"> the first one</font>

63
00:03:32,430 --> 00:03:39,480
was proposed<font color="#E5E5E5"> by Joe</font><font color="#CCCCCC"> returned in 2002 was</font>

64
00:03:36,660 --> 00:03:42,690
broken quickly afterwards<font color="#CCCCCC"> and after</font><font color="#E5E5E5"> that</font>

65
00:03:39,480 --> 00:03:45,988
several<font color="#E5E5E5"> well design came up mainly we</font>

66
00:03:42,690 --> 00:03:49,519
have<font color="#E5E5E5"> two strategies table lookup and SSA</font>

67
00:03:45,989 --> 00:03:53,970
<font color="#E5E5E5">like so as you can see basically</font>

68
00:03:49,519 --> 00:03:57,239
<font color="#E5E5E5">everything is broken</font><font color="#CCCCCC"> it's went on</font><font color="#E5E5E5"> five</font>

69
00:03:53,970 --> 00:03:59,849
<font color="#E5E5E5">for white box a few things</font><font color="#CCCCCC"> she'll stand</font>

70
00:03:57,239 --> 00:04:05,639
<font color="#E5E5E5">so we have the proposal Balby you</font><font color="#CCCCCC"> cough</font>

71
00:03:59,849 --> 00:04:11,970
<font color="#E5E5E5">it all at</font><font color="#CCCCCC"> task</font><font color="#E5E5E5"> 17 which</font><font color="#CCCCCC"> is just using</font><font color="#E5E5E5"> a</font>

72
00:04:05,639 --> 00:04:14,370
lot of SSRI<font color="#CCCCCC"> use its tend to go up</font>

73
00:04:11,970 --> 00:04:17,430
quickly in<font color="#E5E5E5"> terms of the size of the</font>

74
00:04:14,370 --> 00:04:18,840
<font color="#E5E5E5">implementations so it's a bit out use we</font>

75
00:04:17,430 --> 00:04:24,870
also have

76
00:04:18,839 --> 00:04:27,719
<font color="#E5E5E5">white block from Phuket</font><font color="#CCCCCC"> all it's proven</font>

77
00:04:24,870 --> 00:04:31,050
secure but<font color="#E5E5E5"> the modern is a bit odd and</font>

78
00:04:27,720 --> 00:04:34,080
it's not<font color="#E5E5E5"> exactly what I described just</font>

79
00:04:31,050 --> 00:04:36,900
<font color="#E5E5E5">before so it's kind of an oddball here</font>

80
00:04:34,080 --> 00:04:39,030
<font color="#CCCCCC">and otherwise</font><font color="#E5E5E5"> basically all the main</font>

81
00:04:36,900 --> 00:04:42,090
purpose of<font color="#CCCCCC"> word</font><font color="#E5E5E5"> broken and johnny was</font>

82
00:04:39,030 --> 00:04:45,869
the only one that lasted was the one

83
00:04:42,090 --> 00:04:48,210
from<font color="#E5E5E5"> back at all two years ago and this</font>

84
00:04:45,870 --> 00:04:52,470
<font color="#CCCCCC">is on this</font><font color="#E5E5E5"> game we mounted a dedicated</font>

85
00:04:48,210 --> 00:04:57,989
dedicated<font color="#E5E5E5"> other attack so I will focus</font>

86
00:04:52,470 --> 00:05:00,419
<font color="#E5E5E5">on table lookup and basically most table</font>

87
00:04:57,990 --> 00:05:04,410
lookup construction are based on the

88
00:05:00,419 --> 00:05:08,010
framework<font color="#E5E5E5"> from show so the issue of</font>

89
00:05:04,410 --> 00:05:10,050
<font color="#CCCCCC">ascator block cipher and to do so where</font>

90
00:05:08,010 --> 00:05:12,990
your block cipher can<font color="#E5E5E5"> be decomposed in</font>

91
00:05:10,050 --> 00:05:16,410
some<font color="#E5E5E5"> one function and you will just</font>

92
00:05:12,990 --> 00:05:19,320
<font color="#E5E5E5">obfuscate</font><font color="#CCCCCC"> each of those from just one</font>

93
00:05:16,410 --> 00:05:22,320
<font color="#E5E5E5">function independently in such a way</font>

94
00:05:19,320 --> 00:05:25,889
that once you<font color="#CCCCCC"> put them all together the</font>

95
00:05:22,320 --> 00:05:29,039
obfuscation we just<font color="#E5E5E5"> cancel and you still</font>

96
00:05:25,889 --> 00:05:34,470
have your block cipher and to obfuscate

97
00:05:29,039 --> 00:05:38,190
such this<font color="#CCCCCC"> front function</font><font color="#E5E5E5"> you will so</font>

98
00:05:34,470 --> 00:05:41,700
generate some<font color="#E5E5E5"> encoding so the</font><font color="#CCCCCC"> F</font><font color="#E5E5E5"> are in</font>

99
00:05:38,190 --> 00:05:45,300
the slide and implements you of skated

100
00:05:41,700 --> 00:05:48,659
on<font color="#E5E5E5"> friction</font><font color="#CCCCCC"> wins some tables</font><font color="#E5E5E5"> so just</font>

101
00:05:45,300 --> 00:05:51,690
plain table<font color="#E5E5E5"> and so to evaluate your blog</font>

102
00:05:48,660 --> 00:05:56,250
your<font color="#E5E5E5"> blog cipher it's just some table</font>

103
00:05:51,690 --> 00:05:59,160
lookup<font color="#CCCCCC"> a chain of table lookup and yeah</font>

104
00:05:56,250 --> 00:06:01,050
to increase a bit<font color="#E5E5E5"> of security so you</font>

105
00:05:59,160 --> 00:06:04,729
want<font color="#E5E5E5"> you don't want the attacker to have</font>

106
00:06:01,050 --> 00:06:07,740
access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> zero plain text of of zero</font>

107
00:06:04,729 --> 00:06:12,719
<font color="#CCCCCC">ciphertext</font><font color="#E5E5E5"> so you had some external</font>

108
00:06:07,740 --> 00:06:16,919
encoding so around the block cipher<font color="#E5E5E5"> now</font>

109
00:06:12,720 --> 00:06:20,400
the thing is<font color="#E5E5E5"> you can just pick the</font>

110
00:06:16,919 --> 00:06:23,549
<font color="#CCCCCC">encodings</font><font color="#E5E5E5"> at random</font><font color="#CCCCCC"> if you do that the</font>

111
00:06:20,400 --> 00:06:27,960
<font color="#E5E5E5">impression</font><font color="#CCCCCC"> will be way too huge</font><font color="#E5E5E5"> so you</font>

112
00:06:23,550 --> 00:06:31,469
need to get give a bit of<font color="#CCCCCC"> troops of</font>

113
00:06:27,960 --> 00:06:32,489
structure on<font color="#CCCCCC"> these also encodings</font><font color="#E5E5E5"> so</font>

114
00:06:31,469 --> 00:06:35,069
basically you

115
00:06:32,490 --> 00:06:40,530
split<font color="#E5E5E5"> them</font><font color="#CCCCCC"> in two parts - and the</font>

116
00:06:35,069 --> 00:06:42,419
nonlinear part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the encoding</font><font color="#E5E5E5"> and you</font>

117
00:06:40,530 --> 00:06:44,609
need to do this yeah to get efficient

118
00:06:42,419 --> 00:06:47,068
<font color="#E5E5E5">implementation but the thing is the non</font>

119
00:06:44,610 --> 00:06:50,910
yeah the nonlinear part can be<font color="#CCCCCC"> recovered</font>

120
00:06:47,069 --> 00:06:56,130
<font color="#E5E5E5">very</font><font color="#CCCCCC"> efficiently</font><font color="#E5E5E5"> from an algorithm by by</font>

121
00:06:50,910 --> 00:07:00,449
cattle and so most<font color="#E5E5E5"> of the times the our</font>

122
00:06:56,130 --> 00:07:04,530
part is to recover<font color="#E5E5E5"> the</font><font color="#CCCCCC"> F in part of your</font>

123
00:07:00,449 --> 00:07:08,310
<font color="#E5E5E5">n cuttings and if you think about this</font>

124
00:07:04,530 --> 00:07:09,179
problem in a<font color="#CCCCCC"> very generic</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> it was</font>

125
00:07:08,310 --> 00:07:13,860
actually<font color="#CCCCCC"> solved</font>

126
00:07:09,180 --> 00:07:17,610
baba<font color="#E5E5E5"> yaga fatale in 2003 so you can see</font>

127
00:07:13,860 --> 00:07:19,940
this program as<font color="#CCCCCC"> dead rabbit here</font><font color="#E5E5E5"> so you</font>

128
00:07:17,610 --> 00:07:23,610
<font color="#E5E5E5">have to buy</font><font color="#CCCCCC"> Direction</font><font color="#E5E5E5"> s 1 and n 2 and</font>

129
00:07:19,940 --> 00:07:27,060
you want to<font color="#CCCCCC"> firms F in mappings a and B</font>

130
00:07:23,610 --> 00:07:31,349
such<font color="#E5E5E5"> that</font><font color="#CCCCCC"> s 2 is</font><font color="#E5E5E5"> equal to B times s 1</font>

131
00:07:27,060 --> 00:07:35,159
times a yeah a<font color="#E5E5E5"> exists and so in our case</font>

132
00:07:31,349 --> 00:07:37,409
s 2 will be our<font color="#CCCCCC"> fiscal album friction</font>

133
00:07:35,159 --> 00:07:41,909
and s 1 will be the<font color="#E5E5E5"> original one</font>

134
00:07:37,409 --> 00:07:45,900
friction so this guy<font color="#CCCCCC"> rhythm is</font><font color="#E5E5E5"> well</font>

135
00:07:41,909 --> 00:07:48,900
<font color="#E5E5E5">known it works very well</font><font color="#CCCCCC"> but the</font>

136
00:07:45,900 --> 00:07:52,229
<font color="#E5E5E5">complexity is basically exponential in</font>

137
00:07:48,900 --> 00:07:56,669
the size of the function<font color="#CCCCCC"> and even with</font>

138
00:07:52,229 --> 00:07:58,770
the improvement by<font color="#E5E5E5"> dinner</font><font color="#CCCCCC"> last</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> its</font>

139
00:07:56,669 --> 00:08:03,270
exponential in the size of<font color="#E5E5E5"> the function</font>

140
00:07:58,770 --> 00:08:05,580
<font color="#E5E5E5">so if you think on to apply this on</font>

141
00:08:03,270 --> 00:08:09,060
<font color="#E5E5E5">block ciphers it's basically exponential</font>

142
00:08:05,580 --> 00:08:11,310
<font color="#E5E5E5">is the block size</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> even like 64 bits</font>

143
00:08:09,060 --> 00:08:19,909
<font color="#E5E5E5">it's way too huge to break in practice</font>

144
00:08:11,310 --> 00:08:23,580
and well this<font color="#E5E5E5"> is the problem we want</font><font color="#CCCCCC"> to</font>

145
00:08:19,909 --> 00:08:25,469
<font color="#CCCCCC">break but it turns out</font><font color="#E5E5E5"> that when applied</font>

146
00:08:23,580 --> 00:08:30,000
to wet work<font color="#E5E5E5"> trips</font><font color="#CCCCCC"> you on some block</font>

147
00:08:25,469 --> 00:08:34,169
ciphers<font color="#E5E5E5"> we don't we don't have a generic</font>

148
00:08:30,000 --> 00:08:38,219
instance of<font color="#E5E5E5"> algorithm we have an</font>

149
00:08:34,169 --> 00:08:40,020
instance which look like<font color="#E5E5E5"> this so if you</font>

150
00:08:38,219 --> 00:08:45,510
<font color="#E5E5E5">want to obfuscate</font><font color="#CCCCCC"> a block cipher</font>

151
00:08:40,020 --> 00:08:47,139
<font color="#E5E5E5">like a yes you will have in the middle</font>

152
00:08:45,510 --> 00:08:52,990
of your<font color="#CCCCCC"> one</font>

153
00:08:47,139 --> 00:08:58,269
layer of<font color="#CCCCCC"> s</font><font color="#E5E5E5"> boxes</font><font color="#CCCCCC"> and so our</font><font color="#E5E5E5"> middle layer</font>

154
00:08:52,990 --> 00:09:01,300
which was<font color="#CCCCCC"> s1 in the previous slide just</font>

155
00:08:58,269 --> 00:09:05,470
just not some random nonlinear part it's

156
00:09:01,300 --> 00:09:08,109
<font color="#E5E5E5">really a concatenation of some s box so</font>

157
00:09:05,470 --> 00:09:11,740
there is already a<font color="#E5E5E5"> bit of tree structure</font>

158
00:09:08,110 --> 00:09:13,389
<font color="#E5E5E5">in our</font><font color="#CCCCCC"> problem and so to assume the</font>

159
00:09:11,740 --> 00:09:17,709
<font color="#E5E5E5">problem is the</font><font color="#CCCCCC"> following so you are</font>

160
00:09:13,389 --> 00:09:20,649
given Z and<font color="#CCCCCC"> cutting one function f so</font>

161
00:09:17,709 --> 00:09:25,209
you<font color="#CCCCCC"> know it you know it's built as B</font>

162
00:09:20,649 --> 00:09:28,660
times this layer of<font color="#E5E5E5"> s box times</font><font color="#CCCCCC"> a B</font><font color="#E5E5E5"> and</font>

163
00:09:25,209 --> 00:09:32,229
a being<font color="#E5E5E5"> our</font><font color="#CCCCCC"> Fagin secrets</font><font color="#E5E5E5"> and you want</font>

164
00:09:28,660 --> 00:09:35,910
either to<font color="#E5E5E5"> find a way to invert this</font>

165
00:09:32,230 --> 00:09:39,190
function so<font color="#E5E5E5"> in the context of</font><font color="#CCCCCC"> whiteboard</font>

166
00:09:35,910 --> 00:09:41,980
<font color="#E5E5E5">cryptosystem</font><font color="#CCCCCC"> ssin function</font><font color="#E5E5E5"> or even try</font>

167
00:09:39,190 --> 00:09:46,000
to find<font color="#CCCCCC"> exactly which a</font><font color="#E5E5E5"> and B were used</font>

168
00:09:41,980 --> 00:09:49,300
and this can<font color="#CCCCCC"> lead to a key recovery</font><font color="#E5E5E5"> so</font>

169
00:09:46,000 --> 00:09:52,810
in our<font color="#E5E5E5"> case our generic algorithm</font><font color="#CCCCCC"> solves</font>

170
00:09:49,300 --> 00:09:59,339
<font color="#E5E5E5">the first</font><font color="#CCCCCC"> point so given such a function</font>

171
00:09:52,810 --> 00:10:03,550
<font color="#E5E5E5">we can efficiently get its inverse so we</font>

172
00:09:59,339 --> 00:10:06,160
get a give<font color="#E5E5E5"> oh it works so basically it's</font>

173
00:10:03,550 --> 00:10:10,060
a two-step algorithm first<font color="#E5E5E5"> to</font><font color="#CCCCCC"> isolate</font>

174
00:10:06,160 --> 00:10:12,069
the input our subspace<font color="#CCCCCC"> of each</font><font color="#E5E5E5"> s box and</font>

175
00:10:10,060 --> 00:10:17,560
insectary technique which was<font color="#E5E5E5"> known</font>

176
00:10:12,069 --> 00:10:21,459
since 2001<font color="#E5E5E5"> by Bill</font><font color="#CCCCCC"> Kevin chamois</font><font color="#E5E5E5"> when</font>

177
00:10:17,560 --> 00:10:23,050
they crypt analyzed sizes and once you

178
00:10:21,459 --> 00:10:24,880
did that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just need to apply</font><font color="#CCCCCC"> the</font>

179
00:10:23,050 --> 00:10:27,550
<font color="#E5E5E5">general caffeine equivalence a quiz I'm</font>

180
00:10:24,880 --> 00:10:29,709
a spoke about earlier<font color="#E5E5E5"> but this one not</font>

181
00:10:27,550 --> 00:10:34,000
<font color="#E5E5E5">on the whole block cipher but on each s</font>

182
00:10:29,709 --> 00:10:37,268
box which are a lot smaller<font color="#CCCCCC"> so</font><font color="#E5E5E5"> to get</font>

183
00:10:34,000 --> 00:10:41,819
the input<font color="#E5E5E5"> space of each s box the first</font>

184
00:10:37,269 --> 00:10:47,170
step is to find such space<font color="#CCCCCC"> for everyone</font>

185
00:10:41,819 --> 00:10:50,860
so this space<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> Leonel space yeah an</font>

186
00:10:47,170 --> 00:10:53,769
inner space<font color="#E5E5E5"> of differences and you want</font>

187
00:10:50,860 --> 00:10:58,160
that the image<font color="#CCCCCC"> the image of this place</font>

188
00:10:53,769 --> 00:11:04,180
through<font color="#E5E5E5"> a</font><font color="#CCCCCC"> leads to</font>

189
00:10:58,160 --> 00:11:09,920
M<font color="#CCCCCC"> 0 bits</font><font color="#E5E5E5"> M 0 consecutive bits</font><font color="#CCCCCC"> basically</font>

190
00:11:04,180 --> 00:11:15,279
the<font color="#E5E5E5"> difference as an input of 1s box is</font>

191
00:11:09,920 --> 00:11:18,790
<font color="#E5E5E5">0 so the</font><font color="#CCCCCC"> Z value is constant</font><font color="#E5E5E5"> and</font>

192
00:11:15,279 --> 00:11:22,550
otherwise it<font color="#E5E5E5"> takes also possible values</font>

193
00:11:18,790 --> 00:11:26,259
this link to a space of dimension<font color="#CCCCCC"> and</font><font color="#E5E5E5"> -</font>

194
00:11:22,550 --> 00:11:30,439
M after<font color="#E5E5E5"> a so since a must be invertible</font>

195
00:11:26,259 --> 00:11:34,790
<font color="#E5E5E5">v1 must be of dimension n</font><font color="#CCCCCC"> - m -</font><font color="#E5E5E5"> but now</font>

196
00:11:30,439 --> 00:11:37,610
<font color="#E5E5E5">all these boxes are by active so if the</font>

197
00:11:34,790 --> 00:11:40,370
<font color="#CCCCCC">input is</font><font color="#E5E5E5"> constant while the output list</font>

198
00:11:37,610 --> 00:11:42,850
is<font color="#E5E5E5"> 2 and if the rest takes all possible</font>

199
00:11:40,370 --> 00:11:46,250
values right so<font color="#CCCCCC"> does the output</font><font color="#E5E5E5"> and</font>

200
00:11:42,850 --> 00:11:50,000
again this goes to<font color="#E5E5E5"> b and b is invertible</font>

201
00:11:46,250 --> 00:11:53,180
<font color="#E5E5E5">so the resident in space u1 is also of</font>

202
00:11:50,000 --> 00:11:57,230
dimension n minus M so we use this to

203
00:11:53,180 --> 00:12:00,138
<font color="#E5E5E5">build everyone so we want to be first</font>

204
00:11:57,230 --> 00:12:03,889
<font color="#E5E5E5">such a space v1 and to do this we just</font>

205
00:12:00,139 --> 00:12:06,529
<font color="#E5E5E5">need to use a very</font><font color="#CCCCCC"> simple test</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font>

206
00:12:03,889 --> 00:12:09,050
want to<font color="#CCCCCC"> test</font><font color="#E5E5E5"> if differences belongs to V</font>

207
00:12:06,529 --> 00:12:10,089
1 we<font color="#CCCCCC"> just generate a bunch of random</font>

208
00:12:09,050 --> 00:12:13,130
vectors

209
00:12:10,089 --> 00:12:16,639
big enough so basically<font color="#E5E5E5"> a bit more than</font>

210
00:12:13,130 --> 00:12:19,009
n minus<font color="#CCCCCC"> m and we compute the resulting</font>

211
00:12:16,639 --> 00:12:22,339
output different space<font color="#E5E5E5"> so the difference</font>

212
00:12:19,009 --> 00:12:27,439
between<font color="#E5E5E5"> the image the image of each</font>

213
00:12:22,339 --> 00:12:32,269
vector F and the image<font color="#E5E5E5"> of X plus</font><font color="#CCCCCC"> Delta</font>

214
00:12:27,439 --> 00:12:34,730
and we compute the dimension of<font color="#E5E5E5"> silviana</font>

215
00:12:32,269 --> 00:12:38,480
space and generated<font color="#E5E5E5"> by this space you</font>

216
00:12:34,730 --> 00:12:43,069
<font color="#E5E5E5">and if it's of dimension n minus</font><font color="#CCCCCC"> M then</font>

217
00:12:38,480 --> 00:12:46,939
as shown here<font color="#CCCCCC"> the</font><font color="#E5E5E5"> result in space would</font>

218
00:12:43,069 --> 00:12:49,370
be<font color="#E5E5E5"> also same dimension so we guess</font><font color="#CCCCCC"> that</font>

219
00:12:46,939 --> 00:12:52,730
<font color="#E5E5E5">Delta will belong to V 1 with our</font>

220
00:12:49,370 --> 00:12:55,279
probability and<font color="#CCCCCC"> we can basically</font><font color="#E5E5E5"> address</font>

221
00:12:52,730 --> 00:12:58,939
this<font color="#E5E5E5"> probability as high as we want and</font>

222
00:12:55,279 --> 00:13:00,740
so<font color="#CCCCCC"> we just</font><font color="#E5E5E5"> need to disease with some</font>

223
00:12:58,939 --> 00:13:04,519
independent vectors to build the basis

224
00:13:00,740 --> 00:13:06,350
<font color="#E5E5E5">of V 1</font><font color="#CCCCCC"> and just</font><font color="#E5E5E5"> making sure</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font>

225
00:13:04,519 --> 00:13:10,220
<font color="#E5E5E5">output different space is always</font><font color="#CCCCCC"> the</font>

226
00:13:06,350 --> 00:13:11,430
<font color="#E5E5E5">same and while we do the</font><font color="#CCCCCC"> with this</font><font color="#E5E5E5"> for</font>

227
00:13:10,220 --> 00:13:15,360
everyone<font color="#E5E5E5"> which</font>

228
00:13:11,430 --> 00:13:18,540
led<font color="#E5E5E5"> 2-0 on</font><font color="#CCCCCC"> 1s</font><font color="#E5E5E5"> box as one but we can do</font>

229
00:13:15,360 --> 00:13:21,510
<font color="#CCCCCC">these</font><font color="#E5E5E5"> K times to get a space a space</font>

230
00:13:18,540 --> 00:13:24,719
which<font color="#CCCCCC"> offer zero difference</font><font color="#E5E5E5"> in each</font>

231
00:13:21,510 --> 00:13:28,890
<font color="#E5E5E5">chess box and once you have all those K</font>

232
00:13:24,720 --> 00:13:31,560
space well you can just<font color="#CCCCCC"> take the</font><font color="#E5E5E5"> at</font>

233
00:13:28,890 --> 00:13:35,370
intersection<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> of them except one</font>

234
00:13:31,560 --> 00:13:38,279
<font color="#E5E5E5">and basically this will put zero</font>

235
00:13:35,370 --> 00:13:41,790
<font color="#CCCCCC">difference in all these boxes except</font><font color="#E5E5E5"> one</font>

236
00:13:38,279 --> 00:13:44,550
<font color="#E5E5E5">for example the first one and so the</font>

237
00:13:41,790 --> 00:13:46,560
resulting input space will be of

238
00:13:44,550 --> 00:13:50,160
dimension<font color="#E5E5E5"> M because again everything</font>

239
00:13:46,560 --> 00:13:53,969
here is invertible<font color="#E5E5E5"> and the output space</font>

240
00:13:50,160 --> 00:13:57,449
or one will be of<font color="#CCCCCC"> dimension M 2 so you</font>

241
00:13:53,970 --> 00:14:00,540
now have a mapping<font color="#E5E5E5"> from an M</font><font color="#CCCCCC"> dimensional</font>

242
00:13:57,450 --> 00:14:04,350
<font color="#E5E5E5">linear space to another M dimensional</font>

243
00:14:00,540 --> 00:14:09,060
<font color="#CCCCCC">inner space</font><font color="#E5E5E5"> so you can compute some</font>

244
00:14:04,350 --> 00:14:12,510
projection P I and<font color="#E5E5E5"> Q I to send f-22 ZM</font>

245
00:14:09,060 --> 00:14:16,560
to the input<font color="#CCCCCC"> space and to send the</font>

246
00:14:12,510 --> 00:14:24,000
<font color="#CCCCCC">output space to f2 z mo but now what you</font>

247
00:14:16,560 --> 00:14:26,579
have is<font color="#CCCCCC"> basically a</font><font color="#E5E5E5"> maps on</font><font color="#CCCCCC"> M bits which</font>

248
00:14:24,000 --> 00:14:30,150
is often equivalent to one of the S box

249
00:14:26,580 --> 00:14:32,400
and so now you<font color="#E5E5E5"> can apply the F in</font>

250
00:14:30,150 --> 00:14:34,680
<font color="#CCCCCC">equivalence algorithm because it will</font>

251
00:14:32,400 --> 00:14:37,110
only<font color="#E5E5E5"> be</font><font color="#CCCCCC"> external shell in the</font><font color="#E5E5E5"> size of</font>

252
00:14:34,680 --> 00:14:41,579
<font color="#E5E5E5">the S box so basically</font><font color="#CCCCCC"> eight most of the</font>

253
00:14:37,110 --> 00:14:46,320
time and this<font color="#E5E5E5"> will give you some affine</font>

254
00:14:41,580 --> 00:14:49,230
map<font color="#CCCCCC"> I mappings ai ai and</font><font color="#E5E5E5"> bi and so you</font>

255
00:14:46,320 --> 00:14:52,740
do this<font color="#E5E5E5"> for each</font><font color="#CCCCCC"> s box so you will</font><font color="#E5E5E5"> get a</font>

256
00:14:49,230 --> 00:14:56,820
bunch of AI p AI bi q eyes so you know

257
00:14:52,740 --> 00:14:58,890
all of<font color="#E5E5E5"> them and you</font><font color="#CCCCCC"> just put</font><font color="#E5E5E5"> them</font>

258
00:14:56,820 --> 00:15:02,940
together correctly<font color="#E5E5E5"> and this will give</font>

259
00:14:58,890 --> 00:15:07,410
you<font color="#CCCCCC"> to F an F in mappings B Prime and</font><font color="#E5E5E5"> a</font>

260
00:15:02,940 --> 00:15:09,480
prime and you can now watch<font color="#CCCCCC"> F so</font><font color="#E5E5E5"> our on</font>

261
00:15:07,410 --> 00:15:14,069
cadet<font color="#CCCCCC"> word function</font><font color="#E5E5E5"> as before M</font><font color="#CCCCCC"> times</font>

262
00:15:09,480 --> 00:15:15,870
the layer of<font color="#E5E5E5"> s box times a prime now you</font>

263
00:15:14,070 --> 00:15:18,839
know<font color="#E5E5E5"> B prime you know</font><font color="#CCCCCC"> I plan there</font><font color="#E5E5E5"> are</font>

264
00:15:15,870 --> 00:15:21,959
fines<font color="#E5E5E5"> easy to invert and you know all</font>

265
00:15:18,839 --> 00:15:24,870
the S boxes and<font color="#CCCCCC"> just more set by</font>

266
00:15:21,959 --> 00:15:27,689
<font color="#CCCCCC">ejectives</font><font color="#E5E5E5"> you can compute the inverse to</font>

267
00:15:24,870 --> 00:15:32,220
so now you can<font color="#E5E5E5"> easily compute an inverse</font>

268
00:15:27,690 --> 00:15:36,540
of Z<font color="#E5E5E5"> uncle</font><font color="#CCCCCC"> Network function f as this</font>

269
00:15:32,220 --> 00:15:38,970
expression<font color="#E5E5E5"> so for each</font><font color="#CCCCCC"> account</font><font color="#E5E5E5"> that one</font>

270
00:15:36,540 --> 00:15:41,280
function we can actually compute its

271
00:15:38,970 --> 00:15:44,580
inverse<font color="#CCCCCC"> so we can compute</font><font color="#E5E5E5"> the whole</font>

272
00:15:41,280 --> 00:15:49,860
decryption algorithms so in terms of

273
00:15:44,580 --> 00:15:52,890
complexity<font color="#CCCCCC"> yeah to compare a bit with</font>

274
00:15:49,860 --> 00:15:54,750
what<font color="#CCCCCC"> were made before can see that that</font>

275
00:15:52,890 --> 00:15:56,580
don't have<font color="#E5E5E5"> that much time</font>

276
00:15:54,750 --> 00:16:01,020
basically everything before was

277
00:15:56,580 --> 00:16:04,560
exponential complexity of<font color="#E5E5E5"> by</font><font color="#CCCCCC"> cataclysm</font>

278
00:16:01,020 --> 00:16:07,439
may seems polynomial with the first term

279
00:16:04,560 --> 00:16:11,040
<font color="#E5E5E5">but it's actually high degrees it's</font>

280
00:16:07,440 --> 00:16:12,630
quite an effective when n is<font color="#CCCCCC"> large so in</font>

281
00:16:11,040 --> 00:16:15,150
the base case<font color="#CCCCCC"> we have the following</font>

282
00:16:12,630 --> 00:16:18,360
<font color="#E5E5E5">complexity basically point on you're in</font>

283
00:16:15,150 --> 00:16:22,170
<font color="#CCCCCC">N and just exponential is the size of</font>

284
00:16:18,360 --> 00:16:24,840
the S box so this<font color="#E5E5E5"> is if all this box</font><font color="#CCCCCC"> are</font>

285
00:16:22,170 --> 00:16:30,589
the<font color="#E5E5E5"> same if you have some different s</font>

286
00:16:24,840 --> 00:16:36,990
box you just get a linear<font color="#CCCCCC"> factor K which</font>

287
00:16:30,590 --> 00:16:41,390
<font color="#E5E5E5">translate to</font><font color="#CCCCCC"> m2 times n</font><font color="#E5E5E5"> + 3 n 2m x + 2</font>

288
00:16:36,990 --> 00:16:46,440
and<font color="#E5E5E5"> in the worst case which is actually</font>

289
00:16:41,390 --> 00:16:48,540
the<font color="#E5E5E5"> case with</font><font color="#CCCCCC"> Java SE es x box you can't</font>

290
00:16:46,440 --> 00:16:51,660
apply you<font color="#CCCCCC"> can choose the improvement by</font>

291
00:16:48,540 --> 00:16:53,730
dinner<font color="#E5E5E5"> metal by dinner advocate so you</font>

292
00:16:51,660 --> 00:16:57,839
have<font color="#E5E5E5"> a factor 2</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> exponents on</font><font color="#CCCCCC"> the</font>

293
00:16:53,730 --> 00:17:00,840
last term and in practice if you look at

294
00:16:57,840 --> 00:17:03,720
<font color="#E5E5E5">this for a yes parameters so this lead</font>

295
00:17:00,840 --> 00:17:07,740
<font color="#E5E5E5">to</font><font color="#CCCCCC"> only 2 to the 30</font><font color="#E5E5E5"> operations</font><font color="#CCCCCC"> two</font>

296
00:17:03,720 --> 00:17:10,770
<font color="#E5E5E5">events to invert one one function and if</font>

297
00:17:07,740 --> 00:17:14,520
you look at back at<font color="#E5E5E5"> our proposal so</font>

298
00:17:10,770 --> 00:17:19,170
which use twice the block size<font color="#CCCCCC"> it just</font>

299
00:17:14,520 --> 00:17:21,270
<font color="#CCCCCC">two to the 35</font><font color="#E5E5E5"> so I don't have much time</font>

300
00:17:19,170 --> 00:17:24,750
remaining<font color="#CCCCCC"> so just quickly the idea of</font>

301
00:17:21,270 --> 00:17:28,220
<font color="#CCCCCC">back at all was to</font><font color="#E5E5E5"> obfuscate to power</font>

302
00:17:24,750 --> 00:17:32,370
that<font color="#CCCCCC"> is to increase the block size and</font>

303
00:17:28,220 --> 00:17:36,000
may as I made a security claim of 110

304
00:17:32,370 --> 00:17:38,280
bits but so again you need to<font color="#E5E5E5"> structure</font>

305
00:17:36,000 --> 00:17:42,450
the encoding<font color="#E5E5E5"> so the matrix</font>

306
00:17:38,280 --> 00:17:45,120
<font color="#E5E5E5">the</font><font color="#CCCCCC"> matrix Hey so this matrix of the</font>

307
00:17:42,450 --> 00:17:48,030
following form<font color="#CCCCCC"> in the top right so each</font>

308
00:17:45,120 --> 00:17:49,919
star is some a big block

309
00:17:48,030 --> 00:17:52,410
I'd been nonzero block and also<font color="#E5E5E5"> wise</font>

310
00:17:49,920 --> 00:17:55,590
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> all 0 and the ID is basically the</font>

311
00:17:52,410 --> 00:17:58,710
same as<font color="#E5E5E5"> the algorithm except that now</font>

312
00:17:55,590 --> 00:18:05,010
you can<font color="#E5E5E5"> use the structure to actually</font>

313
00:17:58,710 --> 00:18:06,960
identify exactly which encoding were

314
00:18:05,010 --> 00:18:10,530
used using some meat in<font color="#E5E5E5"> the middle</font>

315
00:18:06,960 --> 00:18:14,000
technique and<font color="#E5E5E5"> these allow you allow us</font>

316
00:18:10,530 --> 00:18:17,100
<font color="#CCCCCC">to recover</font><font color="#E5E5E5"> the key more efficiently</font><font color="#CCCCCC"> and</font>

317
00:18:14,000 --> 00:18:20,040
so this was implemented<font color="#E5E5E5"> it's quite short</font>

318
00:18:17,100 --> 00:18:22,740
only<font color="#CCCCCC"> 2,000 line and basic thing is over</font>

319
00:18:20,040 --> 00:18:26,580
<font color="#CCCCCC">our complexity is 2 to the 31</font><font color="#E5E5E5"> it's 1</font><font color="#CCCCCC"> in</font>

320
00:18:22,740 --> 00:18:28,500
12 seconds<font color="#E5E5E5"> times</font><font color="#CCCCCC"> almost no memory</font><font color="#E5E5E5"> it's a</font>

321
00:18:26,580 --> 00:18:30,990
variable online if you want<font color="#E5E5E5"> to take a</font>

322
00:18:28,500 --> 00:18:35,010
<font color="#E5E5E5">look at it and it's basically impossible</font>

323
00:18:30,990 --> 00:18:38,370
to fix<font color="#E5E5E5"> in with an element of memory so</font>

324
00:18:35,010 --> 00:18:43,460
yeah I think I will<font color="#E5E5E5"> be done</font>

325
00:18:38,370 --> 00:18:45,540
I just<font color="#CCCCCC"> leave</font><font color="#E5E5E5"> this summary slide which I</font>

326
00:18:43,460 --> 00:18:54,050
<font color="#E5E5E5">sum up about everything</font>

327
00:18:45,540 --> 00:18:54,050
thank you thank<font color="#E5E5E5"> you for the talk</font>

328
00:18:54,200 --> 00:19:08,450
<font color="#E5E5E5">question question the</font><font color="#CCCCCC"> comment and maybe</font>

329
00:19:04,200 --> 00:19:10,800
one<font color="#CCCCCC"> question do you think that there are</font>

330
00:19:08,450 --> 00:19:14,580
possible improvement for for the

331
00:19:10,800 --> 00:19:15,750
offending encoding in order<font color="#E5E5E5"> to defeat do</font>

332
00:19:14,580 --> 00:19:18,330
you think that it's<font color="#E5E5E5"> still a good</font>

333
00:19:15,750 --> 00:19:20,900
strategy to<font color="#CCCCCC"> use a fan encoding</font><font color="#E5E5E5"> to to</font>

334
00:19:18,330 --> 00:19:23,480
implement<font color="#CCCCCC"> my rocks</font>

335
00:19:20,900 --> 00:19:27,170
there are some some way out<font color="#E5E5E5"> to adopt</font>

336
00:19:23,480 --> 00:19:30,830
them<font color="#E5E5E5"> to attack honestly I think I find</font><font color="#CCCCCC"> a</font>

337
00:19:27,170 --> 00:19:32,960
<font color="#CCCCCC">contains</font><font color="#E5E5E5"> are like not useful</font><font color="#CCCCCC"> you will</font>

338
00:19:30,830 --> 00:19:34,490
get them if you<font color="#CCCCCC"> some you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> non-local</font>

339
00:19:32,960 --> 00:19:39,080
things because there is already<font color="#CCCCCC"> enough</font>

340
00:19:34,490 --> 00:19:42,020
<font color="#CCCCCC">in part but honestly to get some high</font>

341
00:19:39,080 --> 00:19:46,790
complexity with our algorithm you need

342
00:19:42,020 --> 00:19:50,450
to have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> huge s box which lead to a</font>

343
00:19:46,790 --> 00:19:53,510
<font color="#E5E5E5">huge sum your stables all</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> block size</font>

344
00:19:50,450 --> 00:19:57,470
which<font color="#E5E5E5"> basically doesn't</font><font color="#CCCCCC"> scale up very</font>

345
00:19:53,510 --> 00:20:01,190
very<font color="#E5E5E5"> well so I think the only way is to</font>

346
00:19:57,470 --> 00:20:04,370
<font color="#CCCCCC">either use much bigger nonlinear</font>

347
00:20:01,190 --> 00:20:08,450
encodings but again the size of the

348
00:20:04,370 --> 00:20:13,159
<font color="#CCCCCC">implementation across up quickly</font><font color="#E5E5E5"> so yeah</font>

349
00:20:08,450 --> 00:20:15,170
a temple based is like mostly<font color="#E5E5E5"> dead some</font>

350
00:20:13,160 --> 00:20:17,600
<font color="#E5E5E5">association could be polynomial</font><font color="#CCCCCC"> base</font>

351
00:20:15,170 --> 00:20:20,780
like as I say<font color="#CCCCCC"> so the proposal by Buick</font>

352
00:20:17,600 --> 00:20:23,389
of shook out but I think<font color="#CCCCCC"> the best way to</font>

353
00:20:20,780 --> 00:20:26,420
do with white box now would<font color="#CCCCCC"> be to focus</font>

354
00:20:23,390 --> 00:20:28,190
<font color="#E5E5E5">on finding a new paradigm actually</font><font color="#CCCCCC"> okay</font>

355
00:20:26,420 --> 00:20:32,240
<font color="#E5E5E5">where you finding and your things to do</font>

356
00:20:28,190 --> 00:20:34,630
<font color="#E5E5E5">okay thank you good thanks the speaker</font>

357
00:20:32,240 --> 00:20:34,630
again<font color="#E5E5E5"> and</font>

358
00:20:36,750 --> 00:20:38,810
you

