1
00:00:00,410 --> 00:00:06,240
so then we're already<font color="#E5E5E5"> at the last talk</font>

2
00:00:03,240 --> 00:00:10,650
<font color="#CCCCCC">of this first</font><font color="#E5E5E5"> part of the post quantum</font>

3
00:00:06,240 --> 00:00:14,099
session so moving back from<font color="#CCCCCC"> si</font><font color="#E5E5E5"> th back</font>

4
00:00:10,650 --> 00:00:15,660
to lettuces<font color="#E5E5E5"> sort of this talks about</font>

5
00:00:14,099 --> 00:00:18,930
differential fault attacks on

6
00:00:15,660 --> 00:00:21,210
deterministic<font color="#CCCCCC"> lattice signatures</font><font color="#E5E5E5"> so this</font>

7
00:00:18,930 --> 00:00:23,430
is a work by<font color="#CCCCCC"> Leon Cloud blending and</font>

8
00:00:21,210 --> 00:00:26,699
Peter pestle<font color="#E5E5E5"> and Peter will give</font><font color="#CCCCCC"> two</font>

9
00:00:23,430 --> 00:00:28,680
talk<font color="#CCCCCC"> thank you for the introduction</font><font color="#E5E5E5"> so</font>

10
00:00:26,699 --> 00:00:31,170
it's<font color="#E5E5E5"> probably not a well-kept secret</font>

11
00:00:28,680 --> 00:00:34,380
anymore<font color="#E5E5E5"> that many digital signature</font>

12
00:00:31,170 --> 00:00:36,950
schemes<font color="#E5E5E5"> are susceptible to nonce reuse</font>

13
00:00:34,380 --> 00:00:39,809
<font color="#E5E5E5">so if you sign two different messages</font>

14
00:00:36,950 --> 00:00:42,390
<font color="#E5E5E5">using the same nonce and you can't and</font>

15
00:00:39,809 --> 00:00:45,059
easily recover the secret<font color="#E5E5E5"> key and this</font>

16
00:00:42,390 --> 00:00:47,700
happened<font color="#CCCCCC"> in the past a solution</font><font color="#E5E5E5"> to this</font>

17
00:00:45,059 --> 00:00:49,649
problem<font color="#E5E5E5"> is</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> the whole signature</font>

18
00:00:47,700 --> 00:00:52,649
<font color="#E5E5E5">scheme completely deterministic so</font>

19
00:00:49,649 --> 00:00:56,969
instead of using a random nonce you

20
00:00:52,649 --> 00:00:59,370
derive it by hashing<font color="#E5E5E5"> the message m</font>

21
00:00:56,969 --> 00:01:02,010
together with some<font color="#E5E5E5"> secret</font><font color="#CCCCCC"> K and that's</font>

22
00:00:59,370 --> 00:01:05,789
<font color="#E5E5E5">what's actually already done in at PSA</font>

23
00:01:02,010 --> 00:01:08,539
and<font color="#E5E5E5"> deterministic ECDSA now this is all</font>

24
00:01:05,790 --> 00:01:10,290
nice but<font color="#CCCCCC"> it also opens a problem that of</font>

25
00:01:08,540 --> 00:01:13,520
differential fault attacks

26
00:01:10,290 --> 00:01:17,640
namely you can<font color="#E5E5E5"> sign the same message</font><font color="#CCCCCC"> m</font>

27
00:01:13,520 --> 00:01:19,229
<font color="#E5E5E5">yeah same message</font><font color="#CCCCCC"> M twice this means you</font>

28
00:01:17,640 --> 00:01:21,900
will get the same nonce<font color="#E5E5E5"> it's</font>

29
00:01:19,229 --> 00:01:23,780
deterministic<font color="#E5E5E5"> and then you induce some</font>

30
00:01:21,900 --> 00:01:25,439
sort<font color="#E5E5E5"> of computational fault</font><font color="#CCCCCC"> after</font>

31
00:01:23,780 --> 00:01:28,110
<font color="#CCCCCC">computing</font><font color="#E5E5E5"> this nonce</font>

32
00:01:25,439 --> 00:01:30,419
so<font color="#E5E5E5"> you will have what looks like a</font>

33
00:01:28,110 --> 00:01:31,860
different<font color="#E5E5E5"> message so you will have</font>

34
00:01:30,420 --> 00:01:33,990
announced<font color="#E5E5E5"> reuse for different message</font>

35
00:01:31,860 --> 00:01:35,759
and you can recover<font color="#E5E5E5"> the key now this</font>

36
00:01:33,990 --> 00:01:38,548
scenario was already explored for

37
00:01:35,759 --> 00:01:40,530
elliptic<font color="#CCCCCC"> curve based schemes but then we</font>

38
00:01:38,549 --> 00:01:42,360
have<font color="#E5E5E5"> to ask you questions</font><font color="#CCCCCC"> is it specific</font>

39
00:01:40,530 --> 00:01:44,759
to elliptic curve so can we do<font color="#E5E5E5"> it on</font>

40
00:01:42,360 --> 00:01:47,159
other schemes as well and that's of

41
00:01:44,759 --> 00:01:50,490
course<font color="#E5E5E5"> where</font><font color="#CCCCCC"> the lettuce</font><font color="#E5E5E5"> has come in so</font>

42
00:01:47,159 --> 00:01:52,409
what we do is we extend differential

43
00:01:50,490 --> 00:01:54,658
<font color="#CCCCCC">falta text to deterministic lattice</font>

44
00:01:52,409 --> 00:01:57,570
signatures namely<font color="#E5E5E5"> to Delhi</font><font color="#CCCCCC"> fume you</font>

45
00:01:54,659 --> 00:02:01,740
should have heard of the<font color="#E5E5E5"> lithium and</font><font color="#CCCCCC"> 2q</font>

46
00:01:57,570 --> 00:02:04,369
Tesla<font color="#CCCCCC"> both of</font><font color="#E5E5E5"> which were</font><font color="#CCCCCC"> submitted to</font>

47
00:02:01,740 --> 00:02:09,508
the<font color="#E5E5E5"> NIST competition or missed call and</font>

48
00:02:04,369 --> 00:02:11,520
are both<font color="#E5E5E5"> deterministic now that such</font>

49
00:02:09,508 --> 00:02:13,410
differential fault attacks are<font color="#CCCCCC"> possible</font>

50
00:02:11,520 --> 00:02:14,010
here<font color="#E5E5E5"> isn't all that</font><font color="#CCCCCC"> surprising given</font>

51
00:02:13,410 --> 00:02:16,380
<font color="#E5E5E5">that</font>

52
00:02:14,010 --> 00:02:18,149
the<font color="#CCCCCC"> Liam</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Q Tesla</font><font color="#E5E5E5"> shares some design</font>

53
00:02:16,380 --> 00:02:21,239
similarities<font color="#E5E5E5"> to their elliptic curve</font>

54
00:02:18,150 --> 00:02:24,920
counterparts<font color="#E5E5E5"> but there are some design</font>

55
00:02:21,239 --> 00:02:27,750
peculiarities<font color="#CCCCCC"> that set them apart from</font>

56
00:02:24,920 --> 00:02:30,329
<font color="#E5E5E5">ECC like for instance rejection sampling</font>

57
00:02:27,750 --> 00:02:34,350
<font color="#CCCCCC">key compression and it's also possible</font>

58
00:02:30,330 --> 00:02:36,870
to<font color="#E5E5E5"> derive</font><font color="#CCCCCC"> some more efficient and new</font>

59
00:02:34,350 --> 00:02:40,590
attack puffs like<font color="#E5E5E5"> efficient exploitation</font>

60
00:02:36,870 --> 00:02:44,720
of partial nonce reuse<font color="#E5E5E5"> okay so in this</font>

61
00:02:40,590 --> 00:02:47,250
work we focus<font color="#E5E5E5"> on</font><font color="#CCCCCC"> mainly de téléphone</font>

62
00:02:44,720 --> 00:02:49,319
<font color="#E5E5E5">which is why I'm not going to explain it</font>

63
00:02:47,250 --> 00:02:51,480
<font color="#CCCCCC">very</font><font color="#E5E5E5"> little so you've already heard some</font>

64
00:02:49,319 --> 00:02:54,119
<font color="#E5E5E5">stuff with just some things</font><font color="#CCCCCC"> that have</font>

65
00:02:51,480 --> 00:02:56,760
not<font color="#E5E5E5"> been said yet</font><font color="#CCCCCC"> but all our texts</font>

66
00:02:54,120 --> 00:02:58,470
carry over to<font color="#CCCCCC"> Q Tesla as well in</font><font color="#E5E5E5"> a quite</font>

67
00:02:56,760 --> 00:03:01,350
<font color="#CCCCCC">straightforward</font><font color="#E5E5E5"> men are they both</font>

68
00:02:58,470 --> 00:03:04,620
signature schemes are somewhat similar

69
00:03:01,350 --> 00:03:07,620
now the lithium is based on our<font color="#E5E5E5"> module</font>

70
00:03:04,620 --> 00:03:10,290
<font color="#CCCCCC">lwe assumption so it has polynomials</font>

71
00:03:07,620 --> 00:03:12,510
with some base ring which<font color="#CCCCCC"> is at least</font>

72
00:03:10,290 --> 00:03:15,179
<font color="#CCCCCC">four let's paste signal Letta</font><font color="#E5E5E5"> space</font>

73
00:03:12,510 --> 00:03:17,010
<font color="#CCCCCC">crypto crowd cryptography</font><font color="#E5E5E5"> somewhat small</font>

74
00:03:15,180 --> 00:03:20,160
and<font color="#CCCCCC"> ten it works with vectors and</font>

75
00:03:17,010 --> 00:03:23,100
<font color="#CCCCCC">matrices of</font><font color="#E5E5E5"> these polynomials so in key</font>

76
00:03:20,160 --> 00:03:25,920
<font color="#E5E5E5">generation you</font><font color="#CCCCCC"> have two vectors of</font>

77
00:03:23,100 --> 00:03:28,108
polynomials with somewhat small

78
00:03:25,920 --> 00:03:30,929
<font color="#CCCCCC">coefficients so</font><font color="#E5E5E5"> they're in a</font><font color="#CCCCCC"> specific</font>

79
00:03:28,109 --> 00:03:34,019
range and you have a random<font color="#E5E5E5"> and public a</font>

80
00:03:30,930 --> 00:03:38,880
so a matrix<font color="#CCCCCC"> of polynomial</font><font color="#E5E5E5"> and the public</font>

81
00:03:34,019 --> 00:03:40,380
key is a<font color="#E5E5E5"> s1 plus s2 so I wasn't what</font>

82
00:03:38,880 --> 00:03:42,079
hasn't been<font color="#CCCCCC"> said yet in the previous</font>

83
00:03:40,380 --> 00:03:44,100
presentation is it that it uses

84
00:03:42,079 --> 00:03:47,010
determinism to protect against

85
00:03:44,100 --> 00:03:50,790
randomness<font color="#E5E5E5"> not only that but I'll come</font>

86
00:03:47,010 --> 00:03:53,790
to<font color="#CCCCCC"> that later okay so this is</font><font color="#E5E5E5"> the main</font>

87
00:03:50,790 --> 00:03:55,798
<font color="#E5E5E5">framework of the lithium so first with</font>

88
00:03:53,790 --> 00:03:59,429
the<font color="#E5E5E5"> first two is your sample</font><font color="#CCCCCC"> this nonce</font>

89
00:03:55,799 --> 00:04:01,200
<font color="#E5E5E5">Y in a deterministic</font><font color="#CCCCCC"> fashion so you can</font>

90
00:03:59,430 --> 00:04:05,150
also call this the<font color="#CCCCCC"> noise whatever you</font>

91
00:04:01,200 --> 00:04:08,819
fancy<font color="#CCCCCC"> then you multiply it</font><font color="#E5E5E5"> with this a</font>

92
00:04:05,150 --> 00:04:11,010
hash it together with the message<font color="#E5E5E5"> to get</font>

93
00:04:08,819 --> 00:04:14,458
the C and then<font color="#E5E5E5"> you compute set equals y</font>

94
00:04:11,010 --> 00:04:17,969
plus<font color="#E5E5E5"> Z</font><font color="#CCCCCC"> cs1 so in other words it's a</font>

95
00:04:14,459 --> 00:04:20,639
future<font color="#CCCCCC"> - no like signature</font><font color="#E5E5E5"> scheme but</font>

96
00:04:17,970 --> 00:04:22,710
what's new in the lithium or<font color="#CCCCCC"> what what's</font>

97
00:04:20,639 --> 00:04:26,120
common in many letters<font color="#CCCCCC"> based signatures</font>

98
00:04:22,710 --> 00:04:27,690
is this rejection sampling so where you

99
00:04:26,120 --> 00:04:30,270
test if

100
00:04:27,690 --> 00:04:33,440
your<font color="#CCCCCC"> output that follows some</font>

101
00:04:30,270 --> 00:04:37,680
<font color="#CCCCCC">distribution and if it</font><font color="#E5E5E5"> doesn't then you</font>

102
00:04:33,440 --> 00:04:39,719
restart<font color="#E5E5E5"> this whole same signing</font><font color="#CCCCCC"> process</font>

103
00:04:37,680 --> 00:04:41,850
and in<font color="#E5E5E5"> the lithium this rejection</font>

104
00:04:39,720 --> 00:04:47,820
sampling is essentially<font color="#CCCCCC"> just an</font>

105
00:04:41,850 --> 00:04:51,900
<font color="#E5E5E5">coefficient price range check now since</font>

106
00:04:47,820 --> 00:04:54,360
this is this sampling of the notes<font color="#CCCCCC"> Y is</font>

107
00:04:51,900 --> 00:04:56,760
deterministic<font color="#CCCCCC"> it's easy to see</font><font color="#E5E5E5"> that well</font>

108
00:04:54,360 --> 00:04:58,830
if you have the same message<font color="#CCCCCC"> M</font><font color="#E5E5E5"> you get</font>

109
00:04:56,760 --> 00:05:01,530
the same<font color="#E5E5E5"> y and the system kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a</font>

110
00:04:58,830 --> 00:05:04,770
<font color="#E5E5E5">nonce reuse but of course you can't use</font>

111
00:05:01,530 --> 00:05:06,659
a nonce reuse if you don't have<font color="#E5E5E5"> anything</font>

112
00:05:04,770 --> 00:05:08,969
else you get<font color="#E5E5E5"> the same output you can't</font>

113
00:05:06,660 --> 00:05:11,550
extract any useful information<font color="#CCCCCC"> from</font><font color="#E5E5E5"> that</font>

114
00:05:08,970 --> 00:05:14,670
<font color="#E5E5E5">so you have to change</font><font color="#CCCCCC"> something else and</font>

115
00:05:11,550 --> 00:05:17,340
you do this<font color="#CCCCCC"> by injecting a computational</font>

116
00:05:14,670 --> 00:05:18,810
fault so in the case<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> lithium this</font>

117
00:05:17,340 --> 00:05:22,919
would something<font color="#E5E5E5"> look like something like</font>

118
00:05:18,810 --> 00:05:26,190
<font color="#CCCCCC">this</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> have one message M you sign</font>

119
00:05:22,920 --> 00:05:28,950
this twice once just regularly<font color="#E5E5E5"> and the</font>

120
00:05:26,190 --> 00:05:31,440
second time<font color="#E5E5E5"> you compute the signature</font>

121
00:05:28,950 --> 00:05:36,090
but you<font color="#CCCCCC"> inject a fault</font><font color="#E5E5E5"> such that the</font>

122
00:05:31,440 --> 00:05:39,510
nonce<font color="#CCCCCC"> Y is identical but that</font><font color="#E5E5E5"> Z</font><font color="#CCCCCC"> is</font>

123
00:05:36,090 --> 00:05:42,000
something different<font color="#CCCCCC"> then you can set up</font>

124
00:05:39,510 --> 00:05:45,200
<font color="#E5E5E5">these two equations</font><font color="#CCCCCC"> set equals y cs1</font>

125
00:05:42,000 --> 00:05:47,700
once<font color="#E5E5E5"> without fold</font><font color="#CCCCCC"> once with a fault</font>

126
00:05:45,200 --> 00:05:51,240
<font color="#E5E5E5">subtract one another since</font><font color="#CCCCCC"> y</font><font color="#E5E5E5"> is</font>

127
00:05:47,700 --> 00:05:53,430
identical it cancels out and then you

128
00:05:51,240 --> 00:05:55,770
what what you<font color="#E5E5E5"> have left is a system in</font>

129
00:05:53,430 --> 00:05:58,560
<font color="#E5E5E5">which</font><font color="#CCCCCC"> the only unknown is the private</font>

130
00:05:55,770 --> 00:06:01,229
key so<font color="#CCCCCC"> you can easily recover</font><font color="#E5E5E5"> this</font>

131
00:05:58,560 --> 00:06:05,240
private key<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> quite similar to</font>

132
00:06:01,230 --> 00:06:08,700
<font color="#E5E5E5">what happened in the ECC case</font><font color="#CCCCCC"> something</font>

133
00:06:05,240 --> 00:06:10,350
about lithium<font color="#E5E5E5"> is that it uses key</font>

134
00:06:08,700 --> 00:06:13,140
compression and to do this<font color="#E5E5E5"> key</font>

135
00:06:10,350 --> 00:06:17,880
compression you can't easily recover

136
00:06:13,140 --> 00:06:21,479
<font color="#E5E5E5">this second key part</font><font color="#CCCCCC"> s2</font><font color="#E5E5E5"> but in the paper</font>

137
00:06:17,880 --> 00:06:24,120
we show that an attacker can still

138
00:06:21,480 --> 00:06:28,260
forward signatures even if he<font color="#CCCCCC"> only</font><font color="#E5E5E5"> has</font>

139
00:06:24,120 --> 00:06:30,330
<font color="#E5E5E5">access to this s1 now but there's one</font>

140
00:06:28,260 --> 00:06:33,690
<font color="#CCCCCC">other thing we kind of forgot and</font>

141
00:06:30,330 --> 00:06:36,419
skipped over and that it's and this one

142
00:06:33,690 --> 00:06:39,630
thing isn't<font color="#CCCCCC"> that rejection doesn't only</font>

143
00:06:36,419 --> 00:06:41,020
<font color="#E5E5E5">hurt in your real life but also for</font><font color="#CCCCCC"> our</font>

144
00:06:39,630 --> 00:06:45,280
attack

145
00:06:41,020 --> 00:06:49,150
so what we have<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> unlike ECC</font><font color="#CCCCCC"> more</font>

146
00:06:45,280 --> 00:06:52,270
stuff<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you sample distance</font><font color="#E5E5E5"> Y by</font>

147
00:06:49,150 --> 00:06:56,219
<font color="#CCCCCC">using a hash from km and some copper</font>

148
00:06:52,270 --> 00:07:00,250
copper copper<font color="#CCCCCC"> is a rejection counter so</font>

149
00:06:56,220 --> 00:07:03,520
this counts<font color="#E5E5E5"> up and</font><font color="#CCCCCC"> is used so that you</font>

150
00:07:00,250 --> 00:07:07,150
have a fresh<font color="#CCCCCC"> Y in each of the iteration</font>

151
00:07:03,520 --> 00:07:09,520
each time<font color="#E5E5E5"> a signature gets rejected now</font>

152
00:07:07,150 --> 00:07:12,638
to have<font color="#CCCCCC"> a nonce reuse you have</font><font color="#E5E5E5"> to of</font>

153
00:07:09,520 --> 00:07:14,919
course<font color="#E5E5E5"> use the same copper</font><font color="#CCCCCC"> again this</font>

154
00:07:12,639 --> 00:07:17,710
means<font color="#E5E5E5"> that the key recovery is only</font>

155
00:07:14,919 --> 00:07:19,450
<font color="#E5E5E5">successful if both the non faulted</font>

156
00:07:17,710 --> 00:07:21,340
execution and the faulted execution

157
00:07:19,450 --> 00:07:25,090
<font color="#CCCCCC">except the signature in the same</font>

158
00:07:21,340 --> 00:07:25,780
iteration<font color="#E5E5E5"> now but as soon</font><font color="#CCCCCC"> as we inject</font>

159
00:07:25,090 --> 00:07:28,239
the fault

160
00:07:25,780 --> 00:07:31,119
we will<font color="#CCCCCC"> also influence</font><font color="#E5E5E5"> the intermediate</font>

161
00:07:28,240 --> 00:07:32,830
used in the rejection<font color="#CCCCCC"> condition</font><font color="#E5E5E5"> so it</font>

162
00:07:31,120 --> 00:07:35,500
might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> that we inject the fault and</font>

163
00:07:32,830 --> 00:07:39,940
<font color="#E5E5E5">due to the faulted values the signature</font>

164
00:07:35,500 --> 00:07:43,060
is not accepted<font color="#E5E5E5"> anymore and there unlike</font>

165
00:07:39,940 --> 00:07:46,510
<font color="#E5E5E5">ECC PI's counterparts so here the</font>

166
00:07:43,060 --> 00:07:49,479
default<font color="#E5E5E5"> position which which target you</font>

167
00:07:46,510 --> 00:07:52,919
effectively<font color="#E5E5E5"> fault determines the</font><font color="#CCCCCC"> success</font>

168
00:07:49,479 --> 00:07:55,599
probability and we<font color="#CCCCCC"> have a look at five</font>

169
00:07:52,919 --> 00:07:59,200
<font color="#CCCCCC">concrete fall scenarios</font><font color="#E5E5E5"> so concrete</font>

170
00:07:55,600 --> 00:08:00,940
position so the first one is the

171
00:07:59,200 --> 00:08:03,490
probably<font color="#CCCCCC"> the most straightforward one</font>

172
00:08:00,940 --> 00:08:06,010
<font color="#E5E5E5">you want to have a different Z as</font>

173
00:08:03,490 --> 00:08:08,860
challenge vector<font color="#E5E5E5"> so what do you do you</font>

174
00:08:06,010 --> 00:08:12,599
<font color="#E5E5E5">fold the computation of C so this</font>

175
00:08:08,860 --> 00:08:12,600
hashing operation here

176
00:08:13,289 --> 00:08:19,750
there are what you<font color="#E5E5E5"> can do is observe</font>

177
00:08:16,510 --> 00:08:22,539
that in this equation set equals y plus

178
00:08:19,750 --> 00:08:24,220
<font color="#E5E5E5">CS</font><font color="#CCCCCC"> one if you'll have a</font><font color="#E5E5E5"> look at the at</font>

179
00:08:22,539 --> 00:08:27,340
the distributions of these two variables

180
00:08:24,220 --> 00:08:29,680
<font color="#CCCCCC">you you'll see that well</font><font color="#E5E5E5"> Y is is</font>

181
00:08:27,340 --> 00:08:32,789
uniformly distributed<font color="#CCCCCC"> in the range of</font>

182
00:08:29,680 --> 00:08:36,370
plus minus<font color="#CCCCCC"> 500</font><font color="#E5E5E5"> thousand something and</font>

183
00:08:32,789 --> 00:08:40,530
this<font color="#E5E5E5"> CS one is kind of like in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> range</font>

184
00:08:36,370 --> 00:08:44,140
plus minus<font color="#CCCCCC"> 50 or so so this means that</font>

185
00:08:40,530 --> 00:08:46,209
<font color="#E5E5E5">using</font><font color="#CCCCCC"> just a different</font><font color="#E5E5E5"> C won't affect</font>

186
00:08:44,140 --> 00:08:49,110
set that much and since<font color="#E5E5E5"> the first</font>

187
00:08:46,210 --> 00:08:53,050
<font color="#E5E5E5">rejection condition is a</font><font color="#CCCCCC"> rain check on C</font>

188
00:08:49,110 --> 00:08:54,400
this means that if it if<font color="#E5E5E5"> the signature</font>

189
00:08:53,050 --> 00:08:57,279
was accepted original

190
00:08:54,400 --> 00:08:59,709
then it will also<font color="#E5E5E5"> likely be accepted</font>

191
00:08:57,279 --> 00:09:01,960
<font color="#E5E5E5">with a difference</font><font color="#CCCCCC"> II so this means we</font>

192
00:08:59,710 --> 00:09:05,770
have<font color="#E5E5E5"> a success probability of over</font><font color="#CCCCCC"> 90</font>

193
00:09:01,960 --> 00:09:07,540
<font color="#CCCCCC">percent so but it's</font><font color="#E5E5E5"> not only the direct</font>

194
00:09:05,770 --> 00:09:10,089
computation of<font color="#E5E5E5"> see that we can fault we</font>

195
00:09:07,540 --> 00:09:12,430
can also fault<font color="#E5E5E5"> any any result that goes</font>

196
00:09:10,089 --> 00:09:14,650
into this<font color="#E5E5E5"> like for</font><font color="#CCCCCC"> instance the</font>

197
00:09:12,430 --> 00:09:18,819
computation of this<font color="#CCCCCC"> W so of the</font>

198
00:09:14,650 --> 00:09:20,920
polynomial multiplication<font color="#E5E5E5"> this</font>

199
00:09:18,820 --> 00:09:22,089
multiplication<font color="#CCCCCC"> uses</font><font color="#E5E5E5"> the entity you've</font>

200
00:09:20,920 --> 00:09:26,650
already heard of that

201
00:09:22,089 --> 00:09:30,550
and so the<font color="#E5E5E5"> entity is a FFT over a prime</font>

202
00:09:26,650 --> 00:09:32,020
field<font color="#CCCCCC"> so it use the same implementation</font>

203
00:09:30,550 --> 00:09:34,359
techniques<font color="#E5E5E5"> butterflies butterfly</font>

204
00:09:32,020 --> 00:09:35,770
<font color="#CCCCCC">networking stuff</font><font color="#E5E5E5"> and there if you have a</font>

205
00:09:34,360 --> 00:09:37,510
look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> this butterfly</font><font color="#CCCCCC"> network it's</font>

206
00:09:35,770 --> 00:09:39,790
quite easy to<font color="#E5E5E5"> see</font><font color="#CCCCCC"> if if you inject a</font>

207
00:09:37,510 --> 00:09:42,939
fault<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> left side on the input of</font>

208
00:09:39,790 --> 00:09:45,099
<font color="#E5E5E5">this then a fault will spread to all of</font>

209
00:09:42,940 --> 00:09:47,440
the output coefficients<font color="#E5E5E5"> where is you</font>

210
00:09:45,100 --> 00:09:49,690
fault<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the right on</font><font color="#E5E5E5"> the output</font><font color="#CCCCCC"> only a</font>

211
00:09:47,440 --> 00:09:52,990
couple<font color="#E5E5E5"> of coefficients will</font><font color="#CCCCCC"> be affected</font>

212
00:09:49,690 --> 00:09:56,470
<font color="#E5E5E5">and the more coefficients you change the</font>

213
00:09:52,990 --> 00:09:57,940
more likely it will that that your new

214
00:09:56,470 --> 00:09:59,620
signature your voltage signature gets

215
00:09:57,940 --> 00:10:03,390
rejected<font color="#CCCCCC"> so you have a success</font>

216
00:09:59,620 --> 00:10:05,740
probability between<font color="#E5E5E5"> 25 and</font><font color="#CCCCCC"> 90%</font>

217
00:10:03,390 --> 00:10:07,510
depends<font color="#E5E5E5"> on what you exactly</font><font color="#CCCCCC"> fold but</font>

218
00:10:05,740 --> 00:10:12,010
overall of<font color="#CCCCCC"> course this multiplication is</font>

219
00:10:07,510 --> 00:10:15,040
a larger target<font color="#E5E5E5"> than the hashing</font><font color="#CCCCCC"> okay</font>

220
00:10:12,010 --> 00:10:17,319
then we<font color="#E5E5E5"> can also fault</font><font color="#CCCCCC"> the public key so</font>

221
00:10:15,040 --> 00:10:19,839
this loading of the<font color="#CCCCCC"> a that</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> two</font>

222
00:10:17,320 --> 00:10:22,240
sub scenarios<font color="#E5E5E5"> because</font><font color="#CCCCCC"> this a is not to</font>

223
00:10:19,839 --> 00:10:25,209
<font color="#CCCCCC">Storch directly but generated from some</font>

224
00:10:22,240 --> 00:10:27,520
seed and you can<font color="#CCCCCC"> a tower attack this</font>

225
00:10:25,209 --> 00:10:30,099
<font color="#E5E5E5">roll directly</font><font color="#CCCCCC"> this value or the</font>

226
00:10:27,520 --> 00:10:32,319
extendable output function<font color="#E5E5E5"> so depending</font>

227
00:10:30,100 --> 00:10:35,320
on what you<font color="#CCCCCC"> fold you</font><font color="#E5E5E5"> are between</font><font color="#CCCCCC"> twenty</font>

228
00:10:32,320 --> 00:10:37,959
<font color="#CCCCCC">five or fifty four percent but what's</font>

229
00:10:35,320 --> 00:10:40,420
the what's interesting here is<font color="#E5E5E5"> if you</font>

230
00:10:37,959 --> 00:10:42,400
<font color="#E5E5E5">inject the</font><font color="#CCCCCC"> fault intro you can</font><font color="#E5E5E5"> think of</font>

231
00:10:40,420 --> 00:10:43,540
yeah maybe<font color="#E5E5E5"> that could</font><font color="#CCCCCC"> be also be a</font>

232
00:10:42,400 --> 00:10:47,680
permanent fault

233
00:10:43,540 --> 00:10:52,630
<font color="#E5E5E5">and finally</font><font color="#CCCCCC"> somewhat difference in</font><font color="#E5E5E5"> area</font>

234
00:10:47,680 --> 00:10:55,120
is that you<font color="#CCCCCC"> fall</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> Nantes</font><font color="#E5E5E5"> why what if</font>

235
00:10:52,630 --> 00:10:57,010
we fall<font color="#E5E5E5"> to non stand the output will be</font>

236
00:10:55,120 --> 00:11:00,880
different<font color="#E5E5E5"> so it's not unknowns we use</font>

237
00:10:57,010 --> 00:11:03,400
anymore<font color="#CCCCCC"> yes but what we do</font><font color="#E5E5E5"> is we target</font>

238
00:11:00,880 --> 00:11:06,490
a partial nonce<font color="#E5E5E5"> reuse so the nonce is</font>

239
00:11:03,400 --> 00:11:08,519
somewhat similar<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> original one</font><font color="#E5E5E5"> but</font>

240
00:11:06,490 --> 00:11:12,910
not

241
00:11:08,519 --> 00:11:13,360
that we exploit<font color="#CCCCCC"> that</font><font color="#E5E5E5"> telephone uses the</font>

242
00:11:12,910 --> 00:11:16,240
<font color="#E5E5E5">shaky</font>

243
00:11:13,360 --> 00:11:19,000
xof quite extensively<font color="#CCCCCC"> and if you have a</font>

244
00:11:16,240 --> 00:11:20,920
look at this<font color="#CCCCCC"> sponsor structure</font><font color="#E5E5E5"> well it's</font>

245
00:11:19,000 --> 00:11:22,870
easy<font color="#E5E5E5"> to see that if you inject the fold</font>

246
00:11:20,920 --> 00:11:24,819
like for instance<font color="#E5E5E5"> in the second</font>

247
00:11:22,870 --> 00:11:26,920
application<font color="#E5E5E5"> of</font><font color="#CCCCCC"> K check F in the squeeze</font>

248
00:11:24,820 --> 00:11:32,079
phase<font color="#E5E5E5"> then all the output coming before</font>

249
00:11:26,920 --> 00:11:34,349
<font color="#CCCCCC">Det H 0 and H</font><font color="#E5E5E5"> 1 will be the same</font><font color="#CCCCCC"> and</font>

250
00:11:32,079 --> 00:11:38,560
everything behind<font color="#CCCCCC"> that will be different</font>

251
00:11:34,350 --> 00:11:42,370
<font color="#E5E5E5">so and as Y is sampled</font><font color="#CCCCCC"> from this output</font>

252
00:11:38,560 --> 00:11:44,500
<font color="#CCCCCC">we then have two different</font><font color="#E5E5E5"> wear vectors</font>

253
00:11:42,370 --> 00:11:47,019
Y<font color="#E5E5E5"> where the first couple of coefficients</font>

254
00:11:44,500 --> 00:11:48,730
will<font color="#CCCCCC"> be identical so the difference is</font>

255
00:11:47,019 --> 00:11:51,790
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> and only</font><font color="#CCCCCC"> the last couple of</font>

256
00:11:48,730 --> 00:11:54,370
coefficients will<font color="#CCCCCC"> be different but</font><font color="#E5E5E5"> still</font>

257
00:11:51,790 --> 00:11:56,890
this difference is way too large<font color="#E5E5E5"> to to</font>

258
00:11:54,370 --> 00:11:59,260
only apply<font color="#CCCCCC"> prutte force so what we do is</font>

259
00:11:56,890 --> 00:12:01,240
we return this problem of key recovery

260
00:11:59,260 --> 00:12:05,279
<font color="#E5E5E5">to a lattice problem where we have some</font>

261
00:12:01,240 --> 00:12:07,720
<font color="#E5E5E5">targets T which</font><font color="#CCCCCC"> is computed from public</font>

262
00:12:05,279 --> 00:12:11,800
output from the public signature and

263
00:12:07,720 --> 00:12:14,350
then we can look<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> key or then we</font>

264
00:12:11,800 --> 00:12:17,260
have a suspect the problems that we look

265
00:12:14,350 --> 00:12:20,829
<font color="#CCCCCC">for a</font><font color="#E5E5E5"> vector close to the lattice</font>

266
00:12:17,260 --> 00:12:22,600
generated by this term and the diff and

267
00:12:20,829 --> 00:12:24,399
<font color="#E5E5E5">we know that it's closed because the</font>

268
00:12:22,600 --> 00:12:27,010
difference<font color="#CCCCCC"> between the target and</font><font color="#E5E5E5"> the</font>

269
00:12:24,399 --> 00:12:30,070
<font color="#E5E5E5">lattice point is</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> our key that</font>

270
00:12:27,010 --> 00:12:32,500
has small coefficients of course we have

271
00:12:30,070 --> 00:12:35,800
to<font color="#E5E5E5"> apply some restrictions on the fold</font>

272
00:12:32,500 --> 00:12:37,959
so we can fold<font color="#E5E5E5"> two out of the five get</font>

273
00:12:35,800 --> 00:12:40,870
<font color="#E5E5E5">shocked F permutations</font><font color="#CCCCCC"> that are needed</font>

274
00:12:37,959 --> 00:12:42,640
in the squeeze phase<font color="#E5E5E5"> and the computation</font>

275
00:12:40,870 --> 00:12:45,190
of<font color="#CCCCCC"> runtime of the lattice reduction</font>

276
00:12:42,640 --> 00:12:51,430
<font color="#CCCCCC">which below</font><font color="#E5E5E5"> one minute and refer success</font>

277
00:12:45,190 --> 00:12:53,560
probability of<font color="#E5E5E5"> 24 percent okay so we did</font>

278
00:12:51,430 --> 00:12:57,040
simulations but we also did experimental

279
00:12:53,560 --> 00:12:59,949
verifications<font color="#E5E5E5"> so we did clock glitches</font>

280
00:12:57,040 --> 00:13:01,750
on an arm cortex-m<font color="#CCCCCC"> four and for each of</font>

281
00:12:59,949 --> 00:13:05,380
the fall scenarios using your random

282
00:13:01,750 --> 00:13:08,890
fault<font color="#CCCCCC"> is sufficient</font><font color="#E5E5E5"> and what we also did</font>

283
00:13:05,380 --> 00:13:10,870
<font color="#E5E5E5">is that we we benchmarked the</font><font color="#CCCCCC"> runtime of</font>

284
00:13:08,890 --> 00:13:13,540
all the difference<font color="#E5E5E5"> in area so how much</font>

285
00:13:10,870 --> 00:13:16,449
<font color="#E5E5E5">of</font><font color="#CCCCCC"> our signing time is susceptible to a</font>

286
00:13:13,540 --> 00:13:18,579
fault<font color="#E5E5E5"> and there you can see that well</font>

287
00:13:16,449 --> 00:13:20,620
faulting the hash directly has a high

288
00:13:18,579 --> 00:13:24,180
<font color="#CCCCCC">success probability but is</font>

289
00:13:20,620 --> 00:13:26,500
<font color="#E5E5E5">kind of a small</font><font color="#CCCCCC"> target and the the</font>

290
00:13:24,180 --> 00:13:29,469
expansion of the public key takes quite

291
00:13:26,500 --> 00:13:31,870
a lot<font color="#CCCCCC"> of time doesn't have that high of</font>

292
00:13:29,470 --> 00:13:32,920
<font color="#CCCCCC">success probability but appears to</font><font color="#E5E5E5"> be a</font>

293
00:13:31,870 --> 00:13:37,480
good target

294
00:13:32,920 --> 00:13:40,449
and for this<font color="#E5E5E5"> FW we just did many real</font>

295
00:13:37,480 --> 00:13:44,860
experiments and then get caught the

296
00:13:40,450 --> 00:13:49,810
average success probability about points

297
00:13:44,860 --> 00:13:50,800
<font color="#CCCCCC">six or zero okay so</font><font color="#E5E5E5"> now that we have the</font>

298
00:13:49,810 --> 00:13:53,290
attack we can<font color="#E5E5E5"> think about</font>

299
00:13:50,800 --> 00:13:54,550
countermeasures<font color="#CCCCCC"> in terms of dictionary</font>

300
00:13:53,290 --> 00:13:56,170
countermeasures of course the first

301
00:13:54,550 --> 00:13:58,719
thing<font color="#CCCCCC"> that comes to mind is</font><font color="#E5E5E5"> double</font>

302
00:13:56,170 --> 00:14:01,150
computation it's the doubles the<font color="#E5E5E5"> run</font>

303
00:13:58,720 --> 00:14:02,800
<font color="#E5E5E5">time</font><font color="#CCCCCC"> of course</font><font color="#E5E5E5"> and to attack double</font>

304
00:14:01,150 --> 00:14:05,980
<font color="#E5E5E5">computation you need to either inject</font>

305
00:14:02,800 --> 00:14:08,349
the same<font color="#E5E5E5"> fault twice or you have some</font>

306
00:14:05,980 --> 00:14:12,330
permanent<font color="#CCCCCC"> Falls</font><font color="#E5E5E5"> like for</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> if you</font>

307
00:14:08,350 --> 00:14:16,450
are<font color="#CCCCCC"> able to manipulate</font><font color="#E5E5E5"> this seed now</font>

308
00:14:12,330 --> 00:14:19,330
since<font color="#CCCCCC"> verification is quite a lot faster</font>

309
00:14:16,450 --> 00:14:22,450
<font color="#CCCCCC">than then signing</font><font color="#E5E5E5"> what you can</font>

310
00:14:19,330 --> 00:14:25,360
alternatively do is you take the

311
00:14:22,450 --> 00:14:28,180
signature<font color="#CCCCCC"> you get and then verify</font><font color="#E5E5E5"> so</font>

312
00:14:25,360 --> 00:14:30,910
this takes only about<font color="#E5E5E5"> 1/4</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the run</font>

313
00:14:28,180 --> 00:14:33,939
<font color="#E5E5E5">time but what's interesting here is</font><font color="#CCCCCC"> that</font>

314
00:14:30,910 --> 00:14:37,630
well if you fault<font color="#CCCCCC"> the generation of</font><font color="#E5E5E5"> the</font>

315
00:14:33,940 --> 00:14:40,080
nonce<font color="#E5E5E5"> all what you do is you sign with a</font>

316
00:14:37,630 --> 00:14:43,360
different nonce and that still valid

317
00:14:40,080 --> 00:14:47,410
<font color="#CCCCCC">signature</font><font color="#E5E5E5"> so using this in area you can</font>

318
00:14:43,360 --> 00:14:51,250
bypass this<font color="#CCCCCC"> countermeasure</font><font color="#E5E5E5"> and a final</font>

319
00:14:47,410 --> 00:14:53,170
countermeasure that can protect against

320
00:14:51,250 --> 00:14:56,290
all our scenarios and<font color="#E5E5E5"> that's hardly any</font>

321
00:14:53,170 --> 00:14:58,990
<font color="#E5E5E5">overhead is what we call additional</font>

322
00:14:56,290 --> 00:15:02,410
randomness<font color="#E5E5E5"> so what you do is you don't</font>

323
00:14:58,990 --> 00:15:05,650
only output<font color="#E5E5E5"> km and</font><font color="#CCCCCC"> couple to this</font>

324
00:15:02,410 --> 00:15:10,780
determinist example but also some random

325
00:15:05,650 --> 00:15:13,540
are like<font color="#E5E5E5"> Rev random bit string now this</font>

326
00:15:10,780 --> 00:15:16,360
protects against fault attacks against

327
00:15:13,540 --> 00:15:18,370
bad randomness because<font color="#E5E5E5"> if you insert if</font>

328
00:15:16,360 --> 00:15:20,350
you<font color="#E5E5E5"> set R to be a constant all you do is</font>

329
00:15:18,370 --> 00:15:22,960
a switch<font color="#E5E5E5"> off the fault</font><font color="#CCCCCC"> countermeasure</font>

330
00:15:20,350 --> 00:15:25,000
again<font color="#CCCCCC"> and if you do it correctly it</font>

331
00:15:22,960 --> 00:15:27,550
could also be used against some sort of

332
00:15:25,000 --> 00:15:30,990
countermeasure against<font color="#E5E5E5"> DP a recovery of</font>

333
00:15:27,550 --> 00:15:36,149
this secret<font color="#CCCCCC"> K</font>

334
00:15:30,990 --> 00:15:38,820
and in fact<font color="#CCCCCC"> cue Tesla</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> added</font><font color="#E5E5E5"> this</font>

335
00:15:36,149 --> 00:15:41,160
<font color="#E5E5E5">countermeasure so in an update</font><font color="#CCCCCC"> that came</font>

336
00:15:38,820 --> 00:15:43,980
<font color="#CCCCCC">after the initial publication of this</font>

337
00:15:41,160 --> 00:15:45,990
work they may edit this<font color="#E5E5E5"> countermeasure</font>

338
00:15:43,980 --> 00:15:49,740
in<font color="#CCCCCC"> it's now mandatory</font>

339
00:15:45,990 --> 00:15:51,990
so the attacks don't apply anymore<font color="#CCCCCC"> and</font>

340
00:15:49,740 --> 00:15:54,540
that's why I had a star and execute<font color="#E5E5E5"> test</font>

341
00:15:51,990 --> 00:15:56,160
line in the beginning<font color="#E5E5E5"> with the lithium</font>

342
00:15:54,540 --> 00:15:58,740
there is a little bit of a problem

343
00:15:56,160 --> 00:16:03,449
<font color="#E5E5E5">because the actual security proof that</font>

344
00:15:58,740 --> 00:16:06,240
<font color="#CCCCCC">Bolivia muses requires this determinism</font>

345
00:16:03,450 --> 00:16:08,670
so the proof requires that the signature

346
00:16:06,240 --> 00:16:12,120
scheme is<font color="#E5E5E5"> deterministic</font><font color="#CCCCCC"> and it loses</font>

347
00:16:08,670 --> 00:16:14,790
<font color="#E5E5E5">tightness with the there is a an</font>

348
00:16:12,120 --> 00:16:17,820
alternative<font color="#CCCCCC"> version that</font><font color="#E5E5E5"> doesn't require</font>

349
00:16:14,790 --> 00:16:21,829
this determinism<font color="#E5E5E5"> but it's not tight and</font>

350
00:16:17,820 --> 00:16:25,230
it loses<font color="#E5E5E5"> security in the number of</font><font color="#CCCCCC"> of of</font>

351
00:16:21,830 --> 00:16:27,779
signatures<font color="#CCCCCC"> that you see per message so</font>

352
00:16:25,230 --> 00:16:30,000
that's a bit of<font color="#CCCCCC"> a problem</font><font color="#E5E5E5"> so if this</font>

353
00:16:27,779 --> 00:16:32,939
turn really contributes to attack is<font color="#E5E5E5"> of</font>

354
00:16:30,000 --> 00:16:35,420
course an open problem but yeah it's

355
00:16:32,940 --> 00:16:37,920
still<font color="#CCCCCC"> violated some security guarantees</font>

356
00:16:35,420 --> 00:16:39,630
<font color="#CCCCCC">okay that's then the end of my</font>

357
00:16:37,920 --> 00:16:40,430
presentation thank you very much<font color="#CCCCCC"> your</font>

358
00:16:39,630 --> 00:16:47,260
<font color="#E5E5E5">attention</font>

359
00:16:40,430 --> 00:16:54,890
[Applause]

360
00:16:47,260 --> 00:16:57,980
any questions for Peter<font color="#E5E5E5"> so</font><font color="#CCCCCC"> maybe one</font>

361
00:16:54,890 --> 00:17:01,360
<font color="#CCCCCC">from ease</font><font color="#E5E5E5"> on slide 13 I think it was so</font>

362
00:16:57,980 --> 00:17:05,120
you show these yeah these different

363
00:17:01,360 --> 00:17:07,520
attacks and how much time<font color="#E5E5E5"> they take for</font>

364
00:17:05,119 --> 00:17:09,409
<font color="#E5E5E5">that total signature time so if I just</font>

365
00:17:07,520 --> 00:17:11,329
I'm<font color="#CCCCCC"> not targeting anything I just let it</font>

366
00:17:09,410 --> 00:17:14,000
<font color="#E5E5E5">run and I jump to a fault</font>

367
00:17:11,329 --> 00:17:16,849
yeah that's that's<font color="#E5E5E5"> there</font><font color="#CCCCCC"> that's a</font>

368
00:17:14,000 --> 00:17:19,250
totally I think<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 30% of the run</font>

369
00:17:16,849 --> 00:17:23,079
<font color="#E5E5E5">time so if you really blindly just shoot</font>

370
00:17:19,250 --> 00:17:25,099
at the thing but you can be more

371
00:17:23,079 --> 00:17:28,310
<font color="#E5E5E5">targeted like for instance this</font>

372
00:17:25,099 --> 00:17:29,510
expansion<font color="#E5E5E5"> of the of the</font><font color="#CCCCCC"> probably</font><font color="#E5E5E5"> key</font>

373
00:17:28,310 --> 00:17:31,460
will always be somewhere at the

374
00:17:29,510 --> 00:17:33,350
beginning so if you<font color="#CCCCCC"> target this then you</font>

375
00:17:31,460 --> 00:17:36,020
will probably<font color="#E5E5E5"> have a higher higher</font>

376
00:17:33,350 --> 00:17:38,750
<font color="#E5E5E5">success and then yeah with chance one</font>

377
00:17:36,020 --> 00:17:41,629
<font color="#E5E5E5">into slightly above yeah succeed all</font>

378
00:17:38,750 --> 00:17:45,140
right and then next<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> you said like</font>

379
00:17:41,630 --> 00:17:47,870
if you add randomness<font color="#CCCCCC"> I'd read as a good</font>

380
00:17:45,140 --> 00:17:50,150
countermeasure<font color="#E5E5E5"> but why doesn't</font><font color="#CCCCCC"> that add</font>

381
00:17:47,870 --> 00:17:52,040
anything to the<font color="#E5E5E5"> run time getting good</font>

382
00:17:50,150 --> 00:17:54,740
quality randomness can be yeah of course

383
00:17:52,040 --> 00:17:56,740
getting randomness isn't if you have it

384
00:17:54,740 --> 00:18:00,710
<font color="#E5E5E5">somewhere ready yes so of course that's</font>

385
00:17:56,740 --> 00:18:02,990
okay<font color="#CCCCCC"> zero percent</font><font color="#E5E5E5"> is if you have it</font>

386
00:18:00,710 --> 00:18:05,120
<font color="#CCCCCC">ready</font><font color="#E5E5E5"> and everything else is</font><font color="#CCCCCC"> already set</font>

387
00:18:02,990 --> 00:18:08,240
<font color="#CCCCCC">up if you have a hardware</font><font color="#E5E5E5"> RNG or I don't</font>

388
00:18:05,120 --> 00:18:10,310
<font color="#E5E5E5">know what it will add something because</font>

389
00:18:08,240 --> 00:18:13,130
if you want to<font color="#E5E5E5"> also</font><font color="#CCCCCC"> protect against DPA</font>

390
00:18:10,310 --> 00:18:16,310
you will likely<font color="#CCCCCC"> fill in the</font><font color="#E5E5E5"> first block</font>

391
00:18:13,130 --> 00:18:19,160
<font color="#E5E5E5">shake with random stuff and so it will</font>

392
00:18:16,310 --> 00:18:24,620
<font color="#CCCCCC">have a higher runtime but negligible</font>

393
00:18:19,160 --> 00:18:27,160
compared to<font color="#E5E5E5"> the other stuff okay any</font>

394
00:18:24,620 --> 00:18:27,159
more<font color="#E5E5E5"> questions</font>

395
00:18:27,790 --> 00:18:32,350
if not let thanks Peter and all the

396
00:18:31,250 --> 00:18:36,660
other speakers<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> session</font>

397
00:18:32,350 --> 00:18:36,659
[Applause]

