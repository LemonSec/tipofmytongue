1
00:00:00,060 --> 00:00:08,580
and finally last<font color="#E5E5E5"> talk in this session is</font>

2
00:00:03,750 --> 00:00:11,280
on multiplicative masking<font color="#E5E5E5"> of</font><font color="#CCCCCC"> AES</font><font color="#E5E5E5"> in</font>

3
00:00:08,580 --> 00:00:15,389
hardware<font color="#E5E5E5"> and it will be given</font><font color="#CCCCCC"> by Loudon</font>

4
00:00:11,280 --> 00:00:18,750
the mayor<font color="#E5E5E5"> it's a collaboration with</font>

5
00:00:15,389 --> 00:00:31,109
Oscar<font color="#CCCCCC"> opera's and Michael Balcon</font><font color="#E5E5E5"> both</font>

6
00:00:18,750 --> 00:00:32,668
from<font color="#CCCCCC"> Kasich or former Kasich hi so this</font>

7
00:00:31,109 --> 00:00:34,350
is a third<font color="#E5E5E5"> talk of the session and it's</font>

8
00:00:32,668 --> 00:00:36,718
the third day<font color="#CCCCCC"> of chess so I'm</font><font color="#E5E5E5"> gonna give</font>

9
00:00:34,350 --> 00:00:38,129
a<font color="#E5E5E5"> very short introduction because</font><font color="#CCCCCC"> I'm</font>

10
00:00:36,719 --> 00:00:40,590
<font color="#E5E5E5">gonna assume that everyone already knows</font>

11
00:00:38,129 --> 00:00:41,790
what the situation is<font color="#E5E5E5"> which is that we</font>

12
00:00:40,590 --> 00:00:45,180
<font color="#E5E5E5">have a problem</font><font color="#CCCCCC"> the problem of</font>

13
00:00:41,790 --> 00:00:47,670
side-channel attacks<font color="#E5E5E5"> and luckily there's</font>

14
00:00:45,180 --> 00:00:50,309
also a solution<font color="#E5E5E5"> or many solutions and</font>

15
00:00:47,670 --> 00:00:53,100
one of them<font color="#E5E5E5"> a very popular one is</font>

16
00:00:50,309 --> 00:00:55,050
masking<font color="#E5E5E5"> which basically means we're</font>

17
00:00:53,100 --> 00:00:58,350
<font color="#E5E5E5">gonna split the sensitive variable into</font>

18
00:00:55,050 --> 00:01:00,000
multiple shares<font color="#E5E5E5"> and this is the hardware</font>

19
00:00:58,350 --> 00:01:02,100
masking session so we are also dealing

20
00:01:00,000 --> 00:01:04,680
with<font color="#E5E5E5"> an extra problem the problem of</font>

21
00:01:02,100 --> 00:01:06,479
glitches<font color="#CCCCCC"> and let's</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> that makes a</font>

22
00:01:04,680 --> 00:01:08,670
hardware masking quite different from

23
00:01:06,479 --> 00:01:11,280
software masking and over the past few

24
00:01:08,670 --> 00:01:12,780
years<font color="#E5E5E5"> we've seen</font><font color="#CCCCCC"> a lot of works dealing</font>

25
00:01:11,280 --> 00:01:14,670
<font color="#CCCCCC">with this problem and we've seen a</font><font color="#E5E5E5"> lot</font>

26
00:01:12,780 --> 00:01:17,070
of implementations that<font color="#E5E5E5"> are secure in</font>

27
00:01:14,670 --> 00:01:18,540
<font color="#CCCCCC">the presence of glitches a lot</font><font color="#E5E5E5"> of these</font>

28
00:01:17,070 --> 00:01:21,240
implementations<font color="#E5E5E5"> have used boolean</font>

29
00:01:18,540 --> 00:01:22,560
masking<font color="#E5E5E5"> which means that the sum of the</font>

30
00:01:21,240 --> 00:01:25,589
shares is equal to the sensitive

31
00:01:22,560 --> 00:01:27,720
variable that makes linear functions

32
00:01:25,590 --> 00:01:29,850
<font color="#E5E5E5">super easy to mask I mean no one's</font>

33
00:01:27,720 --> 00:01:31,470
<font color="#E5E5E5">writing any papers about that but</font>

34
00:01:29,850 --> 00:01:32,399
<font color="#CCCCCC">nonlinear functions on the other hand</font>

35
00:01:31,470 --> 00:01:35,908
are<font color="#CCCCCC"> very tricky</font>

36
00:01:32,400 --> 00:01:39,720
<font color="#CCCCCC">for example the AES sbox is an inversion</font>

37
00:01:35,909 --> 00:01:42,150
<font color="#CCCCCC">in in</font><font color="#E5E5E5"> hello field and it's it's</font><font color="#CCCCCC"> very</font>

38
00:01:39,720 --> 00:01:45,060
tricky to<font color="#E5E5E5"> implement and we've seen a lot</font>

39
00:01:42,150 --> 00:01:47,009
of<font color="#E5E5E5"> works</font><font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to I mean successfully</font>

40
00:01:45,060 --> 00:01:48,920
implementing AES and trying to do it as

41
00:01:47,009 --> 00:01:52,380
efficient as possible

42
00:01:48,920 --> 00:01:55,229
here we see<font color="#CCCCCC"> only some of the many works</font>

43
00:01:52,380 --> 00:01:57,750
that<font color="#E5E5E5"> have implemented AES using boolean</font>

44
00:01:55,229 --> 00:01:59,219
masking and what the what<font color="#E5E5E5"> they all have</font>

45
00:01:57,750 --> 00:02:03,180
<font color="#CCCCCC">in common is that they use</font><font color="#E5E5E5"> the tower</font>

46
00:01:59,219 --> 00:02:05,880
field<font color="#E5E5E5"> approach of</font><font color="#CCCCCC"> Ken right</font><font color="#E5E5E5"> which is a</font>

47
00:02:03,180 --> 00:02:08,819
very nice approach<font color="#CCCCCC"> and it has given the</font>

48
00:02:05,880 --> 00:02:11,038
community<font color="#CCCCCC"> the chance</font><font color="#E5E5E5"> to develop their</font>

49
00:02:08,818 --> 00:02:12,600
inner artists a bit more as you can see

50
00:02:11,038 --> 00:02:15,059
by<font color="#CCCCCC"> these nice</font><font color="#E5E5E5"> pictures</font>

51
00:02:12,600 --> 00:02:17,670
<font color="#CCCCCC">but it's also very</font><font color="#E5E5E5"> complex methods and</font>

52
00:02:15,060 --> 00:02:19,560
the good news today<font color="#E5E5E5"> is for this talk you</font>

53
00:02:17,670 --> 00:02:21,299
do<font color="#E5E5E5"> not need to understand any of this</font>

54
00:02:19,560 --> 00:02:25,530
because we're gonna do<font color="#E5E5E5"> something a lot</font>

55
00:02:21,300 --> 00:02:28,770
simpler<font color="#CCCCCC"> I will skip ahead to our results</font>

56
00:02:25,530 --> 00:02:30,750
for a second and tell you what we're

57
00:02:28,770 --> 00:02:31,710
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to present so</font><font color="#E5E5E5"> I'm gonna present</font>

58
00:02:30,750 --> 00:02:35,130
<font color="#E5E5E5">your first order</font>

59
00:02:31,710 --> 00:02:37,350
AES sbox<font color="#CCCCCC"> which is 29%</font><font color="#E5E5E5"> smaller than the</font>

60
00:02:35,130 --> 00:02:40,200
state<font color="#CCCCCC"> of the art and when I say state of</font>

61
00:02:37,350 --> 00:02:42,450
the art I'm comparing<font color="#E5E5E5"> to the two best</font>

62
00:02:40,200 --> 00:02:44,369
<font color="#E5E5E5">implementations of the last year's which</font>

63
00:02:42,450 --> 00:02:47,239
happened to<font color="#CCCCCC"> have been</font><font color="#E5E5E5"> made</font><font color="#CCCCCC"> by the</font>

64
00:02:44,370 --> 00:02:50,430
previous<font color="#E5E5E5"> two speakers of this session</font>

65
00:02:47,240 --> 00:02:53,280
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I'll also presents a second order a</font>

66
00:02:50,430 --> 00:02:56,520
<font color="#CCCCCC">ESS box which is 18 percent smaller than</font>

67
00:02:53,280 --> 00:02:58,650
<font color="#E5E5E5">these previous results and these are</font>

68
00:02:56,520 --> 00:03:01,440
these area results we<font color="#CCCCCC"> obtain for</font><font color="#E5E5E5"> similar</font>

69
00:02:58,650 --> 00:03:03,210
randomness and latency costs and best of

70
00:03:01,440 --> 00:03:06,180
<font color="#E5E5E5">all we didn't need the tower field</font>

71
00:03:03,210 --> 00:03:09,480
<font color="#E5E5E5">approach so then the big question is how</font>

72
00:03:06,180 --> 00:03:11,580
did we<font color="#CCCCCC"> do</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> what you see</font><font color="#E5E5E5"> here is the</font>

73
00:03:09,480 --> 00:03:15,030
round function<font color="#CCCCCC"> of AES</font><font color="#E5E5E5"> which everyone</font>

74
00:03:11,580 --> 00:03:16,740
knows<font color="#E5E5E5"> and we have three linear blocks</font>

75
00:03:15,030 --> 00:03:19,380
which are easy to<font color="#E5E5E5"> mass quit bullyin</font>

76
00:03:16,740 --> 00:03:22,200
masking and we have one<font color="#E5E5E5"> nonlinear block</font>

77
00:03:19,380 --> 00:03:23,670
with<font color="#E5E5E5"> s</font><font color="#CCCCCC"> books the halwa field</font><font color="#E5E5E5"> inversion</font>

78
00:03:22,200 --> 00:03:25,950
which is very<font color="#E5E5E5"> difficult to mask with</font>

79
00:03:23,670 --> 00:03:28,140
boolean masking but<font color="#E5E5E5"> suppose we</font><font color="#CCCCCC"> would use</font>

80
00:03:25,950 --> 00:03:30,359
multiplicative masking then the S box

81
00:03:28,140 --> 00:03:32,760
would<font color="#CCCCCC"> be super easy</font><font color="#E5E5E5"> to do and the linear</font>

82
00:03:30,360 --> 00:03:36,000
blocks would<font color="#E5E5E5"> be very tricky so a logical</font>

83
00:03:32,760 --> 00:03:38,010
idea is to<font color="#E5E5E5"> just do the S box with multi-</font>

84
00:03:36,000 --> 00:03:40,500
masking and the linear blocks with

85
00:03:38,010 --> 00:03:42,870
<font color="#E5E5E5">boolean masking and just convert between</font>

86
00:03:40,500 --> 00:03:45,000
<font color="#E5E5E5">the two types in the mean in in between</font>

87
00:03:42,870 --> 00:03:47,340
and this is an idea<font color="#CCCCCC"> that people</font><font color="#E5E5E5"> already</font>

88
00:03:45,000 --> 00:03:50,100
<font color="#E5E5E5">had 17</font><font color="#CCCCCC"> years ago and it was presented at</font>

89
00:03:47,340 --> 00:03:51,750
chess 2001<font color="#E5E5E5"> and that's the idea that we</font>

90
00:03:50,100 --> 00:03:53,820
decided<font color="#E5E5E5"> to revisit because for the</font><font color="#CCCCCC"> last</font>

91
00:03:51,750 --> 00:03:57,240
<font color="#CCCCCC">years it seems like everyone wanted to</font>

92
00:03:53,820 --> 00:03:59,760
use<font color="#CCCCCC"> ken right and we and we really like</font>

93
00:03:57,240 --> 00:04:01,740
the<font color="#CCCCCC"> simplicity of</font><font color="#E5E5E5"> this idea it has</font>

94
00:03:59,760 --> 00:04:05,489
already been revisited<font color="#CCCCCC"> for software</font>

95
00:04:01,740 --> 00:04:08,490
masking in 2010 in a work of<font color="#E5E5E5"> Chanel</font>

96
00:04:05,490 --> 00:04:12,060
<font color="#E5E5E5">ankle authors and that work was really I</font>

97
00:04:08,490 --> 00:04:14,580
<font color="#CCCCCC">was a starting</font><font color="#E5E5E5"> point for what we did we</font>

98
00:04:12,060 --> 00:04:15,870
have to be careful though because<font color="#E5E5E5"> 16</font>

99
00:04:14,580 --> 00:04:17,549
years ago people realized<font color="#E5E5E5"> that</font>

100
00:04:15,870 --> 00:04:19,890
multiplicative masking is not as great

101
00:04:17,548 --> 00:04:22,260
as they originally<font color="#CCCCCC"> thought</font><font color="#E5E5E5"> because we</font>

102
00:04:19,890 --> 00:04:24,330
<font color="#CCCCCC">cannot effectively mask</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> zero</font>

103
00:04:22,260 --> 00:04:25,690
elements<font color="#E5E5E5"> no matter how many shares</font>

104
00:04:24,330 --> 00:04:27,789
you're using you will

105
00:04:25,690 --> 00:04:30,010
always have a<font color="#CCCCCC"> first-order flaw because a</font>

106
00:04:27,790 --> 00:04:33,040
<font color="#E5E5E5">single share can reveal whether your</font>

107
00:04:30,010 --> 00:04:35,440
secret is<font color="#E5E5E5"> zero or not the solution</font><font color="#CCCCCC"> to</font>

108
00:04:33,040 --> 00:04:37,450
this problem can be<font color="#E5E5E5"> found in MPC</font>

109
00:04:35,440 --> 00:04:40,420
literature as well<font color="#CCCCCC"> as</font><font color="#E5E5E5"> software masking</font>

110
00:04:37,450 --> 00:04:42,190
literature and it relies on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fact</font>

111
00:04:40,420 --> 00:04:44,320
that in a Galois field<font color="#E5E5E5"> if you invert a</font>

112
00:04:42,190 --> 00:04:46,810
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> you get a zero</font><font color="#E5E5E5"> and if you invert a</font>

113
00:04:44,320 --> 00:04:48,880
one you also get a<font color="#E5E5E5"> one so what we're</font>

114
00:04:46,810 --> 00:04:51,940
gonna do is we're gonna change<font color="#E5E5E5"> our</font><font color="#CCCCCC"> 0</font>

115
00:04:48,880 --> 00:04:54,640
into a<font color="#CCCCCC"> 1 before the</font><font color="#E5E5E5"> inversion and then</font>

116
00:04:51,940 --> 00:04:56,260
change it back afterwards<font color="#E5E5E5"> and this way</font>

117
00:04:54,640 --> 00:04:58,750
we never<font color="#E5E5E5"> have to mask the zero</font>

118
00:04:56,260 --> 00:05:00,909
multiplicatively<font color="#E5E5E5"> and the only thing we</font>

119
00:04:58,750 --> 00:05:03,430
<font color="#E5E5E5">need is a function that can detect if</font>

120
00:05:00,910 --> 00:05:05,200
the input<font color="#E5E5E5"> is zero and everyone</font><font color="#CCCCCC"> knows</font>

121
00:05:03,430 --> 00:05:09,490
<font color="#CCCCCC">that</font><font color="#E5E5E5"> function it's a it's a Kronecker</font>

122
00:05:05,200 --> 00:05:12,039
Delta function<font color="#E5E5E5"> so that's basically what</font>

123
00:05:09,490 --> 00:05:14,770
we're gonna do<font color="#E5E5E5"> we have here</font>

124
00:05:12,040 --> 00:05:17,200
the masked<font color="#E5E5E5"> AS inversion we start with</font>

125
00:05:14,770 --> 00:05:19,000
boolean shares<font color="#E5E5E5"> at the inputs the input</font>

126
00:05:17,200 --> 00:05:21,760
goes through<font color="#CCCCCC"> a masked version of the</font>

127
00:05:19,000 --> 00:05:25,290
<font color="#CCCCCC">kronecker delta function which has</font><font color="#E5E5E5"> at</font>

128
00:05:21,760 --> 00:05:28,210
the output a shared version of 1 or 0 0

129
00:05:25,290 --> 00:05:30,190
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the this is then added to</font><font color="#CCCCCC"> the</font>

130
00:05:28,210 --> 00:05:31,390
inputs<font color="#E5E5E5"> which means we can safely convert</font>

131
00:05:30,190 --> 00:05:33,580
the boolean shares to multiplicative

132
00:05:31,390 --> 00:05:35,860
<font color="#E5E5E5">shares</font><font color="#CCCCCC"> where we have multiplicative</font>

133
00:05:33,580 --> 00:05:38,409
shares<font color="#E5E5E5"> it is trivial</font><font color="#CCCCCC"> to do the inversion</font>

134
00:05:35,860 --> 00:05:40,510
locally on every share independently and

135
00:05:38,410 --> 00:05:42,270
then finally we go back to boolean

136
00:05:40,510 --> 00:05:45,669
masking for<font color="#E5E5E5"> the rest of the run function</font>

137
00:05:42,270 --> 00:05:49,060
and I<font color="#E5E5E5"> will now assume in a few</font>

138
00:05:45,669 --> 00:05:50,500
highlights<font color="#E5E5E5"> of our implementation let's</font>

139
00:05:49,060 --> 00:05:53,590
<font color="#E5E5E5">start very easy with the</font><font color="#CCCCCC"> first-order</font>

140
00:05:50,500 --> 00:05:56,320
<font color="#CCCCCC">boolean masking of X we want</font><font color="#E5E5E5"> to convert</font>

141
00:05:53,590 --> 00:05:59,080
<font color="#E5E5E5">this to a multiplicative masking so the</font>

142
00:05:56,320 --> 00:06:02,320
first step is to add<font color="#CCCCCC"> multiplicative</font>

143
00:05:59,080 --> 00:06:05,050
share so now we are<font color="#E5E5E5"> X is shared by</font><font color="#CCCCCC"> 3</font>

144
00:06:02,320 --> 00:06:07,510
shares of which<font color="#CCCCCC"> two</font><font color="#E5E5E5"> are boolean and one</font>

145
00:06:05,050 --> 00:06:08,800
is multiplicative<font color="#E5E5E5"> and then since we're</font>

146
00:06:07,510 --> 00:06:10,810
dealing<font color="#CCCCCC"> with glitches we're gonna add a</font>

147
00:06:08,800 --> 00:06:12,450
register<font color="#E5E5E5"> to stop the glitches from</font>

148
00:06:10,810 --> 00:06:15,370
<font color="#CCCCCC">propagating and to synchronize the wires</font>

149
00:06:12,450 --> 00:06:17,020
and finally we're gonna go back<font color="#E5E5E5"> from</font>

150
00:06:15,370 --> 00:06:19,120
<font color="#CCCCCC">three shares to two shares</font><font color="#E5E5E5"> by</font>

151
00:06:17,020 --> 00:06:21,669
<font color="#E5E5E5">compressing</font><font color="#CCCCCC"> the two boolean shares</font><font color="#E5E5E5"> into</font>

152
00:06:19,120 --> 00:06:25,180
<font color="#CCCCCC">one and voila</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have a multiplicative</font>

153
00:06:21,669 --> 00:06:27,370
sharing of X and so easy<font color="#CCCCCC"> we'll now we</font>

154
00:06:25,180 --> 00:06:28,870
want to get<font color="#E5E5E5"> the inverse and if you look</font>

155
00:06:27,370 --> 00:06:32,200
at the inverse<font color="#CCCCCC"> you can see that we</font>

156
00:06:28,870 --> 00:06:35,560
already have<font color="#E5E5E5"> one of the shares in our</font>

157
00:06:32,200 --> 00:06:37,479
circuit so we<font color="#E5E5E5"> only need to invert B to</font>

158
00:06:35,560 --> 00:06:38,080
obtain a multiplicative sharing of X

159
00:06:37,479 --> 00:06:40,150
inverse

160
00:06:38,080 --> 00:06:42,758
so that's pretty<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> instead</font><font color="#E5E5E5"> of two</font>

161
00:06:40,150 --> 00:06:44,409
inverters we only have one and now we're

162
00:06:42,759 --> 00:06:45,729
gonna go<font color="#E5E5E5"> back to boolean sharing and</font>

163
00:06:44,409 --> 00:06:48,520
we're<font color="#CCCCCC"> gonna use the same three steps</font>

164
00:06:45,729 --> 00:06:50,680
<font color="#E5E5E5">we're gonna first expand to three shares</font>

165
00:06:48,520 --> 00:06:52,330
with an extra<font color="#E5E5E5"> boolean share then we're</font>

166
00:06:50,680 --> 00:06:53,919
<font color="#CCCCCC">gonna synchronize to stop glitches</font><font color="#E5E5E5"> from</font>

167
00:06:52,330 --> 00:06:55,690
propagating<font color="#E5E5E5"> and then we're gonna</font>

168
00:06:53,919 --> 00:06:58,000
compress back<font color="#E5E5E5"> into two shares by</font>

169
00:06:55,690 --> 00:07:00,580
multiplying the multiplicative shares

170
00:06:58,000 --> 00:07:02,919
with each of the boolean shares so

171
00:07:00,580 --> 00:07:04,508
that's easy<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and the second order</font>

172
00:07:02,919 --> 00:07:06,128
<font color="#CCCCCC">is</font><font color="#E5E5E5"> very similar it</font><font color="#CCCCCC"> looks a bit more</font>

173
00:07:04,509 --> 00:07:09,039
complex but really it's just the same

174
00:07:06,129 --> 00:07:11,169
<font color="#E5E5E5">you can see here the three stages</font><font color="#CCCCCC"> of</font>

175
00:07:09,039 --> 00:07:13,479
expansion synchronization<font color="#E5E5E5"> and</font>

176
00:07:11,169 --> 00:07:14,889
compression<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we repeat</font><font color="#CCCCCC"> it because we</font>

177
00:07:13,479 --> 00:07:16,810
have<font color="#E5E5E5"> to go from three shares to three</font>

178
00:07:14,889 --> 00:07:19,000
shares<font color="#E5E5E5"> there's two things I'm going to</font>

179
00:07:16,810 --> 00:07:23,050
<font color="#E5E5E5">point out here first of all</font><font color="#CCCCCC"> we need an</font>

180
00:07:19,000 --> 00:07:24,729
extra<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> asking here and here</font><font color="#CCCCCC"> the</font>

181
00:07:23,050 --> 00:07:26,319
reason<font color="#E5E5E5"> for this is</font><font color="#CCCCCC"> that we found a flaw</font>

182
00:07:24,729 --> 00:07:28,750
<font color="#CCCCCC">in</font><font color="#E5E5E5"> previous works that we're using this</font>

183
00:07:26,319 --> 00:07:30,669
methodology and we were<font color="#CCCCCC"> able to solve it</font>

184
00:07:28,750 --> 00:07:33,639
<font color="#E5E5E5">and make the circuit second-order secure</font>

185
00:07:30,669 --> 00:07:36,190
by adding this extra<font color="#E5E5E5"> be masking and as</font>

186
00:07:33,639 --> 00:07:38,949
secondly<font color="#E5E5E5"> what's really cool</font><font color="#CCCCCC"> is that we</font>

187
00:07:36,190 --> 00:07:40,270
<font color="#E5E5E5">still</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> need one inverter it doesn't</font>

188
00:07:38,949 --> 00:07:42,840
matter if you're gonna do this<font color="#CCCCCC"> with four</font>

189
00:07:40,270 --> 00:07:46,060
shares or five or if you're crazy<font color="#CCCCCC"> then</font>

190
00:07:42,840 --> 00:07:48,340
<font color="#E5E5E5">you always always need only one local</font>

191
00:07:46,060 --> 00:07:50,590
<font color="#E5E5E5">Hollifield</font><font color="#CCCCCC"> inversion so that's really</font>

192
00:07:48,340 --> 00:07:52,479
<font color="#E5E5E5">pretty good for scalability</font><font color="#CCCCCC"> and the</font>

193
00:07:50,590 --> 00:07:55,000
<font color="#E5E5E5">reason for</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> that we're</font><font color="#CCCCCC"> using two</font>

194
00:07:52,479 --> 00:07:57,068
types<font color="#E5E5E5"> of multiplicative masking which</font>

195
00:07:55,000 --> 00:07:59,710
you can<font color="#E5E5E5"> find more information</font><font color="#CCCCCC"> about in</font>

196
00:07:57,069 --> 00:08:01,719
the paper<font color="#E5E5E5"> now let's look at this</font>

197
00:07:59,710 --> 00:08:03,340
<font color="#E5E5E5">Kronecker Delta</font><font color="#CCCCCC"> function this is the</font>

198
00:08:01,719 --> 00:08:05,710
function is going<font color="#E5E5E5"> to detect if our</font>

199
00:08:03,340 --> 00:08:09,460
shirts<font color="#CCCCCC"> input</font><font color="#E5E5E5"> our boolean</font><font color="#CCCCCC"> shirt</font><font color="#E5E5E5"> input is</font>

200
00:08:05,710 --> 00:08:12,340
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> and you can do that with a big and</font>

201
00:08:09,460 --> 00:08:14,469
gate of<font color="#CCCCCC"> eight bits or with a</font><font color="#E5E5E5"> tree of two</font>

202
00:08:12,340 --> 00:08:16,419
<font color="#E5E5E5">input and gates which we prefer because</font>

203
00:08:14,469 --> 00:08:18,190
<font color="#E5E5E5">we have boolean shares we're gonna</font>

204
00:08:16,419 --> 00:08:20,109
implement<font color="#CCCCCC"> this circuit by replacing each</font>

205
00:08:18,190 --> 00:08:21,610
of these and gates with<font color="#CCCCCC"> the first or</font>

206
00:08:20,110 --> 00:08:24,699
second order<font color="#E5E5E5"> secure multiplication</font>

207
00:08:21,610 --> 00:08:27,460
gadgets now let's count the inputs of

208
00:08:24,699 --> 00:08:30,069
<font color="#E5E5E5">the circuit we have for</font><font color="#CCCCCC"> example for</font>

209
00:08:27,460 --> 00:08:32,289
<font color="#E5E5E5">first order we have eight inputs each in</font>

210
00:08:30,069 --> 00:08:34,329
two shares so that's<font color="#E5E5E5"> 16 bits and then</font>

211
00:08:32,289 --> 00:08:36,669
we're adding<font color="#CCCCCC"> seven</font><font color="#E5E5E5"> more bits of fresh</font>

212
00:08:34,328 --> 00:08:37,239
randomness in the<font color="#CCCCCC"> end gates</font><font color="#E5E5E5"> so 23 bits</font>

213
00:08:36,669 --> 00:08:40,569
of input

214
00:08:37,240 --> 00:08:41,440
<font color="#E5E5E5">how many outputs do we have there's one</font>

215
00:08:40,570 --> 00:08:44,229
<font color="#E5E5E5">in</font><font color="#CCCCCC"> two share</font>

216
00:08:41,440 --> 00:08:45,850
so<font color="#E5E5E5"> two bits that's a very expensive two</font>

217
00:08:44,229 --> 00:08:47,890
bits if<font color="#CCCCCC"> you're computing now with 23</font>

218
00:08:45,850 --> 00:08:50,320
<font color="#E5E5E5">bits I mean if you</font><font color="#CCCCCC"> think about how much</font>

219
00:08:47,890 --> 00:08:51,410
entropy is in these inputs and we're all

220
00:08:50,320 --> 00:08:53,959
shoving it only in

221
00:08:51,410 --> 00:08:55,939
<font color="#E5E5E5">it's so we were thinking we should be</font>

222
00:08:53,959 --> 00:08:58,310
able to<font color="#E5E5E5"> recycle the randomness</font><font color="#CCCCCC"> to make</font>

223
00:08:55,940 --> 00:09:00,500
this method more efficient<font color="#E5E5E5"> and for that</font>

224
00:08:58,310 --> 00:09:02,018
we find we observe something<font color="#E5E5E5"> interesting</font>

225
00:09:00,500 --> 00:09:04,040
about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> end gates</font><font color="#E5E5E5"> that we're using</font>

226
00:09:02,019 --> 00:09:05,540
some people<font color="#CCCCCC"> notice as the domain</font>

227
00:09:04,040 --> 00:09:09,040
oriented<font color="#CCCCCC"> masking gates the hummus</font>

228
00:09:05,540 --> 00:09:11,420
<font color="#E5E5E5">presented</font><font color="#CCCCCC"> also known as isw</font>

229
00:09:09,040 --> 00:09:13,670
<font color="#E5E5E5">multiplication</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> most important thing</font>

230
00:09:11,420 --> 00:09:17,209
is if you<font color="#CCCCCC"> look at one output share</font><font color="#E5E5E5"> it</font>

231
00:09:13,670 --> 00:09:19,878
depends on the<font color="#CCCCCC"> xor</font><font color="#E5E5E5"> of the two shares of</font>

232
00:09:17,209 --> 00:09:21,859
<font color="#E5E5E5">B so it only depends on the value</font><font color="#CCCCCC"> of B</font>

233
00:09:19,879 --> 00:09:23,959
<font color="#CCCCCC">and not on its sharing and that's a</font>

234
00:09:21,860 --> 00:09:25,699
subtle<font color="#E5E5E5"> but very</font><font color="#CCCCCC"> important difference</font>

235
00:09:23,959 --> 00:09:27,910
<font color="#E5E5E5">because it means</font><font color="#CCCCCC"> that any randomness</font>

236
00:09:25,699 --> 00:09:30,349
<font color="#CCCCCC">that was used to obtain</font><font color="#E5E5E5"> the shares b1 b2</font>

237
00:09:27,910 --> 00:09:32,029
<font color="#E5E5E5">that randomness is</font><font color="#CCCCCC"> canceled</font><font color="#E5E5E5"> by the time</font>

238
00:09:30,350 --> 00:09:35,269
you get to<font color="#CCCCCC"> the output of this gate and</font>

239
00:09:32,029 --> 00:09:37,550
<font color="#CCCCCC">what does this</font><font color="#E5E5E5"> mean for us it means that</font>

240
00:09:35,269 --> 00:09:39,529
this point of the circuit is<font color="#CCCCCC"> going to be</font>

241
00:09:37,550 --> 00:09:41,329
completely independent<font color="#E5E5E5"> of any randomness</font>

242
00:09:39,529 --> 00:09:43,009
that<font color="#E5E5E5"> was used in this gate and this</font>

243
00:09:41,329 --> 00:09:44,508
point in the circuit<font color="#CCCCCC"> is independent of</font>

244
00:09:43,009 --> 00:09:46,879
<font color="#E5E5E5">any randomness that was used in this</font>

245
00:09:44,509 --> 00:09:48,470
case<font color="#CCCCCC"> and so on</font><font color="#E5E5E5"> the output is also</font>

246
00:09:46,879 --> 00:09:50,990
<font color="#CCCCCC">independent of the</font><font color="#E5E5E5"> randomness</font><font color="#CCCCCC"> that is</font>

247
00:09:48,470 --> 00:09:53,569
used in this part the<font color="#E5E5E5"> lower half of the</font>

248
00:09:50,990 --> 00:09:56,149
circuit so<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> pretty cool and we use</font>

249
00:09:53,569 --> 00:09:57,889
that<font color="#E5E5E5"> to recycle some of the randomness</font>

250
00:09:56,149 --> 00:10:00,560
we reduced<font color="#E5E5E5"> the fresh randomness</font><font color="#CCCCCC"> cost</font>

251
00:09:57,889 --> 00:10:02,689
<font color="#E5E5E5">from</font><font color="#CCCCCC"> seven bits to</font><font color="#E5E5E5"> three bits and we did</font>

252
00:10:00,560 --> 00:10:05,089
<font color="#E5E5E5">something similar for</font><font color="#CCCCCC"> second-order</font><font color="#E5E5E5"> it's</font>

253
00:10:02,689 --> 00:10:07,990
a bit more<font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> and we went</font><font color="#E5E5E5"> from</font>

254
00:10:05,089 --> 00:10:11,029
21<font color="#E5E5E5"> bits of fresh randomness to 13 bits</font>

255
00:10:07,990 --> 00:10:14,149
and finally this circuit<font color="#E5E5E5"> takes three</font>

256
00:10:11,029 --> 00:10:16,699
cycles to compute because<font color="#E5E5E5"> we have three</font>

257
00:10:14,149 --> 00:10:18,500
stages of a<font color="#E5E5E5"> nonlinear block so that</font>

258
00:10:16,699 --> 00:10:21,139
<font color="#CCCCCC">could mean</font><font color="#E5E5E5"> that you have</font><font color="#CCCCCC"> to store the</font>

259
00:10:18,500 --> 00:10:23,839
<font color="#CCCCCC">sbox</font><font color="#E5E5E5"> input in three stages of registers</font>

260
00:10:21,139 --> 00:10:26,120
while it's<font color="#E5E5E5"> waiting for this outputs to</font>

261
00:10:23,839 --> 00:10:28,490
<font color="#CCCCCC">be ready</font><font color="#E5E5E5"> and those registers can make</font>

262
00:10:26,120 --> 00:10:30,259
this method<font color="#CCCCCC"> very expensive it it almost</font>

263
00:10:28,490 --> 00:10:31,250
<font color="#E5E5E5">makes this</font><font color="#CCCCCC"> method more expensive than</font>

264
00:10:30,259 --> 00:10:33,589
what we already<font color="#E5E5E5"> had in the</font>

265
00:10:31,250 --> 00:10:35,750
<font color="#E5E5E5">state-of-the-art so what we did was</font><font color="#CCCCCC"> we</font>

266
00:10:33,589 --> 00:10:39,019
<font color="#E5E5E5">reorganized the states</font><font color="#CCCCCC"> in the key array</font>

267
00:10:35,750 --> 00:10:42,800
<font color="#E5E5E5">so that this function is pre computed</font>

268
00:10:39,019 --> 00:10:44,689
<font color="#E5E5E5">while the inputs is still stored in the</font>

269
00:10:42,800 --> 00:10:46,849
<font color="#E5E5E5">state and that way we</font><font color="#CCCCCC"> avoid these</font>

270
00:10:44,689 --> 00:10:49,089
registers<font color="#E5E5E5"> and as one of the reasons we</font>

271
00:10:46,850 --> 00:10:52,540
were able<font color="#E5E5E5"> to obtain the results we got</font>

272
00:10:49,089 --> 00:10:55,910
so let's<font color="#E5E5E5"> look at these results again</font>

273
00:10:52,540 --> 00:10:58,849
<font color="#E5E5E5">this you already saw our s box is</font><font color="#CCCCCC"> 29%</font>

274
00:10:55,910 --> 00:11:01,219
<font color="#E5E5E5">smaller</font><font color="#CCCCCC"> a first-order and 18% smaller in</font>

275
00:10:58,850 --> 00:11:03,290
<font color="#E5E5E5">second-order if we look at the entire</font>

276
00:11:01,220 --> 00:11:05,000
AES implementation we have<font color="#E5E5E5"> an</font>

277
00:11:03,290 --> 00:11:07,430
improvement of about<font color="#CCCCCC"> 10%</font>

278
00:11:05,000 --> 00:11:09,830
<font color="#E5E5E5">for both orders and as you can see our</font>

279
00:11:07,430 --> 00:11:12,739
randomness is pretty much<font color="#E5E5E5"> the same as</font>

280
00:11:09,830 --> 00:11:15,440
the one that was obtained by<font color="#CCCCCC"> Gauss</font><font color="#E5E5E5"> and</font>

281
00:11:12,740 --> 00:11:17,830
<font color="#E5E5E5">his co-authors and also the latency does</font>

282
00:11:15,440 --> 00:11:21,140
not differ much<font color="#CCCCCC"> from</font><font color="#E5E5E5"> state of</font><font color="#CCCCCC"> the art</font>

283
00:11:17,830 --> 00:11:23,060
finally I will tell you about the

284
00:11:21,140 --> 00:11:25,730
evaluations that<font color="#E5E5E5"> we did in a paper you</font>

285
00:11:23,060 --> 00:11:28,699
<font color="#CCCCCC">can find</font><font color="#E5E5E5"> theoretical evaluations that we</font>

286
00:11:25,730 --> 00:11:31,310
<font color="#E5E5E5">did and simulations now I will only show</font>

287
00:11:28,700 --> 00:11:33,890
you our practical lab evaluations<font color="#E5E5E5"> and</font>

288
00:11:31,310 --> 00:11:36,859
for<font color="#E5E5E5"> those who are not familiar with</font><font color="#CCCCCC"> DVLA</font>

289
00:11:33,890 --> 00:11:39,110
it's a hypothesis test that allows<font color="#CCCCCC"> you</font>

290
00:11:36,860 --> 00:11:41,000
to<font color="#E5E5E5"> detect leakage by comparing the</font>

291
00:11:39,110 --> 00:11:43,700
distributions of two groups with a fixed

292
00:11:41,000 --> 00:11:46,550
<font color="#CCCCCC">plaintext</font><font color="#E5E5E5"> or randomness pantech</font><font color="#CCCCCC"> a random</font>

293
00:11:43,700 --> 00:11:47,840
plaintext<font color="#CCCCCC"> and</font><font color="#E5E5E5"> on the left side we</font><font color="#CCCCCC"> see</font>

294
00:11:46,550 --> 00:11:49,729
what happens when<font color="#E5E5E5"> we</font><font color="#CCCCCC"> turn the masking</font>

295
00:11:47,840 --> 00:11:52,160
off<font color="#CCCCCC"> as you can see leakage everywhere</font>

296
00:11:49,730 --> 00:11:54,380
because<font color="#E5E5E5"> our t-statistic surpasses the</font>

297
00:11:52,160 --> 00:11:56,390
threshold<font color="#E5E5E5"> everywhere when we turn the</font>

298
00:11:54,380 --> 00:11:57,830
masking on we see that the<font color="#CCCCCC"> first-order</font>

299
00:11:56,390 --> 00:11:59,569
leakage disappears

300
00:11:57,830 --> 00:12:01,460
we still have leakage<font color="#E5E5E5"> in the second</font>

301
00:11:59,570 --> 00:12:04,640
<font color="#E5E5E5">order moment which is normal</font><font color="#CCCCCC"> because</font>

302
00:12:01,460 --> 00:12:06,440
this is our to share implementation we

303
00:12:04,640 --> 00:12:08,000
did the same<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> for our</font><font color="#E5E5E5"> three share</font>

304
00:12:06,440 --> 00:12:10,850
implementation which is<font color="#E5E5E5"> second order</font>

305
00:12:08,000 --> 00:12:12,950
<font color="#E5E5E5">secure again when we turn the masking</font>

306
00:12:10,850 --> 00:12:14,330
off we have leakage everywhere and the

307
00:12:12,950 --> 00:12:18,580
leakage disappears when we turn the

308
00:12:14,330 --> 00:12:20,810
masking on<font color="#E5E5E5"> however this is a univariate</font>

309
00:12:18,580 --> 00:12:22,790
<font color="#E5E5E5">leakage detection test and in a</font>

310
00:12:20,810 --> 00:12:25,010
<font color="#CCCCCC">second-order attack the attacker</font><font color="#E5E5E5"> is</font>

311
00:12:22,790 --> 00:12:26,959
allowed<font color="#CCCCCC"> to combine</font><font color="#E5E5E5"> multiple time samples</font>

312
00:12:25,010 --> 00:12:30,290
so<font color="#E5E5E5"> we also did a</font><font color="#CCCCCC"> bivariate leakage</font>

313
00:12:26,960 --> 00:12:31,850
detection test we applied it first to

314
00:12:30,290 --> 00:12:35,180
<font color="#CCCCCC">our first</font><font color="#E5E5E5"> order implementation which</font>

315
00:12:31,850 --> 00:12:36,589
naturally shows leakage<font color="#E5E5E5"> Peaks</font><font color="#CCCCCC"> and then</font>

316
00:12:35,180 --> 00:12:38,449
when we applied it<font color="#CCCCCC"> to our second-order</font>

317
00:12:36,589 --> 00:12:44,060
<font color="#E5E5E5">implementation the leakage Peaks</font>

318
00:12:38,450 --> 00:12:45,800
disappeared so to conclude<font color="#E5E5E5"> we</font><font color="#CCCCCC"> wanted to</font>

319
00:12:44,060 --> 00:12:48,319
keep it simple<font color="#CCCCCC"> and we found some very</font>

320
00:12:45,800 --> 00:12:51,500
nice inspiration in<font color="#CCCCCC"> work from</font><font color="#E5E5E5"> almost</font>

321
00:12:48,320 --> 00:12:54,050
<font color="#CCCCCC">twenty years</font><font color="#E5E5E5"> ago and we</font><font color="#CCCCCC"> really wanted</font><font color="#E5E5E5"> to</font>

322
00:12:51,500 --> 00:12:56,510
push<font color="#CCCCCC"> the limits</font><font color="#E5E5E5"> recycle randomness and</font>

323
00:12:54,050 --> 00:12:58,699
customize<font color="#CCCCCC"> this implementation</font><font color="#E5E5E5"> this is</font>

324
00:12:56,510 --> 00:13:00,260
why<font color="#E5E5E5"> I presented to you</font><font color="#CCCCCC"> a first and a</font>

325
00:12:58,700 --> 00:13:01,910
second<font color="#E5E5E5"> order implementation and</font><font color="#CCCCCC"> not a</font>

326
00:13:00,260 --> 00:13:04,250
generic higher order construction

327
00:13:01,910 --> 00:13:06,770
because<font color="#E5E5E5"> for any order</font><font color="#CCCCCC"> that you're</font>

328
00:13:04,250 --> 00:13:08,450
implementing the customization<font color="#E5E5E5"> only</font>

329
00:13:06,770 --> 00:13:12,350
customization is gonna<font color="#E5E5E5"> make it</font><font color="#CCCCCC"> as</font>

330
00:13:08,450 --> 00:13:13,760
optimal as<font color="#CCCCCC"> you can possibly</font><font color="#E5E5E5"> get thank</font>

331
00:13:12,350 --> 00:13:15,020
you<font color="#E5E5E5"> for listening and I'm ready to</font>

332
00:13:13,760 --> 00:13:24,630
<font color="#E5E5E5">receive</font><font color="#CCCCCC"> your questions</font>

333
00:13:15,020 --> 00:13:24,630
[Applause]

334
00:13:26,040 --> 00:13:40,120
questions for<font color="#CCCCCC"> Loudoun</font><font color="#E5E5E5"> I mean</font><font color="#CCCCCC"> do you</font><font color="#E5E5E5"> hear</font>

335
00:13:36,850 --> 00:13:43,990
me<font color="#CCCCCC"> no</font><font color="#E5E5E5"> I have two questions actually one</font>

336
00:13:40,120 --> 00:13:46,300
is related<font color="#CCCCCC"> to how how the mask is</font>

337
00:13:43,990 --> 00:13:48,339
generated<font color="#E5E5E5"> you know in multiplicative</font>

338
00:13:46,300 --> 00:13:52,870
masking you have to get rid<font color="#CCCCCC"> of the mask</font>

339
00:13:48,339 --> 00:13:55,630
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> right yeah and then I can imagine</font>

340
00:13:52,870 --> 00:14:00,220
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you had a buffer probably you had a</font>

341
00:13:55,630 --> 00:14:01,750
buffer<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you saved masks inside</font>

342
00:14:00,220 --> 00:14:04,089
<font color="#E5E5E5">because you need to this fresh</font>

343
00:14:01,750 --> 00:14:04,270
randomness right<font color="#E5E5E5"> are</font><font color="#CCCCCC"> zero or one and so</font>

344
00:14:04,089 --> 00:14:06,250
on

345
00:14:04,270 --> 00:14:10,000
and none of them<font color="#E5E5E5"> has a lot</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be zero</font>

346
00:14:06,250 --> 00:14:11,890
<font color="#E5E5E5">and then if I</font><font color="#CCCCCC"> consider it</font><font color="#E5E5E5"> straight</font><font color="#CCCCCC"> over</font>

347
00:14:10,000 --> 00:14:13,540
<font color="#E5E5E5">the implementation that you need to have</font>

348
00:14:11,890 --> 00:14:16,870
the output of the<font color="#CCCCCC"> PRNG</font>

349
00:14:13,540 --> 00:14:19,060
<font color="#E5E5E5">and then check</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> is zero or not if</font>

350
00:14:16,870 --> 00:14:21,760
it's zero<font color="#E5E5E5"> then you need to regenerate</font>

351
00:14:19,060 --> 00:14:24,310
<font color="#E5E5E5">you cannot map zero to another random</font>

352
00:14:21,760 --> 00:14:27,970
variable<font color="#CCCCCC"> another</font><font color="#E5E5E5"> random value otherwise</font>

353
00:14:24,310 --> 00:14:30,119
you<font color="#E5E5E5"> get a bias right and then then and</font>

354
00:14:27,970 --> 00:14:33,370
if you don't have such a large<font color="#E5E5E5"> buffer</font>

355
00:14:30,120 --> 00:14:36,040
then you have to stop<font color="#CCCCCC"> hold up the system</font>

356
00:14:33,370 --> 00:14:40,990
<font color="#CCCCCC">to generate</font><font color="#E5E5E5"> another random mask which is</font>

357
00:14:36,040 --> 00:14:42,760
not zero<font color="#CCCCCC"> and then continue yes so we</font>

358
00:14:40,990 --> 00:14:46,870
believe<font color="#E5E5E5"> that you can do this with very</font>

359
00:14:42,760 --> 00:14:48,310
<font color="#CCCCCC">little overhead</font><font color="#E5E5E5"> so if you have your</font>

360
00:14:46,870 --> 00:14:49,750
<font color="#E5E5E5">random as being generated</font><font color="#CCCCCC"> offline</font>

361
00:14:48,310 --> 00:14:52,510
there's basically no problem because<font color="#E5E5E5"> you</font>

362
00:14:49,750 --> 00:14:55,089
can check it in advance<font color="#CCCCCC"> if you like</font>

363
00:14:52,510 --> 00:14:56,980
normally have an online<font color="#E5E5E5"> PRNG to generate</font>

364
00:14:55,089 --> 00:15:01,870
<font color="#E5E5E5">your fresh randomness and you want to</font>

365
00:14:56,980 --> 00:15:04,180
get a<font color="#E5E5E5"> non zero mask</font><font color="#CCCCCC"> so this the way</font><font color="#E5E5E5"> if</font>

366
00:15:01,870 --> 00:15:06,820
you look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> our round function</font><font color="#E5E5E5"> the the</font>

367
00:15:04,180 --> 00:15:10,180
clock cycles in one iteration<font color="#CCCCCC"> not all</font><font color="#E5E5E5"> of</font>

368
00:15:06,820 --> 00:15:11,589
them are not all<font color="#E5E5E5"> of them need randomness</font>

369
00:15:10,180 --> 00:15:14,170
because<font color="#E5E5E5"> some of them are spent</font><font color="#CCCCCC"> waiting</font>

370
00:15:11,589 --> 00:15:16,180
<font color="#CCCCCC">for the result in the pipeline so we use</font>

371
00:15:14,170 --> 00:15:18,010
those<font color="#E5E5E5"> extra cycles during those cycles</font>

372
00:15:16,180 --> 00:15:19,510
we're getting extra randomness<font color="#CCCCCC"> so we're</font>

373
00:15:18,010 --> 00:15:21,310
storing<font color="#CCCCCC"> that randomness</font><font color="#E5E5E5"> in a buffer like</font>

374
00:15:19,510 --> 00:15:24,939
you said and in the paper you will see

375
00:15:21,310 --> 00:15:27,430
we<font color="#E5E5E5"> computed</font><font color="#CCCCCC"> how large this buffer has</font><font color="#E5E5E5"> to</font>

376
00:15:24,940 --> 00:15:28,750
be to get a negligible probability that

377
00:15:27,430 --> 00:15:31,989
you will<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to stop the pipeline</font>

378
00:15:28,750 --> 00:15:32,830
<font color="#CCCCCC">because</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> times you can compute</font>

379
00:15:31,990 --> 00:15:34,810
<font color="#E5E5E5">how many</font>

380
00:15:32,830 --> 00:15:36,250
cycles<font color="#E5E5E5"> one encryption is and how many</font>

381
00:15:34,810 --> 00:15:38,640
randomness you're getting in total<font color="#E5E5E5"> and</font>

382
00:15:36,250 --> 00:15:42,670
<font color="#CCCCCC">you really</font><font color="#E5E5E5"> don't need that big a buffer</font>

383
00:15:38,640 --> 00:15:44,920
<font color="#E5E5E5">okay then then the problem would be for</font>

384
00:15:42,670 --> 00:15:46,449
me is<font color="#CCCCCC"> that the comparison with your</font>

385
00:15:44,920 --> 00:15:49,900
scheme and the state of<font color="#E5E5E5"> the art which</font>

386
00:15:46,450 --> 00:15:52,870
doesn't<font color="#E5E5E5"> need that buffer that buffer yes</font>

387
00:15:49,900 --> 00:15:54,880
but there there might be<font color="#E5E5E5"> that's true but</font>

388
00:15:52,870 --> 00:15:58,480
we again we think<font color="#E5E5E5"> the next the overhead</font>

389
00:15:54,880 --> 00:16:00,340
is negligible<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> okay thank you</font>

390
00:15:58,480 --> 00:16:02,470
then slide number<font color="#CCCCCC"> twenty-seven can you</font>

391
00:16:00,340 --> 00:16:04,420
show or<font color="#CCCCCC"> even that one was</font><font color="#E5E5E5"> okay I still</font>

392
00:16:02,470 --> 00:16:06,910
it<font color="#E5E5E5"> doesn't matter here or in the first</font>

393
00:16:04,420 --> 00:16:08,380
<font color="#E5E5E5">or the first of the secure design the</font>

394
00:16:06,910 --> 00:16:09,850
inversion that you have I can<font color="#E5E5E5"> imagine</font>

395
00:16:08,380 --> 00:16:12,790
that<font color="#E5E5E5"> he used at Harbor field approach</font>

396
00:16:09,850 --> 00:16:15,550
<font color="#E5E5E5">which makes it very small no we use the</font>

397
00:16:12,790 --> 00:16:18,099
<font color="#CCCCCC">Boyer</font><font color="#E5E5E5"> Peralta one that's also a small</font>

398
00:16:15,550 --> 00:16:20,380
and how<font color="#E5E5E5"> about the multiplications</font><font color="#CCCCCC"> I mean</font>

399
00:16:18,100 --> 00:16:22,060
the inversions<font color="#E5E5E5"> the</font><font color="#CCCCCC"> inversions</font><font color="#E5E5E5"> only one</font>

400
00:16:20,380 --> 00:16:23,920
you need independent of the<font color="#E5E5E5"> order of the</font>

401
00:16:22,060 --> 00:16:24,969
masking but you need many

402
00:16:23,920 --> 00:16:27,250
multiplications and these

403
00:16:24,970 --> 00:16:29,110
multiplications<font color="#E5E5E5"> are not cheap right</font><font color="#CCCCCC"> and</font>

404
00:16:27,250 --> 00:16:30,460
then did you<font color="#E5E5E5"> just implement</font><font color="#CCCCCC"> that</font>

405
00:16:29,110 --> 00:16:32,980
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> a schoolbook</font>

406
00:16:30,460 --> 00:16:35,680
multiplication<font color="#E5E5E5"> or bottom or you did</font>

407
00:16:32,980 --> 00:16:37,780
<font color="#CCCCCC">something else</font><font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> to</font>

408
00:16:35,680 --> 00:16:39,189
<font color="#E5E5E5">remember now what we used but I don't</font>

409
00:16:37,780 --> 00:16:42,990
remember spending a lot of time on this

410
00:16:39,190 --> 00:16:45,880
<font color="#CCCCCC">I think we used pretty</font><font color="#E5E5E5"> straightforward</font>

411
00:16:42,990 --> 00:16:47,500
<font color="#CCCCCC">gf2 today</font><font color="#E5E5E5"> it multiplication</font><font color="#CCCCCC"> I'm just</font>

412
00:16:45,880 --> 00:16:50,230
<font color="#CCCCCC">thinking loudly</font><font color="#E5E5E5"> yeah I mean it doesn't</font>

413
00:16:47,500 --> 00:16:53,980
<font color="#E5E5E5">make sense to</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> sorry I</font><font color="#CCCCCC"> asked a</font><font color="#E5E5E5"> lot</font>

414
00:16:50,230 --> 00:16:57,820
<font color="#CCCCCC">of questions like I'm sorry</font><font color="#E5E5E5"> does it make</font>

415
00:16:53,980 --> 00:17:00,070
sense that you<font color="#E5E5E5"> change the field here at</font>

416
00:16:57,820 --> 00:17:02,410
the start<font color="#E5E5E5"> for</font><font color="#CCCCCC"> all of the variables and</font>

417
00:17:00,070 --> 00:17:04,780
do the multiplication also in a<font color="#E5E5E5"> powerful</font>

418
00:17:02,410 --> 00:17:07,680
and also<font color="#CCCCCC"> do the inversion the</font><font color="#E5E5E5"> taller</font>

419
00:17:04,780 --> 00:17:12,030
field<font color="#E5E5E5"> that's a very interesting question</font>

420
00:17:07,680 --> 00:17:15,780
<font color="#CCCCCC">and we should definitely try that out</font>

421
00:17:12,030 --> 00:17:18,430
<font color="#E5E5E5">okay we can have one more short question</font>

422
00:17:15,780 --> 00:17:20,139
or not<font color="#CCCCCC"> okay</font>

423
00:17:18,430 --> 00:17:23,160
let's thank the speaker and<font color="#E5E5E5"> all the</font>

424
00:17:20,140 --> 00:17:23,160
<font color="#E5E5E5">speakers in this session</font>

425
00:17:23,439 --> 00:17:25,500
<font color="#E5E5E5">you</font>

