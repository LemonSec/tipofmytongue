1
00:00:00,890 --> 00:00:07,710
<font color="#E5E5E5">all right hello</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> welcome to chess have</font>

2
00:00:05,879 --> 00:00:09,928
the pleasure of chairing the first

3
00:00:07,710 --> 00:00:15,120
session and in this session we'll have

4
00:00:09,929 --> 00:00:16,740
three talks on masking and I'll read all

5
00:00:15,120 --> 00:00:18,630
the author names<font color="#E5E5E5"> because I was told I</font>

6
00:00:16,740 --> 00:00:20,580
have<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> the first</font>

7
00:00:18,630 --> 00:00:23,220
presentation is by<font color="#CCCCCC"> Sebastian first Vance</font>

8
00:00:20,580 --> 00:00:25,229
<font color="#CCCCCC">and also Santos mineral</font><font color="#E5E5E5"> Pato Clara</font>

9
00:00:23,220 --> 00:00:27,720
Valley<font color="#CCCCCC"> illunga and phone-sex have a</font>

10
00:00:25,230 --> 00:00:29,849
standard and<font color="#CCCCCC"> a fix will if the talk</font>

11
00:00:27,720 --> 00:00:32,549
<font color="#E5E5E5">about composable masking schemes</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

12
00:00:29,849 --> 00:00:38,760
presence of physical defaults<font color="#E5E5E5"> and the</font>

13
00:00:32,549 --> 00:00:39,899
robust probing model so thanks for<font color="#E5E5E5"> the</font>

14
00:00:38,760 --> 00:00:41,870
introduction<font color="#E5E5E5"> and good</font><font color="#CCCCCC"> afternoon</font>

15
00:00:39,899 --> 00:00:44,489
<font color="#E5E5E5">everybody</font>

16
00:00:41,870 --> 00:00:47,578
<font color="#CCCCCC">in</font><font color="#E5E5E5"> brief this is</font><font color="#CCCCCC"> a paper about</font><font color="#E5E5E5"> masking</font>

17
00:00:44,489 --> 00:00:49,379
physical defaults and composability<font color="#E5E5E5"> so I</font>

18
00:00:47,579 --> 00:00:51,050
will first<font color="#E5E5E5"> take</font><font color="#CCCCCC"> some time to introduce</font>

19
00:00:49,379 --> 00:00:53,160
these notions and then try<font color="#E5E5E5"> to explain</font>

20
00:00:51,050 --> 00:00:55,519
<font color="#E5E5E5">what is the main contribution of the</font>

21
00:00:53,160 --> 00:00:59,309
paper<font color="#E5E5E5"> and why I believe</font><font color="#CCCCCC"> it's interesting</font>

22
00:00:55,520 --> 00:01:00,930
<font color="#E5E5E5">so starting with masking probably</font><font color="#CCCCCC"> move</font>

23
00:00:59,309 --> 00:01:02,579
most of<font color="#E5E5E5"> you know that</font><font color="#CCCCCC"> but masking is a</font>

24
00:01:00,930 --> 00:01:06,090
<font color="#E5E5E5">countermeasure against such an analysis</font>

25
00:01:02,579 --> 00:01:07,950
and the idea is that if<font color="#E5E5E5"> you have a leak</font>

26
00:01:06,090 --> 00:01:09,930
in device you are<font color="#E5E5E5"> going to split any</font>

27
00:01:07,950 --> 00:01:12,689
sensitive variable in the leaking device

28
00:01:09,930 --> 00:01:16,820
into<font color="#CCCCCC"> details and do all the computations</font>

29
00:01:12,689 --> 00:01:19,649
<font color="#E5E5E5">in the device on those shares only and</font>

30
00:01:16,820 --> 00:01:22,320
ultimately what we<font color="#CCCCCC"> want with masking is</font>

31
00:01:19,650 --> 00:01:24,270
something called noisy leakage<font color="#E5E5E5"> security</font>

32
00:01:22,320 --> 00:01:26,460
represented at the bottom of the slide

33
00:01:24,270 --> 00:01:29,070
<font color="#CCCCCC">and in this model we give the adversary</font>

34
00:01:26,460 --> 00:01:30,689
a leakage trace<font color="#E5E5E5"> of a measurement</font><font color="#CCCCCC"> trace</font>

35
00:01:29,070 --> 00:01:32,669
that could be for<font color="#CCCCCC"> example the power</font>

36
00:01:30,689 --> 00:01:35,189
consumption<font color="#CCCCCC"> of your</font><font color="#E5E5E5"> implementation</font><font color="#CCCCCC"> and</font>

37
00:01:32,670 --> 00:01:37,439
in this case we<font color="#CCCCCC"> are going to find some</font>

38
00:01:35,189 --> 00:01:41,758
leakage samples about the<font color="#E5E5E5"> manipulation</font>

39
00:01:37,439 --> 00:01:43,048
of each and every<font color="#CCCCCC"> share in this model</font>

40
00:01:41,759 --> 00:01:44,729
it's well known<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of</font>

41
00:01:43,049 --> 00:01:47,460
traces<font color="#E5E5E5"> that you need to recover the key</font>

42
00:01:44,729 --> 00:01:49,079
of to recover sensitive information<font color="#E5E5E5"> is</font>

43
00:01:47,460 --> 00:01:51,210
inversely proportional<font color="#CCCCCC"> to the mutual</font>

44
00:01:49,079 --> 00:01:54,658
<font color="#CCCCCC">information</font><font color="#E5E5E5"> between the sensitive value</font>

45
00:01:51,210 --> 00:01:56,699
X and the leakage vector L and ideally

46
00:01:54,659 --> 00:02:00,479
the goal of masking is to bound this

47
00:01:56,700 --> 00:02:02,670
mutual information such that it's lower

48
00:02:00,479 --> 00:02:04,320
than<font color="#E5E5E5"> the mutual information between one</font>

49
00:02:02,670 --> 00:02:06,990
single share and the corresponding

50
00:02:04,320 --> 00:02:08,989
leakage samples raised to a power<font color="#E5E5E5"> D</font><font color="#CCCCCC"> and</font>

51
00:02:06,990 --> 00:02:12,750
this power D of course<font color="#E5E5E5"> gives</font>

52
00:02:08,989 --> 00:02:13,950
<font color="#E5E5E5">exponential security increase so this is</font>

53
00:02:12,750 --> 00:02:15,690
what we want<font color="#E5E5E5"> to intimately</font>

54
00:02:13,950 --> 00:02:18,268
sometimes it's not<font color="#CCCCCC"> very convenient</font><font color="#E5E5E5"> to do</font>

55
00:02:15,690 --> 00:02:20,879
proofs of analysis in so concrete model

56
00:02:18,269 --> 00:02:23,250
so we also have<font color="#E5E5E5"> more abstract models and</font>

57
00:02:20,879 --> 00:02:25,799
I will mention<font color="#E5E5E5"> two of them one</font><font color="#CCCCCC"> is what</font>

58
00:02:23,250 --> 00:02:28,620
<font color="#CCCCCC">we call bounded moment security which is</font>

59
00:02:25,800 --> 00:02:30,989
easily explained with an<font color="#E5E5E5"> example here on</font>

60
00:02:28,620 --> 00:02:32,760
<font color="#CCCCCC">the left so</font><font color="#E5E5E5"> the idea is that rather than</font>

61
00:02:30,989 --> 00:02:34,519
<font color="#CCCCCC">looking at</font><font color="#E5E5E5"> the full</font><font color="#CCCCCC"> distribution of the</font>

62
00:02:32,760 --> 00:02:36,840
leakages we are going just<font color="#E5E5E5"> to look at</font>

63
00:02:34,519 --> 00:02:39,420
the<font color="#E5E5E5"> statistical moments of the</font>

64
00:02:36,840 --> 00:02:41,790
<font color="#E5E5E5">distribution so this for example is</font><font color="#CCCCCC"> the</font>

65
00:02:39,420 --> 00:02:44,369
distribution of a<font color="#CCCCCC"> single bit</font><font color="#E5E5E5"> that we</font>

66
00:02:41,790 --> 00:02:46,048
encoded with<font color="#E5E5E5"> two shares so we have the</font>

67
00:02:44,370 --> 00:02:48,120
green and<font color="#CCCCCC"> the purple</font><font color="#E5E5E5"> distribution and</font>

68
00:02:46,049 --> 00:02:49,950
it's quite<font color="#E5E5E5"> easy to see that the</font><font color="#CCCCCC"> mean</font>

69
00:02:48,120 --> 00:02:52,860
vector of these two<font color="#E5E5E5"> distribution is</font>

70
00:02:49,950 --> 00:02:54,599
exactly the same<font color="#E5E5E5"> and in general what we</font>

71
00:02:52,860 --> 00:02:56,970
want with bounded moment security is

72
00:02:54,599 --> 00:02:59,220
<font color="#E5E5E5">that any statistical moment of the decay</font>

73
00:02:56,970 --> 00:03:02,130
distribution<font color="#E5E5E5"> up to the order D minus</font><font color="#CCCCCC"> one</font>

74
00:02:59,220 --> 00:03:06,120
is<font color="#E5E5E5"> independent of the secrets that's the</font>

75
00:03:02,130 --> 00:03:07,769
best thing<font color="#E5E5E5"> that we can have an even 20</font>

76
00:03:06,120 --> 00:03:09,870
even more<font color="#CCCCCC"> abstract is of course what we</font>

77
00:03:07,769 --> 00:03:11,640
call probing security and in<font color="#CCCCCC"> this case</font>

78
00:03:09,870 --> 00:03:14,910
we directly allow the adversary to<font color="#E5E5E5"> probe</font>

79
00:03:11,640 --> 00:03:16,798
<font color="#E5E5E5">wires within the implementation and in</font>

80
00:03:14,910 --> 00:03:19,799
this<font color="#E5E5E5"> case what what we can hope at best</font>

81
00:03:16,799 --> 00:03:23,549
is to have any<font color="#CCCCCC"> set of</font><font color="#E5E5E5"> D</font><font color="#CCCCCC"> - all</font>

82
00:03:19,799 --> 00:03:26,609
independent of the secret<font color="#E5E5E5"> and this means</font>

83
00:03:23,549 --> 00:03:28,859
<font color="#E5E5E5">we</font><font color="#CCCCCC"> have a quite large variety of model</font>

84
00:03:26,609 --> 00:03:31,739
ranging from the noisy leakage model

85
00:03:28,859 --> 00:03:33,540
where we<font color="#CCCCCC"> have a kind of physical and</font>

86
00:03:31,739 --> 00:03:35,760
quantitative<font color="#E5E5E5"> view of the security</font><font color="#CCCCCC"> and</font>

87
00:03:33,540 --> 00:03:38,578
probing security which<font color="#CCCCCC"> is abstract</font><font color="#E5E5E5"> and</font>

88
00:03:35,760 --> 00:03:40,170
qualitative<font color="#E5E5E5"> and what's nice and very</font>

89
00:03:38,579 --> 00:03:42,060
interesting is that<font color="#E5E5E5"> we have connections</font>

90
00:03:40,170 --> 00:03:44,388
between these<font color="#E5E5E5"> models and in particular</font>

91
00:03:42,060 --> 00:03:47,519
those are very important result by Duke

92
00:03:44,389 --> 00:03:49,530
champion Barsky and Faust at your crypt

93
00:03:47,519 --> 00:03:51,810
four years ago<font color="#E5E5E5"> which show</font><font color="#CCCCCC"> that if you</font>

94
00:03:49,530 --> 00:03:53,340
have probing security and that on the

95
00:03:51,810 --> 00:03:55,290
top<font color="#E5E5E5"> of it you can</font><font color="#CCCCCC"> guarantee that</font><font color="#E5E5E5"> your</font>

96
00:03:53,340 --> 00:03:56,910
leakage samples have some kind of

97
00:03:55,290 --> 00:03:59,569
<font color="#CCCCCC">independence condition and are</font>

98
00:03:56,910 --> 00:04:02,790
sufficiently noisy then this implies

99
00:03:59,569 --> 00:04:04,589
<font color="#E5E5E5">noisy leakage security and this is nice</font>

100
00:04:02,790 --> 00:04:06,179
<font color="#E5E5E5">because it means when you want to reason</font>

101
00:04:04,590 --> 00:04:08,010
about masculine fermentation you can

102
00:04:06,180 --> 00:04:09,870
start<font color="#CCCCCC"> reasoning in this</font><font color="#E5E5E5"> abstract model</font>

103
00:04:08,010 --> 00:04:14,760
and you will actually<font color="#E5E5E5"> have</font><font color="#CCCCCC"> consequences</font>

104
00:04:09,870 --> 00:04:16,620
<font color="#E5E5E5">in the real world so that that's all for</font>

105
00:04:14,760 --> 00:04:18,329
masking<font color="#E5E5E5"> and and then the next step of</font>

106
00:04:16,620 --> 00:04:21,030
what we<font color="#E5E5E5"> are really</font><font color="#CCCCCC"> interested in</font><font color="#E5E5E5"> in this</font>

107
00:04:18,329 --> 00:04:24,390
<font color="#E5E5E5">paper is what can go wrong when we mask</font>

108
00:04:21,029 --> 00:04:25,880
<font color="#CCCCCC">and in particular when we do computation</font>

109
00:04:24,390 --> 00:04:27,539
so I will take<font color="#E5E5E5"> the</font><font color="#CCCCCC"> example of</font>

110
00:04:25,880 --> 00:04:31,440
multiplication between<font color="#E5E5E5"> two</font>

111
00:04:27,540 --> 00:04:33,780
values a<font color="#E5E5E5"> and B and then a first issue</font>

112
00:04:31,440 --> 00:04:35,460
<font color="#CCCCCC">that can</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> can happen is that</font><font color="#E5E5E5"> we have</font>

113
00:04:33,780 --> 00:04:38,369
a lack<font color="#E5E5E5"> of randomness</font><font color="#CCCCCC"> which can break</font>

114
00:04:35,460 --> 00:04:40,140
this independence condition<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is easy</font>

115
00:04:38,370 --> 00:04:42,450
to<font color="#E5E5E5"> explain with an example again so if</font>

116
00:04:40,140 --> 00:04:44,010
we want to<font color="#E5E5E5"> multiply two shared secrets</font>

117
00:04:42,450 --> 00:04:46,229
and let's say we play with three shares

118
00:04:44,010 --> 00:04:49,190
<font color="#E5E5E5">we need to compute all</font><font color="#CCCCCC"> this partial</font>

119
00:04:46,230 --> 00:04:51,660
product so<font color="#E5E5E5"> a1</font><font color="#CCCCCC"> b1 a1 b2 and so on and</font>

120
00:04:49,190 --> 00:04:53,700
then<font color="#CCCCCC"> we do a</font><font color="#E5E5E5"> compression stage because</font>

121
00:04:51,660 --> 00:04:56,310
<font color="#CCCCCC">we don't want</font><font color="#E5E5E5"> to blow up the number of</font>

122
00:04:53,700 --> 00:04:59,070
shares so for example c1 is<font color="#E5E5E5"> the sum over</font>

123
00:04:56,310 --> 00:05:01,860
<font color="#E5E5E5">the first line and then it's easy to see</font>

124
00:04:59,070 --> 00:05:04,500
that<font color="#E5E5E5"> if you pop just</font><font color="#CCCCCC"> t1 this equals</font><font color="#E5E5E5"> a1</font>

125
00:05:01,860 --> 00:05:06,930
times v1<font color="#E5E5E5"> plus v2 plus v3 let's say we</font>

126
00:05:04,500 --> 00:05:09,270
<font color="#CCCCCC">work in GF 2 then we have directly</font>

127
00:05:06,930 --> 00:05:12,420
information on<font color="#CCCCCC"> B because if c1 equals to</font>

128
00:05:09,270 --> 00:05:16,020
1 we know<font color="#CCCCCC"> that both a 1 and B have to</font><font color="#E5E5E5"> be</font>

129
00:05:12,420 --> 00:05:18,390
equal to<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> which is a problem so it is</font>

130
00:05:16,020 --> 00:05:20,219
<font color="#E5E5E5">works</font><font color="#CCCCCC"> probing security</font><font color="#E5E5E5"> the way</font><font color="#CCCCCC"> we</font>

131
00:05:18,390 --> 00:05:22,710
mitigate<font color="#E5E5E5"> this in practice most of the</font>

132
00:05:20,220 --> 00:05:25,160
time is by adding randomness or<font color="#E5E5E5"> what we</font>

133
00:05:22,710 --> 00:05:27,539
are<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> call a flashing gadgets</font><font color="#E5E5E5"> and</font>

134
00:05:25,160 --> 00:05:30,090
this of course<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> quite abstract</font>

135
00:05:27,540 --> 00:05:34,260
problem so this<font color="#E5E5E5"> we can analyze in the</font>

136
00:05:30,090 --> 00:05:35,940
probing model and then the<font color="#E5E5E5"> next problem</font>

137
00:05:34,260 --> 00:05:38,010
we want or the<font color="#E5E5E5"> next issue we want to</font>

138
00:05:35,940 --> 00:05:39,780
<font color="#E5E5E5">look at is something called physical</font>

139
00:05:38,010 --> 00:05:43,010
default so it's a quite general<font color="#E5E5E5"> problem</font>

140
00:05:39,780 --> 00:05:45,869
<font color="#E5E5E5">I will be specific to one example here</font>

141
00:05:43,010 --> 00:05:47,789
and again<font color="#E5E5E5"> the problem</font><font color="#CCCCCC"> is that we can</font>

142
00:05:45,870 --> 00:05:49,410
break the independence condition<font color="#CCCCCC"> due</font><font color="#E5E5E5"> to</font>

143
00:05:47,790 --> 00:05:51,360
<font color="#E5E5E5">that so let's take the example here on</font>

144
00:05:49,410 --> 00:05:53,070
the<font color="#CCCCCC"> right we have a function a</font>

145
00:05:51,360 --> 00:05:56,850
combinatorial function f that<font color="#CCCCCC"> is</font>

146
00:05:53,070 --> 00:05:59,219
<font color="#CCCCCC">manipulating 3 6</font><font color="#E5E5E5"> 1 X 2 1</font><font color="#CCCCCC"> X 3</font><font color="#E5E5E5"> and in this</font>

147
00:05:56,850 --> 00:06:01,320
case in certain technology so in fact in

148
00:05:59,220 --> 00:06:03,390
most technologies it happens that we

149
00:06:01,320 --> 00:06:06,480
don't compute instantaneously this

150
00:06:03,390 --> 00:06:08,219
combinatorial function so for<font color="#CCCCCC"> example</font>

151
00:06:06,480 --> 00:06:10,380
transient values of what we call

152
00:06:08,220 --> 00:06:12,900
glitches many times<font color="#E5E5E5"> it can recombine the</font>

153
00:06:10,380 --> 00:06:15,300
<font color="#E5E5E5">shares and as a result a single leakage</font>

154
00:06:12,900 --> 00:06:17,969
sample<font color="#E5E5E5"> this Ally here is going to leak</font>

155
00:06:15,300 --> 00:06:20,360
about<font color="#E5E5E5"> all the shares at once</font><font color="#CCCCCC"> or for</font>

156
00:06:17,970 --> 00:06:22,920
<font color="#CCCCCC">example about</font><font color="#E5E5E5"> the product of the shares</font>

157
00:06:20,360 --> 00:06:25,080
<font color="#E5E5E5">so this is a physical problem</font><font color="#CCCCCC"> that will</font>

158
00:06:22,920 --> 00:06:28,560
<font color="#E5E5E5">be easily</font><font color="#CCCCCC"> detected in this bounded</font>

159
00:06:25,080 --> 00:06:30,780
moment<font color="#E5E5E5"> model and the way we avoid it we</font>

160
00:06:28,560 --> 00:06:33,780
can avoid<font color="#E5E5E5"> it in the literature</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> to add</font>

161
00:06:30,780 --> 00:06:35,159
<font color="#E5E5E5">one</font><font color="#CCCCCC"> more property and for example</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font>

162
00:06:33,780 --> 00:06:36,989
<font color="#E5E5E5">threshold implementation what was</font>

163
00:06:35,160 --> 00:06:40,169
proposed is<font color="#E5E5E5"> to use a non completeness</font>

164
00:06:36,990 --> 00:06:41,220
property it is that we will share the

165
00:06:40,169 --> 00:06:43,020
function as well in

166
00:06:41,220 --> 00:06:45,150
such a way<font color="#CCCCCC"> that new function is</font>

167
00:06:43,020 --> 00:06:47,310
manipulating all the<font color="#E5E5E5"> three share so</font><font color="#CCCCCC"> we</font>

168
00:06:45,150 --> 00:06:50,130
can never<font color="#E5E5E5"> lead completely</font><font color="#CCCCCC"> the secrets</font>

169
00:06:47,310 --> 00:06:52,680
<font color="#E5E5E5">and that's interesting</font><font color="#CCCCCC"> because despite</font>

170
00:06:50,130 --> 00:06:54,600
<font color="#E5E5E5">the problem is physical the property</font>

171
00:06:52,680 --> 00:06:56,310
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> need to</font><font color="#E5E5E5"> prevent it is is quite</font>

172
00:06:54,600 --> 00:07:00,800
<font color="#E5E5E5">abstract and that means we can also</font>

173
00:06:56,310 --> 00:07:00,800
reason about this in this<font color="#E5E5E5"> probing model</font>

174
00:07:00,830 --> 00:07:06,000
<font color="#CCCCCC">okay so next I have to say a few</font><font color="#E5E5E5"> words</font>

175
00:07:04,440 --> 00:07:09,090
about security definitions and

176
00:07:06,000 --> 00:07:11,430
composability of scalability<font color="#E5E5E5"> so what we</font>

177
00:07:09,090 --> 00:07:13,830
want<font color="#E5E5E5"> to do is to guarantee some security</font>

178
00:07:11,430 --> 00:07:15,600
level from<font color="#E5E5E5"> asking the</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing that</font>

179
00:07:13,830 --> 00:07:18,120
we<font color="#E5E5E5"> can do in the</font><font color="#CCCCCC"> probing model is to</font>

180
00:07:15,600 --> 00:07:20,700
have<font color="#CCCCCC"> cube probing security and in this</font>

181
00:07:18,120 --> 00:07:21,360
case as I said<font color="#CCCCCC"> already we need that</font><font color="#E5E5E5"> any</font>

182
00:07:20,700 --> 00:07:23,520
<font color="#CCCCCC">cutable</font>

183
00:07:21,360 --> 00:07:25,800
of shares in the implementation<font color="#CCCCCC"> or</font><font color="#E5E5E5"> in</font>

184
00:07:23,520 --> 00:07:30,150
the protected circuit is independent of

185
00:07:25,800 --> 00:07:32,640
<font color="#E5E5E5">any sensitive variable so that's a</font>

186
00:07:30,150 --> 00:07:34,349
<font color="#E5E5E5">minimum</font><font color="#CCCCCC"> requirement the problem is if</font>

187
00:07:32,640 --> 00:07:36,510
<font color="#E5E5E5">you now increase</font><font color="#CCCCCC"> the size of your</font>

188
00:07:34,350 --> 00:07:38,400
<font color="#E5E5E5">circuit or if you increase the number</font><font color="#CCCCCC"> of</font>

189
00:07:36,510 --> 00:07:39,780
<font color="#CCCCCC">shares that that you would like</font><font color="#E5E5E5"> to have</font>

190
00:07:38,400 --> 00:07:42,479
in<font color="#CCCCCC"> the implementation</font><font color="#E5E5E5"> because you want</font>

191
00:07:39,780 --> 00:07:44,789
to<font color="#E5E5E5"> increase security then testing</font>

192
00:07:42,480 --> 00:07:46,980
probing security increases<font color="#E5E5E5"> very fast</font>

193
00:07:44,790 --> 00:07:49,860
<font color="#E5E5E5">because</font><font color="#CCCCCC"> essentially you have many many</font>

194
00:07:46,980 --> 00:07:51,570
<font color="#CCCCCC">tuples that you have to try and and at</font>

195
00:07:49,860 --> 00:07:54,450
some point it becomes impossible<font color="#E5E5E5"> to test</font>

196
00:07:51,570 --> 00:07:57,479
a full implementation<font color="#E5E5E5"> so in order to</font>

197
00:07:54,450 --> 00:08:00,510
mitigate that different peoples and<font color="#E5E5E5"> I</font>

198
00:07:57,479 --> 00:08:02,580
will use the notations of<font color="#CCCCCC"> bath and</font>

199
00:08:00,510 --> 00:08:04,710
<font color="#CCCCCC">quarters at CCS two years two years</font><font color="#E5E5E5"> ago</font>

200
00:08:02,580 --> 00:08:06,539
introduced<font color="#E5E5E5"> stronger need security</font>

201
00:08:04,710 --> 00:08:09,270
definitions<font color="#CCCCCC"> also stronger</font><font color="#E5E5E5"> security</font>

202
00:08:06,540 --> 00:08:10,440
notions for masking which<font color="#E5E5E5"> allows some</font>

203
00:08:09,270 --> 00:08:12,870
kind of composability

204
00:08:10,440 --> 00:08:15,210
and the idea essentially is that<font color="#CCCCCC"> we can</font>

205
00:08:12,870 --> 00:08:18,570
now just<font color="#CCCCCC"> look at the top</font><font color="#E5E5E5"> part of the</font>

206
00:08:15,210 --> 00:08:20,340
<font color="#CCCCCC">figure so the f1 function</font><font color="#E5E5E5"> we will split</font>

207
00:08:18,570 --> 00:08:23,130
the<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of shares or the number of</font>

208
00:08:20,340 --> 00:08:25,200
probes<font color="#E5E5E5"> that the adversary is using in</font>

209
00:08:23,130 --> 00:08:27,830
two parts first<font color="#E5E5E5"> few one which are on</font>

210
00:08:25,200 --> 00:08:31,289
<font color="#E5E5E5">internal probes then q2 that</font><font color="#CCCCCC"> are on</font>

211
00:08:27,830 --> 00:08:34,500
output<font color="#CCCCCC"> probes</font><font color="#E5E5E5"> and we we can say that</font>

212
00:08:31,290 --> 00:08:37,289
Socrates for example non-interference<font color="#CCCCCC"> if</font>

213
00:08:34,500 --> 00:08:40,380
any set of q1 plus q2 probes<font color="#E5E5E5"> can be</font>

214
00:08:37,289 --> 00:08:45,120
<font color="#CCCCCC">simulated with</font><font color="#E5E5E5"> utmost q1 plus q2 shares</font>

215
00:08:40,380 --> 00:08:46,860
of<font color="#E5E5E5"> each input and by simulated by being</font>

216
00:08:45,120 --> 00:08:48,300
<font color="#CCCCCC">simulated well what I mean</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if</font>

217
00:08:46,860 --> 00:08:50,550
you take the distribution<font color="#CCCCCC"> of the input</font>

218
00:08:48,300 --> 00:08:51,900
shares and the probes<font color="#E5E5E5"> this is supposed</font>

219
00:08:50,550 --> 00:08:54,150
to<font color="#E5E5E5"> be hard to distinguish</font><font color="#CCCCCC"> from the</font>

220
00:08:51,900 --> 00:08:55,889
distribution<font color="#E5E5E5"> of the input shares and the</font>

221
00:08:54,150 --> 00:08:58,779
simulation

222
00:08:55,889 --> 00:09:00,430
so that that's<font color="#E5E5E5"> interesting even more</font>

223
00:08:58,779 --> 00:09:01,509
relevant<font color="#CCCCCC"> for what I'm going to discuss</font>

224
00:09:00,430 --> 00:09:03,219
there's the notion of strong

225
00:09:01,509 --> 00:09:05,439
non-interference<font color="#E5E5E5"> and in this case it's</font>

226
00:09:03,220 --> 00:09:08,620
essentially the<font color="#CCCCCC"> same except that we need</font>

227
00:09:05,439 --> 00:09:11,649
to simulate<font color="#E5E5E5"> any set of q1 plus q2</font><font color="#CCCCCC"> probes</font>

228
00:09:08,620 --> 00:09:13,660
<font color="#E5E5E5">with only q1 shares of each input and</font>

229
00:09:11,649 --> 00:09:15,639
that gives you the<font color="#E5E5E5"> flavor or</font><font color="#CCCCCC"> the</font>

230
00:09:13,660 --> 00:09:17,529
intuition<font color="#CCCCCC"> that we have some kind</font><font color="#E5E5E5"> of</font>

231
00:09:15,639 --> 00:09:19,360
<font color="#E5E5E5">composability because what this</font><font color="#CCCCCC"> division</font>

232
00:09:17,529 --> 00:09:22,029
definition requires<font color="#E5E5E5"> is that the</font>

233
00:09:19,360 --> 00:09:23,639
<font color="#E5E5E5">simulation</font><font color="#CCCCCC"> that you have to to</font><font color="#E5E5E5"> build the</font>

234
00:09:22,029 --> 00:09:26,170
simulator that<font color="#E5E5E5"> you have to build is</font>

235
00:09:23,639 --> 00:09:28,329
independent of the<font color="#CCCCCC"> number of</font><font color="#E5E5E5"> output</font>

236
00:09:26,170 --> 00:09:30,160
wires<font color="#E5E5E5"> that the adversary is observing so</font>

237
00:09:28,329 --> 00:09:32,079
that creates a<font color="#E5E5E5"> level of</font><font color="#CCCCCC"> Independence</font>

238
00:09:30,160 --> 00:09:34,480
<font color="#E5E5E5">between the inputs and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> outputs and</font>

239
00:09:32,079 --> 00:09:36,878
that means if we satisfy this<font color="#E5E5E5"> definition</font>

240
00:09:34,480 --> 00:09:38,800
for the top<font color="#E5E5E5"> gadget-gadget we can</font><font color="#CCCCCC"> combine</font>

241
00:09:36,879 --> 00:09:43,689
<font color="#E5E5E5">it with the bottom gadget and there</font>

242
00:09:38,800 --> 00:09:45,609
should be<font color="#CCCCCC"> no problems with randomness ok</font>

243
00:09:43,689 --> 00:09:49,509
so that's that's<font color="#E5E5E5"> all for the background</font>

244
00:09:45,610 --> 00:09:52,480
<font color="#E5E5E5">and now I can define</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> problem that we</font>

245
00:09:49,509 --> 00:09:54,939
wanted to<font color="#CCCCCC"> tackle if</font><font color="#E5E5E5"> I simplify a little</font>

246
00:09:52,480 --> 00:09:56,379
bit<font color="#E5E5E5"> quite a bit I would</font><font color="#CCCCCC"> say on the</font><font color="#E5E5E5"> one</font>

247
00:09:54,939 --> 00:09:58,120
hand at this stage we had in the

248
00:09:56,379 --> 00:10:00,850
literature composable masking schemes

249
00:09:58,120 --> 00:10:04,149
<font color="#E5E5E5">that most of the time in your physical</font>

250
00:10:00,850 --> 00:10:05,860
defaults such as glitches<font color="#E5E5E5"> and on the</font>

251
00:10:04,149 --> 00:10:08,199
other hand<font color="#E5E5E5"> we had threshold</font>

252
00:10:05,860 --> 00:10:12,100
implementations<font color="#E5E5E5"> or in general</font><font color="#CCCCCC"> Hardware</font>

253
00:10:08,199 --> 00:10:13,959
<font color="#CCCCCC">hawai nted masking schemes</font><font color="#E5E5E5"> the emitter</font>

254
00:10:12,100 --> 00:10:16,029
<font color="#E5E5E5">gate</font><font color="#CCCCCC"> leeches but they were only proven</font>

255
00:10:13,959 --> 00:10:17,829
uniform<font color="#E5E5E5"> and uniformity is a property</font>

256
00:10:16,029 --> 00:10:20,319
<font color="#CCCCCC">that's in nature is</font><font color="#E5E5E5"> quite similar to</font>

257
00:10:17,829 --> 00:10:22,930
<font color="#E5E5E5">probing security so the problem here is</font>

258
00:10:20,319 --> 00:10:27,219
<font color="#CCCCCC">like with</font><font color="#E5E5E5"> probing security that testing</font>

259
00:10:22,930 --> 00:10:28,959
<font color="#E5E5E5">scales badly and what we wanted to do is</font>

260
00:10:27,220 --> 00:10:30,970
essentially to design and<font color="#E5E5E5"> prove mask</font>

261
00:10:28,959 --> 00:10:35,309
implementations that<font color="#E5E5E5"> are jointly robust</font>

262
00:10:30,970 --> 00:10:35,309
<font color="#E5E5E5">again glitches and composable</font>

263
00:10:39,089 --> 00:10:45,179
so in order to do that we<font color="#E5E5E5"> have to refine</font>

264
00:10:42,599 --> 00:10:47,699
the<font color="#CCCCCC"> model and the security definitions a</font>

265
00:10:45,179 --> 00:10:50,608
little bit so what we did<font color="#E5E5E5"> and it's quite</font>

266
00:10:47,699 --> 00:10:53,639
natural extensions I would say is<font color="#E5E5E5"> to</font>

267
00:10:50,609 --> 00:10:55,079
consider glitch extended<font color="#CCCCCC"> pops</font><font color="#E5E5E5"> and here</font>

268
00:10:53,639 --> 00:10:58,199
with the example the idea<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that if you</font>

269
00:10:55,079 --> 00:11:00,299
pop any value or in any output<font color="#E5E5E5"> of a</font>

270
00:10:58,199 --> 00:11:02,189
combinatorial circuit you will give the

271
00:11:00,299 --> 00:11:04,499
adversary<font color="#E5E5E5"> all the input pops so for</font>

272
00:11:02,189 --> 00:11:07,848
example here the<font color="#E5E5E5"> pop p1 would give the</font>

273
00:11:04,499 --> 00:11:10,139
adversary the values a B and C and

274
00:11:07,849 --> 00:11:11,999
there's an important technical remark

275
00:11:10,139 --> 00:11:15,059
which is despite we have<font color="#CCCCCC"> these glitch</font>

276
00:11:11,999 --> 00:11:17,249
extended<font color="#CCCCCC"> pops</font><font color="#E5E5E5"> we also need none extended</font>

277
00:11:15,059 --> 00:11:18,749
<font color="#CCCCCC">pops on the the registers values right</font>

278
00:11:17,249 --> 00:11:23,069
because we also<font color="#E5E5E5"> have in the</font><font color="#CCCCCC"> circuit</font>

279
00:11:18,749 --> 00:11:24,569
<font color="#CCCCCC">memory elements so registers and if if</font>

280
00:11:23,069 --> 00:11:26,759
<font color="#E5E5E5">the adversary pops this one there will</font>

281
00:11:24,569 --> 00:11:30,389
be no extension and since these two

282
00:11:26,759 --> 00:11:32,779
<font color="#E5E5E5">things are in the in the circuit</font><font color="#CCCCCC"> they</font>

283
00:11:30,389 --> 00:11:35,699
will be<font color="#E5E5E5"> needed</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> the simulation</font><font color="#CCCCCC"> too</font>

284
00:11:32,779 --> 00:11:38,339
based on that we<font color="#CCCCCC"> can define a gadget</font><font color="#E5E5E5"> as</font>

285
00:11:35,699 --> 00:11:40,498
being<font color="#CCCCCC"> glitched</font><font color="#E5E5E5"> obvious us and I quite</font>

286
00:11:38,339 --> 00:11:43,199
naturally as well if it's qsn<font color="#CCCCCC"> I in this</font>

287
00:11:40,499 --> 00:11:45,089
<font color="#E5E5E5">glitch extended</font><font color="#CCCCCC"> probing model and what's</font>

288
00:11:43,199 --> 00:11:47,189
what's nice is that directly<font color="#E5E5E5"> from this</font>

289
00:11:45,089 --> 00:11:49,109
definition<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can find some some</font>

290
00:11:47,189 --> 00:11:51,179
intuitions that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> well known into</font>

291
00:11:49,109 --> 00:11:54,119
<font color="#CCCCCC">Hardware masking literature</font><font color="#E5E5E5"> so the first</font>

292
00:11:51,179 --> 00:11:56,189
one is if you<font color="#E5E5E5"> want to have</font><font color="#CCCCCC"> AA boost</font>

293
00:11:54,119 --> 00:11:58,859
<font color="#E5E5E5">gadgets against glitches we need</font>

294
00:11:56,189 --> 00:12:00,389
essentially<font color="#E5E5E5"> to minimize the chef</font><font color="#CCCCCC"> Fanning</font>

295
00:11:58,859 --> 00:12:02,429
<font color="#E5E5E5">and for example</font><font color="#CCCCCC"> if we</font><font color="#E5E5E5"> take this example</font>

296
00:12:00,389 --> 00:12:04,439
<font color="#CCCCCC">and the three inputs were actually three</font>

297
00:12:02,429 --> 00:12:06,179
shares that would be a very bad<font color="#CCCCCC"> idea</font>

298
00:12:04,439 --> 00:12:07,799
because<font color="#E5E5E5"> a single probe would give you</font>

299
00:12:06,179 --> 00:12:10,499
the three share so this is typically

300
00:12:07,799 --> 00:12:12,659
<font color="#E5E5E5">something to avoid and maybe something a</font>

301
00:12:10,499 --> 00:12:15,089
bit less known is<font color="#E5E5E5"> because more related</font>

302
00:12:12,659 --> 00:12:17,369
to<font color="#CCCCCC"> sni this strongly suggests that if we</font>

303
00:12:15,089 --> 00:12:20,399
want<font color="#CCCCCC"> to guarantee this sni security</font>

304
00:12:17,369 --> 00:12:23,459
notion<font color="#E5E5E5"> we will need that every output is</font>

305
00:12:20,399 --> 00:12:26,039
stored in a register<font color="#E5E5E5"> and if you remember</font>

306
00:12:23,459 --> 00:12:28,348
<font color="#E5E5E5">the definition of</font><font color="#CCCCCC"> SMI this is because in</font>

307
00:12:26,039 --> 00:12:31,019
<font color="#E5E5E5">SNA security you need the simulation to</font>

308
00:12:28,349 --> 00:12:33,269
be independent of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> wires</font>

309
00:12:31,019 --> 00:12:36,119
<font color="#E5E5E5">that the adversary observes as outputs</font>

310
00:12:33,269 --> 00:12:37,619
but<font color="#E5E5E5"> if these</font><font color="#CCCCCC"> are outputs</font><font color="#E5E5E5"> are extend that</font>

311
00:12:36,119 --> 00:12:40,079
it's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be very</font><font color="#E5E5E5"> difficult to</font>

312
00:12:37,619 --> 00:12:43,529
satisfy<font color="#E5E5E5"> and I will give an</font><font color="#CCCCCC"> example of</font>

313
00:12:40,079 --> 00:12:46,949
<font color="#E5E5E5">that okay</font>

314
00:12:43,529 --> 00:12:49,109
so yeah there are<font color="#CCCCCC"> many</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

315
00:12:46,949 --> 00:12:52,439
can do with<font color="#E5E5E5"> with this type of modeling</font>

316
00:12:49,109 --> 00:12:54,420
<font color="#CCCCCC">what we did in the paper</font><font color="#E5E5E5"> is a first step</font>

317
00:12:52,440 --> 00:12:57,240
which was<font color="#E5E5E5"> trying to prove an algorithm</font>

318
00:12:54,420 --> 00:12:59,849
<font color="#CCCCCC">that would be glitch or boost and Q s ni</font>

319
00:12:57,240 --> 00:13:01,649
and<font color="#E5E5E5"> since we focus on how</font><font color="#CCCCCC"> to</font>

320
00:12:59,850 --> 00:13:03,899
implementation<font color="#E5E5E5"> we were interested in</font>

321
00:13:01,649 --> 00:13:07,339
circuit with<font color="#CCCCCC"> the limited latency so we</font>

322
00:13:03,899 --> 00:13:10,529
looked at this circuit which is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ISW</font>

323
00:13:07,339 --> 00:13:13,019
<font color="#E5E5E5">multiplication in two cycles so it's</font>

324
00:13:10,529 --> 00:13:15,240
very natural way to implement<font color="#E5E5E5"> it we have</font>

325
00:13:13,019 --> 00:13:17,100
all the partial products on the<font color="#E5E5E5"> right we</font>

326
00:13:15,240 --> 00:13:19,110
<font color="#CCCCCC">have random values</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> exert</font><font color="#E5E5E5"> that</font>

327
00:13:17,100 --> 00:13:20,879
<font color="#CCCCCC">together and this is the partial</font>

328
00:13:19,110 --> 00:13:23,639
products or the multiply<font color="#E5E5E5"> and refresh</font>

329
00:13:20,879 --> 00:13:25,709
stage<font color="#E5E5E5"> what's very important is these</font>

330
00:13:23,639 --> 00:13:27,449
registers in<font color="#E5E5E5"> the middle so that's an</font>

331
00:13:25,709 --> 00:13:30,329
example<font color="#CCCCCC"> with three shares we really need</font>

332
00:13:27,449 --> 00:13:31,949
to store all these nine refreshed

333
00:13:30,329 --> 00:13:35,099
partial products into nine different

334
00:13:31,949 --> 00:13:40,170
registers and then<font color="#E5E5E5"> in the second cycle</font>

335
00:13:35,100 --> 00:13:41,699
we can<font color="#CCCCCC"> do the compression step yeah</font>

336
00:13:40,170 --> 00:13:44,310
that's it<font color="#CCCCCC"> so in this case what the</font>

337
00:13:41,699 --> 00:13:46,769
<font color="#E5E5E5">address we can do is observe</font><font color="#CCCCCC"> twelve</font>

338
00:13:44,310 --> 00:13:50,219
<font color="#E5E5E5">bleach extended</font><font color="#CCCCCC"> pops</font><font color="#E5E5E5"> so he can observe</font>

339
00:13:46,769 --> 00:13:51,529
<font color="#E5E5E5">any of the 9 UI J's he had just</font><font color="#CCCCCC"> before</font>

340
00:13:50,220 --> 00:13:54,060
they are<font color="#E5E5E5"> stored in the register so</font>

341
00:13:51,529 --> 00:13:57,060
<font color="#E5E5E5">probing the combination combinatorial</font>

342
00:13:54,060 --> 00:13:59,250
logic<font color="#CCCCCC"> he can do exactly</font><font color="#E5E5E5"> the same with</font>

343
00:13:57,060 --> 00:14:01,439
the the<font color="#E5E5E5"> CIE values or popping the wires</font>

344
00:13:59,250 --> 00:14:04,290
here<font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally he can pull the three</font>

345
00:14:01,439 --> 00:14:10,019
<font color="#E5E5E5">stable</font><font color="#CCCCCC"> output wires which are called</font><font color="#E5E5E5"> c0</font>

346
00:14:04,290 --> 00:14:12,209
<font color="#E5E5E5">c1 in sorry c1 c2 c3 in this case an in</font>

347
00:14:10,019 --> 00:14:14,790
<font color="#E5E5E5">order to prove that this is</font><font color="#CCCCCC"> 2 SN I what</font>

348
00:14:12,209 --> 00:14:18,989
we need to do is to<font color="#CCCCCC"> describe simulator</font>

349
00:14:14,790 --> 00:14:20,699
that's using only q1 shares per<font color="#CCCCCC"> input so</font>

350
00:14:18,990 --> 00:14:22,889
<font color="#CCCCCC">reproof is a bit did you sigh we'll just</font>

351
00:14:20,699 --> 00:14:24,990
give two examples of simulation<font color="#E5E5E5"> to to</font>

352
00:14:22,889 --> 00:14:27,120
try convincing you that this is feasible

353
00:14:24,990 --> 00:14:28,920
and of course the interesting<font color="#E5E5E5"> examples</font>

354
00:14:27,120 --> 00:14:32,130
are the examples with these extended

355
00:14:28,920 --> 00:14:34,560
probes so what we can do is an example

356
00:14:32,130 --> 00:14:37,019
with two<font color="#E5E5E5"> extended probes one is on this</font>

357
00:14:34,560 --> 00:14:39,750
<font color="#E5E5E5">you</font><font color="#CCCCCC"> 1/2 value so just before the</font>

358
00:14:37,019 --> 00:14:43,380
register and then did<font color="#E5E5E5"> this give the</font><font color="#CCCCCC"> 3</font>

359
00:14:39,750 --> 00:14:46,319
<font color="#E5E5E5">inputs to the adversary so a1 b2 and f12</font>

360
00:14:43,380 --> 00:14:49,259
<font color="#E5E5E5">and for example we can put</font><font color="#CCCCCC"> another probe</font>

361
00:14:46,319 --> 00:14:51,360
here that's also<font color="#E5E5E5"> extended on</font><font color="#CCCCCC"> the output</font>

362
00:14:49,259 --> 00:14:55,079
<font color="#CCCCCC">c1</font><font color="#E5E5E5"> before it's in the register and this</font>

363
00:14:51,360 --> 00:14:59,269
gives the<font color="#CCCCCC"> three values</font><font color="#E5E5E5"> u 1 1 u 2</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> & u 3</font>

364
00:14:55,079 --> 00:15:02,309
<font color="#E5E5E5">1 that are in blue</font><font color="#CCCCCC"> and so these are two</font>

365
00:14:59,269 --> 00:15:04,500
<font color="#E5E5E5">internal probes right so if we want to</font>

366
00:15:02,309 --> 00:15:07,439
prove<font color="#E5E5E5"> that this is 2</font><font color="#CCCCCC"> SN a</font><font color="#E5E5E5"> we need to</font>

367
00:15:04,500 --> 00:15:09,300
simulate<font color="#E5E5E5"> with two shares per input this</font>

368
00:15:07,439 --> 00:15:12,180
<font color="#E5E5E5">can be done as</font><font color="#CCCCCC"> follows so for example a</font>

369
00:15:09,300 --> 00:15:13,979
1 and<font color="#E5E5E5"> B 2 for this we</font><font color="#CCCCCC"> can use the</font><font color="#E5E5E5"> first</font>

370
00:15:12,180 --> 00:15:17,819
share of a and B because<font color="#E5E5E5"> we have to</font>

371
00:15:13,980 --> 00:15:19,939
share<font color="#E5E5E5"> the load for</font><font color="#CCCCCC"> l1</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> random</font><font color="#CCCCCC"> and</font>

372
00:15:17,819 --> 00:15:23,699
<font color="#CCCCCC">touch so we</font><font color="#E5E5E5"> can assign a random</font><font color="#CCCCCC"> value</font>

373
00:15:19,939 --> 00:15:25,860
for<font color="#CCCCCC"> u 1 1</font><font color="#E5E5E5"> it essentially depends on</font><font color="#CCCCCC"> a 1</font>

374
00:15:23,699 --> 00:15:27,809
B 1<font color="#CCCCCC"> it's written here so we can</font><font color="#E5E5E5"> use a</font>

375
00:15:25,860 --> 00:15:30,449
second<font color="#CCCCCC"> chair of B</font><font color="#E5E5E5"> because we have it</font>

376
00:15:27,809 --> 00:15:35,309
available due<font color="#CCCCCC"> to 1 we use a second share</font>

377
00:15:30,449 --> 00:15:37,380
of a and the finally<font color="#E5E5E5"> u3</font><font color="#CCCCCC"> 1 it's</font><font color="#E5E5E5"> protected</font>

378
00:15:35,309 --> 00:15:39,660
by a 1 3 which is<font color="#E5E5E5"> a random value and</font>

379
00:15:37,380 --> 00:15:42,720
<font color="#CCCCCC">it's untouched so we can also assign</font><font color="#E5E5E5"> to</font>

380
00:15:39,660 --> 00:15:45,089
random value so that's that's feasible

381
00:15:42,720 --> 00:15:47,569
<font color="#E5E5E5">for this example one thing that's</font><font color="#CCCCCC"> maybe</font>

382
00:15:45,089 --> 00:15:50,880
nice to look<font color="#E5E5E5"> at is what</font><font color="#CCCCCC"> happens if the</font>

383
00:15:47,569 --> 00:15:52,860
<font color="#CCCCCC">c1 pause bit becomes an output probe and</font>

384
00:15:50,880 --> 00:15:54,660
not an extended one so in this case that

385
00:15:52,860 --> 00:15:57,750
<font color="#CCCCCC">the beginning doesn't change so we have</font>

386
00:15:54,660 --> 00:15:59,670
a 1 B 2<font color="#CCCCCC"> a 1 2 and C 1 is known on</font>

387
00:15:57,750 --> 00:16:02,819
extended so there's no<font color="#CCCCCC"> extension of the</font>

388
00:15:59,670 --> 00:16:05,459
probe and since this becomes an output

389
00:16:02,819 --> 00:16:07,920
table<font color="#CCCCCC"> we need to simulate with one share</font>

390
00:16:05,459 --> 00:16:09,329
per input<font color="#E5E5E5"> this is also feasible the</font>

391
00:16:07,920 --> 00:16:11,849
beginning of the simulation is exactly

392
00:16:09,329 --> 00:16:13,620
<font color="#E5E5E5">the same C</font><font color="#CCCCCC"> 1 we can</font><font color="#E5E5E5"> assign</font><font color="#CCCCCC"> it to a</font>

393
00:16:11,850 --> 00:16:16,529
<font color="#E5E5E5">random value because there are this bit</font>

394
00:16:13,620 --> 00:16:18,509
<font color="#E5E5E5">a 1 3 and most interestingly what it</font>

395
00:16:16,529 --> 00:16:21,029
shows is that<font color="#E5E5E5"> simulation with</font><font color="#CCCCCC"> one share</font>

396
00:16:18,509 --> 00:16:23,490
per<font color="#E5E5E5"> input would not be possible with an</font>

397
00:16:21,029 --> 00:16:25,529
extended<font color="#CCCCCC"> probe on c1 because</font><font color="#E5E5E5"> if it was</font>

398
00:16:23,490 --> 00:16:28,920
extended<font color="#CCCCCC"> we would need</font><font color="#E5E5E5"> a second share of</font>

399
00:16:25,529 --> 00:16:30,630
a or b to<font color="#CCCCCC"> do the simulation and and in</font>

400
00:16:28,920 --> 00:16:32,819
this case with<font color="#CCCCCC"> only one extended Paabo</font>

401
00:16:30,630 --> 00:16:37,459
<font color="#E5E5E5">only one internal probe we need to</font>

402
00:16:32,819 --> 00:16:40,139
simulate with<font color="#E5E5E5"> one share per input so</font>

403
00:16:37,459 --> 00:16:40,380
that's that's<font color="#CCCCCC"> pretty much it</font><font color="#E5E5E5"> based on</font>

404
00:16:40,139 --> 00:16:43,800
that

405
00:16:40,380 --> 00:16:45,779
<font color="#CCCCCC">I will shortly explain</font><font color="#E5E5E5"> what does it mean</font>

406
00:16:43,800 --> 00:16:49,609
to be composable the idea is<font color="#E5E5E5"> that once</font>

407
00:16:45,779 --> 00:16:51,959
we<font color="#E5E5E5"> have this symbol of these composable</font>

408
00:16:49,610 --> 00:16:53,939
<font color="#E5E5E5">multiplications we can take any</font>

409
00:16:51,959 --> 00:16:56,399
implementation<font color="#CCCCCC"> that we want we represent</font>

410
00:16:53,939 --> 00:16:59,370
it as a combination<font color="#E5E5E5"> of multiplications</font>

411
00:16:56,399 --> 00:17:01,980
and additions of linear operations<font color="#E5E5E5"> I</font>

412
00:16:59,370 --> 00:17:04,020
would say every multiplication is going

413
00:17:01,980 --> 00:17:06,439
to be implemented as a<font color="#CCCCCC"> q sni</font>

414
00:17:04,020 --> 00:17:09,240
multiplication with one input<font color="#E5E5E5"> refreshed</font>

415
00:17:06,439 --> 00:17:11,339
<font color="#CCCCCC">in an SN i</font><font color="#E5E5E5"> minor or hibiscus and</font><font color="#CCCCCC"> i</font>

416
00:17:09,240 --> 00:17:12,099
<font color="#CCCCCC">manner of course and for all the</font><font color="#E5E5E5"> linear</font>

417
00:17:11,339 --> 00:17:14,159
operations

418
00:17:12,099 --> 00:17:17,740
going to<font color="#E5E5E5"> perform their job</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> share and</font>

419
00:17:14,160 --> 00:17:19,419
<font color="#CCCCCC">that was proposed in the</font><font color="#E5E5E5"> people by good</font>

420
00:17:17,740 --> 00:17:21,400
as in<font color="#CCCCCC"> Havana</font><font color="#E5E5E5"> this year at your crib so</font>

421
00:17:19,419 --> 00:17:23,650
it's a very<font color="#E5E5E5"> simple way to compose and</font>

422
00:17:21,400 --> 00:17:27,100
and then nothing<font color="#E5E5E5"> could happen we proved</font>

423
00:17:23,650 --> 00:17:28,990
that<font color="#E5E5E5"> recently</font><font color="#CCCCCC"> and it allows you to build</font>

424
00:17:27,099 --> 00:17:30,730
arbitrary<font color="#E5E5E5"> circuits you can</font><font color="#CCCCCC"> we'll keep</font>

425
00:17:28,990 --> 00:17:31,809
light<font color="#E5E5E5"> dependent values and and you</font>

426
00:17:30,730 --> 00:17:35,620
should<font color="#E5E5E5"> not have</font><font color="#CCCCCC"> any problem with</font>

427
00:17:31,809 --> 00:17:37,240
<font color="#E5E5E5">glitches nor composition issues and of</font>

428
00:17:35,620 --> 00:17:39,789
course what's very important is that

429
00:17:37,240 --> 00:17:42,520
this is a sufficient condition<font color="#CCCCCC"> it's not</font>

430
00:17:39,789 --> 00:17:43,720
<font color="#CCCCCC">a</font><font color="#E5E5E5"> necessary necessary one right so in</font>

431
00:17:42,520 --> 00:17:45,580
order<font color="#E5E5E5"> to have these very simple</font>

432
00:17:43,720 --> 00:17:47,590
<font color="#E5E5E5">composition rules we</font><font color="#CCCCCC"> ask a lot of</font>

433
00:17:45,580 --> 00:17:50,110
<font color="#E5E5E5">randomness we don't have</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> most</font>

434
00:17:47,590 --> 00:17:52,870
optimized implementation<font color="#E5E5E5"> but we can have</font>

435
00:17:50,110 --> 00:17:57,789
something<font color="#CCCCCC"> that scales</font><font color="#E5E5E5"> at any order</font><font color="#CCCCCC"> that</font>

436
00:17:52,870 --> 00:17:59,408
we<font color="#E5E5E5"> want okay</font><font color="#CCCCCC"> so that leaves</font><font color="#E5E5E5"> me time to</font>

437
00:17:57,789 --> 00:18:01,840
conclude<font color="#E5E5E5"> I would say the main</font>

438
00:17:59,409 --> 00:18:02,230
contribution of contributions of the

439
00:18:01,840 --> 00:18:04,240
paper

440
00:18:02,230 --> 00:18:06,520
<font color="#CCCCCC">our first</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> robust probing model</font>

441
00:18:04,240 --> 00:18:08,350
which<font color="#E5E5E5"> allows analyzing formally and</font>

442
00:18:06,520 --> 00:18:10,000
confirming the<font color="#E5E5E5"> relevance of many design</font>

443
00:18:08,350 --> 00:18:11,770
ideas in in this<font color="#CCCCCC"> harbor masking</font>

444
00:18:10,000 --> 00:18:14,590
literature

445
00:18:11,770 --> 00:18:16,030
I would like to insist that it's not

446
00:18:14,590 --> 00:18:18,908
<font color="#CCCCCC">only a theoretical</font><font color="#E5E5E5"> concern</font>

447
00:18:16,030 --> 00:18:21,100
despite its using a bit<font color="#CCCCCC"> of theory</font><font color="#E5E5E5"> and</font>

448
00:18:18,909 --> 00:18:22,900
for example<font color="#CCCCCC"> we show in a recent ePrint</font>

449
00:18:21,100 --> 00:18:25,870
report that there are many<font color="#E5E5E5"> higher-order</font>

450
00:18:22,900 --> 00:18:27,490
flows in published designs so they are

451
00:18:25,870 --> 00:18:29,678
<font color="#E5E5E5">not very critical but they really show</font>

452
00:18:27,490 --> 00:18:31,150
<font color="#E5E5E5">that despite the design ideas of this</font>

453
00:18:29,679 --> 00:18:33,070
<font color="#CCCCCC">Hardware masking schemes were quite good</font>

454
00:18:31,150 --> 00:18:35,559
<font color="#CCCCCC">and most of the time correct</font><font color="#E5E5E5"> at low</font>

455
00:18:33,070 --> 00:18:38,080
orders<font color="#E5E5E5"> when you move</font><font color="#CCCCCC"> to higher orders at</font>

456
00:18:35,559 --> 00:18:39,850
some point<font color="#E5E5E5"> abstraction and</font><font color="#CCCCCC"> theory is</font>

457
00:18:38,080 --> 00:18:43,449
<font color="#E5E5E5">probably he needed to</font><font color="#CCCCCC"> gain confidence</font>

458
00:18:39,850 --> 00:18:44,860
<font color="#E5E5E5">and in answer to</font><font color="#CCCCCC"> that we proposed first</font>

459
00:18:43,450 --> 00:18:46,690
<font color="#CCCCCC">multiplication algorithm and</font>

460
00:18:44,860 --> 00:18:49,418
implementation<font color="#CCCCCC"> that we can</font><font color="#E5E5E5"> prove a boost</font>

461
00:18:46,690 --> 00:18:52,840
<font color="#E5E5E5">against glitches and composable and this</font>

462
00:18:49,419 --> 00:18:54,760
holds at any order<font color="#CCCCCC"> and there's actually</font>

463
00:18:52,840 --> 00:18:56,799
<font color="#CCCCCC">quite some other paper</font><font color="#E5E5E5"> results in the</font>

464
00:18:54,760 --> 00:18:58,960
paper<font color="#E5E5E5"> I had no time</font><font color="#CCCCCC"> to discuss</font><font color="#E5E5E5"> I will</font>

465
00:18:56,799 --> 00:19:01,000
<font color="#E5E5E5">just list them and we can discuss them</font>

466
00:18:58,960 --> 00:19:02,980
as<font color="#CCCCCC"> question so there's something called</font>

467
00:19:01,000 --> 00:19:05,080
each locality principle which shows that

468
00:19:02,980 --> 00:19:08,409
<font color="#E5E5E5">glitches do not do not</font><font color="#CCCCCC"> go further than</font>

469
00:19:05,080 --> 00:19:10,120
the registers<font color="#CCCCCC"> we described actually a</font>

470
00:19:08,409 --> 00:19:12,030
much more general model<font color="#CCCCCC"> that does</font><font color="#E5E5E5"> not</font>

471
00:19:10,120 --> 00:19:14,739
<font color="#E5E5E5">only capture glitches but also</font>

472
00:19:12,030 --> 00:19:17,260
transition based leakages and couplings

473
00:19:14,740 --> 00:19:19,030
we also discuss what<font color="#E5E5E5"> happens when when</font>

474
00:19:17,260 --> 00:19:22,720
these different<font color="#E5E5E5"> defaults can be combined</font>

475
00:19:19,030 --> 00:19:25,570
together<font color="#E5E5E5"> how bad does</font><font color="#CCCCCC"> it get</font>

476
00:19:22,720 --> 00:19:27,250
we have an empirical validation for<font color="#CCCCCC"> 270</font>

477
00:19:25,570 --> 00:19:29,620
<font color="#CCCCCC">share designs and we have quite some</font>

478
00:19:27,250 --> 00:19:31,300
results on threshold implementations for

479
00:19:29,620 --> 00:19:32,889
<font color="#CCCCCC">it is probably</font><font color="#E5E5E5"> the most interesting ones</font>

480
00:19:31,300 --> 00:19:35,200
it's this discussion of pseudo

481
00:19:32,890 --> 00:19:36,640
composability<font color="#E5E5E5"> which shows sake which</font>

482
00:19:35,200 --> 00:19:39,940
tries<font color="#CCCCCC"> to explain why</font><font color="#E5E5E5"> threshold</font>

483
00:19:36,640 --> 00:19:41,860
implementations can succeed to compose

484
00:19:39,940 --> 00:19:45,490
<font color="#CCCCCC">or nearly compose with very minimum</font>

485
00:19:41,860 --> 00:19:52,659
<font color="#E5E5E5">randomness requirements that's it</font><font color="#CCCCCC"> thank</font>

486
00:19:45,490 --> 00:19:54,490
you thank you<font color="#CCCCCC"> all right so we</font><font color="#E5E5E5"> have</font>

487
00:19:52,660 --> 00:19:56,080
<font color="#E5E5E5">roughly a minute for questions and I'm</font>

488
00:19:54,490 --> 00:19:59,170
really really<font color="#E5E5E5"> curious who's gonna be the</font>

489
00:19:56,080 --> 00:20:01,990
<font color="#CCCCCC">first one who dares to</font><font color="#E5E5E5"> raise the arm and</font>

490
00:19:59,170 --> 00:20:05,290
get one<font color="#E5E5E5"> of these microphones</font><font color="#CCCCCC"> thrown out</font>

491
00:20:01,990 --> 00:20:09,810
I have questions but I have a microphone

492
00:20:05,290 --> 00:20:09,810
already so you will be that's<font color="#CCCCCC"> not funny</font>

493
00:20:10,560 --> 00:20:29,230
<font color="#E5E5E5">that's too close so</font><font color="#CCCCCC"> in the robust in</font>

494
00:20:26,260 --> 00:20:32,230
your robust<font color="#E5E5E5"> model probing model you</font>

495
00:20:29,230 --> 00:20:36,160
assume that<font color="#E5E5E5"> the adversary</font><font color="#CCCCCC"> gets when you</font>

496
00:20:32,230 --> 00:20:39,910
probe variable gets all the inputs which

497
00:20:36,160 --> 00:20:42,430
are involved<font color="#E5E5E5"> in this viable right could</font>

498
00:20:39,910 --> 00:20:46,900
<font color="#E5E5E5">that</font><font color="#CCCCCC"> be a bit</font><font color="#E5E5E5"> relaxed maybe depending on</font>

499
00:20:42,430 --> 00:20:49,120
<font color="#E5E5E5">the expression of the variable or is it</font>

500
00:20:46,900 --> 00:20:49,630
like tight in the sense<font color="#CCCCCC"> that</font><font color="#E5E5E5"> a good</font>

501
00:20:49,120 --> 00:20:53,649
designer

502
00:20:49,630 --> 00:20:55,360
<font color="#E5E5E5">depending on the the</font><font color="#CCCCCC"> glitches oh sure</font>

503
00:20:53,650 --> 00:20:58,570
each time<font color="#E5E5E5"> that the adversary can get</font>

504
00:20:55,360 --> 00:21:01,199
<font color="#E5E5E5">everything I think it could be a bit</font>

505
00:20:58,570 --> 00:21:05,050
relaxed<font color="#E5E5E5"> but probably it is risky so we</font>

506
00:21:01,200 --> 00:21:07,540
refer<font color="#E5E5E5"> in the paper to two other papers</font>

507
00:21:05,050 --> 00:21:09,430
<font color="#E5E5E5">one by mathematically one all paper by</font>

508
00:21:07,540 --> 00:21:12,520
official and Gamal who try it

509
00:21:09,430 --> 00:21:15,160
sorry noise who tried that to have

510
00:21:12,520 --> 00:21:16,960
glitch<font color="#E5E5E5"> in variant circuits and it seems</font>

511
00:21:15,160 --> 00:21:18,550
<font color="#E5E5E5">that it's more or less I mean this</font>

512
00:21:16,960 --> 00:21:22,270
<font color="#CCCCCC">Wolf's case that we consider here</font>

513
00:21:18,550 --> 00:21:24,310
happens<font color="#E5E5E5"> more or less all the time if you</font>

514
00:21:22,270 --> 00:21:26,350
<font color="#E5E5E5">just do plain CMOS and then you can try</font>

515
00:21:24,310 --> 00:21:29,159
to design other implementations<font color="#E5E5E5"> and it</font>

516
00:21:26,350 --> 00:21:29,159
would be<font color="#E5E5E5"> different</font>

517
00:21:33,780 --> 00:21:38,860
can we show that for<font color="#CCCCCC"> Seamas</font>

518
00:21:36,220 --> 00:21:41,410
the<font color="#E5E5E5"> worst case happens most most of the</font>

519
00:21:38,860 --> 00:21:43,990
time<font color="#CCCCCC"> all the time I think that's dawning</font>

520
00:21:41,410 --> 00:21:49,270
in this paper<font color="#CCCCCC"> had</font><font color="#E5E5E5"> space last year by</font>

521
00:21:43,990 --> 00:21:53,080
Martinelli encoders<font color="#CCCCCC"> Thank You more</font>

522
00:21:49,270 --> 00:21:55,750
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> okay I have a</font><font color="#CCCCCC"> quick question</font>

523
00:21:53,080 --> 00:21:57,970
<font color="#E5E5E5">on</font><font color="#CCCCCC"> your slide 7 you showed the circuit</font>

524
00:21:55,750 --> 00:22:01,480
with extended probes and normal probes

525
00:21:57,970 --> 00:22:04,300
<font color="#CCCCCC">yeah and</font><font color="#E5E5E5"> my question is why would anyone</font>

526
00:22:01,480 --> 00:22:06,160
put a<font color="#E5E5E5"> normal probe on c1 if I can just</font>

527
00:22:04,300 --> 00:22:07,629
put an extended probe on<font color="#E5E5E5"> the wire that</font>

528
00:22:06,160 --> 00:22:09,700
<font color="#E5E5E5">enter c1 and that gives me</font><font color="#CCCCCC"> more</font>

529
00:22:07,630 --> 00:22:11,110
information<font color="#CCCCCC"> yeah as</font><font color="#E5E5E5"> a not first three I</font>

530
00:22:09,700 --> 00:22:14,110
guess it doesn't<font color="#E5E5E5"> make too much sense</font>

531
00:22:11,110 --> 00:22:18,219
here but in<font color="#E5E5E5"> order to what it shows</font>

532
00:22:14,110 --> 00:22:22,060
<font color="#E5E5E5">mostly is</font><font color="#CCCCCC"> that when you want to</font><font color="#E5E5E5"> prove a</font>

533
00:22:18,220 --> 00:22:24,670
<font color="#CCCCCC">semi</font><font color="#E5E5E5"> these output wires you they are not</font>

534
00:22:22,060 --> 00:22:26,950
<font color="#E5E5E5">counted</font><font color="#CCCCCC"> as the</font><font color="#E5E5E5"> number of inputs that</font><font color="#CCCCCC"> you</font>

535
00:22:24,670 --> 00:22:28,900
can use to simulate<font color="#E5E5E5"> so here we need to</font>

536
00:22:26,950 --> 00:22:31,330
<font color="#E5E5E5">simulate with only one share per input</font>

537
00:22:28,900 --> 00:22:33,370
<font color="#E5E5E5">here we can simulate with two shares per</font>

538
00:22:31,330 --> 00:22:35,409
input<font color="#CCCCCC"> so we still need</font><font color="#E5E5E5"> to show</font><font color="#CCCCCC"> that</font>

539
00:22:33,370 --> 00:22:37,629
there's a way to<font color="#E5E5E5"> satisfy that and</font>

540
00:22:35,410 --> 00:22:40,330
essentially the only solution we found

541
00:22:37,630 --> 00:22:42,310
for that<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> think this is</font><font color="#E5E5E5"> right is to</font>

542
00:22:40,330 --> 00:22:44,590
put the output<font color="#CCCCCC"> in a register so mostly</font>

543
00:22:42,310 --> 00:22:46,240
this shows that the output<font color="#CCCCCC"> should be</font>

544
00:22:44,590 --> 00:22:49,240
<font color="#E5E5E5">stored</font><font color="#CCCCCC"> into registers if you want to</font>

545
00:22:46,240 --> 00:22:51,030
compose and you have<font color="#E5E5E5"> gauges okay</font>

546
00:22:49,240 --> 00:22:53,380
thanks<font color="#E5E5E5"> again thank you</font>

547
00:22:51,030 --> 00:22:57,178
[Applause]

548
00:22:53,380 --> 00:22:57,179
[Music]

