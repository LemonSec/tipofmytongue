1
00:00:00,000 --> 00:00:07,290
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> and the second and last</font>

2
00:00:04,560 --> 00:00:09,510
presentation<font color="#E5E5E5"> of this session is titled</font>

3
00:00:07,290 --> 00:00:12,660
<font color="#CCCCCC">standard lattice</font><font color="#E5E5E5"> based</font><font color="#CCCCCC"> key encapsulation</font>

4
00:00:09,510 --> 00:00:15,780
and embedded devices<font color="#CCCCCC"> the authors of the</font>

5
00:00:12,660 --> 00:00:19,140
<font color="#E5E5E5">paper are</font><font color="#CCCCCC"> James how W so they're marked</font>

6
00:00:15,780 --> 00:00:20,509
<font color="#CCCCCC">as cross and team goon a sue</font><font color="#E5E5E5"> and James</font>

7
00:00:19,140 --> 00:00:23,750
is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to give you the presentation</font>

8
00:00:20,510 --> 00:00:27,449
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> like thank you</font><font color="#CCCCCC"> for the introduction</font>

9
00:00:23,750 --> 00:00:31,109
<font color="#E5E5E5">so yeah we have some results</font><font color="#CCCCCC"> here for</font>

10
00:00:27,449 --> 00:00:32,730
the in this candidate Friday<font color="#E5E5E5"> on in</font>

11
00:00:31,109 --> 00:00:36,180
hardware<font color="#E5E5E5"> and software so I'm just here</font>

12
00:00:32,729 --> 00:00:38,010
to present the the the research here so

13
00:00:36,180 --> 00:00:40,920
I'm sure you've heard a lot<font color="#E5E5E5"> today</font>

14
00:00:38,010 --> 00:00:43,050
already<font color="#E5E5E5"> about the about</font><font color="#CCCCCC"> post quantum</font>

15
00:00:40,920 --> 00:00:44,610
crypto and learning with errors so I'm

16
00:00:43,050 --> 00:00:45,899
going to<font color="#E5E5E5"> just</font><font color="#CCCCCC"> skip the introduction</font>

17
00:00:44,610 --> 00:00:49,860
there and just go straight<font color="#CCCCCC"> into the</font>

18
00:00:45,899 --> 00:00:52,530
motivation why we looked at<font color="#CCCCCC"> frodo</font><font color="#E5E5E5"> and</font>

19
00:00:49,860 --> 00:00:55,949
then<font color="#CCCCCC"> i'll describe the the</font>

20
00:00:52,530 --> 00:00:57,570
microcontroller designs<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> hardware</font>

21
00:00:55,949 --> 00:01:01,579
designs and then give you some results

22
00:00:57,570 --> 00:01:01,579
<font color="#CCCCCC">and comparison and performance analysis</font>

23
00:01:01,820 --> 00:01:08,369
so why have we why we decided<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> this</font>

24
00:01:05,489 --> 00:01:10,670
basically<font color="#CCCCCC"> nist as you know</font><font color="#E5E5E5"> i've started</font>

25
00:01:08,369 --> 00:01:15,030
a post quantum standardization

26
00:01:10,670 --> 00:01:17,630
competition<font color="#CCCCCC"> and they have suggested that</font>

27
00:01:15,030 --> 00:01:19,979
<font color="#CCCCCC">in the</font><font color="#E5E5E5"> future this</font><font color="#CCCCCC"> will likely involve</font>

28
00:01:17,630 --> 00:01:22,830
evaluations on constrained devices such

29
00:01:19,979 --> 00:01:26,400
as smart cards and also<font color="#E5E5E5"> comparisons of</font>

30
00:01:22,830 --> 00:01:29,429
schemes in hardware and the reason we

31
00:01:26,400 --> 00:01:33,150
focus<font color="#E5E5E5"> on frodo is mainly because as</font>

32
00:01:29,430 --> 00:01:36,180
practitioners<font color="#E5E5E5"> this is is a fairly</font>

33
00:01:33,150 --> 00:01:38,490
appealing<font color="#CCCCCC"> scheme to concentrate on</font><font color="#E5E5E5"> it's</font>

34
00:01:36,180 --> 00:01:40,710
<font color="#E5E5E5">extremely versatile</font><font color="#CCCCCC"> and really</font><font color="#E5E5E5"> strong</font>

35
00:01:38,490 --> 00:01:44,908
<font color="#E5E5E5">has really strong security properties</font>

36
00:01:40,710 --> 00:01:48,449
and yeah it's<font color="#E5E5E5"> probably the most secure</font>

37
00:01:44,909 --> 00:01:50,100
lattice<font color="#CCCCCC"> base candidate and also there</font>

38
00:01:48,450 --> 00:01:53,310
have been less implementations<font color="#E5E5E5"> of</font>

39
00:01:50,100 --> 00:01:55,048
standard lattice<font color="#E5E5E5"> based schemes you</font><font color="#CCCCCC"> can</font>

40
00:01:53,310 --> 00:01:57,030
even see in this conference<font color="#E5E5E5"> here all of</font>

41
00:01:55,049 --> 00:01:59,850
<font color="#CCCCCC">the all</font><font color="#E5E5E5"> of you implementations of</font>

42
00:01:57,030 --> 00:02:03,299
focused on<font color="#E5E5E5"> ideal lattice candidates or</font>

43
00:01:59,850 --> 00:02:05,789
much less<font color="#E5E5E5"> less candidates and so we're</font>

44
00:02:03,299 --> 00:02:08,340
<font color="#E5E5E5">looking at trying to sort of bridge the</font>

45
00:02:05,790 --> 00:02:11,310
<font color="#E5E5E5">gaps I mean</font><font color="#CCCCCC"> would shorten</font><font color="#E5E5E5"> the gap</font>

46
00:02:08,340 --> 00:02:13,620
<font color="#E5E5E5">between what</font><font color="#CCCCCC"> you expect</font>

47
00:02:11,310 --> 00:02:17,370
from standard<font color="#E5E5E5"> lettuces</font><font color="#CCCCCC"> in theory and in</font>

48
00:02:13,620 --> 00:02:19,709
practice<font color="#E5E5E5"> and also we consider Friday an</font>

49
00:02:17,370 --> 00:02:22,860
ideal candidate for<font color="#CCCCCC"> long-term security</font>

50
00:02:19,709 --> 00:02:29,519
use<font color="#CCCCCC"> cases especially constrain hardware</font>

51
00:02:22,860 --> 00:02:32,700
platforms so photo was designed really

52
00:02:29,519 --> 00:02:35,940
<font color="#E5E5E5">to be a</font><font color="#CCCCCC"> conservative yet practical</font><font color="#E5E5E5"> post</font>

53
00:02:32,700 --> 00:02:38,160
<font color="#E5E5E5">quantum candidate</font><font color="#CCCCCC"> insecurity is derived</font>

54
00:02:35,940 --> 00:02:41,329
from the straightforward<font color="#E5E5E5"> standard</font>

55
00:02:38,160 --> 00:02:41,329
learning where there is problem and

56
00:02:41,660 --> 00:02:46,470
another appealing property is the fact

57
00:02:44,160 --> 00:02:49,560
that parameter parameter<font color="#E5E5E5"> selection is a</font>

58
00:02:46,470 --> 00:02:51,810
lot more<font color="#CCCCCC"> simplified for Frodo because it</font>

59
00:02:49,560 --> 00:02:53,690
is connected to the<font color="#CCCCCC"> line</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> Aris</font>

60
00:02:51,810 --> 00:02:57,120
problem there's<font color="#E5E5E5"> no restrictions on the</font>

61
00:02:53,690 --> 00:02:59,910
the size of the the<font color="#CCCCCC"> the format of the</font>

62
00:02:57,120 --> 00:03:05,549
crime or the<font color="#E5E5E5"> or any other sort</font><font color="#CCCCCC"> of</font>

63
00:02:59,910 --> 00:03:09,680
parameters<font color="#CCCCCC"> and practitioners</font><font color="#E5E5E5"> this is</font>

64
00:03:05,549 --> 00:03:14,849
this is obviously<font color="#CCCCCC"> very appealing I</font>

65
00:03:09,680 --> 00:03:16,890
feature IOT<font color="#E5E5E5"> this can be appealing and</font>

66
00:03:14,849 --> 00:03:19,619
also<font color="#E5E5E5"> having a long term and efficient</font>

67
00:03:16,890 --> 00:03:23,518
crypto scheme is<font color="#CCCCCC"> a good thing</font>

68
00:03:19,620 --> 00:03:26,420
as we<font color="#CCCCCC"> seen</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> in the last</font><font color="#E5E5E5"> talk the</font>

69
00:03:23,519 --> 00:03:31,459
<font color="#E5E5E5">micro control is especially the VM for</font>

70
00:03:26,420 --> 00:03:37,828
will probably be<font color="#E5E5E5"> play a big role in IIT</font>

71
00:03:31,459 --> 00:03:39,989
in the IT era and also<font color="#CCCCCC"> FP J's will be</font>

72
00:03:37,829 --> 00:03:43,530
part of that<font color="#CCCCCC"> feature as well they're</font>

73
00:03:39,989 --> 00:03:47,370
<font color="#E5E5E5">already being</font><font color="#CCCCCC"> used in the likes of cloud</font>

74
00:03:43,530 --> 00:03:50,250
services<font color="#CCCCCC"> such as Microsoft and a</font>

75
00:03:47,370 --> 00:03:51,450
suitable use case for this research

76
00:03:50,250 --> 00:03:52,920
<font color="#CCCCCC">would be something like satellite</font>

77
00:03:51,450 --> 00:04:00,060
communications where you need long term

78
00:03:52,920 --> 00:04:02,638
<font color="#E5E5E5">and highly secure cryptography so here's</font>

79
00:04:00,060 --> 00:04:07,459
just<font color="#E5E5E5"> a shortened</font><font color="#CCCCCC"> version of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> the</font>

80
00:04:02,639 --> 00:04:10,650
encapsulation module the the main

81
00:04:07,459 --> 00:04:13,380
operations within<font color="#CCCCCC"> the frodo and within</font>

82
00:04:10,650 --> 00:04:15,299
the encapsulation scheme<font color="#E5E5E5"> are essentially</font>

83
00:04:13,380 --> 00:04:17,159
<font color="#CCCCCC">inline-6 on line 8 so this</font><font color="#E5E5E5"> is where we</font>

84
00:04:15,299 --> 00:04:19,950
do<font color="#E5E5E5"> the learning</font><font color="#CCCCCC"> with Aris calculation</font>

85
00:04:17,160 --> 00:04:22,950
this essentially consists of matrix

86
00:04:19,950 --> 00:04:23,530
matrix multiplication with some addition

87
00:04:22,950 --> 00:04:27,539
of

88
00:04:23,530 --> 00:04:30,638
<font color="#CCCCCC">a narrow distribution but</font><font color="#E5E5E5"> also we have</font>

89
00:04:27,540 --> 00:04:33,430
<font color="#E5E5E5">pseudo random number generation in the</font>

90
00:04:30,639 --> 00:04:35,440
first few lines as well as generating

91
00:04:33,430 --> 00:04:40,240
these matrices<font color="#E5E5E5"> from the error</font>

92
00:04:35,440 --> 00:04:43,090
distribution<font color="#E5E5E5"> and then we also have in</font>

93
00:04:40,240 --> 00:04:46,030
line<font color="#CCCCCC"> 9 there we have the use</font><font color="#E5E5E5"> of a random</font>

94
00:04:43,090 --> 00:04:48,580
Oracle<font color="#E5E5E5"> to ensure that we have</font><font color="#CCCCCC"> CCA</font>

95
00:04:46,030 --> 00:04:53,010
security so this takes in the<font color="#CCCCCC"> ciphertext</font>

96
00:04:48,580 --> 00:04:56,349
<font color="#E5E5E5">and the keys</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we want to send and</font>

97
00:04:53,010 --> 00:04:58,960
creates a hash<font color="#E5E5E5"> of it so essentially the</font>

98
00:04:56,350 --> 00:05:00,280
key modules within frodo<font color="#E5E5E5"> within key</font>

99
00:04:58,960 --> 00:05:02,080
generation encapsulation and

100
00:05:00,280 --> 00:05:06,609
decapsulation<font color="#CCCCCC"> a matrix-matrix</font>

101
00:05:02,080 --> 00:05:11,200
multiplication<font color="#E5E5E5"> up to size 976 uniform</font>

102
00:05:06,610 --> 00:05:14,770
and<font color="#CCCCCC"> Gaussian error generation and using</font>

103
00:05:11,200 --> 00:05:16,690
random Oracle's<font color="#E5E5E5"> so the the proposed way</font>

104
00:05:14,770 --> 00:05:20,710
to do<font color="#E5E5E5"> this in the specifications is via</font>

105
00:05:16,690 --> 00:05:22,630
<font color="#CCCCCC">C shake</font><font color="#E5E5E5"> but the probably the biggest</font>

106
00:05:20,710 --> 00:05:25,750
design challenge for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> for this</font>

107
00:05:22,630 --> 00:05:27,909
research was balancing<font color="#E5E5E5"> memory</font>

108
00:05:25,750 --> 00:05:31,510
utilization<font color="#E5E5E5"> and not deteriorating in the</font>

109
00:05:27,910 --> 00:05:33,250
performance of<font color="#CCCCCC"> the of the modules and we</font>

110
00:05:31,510 --> 00:05:35,590
didn't<font color="#E5E5E5"> want to over exert the limited</font>

111
00:05:33,250 --> 00:05:38,740
computing capabilities of the embedded

112
00:05:35,590 --> 00:05:41,530
devices<font color="#E5E5E5"> essentially we wanted to still</font>

113
00:05:38,740 --> 00:05:44,430
have<font color="#CCCCCC"> some room to do other things on the</font>

114
00:05:41,530 --> 00:05:47,190
devices<font color="#CCCCCC"> essentially</font><font color="#E5E5E5"> we sort of knew that</font>

115
00:05:44,430 --> 00:05:49,150
you're not<font color="#E5E5E5"> just having this device to do</font>

116
00:05:47,190 --> 00:05:52,740
encapsulation<font color="#E5E5E5"> you what you maybe want</font><font color="#CCCCCC"> to</font>

117
00:05:49,150 --> 00:05:52,739
do some other operations on it as well

118
00:05:53,370 --> 00:05:59,440
it's also<font color="#CCCCCC"> photo comes in two sizes</font>

119
00:05:56,190 --> 00:06:04,740
there's the there's<font color="#E5E5E5"> two parameter sets</font>

120
00:05:59,440 --> 00:06:08,380
so it targets<font color="#E5E5E5"> 128 and 192 bit security</font>

121
00:06:04,740 --> 00:06:11,919
<font color="#CCCCCC">it uses</font><font color="#E5E5E5"> pseudo randomness from either a</font>

122
00:06:08,380 --> 00:06:14,130
<font color="#E5E5E5">S or C shake and we focus on</font><font color="#CCCCCC"> the key</font>

123
00:06:11,919 --> 00:06:17,080
encapsulation mechanism rather than the

124
00:06:14,130 --> 00:06:19,810
the the key exchange scheme<font color="#E5E5E5"> proposed at</font>

125
00:06:17,080 --> 00:06:22,919
CCS so all of the designs<font color="#CCCCCC"> we propose</font>

126
00:06:19,810 --> 00:06:25,990
here cover<font color="#E5E5E5"> all of these all of these</font>

127
00:06:22,919 --> 00:06:31,240
restrictors different parameter sets and

128
00:06:25,990 --> 00:06:34,750
different<font color="#E5E5E5"> pseudo randomness</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> arm</font>

129
00:06:31,240 --> 00:06:37,780
implementation<font color="#E5E5E5"> probably the biggest</font>

130
00:06:34,750 --> 00:06:40,410
contribution here is the the optimized

131
00:06:37,780 --> 00:06:44,049
memory allocation<font color="#CCCCCC"> so this enables</font><font color="#E5E5E5"> us to</font>

132
00:06:40,410 --> 00:06:49,419
<font color="#CCCCCC">actually fit the fit the scheme's on the</font>

133
00:06:44,050 --> 00:06:52,060
the embedded devices<font color="#E5E5E5"> and we also</font><font color="#CCCCCC"> propose</font>

134
00:06:49,419 --> 00:06:53,919
<font color="#CCCCCC">a optimized assembly</font><font color="#E5E5E5"> multiplication</font>

135
00:06:52,060 --> 00:06:57,550
routine<font color="#E5E5E5"> which speeds up</font><font color="#CCCCCC"> the</font>

136
00:06:53,919 --> 00:07:01,049
implementation<font color="#CCCCCC"> and also helps</font><font color="#E5E5E5"> us realize</font>

137
00:06:57,550 --> 00:07:06,120
<font color="#E5E5E5">the performance force certain use cases</font>

138
00:07:01,050 --> 00:07:08,410
<font color="#CCCCCC">all</font><font color="#E5E5E5"> of the all of the three modules they</font>

139
00:07:06,120 --> 00:07:10,240
<font color="#CCCCCC">they</font><font color="#E5E5E5"> run in</font><font color="#CCCCCC"> constant time to help us</font>

140
00:07:08,410 --> 00:07:13,180
protect against simple side channel

141
00:07:10,240 --> 00:07:15,940
analysis and the total execution<font color="#CCCCCC"> time of</font>

142
00:07:13,180 --> 00:07:17,669
<font color="#CCCCCC">frodo cam for the</font><font color="#E5E5E5"> 128-bit parameter sets</font>

143
00:07:15,940 --> 00:07:22,570
is<font color="#CCCCCC"> eight hundred and</font><font color="#E5E5E5"> thirty eight</font>

144
00:07:17,669 --> 00:07:24,219
milliseconds running at<font color="#CCCCCC"> 168</font><font color="#E5E5E5"> megahertz so</font>

145
00:07:22,570 --> 00:07:27,730
here's<font color="#CCCCCC"> just a</font><font color="#E5E5E5"> brief overview</font><font color="#CCCCCC"> of the</font>

146
00:07:24,220 --> 00:07:29,860
encapsulation<font color="#CCCCCC"> so you can see here sort</font>

147
00:07:27,730 --> 00:07:32,740
of<font color="#E5E5E5"> in the middle you have</font><font color="#CCCCCC"> the mods</font>

148
00:07:29,860 --> 00:07:37,419
matrix multiplication and addition which

149
00:07:32,740 --> 00:07:39,910
stems<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> samplers</font><font color="#CCCCCC"> and these are</font>

150
00:07:37,419 --> 00:07:42,190
these<font color="#CCCCCC"> are outputs introverts</font><font color="#E5E5E5"> sort of the</font>

151
00:07:39,910 --> 00:07:43,900
cipher texts and<font color="#E5E5E5"> we had to analyze the</font>

152
00:07:42,190 --> 00:07:47,169
memory occupancy during its operation

153
00:07:43,900 --> 00:07:50,109
and<font color="#E5E5E5"> wherever</font><font color="#CCCCCC"> possible we reused the we</font>

154
00:07:47,169 --> 00:07:55,680
used<font color="#E5E5E5"> the the already allocated memory</font>

155
00:07:50,110 --> 00:08:03,010
<font color="#E5E5E5">and this saved us a</font><font color="#CCCCCC"> lot of memory and</font>

156
00:07:55,680 --> 00:08:06,760
yeah so here's an overview<font color="#E5E5E5"> of the the</font>

157
00:08:03,010 --> 00:08:08,640
cycle counts for<font color="#CCCCCC"> the for the designs so</font>

158
00:08:06,760 --> 00:08:11,919
<font color="#CCCCCC">the top half of the table here</font><font color="#E5E5E5"> is our</font>

159
00:08:08,640 --> 00:08:16,870
implementations with both<font color="#CCCCCC"> promise sets</font>

160
00:08:11,919 --> 00:08:17,799
and both<font color="#E5E5E5"> AES and C shake so as you can</font>

161
00:08:16,870 --> 00:08:20,350
<font color="#CCCCCC">see here there is</font><font color="#E5E5E5"> a clear</font><font color="#CCCCCC"> difference</font>

162
00:08:17,800 --> 00:08:22,360
<font color="#E5E5E5">between the AES implementations and the</font>

163
00:08:20,350 --> 00:08:24,490
<font color="#E5E5E5">C shake implementations</font><font color="#CCCCCC"> this is</font>

164
00:08:22,360 --> 00:08:27,310
essentially due to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> fact that with</font>

165
00:08:24,490 --> 00:08:29,169
AES we get just<font color="#E5E5E5"> enough randomness output</font>

166
00:08:27,310 --> 00:08:33,729
each time that<font color="#E5E5E5"> we can store them in</font>

167
00:08:29,169 --> 00:08:36,280
registers for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> C shake outputs we</font>

168
00:08:33,729 --> 00:08:38,260
have actually too much<font color="#CCCCCC"> so we have to</font>

169
00:08:36,280 --> 00:08:40,510
store them<font color="#E5E5E5"> in RAM and then we have to</font>

170
00:08:38,260 --> 00:08:43,659
spend time saving<font color="#E5E5E5"> and loading them from</font>

171
00:08:40,510 --> 00:08:48,780
<font color="#CCCCCC">RAM which is</font><font color="#E5E5E5"> which gives</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> the hits on</font>

172
00:08:43,659 --> 00:08:51,130
<font color="#E5E5E5">the cycle counts the the only other</font><font color="#CCCCCC"> real</font>

173
00:08:48,780 --> 00:08:51,649
<font color="#E5E5E5">comparable scheme is</font><font color="#CCCCCC"> the peak um for</font>

174
00:08:51,130 --> 00:08:54,889
<font color="#CCCCCC">implement</font>

175
00:08:51,649 --> 00:08:58,579
of photocamera

176
00:08:54,889 --> 00:09:01,910
<font color="#E5E5E5">using</font><font color="#CCCCCC"> see shake</font><font color="#E5E5E5"> and our</font><font color="#CCCCCC"> optimizations</font>

177
00:08:58,579 --> 00:09:03,349
here show<font color="#CCCCCC"> that we do save about two and</font>

178
00:09:01,910 --> 00:09:06,350
<font color="#E5E5E5">a half million clock cycles which is</font>

179
00:09:03,350 --> 00:09:09,980
quite substantial<font color="#CCCCCC"> battles but also</font>

180
00:09:06,350 --> 00:09:11,929
<font color="#E5E5E5">compared to</font><font color="#CCCCCC"> the ideal lattice modular</font>

181
00:09:09,980 --> 00:09:13,490
space schemes there is a clear

182
00:09:11,929 --> 00:09:20,540
difference here but<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> that's to be</font>

183
00:09:13,490 --> 00:09:23,959
expected<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the stack usage our memory</font>

184
00:09:20,540 --> 00:09:27,469
optimizations<font color="#E5E5E5"> save significant amounts</font>

185
00:09:23,959 --> 00:09:29,209
of bytes so compared to<font color="#CCCCCC"> the peak um for</font>

186
00:09:27,470 --> 00:09:32,089
<font color="#E5E5E5">implementation we saved between 30 and</font>

187
00:09:29,209 --> 00:09:35,388
<font color="#E5E5E5">40</font><font color="#CCCCCC"> percent and</font><font color="#E5E5E5"> versus the reference</font>

188
00:09:32,089 --> 00:09:37,639
designs we save<font color="#CCCCCC"> 66%</font><font color="#E5E5E5"> although the sea</font>

189
00:09:35,389 --> 00:09:40,850
shake implementation is<font color="#CCCCCC"> it's</font>

190
00:09:37,639 --> 00:09:42,499
significantly slower there is slight

191
00:09:40,850 --> 00:09:49,339
savings there compared<font color="#E5E5E5"> to the AES</font>

192
00:09:42,499 --> 00:09:52,579
implementation so for the FPGA design<font color="#E5E5E5"> we</font>

193
00:09:49,339 --> 00:09:55,540
<font color="#CCCCCC">propose a generic lwe mod multiplication</font>

194
00:09:52,579 --> 00:09:59,089
core which computes vector matrix

195
00:09:55,540 --> 00:10:00,829
multiplication in our<font color="#CCCCCC"> Edition so</font><font color="#E5E5E5"> instead</font>

196
00:09:59,089 --> 00:10:02,990
<font color="#E5E5E5">of doing matrix matrix we do vector</font>

197
00:10:00,829 --> 00:10:05,479
matrix and just repeat on the on the

198
00:10:02,990 --> 00:10:08,720
vectors of the of the left hand side

199
00:10:05,480 --> 00:10:10,939
matrix<font color="#E5E5E5"> we also generate future</font>

200
00:10:08,720 --> 00:10:13,550
randomness in parallel which minimizes

201
00:10:10,939 --> 00:10:16,339
delays between<font color="#E5E5E5"> the multiplications this</font>

202
00:10:13,550 --> 00:10:19,040
essentially<font color="#E5E5E5"> makes the the bottleneck of</font>

203
00:10:16,339 --> 00:10:22,819
<font color="#E5E5E5">the of the schemes in</font><font color="#CCCCCC"> Hardware the the</font>

204
00:10:19,040 --> 00:10:25,389
multiplication<font color="#CCCCCC"> and we have an</font><font color="#E5E5E5"> on-the-fly</font>

205
00:10:22,819 --> 00:10:29,329
memory management which means that<font color="#CCCCCC"> where</font>

206
00:10:25,389 --> 00:10:34,759
that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> preak in the next values are</font>

207
00:10:29,329 --> 00:10:38,089
all ready for<font color="#E5E5E5"> us to use and this means</font>

208
00:10:34,759 --> 00:10:42,199
we<font color="#E5E5E5"> don't use as much memory</font><font color="#CCCCCC"> as we need</font>

209
00:10:38,089 --> 00:10:45,370
<font color="#CCCCCC">to also this</font><font color="#E5E5E5"> this design runs in</font>

210
00:10:42,199 --> 00:10:48,109
<font color="#CCCCCC">constant time</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we do this by</font>

211
00:10:45,370 --> 00:10:51,410
essentially<font color="#E5E5E5"> making multiplication the</font>

212
00:10:48,110 --> 00:10:53,209
the bottleneck<font color="#E5E5E5"> so that when we do</font>

213
00:10:51,410 --> 00:10:57,529
generate randomness is done in parallel

214
00:10:53,209 --> 00:10:59,959
<font color="#E5E5E5">to this and so the 128 bits</font><font color="#CCCCCC"> frodo chem</font>

215
00:10:57,529 --> 00:11:03,699
has a total execution<font color="#E5E5E5"> of 60 milliseconds</font>

216
00:10:59,959 --> 00:11:03,699
at 167 megahertz

217
00:11:04,400 --> 00:11:08,779
<font color="#E5E5E5">though here sister</font><font color="#CCCCCC"> an overview of the</font>

218
00:11:06,500 --> 00:11:10,130
encapsulation design<font color="#E5E5E5"> as you can see</font>

219
00:11:08,779 --> 00:11:13,630
there in the<font color="#CCCCCC"> middle we have the learning</font>

220
00:11:10,130 --> 00:11:17,450
<font color="#E5E5E5">with Aris multiplier it takes inputs</font>

221
00:11:13,630 --> 00:11:22,910
from<font color="#E5E5E5"> B</font><font color="#CCCCCC"> ROM which we used</font><font color="#E5E5E5"> to store the</font>

222
00:11:17,450 --> 00:11:26,180
<font color="#CCCCCC">key B and we also store the</font><font color="#E5E5E5"> the the</font>

223
00:11:22,910 --> 00:11:30,439
<font color="#E5E5E5">random matrix a and this is done on the</font>

224
00:11:26,180 --> 00:11:32,630
fly<font color="#E5E5E5"> from a</font><font color="#CCCCCC"> C check module</font><font color="#E5E5E5"> and this also</font>

225
00:11:30,440 --> 00:11:35,540
takes input<font color="#CCCCCC"> from the the error</font>

226
00:11:32,630 --> 00:11:39,230
distribution<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Gaussian block there</font>

227
00:11:35,540 --> 00:11:41,660
<font color="#CCCCCC">I've put and it</font><font color="#E5E5E5"> uses a DSP slice here to</font>

228
00:11:39,230 --> 00:11:44,420
do them to the the the<font color="#CCCCCC"> ma</font><font color="#E5E5E5"> supply and</font>

229
00:11:41,660 --> 00:11:48,350
accumulate operations<font color="#CCCCCC"> then we simply</font>

230
00:11:44,420 --> 00:11:51,469
just add in the an error for<font color="#E5E5E5"> the at the</font>

231
00:11:48,350 --> 00:11:53,120
<font color="#E5E5E5">end of the vector matrix multiplication</font>

232
00:11:51,470 --> 00:11:56,690
in order<font color="#E5E5E5"> to form the</font><font color="#CCCCCC"> learning with</font>

233
00:11:53,120 --> 00:11:59,839
errors<font color="#CCCCCC"> calculation and this</font><font color="#E5E5E5"> is output as</font>

234
00:11:56,690 --> 00:12:01,520
the<font color="#CCCCCC"> cipher</font><font color="#E5E5E5"> text</font><font color="#CCCCCC"> and then also input</font><font color="#E5E5E5"> into</font>

235
00:11:59,839 --> 00:12:05,110
the the<font color="#E5E5E5"> random Oracle here at the end to</font>

236
00:12:01,520 --> 00:12:05,110
in<font color="#E5E5E5"> order to calculate the shared secret</font>

237
00:12:05,290 --> 00:12:11,660
so here's just some results<font color="#CCCCCC"> so the first</font>

238
00:12:09,260 --> 00:12:14,540
<font color="#E5E5E5">half of the</font><font color="#CCCCCC"> table here</font><font color="#E5E5E5"> is is our results</font>

239
00:12:11,660 --> 00:12:18,290
for both parameter sets for all three

240
00:12:14,540 --> 00:12:20,959
modules<font color="#E5E5E5"> also</font><font color="#CCCCCC"> here we give area</font>

241
00:12:18,290 --> 00:12:22,969
consumption results of the modules we

242
00:12:20,959 --> 00:12:27,829
use so<font color="#E5E5E5"> see shake and the the error</font>

243
00:12:22,970 --> 00:12:30,920
sampler<font color="#E5E5E5"> with regards to the area</font>

244
00:12:27,830 --> 00:12:33,260
consumption we do compete with with new

245
00:12:30,920 --> 00:12:37,729
hope so that's something<font color="#CCCCCC"> quite</font>

246
00:12:33,260 --> 00:12:39,589
comforting<font color="#CCCCCC"> and as you can see it does</font>

247
00:12:37,730 --> 00:12:41,209
suffer somewhat with the<font color="#E5E5E5"> performance so</font>

248
00:12:39,589 --> 00:12:44,120
there's a clear distinction there but

249
00:12:41,209 --> 00:12:46,910
with<font color="#E5E5E5"> the operations per second the</font><font color="#CCCCCC"> only</font>

250
00:12:44,120 --> 00:12:49,490
other real<font color="#E5E5E5"> comparable scheme here is</font>

251
00:12:46,910 --> 00:12:52,160
another<font color="#E5E5E5"> standards learning with</font><font color="#CCCCCC"> eros</font>

252
00:12:49,490 --> 00:12:56,180
encryption implementation on in hardware

253
00:12:52,160 --> 00:12:59,680
<font color="#CCCCCC">and we do significantly outperform them</font>

254
00:12:56,180 --> 00:13:01,849
with in terms of in terms<font color="#CCCCCC"> of B Ram so</font>

255
00:12:59,680 --> 00:13:03,859
for this<font color="#E5E5E5"> implementation they don't</font>

256
00:13:01,850 --> 00:13:07,270
<font color="#E5E5E5">really use they don't really optimize</font>

257
00:13:03,860 --> 00:13:09,910
the memory usage<font color="#CCCCCC"> and here we</font><font color="#E5E5E5"> even for</font>

258
00:13:07,270 --> 00:13:12,350
even for the larger parameter sets we do

259
00:13:09,910 --> 00:13:14,160
<font color="#E5E5E5">significantly outperform them and we</font>

260
00:13:12,350 --> 00:13:16,410
have an increase in in

261
00:13:14,160 --> 00:13:20,069
in the<font color="#E5E5E5"> frequency of</font><font color="#CCCCCC"> the operations</font>

262
00:13:16,410 --> 00:13:25,860
<font color="#E5E5E5">although there is some</font><font color="#CCCCCC"> hit</font><font color="#E5E5E5"> on me on the</font>

263
00:13:20,069 --> 00:13:28,439
<font color="#CCCCCC">throughput as well so in conclusion I</font>

264
00:13:25,860 --> 00:13:30,149
think<font color="#E5E5E5"> we we</font><font color="#CCCCCC"> minimized the the</font>

265
00:13:28,440 --> 00:13:31,680
performance<font color="#E5E5E5"> distance between standards</font>

266
00:13:30,149 --> 00:13:34,410
<font color="#E5E5E5">and ideal that</font><font color="#CCCCCC"> I space</font>

267
00:13:31,680 --> 00:13:39,089
<font color="#E5E5E5">Kem's and I think we also show you that</font>

268
00:13:34,410 --> 00:13:42,959
Frodo<font color="#CCCCCC"> ideally</font><font color="#E5E5E5"> I mean the ideal platform</font>

269
00:13:39,089 --> 00:13:44,430
for Frodo is<font color="#E5E5E5"> it's hardware I think it</font>

270
00:13:42,959 --> 00:13:47,989
<font color="#CCCCCC">benefits a lot from having this</font>

271
00:13:44,430 --> 00:13:51,269
parallelization<font color="#E5E5E5"> and the ability to like</font>

272
00:13:47,990 --> 00:13:54,000
<font color="#E5E5E5">pre calculate your randomness in for</font>

273
00:13:51,269 --> 00:13:59,399
<font color="#E5E5E5">future use</font><font color="#CCCCCC"> the microcontroller</font>

274
00:13:54,000 --> 00:14:01,860
implementations show a significant<font color="#E5E5E5"> we</font>

275
00:13:59,399 --> 00:14:03,720
better the memory<font color="#CCCCCC"> out we better the the</font>

276
00:14:01,860 --> 00:14:05,670
memory<font color="#E5E5E5"> usage for via memory</font>

277
00:14:03,720 --> 00:14:07,350
optimizations and<font color="#E5E5E5"> we show</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> saving of</font>

278
00:14:05,670 --> 00:14:10,649
between<font color="#E5E5E5"> 66 percent against the</font>

279
00:14:07,350 --> 00:14:13,079
references designs<font color="#E5E5E5"> and</font><font color="#CCCCCC"> 40 percent versus</font>

280
00:14:10,649 --> 00:14:15,029
<font color="#E5E5E5">the optimized designs</font><font color="#CCCCCC"> it would be</font>

281
00:14:13,079 --> 00:14:17,040
<font color="#E5E5E5">interesting to see if for future</font>

282
00:14:15,029 --> 00:14:19,980
research whether increasing the the

283
00:14:17,040 --> 00:14:23,040
<font color="#CCCCCC">amount</font><font color="#E5E5E5"> of mod suppliers or the DSPs in</font>

284
00:14:19,980 --> 00:14:25,829
the hardware<font color="#CCCCCC"> design with how that would</font>

285
00:14:23,040 --> 00:14:27,149
work<font color="#E5E5E5"> how that would benefit how that how</font>

286
00:14:25,829 --> 00:14:30,120
we how fast we<font color="#E5E5E5"> could get the</font>

287
00:14:27,149 --> 00:14:31,199
implementations but also how much<font color="#E5E5E5"> of a</font>

288
00:14:30,120 --> 00:14:33,329
hit<font color="#E5E5E5"> we would take on the area</font>

289
00:14:31,199 --> 00:14:36,540
consumption and also<font color="#E5E5E5"> we'd like to</font>

290
00:14:33,329 --> 00:14:41,579
<font color="#E5E5E5">consider more so I</font><font color="#CCCCCC"> channel</font><font color="#E5E5E5"> protections</font>

291
00:14:36,540 --> 00:14:43,740
so masking and<font color="#E5E5E5"> and the likes</font><font color="#CCCCCC"> but it</font>

292
00:14:41,579 --> 00:14:46,319
would also<font color="#E5E5E5"> be</font><font color="#CCCCCC"> interesting to see how</font>

293
00:14:43,740 --> 00:14:48,480
this compares<font color="#CCCCCC"> to other</font><font color="#E5E5E5"> missed post</font>

294
00:14:46,319 --> 00:14:49,769
quantum candidates there's not been as

295
00:14:48,480 --> 00:14:53,579
far<font color="#E5E5E5"> as I know there's not been many</font>

296
00:14:49,769 --> 00:14:55,670
missed candidates on<font color="#E5E5E5"> FPGA so we're not</font>

297
00:14:53,579 --> 00:14:58,229
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> how this</font><font color="#E5E5E5"> compares</font><font color="#CCCCCC"> to those</font>

298
00:14:55,670 --> 00:15:03,540
or we have really as the sort of<font color="#E5E5E5"> the</font>

299
00:14:58,230 --> 00:15:06,209
<font color="#CCCCCC">Prius</font><font color="#E5E5E5"> versions of the</font><font color="#CCCCCC"> schemes so yeah we</font>

300
00:15:03,540 --> 00:15:09,709
wanted this these results really we're

301
00:15:06,209 --> 00:15:12,630
trying to help with the the the

302
00:15:09,709 --> 00:15:16,250
standardization<font color="#CCCCCC"> process I think we've</font>

303
00:15:12,630 --> 00:15:18,480
shown that<font color="#E5E5E5"> Frodo chem is efficient and</font>

304
00:15:16,250 --> 00:15:19,410
we hope that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have made some</font>

305
00:15:18,480 --> 00:15:22,860
contribution here

306
00:15:19,410 --> 00:15:26,459
we're not obviously saying you can't<font color="#E5E5E5"> use</font>

307
00:15:22,860 --> 00:15:28,550
rings<font color="#E5E5E5"> anymore unless</font><font color="#CCCCCC"> you're Gollum thank</font>

308
00:15:26,459 --> 00:15:28,550
you

309
00:15:34,970 --> 00:15:42,209
thank you James<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the nice</font>

310
00:15:37,290 --> 00:15:43,920
presentation<font color="#CCCCCC"> are there any questions</font><font color="#E5E5E5"> we</font>

311
00:15:42,209 --> 00:15:52,680
<font color="#E5E5E5">have time for a couple of questions</font>

312
00:15:43,920 --> 00:15:55,949
maybe I do have<font color="#CCCCCC"> a question you</font><font color="#E5E5E5"> already</font>

313
00:15:52,680 --> 00:15:58,020
commented on it well<font color="#E5E5E5"> you your</font>

314
00:15:55,950 --> 00:16:01,470
<font color="#E5E5E5">architecture</font><font color="#CCCCCC"> or only</font><font color="#E5E5E5"> uses one multiplier</font>

315
00:15:58,020 --> 00:16:03,720
any insights on what<font color="#CCCCCC"> the spected</font>

316
00:16:01,470 --> 00:16:07,410
performance improving if you<font color="#CCCCCC"> intervene</font>

317
00:16:03,720 --> 00:16:10,010
<font color="#CCCCCC">you know introduce more multipliers in</font>

318
00:16:07,410 --> 00:16:13,260
this case with<font color="#CCCCCC"> Prada right that is yeah</font>

319
00:16:10,010 --> 00:16:15,899
<font color="#CCCCCC">with hardware design you mean</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> well</font>

320
00:16:13,260 --> 00:16:18,300
this<font color="#E5E5E5"> idea that because</font><font color="#CCCCCC"> based on it's</font>

321
00:16:15,899 --> 00:16:23,339
based on mattresses that<font color="#E5E5E5"> can be</font><font color="#CCCCCC"> realized</font>

322
00:16:18,300 --> 00:16:25,890
<font color="#CCCCCC">yeah well I did look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> that and with</font>

323
00:16:23,339 --> 00:16:27,390
the increase in<font color="#E5E5E5"> multiplies you either</font>

324
00:16:25,890 --> 00:16:31,380
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> therefore need</font><font color="#E5E5E5"> twice</font><font color="#CCCCCC"> as much</font>

325
00:16:27,390 --> 00:16:33,240
<font color="#E5E5E5">randomness</font><font color="#CCCCCC"> ready for you to use so if</font>

326
00:16:31,380 --> 00:16:36,110
you are<font color="#E5E5E5"> going to increase</font><font color="#CCCCCC"> the number of</font>

327
00:16:33,240 --> 00:16:39,810
<font color="#E5E5E5">mods</font><font color="#CCCCCC"> players you</font><font color="#E5E5E5"> therefore needs to have</font>

328
00:16:36,110 --> 00:16:44,100
better performing<font color="#E5E5E5"> see shake or</font><font color="#CCCCCC"> AES core</font>

329
00:16:39,810 --> 00:16:45,930
and when you increase the<font color="#E5E5E5"> the</font>

330
00:16:44,100 --> 00:16:50,459
<font color="#E5E5E5">performance of</font><font color="#CCCCCC"> see shake it does</font><font color="#E5E5E5"> like</font>

331
00:16:45,930 --> 00:16:52,979
get fairly big so our designs there you

332
00:16:50,459 --> 00:16:55,170
can see fit under<font color="#CCCCCC"> 2000 slices where I</font>

333
00:16:52,980 --> 00:16:58,260
<font color="#E5E5E5">think if you look at the high</font>

334
00:16:55,170 --> 00:17:00,630
performance reference implementation of

335
00:16:58,260 --> 00:17:02,790
<font color="#CCCCCC">Ketchikan</font><font color="#E5E5E5"> goes up to like</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> thousand</font>

336
00:17:00,630 --> 00:17:05,970
slices or something so it's it's really

337
00:17:02,790 --> 00:17:07,619
really big so I think if there was<font color="#CCCCCC"> to be</font>

338
00:17:05,970 --> 00:17:09,780
<font color="#E5E5E5">more work in this area we'd have to look</font>

339
00:17:07,619 --> 00:17:11,639
at the<font color="#E5E5E5"> sea shake module and then</font>

340
00:17:09,780 --> 00:17:13,740
optimize<font color="#E5E5E5"> that somehow and make it more</font>

341
00:17:11,640 --> 00:17:19,589
efficient okay interesting

342
00:17:13,740 --> 00:17:22,040
any other questions<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> if not</font>

343
00:17:19,589 --> 00:17:29,299
let's thank<font color="#CCCCCC"> the</font><font color="#E5E5E5"> ain't again</font>

344
00:17:22,040 --> 00:17:29,299
[Applause]

