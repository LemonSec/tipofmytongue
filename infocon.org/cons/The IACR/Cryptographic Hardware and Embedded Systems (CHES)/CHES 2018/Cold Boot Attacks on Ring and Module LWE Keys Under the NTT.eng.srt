1
00:00:00,690 --> 00:00:06,990
welcome to the first<font color="#CCCCCC"> session</font><font color="#E5E5E5"> of the</font>

2
00:00:03,770 --> 00:00:14,309
<font color="#CCCCCC">morning</font><font color="#E5E5E5"> and this session is</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to</font>

3
00:00:06,990 --> 00:00:17,009
start with the<font color="#E5E5E5"> best paper award yeah</font>

4
00:00:14,309 --> 00:00:20,669
<font color="#E5E5E5">okay so when we were putting</font><font color="#CCCCCC"> together</font>

5
00:00:17,010 --> 00:00:22,500
<font color="#E5E5E5">the program we wanted to do two tweaks</font>

6
00:00:20,670 --> 00:00:26,250
to how the best<font color="#E5E5E5"> paper award worked I</font>

7
00:00:22,500 --> 00:00:28,198
guess<font color="#E5E5E5"> the first is we wanted to allocate</font>

8
00:00:26,250 --> 00:00:30,810
longer slot to the<font color="#E5E5E5"> best paper in</font>

9
00:00:28,199 --> 00:00:32,790
recognition of<font color="#CCCCCC"> that so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> sort of</font>

10
00:00:30,810 --> 00:00:35,160
halfway between<font color="#E5E5E5"> an</font><font color="#CCCCCC"> invited talk and a</font>

11
00:00:32,790 --> 00:00:37,170
standard talk I guess you could say<font color="#E5E5E5"> the</font>

12
00:00:35,160 --> 00:00:39,629
second thing<font color="#CCCCCC"> is we put the invited it's</font>

13
00:00:37,170 --> 00:00:41,460
<font color="#E5E5E5">we put the best paper award talk</font><font color="#CCCCCC"> the</font>

14
00:00:39,629 --> 00:00:42,809
morning<font color="#E5E5E5"> after the banquet that's kind of</font>

15
00:00:41,460 --> 00:00:45,989
a carrot to encourage people<font color="#E5E5E5"> to come</font>

16
00:00:42,809 --> 00:00:48,110
<font color="#CCCCCC">along</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> glad that</font><font color="#CCCCCC"> that's sort of</font>

17
00:00:45,989 --> 00:00:50,309
<font color="#CCCCCC">worked out there's plenty of people here</font>

18
00:00:48,110 --> 00:00:53,340
and the<font color="#CCCCCC"> reason for that is that</font><font color="#E5E5E5"> we also</font>

19
00:00:50,309 --> 00:00:55,649
wanted to give out the<font color="#E5E5E5"> best paper Awards</font>

20
00:00:53,340 --> 00:00:57,480
<font color="#E5E5E5">to the authors before the presentation</font>

21
00:00:55,649 --> 00:01:00,649
rather<font color="#E5E5E5"> than at the rump session partly</font>

22
00:00:57,480 --> 00:01:05,459
because that means<font color="#CCCCCC"> they</font><font color="#E5E5E5"> actually be here</font>

23
00:01:00,649 --> 00:01:09,060
so the best paper<font color="#E5E5E5"> award for chess 2018</font>

24
00:01:05,459 --> 00:01:11,729
was voted<font color="#CCCCCC"> for by</font><font color="#E5E5E5"> the editorial</font><font color="#CCCCCC"> boards as</font>

25
00:01:09,060 --> 00:01:15,000
<font color="#E5E5E5">you heard the other day we had 180 or so</font>

26
00:01:11,729 --> 00:01:18,270
submissions<font color="#E5E5E5"> 40 or 50</font><font color="#CCCCCC"> or so of which were</font>

27
00:01:15,000 --> 00:01:19,530
accepted<font color="#E5E5E5"> so this is a fantastic</font>

28
00:01:18,270 --> 00:01:22,200
achievement you could say so I'd like<font color="#E5E5E5"> to</font>

29
00:01:19,530 --> 00:01:24,330
<font color="#E5E5E5">invite</font><font color="#CCCCCC"> Martin and Emmet</font>

30
00:01:22,200 --> 00:01:27,890
<font color="#E5E5E5">Kenny's not able to be here</font><font color="#CCCCCC"> on to the</font>

31
00:01:24,330 --> 00:01:27,890
<font color="#E5E5E5">stage to receive the</font><font color="#CCCCCC"> orde</font>

32
00:01:30,020 --> 00:01:41,568
[Applause]

33
00:01:44,700 --> 00:01:52,450
so we we also have a gift<font color="#E5E5E5"> we weren't</font>

34
00:01:49,720 --> 00:01:58,930
able to locate any<font color="#CCCCCC"> cold boots but</font><font color="#E5E5E5"> we did</font>

35
00:01:52,450 --> 00:02:02,140
get some wooden shoes<font color="#E5E5E5"> that's a pretty</font>

36
00:01:58,930 --> 00:02:03,610
bad<font color="#E5E5E5"> joke but I'll take</font><font color="#CCCCCC"> it anyway so yeah</font>

37
00:02:02,140 --> 00:02:13,030
we have three<font color="#E5E5E5"> of these hopefully you can</font>

38
00:02:03,610 --> 00:02:14,410
<font color="#E5E5E5">take her can you</font><font color="#CCCCCC"> sew myself</font><font color="#E5E5E5"> in okay so</font>

39
00:02:13,030 --> 00:02:17,460
without<font color="#E5E5E5"> further ado we'll hand over to</font>

40
00:02:14,410 --> 00:02:31,600
the<font color="#CCCCCC"> session chair to start the session</font>

41
00:02:17,460 --> 00:02:33,930
<font color="#E5E5E5">thank you done so Amit is going to give</font>

42
00:02:31,600 --> 00:02:33,930
the talk

43
00:02:50,740 --> 00:02:55,550
okay so yeah hello everyone<font color="#E5E5E5"> today I'll</font>

44
00:02:53,810 --> 00:02:57,800
be<font color="#E5E5E5"> speaking about cold boot attacks on</font>

45
00:02:55,550 --> 00:03:01,160
ring and module<font color="#CCCCCC"> lwe secret keys when the</font>

46
00:02:57,800 --> 00:03:02,840
<font color="#CCCCCC">NTT is used to store the key</font><font color="#E5E5E5"> yeah and</font>

47
00:03:01,160 --> 00:03:05,660
before<font color="#E5E5E5"> I start this is based on joint</font>

48
00:03:02,840 --> 00:03:09,110
work by<font color="#E5E5E5"> myself and my supervisors Martin</font>

49
00:03:05,660 --> 00:03:11,780
Albrecht<font color="#CCCCCC"> and Kenny</font><font color="#E5E5E5"> Patterson</font><font color="#CCCCCC"> okay so</font>

50
00:03:09,110 --> 00:03:13,340
first of all what are<font color="#E5E5E5"> these cold boot</font>

51
00:03:11,780 --> 00:03:15,200
attacks well they were originally

52
00:03:13,340 --> 00:03:19,040
investigated<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> literature at least</font>

53
00:03:15,200 --> 00:03:22,160
by<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Halderman hotel in 2009 and the</font>

54
00:03:19,040 --> 00:03:24,500
attack basically<font color="#E5E5E5"> involves an attacker</font>

55
00:03:22,160 --> 00:03:27,769
who has physical<font color="#CCCCCC"> access to a victim's</font>

56
00:03:24,500 --> 00:03:29,269
machine and the idea is<font color="#CCCCCC"> that there</font><font color="#E5E5E5"> will</font>

57
00:03:27,769 --> 00:03:31,760
be some cryptographic secret key

58
00:03:29,269 --> 00:03:34,340
material stored in<font color="#E5E5E5"> this in the in</font><font color="#CCCCCC"> the</font>

59
00:03:31,760 --> 00:03:35,510
<font color="#CCCCCC">victims memory so the attacker can eject</font>

60
00:03:34,340 --> 00:03:38,480
<font color="#E5E5E5">the memory plug it into their own</font>

61
00:03:35,510 --> 00:03:40,940
machine<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> essentially taken a</font>

62
00:03:38,480 --> 00:03:42,440
reading of the bits<font color="#CCCCCC"> and at</font><font color="#E5E5E5"> this point</font>

63
00:03:40,940 --> 00:03:44,390
the attacker has two challenges<font color="#E5E5E5"> of the</font>

64
00:03:42,440 --> 00:03:47,060
first is to locate<font color="#E5E5E5"> the key material in</font>

65
00:03:44,390 --> 00:03:48,679
the memory and the second is to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> data</font>

66
00:03:47,060 --> 00:03:52,069
remanence effects to actually<font color="#E5E5E5"> recover</font>

67
00:03:48,680 --> 00:03:53,690
the<font color="#E5E5E5"> secret key okay so clearly these</font>

68
00:03:52,069 --> 00:03:55,010
work on<font color="#E5E5E5"> any encrypted graphic primitive</font>

69
00:03:53,690 --> 00:03:57,140
where there's a secret key stored in

70
00:03:55,010 --> 00:03:59,209
memory<font color="#E5E5E5"> so the attacks quite a general</font>

71
00:03:57,140 --> 00:04:01,488
one<font color="#E5E5E5"> however the attacker we're modeling</font>

72
00:03:59,209 --> 00:04:03,530
<font color="#E5E5E5">here is an extremely powerful one so</font>

73
00:04:01,489 --> 00:04:06,410
it's one that has<font color="#CCCCCC"> physical access to a</font>

74
00:04:03,530 --> 00:04:07,519
victim's machine<font color="#E5E5E5"> okay so a few more</font>

75
00:04:06,410 --> 00:04:09,410
details<font color="#E5E5E5"> on</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> Halderman</font>

76
00:04:07,519 --> 00:04:12,920
<font color="#E5E5E5">at all showed in 2009 while they showed</font>

77
00:04:09,410 --> 00:04:16,459
that<font color="#CCCCCC"> there's this data remanence</font><font color="#E5E5E5"> where</font>

78
00:04:12,920 --> 00:04:19,579
if you cut power<font color="#CCCCCC"> to ram</font><font color="#E5E5E5"> eventually the</font>

79
00:04:16,459 --> 00:04:21,829
any information in the<font color="#CCCCCC"> ram goes towards</font>

80
00:04:19,579 --> 00:04:24,979
this kind<font color="#E5E5E5"> of ground state as shown by</font>

81
00:04:21,829 --> 00:04:26,630
this<font color="#E5E5E5"> decaying picture of Mona Lisa okay</font>

82
00:04:24,979 --> 00:04:28,789
<font color="#E5E5E5">what they also showed is that</font><font color="#CCCCCC"> you can</font>

83
00:04:26,630 --> 00:04:30,590
actually<font color="#E5E5E5"> slow down this sort</font><font color="#CCCCCC"> of decay by</font>

84
00:04:28,789 --> 00:04:33,080
calling the RAM chips to extreme

85
00:04:30,590 --> 00:04:34,640
temperatures so<font color="#E5E5E5"> even if you just use</font>

86
00:04:33,080 --> 00:04:36,289
<font color="#E5E5E5">compressed compressed air for the</font>

87
00:04:34,640 --> 00:04:37,789
<font color="#E5E5E5">cooling you can</font><font color="#CCCCCC"> actually achieve</font><font color="#E5E5E5"> a less</font>

88
00:04:36,289 --> 00:04:40,729
<font color="#CCCCCC">than 1% bit flip rate</font>

89
00:04:37,789 --> 00:04:42,860
towards some ground state<font color="#E5E5E5"> and after some</font>

90
00:04:40,729 --> 00:04:44,359
period<font color="#CCCCCC"> of time so I'll speak</font><font color="#E5E5E5"> more about</font>

91
00:04:42,860 --> 00:04:47,840
<font color="#E5E5E5">what this ground state is in the next</font>

92
00:04:44,360 --> 00:04:49,940
<font color="#E5E5E5">slide but</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> also reduce this bit</font>

93
00:04:47,840 --> 00:04:51,530
flip rate by using<font color="#CCCCCC"> more extreme methods</font>

94
00:04:49,940 --> 00:04:57,800
<font color="#E5E5E5">of calling such as using a liquid</font>

95
00:04:51,530 --> 00:05:01,039
<font color="#E5E5E5">nitrogen okay so yeah so all of this is</font>

96
00:04:57,800 --> 00:05:02,990
basically<font color="#E5E5E5"> based on the fact that when</font>

97
00:05:01,039 --> 00:05:03,500
you cut power to<font color="#CCCCCC"> ram eventually the bits</font>

98
00:05:02,990 --> 00:05:07,250
in the mem

99
00:05:03,500 --> 00:05:08,870
<font color="#CCCCCC">we will decay to either a zero state or</font>

100
00:05:07,250 --> 00:05:10,520
a one state in<font color="#E5E5E5"> fact they'll be regions</font>

101
00:05:08,870 --> 00:05:14,540
that decay to zero<font color="#CCCCCC"> States and regions</font>

102
00:05:10,520 --> 00:05:16,280
educated to a one state and once again

103
00:05:14,540 --> 00:05:20,840
you call<font color="#E5E5E5"> the RAM to extreme temperatures</font>

104
00:05:16,280 --> 00:05:21,619
to slow down<font color="#E5E5E5"> this takane</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> and before</font>

105
00:05:20,840 --> 00:05:23,840
<font color="#CCCCCC">I move on</font>

106
00:05:21,620 --> 00:05:28,880
when I say<font color="#CCCCCC"> RAM what I really mean is D</font>

107
00:05:23,840 --> 00:05:30,799
<font color="#E5E5E5">Ram here</font><font color="#CCCCCC"> okay so now we move on to</font><font color="#E5E5E5"> in</font>

108
00:05:28,880 --> 00:05:32,600
<font color="#E5E5E5">examples suppose we have a 12 bit secret</font>

109
00:05:30,800 --> 00:05:35,000
key in the<font color="#CCCCCC"> victim's memory</font><font color="#E5E5E5"> so this is</font>

110
00:05:32,600 --> 00:05:36,169
the true<font color="#CCCCCC"> value of the secret key while</font>

111
00:05:35,000 --> 00:05:39,410
the<font color="#E5E5E5"> idea is</font><font color="#CCCCCC"> that the attacker comes</font>

112
00:05:36,169 --> 00:05:41,690
along<font color="#E5E5E5"> he they freeze</font><font color="#CCCCCC"> and extract the RAM</font>

113
00:05:39,410 --> 00:05:43,640
and then perhaps<font color="#E5E5E5"> they take this kind of</font>

114
00:05:41,690 --> 00:05:46,790
noisy reading of the secret key<font color="#E5E5E5"> where</font>

115
00:05:43,640 --> 00:05:48,380
some of<font color="#E5E5E5"> the bits have flipped and at</font>

116
00:05:46,790 --> 00:05:50,870
this<font color="#E5E5E5"> point the attacker needs to detect</font>

117
00:05:48,380 --> 00:05:53,590
these bit flips correct them and<font color="#CCCCCC"> correct</font>

118
00:05:50,870 --> 00:05:56,150
<font color="#CCCCCC">them in order to recover</font><font color="#E5E5E5"> the secret</font><font color="#CCCCCC"> key</font>

119
00:05:53,590 --> 00:05:58,280
<font color="#E5E5E5">okay so eventually if the attacker was</font>

120
00:05:56,150 --> 00:06:00,830
<font color="#E5E5E5">to leave the RAM at say room</font><font color="#CCCCCC"> temperature</font>

121
00:05:58,280 --> 00:06:02,929
or any<font color="#E5E5E5"> sort of temperature eventually we</font>

122
00:06:00,830 --> 00:06:07,729
reach the<font color="#E5E5E5"> ground state of these regions</font>

123
00:06:02,930 --> 00:06:09,919
of<font color="#E5E5E5"> zeros</font><font color="#CCCCCC"> and regions of</font><font color="#E5E5E5"> ones okay so in</font>

124
00:06:07,729 --> 00:06:11,570
<font color="#E5E5E5">addition</font><font color="#CCCCCC"> to these standard bit flips</font>

125
00:06:09,919 --> 00:06:14,479
that go towards the memories ground

126
00:06:11,570 --> 00:06:16,909
state<font color="#E5E5E5"> there are also these retrograde</font>

127
00:06:14,479 --> 00:06:18,080
bit flips that actually go<font color="#E5E5E5"> away from the</font>

128
00:06:16,910 --> 00:06:20,060
memory<font color="#CCCCCC"> ground</font><font color="#E5E5E5"> state</font>

129
00:06:18,080 --> 00:06:23,180
however these occur on much a lower rate

130
00:06:20,060 --> 00:06:24,860
of<font color="#E5E5E5"> row one where Row one is roughly</font><font color="#CCCCCC"> 0.1</font>

131
00:06:23,180 --> 00:06:27,800
<font color="#E5E5E5">percent according to the experiments of</font>

132
00:06:24,860 --> 00:06:29,930
Halderman<font color="#CCCCCC"> tatar so in addition to this</font>

133
00:06:27,800 --> 00:06:31,570
I'll be<font color="#E5E5E5"> using row</font><font color="#CCCCCC"> zero to denote the</font>

134
00:06:29,930 --> 00:06:34,669
standard bit flip rate

135
00:06:31,570 --> 00:06:36,770
<font color="#E5E5E5">okay so whenever we</font><font color="#CCCCCC"> launch a cold boot</font>

136
00:06:34,669 --> 00:06:38,510
attack<font color="#E5E5E5"> a standard sort of</font><font color="#CCCCCC"> assumption is</font>

137
00:06:36,770 --> 00:06:41,299
that<font color="#E5E5E5"> the number of bit flips we'll see</font>

138
00:06:38,510 --> 00:06:43,760
is the number<font color="#CCCCCC"> of bits in the key that</font>

139
00:06:41,300 --> 00:06:47,090
<font color="#CCCCCC">we're attacking</font><font color="#E5E5E5"> times the average of the</font>

140
00:06:43,760 --> 00:06:48,919
two rates and implicitly<font color="#E5E5E5"> in order to</font>

141
00:06:47,090 --> 00:06:50,960
make this assumption<font color="#E5E5E5"> we're assuming that</font>

142
00:06:48,919 --> 00:06:54,049
<font color="#E5E5E5">half the bits of the secret key are in</font>

143
00:06:50,960 --> 00:06:57,950
the ground<font color="#E5E5E5"> state</font><font color="#CCCCCC"> okay so before</font><font color="#E5E5E5"> I move</font>

144
00:06:54,050 --> 00:07:00,530
on<font color="#CCCCCC"> whenever I give you a bit flip rate</font>

145
00:06:57,950 --> 00:07:02,810
that contains two sort of numbers the

146
00:07:00,530 --> 00:07:04,250
first<font color="#E5E5E5"> one's going to represent row not</font>

147
00:07:02,810 --> 00:07:09,470
and the second one's gonna<font color="#E5E5E5"> represent</font><font color="#CCCCCC"> row</font>

148
00:07:04,250 --> 00:07:11,750
<font color="#E5E5E5">one okay so what's kind</font><font color="#CCCCCC"> of known about</font>

149
00:07:09,470 --> 00:07:13,880
these<font color="#CCCCCC"> colby attacks on popular</font>

150
00:07:11,750 --> 00:07:15,650
cryptographic primitives<font color="#E5E5E5"> well for DES</font>

151
00:07:13,880 --> 00:07:17,330
and AES<font color="#CCCCCC"> it's been shown that</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> are</font>

152
00:07:15,650 --> 00:07:19,609
extremely effective<font color="#CCCCCC"> colby attack</font>

153
00:07:17,330 --> 00:07:23,300
even a fairly high bit flip rates of

154
00:07:19,610 --> 00:07:24,680
more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> 50% and just to give</font><font color="#E5E5E5"> you some</font>

155
00:07:23,300 --> 00:07:26,900
background I still tell how these

156
00:07:24,680 --> 00:07:30,620
attacks sort of work or what they take

157
00:07:26,900 --> 00:07:32,419
<font color="#CCCCCC">advantage of well</font><font color="#E5E5E5"> four dozen</font><font color="#CCCCCC"> AAS</font><font color="#E5E5E5"> these</font>

158
00:07:30,620 --> 00:07:34,129
attacks<font color="#E5E5E5"> assume that not only do you</font><font color="#CCCCCC"> have</font>

159
00:07:32,419 --> 00:07:36,080
the secret<font color="#CCCCCC"> key stored in memory</font><font color="#E5E5E5"> but you</font>

160
00:07:34,129 --> 00:07:39,400
also have a number<font color="#E5E5E5"> of rounds</font><font color="#CCCCCC"> of the key</font>

161
00:07:36,080 --> 00:07:41,539
<font color="#CCCCCC">scheduled</font><font color="#E5E5E5"> sword in memory so essentially</font>

162
00:07:39,400 --> 00:07:43,068
taking advantage<font color="#E5E5E5"> of this kind of</font>

163
00:07:41,539 --> 00:07:45,110
redundant<font color="#CCCCCC"> information between the key</font>

164
00:07:43,069 --> 00:07:46,789
schedule and the actual key you can

165
00:07:45,110 --> 00:07:50,360
actually<font color="#E5E5E5"> launch very effective cold boot</font>

166
00:07:46,789 --> 00:07:53,810
attacks on DES and AES<font color="#CCCCCC"> a similar story</font>

167
00:07:50,360 --> 00:07:56,840
<font color="#E5E5E5">holds for RSA where it's been shown that</font>

168
00:07:53,810 --> 00:07:58,370
<font color="#E5E5E5">you can correct flip rates of roughly</font>

169
00:07:56,840 --> 00:08:02,000
<font color="#CCCCCC">forty percent</font><font color="#E5E5E5"> in the standard direction</font>

170
00:07:58,370 --> 00:08:03,830
<font color="#E5E5E5">in just a few seconds</font><font color="#CCCCCC"> so once again this</font>

171
00:08:02,000 --> 00:08:04,610
attack uses redundancy in what's<font color="#E5E5E5"> stored</font>

172
00:08:03,830 --> 00:08:07,818
in the memory

173
00:08:04,610 --> 00:08:10,400
in<font color="#E5E5E5"> particular if RSA is implemented</font>

174
00:08:07,819 --> 00:08:12,169
<font color="#CCCCCC">according to the pkcs1 standard you</font>

175
00:08:10,400 --> 00:08:13,849
don't just get<font color="#E5E5E5"> the secret key in memory</font>

176
00:08:12,169 --> 00:08:16,789
<font color="#E5E5E5">you also get some other functions of</font><font color="#CCCCCC"> the</font>

177
00:08:13,849 --> 00:08:20,659
<font color="#E5E5E5">secret key in memory and more recently</font>

178
00:08:16,789 --> 00:08:23,419
there's been<font color="#E5E5E5"> some work on</font><font color="#CCCCCC"> Colby</font>

179
00:08:20,659 --> 00:08:25,279
<font color="#E5E5E5">attacking entry and it was actually</font>

180
00:08:23,419 --> 00:08:27,409
<font color="#E5E5E5">shown that at fairly low bit flip rates</font>

181
00:08:25,279 --> 00:08:31,430
but still the realistic ones that held

182
00:08:27,409 --> 00:08:32,990
<font color="#E5E5E5">them in a tile showed were feasible you</font>

183
00:08:31,430 --> 00:08:35,029
can actually recover entry keys in a

184
00:08:32,990 --> 00:08:37,839
matter of minutes<font color="#E5E5E5"> towers using fairly</font>

185
00:08:35,029 --> 00:08:41,120
straightforward enumeration techniques

186
00:08:37,839 --> 00:08:43,130
<font color="#E5E5E5">okay so next to motivate our work well</font>

187
00:08:41,120 --> 00:08:45,170
as you've already<font color="#E5E5E5"> heard throughout this</font>

188
00:08:43,130 --> 00:08:48,170
conference misses running this process

189
00:08:45,170 --> 00:08:51,199
<font color="#E5E5E5">or competition and many of them are</font>

190
00:08:48,170 --> 00:08:53,270
actually based on the<font color="#E5E5E5"> lwe problem so a</font>

191
00:08:51,200 --> 00:08:55,970
natural<font color="#E5E5E5"> open question in in the cold</font>

192
00:08:53,270 --> 00:08:58,819
<font color="#CCCCCC">boot</font><font color="#E5E5E5"> area is to ask are there effective</font>

193
00:08:55,970 --> 00:09:02,570
<font color="#CCCCCC">cold bit attacks on</font><font color="#E5E5E5"> some of these</font><font color="#CCCCCC"> lwe</font>

194
00:08:58,820 --> 00:09:05,779
contenders and what we<font color="#E5E5E5"> actually look at</font>

195
00:09:02,570 --> 00:09:08,660
is attacks on any scheme that<font color="#CCCCCC"> uses an</font>

196
00:09:05,779 --> 00:09:16,040
entity to store its secret key in the

197
00:09:08,660 --> 00:09:18,019
memory<font color="#CCCCCC"> ok so next we get</font><font color="#E5E5E5"> on to defining</font>

198
00:09:16,040 --> 00:09:19,849
our cold boot problem and in order to

199
00:09:18,019 --> 00:09:22,279
<font color="#E5E5E5">understand the problem</font><font color="#CCCCCC"> we first</font><font color="#E5E5E5"> need to</font>

200
00:09:19,850 --> 00:09:23,870
understand what<font color="#CCCCCC"> lwe key looks like or at</font>

201
00:09:22,279 --> 00:09:28,250
least what the<font color="#CCCCCC"> LW keys that will</font><font color="#E5E5E5"> be</font>

202
00:09:23,870 --> 00:09:30,320
<font color="#E5E5E5">attacking look like so in actual fact</font>

203
00:09:28,250 --> 00:09:31,040
we'll be focusing on ring and module<font color="#CCCCCC"> lwe</font>

204
00:09:30,320 --> 00:09:33,680
<font color="#E5E5E5">which</font>

205
00:09:31,040 --> 00:09:36,889
<font color="#E5E5E5">two of the perhaps main efficient</font>

206
00:09:33,680 --> 00:09:40,969
variations of<font color="#CCCCCC"> LW</font><font color="#E5E5E5"> used</font><font color="#CCCCCC"> in nist used in</font>

207
00:09:36,889 --> 00:09:43,790
this proposals and in order to<font color="#E5E5E5"> define</font>

208
00:09:40,970 --> 00:09:46,759
<font color="#CCCCCC">their keys we need to fix a polynomial</font>

209
00:09:43,790 --> 00:09:48,889
ring<font color="#E5E5E5"> and the polynomial ring we'll be</font>

210
00:09:46,759 --> 00:09:50,600
using is going<font color="#CCCCCC"> to be the</font><font color="#E5E5E5"> power of two</font>

211
00:09:48,889 --> 00:09:53,899
<font color="#CCCCCC">cyclamates</font><font color="#E5E5E5"> because this allows you to</font>

212
00:09:50,600 --> 00:09:55,310
<font color="#E5E5E5">use an entity okay so in</font><font color="#CCCCCC"> other words</font>

213
00:09:53,899 --> 00:09:58,519
we're going<font color="#E5E5E5"> to be fixing the ring</font><font color="#CCCCCC"> R sub</font>

214
00:09:55,310 --> 00:10:00,739
<font color="#CCCCCC">Q where this</font><font color="#E5E5E5"> ring is essentially the</font>

215
00:09:58,519 --> 00:10:03,110
ring of polynomials whose coefficients

216
00:10:00,740 --> 00:10:06,380
are integers modulo Q quotient it out by

217
00:10:03,110 --> 00:10:08,630
X to the<font color="#E5E5E5"> n plus 1 okay so these are</font>

218
00:10:06,380 --> 00:10:11,350
degree at most<font color="#E5E5E5"> n minus 1 polynomials</font>

219
00:10:08,630 --> 00:10:14,480
whose coefficients<font color="#CCCCCC"> are integers modulo Q</font>

220
00:10:11,350 --> 00:10:15,980
so for ring<font color="#CCCCCC"> lwe</font><font color="#E5E5E5"> the secret key</font><font color="#CCCCCC"> is simply</font>

221
00:10:14,480 --> 00:10:18,889
one<font color="#CCCCCC"> of these ring elements or</font>

222
00:10:15,980 --> 00:10:20,630
polynomials<font color="#E5E5E5"> however for modular</font><font color="#CCCCCC"> lwe</font><font color="#E5E5E5"> the</font>

223
00:10:18,889 --> 00:10:23,779
secret key is<font color="#E5E5E5"> a collection of</font><font color="#CCCCCC"> d of these</font>

224
00:10:20,630 --> 00:10:26,660
polynomials<font color="#E5E5E5"> however there's an</font>

225
00:10:23,779 --> 00:10:28,939
interesting<font color="#CCCCCC"> trade-off between</font><font color="#E5E5E5"> D and n so</font>

226
00:10:26,660 --> 00:10:31,790
what module<font color="#CCCCCC"> lwe schemes tend to do is</font>

227
00:10:28,940 --> 00:10:34,430
use a smaller ring dimension<font color="#E5E5E5"> n at the</font>

228
00:10:31,790 --> 00:10:37,160
expense of<font color="#E5E5E5"> using a non trivial D so for</font>

229
00:10:34,430 --> 00:10:40,069
example<font color="#E5E5E5"> Kaiba which is a module</font><font color="#CCCCCC"> lwe</font>

230
00:10:37,160 --> 00:10:42,649
based scheme uses<font color="#CCCCCC"> N equals 256</font><font color="#E5E5E5"> and D</font>

231
00:10:40,069 --> 00:10:44,540
equals 3<font color="#E5E5E5"> whereas the ring</font><font color="#CCCCCC"> LW</font><font color="#E5E5E5"> based New</font>

232
00:10:42,649 --> 00:10:47,449
Hope uses a much larger ring dimension

233
00:10:44,540 --> 00:10:52,209
but<font color="#E5E5E5"> we</font><font color="#CCCCCC"> only have</font><font color="#E5E5E5"> one polynomial</font><font color="#CCCCCC"> making</font>

234
00:10:47,449 --> 00:10:55,040
up the<font color="#E5E5E5"> secret key</font><font color="#CCCCCC"> okay so how are these</font>

235
00:10:52,209 --> 00:10:59,420
<font color="#CCCCCC">Keys stored in memory</font><font color="#E5E5E5"> for some of these</font>

236
00:10:55,040 --> 00:11:01,069
<font color="#CCCCCC">lwe</font><font color="#E5E5E5"> proposals well it's been kind of</font>

237
00:10:59,420 --> 00:11:03,290
said before<font color="#CCCCCC"> that number theoretic</font>

238
00:11:01,069 --> 00:11:05,410
transform or<font color="#CCCCCC"> ntt speeds up</font>

239
00:11:03,290 --> 00:11:09,170
multiplication polynomial multiplication

240
00:11:05,410 --> 00:11:12,170
<font color="#E5E5E5">from roughly N squared operations to n</font>

241
00:11:09,170 --> 00:11:15,410
log n operations<font color="#E5E5E5"> so in order to take</font>

242
00:11:12,170 --> 00:11:17,300
advantage<font color="#CCCCCC"> of this kind</font><font color="#E5E5E5"> of speed up it's</font>

243
00:11:15,410 --> 00:11:19,339
<font color="#E5E5E5">often the case</font><font color="#CCCCCC"> that polynomials in the</font>

244
00:11:17,300 --> 00:11:23,180
<font color="#CCCCCC">secret key will simply be stored in the</font>

245
00:11:19,339 --> 00:11:24,949
<font color="#CCCCCC">MTT</font><font color="#E5E5E5"> domain so that</font><font color="#CCCCCC"> you can perform very</font>

246
00:11:23,180 --> 00:11:27,319
fast multiplication without needing to

247
00:11:24,949 --> 00:11:28,880
<font color="#E5E5E5">apply an entity to the secret key every</font>

248
00:11:27,319 --> 00:11:33,740
time<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> do a polynomial</font>

249
00:11:28,880 --> 00:11:36,019
multiplication<font color="#CCCCCC"> ok so next we can</font>

250
00:11:33,740 --> 00:11:38,209
actually define<font color="#E5E5E5"> our cold boot problem so</font>

251
00:11:36,019 --> 00:11:43,010
essentially what we<font color="#CCCCCC"> want to do is to</font>

252
00:11:38,209 --> 00:11:44,510
decode a noisy entity or recover this<font color="#CCCCCC"> s</font>

253
00:11:43,010 --> 00:11:46,520
<font color="#E5E5E5">from STL</font>

254
00:11:44,510 --> 00:11:52,430
<font color="#E5E5E5">where I stole that is the MTT</font><font color="#CCCCCC"> of s plus</font>

255
00:11:46,520 --> 00:11:53,689
some error vector<font color="#E5E5E5"> Delta so we're</font>

256
00:11:52,430 --> 00:11:55,489
actually going<font color="#E5E5E5"> to be making assumption</font>

257
00:11:53,690 --> 00:11:58,130
throughout this talk and that is<font color="#E5E5E5"> going</font>

258
00:11:55,490 --> 00:12:00,770
to be<font color="#E5E5E5"> that we have Kappa bit flips where</font>

259
00:11:58,130 --> 00:12:02,060
Kappa is much less than<font color="#E5E5E5"> in and of course</font>

260
00:12:00,770 --> 00:12:04,250
you<font color="#E5E5E5"> don't want to make this assumption</font>

261
00:12:02,060 --> 00:12:07,130
in general however for the purposes of

262
00:12:04,250 --> 00:12:12,080
<font color="#E5E5E5">our attack we actually require this</font>

263
00:12:07,130 --> 00:12:14,000
assumption okay so next giving more

264
00:12:12,080 --> 00:12:16,700
<font color="#CCCCCC">details on what this error vector Delta</font>

265
00:12:14,000 --> 00:12:18,490
looks like well remember Delta

266
00:12:16,700 --> 00:12:21,680
<font color="#E5E5E5">corresponds to bit flips</font>

267
00:12:18,490 --> 00:12:26,030
however Delta is<font color="#E5E5E5"> also represented as an</font>

268
00:12:21,680 --> 00:12:28,040
integer modulo Q vector<font color="#E5E5E5"> here so</font>

269
00:12:26,030 --> 00:12:30,140
essentially what this<font color="#CCCCCC"> means is that the</font>

270
00:12:28,040 --> 00:12:33,260
<font color="#E5E5E5">components of Delta are not small when</font>

271
00:12:30,140 --> 00:12:35,840
considered as integers modulo Q because

272
00:12:33,260 --> 00:12:39,110
they can they they're associated<font color="#CCCCCC"> with</font>

273
00:12:35,840 --> 00:12:41,270
flips<font color="#E5E5E5"> however if we assume a low number</font>

274
00:12:39,110 --> 00:12:42,680
<font color="#CCCCCC">of bit flips then Delta's components</font>

275
00:12:41,270 --> 00:12:44,569
should have a low Hamming weight when

276
00:12:42,680 --> 00:12:48,739
written in some binary<font color="#CCCCCC"> signed digit</font>

277
00:12:44,570 --> 00:12:50,870
representation or<font color="#CCCCCC"> bsd</font><font color="#E5E5E5"> are so briefly</font>

278
00:12:48,740 --> 00:12:52,640
<font color="#E5E5E5">what what is a bsd are well it's</font>

279
00:12:50,870 --> 00:12:56,450
essentially a<font color="#CCCCCC"> binding</font><font color="#E5E5E5"> representation</font>

280
00:12:52,640 --> 00:12:59,090
<font color="#E5E5E5">where each bit has a sign attached to it</font>

281
00:12:56,450 --> 00:13:00,440
and we really need the sign digit

282
00:12:59,090 --> 00:13:02,240
representation because there are bit

283
00:13:00,440 --> 00:13:05,840
flips that go from<font color="#CCCCCC"> 0 to 1 and bit</font><font color="#E5E5E5"> flips</font>

284
00:13:02,240 --> 00:13:09,860
<font color="#CCCCCC">I go from 1 to 0</font><font color="#E5E5E5"> okay so an example</font><font color="#CCCCCC"> of a</font>

285
00:13:05,840 --> 00:13:12,980
<font color="#CCCCCC">BSc r7 is 1 0 0 minus 1 since</font><font color="#E5E5E5"> 7 is 1</font>

286
00:13:09,860 --> 00:13:14,300
times<font color="#CCCCCC"> I take</font><font color="#E5E5E5"> away 1 and this example</font>

287
00:13:12,980 --> 00:13:16,010
<font color="#E5E5E5">kind of highlights that</font>

288
00:13:14,300 --> 00:13:17,839
<font color="#CCCCCC">bsd ours are not unique</font><font color="#E5E5E5"> because we could</font>

289
00:13:16,010 --> 00:13:19,730
also have<font color="#E5E5E5"> the binary representation</font><font color="#CCCCCC"> of 7</font>

290
00:13:17,840 --> 00:13:22,100
so this is kind of something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we'll</font>

291
00:13:19,730 --> 00:13:24,140
be ignoring<font color="#E5E5E5"> for the purposes of this</font>

292
00:13:22,100 --> 00:13:27,440
talk but if you want to see<font color="#E5E5E5"> more details</font>

293
00:13:24,140 --> 00:13:29,510
on this please read the paper<font color="#CCCCCC"> okay so</font>

294
00:13:27,440 --> 00:13:32,300
once<font color="#CCCCCC"> again if we assume Kappa bit flips</font>

295
00:13:29,510 --> 00:13:34,310
<font color="#E5E5E5">we would assume that we're essentially</font>

296
00:13:32,300 --> 00:13:36,189
assuming<font color="#E5E5E5"> that the bsd are of dulcis</font>

297
00:13:34,310 --> 00:13:40,130
should either a Hamming way<font color="#E5E5E5"> of</font><font color="#CCCCCC"> kate</font><font color="#E5E5E5"> a</font>

298
00:13:36,190 --> 00:13:41,690
Kappa sorry<font color="#CCCCCC"> and whenever I say the BSD</font>

299
00:13:40,130 --> 00:13:44,180
are<font color="#E5E5E5"> Delta what I really mean is the</font>

300
00:13:41,690 --> 00:13:47,360
<font color="#CCCCCC">concatenation of the BSD</font><font color="#E5E5E5"> are of its</font>

301
00:13:44,180 --> 00:13:49,130
individual components<font color="#CCCCCC"> okay so the final</font>

302
00:13:47,360 --> 00:13:51,380
<font color="#CCCCCC">thing to</font><font color="#E5E5E5"> be said</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this entity</font>

303
00:13:49,130 --> 00:13:55,160
problem is that<font color="#E5E5E5"> s has small coefficients</font>

304
00:13:51,380 --> 00:13:57,290
which is essentially a<font color="#E5E5E5"> standard design</font>

305
00:13:55,160 --> 00:13:58,430
<font color="#E5E5E5">choice in</font><font color="#CCCCCC"> that all</font><font color="#E5E5E5"> of these ring and</font>

306
00:13:57,290 --> 00:14:02,149
<font color="#E5E5E5">modular</font><font color="#CCCCCC"> lwe</font>

307
00:13:58,430 --> 00:14:04,699
schemes use okay so<font color="#E5E5E5"> just to come back</font><font color="#CCCCCC"> to</font>

308
00:14:02,149 --> 00:14:05,180
<font color="#E5E5E5">these these examples of</font><font color="#CCCCCC"> Chi brand-new</font>

309
00:14:04,700 --> 00:14:07,730
hope

310
00:14:05,180 --> 00:14:10,420
in actual fact<font color="#CCCCCC"> Khyber consists of three</font>

311
00:14:07,730 --> 00:14:13,070
<font color="#E5E5E5">relatively low dimensional ring elements</font>

312
00:14:10,420 --> 00:14:15,380
<font color="#E5E5E5">so in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to recover a form Chi over</font>

313
00:14:13,070 --> 00:14:17,240
secret key we have<font color="#E5E5E5"> to decode three noisy</font>

314
00:14:15,380 --> 00:14:19,279
entities in a relatively low dimension

315
00:14:17,240 --> 00:14:20,990
where it's a new hope we<font color="#CCCCCC"> had to decode</font>

316
00:14:19,279 --> 00:14:26,689
one noisy entity in a relatively high

317
00:14:20,990 --> 00:14:29,209
dimension<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so finally we</font><font color="#E5E5E5"> get on to</font>

318
00:14:26,690 --> 00:14:31,399
our attack and our attack<font color="#E5E5E5"> splits into</font>

319
00:14:29,209 --> 00:14:32,689
three<font color="#E5E5E5"> main components</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> is a</font>

320
00:14:31,399 --> 00:14:34,700
<font color="#E5E5E5">divide and</font><font color="#CCCCCC"> conquer</font>

321
00:14:32,690 --> 00:14:37,399
sort of strategy<font color="#CCCCCC"> to reduce</font><font color="#E5E5E5"> the dimension</font>

322
00:14:34,700 --> 00:14:40,279
of<font color="#E5E5E5"> our problem and essentially what this</font>

323
00:14:37,399 --> 00:14:42,320
this component uses is that<font color="#CCCCCC"> we can</font>

324
00:14:40,279 --> 00:14:45,620
compute an entity using fast<font color="#CCCCCC"> Fourier</font>

325
00:14:42,320 --> 00:14:48,050
transform<font color="#E5E5E5"> techniques okay so the second</font>

326
00:14:45,620 --> 00:14:50,270
component<font color="#E5E5E5"> that will describe is how to</font>

327
00:14:48,050 --> 00:14:52,760
work a solution<font color="#E5E5E5"> up from one of these low</font>

328
00:14:50,270 --> 00:14:55,310
dimensional instances all the way up to

329
00:14:52,760 --> 00:14:58,520
the solution to our original<font color="#E5E5E5"> problem of</font>

330
00:14:55,310 --> 00:15:00,770
decoding<font color="#CCCCCC"> the noisy entity and finally</font>

331
00:14:58,520 --> 00:15:03,319
I'll speak<font color="#CCCCCC"> about how we</font><font color="#E5E5E5"> actually solve</font>

332
00:15:00,770 --> 00:15:05,180
these<font color="#E5E5E5"> low dimensional instances that we</font>

333
00:15:03,320 --> 00:15:08,779
get from dividing dividing and

334
00:15:05,180 --> 00:15:12,489
conquering<font color="#CCCCCC"> okay so first of</font><font color="#E5E5E5"> all how do</font>

335
00:15:08,779 --> 00:15:16,010
we divide<font color="#E5E5E5"> and conquer well if you</font><font color="#CCCCCC"> recall</font>

336
00:15:12,490 --> 00:15:18,110
<font color="#E5E5E5">the NTT is essentially a Fourier</font>

337
00:15:16,010 --> 00:15:20,450
transform<font color="#CCCCCC"> over the integers</font><font color="#E5E5E5"> modulo Q and</font>

338
00:15:18,110 --> 00:15:22,700
the form explicit formula for<font color="#E5E5E5"> the NTT</font>

339
00:15:20,450 --> 00:15:26,779
that's used is given on<font color="#E5E5E5"> this slide and</font>

340
00:15:22,700 --> 00:15:29,000
you<font color="#E5E5E5"> actually see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> um there's this</font>

341
00:15:26,779 --> 00:15:31,270
isn't<font color="#E5E5E5"> quite analogous to a Fourier</font>

342
00:15:29,000 --> 00:15:36,250
transform because of this factor<font color="#E5E5E5"> of</font>

343
00:15:31,270 --> 00:15:39,680
<font color="#E5E5E5">Omega to</font><font color="#CCCCCC"> the half J in the summoned and</font>

344
00:15:36,250 --> 00:15:41,360
yeah so nonetheless<font color="#E5E5E5"> even it despite this</font>

345
00:15:39,680 --> 00:15:44,239
difference we can<font color="#E5E5E5"> still use fast Fourier</font>

346
00:15:41,360 --> 00:15:46,250
transforms<font color="#E5E5E5"> fourth FFT techniques to</font>

347
00:15:44,240 --> 00:15:48,650
quickly<font color="#CCCCCC"> compute an entity</font>

348
00:15:46,250 --> 00:15:51,140
so essentially what that<font color="#E5E5E5"> means is</font><font color="#CCCCCC"> that</font>

349
00:15:48,650 --> 00:15:53,569
we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> write an entity in dimension</font><font color="#CCCCCC"> m in</font>

350
00:15:51,140 --> 00:15:57,680
<font color="#E5E5E5">terms of two entities in dimension and</font>

351
00:15:53,570 --> 00:15:59,149
over two and so on<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so what are the</font>

352
00:15:57,680 --> 00:16:02,599
<font color="#E5E5E5">formally that allow us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do this well</font>

353
00:15:59,149 --> 00:16:06,829
they're given by the two equations<font color="#E5E5E5"> in</font>

354
00:16:02,600 --> 00:16:09,260
the<font color="#E5E5E5"> box here and the main thing</font><font color="#CCCCCC"> to take</font>

355
00:16:06,829 --> 00:16:12,079
<font color="#CCCCCC">from this take from</font><font color="#E5E5E5"> these formally is</font>

356
00:16:09,260 --> 00:16:14,439
<font color="#E5E5E5">that taking the sum and</font><font color="#CCCCCC"> difference</font>

357
00:16:12,080 --> 00:16:17,780
<font color="#E5E5E5">of the ice and I plus and over tooth</font>

358
00:16:14,440 --> 00:16:19,640
components<font color="#E5E5E5"> of an n-dimensional</font><font color="#CCCCCC"> NTT</font><font color="#E5E5E5"> gives</font>

359
00:16:17,780 --> 00:16:21,740
you something<font color="#CCCCCC"> in</font><font color="#E5E5E5"> terms of the ice</font>

360
00:16:19,640 --> 00:16:26,420
component of an<font color="#E5E5E5"> N over</font><font color="#CCCCCC"> two dimensional</font>

361
00:16:21,740 --> 00:16:29,780
entity<font color="#E5E5E5"> okay so yeah</font>

362
00:16:26,420 --> 00:16:31,790
moving on<font color="#E5E5E5"> how do we use this</font><font color="#CCCCCC"> to divide</font>

363
00:16:29,780 --> 00:16:33,500
<font color="#E5E5E5">and</font><font color="#CCCCCC"> conquer our instance well recall</font>

364
00:16:31,790 --> 00:16:35,060
<font color="#CCCCCC">that our instance is given by this</font><font color="#E5E5E5"> s</font>

365
00:16:33,500 --> 00:16:38,960
tilde<font color="#E5E5E5"> where I</font><font color="#CCCCCC"> stood there is a noisy</font>

366
00:16:35,060 --> 00:16:40,790
entity so in actual fact taking the sum

367
00:16:38,960 --> 00:16:45,110
<font color="#E5E5E5">and difference of</font><font color="#CCCCCC"> the ice and I plus n</font>

368
00:16:40,790 --> 00:16:46,490
over<font color="#CCCCCC"> two components of</font><font color="#E5E5E5"> s tilde and using</font>

369
00:16:45,110 --> 00:16:50,330
formally from<font color="#CCCCCC"> a previous slide we can</font>

370
00:16:46,490 --> 00:16:52,760
<font color="#E5E5E5">actually get equations 1 and</font><font color="#CCCCCC"> 2 and we</font>

371
00:16:50,330 --> 00:16:55,480
call the the first of these the<font color="#E5E5E5"> positive</font>

372
00:16:52,760 --> 00:16:58,340
fold and the<font color="#CCCCCC"> second the negative fold</font>

373
00:16:55,480 --> 00:17:01,400
<font color="#CCCCCC">okay so if you look more carefully</font><font color="#E5E5E5"> at</font>

374
00:16:58,340 --> 00:17:03,200
the positive fold you'll see that it

375
00:17:01,400 --> 00:17:05,540
<font color="#E5E5E5">essentially has</font><font color="#CCCCCC"> the same form as our</font>

376
00:17:03,200 --> 00:17:06,980
<font color="#CCCCCC">original instance it's</font><font color="#E5E5E5"> essentially on</font>

377
00:17:05,540 --> 00:17:11,389
the<font color="#CCCCCC"> right hand side</font><font color="#E5E5E5"> what we have is two</font>

378
00:17:06,980 --> 00:17:13,040
times<font color="#E5E5E5"> yeah and a noisy entity the only</font>

379
00:17:11,390 --> 00:17:14,660
difference is<font color="#CCCCCC"> that there's a factor that</font>

380
00:17:13,040 --> 00:17:17,060
<font color="#E5E5E5">a constant</font><font color="#CCCCCC"> factor of two in front of</font><font color="#E5E5E5"> the</font>

381
00:17:14,660 --> 00:17:19,220
entity and this essentially<font color="#E5E5E5"> means that</font>

382
00:17:17,060 --> 00:17:21,679
<font color="#E5E5E5">we can divide and conquer</font>

383
00:17:19,220 --> 00:17:23,959
the positive fold<font color="#E5E5E5"> once again</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> using</font>

384
00:17:21,680 --> 00:17:26,360
the same<font color="#E5E5E5"> techniques however</font><font color="#CCCCCC"> for the</font>

385
00:17:23,959 --> 00:17:28,190
second<font color="#E5E5E5"> of these equations so the</font>

386
00:17:26,359 --> 00:17:30,409
negative fold<font color="#E5E5E5"> we have this annoying</font>

387
00:17:28,190 --> 00:17:33,260
<font color="#CCCCCC">factor of Omega to the I plus a half in</font>

388
00:17:30,410 --> 00:17:35,150
front<font color="#E5E5E5"> of the MTT which kind of prevents</font>

389
00:17:33,260 --> 00:17:38,300
us from dividing and conquering in any

390
00:17:35,150 --> 00:17:40,910
effective way so<font color="#CCCCCC"> essentially we can</font>

391
00:17:38,300 --> 00:17:43,909
<font color="#E5E5E5">repeatedly fold down the positive folded</font>

392
00:17:40,910 --> 00:17:45,200
<font color="#E5E5E5">in sense or repeatedly divide and</font>

393
00:17:43,910 --> 00:17:48,470
<font color="#E5E5E5">conquer down the positive folded in</font>

394
00:17:45,200 --> 00:17:51,800
sense<font color="#CCCCCC"> okay so the question is how many</font>

395
00:17:48,470 --> 00:17:53,470
<font color="#CCCCCC">times can</font><font color="#E5E5E5"> we actually do this and can we</font>

396
00:17:51,800 --> 00:17:56,780
<font color="#CCCCCC">actually reach a trivial dimension by</font>

397
00:17:53,470 --> 00:17:58,340
repeatedly dividing and conquering<font color="#E5E5E5"> well</font>

398
00:17:56,780 --> 00:18:01,129
in order<font color="#CCCCCC"> to</font><font color="#E5E5E5"> understand the answer to</font>

399
00:17:58,340 --> 00:18:03,439
this<font color="#E5E5E5"> question we had to look at the the</font>

400
00:18:01,130 --> 00:18:05,360
new error vectors that<font color="#CCCCCC"> are introduced</font>

401
00:18:03,440 --> 00:18:07,070
when we divide and conquer so these are

402
00:18:05,360 --> 00:18:11,090
actually given<font color="#CCCCCC"> by Delta</font><font color="#E5E5E5"> plus and Delta</font>

403
00:18:07,070 --> 00:18:14,270
minus and if we write<font color="#E5E5E5"> Delta L as the</font>

404
00:18:11,090 --> 00:18:16,639
left<font color="#E5E5E5"> and over</font><font color="#CCCCCC"> two components of Delta</font>

405
00:18:14,270 --> 00:18:19,220
and<font color="#CCCCCC"> Delta</font><font color="#E5E5E5"> R as</font><font color="#CCCCCC"> the right and over</font><font color="#E5E5E5"> two</font>

406
00:18:16,640 --> 00:18:22,160
components of Delta<font color="#E5E5E5"> essentially what</font>

407
00:18:19,220 --> 00:18:24,200
Delta<font color="#CCCCCC"> plus and Delta minus are are the</font>

408
00:18:22,160 --> 00:18:26,040
sums and differences<font color="#E5E5E5"> of Delta L and</font><font color="#CCCCCC"> L</font>

409
00:18:24,200 --> 00:18:30,030
<font color="#CCCCCC">are</font>

410
00:18:26,040 --> 00:18:35,010
okay so yeah what<font color="#E5E5E5"> this essentially</font><font color="#CCCCCC"> means</font>

411
00:18:30,030 --> 00:18:39,120
is<font color="#E5E5E5"> that if we have that if the</font><font color="#CCCCCC"> bsd r of</font>

412
00:18:35,010 --> 00:18:41,400
<font color="#E5E5E5">Delta is Kappa then we expect that the</font>

413
00:18:39,120 --> 00:18:43,560
<font color="#CCCCCC">BSD R of Delta plus and Delta minus</font>

414
00:18:41,400 --> 00:18:46,230
<font color="#E5E5E5">should have a</font><font color="#CCCCCC"> hemingway of Kappa as well</font>

415
00:18:43,560 --> 00:18:48,659
and this<font color="#E5E5E5"> is essentially because we're</font>

416
00:18:46,230 --> 00:18:51,930
making<font color="#E5E5E5"> the assumption that Kappa is</font>

417
00:18:48,660 --> 00:18:55,650
extremely small compared to<font color="#E5E5E5"> n okay so</font>

418
00:18:51,930 --> 00:18:59,040
essentially Delta plus and Delta<font color="#E5E5E5"> minus</font>

419
00:18:55,650 --> 00:19:01,470
have a much less<font color="#E5E5E5"> sparse representation</font>

420
00:18:59,040 --> 00:19:04,050
when<font color="#CCCCCC"> written in BSD are compared to</font>

421
00:19:01,470 --> 00:19:06,780
<font color="#E5E5E5">Delta because we have the same Hamming</font>

422
00:19:04,050 --> 00:19:11,250
weight but the ones and<font color="#CCCCCC"> minus ones are</font>

423
00:19:06,780 --> 00:19:13,649
packed into<font color="#CCCCCC"> half the dimension okay so</font>

424
00:19:11,250 --> 00:19:17,660
essentially what<font color="#E5E5E5"> this means is that if</font>

425
00:19:13,650 --> 00:19:20,310
<font color="#CCCCCC">we repeatedly fold</font><font color="#E5E5E5"> we we are packing</font>

426
00:19:17,660 --> 00:19:24,780
Kappa<font color="#E5E5E5"> ones and minus ones into a smaller</font>

427
00:19:20,310 --> 00:19:27,030
<font color="#E5E5E5">and smaller</font><font color="#CCCCCC"> amount space and if we do</font>

428
00:19:24,780 --> 00:19:29,520
this<font color="#CCCCCC"> eventually</font><font color="#E5E5E5"> these sort of noise</font>

429
00:19:27,030 --> 00:19:31,560
terms will approach a uniform

430
00:19:29,520 --> 00:19:33,600
<font color="#E5E5E5">distribution because even packing a</font>

431
00:19:31,560 --> 00:19:35,210
small number<font color="#E5E5E5"> of ones and</font><font color="#CCCCCC"> minus ones</font><font color="#E5E5E5"> into</font>

432
00:19:33,600 --> 00:19:37,919
a smaller<font color="#E5E5E5"> and smaller amount of space</font>

433
00:19:35,210 --> 00:19:41,040
<font color="#E5E5E5">gives us something</font><font color="#CCCCCC"> that's fairly uniform</font>

434
00:19:37,920 --> 00:19:43,530
looking so if we<font color="#E5E5E5"> divide and conquer so</font>

435
00:19:41,040 --> 00:19:46,230
many times<font color="#CCCCCC"> that this error term</font>

436
00:19:43,530 --> 00:19:47,730
approaches the uniform distribution<font color="#E5E5E5"> then</font>

437
00:19:46,230 --> 00:19:52,260
what we're<font color="#CCCCCC"> asking to do to</font><font color="#E5E5E5"> solve the low</font>

438
00:19:47,730 --> 00:19:54,590
dimensional instance is to<font color="#E5E5E5"> is to decode</font>

439
00:19:52,260 --> 00:19:57,390
and noisy MTT where the noise is

440
00:19:54,590 --> 00:19:59,760
essentially uniform which is clearly an

441
00:19:57,390 --> 00:20:03,030
ill-defined problem because<font color="#CCCCCC"> anything</font><font color="#E5E5E5"> is</font>

442
00:19:59,760 --> 00:20:04,800
a solution<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that problem</font><font color="#E5E5E5"> okay so the</font>

443
00:20:03,030 --> 00:20:06,600
final<font color="#CCCCCC"> note on this slide says that the</font><font color="#E5E5E5"> s</font>

444
00:20:04,800 --> 00:20:09,180
terms say the same size so whenever we

445
00:20:06,600 --> 00:20:11,300
divide and<font color="#E5E5E5"> conquer the s terms or the</font>

446
00:20:09,180 --> 00:20:13,650
thing<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> entity</font><font color="#CCCCCC"> is applied to</font>

447
00:20:11,300 --> 00:20:14,129
stays the same size<font color="#CCCCCC"> so</font><font color="#E5E5E5"> doesn't cause</font><font color="#CCCCCC"> any</font>

448
00:20:13,650 --> 00:20:17,070
problems

449
00:20:14,130 --> 00:20:19,020
<font color="#CCCCCC">I remember</font><font color="#E5E5E5"> this Delta term</font><font color="#CCCCCC"> or the error</font>

450
00:20:17,070 --> 00:20:22,980
term is what really causes us issues

451
00:20:19,020 --> 00:20:23,910
when dividing concrete okay so to

452
00:20:22,980 --> 00:20:27,090
summarize the<font color="#CCCCCC"> divide-and-conquer</font>

453
00:20:23,910 --> 00:20:28,680
component of our attack we start off

454
00:20:27,090 --> 00:20:32,370
<font color="#E5E5E5">with this top level instance which</font><font color="#CCCCCC"> is</font>

455
00:20:28,680 --> 00:20:34,980
our original<font color="#CCCCCC"> noisy MTT we can divide and</font>

456
00:20:32,370 --> 00:20:36,120
<font color="#E5E5E5">conquer this once and then we can divide</font>

457
00:20:34,980 --> 00:20:38,700
<font color="#E5E5E5">and conquer down the positive fold</font>

458
00:20:36,120 --> 00:20:39,750
<font color="#CCCCCC">because as the same form as our original</font>

459
00:20:38,700 --> 00:20:41,850
<font color="#E5E5E5">instance</font>

460
00:20:39,750 --> 00:20:44,670
and so on until<font color="#CCCCCC"> we reach some bottom</font>

461
00:20:41,850 --> 00:20:46,020
level<font color="#E5E5E5"> a pair of instances and it's</font>

462
00:20:44,670 --> 00:20:48,360
important that<font color="#CCCCCC"> these bottom level</font>

463
00:20:46,020 --> 00:20:51,420
instances<font color="#E5E5E5"> represent well-defined</font>

464
00:20:48,360 --> 00:20:53,280
problems so essentially the number<font color="#E5E5E5"> of</font>

465
00:20:51,420 --> 00:20:55,800
<font color="#E5E5E5">times you can divide and conquer depends</font>

466
00:20:53,280 --> 00:20:57,899
on the parameters<font color="#E5E5E5"> you're attacking</font><font color="#CCCCCC"> but</font>

467
00:20:55,800 --> 00:20:59,490
for the purposes of<font color="#E5E5E5"> this talk I'm gonna</font>

468
00:20:57,900 --> 00:21:03,450
we're gonna assume that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> drive in</font>

469
00:20:59,490 --> 00:21:06,060
<font color="#CCCCCC">conquers three times they so the next</font>

470
00:21:03,450 --> 00:21:08,130
<font color="#E5E5E5">component</font><font color="#CCCCCC"> of the attack</font><font color="#E5E5E5"> is how to work a</font>

471
00:21:06,060 --> 00:21:11,550
<font color="#CCCCCC">solution up from the bottom level all</font>

472
00:21:08,130 --> 00:21:14,430
<font color="#CCCCCC">the way</font><font color="#E5E5E5"> up to the top level</font><font color="#CCCCCC"> and in fact</font>

473
00:21:11,550 --> 00:21:17,430
the way our attack works<font color="#E5E5E5"> is that we work</font>

474
00:21:14,430 --> 00:21:19,260
the<font color="#CCCCCC"> solution up one level at time so</font>

475
00:21:17,430 --> 00:21:20,370
what<font color="#E5E5E5"> I'll describe is how to work a</font>

476
00:21:19,260 --> 00:21:22,110
<font color="#CCCCCC">solution up from the n over two</font>

477
00:21:20,370 --> 00:21:25,560
dimensional level to the<font color="#E5E5E5"> N dimensional</font>

478
00:21:22,110 --> 00:21:28,439
level so from the second to top level<font color="#E5E5E5"> to</font>

479
00:21:25,560 --> 00:21:29,940
the<font color="#E5E5E5"> top level</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then working the</font>

480
00:21:28,440 --> 00:21:34,530
<font color="#E5E5E5">solution up the other levels is an</font>

481
00:21:29,940 --> 00:21:37,830
entirely analogous process<font color="#E5E5E5"> okay so if</font>

482
00:21:34,530 --> 00:21:40,379
you recall<font color="#E5E5E5"> the formula for Delta plus</font>

483
00:21:37,830 --> 00:21:41,790
<font color="#E5E5E5">and Delta</font><font color="#CCCCCC"> minus well essentially we're</font>

484
00:21:40,380 --> 00:21:44,340
just adding<font color="#E5E5E5"> the left half of Delta and</font>

485
00:21:41,790 --> 00:21:45,750
the right half of Delta and once again

486
00:21:44,340 --> 00:21:47,610
<font color="#CCCCCC">making this assumption that we have</font>

487
00:21:45,750 --> 00:21:52,140
Kappa bit flips<font color="#E5E5E5"> where</font><font color="#CCCCCC"> Khafre</font><font color="#E5E5E5"> is much</font>

488
00:21:47,610 --> 00:21:56,100
less than<font color="#CCCCCC"> n if we</font><font color="#E5E5E5"> expand Delta plus in</font>

489
00:21:52,140 --> 00:21:58,230
the<font color="#CCCCCC"> bsd</font><font color="#E5E5E5"> are then the ones and minus ones</font>

490
00:21:56,100 --> 00:22:01,350
in that<font color="#E5E5E5"> either come from Delta L or</font>

491
00:21:58,230 --> 00:22:03,660
Delta R<font color="#E5E5E5"> so if we're given</font><font color="#CCCCCC"> a solution</font><font color="#E5E5E5"> to</font>

492
00:22:01,350 --> 00:22:08,550
Delta plus we can expand it in<font color="#E5E5E5"> its</font><font color="#CCCCCC"> PSCR</font>

493
00:22:03,660 --> 00:22:10,440
<font color="#E5E5E5">and then guess which ones and minus ones</font>

494
00:22:08,550 --> 00:22:11,790
come<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> left half of</font><font color="#CCCCCC"> Delta and</font>

495
00:22:10,440 --> 00:22:15,210
which come from<font color="#E5E5E5"> the right half of</font><font color="#CCCCCC"> Delta</font>

496
00:22:11,790 --> 00:22:18,600
and what this<font color="#E5E5E5"> ends up meaning is that if</font>

497
00:22:15,210 --> 00:22:20,820
<font color="#CCCCCC">we have Kappa bit flips we require</font><font color="#E5E5E5"> our</font>

498
00:22:18,600 --> 00:22:25,290
<font color="#E5E5E5">most two to the Kappa guesses to work a</font>

499
00:22:20,820 --> 00:22:27,120
solution<font color="#E5E5E5"> up one level</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> another</font>

500
00:22:25,290 --> 00:22:31,680
thing<font color="#CCCCCC"> is that whenever we</font><font color="#E5E5E5"> make a guess</font>

501
00:22:27,120 --> 00:22:33,060
for for working the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> solution up we</font>

502
00:22:31,680 --> 00:22:35,100
can actually<font color="#CCCCCC"> verify this guess by</font>

503
00:22:33,060 --> 00:22:37,710
plugging<font color="#E5E5E5"> into the sibling instance or</font>

504
00:22:35,100 --> 00:22:40,530
<font color="#E5E5E5">the parent instance so each time you</font>

505
00:22:37,710 --> 00:22:42,300
make<font color="#E5E5E5"> a guess we can verify it</font><font color="#CCCCCC"> and what</font>

506
00:22:40,530 --> 00:22:45,300
this<font color="#CCCCCC"> means is if we want to</font><font color="#E5E5E5"> work up K</font>

507
00:22:42,300 --> 00:22:48,360
levels<font color="#E5E5E5"> then we require at most</font><font color="#CCCCCC"> k times</font>

508
00:22:45,300 --> 00:22:50,010
<font color="#CCCCCC">two to</font><font color="#E5E5E5"> the Kappa guesses okay so of</font>

509
00:22:48,360 --> 00:22:52,080
course there's a small<font color="#E5E5E5"> complication when</font>

510
00:22:50,010 --> 00:22:53,340
the bit flips<font color="#E5E5E5"> in Delta L and Delta</font><font color="#CCCCCC"> R</font>

511
00:22:52,080 --> 00:22:55,770
collide but

512
00:22:53,340 --> 00:22:57,720
for the purposes of<font color="#E5E5E5"> this talk I'm</font><font color="#CCCCCC"> gonna</font>

513
00:22:55,770 --> 00:23:02,010
ignore<font color="#E5E5E5"> it but we do take this into</font>

514
00:22:57,720 --> 00:23:03,720
account<font color="#E5E5E5"> and paper okay so what we have</font>

515
00:23:02,010 --> 00:23:05,310
so far<font color="#CCCCCC"> is that we built this</font><font color="#E5E5E5"> divide and</font>

516
00:23:03,720 --> 00:23:08,400
<font color="#CCCCCC">conquer tree using the structure of the</font>

517
00:23:05,310 --> 00:23:09,899
entity and if we have an Oracle<font color="#CCCCCC"> that</font>

518
00:23:08,400 --> 00:23:12,470
solves one<font color="#CCCCCC"> of these bottom level</font>

519
00:23:09,900 --> 00:23:15,440
instances we know by guessing how to

520
00:23:12,470 --> 00:23:17,970
work work the solution<font color="#CCCCCC"> up one level and</font>

521
00:23:15,440 --> 00:23:20,220
continuing work it<font color="#E5E5E5"> up one level at time</font>

522
00:23:17,970 --> 00:23:24,300
until we reach the solution<font color="#E5E5E5"> to the top</font>

523
00:23:20,220 --> 00:23:27,060
level instance the<font color="#E5E5E5"> question that</font><font color="#CCCCCC"> remains</font>

524
00:23:24,300 --> 00:23:30,450
is<font color="#E5E5E5"> how do we</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> solve this bottom</font>

525
00:23:27,060 --> 00:23:33,389
level instance<font color="#E5E5E5"> and a good starting point</font>

526
00:23:30,450 --> 00:23:35,820
<font color="#E5E5E5">is</font><font color="#CCCCCC"> to compare our instance to an</font><font color="#E5E5E5"> LW</font>

527
00:23:33,390 --> 00:23:37,260
instance so remember we're solving<font color="#CCCCCC"> a</font>

528
00:23:35,820 --> 00:23:39,240
bottom level instance here so the

529
00:23:37,260 --> 00:23:43,890
dimension of this<font color="#CCCCCC"> NTT</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to be</font>

530
00:23:39,240 --> 00:23:46,740
small and actually<font color="#CCCCCC"> in order to compare</font>

531
00:23:43,890 --> 00:23:48,750
our instance in<font color="#E5E5E5"> LW instance it's quite</font>

532
00:23:46,740 --> 00:23:51,420
<font color="#CCCCCC">useful to</font><font color="#E5E5E5"> take an inverse</font><font color="#CCCCCC"> NTT on our</font>

533
00:23:48,750 --> 00:23:54,330
bottom level<font color="#E5E5E5"> of instance so essentially</font>

534
00:23:51,420 --> 00:23:57,120
we transformed<font color="#E5E5E5"> the problem of decoding</font>

535
00:23:54,330 --> 00:24:01,169
<font color="#E5E5E5">and noisy</font><font color="#CCCCCC"> NTT into a</font><font color="#E5E5E5"> problem of decoding</font>

536
00:23:57,120 --> 00:24:02,399
<font color="#E5E5E5">a noisy inverse entity now so in this</font>

537
00:24:01,170 --> 00:24:06,390
section of<font color="#E5E5E5"> the talk we're going to be</font>

538
00:24:02,400 --> 00:24:07,980
decoding a noisy inverse<font color="#E5E5E5"> entity</font><font color="#CCCCCC"> okay so</font>

539
00:24:06,390 --> 00:24:15,960
here's a<font color="#CCCCCC"> table</font><font color="#E5E5E5"> of comparisons between</font>

540
00:24:07,980 --> 00:24:17,610
<font color="#E5E5E5">our instance and standard LW instance</font><font color="#CCCCCC"> so</font>

541
00:24:15,960 --> 00:24:19,560
the main comparison that<font color="#CCCCCC"> I wanna</font>

542
00:24:17,610 --> 00:24:21,719
<font color="#CCCCCC">highlight here is that is that the last</font>

543
00:24:19,560 --> 00:24:22,889
one<font color="#CCCCCC"> so the fact that Delta does not have</font>

544
00:24:21,720 --> 00:24:26,250
a small Euclidean norm

545
00:24:22,890 --> 00:24:28,500
however the analogous term in in<font color="#CCCCCC"> lwe</font>

546
00:24:26,250 --> 00:24:32,370
does have a small<font color="#CCCCCC"> you clean Euclidean</font>

547
00:24:28,500 --> 00:24:35,130
norm<font color="#E5E5E5"> and this is one</font><font color="#CCCCCC"> of the main</font>

548
00:24:32,370 --> 00:24:39,270
<font color="#E5E5E5">difficulties in trying to solve our</font>

549
00:24:35,130 --> 00:24:41,490
instance using<font color="#E5E5E5"> lwe techniques however we</font>

550
00:24:39,270 --> 00:24:43,620
can<font color="#E5E5E5"> begin by looking at like how to</font>

551
00:24:41,490 --> 00:24:45,810
solve this using LW techniques and see

552
00:24:43,620 --> 00:24:47,340
how far<font color="#E5E5E5"> we get</font><font color="#CCCCCC"> and we'll do that</font><font color="#E5E5E5"> by</font>

553
00:24:45,810 --> 00:24:48,169
looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the bounded distance decoding</font>

554
00:24:47,340 --> 00:24:51,120
<font color="#E5E5E5">problem</font>

555
00:24:48,170 --> 00:24:53,220
<font color="#E5E5E5">okay so briefly what</font><font color="#CCCCCC"> is this bounded</font>

556
00:24:51,120 --> 00:24:55,520
distance decoding problem<font color="#CCCCCC"> or BDD problem</font>

557
00:24:53,220 --> 00:24:58,080
<font color="#CCCCCC">well essentially you're given a lattice</font>

558
00:24:55,520 --> 00:25:00,440
<font color="#CCCCCC">and the input</font><font color="#E5E5E5"> to the problem is a target</font>

559
00:24:58,080 --> 00:25:02,370
vector<font color="#E5E5E5"> T along with the radius R and you</font>

560
00:25:00,440 --> 00:25:04,800
<font color="#CCCCCC">promise</font><font color="#E5E5E5"> that the distance from this</font>

561
00:25:02,370 --> 00:25:07,139
<font color="#CCCCCC">target vector</font><font color="#E5E5E5"> to the lattice is that</font>

562
00:25:04,800 --> 00:25:08,520
most<font color="#E5E5E5"> are</font>

563
00:25:07,140 --> 00:25:10,080
the answer to the problem<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the</font>

564
00:25:08,520 --> 00:25:14,610
<font color="#E5E5E5">solution to the problem is the closest</font>

565
00:25:10,080 --> 00:25:16,919
lattice point to<font color="#E5E5E5"> the target vector okay</font>

566
00:25:14,610 --> 00:25:20,240
so how do<font color="#E5E5E5"> we embed our instance into</font>

567
00:25:16,920 --> 00:25:22,260
<font color="#E5E5E5">some BDD problem the kind</font><font color="#CCCCCC"> of LW anyway</font>

568
00:25:20,240 --> 00:25:23,430
<font color="#E5E5E5">well the first thing to note is that</font>

569
00:25:22,260 --> 00:25:25,230
we'll<font color="#CCCCCC"> be using</font>

570
00:25:23,430 --> 00:25:27,360
<font color="#E5E5E5">we'll be embedding our n prime</font>

571
00:25:25,230 --> 00:25:29,730
dimensional instance where<font color="#E5E5E5"> n prime is</font>

572
00:25:27,360 --> 00:25:33,540
you can<font color="#E5E5E5"> think of it as being 32</font><font color="#CCCCCC"> as an</font>

573
00:25:29,730 --> 00:25:36,150
example<font color="#E5E5E5"> into a 2 times n prime BDD</font>

574
00:25:33,540 --> 00:25:37,950
instance and the way this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> usually</font>

575
00:25:36,150 --> 00:25:39,600
done is<font color="#E5E5E5"> that we define the target</font><font color="#CCCCCC"> vector</font>

576
00:25:37,950 --> 00:25:41,610
where the first n prime coordinates are

577
00:25:39,600 --> 00:25:44,969
0 and the second n prime coordinates are

578
00:25:41,610 --> 00:25:47,820
given<font color="#E5E5E5"> by are noisy inverse</font><font color="#CCCCCC"> NT T then we</font>

579
00:25:44,970 --> 00:25:49,770
construct<font color="#CCCCCC"> this lattice that satisfies</font>

580
00:25:47,820 --> 00:25:51,570
the linear relation that<font color="#E5E5E5"> the entity</font>

581
00:25:49,770 --> 00:25:53,040
inverse on the first n prime coordinates

582
00:25:51,570 --> 00:25:56,939
added to the second n prime coordinates

583
00:25:53,040 --> 00:25:59,909
gives you 0 modulo Q and finally use a

584
00:25:56,940 --> 00:26:02,600
BDD solver<font color="#E5E5E5"> some BDD solver to</font><font color="#CCCCCC"> find the</font>

585
00:25:59,910 --> 00:26:05,730
closest vector<font color="#E5E5E5"> in in the lattice and</font>

586
00:26:02,600 --> 00:26:07,919
<font color="#E5E5E5">hope that the offset vector is Delta s</font>

587
00:26:05,730 --> 00:26:12,210
which<font color="#E5E5E5"> is our</font><font color="#CCCCCC"> solution to the bottom</font>

588
00:26:07,920 --> 00:26:16,020
level<font color="#E5E5E5"> instance</font><font color="#CCCCCC"> ok so why does this work</font>

589
00:26:12,210 --> 00:26:18,600
<font color="#E5E5E5">well we know that Delta concatenated</font>

590
00:26:16,020 --> 00:26:21,360
with the -<font color="#CCCCCC"> NT T inverse</font><font color="#E5E5E5"> of Delta is a</font>

591
00:26:18,600 --> 00:26:23,219
lattice point<font color="#CCCCCC"> and the offset from</font><font color="#E5E5E5"> the</font>

592
00:26:21,360 --> 00:26:27,360
<font color="#CCCCCC">target to this lattice point is our</font>

593
00:26:23,220 --> 00:26:29,610
solution Delta s so a perfect BDD solver

594
00:26:27,360 --> 00:26:32,429
will actually return this lattice point

595
00:26:29,610 --> 00:26:35,129
if it's the closest one to<font color="#CCCCCC"> the target</font>

596
00:26:32,430 --> 00:26:37,920
and essentially we can<font color="#CCCCCC"> guarantee that</font>

597
00:26:35,130 --> 00:26:39,960
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is the case if the norm of Delta</font><font color="#E5E5E5"> s</font>

598
00:26:37,920 --> 00:26:41,850
or<font color="#E5E5E5"> the norm</font><font color="#CCCCCC"> of our light target offset</font>

599
00:26:39,960 --> 00:26:44,940
vector is less than<font color="#E5E5E5"> half</font><font color="#CCCCCC"> the length of</font>

600
00:26:41,850 --> 00:26:49,469
<font color="#CCCCCC">the shortest vector in</font><font color="#E5E5E5"> lambda in the</font>

601
00:26:44,940 --> 00:26:51,810
lattice<font color="#CCCCCC"> ok so to emphasize the point</font><font color="#E5E5E5"> our</font>

602
00:26:49,470 --> 00:26:55,820
main<font color="#CCCCCC"> source of success condition that</font>

603
00:26:51,810 --> 00:26:58,409
we're aiming to satisfy is to

604
00:26:55,820 --> 00:27:01,350
essentially<font color="#E5E5E5"> given</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> perfect</font><font color="#CCCCCC"> BDD solver</font>

605
00:26:58,410 --> 00:27:03,720
we want to make sure<font color="#E5E5E5"> the our target</font>

606
00:27:01,350 --> 00:27:06,870
offset which happens to<font color="#CCCCCC"> be Delta s here</font>

607
00:27:03,720 --> 00:27:08,310
so<font color="#E5E5E5"> our solution has a norm that</font><font color="#CCCCCC"> is less</font>

608
00:27:06,870 --> 00:27:11,040
<font color="#CCCCCC">than</font><font color="#E5E5E5"> half the length of the shortest</font>

609
00:27:08,310 --> 00:27:13,649
<font color="#E5E5E5">vector in lambda say 1 Delta s to be</font>

610
00:27:11,040 --> 00:27:15,240
short however<font color="#E5E5E5"> there's an immediate</font>

611
00:27:13,650 --> 00:27:17,910
problem here and<font color="#E5E5E5"> it's that Delta s is</font>

612
00:27:15,240 --> 00:27:19,980
not sure because<font color="#E5E5E5"> if you look at</font><font color="#CCCCCC"> Delta as</font>

613
00:27:17,910 --> 00:27:21,030
an integer vector then the components of

614
00:27:19,980 --> 00:27:24,539
it<font color="#E5E5E5"> aren't small</font>

615
00:27:21,030 --> 00:27:26,340
even though it<font color="#E5E5E5"> well the main reason for</font>

616
00:27:24,539 --> 00:27:31,289
this is<font color="#CCCCCC"> because it corresponds</font><font color="#E5E5E5"> to bit</font>

617
00:27:26,340 --> 00:27:32,970
flips<font color="#CCCCCC"> okay so a first step in trying to</font>

618
00:27:31,289 --> 00:27:35,490
like shorten this<font color="#E5E5E5"> target offset vector</font>

619
00:27:32,970 --> 00:27:38,100
<font color="#E5E5E5">at Delta s is to consider a base to</font><font color="#CCCCCC"> tell</font>

620
00:27:35,490 --> 00:27:41,130
SDR<font color="#E5E5E5"> adulter instead of Delta in</font><font color="#CCCCCC"> the</font>

621
00:27:38,100 --> 00:27:42,928
offset in our target<font color="#E5E5E5"> officer and in</font>

622
00:27:41,130 --> 00:27:47,039
order to<font color="#E5E5E5"> do this we actually fixed</font><font color="#CCCCCC"> L</font>

623
00:27:42,929 --> 00:27:48,600
<font color="#E5E5E5">equals the log of</font><font color="#CCCCCC"> riku we</font><font color="#E5E5E5"> redefine the</font>

624
00:27:47,039 --> 00:27:49,770
lattice by introducing this tensor

625
00:27:48,600 --> 00:27:52,110
<font color="#E5E5E5">product so I'm not going to go into any</font>

626
00:27:49,770 --> 00:27:54,299
<font color="#E5E5E5">of the details reeling here and we</font>

627
00:27:52,110 --> 00:27:56,158
update<font color="#E5E5E5"> the target</font><font color="#CCCCCC"> vector and if you go</font>

628
00:27:54,299 --> 00:27:58,440
through<font color="#E5E5E5"> the same analysis using these</font>

629
00:27:56,159 --> 00:28:01,230
updated<font color="#E5E5E5"> sort of target vectors and</font>

630
00:27:58,440 --> 00:28:03,240
lattices<font color="#CCCCCC"> the offset vector that we're</font>

631
00:28:01,230 --> 00:28:07,020
aiming to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> short</font><font color="#E5E5E5"> is now the base to</font>

632
00:28:03,240 --> 00:28:09,240
that LSD<font color="#CCCCCC"> are</font><font color="#E5E5E5"> a delta along with this and</font>

633
00:28:07,020 --> 00:28:11,820
<font color="#E5E5E5">the interesting thing</font><font color="#CCCCCC"> is each component</font>

634
00:28:09,240 --> 00:28:14,580
of<font color="#CCCCCC"> the base to that LSD</font><font color="#E5E5E5"> art of Delta has</font>

635
00:28:11,820 --> 00:28:17,070
a size at most root<font color="#CCCCCC"> Q as an</font><font color="#E5E5E5"> absolute</font>

636
00:28:14,580 --> 00:28:20,370
<font color="#CCCCCC">value of the most root Q because we</font>

637
00:28:17,070 --> 00:28:24,870
fixed<font color="#E5E5E5"> this particular L where as the</font>

638
00:28:20,370 --> 00:28:30,539
<font color="#E5E5E5">absolute</font><font color="#CCCCCC"> value of the size of the</font>

639
00:28:24,870 --> 00:28:35,070
original Delta has had norm around<font color="#E5E5E5"> Q so</font>

640
00:28:30,539 --> 00:28:36,809
<font color="#CCCCCC">that's a maximal norm of around Q so</font>

641
00:28:35,070 --> 00:28:39,450
essentially this base<font color="#CCCCCC"> tooth or LSD</font><font color="#E5E5E5"> our</font>

642
00:28:36,809 --> 00:28:42,408
Delta is a shorter vector than Delta is

643
00:28:39,450 --> 00:28:44,549
even though it's in<font color="#E5E5E5"> the high dimension</font>

644
00:28:42,409 --> 00:28:47,730
<font color="#E5E5E5">so there are two main</font><font color="#CCCCCC"> things to</font><font color="#E5E5E5"> note</font>

645
00:28:44,549 --> 00:28:49,740
about<font color="#E5E5E5"> this technique the lattice that</font>

646
00:28:47,730 --> 00:28:51,750
<font color="#E5E5E5">were actually</font><font color="#CCCCCC"> running VDD on or try</font><font color="#E5E5E5"> and</font>

647
00:28:49,740 --> 00:28:53,640
solve<font color="#CCCCCC"> VDD on is actually higher than</font><font color="#E5E5E5"> it</font>

648
00:28:51,750 --> 00:28:56,220
<font color="#E5E5E5">was before</font><font color="#CCCCCC"> has a high dimension than it</font>

649
00:28:53,640 --> 00:28:58,799
was than it had before so the increase

650
00:28:56,220 --> 00:29:00,870
is from<font color="#E5E5E5"> 2 n prime which is</font><font color="#CCCCCC"> the dimension</font>

651
00:28:58,799 --> 00:29:04,049
<font color="#E5E5E5">of the old lattice to 3 n prime which</font><font color="#CCCCCC"> is</font>

652
00:29:00,870 --> 00:29:05,250
<font color="#CCCCCC">the dimension</font><font color="#E5E5E5"> of this lattice and using</font>

653
00:29:04,049 --> 00:29:08,490
this tensor product we actually

654
00:29:05,250 --> 00:29:10,980
<font color="#CCCCCC">introduce a new class of vectors for</font>

655
00:29:08,490 --> 00:29:15,870
example one vector in this<font color="#E5E5E5"> class is 2 to</font>

656
00:29:10,980 --> 00:29:19,440
<font color="#E5E5E5">the L minus 1 followed</font><font color="#CCCCCC"> by zeros and this</font>

657
00:29:15,870 --> 00:29:23,129
vector<font color="#E5E5E5"> this class of vectors well they</font>

658
00:29:19,440 --> 00:29:25,650
all have<font color="#E5E5E5"> a norm of roughly root Q so</font>

659
00:29:23,130 --> 00:29:28,440
<font color="#E5E5E5">essentially our offset vector is now the</font>

660
00:29:25,650 --> 00:29:31,919
base<font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> LSD our Delta along with this</font>

661
00:29:28,440 --> 00:29:34,169
but<font color="#E5E5E5"> our lattice now contains shortish</font>

662
00:29:31,919 --> 00:29:34,870
vectors of length from Q so we actually

663
00:29:34,169 --> 00:29:37,660
have an itchy

664
00:29:34,870 --> 00:29:40,059
<font color="#CCCCCC">our aim yet our offset isn't shorter</font>

665
00:29:37,660 --> 00:29:43,780
<font color="#E5E5E5">than all of the</font><font color="#CCCCCC"> latus</font><font color="#E5E5E5"> all of the vectors</font>

666
00:29:40,059 --> 00:29:46,570
in our lattice<font color="#E5E5E5"> okay so in order to</font>

667
00:29:43,780 --> 00:29:48,820
shorten<font color="#E5E5E5"> this target offset further what</font>

668
00:29:46,570 --> 00:29:53,080
we end<font color="#E5E5E5"> up doing is we deploy this kind</font>

669
00:29:48,820 --> 00:29:55,090
of hybrid<font color="#E5E5E5"> guessing approach where we</font>

670
00:29:53,080 --> 00:29:57,159
basically<font color="#E5E5E5"> want to shorten the offset</font>

671
00:29:55,090 --> 00:30:00,820
vector of base<font color="#CCCCCC"> two through alavesa via</font>

672
00:29:57,160 --> 00:30:02,440
the base<font color="#E5E5E5"> two to</font><font color="#CCCCCC"> the LSD our delta and in</font>

673
00:30:00,820 --> 00:30:05,950
order<font color="#CCCCCC"> to do this we simply guess the</font>

674
00:30:02,440 --> 00:30:10,059
upper bits of this of each symbol<font color="#E5E5E5"> in the</font>

675
00:30:05,950 --> 00:30:12,910
base<font color="#CCCCCC"> two</font><font color="#E5E5E5"> to LSD</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> Delta so fixing our</font>

676
00:30:10,059 --> 00:30:16,149
particular<font color="#E5E5E5"> L we have that each component</font>

677
00:30:12,910 --> 00:30:20,320
of<font color="#E5E5E5"> Delta when written in the base</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> to</font>

678
00:30:16,150 --> 00:30:25,030
the LSD<font color="#E5E5E5"> R has</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two integers attached</font>

679
00:30:20,320 --> 00:30:27,550
<font color="#E5E5E5">to it and what we end up doing is we</font>

680
00:30:25,030 --> 00:30:29,260
essentially split<font color="#E5E5E5"> these integers into</font>

681
00:30:27,550 --> 00:30:31,840
the upper bits<font color="#CCCCCC"> so these are the red</font>

682
00:30:29,260 --> 00:30:35,860
blocks<font color="#E5E5E5"> in this diagram and the lower</font>

683
00:30:31,840 --> 00:30:38,320
bits which<font color="#E5E5E5"> are the yellow blocks so the</font>

684
00:30:35,860 --> 00:30:40,030
idea is that<font color="#E5E5E5"> we guess the</font><font color="#CCCCCC"> Alpha</font><font color="#E5E5E5"> bits so</font>

685
00:30:38,320 --> 00:30:42,669
<font color="#E5E5E5">we just the red blocks we update our</font>

686
00:30:40,030 --> 00:30:47,320
target vector<font color="#E5E5E5"> and now our offset vector</font>

687
00:30:42,670 --> 00:30:48,910
is in terms of the yellow bits so

688
00:30:47,320 --> 00:30:50,379
essentially we shortened our offset

689
00:30:48,910 --> 00:30:53,650
vector without<font color="#E5E5E5"> changing the lattice or</font>

690
00:30:50,380 --> 00:30:55,960
anything like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> okay so it</font><font color="#CCCCCC"> turns out</font>

691
00:30:53,650 --> 00:31:00,580
<font color="#E5E5E5">that</font><font color="#CCCCCC"> this strategy actually does solve</font>

692
00:30:55,960 --> 00:31:02,950
the problem<font color="#E5E5E5"> more or less</font><font color="#CCCCCC"> ok so</font><font color="#E5E5E5"> all of</font>

693
00:31:00,580 --> 00:31:05,800
this was kind of described in<font color="#E5E5E5"> terms of</font>

694
00:31:02,950 --> 00:31:08,800
having a perfect<font color="#E5E5E5"> BDD</font><font color="#CCCCCC"> salt</font><font color="#E5E5E5"> but in</font>

695
00:31:05,800 --> 00:31:10,960
<font color="#E5E5E5">practice the BDD problem is an extremely</font>

696
00:31:08,800 --> 00:31:14,620
hard problem to solve for uniform

697
00:31:10,960 --> 00:31:16,750
lattices our least however<font color="#E5E5E5"> our lattices</font>

698
00:31:14,620 --> 00:31:18,129
have<font color="#CCCCCC"> some structure attached to them</font>

699
00:31:16,750 --> 00:31:22,090
because they use an entity in the

700
00:31:18,130 --> 00:31:25,600
definition in<font color="#CCCCCC"> the definition</font><font color="#E5E5E5"> and as our</font>

701
00:31:22,090 --> 00:31:28,360
experiments showed our lattices stray

702
00:31:25,600 --> 00:31:31,840
far away from what the theory of uniform

703
00:31:28,360 --> 00:31:35,169
<font color="#CCCCCC">lasts is</font><font color="#E5E5E5"> kind of tells us so as evidence</font>

704
00:31:31,840 --> 00:31:37,510
<font color="#E5E5E5">of this we</font><font color="#CCCCCC"> actually obtained</font><font color="#E5E5E5"> well we had</font>

705
00:31:35,170 --> 00:31:40,390
a<font color="#CCCCCC"> 96 dimensional lattice and we obtained</font>

706
00:31:37,510 --> 00:31:43,660
that<font color="#E5E5E5"> because</font><font color="#CCCCCC"> er</font><font color="#E5E5E5"> 90 reduced basis of this</font>

707
00:31:40,390 --> 00:31:46,150
lattice then what we<font color="#E5E5E5"> did</font><font color="#CCCCCC"> was to</font>

708
00:31:43,660 --> 00:31:48,250
investigate<font color="#E5E5E5"> this kind of non uniformity</font>

709
00:31:46,150 --> 00:31:48,710
of<font color="#E5E5E5"> our lattice we plotted the log length</font>

710
00:31:48,250 --> 00:31:50,270
of

711
00:31:48,710 --> 00:31:53,419
<font color="#CCCCCC">for the gram-schmidt vectors against the</font>

712
00:31:50,270 --> 00:31:55,070
basis vector labels and what<font color="#E5E5E5"> you'd</font>

713
00:31:53,419 --> 00:31:57,860
<font color="#CCCCCC">expect for a uniform lattice is this</font>

714
00:31:55,070 --> 00:32:00,860
blue<font color="#E5E5E5"> line however for our lattice we</font>

715
00:31:57,860 --> 00:32:04,219
observe the red line<font color="#E5E5E5"> and clearly this</font>

716
00:32:00,860 --> 00:32:07,299
well the difference between the red line

717
00:32:04,220 --> 00:32:09,200
and<font color="#E5E5E5"> the blue line is</font><font color="#CCCCCC"> quite large</font><font color="#E5E5E5"> and</font>

718
00:32:07,299 --> 00:32:10,760
essentially what this<font color="#E5E5E5"> means</font><font color="#CCCCCC"> is that we</font>

719
00:32:09,200 --> 00:32:13,460
can't<font color="#E5E5E5"> really rely</font><font color="#CCCCCC"> on the standard</font>

720
00:32:10,760 --> 00:32:16,039
lattice theory to<font color="#CCCCCC"> analyze the</font>

721
00:32:13,460 --> 00:32:19,580
<font color="#CCCCCC">performance of</font><font color="#E5E5E5"> our attack so instead we</font>

722
00:32:16,039 --> 00:32:21,830
actually run these<font color="#CCCCCC"> BD run or create a</font>

723
00:32:19,580 --> 00:32:25,520
BDD solver in order<font color="#E5E5E5"> to understand how</font>

724
00:32:21,830 --> 00:32:28,399
<font color="#CCCCCC">our attack performs</font><font color="#E5E5E5"> and we write them we</font>

725
00:32:25,520 --> 00:32:33,668
use the BDD solver<font color="#CCCCCC"> while</font><font color="#E5E5E5"> we build</font><font color="#CCCCCC"> a BDD</font>

726
00:32:28,399 --> 00:32:35,959
solver by using BDD enumeration<font color="#E5E5E5"> okay so</font>

727
00:32:33,669 --> 00:32:38,149
yeah that concludes the description of

728
00:32:35,960 --> 00:32:39,380
the attack<font color="#E5E5E5"> now what is the</font><font color="#CCCCCC"> overall</font>

729
00:32:38,149 --> 00:32:42,110
complexity<font color="#E5E5E5"> of the attack</font>

730
00:32:39,380 --> 00:32:48,649
well<font color="#CCCCCC"> the steps of the attack kind of</font>

731
00:32:42,110 --> 00:32:50,719
divide into these natural components so

732
00:32:48,649 --> 00:32:53,090
first of all divide and conquer<font color="#E5E5E5"> just</font>

733
00:32:50,720 --> 00:32:54,890
asks us to<font color="#E5E5E5"> add a few integers together</font>

734
00:32:53,090 --> 00:32:59,990
<font color="#E5E5E5">so the complexity of this</font><font color="#CCCCCC"> stage</font><font color="#E5E5E5"> is</font>

735
00:32:54,890 --> 00:33:01,850
fairly<font color="#E5E5E5"> trivial</font><font color="#CCCCCC"> and we actually had to</font><font color="#E5E5E5"> we</font>

736
00:32:59,990 --> 00:33:04,880
also have to reduce a basis in order<font color="#CCCCCC"> to</font>

737
00:33:01,850 --> 00:33:08,330
perform<font color="#E5E5E5"> the deed enumeration however the</font>

738
00:33:04,880 --> 00:33:11,029
lattice basis<font color="#E5E5E5"> is kind of fixed</font><font color="#CCCCCC"> overall</font>

739
00:33:08,330 --> 00:33:13,460
<font color="#E5E5E5">called bit instances when attacking a</font>

740
00:33:11,029 --> 00:33:16,130
single scheme so this is essentially

741
00:33:13,460 --> 00:33:18,169
done<font color="#E5E5E5"> once and for all because</font><font color="#CCCCCC"> if you</font>

742
00:33:16,130 --> 00:33:24,940
<font color="#CCCCCC">notice we kind of solve BDD on the same</font>

743
00:33:18,169 --> 00:33:28,340
lattice multiple times the next<font color="#E5E5E5"> thing is</font>

744
00:33:24,940 --> 00:33:30,230
this BDD enumeration phase and this

745
00:33:28,340 --> 00:33:32,779
actually ends<font color="#CCCCCC"> up dominating</font><font color="#E5E5E5"> the</font>

746
00:33:30,230 --> 00:33:35,630
complexity of our attack<font color="#CCCCCC"> and in</font>

747
00:33:32,779 --> 00:33:37,760
particular this is made worse<font color="#E5E5E5"> because if</font>

748
00:33:35,630 --> 00:33:39,470
you remember<font color="#E5E5E5"> in order to shorten our</font>

749
00:33:37,760 --> 00:33:41,779
target offset vector we had to make<font color="#CCCCCC"> some</font>

750
00:33:39,470 --> 00:33:44,510
guesses<font color="#CCCCCC"> of the top bits</font><font color="#E5E5E5"> and essentially</font>

751
00:33:41,779 --> 00:33:46,850
once we make a guess of<font color="#E5E5E5"> the top bits we</font>

752
00:33:44,510 --> 00:33:50,029
have<font color="#CCCCCC"> to run a BDD enumeration for each</font>

753
00:33:46,850 --> 00:33:53,449
guess so in our attack we don't run one

754
00:33:50,029 --> 00:33:54,140
BDD enumeration<font color="#E5E5E5"> we run many many BDD</font>

755
00:33:53,450 --> 00:33:56,029
enumerations

756
00:33:54,140 --> 00:33:58,250
so this is the phase that<font color="#E5E5E5"> actually</font>

757
00:33:56,029 --> 00:33:59,960
dominates<font color="#E5E5E5"> and finally working with</font>

758
00:33:58,250 --> 00:34:02,540
solution up<font color="#CCCCCC"> to tree although it</font><font color="#E5E5E5"> costs</font><font color="#CCCCCC"> 2</font>

759
00:33:59,960 --> 00:34:06,350
to the<font color="#CCCCCC"> kappa bit flip 2 to the</font><font color="#E5E5E5"> kafir</font>

760
00:34:02,540 --> 00:34:08,179
of operations<font color="#E5E5E5"> roughly speaking</font><font color="#CCCCCC"> this</font>

761
00:34:06,350 --> 00:34:09,889
<font color="#E5E5E5">actually doesn't</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> up dominating our</font>

762
00:34:08,179 --> 00:34:12,260
attack in terms of what we<font color="#E5E5E5"> found in our</font>

763
00:34:09,889 --> 00:34:17,029
experiments<font color="#E5E5E5"> at least not for the</font><font color="#CCCCCC"> cappers</font>

764
00:34:12,260 --> 00:34:20,000
that we<font color="#E5E5E5"> analyzed</font><font color="#CCCCCC"> okay so here are our</font>

765
00:34:17,030 --> 00:34:22,669
<font color="#CCCCCC">experimental results so we got these</font>

766
00:34:20,000 --> 00:34:24,320
<font color="#E5E5E5">results by producing 200 cold blue</font>

767
00:34:22,668 --> 00:34:27,889
instances for<font color="#E5E5E5"> the Khyber and</font><font color="#CCCCCC"> New Hope</font>

768
00:34:24,320 --> 00:34:29,810
parameters we then<font color="#E5E5E5"> varied our attack</font>

769
00:34:27,889 --> 00:34:34,040
parameters the various sort of attack

770
00:34:29,810 --> 00:34:35,540
parameters<font color="#CCCCCC"> and ran experiments</font><font color="#E5E5E5"> using the</font>

771
00:34:34,040 --> 00:34:37,429
different configurations of attack

772
00:34:35,540 --> 00:34:42,580
parameters and these are essentially<font color="#CCCCCC"> are</font>

773
00:34:37,429 --> 00:34:45,080
our best<font color="#E5E5E5"> figures in addition to running</font>

774
00:34:42,580 --> 00:34:47,029
<font color="#E5E5E5">experiments on our</font><font color="#CCCCCC"> ntt attack we</font><font color="#E5E5E5"> also</font>

775
00:34:45,080 --> 00:34:49,219
estimated how long we would expect<font color="#E5E5E5"> a</font>

776
00:34:47,030 --> 00:34:51,050
naive cold boot attack to work if the

777
00:34:49,219 --> 00:34:53,989
<font color="#CCCCCC">entity was</font><font color="#E5E5E5"> not used to store the secret</font>

778
00:34:51,050 --> 00:34:56,900
key<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is given by</font><font color="#CCCCCC"> the last column</font>

779
00:34:53,989 --> 00:34:58,640
in this table<font color="#CCCCCC"> ok so the</font><font color="#E5E5E5"> first thing</font>

780
00:34:56,900 --> 00:35:00,920
you'll<font color="#E5E5E5"> notice is</font><font color="#CCCCCC"> that for Kaiba we</font>

781
00:34:58,640 --> 00:35:05,089
actually<font color="#E5E5E5"> analyzed much larger row knots</font>

782
00:35:00,920 --> 00:35:08,360
<font color="#E5E5E5">than we did for</font><font color="#CCCCCC"> New Hope so for Kaiba</font>

783
00:35:05,090 --> 00:35:10,460
Rho naught is roughly<font color="#CCCCCC"> well we went up to</font>

784
00:35:08,360 --> 00:35:12,380
<font color="#E5E5E5">roughly a few percent whereas for New</font>

785
00:35:10,460 --> 00:35:14,450
Hope all those the row<font color="#CCCCCC"> noughts we</font>

786
00:35:12,380 --> 00:35:16,880
analyzed were much less<font color="#E5E5E5"> than one person</font>

787
00:35:14,450 --> 00:35:19,129
and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> essentially because New Hope</font>

788
00:35:16,880 --> 00:35:22,060
uses a much larger ring dimension than

789
00:35:19,130 --> 00:35:26,590
Kaiba so this change in<font color="#E5E5E5"> parameters</font>

790
00:35:22,060 --> 00:35:29,450
<font color="#E5E5E5">really does seem to affect our attack</font>

791
00:35:26,590 --> 00:35:31,550
the second thing that's interesting<font color="#E5E5E5"> here</font>

792
00:35:29,450 --> 00:35:34,310
is that<font color="#E5E5E5"> we can compare the costs of our</font>

793
00:35:31,550 --> 00:35:36,500
entity attack compared to the<font color="#E5E5E5"> non entity</font>

794
00:35:34,310 --> 00:35:38,750
cost and for<font color="#E5E5E5"> Kaiba which is the module</font>

795
00:35:36,500 --> 00:35:41,600
<font color="#CCCCCC">EE based scheme</font><font color="#E5E5E5"> we actually see that</font>

796
00:35:38,750 --> 00:35:45,140
<font color="#CCCCCC">there's a quite a large gap between</font><font color="#E5E5E5"> the</font>

797
00:35:41,600 --> 00:35:47,630
<font color="#CCCCCC">costs</font><font color="#E5E5E5"> of attacking an</font><font color="#CCCCCC"> entity encoding of</font>

798
00:35:45,140 --> 00:35:48,980
a secret versus the cost of attacking a

799
00:35:47,630 --> 00:35:51,050
nonentity<font color="#E5E5E5"> encoding</font>

800
00:35:48,980 --> 00:35:52,340
however for<font color="#CCCCCC"> New Hope this kind of</font>

801
00:35:51,050 --> 00:35:54,470
comparison<font color="#CCCCCC"> is less clear</font><font color="#E5E5E5"> because</font>

802
00:35:52,340 --> 00:35:56,570
sometimes the<font color="#CCCCCC"> entity is chief the entity</font>

803
00:35:54,470 --> 00:35:58,790
attack is cheaper and sometimes our

804
00:35:56,570 --> 00:36:02,390
estimates of the<font color="#CCCCCC"> nonentity attack is</font>

805
00:35:58,790 --> 00:36:04,279
cheaper<font color="#CCCCCC"> ok so to conclude</font>

806
00:36:02,390 --> 00:36:06,259
yeah we've shown<font color="#CCCCCC"> that the structure</font><font color="#E5E5E5"> of</font>

807
00:36:04,280 --> 00:36:09,560
<font color="#E5E5E5">entity can actually be exploited by cold</font>

808
00:36:06,260 --> 00:36:11,420
boot attackers for kaiba parameters it

809
00:36:09,560 --> 00:36:14,600
seems that the entity at least for the

810
00:36:11,420 --> 00:36:16,069
bit flips we looked at um seems to allow

811
00:36:14,600 --> 00:36:18,109
for a faster attack<font color="#E5E5E5"> than</font>

812
00:36:16,069 --> 00:36:21,709
case where the<font color="#CCCCCC"> NTT is not</font><font color="#E5E5E5"> used for</font><font color="#CCCCCC"> new</font>

813
00:36:18,109 --> 00:36:23,808
hope this<font color="#CCCCCC"> come this phenomenon was not</font>

814
00:36:21,709 --> 00:36:25,459
really observed in our experiments but

815
00:36:23,809 --> 00:36:27,229
<font color="#E5E5E5">nonetheless our recommendation for</font><font color="#CCCCCC"> the</font>

816
00:36:25,459 --> 00:36:29,779
<font color="#E5E5E5">time being</font><font color="#CCCCCC"> would be that if cold boot</font>

817
00:36:27,229 --> 00:36:33,098
attacks<font color="#E5E5E5"> are a concern it's worth not</font>

818
00:36:29,779 --> 00:36:36,680
storing your secrets<font color="#E5E5E5"> using an entity</font>

819
00:36:33,099 --> 00:36:38,809
that's not to say<font color="#CCCCCC"> you shouldn't use an</font>

820
00:36:36,680 --> 00:36:41,239
entity<font color="#E5E5E5"> you can still use the entity but</font>

821
00:36:38,809 --> 00:36:46,219
just<font color="#E5E5E5"> don't store the secret in memory</font>

822
00:36:41,239 --> 00:36:48,199
using<font color="#E5E5E5"> an entity okay so yeah the idea</font>

823
00:36:46,219 --> 00:36:49,759
<font color="#E5E5E5">behind this</font><font color="#CCCCCC"> recommendation is to sort of</font>

824
00:36:48,199 --> 00:36:52,519
guard<font color="#E5E5E5"> off against improvements to our</font>

825
00:36:49,759 --> 00:36:54,440
attack<font color="#E5E5E5"> because the NTT</font><font color="#CCCCCC"> really is</font>

826
00:36:52,519 --> 00:36:57,218
introducing them some structure<font color="#E5E5E5"> that a</font>

827
00:36:54,440 --> 00:37:00,769
crypt analyst might be<font color="#CCCCCC"> able to exploit</font>

828
00:36:57,219 --> 00:37:03,589
<font color="#CCCCCC">ok so future directions the first one</font>

829
00:37:00,769 --> 00:37:05,718
would be to<font color="#E5E5E5"> kind of study how to solve</font>

830
00:37:03,589 --> 00:37:08,690
<font color="#E5E5E5">these general LWT like problems with the</font>

831
00:37:05,719 --> 00:37:12,170
strange<font color="#CCCCCC"> lohan wait the SDR</font><font color="#E5E5E5"> secrets and</font>

832
00:37:08,690 --> 00:37:13,640
the second would be to<font color="#E5E5E5"> try to exploit</font>

833
00:37:12,170 --> 00:37:15,499
the rich algebraic structure of the

834
00:37:13,640 --> 00:37:18,618
entities further<font color="#E5E5E5"> so if you saw our</font>

835
00:37:15,499 --> 00:37:22,249
<font color="#E5E5E5">lattice it was highly non-uniform it had</font>

836
00:37:18,619 --> 00:37:25,430
a lot of structure to<font color="#E5E5E5"> it so yeah I think</font>

837
00:37:22,249 --> 00:37:27,799
we<font color="#E5E5E5"> all kind</font><font color="#CCCCCC"> of think that if we were</font>

838
00:37:25,430 --> 00:37:29,719
<font color="#CCCCCC">able to exploit the structure of entity</font>

839
00:37:27,799 --> 00:37:31,940
further we could certainly speed up our

840
00:37:29,719 --> 00:37:34,729
<font color="#E5E5E5">attack and yeah that's all</font><font color="#CCCCCC"> I've to say</font>

841
00:37:31,940 --> 00:37:35,839
I've got<font color="#CCCCCC"> some</font><font color="#E5E5E5"> references and I'll be</font>

842
00:37:34,729 --> 00:37:38,799
able<font color="#E5E5E5"> to take any questions you have</font>

843
00:37:35,839 --> 00:37:38,799
Thanks

844
00:37:43,960 --> 00:37:48,579
thank you we have<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> four questions</font>

845
00:37:50,829 --> 00:37:56,990
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> I see</font><font color="#CCCCCC"> that</font>

846
00:37:55,490 --> 00:38:09,308
<font color="#CCCCCC">they're just references I didn't want to</font>

847
00:37:56,990 --> 00:38:13,578
leave<font color="#CCCCCC"> or the question or comment no</font>

848
00:38:09,309 --> 00:38:15,440
maybe I have one one one question<font color="#E5E5E5"> yeah</font>

849
00:38:13,579 --> 00:38:19,150
what is the cause what is the loss if we

850
00:38:15,440 --> 00:38:21,799
<font color="#E5E5E5">don't represent the secret with entity</font>

851
00:38:19,150 --> 00:38:23,720
<font color="#CCCCCC">what</font><font color="#E5E5E5"> is the loss yeah what is the loss</font>

852
00:38:21,799 --> 00:38:26,240
yeah you<font color="#E5E5E5"> you recommend if</font><font color="#CCCCCC"> kolobok</font>

853
00:38:23,720 --> 00:38:28,759
attackers are concerned it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the worst</font>

854
00:38:26,240 --> 00:38:32,930
<font color="#E5E5E5">not storing secrets using entity</font><font color="#CCCCCC"> either</font>

855
00:38:28,759 --> 00:38:35,619
the efficiency loss if we<font color="#CCCCCC"> die so usually</font>

856
00:38:32,930 --> 00:38:38,450
<font color="#E5E5E5">whenever you multiply two polynomials is</font>

857
00:38:35,619 --> 00:38:39,980
easier to<font color="#CCCCCC"> multiply the entity</font><font color="#E5E5E5"> of a</font>

858
00:38:38,450 --> 00:38:42,348
<font color="#CCCCCC">polynomial with entity of the second</font>

859
00:38:39,980 --> 00:38:46,519
<font color="#E5E5E5">polynomial so essentially whenever</font><font color="#CCCCCC"> we</font>

860
00:38:42,349 --> 00:38:48,410
want<font color="#E5E5E5"> to do is like a times s it's faster</font>

861
00:38:46,519 --> 00:38:51,109
if we<font color="#CCCCCC"> already</font><font color="#E5E5E5"> have the entity of</font><font color="#CCCCCC"> a and</font>

862
00:38:48,410 --> 00:38:53,480
the<font color="#CCCCCC"> entity of</font><font color="#E5E5E5"> s to multiply the two</font>

863
00:38:51,109 --> 00:38:55,640
polynomials<font color="#CCCCCC"> however if you have just a</font>

864
00:38:53,480 --> 00:38:58,239
<font color="#CCCCCC">ns you have to first compute</font><font color="#E5E5E5"> entity of a</font>

865
00:38:55,640 --> 00:39:02,960
and then entity of s and then do the

866
00:38:58,239 --> 00:39:04,700
multiplication operation so it does

867
00:39:02,960 --> 00:39:06,289
affect<font color="#E5E5E5"> the efficiency of some of these</font>

868
00:39:04,700 --> 00:39:09,828
schemes<font color="#E5E5E5"> but only slightly</font><font color="#CCCCCC"> yeah I just</font>

869
00:39:06,289 --> 00:39:12,980
need<font color="#E5E5E5"> leave</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> computer no well I'm</font>

870
00:39:09,829 --> 00:39:16,220
not<font color="#E5E5E5"> sure if it's negligible of that yeah</font>

871
00:39:12,980 --> 00:39:17,749
<font color="#E5E5E5">I I</font><font color="#CCCCCC"> don't really</font><font color="#E5E5E5"> know how it</font><font color="#CCCCCC"> effects the</font>

872
00:39:16,220 --> 00:39:20,230
concrete performance of<font color="#E5E5E5"> these schemes</font>

873
00:39:17,749 --> 00:39:20,230
<font color="#E5E5E5">actually</font>

874
00:39:26,220 --> 00:39:31,980
<font color="#E5E5E5">question/comment but we thank the</font>

875
00:39:30,640 --> 00:39:39,779
speaker<font color="#CCCCCC"> again</font>

876
00:39:31,980 --> 00:39:39,780
[Applause]

