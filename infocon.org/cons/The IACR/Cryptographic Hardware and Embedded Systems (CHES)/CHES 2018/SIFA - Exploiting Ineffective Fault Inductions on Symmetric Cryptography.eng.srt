1
00:00:00,089 --> 00:00:05,490
so this brings<font color="#E5E5E5"> us to</font><font color="#CCCCCC"> the last talk</font><font color="#E5E5E5"> of</font>

2
00:00:02,490 --> 00:00:07,859
this<font color="#E5E5E5"> session and just to zero on</font><font color="#CCCCCC"> it it's</font>

3
00:00:05,490 --> 00:00:09,990
on<font color="#CCCCCC"> sefa which is exploiting ineffective</font>

4
00:00:07,859 --> 00:00:12,230
<font color="#E5E5E5">fault inductions on symmetric</font>

5
00:00:09,990 --> 00:00:15,719
cryptography<font color="#CCCCCC"> it's a joint</font><font color="#E5E5E5"> work between</font>

6
00:00:12,230 --> 00:00:17,940
<font color="#E5E5E5">tigress and</font><font color="#CCCCCC"> Infineon and the work will</font>

7
00:00:15,719 --> 00:00:20,930
<font color="#CCCCCC">be presented by Robert premise from</font>

8
00:00:17,940 --> 00:00:20,930
<font color="#E5E5E5">tigress</font>

9
00:00:47,300 --> 00:00:52,530
<font color="#CCCCCC">okay hello everyone</font><font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> for the</font>

10
00:00:50,370 --> 00:00:53,309
introduction<font color="#CCCCCC"> as</font><font color="#E5E5E5"> already</font><font color="#CCCCCC"> mentioned I'm</font>

11
00:00:52,530 --> 00:00:55,620
going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font>

12
00:00:53,310 --> 00:00:58,860
<font color="#CCCCCC">Seifer exploiting ineffective fourteenth</font>

13
00:00:55,620 --> 00:01:00,660
actions on symmetric cryptography<font color="#E5E5E5"> and I</font>

14
00:00:58,860 --> 00:01:03,420
would like<font color="#E5E5E5"> to start this talk with a</font>

15
00:01:00,660 --> 00:01:05,789
quick outlook so what<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font>

16
00:01:03,420 --> 00:01:08,970
present<font color="#E5E5E5"> is some kind of new fault attack</font>

17
00:01:05,790 --> 00:01:12,620
that are quite hard to prevent<font color="#E5E5E5"> in a</font>

18
00:01:08,970 --> 00:01:16,590
sense that they defy both detection and

19
00:01:12,620 --> 00:01:18,810
effective countermeasures<font color="#CCCCCC"> and as a</font>

20
00:01:16,590 --> 00:01:21,990
<font color="#E5E5E5">matter of fact they're also</font><font color="#CCCCCC"> too can cope</font>

21
00:01:18,810 --> 00:01:23,490
with<font color="#CCCCCC"> mask implementations</font><font color="#E5E5E5"> however this</font>

22
00:01:21,990 --> 00:01:25,920
is<font color="#CCCCCC"> actually covered in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> follow up</font>

23
00:01:23,490 --> 00:01:28,949
work<font color="#E5E5E5"> which is why I'm not</font><font color="#CCCCCC"> really gonna</font>

24
00:01:25,920 --> 00:01:31,530
<font color="#CCCCCC">cure it</font><font color="#E5E5E5"> in this talk</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are also</font>

25
00:01:28,950 --> 00:01:34,290
quite versatile in a sense that they

26
00:01:31,530 --> 00:01:37,520
allow an attacker to induce<font color="#E5E5E5"> Forte's at</font>

27
00:01:34,290 --> 00:01:39,600
many different<font color="#E5E5E5"> locations during the</font>

28
00:01:37,520 --> 00:01:44,100
computation<font color="#CCCCCC"> of some kind of</font>

29
00:01:39,600 --> 00:01:47,460
cryptographic function<font color="#E5E5E5"> and it even works</font>

30
00:01:44,100 --> 00:01:51,000
<font color="#E5E5E5">with quite a lot of different and types</font>

31
00:01:47,460 --> 00:01:55,889
of forts<font color="#E5E5E5"> it's even applicable to quite a</font>

32
00:01:51,000 --> 00:01:59,369
large variety of metric schemes<font color="#E5E5E5"> and as</font>

33
00:01:55,890 --> 00:02:01,890
<font color="#CCCCCC">we will see</font><font color="#E5E5E5"> we've evaluated spent the</font>

34
00:01:59,369 --> 00:02:04,380
fourth<font color="#E5E5E5"> page on quite a variety of</font>

35
00:02:01,890 --> 00:02:05,819
<font color="#E5E5E5">different</font><font color="#CCCCCC"> platforms</font><font color="#E5E5E5"> to basically prove</font>

36
00:02:04,380 --> 00:02:09,869
that they<font color="#CCCCCC"> are actually relevant in</font>

37
00:02:05,819 --> 00:02:11,550
practice so I would<font color="#E5E5E5"> like to start with</font><font color="#CCCCCC"> a</font>

38
00:02:09,869 --> 00:02:13,500
quick introduction to<font color="#CCCCCC"> faulty</font><font color="#E5E5E5"> texts and</font>

39
00:02:11,550 --> 00:02:16,680
especially countermeasures against for

40
00:02:13,500 --> 00:02:18,870
the tips so what were you doing<font color="#CCCCCC"> on fault</font>

41
00:02:16,680 --> 00:02:20,790
attack<font color="#E5E5E5"> well basically you have some kind</font>

42
00:02:18,870 --> 00:02:23,220
<font color="#E5E5E5">of cryptographic implementation that you</font>

43
00:02:20,790 --> 00:02:25,709
want to attack<font color="#E5E5E5"> and usually what you want</font>

44
00:02:23,220 --> 00:02:27,840
<font color="#CCCCCC">to do as a</font><font color="#E5E5E5"> first step is you</font><font color="#CCCCCC"> want to be</font>

45
00:02:25,709 --> 00:02:30,390
able to<font color="#E5E5E5"> get some kind of physical access</font>

46
00:02:27,840 --> 00:02:33,600
such that you can set for<font color="#CCCCCC"> some</font><font color="#E5E5E5"> plain</font>

47
00:02:30,390 --> 00:02:36,029
<font color="#E5E5E5">text</font><font color="#CCCCCC"> and observe cipher texts then</font>

48
00:02:33,600 --> 00:02:38,130
<font color="#E5E5E5">people are</font><font color="#CCCCCC"> induced some kind of fort</font>

49
00:02:36,030 --> 00:02:41,090
into<font color="#E5E5E5"> the computation such that you can</font>

50
00:02:38,130 --> 00:02:46,290
observe possibly partially or completely

51
00:02:41,090 --> 00:02:49,110
erroneous<font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> and then what you</font>

52
00:02:46,290 --> 00:02:51,150
usually do<font color="#CCCCCC"> is you collect or</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> a</font>

53
00:02:49,110 --> 00:02:56,940
correct ciphertext corresponding to the

54
00:02:51,150 --> 00:02:59,190
same plaintext and determine parts of

55
00:02:56,940 --> 00:03:00,959
the key by doing<font color="#E5E5E5"> a guess on a sub key</font>

56
00:02:59,190 --> 00:03:03,540
and performing<font color="#E5E5E5"> some kind of</font><font color="#CCCCCC"> every freak</font>

57
00:03:00,959 --> 00:03:06,359
based on<font color="#CCCCCC"> despair</font><font color="#E5E5E5"> of a</font><font color="#CCCCCC"> faulty and the</font>

58
00:03:03,540 --> 00:03:08,099
correct ciphertext now of<font color="#CCCCCC"> course this</font>

59
00:03:06,359 --> 00:03:11,189
goes under the name differential for the

60
00:03:08,099 --> 00:03:16,230
<font color="#E5E5E5">tech</font><font color="#CCCCCC"> and is known quite</font><font color="#E5E5E5"> well in the</font>

61
00:03:11,189 --> 00:03:17,519
community<font color="#E5E5E5"> now usually we</font><font color="#CCCCCC"> do not agree to</font>

62
00:03:16,230 --> 00:03:20,129
<font color="#E5E5E5">their text</font><font color="#CCCCCC"> but does it come to</font><font color="#E5E5E5"> measure</font>

63
00:03:17,519 --> 00:03:22,769
so how do you prevent<font color="#CCCCCC"> yourself against</font>

64
00:03:20,129 --> 00:03:25,469
such a text well the first and probably

65
00:03:22,769 --> 00:03:28,079
<font color="#E5E5E5">also quite effective countermeasure</font>

66
00:03:25,469 --> 00:03:32,040
would be to use some<font color="#E5E5E5"> kind of redundancy</font>

67
00:03:28,079 --> 00:03:34,859
to ensure that<font color="#CCCCCC"> Forte's do not really</font>

68
00:03:32,040 --> 00:03:37,349
have<font color="#CCCCCC"> an</font><font color="#E5E5E5"> effect</font><font color="#CCCCCC"> on the</font><font color="#E5E5E5"> computation so</font>

69
00:03:34,859 --> 00:03:39,060
what you could<font color="#E5E5E5"> do for</font><font color="#CCCCCC"> example is instead</font>

70
00:03:37,349 --> 00:03:41,459
<font color="#E5E5E5">of computing your cryptographic</font>

71
00:03:39,060 --> 00:03:44,970
implementation once<font color="#E5E5E5"> you could compute it</font>

72
00:03:41,459 --> 00:03:46,950
twice and at the<font color="#E5E5E5"> very end simply compare</font>

73
00:03:44,970 --> 00:03:48,510
the two outputs such that you only

74
00:03:46,950 --> 00:03:51,298
release it if the actually both

75
00:03:48,510 --> 00:03:53,459
computations match up by doing<font color="#E5E5E5"> so you</font>

76
00:03:51,299 --> 00:03:55,859
can<font color="#CCCCCC"> prevent yourself</font><font color="#E5E5E5"> against the tackles</font>

77
00:03:53,459 --> 00:03:59,969
that<font color="#E5E5E5"> just induce a single fault in the</font>

78
00:03:55,859 --> 00:04:01,319
computation now of<font color="#E5E5E5"> course an attacker</font>

79
00:03:59,969 --> 00:04:03,209
could do something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this and</font>

80
00:04:01,319 --> 00:04:06,089
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> in check the same for</font><font color="#CCCCCC"> it in</font>

81
00:04:03,209 --> 00:04:07,859
<font color="#CCCCCC">both computations such</font><font color="#E5E5E5"> that the result</font>

82
00:04:06,090 --> 00:04:11,579
<font color="#E5E5E5">matches up and the faulty ciphertext is</font>

83
00:04:07,859 --> 00:04:13,620
released<font color="#CCCCCC"> and in order to</font><font color="#E5E5E5"> cope with that</font>

84
00:04:11,579 --> 00:04:15,659
you could do things<font color="#E5E5E5"> like adding</font><font color="#CCCCCC"> more</font>

85
00:04:13,620 --> 00:04:20,120
<font color="#E5E5E5">redundancy or doing encryption</font>

86
00:04:15,659 --> 00:04:23,930
decryption redundancy using masking etc

87
00:04:20,120 --> 00:04:26,550
now there are also different<font color="#CCCCCC"> kinds of</font>

88
00:04:23,930 --> 00:04:28,470
<font color="#E5E5E5">for</font><font color="#CCCCCC"> contaminations are written detection</font>

89
00:04:26,550 --> 00:04:30,659
based countermeasures<font color="#E5E5E5"> for sampling and</font>

90
00:04:28,470 --> 00:04:32,699
then infection based countermeasure<font color="#E5E5E5"> what</font>

91
00:04:30,659 --> 00:04:34,830
you do<font color="#E5E5E5"> usually you also use some kind</font><font color="#CCCCCC"> of</font>

92
00:04:32,699 --> 00:04:37,520
<font color="#CCCCCC">redundancy</font><font color="#E5E5E5"> but also in the live</font>

93
00:04:34,830 --> 00:04:40,139
computation and usually also<font color="#CCCCCC"> Tommy runs</font>

94
00:04:37,520 --> 00:04:43,680
<font color="#CCCCCC">I'm not going into too much detail here</font>

95
00:04:40,139 --> 00:04:46,139
<font color="#CCCCCC">but basically</font><font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> is that once an</font>

96
00:04:43,680 --> 00:04:47,960
attacker<font color="#E5E5E5"> has injected some kind of</font>

97
00:04:46,139 --> 00:04:50,220
<font color="#CCCCCC">foreign</font><font color="#E5E5E5"> into a computation this</font>

98
00:04:47,960 --> 00:04:52,440
<font color="#CCCCCC">confirmation make sure that this</font><font color="#E5E5E5"> fort is</font>

99
00:04:50,220 --> 00:04:55,440
in<font color="#E5E5E5"> some sense amplified</font>

100
00:04:52,440 --> 00:04:58,400
such that<font color="#CCCCCC"> the output the</font><font color="#E5E5E5"> faulty output</font>

101
00:04:55,440 --> 00:05:00,509
is not related<font color="#E5E5E5"> in the to the key anymore</font>

102
00:04:58,400 --> 00:05:02,940
meaning<font color="#CCCCCC"> that if an attacker will try to</font>

103
00:05:00,509 --> 00:05:04,770
combine again<font color="#E5E5E5"> correct and before the</font>

104
00:05:02,940 --> 00:05:09,599
ciphertext<font color="#E5E5E5"> does not really a meaningful</font>

105
00:05:04,770 --> 00:05:11,010
way<font color="#E5E5E5"> in how to do that</font><font color="#CCCCCC"> now of course</font>

106
00:05:09,599 --> 00:05:13,380
there is still<font color="#CCCCCC"> a text out there that</font>

107
00:05:11,010 --> 00:05:15,480
could attack such a countermeasure but

108
00:05:13,380 --> 00:05:18,630
they are usually<font color="#E5E5E5"> quite hard</font>

109
00:05:15,480 --> 00:05:20,870
require<font color="#E5E5E5"> or have high assumptions on the</font>

110
00:05:18,630 --> 00:05:20,870
attacker

111
00:05:21,110 --> 00:05:27,300
apart from differential<font color="#E5E5E5"> for texture</font><font color="#CCCCCC"> it's</font>

112
00:05:24,060 --> 00:05:31,170
also quite a<font color="#E5E5E5"> few other</font><font color="#CCCCCC"> um for the text</font>

113
00:05:27,300 --> 00:05:33,810
in literature<font color="#E5E5E5"> so for example in 2007</font>

114
00:05:31,170 --> 00:05:36,150
clavier<font color="#CCCCCC"> or proposed</font><font color="#E5E5E5"> ineffective for</font><font color="#CCCCCC"> the</font>

115
00:05:33,810 --> 00:05:38,790
text and<font color="#E5E5E5"> the nice</font><font color="#CCCCCC"> thing about those is</font>

116
00:05:36,150 --> 00:05:41,219
that they actually exploit only correct

117
00:05:38,790 --> 00:05:43,320
<font color="#CCCCCC">ciphertext</font><font color="#E5E5E5"> and by that I mean</font><font color="#CCCCCC"> of course</font>

118
00:05:41,220 --> 00:05:45,000
you want to<font color="#E5E5E5"> check a</font><font color="#CCCCCC"> for December</font><font color="#E5E5E5"> but</font>

119
00:05:43,320 --> 00:05:46,740
every now and then a for it<font color="#E5E5E5"> isn't</font>

120
00:05:45,000 --> 00:05:49,740
actually<font color="#CCCCCC"> causing their runners</font>

121
00:05:46,740 --> 00:05:52,380
computation<font color="#E5E5E5"> so in some sense it's quite</font>

122
00:05:49,740 --> 00:05:54,300
similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> in severe</font><font color="#CCCCCC"> attack the problem</font>

123
00:05:52,380 --> 00:05:57,419
<font color="#CCCCCC">with this</font><font color="#E5E5E5"> attack is</font><font color="#CCCCCC"> that it usually</font>

124
00:05:54,300 --> 00:05:58,980
requires<font color="#E5E5E5"> precise fourths and the effect</font>

125
00:05:57,419 --> 00:06:01,409
of effort has to be<font color="#E5E5E5"> known by the</font>

126
00:05:58,980 --> 00:06:05,220
attacker which is not really or as the

127
00:06:01,410 --> 00:06:06,530
case in a practical scenario<font color="#CCCCCC"> a quite</font>

128
00:06:05,220 --> 00:06:09,540
different approach would be to use

129
00:06:06,530 --> 00:06:14,489
<font color="#E5E5E5">statistical fault analysis as proposed</font>

130
00:06:09,540 --> 00:06:16,590
by<font color="#CCCCCC"> a forward are in</font><font color="#E5E5E5"> 2013 here</font><font color="#CCCCCC"> the nice</font>

131
00:06:14,490 --> 00:06:19,050
thing about this attack is that<font color="#E5E5E5"> it works</font>

132
00:06:16,590 --> 00:06:20,609
with basically any type of<font color="#E5E5E5"> fault even if</font>

133
00:06:19,050 --> 00:06:23,040
the attacker doesn't<font color="#E5E5E5"> even know how this</font>

134
00:06:20,610 --> 00:06:25,770
<font color="#E5E5E5">for detects effects the computation</font>

135
00:06:23,040 --> 00:06:29,070
the problem here is however<font color="#E5E5E5"> that this</font>

136
00:06:25,770 --> 00:06:31,289
attack can<font color="#CCCCCC"> be mitigated</font><font color="#E5E5E5"> quite easily by</font>

137
00:06:29,070 --> 00:06:32,909
using for example<font color="#E5E5E5"> detection or infection</font>

138
00:06:31,290 --> 00:06:36,990
based countermeasure that I have

139
00:06:32,910 --> 00:06:38,940
presented just<font color="#CCCCCC"> before so our idea</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> um</font>

140
00:06:36,990 --> 00:06:40,890
can<font color="#CCCCCC"> we somehow combine these two</font>

141
00:06:38,940 --> 00:06:43,050
approaches such that we come<font color="#E5E5E5"> up with</font><font color="#CCCCCC"> a</font>

142
00:06:40,890 --> 00:06:46,169
new kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> for detect that</font><font color="#E5E5E5"> has disposed</font>

143
00:06:43,050 --> 00:06:47,520
of<font color="#E5E5E5"> cool properties that we solely rely</font>

144
00:06:46,169 --> 00:06:50,580
on<font color="#CCCCCC"> the exploitation</font><font color="#E5E5E5"> of correct</font>

145
00:06:47,520 --> 00:06:52,440
ciphertext<font color="#E5E5E5"> and still can work with quite</font>

146
00:06:50,580 --> 00:06:55,650
<font color="#E5E5E5">a lot of different forts even if we do</font>

147
00:06:52,440 --> 00:06:58,320
not<font color="#E5E5E5"> even know what</font><font color="#CCCCCC"> they are doing so</font><font color="#E5E5E5"> in</font>

148
00:06:55,650 --> 00:07:00,450
order to<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> how this statistical</font><font color="#E5E5E5"> in</font>

149
00:06:58,320 --> 00:07:03,659
<font color="#E5E5E5">effect if all the tech verbs</font><font color="#CCCCCC"> I want to</font>

150
00:07:00,450 --> 00:07:05,669
stick<font color="#E5E5E5"> to an example</font><font color="#CCCCCC"> on a s so what we</font>

151
00:07:03,660 --> 00:07:06,840
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here on the</font><font color="#E5E5E5"> white is just</font><font color="#CCCCCC"> the</font>

152
00:07:05,669 --> 00:07:09,870
last<font color="#E5E5E5"> three rounds</font><font color="#CCCCCC"> of AES</font>

153
00:07:06,840 --> 00:07:12,810
<font color="#E5E5E5">and one of the observations that we want</font>

154
00:07:09,870 --> 00:07:15,229
<font color="#E5E5E5">to make here is</font><font color="#CCCCCC"> that the distribution</font><font color="#E5E5E5"> of</font>

155
00:07:12,810 --> 00:07:17,669
<font color="#CCCCCC">state</font><font color="#E5E5E5"> bytes for example in</font><font color="#CCCCCC"> road nine</font>

156
00:07:15,229 --> 00:07:21,210
<font color="#E5E5E5">over the course of multiple encryptions</font>

157
00:07:17,669 --> 00:07:23,700
is uniformly<font color="#CCCCCC"> distributed now that's not</font>

158
00:07:21,210 --> 00:07:25,680
really<font color="#E5E5E5"> surprising since AES is into the</font>

159
00:07:23,700 --> 00:07:28,849
random permutation<font color="#E5E5E5"> which means that this</font>

160
00:07:25,680 --> 00:07:31,969
<font color="#E5E5E5">is basically we expect such an function</font>

161
00:07:28,849 --> 00:07:33,919
<font color="#E5E5E5">to operate now what you want to do is</font>

162
00:07:31,969 --> 00:07:35,808
now we run and use the<font color="#CCCCCC"> forth somewhere</font>

163
00:07:33,919 --> 00:07:38,330
between<font color="#E5E5E5"> which columns in</font><font color="#CCCCCC"> round</font><font color="#E5E5E5"> eight and</font>

164
00:07:35,809 --> 00:07:41,209
<font color="#E5E5E5">nine and the goal</font><font color="#CCCCCC"> of this for the</font>

165
00:07:38,330 --> 00:07:45,229
<font color="#CCCCCC">injection is to cause some kind of non</font>

166
00:07:41,209 --> 00:07:48,289
pious<font color="#E5E5E5"> very non-uniform distribution</font><font color="#CCCCCC"> in</font>

167
00:07:45,229 --> 00:07:50,929
some some parts of this AES state for

168
00:07:48,289 --> 00:07:52,520
example<font color="#E5E5E5"> as illustrated</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> and in order</font>

169
00:07:50,929 --> 00:07:54,558
to<font color="#E5E5E5"> do that you have actually quite</font><font color="#CCCCCC"> a lot</font>

170
00:07:52,520 --> 00:07:56,839
<font color="#E5E5E5">of</font><font color="#CCCCCC"> choices you can work with stuck at</font>

171
00:07:54,559 --> 00:07:59,330
<font color="#CCCCCC">Ford's random Ford's instruction skips</font>

172
00:07:56,839 --> 00:08:01,519
<font color="#E5E5E5">bit flips and even when it</font><font color="#CCCCCC"> comes to the</font>

173
00:07:59,330 --> 00:08:04,308
coordinator granularity<font color="#CCCCCC"> of deford</font><font color="#E5E5E5"> you</font>

174
00:08:01,519 --> 00:08:07,189
can target a snippet<font color="#E5E5E5"> a whole byte or</font>

175
00:08:04,309 --> 00:08:08,629
even a couple<font color="#E5E5E5"> of bytes so the effect</font>

176
00:08:07,189 --> 00:08:11,599
could really be like something like<font color="#E5E5E5"> this</font>

177
00:08:08,629 --> 00:08:13,369
or<font color="#CCCCCC"> like that or like</font><font color="#E5E5E5"> that you do not</font>

178
00:08:11,599 --> 00:08:14,808
really<font color="#E5E5E5"> care as an attacker as long as</font>

179
00:08:13,369 --> 00:08:18,429
there is some<font color="#CCCCCC"> kind of non-uniform</font>

180
00:08:14,809 --> 00:08:20,959
distribution<font color="#E5E5E5"> now as I mentioned before</font>

181
00:08:18,429 --> 00:08:22,818
<font color="#E5E5E5">we won our chief for the tech that</font>

182
00:08:20,959 --> 00:08:24,889
actually<font color="#E5E5E5"> works</font><font color="#CCCCCC"> even in the</font><font color="#E5E5E5"> presence of</font>

183
00:08:22,819 --> 00:08:27,289
fault<font color="#CCCCCC"> countermeasures meaning</font><font color="#E5E5E5"> that an</font>

184
00:08:24,889 --> 00:08:29,539
attacker does not really get to see any

185
00:08:27,289 --> 00:08:31,490
for the<font color="#E5E5E5"> output now an interesting</font>

186
00:08:29,539 --> 00:08:35,769
<font color="#E5E5E5">observation that you can make here is</font>

187
00:08:31,490 --> 00:08:38,719
that<font color="#CCCCCC"> Ford's can even</font><font color="#E5E5E5"> achieve this</font>

188
00:08:35,769 --> 00:08:40,610
property<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> observe non-uniform</font>

189
00:08:38,719 --> 00:08:43,939
distribution<font color="#E5E5E5"> if we</font><font color="#CCCCCC"> just restrict</font>

190
00:08:40,610 --> 00:08:46,370
ourselves to<font color="#CCCCCC"> ineffective forts</font><font color="#E5E5E5"> so the</font>

191
00:08:43,938 --> 00:08:50,060
way to<font color="#E5E5E5"> think about this is that if</font>

192
00:08:46,370 --> 00:08:52,250
whenever we inject the<font color="#CCCCCC"> fort</font><font color="#E5E5E5"> we may or</font>

193
00:08:50,060 --> 00:08:55,489
may not receive<font color="#CCCCCC"> our ciphertext depending</font>

194
00:08:52,250 --> 00:08:57,170
on if the fort has affected the

195
00:08:55,490 --> 00:08:59,689
computation or not for<font color="#CCCCCC"> example in the</font>

196
00:08:57,170 --> 00:09:02,509
redundancy<font color="#E5E5E5"> based countermeasure so in a</font>

197
00:08:59,689 --> 00:09:05,089
sense you can<font color="#CCCCCC"> think</font><font color="#E5E5E5"> about this scenario</font>

198
00:09:02,509 --> 00:09:07,310
<font color="#E5E5E5">or default as some kind of filter that</font>

199
00:09:05,089 --> 00:09:09,560
gives an attacker access to<font color="#CCCCCC"> to just</font><font color="#E5E5E5"> a</font>

200
00:09:07,310 --> 00:09:12,258
subset of all the possible correct

201
00:09:09,560 --> 00:09:15,380
<font color="#E5E5E5">ciphertext as it was traded here for</font>

202
00:09:12,259 --> 00:09:17,870
<font color="#CCCCCC">example now</font><font color="#E5E5E5"> how likely is it actually</font>

203
00:09:15,380 --> 00:09:19,189
that<font color="#CCCCCC"> I'm an ineffective fault can cause</font>

204
00:09:17,870 --> 00:09:22,399
some kind of non-uniform distribution

205
00:09:19,189 --> 00:09:23,660
<font color="#CCCCCC">estate by it</font><font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> convince you</font>

206
00:09:22,399 --> 00:09:26,569
that this<font color="#CCCCCC"> is actually quite likely</font>

207
00:09:23,660 --> 00:09:27,889
<font color="#CCCCCC">I've prepared</font><font color="#E5E5E5"> a very simple example</font><font color="#CCCCCC"> so</font>

208
00:09:26,569 --> 00:09:32,300
what we can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here is just</font><font color="#E5E5E5"> in simple</font>

209
00:09:27,889 --> 00:09:34,579
<font color="#CCCCCC">and gate</font><font color="#E5E5E5"> and we see basically two input</font>

210
00:09:32,300 --> 00:09:37,339
bits that are uniformly distributed<font color="#CCCCCC"> and</font>

211
00:09:34,579 --> 00:09:39,829
we wanna<font color="#E5E5E5"> explore how</font><font color="#CCCCCC"> Ford's can affect</font>

212
00:09:37,339 --> 00:09:41,930
the distributions of these inputs so

213
00:09:39,829 --> 00:09:42,469
just for sake of simplicity let's<font color="#CCCCCC"> just</font>

214
00:09:41,930 --> 00:09:46,670
forget about

215
00:09:42,470 --> 00:09:48,560
output for now<font color="#E5E5E5"> and</font><font color="#CCCCCC"> as a</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> example</font>

216
00:09:46,670 --> 00:09:50,449
let's consider bit flips<font color="#E5E5E5"> so what would</font>

217
00:09:48,560 --> 00:09:52,910
happen<font color="#CCCCCC"> if you even attacker</font><font color="#E5E5E5"> actually</font>

218
00:09:50,450 --> 00:09:58,250
injects or performs a bit flip on the

219
00:09:52,910 --> 00:10:01,819
first operand here<font color="#E5E5E5"> now</font><font color="#CCCCCC"> it's actually</font>

220
00:09:58,250 --> 00:10:04,400
quite quite easy to<font color="#CCCCCC"> see that if</font><font color="#E5E5E5"> input of</font>

221
00:10:01,820 --> 00:10:06,320
an<font color="#E5E5E5"> end gate here for example is uniform</font>

222
00:10:04,400 --> 00:10:08,540
distributed<font color="#CCCCCC"> and a bit flip</font><font color="#E5E5E5"> isn't really</font>

223
00:10:06,320 --> 00:10:11,150
<font color="#CCCCCC">going to change its distribution</font><font color="#E5E5E5"> however</font>

224
00:10:08,540 --> 00:10:13,880
if we restrict an attacker<font color="#E5E5E5"> to only</font>

225
00:10:11,150 --> 00:10:16,310
<font color="#E5E5E5">observing these scenarios</font><font color="#CCCCCC"> one bit flip</font>

226
00:10:13,880 --> 00:10:18,560
is ineffective<font color="#E5E5E5"> this basically means that</font>

227
00:10:16,310 --> 00:10:21,319
the other operand has to be<font color="#E5E5E5"> heavily</font>

228
00:10:18,560 --> 00:10:22,849
biased<font color="#E5E5E5"> to zero because every time we</font>

229
00:10:21,320 --> 00:10:25,340
perform a bit flip in the<font color="#E5E5E5"> first operand</font>

230
00:10:22,850 --> 00:10:27,710
here<font color="#E5E5E5"> and this basically means that we</font>

231
00:10:25,340 --> 00:10:30,440
induce some kind of difference that has

232
00:10:27,710 --> 00:10:32,690
to be<font color="#E5E5E5"> eliminated at some point and this</font>

233
00:10:30,440 --> 00:10:36,080
<font color="#E5E5E5">is only possible in this scenario if</font><font color="#CCCCCC"> the</font>

234
00:10:32,690 --> 00:10:39,620
other input is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> similar for example now</font>

235
00:10:36,080 --> 00:10:42,590
<font color="#E5E5E5">what about random</font><font color="#CCCCCC"> forts</font><font color="#E5E5E5"> it's quite</font>

236
00:10:39,620 --> 00:10:44,000
<font color="#E5E5E5">simple and to see again</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the random</font>

237
00:10:42,590 --> 00:10:46,130
<font color="#CCCCCC">four</font><font color="#E5E5E5"> doesn't really affect the first</font>

238
00:10:44,000 --> 00:10:49,640
<font color="#E5E5E5">input because by definition</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you</font>

239
00:10:46,130 --> 00:10:52,150
<font color="#E5E5E5">randomize a bit</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> distribution is</font>

240
00:10:49,640 --> 00:10:55,370
<font color="#CCCCCC">still</font><font color="#E5E5E5"> random and uniformly distributed</font>

241
00:10:52,150 --> 00:10:59,750
now again if we<font color="#CCCCCC"> just have a look at the</font>

242
00:10:55,370 --> 00:11:01,880
ineffective scenarios we again see that

243
00:10:59,750 --> 00:11:05,540
<font color="#E5E5E5">the second input is heavily biased to</font>

244
00:11:01,880 --> 00:11:07,939
<font color="#CCCCCC">its</font><font color="#E5E5E5"> zero and the reason</font><font color="#CCCCCC"> for that is</font>

245
00:11:05,540 --> 00:11:09,890
simply<font color="#CCCCCC"> that a random fort</font><font color="#E5E5E5"> is nothing</font>

246
00:11:07,940 --> 00:11:13,040
other<font color="#CCCCCC"> than just</font><font color="#E5E5E5"> a bit flip that occurs</font>

247
00:11:09,890 --> 00:11:15,199
<font color="#E5E5E5">just in 50% of the cases meaning that in</font>

248
00:11:13,040 --> 00:11:16,880
a<font color="#E5E5E5"> couple of cases we need a zero to</font>

249
00:11:15,200 --> 00:11:19,900
compensate this difference<font color="#E5E5E5"> that we have</font>

250
00:11:16,880 --> 00:11:23,810
introduced<font color="#E5E5E5"> in the other cases we do not</font>

251
00:11:19,900 --> 00:11:26,209
so that's assuming that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have some</font>

252
00:11:23,810 --> 00:11:29,209
kind<font color="#E5E5E5"> of set of correct</font><font color="#CCCCCC"> ciphertext that</font>

253
00:11:26,210 --> 00:11:31,370
<font color="#CCCCCC">we started</font><font color="#E5E5E5"> from faulted encryptions how</font>

254
00:11:29,210 --> 00:11:33,290
can we actually use them to recover<font color="#CCCCCC"> key</font>

255
00:11:31,370 --> 00:11:35,060
well that's quite<font color="#CCCCCC"> easy actually</font>

256
00:11:33,290 --> 00:11:37,550
<font color="#CCCCCC">equivalent to how you would do it</font><font color="#E5E5E5"> in a</font>

257
00:11:35,060 --> 00:11:38,660
statistical fault attack all you need to

258
00:11:37,550 --> 00:11:42,800
do is your one<font color="#CCCCCC"> our</font>

259
00:11:38,660 --> 00:11:45,800
guess<font color="#CCCCCC"> 20:32 bit of the wrong key in</font>

260
00:11:42,800 --> 00:11:48,469
around in<font color="#E5E5E5"> run</font><font color="#CCCCCC"> ten and then basically</font><font color="#E5E5E5"> you</font>

261
00:11:45,800 --> 00:11:50,319
want<font color="#E5E5E5"> to reverse back to round nine where</font>

262
00:11:48,470 --> 00:11:53,810
you originally<font color="#E5E5E5"> injected the fort and</font>

263
00:11:50,320 --> 00:11:56,360
then you can measure the uniformity of

264
00:11:53,810 --> 00:11:58,609
the<font color="#E5E5E5"> state by its using an orator</font>

265
00:11:56,360 --> 00:12:01,100
matric for example in our case we<font color="#E5E5E5"> use</font>

266
00:11:58,610 --> 00:12:04,850
<font color="#CCCCCC">the</font><font color="#E5E5E5"> spirit</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> key</font><font color="#CCCCCC"> spirit Akkadian</font>

267
00:12:01,100 --> 00:12:06,860
<font color="#CCCCCC">imbalance</font><font color="#E5E5E5"> and what we should expect is</font>

268
00:12:04,850 --> 00:12:09,470
for<font color="#CCCCCC"> a wrong</font><font color="#E5E5E5"> fit</font><font color="#CCCCCC"> candidate we should</font>

269
00:12:06,860 --> 00:12:12,260
expect that<font color="#E5E5E5"> all the statements are</font>

270
00:12:09,470 --> 00:12:14,959
distributed uniformly however for a

271
00:12:12,260 --> 00:12:17,779
correct candidate<font color="#CCCCCC"> we should expect that</font>

272
00:12:14,959 --> 00:12:19,969
<font color="#E5E5E5">the</font><font color="#CCCCCC"> distribution of the states is</font><font color="#E5E5E5"> not</font>

273
00:12:17,779 --> 00:12:23,680
uniform but<font color="#E5E5E5"> actually some kind</font><font color="#CCCCCC"> of</font>

274
00:12:19,970 --> 00:12:26,089
non-uniform distribution<font color="#E5E5E5"> meaning that</font>

275
00:12:23,680 --> 00:12:28,219
the key candidate that corresponds to

276
00:12:26,089 --> 00:12:30,950
the<font color="#CCCCCC"> highest non-uniform distribution or</font>

277
00:12:28,220 --> 00:12:34,120
the<font color="#E5E5E5"> highest</font><font color="#CCCCCC"> SAE</font><font color="#E5E5E5"> in the sample is most</font>

278
00:12:30,950 --> 00:12:36,620
<font color="#E5E5E5">likely most likely the correct one so</font>

279
00:12:34,120 --> 00:12:39,500
<font color="#CCCCCC">let's talk about a few of</font><font color="#E5E5E5"> the practical</font>

280
00:12:36,620 --> 00:12:41,440
results that we did so for example at

281
00:12:39,500 --> 00:12:44,060
<font color="#CCCCCC">first we targeted a simple software</font>

282
00:12:41,440 --> 00:12:46,519
<font color="#CCCCCC">implementation from the</font><font color="#E5E5E5"> a var crypto lip</font>

283
00:12:44,060 --> 00:12:48,589
and of course we implemented some kind

284
00:12:46,519 --> 00:12:50,269
of detection<font color="#E5E5E5"> based countermeasure</font><font color="#CCCCCC"> that</font>

285
00:12:48,589 --> 00:12:53,779
ensures that no faulty<font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> are</font>

286
00:12:50,269 --> 00:12:56,180
released<font color="#E5E5E5"> so we injected for three</font>

287
00:12:53,779 --> 00:12:58,370
<font color="#E5E5E5">o'clock</font><font color="#CCCCCC"> pitches in round</font><font color="#E5E5E5"> nine and</font>

288
00:12:56,180 --> 00:13:01,489
basically we observed that after for

289
00:12:58,370 --> 00:13:03,680
about<font color="#CCCCCC"> 1300</font><font color="#E5E5E5"> for the encryptions we</font>

290
00:13:01,490 --> 00:13:05,570
received about<font color="#E5E5E5"> five correct</font><font color="#CCCCCC"> ciphertext</font>

291
00:13:03,680 --> 00:13:08,060
<font color="#E5E5E5">now how can they explain these numbers</font>

292
00:13:05,570 --> 00:13:10,190
well in this case for<font color="#E5E5E5"> example our</font>

293
00:13:08,060 --> 00:13:12,189
<font color="#E5E5E5">glücklich has caused some kind of stuck</font>

294
00:13:10,190 --> 00:13:15,850
at<font color="#CCCCCC"> fault in one of the state bytes</font><font color="#E5E5E5"> and</font>

295
00:13:12,190 --> 00:13:18,680
if you do<font color="#E5E5E5"> that then intuitively in</font>

296
00:13:15,850 --> 00:13:21,110
beautifully am<font color="#CCCCCC"> afford is only going</font><font color="#E5E5E5"> to</font>

297
00:13:18,680 --> 00:13:23,269
be ineffective<font color="#E5E5E5"> in about one out</font><font color="#CCCCCC"> of 256</font>

298
00:13:21,110 --> 00:13:25,250
cases<font color="#E5E5E5"> meaning that if you want to</font>

299
00:13:23,269 --> 00:13:28,880
<font color="#E5E5E5">collect about five correct cipher texts</font>

300
00:13:25,250 --> 00:13:32,510
you need about<font color="#E5E5E5"> 1300 faulted encryptions</font>

301
00:13:28,880 --> 00:13:36,050
<font color="#E5E5E5">and this was enough to recover</font><font color="#CCCCCC"> kibitz</font>

302
00:13:32,510 --> 00:13:37,670
<font color="#E5E5E5">for this implementation now we also</font>

303
00:13:36,050 --> 00:13:40,760
perform<font color="#CCCCCC"> the same experiment on another</font>

304
00:13:37,670 --> 00:13:43,219
device for<font color="#E5E5E5"> December and 80s mega 256 a</font>

305
00:13:40,760 --> 00:13:45,769
free this<font color="#E5E5E5"> time</font><font color="#CCCCCC"> we didn't</font><font color="#E5E5E5"> really target</font><font color="#CCCCCC"> a</font>

306
00:13:43,220 --> 00:13:46,760
software is<font color="#CCCCCC"> implantation</font><font color="#E5E5E5"> but and had</font>

307
00:13:45,769 --> 00:13:49,910
<font color="#CCCCCC">harass coprocessor</font>

308
00:13:46,760 --> 00:13:52,699
on this microprocessor<font color="#CCCCCC"> now as you can</font>

309
00:13:49,910 --> 00:13:55,219
<font color="#E5E5E5">see the numbers are quite different the</font>

310
00:13:52,699 --> 00:13:57,290
<font color="#CCCCCC">number of</font><font color="#E5E5E5"> faulty encryptions is similar</font>

311
00:13:55,220 --> 00:14:00,890
however the number of<font color="#E5E5E5"> correct cipher</font>

312
00:13:57,290 --> 00:14:02,839
<font color="#E5E5E5">texts is quite different so why would</font>

313
00:14:00,890 --> 00:14:03,980
<font color="#CCCCCC">that be well</font><font color="#E5E5E5"> the problem here is</font><font color="#CCCCCC"> we</font>

314
00:14:02,839 --> 00:14:05,870
don't<font color="#CCCCCC"> really</font><font color="#E5E5E5"> know what our fault</font>

315
00:14:03,980 --> 00:14:08,480
actually did to this implantation here

316
00:14:05,870 --> 00:14:09,889
for the<font color="#E5E5E5"> hardware RS coprocessor so we</font>

317
00:14:08,480 --> 00:14:11,779
cannot really<font color="#E5E5E5"> tell but</font>

318
00:14:09,889 --> 00:14:15,049
all that we<font color="#CCCCCC"> actually care about</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

319
00:14:11,779 --> 00:14:16,549
<font color="#CCCCCC">the attack works</font><font color="#E5E5E5"> so you can see even on</font>

320
00:14:15,049 --> 00:14:18,709
quite different platforms<font color="#E5E5E5"> you can</font>

321
00:14:16,549 --> 00:14:21,139
<font color="#CCCCCC">achieve similar results even if you</font>

322
00:14:18,709 --> 00:14:22,459
don't really even if<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> even if</font>

323
00:14:21,139 --> 00:14:26,540
you do<font color="#E5E5E5"> not really know what</font><font color="#CCCCCC"> your Ford is</font>

324
00:14:22,459 --> 00:14:27,888
actually doing<font color="#CCCCCC"> now I also talked about</font>

325
00:14:26,540 --> 00:14:31,189
<font color="#E5E5E5">infection countermeasures at the</font>

326
00:14:27,889 --> 00:14:33,589
beginning so how about them<font color="#E5E5E5"> so in order</font>

327
00:14:31,189 --> 00:14:35,029
to test<font color="#CCCCCC"> our attacks against infection</font>

328
00:14:33,589 --> 00:14:38,929
countermeasures we had a look<font color="#E5E5E5"> at an</font>

329
00:14:35,029 --> 00:14:42,319
<font color="#E5E5E5">implementation from</font><font color="#CCCCCC"> oops a mudra a tour</font>

330
00:14:38,929 --> 00:14:44,059
and here it's<font color="#E5E5E5"> basically we took</font><font color="#CCCCCC"> and</font>

331
00:14:42,319 --> 00:14:45,889
software<font color="#CCCCCC"> RS and on top of that we</font>

332
00:14:44,059 --> 00:14:49,219
implemented<font color="#E5E5E5"> this infection</font>

333
00:14:45,889 --> 00:14:51,109
countermeasure so in this case for

334
00:14:49,220 --> 00:14:54,859
<font color="#E5E5E5">example and this would mean</font><font color="#CCCCCC"> that our s</font>

335
00:14:51,109 --> 00:14:56,899
consists of<font color="#E5E5E5"> 22 will arounds and</font><font color="#CCCCCC"> 11th</font>

336
00:14:54,859 --> 00:14:58,879
<font color="#CCCCCC">damnit dummy rounds</font><font color="#E5E5E5"> and then the attack</font>

337
00:14:56,899 --> 00:15:01,100
is quite the same<font color="#E5E5E5"> as before we simply</font>

338
00:14:58,879 --> 00:15:03,169
try to find around<font color="#CCCCCC"> nine</font><font color="#E5E5E5"> and it checked</font>

339
00:15:01,100 --> 00:15:04,939
some kind of<font color="#E5E5E5"> Ford in the earth and what</font>

340
00:15:03,169 --> 00:15:09,049
we can see for example in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> is</font>

341
00:15:04,939 --> 00:15:12,498
that<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 6500 faulted encryptions were</font>

342
00:15:09,049 --> 00:15:14,779
necessary<font color="#E5E5E5"> in order to</font><font color="#CCCCCC"> gather about 225</font>

343
00:15:12,499 --> 00:15:17,989
correct ciphertext which which was

344
00:15:14,779 --> 00:15:19,429
sufficient<font color="#CCCCCC"> to perform key</font><font color="#E5E5E5"> recovery now</font>

345
00:15:17,989 --> 00:15:21,470
you can play around<font color="#E5E5E5"> with the numbers</font>

346
00:15:19,429 --> 00:15:24,110
<font color="#E5E5E5">here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> increase the</font><font color="#CCCCCC"> number of dummy</font>

347
00:15:21,470 --> 00:15:27,649
rounds as you<font color="#E5E5E5"> like for</font><font color="#CCCCCC"> example if we use</font>

348
00:15:24,110 --> 00:15:30,529
<font color="#E5E5E5">a 22</font><font color="#CCCCCC"> instead of</font><font color="#E5E5E5"> 11</font><font color="#CCCCCC"> Tammy rounds we can</font>

349
00:15:27,649 --> 00:15:32,029
see that<font color="#CCCCCC"> the number of</font><font color="#E5E5E5"> 40 encryptions</font>

350
00:15:30,529 --> 00:15:35,839
that are needed for<font color="#E5E5E5"> the attack</font><font color="#CCCCCC"> increases</font>

351
00:15:32,029 --> 00:15:38,049
from roughly 6,000 to 9,000<font color="#E5E5E5"> and also for</font>

352
00:15:35,839 --> 00:15:41,749
<font color="#CCCCCC">66</font><font color="#E5E5E5"> Tammy rounds we see for example</font>

353
00:15:38,049 --> 00:15:43,549
<font color="#E5E5E5">roughly 46 thousand for the encryptions</font>

354
00:15:41,749 --> 00:15:48,949
that are needed<font color="#E5E5E5"> in order to attack such</font>

355
00:15:43,549 --> 00:15:52,220
an implementation now in summary

356
00:15:48,949 --> 00:15:55,279
<font color="#CCCCCC">Seifer is a new kind of fold attack that</font>

357
00:15:52,220 --> 00:15:56,720
actually defines<font color="#E5E5E5"> device popular</font><font color="#CCCCCC"> file</font>

358
00:15:55,279 --> 00:15:59,059
<font color="#E5E5E5">confirmations like detection and</font>

359
00:15:56,720 --> 00:16:01,970
infection<font color="#E5E5E5"> it does require quite a lot</font>

360
00:15:59,059 --> 00:16:05,269
more for the encryption than for some

361
00:16:01,970 --> 00:16:07,459
rate differential for the tag but the

362
00:16:05,269 --> 00:16:09,649
nice thing<font color="#CCCCCC"> here is that we only need</font><font color="#E5E5E5"> one</font>

363
00:16:07,459 --> 00:16:11,449
<font color="#E5E5E5">folded encryption one for pair</font>

364
00:16:09,649 --> 00:16:13,009
encryption independent of how much

365
00:16:11,449 --> 00:16:15,769
<font color="#E5E5E5">redundancy is actually used in your</font>

366
00:16:13,009 --> 00:16:17,329
implementation<font color="#CCCCCC"> we also do not really</font>

367
00:16:15,769 --> 00:16:20,089
need precise<font color="#CCCCCC"> fault locations they're</font>

368
00:16:17,329 --> 00:16:22,609
basically<font color="#CCCCCC"> very lot of choices when it</font>

369
00:16:20,089 --> 00:16:23,820
<font color="#E5E5E5">comes to when or where you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> check</font>

370
00:16:22,610 --> 00:16:27,540
<font color="#CCCCCC">the afford here</font>

371
00:16:23,820 --> 00:16:29,160
and has already<font color="#E5E5E5"> shown</font><font color="#CCCCCC"> discredit and type</font>

372
00:16:27,540 --> 00:16:32,219
of<font color="#CCCCCC"> attackers with many different kinds</font>

373
00:16:29,160 --> 00:16:33,689
<font color="#CCCCCC">of forts</font><font color="#E5E5E5"> even if it doesn't if even if</font>

374
00:16:32,220 --> 00:16:35,910
<font color="#CCCCCC">the effect isn't</font><font color="#E5E5E5"> really known to the</font>

375
00:16:33,690 --> 00:16:38,010
attacker<font color="#E5E5E5"> which also makes this probably</font>

376
00:16:35,910 --> 00:16:39,990
a quite compelling<font color="#CCCCCC"> choice for attacks</font>

377
00:16:38,010 --> 00:16:43,410
against<font color="#E5E5E5"> implementations very do not even</font>

378
00:16:39,990 --> 00:16:45,180
know the implementation now<font color="#E5E5E5"> there</font>

379
00:16:43,410 --> 00:16:49,920
already exists<font color="#E5E5E5"> and to</font><font color="#CCCCCC"> fall upwards to</font>

380
00:16:45,180 --> 00:16:52,339
this to this paper<font color="#CCCCCC"> and one of those was</font>

381
00:16:49,920 --> 00:16:54,660
presented at<font color="#E5E5E5"> sac about a month ago</font><font color="#CCCCCC"> so</font>

382
00:16:52,340 --> 00:16:57,420
<font color="#CCCCCC">there</font><font color="#E5E5E5"> I had a look at how indicated</font>

383
00:16:54,660 --> 00:16:59,640
encryption schemes<font color="#E5E5E5"> and even though we</font>

384
00:16:57,420 --> 00:17:02,339
had a specific<font color="#E5E5E5"> look at sponge based</font>

385
00:16:59,640 --> 00:17:04,589
schemes<font color="#E5E5E5"> there would likely take him as</font>

386
00:17:02,340 --> 00:17:06,209
<font color="#CCCCCC">takeaway message here is that this</font><font color="#E5E5E5"> kind</font>

387
00:17:04,589 --> 00:17:07,948
of fault attack works against pretty

388
00:17:06,209 --> 00:17:10,860
much all of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> authenticated encryption</font>

389
00:17:07,949 --> 00:17:12,750
schemes<font color="#E5E5E5"> for</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> or the c4 finalists</font>

390
00:17:10,859 --> 00:17:16,589
as sorry

391
00:17:12,750 --> 00:17:18,569
<font color="#E5E5E5">these were finalists</font><font color="#CCCCCC"> there is another</font>

392
00:17:16,589 --> 00:17:21,448
<font color="#E5E5E5">follow-up work that will be presented</font><font color="#CCCCCC"> at</font>

393
00:17:18,569 --> 00:17:23,300
<font color="#E5E5E5">Asia crypt and here basically explore</font>

394
00:17:21,449 --> 00:17:25,770
how this attack performs against

395
00:17:23,300 --> 00:17:27,869
implementations<font color="#CCCCCC"> that use masking on top</font>

396
00:17:25,770 --> 00:17:30,240
of having<font color="#CCCCCC"> already some kind of fault</font>

397
00:17:27,869 --> 00:17:32,669
countermeasure<font color="#CCCCCC"> and</font><font color="#E5E5E5"> here the takeaway</font>

398
00:17:30,240 --> 00:17:35,490
message<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that it basically performs</font>

399
00:17:32,670 --> 00:17:38,040
equally well with<font color="#E5E5E5"> no overhead even if</font>

400
00:17:35,490 --> 00:17:40,740
you just<font color="#E5E5E5"> hit a single share of some kind</font>

401
00:17:38,040 --> 00:17:43,350
<font color="#E5E5E5">of shared um implementation so</font>

402
00:17:40,740 --> 00:17:45,660
<font color="#E5E5E5">essentially this attack is a independent</font>

403
00:17:43,350 --> 00:17:48,780
<font color="#CCCCCC">of the degree of masking and</font><font color="#E5E5E5"> redundancy</font>

404
00:17:45,660 --> 00:17:52,920
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you are using in your cryptographic</font>

405
00:17:48,780 --> 00:17:55,280
implementation<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much for</font>

406
00:17:52,920 --> 00:17:55,280
<font color="#E5E5E5">your attention</font>

407
00:17:57,980 --> 00:18:14,690
so what the from the sake of<font color="#E5E5E5"> time we'll</font>

408
00:18:01,110 --> 00:18:17,100
just<font color="#E5E5E5"> take one question hello okay so</font>

409
00:18:14,690 --> 00:18:19,230
would<font color="#CCCCCC"> a counter of reasonable</font><font color="#E5E5E5"> counter</font>

410
00:18:17,100 --> 00:18:22,500
measure for this attack just be that the

411
00:18:19,230 --> 00:18:24,690
<font color="#E5E5E5">the</font><font color="#CCCCCC"> encryption module shuts down or</font>

412
00:18:22,500 --> 00:18:27,540
refuses to use the key anymore once it

413
00:18:24,690 --> 00:18:29,940
detects one<font color="#E5E5E5"> fault in the encryption yes</font>

414
00:18:27,540 --> 00:18:32,280
sure so as you have seen<font color="#CCCCCC"> we need quite a</font>

415
00:18:29,940 --> 00:18:33,870
<font color="#E5E5E5">lot more on faulty</font><font color="#CCCCCC"> decryptions in order</font>

416
00:18:32,280 --> 00:18:35,460
to get is working<font color="#E5E5E5"> for example compared</font>

417
00:18:33,870 --> 00:18:37,350
<font color="#CCCCCC">to on</font><font color="#E5E5E5"> differential for detect</font><font color="#CCCCCC"> so if you</font>

418
00:18:35,460 --> 00:18:39,630
have some kind<font color="#E5E5E5"> of mechanism that detects</font>

419
00:18:37,350 --> 00:18:41,399
a certain number<font color="#CCCCCC"> of faults and it is</font>

420
00:18:39,630 --> 00:18:57,090
able<font color="#E5E5E5"> to shut down the</font><font color="#CCCCCC"> device or destroy</font>

421
00:18:41,400 --> 00:18:58,920
it even<font color="#E5E5E5"> this could work yes okay yes the</font>

422
00:18:57,090 --> 00:19:02,129
differential fault attack that<font color="#E5E5E5"> you</font>

423
00:18:58,920 --> 00:19:04,050
showed in the<font color="#CCCCCC"> applet slide number</font><font color="#E5E5E5"> three</font>

424
00:19:02,130 --> 00:19:07,440
does it work for<font color="#CCCCCC"> non deterministic</font>

425
00:19:04,050 --> 00:19:09,659
<font color="#E5E5E5">encryption schemas sorry for what does</font>

426
00:19:07,440 --> 00:19:19,200
it work for non deterministic<font color="#E5E5E5"> encryption</font>

427
00:19:09,660 --> 00:19:22,080
schemes<font color="#E5E5E5"> I'm not sure actually encryption</font>

428
00:19:19,200 --> 00:19:23,910
<font color="#E5E5E5">with randomization like like</font><font color="#CCCCCC"> non</font>

429
00:19:22,080 --> 00:19:26,699
<font color="#CCCCCC">deterministic it means when you in kept</font>

430
00:19:23,910 --> 00:19:29,090
the same plaintext like multiple times

431
00:19:26,700 --> 00:19:33,300
<font color="#CCCCCC">you get difference I have taken</font>

432
00:19:29,090 --> 00:19:35,870
oh you mean if differential<font color="#CCCCCC"> falltech</font>

433
00:19:33,300 --> 00:19:38,490
works there<font color="#CCCCCC"> or if the sefer works there</font>

434
00:19:35,870 --> 00:19:40,530
it's the same plaintext<font color="#CCCCCC"> if you encrypt</font>

435
00:19:38,490 --> 00:19:43,140
it like twice<font color="#E5E5E5"> yeah you get different</font>

436
00:19:40,530 --> 00:19:45,360
ciphertext yeah<font color="#E5E5E5"> so this attack also</font>

437
00:19:43,140 --> 00:19:47,250
<font color="#E5E5E5">works in this case yeah sure sure</font><font color="#CCCCCC"> okay</font>

438
00:19:45,360 --> 00:19:48,570
for example if you look at<font color="#E5E5E5"> the results</font>

439
00:19:47,250 --> 00:19:50,070
<font color="#CCCCCC">here against the authenticated</font>

440
00:19:48,570 --> 00:19:52,050
encryption<font color="#E5E5E5"> of course some of them are</font>

441
00:19:50,070 --> 00:19:54,679
<font color="#E5E5E5">not spaced and there you basically</font><font color="#CCCCCC"> have</font>

442
00:19:52,050 --> 00:19:56,879
to<font color="#CCCCCC"> have this property that you know not</font>

443
00:19:54,680 --> 00:20:00,270
plain so this is never<font color="#E5E5E5"> cooked</font><font color="#CCCCCC"> to the</font>

444
00:19:56,880 --> 00:20:02,820
<font color="#CCCCCC">same</font><font color="#E5E5E5"> ciphertext yeah sure</font><font color="#CCCCCC"> thank you this</font>

445
00:20:00,270 --> 00:20:05,410
is<font color="#CCCCCC"> a ciphertext</font><font color="#E5E5E5"> only attack yeah let's</font>

446
00:20:02,820 --> 00:20:06,159
<font color="#E5E5E5">hang the speaker for the sake of time</font>

447
00:20:05,410 --> 00:20:09,380
[Applause]

448
00:20:06,160 --> 00:20:09,380
[Music]

