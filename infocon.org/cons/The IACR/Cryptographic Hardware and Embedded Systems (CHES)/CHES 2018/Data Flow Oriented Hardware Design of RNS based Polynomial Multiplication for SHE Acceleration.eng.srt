1
00:00:00,030 --> 00:00:06,180
so<font color="#E5E5E5"> since there</font><font color="#CCCCCC"> is no</font><font color="#E5E5E5"> more question we</font>

2
00:00:02,280 --> 00:00:07,798
will<font color="#E5E5E5"> move to the next door which is</font>

3
00:00:06,180 --> 00:00:11,070
<font color="#E5E5E5">entitled a</font><font color="#CCCCCC"> dataflow</font>

4
00:00:07,799 --> 00:00:14,269
oriented<font color="#CCCCCC"> adware design of</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> S based</font>

5
00:00:11,070 --> 00:00:17,880
polynomial multiplication for<font color="#CCCCCC"> sh e</font>

6
00:00:14,269 --> 00:00:21,210
acceleration by show<font color="#CCCCCC"> El Khatib has Alex</font>

7
00:00:17,880 --> 00:00:23,990
on carbon<font color="#E5E5E5"> Peter</font><font color="#CCCCCC"> Miller Hornaday and</font>

8
00:00:21,210 --> 00:00:29,070
Nicole<font color="#CCCCCC"> Avant who</font><font color="#E5E5E5"> enjoy will</font><font color="#CCCCCC"> leap toward</font>

9
00:00:23,990 --> 00:00:31,589
<font color="#E5E5E5">thank you good afternoon I'm glad to be</font>

10
00:00:29,070 --> 00:00:35,450
<font color="#E5E5E5">here to be able to present the result of</font>

11
00:00:31,590 --> 00:00:37,890
some work<font color="#E5E5E5"> so I will talk about</font><font color="#CCCCCC"> dataflow</font>

12
00:00:35,450 --> 00:00:41,780
oriented<font color="#CCCCCC"> at were designed for</font><font color="#E5E5E5"> Aaron is</font>

13
00:00:37,890 --> 00:00:44,370
based polynomial multiplication<font color="#E5E5E5"> for</font><font color="#CCCCCC"> SHG</font>

14
00:00:41,780 --> 00:00:46,710
acceleration as a chief or somewhat or

15
00:00:44,370 --> 00:00:50,760
Momofuku encryption and I'm<font color="#E5E5E5"> really glad</font>

16
00:00:46,710 --> 00:00:53,149
that<font color="#E5E5E5"> the previous talk present a bit</font>

17
00:00:50,760 --> 00:00:59,300
<font color="#E5E5E5">what I will discuss here</font>

18
00:00:53,149 --> 00:01:06,030
so in particular<font color="#E5E5E5"> I focus on</font><font color="#CCCCCC"> lwe based</font>

19
00:00:59,300 --> 00:01:09,030
scheme and the FV scheme so in<font color="#CCCCCC"> al w e</font>

20
00:01:06,030 --> 00:01:12,270
<font color="#E5E5E5">based scheme we have</font><font color="#CCCCCC"> two under element</font>

21
00:01:09,030 --> 00:01:15,600
of polynomial rings and in the case of

22
00:01:12,270 --> 00:01:17,759
<font color="#E5E5E5">homomorphic encryption those polynomials</font>

23
00:01:15,600 --> 00:01:22,189
get really large because if someone

24
00:01:17,759 --> 00:01:24,710
wants to compute a great number<font color="#E5E5E5"> of</font>

25
00:01:22,189 --> 00:01:28,740
multiplication in the encrypted<font color="#E5E5E5"> domain</font>

26
00:01:24,710 --> 00:01:31,829
<font color="#CCCCCC">he want to increase the</font><font color="#E5E5E5"> noise god of the</font>

27
00:01:28,740 --> 00:01:36,119
ciphertext<font color="#E5E5E5"> and to do that he increase</font>

28
00:01:31,829 --> 00:01:38,758
<font color="#E5E5E5">the size of the coefficients but for</font>

29
00:01:36,119 --> 00:01:40,920
<font color="#CCCCCC">security reasons the degree also as to</font>

30
00:01:38,759 --> 00:01:43,610
get larger<font color="#E5E5E5"> and so both the degree and</font>

31
00:01:40,920 --> 00:01:47,420
the coefficient<font color="#E5E5E5"> size become problematic</font>

32
00:01:43,610 --> 00:01:50,850
<font color="#E5E5E5">so one way to address the complexity of</font>

33
00:01:47,420 --> 00:01:54,299
<font color="#CCCCCC">large</font><font color="#E5E5E5"> coefficient is to use the residue</font>

34
00:01:50,850 --> 00:01:57,770
<font color="#CCCCCC">number system in this representation</font>

35
00:01:54,299 --> 00:02:03,030
<font color="#E5E5E5">according</font><font color="#CCCCCC"> to basis of</font><font color="#E5E5E5"> co-prime modulae a</font>

36
00:01:57,770 --> 00:02:07,020
large operation using multi precision

37
00:02:03,030 --> 00:02:10,759
arithmetic<font color="#E5E5E5"> become</font><font color="#CCCCCC"> K and dependent and</font>

38
00:02:07,020 --> 00:02:13,500
smaller operation in modular arithmetic

39
00:02:10,759 --> 00:02:17,060
<font color="#E5E5E5">so in 2016</font>

40
00:02:13,500 --> 00:02:21,240
by<font color="#E5E5E5"> Geritol</font><font color="#CCCCCC"> proposed full</font><font color="#E5E5E5"> arenas</font><font color="#CCCCCC"> variant</font>

41
00:02:17,060 --> 00:02:23,700
<font color="#E5E5E5">by modifying the decryption function and</font>

42
00:02:21,240 --> 00:02:26,880
the multiplication<font color="#E5E5E5"> and</font><font color="#CCCCCC"> ruin ization and</font>

43
00:02:23,700 --> 00:02:30,600
this year<font color="#CCCCCC"> alleviate all</font><font color="#E5E5E5"> fizzers</font>

44
00:02:26,880 --> 00:02:32,579
<font color="#CCCCCC">simplified</font><font color="#E5E5E5"> this variant and we note that</font>

45
00:02:30,600 --> 00:02:34,829
<font color="#E5E5E5">the performance bottleneck is still</font>

46
00:02:32,580 --> 00:02:38,790
located<font color="#E5E5E5"> on the residual polynomial</font>

47
00:02:34,830 --> 00:02:42,210
multiplication<font color="#CCCCCC"> and one way to</font><font color="#E5E5E5"> address</font>

48
00:02:38,790 --> 00:02:46,290
those is through the negative<font color="#E5E5E5"> rapid</font>

49
00:02:42,210 --> 00:02:49,680
convolution<font color="#E5E5E5"> so with negative rapid</font>

50
00:02:46,290 --> 00:02:52,590
convolution we don't need any<font color="#E5E5E5"> polynomial</font>

51
00:02:49,680 --> 00:02:55,020
model<font color="#E5E5E5"> reduction anymore but this</font>

52
00:02:52,590 --> 00:02:58,200
restrict the choice of the polynomial

53
00:02:55,020 --> 00:03:01,470
<font color="#CCCCCC">rings and also the element of the</font>

54
00:02:58,200 --> 00:03:04,560
arena's basis and in furthermore we have

55
00:03:01,470 --> 00:03:06,540
to compute a number<font color="#CCCCCC"> of value which is</font>

56
00:03:04,560 --> 00:03:10,010
dependent on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> degree of</font><font color="#E5E5E5"> the</font>

57
00:03:06,540 --> 00:03:14,489
polynomial and<font color="#E5E5E5"> the airline</font><font color="#CCCCCC"> especi size</font>

58
00:03:10,010 --> 00:03:16,679
so in the<font color="#E5E5E5"> literature</font><font color="#CCCCCC"> we note</font><font color="#E5E5E5"> that there</font>

59
00:03:14,490 --> 00:03:19,400
<font color="#E5E5E5">is still some trouble to define a</font>

60
00:03:16,680 --> 00:03:22,380
scalable scalable<font color="#CCCCCC"> Hardware approach</font>

61
00:03:19,400 --> 00:03:24,780
because if someone wants to<font color="#E5E5E5"> address the</font>

62
00:03:22,380 --> 00:03:27,900
polynomial multiplication with algorithm

63
00:03:24,780 --> 00:03:30,630
that are less costly<font color="#E5E5E5"> than</font><font color="#CCCCCC"> the entity</font><font color="#E5E5E5"> we</font>

64
00:03:27,900 --> 00:03:34,739
have to face some asymptotic complexity

65
00:03:30,630 --> 00:03:39,720
issues and if we choose the<font color="#CCCCCC"> best known</font>

66
00:03:34,739 --> 00:03:42,780
as a boutique approach we have to under

67
00:03:39,720 --> 00:03:45,150
those twiddle factors that has an impact

68
00:03:42,780 --> 00:03:49,530
<font color="#E5E5E5">on the communication</font><font color="#CCCCCC"> bandwidth with the</font>

69
00:03:45,150 --> 00:03:52,260
accelerator or<font color="#E5E5E5"> on the storage cost so</font>

70
00:03:49,530 --> 00:03:55,049
here we propose<font color="#CCCCCC"> just a step forward in</font>

71
00:03:52,260 --> 00:03:57,989
<font color="#E5E5E5">the definition of a scalable</font><font color="#CCCCCC"> Hardware</font>

72
00:03:55,049 --> 00:03:59,610
approach through data Florian Ted

73
00:03:57,989 --> 00:04:01,769
negative<font color="#CCCCCC"> rapid convolution with</font>

74
00:03:59,610 --> 00:04:06,510
on-the-fly computation of<font color="#E5E5E5"> all the</font>

75
00:04:01,769 --> 00:04:10,230
twiddle factors so all<font color="#E5E5E5"> architecture</font>

76
00:04:06,510 --> 00:04:12,600
principle is to compute a negative<font color="#CCCCCC"> rapid</font>

77
00:04:10,230 --> 00:04:16,640
convolution in a single flow with two

78
00:04:12,600 --> 00:04:19,260
parallel<font color="#E5E5E5"> paths the data</font><font color="#CCCCCC"> path</font><font color="#E5E5E5"> compute the</font>

79
00:04:16,640 --> 00:04:21,988
negative<font color="#CCCCCC"> rapid convolution on the</font>

80
00:04:19,260 --> 00:04:25,140
polynomials<font color="#E5E5E5"> by first the pre-computation</font>

81
00:04:21,988 --> 00:04:27,388
phase that needs the powers of the end

82
00:04:25,140 --> 00:04:32,490
primitive root of<font color="#CCCCCC"> -1</font>

83
00:04:27,389 --> 00:04:35,819
then it performed the forward entities

84
00:04:32,490 --> 00:04:38,129
<font color="#E5E5E5">the inner product the backward entity</font>

85
00:04:35,819 --> 00:04:42,240
and finally the post computation that

86
00:04:38,129 --> 00:04:45,000
<font color="#E5E5E5">require to plot the powers of the</font><font color="#CCCCCC"> invert</font>

87
00:04:42,240 --> 00:04:49,530
<font color="#CCCCCC">port</font><font color="#E5E5E5"> of the primitive root of</font><font color="#CCCCCC"> minus 1</font>

88
00:04:45,000 --> 00:04:54,840
and in the parallel<font color="#CCCCCC"> path we compute the</font>

89
00:04:49,530 --> 00:04:59,068
deuce<font color="#E5E5E5"> twiddle factors values first</font><font color="#CCCCCC"> we</font>

90
00:04:54,840 --> 00:05:02,758
generate the first half of the required

91
00:04:59,069 --> 00:05:06,750
<font color="#CCCCCC">twiddles from a greatly reduced</font><font color="#E5E5E5"> number</font>

92
00:05:02,759 --> 00:05:11,219
of<font color="#E5E5E5"> seeds then we compute the other half</font>

93
00:05:06,750 --> 00:05:14,520
of the required twiddle factors<font color="#E5E5E5"> by using</font>

94
00:05:11,219 --> 00:05:17,219
the fact<font color="#CCCCCC"> that</font><font color="#E5E5E5"> C is a primitive root of</font>

95
00:05:14,520 --> 00:05:20,128
<font color="#E5E5E5">minus 1 so we only need some subtractors</font>

96
00:05:17,219 --> 00:05:24,360
and to reorder the sequence<font color="#E5E5E5"> and finally</font>

97
00:05:20,129 --> 00:05:27,750
we just<font color="#E5E5E5"> scale the second</font><font color="#CCCCCC"> elf of</font><font color="#E5E5E5"> those</font>

98
00:05:24,360 --> 00:05:33,270
twiddle factors<font color="#E5E5E5"> by the inverse of n over</font>

99
00:05:27,750 --> 00:05:36,319
the considered drainage<font color="#E5E5E5"> channel so in</font>

100
00:05:33,270 --> 00:05:40,049
this approach<font color="#E5E5E5"> we are two</font><font color="#CCCCCC"> main challenge</font>

101
00:05:36,319 --> 00:05:43,469
<font color="#CCCCCC">first it was to generate</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> elves</font>

102
00:05:40,050 --> 00:05:45,750
<font color="#E5E5E5">of the first half of the seconds of the</font>

103
00:05:43,469 --> 00:05:49,669
twiddle factors with<font color="#E5E5E5"> the same throughput</font>

104
00:05:45,750 --> 00:05:55,469
<font color="#E5E5E5">as the data path and</font><font color="#CCCCCC"> second a way to</font>

105
00:05:49,669 --> 00:05:57,389
generate entity design that is a

106
00:05:55,469 --> 00:06:00,389
drainage<font color="#E5E5E5"> channel and dependent because</font>

107
00:05:57,389 --> 00:06:04,770
we need to<font color="#E5E5E5"> change the arena's channel on</font>

108
00:06:00,389 --> 00:06:07,560
the flow without big impact on

109
00:06:04,770 --> 00:06:09,330
performances<font color="#E5E5E5"> so I will in this</font>

110
00:06:07,560 --> 00:06:12,779
presentation I<font color="#CCCCCC"> will only</font><font color="#E5E5E5"> focus on</font><font color="#CCCCCC"> the</font>

111
00:06:09,330 --> 00:06:15,990
second challenge<font color="#E5E5E5"> so our starting</font><font color="#CCCCCC"> point</font>

112
00:06:12,779 --> 00:06:18,330
<font color="#CCCCCC">was discrete</font><font color="#E5E5E5"> Fourier transform</font><font color="#CCCCCC"> our word</font>

113
00:06:15,990 --> 00:06:21,569
generator proposed by Peter Midler in

114
00:06:18,330 --> 00:06:24,180
the context<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> spirit project so the</font>

115
00:06:21,569 --> 00:06:28,169
spiral projects to<font color="#E5E5E5"> this automation</font><font color="#CCCCCC"> of</font>

116
00:06:24,180 --> 00:06:32,339
hardware and<font color="#E5E5E5"> software for digital signal</font>

117
00:06:28,169 --> 00:06:34,979
processing<font color="#E5E5E5"> domain and in particular we</font>

118
00:06:32,339 --> 00:06:38,699
were really<font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the design</font>

119
00:06:34,979 --> 00:06:40,030
space exploration capability of this DFT

120
00:06:38,699 --> 00:06:43,810
generator

121
00:06:40,030 --> 00:06:46,359
so<font color="#E5E5E5"> to transpose to entity we first have</font>

122
00:06:43,810 --> 00:06:49,330
to<font color="#CCCCCC"> change the generated complex</font>

123
00:06:46,360 --> 00:06:52,380
arithmetic into modular<font color="#E5E5E5"> automatic and</font>

124
00:06:49,330 --> 00:06:56,969
for<font color="#E5E5E5"> this we met the choice to use</font>

125
00:06:52,380 --> 00:06:59,890
<font color="#CCCCCC">Prime's for the arena's basis as</font>

126
00:06:56,970 --> 00:07:04,330
selected by<font color="#CCCCCC"> the NFL e prime selection</font>

127
00:06:59,890 --> 00:07:07,210
and all the modular operation<font color="#E5E5E5"> in</font>

128
00:07:04,330 --> 00:07:09,370
particular multiplication we use<font color="#E5E5E5"> Barrett</font>

129
00:07:07,210 --> 00:07:12,969
<font color="#E5E5E5">slightly modified Barrett modular</font>

130
00:07:09,370 --> 00:07:16,180
reductions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the second step was to</font>

131
00:07:12,970 --> 00:07:19,990
modify the twiddle factor and<font color="#CCCCCC"> linked in</font>

132
00:07:16,180 --> 00:07:24,520
particular<font color="#E5E5E5"> this is an example of</font><font color="#CCCCCC"> fully</font>

133
00:07:19,990 --> 00:07:28,140
<font color="#CCCCCC">streaming piece entity and</font><font color="#E5E5E5"> I highlight</font>

134
00:07:24,520 --> 00:07:31,840
in brown in brown all<font color="#E5E5E5"> the arena's</font>

135
00:07:28,140 --> 00:07:36,580
channel specific values and we had to

136
00:07:31,840 --> 00:07:40,000
make those data pass and depend out of

137
00:07:36,580 --> 00:07:43,270
the arena channel so what we did is that

138
00:07:40,000 --> 00:07:47,100
<font color="#E5E5E5">we extract all those arenas specific</font>

139
00:07:43,270 --> 00:07:51,969
elements and concatenate<font color="#E5E5E5"> them into some</font>

140
00:07:47,100 --> 00:07:54,880
module that we call<font color="#CCCCCC"> tweedle bank so and</font>

141
00:07:51,970 --> 00:07:58,120
in practice we instantiate<font color="#E5E5E5"> up to</font><font color="#CCCCCC"> G</font>

142
00:07:54,880 --> 00:08:03,820
different<font color="#CCCCCC"> twiddle banks so just enough</font>

143
00:07:58,120 --> 00:08:08,169
to reprogram<font color="#E5E5E5"> one and to have enough to</font>

144
00:08:03,820 --> 00:08:14,110
to feed all the entity data<font color="#E5E5E5"> path entity</font>

145
00:08:08,169 --> 00:08:19,950
stage<font color="#CCCCCC"> in the entity</font><font color="#E5E5E5"> data path so each</font>

146
00:08:14,110 --> 00:08:22,960
stage<font color="#CCCCCC"> launch sang current as generate</font>

147
00:08:19,950 --> 00:08:25,780
synchronization signals over<font color="#CCCCCC"> which a</font>

148
00:08:22,960 --> 00:08:28,570
control module will drive the

149
00:08:25,780 --> 00:08:32,799
<font color="#CCCCCC">interconnect</font><font color="#E5E5E5"> from the different twiddle</font>

150
00:08:28,570 --> 00:08:36,189
banks to feed each stage of the entity

151
00:08:32,799 --> 00:08:40,900
in this<font color="#E5E5E5"> similar way we are generating</font>

152
00:08:36,190 --> 00:08:42,849
<font color="#E5E5E5">all the</font><font color="#CCCCCC"> Reed addresses to address the</font>

153
00:08:40,900 --> 00:08:46,150
memories inside<font color="#CCCCCC"> the different twiddle</font>

154
00:08:42,849 --> 00:08:49,030
banks and finally we had<font color="#CCCCCC"> to make those</font>

155
00:08:46,150 --> 00:08:53,670
<font color="#E5E5E5">toodle banks programmable and to do so</font>

156
00:08:49,030 --> 00:08:58,439
we instantiate<font color="#E5E5E5"> to program</font><font color="#CCCCCC"> a module</font>

157
00:08:53,670 --> 00:09:03,000
that associate to programming tweedle

158
00:08:58,440 --> 00:09:05,820
flow<font color="#E5E5E5"> program</font><font color="#CCCCCC"> toodle flow a</font><font color="#E5E5E5"> right address</font>

159
00:09:03,000 --> 00:09:09,650
and<font color="#CCCCCC"> the right enable signals for each</font>

160
00:09:05,820 --> 00:09:15,900
memory element inside the<font color="#CCCCCC"> treadle bank</font>

161
00:09:09,650 --> 00:09:19,260
so to do<font color="#CCCCCC"> so we just instantiate some</font>

162
00:09:15,900 --> 00:09:21,930
contours that<font color="#CCCCCC"> will extract from the</font>

163
00:09:19,260 --> 00:09:26,250
program at<font color="#E5E5E5"> twiddle flow the correct</font>

164
00:09:21,930 --> 00:09:31,050
<font color="#E5E5E5">twiddle factor for each memory element</font>

165
00:09:26,250 --> 00:09:34,620
inside the to the bank<font color="#E5E5E5"> so solving this</font>

166
00:09:31,050 --> 00:09:38,400
<font color="#E5E5E5">and all the other issue for the negative</font>

167
00:09:34,620 --> 00:09:40,500
<font color="#E5E5E5">rabbit convolution in a signal flow we</font>

168
00:09:38,400 --> 00:09:43,370
made a first<font color="#E5E5E5"> proof of concept</font>

169
00:09:40,500 --> 00:09:48,030
<font color="#E5E5E5">integration to try to take into account</font>

170
00:09:43,370 --> 00:09:54,140
<font color="#CCCCCC">the communication issues from the auth</font>

171
00:09:48,030 --> 00:10:00,329
<font color="#CCCCCC">and the accelerator</font><font color="#E5E5E5"> so this is just a</font>

172
00:09:54,140 --> 00:10:06,900
small wrapper<font color="#E5E5E5"> with a small module that</font>

173
00:10:00,330 --> 00:10:09,840
drive the PCIe<font color="#CCCCCC"> elements in on the board</font>

174
00:10:06,900 --> 00:10:14,480
on<font color="#E5E5E5"> which we made the experimentation</font><font color="#CCCCCC"> and</font>

175
00:10:09,840 --> 00:10:17,220
<font color="#E5E5E5">we were really interested</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

176
00:10:14,480 --> 00:10:21,390
bandwidth that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can achieve with this</font>

177
00:10:17,220 --> 00:10:25,230
module<font color="#E5E5E5"> and we are able to write on the</font>

178
00:10:21,390 --> 00:10:29,569
FPGA<font color="#E5E5E5"> at about</font><font color="#CCCCCC"> 4 gigabytes per second and</font>

179
00:10:25,230 --> 00:10:32,460
to read from the<font color="#CCCCCC"> SVG</font><font color="#E5E5E5"> a at about 2/3</font>

180
00:10:29,570 --> 00:10:37,920
gigabyte per second but<font color="#E5E5E5"> it was just to</font>

181
00:10:32,460 --> 00:10:43,010
check that the communication won't won't

182
00:10:37,920 --> 00:10:45,300
be a major issue<font color="#E5E5E5"> to fully</font><font color="#CCCCCC"> integrate and</font>

183
00:10:43,010 --> 00:10:50,250
we<font color="#CCCCCC"> highlight the more constraining</font>

184
00:10:45,300 --> 00:10:53,099
ratios for<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fvm approach but</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> were</font>

185
00:10:50,250 --> 00:10:56,280
really<font color="#CCCCCC"> interest</font><font color="#E5E5E5"> in the question</font>

186
00:10:53,100 --> 00:11:01,260
and<font color="#CCCCCC"> although this</font><font color="#E5E5E5"> approach scale in the</font>

187
00:10:56,280 --> 00:11:05,040
<font color="#E5E5E5">ACG context so first knowing all the</font>

188
00:11:01,260 --> 00:11:07,290
different part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> our design</font><font color="#E5E5E5"> behave</font>

189
00:11:05,040 --> 00:11:11,250
under the sizing parameters with

190
00:11:07,290 --> 00:11:13,980
we met some projection on what happened

191
00:11:11,250 --> 00:11:17,220
<font color="#E5E5E5">if we want</font><font color="#CCCCCC"> to increase</font><font color="#E5E5E5"> the degree of the</font>

192
00:11:13,980 --> 00:11:20,639
different<font color="#CCCCCC"> polynomials</font><font color="#E5E5E5"> and so we see that</font>

193
00:11:17,220 --> 00:11:24,269
in this case the B Rams<font color="#CCCCCC"> may</font><font color="#E5E5E5"> be</font>

194
00:11:20,639 --> 00:11:26,490
restrictive up to some<font color="#E5E5E5"> point and most of</font>

195
00:11:24,269 --> 00:11:32,639
the B Rams<font color="#E5E5E5"> are used for entity</font>

196
00:11:26,490 --> 00:11:35,639
permutations<font color="#E5E5E5"> but</font><font color="#CCCCCC"> for a given degree we</font>

197
00:11:32,639 --> 00:11:38,009
wanted to see or design<font color="#E5E5E5"> behave if we</font>

198
00:11:35,639 --> 00:11:41,730
increase the parallelism<font color="#CCCCCC"> so if we</font>

199
00:11:38,009 --> 00:11:51,959
increase<font color="#CCCCCC"> the number of word per cycle</font>

200
00:11:41,730 --> 00:11:54,029
<font color="#CCCCCC">and</font><font color="#E5E5E5"> under this under this when</font>

201
00:11:51,959 --> 00:11:56,459
<font color="#CCCCCC">increasing the parallelism we have a</font>

202
00:11:54,029 --> 00:11:59,189
great increase<font color="#E5E5E5"> in the DSP utilization</font>

203
00:11:56,459 --> 00:12:01,680
<font color="#E5E5E5">but also the required bandwidth to fully</font>

204
00:11:59,190 --> 00:12:04,790
load or accelerator is really really

205
00:12:01,680 --> 00:12:08,750
huge<font color="#E5E5E5"> so it may be not</font><font color="#CCCCCC"> the best way to</font>

206
00:12:04,790 --> 00:12:12,870
improve performances and finally<font color="#E5E5E5"> if</font>

207
00:12:08,750 --> 00:12:15,810
someone want<font color="#E5E5E5"> to change the prime size</font>

208
00:12:12,870 --> 00:12:20,880
<font color="#CCCCCC">elements or</font><font color="#E5E5E5"> the element of the arena's</font>

209
00:12:15,810 --> 00:12:23,369
<font color="#CCCCCC">Buzzy's we have balance it impact on DSP</font>

210
00:12:20,880 --> 00:12:26,339
and<font color="#CCCCCC"> B</font><font color="#E5E5E5"> ramuel ization but and up to some</font>

211
00:12:23,370 --> 00:12:31,079
<font color="#E5E5E5">point we may be restricted in the</font>

212
00:12:26,339 --> 00:12:34,980
bandwidth available<font color="#CCCCCC"> so regarding</font>

213
00:12:31,079 --> 00:12:40,349
performances in the case 3d<font color="#E5E5E5"> of the full</font>

214
00:12:34,980 --> 00:12:44,370
<font color="#CCCCCC">arenas variant</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Av we met some</font>

215
00:12:40,350 --> 00:12:48,029
projection on the timing<font color="#E5E5E5"> probe shown by</font>

216
00:12:44,370 --> 00:12:51,630
<font color="#CCCCCC">Olivia</font><font color="#E5E5E5"> tal this year and what we</font><font color="#CCCCCC"> look</font>

217
00:12:48,029 --> 00:12:54,170
it's<font color="#E5E5E5"> our approach seems to be to have a</font>

218
00:12:51,630 --> 00:12:57,569
<font color="#CCCCCC">speed-up that is rather</font><font color="#E5E5E5"> scalable with</font>

219
00:12:54,170 --> 00:13:04,740
with the increase of the parameter set

220
00:12:57,569 --> 00:13:07,469
and after<font color="#CCCCCC"> this acceleration</font><font color="#E5E5E5"> the new</font><font color="#CCCCCC"> fpm</font>

221
00:13:04,740 --> 00:13:10,470
timing is roughly<font color="#E5E5E5"> 15 percent</font><font color="#CCCCCC"> of the new</font>

222
00:13:07,470 --> 00:13:14,519
time so the bottleneck is now located<font color="#E5E5E5"> on</font>

223
00:13:10,470 --> 00:13:16,500
<font color="#E5E5E5">arena specific operations and for</font><font color="#CCCCCC"> a</font>

224
00:13:14,519 --> 00:13:19,439
<font color="#E5E5E5">given parameter set if we want to</font>

225
00:13:16,500 --> 00:13:21,089
increase<font color="#E5E5E5"> parallelism we have a greatly</font>

226
00:13:19,439 --> 00:13:24,769
<font color="#E5E5E5">improved pillar but</font>

227
00:13:21,089 --> 00:13:28,170
<font color="#E5E5E5">as we already saw in the previous slide</font>

228
00:13:24,769 --> 00:13:31,649
<font color="#CCCCCC">the boundaries is</font><font color="#E5E5E5"> really restrictive and</font>

229
00:13:28,170 --> 00:13:35,729
the DSP may become quickly<font color="#E5E5E5"> restrictive</font>

230
00:13:31,649 --> 00:13:39,059
also and for a<font color="#E5E5E5"> given parameter set if we</font>

231
00:13:35,730 --> 00:13:42,089
change the size<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> arena's basis</font>

232
00:13:39,059 --> 00:13:45,319
elements we slightly improve speed<font color="#CCCCCC"> off</font>

233
00:13:42,089 --> 00:13:48,959
<font color="#E5E5E5">because we reduce the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of</font>

234
00:13:45,319 --> 00:13:50,699
operation<font color="#CCCCCC"> that we have to convict the</font>

235
00:13:48,959 --> 00:13:52,758
number of residue polynomial

236
00:13:50,699 --> 00:13:57,930
multiplication that<font color="#CCCCCC"> we have to do and</font>

237
00:13:52,759 --> 00:14:04,680
this<font color="#CCCCCC"> under</font><font color="#E5E5E5"> balance</font><font color="#CCCCCC"> at DSP and by Rama's</font>

238
00:13:57,930 --> 00:14:08,758
age<font color="#CCCCCC"> so to conclude this work I will say</font>

239
00:14:04,680 --> 00:14:11,219
<font color="#E5E5E5">that for other implementation for</font><font color="#CCCCCC"> SHG we</font>

240
00:14:08,759 --> 00:14:14,189
should have a flexible approach because

241
00:14:11,220 --> 00:14:18,709
<font color="#E5E5E5">the refinement of parameter range is</font>

242
00:14:14,189 --> 00:14:21,079
still<font color="#E5E5E5"> in progress</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it seemed</font><font color="#CCCCCC"> that</font>

243
00:14:18,709 --> 00:14:23,729
multiplicative<font color="#CCCCCC"> debt</font><font color="#E5E5E5"> has significant</font>

244
00:14:21,079 --> 00:14:26,849
significant impact on both<font color="#E5E5E5"> the</font><font color="#CCCCCC"> degree</font>

245
00:14:23,730 --> 00:14:28,829
and<font color="#E5E5E5"> the coefficient size our response is</font>

246
00:14:26,850 --> 00:14:32,449
try<font color="#CCCCCC"> to</font><font color="#E5E5E5"> minimize the impact</font><font color="#CCCCCC"> of the</font>

247
00:14:28,829 --> 00:14:35,878
<font color="#E5E5E5">coefficient size on our hardware design</font>

248
00:14:32,449 --> 00:14:38,370
by computing on the fly the twiddle

249
00:14:35,879 --> 00:14:41,999
factors for negative rapid convolution

250
00:14:38,370 --> 00:14:44,910
and we try<font color="#E5E5E5"> to exploit the knowledge of</font>

251
00:14:41,999 --> 00:14:48,990
the digital signal processing community

252
00:14:44,910 --> 00:14:52,620
on the DFT the research perspective<font color="#CCCCCC"> is</font>

253
00:14:48,990 --> 00:14:55,829
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example we implement a full residue</font>

254
00:14:52,620 --> 00:14:59,579
polynomial multiplication<font color="#E5E5E5"> but what about</font>

255
00:14:55,829 --> 00:15:03,359
implementing just an entity rather<font color="#E5E5E5"> than</font>

256
00:14:59,579 --> 00:15:06,599
the full operation and what does<font color="#E5E5E5"> it</font>

257
00:15:03,360 --> 00:15:10,519
<font color="#CCCCCC">change we have</font><font color="#E5E5E5"> to also</font><font color="#CCCCCC"> finish the proper</font>

258
00:15:06,600 --> 00:15:14,839
system integration for the<font color="#E5E5E5"> different</font>

259
00:15:10,519 --> 00:15:17,279
designs<font color="#CCCCCC"> that we are</font><font color="#E5E5E5"> able to generate and</font>

260
00:15:14,839 --> 00:15:21,269
finally made some design space

261
00:15:17,279 --> 00:15:22,949
exploration<font color="#E5E5E5"> and regarding some the</font>

262
00:15:21,269 --> 00:15:25,920
previous<font color="#CCCCCC"> torque and other works</font>

263
00:15:22,949 --> 00:15:27,679
concomitant work on GPU acceleration for

264
00:15:25,920 --> 00:15:31,019
the<font color="#E5E5E5"> fuller</font><font color="#CCCCCC"> Brenna's variant and</font>

265
00:15:27,679 --> 00:15:33,170
<font color="#E5E5E5">applications perspective is to have new</font>

266
00:15:31,019 --> 00:15:34,780
breed architecture for<font color="#CCCCCC"> asaji</font>

267
00:15:33,170 --> 00:15:37,599
acceleration

268
00:15:34,780 --> 00:15:52,360
thank you for<font color="#E5E5E5"> your attention</font><font color="#CCCCCC"> if you have</font>

269
00:15:37,600 --> 00:15:54,610
<font color="#CCCCCC">any question is there any question no so</font>

270
00:15:52,360 --> 00:15:57,760
I have one question<font color="#CCCCCC"> could you</font><font color="#E5E5E5"> go back to</font>

271
00:15:54,610 --> 00:16:01,480
the experimental slide yes I haven't

272
00:15:57,760 --> 00:16:03,030
understand<font color="#CCCCCC"> what is the</font><font color="#E5E5E5"> result of Olivia</font>

273
00:16:01,480 --> 00:16:08,050
<font color="#CCCCCC">and Hall and yours</font>

274
00:16:03,030 --> 00:16:11,800
so<font color="#E5E5E5"> a levy at Hull proposed simplified</font>

275
00:16:08,050 --> 00:16:16,959
food<font color="#CCCCCC"> arenas variant so just the</font>

276
00:16:11,800 --> 00:16:22,660
operation of scaling base extension<font color="#CCCCCC"> and</font>

277
00:16:16,960 --> 00:16:25,780
scaling in arenas<font color="#E5E5E5"> some defied regarding</font>

278
00:16:22,660 --> 00:16:31,180
the previous<font color="#CCCCCC"> walk from Baja and here</font>

279
00:16:25,780 --> 00:16:33,370
what we did is just<font color="#E5E5E5"> an olivey shows by</font>

280
00:16:31,180 --> 00:16:36,130
<font color="#E5E5E5">their profiling results and timing that</font>

281
00:16:33,370 --> 00:16:39,550
the residue polynomial multiplication is

282
00:16:36,130 --> 00:16:42,250
still the biggest part and the previous

283
00:16:39,550 --> 00:16:45,459
talk also<font color="#E5E5E5"> shows some timing and so what</font>

284
00:16:42,250 --> 00:16:48,130
we did is just<font color="#CCCCCC"> proposing nod</font><font color="#E5E5E5"> where</font>

285
00:16:45,460 --> 00:16:51,760
accelerator for the<font color="#E5E5E5"> deuce polynomial</font>

286
00:16:48,130 --> 00:16:54,280
multiplication<font color="#E5E5E5"> and we met this hardware</font>

287
00:16:51,760 --> 00:16:55,930
and dependent of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> airiness channel</font><font color="#E5E5E5"> so</font>

288
00:16:54,280 --> 00:17:01,689
fully compatible with<font color="#E5E5E5"> the airiness</font>

289
00:16:55,930 --> 00:17:03,520
representation<font color="#E5E5E5"> okay thank you so there</font>

290
00:17:01,690 --> 00:17:09,939
is no oh<font color="#CCCCCC"> there is one</font>

291
00:17:03,520 --> 00:17:12,639
I think<font color="#CCCCCC"> performance II</font><font color="#E5E5E5"> you showed here</font>

292
00:17:09,939 --> 00:17:15,610
only for the multiplications<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> a</font>

293
00:17:12,640 --> 00:17:18,880
multiplication<font color="#CCCCCC"> of two polynomials since</font>

294
00:17:15,609 --> 00:17:21,280
you already using the DSP so your<font color="#E5E5E5"> DSP</font>

295
00:17:18,880 --> 00:17:26,140
can use the to generate Gaussian noise

296
00:17:21,280 --> 00:17:29,379
which<font color="#CCCCCC"> is requested by</font><font color="#E5E5E5"> somehow</font><font color="#CCCCCC"> mafia</font><font color="#E5E5E5"> or</font>

297
00:17:26,140 --> 00:17:32,980
your and I were the fully homomorphic<font color="#E5E5E5"> so</font>

298
00:17:29,380 --> 00:17:37,300
have you already thought about of this

299
00:17:32,980 --> 00:17:41,770
already implemented<font color="#CCCCCC"> no I haven't</font><font color="#E5E5E5"> done</font>

300
00:17:37,300 --> 00:17:44,000
<font color="#CCCCCC">that yet</font><font color="#E5E5E5"> I because the PSP already has</font>

301
00:17:41,770 --> 00:17:46,490
that part yeah yeah

302
00:17:44,000 --> 00:17:49,789
<font color="#CCCCCC">okay second</font><font color="#E5E5E5"> question because you see</font>

303
00:17:46,490 --> 00:17:52,520
your<font color="#E5E5E5"> level up to</font><font color="#CCCCCC"> a certain level which</font>

304
00:17:49,789 --> 00:17:56,299
means<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to or certain</font><font color="#E5E5E5"> multiplications</font>

305
00:17:52,520 --> 00:18:02,139
<font color="#E5E5E5">for the polynomials right so your level</font>

306
00:17:56,299 --> 00:18:02,139
<font color="#CCCCCC">L from</font><font color="#E5E5E5"> one one basically you do not -</font>

307
00:18:03,730 --> 00:18:10,490
never sir he then particular<font color="#E5E5E5"> ways you</font>

308
00:18:08,000 --> 00:18:14,000
<font color="#CCCCCC">see it's the constant</font><font color="#E5E5E5"> so I don't know</font>

309
00:18:10,490 --> 00:18:16,640
how<font color="#E5E5E5"> they secrete herring comes out so</font>

310
00:18:14,000 --> 00:18:19,970
whatever you<font color="#CCCCCC"> to level one never fine or</font>

311
00:18:16,640 --> 00:18:22,760
up<font color="#CCCCCC"> to</font><font color="#E5E5E5"> never dirty</font><font color="#CCCCCC"> we do not change it</font>

312
00:18:19,970 --> 00:18:25,220
<font color="#E5E5E5">I'm sorry</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think I understand the</font>

313
00:18:22,760 --> 00:18:27,260
<font color="#CCCCCC">question</font><font color="#E5E5E5"> of course is for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> you</font>

314
00:18:25,220 --> 00:18:31,520
<font color="#E5E5E5">know mr.</font><font color="#CCCCCC"> Kuney is how many</font>

315
00:18:27,260 --> 00:18:33,650
multiplications<font color="#E5E5E5"> so</font><font color="#CCCCCC"> yeah L</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> number</font>

316
00:18:31,520 --> 00:18:40,039
of<font color="#E5E5E5"> ciphertext multiplication that we</font><font color="#CCCCCC"> are</font>

317
00:18:33,650 --> 00:18:44,870
<font color="#CCCCCC">able to do yeah constant yeah the</font>

318
00:18:40,039 --> 00:18:47,030
bandwidth you<font color="#CCCCCC"> dish is just a function of</font>

319
00:18:44,870 --> 00:18:50,139
<font color="#E5E5E5">the parameters of the hardware</font>

320
00:18:47,030 --> 00:18:56,510
accelerator<font color="#E5E5E5"> because our AdWords</font>

321
00:18:50,140 --> 00:19:00,020
<font color="#E5E5E5">accelerator is a fully streaming flow so</font>

322
00:18:56,510 --> 00:19:03,020
the<font color="#CCCCCC"> bandwidth used age</font><font color="#E5E5E5"> so if we want to</font>

323
00:19:00,020 --> 00:19:06,049
increase<font color="#CCCCCC"> the size</font><font color="#E5E5E5"> of the entity we just</font>

324
00:19:03,020 --> 00:19:11,150
add one stage with the<font color="#CCCCCC"> same number</font><font color="#E5E5E5"> of</font>

325
00:19:06,049 --> 00:19:16,309
cycle of<font color="#CCCCCC"> word per cycle that we we take</font>

326
00:19:11,150 --> 00:19:19,640
in input and<font color="#E5E5E5"> in not fault so the the</font>

327
00:19:16,309 --> 00:19:23,330
purpose of such out where data flow<font color="#CCCCCC"> is</font>

328
00:19:19,640 --> 00:19:26,330
to have a given throughput<font color="#CCCCCC"> fix a</font>

329
00:19:23,330 --> 00:19:29,330
throughput<font color="#E5E5E5"> of different polynomial</font>

330
00:19:26,330 --> 00:19:34,539
multiplication<font color="#E5E5E5"> and to achieve this</font>

331
00:19:29,330 --> 00:19:39,908
throughput we just need to have W words

332
00:19:34,539 --> 00:19:45,710
per cycle so the required bandwidth<font color="#CCCCCC"> a</font>

333
00:19:39,909 --> 00:19:51,230
<font color="#CCCCCC">just</font><font color="#E5E5E5"> the frequency multiplied by the</font>

334
00:19:45,710 --> 00:19:54,309
number of<font color="#CCCCCC"> world</font><font color="#E5E5E5"> and the size of the</font>

335
00:19:51,230 --> 00:19:57,620
world we cry

336
00:19:54,309 --> 00:20:00,530
what<font color="#E5E5E5"> okay I still</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> someone</font><font color="#CCCCCC"> come</font><font color="#E5E5E5"> so</font>

337
00:19:57,620 --> 00:20:03,010
maybe we can<font color="#E5E5E5"> discuss yeah thank you</font>

338
00:20:00,530 --> 00:20:03,010
<font color="#E5E5E5">thank</font><font color="#CCCCCC"> you</font>

339
00:20:03,280 --> 00:20:10,040
so<font color="#CCCCCC"> is there is no more question let's</font>

340
00:20:06,020 --> 00:20:16,539
<font color="#E5E5E5">enjoy and also</font><font color="#CCCCCC"> speaker</font><font color="#E5E5E5"> of the session</font>

341
00:20:10,040 --> 00:20:16,539
[Applause]

