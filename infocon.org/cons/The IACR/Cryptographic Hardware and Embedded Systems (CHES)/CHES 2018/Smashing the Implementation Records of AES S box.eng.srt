1
00:00:00,000 --> 00:00:04,529
on the last day<font color="#CCCCCC"> my name is axel postman</font>

2
00:00:02,250 --> 00:00:06,810
<font color="#E5E5E5">and I'm</font><font color="#CCCCCC"> chairing this session on how to</font>

3
00:00:04,529 --> 00:00:09,629
implementations<font color="#E5E5E5"> without further ado I'd</font>

4
00:00:06,810 --> 00:00:11,610
like to introduce a rush<font color="#E5E5E5"> who is giving a</font>

5
00:00:09,630 --> 00:00:14,610
talk<font color="#CCCCCC"> on</font><font color="#E5E5E5"> smashing the implementation</font>

6
00:00:11,610 --> 00:00:17,730
records for<font color="#E5E5E5"> AES sbox</font><font color="#CCCCCC"> okay thank you</font>

7
00:00:14,610 --> 00:00:21,600
good afternoon everyone<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a joint</font>

8
00:00:17,730 --> 00:00:24,830
<font color="#CCCCCC">work</font><font color="#E5E5E5"> with my postdoc Mustafa Taha and do</font>

9
00:00:21,600 --> 00:00:29,130
a movie at Western University<font color="#CCCCCC"> in Canada</font>

10
00:00:24,830 --> 00:00:31,709
<font color="#E5E5E5">let's have a before outline of my talk I</font>

11
00:00:29,130 --> 00:00:33,780
started with the introduction short

12
00:00:31,710 --> 00:00:37,160
introduction and then<font color="#E5E5E5"> I'll talk</font><font color="#CCCCCC"> about</font>

13
00:00:33,780 --> 00:00:39,989
<font color="#E5E5E5">our proposed architecture and then</font>

14
00:00:37,160 --> 00:00:44,640
within<font color="#E5E5E5"> this architecture we</font><font color="#CCCCCC"> are going to</font>

15
00:00:39,989 --> 00:00:47,459
use a<font color="#E5E5E5"> number</font><font color="#CCCCCC"> of things first we proposed</font>

16
00:00:44,640 --> 00:00:50,879
new<font color="#E5E5E5"> of logic minimization algorithms</font>

17
00:00:47,460 --> 00:00:54,210
then we talked about the new composite

18
00:00:50,879 --> 00:00:55,890
field<font color="#E5E5E5"> inversion which includes the three</font>

19
00:00:54,210 --> 00:00:57,449
<font color="#E5E5E5">blocks and I explained</font><font color="#CCCCCC"> about them and</font>

20
00:00:55,890 --> 00:01:01,699
then at the end I talked about<font color="#E5E5E5"> the</font>

21
00:00:57,449 --> 00:01:05,570
comparison and concluding remarks so

22
00:01:01,699 --> 00:01:08,369
this shows<font color="#E5E5E5"> a brief history</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> completely</font>

23
00:01:05,570 --> 00:01:14,820
<font color="#E5E5E5">it story of the sbox</font>

24
00:01:08,369 --> 00:01:18,720
which was introduced in 98<font color="#E5E5E5"> and then it</font>

25
00:01:14,820 --> 00:01:20,309
wasn't<font color="#CCCCCC"> standards in 2001</font><font color="#E5E5E5"> and there are a</font>

26
00:01:18,720 --> 00:01:25,020
large number of implementation about

27
00:01:20,310 --> 00:01:28,040
<font color="#CCCCCC">sbox I would say the</font><font color="#E5E5E5"> first one is is the</font>

28
00:01:25,020 --> 00:01:32,850
one using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tower</font><font color="#E5E5E5"> field by Sato in</font>

29
00:01:28,040 --> 00:01:34,860
<font color="#E5E5E5">2001 and then there</font><font color="#CCCCCC"> are different</font>

30
00:01:32,850 --> 00:01:39,390
<font color="#E5E5E5">targets of the</font><font color="#CCCCCC"> implementation of</font><font color="#E5E5E5"> this</font>

31
00:01:34,860 --> 00:01:42,420
box<font color="#E5E5E5"> one is the targeting small area so</font>

32
00:01:39,390 --> 00:01:48,320
the most compact box that<font color="#E5E5E5"> would say is</font>

33
00:01:42,420 --> 00:01:52,290
designed by can write in 2005 and then

34
00:01:48,320 --> 00:01:58,979
the number<font color="#E5E5E5"> of gates in the can</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> was</font>

35
00:01:52,290 --> 00:02:05,579
reduced to 115 gates<font color="#CCCCCC"> in 2010 and then it</font>

36
00:01:58,979 --> 00:02:08,878
was<font color="#E5E5E5"> reduced to 113 in 2016 on the other</font>

37
00:02:05,579 --> 00:02:12,959
hand there<font color="#CCCCCC"> are a number of</font>

38
00:02:08,878 --> 00:02:13,929
implementation which targets the<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> or</font>

39
00:02:12,959 --> 00:02:20,680
load

40
00:02:13,930 --> 00:02:25,079
small<font color="#E5E5E5"> delay or high or high sorry or</font>

41
00:02:20,680 --> 00:02:28,810
high efficiency and these two actually

42
00:02:25,079 --> 00:02:33,730
<font color="#E5E5E5">would say the best ones and then in this</font>

43
00:02:28,810 --> 00:02:37,989
<font color="#E5E5E5">in this paper we target these two area</font>

44
00:02:33,730 --> 00:02:40,840
<font color="#CCCCCC">low area and low delay and then we</font>

45
00:02:37,989 --> 00:02:43,390
<font color="#E5E5E5">propose the</font><font color="#CCCCCC"> most compact Xbox to date</font>

46
00:02:40,840 --> 00:02:48,810
and we<font color="#CCCCCC"> propose</font><font color="#E5E5E5"> another design</font><font color="#CCCCCC"> as the</font>

47
00:02:43,390 --> 00:02:51,190
<font color="#CCCCCC">most efficient this box today</font><font color="#E5E5E5"> so let</font><font color="#CCCCCC"> me</font>

48
00:02:48,810 --> 00:02:54,400
briefly<font color="#E5E5E5"> explain about the implementing</font>

49
00:02:51,190 --> 00:02:56,829
<font color="#CCCCCC">pitfalls that I try to</font><font color="#E5E5E5"> avoid</font><font color="#CCCCCC"> in our</font>

50
00:02:54,400 --> 00:03:00,310
implementation<font color="#CCCCCC"> the first one is to use</font>

51
00:02:56,829 --> 00:03:03,549
<font color="#CCCCCC">and gates so maybe we teach to students</font>

52
00:03:00,310 --> 00:03:05,769
in the undergrad courses we teach if you

53
00:03:03,549 --> 00:03:07,750
want to implement an engaged in CMOS

54
00:03:05,769 --> 00:03:10,299
technology you have to use NAND gate and

55
00:03:07,750 --> 00:03:14,769
<font color="#CCCCCC">then connect</font><font color="#E5E5E5"> it to the not gate so as a</font>

56
00:03:10,299 --> 00:03:20,139
result and an gate in Hardware in ASIC

57
00:03:14,769 --> 00:03:22,690
implementation is slower than<font color="#CCCCCC"> the NAND</font>

58
00:03:20,139 --> 00:03:24,430
gate<font color="#CCCCCC"> NAND gates cheaper and faster so</font>

59
00:03:22,690 --> 00:03:27,760
it's better to<font color="#CCCCCC"> use NAND gate instead so</font>

60
00:03:24,430 --> 00:03:31,629
and get the second pitfall that<font color="#CCCCCC"> we try</font>

61
00:03:27,760 --> 00:03:35,349
to<font color="#E5E5E5"> avoid it is</font><font color="#CCCCCC"> to use simple gates when</font>

62
00:03:31,629 --> 00:03:39,120
compound gates<font color="#E5E5E5"> or an invert and or</font>

63
00:03:35,349 --> 00:03:42,310
<font color="#E5E5E5">invert may be more efficient in</font>

64
00:03:39,120 --> 00:03:45,549
different technologies so in this paper

65
00:03:42,310 --> 00:03:49,299
<font color="#E5E5E5">we improved the designs previous designs</font>

66
00:03:45,549 --> 00:03:52,510
which uses<font color="#CCCCCC"> an gates to the one using</font>

67
00:03:49,299 --> 00:03:54,940
NAND or nor gates<font color="#E5E5E5"> and in our design</font><font color="#CCCCCC"> our</font>

68
00:03:52,510 --> 00:03:58,810
<font color="#E5E5E5">improved design we use boolean algebra</font>

69
00:03:54,940 --> 00:04:02,260
<font color="#E5E5E5">to make actually the new design would be</font>

70
00:03:58,810 --> 00:04:04,569
<font color="#E5E5E5">the equivalent of the original one in</font>

71
00:04:02,260 --> 00:04:08,909
<font color="#E5E5E5">terms of functionality and this table</font>

72
00:04:04,569 --> 00:04:12,429
<font color="#CCCCCC">shows the</font><font color="#E5E5E5"> the implementation in</font><font color="#CCCCCC"> the CMOS</font>

73
00:04:08,909 --> 00:04:15,608
65 nano technology that we was<font color="#CCCCCC"> available</font>

74
00:04:12,430 --> 00:04:18,699
at Western University and then it shows

75
00:04:15,609 --> 00:04:21,789
the<font color="#E5E5E5"> the different design</font><font color="#CCCCCC"> terms of the</font>

76
00:04:18,699 --> 00:04:23,870
area<font color="#E5E5E5"> and delay and the area was measured</font>

77
00:04:21,789 --> 00:04:26,870
by<font color="#E5E5E5"> gate equivalent</font><font color="#CCCCCC"> the</font>

78
00:04:23,870 --> 00:04:31,310
two input NAND gate<font color="#CCCCCC"> equivalents</font><font color="#E5E5E5"> and then</font>

79
00:04:26,870 --> 00:04:33,710
as you see the improved designs<font color="#E5E5E5"> as</font>

80
00:04:31,310 --> 00:04:37,310
compared to the original<font color="#CCCCCC"> ones or have</font>

81
00:04:33,710 --> 00:04:40,880
have lower area and<font color="#CCCCCC"> is an hour faster</font>

82
00:04:37,310 --> 00:04:44,000
than<font color="#CCCCCC"> the their counterparts</font><font color="#E5E5E5"> okay so and</font>

83
00:04:40,880 --> 00:04:46,850
if you want to mention<font color="#CCCCCC"> which one is the</font>

84
00:04:44,000 --> 00:04:49,580
<font color="#E5E5E5">smallest these two</font><font color="#CCCCCC"> is the smallest</font>

85
00:04:46,850 --> 00:04:52,100
<font color="#E5E5E5">original and this one would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the</font>

86
00:04:49,580 --> 00:04:54,229
fastest original and then the smallest

87
00:04:52,100 --> 00:04:57,889
improved and fastest improve are shown

88
00:04:54,229 --> 00:05:00,530
here so at the<font color="#CCCCCC"> end of this</font><font color="#E5E5E5"> presentation</font>

89
00:04:57,889 --> 00:05:03,139
we compare our<font color="#E5E5E5"> s boxes with improved</font>

90
00:05:00,530 --> 00:05:04,820
ones and then the<font color="#E5E5E5"> formulation of the</font>

91
00:05:03,139 --> 00:05:08,449
improved designs are included in the

92
00:05:04,820 --> 00:05:11,060
paper so let's<font color="#E5E5E5"> talk about this box</font>

93
00:05:08,449 --> 00:05:13,850
<font color="#E5E5E5">export consists of the the</font>

94
00:05:11,060 --> 00:05:16,220
multiplicative inverse<font color="#CCCCCC"> over binary field</font>

95
00:05:13,850 --> 00:05:18,470
<font color="#E5E5E5">GF to the power 8</font><font color="#CCCCCC"> followed by the affine</font>

96
00:05:16,220 --> 00:05:21,080
transformation the affine transformation

97
00:05:18,470 --> 00:05:23,900
is<font color="#E5E5E5"> multiplication by constant matrix</font>

98
00:05:21,080 --> 00:05:27,139
<font color="#E5E5E5">followed by addition of the constant</font>

99
00:05:23,900 --> 00:05:31,549
vector<font color="#E5E5E5"> when you want to implement</font><font color="#CCCCCC"> test</font>

100
00:05:27,139 --> 00:05:33,650
<font color="#CCCCCC">spots for low area implementation and</font>

101
00:05:31,550 --> 00:05:36,320
even faster<font color="#CCCCCC"> then you need to use</font>

102
00:05:33,650 --> 00:05:39,950
<font color="#CCCCCC">complete composite field okay in</font><font color="#E5E5E5"> order</font>

103
00:05:36,320 --> 00:05:42,460
to use composite field what<font color="#E5E5E5"> we do is we</font>

104
00:05:39,950 --> 00:05:45,530
use the transformation<font color="#CCCCCC"> matrix</font><font color="#E5E5E5"> which</font>

105
00:05:42,460 --> 00:05:49,700
<font color="#E5E5E5">converts the</font><font color="#CCCCCC"> 8-bit input today to output</font>

106
00:05:45,530 --> 00:05:53,630
and then perform the<font color="#E5E5E5"> inversion or in the</font>

107
00:05:49,700 --> 00:05:55,820
composite field<font color="#E5E5E5"> and then at the end we</font>

108
00:05:53,630 --> 00:05:57,620
return<font color="#CCCCCC"> back the</font><font color="#E5E5E5"> composite field</font>

109
00:05:55,820 --> 00:06:00,669
<font color="#E5E5E5">representation to the</font><font color="#CCCCCC"> binary field and</font>

110
00:05:57,620 --> 00:06:05,750
then use the function transfer<font color="#CCCCCC"> machine</font>

111
00:06:00,669 --> 00:06:07,460
there so and then this part is our input

112
00:06:05,750 --> 00:06:09,410
transformation and then you can combine

113
00:06:07,460 --> 00:06:12,770
<font color="#E5E5E5">these three blocks into the bond block</font>

114
00:06:09,410 --> 00:06:17,570
as a<font color="#CCCCCC"> tea out</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> Auto transformation so</font>

115
00:06:12,770 --> 00:06:20,539
what we<font color="#CCCCCC"> propose here</font><font color="#E5E5E5"> are this is</font><font color="#CCCCCC"> our</font>

116
00:06:17,570 --> 00:06:23,060
proposed architecture which has<font color="#CCCCCC"> the</font>

117
00:06:20,539 --> 00:06:26,870
input transformation which transformed

118
00:06:23,060 --> 00:06:29,780
the 8 inputs to the 20 inputs and then

119
00:06:26,870 --> 00:06:32,870
the there are 12 additional terms that

120
00:06:29,780 --> 00:06:33,440
you usually see<font color="#CCCCCC"> in the previous</font><font color="#E5E5E5"> original</font>

121
00:06:32,870 --> 00:06:36,050
<font color="#CCCCCC">spock's</font>

122
00:06:33,440 --> 00:06:37,139
and then these terms are shared between

123
00:06:36,050 --> 00:06:40,680
the

124
00:06:37,139 --> 00:06:44,430
exponentiation and multipliers<font color="#E5E5E5"> and then</font>

125
00:06:40,680 --> 00:06:47,400
for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> one we proposed new logic</font>

126
00:06:44,430 --> 00:06:49,199
minimization algorithms for the input

127
00:06:47,400 --> 00:06:51,270
and<font color="#CCCCCC"> Auto transformation and then we</font>

128
00:06:49,199 --> 00:06:54,620
<font color="#E5E5E5">proposed some formulation new</font>

129
00:06:51,270 --> 00:06:56,909
formulation for exponentiation<font color="#CCCCCC"> is</font>

130
00:06:54,620 --> 00:07:02,340
<font color="#CCCCCC">software inverter and the output</font>

131
00:06:56,909 --> 00:07:05,219
multipliers<font color="#E5E5E5"> and after we design each</font>

132
00:07:02,340 --> 00:07:08,460
block then<font color="#CCCCCC"> we try</font><font color="#E5E5E5"> to use all the</font>

133
00:07:05,219 --> 00:07:11,009
<font color="#CCCCCC">available resources so we are trying to</font>

134
00:07:08,460 --> 00:07:15,330
<font color="#E5E5E5">optimize by hand</font><font color="#CCCCCC"> even a try to optimize</font>

135
00:07:11,009 --> 00:07:18,689
<font color="#E5E5E5">but CAD tools and then use the</font><font color="#CCCCCC"> optimize</font>

136
00:07:15,330 --> 00:07:21,419
block into<font color="#CCCCCC"> the entire rest box and see</font>

137
00:07:18,689 --> 00:07:23,879
what will<font color="#CCCCCC"> happen so now</font><font color="#E5E5E5"> I'm going to</font>

138
00:07:21,419 --> 00:07:26,930
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about the logic</font><font color="#E5E5E5"> minimization</font>

139
00:07:23,879 --> 00:07:31,020
algorithm that we<font color="#CCCCCC"> proposed</font><font color="#E5E5E5"> before</font>

140
00:07:26,930 --> 00:07:33,029
talking<font color="#E5E5E5"> about our algorithms so we</font>

141
00:07:31,020 --> 00:07:35,219
define<font color="#E5E5E5"> the logic minimization but</font>

142
00:07:33,029 --> 00:07:37,710
implement these amorphic transformation

143
00:07:35,219 --> 00:07:42,360
matrices<font color="#E5E5E5"> using a small number of gates</font>

144
00:07:37,710 --> 00:07:44,609
it's a<font color="#E5E5E5"> nfpa a hard problem and we have</font>

145
00:07:42,360 --> 00:07:46,529
<font color="#CCCCCC">to transformation Matiz one at the input</font>

146
00:07:44,610 --> 00:07:48,110
and the one that the output<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> data</font>

147
00:07:46,529 --> 00:07:50,789
figure<font color="#CCCCCC"> shows only</font><font color="#E5E5E5"> the input</font>

148
00:07:48,110 --> 00:07:53,310
transformation matrix so these are the

149
00:07:50,789 --> 00:07:55,620
results<font color="#CCCCCC"> of the the optimum results of</font>

150
00:07:53,310 --> 00:07:59,580
the<font color="#E5E5E5"> inputs of a matrix that we used and</font>

151
00:07:55,620 --> 00:08:05,009
it has<font color="#E5E5E5"> eight input and twenty output and</font>

152
00:07:59,580 --> 00:08:08,669
then<font color="#E5E5E5"> they the twelve additional</font><font color="#CCCCCC"> output</font>

153
00:08:05,009 --> 00:08:14,099
are shown<font color="#E5E5E5"> here so a IJ is</font><font color="#CCCCCC"> the XOR of</font><font color="#E5E5E5"> AI</font>

154
00:08:08,669 --> 00:08:16,649
and AJ and similarly for<font color="#CCCCCC"> bij</font><font color="#E5E5E5"> and there</font>

155
00:08:14,099 --> 00:08:18,779
are some previous works<font color="#E5E5E5"> which is the</font>

156
00:08:16,649 --> 00:08:21,449
which includes cancellation<font color="#CCCCCC"> fruit tree</font>

157
00:08:18,779 --> 00:08:23,520
so in the cancellation<font color="#CCCCCC"> period</font><font color="#E5E5E5"> gates are</font>

158
00:08:21,449 --> 00:08:26,969
never used to cancel out current terms

159
00:08:23,520 --> 00:08:31,830
and<font color="#E5E5E5"> their heuristic</font><font color="#CCCCCC"> huge cancellation</font>

160
00:08:26,969 --> 00:08:37,219
and I try<font color="#E5E5E5"> to briefly explain this</font>

161
00:08:31,830 --> 00:08:39,929
algorithm<font color="#E5E5E5"> so if you want to optimize the</font>

162
00:08:37,219 --> 00:08:43,019
<font color="#CCCCCC">multiplication of the matrix by vector</font>

163
00:08:39,929 --> 00:08:45,839
then your input would be<font color="#CCCCCC"> AG and your</font>

164
00:08:43,019 --> 00:08:49,440
<font color="#CCCCCC">output would be</font><font color="#E5E5E5"> in the right side so in</font>

165
00:08:45,839 --> 00:08:50,810
this algorithm<font color="#E5E5E5"> we</font><font color="#CCCCCC"> test adding one gate</font>

166
00:08:49,440 --> 00:08:57,150
so let's see

167
00:08:50,810 --> 00:08:59,640
adding g4x<font color="#CCCCCC"> or g5 and then the</font><font color="#E5E5E5"> next step</font>

168
00:08:57,150 --> 00:09:04,230
<font color="#E5E5E5">we compute the distance</font><font color="#CCCCCC"> Hamming distance</font>

169
00:08:59,640 --> 00:09:05,970
to each target and then we select<font color="#CCCCCC"> the</font>

170
00:09:04,230 --> 00:09:10,500
gate leading<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the minimum average</font>

171
00:09:05,970 --> 00:09:13,680
distance<font color="#E5E5E5"> and then add the</font><font color="#CCCCCC"> selected gate</font>

172
00:09:10,500 --> 00:09:18,170
and redo the<font color="#CCCCCC"> process</font><font color="#E5E5E5"> okay so in this</font>

173
00:09:13,680 --> 00:09:21,270
<font color="#CCCCCC">aisle in</font><font color="#E5E5E5"> this paper we proposed three</font>

174
00:09:18,170 --> 00:09:23,550
<font color="#E5E5E5">logic minimization algorithm one is the</font>

175
00:09:21,270 --> 00:09:26,819
improved<font color="#CCCCCC"> version of the previous</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> so</font>

176
00:09:23,550 --> 00:09:29,189
which tests all<font color="#E5E5E5"> the ties</font><font color="#CCCCCC"> and monitor the</font>

177
00:09:26,820 --> 00:09:31,590
progress of the delay and then the<font color="#CCCCCC"> two</font>

178
00:09:29,190 --> 00:09:33,930
others which would be the shortest

179
00:09:31,590 --> 00:09:35,850
distance first and focused search I'm

180
00:09:33,930 --> 00:09:39,089
not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> explain these two algorithms</font>

181
00:09:35,850 --> 00:09:41,790
<font color="#E5E5E5">to me but briefly is shown here and they</font>

182
00:09:39,090 --> 00:09:45,140
<font color="#E5E5E5">explained in the paper so what I'm gonna</font>

183
00:09:41,790 --> 00:09:51,020
do I'm<font color="#E5E5E5"> gonna show you the results of our</font>

184
00:09:45,140 --> 00:09:54,300
algorithms so we studied these two

185
00:09:51,020 --> 00:09:56,850
matrices<font color="#E5E5E5"> TNT out for all possible is a</font>

186
00:09:54,300 --> 00:10:00,689
morphic transformation<font color="#E5E5E5"> a total of 96</font>

187
00:09:56,850 --> 00:10:03,390
<font color="#CCCCCC">matey's</font><font color="#E5E5E5"> we considered and then the</font>

188
00:10:00,690 --> 00:10:06,630
proposed algorithms consistently<font color="#E5E5E5"> to</font>

189
00:10:03,390 --> 00:10:09,990
equal or better implementations<font color="#E5E5E5"> and this</font>

190
00:10:06,630 --> 00:10:12,180
would be the result<font color="#CCCCCC"> of the lightweight</font>

191
00:10:09,990 --> 00:10:16,740
implementation in terms<font color="#CCCCCC"> of the number of</font>

192
00:10:12,180 --> 00:10:19,829
XOR gates and so basically this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> these</font>

193
00:10:16,740 --> 00:10:23,580
three<font color="#CCCCCC"> are our three proposed algorithm</font>

194
00:10:19,830 --> 00:10:26,880
<font color="#E5E5E5">this is a original normal</font><font color="#CCCCCC"> P P and then</font>

195
00:10:23,580 --> 00:10:28,920
we try<font color="#E5E5E5"> to use the available CAD tool the</font>

196
00:10:26,880 --> 00:10:31,860
synopsis CAD tool to see what<font color="#E5E5E5"> the</font>

197
00:10:28,920 --> 00:10:35,490
synopsis actually would result<font color="#E5E5E5"> okay so</font>

198
00:10:31,860 --> 00:10:37,160
what we<font color="#E5E5E5"> did is we called the</font>

199
00:10:35,490 --> 00:10:40,410
<font color="#CCCCCC">multiplicative</font><font color="#E5E5E5"> matrix algorithm</font>

200
00:10:37,160 --> 00:10:43,020
<font color="#CCCCCC">multi-position by victor using</font>

201
00:10:40,410 --> 00:10:45,839
<font color="#CCCCCC">behavioral modeling of the VHDL code</font><font color="#E5E5E5"> and</font>

202
00:10:43,020 --> 00:10:47,640
then let the<font color="#E5E5E5"> CAD tool optimize for us</font>

203
00:10:45,840 --> 00:10:50,370
and that would be the results<font color="#E5E5E5"> actually</font>

204
00:10:47,640 --> 00:10:52,080
<font color="#E5E5E5">we get from the a CAD tool you can see</font>

205
00:10:50,370 --> 00:10:56,130
it's not optimized

206
00:10:52,080 --> 00:10:59,760
okay<font color="#CCCCCC"> so then</font><font color="#E5E5E5"> and then you can see our</font>

207
00:10:56,130 --> 00:11:02,010
result would be<font color="#CCCCCC"> mmm this would be used</font>

208
00:10:59,760 --> 00:11:03,750
actually<font color="#CCCCCC"> in our design the actual</font>

209
00:11:02,010 --> 00:11:04,529
formulation for the<font color="#E5E5E5"> lightweight design</font>

210
00:11:03,750 --> 00:11:07,319
provided

211
00:11:04,529 --> 00:11:09,480
the paper you can<font color="#E5E5E5"> see it and then our</font>

212
00:11:07,319 --> 00:11:12,509
second target implementation was the

213
00:11:09,480 --> 00:11:14,129
first implementation<font color="#E5E5E5"> and then that would</font>

214
00:11:12,509 --> 00:11:18,569
be<font color="#CCCCCC"> the results of the number</font><font color="#E5E5E5"> of gates</font>

215
00:11:14,129 --> 00:11:20,790
<font color="#E5E5E5">and the gate delay that we use so hey</font>

216
00:11:18,569 --> 00:11:25,559
the<font color="#E5E5E5"> next I'm going to talk</font><font color="#CCCCCC"> about our</font>

217
00:11:20,790 --> 00:11:29,329
composite filling<font color="#CCCCCC"> version</font><font color="#E5E5E5"> so the new</font>

218
00:11:25,559 --> 00:11:32,430
exponentiation stage which would be

219
00:11:29,329 --> 00:11:36,508
<font color="#E5E5E5">which is shown here this block is</font>

220
00:11:32,430 --> 00:11:40,589
basically we<font color="#CCCCCC"> combined these sub blocks</font>

221
00:11:36,509 --> 00:11:42,540
as a wand lock and then we<font color="#E5E5E5"> design</font><font color="#CCCCCC"> two</font>

222
00:11:40,589 --> 00:11:44,999
designs one for light way and one<font color="#E5E5E5"> were</font>

223
00:11:42,540 --> 00:11:49,620
fast and then<font color="#E5E5E5"> we optimize them actually</font>

224
00:11:44,999 --> 00:11:52,079
by hand<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also we designed before we</font>

225
00:11:49,620 --> 00:11:56,180
use the<font color="#CCCCCC"> catwalk cloud gives us the</font>

226
00:11:52,079 --> 00:11:58,349
optimized design so and then<font color="#E5E5E5"> the these</font>

227
00:11:56,180 --> 00:12:03,479
<font color="#E5E5E5">results actually are shown here we</font>

228
00:11:58,350 --> 00:12:05,490
implemented it on ASIC and then the

229
00:12:03,480 --> 00:12:09,449
<font color="#E5E5E5">light way and fast actually which are</font>

230
00:12:05,490 --> 00:12:12,540
optimized by hand<font color="#CCCCCC"> show here and this is</font>

231
00:12:09,449 --> 00:12:14,339
the<font color="#CCCCCC"> optimized way CAD tool</font><font color="#E5E5E5"> so when we</font>

232
00:12:12,540 --> 00:12:16,709
design we<font color="#CCCCCC"> didn't consider actually</font><font color="#E5E5E5"> three</font>

233
00:12:14,339 --> 00:12:19,290
input XOR gates we consider three input

234
00:12:16,709 --> 00:12:21,859
XOR gates as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> just exhorting the two</font>

235
00:12:19,290 --> 00:12:24,750
XOR gates<font color="#E5E5E5"> but the CAD tools actually</font>

236
00:12:21,860 --> 00:12:27,389
gives us the<font color="#E5E5E5"> design using the</font><font color="#CCCCCC"> three</font>

237
00:12:24,750 --> 00:12:29,779
input XOR gate and then you can see this

238
00:12:27,389 --> 00:12:31,829
is used for the<font color="#E5E5E5"> lightweight</font>

239
00:12:29,779 --> 00:12:33,829
implementation and this will be<font color="#E5E5E5"> used</font>

240
00:12:31,829 --> 00:12:36,750
actually<font color="#CCCCCC"> for fast implementation</font>

241
00:12:33,829 --> 00:12:39,388
similarly we did this one the same

242
00:12:36,750 --> 00:12:41,009
<font color="#CCCCCC">method for the software</font><font color="#E5E5E5"> in version and</font>

243
00:12:39,389 --> 00:12:44,600
then we consider<font color="#CCCCCC"> in many different</font><font color="#E5E5E5"> cases</font>

244
00:12:41,009 --> 00:12:47,370
only this is shown here<font color="#E5E5E5"> we have one</font>

245
00:12:44,600 --> 00:12:49,709
section<font color="#E5E5E5"> in the paper and then in that</font>

246
00:12:47,370 --> 00:12:52,740
section<font color="#CCCCCC"> I believe this is section number</font>

247
00:12:49,709 --> 00:12:56,369
three we<font color="#CCCCCC"> explain everything</font><font color="#E5E5E5"> every</font>

248
00:12:52,740 --> 00:12:58,800
details actually<font color="#E5E5E5"> we did and then that</font>

249
00:12:56,370 --> 00:13:03,959
actually<font color="#E5E5E5"> wasn't part of is not part of</font>

250
00:12:58,800 --> 00:13:08,490
my<font color="#E5E5E5"> presentation okay so and then the</font>

251
00:13:03,959 --> 00:13:12,300
result of the implementations actually

252
00:13:08,490 --> 00:13:14,550
is shown here<font color="#CCCCCC"> so one bit</font><font color="#E5E5E5"> software in</font>

253
00:13:12,300 --> 00:13:16,050
version there<font color="#E5E5E5"> are two designs one is</font>

254
00:13:14,550 --> 00:13:18,000
optimized by<font color="#E5E5E5"> Hannah and Bono it's</font>

255
00:13:16,050 --> 00:13:20,189
optimized by the cattle so

256
00:13:18,000 --> 00:13:22,590
<font color="#CCCCCC">suffering version has a four</font><font color="#E5E5E5"> bit input</font>

257
00:13:20,190 --> 00:13:25,260
<font color="#CCCCCC">for bit output and then this is only for</font>

258
00:13:22,590 --> 00:13:27,540
<font color="#E5E5E5">one bit the three other bits actually is</font>

259
00:13:25,260 --> 00:13:30,090
a cyclic version of this implementation

260
00:13:27,540 --> 00:13:32,459
<font color="#E5E5E5">because if you are using normal basis</font>

261
00:13:30,090 --> 00:13:35,280
and<font color="#E5E5E5"> that's the beauty of the normal</font>

262
00:13:32,460 --> 00:13:37,980
basis<font color="#CCCCCC"> and then you can see here for</font><font color="#E5E5E5"> the</font>

263
00:13:35,280 --> 00:13:39,870
<font color="#CCCCCC">softening version the one actually are</font>

264
00:13:37,980 --> 00:13:42,180
optimized by<font color="#CCCCCC"> capsules</font><font color="#E5E5E5"> actually we are</font>

265
00:13:39,870 --> 00:13:45,270
will be<font color="#E5E5E5"> using which has lower area and</font>

266
00:13:42,180 --> 00:13:48,089
lower delay<font color="#E5E5E5"> and the reason is that it</font>

267
00:13:45,270 --> 00:13:49,980
uses a compound gate or an inverted<font color="#E5E5E5"> gate</font>

268
00:13:48,090 --> 00:13:54,750
<font color="#E5E5E5">okay that we didn't consider it in our</font>

269
00:13:49,980 --> 00:13:58,170
design so the last block is going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

270
00:13:54,750 --> 00:14:01,020
the<font color="#CCCCCC"> auto multipliers which multiplies it</font>

271
00:13:58,170 --> 00:14:05,430
has two multipliers<font color="#E5E5E5"> with a common input</font>

272
00:14:01,020 --> 00:14:11,160
<font color="#CCCCCC">II and this multiplier actually have</font>

273
00:14:05,430 --> 00:14:14,219
four inputs<font color="#E5E5E5"> in both inputs and then it</font>

274
00:14:11,160 --> 00:14:17,310
has five outputs and the reduction from

275
00:14:14,220 --> 00:14:20,400
<font color="#E5E5E5">five bit to the four bit actually is</font>

276
00:14:17,310 --> 00:14:22,949
part<font color="#CCCCCC"> of the Auto transformation matrix</font>

277
00:14:20,400 --> 00:14:24,510
<font color="#E5E5E5">and then in the previous</font><font color="#CCCCCC"> design actually</font>

278
00:14:22,950 --> 00:14:27,510
<font color="#E5E5E5">they considered different number</font><font color="#CCCCCC"> of</font>

279
00:14:24,510 --> 00:14:32,339
<font color="#E5E5E5">inputs</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> output as as you see here so</font>

280
00:14:27,510 --> 00:14:34,530
and then in our design<font color="#CCCCCC"> we try to focus a</font>

281
00:14:32,339 --> 00:14:38,790
<font color="#E5E5E5">focus on the combined cost of the two</font>

282
00:14:34,530 --> 00:14:40,949
multipliers<font color="#E5E5E5"> and then try to share as</font>

283
00:14:38,790 --> 00:14:43,140
<font color="#CCCCCC">much as possible</font><font color="#E5E5E5"> in order to make it</font>

284
00:14:40,950 --> 00:14:46,650
actually compact<font color="#E5E5E5"> so in order to share</font>

285
00:14:43,140 --> 00:14:49,040
the turns what we should do is you have

286
00:14:46,650 --> 00:14:52,350
to<font color="#E5E5E5"> use actually</font><font color="#CCCCCC"> the multiply which has a</font>

287
00:14:49,040 --> 00:14:55,500
XOR<font color="#CCCCCC"> gate in the first layer</font><font color="#E5E5E5"> because that</font>

288
00:14:52,350 --> 00:14:59,190
would be gives us the flexibility to

289
00:14:55,500 --> 00:15:01,110
share okay and then the multiple has

290
00:14:59,190 --> 00:15:03,480
three layers the<font color="#E5E5E5"> first layer discs or</font>

291
00:15:01,110 --> 00:15:08,460
gates<font color="#E5E5E5"> and then the second layer is going</font>

292
00:15:03,480 --> 00:15:09,750
to be NAND XOR<font color="#E5E5E5"> and the 2 XOR blocks</font>

293
00:15:08,460 --> 00:15:13,620
actually is a part of the input

294
00:15:09,750 --> 00:15:15,780
transformation matrix and then for the

295
00:15:13,620 --> 00:15:17,730
second X or we have to implement it and

296
00:15:15,780 --> 00:15:21,449
then<font color="#E5E5E5"> they share it for the two</font>

297
00:15:17,730 --> 00:15:25,110
multipliers<font color="#E5E5E5"> and with some what we</font><font color="#CCCCCC"> do not</font>

298
00:15:21,450 --> 00:15:27,510
allow sharing<font color="#CCCCCC"> so if you want</font><font color="#E5E5E5"> to compare</font>

299
00:15:25,110 --> 00:15:30,830
<font color="#E5E5E5">the complexity of the only one</font><font color="#CCCCCC"> multiply</font>

300
00:15:27,510 --> 00:15:34,010
<font color="#CCCCCC">this table shows actually</font>

301
00:15:30,830 --> 00:15:36,800
the multipliers<font color="#CCCCCC"> that are used in the</font>

302
00:15:34,010 --> 00:15:38,540
different<font color="#CCCCCC"> s boxes okay</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> that</font>

303
00:15:36,800 --> 00:15:43,250
<font color="#E5E5E5">wasn't my my starting point of the</font>

304
00:15:38,540 --> 00:15:45,550
<font color="#E5E5E5">designing of this</font><font color="#CCCCCC"> box because the S box</font>

305
00:15:43,250 --> 00:15:48,320
we consider<font color="#E5E5E5"> in many different</font>

306
00:15:45,550 --> 00:15:50,269
multipliers and<font color="#E5E5E5"> then we end up with</font><font color="#CCCCCC"> this</font>

307
00:15:48,320 --> 00:15:52,550
multiply and that<font color="#CCCCCC"> was a starting</font><font color="#E5E5E5"> point</font>

308
00:15:50,269 --> 00:15:58,510
of the<font color="#E5E5E5"> designing other parts okay and</font>

309
00:15:52,550 --> 00:16:02,479
you see the multiplier as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> as lower a</font>

310
00:15:58,510 --> 00:16:05,480
number of gates<font color="#E5E5E5"> and it has it did</font><font color="#CCCCCC"> lois</font>

311
00:16:02,480 --> 00:16:08,149
<font color="#E5E5E5">dillais</font><font color="#CCCCCC"> so DX is the</font><font color="#E5E5E5"> delay of XOR gates</font>

312
00:16:05,480 --> 00:16:11,390
and d9 is<font color="#CCCCCC"> a delay of</font><font color="#E5E5E5"> nand and the end is</font>

313
00:16:08,149 --> 00:16:15,079
a delay of and so when you want<font color="#CCCCCC"> to</font>

314
00:16:11,390 --> 00:16:17,480
consider the two multipliers then<font color="#E5E5E5"> in the</font>

315
00:16:15,079 --> 00:16:22,459
this is<font color="#CCCCCC"> the block diagram of</font><font color="#E5E5E5"> the two</font>

316
00:16:17,480 --> 00:16:25,040
multipliers<font color="#CCCCCC"> combined so as you see the 2</font>

317
00:16:22,459 --> 00:16:27,920
XOR blocks actually are not shown here

318
00:16:25,040 --> 00:16:31,790
<font color="#E5E5E5">because that was a part of it</font><font color="#CCCCCC"> the input</font>

319
00:16:27,920 --> 00:16:34,040
<font color="#E5E5E5">transformation matrix and we implemented</font>

320
00:16:31,790 --> 00:16:37,310
<font color="#CCCCCC">these to try to optimize</font><font color="#E5E5E5"> by hand and</font>

321
00:16:34,040 --> 00:16:40,880
then try to<font color="#CCCCCC"> we're to optimize by the CAD</font>

322
00:16:37,310 --> 00:16:44,180
tool and as you see the optimization by

323
00:16:40,880 --> 00:16:48,079
hand<font color="#CCCCCC"> actually is better in terms of both</font>

324
00:16:44,180 --> 00:16:54,560
area and the delay<font color="#E5E5E5"> okay so now I'm going</font>

325
00:16:48,079 --> 00:16:58,219
<font color="#E5E5E5">to compare our</font><font color="#CCCCCC"> results</font><font color="#E5E5E5"> so we used a the</font>

326
00:16:54,560 --> 00:17:02,239
<font color="#E5E5E5">best blocks for each block and</font><font color="#CCCCCC"> then our</font>

327
00:16:58,220 --> 00:17:07,579
target life and implementation<font color="#CCCCCC"> are shown</font>

328
00:17:02,240 --> 00:17:09,829
here as you see<font color="#CCCCCC"> our design i our</font>

329
00:17:07,579 --> 00:17:12,168
<font color="#E5E5E5">lightweight design and had as small as</font>

330
00:17:09,829 --> 00:17:16,040
fast and most efficient this<font color="#E5E5E5"> life with</font>

331
00:17:12,169 --> 00:17:21,290
<font color="#E5E5E5">this</font><font color="#CCCCCC"> box</font><font color="#E5E5E5"> and then we target fast</font>

332
00:17:16,040 --> 00:17:23,119
implementation<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see our</font>

333
00:17:21,290 --> 00:17:25,909
<font color="#E5E5E5">design as the most efficient design</font>

334
00:17:23,119 --> 00:17:30,199
because the<font color="#E5E5E5"> efficiency is measured by</font>

335
00:17:25,910 --> 00:17:32,600
the area<font color="#E5E5E5"> time product and what we did is</font>

336
00:17:30,200 --> 00:17:40,120
<font color="#CCCCCC">we compared</font><font color="#E5E5E5"> only to the improved</font>

337
00:17:32,600 --> 00:17:43,159
versions<font color="#E5E5E5"> mmm in this slide and we we</font>

338
00:17:40,120 --> 00:17:44,510
<font color="#CCCCCC">recorded a large number of VHDL so in</font>

339
00:17:43,160 --> 00:17:49,160
order<font color="#E5E5E5"> to obtain</font><font color="#CCCCCC"> actually</font>

340
00:17:44,510 --> 00:17:52,220
best design so the 46<font color="#CCCCCC"> I think is is not</font>

341
00:17:49,160 --> 00:17:57,200
exact number but anyway that that's what

342
00:17:52,220 --> 00:17:58,910
we<font color="#E5E5E5"> did so and they would be effective</font>

343
00:17:57,200 --> 00:18:02,360
the target technology because<font color="#CCCCCC"> we use it</font>

344
00:17:58,910 --> 00:18:06,169
<font color="#E5E5E5">one technology</font><font color="#CCCCCC"> and if you use the</font>

345
00:18:02,360 --> 00:18:09,260
<font color="#CCCCCC">industrial technology libraries that we</font>

346
00:18:06,169 --> 00:18:13,360
what we used the result would be the

347
00:18:09,260 --> 00:18:16,460
same<font color="#E5E5E5"> okay so in the lightweight it uses</font>

348
00:18:13,360 --> 00:18:19,750
<font color="#CCCCCC">three input XOR gates</font><font color="#E5E5E5"> or an invert with</font>

349
00:18:16,460 --> 00:18:25,340
<font color="#E5E5E5">three and two inputs and it end up with</font>

350
00:18:19,750 --> 00:18:29,299
180 2.25 gate equivalents and then for

351
00:18:25,340 --> 00:18:32,659
the first one it<font color="#E5E5E5"> uses nan 3 which is the</font>

352
00:18:29,299 --> 00:18:35,330
three input<font color="#CCCCCC"> danged and if you use them</font>

353
00:18:32,660 --> 00:18:40,580
just free<font color="#CCCCCC"> libraries which</font><font color="#E5E5E5"> you are</font>

354
00:18:35,330 --> 00:18:44,750
available<font color="#E5E5E5"> and then the what we did is</font><font color="#CCCCCC"> an</font>

355
00:18:40,580 --> 00:18:47,928
<font color="#CCCCCC">and gate 45 along with the technology it</font>

356
00:18:44,750 --> 00:18:50,570
doesn't<font color="#CCCCCC"> actually have</font><font color="#E5E5E5"> the treat input</font>

357
00:18:47,929 --> 00:18:54,530
XOR gates<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> and it doesn't have the</font>

358
00:18:50,570 --> 00:18:57,409
<font color="#CCCCCC">that's just big compound gate but it</font><font color="#E5E5E5"> has</font>

359
00:18:54,530 --> 00:19:00,770
<font color="#E5E5E5">a other kind of compound gate and what</font>

360
00:18:57,410 --> 00:19:03,320
we did is for the<font color="#CCCCCC"> lightweight</font><font color="#E5E5E5"> the the</font>

361
00:19:00,770 --> 00:19:05,780
gate<font color="#CCCCCC"> equivalent is slightly just</font>

362
00:19:03,320 --> 00:19:07,370
increased<font color="#E5E5E5"> but we have the same number</font><font color="#CCCCCC"> of</font>

363
00:19:05,780 --> 00:19:10,399
gate equivalent actually for the<font color="#E5E5E5"> fast</font>

364
00:19:07,370 --> 00:19:16,129
implementation<font color="#E5E5E5"> if you don't want to use</font>

365
00:19:10,400 --> 00:19:19,640
any compound gates<font color="#E5E5E5"> then they are result</font>

366
00:19:16,130 --> 00:19:22,070
your result would be<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be not 191</font>

367
00:19:19,640 --> 00:19:25,040
<font color="#CCCCCC">gate equivalent the best result was</font><font color="#E5E5E5"> the</font>

368
00:19:22,070 --> 00:19:29,720
one<font color="#CCCCCC"> 9/10 40</font><font color="#E5E5E5"> and then the fast</font><font color="#CCCCCC"> actually</font>

369
00:19:25,040 --> 00:19:31,629
gives us this one<font color="#E5E5E5"> so and as you see the</font>

370
00:19:29,720 --> 00:19:34,940
proposed designs to<font color="#CCCCCC"> pre-render a nice</font>

371
00:19:31,630 --> 00:19:37,610
restriction by the target<font color="#CCCCCC"> rot library so</font>

372
00:19:34,940 --> 00:19:41,299
I conclude my talks<font color="#CCCCCC"> okay in this</font><font color="#E5E5E5"> paper</font>

373
00:19:37,610 --> 00:19:43,850
we we<font color="#CCCCCC"> propose two new design for the ESS</font>

374
00:19:41,299 --> 00:19:47,110
box one light and<font color="#E5E5E5"> one fast and then for</font>

375
00:19:43,850 --> 00:19:51,080
each of<font color="#E5E5E5"> the block actually proposed new</font>

376
00:19:47,110 --> 00:19:53,299
blocks which<font color="#E5E5E5"> includes new logic</font>

377
00:19:51,080 --> 00:19:56,178
minimization algorithm formulation for

378
00:19:53,299 --> 00:19:58,280
sub blocks and then<font color="#E5E5E5"> output</font><font color="#CCCCCC"> multiple</font><font color="#E5E5E5"> more</font>

379
00:19:56,179 --> 00:20:00,860
importantly we proposed

380
00:19:58,280 --> 00:20:02,990
design methodology for an optimum

381
00:20:00,860 --> 00:20:05,330
synergy between<font color="#E5E5E5"> theoretical analysis and</font>

382
00:20:02,990 --> 00:20:08,540
<font color="#CCCCCC">technology</font><font color="#E5E5E5"> assisted</font><font color="#CCCCCC"> canceled okay thank</font>

383
00:20:05,330 --> 00:20:13,760
you<font color="#CCCCCC"> for</font><font color="#E5E5E5"> your listening</font><font color="#CCCCCC"> if I have any</font>

384
00:20:08,540 --> 00:20:15,440
question thank<font color="#E5E5E5"> you for the work it's</font>

385
00:20:13,760 --> 00:20:17,450
impressive to see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> after 20 years of</font>

386
00:20:15,440 --> 00:20:19,280
<font color="#E5E5E5">research there still</font><font color="#CCCCCC"> a substantial</font><font color="#E5E5E5"> gains</font>

387
00:20:17,450 --> 00:20:20,930
to be made<font color="#E5E5E5"> actually we don't have time</font>

388
00:20:19,280 --> 00:20:22,970
<font color="#CCCCCC">for any questions if you do have any</font>

389
00:20:20,930 --> 00:20:24,620
questions<font color="#CCCCCC"> please see the</font><font color="#E5E5E5"> author in the</font>

390
00:20:22,970 --> 00:20:25,460
<font color="#E5E5E5">coffee break</font><font color="#CCCCCC"> let's think the speaker</font>

391
00:20:24,620 --> 00:20:31,589
<font color="#CCCCCC">again</font>

392
00:20:25,460 --> 00:20:31,589
[Applause]

