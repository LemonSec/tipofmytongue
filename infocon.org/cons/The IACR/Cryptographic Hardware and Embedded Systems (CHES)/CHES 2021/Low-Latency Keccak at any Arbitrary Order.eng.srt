1
00:00:01,120 --> 00:00:03,199
hello i want to present low latency

2
00:00:03,199 --> 00:00:05,520
keychaik at any arbitrary order which is

3
00:00:05,520 --> 00:00:07,839
joint work with iron rezaisha mirzadi

4
00:00:07,839 --> 00:00:10,160
hadi suleimani razia salary fired and

5
00:00:10,160 --> 00:00:12,480
ami moradi

6
00:00:12,480 --> 00:00:14,320
before getting into details i would like

7
00:00:14,320 --> 00:00:16,640
to give an outlook of what low latency

8
00:00:16,640 --> 00:00:19,439
check at any arbitrary order is

9
00:00:19,439 --> 00:00:21,199
in fact this is a realization of

10
00:00:21,199 --> 00:00:23,279
keycheck that is immune to side channel

11
00:00:23,279 --> 00:00:26,160
analysis and has three main

12
00:00:26,160 --> 00:00:28,720
qualities it is low latency meaning that

13
00:00:28,720 --> 00:00:30,880
it has only one registered stage per

14
00:00:30,880 --> 00:00:33,040
round it is compact meaning that

15
00:00:33,040 --> 00:00:35,120
compared to the state of the art it

16
00:00:35,120 --> 00:00:37,840
attains low area consumption and it is a

17
00:00:37,840 --> 00:00:39,760
stretch for widely extendable to higher

18
00:00:39,760 --> 00:00:42,320
order securities by the means of an

19
00:00:42,320 --> 00:00:46,160
algorithm that we have provided for it

20
00:00:46,160 --> 00:00:48,160
first we will have an introduction

21
00:00:48,160 --> 00:00:50,640
including a brief review of masking

22
00:00:50,640 --> 00:00:53,120
schemes and mass implementations of

23
00:00:53,120 --> 00:00:55,280
keychain then repair to the audio low

24
00:00:55,280 --> 00:00:56,399
latency

25
00:00:56,399 --> 00:00:58,719
implementation of ketchup which is the

26
00:00:58,719 --> 00:01:00,559
first order on raw threshold

27
00:01:00,559 --> 00:01:03,039
implementation and finally we go through

28
00:01:03,039 --> 00:01:04,959
the generic single register program

29
00:01:04,959 --> 00:01:08,159
realization followed by its evaluation

30
00:01:08,159 --> 00:01:10,479
results

31
00:01:10,479 --> 00:01:12,640
masking schemes are probably secure

32
00:01:12,640 --> 00:01:15,280
counter measures and case power analysis

33
00:01:15,280 --> 00:01:16,880
they are based on multi-party

34
00:01:16,880 --> 00:01:19,600
computation and secret sharing two of

35
00:01:19,600 --> 00:01:21,840
the most famous hardware masking schemes

36
00:01:21,840 --> 00:01:24,159
are threshold implementation and domain

37
00:01:24,159 --> 00:01:26,320
oriented masking

38
00:01:26,320 --> 00:01:28,320
the threshold implementation scheme was

39
00:01:28,320 --> 00:01:30,400
firstly introduced for first order

40
00:01:30,400 --> 00:01:32,720
security and then it was extended to

41
00:01:32,720 --> 00:01:35,840
higher orders however later it was shown

42
00:01:35,840 --> 00:01:38,400
that the proposed extension only

43
00:01:38,400 --> 00:01:40,960
provides univariate security and fails

44
00:01:40,960 --> 00:01:43,439
to provide multivariate security due to

45
00:01:43,439 --> 00:01:46,000
the lack of fresh random bits however

46
00:01:46,000 --> 00:01:48,399
the key property of this order threshold

47
00:01:48,399 --> 00:01:50,320
implementation is this order

48
00:01:50,320 --> 00:01:53,119
non-completeness which necessitates td

49
00:01:53,119 --> 00:01:55,439
plus 1 as the minimum number of input

50
00:01:55,439 --> 00:01:58,159
shares where t is the algebraic degree

51
00:01:58,159 --> 00:02:00,640
of the shared function

52
00:02:00,640 --> 00:02:03,040
here we have an example which is first

53
00:02:03,040 --> 00:02:05,600
order implement threshold implementation

54
00:02:05,600 --> 00:02:08,000
of an and gate according to the above

55
00:02:08,000 --> 00:02:10,318
formula for the minimum boundary of the

56
00:02:10,318 --> 00:02:13,280
input shares each input has been split

57
00:02:13,280 --> 00:02:16,080
into three shares

58
00:02:16,080 --> 00:02:17,520
the main challenge of threshold

59
00:02:17,520 --> 00:02:19,840
implementation is achieving uniformity

60
00:02:19,840 --> 00:02:22,319
of a shared function a simple example

61
00:02:22,319 --> 00:02:24,640
would be the direct sharing of dimension

62
00:02:24,640 --> 00:02:27,280
and gate which successfully attains

63
00:02:27,280 --> 00:02:29,680
non-completeness property but fails to

64
00:02:29,680 --> 00:02:33,440
achieve uniform output bits

65
00:02:33,440 --> 00:02:35,840
domain oriented masking is the other

66
00:02:35,840 --> 00:02:37,920
well-known hardware masking scheme which

67
00:02:37,920 --> 00:02:41,519
is configurable to any arbitrary order

68
00:02:41,519 --> 00:02:43,920
according to dummy scheme input shares

69
00:02:43,920 --> 00:02:46,480
are divided into independent sets called

70
00:02:46,480 --> 00:02:48,640
domains and this independence is

71
00:02:48,640 --> 00:02:52,319
maintained throughout the whole design

72
00:02:52,319 --> 00:02:54,720
it includes a refreshing layer that adds

73
00:02:54,720 --> 00:02:56,879
fresh random bits to intermediate

74
00:02:56,879 --> 00:02:59,280
variables before compressing them to

75
00:02:59,280 --> 00:03:01,680
reduce the number of output shares the

76
00:03:01,680 --> 00:03:04,080
application of refreshing layer followed

77
00:03:04,080 --> 00:03:07,120
by compression layer necessities hiring

78
00:03:07,120 --> 00:03:09,040
of a register layer at the middle to

79
00:03:09,040 --> 00:03:11,360
avoid glitch propagation

80
00:03:11,360 --> 00:03:13,680
and this refreshing layer

81
00:03:13,680 --> 00:03:16,720
as well as the independent property

82
00:03:16,720 --> 00:03:18,959
leads into g plus one as the minimum

83
00:03:18,959 --> 00:03:21,280
number of input shares rather than td

84
00:03:21,280 --> 00:03:22,640
plus one

85
00:03:22,640 --> 00:03:24,959
an example would be the first order

86
00:03:24,959 --> 00:03:26,560
domain

87
00:03:26,560 --> 00:03:29,280
oriented masking implementation

88
00:03:29,280 --> 00:03:32,400
of and gate in which all aipj

89
00:03:32,400 --> 00:03:34,400
multiplication terms are called

90
00:03:34,400 --> 00:03:37,040
component functions this is important

91
00:03:37,040 --> 00:03:39,599
since later in our design we will refer

92
00:03:39,599 --> 00:03:43,120
to component functions frequently

93
00:03:43,120 --> 00:03:45,120
the other topic that would like to go

94
00:03:45,120 --> 00:03:48,560
over is a brief history of the mass

95
00:03:48,560 --> 00:03:50,640
implementations of kichat that are

96
00:03:50,640 --> 00:03:53,439
proposed up to the present time

97
00:03:53,439 --> 00:03:55,519
majority of these percentage these

98
00:03:55,519 --> 00:03:58,480
implementations are first order ones the

99
00:03:58,480 --> 00:04:01,040
first mass implementation of keychain

100
00:04:01,040 --> 00:04:04,319
was introduced by its designers it was a

101
00:04:04,319 --> 00:04:06,879
three-shared threshold implementation

102
00:04:06,879 --> 00:04:09,439
however later it was discovered that it

103
00:04:09,439 --> 00:04:12,080
suffers from non-uniform output shares

104
00:04:12,080 --> 00:04:14,560
the second third and fourth proposed

105
00:04:14,560 --> 00:04:17,839
designs aimed to fix this non-uniformity

106
00:04:17,839 --> 00:04:20,399
the second one

107
00:04:20,399 --> 00:04:22,800
employed a plenty of randomness to

108
00:04:22,800 --> 00:04:25,360
achieve the goal the third one increase

109
00:04:25,360 --> 00:04:28,080
the number of input shares to sure and

110
00:04:28,080 --> 00:04:30,400
led into an area increase

111
00:04:30,400 --> 00:04:33,360
the fourth one followed a different

112
00:04:33,360 --> 00:04:35,520
technique

113
00:04:35,520 --> 00:04:38,320
and proposed the so-called

114
00:04:38,320 --> 00:04:42,000
changing of the guard methodology which

115
00:04:42,000 --> 00:04:44,240
constructs uniform non-linear layers

116
00:04:44,240 --> 00:04:45,360
instead of

117
00:04:45,360 --> 00:04:48,560
uniform individual aspects

118
00:04:48,560 --> 00:04:50,720
there is only a disorder tone

119
00:04:50,720 --> 00:04:53,040
implementation of keychain in high order

120
00:04:53,040 --> 00:04:54,240
group

121
00:04:54,240 --> 00:04:56,960
compared to the td plus one scheme this

122
00:04:56,960 --> 00:04:58,720
design is

123
00:04:58,720 --> 00:05:02,080
compact however it requires a notable

124
00:05:02,080 --> 00:05:04,240
number of first random bits per chain

125
00:05:04,240 --> 00:05:06,560
stance let's say for second order

126
00:05:06,560 --> 00:05:09,520
implementation this amount equals to 15

127
00:05:09,520 --> 00:05:12,320
bits per chain stands

128
00:05:12,320 --> 00:05:14,320
we have dedicated

129
00:05:14,320 --> 00:05:16,800
low latency implementations to the third

130
00:05:16,800 --> 00:05:18,800
group

131
00:05:18,800 --> 00:05:20,960
where there is only a two round on rule

132
00:05:20,960 --> 00:05:22,880
threshold implementation

133
00:05:22,880 --> 00:05:25,520
this design successfully achieves

134
00:05:25,520 --> 00:05:27,840
half number of clock cycles while

135
00:05:27,840 --> 00:05:31,039
requiring six input shares at its first

136
00:05:31,039 --> 00:05:32,160
order

137
00:05:32,160 --> 00:05:33,759
this is

138
00:05:33,759 --> 00:05:35,919
theoretically extendable to high orders

139
00:05:35,919 --> 00:05:40,080
however in practice in conference

140
00:05:40,080 --> 00:05:42,000
significant

141
00:05:42,000 --> 00:05:44,240
challenges

142
00:05:44,240 --> 00:05:46,479
let us say what happens when we want to

143
00:05:46,479 --> 00:05:48,160
extend it to higher order

144
00:05:48,160 --> 00:05:49,600
implementations

145
00:05:49,600 --> 00:05:51,280
this is the round

146
00:05:51,280 --> 00:05:53,600
the design of the two round on draw

147
00:05:53,600 --> 00:05:56,319
threshold implementation of ketchup

148
00:05:56,319 --> 00:05:59,280
if the entire design is supposed to have

149
00:05:59,280 --> 00:06:01,199
a security order d according to

150
00:06:01,199 --> 00:06:04,400
designers the first round should have

151
00:06:04,400 --> 00:06:06,560
security order of 2d

152
00:06:06,560 --> 00:06:09,039
this is this duplication is a necessary

153
00:06:09,039 --> 00:06:11,360
rule which ensures

154
00:06:11,360 --> 00:06:14,479
non-completeness however it implies two

155
00:06:14,479 --> 00:06:16,720
dt plus one as the minimum number of

156
00:06:16,720 --> 00:06:18,479
input shares

157
00:06:18,479 --> 00:06:21,360
two implementations are proposed for

158
00:06:21,360 --> 00:06:23,919
first order realization by the designers

159
00:06:23,919 --> 00:06:26,000
one with five input shares and the other

160
00:06:26,000 --> 00:06:28,479
with six input checks the results show

161
00:06:28,479 --> 00:06:30,880
that the second one leads to a more

162
00:06:30,880 --> 00:06:33,759
compact implementation

163
00:06:33,759 --> 00:06:36,560
now suppose for second and third order

164
00:06:36,560 --> 00:06:38,880
securities according to the mentioned

165
00:06:38,880 --> 00:06:40,960
duplication rule

166
00:06:40,960 --> 00:06:42,880
the minimum number of input shares in

167
00:06:42,880 --> 00:06:45,440
each of these cases would be 9 and 13

168
00:06:45,440 --> 00:06:46,720
accordingly

169
00:06:46,720 --> 00:06:48,880
this is not a trivial task at all to

170
00:06:48,880 --> 00:06:50,479
find

171
00:06:50,479 --> 00:06:53,759
efficient and non-complex sharings for

172
00:06:53,759 --> 00:06:56,639
5-bit cheap permutation with 9 and 13

173
00:06:56,639 --> 00:06:58,160
input shares

174
00:06:58,160 --> 00:07:00,319
and this is just in case that we do not

175
00:07:00,319 --> 00:07:02,880
consider uniformity challenge if we

176
00:07:02,880 --> 00:07:05,120
consider uniform implementations the

177
00:07:05,120 --> 00:07:06,240
problem

178
00:07:06,240 --> 00:07:08,240
even gets worse

179
00:07:08,240 --> 00:07:10,400
furthermore even if we suppose that

180
00:07:10,400 --> 00:07:12,639
there are implementations which map 9

181
00:07:12,639 --> 00:07:15,199
and 13 input shares to 9 and 13 output

182
00:07:15,199 --> 00:07:18,319
shares such implementations would pose

183
00:07:18,319 --> 00:07:20,080
significant cost

184
00:07:20,080 --> 00:07:23,199
which is not of interest especially when

185
00:07:23,199 --> 00:07:26,639
considering the real world gadgets

186
00:07:26,639 --> 00:07:28,960
so if we take another look

187
00:07:28,960 --> 00:07:32,000
to the map of existing implemented mass

188
00:07:32,000 --> 00:07:34,400
implementations of keycheck now we can

189
00:07:34,400 --> 00:07:37,120
feel the need for a compact low latency

190
00:07:37,120 --> 00:07:38,960
implementation of keycheck which is

191
00:07:38,960 --> 00:07:43,199
feasibly extendable to higher orders

192
00:07:43,199 --> 00:07:44,479
to

193
00:07:44,479 --> 00:07:47,440
satisfy this need we propose or single

194
00:07:47,440 --> 00:07:49,840
register per run dom implementation of

195
00:07:49,840 --> 00:07:52,080
kichat our designer stays with the

196
00:07:52,080 --> 00:07:54,960
latency of an unprotected implementation

197
00:07:54,960 --> 00:07:57,039
at its

198
00:07:57,039 --> 00:07:58,560
higher at

199
00:07:58,560 --> 00:08:02,000
any arbitrary order

200
00:08:02,479 --> 00:08:05,360
to this end we revise the round function

201
00:08:05,360 --> 00:08:08,160
of the dom implementation of keycheck

202
00:08:08,160 --> 00:08:11,360
we relocate the compression layer in

203
00:08:11,360 --> 00:08:13,520
such a way that the wrong function needs

204
00:08:13,520 --> 00:08:16,240
only one register stage per round in

205
00:08:16,240 --> 00:08:18,639
fact we move the compression layer after

206
00:08:18,639 --> 00:08:20,960
the linear layer theta

207
00:08:20,960 --> 00:08:23,599
which results in d plus one to the power

208
00:08:23,599 --> 00:08:26,639
of two instances of theta rather than

209
00:08:26,639 --> 00:08:29,120
d plus one instances of course we will

210
00:08:29,120 --> 00:08:31,199
take this note into account when

211
00:08:31,199 --> 00:08:33,599
evaluating our design

212
00:08:33,599 --> 00:08:36,479
but more importantly we are interested

213
00:08:36,479 --> 00:08:38,880
in investigating what happens in the

214
00:08:38,880 --> 00:08:41,599
lack of register layer after the

215
00:08:41,599 --> 00:08:43,360
non-linear layer g

216
00:08:43,360 --> 00:08:46,320
and before linear layer theta as its

217
00:08:46,320 --> 00:08:49,760
subsequent operation

218
00:08:50,160 --> 00:08:52,959
here we have a simple outlook of how g

219
00:08:52,959 --> 00:08:56,080
function operates on its 5 input bits it

220
00:08:56,080 --> 00:08:58,640
replaces each bit with the result of its

221
00:08:58,640 --> 00:09:01,760
xor with a multiplication

222
00:09:01,760 --> 00:09:02,640
term

223
00:09:02,640 --> 00:09:05,440
the multiplication term is produced by

224
00:09:05,440 --> 00:09:08,240
the complement of the next bit and its

225
00:09:08,240 --> 00:09:10,000
adjacent bit

226
00:09:10,000 --> 00:09:12,240
the outputs of that are then delivered

227
00:09:12,240 --> 00:09:14,720
the outputs of g are then delivered to

228
00:09:14,720 --> 00:09:17,920
tether and theta also

229
00:09:17,920 --> 00:09:19,920
replaces each beat

230
00:09:19,920 --> 00:09:22,880
with the result of its xor with a parity

231
00:09:22,880 --> 00:09:25,360
bit the parity is made up of 10

232
00:09:25,360 --> 00:09:27,760
different bits where one of these 10

233
00:09:27,760 --> 00:09:30,640
bits is exactly the one previous to the

234
00:09:30,640 --> 00:09:33,120
bit being processed

235
00:09:33,120 --> 00:09:35,519
to keep it simple and easy to follow

236
00:09:35,519 --> 00:09:38,160
april with a prime will be added to b y

237
00:09:38,160 --> 00:09:42,640
b prime to c primes and so on

238
00:09:43,120 --> 00:09:45,519
let's check what happens for first order

239
00:09:45,519 --> 00:09:47,920
implementation where we have two share

240
00:09:47,920 --> 00:09:51,519
input bits and four share output bits

241
00:09:51,519 --> 00:09:53,839
the tether is applied to the output

242
00:09:53,839 --> 00:09:56,880
stuff g function and if you keep an eye

243
00:09:56,880 --> 00:09:59,279
on output share one for example we can

244
00:09:59,279 --> 00:10:02,320
see that exploring a prime and b prime

245
00:10:02,320 --> 00:10:05,440
these two

246
00:10:05,440 --> 00:10:06,880
leakage on

247
00:10:06,880 --> 00:10:09,600
all shares of c input bit the same

248
00:10:09,600 --> 00:10:13,600
leakage exists when we export the second

249
00:10:13,600 --> 00:10:16,480
the third shares of c prime and d prime

250
00:10:16,480 --> 00:10:18,959
and speaking more generally exploring

251
00:10:18,959 --> 00:10:21,200
every two adjacent bits of output shares

252
00:10:21,200 --> 00:10:24,480
one and two results in a dangerous

253
00:10:24,480 --> 00:10:28,000
non-completeness failure

254
00:10:28,880 --> 00:10:31,519
how can we fix this issue that is the

255
00:10:31,519 --> 00:10:34,000
result of register emission at the

256
00:10:34,000 --> 00:10:36,480
middle of g and theta

257
00:10:36,480 --> 00:10:39,920
our further investigations show that

258
00:10:39,920 --> 00:10:41,920
the leakage originates from the fact

259
00:10:41,920 --> 00:10:44,160
that the alignment of the component

260
00:10:44,160 --> 00:10:46,959
function in dumb scheme is in such a way

261
00:10:46,959 --> 00:10:48,560
that

262
00:10:48,560 --> 00:10:51,040
every output share contains more than

263
00:10:51,040 --> 00:10:54,560
one share of each input

264
00:10:54,560 --> 00:10:57,040
you say the same holds for output share

265
00:10:57,040 --> 00:10:59,519
two so our solution

266
00:10:59,519 --> 00:11:01,600
would be introducing a new alignment

267
00:11:01,600 --> 00:11:03,839
that is compatible with the lack of in

268
00:11:03,839 --> 00:11:06,800
between register

269
00:11:08,880 --> 00:11:11,200
the realign component function or

270
00:11:11,200 --> 00:11:13,040
proposed real line component function

271
00:11:13,040 --> 00:11:15,680
for first order is shown here it can be

272
00:11:15,680 --> 00:11:17,760
checked that at most one share of each

273
00:11:17,760 --> 00:11:20,000
input variable shows up in each of the

274
00:11:20,000 --> 00:11:22,320
output shares this is true for output

275
00:11:22,320 --> 00:11:26,560
share 1 and the rest of the outputs

276
00:11:26,880 --> 00:11:28,959
a good question would be what about

277
00:11:28,959 --> 00:11:31,440
extension to higher orders we are glad

278
00:11:31,440 --> 00:11:33,600
to announce that our proposed

279
00:11:33,600 --> 00:11:36,160
realignment is not just a heuristic one

280
00:11:36,160 --> 00:11:39,440
working for first order

281
00:11:39,440 --> 00:11:41,519
in fact the show in excess of input

282
00:11:41,519 --> 00:11:43,680
variables are given to the component

283
00:11:43,680 --> 00:11:45,760
functions according to a transparent

284
00:11:45,760 --> 00:11:48,000
rule which is extendable to any

285
00:11:48,000 --> 00:11:49,920
arbitrary order

286
00:11:49,920 --> 00:11:51,920
once again we refer to the first order

287
00:11:51,920 --> 00:11:54,839
solution to describe the

288
00:11:54,839 --> 00:11:58,320
algorithm the sharing nexus

289
00:11:58,320 --> 00:12:00,160
are given to component functions

290
00:12:00,160 --> 00:12:02,639
according to a table called index

291
00:12:02,639 --> 00:12:04,959
configuration table

292
00:12:04,959 --> 00:12:07,040
this table can be generated for any

293
00:12:07,040 --> 00:12:09,440
arbitrary order according to it to an

294
00:12:09,440 --> 00:12:11,360
algorithm that we have provided in

295
00:12:11,360 --> 00:12:14,079
detail in our paper

296
00:12:14,079 --> 00:12:16,320
the structure of this ad grid is based

297
00:12:16,320 --> 00:12:18,639
on three steps first is to give each

298
00:12:18,639 --> 00:12:21,279
output share only one share of each

299
00:12:21,279 --> 00:12:22,959
input variable

300
00:12:22,959 --> 00:12:24,959
then is to check for correctness of the

301
00:12:24,959 --> 00:12:27,360
masking meaning that the

302
00:12:27,360 --> 00:12:29,839
alignment should assure that

303
00:12:29,839 --> 00:12:32,560
every two adjacent columns cover all

304
00:12:32,560 --> 00:12:35,279
combinations of the share indexes

305
00:12:35,279 --> 00:12:38,800
and finally is to placing linear

306
00:12:38,800 --> 00:12:40,399
monomials

307
00:12:40,399 --> 00:12:42,240
there is a freedom to place them in

308
00:12:42,240 --> 00:12:44,639
output shares with the same show index

309
00:12:44,639 --> 00:12:47,680
of that variable

310
00:12:47,680 --> 00:12:49,920
here is our final design architecture

311
00:12:49,920 --> 00:12:52,720
for low latency dom implementation of

312
00:12:52,720 --> 00:12:55,200
ketchup we've instantiated another

313
00:12:55,200 --> 00:12:58,720
multiplexer identified

314
00:12:58,720 --> 00:13:00,639
as multiplexer 2

315
00:13:00,639 --> 00:13:03,440
which bypasses theta step and allows us

316
00:13:03,440 --> 00:13:06,240
to take the outputs of the last round

317
00:13:06,240 --> 00:13:08,079
directly from the compression layer

318
00:13:08,079 --> 00:13:11,440
which turns the number of output shares

319
00:13:11,440 --> 00:13:13,680
uh

320
00:13:13,839 --> 00:13:16,720
back to d plus 1 instead of 2 plus

321
00:13:16,720 --> 00:13:18,720
instead of d plus 1 to the power of 2

322
00:13:18,720 --> 00:13:22,800
which is produced by g function

323
00:13:23,279 --> 00:13:24,720
there are some further notes that we

324
00:13:24,720 --> 00:13:27,040
would like to discuss about our design

325
00:13:27,040 --> 00:13:29,600
first is about to use refreshing layer

326
00:13:29,600 --> 00:13:32,079
our design follows the same refreshing

327
00:13:32,079 --> 00:13:34,480
rule as the dummy scan presents

328
00:13:34,480 --> 00:13:37,040
according to this rule all aipj

329
00:13:37,040 --> 00:13:39,440
component functions where i is not equal

330
00:13:39,440 --> 00:13:43,920
to j are blinded with fresh random bits

331
00:13:43,920 --> 00:13:46,079
in fact the realignment does not change

332
00:13:46,079 --> 00:13:49,839
the refreshing layer and our design

333
00:13:49,839 --> 00:13:53,120
requires the same number of

334
00:13:53,120 --> 00:13:55,680
fresh randomness as the original dom

335
00:13:55,680 --> 00:13:58,000
skin

336
00:13:59,040 --> 00:14:01,519
however the compression layer differs in

337
00:14:01,519 --> 00:14:03,440
some detail

338
00:14:03,440 --> 00:14:06,160
let's suppose that we have the first

339
00:14:06,160 --> 00:14:08,880
order realization into which the random

340
00:14:08,880 --> 00:14:11,680
bits are applied

341
00:14:11,680 --> 00:14:13,760
according to the

342
00:14:13,760 --> 00:14:16,000
rule of compression in doma scheme

343
00:14:16,000 --> 00:14:18,560
output shares 0 and 1 and output shares

344
00:14:18,560 --> 00:14:21,920
2 and 3 are allowed to be summed up this

345
00:14:21,920 --> 00:14:24,079
instruction works for all output base

346
00:14:24,079 --> 00:14:25,920
except for d prime

347
00:14:25,920 --> 00:14:28,880
that results in a

348
00:14:28,880 --> 00:14:31,680
dangerous and invalid compression

349
00:14:31,680 --> 00:14:34,480
so we have to rearrange the outputs of

350
00:14:34,480 --> 00:14:35,760
shares

351
00:14:35,760 --> 00:14:38,000
the output shares of two prime right

352
00:14:38,000 --> 00:14:39,680
before the compression layer and of

353
00:14:39,680 --> 00:14:42,399
course after the application of the top

354
00:14:42,399 --> 00:14:44,480
and after that we can perform an

355
00:14:44,480 --> 00:14:48,480
ordinary dom compression safely

356
00:14:48,560 --> 00:14:51,199
in order to assess the performance of

357
00:14:51,199 --> 00:14:53,519
our design and to compare it with the

358
00:14:53,519 --> 00:14:55,600
state of the art we have used synopsis

359
00:14:55,600 --> 00:14:58,000
design compiler and focused on the

360
00:14:58,000 --> 00:15:00,240
implementation of one of the small-sized

361
00:15:00,240 --> 00:15:02,639
keycheck permutations with the state

362
00:15:02,639 --> 00:15:05,600
size equal to 200. the results show that

363
00:15:05,600 --> 00:15:08,000
compared to the equivalent original dom

364
00:15:08,000 --> 00:15:10,399
implementation our implementation

365
00:15:10,399 --> 00:15:13,680
achieves around 26 and 31

366
00:15:13,680 --> 00:15:16,160
lesser delay in first and second order

367
00:15:16,160 --> 00:15:18,959
securities respectively

368
00:15:18,959 --> 00:15:22,160
our design has almost constant delay in

369
00:15:22,160 --> 00:15:24,480
its higher orders

370
00:15:24,480 --> 00:15:26,480
compared to the first order low latency

371
00:15:26,480 --> 00:15:29,040
ti implementation of keychain

372
00:15:29,040 --> 00:15:30,680
our design had a

373
00:15:30,680 --> 00:15:34,240
74.5 percent lesser area consumption

374
00:15:34,240 --> 00:15:36,399
where they had while they have almost

375
00:15:36,399 --> 00:15:39,360
equal delays

376
00:15:39,519 --> 00:15:42,000
here we have reflected the detailed

377
00:15:42,000 --> 00:15:44,320
results of implementing our design with

378
00:15:44,320 --> 00:15:46,880
security orders one to five and the

379
00:15:46,880 --> 00:15:50,639
results of the related works

380
00:15:50,639 --> 00:15:52,639
we've also performed some experimental

381
00:15:52,639 --> 00:15:55,360
analysis including the verification of

382
00:15:55,360 --> 00:15:58,000
the security of our constructed mask g

383
00:15:58,000 --> 00:16:01,040
function using silver verification tool

384
00:16:01,040 --> 00:16:03,839
and fpga based evaluation using software

385
00:16:03,839 --> 00:16:05,279
g platform

386
00:16:05,279 --> 00:16:07,680
we have used 100 million traces to

387
00:16:07,680 --> 00:16:08,720
perform

388
00:16:08,720 --> 00:16:10,880
fixed vs random t tests

389
00:16:10,880 --> 00:16:12,959
for first second and third order

390
00:16:12,959 --> 00:16:15,759
implementations

391
00:16:15,759 --> 00:16:18,959
for first order implementation

392
00:16:18,959 --> 00:16:21,920
we observe no leakage at first order t

393
00:16:21,920 --> 00:16:23,440
test however

394
00:16:23,440 --> 00:16:26,639
univariate bivariate and multivariate

395
00:16:26,639 --> 00:16:29,040
second and third order t test

396
00:16:29,040 --> 00:16:32,480
show leakage which is the approval of

397
00:16:32,480 --> 00:16:33,519
the

398
00:16:33,519 --> 00:16:36,480
validation of our setup

399
00:16:36,480 --> 00:16:39,199
for second and third order securities no

400
00:16:39,199 --> 00:16:42,000
detectable leakage is observed

401
00:16:42,000 --> 00:16:42,959
since

402
00:16:42,959 --> 00:16:44,160
to the

403
00:16:44,160 --> 00:16:46,720
since there is a high noise caused by

404
00:16:46,720 --> 00:16:49,120
the high number of fresh random bits

405
00:16:49,120 --> 00:16:51,519
updated at every clock cycle in this

406
00:16:51,519 --> 00:16:54,000
design

407
00:16:54,480 --> 00:16:57,199
in summary about low latency check at

408
00:16:57,199 --> 00:16:59,839
any arbitrary order first note is that

409
00:16:59,839 --> 00:17:02,079
this is a design with implementation

410
00:17:02,079 --> 00:17:04,160
costs that are within the feasibility

411
00:17:04,160 --> 00:17:07,039
bonds from a latency point of view

412
00:17:07,039 --> 00:17:09,280
it has a single register per round

413
00:17:09,280 --> 00:17:11,839
regardless of its security order and

414
00:17:11,839 --> 00:17:13,760
from area point of view

415
00:17:13,760 --> 00:17:16,000
it has a lower area overhead compared to

416
00:17:16,000 --> 00:17:19,760
the state of the art the second note is

417
00:17:19,760 --> 00:17:21,679
that the challenge raised by registered

418
00:17:21,679 --> 00:17:24,319
mission in this design is addressed with

419
00:17:24,319 --> 00:17:27,919
the help of kichaki specifications

420
00:17:27,919 --> 00:17:30,160
and there are some closing points about

421
00:17:30,160 --> 00:17:31,360
the design

422
00:17:31,360 --> 00:17:33,760
first is that our solution

423
00:17:33,760 --> 00:17:36,160
is not only working for theta but also

424
00:17:36,160 --> 00:17:38,960
it works for any linear function that is

425
00:17:38,960 --> 00:17:41,679
applied right after the g function the

426
00:17:41,679 --> 00:17:44,880
second is that our solution is dedicated

427
00:17:44,880 --> 00:17:48,880
to g function and this is not extendable

428
00:17:48,880 --> 00:17:50,880
it's right verbally extendable to any

429
00:17:50,880 --> 00:17:52,320
other function

430
00:17:52,320 --> 00:17:54,960
and last but not least is that we make

431
00:17:54,960 --> 00:17:57,360
no claim that the proposed index

432
00:17:57,360 --> 00:18:00,080
configuration is unique maybe there are

433
00:18:00,080 --> 00:18:03,760
some solutions which

434
00:18:03,760 --> 00:18:06,799
can distribute the sharing access to

435
00:18:06,799 --> 00:18:09,280
component functions and achieve the same

436
00:18:09,280 --> 00:18:12,280
code

