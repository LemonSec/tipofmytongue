1
00:00:00,640 --> 00:00:03,199
hi i'm yuji koike in this video i'm

2
00:00:03,199 --> 00:00:05,520
gonna talk about youroi updatable

3
00:00:05,520 --> 00:00:07,680
whitebox cryptography

4
00:00:07,680 --> 00:00:09,679
this is a joint work with takanori

5
00:00:09,679 --> 00:00:11,440
subway

6
00:00:11,440 --> 00:00:13,920
now before i talk about the main point

7
00:00:13,920 --> 00:00:16,320
of our work let me get started with some

8
00:00:16,320 --> 00:00:17,680
background

9
00:00:17,680 --> 00:00:20,320
white box cryptography is cryptography

10
00:00:20,320 --> 00:00:22,400
which ensures security of the

11
00:00:22,400 --> 00:00:24,960
cryptographic keys in the white box

12
00:00:24,960 --> 00:00:26,320
setting

13
00:00:26,320 --> 00:00:28,720
in this setting the adversary is assumed

14
00:00:28,720 --> 00:00:31,439
to have control over the execution

15
00:00:31,439 --> 00:00:32,960
environment

16
00:00:32,960 --> 00:00:36,160
so the adversary is allowed to observe

17
00:00:36,160 --> 00:00:38,640
not only inputs and outputs of the

18
00:00:38,640 --> 00:00:41,600
cryptographic algorithm but also its

19
00:00:41,600 --> 00:00:43,840
internal

20
00:00:43,840 --> 00:00:45,920
what's more the adversary can even

21
00:00:45,920 --> 00:00:48,719
modify the internal states

22
00:00:48,719 --> 00:00:50,640
this white box setting is quite

23
00:00:50,640 --> 00:00:53,520
different from the standard model called

24
00:00:53,520 --> 00:00:56,399
black box setting where the adversary is

25
00:00:56,399 --> 00:00:59,280
allowed to observe only inputs and

26
00:00:59,280 --> 00:01:02,960
outputs of the algorithm

27
00:01:03,039 --> 00:01:05,760
to be more specific what can the white

28
00:01:05,760 --> 00:01:08,000
box adversary do

29
00:01:08,000 --> 00:01:10,960
well since white box adversary has the

30
00:01:10,960 --> 00:01:14,400
control over the execution environment

31
00:01:14,400 --> 00:01:16,880
she can do anything possible to come up

32
00:01:16,880 --> 00:01:18,320
with

33
00:01:18,320 --> 00:01:21,119
for example the adversary can observe

34
00:01:21,119 --> 00:01:23,520
and modify all the states of the

35
00:01:23,520 --> 00:01:25,439
algorithm like i said

36
00:01:25,439 --> 00:01:28,159
and she can do memory inspection

37
00:01:28,159 --> 00:01:30,960
reverse engineering of implementation

38
00:01:30,960 --> 00:01:35,520
code and code tempering and so on

39
00:01:35,520 --> 00:01:37,840
under such assumption there are two

40
00:01:37,840 --> 00:01:40,320
requirements to design a new white box

41
00:01:40,320 --> 00:01:41,520
cipher

42
00:01:41,520 --> 00:01:43,840
first of all white box cipher is

43
00:01:43,840 --> 00:01:46,560
required to provide key extraction

44
00:01:46,560 --> 00:01:48,159
security

45
00:01:48,159 --> 00:01:50,880
this security ensures that it is secure

46
00:01:50,880 --> 00:01:53,520
against key extraction attack where the

47
00:01:53,520 --> 00:01:56,719
adversary tries to extract the secret

48
00:01:56,719 --> 00:01:59,920
key from the implementation code

49
00:01:59,920 --> 00:02:02,640
in addition white box cipher has to

50
00:02:02,640 --> 00:02:06,000
provide code lifting security

51
00:02:06,000 --> 00:02:08,720
this security ensures that it is secure

52
00:02:08,720 --> 00:02:11,680
against code lifting attack where

53
00:02:11,680 --> 00:02:14,800
instead of extracting the key the lfc

54
00:02:14,800 --> 00:02:17,920
tries to steal implementation code for

55
00:02:17,920 --> 00:02:20,560
the cryptographic function and use it as

56
00:02:20,560 --> 00:02:23,120
a large effective key in a standalone

57
00:02:23,120 --> 00:02:24,560
manner

58
00:02:24,560 --> 00:02:26,080
these are the two

59
00:02:26,080 --> 00:02:28,480
security requirements to meet when

60
00:02:28,480 --> 00:02:31,760
designing a new white box cipher

61
00:02:31,760 --> 00:02:34,080
now let me show you an existing white

62
00:02:34,080 --> 00:02:36,640
box cipher and how it meets these

63
00:02:36,640 --> 00:02:38,720
security requirements

64
00:02:38,720 --> 00:02:42,080
the basic idea for the recent ciphers is

65
00:02:42,080 --> 00:02:45,360
to generate the table which comprises

66
00:02:45,360 --> 00:02:47,840
the inputs for a certain cryptographic

67
00:02:47,840 --> 00:02:51,440
operation and their outputs to hide the

68
00:02:51,440 --> 00:02:54,640
process of cryptographic operations

69
00:02:54,640 --> 00:02:58,239
for instance a white box cipher spn box

70
00:02:58,239 --> 00:03:01,440
which was proposed by bogdanov at all

71
00:03:01,440 --> 00:03:04,720
is based on table lookup whose table is

72
00:03:04,720 --> 00:03:08,000
composed of inputs and outputs for block

73
00:03:08,000 --> 00:03:09,280
cipher

74
00:03:09,280 --> 00:03:12,560
it uses the table as a secret key and

75
00:03:12,560 --> 00:03:14,080
looks up

76
00:03:14,080 --> 00:03:16,879
values in the table for encryption and

77
00:03:16,879 --> 00:03:19,120
decryption

78
00:03:19,120 --> 00:03:21,680
so because of using a block cipher as an

79
00:03:21,680 --> 00:03:24,799
underlying cipher for table generation

80
00:03:24,799 --> 00:03:26,480
even if the adversary can see the

81
00:03:26,480 --> 00:03:29,280
contents of the table what she can see

82
00:03:29,280 --> 00:03:32,159
is just a set of inputs and outputs for

83
00:03:32,159 --> 00:03:33,599
the cipher

84
00:03:33,599 --> 00:03:35,840
as a result if the underlying block

85
00:03:35,840 --> 00:03:38,239
cipher is secure in the standard black

86
00:03:38,239 --> 00:03:40,640
box setting it is computationally

87
00:03:40,640 --> 00:03:42,879
difficult to extract the key from the

88
00:03:42,879 --> 00:03:44,080
table

89
00:03:44,080 --> 00:03:46,959
therefore spn box can successfully

90
00:03:46,959 --> 00:03:49,599
ensure the key extraction security by

91
00:03:49,599 --> 00:03:51,760
reducing the key extraction security in

92
00:03:51,760 --> 00:03:54,000
the white box setting to the key

93
00:03:54,000 --> 00:03:56,400
recovery problem for the underlying

94
00:03:56,400 --> 00:03:59,120
block cipher in the standard black box

95
00:03:59,120 --> 00:04:00,879
setting

96
00:04:00,879 --> 00:04:03,439
when it comes to code lifting security

97
00:04:03,439 --> 00:04:06,239
bogdanov at all proposed a security

98
00:04:06,239 --> 00:04:08,879
notion called space hardness

99
00:04:08,879 --> 00:04:11,360
to quantify the security level against

100
00:04:11,360 --> 00:04:13,599
the code lifting attack

101
00:04:13,599 --> 00:04:16,160
space hardness shows the relationship

102
00:04:16,160 --> 00:04:18,959
between the amount of stolen data and

103
00:04:18,959 --> 00:04:21,918
the corresponding security level

104
00:04:21,918 --> 00:04:25,440
for instance t over 4 128 spaced

105
00:04:25,440 --> 00:04:28,400
hardness means that the adversary has to

106
00:04:28,400 --> 00:04:31,360
steal at least one fourth of the table

107
00:04:31,360 --> 00:04:33,680
to compute the input with the

108
00:04:33,680 --> 00:04:36,000
probability of more than two to the

109
00:04:36,000 --> 00:04:39,520
power of minus 128.

110
00:04:39,520 --> 00:04:43,759
spn box 16 provides this security level

111
00:04:43,759 --> 00:04:46,880
in terms of called lifting security

112
00:04:46,880 --> 00:04:50,800
in other words spin box 16 whose total

113
00:04:50,800 --> 00:04:52,840
table size t is

114
00:04:52,840 --> 00:04:56,240
128 kilobytes ensures sufficient

115
00:04:56,240 --> 00:04:59,280
security even if one fourth table data

116
00:04:59,280 --> 00:05:02,560
is linked to the adversary

117
00:05:02,560 --> 00:05:05,199
however space hardness is just

118
00:05:05,199 --> 00:05:08,320
mitigation of code lifting attack

119
00:05:08,320 --> 00:05:11,120
why because this security notion cannot

120
00:05:11,120 --> 00:05:14,000
deal with continuous leakage

121
00:05:14,000 --> 00:05:17,840
even if t over 4 128 space hardness

122
00:05:17,840 --> 00:05:20,160
ensures some security level in the

123
00:05:20,160 --> 00:05:22,880
situation where one force of the table

124
00:05:22,880 --> 00:05:26,320
is leaked by continuously stealing the

125
00:05:26,320 --> 00:05:29,039
table data the amount of stolen dollar

126
00:05:29,039 --> 00:05:31,759
will be more than t over 4

127
00:05:31,759 --> 00:05:35,840
and eventually that amount will reach t

128
00:05:35,840 --> 00:05:37,039
which means

129
00:05:37,039 --> 00:05:39,919
the adversary will succeed in

130
00:05:39,919 --> 00:05:43,199
cold lifting attack in the end

131
00:05:43,199 --> 00:05:45,919
this figure shows relationship between

132
00:05:45,919 --> 00:05:49,440
time and corresponding security level z

133
00:05:49,440 --> 00:05:51,600
when considering the leakage of a

134
00:05:51,600 --> 00:05:55,360
certain amount on a daily basis

135
00:05:55,360 --> 00:05:57,919
it shows that security level drops

136
00:05:57,919 --> 00:06:00,560
constantly to zero

137
00:06:00,560 --> 00:06:03,039
so what can we do about it

138
00:06:03,039 --> 00:06:05,919
well as a countermeasure it is natural

139
00:06:05,919 --> 00:06:08,720
to think that we update the secret key

140
00:06:08,720 --> 00:06:11,600
or the table in this context

141
00:06:11,600 --> 00:06:14,240
however this counter measure would come

142
00:06:14,240 --> 00:06:17,120
with two disadvantages

143
00:06:17,120 --> 00:06:19,520
first this counter measure will need a

144
00:06:19,520 --> 00:06:21,840
lot of computational cost

145
00:06:21,840 --> 00:06:24,639
and second it will increase security

146
00:06:24,639 --> 00:06:26,080
risk

147
00:06:26,080 --> 00:06:28,240
in the following slides i will talk

148
00:06:28,240 --> 00:06:31,600
about these disadvantages in more detail

149
00:06:31,600 --> 00:06:34,160
by taking mobile payment application as

150
00:06:34,160 --> 00:06:36,560
an example

151
00:06:36,560 --> 00:06:38,720
so mobile payment application is a

152
00:06:38,720 --> 00:06:41,440
typical application in which whitebox

153
00:06:41,440 --> 00:06:44,319
cryptography is applicable

154
00:06:44,319 --> 00:06:48,080
in this context whitebox cipher is used

155
00:06:48,080 --> 00:06:50,479
to protect payment credentials to

156
00:06:50,479 --> 00:06:52,400
encrypting them

157
00:06:52,400 --> 00:06:56,080
in this example let's say spin box 16

158
00:06:56,080 --> 00:07:00,000
whose table size is 128 kilobytes is

159
00:07:00,000 --> 00:07:02,560
used to protect them

160
00:07:02,560 --> 00:07:05,199
and the adversary is insidiously staying

161
00:07:05,199 --> 00:07:07,759
in the system and continuously steals

162
00:07:07,759 --> 00:07:11,039
the terrible data for spn box 16 little

163
00:07:11,039 --> 00:07:13,039
by little

164
00:07:13,039 --> 00:07:15,759
in this case spin box 16 has the

165
00:07:15,759 --> 00:07:20,639
property of t over 4 128 space hardness

166
00:07:20,639 --> 00:07:24,080
so even if the top table data of 32

167
00:07:24,080 --> 00:07:27,280
gigabytes is stolen by the adversaries

168
00:07:27,280 --> 00:07:30,319
spin box 16 can ensure sufficient

169
00:07:30,319 --> 00:07:32,560
security

170
00:07:32,560 --> 00:07:35,840
however the problem is after the leakage

171
00:07:35,840 --> 00:07:38,639
amount reached t over 4.

172
00:07:38,639 --> 00:07:41,599
if we do nothing then the security level

173
00:07:41,599 --> 00:07:45,520
drops as shown in the upper right figure

174
00:07:45,520 --> 00:07:48,800
so in order to ensure constant security

175
00:07:48,800 --> 00:07:51,280
it is necessary to update the table

176
00:07:51,280 --> 00:07:53,840
before the leakage amount reached d over

177
00:07:53,840 --> 00:07:55,360
4.

178
00:07:55,360 --> 00:07:58,879
however this causes us two problems

179
00:07:58,879 --> 00:08:01,360
which are computational cost and

180
00:08:01,360 --> 00:08:03,520
security risk

181
00:08:03,520 --> 00:08:05,840
first of all regarding the computational

182
00:08:05,840 --> 00:08:06,960
cost

183
00:08:06,960 --> 00:08:10,360
updating the table means it requires

184
00:08:10,360 --> 00:08:14,479
re-encryption of payment credentials

185
00:08:14,479 --> 00:08:17,120
when updating the table first it is

186
00:08:17,120 --> 00:08:20,479
necessary to decrypt the encrypted

187
00:08:20,479 --> 00:08:23,599
credentials with the old table

188
00:08:23,599 --> 00:08:26,160
and then encrypt the credentials again

189
00:08:26,160 --> 00:08:29,360
with a new table

190
00:08:29,360 --> 00:08:32,240
this encryption is a additional cost to

191
00:08:32,240 --> 00:08:35,440
avoid if possible

192
00:08:35,440 --> 00:08:38,080
second when it comes to security risk

193
00:08:38,080 --> 00:08:40,719
re-encryption gives more chance for the

194
00:08:40,719 --> 00:08:43,760
adversary to see the payment credentials

195
00:08:43,760 --> 00:08:46,800
in the plain text form

196
00:08:46,800 --> 00:08:49,519
right after the decryption of the

197
00:08:49,519 --> 00:08:53,200
encrypted credentials with the old table

198
00:08:53,200 --> 00:08:56,880
they are in the plaintext form

199
00:08:56,880 --> 00:08:59,839
so if the adversary stays in the system

200
00:08:59,839 --> 00:09:03,600
it is possible to see them

201
00:09:03,760 --> 00:09:07,120
so in order to solve these problems we

202
00:09:07,120 --> 00:09:09,680
believe white box ciphers would need a

203
00:09:09,680 --> 00:09:11,120
new property

204
00:09:11,120 --> 00:09:13,920
which ensures constant security while

205
00:09:13,920 --> 00:09:16,320
maintaining the same functionality under

206
00:09:16,320 --> 00:09:18,720
the continuous leakage

207
00:09:18,720 --> 00:09:20,720
because a cipher with this property

208
00:09:20,720 --> 00:09:23,440
would provide constant security even in

209
00:09:23,440 --> 00:09:26,640
the situation of continuous leakage

210
00:09:26,640 --> 00:09:28,640
what's more since a cipher with this

211
00:09:28,640 --> 00:09:30,480
property can maintain the same

212
00:09:30,480 --> 00:09:31,760
functionality

213
00:09:31,760 --> 00:09:35,120
it wouldn't need a re-encryption

214
00:09:35,120 --> 00:09:38,480
and we define this new property as the

215
00:09:38,480 --> 00:09:40,640
longevity

216
00:09:40,640 --> 00:09:43,279
the formal definition is in our paper so

217
00:09:43,279 --> 00:09:46,000
if i talk about the definition of the

218
00:09:46,000 --> 00:09:49,279
longevity in more casual way then

219
00:09:49,279 --> 00:09:52,399
i would say a cipher with the longevity

220
00:09:52,399 --> 00:09:55,680
ensures that even in the situation of

221
00:09:55,680 --> 00:09:57,440
continuous leakage

222
00:09:57,440 --> 00:09:59,920
the upper bounds of success probability

223
00:09:59,920 --> 00:10:03,040
for called lifting attack is less than 2

224
00:10:03,040 --> 00:10:05,040
power by minus

225
00:10:05,040 --> 00:10:07,839
z while keeping the same functionality

226
00:10:07,839 --> 00:10:10,880
at every single point

227
00:10:10,880 --> 00:10:13,360
this property deals with continuous

228
00:10:13,360 --> 00:10:17,279
leakage and as a result the g longevity

229
00:10:17,279 --> 00:10:18,399
can enhance

230
00:10:18,399 --> 00:10:21,600
cold lifting security

231
00:10:21,600 --> 00:10:24,880
in order to ensure the longevity

232
00:10:24,880 --> 00:10:27,519
we designed a new cryptographic scheme

233
00:10:27,519 --> 00:10:29,120
which can maintain the same

234
00:10:29,120 --> 00:10:33,440
functionality even after table updates

235
00:10:33,440 --> 00:10:36,560
by table updates this scheme aims to

236
00:10:36,560 --> 00:10:38,959
ensure constant security

237
00:10:38,959 --> 00:10:42,320
and by keeping the same functionality it

238
00:10:42,320 --> 00:10:44,839
can get rid of

239
00:10:44,839 --> 00:10:47,440
re-encryption in the following slides i

240
00:10:47,440 --> 00:10:50,079
will discuss our approach for the design

241
00:10:50,079 --> 00:10:53,519
in more detail step by step

242
00:10:53,519 --> 00:10:56,800
so white box ciphers are basically table

243
00:10:56,800 --> 00:10:58,399
based ciphers

244
00:10:58,399 --> 00:11:01,440
which means they simply look up in the

245
00:11:01,440 --> 00:11:04,480
tables repeatedly for encryption and

246
00:11:04,480 --> 00:11:06,800
decryption just like the figure on the

247
00:11:06,800 --> 00:11:08,640
left

248
00:11:08,640 --> 00:11:11,200
in order to keep the same functionality

249
00:11:11,200 --> 00:11:13,440
even after table update

250
00:11:13,440 --> 00:11:17,279
we put another encryption algorithm eki

251
00:11:17,279 --> 00:11:19,279
and the corresponding decryption

252
00:11:19,279 --> 00:11:23,200
algorithm dki between tables just like

253
00:11:23,200 --> 00:11:25,680
the figure on the right

254
00:11:25,680 --> 00:11:29,519
and then we combine one table and eki to

255
00:11:29,519 --> 00:11:32,079
create ti1

256
00:11:32,079 --> 00:11:35,920
and combine one table and dki to create

257
00:11:35,920 --> 00:11:37,920
ti2

258
00:11:37,920 --> 00:11:40,399
with this approach the functionality of

259
00:11:40,399 --> 00:11:43,040
the algorithm on the right and

260
00:11:43,040 --> 00:11:46,480
the one on the left are equivalent

261
00:11:46,480 --> 00:11:50,000
because eki and the dki on the right are

262
00:11:50,000 --> 00:11:52,399
cancelled out

263
00:11:52,399 --> 00:11:56,560
also by updating the key ki for eki and

264
00:11:56,560 --> 00:12:00,240
dki and creating different tables the

265
00:12:00,240 --> 00:12:02,800
algorithm on the right can keep the same

266
00:12:02,800 --> 00:12:05,200
functionality even after the table

267
00:12:05,200 --> 00:12:07,680
updates

268
00:12:08,160 --> 00:12:11,760
however in reality white box ciphers are

269
00:12:11,760 --> 00:12:14,000
much more complicated

270
00:12:14,000 --> 00:12:16,720
for instance there might be mds linear

271
00:12:16,720 --> 00:12:19,279
layer between table lookups in the

272
00:12:19,279 --> 00:12:21,920
algorithm so that it can ensure

273
00:12:21,920 --> 00:12:23,760
diffusion

274
00:12:23,760 --> 00:12:26,800
in this case putting ek and dk between

275
00:12:26,800 --> 00:12:28,399
tables cannot

276
00:12:28,399 --> 00:12:30,399
keep same functionality

277
00:12:30,399 --> 00:12:32,079
because once

278
00:12:32,079 --> 00:12:35,440
output of ek goes through mds linear

279
00:12:35,440 --> 00:12:36,399
layer

280
00:12:36,399 --> 00:12:39,839
the value of output will be changed and

281
00:12:39,839 --> 00:12:42,639
the changed output cannot be decrypted

282
00:12:42,639 --> 00:12:45,440
by decay successfully

283
00:12:45,440 --> 00:12:48,639
in other words this mds linear layer

284
00:12:48,639 --> 00:12:52,160
prevents ek and dk from being cancelled

285
00:12:52,160 --> 00:12:54,399
out

286
00:12:54,560 --> 00:12:57,920
so in order to solve this problem

287
00:12:57,920 --> 00:13:01,440
we split the output of table lookup into

288
00:13:01,440 --> 00:13:03,120
two parts

289
00:13:03,120 --> 00:13:06,320
in this approach one part skips mds

290
00:13:06,320 --> 00:13:11,279
layer and the other part goes through it

291
00:13:11,279 --> 00:13:14,959
with this approach eki and edki are

292
00:13:14,959 --> 00:13:17,600
successfully cancelled out

293
00:13:17,600 --> 00:13:20,560
and we can ensure that the functionality

294
00:13:20,560 --> 00:13:23,760
on the left and the one on the right are

295
00:13:23,760 --> 00:13:25,760
equivalent

296
00:13:25,760 --> 00:13:29,440
also even after updating the key ki for

297
00:13:29,440 --> 00:13:31,440
eki and dki

298
00:13:31,440 --> 00:13:35,839
the functionality remains equivalent

299
00:13:36,399 --> 00:13:39,440
so the essential approach is to update

300
00:13:39,440 --> 00:13:43,279
key ki for eki and dki

301
00:13:43,279 --> 00:13:48,160
so that it can update table ti-1 and ti2

302
00:13:48,160 --> 00:13:51,600
and keep the same functionality

303
00:13:51,600 --> 00:13:53,760
in addition in order to maintain the

304
00:13:53,760 --> 00:13:57,279
same functionality we split the output

305
00:13:57,279 --> 00:13:59,360
into two parts

306
00:13:59,360 --> 00:14:01,920
one part goes through eki and then

307
00:14:01,920 --> 00:14:04,800
directory goes to dki

308
00:14:04,800 --> 00:14:07,440
and the other part goes through mds

309
00:14:07,440 --> 00:14:12,079
layer and goes to another table lookup

310
00:14:12,079 --> 00:14:15,760
now what's important is that the key of

311
00:14:15,760 --> 00:14:18,720
the underlying cipher for s remains

312
00:14:18,720 --> 00:14:20,560
unchanged

313
00:14:20,560 --> 00:14:23,440
these approaches helps to keep the same

314
00:14:23,440 --> 00:14:26,240
functionality

315
00:14:26,800 --> 00:14:29,279
so based on the approaches we

316
00:14:29,279 --> 00:14:32,320
constructed uri which is composed of

317
00:14:32,320 --> 00:14:34,240
five elements

318
00:14:34,240 --> 00:14:37,680
first of table si which is based on the

319
00:14:37,680 --> 00:14:41,279
dedicated block cipher for sbn box

320
00:14:41,279 --> 00:14:47,439
with different key for s1 s2 and s3

321
00:14:47,760 --> 00:14:50,480
second ek and dk

322
00:14:50,480 --> 00:14:54,000
in our construction small scale aes or

323
00:14:54,000 --> 00:14:56,839
small scale present are

324
00:14:56,839 --> 00:15:00,480
suitable and then after layer and mds

325
00:15:00,480 --> 00:15:02,639
matrix layer

326
00:15:02,639 --> 00:15:05,519
it is important to note that the output

327
00:15:05,519 --> 00:15:09,600
of eki never goes through these layers

328
00:15:09,600 --> 00:15:12,000
so that it can keep the same

329
00:15:12,000 --> 00:15:14,320
functionality even after the table

330
00:15:14,320 --> 00:15:16,720
updates

331
00:15:16,720 --> 00:15:19,839
and finally can round a s in the last

332
00:15:19,839 --> 00:15:21,279
round

333
00:15:21,279 --> 00:15:25,040
the reason why we put this aes layer is

334
00:15:25,040 --> 00:15:27,760
that this simplifies the security

335
00:15:27,760 --> 00:15:31,920
evaluation in the black box setting

336
00:15:32,480 --> 00:15:35,600
based on these elements we constructed

337
00:15:35,600 --> 00:15:39,759
two variants which are euro 32 and euro

338
00:15:39,759 --> 00:15:41,920
16.

339
00:15:41,920 --> 00:15:47,519
they both take 128 bits data as an input

340
00:15:47,519 --> 00:15:50,480
when it comes to euro 32 each table

341
00:15:50,480 --> 00:15:53,360
takes 32 bits input

342
00:15:53,360 --> 00:15:56,160
and the output of table lookup is

343
00:15:56,160 --> 00:15:58,880
splitted into two parts

344
00:15:58,880 --> 00:16:02,639
one is 28 bits long and the other is

345
00:16:02,639 --> 00:16:05,040
four bits long

346
00:16:05,040 --> 00:16:10,800
total runs are for euro 32 is 16.

347
00:16:10,800 --> 00:16:14,480
and regarding the mds layer we used

348
00:16:14,480 --> 00:16:20,160
cyclic matrix which is used in picorl

349
00:16:20,800 --> 00:16:23,279
now let me discuss security in the

350
00:16:23,279 --> 00:16:26,240
standard blackbox setting

351
00:16:26,240 --> 00:16:29,040
in this setting the adversary is allowed

352
00:16:29,040 --> 00:16:32,240
to observe inputs and outputs of the

353
00:16:32,240 --> 00:16:34,959
cryptographic algorithm

354
00:16:34,959 --> 00:16:38,160
in this case security of uri in the

355
00:16:38,160 --> 00:16:39,920
black box setting

356
00:16:39,920 --> 00:16:43,759
is reduced to security of aes

357
00:16:43,759 --> 00:16:47,360
because euro has 10 round as in the last

358
00:16:47,360 --> 00:16:50,240
round

359
00:16:50,240 --> 00:16:52,639
when it comes to security in the white

360
00:16:52,639 --> 00:16:53,839
box setting

361
00:16:53,839 --> 00:16:56,320
where the adversary is allowed to

362
00:16:56,320 --> 00:16:58,959
observe inputs outputs and their

363
00:16:58,959 --> 00:17:01,680
internal states of the cryptographic

364
00:17:01,680 --> 00:17:03,040
algorithm

365
00:17:03,040 --> 00:17:05,439
there are two requirements

366
00:17:05,439 --> 00:17:08,240
first regarding key extraction security

367
00:17:08,240 --> 00:17:09,839
of euro e

368
00:17:09,839 --> 00:17:12,799
at least it is reduced to the key

369
00:17:12,799 --> 00:17:15,520
recovery problem for the underlying

370
00:17:15,520 --> 00:17:18,640
cipher of spin box in the black box

371
00:17:18,640 --> 00:17:20,559
setting

372
00:17:20,559 --> 00:17:22,799
this is because even if the adversary

373
00:17:22,799 --> 00:17:25,039
can see the internal states

374
00:17:25,039 --> 00:17:28,319
what she can see is inputs and outputs

375
00:17:28,319 --> 00:17:29,679
of table

376
00:17:29,679 --> 00:17:32,640
which are inputs and outputs of the

377
00:17:32,640 --> 00:17:35,120
underlying ciphers

378
00:17:35,120 --> 00:17:36,240
moreover

379
00:17:36,240 --> 00:17:39,120
partial output is also encrypted by

380
00:17:39,120 --> 00:17:41,840
another encryption algorithm

381
00:17:41,840 --> 00:17:45,200
so at least key extraction security in

382
00:17:45,200 --> 00:17:48,160
the white box setting is reduced to the

383
00:17:48,160 --> 00:17:52,480
underlying block cipher for the table

384
00:17:52,960 --> 00:17:56,320
also regarding the code lifting security

385
00:17:56,320 --> 00:18:00,320
in order to ensure t over for 128 space

386
00:18:00,320 --> 00:18:01,360
hardness

387
00:18:01,360 --> 00:18:05,840
which the existing ciphers provides

388
00:18:05,840 --> 00:18:10,480
8 and 16 rounds should be enough for uri

389
00:18:10,480 --> 00:18:14,880
16 and euro 32 respectively

390
00:18:14,880 --> 00:18:17,840
please refer to our paper for how to

391
00:18:17,840 --> 00:18:20,080
actually evaluate the code lifting

392
00:18:20,080 --> 00:18:23,919
security if you are interested

393
00:18:23,919 --> 00:18:26,720
now let me talk about what's missing in

394
00:18:26,720 --> 00:18:28,559
the existing ciphers

395
00:18:28,559 --> 00:18:31,440
in other words longevity

396
00:18:31,440 --> 00:18:34,320
when we consider the continuous leakage

397
00:18:34,320 --> 00:18:37,520
the longevity is useful

398
00:18:37,520 --> 00:18:41,280
let me take uroy32 as an example

399
00:18:41,280 --> 00:18:44,960
and let's say 24 megabytes of the table

400
00:18:44,960 --> 00:18:49,039
data is leaked on a daily basis

401
00:18:49,039 --> 00:18:51,919
then as shown in figure the security

402
00:18:51,919 --> 00:18:56,720
level drops to 2 powered by -120

403
00:18:56,720 --> 00:18:57,480
in

404
00:18:57,480 --> 00:19:00,559
512 days

405
00:19:00,559 --> 00:19:03,840
at this point by updating tables it can

406
00:19:03,840 --> 00:19:08,480
keep this security level for longer

407
00:19:08,480 --> 00:19:11,679
so by repeating the table updates at

408
00:19:11,679 --> 00:19:13,400
proper timings

409
00:19:13,400 --> 00:19:16,320
euros32 can maintain these security

410
00:19:16,320 --> 00:19:17,520
levels

411
00:19:17,520 --> 00:19:21,840
which means euro e32 can ensure 128

412
00:19:21,840 --> 00:19:24,840
longevity

413
00:19:25,120 --> 00:19:27,679
finally let me talk a little bit about

414
00:19:27,679 --> 00:19:30,720
performance of uri

415
00:19:30,720 --> 00:19:32,480
we measured a single encryption

416
00:19:32,480 --> 00:19:34,799
performance and parallel encryption

417
00:19:34,799 --> 00:19:37,360
performance of uri

418
00:19:37,360 --> 00:19:41,039
and compared with those of the existing

419
00:19:41,039 --> 00:19:43,039
ciphers

420
00:19:43,039 --> 00:19:45,840
the base of our comparison is table

421
00:19:45,840 --> 00:19:48,080
input space

422
00:19:48,080 --> 00:19:51,760
in other words we compared euro 32 with

423
00:19:51,760 --> 00:19:57,200
spn box 32 white block 32 space 32 and

424
00:19:57,200 --> 00:19:59,360
galaxy 32

425
00:19:59,360 --> 00:20:02,320
and compared euro 16

426
00:20:02,320 --> 00:20:07,520
with espn box 16 white block 16 space 16

427
00:20:07,520 --> 00:20:11,520
and galaxy 16 and wem

428
00:20:11,520 --> 00:20:13,760
from the perspective of encryption

429
00:20:13,760 --> 00:20:16,240
performance

430
00:20:16,240 --> 00:20:18,840
for the detail of measurement

431
00:20:18,840 --> 00:20:23,200
environment please refer to our paper

432
00:20:23,200 --> 00:20:26,320
now what the performance results shows

433
00:20:26,320 --> 00:20:29,600
as a whole is that uri is competitive

434
00:20:29,600 --> 00:20:32,080
with other existing ciphers

435
00:20:32,080 --> 00:20:35,039
while it can ensure the new property

436
00:20:35,039 --> 00:20:38,000
called longevity

437
00:20:38,000 --> 00:20:41,600
for instance compression of euro 16 with

438
00:20:41,600 --> 00:20:44,720
the other ciphers tells us that even

439
00:20:44,720 --> 00:20:49,200
though galaxy 16 is the fastest uri 16

440
00:20:49,200 --> 00:20:52,799
is competitive with it

441
00:20:53,360 --> 00:20:56,480
in conclusion in this work we proposed

442
00:20:56,480 --> 00:20:58,880
and defined a new property called

443
00:20:58,880 --> 00:21:02,880
longevity for white box ciphers and we

444
00:21:02,880 --> 00:21:05,440
proposed a new design of white box

445
00:21:05,440 --> 00:21:07,679
cipher called uroi

446
00:21:07,679 --> 00:21:10,960
which ensures longevity and

447
00:21:10,960 --> 00:21:14,159
is as fast as the existing ciphers in

448
00:21:14,159 --> 00:21:16,960
terms of encryption performance

449
00:21:16,960 --> 00:21:20,200
thank you

450
00:21:33,520 --> 00:21:35,600
you

