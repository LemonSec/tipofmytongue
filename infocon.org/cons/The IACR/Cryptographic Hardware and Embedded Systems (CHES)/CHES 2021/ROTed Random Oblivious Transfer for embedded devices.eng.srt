1
00:00:04,880 --> 00:00:07,359
hi everyone i'm manuel and i'm here to

2
00:00:07,359 --> 00:00:10,000
present my latest work routed random

3
00:00:10,000 --> 00:00:12,719
oblivious transfer for embedded devices

4
00:00:12,719 --> 00:00:14,639
this work was developed in collaboration

5
00:00:14,639 --> 00:00:17,199
with pedro branch luis fulaij paul

6
00:00:17,199 --> 00:00:20,480
martinez paul matteos and lionel susan

7
00:00:20,480 --> 00:00:22,720
and here is my email so feel free to

8
00:00:22,720 --> 00:00:24,400
send me an email if you are interested

9
00:00:24,400 --> 00:00:26,960
or want to know more

10
00:00:26,960 --> 00:00:28,960
so our goal for this work was to develop

11
00:00:28,960 --> 00:00:31,199
a highly efficient random oblivious

12
00:00:31,199 --> 00:00:32,800
transfer protocol

13
00:00:32,800 --> 00:00:36,239
a random ot is just like a 1020 but the

14
00:00:36,239 --> 00:00:38,239
parties don't get to choose the messages

15
00:00:38,239 --> 00:00:41,200
in case of the sender nor the choice bit

16
00:00:41,200 --> 00:00:44,239
in case of the receiver

17
00:00:44,239 --> 00:00:47,039
for instance ot extension protocols are

18
00:00:47,039 --> 00:00:49,520
widely used to improve the efficiency of

19
00:00:49,520 --> 00:00:51,840
most cryptographic protocols requiring

20
00:00:51,840 --> 00:00:54,000
many ot executions

21
00:00:54,000 --> 00:00:56,079
and allow for the conversion of a few

22
00:00:56,079 --> 00:00:58,960
basaltis into many outputs using only

23
00:00:58,960 --> 00:01:00,559
cheap cryptographic primitives as

24
00:01:00,559 --> 00:01:02,160
overheads

25
00:01:02,160 --> 00:01:05,040
however in the malicious setting these

26
00:01:05,040 --> 00:01:06,640
basalties are required to be random

27
00:01:06,640 --> 00:01:08,080
maltese

28
00:01:08,080 --> 00:01:10,000
and most related art is focused on

29
00:01:10,000 --> 00:01:12,240
designing one out of two ots which

30
00:01:12,240 --> 00:01:14,479
require adaptation before being used in

31
00:01:14,479 --> 00:01:17,119
these protocols

32
00:01:17,119 --> 00:01:18,000
so

33
00:01:18,000 --> 00:01:20,240
by directly using random motifs we are

34
00:01:20,240 --> 00:01:21,840
able to improve the efficiency of the

35
00:01:21,840 --> 00:01:24,400
protocols without requiring an expensive

36
00:01:24,400 --> 00:01:27,119
black box conversion from ots to random

37
00:01:27,119 --> 00:01:29,119
multis

38
00:01:29,119 --> 00:01:31,280
finally as we'll see

39
00:01:31,280 --> 00:01:33,280
optimizing this primitive will have very

40
00:01:33,280 --> 00:01:34,960
relevant applications in embedded

41
00:01:34,960 --> 00:01:37,520
systems internet of things desktop and

42
00:01:37,520 --> 00:01:41,759
server applications and even more

43
00:01:41,759 --> 00:01:43,600
our novel work has three main

44
00:01:43,600 --> 00:01:46,159
contributions which we will analyze next

45
00:01:46,159 --> 00:01:48,079
in this presentation

46
00:01:48,079 --> 00:01:50,799
first our random multi-protocol it is a

47
00:01:50,799 --> 00:01:52,640
three-round protocol and uses techniques

48
00:01:52,640 --> 00:01:55,200
similar to another wiki exchange where

49
00:01:55,200 --> 00:01:57,040
the sender and the receiver will perform

50
00:01:57,040 --> 00:01:58,560
two partial executions of the key

51
00:01:58,560 --> 00:01:59,600
exchange

52
00:01:59,600 --> 00:02:01,200
but only in one of them it will be

53
00:02:01,200 --> 00:02:03,920
possible to reconcile a shared key

54
00:02:03,920 --> 00:02:05,280
so while the sender will have two

55
00:02:05,280 --> 00:02:07,439
messages the receiver will only be able

56
00:02:07,439 --> 00:02:09,758
to share one of them from which it will

57
00:02:09,758 --> 00:02:12,239
get its ooty message

58
00:02:12,239 --> 00:02:14,400
meanwhile the sender won't be able to

59
00:02:14,400 --> 00:02:16,560
decipher which one the receiver got

60
00:02:16,560 --> 00:02:19,280
leading to the security of the ot

61
00:02:19,280 --> 00:02:21,440
also both the sender and the receiver

62
00:02:21,440 --> 00:02:23,280
will be able to influence both of the

63
00:02:23,280 --> 00:02:26,480
messages as well as choice bits and so

64
00:02:26,480 --> 00:02:28,480
if one is honest the distribution of the

65
00:02:28,480 --> 00:02:30,640
outputs will be uniformly random leading

66
00:02:30,640 --> 00:02:33,360
to the security of the random multi

67
00:02:33,360 --> 00:02:35,840
finally a proof by simulation in the in

68
00:02:35,840 --> 00:02:37,760
their numerical model is provided to

69
00:02:37,760 --> 00:02:41,200
ensure you see security

70
00:02:41,200 --> 00:02:43,920
secondly we implement our novel protocol

71
00:02:43,920 --> 00:02:46,640
in c plus plus and execute it in an

72
00:02:46,640 --> 00:02:49,920
intel x86 server class processor and in

73
00:02:49,920 --> 00:02:52,879
four arm application class processors

74
00:02:52,879 --> 00:02:54,720
and benchmark it against current

75
00:02:54,720 --> 00:02:56,879
state-of-the-art achieving speeds at

76
00:02:56,879 --> 00:03:00,879
least one order of magnitude faster

77
00:03:00,879 --> 00:03:03,280
finally we integrate the protocol in an

78
00:03:03,280 --> 00:03:05,200
open source private set intersection

79
00:03:05,200 --> 00:03:07,440
framework and evaluate the real-world

80
00:03:07,440 --> 00:03:09,760
implications of our protocol as a random

81
00:03:09,760 --> 00:03:11,200
multi is not very interesting to the

82
00:03:11,200 --> 00:03:13,120
real world by itself

83
00:03:13,120 --> 00:03:15,920
here we managed to get up to 6.6 times

84
00:03:15,920 --> 00:03:17,920
faster executions than when using the

85
00:03:17,920 --> 00:03:20,720
related art

86
00:03:20,720 --> 00:03:23,040
again our protocol has three rounds and

87
00:03:23,040 --> 00:03:25,519
we will go slowly by each of them

88
00:03:25,519 --> 00:03:27,840
in the first round here both the sender

89
00:03:27,840 --> 00:03:30,480
and the receiver generate an rw sample

90
00:03:30,480 --> 00:03:33,280
which will be used for the key exchange

91
00:03:33,280 --> 00:03:34,879
the receiver also samples the random

92
00:03:34,879 --> 00:03:37,440
string r which will be used as a common

93
00:03:37,440 --> 00:03:39,680
random string between the parties

94
00:03:39,680 --> 00:03:42,959
by querying the random oracle on r

95
00:03:42,959 --> 00:03:45,200
the receiver chooses a bit c which will

96
00:03:45,200 --> 00:03:47,840
define which message is real and which

97
00:03:47,840 --> 00:03:49,920
is random by mixing it with an output

98
00:03:49,920 --> 00:03:51,840
from the random article

99
00:03:51,840 --> 00:03:53,439
note that both are indistinguishable by

100
00:03:53,439 --> 00:03:55,519
the rlw assumption

101
00:03:55,519 --> 00:03:58,480
finally the random strings t0 and t1

102
00:03:58,480 --> 00:04:00,080
will be mixed mixing the output messages

103
00:04:00,080 --> 00:04:01,920
of the protocol to ensure that the

104
00:04:01,920 --> 00:04:03,599
sender won't have any control over the

105
00:04:03,599 --> 00:04:05,599
distribution of those messages

106
00:04:05,599 --> 00:04:07,360
and must be committed by the receiver at

107
00:04:07,360 --> 00:04:09,439
the start so it cannot change them once

108
00:04:09,439 --> 00:04:12,080
it knows its message

109
00:04:12,080 --> 00:04:14,000
in the second round the sender receives

110
00:04:14,000 --> 00:04:15,840
the message from the receiver and

111
00:04:15,840 --> 00:04:17,918
computes the crs to recover both the

112
00:04:17,918 --> 00:04:20,560
real and random key exchange messages

113
00:04:20,560 --> 00:04:22,479
and using its secret key reconciles the

114
00:04:22,479 --> 00:04:24,960
key from both remember on the

115
00:04:24,960 --> 00:04:26,880
reconciliation using the real key will

116
00:04:26,880 --> 00:04:28,479
the shared key

117
00:04:28,479 --> 00:04:30,720
it then samples a bit a which is its

118
00:04:30,720 --> 00:04:32,479
contribution to enforce that the output

119
00:04:32,479 --> 00:04:34,320
choice bit of the receiver will be

120
00:04:34,320 --> 00:04:36,160
uniformly random

121
00:04:36,160 --> 00:04:38,240
as well as a random string u

122
00:04:38,240 --> 00:04:40,240
that must be included in both messages

123
00:04:40,240 --> 00:04:42,080
to force them to be uniformly random as

124
00:04:42,080 --> 00:04:43,360
well

125
00:04:43,360 --> 00:04:45,199
the sender sends its kids exchange

126
00:04:45,199 --> 00:04:47,040
public message and commits to both

127
00:04:47,040 --> 00:04:48,880
reconciled keys by querying their

128
00:04:48,880 --> 00:04:51,360
numerical on them

129
00:04:51,360 --> 00:04:53,520
in the last round the receiver uses the

130
00:04:53,520 --> 00:04:55,919
information from the sender to reconcile

131
00:04:55,919 --> 00:04:58,400
the one shared key well the choice b to

132
00:04:58,400 --> 00:05:02,240
be being derived from the xor of a and c

133
00:05:02,240 --> 00:05:04,400
the third condition here is necessary so

134
00:05:04,400 --> 00:05:06,880
the uc simulation is indistinguishable

135
00:05:06,880 --> 00:05:08,800
even if no commit on the reconciled key

136
00:05:08,800 --> 00:05:10,080
is match

137
00:05:10,080 --> 00:05:11,840
note that this never happens when the

138
00:05:11,840 --> 00:05:14,720
protocol is executed honestly

139
00:05:14,720 --> 00:05:16,479
finally the commits on the random

140
00:05:16,479 --> 00:05:19,280
strings t0 and t1 are opened by the

141
00:05:19,280 --> 00:05:21,520
receiver and checked by the sender and

142
00:05:21,520 --> 00:05:24,000
the final outputs are computed using all

143
00:05:24,000 --> 00:05:27,280
the exchange information

144
00:05:27,600 --> 00:05:29,360
we will now go through the intuition on

145
00:05:29,360 --> 00:05:31,759
why the protocol is secure we start by

146
00:05:31,759 --> 00:05:34,000
considering a malicious sender by

147
00:05:34,000 --> 00:05:35,680
considering malicious adversaries they

148
00:05:35,680 --> 00:05:37,120
can arbitrarily deviate from the

149
00:05:37,120 --> 00:05:38,479
protocol

150
00:05:38,479 --> 00:05:40,560
first a malicious sender can't learn the

151
00:05:40,560 --> 00:05:43,199
bit b as while it has two key exchange

152
00:05:43,199 --> 00:05:45,600
messages a real and the uniformly random

153
00:05:45,600 --> 00:05:48,240
one it cannot distinguish which is which

154
00:05:48,240 --> 00:05:50,240
as this is exactly breaking the rw

155
00:05:50,240 --> 00:05:51,600
assumption

156
00:05:51,600 --> 00:05:53,600
which message is which is given by the

157
00:05:53,600 --> 00:05:56,160
bit c chosen uniformly at random by the

158
00:05:56,160 --> 00:05:57,919
honest receiver and then known to the

159
00:05:57,919 --> 00:05:58,960
sender

160
00:05:58,960 --> 00:06:01,680
and knowing b requires knowing c as b

161
00:06:01,680 --> 00:06:04,720
equals x or c

162
00:06:04,720 --> 00:06:06,720
moreover the malicious sender cannot

163
00:06:06,720 --> 00:06:09,039
bias the distribution of the messages as

164
00:06:09,039 --> 00:06:10,880
they come from the random oracle and the

165
00:06:10,880 --> 00:06:13,039
query must include the random nouns as

166
00:06:13,039 --> 00:06:16,080
t01 t1 sent by the honest receiver in

167
00:06:16,080 --> 00:06:18,800
the end of the protocol

168
00:06:18,800 --> 00:06:20,960
in the case for a malicious receiver it

169
00:06:20,960 --> 00:06:23,120
cannot learn both messages as this would

170
00:06:23,120 --> 00:06:26,000
require it to find both shared keys

171
00:06:26,000 --> 00:06:27,759
but knowing both shared keys would

172
00:06:27,759 --> 00:06:29,919
require finding the rwe secret from a

173
00:06:29,919 --> 00:06:32,319
uniformly random sample this is the

174
00:06:32,319 --> 00:06:35,120
random key exchange message

175
00:06:35,120 --> 00:06:36,880
furthermore the malicious receiver

176
00:06:36,880 --> 00:06:38,639
cannot bias the distribution of the

177
00:06:38,639 --> 00:06:40,080
choice bit b

178
00:06:40,080 --> 00:06:42,479
as it results from the xor of the bit c

179
00:06:42,479 --> 00:06:44,400
with the bit a chosen uniformly at

180
00:06:44,400 --> 00:06:46,240
random by the honest sender and unknown

181
00:06:46,240 --> 00:06:49,440
to the receiver and it cannot bias the

182
00:06:49,440 --> 00:06:51,599
distribution of the output message as it

183
00:06:51,599 --> 00:06:53,360
comes from the random oracle and its

184
00:06:53,360 --> 00:06:55,680
query must include the random nouns u

185
00:06:55,680 --> 00:06:58,560
sent by the honest sender

186
00:06:58,560 --> 00:07:00,319
in order to prove universal composable

187
00:07:00,319 --> 00:07:03,199
security we must construct a simulator

188
00:07:03,199 --> 00:07:05,599
that simulates every adversary while

189
00:07:05,599 --> 00:07:07,840
remaining undetected to an external

190
00:07:07,840 --> 00:07:09,280
environment

191
00:07:09,280 --> 00:07:11,120
for this proof we'll work in the random

192
00:07:11,120 --> 00:07:13,360
oracle model which allows the simulator

193
00:07:13,360 --> 00:07:15,360
to observe and program queries to the

194
00:07:15,360 --> 00:07:16,479
article

195
00:07:16,479 --> 00:07:18,880
so first to simulate a corrupted sender

196
00:07:18,880 --> 00:07:20,800
the simulator will program the article

197
00:07:20,800 --> 00:07:23,280
h1 such that it will be able to

198
00:07:23,280 --> 00:07:25,840
reconcile both shared keys

199
00:07:25,840 --> 00:07:27,440
by making this slide change the

200
00:07:27,440 --> 00:07:29,199
simulator is not detected as

201
00:07:29,199 --> 00:07:32,000
distinguishing two rlw samples from one

202
00:07:32,000 --> 00:07:34,639
rlw sample and the random one requires

203
00:07:34,639 --> 00:07:38,080
breaking the rlw assumption

204
00:07:38,240 --> 00:07:40,560
then with both keys the simulator can

205
00:07:40,560 --> 00:07:42,240
extract the bit a from the malicious

206
00:07:42,240 --> 00:07:44,479
sender using its queries to the oracle

207
00:07:44,479 --> 00:07:47,680
h2 that it observes

208
00:07:47,680 --> 00:07:49,520
finally the simulator only has to

209
00:07:49,520 --> 00:07:51,680
program the outputs of the random oracle

210
00:07:51,680 --> 00:07:52,720
h2

211
00:07:52,720 --> 00:07:54,240
so that when the right messages are

212
00:07:54,240 --> 00:07:56,240
queried it replies with the messages it

213
00:07:56,240 --> 00:07:58,639
got from the ideal functionality since

214
00:07:58,639 --> 00:08:00,080
these are random

215
00:08:00,080 --> 00:08:02,639
as we are doing random ot this reply is

216
00:08:02,639 --> 00:08:04,400
indistinguishable from a normal reply of

217
00:08:04,400 --> 00:08:08,080
the article and the simulation is done

218
00:08:08,080 --> 00:08:09,759
now the simulation for the corrupted

219
00:08:09,759 --> 00:08:10,879
receiver

220
00:08:10,879 --> 00:08:12,879
the simulator will program the random

221
00:08:12,879 --> 00:08:15,199
oracle such that the bit b it got from

222
00:08:15,199 --> 00:08:17,680
the ideal functionality is specified

223
00:08:17,680 --> 00:08:22,000
from putting the bit a equal to 0 or 1.

224
00:08:22,000 --> 00:08:24,160
a very relevant detail here is showing

225
00:08:24,160 --> 00:08:26,479
that the corrected receiver can't query

226
00:08:26,479 --> 00:08:28,479
the article on both

227
00:08:28,479 --> 00:08:30,319
but if the corrupted receiver could find

228
00:08:30,319 --> 00:08:32,640
both shared keys then it could derive

229
00:08:32,640 --> 00:08:34,399
the shared key from only public

230
00:08:34,399 --> 00:08:36,320
information of the key exchange

231
00:08:36,320 --> 00:08:38,479
or find the rlw secret of a random

232
00:08:38,479 --> 00:08:40,880
sample

233
00:08:40,880 --> 00:08:43,279
finally the simulator only has to reply

234
00:08:43,279 --> 00:08:45,600
to the query on h2 with the message it

235
00:08:45,600 --> 00:08:47,760
got from the ideal functionality when

236
00:08:47,760 --> 00:08:49,760
asked the respective query

237
00:08:49,760 --> 00:08:52,399
concluding this simulation

238
00:08:52,399 --> 00:08:54,640
there are two edge cases in a uc proof

239
00:08:54,640 --> 00:08:56,240
simulation

240
00:08:56,240 --> 00:08:58,399
first when no part is corrupted the

241
00:08:58,399 --> 00:09:00,720
adversary doesn't corrupt any party so

242
00:09:00,720 --> 00:09:02,640
only observe the transcript

243
00:09:02,640 --> 00:09:04,240
but the transcript of this protocol

244
00:09:04,240 --> 00:09:06,160
carries no information that allows it to

245
00:09:06,160 --> 00:09:07,760
distinguish its setting

246
00:09:07,760 --> 00:09:08,959
this can be proven from the

247
00:09:08,959 --> 00:09:10,800
uncorrelation of inputs and outputs of a

248
00:09:10,800 --> 00:09:12,959
random article and from the rwe

249
00:09:12,959 --> 00:09:15,439
assumption

250
00:09:15,519 --> 00:09:17,680
then the other edge case is when both

251
00:09:17,680 --> 00:09:19,360
parties are corrupted and here the

252
00:09:19,360 --> 00:09:21,360
adversary generates all the messages by

253
00:09:21,360 --> 00:09:22,399
itself

254
00:09:22,399 --> 00:09:23,839
so the proof is concluded and the

255
00:09:23,839 --> 00:09:27,839
protocol is indeed uc secure

256
00:09:27,839 --> 00:09:29,360
we'll now address the implementation

257
00:09:29,360 --> 00:09:32,160
details as stated before we implemented

258
00:09:32,160 --> 00:09:34,399
our novel protocol in c plus plus

259
00:09:34,399 --> 00:09:36,399
resorting to external libraries for some

260
00:09:36,399 --> 00:09:38,640
specific operations

261
00:09:38,640 --> 00:09:39,519
first

262
00:09:39,519 --> 00:09:41,360
gaussian sampling was implemented using

263
00:09:41,360 --> 00:09:42,720
nfl lead

264
00:09:42,720 --> 00:09:44,480
we assumed there was a shared region of

265
00:09:44,480 --> 00:09:46,399
memory that was periodically populated

266
00:09:46,399 --> 00:09:49,120
with random data so the protocol only

267
00:09:49,120 --> 00:09:51,279
needed to read data of memory instead of

268
00:09:51,279 --> 00:09:54,000
generating random numbers on the fly

269
00:09:54,000 --> 00:09:56,240
then random articles were implemented by

270
00:09:56,240 --> 00:09:58,399
hushing the inputs and using the output

271
00:09:58,399 --> 00:10:00,720
of the hush as a seed to epsilorandom

272
00:10:00,720 --> 00:10:03,040
generator this generator was then used

273
00:10:03,040 --> 00:10:04,640
to produce the output of the random

274
00:10:04,640 --> 00:10:06,640
oracle

275
00:10:06,640 --> 00:10:09,200
to for sampling polynomials rejection

276
00:10:09,200 --> 00:10:11,120
sampling required extensive calls to the

277
00:10:11,120 --> 00:10:13,440
underlying hash function we chose blake

278
00:10:13,440 --> 00:10:15,440
3 as it is one of the most efficient

279
00:10:15,440 --> 00:10:19,440
cryptographic hash functions to date

280
00:10:19,440 --> 00:10:21,200
the entity was also implemented using

281
00:10:21,200 --> 00:10:24,160
nfl dib but it needed to be extended to

282
00:10:24,160 --> 00:10:27,360
support arm with neon cmd

283
00:10:27,360 --> 00:10:29,360
we also considered polynomials that were

284
00:10:29,360 --> 00:10:31,200
that were transmitted and consider the

285
00:10:31,200 --> 00:10:32,720
outputs of the random articles to be

286
00:10:32,720 --> 00:10:34,800
already in the entity domain in order to

287
00:10:34,800 --> 00:10:36,560
improve efficiency

288
00:10:36,560 --> 00:10:38,480
finally it is important to note that our

289
00:10:38,480 --> 00:10:41,519
implementation used 16 more memory than

290
00:10:41,519 --> 00:10:44,399
the current state of the art

291
00:10:44,399 --> 00:10:46,000
we are now ready to analyze our

292
00:10:46,000 --> 00:10:47,600
implementation results

293
00:10:47,600 --> 00:10:49,760
first in absolute numbers

294
00:10:49,760 --> 00:10:52,240
in these tables we can see the results

295
00:10:52,240 --> 00:10:54,480
of implementing our random multi in

296
00:10:54,480 --> 00:10:56,880
comparison to the state of the art

297
00:10:56,880 --> 00:10:58,640
note that the protocols being compared

298
00:10:58,640 --> 00:11:01,680
to were first converted to random motifs

299
00:11:01,680 --> 00:11:03,279
we can see that there is a clear

300
00:11:03,279 --> 00:11:05,600
improvement when using a random muti in

301
00:11:05,600 --> 00:11:07,760
all of the implementations

302
00:11:07,760 --> 00:11:10,000
substantial improvements are obtained

303
00:11:10,000 --> 00:11:11,920
when using vector instructions instead

304
00:11:11,920 --> 00:11:14,240
of serial instructions but even more

305
00:11:14,240 --> 00:11:16,160
substantially when going from the arm

306
00:11:16,160 --> 00:11:19,600
cortex a53 inorder architecture to the

307
00:11:19,600 --> 00:11:23,920
arm cortex a72 out of order architecture

308
00:11:23,920 --> 00:11:25,839
in the end we are able to achieve around

309
00:11:25,839 --> 00:11:28,959
27 000 random others per second in the

310
00:11:28,959 --> 00:11:32,160
apple m1 application class processor

311
00:11:32,160 --> 00:11:34,720
and around 37 000 random routes per

312
00:11:34,720 --> 00:11:37,120
second in the intel server class

313
00:11:37,120 --> 00:11:39,120
processor

314
00:11:39,120 --> 00:11:41,360
as discussed before we integrated our

315
00:11:41,360 --> 00:11:42,880
random multi-protocol in a

316
00:11:42,880 --> 00:11:45,440
state-of-the-art open source private set

317
00:11:45,440 --> 00:11:47,519
intersection framework

318
00:11:47,519 --> 00:11:50,000
since the framework only supported x86

319
00:11:50,000 --> 00:11:52,800
architectures our results are limited to

320
00:11:52,800 --> 00:11:54,560
that platform

321
00:11:54,560 --> 00:11:57,040
our goal here was to show that our

322
00:11:57,040 --> 00:11:59,920
random ot proposal was significant even

323
00:11:59,920 --> 00:12:01,519
for the real world

324
00:12:01,519 --> 00:12:03,120
and the use case for the private set

325
00:12:03,120 --> 00:12:05,200
intersection was selected for its many

326
00:12:05,200 --> 00:12:07,920
direct applications

327
00:12:07,920 --> 00:12:10,320
in the end we achieve very substantial

328
00:12:10,320 --> 00:12:13,040
improvements in terms of speed while our

329
00:12:13,040 --> 00:12:15,200
memory drawback became negligible when

330
00:12:15,200 --> 00:12:16,959
considering the requirements of the

331
00:12:16,959 --> 00:12:21,040
entire private set intersection protocol

332
00:12:21,040 --> 00:12:23,200
we now provide the relative comparison

333
00:12:23,200 --> 00:12:25,040
between our random oblivious transfer

334
00:12:25,040 --> 00:12:27,760
proposal and the state of the art for

335
00:12:27,760 --> 00:12:29,519
all architectures

336
00:12:29,519 --> 00:12:31,920
on the left one may see the results for

337
00:12:31,920 --> 00:12:34,000
the four arm application class

338
00:12:34,000 --> 00:12:37,040
processors and on the right the results

339
00:12:37,040 --> 00:12:40,000
for the intel server class processor

340
00:12:40,000 --> 00:12:41,519
in order to perform this relative

341
00:12:41,519 --> 00:12:44,480
comparison we used pvw

342
00:12:44,480 --> 00:12:46,160
as the baseline

343
00:12:46,160 --> 00:12:48,320
again we can see that our proposal

344
00:12:48,320 --> 00:12:49,920
improves substantially on the current

345
00:12:49,920 --> 00:12:54,319
state of the art in all of the examples

346
00:12:55,120 --> 00:12:56,480
to provide more insight on this

347
00:12:56,480 --> 00:12:57,680
comparison

348
00:12:57,680 --> 00:13:00,160
profiling pvw showed that almost 50

349
00:13:00,160 --> 00:13:02,320
percent of the execution

350
00:13:02,320 --> 00:13:04,959
was done performing point multiplication

351
00:13:04,959 --> 00:13:07,920
an inherently sequential operation

352
00:13:07,920 --> 00:13:11,680
moreover rlwe due to its ring structure

353
00:13:11,680 --> 00:13:13,600
benefits considerably from using

354
00:13:13,600 --> 00:13:17,760
multiple instructions and cmd

355
00:13:17,760 --> 00:13:19,440
once again we see that vector

356
00:13:19,440 --> 00:13:21,279
instructions speed up the protocols

357
00:13:21,279 --> 00:13:24,240
considerably around 30 percent

358
00:13:24,240 --> 00:13:26,560
but changing the execution back-end from

359
00:13:26,560 --> 00:13:29,200
in order to out of order provides even

360
00:13:29,200 --> 00:13:33,839
more considerably speedups of over 100

361
00:13:33,839 --> 00:13:36,240
an interesting case is the avx-2

362
00:13:36,240 --> 00:13:38,560
implementation which is faster than the

363
00:13:38,560 --> 00:13:41,199
avx 512 implementation

364
00:13:41,199 --> 00:13:44,720
indeed the rlwe avx 512 implementations

365
00:13:44,720 --> 00:13:46,720
were not able to fill the vector

366
00:13:46,720 --> 00:13:48,800
therefore linked check set to be added

367
00:13:48,800 --> 00:13:50,800
in the entity loop leading to more

368
00:13:50,800 --> 00:13:54,079
missed branch predictions

369
00:13:54,880 --> 00:13:57,199
when integrating all random motifs in

370
00:13:57,199 --> 00:13:59,519
the private set intersection framework

371
00:13:59,519 --> 00:14:03,120
similar conclusions arise again

372
00:14:03,120 --> 00:14:05,519
we used pvw as the baseline in this

373
00:14:05,519 --> 00:14:08,079
relative comparison and again our

374
00:14:08,079 --> 00:14:10,399
proposal was the fastest

375
00:14:10,399 --> 00:14:12,959
our proposed random ot when used in the

376
00:14:12,959 --> 00:14:15,440
private set intersection framework was

377
00:14:15,440 --> 00:14:16,480
at least

378
00:14:16,480 --> 00:14:17,920
twice as fast

379
00:14:17,920 --> 00:14:20,320
than the related art reaching

380
00:14:20,320 --> 00:14:23,360
up to 6.6 times faster

381
00:14:23,360 --> 00:14:26,800
here the avx-2 was again the fastest for

382
00:14:26,800 --> 00:14:28,800
the same reasons as before

383
00:14:28,800 --> 00:14:30,560
while the relative improvements were

384
00:14:30,560 --> 00:14:32,720
about the same when considering two

385
00:14:32,720 --> 00:14:35,360
protocols with vector implementations or

386
00:14:35,360 --> 00:14:38,160
when comparing serial implementations

387
00:14:38,160 --> 00:14:40,320
as previously stated the memory

388
00:14:40,320 --> 00:14:41,680
requirements of the private set

389
00:14:41,680 --> 00:14:44,000
intersection framework far exceed the

390
00:14:44,000 --> 00:14:47,120
ones for the random multi meaning that

391
00:14:47,120 --> 00:14:49,199
in this application the slight memory

392
00:14:49,199 --> 00:14:53,439
drawback is essentially inconsequential

393
00:14:53,519 --> 00:14:55,920
to conclude we have developed a novel

394
00:14:55,920 --> 00:14:58,320
random oblivious transfer protocol whose

395
00:14:58,320 --> 00:15:01,120
security is based on the rlwe assumption

396
00:15:01,120 --> 00:15:04,000
and that is proved uc secure in the rom

397
00:15:04,000 --> 00:15:06,399
a crucial factor for protocols that are

398
00:15:06,399 --> 00:15:08,560
meant to be used while composed with

399
00:15:08,560 --> 00:15:10,959
other protocols

400
00:15:10,959 --> 00:15:14,160
we achieve speeds up to 37 000 random

401
00:15:14,160 --> 00:15:18,160
ots per second for an intel x86 server

402
00:15:18,160 --> 00:15:21,440
class processor and up to 5 000 random

403
00:15:21,440 --> 00:15:23,440
others per second in arm application

404
00:15:23,440 --> 00:15:25,680
class processors suitable for

405
00:15:25,680 --> 00:15:29,680
constituting part in a system on a chip

406
00:15:29,680 --> 00:15:31,839
by using vector instructions we are able

407
00:15:31,839 --> 00:15:34,240
to improve speed substantially at around

408
00:15:34,240 --> 00:15:37,040
40 percent

409
00:15:37,120 --> 00:15:39,440
in comparison with the previous state of

410
00:15:39,440 --> 00:15:41,680
the art we achieve speeds one order of

411
00:15:41,680 --> 00:15:43,680
magnitude faster and these results are

412
00:15:43,680 --> 00:15:46,000
obtained on diverse platforms suitable

413
00:15:46,000 --> 00:15:48,800
for embedded systems internet of things

414
00:15:48,800 --> 00:15:51,040
desktop and server applications and

415
00:15:51,040 --> 00:15:53,360
others

416
00:15:53,600 --> 00:15:55,279
we also showed

417
00:15:55,279 --> 00:15:57,440
the practical interest of our rendezvous

418
00:15:57,440 --> 00:16:00,320
t by integrating it in a very relevant

419
00:16:00,320 --> 00:16:02,320
private set intersection application

420
00:16:02,320 --> 00:16:04,399
whose applicability ranges from contact

421
00:16:04,399 --> 00:16:06,720
discovery remote diagnosis contact

422
00:16:06,720 --> 00:16:09,519
tracing and others

423
00:16:09,519 --> 00:16:12,639
moreover using our random ot in this

424
00:16:12,639 --> 00:16:15,120
application results in improvements of

425
00:16:15,120 --> 00:16:17,360
at least twice the speed of the previous

426
00:16:17,360 --> 00:16:20,240
state of the art and reaching up to 6.6

427
00:16:20,240 --> 00:16:23,279
times faster

428
00:16:23,279 --> 00:16:25,839
future work will address ultra low power

429
00:16:25,839 --> 00:16:27,759
devices as these have different

430
00:16:27,759 --> 00:16:29,759
requirements and will need more specific

431
00:16:29,759 --> 00:16:31,120
optimizations

432
00:16:31,120 --> 00:16:34,360
thank you

