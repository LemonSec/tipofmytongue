1
00:00:01,280 --> 00:00:03,040
hello everyone and thanks for attending

2
00:00:03,040 --> 00:00:04,799
to this presentation of our article

3
00:00:04,799 --> 00:00:07,759
learning parity with physical noise

4
00:00:07,759 --> 00:00:09,840
first we need a bit of context

5
00:00:09,840 --> 00:00:12,240
i guess most of you have heard about

6
00:00:12,240 --> 00:00:13,599
learning problems

7
00:00:13,599 --> 00:00:15,120
they are getting more used in

8
00:00:15,120 --> 00:00:17,600
cryptography so there are

9
00:00:17,600 --> 00:00:20,080
computationally hard problems that can

10
00:00:20,080 --> 00:00:22,400
be used to build cryptographic scheme

11
00:00:22,400 --> 00:00:25,920
one of his most famous application is

12
00:00:25,920 --> 00:00:26,960
probably

13
00:00:26,960 --> 00:00:28,560
post quantum public key encryption

14
00:00:28,560 --> 00:00:29,840
schemes

15
00:00:29,840 --> 00:00:31,599
indeed some of the most efficient

16
00:00:31,599 --> 00:00:33,360
lattice-based

17
00:00:33,360 --> 00:00:34,800
schemes

18
00:00:34,800 --> 00:00:36,559
are relying

19
00:00:36,559 --> 00:00:40,480
on learning problems such as lwe mlwa lw

20
00:00:40,480 --> 00:00:42,480
air etc

21
00:00:42,480 --> 00:00:45,760
for instance cable and saber are both

22
00:00:45,760 --> 00:00:47,440
nist finalists

23
00:00:47,440 --> 00:00:49,760
and are both relying on

24
00:00:49,760 --> 00:00:51,440
so on learning schemes so in this

25
00:00:51,440 --> 00:00:53,039
finalist in the post quantum

26
00:00:53,039 --> 00:00:55,520
cryptography contest

27
00:00:55,520 --> 00:00:57,440
there are also other

28
00:00:57,440 --> 00:01:00,160
less famous but still useful

29
00:01:00,160 --> 00:01:01,600
cryptographic application to learning

30
00:01:01,600 --> 00:01:03,600
schemes such as such as morphic

31
00:01:03,600 --> 00:01:06,240
encryption identity based encryptions

32
00:01:06,240 --> 00:01:09,280
and many other cryptographic good things

33
00:01:09,280 --> 00:01:11,280
among all the learning problems

34
00:01:11,280 --> 00:01:13,280
we will take a particular interest into

35
00:01:13,280 --> 00:01:15,600
the learning parity with parity noise

36
00:01:15,600 --> 00:01:16,880
problem

37
00:01:16,880 --> 00:01:18,240
which is probably the most

38
00:01:18,240 --> 00:01:20,640
straightforward the most minimalist

39
00:01:20,640 --> 00:01:22,720
learning problem

40
00:01:22,720 --> 00:01:23,759
so

41
00:01:23,759 --> 00:01:25,600
as in any learning problem the idea is

42
00:01:25,600 --> 00:01:28,080
that an adversary is given public key

43
00:01:28,080 --> 00:01:29,200
vectors

44
00:01:29,200 --> 00:01:31,680
and noisy inner products between these

45
00:01:31,680 --> 00:01:33,680
public key vectors and the secret key

46
00:01:33,680 --> 00:01:35,520
and it is computationally hard to

47
00:01:35,520 --> 00:01:37,600
retrieve the secret key

48
00:01:37,600 --> 00:01:40,400
in the learning with parity noise case

49
00:01:40,400 --> 00:01:43,520
so inner product occurs over f2

50
00:01:43,520 --> 00:01:44,320
so

51
00:01:44,320 --> 00:01:47,119
we have a secret key which is an n bit

52
00:01:47,119 --> 00:01:48,159
vector

53
00:01:48,159 --> 00:01:50,240
public and bit vectors

54
00:01:50,240 --> 00:01:51,600
and the

55
00:01:51,600 --> 00:01:54,320
error added to the inner product

56
00:01:54,320 --> 00:01:56,560
is generated is a binary error so

57
00:01:56,560 --> 00:01:59,280
generated according to a binary law with

58
00:01:59,280 --> 00:02:00,960
a known

59
00:02:00,960 --> 00:02:03,040
error parameter

60
00:02:03,040 --> 00:02:05,280
and given the public vectors and the

61
00:02:05,280 --> 00:02:07,360
noise in our product it is hard to it

62
00:02:07,360 --> 00:02:08,399
with k

63
00:02:08,399 --> 00:02:10,239
the key

64
00:02:10,239 --> 00:02:12,959
there exists a decision version of this

65
00:02:12,959 --> 00:02:15,280
problem but it won't be useful to us in

66
00:02:15,280 --> 00:02:18,560
this article we will only look into

67
00:02:18,560 --> 00:02:19,520
the

68
00:02:19,520 --> 00:02:22,400
defending version

69
00:02:22,400 --> 00:02:24,319
lpn seems

70
00:02:24,319 --> 00:02:26,400
minimalist and should be easy to

71
00:02:26,400 --> 00:02:28,480
implement however

72
00:02:28,480 --> 00:02:30,800
when trust is gained in this

73
00:02:30,800 --> 00:02:33,680
problem and we start to look into real

74
00:02:33,680 --> 00:02:35,360
implementation questions

75
00:02:35,360 --> 00:02:37,840
there are many issues that are rising

76
00:02:37,840 --> 00:02:40,640
and mostly the earth generation

77
00:02:40,640 --> 00:02:41,920
indeed

78
00:02:41,920 --> 00:02:43,519
sierra generation has to be

79
00:02:43,519 --> 00:02:45,920
cryptographically secure

80
00:02:45,920 --> 00:02:48,000
health-wise an adversary would just be

81
00:02:48,000 --> 00:02:48,800
able

82
00:02:48,800 --> 00:02:49,760
to

83
00:02:49,760 --> 00:02:52,879
remove the error and solve

84
00:02:52,879 --> 00:02:53,920
the

85
00:02:53,920 --> 00:02:55,760
system of equation which would just be a

86
00:02:55,760 --> 00:02:59,200
linear system of equation easy to solve

87
00:02:59,200 --> 00:03:00,879
therefore we need a cryptographically

88
00:03:00,879 --> 00:03:01,920
secure

89
00:03:01,920 --> 00:03:03,200
prng

90
00:03:03,200 --> 00:03:04,959
which is time expensive

91
00:03:04,959 --> 00:03:07,200
and csp rng also proved to be a weak

92
00:03:07,200 --> 00:03:10,000
link in sight channel attacks against

93
00:03:10,000 --> 00:03:12,400
sectional attacks against

94
00:03:12,400 --> 00:03:14,080
implementation of schemes that rely on

95
00:03:14,080 --> 00:03:16,400
lpn

96
00:03:16,400 --> 00:03:17,200
so

97
00:03:17,200 --> 00:03:20,000
this is where so in exact computation

98
00:03:20,000 --> 00:03:21,200
steps in

99
00:03:21,200 --> 00:03:22,720
in order to remove

100
00:03:22,720 --> 00:03:25,280
the pc's prng

101
00:03:25,280 --> 00:03:27,599
we can add the error directly when

102
00:03:27,599 --> 00:03:29,920
computing the inner product

103
00:03:29,920 --> 00:03:33,920
if we use a processor in given condition

104
00:03:33,920 --> 00:03:36,239
for instance in our case we used voltage

105
00:03:36,239 --> 00:03:38,879
over scaling and clock manipulation so

106
00:03:38,879 --> 00:03:41,840
physical conditions

107
00:03:41,840 --> 00:03:43,120
we can

108
00:03:43,120 --> 00:03:46,560
get him to compute its operation

109
00:03:46,560 --> 00:03:49,760
with a controlled error

110
00:03:49,770 --> 00:03:51,280
[Music]

111
00:03:51,280 --> 00:03:52,720
by doing so

112
00:03:52,720 --> 00:03:55,120
we will end up with the same results

113
00:03:55,120 --> 00:03:57,680
as by computing the correct

114
00:03:57,680 --> 00:03:59,840
inner product send a digital generated

115
00:03:59,840 --> 00:04:00,879
error

116
00:04:00,879 --> 00:04:04,159
problem is when doing so

117
00:04:04,159 --> 00:04:07,040
we rely on a physical assumption rather

118
00:04:07,040 --> 00:04:09,040
than a theoretical one

119
00:04:09,040 --> 00:04:11,200
it is not that much of an issue because

120
00:04:11,200 --> 00:04:12,640
at the end when you are implementing a

121
00:04:12,640 --> 00:04:14,879
scheme you always realize to some extent

122
00:04:14,879 --> 00:04:16,560
on the physical assumption

123
00:04:16,560 --> 00:04:18,478
that your implementation will be the

124
00:04:18,478 --> 00:04:19,519
same

125
00:04:19,519 --> 00:04:22,079
as your theoretical assumption

126
00:04:22,079 --> 00:04:24,639
but there are some other issues that are

127
00:04:24,639 --> 00:04:27,280
raised by in exact computation and this

128
00:04:27,280 --> 00:04:31,119
will be the first thing we'll talk about

129
00:04:31,840 --> 00:04:33,840
so first in order to compute our

130
00:04:33,840 --> 00:04:36,560
physical inner product there are two

131
00:04:36,560 --> 00:04:39,199
standard architectures that come to mind

132
00:04:39,199 --> 00:04:40,960
first one is serial the other one is

133
00:04:40,960 --> 00:04:44,800
parallel basically they both start with

134
00:04:44,800 --> 00:04:48,560
a layer of on gates so you compute ends

135
00:04:48,560 --> 00:04:50,720
between the key bits and the public

136
00:04:50,720 --> 00:04:52,320
vector bits

137
00:04:52,320 --> 00:04:55,199
then you have to go all of the ends

138
00:04:55,199 --> 00:04:56,560
output

139
00:04:56,560 --> 00:04:59,520
you can either do it parallely

140
00:04:59,520 --> 00:05:01,520
which means 2x2 then you source the

141
00:05:01,520 --> 00:05:03,440
results and etc

142
00:05:03,440 --> 00:05:05,840
so for instance for a 32-bit physical in

143
00:05:05,840 --> 00:05:08,400
a product you get five layers

144
00:05:08,400 --> 00:05:12,880
of xor gates or you can serialize them

145
00:05:12,880 --> 00:05:15,280
which means also to first send at the

146
00:05:15,280 --> 00:05:18,639
third at the fourth at stratosphere

147
00:05:18,639 --> 00:05:20,880
so why should we consider different ways

148
00:05:20,880 --> 00:05:22,560
to compute this inner product

149
00:05:22,560 --> 00:05:24,880
it's because sadly

150
00:05:24,880 --> 00:05:28,800
we do not manage to control the error

151
00:05:28,800 --> 00:05:30,160
so good

152
00:05:30,160 --> 00:05:32,560
that there are no dependencies

153
00:05:32,560 --> 00:05:35,840
and there are mainly output dependencies

154
00:05:35,840 --> 00:05:37,120
which means that

155
00:05:37,120 --> 00:05:40,080
the probability of error depends

156
00:05:40,080 --> 00:05:41,600
of the correct value of the inner

157
00:05:41,600 --> 00:05:44,240
product which is not a property we want

158
00:05:44,240 --> 00:05:46,479
since the correct value of the product

159
00:05:46,479 --> 00:05:48,320
depends on the key

160
00:05:48,320 --> 00:05:49,840
which means it will create

161
00:05:49,840 --> 00:05:51,280
unbalancedness

162
00:05:51,280 --> 00:05:53,440
in the results and it will

163
00:05:53,440 --> 00:05:56,560
to some extent leak some information

164
00:05:56,560 --> 00:05:58,400
so we denote

165
00:05:58,400 --> 00:06:02,240
epsilon 0 or epsilon 1 so probability of

166
00:06:02,240 --> 00:06:04,400
error knowing that the correct output of

167
00:06:04,400 --> 00:06:07,120
the inner product is 0 or 1

168
00:06:07,120 --> 00:06:10,160
and we denote by delta the distance

169
00:06:10,160 --> 00:06:12,800
between those epsilons

170
00:06:12,800 --> 00:06:14,479
and the average

171
00:06:14,479 --> 00:06:17,919
so basically the bigger c delta is the

172
00:06:17,919 --> 00:06:20,160
more output dependent the error is so we

173
00:06:20,160 --> 00:06:23,039
want to mitigate it as much as possible

174
00:06:23,039 --> 00:06:26,560
if we get if we reach a delta of zero uh

175
00:06:26,560 --> 00:06:28,319
it will mean that there are no output

176
00:06:28,319 --> 00:06:29,520
dependency

177
00:06:29,520 --> 00:06:32,880
uh epsilon zero equals epsilon one and

178
00:06:32,880 --> 00:06:35,600
we are in the lpn case which will be

179
00:06:35,600 --> 00:06:37,199
ideal

180
00:06:37,199 --> 00:06:40,240
so now let me introduce a few other

181
00:06:40,240 --> 00:06:42,479
tweaks we can do to the architectures i

182
00:06:42,479 --> 00:06:44,000
just presented you

183
00:06:44,000 --> 00:06:47,280
in order to try to mitigate the delta

184
00:06:47,280 --> 00:06:50,639
first we can use a gt3 clock

185
00:06:50,639 --> 00:06:53,520
basically it means clock manipulation

186
00:06:53,520 --> 00:06:56,000
so that instead of the deterministic

187
00:06:56,000 --> 00:06:58,880
error we have we also add jitter which

188
00:06:58,880 --> 00:07:00,000
is

189
00:07:00,000 --> 00:07:02,400
random noise

190
00:07:02,400 --> 00:07:04,720
that would be a good idea

191
00:07:04,720 --> 00:07:06,639
because it means that

192
00:07:06,639 --> 00:07:07,599
the

193
00:07:07,599 --> 00:07:09,919
error will come from both deterministic

194
00:07:09,919 --> 00:07:12,880
so maybe without dependency causes but

195
00:07:12,880 --> 00:07:14,840
also pure random

196
00:07:14,840 --> 00:07:18,080
one we can also try to

197
00:07:18,080 --> 00:07:20,960
use purgating which means connect

198
00:07:20,960 --> 00:07:22,880
our circuit to the ground

199
00:07:22,880 --> 00:07:24,960
in order to lower

200
00:07:24,960 --> 00:07:27,039
the different substantia needed to do

201
00:07:27,039 --> 00:07:29,039
the transition between 0 and 1 and 1 and

202
00:07:29,039 --> 00:07:29,919
zero

203
00:07:29,919 --> 00:07:32,720
and try to balance it a little bit more

204
00:07:32,720 --> 00:07:34,479
we can also try to use a science

205
00:07:34,479 --> 00:07:36,400
architecture with bigger and more

206
00:07:36,400 --> 00:07:38,240
balanced gates

207
00:07:38,240 --> 00:07:40,800
so we studied all these architectures

208
00:07:40,800 --> 00:07:43,440
and we ended up with following simulated

209
00:07:43,440 --> 00:07:45,120
deltas

210
00:07:45,120 --> 00:07:46,800
basically

211
00:07:46,800 --> 00:07:48,080
what we see

212
00:07:48,080 --> 00:07:51,120
is that the best way to mitigate delta

213
00:07:51,120 --> 00:07:53,840
is the kc so it's a g3 clock

214
00:07:53,840 --> 00:07:55,599
mainly because of the

215
00:07:55,599 --> 00:07:57,680
probabilistic

216
00:07:57,680 --> 00:08:00,240
cause of randomness that is not output

217
00:08:00,240 --> 00:08:02,960
dependent so that mitigates the

218
00:08:02,960 --> 00:08:05,759
output dependency effects in the total

219
00:08:05,759 --> 00:08:08,160
error probability of error

220
00:08:08,160 --> 00:08:10,720
but what we can sadly also see is that

221
00:08:10,720 --> 00:08:15,360
even if we manage to reduce the delta

222
00:08:15,759 --> 00:08:18,160
coming from the standard architectures

223
00:08:18,160 --> 00:08:20,560
we do not annihilate it

224
00:08:20,560 --> 00:08:22,479
which means that there remains output

225
00:08:22,479 --> 00:08:24,080
dependency

226
00:08:24,080 --> 00:08:25,039
and

227
00:08:25,039 --> 00:08:28,240
the security of a scheme implemented

228
00:08:28,240 --> 00:08:29,520
with

229
00:08:29,520 --> 00:08:30,960
with

230
00:08:30,960 --> 00:08:33,200
a physical in a product cannot reduce

231
00:08:33,200 --> 00:08:37,039
directly to the security of lpn

232
00:08:37,039 --> 00:08:40,399
this is what motivates the next section

233
00:08:40,399 --> 00:08:42,640
which is a security reduction

234
00:08:42,640 --> 00:08:44,959
that proves that our physical inner

235
00:08:44,959 --> 00:08:47,440
product still rely on the security of

236
00:08:47,440 --> 00:08:49,839
lpn

237
00:08:51,680 --> 00:08:54,160
so in order to dive into our prediction

238
00:08:54,160 --> 00:08:56,560
we first need to modelize our physical

239
00:08:56,560 --> 00:08:57,760
problem

240
00:08:57,760 --> 00:08:59,600
in order to do a mathematical rejection

241
00:08:59,600 --> 00:09:01,760
we need to properly define what we call

242
00:09:01,760 --> 00:09:04,240
the learning with parity noise with

243
00:09:04,240 --> 00:09:06,000
output dependency

244
00:09:06,000 --> 00:09:07,760
distribution

245
00:09:07,760 --> 00:09:10,320
so it's still a learning problem it

246
00:09:10,320 --> 00:09:14,160
relies on same ages and lpn we have a k

247
00:09:14,160 --> 00:09:16,880
n bit secret key two noises parameters

248
00:09:16,880 --> 00:09:18,320
epsilon zero epsilon ones that have

249
00:09:18,320 --> 00:09:22,000
probabilities that remain inside 0 and

250
00:09:22,000 --> 00:09:24,000
0.5

251
00:09:24,000 --> 00:09:27,279
and as in lpn we generate uniformly

252
00:09:27,279 --> 00:09:29,680
public key vectors

253
00:09:29,680 --> 00:09:32,320
that are called x compute the inner

254
00:09:32,320 --> 00:09:35,040
product with the secret key and add an

255
00:09:35,040 --> 00:09:37,920
error this time here the distribution

256
00:09:37,920 --> 00:09:41,279
that zero follows depends on the correct

257
00:09:41,279 --> 00:09:43,680
value of the inner product this is why

258
00:09:43,680 --> 00:09:47,120
we have two noise parameters

259
00:09:47,120 --> 00:09:48,399
note that

260
00:09:48,399 --> 00:09:50,720
this definition

261
00:09:50,720 --> 00:09:52,880
is more general than the lpn

262
00:09:52,880 --> 00:09:54,640
distribution

263
00:09:54,640 --> 00:09:58,080
so it means that if we take epsilon 0

264
00:09:58,080 --> 00:10:01,279
equal to epsilon 1 we end up to

265
00:10:01,279 --> 00:10:04,880
we end up with a lpn distribution

266
00:10:04,880 --> 00:10:07,120
and this observation allows us to make a

267
00:10:07,120 --> 00:10:10,640
double reduction with just one proof

268
00:10:10,640 --> 00:10:12,480
because what we did is build an

269
00:10:12,480 --> 00:10:13,600
algorithm

270
00:10:13,600 --> 00:10:14,399
that

271
00:10:14,399 --> 00:10:15,920
allowed us to

272
00:10:15,920 --> 00:10:18,880
transform the lpnd samples into another

273
00:10:18,880 --> 00:10:20,560
ones

274
00:10:20,560 --> 00:10:22,320
so what does it mean

275
00:10:22,320 --> 00:10:24,560
it means that an adversary which has

276
00:10:24,560 --> 00:10:27,839
access to a lpn solver for instance

277
00:10:27,839 --> 00:10:28,959
can

278
00:10:28,959 --> 00:10:31,600
with given lpnod samples

279
00:10:31,600 --> 00:10:34,480
use the algorithm to transform them into

280
00:10:34,480 --> 00:10:37,120
lpn samples

281
00:10:37,120 --> 00:10:39,120
then use it solver

282
00:10:39,120 --> 00:10:41,440
so it means that with some assumption on

283
00:10:41,440 --> 00:10:43,279
the noise parameters

284
00:10:43,279 --> 00:10:46,800
lpnod is at least as hard as lpn

285
00:10:46,800 --> 00:10:48,959
so this is the

286
00:10:48,959 --> 00:10:51,279
site of the reduction that it interests

287
00:10:51,279 --> 00:10:54,399
us the most because lpn is a non-secure

288
00:10:54,399 --> 00:10:55,360
problem

289
00:10:55,360 --> 00:10:57,279
so it gives confidence into

290
00:10:57,279 --> 00:10:59,279
our problem

291
00:10:59,279 --> 00:11:02,640
but this algorithm also allows us to see

292
00:11:02,640 --> 00:11:04,720
the reduction the other way around

293
00:11:04,720 --> 00:11:07,040
because an adversary which has a lpno

294
00:11:07,040 --> 00:11:08,240
dissolver

295
00:11:08,240 --> 00:11:11,680
can this time take lpn samples transform

296
00:11:11,680 --> 00:11:15,519
them into the lpnod that is

297
00:11:15,519 --> 00:11:17,920
that he can break using its solver

298
00:11:17,920 --> 00:11:19,440
so

299
00:11:19,440 --> 00:11:23,279
lpn is also at least as hard as lpnod

300
00:11:23,279 --> 00:11:25,279
so it says that

301
00:11:25,279 --> 00:11:27,600
says both this problem seems to have the

302
00:11:27,600 --> 00:11:29,839
similar security

303
00:11:29,839 --> 00:11:31,519
at least for the

304
00:11:31,519 --> 00:11:33,120
finding

305
00:11:33,120 --> 00:11:35,600
version of these problems

306
00:11:35,600 --> 00:11:38,480
so what are the ideas

307
00:11:38,480 --> 00:11:40,959
that are hidden in this algorithm

308
00:11:40,959 --> 00:11:43,279
basically so this algorithm

309
00:11:43,279 --> 00:11:45,680
takes a distribution as an input

310
00:11:45,680 --> 00:11:48,640
it also takes uh

311
00:11:48,640 --> 00:11:51,279
parameters of this distribution

312
00:11:51,279 --> 00:11:52,959
and some

313
00:11:52,959 --> 00:11:54,959
parameters that will be used inside the

314
00:11:54,959 --> 00:11:58,880
algorithm and it outputs

315
00:11:58,880 --> 00:12:01,360
a sample that follows another pnod

316
00:12:01,360 --> 00:12:02,639
distribution

317
00:12:02,639 --> 00:12:05,279
with noise parameter epsilon05 epsilon1

318
00:12:05,279 --> 00:12:06,480
prime

319
00:12:06,480 --> 00:12:08,160
first it checks that if the

320
00:12:08,160 --> 00:12:09,600
transformation is trying to do is

321
00:12:09,600 --> 00:12:10,800
possible

322
00:12:10,800 --> 00:12:12,560
so for that we have equations that are

323
00:12:12,560 --> 00:12:14,079
not detailed here because they are quite

324
00:12:14,079 --> 00:12:16,959
complex and not that useful

325
00:12:16,959 --> 00:12:19,839
but basically what it says is that you

326
00:12:19,839 --> 00:12:21,519
cannot transform

327
00:12:21,519 --> 00:12:24,320
any batch of samples into another one

328
00:12:24,320 --> 00:12:26,560
which is pretty logical i mean if we're

329
00:12:26,560 --> 00:12:29,839
able to transform some lpn samples into

330
00:12:29,839 --> 00:12:31,519
noiseless one

331
00:12:31,519 --> 00:12:35,120
it will be a pretty useful algorithm

332
00:12:35,120 --> 00:12:37,040
once we know this algorithm will be

333
00:12:37,040 --> 00:12:39,440
successful in this transformation

334
00:12:39,440 --> 00:12:42,160
we first compute the last bit of the

335
00:12:42,160 --> 00:12:43,519
output sample

336
00:12:43,519 --> 00:12:46,079
so we know that this sample will follow

337
00:12:46,079 --> 00:12:48,880
a lpno d distribution with my epsilon 0

338
00:12:48,880 --> 00:12:51,200
prime epsilon 1 prime

339
00:12:51,200 --> 00:12:53,360
therefore we know what will be the

340
00:12:53,360 --> 00:12:55,440
distribution of its last bits

341
00:12:55,440 --> 00:12:58,240
and we can simulate it independently

342
00:12:58,240 --> 00:12:59,200
of

343
00:12:59,200 --> 00:13:01,760
the public vectors that will be put

344
00:13:01,760 --> 00:13:04,079
before it

345
00:13:04,079 --> 00:13:06,399
once we have it we use the rejection

346
00:13:06,399 --> 00:13:07,600
sampling

347
00:13:07,600 --> 00:13:09,600
to generate the public key vector so

348
00:13:09,600 --> 00:13:11,760
basically we use

349
00:13:11,760 --> 00:13:13,519
our input sampler

350
00:13:13,519 --> 00:13:14,800
that

351
00:13:14,800 --> 00:13:17,120
just creates

352
00:13:17,120 --> 00:13:19,279
some samples coming from the input

353
00:13:19,279 --> 00:13:21,040
distribution

354
00:13:21,040 --> 00:13:22,880
add them some noise

355
00:13:22,880 --> 00:13:26,160
with binary parameters or algorithm took

356
00:13:26,160 --> 00:13:27,680
as inputs

357
00:13:27,680 --> 00:13:30,079
and check if the last bits correspond

358
00:13:30,079 --> 00:13:32,240
with the one we generated earlier if it

359
00:13:32,240 --> 00:13:35,040
does we can just output the algorithm

360
00:13:35,040 --> 00:13:37,519
if it does not we keep doing it until it

361
00:13:37,519 --> 00:13:39,040
does

362
00:13:39,040 --> 00:13:42,079
when you write the probability

363
00:13:42,079 --> 00:13:44,399
that the output of this algorithm

364
00:13:44,399 --> 00:13:45,680
follows

365
00:13:45,680 --> 00:13:47,760
you can show that it follows the right

366
00:13:47,760 --> 00:13:49,680
distribution so

367
00:13:49,680 --> 00:13:52,079
we have an algorithm that take old

368
00:13:52,079 --> 00:13:54,160
penalty distribution as an input and

369
00:13:54,160 --> 00:13:57,120
outputs another one

370
00:13:57,120 --> 00:13:58,079
so

371
00:13:58,079 --> 00:13:59,680
this allowed us

372
00:13:59,680 --> 00:14:01,920
to have a concrete security estimation

373
00:14:01,920 --> 00:14:04,000
of lpnode

374
00:14:04,000 --> 00:14:05,120
because

375
00:14:05,120 --> 00:14:06,720
what this

376
00:14:06,720 --> 00:14:09,120
algorithm allow is to take some

377
00:14:09,120 --> 00:14:11,360
lpn samples following a noise parameter

378
00:14:11,360 --> 00:14:15,120
epsilon and transform them into

379
00:14:15,120 --> 00:14:16,000
of this

380
00:14:16,000 --> 00:14:18,720
samples with noise parameter epsilon

381
00:14:18,720 --> 00:14:20,880
prime plus delta epsilon prime minus

382
00:14:20,880 --> 00:14:23,199
delta or the other way around but

383
00:14:23,199 --> 00:14:25,360
it's the same for the formula

384
00:14:25,360 --> 00:14:28,160
with epsilon epsilon prime and delta

385
00:14:28,160 --> 00:14:31,199
following the the formula you see on the

386
00:14:31,199 --> 00:14:32,320
screen

387
00:14:32,320 --> 00:14:33,600
so it means

388
00:14:33,600 --> 00:14:36,000
that with this parameter lpnd is at

389
00:14:36,000 --> 00:14:38,240
least as hard as lpn

390
00:14:38,240 --> 00:14:39,920
and when we have

391
00:14:39,920 --> 00:14:41,760
a scheme

392
00:14:41,760 --> 00:14:44,399
that relies on lpnd we can have a

393
00:14:44,399 --> 00:14:48,480
security equivalent lpnwise

394
00:14:49,760 --> 00:14:51,839
in this part of the presentation we will

395
00:14:51,839 --> 00:14:53,839
introduce our fpga prototype

396
00:14:53,839 --> 00:14:58,120
implementing a physical inner product

397
00:14:58,160 --> 00:15:01,199
we have designed a full digital 512 bit

398
00:15:01,199 --> 00:15:03,279
lppm processor targeting excelling

399
00:15:03,279 --> 00:15:07,040
spartan 6 lx75 fpga mounted on a sakura

400
00:15:07,040 --> 00:15:08,079
g board

401
00:15:08,079 --> 00:15:10,160
no special purpose macros are required

402
00:15:10,160 --> 00:15:13,920
as plls or dcms and only fabric elements

403
00:15:13,920 --> 00:15:17,519
from fpga have been used

404
00:15:17,680 --> 00:15:20,240
our fppm processor is composed by an

405
00:15:20,240 --> 00:15:23,120
inner product block a viable delay line

406
00:15:23,120 --> 00:15:25,279
a voltage sensor for fault tolerance and

407
00:15:25,279 --> 00:15:27,279
an error control mechanism that acts

408
00:15:27,279 --> 00:15:30,880
also as a finite state machine

409
00:15:31,519 --> 00:15:33,199
regarding the inner product it is

410
00:15:33,199 --> 00:15:35,759
composed by a parallel tree and a serial

411
00:15:35,759 --> 00:15:38,240
exaltry the inexact computing is

412
00:15:38,240 --> 00:15:40,160
achieved at capturing meta stable state

413
00:15:40,160 --> 00:15:42,240
and leaching events on the output of the

414
00:15:42,240 --> 00:15:45,360
inner product block to generate errors

415
00:15:45,360 --> 00:15:47,839
this allows us to remove the needs of a

416
00:15:47,839 --> 00:15:51,120
random number generator

417
00:15:51,920 --> 00:15:53,519
we have designed a compact and full

418
00:15:53,519 --> 00:15:56,000
digital delay line composed by 16 carry

419
00:15:56,000 --> 00:15:59,279
4 units carry 4 units are fast chains of

420
00:15:59,279 --> 00:16:01,920
xor and slice mnl used to implement

421
00:16:01,920 --> 00:16:03,519
arithmetic functions

422
00:16:03,519 --> 00:16:06,560
our delay line offers 64 taps providing

423
00:16:06,560 --> 00:16:09,360
30 picosecond per tap

424
00:16:09,360 --> 00:16:12,320
very compact 64 to 1 multiplexer has

425
00:16:12,320 --> 00:16:15,279
been implemented on loots and ins lights

426
00:16:15,279 --> 00:16:18,399
f7 and f8 muxes in order to

427
00:16:18,399 --> 00:16:21,680
choose the proper tab to generate the

428
00:16:21,680 --> 00:16:25,040
given probability of error

429
00:16:25,759 --> 00:16:27,839
the error control module is implemented

430
00:16:27,839 --> 00:16:30,320
as a successive approximation register

431
00:16:30,320 --> 00:16:32,639
sar to calibrate the ippn and the

432
00:16:32,639 --> 00:16:35,839
startup seven batches of 1024 in the

433
00:16:35,839 --> 00:16:38,079
products are computed at the end of each

434
00:16:38,079 --> 00:16:39,839
batch the probability of error is

435
00:16:39,839 --> 00:16:42,720
computed and the controlled word cntl

436
00:16:42,720 --> 00:16:44,639
that is applied to variable delay line

437
00:16:44,639 --> 00:16:46,800
is updated from the most significant bit

438
00:16:46,800 --> 00:16:49,040
to the least significant bit

439
00:16:49,040 --> 00:16:50,480
after the calibration the error

440
00:16:50,480 --> 00:16:55,000
probability is around 0.25

441
00:16:58,240 --> 00:17:01,040
we have collected a huge amount of lppn

442
00:17:01,040 --> 00:17:04,160
samples from our prototype the delta has

443
00:17:04,160 --> 00:17:07,119
been found equal to 8.2 percent

444
00:17:07,119 --> 00:17:08,959
indicating that this prototype suffers

445
00:17:08,959 --> 00:17:11,599
from non-negligible output dependency

446
00:17:11,599 --> 00:17:13,359
to mitigate such dependency we

447
00:17:13,359 --> 00:17:15,199
complemented the basic design with an

448
00:17:15,199 --> 00:17:17,119
additional dummy circuit in order to

449
00:17:17,119 --> 00:17:19,520
provide that independent glitches more

450
00:17:19,520 --> 00:17:21,679
specifically we introduced those data

451
00:17:21,679 --> 00:17:23,280
independent glitches

452
00:17:23,280 --> 00:17:25,199
at the input and at the output of the

453
00:17:25,199 --> 00:17:27,599
serial tree as shown in the slide

454
00:17:27,599 --> 00:17:29,440
adopting this solution the normalizer

455
00:17:29,440 --> 00:17:34,160
difference is reduced to 5.8 percent

456
00:17:35,440 --> 00:17:38,320
the fpn od as defined before is at least

457
00:17:38,320 --> 00:17:41,200
as hard as the lpn with parameter n and

458
00:17:41,200 --> 00:17:44,320
epsilon with the key secret key k where

459
00:17:44,320 --> 00:17:46,960
epsilon is epsilon prime minus delta

460
00:17:46,960 --> 00:17:50,400
over one minus two times delta

461
00:17:50,400 --> 00:17:52,559
concretely for the delta equal to eight

462
00:17:52,559 --> 00:17:54,320
point two percent around the narrow

463
00:17:54,320 --> 00:17:56,160
probability of zero point twenty five

464
00:17:56,160 --> 00:17:58,480
reached in the fpga prototype

465
00:17:58,480 --> 00:18:01,039
we have an lpn od with those given

466
00:18:01,039 --> 00:18:03,760
parameters which security reduces to an

467
00:18:03,760 --> 00:18:06,960
lpn with parameter n equal to 512 and

468
00:18:06,960 --> 00:18:09,200
epsilon 0.20

469
00:18:09,200 --> 00:18:11,520
using the best known attack against lpn

470
00:18:11,520 --> 00:18:13,760
this gives us at least 80 bits of

471
00:18:13,760 --> 00:18:15,760
security for a screen which would rely

472
00:18:15,760 --> 00:18:18,960
on our implementation

473
00:18:20,480 --> 00:18:23,600
we now move to other results

474
00:18:23,600 --> 00:18:25,760
masking helps against differential power

475
00:18:25,760 --> 00:18:28,240
analysis and structured error but also

476
00:18:28,240 --> 00:18:29,919
mitigates delta

477
00:18:29,919 --> 00:18:32,000
indeed an adversary does not have access

478
00:18:32,000 --> 00:18:34,160
to z which is the physical inner product

479
00:18:34,160 --> 00:18:36,080
computed on one of the share of the key

480
00:18:36,080 --> 00:18:38,640
but only its leakage l

481
00:18:38,640 --> 00:18:41,200
which gives a probability of observing z

482
00:18:41,200 --> 00:18:44,000
equal to i given the leakage l that is

483
00:18:44,000 --> 00:18:46,000
equal to one over two plus a parameter

484
00:18:46,000 --> 00:18:48,240
delta that is in the range of zero one

485
00:18:48,240 --> 00:18:50,720
over two

486
00:18:50,799 --> 00:18:52,720
the only imbalance that an adversary can

487
00:18:52,720 --> 00:18:55,200
observe will therefore give us an

488
00:18:55,200 --> 00:18:58,720
epsilon 0 prime and an epsilon 1 prime

489
00:18:58,720 --> 00:19:02,880
defined as shown on the slide

490
00:19:04,080 --> 00:19:07,200
if delta it's 1 over 2 then the recovery

491
00:19:07,200 --> 00:19:09,520
of z is perfect so that we have that

492
00:19:09,520 --> 00:19:12,080
epsion zero prime is equal to epsilon

493
00:19:12,080 --> 00:19:14,799
zero and epsilon one prime is equal to

494
00:19:14,799 --> 00:19:16,160
epsilon one

495
00:19:16,160 --> 00:19:18,320
if delta is equal to zero then there is

496
00:19:18,320 --> 00:19:20,880
no leakage so that we have that epsilon

497
00:19:20,880 --> 00:19:23,600
zero prime is equal to epsilon one prime

498
00:19:23,600 --> 00:19:27,039
that is in turn equal to epsilon

499
00:19:27,039 --> 00:19:28,799
so that the latter shows that in case an

500
00:19:28,799 --> 00:19:30,559
implementation is masked

501
00:19:30,559 --> 00:19:32,240
and then the adversary

502
00:19:32,240 --> 00:19:34,080
does not exploit the leakage then

503
00:19:34,080 --> 00:19:35,679
exploring the output data dependency

504
00:19:35,679 --> 00:19:39,840
with a filtering attack is not possible

505
00:19:40,240 --> 00:19:42,559
we collected 4 million power consumption

506
00:19:42,559 --> 00:19:44,720
traces to estimate manga's signal to

507
00:19:44,720 --> 00:19:47,280
noise ratio or snr

508
00:19:47,280 --> 00:19:49,600
iss and r values have been found on the

509
00:19:49,600 --> 00:19:51,760
first stage that means the end layer

510
00:19:51,760 --> 00:19:53,679
where the dependency on the secret is

511
00:19:53,679 --> 00:19:56,720
still quite high yet is peak of snr are

512
00:19:56,720 --> 00:19:58,880
in the order of 10 to the minus 5 which

513
00:19:58,880 --> 00:20:00,640
means that boolean masking can be

514
00:20:00,640 --> 00:20:02,640
considered as an interesting candidate

515
00:20:02,640 --> 00:20:04,000
for counter measures that can

516
00:20:04,000 --> 00:20:06,080
efficiently leverage on chemomorphic

517
00:20:06,080 --> 00:20:09,439
features of the lppn

518
00:20:12,480 --> 00:20:14,880
we ported the bezier lppn design to a

519
00:20:14,880 --> 00:20:17,039
more recent and actual platform the

520
00:20:17,039 --> 00:20:20,640
excellence rtx 7 100t which is a 28

521
00:20:20,640 --> 00:20:23,120
nanometer technology fpga mounted on a

522
00:20:23,120 --> 00:20:24,520
new ae

523
00:20:24,520 --> 00:20:26,640
cw305 board

524
00:20:26,640 --> 00:20:28,799
for dna's implementation we have found a

525
00:20:28,799 --> 00:20:31,840
delta of 1.5 percent that is strongly

526
00:20:31,840 --> 00:20:34,559
reduced compared to the spartan 6 design

527
00:20:34,559 --> 00:20:36,240
such reduction confirms the

528
00:20:36,240 --> 00:20:40,080
technological dependency of this aspect

529
00:20:40,080 --> 00:20:42,640
to conclude now we summarize the pros

530
00:20:42,640 --> 00:20:45,760
and cons of dnx computing apply to lpn

531
00:20:45,760 --> 00:20:48,960
and its fpga prototype so after spruce

532
00:20:48,960 --> 00:20:51,440
we can consider good performances and

533
00:20:51,440 --> 00:20:54,320
good features for sca protection

534
00:20:54,320 --> 00:20:56,960
as cons we have to consider that the

535
00:20:56,960 --> 00:20:59,360
lppn relies on physical assumptions and

536
00:20:59,360 --> 00:21:03,039
induces data dependent error

537
00:21:03,039 --> 00:21:05,039
security reduction handles the data

538
00:21:05,039 --> 00:21:07,520
dependent errors which are themselves

539
00:21:07,520 --> 00:21:09,280
being reduced by smart hardware

540
00:21:09,280 --> 00:21:12,000
implementation

541
00:21:12,400 --> 00:21:14,799
as next step we will investigate other

542
00:21:14,799 --> 00:21:16,799
learning problems such as the learning

543
00:21:16,799 --> 00:21:19,360
with errors in order to build even more

544
00:21:19,360 --> 00:21:22,000
advanced primitives

545
00:21:22,000 --> 00:21:25,640
thanks for your attention

