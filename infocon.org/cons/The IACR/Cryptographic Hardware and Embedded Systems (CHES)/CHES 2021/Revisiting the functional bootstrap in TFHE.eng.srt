1
00:00:00,080 --> 00:00:02,159
hello my name is antonio lumanis i'm a

2
00:00:02,159 --> 00:00:04,560
phd student at university of campinas

3
00:00:04,560 --> 00:00:06,799
and i will present our work title

4
00:00:06,799 --> 00:00:08,960
revisiting the functional bootstrap in

5
00:00:08,960 --> 00:00:11,280
the fhg

6
00:00:11,280 --> 00:00:13,519
so a little bit of context the current

7
00:00:13,519 --> 00:00:15,839
fhe schemes are capable of evaluating

8
00:00:15,839 --> 00:00:17,920
linear arithmetic circuits in very

9
00:00:17,920 --> 00:00:19,439
efficient ways

10
00:00:19,439 --> 00:00:21,680
however non-linear functions are still a

11
00:00:21,680 --> 00:00:23,519
challenge for them especially with high

12
00:00:23,519 --> 00:00:27,199
precision some to systems such as ckes

13
00:00:27,199 --> 00:00:29,279
they implement nonlinear functions using

14
00:00:29,279 --> 00:00:31,920
approximations for example t or for ea

15
00:00:31,920 --> 00:00:33,760
and check chevy series

16
00:00:33,760 --> 00:00:36,000
they achieve relatively good performance

17
00:00:36,000 --> 00:00:37,760
because you can evaluate them in batches

18
00:00:37,760 --> 00:00:40,000
using synthetic computations

19
00:00:40,000 --> 00:00:42,559
however if you need to evaluate

20
00:00:42,559 --> 00:00:44,879
functions with high precision the cost

21
00:00:44,879 --> 00:00:47,280
of this approximation

22
00:00:47,280 --> 00:00:49,840
would grow super linearly and sometimes

23
00:00:49,840 --> 00:00:51,680
explanation and it could become

24
00:00:51,680 --> 00:00:53,199
prohibitive

25
00:00:53,199 --> 00:00:55,199
caffeine on the other hand implements

26
00:00:55,199 --> 00:00:57,600
circuits using binary logic gates which

27
00:00:57,600 --> 00:01:00,320
can implement basically any function at

28
00:01:00,320 --> 00:01:02,079
any desired procedure

29
00:01:02,079 --> 00:01:05,040
however complex functions require a very

30
00:01:05,040 --> 00:01:07,520
large number of logic gates which would

31
00:01:07,520 --> 00:01:10,000
affect performance

32
00:01:10,000 --> 00:01:11,360
in this context there is a new

33
00:01:11,360 --> 00:01:13,119
alternative approach called functional

34
00:01:13,119 --> 00:01:16,080
bootstrap which maintains basically the

35
00:01:16,080 --> 00:01:18,640
same reverse activity of binary logic

36
00:01:18,640 --> 00:01:22,000
gates might be capable of implementing

37
00:01:22,000 --> 00:01:24,720
much more complex operations thus they

38
00:01:24,720 --> 00:01:26,880
present a better performance

39
00:01:26,880 --> 00:01:29,360
in this paper we revisit this technique

40
00:01:29,360 --> 00:01:31,439
and we present new methods and

41
00:01:31,439 --> 00:01:33,759
optimizations for improving it

42
00:01:33,759 --> 00:01:37,439
especially for high precision functions

43
00:01:37,439 --> 00:01:39,920
i will start this presentation with a

44
00:01:39,920 --> 00:01:42,720
very brief overview of the fhe and its

45
00:01:42,720 --> 00:01:44,479
functional bootstrap

46
00:01:44,479 --> 00:01:46,479
then i will present our contributions

47
00:01:46,479 --> 00:01:48,960
and results

48
00:01:48,960 --> 00:01:51,520
cafe cafe is based

49
00:01:51,520 --> 00:01:53,759
on the learn with errors problem

50
00:01:53,759 --> 00:01:56,240
and it's basically an instantiation of

51
00:01:56,240 --> 00:01:58,479
the problems using elements in the

52
00:01:58,479 --> 00:01:59,920
realtors

53
00:01:59,920 --> 00:02:03,360
which is the set of real numbers module

54
00:02:03,360 --> 00:02:04,320
1.

55
00:02:04,320 --> 00:02:06,399
inside the representation it's the

56
00:02:06,399 --> 00:02:09,840
numbers in this interval

57
00:02:09,919 --> 00:02:12,640
in it has three types of ciphertexts and

58
00:02:12,640 --> 00:02:14,400
in this work we will use mostly the

59
00:02:14,400 --> 00:02:16,480
first two of them that i will get in

60
00:02:16,480 --> 00:02:19,640
details in the next slides

61
00:02:19,640 --> 00:02:24,000
tlwe simple it's a pair a b

62
00:02:24,000 --> 00:02:27,599
where a is a vector of any scalars in

63
00:02:27,599 --> 00:02:29,520
the thoughts

64
00:02:29,520 --> 00:02:32,160
it's sampled from a uniform distribution

65
00:02:32,160 --> 00:02:34,959
then if you have an example with n

66
00:02:34,959 --> 00:02:37,200
equals five

67
00:02:37,200 --> 00:02:40,480
b is calculated using this equation uh

68
00:02:40,480 --> 00:02:43,920
where s is the secret key uh cafe uses

69
00:02:43,920 --> 00:02:46,560
binary secret here's an example

70
00:02:46,560 --> 00:02:48,640
um

71
00:02:48,640 --> 00:02:52,000
e is an error sampled from a gaussian

72
00:02:52,000 --> 00:02:53,280
distribution

73
00:02:53,280 --> 00:02:55,040
with mean zero

74
00:02:55,040 --> 00:02:58,879
and a standard variation sigma

75
00:02:58,879 --> 00:03:01,120
this sample here that we just generated

76
00:03:01,120 --> 00:03:03,360
is not encrypting anything so we call it

77
00:03:03,360 --> 00:03:05,920
a sample of zero

78
00:03:05,920 --> 00:03:08,080
to encrypt something we just take the

79
00:03:08,080 --> 00:03:09,840
fresh sample of zero that we just

80
00:03:09,840 --> 00:03:14,159
generated and add the message to me so

81
00:03:14,159 --> 00:03:16,480
in this example we are adding 0.2 the

82
00:03:16,480 --> 00:03:17,680
message

83
00:03:17,680 --> 00:03:21,120
to be and we have the pair

84
00:03:21,120 --> 00:03:23,280
to the crypt we first calculate the face

85
00:03:23,280 --> 00:03:26,560
which is message plus error

86
00:03:26,560 --> 00:03:30,280
in this case 0.23

87
00:03:33,040 --> 00:03:35,519
since we work with exact computing we

88
00:03:35,519 --> 00:03:38,400
need to round its space to some precise

89
00:03:38,400 --> 00:03:40,959
space in this case we are rounding to

90
00:03:40,959 --> 00:03:44,319
multiples of one over n so we get the

91
00:03:44,319 --> 00:03:47,840
original message 0.2

92
00:03:47,840 --> 00:03:50,480
so the the second type of cipher text in

93
00:03:50,480 --> 00:03:53,840
tfh the rlwe

94
00:03:53,840 --> 00:03:55,519
samples

95
00:03:55,519 --> 00:03:57,840
they are basically the same thing that i

96
00:03:57,840 --> 00:04:00,959
just explained with one major difference

97
00:04:00,959 --> 00:04:03,599
instead of scalars in the taurus

98
00:04:03,599 --> 00:04:06,319
each element is a polynomial in the

99
00:04:06,319 --> 00:04:09,280
titles with coefficients in the thoughts

100
00:04:09,280 --> 00:04:10,959
so for example

101
00:04:10,959 --> 00:04:12,799
this is the message in

102
00:04:12,799 --> 00:04:15,840
which is a polynomial with coefficients

103
00:04:15,840 --> 00:04:18,399
in the real times

104
00:04:18,399 --> 00:04:20,000
in this presentation to provide

105
00:04:20,000 --> 00:04:24,160
confusion i will call the tlwe symbols

106
00:04:24,160 --> 00:04:27,600
scalar samples are scalar ciphertexts

107
00:04:27,600 --> 00:04:28,919
and the

108
00:04:28,919 --> 00:04:32,400
t-r-lwe samples polynomial samples are

109
00:04:32,400 --> 00:04:35,360
polynomial ciphertexts

110
00:04:35,360 --> 00:04:37,840
arithmetic additions and scalings can be

111
00:04:37,840 --> 00:04:40,800
performed directly we simply add each

112
00:04:40,800 --> 00:04:42,560
element of the pair

113
00:04:42,560 --> 00:04:45,440
or multiply each element of the pair

114
00:04:45,440 --> 00:04:47,360
by an integer

115
00:04:47,360 --> 00:04:49,600
kfh does not support multiplication

116
00:04:49,600 --> 00:04:52,240
between ciphertext it relies on external

117
00:04:52,240 --> 00:04:54,720
products with other types of server

118
00:04:54,720 --> 00:04:56,320
texts

119
00:04:56,320 --> 00:04:58,479
in any case the important thing to note

120
00:04:58,479 --> 00:05:00,320
is that the arithmetic operations

121
00:05:00,320 --> 00:05:01,759
increase there

122
00:05:01,759 --> 00:05:03,759
and eventually it would affect

123
00:05:03,759 --> 00:05:06,320
significant bits of the message

124
00:05:06,320 --> 00:05:09,440
if we want to continue the computation

125
00:05:09,440 --> 00:05:11,840
we would need to perform a bootstrap

126
00:05:11,840 --> 00:05:14,560
procedure which resets the air to some

127
00:05:14,560 --> 00:05:17,520
predefined amount

128
00:05:19,440 --> 00:05:22,800
building blocks of the official the tfh

129
00:05:22,800 --> 00:05:25,120
has three main building blocks that are

130
00:05:25,120 --> 00:05:27,199
necessary for the wood strap and that we

131
00:05:27,199 --> 00:05:28,800
use in this work

132
00:05:28,800 --> 00:05:31,840
the first one is the key sweeting it has

133
00:05:31,840 --> 00:05:34,400
several uses such as tweaking keys and

134
00:05:34,400 --> 00:05:36,080
parameters

135
00:05:36,080 --> 00:05:38,560
but the main one that we are using here

136
00:05:38,560 --> 00:05:41,039
is the packing of scalar samples in

137
00:05:41,039 --> 00:05:43,919
polynomial samples for example here we

138
00:05:43,919 --> 00:05:47,120
here we have four scalar samples uh each

139
00:05:47,120 --> 00:05:49,120
one encrypting mi

140
00:05:49,120 --> 00:05:51,680
and we can using the the we can use the

141
00:05:51,680 --> 00:05:53,759
packing key switch to pack

142
00:05:53,759 --> 00:05:55,360
these for

143
00:05:55,360 --> 00:06:00,240
scalar samples in one polynomial sample

144
00:06:01,120 --> 00:06:03,360
the simple extract does exactly the

145
00:06:03,360 --> 00:06:06,319
opposite receives a polynomial sample

146
00:06:06,319 --> 00:06:09,520
and extracts the coefficient of some

147
00:06:09,520 --> 00:06:11,600
monomial in the example we are

148
00:06:11,600 --> 00:06:16,160
extracting the monomial of degree zero

149
00:06:16,880 --> 00:06:18,960
the third one involving the fhe is the

150
00:06:18,960 --> 00:06:22,319
black rotate it receives two inputs acc

151
00:06:22,319 --> 00:06:25,520
is a polynomial sample c is a scalar

152
00:06:25,520 --> 00:06:26,560
sample

153
00:06:26,560 --> 00:06:30,400
it rotates acc based on the phase of c

154
00:06:30,400 --> 00:06:32,960
so in this example we have n equals

155
00:06:32,960 --> 00:06:36,720
power the phase of c is 0.25 so it will

156
00:06:36,720 --> 00:06:39,919
rotate this t by multiplying it

157
00:06:39,919 --> 00:06:43,919
by x to the power of two

158
00:06:43,919 --> 00:06:46,160
and if you rotate two positions to the

159
00:06:46,160 --> 00:06:47,440
left

160
00:06:47,440 --> 00:06:49,680
now here we have the result

161
00:06:49,680 --> 00:06:52,080
the monomials that were rotated back

162
00:06:52,080 --> 00:06:54,319
from the beginning are now negative

163
00:06:54,319 --> 00:06:56,800
because this multiplication occurs

164
00:06:56,800 --> 00:07:00,160
model the nf atomic polynomial so we

165
00:07:00,160 --> 00:07:02,800
have a negative property

166
00:07:02,800 --> 00:07:04,639
with this building blocks we can define

167
00:07:04,639 --> 00:07:07,440
the bootstrap originally tfhe only works

168
00:07:07,440 --> 00:07:09,199
with boolean values

169
00:07:09,199 --> 00:07:12,000
and it represents them as

170
00:07:12,000 --> 00:07:15,039
minus one over four or positive one over

171
00:07:15,039 --> 00:07:18,400
four the bootstrap receives two inputs

172
00:07:18,400 --> 00:07:21,599
acc which is the polynomial sample and c

173
00:07:21,599 --> 00:07:23,919
which is a scalar sample to be

174
00:07:23,919 --> 00:07:25,280
bootstrapped

175
00:07:25,280 --> 00:07:29,599
in this example c represents a bit one

176
00:07:29,599 --> 00:07:32,960
so its space should be one over four

177
00:07:32,960 --> 00:07:35,280
but let's say that for some reason the

178
00:07:35,280 --> 00:07:38,160
phase is one over eight and we want to

179
00:07:38,160 --> 00:07:40,880
correct this error

180
00:07:40,880 --> 00:07:43,919
what the bootstrap does is to rotate acc

181
00:07:43,919 --> 00:07:45,680
based on the phase of c

182
00:07:45,680 --> 00:07:47,599
using the by rotate

183
00:07:47,599 --> 00:07:50,800
and then it extracts the constant value

184
00:07:50,800 --> 00:07:53,120
of rotated ac

185
00:07:53,120 --> 00:07:55,919
basically if the phase of c is something

186
00:07:55,919 --> 00:07:58,400
between minus 0.5

187
00:07:58,400 --> 00:07:59,599
and 0

188
00:07:59,599 --> 00:08:04,479
this multiplication will be 2x

189
00:08:04,720 --> 00:08:08,080
to something between 0 and n

190
00:08:08,080 --> 00:08:10,560
so thanks to the megacyclin property as

191
00:08:10,560 --> 00:08:12,240
we saw

192
00:08:12,240 --> 00:08:13,919
here

193
00:08:13,919 --> 00:08:16,720
the constant term becomes negative

194
00:08:16,720 --> 00:08:19,520
and we have minus one over four

195
00:08:19,520 --> 00:08:22,080
otherwise the rotation amount is bigger

196
00:08:22,080 --> 00:08:23,520
than n

197
00:08:23,520 --> 00:08:26,960
so it will rotate more than once

198
00:08:26,960 --> 00:08:28,240
and

199
00:08:28,240 --> 00:08:30,080
the constant theorem will be positive

200
00:08:30,080 --> 00:08:32,000
again

201
00:08:32,000 --> 00:08:34,080
when extracting we will have one of

202
00:08:34,080 --> 00:08:37,279
these two values which is the expected

203
00:08:37,279 --> 00:08:42,159
values for boolean values in the fhe

204
00:08:42,559 --> 00:08:45,279
the function of bootstrap the basic idea

205
00:08:45,279 --> 00:08:47,680
of the function bootstrap is to evaluate

206
00:08:47,680 --> 00:08:50,880
a function within the bootstrap instead

207
00:08:50,880 --> 00:08:53,760
of just resetting the error in capital

208
00:08:53,760 --> 00:08:56,480
the function of strap evaluates lookup

209
00:08:56,480 --> 00:08:59,920
tables here we have an example

210
00:08:59,920 --> 00:09:02,399
we have the input to our selector

211
00:09:02,399 --> 00:09:04,800
in this example

212
00:09:04,800 --> 00:09:07,200
we have the lookup table itself which is

213
00:09:07,200 --> 00:09:09,360
encoding the square function

214
00:09:09,360 --> 00:09:11,279
and we have the output

215
00:09:11,279 --> 00:09:15,040
four which is the square of two

216
00:09:17,120 --> 00:09:18,800
the function of the strap is pretty

217
00:09:18,800 --> 00:09:20,800
similar to the regular bootstrap there

218
00:09:20,800 --> 00:09:22,880
are two main differences

219
00:09:22,880 --> 00:09:24,800
first we are no longer encrypting

220
00:09:24,800 --> 00:09:27,360
boolean units we are encrypting integers

221
00:09:27,360 --> 00:09:30,640
in some ways base 4 in this exact name

222
00:09:30,640 --> 00:09:34,320
and second acc is no longer a fixed

223
00:09:34,320 --> 00:09:35,760
polynomial

224
00:09:35,760 --> 00:09:38,640
it now encodes the lookup table that we

225
00:09:38,640 --> 00:09:41,120
want to evaluate in this example the

226
00:09:41,120 --> 00:09:43,600
uncut table has four slots

227
00:09:43,600 --> 00:09:46,000
since we are working with base four

228
00:09:46,000 --> 00:09:49,640
and each slots mapped to a sequence of

229
00:09:49,640 --> 00:09:53,200
256 monomials in acc

230
00:09:53,200 --> 00:09:55,440
the bootstrap algorithm is similar we

231
00:09:55,440 --> 00:09:58,800
use the blind rotate to rotate acc

232
00:09:58,800 --> 00:10:01,120
and the simple extract to extract the

233
00:10:01,120 --> 00:10:02,560
constant term

234
00:10:02,560 --> 00:10:06,000
the process that is actually performing

235
00:10:06,000 --> 00:10:10,160
the lookup up here is the right rotate

236
00:10:10,160 --> 00:10:12,959
however it rotates acc based on the

237
00:10:12,959 --> 00:10:14,320
phase of c

238
00:10:14,320 --> 00:10:17,200
this phase contains an error which is

239
00:10:17,200 --> 00:10:19,440
scaled by 2n

240
00:10:19,440 --> 00:10:21,040
and furthermore

241
00:10:21,040 --> 00:10:22,800
this value is

242
00:10:22,800 --> 00:10:24,079
rounded

243
00:10:24,079 --> 00:10:27,440
so we have two sources of error in this

244
00:10:27,440 --> 00:10:28,720
rotation

245
00:10:28,720 --> 00:10:31,120
in practice let's say we want to work

246
00:10:31,120 --> 00:10:34,800
with a large base and we want to rotate

247
00:10:34,800 --> 00:10:37,440
100 positions in acc

248
00:10:37,440 --> 00:10:39,440
for these parameters the battery rotate

249
00:10:39,440 --> 00:10:42,079
would actually rotate something between

250
00:10:42,079 --> 00:10:45,519
70 and 130 positions

251
00:10:45,519 --> 00:10:49,360
so this rotation is not precise at all

252
00:10:49,360 --> 00:10:52,240
that's why we need to map each slot

253
00:10:52,240 --> 00:10:56,560
to a large sequences of monomials

254
00:10:56,560 --> 00:10:59,360
and look up table needs to be relatively

255
00:10:59,360 --> 00:11:02,079
small compared to the size of the

256
00:11:02,079 --> 00:11:04,640
polynomials

257
00:11:04,640 --> 00:11:06,880
we also need to add a precision of

258
00:11:06,880 --> 00:11:08,399
statute

259
00:11:08,399 --> 00:11:11,360
so that the black rotates ends exactly

260
00:11:11,360 --> 00:11:14,640
in the middle of these sequences

261
00:11:14,640 --> 00:11:16,640
another technique that we use in this

262
00:11:16,640 --> 00:11:19,120
work is the multi-volume bootstrap the

263
00:11:19,120 --> 00:11:21,440
idea here is that we can evaluate

264
00:11:21,440 --> 00:11:23,519
many lookup tables with the same

265
00:11:23,519 --> 00:11:26,800
selector at once which of course greatly

266
00:11:26,800 --> 00:11:28,480
improves performance

267
00:11:28,480 --> 00:11:31,120
however it also increases the error

268
00:11:31,120 --> 00:11:33,200
output

269
00:11:33,200 --> 00:11:37,440
by s times q minus 1 squared times where

270
00:11:37,440 --> 00:11:40,320
s is the input base and q is the output

271
00:11:40,320 --> 00:11:41,360
phase

272
00:11:41,360 --> 00:11:43,360
taking this work one of our

273
00:11:43,360 --> 00:11:44,720
contributions

274
00:11:44,720 --> 00:11:48,320
is showing how we can remove this square

275
00:11:48,320 --> 00:11:51,519
power from the equation

276
00:11:51,519 --> 00:11:53,440
so the function of the strap is a great

277
00:11:53,440 --> 00:11:55,279
improvement compared to large decades

278
00:11:55,279 --> 00:11:57,360
but it still has some problems with high

279
00:11:57,360 --> 00:11:59,519
precision functions taking a few

280
00:11:59,519 --> 00:12:01,519
examples from the literature we can see

281
00:12:01,519 --> 00:12:03,440
that the sine functions which only

282
00:12:03,440 --> 00:12:06,320
requires one week of precision can be

283
00:12:06,320 --> 00:12:10,160
evaluated using a polynomial with 1024

284
00:12:10,160 --> 00:12:12,639
coefficients it takes just 13

285
00:12:12,639 --> 00:12:13,920
milliseconds

286
00:12:13,920 --> 00:12:16,480
and the overhead is negligible

287
00:12:16,480 --> 00:12:20,000
a 6 bits to 6-bit lookup table on the

288
00:12:20,000 --> 00:12:23,279
other hand requires a polynomial

289
00:12:23,279 --> 00:12:26,720
times bigger and takes around one second

290
00:12:26,720 --> 00:12:28,720
to be evaluated

291
00:12:28,720 --> 00:12:31,600
their hate is also something that's not

292
00:12:31,600 --> 00:12:32,880
inevitable

293
00:12:32,880 --> 00:12:34,639
basically the problem here is that the

294
00:12:34,639 --> 00:12:37,440
execution time grows super linearly

295
00:12:37,440 --> 00:12:40,720
within and and grow super linearly with

296
00:12:40,720 --> 00:12:42,959
the desired procedure

297
00:12:42,959 --> 00:12:45,440
in this work we introduced new methods

298
00:12:45,440 --> 00:12:47,200
to evaluate functions with high

299
00:12:47,200 --> 00:12:49,760
precision without increasing the

300
00:12:49,760 --> 00:12:52,639
parameters so we can evaluate the 6-bit

301
00:12:52,639 --> 00:12:54,399
lookup table

302
00:12:54,399 --> 00:12:57,760
with a polynomial of 1024

303
00:12:57,760 --> 00:13:00,480
coefficients and we achieve a much

304
00:13:00,480 --> 00:13:03,040
better error rate and a much better

305
00:13:03,040 --> 00:13:06,000
execution time

306
00:13:06,000 --> 00:13:08,480
so our contributions

307
00:13:08,480 --> 00:13:10,560
we introduced two methods to combine

308
00:13:10,560 --> 00:13:12,800
multiple functional with straps so that

309
00:13:12,800 --> 00:13:15,200
we can evaluate large lookup tables

310
00:13:15,200 --> 00:13:17,279
without increasing the parameters of the

311
00:13:17,279 --> 00:13:18,880
cryptosystem

312
00:13:18,880 --> 00:13:20,959
we present optimizations to the core

313
00:13:20,959 --> 00:13:23,680
procedures of our methods

314
00:13:23,680 --> 00:13:26,560
and we perform a complete error analysis

315
00:13:26,560 --> 00:13:29,200
including experimental validation of our

316
00:13:29,200 --> 00:13:32,160
two methods and optimizations

317
00:13:32,160 --> 00:13:34,240
we also implement several common

318
00:13:34,240 --> 00:13:36,560
functions and compare our results with

319
00:13:36,560 --> 00:13:38,959
previous literature

320
00:13:38,959 --> 00:13:41,279
the basic idea behind our two methods is

321
00:13:41,279 --> 00:13:44,000
to decompose the scifi text in multiple

322
00:13:44,000 --> 00:13:46,160
symbols and encode the function in

323
00:13:46,160 --> 00:13:49,360
several small lookout tables

324
00:13:49,360 --> 00:13:51,600
there are two ways of combining them in

325
00:13:51,600 --> 00:13:54,399
the chaining methods the output of our

326
00:13:54,399 --> 00:13:57,440
cup is used to create the selector of

327
00:13:57,440 --> 00:13:58,480
the next

328
00:13:58,480 --> 00:14:00,800
in the three based methods the output of

329
00:14:00,800 --> 00:14:02,880
lookup is used to create

330
00:14:02,880 --> 00:14:06,160
the next lookup table

331
00:14:06,160 --> 00:14:09,519
the chaining is a generalization of the

332
00:14:09,519 --> 00:14:11,600
integer comparison algorithm presented

333
00:14:11,600 --> 00:14:13,360
by bars and others

334
00:14:13,360 --> 00:14:15,920
and it can only evaluate functions

335
00:14:15,920 --> 00:14:18,320
following this definition

336
00:14:18,320 --> 00:14:21,600
however it presents a much better error

337
00:14:21,600 --> 00:14:24,480
variance than the other method

338
00:14:24,480 --> 00:14:26,160
this definition doesn't help much when

339
00:14:26,160 --> 00:14:28,800
defining new functions but we found a

340
00:14:28,800 --> 00:14:31,040
few families of functions that usually

341
00:14:31,040 --> 00:14:33,279
present very good results with this

342
00:14:33,279 --> 00:14:36,000
method firstly they follow test logics

343
00:14:36,000 --> 00:14:38,240
such as integer comparison sign

344
00:14:38,240 --> 00:14:41,040
imperative or curry like logic such as

345
00:14:41,040 --> 00:14:43,600
additions and multiplications

346
00:14:43,600 --> 00:14:46,160
we will show results for an additional

347
00:14:46,160 --> 00:14:48,720
method with this method the three way is

348
00:14:48,720 --> 00:14:50,639
the method on the other hand is capable

349
00:14:50,639 --> 00:14:53,120
of relating any function in this example

350
00:14:53,120 --> 00:14:55,360
we are evaluating eight bits in mind in

351
00:14:55,360 --> 00:14:57,920
base four instead of having a very big

352
00:14:57,920 --> 00:15:00,880
lookup table covering all this interval

353
00:15:00,880 --> 00:15:03,360
we have several small cup tables each

354
00:15:03,360 --> 00:15:06,959
square in this image is a different one

355
00:15:06,959 --> 00:15:09,920
then we evaluate all lookup tables in a

356
00:15:09,920 --> 00:15:12,800
hole with the same selector

357
00:15:12,800 --> 00:15:15,680
first c0 which is the least significant

358
00:15:15,680 --> 00:15:17,360
digit

359
00:15:17,360 --> 00:15:20,160
we get the results we create new lookup

360
00:15:20,160 --> 00:15:23,360
tables which we evaluate with the

361
00:15:23,360 --> 00:15:26,480
selector c1 the second

362
00:15:26,480 --> 00:15:28,480
is significant digit

363
00:15:28,480 --> 00:15:33,199
and so on until we reach the end result

364
00:15:33,199 --> 00:15:35,519
at first this method would require an

365
00:15:35,519 --> 00:15:37,519
exponential number of functional good

366
00:15:37,519 --> 00:15:40,160
steps however all lookup tables in a

367
00:15:40,160 --> 00:15:42,560
hole are evaluated with the same

368
00:15:42,560 --> 00:15:44,079
selector

369
00:15:44,079 --> 00:15:46,480
so we can use the multi-value with strap

370
00:15:46,480 --> 00:15:49,120
to evaluate all of them at once with a

371
00:15:49,120 --> 00:15:51,839
single bootstrap then we have a linear

372
00:15:51,839 --> 00:15:54,399
number of bootstraps for any arbitrary

373
00:15:54,399 --> 00:15:55,600
function

374
00:15:55,600 --> 00:15:58,160
its methods also enable optimizations

375
00:15:58,160 --> 00:16:00,079
based on specific properties of the

376
00:16:00,079 --> 00:16:02,800
function the sigmoid for example has two

377
00:16:02,800 --> 00:16:05,440
intervals there are almost constant

378
00:16:05,440 --> 00:16:07,040
values

379
00:16:07,040 --> 00:16:10,240
and it also has one interval that is

380
00:16:10,240 --> 00:16:13,120
almost a linear function we can replace

381
00:16:13,120 --> 00:16:15,680
all of them the tree reducing the number

382
00:16:15,680 --> 00:16:17,680
of lookup tables that we have to

383
00:16:17,680 --> 00:16:19,519
evaluate

384
00:16:19,519 --> 00:16:21,600
this is the algorithm for this method

385
00:16:21,600 --> 00:16:23,519
and here we see its true main building

386
00:16:23,519 --> 00:16:25,920
blocks the multivariate splat

387
00:16:25,920 --> 00:16:27,759
and the public key switch

388
00:16:27,759 --> 00:16:30,560
we present optimizations for both first

389
00:16:30,560 --> 00:16:32,720
we present a specialized version of the

390
00:16:32,720 --> 00:16:34,320
packing switch

391
00:16:34,320 --> 00:16:36,800
and then we introduce a multi-value

392
00:16:36,800 --> 00:16:39,199
extract procedure which allows every

393
00:16:39,199 --> 00:16:42,480
taxi scaling with linear error growth

394
00:16:42,480 --> 00:16:44,560
and therefore it improves the error

395
00:16:44,560 --> 00:16:46,720
output variance of the motor value

396
00:16:46,720 --> 00:16:48,639
bootstrap

397
00:16:48,639 --> 00:16:50,720
the basic idea behind the key switching

398
00:16:50,720 --> 00:16:52,639
is to homomorphically calculate the

399
00:16:52,639 --> 00:16:55,360
phase for packing scalar samples in

400
00:16:55,360 --> 00:16:57,199
polynomial sample

401
00:16:57,199 --> 00:16:59,839
this is what we need to calculate f is

402
00:16:59,839 --> 00:17:02,959
the packing function and ks is the key

403
00:17:02,959 --> 00:17:04,959
switching key which is basically an

404
00:17:04,959 --> 00:17:08,480
encryption of the tree the key itself

405
00:17:08,480 --> 00:17:11,439
the most expensive part in this is this

406
00:17:11,439 --> 00:17:14,240
multiplication here between ks

407
00:17:14,240 --> 00:17:16,319
and the polynomial generated by the

408
00:17:16,319 --> 00:17:19,599
packing function this method is capable

409
00:17:19,599 --> 00:17:22,640
of backing up to any symbols

410
00:17:22,640 --> 00:17:25,679
however we just want to pack b samples

411
00:17:25,679 --> 00:17:29,360
where b is our base

412
00:17:29,360 --> 00:17:30,160
so

413
00:17:30,160 --> 00:17:33,600
this polynomial will have sequences of n

414
00:17:33,600 --> 00:17:34,720
over b

415
00:17:34,720 --> 00:17:36,960
repeated monomials

416
00:17:36,960 --> 00:17:39,120
instead of having these repetitions in

417
00:17:39,120 --> 00:17:41,760
this polynomial we can pre-calculate

418
00:17:41,760 --> 00:17:44,400
them in the kiswiti

419
00:17:44,400 --> 00:17:47,360
in this way the ks key becomes b times

420
00:17:47,360 --> 00:17:48,720
bigger

421
00:17:48,720 --> 00:17:51,840
but the multiplication becomes n over b

422
00:17:51,840 --> 00:17:54,720
times faster and generates n over b

423
00:17:54,720 --> 00:17:56,480
fewer errors

424
00:17:56,480 --> 00:18:00,240
in our parameters n over b is 256 which

425
00:18:00,240 --> 00:18:03,679
is a very significant gain

426
00:18:03,679 --> 00:18:06,240
the second building block optimization

427
00:18:06,240 --> 00:18:08,799
is the multi-value extract

428
00:18:08,799 --> 00:18:11,039
this equation defines the error growth

429
00:18:11,039 --> 00:18:13,600
variance when performing arch map

430
00:18:13,600 --> 00:18:15,280
whole is the correlation between

431
00:18:15,280 --> 00:18:16,480
variables

432
00:18:16,480 --> 00:18:19,120
when adding independent variables we

433
00:18:19,120 --> 00:18:22,000
have in linear error growth

434
00:18:22,000 --> 00:18:24,240
when scaling a variable

435
00:18:24,240 --> 00:18:27,200
multiplying it by an integer

436
00:18:27,200 --> 00:18:29,919
whole is one and their growth is

437
00:18:29,919 --> 00:18:32,480
quadrature

438
00:18:32,559 --> 00:18:35,480
the idea here is simple can we implement

439
00:18:35,480 --> 00:18:38,160
multiplications as sequences of

440
00:18:38,160 --> 00:18:40,799
additions of independent sky scalar

441
00:18:40,799 --> 00:18:43,919
samples we can always implement scalings

442
00:18:43,919 --> 00:18:47,360
as sequences of additions but how could

443
00:18:47,360 --> 00:18:51,200
we obtain independent samples

444
00:18:51,200 --> 00:18:52,080
well

445
00:18:52,080 --> 00:18:54,480
if we remember our lookup table in

446
00:18:54,480 --> 00:18:56,240
coding

447
00:18:56,240 --> 00:18:59,280
each element of the table is mapped to a

448
00:18:59,280 --> 00:19:00,440
sequence of

449
00:19:00,440 --> 00:19:03,760
256 monomials and according to the

450
00:19:03,760 --> 00:19:06,240
independency heuristic

451
00:19:06,240 --> 00:19:08,160
they should be and should remain

452
00:19:08,160 --> 00:19:09,600
independent

453
00:19:09,600 --> 00:19:11,120
bootstrap

454
00:19:11,120 --> 00:19:11,840
so

455
00:19:11,840 --> 00:19:14,400
at first what we could do is simply

456
00:19:14,400 --> 00:19:15,600
extract

457
00:19:15,600 --> 00:19:19,280
multiple samples of the polynomial

458
00:19:19,280 --> 00:19:21,280
however we noted that although the

459
00:19:21,280 --> 00:19:23,520
independencies

460
00:19:23,520 --> 00:19:25,440
for the gaussian error from the

461
00:19:25,440 --> 00:19:26,880
encryption

462
00:19:26,880 --> 00:19:29,440
the error introduced by the approximated

463
00:19:29,440 --> 00:19:32,559
gadget decompositions of fhe which is a

464
00:19:32,559 --> 00:19:36,320
novel from the fhe are not independent

465
00:19:36,320 --> 00:19:39,600
we needed to increase the precision of

466
00:19:39,600 --> 00:19:43,360
the gadget the composition from 20 to 25

467
00:19:43,360 --> 00:19:46,559
bits so that we could achieve the result

468
00:19:46,559 --> 00:19:49,039
that we were looking for here we have

469
00:19:49,039 --> 00:19:52,000
the multi-value extract with a linear

470
00:19:52,000 --> 00:19:53,200
error growth

471
00:19:53,200 --> 00:19:56,620
while the direct scaling still has a

472
00:19:56,620 --> 00:19:58,080
[Music]

473
00:19:58,080 --> 00:20:01,120
quadratic error growth

474
00:20:01,120 --> 00:20:01,919
so

475
00:20:01,919 --> 00:20:04,159
in general the modal value extract

476
00:20:04,159 --> 00:20:07,280
allows evaluating any ciphertext schemes

477
00:20:07,280 --> 00:20:10,159
with linear error growth provided that

478
00:20:10,159 --> 00:20:13,440
we had executed a bootstrap recently

479
00:20:13,440 --> 00:20:15,440
which is almost

480
00:20:15,440 --> 00:20:18,000
always the case with tfh

481
00:20:18,000 --> 00:20:20,000
in the mutual valuable strap of karpov

482
00:20:20,000 --> 00:20:23,200
in orders this square comes from a

483
00:20:23,200 --> 00:20:26,000
ciphertext scaling so we can just apply

484
00:20:26,000 --> 00:20:29,280
the mutual value extract here and reduce

485
00:20:29,280 --> 00:20:32,000
the order of variance from address to

486
00:20:32,000 --> 00:20:33,360
linear

487
00:20:33,360 --> 00:20:37,760
removing this square power

488
00:20:38,320 --> 00:20:40,640
finally our results

489
00:20:40,640 --> 00:20:42,559
we implemented several functions to

490
00:20:42,559 --> 00:20:44,720
compare with previous literature we

491
00:20:44,720 --> 00:20:47,840
achieved gains of up to 3.2 times

492
00:20:47,840 --> 00:20:50,240
compared to works that were already

493
00:20:50,240 --> 00:20:52,480
using the functional bootstrap

494
00:20:52,480 --> 00:20:56,240
and up to almost 9 times compared to

495
00:20:56,240 --> 00:20:58,880
works using large beads i will highlight

496
00:20:58,880 --> 00:21:00,880
a few of these results

497
00:21:00,880 --> 00:21:04,559
this is a 6-bit 6-bit lookup table the

498
00:21:04,559 --> 00:21:06,640
the difference between our method and

499
00:21:06,640 --> 00:21:09,280
the implementation of carpal and others

500
00:21:09,280 --> 00:21:11,360
is that they use just one functional

501
00:21:11,360 --> 00:21:13,760
wood strap with very big parameters

502
00:21:13,760 --> 00:21:16,480
while we use several

503
00:21:16,480 --> 00:21:19,760
bootstrap with small parameters

504
00:21:19,760 --> 00:21:23,200
we have games in basically all aspects

505
00:21:23,200 --> 00:21:26,000
the keys are smaller um

506
00:21:26,000 --> 00:21:29,120
the error h is also much smaller

507
00:21:29,120 --> 00:21:31,600
and in the execution time we got gains

508
00:21:31,600 --> 00:21:35,520
of up to 2.5 times

509
00:21:35,520 --> 00:21:38,400
32 bits interior comparison we compare

510
00:21:38,400 --> 00:21:41,679
our work with the one of bars and others

511
00:21:41,679 --> 00:21:43,840
which was the base for our chaining

512
00:21:43,840 --> 00:21:46,480
methods and that uses the same number of

513
00:21:46,480 --> 00:21:48,320
functional bootstraps

514
00:21:48,320 --> 00:21:51,760
however we are still able to get a 3.2

515
00:21:51,760 --> 00:21:54,480
times speed up over it

516
00:21:54,480 --> 00:21:57,280
as a result of our improved error

517
00:21:57,280 --> 00:21:59,760
analysis which allowed us to get a much

518
00:21:59,760 --> 00:22:02,640
better automated set

519
00:22:02,640 --> 00:22:04,559
we also compare with the work of zone

520
00:22:04,559 --> 00:22:07,200
and others which uses large gates

521
00:22:07,200 --> 00:22:09,760
we consider the error hate for large

522
00:22:09,760 --> 00:22:11,600
gates to be negligible because it

523
00:22:11,600 --> 00:22:14,480
exceeds the precision of our estimations

524
00:22:14,480 --> 00:22:17,760
which was 500 bits

525
00:22:17,760 --> 00:22:20,240
however this value here is also

526
00:22:20,240 --> 00:22:24,159
negligible compared to the secret lab

527
00:22:24,480 --> 00:22:26,880
8-bit additions we implemented this

528
00:22:26,880 --> 00:22:29,600
algorithm using the chaining method

529
00:22:29,600 --> 00:22:32,720
and we compare it with works using large

530
00:22:32,720 --> 00:22:34,880
gates the algorithm is linear in

531
00:22:34,880 --> 00:22:37,679
precision so we can have an execution

532
00:22:37,679 --> 00:22:38,480
time

533
00:22:38,480 --> 00:22:42,640
of approximately 10 milliseconds per bit

534
00:22:42,640 --> 00:22:45,919
for integers of in size for example we

535
00:22:45,919 --> 00:22:49,120
could add integers of

536
00:22:49,120 --> 00:22:53,760
100 bits in just one second

537
00:22:53,760 --> 00:22:57,760
games here reach almost nine times

538
00:22:57,760 --> 00:23:01,039
and these two values are also negative

539
00:23:01,039 --> 00:23:03,200
compared to the spirit level

540
00:23:03,200 --> 00:23:05,200
okay to brief summarize our work we

541
00:23:05,200 --> 00:23:07,120
present two methods for combining

542
00:23:07,120 --> 00:23:09,440
multiple functional bootstraps and we

543
00:23:09,440 --> 00:23:12,240
achieved gains of almost 9 times over

544
00:23:12,240 --> 00:23:14,240
previous literature

545
00:23:14,240 --> 00:23:16,880
our methods also enable the possibility

546
00:23:16,880 --> 00:23:19,360
of efficiently implementing functions

547
00:23:19,360 --> 00:23:22,400
with even higher precision

548
00:23:22,400 --> 00:23:24,600
and represented building blocked

549
00:23:24,600 --> 00:23:27,840
optimizations which are made for our

550
00:23:27,840 --> 00:23:29,120
methods but

551
00:23:29,120 --> 00:23:32,000
also can be used in other contexts

552
00:23:32,000 --> 00:23:34,720
we showed a specialized packing key

553
00:23:34,720 --> 00:23:37,440
switching which for our parameters is

554
00:23:37,440 --> 00:23:39,039
256

555
00:23:39,039 --> 00:23:40,320
times

556
00:23:40,320 --> 00:23:42,240
faster and

557
00:23:42,240 --> 00:23:44,240
presents less error

558
00:23:44,240 --> 00:23:46,799
over the generic technique

559
00:23:46,799 --> 00:23:49,760
we also present a multi-value extract

560
00:23:49,760 --> 00:23:52,799
procedure which enables scalings

561
00:23:52,799 --> 00:23:55,279
with linear error growth

562
00:23:55,279 --> 00:23:58,000
and we present a complete error analysis

563
00:23:58,000 --> 00:24:01,679
included in experimental validation

564
00:24:01,679 --> 00:24:03,440
in general the functional bootstrap is

565
00:24:03,440 --> 00:24:05,919
still a new technique and but it looks

566
00:24:05,919 --> 00:24:08,320
very promising there is a lot of space

567
00:24:08,320 --> 00:24:10,000
for improvements on many of the

568
00:24:10,000 --> 00:24:11,200
techniques

569
00:24:11,200 --> 00:24:14,559
that we presented here

570
00:24:14,559 --> 00:24:18,399
thank you all for watching this video

