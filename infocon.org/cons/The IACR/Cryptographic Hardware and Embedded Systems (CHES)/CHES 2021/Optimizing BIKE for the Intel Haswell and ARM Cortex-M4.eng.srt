1
00:00:01,040 --> 00:00:03,199
today i'm going to tell you about how we

2
00:00:03,199 --> 00:00:05,600
optimize fight for the intel as well and

3
00:00:05,600 --> 00:00:08,000
on cortex and 4.

4
00:00:08,000 --> 00:00:10,080
this is a joint work with meeting chain

5
00:00:10,080 --> 00:00:13,280
and marker scores

6
00:00:14,480 --> 00:00:17,119
but is one of the several alternate

7
00:00:17,119 --> 00:00:20,160
campaigns of mixed pqc

8
00:00:20,160 --> 00:00:23,600
standardization process

9
00:00:24,640 --> 00:00:26,800
it is a code based scan based on

10
00:00:26,800 --> 00:00:28,800
so-called moderate density parity check

11
00:00:28,800 --> 00:00:32,000
code which is essentially the same as

12
00:00:32,000 --> 00:00:35,520
low density parity check code

13
00:00:36,800 --> 00:00:39,680
the policies of bike

14
00:00:39,680 --> 00:00:40,879
are

15
00:00:40,879 --> 00:00:43,280
pretty small

16
00:00:43,280 --> 00:00:46,160
uh the qualities are 1.5 kilobytes three

17
00:00:46,160 --> 00:00:48,559
kilobytes and five kilobytes for the

18
00:00:48,559 --> 00:00:50,399
level one level three and level five

19
00:00:50,399 --> 00:00:53,199
parity sets

20
00:00:53,840 --> 00:00:56,079
and the reason why bike can have small

21
00:00:56,079 --> 00:00:59,359
keys is because the construction is

22
00:00:59,359 --> 00:01:01,760
anti-like

23
00:01:01,760 --> 00:01:03,840
some brain structures

24
00:01:03,840 --> 00:01:05,920
has been included in

25
00:01:05,920 --> 00:01:09,360
bikes construction

26
00:01:10,400 --> 00:01:12,640
and bike has been supported in amazon's

27
00:01:12,640 --> 00:01:16,320
aws key management service

28
00:01:16,320 --> 00:01:19,600
so this sounds good

29
00:01:19,600 --> 00:01:21,200
but unfortunately

30
00:01:21,200 --> 00:01:24,640
pike is a relatively slow

31
00:01:24,640 --> 00:01:29,200
scheme in the standardization process

32
00:01:29,360 --> 00:01:32,799
for example if you consider bike l1

33
00:01:32,799 --> 00:01:36,640
the level 1 current 7 pike to

34
00:01:36,640 --> 00:01:39,280
the corresponding parameter set of

35
00:01:39,280 --> 00:01:41,920
classic mclees

36
00:01:41,920 --> 00:01:44,000
you can see that both incarceration and

37
00:01:44,000 --> 00:01:48,159
degeneration are much slower

38
00:01:48,240 --> 00:01:50,640
and there hasn't been any optimized code

39
00:01:50,640 --> 00:01:52,880
for embedded systems

40
00:01:52,880 --> 00:01:56,158
written by the bike team

41
00:01:59,040 --> 00:02:02,479
so here's how what we did

42
00:02:02,479 --> 00:02:04,399
we wrote

43
00:02:04,399 --> 00:02:07,280
a as well implementation and also

44
00:02:07,280 --> 00:02:09,038
and for implementation

45
00:02:09,038 --> 00:02:13,200
and both indentations are constant time

46
00:02:13,200 --> 00:02:14,879
as you can see

47
00:02:14,879 --> 00:02:17,920
our hassle implementation is faster than

48
00:02:17,920 --> 00:02:20,879
the avx-2 implementation of the bike

49
00:02:20,879 --> 00:02:23,840
team and in particular

50
00:02:23,840 --> 00:02:26,959
our calculation time is much faster and

51
00:02:26,959 --> 00:02:28,560
this is important because the

52
00:02:28,560 --> 00:02:30,720
calculation is the most

53
00:02:30,720 --> 00:02:34,319
is the slowest operation

54
00:02:35,519 --> 00:02:38,000
and r and foreign contention is also

55
00:02:38,000 --> 00:02:39,920
much faster than

56
00:02:39,920 --> 00:02:41,840
the portable implementation written by

57
00:02:41,840 --> 00:02:43,280
the black team

58
00:02:43,280 --> 00:02:45,200
here i have to mention that

59
00:02:45,200 --> 00:02:48,000
the portable implementation is not

60
00:02:48,000 --> 00:02:51,400
fully constantine

61
00:02:53,920 --> 00:02:58,400
now we can look at bikes specification

62
00:02:58,400 --> 00:03:00,560
here the operations

63
00:03:00,560 --> 00:03:03,840
that i highlighted in rats

64
00:03:03,840 --> 00:03:08,159
our operations in the ring are

65
00:03:08,159 --> 00:03:11,200
which is f2 x divided by x to the r

66
00:03:11,200 --> 00:03:13,839
minus one

67
00:03:15,120 --> 00:03:17,040
so you can see there are three

68
00:03:17,040 --> 00:03:18,879
multiplications here

69
00:03:18,879 --> 00:03:21,519
and although it's not

70
00:03:21,519 --> 00:03:23,140
practically important

71
00:03:23,140 --> 00:03:24,799
[Music]

72
00:03:24,799 --> 00:03:27,680
each modulation involves one low weight

73
00:03:27,680 --> 00:03:30,319
operands

74
00:03:30,799 --> 00:03:33,120
so e1 f0 and

75
00:03:33,120 --> 00:03:37,040
x1 are all low weight

76
00:03:37,040 --> 00:03:38,080
elements

77
00:03:38,080 --> 00:03:40,480
in r

78
00:03:43,519 --> 00:03:44,959
and when we

79
00:03:44,959 --> 00:03:46,560
implement

80
00:03:46,560 --> 00:03:49,120
when we implement

81
00:03:49,120 --> 00:03:52,799
h zero inverse

82
00:03:52,959 --> 00:03:56,239
using ethercity

83
00:03:56,239 --> 00:03:58,720
there are going to be more modulations

84
00:03:58,720 --> 00:04:00,799
in r so

85
00:04:00,799 --> 00:04:03,280
what i want to say is that

86
00:04:03,280 --> 00:04:05,040
there are many

87
00:04:05,040 --> 00:04:09,200
alterations in r that we have to perform

88
00:04:09,519 --> 00:04:11,280
and you might wonder that

89
00:04:11,280 --> 00:04:12,400
why

90
00:04:12,400 --> 00:04:16,639
is spike a copy scheme it doesn't look

91
00:04:16,639 --> 00:04:17,918
cold based

92
00:04:17,918 --> 00:04:19,358
well

93
00:04:19,358 --> 00:04:23,040
in fact zero as you know here is a

94
00:04:23,040 --> 00:04:25,040
syndrome

95
00:04:25,040 --> 00:04:27,919
uh which means that it's a parity check

96
00:04:27,919 --> 00:04:30,000
the product will make parity check

97
00:04:30,000 --> 00:04:31,199
matrix

98
00:04:31,199 --> 00:04:33,680
and an error vector

99
00:04:33,680 --> 00:04:37,280
and the parity check matrix is a low

100
00:04:37,280 --> 00:04:40,559
weight matrix

101
00:04:41,120 --> 00:04:43,520
and just by using the low weights

102
00:04:43,520 --> 00:04:44,720
structure

103
00:04:44,720 --> 00:04:48,320
we can already find the error positions

104
00:04:48,320 --> 00:04:50,800
uh well at least with certain

105
00:04:50,800 --> 00:04:52,960
probability

106
00:04:52,960 --> 00:04:54,560
so here's what

107
00:04:54,560 --> 00:04:58,720
you can do so you can set

108
00:04:58,720 --> 00:05:01,360
an l vector e prime to zero

109
00:05:01,360 --> 00:05:04,479
and then for each position on you count

110
00:05:04,479 --> 00:05:08,639
the number of unsatisfied paradigms

111
00:05:08,639 --> 00:05:12,320
if the number of unsatisfied parity text

112
00:05:12,320 --> 00:05:15,120
for a position i is greater than t then

113
00:05:15,120 --> 00:05:18,880
you flip e point i

114
00:05:19,520 --> 00:05:22,639
if fc prime is equal to s then you

115
00:05:22,639 --> 00:05:26,320
return e prime otherwise you go to step

116
00:05:26,320 --> 00:05:28,479
two

117
00:05:28,479 --> 00:05:30,400
this error sound is

118
00:05:30,400 --> 00:05:32,320
not the same as what is

119
00:05:32,320 --> 00:05:34,639
specified in bytes

120
00:05:34,639 --> 00:05:37,440
specification but

121
00:05:37,440 --> 00:05:39,440
essentially the decoder used by the

122
00:05:39,440 --> 00:05:42,479
victim is a variant of this single

123
00:05:42,479 --> 00:05:44,960
errors

124
00:05:47,600 --> 00:05:48,400
and

125
00:05:48,400 --> 00:05:50,639
actually

126
00:05:50,639 --> 00:05:54,000
as shown in the chest 2016 paper quick

127
00:05:54,000 --> 00:05:56,080
bits constantine's monkey covers

128
00:05:56,080 --> 00:05:58,719
photography

129
00:05:59,039 --> 00:06:01,759
the operation of counting the number of

130
00:06:01,759 --> 00:06:04,720
unsatisfied checks can be viewed as

131
00:06:04,720 --> 00:06:07,919
multiplications in another ring are z

132
00:06:07,919 --> 00:06:08,880
which is

133
00:06:08,880 --> 00:06:10,160
d y

134
00:06:10,160 --> 00:06:14,240
divided by y to the r minus one

135
00:06:16,240 --> 00:06:19,840
and operands of its multiplications in

136
00:06:19,840 --> 00:06:21,759
party

137
00:06:21,759 --> 00:06:24,800
must have coefficients

138
00:06:24,800 --> 00:06:26,639
in

139
00:06:26,639 --> 00:06:30,240
set of zero or one

140
00:06:32,240 --> 00:06:34,639
and also one of the two operands must be

141
00:06:34,639 --> 00:06:36,800
low weight

142
00:06:36,800 --> 00:06:38,240
so

143
00:06:38,240 --> 00:06:41,759
essentially the multiplications in rd

144
00:06:41,759 --> 00:06:44,479
are similar to the modulations

145
00:06:44,479 --> 00:06:46,160
in r

146
00:06:46,160 --> 00:06:48,319
they are highlighted in red in the

147
00:06:48,319 --> 00:06:51,120
previous slide

148
00:06:53,919 --> 00:06:55,280
so now we know that there are

149
00:06:55,280 --> 00:06:58,720
multiplications in rd and also r

150
00:06:58,720 --> 00:07:00,960
and we can take a look at

151
00:07:00,960 --> 00:07:02,720
how we perform the

152
00:07:02,720 --> 00:07:04,000
multiplications

153
00:07:04,000 --> 00:07:07,759
in a high level point of view

154
00:07:08,240 --> 00:07:11,759
for multiplication in rd

155
00:07:12,560 --> 00:07:15,120
if the multiplication is between g and f

156
00:07:15,120 --> 00:07:17,520
where it is the low weight

157
00:07:17,520 --> 00:07:21,199
operand then we consider g as the sum of

158
00:07:21,199 --> 00:07:24,960
zero y to the i's

159
00:07:25,120 --> 00:07:28,080
then we compute y v i

160
00:07:28,080 --> 00:07:31,120
f for each i

161
00:07:31,120 --> 00:07:32,479
and

162
00:07:32,479 --> 00:07:35,680
then we compute the sum of

163
00:07:35,680 --> 00:07:36,960
different y

164
00:07:36,960 --> 00:07:39,919
three i f's

165
00:07:40,639 --> 00:07:44,400
we know that in our implementation

166
00:07:44,400 --> 00:07:47,280
these two operations are interleaved

167
00:07:47,280 --> 00:07:49,680
but conceptually you can consider them

168
00:07:49,680 --> 00:07:53,039
as two different steps

169
00:07:55,599 --> 00:07:58,560
and how do we compute why do we add by f

170
00:07:58,560 --> 00:07:59,520
well

171
00:07:59,520 --> 00:08:02,080
due to the structure of rd this is

172
00:08:02,080 --> 00:08:05,440
essentially a circular shift on f

173
00:08:05,440 --> 00:08:06,240
by

174
00:08:06,240 --> 00:08:08,800
ips

175
00:08:10,560 --> 00:08:13,599
and follow previous papers from uh to

176
00:08:13,599 --> 00:08:16,720
perform logic coaches on f1

177
00:08:16,720 --> 00:08:18,639
we don't actually perform circulations

178
00:08:18,639 --> 00:08:19,360
we

179
00:08:19,360 --> 00:08:22,160
convert f into f prime and then perform

180
00:08:22,160 --> 00:08:25,039
logical shifts

181
00:08:25,199 --> 00:08:28,479
and here f prime is essentially a

182
00:08:28,479 --> 00:08:30,720
duplicated form

183
00:08:30,720 --> 00:08:31,680
of

184
00:08:31,680 --> 00:08:34,479
the vector f

185
00:08:35,760 --> 00:08:38,559
uh regarding multiplications in r

186
00:08:38,559 --> 00:08:40,399
what we did

187
00:08:40,399 --> 00:08:43,360
is simpler we basically do

188
00:08:43,360 --> 00:08:46,000
multiplication for normal multiplication

189
00:08:46,000 --> 00:08:51,000
and then modulo x r minus one

190
00:08:54,480 --> 00:08:57,600
so here are our optimizations

191
00:08:57,600 --> 00:09:00,480
for locations in rd

192
00:09:00,480 --> 00:09:04,640
we use the seo instruction on m4 to

193
00:09:04,640 --> 00:09:06,720
perform constant time

194
00:09:06,720 --> 00:09:09,040
lapse questions

195
00:09:09,040 --> 00:09:11,920
and on haswell we make use of matrix

196
00:09:11,920 --> 00:09:14,160
with transposition to perform constant

197
00:09:14,160 --> 00:09:17,519
time logical shifts

198
00:09:19,839 --> 00:09:24,800
and on both s1 and 4 when we want to add

199
00:09:24,800 --> 00:09:27,279
different white vis

200
00:09:27,279 --> 00:09:30,959
we use an origin described by

201
00:09:30,959 --> 00:09:34,160
boyar and parata

202
00:09:35,120 --> 00:09:38,880
uh regarding multiplications in r

203
00:09:38,880 --> 00:09:42,720
for aswell we use an aerosol proposed by

204
00:09:42,720 --> 00:09:44,959
bursting

205
00:09:44,959 --> 00:09:48,080
and on m4 we use so-called forbidden

206
00:09:48,080 --> 00:09:51,640
additive ft

207
00:09:57,760 --> 00:09:59,040
okay now

208
00:09:59,040 --> 00:10:02,240
i can talk about how we use the seo

209
00:10:02,240 --> 00:10:08,000
instruction to perform locations in rd

210
00:10:09,040 --> 00:10:13,200
the task here is to shift f prime by s

211
00:10:13,200 --> 00:10:17,279
bits where s is smaller than r

212
00:10:17,279 --> 00:10:19,920
and we consider s as the sum of s1 and

213
00:10:19,920 --> 00:10:22,160
s0 where s0

214
00:10:22,160 --> 00:10:23,200
is

215
00:10:23,200 --> 00:10:26,320
smart 32.

216
00:10:26,399 --> 00:10:29,760
to shift f prime by s1 bits we use a

217
00:10:29,760 --> 00:10:33,160
barrel shifter

218
00:10:33,279 --> 00:10:35,760
which means that we conditionally shift

219
00:10:35,760 --> 00:10:37,360
the prime line

220
00:10:37,360 --> 00:10:41,440
to the cables k max one bits and so on

221
00:10:41,440 --> 00:10:42,560
uh

222
00:10:42,560 --> 00:10:45,440
until we conditionally shift f prime by

223
00:10:45,440 --> 00:10:48,240
32 bits

224
00:10:48,720 --> 00:10:49,839
so here

225
00:10:49,839 --> 00:10:51,040
because

226
00:10:51,040 --> 00:10:52,320
each time

227
00:10:52,320 --> 00:10:53,760
when we

228
00:10:53,760 --> 00:10:56,480
compute conditional shifts the shift

229
00:10:56,480 --> 00:10:58,160
amount is always a

230
00:10:58,160 --> 00:11:00,800
multiple of 32

231
00:11:00,800 --> 00:11:03,600
so each conditional shift is simply a

232
00:11:03,600 --> 00:11:06,800
sequence of conditional moves of 32-bit

233
00:11:06,800 --> 00:11:08,959
words

234
00:11:08,959 --> 00:11:10,720
and this is

235
00:11:10,720 --> 00:11:11,570
easy to

236
00:11:11,570 --> 00:11:12,839
[Music]

237
00:11:12,839 --> 00:11:15,920
implement for example the portable

238
00:11:15,920 --> 00:11:18,240
implementation of the bike team

239
00:11:18,240 --> 00:11:22,640
use a piece of code like this

240
00:11:22,800 --> 00:11:25,600
but actually on m4 you can do better

241
00:11:25,600 --> 00:11:28,560
than this because you can just use the

242
00:11:28,560 --> 00:11:31,040
seo instruction to select from one of

243
00:11:31,040 --> 00:11:33,920
the two words

244
00:11:33,920 --> 00:11:35,600
so that you can you don't have to do

245
00:11:35,600 --> 00:11:40,040
multiple logical operations

246
00:11:42,399 --> 00:11:43,760
and if you

247
00:11:43,760 --> 00:11:45,040
just

248
00:11:45,040 --> 00:11:50,640
just use as el instruction directly

249
00:11:51,440 --> 00:11:54,160
then you will see that

250
00:11:54,160 --> 00:11:55,360
there are

251
00:11:55,360 --> 00:11:58,399
different chains of conditional moves

252
00:11:58,399 --> 00:11:59,519
and

253
00:11:59,519 --> 00:12:01,760
for each chain

254
00:12:01,760 --> 00:12:03,360
if

255
00:12:03,360 --> 00:12:08,079
the shift amount is rather large

256
00:12:08,079 --> 00:12:09,040
then

257
00:12:09,040 --> 00:12:10,260
you will be accessing

258
00:12:10,260 --> 00:12:11,920
[Music]

259
00:12:11,920 --> 00:12:15,680
32-bit words that are pretty far away

260
00:12:15,680 --> 00:12:18,399
which is not very good in terms of

261
00:12:18,399 --> 00:12:19,680
performance

262
00:12:19,680 --> 00:12:22,079
so we actually combine

263
00:12:22,079 --> 00:12:24,880
multiple chance conditional moves

264
00:12:24,880 --> 00:12:27,760
we carry out several chances like this

265
00:12:27,760 --> 00:12:29,120
in parallel

266
00:12:29,120 --> 00:12:31,200
in order to minimize the cause of memory

267
00:12:31,200 --> 00:12:33,760
operations

268
00:12:34,399 --> 00:12:37,279
and actually it's very easy to roll the

269
00:12:37,279 --> 00:12:38,399
whole loop

270
00:12:38,399 --> 00:12:39,440
but

271
00:12:39,440 --> 00:12:42,160
eventually we decided to

272
00:12:42,160 --> 00:12:44,800
slightly unroll the loop

273
00:12:44,800 --> 00:12:49,040
in order to balance speed and toe size

274
00:12:49,040 --> 00:12:50,399
and finally

275
00:12:50,399 --> 00:12:53,920
when you want to shift the vector by s0

276
00:12:53,920 --> 00:12:55,839
bits

277
00:12:55,839 --> 00:12:58,160
this is very easy to do you can just do

278
00:12:58,160 --> 00:13:01,360
it by using logical instructions

279
00:13:01,360 --> 00:13:04,880
but a better

280
00:13:05,040 --> 00:13:07,440
way to do this is to use multiplication

281
00:13:07,440 --> 00:13:11,519
and calculate instructions such as url

282
00:13:11,519 --> 00:13:13,839
we don't talk about this here but this

283
00:13:13,839 --> 00:13:17,279
is written in our paper

284
00:13:18,880 --> 00:13:23,519
okay now consider uh haswells um

285
00:13:23,519 --> 00:13:25,839
our approach for passwords a bit

286
00:13:25,839 --> 00:13:27,120
different

287
00:13:27,120 --> 00:13:30,639
we still consider the shift amount at s

288
00:13:30,639 --> 00:13:33,279
as the sum of s1 and s0

289
00:13:33,279 --> 00:13:36,639
uh and that's where s0 is

290
00:13:36,639 --> 00:13:37,600
s

291
00:13:37,600 --> 00:13:41,680
mod much low sum b

292
00:13:43,440 --> 00:13:46,240
and now we consider f prime as a matrix

293
00:13:46,240 --> 00:13:49,480
like this

294
00:13:52,079 --> 00:13:55,760
now shifting and frying by zero bits

295
00:13:55,760 --> 00:13:57,839
is

296
00:13:57,839 --> 00:13:59,680
approximately

297
00:13:59,680 --> 00:14:02,320
the same as shifting the rows oh you

298
00:14:02,320 --> 00:14:04,880
still have to combine the result of the

299
00:14:04,880 --> 00:14:05,760
shifts

300
00:14:05,760 --> 00:14:08,639
that's basically what you do is to shift

301
00:14:08,639 --> 00:14:09,440
the

302
00:14:09,440 --> 00:14:11,839
rows

303
00:14:12,000 --> 00:14:14,959
and in order to be able to shift the

304
00:14:14,959 --> 00:14:18,079
roses it's better to make

305
00:14:18,079 --> 00:14:21,279
n0 row major

306
00:14:23,519 --> 00:14:25,839
and our main observation is that

307
00:14:25,839 --> 00:14:29,120
when you want to shift f prime by s1

308
00:14:29,120 --> 00:14:32,880
bits instead of doing

309
00:14:32,880 --> 00:14:34,880
barrel shifter

310
00:14:34,880 --> 00:14:37,440
you can actually consider the operation

311
00:14:37,440 --> 00:14:41,040
as shifting columns

312
00:14:42,880 --> 00:14:45,040
okay

313
00:14:45,040 --> 00:14:47,600
so in order to be able to shoot

314
00:14:47,600 --> 00:14:51,440
by s1 bits we store f prime in a row

315
00:14:51,440 --> 00:14:54,079
major way

316
00:14:54,399 --> 00:14:56,639
and then for each s we ship the columns

317
00:14:56,639 --> 00:14:59,760
by s1 bits transpose the matrix and then

318
00:14:59,760 --> 00:15:04,240
we shift a prime byte as zero bits

319
00:15:05,360 --> 00:15:07,760
and here multiplication a

320
00:15:07,760 --> 00:15:11,040
matrix transposition is pretty fast

321
00:15:11,040 --> 00:15:14,000
you can do like partition the matrix

322
00:15:14,000 --> 00:15:16,959
into four pieces and recursively swap

323
00:15:16,959 --> 00:15:18,959
the upper right part and the bottom left

324
00:15:18,959 --> 00:15:20,240
part

325
00:15:20,240 --> 00:15:22,880
and all this can be done

326
00:15:22,880 --> 00:15:27,839
conveniently using logical operations

327
00:15:28,399 --> 00:15:29,519
for our

328
00:15:29,519 --> 00:15:34,639
hassle implementation we set b to 256

329
00:15:34,880 --> 00:15:35,759
and

330
00:15:35,759 --> 00:15:38,399
we also tried the same approach on m4

331
00:15:38,399 --> 00:15:40,320
but unfortunately it doesn't seem to

332
00:15:40,320 --> 00:15:41,920
work very well on

333
00:15:41,920 --> 00:15:43,199
f4

334
00:15:43,199 --> 00:15:46,240
and we guess this is because

335
00:15:46,240 --> 00:15:47,120
it's

336
00:15:47,120 --> 00:15:48,399
not very

337
00:15:48,399 --> 00:15:52,399
easy to shift by a large

338
00:15:53,600 --> 00:15:58,000
number of bits um and four

339
00:16:02,240 --> 00:16:04,560
okay now we know how to

340
00:16:04,560 --> 00:16:06,839
compute

341
00:16:06,839 --> 00:16:10,399
y3if for any i

342
00:16:10,399 --> 00:16:12,560
and now the task is to complete the

343
00:16:12,560 --> 00:16:16,279
sound of y3ifs

344
00:16:17,839 --> 00:16:19,759
and if you think about this

345
00:16:19,759 --> 00:16:21,120
the task

346
00:16:21,120 --> 00:16:24,560
here is essentially the same as counting

347
00:16:24,560 --> 00:16:26,399
the number of ones

348
00:16:26,399 --> 00:16:28,800
in all vectors

349
00:16:28,800 --> 00:16:31,120
of length

350
00:16:31,120 --> 00:16:34,079
the number of eyes

351
00:16:35,440 --> 00:16:37,839
and in the quick bits paper

352
00:16:37,839 --> 00:16:40,480
the author proposed to use space slicing

353
00:16:40,480 --> 00:16:42,720
to do this

354
00:16:42,720 --> 00:16:45,120
and then what you do you do is

355
00:16:45,120 --> 00:16:46,480
essentially

356
00:16:46,480 --> 00:16:48,720
mirroring the hardware

357
00:16:48,720 --> 00:16:50,480
implementation

358
00:16:50,480 --> 00:16:51,839
that

359
00:16:51,839 --> 00:16:52,959
performs

360
00:16:52,959 --> 00:16:55,279
hand-wave computation

361
00:16:55,279 --> 00:16:58,560
for example you can prepare several bits

362
00:16:58,560 --> 00:17:01,360
as a counter

363
00:17:01,360 --> 00:17:02,880
and then

364
00:17:02,880 --> 00:17:05,039
you just keep adding one bit into the

365
00:17:05,039 --> 00:17:07,119
counter until you

366
00:17:07,119 --> 00:17:09,439
finish all the bits

367
00:17:09,439 --> 00:17:12,079
and in this way you will be using only

368
00:17:12,079 --> 00:17:14,879
half adders

369
00:17:15,199 --> 00:17:18,400
but actually it's much more efficient to

370
00:17:18,400 --> 00:17:21,039
make use of four others

371
00:17:21,039 --> 00:17:22,319
so

372
00:17:22,319 --> 00:17:24,400
boria and paratha

373
00:17:24,400 --> 00:17:25,599
have shown

374
00:17:25,599 --> 00:17:28,319
this in their paper the exact

375
00:17:28,319 --> 00:17:30,559
multiplicative complexity of the

376
00:17:30,559 --> 00:17:33,840
heavyweight function

377
00:17:34,720 --> 00:17:36,559
the idea is quite simple

378
00:17:36,559 --> 00:17:39,200
basically you just perform additions of

379
00:17:39,200 --> 00:17:42,240
operands with to see k minus one

380
00:17:42,240 --> 00:17:44,480
through k minus one and one bits

381
00:17:44,480 --> 00:17:47,840
whenever possible

382
00:17:48,799 --> 00:17:50,799
and just by doing this

383
00:17:50,799 --> 00:17:52,960
we can already save lots of logical

384
00:17:52,960 --> 00:17:54,160
operations

385
00:17:54,160 --> 00:17:57,520
as shown in this table

386
00:17:57,520 --> 00:18:00,060
and one thing i should mention is that

387
00:18:00,060 --> 00:18:01,840
[Music]

388
00:18:01,840 --> 00:18:04,320
the drawback of using this method is

389
00:18:04,320 --> 00:18:05,760
that

390
00:18:05,760 --> 00:18:07,760
it uses more memory

391
00:18:07,760 --> 00:18:12,919
so it's more like a memory time tradeoff

392
00:18:16,720 --> 00:18:19,360
uh here is a picture

393
00:18:19,360 --> 00:18:20,880
illustrates

394
00:18:20,880 --> 00:18:22,720
the origin

395
00:18:22,720 --> 00:18:24,559
for example if you want to

396
00:18:24,559 --> 00:18:26,840
add 15

397
00:18:26,840 --> 00:18:29,600
bits i want to compute the hemingway in

398
00:18:29,600 --> 00:18:31,760
this

399
00:18:31,760 --> 00:18:33,200
length switching

400
00:18:33,200 --> 00:18:34,880
vector

401
00:18:34,880 --> 00:18:37,520
and what you you will do is to

402
00:18:37,520 --> 00:18:40,960
add bits one two three four by six then

403
00:18:40,960 --> 00:18:43,520
i 19 11 12 13

404
00:18:43,520 --> 00:18:46,639
using four others

405
00:18:48,160 --> 00:18:51,840
and then you add a bits one to seven

406
00:18:51,840 --> 00:18:52,270
using

407
00:18:52,270 --> 00:18:54,320
[Music]

408
00:18:54,320 --> 00:18:55,280
two

409
00:18:55,280 --> 00:18:56,480
four others

410
00:18:56,480 --> 00:18:59,520
you add bits eight to fourteen using two

411
00:18:59,520 --> 00:19:01,280
four others

412
00:19:01,280 --> 00:19:02,960
and then you add uh

413
00:19:02,960 --> 00:19:06,480
bits one to fifteen using three for

414
00:19:06,480 --> 00:19:09,480
others

415
00:19:12,720 --> 00:19:15,360
okay now we can talk about uh how we

416
00:19:15,360 --> 00:19:16,480
perform

417
00:19:16,480 --> 00:19:20,320
applications in the ring r

418
00:19:20,320 --> 00:19:24,400
and um as well um

419
00:19:24,400 --> 00:19:26,240
one simple thing you can do is to use

420
00:19:26,240 --> 00:19:28,799
cartoon bar

421
00:19:28,799 --> 00:19:31,520
so in cartoon bar we write each

422
00:19:31,520 --> 00:19:36,480
polynomial f as f zero plus f one d

423
00:19:36,480 --> 00:19:38,720
and we evaluate

424
00:19:38,720 --> 00:19:40,160
f at

425
00:19:40,160 --> 00:19:43,360
0 1 and infinity

426
00:19:43,360 --> 00:19:46,960
and then we do this also for g

427
00:19:46,960 --> 00:19:49,360
and we do

428
00:19:49,360 --> 00:19:50,160
a

429
00:19:50,160 --> 00:19:53,120
point wise multiplication

430
00:19:53,120 --> 00:19:55,039
and then we do some interpolation in

431
00:19:55,039 --> 00:19:58,160
order to get product

432
00:20:01,120 --> 00:20:02,799
and the back thing sets

433
00:20:02,799 --> 00:20:04,159
z to

434
00:20:04,159 --> 00:20:08,799
x to the k where k is a power of 2

435
00:20:08,799 --> 00:20:11,520
and for polynomials of length 64

436
00:20:11,520 --> 00:20:15,360
they just use pc or market eq

437
00:20:17,200 --> 00:20:18,480
and

438
00:20:18,480 --> 00:20:20,720
actually for each of

439
00:20:20,720 --> 00:20:23,039
bytes parameter sets

440
00:20:23,039 --> 00:20:25,760
r is always approximately three times

441
00:20:25,760 --> 00:20:30,440
the power of two for each parentheses

442
00:20:34,799 --> 00:20:35,760
so

443
00:20:35,760 --> 00:20:37,760
as you can see

444
00:20:37,760 --> 00:20:40,400
the problem here is that f 0 f 1 and f

445
00:20:40,400 --> 00:20:42,000
infinity

446
00:20:42,000 --> 00:20:44,480
are not balanced in

447
00:20:44,480 --> 00:20:47,440
in terms of length

448
00:20:47,520 --> 00:20:50,400
and we also wonder um maybe

449
00:20:50,400 --> 00:20:53,039
a lower complexity everything can

450
00:20:53,039 --> 00:20:54,640
perform better

451
00:20:54,640 --> 00:20:56,880
because the length of the polynomial are

452
00:20:56,880 --> 00:21:00,360
not so short

453
00:21:03,600 --> 00:21:06,480
so we tried another erosion

454
00:21:06,480 --> 00:21:07,760
proposed by

455
00:21:07,760 --> 00:21:09,039
bernstein

456
00:21:09,039 --> 00:21:13,520
in his labor that's binary elders

457
00:21:13,760 --> 00:21:17,440
the origin has a lower complexity

458
00:21:17,440 --> 00:21:19,679
so

459
00:21:19,760 --> 00:21:21,440
for every

460
00:21:21,440 --> 00:21:23,840
polynomial

461
00:21:23,840 --> 00:21:26,000
the origin writes

462
00:21:26,000 --> 00:21:29,679
f s f zero plus f one d plus f two d

463
00:21:29,679 --> 00:21:30,640
square

464
00:21:30,640 --> 00:21:32,720
and then you will evaluate the pointer

465
00:21:32,720 --> 00:21:37,840
at zero one x x plus one and infinity

466
00:21:37,840 --> 00:21:39,600
and then we do some point wise

467
00:21:39,600 --> 00:21:44,120
multiplication and some interpolation

468
00:21:46,080 --> 00:21:47,360
so

469
00:21:47,360 --> 00:21:49,440
the incantation is quite straightforward

470
00:21:49,440 --> 00:21:51,760
we implement the pressing solution for

471
00:21:51,760 --> 00:21:54,960
the top level recursion and then for the

472
00:21:54,960 --> 00:21:56,320
button levels

473
00:21:56,320 --> 00:22:00,000
we just use cartoba

474
00:22:03,200 --> 00:22:05,679
and one thing that's worth mentioning is

475
00:22:05,679 --> 00:22:08,000
that

476
00:22:08,080 --> 00:22:11,600
we have to divide it by

477
00:22:11,600 --> 00:22:14,880
dividing numerals by x squared plus x

478
00:22:14,880 --> 00:22:17,679
and this operation

479
00:22:17,679 --> 00:22:20,880
if you do it nicely you can compute each

480
00:22:20,880 --> 00:22:22,640
coefficient

481
00:22:22,640 --> 00:22:25,440
one by one this is very small

482
00:22:25,440 --> 00:22:27,120
a much faster

483
00:22:27,120 --> 00:22:28,880
approach is to

484
00:22:28,880 --> 00:22:31,679
just add the top half of the program

485
00:22:31,679 --> 00:22:33,280
to the bottom half

486
00:22:33,280 --> 00:22:36,918
you do this recursively

487
00:22:42,000 --> 00:22:43,200
and finally

488
00:22:43,200 --> 00:22:45,360
we can talk about how we do modulations

489
00:22:45,360 --> 00:22:48,960
in r on n4

490
00:22:48,960 --> 00:22:50,559
here

491
00:22:50,559 --> 00:22:53,280
the basic idea is that we want to use

492
00:22:53,280 --> 00:22:55,360
additive fts to do permanent

493
00:22:55,360 --> 00:22:58,000
modifications

494
00:22:59,039 --> 00:23:01,520
and the operands

495
00:23:01,520 --> 00:23:02,480
here

496
00:23:02,480 --> 00:23:03,840
are

497
00:23:03,840 --> 00:23:05,520
binary

498
00:23:05,520 --> 00:23:09,840
are polynomials of binary coefficients

499
00:23:10,320 --> 00:23:11,679
um

500
00:23:11,679 --> 00:23:15,760
so in additive aptitudes you write

501
00:23:15,760 --> 00:23:17,760
polynomials f

502
00:23:17,760 --> 00:23:19,679
x f of x

503
00:23:19,679 --> 00:23:23,039
as f 0 x squared plus x plus

504
00:23:23,039 --> 00:23:24,799
x f 1

505
00:23:24,799 --> 00:23:28,320
of n plus x

506
00:23:28,320 --> 00:23:30,559
and then by doing this

507
00:23:30,559 --> 00:23:32,240
you will see that

508
00:23:32,240 --> 00:23:33,520
we have a

509
00:23:33,520 --> 00:23:36,159
very big overlap between the computation

510
00:23:36,159 --> 00:23:40,320
of f alpha and of f of alpha plus one

511
00:23:40,320 --> 00:23:44,399
and this is how the recursion works

512
00:23:48,159 --> 00:23:51,159
and

513
00:23:52,720 --> 00:23:55,520
if you do this nicely then the resulting

514
00:23:55,520 --> 00:23:57,600
errors and will be

515
00:23:57,600 --> 00:23:59,600
not so efficient

516
00:23:59,600 --> 00:24:00,820
so

517
00:24:00,820 --> 00:24:02,880
[Music]

518
00:24:02,880 --> 00:24:06,159
there's an a special episode called from

519
00:24:06,159 --> 00:24:08,240
venice additivity

520
00:24:08,240 --> 00:24:10,720
which tells you that

521
00:24:10,720 --> 00:24:13,039
you can reduce the number of erosion

522
00:24:13,039 --> 00:24:14,000
points

523
00:24:14,000 --> 00:24:15,039
by

524
00:24:15,039 --> 00:24:16,720
making use of the

525
00:24:16,720 --> 00:24:18,400
forbidden map

526
00:24:18,400 --> 00:24:20,640
the concept is quite simple

527
00:24:20,640 --> 00:24:22,320
because

528
00:24:22,320 --> 00:24:26,559
we're dealing with binary polynomials

529
00:24:26,559 --> 00:24:28,159
so we have

530
00:24:28,159 --> 00:24:31,679
f of alpha square

531
00:24:31,679 --> 00:24:33,760
must be equal to

532
00:24:33,760 --> 00:24:37,919
the square of f of alpha for any alpha

533
00:24:37,919 --> 00:24:41,279
in f to the n

534
00:24:45,120 --> 00:24:46,880
and we are now the first one to

535
00:24:46,880 --> 00:24:50,400
implement for granted additive t

536
00:24:50,400 --> 00:24:53,120
but previous implementations

537
00:24:53,120 --> 00:24:55,520
just use pcr monkey dequeue

538
00:24:55,520 --> 00:24:58,159
while on m4 you don't have such

539
00:24:58,159 --> 00:25:01,039
convenient instruction for

540
00:25:01,039 --> 00:25:03,440
carriers on patients

541
00:25:03,440 --> 00:25:07,840
so we have to use visualizing

542
00:25:09,840 --> 00:25:12,480
and for

543
00:25:12,480 --> 00:25:14,799
the representation of the field

544
00:25:14,799 --> 00:25:15,210
um

545
00:25:15,210 --> 00:25:17,279
[Music]

546
00:25:17,279 --> 00:25:18,240
we

547
00:25:18,240 --> 00:25:23,039
the biggest field we have to use is f232

548
00:25:23,039 --> 00:25:27,200
and this is built upon a sequence of

549
00:25:27,200 --> 00:25:28,960
smaller fields

550
00:25:28,960 --> 00:25:31,360
we build it from f2 and then

551
00:25:31,360 --> 00:25:32,400
f

552
00:25:32,400 --> 00:25:36,720
4 f 16 and so on

553
00:25:40,480 --> 00:25:44,480
and its multiplication in fa of t

554
00:25:44,480 --> 00:25:47,760
is of the form alpha times beta where

555
00:25:47,760 --> 00:25:49,840
beta is

556
00:25:49,840 --> 00:25:52,799
v plus w

557
00:25:52,960 --> 00:25:56,880
here w is always a sufficient element

558
00:25:56,880 --> 00:26:01,120
and b is always a constant

559
00:26:04,400 --> 00:26:06,400
in order to optimize

560
00:26:06,400 --> 00:26:08,000
this migration

561
00:26:08,000 --> 00:26:12,000
we actually compute alpha times w

562
00:26:12,000 --> 00:26:15,120
using cartoon and then we compute alpha

563
00:26:15,120 --> 00:26:16,640
times v

564
00:26:16,640 --> 00:26:21,440
using some sort of circuit generation

565
00:26:22,159 --> 00:26:24,640
because well multiplication by these

566
00:26:24,640 --> 00:26:28,960
essentially an f2 linear map

567
00:26:28,960 --> 00:26:31,919
and finally we add the results together

568
00:26:31,919 --> 00:26:35,279
to obtain a photonized data

569
00:26:35,279 --> 00:26:38,080
and we found that uh

570
00:26:38,080 --> 00:26:40,400
doing the two smaller

571
00:26:40,400 --> 00:26:42,960
locations

572
00:26:42,960 --> 00:26:45,200
and then add the result together it's

573
00:26:45,200 --> 00:26:46,960
much faster than

574
00:26:46,960 --> 00:26:51,559
doing the multiplication directly

575
00:26:58,559 --> 00:27:00,880
and finally um

576
00:27:00,880 --> 00:27:02,799
we found that

577
00:27:02,799 --> 00:27:05,039
brands thinks everything still performs

578
00:27:05,039 --> 00:27:08,159
better and as well we actually try the

579
00:27:08,159 --> 00:27:09,360
same reason

580
00:27:09,360 --> 00:27:11,919
as well but

581
00:27:11,919 --> 00:27:14,720
it seems that bursting solution is still

582
00:27:14,720 --> 00:27:18,120
a bit better

583
00:27:20,720 --> 00:27:23,200
finally

584
00:27:23,200 --> 00:27:27,120
you can find our source code online

585
00:27:29,600 --> 00:27:31,840
our hassle implementation is

586
00:27:31,840 --> 00:27:34,080
already available in cup

587
00:27:34,080 --> 00:27:36,000
our employment contention is available

588
00:27:36,000 --> 00:27:38,480
in pickling 4

589
00:27:38,480 --> 00:27:39,440
and

590
00:27:39,440 --> 00:27:42,399
both invitations are available in the

591
00:27:42,399 --> 00:27:45,520
artix and artifact archives

592
00:27:45,520 --> 00:27:47,760
so that's all my talk thank you for

593
00:27:47,760 --> 00:27:50,760
listening

