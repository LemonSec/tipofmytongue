1
00:00:00,830 --> 00:00:01,920
[Music]

2
00:00:01,920 --> 00:00:02,960
hello

3
00:00:02,960 --> 00:00:04,640
uh in this session

4
00:00:04,640 --> 00:00:06,480
i will talk about fault injection as

5
00:00:06,480 --> 00:00:08,720
ostilos as an oscilloscope fault

6
00:00:08,720 --> 00:00:10,639
correlation analysis

7
00:00:10,639 --> 00:00:12,960
this is work done by albert sprague

8
00:00:12,960 --> 00:00:16,239
alyssa melbourne and me lukasz milevsky

9
00:00:16,239 --> 00:00:18,800
this talk concerns both fault injection

10
00:00:18,800 --> 00:00:20,800
and side channel analysis

11
00:00:20,800 --> 00:00:23,279
on the left side of this

12
00:00:23,279 --> 00:00:26,560
title slide we can see an osteoscope a

13
00:00:26,560 --> 00:00:28,240
tool commonly useful faulty injection

14
00:00:28,240 --> 00:00:31,359
here we see that it collects some

15
00:00:31,359 --> 00:00:33,120
side channel traces

16
00:00:33,120 --> 00:00:35,680
on the other hand we have our voltage

17
00:00:35,680 --> 00:00:37,200
glitching device

18
00:00:37,200 --> 00:00:40,480
that we will effectively use to produce

19
00:00:40,480 --> 00:00:42,840
traces that look like side channel

20
00:00:42,840 --> 00:00:45,440
traces and actually

21
00:00:45,440 --> 00:00:47,360
these traces here this is not power

22
00:00:47,360 --> 00:00:49,600
consumption this is actually

23
00:00:49,600 --> 00:00:52,079
a trace constructed using fault

24
00:00:52,079 --> 00:00:54,559
injection

25
00:00:57,039 --> 00:00:58,640
let me give an outline of our

26
00:00:58,640 --> 00:01:00,480
presentation first

27
00:01:00,480 --> 00:01:02,399
uh at the beginning i will show the

28
00:01:02,399 --> 00:01:04,239
problem statement so how such an

29
00:01:04,239 --> 00:01:07,119
analysis and fault injection coexist and

30
00:01:07,119 --> 00:01:09,600
how possibly we can use such analysis

31
00:01:09,600 --> 00:01:10,799
techniques to

32
00:01:10,799 --> 00:01:13,360
generate new methods for fault injection

33
00:01:13,360 --> 00:01:15,439
then i will present our

34
00:01:15,439 --> 00:01:18,240
main technique

35
00:01:18,240 --> 00:01:20,320
so i will show how we are constructing

36
00:01:20,320 --> 00:01:22,000
traces

37
00:01:22,000 --> 00:01:24,640
like side channel traces from folds and

38
00:01:24,640 --> 00:01:26,880
then how we applied

39
00:01:26,880 --> 00:01:29,119
standard side channel techniques this

40
00:01:29,119 --> 00:01:31,439
way we construct simple fault analysis

41
00:01:31,439 --> 00:01:34,159
called sfa and correlation for at fault

42
00:01:34,159 --> 00:01:36,400
analysis cfa

43
00:01:36,400 --> 00:01:38,840
these are the main results of the paper

44
00:01:38,840 --> 00:01:40,479
additionally

45
00:01:40,479 --> 00:01:42,799
in the paper we consider also collision

46
00:01:42,799 --> 00:01:45,280
attacks and linear regression analysis

47
00:01:45,280 --> 00:01:47,759
however in this um

48
00:01:47,759 --> 00:01:48,880
in this

49
00:01:48,880 --> 00:01:50,159
in this presentation due to time

50
00:01:50,159 --> 00:01:52,320
constraints we will omit it

51
00:01:52,320 --> 00:01:53,759
subsequently i will talk about our

52
00:01:53,759 --> 00:01:55,600
experimental setup and results from

53
00:01:55,600 --> 00:01:58,000
practical experiments

54
00:01:58,000 --> 00:01:59,600
um

55
00:01:59,600 --> 00:02:02,159
next i will present i will compare our

56
00:02:02,159 --> 00:02:04,640
results our techniques to other various

57
00:02:04,640 --> 00:02:06,799
fault injection attacks presented in the

58
00:02:06,799 --> 00:02:10,000
past so to related work

59
00:02:10,000 --> 00:02:11,440
and finally i will conclude the

60
00:02:11,440 --> 00:02:13,040
presentation

61
00:02:13,040 --> 00:02:15,200
the main message to remember from this

62
00:02:15,200 --> 00:02:17,280
presentation we show how to apply

63
00:02:17,280 --> 00:02:19,120
existing side channel attacks in a

64
00:02:19,120 --> 00:02:21,280
purely fault injection setting

65
00:02:21,280 --> 00:02:22,560
by translating

66
00:02:22,560 --> 00:02:24,239
f fault injection results into

67
00:02:24,239 --> 00:02:26,879
probability traces

68
00:02:26,879 --> 00:02:29,840
which are analog to standard power or

69
00:02:29,840 --> 00:02:31,760
side channel traces

70
00:02:31,760 --> 00:02:34,000
for for the details and

71
00:02:34,000 --> 00:02:35,599
this transmission is quite brief so for

72
00:02:35,599 --> 00:02:39,599
the details i refer the listeners to the

73
00:02:39,599 --> 00:02:42,720
to the to the article

74
00:02:44,640 --> 00:02:46,000
there are two

75
00:02:46,000 --> 00:02:47,599
kinds of side channels passive and

76
00:02:47,599 --> 00:02:48,879
active

77
00:02:48,879 --> 00:02:51,120
passive case is if we essentially is

78
00:02:51,120 --> 00:02:53,040
drop what the device does

79
00:02:53,040 --> 00:02:55,599
it could be done via

80
00:02:55,599 --> 00:02:57,680
either power consumption electromagnetic

81
00:02:57,680 --> 00:03:00,879
emanation time

82
00:03:01,200 --> 00:03:03,040
temperature light there are multiple

83
00:03:03,040 --> 00:03:06,000
ways but the main thing is the device

84
00:03:06,000 --> 00:03:07,680
behavior because

85
00:03:07,680 --> 00:03:09,760
it stays unaltered

86
00:03:09,760 --> 00:03:12,080
so for example we have device performing

87
00:03:12,080 --> 00:03:14,640
aes we measure power consumption during

88
00:03:14,640 --> 00:03:17,040
these as executions

89
00:03:17,040 --> 00:03:18,879
that's all that's that's the side

90
00:03:18,879 --> 00:03:21,120
channel now the other case that we see

91
00:03:21,120 --> 00:03:24,239
on the right this is fault injection in

92
00:03:24,239 --> 00:03:26,159
this case it's similar in the sense that

93
00:03:26,159 --> 00:03:28,959
we again um access the power line of the

94
00:03:28,959 --> 00:03:31,360
device but then we inject the glitch so

95
00:03:31,360 --> 00:03:33,040
for example

96
00:03:33,040 --> 00:03:34,879
a deep in the power consumption a very

97
00:03:34,879 --> 00:03:38,159
precise moment in time by that we alter

98
00:03:38,159 --> 00:03:40,720
the behavior of the device it could be

99
00:03:40,720 --> 00:03:43,280
done using power electromagnetic fault

100
00:03:43,280 --> 00:03:47,840
injection or even lasers

101
00:03:47,840 --> 00:03:49,200
the

102
00:03:49,200 --> 00:03:52,080
the passive case and the the attacks in

103
00:03:52,080 --> 00:03:54,799
the passive situation are referred as

104
00:03:54,799 --> 00:03:56,879
side channel analysis and in the active

105
00:03:56,879 --> 00:03:59,120
case they are referred as fault

106
00:03:59,120 --> 00:04:01,599
injection

107
00:04:01,599 --> 00:04:03,439
what are the similarities and slight

108
00:04:03,439 --> 00:04:05,280
differences between these attacks in

109
00:04:05,280 --> 00:04:08,319
general in such an analysis we have

110
00:04:08,319 --> 00:04:09,280
like

111
00:04:09,280 --> 00:04:12,080
we have many presented attacks

112
00:04:12,080 --> 00:04:14,319
that are quite often generic they can

113
00:04:14,319 --> 00:04:16,478
work for various algorithms some

114
00:04:16,478 --> 00:04:18,079
standard techniques

115
00:04:18,079 --> 00:04:20,399
in case of

116
00:04:20,399 --> 00:04:22,160
fault injection there are less

117
00:04:22,160 --> 00:04:24,400
publications and often the attack are

118
00:04:24,400 --> 00:04:26,800
tailored to either a very specific

119
00:04:26,800 --> 00:04:28,880
cipher very specific case or there are

120
00:04:28,880 --> 00:04:29,600
some

121
00:04:29,600 --> 00:04:31,680
strong assumptions being made about what

122
00:04:31,680 --> 00:04:35,120
the attacker can do or not

123
00:04:35,440 --> 00:04:37,759
now um since there are much more attacks

124
00:04:37,759 --> 00:04:40,080
in this situation our research question

125
00:04:40,080 --> 00:04:41,680
here is can we apply side channel

126
00:04:41,680 --> 00:04:42,800
attacks

127
00:04:42,800 --> 00:04:46,000
in the purely fault injection setting

128
00:04:46,000 --> 00:04:49,440
and by that obtaining many possibly many

129
00:04:49,440 --> 00:04:51,120
attacks this is the question that is

130
00:04:51,120 --> 00:04:54,840
answered in this presentation

131
00:04:56,240 --> 00:04:58,160
let us have first look how a typical

132
00:04:58,160 --> 00:05:00,320
attack both fault injection and sca look

133
00:05:00,320 --> 00:05:02,240
like first of course we need to build

134
00:05:02,240 --> 00:05:04,240
setup that's the standard part then we

135
00:05:04,240 --> 00:05:06,960
need to perform a characterization

136
00:05:06,960 --> 00:05:09,199
what does it matter no

137
00:05:09,199 --> 00:05:10,479
what does it mean

138
00:05:10,479 --> 00:05:12,800
it means that uh for example if you want

139
00:05:12,800 --> 00:05:15,039
to do a search and analysis on es we

140
00:05:15,039 --> 00:05:16,880
probably will attack a first round of

141
00:05:16,880 --> 00:05:19,360
aes we don't want to attack all

142
00:05:19,360 --> 00:05:21,840
10 rounds of aes at once this will take

143
00:05:21,840 --> 00:05:24,080
too much time first round or even part

144
00:05:24,080 --> 00:05:25,759
of first off is enough

145
00:05:25,759 --> 00:05:26,960
there are many

146
00:05:26,960 --> 00:05:28,720
ways to do it one is to look at some

147
00:05:28,720 --> 00:05:31,440
characterization traces

148
00:05:31,440 --> 00:05:33,360
and the main message here is that we

149
00:05:33,360 --> 00:05:35,440
want to concentrate on

150
00:05:35,440 --> 00:05:37,759
non-profiled approach so we are assuming

151
00:05:37,759 --> 00:05:40,080
that we just have a device we maybe look

152
00:05:40,080 --> 00:05:42,960
at the traces but we don't have a

153
00:05:42,960 --> 00:05:45,039
separate device on which we control the

154
00:05:45,039 --> 00:05:47,280
key and we can do some rampard

155
00:05:47,280 --> 00:05:48,639
statistics now we just look at the

156
00:05:48,639 --> 00:05:49,840
simply

157
00:05:49,840 --> 00:05:51,759
and simply add

158
00:05:51,759 --> 00:05:54,160
at the how how the prices look and then

159
00:05:54,160 --> 00:05:55,840
we perform our attack we don't want to

160
00:05:55,840 --> 00:05:57,120
have this uh

161
00:05:57,120 --> 00:05:59,199
stronger power of profile case because

162
00:05:59,199 --> 00:06:03,360
it's in our in our it's less

163
00:06:03,360 --> 00:06:05,280
it's it's slightly

164
00:06:05,280 --> 00:06:07,520
realistic

165
00:06:07,520 --> 00:06:09,440
then the second step of the attack is

166
00:06:09,440 --> 00:06:11,520
collecting data

167
00:06:11,520 --> 00:06:13,520
collecting data in case of side channel

168
00:06:13,520 --> 00:06:15,360
we simply an attacker simply would

169
00:06:15,360 --> 00:06:17,280
collect

170
00:06:17,280 --> 00:06:19,759
power measurements using

171
00:06:19,759 --> 00:06:21,199
passive probes that could be also

172
00:06:21,199 --> 00:06:24,240
electromagnetic combinations etcetera

173
00:06:24,240 --> 00:06:26,479
in case of glitching

174
00:06:26,479 --> 00:06:28,880
an attacker would use a vc glitch or an

175
00:06:28,880 --> 00:06:30,800
electromagnetic fall detection glitcher

176
00:06:30,800 --> 00:06:33,199
or even laser to perform fault injection

177
00:06:33,199 --> 00:06:34,639
and collect

178
00:06:34,639 --> 00:06:37,919
for example faulty safer text from aes

179
00:06:37,919 --> 00:06:40,479
then after the data are collected

180
00:06:40,479 --> 00:06:42,160
the attacker in case of such analysis

181
00:06:42,160 --> 00:06:44,000
can run correlation power analysis or

182
00:06:44,000 --> 00:06:45,840
simple power analysis

183
00:06:45,840 --> 00:06:47,840
on the side channel traces that were

184
00:06:47,840 --> 00:06:50,479
connected so these are some um

185
00:06:50,479 --> 00:06:53,440
these are some uh techniques for

186
00:06:53,440 --> 00:06:55,440
some statistical techniques to recover

187
00:06:55,440 --> 00:06:56,319
there

188
00:06:56,319 --> 00:06:58,080
that the key

189
00:06:58,080 --> 00:07:00,080
and the in case of fault injection and

190
00:07:00,080 --> 00:07:02,240
attack differential fault analysis on

191
00:07:02,240 --> 00:07:05,199
aes to recover the security based on

192
00:07:05,199 --> 00:07:07,039
faulty ciphertext that were collected

193
00:07:07,039 --> 00:07:09,199
during the previous step

194
00:07:09,199 --> 00:07:11,199
what are the challenges

195
00:07:11,199 --> 00:07:13,120
of a classical fault injection attack

196
00:07:13,120 --> 00:07:14,800
first of all jitter this is quite

197
00:07:14,800 --> 00:07:16,639
practical but

198
00:07:16,639 --> 00:07:18,560
very often in practice we don't maybe

199
00:07:18,560 --> 00:07:20,080
have a perfect trigger for our photo

200
00:07:20,080 --> 00:07:21,520
injection attack

201
00:07:21,520 --> 00:07:23,280
or simply the device the clock of the

202
00:07:23,280 --> 00:07:27,199
device jitter so we don't always put the

203
00:07:27,199 --> 00:07:30,319
we don't always

204
00:07:30,319 --> 00:07:32,319
and we don't always perform fault

205
00:07:32,319 --> 00:07:34,479
injection exactly at the same time that

206
00:07:34,479 --> 00:07:36,080
we exactly at the time that we want to

207
00:07:36,080 --> 00:07:38,639
perform it

208
00:07:38,720 --> 00:07:41,360
there is randomness hence there is noise

209
00:07:41,360 --> 00:07:42,880
this is uh

210
00:07:42,880 --> 00:07:44,800
we need to overcome that problem the

211
00:07:44,800 --> 00:07:46,879
other problem is no access to ciphertex

212
00:07:46,879 --> 00:07:48,879
so sometimes our device performing ks

213
00:07:48,879 --> 00:07:52,400
maybe will not return at all ciphertext

214
00:07:52,400 --> 00:07:53,840
and therefore we cannot mount a

215
00:07:53,840 --> 00:07:56,400
differential fault analysis attack

216
00:07:56,400 --> 00:07:58,960
additionally there is so called um

217
00:07:58,960 --> 00:08:01,039
fault injection um

218
00:08:01,039 --> 00:08:03,120
redundancy counter measure this is the

219
00:08:03,120 --> 00:08:05,039
situation when the asp is performed

220
00:08:05,039 --> 00:08:08,000
twice the result of aes is compared

221
00:08:08,000 --> 00:08:09,919
in these two executions if it's the same

222
00:08:09,919 --> 00:08:12,160
then there is the ciphertext is returned

223
00:08:12,160 --> 00:08:14,400
if it's not the same it's not

224
00:08:14,400 --> 00:08:17,759
in this case um we essentially the

225
00:08:17,759 --> 00:08:18,960
they would need to be performed two

226
00:08:18,960 --> 00:08:21,440
fault injection attacks to succeed and

227
00:08:21,440 --> 00:08:22,720
they would have to be done in the same

228
00:08:22,720 --> 00:08:24,560
way so that's uh

229
00:08:24,560 --> 00:08:27,120
that's uh that's not easy

230
00:08:27,120 --> 00:08:28,479
uh so

231
00:08:28,479 --> 00:08:31,360
in in our work we take these two

232
00:08:31,360 --> 00:08:33,200
challenges into account when we design

233
00:08:33,200 --> 00:08:35,839
our solution we try to overcome so both

234
00:08:35,839 --> 00:08:38,839
jitter and fault detection counter

235
00:08:38,839 --> 00:08:41,120
measure how do we construct our

236
00:08:41,120 --> 00:08:44,320
probability traces from false

237
00:08:44,320 --> 00:08:45,600
um

238
00:08:45,600 --> 00:08:47,680
already more than 10 years ago

239
00:08:47,680 --> 00:08:49,600
it was noted that default probability is

240
00:08:49,600 --> 00:08:51,519
dependent on the data being processed by

241
00:08:51,519 --> 00:08:54,000
a device

242
00:08:54,000 --> 00:08:56,000
additionally this of course this is true

243
00:08:56,000 --> 00:08:57,760
but operation leakage would be also

244
00:08:57,760 --> 00:08:59,920
visible it's even much stronger because

245
00:08:59,920 --> 00:09:02,560
it means that

246
00:09:02,880 --> 00:09:04,320
the different operations are being

247
00:09:04,320 --> 00:09:06,560
performed at the chip so we expect that

248
00:09:06,560 --> 00:09:10,240
the whole probability would be also

249
00:09:10,240 --> 00:09:12,000
also depend on on on different

250
00:09:12,000 --> 00:09:15,120
operations that will be shown later on

251
00:09:15,120 --> 00:09:18,320
what we do is we transform our

252
00:09:18,320 --> 00:09:20,560
voltage fault injection device into a

253
00:09:20,560 --> 00:09:22,720
single bit sampling oscilloscope and

254
00:09:22,720 --> 00:09:24,480
from this result from the single bits we

255
00:09:24,480 --> 00:09:26,000
construct our

256
00:09:26,000 --> 00:09:28,399
probability traces

257
00:09:28,399 --> 00:09:31,440
let us have a look at the bottom at the

258
00:09:31,440 --> 00:09:33,839
power consumption trace of first round

259
00:09:33,839 --> 00:09:37,040
of aes on one of our targets

260
00:09:37,040 --> 00:09:38,240
this is

261
00:09:38,240 --> 00:09:40,640
this is simply one aes powertrax

262
00:09:40,640 --> 00:09:43,360
can we build something similar with

263
00:09:43,360 --> 00:09:46,160
fault injection

264
00:09:46,160 --> 00:09:51,839
yes we can we in top we have here

265
00:09:52,160 --> 00:09:54,640
such a trace so what do we do we go to

266
00:09:54,640 --> 00:09:55,360
the

267
00:09:55,360 --> 00:09:57,279
offset to first the time of the just

268
00:09:57,279 --> 00:10:01,760
after trigger and we run 15 000 times

269
00:10:01,760 --> 00:10:04,480
fault injection at this at this point in

270
00:10:04,480 --> 00:10:06,160
time

271
00:10:06,160 --> 00:10:09,040
then we construct a bar chart here so we

272
00:10:09,040 --> 00:10:10,560
measure how many

273
00:10:10,560 --> 00:10:11,360
um

274
00:10:11,360 --> 00:10:13,440
successful fault injections we assume

275
00:10:13,440 --> 00:10:15,120
and then we move minimally more in time

276
00:10:15,120 --> 00:10:17,200
again we do 15 000 fault injection types

277
00:10:17,200 --> 00:10:19,760
against 15 000 fault injections and we

278
00:10:19,760 --> 00:10:21,760
continue like that till the end of the

279
00:10:21,760 --> 00:10:23,360
trace

280
00:10:23,360 --> 00:10:24,800
we maybe performed a lot of fault

281
00:10:24,800 --> 00:10:27,440
injection price but we see that that we

282
00:10:27,440 --> 00:10:30,480
effectively constructed trays similar to

283
00:10:30,480 --> 00:10:32,160
the power trace

284
00:10:32,160 --> 00:10:33,760
this this trace could be used for

285
00:10:33,760 --> 00:10:37,120
example for characterization

286
00:10:39,440 --> 00:10:42,399
now how do we do data collection so

287
00:10:42,399 --> 00:10:45,200
first of all we need to decide where we

288
00:10:45,200 --> 00:10:47,440
want to glitch

289
00:10:47,440 --> 00:10:49,600
and second we need to decide what

290
00:10:49,600 --> 00:10:51,760
glitching power do we use

291
00:10:51,760 --> 00:10:55,279
how did we we decided to use very

292
00:10:55,279 --> 00:10:57,040
non-profit approach for especially

293
00:10:57,040 --> 00:10:58,320
glitching power

294
00:10:58,320 --> 00:10:59,360
we

295
00:10:59,360 --> 00:11:00,399
we simply

296
00:11:00,399 --> 00:11:02,160
glitch with very wide parameters of

297
00:11:02,160 --> 00:11:04,320
power and then we choose

298
00:11:04,320 --> 00:11:05,920
uh for our experiments which was the

299
00:11:05,920 --> 00:11:07,920
power around fifth when we achieved

300
00:11:07,920 --> 00:11:09,920
fifty percent of newt so it when the

301
00:11:09,920 --> 00:11:12,079
device stops answering fifty percent

302
00:11:12,079 --> 00:11:13,680
that's the moment where that's more or

303
00:11:13,680 --> 00:11:15,760
less the center of our power that we use

304
00:11:15,760 --> 00:11:17,440
and then we only randomize it slightly

305
00:11:17,440 --> 00:11:19,279
around that

306
00:11:19,279 --> 00:11:21,440
that value

307
00:11:21,440 --> 00:11:22,880
how do we

308
00:11:22,880 --> 00:11:25,200
how do we recognize successful fault

309
00:11:25,200 --> 00:11:27,680
injections to build our traces we use

310
00:11:27,680 --> 00:11:29,360
two approaches one is called mute

311
00:11:29,360 --> 00:11:30,800
approach and the second one is success

312
00:11:30,800 --> 00:11:32,000
probability

313
00:11:32,000 --> 00:11:33,360
let us talk first about success

314
00:11:33,360 --> 00:11:35,200
probability because that's coming from

315
00:11:35,200 --> 00:11:36,880
related work

316
00:11:36,880 --> 00:11:38,399
this is sim this is simply an

317
00:11:38,399 --> 00:11:40,880
information whether the ciphertext

318
00:11:40,880 --> 00:11:44,000
produced by aes that is running on our

319
00:11:44,000 --> 00:11:45,120
device

320
00:11:45,120 --> 00:11:47,200
is uh is correct or not if it's

321
00:11:47,200 --> 00:11:48,320
incorrect

322
00:11:48,320 --> 00:11:50,399
then we assume this was successful fault

323
00:11:50,399 --> 00:11:51,680
injection that's what we used to produce

324
00:11:51,680 --> 00:11:53,040
our price

325
00:11:53,040 --> 00:11:53,839
and

326
00:11:53,839 --> 00:11:55,040
otherwise

327
00:11:55,040 --> 00:11:56,320
otherwise it was not successful fault

328
00:11:56,320 --> 00:11:58,560
injection it was correct execution

329
00:11:58,560 --> 00:12:01,040
now in case of muted that's um that's

330
00:12:01,040 --> 00:12:03,200
model introduced by us in this case we

331
00:12:03,200 --> 00:12:04,560
just assume that the device doesn't

332
00:12:04,560 --> 00:12:07,920
answer or reset so the device is really

333
00:12:07,920 --> 00:12:11,680
default injection really um stop the uh

334
00:12:11,680 --> 00:12:15,519
the the device from executing

335
00:12:15,920 --> 00:12:16,880
that

336
00:12:16,880 --> 00:12:18,720
from executing the aes for returning the

337
00:12:18,720 --> 00:12:19,839
result

338
00:12:19,839 --> 00:12:21,839
okay um

339
00:12:21,839 --> 00:12:22,800
i will

340
00:12:22,800 --> 00:12:24,639
i will explain later how we use it to

341
00:12:24,639 --> 00:12:27,040
achieve successful attack

342
00:12:27,040 --> 00:12:29,040
what also is important to consider is in

343
00:12:29,040 --> 00:12:31,200
this in this model for each plane text

344
00:12:31,200 --> 00:12:32,880
we apply multiple fault injections at

345
00:12:32,880 --> 00:12:34,240
the same point in time and then we need

346
00:12:34,240 --> 00:12:36,880
to repeat for different points in time

347
00:12:36,880 --> 00:12:38,480
and this way we obtain an estimate on

348
00:12:38,480 --> 00:12:40,079
the probability of a fault occurring

349
00:12:40,079 --> 00:12:43,440
that's how it could be in the ideal case

350
00:12:43,440 --> 00:12:45,120
on the next slide i will explain what

351
00:12:45,120 --> 00:12:47,600
how we do it slightly differently to

352
00:12:47,600 --> 00:12:50,959
perform less fault injections

353
00:12:51,279 --> 00:12:54,000
the number of points of fault injection

354
00:12:54,000 --> 00:12:56,160
is essentially like a desired resolution

355
00:12:56,160 --> 00:12:58,720
of our probability trace similarly like

356
00:12:58,720 --> 00:13:01,279
inside channel analysis and the number

357
00:13:01,279 --> 00:13:02,880
of fault injections at the specific

358
00:13:02,880 --> 00:13:05,120
point gives us the precision of our

359
00:13:05,120 --> 00:13:07,839
measurements

360
00:13:08,639 --> 00:13:10,880
let us talk about uh first about the

361
00:13:10,880 --> 00:13:13,760
concerns in trace constructions as

362
00:13:13,760 --> 00:13:16,000
mentioned before there could be g turn

363
00:13:16,000 --> 00:13:18,800
noise the domain can be very sparse then

364
00:13:18,800 --> 00:13:21,519
it would because that we need a lot of

365
00:13:21,519 --> 00:13:24,000
fault injections

366
00:13:24,000 --> 00:13:27,839
another issue since um plls are often

367
00:13:27,839 --> 00:13:30,959
enabled in practical targets

368
00:13:30,959 --> 00:13:32,839
uh if the

369
00:13:32,839 --> 00:13:34,560
the uh

370
00:13:34,560 --> 00:13:36,000
the

371
00:13:36,000 --> 00:13:37,600
jitter might occur not only to the

372
00:13:37,600 --> 00:13:39,600
trigger issues but it also could accord

373
00:13:39,600 --> 00:13:40,560
due to

374
00:13:40,560 --> 00:13:42,320
simply the the clock being not

375
00:13:42,320 --> 00:13:44,000
completely stable to

376
00:13:44,000 --> 00:13:46,480
various effects

377
00:13:46,480 --> 00:13:48,639
furthermore we don't really analyze the

378
00:13:48,639 --> 00:13:51,360
software that is running on our on our

379
00:13:51,360 --> 00:13:53,760
targets we use more black box fire and

380
00:13:53,760 --> 00:13:55,600
forget approach

381
00:13:55,600 --> 00:13:57,839
um also for for practical reasons

382
00:13:57,839 --> 00:13:59,519
because the attackers often don't really

383
00:13:59,519 --> 00:14:01,279
know which software is running on the

384
00:14:01,279 --> 00:14:03,839
device

385
00:14:04,720 --> 00:14:07,440
to overcome the above concern the above

386
00:14:07,440 --> 00:14:09,360
problems we perform

387
00:14:09,360 --> 00:14:11,199
the trace construction slightly

388
00:14:11,199 --> 00:14:12,880
different even in the ideal cases

389
00:14:12,880 --> 00:14:16,639
correct on the previous slide

390
00:14:16,639 --> 00:14:20,240
first we used bucketing of the results

391
00:14:20,240 --> 00:14:22,560
it corresponds to the over sampling in

392
00:14:22,560 --> 00:14:25,360
the side channel analysis case

393
00:14:25,360 --> 00:14:27,600
we divide the attack window that we

394
00:14:27,600 --> 00:14:30,160
chose for example first round of aes

395
00:14:30,160 --> 00:14:33,199
into packets of equal duration and

396
00:14:33,199 --> 00:14:35,839
calculate combined fault probability for

397
00:14:35,839 --> 00:14:38,560
that buckets

398
00:14:39,199 --> 00:14:40,880
what might be a problem with that

399
00:14:40,880 --> 00:14:43,360
approach with that point alone would be

400
00:14:43,360 --> 00:14:45,360
that there could be

401
00:14:45,360 --> 00:14:47,760
a aliasing so essentially we need to

402
00:14:47,760 --> 00:14:49,920
apply sort of a low pass to this

403
00:14:49,920 --> 00:14:52,160
situation so this would be a problem if

404
00:14:52,160 --> 00:14:55,120
for example leakage would happen

405
00:14:55,120 --> 00:14:56,000
just

406
00:14:56,000 --> 00:14:58,480
on the edge of two different packets

407
00:14:58,480 --> 00:15:00,959
therefore we simply overlap buckets that

408
00:15:00,959 --> 00:15:03,199
looks a bit like low pass in case of

409
00:15:03,199 --> 00:15:05,360
side channel analysis and that's uh

410
00:15:05,360 --> 00:15:08,079
that's our map

411
00:15:08,079 --> 00:15:10,800
after we have the traces we can conform

412
00:15:10,800 --> 00:15:12,399
in quotes

413
00:15:12,399 --> 00:15:14,880
any side channel attack we will show two

414
00:15:14,880 --> 00:15:17,040
attacks we believe many other attacks

415
00:15:17,040 --> 00:15:20,079
can be also performed but

416
00:15:20,079 --> 00:15:23,040
most likely not any

417
00:15:23,040 --> 00:15:25,440
let me talk about our experimental setup

418
00:15:25,440 --> 00:15:26,560
we have

419
00:15:26,560 --> 00:15:27,920
our pc

420
00:15:27,920 --> 00:15:30,160
pc communicates via serial communication

421
00:15:30,160 --> 00:15:32,560
with our targets

422
00:15:32,560 --> 00:15:35,279
it also instructs via usb our glitching

423
00:15:35,279 --> 00:15:37,519
device that provides power to the target

424
00:15:37,519 --> 00:15:38,839
and can cause

425
00:15:38,839 --> 00:15:41,680
glitches how our

426
00:15:41,680 --> 00:15:44,480
how our glitcher is being triggered it's

427
00:15:44,480 --> 00:15:47,519
triggered by the last byte of the serial

428
00:15:47,519 --> 00:15:50,399
communication being sent from pc to the

429
00:15:50,399 --> 00:15:52,880
target

430
00:15:53,199 --> 00:15:55,199
sometimes we in few experiments we also

431
00:15:55,199 --> 00:15:58,000
use target directly generating the

432
00:15:58,000 --> 00:15:58,800
the

433
00:15:58,800 --> 00:16:01,199
trigger here to the device to call the

434
00:16:01,199 --> 00:16:02,399
glitch

435
00:16:02,399 --> 00:16:05,920
but usually we use the communication

436
00:16:05,920 --> 00:16:08,480
we consider three different software

437
00:16:08,480 --> 00:16:10,959
targets so these are aess

438
00:16:10,959 --> 00:16:12,240
and this

439
00:16:12,240 --> 00:16:15,040
so these are ess or rsa running on an

440
00:16:15,040 --> 00:16:17,279
avr 32-bit arm

441
00:16:17,279 --> 00:16:19,519
or risker vcpus

442
00:16:19,519 --> 00:16:22,000
and we also perform a proof of concept

443
00:16:22,000 --> 00:16:26,320
analysis on x mega hardware as engine

444
00:16:27,040 --> 00:16:29,360
our setup is low cost it cost less than

445
00:16:29,360 --> 00:16:32,480
50 dollars even together with targets

446
00:16:32,480 --> 00:16:33,839
i believe

447
00:16:33,839 --> 00:16:35,199
the

448
00:16:35,199 --> 00:16:37,199
description of that is

449
00:16:37,199 --> 00:16:38,720
on their following link if someone is in

450
00:16:38,720 --> 00:16:40,720
there interested and the picture of that

451
00:16:40,720 --> 00:16:41,759
setup

452
00:16:41,759 --> 00:16:45,360
is is of a similar setup is shown here

453
00:16:45,360 --> 00:16:49,639
this this is a picture from that website

454
00:16:50,880 --> 00:16:52,480
let us have a look at simple fault

455
00:16:52,480 --> 00:16:54,639
analysis that is

456
00:16:54,639 --> 00:16:56,480
that is based on simple power analysis

457
00:16:56,480 --> 00:16:58,959
on rsa here we have such a

458
00:16:58,959 --> 00:17:00,639
characterization trace similarly to

459
00:17:00,639 --> 00:17:02,720
before constructed in the way described

460
00:17:02,720 --> 00:17:04,720
in previous slides

461
00:17:04,720 --> 00:17:06,559
and

462
00:17:06,559 --> 00:17:08,720
this is just square and multiply

463
00:17:08,720 --> 00:17:11,039
implementation of rsa and we can i hope

464
00:17:11,039 --> 00:17:12,640
we can see that the patterns here are

465
00:17:12,640 --> 00:17:14,959
different in case of light green

466
00:17:14,959 --> 00:17:16,799
patterns they correspond already to

467
00:17:16,799 --> 00:17:18,640
processing of zeros

468
00:17:18,640 --> 00:17:21,280
and the dark blue patterns corresponds

469
00:17:21,280 --> 00:17:22,079
to

470
00:17:22,079 --> 00:17:24,480
ones

471
00:17:25,039 --> 00:17:25,839
this

472
00:17:25,839 --> 00:17:27,119
this was

473
00:17:27,119 --> 00:17:30,000
this is simple fault analysis

474
00:17:30,000 --> 00:17:32,400
what we also done subsequently is fault

475
00:17:32,400 --> 00:17:34,480
correlation analysis on different

476
00:17:34,480 --> 00:17:37,679
implementations of aes on different

477
00:17:37,679 --> 00:17:39,600
architectures

478
00:17:39,600 --> 00:17:40,480
in

479
00:17:40,480 --> 00:17:43,760
on the in in top we see um

480
00:17:43,760 --> 00:17:46,480
analysis of on risk v of a

481
00:17:46,480 --> 00:17:48,960
straightforward aes implementation in

482
00:17:48,960 --> 00:17:51,840
case of nudes we need around 30 35

483
00:17:51,840 --> 00:17:54,640
million fault injection attempts in case

484
00:17:54,640 --> 00:17:56,400
of the success case so when we know

485
00:17:56,400 --> 00:17:58,559
whether ciphertex was correct or not we

486
00:17:58,559 --> 00:18:02,240
need around 20 million races

487
00:18:02,240 --> 00:18:04,880
similarly for arm architecture

488
00:18:04,880 --> 00:18:06,160
we need

489
00:18:06,160 --> 00:18:07,760
we need

490
00:18:07,760 --> 00:18:10,960
we need 80 million traces and

491
00:18:10,960 --> 00:18:11,760
and

492
00:18:11,760 --> 00:18:14,720
slightly less in case of

493
00:18:14,720 --> 00:18:16,400
when we know whether ciphertext was

494
00:18:16,400 --> 00:18:18,160
correct or not

495
00:18:18,160 --> 00:18:20,480
what we can notice in this picture is

496
00:18:20,480 --> 00:18:23,200
that actually mutes require slightly

497
00:18:23,200 --> 00:18:25,200
more traces but clearly the key can be

498
00:18:25,200 --> 00:18:26,840
also

499
00:18:26,840 --> 00:18:30,000
recovered um

500
00:18:30,000 --> 00:18:31,440
what's also important to mention but

501
00:18:31,440 --> 00:18:32,640
that's more

502
00:18:32,640 --> 00:18:34,720
emphasized in the paper is if we would

503
00:18:34,720 --> 00:18:37,039
know a bit better where we need to

504
00:18:37,039 --> 00:18:39,600
include default to generate to recover

505
00:18:39,600 --> 00:18:41,039
the

506
00:18:41,039 --> 00:18:42,960
the

507
00:18:42,960 --> 00:18:45,039
the key to break the key then the number

508
00:18:45,039 --> 00:18:47,440
of um then the number of uh the fault

509
00:18:47,440 --> 00:18:49,200
injection attempts goes

510
00:18:49,200 --> 00:18:52,080
between 5 and 30 times down depending on

511
00:18:52,080 --> 00:18:55,039
the architecture that we attack

512
00:18:55,039 --> 00:18:58,240
now let us have a look at the uh

513
00:18:58,240 --> 00:19:00,240
the rest of our experiments we attack

514
00:19:00,240 --> 00:19:02,559
here

515
00:19:02,880 --> 00:19:06,000
optimized implementation form arm again

516
00:19:06,000 --> 00:19:09,280
we are able to recover the

517
00:19:09,280 --> 00:19:11,760
uh the key

518
00:19:11,760 --> 00:19:14,320
and similarly the the hardest case was

519
00:19:14,320 --> 00:19:15,760
for x mega

520
00:19:15,760 --> 00:19:17,360
for x mega straightforward is

521
00:19:17,360 --> 00:19:19,679
implementation in the success model we

522
00:19:19,679 --> 00:19:22,160
actually can recover the key

523
00:19:22,160 --> 00:19:25,200
with 16 million traces however in case

524
00:19:25,200 --> 00:19:27,120
of the mutes approach we see that there

525
00:19:27,120 --> 00:19:29,679
is much much much more more noise the k

526
00:19:29,679 --> 00:19:31,760
the situation is much more harder but we

527
00:19:31,760 --> 00:19:34,400
still see clear

528
00:19:34,400 --> 00:19:38,600
entropy reduction in the key

529
00:19:40,080 --> 00:19:42,720
our last experiments was about attacking

530
00:19:42,720 --> 00:19:45,760
x mega hardware aes in this case

531
00:19:45,760 --> 00:19:49,360
um the hardware as engine runs

532
00:19:49,360 --> 00:19:51,200
runs in a separate crypto engine and

533
00:19:51,200 --> 00:19:53,120
then there is also the main

534
00:19:53,120 --> 00:19:56,400
the main chip the main processor

535
00:19:56,400 --> 00:19:58,640
this attack on this sectional attack on

536
00:19:58,640 --> 00:20:01,120
this on this target has been that was

537
00:20:01,120 --> 00:20:03,760
done more than 10 years ago by electric

538
00:20:03,760 --> 00:20:05,760
he described in the paper the model that

539
00:20:05,760 --> 00:20:07,120
was used and

540
00:20:07,120 --> 00:20:09,600
he was taking the the leakage model that

541
00:20:09,600 --> 00:20:11,280
used in such an analysis and he was able

542
00:20:11,280 --> 00:20:13,840
to recover all 16 bytes in our case

543
00:20:13,840 --> 00:20:15,679
however we used the same model we used

544
00:20:15,679 --> 00:20:17,120
fault injection approach but we noticed

545
00:20:17,120 --> 00:20:18,840
that we can recover only three bytes

546
00:20:18,840 --> 00:20:21,200
completely and

547
00:20:21,200 --> 00:20:22,880
and the other bytes we don't see leakage

548
00:20:22,880 --> 00:20:24,880
what could be the reason of that

549
00:20:24,880 --> 00:20:26,559
we believe that the reason for that is

550
00:20:26,559 --> 00:20:29,280
that we set our glitching parameters to

551
00:20:29,280 --> 00:20:31,280
glitch the effectively the software the

552
00:20:31,280 --> 00:20:34,320
cpu we don't we we didn't try to glitch

553
00:20:34,320 --> 00:20:36,320
the hardware we just see whether the

554
00:20:36,320 --> 00:20:39,200
device answers or not

555
00:20:39,200 --> 00:20:41,440
so could it be that we are glitching the

556
00:20:41,440 --> 00:20:43,039
uh

557
00:20:43,039 --> 00:20:45,120
the main ctu

558
00:20:45,120 --> 00:20:46,480
we have looked at the code that is

559
00:20:46,480 --> 00:20:48,640
running on main cpu during the execution

560
00:20:48,640 --> 00:20:51,200
of hardware es we notice that there is a

561
00:20:51,200 --> 00:20:53,360
polling loop consisting of

562
00:20:53,360 --> 00:20:56,479
five instructions

563
00:20:56,559 --> 00:20:58,480
and it seems

564
00:20:58,480 --> 00:21:00,880
that only one of these instructions when

565
00:21:00,880 --> 00:21:03,200
we glitch affects

566
00:21:03,200 --> 00:21:05,280
the results of the hardware aes engine

567
00:21:05,280 --> 00:21:06,880
in a substantial way that we can mount

568
00:21:06,880 --> 00:21:08,400
the attack

569
00:21:08,400 --> 00:21:10,960
therefore intuitively we can recover

570
00:21:10,960 --> 00:21:14,400
only every fifth

571
00:21:14,400 --> 00:21:15,760
fifth key byte

572
00:21:15,760 --> 00:21:17,440
and that we can see here that that's

573
00:21:17,440 --> 00:21:19,200
probably the case because that's the

574
00:21:19,200 --> 00:21:20,880
only moment in time each five

575
00:21:20,880 --> 00:21:22,559
instructions we can see for example

576
00:21:22,559 --> 00:21:24,240
input

577
00:21:24,240 --> 00:21:27,280
input correlation

578
00:21:28,480 --> 00:21:30,080
therefore we can say that this is just

579
00:21:30,080 --> 00:21:31,919
proof of concept it's a partial success

580
00:21:31,919 --> 00:21:34,320
how to solve it

581
00:21:34,320 --> 00:21:37,600
possibly by using wider range parameters

582
00:21:37,600 --> 00:21:39,440
and using much more fault injection

583
00:21:39,440 --> 00:21:41,360
parameters we would be able to see this

584
00:21:41,360 --> 00:21:43,440
situation when we would be able to

585
00:21:43,440 --> 00:21:44,880
affect them

586
00:21:44,880 --> 00:21:45,760
and

587
00:21:45,760 --> 00:21:47,440
using our faulty injection to see this

588
00:21:47,440 --> 00:21:49,440
this this fault

589
00:21:49,440 --> 00:21:52,080
sensitivity coming from the hardware yes

590
00:21:52,080 --> 00:21:53,600
engine

591
00:21:53,600 --> 00:21:55,039
um

592
00:21:55,039 --> 00:21:58,240
we believe it's maybe a bit similar to

593
00:21:58,240 --> 00:22:00,799
clipping on quantization errors in case

594
00:22:00,799 --> 00:22:01,440
of

595
00:22:01,440 --> 00:22:02,960
in case of side channel analysis at

596
00:22:02,960 --> 00:22:05,600
least related to that

597
00:22:05,600 --> 00:22:09,280
analog and analogous

598
00:22:10,320 --> 00:22:12,240
okay let us compare of various fault

599
00:22:12,240 --> 00:22:14,080
injection attacks to the up to our

600
00:22:14,080 --> 00:22:15,919
attack

601
00:22:15,919 --> 00:22:17,360
our attacks

602
00:22:17,360 --> 00:22:19,280
are presented in the bottom row we can

603
00:22:19,280 --> 00:22:21,440
see it here

604
00:22:21,440 --> 00:22:23,440
what was for us the most important for

605
00:22:23,440 --> 00:22:24,640
us the most important was to have a

606
00:22:24,640 --> 00:22:29,039
generic solution with little assumptions

607
00:22:29,039 --> 00:22:30,400
that for example means that we would

608
00:22:30,400 --> 00:22:32,080
like to have

609
00:22:32,080 --> 00:22:34,799
a technique that allows us to attack our

610
00:22:34,799 --> 00:22:36,159
use targets

611
00:22:36,159 --> 00:22:37,840
in our case we were able to attack

612
00:22:37,840 --> 00:22:41,600
public and private key

613
00:22:41,600 --> 00:22:43,679
symmetric and asymmetric cryptography

614
00:22:43,679 --> 00:22:45,520
and also a hardware aes engine at least

615
00:22:45,520 --> 00:22:47,360
we showed a proof of concept

616
00:22:47,360 --> 00:22:49,280
many techniques also are applicable to

617
00:22:49,280 --> 00:22:51,410
many different um

618
00:22:51,410 --> 00:22:53,200
[Music]

619
00:22:53,200 --> 00:22:56,000
crypto primitives for example cfa safe

620
00:22:56,000 --> 00:22:57,679
error attacks and differential fault

621
00:22:57,679 --> 00:23:00,320
analysis

622
00:23:00,559 --> 00:23:03,280
we also wanted a non-profit approach

623
00:23:03,280 --> 00:23:04,400
therefore

624
00:23:04,400 --> 00:23:07,200
all template attacks are not really the

625
00:23:07,200 --> 00:23:08,640
the

626
00:23:08,640 --> 00:23:10,159
uh

627
00:23:10,159 --> 00:23:11,760
the approach that we

628
00:23:11,760 --> 00:23:13,840
were interested or to have a similar

629
00:23:13,840 --> 00:23:15,840
approach

630
00:23:15,840 --> 00:23:17,600
we also assumed that due to the

631
00:23:17,600 --> 00:23:19,840
practical approach we

632
00:23:19,840 --> 00:23:22,960
would like to show results that are in

633
00:23:22,960 --> 00:23:24,640
which we don't don't have this flow

634
00:23:24,640 --> 00:23:27,679
control due to plls being enabled many

635
00:23:27,679 --> 00:23:29,919
attacks are shown in this scenario when

636
00:23:29,919 --> 00:23:33,039
the control over target is quite large

637
00:23:33,039 --> 00:23:34,880
and that's hard to achieve in in

638
00:23:34,880 --> 00:23:37,840
practice sometimes

639
00:23:38,000 --> 00:23:40,159
we also assume no cipher text knowledge

640
00:23:40,159 --> 00:23:41,200
so

641
00:23:41,200 --> 00:23:43,120
there have been a lot of work when the

642
00:23:43,120 --> 00:23:44,400
when they

643
00:23:44,400 --> 00:23:46,960
smart here attacks they only require

644
00:23:46,960 --> 00:23:48,840
ciphered correctness

645
00:23:48,840 --> 00:23:52,159
information uh in our work we only don't

646
00:23:52,159 --> 00:23:54,159
we achieve that but also we have this

647
00:23:54,159 --> 00:23:55,919
new detection

648
00:23:55,919 --> 00:23:57,600
situation when we only need to know

649
00:23:57,600 --> 00:23:59,279
whether the device is muted or not and

650
00:23:59,279 --> 00:24:01,120
that's actually enough to recover the

651
00:24:01,120 --> 00:24:02,720
key

652
00:24:02,720 --> 00:24:05,200
all that flexibility comes unfortunately

653
00:24:05,200 --> 00:24:07,120
the price of a large larger amount of

654
00:24:07,120 --> 00:24:08,480
faults

655
00:24:08,480 --> 00:24:10,480
there are other aspects discussed in the

656
00:24:10,480 --> 00:24:12,880
paper

657
00:24:14,400 --> 00:24:16,480
to conclude we have presented a generic

658
00:24:16,480 --> 00:24:18,240
technique for translating sectional

659
00:24:18,240 --> 00:24:19,840
analysis

660
00:24:19,840 --> 00:24:22,080
to fault injection attacks on the

661
00:24:22,080 --> 00:24:24,000
example of simple fault analysis based

662
00:24:24,000 --> 00:24:26,000
on sba and correlation fault analysis

663
00:24:26,000 --> 00:24:28,480
based on correlation power analysis

664
00:24:28,480 --> 00:24:30,240
we also investigated two different

665
00:24:30,240 --> 00:24:32,400
classification assumptions news

666
00:24:32,400 --> 00:24:34,720
mutes and successes

667
00:24:34,720 --> 00:24:36,640
we successfully attacked cryptographic

668
00:24:36,640 --> 00:24:38,080
libraries running on three different

669
00:24:38,080 --> 00:24:40,240
targets and we also presented the proof

670
00:24:40,240 --> 00:24:42,720
of concept against the hardware engine

671
00:24:42,720 --> 00:24:44,720
our priorities was to have generic

672
00:24:44,720 --> 00:24:46,559
attacks and practical

673
00:24:46,559 --> 00:24:48,880
and the drawback is a relatively large

674
00:24:48,880 --> 00:24:50,799
number of fault injection attempts

675
00:24:50,799 --> 00:24:52,880
these results show that the relationship

676
00:24:52,880 --> 00:24:54,400
between the font ejection and side

677
00:24:54,400 --> 00:24:56,080
channel is strong

678
00:24:56,080 --> 00:24:58,880
and we can run relatively unmodified

679
00:24:58,880 --> 00:25:01,279
sectional attacks on the results of

680
00:25:01,279 --> 00:25:04,480
fault injection campaigns

681
00:25:04,480 --> 00:25:08,440
thank you very much for listening

