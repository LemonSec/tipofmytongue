1
00:00:00,799 --> 00:00:02,240
hello everybody

2
00:00:02,240 --> 00:00:04,080
i'm peter danvest and together with my

3
00:00:04,080 --> 00:00:06,160
colleague mihir van berendong we will

4
00:00:06,160 --> 00:00:07,680
take you through the world of table

5
00:00:07,680 --> 00:00:09,679
based conversion from arithmetic to

6
00:00:09,679 --> 00:00:12,240
boolean masking

7
00:00:12,240 --> 00:00:14,639
let's start with masking

8
00:00:14,639 --> 00:00:16,640
masking is a technique to protect

9
00:00:16,640 --> 00:00:18,800
sensitive values against sideshow

10
00:00:18,800 --> 00:00:20,480
attacks

11
00:00:20,480 --> 00:00:22,880
the idea is that we're going to share

12
00:00:22,880 --> 00:00:23,920
this

13
00:00:23,920 --> 00:00:27,119
sensitive value into multiple shares

14
00:00:27,119 --> 00:00:29,679
so that an adversary as long as he is

15
00:00:29,679 --> 00:00:32,238
not able to obtain all of these shares

16
00:00:32,238 --> 00:00:34,800
does not learn any information about the

17
00:00:34,800 --> 00:00:37,040
secret value

18
00:00:37,040 --> 00:00:39,040
there are different types of masking

19
00:00:39,040 --> 00:00:40,480
algorithms

20
00:00:40,480 --> 00:00:43,120
there is boolean masking where the xor

21
00:00:43,120 --> 00:00:44,559
of all the shares will give you the

22
00:00:44,559 --> 00:00:46,160
sensitive value

23
00:00:46,160 --> 00:00:48,000
or there is for example arithmetic

24
00:00:48,000 --> 00:00:50,800
masking where the sum of all the shares

25
00:00:50,800 --> 00:00:54,160
modulo some some number gives you

26
00:00:54,160 --> 00:00:56,480
the sensitive value

27
00:00:56,480 --> 00:00:58,079
now depending on the type of

28
00:00:58,079 --> 00:01:00,239
computations that you want to do you

29
00:01:00,239 --> 00:01:03,199
might prefer one of these types

30
00:01:03,199 --> 00:01:05,600
for example for boolean operations we

31
00:01:05,600 --> 00:01:08,400
typically want to have boolean masking

32
00:01:08,400 --> 00:01:10,240
while for arithmetic operations we

33
00:01:10,240 --> 00:01:14,399
typically prefer arithmetic masking

34
00:01:14,720 --> 00:01:17,759
as an example this is an implementation

35
00:01:17,759 --> 00:01:19,759
of the encapsulation of the encryption

36
00:01:19,759 --> 00:01:21,119
scheme saver

37
00:01:21,119 --> 00:01:24,400
that we implemented in a previous work

38
00:01:24,400 --> 00:01:26,640
as you can see some of these operations

39
00:01:26,640 --> 00:01:28,159
are in yellow

40
00:01:28,159 --> 00:01:29,600
indicated that these are arithmetic

41
00:01:29,600 --> 00:01:32,240
operations and that we prefer to work in

42
00:01:32,240 --> 00:01:35,280
the arithmetic mask domain here

43
00:01:35,280 --> 00:01:37,680
on the other hand some of the operations

44
00:01:37,680 --> 00:01:39,280
are boolean

45
00:01:39,280 --> 00:01:40,799
indicated in blue

46
00:01:40,799 --> 00:01:42,799
for example hash functions

47
00:01:42,799 --> 00:01:46,000
indicated that we prefer here to work in

48
00:01:46,000 --> 00:01:49,119
the boolean mask domain

49
00:01:49,119 --> 00:01:50,960
to convert from this arithmetic to this

50
00:01:50,960 --> 00:01:52,880
boolean domain we need conversion

51
00:01:52,880 --> 00:01:55,600
algorithms for example arithmetic to

52
00:01:55,600 --> 00:01:57,759
boolean masking or boolean to arithmetic

53
00:01:57,759 --> 00:01:59,840
mask

54
00:01:59,840 --> 00:02:02,159
in this presentation we will focus on

55
00:02:02,159 --> 00:02:05,840
arithmetic to boolean masking algorithms

56
00:02:05,840 --> 00:02:07,439
there are several arithmetic to boolean

57
00:02:07,439 --> 00:02:09,280
conversion algorithms

58
00:02:09,280 --> 00:02:11,680
in this presentation we will focus on

59
00:02:11,680 --> 00:02:14,319
the table based methods

60
00:02:14,319 --> 00:02:16,400
these table based methods are very

61
00:02:16,400 --> 00:02:19,360
efficient but can only be used for first

62
00:02:19,360 --> 00:02:23,200
or masking security

63
00:02:23,200 --> 00:02:25,200
imagine that we have an arithmetic

64
00:02:25,200 --> 00:02:27,920
masking on the left in yellow

65
00:02:27,920 --> 00:02:30,000
and we want to convert this into a

66
00:02:30,000 --> 00:02:34,560
boolean masking on the right in blue

67
00:02:34,560 --> 00:02:36,400
table-based methods are going to proceed

68
00:02:36,400 --> 00:02:38,080
as follows

69
00:02:38,080 --> 00:02:40,400
we're going to make a table with every

70
00:02:40,400 --> 00:02:42,480
possible sensitive values

71
00:02:42,480 --> 00:02:44,959
masked with the mask

72
00:02:44,959 --> 00:02:46,800
as a small r

73
00:02:46,800 --> 00:02:48,319
we're going to do that both for the

74
00:02:48,319 --> 00:02:52,879
arithmetic domain and the boolean domain

75
00:02:53,840 --> 00:02:55,760
having this table we can convert our

76
00:02:55,760 --> 00:02:58,800
arithmetic masking in the following way

77
00:02:58,800 --> 00:03:01,280
we take our arithmetic masking and we go

78
00:03:01,280 --> 00:03:03,920
from our original masking under big r to

79
00:03:03,920 --> 00:03:07,440
the masking under small r

80
00:03:07,440 --> 00:03:09,840
now that we have this value we can look

81
00:03:09,840 --> 00:03:11,920
it up in the table and go from the

82
00:03:11,920 --> 00:03:15,760
arithmetic domain to the boolean domain

83
00:03:15,760 --> 00:03:17,920
once we're in the boolean domain we only

84
00:03:17,920 --> 00:03:20,080
have to remask to our original

85
00:03:20,080 --> 00:03:21,760
randomness r

86
00:03:21,760 --> 00:03:24,319
and we have our boolean value for the

87
00:03:24,319 --> 00:03:26,640
mask

88
00:03:27,120 --> 00:03:29,200
while this certainly works it is not

89
00:03:29,200 --> 00:03:31,360
very efficient

90
00:03:31,360 --> 00:03:34,879
imagine that we have an input of n bits

91
00:03:34,879 --> 00:03:37,519
this means that our table needs to have

92
00:03:37,519 --> 00:03:40,159
two to the n entries

93
00:03:40,159 --> 00:03:43,920
which does not scale very good

94
00:03:44,640 --> 00:03:47,200
as a solution table-based methods

95
00:03:47,200 --> 00:03:49,360
typically divide the inputs into small

96
00:03:49,360 --> 00:03:51,519
chunks

97
00:03:51,519 --> 00:03:53,680
this allows the corresponding table to

98
00:03:53,680 --> 00:03:55,439
become smaller

99
00:03:55,439 --> 00:03:58,159
for k-bit chunks we only need a table of

100
00:03:58,159 --> 00:04:01,840
two to the k entries

101
00:04:02,400 --> 00:04:04,239
so how do we proceed

102
00:04:04,239 --> 00:04:06,480
well we take the first chunk the least

103
00:04:06,480 --> 00:04:08,640
significant bits let's say this is 3

104
00:04:08,640 --> 00:04:10,239
bits

105
00:04:10,239 --> 00:04:11,920
and we take these bits and we do a

106
00:04:11,920 --> 00:04:15,120
remasking again to this

107
00:04:15,120 --> 00:04:17,440
mask small r

108
00:04:17,440 --> 00:04:19,680
and then we can use this to look up in

109
00:04:19,680 --> 00:04:21,600
the table the arithmetic to boolean

110
00:04:21,600 --> 00:04:23,360
conversion

111
00:04:23,360 --> 00:04:25,520
and after we've looked this up we can do

112
00:04:25,520 --> 00:04:28,560
again a remasking to get the original

113
00:04:28,560 --> 00:04:30,639
randomness big r

114
00:04:30,639 --> 00:04:33,120
and this gives us the first three bits

115
00:04:33,120 --> 00:04:36,560
of our boolean masking

116
00:04:36,639 --> 00:04:38,720
exactly the same thing happens with the

117
00:04:38,720 --> 00:04:41,680
next chunk the next three bits

118
00:04:41,680 --> 00:04:43,440
so we take these bits we do the

119
00:04:43,440 --> 00:04:46,080
remasking we look it up in the table we

120
00:04:46,080 --> 00:04:49,120
remask again and we get the resulting

121
00:04:49,120 --> 00:04:53,280
chunk in the boolean representation

122
00:04:54,240 --> 00:04:56,800
now there is a problem and that is the

123
00:04:56,800 --> 00:04:58,000
carry

124
00:04:58,000 --> 00:05:00,560
more specifically there is a carry from

125
00:05:00,560 --> 00:05:03,360
this first chunk that we looked at to

126
00:05:03,360 --> 00:05:06,240
the chunk that we're looking at now

127
00:05:06,240 --> 00:05:07,280
and this

128
00:05:07,280 --> 00:05:10,639
carry needs to be taken into account

129
00:05:10,639 --> 00:05:13,520
for reasons of security but also for

130
00:05:13,520 --> 00:05:16,160
reasons of correctness

131
00:05:16,160 --> 00:05:18,080
now the different table based methods

132
00:05:18,080 --> 00:05:20,160
will differ specifically on how they

133
00:05:20,160 --> 00:05:23,440
deal with this carry

134
00:05:23,440 --> 00:05:25,440
in our work we specifically look at a

135
00:05:25,440 --> 00:05:27,680
table based method proposed by the

136
00:05:27,680 --> 00:05:31,840
bryzer in just one twenty twelve

137
00:05:31,840 --> 00:05:34,320
the idea of this paper is to include the

138
00:05:34,320 --> 00:05:38,560
carry in a masked form into the table

139
00:05:38,560 --> 00:05:41,120
this helps us correct for the carry at

140
00:05:41,120 --> 00:05:44,240
the cost of only doubling the number of

141
00:05:44,240 --> 00:05:46,240
entries in the table

142
00:05:46,240 --> 00:05:48,960
we will have 2k entries in the table for

143
00:05:48,960 --> 00:05:50,400
carry 0

144
00:05:50,400 --> 00:05:52,560
and 2k entries in the table for carry

145
00:05:52,560 --> 00:05:54,800
one

146
00:05:54,800 --> 00:05:57,039
at the output of the table we will not

147
00:05:57,039 --> 00:05:59,759
only get our boolean value

148
00:05:59,759 --> 00:06:02,400
but we will also get a masked version of

149
00:06:02,400 --> 00:06:06,160
the carry in that iteration

150
00:06:06,160 --> 00:06:08,400
this mass version of the carry can then

151
00:06:08,400 --> 00:06:10,720
in the next iteration be used to

152
00:06:10,720 --> 00:06:13,280
compensate for this carry

153
00:06:13,280 --> 00:06:16,160
when looking up so we will have not only

154
00:06:16,160 --> 00:06:19,199
the arithmetic input but also the carry

155
00:06:19,199 --> 00:06:20,880
from the previous

156
00:06:20,880 --> 00:06:23,440
iteration

157
00:06:23,759 --> 00:06:25,520
in our work we showed that there is a

158
00:06:25,520 --> 00:06:29,039
security vulnerability inherent to this

159
00:06:29,039 --> 00:06:30,800
method

160
00:06:30,800 --> 00:06:32,720
and the reason is this variable

161
00:06:32,720 --> 00:06:34,800
encircled in red

162
00:06:34,800 --> 00:06:37,520
now in this variable we do not yet take

163
00:06:37,520 --> 00:06:39,840
the carry into account

164
00:06:39,840 --> 00:06:41,680
and we show that this leads to

165
00:06:41,680 --> 00:06:45,120
non-uniformity of the mask value

166
00:06:45,120 --> 00:06:46,800
now my colleague michiel is going to

167
00:06:46,800 --> 00:06:48,639
give you more information about the

168
00:06:48,639 --> 00:06:50,880
attack and about the possible solutions

169
00:06:50,880 --> 00:06:53,599
to this attack

170
00:06:53,599 --> 00:06:55,840
hi i'm hilton berendock and i'll take

171
00:06:55,840 --> 00:06:57,680
over from jan peter to describe our

172
00:06:57,680 --> 00:07:00,240
attack on this a to b conversion method

173
00:07:00,240 --> 00:07:02,319
and also two solutions that we proposed

174
00:07:02,319 --> 00:07:04,160
to remedy the problem

175
00:07:04,160 --> 00:07:06,080
as jan peter already mentioned the

176
00:07:06,080 --> 00:07:08,000
problem is with the value encircled in

177
00:07:08,000 --> 00:07:10,240
red so let's go to the next slide and

178
00:07:10,240 --> 00:07:12,479
analyze it in detail

179
00:07:12,479 --> 00:07:14,080
the value that is used for the table

180
00:07:14,080 --> 00:07:16,960
lookup is a masking of x1 with the mask

181
00:07:16,960 --> 00:07:19,520
r but there is also the omitted carry

182
00:07:19,520 --> 00:07:21,520
that is used separately for the table

183
00:07:21,520 --> 00:07:23,120
lookup

184
00:07:23,120 --> 00:07:25,360
this means that the actual mask depends

185
00:07:25,360 --> 00:07:28,319
in two ways on small r there is both the

186
00:07:28,319 --> 00:07:30,800
normal mask are but also the carry which

187
00:07:30,800 --> 00:07:32,960
depends on r

188
00:07:32,960 --> 00:07:34,800
if you look at the distribution of this

189
00:07:34,800 --> 00:07:37,039
mask value a problem is immediately

190
00:07:37,039 --> 00:07:38,880
obvious

191
00:07:38,880 --> 00:07:40,880
shown here on this slide is a conversion

192
00:07:40,880 --> 00:07:43,199
that happens in three iterations where

193
00:07:43,199 --> 00:07:45,520
the conversion processes chunks of two

194
00:07:45,520 --> 00:07:47,039
bits

195
00:07:47,039 --> 00:07:49,120
in a secure masking you would expect the

196
00:07:49,120 --> 00:07:52,080
mask to take the values between 0 and 3

197
00:07:52,080 --> 00:07:54,560
with equal probability

198
00:07:54,560 --> 00:07:56,319
we see that this is indeed the case for

199
00:07:56,319 --> 00:07:59,039
iteration 0 when there is no carry yet

200
00:07:59,039 --> 00:08:01,280
that needs to propagate

201
00:08:01,280 --> 00:08:03,919
however in subsequent iterations shown

202
00:08:03,919 --> 00:08:05,759
here on this slide iteration 1 and

203
00:08:05,759 --> 00:08:08,160
iteration 2 the carry creates a

204
00:08:08,160 --> 00:08:11,039
dependency in the masked value

205
00:08:11,039 --> 00:08:13,199
as a result the distribution becomes

206
00:08:13,199 --> 00:08:16,080
cute and the mask value 0 has a higher

207
00:08:16,080 --> 00:08:18,160
probability to occur than other mask

208
00:08:18,160 --> 00:08:19,280
values

209
00:08:19,280 --> 00:08:21,120
this is exactly what should be avoided

210
00:08:21,120 --> 00:08:23,440
in a masking situation because this now

211
00:08:23,440 --> 00:08:25,520
means that the sensitive value is still

212
00:08:25,520 --> 00:08:26,400
correlated

213
00:08:26,400 --> 00:08:28,560
with the shares

214
00:08:28,560 --> 00:08:30,240
since the shares are correlated with the

215
00:08:30,240 --> 00:08:32,640
sensitive value we expect this to show

216
00:08:32,640 --> 00:08:34,799
up in a standard fixed versus random

217
00:08:34,799 --> 00:08:36,320
d-test

218
00:08:36,320 --> 00:08:38,240
this is shown here on this slide for a

219
00:08:38,240 --> 00:08:41,200
t-test with 100 000 collected traces

220
00:08:41,200 --> 00:08:43,279
where the a-to-b conversion happens in

221
00:08:43,279 --> 00:08:45,360
eight iterations

222
00:08:45,360 --> 00:08:48,000
again in the first iteration there is no

223
00:08:48,000 --> 00:08:50,160
carry yet that needs to propagate and

224
00:08:50,160 --> 00:08:52,560
correspondingly the mask is uniform and

225
00:08:52,560 --> 00:08:55,040
there is no dds leakage

226
00:08:55,040 --> 00:08:56,959
in subsequent iterations there is a

227
00:08:56,959 --> 00:08:59,200
correlation between the processed values

228
00:08:59,200 --> 00:09:01,440
and the actual sensitive values which is

229
00:09:01,440 --> 00:09:04,560
either fixed or random and this is shown

230
00:09:04,560 --> 00:09:06,839
as high leakage peaks in the t

231
00:09:06,839 --> 00:09:09,279
statistic the theoretical flaw is

232
00:09:09,279 --> 00:09:11,600
therefore clearly detectable in practice

233
00:09:11,600 --> 00:09:13,200
and in the paper we describe in more

234
00:09:13,200 --> 00:09:15,279
detail how this can be used to mount

235
00:09:15,279 --> 00:09:17,360
actual attacks on schemes that use this

236
00:09:17,360 --> 00:09:18,880
conversion

237
00:09:18,880 --> 00:09:20,720
an important question is why the flaw

238
00:09:20,720 --> 00:09:22,480
was not caught earlier

239
00:09:22,480 --> 00:09:24,480
in particular so since the method has

240
00:09:24,480 --> 00:09:27,120
been around since 2012

241
00:09:27,120 --> 00:09:29,360
in the original paper no experimental

242
00:09:29,360 --> 00:09:31,600
leakage tests were conducted and the

243
00:09:31,600 --> 00:09:33,760
explicit security proof was not written

244
00:09:33,760 --> 00:09:35,120
out in detail

245
00:09:35,120 --> 00:09:37,279
we include an excerpt from the paper on

246
00:09:37,279 --> 00:09:39,440
this slide which shows that the security

247
00:09:39,440 --> 00:09:41,440
proof was deemed too trivial to write

248
00:09:41,440 --> 00:09:43,279
out in detail

249
00:09:43,279 --> 00:09:44,880
we believe that it shows the importance

250
00:09:44,880 --> 00:09:47,040
of both leakage tests and security

251
00:09:47,040 --> 00:09:49,040
proofs to have full confidence in the

252
00:09:49,040 --> 00:09:52,800
security of masked implementations

253
00:09:52,800 --> 00:09:54,560
we also propose two solutions that

254
00:09:54,560 --> 00:09:56,640
remedy the problem and that avoid this

255
00:09:56,640 --> 00:09:59,519
non-uniform mask value

256
00:09:59,519 --> 00:10:00,800
the first solution we call the

257
00:10:00,800 --> 00:10:02,640
straightforward fix of the original

258
00:10:02,640 --> 00:10:04,640
method and that is to use a different

259
00:10:04,640 --> 00:10:07,519
value for r in each iteration of the

260
00:10:07,519 --> 00:10:09,040
conversion

261
00:10:09,040 --> 00:10:11,120
concretely this looks as shown here on

262
00:10:11,120 --> 00:10:12,959
this slide

263
00:10:12,959 --> 00:10:15,279
instead of a single table we now have as

264
00:10:15,279 --> 00:10:17,519
many tables as there are iterations in

265
00:10:17,519 --> 00:10:19,120
the conversion

266
00:10:19,120 --> 00:10:20,720
each table is constructed for a

267
00:10:20,720 --> 00:10:24,880
different value for r r0 r1 r2 and so on

268
00:10:24,880 --> 00:10:27,440
as many as there are iterations

269
00:10:27,440 --> 00:10:29,200
and the lookup happens in the table that

270
00:10:29,200 --> 00:10:32,320
corresponds to that iteration

271
00:10:32,320 --> 00:10:34,560
because the mask value and the carry now

272
00:10:34,560 --> 00:10:37,040
use different values for r the complex

273
00:10:37,040 --> 00:10:39,920
dependency is resolved as a result the

274
00:10:39,920 --> 00:10:42,320
mask will be uniformly distributed and

275
00:10:42,320 --> 00:10:45,279
the original problem is avoided

276
00:10:45,279 --> 00:10:47,120
the benefit of this method is that each

277
00:10:47,120 --> 00:10:49,200
iteration still requires only a single

278
00:10:49,200 --> 00:10:50,079
lookup

279
00:10:50,079 --> 00:10:52,000
this was the original benefit of the

280
00:10:52,000 --> 00:10:54,399
method due to the brace and therefore we

281
00:10:54,399 --> 00:10:57,040
can keep exactly the same performance

282
00:10:57,040 --> 00:10:58,880
the drawback of the method is that there

283
00:10:58,880 --> 00:11:01,600
is a significant extra memory cost each

284
00:11:01,600 --> 00:11:03,440
of the iterations requires its own

285
00:11:03,440 --> 00:11:05,760
separate table there are therefore many

286
00:11:05,760 --> 00:11:08,240
extra tables and this requires many

287
00:11:08,240 --> 00:11:10,399
extra bytes in memory

288
00:11:10,399 --> 00:11:12,240
our second solution we call the dual

289
00:11:12,240 --> 00:11:14,320
lookup method and in this solution you

290
00:11:14,320 --> 00:11:16,959
will explicitly compensate for the carry

291
00:11:16,959 --> 00:11:20,399
that needs to be added to the input

292
00:11:20,399 --> 00:11:22,959
concretely this looks as follows the

293
00:11:22,959 --> 00:11:25,120
table now no longer contains the input

294
00:11:25,120 --> 00:11:27,279
carry which is no longer necessary for

295
00:11:27,279 --> 00:11:29,360
the lookup but still contains the output

296
00:11:29,360 --> 00:11:30,480
carry

297
00:11:30,480 --> 00:11:32,480
the output carry is still shared in a

298
00:11:32,480 --> 00:11:34,800
boolean masked format which we will

299
00:11:34,800 --> 00:11:37,120
resolve into an arithmetic carry with a

300
00:11:37,120 --> 00:11:39,279
separate lookup

301
00:11:39,279 --> 00:11:41,279
the second lookup requires a second

302
00:11:41,279 --> 00:11:43,839
table that essentially does a b2a

303
00:11:43,839 --> 00:11:45,279
conversion

304
00:11:45,279 --> 00:11:47,680
in this table the boolean masked output

305
00:11:47,680 --> 00:11:49,519
carry is converted back to an

306
00:11:49,519 --> 00:11:53,200
arithmetically masked input carry

307
00:11:53,200 --> 00:11:55,519
this input carry can then then be added

308
00:11:55,519 --> 00:11:58,000
to the input and this way the carry can

309
00:11:58,000 --> 00:11:59,279
be resolved

310
00:11:59,279 --> 00:12:01,360
the input carry is shared with the mask

311
00:12:01,360 --> 00:12:03,760
hammer and this mask is also taken into

312
00:12:03,760 --> 00:12:05,839
account in the construction of the table

313
00:12:05,839 --> 00:12:08,160
shown on the bottom of the slide

314
00:12:08,160 --> 00:12:10,079
in the dual lookup method the mask that

315
00:12:10,079 --> 00:12:12,560
appears is therefore equal to the sum of

316
00:12:12,560 --> 00:12:14,639
r and gamma

317
00:12:14,639 --> 00:12:17,279
since both are simply randomly sampled

318
00:12:17,279 --> 00:12:20,079
values the resulting mask will take the

319
00:12:20,079 --> 00:12:22,800
uniform distribution

320
00:12:22,800 --> 00:12:24,720
the benefit of the dual lookup method is

321
00:12:24,720 --> 00:12:26,399
that it all has a smaller memory

322
00:12:26,399 --> 00:12:27,519
consumption

323
00:12:27,519 --> 00:12:29,200
even though it requires two table

324
00:12:29,200 --> 00:12:31,600
lookups each of the tables can now be

325
00:12:31,600 --> 00:12:33,600
significantly smaller

326
00:12:33,600 --> 00:12:36,160
in particular the original table can be

327
00:12:36,160 --> 00:12:38,639
halved in size because it no longer

328
00:12:38,639 --> 00:12:40,399
needs to take into account the input

329
00:12:40,399 --> 00:12:42,800
carry the table that does the b2a

330
00:12:42,800 --> 00:12:45,200
conversion can remain quite small

331
00:12:45,200 --> 00:12:46,880
because it only needs to convert a

332
00:12:46,880 --> 00:12:49,200
single bit and therefore only has two

333
00:12:49,200 --> 00:12:50,240
entries

334
00:12:50,240 --> 00:12:51,920
the drawback of the method is that it

335
00:12:51,920 --> 00:12:54,160
needs two table lookups and these

336
00:12:54,160 --> 00:12:56,160
methods will come with some cycle counts

337
00:12:56,160 --> 00:12:58,320
costs and therefore also reduced

338
00:12:58,320 --> 00:13:00,240
performance

339
00:13:00,240 --> 00:13:02,320
before we highlighted the importance of

340
00:13:02,320 --> 00:13:04,399
both the security proof and leakage

341
00:13:04,399 --> 00:13:05,440
tests

342
00:13:05,440 --> 00:13:08,160
we explicitly conducted both for both

343
00:13:08,160 --> 00:13:10,240
our newly proposed methods and the

344
00:13:10,240 --> 00:13:12,079
details of this can be found in our

345
00:13:12,079 --> 00:13:14,479
paper

346
00:13:14,560 --> 00:13:16,079
we analyzed the performance of

347
00:13:16,079 --> 00:13:18,320
table-based a-to-b conversion methods in

348
00:13:18,320 --> 00:13:19,600
detail

349
00:13:19,600 --> 00:13:21,760
results shown on this slide are for 16

350
00:13:21,760 --> 00:13:25,360
bit eight b conversion on the 32-bit arm

351
00:13:25,360 --> 00:13:27,680
cortex m4 processor

352
00:13:27,680 --> 00:13:29,760
in our paper we also have results for

353
00:13:29,760 --> 00:13:32,959
64-bit a2b conversion or results on an

354
00:13:32,959 --> 00:13:35,839
8-bit avr processor

355
00:13:35,839 --> 00:13:38,160
in the table in the top row we show the

356
00:13:38,160 --> 00:13:40,720
depressor method for reference

357
00:13:40,720 --> 00:13:42,480
however we have just shown that this

358
00:13:42,480 --> 00:13:44,639
method is insecure and we stress that it

359
00:13:44,639 --> 00:13:46,720
should therefore not be used in a secure

360
00:13:46,720 --> 00:13:48,399
conversion

361
00:13:48,399 --> 00:13:50,800
then we showed three secure conversion

362
00:13:50,800 --> 00:13:52,720
methods

363
00:13:52,720 --> 00:13:54,560
the first one is the method due to

364
00:13:54,560 --> 00:13:57,360
corona and tolkien which was improved by

365
00:13:57,360 --> 00:13:59,519
debres in his work

366
00:13:59,519 --> 00:14:02,320
next are two newly proposed methods the

367
00:14:02,320 --> 00:14:04,639
straightforward fix and the dual lookup

368
00:14:04,639 --> 00:14:05,760
method

369
00:14:05,760 --> 00:14:07,440
the three methods offer trade-off

370
00:14:07,440 --> 00:14:10,079
between pre-computation cost conversion

371
00:14:10,079 --> 00:14:13,120
cost and size of the tables in terms of

372
00:14:13,120 --> 00:14:15,279
pre-computation cost the lowest number

373
00:14:15,279 --> 00:14:17,279
of cycle counts is found for the

374
00:14:17,279 --> 00:14:20,240
improved method of current children

375
00:14:20,240 --> 00:14:22,399
we look at the online conversion cost

376
00:14:22,399 --> 00:14:24,480
the fastest conversion is found for the

377
00:14:24,480 --> 00:14:27,040
fixed method of the price in terms of

378
00:14:27,040 --> 00:14:29,279
memory footprint the lowest cost is

379
00:14:29,279 --> 00:14:31,920
found for our dual lookup method

380
00:14:31,920 --> 00:14:34,079
to fully exploit this low memory cost a

381
00:14:34,079 --> 00:14:36,160
technique called the lsb trick must be

382
00:14:36,160 --> 00:14:39,040
used which is described in the paper

383
00:14:39,040 --> 00:14:40,560
we also want to stress that the low

384
00:14:40,560 --> 00:14:42,240
memory footprint of the dual lookup

385
00:14:42,240 --> 00:14:45,360
method sales well to larger conversion

386
00:14:45,360 --> 00:14:48,399
for example for 64-bit conversions the

387
00:14:48,399 --> 00:14:50,880
memory footprint is a factor four lower

388
00:14:50,880 --> 00:14:52,240
than the memory footprint of the

389
00:14:52,240 --> 00:14:54,720
quarantine methods

390
00:14:54,720 --> 00:14:56,800
again all of these results are readily

391
00:14:56,800 --> 00:14:58,720
available in our paper and we happily

392
00:14:58,720 --> 00:15:00,480
invite you to have a look

393
00:15:00,480 --> 00:15:02,800
to conclude our work we analyzed and

394
00:15:02,800 --> 00:15:05,040
compared table-based a2b compression

395
00:15:05,040 --> 00:15:06,399
methods

396
00:15:06,399 --> 00:15:08,560
table-based methods are typically the

397
00:15:08,560 --> 00:15:11,279
most efficient ones to do first order a

398
00:15:11,279 --> 00:15:13,440
to b conversion they have already been

399
00:15:13,440 --> 00:15:15,440
heavily used in masking post quantum

400
00:15:15,440 --> 00:15:18,480
cryptography schemes like saber or kyber

401
00:15:18,480 --> 00:15:20,160
and we expect that they will still be

402
00:15:20,160 --> 00:15:22,480
used more in the future

403
00:15:22,480 --> 00:15:24,240
in our work we found a security

404
00:15:24,240 --> 00:15:26,639
vulnerability in a table based method

405
00:15:26,639 --> 00:15:30,240
that has been around since chess 2012.

406
00:15:30,240 --> 00:15:32,079
we believe that it shows the importance

407
00:15:32,079 --> 00:15:34,480
of both security proofs and practical

408
00:15:34,480 --> 00:15:37,199
measurements when proposing new masked

409
00:15:37,199 --> 00:15:39,440
implementations

410
00:15:39,440 --> 00:15:41,680
to remedy the problem we propose two new

411
00:15:41,680 --> 00:15:43,360
methods that offer a time memory

412
00:15:43,360 --> 00:15:44,639
trade-off

413
00:15:44,639 --> 00:15:46,720
there is a straightforward fixed method

414
00:15:46,720 --> 00:15:48,560
that keeps the performance of the

415
00:15:48,560 --> 00:15:50,800
original method at the cost of an

416
00:15:50,800 --> 00:15:53,120
increased memory footprint

417
00:15:53,120 --> 00:15:55,279
we also proposed a dual lookup method

418
00:15:55,279 --> 00:15:57,600
that requires an extra table lookup and

419
00:15:57,600 --> 00:16:00,000
therefore has reduced performance but

420
00:16:00,000 --> 00:16:02,079
this dual lookup method keeps the memory

421
00:16:02,079 --> 00:16:04,720
footprint significantly lower than other

422
00:16:04,720 --> 00:16:06,320
methods

423
00:16:06,320 --> 00:16:07,759
finally we aim to make our

424
00:16:07,759 --> 00:16:09,920
implementations publicly available at

425
00:16:09,920 --> 00:16:12,079
the link shown on this slide and we hope

426
00:16:12,079 --> 00:16:14,399
that they will see use in future masked

427
00:16:14,399 --> 00:16:16,240
implementations

428
00:16:16,240 --> 00:16:18,079
finally both you and peter and i would

429
00:16:18,079 --> 00:16:19,680
like to thank you for listening to our

430
00:16:19,680 --> 00:16:22,160
talk and do not hesitate to reach out to

431
00:16:22,160 --> 00:16:26,279
us should you have any questions

