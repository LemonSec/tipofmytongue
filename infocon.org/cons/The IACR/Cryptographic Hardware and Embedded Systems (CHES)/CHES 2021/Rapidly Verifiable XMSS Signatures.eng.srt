1
00:00:01,760 --> 00:00:04,400
so welcome everyone my name is christine

2
00:00:04,400 --> 00:00:07,120
and today i'll be talking about rapidly

3
00:00:07,120 --> 00:00:10,080
verifiable xmss signatures

4
00:00:10,080 --> 00:00:12,480
and this is joint work with your boss

5
00:00:12,480 --> 00:00:16,840
andreas hilzing and joss

6
00:00:18,160 --> 00:00:20,800
so as an introduction let me

7
00:00:20,800 --> 00:00:24,320
first set the setting so we have alice

8
00:00:24,320 --> 00:00:26,240
who wants to send a message to bob

9
00:00:26,240 --> 00:00:28,720
namely to meet for drinks at 4

10
00:00:28,720 --> 00:00:31,119
and to make sure that bob can verify

11
00:00:31,119 --> 00:00:33,280
that this message actually comes from

12
00:00:33,280 --> 00:00:34,239
alice

13
00:00:34,239 --> 00:00:37,520
she signs it with some signature scheme

14
00:00:37,520 --> 00:00:40,160
she then sends the result along a secure

15
00:00:40,160 --> 00:00:42,559
channel to bot and bob can take this

16
00:00:42,559 --> 00:00:45,520
signature and verify it against alice's

17
00:00:45,520 --> 00:00:48,800
certificate to make sure that

18
00:00:48,800 --> 00:00:50,640
that the message really came from alice

19
00:00:50,640 --> 00:00:54,320
and not not some other person

20
00:00:54,719 --> 00:00:57,440
so this is a quite a simple setting in

21
00:00:57,440 --> 00:00:58,559
reality

22
00:00:58,559 --> 00:01:01,680
it can be a bit more complicated so for

23
00:01:01,680 --> 00:01:05,840
instance alice can be a large company

24
00:01:05,840 --> 00:01:06,880
who

25
00:01:06,880 --> 00:01:09,920
wants to send a new firmware image to

26
00:01:09,920 --> 00:01:12,640
all their devices

27
00:01:12,640 --> 00:01:15,200
to make sure these devices can verify

28
00:01:15,200 --> 00:01:17,680
that the firmware image actually came

29
00:01:17,680 --> 00:01:19,840
from company alice they sign it with

30
00:01:19,840 --> 00:01:21,600
some signature scheme

31
00:01:21,600 --> 00:01:24,560
and send it over a secure channel

32
00:01:24,560 --> 00:01:26,799
but now in this case bob is not one

33
00:01:26,799 --> 00:01:30,640
person but actually many iot devices

34
00:01:30,640 --> 00:01:31,439
so

35
00:01:31,439 --> 00:01:34,479
this this message is and along many

36
00:01:34,479 --> 00:01:36,159
secure channels

37
00:01:36,159 --> 00:01:38,960
but then all these devices do verify the

38
00:01:38,960 --> 00:01:41,840
same signature against the same

39
00:01:41,840 --> 00:01:44,159
public key certificate to verify the

40
00:01:44,159 --> 00:01:46,960
authenticity

41
00:01:48,560 --> 00:01:51,040
and this this scenario this setting is

42
00:01:51,040 --> 00:01:53,360
our use case so we have

43
00:01:53,360 --> 00:01:56,240
one signature and many iot devices

44
00:01:56,240 --> 00:01:57,680
verifying it

45
00:01:57,680 --> 00:01:59,759
and beyond the firmware updates that

46
00:01:59,759 --> 00:02:01,680
were just sketched in the in the

47
00:02:01,680 --> 00:02:03,040
previous slides

48
00:02:03,040 --> 00:02:04,159
another

49
00:02:04,159 --> 00:02:06,240
situation where where this use case

50
00:02:06,240 --> 00:02:08,800
applies is that of secure boots so it's

51
00:02:08,800 --> 00:02:11,440
it's a pretty relevant use case and used

52
00:02:11,440 --> 00:02:13,840
in many devices

53
00:02:13,840 --> 00:02:16,720
and in this use case designer actually

54
00:02:16,720 --> 00:02:19,599
has access to significant computational

55
00:02:19,599 --> 00:02:22,560
resources since a large company can use

56
00:02:22,560 --> 00:02:25,280
the cloud or a computation firm to to

57
00:02:25,280 --> 00:02:27,440
set their signature

58
00:02:27,440 --> 00:02:29,440
while on the other hand the file the

59
00:02:29,440 --> 00:02:32,480
verifier might be some constraint device

60
00:02:32,480 --> 00:02:34,000
and

61
00:02:34,000 --> 00:02:36,080
they might not have these computational

62
00:02:36,080 --> 00:02:38,000
resources and therefore it might be

63
00:02:38,000 --> 00:02:41,440
advantageous to if possible put more of

64
00:02:41,440 --> 00:02:44,239
the computational load on the signer and

65
00:02:44,239 --> 00:02:46,959
not the verifier

66
00:02:46,959 --> 00:02:49,599
and in this work we specifically look at

67
00:02:49,599 --> 00:02:53,280
the case of xmss so can this tradeoff be

68
00:02:53,280 --> 00:02:55,680
made possible for a standardized

69
00:02:55,680 --> 00:02:58,159
post-quantum digital signature scheme

70
00:02:58,159 --> 00:03:01,280
like xmss

71
00:03:01,760 --> 00:03:04,640
we start with an executive summary that

72
00:03:04,640 --> 00:03:08,319
basically says yes we can

73
00:03:08,319 --> 00:03:10,480
to add a little bit more detail that

74
00:03:10,480 --> 00:03:11,760
here

75
00:03:11,760 --> 00:03:13,599
in this work we actually present a

76
00:03:13,599 --> 00:03:17,280
faster xmss signature verification

77
00:03:17,280 --> 00:03:19,680
with the aim at the you the use case i

78
00:03:19,680 --> 00:03:22,400
just sketched on embedded devices

79
00:03:22,400 --> 00:03:24,959
and to achieve this faster verification

80
00:03:24,959 --> 00:03:27,680
we use a probabilistic method which was

81
00:03:27,680 --> 00:03:29,599
introduced by

82
00:03:29,599 --> 00:03:32,799
perrin zamboni martin's custodio and

83
00:03:32,799 --> 00:03:36,080
martina in 2018

84
00:03:36,080 --> 00:03:39,120
but we extend our work by various

85
00:03:39,120 --> 00:03:42,239
avenues namely we add a security proof

86
00:03:42,239 --> 00:03:45,440
that adding their technique to xmss

87
00:03:45,440 --> 00:03:48,319
actually means it's still secure

88
00:03:48,319 --> 00:03:51,440
as well as we add a statistical analysis

89
00:03:51,440 --> 00:03:54,239
to to show what the performance of the

90
00:03:54,239 --> 00:03:56,799
method is

91
00:03:56,879 --> 00:03:57,840
then

92
00:03:57,840 --> 00:04:00,799
along the way of creating this security

93
00:04:00,799 --> 00:04:02,000
proof

94
00:04:02,000 --> 00:04:04,319
artwork actually also fills a previous

95
00:04:04,319 --> 00:04:07,200
gap in the xmss proof

96
00:04:07,200 --> 00:04:08,239
which

97
00:04:08,239 --> 00:04:10,400
shows resistance against mitigating

98
00:04:10,400 --> 00:04:12,840
multi-target attacks against the

99
00:04:12,840 --> 00:04:15,680
scheme and lastly

100
00:04:15,680 --> 00:04:18,320
in the paper we show that using a

101
00:04:18,320 --> 00:04:21,440
wrapper function around xmss

102
00:04:21,440 --> 00:04:23,600
actually our scheme is still compatible

103
00:04:23,600 --> 00:04:26,320
with rc

104
00:04:26,840 --> 00:04:29,759
then given these things we also

105
00:04:29,759 --> 00:04:32,160
implement our scheme and our paper shows

106
00:04:32,160 --> 00:04:34,800
that combining these things with further

107
00:04:34,800 --> 00:04:38,560
known optimizations it allows

108
00:04:38,560 --> 00:04:39,360
for

109
00:04:39,360 --> 00:04:42,080
trade-off of a signature generation of

110
00:04:42,080 --> 00:04:45,440
about a minute on the x86 in dual core

111
00:04:45,440 --> 00:04:48,160
can expect a speed up factor of over two

112
00:04:48,160 --> 00:04:50,320
for the verifier if it's a small

113
00:04:50,320 --> 00:04:51,919
embedded device

114
00:04:51,919 --> 00:04:54,080
an arm cortex m4

115
00:04:54,080 --> 00:04:56,240
and of course we show other trade-offs

116
00:04:56,240 --> 00:04:58,720
are possible but just as an executive

117
00:04:58,720 --> 00:05:00,240
summary

118
00:05:00,240 --> 00:05:04,960
this is quite a quite a nice achievement

119
00:05:07,440 --> 00:05:08,240
then

120
00:05:08,240 --> 00:05:10,479
what will i talk about in the remainder

121
00:05:10,479 --> 00:05:13,440
of this talk well first of all i'll talk

122
00:05:13,440 --> 00:05:16,320
a bit about what xmss is namely a

123
00:05:16,320 --> 00:05:19,520
stateful hash based signature scheme

124
00:05:19,520 --> 00:05:22,880
um then to show the the techniques that

125
00:05:22,880 --> 00:05:25,199
are used i'll explain how one-time

126
00:05:25,199 --> 00:05:28,240
signatures work and how specifically

127
00:05:28,240 --> 00:05:31,759
winternet's one-time signatures work

128
00:05:31,759 --> 00:05:34,720
before diving into the contributions of

129
00:05:34,720 --> 00:05:37,520
our paper namely replicately verifiable

130
00:05:37,520 --> 00:05:38,800
signatures

131
00:05:38,800 --> 00:05:41,280
where i'll first show how the algorithm

132
00:05:41,280 --> 00:05:44,080
works and how it incorporates the work

133
00:05:44,080 --> 00:05:45,280
of pc

134
00:05:45,280 --> 00:05:46,960
mcm

135
00:05:46,960 --> 00:05:49,039
then i'll give a brief outline of the

136
00:05:49,039 --> 00:05:50,479
security proof

137
00:05:50,479 --> 00:05:53,840
and go into some of the things we did to

138
00:05:53,840 --> 00:05:56,160
analyze the performance of the rapidly

139
00:05:56,160 --> 00:05:58,319
verifiable algorithm

140
00:05:58,319 --> 00:06:00,560
before i end with results and a

141
00:06:00,560 --> 00:06:03,039
conclusion

142
00:06:04,319 --> 00:06:06,800
so then first stateful hash based

143
00:06:06,800 --> 00:06:09,280
schemes

144
00:06:09,360 --> 00:06:12,720
so xmss or extended miracle signature

145
00:06:12,720 --> 00:06:13,840
scheme

146
00:06:13,840 --> 00:06:15,919
it works as follows

147
00:06:15,919 --> 00:06:18,240
so we start from a one time signature

148
00:06:18,240 --> 00:06:21,039
keeper depicted here down below where

149
00:06:21,039 --> 00:06:23,280
assigner creates one private key

150
00:06:23,280 --> 00:06:25,680
computes the corresponding public key

151
00:06:25,680 --> 00:06:29,120
and can sign one message with it

152
00:06:29,120 --> 00:06:31,759
well this is fine but now if designer

153
00:06:31,759 --> 00:06:34,319
has to do that many times inside many

154
00:06:34,319 --> 00:06:36,880
messages they have to make many key

155
00:06:36,880 --> 00:06:38,160
pairs

156
00:06:38,160 --> 00:06:40,400
and publicizing all these public keys is

157
00:06:40,400 --> 00:06:42,800
of course not very convenient

158
00:06:42,800 --> 00:06:46,639
so in the 70s ralph merkel came with the

159
00:06:46,639 --> 00:06:49,360
idea of a merkle tree

160
00:06:49,360 --> 00:06:51,520
and the merkle tree sort of solves this

161
00:06:51,520 --> 00:06:52,639
problem

162
00:06:52,639 --> 00:06:55,199
by posing that you can take this one

163
00:06:55,199 --> 00:06:56,479
time

164
00:06:56,479 --> 00:06:59,599
signature public key and hash it into a

165
00:06:59,599 --> 00:07:03,039
binary merkle tree as a leaf node

166
00:07:03,039 --> 00:07:06,080
and then what you can do is pairwise

167
00:07:06,080 --> 00:07:07,039
hash

168
00:07:07,039 --> 00:07:09,680
all these nodes together until there is

169
00:07:09,680 --> 00:07:10,960
one

170
00:07:10,960 --> 00:07:13,759
top note the public key of the merkle

171
00:07:13,759 --> 00:07:16,000
signature scheme

172
00:07:16,000 --> 00:07:18,880
which can then serve as a public key for

173
00:07:18,880 --> 00:07:22,719
all eight one-time signatures

174
00:07:24,080 --> 00:07:26,160
and this changes a bit what the

175
00:07:26,160 --> 00:07:29,360
signature looks like so for a one-time

176
00:07:29,360 --> 00:07:31,599
signature pair which we saw

177
00:07:31,599 --> 00:07:33,520
here on the left

178
00:07:33,520 --> 00:07:36,880
we just had ots signature zero

179
00:07:36,880 --> 00:07:39,759
but the merkle scheme or xmss in this

180
00:07:39,759 --> 00:07:42,960
case also adds the states

181
00:07:42,960 --> 00:07:45,919
as in the signature so that the verifier

182
00:07:45,919 --> 00:07:48,479
knows which leaf of the merkle tree is

183
00:07:48,479 --> 00:07:50,000
being signed with

184
00:07:50,000 --> 00:07:52,960
as well as an authentication path

185
00:07:52,960 --> 00:07:55,759
and the goal of an authentication path

186
00:07:55,759 --> 00:07:58,479
is that it's a set of nodes in the

187
00:07:58,479 --> 00:08:01,759
merkle tree here depicted in red

188
00:08:01,759 --> 00:08:05,039
such that if a verifier

189
00:08:05,039 --> 00:08:07,840
computes the one-time signature public

190
00:08:07,840 --> 00:08:08,800
key

191
00:08:08,800 --> 00:08:10,560
they can then

192
00:08:10,560 --> 00:08:13,759
in order hash the hash values with

193
00:08:13,759 --> 00:08:16,400
authentication paths to recover a

194
00:08:16,400 --> 00:08:18,639
candidate for the public key which can

195
00:08:18,639 --> 00:08:20,960
then be checked against the public key

196
00:08:20,960 --> 00:08:24,599
of the merkle scheme

197
00:08:26,639 --> 00:08:29,199
so in summary a one-time signature

198
00:08:29,199 --> 00:08:32,080
scheme has one secret key one public key

199
00:08:32,080 --> 00:08:34,320
and can sign one

200
00:08:34,320 --> 00:08:36,479
one signature

201
00:08:36,479 --> 00:08:38,640
which is for most applications pretty

202
00:08:38,640 --> 00:08:40,159
impractical

203
00:08:40,159 --> 00:08:44,240
and xmss and other schemes like lms or

204
00:08:44,240 --> 00:08:47,600
others combine these one-time signatures

205
00:08:47,600 --> 00:08:51,440
into a larger scheme using local trees

206
00:08:51,440 --> 00:08:54,640
and as a result for a height h

207
00:08:54,640 --> 00:08:57,040
merkle tree which is the number of

208
00:08:57,040 --> 00:09:01,600
layers in the local tree and a parameter

209
00:09:01,600 --> 00:09:04,240
each one time signature can sign one

210
00:09:04,240 --> 00:09:07,200
message but they can all verify against

211
00:09:07,200 --> 00:09:10,480
the same public key

212
00:09:10,800 --> 00:09:12,480
and the nice thing about these schemes

213
00:09:12,480 --> 00:09:14,640
is that they're already standardized by

214
00:09:14,640 --> 00:09:16,959
nist in a special publication that can

215
00:09:16,959 --> 00:09:20,920
be seen on the left here

216
00:09:22,640 --> 00:09:24,399
so after

217
00:09:24,399 --> 00:09:26,880
the grand scheme of things we move

218
00:09:26,880 --> 00:09:29,440
to these one-time signatures

219
00:09:29,440 --> 00:09:31,920
so how do winter nuts one-time

220
00:09:31,920 --> 00:09:35,200
signatures actually work

221
00:09:35,200 --> 00:09:39,600
well if we have a m bit message digest m

222
00:09:39,600 --> 00:09:41,760
of a certain message that needs to be

223
00:09:41,760 --> 00:09:42,800
signed

224
00:09:42,800 --> 00:09:44,640
the observation is you can actually

225
00:09:44,640 --> 00:09:45,839
write it

226
00:09:45,839 --> 00:09:49,279
rewrite it in a base w representation so

227
00:09:49,279 --> 00:09:52,640
we take the m bits and split them up

228
00:09:52,640 --> 00:09:54,480
into l1

229
00:09:54,480 --> 00:09:55,519
chunks

230
00:09:55,519 --> 00:09:59,519
of size w and then l1 would be equal to

231
00:09:59,519 --> 00:10:02,480
the the bit length of the message digest

232
00:10:02,480 --> 00:10:06,079
divided by the bit length of w

233
00:10:06,079 --> 00:10:08,320
so this is quite some notation but as an

234
00:10:08,320 --> 00:10:12,800
example if we want to write 37 in base 4

235
00:10:12,800 --> 00:10:14,800
then what we do is we take the bit

236
00:10:14,800 --> 00:10:17,040
representation and simply split it up

237
00:10:17,040 --> 00:10:19,120
into chunks of two

238
00:10:19,120 --> 00:10:21,120
since that's four values being

239
00:10:21,120 --> 00:10:23,839
represented

240
00:10:28,000 --> 00:10:30,079
and then a simplified

241
00:10:30,079 --> 00:10:32,959
view on the key generation of

242
00:10:32,959 --> 00:10:35,519
internet's one-time signature scheme

243
00:10:35,519 --> 00:10:38,320
is that we have a hash function h

244
00:10:38,320 --> 00:10:41,760
we generate a secret key

245
00:10:41,760 --> 00:10:46,000
for each of these base w chunks that can

246
00:10:46,000 --> 00:10:47,600
be in the m bit head

247
00:10:47,600 --> 00:10:51,200
in the m bit message digest

248
00:10:51,200 --> 00:10:54,640
and we simply apply the hash function to

249
00:10:54,640 --> 00:10:56,720
each of these secret keys and we do not

250
00:10:56,720 --> 00:10:58,079
do that once

251
00:10:58,079 --> 00:11:00,560
no we repeat that and we repeat that

252
00:11:00,560 --> 00:11:03,920
specifically w minus one times to get

253
00:11:03,920 --> 00:11:05,920
the public key of the maintenance one

254
00:11:05,920 --> 00:11:08,719
time signature

255
00:11:09,519 --> 00:11:12,959
so this seems uh pretty simple

256
00:11:12,959 --> 00:11:16,640
um but once we have these secret keys

257
00:11:16,640 --> 00:11:18,480
and public keys we of course want to

258
00:11:18,480 --> 00:11:20,880
sign the message with them

259
00:11:20,880 --> 00:11:23,760
so how this works is as follows

260
00:11:23,760 --> 00:11:26,640
we have this message digest m here at

261
00:11:26,640 --> 00:11:30,399
the top and we also split that up into

262
00:11:30,399 --> 00:11:32,720
these w base

263
00:11:32,720 --> 00:11:35,040
bit

264
00:11:35,200 --> 00:11:37,440
chunks let's say

265
00:11:37,440 --> 00:11:39,440
and then i'm simplifying a little

266
00:11:39,440 --> 00:11:41,120
because for internet's one time

267
00:11:41,120 --> 00:11:43,360
signature actually would

268
00:11:43,360 --> 00:11:44,480
chuck

269
00:11:44,480 --> 00:11:47,200
another few chunks behind that namely

270
00:11:47,200 --> 00:11:49,040
the czech zone and the goal of this

271
00:11:49,040 --> 00:11:52,240
checksum is to prevent forgeries i won't

272
00:11:52,240 --> 00:11:54,720
give any details on it but

273
00:11:54,720 --> 00:11:58,959
just assume that it's a few more

274
00:11:58,959 --> 00:12:03,359
a few more chunks being put behind here

275
00:12:04,000 --> 00:12:06,399
and now we want to sign so we have our

276
00:12:06,399 --> 00:12:09,200
secret key which are these notes in the

277
00:12:09,200 --> 00:12:11,760
beginning each one

278
00:12:11,760 --> 00:12:14,480
from 1 up till l

279
00:12:14,480 --> 00:12:17,360
and now if we want to sign

280
00:12:17,360 --> 00:12:20,639
sign a message we start at the the first

281
00:12:20,639 --> 00:12:22,880
base w value

282
00:12:22,880 --> 00:12:26,880
and we map this value to a place in the

283
00:12:26,880 --> 00:12:29,360
secret key one chain and specifically

284
00:12:29,360 --> 00:12:31,519
for instance if this value

285
00:12:31,519 --> 00:12:32,800
is

286
00:12:32,800 --> 00:12:36,720
uh three then we would compute

287
00:12:36,720 --> 00:12:40,160
the the third node after the secret key

288
00:12:40,160 --> 00:12:42,720
with this value

289
00:12:42,720 --> 00:12:44,720
and we repeat this process for all

290
00:12:44,720 --> 00:12:48,720
chunks so p2 b3 up to bl which is also

291
00:12:48,720 --> 00:12:51,440
here the the eighth value in the chain

292
00:12:51,440 --> 00:12:54,959
and this is then our signature

293
00:12:58,480 --> 00:13:01,279
so this looks pretty simple

294
00:13:01,279 --> 00:13:03,120
then the question remains is how to

295
00:13:03,120 --> 00:13:05,120
verify this signature

296
00:13:05,120 --> 00:13:07,120
so this would work as follows the

297
00:13:07,120 --> 00:13:09,600
verifier knows the message knows the

298
00:13:09,600 --> 00:13:12,079
internet's constant knows the signature

299
00:13:12,079 --> 00:13:14,160
public and the public key

300
00:13:14,160 --> 00:13:16,959
as well as the hash function

301
00:13:16,959 --> 00:13:20,079
and what they can do is then also chunk

302
00:13:20,079 --> 00:13:22,880
the message digest up in the same manner

303
00:13:22,880 --> 00:13:25,279
as the designer did

304
00:13:25,279 --> 00:13:26,959
map it to

305
00:13:26,959 --> 00:13:27,760
the

306
00:13:27,760 --> 00:13:31,440
the chains where the verifier does not

307
00:13:31,440 --> 00:13:33,440
know these previous versions where the

308
00:13:33,440 --> 00:13:36,240
signer did

309
00:13:36,480 --> 00:13:38,399
and then they can just start applying

310
00:13:38,399 --> 00:13:41,199
the hash function so for s1 they can

311
00:13:41,199 --> 00:13:42,720
apply h

312
00:13:42,720 --> 00:13:44,480
again and again

313
00:13:44,480 --> 00:13:47,600
and they apply w minus 1 minus the value

314
00:13:47,600 --> 00:13:49,279
of p1 times

315
00:13:49,279 --> 00:13:51,440
because applying the hash function this

316
00:13:51,440 --> 00:13:53,360
many times is supposed to lead to the

317
00:13:53,360 --> 00:13:55,519
public key one

318
00:13:55,519 --> 00:13:57,680
and this can again be repeated for all

319
00:13:57,680 --> 00:14:01,120
chunks so also for sigma l you go all

320
00:14:01,120 --> 00:14:02,959
the way to the end

321
00:14:02,959 --> 00:14:04,720
and then you verify against the public

322
00:14:04,720 --> 00:14:07,920
key quite simple

323
00:14:10,079 --> 00:14:12,079
so that was the details about what's

324
00:14:12,079 --> 00:14:14,399
plus that we need to know

325
00:14:14,399 --> 00:14:16,079
and now we can actually move to the

326
00:14:16,079 --> 00:14:18,160
contributions of our paper which are

327
00:14:18,160 --> 00:14:22,240
rapidly verifiable signatures

328
00:14:23,920 --> 00:14:26,480
and before showing you the algorithm the

329
00:14:26,480 --> 00:14:31,279
adapted xmss algorithm we present

330
00:14:31,279 --> 00:14:33,920
we first want to give the idea

331
00:14:33,920 --> 00:14:35,040
of

332
00:14:35,040 --> 00:14:37,360
of the underlying technique which is as

333
00:14:37,360 --> 00:14:38,959
follows

334
00:14:38,959 --> 00:14:41,279
namely the cost of verification of a

335
00:14:41,279 --> 00:14:44,000
watts plus signature is actually largely

336
00:14:44,000 --> 00:14:47,040
determined by the value of the l1

337
00:14:47,040 --> 00:14:48,800
integers p1

338
00:14:48,800 --> 00:14:50,959
up to bl1

339
00:14:50,959 --> 00:14:52,160
so

340
00:14:52,160 --> 00:14:55,760
here b1 was the fourth node in chain and

341
00:14:55,760 --> 00:14:58,959
the verifier actually has to compute

342
00:14:58,959 --> 00:15:02,240
one two three four five six seven eight

343
00:15:02,240 --> 00:15:05,199
nine hash functions to have something to

344
00:15:05,199 --> 00:15:08,560
verify against the public key

345
00:15:08,560 --> 00:15:10,720
now for the verifier it would be much

346
00:15:10,720 --> 00:15:12,560
easier if this value was actually

347
00:15:12,560 --> 00:15:14,160
towards the end of the chain and they

348
00:15:14,160 --> 00:15:16,480
would only have to do a few hash

349
00:15:16,480 --> 00:15:18,480
functions

350
00:15:18,480 --> 00:15:20,639
well

351
00:15:20,639 --> 00:15:23,279
this is where winternidge tuning comes

352
00:15:23,279 --> 00:15:27,760
in so pset mc18 observe that these b1 up

353
00:15:27,760 --> 00:15:31,279
to bl1 values are determined by the base

354
00:15:31,279 --> 00:15:34,560
w representation of the message digest

355
00:15:34,560 --> 00:15:37,440
and we cannot just change the output of

356
00:15:37,440 --> 00:15:38,839
a hash

357
00:15:38,839 --> 00:15:41,120
function but what we

358
00:15:41,120 --> 00:15:43,199
what we can do and what they show in

359
00:15:43,199 --> 00:15:45,199
pset mc18

360
00:15:45,199 --> 00:15:48,079
is that by adding a counter in the

361
00:15:48,079 --> 00:15:50,480
message hash

362
00:15:50,480 --> 00:15:53,519
and not just one counter but t different

363
00:15:53,519 --> 00:15:55,120
counters

364
00:15:55,120 --> 00:15:58,959
you get a different output m

365
00:16:02,079 --> 00:16:04,240
and

366
00:16:04,240 --> 00:16:06,480
by appending that counter and then

367
00:16:06,480 --> 00:16:09,279
choosing the the chain values that you

368
00:16:09,279 --> 00:16:11,839
like best so the ones that have the

369
00:16:11,839 --> 00:16:14,000
least verification time

370
00:16:14,000 --> 00:16:16,240
and therefore the ones that maximize the

371
00:16:16,240 --> 00:16:19,199
cumulative chain lines

372
00:16:19,199 --> 00:16:20,639
if you choose this message and

373
00:16:20,639 --> 00:16:23,680
verification time goes down

374
00:16:23,680 --> 00:16:26,399
and this is quite a nice observation

375
00:16:26,399 --> 00:16:29,040
and in the work and what i'll talk to in

376
00:16:29,040 --> 00:16:31,440
about in the next slide we fill in some

377
00:16:31,440 --> 00:16:33,440
gaps of these papers

378
00:16:33,440 --> 00:16:34,720
namely

379
00:16:34,720 --> 00:16:36,959
the message length dependents which we

380
00:16:36,959 --> 00:16:39,759
show you don't need

381
00:16:39,759 --> 00:16:42,560
in our work we also provide a thorough

382
00:16:42,560 --> 00:16:44,720
security analysis that show that

383
00:16:44,720 --> 00:16:47,199
applying this technique in specifically

384
00:16:47,199 --> 00:16:51,519
xmss does not degrade security

385
00:16:51,519 --> 00:16:53,120
as well as we give a performance

386
00:16:53,120 --> 00:16:55,839
analysis so we analyze

387
00:16:55,839 --> 00:16:58,880
what kind of effect choosing different

388
00:16:58,880 --> 00:17:00,720
values for t has

389
00:17:00,720 --> 00:17:03,519
and lastly we also apply it to the xmss

390
00:17:03,519 --> 00:17:06,240
implementation

391
00:17:07,760 --> 00:17:10,559
so first the xmss adapted algorithm

392
00:17:10,559 --> 00:17:12,880
which is shown here in the middle and an

393
00:17:12,880 --> 00:17:15,039
algorithm one in the paper

394
00:17:15,039 --> 00:17:18,559
i won't go through this in detail

395
00:17:18,559 --> 00:17:20,880
but i will just highlight that this

396
00:17:20,880 --> 00:17:23,280
block in blue that's where in the

397
00:17:23,280 --> 00:17:26,119
algorithm we apply the core idea of

398
00:17:26,119 --> 00:17:29,840
pcmc18 mcm18

399
00:17:29,840 --> 00:17:32,880
to xmss so we add these t counters to

400
00:17:32,880 --> 00:17:35,600
the ash and determine which of these

401
00:17:35,600 --> 00:17:38,640
counters results in the best values and

402
00:17:38,640 --> 00:17:41,919
the best time or the lowest time for

403
00:17:41,919 --> 00:17:44,840
verifier which is what we

404
00:17:44,840 --> 00:17:47,919
want and this is also where we include

405
00:17:47,919 --> 00:17:50,320
this message length independence that we

406
00:17:50,320 --> 00:17:51,280
add

407
00:17:51,280 --> 00:17:53,360
so we show that this adding these

408
00:17:53,360 --> 00:17:55,039
counters can actually be done really

409
00:17:55,039 --> 00:17:57,760
fast even for large messages

410
00:17:57,760 --> 00:17:59,840
by only iterating over the last

411
00:17:59,840 --> 00:18:01,919
hashblock

412
00:18:01,919 --> 00:18:04,240
so if we straightforwardly apply the

413
00:18:04,240 --> 00:18:06,039
technique of

414
00:18:06,039 --> 00:18:09,440
pcmcm18 then for large messages and

415
00:18:09,440 --> 00:18:11,840
applying these many counters it would

416
00:18:11,840 --> 00:18:13,200
fast

417
00:18:13,200 --> 00:18:16,000
turn into a huge signature generation

418
00:18:16,000 --> 00:18:19,520
time for large values of t

419
00:18:19,520 --> 00:18:21,679
while we show that if we

420
00:18:21,679 --> 00:18:24,880
uh only iterate over the last hash block

421
00:18:24,880 --> 00:18:27,360
then with this pre-computation than

422
00:18:27,360 --> 00:18:29,760
actually designing time remains constant

423
00:18:29,760 --> 00:18:32,080
for for a different message size which

424
00:18:32,080 --> 00:18:35,678
is a huge progress

425
00:18:41,200 --> 00:18:44,000
the next contribution is the ques

426
00:18:44,000 --> 00:18:45,840
answering the question is it still

427
00:18:45,840 --> 00:18:47,360
secure

428
00:18:47,360 --> 00:18:49,440
so the answer here is again

429
00:18:49,440 --> 00:18:53,600
straightforwardly yes it's still secure

430
00:18:53,679 --> 00:18:55,760
and as a high-level proof outline in the

431
00:18:55,760 --> 00:18:58,880
paper we first analyze what impact

432
00:18:58,880 --> 00:19:01,120
adding this counter has

433
00:19:01,120 --> 00:19:03,840
to the to the message hash construction

434
00:19:03,840 --> 00:19:07,840
for xmss type signatures

435
00:19:07,919 --> 00:19:09,840
and then after analyzing this we

436
00:19:09,840 --> 00:19:12,160
formulate the necessary security

437
00:19:12,160 --> 00:19:14,480
assumptions all these hash functions as

438
00:19:14,480 --> 00:19:16,640
a standard model property

439
00:19:16,640 --> 00:19:19,280
and given given these

440
00:19:19,280 --> 00:19:22,160
this pre-work we can then analyze the

441
00:19:22,160 --> 00:19:25,360
complexity of generic attacks against

442
00:19:25,360 --> 00:19:27,280
against the scheme

443
00:19:27,280 --> 00:19:28,880
and provide a bound for black book

444
00:19:28,880 --> 00:19:32,960
attacks against the random function

445
00:19:33,919 --> 00:19:35,760
yeah so i won't go in further details

446
00:19:35,760 --> 00:19:37,600
for the proof details can be found in

447
00:19:37,600 --> 00:19:40,000
the paper but what might be nice to

448
00:19:40,000 --> 00:19:41,520
mention is that

449
00:19:41,520 --> 00:19:43,360
while constructing the proof for our

450
00:19:43,360 --> 00:19:46,240
technique we also fill a previous gap in

451
00:19:46,240 --> 00:19:48,320
the xmss proof

452
00:19:48,320 --> 00:19:50,240
that shows multi-target attack

453
00:19:50,240 --> 00:19:53,240
resistance

454
00:19:56,080 --> 00:19:57,360
then

455
00:19:57,360 --> 00:20:01,200
on a performance analysis level

456
00:20:01,200 --> 00:20:04,880
so given this adapted signature

457
00:20:04,880 --> 00:20:08,799
generation and verification scheme

458
00:20:08,799 --> 00:20:11,039
for an implementer it might be a

459
00:20:11,039 --> 00:20:13,760
question on how to set t and what kind

460
00:20:13,760 --> 00:20:17,039
of performance can we expect them

461
00:20:17,039 --> 00:20:19,280
and we do this in two ways in the paper

462
00:20:19,280 --> 00:20:22,480
the first way is that we in a simplified

463
00:20:22,480 --> 00:20:23,440
model

464
00:20:23,440 --> 00:20:25,840
prove the number of hashes an

465
00:20:25,840 --> 00:20:29,840
implementer can expect for a given set t

466
00:20:29,840 --> 00:20:31,280
and again

467
00:20:31,280 --> 00:20:33,679
the the theorem here is on the top left

468
00:20:33,679 --> 00:20:36,559
and i won't go into the full proof

469
00:20:36,559 --> 00:20:38,960
but the idea is that we first by the

470
00:20:38,960 --> 00:20:41,760
central limit theorem model

471
00:20:41,760 --> 00:20:43,280
the length of

472
00:20:43,280 --> 00:20:47,200
of the commutative l1 chain length

473
00:20:47,200 --> 00:20:50,880
and then given this distribution we use

474
00:20:50,880 --> 00:20:52,880
order statistics to determine the

475
00:20:52,880 --> 00:20:55,200
expectation of the maximum over t

476
00:20:55,200 --> 00:20:59,120
counter so if we have t times these

477
00:20:59,120 --> 00:21:02,400
average chain lines what do we expect

478
00:21:02,400 --> 00:21:05,440
the maximum to be

479
00:21:05,440 --> 00:21:08,080
and then lastly we trade the the chain

480
00:21:08,080 --> 00:21:09,440
links for the checks home a bit

481
00:21:09,440 --> 00:21:12,000
differently since uh as you can read in

482
00:21:12,000 --> 00:21:14,640
the paper they behave in a kind of

483
00:21:14,640 --> 00:21:17,919
special way but then we show that all

484
00:21:17,919 --> 00:21:20,080
three of these are quite solid

485
00:21:20,080 --> 00:21:21,200
assumptions

486
00:21:21,200 --> 00:21:22,880
[Music]

487
00:21:22,880 --> 00:21:25,120
in the paper and yeah you can see that

488
00:21:25,120 --> 00:21:27,360
there

489
00:21:27,679 --> 00:21:29,919
then beyond averages

490
00:21:29,919 --> 00:21:32,799
since for an implementer it might also

491
00:21:32,799 --> 00:21:35,280
be useful what is the maximum and

492
00:21:35,280 --> 00:21:37,840
minimum performance they can accept we

493
00:21:37,840 --> 00:21:40,480
also give confidence intervals

494
00:21:40,480 --> 00:21:43,039
for the expectation

495
00:21:43,039 --> 00:21:44,960
so we see that here on the left so for

496
00:21:44,960 --> 00:21:46,960
instance what you can see here

497
00:21:46,960 --> 00:21:50,559
is that if an implementer were to add

498
00:21:50,559 --> 00:21:53,120
2 to the power 40 counters to their hash

499
00:21:53,120 --> 00:21:54,559
message

500
00:21:54,559 --> 00:21:56,640
then we expect with

501
00:21:56,640 --> 00:21:59,280
i think 95 confidence

502
00:21:59,280 --> 00:22:00,720
that the number of hashes for the

503
00:22:00,720 --> 00:22:03,400
verifier would lie between about

504
00:22:03,400 --> 00:22:06,880
250 and 300 and a bit

505
00:22:06,880 --> 00:22:11,799
where previously it was around 500.

506
00:22:14,960 --> 00:22:18,640
then lastly we verified the performance

507
00:22:18,640 --> 00:22:22,880
of our rapidly verifiable xmss version

508
00:22:22,880 --> 00:22:24,720
and these results come from an

509
00:22:24,720 --> 00:22:26,720
adaptation we made of the represent

510
00:22:26,720 --> 00:22:29,440
reference implementation

511
00:22:29,440 --> 00:22:34,159
which we ran on a freedom k64 board

512
00:22:34,159 --> 00:22:38,000
this is a cortex m4 development board

513
00:22:38,000 --> 00:22:40,480
which gave us the following results

514
00:22:40,480 --> 00:22:43,039
namely here on the left we see

515
00:22:43,039 --> 00:22:45,360
a table with the trade-off between the

516
00:22:45,360 --> 00:22:47,440
signature generation time and the

517
00:22:47,440 --> 00:22:49,360
verification time

518
00:22:49,360 --> 00:22:52,000
by adding the counters

519
00:22:52,000 --> 00:22:54,400
so for instance here on the left

520
00:22:54,400 --> 00:22:58,400
if if a signer adds 2 to the power 32

521
00:22:58,400 --> 00:23:00,000
counters which

522
00:23:00,000 --> 00:23:03,360
makes the signing time about an hour

523
00:23:03,360 --> 00:23:05,440
then they can expect to have a

524
00:23:05,440 --> 00:23:08,320
performance gain for the verifier

525
00:23:08,320 --> 00:23:13,439
between 40 and 50 which is quite good

526
00:23:13,840 --> 00:23:17,440
and then in cycles on this freedom board

527
00:23:17,440 --> 00:23:19,600
we see that compared to the reference

528
00:23:19,600 --> 00:23:22,320
implementation and also adding some

529
00:23:22,320 --> 00:23:24,080
precomputation

530
00:23:24,080 --> 00:23:27,840
tricks from ck rs20

531
00:23:27,840 --> 00:23:29,440
we can actually get

532
00:23:29,440 --> 00:23:31,200
um

533
00:23:31,200 --> 00:23:33,760
given a signing time of about a minute

534
00:23:33,760 --> 00:23:36,880
we can get these 13.8 million cycles

535
00:23:36,880 --> 00:23:38,440
down to about

536
00:23:38,440 --> 00:23:41,840
6.56 million cycles which is a huge

537
00:23:41,840 --> 00:23:44,639
performance game

538
00:23:47,760 --> 00:23:49,520
so that's what i wanted to show you

539
00:23:49,520 --> 00:23:51,120
about our paper

540
00:23:51,120 --> 00:23:55,279
that leaves us with a conclusion

541
00:23:55,279 --> 00:23:57,200
so in conclusion we utilize the

542
00:23:57,200 --> 00:23:59,200
techniques of pc

543
00:23:59,200 --> 00:24:03,200
mcm 18 to enable a rapidly verifiable

544
00:24:03,200 --> 00:24:05,440
version of xmss and we thoroughly

545
00:24:05,440 --> 00:24:07,600
analyze both the security and

546
00:24:07,600 --> 00:24:11,120
performance of the new scheme

547
00:24:11,760 --> 00:24:13,760
then

548
00:24:13,760 --> 00:24:17,039
we also implement this rapid xmss on a

549
00:24:17,039 --> 00:24:19,600
freedom k64 f board

550
00:24:19,600 --> 00:24:21,760
and as an example i mean i've mentioned

551
00:24:21,760 --> 00:24:24,640
before other trade-offs are possible

552
00:24:24,640 --> 00:24:28,480
that online if we sign on a single core

553
00:24:28,480 --> 00:24:30,480
x86

554
00:24:30,480 --> 00:24:33,760
86 machine

555
00:24:33,760 --> 00:24:35,279
then

556
00:24:35,279 --> 00:24:38,480
you can verify the signature 2.11 times

557
00:24:38,480 --> 00:24:41,120
faster than the reference implementation

558
00:24:41,120 --> 00:24:43,039
on the embedded device

559
00:24:43,039 --> 00:24:44,960
and this translates to about a

560
00:24:44,960 --> 00:24:47,440
verification time of 54 milliseconds

561
00:24:47,440 --> 00:24:50,159
which is actually quite practical and as

562
00:24:50,159 --> 00:24:52,640
mentioned before it's a standardized

563
00:24:52,640 --> 00:24:57,120
signature algorithm so that's quite nice

564
00:24:57,679 --> 00:24:59,440
and then lastly we'd like to mention

565
00:24:59,440 --> 00:25:01,919
that the results straightforwardly apply

566
00:25:01,919 --> 00:25:03,919
as well to the multi-three version of

567
00:25:03,919 --> 00:25:05,200
xmss

568
00:25:05,200 --> 00:25:07,120
as well as a

569
00:25:07,120 --> 00:25:08,320
variant

570
00:25:08,320 --> 00:25:11,760
or a similar hash based construction lms

571
00:25:11,760 --> 00:25:12,960
and it's

572
00:25:12,960 --> 00:25:13,840
fairy multi-three

573
00:25:13,840 --> 00:25:16,480
hss

574
00:25:18,960 --> 00:25:20,880
that that

575
00:25:20,880 --> 00:25:22,720
that brings me to the end of the talk so

576
00:25:22,720 --> 00:25:25,120
if there are any questions you can

577
00:25:25,120 --> 00:25:28,799
contact us at this email address and

578
00:25:28,799 --> 00:25:30,080
other than that

579
00:25:30,080 --> 00:25:34,279
thank you very much for listening

