1
00:00:00,640 --> 00:00:03,040
hi guys i'm alexander nike and in this

2
00:00:03,040 --> 00:00:05,920
video i will present our paper fix

3
00:00:05,920 --> 00:00:08,320
slicing a yes like ciphers this is a

4
00:00:08,320 --> 00:00:10,240
joint work with toma perang back when i

5
00:00:10,240 --> 00:00:13,280
was working at ntu singapore

6
00:00:13,280 --> 00:00:14,960
as you probably guessed our work is

7
00:00:14,960 --> 00:00:19,279
about aes implementations

8
00:00:19,279 --> 00:00:21,199
nowadays aes is running on a wide range

9
00:00:21,199 --> 00:00:22,960
of platforms from resource constrained

10
00:00:22,960 --> 00:00:25,359
devices to high-end servers and it

11
00:00:25,359 --> 00:00:27,119
appears that many embedded devices do

12
00:00:27,119 --> 00:00:29,279
not enjoy hardware areas and giants and

13
00:00:29,279 --> 00:00:32,159
rely on software implementations instead

14
00:00:32,159 --> 00:00:34,239
we know that aes can be efficiently

15
00:00:34,239 --> 00:00:35,840
implemented in software using

16
00:00:35,840 --> 00:00:38,000
pre-computer lookup tables

17
00:00:38,000 --> 00:00:40,399
the so-called t-table implementation

18
00:00:40,399 --> 00:00:42,800
but we also know that

19
00:00:42,800 --> 00:00:45,120
it implies memory accesses that are key

20
00:00:45,120 --> 00:00:47,520
dependent which can lead to cache taming

21
00:00:47,520 --> 00:00:48,879
attacks

22
00:00:48,879 --> 00:00:50,399
one can prevent

23
00:00:50,399 --> 00:00:52,960
such attacks by

24
00:00:52,960 --> 00:00:54,879
using a constant time implementation

25
00:00:54,879 --> 00:00:56,559
variants

26
00:00:56,559 --> 00:00:58,640
like slicing for instance

27
00:00:58,640 --> 00:00:59,600
and

28
00:00:59,600 --> 00:01:00,480
that's

29
00:01:00,480 --> 00:01:02,399
what our work is about it improves bit

30
00:01:02,399 --> 00:01:05,119
slice aes implementations for processors

31
00:01:05,119 --> 00:01:07,760
that do not use vector or

32
00:01:07,760 --> 00:01:11,280
simd instructions

33
00:01:11,360 --> 00:01:13,920
our paper focuses on 32-bit

34
00:01:13,920 --> 00:01:16,479
embedded platforms especially arm

35
00:01:16,479 --> 00:01:18,640
context m and 32-bit

36
00:01:18,640 --> 00:01:20,880
risk 5 processors

37
00:01:20,880 --> 00:01:22,479
if we have a look at the results

38
00:01:22,479 --> 00:01:24,720
previously reported in the literature

39
00:01:24,720 --> 00:01:26,080
for

40
00:01:26,080 --> 00:01:27,520
those platforms

41
00:01:27,520 --> 00:01:30,560
we see that aes 128 runs

42
00:01:30,560 --> 00:01:33,920
around 100 cycles per byte

43
00:01:33,920 --> 00:01:36,320
and if we have a deeper look on how the

44
00:01:36,320 --> 00:01:39,280
cycles are spent within the cipher

45
00:01:39,280 --> 00:01:41,119
we see that many of them are spent for

46
00:01:41,119 --> 00:01:42,960
the shift rules operation

47
00:01:42,960 --> 00:01:46,000
which is somewhat counter-intuitive

48
00:01:46,000 --> 00:01:47,840
because the shift rows is maybe the

49
00:01:47,840 --> 00:01:50,479
simplest operation within the aes it's

50
00:01:50,479 --> 00:01:53,840
just by reordering within the states so

51
00:01:53,840 --> 00:01:55,920
let's first try to understand

52
00:01:55,920 --> 00:01:59,119
why it's so costly in a b slide setting

53
00:01:59,119 --> 00:02:01,840
so here is the 16 byte aes internal

54
00:02:01,840 --> 00:02:03,439
states

55
00:02:03,439 --> 00:02:06,159
um but because we are interested in bit

56
00:02:06,159 --> 00:02:08,959
slicing we will consider the 128-bit

57
00:02:08,959 --> 00:02:11,360
version

58
00:02:11,440 --> 00:02:14,239
if we consider a 16-bit slice that we

59
00:02:14,239 --> 00:02:16,959
reorder in a row-wise manner so it can

60
00:02:16,959 --> 00:02:19,280
be stored in a 16-bit register

61
00:02:19,280 --> 00:02:21,760
and if we try to apply the shift rows so

62
00:02:21,760 --> 00:02:23,280
for the first row it's trivial we have

63
00:02:23,280 --> 00:02:26,480
nothing to do but for the second one we

64
00:02:26,480 --> 00:02:29,200
see that it translates to a nibblewise

65
00:02:29,200 --> 00:02:30,720
rotation

66
00:02:30,720 --> 00:02:32,800
and it will be the same for the two

67
00:02:32,800 --> 00:02:34,800
remaining rows but with different

68
00:02:34,800 --> 00:02:36,879
rotation indexes

69
00:02:36,879 --> 00:02:39,360
now if we go back to the 32-bit

70
00:02:39,360 --> 00:02:42,160
architecture we see that we still have

71
00:02:42,160 --> 00:02:45,920
16 bits available within our registers

72
00:02:45,920 --> 00:02:47,760
so we can process

73
00:02:47,760 --> 00:02:49,599
a second block

74
00:02:49,599 --> 00:02:50,720
for free

75
00:02:50,720 --> 00:02:52,879
it can be actually

76
00:02:52,879 --> 00:02:55,920
useful for modes of operation that allow

77
00:02:55,920 --> 00:02:57,360
parallelization

78
00:02:57,360 --> 00:02:59,519
it can also be useful if we want to

79
00:02:59,519 --> 00:03:01,440
integrate quantum measures against fault

80
00:03:01,440 --> 00:03:03,360
attack because it will

81
00:03:03,360 --> 00:03:06,640
provide redundant computations for free

82
00:03:06,640 --> 00:03:07,760
anyway

83
00:03:07,760 --> 00:03:10,159
at the end this is what we have to

84
00:03:10,159 --> 00:03:12,480
compute to apply the shift rows

85
00:03:12,480 --> 00:03:14,720
so we now have byte-wise rotations

86
00:03:14,720 --> 00:03:17,440
instead of nibble-wise rotations

87
00:03:17,440 --> 00:03:19,280
and the previous

88
00:03:19,280 --> 00:03:20,239
work

89
00:03:20,239 --> 00:03:21,760
did it that way

90
00:03:21,760 --> 00:03:22,980
so it has to

91
00:03:22,980 --> 00:03:24,319
[Music]

92
00:03:24,319 --> 00:03:26,239
deal with a lot of bitmask and bitwise

93
00:03:26,239 --> 00:03:27,920
operations

94
00:03:27,920 --> 00:03:30,959
and actually it can be slightly improved

95
00:03:30,959 --> 00:03:34,879
has highlighted by peter detman when we

96
00:03:34,879 --> 00:03:36,239
first published

97
00:03:36,239 --> 00:03:37,680
this paper

98
00:03:37,680 --> 00:03:40,560
and so we pointed out that one can use

99
00:03:40,560 --> 00:03:44,159
the swap move technique so it will be

100
00:03:44,159 --> 00:03:46,400
a little bit more efficient but what we

101
00:03:46,400 --> 00:03:49,680
have to keep in mind is that we have to

102
00:03:49,680 --> 00:03:51,360
apply

103
00:03:51,360 --> 00:03:53,519
to compute those operations for each

104
00:03:53,519 --> 00:03:55,360
slice independently so we have to

105
00:03:55,360 --> 00:03:58,000
compute this eight times per round

106
00:03:58,000 --> 00:04:00,959
so the shift rules will remain

107
00:04:00,959 --> 00:04:04,959
costly and the goal of our paper is to

108
00:04:04,959 --> 00:04:06,879
investigate how we can mitigate this

109
00:04:06,879 --> 00:04:09,840
cost to improve the aes be sliced

110
00:04:09,840 --> 00:04:11,760
performance

111
00:04:11,760 --> 00:04:14,400
so first what we tried to do is to

112
00:04:14,400 --> 00:04:17,040
investigate if it will be interesting to

113
00:04:17,040 --> 00:04:19,120
have another representation

114
00:04:19,120 --> 00:04:21,519
another way to pack

115
00:04:21,519 --> 00:04:24,080
the bits within the registers

116
00:04:24,080 --> 00:04:25,120
so if

117
00:04:25,120 --> 00:04:27,680
we only consider a quarter of a slice

118
00:04:27,680 --> 00:04:29,919
for eight blocks now

119
00:04:29,919 --> 00:04:32,880
so we'll need a 32-bit register to store

120
00:04:32,880 --> 00:04:34,960
a quarter of slice and so we'll need

121
00:04:34,960 --> 00:04:38,320
four 30-bit registers to store a single

122
00:04:38,320 --> 00:04:39,759
slice

123
00:04:39,759 --> 00:04:42,639
but what it's nice now is that

124
00:04:42,639 --> 00:04:43,680
the

125
00:04:43,680 --> 00:04:47,360
shift rows can be computed using 32-bit

126
00:04:47,360 --> 00:04:48,639
rotations

127
00:04:48,639 --> 00:04:51,680
instead of bite-wise rotations

128
00:04:51,680 --> 00:04:53,840
and that's why we called it the barrel

129
00:04:53,840 --> 00:04:57,040
shift rows representation because

130
00:04:57,040 --> 00:05:00,080
for instance on arm processors

131
00:05:00,080 --> 00:05:02,080
32-bit rotations can be computed for

132
00:05:02,080 --> 00:05:05,039
free thanks to the barrel shifter

133
00:05:05,039 --> 00:05:06,080
so

134
00:05:06,080 --> 00:05:08,479
it means that using this representation

135
00:05:08,479 --> 00:05:10,880
on amp processors

136
00:05:10,880 --> 00:05:12,720
we should be able to

137
00:05:12,720 --> 00:05:16,000
pay nothing for the shift rows

138
00:05:16,000 --> 00:05:17,360
um

139
00:05:17,360 --> 00:05:18,800
yeah so

140
00:05:18,800 --> 00:05:21,199
at the end we have three 32-bit

141
00:05:21,199 --> 00:05:22,720
rotations

142
00:05:22,720 --> 00:05:26,000
per slice per round

143
00:05:26,000 --> 00:05:27,360
so it means that the shift rows

144
00:05:27,360 --> 00:05:29,919
operation required three to four

145
00:05:29,919 --> 00:05:33,360
three two bit rotations per round

146
00:05:33,360 --> 00:05:36,880
24 sorry 24 30 bit rotations per round

147
00:05:36,880 --> 00:05:38,400
but on the downside

148
00:05:38,400 --> 00:05:40,800
it requires to process eight blocks in

149
00:05:40,800 --> 00:05:42,479
parallel which can be quite

150
00:05:42,479 --> 00:05:45,280
inappropriate for embedded devices that

151
00:05:45,280 --> 00:05:49,919
usually have to deal with small payloads

152
00:05:50,960 --> 00:05:54,639
also it requires 32 32-bit uh registers

153
00:05:54,639 --> 00:05:56,440
to store the

154
00:05:56,440 --> 00:05:58,880
1024-bit internal state

155
00:05:58,880 --> 00:06:01,360
and it can also be troublesome because

156
00:06:01,360 --> 00:06:03,280
on on processors

157
00:06:03,280 --> 00:06:04,400
only

158
00:06:04,400 --> 00:06:05,520
uh

159
00:06:05,520 --> 00:06:09,440
14 such registers are available so we

160
00:06:09,440 --> 00:06:12,160
would need a lot of stores and loads on

161
00:06:12,160 --> 00:06:13,199
the stack

162
00:06:13,199 --> 00:06:15,840
which will clearly have an impact on

163
00:06:15,840 --> 00:06:17,919
performances

164
00:06:17,919 --> 00:06:20,240
last but not least it also increases the

165
00:06:20,240 --> 00:06:22,560
ram consumption by a factor 4 to store

166
00:06:22,560 --> 00:06:24,800
the round keys because for the add run

167
00:06:24,800 --> 00:06:26,400
key operation we

168
00:06:26,400 --> 00:06:27,520
don't have

169
00:06:27,520 --> 00:06:32,840
8 registers to consider any more but 32

170
00:06:32,840 --> 00:06:36,000
instead so although

171
00:06:36,000 --> 00:06:37,520
uh

172
00:06:37,520 --> 00:06:40,080
the parallel shift rule representation

173
00:06:40,080 --> 00:06:42,160
comes with a lot of drawbacks we

174
00:06:42,160 --> 00:06:44,639
considered it for our benchmark

175
00:06:44,639 --> 00:06:47,680
i will present the results at the end

176
00:06:47,680 --> 00:06:49,280
of this talk

177
00:06:49,280 --> 00:06:50,800
but

178
00:06:50,800 --> 00:06:52,639
we also investigated

179
00:06:52,639 --> 00:06:53,599
if

180
00:06:53,599 --> 00:06:56,880
we could find another optimization path

181
00:06:56,880 --> 00:06:59,360
and to do so we had a look at the fixed

182
00:06:59,360 --> 00:07:01,520
sizing implementation strategy that we

183
00:07:01,520 --> 00:07:03,199
initially introduced

184
00:07:03,199 --> 00:07:05,120
as the new representation for the gift

185
00:07:05,120 --> 00:07:07,280
block ciphers

186
00:07:07,280 --> 00:07:09,280
and it allowed us to to boost its

187
00:07:09,280 --> 00:07:12,000
performance on

188
00:07:12,000 --> 00:07:14,720
32-bit platforms

189
00:07:14,720 --> 00:07:16,400
and the idea of the fixed slicing

190
00:07:16,400 --> 00:07:20,000
implementation strategy is to fix

191
00:07:20,000 --> 00:07:22,240
a slice to never move and to adjust the

192
00:07:22,240 --> 00:07:24,000
other accordingly

193
00:07:24,000 --> 00:07:25,280
for

194
00:07:25,280 --> 00:07:28,400
the remaining operation

195
00:07:28,639 --> 00:07:31,280
um yeah so in the case of gifs we only

196
00:07:31,280 --> 00:07:34,880
have to care about the s box

197
00:07:34,880 --> 00:07:37,599
but we thought that it could also be of

198
00:07:37,599 --> 00:07:40,720
interest for other ciphers because

199
00:07:40,720 --> 00:07:42,080
uh

200
00:07:42,080 --> 00:07:44,160
a lot of them required to move the bits

201
00:07:44,160 --> 00:07:46,000
around within the registers at some

202
00:07:46,000 --> 00:07:48,400
point so

203
00:07:48,400 --> 00:07:50,319
coming up with an alternative

204
00:07:50,319 --> 00:07:53,199
representation can help to boost the

205
00:07:53,199 --> 00:07:55,840
performances

206
00:07:55,840 --> 00:07:58,479
and so yeah what about the aes we

207
00:07:58,479 --> 00:08:00,479
tried to have a look

208
00:08:00,479 --> 00:08:02,400
about it

209
00:08:02,400 --> 00:08:05,360
and so in the case of aes

210
00:08:05,360 --> 00:08:07,759
so we moved a bit within the registers

211
00:08:07,759 --> 00:08:10,000
during the shift rows and we do it in

212
00:08:10,000 --> 00:08:11,120
the same way

213
00:08:11,120 --> 00:08:13,280
for all the registers

214
00:08:13,280 --> 00:08:15,280
so we cannot

215
00:08:15,280 --> 00:08:18,400
fix a single slice to never move

216
00:08:18,400 --> 00:08:19,360
because

217
00:08:19,360 --> 00:08:21,360
if we do so

218
00:08:21,360 --> 00:08:23,280
we will not have the bits properly

219
00:08:23,280 --> 00:08:24,720
aligned for the

220
00:08:24,720 --> 00:08:27,280
xbox operation then

221
00:08:27,280 --> 00:08:28,160
so

222
00:08:28,160 --> 00:08:31,360
it means that fixed slicing the aes

223
00:08:31,360 --> 00:08:32,958
means that we have

224
00:08:32,958 --> 00:08:36,320
to fix all the slices which means that

225
00:08:36,320 --> 00:08:38,958
at the end we simply omit the shift

226
00:08:38,958 --> 00:08:41,440
rules operation

227
00:08:41,440 --> 00:08:43,839
so this is not an issue for the for the

228
00:08:43,839 --> 00:08:46,399
xbox layer as i just mentioned because

229
00:08:46,399 --> 00:08:49,279
we will steve we will still have

230
00:08:49,279 --> 00:08:51,519
the bits within the bytes that will

231
00:08:51,519 --> 00:08:53,120
remain online

232
00:08:53,120 --> 00:08:54,880
but on the other hand we will need to

233
00:08:54,880 --> 00:08:59,120
adapt the mixed columns operation

234
00:08:59,760 --> 00:09:01,839
also note that we will have a

235
00:09:01,839 --> 00:09:03,600
synchronization with the classical

236
00:09:03,600 --> 00:09:06,240
representation every four rounds

237
00:09:06,240 --> 00:09:07,600
since four

238
00:09:07,600 --> 00:09:08,880
applications

239
00:09:08,880 --> 00:09:11,279
of the shift rule operation

240
00:09:11,279 --> 00:09:15,040
lead back to the original position

241
00:09:16,000 --> 00:09:18,399
so to understand uh

242
00:09:18,399 --> 00:09:19,760
our

243
00:09:19,760 --> 00:09:21,600
adjustment of the mixed columns i will

244
00:09:21,600 --> 00:09:24,399
briefly recall how it can be

245
00:09:24,399 --> 00:09:26,399
efficiently computed in a bit slice

246
00:09:26,399 --> 00:09:28,560
manner so it was introduced a decade ago

247
00:09:28,560 --> 00:09:30,640
by kasper and schwaber

248
00:09:30,640 --> 00:09:33,760
so here is the

249
00:09:34,240 --> 00:09:35,519
aes

250
00:09:35,519 --> 00:09:38,240
mixed column operation

251
00:09:38,240 --> 00:09:41,120
and so what we can remark is that for

252
00:09:41,120 --> 00:09:42,080
uh

253
00:09:42,080 --> 00:09:44,000
each byte within the column we will have

254
00:09:44,000 --> 00:09:48,240
to multiply multiply it by two

255
00:09:48,240 --> 00:09:51,120
add its adjacent bytes multiplied by

256
00:09:51,120 --> 00:09:53,519
three and add the

257
00:09:53,519 --> 00:09:56,160
two remaining bytes right and will be

258
00:09:56,160 --> 00:09:57,920
the same for each

259
00:09:57,920 --> 00:10:00,720
each byte within the column

260
00:10:00,720 --> 00:10:02,480
um

261
00:10:02,480 --> 00:10:04,959
yes and the multiplication by 2

262
00:10:04,959 --> 00:10:06,720
corresponds to

263
00:10:06,720 --> 00:10:10,720
left shift and also a conditional

264
00:10:10,720 --> 00:10:12,000
exclusive or

265
00:10:12,000 --> 00:10:13,920
with this value depending on the value

266
00:10:13,920 --> 00:10:14,800
of the

267
00:10:14,800 --> 00:10:17,040
discarded bit

268
00:10:17,040 --> 00:10:18,640
and for the multiplication by three we

269
00:10:18,640 --> 00:10:19,839
can simply

270
00:10:19,839 --> 00:10:22,000
consider it as a multiplication by two

271
00:10:22,000 --> 00:10:24,320
and an exclusive or

272
00:10:24,320 --> 00:10:25,279
so

273
00:10:25,279 --> 00:10:28,320
um let's see how it translates to the in

274
00:10:28,320 --> 00:10:30,839
the b slice setting

275
00:10:30,839 --> 00:10:34,399
so for the multiplication by two

276
00:10:34,399 --> 00:10:37,519
we don't have to compute the

277
00:10:37,519 --> 00:10:38,800
the shift

278
00:10:38,800 --> 00:10:40,480
because the corresponding bit will be

279
00:10:40,480 --> 00:10:43,120
just in another register right so we can

280
00:10:43,120 --> 00:10:44,560
we just have to consider the proper

281
00:10:44,560 --> 00:10:47,760
register and what is nice is that for

282
00:10:47,760 --> 00:10:49,600
the conditional

283
00:10:49,600 --> 00:10:51,440
exclusive or

284
00:10:51,440 --> 00:10:53,600
we can just

285
00:10:53,600 --> 00:10:55,120
add

286
00:10:55,120 --> 00:10:57,519
the register that contains all the most

287
00:10:57,519 --> 00:10:59,839
significant bits right so we just have

288
00:10:59,839 --> 00:11:02,399
to add it at the proper place

289
00:11:02,399 --> 00:11:04,399
and that's it we have our multiplication

290
00:11:04,399 --> 00:11:05,680
by two

291
00:11:05,680 --> 00:11:07,920
for the multiplication by three of the

292
00:11:07,920 --> 00:11:09,920
adjacent

293
00:11:09,920 --> 00:11:10,800
row

294
00:11:10,800 --> 00:11:12,000
i've just sent

295
00:11:12,000 --> 00:11:13,279
by sorry

296
00:11:13,279 --> 00:11:14,399
so

297
00:11:14,399 --> 00:11:16,399
we can see that we can get the adjacent

298
00:11:16,399 --> 00:11:18,800
byte by a rotation

299
00:11:18,800 --> 00:11:22,320
uh to the right by eight

300
00:11:22,320 --> 00:11:24,240
and then as for the multiplication by

301
00:11:24,240 --> 00:11:26,560
two we consider uh

302
00:11:26,560 --> 00:11:29,839
the right register instead of performing

303
00:11:29,839 --> 00:11:31,279
a

304
00:11:31,279 --> 00:11:33,040
left shift

305
00:11:33,040 --> 00:11:36,319
and then for the remaining

306
00:11:36,560 --> 00:11:37,519
bytes

307
00:11:37,519 --> 00:11:40,640
we do the same we just have to compute

308
00:11:40,640 --> 00:11:41,680
write

309
00:11:41,680 --> 00:11:43,839
rotations to the right and this is it we

310
00:11:43,839 --> 00:11:45,040
have our

311
00:11:45,040 --> 00:11:47,680
mixed columns in the b slide setting

312
00:11:47,680 --> 00:11:50,880
actually can be factorized so we'll have

313
00:11:50,880 --> 00:11:53,200
common terms that will appear

314
00:11:53,200 --> 00:11:55,120
and yeah this is actually quite

315
00:11:55,120 --> 00:11:57,440
efficient and can be computed in

316
00:11:57,440 --> 00:12:02,160
27 xr and 16 rotations in total

317
00:12:02,160 --> 00:12:04,160
so now let's see

318
00:12:04,160 --> 00:12:07,040
how it

319
00:12:07,519 --> 00:12:08,839
comes with

320
00:12:08,839 --> 00:12:12,000
our fixed light representation

321
00:12:12,000 --> 00:12:13,120
so

322
00:12:13,120 --> 00:12:14,720
yeah in the remaining slide i will just

323
00:12:14,720 --> 00:12:17,279
consider the the first register for the

324
00:12:17,279 --> 00:12:19,519
sake of simplicity but the same applies

325
00:12:19,519 --> 00:12:21,519
for all the other ones

326
00:12:21,519 --> 00:12:23,440
so normally this is what we should get

327
00:12:23,440 --> 00:12:25,200
but in our case because we did not

328
00:12:25,200 --> 00:12:26,880
compute the shift rows

329
00:12:26,880 --> 00:12:28,720
we will have to compute the bytewise

330
00:12:28,720 --> 00:12:31,920
rotations for each register during the

331
00:12:31,920 --> 00:12:33,440
mixed columns

332
00:12:33,440 --> 00:12:35,519
so at first glance it's not very clear

333
00:12:35,519 --> 00:12:37,360
what's

334
00:12:37,360 --> 00:12:39,760
the in interest of doing it it does not

335
00:12:39,760 --> 00:12:41,120
seem to

336
00:12:41,120 --> 00:12:43,440
uh clearly improve the performances

337
00:12:43,440 --> 00:12:45,680
since we since we

338
00:12:45,680 --> 00:12:48,360
are performing are computing these

339
00:12:48,360 --> 00:12:51,279
bite-wise rotations anyway

340
00:12:51,279 --> 00:12:54,160
but the thing is that

341
00:12:54,160 --> 00:12:55,360
we can

342
00:12:55,360 --> 00:12:56,560
do some

343
00:12:56,560 --> 00:12:58,480
factorization

344
00:12:58,480 --> 00:13:00,320
instead we can

345
00:13:00,320 --> 00:13:02,720
instead of computing a by twice rotation

346
00:13:02,720 --> 00:13:05,600
with different indexes for each register

347
00:13:05,600 --> 00:13:07,200
we can see that

348
00:13:07,200 --> 00:13:10,560
this can be transformed to this

349
00:13:10,560 --> 00:13:12,959
and the interest is that we will have

350
00:13:12,959 --> 00:13:15,360
common terms that will appear

351
00:13:15,360 --> 00:13:17,200
and

352
00:13:17,200 --> 00:13:20,320
that will help to

353
00:13:20,320 --> 00:13:21,920
have something more efficient than the

354
00:13:21,920 --> 00:13:23,600
classical representation

355
00:13:23,600 --> 00:13:26,639
actually it saves uh 56 logical

356
00:13:26,639 --> 00:13:30,320
operations and 16 logical shifts

357
00:13:30,320 --> 00:13:33,040
and it will be even more significant

358
00:13:33,040 --> 00:13:35,040
in the next round

359
00:13:35,040 --> 00:13:38,240
because in the next round

360
00:13:38,240 --> 00:13:39,519
the shift rule

361
00:13:39,519 --> 00:13:43,199
is now simple to compute right we have

362
00:13:43,199 --> 00:13:46,000
so the byte wise rotation

363
00:13:46,000 --> 00:13:48,800
now use the same indexes for all the

364
00:13:48,800 --> 00:13:50,240
registers

365
00:13:50,240 --> 00:13:51,839
and so if you compare to the previous

366
00:13:51,839 --> 00:13:54,560
one we act we actually saved this

367
00:13:54,560 --> 00:13:58,240
bytewise rotation right

368
00:13:58,240 --> 00:13:59,279
so now

369
00:13:59,279 --> 00:14:01,360
during the second round it saves 80

370
00:14:01,360 --> 00:14:03,920
logical operations and 32 logical shifts

371
00:14:03,920 --> 00:14:05,760
compared to the classical classical

372
00:14:05,760 --> 00:14:08,480
representation

373
00:14:09,040 --> 00:14:10,959
then for the

374
00:14:10,959 --> 00:14:15,600
the third round it's actually similar to

375
00:14:15,600 --> 00:14:17,120
the first one

376
00:14:17,120 --> 00:14:19,600
and it's obvious because it's just that

377
00:14:19,600 --> 00:14:22,079
the index rotation

378
00:14:22,079 --> 00:14:25,040
is swept between uh this row and this

379
00:14:25,040 --> 00:14:29,040
row right instead of having a bitewise

380
00:14:29,040 --> 00:14:31,760
rotation by six we have it by two but

381
00:14:31,760 --> 00:14:35,440
it's exactly the same as in here right

382
00:14:35,440 --> 00:14:39,199
so we have the same result here

383
00:14:39,199 --> 00:14:40,240
and

384
00:14:40,240 --> 00:14:41,360
uh

385
00:14:41,360 --> 00:14:44,639
last but not least what is nice for

386
00:14:44,639 --> 00:14:47,519
the fourth round is that we are now

387
00:14:47,519 --> 00:14:48,720
synchronized with the classical

388
00:14:48,720 --> 00:14:50,079
representation

389
00:14:50,079 --> 00:14:51,279
so

390
00:14:51,279 --> 00:14:52,880
we don't have

391
00:14:52,880 --> 00:14:55,600
nothing weird to do at all just

392
00:14:55,600 --> 00:14:58,160
implement the classical mixed columns in

393
00:14:58,160 --> 00:15:00,000
a bit slight setting

394
00:15:00,000 --> 00:15:03,360
so typically it saves the

395
00:15:03,360 --> 00:15:05,680
entire ship's rolls cost

396
00:15:05,680 --> 00:15:07,199
every

397
00:15:07,199 --> 00:15:09,760
four rounds

398
00:15:10,560 --> 00:15:13,279
so if i sum it up um

399
00:15:13,279 --> 00:15:15,279
omitting the shift rows allows to speed

400
00:15:15,279 --> 00:15:16,880
up the linear layer

401
00:15:16,880 --> 00:15:17,920
uh

402
00:15:17,920 --> 00:15:20,399
on 32-bit platforms

403
00:15:20,399 --> 00:15:22,480
and also compared to the barrel shift

404
00:15:22,480 --> 00:15:24,959
rows representation we only process two

405
00:15:24,959 --> 00:15:27,279
blocks at a time

406
00:15:27,279 --> 00:15:30,160
which is more appropriate to embedded

407
00:15:30,160 --> 00:15:32,240
devices

408
00:15:32,240 --> 00:15:34,639
on the other hand it requires four

409
00:15:34,639 --> 00:15:36,079
different implementation of the mixed

410
00:15:36,079 --> 00:15:39,360
columns so it has a slight impact on the

411
00:15:39,360 --> 00:15:41,279
code size

412
00:15:41,279 --> 00:15:44,160
and also i didn't mention it but it

413
00:15:44,160 --> 00:15:45,600
requires

414
00:15:45,600 --> 00:15:46,480
to

415
00:15:46,480 --> 00:15:49,040
adapt the round keys accordingly

416
00:15:49,040 --> 00:15:51,040
so it will have

417
00:15:51,040 --> 00:15:55,040
also a small impact on the key schedule

418
00:15:55,040 --> 00:15:57,680
operation

419
00:15:58,240 --> 00:16:00,320
but what's interesting is that we can

420
00:16:00,320 --> 00:16:03,440
come up with several trade-offs so

421
00:16:03,440 --> 00:16:06,720
for instance if code size is really a

422
00:16:06,720 --> 00:16:10,480
matter we can define a semi-fixed sliced

423
00:16:10,480 --> 00:16:12,399
representation where we will compute the

424
00:16:12,399 --> 00:16:15,440
shift rows every two rounds only

425
00:16:15,440 --> 00:16:16,160
and

426
00:16:16,160 --> 00:16:17,199
the

427
00:16:17,199 --> 00:16:19,040
the idea behind it is that

428
00:16:19,040 --> 00:16:20,480
computing the shift rows after two

429
00:16:20,480 --> 00:16:22,480
rounds is way more efficient

430
00:16:22,480 --> 00:16:23,759
have we

431
00:16:23,759 --> 00:16:25,759
just seen because we have the same

432
00:16:25,759 --> 00:16:27,600
rotation indexes for

433
00:16:27,600 --> 00:16:30,240
uh the two rules to consider

434
00:16:30,240 --> 00:16:31,680
so yeah we can come with different

435
00:16:31,680 --> 00:16:34,639
trade-offs and

436
00:16:34,639 --> 00:16:38,000
this table uh summarizes

437
00:16:38,000 --> 00:16:40,480
the number of operations required for

438
00:16:40,480 --> 00:16:43,440
the linear layer over four rounds

439
00:16:43,440 --> 00:16:44,880
and

440
00:16:44,880 --> 00:16:48,399
so i we tried to distinguish the logical

441
00:16:48,399 --> 00:16:50,639
operation from the logical shift and

442
00:16:50,639 --> 00:16:52,880
rotations because

443
00:16:52,880 --> 00:16:54,480
as i mentioned

444
00:16:54,480 --> 00:16:57,120
those can be

445
00:16:57,120 --> 00:16:58,720
computed for free

446
00:16:58,720 --> 00:17:00,800
on arm for instance thanks to the bar

447
00:17:00,800 --> 00:17:02,160
shifter

448
00:17:02,160 --> 00:17:05,760
so on arm this is though the operations

449
00:17:05,760 --> 00:17:08,319
that really matters

450
00:17:08,319 --> 00:17:09,760
and for the fully fixed slice

451
00:17:09,760 --> 00:17:11,839
implementation we see that we

452
00:17:11,839 --> 00:17:13,439
have almost

453
00:17:13,439 --> 00:17:15,039
uh

454
00:17:15,039 --> 00:17:17,039
a factor two between the number of

455
00:17:17,039 --> 00:17:19,599
operations so that's

456
00:17:19,599 --> 00:17:22,400
a significant improvement

457
00:17:22,400 --> 00:17:24,400
uh obviously it's a little bit less

458
00:17:24,400 --> 00:17:26,319
efficient in the semifix sliced since

459
00:17:26,319 --> 00:17:27,599
it's a

460
00:17:27,599 --> 00:17:29,760
trade-off between

461
00:17:29,760 --> 00:17:31,360
code size and

462
00:17:31,360 --> 00:17:33,840
efficiency

463
00:17:34,320 --> 00:17:35,120
but

464
00:17:35,120 --> 00:17:37,760
and here is the results of our benchmark

465
00:17:37,760 --> 00:17:41,039
on arm context m4 processor

466
00:17:41,039 --> 00:17:42,080
so

467
00:17:42,080 --> 00:17:45,600
the previous results by steven and

468
00:17:45,600 --> 00:17:48,640
runs around 100 cycles per byte

469
00:17:48,640 --> 00:17:49,679
while

470
00:17:49,679 --> 00:17:52,559
our fully fixed size implementation

471
00:17:52,559 --> 00:17:55,840
runs around 80 cycles per byte

472
00:17:55,840 --> 00:17:57,039
note that

473
00:17:57,039 --> 00:18:01,840
it's we almost have the same

474
00:18:02,240 --> 00:18:04,400
results for the fully fixed slide and

475
00:18:04,400 --> 00:18:05,440
the barrel shifts through the

476
00:18:05,440 --> 00:18:06,720
presentation

477
00:18:06,720 --> 00:18:08,799
so

478
00:18:08,799 --> 00:18:10,720
indeed as expected the battleship throws

479
00:18:10,720 --> 00:18:13,200
is not that efficient

480
00:18:13,200 --> 00:18:15,360
because of all the

481
00:18:15,360 --> 00:18:17,600
loads and store we

482
00:18:17,600 --> 00:18:19,919
have to do on the stack because we lack

483
00:18:19,919 --> 00:18:20,960
of

484
00:18:20,960 --> 00:18:23,919
registers to store the entire

485
00:18:23,919 --> 00:18:26,160
entire internal state

486
00:18:26,160 --> 00:18:29,840
so overall with fixed slicing we have

487
00:18:29,840 --> 00:18:33,520
roughly 20 spin improvement before uh

488
00:18:33,520 --> 00:18:36,320
previous results

489
00:18:36,320 --> 00:18:37,520
and

490
00:18:37,520 --> 00:18:41,480
yeah this is a little bit different on

491
00:18:41,480 --> 00:18:45,120
rv32i so 32-bit s5

492
00:18:45,120 --> 00:18:47,840
where the barrier shifts rows is clearly

493
00:18:47,840 --> 00:18:49,360
more interesting

494
00:18:49,360 --> 00:18:51,919
for this platform and it comes from the

495
00:18:51,919 --> 00:18:53,360
fact that

496
00:18:53,360 --> 00:18:58,400
on rv32i we have 32 32-bit registers

497
00:18:58,400 --> 00:18:59,360
so

498
00:18:59,360 --> 00:19:00,720
we have

499
00:19:00,720 --> 00:19:02,400
um

500
00:19:02,400 --> 00:19:04,559
less overhead due to load and stores on

501
00:19:04,559 --> 00:19:06,080
the stack

502
00:19:06,080 --> 00:19:06,880
and

503
00:19:06,880 --> 00:19:10,160
yeah the bar shift rows is clearly the

504
00:19:10,160 --> 00:19:12,240
the most efficient operation

505
00:19:12,240 --> 00:19:14,160
but still the fully fixed light is also

506
00:19:14,160 --> 00:19:15,760
very efficient with

507
00:19:15,760 --> 00:19:16,480
uh

508
00:19:16,480 --> 00:19:18,559
approximately 30

509
00:19:18,559 --> 00:19:21,039
improvements before previous work

510
00:19:21,039 --> 00:19:23,440
and yeah i didn't mention it but as you

511
00:19:23,440 --> 00:19:24,400
can see

512
00:19:24,400 --> 00:19:26,400
we have the same

513
00:19:26,400 --> 00:19:27,840
cycles

514
00:19:27,840 --> 00:19:30,480
cost for the sbox because we

515
00:19:30,480 --> 00:19:32,960
directly reuse the same xbox

516
00:19:32,960 --> 00:19:34,320
implementation

517
00:19:34,320 --> 00:19:35,280
from

518
00:19:35,280 --> 00:19:36,960
stophill and schwab

519
00:19:36,960 --> 00:19:39,200
so it's only the linear layer

520
00:19:39,200 --> 00:19:43,440
implementation that is changing here

521
00:19:44,240 --> 00:19:45,600
all right so

522
00:19:45,600 --> 00:19:48,320
if i sum it up

523
00:19:48,320 --> 00:19:50,840
fixed lighting the aes allows to

524
00:19:50,840 --> 00:19:53,600
outperforms previous bit slice results

525
00:19:53,600 --> 00:19:55,200
by 21

526
00:19:55,200 --> 00:19:58,080
and 30 percent on arm context m4 and

527
00:19:58,080 --> 00:20:01,520
rv32i respectively

528
00:20:01,520 --> 00:20:04,240
and especially the barrier shift

529
00:20:04,240 --> 00:20:07,280
representation fits well the rv32i

530
00:20:07,280 --> 00:20:08,640
architecture

531
00:20:08,640 --> 00:20:09,679
and

532
00:20:09,679 --> 00:20:10,960
it can

533
00:20:10,960 --> 00:20:13,280
be significantly enhanced thanks to the

534
00:20:13,280 --> 00:20:17,120
bitmanip extension because actually we

535
00:20:17,120 --> 00:20:20,559
spend many cycles for the the rotations

536
00:20:20,559 --> 00:20:21,280
but

537
00:20:21,280 --> 00:20:23,039
if we could do this

538
00:20:23,039 --> 00:20:25,280
if we could do a rotation in a

539
00:20:25,280 --> 00:20:27,600
single cycle it could run

540
00:20:27,600 --> 00:20:28,320
uh

541
00:20:28,320 --> 00:20:32,080
clearly faster so yeah it may be

542
00:20:32,080 --> 00:20:32,840
an

543
00:20:32,840 --> 00:20:36,159
interesting further direction

544
00:20:36,159 --> 00:20:39,120
uh note that our works also directly

545
00:20:39,120 --> 00:20:41,120
improves mass aes implementation that

546
00:20:41,120 --> 00:20:44,400
are based on bit slicing in our paper we

547
00:20:44,400 --> 00:20:46,720
also improve

548
00:20:46,720 --> 00:20:49,760
the performance for a masked

549
00:20:49,760 --> 00:20:53,039
a first order masked aes implementation

550
00:20:53,039 --> 00:20:54,720
uh you can have a look if you are

551
00:20:54,720 --> 00:20:56,320
interested and it will also be

552
00:20:56,320 --> 00:20:59,039
interesting to

553
00:20:59,280 --> 00:21:01,200
assess

554
00:21:01,200 --> 00:21:03,360
the gain of fixed slicing for higher

555
00:21:03,360 --> 00:21:05,600
order masking schemes

556
00:21:05,600 --> 00:21:08,400
and also what's interesting is that our

557
00:21:08,400 --> 00:21:11,039
techniques applies to other aes like

558
00:21:11,039 --> 00:21:13,919
ciphers and in our paper we also briefly

559
00:21:13,919 --> 00:21:17,600
mention an application to skinny 128

560
00:21:17,600 --> 00:21:19,440
and it led to improvements up to a

561
00:21:19,440 --> 00:21:21,679
factor of four compared to the previous

562
00:21:21,679 --> 00:21:23,919
results reported in in the literature

563
00:21:23,919 --> 00:21:27,039
for this cipher

564
00:21:27,120 --> 00:21:29,840
all our code is available at github so

565
00:21:29,840 --> 00:21:32,000
please feel free to to have a look and

566
00:21:32,000 --> 00:21:34,799
to to use it

567
00:21:34,799 --> 00:21:36,880
actually it's at

568
00:21:36,880 --> 00:21:40,080
it has already been integrated in two

569
00:21:40,080 --> 00:21:44,080
projects so uh in the ras crypto package

570
00:21:44,080 --> 00:21:46,320
so they had a significant

571
00:21:46,320 --> 00:21:47,600
improvement

572
00:21:47,600 --> 00:21:51,440
about two on time five faster

573
00:21:51,440 --> 00:21:52,799
so

574
00:21:52,799 --> 00:21:55,919
if i remember correctly it works on a 64

575
00:21:55,919 --> 00:21:58,000
bit

576
00:21:58,000 --> 00:22:00,000
implementation so

577
00:22:00,000 --> 00:22:02,480
it's not only of interest for 32-bit

578
00:22:02,480 --> 00:22:04,880
platforms it can also be quite

579
00:22:04,880 --> 00:22:07,600
interesting for larger platforms as long

580
00:22:07,600 --> 00:22:09,520
as we do not consider

581
00:22:09,520 --> 00:22:13,039
vector or smd instructions

582
00:22:13,039 --> 00:22:17,039
it has also be integrated into pqm4

583
00:22:17,039 --> 00:22:18,880
which is used to benchmark a pass

584
00:22:18,880 --> 00:22:22,320
quantum control algorithm

585
00:22:23,039 --> 00:22:27,200
so here are the references i talk

586
00:22:27,200 --> 00:22:30,559
during this presentation

587
00:22:30,559 --> 00:22:31,760
and

588
00:22:31,760 --> 00:22:33,840
thank you for your attention

589
00:22:33,840 --> 00:22:35,840
please feel free to contact us for any

590
00:22:35,840 --> 00:22:38,240
question on remarks at the following

591
00:22:38,240 --> 00:22:41,520
email addresses

592
00:22:41,520 --> 00:22:44,720
thanks see you

