1
00:00:00,799 --> 00:00:03,280
hi everyone my name is nimisha lemay and

2
00:00:03,280 --> 00:00:04,880
i will be presenting our work which

3
00:00:04,880 --> 00:00:06,640
comprises three attacks on

4
00:00:06,640 --> 00:00:08,880
state-of-the-art catalog defense and its

5
00:00:08,880 --> 00:00:10,000
variants

6
00:00:10,000 --> 00:00:12,160
the defenses were proposed to thwart

7
00:00:12,160 --> 00:00:14,559
threats of intellectual property privacy

8
00:00:14,559 --> 00:00:16,880
and integrated circuit over production

9
00:00:16,880 --> 00:00:18,720
through this defense i will explain the

10
00:00:18,720 --> 00:00:20,880
importance of the threats the solutions

11
00:00:20,880 --> 00:00:23,119
proposed so far and the assumptions

12
00:00:23,119 --> 00:00:25,119
which led to the success of a proposed

13
00:00:25,119 --> 00:00:26,080
attacks

14
00:00:26,080 --> 00:00:28,080
this work is in collaboration with new

15
00:00:28,080 --> 00:00:31,519
york university abu dhabi

16
00:00:31,519 --> 00:00:33,360
the outline for the presentation is as

17
00:00:33,360 --> 00:00:35,520
follows i will first provide a brief

18
00:00:35,520 --> 00:00:37,360
background of the isis supply chain

19
00:00:37,360 --> 00:00:39,680
model and threats listen from it then

20
00:00:39,680 --> 00:00:41,600
briefly i will explain the concept of

21
00:00:41,600 --> 00:00:43,680
logic locking before delving deeper into

22
00:00:43,680 --> 00:00:45,920
the defenses under consideration

23
00:00:45,920 --> 00:00:48,239
next i will walk you all through our

24
00:00:48,239 --> 00:00:50,000
proposed attacks on these considered

25
00:00:50,000 --> 00:00:52,000
defenses by also providing supporting

26
00:00:52,000 --> 00:00:54,000
experimental results before concluding

27
00:00:54,000 --> 00:00:55,920
my talk

28
00:00:55,920 --> 00:00:58,480
let's start with the introduction

29
00:00:58,480 --> 00:01:00,800
before 1980s the integrated circuit

30
00:01:00,800 --> 00:01:02,879
supply chain used to follow a vertical

31
00:01:02,879 --> 00:01:05,438
approach a single company used to own

32
00:01:05,438 --> 00:01:07,600
and operate every stage of the isis

33
00:01:07,600 --> 00:01:10,159
supply chain including fabrication

34
00:01:10,159 --> 00:01:12,240
but with sub-nanometer technology the

35
00:01:12,240 --> 00:01:14,960
first fabrication increased for example

36
00:01:14,960 --> 00:01:17,920
it costed infineon 2.6 billion euros to

37
00:01:17,920 --> 00:01:20,000
set up and operate a 140 nanometer

38
00:01:20,000 --> 00:01:22,640
technology file whereas for tsmc the

39
00:01:22,640 --> 00:01:25,200
cost of owning a 28 nanometer is around

40
00:01:25,200 --> 00:01:27,439
9.3 billion dollars

41
00:01:27,439 --> 00:01:29,439
with such economic constraints a

42
00:01:29,439 --> 00:01:31,280
horizontal model was adopted where

43
00:01:31,280 --> 00:01:33,040
design companies would outsource the

44
00:01:33,040 --> 00:01:35,520
fabrication and testing to entities

45
00:01:35,520 --> 00:01:37,040
already having set up for these

46
00:01:37,040 --> 00:01:39,360
technology nodes there's roughly one

47
00:01:39,360 --> 00:01:43,040
family for 11 design houses

48
00:01:43,040 --> 00:01:45,680
however with such a supply chain model

49
00:01:45,680 --> 00:01:47,520
where design house and foundry are

50
00:01:47,520 --> 00:01:49,520
different entities lying anywhere in the

51
00:01:49,520 --> 00:01:52,000
world there is a risk of security

52
00:01:52,000 --> 00:01:54,560
attacks such as ip piracy or ico

53
00:01:54,560 --> 00:01:57,040
production counterfeit of ics and

54
00:01:57,040 --> 00:01:58,799
insertion of hardware trojan can be

55
00:01:58,799 --> 00:02:00,719
realized in such an outsourced

56
00:02:00,719 --> 00:02:03,119
horizontal supply chain model it has

57
00:02:03,119 --> 00:02:05,759
been reported that around 15 of pentacon

58
00:02:05,759 --> 00:02:08,318
devices are counterfeit and that it has

59
00:02:08,318 --> 00:02:10,720
caused seven to ten billion dollars as a

60
00:02:10,720 --> 00:02:12,640
result of ip piracy

61
00:02:12,640 --> 00:02:14,560
in this work we focus on the threat of

62
00:02:14,560 --> 00:02:17,280
ib piracy and the solutions proposed to

63
00:02:17,280 --> 00:02:20,800
safeguard against this threat

64
00:02:21,440 --> 00:02:23,599
several design for trust solutions have

65
00:02:23,599 --> 00:02:26,560
been proposed support iv piracy attack

66
00:02:26,560 --> 00:02:28,400
amongst which logic locking is a

67
00:02:28,400 --> 00:02:30,640
holistic solution that protects against

68
00:02:30,640 --> 00:02:33,120
multiple untrusted entities such as

69
00:02:33,120 --> 00:02:35,920
foundry test facility and end users in

70
00:02:35,920 --> 00:02:39,040
the llc supply chain

71
00:02:39,519 --> 00:02:41,200
before getting into the logic locking

72
00:02:41,200 --> 00:02:43,519
concepts i will outline the ic design

73
00:02:43,519 --> 00:02:44,720
flow first

74
00:02:44,720 --> 00:02:47,120
this is the traditional or insecure

75
00:02:47,120 --> 00:02:49,280
basic design flow where design house

76
00:02:49,280 --> 00:02:51,920
produces a gdsu file which contains the

77
00:02:51,920 --> 00:02:54,319
geometric details within the netlist or

78
00:02:54,319 --> 00:02:55,599
the out

79
00:02:55,599 --> 00:02:57,840
this gds file is then sent to the

80
00:02:57,840 --> 00:03:00,239
outpost family for publication and then

81
00:03:00,239 --> 00:03:02,080
you press facility for structural

82
00:03:02,080 --> 00:03:03,920
testing and finally the chip is

83
00:03:03,920 --> 00:03:08,079
assembled and packaged for end users

84
00:03:08,560 --> 00:03:10,800
this traditional flow is however an

85
00:03:10,800 --> 00:03:13,280
insecure flow as mentioned before where

86
00:03:13,280 --> 00:03:16,000
the original design is passed on to the

87
00:03:16,000 --> 00:03:18,400
outsourced unpleasant family and test

88
00:03:18,400 --> 00:03:20,640
facility and finally dispatched for free

89
00:03:20,640 --> 00:03:21,599
use

90
00:03:21,599 --> 00:03:24,080
untrusted entities having direct access

91
00:03:24,080 --> 00:03:26,560
to the original design can easily copy

92
00:03:26,560 --> 00:03:28,640
or pirate the design thereby carrying

93
00:03:28,640 --> 00:03:32,560
out the ip pilocy attack

94
00:03:32,560 --> 00:03:34,720
now when the original design is coupled

95
00:03:34,720 --> 00:03:36,879
with the logical open defense locked

96
00:03:36,879 --> 00:03:38,720
design without the secret key is

97
00:03:38,720 --> 00:03:40,959
forwarded to the untrusted entities it

98
00:03:40,959 --> 00:03:42,560
regulates a lock chip

99
00:03:42,560 --> 00:03:44,720
without the security the untrusted

100
00:03:44,720 --> 00:03:47,120
entities can no longer pirate all

101
00:03:47,120 --> 00:03:51,280
popular design for ip piracy attack

102
00:03:52,159 --> 00:03:54,799
before shipping the chip for free use

103
00:03:54,799 --> 00:03:57,040
the lock design is unlocked at a trusted

104
00:03:57,040 --> 00:03:59,679
facility

105
00:03:59,760 --> 00:04:02,239
the secret key is loaded onto a

106
00:04:02,239 --> 00:04:04,480
tamper-proof memory and the design is

107
00:04:04,480 --> 00:04:06,480
unlocked before shipping the chip to

108
00:04:06,480 --> 00:04:09,679
market for field use

109
00:04:10,000 --> 00:04:11,519
now let me provide you all with an

110
00:04:11,519 --> 00:04:13,840
example to explain logic locking

111
00:04:13,840 --> 00:04:16,000
consider the original circuit developed

112
00:04:16,000 --> 00:04:18,320
by a trusted designer using logic

113
00:04:18,320 --> 00:04:20,639
locking as a design for trust solution

114
00:04:20,639 --> 00:04:23,759
the ip owner locks the origin circuit or

115
00:04:23,759 --> 00:04:26,160
net list using additional gates

116
00:04:26,160 --> 00:04:28,880
commonly known as key gates the input of

117
00:04:28,880 --> 00:04:32,000
these key gates is called as key input

118
00:04:32,000 --> 00:04:34,160
consider an all zero pattern applied to

119
00:04:34,160 --> 00:04:36,479
the origin circuit whose earth response

120
00:04:36,479 --> 00:04:38,080
is with zero

121
00:04:38,080 --> 00:04:39,919
now for the correct key the locked

122
00:04:39,919 --> 00:04:42,160
circuit functions correctly and outputs

123
00:04:42,160 --> 00:04:45,040
a bit zero for the same input pattern

124
00:04:45,040 --> 00:04:47,040
but for an incorrect key the locked

125
00:04:47,040 --> 00:04:49,520
circuit functions incorrectly

126
00:04:49,520 --> 00:04:51,680
so in short with logic locking the

127
00:04:51,680 --> 00:04:53,680
circuit is converted into a password

128
00:04:53,680 --> 00:04:55,520
protector

129
00:04:55,520 --> 00:04:57,600
and towards it piracy and ic

130
00:04:57,600 --> 00:05:00,400
overproduction acts

131
00:05:00,400 --> 00:05:02,400
in this work we assume the most powerful

132
00:05:02,400 --> 00:05:04,639
attacker who has access to the working

133
00:05:04,639 --> 00:05:06,240
chip which can be purchased from the

134
00:05:06,240 --> 00:05:08,800
market with the secret key loaded inside

135
00:05:08,800 --> 00:05:11,440
the working trip is an oracle

136
00:05:11,440 --> 00:05:13,759
and the attacker also has access to the

137
00:05:13,759 --> 00:05:16,080
reverse engineered netlist that includes

138
00:05:16,080 --> 00:05:18,479
the key logic this can be obtained by

139
00:05:18,479 --> 00:05:20,320
reverse engineering the physical chip or

140
00:05:20,320 --> 00:05:22,160
the gdh25

141
00:05:22,160 --> 00:05:24,560
now the attacker can simulate and apply

142
00:05:24,560 --> 00:05:26,639
these input patterns with a working chip

143
00:05:26,639 --> 00:05:28,720
to collect the output responses

144
00:05:28,720 --> 00:05:30,479
the attacker can then figure out the

145
00:05:30,479 --> 00:05:33,039
secret key and break the reference

146
00:05:33,039 --> 00:05:35,039
the likely attacker in this case can be

147
00:05:35,039 --> 00:05:37,199
an unpredictable foundry under the test

148
00:05:37,199 --> 00:05:39,360
facility an end user or even a

149
00:05:39,360 --> 00:05:41,039
combination of these

150
00:05:41,039 --> 00:05:43,759
example of such an attack is sabotage

151
00:05:43,759 --> 00:05:45,680
further it is consistent with perks of

152
00:05:45,680 --> 00:05:48,080
principle which states that everything

153
00:05:48,080 --> 00:05:50,400
about the system except for secret key

154
00:05:50,400 --> 00:05:53,840
must be known to the attacker

155
00:05:54,479 --> 00:05:56,479
there has been an extensive research

156
00:05:56,479 --> 00:05:58,400
work going on in the domain of logic

157
00:05:58,400 --> 00:06:00,560
locking since more than a decade

158
00:06:00,560 --> 00:06:02,560
with early efforts in developing high

159
00:06:02,560 --> 00:06:05,280
output corruption schemes such as rll

160
00:06:05,280 --> 00:06:07,520
fll and sll which was subsequently

161
00:06:07,520 --> 00:06:10,240
broken by algorithmic attacks exploiting

162
00:06:10,240 --> 00:06:12,240
the high output corruption property of

163
00:06:12,240 --> 00:06:14,000
these defense schemes

164
00:06:14,000 --> 00:06:16,319
later point function based solutions

165
00:06:16,319 --> 00:06:18,400
were proposed which pushed the efforts

166
00:06:18,400 --> 00:06:20,160
of these algorithmic attacks to

167
00:06:20,160 --> 00:06:21,840
exponential limits

168
00:06:21,840 --> 00:06:24,160
however even such techniques were

169
00:06:24,160 --> 00:06:26,639
short-lived and exploited by structural

170
00:06:26,639 --> 00:06:28,560
and miscellaneous attacks

171
00:06:28,560 --> 00:06:30,479
logic locking research then saw a

172
00:06:30,479 --> 00:06:33,520
plethora of defense and attack works

173
00:06:33,520 --> 00:06:35,759
recently a new logic locking defense was

174
00:06:35,759 --> 00:06:37,759
proposed called taslog which we

175
00:06:37,759 --> 00:06:40,639
considered in this work

176
00:06:40,639 --> 00:06:42,639
now let me provide you all with a brief

177
00:06:42,639 --> 00:06:44,639
background on sagittac and the point

178
00:06:44,639 --> 00:06:47,199
function based schemes side attack was

179
00:06:47,199 --> 00:06:49,520
proposed in 2015 which breaks

180
00:06:49,520 --> 00:06:51,120
traditional high output corruption

181
00:06:51,120 --> 00:06:53,039
locking techniques by pruning out

182
00:06:53,039 --> 00:06:54,880
multiple incorrect keys in each

183
00:06:54,880 --> 00:06:56,080
iteration

184
00:06:56,080 --> 00:06:58,000
hence the complexity of stat attack is

185
00:06:58,000 --> 00:07:00,319
measured in the number of sat iterations

186
00:07:00,319 --> 00:07:01,919
and for traditional locking techniques

187
00:07:01,919 --> 00:07:03,680
the number of satellite relations lie in

188
00:07:03,680 --> 00:07:05,599
the range of 100.

189
00:07:05,599 --> 00:07:07,680
a possible selection without a side

190
00:07:07,680 --> 00:07:09,680
attack is to design a low production

191
00:07:09,680 --> 00:07:11,919
scheme where the side attack is forced

192
00:07:11,919 --> 00:07:14,160
to eliminate only one incorrectly for

193
00:07:14,160 --> 00:07:16,479
iteration thereby exponentially

194
00:07:16,479 --> 00:07:19,039
increasing the attack complexity

195
00:07:19,039 --> 00:07:20,800
some examples of low corruption

196
00:07:20,800 --> 00:07:23,039
techniques use point functions in the

197
00:07:23,039 --> 00:07:26,960
design such as cylon anti-sag and sfl

198
00:07:26,960 --> 00:07:29,280
gas lock is a variant of antacid where

199
00:07:29,280 --> 00:07:31,199
the point function is replaced by

200
00:07:31,199 --> 00:07:32,960
diversified version

201
00:07:32,960 --> 00:07:35,599
however all these cytosine techniques

202
00:07:35,599 --> 00:07:39,360
are vulnerable to structural attacks

203
00:07:39,360 --> 00:07:41,520
and as mentioned in this work we will

204
00:07:41,520 --> 00:07:43,599
investigate a proposed structural

205
00:07:43,599 --> 00:07:45,759
attacks on the catalog difference and

206
00:07:45,759 --> 00:07:48,400
its variants

207
00:07:48,720 --> 00:07:50,960
now we will move on to the background on

208
00:07:50,960 --> 00:07:54,240
cast lock and the end gas defense

209
00:07:54,240 --> 00:07:56,160
the cash lock defense consists of two

210
00:07:56,160 --> 00:07:59,360
parts positional circuit

211
00:07:59,360 --> 00:08:02,879
and a point function sub-circuit

212
00:08:02,879 --> 00:08:05,520
to secure against structural attacks it

213
00:08:05,520 --> 00:08:07,520
is critical for the point function to

214
00:08:07,520 --> 00:08:09,840
get merged with the original circuit

215
00:08:09,840 --> 00:08:12,240
however state of state-of-the-art cad or

216
00:08:12,240 --> 00:08:14,240
synthesis tools fail to resolve the

217
00:08:14,240 --> 00:08:16,160
structures and hence with the

218
00:08:16,160 --> 00:08:18,639
substructure identifiable the structural

219
00:08:18,639 --> 00:08:21,280
attack can be successfully launched

220
00:08:21,280 --> 00:08:22,879
with this attack the point function

221
00:08:22,879 --> 00:08:25,280
sub-circuit is removed and the original

222
00:08:25,280 --> 00:08:28,559
netlist is recovered

223
00:08:29,120 --> 00:08:30,879
now that we know how the castle of

224
00:08:30,879 --> 00:08:33,519
defense works we dive into its cyclical

225
00:08:33,519 --> 00:08:37,760
analysis and launch of the post attacks

226
00:08:37,919 --> 00:08:40,799
we first discuss about the proposed ifs

227
00:08:40,799 --> 00:08:42,880
attack on the catalog defense

228
00:08:42,880 --> 00:08:46,399
in antarct the g and g by blocks implies

229
00:08:46,399 --> 00:08:48,640
an anti which is a point function

230
00:08:48,640 --> 00:08:50,000
structure

231
00:08:50,000 --> 00:08:52,800
however in class lock a cascade of and

232
00:08:52,800 --> 00:08:56,160
or gates forms the g and g by blocks it

233
00:08:56,160 --> 00:08:58,160
is nothing but a diversified point

234
00:08:58,160 --> 00:08:59,200
function

235
00:08:59,200 --> 00:09:02,000
to successfully launch the ifs attack we

236
00:09:02,000 --> 00:09:05,040
first need to identify the flip signal y

237
00:09:05,040 --> 00:09:07,360
and its value

238
00:09:07,360 --> 00:09:09,600
we place all the key inputs in their

239
00:09:09,600 --> 00:09:11,600
point of conversions to obtain a flip

240
00:09:11,600 --> 00:09:12,800
signal

241
00:09:12,800 --> 00:09:15,279
next using an order kill we identify the

242
00:09:15,279 --> 00:09:17,920
value of the slip signal for this case

243
00:09:17,920 --> 00:09:20,959
it is logic 0. and setting this signal y

244
00:09:20,959 --> 00:09:23,200
to logic 0 bypasses the pass log

245
00:09:23,200 --> 00:09:26,399
protection to obtain the original design

246
00:09:26,399 --> 00:09:29,839
this is our example of one viscose 85

247
00:09:29,839 --> 00:09:33,920
benchmark c432 we observed success on 14

248
00:09:33,920 --> 00:09:36,880
out of 15 circuits from scots 85 and ipc

249
00:09:36,880 --> 00:09:39,440
99 benchmark suite since this is a

250
00:09:39,440 --> 00:09:41,519
circuit recovery attack we cannot

251
00:09:41,519 --> 00:09:45,279
recover the secret key using it

252
00:09:46,560 --> 00:09:48,959
to recover the secret key we propose a

253
00:09:48,959 --> 00:09:51,760
key bit mapping attack or kbm attack in

254
00:09:51,760 --> 00:09:53,040
short

255
00:09:53,040 --> 00:09:54,880
consider two complementary point

256
00:09:54,880 --> 00:09:57,839
function blocks gcas and gcas are

257
00:09:57,839 --> 00:10:00,160
signal y is the end of these

258
00:10:00,160 --> 00:10:02,240
complementary blocks each of these

259
00:10:02,240 --> 00:10:05,680
blocks takes in as input x key input a

260
00:10:05,680 --> 00:10:08,000
and a random vector r

261
00:10:08,000 --> 00:10:10,160
in cash lock instead of a point function

262
00:10:10,160 --> 00:10:12,800
structure there is a cascade of and or

263
00:10:12,800 --> 00:10:15,440
gates similar to the above equation

264
00:10:15,440 --> 00:10:18,560
signal y is characterized as follows

265
00:10:18,560 --> 00:10:20,959
now we set one part of the key as all

266
00:10:20,959 --> 00:10:23,279
zeroes and aim for the cover the other

267
00:10:23,279 --> 00:10:24,800
part

268
00:10:24,800 --> 00:10:26,399
after recovering the other part of the

269
00:10:26,399 --> 00:10:28,640
key we obtain the value of the flip of

270
00:10:28,640 --> 00:10:30,800
the signal y and recover the original

271
00:10:30,800 --> 00:10:33,800
circuit

272
00:10:34,000 --> 00:10:37,440
however setting k1 to 0 is difficult as

273
00:10:37,440 --> 00:10:40,240
bitwise mapping is unknown next we look

274
00:10:40,240 --> 00:10:42,320
into how to obtain the bitwise mapping

275
00:10:42,320 --> 00:10:46,680
between the two parts of the key

276
00:10:48,160 --> 00:10:50,399
we collect the key inputs connected to

277
00:10:50,399 --> 00:10:53,519
the same pi or internal net

278
00:10:53,519 --> 00:10:56,640
in this case a0 and kn are connected to

279
00:10:56,640 --> 00:10:59,920
input in0 and hence these two key inputs

280
00:10:59,920 --> 00:11:01,760
will be placed in different pins and

281
00:11:01,760 --> 00:11:04,240
will have a one bitwise mapping between

282
00:11:04,240 --> 00:11:06,480
them

283
00:11:08,000 --> 00:11:10,720
similarly k1 and kn plus one are

284
00:11:10,720 --> 00:11:12,800
connected to the same input and will be

285
00:11:12,800 --> 00:11:15,839
placed in different bins

286
00:11:17,120 --> 00:11:21,680
and also with k 2 and k in plus 2.

287
00:11:22,880 --> 00:11:25,200
here is an example showing how the key

288
00:11:25,200 --> 00:11:27,279
bit mappings are identified from an

289
00:11:27,279 --> 00:11:30,160
actual schematic

290
00:11:31,600 --> 00:11:33,680
after identifying the bitwise mapping

291
00:11:33,680 --> 00:11:36,560
between the two keys setting one part to

292
00:11:36,560 --> 00:11:38,880
some random value leads to the retrieval

293
00:11:38,880 --> 00:11:40,640
of the second part of the key using the

294
00:11:40,640 --> 00:11:42,959
sat attack now setting one part of the

295
00:11:42,959 --> 00:11:45,360
key reduces the key search space from 2

296
00:11:45,360 --> 00:11:47,760
to the power 2 n to 2 to the power n

297
00:11:47,760 --> 00:11:49,680
thereby adding the sat attack

298
00:11:49,680 --> 00:11:51,839
we can see here that without a proposed

299
00:11:51,839 --> 00:11:53,760
kbm start attack the number of stat

300
00:11:53,760 --> 00:11:56,000
iterations exponentially increase with

301
00:11:56,000 --> 00:11:57,440
the key size

302
00:11:57,440 --> 00:11:59,600
however with the kbm stat attack the

303
00:11:59,600 --> 00:12:01,680
number of iterations have reduced to

304
00:12:01,680 --> 00:12:04,000
linear complexity

305
00:12:04,000 --> 00:12:05,920
thus we have successfully recovered the

306
00:12:05,920 --> 00:12:08,160
secret key unlocking the lock design in

307
00:12:08,160 --> 00:12:12,079
few minutes as compared to yours

308
00:12:14,079 --> 00:12:16,240
we successfully launched our proposed

309
00:12:16,240 --> 00:12:18,639
attacks on the catalog defense to first

310
00:12:18,639 --> 00:12:20,880
recover the ocean circuit and then to

311
00:12:20,880 --> 00:12:22,959
recover even the secret key

312
00:12:22,959 --> 00:12:25,040
next we will look into another variant

313
00:12:25,040 --> 00:12:27,120
of catalog which is known as middle

314
00:12:27,120 --> 00:12:30,320
class or mcas

315
00:12:33,040 --> 00:12:35,680
in method class or mcas defense

316
00:12:35,680 --> 00:12:37,600
two class blocks are attached back to

317
00:12:37,600 --> 00:12:40,320
path as shown here there are two keys in

318
00:12:40,320 --> 00:12:43,040
which in m class one is hardcoded in the

319
00:12:43,040 --> 00:12:45,839
design while the other key is fed as

320
00:12:45,839 --> 00:12:47,279
user input

321
00:12:47,279 --> 00:12:49,920
now only when the k secret equals k

322
00:12:49,920 --> 00:12:52,800
class by out equals y voltage and the

323
00:12:52,800 --> 00:12:56,399
position circuit gets recovered

324
00:12:57,120 --> 00:12:59,440
removing the bycast block will no longer

325
00:12:59,440 --> 00:13:01,839
return the original circuit it will now

326
00:13:01,839 --> 00:13:04,399
return a modified circuit which consists

327
00:13:04,399 --> 00:13:07,200
of original and hardcoded secret key

328
00:13:07,200 --> 00:13:10,320
ideally y sql should be indicifible due

329
00:13:10,320 --> 00:13:12,560
to cat tool optimizations making the

330
00:13:12,560 --> 00:13:14,240
hard code component resolved in the

331
00:13:14,240 --> 00:13:17,040
validation circuit

332
00:13:18,560 --> 00:13:21,040
however the state-of-the-art pack tools

333
00:13:21,040 --> 00:13:23,279
are not cyclically centric and thus fail

334
00:13:23,279 --> 00:13:25,279
to successfully dissolve by secret

335
00:13:25,279 --> 00:13:27,360
within the original design thus

336
00:13:27,360 --> 00:13:29,600
identifying why secret and removing it

337
00:13:29,600 --> 00:13:32,959
returns the origins of it

338
00:13:33,360 --> 00:13:36,320
the ifs setback has three main steps

339
00:13:36,320 --> 00:13:38,959
feeling of wirecast identifying flip

340
00:13:38,959 --> 00:13:41,519
signal by secret and finally launching

341
00:13:41,519 --> 00:13:44,000
satisfaction to decipher k secret

342
00:13:44,000 --> 00:13:46,320
step one of peeling wirecast can be done

343
00:13:46,320 --> 00:13:49,199
either using ifs account or kbm static

344
00:13:49,199 --> 00:13:50,800
previously shown in the cash load

345
00:13:50,800 --> 00:13:51,680
defense

346
00:13:51,680 --> 00:13:53,920
for identifying why secret the signal

347
00:13:53,920 --> 00:13:57,680
must be connected to all pis

348
00:13:58,639 --> 00:14:01,199
the signal must have at most two and two

349
00:14:01,199 --> 00:14:04,560
input gates in its funnel

350
00:14:05,040 --> 00:14:07,440
and finally it must have a linear or a

351
00:14:07,440 --> 00:14:11,360
cascade structure in its final goal

352
00:14:12,800 --> 00:14:15,120
here we show a toy example the net

353
00:14:15,120 --> 00:14:17,680
highlighted in purple is the y secret

354
00:14:17,680 --> 00:14:20,720
which is the flip signal there are 31

355
00:14:20,720 --> 00:14:22,880
gates in the fandom of the signal as

356
00:14:22,880 --> 00:14:25,440
highlighted in red the number of primary

357
00:14:25,440 --> 00:14:28,000
inputs connected to all these 31 gates

358
00:14:28,000 --> 00:14:30,959
are 32 and also as we can see the linear

359
00:14:30,959 --> 00:14:33,600
structure is clearly visible

360
00:14:33,600 --> 00:14:36,399
hence to recover the secret key k secret

361
00:14:36,399 --> 00:14:39,360
we need to set y class equal to y secret

362
00:14:39,360 --> 00:14:42,000
such that y out becomes y origin

363
00:14:42,000 --> 00:14:43,600
now after identifying the phillips

364
00:14:43,600 --> 00:14:45,680
signal we invoke the start attack to

365
00:14:45,680 --> 00:14:47,279
find k cast

366
00:14:47,279 --> 00:14:49,519
setting correct k class will make y

367
00:14:49,519 --> 00:14:52,240
class equal to y secret and the original

368
00:14:52,240 --> 00:14:55,040
circuit will be successfully recovered

369
00:14:55,040 --> 00:14:57,279
in note here that although we are

370
00:14:57,279 --> 00:14:59,680
invoking a sat attack we are not using

371
00:14:59,680 --> 00:15:02,399
an order kit instead we are using the by

372
00:15:02,399 --> 00:15:03,839
secret block

373
00:15:03,839 --> 00:15:06,320
of with correctly already hard coded as

374
00:15:06,320 --> 00:15:08,320
the order kill for the y class block

375
00:15:08,320 --> 00:15:10,560
with key inputs accessible as primary

376
00:15:10,560 --> 00:15:12,240
inputs

377
00:15:12,240 --> 00:15:14,320
side attack pool will return the k class

378
00:15:14,320 --> 00:15:16,240
key which is nothing but the k secret

379
00:15:16,240 --> 00:15:17,199
key

380
00:15:17,199 --> 00:15:19,120
hence we only require a reverse

381
00:15:19,120 --> 00:15:20,959
engineered lock net list to launch the

382
00:15:20,959 --> 00:15:23,279
ifs side attack

383
00:15:23,279 --> 00:15:26,079
thus if the first attack is successful

384
00:15:26,079 --> 00:15:28,160
and highlights the erroneous assumptions

385
00:15:28,160 --> 00:15:30,399
about that tools and the dissolution of

386
00:15:30,399 --> 00:15:32,959
the structure

387
00:15:34,160 --> 00:15:36,240
next we move on to the experimental

388
00:15:36,240 --> 00:15:38,480
results for the three attacks proposed

389
00:15:38,480 --> 00:15:41,720
in this work

390
00:15:42,480 --> 00:15:44,880
we launched our ifs attack on total of

391
00:15:44,880 --> 00:15:48,320
15 circuits from iskas 85 and itc 99

392
00:15:48,320 --> 00:15:50,639
benchmark suite synthesized with full

393
00:15:50,639 --> 00:15:52,880
library and with only two input gates

394
00:15:52,880 --> 00:15:55,360
constraint library on cache defense and

395
00:15:55,360 --> 00:15:57,199
collected the results for flip signal

396
00:15:57,199 --> 00:15:59,440
value the level at which the flip signal

397
00:15:59,440 --> 00:16:01,600
was found from the output port and the

398
00:16:01,600 --> 00:16:03,440
time taken by the attack

399
00:16:03,440 --> 00:16:06,160
as we can see synthesis induces changes

400
00:16:06,160 --> 00:16:09,120
in the value of flip signal from 0 to 1

401
00:16:09,120 --> 00:16:11,600
hence assuming the value of y to be

402
00:16:11,600 --> 00:16:14,000
always 0 is incorrect and hence

403
00:16:14,000 --> 00:16:16,240
launching an ifs attack is pivotal to

404
00:16:16,240 --> 00:16:17,759
know the correct value of the file

405
00:16:17,759 --> 00:16:18,880
signal

406
00:16:18,880 --> 00:16:20,639
further we also observe that when

407
00:16:20,639 --> 00:16:22,800
primary output port is protected then

408
00:16:22,800 --> 00:16:25,519
the flip signal lies at at most level 3

409
00:16:25,519 --> 00:16:27,360
from the primary output port

410
00:16:27,360 --> 00:16:29,920
lastly the time taken by our ifs attack

411
00:16:29,920 --> 00:16:33,199
is less than 15 seconds

412
00:16:34,480 --> 00:16:37,440
next we launched the kbm attack on the

413
00:16:37,440 --> 00:16:39,839
catalog defense to recover the secretly

414
00:16:39,839 --> 00:16:41,759
unlocking the locked circuits

415
00:16:41,759 --> 00:16:44,560
we observe 100 success for all the 15

416
00:16:44,560 --> 00:16:47,360
circuits now without kbm sat the start

417
00:16:47,360 --> 00:16:49,759
attack iterations go to the power to n

418
00:16:49,759 --> 00:16:52,320
as we observed before however with kbm

419
00:16:52,320 --> 00:16:54,399
start attack after setting one part of

420
00:16:54,399 --> 00:16:56,480
the key the number of side iterations

421
00:16:56,480 --> 00:17:00,560
become linear with respect to key size

422
00:17:02,720 --> 00:17:05,359
next we launched our ifs sat attack on

423
00:17:05,359 --> 00:17:07,919
total of 15 circuits from scratch 85 and

424
00:17:07,919 --> 00:17:10,880
i399 benchmarks we again synthesized the

425
00:17:10,880 --> 00:17:12,880
full library and with only two input

426
00:17:12,880 --> 00:17:14,720
gates constrained library on enclave

427
00:17:14,720 --> 00:17:16,799
defense and collected the results for

428
00:17:16,799 --> 00:17:18,880
flip signal value the level at which the

429
00:17:18,880 --> 00:17:20,720
flip signal was found from the output

430
00:17:20,720 --> 00:17:23,359
port and the time taken by the attack as

431
00:17:23,359 --> 00:17:25,839
we can see the synthesis induces changes

432
00:17:25,839 --> 00:17:27,839
in the value of flip signal from 0 to 1

433
00:17:27,839 --> 00:17:29,360
similar to what we observed in the

434
00:17:29,360 --> 00:17:31,919
catalog defense hence assuming the value

435
00:17:31,919 --> 00:17:35,039
of y will always be 0 is incorrect and

436
00:17:35,039 --> 00:17:37,039
launching our ifs attack is again

437
00:17:37,039 --> 00:17:38,880
pivotal to know the correct value of the

438
00:17:38,880 --> 00:17:40,000
y signal

439
00:17:40,000 --> 00:17:41,840
further we also observe that when the

440
00:17:41,840 --> 00:17:43,760
primary output port is protected then

441
00:17:43,760 --> 00:17:46,160
the flip signal lies at at most level 3

442
00:17:46,160 --> 00:17:47,679
from the output port

443
00:17:47,679 --> 00:17:49,600
now after identifying the flip signal

444
00:17:49,600 --> 00:17:51,919
and its value we extract the hard coded

445
00:17:51,919 --> 00:17:54,400
class block and run set attack on it

446
00:17:54,400 --> 00:17:56,320
using the key control class block to

447
00:17:56,320 --> 00:17:58,559
recover this k secret key

448
00:17:58,559 --> 00:18:01,200
the time taken by our ifs side attack is

449
00:18:01,200 --> 00:18:04,080
in total at max 24 minutes with sat

450
00:18:04,080 --> 00:18:06,720
attack taking the majority of the time

451
00:18:06,720 --> 00:18:09,520
largely as a note ifs at attack is

452
00:18:09,520 --> 00:18:12,000
launched in an oracle less setting the

453
00:18:12,000 --> 00:18:14,240
hard coded class block is fed as a

454
00:18:14,240 --> 00:18:16,400
built-in oracle to the side attack along

455
00:18:16,400 --> 00:18:18,400
with the key controlled class block as

456
00:18:18,400 --> 00:18:20,900
the locked circuit

457
00:18:20,900 --> 00:18:22,799
[Music]

458
00:18:22,799 --> 00:18:25,120
next we launched ifs set attack on

459
00:18:25,120 --> 00:18:27,440
varying key sizes and observed 100

460
00:18:27,440 --> 00:18:31,360
success across all the cases

461
00:18:32,960 --> 00:18:35,280
we then checked the effect of technology

462
00:18:35,280 --> 00:18:37,520
nodes on the efficacy of our ifs sat

463
00:18:37,520 --> 00:18:39,520
attack and observed that technology node

464
00:18:39,520 --> 00:18:43,840
had no effect on the attack efficacy

465
00:18:44,960 --> 00:18:47,440
similarly the synthesis tools also did

466
00:18:47,440 --> 00:18:49,440
not play a role in thwarting our ifs sat

467
00:18:49,440 --> 00:18:52,000
attack the failures we see in the table

468
00:18:52,000 --> 00:18:54,080
are due to the presence of logic 0 and

469
00:18:54,080 --> 00:18:56,240
logic 1 signals in the design which

470
00:18:56,240 --> 00:18:59,039
either of the tools resolved separately

471
00:18:59,039 --> 00:19:00,799
thus we experimentally verified the

472
00:19:00,799 --> 00:19:02,880
efficacy of all three of our proposed

473
00:19:02,880 --> 00:19:05,039
attacks across different library gates

474
00:19:05,039 --> 00:19:06,960
different technology nodes and different

475
00:19:06,960 --> 00:19:10,200
cad tools

476
00:19:12,799 --> 00:19:14,799
to summarize we were successfully able

477
00:19:14,799 --> 00:19:17,120
to break 14 out of 15 circuits for all

478
00:19:17,120 --> 00:19:19,840
the three attacks with ifs and kbm as

479
00:19:19,840 --> 00:19:21,840
pre-processing steps the number of side

480
00:19:21,840 --> 00:19:24,640
iterations have reclused to few hundreds

481
00:19:24,640 --> 00:19:26,480
which in turn reduce the run time of the

482
00:19:26,480 --> 00:19:28,960
attack you also verify the efficacy of

483
00:19:28,960 --> 00:19:30,720
attacks on different key sizes

484
00:19:30,720 --> 00:19:33,360
technology nodes and cat tools

485
00:19:33,360 --> 00:19:34,799
hence we conclude that although the

486
00:19:34,799 --> 00:19:36,480
defense techniques are theoretically

487
00:19:36,480 --> 00:19:38,480
secure the hardware implementation

488
00:19:38,480 --> 00:19:40,720
leaves structural traces which can then

489
00:19:40,720 --> 00:19:42,640
be exploited by an attacker to recover

490
00:19:42,640 --> 00:19:44,240
the original design

491
00:19:44,240 --> 00:19:46,160
thus through this work we caution the

492
00:19:46,160 --> 00:19:48,480
designers about the cyclical assumptions

493
00:19:48,480 --> 00:19:50,320
when implementing an algorithmically

494
00:19:50,320 --> 00:19:54,760
secure defense in actual hardware

