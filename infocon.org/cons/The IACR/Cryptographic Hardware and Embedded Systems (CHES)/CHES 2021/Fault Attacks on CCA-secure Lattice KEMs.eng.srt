1
00:00:03,360 --> 00:00:05,040
hello and welcome to our talk on the

2
00:00:05,040 --> 00:00:07,359
paper fault attacks on cca secure

3
00:00:07,359 --> 00:00:09,519
lattice camps my name is peter pastel

4
00:00:09,519 --> 00:00:11,599
and this paper was joint work with lucas

5
00:00:11,599 --> 00:00:12,799
pocop

6
00:00:12,799 --> 00:00:15,120
so you're probably well aware that nist

7
00:00:15,120 --> 00:00:16,640
is currently running a

8
00:00:16,640 --> 00:00:18,720
standardization process for post quantum

9
00:00:18,720 --> 00:00:20,640
cryptography this standardization

10
00:00:20,640 --> 00:00:22,800
process is currently in the third and

11
00:00:22,800 --> 00:00:24,480
kind of final round

12
00:00:24,480 --> 00:00:26,720
and amongst the final lists are free

13
00:00:26,720 --> 00:00:28,320
lattice-based key encapsulation

14
00:00:28,320 --> 00:00:31,599
mechanisms camps namely kyber and true

15
00:00:31,599 --> 00:00:34,880
and saber and nist is expected to pick

16
00:00:34,880 --> 00:00:37,440
one of these free for standardization by

17
00:00:37,440 --> 00:00:40,559
the end of this year

18
00:00:40,719 --> 00:00:43,200
so these three finalists are kind of a

19
00:00:43,200 --> 00:00:45,520
nice fit for resource con resource

20
00:00:45,520 --> 00:00:47,760
constrained embedded devices they have

21
00:00:47,760 --> 00:00:51,280
quite a good runtime

22
00:00:51,440 --> 00:00:53,520
but the problem is of course performance

23
00:00:53,520 --> 00:00:55,760
isn't everything because embedded

24
00:00:55,760 --> 00:00:58,079
devices are put somewhere in the field

25
00:00:58,079 --> 00:00:59,840
they are accessible to attackers and

26
00:00:59,840 --> 00:01:00,800
thus

27
00:01:00,800 --> 00:01:04,400
uh susceptible to implementation attacks

28
00:01:04,400 --> 00:01:06,799
so what's the status of implementation

29
00:01:06,799 --> 00:01:08,159
attacks on these

30
00:01:08,159 --> 00:01:10,479
lattice-based camps well for side

31
00:01:10,479 --> 00:01:12,880
channel attacks there is already some

32
00:01:12,880 --> 00:01:15,439
stuff known some stuff published so we

33
00:01:15,439 --> 00:01:18,640
have seen various attacks and also some

34
00:01:18,640 --> 00:01:20,799
first protected in terms of masked

35
00:01:20,799 --> 00:01:24,320
implementations available

36
00:01:24,320 --> 00:01:27,119
now the situation for fault attacks is

37
00:01:27,119 --> 00:01:29,520
quite a bit different there is very

38
00:01:29,520 --> 00:01:31,920
little published work on fault attacks

39
00:01:31,920 --> 00:01:34,400
on lattice-based camps and also hardly

40
00:01:34,400 --> 00:01:37,920
any public information on how to achieve

41
00:01:37,920 --> 00:01:40,240
protections against potential fault

42
00:01:40,240 --> 00:01:43,040
attacks and since nist is expected to

43
00:01:43,040 --> 00:01:46,000
pick a scheme for standardization quite

44
00:01:46,000 --> 00:01:47,040
soon

45
00:01:47,040 --> 00:01:50,880
this is something we have to look into

46
00:01:50,880 --> 00:01:52,880
now what's also interesting about these

47
00:01:52,880 --> 00:01:55,520
lattice-based camps is that some of them

48
00:01:55,520 --> 00:01:58,399
share quite a lot of similarities at

49
00:01:58,399 --> 00:01:59,360
least

50
00:01:59,360 --> 00:02:01,920
if a viewed from a high level for

51
00:02:01,920 --> 00:02:04,880
instance uh kyber and sabre can be seen

52
00:02:04,880 --> 00:02:05,759
as

53
00:02:05,759 --> 00:02:08,239
descendants of a scheme by lubaszewski

54
00:02:08,239 --> 00:02:11,599
pika and rosen the lpr encryption scheme

55
00:02:11,599 --> 00:02:13,120
so this is a

56
00:02:13,120 --> 00:02:16,080
cpa secure public key encryption scheme

57
00:02:16,080 --> 00:02:17,360
based on

58
00:02:17,360 --> 00:02:19,760
where the security is based on the ring

59
00:02:19,760 --> 00:02:22,720
lining with error problem

60
00:02:22,720 --> 00:02:25,280
so this scheme is only

61
00:02:25,280 --> 00:02:27,920
so this lpr scheme and its descendants

62
00:02:27,920 --> 00:02:31,440
are only cpa secure and to get a cca

63
00:02:31,440 --> 00:02:32,640
secure

64
00:02:32,640 --> 00:02:35,040
key encapsulation mechanism both kyber

65
00:02:35,040 --> 00:02:37,599
and sabre employ some variant of the

66
00:02:37,599 --> 00:02:40,000
fujisaki or kamato transform

67
00:02:40,000 --> 00:02:42,560
and what this transform essentially does

68
00:02:42,560 --> 00:02:45,360
is during decapulation you take the

69
00:02:45,360 --> 00:02:47,920
ciphertext you decrypt the ciphertext to

70
00:02:47,920 --> 00:02:49,599
get some message m

71
00:02:49,599 --> 00:02:53,519
then you re-encrypt the ciphertext

72
00:02:53,519 --> 00:02:57,440
using a randomness that is a

73
00:02:57,440 --> 00:03:00,800
deterministically derived

74
00:03:00,800 --> 00:03:03,200
and then you check if this re-encrypted

75
00:03:03,200 --> 00:03:05,519
ciphertext matches the received

76
00:03:05,519 --> 00:03:07,519
ciphertext and only if these two

77
00:03:07,519 --> 00:03:10,400
ciphertexts match then you release the

78
00:03:10,400 --> 00:03:13,360
true shared secret k and otherwise if

79
00:03:13,360 --> 00:03:15,519
they don't match then you assume that

80
00:03:15,519 --> 00:03:17,920
the ciphertext was manipulated that you

81
00:03:17,920 --> 00:03:20,480
received in some form

82
00:03:20,480 --> 00:03:22,720
and then you return for instance a

83
00:03:22,720 --> 00:03:24,799
random shared secret or an error signal

84
00:03:24,799 --> 00:03:27,599
or something like that

85
00:03:27,680 --> 00:03:28,640
now

86
00:03:28,640 --> 00:03:30,879
we've

87
00:03:31,840 --> 00:03:33,840
constructions like that somewhere

88
00:03:33,840 --> 00:03:36,799
different as well because what this is

89
00:03:36,799 --> 00:03:39,040
decrypt encrypt and check

90
00:03:39,040 --> 00:03:41,200
uh if the same comes out again this is

91
00:03:41,200 --> 00:03:42,959
essentially also a fault counter measure

92
00:03:42,959 --> 00:03:45,519
that we often use in a symmetric key

93
00:03:45,519 --> 00:03:47,519
cryptography for instance we decrypt

94
00:03:47,519 --> 00:03:49,519
encrypt and check if we get the same

95
00:03:49,519 --> 00:03:52,000
input again

96
00:03:52,000 --> 00:03:53,760
so the question is

97
00:03:53,760 --> 00:03:55,519
can we still

98
00:03:55,519 --> 00:03:58,319
do attacks on on such schemes even with

99
00:03:58,319 --> 00:04:00,640
this kind of inherent fault protection

100
00:04:00,640 --> 00:04:01,760
in place

101
00:04:01,760 --> 00:04:03,599
and the answer as you may have guessed

102
00:04:03,599 --> 00:04:05,439
from the title of the talk is yes

103
00:04:05,439 --> 00:04:08,000
because we show that attacks are still

104
00:04:08,000 --> 00:04:09,920
possible and practical

105
00:04:09,920 --> 00:04:10,879
so the

106
00:04:10,879 --> 00:04:12,959
this fujisaki or commodore transform is

107
00:04:12,959 --> 00:04:15,360
a false deterrent that makes might make

108
00:04:15,360 --> 00:04:17,279
faults harder but is not a

109
00:04:17,279 --> 00:04:20,958
counter-measure as such

110
00:04:21,199 --> 00:04:23,600
our attack works as follows so we've

111
00:04:23,600 --> 00:04:25,600
introduced a fault at a specific spot

112
00:04:25,600 --> 00:04:28,400
then we observe does the decapsulation

113
00:04:28,400 --> 00:04:31,440
fail or does it still return the correct

114
00:04:31,440 --> 00:04:33,600
value so this is kind of like a safe

115
00:04:33,600 --> 00:04:35,840
error attack

116
00:04:35,840 --> 00:04:38,560
the outcome so the information does it

117
00:04:38,560 --> 00:04:39,919
fail or not

118
00:04:39,919 --> 00:04:42,320
carries information on the private key

119
00:04:42,320 --> 00:04:44,160
we gather this information over many

120
00:04:44,160 --> 00:04:45,759
invocations over many faulted

121
00:04:45,759 --> 00:04:48,720
encapsulations and we finally solve for

122
00:04:48,720 --> 00:04:51,120
the key

123
00:04:51,120 --> 00:04:51,919
we

124
00:04:51,919 --> 00:04:54,840
attack kyber and new hopes or two

125
00:04:54,840 --> 00:04:57,880
schemes and we have to fault at least

126
00:04:57,880 --> 00:05:01,840
6500 encapsulations but we also

127
00:05:01,840 --> 00:05:04,160
say that there's a that there is a high

128
00:05:04,160 --> 00:05:06,960
probability that uh such attacks can

129
00:05:06,960 --> 00:05:08,880
also be extended to other similar

130
00:05:08,880 --> 00:05:11,199
schemes

131
00:05:11,199 --> 00:05:14,080
so to explain how this attack works i

132
00:05:14,080 --> 00:05:18,080
have to give a brief introduction to lpr

133
00:05:18,080 --> 00:05:20,000
so this lpr encryption scheme i always

134
00:05:20,000 --> 00:05:22,240
like to call it describe it as a noisy

135
00:05:22,240 --> 00:05:24,720
elgamar scheme

136
00:05:24,720 --> 00:05:27,120
so this works as follows

137
00:05:27,120 --> 00:05:28,639
it uses

138
00:05:28,639 --> 00:05:31,039
it works with elements in a polynomial

139
00:05:31,039 --> 00:05:32,560
ring rq

140
00:05:32,560 --> 00:05:35,440
where all coefficients are taken modulo

141
00:05:35,440 --> 00:05:36,400
sum

142
00:05:36,400 --> 00:05:37,680
uh q

143
00:05:37,680 --> 00:05:39,759
can be a prime but doesn't have to be a

144
00:05:39,759 --> 00:05:42,160
prime number

145
00:05:42,160 --> 00:05:44,320
uh key generation works as follows first

146
00:05:44,320 --> 00:05:47,120
two polynomials s and e are sampled

147
00:05:47,120 --> 00:05:51,039
where all coefficients follow a a narrow

148
00:05:51,039 --> 00:05:53,120
error distribution chi for instance

149
00:05:53,120 --> 00:05:55,360
kyber uses a binomial distribution

150
00:05:55,360 --> 00:05:58,400
between for instance minus 2 and plus 2.

151
00:05:58,400 --> 00:06:00,639
then a second polynomial a is sampled

152
00:06:00,639 --> 00:06:01,600
where the

153
00:06:01,600 --> 00:06:03,919
coefficients are drawn uniformly from

154
00:06:03,919 --> 00:06:05,039
set queue

155
00:06:05,039 --> 00:06:07,520
and the public key b is computed as a

156
00:06:07,520 --> 00:06:10,319
times s plus e

157
00:06:10,319 --> 00:06:12,160
for encryption you

158
00:06:12,160 --> 00:06:14,319
again sample three polynomials from this

159
00:06:14,319 --> 00:06:16,880
error distribution so you sample r e1

160
00:06:16,880 --> 00:06:18,880
and e2 then you compute the two

161
00:06:18,880 --> 00:06:21,120
ciphertext components u and v

162
00:06:21,120 --> 00:06:21,919
and

163
00:06:21,919 --> 00:06:24,400
uh you encode

164
00:06:24,400 --> 00:06:27,280
you add the the message onto the second

165
00:06:27,280 --> 00:06:29,120
ciphertext component v

166
00:06:29,120 --> 00:06:31,680
uh by encoding it and you can do this

167
00:06:31,680 --> 00:06:33,600
for instance by

168
00:06:33,600 --> 00:06:35,680
taking each message bit as one

169
00:06:35,680 --> 00:06:38,400
coefficient and multiplying this bit

170
00:06:38,400 --> 00:06:41,919
with q half so you either add 0 for a 0

171
00:06:41,919 --> 00:06:45,520
bit or q half for a 1 bit

172
00:06:45,520 --> 00:06:48,479
and for decryption you compute m m prime

173
00:06:48,479 --> 00:06:49,520
equals

174
00:06:49,520 --> 00:06:52,960
uh v minus u times the secret key s and

175
00:06:52,960 --> 00:06:54,479
this works because if you do back

176
00:06:54,479 --> 00:06:57,120
substitution you get that this m prime

177
00:06:57,120 --> 00:07:00,080
is m times q over two so the encoded

178
00:07:00,080 --> 00:07:03,680
message plus r times e minus e 1 s plus

179
00:07:03,680 --> 00:07:06,800
e 2 so plus an additional error term

180
00:07:06,800 --> 00:07:10,479
but all these polynomials of involved in

181
00:07:10,479 --> 00:07:12,800
this error term are sampled from this

182
00:07:12,800 --> 00:07:15,360
small error distribution so we can say

183
00:07:15,360 --> 00:07:18,880
that m prime is approximately m times q

184
00:07:18,880 --> 00:07:19,919
half

185
00:07:19,919 --> 00:07:22,080
and this might look something like in

186
00:07:22,080 --> 00:07:24,560
the figure below where we show an

187
00:07:24,560 --> 00:07:26,319
exemplary uh

188
00:07:26,319 --> 00:07:28,479
distribution of all the coefficients in

189
00:07:28,479 --> 00:07:31,360
this m prime so we have two kind of

190
00:07:31,360 --> 00:07:34,160
gaussians or truly gaussians but kind of

191
00:07:34,160 --> 00:07:35,440
uh

192
00:07:35,440 --> 00:07:38,479
and we have one such uh peak one such

193
00:07:38,479 --> 00:07:41,280
gaussian centered around uh zero so

194
00:07:41,280 --> 00:07:43,919
these are all the zero bits and one

195
00:07:43,919 --> 00:07:46,000
distribution centered around q half so

196
00:07:46,000 --> 00:07:48,479
those are all the one bits and this

197
00:07:48,479 --> 00:07:50,720
these distributions are far enough apart

198
00:07:50,720 --> 00:07:54,720
such that a decoder uh can then work out

199
00:07:54,720 --> 00:07:55,599
if

200
00:07:55,599 --> 00:07:59,039
a noisy bit belong is actually a zero

201
00:07:59,039 --> 00:08:01,919
bit or a one bit

202
00:08:01,919 --> 00:08:05,120
and this scheme or a variant of this

203
00:08:05,120 --> 00:08:07,840
scheme can then be uh plugged into this

204
00:08:07,840 --> 00:08:10,879
f o transform to get a chosen ciphertext

205
00:08:10,879 --> 00:08:13,919
secure key encapsulation mechanism

206
00:08:13,919 --> 00:08:16,319
where again there is the question where

207
00:08:16,319 --> 00:08:18,879
can we now inject a fault so that we can

208
00:08:18,879 --> 00:08:21,840
actually attack this

209
00:08:22,800 --> 00:08:25,199
some people have already suggested to

210
00:08:25,199 --> 00:08:28,479
attack uh this final equality check

211
00:08:28,479 --> 00:08:31,680
to check if two cipher texts are uh

212
00:08:31,680 --> 00:08:33,760
identical

213
00:08:33,760 --> 00:08:37,519
uh and to ch uh to fold it in such a way

214
00:08:37,519 --> 00:08:40,240
that always you get the one path off of

215
00:08:40,240 --> 00:08:42,320
this this multiplexer

216
00:08:42,320 --> 00:08:44,159
this would then re-enable chosen

217
00:08:44,159 --> 00:08:46,959
ciphertext attacks but again this is

218
00:08:46,959 --> 00:08:50,320
already known and also this comparison

219
00:08:50,320 --> 00:08:53,200
is often quite a small part of of the

220
00:08:53,200 --> 00:08:55,360
runtime so you can throw lots of counter

221
00:08:55,360 --> 00:08:57,200
measures at it

222
00:08:57,200 --> 00:09:01,600
and it won't make a lot of a dent

223
00:09:01,839 --> 00:09:04,080
now faulting in these three middle

224
00:09:04,080 --> 00:09:06,560
components also doesn't

225
00:09:06,560 --> 00:09:09,120
help us a lot because if we assume that

226
00:09:09,120 --> 00:09:11,600
the attacker generated the ciphertext

227
00:09:11,600 --> 00:09:12,560
meaning

228
00:09:12,560 --> 00:09:15,200
that he runs honestly runs encapsulation

229
00:09:15,200 --> 00:09:17,839
then he already knows all the values

230
00:09:17,839 --> 00:09:19,760
that are processed in these three boxes

231
00:09:19,760 --> 00:09:21,360
because this is essentially just

232
00:09:21,360 --> 00:09:24,160
encapsulation again the re-encryption it

233
00:09:24,160 --> 00:09:25,920
uses the exact

234
00:09:25,920 --> 00:09:28,560
same values

235
00:09:28,560 --> 00:09:29,680
and of course

236
00:09:29,680 --> 00:09:32,000
faulting a known value doesn't really

237
00:09:32,000 --> 00:09:33,440
help us a lot

238
00:09:33,440 --> 00:09:34,720
so finally

239
00:09:34,720 --> 00:09:37,839
we can fold the decryption which is also

240
00:09:37,839 --> 00:09:39,120
kind of uh

241
00:09:39,120 --> 00:09:41,360
the most

242
00:09:41,360 --> 00:09:43,600
logically real part because it involves

243
00:09:43,600 --> 00:09:45,519
the secret key

244
00:09:45,519 --> 00:09:47,839
the problem is in fault attacks we often

245
00:09:47,839 --> 00:09:50,640
think of it in a way that okay we inject

246
00:09:50,640 --> 00:09:53,279
a faults and we get some disturbed

247
00:09:53,279 --> 00:09:55,600
result and we use this disturbed result

248
00:09:55,600 --> 00:09:57,279
to compute backwards and derive

249
00:09:57,279 --> 00:09:59,200
information on the key

250
00:09:59,200 --> 00:10:01,360
here however we have the problem if we

251
00:10:01,360 --> 00:10:04,480
inject a fault such that this m this

252
00:10:04,480 --> 00:10:06,640
message is changed

253
00:10:06,640 --> 00:10:07,839
then

254
00:10:07,839 --> 00:10:10,480
of course the re-encryption will lead to

255
00:10:10,480 --> 00:10:12,160
a different ciphertext

256
00:10:12,160 --> 00:10:14,560
and meaning that

257
00:10:14,560 --> 00:10:16,880
always we have always will always return

258
00:10:16,880 --> 00:10:19,040
a random shared secret and there is of

259
00:10:19,040 --> 00:10:21,120
course no information on the secret key

260
00:10:21,120 --> 00:10:25,360
on some in some random value

261
00:10:25,360 --> 00:10:27,839
so we have to do it think of it a little

262
00:10:27,839 --> 00:10:30,320
bit differently

263
00:10:30,320 --> 00:10:32,079
because if you think about it the only

264
00:10:32,079 --> 00:10:34,000
recoverable information really that we

265
00:10:34,000 --> 00:10:36,399
get is is this

266
00:10:36,399 --> 00:10:37,760
the secret key

267
00:10:37,760 --> 00:10:39,519
correct so did

268
00:10:39,519 --> 00:10:41,760
we follow this one path in this

269
00:10:41,760 --> 00:10:43,920
multiplexer are both ciphertexts the

270
00:10:43,920 --> 00:10:44,880
same

271
00:10:44,880 --> 00:10:47,519
or is it some random so word to

272
00:10:47,519 --> 00:10:50,640
ciphertext differently

273
00:10:50,640 --> 00:10:53,279
and this information this distinction

274
00:10:53,279 --> 00:10:56,240
correct k versus a random k has to carry

275
00:10:56,240 --> 00:10:58,880
some information on the key

276
00:10:58,880 --> 00:11:01,200
now where can we inject the fault such

277
00:11:01,200 --> 00:11:02,800
that we

278
00:11:02,800 --> 00:11:05,200
have a chance to still get the correct

279
00:11:05,200 --> 00:11:06,720
key so

280
00:11:06,720 --> 00:11:08,320
still the same m

281
00:11:08,320 --> 00:11:09,600
and that it

282
00:11:09,600 --> 00:11:11,839
also carries information on the key well

283
00:11:11,839 --> 00:11:15,839
we found a place in the decoder

284
00:11:16,079 --> 00:11:18,320
remember that this decoder recovers the

285
00:11:18,320 --> 00:11:21,200
message m from this noisy m prime for

286
00:11:21,200 --> 00:11:23,440
each coefficient it takes input values

287
00:11:23,440 --> 00:11:26,800
between 0 and q it outputs a single bit

288
00:11:26,800 --> 00:11:29,920
0 001 so even if we shoot in there

289
00:11:29,920 --> 00:11:33,120
randomly then we have a 50 chance to get

290
00:11:33,120 --> 00:11:35,839
the same bit out of it but of course we

291
00:11:35,839 --> 00:11:38,959
can't do it randomly we have to do it a

292
00:11:38,959 --> 00:11:40,320
little bit

293
00:11:40,320 --> 00:11:42,399
more cleverly

294
00:11:42,399 --> 00:11:44,000
so we use the assumption that the

295
00:11:44,000 --> 00:11:46,640
attacker runs the encapsulation honest

296
00:11:46,640 --> 00:11:48,880
manner and he sends the cipher text

297
00:11:48,880 --> 00:11:50,880
meaning that he knows the shared secret

298
00:11:50,880 --> 00:11:53,360
and all intermediates that are computed

299
00:11:53,360 --> 00:11:55,760
during encapsulation and also during

300
00:11:55,760 --> 00:11:57,600
re-encryption

301
00:11:57,600 --> 00:11:59,920
now if we have a look at this equation

302
00:11:59,920 --> 00:12:02,720
which turned up during uh decryption m

303
00:12:02,720 --> 00:12:05,519
prime equals m times q half plus re

304
00:12:05,519 --> 00:12:08,240
minus e1 s plus e2

305
00:12:08,240 --> 00:12:11,920
now a lot of these uh

306
00:12:12,160 --> 00:12:14,399
terms that are in there

307
00:12:14,399 --> 00:12:16,480
are are known to the attacker namely the

308
00:12:16,480 --> 00:12:20,240
message r e1 and e2 and only two

309
00:12:20,240 --> 00:12:23,200
polynomials in there e and s are unknown

310
00:12:23,200 --> 00:12:26,240
and this is the secret key

311
00:12:26,240 --> 00:12:28,000
so this means if we

312
00:12:28,000 --> 00:12:31,839
learn some information on this m prime

313
00:12:31,839 --> 00:12:33,839
apart from the fact if it decodes to a

314
00:12:33,839 --> 00:12:36,320
zero or a one then we have information

315
00:12:36,320 --> 00:12:40,079
that is linear in the secret key

316
00:12:40,079 --> 00:12:42,639
okay but how can we learn something

317
00:12:42,639 --> 00:12:45,760
about this m prime using a

318
00:12:45,760 --> 00:12:48,240
fault well for that we have to look at

319
00:12:48,240 --> 00:12:49,760
the decoder

320
00:12:49,760 --> 00:12:51,760
how it is actually implemented and for

321
00:12:51,760 --> 00:12:54,480
this we use the reference implementation

322
00:12:54,480 --> 00:12:57,040
of kyber's decoder it works as follows

323
00:12:57,040 --> 00:12:59,600
it takes an input a

324
00:12:59,600 --> 00:13:01,200
between 0 and q

325
00:13:01,200 --> 00:13:03,600
it multiplies this input by 2. so this

326
00:13:03,600 --> 00:13:06,240
is just a scaling of the axis then it

327
00:13:06,240 --> 00:13:09,680
adds q over 2 so this is just a shift of

328
00:13:09,680 --> 00:13:10,959
the axis

329
00:13:10,959 --> 00:13:13,680
it divides by q

330
00:13:13,680 --> 00:13:16,959
the value so this and then the

331
00:13:16,959 --> 00:13:18,639
least significant bit

332
00:13:18,639 --> 00:13:21,519
is returned this is this and with the

333
00:13:21,519 --> 00:13:22,959
constant one

334
00:13:22,959 --> 00:13:25,440
and if you follow the distributions here

335
00:13:25,440 --> 00:13:28,480
so the solid lines belong to a bit zero

336
00:13:28,480 --> 00:13:31,040
and the dashed lines to a bit one and

337
00:13:31,040 --> 00:13:33,600
you can clearly see that all

338
00:13:33,600 --> 00:13:36,000
bits are correctly

339
00:13:36,000 --> 00:13:38,079
decoded

340
00:13:38,079 --> 00:13:40,880
but what happens if we skip this one

341
00:13:40,880 --> 00:13:44,240
step this addition with q over two well

342
00:13:44,240 --> 00:13:46,560
now we have the following situation that

343
00:13:46,560 --> 00:13:49,519
for the the positive part of this error

344
00:13:49,519 --> 00:13:52,880
distributions of this kind of gaussians

345
00:13:52,880 --> 00:13:55,440
these are still correctly decoded

346
00:13:55,440 --> 00:13:57,360
because if you have a look at the green

347
00:13:57,360 --> 00:13:59,920
solid line it still decodes to one the

348
00:13:59,920 --> 00:14:01,040
green dash

349
00:14:01,040 --> 00:14:03,279
to a zero the green dashed line decodes

350
00:14:03,279 --> 00:14:07,199
to a one but the negative parts

351
00:14:07,199 --> 00:14:09,040
they on the left of the of the

352
00:14:09,040 --> 00:14:11,199
distribution they are incorrectly

353
00:14:11,199 --> 00:14:14,639
decoded so a a one gets decoded to a

354
00:14:14,639 --> 00:14:19,920
zero and a zero gets decoded to a one

355
00:14:20,160 --> 00:14:22,720
and this also means that

356
00:14:22,720 --> 00:14:26,079
if we decode to a correct value to an

357
00:14:26,079 --> 00:14:27,920
incorrect value then of course the

358
00:14:27,920 --> 00:14:29,920
re-encryption will say yeah this this

359
00:14:29,920 --> 00:14:32,240
ciphertext was incorrect and will reject

360
00:14:32,240 --> 00:14:35,600
and we will get a a random

361
00:14:35,600 --> 00:14:37,279
shared secret

362
00:14:37,279 --> 00:14:39,519
so we can say that

363
00:14:39,519 --> 00:14:42,880
this error term this re minus e1s plus

364
00:14:42,880 --> 00:14:46,240
e2 the and the if coefficient so this is

365
00:14:46,240 --> 00:14:48,079
the coefficient where where we injected

366
00:14:48,079 --> 00:14:50,720
the fault we can say that this linear

367
00:14:50,720 --> 00:14:52,160
equation

368
00:14:52,160 --> 00:14:55,199
is larger or equal to zero if the faults

369
00:14:55,199 --> 00:14:58,480
which we call ineffective so which means

370
00:14:58,480 --> 00:15:00,720
that we injected the fault but we still

371
00:15:00,720 --> 00:15:04,480
get the correct k out of it

372
00:15:04,480 --> 00:15:05,440
and

373
00:15:05,440 --> 00:15:07,600
on the other hand we can say that this

374
00:15:07,600 --> 00:15:11,519
linear equation is is is negative if the

375
00:15:11,519 --> 00:15:14,000
fault was effective meaning that we

376
00:15:14,000 --> 00:15:16,800
injected the fault and it really changed

377
00:15:16,800 --> 00:15:19,680
something up and the incorrect bit

378
00:15:19,680 --> 00:15:24,480
was returned and and since the fo

379
00:15:24,480 --> 00:15:26,720
detects that something is incorrect we

380
00:15:26,720 --> 00:15:30,639
get a random shared secret k

381
00:15:31,680 --> 00:15:34,639
so uh we now gather such

382
00:15:34,639 --> 00:15:37,519
so what we have now is an inequality so

383
00:15:37,519 --> 00:15:40,079
on the left we have some some

384
00:15:40,079 --> 00:15:42,160
something which is linear in the key and

385
00:15:42,160 --> 00:15:45,120
then we get is this larger than or equal

386
00:15:45,120 --> 00:15:47,920
to zero or smaller than zero so a linear

387
00:15:47,920 --> 00:15:50,000
inequality

388
00:15:50,000 --> 00:15:53,600
so we now gather many such inequalities

389
00:15:53,600 --> 00:15:55,279
and we get

390
00:15:55,279 --> 00:15:58,639
one inequality per faulted the

391
00:15:58,639 --> 00:16:00,639
capsulation so we generate many

392
00:16:00,639 --> 00:16:03,199
ciphertexts we send it to the device

393
00:16:03,199 --> 00:16:07,279
inject one fault per uh call

394
00:16:07,279 --> 00:16:11,440
and we get one inequality out of it

395
00:16:11,440 --> 00:16:14,720
uh and we gather these inequalities in

396
00:16:14,720 --> 00:16:16,720
in some manner and we can actually write

397
00:16:16,720 --> 00:16:19,600
these inequalities in a matrix vector

398
00:16:19,600 --> 00:16:22,639
form so we exploit this this so we use

399
00:16:22,639 --> 00:16:24,800
this this linear property that this is

400
00:16:24,800 --> 00:16:28,800
linear so we write e times s as uh on in

401
00:16:28,800 --> 00:16:31,759
this vector and the known coefficients

402
00:16:31,759 --> 00:16:32,800
this r

403
00:16:32,800 --> 00:16:36,399
1 and e 1 and the left matrix and then

404
00:16:36,399 --> 00:16:39,040
we have instead of equals we have uh

405
00:16:39,040 --> 00:16:41,279
this this vector which contains smaller

406
00:16:41,279 --> 00:16:44,079
or greater than

407
00:16:44,240 --> 00:16:46,720
and now uh this problem here of

408
00:16:46,720 --> 00:16:48,800
recovering e and s

409
00:16:48,800 --> 00:16:51,519
using this this left matrix and this

410
00:16:51,519 --> 00:16:55,680
right vector with the e2's in it well

411
00:16:55,680 --> 00:16:58,399
if you replace this vector with the un

412
00:16:58,399 --> 00:17:00,800
with the inequal signs with the larger

413
00:17:00,800 --> 00:17:04,720
and smaller signs with approximate signs

414
00:17:04,720 --> 00:17:07,199
then this is essentially a linear

415
00:17:07,199 --> 00:17:10,079
decoding problem that

416
00:17:10,079 --> 00:17:12,480
that where we already have

417
00:17:12,480 --> 00:17:14,640
several algorithms to to tackle such

418
00:17:14,640 --> 00:17:17,439
decoding algorithms

419
00:17:17,439 --> 00:17:18,640
and

420
00:17:18,640 --> 00:17:19,919
we

421
00:17:19,919 --> 00:17:22,959
and for this reason we use a

422
00:17:22,959 --> 00:17:24,480
technique that is also known from

423
00:17:24,480 --> 00:17:29,760
decoding uh we use uh belief propagation

424
00:17:29,760 --> 00:17:31,919
i'll i'll skip over

425
00:17:31,919 --> 00:17:34,559
many details which are

426
00:17:34,559 --> 00:17:36,640
involved in this kind of decoding

427
00:17:36,640 --> 00:17:39,120
process

428
00:17:39,200 --> 00:17:40,000
so

429
00:17:40,000 --> 00:17:43,360
we co decode this code and we find

430
00:17:43,360 --> 00:17:45,440
e and s

431
00:17:45,440 --> 00:17:48,080
we attacked this implementation for

432
00:17:48,080 --> 00:17:50,880
kyber and new hope so this shows that

433
00:17:50,880 --> 00:17:54,240
this attack works for multiple schemes

434
00:17:54,240 --> 00:17:57,039
and we also attacked a masked decoder

435
00:17:57,039 --> 00:17:59,679
implementation so of course masking as

436
00:17:59,679 --> 00:18:01,840
such is not a faulting counter measure

437
00:18:01,840 --> 00:18:04,160
but more a side channel counter measure

438
00:18:04,160 --> 00:18:06,240
but still since

439
00:18:06,240 --> 00:18:08,799
our this attack is implementation

440
00:18:08,799 --> 00:18:11,760
specific and we skip over an instruction

441
00:18:11,760 --> 00:18:13,760
it it

442
00:18:13,760 --> 00:18:18,320
we had a look if if attacks still work

443
00:18:18,320 --> 00:18:19,840
uh we

444
00:18:19,840 --> 00:18:22,720
determined the the success rate of the

445
00:18:22,720 --> 00:18:25,039
for of the attacks we are simulations so

446
00:18:25,039 --> 00:18:27,039
we uh determined to success rate as a

447
00:18:27,039 --> 00:18:29,760
function of faulted of the number of

448
00:18:29,760 --> 00:18:31,679
faulted decapsulation

449
00:18:31,679 --> 00:18:34,000
and of course for

450
00:18:34,000 --> 00:18:36,640
and you can see the outcome below so of

451
00:18:36,640 --> 00:18:38,480
course for

452
00:18:38,480 --> 00:18:40,559
larger more secure parameter sets we

453
00:18:40,559 --> 00:18:43,200
need more faults for kyber

454
00:18:43,200 --> 00:18:45,120
and for the smallest parameters at kyber

455
00:18:45,120 --> 00:18:47,120
512 we need

456
00:18:47,120 --> 00:18:50,640
about 6000 volts and for the largest

457
00:18:50,640 --> 00:18:53,840
parameter set we need like 13 000 volts

458
00:18:53,840 --> 00:18:57,360
to get a good success rate

459
00:18:57,360 --> 00:19:00,640
but to show that this attack is also

460
00:19:00,640 --> 00:19:02,880
really practical we actually ran this

461
00:19:02,880 --> 00:19:04,160
attack so we

462
00:19:04,160 --> 00:19:07,840
we ran kyber 512 on a microcontroller

463
00:19:07,840 --> 00:19:09,600
injected clock glitches in this

464
00:19:09,600 --> 00:19:12,240
microcontroller and we

465
00:19:12,240 --> 00:19:15,200
successfully recovered the

466
00:19:15,200 --> 00:19:17,360
key on this

467
00:19:17,360 --> 00:19:19,440
microcontroller

468
00:19:19,440 --> 00:19:22,400
so okay uh in conclusion what we have

469
00:19:22,400 --> 00:19:24,799
here we demonstrated that

470
00:19:24,799 --> 00:19:25,919
attacks

471
00:19:25,919 --> 00:19:27,360
even on

472
00:19:27,360 --> 00:19:28,160
uh

473
00:19:28,160 --> 00:19:29,919
fo transform key encapsulation

474
00:19:29,919 --> 00:19:32,400
mechanisms are practical so the

475
00:19:32,400 --> 00:19:35,520
fujisakio kamato transform might be a

476
00:19:35,520 --> 00:19:38,080
fault deterrent it makes attacks harder

477
00:19:38,080 --> 00:19:42,000
but attacks are still possible

478
00:19:42,160 --> 00:19:42,960
we

479
00:19:42,960 --> 00:19:44,880
applied this attack on kyber and new

480
00:19:44,880 --> 00:19:46,400
hope but

481
00:19:46,400 --> 00:19:48,480
similar attacks

482
00:19:48,480 --> 00:19:52,160
for other schemes likely exist so for

483
00:19:52,160 --> 00:19:55,039
for schemes that are very uh similar in

484
00:19:55,039 --> 00:19:57,679
their from a high-level viewpoint so

485
00:19:57,679 --> 00:20:00,480
which are descendants of lpr

486
00:20:00,480 --> 00:20:01,919
and uh

487
00:20:01,919 --> 00:20:05,520
use an f a variant of the fo transform

488
00:20:05,520 --> 00:20:08,080
also i'd like to highlight that

489
00:20:08,080 --> 00:20:11,039
what i described here is a very specific

490
00:20:11,039 --> 00:20:13,840
instance of this attack so we have to

491
00:20:13,840 --> 00:20:16,960
skip this one very specific instruction

492
00:20:16,960 --> 00:20:20,400
but it's very likely that attacks

493
00:20:20,400 --> 00:20:23,120
also work on other positions so using

494
00:20:23,120 --> 00:20:24,240
other

495
00:20:24,240 --> 00:20:26,320
skipping over other instructions or

496
00:20:26,320 --> 00:20:28,799
using a a a

497
00:20:28,799 --> 00:20:31,520
a bit flip somewhere or a data

498
00:20:31,520 --> 00:20:34,559
corruption instead of a skip or whatever

499
00:20:34,559 --> 00:20:38,240
so so this this just means that

500
00:20:38,240 --> 00:20:41,120
it doesn't suffi it won't suffice to to

501
00:20:41,120 --> 00:20:44,720
protect this one uh

502
00:20:44,720 --> 00:20:46,240
uh

503
00:20:46,240 --> 00:20:49,520
specific instruction

504
00:20:49,520 --> 00:20:51,600
so uh

505
00:20:51,600 --> 00:20:54,799
to conclude finally uh we put all our

506
00:20:54,799 --> 00:20:58,320
code online you can have a look at the

507
00:20:58,320 --> 00:20:59,440
the

508
00:20:59,440 --> 00:21:00,960
attacker code

509
00:21:00,960 --> 00:21:03,919
run the simulations yourself

510
00:21:03,919 --> 00:21:06,400
and have a look if you're interested so

511
00:21:06,400 --> 00:21:08,240
this is then the end of my

512
00:21:08,240 --> 00:21:10,559
talk thank you for

513
00:21:10,559 --> 00:21:13,200
your interest

