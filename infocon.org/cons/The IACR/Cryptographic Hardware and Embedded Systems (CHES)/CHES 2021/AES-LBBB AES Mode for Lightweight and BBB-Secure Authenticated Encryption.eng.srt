1
00:00:02,159 --> 00:00:05,359
hi i am going to talk about our paper

2
00:00:05,359 --> 00:00:09,760
aes lbbb aes mod for lightweight and bbb

3
00:00:09,760 --> 00:00:12,880
secure authenticated encryption i am

4
00:00:12,880 --> 00:00:15,440
takeshi sugawara and this is a joint

5
00:00:15,440 --> 00:00:18,640
research work with yusuke naito and

6
00:00:18,640 --> 00:00:21,439
yusasaki

7
00:00:22,560 --> 00:00:24,640
in this paper we propose a new

8
00:00:24,640 --> 00:00:27,279
authenticated encryption mode called

9
00:00:27,279 --> 00:00:28,800
lbbp

10
00:00:28,800 --> 00:00:31,279
for aes accelerators

11
00:00:31,279 --> 00:00:34,079
our motivation is to provide higher

12
00:00:34,079 --> 00:00:37,360
security with lower memory overhead by

13
00:00:37,360 --> 00:00:40,000
using aes accelerators

14
00:00:40,000 --> 00:00:42,399
available and will be available in many

15
00:00:42,399 --> 00:00:44,800
computational platforms

16
00:00:44,800 --> 00:00:48,399
we propose a new model of operation lbbp

17
00:00:48,399 --> 00:00:52,079
and its instantiation aes lbpb

18
00:00:52,079 --> 00:00:54,879
bbb represents beyond the birthday bound

19
00:00:54,879 --> 00:01:00,160
security and aes lbb achieves almost 128

20
00:01:00,160 --> 00:01:03,760
bit security using aes

21
00:01:03,760 --> 00:01:07,040
l represents lightweight in terms of

22
00:01:07,040 --> 00:01:09,840
memory size

23
00:01:10,479 --> 00:01:12,720
the diagram on the bottom shows the

24
00:01:12,720 --> 00:01:15,400
operational unit for processing a

25
00:01:15,400 --> 00:01:19,119
128-bit block in aes lbp

26
00:01:19,119 --> 00:01:20,840
we use a

27
00:01:20,840 --> 00:01:24,799
256 bit internal state flowing from left

28
00:01:24,799 --> 00:01:29,119
to right and the upper half is the aes

29
00:01:29,119 --> 00:01:32,720
128 bit secret key and the bottom half

30
00:01:32,720 --> 00:01:36,960
is the 128 bit aes internal state

31
00:01:36,960 --> 00:01:40,000
to realize a large internal state to

32
00:01:40,000 --> 00:01:42,560
resist internal collision attack

33
00:01:42,560 --> 00:01:46,240
we update the aes key as we process the

34
00:01:46,240 --> 00:01:48,960
message blocks which is the key point

35
00:01:48,960 --> 00:01:53,320
for reducing the memory size

36
00:01:54,240 --> 00:01:56,640
lightweight cryptography has been a hot

37
00:01:56,640 --> 00:01:59,040
topic in cryptography for more than a

38
00:01:59,040 --> 00:02:00,159
decade

39
00:02:00,159 --> 00:02:02,399
the motivation is to design crypto

40
00:02:02,399 --> 00:02:03,680
algorithms

41
00:02:03,680 --> 00:02:06,000
that achieve better performances in

42
00:02:06,000 --> 00:02:07,840
resource constrained

43
00:02:07,840 --> 00:02:09,199
devices

44
00:02:09,199 --> 00:02:10,720
in particular

45
00:02:10,720 --> 00:02:13,040
nist is running a competition for

46
00:02:13,040 --> 00:02:15,599
choosing a new lightweight standard

47
00:02:15,599 --> 00:02:18,560
making this research area very active in

48
00:02:18,560 --> 00:02:20,480
the last few years

49
00:02:20,480 --> 00:02:23,760
most candidates in the competition use

50
00:02:23,760 --> 00:02:26,400
newer lightweight primitives such as

51
00:02:26,400 --> 00:02:30,560
asconp skinny and gift instead of aes

52
00:02:30,560 --> 00:02:33,599
because they are better in various ways

53
00:02:33,599 --> 00:02:36,000
there are only three aes based

54
00:02:36,000 --> 00:02:38,879
candidates in the previous round and

55
00:02:38,879 --> 00:02:41,360
unfortunately none of them survived to

56
00:02:41,360 --> 00:02:43,680
the final round

57
00:02:43,680 --> 00:02:46,160
the new lightweight primitives are the

58
00:02:46,160 --> 00:02:48,840
reasonable choices for rigorous

59
00:02:48,840 --> 00:02:52,800
optimization however aes based schemes

60
00:02:52,800 --> 00:02:55,200
are still valuable especially because

61
00:02:55,200 --> 00:02:57,360
aes accelerators

62
00:02:57,360 --> 00:02:59,760
are getting more and more common in many

63
00:02:59,760 --> 00:03:03,640
computational platforms

64
00:03:04,560 --> 00:03:07,519
aes accelerators are everywhere in these

65
00:03:07,519 --> 00:03:08,560
days

66
00:03:08,560 --> 00:03:13,440
most modern processors including x86 arm

67
00:03:13,440 --> 00:03:17,280
and risc-5 have aes instructions

68
00:03:17,280 --> 00:03:20,400
aes core processors are getting very

69
00:03:20,400 --> 00:03:22,400
popular in general

70
00:03:22,400 --> 00:03:24,480
purpose microcontrollers

71
00:03:24,480 --> 00:03:26,879
especially for the recent

72
00:03:26,879 --> 00:03:29,840
v8 architectures

73
00:03:29,840 --> 00:03:32,560
we can expect that these aes

74
00:03:32,560 --> 00:03:35,040
accelerators will be available in the

75
00:03:35,040 --> 00:03:38,440
future for backward compatibility

76
00:03:38,440 --> 00:03:42,080
interoperability and standardization

77
00:03:42,080 --> 00:03:45,840
people are still using rc4

78
00:03:45,840 --> 00:03:46,680
in

79
00:03:46,680 --> 00:03:48,400
wpa2

80
00:03:48,400 --> 00:03:51,760
wi-fi security which is a good example

81
00:03:51,760 --> 00:03:54,080
showing the resilience of one

82
00:03:54,080 --> 00:03:56,920
standardized algorithm

83
00:03:56,920 --> 00:04:00,879
asgcm is the most common aes based

84
00:04:00,879 --> 00:04:02,000
scheme

85
00:04:02,000 --> 00:04:05,120
and its security is limited by a

86
00:04:05,120 --> 00:04:09,439
birthday band and is 60 bits only

87
00:04:09,439 --> 00:04:12,000
people are moving toward 128 bit

88
00:04:12,000 --> 00:04:16,478
security and designing a better aead for

89
00:04:16,478 --> 00:04:20,719
aes is our motivation

90
00:04:22,479 --> 00:04:25,199
there are conventional aes based modes

91
00:04:25,199 --> 00:04:27,759
for bpp security

92
00:04:27,759 --> 00:04:32,639
particular ale appeared in 2013

93
00:04:32,639 --> 00:04:37,120
is an aes based aead claiming 128-bit

94
00:04:37,120 --> 00:04:38,479
security

95
00:04:38,479 --> 00:04:42,720
it uses the aes run function as a basic

96
00:04:42,720 --> 00:04:45,560
building block and processes

97
00:04:45,560 --> 00:04:49,040
128 bit message blocks for each

98
00:04:49,040 --> 00:04:51,680
forerunned aes operation

99
00:04:51,680 --> 00:04:54,639
achieving very high data rate

100
00:04:54,639 --> 00:04:57,520
we can use aes instructions for

101
00:04:57,520 --> 00:05:01,360
implementing these aes run functions

102
00:05:01,360 --> 00:05:02,560
meanwhile

103
00:05:02,560 --> 00:05:06,320
aes co-processors usually finish use

104
00:05:06,320 --> 00:05:09,680
the entire aes encryption advance

105
00:05:09,680 --> 00:05:12,639
instead of a round function so they are

106
00:05:12,639 --> 00:05:14,720
not for ale

107
00:05:14,720 --> 00:05:17,280
unfortunately there is an attack

108
00:05:17,280 --> 00:05:20,479
and ale does not provide the claim

109
00:05:20,479 --> 00:05:24,199
security level

110
00:05:24,400 --> 00:05:27,840
another candidate is remus n2

111
00:05:27,840 --> 00:05:30,639
a family of romeros which is the neast

112
00:05:30,639 --> 00:05:32,960
lwc finalist

113
00:05:32,960 --> 00:05:36,240
it achieves vvb security

114
00:05:36,240 --> 00:05:38,960
and since it uses a block cipher as a

115
00:05:38,960 --> 00:05:41,199
primitive

116
00:05:41,199 --> 00:05:45,039
we can also use aes core processors

117
00:05:45,039 --> 00:05:47,840
for accelerating riemersen2

118
00:05:47,840 --> 00:05:50,000
the diagram on the bottom shows the

119
00:05:50,000 --> 00:05:53,240
remus n2's basic unit for processing a

120
00:05:53,240 --> 00:05:56,000
128-bit message block

121
00:05:56,000 --> 00:05:59,919
it uses a 384-bit internal state flowing

122
00:05:59,919 --> 00:06:02,080
from left to right

123
00:06:02,080 --> 00:06:05,199
the upper and middle lanes represent the

124
00:06:05,199 --> 00:06:06,479
aes key

125
00:06:06,479 --> 00:06:10,160
and the alias internal state remus n2

126
00:06:10,160 --> 00:06:14,080
uses additional 128 bits for the bottom

127
00:06:14,080 --> 00:06:17,759
lane and reducing this 128 bits is the

128
00:06:17,759 --> 00:06:21,840
key challenge we tackled in this paper

129
00:06:23,440 --> 00:06:26,080
before coming into the main part i want

130
00:06:26,080 --> 00:06:28,560
to emphasize the importance of memory

131
00:06:28,560 --> 00:06:31,520
size in lightweight cryptography

132
00:06:31,520 --> 00:06:35,039
memory a register dominates the entire

133
00:06:35,039 --> 00:06:37,280
circuit area in compact other

134
00:06:37,280 --> 00:06:38,960
implementations

135
00:06:38,960 --> 00:06:41,840
here are quick examples

136
00:06:41,840 --> 00:06:45,600
a 4 bit xbox typically uses 20 to 40

137
00:06:45,600 --> 00:06:46,479
gates

138
00:06:46,479 --> 00:06:51,680
in contrast a 128 bit register needs 6

139
00:06:51,680 --> 00:06:55,360
to 900 gates and reducing this essential

140
00:06:55,360 --> 00:06:57,120
memory

141
00:06:57,120 --> 00:06:59,440
is almost impossible with hardware

142
00:06:59,440 --> 00:07:00,960
design

143
00:07:00,960 --> 00:07:03,520
memory is much cheaper in software but

144
00:07:03,520 --> 00:07:05,120
it's still crucial

145
00:07:05,120 --> 00:07:07,199
the memory size determines the cheap

146
00:07:07,199 --> 00:07:10,160
cost and there is continuous pressure

147
00:07:10,160 --> 00:07:12,880
for low memory software implementation

148
00:07:12,880 --> 00:07:14,720
even today

149
00:07:14,720 --> 00:07:17,599
more recent microcontrollers have

150
00:07:17,599 --> 00:07:21,039
a special memory for security which is

151
00:07:21,039 --> 00:07:22,639
even smaller

152
00:07:22,639 --> 00:07:24,000
for example

153
00:07:24,000 --> 00:07:27,599
some l11 a microcontroller we use for

154
00:07:27,599 --> 00:07:29,280
our benchmarking

155
00:07:29,280 --> 00:07:33,120
has trust ram which is limited to 256

156
00:07:33,120 --> 00:07:35,919
bytes only

157
00:07:36,560 --> 00:07:38,960
ok we are coming back to the motivation

158
00:07:38,960 --> 00:07:40,639
of this work

159
00:07:40,639 --> 00:07:43,360
we designed the scheme with these design

160
00:07:43,360 --> 00:07:44,400
goals

161
00:07:44,400 --> 00:07:45,840
first

162
00:07:45,840 --> 00:07:47,440
we want the beyond about the amount

163
00:07:47,440 --> 00:07:50,639
security achieving almost 128 bit

164
00:07:50,639 --> 00:07:52,960
security using aes

165
00:07:52,960 --> 00:07:54,000
second

166
00:07:54,000 --> 00:07:57,199
we want to achieve 256 bit memory

167
00:07:57,199 --> 00:08:00,720
meaning no extra memory outside yes

168
00:08:00,720 --> 00:08:01,919
third

169
00:08:01,919 --> 00:08:04,160
we don't want to compromise the speed

170
00:08:04,160 --> 00:08:05,599
too much

171
00:08:05,599 --> 00:08:07,759
and want to maintain the right one

172
00:08:07,759 --> 00:08:10,240
performance this means that we want to

173
00:08:10,240 --> 00:08:13,919
process a 128-bit message block for each

174
00:08:13,919 --> 00:08:16,080
aes call

175
00:08:16,080 --> 00:08:17,199
finally

176
00:08:17,199 --> 00:08:20,400
the table on the bottom compares ale

177
00:08:20,400 --> 00:08:24,240
riemas and 2 and hours and we can see

178
00:08:24,240 --> 00:08:27,440
that ours satisfy

179
00:08:27,440 --> 00:08:28,720
all the three

180
00:08:28,720 --> 00:08:31,520
design goals

181
00:08:32,479 --> 00:08:35,360
here is a list of our contributions we

182
00:08:35,360 --> 00:08:38,479
propose the new mode of operation lbb

183
00:08:38,479 --> 00:08:40,039
we specify

184
00:08:40,039 --> 00:08:44,680
aeslbbb an instantiation of lbbb using

185
00:08:44,680 --> 00:08:46,399
as128

186
00:08:46,399 --> 00:08:48,640
we benchmark the software and hardware

187
00:08:48,640 --> 00:08:51,279
performances and compare them with the

188
00:08:51,279 --> 00:08:53,040
state of the earth

189
00:08:53,040 --> 00:08:55,000
we implement a software on a

190
00:08:55,000 --> 00:08:58,640
microcontroller with an aes co-processor

191
00:08:58,640 --> 00:09:02,080
and implement a hardware for asic

192
00:09:02,080 --> 00:09:03,920
we also implement

193
00:09:03,920 --> 00:09:06,800
remas n2 for comparison

194
00:09:06,800 --> 00:09:09,200
the tables on the right shows the

195
00:09:09,200 --> 00:09:11,839
software and hardware performances in

196
00:09:11,839 --> 00:09:12,600
which

197
00:09:12,600 --> 00:09:14,240
aeslbb

198
00:09:14,240 --> 00:09:16,959
shows better performances

199
00:09:16,959 --> 00:09:19,519
finally we discussed these design

200
00:09:19,519 --> 00:09:21,040
extensions

201
00:09:21,040 --> 00:09:24,319
for further performance

202
00:09:24,959 --> 00:09:27,120
these figures compare

203
00:09:27,120 --> 00:09:30,320
the basic processing units of lbp and

204
00:09:30,320 --> 00:09:31,920
remus n2

205
00:09:31,920 --> 00:09:35,360
in these diagrams a box with a black bar

206
00:09:35,360 --> 00:09:39,200
represents a block cipher or bc

207
00:09:39,200 --> 00:09:41,519
and the input tool the bar

208
00:09:41,519 --> 00:09:43,839
represents the secret key

209
00:09:43,839 --> 00:09:45,839
for the block cipher

210
00:09:45,839 --> 00:09:46,600
a

211
00:09:46,600 --> 00:09:49,760
256-bit internal state is necessary for

212
00:09:49,760 --> 00:09:51,839
the resistance against internal

213
00:09:51,839 --> 00:09:54,080
collision

214
00:09:54,080 --> 00:09:57,519
needed to achieve 128 bit security

215
00:09:57,519 --> 00:10:01,200
a block cipher's internal state is 128

216
00:10:01,200 --> 00:10:04,959
bits in case of aes which is not enough

217
00:10:04,959 --> 00:10:07,839
and that is why limasen 2 uses

218
00:10:07,839 --> 00:10:10,800
the additional 128 bit state

219
00:10:10,800 --> 00:10:13,040
a challenge is to further reduce the

220
00:10:13,040 --> 00:10:16,160
stage size and we achieve this by using

221
00:10:16,160 --> 00:10:19,120
the block ciphers key in addition to the

222
00:10:19,120 --> 00:10:20,880
internal state

223
00:10:20,880 --> 00:10:24,880
to achieve the randomness in this 256

224
00:10:24,880 --> 00:10:26,959
bit internal state

225
00:10:26,959 --> 00:10:29,760
we feed the block cipher's output to the

226
00:10:29,760 --> 00:10:30,959
key

227
00:10:30,959 --> 00:10:33,920
we mix them through the pi and lambda

228
00:10:33,920 --> 00:10:36,320
functions which are the linear functions

229
00:10:36,320 --> 00:10:39,120
with several requirements

230
00:10:39,120 --> 00:10:42,399
in the instantiation with aes

231
00:10:42,399 --> 00:10:45,360
we set both pi and lambda as the

232
00:10:45,360 --> 00:10:48,320
constant field multiplication so we can

233
00:10:48,320 --> 00:10:52,480
implement them very efficiently

234
00:10:53,120 --> 00:10:55,640
this figure shows how we construct

235
00:10:55,640 --> 00:10:58,959
lbbp's hashing and encryption

236
00:10:58,959 --> 00:11:01,760
it's basically a simple iteration of the

237
00:11:01,760 --> 00:11:04,320
basic operation unit

238
00:11:04,320 --> 00:11:06,880
but there are some important points

239
00:11:06,880 --> 00:11:11,200
first we can fit 256 bit associated data

240
00:11:11,200 --> 00:11:12,720
block at once

241
00:11:12,720 --> 00:11:15,120
so this schemes rate becomes 2 in

242
00:11:15,120 --> 00:11:17,200
hashing

243
00:11:17,200 --> 00:11:19,920
we use yet another function eta for

244
00:11:19,920 --> 00:11:22,240
domain separation

245
00:11:22,240 --> 00:11:23,839
and the eta

246
00:11:23,839 --> 00:11:26,160
is a simple lfsr

247
00:11:26,160 --> 00:11:28,880
in the final instantiation

248
00:11:28,880 --> 00:11:31,519
after viewing all the message blocks the

249
00:11:31,519 --> 00:11:34,560
final key state in the block cipher

250
00:11:34,560 --> 00:11:38,079
is used as a tag

251
00:11:38,480 --> 00:11:41,279
we proved the security in the ideal

252
00:11:41,279 --> 00:11:44,640
cipher model that is a block cipher is

253
00:11:44,640 --> 00:11:47,440
ideal under the non-respecting setting

254
00:11:47,440 --> 00:11:50,079
in which there is no repeated nonce

255
00:11:50,079 --> 00:11:51,920
between messages

256
00:11:51,920 --> 00:11:55,959
we use the nae security which claims the

257
00:11:55,959 --> 00:11:58,399
indistinguishability from the ideal

258
00:11:58,399 --> 00:12:02,000
system consists of a random bit oracle

259
00:12:02,000 --> 00:12:04,000
and a rejection oracle

260
00:12:04,000 --> 00:12:06,399
the random bit oracle returns random

261
00:12:06,399 --> 00:12:07,920
cipher texts

262
00:12:07,920 --> 00:12:10,399
and the rejection raccool always returns

263
00:12:10,399 --> 00:12:13,839
rejection in tag verification

264
00:12:13,839 --> 00:12:15,279
as far

265
00:12:15,279 --> 00:12:18,880
as we interact with the ideal system we

266
00:12:18,880 --> 00:12:21,120
obviously learn nothing about the plain

267
00:12:21,120 --> 00:12:24,880
text and forging a tag never succeeds

268
00:12:24,880 --> 00:12:28,320
and we are going to prove that lbb is as

269
00:12:28,320 --> 00:12:31,680
good as the ideal one

270
00:12:31,680 --> 00:12:37,120
for the nae security of lbb we can prove

271
00:12:37,120 --> 00:12:38,560
that

272
00:12:38,560 --> 00:12:42,240
lbb achieves n minus log 2 and bit

273
00:12:42,240 --> 00:12:45,040
security

274
00:12:45,200 --> 00:12:48,320
they are indistinguishable up to

275
00:12:48,320 --> 00:12:51,519
2 to the power of n data blocks in all

276
00:12:51,519 --> 00:12:52,959
queries

277
00:12:52,959 --> 00:12:56,240
due to the power of n over n data blocks

278
00:12:56,240 --> 00:12:58,399
in decryption queries

279
00:12:58,399 --> 00:12:59,279
or

280
00:12:59,279 --> 00:13:01,839
due to the power of n over n local

281
00:13:01,839 --> 00:13:05,519
complexity as a result the final

282
00:13:05,519 --> 00:13:07,720
security becomes

283
00:13:07,720 --> 00:13:12,480
121 bits with aes

284
00:13:13,120 --> 00:13:15,279
in the next few slides we are going to

285
00:13:15,279 --> 00:13:17,600
explain the security proof

286
00:13:17,600 --> 00:13:19,279
this is a proof sketch for the

287
00:13:19,279 --> 00:13:20,560
encryption

288
00:13:20,560 --> 00:13:22,240
in this proof

289
00:13:22,240 --> 00:13:24,800
the goal is to show the indistinct

290
00:13:24,800 --> 00:13:28,560
security between the lbb encryption and

291
00:13:28,560 --> 00:13:30,480
the random bit oracle

292
00:13:30,480 --> 00:13:32,720
for the purpose we should analyze how

293
00:13:32,720 --> 00:13:34,959
the scheme maintains the randomized

294
00:13:34,959 --> 00:13:36,800
state

295
00:13:36,800 --> 00:13:39,440
the first two block cipher codes

296
00:13:39,440 --> 00:13:42,959
randomize the entire state and we get a

297
00:13:42,959 --> 00:13:45,519
2n bit completely randomized internal

298
00:13:45,519 --> 00:13:46,959
state

299
00:13:46,959 --> 00:13:49,440
since we consider the non-respecting

300
00:13:49,440 --> 00:13:52,079
scenario the randomness

301
00:13:52,079 --> 00:13:55,519
are propagated to the last block

302
00:13:55,519 --> 00:13:57,839
and the internal state values are all

303
00:13:57,839 --> 00:14:00,240
independent and random as long as no

304
00:14:00,240 --> 00:14:03,360
state collision occurs

305
00:14:03,360 --> 00:14:06,240
the collision complexity determines the

306
00:14:06,240 --> 00:14:09,600
security and by the birthday analysis

307
00:14:09,600 --> 00:14:13,279
the collision complexity is order 2 to

308
00:14:13,279 --> 00:14:16,079
the power of n ciphertext blocks in the

309
00:14:16,079 --> 00:14:17,440
encryption

310
00:14:17,440 --> 00:14:22,000
so lbb achieves n-bit security regarding

311
00:14:22,000 --> 00:14:24,720
encryption

312
00:14:26,320 --> 00:14:28,959
we are going to explain the next one the

313
00:14:28,959 --> 00:14:31,360
proof sketch for decryption

314
00:14:31,360 --> 00:14:34,000
a forgery attack is a matter

315
00:14:34,000 --> 00:14:36,959
and we analyze two attack cases

316
00:14:36,959 --> 00:14:40,079
the first case is to guessing a tag in

317
00:14:40,079 --> 00:14:41,519
decryption

318
00:14:41,519 --> 00:14:44,240
the key point is that we can get a fresh

319
00:14:44,240 --> 00:14:45,279
tag

320
00:14:45,279 --> 00:14:47,760
for each new input block

321
00:14:47,760 --> 00:14:50,000
to the last block cipher

322
00:14:50,000 --> 00:14:53,760
in this case the tag is almost random

323
00:14:53,760 --> 00:14:56,240
so the success probability

324
00:14:56,240 --> 00:14:57,360
is

325
00:14:57,360 --> 00:14:59,680
2 to the power of minus n

326
00:14:59,680 --> 00:15:02,000
for each decryption query

327
00:15:02,000 --> 00:15:03,600
as a result

328
00:15:03,600 --> 00:15:06,639
the forgery attack

329
00:15:06,639 --> 00:15:08,880
with this case requires

330
00:15:08,880 --> 00:15:10,959
due to the power of end decryption

331
00:15:10,959 --> 00:15:12,720
queries

332
00:15:12,720 --> 00:15:16,800
satisfying and bid security

333
00:15:18,399 --> 00:15:20,959
the next forgery attack is revealing

334
00:15:20,959 --> 00:15:23,199
some internal state

335
00:15:23,199 --> 00:15:24,639
in decryption

336
00:15:24,639 --> 00:15:29,040
lbbb uses a 2n bit internal state and

337
00:15:29,040 --> 00:15:30,399
half of it

338
00:15:30,399 --> 00:15:33,040
the one shown in red in this figure is

339
00:15:33,040 --> 00:15:35,759
public because they are exposed through

340
00:15:35,759 --> 00:15:37,680
ciphertext

341
00:15:37,680 --> 00:15:39,680
if the adversary can obtain the

342
00:15:39,680 --> 00:15:41,680
remaining end bits

343
00:15:41,680 --> 00:15:44,160
there is no secret anymore and forging a

344
00:15:44,160 --> 00:15:46,000
tag is trivial

345
00:15:46,000 --> 00:15:49,600
so the key point is the complexity

346
00:15:49,600 --> 00:15:52,560
of recovering the remaining n-bit secret

347
00:15:52,560 --> 00:15:55,120
showing blue in this figure

348
00:15:55,120 --> 00:15:58,320
using the multi-collision technique

349
00:15:58,320 --> 00:16:01,120
on the public part we can ensure that

350
00:16:01,120 --> 00:16:03,920
revealing one of the secret values

351
00:16:03,920 --> 00:16:07,440
requires 2 to the power of n over n data

352
00:16:07,440 --> 00:16:08,480
vlogs

353
00:16:08,480 --> 00:16:11,759
in decryption queries or 2 to the power

354
00:16:11,759 --> 00:16:15,440
of n over n local complexity

355
00:16:15,440 --> 00:16:19,279
so lbpb achieves n minus log n bit

356
00:16:19,279 --> 00:16:23,759
security regarding decryption

357
00:16:23,759 --> 00:16:28,240
aes lbb is an instance of lbbp using

358
00:16:28,240 --> 00:16:30,000
aes128

359
00:16:30,000 --> 00:16:32,480
for the linear functions we use a

360
00:16:32,480 --> 00:16:34,720
constant multiplication

361
00:16:34,720 --> 00:16:38,240
by 2 to the power of 8 for both pi and

362
00:16:38,240 --> 00:16:39,680
lambda

363
00:16:39,680 --> 00:16:42,720
constant multiplication is widely used

364
00:16:42,720 --> 00:16:44,959
as a lightweight linear functions in

365
00:16:44,959 --> 00:16:47,279
lightweight cryptography

366
00:16:47,279 --> 00:16:50,240
we use 2 to the power of 8 because we

367
00:16:50,240 --> 00:16:53,519
preferred a bytewise operation

368
00:16:53,519 --> 00:16:55,040
another good thing

369
00:16:55,040 --> 00:16:58,399
is that we can combine pi and lambda

370
00:16:58,399 --> 00:17:01,199
using the distributive property

371
00:17:01,199 --> 00:17:05,839
to further reduce the computational cost

372
00:17:06,319 --> 00:17:08,480
we are moving on to performance

373
00:17:08,480 --> 00:17:10,079
evaluation

374
00:17:10,079 --> 00:17:12,839
we use microchip some l11

375
00:17:12,839 --> 00:17:17,438
microcontroller as a target platform

376
00:17:17,520 --> 00:17:21,359
it's an arm cortex m23 mcu

377
00:17:21,359 --> 00:17:25,480
and has an aes core processor works at

378
00:17:25,480 --> 00:17:28,640
57.2 cycles per byte

379
00:17:28,640 --> 00:17:32,400
we implement the entire aead operations

380
00:17:32,400 --> 00:17:35,840
with the super corp api

381
00:17:35,840 --> 00:17:39,280
we use memory aware implementation

382
00:17:39,280 --> 00:17:42,000
the depth of the nested functions is a

383
00:17:42,000 --> 00:17:45,039
tricky part because deep nest increases

384
00:17:45,039 --> 00:17:47,120
stack memory

385
00:17:47,120 --> 00:17:50,160
for a fair comparison we limit the depth

386
00:17:50,160 --> 00:17:51,679
to one level

387
00:17:51,679 --> 00:17:54,559
from the top level functions

388
00:17:54,559 --> 00:17:57,360
we put sensitive values only

389
00:17:57,360 --> 00:17:58,240
in

390
00:17:58,240 --> 00:18:01,840
independently acquired global memory

391
00:18:01,840 --> 00:18:05,520
assuming a special memory

392
00:18:05,520 --> 00:18:08,960
and never put them in the stack

393
00:18:08,960 --> 00:18:10,960
we implement the current state of the

394
00:18:10,960 --> 00:18:12,080
art

395
00:18:12,080 --> 00:18:14,640
remorse n2 using the same design

396
00:18:14,640 --> 00:18:19,760
policies and compared it with aeslbbb

397
00:18:19,760 --> 00:18:24,320
this table compares aes lbb and remus n2

398
00:18:24,320 --> 00:18:30,240
in run stack rom and speed aes lbvb uses

399
00:18:30,240 --> 00:18:34,720
16 byte or 128 bit less memory because

400
00:18:34,720 --> 00:18:35,600
of

401
00:18:35,600 --> 00:18:38,480
its smaller state

402
00:18:38,480 --> 00:18:41,360
although it's really smaller

403
00:18:41,360 --> 00:18:44,799
than the 88 byte stack the secure memory

404
00:18:44,799 --> 00:18:47,520
needed for storing sensitive values can

405
00:18:47,520 --> 00:18:51,200
be more crucial as i mentioned earlier

406
00:18:51,200 --> 00:18:52,720
aslbb

407
00:18:52,720 --> 00:18:56,400
also outperforms remus n2 in rom and

408
00:18:56,400 --> 00:18:57,679
speed

409
00:18:57,679 --> 00:19:00,559
since aes is very efficient in this

410
00:19:00,559 --> 00:19:01,919
platform

411
00:19:01,919 --> 00:19:05,440
non-aes operations such as the linear

412
00:19:05,440 --> 00:19:06,880
functions

413
00:19:06,880 --> 00:19:10,080
or elementary operations such as moving

414
00:19:10,080 --> 00:19:12,240
and xor exploring

415
00:19:12,240 --> 00:19:15,240
bolonek the performances

416
00:19:15,240 --> 00:19:19,600
aeslbb uses simpler and less non-as

417
00:19:19,600 --> 00:19:22,960
operations which contribute these better

418
00:19:22,960 --> 00:19:25,200
performances

419
00:19:25,200 --> 00:19:26,960
we are moving on to hardware

420
00:19:26,960 --> 00:19:29,919
implementation this diagram shows the

421
00:19:29,919 --> 00:19:33,919
circuit architecture for aes lbp

422
00:19:33,919 --> 00:19:37,039
aes obviously dominates the entire

423
00:19:37,039 --> 00:19:38,559
hardware cost

424
00:19:38,559 --> 00:19:41,120
and for compact circuit area we use

425
00:19:41,120 --> 00:19:44,160
popular bike serial architecture

426
00:19:44,160 --> 00:19:46,720
something special about it is column

427
00:19:46,720 --> 00:19:49,120
oriented serialization

428
00:19:49,120 --> 00:19:53,120
and integrated inverse key schedule

429
00:19:53,120 --> 00:19:56,400
we should care about byte ordering with

430
00:19:56,400 --> 00:19:59,280
a mod of operation and we choose the

431
00:19:59,280 --> 00:20:01,679
column oriented serialization which

432
00:20:01,679 --> 00:20:05,679
respects the aes native ordering

433
00:20:05,679 --> 00:20:08,720
on the fly key scheduling is very

434
00:20:08,720 --> 00:20:10,480
popular among compact hardware

435
00:20:10,480 --> 00:20:12,000
implementation

436
00:20:12,000 --> 00:20:14,720
it updates the key in place

437
00:20:14,720 --> 00:20:17,280
which is the problem for various modes

438
00:20:17,280 --> 00:20:20,880
that requires the original aes key in

439
00:20:20,880 --> 00:20:23,360
the following operations

440
00:20:23,360 --> 00:20:26,720
so we should recover the original one

441
00:20:26,720 --> 00:20:29,360
from the last run key

442
00:20:29,360 --> 00:20:31,840
we efficiently achieve this by adding

443
00:20:31,840 --> 00:20:34,960
small amount of circuit components in

444
00:20:34,960 --> 00:20:38,640
the key array as shown in blue

445
00:20:38,640 --> 00:20:41,280
we also integrated the constant

446
00:20:41,280 --> 00:20:44,640
multiplication by 2 to the power of 8

447
00:20:44,640 --> 00:20:49,840
needed for lbbb in the key array

448
00:20:50,000 --> 00:20:53,440
we also implemented remus n2 using the

449
00:20:53,440 --> 00:20:57,440
same aes circuit for fair comparison

450
00:20:57,440 --> 00:20:59,280
we evaluated the

451
00:20:59,280 --> 00:21:02,640
circuit areas using non-gate 45

452
00:21:02,640 --> 00:21:05,760
nanometer standard cell library

453
00:21:05,760 --> 00:21:09,720
this table compares the circuit area of

454
00:21:09,720 --> 00:21:15,280
aeslbb remote n2 and the baseline layers

455
00:21:15,280 --> 00:21:18,720
asl bbb is smaller

456
00:21:18,720 --> 00:21:22,400
by more than 1000 gates which is a great

457
00:21:22,400 --> 00:21:23,679
improvement

458
00:21:23,679 --> 00:21:24,480
and

459
00:21:24,480 --> 00:21:28,080
this mastery comes from the reduction

460
00:21:28,080 --> 00:21:28,960
of

461
00:21:28,960 --> 00:21:33,600
128 bit extra state which uses more than

462
00:21:33,600 --> 00:21:38,360
1000 gates in dmsn2

463
00:21:38,799 --> 00:21:41,200
finally we discussed the extension of

464
00:21:41,200 --> 00:21:45,520
lbbb regarding inverse key schedule

465
00:21:45,520 --> 00:21:47,360
as i mentioned in the hardware

466
00:21:47,360 --> 00:21:49,760
implementation we should recover the

467
00:21:49,760 --> 00:21:53,360
original aes key after the on on the fly

468
00:21:53,360 --> 00:21:55,200
key schedule

469
00:21:55,200 --> 00:21:58,480
we update the key stake k in place using

470
00:21:58,480 --> 00:22:02,000
a key schedule function ksf within the

471
00:22:02,000 --> 00:22:04,320
block cipher call

472
00:22:04,320 --> 00:22:06,799
before proceeding to the next step we

473
00:22:06,799 --> 00:22:11,240
should apply ksf inverse to get k out of

474
00:22:11,240 --> 00:22:12,960
ksfk

475
00:22:12,960 --> 00:22:14,720
then we can move on

476
00:22:14,720 --> 00:22:16,960
to the next processing

477
00:22:16,960 --> 00:22:19,280
with the pi function

478
00:22:19,280 --> 00:22:22,320
this is necessary for aes but we can

479
00:22:22,320 --> 00:22:26,720
improve it for non-aes primitives

480
00:22:26,720 --> 00:22:30,159
the idea is to integrate ksf into the pi

481
00:22:30,159 --> 00:22:32,159
function instead of constant

482
00:22:32,159 --> 00:22:33,679
multiplication

483
00:22:33,679 --> 00:22:35,840
in aes lbb

484
00:22:35,840 --> 00:22:39,039
by doing this we can completely skip ksf

485
00:22:39,039 --> 00:22:42,559
inverse however the pi function should

486
00:22:42,559 --> 00:22:45,360
satisfy certain requirements

487
00:22:45,360 --> 00:22:49,120
and aes key schedule doesn't satisfy

488
00:22:49,120 --> 00:22:51,840
them unfortunately

489
00:22:51,840 --> 00:22:54,880
ksf of sun block ciphers satisfy the

490
00:22:54,880 --> 00:22:57,520
requirements and current

491
00:22:57,520 --> 00:23:01,520
is one example so current lbb

492
00:23:01,520 --> 00:23:04,320
can be very small although the resulting

493
00:23:04,320 --> 00:23:05,600
scheme

494
00:23:05,600 --> 00:23:09,039
will have 64-bit security because of the

495
00:23:09,039 --> 00:23:11,280
current's block size

496
00:23:11,280 --> 00:23:14,720
another approach is redesigning ksf

497
00:23:14,720 --> 00:23:17,760
more recent block cipher designs use

498
00:23:17,760 --> 00:23:20,960
simpler key schedule with which

499
00:23:20,960 --> 00:23:24,400
ksf inverse is very efficient

500
00:23:24,400 --> 00:23:28,559
that is in contrast with aes ksf that

501
00:23:28,559 --> 00:23:32,559
incorporates s-box operations

502
00:23:32,559 --> 00:23:35,840
gift one to eight is the case and gift

503
00:23:35,840 --> 00:23:40,159
one to eight lbbb achieves almost 128

504
00:23:40,159 --> 00:23:41,919
bit security

505
00:23:41,919 --> 00:23:44,640
another candidate which is something in

506
00:23:44,640 --> 00:23:46,080
between

507
00:23:46,080 --> 00:23:46,960
is

508
00:23:46,960 --> 00:23:50,559
using a modified area is having a better

509
00:23:50,559 --> 00:23:51,919
curiosity

510
00:23:51,919 --> 00:23:55,200
such as the one by core at all

511
00:23:55,200 --> 00:23:58,400
we can still accelerate such a scheme

512
00:23:58,400 --> 00:24:01,760
using fine-grained accelerators such as

513
00:24:01,760 --> 00:24:05,559
aes and i

514
00:24:05,840 --> 00:24:07,919
i'm concluding my talk

515
00:24:07,919 --> 00:24:10,880
lbb provides beyond about the band

516
00:24:10,880 --> 00:24:12,159
security

517
00:24:12,159 --> 00:24:14,640
at smallest memory cost for block

518
00:24:14,640 --> 00:24:16,400
ciphers

519
00:24:16,400 --> 00:24:18,880
aes lbp

520
00:24:18,880 --> 00:24:21,840
enjoys the power of aes accelerators and

521
00:24:21,840 --> 00:24:24,080
it outperformed the conventional

522
00:24:24,080 --> 00:24:26,559
state-of-the-art remorse n2

523
00:24:26,559 --> 00:24:30,080
in both software and hardware benchmarks

524
00:24:30,080 --> 00:24:32,640
we finally discussed the design

525
00:24:32,640 --> 00:24:35,440
extensions

526
00:24:36,080 --> 00:24:40,120
thank you very much for watching

