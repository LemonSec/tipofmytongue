1
00:00:00,960 --> 00:00:03,439
hi my name is dalton in the next 20

2
00:00:03,439 --> 00:00:05,920
minutes i will talk about our paper

3
00:00:05,920 --> 00:00:08,400
lifeline for fpga protection in which we

4
00:00:08,400 --> 00:00:11,440
present a flexible ip protection scheme

5
00:00:11,440 --> 00:00:14,000
based on obfuscation and this work was

6
00:00:14,000 --> 00:00:15,679
jointly done by the way university

7
00:00:15,679 --> 00:00:18,240
bochum the max planck institute for

8
00:00:18,240 --> 00:00:20,960
cyber security and privacy and the umass

9
00:00:20,960 --> 00:00:23,199
amherst

10
00:00:23,199 --> 00:00:24,960
now let's first of all talk about the

11
00:00:24,960 --> 00:00:27,279
motivation for our paper and for this we

12
00:00:27,279 --> 00:00:29,599
need to look at the current situation

13
00:00:29,599 --> 00:00:31,599
and we see that fpgas are used in many

14
00:00:31,599 --> 00:00:33,920
products such as industrial automation

15
00:00:33,920 --> 00:00:35,920
or machine learning of course when a

16
00:00:35,920 --> 00:00:38,800
company creates a new fpga based product

17
00:00:38,800 --> 00:00:40,800
they usually do not create the whole

18
00:00:40,800 --> 00:00:43,120
design on their own but they can license

19
00:00:43,120 --> 00:00:45,760
pre-made third-party ip cores which of

20
00:00:45,760 --> 00:00:47,520
course reduce the development costs and

21
00:00:47,520 --> 00:00:49,760
minimize the time to market

22
00:00:49,760 --> 00:00:52,160
we also observe that various security

23
00:00:52,160 --> 00:00:55,680
relevant domains use fpgas for example

24
00:00:55,680 --> 00:00:57,680
aviation medical appliances or the

25
00:00:57,680 --> 00:01:00,640
military and all of these designs

26
00:01:00,640 --> 00:01:02,480
need some kind of protection because you

27
00:01:02,480 --> 00:01:04,879
don't want the attacker to manipulate

28
00:01:04,879 --> 00:01:07,360
the design or to copy your design

29
00:01:07,360 --> 00:01:09,760
without paying for a license

30
00:01:09,760 --> 00:01:12,159
now some people suggest that asics are

31
00:01:12,159 --> 00:01:14,320
an easy solution to this problem because

32
00:01:14,320 --> 00:01:16,400
they are harder to reverse engineer

33
00:01:16,400 --> 00:01:18,960
but fpgas are usually preferred because

34
00:01:18,960 --> 00:01:20,960
they can be adapted to new requirements

35
00:01:20,960 --> 00:01:23,439
on fly because they can be reprogrammed

36
00:01:23,439 --> 00:01:24,840
after

37
00:01:24,840 --> 00:01:28,000
manufacturing so now let's go one step

38
00:01:28,000 --> 00:01:30,240
further and look how the fpga security

39
00:01:30,240 --> 00:01:32,000
has been impacted in a negative way in

40
00:01:32,000 --> 00:01:33,920
the last few years

41
00:01:33,920 --> 00:01:36,240
so it has been shown various times that

42
00:01:36,240 --> 00:01:38,479
the bitstream encryption engine on fpgas

43
00:01:38,479 --> 00:01:40,720
can be vulnerable for example via side

44
00:01:40,720 --> 00:01:42,880
channels for implementation text most

45
00:01:42,880 --> 00:01:44,640
recently andet al showed it in their

46
00:01:44,640 --> 00:01:47,600
paper the unpatchable silicon

47
00:01:47,600 --> 00:01:49,439
furthermore projects

48
00:01:49,439 --> 00:01:51,280
such as symbiflow

49
00:01:51,280 --> 00:01:53,040
and x-ray

50
00:01:53,040 --> 00:01:55,360
aim to reverse engineer the exciting

51
00:01:55,360 --> 00:01:57,280
speed stream format which of course

52
00:01:57,280 --> 00:01:59,280
opens the door for manipulation and

53
00:01:59,280 --> 00:02:01,920
reversing and lastly advances in gate

54
00:02:01,920 --> 00:02:03,920
level that with reversing makes it then

55
00:02:03,920 --> 00:02:06,240
possible for an attacker who dumped the

56
00:02:06,240 --> 00:02:09,598
bit stream to understand the design and

57
00:02:09,598 --> 00:02:11,520
see what's going on

58
00:02:11,520 --> 00:02:14,080
such illegitimate use of course puts the

59
00:02:14,080 --> 00:02:16,720
ip vendor and the user at stake

60
00:02:16,720 --> 00:02:18,879
because as i just explained the effort

61
00:02:18,879 --> 00:02:20,840
for for example counterfeiting is

62
00:02:20,840 --> 00:02:24,000
lowered also the attacker might

63
00:02:24,000 --> 00:02:27,040
try to manipulate the design

64
00:02:27,040 --> 00:02:29,360
and insert false this can of course lead

65
00:02:29,360 --> 00:02:30,480
to the

66
00:02:30,480 --> 00:02:33,120
lead to secret keys being leaked and so

67
00:02:33,120 --> 00:02:34,840
on and so

68
00:02:34,840 --> 00:02:37,440
forth now to understand why

69
00:02:37,440 --> 00:02:39,680
state-of-the-art solutions might be not

70
00:02:39,680 --> 00:02:40,879
sufficient

71
00:02:40,879 --> 00:02:43,120
we need to look at what a real world

72
00:02:43,120 --> 00:02:45,680
attacker can actually do

73
00:02:45,680 --> 00:02:47,760
so what he can first of all do is

74
00:02:47,760 --> 00:02:49,840
perform a static analysis so he dumps

75
00:02:49,840 --> 00:02:51,599
the bit stream and then puts it into

76
00:02:51,599 --> 00:02:53,040
some kind of tool and looks at the

77
00:02:53,040 --> 00:02:55,519
netlist but from such aesthetic design

78
00:02:55,519 --> 00:02:57,840
he might not be able to

79
00:02:57,840 --> 00:03:00,800
infer all the information he needs

80
00:03:00,800 --> 00:03:02,879
so in the next step he can do some

81
00:03:02,879 --> 00:03:04,400
dynamic analysis for example by

82
00:03:04,400 --> 00:03:07,519
simulation or by on-chip debugging

83
00:03:07,519 --> 00:03:09,440
in the case of on-chip debugging he can

84
00:03:09,440 --> 00:03:11,840
hook a logic analyzer to certain wires

85
00:03:11,840 --> 00:03:14,319
and unders and try to understand

86
00:03:14,319 --> 00:03:16,800
and see how the modules interact with

87
00:03:16,800 --> 00:03:19,599
each other and what values they exchange

88
00:03:19,599 --> 00:03:21,680
lastly he can try to perform some kind

89
00:03:21,680 --> 00:03:24,239
of design manipulation so for example he

90
00:03:24,239 --> 00:03:26,640
can cut a wire and he can see how the

91
00:03:26,640 --> 00:03:29,360
fpga for example reacts to such a

92
00:03:29,360 --> 00:03:30,799
manipulation

93
00:03:30,799 --> 00:03:34,319
so an ideal solution should provide some

94
00:03:34,319 --> 00:03:37,280
protection against all of this

95
00:03:37,280 --> 00:03:39,120
techniques which the attacker can

96
00:03:39,120 --> 00:03:41,200
perform to show the ineffectiveness of

97
00:03:41,200 --> 00:03:43,120
state-of-the-art solutions we performed

98
00:03:43,120 --> 00:03:45,200
a case study on an industrial solution

99
00:03:45,200 --> 00:03:47,680
by a large security vendor and i will

100
00:03:47,680 --> 00:03:49,599
now quickly tell you how this solution

101
00:03:49,599 --> 00:03:51,360
works and why it doesn't provide

102
00:03:51,360 --> 00:03:53,760
sufficient security under our attacker

103
00:03:53,760 --> 00:03:56,000
model so first of all here you see our

104
00:03:56,000 --> 00:03:57,680
fpga

105
00:03:57,680 --> 00:03:59,760
and there is an ip core present

106
00:03:59,760 --> 00:04:02,720
and it's connected to an authenticator

107
00:04:02,720 --> 00:04:05,840
the authenticator has some secret values

108
00:04:05,840 --> 00:04:08,000
spread around in a net list and it uses

109
00:04:08,000 --> 00:04:10,000
it to calculate a hash

110
00:04:10,000 --> 00:04:12,000
additionally we have a separate chip on

111
00:04:12,000 --> 00:04:14,640
the pcb which also provides a hash

112
00:04:14,640 --> 00:04:17,199
both of them are fed into a comparator

113
00:04:17,199 --> 00:04:19,440
and only if they match the enable line

114
00:04:19,440 --> 00:04:21,839
will be pulled high and then the ip core

115
00:04:21,839 --> 00:04:23,520
starts working

116
00:04:23,520 --> 00:04:25,360
now the problem is that both the

117
00:04:25,360 --> 00:04:27,520
authenticator and the ipcor are already

118
00:04:27,520 --> 00:04:30,800
present after the initial configuration

119
00:04:30,800 --> 00:04:32,400
therefore by dumping the bitstream we

120
00:04:32,400 --> 00:04:33,680
can analyze

121
00:04:33,680 --> 00:04:35,360
and find the connection between the

122
00:04:35,360 --> 00:04:38,160
authenticator and the ip core by setting

123
00:04:38,160 --> 00:04:40,479
the appropriate bits in the bitstream we

124
00:04:40,479 --> 00:04:42,639
can cut the wire connection between the

125
00:04:42,639 --> 00:04:45,840
authenticator and the ip core and by

126
00:04:45,840 --> 00:04:48,400
doing this the enable input is always

127
00:04:48,400 --> 00:04:50,639
automatically pulled high and the ipco

128
00:04:50,639 --> 00:04:52,320
starts working even though the

129
00:04:52,320 --> 00:04:54,720
authentication process may fail

130
00:04:54,720 --> 00:04:57,040
furthermore the secret values which the

131
00:04:57,040 --> 00:05:00,639
authenticator uses to calculate its hash

132
00:05:00,639 --> 00:05:02,320
are just spread around within that list

133
00:05:02,320 --> 00:05:04,080
and we can find them using at least

134
00:05:04,080 --> 00:05:07,120
reversing we can then modify them and

135
00:05:07,120 --> 00:05:09,120
take advantage of this

136
00:05:09,120 --> 00:05:11,440
to for example

137
00:05:11,440 --> 00:05:13,199
change the hash

138
00:05:13,199 --> 00:05:14,560
furthermore we looked at academic

139
00:05:14,560 --> 00:05:16,240
solutions and found that many of them do

140
00:05:16,240 --> 00:05:18,000
not suffice under our real world

141
00:05:18,000 --> 00:05:19,280
attacker model

142
00:05:19,280 --> 00:05:21,280
first of all many use fixed decryption

143
00:05:21,280 --> 00:05:23,919
keys and as i have just shown you we can

144
00:05:23,919 --> 00:05:26,639
extract them using static analysis

145
00:05:26,639 --> 00:05:28,639
other solutions use weak paths as a

146
00:05:28,639 --> 00:05:30,720
unique device identifier however the

147
00:05:30,720 --> 00:05:32,479
interaction between the path and the

148
00:05:32,479 --> 00:05:34,800
authentication module is not protected

149
00:05:34,800 --> 00:05:37,120
therefore we can manipulate the wires

150
00:05:37,120 --> 00:05:39,280
and perform eavesdropping to find out

151
00:05:39,280 --> 00:05:41,120
what values are exchanged and use this

152
00:05:41,120 --> 00:05:42,720
to our advantage

153
00:05:42,720 --> 00:05:44,720
lastly many use commonly used

154
00:05:44,720 --> 00:05:47,280
obfuscation schemes such as finite state

155
00:05:47,280 --> 00:05:49,520
machine obfuscation however it has been

156
00:05:49,520 --> 00:05:51,199
shown that

157
00:05:51,199 --> 00:05:53,919
these kind of obfuscation schemes can

158
00:05:53,919 --> 00:05:56,800
easily be circumvented

159
00:05:56,800 --> 00:05:59,680
so with these things in mind let's look

160
00:05:59,680 --> 00:06:02,319
what we need to consider when creating

161
00:06:02,319 --> 00:06:05,360
an effective ip protection scheme

162
00:06:05,360 --> 00:06:07,440
and first of all we need to consider

163
00:06:07,440 --> 00:06:09,759
several facts

164
00:06:09,759 --> 00:06:11,680
in particular we cannot rely on the

165
00:06:11,680 --> 00:06:13,600
secrecy of the bitstream format because

166
00:06:13,600 --> 00:06:15,120
as i said there have been several

167
00:06:15,120 --> 00:06:16,319
projects

168
00:06:16,319 --> 00:06:18,479
which for example

169
00:06:18,479 --> 00:06:20,880
successfully reverse engineered the

170
00:06:20,880 --> 00:06:23,120
signing split stream format

171
00:06:23,120 --> 00:06:24,720
secondly we cannot assume that the

172
00:06:24,720 --> 00:06:26,560
bitstream encryption engine

173
00:06:26,560 --> 00:06:28,800
is flawless so we can also not rely on

174
00:06:28,800 --> 00:06:30,160
the encryption

175
00:06:30,160 --> 00:06:32,720
so what we essentially need is some kind

176
00:06:32,720 --> 00:06:36,160
of trust anchor which reliably tells us

177
00:06:36,160 --> 00:06:38,639
if we are running on a licensed fpga

178
00:06:38,639 --> 00:06:40,560
however this fpga might be attacker

179
00:06:40,560 --> 00:06:42,800
controlled so we should defense against

180
00:06:42,800 --> 00:06:45,840
several kinds of analysis techniques

181
00:06:45,840 --> 00:06:47,360
and we should also

182
00:06:47,360 --> 00:06:50,639
defend against design manipulations

183
00:06:50,639 --> 00:06:53,840
and we propose that a sound obfuscation

184
00:06:53,840 --> 00:06:56,479
scheme can provide such a primitive

185
00:06:56,479 --> 00:06:58,880
and the idea of our steam lifeline is

186
00:06:58,880 --> 00:07:00,960
that we combine hardware obfuscation

187
00:07:00,960 --> 00:07:02,479
with a soft core

188
00:07:02,479 --> 00:07:05,919
running obfuscated software

189
00:07:05,919 --> 00:07:08,880
of course lifeline should provide

190
00:07:08,880 --> 00:07:10,400
protection against our real world

191
00:07:10,400 --> 00:07:12,240
attacker model so we should protect

192
00:07:12,240 --> 00:07:14,319
against static analysis simulation

193
00:07:14,319 --> 00:07:16,240
on-chip debugging and of course against

194
00:07:16,240 --> 00:07:18,880
design manipulations

195
00:07:18,880 --> 00:07:21,520
and the key idea of our scheme is that

196
00:07:21,520 --> 00:07:23,919
we change the static data flow in

197
00:07:23,919 --> 00:07:26,160
hardware to a dynamic one and i will

198
00:07:26,160 --> 00:07:28,240
tell you a bit later how we do this

199
00:07:28,240 --> 00:07:31,520
and we changed the

200
00:07:31,520 --> 00:07:33,759
static control flow and software to a

201
00:07:33,759 --> 00:07:36,400
dynamic one and you can look into our

202
00:07:36,400 --> 00:07:39,280
paper for more information on that

203
00:07:39,280 --> 00:07:42,240
and what we further do is we bind the

204
00:07:42,240 --> 00:07:43,840
hardware to the software so we make them

205
00:07:43,840 --> 00:07:46,160
depend on each other hardware cannot

206
00:07:46,160 --> 00:07:47,759
function without software and the

207
00:07:47,759 --> 00:07:49,120
software cannot function without

208
00:07:49,120 --> 00:07:50,160
hardware

209
00:07:50,160 --> 00:07:53,039
and we show that this provides a real

210
00:07:53,039 --> 00:07:54,960
increase in security and protects

211
00:07:54,960 --> 00:07:58,319
against a real world attacker

212
00:07:58,319 --> 00:08:00,080
so now let's talk about the obfuscation

213
00:08:00,080 --> 00:08:02,160
premises that we combine to create

214
00:08:02,160 --> 00:08:04,000
lifetime and we will start with partial

215
00:08:04,000 --> 00:08:06,000
reconfiguration which has actually

216
00:08:06,000 --> 00:08:07,440
already been around for more than a

217
00:08:07,440 --> 00:08:10,240
decade and this feature allows allows

218
00:08:10,240 --> 00:08:13,919
you to configure parts of your fpga on

219
00:08:13,919 --> 00:08:16,080
the fly and the other parts will just

220
00:08:16,080 --> 00:08:18,160
continue working without any

221
00:08:18,160 --> 00:08:19,599
interruption

222
00:08:19,599 --> 00:08:21,759
for this you just designate an area on

223
00:08:21,759 --> 00:08:23,120
your fpga

224
00:08:23,120 --> 00:08:25,120
referred to as a reconfigurable

225
00:08:25,120 --> 00:08:26,960
partition and then you generate a

226
00:08:26,960 --> 00:08:29,360
bitstream for this partition later you

227
00:08:29,360 --> 00:08:31,440
can just load this bit stream on the

228
00:08:31,440 --> 00:08:33,679
fpga and it will configure

229
00:08:33,679 --> 00:08:37,039
this part of the fpga on the fly

230
00:08:37,039 --> 00:08:40,000
so as you might remember we abused the

231
00:08:40,000 --> 00:08:41,760
fact in the industrial

232
00:08:41,760 --> 00:08:44,159
solution that the

233
00:08:44,159 --> 00:08:46,480
ipcon authenticator were already present

234
00:08:46,480 --> 00:08:49,200
after the initial configuration and that

235
00:08:49,200 --> 00:08:51,600
they were connected to each other we

236
00:08:51,600 --> 00:08:53,440
break up this connection as you can see

237
00:08:53,440 --> 00:08:55,279
in the picture the ipco and the

238
00:08:55,279 --> 00:08:57,600
authenticator are completely separate

239
00:08:57,600 --> 00:08:59,760
furthermore we make the ip core a

240
00:08:59,760 --> 00:09:02,240
reconfigurable partition and leave it

241
00:09:02,240 --> 00:09:05,040
empty after the initial configuration

242
00:09:05,040 --> 00:09:07,200
therefore the attacker only gets a

243
00:09:07,200 --> 00:09:09,120
incomplete net list and cannot analyze

244
00:09:09,120 --> 00:09:10,880
the ip core he can only see our

245
00:09:10,880 --> 00:09:12,560
authenticator

246
00:09:12,560 --> 00:09:14,800
and we only configure the ipcor when we

247
00:09:14,800 --> 00:09:18,320
are sure that we are on a licensed fpga

248
00:09:18,320 --> 00:09:20,080
therefore all interactions between the

249
00:09:20,080 --> 00:09:21,839
authenticator and the ip core are

250
00:09:21,839 --> 00:09:23,279
implicit

251
00:09:23,279 --> 00:09:27,279
furthermore we can use this feature to

252
00:09:27,279 --> 00:09:28,720
transfer

253
00:09:28,720 --> 00:09:30,640
data between registers

254
00:09:30,640 --> 00:09:32,320
without actually connecting them with

255
00:09:32,320 --> 00:09:33,279
wires

256
00:09:33,279 --> 00:09:36,000
and for more information on that you can

257
00:09:36,000 --> 00:09:37,920
look into all paper

258
00:09:37,920 --> 00:09:39,839
and

259
00:09:39,839 --> 00:09:41,839
with this primitive we achieve

260
00:09:41,839 --> 00:09:44,800
anti-static analysis as the attacker

261
00:09:44,800 --> 00:09:46,560
only gets an incomplete design as i

262
00:09:46,560 --> 00:09:49,200
already said and in some cases we also

263
00:09:49,200 --> 00:09:51,519
defend against simulation in case the

264
00:09:51,519 --> 00:09:54,320
vendor does not provide simulation

265
00:09:54,320 --> 00:09:56,480
of partial reconfiguration for example

266
00:09:56,480 --> 00:09:59,279
silence does not have the tools for it

267
00:09:59,279 --> 00:10:01,200
but this might vary

268
00:10:01,200 --> 00:10:02,640
depending on the

269
00:10:02,640 --> 00:10:03,760
vendor

270
00:10:03,760 --> 00:10:05,920
and here you can see again a picture of

271
00:10:05,920 --> 00:10:07,760
partially configuration

272
00:10:07,760 --> 00:10:09,200
and as you can see here we have a

273
00:10:09,200 --> 00:10:11,519
reconfigurable partition which would be

274
00:10:11,519 --> 00:10:13,839
our ip core and we have a partial bit

275
00:10:13,839 --> 00:10:15,360
stream which will be provided by our

276
00:10:15,360 --> 00:10:18,079
authenticator and only if all

277
00:10:18,079 --> 00:10:19,839
authentication

278
00:10:19,839 --> 00:10:22,880
checks passed successfully we will

279
00:10:22,880 --> 00:10:24,800
successfully

280
00:10:24,800 --> 00:10:27,279
decrypt the partial bit stream send it

281
00:10:27,279 --> 00:10:29,120
to the configuration port which will

282
00:10:29,120 --> 00:10:30,320
then

283
00:10:30,320 --> 00:10:34,399
put it into the reconfigurable partition

284
00:10:34,399 --> 00:10:35,839
now let's talk about our next

285
00:10:35,839 --> 00:10:38,720
obfuscation primitive based on crosstalk

286
00:10:38,720 --> 00:10:40,880
crosstalk describes an analog effect

287
00:10:40,880 --> 00:10:42,720
which can happen when two wires are very

288
00:10:42,720 --> 00:10:44,640
close to each other when this is the

289
00:10:44,640 --> 00:10:46,480
case they can influence each other's

290
00:10:46,480 --> 00:10:49,040
channel delay this will lead to setup

291
00:10:49,040 --> 00:10:51,519
time violations and so on and so forth

292
00:10:51,519 --> 00:10:53,200
so typically you don't want this in your

293
00:10:53,200 --> 00:10:55,279
design however by creating a

294
00:10:55,279 --> 00:10:58,560
transmission wire and a receiver wire we

295
00:10:58,560 --> 00:11:00,880
can on purpose induce such delays into

296
00:11:00,880 --> 00:11:03,279
the receiver wire and measure them thus

297
00:11:03,279 --> 00:11:05,519
creating a covered communication channel

298
00:11:05,519 --> 00:11:07,200
and so we don't need any physical

299
00:11:07,200 --> 00:11:09,200
connection between two circuits to

300
00:11:09,200 --> 00:11:10,959
transmit data

301
00:11:10,959 --> 00:11:12,560
now for an attacker this is very

302
00:11:12,560 --> 00:11:14,560
difficult to reverse engineer by just

303
00:11:14,560 --> 00:11:16,800
looking at the gate level netlist he

304
00:11:16,800 --> 00:11:19,040
also requires some routing information

305
00:11:19,040 --> 00:11:21,839
to find out how the wires are actually

306
00:11:21,839 --> 00:11:24,720
routed in the fpga however even then he

307
00:11:24,720 --> 00:11:26,839
cannot infer what data we are actually

308
00:11:26,839 --> 00:11:29,519
transmitting so this as i just said

309
00:11:29,519 --> 00:11:31,760
defends again a defense against static

310
00:11:31,760 --> 00:11:34,880
analysis but also against simulation as

311
00:11:34,880 --> 00:11:37,760
we cannot simulate such analog effects

312
00:11:37,760 --> 00:11:39,200
and also

313
00:11:39,200 --> 00:11:41,760
we defend against on-chip debugging as

314
00:11:41,760 --> 00:11:44,320
the attacker requires an fpga from the

315
00:11:44,320 --> 00:11:47,519
same family if he just takes any fpga

316
00:11:47,519 --> 00:11:50,399
and it's not from the same family

317
00:11:50,399 --> 00:11:53,760
and he applies crosstalk to it he will

318
00:11:53,760 --> 00:11:56,560
not get the right results so here you

319
00:11:56,560 --> 00:11:59,279
can see our crosstalk circuit

320
00:11:59,279 --> 00:12:02,560
on the upper side you can see the input

321
00:12:02,560 --> 00:12:03,600
so

322
00:12:03,600 --> 00:12:05,519
we take our input and put it through an

323
00:12:05,519 --> 00:12:08,000
encoder and pattern generator

324
00:12:08,000 --> 00:12:10,399
this will transform our data into a

325
00:12:10,399 --> 00:12:12,720
serial stream of bits

326
00:12:12,720 --> 00:12:14,320
this bits are then put on the

327
00:12:14,320 --> 00:12:16,880
transmitter wire which you can see there

328
00:12:16,880 --> 00:12:20,079
then on the lower side we have the

329
00:12:20,079 --> 00:12:21,600
receiver side

330
00:12:21,600 --> 00:12:23,440
and as you can see right next to the

331
00:12:23,440 --> 00:12:25,760
transmitter wire is the receiver wire

332
00:12:25,760 --> 00:12:28,320
which is hooked up to a ring oscillator

333
00:12:28,320 --> 00:12:30,560
and depending on which bit you transmit

334
00:12:30,560 --> 00:12:33,200
this ring oscillator will either be

335
00:12:33,200 --> 00:12:34,880
faster or slower

336
00:12:34,880 --> 00:12:37,200
so we hook up this ring oscillator to a

337
00:12:37,200 --> 00:12:39,920
binary counter and count the pulses

338
00:12:39,920 --> 00:12:42,399
and if it's faster we have more pulses

339
00:12:42,399 --> 00:12:45,519
and if it's slower we have less pulses

340
00:12:45,519 --> 00:12:46,959
so by

341
00:12:46,959 --> 00:12:49,279
evaluating the count we can decide what

342
00:12:49,279 --> 00:12:52,639
bit was transmitted

343
00:12:52,639 --> 00:12:54,880
so as you can see here in our experiment

344
00:12:54,880 --> 00:12:56,959
there's a clear difference between a one

345
00:12:56,959 --> 00:13:00,079
and a zero in case we transmit a1 the

346
00:13:00,079 --> 00:13:03,040
ring oscillator oscillates faster and in

347
00:13:03,040 --> 00:13:05,600
case we transmit a0 the ring oscillator

348
00:13:05,600 --> 00:13:07,680
is slower of course you can see that

349
00:13:07,680 --> 00:13:10,240
there are some outliers here but by

350
00:13:10,240 --> 00:13:13,200
appending a checksum to our transmission

351
00:13:13,200 --> 00:13:16,399
we can correct errors or we can

352
00:13:16,399 --> 00:13:19,200
cause a re-transmission to

353
00:13:19,200 --> 00:13:22,399
get rid of this error

354
00:13:22,720 --> 00:13:24,639
so now let's talk about our last

355
00:13:24,639 --> 00:13:26,959
primitive called biomat which stands for

356
00:13:26,959 --> 00:13:29,040
bitstring manipulation detection and

357
00:13:29,040 --> 00:13:31,279
with this we implement self integrity

358
00:13:31,279 --> 00:13:34,000
checks in hardware and what we basically

359
00:13:34,000 --> 00:13:36,320
did is we took a concept from software

360
00:13:36,320 --> 00:13:38,320
obfuscation and transferred it to

361
00:13:38,320 --> 00:13:39,600
hardware

362
00:13:39,600 --> 00:13:41,839
so if you want to know if your

363
00:13:41,839 --> 00:13:44,639
configuration was tampered you can

364
00:13:44,639 --> 00:13:47,519
perform a readback of an fpga however

365
00:13:47,519 --> 00:13:49,120
this readback will give you the whole

366
00:13:49,120 --> 00:13:51,519
configuration so it will take time and

367
00:13:51,519 --> 00:13:53,360
of course it will take space

368
00:13:53,360 --> 00:13:54,399
however

369
00:13:54,399 --> 00:13:56,399
in our case we are not interested in

370
00:13:56,399 --> 00:13:58,000
manipulations outside of our

371
00:13:58,000 --> 00:13:59,440
authenticator

372
00:13:59,440 --> 00:14:02,000
for us the important part of the design

373
00:14:02,000 --> 00:14:04,000
is the authenticator

374
00:14:04,000 --> 00:14:06,800
therefore we only want to analyze it

375
00:14:06,800 --> 00:14:09,680
and with bimet we achieve this

376
00:14:09,680 --> 00:14:14,000
and furthermore we can spread out these

377
00:14:14,000 --> 00:14:16,399
integrity checks temporarily so we don't

378
00:14:16,399 --> 00:14:18,639
do it all at once but we can make it for

379
00:14:18,639 --> 00:14:20,560
example dependent on the control flow

380
00:14:20,560 --> 00:14:22,000
and software

381
00:14:22,000 --> 00:14:23,839
and with this primitive

382
00:14:23,839 --> 00:14:26,399
we defend against on-chip debugging as

383
00:14:26,399 --> 00:14:28,959
we can now detect if the attacker

384
00:14:28,959 --> 00:14:31,519
eavesdrops on our connection and we can

385
00:14:31,519 --> 00:14:34,560
of course detect design manipulations

386
00:14:34,560 --> 00:14:36,720
and here you can see an overview of a

387
00:14:36,720 --> 00:14:39,120
switch matrix and as you can see the

388
00:14:39,120 --> 00:14:42,000
green wire is the original connection

389
00:14:42,000 --> 00:14:44,160
now what the attacker could do is in the

390
00:14:44,160 --> 00:14:46,079
first case he cuts the green wire and

391
00:14:46,079 --> 00:14:48,160
connects it somewhere else

392
00:14:48,160 --> 00:14:50,320
and in the second case he doesn't touch

393
00:14:50,320 --> 00:14:52,000
the green wire at all

394
00:14:52,000 --> 00:14:54,240
but he adds another connection

395
00:14:54,240 --> 00:14:56,880
um and with this he can eavesdrop for

396
00:14:56,880 --> 00:15:00,079
example on the values we transmit

397
00:15:00,079 --> 00:15:01,760
as an example let's say we want to

398
00:15:01,760 --> 00:15:03,839
protect the input to the configuration

399
00:15:03,839 --> 00:15:05,360
board from eavesdropping and

400
00:15:05,360 --> 00:15:06,639
manipulation

401
00:15:06,639 --> 00:15:08,639
for this we can use vivado's internal

402
00:15:08,639 --> 00:15:11,040
place and route report analysis tool to

403
00:15:11,040 --> 00:15:13,120
get a list of inputs which fit into the

404
00:15:13,120 --> 00:15:15,279
configuration port and the routing

405
00:15:15,279 --> 00:15:18,480
information for this signal we can then

406
00:15:18,480 --> 00:15:21,120
turn this list into frame addresses word

407
00:15:21,120 --> 00:15:23,279
indexes and bit indexes

408
00:15:23,279 --> 00:15:26,560
so on a signings fpga a the

409
00:15:26,560 --> 00:15:28,720
configuration is split into different

410
00:15:28,720 --> 00:15:29,759
frames

411
00:15:29,759 --> 00:15:32,800
each frame consists of 101 words and

412
00:15:32,800 --> 00:15:35,839
each word is 32 bits wide and in a

413
00:15:35,839 --> 00:15:38,480
simplified view each bit represents a

414
00:15:38,480 --> 00:15:39,519
connection

415
00:15:39,519 --> 00:15:42,240
so we can specifically check if some

416
00:15:42,240 --> 00:15:44,560
bits are set or not which represent the

417
00:15:44,560 --> 00:15:46,800
connections to the configuration port

418
00:15:46,800 --> 00:15:48,480
and can influence

419
00:15:48,480 --> 00:15:51,360
the control flow of the authenticator

420
00:15:51,360 --> 00:15:53,440
based on this information

421
00:15:53,440 --> 00:15:55,600
now let's finally talk about live and

422
00:15:55,600 --> 00:15:57,920
our flexible ip protection scheme which

423
00:15:57,920 --> 00:15:59,680
uses all of the objectification

424
00:15:59,680 --> 00:16:02,240
primitives i explained earlier and now i

425
00:16:02,240 --> 00:16:04,160
will give you a quick overview of how it

426
00:16:04,160 --> 00:16:05,920
works so first of all we have the

427
00:16:05,920 --> 00:16:08,639
customer who requests the usage of an ip

428
00:16:08,639 --> 00:16:11,839
core and attaches a unique hardware id

429
00:16:11,839 --> 00:16:13,920
to his request this might be the

430
00:16:13,920 --> 00:16:16,160
exciting device dna or the output of a

431
00:16:16,160 --> 00:16:17,600
path

432
00:16:17,600 --> 00:16:19,040
the vendor then generates our

433
00:16:19,040 --> 00:16:20,560
authenticator and runs the key

434
00:16:20,560 --> 00:16:22,800
generation the key generation includes

435
00:16:22,800 --> 00:16:24,720
the unique hardware id as well as

436
00:16:24,720 --> 00:16:26,880
integrity information

437
00:16:26,880 --> 00:16:29,360
signals inside the authenticator

438
00:16:29,360 --> 00:16:31,680
he then encrypts the ip core with this

439
00:16:31,680 --> 00:16:34,000
key and sends back the authenticator in

440
00:16:34,000 --> 00:16:35,759
ipco bit stream

441
00:16:35,759 --> 00:16:38,240
back to the customer

442
00:16:38,240 --> 00:16:40,880
here you can see an overview of lifeline

443
00:16:40,880 --> 00:16:42,160
on the right side you can see the

444
00:16:42,160 --> 00:16:44,240
protected ip core which is left

445
00:16:44,240 --> 00:16:47,120
unconfigured after the initial startup

446
00:16:47,120 --> 00:16:48,639
and on the left side you can see your

447
00:16:48,639 --> 00:16:50,639
authenticator the main part is the

448
00:16:50,639 --> 00:16:53,440
softcore in our case a self-written risk

449
00:16:53,440 --> 00:16:56,480
5 core it's connected to bram which

450
00:16:56,480 --> 00:16:58,880
holds the authentication software as

451
00:16:58,880 --> 00:17:01,040
well as the encrypted partial bitstream

452
00:17:01,040 --> 00:17:03,360
of the ip core of course the software is

453
00:17:03,360 --> 00:17:05,520
also obvious catered

454
00:17:05,520 --> 00:17:08,000
now to authenticate the device the

455
00:17:08,000 --> 00:17:10,160
software also runs the key generation

456
00:17:10,160 --> 00:17:11,760
and for this it queries different

457
00:17:11,760 --> 00:17:13,280
peripherals

458
00:17:13,280 --> 00:17:16,559
first it queries the unique device id

459
00:17:16,559 --> 00:17:18,799
and the connection between the device id

460
00:17:18,799 --> 00:17:20,559
and the software is con

461
00:17:20,559 --> 00:17:22,720
is protected by a biomat

462
00:17:22,720 --> 00:17:24,000
and

463
00:17:24,000 --> 00:17:25,919
furthermore it's obfuscated using

464
00:17:25,919 --> 00:17:27,520
crosstalk

465
00:17:27,520 --> 00:17:29,600
and the software is also connected to

466
00:17:29,600 --> 00:17:32,720
the reconfiguration controller and the

467
00:17:32,720 --> 00:17:34,480
controller first of all provides the

468
00:17:34,480 --> 00:17:37,520
data necessary for bimat and of course

469
00:17:37,520 --> 00:17:39,840
it's also responsible for configuring

470
00:17:39,840 --> 00:17:41,600
the ip core later

471
00:17:41,600 --> 00:17:43,760
and the connection between the risc 5

472
00:17:43,760 --> 00:17:45,679
core and the reconfiguration controller

473
00:17:45,679 --> 00:17:46,960
is also

474
00:17:46,960 --> 00:17:50,480
uh protected via bimet

475
00:17:51,120 --> 00:17:53,120
now let's look at the security of

476
00:17:53,120 --> 00:17:55,039
lifeline and first of all let's look at

477
00:17:55,039 --> 00:17:58,160
the hardware side so as i said the ipco

478
00:17:58,160 --> 00:18:00,480
has only successfully configured after

479
00:18:00,480 --> 00:18:02,160
the authentication

480
00:18:02,160 --> 00:18:04,400
if the attacker performs any design

481
00:18:04,400 --> 00:18:06,640
manipulation or eavesdropping the key

482
00:18:06,640 --> 00:18:08,960
generation will fail it will also fail

483
00:18:08,960 --> 00:18:11,520
if the device id doesn't match

484
00:18:11,520 --> 00:18:14,400
in this case the decryption is still run

485
00:18:14,400 --> 00:18:16,559
but with a wrong key which results in a

486
00:18:16,559 --> 00:18:18,320
broken ip core

487
00:18:18,320 --> 00:18:20,080
and as i said eavesdropping can be

488
00:18:20,080 --> 00:18:22,080
detected by a bimet

489
00:18:22,080 --> 00:18:23,760
now let's look at the software site and

490
00:18:23,760 --> 00:18:25,919
we use state-of-the-art obfuscation

491
00:18:25,919 --> 00:18:28,480
which can withstand automated tools

492
00:18:28,480 --> 00:18:31,520
we also employ cyclic integrity checking

493
00:18:31,520 --> 00:18:33,760
to identify if the attacker wants to

494
00:18:33,760 --> 00:18:35,600
manipulate the software

495
00:18:35,600 --> 00:18:38,240
decision this essentially creates a

496
00:18:38,240 --> 00:18:40,640
chicken or egg problem for the attacker

497
00:18:40,640 --> 00:18:42,640
because the attacker cannot analyze the

498
00:18:42,640 --> 00:18:43,760
hardware

499
00:18:43,760 --> 00:18:46,000
isolated from the software

500
00:18:46,000 --> 00:18:48,640
and he can also not analyze the software

501
00:18:48,640 --> 00:18:51,039
without having some kind of simulated

502
00:18:51,039 --> 00:18:53,280
hardware because they won't function

503
00:18:53,280 --> 00:18:55,280
without each other

504
00:18:55,280 --> 00:18:57,200
now let's analyze the overhead created

505
00:18:57,200 --> 00:18:59,120
by lifeline and let's start with the

506
00:18:59,120 --> 00:19:02,000
hardware for this we evaluated it on a

507
00:19:02,000 --> 00:19:04,880
silenced zinc 7000 board and as you can

508
00:19:04,880 --> 00:19:07,919
see we didn't use many resources we only

509
00:19:07,919 --> 00:19:11,200
used around 3 000 luts and 3000 flip

510
00:19:11,200 --> 00:19:14,000
flops and a few b ram slices

511
00:19:14,000 --> 00:19:16,400
let's now look at the time overhead

512
00:19:16,400 --> 00:19:18,960
created by the key generation if our

513
00:19:18,960 --> 00:19:22,080
soft core is running at 100 megahertz

514
00:19:22,080 --> 00:19:24,160
and i want to emphasize that we used a

515
00:19:24,160 --> 00:19:26,799
very unoptimized soft core which doesn't

516
00:19:26,799 --> 00:19:29,360
have any pipelining so by using a more

517
00:19:29,360 --> 00:19:30,640
efficient core

518
00:19:30,640 --> 00:19:32,799
these timings can be minimized

519
00:19:32,799 --> 00:19:35,600
and as you can see after only 560

520
00:19:35,600 --> 00:19:37,360
milliseconds we were able to generate

521
00:19:37,360 --> 00:19:39,120
the key which can be used for the

522
00:19:39,120 --> 00:19:41,520
decryption of the partial bit stream

523
00:19:41,520 --> 00:19:44,640
after the reconfiguration our solution

524
00:19:44,640 --> 00:19:46,559
does not create any further time

525
00:19:46,559 --> 00:19:48,320
overhead as the authenticator

526
00:19:48,320 --> 00:19:50,640
deactivates itself when the ipco starts

527
00:19:50,640 --> 00:19:52,240
working

528
00:19:52,240 --> 00:19:54,320
so in conclusion in our paper we first

529
00:19:54,320 --> 00:19:56,160
analyzed the state of the art of ip

530
00:19:56,160 --> 00:19:57,840
protection schemes and showed several

531
00:19:57,840 --> 00:20:00,160
weaknesses under a real world attacker

532
00:20:00,160 --> 00:20:03,360
model we then defined what an efficient

533
00:20:03,360 --> 00:20:05,120
ip protection scheme has to defend

534
00:20:05,120 --> 00:20:06,480
against

535
00:20:06,480 --> 00:20:08,720
next we

536
00:20:08,720 --> 00:20:11,360
explained several new obfuscation

537
00:20:11,360 --> 00:20:13,520
primitives and then showed how we can

538
00:20:13,520 --> 00:20:15,600
combine them to build a flexible and

539
00:20:15,600 --> 00:20:18,480
low-cost ip protection scheme

540
00:20:18,480 --> 00:20:20,640
well that was all from me

541
00:20:20,640 --> 00:20:23,360
if you have any questions then feel free

542
00:20:23,360 --> 00:20:25,039
to write me an email and thanks for your

543
00:20:25,039 --> 00:20:27,840
attention

