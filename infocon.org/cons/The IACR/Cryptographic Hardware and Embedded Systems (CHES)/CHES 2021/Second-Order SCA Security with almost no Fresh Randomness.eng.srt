1
00:00:01,439 --> 00:00:03,199
hello everybody

2
00:00:03,199 --> 00:00:06,240
this is ayn and have the pleasure to

3
00:00:06,240 --> 00:00:08,720
present our paper entitled as second

4
00:00:08,720 --> 00:00:11,200
order security with almost no fresh

5
00:00:11,200 --> 00:00:13,360
randomness which is a joint word with

6
00:00:13,360 --> 00:00:16,759
amir moradi

7
00:00:18,000 --> 00:00:21,279
masking schemes are one of the

8
00:00:21,279 --> 00:00:23,279
most popular

9
00:00:23,279 --> 00:00:25,039
countermeasures against side channel

10
00:00:25,039 --> 00:00:26,720
analysis

11
00:00:26,720 --> 00:00:29,198
and

12
00:00:29,279 --> 00:00:32,079
which is based on randomizing sensitive

13
00:00:32,079 --> 00:00:35,840
data during the execution of the cipher

14
00:00:35,840 --> 00:00:39,760
so in masking a scheme we usually divide

15
00:00:39,760 --> 00:00:41,680
the sensitive variable

16
00:00:41,680 --> 00:00:43,520
into some shares

17
00:00:43,520 --> 00:00:44,640
and

18
00:00:44,640 --> 00:00:47,760
the android which make or forces the

19
00:00:47,760 --> 00:00:50,320
adversary to recombine the shares to

20
00:00:50,320 --> 00:00:52,960
recover the key

21
00:00:52,960 --> 00:00:54,079
but

22
00:00:54,079 --> 00:00:58,320
how we can evaluate a given mask design

23
00:00:58,320 --> 00:01:00,879
so to this end probing model was

24
00:01:00,879 --> 00:01:02,320
proposed

25
00:01:02,320 --> 00:01:04,360
so adversary can probe

26
00:01:04,360 --> 00:01:06,880
de-intermediate values

27
00:01:06,880 --> 00:01:07,680
and

28
00:01:07,680 --> 00:01:10,880
each probe are exact and independent

29
00:01:10,880 --> 00:01:12,799
and it has been shown that security in

30
00:01:12,799 --> 00:01:14,240
this model

31
00:01:14,240 --> 00:01:17,520
also provides security in other models

32
00:01:17,520 --> 00:01:19,759
and if

33
00:01:19,759 --> 00:01:22,000
any decombination

34
00:01:22,000 --> 00:01:24,880
of intermediate values

35
00:01:24,880 --> 00:01:26,479
does not reveal anything about the

36
00:01:26,479 --> 00:01:27,680
circuit

37
00:01:27,680 --> 00:01:30,720
then the design is secure

38
00:01:30,720 --> 00:01:35,840
against this order side channel attack

39
00:01:36,720 --> 00:01:40,079
and due to it a simple

40
00:01:40,079 --> 00:01:46,079
basis and seem due to its simplicity and

41
00:01:46,640 --> 00:01:49,040
its abstraction

42
00:01:49,040 --> 00:01:52,240
problem model is basis for many proofs

43
00:01:52,240 --> 00:01:56,640
in such an analysis however

44
00:01:56,640 --> 00:01:59,040
it does not properly work in hardware

45
00:01:59,040 --> 00:02:01,040
implementations

46
00:02:01,040 --> 00:02:02,240
and

47
00:02:02,240 --> 00:02:04,960
the reason behind these is glitches

48
00:02:04,960 --> 00:02:08,560
glitches are unwanted

49
00:02:08,560 --> 00:02:10,560
transition at the output of a

50
00:02:10,560 --> 00:02:13,599
combinatorial circuit

51
00:02:13,599 --> 00:02:15,920
and

52
00:02:16,319 --> 00:02:18,000
this

53
00:02:18,000 --> 00:02:21,840
usually or mainly due to the unbalanced

54
00:02:21,840 --> 00:02:24,480
path of the input of a combinatorial

55
00:02:24,480 --> 00:02:26,239
circuit

56
00:02:26,239 --> 00:02:28,239
so

57
00:02:28,239 --> 00:02:30,720
in this model when a probe placed on a

58
00:02:30,720 --> 00:02:34,160
gate it propagates backward up to last

59
00:02:34,160 --> 00:02:37,120
synchronization point so here is a

60
00:02:37,120 --> 00:02:39,519
simple

61
00:02:39,760 --> 00:02:41,200
logic circuit

62
00:02:41,200 --> 00:02:43,680
so if you probe the output or one of the

63
00:02:43,680 --> 00:02:44,720
output

64
00:02:44,720 --> 00:02:46,319
the probe

65
00:02:46,319 --> 00:02:48,879
propagates backward and

66
00:02:48,879 --> 00:02:51,599
the adversary have information about the

67
00:02:51,599 --> 00:02:52,640
all

68
00:02:52,640 --> 00:02:55,200
four input bits that are involved in the

69
00:02:55,200 --> 00:02:57,440
calculation of

70
00:02:57,440 --> 00:03:00,959
original probe

71
00:03:01,920 --> 00:03:04,319
threshold implementation is the first

72
00:03:04,319 --> 00:03:07,440
methodology which is immune against

73
00:03:07,440 --> 00:03:10,000
glitches

74
00:03:10,080 --> 00:03:12,800
ti or threshold implementation is based

75
00:03:12,800 --> 00:03:14,800
on tree condition correctness

76
00:03:14,800 --> 00:03:17,360
non-completeness and uniformity and the

77
00:03:17,360 --> 00:03:20,000
number of input share depends on

78
00:03:20,000 --> 00:03:21,840
the algebraic degree of the target

79
00:03:21,840 --> 00:03:24,480
function and also

80
00:03:24,480 --> 00:03:27,840
the security order d

81
00:03:29,040 --> 00:03:33,200
however d plus one sharing

82
00:03:33,200 --> 00:03:36,400
is independent of the

83
00:03:36,400 --> 00:03:38,400
algebraic degree of the target function

84
00:03:38,400 --> 00:03:41,040
and here i brought a simple

85
00:03:41,040 --> 00:03:43,840
two input and gate first order secure

86
00:03:43,840 --> 00:03:47,519
design did a single bit fresh mask

87
00:03:47,519 --> 00:03:50,959
so in this methodology

88
00:03:50,959 --> 00:03:51,840
the

89
00:03:51,840 --> 00:03:56,159
mask version is divided into two parts

90
00:03:56,159 --> 00:04:00,879
one is called component function so you

91
00:04:00,879 --> 00:04:02,720
can hear one of them

92
00:04:02,720 --> 00:04:04,879
here with this box

93
00:04:04,879 --> 00:04:08,080
and we have a register layer and

94
00:04:08,080 --> 00:04:10,000
each component function should be

95
00:04:10,000 --> 00:04:11,840
registered and then we have a

96
00:04:11,840 --> 00:04:14,640
compression layer to generate two

97
00:04:14,640 --> 00:04:16,880
output shares

98
00:04:16,880 --> 00:04:19,680
it has been shown that

99
00:04:19,680 --> 00:04:20,798
we can

100
00:04:20,798 --> 00:04:21,759
have it

101
00:04:21,759 --> 00:04:24,160
first order secure to input and get

102
00:04:24,160 --> 00:04:27,120
without fresh mask in this

103
00:04:27,120 --> 00:04:29,840
paper

104
00:04:30,080 --> 00:04:32,639
and the question is can we extend it to

105
00:04:32,639 --> 00:04:34,800
the second order or not so here i

106
00:04:34,800 --> 00:04:36,320
recommend to

107
00:04:36,320 --> 00:04:38,240
watch my presentation

108
00:04:38,240 --> 00:04:39,440
and

109
00:04:39,440 --> 00:04:42,160
about the paper reconciling first order

110
00:04:42,160 --> 00:04:43,680
masking scheme

111
00:04:43,680 --> 00:04:45,600
because this is the extension of that

112
00:04:45,600 --> 00:04:47,040
algorithm

113
00:04:47,040 --> 00:04:47,919
and

114
00:04:47,919 --> 00:04:51,759
probably it might be helpful to watch it

115
00:04:51,759 --> 00:04:54,800
before uh

116
00:04:54,960 --> 00:04:58,080
watch this video

117
00:04:58,080 --> 00:04:59,040
so

118
00:04:59,040 --> 00:05:01,759
let's start with a very simple two input

119
00:05:01,759 --> 00:05:03,039
and gate

120
00:05:03,039 --> 00:05:06,080
and we would like to have a second order

121
00:05:06,080 --> 00:05:07,919
realization of

122
00:05:07,919 --> 00:05:11,680
two input and gate victory shares

123
00:05:11,680 --> 00:05:14,160
so it forces us to use

124
00:05:14,160 --> 00:05:16,400
nine component function as you can see

125
00:05:16,400 --> 00:05:18,080
here to

126
00:05:18,080 --> 00:05:19,520
have a

127
00:05:19,520 --> 00:05:21,520
second order

128
00:05:21,520 --> 00:05:24,520
non-completeness

129
00:05:25,120 --> 00:05:26,160
so

130
00:05:26,160 --> 00:05:28,080
the construction

131
00:05:28,080 --> 00:05:33,039
will be something like this we have nine

132
00:05:33,039 --> 00:05:36,800
component function a register layer here

133
00:05:36,800 --> 00:05:39,680
and the compression layer here

134
00:05:39,680 --> 00:05:42,880
so we want an algorithm to

135
00:05:42,880 --> 00:05:46,320
find a uniform sharing

136
00:05:46,320 --> 00:05:48,639
which means that x x1

137
00:05:48,639 --> 00:05:50,800
x0 and x2

138
00:05:50,800 --> 00:05:53,840
should be uniform and also

139
00:05:53,840 --> 00:05:57,199
the entire design should be

140
00:05:57,199 --> 00:05:58,960
glitch extended

141
00:05:58,960 --> 00:06:02,080
probing secure

142
00:06:02,560 --> 00:06:03,600
so

143
00:06:03,600 --> 00:06:06,479
to this end we follow below steps

144
00:06:06,479 --> 00:06:08,240
if we make the set

145
00:06:08,240 --> 00:06:09,440
fl

146
00:06:09,440 --> 00:06:12,800
which means that fs0 to

147
00:06:12,800 --> 00:06:14,319
set f

148
00:06:14,319 --> 00:06:16,560
8 because we have nine component

149
00:06:16,560 --> 00:06:17,600
function

150
00:06:17,600 --> 00:06:21,120
and each of each includes all two input

151
00:06:21,120 --> 00:06:23,600
constants for your coordinate functions

152
00:06:23,600 --> 00:06:26,400
so for example for f0 which

153
00:06:26,400 --> 00:06:28,720
gets all zero and b0

154
00:06:28,720 --> 00:06:31,600
we have four different

155
00:06:31,600 --> 00:06:37,039
coordinate functions namely r0 b0 r0 b0

156
00:06:37,039 --> 00:06:38,720
plus r0

157
00:06:38,720 --> 00:06:44,160
r0 b0 plus b0 and also r0 b0 plus r0

158
00:06:44,160 --> 00:06:46,080
plus b0

159
00:06:46,080 --> 00:06:49,360
so the coordinates of each set is one

160
00:06:49,360 --> 00:06:52,639
and then if we assume that

161
00:06:52,639 --> 00:06:55,919
f0 f1 and f2 are compressed

162
00:06:55,919 --> 00:06:59,280
then we search for a tuple which is

163
00:06:59,280 --> 00:07:00,840
glitch extended

164
00:07:00,840 --> 00:07:04,880
probing secure and also their xor which

165
00:07:04,880 --> 00:07:07,599
means that in this case if i go back to

166
00:07:07,599 --> 00:07:10,720
the last slide x 0 is a balanced

167
00:07:10,720 --> 00:07:14,240
function which means that the output

168
00:07:14,240 --> 00:07:18,880
has as many as one as zero

169
00:07:18,880 --> 00:07:21,440
so what uh glitch extended probing

170
00:07:21,440 --> 00:07:22,800
secure means

171
00:07:22,800 --> 00:07:26,000
so we have this construction

172
00:07:26,000 --> 00:07:26,880
so

173
00:07:26,880 --> 00:07:28,400
it should be

174
00:07:28,400 --> 00:07:30,960
secure when i then the attacker put two

175
00:07:30,960 --> 00:07:32,319
probe on

176
00:07:32,319 --> 00:07:34,080
uh one in on

177
00:07:34,080 --> 00:07:37,599
f0 and one on f1 and because

178
00:07:37,599 --> 00:07:40,560
f1 and f0 are second order non-complete

179
00:07:40,560 --> 00:07:41,759
so we don't

180
00:07:41,759 --> 00:07:44,879
need to check this one as

181
00:07:44,879 --> 00:07:47,120
it at most have two

182
00:07:47,120 --> 00:07:49,919
shares out of two shares

183
00:07:49,919 --> 00:07:51,520
so the next

184
00:07:51,520 --> 00:07:53,599
one that we should check

185
00:07:53,599 --> 00:07:56,400
is one probe on the xor in the

186
00:07:56,400 --> 00:07:58,240
compression layer and one in the

187
00:07:58,240 --> 00:07:59,840
component function

188
00:07:59,840 --> 00:08:02,400
so because of a glitch extended probing

189
00:08:02,400 --> 00:08:05,199
model this

190
00:08:05,199 --> 00:08:06,400
probe

191
00:08:06,400 --> 00:08:08,560
will expand to 3

192
00:08:08,560 --> 00:08:09,680
here

193
00:08:09,680 --> 00:08:13,840
and we have to check these four

194
00:08:13,919 --> 00:08:16,800
probes and check the security of them

195
00:08:16,800 --> 00:08:19,120
and then we have to check

196
00:08:19,120 --> 00:08:21,919
the next one and also the probe on the

197
00:08:21,919 --> 00:08:23,280
f2

198
00:08:23,280 --> 00:08:24,840
which is a component

199
00:08:24,840 --> 00:08:28,879
function once we finally find the

200
00:08:28,879 --> 00:08:31,280
tuple which

201
00:08:31,280 --> 00:08:32,880
fulfills these

202
00:08:32,880 --> 00:08:34,640
checks and also

203
00:08:34,640 --> 00:08:37,839
secure in glitch x and the problem model

204
00:08:37,839 --> 00:08:40,399
and also their x over which means that

205
00:08:40,399 --> 00:08:46,080
x0 is balance function then we add these

206
00:08:46,080 --> 00:08:48,560
these functions to the set

207
00:08:48,560 --> 00:08:51,120
f012

208
00:08:51,120 --> 00:08:53,760
and do we do the same to

209
00:08:53,760 --> 00:08:56,640
make two other sets and

210
00:08:56,640 --> 00:08:58,800
as the last step we

211
00:08:58,800 --> 00:09:00,720
search for the tuples

212
00:09:00,720 --> 00:09:04,000
whose xor make a correct sharing so

213
00:09:04,000 --> 00:09:07,279
in terms of implementation we

214
00:09:07,279 --> 00:09:10,320
make something correct and non-complete

215
00:09:10,320 --> 00:09:12,480
and then we search for uniform sharing

216
00:09:12,480 --> 00:09:14,320
by adding

217
00:09:14,320 --> 00:09:17,040
correction terms but here we

218
00:09:17,040 --> 00:09:19,920
at first have something non-complete and

219
00:09:19,920 --> 00:09:22,160
second order cq in glitch accident

220
00:09:22,160 --> 00:09:24,000
probing model

221
00:09:24,000 --> 00:09:28,640
and also uniform and then we find

222
00:09:28,640 --> 00:09:30,560
something correct

223
00:09:30,560 --> 00:09:32,959
and we see whether is there any

224
00:09:32,959 --> 00:09:36,920
correction or not

225
00:09:37,600 --> 00:09:40,320
but it's not the end we have to check

226
00:09:40,320 --> 00:09:41,440
some

227
00:09:41,440 --> 00:09:43,760
more

228
00:09:44,399 --> 00:09:45,600
probes

229
00:09:45,600 --> 00:09:48,720
so we get the first element from this

230
00:09:48,720 --> 00:09:49,760
set

231
00:09:49,760 --> 00:09:52,080
and the next one from the other side and

232
00:09:52,080 --> 00:09:53,120
the

233
00:09:53,120 --> 00:09:56,240
last element from the last set

234
00:09:56,240 --> 00:09:57,440
so

235
00:09:57,440 --> 00:10:00,000
so far we check whether

236
00:10:00,000 --> 00:10:02,399
this construction these construction and

237
00:10:02,399 --> 00:10:04,480
this concern is second order secure or

238
00:10:04,480 --> 00:10:05,600
not but

239
00:10:05,600 --> 00:10:07,680
we have to check whether

240
00:10:07,680 --> 00:10:09,600
if one probe is

241
00:10:09,600 --> 00:10:12,160
x0 which is expanded to

242
00:10:12,160 --> 00:10:13,839
three probes here

243
00:10:13,839 --> 00:10:17,600
and also one probe on the other element

244
00:10:17,600 --> 00:10:22,720
which means f0 here f3 here

245
00:10:22,720 --> 00:10:26,000
and it's secure or not so we have to do

246
00:10:26,000 --> 00:10:27,920
these checks as well

247
00:10:27,920 --> 00:10:31,279
and then the other probe on this one and

248
00:10:31,279 --> 00:10:32,480
this one

249
00:10:32,480 --> 00:10:35,360
and also we have to put another probe on

250
00:10:35,360 --> 00:10:38,160
x1 and these four

251
00:10:38,160 --> 00:10:40,240
should be checked but this one expands

252
00:10:40,240 --> 00:10:42,880
to three more probes so

253
00:10:42,880 --> 00:10:45,120
this set of six parallels should be

254
00:10:45,120 --> 00:10:47,920
checked whether it's secure or not

255
00:10:47,920 --> 00:10:49,440
and

256
00:10:49,440 --> 00:10:53,760
basically it has identical joint

257
00:10:54,480 --> 00:10:56,880
uh identical joint

258
00:10:56,880 --> 00:11:00,240
probability distribution or not

259
00:11:00,240 --> 00:11:02,160
once we have

260
00:11:02,160 --> 00:11:04,880
a secure design

261
00:11:04,880 --> 00:11:07,519
which means that this element and this

262
00:11:07,519 --> 00:11:09,839
element is secure we should do the same

263
00:11:09,839 --> 00:11:12,880
for this element and this one basically

264
00:11:12,880 --> 00:11:15,519
one probe here in the x zero which is

265
00:11:15,519 --> 00:11:18,560
expanded to three and then one in each

266
00:11:18,560 --> 00:11:21,519
con component function and one and

267
00:11:21,519 --> 00:11:22,720
x two

268
00:11:22,720 --> 00:11:25,600
and also we have to check this element

269
00:11:25,600 --> 00:11:28,079
and we do this element and see whether

270
00:11:28,079 --> 00:11:30,160
it's

271
00:11:30,160 --> 00:11:33,760
second order cq or not and the last step

272
00:11:33,760 --> 00:11:38,320
is feather this uniform or not

273
00:11:38,320 --> 00:11:41,519
and if it was uniform and also have

274
00:11:41,519 --> 00:11:43,200
correct sharing

275
00:11:43,200 --> 00:11:47,120
then we found a solution

276
00:11:47,519 --> 00:11:49,440
so as you can see compared to the first

277
00:11:49,440 --> 00:11:53,360
order security it has way more checks

278
00:11:53,360 --> 00:11:57,040
and the complexity of the algorithm is

279
00:11:57,040 --> 00:11:59,680
pretty high

280
00:11:59,680 --> 00:12:01,839
so the application of this technique on

281
00:12:01,839 --> 00:12:04,800
two input and get v without fresh marks

282
00:12:04,800 --> 00:12:08,079
and with a single bit fresh map

283
00:12:08,079 --> 00:12:11,680
leads to no solution but we have

284
00:12:11,680 --> 00:12:14,079
we have found many solutions with two

285
00:12:14,079 --> 00:12:15,120
fresh

286
00:12:15,120 --> 00:12:16,720
mask bits

287
00:12:16,720 --> 00:12:19,440
for anti-sore function which is a

288
00:12:19,440 --> 00:12:23,440
rb plus c for input variables all b and

289
00:12:23,440 --> 00:12:25,360
serve

290
00:12:25,360 --> 00:12:28,079
we have millions of solutions without

291
00:12:28,079 --> 00:12:30,880
fresh masks

292
00:12:31,440 --> 00:12:34,320
so this motivated us to apply our

293
00:12:34,320 --> 00:12:36,079
technique to forward quadratic

294
00:12:36,079 --> 00:12:37,440
projections

295
00:12:37,440 --> 00:12:38,480
and we know

296
00:12:38,480 --> 00:12:39,920
we have

297
00:12:39,920 --> 00:12:43,600
six classes of quadratic projections

298
00:12:43,600 --> 00:12:45,920
which means that uh

299
00:12:45,920 --> 00:12:49,040
using one of these classes and two

300
00:12:49,040 --> 00:12:50,880
affine functions

301
00:12:50,880 --> 00:12:53,440
we can build any 4-bit quadratic

302
00:12:53,440 --> 00:12:55,680
bijections

303
00:12:55,680 --> 00:12:58,240
so we start with the

304
00:12:58,240 --> 00:12:59,839
simplest one

305
00:12:59,839 --> 00:13:02,959
which has only one coordinate function

306
00:13:02,959 --> 00:13:06,000
which is uh

307
00:13:06,000 --> 00:13:07,839
which is quadratic

308
00:13:07,839 --> 00:13:09,519
here

309
00:13:09,519 --> 00:13:10,959
and

310
00:13:10,959 --> 00:13:14,079
we already studied an index or which is

311
00:13:14,079 --> 00:13:15,760
basically this

312
00:13:15,760 --> 00:13:18,880
coordinate function but

313
00:13:18,880 --> 00:13:20,720
all solutions

314
00:13:20,720 --> 00:13:24,160
are not necessarily a joint

315
00:13:24,160 --> 00:13:28,000
a jointly uniform solution so

316
00:13:28,000 --> 00:13:28,800
we

317
00:13:28,800 --> 00:13:31,040
search for

318
00:13:31,040 --> 00:13:34,560
uniform sharing and we found more than

319
00:13:34,560 --> 00:13:36,000
500

320
00:13:36,000 --> 00:13:39,120
solutions which is the second order cq

321
00:13:39,120 --> 00:13:41,920
and also fulfill the

322
00:13:41,920 --> 00:13:43,680
joint uniformity

323
00:13:43,680 --> 00:13:47,600
and of course without any fresh masks

324
00:13:47,600 --> 00:13:50,000
we further studied the next one

325
00:13:50,000 --> 00:13:52,320
this one is a more a bit more

326
00:13:52,320 --> 00:13:54,800
complicated it has two coordinate

327
00:13:54,800 --> 00:13:57,279
function

328
00:13:57,360 --> 00:14:00,000
with algebraic degree of two

329
00:14:00,000 --> 00:14:01,760
and

330
00:14:01,760 --> 00:14:04,000
of course it requires more checks on

331
00:14:04,000 --> 00:14:06,639
because the attacker can

332
00:14:06,639 --> 00:14:08,639
put one probe on

333
00:14:08,639 --> 00:14:11,839
this coordinate function and one in this

334
00:14:11,839 --> 00:14:14,800
coordinate function

335
00:14:14,839 --> 00:14:18,079
and and basically

336
00:14:18,079 --> 00:14:20,399
one on the compression layer of the

337
00:14:20,399 --> 00:14:21,279
first

338
00:14:21,279 --> 00:14:23,120
and one and the component function of

339
00:14:23,120 --> 00:14:26,399
the second one and

340
00:14:26,399 --> 00:14:28,160
the other

341
00:14:28,160 --> 00:14:31,519
possibility is to put one

342
00:14:31,519 --> 00:14:34,720
probe on the compression layer of this

343
00:14:34,720 --> 00:14:37,760
coordinate function and one and on the

344
00:14:37,760 --> 00:14:41,519
compression layer of this function

345
00:14:41,519 --> 00:14:43,360
we also found many solutions without

346
00:14:43,360 --> 00:14:45,360
fresh masks

347
00:14:45,360 --> 00:14:50,480
and we also applied our technique to

348
00:14:50,480 --> 00:14:53,760
other quadratic projections

349
00:14:53,760 --> 00:14:56,720
and we found some solutions

350
00:14:56,720 --> 00:15:00,720
however we found no solution for

351
00:15:00,720 --> 00:15:02,480
q 300

352
00:15:02,480 --> 00:15:05,680
and it's not possible to

353
00:15:05,680 --> 00:15:09,519
realize a tree share second order

354
00:15:09,519 --> 00:15:12,480
mask variant of this one because

355
00:15:12,480 --> 00:15:15,040
basically

356
00:15:15,600 --> 00:15:19,279
this the coordinate function has

357
00:15:19,279 --> 00:15:21,839
all three

358
00:15:21,839 --> 00:15:25,040
quadratic monomials of three inputs

359
00:15:25,040 --> 00:15:27,279
but this

360
00:15:27,279 --> 00:15:28,800
class can be

361
00:15:28,800 --> 00:15:31,279
decomposed into two

362
00:15:31,279 --> 00:15:33,839
quadratic projection

363
00:15:33,839 --> 00:15:34,720
and

364
00:15:34,720 --> 00:15:37,120
we can make those

365
00:15:37,120 --> 00:15:40,399
decompose functions

366
00:15:40,399 --> 00:15:42,480
a second order secure

367
00:15:42,480 --> 00:15:43,680
but at the

368
00:15:43,680 --> 00:15:46,480
composition we need some fresh masks so

369
00:15:46,480 --> 00:15:50,079
here we have f and g which is

370
00:15:50,079 --> 00:15:51,680
quadratic

371
00:15:51,680 --> 00:15:54,000
so we should add some fresh mass in the

372
00:15:54,000 --> 00:15:56,079
compression layer and store the result

373
00:15:56,079 --> 00:15:57,759
in the register

374
00:15:57,759 --> 00:16:00,079
to make sure that

375
00:16:00,079 --> 00:16:01,519
the design

376
00:16:01,519 --> 00:16:03,920
the whole design is still second order

377
00:16:03,920 --> 00:16:06,720
secure so f is second order secure g is

378
00:16:06,720 --> 00:16:10,720
second order secure but composing them

379
00:16:10,720 --> 00:16:14,399
not necessarily is second order sticker

380
00:16:14,399 --> 00:16:16,720
so because of that in the compression

381
00:16:16,720 --> 00:16:19,279
layer we add some fresh mask i store the

382
00:16:19,279 --> 00:16:21,440
result in the register

383
00:16:21,440 --> 00:16:23,759
before giving it to the

384
00:16:23,759 --> 00:16:25,600
next function and if

385
00:16:25,600 --> 00:16:29,600
the output of the g also goes to the

386
00:16:29,600 --> 00:16:32,079
another function on linear function then

387
00:16:32,079 --> 00:16:37,000
we should add some more fresh mask here

388
00:16:37,040 --> 00:16:41,040
so as in cases study we applied our

389
00:16:41,040 --> 00:16:44,639
algorithm to hedgehog and

390
00:16:44,639 --> 00:16:47,519
ketchup has a five with s-box with

391
00:16:47,519 --> 00:16:50,959
quarter two coordinate functions and we

392
00:16:50,959 --> 00:16:52,320
have designed

393
00:16:52,320 --> 00:16:54,880
a two share which means that first order

394
00:16:54,880 --> 00:16:57,360
and three share jesus

395
00:16:57,360 --> 00:16:59,839
second order round best implementation

396
00:16:59,839 --> 00:17:02,399
of question without any fresh mass i

397
00:17:02,399 --> 00:17:04,480
would like to highlight that this is the

398
00:17:04,480 --> 00:17:06,720
first time the second order secure

399
00:17:06,720 --> 00:17:09,119
ketchup without any fresh mask is

400
00:17:09,119 --> 00:17:10,880
presented

401
00:17:10,880 --> 00:17:12,319
so here is

402
00:17:12,319 --> 00:17:15,599
the synthesis result so as you can see

403
00:17:15,599 --> 00:17:16,799
we have we

404
00:17:16,799 --> 00:17:19,280
use no first mask the area overhead is

405
00:17:19,280 --> 00:17:21,919
roughly the same but we have a bit

406
00:17:21,919 --> 00:17:23,679
more delay

407
00:17:23,679 --> 00:17:27,520
or basically the critical pass

408
00:17:29,280 --> 00:17:32,240
so the next is the case that is skinny

409
00:17:32,240 --> 00:17:34,799
the four bit spokes of skinny can be

410
00:17:34,799 --> 00:17:36,160
decomposed

411
00:17:36,160 --> 00:17:37,440
into

412
00:17:37,440 --> 00:17:40,480
two quadratic functions

413
00:17:40,480 --> 00:17:43,520
as you can see here and three

414
00:17:43,520 --> 00:17:45,440
are following functions

415
00:17:45,440 --> 00:17:48,160
and all f1 functions are a bit

416
00:17:48,160 --> 00:17:50,799
permutation and negation of the input

417
00:17:50,799 --> 00:17:52,880
and output so

418
00:17:52,880 --> 00:17:54,640
this means that

419
00:17:54,640 --> 00:17:58,640
we can construct a skinny

420
00:17:59,440 --> 00:18:02,080
encryption function

421
00:18:02,080 --> 00:18:03,120
with

422
00:18:03,120 --> 00:18:04,880
only eight bit

423
00:18:04,880 --> 00:18:07,520
fresh mass as you can see here

424
00:18:07,520 --> 00:18:10,000
and then as i said before

425
00:18:10,000 --> 00:18:12,080
we have to add fresh mass at the

426
00:18:12,080 --> 00:18:15,440
interconnection of the two

427
00:18:15,440 --> 00:18:17,840
quadratic function to

428
00:18:17,840 --> 00:18:20,480
ensure the security and because affine

429
00:18:20,480 --> 00:18:23,280
functions are just bit permutation we

430
00:18:23,280 --> 00:18:25,360
don't need to place any register here so

431
00:18:25,360 --> 00:18:27,840
basically we have one state register

432
00:18:27,840 --> 00:18:30,000
before the xbox

433
00:18:30,000 --> 00:18:32,240
and

434
00:18:32,320 --> 00:18:34,320
two register layers before the

435
00:18:34,320 --> 00:18:39,039
compression and also one register

436
00:18:39,039 --> 00:18:40,720
after compression

437
00:18:40,720 --> 00:18:43,360
of the first quadratic

438
00:18:43,360 --> 00:18:45,918
bijection

439
00:18:47,600 --> 00:18:50,160
so the next case that is middley it's

440
00:18:50,160 --> 00:18:52,960
pretty similar to the skinny we can

441
00:18:52,960 --> 00:18:56,080
decompose it into two quadratic function

442
00:18:56,080 --> 00:18:57,440
however

443
00:18:57,440 --> 00:18:59,679
uh affine function are not just with

444
00:18:59,679 --> 00:19:02,160
permutation like

445
00:19:02,160 --> 00:19:05,679
middle east so we can decompose it into

446
00:19:05,679 --> 00:19:07,360
quadratic function and basically

447
00:19:07,360 --> 00:19:10,799
integrate the a3 into the

448
00:19:10,799 --> 00:19:13,360
and this quadratic function also a2 to

449
00:19:13,360 --> 00:19:16,960
the the other one and make the g and f

450
00:19:16,960 --> 00:19:20,080
so basically we have two new quadratic

451
00:19:20,080 --> 00:19:22,160
bijections and we can apply our

452
00:19:22,160 --> 00:19:24,559
algorithm on it and

453
00:19:24,559 --> 00:19:26,640
and we found

454
00:19:26,640 --> 00:19:29,200
more solution and actually we need more

455
00:19:29,200 --> 00:19:31,280
checks because of

456
00:19:31,280 --> 00:19:34,720
a1 because the attacker can

457
00:19:34,720 --> 00:19:38,320
put a probe on a1 and the xor

458
00:19:38,320 --> 00:19:39,440
and

459
00:19:39,440 --> 00:19:41,520
put one

460
00:19:41,520 --> 00:19:44,480
probe on the compression layer of f or

461
00:19:44,480 --> 00:19:47,760
compression layer of g

462
00:19:48,000 --> 00:19:49,760
so

463
00:19:49,760 --> 00:19:52,799
we have found several solutions for f

464
00:19:52,799 --> 00:19:55,200
and g and as i said before we need eight

465
00:19:55,200 --> 00:19:56,080
bit

466
00:19:56,080 --> 00:19:59,280
refreshments to

467
00:19:59,360 --> 00:20:03,120
connect or basically compose the g and f

468
00:20:03,120 --> 00:20:05,280
and the result of the

469
00:20:05,280 --> 00:20:09,120
a1 should be stored in register

470
00:20:09,120 --> 00:20:11,919
he is here is the general structure of

471
00:20:11,919 --> 00:20:13,600
the meteorite

472
00:20:13,600 --> 00:20:17,280
and as i said the output of a1 should be

473
00:20:17,280 --> 00:20:19,120
stored in the register at the

474
00:20:19,120 --> 00:20:22,640
interconnection we need some fresh masks

475
00:20:22,640 --> 00:20:23,760
and

476
00:20:23,760 --> 00:20:26,400
before connection you always need

477
00:20:26,400 --> 00:20:28,720
register to ensure

478
00:20:28,720 --> 00:20:30,159
glitch

479
00:20:30,159 --> 00:20:34,760
extended probing security

480
00:20:35,039 --> 00:20:39,440
so the next case studies are present and

481
00:20:39,440 --> 00:20:40,720
prints

482
00:20:40,720 --> 00:20:43,440
and present spots also can be decomposed

483
00:20:43,440 --> 00:20:45,919
into two quadratic projections like

484
00:20:45,919 --> 00:20:48,640
middle and skinny

485
00:20:48,640 --> 00:20:49,679
and

486
00:20:49,679 --> 00:20:51,919
i'm not going to repeat

487
00:20:51,919 --> 00:20:55,120
the procedure for the present this box

488
00:20:55,120 --> 00:20:59,520
and for a prince we

489
00:20:59,840 --> 00:21:02,080
in the encryption function of prince

490
00:21:02,080 --> 00:21:05,280
both s plus and its inverse are used

491
00:21:05,280 --> 00:21:06,559
so

492
00:21:06,559 --> 00:21:08,080
as

493
00:21:08,080 --> 00:21:10,080
as a matter of fact none of them can be

494
00:21:10,080 --> 00:21:11,679
decomposed into two quadratic

495
00:21:11,679 --> 00:21:14,240
projections so

496
00:21:14,240 --> 00:21:18,400
we decompose it the xbox inverse into

497
00:21:18,400 --> 00:21:20,559
three quadratic projection which means

498
00:21:20,559 --> 00:21:23,280
that a g and f are quadratic bijection

499
00:21:23,280 --> 00:21:27,200
and we have a f input for a one

500
00:21:27,200 --> 00:21:29,520
and we should store the regi uh the

501
00:21:29,520 --> 00:21:31,440
result of the a1

502
00:21:31,440 --> 00:21:35,120
to the register and then

503
00:21:35,760 --> 00:21:39,200
composed f g and h

504
00:21:39,200 --> 00:21:41,200
and as before

505
00:21:41,200 --> 00:21:43,520
at the interconnection of f and g and g

506
00:21:43,520 --> 00:21:45,760
and h we need fresh mass to ensure the

507
00:21:45,760 --> 00:21:47,200
security

508
00:21:47,200 --> 00:21:50,080
to uh implement the s bars we

509
00:21:50,080 --> 00:21:51,039
used

510
00:21:51,039 --> 00:21:54,240
the iphone equivalence property of xbox

511
00:21:54,240 --> 00:21:56,320
and xbox inverse of prince which means

512
00:21:56,320 --> 00:21:59,679
that which means that with

513
00:21:59,679 --> 00:22:01,600
a fine function a

514
00:22:01,600 --> 00:22:05,520
we can implement as

515
00:22:05,840 --> 00:22:07,280
in the

516
00:22:07,280 --> 00:22:09,919
round function so basically we implement

517
00:22:09,919 --> 00:22:14,320
a secure version of s1 and we

518
00:22:14,320 --> 00:22:18,559
place a at the input and output of this

519
00:22:18,559 --> 00:22:22,320
inverse to implement this

520
00:22:22,320 --> 00:22:24,880
so here is the

521
00:22:24,880 --> 00:22:27,120
result

522
00:22:27,120 --> 00:22:28,240
and

523
00:22:28,240 --> 00:22:29,679
our skinny

524
00:22:29,679 --> 00:22:32,159
has a security or the retrieve with only

525
00:22:32,159 --> 00:22:34,240
three shares we need only

526
00:22:34,240 --> 00:22:36,960
eight feet per s box

527
00:22:36,960 --> 00:22:38,480
and

528
00:22:38,480 --> 00:22:40,400
the same hole for the middle

529
00:22:40,400 --> 00:22:43,679
and present but prince

530
00:22:43,679 --> 00:22:45,919
is decomposed to three quadratic

531
00:22:45,919 --> 00:22:48,080
functions and as you can see the number

532
00:22:48,080 --> 00:22:49,760
of freshmen is

533
00:22:49,760 --> 00:22:51,280
reduced

534
00:22:51,280 --> 00:22:53,919
and the area overhead is roughly the

535
00:22:53,919 --> 00:22:55,120
same as

536
00:22:55,120 --> 00:22:57,679
the state of the art and is way better

537
00:22:57,679 --> 00:22:59,280
than

538
00:22:59,280 --> 00:23:00,640
some

539
00:23:00,640 --> 00:23:02,320
proposed

540
00:23:02,320 --> 00:23:03,760
designs

541
00:23:03,760 --> 00:23:06,720
and actually the true food of our design

542
00:23:06,720 --> 00:23:09,840
is the most in the prince

543
00:23:09,840 --> 00:23:11,280
we have a

544
00:23:11,280 --> 00:23:14,799
work on present which this is only

545
00:23:14,799 --> 00:23:17,520
an xbox implementation which needs more

546
00:23:17,520 --> 00:23:20,159
than 500 bit and

547
00:23:20,159 --> 00:23:21,120
more

548
00:23:21,120 --> 00:23:26,000
around 150 clocks okay to perform only

549
00:23:26,000 --> 00:23:28,400
one present xbox which is second order

550
00:23:28,400 --> 00:23:30,720
statute

551
00:23:30,880 --> 00:23:33,120
which is uh the cost of our

552
00:23:33,120 --> 00:23:36,960
implementation is extremely lower

553
00:23:36,960 --> 00:23:41,039
compared to the state of the art

554
00:23:41,039 --> 00:23:41,919
so

555
00:23:41,919 --> 00:23:45,120
we evaluate all our

556
00:23:45,120 --> 00:23:47,760
esports construction with silver which

557
00:23:47,760 --> 00:23:48,880
is a

558
00:23:48,880 --> 00:23:51,279
verification tool and does not simplify

559
00:23:51,279 --> 00:23:53,520
anything and has not any

560
00:23:53,520 --> 00:23:55,840
false positive or

561
00:23:55,840 --> 00:23:58,400
false negative and we check our

562
00:23:58,400 --> 00:24:00,320
construction under the glitch x and the

563
00:24:00,320 --> 00:24:01,679
problem model

564
00:24:01,679 --> 00:24:02,840
and because the

565
00:24:02,840 --> 00:24:06,080
analyzing full encryption module is not

566
00:24:06,080 --> 00:24:09,039
possible with silver we

567
00:24:09,039 --> 00:24:11,440
implemented our design in fpga and

568
00:24:11,440 --> 00:24:13,520
collected traces and performed the

569
00:24:13,520 --> 00:24:16,159
t-test and all of the design

570
00:24:16,159 --> 00:24:17,600
very secure

571
00:24:17,600 --> 00:24:21,919
yeah using a 100 million traces

572
00:24:21,919 --> 00:24:23,679
so

573
00:24:23,679 --> 00:24:27,039
in this paper we introduce a methodology

574
00:24:27,039 --> 00:24:29,600
to achieve three shares second order

575
00:24:29,600 --> 00:24:32,960
secure implementation

576
00:24:32,960 --> 00:24:34,720
quadratic functions

577
00:24:34,720 --> 00:24:37,440
and without any fresh mask

578
00:24:37,440 --> 00:24:38,880
but we need

579
00:24:38,880 --> 00:24:42,159
fresh mass when we are going to compose

580
00:24:42,159 --> 00:24:42,960
them

581
00:24:42,960 --> 00:24:44,640
we also presented first order and

582
00:24:44,640 --> 00:24:46,720
sticker or the secure design of hedgehog

583
00:24:46,720 --> 00:24:49,440
without any fresh mask we also applied

584
00:24:49,440 --> 00:24:51,440
our technique on

585
00:24:51,440 --> 00:24:53,120
some lightweight blocks rifle like

586
00:24:53,120 --> 00:24:56,000
skinny midori prison and prince

587
00:24:56,000 --> 00:24:57,760
and

588
00:24:57,760 --> 00:24:59,679
presented

589
00:24:59,679 --> 00:25:03,440
second order variant of them

590
00:25:03,760 --> 00:25:06,080
thank you all for watching my

591
00:25:06,080 --> 00:25:08,400
presentation please

592
00:25:08,400 --> 00:25:10,559
do not hesitate to contact me if you

593
00:25:10,559 --> 00:25:13,120
have any question or if you have any

594
00:25:13,120 --> 00:25:14,480
suggestion

595
00:25:14,480 --> 00:25:18,120
thank you very much

