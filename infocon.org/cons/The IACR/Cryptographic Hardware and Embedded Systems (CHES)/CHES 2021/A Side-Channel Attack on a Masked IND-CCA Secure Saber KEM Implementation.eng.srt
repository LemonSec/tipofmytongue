1
00:00:02,720 --> 00:00:03,439
hi

2
00:00:03,439 --> 00:00:05,440
welcome to the presentation of our paper

3
00:00:05,440 --> 00:00:08,559
a side channel attack on masked ins cca

4
00:00:08,559 --> 00:00:11,440
secure sabre chem implementation

5
00:00:11,440 --> 00:00:14,240
i am kale from kth and today i have the

6
00:00:14,240 --> 00:00:16,160
privilege of presenting this work at

7
00:00:16,160 --> 00:00:19,359
chess on behalf of my co-authors

8
00:00:19,359 --> 00:00:22,160
so today we will briefly introduce saber

9
00:00:22,160 --> 00:00:24,000
and how masking works

10
00:00:24,000 --> 00:00:25,599
then we will describe the presented

11
00:00:25,599 --> 00:00:27,680
attack and show its results and we will

12
00:00:27,680 --> 00:00:29,519
finish off the presentation with a key

13
00:00:29,519 --> 00:00:32,159
recovery demo

14
00:00:32,159 --> 00:00:34,960
now sabre is a key encapsulation

15
00:00:34,960 --> 00:00:37,440
mechanism which leverages public key

16
00:00:37,440 --> 00:00:39,680
cryptography to securely transmit a

17
00:00:39,680 --> 00:00:41,120
shared secret

18
00:00:41,120 --> 00:00:43,440
such as an ephemeral symmetric key which

19
00:00:43,440 --> 00:00:45,120
is then later used for bulk of the

20
00:00:45,120 --> 00:00:46,719
encryption

21
00:00:46,719 --> 00:00:49,280
it is one of the finalists in the nist

22
00:00:49,280 --> 00:00:52,000
post quantum standardization competition

23
00:00:52,000 --> 00:00:53,680
it is one of the reasons why we have

24
00:00:53,680 --> 00:00:56,480
selected it for the evaluation

25
00:00:56,480 --> 00:00:59,120
sabre belongs to a group of

26
00:00:59,120 --> 00:01:01,199
lattice-based cryptosystems

27
00:01:01,199 --> 00:01:02,960
it relies on module learning with

28
00:01:02,960 --> 00:01:04,959
rounding which is a modification of

29
00:01:04,959 --> 00:01:06,799
learning with error

30
00:01:06,799 --> 00:01:09,119
the fuzziness comes from lopping off a

31
00:01:09,119 --> 00:01:11,200
few bits off of each coefficient rather

32
00:01:11,200 --> 00:01:14,880
than sampling from an error distribution

33
00:01:14,880 --> 00:01:18,000
now masking is a common counter measure

34
00:01:18,000 --> 00:01:20,320
against side channel analysis so let's

35
00:01:20,320 --> 00:01:22,560
say you have a code section that's known

36
00:01:22,560 --> 00:01:24,840
to be leaky or you would like to protect

37
00:01:24,840 --> 00:01:28,320
it now with the masking counter measure

38
00:01:28,320 --> 00:01:29,920
you take your sensitive data and you

39
00:01:29,920 --> 00:01:31,920
split it into two shares

40
00:01:31,920 --> 00:01:33,520
for first order masking

41
00:01:33,520 --> 00:01:36,079
i.e a random mask as one and the other

42
00:01:36,079 --> 00:01:38,240
is the secret data xor with this random

43
00:01:38,240 --> 00:01:39,360
mask

44
00:01:39,360 --> 00:01:41,360
you then execute the code section on

45
00:01:41,360 --> 00:01:43,360
both shares and at the end you take the

46
00:01:43,360 --> 00:01:44,640
results

47
00:01:44,640 --> 00:01:46,799
and you xor them back together to get

48
00:01:46,799 --> 00:01:48,799
the true answer back

49
00:01:48,799 --> 00:01:51,520
the idea is that no point during the

50
00:01:51,520 --> 00:01:54,320
code execution did you manipulate the

51
00:01:54,320 --> 00:01:56,960
original secret data directly

52
00:01:56,960 --> 00:01:58,799
therefore anybody that is watching on

53
00:01:58,799 --> 00:02:01,520
the power rails or listening to em they

54
00:02:01,520 --> 00:02:03,360
don't directly get to see what you are

55
00:02:03,360 --> 00:02:05,520
working on

56
00:02:05,520 --> 00:02:07,680
masking is considered an effective but

57
00:02:07,680 --> 00:02:10,560
expensive computation wise counter

58
00:02:10,560 --> 00:02:11,520
measure

59
00:02:11,520 --> 00:02:12,959
because we have essentially doubled the

60
00:02:12,959 --> 00:02:14,800
computation effort by executing the

61
00:02:14,800 --> 00:02:16,879
protected code section twice

62
00:02:16,879 --> 00:02:19,599
for each share

63
00:02:19,760 --> 00:02:22,000
so here we see a portion of the saber

64
00:02:22,000 --> 00:02:24,319
key encapsulation mechanism that we are

65
00:02:24,319 --> 00:02:25,920
focusing in on

66
00:02:25,920 --> 00:02:29,280
over here k is the session or ephemeral

67
00:02:29,280 --> 00:02:32,319
key whereas s is the long term secret

68
00:02:32,319 --> 00:02:33,519
key

69
00:02:33,519 --> 00:02:35,519
now our presented message recovery

70
00:02:35,519 --> 00:02:38,319
retrieves the message from which we can

71
00:02:38,319 --> 00:02:41,280
derive the ephemeral key directly

72
00:02:41,280 --> 00:02:42,640
but we will go

73
00:02:42,640 --> 00:02:44,800
one step further by combining it with

74
00:02:44,800 --> 00:02:47,120
the chosen ciphertext attack to derive

75
00:02:47,120 --> 00:02:49,040
the long term secret key

76
00:02:49,040 --> 00:02:52,080
now our attack point in red here is in

77
00:02:52,080 --> 00:02:55,040
the saber pke decryption function line

78
00:02:55,040 --> 00:02:55,840
one

79
00:02:55,840 --> 00:02:57,519
of the

80
00:02:57,519 --> 00:03:01,120
chem the capsulation algorithm

81
00:03:01,360 --> 00:03:04,000
our presented message recovery attack is

82
00:03:04,000 --> 00:03:06,000
a profiling attack

83
00:03:06,000 --> 00:03:08,400
which consists of two stages profiling

84
00:03:08,400 --> 00:03:10,400
an attack

85
00:03:10,400 --> 00:03:12,879
during the profiling stage since we have

86
00:03:12,879 --> 00:03:14,959
the public key of the device under

87
00:03:14,959 --> 00:03:15,840
attack

88
00:03:15,840 --> 00:03:18,000
we can generate cipher ciphertexts that

89
00:03:18,000 --> 00:03:20,000
contain a known message

90
00:03:20,000 --> 00:03:22,400
we then send these to the device and ask

91
00:03:22,400 --> 00:03:23,760
it to decrypt

92
00:03:23,760 --> 00:03:25,519
this is what gives us a set of power

93
00:03:25,519 --> 00:03:28,720
traces with known message bits

94
00:03:28,720 --> 00:03:30,480
now normally

95
00:03:30,480 --> 00:03:32,959
with the known message bits as labels we

96
00:03:32,959 --> 00:03:35,519
can train a neural network to recognize

97
00:03:35,519 --> 00:03:37,120
what the power trace looks like when the

98
00:03:37,120 --> 00:03:39,360
message is a one and when the message is

99
00:03:39,360 --> 00:03:40,480
a zero

100
00:03:40,480 --> 00:03:41,920
easy peasy

101
00:03:41,920 --> 00:03:43,920
but because the data has been randomly

102
00:03:43,920 --> 00:03:46,480
bit flipped due to the random mask what

103
00:03:46,480 --> 00:03:48,159
looks like should be a bit one may

104
00:03:48,159 --> 00:03:50,640
actually encode a bit zero and other

105
00:03:50,640 --> 00:03:53,360
times one may actually mean a one we

106
00:03:53,360 --> 00:03:54,640
just don't know

107
00:03:54,640 --> 00:03:56,879
this is the power of masking

108
00:03:56,879 --> 00:04:00,000
so in previous works during profiling

109
00:04:00,000 --> 00:04:02,159
you would need to explicitly know the

110
00:04:02,159 --> 00:04:04,720
mask that's being used or you disable

111
00:04:04,720 --> 00:04:06,480
the mask altogether

112
00:04:06,480 --> 00:04:08,080
setting it to a constant zero or

113
00:04:08,080 --> 00:04:10,080
something that you know

114
00:04:10,080 --> 00:04:12,319
this way you know what the bit value is

115
00:04:12,319 --> 00:04:14,319
while it's being processed and how the

116
00:04:14,319 --> 00:04:15,920
power trace looks like for this

117
00:04:15,920 --> 00:04:17,759
corresponding bit

118
00:04:17,759 --> 00:04:19,918
now with deep learning on the other hand

119
00:04:19,918 --> 00:04:22,079
from the attacker's point of view

120
00:04:22,079 --> 00:04:25,680
we don't really care what the mask is

121
00:04:25,680 --> 00:04:27,759
we just show the neural network the

122
00:04:27,759 --> 00:04:30,160
entire trace such that it contains both

123
00:04:30,160 --> 00:04:31,440
shares of course

124
00:04:31,440 --> 00:04:32,560
and just

125
00:04:32,560 --> 00:04:34,560
tell it what the original unmasked bit

126
00:04:34,560 --> 00:04:35,840
is supposed to be

127
00:04:35,840 --> 00:04:38,000
and of course we know since this is

128
00:04:38,000 --> 00:04:40,800
chosen cipher text we picked it

129
00:04:40,800 --> 00:04:42,400
we show it to the neural network and

130
00:04:42,400 --> 00:04:45,040
just tell it to figure it out and

131
00:04:45,040 --> 00:04:47,280
believe it or not it sees right through

132
00:04:47,280 --> 00:04:49,360
it it figures out that one portion of

133
00:04:49,360 --> 00:04:51,440
the trace is related to the other and it

134
00:04:51,440 --> 00:04:53,360
can derive the hidden bit value that's

135
00:04:53,360 --> 00:04:54,479
behind it

136
00:04:54,479 --> 00:04:56,240
this is without us ever having to

137
00:04:56,240 --> 00:04:57,919
explicitly tell it

138
00:04:57,919 --> 00:04:59,520
what the mask is even for this

139
00:04:59,520 --> 00:05:02,719
particular execution

140
00:05:03,680 --> 00:05:06,400
and as i had mentioned previous methods

141
00:05:06,400 --> 00:05:08,880
require you to fix or modify the mask in

142
00:05:08,880 --> 00:05:10,479
order to profile

143
00:05:10,479 --> 00:05:12,720
this generally removes the ability to

144
00:05:12,720 --> 00:05:15,280
profile on the device under attack

145
00:05:15,280 --> 00:05:17,360
there are usually measures in place to

146
00:05:17,360 --> 00:05:19,840
prevent somebody from reflashing it with

147
00:05:19,840 --> 00:05:21,840
a program to just read out the key to

148
00:05:21,840 --> 00:05:23,280
the screen with the printf function or

149
00:05:23,280 --> 00:05:24,479
something

150
00:05:24,479 --> 00:05:27,280
refreshing it would erase the key or

151
00:05:27,280 --> 00:05:29,280
otherwise render the secret key storage

152
00:05:29,280 --> 00:05:32,320
inaccessible to the new program

153
00:05:32,320 --> 00:05:34,960
this gives our method an advantage

154
00:05:34,960 --> 00:05:37,440
because we can use traces and train on

155
00:05:37,440 --> 00:05:40,080
the exact device under attack

156
00:05:40,080 --> 00:05:42,400
this largely removes device and process

157
00:05:42,400 --> 00:05:44,560
variations that would come from having

158
00:05:44,560 --> 00:05:49,160
to profile on a cloned device

159
00:05:52,000 --> 00:05:54,000
in previous attacks you would have to

160
00:05:54,000 --> 00:05:57,039
perform the attack stage in three steps

161
00:05:57,039 --> 00:05:58,639
you would perform

162
00:05:58,639 --> 00:06:00,240
first you would perform the recovery of

163
00:06:00,240 --> 00:06:01,520
the mask

164
00:06:01,520 --> 00:06:03,680
in second you would take

165
00:06:03,680 --> 00:06:04,880
you would go and

166
00:06:04,880 --> 00:06:06,560
retrieve the second share so which is

167
00:06:06,560 --> 00:06:09,440
the mask plus secret and finally the

168
00:06:09,440 --> 00:06:10,400
third

169
00:06:10,400 --> 00:06:12,720
that you uncover the secret by combining

170
00:06:12,720 --> 00:06:14,880
both shares this is of course in

171
00:06:14,880 --> 00:06:17,360
contrast to our with hours for which we

172
00:06:17,360 --> 00:06:19,680
just show all the shares at once and the

173
00:06:19,680 --> 00:06:21,680
neural network spits out what it thinks

174
00:06:21,680 --> 00:06:23,440
the bit is going to be

175
00:06:23,440 --> 00:06:25,759
simple

176
00:06:26,720 --> 00:06:29,680
traditionally in side channel analysis

177
00:06:29,680 --> 00:06:32,479
we would rely on the t-test to help us

178
00:06:32,479 --> 00:06:34,319
hone in on the leakage points in the

179
00:06:34,319 --> 00:06:36,080
trace but because this is an

180
00:06:36,080 --> 00:06:37,759
implementation that's protected with

181
00:06:37,759 --> 00:06:41,600
masking we won't find much if anything

182
00:06:41,600 --> 00:06:43,600
that passes the the interesting

183
00:06:43,600 --> 00:06:45,919
statistical threshold

184
00:06:45,919 --> 00:06:48,800
as in previous methods one would just

185
00:06:48,800 --> 00:06:51,039
fix the mask use the t-test to find the

186
00:06:51,039 --> 00:06:53,440
leakage points and you would have

187
00:06:53,440 --> 00:06:55,520
everything bob's your uncle but of

188
00:06:55,520 --> 00:06:56,400
course

189
00:06:56,400 --> 00:06:58,160
we can't do that here

190
00:06:58,160 --> 00:06:59,360
however

191
00:06:59,360 --> 00:07:01,759
if you take a look at the average power

192
00:07:01,759 --> 00:07:04,560
traces a very clean structure starts to

193
00:07:04,560 --> 00:07:06,639
emerge and when you start counting the

194
00:07:06,639 --> 00:07:08,400
peaks and comparing the loop counts to

195
00:07:08,400 --> 00:07:10,400
the algorithm you quickly start to

196
00:07:10,400 --> 00:07:12,560
figure out where you are

197
00:07:12,560 --> 00:07:14,160
on this slide you'll see the beginning

198
00:07:14,160 --> 00:07:16,479
of the decapsulation algorithm the

199
00:07:16,479 --> 00:07:19,520
pseudocode is on the left over here

200
00:07:19,520 --> 00:07:21,919
we can see a few functions the long one

201
00:07:21,919 --> 00:07:24,880
here is poly a2a and following that is

202
00:07:24,880 --> 00:07:26,880
paul 2 message

203
00:07:26,880 --> 00:07:30,400
as you zoom in you can actually see when

204
00:07:30,400 --> 00:07:33,199
the loop and state registers reload and

205
00:07:33,199 --> 00:07:35,759
start processing the 32 byte mask of

206
00:07:35,759 --> 00:07:37,280
paul to message

207
00:07:37,280 --> 00:07:39,360
and indeed if we zoom in further you can

208
00:07:39,360 --> 00:07:41,840
see that there are 32 peaks for each

209
00:07:41,840 --> 00:07:44,960
share and each one represents one bite

210
00:07:44,960 --> 00:07:47,759
uh do keep in mind though that each bite

211
00:07:47,759 --> 00:07:49,919
looks the same to our eyes here only

212
00:07:49,919 --> 00:07:51,759
because it's been averaged the peaks and

213
00:07:51,759 --> 00:07:53,599
valleys for the individual traces are

214
00:07:53,599 --> 00:07:56,479
much more varied

215
00:07:57,599 --> 00:08:00,000
so as i mentioned before paul2 message

216
00:08:00,000 --> 00:08:02,319
was previously known

217
00:08:02,319 --> 00:08:04,960
but for the masking implementation we

218
00:08:04,960 --> 00:08:06,800
stumbled upon a second leakage point

219
00:08:06,800 --> 00:08:08,960
under poly a2a

220
00:08:08,960 --> 00:08:11,360
which is a custom primitive for masking

221
00:08:11,360 --> 00:08:13,120
developed by the authors of this saber

222
00:08:13,120 --> 00:08:14,800
implementation

223
00:08:14,800 --> 00:08:17,360
the trace in front of you here contains

224
00:08:17,360 --> 00:08:21,039
the execution of 256 bits of the message

225
00:08:21,039 --> 00:08:23,199
the leakage of both shares happens side

226
00:08:23,199 --> 00:08:26,319
by side so that for each interval uh

227
00:08:26,319 --> 00:08:28,720
between the spikes contains information

228
00:08:28,720 --> 00:08:31,919
on bit n of both shares

229
00:08:31,919 --> 00:08:34,719
now from the regularity of the bits this

230
00:08:34,719 --> 00:08:36,719
actually gave us an idea to cut across

231
00:08:36,719 --> 00:08:39,839
bits and take their union uh this

232
00:08:39,839 --> 00:08:42,640
actually significantly reduces the trace

233
00:08:42,640 --> 00:08:45,360
acquisition time because from one single

234
00:08:45,360 --> 00:08:47,279
trace containing say poly a to a

235
00:08:47,279 --> 00:08:48,399
function

236
00:08:48,399 --> 00:08:51,279
we would actually get 256 training

237
00:08:51,279 --> 00:08:53,920
intervals to show the neural network

238
00:08:53,920 --> 00:08:55,440
this of course reduces the trace

239
00:08:55,440 --> 00:08:58,480
acquisition time proportionally so if

240
00:08:58,480 --> 00:08:58,740
you

241
00:08:58,740 --> 00:08:59,920
[Music]

242
00:08:59,920 --> 00:09:02,399
say needed a million examples to train

243
00:09:02,399 --> 00:09:04,080
the neural network properly this would

244
00:09:04,080 --> 00:09:08,839
cut it by a factor of 256 times

245
00:09:09,200 --> 00:09:12,080
now for res for the evaluation of our

246
00:09:12,080 --> 00:09:14,160
method we deliberately sourced our

247
00:09:14,160 --> 00:09:16,000
boards from different suppliers to get

248
00:09:16,000 --> 00:09:18,480
an idea of the effect that process

249
00:09:18,480 --> 00:09:20,000
variation has

250
00:09:20,000 --> 00:09:23,040
so d1 and d2 we source from the same

251
00:09:23,040 --> 00:09:25,680
supplier whereas d3 was from a different

252
00:09:25,680 --> 00:09:28,240
supplier if we take a look at the laser

253
00:09:28,240 --> 00:09:31,120
etchings d1 and d2 suggests that they

254
00:09:31,120 --> 00:09:33,920
were manufactured in a factory in china

255
00:09:33,920 --> 00:09:36,720
whereas if we take a look at d3

256
00:09:36,720 --> 00:09:38,480
it was made in the in a factory in

257
00:09:38,480 --> 00:09:40,000
philippines

258
00:09:40,000 --> 00:09:41,839
now in the table here on the very right

259
00:09:41,839 --> 00:09:43,600
column you can see that the average

260
00:09:43,600 --> 00:09:46,000
accuracy does fall off as we get further

261
00:09:46,000 --> 00:09:48,720
away from the profiling device

262
00:09:48,720 --> 00:09:50,640
before i go to the next slide though i

263
00:09:50,640 --> 00:09:51,760
would like to bring your attention to

264
00:09:51,760 --> 00:09:54,080
the fact that for paul to message the

265
00:09:54,080 --> 00:09:57,920
very last bit of bit of every byte so p7

266
00:09:57,920 --> 00:10:00,160
in this column

267
00:10:00,160 --> 00:10:01,760
we found is the most difficult to

268
00:10:01,760 --> 00:10:03,839
retrieve for the neural network and this

269
00:10:03,839 --> 00:10:05,440
pattern actually repeats itself for

270
00:10:05,440 --> 00:10:08,399
every 32 bytes

271
00:10:11,040 --> 00:10:13,600
these are the results for poly8 leakage

272
00:10:13,600 --> 00:10:14,959
point

273
00:10:14,959 --> 00:10:15,920
so

274
00:10:15,920 --> 00:10:18,240
this is the table for the second

275
00:10:18,240 --> 00:10:20,880
previously undocumented leakage point

276
00:10:20,880 --> 00:10:24,240
the overall average is a bit lower at 95

277
00:10:24,240 --> 00:10:27,360
versus the last slide at 97

278
00:10:27,360 --> 00:10:29,279
but what's different

279
00:10:29,279 --> 00:10:30,880
and interesting for this leakage point

280
00:10:30,880 --> 00:10:32,800
is that if we look again at the first

281
00:10:32,800 --> 00:10:33,760
byte

282
00:10:33,760 --> 00:10:36,800
only the first bin so p0

283
00:10:36,800 --> 00:10:37,920
plays

284
00:10:37,920 --> 00:10:39,200
hard to get

285
00:10:39,200 --> 00:10:41,440
there's no major difference in the other

286
00:10:41,440 --> 00:10:42,880
seven bits

287
00:10:42,880 --> 00:10:46,399
this actually holds for all 256 bits

288
00:10:46,399 --> 00:10:48,720
except for the very last one

289
00:10:48,720 --> 00:10:50,160
so

290
00:10:50,160 --> 00:10:54,320
for this leakage point all 256 bits

291
00:10:54,320 --> 00:10:56,640
only the first and the last are a tad

292
00:10:56,640 --> 00:10:58,640
more difficult to retrieve

293
00:10:58,640 --> 00:11:00,560
whereas for the leakage point on the

294
00:11:00,560 --> 00:11:03,279
last slide we get a repeating pattern

295
00:11:03,279 --> 00:11:06,079
of every eighth bit not wanting to

296
00:11:06,079 --> 00:11:07,760
cooperate

297
00:11:07,760 --> 00:11:10,079
but it has higher overall accuracy for

298
00:11:10,079 --> 00:11:11,839
the unafflicted bits

299
00:11:11,839 --> 00:11:13,279
so

300
00:11:13,279 --> 00:11:15,600
of course as you see by now you probably

301
00:11:15,600 --> 00:11:17,680
would be asking what would happen if we

302
00:11:17,680 --> 00:11:20,320
show both points to the neural network

303
00:11:20,320 --> 00:11:23,279
as they are kind of complementary

304
00:11:23,279 --> 00:11:25,200
and indeed this is the case the

305
00:11:25,200 --> 00:11:27,200
combination actually increases accuracy

306
00:11:27,200 --> 00:11:29,040
across the board and we get our best

307
00:11:29,040 --> 00:11:34,199
results at an overall average about 98.6

308
00:11:39,680 --> 00:11:42,560
as mentioned before we will

309
00:11:42,560 --> 00:11:44,079
go one step further and combine the

310
00:11:44,079 --> 00:11:46,399
message recovery attack with a chosen

311
00:11:46,399 --> 00:11:48,480
ciphertext attack to derive the

312
00:11:48,480 --> 00:11:50,639
long-term secret key

313
00:11:50,639 --> 00:11:52,959
the chosen ciphertexts are constructed

314
00:11:52,959 --> 00:11:55,600
so that we can derive information

315
00:11:55,600 --> 00:11:57,600
about the long-term secret key

316
00:11:57,600 --> 00:12:00,720
coefficients from the recovered message

317
00:12:00,720 --> 00:12:02,639
the new secret key recovery approach

318
00:12:02,639 --> 00:12:05,040
which we developed is based on maps from

319
00:12:05,040 --> 00:12:07,040
error correcting codes

320
00:12:07,040 --> 00:12:08,800
that can compensate for some small

321
00:12:08,800 --> 00:12:10,240
amount of errors in the recovered

322
00:12:10,240 --> 00:12:11,440
message

323
00:12:11,440 --> 00:12:14,079
the full details and decoding tables are

324
00:12:14,079 --> 00:12:15,519
in the paper for you to take a closer

325
00:12:15,519 --> 00:12:17,680
look at

326
00:12:17,680 --> 00:12:20,240
but now we will show a quick five-minute

327
00:12:20,240 --> 00:12:22,800
demo of the full process from gathering

328
00:12:22,800 --> 00:12:24,720
traces straight to recovering the

329
00:12:24,720 --> 00:12:27,839
long-term secret key

330
00:12:31,519 --> 00:12:33,680
so what we have here is the chipwhisper

331
00:12:33,680 --> 00:12:35,680
ufo platform

332
00:12:35,680 --> 00:12:39,600
it consists of a modular carrier board

333
00:12:39,600 --> 00:12:41,600
that these blue target boards will plug

334
00:12:41,600 --> 00:12:43,600
into

335
00:12:43,600 --> 00:12:45,839
over here is the chip whisper light and

336
00:12:45,839 --> 00:12:48,160
for our purposes it essentially acts as

337
00:12:48,160 --> 00:12:49,839
a cheap oscilloscope that will help us

338
00:12:49,839 --> 00:12:52,720
record the power fluctuations

339
00:12:52,720 --> 00:12:56,079
in the stm32f4 board as it processes its

340
00:12:56,079 --> 00:12:57,519
data

341
00:12:57,519 --> 00:13:00,000
the board also helps relay communication

342
00:13:00,000 --> 00:13:02,079
between the host computer and the arm

343
00:13:02,079 --> 00:13:04,399
core over usb

344
00:13:04,399 --> 00:13:07,279
for example we can send a ciphertext to

345
00:13:07,279 --> 00:13:08,800
its buffer

346
00:13:08,800 --> 00:13:10,800
and then follow it up with a command to

347
00:13:10,800 --> 00:13:12,639
start deciphering it all while we

348
00:13:12,639 --> 00:13:14,720
carefully watch from the chip whisper

349
00:13:14,720 --> 00:13:16,160
the power fluctuations that are

350
00:13:16,160 --> 00:13:19,680
occurring over the shunt resistor

351
00:13:19,680 --> 00:13:21,600
now we have also sourced three target

352
00:13:21,600 --> 00:13:23,279
boards that have the same model chip

353
00:13:23,279 --> 00:13:24,560
number on them

354
00:13:24,560 --> 00:13:25,440
uh

355
00:13:25,440 --> 00:13:26,320
so

356
00:13:26,320 --> 00:13:29,120
b1 and b2 uh which

357
00:13:29,120 --> 00:13:31,680
in the paper is d1 and d2 and d3

358
00:13:31,680 --> 00:13:33,120
respectively

359
00:13:33,120 --> 00:13:35,360
these two we sourced from the same

360
00:13:35,360 --> 00:13:38,079
supplier at the same time whereas b3

361
00:13:38,079 --> 00:13:39,120
over here

362
00:13:39,120 --> 00:13:40,880
was sourced from a different one

363
00:13:40,880 --> 00:13:42,959
and if we take a look at the laser

364
00:13:42,959 --> 00:13:45,199
etchings on these chips

365
00:13:45,199 --> 00:13:47,440
there is a closer picture of these in

366
00:13:47,440 --> 00:13:48,959
the paper

367
00:13:48,959 --> 00:13:51,120
b3 or d3

368
00:13:51,120 --> 00:13:52,720
has very different markings from the

369
00:13:52,720 --> 00:13:55,199
other ones and a quick googling seems to

370
00:13:55,199 --> 00:13:56,880
suggest that it actually came from a

371
00:13:56,880 --> 00:13:58,720
different manufacturer

372
00:13:58,720 --> 00:14:02,079
a different factory

373
00:14:02,079 --> 00:14:04,560
so we can begin the demo now

374
00:14:04,560 --> 00:14:06,719
so

375
00:14:07,600 --> 00:14:10,079
so first thing we can do is we can ask

376
00:14:10,079 --> 00:14:14,320
the arm core to generate us a key pair

377
00:14:14,320 --> 00:14:17,600
now these are random and as you can see

378
00:14:17,600 --> 00:14:19,040
every time we run it it will be a little

379
00:14:19,040 --> 00:14:21,440
bit different

380
00:14:21,440 --> 00:14:23,519
and uh what we have done is actually we

381
00:14:23,519 --> 00:14:25,440
have asked the arm

382
00:14:25,440 --> 00:14:28,720
microcontroller to send a copy of the

383
00:14:28,720 --> 00:14:31,360
secret key to our computer just so that

384
00:14:31,360 --> 00:14:32,880
we can follow along now normally we

385
00:14:32,880 --> 00:14:34,800
wouldn't have to do this

386
00:14:34,800 --> 00:14:38,000
but it just makes the demo easier

387
00:14:38,000 --> 00:14:39,120
so

388
00:14:39,120 --> 00:14:40,480
now that we have this

389
00:14:40,480 --> 00:14:44,800
we can also generate the ciphertexts

390
00:14:44,800 --> 00:14:47,360
we will choose the ecc

391
00:14:47,360 --> 00:14:49,680
so what this is is

392
00:14:49,680 --> 00:14:52,079
it has

393
00:14:53,199 --> 00:14:56,079
it has generated these these 24

394
00:14:56,079 --> 00:14:57,519
ciphertexts

395
00:14:57,519 --> 00:14:59,600
and when we do

396
00:14:59,600 --> 00:15:00,560
get

397
00:15:00,560 --> 00:15:02,079
traces

398
00:15:02,079 --> 00:15:03,519
uh hcc

399
00:15:03,519 --> 00:15:04,639
and one

400
00:15:04,639 --> 00:15:06,079
so what's happening in the background

401
00:15:06,079 --> 00:15:07,360
right now is that it's taking the

402
00:15:07,360 --> 00:15:09,839
ciphertexts that we have just generated

403
00:15:09,839 --> 00:15:12,079
sending it to the arm core asking it to

404
00:15:12,079 --> 00:15:13,279
decrypt it

405
00:15:13,279 --> 00:15:15,680
and while it's decrypting the chip

406
00:15:15,680 --> 00:15:18,240
whisperer is carefully watching the

407
00:15:18,240 --> 00:15:20,800
power fluctuations in the voltage rail

408
00:15:20,800 --> 00:15:23,040
and recording these in an umpire which

409
00:15:23,040 --> 00:15:25,519
then later on we can use to perform the

410
00:15:25,519 --> 00:15:26,959
attack

411
00:15:26,959 --> 00:15:29,600
this process takes about a minute so we

412
00:15:29,600 --> 00:15:32,920
can give it

413
00:16:05,120 --> 00:16:07,120
so that's actually taken exactly under a

414
00:16:07,120 --> 00:16:08,399
minute now

415
00:16:08,399 --> 00:16:09,839
now that we have the traces which you

416
00:16:09,839 --> 00:16:11,360
can see in here

417
00:16:11,360 --> 00:16:14,000
i'll show you here

418
00:16:17,759 --> 00:16:20,720
they're just in the numpy array

419
00:16:20,720 --> 00:16:23,199
now we can use these traces

420
00:16:23,199 --> 00:16:26,320
along with these here so these four um

421
00:16:26,320 --> 00:16:27,600
these four here

422
00:16:27,600 --> 00:16:30,320
are our neural network models they've

423
00:16:30,320 --> 00:16:32,160
already been trained so what we can do

424
00:16:32,160 --> 00:16:33,600
is show these traces to our neural

425
00:16:33,600 --> 00:16:36,600
network

426
00:16:41,279 --> 00:16:43,440
uh please excuse the warnings i've

427
00:16:43,440 --> 00:16:44,720
deliberately removed one of the

428
00:16:44,720 --> 00:16:46,959
libraries to prevent the computer from

429
00:16:46,959 --> 00:16:49,360
using gpu acceleration this is just to

430
00:16:49,360 --> 00:16:51,199
show that this is a very lightweight

431
00:16:51,199 --> 00:16:53,199
implementation that the cpu can easily

432
00:16:53,199 --> 00:16:55,359
do

433
00:16:57,600 --> 00:16:58,560
so

434
00:16:58,560 --> 00:17:00,639
what do we got here so here are the

435
00:17:00,639 --> 00:17:02,720
recover traces so these

436
00:17:02,720 --> 00:17:04,559
traces here are sorry these messages

437
00:17:04,559 --> 00:17:07,919
here are what the neural network thinks

438
00:17:07,919 --> 00:17:10,640
the traces represent now because we have

439
00:17:10,640 --> 00:17:12,640
the private key we can actually do the

440
00:17:12,640 --> 00:17:14,799
true decryption of the

441
00:17:14,799 --> 00:17:16,720
ciphertexts and

442
00:17:16,720 --> 00:17:18,799
compare these against the ones that we

443
00:17:18,799 --> 00:17:20,559
think they are and as you can see there

444
00:17:20,559 --> 00:17:22,799
are a few errors in here

445
00:17:22,799 --> 00:17:25,599
and this is why we have ecc so as you

446
00:17:25,599 --> 00:17:27,919
can see we can still do the key recovery

447
00:17:27,919 --> 00:17:31,720
and it should work

448
00:17:33,440 --> 00:17:35,360
oh it didn't work

449
00:17:35,360 --> 00:17:38,080
without the one

450
00:17:40,559 --> 00:17:42,400
all right so

451
00:17:42,400 --> 00:17:44,840
this is what we

452
00:17:44,840 --> 00:17:46,799
essentially figured out what this

453
00:17:46,799 --> 00:17:48,799
supposedly the key is now according to

454
00:17:48,799 --> 00:17:50,559
this there's actually one question mark

455
00:17:50,559 --> 00:17:53,039
so the ecc has identified that there is

456
00:17:53,039 --> 00:17:54,880
something that doesn't quite

457
00:17:54,880 --> 00:17:57,600
uh belong

458
00:17:58,840 --> 00:18:01,200
uh it is

459
00:18:01,200 --> 00:18:04,320
3 coefficient 56 so it's approximately

460
00:18:04,320 --> 00:18:06,000
here yeah here it is so this question

461
00:18:06,000 --> 00:18:08,160
mark shows that uh

462
00:18:08,160 --> 00:18:10,320
we suspect all these other ones are

463
00:18:10,320 --> 00:18:11,679
correct

464
00:18:11,679 --> 00:18:14,240
but this one seems a bit fishy and as

465
00:18:14,240 --> 00:18:16,160
you can see here

466
00:18:16,160 --> 00:18:17,919
the true key is supposed to be a zero

467
00:18:17,919 --> 00:18:19,440
but of course the algorithm doesn't know

468
00:18:19,440 --> 00:18:20,240
this

469
00:18:20,240 --> 00:18:22,480
and what we can do is all we have to do

470
00:18:22,480 --> 00:18:24,960
is just enumerate this and

471
00:18:24,960 --> 00:18:27,039
it has figured out the key and of course

472
00:18:27,039 --> 00:18:29,919
the key enumeration is

473
00:18:29,919 --> 00:18:32,320
it works exactly how you think it works

474
00:18:32,320 --> 00:18:34,080
because we have the

475
00:18:34,080 --> 00:18:37,039
the public key we can encrypt a known

476
00:18:37,039 --> 00:18:40,320
pattern and then using our guestimated

477
00:18:40,320 --> 00:18:42,000
key we can decrypt it and see if it

478
00:18:42,000 --> 00:18:43,679
matches our known pattern and then we

479
00:18:43,679 --> 00:18:45,919
repeat for all the possible coefficients

480
00:18:45,919 --> 00:18:47,919
in this case it says coefficient

481
00:18:47,919 --> 00:18:50,880
568 is zero which is exactly what we

482
00:18:50,880 --> 00:18:52,640
expect as this

483
00:18:52,640 --> 00:18:56,919
portion here is supposed to be a zero

484
00:18:58,400 --> 00:19:00,640
and welcome back

485
00:19:00,640 --> 00:19:02,480
so to summarize

486
00:19:02,480 --> 00:19:04,000
we've basically seen that the neural

487
00:19:04,000 --> 00:19:05,840
network is able to see through the

488
00:19:05,840 --> 00:19:08,240
masking that during training it figures

489
00:19:08,240 --> 00:19:10,240
out that the shares are related to each

490
00:19:10,240 --> 00:19:12,960
other and it can derive the correct bit

491
00:19:12,960 --> 00:19:14,799
we then combine this with a secret key

492
00:19:14,799 --> 00:19:17,440
recovery based on maps from ecc which

493
00:19:17,440 --> 00:19:19,200
ultimately led us to successfully

494
00:19:19,200 --> 00:19:21,200
recover the long-term seeker key from a

495
00:19:21,200 --> 00:19:24,480
first order masked saber implementation

496
00:19:24,480 --> 00:19:27,120
our future work includes evaluating

497
00:19:27,120 --> 00:19:30,559
higher order mass implementations

498
00:19:30,559 --> 00:19:33,600
and we actually we very recently just

499
00:19:33,600 --> 00:19:36,000
showed that first order masking combined

500
00:19:36,000 --> 00:19:38,240
with the shuffling countermeasure can

501
00:19:38,240 --> 00:19:40,880
also be broken a preprint can already be

502
00:19:40,880 --> 00:19:42,480
found in the archive with the final

503
00:19:42,480 --> 00:19:44,000
version being published later in

504
00:19:44,000 --> 00:19:45,760
november this year

505
00:19:45,760 --> 00:19:48,240
our longer term goal is to design

506
00:19:48,240 --> 00:19:52,919
counter measures against our own attack

507
00:20:07,919 --> 00:20:10,000
you

