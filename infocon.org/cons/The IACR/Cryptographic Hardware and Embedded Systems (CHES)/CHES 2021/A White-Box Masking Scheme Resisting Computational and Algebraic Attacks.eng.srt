1
00:00:00,240 --> 00:00:02,560
hello everyone my name is okay and today

2
00:00:02,560 --> 00:00:04,240
i will talk about our joint work with

3
00:00:04,240 --> 00:00:06,480
thomas eisenberg and massey liskewicz a

4
00:00:06,480 --> 00:00:08,320
white box masking scheme resistant

5
00:00:08,320 --> 00:00:10,559
computation and algebraic attacks

6
00:00:10,559 --> 00:00:12,559
so before going into details i would

7
00:00:12,559 --> 00:00:14,960
like to give a small history of palantry

8
00:00:14,960 --> 00:00:17,840
the seeing stones by j.r.r tolkien so

9
00:00:17,840 --> 00:00:20,400
these magical stones are created

10
00:00:20,400 --> 00:00:22,160
for many purposes but the simplest

11
00:00:22,160 --> 00:00:24,000
intention is the communication in middle

12
00:00:24,000 --> 00:00:24,960
earth

13
00:00:24,960 --> 00:00:27,039
however these stones are dangerous as

14
00:00:27,039 --> 00:00:28,800
they are possessed by sauron the dark

15
00:00:28,800 --> 00:00:31,439
lord so one of the most important victim

16
00:00:31,439 --> 00:00:34,880
is saruman dwight he was corrupted while

17
00:00:34,880 --> 00:00:37,280
using or trying to use a device by the

18
00:00:37,280 --> 00:00:39,760
whispers of the real owner of palantri

19
00:00:39,760 --> 00:00:41,280
to darklord

20
00:00:41,280 --> 00:00:44,879
so now sauron owns the device and can

21
00:00:44,879 --> 00:00:46,000
read

22
00:00:46,000 --> 00:00:48,239
the user's minds and can see memories

23
00:00:48,239 --> 00:00:50,399
even if the deepest secrets are not

24
00:00:50,399 --> 00:00:52,559
secure anymore so

25
00:00:52,559 --> 00:00:55,199
what we can see from from here is saron

26
00:00:55,199 --> 00:00:58,079
as the adversary in this scenario on the

27
00:00:58,079 --> 00:01:00,640
device can inspect your memories and can

28
00:01:00,640 --> 00:01:03,840
manipulate your minds which is whispers

29
00:01:03,840 --> 00:01:06,159
so now let us consider

30
00:01:06,159 --> 00:01:08,320
uh this example in our setting as

31
00:01:08,320 --> 00:01:10,799
adversary we have the same purpose as

32
00:01:10,799 --> 00:01:13,520
sauron revealing the secret revealing

33
00:01:13,520 --> 00:01:15,840
the sensitive information

34
00:01:15,840 --> 00:01:18,479
when we compare the capabilities of of

35
00:01:18,479 --> 00:01:20,720
both two cases we see a similar

36
00:01:20,720 --> 00:01:23,360
structure so while sauron can inject

37
00:01:23,360 --> 00:01:26,080
thoughts by whispering and see your mind

38
00:01:26,080 --> 00:01:28,320
our adversary can inject faults and can

39
00:01:28,320 --> 00:01:29,360
whisper

40
00:01:29,360 --> 00:01:30,640
can inspect

41
00:01:30,640 --> 00:01:31,920
memory

42
00:01:31,920 --> 00:01:34,640
okay what can we do then uh the only

43
00:01:34,640 --> 00:01:36,240
thing that we can do actually

44
00:01:36,240 --> 00:01:38,240
are our stack strengthening the our

45
00:01:38,240 --> 00:01:40,479
implementation and now we would like to

46
00:01:40,479 --> 00:01:42,320
quote this beautiful line from earlier

47
00:01:42,320 --> 00:01:44,560
works when the attacker has internal

48
00:01:44,560 --> 00:01:46,320
information about a cryptographic

49
00:01:46,320 --> 00:01:47,840
implementation the choice of

50
00:01:47,840 --> 00:01:50,079
implementation is the sole remaining

51
00:01:50,079 --> 00:01:52,479
line of defense and this is this is why

52
00:01:52,479 --> 00:01:55,119
we need white box cryptography

53
00:01:55,119 --> 00:01:57,759
so this model is is used to protect

54
00:01:57,759 --> 00:01:58,799
service

55
00:01:58,799 --> 00:02:01,040
secrets purely in software

56
00:02:01,040 --> 00:02:02,560
where we can actually think about the

57
00:02:02,560 --> 00:02:04,320
environment as hostile

58
00:02:04,320 --> 00:02:06,880
and one of the examples is is one one of

59
00:02:06,880 --> 00:02:09,119
the rising services today the streaming

60
00:02:09,119 --> 00:02:12,080
services this can be music your gaming

61
00:02:12,080 --> 00:02:14,480
or or or video

62
00:02:14,480 --> 00:02:17,200
so also mobile payment systems can be

63
00:02:17,200 --> 00:02:20,480
seen as an example however today all the

64
00:02:20,480 --> 00:02:22,720
um old academic proposal has been

65
00:02:22,720 --> 00:02:24,800
practically broken

66
00:02:24,800 --> 00:02:26,879
so in this work we tackle this problem

67
00:02:26,879 --> 00:02:28,800
and propose the first combined masking

68
00:02:28,800 --> 00:02:31,040
scheme that can resist state of art

69
00:02:31,040 --> 00:02:32,959
white box attacks combination and

70
00:02:32,959 --> 00:02:34,720
algebraic attacks which we give the

71
00:02:34,720 --> 00:02:36,959
details in the following slides

72
00:02:36,959 --> 00:02:39,200
so we analyze two security notions in

73
00:02:39,200 --> 00:02:41,440
cryptography which in which we show that

74
00:02:41,440 --> 00:02:43,440
they're actually incomparable the first

75
00:02:43,440 --> 00:02:44,879
one is probing security against

76
00:02:44,879 --> 00:02:46,400
competition attacks and prediction

77
00:02:46,400 --> 00:02:49,120
security against algebraic attacks

78
00:02:49,120 --> 00:02:50,800
we give concrete constructions for

79
00:02:50,800 --> 00:02:52,720
arbitrary orders of computational

80
00:02:52,720 --> 00:02:54,560
security and

81
00:02:54,560 --> 00:02:56,400
firsthand secure or second order

82
00:02:56,400 --> 00:02:58,879
prediction security moreover we prove

83
00:02:58,879 --> 00:03:03,200
this security of this this constructions

84
00:03:03,280 --> 00:03:07,360
to um to give this uh proofs we need a a

85
00:03:07,360 --> 00:03:09,280
we need to provide a novel security

86
00:03:09,280 --> 00:03:11,920
definition and the novel composibility

87
00:03:11,920 --> 00:03:16,480
proof for prediction security and and um

88
00:03:16,480 --> 00:03:18,560
and which we extend actually from from

89
00:03:18,560 --> 00:03:20,959
the previous work moreover we supported

90
00:03:20,959 --> 00:03:22,959
our results with the with the with the

91
00:03:22,959 --> 00:03:25,120
verification tool by bureaucrato which

92
00:03:25,120 --> 00:03:27,680
is uh for for for prediction security

93
00:03:27,680 --> 00:03:30,400
and mask verif for probing security and

94
00:03:30,400 --> 00:03:32,480
finally we provide a proof of concept

95
00:03:32,480 --> 00:03:34,799
aes implementation to analyze the

96
00:03:34,799 --> 00:03:37,120
overhead and security features of our

97
00:03:37,120 --> 00:03:38,480
design

98
00:03:38,480 --> 00:03:40,879
so let's deep dive into the into into

99
00:03:40,879 --> 00:03:43,760
state of our attacks on whitebox systems

100
00:03:43,760 --> 00:03:46,080
um the first attack is based is based on

101
00:03:46,080 --> 00:03:47,760
a well-known physical attacks on

102
00:03:47,760 --> 00:03:49,760
embedded devices as you know the

103
00:03:49,760 --> 00:03:51,120
embedded devices that run a

104
00:03:51,120 --> 00:03:53,120
cryptographic algorithm are vulnerable

105
00:03:53,120 --> 00:03:55,519
to physical attacks and another way an

106
00:03:55,519 --> 00:03:58,000
adversary can use such an information

107
00:03:58,000 --> 00:04:00,959
such as power timing or use an active

108
00:04:00,959 --> 00:04:03,519
attack to implement a fault injection

109
00:04:03,519 --> 00:04:05,360
in a very basic scenario the secret

110
00:04:05,360 --> 00:04:07,120
value can be revealed using a

111
00:04:07,120 --> 00:04:09,120
differential power analysis

112
00:04:09,120 --> 00:04:11,599
and this idea is later applied to

113
00:04:11,599 --> 00:04:14,239
whitebox system in 2016.

114
00:04:14,239 --> 00:04:17,120
so the idea actually the same um the

115
00:04:17,120 --> 00:04:19,279
such general analysis

116
00:04:19,279 --> 00:04:21,120
the idea is actually the same as as the

117
00:04:21,120 --> 00:04:23,280
such analysis and the only difference is

118
00:04:23,280 --> 00:04:25,919
actually the source of traces

119
00:04:25,919 --> 00:04:27,600
in this version an adversary can

120
00:04:27,600 --> 00:04:29,919
simulate the power traces by softer

121
00:04:29,919 --> 00:04:32,720
execution traces so these can be memory

122
00:04:32,720 --> 00:04:35,440
accesses intermediate values or written

123
00:04:35,440 --> 00:04:37,040
or red values

124
00:04:37,040 --> 00:04:38,800
so these attacks can be found in github

125
00:04:38,800 --> 00:04:40,639
page such in marvels and you can

126
00:04:40,639 --> 00:04:43,280
reproduce or attack these attacks on on

127
00:04:43,280 --> 00:04:45,199
nearly all white box system in the

128
00:04:45,199 --> 00:04:47,919
literature and this actually shows us

129
00:04:47,919 --> 00:04:51,360
how how impactful these attacks are

130
00:04:51,360 --> 00:04:52,479
and

131
00:04:52,479 --> 00:04:53,440
of course

132
00:04:53,440 --> 00:04:54,160
as

133
00:04:54,160 --> 00:04:56,479
a natural approach we actually trying to

134
00:04:56,479 --> 00:04:58,560
find the contract or how to how to

135
00:04:58,560 --> 00:05:00,639
contract these attacks and what we can

136
00:05:00,639 --> 00:05:04,000
do is to take a look at

137
00:05:04,000 --> 00:05:05,520
take a look at the

138
00:05:05,520 --> 00:05:07,919
back at the good good old masking so

139
00:05:07,919 --> 00:05:10,240
let's recap the boolean masking here so

140
00:05:10,240 --> 00:05:13,280
here you can see we have x0 until x1 are

141
00:05:13,280 --> 00:05:16,000
randomly selected and the final share is

142
00:05:16,000 --> 00:05:17,039
actually

143
00:05:17,039 --> 00:05:18,639
represented as in this as in this

144
00:05:18,639 --> 00:05:20,560
equation you can see in here

145
00:05:20,560 --> 00:05:23,280
and and and and finally we denote this

146
00:05:23,280 --> 00:05:26,000
secret sharing by uh with with n

147
00:05:26,000 --> 00:05:28,880
and and plus one variables and the main

148
00:05:28,880 --> 00:05:32,000
ideas is actually simple as you know the

149
00:05:32,000 --> 00:05:33,120
the

150
00:05:33,120 --> 00:05:35,840
the every n-tuple is indeed independent

151
00:05:35,840 --> 00:05:37,280
of the secret

152
00:05:37,280 --> 00:05:39,919
so this is the main idea of the the side

153
00:05:39,919 --> 00:05:42,400
the the countermeasures of against such

154
00:05:42,400 --> 00:05:43,600
analysis

155
00:05:43,600 --> 00:05:46,479
however we cannot just rely on masking

156
00:05:46,479 --> 00:05:48,720
because the strength of the masking is

157
00:05:48,720 --> 00:05:50,479
actually related with the noise within

158
00:05:50,479 --> 00:05:52,880
the implementation and a differential

159
00:05:52,880 --> 00:05:53,600
and

160
00:05:53,600 --> 00:05:56,560
a dc adversary can produce noise-free

161
00:05:56,560 --> 00:05:58,639
traces

162
00:05:58,639 --> 00:06:00,479
and of course that's why we need to we

163
00:06:00,479 --> 00:06:03,280
need to do we need some more additional

164
00:06:03,280 --> 00:06:05,919
noise accelerations sources such as

165
00:06:05,919 --> 00:06:08,240
shuffling or control flow of skeleton

166
00:06:08,240 --> 00:06:10,639
these methods are introduced to um to

167
00:06:10,639 --> 00:06:13,360
increase the noise in in a masked white

168
00:06:13,360 --> 00:06:15,039
box implantation

169
00:06:15,039 --> 00:06:15,759
so

170
00:06:15,759 --> 00:06:17,759
now let us take a look to the algebraic

171
00:06:17,759 --> 00:06:18,639
attacks

172
00:06:18,639 --> 00:06:20,560
which is another hit for the masking on

173
00:06:20,560 --> 00:06:22,319
white box systems

174
00:06:22,319 --> 00:06:24,000
so this is introduced by two different

175
00:06:24,000 --> 00:06:26,560
teams against uh famous other ink

176
00:06:26,560 --> 00:06:28,720
pointers the strongest design in white

177
00:06:28,720 --> 00:06:31,280
white box context in 2017

178
00:06:31,280 --> 00:06:32,639
so the idea is

179
00:06:32,639 --> 00:06:34,800
is is to third first finding a window

180
00:06:34,800 --> 00:06:36,800
that contains uh the secret sharing

181
00:06:36,800 --> 00:06:38,639
corresponding to a value that can be

182
00:06:38,639 --> 00:06:39,759
predicted

183
00:06:39,759 --> 00:06:42,080
then the question is to find finding a

184
00:06:42,080 --> 00:06:44,720
linear combination of of the nodes that

185
00:06:44,720 --> 00:06:46,880
gives you this predictable value

186
00:06:46,880 --> 00:06:48,479
and this linear combination

187
00:06:48,479 --> 00:06:50,720
is actually reveals the sensitive value

188
00:06:50,720 --> 00:06:52,720
of course if we increase the order of

189
00:06:52,720 --> 00:06:54,400
these combinations for example if we

190
00:06:54,400 --> 00:06:56,880
look for quadratic combinations of of

191
00:06:56,880 --> 00:06:58,080
your nodes

192
00:06:58,080 --> 00:06:59,759
this will result in a higher order

193
00:06:59,759 --> 00:07:02,160
algebraic attacks

194
00:07:02,160 --> 00:07:03,280
okay

195
00:07:03,280 --> 00:07:04,880
while we are thinking about how can

196
00:07:04,880 --> 00:07:06,720
implement masking on white box systems

197
00:07:06,720 --> 00:07:08,880
the algebraic attacks actually break are

198
00:07:08,880 --> 00:07:10,960
our every hope as you can see from the

199
00:07:10,960 --> 00:07:12,639
previous slide

200
00:07:12,639 --> 00:07:14,240
we don't need to consider the masking

201
00:07:14,240 --> 00:07:17,120
order the attack works on every

202
00:07:17,120 --> 00:07:19,120
every order as long as the masking is

203
00:07:19,120 --> 00:07:20,160
linear

204
00:07:20,160 --> 00:07:21,199
therefore

205
00:07:21,199 --> 00:07:23,440
the boolean masking no matter what the

206
00:07:23,440 --> 00:07:26,080
order is is indeed vulnerable to first

207
00:07:26,080 --> 00:07:29,199
order algebraic attacks

208
00:07:29,440 --> 00:07:30,479
so

209
00:07:30,479 --> 00:07:33,039
uh we have seen two main attacks and now

210
00:07:33,039 --> 00:07:34,960
let's take a look how can we define

211
00:07:34,960 --> 00:07:37,199
security security against these attacks

212
00:07:37,199 --> 00:07:38,800
which key which actually gives us the

213
00:07:38,800 --> 00:07:41,120
the foundations of our design

214
00:07:41,120 --> 00:07:42,080
so

215
00:07:42,080 --> 00:07:43,520
let's start with the probing security

216
00:07:43,520 --> 00:07:44,960
the easy one

217
00:07:44,960 --> 00:07:46,879
this is a well-known model introduced by

218
00:07:46,879 --> 00:07:49,680
ishaito very briefly it implies that the

219
00:07:49,680 --> 00:07:51,599
adversary obtains t intermediate

220
00:07:51,599 --> 00:07:54,720
variables per execution where t t is is

221
00:07:54,720 --> 00:07:57,199
a fixed integer and our goal is to prove

222
00:07:57,199 --> 00:07:59,919
that every set of t intimate variable is

223
00:07:59,919 --> 00:08:03,120
independent of the secret

224
00:08:03,120 --> 00:08:04,639
and the second notion is is against

225
00:08:04,639 --> 00:08:06,319
algebraic attacks it's a quite new

226
00:08:06,319 --> 00:08:09,039
notion and in this case adversary can

227
00:08:09,039 --> 00:08:11,360
obtain all internet variables but can

228
00:08:11,360 --> 00:08:13,680
only use a lead order combination to

229
00:08:13,680 --> 00:08:15,919
combine them so if you think about if

230
00:08:15,919 --> 00:08:18,080
you think about our previous example in

231
00:08:18,080 --> 00:08:20,479
the in the against the other other

232
00:08:20,479 --> 00:08:22,479
pointers what we actually do looking

233
00:08:22,479 --> 00:08:24,240
into the linear combination so that

234
00:08:24,240 --> 00:08:27,520
means our order is order is first order

235
00:08:27,520 --> 00:08:29,039
combination which is which is linear

236
00:08:29,039 --> 00:08:31,120
combination and therefore that's that's

237
00:08:31,120 --> 00:08:32,958
why that that that's why the boolean

238
00:08:32,958 --> 00:08:34,719
masking is actually vulnerable to first

239
00:08:34,719 --> 00:08:36,719
order objective attacks

240
00:08:36,719 --> 00:08:39,200
and here against uh for our security

241
00:08:39,200 --> 00:08:41,760
notion our goal is to show that

242
00:08:41,760 --> 00:08:43,679
the probability of distinguishing two

243
00:08:43,679 --> 00:08:46,880
sets of plaintexts by looking at the

244
00:08:46,880 --> 00:08:48,720
lead order combinations

245
00:08:48,720 --> 00:08:50,080
of the circuit notes should be

246
00:08:50,080 --> 00:08:52,640
negligible

247
00:08:53,680 --> 00:08:56,320
so this is an important notion important

248
00:08:56,320 --> 00:08:58,240
notion for us first of all

249
00:08:58,240 --> 00:09:00,880
um it is seen in the previous slides it

250
00:09:00,880 --> 00:09:03,040
it's it's quite new like 23 years old

251
00:09:03,040 --> 00:09:05,360
and it provides security against a very

252
00:09:05,360 --> 00:09:07,360
powerful trade on whiteboard design and

253
00:09:07,360 --> 00:09:09,200
maybe this this might be a keystone for

254
00:09:09,200 --> 00:09:10,640
the next generation generation of

255
00:09:10,640 --> 00:09:13,040
masking therefore we would like to have

256
00:09:13,040 --> 00:09:15,600
a closer look at this model

257
00:09:15,600 --> 00:09:16,560
so

258
00:09:16,560 --> 00:09:18,320
as we described earlier

259
00:09:18,320 --> 00:09:19,839
this model

260
00:09:19,839 --> 00:09:22,720
analyzed the behavior of a function fc

261
00:09:22,720 --> 00:09:24,240
that means

262
00:09:24,240 --> 00:09:26,399
all the d order combinations of the

263
00:09:26,399 --> 00:09:28,240
circuit not

264
00:09:28,240 --> 00:09:30,800
circuit nodes um

265
00:09:30,800 --> 00:09:32,800
from this highlighted area and this area

266
00:09:32,800 --> 00:09:34,320
is actually gives us

267
00:09:34,320 --> 00:09:38,240
a stag and if fd2c means that

268
00:09:38,240 --> 00:09:40,720
we looking to do every deed order

269
00:09:40,720 --> 00:09:43,279
combinations of of the nodes as you can

270
00:09:43,279 --> 00:09:45,360
see in this slide so if if the equals

271
00:09:45,360 --> 00:09:47,360
one that means we only look into linear

272
00:09:47,360 --> 00:09:48,560
combinations

273
00:09:48,560 --> 00:09:50,640
or of these nodes if the equals two we

274
00:09:50,640 --> 00:09:52,640
looking at the quantity combinations we

275
00:09:52,640 --> 00:09:55,440
can just multiply two nodes and add some

276
00:09:55,440 --> 00:09:56,640
some some so

277
00:09:56,640 --> 00:09:58,959
at the rest of the shares so

278
00:09:58,959 --> 00:10:00,959
that's the main idea um now let's

279
00:10:00,959 --> 00:10:03,760
consider two inputs x and x prime

280
00:10:03,760 --> 00:10:05,680
and the main idea is is to finding a

281
00:10:05,680 --> 00:10:08,560
function from f f d to the c

282
00:10:08,560 --> 00:10:10,399
such that this function

283
00:10:10,399 --> 00:10:13,839
is constant or high bias when the input

284
00:10:13,839 --> 00:10:16,160
input for the input x and vice versa for

285
00:10:16,160 --> 00:10:20,079
the for the for the x prime so

286
00:10:20,079 --> 00:10:23,279
let's let us let us recap recap it again

287
00:10:23,279 --> 00:10:25,760
we would like to find the function such

288
00:10:25,760 --> 00:10:28,640
that um in a very basic scenario for an

289
00:10:28,640 --> 00:10:29,680
input x

290
00:10:29,680 --> 00:10:32,560
this function should be constant so

291
00:10:32,560 --> 00:10:33,839
um

292
00:10:33,839 --> 00:10:35,600
so this is this is our this is our

293
00:10:35,600 --> 00:10:37,360
encoding function and this is our

294
00:10:37,360 --> 00:10:39,760
circuit function and

295
00:10:39,760 --> 00:10:41,920
when we think about this this circuit is

296
00:10:41,920 --> 00:10:44,000
a combination of of our encoding which

297
00:10:44,000 --> 00:10:45,760
is a you can think about the secret

298
00:10:45,760 --> 00:10:47,680
sharing function

299
00:10:47,680 --> 00:10:49,519
this should be

300
00:10:49,519 --> 00:10:51,600
a constant function

301
00:10:51,600 --> 00:10:52,640
um so

302
00:10:52,640 --> 00:10:54,720
if if an adversary cannot find such a

303
00:10:54,720 --> 00:10:57,120
function that means that the prediction

304
00:10:57,120 --> 00:10:58,399
security

305
00:10:58,399 --> 00:11:00,959
i mean the main idea is is that so the

306
00:11:00,959 --> 00:11:03,040
the prediction circuit requires every

307
00:11:03,040 --> 00:11:04,720
function from your set

308
00:11:04,720 --> 00:11:08,160
should have love bias

309
00:11:08,480 --> 00:11:10,800
although uh one of the notions indeed

310
00:11:10,800 --> 00:11:12,839
covers the other they are actually

311
00:11:12,839 --> 00:11:15,440
incomparable let's take a look at this

312
00:11:15,440 --> 00:11:17,040
the first example we have the boolean

313
00:11:17,040 --> 00:11:19,200
masking example here

314
00:11:19,200 --> 00:11:20,720
as we discussed in the previous slides

315
00:11:20,720 --> 00:11:22,720
we know that an end order boolean

316
00:11:22,720 --> 00:11:23,839
function

317
00:11:23,839 --> 00:11:25,920
is actually

318
00:11:25,920 --> 00:11:28,000
vulnerable to vulnerable algebraic

319
00:11:28,000 --> 00:11:29,839
attacks and

320
00:11:29,839 --> 00:11:31,120
we know that it's actually secure

321
00:11:31,120 --> 00:11:33,760
against probing attacks if it's

322
00:11:33,760 --> 00:11:36,240
applied correctly

323
00:11:36,240 --> 00:11:38,399
now let's take a look at them like a

324
00:11:38,399 --> 00:11:40,000
look at the

325
00:11:40,000 --> 00:11:42,800
minimalistic quadratic masking by

326
00:11:42,800 --> 00:11:44,480
biberico photo

327
00:11:44,480 --> 00:11:46,959
so here you can see the decoding uh

328
00:11:46,959 --> 00:11:48,640
function of the scheme is as in this

329
00:11:48,640 --> 00:11:49,440
slide

330
00:11:49,440 --> 00:11:50,800
here

331
00:11:50,800 --> 00:11:51,680
and

332
00:11:51,680 --> 00:11:52,480
and

333
00:11:52,480 --> 00:11:55,760
and it has proven and and and um and and

334
00:11:55,760 --> 00:11:58,000
it is as proven as it's secure against

335
00:11:58,000 --> 00:12:00,000
first order algebraic attacks

336
00:12:00,000 --> 00:12:01,920
however when we think about the sharing

337
00:12:01,920 --> 00:12:04,880
we can see that the sharing of uh x0 is

338
00:12:04,880 --> 00:12:07,200
three out of four uh which implies that

339
00:12:07,200 --> 00:12:09,760
the probability of of

340
00:12:09,760 --> 00:12:10,639
uh

341
00:12:10,639 --> 00:12:12,880
probate of the of the final share is

342
00:12:12,880 --> 00:12:15,120
equal to the x or which which is secret

343
00:12:15,120 --> 00:12:17,920
is three out of four so that is

344
00:12:17,920 --> 00:12:18,959
that's

345
00:12:18,959 --> 00:12:20,880
so thus it is actually not secured

346
00:12:20,880 --> 00:12:23,040
against probing attacks

347
00:12:23,040 --> 00:12:25,839
so as a result what we can see is

348
00:12:25,839 --> 00:12:27,200
there is no comparability between

349
00:12:27,200 --> 00:12:29,360
probing security and prediction security

350
00:12:29,360 --> 00:12:32,639
and we need both notions in our proof

351
00:12:32,639 --> 00:12:34,959
and and this is the main reason why two

352
00:12:34,959 --> 00:12:37,120
countermeasures were proposed on top of

353
00:12:37,120 --> 00:12:39,120
each other to prevent both attacks in

354
00:12:39,120 --> 00:12:41,120
the earlier works

355
00:12:41,120 --> 00:12:43,279
so what we learned from the from these

356
00:12:43,279 --> 00:12:45,519
two attacks is the following first of

357
00:12:45,519 --> 00:12:48,000
all we need a regular secret sharing to

358
00:12:48,000 --> 00:12:49,839
eliminate computation attacks and

359
00:12:49,839 --> 00:12:51,360
secondly we need to increase the

360
00:12:51,360 --> 00:12:54,240
decoding order at the same time to to to

361
00:12:54,240 --> 00:12:55,760
gain resistance against algebraic

362
00:12:55,760 --> 00:12:57,120
attacks

363
00:12:57,120 --> 00:12:59,440
so now let's let's remark the building

364
00:12:59,440 --> 00:13:02,480
masking is in this left-hand side

365
00:13:02,480 --> 00:13:04,160
now the question is how can we increase

366
00:13:04,160 --> 00:13:08,399
the decoding order so the idea is simple

367
00:13:08,399 --> 00:13:10,320
we would we need to share

368
00:13:10,320 --> 00:13:12,880
a single share so let's say x0 in this

369
00:13:12,880 --> 00:13:14,959
example

370
00:13:14,959 --> 00:13:18,320
we would like to represent extra with a

371
00:13:18,320 --> 00:13:21,440
multiplicative masking such that x0 is

372
00:13:21,440 --> 00:13:23,920
is a product of of d plus one random

373
00:13:23,920 --> 00:13:26,320
variables and the rest of the shares are

374
00:13:26,320 --> 00:13:28,639
actually stays the same

375
00:13:28,639 --> 00:13:29,440
and

376
00:13:29,440 --> 00:13:30,320
um

377
00:13:30,320 --> 00:13:33,040
and and and we denote this masking by an

378
00:13:33,040 --> 00:13:35,279
nd masking scheme

379
00:13:35,279 --> 00:13:38,000
um so let's so before going into the

380
00:13:38,000 --> 00:13:39,519
into an example we would like to take a

381
00:13:39,519 --> 00:13:41,199
look at the encoding and the decoding

382
00:13:41,199 --> 00:13:43,760
decoding function here so here instead

383
00:13:43,760 --> 00:13:46,399
of having um even if we have an n plus

384
00:13:46,399 --> 00:13:48,959
one random variable now we have d plus

385
00:13:48,959 --> 00:13:51,120
one random variable for for for for

386
00:13:51,120 --> 00:13:53,839
multi multiplicative representation and

387
00:13:53,839 --> 00:13:56,639
and and the minus one variable for just

388
00:13:56,639 --> 00:13:58,320
selected randomly

389
00:13:58,320 --> 00:14:00,399
and the last uh player's share is

390
00:14:00,399 --> 00:14:03,199
actually calculated by a product of of

391
00:14:03,199 --> 00:14:04,000
your

392
00:14:04,000 --> 00:14:06,079
product or multiplicative represented

393
00:14:06,079 --> 00:14:08,800
share and the rest of the boolean rest

394
00:14:08,800 --> 00:14:11,040
of the linear shares and now the

395
00:14:11,040 --> 00:14:12,639
interesting thing is here are our

396
00:14:12,639 --> 00:14:15,279
decoding function as you can see there

397
00:14:15,279 --> 00:14:16,560
are what

398
00:14:16,560 --> 00:14:18,399
what what we did is actually trying to

399
00:14:18,399 --> 00:14:20,079
de increasing the

400
00:14:20,079 --> 00:14:23,279
decoding order here you can see uh we

401
00:14:23,279 --> 00:14:25,279
did the degree of of our decoding

402
00:14:25,279 --> 00:14:27,839
function is is d plus one

403
00:14:27,839 --> 00:14:30,079
and now let's let's take a look to an

404
00:14:30,079 --> 00:14:31,600
example where n equals three and d

405
00:14:31,600 --> 00:14:33,360
equals one and here you can see the

406
00:14:33,360 --> 00:14:35,519
boolean masking on the left hand side

407
00:14:35,519 --> 00:14:37,040
and you can see that we increase the

408
00:14:37,040 --> 00:14:40,399
decoding order by representing x0 with

409
00:14:40,399 --> 00:14:45,440
x1 x2 tilde plus x one tilde

410
00:14:45,440 --> 00:14:48,160
um so this is this is this this was our

411
00:14:48,160 --> 00:14:51,600
our um our data transformation now as a

412
00:14:51,600 --> 00:14:53,199
regular masking scheme the data

413
00:14:53,199 --> 00:14:55,760
transformation is is followed by

414
00:14:55,760 --> 00:14:59,120
by gate transformation so we we provide

415
00:14:59,120 --> 00:15:01,760
the secure exor and and refresh mask

416
00:15:01,760 --> 00:15:04,160
gadget and the foundation of these

417
00:15:04,160 --> 00:15:05,920
gadgets are actually the same as as a

418
00:15:05,920 --> 00:15:07,760
boolean masking

419
00:15:07,760 --> 00:15:11,120
so however now we have to be careful

420
00:15:11,120 --> 00:15:12,639
of the intermediate variables that

421
00:15:12,639 --> 00:15:16,079
actually represent x0 because

422
00:15:16,079 --> 00:15:18,399
yeah and let's let's say let's take a

423
00:15:18,399 --> 00:15:20,000
take a look at the basic

424
00:15:20,000 --> 00:15:22,399
example of secure exit operation here

425
00:15:22,399 --> 00:15:25,360
you can see every every every share

426
00:15:25,360 --> 00:15:28,480
besides that and is is share wise and in

427
00:15:28,480 --> 00:15:30,079
order to secure the correctness of the

428
00:15:30,079 --> 00:15:32,959
digit we need a variable u

429
00:15:32,959 --> 00:15:35,279
and here you can see the the concrete

430
00:15:35,279 --> 00:15:37,279
constructions for first and second order

431
00:15:37,279 --> 00:15:40,320
exactly and using a similar ideas we can

432
00:15:40,320 --> 00:15:42,560
transform end and refresh mask operation

433
00:15:42,560 --> 00:15:44,560
for our purposes and for the details of

434
00:15:44,560 --> 00:15:46,240
this gate we would like to refer to the

435
00:15:46,240 --> 00:15:47,920
paper

436
00:15:47,920 --> 00:15:48,959
and

437
00:15:48,959 --> 00:15:51,759
so what about what the cost of of this

438
00:15:51,759 --> 00:15:54,720
transformation and um what is the

439
00:15:54,720 --> 00:15:57,120
overhead so here we can see through

440
00:15:57,120 --> 00:15:58,880
three main parameters that that we would

441
00:15:58,880 --> 00:16:01,199
like to take a look um these are number

442
00:16:01,199 --> 00:16:04,399
of xor and and required randomness

443
00:16:04,399 --> 00:16:06,720
so as you can see from the example

444
00:16:06,720 --> 00:16:08,959
extra example we have a special

445
00:16:08,959 --> 00:16:11,959
subscript uh ui and ux represent

446
00:16:11,959 --> 00:16:14,959
representing the number of uh

447
00:16:14,959 --> 00:16:16,959
and and extra operations within this

448
00:16:16,959 --> 00:16:18,880
special variable that we

449
00:16:18,880 --> 00:16:20,000
that we

450
00:16:20,000 --> 00:16:23,680
defined in the previous slide and

451
00:16:23,680 --> 00:16:26,000
an observer for d equals zero the

452
00:16:26,000 --> 00:16:28,480
gadgets are actually become uh become

453
00:16:28,480 --> 00:16:31,839
the regular uh secure mask operations

454
00:16:31,839 --> 00:16:34,240
for the exorcist of course there we

455
00:16:34,240 --> 00:16:35,600
actually increasing the total number of

456
00:16:35,600 --> 00:16:37,759
shares which gives us a linear increase

457
00:16:37,759 --> 00:16:40,560
and the cost of the operations of u and

458
00:16:40,560 --> 00:16:42,560
and as you can see from the highlighted

459
00:16:42,560 --> 00:16:45,920
values and for for for for you for ux

460
00:16:45,920 --> 00:16:48,639
and ui this can be one and two as in

461
00:16:48,639 --> 00:16:50,959
this example as you can see here um

462
00:16:50,959 --> 00:16:53,440
these are actually small values for for

463
00:16:53,440 --> 00:16:55,199
example

464
00:16:55,199 --> 00:16:56,000
um

465
00:16:56,000 --> 00:16:58,320
for the end gadget uh again the complex

466
00:16:58,320 --> 00:17:00,560
is n square but now the main overhead

467
00:17:00,560 --> 00:17:03,680
comes from this uh spec

468
00:17:03,680 --> 00:17:05,760
from the from this the form of a

469
00:17:05,760 --> 00:17:07,919
specific variable we

470
00:17:07,919 --> 00:17:09,760
and for refresh mask we actually see a

471
00:17:09,760 --> 00:17:12,240
similar pattern of course now we we need

472
00:17:12,240 --> 00:17:14,880
a more randomness for in order to define

473
00:17:14,880 --> 00:17:16,079
this operation

474
00:17:16,079 --> 00:17:18,559
and we interpret these results more at

475
00:17:18,559 --> 00:17:20,640
the end of our presentation when we take

476
00:17:20,640 --> 00:17:23,599
a look at the as implementation

477
00:17:23,599 --> 00:17:24,559
okay

478
00:17:24,559 --> 00:17:27,599
until now we we reconstruct our scheme

479
00:17:27,599 --> 00:17:29,520
now we would like to focus on how to

480
00:17:29,520 --> 00:17:32,480
prove the security of our design let's

481
00:17:32,480 --> 00:17:34,240
take a quick look at how the proof

482
00:17:34,240 --> 00:17:36,160
techniques are working in our settings

483
00:17:36,160 --> 00:17:37,600
starting from the from the probing

484
00:17:37,600 --> 00:17:41,440
security so as a caveat of our scheme

485
00:17:41,440 --> 00:17:43,200
only a subset of shares is actually

486
00:17:43,200 --> 00:17:45,520
uniformly distributed as you can see

487
00:17:45,520 --> 00:17:47,919
extra is is actually biased

488
00:17:47,919 --> 00:17:50,720
thus an adversary can predict um x0 with

489
00:17:50,720 --> 00:17:52,080
high probability

490
00:17:52,080 --> 00:17:55,120
so therefore we are actually losing um

491
00:17:55,120 --> 00:17:57,520
one probing secured order in order to

492
00:17:57,520 --> 00:17:59,679
gain algebraic security

493
00:17:59,679 --> 00:18:01,280
so in our proofs

494
00:18:01,280 --> 00:18:03,600
we see these nonlinear shares as public

495
00:18:03,600 --> 00:18:05,840
values accessible by the adversity and

496
00:18:05,840 --> 00:18:06,880
therefore

497
00:18:06,880 --> 00:18:08,480
the simulation

498
00:18:08,480 --> 00:18:10,559
for our simulation-based proof can also

499
00:18:10,559 --> 00:18:13,840
access these values

500
00:18:13,840 --> 00:18:16,000
and and we we show that in nds and this

501
00:18:16,000 --> 00:18:18,480
scheme provides security against n minus

502
00:18:18,480 --> 00:18:20,320
one order attacks

503
00:18:20,320 --> 00:18:22,080
and moreover we supported our results

504
00:18:22,080 --> 00:18:22,960
with

505
00:18:22,960 --> 00:18:25,600
them with the verification by mass wave

506
00:18:25,600 --> 00:18:28,080
and these verification calls can can be

507
00:18:28,080 --> 00:18:30,880
found publicly available

508
00:18:30,880 --> 00:18:32,720
now let's take a look at the the

509
00:18:32,720 --> 00:18:34,559
predictive security proof and the main

510
00:18:34,559 --> 00:18:37,360
idea is simple as we described in in the

511
00:18:37,360 --> 00:18:40,240
prediction security security definition

512
00:18:40,240 --> 00:18:41,760
we need to show that every linear

513
00:18:41,760 --> 00:18:44,000
combinations of our circuit should have

514
00:18:44,000 --> 00:18:46,480
low bias when the input is fixed

515
00:18:46,480 --> 00:18:49,440
that is the nodes are a function of your

516
00:18:49,440 --> 00:18:51,760
nodes or your combinations of your nodes

517
00:18:51,760 --> 00:18:54,160
should be a function of of p arrange

518
00:18:54,160 --> 00:18:56,480
or your randomness source

519
00:18:56,480 --> 00:18:59,200
so it is so it is already shown that due

520
00:18:59,200 --> 00:19:01,360
to linearity composition is is actually

521
00:19:01,360 --> 00:19:02,480
easy to prove

522
00:19:02,480 --> 00:19:04,640
and and therefore the

523
00:19:04,640 --> 00:19:06,880
the an adversary cannot distinguish any

524
00:19:06,880 --> 00:19:09,200
sets of inputs

525
00:19:09,200 --> 00:19:11,760
and and for for our first order gadget

526
00:19:11,760 --> 00:19:14,400
we we use a tool provided by berkovito

527
00:19:14,400 --> 00:19:16,640
to verify the security of our design and

528
00:19:16,640 --> 00:19:18,640
the interesting thing is is actually see

529
00:19:18,640 --> 00:19:20,720
you can see the bias bound of gadget as

530
00:19:20,720 --> 00:19:22,240
you can see

531
00:19:22,240 --> 00:19:23,919
these are actually independent of your

532
00:19:23,919 --> 00:19:26,400
linear masking or drain

533
00:19:26,400 --> 00:19:27,840
and

534
00:19:27,840 --> 00:19:29,200
now let's take a look at the second

535
00:19:29,200 --> 00:19:31,600
order security the idea is quite

536
00:19:31,600 --> 00:19:34,000
intuitive intuitively extended now the

537
00:19:34,000 --> 00:19:35,840
combination that combinations that we

538
00:19:35,840 --> 00:19:37,200
need to take care

539
00:19:37,200 --> 00:19:39,919
are or become quadratic and moreover the

540
00:19:39,919 --> 00:19:42,160
first order bounce should be much lower

541
00:19:42,160 --> 00:19:45,200
than the uh pre-response and again the

542
00:19:45,200 --> 00:19:48,160
idea is what what we said before

543
00:19:48,160 --> 00:19:49,919
the adversary cannot distinguish any

544
00:19:49,919 --> 00:19:51,679
sets of inputs

545
00:19:51,679 --> 00:19:53,200
okay

546
00:19:53,200 --> 00:19:54,960
however the the

547
00:19:54,960 --> 00:19:56,640
one one thing that we need to take take

548
00:19:56,640 --> 00:19:58,160
care of course the combinations

549
00:19:58,160 --> 00:19:59,360
composition

550
00:19:59,360 --> 00:20:01,440
however the quadratic composition cannot

551
00:20:01,440 --> 00:20:03,440
be extended in a trivial way as we need

552
00:20:03,440 --> 00:20:06,000
to consider combinations from from two

553
00:20:06,000 --> 00:20:09,440
different circuits um

554
00:20:09,440 --> 00:20:11,360
the so if you think about the second

555
00:20:11,360 --> 00:20:13,600
order combinations from two different

556
00:20:13,600 --> 00:20:16,559
circuits that's by linearity as in the

557
00:20:16,559 --> 00:20:18,640
as in the previous result this can be

558
00:20:18,640 --> 00:20:21,120
done easily however when we think about

559
00:20:21,120 --> 00:20:23,280
the combinations of

560
00:20:23,280 --> 00:20:25,600
two first order combination from two

561
00:20:25,600 --> 00:20:27,600
different circuits when they when they

562
00:20:27,600 --> 00:20:29,600
add them together when we combine them

563
00:20:29,600 --> 00:20:31,600
together now this

564
00:20:31,600 --> 00:20:35,360
that needs to be special um attention

565
00:20:35,360 --> 00:20:39,200
so we proven our our are our protein in

566
00:20:39,200 --> 00:20:40,640
two fold first one is parallel

567
00:20:40,640 --> 00:20:42,000
composibility

568
00:20:42,000 --> 00:20:44,320
and and where the gadgets are operated

569
00:20:44,320 --> 00:20:46,880
in parallel and the second

570
00:20:46,880 --> 00:20:48,720
and the second is it's okay sequential

571
00:20:48,720 --> 00:20:50,960
as is in this is in the figure so

572
00:20:50,960 --> 00:20:53,120
therefore we have proven the composition

573
00:20:53,120 --> 00:20:55,200
in in parallel order and

574
00:20:55,200 --> 00:20:57,200
gets the circuits that operate in

575
00:20:57,200 --> 00:21:00,559
parallel and sequences uh and and

576
00:21:00,559 --> 00:21:02,880
circuits that um operate in sequential

577
00:21:02,880 --> 00:21:04,559
order so

578
00:21:04,559 --> 00:21:06,240
but the proven at the end is the

579
00:21:06,240 --> 00:21:09,760
composition of an arbitrary circuit so

580
00:21:09,760 --> 00:21:11,120
what can we interpret how can we

581
00:21:11,120 --> 00:21:13,200
interpret these results so this is the

582
00:21:13,200 --> 00:21:15,039
this is our this will be our main result

583
00:21:15,039 --> 00:21:16,880
here so

584
00:21:16,880 --> 00:21:18,640
the probability of an adversary to

585
00:21:18,640 --> 00:21:20,720
distinguish two sets of plaintext is

586
00:21:20,720 --> 00:21:23,200
less than two to the minus 128 if the

587
00:21:23,200 --> 00:21:27,120
window contains at least a 1.5 000

588
00:21:27,120 --> 00:21:29,039
random notes

589
00:21:29,039 --> 00:21:31,440
so these random nodes can be supplied to

590
00:21:31,440 --> 00:21:35,360
the circuit um in in in in a in a in a

591
00:21:35,360 --> 00:21:37,360
in a very basic manner is that is you

592
00:21:37,360 --> 00:21:39,840
can think about as the random

593
00:21:39,840 --> 00:21:42,559
dummy nodes these nodes don't need to be

594
00:21:42,559 --> 00:21:44,960
act in your circuit but there has to be

595
00:21:44,960 --> 00:21:47,520
some random notes so that the adversary

596
00:21:47,520 --> 00:21:49,679
will not be able to have a window that

597
00:21:49,679 --> 00:21:52,559
contains the secret shares and

598
00:21:52,559 --> 00:21:58,039
less than 1.5 000 random nodes

599
00:21:58,159 --> 00:22:00,080
and and that's why we need an additional

600
00:22:00,080 --> 00:22:02,240
obfuscation there on top of every white

601
00:22:02,240 --> 00:22:03,679
box design

602
00:22:03,679 --> 00:22:05,919
um in the final part of our presentation

603
00:22:05,919 --> 00:22:07,039
we would like to take a look at the

604
00:22:07,039 --> 00:22:09,280
proof of proof proof of concept as with

605
00:22:09,280 --> 00:22:11,280
that with a performance comparison so

606
00:22:11,280 --> 00:22:12,799
here you can see that this light blue

607
00:22:12,799 --> 00:22:14,559
line corresponds to the previous

608
00:22:14,559 --> 00:22:16,400
approach where two different masking

609
00:22:16,400 --> 00:22:18,880
schemes are needed to combine

610
00:22:18,880 --> 00:22:20,960
to get the desired security level and

611
00:22:20,960 --> 00:22:22,960
now the bottom blue line

612
00:22:22,960 --> 00:22:24,559
corresponds to the regular masking

613
00:22:24,559 --> 00:22:26,960
scheme without and without a nonlinear

614
00:22:26,960 --> 00:22:28,080
component

615
00:22:28,080 --> 00:22:28,960
now

616
00:22:28,960 --> 00:22:30,720
we can combine from our intuition from

617
00:22:30,720 --> 00:22:33,360
the overhead and see that

618
00:22:33,360 --> 00:22:35,679
r due to the structure of our skin it is

619
00:22:35,679 --> 00:22:37,600
efficiently increase the security order

620
00:22:37,600 --> 00:22:41,039
in a dimension of n here you can see

621
00:22:41,039 --> 00:22:43,600
however uh still the

622
00:22:43,600 --> 00:22:44,960
the nonlinear order is actually

623
00:22:44,960 --> 00:22:46,799
bottleneck of our skin

624
00:22:46,799 --> 00:22:48,720
uh for the randomness course you can see

625
00:22:48,720 --> 00:22:50,559
that again we have this uh we have the

626
00:22:50,559 --> 00:22:52,240
light blue line corresponding to the

627
00:22:52,240 --> 00:22:54,240
previous approach where two masks are

628
00:22:54,240 --> 00:22:56,240
two masks are needed and the bottom blue

629
00:22:56,240 --> 00:22:58,080
line corresponds to the

630
00:22:58,080 --> 00:23:00,000
the where there is non nonlinear

631
00:23:00,000 --> 00:23:02,480
component um for the random scores we

632
00:23:02,480 --> 00:23:04,159
see a similar structure also and better

633
00:23:04,159 --> 00:23:05,919
results with respect to

634
00:23:05,919 --> 00:23:07,280
two different using two different

635
00:23:07,280 --> 00:23:10,159
maskings i'm asking at the same time

636
00:23:10,159 --> 00:23:12,080
now in conclusion

637
00:23:12,080 --> 00:23:13,679
we have proposed the first masking

638
00:23:13,679 --> 00:23:16,480
scheme that combines a linear and linear

639
00:23:16,480 --> 00:23:18,880
component to achieve resistance against

640
00:23:18,880 --> 00:23:20,880
both computational algebraic attacks and

641
00:23:20,880 --> 00:23:23,039
prove the security in both

642
00:23:23,039 --> 00:23:24,640
bot probing and prediction security

643
00:23:24,640 --> 00:23:27,600
notions that are incomparable

644
00:23:27,600 --> 00:23:29,600
we we provide a first

645
00:23:29,600 --> 00:23:31,760
and second order prediction security for

646
00:23:31,760 --> 00:23:34,320
concrete constructions of n1 and n2

647
00:23:34,320 --> 00:23:37,600
masking schemes we'll provide a proof of

648
00:23:37,600 --> 00:23:41,760
concept a bit wise as128 implementation

649
00:23:41,760 --> 00:23:44,000
the leakage and performance analysis

650
00:23:44,000 --> 00:23:45,440
thank you for your attention if you have

651
00:23:45,440 --> 00:23:46,960
any questions please feel free to feel

652
00:23:46,960 --> 00:23:48,720
free to contact us or if you're

653
00:23:48,720 --> 00:23:50,320
interested you can you can find more

654
00:23:50,320 --> 00:23:52,559
details on our eprint and if you would

655
00:23:52,559 --> 00:23:54,159
like to take a look to the verification

656
00:23:54,159 --> 00:23:56,480
code or analysis code please feel free

657
00:23:56,480 --> 00:23:59,120
to go to visit visit our github page and

658
00:23:59,120 --> 00:24:01,760
here you can download our masquerif code

659
00:24:01,760 --> 00:24:04,559
and analysis and also the as128

660
00:24:04,559 --> 00:24:08,320
implementation thank you

