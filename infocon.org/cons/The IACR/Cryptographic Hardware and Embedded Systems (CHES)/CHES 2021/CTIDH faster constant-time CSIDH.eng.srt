1
00:00:03,760 --> 00:00:06,960
hi and welcome to c-tide faster constant

2
00:00:06,960 --> 00:00:09,839
time seaside

3
00:00:11,360 --> 00:00:13,519
so what is seaside seaside is a

4
00:00:13,519 --> 00:00:16,000
post-quantum key exchange protocol that

5
00:00:16,000 --> 00:00:17,920
is based on a group action

6
00:00:17,920 --> 00:00:20,880
on a certain set of elliptic curves

7
00:00:20,880 --> 00:00:23,039
the secret keys sampled from some key

8
00:00:23,039 --> 00:00:24,160
space

9
00:00:24,160 --> 00:00:26,080
give group elements

10
00:00:26,080 --> 00:00:28,320
and then we use the group elements

11
00:00:28,320 --> 00:00:30,480
to evaluate the group action to obtain

12
00:00:30,480 --> 00:00:33,040
public keys

13
00:00:33,040 --> 00:00:35,280
what is c type

14
00:00:35,280 --> 00:00:37,840
c tag is a new key space and a new

15
00:00:37,840 --> 00:00:40,640
algorithm to compute the group action in

16
00:00:40,640 --> 00:00:42,559
csi

17
00:00:42,559 --> 00:00:43,680
moreover

18
00:00:43,680 --> 00:00:46,879
our new algorithm is constant time

19
00:00:46,879 --> 00:00:48,879
and we verify this claim using using

20
00:00:48,879 --> 00:00:51,280
valgrind

21
00:00:51,280 --> 00:00:52,800
in addition we

22
00:00:52,800 --> 00:00:55,440
obtain significant speed ups as compared

23
00:00:55,440 --> 00:00:57,039
to the previous best console time

24
00:00:57,039 --> 00:00:59,840
implementations

25
00:01:03,600 --> 00:01:06,400
so let's get started on c side

26
00:01:06,400 --> 00:01:08,320
in c side we use elliptic curves over a

27
00:01:08,320 --> 00:01:11,119
finite field fp where p is chosen in a

28
00:01:11,119 --> 00:01:13,520
very special form

29
00:01:13,520 --> 00:01:14,560
then

30
00:01:14,560 --> 00:01:16,880
there is some mysterious abilene group

31
00:01:16,880 --> 00:01:19,759
acting on the side of elliptic curves

32
00:01:19,759 --> 00:01:21,520
in seaside

33
00:01:21,520 --> 00:01:23,040
all we need to know is that all these

34
00:01:23,040 --> 00:01:25,200
curves are represented by

35
00:01:25,200 --> 00:01:27,119
form so we only need to keep track of

36
00:01:27,119 --> 00:01:30,159
this a coefficient

37
00:01:30,799 --> 00:01:33,759
then by construction in c side

38
00:01:33,759 --> 00:01:36,240
for every one of these primes l i we

39
00:01:36,240 --> 00:01:38,400
have a group element in the mysterious

40
00:01:38,400 --> 00:01:39,200
group

41
00:01:39,200 --> 00:01:41,759
such that evaluating the group action

42
00:01:41,759 --> 00:01:44,159
can be done very efficiently using

43
00:01:44,159 --> 00:01:47,040
lisogenes

44
00:01:47,840 --> 00:01:50,320
you can think of the group action as

45
00:01:50,320 --> 00:01:52,720
starting from one elliptic curve and by

46
00:01:52,720 --> 00:01:54,640
acting being transported to a new

47
00:01:54,640 --> 00:01:56,640
elliptic curve

48
00:01:56,640 --> 00:01:59,520
and isogenes are maps of elliptic curve

49
00:01:59,520 --> 00:02:02,479
so starting from one curve you map to

50
00:02:02,479 --> 00:02:05,520
another elliptic curve

51
00:02:06,240 --> 00:02:07,759
then the group action that we need to

52
00:02:07,759 --> 00:02:10,800
evaluate in c side is given by

53
00:02:10,800 --> 00:02:12,319
composing

54
00:02:12,319 --> 00:02:14,160
these small elements gi that we know how

55
00:02:14,160 --> 00:02:15,840
to act with efficiently

56
00:02:15,840 --> 00:02:20,599
to get more group elements to act with

57
00:02:24,080 --> 00:02:25,440
moreover

58
00:02:25,440 --> 00:02:27,280
we want to evaluate this group action in

59
00:02:27,280 --> 00:02:29,360
constant time

60
00:02:29,360 --> 00:02:30,959
and what does it mean

61
00:02:30,959 --> 00:02:33,200
we want to evaluate the group action in

62
00:02:33,200 --> 00:02:34,720
a way

63
00:02:34,720 --> 00:02:36,640
that the timing

64
00:02:36,640 --> 00:02:38,080
of the algorithm

65
00:02:38,080 --> 00:02:40,319
does not provide any information about

66
00:02:40,319 --> 00:02:42,400
the private key and does not provide

67
00:02:42,400 --> 00:02:45,200
information about the output

68
00:02:45,200 --> 00:02:46,480
so that will be the goal for the

69
00:02:46,480 --> 00:02:47,920
constant time

70
00:02:47,920 --> 00:02:51,839
claims in this talk

71
00:02:54,400 --> 00:02:57,440
first we start with the new key space

72
00:02:57,440 --> 00:03:00,159
like i said the group action that we

73
00:03:00,159 --> 00:03:02,319
want to compute we want to compute the

74
00:03:02,319 --> 00:03:06,159
action by the small elements gi

75
00:03:06,159 --> 00:03:07,200
taken

76
00:03:07,200 --> 00:03:09,040
e i times so

77
00:03:09,040 --> 00:03:10,560
this information is captured in an

78
00:03:10,560 --> 00:03:12,239
exponent vector which is just an integer

79
00:03:12,239 --> 00:03:13,519
vector

80
00:03:13,519 --> 00:03:15,200
and these exponent vectors are sampled

81
00:03:15,200 --> 00:03:18,319
from sampled from some key space and we

82
00:03:18,319 --> 00:03:19,200
just need

83
00:03:19,200 --> 00:03:22,640
a key space to be large enough

84
00:03:22,959 --> 00:03:25,519
in the original seaside paper

85
00:03:25,519 --> 00:03:27,840
you just take the same bound for every

86
00:03:27,840 --> 00:03:30,080
entry of the vector

87
00:03:30,080 --> 00:03:32,640
bearing in mind that the resulting key

88
00:03:32,640 --> 00:03:35,840
space needs to be large enough

89
00:03:35,840 --> 00:03:37,599
sometimes you

90
00:03:37,599 --> 00:03:40,480
you may want to only allow non-negative

91
00:03:40,480 --> 00:03:43,519
entries in your exponent vectors

92
00:03:43,519 --> 00:03:44,840
and also because

93
00:03:44,840 --> 00:03:47,680
evaluation of the group action by gi for

94
00:03:47,680 --> 00:03:49,440
different eyes

95
00:03:49,440 --> 00:03:52,319
takes a different

96
00:03:52,319 --> 00:03:54,879
amount of effort

97
00:03:54,879 --> 00:03:56,879
it's very useful to allow

98
00:03:56,879 --> 00:03:59,280
the bounds to vary

99
00:03:59,280 --> 00:04:01,040
for

100
00:04:01,040 --> 00:04:03,040
the balance on the different entries of

101
00:04:03,040 --> 00:04:07,200
the vector to vary for efficiency

102
00:04:09,200 --> 00:04:11,120
now i'm going to explain to you how to

103
00:04:11,120 --> 00:04:15,760
uh how we change the key space in c tied

104
00:04:15,760 --> 00:04:17,839
so for concreteness we just take the c

105
00:04:17,839 --> 00:04:19,040
side

106
00:04:19,040 --> 00:04:21,440
512 prime

107
00:04:21,440 --> 00:04:23,680
just to have some some numbers so for

108
00:04:23,680 --> 00:04:25,040
every prime

109
00:04:25,040 --> 00:04:28,960
there is a group element and

110
00:04:28,960 --> 00:04:30,960
we can look at the corresponding entry

111
00:04:30,960 --> 00:04:34,080
in the exponent vector

112
00:04:34,639 --> 00:04:37,520
then we patch these primes together

113
00:04:37,520 --> 00:04:40,479
so we just pick any

114
00:04:40,479 --> 00:04:42,080
any splitting of the of the set of

115
00:04:42,080 --> 00:04:43,600
primes

116
00:04:43,600 --> 00:04:46,160
and we consider all these all these

117
00:04:46,160 --> 00:04:48,560
primes as one batch so we take them

118
00:04:48,560 --> 00:04:49,919
together

119
00:04:49,919 --> 00:04:51,280
and then we notice

120
00:04:51,280 --> 00:04:53,440
that this exponent vector

121
00:04:53,440 --> 00:04:56,880
is actually in the subset in which

122
00:04:56,880 --> 00:04:59,040
the subset of vectors integer vectors in

123
00:04:59,040 --> 00:05:02,160
which we compute exactly three isotonies

124
00:05:02,160 --> 00:05:03,919
three group actions for primes in this

125
00:05:03,919 --> 00:05:05,120
patch

126
00:05:05,120 --> 00:05:08,320
and in in which we compute exactly five

127
00:05:08,320 --> 00:05:11,039
isogenes five group actions for price

128
00:05:11,039 --> 00:05:14,240
and dispatch and so on

129
00:05:14,720 --> 00:05:17,840
to get a larger key space

130
00:05:17,840 --> 00:05:19,759
we also know that this same exponent

131
00:05:19,759 --> 00:05:21,600
vector is in the subset

132
00:05:21,600 --> 00:05:23,600
where we compute up to three

133
00:05:23,600 --> 00:05:25,520
isotonies in

134
00:05:25,520 --> 00:05:26,720
in this patch

135
00:05:26,720 --> 00:05:28,639
up to five isogenes in this batch and so

136
00:05:28,639 --> 00:05:30,800
on

137
00:05:30,800 --> 00:05:33,840
so this is our resulting new key space

138
00:05:33,840 --> 00:05:34,639
and

139
00:05:34,639 --> 00:05:37,280
uh it's not at all clear how this speeds

140
00:05:37,280 --> 00:05:39,919
up any of the computation

141
00:05:39,919 --> 00:05:41,440
but

142
00:05:41,440 --> 00:05:43,039
the other

143
00:05:43,039 --> 00:05:45,280
the second contribution of c type is

144
00:05:45,280 --> 00:05:47,680
that we also change the algorithm to

145
00:05:47,680 --> 00:05:50,880
compute the group action evaluation

146
00:05:50,880 --> 00:05:54,320
in a way that we can really evaluate

147
00:05:54,320 --> 00:05:56,479
the group action for any prime in the

148
00:05:56,479 --> 00:05:59,758
batch efficiently

149
00:06:00,880 --> 00:06:02,639
but to explain this i first need to tell

150
00:06:02,639 --> 00:06:03,680
you how

151
00:06:03,680 --> 00:06:06,479
the group action is a evaluated

152
00:06:06,479 --> 00:06:09,120
in general

153
00:06:09,120 --> 00:06:10,960
so this is where the isogenic magic

154
00:06:10,960 --> 00:06:12,639
comes

155
00:06:12,639 --> 00:06:14,800
so remember for all of these small

156
00:06:14,800 --> 00:06:16,160
primes li

157
00:06:16,160 --> 00:06:17,919
we have group elements that we can act

158
00:06:17,919 --> 00:06:19,680
with efficiently

159
00:06:19,680 --> 00:06:20,560
and

160
00:06:20,560 --> 00:06:22,720
the group action is

161
00:06:22,720 --> 00:06:26,400
taking you from one curve to another

162
00:06:28,400 --> 00:06:31,520
to get to isogenes

163
00:06:31,520 --> 00:06:35,759
we know that this action is evaluated

164
00:06:35,759 --> 00:06:38,400
uh using isogenes that also take you

165
00:06:38,400 --> 00:06:40,720
from one curve to another

166
00:06:40,720 --> 00:06:43,440
and isotonies are algebraic maps of

167
00:06:43,440 --> 00:06:45,840
elliptic curves and if i have two

168
00:06:45,840 --> 00:06:48,080
elliptic curves then the map is given by

169
00:06:48,080 --> 00:06:50,240
some rational functions

170
00:06:50,240 --> 00:06:51,919
but there are also homomorphisms of

171
00:06:51,919 --> 00:06:53,680
groups so if i have a point on an

172
00:06:53,680 --> 00:06:56,080
elliptic curve then it gets mapped to

173
00:06:56,080 --> 00:06:59,120
another point on the new elliptic curve

174
00:06:59,120 --> 00:07:01,280
and the special property that we will be

175
00:07:01,280 --> 00:07:02,479
using

176
00:07:02,479 --> 00:07:04,880
inherent to seaside is that

177
00:07:04,880 --> 00:07:08,080
if i take a point whose order

178
00:07:08,080 --> 00:07:10,800
is a multiple of li

179
00:07:10,800 --> 00:07:14,160
then if i evaluate it under the isotonia

180
00:07:14,160 --> 00:07:15,199
i drop

181
00:07:15,199 --> 00:07:17,820
the li in the order

182
00:07:17,820 --> 00:07:20,800
[Music]

183
00:07:20,800 --> 00:07:22,639
okay

184
00:07:22,639 --> 00:07:24,160
so

185
00:07:24,160 --> 00:07:26,240
the group action was given by isochinese

186
00:07:26,240 --> 00:07:27,360
and now i'm going to give you more

187
00:07:27,360 --> 00:07:29,440
details on how to compute the group

188
00:07:29,440 --> 00:07:31,840
action

189
00:07:32,479 --> 00:07:34,240
there are two steps

190
00:07:34,240 --> 00:07:36,720
first we find a point of order l

191
00:07:36,720 --> 00:07:39,440
on the first elliptic curve

192
00:07:39,440 --> 00:07:41,919
and then we compute the isogenate with

193
00:07:41,919 --> 00:07:42,880
kernel

194
00:07:42,880 --> 00:07:46,240
that point of order l

195
00:07:49,039 --> 00:07:50,560
the first step

196
00:07:50,560 --> 00:07:52,400
to finding the point

197
00:07:52,400 --> 00:07:54,160
one easy way to do it is to just

198
00:07:54,160 --> 00:07:56,080
generate a random point of order p plus

199
00:07:56,080 --> 00:07:57,039
one

200
00:07:57,039 --> 00:07:58,639
and then

201
00:07:58,639 --> 00:08:00,720
which is rather easy and then we

202
00:08:00,720 --> 00:08:03,599
multiply it by

203
00:08:03,599 --> 00:08:05,680
by suitable factor to get a point of

204
00:08:05,680 --> 00:08:08,400
exact order l

205
00:08:08,639 --> 00:08:10,400
in the second step computing the isotony

206
00:08:10,400 --> 00:08:13,440
also splits into three different steps

207
00:08:13,440 --> 00:08:15,120
depending on

208
00:08:15,120 --> 00:08:16,879
whether you use the value formulas or

209
00:08:16,879 --> 00:08:20,240
disparate value formulas

210
00:08:20,240 --> 00:08:22,800
but in any case we always enumerate some

211
00:08:22,800 --> 00:08:25,280
multiples of the point

212
00:08:25,280 --> 00:08:27,039
then we construct a polynomial that

213
00:08:27,039 --> 00:08:29,039
iterates over these multiples and takes

214
00:08:29,039 --> 00:08:31,919
the x coordinate

215
00:08:33,120 --> 00:08:35,360
and then from this h polynomial we

216
00:08:35,360 --> 00:08:37,519
somehow compute the coefficient of the

217
00:08:37,519 --> 00:08:40,760
new curve

218
00:08:41,839 --> 00:08:43,200
the second part

219
00:08:43,200 --> 00:08:46,000
is really efficient the second step all

220
00:08:46,000 --> 00:08:47,920
of it takes less than six l

221
00:08:47,920 --> 00:08:51,120
multiplications in fp

222
00:08:52,399 --> 00:08:55,279
but the first part

223
00:08:55,279 --> 00:08:58,880
is the crux of the matter because

224
00:08:58,880 --> 00:09:00,320
here is a very large scale

225
00:09:00,320 --> 00:09:02,480
multiplication if the prime that we

226
00:09:02,480 --> 00:09:03,519
start with

227
00:09:03,519 --> 00:09:05,920
is about is a 500 bit prime and maybe we

228
00:09:05,920 --> 00:09:08,399
need to use larger primes for c side

229
00:09:08,399 --> 00:09:09,839
then

230
00:09:09,839 --> 00:09:12,160
this scalar multiplication is going to

231
00:09:12,160 --> 00:09:14,480
be really much more costly than whatever

232
00:09:14,480 --> 00:09:19,399
happens in this intricate second step

233
00:09:23,600 --> 00:09:27,360
the way to get around this is to

234
00:09:27,600 --> 00:09:28,880
compute

235
00:09:28,880 --> 00:09:31,120
the group action by several elements in

236
00:09:31,120 --> 00:09:32,240
one go

237
00:09:32,240 --> 00:09:36,640
and hence only have to use this uh

238
00:09:36,640 --> 00:09:40,640
costly scale of multiplication once

239
00:09:40,640 --> 00:09:43,120
what do i mean by that

240
00:09:43,120 --> 00:09:44,800
let's just do it on an example suppose

241
00:09:44,800 --> 00:09:47,279
we want to evaluate the exponent vector

242
00:09:47,279 --> 00:09:49,440
1 1 1 which means that we want to

243
00:09:49,440 --> 00:09:53,600
compute the three fact and cyanides rtna

244
00:09:54,399 --> 00:09:56,560
then the procedure is similar we first

245
00:09:56,560 --> 00:09:58,000
find a suitable point and then we

246
00:09:58,000 --> 00:09:59,600
compute the isotones

247
00:09:59,600 --> 00:10:02,399
but this time instead of finding points

248
00:10:02,399 --> 00:10:04,560
of order three five and seven

249
00:10:04,560 --> 00:10:06,959
we find point of order three times five

250
00:10:06,959 --> 00:10:09,518
times seven

251
00:10:10,079 --> 00:10:12,079
so from this

252
00:10:12,079 --> 00:10:14,240
uh costly multiplication we get a point

253
00:10:14,240 --> 00:10:15,920
of order three five seven three times

254
00:10:15,920 --> 00:10:17,680
five times

255
00:10:17,680 --> 00:10:20,320
and then if we compute the isogenes

256
00:10:20,320 --> 00:10:22,720
we only ever have to do

257
00:10:22,720 --> 00:10:24,720
small scale multiplications to get the

258
00:10:24,720 --> 00:10:28,640
correct points of order 3 5

259
00:10:28,640 --> 00:10:31,120
and we also use that we can cheaply

260
00:10:31,120 --> 00:10:33,920
evaluate isogenys on points

261
00:10:33,920 --> 00:10:35,920
and if we evaluate the isogenate on a

262
00:10:35,920 --> 00:10:38,800
point of order t1 which had exact order

263
00:10:38,800 --> 00:10:40,880
357

264
00:10:40,880 --> 00:10:43,360
then the resulting point drops to 3 in

265
00:10:43,360 --> 00:10:45,279
the order and his point

266
00:10:45,279 --> 00:10:46,720
has order

267
00:10:46,720 --> 00:10:49,600
5 times 7.

268
00:10:49,760 --> 00:10:52,880
so in this way

269
00:10:53,519 --> 00:10:55,360
we replace

270
00:10:55,360 --> 00:10:58,000
three very large scalar multiplications

271
00:10:58,000 --> 00:10:58,880
by

272
00:10:58,880 --> 00:11:01,360
one large scale multiplication two very

273
00:11:01,360 --> 00:11:02,480
small ones

274
00:11:02,480 --> 00:11:04,560
and two rather cheap

275
00:11:04,560 --> 00:11:07,360
evaluations

276
00:11:07,360 --> 00:11:09,200
and this is the way we evaluate

277
00:11:09,200 --> 00:11:10,640
isogeny's

278
00:11:10,640 --> 00:11:12,480
isogen action always as a sequence of

279
00:11:12,480 --> 00:11:15,839
isogenes and pushing points through

280
00:11:16,079 --> 00:11:18,240
the one disadvantage is that if you look

281
00:11:18,240 --> 00:11:20,800
at the timing you can immediately tell

282
00:11:20,800 --> 00:11:23,040
that you computed a three five and a

283
00:11:23,040 --> 00:11:25,519
seven isotonix because you know how how

284
00:11:25,519 --> 00:11:29,680
long these individual steps take

285
00:11:29,680 --> 00:11:31,519
fortunately it's very easy to adjust

286
00:11:31,519 --> 00:11:32,480
this

287
00:11:32,480 --> 00:11:34,560
algorithm or this procedure to not

288
00:11:34,560 --> 00:11:35,519
reveal

289
00:11:35,519 --> 00:11:38,959
which of the isolation needs we computed

290
00:11:38,959 --> 00:11:40,959
so how do we do that suppose we want to

291
00:11:40,959 --> 00:11:42,480
again evaluate the three and seven

292
00:11:42,480 --> 00:11:46,240
isogenic but no five isogen

293
00:11:47,600 --> 00:11:50,079
the only thing that changes is step

294
00:11:50,079 --> 00:11:53,359
for the five isogenate

295
00:11:53,760 --> 00:11:56,079
where we still do the same thing as

296
00:11:56,079 --> 00:11:58,560
before but now we throw away the results

297
00:11:58,560 --> 00:12:01,200
and remember the group action was moving

298
00:12:01,200 --> 00:12:03,600
from one curve to another so if we stay

299
00:12:03,600 --> 00:12:05,120
on the same curve

300
00:12:05,120 --> 00:12:07,279
then it's the same as not computing

301
00:12:07,279 --> 00:12:11,320
the group action

302
00:12:12,240 --> 00:12:14,959
but to fit into the flow we need to make

303
00:12:14,959 --> 00:12:17,040
sure that the next step

304
00:12:17,040 --> 00:12:19,279
receives point of correct order so

305
00:12:19,279 --> 00:12:24,000
that's why we use we add a small

306
00:12:24,000 --> 00:12:24,959
small

307
00:12:24,959 --> 00:12:26,800
line of code to always compute the

308
00:12:26,800 --> 00:12:28,639
correct multiple

309
00:12:28,639 --> 00:12:30,560
because then if you check it

310
00:12:30,560 --> 00:12:33,440
this multiple then has the correct order

311
00:12:33,440 --> 00:12:36,800
and you can use it in the next step

312
00:12:37,040 --> 00:12:39,040
so in this very simple way

313
00:12:39,040 --> 00:12:40,399
albeit using

314
00:12:40,399 --> 00:12:41,360
dummy

315
00:12:41,360 --> 00:12:43,120
operations

316
00:12:43,120 --> 00:12:45,680
uh you can turn the code that computes a

317
00:12:45,680 --> 00:12:48,880
three five and seven isotna into a code

318
00:12:48,880 --> 00:12:51,600
a piece of code that computes any subset

319
00:12:51,600 --> 00:12:54,639
of these d5 and 7 isogenes

320
00:12:54,639 --> 00:12:57,839
with the same timing

321
00:13:00,320 --> 00:13:03,360
and in our paper we formalize this into

322
00:13:03,360 --> 00:13:05,519
atomic blocks

323
00:13:05,519 --> 00:13:08,160
so an atomic block is a probabilistic

324
00:13:08,160 --> 00:13:09,519
algorithm

325
00:13:09,519 --> 00:13:11,279
that

326
00:13:11,279 --> 00:13:13,440
computes the group action

327
00:13:13,440 --> 00:13:14,480
for

328
00:13:14,480 --> 00:13:18,480
any subset of

329
00:13:18,480 --> 00:13:22,639
indices in the exponent vector

330
00:13:22,800 --> 00:13:24,480
in a way

331
00:13:24,480 --> 00:13:26,560
that the time

332
00:13:26,560 --> 00:13:27,360
of

333
00:13:27,360 --> 00:13:29,360
the time distribution

334
00:13:29,360 --> 00:13:31,680
of the algorithm

335
00:13:31,680 --> 00:13:34,399
does not depend on the actual

336
00:13:34,399 --> 00:13:36,560
on the input

337
00:13:36,560 --> 00:13:38,320
so it doesn't depend on which curve you

338
00:13:38,320 --> 00:13:40,800
start with and does not depend on

339
00:13:40,800 --> 00:13:42,880
whether you choose zeros or or ones for

340
00:13:42,880 --> 00:13:45,279
the exponents but it only

341
00:13:45,279 --> 00:13:48,079
depends on the subset of the isotonic

342
00:13:48,079 --> 00:13:51,519
degrees that you were willing to compute

343
00:13:51,519 --> 00:13:53,360
this might be a complicated definition

344
00:13:53,360 --> 00:13:54,800
but we already saw it on the previous

345
00:13:54,800 --> 00:13:56,720
slide we saw a way how to build an

346
00:13:56,720 --> 00:13:59,519
atomic block that always computed

347
00:13:59,519 --> 00:14:01,920
the three five seven isotonies so the

348
00:14:01,920 --> 00:14:04,560
action by the first three elements

349
00:14:04,560 --> 00:14:06,399
in a way that didn't leak whether we

350
00:14:06,399 --> 00:14:07,760
actually

351
00:14:07,760 --> 00:14:12,319
computed or did not compute the isotonia

352
00:14:12,560 --> 00:14:14,560
and once you have atomic blocks

353
00:14:14,560 --> 00:14:16,959
uh it's actually rather easy to turn it

354
00:14:16,959 --> 00:14:18,800
into a constant time

355
00:14:18,800 --> 00:14:21,440
constant time algorithm that computes

356
00:14:21,440 --> 00:14:23,279
the group action

357
00:14:23,279 --> 00:14:24,720
in seaside

358
00:14:24,720 --> 00:14:27,680
and so these atomic blocks are a way to

359
00:14:27,680 --> 00:14:29,680
formalize the previous approaches from

360
00:14:29,680 --> 00:14:33,519
some time oxygen implementation

361
00:14:35,920 --> 00:14:39,199
okay so now how do we use these

362
00:14:39,199 --> 00:14:40,320
how do we

363
00:14:40,320 --> 00:14:44,800
use this all computation with batching

364
00:14:44,800 --> 00:14:47,760
so remember that for atomic blocks

365
00:14:47,760 --> 00:14:49,760
we need to make sure that

366
00:14:49,760 --> 00:14:51,360
the

367
00:14:51,360 --> 00:14:54,160
information the only information

368
00:14:54,160 --> 00:14:56,560
the timing only depends on

369
00:14:56,560 --> 00:14:59,760
which of the uh which of the actions

370
00:14:59,760 --> 00:15:01,199
we're computing

371
00:15:01,199 --> 00:15:02,880
and doesn't leak information about

372
00:15:02,880 --> 00:15:05,439
anything else

373
00:15:05,839 --> 00:15:08,480
but with batches

374
00:15:08,480 --> 00:15:10,240
there's one extra piece of information

375
00:15:10,240 --> 00:15:12,639
we also need to

376
00:15:12,639 --> 00:15:16,000
where we also need to protect

377
00:15:16,000 --> 00:15:18,240
which of the isogenes in the batch we

378
00:15:18,240 --> 00:15:20,000
use

379
00:15:20,000 --> 00:15:21,519
okay

380
00:15:21,519 --> 00:15:22,240
so

381
00:15:22,240 --> 00:15:24,480
uh let me just give you the algorithm on

382
00:15:24,480 --> 00:15:26,800
how to extend what we just had the

383
00:15:26,800 --> 00:15:28,560
computation

384
00:15:28,560 --> 00:15:31,759
for uh isotonic you in batches and then

385
00:15:31,759 --> 00:15:34,959
tell you what we need to fix

386
00:15:34,959 --> 00:15:36,720
so again if you want to compute isogen

387
00:15:36,720 --> 00:15:39,120
is using batches then we need to find a

388
00:15:39,120 --> 00:15:40,399
suitable point

389
00:15:40,399 --> 00:15:41,920
and we can

390
00:15:41,920 --> 00:15:44,560
make it so that the point uh has ordered

391
00:15:44,560 --> 00:15:46,720
that only depends on the batches and not

392
00:15:46,720 --> 00:15:50,160
on the individual primes

393
00:15:50,160 --> 00:15:51,040
then

394
00:15:51,040 --> 00:15:51,839
uh

395
00:15:51,839 --> 00:15:54,320
again we need to take some some scalar

396
00:15:54,320 --> 00:15:56,560
multiples

397
00:15:56,560 --> 00:15:59,040
and in most of the steps we can make it

398
00:15:59,040 --> 00:16:00,240
so that the

399
00:16:00,240 --> 00:16:02,480
procedures only depend on the batches

400
00:16:02,480 --> 00:16:04,720
but you see that there's a bunch of

401
00:16:04,720 --> 00:16:07,199
scale multiplications that depend on

402
00:16:07,199 --> 00:16:09,600
which prime in the batch we chose

403
00:16:09,600 --> 00:16:12,000
and then there are isogenate evaluations

404
00:16:12,000 --> 00:16:15,279
that also depend on the isogenate the

405
00:16:15,279 --> 00:16:18,480
the actual degree that we chose

406
00:16:18,480 --> 00:16:22,720
so those are those are the steps in red

407
00:16:22,720 --> 00:16:24,800
fixing the scale multiplication is easy

408
00:16:24,800 --> 00:16:26,639
because with very small overhead we can

409
00:16:26,639 --> 00:16:28,560
just do it

410
00:16:28,560 --> 00:16:31,120
we can just multiply by all the primes

411
00:16:31,120 --> 00:16:32,800
in the batch

412
00:16:32,800 --> 00:16:34,000
and

413
00:16:34,000 --> 00:16:36,079
multiplying by the chosen prime is done

414
00:16:36,079 --> 00:16:38,000
as a dummy operation so that's with very

415
00:16:38,000 --> 00:16:40,079
small overhead

416
00:16:40,079 --> 00:16:42,160
but how do we fix this five isogen and

417
00:16:42,160 --> 00:16:43,920
this eleven isotonia

418
00:16:43,920 --> 00:16:46,160
how do we how do we do it so that this

419
00:16:46,160 --> 00:16:48,320
computation is the same

420
00:16:48,320 --> 00:16:51,040
for all primes in the batch

421
00:16:51,040 --> 00:16:52,480
in a way

422
00:16:52,480 --> 00:16:54,880
uh in an efficient way we could also

423
00:16:54,880 --> 00:16:56,639
just compute

424
00:16:56,639 --> 00:16:58,240
three five and the seven isotonix

425
00:16:58,240 --> 00:16:59,360
somehow

426
00:16:59,360 --> 00:17:01,920
um and throw away the results but that

427
00:17:01,920 --> 00:17:04,480
would be very inefficient

428
00:17:04,480 --> 00:17:06,559
so the answer to that is the matrices

429
00:17:06,559 --> 00:17:07,760
isogenic

430
00:17:07,760 --> 00:17:09,280
and to explain it

431
00:17:09,280 --> 00:17:11,359
again we go into what actually happens

432
00:17:11,359 --> 00:17:15,359
when we're computing these isogenes

433
00:17:15,439 --> 00:17:18,400
so to compute an eleventh isogenic

434
00:17:18,400 --> 00:17:20,000
we need to

435
00:17:20,000 --> 00:17:23,520
enumerate some multiples of the point

436
00:17:23,520 --> 00:17:26,400
we construct some polynomial which is

437
00:17:26,400 --> 00:17:29,200
the product of linear factors that

438
00:17:29,200 --> 00:17:31,440
are taken from the x coordinates of the

439
00:17:31,440 --> 00:17:32,880
points

440
00:17:32,880 --> 00:17:34,480
in step one

441
00:17:34,480 --> 00:17:37,039
and then from from this polynomial we

442
00:17:37,039 --> 00:17:38,960
somehow somehow derived this a

443
00:17:38,960 --> 00:17:41,520
coefficient

444
00:17:41,679 --> 00:17:44,160
well but if we if we're computing 13

445
00:17:44,160 --> 00:17:46,240
isogenic instead we only need to add one

446
00:17:46,240 --> 00:17:48,160
multiple and we only need to multiply by

447
00:17:48,160 --> 00:17:50,390
one extra linear factor

448
00:17:50,390 --> 00:17:51,840
[Music]

449
00:17:51,840 --> 00:17:54,559
if we do a 17 isotonia then we need to

450
00:17:54,559 --> 00:17:58,080
add two more multiples and we need to

451
00:17:58,080 --> 00:18:02,879
multiply by two more linear factors

452
00:18:03,200 --> 00:18:05,760
or the other way around

453
00:18:05,760 --> 00:18:08,160
if we're computing a seven isolation a

454
00:18:08,160 --> 00:18:11,440
the code already computes everything

455
00:18:11,440 --> 00:18:13,520
that is needed to compute it eleven

456
00:18:13,520 --> 00:18:17,039
a or a 13 isotonian

457
00:18:17,120 --> 00:18:18,960
so

458
00:18:18,960 --> 00:18:21,039
for the primes in the batch

459
00:18:21,039 --> 00:18:24,080
we can compute

460
00:18:24,080 --> 00:18:26,400
isogeny for any prime in the batch at

461
00:18:26,400 --> 00:18:29,520
the cost of the largest prime

462
00:18:29,520 --> 00:18:31,280
at the cost of uh

463
00:18:31,280 --> 00:18:35,440
using dummy dummy operations

464
00:18:37,360 --> 00:18:40,559
uh this matrix property of isogenes that

465
00:18:40,559 --> 00:18:43,200
they somehow uh

466
00:18:43,200 --> 00:18:45,039
you just you can just keep adding things

467
00:18:45,039 --> 00:18:48,000
to compute isotonix with larger degree

468
00:18:48,000 --> 00:18:50,480
this was already already known

469
00:18:50,480 --> 00:18:52,400
uh what is new is that we notice that

470
00:18:52,400 --> 00:18:55,280
this property is also for the new value

471
00:18:55,280 --> 00:18:58,320
square root formulas

472
00:18:58,320 --> 00:19:00,320
and the reason why we're getting these

473
00:19:00,320 --> 00:19:02,080
speed ups is that

474
00:19:02,080 --> 00:19:04,400
we realize that it's actually

475
00:19:04,400 --> 00:19:06,960
this actually works well with matching

476
00:19:06,960 --> 00:19:08,960
because you don't want to

477
00:19:08,960 --> 00:19:11,120
you don't want to pay the

478
00:19:11,120 --> 00:19:12,480
cost

479
00:19:12,480 --> 00:19:15,039
for i for a small isotonia at the cost

480
00:19:15,039 --> 00:19:17,840
of a large prime isotonia but if you

481
00:19:17,840 --> 00:19:20,000
have batches then

482
00:19:20,000 --> 00:19:21,679
if the primes in the batch have similar

483
00:19:21,679 --> 00:19:22,559
size

484
00:19:22,559 --> 00:19:23,520
then

485
00:19:23,520 --> 00:19:25,440
paying the cost for a slightly larger

486
00:19:25,440 --> 00:19:28,400
prime is not such a big overhead

487
00:19:28,400 --> 00:19:30,240
but of course now you need to know how

488
00:19:30,240 --> 00:19:32,720
how to how to set it up so that these

489
00:19:32,720 --> 00:19:34,960
prime and so these batches

490
00:19:34,960 --> 00:19:36,080
um

491
00:19:36,080 --> 00:19:39,840
actually give you the efficiency

492
00:19:42,799 --> 00:19:45,440
well in general we don't know how to set

493
00:19:45,440 --> 00:19:46,240
up

494
00:19:46,240 --> 00:19:48,480
batches efficiently we don't know how to

495
00:19:48,480 --> 00:19:49,440
sell

496
00:19:49,440 --> 00:19:51,360
set it up because it looks like a very

497
00:19:51,360 --> 00:19:54,240
complicated uh optimization problem

498
00:19:54,240 --> 00:19:55,840
but what we can do

499
00:19:55,840 --> 00:19:57,600
we can estimate the cost

500
00:19:57,600 --> 00:19:59,440
of the whole

501
00:19:59,440 --> 00:20:02,080
group action evaluation for any batch

502
00:20:02,080 --> 00:20:04,880
configuration so if you tell us

503
00:20:04,880 --> 00:20:06,559
if we set up the

504
00:20:06,559 --> 00:20:08,080
number of batches or split the primes

505
00:20:08,080 --> 00:20:10,240
into batches and we

506
00:20:10,240 --> 00:20:12,559
give the bounds for each batch then we

507
00:20:12,559 --> 00:20:14,240
can give a pretty accurate estimate of

508
00:20:14,240 --> 00:20:17,679
what the resulting cost will be

509
00:20:17,679 --> 00:20:20,159
and then we can use this cost function

510
00:20:20,159 --> 00:20:22,799
to do a greedy algorithm to start from

511
00:20:22,799 --> 00:20:25,360
some configuration and adaptively try to

512
00:20:25,360 --> 00:20:27,200
change it so that

513
00:20:27,200 --> 00:20:28,960
we get a configuration with a smaller

514
00:20:28,960 --> 00:20:30,559
cost

515
00:20:30,559 --> 00:20:32,640
and this way

516
00:20:32,640 --> 00:20:35,440
we arrived for instance at the uh this

517
00:20:35,440 --> 00:20:37,679
is our best uh current best batch

518
00:20:37,679 --> 00:20:40,320
batching for seaside 512.

519
00:20:40,320 --> 00:20:43,440
uh you see that the primes

520
00:20:43,440 --> 00:20:45,840
in one batch are usually pretty close to

521
00:20:45,840 --> 00:20:47,840
each other so that there's no big

522
00:20:47,840 --> 00:20:50,559
overhead remember that in batching

523
00:20:50,559 --> 00:20:53,280
you pay the cost

524
00:20:53,280 --> 00:20:55,039
for the smallest isogeny is the same as

525
00:20:55,039 --> 00:20:57,200
the cost for the largest isolate that's

526
00:20:57,200 --> 00:20:59,520
why the first batches with small primes

527
00:20:59,520 --> 00:21:00,240
are

528
00:21:00,240 --> 00:21:01,840
rather small

529
00:21:01,840 --> 00:21:03,200
and then

530
00:21:03,200 --> 00:21:06,480
you see that the batches get larger

531
00:21:06,480 --> 00:21:09,520
as the primes increase and the one prime

532
00:21:09,520 --> 00:21:11,600
that's a lot larger than all the other

533
00:21:11,600 --> 00:21:13,520
primes is isolated because you don't

534
00:21:13,520 --> 00:21:15,520
want to pay the cost

535
00:21:15,520 --> 00:21:17,360
for this prime already for these smaller

536
00:21:17,360 --> 00:21:19,760
primes

537
00:21:21,919 --> 00:21:23,360
okay

538
00:21:23,360 --> 00:21:25,200
we also claim that our algorithm is

539
00:21:25,200 --> 00:21:26,720
constant time

540
00:21:26,720 --> 00:21:28,080
and

541
00:21:28,080 --> 00:21:30,320
beyond just understanding atomic blocks

542
00:21:30,320 --> 00:21:31,039
and

543
00:21:31,039 --> 00:21:32,000
uh

544
00:21:32,000 --> 00:21:34,880
having conceptually uh good ideas about

545
00:21:34,880 --> 00:21:36,880
how constant time should look like

546
00:21:36,880 --> 00:21:40,000
we also use background to check it

547
00:21:40,000 --> 00:21:40,799
so

548
00:21:40,799 --> 00:21:43,360
what can balgram do for us

549
00:21:43,360 --> 00:21:44,720
we can

550
00:21:44,720 --> 00:21:46,559
check whether there's any flow from the

551
00:21:46,559 --> 00:21:48,559
secret data to

552
00:21:48,559 --> 00:21:50,720
any branches or any

553
00:21:50,720 --> 00:21:52,559
arrow indices

554
00:21:52,559 --> 00:21:53,520
okay

555
00:21:53,520 --> 00:21:54,610
so if you

556
00:21:54,610 --> 00:21:55,840
[Music]

557
00:21:55,840 --> 00:21:58,559
if you just execute your data then the

558
00:21:58,559 --> 00:22:00,880
secret data might impact somehow the

559
00:22:00,880 --> 00:22:02,720
code execution

560
00:22:02,720 --> 00:22:04,000
but if you

561
00:22:04,000 --> 00:22:07,440
declare them as undefined in al grind

562
00:22:07,440 --> 00:22:09,679
then if they actually do impact the code

563
00:22:09,679 --> 00:22:11,520
execution

564
00:22:11,520 --> 00:22:13,679
then valgrind will complain

565
00:22:13,679 --> 00:22:15,600
and then you can do a manual check and

566
00:22:15,600 --> 00:22:17,120
see what's happening with your code and

567
00:22:17,120 --> 00:22:18,640
fix it so

568
00:22:18,640 --> 00:22:20,400
if uh

569
00:22:20,400 --> 00:22:22,000
if uh

570
00:22:22,000 --> 00:22:24,559
do these checks with balgrin then you

571
00:22:24,559 --> 00:22:27,440
can have a pretty solid

572
00:22:27,440 --> 00:22:30,320
confirmation that that your code

573
00:22:30,320 --> 00:22:33,679
does not leak timing information

574
00:22:33,679 --> 00:22:36,880
about secret data

575
00:22:38,799 --> 00:22:40,559
finally let's talk about the speed of

576
00:22:40,559 --> 00:22:41,440
our

577
00:22:41,440 --> 00:22:45,039
of our c type software

578
00:22:46,080 --> 00:22:49,280
the green lines are the new c type

579
00:22:49,280 --> 00:22:51,919
algorithm and

580
00:22:51,919 --> 00:22:54,880
here how to read the table

581
00:22:54,880 --> 00:22:56,799
this is the size of the prime this is

582
00:22:56,799 --> 00:22:58,720
the size of the public key

583
00:22:58,720 --> 00:23:01,440
and depending on one or two in the third

584
00:23:01,440 --> 00:23:03,760
column we either do the group evaluation

585
00:23:03,760 --> 00:23:04,960
or also

586
00:23:04,960 --> 00:23:09,679
a public key validation for the

587
00:23:09,679 --> 00:23:12,080
for the seaside protocol

588
00:23:12,080 --> 00:23:13,120
and you see

589
00:23:13,120 --> 00:23:14,000
that

590
00:23:14,000 --> 00:23:15,360
uh

591
00:23:15,360 --> 00:23:16,559
if you count the number of

592
00:23:16,559 --> 00:23:18,640
multiplication squares and additions and

593
00:23:18,640 --> 00:23:21,120
depending on how you um

594
00:23:21,120 --> 00:23:23,200
how you want to uh

595
00:23:23,200 --> 00:23:26,720
how you estimate the relative cost

596
00:23:26,720 --> 00:23:28,640
every time we get

597
00:23:28,640 --> 00:23:31,200
significant speed ups compared to the

598
00:23:31,200 --> 00:23:32,880
compared to previous

599
00:23:32,880 --> 00:23:36,080
constant time implementations

600
00:23:36,080 --> 00:23:37,200
we also

601
00:23:37,200 --> 00:23:40,320
we also measure the cycles on skylake

602
00:23:40,320 --> 00:23:43,600
and even there we also have a

603
00:23:43,600 --> 00:23:46,639
significant improvement

604
00:23:48,480 --> 00:23:51,039
so to sum up what is c-type

605
00:23:51,039 --> 00:23:53,840
c-tide is a new key space for seaside

606
00:23:53,840 --> 00:23:56,159
using batching

607
00:23:56,159 --> 00:23:59,039
c-type is a new constant time algorithm

608
00:23:59,039 --> 00:24:01,440
to evaluate the group action

609
00:24:01,440 --> 00:24:04,720
using the matrices isogenes

610
00:24:04,720 --> 00:24:06,720
in c-type we also formalize atomic

611
00:24:06,720 --> 00:24:09,360
blocks so we formalize evaluation of the

612
00:24:09,360 --> 00:24:13,120
group action as a sequence of isogenes

613
00:24:13,120 --> 00:24:14,880
we verify

614
00:24:14,880 --> 00:24:18,400
our constant time claims using valgrind

615
00:24:18,400 --> 00:24:21,679
and we obtain significant speed records

616
00:24:21,679 --> 00:24:24,000
and you can see our article and you can

617
00:24:24,000 --> 00:24:26,480
get most of all you can get the code at

618
00:24:26,480 --> 00:24:27,679
our website

619
00:24:27,679 --> 00:24:30,919
thank you

