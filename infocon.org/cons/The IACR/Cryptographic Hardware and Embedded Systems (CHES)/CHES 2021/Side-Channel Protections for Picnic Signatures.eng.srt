1
00:00:00,240 --> 00:00:02,240
hello everyone welcome to the longer

2
00:00:02,240 --> 00:00:04,560
version of the talk for our paper

3
00:00:04,560 --> 00:00:06,879
published in teachers cyber channel

4
00:00:06,879 --> 00:00:09,519
protections for picnic signatures

5
00:00:09,519 --> 00:00:11,519
this is a joint work with stego arania

6
00:00:11,519 --> 00:00:14,320
from oasis university sebastian varun

7
00:00:14,320 --> 00:00:17,039
thomas eisenbars and luca wilke from the

8
00:00:17,039 --> 00:00:18,640
university of lubeck

9
00:00:18,640 --> 00:00:20,480
and greg zabarucha from microsoft

10
00:00:20,480 --> 00:00:21,680
research

11
00:00:21,680 --> 00:00:23,760
i am akira takashi from aussie

12
00:00:23,760 --> 00:00:26,320
university and i will be talking about

13
00:00:26,320 --> 00:00:28,400
overview of our main result

14
00:00:28,400 --> 00:00:30,720
in the second part okan circle from the

15
00:00:30,720 --> 00:00:32,640
university of lubeck will give more

16
00:00:32,640 --> 00:00:35,200
details about our implementation

17
00:00:35,200 --> 00:00:37,280
as well as the concrete side channel

18
00:00:37,280 --> 00:00:39,840
leakage analysis

19
00:00:39,840 --> 00:00:41,600
so this research is motivated by the

20
00:00:41,600 --> 00:00:44,000
fact that side channel resistance of

21
00:00:44,000 --> 00:00:46,559
cryptographic schemes is becoming more

22
00:00:46,559 --> 00:00:48,960
and more relevant as they are becoming

23
00:00:48,960 --> 00:00:50,800
as they are deployed in real life

24
00:00:50,800 --> 00:00:52,160
condition

25
00:00:52,160 --> 00:00:54,079
it is also one of the important

26
00:00:54,079 --> 00:00:56,719
evaluation criteria of the nist first

27
00:00:56,719 --> 00:00:59,920
quantum crypto standardization process

28
00:00:59,920 --> 00:01:02,239
however unlike other candidates there

29
00:01:02,239 --> 00:01:04,080
has been little study on side channel

30
00:01:04,080 --> 00:01:05,840
resilience of the piconic signature

31
00:01:05,840 --> 00:01:08,479
schemes or more generally signatures

32
00:01:08,479 --> 00:01:10,159
based on npc in the head general

33
00:01:10,159 --> 00:01:11,760
knowledge proof

34
00:01:11,760 --> 00:01:14,159
so we want to push forward this line of

35
00:01:14,159 --> 00:01:16,560
research

36
00:01:16,640 --> 00:01:19,040
let's briefly reach up the current state

37
00:01:19,040 --> 00:01:21,600
of the art picnic is a fiat chamier type

38
00:01:21,600 --> 00:01:22,799
signature

39
00:01:22,799 --> 00:01:25,119
derived from npc in the head generates

40
00:01:25,119 --> 00:01:27,119
proof of ishai as well

41
00:01:27,119 --> 00:01:28,960
it has a couple of nice features for

42
00:01:28,960 --> 00:01:31,680
example its security doesn't rely on any

43
00:01:31,680 --> 00:01:33,520
number of theoretical assumptions

44
00:01:33,520 --> 00:01:35,119
essentially the only

45
00:01:35,119 --> 00:01:37,280
assumptions we need are security of

46
00:01:37,280 --> 00:01:40,000
block cipher and hash function model as

47
00:01:40,000 --> 00:01:42,079
a random oracle

48
00:01:42,079 --> 00:01:44,479
it also supports various parameters and

49
00:01:44,479 --> 00:01:46,799
the different signing methods

50
00:01:46,799 --> 00:01:48,720
however the first version of picnic

51
00:01:48,720 --> 00:01:50,399
implementation was shown to be

52
00:01:50,399 --> 00:01:52,840
vulnerable to differential power

53
00:01:52,840 --> 00:01:55,040
analysis although masking countermeasure

54
00:01:55,040 --> 00:01:57,759
was proposed last year if it left

55
00:01:57,759 --> 00:02:00,560
several practical challenges for example

56
00:02:00,560 --> 00:02:02,799
it had to change the format of output

57
00:02:02,799 --> 00:02:05,520
signature which breaks interoperability

58
00:02:05,520 --> 00:02:09,038
with an existing verification algorithm

59
00:02:09,038 --> 00:02:12,000
moreover it increases the signature size

60
00:02:12,000 --> 00:02:14,400
depending on the masking order

61
00:02:14,400 --> 00:02:16,319
these features seem undesirable in

62
00:02:16,319 --> 00:02:18,879
practice and in fact other masked post

63
00:02:18,879 --> 00:02:21,280
quantum signatures like division or q

64
00:02:21,280 --> 00:02:24,160
tesla didn't have such issues

65
00:02:24,160 --> 00:02:25,760
on the other hand there's also an

66
00:02:25,760 --> 00:02:28,239
updated version of a picnic called

67
00:02:28,239 --> 00:02:29,599
picking 3

68
00:02:29,599 --> 00:02:32,480
which follows the npc in the ed paradigm

69
00:02:32,480 --> 00:02:34,160
extended with the so-called

70
00:02:34,160 --> 00:02:37,760
pre-processing phase and leads to more a

71
00:02:37,760 --> 00:02:39,599
compact signature

72
00:02:39,599 --> 00:02:42,239
unfortunately picnic 3 has never been

73
00:02:42,239 --> 00:02:46,160
evaluated from side channel perspective

74
00:02:46,160 --> 00:02:48,319
so in this research we address

75
00:02:48,319 --> 00:02:50,879
essentially two questions first could a

76
00:02:50,879 --> 00:02:53,200
cyber channel attacker exploit npc in

77
00:02:53,200 --> 00:02:55,680
the head with pre-processing to attack

78
00:02:55,680 --> 00:02:57,440
in picnic 3.

79
00:02:57,440 --> 00:03:00,319
second can we maintain interoperability

80
00:03:00,319 --> 00:03:02,640
and signature size while applying

81
00:03:02,640 --> 00:03:04,879
masking counter measures

82
00:03:04,879 --> 00:03:06,560
we answer these questions with the

83
00:03:06,560 --> 00:03:09,599
following results first we identify two

84
00:03:09,599 --> 00:03:12,080
types of side channel vulnerability of

85
00:03:12,080 --> 00:03:13,680
picnic three

86
00:03:13,680 --> 00:03:15,280
well the first one is a direct

87
00:03:15,280 --> 00:03:17,120
adaptation of the previous attack from

88
00:03:17,120 --> 00:03:20,159
picking one the second attack is new and

89
00:03:20,159 --> 00:03:23,680
exploits specific properties of mpc head

90
00:03:23,680 --> 00:03:26,560
with pre-processing paradigm

91
00:03:26,560 --> 00:03:28,000
as a counter measure we suggest a

92
00:03:28,000 --> 00:03:30,400
generic approach to mask zero large

93
00:03:30,400 --> 00:03:33,200
proof using npc in the head with

94
00:03:33,200 --> 00:03:34,720
pre-processing

95
00:03:34,720 --> 00:03:37,200
in the paper we proved that our masked

96
00:03:37,200 --> 00:03:39,680
signing operations satisfied the

97
00:03:39,680 --> 00:03:41,920
standard masking security notion called

98
00:03:41,920 --> 00:03:43,840
t probing security

99
00:03:43,840 --> 00:03:46,319
and we further support our claim using

100
00:03:46,319 --> 00:03:48,480
the formal verification tool called mask

101
00:03:48,480 --> 00:03:49,599
barif

102
00:03:49,599 --> 00:03:52,000
to achieve probable security we have to

103
00:03:52,000 --> 00:03:54,000
sacrifice performance due to masking

104
00:03:54,000 --> 00:03:57,200
overhead but we also suggest some

105
00:03:57,200 --> 00:03:59,920
heuristic ways to improve performance by

106
00:03:59,920 --> 00:04:02,480
partially training trading for more deep

107
00:04:02,480 --> 00:04:04,239
rolling security

108
00:04:04,239 --> 00:04:06,560
still security of this heuristic can be

109
00:04:06,560 --> 00:04:09,200
validated with experimental leakage

110
00:04:09,200 --> 00:04:10,640
analysis

111
00:04:10,640 --> 00:04:12,480
we then apply our generic masking

112
00:04:12,480 --> 00:04:14,879
counter measures to picnic three so that

113
00:04:14,879 --> 00:04:17,839
we can achieve first order uh masking

114
00:04:17,839 --> 00:04:20,720
implementation masked implementation

115
00:04:20,720 --> 00:04:23,360
as a side contribution we also publicly

116
00:04:23,360 --> 00:04:26,639
release a masked sha-3 implementation

117
00:04:26,639 --> 00:04:29,120
used as a building block

118
00:04:29,120 --> 00:04:31,360
we finally conclude with the practical

119
00:04:31,360 --> 00:04:34,880
electromagnetic cytogenic analysis

120
00:04:34,880 --> 00:04:36,800
and ocam will give more insights on the

121
00:04:36,800 --> 00:04:39,680
latter two points

122
00:04:40,000 --> 00:04:41,919
so i'm going to show how side channel

123
00:04:41,919 --> 00:04:44,160
attackers can steal the secret signing

124
00:04:44,160 --> 00:04:46,560
key of picnic 3.

125
00:04:46,560 --> 00:04:48,800
let's take a look at how generous proof

126
00:04:48,800 --> 00:04:52,000
using the mpc in the head works

127
00:04:52,000 --> 00:04:54,560
so here the approver holds a secret

128
00:04:54,560 --> 00:04:56,880
shared key and the verifier has some

129
00:04:56,880 --> 00:04:59,840
circuit description f as well as its

130
00:04:59,840 --> 00:05:01,199
output x

131
00:05:01,199 --> 00:05:04,320
when f is evaluated and on the secret

132
00:05:04,320 --> 00:05:06,000
key

133
00:05:06,000 --> 00:05:08,479
using the secret shared key the prover

134
00:05:08,479 --> 00:05:10,880
executes some multi-party computation

135
00:05:10,880 --> 00:05:13,680
protocols in her head using some

136
00:05:13,680 --> 00:05:15,520
imaginary parties

137
00:05:15,520 --> 00:05:18,160
and each party outputs some view

138
00:05:18,160 --> 00:05:20,720
consisting of secret key share

139
00:05:20,720 --> 00:05:23,520
randomness and all the incoming messages

140
00:05:23,520 --> 00:05:25,199
in the protocol

141
00:05:25,199 --> 00:05:28,160
she commits her to every view and on

142
00:05:28,160 --> 00:05:31,199
receiving some challenge index she

143
00:05:31,199 --> 00:05:34,400
reviews a subset of views

144
00:05:34,400 --> 00:05:36,560
then the verifier essentially checks

145
00:05:36,560 --> 00:05:39,919
that mpc was executed correctly

146
00:05:39,919 --> 00:05:42,080
so that's an overview of npc in the head

147
00:05:42,080 --> 00:05:43,600
paradigm

148
00:05:43,600 --> 00:05:46,320
the first attack is relatively simple

149
00:05:46,320 --> 00:05:47,759
of course

150
00:05:47,759 --> 00:05:49,600
the unopened party's view is very

151
00:05:49,600 --> 00:05:51,120
sensitive

152
00:05:51,120 --> 00:05:53,520
because it contains the remaining share

153
00:05:53,520 --> 00:05:55,120
of secret key

154
00:05:55,120 --> 00:05:57,759
so if a cyber channel adversely obtains

155
00:05:57,759 --> 00:05:59,520
some leakage information

156
00:05:59,520 --> 00:06:00,960
of that share

157
00:06:00,960 --> 00:06:03,280
they can immediately recover the secret

158
00:06:03,280 --> 00:06:04,400
key

159
00:06:04,400 --> 00:06:06,160
this type of attack was already

160
00:06:06,160 --> 00:06:08,800
discovered against piconic one and we

161
00:06:08,800 --> 00:06:11,360
can show that essentially uh the same

162
00:06:11,360 --> 00:06:13,600
attack also applies to picnic three in

163
00:06:13,600 --> 00:06:16,400
the direct manner

164
00:06:16,800 --> 00:06:19,199
so what about the mpc in the head with

165
00:06:19,199 --> 00:06:20,880
preprocessing

166
00:06:20,880 --> 00:06:23,840
in this extended paradigm the mpc

167
00:06:23,840 --> 00:06:26,160
protocol is divided into

168
00:06:26,160 --> 00:06:27,440
two phases

169
00:06:27,440 --> 00:06:29,520
the first part is offline

170
00:06:29,520 --> 00:06:31,680
meaning that it can be executed

171
00:06:31,680 --> 00:06:34,720
independently of any input values and

172
00:06:34,720 --> 00:06:36,800
parties use the random scene to

173
00:06:36,800 --> 00:06:40,240
pre-process some state information

174
00:06:40,240 --> 00:06:43,360
then in the off online phase parties can

175
00:06:43,360 --> 00:06:45,360
efficiently perform the actual

176
00:06:45,360 --> 00:06:48,240
computation by making use of the

177
00:06:48,240 --> 00:06:49,759
pre-processed

178
00:06:49,759 --> 00:06:51,840
states

179
00:06:51,840 --> 00:06:54,080
once mpc protocol is done the proverb

180
00:06:54,080 --> 00:06:55,280
commits to

181
00:06:55,280 --> 00:06:58,479
both online and offline phases

182
00:06:58,479 --> 00:07:00,639
now the challenge has two dimensions the

183
00:07:00,639 --> 00:07:03,840
first part b indicates whether offline

184
00:07:03,840 --> 00:07:07,120
or online phase is to be revealed

185
00:07:07,120 --> 00:07:09,759
in the former case approval simply opens

186
00:07:09,759 --> 00:07:12,960
all the random c's used for the offline

187
00:07:12,960 --> 00:07:14,240
computation

188
00:07:14,240 --> 00:07:17,039
which contain no sensitive information

189
00:07:17,039 --> 00:07:21,120
if the of online phase is to be reviewed

190
00:07:21,120 --> 00:07:23,599
uh then the approver essentially opens

191
00:07:23,599 --> 00:07:26,080
all but one views as usual

192
00:07:26,080 --> 00:07:28,400
and verify your checks that either

193
00:07:28,400 --> 00:07:31,280
offline or online phase is executed

194
00:07:31,280 --> 00:07:33,758
correctly

195
00:07:33,919 --> 00:07:36,560
so before describing an attack let's see

196
00:07:36,560 --> 00:07:40,479
why and how pre-processing is used

197
00:07:40,479 --> 00:07:42,080
in the mpc setting

198
00:07:42,080 --> 00:07:45,039
multiplication of to share two secret

199
00:07:45,039 --> 00:07:48,160
shared inputs is often costly so we want

200
00:07:48,160 --> 00:07:51,199
to save online computational costs uh by

201
00:07:51,199 --> 00:07:54,319
pushing some work to the offline phase

202
00:07:54,319 --> 00:07:56,960
here's a standard trick

203
00:07:56,960 --> 00:07:58,479
in the offline phase

204
00:07:58,479 --> 00:08:00,240
parties generate a lot of random

205
00:08:00,240 --> 00:08:02,639
sharings which are so called vivo

206
00:08:02,639 --> 00:08:03,680
triples

207
00:08:03,680 --> 00:08:06,080
they do not depend on inputs to the

208
00:08:06,080 --> 00:08:07,440
circuit

209
00:08:07,440 --> 00:08:09,759
and in particular they can be easily

210
00:08:09,759 --> 00:08:13,840
generated in the mpc in the head setting

211
00:08:13,840 --> 00:08:15,520
since the proverb can essentially

212
00:08:15,520 --> 00:08:20,160
manipulate all parties however they like

213
00:08:20,160 --> 00:08:21,840
in the online phase

214
00:08:21,840 --> 00:08:24,080
you can safely reconstruct the shares

215
00:08:24,080 --> 00:08:27,120
after adding pre-processed randomness

216
00:08:27,120 --> 00:08:29,599
lambda to secret inputs

217
00:08:29,599 --> 00:08:31,680
x and y

218
00:08:31,680 --> 00:08:33,679
then by rewriting the multiplication

219
00:08:33,679 --> 00:08:34,799
equation

220
00:08:34,799 --> 00:08:36,799
using the random triple

221
00:08:36,799 --> 00:08:39,360
you can easily compute the result

222
00:08:39,360 --> 00:08:42,559
without any nonlinear operations

223
00:08:42,559 --> 00:08:45,120
however you can notice that this offline

224
00:08:45,120 --> 00:08:46,880
online paradigm is actually another

225
00:08:46,880 --> 00:08:50,000
attack surface and that can be exploited

226
00:08:50,000 --> 00:08:53,680
by cytochannel adversities

227
00:08:53,680 --> 00:08:55,920
so in this attack we assume that the

228
00:08:55,920 --> 00:08:58,560
offline phase is revealed

229
00:08:58,560 --> 00:09:00,480
in that case all pre-processing

230
00:09:00,480 --> 00:09:02,160
information

231
00:09:02,160 --> 00:09:05,760
from the offline phase is made public

232
00:09:05,760 --> 00:09:08,240
so if the attacker has approved the

233
00:09:08,240 --> 00:09:11,040
right information from the the online

234
00:09:11,040 --> 00:09:13,600
phase they have enough information to

235
00:09:13,600 --> 00:09:15,680
compute the secret

236
00:09:15,680 --> 00:09:18,480
as a security of the mpc protocol only

237
00:09:18,480 --> 00:09:21,200
holds when one of the pre-processing

238
00:09:21,200 --> 00:09:23,360
shares in private

239
00:09:23,360 --> 00:09:25,519
importantly this attack works

240
00:09:25,519 --> 00:09:27,680
independently of the number of parties

241
00:09:27,680 --> 00:09:28,959
in npc

242
00:09:28,959 --> 00:09:30,959
so you cannot mitigate it by simply

243
00:09:30,959 --> 00:09:34,240
tweaking the number of unopened parties

244
00:09:34,240 --> 00:09:36,480
which you might do using the previous

245
00:09:36,480 --> 00:09:37,920
countermeasure

246
00:09:37,920 --> 00:09:39,600
so we are motivated

247
00:09:39,600 --> 00:09:40,880
to design

248
00:09:40,880 --> 00:09:43,519
uh different approach

249
00:09:43,519 --> 00:09:45,839
so on a high level uh in our masking

250
00:09:45,839 --> 00:09:48,240
countermeasure the approver essentially

251
00:09:48,240 --> 00:09:50,399
shares the shares

252
00:09:50,399 --> 00:09:53,440
concretely each party's share is split

253
00:09:53,440 --> 00:09:55,680
again into some shares

254
00:09:55,680 --> 00:09:57,760
and every party

255
00:09:57,760 --> 00:10:00,560
internally does the computation in the

256
00:10:00,560 --> 00:10:01,920
masked way

257
00:10:01,920 --> 00:10:03,200
accordingly

258
00:10:03,200 --> 00:10:06,240
all the views are maintained in a secret

259
00:10:06,240 --> 00:10:08,000
shared form

260
00:10:08,000 --> 00:10:10,959
until the approval learns a challenge

261
00:10:10,959 --> 00:10:13,120
and once she obtained the challenge

262
00:10:13,120 --> 00:10:14,560
either

263
00:10:14,560 --> 00:10:17,040
she can keep them in a secret shared

264
00:10:17,040 --> 00:10:20,560
form when the offline phase is reviewed

265
00:10:20,560 --> 00:10:21,839
or

266
00:10:21,839 --> 00:10:24,640
she only needs to reconstruct views of

267
00:10:24,640 --> 00:10:28,000
opened parties when offline online phase

268
00:10:28,000 --> 00:10:30,000
is reviewed

269
00:10:30,000 --> 00:10:31,360
so in this way

270
00:10:31,360 --> 00:10:33,760
even if adversely it gets information of

271
00:10:33,760 --> 00:10:36,800
some share there's always at least one

272
00:10:36,800 --> 00:10:39,360
share of the view that remains a

273
00:10:39,360 --> 00:10:41,600
completely hit

274
00:10:41,600 --> 00:10:43,519
so with this approach we don't have to

275
00:10:43,519 --> 00:10:46,399
change the number of parties so it

276
00:10:46,399 --> 00:10:48,399
neither breaks interoperability with

277
00:10:48,399 --> 00:10:50,640
existing verification algorithms

278
00:10:50,640 --> 00:10:53,920
nor introduces any overhead in signature

279
00:10:53,920 --> 00:10:55,600
size due to masking

280
00:10:55,600 --> 00:10:58,000
while we can prove that it actually

281
00:10:58,000 --> 00:11:00,240
meets the standard masking security

282
00:11:00,240 --> 00:11:02,560
notion

283
00:11:03,600 --> 00:11:06,560
however one caveat is that we also have

284
00:11:06,560 --> 00:11:07,839
to mask

285
00:11:07,839 --> 00:11:10,399
seed expansion and the commitment and

286
00:11:10,399 --> 00:11:11,760
computations

287
00:11:11,760 --> 00:11:13,760
because the proverb doesn't know which

288
00:11:13,760 --> 00:11:16,399
of the offline or online phase can be

289
00:11:16,399 --> 00:11:20,000
made public before receiving a challenge

290
00:11:20,000 --> 00:11:22,399
in particular picnic 3 employs the shah

291
00:11:22,399 --> 00:11:26,240
3 hash function to commit to states and

292
00:11:26,240 --> 00:11:28,720
all the online and messages

293
00:11:28,720 --> 00:11:31,360
as we will see in benchmark masking all

294
00:11:31,360 --> 00:11:34,399
these hash implications is expensive

295
00:11:34,399 --> 00:11:36,720
and we would like to avoid that in

296
00:11:36,720 --> 00:11:38,720
practice

297
00:11:38,720 --> 00:11:41,040
so accordingly we also provide some

298
00:11:41,040 --> 00:11:43,920
heuristic options to partially unmask

299
00:11:43,920 --> 00:11:46,800
some non-sensitive hash computations

300
00:11:46,800 --> 00:11:48,880
the rationale behind this choice is as

301
00:11:48,880 --> 00:11:49,839
follows

302
00:11:49,839 --> 00:11:52,399
first since the signing operation is

303
00:11:52,399 --> 00:11:53,600
randomized

304
00:11:53,600 --> 00:11:56,320
some hash inputs that are unique for

305
00:11:56,320 --> 00:11:59,200
signature and not sensitive by regarding

306
00:11:59,200 --> 00:12:01,760
sha-3 as a random oracle

307
00:12:01,760 --> 00:12:04,320
and assuming that the attacker only gets

308
00:12:04,320 --> 00:12:05,760
to see

309
00:12:05,760 --> 00:12:08,800
t input bits of shadow

310
00:12:08,800 --> 00:12:11,920
second committed commitment outputs are

311
00:12:11,920 --> 00:12:13,920
part of the signature so they are

312
00:12:13,920 --> 00:12:16,399
definitely not sensitive

313
00:12:16,399 --> 00:12:18,480
under such a heuristic assumption we can

314
00:12:18,480 --> 00:12:20,720
actually selectively mask half of the

315
00:12:20,720 --> 00:12:23,600
shard three computations

316
00:12:23,600 --> 00:12:25,920
although we lose formal t probing

317
00:12:25,920 --> 00:12:28,399
security guarantee we were able to

318
00:12:28,399 --> 00:12:31,120
experimentally confirm that no leakage

319
00:12:31,120 --> 00:12:33,440
occurs from this heuristic version of

320
00:12:33,440 --> 00:12:35,760
implementation

321
00:12:35,760 --> 00:12:39,200
so that's it from me now i'm passing the

322
00:12:39,200 --> 00:12:40,720
button to open

323
00:12:40,720 --> 00:12:42,880
who is going to talk about

324
00:12:42,880 --> 00:12:45,600
further practical aspects of our results

325
00:12:45,600 --> 00:12:47,760
including benchmarks and leakage

326
00:12:47,760 --> 00:12:53,000
analysis of picnic 3 implementations

327
00:12:53,360 --> 00:12:54,880
thank you akira and i would like to

328
00:12:54,880 --> 00:12:57,040
welcome everyone again uh let me start

329
00:12:57,040 --> 00:12:58,320
with the performance results of our

330
00:12:58,320 --> 00:13:00,399
implementation in this table you can see

331
00:13:00,399 --> 00:13:02,800
the benchmark results of the intro

332
00:13:02,800 --> 00:13:04,399
here you can see the basement results

333
00:13:04,399 --> 00:13:06,320
and the interesting column is though is

334
00:13:06,320 --> 00:13:08,079
is actually the overhead so the

335
00:13:08,079 --> 00:13:10,560
highlighted draw corresponds to the

336
00:13:10,560 --> 00:13:12,160
unprotect unprotect picnic

337
00:13:12,160 --> 00:13:14,000
implementation and as you can see

338
00:13:14,000 --> 00:13:16,560
hashing covers the seventy percent of of

339
00:13:16,560 --> 00:13:19,200
the term of the operations

340
00:13:19,200 --> 00:13:21,279
so by adapting the masking technique of

341
00:13:21,279 --> 00:13:23,200
the chat tree we managed to reduce the

342
00:13:23,200 --> 00:13:24,399
overhead

343
00:13:24,399 --> 00:13:28,720
overhead 1.8 from 5.4 here you can use

344
00:13:28,720 --> 00:13:31,120
fully probable secure masking and mask

345
00:13:31,120 --> 00:13:33,519
every hashing or as i create script you

346
00:13:33,519 --> 00:13:35,760
can selectively choose hash function and

347
00:13:35,760 --> 00:13:38,320
mask only the sense the ones so i would

348
00:13:38,320 --> 00:13:39,680
like to continue with our practical

349
00:13:39,680 --> 00:13:41,760
setup so in this picture you can see an

350
00:13:41,760 --> 00:13:44,079
overview of our of our setup as our

351
00:13:44,079 --> 00:13:46,160
capturing device we use the tektronix

352
00:13:46,160 --> 00:13:49,519
ms06 with two different sampling grades

353
00:13:49,519 --> 00:13:52,639
and for and and as is our target device

354
00:13:52,639 --> 00:13:55,360
we have used stm32 discover the board

355
00:13:55,360 --> 00:13:57,120
which is suggested by the pokemon 4

356
00:13:57,120 --> 00:13:58,079
project

357
00:13:58,079 --> 00:14:00,160
and we have with that

358
00:14:00,160 --> 00:14:02,639
with that with an arm cortex m4 clocked

359
00:14:02,639 --> 00:14:06,160
at 1.8 megahertz as our test environment

360
00:14:06,160 --> 00:14:08,320
uh the leakage analysis code is working

361
00:14:08,320 --> 00:14:10,720
with the pcm for guitar preview thus the

362
00:14:10,720 --> 00:14:13,279
analysis can be reproduced reproduced

363
00:14:13,279 --> 00:14:14,560
easily

364
00:14:14,560 --> 00:14:16,560
and as our search engine source we have

365
00:14:16,560 --> 00:14:18,399
chosen the building capacitor as seen in

366
00:14:18,399 --> 00:14:19,839
the picture and placed our

367
00:14:19,839 --> 00:14:22,160
electromagnetic electromagnetic pro

368
00:14:22,160 --> 00:14:24,720
close to this point because uh that

369
00:14:24,720 --> 00:14:26,800
point is actually represents the power

370
00:14:26,800 --> 00:14:28,800
consumption the best

371
00:14:28,800 --> 00:14:32,079
and our analysis tool we have used tvla

372
00:14:32,079 --> 00:14:34,240
and this is a very simple statistical

373
00:14:34,240 --> 00:14:36,079
tool used in in the literature for

374
00:14:36,079 --> 00:14:38,880
leakage analysis it's a pass fail test

375
00:14:38,880 --> 00:14:40,800
to determine if an implementation has a

376
00:14:40,800 --> 00:14:43,360
leakage or not what we call leakage in

377
00:14:43,360 --> 00:14:45,120
this case of course the data dependent

378
00:14:45,120 --> 00:14:47,120
behavior of the device of course the

379
00:14:47,120 --> 00:14:49,120
analysis should be implemented carefully

380
00:14:49,120 --> 00:14:51,440
even even a small changes within the

381
00:14:51,440 --> 00:14:53,279
implementation such as usage of

382
00:14:53,279 --> 00:14:56,000
registers a response type of your random

383
00:14:56,000 --> 00:14:58,000
number generator or the synchronization

384
00:14:58,000 --> 00:15:00,000
between the target and the control pc

385
00:15:00,000 --> 00:15:02,079
detected by the by the test even if

386
00:15:02,079 --> 00:15:05,199
those are actually not exactly exactly

387
00:15:05,199 --> 00:15:08,079
exposable leakage or rear leakage those

388
00:15:08,079 --> 00:15:10,399
leakages can be can be seen

389
00:15:10,399 --> 00:15:12,399
so um so there are two different

390
00:15:12,399 --> 00:15:14,079
versions of this the first one is fixed

391
00:15:14,079 --> 00:15:16,720
versus random and this one is to detect

392
00:15:16,720 --> 00:15:19,199
all first order leakages of a device and

393
00:15:19,199 --> 00:15:21,680
the idea is to process either a fixed or

394
00:15:21,680 --> 00:15:23,920
random data and therefore this will give

395
00:15:23,920 --> 00:15:26,240
you a data dependency through the

396
00:15:26,240 --> 00:15:28,800
implementation by comparing the traces

397
00:15:28,800 --> 00:15:30,880
belonging to the fixed data and with the

398
00:15:30,880 --> 00:15:33,839
traces belonging to a random data

399
00:15:33,839 --> 00:15:35,519
and the second one is randomized is

400
00:15:35,519 --> 00:15:36,800
random

401
00:15:36,800 --> 00:15:38,880
in this case we always process a random

402
00:15:38,880 --> 00:15:41,279
data however the classification depends

403
00:15:41,279 --> 00:15:43,920
on a single bit inside inside the

404
00:15:43,920 --> 00:15:48,160
implementation therefore the second

405
00:15:48,399 --> 00:15:50,639
therefore the second method is used to

406
00:15:50,639 --> 00:15:52,399
observe specific targets in an

407
00:15:52,399 --> 00:15:54,240
implementation and our goal in this

408
00:15:54,240 --> 00:15:56,720
illegal analysis is to first show that

409
00:15:56,720 --> 00:15:58,560
the scrap attacks in the earlier parts

410
00:15:58,560 --> 00:15:59,279
of

411
00:15:59,279 --> 00:16:01,920
of our presentation are indeed possible

412
00:16:01,920 --> 00:16:04,079
and of course show that our mask picnic

413
00:16:04,079 --> 00:16:06,720
tree implementation is leakage free

414
00:16:06,720 --> 00:16:09,759
so the first attack is the same as by by

415
00:16:09,759 --> 00:16:12,399
getter's metal in this attack we use the

416
00:16:12,399 --> 00:16:14,880
values from the precomputation phase and

417
00:16:14,880 --> 00:16:16,880
the highlighted values corresponds to

418
00:16:16,880 --> 00:16:19,440
correspond corresponds to the attack and

419
00:16:19,440 --> 00:16:20,560
opened

420
00:16:20,560 --> 00:16:23,920
on the open face or probe uh probe on an

421
00:16:23,920 --> 00:16:26,160
unopened party and we see around a

422
00:16:26,160 --> 00:16:27,839
thousand traces the liquid leakage

423
00:16:27,839 --> 00:16:29,600
becomes absolute

424
00:16:29,600 --> 00:16:31,040
as you can see from the from the from

425
00:16:31,040 --> 00:16:32,720
the graph in the right hand side

426
00:16:32,720 --> 00:16:35,199
so in our second analysis we implement

427
00:16:35,199 --> 00:16:37,519
the random version parameters to see

428
00:16:37,519 --> 00:16:39,600
to see and actually verify the leakage

429
00:16:39,600 --> 00:16:41,600
inside the unprotected picnic tree

430
00:16:41,600 --> 00:16:43,519
implementation so as you seen the

431
00:16:43,519 --> 00:16:45,519
previous previous part of our

432
00:16:45,519 --> 00:16:46,800
presentation

433
00:16:46,800 --> 00:16:48,720
the first deck is novel and cannot be

434
00:16:48,720 --> 00:16:50,959
eliminated by approaches such as

435
00:16:50,959 --> 00:16:52,959
snillhead here we can see the

436
00:16:52,959 --> 00:16:54,480
highlighted highlighted values are

437
00:16:54,480 --> 00:16:57,120
opened and we are measuring a single

438
00:16:57,120 --> 00:16:58,880
online simulation and using the

439
00:16:58,880 --> 00:17:00,800
highlight values we managed to see the

440
00:17:00,800 --> 00:17:03,199
leakage and verify this attack so the

441
00:17:03,199 --> 00:17:06,799
attack on the unopened uh online phase

442
00:17:06,799 --> 00:17:09,280
moreover we can see that uh with less

443
00:17:09,280 --> 00:17:10,880
than uh

444
00:17:10,880 --> 00:17:14,160
3 000 traces the leakage becomes clear

445
00:17:14,160 --> 00:17:16,000
so next we proceed with the leakage

446
00:17:16,000 --> 00:17:19,520
analysis of sha-3 so we use fixed versus

447
00:17:19,520 --> 00:17:22,079
random static and hash randomly or a

448
00:17:22,079 --> 00:17:24,640
fixed value so why did we check focus on

449
00:17:24,640 --> 00:17:27,520
hashing because as you see in the is in

450
00:17:27,520 --> 00:17:30,559
in the benchmarking slide the the 70

451
00:17:30,559 --> 00:17:32,160
percent of picnic implementation is

452
00:17:32,160 --> 00:17:33,120
hashing

453
00:17:33,120 --> 00:17:36,080
and therefore we have to protect the sha

454
00:17:36,080 --> 00:17:39,200
3 part of our implementation

455
00:17:39,200 --> 00:17:41,200
first of all as sanity check we disable

456
00:17:41,200 --> 00:17:43,679
the masking by forcing the mask value to

457
00:17:43,679 --> 00:17:45,760
zero here you can see the leakages

458
00:17:45,760 --> 00:17:47,520
everywhere of the implementation and

459
00:17:47,520 --> 00:17:50,240
becomes a secure record even uh 2000

460
00:17:50,240 --> 00:17:51,360
traces

461
00:17:51,360 --> 00:17:53,280
and when we enable the masking again we

462
00:17:53,280 --> 00:17:55,200
see that the leakages are gone even with

463
00:17:55,200 --> 00:17:57,280
the thousand traces and there is no

464
00:17:57,280 --> 00:17:58,720
leakage

465
00:17:58,720 --> 00:18:00,400
and finally we implement the leakage

466
00:18:00,400 --> 00:18:02,160
analysis of the whole picnic tree

467
00:18:02,160 --> 00:18:03,360
implementation

468
00:18:03,360 --> 00:18:05,440
uh we measure uh

469
00:18:05,440 --> 00:18:08,000
measured from beginning of uh

470
00:18:08,000 --> 00:18:09,919
beginning from the from the signature

471
00:18:09,919 --> 00:18:12,160
and beginning from the signature until

472
00:18:12,160 --> 00:18:14,720
the end of the first mpc instance and of

473
00:18:14,720 --> 00:18:17,280
course including an online and

474
00:18:17,280 --> 00:18:19,120
offline phase

475
00:18:19,120 --> 00:18:21,679
so so we worked with fixed versus random

476
00:18:21,679 --> 00:18:24,720
keys and use fix or random key and fixed

477
00:18:24,720 --> 00:18:27,760
message uh so we work with fixed pixels

478
00:18:27,760 --> 00:18:30,880
random setup use a fix or random key

479
00:18:30,880 --> 00:18:33,200
fixed message and randomized signature

480
00:18:33,200 --> 00:18:36,640
for each case so thus the only thing

481
00:18:36,640 --> 00:18:38,880
changes between those two cases is

482
00:18:38,880 --> 00:18:42,760
actually the secret key itself

483
00:18:43,039 --> 00:18:45,039
and and we have observed that the test

484
00:18:45,039 --> 00:18:47,200
results are actually below the threshold

485
00:18:47,200 --> 00:18:50,080
value for for all eight million sample

486
00:18:50,080 --> 00:18:52,400
points moreover we have observed that

487
00:18:52,400 --> 00:18:54,000
the maximum t test value has a stable

488
00:18:54,000 --> 00:18:56,080
pattern as you can see in the right hand

489
00:18:56,080 --> 00:18:58,400
side and remark that

490
00:18:58,400 --> 00:19:00,320
if you if you remember from the previous

491
00:19:00,320 --> 00:19:02,640
attacks or or cat check analysis

492
00:19:02,640 --> 00:19:04,480
a real leakage has a clear increasing

493
00:19:04,480 --> 00:19:06,160
pattern even with a small number of

494
00:19:06,160 --> 00:19:08,480
cases and here we can see a stable

495
00:19:08,480 --> 00:19:11,520
pattern even even after one million

496
00:19:11,520 --> 00:19:12,799
traces

497
00:19:12,799 --> 00:19:15,200
so as a result what we have shown you in

498
00:19:15,200 --> 00:19:16,400
this work is

499
00:19:16,400 --> 00:19:19,039
such analysis on a kkw protocol is a

500
00:19:19,039 --> 00:19:20,240
real truth

501
00:19:20,240 --> 00:19:23,200
and open values can act as actually act

502
00:19:23,200 --> 00:19:24,320
as

503
00:19:24,320 --> 00:19:25,440
opened

504
00:19:25,440 --> 00:19:28,160
three props for adversary and we have

505
00:19:28,160 --> 00:19:30,320
provided a mask npc in that particular

506
00:19:30,320 --> 00:19:32,640
that can be worked with pre-processing

507
00:19:32,640 --> 00:19:35,360
and we implement our idea to picnic tree

508
00:19:35,360 --> 00:19:38,880
and see that with an overhead of 1 1.8

509
00:19:38,880 --> 00:19:41,840
to 5.4 we can achieve first order

510
00:19:41,840 --> 00:19:43,520
protection

511
00:19:43,520 --> 00:19:46,880
we also have we have also provide a mask

512
00:19:46,880 --> 00:19:49,039
charter implementation that is optimized

513
00:19:49,039 --> 00:19:52,160
for m4 for different options so thank

514
00:19:52,160 --> 00:19:53,760
you for your attention if you have any

515
00:19:53,760 --> 00:19:55,919
questions or comments we gladly answer

516
00:19:55,919 --> 00:19:58,320
them answer them and you can find more

517
00:19:58,320 --> 00:20:01,360
details in in our in our in in our apron

518
00:20:01,360 --> 00:20:02,480
or

519
00:20:02,480 --> 00:20:03,840
if you would like to if you would like

520
00:20:03,840 --> 00:20:05,280
to take a look at our implementation you

521
00:20:05,280 --> 00:20:07,039
can you can check our check our github

522
00:20:07,039 --> 00:20:09,520
page um as we told as we said before

523
00:20:09,520 --> 00:20:12,080
this is fully fully uh fully uh

524
00:20:12,080 --> 00:20:13,679
connected with with

525
00:20:13,679 --> 00:20:16,960
pkm4 project so that you can actually uh

526
00:20:16,960 --> 00:20:19,840
reproduce benchmarking or

527
00:20:19,840 --> 00:20:22,720
reproduced analysis code

528
00:20:22,720 --> 00:20:27,080
quite easily thank you

