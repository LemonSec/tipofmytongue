1
00:00:01,120 --> 00:00:03,280
hi my name is alejandro and i am going

2
00:00:03,280 --> 00:00:05,200
to present the paper online templates

3
00:00:05,200 --> 00:00:06,879
attack revisited

4
00:00:06,879 --> 00:00:09,040
in this talk we are going to revisit

5
00:00:09,040 --> 00:00:10,880
online templates attack

6
00:00:10,880 --> 00:00:12,799
first a background a background

7
00:00:12,799 --> 00:00:14,960
analytical therapy and side channel

8
00:00:14,960 --> 00:00:17,520
template attacks is presented

9
00:00:17,520 --> 00:00:19,119
then we revisit previous online

10
00:00:19,119 --> 00:00:21,279
interface attack description regarding

11
00:00:21,279 --> 00:00:24,640
the input direction counter measure and

12
00:00:24,640 --> 00:00:26,640
evaluation framework

13
00:00:26,640 --> 00:00:28,480
in addition we apply the processes

14
00:00:28,480 --> 00:00:30,320
analysis to open source libraries

15
00:00:30,320 --> 00:00:32,479
regarding microarchitecture side

16
00:00:32,479 --> 00:00:35,280
channels evaluating the insecurity

17
00:00:35,280 --> 00:00:37,360
regarding this type of

18
00:00:37,360 --> 00:00:39,440
attack

19
00:00:39,440 --> 00:00:42,000
we finalized this research by mounting

20
00:00:42,000 --> 00:00:44,320
several attack instances on this

21
00:00:44,320 --> 00:00:46,719
libraries

22
00:00:46,719 --> 00:00:49,039
regarding elliptical cryptography scalar

23
00:00:49,039 --> 00:00:51,680
multiplication implementation are a

24
00:00:51,680 --> 00:00:54,399
common objective of side channel attacks

25
00:00:54,399 --> 00:00:56,160
for instance in the algorithm shown in

26
00:00:56,160 --> 00:00:59,280
the slide common attacks charges are the

27
00:00:59,280 --> 00:01:02,000
number of executed iterations and the

28
00:01:02,000 --> 00:01:03,760
conditional branches

29
00:01:03,760 --> 00:01:05,600
these leak implementations have been

30
00:01:05,600 --> 00:01:08,080
exploited using different different side

31
00:01:08,080 --> 00:01:10,400
channels like power consumption and

32
00:01:10,400 --> 00:01:11,439
micro

33
00:01:11,439 --> 00:01:14,159
architecture-based basic ones like cage

34
00:01:14,159 --> 00:01:17,439
timing for contention etc

35
00:01:17,439 --> 00:01:19,840
regarding cycle analysis traditional

36
00:01:19,840 --> 00:01:22,640
scenarios assume attackers can capture a

37
00:01:22,640 --> 00:01:25,200
trace while the view team uses a secret

38
00:01:25,200 --> 00:01:27,680
secret key

39
00:01:27,680 --> 00:01:29,520
templates attacks are a very power

40
00:01:29,520 --> 00:01:32,400
societal technique where the adversary

41
00:01:32,400 --> 00:01:34,479
has a template

42
00:01:34,479 --> 00:01:36,560
as access to a template implementation

43
00:01:36,560 --> 00:01:38,799
very similar to the targeted one

44
00:01:38,799 --> 00:01:41,360
additionally that preservative mode

45
00:01:41,360 --> 00:01:43,439
can capture sidechaining traces using

46
00:01:43,439 --> 00:01:45,680
the template implementation for

47
00:01:45,680 --> 00:01:49,119
arbitrary chosen keys

48
00:01:49,119 --> 00:01:51,680
another an online template attack is a

49
00:01:51,680 --> 00:01:54,320
variant of original television attacks

50
00:01:54,320 --> 00:01:57,040
where the main difference are summarized

51
00:01:57,040 --> 00:01:58,479
in this table

52
00:01:58,479 --> 00:02:01,040
classic templates attack are employed

53
00:02:01,040 --> 00:02:03,759
when the template spain is small for

54
00:02:03,759 --> 00:02:05,840
example an 8-bit

55
00:02:05,840 --> 00:02:07,040
variable

56
00:02:07,040 --> 00:02:09,840
this makes fixable to create the

57
00:02:09,840 --> 00:02:11,920
templates before the target trace is

58
00:02:11,920 --> 00:02:13,360
captured

59
00:02:13,360 --> 00:02:15,040
on the other hand online templates

60
00:02:15,040 --> 00:02:17,280
attacks are useful

61
00:02:17,280 --> 00:02:20,160
when the template space is large for it

62
00:02:20,160 --> 00:02:23,760
for example are all points of an led

63
00:02:23,760 --> 00:02:24,800
curve

64
00:02:24,800 --> 00:02:27,520
in this case templates are created after

65
00:02:27,520 --> 00:02:30,160
the target trace is captured this means

66
00:02:30,160 --> 00:02:34,720
template traces are captured on demand

67
00:02:34,879 --> 00:02:37,280
before going deep into online to place a

68
00:02:37,280 --> 00:02:39,840
attack description let's define some

69
00:02:39,840 --> 00:02:41,360
terms

70
00:02:41,360 --> 00:02:43,599
traditionally content ratios

71
00:02:43,599 --> 00:02:45,519
against trivial attacks on scalar

72
00:02:45,519 --> 00:02:47,840
multiplication algorithms aim at

73
00:02:47,840 --> 00:02:50,560
removing scale dependent operation

74
00:02:50,560 --> 00:02:54,319
making a transition like this example

75
00:02:54,319 --> 00:02:56,800
where an explicit branch has been

76
00:02:56,800 --> 00:02:59,599
fractured so that the point addition

77
00:02:59,599 --> 00:03:03,360
execution doesn't depend on the scalar

78
00:03:03,360 --> 00:03:05,040
after analyzing several scala

79
00:03:05,040 --> 00:03:07,440
multiplication algorithm we define a

80
00:03:07,440 --> 00:03:12,720
generic one to present our ota analysis

81
00:03:12,720 --> 00:03:15,280
first the scalar k is encoded in a

82
00:03:15,280 --> 00:03:17,680
sequence in sequence where each element

83
00:03:17,680 --> 00:03:21,840
represents partial information of it

84
00:03:21,840 --> 00:03:24,959
then the starting state is initialized

85
00:03:24,959 --> 00:03:27,040
this is often done using only public

86
00:03:27,040 --> 00:03:30,319
information like the generator point

87
00:03:30,319 --> 00:03:33,120
the state could be one or more point

88
00:03:33,120 --> 00:03:35,360
accumulators

89
00:03:35,360 --> 00:03:37,440
the main loop of this algorithm

90
00:03:37,440 --> 00:03:39,120
processes each

91
00:03:39,120 --> 00:03:42,239
k element using two operations select

92
00:03:42,239 --> 00:03:44,000
and process

93
00:03:44,000 --> 00:03:47,120
select chooses the state to be processed

94
00:03:47,120 --> 00:03:48,080
at each

95
00:03:48,080 --> 00:03:50,560
iteration based on the corresponding ki

96
00:03:50,560 --> 00:03:52,159
and the previous state

97
00:03:52,159 --> 00:03:54,720
this operation has started how the k

98
00:03:54,720 --> 00:03:57,280
dependent operation like branches table

99
00:03:57,280 --> 00:04:00,799
lookup etc are implemented however we

100
00:04:00,799 --> 00:04:03,120
assume that they are implementing in

101
00:04:03,120 --> 00:04:04,319
such a way

102
00:04:04,319 --> 00:04:07,120
that they don't leak ki that is we

103
00:04:07,120 --> 00:04:09,519
assume celeb is protected against

104
00:04:09,519 --> 00:04:12,080
trivial attacks

105
00:04:12,080 --> 00:04:14,799
the second operation process processes

106
00:04:14,799 --> 00:04:15,840
the

107
00:04:15,840 --> 00:04:18,478
iteration state for instance it performs

108
00:04:18,478 --> 00:04:20,880
the corresponding elliptic curve point

109
00:04:20,880 --> 00:04:22,160
operation

110
00:04:22,160 --> 00:04:24,560
the last step computes the output from

111
00:04:24,560 --> 00:04:27,199
the last state

112
00:04:27,199 --> 00:04:28,720
projected to a fine coordinate

113
00:04:28,720 --> 00:04:31,440
convention is often executed at this

114
00:04:31,440 --> 00:04:33,680
point

115
00:04:34,720 --> 00:04:36,320
considering the generic scalar

116
00:04:36,320 --> 00:04:38,880
multiplication algorithms let's describe

117
00:04:38,880 --> 00:04:41,040
an online template attack

118
00:04:41,040 --> 00:04:43,919
the adversary first capture a template

119
00:04:43,919 --> 00:04:47,199
trace it sorry it captured a target

120
00:04:47,199 --> 00:04:50,320
trace segmented it into suit traces

121
00:04:50,320 --> 00:04:52,400
where each should trace correspond to

122
00:04:52,400 --> 00:04:55,280
the execution of process at each

123
00:04:55,280 --> 00:04:56,800
iteration

124
00:04:56,800 --> 00:04:59,120
the second step involves templates

125
00:04:59,120 --> 00:05:00,400
creation

126
00:05:00,400 --> 00:05:02,880
starting from the initial state

127
00:05:02,880 --> 00:05:04,720
the attacker emulates the select

128
00:05:04,720 --> 00:05:07,680
operation by guessing k1

129
00:05:07,680 --> 00:05:10,160
this way the adversary gets a candidate

130
00:05:10,160 --> 00:05:12,880
for the processing state

131
00:05:12,880 --> 00:05:15,120
then using a template implementation

132
00:05:15,120 --> 00:05:17,120
that reduce

133
00:05:17,120 --> 00:05:19,039
process operational leakage the

134
00:05:19,039 --> 00:05:21,759
adversary gets a template trace for a

135
00:05:21,759 --> 00:05:25,840
given state candidate the same procedure

136
00:05:25,840 --> 00:05:28,560
is repeated for every possible

137
00:05:28,560 --> 00:05:33,600
ki obtaining a set of template traces

138
00:05:33,680 --> 00:05:35,919
during the third phase of

139
00:05:35,919 --> 00:05:38,560
each template trace is compared with the

140
00:05:38,560 --> 00:05:40,800
target process signals in this case we

141
00:05:40,800 --> 00:05:44,160
want the one that matches which reveal

142
00:05:44,160 --> 00:05:45,680
the ki

143
00:05:45,680 --> 00:05:48,000
repeating this process this procedure

144
00:05:48,000 --> 00:05:50,720
for the following iteration and back

145
00:05:50,720 --> 00:05:52,880
dragging if mutually matched matches are

146
00:05:52,880 --> 00:05:55,520
found could could allow to recover all

147
00:05:55,520 --> 00:05:59,840
bits of the scalar using a single trace

148
00:06:01,039 --> 00:06:03,120
previous words about online templates

149
00:06:03,120 --> 00:06:04,800
attack only considered public

150
00:06:04,800 --> 00:06:08,800
consumption and electromagnetic

151
00:06:08,800 --> 00:06:09,919
channels

152
00:06:09,919 --> 00:06:12,720
these channels leak very differently

153
00:06:12,720 --> 00:06:15,520
from micro architecture based ones for

154
00:06:15,520 --> 00:06:17,199
instance power signals contain

155
00:06:17,199 --> 00:06:20,000
information about the executed

156
00:06:20,000 --> 00:06:22,319
addresses and processed values that

157
00:06:22,319 --> 00:06:23,199
means

158
00:06:23,199 --> 00:06:25,759
an ota can exploit circuit dependent

159
00:06:25,759 --> 00:06:27,440
execution flow

160
00:06:27,440 --> 00:06:30,240
and second dependent processes values

161
00:06:30,240 --> 00:06:32,319
leaks using these

162
00:06:32,319 --> 00:06:33,520
signals

163
00:06:33,520 --> 00:06:34,479
however

164
00:06:34,479 --> 00:06:37,360
in the micro architecture reom

165
00:06:37,360 --> 00:06:39,440
value based leaks are not common

166
00:06:39,440 --> 00:06:42,479
therefore attackers should rely only on

167
00:06:42,479 --> 00:06:45,440
other basel leakage commonly known as

168
00:06:45,440 --> 00:06:49,199
non-constantine coke

169
00:06:49,199 --> 00:06:51,360
but wait what is this no constant time

170
00:06:51,360 --> 00:06:53,520
called conference

171
00:06:53,520 --> 00:06:56,400
well any an ecc implementation income is

172
00:06:56,400 --> 00:06:59,199
composed by three main layers the scalar

173
00:06:59,199 --> 00:07:01,360
multiplication algorithm the curve the

174
00:07:01,360 --> 00:07:03,840
curve arithmetic and the field

175
00:07:03,840 --> 00:07:05,360
arithmetic

176
00:07:05,360 --> 00:07:07,280
nowadays is very

177
00:07:07,280 --> 00:07:09,400
common to find scalar multiplication

178
00:07:09,400 --> 00:07:12,639
implementations with protection against

179
00:07:12,639 --> 00:07:14,880
trivial attacks both industry and

180
00:07:14,880 --> 00:07:18,560
academy are very aware of their danger

181
00:07:18,560 --> 00:07:21,360
for example this is a cool snippet from

182
00:07:21,360 --> 00:07:24,000
mbtls library where it can be seen that

183
00:07:24,000 --> 00:07:26,160
the scala multiplication loop is very

184
00:07:26,160 --> 00:07:29,520
regular not trivially leakage aside you

185
00:07:29,520 --> 00:07:32,319
can ignore i in this case

186
00:07:32,319 --> 00:07:35,280
going one step down we find

187
00:07:35,280 --> 00:07:37,199
the point doubling

188
00:07:37,199 --> 00:07:39,039
implementation

189
00:07:39,039 --> 00:07:40,800
again it seems

190
00:07:40,800 --> 00:07:42,080
very

191
00:07:42,080 --> 00:07:43,759
regular

192
00:07:43,759 --> 00:07:45,759
notice there are chords to modal

193
00:07:45,759 --> 00:07:48,720
residual wrappers at the end of each

194
00:07:48,720 --> 00:07:50,160
line

195
00:07:50,160 --> 00:07:52,000
then if we go deeper into the

196
00:07:52,000 --> 00:07:54,639
implementation all these wrappers end

197
00:07:54,639 --> 00:07:56,080
into a chord

198
00:07:56,080 --> 00:07:58,479
this modular reduction function

199
00:07:58,479 --> 00:08:00,240
where there are two

200
00:08:00,240 --> 00:08:03,680
input dependent loops aka potential

201
00:08:03,680 --> 00:08:05,759
side channel leakage

202
00:08:05,759 --> 00:08:07,840
sources

203
00:08:07,840 --> 00:08:09,280
this kind of leakage can be

204
00:08:09,280 --> 00:08:12,800
transparently spotted by an ota that is

205
00:08:12,800 --> 00:08:16,000
that virtually doesn't need to know how

206
00:08:16,000 --> 00:08:17,440
a ligas

207
00:08:17,440 --> 00:08:19,199
doesn't need to know a leakage model

208
00:08:19,199 --> 00:08:21,840
that links how these white loops relate

209
00:08:21,840 --> 00:08:25,159
to the scala

210
00:08:27,280 --> 00:08:29,520
in this work we revisit previous ota

211
00:08:29,520 --> 00:08:31,759
descriptions regarding attack inputs

212
00:08:31,759 --> 00:08:34,240
direction requirements counter measures

213
00:08:34,240 --> 00:08:36,240
and evaluation procedures

214
00:08:36,240 --> 00:08:39,440
additionally we instance instantly

215
00:08:39,440 --> 00:08:42,000
in the realm of micro architecture

216
00:08:42,000 --> 00:08:45,200
leakages while previous works focus on

217
00:08:45,200 --> 00:08:48,640
power and in signals

218
00:08:48,880 --> 00:08:51,120
regarding attack inputs and direction

219
00:08:51,120 --> 00:08:53,040
previous works assume that adversary

220
00:08:53,040 --> 00:08:55,839
knows the algorithm starting state

221
00:08:55,839 --> 00:08:57,440
highlighted in green

222
00:08:57,440 --> 00:08:59,760
then the attack continues in the forward

223
00:08:59,760 --> 00:09:00,959
direction

224
00:09:00,959 --> 00:09:03,760
however it can also be applied in the

225
00:09:03,760 --> 00:09:06,160
backward direction extracted from the

226
00:09:06,160 --> 00:09:10,240
last computed state this line is closely

227
00:09:10,240 --> 00:09:12,000
related to the projected coordinates

228
00:09:12,000 --> 00:09:14,560
attack however this attack can only

229
00:09:14,560 --> 00:09:17,279
recover a few bits of the scalar

230
00:09:17,279 --> 00:09:19,519
on the other hand a backward online

231
00:09:19,519 --> 00:09:21,920
template attack can be considered like

232
00:09:21,920 --> 00:09:23,680
an augmented projected coordinates

233
00:09:23,680 --> 00:09:26,320
attack as it allows full scalar recovery

234
00:09:26,320 --> 00:09:29,440
from a single trace

235
00:09:29,600 --> 00:09:32,080
the third scenario to consider is when

236
00:09:32,080 --> 00:09:34,880
the adversary knows and any intermediate

237
00:09:34,880 --> 00:09:38,080
state and start the attack either in the

238
00:09:38,080 --> 00:09:40,880
forward or backward direction this is

239
00:09:40,880 --> 00:09:44,000
less likely a scenario but neglecting it

240
00:09:44,000 --> 00:09:45,839
could be dangerous

241
00:09:45,839 --> 00:09:48,399
summarizing online tempest attack can be

242
00:09:48,399 --> 00:09:51,360
applied in any direction and using any

243
00:09:51,360 --> 00:09:55,440
computed state as a starting point

244
00:09:56,880 --> 00:09:59,680
related to previous analysis are online

245
00:09:59,680 --> 00:10:01,920
templates that are requirements we

246
00:10:01,920 --> 00:10:04,399
identify too name distinguisher and

247
00:10:04,399 --> 00:10:05,920
reproducible

248
00:10:05,920 --> 00:10:08,240
the first one is just that the channel

249
00:10:08,240 --> 00:10:10,720
signal from the process of relation can

250
00:10:10,720 --> 00:10:13,360
be used to distinguish the process the

251
00:10:13,360 --> 00:10:15,600
processed state

252
00:10:15,600 --> 00:10:17,600
the second is about the leakage

253
00:10:17,600 --> 00:10:20,000
reproducibility concerning

254
00:10:20,000 --> 00:10:22,399
the templating implementation in this

255
00:10:22,399 --> 00:10:25,200
regard the implementation cannot set two

256
00:10:25,200 --> 00:10:26,320
kinds

257
00:10:26,320 --> 00:10:28,880
of inputs a state or

258
00:10:28,880 --> 00:10:31,760
a scalar and the requirements vary with

259
00:10:31,760 --> 00:10:33,120
them

260
00:10:33,120 --> 00:10:35,519
for the state case the adversary must

261
00:10:35,519 --> 00:10:39,360
know any state processed by the tired by

262
00:10:39,360 --> 00:10:42,160
the tiger

263
00:10:42,160 --> 00:10:44,640
while for a scalar base attack if 2

264
00:10:44,640 --> 00:10:47,680
scalar on ki the stage related to the

265
00:10:47,680 --> 00:10:50,000
processing of those chaos

266
00:10:50,000 --> 00:10:51,600
must be the same

267
00:10:51,600 --> 00:10:54,160
in this process presentation we focus on

268
00:10:54,160 --> 00:10:56,959
this state case however

269
00:10:56,959 --> 00:11:01,160
the paper covers both

270
00:11:01,760 --> 00:11:04,240
the mitigations are oriented to prevent

271
00:11:04,240 --> 00:11:07,839
the fulfillment of one of of at least

272
00:11:07,839 --> 00:11:10,720
one requirement in the first case the

273
00:11:10,720 --> 00:11:13,040
idea is to avoid that the process

274
00:11:13,040 --> 00:11:15,279
operation leaks this the state that

275
00:11:15,279 --> 00:11:18,240
means hiding the leakage

276
00:11:18,240 --> 00:11:20,800
this is not trivial for power and em

277
00:11:20,800 --> 00:11:23,360
side channels do we do they inherently

278
00:11:23,360 --> 00:11:25,760
value basil leaks however in the

279
00:11:25,760 --> 00:11:28,160
microarchitecture wall content time code

280
00:11:28,160 --> 00:11:29,440
should be

281
00:11:29,440 --> 00:11:31,279
sufficient

282
00:11:31,279 --> 00:11:33,200
the second approach is about breaking

283
00:11:33,200 --> 00:11:35,120
the reproducibility requirement

284
00:11:35,120 --> 00:11:37,680
enforcing that equal inputs produce

285
00:11:37,680 --> 00:11:40,079
different processing states for instance

286
00:11:40,079 --> 00:11:43,279
this can be accomplished by randomizing

287
00:11:43,279 --> 00:11:44,800
all states

288
00:11:44,800 --> 00:11:46,880
these conformations can be implemented

289
00:11:46,880 --> 00:11:49,360
by randomizing the representation of the

290
00:11:49,360 --> 00:11:52,320
processing points

291
00:11:52,560 --> 00:11:55,040
after having analyzed ota requirements

292
00:11:55,040 --> 00:11:58,160
we propose an ota evaluation framework

293
00:11:58,160 --> 00:12:00,480
from the attacker's perspective

294
00:12:00,480 --> 00:12:02,959
the first step assesses where the target

295
00:12:02,959 --> 00:12:05,440
implementation is deterministic

296
00:12:05,440 --> 00:12:08,399
regarding the considered side channel

297
00:12:08,399 --> 00:12:11,839
if it is not the right branch is taken

298
00:12:11,839 --> 00:12:14,320
this branch is more related to previous

299
00:12:14,320 --> 00:12:16,720
four analysis due to the characteristic

300
00:12:16,720 --> 00:12:18,800
or noisy

301
00:12:18,800 --> 00:12:21,760
on noisy nature of forward and em

302
00:12:21,760 --> 00:12:22,959
signals

303
00:12:22,959 --> 00:12:25,120
however the left branch can be used if

304
00:12:25,120 --> 00:12:27,440
the target implementation produces

305
00:12:27,440 --> 00:12:30,320
produces determinative leakages

306
00:12:30,320 --> 00:12:32,639
note that a determination implementation

307
00:12:32,639 --> 00:12:33,839
implies

308
00:12:33,839 --> 00:12:35,440
that reproducible requirement is

309
00:12:35,440 --> 00:12:37,440
fulfilled

310
00:12:37,440 --> 00:12:40,079
in this work we focus in on determinism

311
00:12:40,079 --> 00:12:42,720
case as we will see that it can be a lot

312
00:12:42,720 --> 00:12:45,519
of determinism using software side

313
00:12:45,519 --> 00:12:47,680
channels

314
00:12:47,680 --> 00:12:51,440
the next step is i'm at estimating how

315
00:12:51,440 --> 00:12:53,200
well the distinction requirement is

316
00:12:53,200 --> 00:12:55,440
fulfilled for this stack

317
00:12:55,440 --> 00:12:57,760
task we propose to estimate the

318
00:12:57,760 --> 00:13:00,720
probability mass function pnf of

319
00:13:00,720 --> 00:13:03,760
processes of the process leakage space

320
00:13:03,760 --> 00:13:05,440
that is

321
00:13:05,440 --> 00:13:08,000
for n different state capture the

322
00:13:08,000 --> 00:13:10,399
corresponding traces and estimate the

323
00:13:10,399 --> 00:13:12,800
probability mass function

324
00:13:12,800 --> 00:13:15,760
the number on different outcomes is the

325
00:13:15,760 --> 00:13:18,000
estimated cardinality of the process

326
00:13:18,000 --> 00:13:19,279
leakage set

327
00:13:19,279 --> 00:13:22,399
it is one it means all state generate

328
00:13:22,399 --> 00:13:24,959
the same leakage traces therefore it is

329
00:13:24,959 --> 00:13:28,800
likely the implementation is auto safe

330
00:13:28,800 --> 00:13:31,040
on the other hand if the cardinality is

331
00:13:31,040 --> 00:13:33,279
equal to the number of states this

332
00:13:33,279 --> 00:13:35,760
scenario is ideal for

333
00:13:35,760 --> 00:13:39,600
the attacker because it is very likely

334
00:13:39,600 --> 00:13:42,320
the distinguished requirement is perfect

335
00:13:42,320 --> 00:13:45,839
perfectly fulfilled

336
00:13:46,320 --> 00:13:49,839
the third scenario consider

337
00:13:50,000 --> 00:13:52,320
to consider when the cardinality lies

338
00:13:52,320 --> 00:13:55,120
between these values in this case how

339
00:13:55,120 --> 00:13:57,680
biased bias is the distribution allows

340
00:13:57,680 --> 00:13:59,360
to establish the attack will be

341
00:13:59,360 --> 00:14:02,639
completely computationally hard or easy

342
00:14:02,639 --> 00:14:04,959
in this research we develop developed

343
00:14:04,959 --> 00:14:08,399
successful otas with bias as high as 62

344
00:14:08,399 --> 00:14:09,839
percent

345
00:14:09,839 --> 00:14:12,079
then we use this value as a threshold

346
00:14:12,079 --> 00:14:15,440
between hard and easy ota but no please

347
00:14:15,440 --> 00:14:17,360
note this thread hole is a rough

348
00:14:17,360 --> 00:14:20,160
estimate as we didn't aim at improving

349
00:14:20,160 --> 00:14:22,319
it

350
00:14:23,519 --> 00:14:26,000
okay after the theoretical side of the

351
00:14:26,000 --> 00:14:28,839
talk let's apply it to real

352
00:14:28,839 --> 00:14:31,920
implementation at this phase we consider

353
00:14:31,920 --> 00:14:34,240
ota against trusted execution

354
00:14:34,240 --> 00:14:36,959
environments employing what is not

355
00:14:36,959 --> 00:14:39,120
is known as control

356
00:14:39,120 --> 00:14:41,600
channel attacks in this scenario it is

357
00:14:41,600 --> 00:14:44,399
common to get noiseless such

358
00:14:44,399 --> 00:14:46,639
signals

359
00:14:46,639 --> 00:14:48,320
we consider two

360
00:14:48,320 --> 00:14:50,720
known side channels named pay tracers

361
00:14:50,720 --> 00:14:52,079
and copycat

362
00:14:52,079 --> 00:14:53,920
the first one allows an attacker to

363
00:14:53,920 --> 00:14:56,720
track the sequence of executed memory

364
00:14:56,720 --> 00:15:00,160
pages while copycat copycat counts the

365
00:15:00,160 --> 00:15:02,560
number of executed instructions at each

366
00:15:02,560 --> 00:15:03,600
page

367
00:15:03,600 --> 00:15:06,240
for instance considering this segment of

368
00:15:06,240 --> 00:15:08,560
a security instruction where each color

369
00:15:08,560 --> 00:15:11,199
represents a memory page

370
00:15:11,199 --> 00:15:13,440
the page transit trace would be like

371
00:15:13,440 --> 00:15:15,839
this one while the copycat one will

372
00:15:15,839 --> 00:15:17,680
indicate additional information

373
00:15:17,680 --> 00:15:19,760
regarding the number of executed

374
00:15:19,760 --> 00:15:22,480
instructions

375
00:15:23,120 --> 00:15:24,880
we analyze the three open source

376
00:15:24,880 --> 00:15:28,000
libraries and apply the proposed ota

377
00:15:28,000 --> 00:15:31,440
evaluation framework on to

378
00:15:31,440 --> 00:15:32,800
them

379
00:15:32,800 --> 00:15:35,680
we selected them because they were not

380
00:15:35,680 --> 00:15:38,480
designed to be constant time or layers

381
00:15:38,480 --> 00:15:40,800
however significant efforts have been

382
00:15:40,800 --> 00:15:42,880
put to make them secure at the scala

383
00:15:42,880 --> 00:15:45,279
multiplication one

384
00:15:45,279 --> 00:15:48,160
in all cases we use a leakage emulator

385
00:15:48,160 --> 00:15:51,360
based on tracer grind as a template

386
00:15:51,360 --> 00:15:54,160
implementation this tool is based on

387
00:15:54,160 --> 00:15:56,639
background and generates execution

388
00:15:56,639 --> 00:15:59,759
traces with information about each

389
00:15:59,759 --> 00:16:01,839
executed instruction like

390
00:16:01,839 --> 00:16:03,120
address

391
00:16:03,120 --> 00:16:06,000
parsing site information allow allows to

392
00:16:06,000 --> 00:16:08,240
get the corresponding pay traces and

393
00:16:08,240 --> 00:16:11,199
copycat traces

394
00:16:11,440 --> 00:16:13,199
we analyze it leave degrees in the

395
00:16:13,199 --> 00:16:16,000
context in the context of this signature

396
00:16:16,000 --> 00:16:17,839
scheme

397
00:16:17,839 --> 00:16:20,160
this case is interesting as part-time

398
00:16:20,160 --> 00:16:22,240
partial known scalar leakage are not

399
00:16:22,240 --> 00:16:25,360
sufficient to compromise it however

400
00:16:25,360 --> 00:16:27,360
online templates attack can't recover

401
00:16:27,360 --> 00:16:30,880
the quartus color using a single trace

402
00:16:30,880 --> 00:16:32,800
the scalar multiplication algorithm in

403
00:16:32,800 --> 00:16:35,600
this case is double and not always and

404
00:16:35,600 --> 00:16:37,839
we select it as process both point

405
00:16:37,839 --> 00:16:41,680
operation doubling and region

406
00:16:42,720 --> 00:16:44,720
this operation and

407
00:16:44,720 --> 00:16:47,519
employs 17 memory pages will lead to

408
00:16:47,519 --> 00:16:49,519
many compilations that can be used to

409
00:16:49,519 --> 00:16:51,199
mount an attack

410
00:16:51,199 --> 00:16:54,399
we followed the evaluation

411
00:16:54,399 --> 00:16:56,720
framework for each page combination and

412
00:16:56,720 --> 00:16:59,040
collected this data about them regarding

413
00:16:59,040 --> 00:17:02,480
pay tracer and copycat site channels

414
00:17:02,480 --> 00:17:04,720
this table shows some data for instance

415
00:17:04,720 --> 00:17:07,280
the secure column stands for ideal and

416
00:17:07,280 --> 00:17:09,599
easy scenarios meaning that

417
00:17:09,599 --> 00:17:12,160
several combinations are all allowed to

418
00:17:12,160 --> 00:17:14,640
perform an ota

419
00:17:14,640 --> 00:17:17,359
no ideal combination was found for paid

420
00:17:17,359 --> 00:17:20,079
traces however using copycats is

421
00:17:20,079 --> 00:17:23,839
possible on half half of them

422
00:17:23,839 --> 00:17:26,319
the last column represents the number of

423
00:17:26,319 --> 00:17:29,120
modular mutually exclusive combinations

424
00:17:29,120 --> 00:17:32,480
and data sizes this that data is

425
00:17:32,480 --> 00:17:35,360
relevant as this combination can be used

426
00:17:35,360 --> 00:17:39,440
for noise handling by allowing an attack

427
00:17:39,440 --> 00:17:40,880
by allowing to attack the same

428
00:17:40,880 --> 00:17:45,880
implementation using redundant leakages

429
00:17:46,160 --> 00:17:48,320
it's also interesting how many memory

430
00:17:48,320 --> 00:17:50,400
pages are sufficient to perform an

431
00:17:50,400 --> 00:17:52,080
attack on this library

432
00:17:52,080 --> 00:17:54,000
this graph showed that the candidality

433
00:17:54,000 --> 00:17:55,039
behave

434
00:17:55,039 --> 00:17:57,280
how the cardinality behave for insecure

435
00:17:57,280 --> 00:18:00,240
combination as can be seen ideal

436
00:18:00,240 --> 00:18:02,720
scenarios can be obtained with copycat

437
00:18:02,720 --> 00:18:06,400
with only two memory pages

438
00:18:06,799 --> 00:18:10,000
the second analyzer library was nvdls

439
00:18:10,000 --> 00:18:11,440
where we attached the scanner

440
00:18:11,440 --> 00:18:14,320
multiplication algorithm the employee

441
00:18:14,320 --> 00:18:16,480
during an ecsa

442
00:18:16,480 --> 00:18:17,919
signature

443
00:18:17,919 --> 00:18:19,600
generation

444
00:18:19,600 --> 00:18:21,600
the scalar multiplication follows a

445
00:18:21,600 --> 00:18:24,480
custom com approach and in this case we

446
00:18:24,480 --> 00:18:26,640
selected the point doubling as the

447
00:18:26,640 --> 00:18:28,960
process operation this means that only

448
00:18:28,960 --> 00:18:30,960
leakage coming from it

449
00:18:30,960 --> 00:18:31,760
in

450
00:18:31,760 --> 00:18:35,039
its implementation stack is considered

451
00:18:35,039 --> 00:18:37,120
like in the previous case the state is

452
00:18:37,120 --> 00:18:40,000
composed by a single single point

453
00:18:40,000 --> 00:18:43,360
accumulator r

454
00:18:43,360 --> 00:18:46,640
for mp mptls the process operation

455
00:18:46,640 --> 00:18:49,679
employs 14 memory pages the percent

456
00:18:49,679 --> 00:18:52,240
touch of insecure combination for both

457
00:18:52,240 --> 00:18:56,320
attacks is much worse than leaky grips

458
00:18:56,320 --> 00:18:57,679
in addition

459
00:18:57,679 --> 00:19:00,400
almost all combinations lead to ideal

460
00:19:00,400 --> 00:19:03,039
scenarios using either pay tracer or

461
00:19:03,039 --> 00:19:04,960
copycat

462
00:19:04,960 --> 00:19:07,360
instantly the number of modular

463
00:19:07,360 --> 00:19:09,760
exclusive combinations for copycat is

464
00:19:09,760 --> 00:19:12,400
equal to the number of pages employed by

465
00:19:12,400 --> 00:19:15,280
the point w operation so there is a

466
00:19:15,280 --> 00:19:17,280
strong leakage everywhere in this

467
00:19:17,280 --> 00:19:19,600
implementation

468
00:19:19,600 --> 00:19:20,640
i

469
00:19:20,640 --> 00:19:22,880
ideal scenarios can be achieved in this

470
00:19:22,880 --> 00:19:25,200
library starting from two and three

471
00:19:25,200 --> 00:19:26,799
memory pages

472
00:19:26,799 --> 00:19:32,000
for page tracer and copycat respectively

473
00:19:32,640 --> 00:19:34,880
we also analyze wolf ssl library

474
00:19:34,880 --> 00:19:36,880
regarding the same creator scheme the

475
00:19:36,880 --> 00:19:39,120
scanner implementation of this weight is

476
00:19:39,120 --> 00:19:40,640
based on the montgomery ladder with

477
00:19:40,640 --> 00:19:43,440
potential against trivial attacks

478
00:19:43,440 --> 00:19:46,080
in this case we selected the point w

479
00:19:46,080 --> 00:19:49,440
operation as process and the state is

480
00:19:49,440 --> 00:19:51,880
the state is composed by two points

481
00:19:51,880 --> 00:19:55,919
accomplished r and s

482
00:19:56,000 --> 00:19:58,240
the point only operation is libraries

483
00:19:58,240 --> 00:20:01,280
expands over seven memory pages leading

484
00:20:01,280 --> 00:20:04,400
to 127 page combination

485
00:20:04,400 --> 00:20:06,240
similar to the other libraries the

486
00:20:06,240 --> 00:20:08,080
number of insecure combinations is very

487
00:20:08,080 --> 00:20:10,960
high we also noted combination with two

488
00:20:10,960 --> 00:20:12,480
equi-probably

489
00:20:12,480 --> 00:20:14,320
liquid traces

490
00:20:14,320 --> 00:20:16,640
we tracked down this combination to code

491
00:20:16,640 --> 00:20:19,039
snippets like this one where the parity

492
00:20:19,039 --> 00:20:21,360
of an intermediate value during the

493
00:20:21,360 --> 00:20:23,840
point double doubling each check before

494
00:20:23,840 --> 00:20:26,720
dividing by two

495
00:20:27,440 --> 00:20:30,559
as a final step step of our research we

496
00:20:30,559 --> 00:20:32,960
develop several attacking intense

497
00:20:32,960 --> 00:20:36,000
instances on the analyzer libraries we

498
00:20:36,000 --> 00:20:39,280
developed sdx enclaves for each library

499
00:20:39,280 --> 00:20:41,760
using the graphing

500
00:20:41,760 --> 00:20:44,080
framework the page traces attack was

501
00:20:44,080 --> 00:20:45,520
mounted using the

502
00:20:45,520 --> 00:20:48,480
framework sdx step

503
00:20:48,480 --> 00:20:51,039
on the other hand the packet environment

504
00:20:51,039 --> 00:20:52,799
is composed by the same template

505
00:20:52,799 --> 00:20:54,960
implementation used to analyze the

506
00:20:54,960 --> 00:20:58,000
libraries that is an emulator based on

507
00:20:58,000 --> 00:20:59,440
tracer line

508
00:20:59,440 --> 00:21:01,440
the referral therefore during the

509
00:21:01,440 --> 00:21:04,159
template matching phase we complete

510
00:21:04,159 --> 00:21:07,280
compare real traces with emulated ones

511
00:21:07,280 --> 00:21:09,919
leading to successful attacks therefore

512
00:21:09,919 --> 00:21:12,480
tricep grind demonstrated to perform

513
00:21:12,480 --> 00:21:14,960
very well

514
00:21:15,200 --> 00:21:17,280
different attacks were mounted for each

515
00:21:17,280 --> 00:21:19,360
library employing different approach

516
00:21:19,360 --> 00:21:21,919
approaches state-based attacks were

517
00:21:21,919 --> 00:21:25,120
carried out against each library in the

518
00:21:25,120 --> 00:21:27,679
case of wolf ssl we also

519
00:21:27,679 --> 00:21:31,840
executed the scale scalar based approach

520
00:21:31,840 --> 00:21:34,000
a detailed proof of concept

521
00:21:34,000 --> 00:21:37,200
of the later can be found following this

522
00:21:37,200 --> 00:21:39,679
qr

523
00:21:40,320 --> 00:21:42,880
both attacks directions were tested and

524
00:21:42,880 --> 00:21:46,880
the selected pnf were as far as follow

525
00:21:46,880 --> 00:21:49,200
in the case of legit grip a random

526
00:21:49,200 --> 00:21:52,240
insecure combination was used

527
00:21:52,240 --> 00:21:55,360
whereas for mbtls we selected an idea

528
00:21:55,360 --> 00:21:57,440
combination related to the modular

529
00:21:57,440 --> 00:22:00,320
reduction code snippet that saved as a

530
00:22:00,320 --> 00:22:03,039
motivation motivational example

531
00:22:03,039 --> 00:22:04,880
before

532
00:22:04,880 --> 00:22:05,760
for

533
00:22:05,760 --> 00:22:07,919
orphan cssl we also use an ideal

534
00:22:07,919 --> 00:22:10,400
combination additionally we also

535
00:22:10,400 --> 00:22:12,480
executed the attack with the two

536
00:22:12,480 --> 00:22:13,760
cardinality

537
00:22:13,760 --> 00:22:16,720
equiproc eq probable combination

538
00:22:16,720 --> 00:22:20,000
commented before in all cases we got a

539
00:22:20,000 --> 00:22:21,760
100

540
00:22:21,760 --> 00:22:25,280
percent to serve rate

541
00:22:25,280 --> 00:22:26,400
the conclusion

542
00:22:26,400 --> 00:22:28,240
conclusions of our research are the

543
00:22:28,240 --> 00:22:29,520
followings

544
00:22:29,520 --> 00:22:31,679
online templates that are very powerful

545
00:22:31,679 --> 00:22:34,000
against software implementation

546
00:22:34,000 --> 00:22:37,039
the library analysis highlight the need

547
00:22:37,039 --> 00:22:39,600
of full stack constantine code

548
00:22:39,600 --> 00:22:41,840
online templates attack can also be used

549
00:22:41,840 --> 00:22:44,320
in backward direction strategy from any

550
00:22:44,320 --> 00:22:45,679
known state

551
00:22:45,679 --> 00:22:47,520
randomizing the point

552
00:22:47,520 --> 00:22:50,000
the input point might not be sufficient

553
00:22:50,000 --> 00:22:52,240
to prevent them

554
00:22:52,240 --> 00:22:55,039
or ota doesn't require a leakage mode to

555
00:22:55,039 --> 00:22:57,280
succeed since it can exploit

556
00:22:57,280 --> 00:22:59,280
non-constant type code very deep in

557
00:22:59,280 --> 00:23:01,440
implementation stack without a legal

558
00:23:01,440 --> 00:23:02,400
model

559
00:23:02,400 --> 00:23:05,640
thank you

