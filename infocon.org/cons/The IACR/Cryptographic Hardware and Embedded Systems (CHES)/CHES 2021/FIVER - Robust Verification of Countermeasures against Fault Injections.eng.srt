1
00:00:00,960 --> 00:00:03,280
hi my name is janisha bogman and i'm

2
00:00:03,280 --> 00:00:05,279
going to talk about fiverr robust

3
00:00:05,279 --> 00:00:07,279
verification of countermeasures against

4
00:00:07,279 --> 00:00:08,880
fault injections

5
00:00:08,880 --> 00:00:13,160
which is a joint work with ironization

6
00:00:15,440 --> 00:00:17,680
and as implementations of cryptographic

7
00:00:17,680 --> 00:00:19,840
algorithms can be broken by active fault

8
00:00:19,840 --> 00:00:22,080
injection takes researchers came up with

9
00:00:22,080 --> 00:00:24,560
the plasara of countermeasures

10
00:00:24,560 --> 00:00:27,199
however the verification process of such

11
00:00:27,199 --> 00:00:29,119
countermeasures is often a manual and

12
00:00:29,119 --> 00:00:31,599
error-prone task and therefore we

13
00:00:31,599 --> 00:00:34,320
propose a fault verification

14
00:00:34,320 --> 00:00:36,719
framework that works on a gate-level

15
00:00:36,719 --> 00:00:38,239
netlist in order to analyze

16
00:00:38,239 --> 00:00:40,000
counter-measures against fault-injection

17
00:00:40,000 --> 00:00:44,960
attacks designed for fpgas and a6

18
00:00:44,960 --> 00:00:47,920
and to inject a fault in an ongoing

19
00:00:47,920 --> 00:00:49,680
encryption or decryption process an

20
00:00:49,680 --> 00:00:52,000
attacker can use several techniques

21
00:00:52,000 --> 00:00:54,719
which range from simple clock glitches

22
00:00:54,719 --> 00:00:57,199
or voltage glitches over more advanced

23
00:00:57,199 --> 00:00:59,600
techniques like using electromagnetic

24
00:00:59,600 --> 00:01:03,120
pulses or the high energy from a laser

25
00:01:03,120 --> 00:01:05,119
beam

26
00:01:05,119 --> 00:01:07,600
and as i mentioned before there are

27
00:01:07,600 --> 00:01:09,520
different methods to protect a

28
00:01:09,520 --> 00:01:11,280
cryptographic implementation against

29
00:01:11,280 --> 00:01:13,760
fault injection attacks and the most

30
00:01:13,760 --> 00:01:15,840
simple one is to use temporary

31
00:01:15,840 --> 00:01:18,080
redundancy and encrypt or decrypt the

32
00:01:18,080 --> 00:01:20,080
same inputs every time

33
00:01:20,080 --> 00:01:22,560
a similar approach

34
00:01:22,560 --> 00:01:24,799
encrypts or decrypts the same input in

35
00:01:24,799 --> 00:01:28,080
parallel which is done by spatial

36
00:01:28,080 --> 00:01:29,759
redundancy

37
00:01:29,759 --> 00:01:31,840
more advanced techniques use linear

38
00:01:31,840 --> 00:01:34,079
error correcting codes where the input

39
00:01:34,079 --> 00:01:36,400
is encoded and processed in an adapted

40
00:01:36,400 --> 00:01:38,240
version of the cryptographic

41
00:01:38,240 --> 00:01:41,360
algorithm and finally especially in the

42
00:01:41,360 --> 00:01:43,840
last three years there were many um

43
00:01:43,840 --> 00:01:46,159
dedicated countermeasures against sifa

44
00:01:46,159 --> 00:01:48,799
proposed

45
00:01:49,360 --> 00:01:51,040
and currently

46
00:01:51,040 --> 00:01:53,200
the state of the art tool to verify

47
00:01:53,200 --> 00:01:55,280
these fault countermeasures is varvey

48
00:01:55,280 --> 00:01:57,600
which is a the first automated open

49
00:01:57,600 --> 00:01:59,520
source cryptographic fault diagnostic

50
00:01:59,520 --> 00:02:01,840
tool which works on a gate level net

51
00:02:01,840 --> 00:02:04,399
list and as input you can pass the fault

52
00:02:04,399 --> 00:02:06,560
model to wear fee which is basically if

53
00:02:06,560 --> 00:02:08,878
you would like to inject bit flips or

54
00:02:08,878 --> 00:02:11,520
set or reset faults then adversary model

55
00:02:11,520 --> 00:02:13,280
which contains the number of faults you

56
00:02:13,280 --> 00:02:15,440
would like to inject then the location

57
00:02:15,440 --> 00:02:17,280
of ford and the target clock cycle so

58
00:02:17,280 --> 00:02:19,920
you can really um define

59
00:02:19,920 --> 00:02:22,640
a sub-module which you would like to um

60
00:02:22,640 --> 00:02:24,400
fault

61
00:02:24,400 --> 00:02:27,840
and um yeah and the target clock cycle

62
00:02:27,840 --> 00:02:31,120
and you have to define a set of input

63
00:02:31,120 --> 00:02:34,319
test vectors which are used um for the

64
00:02:34,319 --> 00:02:36,160
verification

65
00:02:36,160 --> 00:02:38,160
and as output you will get the total

66
00:02:38,160 --> 00:02:39,599
number of faults the number of

67
00:02:39,599 --> 00:02:42,239
non-detected faults and the location of

68
00:02:42,239 --> 00:02:43,920
the effective faults

69
00:02:43,920 --> 00:02:47,280
and also the 40 outputs

70
00:02:47,280 --> 00:02:49,519
but the problem is that you have to

71
00:02:49,519 --> 00:02:52,160
define the input test vectors

72
00:02:52,160 --> 00:02:54,000
now that you have to define a set of

73
00:02:54,000 --> 00:02:55,840
input test vectors that are used for the

74
00:02:55,840 --> 00:02:57,519
evaluation

75
00:02:57,519 --> 00:03:00,640
and as an example let's configure

76
00:03:00,640 --> 00:03:03,040
the present s box which is protected by

77
00:03:03,040 --> 00:03:05,680
a single parity bit so at the top we

78
00:03:05,680 --> 00:03:08,239
have the s-box implementation s and at

79
00:03:08,239 --> 00:03:10,159
the bottom we have the redundant

80
00:03:10,159 --> 00:03:12,640
circuit s-prime which

81
00:03:12,640 --> 00:03:14,400
is used to

82
00:03:14,400 --> 00:03:16,879
compute the parity bit concurrently to

83
00:03:16,879 --> 00:03:19,840
the s-box computation

84
00:03:19,840 --> 00:03:23,599
and what you can see is um this s-box is

85
00:03:23,599 --> 00:03:26,720
not protected against single bit faults

86
00:03:26,720 --> 00:03:30,080
so if you inject a fault um

87
00:03:30,080 --> 00:03:31,760
a single bit fault the fault can

88
00:03:31,760 --> 00:03:35,120
propagate to two output bits and if both

89
00:03:35,120 --> 00:03:37,760
output bits are toggled the parity bit

90
00:03:37,760 --> 00:03:40,319
is not able to detect uh to detect this

91
00:03:40,319 --> 00:03:42,480
fault

92
00:03:42,480 --> 00:03:44,080
and

93
00:03:44,080 --> 00:03:47,040
this is a problem um in wealthy because

94
00:03:47,040 --> 00:03:49,200
rafi can

95
00:03:49,200 --> 00:03:52,319
report for its positives

96
00:03:52,319 --> 00:03:53,439
um

97
00:03:53,439 --> 00:03:57,840
and this is in this example this happens

98
00:03:57,840 --> 00:03:58,799
when

99
00:03:58,799 --> 00:04:02,400
we inject the red set of input

100
00:04:02,400 --> 00:04:05,200
vectors so if we inject the green one so

101
00:04:05,200 --> 00:04:08,400
zero four five d e or f where we can

102
00:04:08,400 --> 00:04:10,959
report or will report all single bit

103
00:04:10,959 --> 00:04:13,760
faults it can occur in z

104
00:04:13,760 --> 00:04:16,880
nz design but if we select one two three

105
00:04:16,880 --> 00:04:19,358
six seven eight nine a b or c

106
00:04:19,358 --> 00:04:21,839
bare fee or that is at least one

107
00:04:21,839 --> 00:04:24,080
non-detected single bit fault which is

108
00:04:24,080 --> 00:04:26,639
not detected by fair v and ref you would

109
00:04:26,639 --> 00:04:28,400
report okay your design

110
00:04:28,400 --> 00:04:31,440
is secure you can use it but at the end

111
00:04:31,440 --> 00:04:32,320
it's

112
00:04:32,320 --> 00:04:34,080
it's wrong there are

113
00:04:34,080 --> 00:04:36,479
test vectors where the design is not

114
00:04:36,479 --> 00:04:38,560
secure

115
00:04:38,560 --> 00:04:41,520
and this is why we developed or proposed

116
00:04:41,520 --> 00:04:44,000
fiver which is short for fault injection

117
00:04:44,000 --> 00:04:46,320
verification

118
00:04:46,320 --> 00:04:49,919
and our verification approach work also

119
00:04:49,919 --> 00:04:52,160
works on a gate level net list and the

120
00:04:52,160 --> 00:04:54,400
gate double necklace is passed into a

121
00:04:54,400 --> 00:04:56,720
directed acyclic graph

122
00:04:56,720 --> 00:04:59,759
and then we are working now on the duck

123
00:04:59,759 --> 00:05:01,840
we are working on bdds which are used to

124
00:05:01,840 --> 00:05:04,479
evaluate the circuit and all this

125
00:05:04,479 --> 00:05:08,560
happens um in an initialization phase

126
00:05:08,560 --> 00:05:12,080
and after this initialization phase we

127
00:05:12,080 --> 00:05:13,520
um

128
00:05:13,520 --> 00:05:16,080
we go on with an evaluation phase where

129
00:05:16,080 --> 00:05:18,639
we use symbolic fault injection

130
00:05:18,639 --> 00:05:20,800
and after a symbolic fault injection we

131
00:05:20,800 --> 00:05:23,120
apply a diagnosis where we compare the

132
00:05:23,120 --> 00:05:26,400
golden so the um the correct model with

133
00:05:26,400 --> 00:05:30,240
the faulty model and then we um can

134
00:05:30,240 --> 00:05:31,840
report

135
00:05:31,840 --> 00:05:34,800
if the circuit is secure or not

136
00:05:34,800 --> 00:05:37,120
okay so let's step through the diff

137
00:05:37,120 --> 00:05:39,520
different phases and steps here so first

138
00:05:39,520 --> 00:05:41,680
we will create a deck so let's consider

139
00:05:41,680 --> 00:05:43,440
this circuit here

140
00:05:43,440 --> 00:05:46,160
and first of all we constrain our set of

141
00:05:46,160 --> 00:05:49,039
gates which we which we support by fiber

142
00:05:49,039 --> 00:05:50,000
so

143
00:05:50,000 --> 00:05:51,840
we have sequential gates which are

144
00:05:51,840 --> 00:05:54,400
basically just registers then we have

145
00:05:54,400 --> 00:05:57,039
combinational gates which are not an end

146
00:05:57,039 --> 00:05:59,919
or noise or ixnor gates and then we

147
00:05:59,919 --> 00:06:02,720
unite all gates in a set g

148
00:06:02,720 --> 00:06:06,319
um so g contains all valid sets all

149
00:06:06,319 --> 00:06:09,520
valid gates which are supported by fiber

150
00:06:09,520 --> 00:06:11,280
and then such a circuit can be

151
00:06:11,280 --> 00:06:13,680
translated into a duck

152
00:06:13,680 --> 00:06:17,280
and first of all we will introduce one

153
00:06:17,280 --> 00:06:20,240
single input node for each original

154
00:06:20,240 --> 00:06:22,560
input of the circuit and also we will

155
00:06:22,560 --> 00:06:25,360
introduce an output node for each output

156
00:06:25,360 --> 00:06:27,520
and then each gate

157
00:06:27,520 --> 00:06:30,800
is translated to a dedicated node so for

158
00:06:30,800 --> 00:06:31,840
each

159
00:06:31,840 --> 00:06:33,759
or gate for example we will have a node

160
00:06:33,759 --> 00:06:35,039
which

161
00:06:35,039 --> 00:06:38,560
is associated with an or gate and so on

162
00:06:38,560 --> 00:06:41,120
okay so this is um

163
00:06:41,120 --> 00:06:43,360
yeah very straightforward and a common

164
00:06:43,360 --> 00:06:45,520
way if you would like to build a model

165
00:06:45,520 --> 00:06:49,360
from a digital circuit

166
00:06:49,360 --> 00:06:50,560
but then

167
00:06:50,560 --> 00:06:51,759
we will

168
00:06:51,759 --> 00:06:54,720
build bdds for each node

169
00:06:54,720 --> 00:06:58,240
in our duck and what does it mean so

170
00:06:58,240 --> 00:07:00,720
normally we have our duck representation

171
00:07:00,720 --> 00:07:03,199
and now it's just a

172
00:07:03,199 --> 00:07:05,120
simple example here so we have three

173
00:07:05,120 --> 00:07:07,919
inputs x zero x one and x two and two

174
00:07:07,919 --> 00:07:10,400
gates or the two n gates and we will

175
00:07:10,400 --> 00:07:12,479
have an output y

176
00:07:12,479 --> 00:07:14,880
and then we can represent um

177
00:07:14,880 --> 00:07:17,520
this function by a simple truth table

178
00:07:17,520 --> 00:07:18,400
or

179
00:07:18,400 --> 00:07:21,199
we can represent it by a bdd

180
00:07:21,199 --> 00:07:24,080
and in this case we will introduce one

181
00:07:24,080 --> 00:07:27,199
bdd variable for each input node so x0

182
00:07:27,199 --> 00:07:29,199
x1 and x2

183
00:07:29,199 --> 00:07:30,479
and

184
00:07:30,479 --> 00:07:32,880
then the bdd looks as follows so if we

185
00:07:32,880 --> 00:07:37,120
evaluate x0 and x0 we directly know okay

186
00:07:37,120 --> 00:07:39,199
the output of y will be 0 and we can

187
00:07:39,199 --> 00:07:42,400
directly jump to the output 0. but if x0

188
00:07:42,400 --> 00:07:45,120
is 1 we have to evaluate x1 and then

189
00:07:45,120 --> 00:07:47,440
here's the same if x1 is 0 we can jump

190
00:07:47,440 --> 00:07:50,800
to 0 but if x1 is 1 we have to evaluate

191
00:07:50,800 --> 00:07:54,560
x2 and then if x2 is 1 as well we will

192
00:07:54,560 --> 00:07:55,599
jump to

193
00:07:55,599 --> 00:07:58,639
the final output 1. so this

194
00:07:58,639 --> 00:08:00,479
representation

195
00:08:00,479 --> 00:08:03,599
is the bdd of the second end gate and we

196
00:08:03,599 --> 00:08:07,039
will do this for every node in our deck

197
00:08:07,039 --> 00:08:09,280
so first we will start by introducing a

198
00:08:09,280 --> 00:08:11,360
bdd variable for each input node and

199
00:08:11,360 --> 00:08:13,360
then we will go

200
00:08:13,360 --> 00:08:16,560
through the duct and evaluate each node

201
00:08:16,560 --> 00:08:19,039
of zita

202
00:08:19,520 --> 00:08:20,479
okay

203
00:08:20,479 --> 00:08:21,759
and then

204
00:08:21,759 --> 00:08:24,319
we will go on with the evaluation phase

205
00:08:24,319 --> 00:08:27,120
and

206
00:08:27,120 --> 00:08:31,120
first of all how do we inject faults

207
00:08:31,120 --> 00:08:33,519
so and here we are following a paper

208
00:08:33,519 --> 00:08:36,159
which we proposed um also in this year

209
00:08:36,159 --> 00:08:38,559
where we revisited fault adversary

210
00:08:38,559 --> 00:08:39,599
models

211
00:08:39,599 --> 00:08:42,799
and we say we can model a fault by

212
00:08:42,799 --> 00:08:45,279
replace a boolean function so in this

213
00:08:45,279 --> 00:08:47,920
case let's consider we would like to

214
00:08:47,920 --> 00:08:50,640
inject the fault in this nk tier and

215
00:08:50,640 --> 00:08:52,839
then we say okay our fault model for

216
00:08:52,839 --> 00:08:55,600
example um considers that we

217
00:08:55,600 --> 00:08:58,480
exchange the end gate by an or gate by a

218
00:08:58,480 --> 00:09:02,000
set or by reset fault and then we will

219
00:09:02,000 --> 00:09:04,640
start by replacing the end gate with an

220
00:09:04,640 --> 00:09:05,920
or gate

221
00:09:05,920 --> 00:09:09,360
and by doing so we have to re-evaluate

222
00:09:09,360 --> 00:09:12,240
all nodes that

223
00:09:12,240 --> 00:09:14,959
lie in the propagation path of the or

224
00:09:14,959 --> 00:09:18,000
gate so all the red nodes here

225
00:09:18,000 --> 00:09:18,800
and

226
00:09:18,800 --> 00:09:20,560
this means we have to re-evaluate all

227
00:09:20,560 --> 00:09:22,800
bdds

228
00:09:22,800 --> 00:09:25,040
and at the end this will result in a

229
00:09:25,040 --> 00:09:28,160
faulty duct deep prime

230
00:09:28,160 --> 00:09:29,920
okay but

231
00:09:29,920 --> 00:09:32,720
as i mentioned earlier fiber should

232
00:09:32,720 --> 00:09:34,800
prevent false positive

233
00:09:34,800 --> 00:09:37,200
and that means that we not only would

234
00:09:37,200 --> 00:09:38,160
like to

235
00:09:38,160 --> 00:09:40,240
evaluate fault injections over all

236
00:09:40,240 --> 00:09:43,360
possible or valid input vectors

237
00:09:43,360 --> 00:09:45,839
but also over all possible fault

238
00:09:45,839 --> 00:09:48,839
combinations that can occur in a given

239
00:09:48,839 --> 00:09:51,519
circuit and to do so

240
00:09:51,519 --> 00:09:54,160
we introduce a set lambda and in the set

241
00:09:54,160 --> 00:09:57,120
lambda we collect all

242
00:09:57,120 --> 00:09:58,320
nodes

243
00:09:58,320 --> 00:10:00,720
that are associated with a given

244
00:10:00,720 --> 00:10:02,079
location l

245
00:10:02,079 --> 00:10:05,040
and by a location l we refer to

246
00:10:05,040 --> 00:10:07,440
sequential gates or combinational gates

247
00:10:07,440 --> 00:10:10,079
or both and for this example let's

248
00:10:10,079 --> 00:10:12,240
assume l is equal to c

249
00:10:12,240 --> 00:10:14,560
that mean our set lambda would contain

250
00:10:14,560 --> 00:10:18,720
all nodes from 7 to 14 and from 19 to 22

251
00:10:18,720 --> 00:10:20,320
and of course of

252
00:10:20,320 --> 00:10:22,320
all nodes that

253
00:10:22,320 --> 00:10:23,600
will

254
00:10:23,600 --> 00:10:25,440
come after these

255
00:10:25,440 --> 00:10:27,600
last line of nodes will included in

256
00:10:27,600 --> 00:10:30,320
lambda as well

257
00:10:30,320 --> 00:10:31,519
okay

258
00:10:31,519 --> 00:10:33,279
so this is the first step then in the

259
00:10:33,279 --> 00:10:35,440
second step we will divide lambda into

260
00:10:35,440 --> 00:10:36,560
different

261
00:10:36,560 --> 00:10:38,640
sets tether i's

262
00:10:38,640 --> 00:10:41,200
where each data i contains all nodes

263
00:10:41,200 --> 00:10:44,480
from one specific logic stage so in this

264
00:10:44,480 --> 00:10:46,640
example we have two logic stage stage

265
00:10:46,640 --> 00:10:49,360
zero and stage one and that means data

266
00:10:49,360 --> 00:10:51,120
zero will contain the node seven to

267
00:10:51,120 --> 00:10:53,760
fourteen and theta one will contain zero

268
00:10:53,760 --> 00:10:56,880
nineteen to twenty two

269
00:10:57,360 --> 00:10:59,279
okay and

270
00:10:59,279 --> 00:11:02,000
then the next step is that we would like

271
00:11:02,000 --> 00:11:04,480
to incorporate the parameter n which

272
00:11:04,480 --> 00:11:07,120
says how many faults

273
00:11:07,120 --> 00:11:10,079
do we inject simultaneously in one logic

274
00:11:10,079 --> 00:11:13,680
stage so we collect in gamma i's the

275
00:11:13,680 --> 00:11:16,240
valid combinations up to n so in this

276
00:11:16,240 --> 00:11:19,360
example let's consider n is equal to two

277
00:11:19,360 --> 00:11:21,360
then we build two sets

278
00:11:21,360 --> 00:11:24,000
gamma zero and gamma one which contains

279
00:11:24,000 --> 00:11:26,240
all valid pairs of nodes

280
00:11:26,240 --> 00:11:29,040
um that are available in our circuit so

281
00:11:29,040 --> 00:11:31,279
for example for gamma zero we have seven

282
00:11:31,279 --> 00:11:33,040
eight seven nine seven ten seven eleven

283
00:11:33,040 --> 00:11:35,279
and seven twelve and so on and so on and

284
00:11:35,279 --> 00:11:38,320
for gamma one yeah a similar

285
00:11:38,320 --> 00:11:40,470
uh similar combinations

286
00:11:40,470 --> 00:11:42,000
[Music]

287
00:11:42,000 --> 00:11:44,640
now as i mentioned earlier we inject

288
00:11:44,640 --> 00:11:47,040
faults by reple replacing a boolean

289
00:11:47,040 --> 00:11:48,320
function

290
00:11:48,320 --> 00:11:48,910
and

291
00:11:48,910 --> 00:11:50,000
[Music]

292
00:11:50,000 --> 00:11:51,519
we will cover

293
00:11:51,519 --> 00:11:52,800
all

294
00:11:52,800 --> 00:11:53,680
um

295
00:11:53,680 --> 00:11:55,040
all valid

296
00:11:55,040 --> 00:11:57,200
replacements here so

297
00:11:57,200 --> 00:11:59,680
for example let's consider we would like

298
00:11:59,680 --> 00:12:00,959
to

299
00:12:00,959 --> 00:12:03,360
um fault the or and the end gate at the

300
00:12:03,360 --> 00:12:05,920
top then we

301
00:12:05,920 --> 00:12:08,240
will look up the fault mapping so we say

302
00:12:08,240 --> 00:12:09,600
the end gate

303
00:12:09,600 --> 00:12:12,000
is allowed to or is mapped to an or gate

304
00:12:12,000 --> 00:12:13,920
or to a set or reset fault and so or

305
00:12:13,920 --> 00:12:16,079
gate is for example mapped to a nor gate

306
00:12:16,079 --> 00:12:18,720
or a set under reset fault and all in

307
00:12:18,720 --> 00:12:21,600
all this gives us nine different

308
00:12:21,600 --> 00:12:23,920
possibilities to inject default or nine

309
00:12:23,920 --> 00:12:26,240
different fault mappings which are just

310
00:12:26,240 --> 00:12:27,440
has to be

311
00:12:27,440 --> 00:12:31,440
which are just have to be tested for

312
00:12:31,440 --> 00:12:33,040
this combination

313
00:12:33,040 --> 00:12:37,120
seven eight of the note seven and eight

314
00:12:37,760 --> 00:12:39,760
and then our tool

315
00:12:39,760 --> 00:12:40,720
um

316
00:12:40,720 --> 00:12:42,720
also supports univariate and

317
00:12:42,720 --> 00:12:45,040
multivariate fault injections

318
00:12:45,040 --> 00:12:46,079
and

319
00:12:46,079 --> 00:12:47,839
yeah if you just consider only variate

320
00:12:47,839 --> 00:12:50,079
fault injections faults can solely

321
00:12:50,079 --> 00:12:53,360
inject it into one single gamma i

322
00:12:53,360 --> 00:12:56,480
so we first will inject all possible

323
00:12:56,480 --> 00:12:59,120
faults in gamma 0 and then in gamma 1.

324
00:12:59,120 --> 00:13:01,360
so this is very straightforward

325
00:13:01,360 --> 00:13:03,120
but this gets more complicated if we

326
00:13:03,120 --> 00:13:05,680
would like to analyze a multivariate

327
00:13:05,680 --> 00:13:09,279
fault injections and here we say we can

328
00:13:09,279 --> 00:13:12,720
inject up to n false in one single logic

329
00:13:12,720 --> 00:13:16,399
stage so let's assume um we would like

330
00:13:16,399 --> 00:13:18,399
to analyze b variate fault injections

331
00:13:18,399 --> 00:13:20,959
then we would be equal to two and we

332
00:13:20,959 --> 00:13:21,760
would

333
00:13:21,760 --> 00:13:22,800
um

334
00:13:22,800 --> 00:13:24,800
inject two faults in the first logic

335
00:13:24,800 --> 00:13:27,040
stage and two faults in the second logic

336
00:13:27,040 --> 00:13:31,200
state stage so in total we have two or v

337
00:13:31,200 --> 00:13:33,360
times n nodes that affected per fault

338
00:13:33,360 --> 00:13:36,720
injection so in our example four nodes

339
00:13:36,720 --> 00:13:38,639
and this again increases the number of

340
00:13:38,639 --> 00:13:42,240
fault injection drastically

341
00:13:42,240 --> 00:13:45,279
and as you see not only the parameter v

342
00:13:45,279 --> 00:13:48,000
but also also the parameter n and the

343
00:13:48,000 --> 00:13:50,399
fault mapping will increase the number

344
00:13:50,399 --> 00:13:52,160
of valid fault combinations that need to

345
00:13:52,160 --> 00:13:54,959
be evaluated drastically

346
00:13:54,959 --> 00:13:56,399
so therefore we came up with two

347
00:13:56,399 --> 00:13:58,720
optimization strategies and the first

348
00:13:58,720 --> 00:14:02,880
the first optimization strategy exploits

349
00:14:02,880 --> 00:14:05,680
the optimization passes of each node

350
00:14:05,680 --> 00:14:06,480
which

351
00:14:06,480 --> 00:14:09,279
is located in our fault or in our duck

352
00:14:09,279 --> 00:14:10,240
and

353
00:14:10,240 --> 00:14:13,120
here we do not re-evaluate the entire

354
00:14:13,120 --> 00:14:15,199
duck every time so after every fault

355
00:14:15,199 --> 00:14:19,040
injection but only the nodes which

356
00:14:19,040 --> 00:14:21,440
lie in the propagation path of the

357
00:14:21,440 --> 00:14:23,360
faulted node

358
00:14:23,360 --> 00:14:25,199
and the second one is called complexity

359
00:14:25,199 --> 00:14:28,560
reduction and here we reduce the initial

360
00:14:28,560 --> 00:14:31,680
set lambda or we reduce the nodes in the

361
00:14:31,680 --> 00:14:33,360
initial set lambda

362
00:14:33,360 --> 00:14:34,079
so

363
00:14:34,079 --> 00:14:35,440
um

364
00:14:35,440 --> 00:14:38,079
yeah so by ending up with a

365
00:14:38,079 --> 00:14:40,959
with a lower set of faults which need to

366
00:14:40,959 --> 00:14:43,440
be evaluated but more details can be

367
00:14:43,440 --> 00:14:46,480
found in the paper

368
00:14:47,120 --> 00:14:49,279
okay and

369
00:14:49,279 --> 00:14:52,000
finally we have the diagnosis

370
00:14:52,000 --> 00:14:54,240
and here we assume that we have our

371
00:14:54,240 --> 00:14:55,839
golden model

372
00:14:55,839 --> 00:14:58,240
from the duck d and our faulty model

373
00:14:58,240 --> 00:15:00,800
model of the duct d prime

374
00:15:00,800 --> 00:15:03,120
and let's assume we inject a fault in

375
00:15:03,120 --> 00:15:05,600
the extra gate here and inject the set

376
00:15:05,600 --> 00:15:07,680
fault

377
00:15:07,680 --> 00:15:10,639
then we have or we could have two faulty

378
00:15:10,639 --> 00:15:13,519
output bits and to check this we

379
00:15:13,519 --> 00:15:16,160
introduce um

380
00:15:16,160 --> 00:15:18,959
some additional layer let's say which is

381
00:15:18,959 --> 00:15:20,880
where we do not really

382
00:15:20,880 --> 00:15:22,399
introduce new

383
00:15:22,399 --> 00:15:26,320
deck nodes but only bdds are created and

384
00:15:26,320 --> 00:15:30,000
we create x or bdds between the outputs

385
00:15:30,000 --> 00:15:32,079
of the duck of the golden duck and the

386
00:15:32,079 --> 00:15:34,560
faulty duck

387
00:15:34,560 --> 00:15:36,079
and the nice thing

388
00:15:36,079 --> 00:15:39,120
when using bdds is that we can check the

389
00:15:39,120 --> 00:15:42,399
outputs really efficiently so we can

390
00:15:42,399 --> 00:15:44,639
count all satisfying variable

391
00:15:44,639 --> 00:15:46,720
assignments at the output

392
00:15:46,720 --> 00:15:50,320
over all possible input combinations

393
00:15:50,320 --> 00:15:52,399
and as you can see

394
00:15:52,399 --> 00:15:54,880
we have the same bdd variables for the

395
00:15:54,880 --> 00:15:57,199
golden duck and for the faulty duck so

396
00:15:57,199 --> 00:15:59,839
in zero to ins in six

397
00:15:59,839 --> 00:16:00,720
so

398
00:16:00,720 --> 00:16:02,079
um

399
00:16:02,079 --> 00:16:03,920
yeah we have the same input variables

400
00:16:03,920 --> 00:16:06,839
and therefore we consider the same input

401
00:16:06,839 --> 00:16:10,000
vectors and therefore we can directly

402
00:16:10,000 --> 00:16:12,639
check for given fault injection over all

403
00:16:12,639 --> 00:16:14,959
possible input combinations if the fault

404
00:16:14,959 --> 00:16:18,000
is effective or not

405
00:16:18,399 --> 00:16:19,279
okay

406
00:16:19,279 --> 00:16:22,480
and here finally we performed a few case

407
00:16:22,480 --> 00:16:25,680
studies for craft led and aes we

408
00:16:25,680 --> 00:16:27,680
consider detection and correction

409
00:16:27,680 --> 00:16:29,279
counter measures which are based on

410
00:16:29,279 --> 00:16:31,680
linear error correcting codes then we

411
00:16:31,680 --> 00:16:33,600
considered only variate and multivariate

412
00:16:33,600 --> 00:16:36,959
fault models and we showed that the

413
00:16:36,959 --> 00:16:38,800
optimization strategy based on the

414
00:16:38,800 --> 00:16:41,440
complete complexity reduction is

415
00:16:41,440 --> 00:16:43,040
effective

416
00:16:43,040 --> 00:16:45,199
and all our experiments were done on

417
00:16:45,199 --> 00:16:50,720
axiom e5 cpu with 3.2 gigahertz um the

418
00:16:50,720 --> 00:16:52,959
machine was equipped with 128 gigabyte

419
00:16:52,959 --> 00:16:54,240
of ram

420
00:16:54,240 --> 00:16:57,120
we used eight threads for our tool and

421
00:16:57,120 --> 00:16:59,120
each thread was allowed to use up to a

422
00:16:59,120 --> 00:17:01,759
gigabyte of ram

423
00:17:01,759 --> 00:17:02,959
and

424
00:17:02,959 --> 00:17:04,959
maybe um

425
00:17:04,959 --> 00:17:07,520
let's have a look on some numbers so um

426
00:17:07,520 --> 00:17:09,520
first in the when we come when we

427
00:17:09,520 --> 00:17:11,839
evaluate a craft one round or one round

428
00:17:11,839 --> 00:17:13,280
craft design

429
00:17:13,280 --> 00:17:17,439
um we have 766 valid combinations here

430
00:17:17,439 --> 00:17:19,119
we just use the bit flip model and

431
00:17:19,119 --> 00:17:22,240
injected one fault and then our tool is

432
00:17:22,240 --> 00:17:24,720
very fast and can verify the design in

433
00:17:24,720 --> 00:17:26,959
under one second

434
00:17:26,959 --> 00:17:30,240
even if we inject two bit faults and we

435
00:17:30,240 --> 00:17:31,760
have

436
00:17:31,760 --> 00:17:33,600
thousand combinations and the tool just

437
00:17:33,600 --> 00:17:36,320
takes 1.5 seconds here

438
00:17:36,320 --> 00:17:37,919
and this gets a little bit more

439
00:17:37,919 --> 00:17:40,559
complicated so if we increase um the

440
00:17:40,559 --> 00:17:42,320
circuit so the counter measure is now

441
00:17:42,320 --> 00:17:44,799
able to detect up to three bits and we

442
00:17:44,799 --> 00:17:47,440
inject three bits here and we do not use

443
00:17:47,440 --> 00:17:50,320
any complexity reduction then we have 90

444
00:17:50,320 --> 00:17:51,440
million

445
00:17:51,440 --> 00:17:53,440
valid combinations and these

446
00:17:53,440 --> 00:17:55,360
combinations can be set and

447
00:17:55,360 --> 00:17:59,360
checked in roughly 3000 seconds

448
00:17:59,360 --> 00:18:01,919
and we are also able to analyze an

449
00:18:01,919 --> 00:18:04,880
entire as128 round which is equipped

450
00:18:04,880 --> 00:18:07,200
with a detection counter measure and the

451
00:18:07,200 --> 00:18:09,600
first one the first design is able to

452
00:18:09,600 --> 00:18:12,480
detect one bit um or one

453
00:18:12,480 --> 00:18:17,360
bit false and here we have we are 24 000

454
00:18:17,360 --> 00:18:20,400
roughly 25 000 combinations which can be

455
00:18:20,400 --> 00:18:22,480
checked in 22 seconds

456
00:18:22,480 --> 00:18:24,480
and if we increase the counter measure

457
00:18:24,480 --> 00:18:25,919
and such that the counter measure is

458
00:18:25,919 --> 00:18:28,559
able to take two faults

459
00:18:28,559 --> 00:18:30,559
here we have a huge number of

460
00:18:30,559 --> 00:18:33,120
combinations so if we would not use any

461
00:18:33,120 --> 00:18:36,240
complexity reduction there would be 300

462
00:18:36,240 --> 00:18:38,799
million combinations and yeah we are not

463
00:18:38,799 --> 00:18:40,480
able to check this amount of

464
00:18:40,480 --> 00:18:42,799
combinations

465
00:18:42,799 --> 00:18:44,799
for such a large circuit so you can see

466
00:18:44,799 --> 00:18:47,360
here we can shake a huge amount of

467
00:18:47,360 --> 00:18:49,360
combinations but the circuit is smaller

468
00:18:49,360 --> 00:18:51,840
for the led's design but the aes design

469
00:18:51,840 --> 00:18:54,840
is too large so the program would not

470
00:18:54,840 --> 00:18:57,760
finish but if we apply our complexity

471
00:18:57,760 --> 00:19:00,480
reduction we just have 56 million

472
00:19:00,480 --> 00:19:04,080
combinations and then yeah our tool day

473
00:19:04,080 --> 00:19:05,919
needs

474
00:19:05,919 --> 00:19:09,440
470 000 seconds but it is possible to

475
00:19:09,440 --> 00:19:13,840
analyze or to verify such a design

476
00:19:13,840 --> 00:19:15,919
and if you are interested in our design

477
00:19:15,919 --> 00:19:18,799
you can find it on github um on our

478
00:19:18,799 --> 00:19:21,280
chair for security engineering

479
00:19:21,280 --> 00:19:24,559
site slash fiverr

480
00:19:24,559 --> 00:19:26,320
but of course there are some limitations

481
00:19:26,320 --> 00:19:28,720
so first of all the circuit size

482
00:19:28,720 --> 00:19:30,720
as you could see if you use large

483
00:19:30,720 --> 00:19:34,640
circuits our tool is not able to pass on

484
00:19:34,640 --> 00:19:37,200
the circuit and translate it into bdds

485
00:19:37,200 --> 00:19:40,080
so this is one drop but we are able to

486
00:19:40,080 --> 00:19:42,880
pass an entire aas round but for example

487
00:19:42,880 --> 00:19:45,280
using two aes rounds would not be

488
00:19:45,280 --> 00:19:47,600
possible

489
00:19:47,600 --> 00:19:49,280
then the next thing is the fault model

490
00:19:49,280 --> 00:19:50,960
which is

491
00:19:50,960 --> 00:19:53,520
a natural limitation because if we

492
00:19:53,520 --> 00:19:54,799
increase n

493
00:19:54,799 --> 00:19:57,360
and v yeah we would have too many

494
00:19:57,360 --> 00:19:59,520
combinations that need to be checked and

495
00:19:59,520 --> 00:20:01,679
then yeah our two will not be able to

496
00:20:01,679 --> 00:20:02,960
finish

497
00:20:02,960 --> 00:20:05,360
in an adequate time here

498
00:20:05,360 --> 00:20:07,919
and finally the circuit structure yeah

499
00:20:07,919 --> 00:20:11,440
as we are using um ducts as a model as a

500
00:20:11,440 --> 00:20:14,559
circuit model we are not able to pass

501
00:20:14,559 --> 00:20:16,960
circuits where we have a loop

502
00:20:16,960 --> 00:20:19,120
so well if you would like to use five

503
00:20:19,120 --> 00:20:20,960
and check a design you first have to

504
00:20:20,960 --> 00:20:24,080
unroll the design and then you can pass

505
00:20:24,080 --> 00:20:25,840
it into our

506
00:20:25,840 --> 00:20:29,199
enter our data structure

507
00:20:29,520 --> 00:20:31,440
okay and to wrap up

508
00:20:31,440 --> 00:20:33,039
once again here is

509
00:20:33,039 --> 00:20:36,159
our flow or tool flow and we will our

510
00:20:36,159 --> 00:20:38,320
tool works on a gate level net list and

511
00:20:38,320 --> 00:20:40,080
we will pass the gate level net list

512
00:20:40,080 --> 00:20:42,880
into a duck then the duck nodes are

513
00:20:42,880 --> 00:20:45,760
evaluated and bdds are created

514
00:20:45,760 --> 00:20:49,840
and then we can exhaustively check all

515
00:20:49,840 --> 00:20:52,320
possible fault combinations over all

516
00:20:52,320 --> 00:20:54,240
valid input vectors

517
00:20:54,240 --> 00:20:55,039
and

518
00:20:55,039 --> 00:20:57,440
all these possible combinations are

519
00:20:57,440 --> 00:21:00,080
checked in our diagnosis step

520
00:21:00,080 --> 00:21:01,760
and

521
00:21:01,760 --> 00:21:03,919
this gives us a tool which is

522
00:21:03,919 --> 00:21:06,559
really fast so we can check 90 million

523
00:21:06,559 --> 00:21:08,240
fault injection for a single round of

524
00:21:08,240 --> 00:21:11,280
craft in under 50 minutes while testing

525
00:21:11,280 --> 00:21:13,919
all two to the power of 128 input

526
00:21:13,919 --> 00:21:15,039
assignments

527
00:21:15,039 --> 00:21:18,159
so this is pretty impressive

528
00:21:18,159 --> 00:21:21,919
um yes thank you very much for

529
00:21:21,919 --> 00:21:24,159
listening to my talk

530
00:21:24,159 --> 00:21:26,080
and watching the video you can see our

531
00:21:26,080 --> 00:21:29,520
references and if you have any questions

532
00:21:29,520 --> 00:21:32,559
do not hesitate to contact us

533
00:21:32,559 --> 00:21:34,720
and we will be happy to help you with

534
00:21:34,720 --> 00:21:36,960
the tool or to answer any questions

535
00:21:36,960 --> 00:21:40,360
thanks a lot

