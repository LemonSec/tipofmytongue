1
00:00:01,199 --> 00:00:03,599
in this video we will present the result

2
00:00:03,600 --> 00:00:05,759
obtained for our work exploring crypto

3
00:00:05,759 --> 00:00:07,759
physical dark matter and learning with

4
00:00:07,759 --> 00:00:09,200
physical rounding

5
00:00:09,200 --> 00:00:11,200
uh this is a joint work with sebastian

6
00:00:11,200 --> 00:00:13,360
rivelle eric miro charlemont and

7
00:00:13,360 --> 00:00:15,519
francois davis standard so i'm sharma

8
00:00:15,519 --> 00:00:17,279
mine i will start the presentation but

9
00:00:17,279 --> 00:00:20,080
the letter will be shared between me and

10
00:00:20,080 --> 00:00:23,600
uh and the name of the speaker will be

11
00:00:23,600 --> 00:00:26,480
underlined at the bottom of the slide

12
00:00:26,480 --> 00:00:28,080
so as a motivation we will use the

13
00:00:28,080 --> 00:00:30,560
well-known symmetric cryptographic setup

14
00:00:30,560 --> 00:00:32,880
where alice wants to exchange some data

15
00:00:32,880 --> 00:00:35,920
with bob but in a secure manner

16
00:00:35,920 --> 00:00:37,840
for that they both know a secret

17
00:00:37,840 --> 00:00:40,320
information k the key

18
00:00:40,320 --> 00:00:42,160
that they use either to encrypt some

19
00:00:42,160 --> 00:00:45,039
data in the case of alice or to decrypt

20
00:00:45,039 --> 00:00:47,600
some data in the case of bob

21
00:00:47,600 --> 00:00:49,760
while solutions for such a problem have

22
00:00:49,760 --> 00:00:52,800
been well studied for the last decades

23
00:00:52,800 --> 00:00:54,239
the issue of side channel leakage

24
00:00:54,239 --> 00:00:56,480
appeared as a new tweet because of the

25
00:00:56,480 --> 00:00:58,480
devastating attacks that they allowed to

26
00:00:58,480 --> 00:00:59,840
achieve

27
00:00:59,840 --> 00:01:02,000
and to tackle in fact this problem of

28
00:01:02,000 --> 00:01:03,920
side channel attacks masking was

29
00:01:03,920 --> 00:01:06,080
proposed as a powerful but expensive

30
00:01:06,080 --> 00:01:08,880
content measure both in hardware and

31
00:01:08,880 --> 00:01:10,000
software

32
00:01:10,000 --> 00:01:12,080
and in fact it was more particularly for

33
00:01:12,080 --> 00:01:14,080
the non-linear nonlinear sorry

34
00:01:14,080 --> 00:01:17,840
operations that are typically used in uh

35
00:01:17,840 --> 00:01:19,920
the implementation of block cipher

36
00:01:19,920 --> 00:01:22,960
because these imply a quadratic overhead

37
00:01:22,960 --> 00:01:25,600
in the number of shares and requires a

38
00:01:25,600 --> 00:01:27,600
refreshing mechanism which increase the

39
00:01:27,600 --> 00:01:30,079
randomness costs

40
00:01:30,079 --> 00:01:32,159
uh as a result of this limitation the

41
00:01:32,159 --> 00:01:34,479
wreaking mechanism has been introduced

42
00:01:34,479 --> 00:01:37,600
and the main of the idea of the later is

43
00:01:37,600 --> 00:01:40,400
instead of directly music the secret key

44
00:01:40,400 --> 00:01:42,799
k for an encryption process

45
00:01:42,799 --> 00:01:44,479
a temporary key

46
00:01:44,479 --> 00:01:47,680
k star is derived from key and a public

47
00:01:47,680 --> 00:01:49,600
value air

48
00:01:49,600 --> 00:01:50,560
this

49
00:01:50,560 --> 00:01:53,119
new temporary secret key k star

50
00:01:53,119 --> 00:01:55,520
derivation is done for each execution of

51
00:01:55,520 --> 00:01:57,520
a specific algorithm

52
00:01:57,520 --> 00:01:59,280
and this has the direct effect of

53
00:01:59,280 --> 00:02:01,439
limiting the overall information that an

54
00:02:01,439 --> 00:02:03,920
adversary can obtain about the secret

55
00:02:03,920 --> 00:02:06,960
key across different executions

56
00:02:06,960 --> 00:02:09,440
of course this remains valid as long as

57
00:02:09,440 --> 00:02:12,080
the so-called recurring function is

58
00:02:12,080 --> 00:02:15,360
secure i can say channel attacks

59
00:02:15,360 --> 00:02:17,680
put in another way wrecking leverage the

60
00:02:17,680 --> 00:02:20,319
separation duty between an easy to

61
00:02:20,319 --> 00:02:23,680
protect working function the air k block

62
00:02:23,680 --> 00:02:25,440
in dark grey in the figure

63
00:02:25,440 --> 00:02:27,920
and a cryptographically strong function

64
00:02:27,920 --> 00:02:29,760
such as the block cipher or the tree

65
00:02:29,760 --> 00:02:32,160
cable block cipher represented in light

66
00:02:32,160 --> 00:02:34,840
grey in the

67
00:02:34,840 --> 00:02:38,000
figure however apart from the fact that

68
00:02:38,000 --> 00:02:40,080
it should be easy to protect specifying

69
00:02:40,080 --> 00:02:42,319
unified properties for the working

70
00:02:42,319 --> 00:02:45,840
functions uh appear to be challenging

71
00:02:45,840 --> 00:02:47,519
currently published solution adjusts the

72
00:02:47,519 --> 00:02:49,680
trade-off between efficiency and the

73
00:02:49,680 --> 00:02:52,400
physical assumptions required to achieve

74
00:02:52,400 --> 00:02:54,160
a secure implementation in different

75
00:02:54,160 --> 00:02:56,480
ways

76
00:02:56,800 --> 00:02:59,360
as a first example we remind here the

77
00:02:59,360 --> 00:03:01,440
proposal of medull that has been

78
00:03:01,440 --> 00:03:04,400
published in 2010 and for which they

79
00:03:04,400 --> 00:03:07,760
consider that an adversary a can observe

80
00:03:07,760 --> 00:03:13,040
noisy leakage of the value of k star

81
00:03:13,040 --> 00:03:14,959
their solution is based on a list of

82
00:03:14,959 --> 00:03:17,280
heuristic properties such as the fact

83
00:03:17,280 --> 00:03:19,360
that the rooking function

84
00:03:19,360 --> 00:03:21,920
should have good diffusion or the fact

85
00:03:21,920 --> 00:03:24,080
that this recording function should be

86
00:03:24,080 --> 00:03:26,720
easy to protect using masking

87
00:03:26,720 --> 00:03:29,280
for a more practical side of you

88
00:03:29,280 --> 00:03:31,599
the wreaking function is effect a final

89
00:03:31,599 --> 00:03:33,760
feed multiplication so k star is

90
00:03:33,760 --> 00:03:36,720
obtained by multiplying k with air over

91
00:03:36,720 --> 00:03:39,840
the field defined by 2 to the power b k

92
00:03:39,840 --> 00:03:41,920
their solution takes advantage of the

93
00:03:41,920 --> 00:03:44,720
fact that the final field multiplication

94
00:03:44,720 --> 00:03:46,640
is in fact homomorphic

95
00:03:46,640 --> 00:03:48,799
and allows this to implement the masking

96
00:03:48,799 --> 00:03:51,519
of the later using a linear overhead in

97
00:03:51,519 --> 00:03:54,319
term of the number of shares while being

98
00:03:54,319 --> 00:03:56,640
efficient in terms of latency and costs

99
00:03:56,640 --> 00:03:58,640
it has been shown that for the amming

100
00:03:58,640 --> 00:04:00,879
weight case the solution was easy to

101
00:04:00,879 --> 00:04:03,360
break without sufficient noise

102
00:04:03,360 --> 00:04:04,959
on the other side of the spectrum

103
00:04:04,959 --> 00:04:08,159
jumboski at al made a proposal in 2016

104
00:04:08,159 --> 00:04:09,599
for which they consider that an

105
00:04:09,599 --> 00:04:11,760
adversary is able to obtain the value of

106
00:04:11,760 --> 00:04:13,519
k-star in full

107
00:04:13,519 --> 00:04:15,439
they studied the possibility to use a

108
00:04:15,439 --> 00:04:17,519
weak pseudorandom function

109
00:04:17,519 --> 00:04:20,399
as a working function more practically

110
00:04:20,399 --> 00:04:22,160
the letter consists in a rounded inner

111
00:04:22,160 --> 00:04:24,720
product as defined on the slide

112
00:04:24,720 --> 00:04:26,960
their solution is not cheromofic but

113
00:04:26,960 --> 00:04:29,280
still nearly chemomorphic which allows

114
00:04:29,280 --> 00:04:31,759
to have masking of red with a complexity

115
00:04:31,759 --> 00:04:34,240
close to linear in terms of the number

116
00:04:34,240 --> 00:04:35,520
of shares

117
00:04:35,520 --> 00:04:37,440
however these solutions still suffer

118
00:04:37,440 --> 00:04:39,600
from a large key requirement and the

119
00:04:39,600 --> 00:04:41,600
manipulation of the later leads to

120
00:04:41,600 --> 00:04:44,240
rather poor performances

121
00:04:44,240 --> 00:04:46,240
considering this background our work

122
00:04:46,240 --> 00:04:48,320
aims to investigate the intermediate

123
00:04:48,320 --> 00:04:50,240
treat model where an adversary can

124
00:04:50,240 --> 00:04:54,639
observe noise fruity cage of k-star

125
00:04:55,199 --> 00:04:57,040
for our written scheme we took

126
00:04:57,040 --> 00:04:59,280
inspiration from the weak pseudorandom

127
00:04:59,280 --> 00:05:01,680
function of bonneton in the article

128
00:05:01,680 --> 00:05:04,800
exploring crypto dark matter at tcc 2018

129
00:05:04,800 --> 00:05:07,120
they proposed the following construction

130
00:05:07,120 --> 00:05:09,600
take a binary matrix k which is a key

131
00:05:09,600 --> 00:05:12,560
and each time a random binary vector r

132
00:05:12,560 --> 00:05:15,600
y is computed as a matrix vector product

133
00:05:15,600 --> 00:05:18,639
k times r and then y is considered as a

134
00:05:18,639 --> 00:05:21,120
binary vector of size m

135
00:05:21,120 --> 00:05:23,360
and the output z is computed as the sum

136
00:05:23,360 --> 00:05:26,000
of the coefficients modulus 3.

137
00:05:26,000 --> 00:05:29,120
so it's a function easy to compute

138
00:05:29,120 --> 00:05:30,880
with a matrix vector multiplication

139
00:05:30,880 --> 00:05:34,160
modulo 2 and then an addition of rs3 we

140
00:05:34,160 --> 00:05:36,400
can abstract this kind of prf seeing it

141
00:05:36,400 --> 00:05:38,639
as a composition of a map over one field

142
00:05:38,639 --> 00:05:40,800
and the product k times r over another

143
00:05:40,800 --> 00:05:41,680
field

144
00:05:41,680 --> 00:05:43,759
since bonnet all considered it is a weak

145
00:05:43,759 --> 00:05:45,919
prf it means it will be difficult for an

146
00:05:45,919 --> 00:05:48,080
adversary to distinguish between samples

147
00:05:48,080 --> 00:05:50,800
r and the corresponding z and samples

148
00:05:50,800 --> 00:05:53,120
given by a truly random function at

149
00:05:53,120 --> 00:05:54,880
first theory it will be difficult for an

150
00:05:54,880 --> 00:05:57,199
adversary to retrieve the key k

151
00:05:57,199 --> 00:05:59,199
the high level idea for the security

152
00:05:59,199 --> 00:06:01,520
here is that combining linear operation

153
00:06:01,520 --> 00:06:04,400
over two fields will provide security

154
00:06:04,400 --> 00:06:06,560
the core idea behind that is that it's a

155
00:06:06,560 --> 00:06:08,720
simple operation like a linear operation

156
00:06:08,720 --> 00:06:11,360
over one field is not simple over

157
00:06:11,360 --> 00:06:13,840
another field so the combination of both

158
00:06:13,840 --> 00:06:15,520
will provide security

159
00:06:15,520 --> 00:06:17,759
this kind of combination is an idea that

160
00:06:17,759 --> 00:06:20,240
envs use in other common crypto

161
00:06:20,240 --> 00:06:22,479
constructions over the years

162
00:06:22,479 --> 00:06:24,080
so the interest for wreaking is the

163
00:06:24,080 --> 00:06:25,199
following

164
00:06:25,199 --> 00:06:28,240
the part k times r will be our re-keying

165
00:06:28,240 --> 00:06:30,400
the way we will obtain the firmar key

166
00:06:30,400 --> 00:06:31,520
key star

167
00:06:31,520 --> 00:06:33,440
and since it will be the multiplication

168
00:06:33,440 --> 00:06:36,080
of a matrix by a vector of rfp it will

169
00:06:36,080 --> 00:06:38,160
be easy to mask with an additive masking

170
00:06:38,160 --> 00:06:39,440
over fp

171
00:06:39,440 --> 00:06:41,120
and then we want the map to be the

172
00:06:41,120 --> 00:06:43,039
leakage function which is provided by

173
00:06:43,039 --> 00:06:44,479
the implementation

174
00:06:44,479 --> 00:06:46,240
so if the leakage function corresponds

175
00:06:46,240 --> 00:06:48,639
to a linear function of our field which

176
00:06:48,639 --> 00:06:50,400
is not the one where we do the

177
00:06:50,400 --> 00:06:52,720
multiplication the combination of both

178
00:06:52,720 --> 00:06:54,560
will give us security

179
00:06:54,560 --> 00:06:56,560
and the new strength of sl keying is

180
00:06:56,560 --> 00:06:58,800
that for once we will use the security

181
00:06:58,800 --> 00:07:02,000
which is given by the liquid itself

182
00:07:02,000 --> 00:07:04,240
for the rest of our presentation we will

183
00:07:04,240 --> 00:07:07,599
present a bit more in a detailed manner

184
00:07:07,599 --> 00:07:09,680
or wrecking scheme or new wrecking

185
00:07:09,680 --> 00:07:10,639
scheme

186
00:07:10,639 --> 00:07:14,080
and we will detail a bit more also the

187
00:07:14,080 --> 00:07:16,000
treat model that we are considering for

188
00:07:16,000 --> 00:07:17,759
our work

189
00:07:17,759 --> 00:07:20,160
next it will be followed by some

190
00:07:20,160 --> 00:07:22,560
detailed explanation of our analysis so

191
00:07:22,560 --> 00:07:24,880
the first path and the second path

192
00:07:24,880 --> 00:07:27,120
but we'll understand what it is uh once

193
00:07:27,120 --> 00:07:30,080
we have explained what is the model and

194
00:07:30,080 --> 00:07:32,479
we will finally speak about the

195
00:07:32,479 --> 00:07:34,880
performances that we can reach using our

196
00:07:34,880 --> 00:07:37,280
new wreaking scheme

197
00:07:37,280 --> 00:07:39,440
so uh the recurring scheme we are

198
00:07:39,440 --> 00:07:42,080
proposing is defined as follow so the

199
00:07:42,080 --> 00:07:45,520
temporary k k-star is obtained by a

200
00:07:45,520 --> 00:07:48,560
inner product between the matrix k which

201
00:07:48,560 --> 00:07:51,440
is the long-term key k

202
00:07:51,440 --> 00:07:54,000
with a vector composed of

203
00:07:54,000 --> 00:07:55,520
the vector air

204
00:07:55,520 --> 00:07:58,560
and one concatenated with one

205
00:07:58,560 --> 00:08:01,759
uh and all the words inside the k and

206
00:08:01,759 --> 00:08:04,400
air are in fact uh

207
00:08:04,400 --> 00:08:06,639
inside the final field defined by the

208
00:08:06,639 --> 00:08:08,479
prime p

209
00:08:08,479 --> 00:08:10,800
to be more practical we focused on a

210
00:08:10,800 --> 00:08:13,360
specific instance uh and in fact the

211
00:08:13,360 --> 00:08:15,759
following parameter has been show have

212
00:08:15,759 --> 00:08:18,240
been chosen sorry so m equal to four and

213
00:08:18,240 --> 00:08:20,879
equal to four and the prime that we have

214
00:08:20,879 --> 00:08:23,520
chosen is the mersenne prime 2 to the

215
00:08:23,520 --> 00:08:24,400
power

216
00:08:24,400 --> 00:08:26,720
31 minus 1.

217
00:08:26,720 --> 00:08:28,879
here we have a graphical representation

218
00:08:28,879 --> 00:08:31,360
of the computation we are doing

219
00:08:31,360 --> 00:08:34,399
to compute this temporary key k star

220
00:08:34,399 --> 00:08:36,399
and as we have

221
00:08:36,399 --> 00:08:39,519
said earlier this working function

222
00:08:39,519 --> 00:08:42,000
required requires sorry to be protected

223
00:08:42,000 --> 00:08:44,480
against html attacks so instead of

224
00:08:44,480 --> 00:08:46,959
directly perform all this computation we

225
00:08:46,959 --> 00:08:50,240
will instead focus on a mask version

226
00:08:50,240 --> 00:08:52,160
which is represented here

227
00:08:52,160 --> 00:08:52,880
and

228
00:08:52,880 --> 00:08:55,440
instead of directly using the the value

229
00:08:55,440 --> 00:08:58,399
of the secret key k we will use instead

230
00:08:58,399 --> 00:09:00,880
shared representation of the later

231
00:09:00,880 --> 00:09:03,519
so we it's represented here we will

232
00:09:03,519 --> 00:09:04,959
sequentially

233
00:09:04,959 --> 00:09:07,440
perform the inner product on each share

234
00:09:07,440 --> 00:09:09,519
of the key and then recombine on the

235
00:09:09,519 --> 00:09:11,600
result to obtain the

236
00:09:11,600 --> 00:09:14,240
temporary key k star

237
00:09:14,240 --> 00:09:16,959
so entering a bit into the details of

238
00:09:16,959 --> 00:09:18,399
our treat model

239
00:09:18,399 --> 00:09:20,399
we have the following situation we have

240
00:09:20,399 --> 00:09:21,760
that the

241
00:09:21,760 --> 00:09:23,920
masked implementation of the inner

242
00:09:23,920 --> 00:09:26,320
product is running inside the chip

243
00:09:26,320 --> 00:09:28,800
and you have an adversary that is able

244
00:09:28,800 --> 00:09:30,240
to obtain

245
00:09:30,240 --> 00:09:33,600
from a first source the leakage of the

246
00:09:33,600 --> 00:09:36,080
result of this inner product so k star

247
00:09:36,080 --> 00:09:38,640
but on this on a second source is able

248
00:09:38,640 --> 00:09:41,760
to obtain a noisy leakage of the

249
00:09:41,760 --> 00:09:44,640
computation of the masked inner product

250
00:09:44,640 --> 00:09:47,279
so we have to follow two paths of

251
00:09:47,279 --> 00:09:49,519
analysis a first one which is more a

252
00:09:49,519 --> 00:09:52,320
crypt analysis part about what can be

253
00:09:52,320 --> 00:09:54,959
achieved using the leakage of this k

254
00:09:54,959 --> 00:09:57,680
star value and a second path which is

255
00:09:57,680 --> 00:09:59,120
okay what

256
00:09:59,120 --> 00:10:01,279
can be possible for

257
00:10:01,279 --> 00:10:02,959
an adversary from a side channel

258
00:10:02,959 --> 00:10:04,720
analysis point of view

259
00:10:04,720 --> 00:10:07,200
next we will detail our analysis for

260
00:10:07,200 --> 00:10:10,160
each of the two possible attack paths

261
00:10:10,160 --> 00:10:12,480
so first we consider the attack path one

262
00:10:12,480 --> 00:10:14,880
in this case adversary get samples of

263
00:10:14,880 --> 00:10:17,920
the shape r and the leakage on k times r

264
00:10:17,920 --> 00:10:20,480
and it tries to find the permanent key k

265
00:10:20,480 --> 00:10:22,560
so it corresponds to a learning problem

266
00:10:22,560 --> 00:10:24,320
which is very similar to the learning

267
00:10:24,320 --> 00:10:26,160
with our problem or the learning with

268
00:10:26,160 --> 00:10:28,640
running problem and since in this case

269
00:10:28,640 --> 00:10:30,240
the running function is given by a

270
00:10:30,240 --> 00:10:32,480
physical leakage we will call it the

271
00:10:32,480 --> 00:10:35,519
learning with physical rounding problem

272
00:10:35,519 --> 00:10:37,360
as for the other similar assumption we

273
00:10:37,360 --> 00:10:38,959
can define a distribution for this

274
00:10:38,959 --> 00:10:41,120
problem and here we will see when it

275
00:10:41,120 --> 00:10:43,279
will be an easy or hard problem because

276
00:10:43,279 --> 00:10:45,120
when this problem will be hard it will

277
00:10:45,120 --> 00:10:46,880
be impossible for the adversary to

278
00:10:46,880 --> 00:10:48,720
recover the key using the attack

279
00:10:48,720 --> 00:10:50,079
password

280
00:10:50,079 --> 00:10:51,920
to define formally this problem as a

281
00:10:51,920 --> 00:10:53,680
learning problem we need to make some

282
00:10:53,680 --> 00:10:55,839
assumptions on the leakage to modalize

283
00:10:55,839 --> 00:10:58,000
it as a mathematical function

284
00:10:58,000 --> 00:11:00,000
so since the operations are matrix

285
00:11:00,000 --> 00:11:02,480
vector multiplications over fp but the

286
00:11:02,480 --> 00:11:04,079
implementation uses a binary

287
00:11:04,079 --> 00:11:05,519
representation

288
00:11:05,519 --> 00:11:07,360
first we will use the numbering function

289
00:11:07,360 --> 00:11:10,000
g which translates the elements of fp in

290
00:11:10,000 --> 00:11:12,160
the binary representation

291
00:11:12,160 --> 00:11:14,160
and then we will consider as a leakage

292
00:11:14,160 --> 00:11:16,560
the amine weight of this representation

293
00:11:16,560 --> 00:11:18,800
that is the sum in z of the value of the

294
00:11:18,800 --> 00:11:20,880
value of the digits finally we can

295
00:11:20,880 --> 00:11:22,480
modalize the learning with physical

296
00:11:22,480 --> 00:11:24,399
running in two different ways depending

297
00:11:24,399 --> 00:11:26,000
on the implementation

298
00:11:26,000 --> 00:11:28,079
for the parallel version we consider

299
00:11:28,079 --> 00:11:30,320
that the adversary can obtain only the

300
00:11:30,320 --> 00:11:31,680
sum of the learning weight of the

301
00:11:31,680 --> 00:11:34,079
different elements of y that is m

302
00:11:34,079 --> 00:11:36,399
elements leaked together

303
00:11:36,399 --> 00:11:38,720
then we can we can consider a serial

304
00:11:38,720 --> 00:11:40,399
version of the problem where the

305
00:11:40,399 --> 00:11:42,720
adversary recovers the amine weight of

306
00:11:42,720 --> 00:11:44,800
all the elements of the vector y

307
00:11:44,800 --> 00:11:46,560
independently

308
00:11:46,560 --> 00:11:48,399
these two assumptions parallel and

309
00:11:48,399 --> 00:11:50,720
serial are very connected when m is

310
00:11:50,720 --> 00:11:52,639
equal to 1 it is exactly the same

311
00:11:52,639 --> 00:11:55,519
assumption and when m is bigger y is a

312
00:11:55,519 --> 00:11:57,680
vector and we see that the samples from

313
00:11:57,680 --> 00:11:59,920
the scale version can be converted into

314
00:11:59,920 --> 00:12:02,399
samples of the parallel version only by

315
00:12:02,399 --> 00:12:04,480
assuming the mean weights we obtain

316
00:12:04,480 --> 00:12:06,720
consequently we will focus on the

317
00:12:06,720 --> 00:12:08,959
parallel case studying our word is a

318
00:12:08,959 --> 00:12:12,000
parallel lwpr assumption

319
00:12:12,000 --> 00:12:14,000
so first we will consider some cases

320
00:12:14,000 --> 00:12:18,000
where lnwpr is easy so instances where

321
00:12:18,000 --> 00:12:20,079
the parameters are not strong enough for

322
00:12:20,079 --> 00:12:22,800
our wreaking skin for example for a

323
00:12:22,800 --> 00:12:24,880
small p we take the example for which p

324
00:12:24,880 --> 00:12:27,120
is equal to 3 and we begin with a very

325
00:12:27,120 --> 00:12:29,360
particular example where y is not a

326
00:12:29,360 --> 00:12:32,240
vector but only an element of f 3.

327
00:12:32,240 --> 00:12:33,920
in this case the adversary will observe

328
00:12:33,920 --> 00:12:36,639
the liquid of y over z and the adversary

329
00:12:36,639 --> 00:12:39,440
is able to consider it module modulus3

330
00:12:39,440 --> 00:12:41,200
so the leakage will correspond to a

331
00:12:41,200 --> 00:12:44,560
function f from f3 to s3 which is a

332
00:12:44,560 --> 00:12:46,399
hamming weight of the binary

333
00:12:46,399 --> 00:12:49,040
representation of y and this function f

334
00:12:49,040 --> 00:12:51,279
can be reconstructed from instance table

335
00:12:51,279 --> 00:12:53,680
even in example and in this case it

336
00:12:53,680 --> 00:12:55,600
simply corresponds to the function y

337
00:12:55,600 --> 00:12:58,160
square a degree 2 function so it will be

338
00:12:58,160 --> 00:13:01,040
easy to use for the adversary

339
00:13:01,040 --> 00:13:02,480
then if we are in the parallel

340
00:13:02,480 --> 00:13:04,959
implementation even with y a vector of

341
00:13:04,959 --> 00:13:07,360
size n where m is not

342
00:13:07,360 --> 00:13:09,839
1 the function f prime corresponds to

343
00:13:09,839 --> 00:13:12,320
the leakage modulus corresponding to the

344
00:13:12,320 --> 00:13:15,040
leakage modulus 3 will only be the sum

345
00:13:15,040 --> 00:13:17,120
of quadratic terms and since the vector

346
00:13:17,120 --> 00:13:19,120
y is made by the matrix vector product

347
00:13:19,120 --> 00:13:21,600
of k and r the adversary can use the

348
00:13:21,600 --> 00:13:23,600
leakage equations to create a system of

349
00:13:23,600 --> 00:13:26,240
degree 2 over f3 in the variables of the

350
00:13:26,240 --> 00:13:27,040
key

351
00:13:27,040 --> 00:13:29,279
and then solving this quadratic system

352
00:13:29,279 --> 00:13:31,200
directly gives all the key elements of

353
00:13:31,200 --> 00:13:33,680
the permanent key k

354
00:13:33,680 --> 00:13:36,399
it means that with this parameter lwpr

355
00:13:36,399 --> 00:13:37,920
is easy to solve

356
00:13:37,920 --> 00:13:40,639
and more generally when it is over fp

357
00:13:40,639 --> 00:13:43,279
solving a degree plus one system over fp

358
00:13:43,279 --> 00:13:45,199
will break the parallel version of the

359
00:13:45,199 --> 00:13:47,120
learning with physical rounding

360
00:13:47,120 --> 00:13:50,079
so this way we know that lwpr can be

361
00:13:50,079 --> 00:13:52,560
only if p is big enough

362
00:13:52,560 --> 00:13:53,360
in this

363
00:13:53,360 --> 00:13:56,000
paper we additionally show um an attack

364
00:13:56,000 --> 00:13:58,320
which happens if n is too small like 2

365
00:13:58,320 --> 00:14:01,360
r3 and we see that when n is at least

366
00:14:01,360 --> 00:14:03,199
four or five it will be sufficient to

367
00:14:03,199 --> 00:14:05,120
avoid this attack

368
00:14:05,120 --> 00:14:07,199
when p and n are big enough we will

369
00:14:07,199 --> 00:14:09,040
consider that the learning with physical

370
00:14:09,040 --> 00:14:11,040
running problem is hard and that we can

371
00:14:11,040 --> 00:14:12,800
base our wreaking scheme on this

372
00:14:12,800 --> 00:14:15,120
assumption so the main concerns for the

373
00:14:15,120 --> 00:14:16,560
security in this case will be the

374
00:14:16,560 --> 00:14:19,040
potential weaknesses modulo p or modulo

375
00:14:19,040 --> 00:14:19,839
2.

376
00:14:19,839 --> 00:14:21,920
more specifically when we are modulo p

377
00:14:21,920 --> 00:14:24,160
the multiplication is over this field so

378
00:14:24,160 --> 00:14:26,079
only the leakage function will provide

379
00:14:26,079 --> 00:14:28,079
some security and when we are in

380
00:14:28,079 --> 00:14:29,440
characteristic 2 the binary

381
00:14:29,440 --> 00:14:31,279
representation and the amine weight of

382
00:14:31,279 --> 00:14:33,680
it have a linear behavior so we have to

383
00:14:33,680 --> 00:14:35,839
see if the multiplication is providing

384
00:14:35,839 --> 00:14:37,680
enough security

385
00:14:37,680 --> 00:14:39,839
for the analysis modulo p we consider

386
00:14:39,839 --> 00:14:42,000
the properties of the pre function from

387
00:14:42,000 --> 00:14:44,480
fp to zm to fp as seen in the previous

388
00:14:44,480 --> 00:14:47,600
leg previous slide in the case p also

389
00:14:47,600 --> 00:14:49,760
when p is close to two to the 31 the

390
00:14:49,760 --> 00:14:52,480
parameter we chose we can show a lower

391
00:14:52,480 --> 00:14:54,079
bound on the algebraic degree of this

392
00:14:54,079 --> 00:14:56,320
function so it means an attacker would

393
00:14:56,320 --> 00:14:58,560
have to solve a high degree system so in

394
00:14:58,560 --> 00:15:01,279
this case it prevents algebraic attacks

395
00:15:01,279 --> 00:15:03,199
and we can also show that there is no

396
00:15:03,199 --> 00:15:04,880
good linear approximation of this

397
00:15:04,880 --> 00:15:05,920
function

398
00:15:05,920 --> 00:15:07,680
so it is a way to avoid the attacks

399
00:15:07,680 --> 00:15:09,199
based on solving a

400
00:15:09,199 --> 00:15:11,680
noisy linear system like the one which

401
00:15:11,680 --> 00:15:13,199
are used to solve the learning parity

402
00:15:13,199 --> 00:15:15,279
with noise problem

403
00:15:15,279 --> 00:15:17,360
then for the analysis in characteristic

404
00:15:17,360 --> 00:15:19,040
2 we studied the vectorial boolean

405
00:15:19,040 --> 00:15:20,680
function which corresponds to the

406
00:15:20,680 --> 00:15:23,519
multiplication of k times r when it is

407
00:15:23,519 --> 00:15:26,399
embedded over f2 we could perform some

408
00:15:26,399 --> 00:15:28,560
experimental tests on the degree and on

409
00:15:28,560 --> 00:15:30,880
the maximum expected linear probability

410
00:15:30,880 --> 00:15:32,720
of small cases

411
00:15:32,720 --> 00:15:34,880
and on this example we showed that the

412
00:15:34,880 --> 00:15:36,720
parameters are sufficient to avoid the

413
00:15:36,720 --> 00:15:39,040
attacks so we can avoid the algebraic

414
00:15:39,040 --> 00:15:41,279
and linear attacks in this case

415
00:15:41,279 --> 00:15:43,120
finally for the maximum expected

416
00:15:43,120 --> 00:15:45,519
differential probability we are able to

417
00:15:45,519 --> 00:15:47,600
prove an upper bound on it and so it is

418
00:15:47,600 --> 00:15:49,519
sufficient to prevent the differential

419
00:15:49,519 --> 00:15:51,920
attacks

420
00:15:52,320 --> 00:15:54,240
we will next focus on the second attack

421
00:15:54,240 --> 00:15:55,920
path that we have considered in our

422
00:15:55,920 --> 00:15:58,320
treat model and for that we first need

423
00:15:58,320 --> 00:16:00,720
to define the target we have considered

424
00:16:00,720 --> 00:16:02,399
in our analysis

425
00:16:02,399 --> 00:16:04,320
so we focused on an adword

426
00:16:04,320 --> 00:16:08,720
implementation on an intex 7 fpga

427
00:16:08,720 --> 00:16:11,199
and from an implementation point of view

428
00:16:11,199 --> 00:16:14,000
we tried to leverage the kermamorphism

429
00:16:14,000 --> 00:16:17,120
properties of the inner product we use

430
00:16:17,120 --> 00:16:20,240
so as a reminder chiromorphism comes

431
00:16:20,240 --> 00:16:22,399
with some benefits in terms of masked

432
00:16:22,399 --> 00:16:23,759
implementation

433
00:16:23,759 --> 00:16:26,399
because first it enables

434
00:16:26,399 --> 00:16:29,440
independent manipulation of the shares

435
00:16:29,440 --> 00:16:31,759
which in fact assure that our

436
00:16:31,759 --> 00:16:33,759
implementation do not suffer from

437
00:16:33,759 --> 00:16:36,320
composability issues and mitigates the

438
00:16:36,320 --> 00:16:38,880
risk of physical defaults

439
00:16:38,880 --> 00:16:41,920
a second point is that it

440
00:16:41,920 --> 00:16:44,639
enables a linear overhead of it implies

441
00:16:44,639 --> 00:16:46,480
sorry a linear overhead

442
00:16:46,480 --> 00:16:48,320
with the number of shares

443
00:16:48,320 --> 00:16:49,120
and

444
00:16:49,120 --> 00:16:51,839
every share is processed once which

445
00:16:51,839 --> 00:16:52,959
ensure that

446
00:16:52,959 --> 00:16:55,040
we have an inherently good resistance

447
00:16:55,040 --> 00:16:57,360
against horizontal attacks

448
00:16:57,360 --> 00:16:59,680
and finally it allows a scalable

449
00:16:59,680 --> 00:17:01,839
evaluation of the security

450
00:17:01,839 --> 00:17:03,920
because since each share is processed

451
00:17:03,920 --> 00:17:05,760
sequentially increasing the number of

452
00:17:05,760 --> 00:17:08,400
shares is the same as reusing the same

453
00:17:08,400 --> 00:17:10,559
circuitry multiple times

454
00:17:10,559 --> 00:17:12,480
so the evaluation for one share is

455
00:17:12,480 --> 00:17:14,160
enough to assess the security

456
00:17:14,160 --> 00:17:16,959
considering different amount of shares

457
00:17:16,959 --> 00:17:18,959
so more practically we do not need to

458
00:17:18,959 --> 00:17:23,439
repeat evaluations for different cases

459
00:17:23,520 --> 00:17:25,919
we are considering uh five

460
00:17:25,919 --> 00:17:28,480
multiplication in parallels of five

461
00:17:28,480 --> 00:17:31,039
modular multiplication in parallel

462
00:17:31,039 --> 00:17:33,200
this has been motivated first from a

463
00:17:33,200 --> 00:17:35,280
security point of view because

464
00:17:35,280 --> 00:17:37,200
more data processed in parallel means

465
00:17:37,200 --> 00:17:39,919
more noise and so it's diffic it's more

466
00:17:39,919 --> 00:17:42,320
difficult to recover information about

467
00:17:42,320 --> 00:17:43,840
the secret key

468
00:17:43,840 --> 00:17:45,840
and from a performance point of view

469
00:17:45,840 --> 00:17:47,919
because yeah we are processing more in

470
00:17:47,919 --> 00:17:50,240
parallel so it's it's way more efficient

471
00:17:50,240 --> 00:17:52,880
we we have less latency

472
00:17:52,880 --> 00:17:55,840
uh the memory units that are considered

473
00:17:55,840 --> 00:17:58,799
uh such as the key or the randomness

474
00:17:58,799 --> 00:18:01,679
are mapped to bram

475
00:18:01,679 --> 00:18:03,840
and we are using

476
00:18:03,840 --> 00:18:06,080
optimized modular multiplication from a

477
00:18:06,080 --> 00:18:08,960
previous work from copper man ethel

478
00:18:08,960 --> 00:18:11,919
that is relying on dsps

479
00:18:11,919 --> 00:18:14,320
overall the general architecture of our

480
00:18:14,320 --> 00:18:16,480
solution is similar to the one of

481
00:18:16,480 --> 00:18:18,080
bronchite al

482
00:18:18,080 --> 00:18:20,320
which enable comparison between the

483
00:18:20,320 --> 00:18:22,080
metrics

484
00:18:22,080 --> 00:18:24,640
the architecture of our implementation

485
00:18:24,640 --> 00:18:26,880
is composed of two main modules so the

486
00:18:26,880 --> 00:18:28,480
first one is the memory

487
00:18:28,480 --> 00:18:31,039
holding the value of r the value of the

488
00:18:31,039 --> 00:18:34,080
shares of the key and the refresh

489
00:18:34,080 --> 00:18:36,160
mechanism and the second one is the dot

490
00:18:36,160 --> 00:18:39,039
prod module which implements the inner

491
00:18:39,039 --> 00:18:42,480
product in itself with an accumulator to

492
00:18:42,480 --> 00:18:46,080
process all the different shares

493
00:18:46,080 --> 00:18:48,400
the project pipeline is organized as

494
00:18:48,400 --> 00:18:50,320
follow we have the five modular

495
00:18:50,320 --> 00:18:52,960
multiplication at the input

496
00:18:52,960 --> 00:18:55,360
and then some addition in order to

497
00:18:55,360 --> 00:18:57,440
compute the internal values of the inner

498
00:18:57,440 --> 00:18:58,559
product

499
00:18:58,559 --> 00:19:01,120
and the accumulator is

500
00:19:01,120 --> 00:19:04,480
at the output of the full pipeline

501
00:19:04,480 --> 00:19:06,720
in order to assess the security of our

502
00:19:06,720 --> 00:19:09,120
masked implementation we need to fulfill

503
00:19:09,120 --> 00:19:10,720
two requirements

504
00:19:10,720 --> 00:19:13,280
the first one is that the share have to

505
00:19:13,280 --> 00:19:16,480
be manipulated independently which is

506
00:19:16,480 --> 00:19:18,799
guaranteed by design as motivated

507
00:19:18,799 --> 00:19:20,480
earlier in this talk and in fact

508
00:19:20,480 --> 00:19:22,840
evaluated by the work of

509
00:19:22,840 --> 00:19:25,280
braunscheitel and secondly a sufficient

510
00:19:25,280 --> 00:19:28,400
noise level is required and this

511
00:19:28,400 --> 00:19:31,600
is in fact the main focus of this work

512
00:19:31,600 --> 00:19:33,039
so

513
00:19:33,039 --> 00:19:36,160
we used exiling spartan 6 fpga on a

514
00:19:36,160 --> 00:19:39,679
sakura jboard to evaluate this noise

515
00:19:39,679 --> 00:19:42,799
level using a tektronix ct1 probe and a

516
00:19:42,799 --> 00:19:44,400
picoscope

517
00:19:44,400 --> 00:19:46,360
fifth on

518
00:19:46,360 --> 00:19:48,160
5244 d

519
00:19:48,160 --> 00:19:49,520
at

520
00:19:49,520 --> 00:19:52,880
500 mega samples per second with a 12

521
00:19:52,880 --> 00:19:54,559
bit resolution

522
00:19:54,559 --> 00:19:57,440
for the implementation we considered

523
00:19:57,440 --> 00:19:58,720
three shares

524
00:19:58,720 --> 00:20:01,440
as a first step we try to identify the

525
00:20:01,440 --> 00:20:03,919
point of interest in our measurements

526
00:20:03,919 --> 00:20:06,720
and for that we use the snr matrix

527
00:20:06,720 --> 00:20:10,480
uh and the figure that is shown on the

528
00:20:10,480 --> 00:20:14,159
the slide show at the top the the

529
00:20:14,159 --> 00:20:17,760
average trace that we were measuring and

530
00:20:17,760 --> 00:20:19,360
at the bottom

531
00:20:19,360 --> 00:20:22,000
the different snr value that we are able

532
00:20:22,000 --> 00:20:23,440
to to get

533
00:20:23,440 --> 00:20:26,559
and the dark crosses are in fact the

534
00:20:26,559 --> 00:20:28,320
point of interest that we are keeping

535
00:20:28,320 --> 00:20:30,640
for our analysis

536
00:20:30,640 --> 00:20:33,200
based on this point of interest we try

537
00:20:33,200 --> 00:20:35,600
to approximate the amount of information

538
00:20:35,600 --> 00:20:37,760
we were able to obtain

539
00:20:37,760 --> 00:20:40,240
from our measurements for this we made

540
00:20:40,240 --> 00:20:42,159
the gaussian assumption for the leakage

541
00:20:42,159 --> 00:20:44,320
which means that the leakage value when

542
00:20:44,320 --> 00:20:46,640
a specific data is processed follows a

543
00:20:46,640 --> 00:20:48,960
gaussian distribution

544
00:20:48,960 --> 00:20:50,880
under this assumption our analysis

545
00:20:50,880 --> 00:20:52,880
relies on two bonds for the information

546
00:20:52,880 --> 00:20:54,960
we can recover from the leakage which

547
00:20:54,960 --> 00:20:56,640
are the gaussian perceived information

548
00:20:56,640 --> 00:20:58,080
for the lower bond and the gaussian

549
00:20:58,080 --> 00:21:01,120
hypothetical information for the ir bond

550
00:21:01,120 --> 00:21:03,280
we are unable to estimate the amount of

551
00:21:03,280 --> 00:21:05,280
measurements required to perform a side

552
00:21:05,280 --> 00:21:07,520
channel attack based on the information

553
00:21:07,520 --> 00:21:09,120
bonds we obtained

554
00:21:09,120 --> 00:21:11,919
our results show that using 10 shares 2

555
00:21:11,919 --> 00:21:13,760
to the power 64 measurements are

556
00:21:13,760 --> 00:21:17,280
required to recover 32 bits of the key

557
00:21:17,280 --> 00:21:20,000
regarding the performance metrics or

558
00:21:20,000 --> 00:21:22,640
wreaking proposal based on the lwpr

559
00:21:22,640 --> 00:21:25,039
assumption appears to be competitive

560
00:21:25,039 --> 00:21:27,679
both in terms of latency and cost

561
00:21:27,679 --> 00:21:30,559
as a first metric the key size is shown

562
00:21:30,559 --> 00:21:33,760
in kilobits in red for the bronchial

563
00:21:33,760 --> 00:21:37,440
implementation of the lwr based solution

564
00:21:37,440 --> 00:21:40,720
and in blue for our implementation

565
00:21:40,720 --> 00:21:42,720
while both curves are linear with the

566
00:21:42,720 --> 00:21:44,480
amount of shares

567
00:21:44,480 --> 00:21:47,039
the one of the lwp air-based solution

568
00:21:47,039 --> 00:21:49,440
has a slope approximately five times

569
00:21:49,440 --> 00:21:52,000
smaller than the lwx solution

570
00:21:52,000 --> 00:21:54,000
the difference is even more significant

571
00:21:54,000 --> 00:21:55,919
when comparing randomness requirement

572
00:21:55,919 --> 00:21:57,280
and latency

573
00:21:57,280 --> 00:21:59,520
because these underline that even with

574
00:21:59,520 --> 00:22:02,480
more parallelism the lwr based solution

575
00:22:02,480 --> 00:22:05,039
is orders of magnitude slower

576
00:22:05,039 --> 00:22:07,840
and the same kind trends to be the same

577
00:22:07,840 --> 00:22:09,760
kind of trend so we can be observed for

578
00:22:09,760 --> 00:22:12,240
the randomness requirement as a

579
00:22:12,240 --> 00:22:14,559
conclusion we propose in this work a new

580
00:22:14,559 --> 00:22:16,320
working scheme based on a new er

581
00:22:16,320 --> 00:22:18,159
learning problem the learning with

582
00:22:18,159 --> 00:22:20,000
physical rounding problem

583
00:22:20,000 --> 00:22:22,640
it consists on a combination of an inner

584
00:22:22,640 --> 00:22:25,120
product of a prime field and a physical

585
00:22:25,120 --> 00:22:26,400
ligand function

586
00:22:26,400 --> 00:22:28,400
performed by the implementation leakage

587
00:22:28,400 --> 00:22:30,480
and not explicitly as done in the weak

588
00:22:30,480 --> 00:22:33,200
paragraph of the dark matter work

589
00:22:33,200 --> 00:22:35,280
considering the amino leakage function

590
00:22:35,280 --> 00:22:37,600
as a first analysis step the wrecking

591
00:22:37,600 --> 00:22:39,840
function proposed ensure relevant

592
00:22:39,840 --> 00:22:41,520
cryptographic properties and allow

593
00:22:41,520 --> 00:22:44,559
competitive implementation in hardware

594
00:22:44,559 --> 00:22:47,280
the evaluation of the proposal with more

595
00:22:47,280 --> 00:22:49,200
general leakage function is a natural

596
00:22:49,200 --> 00:22:51,679
next step and another open question is

597
00:22:51,679 --> 00:22:54,080
the practical impact of theorization on

598
00:22:54,080 --> 00:22:56,720
the physical security such sterilization

599
00:22:56,720 --> 00:22:59,120
could be for example found in software

600
00:22:59,120 --> 00:23:00,480
implementation

601
00:23:00,480 --> 00:23:02,000
finally

602
00:23:02,000 --> 00:23:04,960
a research direction could be to check

603
00:23:04,960 --> 00:23:06,960
whether integrating such a ranking

604
00:23:06,960 --> 00:23:09,039
scheme in a more general leakage

605
00:23:09,039 --> 00:23:13,720
original primitive mode is feasible

