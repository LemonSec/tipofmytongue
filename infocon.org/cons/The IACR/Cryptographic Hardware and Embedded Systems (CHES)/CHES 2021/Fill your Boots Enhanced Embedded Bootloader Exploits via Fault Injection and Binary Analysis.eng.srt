1
00:00:02,960 --> 00:00:06,399
hi everyone i'm jan van der gerbeaken

2
00:00:06,399 --> 00:00:08,480
and today i will present our paper fill

3
00:00:08,480 --> 00:00:10,960
your boots enhanced embedded bootlegger

4
00:00:10,960 --> 00:00:13,040
exploits via fault injection and binary

5
00:00:13,040 --> 00:00:14,400
analysis

6
00:00:14,400 --> 00:00:16,320
done together david oswalt vladimir

7
00:00:16,320 --> 00:00:18,560
garcia and kaiser mesa from the

8
00:00:18,560 --> 00:00:21,359
university of birmingham

9
00:00:21,359 --> 00:00:23,840
so um first of all i'm going to

10
00:00:23,840 --> 00:00:26,000
introduce the realm of embedded

11
00:00:26,000 --> 00:00:28,720
bootloaders and firmware

12
00:00:28,720 --> 00:00:31,519
motivates our research and also give a

13
00:00:31,519 --> 00:00:33,680
bit of introduction regarding false

14
00:00:33,680 --> 00:00:35,680
injection techniques

15
00:00:35,680 --> 00:00:37,120
uh and then finally i'm going to

16
00:00:37,120 --> 00:00:38,239
introduce

17
00:00:38,239 --> 00:00:40,160
our three targets that we've chosen for

18
00:00:40,160 --> 00:00:41,440
this research

19
00:00:41,440 --> 00:00:42,960
then in the following

20
00:00:42,960 --> 00:00:44,879
three sections i'm going to explain i'm

21
00:00:44,879 --> 00:00:46,640
going to explain how

22
00:00:46,640 --> 00:00:49,440
we exploited each target and then

23
00:00:49,440 --> 00:00:51,440
finally i'm going to

24
00:00:51,440 --> 00:00:53,199
explain a little more about some

25
00:00:53,199 --> 00:00:56,079
bootloader design directives which we

26
00:00:56,079 --> 00:00:58,160
call anti-patterns and summarize our

27
00:00:58,160 --> 00:00:59,600
research

28
00:00:59,600 --> 00:01:01,359
so first of all what is an embedded

29
00:01:01,359 --> 00:01:02,800
bootloader

30
00:01:02,800 --> 00:01:04,239
the bootloader is

31
00:01:04,239 --> 00:01:06,320
the first program to execute

32
00:01:06,320 --> 00:01:08,479
on startup on embedded chip so as you

33
00:01:08,479 --> 00:01:11,040
can see in its diagram

34
00:01:11,040 --> 00:01:13,360
typically the bootlegger initializes

35
00:01:13,360 --> 00:01:15,040
some peripherals

36
00:01:15,040 --> 00:01:17,360
and then checks some system registers or

37
00:01:17,360 --> 00:01:20,080
external pins to see whether it should

38
00:01:20,080 --> 00:01:22,640
go further into the bootloader or just

39
00:01:22,640 --> 00:01:24,960
load the application software

40
00:01:24,960 --> 00:01:28,400
at some point there's also a crp or code

41
00:01:28,400 --> 00:01:31,200
radar protection check

42
00:01:31,200 --> 00:01:33,040
which typically

43
00:01:33,040 --> 00:01:35,040
tells whether the chip is

44
00:01:35,040 --> 00:01:37,759
reprotected or not and we'll explain

45
00:01:37,759 --> 00:01:38,720
more

46
00:01:38,720 --> 00:01:41,680
about this later um so bootloader is

47
00:01:41,680 --> 00:01:43,520
quite a critical piece of software since

48
00:01:43,520 --> 00:01:46,240
it exposes read and write functionality

49
00:01:46,240 --> 00:01:47,600
so basically

50
00:01:47,600 --> 00:01:49,680
if you can bypass any

51
00:01:49,680 --> 00:01:52,479
security units you have access full

52
00:01:52,479 --> 00:01:54,799
access to the chip's memory

53
00:01:54,799 --> 00:01:56,799
and finally which is quite important for

54
00:01:56,799 --> 00:01:59,040
our research and it is addressable or

55
00:01:59,040 --> 00:02:02,079
readable from a normal user application

56
00:02:02,079 --> 00:02:04,320
so a data sheet that would like to look

57
00:02:04,320 --> 00:02:07,439
like this where you typically have

58
00:02:07,439 --> 00:02:09,840
a certain area memory reserved for the

59
00:02:09,840 --> 00:02:11,360
boot room

60
00:02:11,360 --> 00:02:12,640
so the reason

61
00:02:12,640 --> 00:02:15,680
we were interested in this

62
00:02:15,680 --> 00:02:17,440
is because we can

63
00:02:17,440 --> 00:02:19,760
we can actually read out this bootloader

64
00:02:19,760 --> 00:02:22,640
firmware let's say and analyze it and

65
00:02:22,640 --> 00:02:23,599
thus

66
00:02:23,599 --> 00:02:26,319
make our attacks more effective

67
00:02:26,319 --> 00:02:29,440
based on this binary

68
00:02:29,440 --> 00:02:30,879
so the readout protection which i

69
00:02:30,879 --> 00:02:33,440
mentioned earlier is a mechanism for

70
00:02:33,440 --> 00:02:36,160
protecting the memory on the chip this

71
00:02:36,160 --> 00:02:37,760
can be done either in hardware so

72
00:02:37,760 --> 00:02:40,080
through fuses for example

73
00:02:40,080 --> 00:02:43,599
to disable a debug interface or

74
00:02:43,599 --> 00:02:45,840
is also typically done in a special

75
00:02:45,840 --> 00:02:47,680
flash page

76
00:02:47,680 --> 00:02:49,680
which then contains a certain value

77
00:02:49,680 --> 00:02:51,040
which indicates where the read

78
00:02:51,040 --> 00:02:52,800
protection is

79
00:02:52,800 --> 00:02:55,440
enabled or disabled this can also be

80
00:02:55,440 --> 00:02:57,519
done in different granularities so it

81
00:02:57,519 --> 00:03:00,560
can have a different protection bit for

82
00:03:00,560 --> 00:03:03,440
read right protection erase per sector

83
00:03:03,440 --> 00:03:04,640
per block

84
00:03:04,640 --> 00:03:06,560
and however the chip manufacturer

85
00:03:06,560 --> 00:03:08,959
decides to do this

86
00:03:08,959 --> 00:03:11,440
um so this is an example of

87
00:03:11,440 --> 00:03:13,920
the lpc bootloader binary which is an

88
00:03:13,920 --> 00:03:14,640
arm

89
00:03:14,640 --> 00:03:17,380
microcontroller so you can see it reads

90
00:03:17,380 --> 00:03:19,200
[Music]

91
00:03:19,200 --> 00:03:20,640
the

92
00:03:20,640 --> 00:03:22,640
the readout protection value the crp

93
00:03:22,640 --> 00:03:24,000
value

94
00:03:24,000 --> 00:03:27,120
checks it against a static

95
00:03:27,120 --> 00:03:30,480
variable crp1 and then if it's off it

96
00:03:30,480 --> 00:03:34,640
jumps further into the bootloader

97
00:03:34,640 --> 00:03:37,360
now why is it so important why would we

98
00:03:37,360 --> 00:03:39,760
want to extract firmware

99
00:03:39,760 --> 00:03:41,440
so first of all as

100
00:03:41,440 --> 00:03:44,080
previous research has pointed out

101
00:03:44,080 --> 00:03:46,239
is that proprietary crypto in an

102
00:03:46,239 --> 00:03:48,000
embedded device it's a particularly bad

103
00:03:48,000 --> 00:03:49,120
idea

104
00:03:49,120 --> 00:03:51,920
so um in order to find that and

105
00:03:51,920 --> 00:03:55,040
scrutinize it we obviously need to have

106
00:03:55,040 --> 00:03:58,000
the firmware so therefore

107
00:03:58,000 --> 00:04:02,159
this is a valuable research um

108
00:04:02,159 --> 00:04:03,760
it is uh

109
00:04:03,760 --> 00:04:05,599
necessary to find vulnerabilities in

110
00:04:05,599 --> 00:04:08,480
chips we can extract secret data such as

111
00:04:08,480 --> 00:04:11,680
immobile immobilizer keys or crypto keys

112
00:04:11,680 --> 00:04:14,799
um which might be more than just

113
00:04:14,799 --> 00:04:17,199
an individual devices key but actually a

114
00:04:17,199 --> 00:04:19,279
manufacturer key let's say

115
00:04:19,279 --> 00:04:20,880
and then there are a few more reasons

116
00:04:20,880 --> 00:04:23,759
for example forensics the repurposing of

117
00:04:23,759 --> 00:04:26,080
end-of-life devices

118
00:04:26,080 --> 00:04:27,759
replacement firmware

119
00:04:27,759 --> 00:04:29,919
you name it

120
00:04:29,919 --> 00:04:32,560
so the targets we picked um

121
00:04:32,560 --> 00:04:35,440
vary in difficulty and set up an

122
00:04:35,440 --> 00:04:38,320
expectation method so first of all the

123
00:04:38,320 --> 00:04:40,320
lpc1343

124
00:04:40,320 --> 00:04:43,840
is an arm-based device

125
00:04:44,320 --> 00:04:47,520
which we attack configured on crp-1

126
00:04:47,520 --> 00:04:51,440
which i'll explain a little bit later

127
00:04:51,440 --> 00:04:53,120
but basically

128
00:04:53,120 --> 00:04:55,520
this is a software-only exploitation and

129
00:04:55,520 --> 00:04:57,759
the difficulty herein lies

130
00:04:57,759 --> 00:04:59,600
the development of a

131
00:04:59,600 --> 00:05:02,320
rob return-oriented programming exploits

132
00:05:02,320 --> 00:05:05,280
on such a restricted embedded device and

133
00:05:05,280 --> 00:05:08,080
also exploiting

134
00:05:08,080 --> 00:05:09,520
its memories

135
00:05:09,520 --> 00:05:12,479
then we have two hardware

136
00:05:12,479 --> 00:05:16,479
two targets we attack by hardware um

137
00:05:16,479 --> 00:05:18,479
so the stm8

138
00:05:18,479 --> 00:05:20,720
locks the bootloader on startup based on

139
00:05:20,720 --> 00:05:22,880
the option bytes it's called

140
00:05:22,880 --> 00:05:23,680
um

141
00:05:23,680 --> 00:05:25,919
so since it's locked on starter there's

142
00:05:25,919 --> 00:05:27,680
a very small

143
00:05:27,680 --> 00:05:30,880
critical code base so but here

144
00:05:30,880 --> 00:05:33,039
what makes it difficult

145
00:05:33,039 --> 00:05:35,280
to attack is the actual glitch

146
00:05:35,280 --> 00:05:37,280
parameters so let's say

147
00:05:37,280 --> 00:05:38,960
for instance with voltage glitching

148
00:05:38,960 --> 00:05:40,720
that's the width the offset and the

149
00:05:40,720 --> 00:05:42,960
glitch voltage

150
00:05:42,960 --> 00:05:44,800
and then finally we have the renaissance

151
00:05:44,800 --> 00:05:46,960
78k0

152
00:05:46,960 --> 00:05:49,440
which is an 8-bit chip

153
00:05:49,440 --> 00:05:52,160
this restricts the write access and has

154
00:05:52,160 --> 00:05:54,520
no read functionality

155
00:05:54,520 --> 00:05:56,000
[Music]

156
00:05:56,000 --> 00:05:58,800
but always exposes certain commands such

157
00:05:58,800 --> 00:06:02,720
as a checksum or a verify on a longer

158
00:06:02,720 --> 00:06:06,000
array of bytes some 256 bytes for

159
00:06:06,000 --> 00:06:07,680
example

160
00:06:07,680 --> 00:06:09,520
since this is a larger codebase that's

161
00:06:09,520 --> 00:06:11,600
accessible

162
00:06:11,600 --> 00:06:14,160
here the timing is a difficult aspect

163
00:06:14,160 --> 00:06:18,400
and not the other glitch parameters

164
00:06:18,400 --> 00:06:19,280
so

165
00:06:19,280 --> 00:06:21,759
fault injection techniques

166
00:06:21,759 --> 00:06:24,080
um typically

167
00:06:24,080 --> 00:06:26,319
have to weigh up whether

168
00:06:26,319 --> 00:06:29,199
the cost and versus the invasiveness

169
00:06:29,199 --> 00:06:31,440
so first of all we have

170
00:06:31,440 --> 00:06:33,440
voltage glitching which is what we opted

171
00:06:33,440 --> 00:06:36,800
for is very accessible very cheap

172
00:06:36,800 --> 00:06:38,240
the device we

173
00:06:38,240 --> 00:06:39,919
developed as a giant

174
00:06:39,919 --> 00:06:42,479
is open source hardware

175
00:06:42,479 --> 00:06:45,120
and costs about 150

176
00:06:45,120 --> 00:06:46,840
to assemble

177
00:06:46,840 --> 00:06:50,960
um then there's also optical

178
00:06:50,960 --> 00:06:53,520
fault injection for example uv light

179
00:06:53,520 --> 00:06:54,400
could

180
00:06:54,400 --> 00:06:55,440
reset

181
00:06:55,440 --> 00:06:59,120
certain fuses or erase certain bits

182
00:06:59,120 --> 00:07:01,759
when exposed but this requires

183
00:07:01,759 --> 00:07:04,400
extensive preparation of the targets

184
00:07:04,400 --> 00:07:06,639
then there's also laser injection which

185
00:07:06,639 --> 00:07:09,039
is extremely expensive

186
00:07:09,039 --> 00:07:12,319
the setup but can be very accurate

187
00:07:12,319 --> 00:07:14,840
and finally there's also a mid-range

188
00:07:14,840 --> 00:07:18,479
where electromagnetic pulses can affect

189
00:07:18,479 --> 00:07:20,400
the chip's functionality

190
00:07:20,400 --> 00:07:21,840
with great

191
00:07:21,840 --> 00:07:24,319
available tools such as the chip shelter

192
00:07:24,319 --> 00:07:27,759
which i definitely would recommend

193
00:07:27,759 --> 00:07:30,400
now the first

194
00:07:30,400 --> 00:07:34,120
target the lpc1343

195
00:07:34,400 --> 00:07:35,199
so

196
00:07:35,199 --> 00:07:37,919
it has multiple crp levels

197
00:07:37,919 --> 00:07:41,199
which are only enabled by certain value

198
00:07:41,199 --> 00:07:43,840
values so crp1

199
00:07:43,840 --> 00:07:46,080
has restricted right access and no read

200
00:07:46,080 --> 00:07:47,039
access to

201
00:07:47,039 --> 00:07:48,000
the chip

202
00:07:48,000 --> 00:07:50,400
crp2

203
00:07:50,400 --> 00:07:52,240
basically limits

204
00:07:52,240 --> 00:07:54,800
the functionality to a chip erase on

205
00:07:54,800 --> 00:07:57,360
crp3 the chip is fully locked so there's

206
00:07:57,360 --> 00:07:59,199
no programming functionality and then

207
00:07:59,199 --> 00:08:00,879
finally it has another

208
00:08:00,879 --> 00:08:03,520
level which is called no isp

209
00:08:03,520 --> 00:08:05,599
which only disables the bootloader but

210
00:08:05,599 --> 00:08:06,639
still

211
00:08:06,639 --> 00:08:09,199
has the debug interface the swd

212
00:08:09,199 --> 00:08:10,960
interface

213
00:08:10,960 --> 00:08:14,479
enabled so this chip has already been uh

214
00:08:14,479 --> 00:08:16,800
attacked by voltage voltage injection by

215
00:08:16,800 --> 00:08:21,199
kolinsky at al um a few years ago but we

216
00:08:21,199 --> 00:08:23,520
would like to show how

217
00:08:23,520 --> 00:08:25,840
the complexity of the bootloader leads

218
00:08:25,840 --> 00:08:29,919
to a software only exploitation

219
00:08:29,919 --> 00:08:30,800
so

220
00:08:30,800 --> 00:08:33,120
for that we have to have a brief look at

221
00:08:33,120 --> 00:08:34,479
the stack

222
00:08:34,479 --> 00:08:37,839
um so on the bottom of the of the ram of

223
00:08:37,839 --> 00:08:40,958
memory it loads it stores the crp value

224
00:08:40,958 --> 00:08:42,799
so this is the previous

225
00:08:42,799 --> 00:08:45,839
these bytes basically

226
00:08:45,839 --> 00:08:48,640
then the bootloader resides in ram the

227
00:08:48,640 --> 00:08:50,480
stack area

228
00:08:50,480 --> 00:08:53,200
is here which is writable

229
00:08:53,200 --> 00:08:56,240
and which is what we will exploit

230
00:08:56,240 --> 00:08:59,040
so since the stack area is writable

231
00:08:59,040 --> 00:09:01,200
we can overwrite return addresses on the

232
00:09:01,200 --> 00:09:03,279
stack so if we call the write to ram

233
00:09:03,279 --> 00:09:04,320
command

234
00:09:04,320 --> 00:09:07,200
we can actually write to the stack and

235
00:09:07,200 --> 00:09:09,200
overwrite its return address with an

236
00:09:09,200 --> 00:09:12,399
address inside the read memory command

237
00:09:12,399 --> 00:09:14,560
handler passed the

238
00:09:14,560 --> 00:09:17,440
password crp check

239
00:09:17,440 --> 00:09:19,600
so we write these values on the check

240
00:09:19,600 --> 00:09:22,160
but on the stack basically which contain

241
00:09:22,160 --> 00:09:25,760
the address to be read out

242
00:09:26,240 --> 00:09:27,920
and um

243
00:09:27,920 --> 00:09:30,640
the return address first so

244
00:09:30,640 --> 00:09:32,720
the program counter pops

245
00:09:32,720 --> 00:09:34,880
to the read memory command which then

246
00:09:34,880 --> 00:09:37,440
pops certain values of the check on the

247
00:09:37,440 --> 00:09:38,720
of the stack

248
00:09:38,720 --> 00:09:40,880
which are the addresses to read

249
00:09:40,880 --> 00:09:42,480
and then finally through several more

250
00:09:42,480 --> 00:09:44,880
gadgets we get back to the command

251
00:09:44,880 --> 00:09:48,000
handler and we can repeat this process

252
00:09:48,000 --> 00:09:48,959
then

253
00:09:48,959 --> 00:09:50,880
we found one more vulnerability which is

254
00:09:50,880 --> 00:09:52,160
that um

255
00:09:52,160 --> 00:09:54,480
individual sectors on this

256
00:09:54,480 --> 00:09:57,200
chip can be erased and rewritten so that

257
00:09:57,200 --> 00:09:59,120
also leads to

258
00:09:59,120 --> 00:10:01,680
a major vulnerability where we can just

259
00:10:01,680 --> 00:10:04,880
override a certain sector which we know

260
00:10:04,880 --> 00:10:07,839
will be executed executed

261
00:10:07,839 --> 00:10:09,760
with a dumper program

262
00:10:09,760 --> 00:10:11,120
so

263
00:10:11,120 --> 00:10:13,680
we can bar from this one section and

264
00:10:13,680 --> 00:10:15,440
read out the rest of the memory of the

265
00:10:15,440 --> 00:10:17,360
chip

266
00:10:17,360 --> 00:10:19,120
now um

267
00:10:19,120 --> 00:10:23,360
i'll go into the next target the stm8

268
00:10:23,360 --> 00:10:24,320
um

269
00:10:24,320 --> 00:10:26,079
so the stm8

270
00:10:26,079 --> 00:10:28,640
security is configured by two option

271
00:10:28,640 --> 00:10:30,959
bytes it's called so the first one is

272
00:10:30,959 --> 00:10:34,399
the readout protection or rob byte which

273
00:10:34,399 --> 00:10:37,200
is depending on which bootloader

274
00:10:37,200 --> 00:10:40,160
version it is we've looked at two either

275
00:10:40,160 --> 00:10:42,720
turned on or turned off by programming

276
00:10:42,720 --> 00:10:44,560
this byte by

277
00:10:44,560 --> 00:10:47,600
up to aa hex

278
00:10:47,600 --> 00:10:49,040
and then finally there's also the

279
00:10:49,040 --> 00:10:51,279
bootloader option bytes uh which

280
00:10:51,279 --> 00:10:53,680
determine whether the bootloader will be

281
00:10:53,680 --> 00:10:56,480
enabled at all first of all

282
00:10:56,480 --> 00:10:59,360
so in a diagram this looks like this so

283
00:10:59,360 --> 00:11:02,560
it resets the bootloader initializes a

284
00:11:02,560 --> 00:11:04,480
few peripherals and disables all

285
00:11:04,480 --> 00:11:06,480
interrupts then it checks whether the

286
00:11:06,480 --> 00:11:09,600
flat the chip is empty or if the

287
00:11:09,600 --> 00:11:11,839
bootloader option bites are set

288
00:11:11,839 --> 00:11:13,760
if that is the case then it checks the

289
00:11:13,760 --> 00:11:16,160
rock bytes so the readout protection if

290
00:11:16,160 --> 00:11:18,399
that's active

291
00:11:18,399 --> 00:11:19,440
it just

292
00:11:19,440 --> 00:11:21,600
goes on to the user application

293
00:11:21,600 --> 00:11:24,160
and then if it's not active finally it

294
00:11:24,160 --> 00:11:26,240
goes through

295
00:11:26,240 --> 00:11:28,800
so we dumped the bootloader and in the

296
00:11:28,800 --> 00:11:31,519
bootloader uh binary this looks like

297
00:11:31,519 --> 00:11:32,480
this

298
00:11:32,480 --> 00:11:34,560
so first of all

299
00:11:34,560 --> 00:11:36,160
it calls uh

300
00:11:36,160 --> 00:11:40,079
the check empty sub function which

301
00:11:40,079 --> 00:11:42,399
checks the first byte in flash whether

302
00:11:42,399 --> 00:11:45,040
it's 82 or ac if that is the case then

303
00:11:45,040 --> 00:11:47,440
the chip is not empty and if that's not

304
00:11:47,440 --> 00:11:48,720
the case

305
00:11:48,720 --> 00:11:52,000
vice versa so then either it jumps into

306
00:11:52,000 --> 00:11:52,800
the

307
00:11:52,800 --> 00:11:56,639
check crp and basic block which then

308
00:11:56,639 --> 00:11:59,519
checks whether the

309
00:11:59,519 --> 00:12:02,959
radar protection bytes is set or cleared

310
00:12:02,959 --> 00:12:06,880
so basically looking at this binary

311
00:12:06,880 --> 00:12:09,440
we know we will require two glitches on

312
00:12:09,440 --> 00:12:10,959
a fully secured chip

313
00:12:10,959 --> 00:12:13,760
so the first one would be to get to

314
00:12:13,760 --> 00:12:16,079
reach this basic block so that's either

315
00:12:16,079 --> 00:12:16,880
here

316
00:12:16,880 --> 00:12:19,040
where we convinced the chip that the

317
00:12:19,040 --> 00:12:21,600
that it's empty or either here where we

318
00:12:21,600 --> 00:12:24,480
convince it that the um

319
00:12:24,480 --> 00:12:27,680
the bootloader option byte is set

320
00:12:27,680 --> 00:12:30,560
um through experiments this uh basic

321
00:12:30,560 --> 00:12:31,680
block would

322
00:12:31,680 --> 00:12:34,079
turn out to be the easiest to glitch

323
00:12:34,079 --> 00:12:36,000
so the first glitch is inserted here

324
00:12:36,000 --> 00:12:38,240
which gets us to this basic block and

325
00:12:38,240 --> 00:12:40,639
then finally we just have to

326
00:12:40,639 --> 00:12:41,519
skip

327
00:12:41,519 --> 00:12:44,480
this jump and go to the serial bootler

328
00:12:44,480 --> 00:12:47,120
which then exposes

329
00:12:47,120 --> 00:12:49,279
all the functionality

330
00:12:49,279 --> 00:12:51,439
so

331
00:12:51,600 --> 00:12:53,920
doing that we knew that there is two

332
00:12:53,920 --> 00:12:56,880
critical sections and um on a profiling

333
00:12:56,880 --> 00:12:59,760
device we can actually go to these

334
00:12:59,760 --> 00:13:01,519
sections or program these sections into

335
00:13:01,519 --> 00:13:03,839
a user application where we completely

336
00:13:03,839 --> 00:13:06,320
take away the timing aspects of a glitch

337
00:13:06,320 --> 00:13:10,320
so we pull a gpio pin high then we have

338
00:13:10,320 --> 00:13:11,839
our critical section which we want to

339
00:13:11,839 --> 00:13:14,320
glitch so there's only like one or two

340
00:13:14,320 --> 00:13:17,200
microseconds there where the glitch can

341
00:13:17,200 --> 00:13:18,720
fall

342
00:13:18,720 --> 00:13:20,639
and then finally we pull

343
00:13:20,639 --> 00:13:22,800
another gpi open high to indicate

344
00:13:22,800 --> 00:13:24,000
success

345
00:13:24,000 --> 00:13:27,279
so here this figure gives an idea of

346
00:13:27,279 --> 00:13:28,480
which

347
00:13:28,480 --> 00:13:31,680
glitch voltages work with with

348
00:13:31,680 --> 00:13:34,010
which glitch widths

349
00:13:34,010 --> 00:13:35,360
[Music]

350
00:13:35,360 --> 00:13:37,200
so there's only

351
00:13:37,200 --> 00:13:39,440
a relatively small

352
00:13:39,440 --> 00:13:42,880
subset of voltages and widths which work

353
00:13:42,880 --> 00:13:45,040
with each other but here we have more of

354
00:13:45,040 --> 00:13:48,240
an idea of these glitch parameters then

355
00:13:48,240 --> 00:13:50,800
the second step is to get the attack the

356
00:13:50,800 --> 00:13:52,959
real bootloader so first of all we can

357
00:13:52,959 --> 00:13:55,279
do this on a profiling device again

358
00:13:55,279 --> 00:13:56,959
where we

359
00:13:56,959 --> 00:14:00,560
either enable the readout protection or

360
00:14:00,560 --> 00:14:03,680
the bootloader bytes so we always we in

361
00:14:03,680 --> 00:14:06,240
either option we only need one glitch

362
00:14:06,240 --> 00:14:08,720
and then finally we do the full double

363
00:14:08,720 --> 00:14:11,199
glitch attack on the real targets

364
00:14:11,199 --> 00:14:13,839
where we have to focus on the timing uh

365
00:14:13,839 --> 00:14:17,120
since we already know the voltages and

366
00:14:17,120 --> 00:14:19,199
widths from the previous from the first

367
00:14:19,199 --> 00:14:20,160
step

368
00:14:20,160 --> 00:14:23,360
so what can help with this is also a

369
00:14:23,360 --> 00:14:25,839
boot power consumption graph

370
00:14:25,839 --> 00:14:28,399
which we obtained by connecting a shunt

371
00:14:28,399 --> 00:14:30,480
resistor to the ground

372
00:14:30,480 --> 00:14:32,240
and then we can see the power

373
00:14:32,240 --> 00:14:34,399
consumption so

374
00:14:34,399 --> 00:14:36,639
the bootloader starts about here

375
00:14:36,639 --> 00:14:39,440
and then there's a section of about 20

376
00:14:39,440 --> 00:14:42,240
or 15 microseconds

377
00:14:42,240 --> 00:14:44,320
where it executes and then we know where

378
00:14:44,320 --> 00:14:46,240
the first glitch needs to fall and the

379
00:14:46,240 --> 00:14:48,240
second glitch and then finally we can

380
00:14:48,240 --> 00:14:50,880
see that the user is high so this can

381
00:14:50,880 --> 00:14:52,720
actually um

382
00:14:52,720 --> 00:14:54,959
make the window the glitch window a lot

383
00:14:54,959 --> 00:14:57,600
smaller if you have a power consumption

384
00:14:57,600 --> 00:14:59,199
an idea of the power consumption of the

385
00:14:59,199 --> 00:15:01,440
chip

386
00:15:01,440 --> 00:15:03,600
then finally um

387
00:15:03,600 --> 00:15:06,480
i'll explain how we

388
00:15:06,480 --> 00:15:09,440
enhanced voltage glitching by static

389
00:15:09,440 --> 00:15:13,839
analysis on the renesas 78k zero

390
00:15:13,839 --> 00:15:14,959
chip

391
00:15:14,959 --> 00:15:16,480
so

392
00:15:16,480 --> 00:15:19,440
um bozzato at all came up with a very

393
00:15:19,440 --> 00:15:22,880
clever attack on this chip basically um

394
00:15:22,880 --> 00:15:26,160
so the chip only locks right access but

395
00:15:26,160 --> 00:15:27,040
um

396
00:15:27,040 --> 00:15:31,519
leaves a lot a checksum and a verify

397
00:15:31,519 --> 00:15:35,680
open basically but only on

398
00:15:35,920 --> 00:15:39,759
only on 256 consecutive bytes so

399
00:15:39,759 --> 00:15:41,839
technically you couldn't

400
00:15:41,839 --> 00:15:44,160
gain much information from having a

401
00:15:44,160 --> 00:15:47,120
checksum done on 256 bytes

402
00:15:47,120 --> 00:15:48,399
however

403
00:15:48,399 --> 00:15:50,240
they found that by voltage glitching

404
00:15:50,240 --> 00:15:53,440
they could get this down to four bytes

405
00:15:53,440 --> 00:15:55,199
and they could also leak individual

406
00:15:55,199 --> 00:15:57,839
bytes by glitching during the checksum

407
00:15:57,839 --> 00:16:00,560
calculation

408
00:16:00,560 --> 00:16:02,160
so

409
00:16:02,160 --> 00:16:03,920
we decided to look into the bootloader

410
00:16:03,920 --> 00:16:05,360
binary and

411
00:16:05,360 --> 00:16:07,360
actually try to predict

412
00:16:07,360 --> 00:16:10,160
glitch offsets based on which addresses

413
00:16:10,160 --> 00:16:13,759
we're generating the checksum or verify

414
00:16:13,759 --> 00:16:14,639
from

415
00:16:14,639 --> 00:16:17,360
so we noticed that each

416
00:16:17,360 --> 00:16:20,079
command in the bootloader had this

417
00:16:20,079 --> 00:16:23,440
sort of sanity check um subroutine which

418
00:16:23,440 --> 00:16:26,240
basically if given two addresses it

419
00:16:26,240 --> 00:16:28,800
checked uh which block number it was

420
00:16:28,800 --> 00:16:30,320
whether the block numbers uh

421
00:16:30,320 --> 00:16:31,759
corresponded

422
00:16:31,759 --> 00:16:32,720
if

423
00:16:32,720 --> 00:16:34,839
the lower address was lower

424
00:16:34,839 --> 00:16:38,160
than then the maximum maximum allowed

425
00:16:38,160 --> 00:16:41,040
address and whether the both addresses

426
00:16:41,040 --> 00:16:42,720
are whether the first

427
00:16:42,720 --> 00:16:45,040
address is higher than the second

428
00:16:45,040 --> 00:16:47,920
so since the same function is executed

429
00:16:47,920 --> 00:16:51,440
for all these bootloader commands and

430
00:16:51,440 --> 00:16:52,880
depending on

431
00:16:52,880 --> 00:16:55,600
where it fails or succeeds

432
00:16:55,600 --> 00:16:58,639
in returns this will affect the glitch

433
00:16:58,639 --> 00:16:59,759
offsets

434
00:16:59,759 --> 00:17:01,920
so the idea is to statically predict

435
00:17:01,920 --> 00:17:04,240
these offsets by um

436
00:17:04,240 --> 00:17:07,280
putting the arguments or to addresses

437
00:17:07,280 --> 00:17:11,359
given to the checksum and verify command

438
00:17:12,240 --> 00:17:14,959
into equivalence classes

439
00:17:14,959 --> 00:17:15,919
which is what

440
00:17:15,919 --> 00:17:19,039
they're called so basically the idea is

441
00:17:19,039 --> 00:17:21,119
that given a certain function for

442
00:17:21,119 --> 00:17:23,359
example this one um

443
00:17:23,359 --> 00:17:25,599
certain sets of arguments will always

444
00:17:25,599 --> 00:17:28,079
take the same path through this function

445
00:17:28,079 --> 00:17:30,720
based on the constraints generated so

446
00:17:30,720 --> 00:17:32,640
this is akin to

447
00:17:32,640 --> 00:17:34,880
symbolic execution

448
00:17:34,880 --> 00:17:37,840
where we change the inputs to uh to a

449
00:17:37,840 --> 00:17:40,480
function from starting from

450
00:17:40,480 --> 00:17:42,960
the interrupt handler handler to where

451
00:17:42,960 --> 00:17:45,919
the bootletter responds retained these

452
00:17:45,919 --> 00:17:48,000
input arguments and then we build up the

453
00:17:48,000 --> 00:17:49,760
constraints and then based on these

454
00:17:49,760 --> 00:17:51,120
constraints

455
00:17:51,120 --> 00:17:53,679
we generate our equivalence classes with

456
00:17:53,679 --> 00:17:55,280
all arguments which

457
00:17:55,280 --> 00:17:57,280
have the same constraints and thus the

458
00:17:57,280 --> 00:17:59,760
same execution path through

459
00:17:59,760 --> 00:18:02,960
the bootloader binary

460
00:18:03,200 --> 00:18:04,080
then

461
00:18:04,080 --> 00:18:05,600
what this is look like actually

462
00:18:05,600 --> 00:18:07,280
glitching

463
00:18:07,280 --> 00:18:08,880
so

464
00:18:08,880 --> 00:18:11,440
we were actually able to

465
00:18:11,440 --> 00:18:14,400
based on the first successful offsets

466
00:18:14,400 --> 00:18:16,559
for example of this

467
00:18:16,559 --> 00:18:18,799
equivalence class we were able to

468
00:18:18,799 --> 00:18:21,440
predict how

469
00:18:21,440 --> 00:18:23,679
how much further in time or how much

470
00:18:23,679 --> 00:18:25,360
bigger the offset should be for other

471
00:18:25,360 --> 00:18:28,480
equivalence classes based on the

472
00:18:28,480 --> 00:18:30,799
length of the execution path so how many

473
00:18:30,799 --> 00:18:34,000
more clock ticks and then based on the

474
00:18:34,000 --> 00:18:37,039
frequency of the device

475
00:18:37,039 --> 00:18:39,039
um we could predict where the other

476
00:18:39,039 --> 00:18:40,960
offsets all the of all the other

477
00:18:40,960 --> 00:18:43,120
equivalence classes

478
00:18:43,120 --> 00:18:44,960
it should fall

479
00:18:44,960 --> 00:18:46,080
so that's

480
00:18:46,080 --> 00:18:49,200
how we used leverage static analysis

481
00:18:49,200 --> 00:18:51,440
for voltage glitching

482
00:18:51,440 --> 00:18:54,160
while completely

483
00:18:54,160 --> 00:18:55,679
ignoring the

484
00:18:55,679 --> 00:18:56,960
other glitch

485
00:18:56,960 --> 00:18:59,600
parameters such as voltage and

486
00:18:59,600 --> 00:19:01,679
width we'd set the voltage to zero and

487
00:19:01,679 --> 00:19:04,320
the width to 100 nanoseconds so just

488
00:19:04,320 --> 00:19:06,799
constant

489
00:19:07,360 --> 00:19:10,960
finally um i will summarize uh some

490
00:19:10,960 --> 00:19:13,679
bootleg design directives which

491
00:19:13,679 --> 00:19:15,760
if they're followed

492
00:19:15,760 --> 00:19:18,240
they might be able to mitigate issues

493
00:19:18,240 --> 00:19:19,600
like this

494
00:19:19,600 --> 00:19:21,679
so there's a few anti-patterns we've

495
00:19:21,679 --> 00:19:23,200
noticed which

496
00:19:23,200 --> 00:19:26,160
are basically to be avoided in any um

497
00:19:26,160 --> 00:19:28,960
bootloader design so

498
00:19:28,960 --> 00:19:31,200
the first one partial ram right access

499
00:19:31,200 --> 00:19:34,720
led to the lpc microcontroller where we

500
00:19:34,720 --> 00:19:38,160
could where we could override the return

501
00:19:38,160 --> 00:19:40,160
address on the stack

502
00:19:40,160 --> 00:19:42,640
then similar for the next one where we

503
00:19:42,640 --> 00:19:45,120
could erase and overwrite a certain

504
00:19:45,120 --> 00:19:47,840
flash sector

505
00:19:47,840 --> 00:19:49,919
to then with dumper code which then

506
00:19:49,919 --> 00:19:52,080
dumps the whole chip

507
00:19:52,080 --> 00:19:54,960
certain chips default to unprotected

508
00:19:54,960 --> 00:19:57,120
which can make it a lot easier to glitch

509
00:19:57,120 --> 00:19:58,320
when

510
00:19:58,320 --> 00:20:01,360
there's for example 15 values which

511
00:20:01,360 --> 00:20:03,440
disable the readout protection and only

512
00:20:03,440 --> 00:20:07,200
one that enables it um

513
00:20:07,200 --> 00:20:10,000
a non-redundant crp checks makes it

514
00:20:10,000 --> 00:20:12,720
easier to glitch so that's um if there's

515
00:20:12,720 --> 00:20:14,880
only one then you only need one glitch

516
00:20:14,880 --> 00:20:16,000
for example

517
00:20:16,000 --> 00:20:18,480
a large number of protection levels may

518
00:20:18,480 --> 00:20:21,600
confuse developers as to what's actually

519
00:20:21,600 --> 00:20:24,159
protected what's actually not um is

520
00:20:24,159 --> 00:20:25,919
right access

521
00:20:25,919 --> 00:20:28,640
complete right access to the chip or

522
00:20:28,640 --> 00:20:32,240
only to ram etc um complex bootlegger

523
00:20:32,240 --> 00:20:35,120
logic could lead to software-only

524
00:20:35,120 --> 00:20:37,200
vulnerabilities such as we've seen in

525
00:20:37,200 --> 00:20:38,880
the lpc

526
00:20:38,880 --> 00:20:43,360
and then finally the non-atomic erase

527
00:20:43,760 --> 00:20:45,840
is also if you can erase one sector and

528
00:20:45,840 --> 00:20:48,320
then somehow overwrite it then the rest

529
00:20:48,320 --> 00:20:49,919
of the firmware is

530
00:20:49,919 --> 00:20:51,919
also vulnerable

531
00:20:51,919 --> 00:20:52,720
so

532
00:20:52,720 --> 00:20:54,799
i thank you for listening

533
00:20:54,799 --> 00:20:57,280
and if there's any questions

534
00:20:57,280 --> 00:21:00,840
please do ask me on the presentation at

535
00:21:00,840 --> 00:21:05,199
chess thank you very much

