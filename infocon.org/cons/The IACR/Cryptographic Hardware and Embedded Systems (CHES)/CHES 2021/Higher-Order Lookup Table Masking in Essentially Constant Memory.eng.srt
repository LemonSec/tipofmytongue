1
00:00:00,960 --> 00:00:02,720
i am annapolis

2
00:00:02,720 --> 00:00:05,279
said scholar and triple t bangalore

3
00:00:05,279 --> 00:00:07,839
i'll be presenting arches 2021 work

4
00:00:07,839 --> 00:00:10,240
title higher order look up table masking

5
00:00:10,240 --> 00:00:12,320
in essentially constant memory

6
00:00:12,320 --> 00:00:14,480
this is a joint work with my supervisors

7
00:00:14,480 --> 00:00:17,359
renewable speed

8
00:00:17,359 --> 00:00:19,359
the agenda of my presentation is as

9
00:00:19,359 --> 00:00:20,400
follows

10
00:00:20,400 --> 00:00:22,080
i'll briefly introduce side channel

11
00:00:22,080 --> 00:00:23,359
attacks

12
00:00:23,359 --> 00:00:26,000
followed by masking counter measure

13
00:00:26,000 --> 00:00:28,000
i'll present our scheme higher order

14
00:00:28,000 --> 00:00:30,720
lookup table masking using prg

15
00:00:30,720 --> 00:00:33,680
followed by experimental results

16
00:00:33,680 --> 00:00:35,600
i'll conclude with a brief summary of

17
00:00:35,600 --> 00:00:39,840
our work and possible future work

18
00:00:40,480 --> 00:00:42,320
the crypto algorithm

19
00:00:42,320 --> 00:00:44,719
must hide the secret to prevent the

20
00:00:44,719 --> 00:00:47,840
adversary from compromising the device

21
00:00:47,840 --> 00:00:50,559
but while executing the algorithm on the

22
00:00:50,559 --> 00:00:51,520
device

23
00:00:51,520 --> 00:00:52,800
the device

24
00:00:52,800 --> 00:00:55,440
may have a measurable effects

25
00:00:55,440 --> 00:00:57,280
in the form of a leakage

26
00:00:57,280 --> 00:00:59,280
so that the adversary can use this

27
00:00:59,280 --> 00:01:03,120
leakage to compromise the system

28
00:01:03,199 --> 00:01:05,280
if we consider the side channel attack

29
00:01:05,280 --> 00:01:06,880
model

30
00:01:06,880 --> 00:01:08,880
along with the input and output to the

31
00:01:08,880 --> 00:01:10,960
device

32
00:01:10,960 --> 00:01:14,240
the adversary can also have the leakage

33
00:01:14,240 --> 00:01:16,240
which is in the form of either the power

34
00:01:16,240 --> 00:01:19,439
consumption or timing information

35
00:01:19,439 --> 00:01:21,920
or electromagnetic elimination

36
00:01:21,920 --> 00:01:24,799
so that the adversary can mount side

37
00:01:24,799 --> 00:01:28,080
channel attack to recover the secret

38
00:01:28,080 --> 00:01:30,798
from the device

39
00:01:30,880 --> 00:01:32,799
the takeaway from this slide is nothing

40
00:01:32,799 --> 00:01:33,600
but

41
00:01:33,600 --> 00:01:35,920
secure algorithms still need secure

42
00:01:35,920 --> 00:01:38,479
implementations

43
00:01:38,479 --> 00:01:40,400
so what do we mean by secure

44
00:01:40,400 --> 00:01:43,119
implementation

45
00:01:43,280 --> 00:01:45,680
since the leakage from the device is

46
00:01:45,680 --> 00:01:48,159
correlated to the secret

47
00:01:48,159 --> 00:01:51,520
the adversary can mount sda

48
00:01:51,520 --> 00:01:53,600
if we can make the

49
00:01:53,600 --> 00:01:56,640
leak is key independent

50
00:01:56,640 --> 00:01:58,799
by inducing randomness into the

51
00:01:58,799 --> 00:02:01,439
computation

52
00:02:01,600 --> 00:02:03,759
this can possibly counter the side

53
00:02:03,759 --> 00:02:05,840
channel attacks

54
00:02:05,840 --> 00:02:08,000
this way of inducing randomness into the

55
00:02:08,000 --> 00:02:11,200
computation is known as masking

56
00:02:11,200 --> 00:02:13,599
as part of the masking scheme the secret

57
00:02:13,599 --> 00:02:15,680
will be divided into shares

58
00:02:15,680 --> 00:02:17,520
and shares

59
00:02:17,520 --> 00:02:19,920
we'll use additive secret sharing as

60
00:02:19,920 --> 00:02:23,440
part of our scheme and the security

61
00:02:23,440 --> 00:02:25,599
parameter for the masking scheme will be

62
00:02:25,599 --> 00:02:28,560
represented with t

63
00:02:28,560 --> 00:02:31,360
as per the state of art t is equal to n

64
00:02:31,360 --> 00:02:33,680
minus

65
00:02:34,840 --> 00:02:38,000
1. as part of this presentation

66
00:02:38,000 --> 00:02:40,560
our focus will be on

67
00:02:40,560 --> 00:02:42,239
softer countermeasures to power side

68
00:02:42,239 --> 00:02:44,800
channel attacks

69
00:02:44,800 --> 00:02:47,360
even though the masking scheme secured

70
00:02:47,360 --> 00:02:49,840
tieth order

71
00:02:49,840 --> 00:02:51,920
prone to attacks at t plus one with

72
00:02:51,920 --> 00:02:53,599
order

73
00:02:53,599 --> 00:02:55,760
charity at all in their crypto 99 work

74
00:02:55,760 --> 00:02:58,480
demonstrated that they adversely require

75
00:02:58,480 --> 00:03:01,440
exponential efforts in masking order

76
00:03:01,440 --> 00:03:03,840
to mount

77
00:03:03,840 --> 00:03:06,400
hence we can consider the masking order

78
00:03:06,400 --> 00:03:09,040
as a sound security parameter

79
00:03:09,040 --> 00:03:10,879
now we will continue our discussion with

80
00:03:10,879 --> 00:03:12,560
security models

81
00:03:12,560 --> 00:03:15,120
how we can model the leakage obtained by

82
00:03:15,120 --> 00:03:18,200
the adversary

83
00:03:18,239 --> 00:03:20,319
bromine leakage model

84
00:03:20,319 --> 00:03:23,280
initiated by isha sahara wagner in

85
00:03:23,280 --> 00:03:25,680
crypto 2003

86
00:03:25,680 --> 00:03:28,560
as per this probing leakage model

87
00:03:28,560 --> 00:03:30,640
we can model the leakage

88
00:03:30,640 --> 00:03:33,360
as t intermediate variables exact values

89
00:03:33,360 --> 00:03:35,519
of t intermediate variables

90
00:03:35,519 --> 00:03:37,040
if we can prove that

91
00:03:37,040 --> 00:03:39,040
the t in any set of t intermediate

92
00:03:39,040 --> 00:03:42,000
variables is independent of the secret

93
00:03:42,000 --> 00:03:43,920
then the implementation the mass

94
00:03:43,920 --> 00:03:47,280
implementation is probing secure

95
00:03:47,280 --> 00:03:51,040
whereas as per the noisy leakage model

96
00:03:51,040 --> 00:03:52,959
the leakage is modeled as

97
00:03:52,959 --> 00:03:53,680
the

98
00:03:53,680 --> 00:03:56,239
the adversary can obtain

99
00:03:56,239 --> 00:03:58,319
all intermediate variables the noisy

100
00:03:58,319 --> 00:04:01,360
values of all intermediate variables

101
00:04:01,360 --> 00:04:04,640
if we can prove that the adversary

102
00:04:04,640 --> 00:04:06,000
quote unquote

103
00:04:06,000 --> 00:04:09,040
obtains no information about the secret

104
00:04:09,040 --> 00:04:11,439
then the scheme is secure in noisy

105
00:04:11,439 --> 00:04:14,840
leakage model

106
00:04:15,680 --> 00:04:18,320
the chamboski and

107
00:04:18,320 --> 00:04:20,560
fast in 2014

108
00:04:20,560 --> 00:04:23,440
bridge the gap between these two models

109
00:04:23,440 --> 00:04:25,520
by showing a reduction from probing

110
00:04:25,520 --> 00:04:29,840
leakage model to noisy leakage model

111
00:04:31,600 --> 00:04:34,160
we prove our schemes secure in probing

112
00:04:34,160 --> 00:04:35,840
latest model

113
00:04:35,840 --> 00:04:37,600
i will briefly summarize the various

114
00:04:37,600 --> 00:04:40,080
notions of probing linkage model

115
00:04:40,080 --> 00:04:42,400
as per richardson wagner's work

116
00:04:42,400 --> 00:04:46,080
the uh to uh achieve the order security

117
00:04:46,080 --> 00:04:47,919
we want the number of shares to be two t

118
00:04:47,919 --> 00:04:49,680
plus one

119
00:04:49,680 --> 00:04:52,560
further the bound is optimized

120
00:04:52,560 --> 00:04:55,520
the optimal level is equal to t plus one

121
00:04:55,520 --> 00:04:56,400
in

122
00:04:56,400 --> 00:04:59,759
chess 2010 work by rival prof and uh

123
00:04:59,759 --> 00:05:03,360
matthew ivan the manual prof

124
00:05:03,360 --> 00:05:05,600
then we have the notion of compositional

125
00:05:05,600 --> 00:05:06,880
security

126
00:05:06,880 --> 00:05:08,720
where the bound remains to be n is equal

127
00:05:08,720 --> 00:05:09,680
to

128
00:05:09,680 --> 00:05:11,360
t plus 1

129
00:05:11,360 --> 00:05:14,000
as part of ccs 2016

130
00:05:14,000 --> 00:05:15,280
birthday toll introduced the

131
00:05:15,280 --> 00:05:18,799
compositional security notion

132
00:05:18,960 --> 00:05:20,960
as per this notion

133
00:05:20,960 --> 00:05:24,720
if we prove the individual gadgets

134
00:05:24,720 --> 00:05:27,120
individual gadgets to be

135
00:05:27,120 --> 00:05:29,360
the sna secure

136
00:05:29,360 --> 00:05:31,199
we can say that the overall

137
00:05:31,199 --> 00:05:32,720
implementation

138
00:05:32,720 --> 00:05:35,600
remains the same secure which is nothing

139
00:05:35,600 --> 00:05:39,400
but compositional security

140
00:05:40,400 --> 00:05:42,639
now we will see how we can extend the

141
00:05:42,639 --> 00:05:46,240
masking technique to block ciphers

142
00:05:46,240 --> 00:05:48,400
so the operations involved as part of

143
00:05:48,400 --> 00:05:50,000
the block cipher are

144
00:05:50,000 --> 00:05:53,919
linear and non-linear operations

145
00:05:53,919 --> 00:05:56,400
the linear functions are trivial to

146
00:05:56,400 --> 00:05:57,759
implement

147
00:05:57,759 --> 00:05:59,680
we can apply the function to the

148
00:05:59,680 --> 00:06:01,840
individual shares

149
00:06:01,840 --> 00:06:04,400
whereas the non-linear

150
00:06:04,400 --> 00:06:06,479
layer the non-linear function

151
00:06:06,479 --> 00:06:08,319
which is nothing but s box for block

152
00:06:08,319 --> 00:06:10,160
ciphers

153
00:06:10,160 --> 00:06:13,039
has to be handled carefully for a secure

154
00:06:13,039 --> 00:06:15,759
implementation

155
00:06:17,759 --> 00:06:20,000
the approaches from the literature to

156
00:06:20,000 --> 00:06:21,039
implement

157
00:06:21,039 --> 00:06:22,000
box

158
00:06:22,000 --> 00:06:24,560
can be broadly categorized into

159
00:06:24,560 --> 00:06:26,560
two categories

160
00:06:26,560 --> 00:06:30,639
circuit based and lookup table based

161
00:06:31,840 --> 00:06:34,000
before comparing the circuit based and

162
00:06:34,000 --> 00:06:36,720
lookup table based schemes

163
00:06:36,720 --> 00:06:38,800
crypto implementation depends on three

164
00:06:38,800 --> 00:06:40,479
main factors

165
00:06:40,479 --> 00:06:43,199
the execution time it takes the amount

166
00:06:43,199 --> 00:06:46,160
of ram memory required and

167
00:06:46,160 --> 00:06:48,400
the randomness required for a secure

168
00:06:48,400 --> 00:06:51,120
implementation

169
00:06:51,199 --> 00:06:53,360
now we will compare the circuit based

170
00:06:53,360 --> 00:06:55,360
and the lookup table based schemes

171
00:06:55,360 --> 00:06:58,080
in terms of these parameters

172
00:06:58,080 --> 00:07:00,720
the circuit-based schemes require almost

173
00:07:00,720 --> 00:07:03,440
a constant memory for the implementation

174
00:07:03,440 --> 00:07:06,000
for a mass implementation whereas the

175
00:07:06,000 --> 00:07:08,960
lookup table based schemes require

176
00:07:08,960 --> 00:07:11,440
a exponential amount of memory in terms

177
00:07:11,440 --> 00:07:13,280
of the input to s box

178
00:07:13,280 --> 00:07:15,759
and it also depends on the

179
00:07:15,759 --> 00:07:18,000
masking order

180
00:07:18,000 --> 00:07:20,240
whereas look at table based schemes

181
00:07:20,240 --> 00:07:23,199
enjoy the pre-processing

182
00:07:23,199 --> 00:07:25,199
pre-processing refers to the amount of

183
00:07:25,199 --> 00:07:26,560
computation

184
00:07:26,560 --> 00:07:28,160
that can be done

185
00:07:28,160 --> 00:07:32,080
before availability of the actual secret

186
00:07:32,080 --> 00:07:34,639
so with the advantage of pre-processing

187
00:07:34,639 --> 00:07:37,360
lookup table based schemes will have

188
00:07:37,360 --> 00:07:39,360
only a constant amount of online

189
00:07:39,360 --> 00:07:40,880
execution time

190
00:07:40,880 --> 00:07:43,440
whereas for circuit-based schemes the

191
00:07:43,440 --> 00:07:45,039
entire execution

192
00:07:45,039 --> 00:07:48,879
happens during the online phase

193
00:07:48,879 --> 00:07:50,240
so the

194
00:07:50,240 --> 00:07:52,479
uh the main problem with respect to the

195
00:07:52,479 --> 00:07:54,479
lookup table based schemes is the amount

196
00:07:54,479 --> 00:07:56,879
of ram memory required

197
00:07:56,879 --> 00:07:58,879
so our goal is to

198
00:07:58,879 --> 00:08:00,960
optimize the ram memory required for

199
00:08:00,960 --> 00:08:04,159
lookup tableway scheme

200
00:08:04,240 --> 00:08:06,479
so we look at the

201
00:08:06,479 --> 00:08:08,400
higher order lookup table based schemes

202
00:08:08,400 --> 00:08:10,879
available from the literature

203
00:08:10,879 --> 00:08:13,440
the scheme is proposed by crown in uh

204
00:08:13,440 --> 00:08:16,639
2014 from eurocrypt 2014

205
00:08:16,639 --> 00:08:18,720
and further optimized by current at all

206
00:08:18,720 --> 00:08:22,080
in 2018 just 2018.

207
00:08:22,080 --> 00:08:23,840
as per the scheme

208
00:08:23,840 --> 00:08:26,639
uh the size of the lookup table as i

209
00:08:26,639 --> 00:08:28,800
mentioned in my previous slide

210
00:08:28,800 --> 00:08:32,240
requires exponential uh amount of memory

211
00:08:32,240 --> 00:08:35,279
in terms of the input to s box to par k

212
00:08:35,279 --> 00:08:39,440
and it depends on the number of shares n

213
00:08:39,440 --> 00:08:41,519
since we require an additional temporary

214
00:08:41,519 --> 00:08:43,760
table uh to

215
00:08:43,760 --> 00:08:46,000
construct the randomized lookup table

216
00:08:46,000 --> 00:08:47,920
which is uh the total amount of memory

217
00:08:47,920 --> 00:08:49,839
required is nothing but the double of

218
00:08:49,839 --> 00:08:51,440
the quantity

219
00:08:51,440 --> 00:08:53,440
and this this is the number of two

220
00:08:53,440 --> 00:08:54,640
random bits required for the

221
00:08:54,640 --> 00:08:56,640
implementation

222
00:08:56,640 --> 00:08:58,880
if we instantiate the scheme for a

223
00:08:58,880 --> 00:09:00,880
specific order of

224
00:09:00,880 --> 00:09:02,399
t is equal to 10

225
00:09:02,399 --> 00:09:04,560
i mean n is equal to 11

226
00:09:04,560 --> 00:09:05,720
we need

227
00:09:05,720 --> 00:09:09,040
440 kilobytes of memory

228
00:09:09,040 --> 00:09:12,560
for a single areas execution

229
00:09:12,560 --> 00:09:15,760
and this amount of memory

230
00:09:15,760 --> 00:09:18,240
may become affordable for a resource

231
00:09:18,240 --> 00:09:21,120
constraint device

232
00:09:21,440 --> 00:09:23,600
this is the high level overview of uh

233
00:09:23,600 --> 00:09:27,839
higher order aud scheme from europe 2014

234
00:09:27,839 --> 00:09:28,720
where

235
00:09:28,720 --> 00:09:32,080
lookup table will have n columns

236
00:09:32,080 --> 00:09:34,480
and it will go through a computation of

237
00:09:34,480 --> 00:09:37,120
n minus 1 shift followed by refresh

238
00:09:37,120 --> 00:09:38,800
masks

239
00:09:38,800 --> 00:09:42,640
and the output of shift and refresh by x

240
00:09:42,640 --> 00:09:45,519
i is passed as an input for the next

241
00:09:45,519 --> 00:09:46,640
shift

242
00:09:46,640 --> 00:09:48,880
and once we finish n minus 1 shift

243
00:09:48,880 --> 00:09:50,480
followed by refresh

244
00:09:50,480 --> 00:09:52,480
we will have a final lookup

245
00:09:52,480 --> 00:09:55,519
for output suffix to output shares of

246
00:09:55,519 --> 00:09:58,080
suffix

247
00:09:59,760 --> 00:10:02,240
since we want to achieve

248
00:10:02,240 --> 00:10:05,360
a optimized ram memory

249
00:10:05,360 --> 00:10:09,120
the idea behind our contribution is

250
00:10:09,120 --> 00:10:11,680
we want to make number of columns of the

251
00:10:11,680 --> 00:10:14,079
lookup table independent of the masking

252
00:10:14,079 --> 00:10:15,440
order

253
00:10:15,440 --> 00:10:17,680
essentially we'll be storing only the

254
00:10:17,680 --> 00:10:20,079
first column of the lookup table

255
00:10:20,079 --> 00:10:22,399
will not be storing the n minus 1

256
00:10:22,399 --> 00:10:25,839
remaining columns of the table

257
00:10:26,560 --> 00:10:28,160
the randomness

258
00:10:28,160 --> 00:10:29,839
is computed

259
00:10:29,839 --> 00:10:32,240
using a prg the random values required

260
00:10:32,240 --> 00:10:33,920
for the computation are computed using

261
00:10:33,920 --> 00:10:36,479
the prg

262
00:10:36,640 --> 00:10:39,519
so how actually we can store uh we we

263
00:10:39,519 --> 00:10:41,760
can prevent storing the n minus one

264
00:10:41,760 --> 00:10:43,360
columns of the table

265
00:10:43,360 --> 00:10:44,720
is nothing but

266
00:10:44,720 --> 00:10:47,040
we will compute the prg outputs on the

267
00:10:47,040 --> 00:10:48,800
fly

268
00:10:48,800 --> 00:10:51,040
this is the idea from our

269
00:10:51,040 --> 00:10:53,600
chest 2020 paper second order lookup

270
00:10:53,600 --> 00:10:56,000
table compression scheme

271
00:10:56,000 --> 00:10:58,480
even though

272
00:10:58,800 --> 00:11:01,040
our current work is different from our

273
00:11:01,040 --> 00:11:02,959
just 2021 work

274
00:11:02,959 --> 00:11:05,200
we are using we are reusing this idea

275
00:11:05,200 --> 00:11:08,320
from our previous contribution

276
00:11:08,320 --> 00:11:10,480
now we will discuss the challenges to

277
00:11:10,480 --> 00:11:14,240
achieve a single column lookup table

278
00:11:14,240 --> 00:11:17,120
it can be observed from europe 2014

279
00:11:17,120 --> 00:11:18,800
scheme that

280
00:11:18,800 --> 00:11:22,079
the lookup table which is output from

281
00:11:22,079 --> 00:11:22,959
shift

282
00:11:22,959 --> 00:11:24,000
x i

283
00:11:24,000 --> 00:11:27,839
is given as input to shift x i plus 1.

284
00:11:27,839 --> 00:11:29,920
since we are not storing the n minus 1

285
00:11:29,920 --> 00:11:32,399
columns of the lookup table explicitly

286
00:11:32,399 --> 00:11:34,320
there is a need to recompute these

287
00:11:34,320 --> 00:11:36,160
unmanagement columns

288
00:11:36,160 --> 00:11:38,640
this will be the additional overhead to

289
00:11:38,640 --> 00:11:42,480
achieve optimized memory

290
00:11:42,480 --> 00:11:44,160
uh

291
00:11:44,160 --> 00:11:47,040
the random mask we want to generate

292
00:11:47,040 --> 00:11:49,279
using a prg construction

293
00:11:49,279 --> 00:11:50,560
the prg

294
00:11:50,560 --> 00:11:53,440
also should be probing secure

295
00:11:53,440 --> 00:11:54,160
and

296
00:11:54,160 --> 00:11:56,399
the input c to the prg

297
00:11:56,399 --> 00:11:59,200
depends on the locality of the circuit

298
00:11:59,200 --> 00:12:02,639
locality refers to the maximum number of

299
00:12:02,639 --> 00:12:05,440
random bits

300
00:12:05,440 --> 00:12:07,519
any variable as part of the computation

301
00:12:07,519 --> 00:12:08,839
depends

302
00:12:08,839 --> 00:12:11,440
upon it can be observed from the prior

303
00:12:11,440 --> 00:12:12,560
works that

304
00:12:12,560 --> 00:12:14,639
the locality of the circuit improving

305
00:12:14,639 --> 00:12:16,480
the locality of the circuit

306
00:12:16,480 --> 00:12:19,600
will result in optimal seat to the prg

307
00:12:19,600 --> 00:12:22,399
so we replace the refresh mass

308
00:12:22,399 --> 00:12:25,680
with locality refresh

309
00:12:25,680 --> 00:12:29,920
to improve the locality of the circuit

310
00:12:32,480 --> 00:12:35,680
so the probing secure prg constructions

311
00:12:35,680 --> 00:12:38,639
from literature are the robust prg and

312
00:12:38,639 --> 00:12:41,200
the multi prg techniques

313
00:12:41,200 --> 00:12:43,839
as per the robus prg technique we will

314
00:12:43,839 --> 00:12:46,160
consider the whole circuit as a single

315
00:12:46,160 --> 00:12:48,880
entity and the locality will be computed

316
00:12:48,880 --> 00:12:50,800
for the circuit whereas the multi

317
00:12:50,800 --> 00:12:52,959
multi-prg technique

318
00:12:52,959 --> 00:12:53,760
uh

319
00:12:53,760 --> 00:12:56,079
is essentially multiple non-rovers prg

320
00:12:56,079 --> 00:12:57,120
technique

321
00:12:57,120 --> 00:12:59,200
we'll be dividing the randomness into

322
00:12:59,200 --> 00:13:00,720
subsets

323
00:13:00,720 --> 00:13:02,560
and the circuit and the locality will be

324
00:13:02,560 --> 00:13:05,360
computed with respect to the subset

325
00:13:05,360 --> 00:13:08,639
so essentially we achieve

326
00:13:08,639 --> 00:13:10,720
we observed better online execution

327
00:13:10,720 --> 00:13:13,360
times using multi prg technique

328
00:13:13,360 --> 00:13:16,959
because the time uh taken by a multi prg

329
00:13:16,959 --> 00:13:20,160
to output one unit of randomness

330
00:13:20,160 --> 00:13:21,920
is lesser compared to the robust prg

331
00:13:21,920 --> 00:13:23,279
technique

332
00:13:23,279 --> 00:13:24,639
we will discuss about these two

333
00:13:24,639 --> 00:13:26,320
techniques in detail in the further

334
00:13:26,320 --> 00:13:28,000
slides

335
00:13:28,000 --> 00:13:30,160
now i'll present the high level

336
00:13:30,160 --> 00:13:33,200
comparison of our scheme versus

337
00:13:33,200 --> 00:13:34,800
the higher order lookup table based

338
00:13:34,800 --> 00:13:36,639
scheme

339
00:13:36,639 --> 00:13:38,480
it can be observed that

340
00:13:38,480 --> 00:13:40,399
we have only a single column lookup

341
00:13:40,399 --> 00:13:41,360
table

342
00:13:41,360 --> 00:13:43,600
whereas in the other scheme we have the

343
00:13:43,600 --> 00:13:46,880
lookup table having n columns

344
00:13:46,880 --> 00:13:50,320
and the refresh masks is

345
00:13:50,320 --> 00:13:52,240
replaced by the

346
00:13:52,240 --> 00:13:55,040
locality refresh lr

347
00:13:55,040 --> 00:13:57,279
and the randomness is generated from a

348
00:13:57,279 --> 00:13:59,680
prg

349
00:13:59,680 --> 00:14:02,880
and once we finish the n minus 1 steps

350
00:14:02,880 --> 00:14:05,680
the final lookup is similar to the

351
00:14:05,680 --> 00:14:08,479
original screen

352
00:14:09,680 --> 00:14:11,839
now we'll look at the security analysis

353
00:14:11,839 --> 00:14:14,560
of our scheme

354
00:14:15,040 --> 00:14:17,760
first we will discuss about the higher

355
00:14:17,760 --> 00:14:20,240
order lookup table based scheme

356
00:14:20,240 --> 00:14:23,360
using robus prg construction

357
00:14:23,360 --> 00:14:26,160
since the adversary can also probe the

358
00:14:26,160 --> 00:14:27,920
input or intermediate variables of the

359
00:14:27,920 --> 00:14:29,360
robust prg

360
00:14:29,360 --> 00:14:30,480
along with

361
00:14:30,480 --> 00:14:32,560
the intermediates of the s-box

362
00:14:32,560 --> 00:14:34,320
implementation

363
00:14:34,320 --> 00:14:37,040
we need to carefully choose the input c

364
00:14:37,040 --> 00:14:38,880
to robust prg

365
00:14:38,880 --> 00:14:41,600
such that it remains secure against t

366
00:14:41,600 --> 00:14:44,800
probing attacks

367
00:14:44,800 --> 00:14:48,399
and the size of the input c2 robust prg

368
00:14:48,399 --> 00:14:50,959
depends on the locality of the

369
00:14:50,959 --> 00:14:54,240
entire xbox implementation

370
00:14:54,240 --> 00:14:56,639
we have proven the security of our

371
00:14:56,639 --> 00:14:58,480
robust prg scheme

372
00:14:58,480 --> 00:14:59,680
using

373
00:14:59,680 --> 00:15:01,199
tsni

374
00:15:01,199 --> 00:15:05,359
notation compositional security notation

375
00:15:05,920 --> 00:15:07,040
we

376
00:15:07,040 --> 00:15:09,279
build the robust prg using a trivial

377
00:15:09,279 --> 00:15:10,959
construction

378
00:15:10,959 --> 00:15:13,360
which can be obtained become by

379
00:15:13,360 --> 00:15:16,160
combining outputs of t plus 1 non-robust

380
00:15:16,160 --> 00:15:18,399
prgs

381
00:15:18,399 --> 00:15:20,880
i would like to mention that

382
00:15:20,880 --> 00:15:23,519
the security proofs will work only for a

383
00:15:23,519 --> 00:15:26,800
linear prg construction

384
00:15:26,800 --> 00:15:28,480
we move on to the multiple prg

385
00:15:28,480 --> 00:15:30,800
construction

386
00:15:30,800 --> 00:15:32,160
where

387
00:15:32,160 --> 00:15:34,240
we need to divide the randomness

388
00:15:34,240 --> 00:15:36,000
required for the implementation into

389
00:15:36,000 --> 00:15:38,639
subsets

390
00:15:39,680 --> 00:15:40,959
ah it is

391
00:15:40,959 --> 00:15:42,480
it is mentioned in the previous slides

392
00:15:42,480 --> 00:15:45,279
that the lookup table is constructed in

393
00:15:45,279 --> 00:15:47,519
n minus one steps the shift and refresh

394
00:15:47,519 --> 00:15:48,959
operations

395
00:15:48,959 --> 00:15:51,279
and each of the uh

396
00:15:51,279 --> 00:15:53,920
temporary tables during the shift and

397
00:15:53,920 --> 00:15:56,720
refresh have n minus 1 columns

398
00:15:56,720 --> 00:15:59,199
so we divide the randomness required

399
00:15:59,199 --> 00:16:02,079
for the preprocessing into n minus 1

400
00:16:02,079 --> 00:16:04,320
square subsets

401
00:16:04,320 --> 00:16:06,880
and each of these subsets are generated

402
00:16:06,880 --> 00:16:10,480
from a non-robust prg

403
00:16:10,800 --> 00:16:13,120
the locality is computed with respect to

404
00:16:13,120 --> 00:16:15,759
the randomness subset that is one column

405
00:16:15,759 --> 00:16:18,160
which is of size to power k into k prime

406
00:16:18,160 --> 00:16:19,759
bits

407
00:16:19,759 --> 00:16:21,600
and the

408
00:16:21,600 --> 00:16:26,560
input c to the prg is chosen accordingly

409
00:16:26,560 --> 00:16:27,920
we prove

410
00:16:27,920 --> 00:16:29,920
the security of the multi prg

411
00:16:29,920 --> 00:16:32,000
construction in an extended security

412
00:16:32,000 --> 00:16:32,959
model

413
00:16:32,959 --> 00:16:35,360
tsna r star

414
00:16:35,360 --> 00:16:37,360
the reason behind choosing the extended

415
00:16:37,360 --> 00:16:39,680
security model is that

416
00:16:39,680 --> 00:16:42,639
the adversary can possibly leak the

417
00:16:42,639 --> 00:16:45,759
outputs of a non-robust prg using single

418
00:16:45,759 --> 00:16:47,199
pro

419
00:16:47,199 --> 00:16:51,839
so the extended model will address

420
00:16:51,839 --> 00:16:53,440
the

421
00:16:53,440 --> 00:16:54,240
the

422
00:16:54,240 --> 00:16:57,680
related simulation with respect to the

423
00:16:57,680 --> 00:16:59,920
leakage of a

424
00:16:59,920 --> 00:17:01,920
entire randomness subset using a single

425
00:17:01,920 --> 00:17:04,920
probe

426
00:17:05,359 --> 00:17:08,160
this is a high level comparison of the

427
00:17:08,160 --> 00:17:10,240
asymptotic complexities of our scheme

428
00:17:10,240 --> 00:17:12,480
with the original scheme

429
00:17:12,480 --> 00:17:15,039
you can see that the

430
00:17:15,039 --> 00:17:17,359
total number of trng

431
00:17:17,359 --> 00:17:19,839
is cubic in terms of

432
00:17:19,839 --> 00:17:21,839
number of shares for robus prg

433
00:17:21,839 --> 00:17:24,480
construction and it is square for

434
00:17:24,480 --> 00:17:26,720
multiple prg construction

435
00:17:26,720 --> 00:17:29,120
and the online execution time depends on

436
00:17:29,120 --> 00:17:31,360
the time required

437
00:17:31,360 --> 00:17:33,039
for the prg

438
00:17:33,039 --> 00:17:35,600
which is a cubic

439
00:17:35,600 --> 00:17:38,559
for robus prg and linear for multiple

440
00:17:38,559 --> 00:17:41,039
prg so we have achieved better only

441
00:17:41,039 --> 00:17:43,840
execution time using the multiple prg

442
00:17:43,840 --> 00:17:46,840
construction

443
00:17:47,280 --> 00:17:49,280
this slide is in the experimental

444
00:17:49,280 --> 00:17:51,840
results of our schemes

445
00:17:51,840 --> 00:17:55,360
the using the multi prg approach

446
00:17:55,360 --> 00:17:56,720
since we want we would like to

447
00:17:56,720 --> 00:17:59,360
demonstrate a 10th order lookup table

448
00:17:59,360 --> 00:18:00,880
based scheme on a resource constraint

449
00:18:00,880 --> 00:18:03,440
device we have chosen an arduin cortex

450
00:18:03,440 --> 00:18:06,720
m4 device having 256 kb of memory as a

451
00:18:06,720 --> 00:18:08,240
target

452
00:18:08,240 --> 00:18:10,960
it can be observed that for a 10th order

453
00:18:10,960 --> 00:18:15,840
secure aes 128 implementation we need 41

454
00:18:15,840 --> 00:18:18,799
for 41.2 kb of memory

455
00:18:18,799 --> 00:18:21,840
this includes the memory to store the

456
00:18:21,840 --> 00:18:23,679
preprocess lookup tables

457
00:18:23,679 --> 00:18:26,799
plus the input c to the prg

458
00:18:26,799 --> 00:18:29,520
and our online execution requires around

459
00:18:29,520 --> 00:18:32,799
4 million clock cycles

460
00:18:33,440 --> 00:18:35,440
finally i would like to conclude my

461
00:18:35,440 --> 00:18:37,919
presentation with a brief summary of our

462
00:18:37,919 --> 00:18:40,160
results

463
00:18:40,160 --> 00:18:43,200
our scheme requires approximately 40 kb

464
00:18:43,200 --> 00:18:44,400
of memory

465
00:18:44,400 --> 00:18:46,400
for uh practical orders we have

466
00:18:46,400 --> 00:18:48,160
experimented till uh

467
00:18:48,160 --> 00:18:49,280
order

468
00:18:49,280 --> 00:18:51,520
essentially the columns of the lookup

469
00:18:51,520 --> 00:18:52,400
table

470
00:18:52,400 --> 00:18:55,600
is independent of the masking order

471
00:18:55,600 --> 00:18:56,400
uh

472
00:18:56,400 --> 00:18:58,960
we can say that the memory optimization

473
00:18:58,960 --> 00:19:01,440
achieved is independent of the speed of

474
00:19:01,440 --> 00:19:05,520
the uh inbuilt rng of the device

475
00:19:05,520 --> 00:19:08,240
and we also explored the possibility of

476
00:19:08,240 --> 00:19:12,080
the rng versus prg tradeoffs speed

477
00:19:12,080 --> 00:19:14,080
tradeoffs

478
00:19:14,080 --> 00:19:16,080
the target chosen

479
00:19:16,080 --> 00:19:19,520
has a relatively fast rnga it took

480
00:19:19,520 --> 00:19:22,240
around 300 approximately 300 clock

481
00:19:22,240 --> 00:19:24,720
cycles to generate a 32-bit random

482
00:19:24,720 --> 00:19:26,799
number so we also explored the

483
00:19:26,799 --> 00:19:28,240
possibility of

484
00:19:28,240 --> 00:19:30,960
the trade-offs between the prg and the

485
00:19:30,960 --> 00:19:32,160
rnga

486
00:19:32,160 --> 00:19:35,200
to achieve better online execution time

487
00:19:35,200 --> 00:19:37,360
and

488
00:19:37,360 --> 00:19:39,360
if we compare our results with an 8-bit

489
00:19:39,360 --> 00:19:41,600
bit sliced aes execution

490
00:19:41,600 --> 00:19:45,280
our execution times are 1.5 times faster

491
00:19:45,280 --> 00:19:47,840
than the 8-bit bit sliced aes

492
00:19:47,840 --> 00:19:50,080
and our results are almost comparable to

493
00:19:50,080 --> 00:19:51,600
the 32-bit

494
00:19:51,600 --> 00:19:54,960
which sliced mass day yes execution

495
00:19:54,960 --> 00:19:56,640
and it will be an interesting future

496
00:19:56,640 --> 00:19:57,520
work

497
00:19:57,520 --> 00:20:00,320
to uh design a higher order lookup table

498
00:20:00,320 --> 00:20:01,760
based scheme

499
00:20:01,760 --> 00:20:04,240
which can have a faster online execution

500
00:20:04,240 --> 00:20:06,799
time than the 32-bit

501
00:20:06,799 --> 00:20:10,720
must be sliced aes

502
00:20:10,799 --> 00:20:15,039
and you can find the e-print of our work

503
00:20:15,039 --> 00:20:17,200
in the following archive

504
00:20:17,200 --> 00:20:21,320
and thank you for your attention

