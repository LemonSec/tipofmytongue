1
00:00:01,360 --> 00:00:04,240
hello everyone i'm vincent hong

2
00:00:04,240 --> 00:00:06,080
currently i'm a master student at

3
00:00:06,080 --> 00:00:08,480
national thai university

4
00:00:08,480 --> 00:00:11,120
in this video i'll talk about our paper

5
00:00:11,120 --> 00:00:14,240
polynomial location in entry prime

6
00:00:14,240 --> 00:00:15,839
this is a drone work with several

7
00:00:15,839 --> 00:00:18,320
authors

8
00:00:19,199 --> 00:00:21,520
n2 prime is an alternate candidate in

9
00:00:21,520 --> 00:00:23,359
the third round of this post-quantum

10
00:00:23,359 --> 00:00:26,960
cryptography standardization

11
00:00:26,960 --> 00:00:30,080
they are in total six parameter sets in

12
00:00:30,080 --> 00:00:32,880
our paper we focus on the parameter set

13
00:00:32,880 --> 00:00:36,079
where p is equal to 761

14
00:00:36,079 --> 00:00:37,680
in this video

15
00:00:37,680 --> 00:00:39,600
i'll show our result for all other

16
00:00:39,600 --> 00:00:42,559
parameter sets on quotation 4.

17
00:00:42,559 --> 00:00:44,640
i'll show the numbers for multiplying

18
00:00:44,640 --> 00:00:48,640
polynomials and the four streams

19
00:00:49,440 --> 00:00:52,000
given two primes p and q

20
00:00:52,000 --> 00:00:54,239
and true prime select the polynomial

21
00:00:54,239 --> 00:00:56,960
ring as a large gallon field

22
00:00:56,960 --> 00:00:58,480
for a polynomial

23
00:00:58,480 --> 00:01:00,640
if all of its coefficients are within

24
00:01:00,640 --> 00:01:04,400
plus minus 1 then we call it small

25
00:01:04,400 --> 00:01:06,880
if there are exactly w non-zero

26
00:01:06,880 --> 00:01:10,320
coefficients we call with w

27
00:01:10,320 --> 00:01:12,960
if it is small and wet w at the same

28
00:01:12,960 --> 00:01:13,840
time

29
00:01:13,840 --> 00:01:17,840
then we call it a short polynomial

30
00:01:17,840 --> 00:01:19,840
we focus on the case when one of the

31
00:01:19,840 --> 00:01:21,840
molecules is small and make no

32
00:01:21,840 --> 00:01:24,799
assumption on the other market

33
00:01:24,799 --> 00:01:27,280
if both of the multitends are small

34
00:01:27,280 --> 00:01:29,680
there exists fast computation for this

35
00:01:29,680 --> 00:01:30,720
case

36
00:01:30,720 --> 00:01:32,960
if you are interested in this case you

37
00:01:32,960 --> 00:01:35,040
can check the reference and i'm not

38
00:01:35,040 --> 00:01:36,400
going to

39
00:01:36,400 --> 00:01:41,400
tell about the details in this video

40
00:01:42,079 --> 00:01:44,560
in our paper we propose two different

41
00:01:44,560 --> 00:01:46,720
approaches for multiplying polynomials

42
00:01:46,720 --> 00:01:49,119
in entropy

43
00:01:49,119 --> 00:01:51,680
our first approach is about good streak

44
00:01:51,680 --> 00:01:54,240
mapping a one-dimensional convolution

45
00:01:54,240 --> 00:01:58,399
into a two-dimensional convolution

46
00:01:58,399 --> 00:02:00,560
our second approach is mixed resistance

47
00:02:00,560 --> 00:02:01,840
approach

48
00:02:01,840 --> 00:02:05,280
for the mixture this approach

49
00:02:06,000 --> 00:02:08,720
we propose two different implementations

50
00:02:08,720 --> 00:02:11,120
the first implementation is utilizing

51
00:02:11,120 --> 00:02:13,120
several small vertices

52
00:02:13,120 --> 00:02:15,920
the second implementation is handling

53
00:02:15,920 --> 00:02:19,920
the large radius with router string

54
00:02:20,800 --> 00:02:22,800
now i'm going to talk about what is the

55
00:02:22,800 --> 00:02:24,080
convolution

56
00:02:24,080 --> 00:02:26,319
and how to apply convolution on

57
00:02:26,319 --> 00:02:28,400
multiplying multiple multiplying

58
00:02:28,400 --> 00:02:31,920
polynomials in entropy

59
00:02:32,640 --> 00:02:34,560
for polynomial ring

60
00:02:34,560 --> 00:02:37,360
if the polynomial modulus f of x is

61
00:02:37,360 --> 00:02:41,120
equal to x n minus 1 for some n

62
00:02:41,120 --> 00:02:43,280
then we call multiplication in this

63
00:02:43,280 --> 00:02:47,120
polynomial ring a convolution

64
00:02:47,280 --> 00:02:49,280
if we look at the polynomial modulus of

65
00:02:49,280 --> 00:02:50,560
n2 prime

66
00:02:50,560 --> 00:02:52,560
then multiplication in this ring are

67
00:02:52,560 --> 00:02:55,040
clearly not convolutions

68
00:02:55,040 --> 00:02:57,519
we observe that the degree of the

69
00:02:57,519 --> 00:02:59,680
product a and b

70
00:02:59,680 --> 00:03:03,599
is bounded by 2p minus 2.

71
00:03:03,599 --> 00:03:04,400
therefore

72
00:03:04,400 --> 00:03:06,959
we can choose an n greater than 2 p

73
00:03:06,959 --> 00:03:08,159
minus 2

74
00:03:08,159 --> 00:03:10,560
and compute the product as a size n

75
00:03:10,560 --> 00:03:12,879
convolution

76
00:03:12,879 --> 00:03:15,200
after computing the product we then

77
00:03:15,200 --> 00:03:18,000
reduce the polynomial modulus to x to

78
00:03:18,000 --> 00:03:21,840
the p minus x minus one

79
00:03:23,040 --> 00:03:26,879
our first approach is about good strict

80
00:03:26,879 --> 00:03:28,239
good strip

81
00:03:28,239 --> 00:03:29,040
is

82
00:03:29,040 --> 00:03:31,920
converting a one dimensional convolution

83
00:03:31,920 --> 00:03:34,640
into a multi-dimensional convolution by

84
00:03:34,640 --> 00:03:37,360
permuting the coefficients

85
00:03:37,360 --> 00:03:39,040
suppose we are given two co-prime

86
00:03:39,040 --> 00:03:42,239
integers q0 and q1

87
00:03:42,239 --> 00:03:44,000
we can permute the coefficients

88
00:03:44,000 --> 00:03:47,680
according to the map sending x to y z

89
00:03:47,680 --> 00:03:50,560
under the agreement that y is actually

90
00:03:50,560 --> 00:03:52,159
reduced of unity

91
00:03:52,159 --> 00:03:56,560
and z is a q one slot of unity

92
00:03:56,560 --> 00:04:00,400
after applying the permutation

93
00:04:00,400 --> 00:04:03,599
we will compute q0 and dt on the

94
00:04:03,599 --> 00:04:06,720
dimension of y

95
00:04:07,040 --> 00:04:10,560
number the other transforms

96
00:04:11,760 --> 00:04:14,319
number theorem transform is converting

97
00:04:14,319 --> 00:04:17,519
your convolution into point locations

98
00:04:17,519 --> 00:04:19,440
for polynomial a

99
00:04:19,440 --> 00:04:22,160
the number zero transform of a is n

100
00:04:22,160 --> 00:04:23,280
triple

101
00:04:23,280 --> 00:04:24,720
derived by

102
00:04:24,720 --> 00:04:28,000
replacing x with certain power of c verb

103
00:04:28,000 --> 00:04:30,960
c is a language of unity

104
00:04:30,960 --> 00:04:33,440
the convolution theorem tells that the

105
00:04:33,440 --> 00:04:36,720
product of a and b can be computed by

106
00:04:36,720 --> 00:04:40,160
first applying anti-key on a and b

107
00:04:40,160 --> 00:04:42,560
point multiplying them and applying the

108
00:04:42,560 --> 00:04:44,720
inverse of angular key

109
00:04:44,720 --> 00:04:46,880
efficient algorithms for computing nd

110
00:04:46,880 --> 00:04:50,800
keys are also called effect keys

111
00:04:51,120 --> 00:04:53,759
now we return to good strength and we

112
00:04:53,759 --> 00:04:56,479
focus on the number of notations before

113
00:04:56,479 --> 00:04:59,199
and after the isomorphisms

114
00:04:59,199 --> 00:05:01,600
on the left hand side a straightforward

115
00:05:01,600 --> 00:05:03,840
approach for computing convolution

116
00:05:03,840 --> 00:05:05,680
requires about

117
00:05:05,680 --> 00:05:08,840
q0 tier 2 times v1 to the 2

118
00:05:08,840 --> 00:05:11,360
multiplications on the right hand side

119
00:05:11,360 --> 00:05:15,360
we first apply permutation to have a two

120
00:05:15,360 --> 00:05:18,080
dimensional convolution

121
00:05:18,080 --> 00:05:21,280
then we'll apply nkt on the dimension of

122
00:05:21,280 --> 00:05:22,400
y

123
00:05:22,400 --> 00:05:26,479
in total we only need about an order of

124
00:05:26,479 --> 00:05:30,720
t 0 times q 1 to the 2 plus q 0 to 2

125
00:05:30,720 --> 00:05:34,080
times q 1 multiplications

126
00:05:34,080 --> 00:05:36,639
in the appendix i give an example

127
00:05:36,639 --> 00:05:40,560
showing that good stream is already fast

128
00:05:40,560 --> 00:05:43,440
for computing small convolutions such as

129
00:05:43,440 --> 00:05:46,880
x to the six minus one

130
00:05:47,120 --> 00:05:49,759
current to the fft is the most commonly

131
00:05:49,759 --> 00:05:53,199
seen fast fourier transform

132
00:05:53,199 --> 00:05:56,720
given an invertible element data

133
00:05:56,720 --> 00:05:59,039
we have the isomorphism from the ring on

134
00:05:59,039 --> 00:06:00,639
the left hand side

135
00:06:00,639 --> 00:06:02,479
to the product ring on the right hand

136
00:06:02,479 --> 00:06:04,880
side where the polynomial modulus of

137
00:06:04,880 --> 00:06:07,680
each ring is x minus

138
00:06:07,680 --> 00:06:08,800
minus

139
00:06:08,800 --> 00:06:12,800
theta times c to the i

140
00:06:13,199 --> 00:06:15,039
we'll apply this isomorphism by

141
00:06:15,039 --> 00:06:17,280
observing that roots of unity are just

142
00:06:17,280 --> 00:06:20,800
invertible elements

143
00:06:20,800 --> 00:06:23,360
suppose we are going to compute side n0

144
00:06:23,360 --> 00:06:26,160
and y entity

145
00:06:26,160 --> 00:06:29,199
for applying mix for applying code ct

146
00:06:29,199 --> 00:06:30,400
fft

147
00:06:30,400 --> 00:06:33,199
we'll first compute n0 entity to have a

148
00:06:33,199 --> 00:06:34,800
product ring

149
00:06:34,800 --> 00:06:36,880
for the second isomorphism

150
00:06:36,880 --> 00:06:39,199
we'll apply the isomorphism

151
00:06:39,199 --> 00:06:42,160
on the previous slide by setting data to

152
00:06:42,160 --> 00:06:44,160
c to the i

153
00:06:44,160 --> 00:06:47,039
so eventually we have a product ring

154
00:06:47,039 --> 00:06:50,960
where each string is a product ring

155
00:06:50,960 --> 00:06:54,080
if n 0 and m 1 are power sub 2

156
00:06:54,080 --> 00:06:57,520
then cl to the fft is very fast

157
00:06:57,520 --> 00:07:01,120
if n0 and n1 do not share a same radix

158
00:07:01,120 --> 00:07:02,639
then we'll cross search clearly to the

159
00:07:02,639 --> 00:07:07,199
fft and mix read this computation

160
00:07:08,080 --> 00:07:11,120
for our first approach question

161
00:07:11,120 --> 00:07:14,160
if we want to apply primetime entity on

162
00:07:14,160 --> 00:07:16,960
the dimension of y then

163
00:07:16,960 --> 00:07:20,000
primal has to divide q minus 1 which is

164
00:07:20,000 --> 00:07:22,560
not the case

165
00:07:22,560 --> 00:07:26,080
so how can we overcome this

166
00:07:27,039 --> 00:07:30,479
we compute as if z is a coefficient ring

167
00:07:30,479 --> 00:07:32,800
and after computing the product we then

168
00:07:32,800 --> 00:07:35,919
reduce the coefficient ring to z2

169
00:07:35,919 --> 00:07:38,479
on quotation 4 with powerful 32-bit

170
00:07:38,479 --> 00:07:41,919
arithmetic we can choose a large point

171
00:07:41,919 --> 00:07:44,160
binding the maximum value of the result

172
00:07:44,160 --> 00:07:46,960
for entity

173
00:07:47,360 --> 00:07:50,319
for the 5-top entity we'll apply clearly

174
00:07:50,319 --> 00:07:53,280
to the ffp by observing that 5-ton is

175
00:07:53,280 --> 00:07:55,280
just

176
00:07:55,280 --> 00:07:56,879
2 to the 9.

177
00:07:56,879 --> 00:07:59,520
so eventually the result is a brief

178
00:07:59,520 --> 00:08:02,080
reversal of the result from the stripper

179
00:08:02,080 --> 00:08:05,120
application of file top entity

180
00:08:05,120 --> 00:08:06,639
notice that

181
00:08:06,639 --> 00:08:11,039
the goal is simply computing the product

182
00:08:11,199 --> 00:08:14,000
so as long as we can design the inverse

183
00:08:14,000 --> 00:08:17,120
of any key by assuming the input is

184
00:08:17,120 --> 00:08:19,599
already in the reversal order

185
00:08:19,599 --> 00:08:21,759
we can compute the product in normal

186
00:08:21,759 --> 00:08:23,360
order

187
00:08:23,360 --> 00:08:27,360
after applying the inverse and dt

188
00:08:27,360 --> 00:08:29,680
we have to multiply each coefficient by

189
00:08:29,680 --> 00:08:32,240
the inverse of 512

190
00:08:32,240 --> 00:08:35,279
reduce the coefficient ring to z2 and

191
00:08:35,279 --> 00:08:39,599
finally reduce the polynomial modulus to

192
00:08:39,599 --> 00:08:43,279
one minus x minus one

193
00:08:43,279 --> 00:08:44,959
we can instead

194
00:08:44,959 --> 00:08:48,560
first reducing the polynomial modulus

195
00:08:48,560 --> 00:08:49,519
to

196
00:08:49,519 --> 00:08:51,440
to have the number of notation in

197
00:08:51,440 --> 00:08:54,640
reduction to z2

198
00:08:54,640 --> 00:08:57,279
when we reduce the polynomial modulus

199
00:08:57,279 --> 00:08:58,240
first

200
00:08:58,240 --> 00:09:00,800
then the maximum value of the result is

201
00:09:00,800 --> 00:09:04,720
bounded by 2 times 2p minus 1.

202
00:09:04,720 --> 00:09:06,480
additionally

203
00:09:06,480 --> 00:09:08,399
for the small polynomial

204
00:09:08,399 --> 00:09:09,200
if

205
00:09:09,200 --> 00:09:11,920
if it is actually a short polynomial

206
00:09:11,920 --> 00:09:14,800
then we can replace p with w in the

207
00:09:14,800 --> 00:09:17,760
above conditions

208
00:09:19,680 --> 00:09:21,920
our second approach is it

209
00:09:21,920 --> 00:09:23,920
is mixed received approach

210
00:09:23,920 --> 00:09:25,360
and will propose two different

211
00:09:25,360 --> 00:09:27,839
implementations

212
00:09:27,839 --> 00:09:30,399
for the first implementation we look at

213
00:09:30,399 --> 00:09:33,040
the small point factors 2

214
00:09:33,040 --> 00:09:37,839
3 and 5 for defining entities

215
00:09:38,000 --> 00:09:39,600
after applying

216
00:09:39,600 --> 00:09:42,399
one layer of two ndt three layers of

217
00:09:42,399 --> 00:09:46,000
three nut and one layer of five ntt

218
00:09:46,000 --> 00:09:48,880
the convolution is transformed into

219
00:09:48,880 --> 00:09:51,360
several multiplications of six

220
00:09:51,360 --> 00:09:54,880
coefficient polynomials

221
00:09:56,399 --> 00:09:59,120
for the second implementation we look at

222
00:09:59,120 --> 00:10:01,440
the prime factor 17

223
00:10:01,440 --> 00:10:03,440
and three

224
00:10:03,440 --> 00:10:05,680
first of all we'll apply

225
00:10:05,680 --> 00:10:08,000
17 ndt

226
00:10:08,000 --> 00:10:10,959
and then we'll apply nine entity

227
00:10:10,959 --> 00:10:13,760
for the 17 ndt we'll apply router string

228
00:10:13,760 --> 00:10:17,200
for efficient computation

229
00:10:17,760 --> 00:10:20,480
rather strip is converting part of the

230
00:10:20,480 --> 00:10:23,279
computation of size p and e key

231
00:10:23,279 --> 00:10:26,079
into a size p minus one convolution by

232
00:10:26,079 --> 00:10:28,880
permuting the coefficients

233
00:10:28,880 --> 00:10:30,480
for prime p

234
00:10:30,480 --> 00:10:33,120
there is always a projection of size p

235
00:10:33,120 --> 00:10:37,440
minus 1 sending i to g to the i

236
00:10:37,440 --> 00:10:39,920
after permuting the coefficients

237
00:10:39,920 --> 00:10:42,959
we see that in the second equality

238
00:10:42,959 --> 00:10:46,880
the exponents of g sum to a fixed j

239
00:10:46,880 --> 00:10:51,360
z exactly the pattern of convolution

240
00:10:51,839 --> 00:10:54,320
here is a small example of router string

241
00:10:54,320 --> 00:10:56,720
for size 5 and dt

242
00:10:56,720 --> 00:10:58,399
after permuting the coefficients

243
00:10:58,399 --> 00:11:02,079
indicated by sending i to 2 to the i

244
00:11:02,079 --> 00:11:05,839
we see that this part of the computation

245
00:11:05,839 --> 00:11:09,760
is just a size 4 convolution

246
00:11:10,079 --> 00:11:11,440
i'm going to talk about our

247
00:11:11,440 --> 00:11:14,000
implementations using some unique

248
00:11:14,000 --> 00:11:17,200
features of cortisone 4.

249
00:11:17,200 --> 00:11:20,079
cortisone 4 implements rmb7m

250
00:11:20,079 --> 00:11:22,640
architecture with dsp and single

251
00:11:22,640 --> 00:11:25,839
precision floating point extensions

252
00:11:25,839 --> 00:11:28,480
dsp extension is so crucial for

253
00:11:28,480 --> 00:11:31,040
arithmetic in z2

254
00:11:31,040 --> 00:11:33,279
for the floating point extension we are

255
00:11:33,279 --> 00:11:35,760
not using photon block arithmetic

256
00:11:35,760 --> 00:11:38,160
by using full template registers at

257
00:11:38,160 --> 00:11:40,720
temporary storage

258
00:11:40,720 --> 00:11:42,640
in the clear speed extension

259
00:11:42,640 --> 00:11:44,560
there are instructions multiplying

260
00:11:44,560 --> 00:11:47,360
specific halves of the operand

261
00:11:47,360 --> 00:11:50,160
there are also instructions multiplying

262
00:11:50,160 --> 00:11:52,000
two head words

263
00:11:52,000 --> 00:11:54,480
at a time

264
00:11:54,959 --> 00:11:57,360
the second result is added to or

265
00:11:57,360 --> 00:12:00,160
subtracted from the first result

266
00:12:00,160 --> 00:12:02,240
one can also choose to accumulate the

267
00:12:02,240 --> 00:12:05,680
result to encrypt later

268
00:12:05,680 --> 00:12:10,079
another useful instruction is smmulr

269
00:12:10,079 --> 00:12:11,680
which is used for implementing

270
00:12:11,680 --> 00:12:14,720
32-bit-bar reduction

271
00:12:14,720 --> 00:12:18,000
the instruction first multiplied a

272
00:12:18,000 --> 00:12:20,959
with the inverse tube and extracts the

273
00:12:20,959 --> 00:12:24,000
upper 32-bit result with rounding we

274
00:12:24,000 --> 00:12:29,120
then apply mls to reduce the value in a

275
00:12:29,200 --> 00:12:31,920
another important feature of cortisone 4

276
00:12:31,920 --> 00:12:33,040
is that

277
00:12:33,040 --> 00:12:35,279
the lung multiplications and the

278
00:12:35,279 --> 00:12:39,200
accumulation variance are one cycle

279
00:12:39,200 --> 00:12:41,839
after acquiring the 64-bit product of a

280
00:12:41,839 --> 00:12:43,040
and b

281
00:12:43,040 --> 00:12:45,120
we multiply the load register with

282
00:12:45,120 --> 00:12:46,880
montgomery factor

283
00:12:46,880 --> 00:12:51,040
finally we multiply key with the modulus

284
00:12:51,040 --> 00:12:53,839
clearly as a result

285
00:12:54,160 --> 00:12:55,600
with a

286
00:12:55,600 --> 00:12:58,079
64-bit accumulator

287
00:12:58,079 --> 00:12:59,680
the result of

288
00:12:59,680 --> 00:13:01,680
a montgomery multiplication

289
00:13:01,680 --> 00:13:05,199
is then in the high register

290
00:13:05,519 --> 00:13:08,079
in our implementations

291
00:13:08,079 --> 00:13:10,160
of mixed-race approaches

292
00:13:10,160 --> 00:13:12,160
we commonly have to compute butterflies

293
00:13:12,160 --> 00:13:15,279
that are not powerless too

294
00:13:15,279 --> 00:13:17,600
see this is our implementation for

295
00:13:17,600 --> 00:13:20,320
registry butterfly

296
00:13:20,320 --> 00:13:23,839
if we look at the computation of t1

297
00:13:23,839 --> 00:13:26,959
then we see that

298
00:13:26,959 --> 00:13:30,000
the t1 can be computed by

299
00:13:30,000 --> 00:13:31,820
in can be computed by

300
00:13:31,820 --> 00:13:33,120
[Music]

301
00:13:33,120 --> 00:13:34,560
the instruction

302
00:13:34,560 --> 00:13:37,279
sm lad

303
00:13:37,279 --> 00:13:39,120
after computing three double-sided

304
00:13:39,120 --> 00:13:41,760
products we then apply

305
00:13:41,760 --> 00:13:45,360
three barrier junctions to reclusion

306
00:13:45,360 --> 00:13:48,680
to z2

307
00:13:49,680 --> 00:13:51,920
for a good stretch approach

308
00:13:51,920 --> 00:13:53,920
we commonly compute three layers of

309
00:13:53,920 --> 00:13:56,959
resist to increase two butterflies

310
00:13:56,959 --> 00:14:00,000
first of all we move the twiddle vector

311
00:14:00,000 --> 00:14:02,240
from the floating point register to the

312
00:14:02,240 --> 00:14:04,800
general purpose register r1

313
00:14:04,800 --> 00:14:06,639
we then perform

314
00:14:06,639 --> 00:14:08,959
four montgomery multiplications followed

315
00:14:08,959 --> 00:14:11,040
by four sr pairs

316
00:14:11,040 --> 00:14:13,199
we can also group the add instructions

317
00:14:13,199 --> 00:14:17,279
together to save the code size

318
00:14:17,279 --> 00:14:20,000
next we compute another two layers of

319
00:14:20,000 --> 00:14:24,079
residue redux two butterflies

320
00:14:25,199 --> 00:14:27,279
another important idea for

321
00:14:27,279 --> 00:14:29,199
implementation is that

322
00:14:29,199 --> 00:14:32,000
we can design special butterflies

323
00:14:32,000 --> 00:14:33,839
utilizing

324
00:14:33,839 --> 00:14:35,360
the fact that

325
00:14:35,360 --> 00:14:38,399
half of the entries are zeros initially

326
00:14:38,399 --> 00:14:40,320
and permuting the coefficients on the

327
00:14:40,320 --> 00:14:42,240
fly

328
00:14:42,240 --> 00:14:45,199
these are these are the figures

329
00:14:45,199 --> 00:14:47,199
for the data flow

330
00:14:47,199 --> 00:14:49,040
for the details

331
00:14:49,040 --> 00:14:52,399
they are shown in our paper

332
00:14:55,440 --> 00:14:57,600
these two tables are

333
00:14:57,600 --> 00:14:58,399
are

334
00:14:58,399 --> 00:15:00,959
our result for multiplying on the t for

335
00:15:00,959 --> 00:15:03,680
multiplying polynomials in entropy prime

336
00:15:03,680 --> 00:15:06,959
the first table is in our paper

337
00:15:06,959 --> 00:15:11,600
we find that entities whether it whether

338
00:15:11,600 --> 00:15:14,240
including question rather stress and

339
00:15:14,240 --> 00:15:16,639
utilize the surface modular disease

340
00:15:16,639 --> 00:15:18,720
are all far faster than two group

341
00:15:18,720 --> 00:15:20,959
approach

342
00:15:20,959 --> 00:15:22,720
in the second table

343
00:15:22,720 --> 00:15:24,800
this table contains our result in our

344
00:15:24,800 --> 00:15:27,600
follow-up work we find that for the

345
00:15:27,600 --> 00:15:30,079
smallest two parameter sets rather

346
00:15:30,079 --> 00:15:33,839
string is still is fast

347
00:15:33,839 --> 00:15:35,360
on the other hand

348
00:15:35,360 --> 00:15:37,839
when the polynomial degree is larger and

349
00:15:37,839 --> 00:15:39,279
larger

350
00:15:39,279 --> 00:15:41,360
we find that switching the coefficient

351
00:15:41,360 --> 00:15:43,759
ring to a larger coefficient ring is the

352
00:15:43,759 --> 00:15:45,839
most beneficial approach

353
00:15:45,839 --> 00:15:51,480
and whenever possible question is useful

354
00:15:54,320 --> 00:15:56,000
these are the cyclic ones of the four

355
00:15:56,000 --> 00:16:00,079
streams shown in our paper

356
00:16:01,680 --> 00:16:04,880
and this in this table is our result in

357
00:16:04,880 --> 00:16:06,959
our follow-up works all these

358
00:16:06,959 --> 00:16:10,800
implementations already merged into ppl4

359
00:16:10,800 --> 00:16:12,959
for the streamline entry prime the

360
00:16:12,959 --> 00:16:15,360
teacher generation is now

361
00:16:15,360 --> 00:16:20,759
with nkt for computing jumpt steps

362
00:16:22,560 --> 00:16:25,360
in summary for multiplying polynomials

363
00:16:25,360 --> 00:16:26,720
in entropy

364
00:16:26,720 --> 00:16:29,279
we first have to decide do we want to

365
00:16:29,279 --> 00:16:31,759
compute the result as if the coefficient

366
00:16:31,759 --> 00:16:34,480
ring is z or not

367
00:16:34,480 --> 00:16:37,199
if we decide to compute s and z

368
00:16:37,199 --> 00:16:39,839
then we can freely choose an n for fast

369
00:16:39,839 --> 00:16:42,560
computation with entities

370
00:16:42,560 --> 00:16:45,759
we recommend choosing n as a product of

371
00:16:45,759 --> 00:16:49,040
a power of 2 a small power of 3 and

372
00:16:49,040 --> 00:16:51,839
possibly a 5.

373
00:16:51,839 --> 00:16:55,279
if n is divisible by 3 or 5 then good

374
00:16:55,279 --> 00:16:58,160
strength is very useful

375
00:16:58,160 --> 00:17:01,040
for deciding the large modulus

376
00:17:01,040 --> 00:17:04,079
to utilizing to utilize the powerful

377
00:17:04,079 --> 00:17:07,520
32-bit arithmetic on cortisone 4

378
00:17:07,520 --> 00:17:09,919
we first have to decide do we want to

379
00:17:09,919 --> 00:17:12,160
reduce the coefficient ring before

380
00:17:12,160 --> 00:17:16,480
reducing the polynomial modulus or not

381
00:17:17,199 --> 00:17:19,039
if we decide to reduce the coefficient

382
00:17:19,039 --> 00:17:21,520
ring first then the maximum value is

383
00:17:21,520 --> 00:17:23,919
bounded by q times p

384
00:17:23,919 --> 00:17:25,280
if we reduce

385
00:17:25,280 --> 00:17:27,520
the polynomial modulus first then the

386
00:17:27,520 --> 00:17:31,440
maximum value is expounded by q times 2p

387
00:17:31,440 --> 00:17:33,760
minus 1.

388
00:17:33,760 --> 00:17:36,320
additionally we can also look at a small

389
00:17:36,320 --> 00:17:37,679
polynomial

390
00:17:37,679 --> 00:17:40,240
if the small polynomial is in fact a

391
00:17:40,240 --> 00:17:41,760
short polynomial

392
00:17:41,760 --> 00:17:44,720
we can replace p with w in the above

393
00:17:44,720 --> 00:17:46,720
conditions for determining a large

394
00:17:46,720 --> 00:17:49,679
modulus keyprime

395
00:17:50,160 --> 00:17:51,919
on the other hand

396
00:17:51,919 --> 00:17:55,360
if we decide to compute smgq

397
00:17:55,360 --> 00:17:58,400
then the size of entity is restricted as

398
00:17:58,400 --> 00:17:59,120
a

399
00:17:59,120 --> 00:18:02,880
diversity of q minus one

400
00:18:02,880 --> 00:18:04,880
we then choose an n for computing the

401
00:18:04,880 --> 00:18:06,799
convolution

402
00:18:06,799 --> 00:18:10,480
if the quotient n over d is small

403
00:18:10,480 --> 00:18:13,919
then after applying size d and d t

404
00:18:13,919 --> 00:18:16,000
multiplying n over d coefficient

405
00:18:16,000 --> 00:18:17,919
polynomials can be implemented

406
00:18:17,919 --> 00:18:20,559
efficiently

407
00:18:20,640 --> 00:18:23,520
for the size d and g key we'll apply

408
00:18:23,520 --> 00:18:25,440
clue to the fft for efficient

409
00:18:25,440 --> 00:18:28,000
computation

410
00:18:28,000 --> 00:18:31,440
for small radius computations

411
00:18:31,440 --> 00:18:33,200
the butterflies can be implemented

412
00:18:33,200 --> 00:18:34,559
efficiently

413
00:18:34,559 --> 00:18:37,039
for the large radishes computation

414
00:18:37,039 --> 00:18:39,039
will employ rather string

415
00:18:39,039 --> 00:18:42,400
for efficient computation

416
00:18:42,400 --> 00:18:44,559
during the implementations

417
00:18:44,559 --> 00:18:46,320
of the butterflies

418
00:18:46,320 --> 00:18:49,280
we find that dsp extension is very

419
00:18:49,280 --> 00:18:50,640
useful

420
00:18:50,640 --> 00:18:52,000
in particular

421
00:18:52,000 --> 00:18:53,760
there are instructions multiplying

422
00:18:53,760 --> 00:18:56,320
specific head words and there are

423
00:18:56,320 --> 00:18:57,679
instructions

424
00:18:57,679 --> 00:18:59,760
performing two hyper multiplications at

425
00:18:59,760 --> 00:19:02,080
a time

426
00:19:02,400 --> 00:19:04,799
we find that both of the approaches can

427
00:19:04,799 --> 00:19:06,880
be implemented efficiently on cartesian

428
00:19:06,880 --> 00:19:09,880
4.

429
00:19:10,080 --> 00:19:13,799
thank you for your attention

