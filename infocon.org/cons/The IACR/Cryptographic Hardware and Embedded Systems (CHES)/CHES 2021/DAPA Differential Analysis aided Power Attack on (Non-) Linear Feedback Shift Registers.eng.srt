1
00:00:01,360 --> 00:00:03,840
hi everyone my name is xiang ming and i

2
00:00:03,840 --> 00:00:05,680
will be presenting

3
00:00:05,680 --> 00:00:08,320
our work differential analysis aided

4
00:00:08,320 --> 00:00:11,759
power attack on non-linear feedback

5
00:00:11,759 --> 00:00:14,799
shift registers or dapa for short this

6
00:00:14,799 --> 00:00:17,119
is a joint work with dimanto and shivam

7
00:00:17,119 --> 00:00:20,000
from mtu

8
00:00:21,199 --> 00:00:22,560
so first i will talk about the

9
00:00:22,560 --> 00:00:24,240
background motivation

10
00:00:24,240 --> 00:00:27,439
followed by the main contribution the

11
00:00:27,439 --> 00:00:29,519
tapa

12
00:00:29,519 --> 00:00:32,479
makes the application of dapa on lr key

13
00:00:32,479 --> 00:00:33,280
mail

14
00:00:33,280 --> 00:00:37,520
and finally some experimental results

15
00:00:37,600 --> 00:00:41,120
so first the background motivation

16
00:00:41,120 --> 00:00:41,920
so

17
00:00:41,920 --> 00:00:44,640
differentiate analysis is the study of

18
00:00:44,640 --> 00:00:47,280
xor difference propagating through some

19
00:00:47,280 --> 00:00:48,719
function f

20
00:00:48,719 --> 00:00:50,480
so

21
00:00:50,480 --> 00:00:52,320
instead of considering the actual value

22
00:00:52,320 --> 00:00:54,879
we look at the xor difference of the

23
00:00:54,879 --> 00:00:56,000
inputs

24
00:00:56,000 --> 00:00:57,600
and also the actual difference of the

25
00:00:57,600 --> 00:00:58,800
output

26
00:00:58,800 --> 00:00:59,520
so

27
00:00:59,520 --> 00:01:01,280
the key thing of differential analysis

28
00:01:01,280 --> 00:01:03,760
is that adding constant value does not

29
00:01:03,760 --> 00:01:06,080
change the differential value because

30
00:01:06,080 --> 00:01:07,840
the same constant

31
00:01:07,840 --> 00:01:09,119
when we consider difference it will

32
00:01:09,119 --> 00:01:11,119
cancel each other out and we have the

33
00:01:11,119 --> 00:01:14,479
same input difference

34
00:01:15,600 --> 00:01:18,640
and for shift register

35
00:01:18,640 --> 00:01:19,680
we'll

36
00:01:19,680 --> 00:01:21,680
consider the shift register containing

37
00:01:21,680 --> 00:01:23,920
some sensitive information

38
00:01:23,920 --> 00:01:25,360
and

39
00:01:25,360 --> 00:01:27,920
the update function will

40
00:01:27,920 --> 00:01:30,720
extract some of the bits in to fit into

41
00:01:30,720 --> 00:01:31,680
this

42
00:01:31,680 --> 00:01:32,479
uh

43
00:01:32,479 --> 00:01:34,000
feedback function which could be a

44
00:01:34,000 --> 00:01:37,200
linear or non-linear feedback function

45
00:01:37,200 --> 00:01:38,880
and the output

46
00:01:38,880 --> 00:01:41,600
bit will be fed to the right side the

47
00:01:41,600 --> 00:01:43,200
rightmost position

48
00:01:43,200 --> 00:01:45,200
and all the b value will be shift to the

49
00:01:45,200 --> 00:01:46,159
left

50
00:01:46,159 --> 00:01:48,720
and the leftmost bit will be output

51
00:01:48,720 --> 00:01:51,200
as the keystream

52
00:01:51,200 --> 00:01:52,840
so

53
00:01:52,840 --> 00:01:55,119
for uh

54
00:01:55,119 --> 00:01:57,280
for some cases the

55
00:01:57,280 --> 00:02:00,159
nonce will be introduced to the

56
00:02:00,159 --> 00:02:01,920
shift register so

57
00:02:01,920 --> 00:02:04,479
besides the feedback function the

58
00:02:04,479 --> 00:02:07,119
non-speed will be xor to

59
00:02:07,119 --> 00:02:09,280
as part of the input to the

60
00:02:09,280 --> 00:02:11,840
internal state so

61
00:02:11,840 --> 00:02:13,680
the noise can be known or even

62
00:02:13,680 --> 00:02:15,599
controlled by the attacker but

63
00:02:15,599 --> 00:02:19,280
the secret information k is unknown so

64
00:02:19,280 --> 00:02:21,520
with the same k by different iv you

65
00:02:21,520 --> 00:02:23,840
result in different

66
00:02:23,840 --> 00:02:26,800
key stream output

67
00:02:28,239 --> 00:02:30,879
and for power analysis or power attack

68
00:02:30,879 --> 00:02:33,280
it's a form of side channel analysis

69
00:02:33,280 --> 00:02:34,400
where

70
00:02:34,400 --> 00:02:36,959
we'll use a prop to

71
00:02:36,959 --> 00:02:40,480
measure the power consumption during the

72
00:02:40,480 --> 00:02:43,200
the computation of the shift register

73
00:02:43,200 --> 00:02:44,000
and from the

74
00:02:44,000 --> 00:02:45,440
[Music]

75
00:02:45,440 --> 00:02:48,319
the power traces we will try to

76
00:02:48,319 --> 00:02:52,480
deduce some sensitive information of the

77
00:02:52,480 --> 00:02:54,480
of the shift register of what is being

78
00:02:54,480 --> 00:02:57,680
computed internally

79
00:02:57,680 --> 00:03:01,120
so in 2017 at corsair

80
00:03:01,120 --> 00:03:03,200
there is a differential power attack

81
00:03:03,200 --> 00:03:06,560
proposed so you use a

82
00:03:06,560 --> 00:03:08,560
well-known observation that more power

83
00:03:08,560 --> 00:03:10,879
is needed to flip

84
00:03:10,879 --> 00:03:14,400
a bit register when the value changes

85
00:03:14,400 --> 00:03:16,560
so

86
00:03:16,800 --> 00:03:19,599
to the eye high level idea of the attack

87
00:03:19,599 --> 00:03:21,280
is to choose two ivs with some

88
00:03:21,280 --> 00:03:22,480
difference at

89
00:03:22,480 --> 00:03:24,799
some bit position and we run both

90
00:03:24,799 --> 00:03:26,799
computations and compare the power

91
00:03:26,799 --> 00:03:28,000
difference

92
00:03:28,000 --> 00:03:30,879
and from the power difference we can

93
00:03:30,879 --> 00:03:33,840
learn some neighboring bit relations

94
00:03:33,840 --> 00:03:36,239
so to give an example

95
00:03:36,239 --> 00:03:39,599
suppose that the original computation

96
00:03:39,599 --> 00:03:40,400
the

97
00:03:40,400 --> 00:03:43,440
ivs input iv value is zero

98
00:03:43,440 --> 00:03:44,560
then

99
00:03:44,560 --> 00:03:47,360
the next bit should be zero right and

100
00:03:47,360 --> 00:03:49,280
everything is shifted to the left so

101
00:03:49,280 --> 00:03:51,040
from here you can see that

102
00:03:51,040 --> 00:03:53,200
there are two bit registers that changes

103
00:03:53,200 --> 00:03:54,640
its value

104
00:03:54,640 --> 00:03:56,480
so

105
00:03:56,480 --> 00:03:57,519
uh

106
00:03:57,519 --> 00:03:58,720
we have a

107
00:03:58,720 --> 00:04:00,560
power increment

108
00:04:00,560 --> 00:04:02,239
power consumption increment due to these

109
00:04:02,239 --> 00:04:04,159
two bit registers

110
00:04:04,159 --> 00:04:05,920
and for another instance where we

111
00:04:05,920 --> 00:04:07,439
introduce a difference

112
00:04:07,439 --> 00:04:10,400
so now the iv becomes one then

113
00:04:10,400 --> 00:04:12,959
the input bit null becomes one and as a

114
00:04:12,959 --> 00:04:14,879
result there's a three

115
00:04:14,879 --> 00:04:18,238
bit register changing their values

116
00:04:18,238 --> 00:04:19,440
so

117
00:04:19,440 --> 00:04:21,918
for the later run we'll expect a higher

118
00:04:21,918 --> 00:04:25,040
power consumption than the original one

119
00:04:25,040 --> 00:04:26,800
and this is because

120
00:04:26,800 --> 00:04:29,840
the original computation has

121
00:04:29,840 --> 00:04:32,320
the same value for these two bits right

122
00:04:32,320 --> 00:04:34,080
whereas because of the difference

123
00:04:34,080 --> 00:04:36,160
introduced we have a different value

124
00:04:36,160 --> 00:04:37,120
here

125
00:04:37,120 --> 00:04:39,440
so but observing by observing an

126
00:04:39,440 --> 00:04:41,440
increase in power consumption we can

127
00:04:41,440 --> 00:04:43,280
deduce at this two bit

128
00:04:43,280 --> 00:04:46,240
in the original computation are equal

129
00:04:46,240 --> 00:04:49,040
and we can simply generalize it

130
00:04:49,040 --> 00:04:50,960
that if we see an increment we know that

131
00:04:50,960 --> 00:04:54,320
the two b's are equal and the decrement

132
00:04:54,320 --> 00:04:55,440
will be

133
00:04:55,440 --> 00:04:59,440
imply that the two bits are not equal

134
00:04:59,919 --> 00:05:02,720
and although we may not know the actual

135
00:05:02,720 --> 00:05:04,560
value

136
00:05:04,560 --> 00:05:06,639
this bit relation information help us

137
00:05:06,639 --> 00:05:08,720
reduce the search base

138
00:05:08,720 --> 00:05:10,400
so to give an example suppose we have

139
00:05:10,400 --> 00:05:11,840
these eight bit

140
00:05:11,840 --> 00:05:15,360
shift registers and we know all the

141
00:05:15,360 --> 00:05:16,479
seven

142
00:05:16,479 --> 00:05:18,880
bit relations

143
00:05:18,880 --> 00:05:20,880
then by guessing the first bit to be

144
00:05:20,880 --> 00:05:23,759
zero or one we actually determine the

145
00:05:23,759 --> 00:05:26,320
entire internal state because

146
00:05:26,320 --> 00:05:27,919
if it's equal then the next bit has to

147
00:05:27,919 --> 00:05:29,680
be the same as previous one if it's not

148
00:05:29,680 --> 00:05:33,039
then we flip the bits

149
00:05:33,440 --> 00:05:35,840
so from a two to the eighth

150
00:05:35,840 --> 00:05:37,440
internal state guessing now we can

151
00:05:37,440 --> 00:05:38,960
reduce it

152
00:05:38,960 --> 00:05:40,720
to simply a

153
00:05:40,720 --> 00:05:43,680
two-state guessing

154
00:05:44,639 --> 00:05:45,520
so

155
00:05:45,520 --> 00:05:47,919
a key meal is a

156
00:05:47,919 --> 00:05:50,240
fresh routine scheme that was proposed

157
00:05:50,240 --> 00:05:52,000
in 2016

158
00:05:52,000 --> 00:05:53,120
that sec

159
00:05:53,120 --> 00:05:55,120
it claims to be

160
00:05:55,120 --> 00:05:57,120
side channel secure

161
00:05:57,120 --> 00:05:58,080
and

162
00:05:58,080 --> 00:05:59,280
how it works

163
00:05:59,280 --> 00:06:02,000
in general is to have the

164
00:06:02,000 --> 00:06:03,759
128 bit secret key

165
00:06:03,759 --> 00:06:06,639
loaded into these four fan blades

166
00:06:06,639 --> 00:06:07,840
which is uh which are the

167
00:06:07,840 --> 00:06:08,960
[Music]

168
00:06:08,960 --> 00:06:11,120
non-linear

169
00:06:11,120 --> 00:06:13,919
feedback shift registers

170
00:06:13,919 --> 00:06:15,199
and

171
00:06:15,199 --> 00:06:16,800
during the updates

172
00:06:16,800 --> 00:06:20,240
the ivs are introduced to the each of

173
00:06:20,240 --> 00:06:22,880
the shift registers and

174
00:06:22,880 --> 00:06:25,600
the iv bits are in

175
00:06:25,600 --> 00:06:27,199
all the iv bit

176
00:06:27,199 --> 00:06:29,280
xor to the four registers are

177
00:06:29,280 --> 00:06:30,560
independent so

178
00:06:30,560 --> 00:06:34,160
say ib iv0 is here then iv1 is the next

179
00:06:34,160 --> 00:06:36,479
one mv2 iv3

180
00:06:36,479 --> 00:06:38,000
and then iv4

181
00:06:38,000 --> 00:06:39,360
again so

182
00:06:39,360 --> 00:06:43,039
they just keep rotating around

183
00:06:43,039 --> 00:06:44,160
and

184
00:06:44,160 --> 00:06:44,830
using the

185
00:06:44,830 --> 00:06:46,560
[Music]

186
00:06:46,560 --> 00:06:49,280
dpa that we described previously

187
00:06:49,280 --> 00:06:51,599
by injecting the iv difference at the

188
00:06:51,599 --> 00:06:54,240
right position we are able to deduce all

189
00:06:54,240 --> 00:06:55,360
the

190
00:06:55,360 --> 00:06:57,680
big relation within each of these shift

191
00:06:57,680 --> 00:06:59,039
registers

192
00:06:59,039 --> 00:07:01,759
and all that is left is to guess one bit

193
00:07:01,759 --> 00:07:04,160
in each register to get the

194
00:07:04,160 --> 00:07:06,880
entire internal state and then roll back

195
00:07:06,880 --> 00:07:09,440
to the initial state to obtain the 128

196
00:07:09,440 --> 00:07:10,800
bit secret key

197
00:07:10,800 --> 00:07:13,120
so one can recover the full one to a bit

198
00:07:13,120 --> 00:07:13,919
key

199
00:07:13,919 --> 00:07:17,440
with just four bit of guessing

200
00:07:17,440 --> 00:07:19,280
so after

201
00:07:19,280 --> 00:07:21,919
so after this attack was proposed

202
00:07:21,919 --> 00:07:23,360
the designer

203
00:07:23,360 --> 00:07:24,960
came up with an improved version of the

204
00:07:24,960 --> 00:07:27,280
key mail called the lrq email

205
00:07:27,280 --> 00:07:29,120
so instead of

206
00:07:29,120 --> 00:07:32,639
each ivb up activate one of the

207
00:07:32,639 --> 00:07:35,440
shift register now every update every iv

208
00:07:35,440 --> 00:07:36,400
bits

209
00:07:36,400 --> 00:07:38,240
will update all the four shift registers

210
00:07:38,240 --> 00:07:40,000
simultaneously

211
00:07:40,000 --> 00:07:40,800
so

212
00:07:40,800 --> 00:07:43,520
as a result there's a combined

213
00:07:43,520 --> 00:07:46,560
power consumption difference so

214
00:07:46,560 --> 00:07:49,199
for example if all the four bits

215
00:07:49,199 --> 00:07:50,800
or the four shift register has equal

216
00:07:50,800 --> 00:07:53,039
relation then actually there's a four

217
00:07:53,039 --> 00:07:55,759
time search in the power difference

218
00:07:55,759 --> 00:07:57,039
and

219
00:07:57,039 --> 00:07:57,759
for

220
00:07:57,759 --> 00:08:00,160
most of the cases for instance

221
00:08:00,160 --> 00:08:01,919
where there are two equal and two not

222
00:08:01,919 --> 00:08:04,080
equal be relation

223
00:08:04,080 --> 00:08:05,680
then we will not observe any power

224
00:08:05,680 --> 00:08:06,960
difference

225
00:08:06,960 --> 00:08:08,400
but the main thing here is that it

226
00:08:08,400 --> 00:08:10,560
creates some

227
00:08:10,560 --> 00:08:13,280
ambiguity with in terms of the internal

228
00:08:13,280 --> 00:08:14,960
state because when we see there's no

229
00:08:14,960 --> 00:08:16,000
power

230
00:08:16,000 --> 00:08:17,440
difference

231
00:08:17,440 --> 00:08:19,199
we know that is two equals and two not

232
00:08:19,199 --> 00:08:20,639
equal but we do not know the

233
00:08:20,639 --> 00:08:23,360
distribution of it we do not know which

234
00:08:23,360 --> 00:08:25,039
shift register

235
00:08:25,039 --> 00:08:26,960
have the equal and which one has the

236
00:08:26,960 --> 00:08:28,400
non-equal

237
00:08:28,400 --> 00:08:31,199
and because of this ambiguity

238
00:08:31,199 --> 00:08:34,159
the search phase becomes larger and

239
00:08:34,159 --> 00:08:37,599
hence the designer claims 67.9

240
00:08:37,599 --> 00:08:40,159
with security against

241
00:08:40,159 --> 00:08:43,120
power analysis

242
00:08:43,519 --> 00:08:46,240
so the motivation of work is we first

243
00:08:46,240 --> 00:08:47,680
observe that

244
00:08:47,680 --> 00:08:50,800
this 67.9 bit security claim is actually

245
00:08:50,800 --> 00:08:51,519
an

246
00:08:51,519 --> 00:08:53,600
average upper bound rather than a

247
00:08:53,600 --> 00:08:55,760
guaranteed lower bound

248
00:08:55,760 --> 00:08:58,080
and also the original dpa

249
00:08:58,080 --> 00:08:59,760
did not consider

250
00:08:59,760 --> 00:09:02,320
the feedback function is being used

251
00:09:02,320 --> 00:09:04,880
so a natural question is whether we can

252
00:09:04,880 --> 00:09:06,800
obtain more information

253
00:09:06,800 --> 00:09:08,640
if we were to consider the feedback

254
00:09:08,640 --> 00:09:10,160
functions and

255
00:09:10,160 --> 00:09:11,920
let the differential propagates deeper

256
00:09:11,920 --> 00:09:14,720
into the shift registers

257
00:09:14,720 --> 00:09:16,880
so because of

258
00:09:16,880 --> 00:09:18,640
this motivation we

259
00:09:18,640 --> 00:09:20,560
propose this new

260
00:09:20,560 --> 00:09:24,239
attack techniques called the tapa

261
00:09:24,880 --> 00:09:27,920
so let the

262
00:09:28,000 --> 00:09:30,399
the main idea is to let the differential

263
00:09:30,399 --> 00:09:31,920
propagates deeper into the shift

264
00:09:31,920 --> 00:09:33,040
registers

265
00:09:33,040 --> 00:09:34,880
and we study the various differential

266
00:09:34,880 --> 00:09:37,360
pattern and their expected powers

267
00:09:37,360 --> 00:09:40,320
and from there we can deduce more

268
00:09:40,320 --> 00:09:42,880
more big relation information

269
00:09:42,880 --> 00:09:44,959
so to reuse the previous examples just

270
00:09:44,959 --> 00:09:45,760
now

271
00:09:45,760 --> 00:09:47,040
so

272
00:09:47,040 --> 00:09:48,720
upon the first instance where the

273
00:09:48,720 --> 00:09:50,480
defense is introduced

274
00:09:50,480 --> 00:09:52,880
we can get this speed relations here

275
00:09:52,880 --> 00:09:53,600
right

276
00:09:53,600 --> 00:09:55,839
but if we were to let it propagate for

277
00:09:55,839 --> 00:09:58,480
another round another

278
00:09:58,480 --> 00:10:00,240
update

279
00:10:00,240 --> 00:10:01,440
then

280
00:10:01,440 --> 00:10:04,640
here we can see that there are

281
00:10:04,640 --> 00:10:06,800
uh there's another further increment in

282
00:10:06,800 --> 00:10:09,519
the power difference right here there is

283
00:10:09,519 --> 00:10:11,360
two difference and here there is four

284
00:10:11,360 --> 00:10:14,800
difference four differences

285
00:10:14,800 --> 00:10:16,079
sorry

286
00:10:16,079 --> 00:10:17,440
so from there

287
00:10:17,440 --> 00:10:19,519
we can deduce that the second bit

288
00:10:19,519 --> 00:10:21,600
relation is also equal

289
00:10:21,600 --> 00:10:23,760
whereas when we consider another case

290
00:10:23,760 --> 00:10:24,959
where

291
00:10:24,959 --> 00:10:26,399
they are not equal

292
00:10:26,399 --> 00:10:29,760
then we see that there is no

293
00:10:29,760 --> 00:10:32,240
uh power difference

294
00:10:32,240 --> 00:10:34,240
between these two computations

295
00:10:34,240 --> 00:10:35,360
so

296
00:10:35,360 --> 00:10:36,959
besides the original difference if we

297
00:10:36,959 --> 00:10:38,480
propagate further

298
00:10:38,480 --> 00:10:41,120
by observing whether there is a double

299
00:10:41,120 --> 00:10:43,839
power increment or no power increment we

300
00:10:43,839 --> 00:10:45,519
can further deduce

301
00:10:45,519 --> 00:10:47,519
information about another big relation

302
00:10:47,519 --> 00:10:51,440
there so that's the general idea

303
00:10:51,440 --> 00:10:52,880
and besides this

304
00:10:52,880 --> 00:10:54,880
we can also look at the propagation of

305
00:10:54,880 --> 00:10:56,160
non-linear

306
00:10:56,160 --> 00:10:57,440
operations

307
00:10:57,440 --> 00:10:58,959
so

308
00:10:58,959 --> 00:11:00,560
and for non

309
00:11:00,560 --> 00:11:02,560
non-linear operations sometimes we can

310
00:11:02,560 --> 00:11:04,800
even

311
00:11:04,800 --> 00:11:06,399
gain the information about the bit

312
00:11:06,399 --> 00:11:08,720
values itself

313
00:11:08,720 --> 00:11:11,680
so let's consider this function

314
00:11:11,680 --> 00:11:12,880
where y

315
00:11:12,880 --> 00:11:15,360
y is the computate

316
00:11:15,360 --> 00:11:17,200
is computed as follows

317
00:11:17,200 --> 00:11:20,000
and let's say x 2 has some difference

318
00:11:20,000 --> 00:11:21,040
there

319
00:11:21,040 --> 00:11:22,959
so

320
00:11:22,959 --> 00:11:24,000
we can

321
00:11:24,000 --> 00:11:26,880
see that if x 0 is 1

322
00:11:26,880 --> 00:11:29,040
then it must implies that this has a

323
00:11:29,040 --> 00:11:30,800
difference

324
00:11:30,800 --> 00:11:32,880
the n operation x

325
00:11:32,880 --> 00:11:36,240
x0 and x2

326
00:11:36,240 --> 00:11:38,000
and

327
00:11:38,000 --> 00:11:40,079
from there if there is a difference here

328
00:11:40,079 --> 00:11:42,079
then the x2 difference will cancel with

329
00:11:42,079 --> 00:11:44,240
this difference and we'll observe that

330
00:11:44,240 --> 00:11:47,279
there's no difference in the new bit y

331
00:11:47,279 --> 00:11:48,399
so therefore

332
00:11:48,399 --> 00:11:50,399
we have this

333
00:11:50,399 --> 00:11:52,800
relation between the difference and the

334
00:11:52,800 --> 00:11:54,320
x0 value

335
00:11:54,320 --> 00:11:56,000
and the converse is the same if we see

336
00:11:56,000 --> 00:11:57,920
that y has a difference

337
00:11:57,920 --> 00:12:01,279
then it it must be the case that x0 has

338
00:12:01,279 --> 00:12:03,920
has the value 0 then

339
00:12:03,920 --> 00:12:06,560
so we are able to we are also able to

340
00:12:06,560 --> 00:12:09,200
detail some big values when

341
00:12:09,200 --> 00:12:12,720
non-linear operations are involved

342
00:12:14,399 --> 00:12:15,839
and

343
00:12:15,839 --> 00:12:18,639
the high level description of dapa

344
00:12:18,639 --> 00:12:20,399
so we have three steps the first step is

345
00:12:20,399 --> 00:12:22,000
an offline

346
00:12:22,000 --> 00:12:24,320
phase where we choose the differential

347
00:12:24,320 --> 00:12:26,480
pattern that we want to use

348
00:12:26,480 --> 00:12:28,959
to reveal the most information

349
00:12:28,959 --> 00:12:31,040
and the next step is the online phase

350
00:12:31,040 --> 00:12:33,680
where we introduce the differences

351
00:12:33,680 --> 00:12:37,279
and we collect the power traces

352
00:12:37,680 --> 00:12:38,959
and lastly the

353
00:12:38,959 --> 00:12:40,320
first step

354
00:12:40,320 --> 00:12:42,800
is an offline phase again where

355
00:12:42,800 --> 00:12:43,600
we

356
00:12:43,600 --> 00:12:45,600
tabulate all these power traces see the

357
00:12:45,600 --> 00:12:46,959
differences

358
00:12:46,959 --> 00:12:49,279
and deduce the information about the

359
00:12:49,279 --> 00:12:52,680
internal state

360
00:12:53,440 --> 00:12:55,279
so now we talk about the application of

361
00:12:55,279 --> 00:12:58,480
it on our key mail

362
00:12:58,480 --> 00:13:00,160
so first we

363
00:13:00,160 --> 00:13:00,959
uh

364
00:13:00,959 --> 00:13:04,240
replace the loop of the error coming for

365
00:13:04,240 --> 00:13:06,880
easier reference so

366
00:13:06,880 --> 00:13:09,920
the we just rewrite this for

367
00:13:09,920 --> 00:13:12,160
uh shift register into the four rows

368
00:13:12,160 --> 00:13:13,600
here

369
00:13:13,600 --> 00:13:14,480
okay

370
00:13:14,480 --> 00:13:17,680
so the iv every iv will be updating all

371
00:13:17,680 --> 00:13:18,880
the four

372
00:13:18,880 --> 00:13:22,639
shift register simultaneously

373
00:13:22,720 --> 00:13:25,279
so the core idea of the power on llc mu

374
00:13:25,279 --> 00:13:27,440
is to let this iv difference propagate

375
00:13:27,440 --> 00:13:29,279
deeper into the

376
00:13:29,279 --> 00:13:30,800
internal states

377
00:13:30,800 --> 00:13:31,880
so

378
00:13:31,880 --> 00:13:35,120
first uh at the first instant where the

379
00:13:35,120 --> 00:13:36,480
difference is

380
00:13:36,480 --> 00:13:39,199
introduced then all four are updated and

381
00:13:39,199 --> 00:13:41,519
we may encounter some

382
00:13:41,519 --> 00:13:43,839
uh ambiguous

383
00:13:43,839 --> 00:13:45,839
uh relations right we do not know which

384
00:13:45,839 --> 00:13:48,560
is equal and which is not equal but if

385
00:13:48,560 --> 00:13:50,560
we let it propagates further into the

386
00:13:50,560 --> 00:13:51,760
state

387
00:13:51,760 --> 00:13:54,240
because some of because the feedback

388
00:13:54,240 --> 00:13:55,920
functions are different

389
00:13:55,920 --> 00:13:57,839
some of them will get set back earlier

390
00:13:57,839 --> 00:14:00,800
than the other so for instance here f4

391
00:14:00,800 --> 00:14:02,800
will feedback this different before the

392
00:14:02,800 --> 00:14:05,040
rest of them

393
00:14:05,040 --> 00:14:07,440
and as a result we managed to isolate a

394
00:14:07,440 --> 00:14:10,000
difference

395
00:14:10,160 --> 00:14:13,199
a single bit difference in one register

396
00:14:13,199 --> 00:14:15,519
so from there if we focus on this point

397
00:14:15,519 --> 00:14:16,399
then

398
00:14:16,399 --> 00:14:18,720
we are able to obtain an unambiguous bit

399
00:14:18,720 --> 00:14:20,399
relation

400
00:14:20,399 --> 00:14:23,040
of the internet state

401
00:14:23,040 --> 00:14:25,600
and because for the setback position is

402
00:14:25,600 --> 00:14:28,160
dependent on the

403
00:14:28,160 --> 00:14:31,120
update iteration i

404
00:14:31,120 --> 00:14:33,760
the feedback maybe may land on other

405
00:14:33,760 --> 00:14:36,480
registered letters also so

406
00:14:36,480 --> 00:14:38,720
for example if the difference was

407
00:14:38,720 --> 00:14:41,360
introduced at ib0 then

408
00:14:41,360 --> 00:14:43,040
the feedback was over here if the

409
00:14:43,040 --> 00:14:45,120
feedback is at iv one

410
00:14:45,120 --> 00:14:46,000
then

411
00:14:46,000 --> 00:14:47,199
this difference

412
00:14:47,199 --> 00:14:48,959
will be feedback at the

413
00:14:48,959 --> 00:14:50,320
register one

414
00:14:50,320 --> 00:14:52,240
and iv2 will fit

415
00:14:52,240 --> 00:14:54,320
the register two and so on

416
00:14:54,320 --> 00:14:56,959
so by injecting the difference at

417
00:14:56,959 --> 00:14:59,279
different iv position

418
00:14:59,279 --> 00:15:01,360
we have the feedback bit landed at

419
00:15:01,360 --> 00:15:03,600
different position to let us know more

420
00:15:03,600 --> 00:15:05,199
information about

421
00:15:05,199 --> 00:15:08,880
the other shift registers as well

422
00:15:09,760 --> 00:15:10,560
so

423
00:15:10,560 --> 00:15:11,600
this is a

424
00:15:11,600 --> 00:15:14,560
illustration of the entire 1 to 8 bit

425
00:15:14,560 --> 00:15:16,720
internal state

426
00:15:16,720 --> 00:15:17,440
so

427
00:15:17,440 --> 00:15:18,959
after we inject the first difference

428
00:15:18,959 --> 00:15:20,480
we'll gain some

429
00:15:20,480 --> 00:15:23,199
bit relation here so i didn't only have

430
00:15:23,199 --> 00:15:25,600
three color here so we have these three

431
00:15:25,600 --> 00:15:27,040
big relation

432
00:15:27,040 --> 00:15:29,360
if we inject the difference at another

433
00:15:29,360 --> 00:15:32,720
position we gain some other information

434
00:15:32,720 --> 00:15:34,720
same for the third one and the fourth

435
00:15:34,720 --> 00:15:35,600
one

436
00:15:35,600 --> 00:15:36,560
and

437
00:15:36,560 --> 00:15:38,320
from all this

438
00:15:38,320 --> 00:15:41,120
relation we can also detail small

439
00:15:41,120 --> 00:15:42,800
information which is highlighted in

440
00:15:42,800 --> 00:15:43,920
black here

441
00:15:43,920 --> 00:15:46,160
so for example for this one

442
00:15:46,160 --> 00:15:47,920
because we know the combined power

443
00:15:47,920 --> 00:15:49,600
difference from the for the entire

444
00:15:49,600 --> 00:15:50,639
column

445
00:15:50,639 --> 00:15:53,040
so if we know the

446
00:15:53,040 --> 00:15:55,440
relation for this three position

447
00:15:55,440 --> 00:15:57,839
we can conclude the b relation for the

448
00:15:57,839 --> 00:15:59,440
last one

449
00:15:59,440 --> 00:16:00,240
right

450
00:16:00,240 --> 00:16:01,759
so

451
00:16:01,759 --> 00:16:02,639
if we

452
00:16:02,639 --> 00:16:03,140
do the

453
00:16:03,140 --> 00:16:05,040
[Music]

454
00:16:05,040 --> 00:16:07,040
difference injection for four different

455
00:16:07,040 --> 00:16:09,199
iterations we obtain these relations

456
00:16:09,199 --> 00:16:10,880
here

457
00:16:10,880 --> 00:16:13,279
and because it has a cycle zero

458
00:16:13,279 --> 00:16:15,920
if we let this propagate forward and

459
00:16:15,920 --> 00:16:18,320
then repeat this uh

460
00:16:18,320 --> 00:16:21,040
difference again we get another set of v

461
00:16:21,040 --> 00:16:22,480
relations

462
00:16:22,480 --> 00:16:24,000
and again we can deduce some more

463
00:16:24,000 --> 00:16:26,079
information

464
00:16:26,079 --> 00:16:28,560
when we combine these two together so if

465
00:16:28,560 --> 00:16:30,560
we know 3 out of 4

466
00:16:30,560 --> 00:16:32,560
then we know the remaining

467
00:16:32,560 --> 00:16:34,880
b relations

468
00:16:34,880 --> 00:16:36,480
and here we can see that

469
00:16:36,480 --> 00:16:38,480
we actually obtain a

470
00:16:38,480 --> 00:16:41,920
length six sliding window of information

471
00:16:41,920 --> 00:16:44,079
about the internet relations

472
00:16:44,079 --> 00:16:46,160
and

473
00:16:46,160 --> 00:16:48,399
and using this we can simply

474
00:16:48,399 --> 00:16:50,399
keep repeating the process for

475
00:16:50,399 --> 00:16:52,160
the subsequent

476
00:16:52,160 --> 00:16:54,399
iv bit position and then eventually we

477
00:16:54,399 --> 00:16:56,240
obtain the

478
00:16:56,240 --> 00:16:58,399
bit relation for the entire internal

479
00:16:58,399 --> 00:17:00,639
state

480
00:17:01,839 --> 00:17:03,759
so to summarize

481
00:17:03,759 --> 00:17:06,400
with 36 chosen ivs we are

482
00:17:06,400 --> 00:17:08,880
actually able to recover

483
00:17:08,880 --> 00:17:11,439
the full internal state at some clock

484
00:17:11,439 --> 00:17:12,480
cycle

485
00:17:12,480 --> 00:17:15,199
and all is left is to guess one bit from

486
00:17:15,199 --> 00:17:16,959
each registers

487
00:17:16,959 --> 00:17:19,359
and we'll get the whole internal state

488
00:17:19,359 --> 00:17:21,119
and we can roll back to the initial

489
00:17:21,119 --> 00:17:23,520
state to recover the secret key

490
00:17:23,520 --> 00:17:28,079
so it's a four bit secret key guessing

491
00:17:28,079 --> 00:17:31,679
and among the 128 bit iv we only use the

492
00:17:31,679 --> 00:17:33,280
first 36

493
00:17:33,280 --> 00:17:35,600
bits to introduce the differences and

494
00:17:35,600 --> 00:17:38,320
for the next 11 bits we fix them as

495
00:17:38,320 --> 00:17:40,080
constant to avoid

496
00:17:40,080 --> 00:17:41,280
having any

497
00:17:41,280 --> 00:17:43,440
additional differences introduced to the

498
00:17:43,440 --> 00:17:44,559
state

499
00:17:44,559 --> 00:17:46,880
while we are propagating it forward

500
00:17:46,880 --> 00:17:48,160
so

501
00:17:48,160 --> 00:17:50,160
even with this fixed bits we still have

502
00:17:50,160 --> 00:17:52,080
81 bits of freedom

503
00:17:52,080 --> 00:17:54,080
to generate similar power tracers to

504
00:17:54,080 --> 00:17:56,160
filter the noise because

505
00:17:56,160 --> 00:17:57,679
when we vary the

506
00:17:57,679 --> 00:18:00,799
remaining 81 bits it does not change the

507
00:18:00,799 --> 00:18:03,120
differential pattern and we are still

508
00:18:03,120 --> 00:18:05,120
we can still collect the same

509
00:18:05,120 --> 00:18:07,360
power trace

510
00:18:07,360 --> 00:18:11,199
while respecting the nonce uniqueness

511
00:18:12,160 --> 00:18:13,760
so finally i'll talk about the

512
00:18:13,760 --> 00:18:16,160
experimental results

513
00:18:16,160 --> 00:18:18,640
so this is the setup that we have

514
00:18:18,640 --> 00:18:19,600
and

515
00:18:19,600 --> 00:18:22,240
we are using a 32-bit arm

516
00:18:22,240 --> 00:18:23,600
for our

517
00:18:23,600 --> 00:18:25,280
very uh

518
00:18:25,280 --> 00:18:27,679
verification so the

519
00:18:27,679 --> 00:18:29,280
instruction that we're targeting is the

520
00:18:29,280 --> 00:18:30,960
move instruction

521
00:18:30,960 --> 00:18:32,080
where the

522
00:18:32,080 --> 00:18:34,400
shift register gets updated and we

523
00:18:34,400 --> 00:18:35,919
essentially are trying to get the

524
00:18:35,919 --> 00:18:37,840
hamming distance leakage

525
00:18:37,840 --> 00:18:39,919
there

526
00:18:39,919 --> 00:18:42,640
so with the first iv

527
00:18:42,640 --> 00:18:45,679
we will collect the power trace

528
00:18:45,679 --> 00:18:47,200
and with the second iv we'll call it

529
00:18:47,200 --> 00:18:49,280
another power trace

530
00:18:49,280 --> 00:18:50,720
and

531
00:18:50,720 --> 00:18:52,080
by

532
00:18:52,080 --> 00:18:54,160
focusing on the

533
00:18:54,160 --> 00:18:56,240
timing where the move instruction is

534
00:18:56,240 --> 00:18:57,440
being done

535
00:18:57,440 --> 00:18:59,679
we are able to collect the

536
00:18:59,679 --> 00:19:02,320
hamming distance for every

537
00:19:02,320 --> 00:19:04,720
update

538
00:19:06,080 --> 00:19:08,080
and here is a leakage profiling that we

539
00:19:08,080 --> 00:19:10,160
have obtained

540
00:19:10,160 --> 00:19:13,840
because for lrk male we have

541
00:19:13,840 --> 00:19:15,200
four registers being updated

542
00:19:15,200 --> 00:19:17,679
simultaneously so the possible hamming

543
00:19:17,679 --> 00:19:19,679
distance can vary from minus four to

544
00:19:19,679 --> 00:19:21,360
four we have

545
00:19:21,360 --> 00:19:22,880
there are nine possible hamming

546
00:19:22,880 --> 00:19:24,400
distances

547
00:19:24,400 --> 00:19:25,200
so

548
00:19:25,200 --> 00:19:27,600
here from this diagram we can see that

549
00:19:27,600 --> 00:19:30,480
we are able to identify the hamming

550
00:19:30,480 --> 00:19:31,840
distance

551
00:19:31,840 --> 00:19:33,520
having distances

552
00:19:33,520 --> 00:19:35,919
clearly so we can distinguish

553
00:19:35,919 --> 00:19:38,480
whether is it -4 minus 3

554
00:19:38,480 --> 00:19:40,160
minus 2 or minus 1 and so on and so

555
00:19:40,160 --> 00:19:42,400
forth

556
00:19:42,400 --> 00:19:44,480
and another thing that we want to

557
00:19:44,480 --> 00:19:46,160
identify is the

558
00:19:46,160 --> 00:19:48,160
sign of the difference whether it's an

559
00:19:48,160 --> 00:19:50,320
increment or the decrement

560
00:19:50,320 --> 00:19:51,760
so

561
00:19:51,760 --> 00:19:54,000
we first did a simulation

562
00:19:54,000 --> 00:19:56,480
where the dotted line you see here

563
00:19:56,480 --> 00:19:58,240
here is the

564
00:19:58,240 --> 00:19:59,760
power difference that we expect so here

565
00:19:59,760 --> 00:20:01,679
there's no power difference and minus

566
00:20:01,679 --> 00:20:03,280
one and minus one

567
00:20:03,280 --> 00:20:05,600
and in our real measurement we can also

568
00:20:05,600 --> 00:20:07,360
observe

569
00:20:07,360 --> 00:20:09,200
the same spike

570
00:20:09,200 --> 00:20:12,159
at the place that we expect it to have

571
00:20:12,159 --> 00:20:12,880
so

572
00:20:12,880 --> 00:20:14,960
which means we can actually identify

573
00:20:14,960 --> 00:20:16,640
both the sine

574
00:20:16,640 --> 00:20:20,840
and the hamming distance

575
00:20:22,159 --> 00:20:24,020
so some practical challenge

576
00:20:24,020 --> 00:20:25,600
[Music]

577
00:20:25,600 --> 00:20:28,080
our setup is sensitive to the noise to

578
00:20:28,080 --> 00:20:30,799
noise and the sign is harder to recover

579
00:20:30,799 --> 00:20:32,559
than hamming distance

580
00:20:32,559 --> 00:20:35,520
but still keep recovery is possible

581
00:20:35,520 --> 00:20:38,000
and we can just discard the noisy traces

582
00:20:38,000 --> 00:20:40,880
and repeat the experiment for the new iv

583
00:20:40,880 --> 00:20:42,880
and as you can see just now we have 81

584
00:20:42,880 --> 00:20:46,000
bits of freedom so there's a lot of

585
00:20:46,000 --> 00:20:49,679
iv that we can play with and

586
00:20:49,679 --> 00:20:53,679
even if any of the sign is inconclusive

587
00:20:53,679 --> 00:20:56,000
we can simply guess the sign by spending

588
00:20:56,000 --> 00:20:59,440
one more bit of computation

589
00:21:01,120 --> 00:21:03,360
and also

590
00:21:03,360 --> 00:21:06,480
by using the sliding window approach

591
00:21:06,480 --> 00:21:09,840
we can also try to correct some of the

592
00:21:09,840 --> 00:21:11,440
error information that we obtained

593
00:21:11,440 --> 00:21:12,880
previously

594
00:21:12,880 --> 00:21:14,960
and one key

595
00:21:14,960 --> 00:21:16,480
thing about

596
00:21:16,480 --> 00:21:17,560
dapa is that the

597
00:21:17,560 --> 00:21:18,960
[Music]

598
00:21:18,960 --> 00:21:21,440
analysis for each ivs are independent of

599
00:21:21,440 --> 00:21:22,799
each other so

600
00:21:22,799 --> 00:21:25,360
there's no there's no snowballing effect

601
00:21:25,360 --> 00:21:28,080
even when any of the

602
00:21:28,080 --> 00:21:30,400
iteration or the analysis that we've

603
00:21:30,400 --> 00:21:32,720
done is inconclusive

604
00:21:32,720 --> 00:21:34,400
in fact

605
00:21:34,400 --> 00:21:35,919
there are times where

606
00:21:35,919 --> 00:21:37,760
the information gains

607
00:21:37,760 --> 00:21:40,240
the big relation gain are overlapping

608
00:21:40,240 --> 00:21:42,640
with each other for different ivs so

609
00:21:42,640 --> 00:21:45,120
this help us cross check and even

610
00:21:45,120 --> 00:21:47,679
have early detect early detection that

611
00:21:47,679 --> 00:21:49,840
any of our results are

612
00:21:49,840 --> 00:21:52,240
inaccurate

613
00:21:52,240 --> 00:21:55,039
so that's all for my presentation thank

614
00:21:55,039 --> 00:21:58,520
you for your attention

615
00:21:59,520 --> 00:22:01,600
you

