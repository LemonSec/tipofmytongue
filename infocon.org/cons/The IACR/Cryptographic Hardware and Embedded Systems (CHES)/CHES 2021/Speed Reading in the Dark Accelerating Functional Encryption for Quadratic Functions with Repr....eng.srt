1
00:00:01,760 --> 00:00:04,080
hello my name is kim irvine and i will

2
00:00:04,080 --> 00:00:05,920
present our work speed reading in the

3
00:00:05,920 --> 00:00:08,240
dark accelerating functional encryption

4
00:00:08,240 --> 00:00:10,000
for quadratic functions with

5
00:00:10,000 --> 00:00:11,840
reprogrammable hardware

6
00:00:11,840 --> 00:00:15,519
this is a joint work between binary and

7
00:00:15,519 --> 00:00:17,520
myself from university of helsinki and

8
00:00:17,520 --> 00:00:19,359
dylan mark and michael stoppard from

9
00:00:19,359 --> 00:00:20,560
xlab

10
00:00:20,560 --> 00:00:23,039
the work was done in the eu project

11
00:00:23,039 --> 00:00:25,519
pentek

12
00:00:26,240 --> 00:00:28,400
we will go through this

13
00:00:28,400 --> 00:00:30,240
architecture for the first hardware

14
00:00:30,240 --> 00:00:33,520
accelerator for functional encryption

15
00:00:33,520 --> 00:00:36,880
for quadratic functions it is a hardware

16
00:00:36,880 --> 00:00:38,480
software co-design

17
00:00:38,480 --> 00:00:41,360
designed particularly for xilinx zinc

18
00:00:41,360 --> 00:00:43,760
ultra scale and piezo

19
00:00:43,760 --> 00:00:45,200
but it's also

20
00:00:45,200 --> 00:00:46,559
usable

21
00:00:46,559 --> 00:00:48,160
for other

22
00:00:48,160 --> 00:00:49,520
such

23
00:00:49,520 --> 00:00:52,079
socs

24
00:00:52,079 --> 00:00:52,879
the

25
00:00:52,879 --> 00:00:54,879
accelerator is optimized particularly

26
00:00:54,879 --> 00:00:57,280
for the decryptions of this functional

27
00:00:57,280 --> 00:00:58,879
encryption scheme

28
00:00:58,879 --> 00:00:59,840
and this

29
00:00:59,840 --> 00:01:02,079
decryption operation requires pairings

30
00:01:02,079 --> 00:01:05,680
and discrete logarithmic computations

31
00:01:05,680 --> 00:01:07,439
one of the central contributions of our

32
00:01:07,439 --> 00:01:09,680
work is this

33
00:01:09,680 --> 00:01:13,040
parallel version of zhang's famous baby

34
00:01:13,040 --> 00:01:15,439
step science the discrete logarithm

35
00:01:15,439 --> 00:01:16,560
algorithm

36
00:01:16,560 --> 00:01:17,759
and

37
00:01:17,759 --> 00:01:19,920
we utilize pre-computations and parallel

38
00:01:19,920 --> 00:01:22,159
processing in that

39
00:01:22,159 --> 00:01:25,119
that algorithm

40
00:01:25,360 --> 00:01:27,360
what we saw is that

41
00:01:27,360 --> 00:01:29,439
our implementation provides large

42
00:01:29,439 --> 00:01:31,200
speedups compared to software-only

43
00:01:31,200 --> 00:01:34,079
implementations

44
00:01:34,880 --> 00:01:37,439
we get several tens or even hundreds of

45
00:01:37,439 --> 00:01:39,040
times faster

46
00:01:39,040 --> 00:01:40,400
results than

47
00:01:40,400 --> 00:01:43,840
a software library called covay

48
00:01:43,840 --> 00:01:46,880
designed for the same same operation

49
00:01:46,880 --> 00:01:49,759
we also showcased two

50
00:01:49,759 --> 00:01:51,680
practical use cases

51
00:01:51,680 --> 00:01:54,960
in the domain of machine learning

52
00:01:54,960 --> 00:01:57,520
particular image classification and so

53
00:01:57,520 --> 00:01:59,759
that these

54
00:01:59,759 --> 00:02:02,399
speed ups translate also to practical

55
00:02:02,399 --> 00:02:04,880
use cases

56
00:02:04,880 --> 00:02:07,840
so what is functional encryption

57
00:02:07,840 --> 00:02:09,440
if you think about traditional

58
00:02:09,440 --> 00:02:11,440
encryption it's all or nothing in the

59
00:02:11,440 --> 00:02:12,800
sense that

60
00:02:12,800 --> 00:02:17,920
whoever has the decryption key dk here

61
00:02:17,920 --> 00:02:20,000
gets access to the full plaintext and

62
00:02:20,000 --> 00:02:22,560
sees it entirely

63
00:02:22,560 --> 00:02:24,879
after decrypting the cipher text then

64
00:02:24,879 --> 00:02:27,360
again if you don't have this decryption

65
00:02:27,360 --> 00:02:29,920
key you get nothing at all

66
00:02:29,920 --> 00:02:31,440
or maybe you know something something

67
00:02:31,440 --> 00:02:33,040
about the length of the message or

68
00:02:33,040 --> 00:02:34,720
something but actually the contents are

69
00:02:34,720 --> 00:02:38,000
completely hidden from you

70
00:02:38,000 --> 00:02:39,519
functional encryption

71
00:02:39,519 --> 00:02:41,920
then again provides more fine-grained

72
00:02:41,920 --> 00:02:43,120
control

73
00:02:43,120 --> 00:02:43,920
so

74
00:02:43,920 --> 00:02:46,560
it's possible to hand out a decryption

75
00:02:46,560 --> 00:02:49,200
keys that allow to compute a specific

76
00:02:49,200 --> 00:02:50,879
function

77
00:02:50,879 --> 00:02:53,280
from the cipher text so the function of

78
00:02:53,280 --> 00:02:54,800
the plain text when given this side

79
00:02:54,800 --> 00:02:56,720
vertex

80
00:02:56,720 --> 00:02:59,120
and this decryption key allows to

81
00:02:59,120 --> 00:03:01,280
compute this function but doesn't give

82
00:03:01,280 --> 00:03:05,840
any other information about the x

83
00:03:06,720 --> 00:03:08,640
every time that some somebody talks

84
00:03:08,640 --> 00:03:12,000
about computations with ciphertext one

85
00:03:12,000 --> 00:03:13,519
of course

86
00:03:13,519 --> 00:03:15,920
thinks about homomorphic encryption

87
00:03:15,920 --> 00:03:17,360
but

88
00:03:17,360 --> 00:03:19,599
in this sense homomorphic encryption is

89
00:03:19,599 --> 00:03:21,519
more like traditional encryption

90
00:03:21,519 --> 00:03:23,280
that uh

91
00:03:23,280 --> 00:03:24,879
when whenever you decrypt you get the

92
00:03:24,879 --> 00:03:26,720
entire plaintext and if you cannot

93
00:03:26,720 --> 00:03:28,959
decrypt then you get nothing at all but

94
00:03:28,959 --> 00:03:30,840
the functional encryption

95
00:03:30,840 --> 00:03:33,519
actually lets you compute something but

96
00:03:33,519 --> 00:03:34,959
that doesn't

97
00:03:34,959 --> 00:03:36,640
reveal the entire

98
00:03:36,640 --> 00:03:39,360
contents of the message

99
00:03:39,360 --> 00:03:41,680
so then the question is of course

100
00:03:41,680 --> 00:03:43,040
how uh

101
00:03:43,040 --> 00:03:46,319
or what kind of functions can we compute

102
00:03:46,319 --> 00:03:47,680
and in general

103
00:03:47,680 --> 00:03:50,239
general functions are possible in theory

104
00:03:50,239 --> 00:03:52,480
but not in practice

105
00:03:52,480 --> 00:03:53,680
so in

106
00:03:53,680 --> 00:03:55,680
in practical sense we are limited to

107
00:03:55,680 --> 00:03:57,200
very

108
00:03:57,200 --> 00:03:59,439
basic functions so there is

109
00:03:59,439 --> 00:04:01,680
functional encryption for inner products

110
00:04:01,680 --> 00:04:02,879
that

111
00:04:02,879 --> 00:04:05,120
and those schemes allow you to compute

112
00:04:05,120 --> 00:04:06,560
inner products

113
00:04:06,560 --> 00:04:10,000
and like you can compute means or

114
00:04:10,000 --> 00:04:12,159
weighted averages or these kind of very

115
00:04:12,159 --> 00:04:13,439
basic

116
00:04:13,439 --> 00:04:17,519
basic statistics over our vector of data

117
00:04:17,519 --> 00:04:19,120
functional encryption for quadratic

118
00:04:19,120 --> 00:04:21,759
functions lets you compute already

119
00:04:21,759 --> 00:04:23,919
quadratic functions and

120
00:04:23,919 --> 00:04:26,560
can lead to much

121
00:04:26,560 --> 00:04:28,560
much more powerful for practical

122
00:04:28,560 --> 00:04:31,199
applications and uh the focus of this

123
00:04:31,199 --> 00:04:33,440
work is is that is uh

124
00:04:33,440 --> 00:04:35,840
qf

125
00:04:36,320 --> 00:04:38,800
and as we will show we can actually do

126
00:04:38,800 --> 00:04:40,639
some simple machine learning tasks even

127
00:04:40,639 --> 00:04:43,199
with this this kind of

128
00:04:43,199 --> 00:04:45,520
schemes

129
00:04:45,520 --> 00:04:48,479
so here is a small example of what what

130
00:04:48,479 --> 00:04:49,520
kind of

131
00:04:49,520 --> 00:04:51,199
problems or practical problems could be

132
00:04:51,199 --> 00:04:53,440
solved with functional encryption

133
00:04:53,440 --> 00:04:56,400
so we have a setup where we have a

134
00:04:56,400 --> 00:04:58,000
patient

135
00:04:58,000 --> 00:05:00,040
and then

136
00:05:00,040 --> 00:05:01,280
[Music]

137
00:05:01,280 --> 00:05:03,759
in this case two different doctors

138
00:05:03,759 --> 00:05:06,560
they might be for example from different

139
00:05:06,560 --> 00:05:08,400
specialties so it might be a cardio

140
00:05:08,400 --> 00:05:10,400
cardiologist and an oncologist for

141
00:05:10,400 --> 00:05:11,759
example

142
00:05:11,759 --> 00:05:13,360
and now

143
00:05:13,360 --> 00:05:16,000
keys are given for the for the patient

144
00:05:16,000 --> 00:05:18,240
to encrypt data and

145
00:05:18,240 --> 00:05:20,320
two different keys are are given to the

146
00:05:20,320 --> 00:05:22,800
doctors so

147
00:05:22,800 --> 00:05:24,720
the cardiologist can compute the

148
00:05:24,720 --> 00:05:26,240
function f and

149
00:05:26,240 --> 00:05:27,840
the angle of this

150
00:05:27,840 --> 00:05:29,199
function g

151
00:05:29,199 --> 00:05:32,160
and now the patient may uh

152
00:05:32,160 --> 00:05:35,440
encrypt her her data like genomic data

153
00:05:35,440 --> 00:05:38,960
as an example and send it to a server

154
00:05:38,960 --> 00:05:40,080
then

155
00:05:40,080 --> 00:05:42,720
the cardiologist can can query this

156
00:05:42,720 --> 00:05:44,240
genomic data

157
00:05:44,240 --> 00:05:46,639
with uh for and see for example if there

158
00:05:46,639 --> 00:05:48,000
is some

159
00:05:48,000 --> 00:05:49,680
some

160
00:05:49,680 --> 00:05:52,560
hard condition

161
00:05:52,560 --> 00:05:53,759
based on the

162
00:05:53,759 --> 00:05:55,120
patient's

163
00:05:55,120 --> 00:05:56,960
genetic data

164
00:05:56,960 --> 00:05:58,240
and

165
00:05:58,240 --> 00:06:00,080
the oncologist can

166
00:06:00,080 --> 00:06:02,400
search similar things but for other

167
00:06:02,400 --> 00:06:04,240
diseases so in this case

168
00:06:04,240 --> 00:06:06,639
for example some cancer

169
00:06:06,639 --> 00:06:08,880
and

170
00:06:09,840 --> 00:06:12,240
nobody not the doctor and not even even

171
00:06:12,240 --> 00:06:14,880
the server has full access to the

172
00:06:14,880 --> 00:06:17,280
patient's genomic data

173
00:06:17,280 --> 00:06:18,560
and

174
00:06:18,560 --> 00:06:20,720
the central computation in this kind of

175
00:06:20,720 --> 00:06:22,400
a setup is the

176
00:06:22,400 --> 00:06:24,960
decryption function of this functional

177
00:06:24,960 --> 00:06:27,039
encryption scheme

178
00:06:27,039 --> 00:06:30,000
and that's the motivation why this work

179
00:06:30,000 --> 00:06:32,000
also focuses

180
00:06:32,000 --> 00:06:34,720
mostly on the on the decryption

181
00:06:34,720 --> 00:06:36,160
operation or

182
00:06:36,160 --> 00:06:37,280
uh

183
00:06:37,280 --> 00:06:39,120
because it's it's quite

184
00:06:39,120 --> 00:06:40,960
seldom when these keys needs to be

185
00:06:40,960 --> 00:06:42,960
generated so so there

186
00:06:42,960 --> 00:06:46,240
is probably quite little need for

187
00:06:46,240 --> 00:06:49,280
accelerating the key generation function

188
00:06:49,280 --> 00:06:52,800
and then a patient

189
00:06:52,800 --> 00:06:55,280
encrypts her data maybe

190
00:06:55,280 --> 00:06:57,360
once or very seldom in any case and it's

191
00:06:57,360 --> 00:06:59,840
also very likely that that the patients

192
00:06:59,840 --> 00:07:01,440
can't have access to hardware

193
00:07:01,440 --> 00:07:02,720
accelerators

194
00:07:02,720 --> 00:07:04,880
so so this decryption operation that is

195
00:07:04,880 --> 00:07:07,039
both frequent and and done in a

196
00:07:07,039 --> 00:07:08,800
centralized server

197
00:07:08,800 --> 00:07:10,400
is is a

198
00:07:10,400 --> 00:07:11,919
very good candidate for hardware

199
00:07:11,919 --> 00:07:14,639
acceleration

200
00:07:14,639 --> 00:07:16,800
okay so let's take a look on the

201
00:07:16,800 --> 00:07:18,400
actual decryption algorithm that we

202
00:07:18,400 --> 00:07:20,240
focus on in this work

203
00:07:20,240 --> 00:07:23,039
so this is uh

204
00:07:23,120 --> 00:07:25,680
from a scheme uh

205
00:07:25,680 --> 00:07:28,319
described in in a in a paper titled

206
00:07:28,319 --> 00:07:30,479
reading in the dark and that's also

207
00:07:30,479 --> 00:07:32,800
the origin of the title of our paper

208
00:07:32,800 --> 00:07:34,960
speed reading in the dark because we we

209
00:07:34,960 --> 00:07:36,960
do that faster with our hardware

210
00:07:36,960 --> 00:07:38,720
acceleration

211
00:07:38,720 --> 00:07:39,759
and

212
00:07:39,759 --> 00:07:42,000
if we look at this decryption algorithm

213
00:07:42,000 --> 00:07:45,280
it takes as an input the

214
00:07:45,280 --> 00:07:47,199
specific format

215
00:07:47,199 --> 00:07:50,479
ciphertext and then

216
00:07:50,639 --> 00:07:52,879
a decryption key for specific quadratic

217
00:07:52,879 --> 00:07:55,280
function f

218
00:07:55,280 --> 00:07:59,199
and then it computes a number of of

219
00:07:59,199 --> 00:08:01,440
pairing computations

220
00:08:01,440 --> 00:08:03,599
actually the number of

221
00:08:03,599 --> 00:08:05,199
pairings that are required in the

222
00:08:05,199 --> 00:08:08,400
decryption depends on the length of the

223
00:08:08,400 --> 00:08:10,479
ciphertext

224
00:08:10,479 --> 00:08:11,759
vector

225
00:08:11,759 --> 00:08:13,840
to how many many uh

226
00:08:13,840 --> 00:08:15,199
values are encrypted in the in the

227
00:08:15,199 --> 00:08:17,680
ciphertext vector

228
00:08:17,680 --> 00:08:19,919
uh then uh there are some finite

229
00:08:19,919 --> 00:08:22,720
arithmetic operations required uh also

230
00:08:22,720 --> 00:08:24,960
but those are rather insignificant if

231
00:08:24,960 --> 00:08:27,599
you look at the big picture

232
00:08:27,599 --> 00:08:30,240
and actually the the performance of this

233
00:08:30,240 --> 00:08:32,320
algorithm is mostly determined by by the

234
00:08:32,320 --> 00:08:33,440
pairings

235
00:08:33,440 --> 00:08:36,000
and importantly the final discrete

236
00:08:36,000 --> 00:08:38,159
logarithm that needs to be computed in

237
00:08:38,159 --> 00:08:39,440
the end

238
00:08:39,440 --> 00:08:42,799
so this discrete logarithm returns

239
00:08:42,799 --> 00:08:45,760
an integer value as a as an output and

240
00:08:45,760 --> 00:08:47,920
that's the

241
00:08:47,920 --> 00:08:50,240
the output of the quadratic function

242
00:08:50,240 --> 00:08:52,240
that we want from

243
00:08:52,240 --> 00:08:55,839
to compute with this uh algorithm

244
00:08:55,839 --> 00:08:58,640
and uh our work

245
00:08:58,640 --> 00:09:00,880
has focused

246
00:09:00,880 --> 00:09:03,040
on the novelties in our work are are

247
00:09:03,040 --> 00:09:05,600
concentrated on this discrete logarithm

248
00:09:05,600 --> 00:09:07,760
computation so in this presentation i

249
00:09:07,760 --> 00:09:08,720
will

250
00:09:08,720 --> 00:09:10,560
focus mostly on that but the details

251
00:09:10,560 --> 00:09:12,560
about how we compute the pairings are

252
00:09:12,560 --> 00:09:16,640
are available in the in the paper

253
00:09:16,640 --> 00:09:19,519
so a discrete logarithm is the problem

254
00:09:19,519 --> 00:09:21,040
of finding x

255
00:09:21,040 --> 00:09:22,560
when given

256
00:09:22,560 --> 00:09:26,240
alpha and beta in some cyclic group

257
00:09:26,240 --> 00:09:30,959
and beta is such that it's alpha 2x

258
00:09:31,680 --> 00:09:33,760
a famous way to solve this problem is

259
00:09:33,760 --> 00:09:35,839
the thanks baby step giant step

260
00:09:35,839 --> 00:09:38,160
algorithm which is based on this

261
00:09:38,160 --> 00:09:40,959
equality here

262
00:09:41,279 --> 00:09:43,680
so once a match is found for

263
00:09:43,680 --> 00:09:44,640
where

264
00:09:44,640 --> 00:09:46,880
some power of alpha equals

265
00:09:46,880 --> 00:09:48,800
this right hand side

266
00:09:48,800 --> 00:09:51,120
then we know what the x is

267
00:09:51,120 --> 00:09:54,320
and the uh algorithm splits into two

268
00:09:54,320 --> 00:09:57,279
phases so there is this baby step base

269
00:09:57,279 --> 00:10:00,480
which uh computes uh powers of alpha and

270
00:10:00,480 --> 00:10:02,800
stores them in a in a table

271
00:10:02,800 --> 00:10:06,640
and then the actual giant step base is

272
00:10:06,640 --> 00:10:08,399
is the one where we try to find the

273
00:10:08,399 --> 00:10:10,880
matches

274
00:10:12,800 --> 00:10:14,320
okay and

275
00:10:14,320 --> 00:10:16,160
the

276
00:10:16,160 --> 00:10:17,760
discrete logarithms that need to be

277
00:10:17,760 --> 00:10:20,240
computed in this decryption algorithm

278
00:10:20,240 --> 00:10:22,800
are actually quite special in the in the

279
00:10:22,800 --> 00:10:24,480
sense that

280
00:10:24,480 --> 00:10:25,279
that

281
00:10:25,279 --> 00:10:27,440
we know that the x is in a specific

282
00:10:27,440 --> 00:10:29,839
bound which is

283
00:10:29,839 --> 00:10:32,079
very small compared to the the size of

284
00:10:32,079 --> 00:10:33,920
the cyclic group

285
00:10:33,920 --> 00:10:34,640
and

286
00:10:34,640 --> 00:10:37,920
so so in most cases we know that the

287
00:10:37,920 --> 00:10:40,240
the function that we evaluate can return

288
00:10:40,240 --> 00:10:42,640
output values in the interval

289
00:10:42,640 --> 00:10:44,000
from minus

290
00:10:44,000 --> 00:10:45,120
b

291
00:10:45,120 --> 00:10:47,760
to positive b

292
00:10:47,760 --> 00:10:50,640
and uh it's also the case that this uh

293
00:10:50,640 --> 00:10:52,160
alpha value

294
00:10:52,160 --> 00:10:54,640
is is fixed in this it's a domain

295
00:10:54,640 --> 00:10:58,720
parameter so so uh we can pre-compute

296
00:10:58,720 --> 00:11:00,880
this baby step

297
00:11:00,880 --> 00:11:03,040
the table t

298
00:11:03,040 --> 00:11:04,399
and although this

299
00:11:04,399 --> 00:11:08,240
size of the cyclic group is is huge

300
00:11:08,240 --> 00:11:09,680
and and that would prevent us from

301
00:11:09,680 --> 00:11:12,000
computing the whole thing we can can

302
00:11:12,000 --> 00:11:12,839
still

303
00:11:12,839 --> 00:11:16,160
compute the t up to some predefined

304
00:11:16,160 --> 00:11:17,120
bound

305
00:11:17,120 --> 00:11:18,480
and in this uh

306
00:11:18,480 --> 00:11:22,079
where we didn't work we denote that by b

307
00:11:22,079 --> 00:11:24,160
and then it allows to

308
00:11:24,160 --> 00:11:26,959
allows us to evaluate all functions that

309
00:11:26,959 --> 00:11:30,320
satisfy this inequality

310
00:11:30,320 --> 00:11:32,399
it's also uh

311
00:11:32,399 --> 00:11:33,680
noticeable that

312
00:11:33,680 --> 00:11:36,000
we don't have to actually store the

313
00:11:36,000 --> 00:11:37,120
entire

314
00:11:37,120 --> 00:11:40,480
of the j but it's stuff is to to

315
00:11:40,480 --> 00:11:45,200
only store some some bits of that

316
00:11:45,200 --> 00:11:46,079
that

317
00:11:46,079 --> 00:11:47,760
value

318
00:11:47,760 --> 00:11:50,160
as long as all the entries in in t are

319
00:11:50,160 --> 00:11:51,760
unique

320
00:11:51,760 --> 00:11:53,839
and and this helps us to save a lot of

321
00:11:53,839 --> 00:11:55,360
uh space

322
00:11:55,360 --> 00:11:57,200
which is very very central in this

323
00:11:57,200 --> 00:12:00,160
network because we are actually

324
00:12:00,160 --> 00:12:03,839
computing huge tables

325
00:12:04,880 --> 00:12:06,959
then our architecture that i will

326
00:12:06,959 --> 00:12:09,200
present in the following slides is a

327
00:12:09,200 --> 00:12:11,920
parallel with architecture so so it is

328
00:12:11,920 --> 00:12:14,000
of interest to to paralyze this

329
00:12:14,000 --> 00:12:15,120
algorithm

330
00:12:15,120 --> 00:12:17,680
and actually this both of the steps are

331
00:12:17,680 --> 00:12:19,920
are

332
00:12:20,399 --> 00:12:22,720
can be fully paralyzed in the sense that

333
00:12:22,720 --> 00:12:25,360
if we have n cores we get almost n times

334
00:12:25,360 --> 00:12:27,920
speed up

335
00:12:29,040 --> 00:12:32,079
and the the resulting algorithm that

336
00:12:32,079 --> 00:12:34,880
takes these

337
00:12:35,519 --> 00:12:36,320
this

338
00:12:36,320 --> 00:12:38,160
list into account is actually quite

339
00:12:38,160 --> 00:12:40,639
complex it's about one-page algorithm so

340
00:12:40,639 --> 00:12:43,120
i spare you from that and you can take a

341
00:12:43,120 --> 00:12:44,800
look

342
00:12:44,800 --> 00:12:48,240
in the paper if you are interested

343
00:12:48,560 --> 00:12:50,720
okay so so here is the high-level

344
00:12:50,720 --> 00:12:52,800
architecture of our

345
00:12:52,800 --> 00:12:55,920
our accelerator so as i mentioned it's a

346
00:12:55,920 --> 00:12:57,760
hardware software co-design so that

347
00:12:57,760 --> 00:12:59,680
there is a short software side so you

348
00:12:59,680 --> 00:13:01,760
can see this arm core here

349
00:13:01,760 --> 00:13:04,399
and then there's a hardware side which

350
00:13:04,399 --> 00:13:05,839
is implemented

351
00:13:05,839 --> 00:13:07,519
on an fpga

352
00:13:07,519 --> 00:13:10,000
fabric

353
00:13:10,639 --> 00:13:12,800
um

354
00:13:12,800 --> 00:13:14,320
the

355
00:13:14,320 --> 00:13:16,720
most important components in the in the

356
00:13:16,720 --> 00:13:20,079
hardware domain are these in parallel

357
00:13:20,079 --> 00:13:21,680
processing cores

358
00:13:21,680 --> 00:13:24,720
so n is 16 in our implementations case

359
00:13:24,720 --> 00:13:27,760
but but we basically it could be

360
00:13:27,760 --> 00:13:29,279
another another value for n could be

361
00:13:29,279 --> 00:13:32,160
used as as well but we filled the fpga

362
00:13:32,160 --> 00:13:36,480
and that meant that we could fit in 16

363
00:13:36,480 --> 00:13:39,519
16 panel cores

364
00:13:39,519 --> 00:13:42,800
these cores are are optimized

365
00:13:42,800 --> 00:13:45,839
for speed and area which allows us to

366
00:13:45,839 --> 00:13:48,560
optimally use the

367
00:13:48,560 --> 00:13:50,160
resources that we have

368
00:13:50,160 --> 00:13:51,920
available

369
00:13:51,920 --> 00:13:54,720
the actual architecture of the of this

370
00:13:54,720 --> 00:13:57,040
course is based on a bearing

371
00:13:57,040 --> 00:13:59,040
co-processor architecture

372
00:13:59,040 --> 00:14:01,199
designed by mila and myself and

373
00:14:01,199 --> 00:14:04,160
published in fpl last year

374
00:14:04,160 --> 00:14:06,240
so it's optimized for pairing

375
00:14:06,240 --> 00:14:07,760
computations

376
00:14:07,760 --> 00:14:09,120
but

377
00:14:09,120 --> 00:14:12,240
as it ultimately relies on the efficient

378
00:14:12,240 --> 00:14:14,800
financial arithmetic it can be also used

379
00:14:14,800 --> 00:14:16,560
to efficiently compute

380
00:14:16,560 --> 00:14:18,639
the other parts of the

381
00:14:18,639 --> 00:14:21,760
decryption algorithm including the

382
00:14:21,760 --> 00:14:25,040
discrete logarithm computation

383
00:14:25,040 --> 00:14:27,279
here on the hardware side we also have

384
00:14:27,279 --> 00:14:30,639
a hierarchy of local memory so there is

385
00:14:30,639 --> 00:14:32,160
there are

386
00:14:32,160 --> 00:14:33,839
there are local memories in the in the

387
00:14:33,839 --> 00:14:35,440
cp course

388
00:14:35,440 --> 00:14:37,680
but there is also shared memory which

389
00:14:37,680 --> 00:14:40,240
allows the cp cores to exchange data

390
00:14:40,240 --> 00:14:41,760
with each other

391
00:14:41,760 --> 00:14:43,440
the main purpose of this memory

392
00:14:43,440 --> 00:14:46,160
hierarchy is to reduce the amount of

393
00:14:46,160 --> 00:14:47,600
data that needs to be transferred

394
00:14:47,600 --> 00:14:49,040
between the software and hardware

395
00:14:49,040 --> 00:14:51,600
domains because that

396
00:14:51,600 --> 00:14:53,839
communication would easily become

397
00:14:53,839 --> 00:14:55,440
a bottleneck

398
00:14:55,440 --> 00:14:56,720
if not

399
00:14:56,720 --> 00:14:59,279
not implemented with a smart

400
00:14:59,279 --> 00:15:00,800
uh

401
00:15:00,800 --> 00:15:02,720
hierarch local memory in the hardware

402
00:15:02,720 --> 00:15:04,959
side

403
00:15:05,120 --> 00:15:07,360
uh in the software side there's this arm

404
00:15:07,360 --> 00:15:10,800
core that takes care of general control

405
00:15:10,800 --> 00:15:14,000
and flow management but also certain

406
00:15:14,000 --> 00:15:17,360
what i call auxiliary processing meaning

407
00:15:17,360 --> 00:15:19,279
operations small operations that need to

408
00:15:19,279 --> 00:15:20,720
be computed

409
00:15:20,720 --> 00:15:21,519
but

410
00:15:21,519 --> 00:15:23,440
which are either not supported by the

411
00:15:23,440 --> 00:15:26,240
hardware domain or that doesn't pay off

412
00:15:26,240 --> 00:15:27,440
to be

413
00:15:27,440 --> 00:15:29,839
to be uh delegated to the hardware at

414
00:15:29,839 --> 00:15:32,240
that point

415
00:15:32,240 --> 00:15:33,839
uh an important

416
00:15:33,839 --> 00:15:36,320
component here is also this ddr memory

417
00:15:36,320 --> 00:15:37,519
which is actually not part of the

418
00:15:37,519 --> 00:15:41,279
designing chip but it's it's on the

419
00:15:41,279 --> 00:15:42,720
on the same board

420
00:15:42,720 --> 00:15:46,480
and this uh large ddr memory is used for

421
00:15:46,480 --> 00:15:49,440
storing the pre-computed key and

422
00:15:49,440 --> 00:15:51,360
actually we used almost two gigabytes of

423
00:15:51,360 --> 00:15:53,279
that memory so that's that's a very

424
00:15:53,279 --> 00:15:56,959
central component in this computation

425
00:15:57,839 --> 00:16:00,000
okay so let's uh take a look on the

426
00:16:00,000 --> 00:16:03,279
results next so we compare this uh

427
00:16:03,279 --> 00:16:05,279
the results of our work

428
00:16:05,279 --> 00:16:08,079
against the gopher library also a result

429
00:16:08,079 --> 00:16:09,920
of the fentech project

430
00:16:09,920 --> 00:16:12,399
that implements the same

431
00:16:12,399 --> 00:16:13,839
feqf

432
00:16:13,839 --> 00:16:16,240
scheme

433
00:16:16,240 --> 00:16:18,320
but in in addition to the original

434
00:16:18,320 --> 00:16:20,320
coffee we also

435
00:16:20,320 --> 00:16:22,639
compare against optimal go fa sorry

436
00:16:22,639 --> 00:16:24,399
optimized coffee

437
00:16:24,399 --> 00:16:25,680
which is uh

438
00:16:25,680 --> 00:16:29,440
the same cofa library but where we have

439
00:16:29,440 --> 00:16:33,199
implemented discrete logarithms with our

440
00:16:33,199 --> 00:16:35,839
discrete logarithmic computation

441
00:16:35,839 --> 00:16:38,399
with pre-computations

442
00:16:38,399 --> 00:16:41,839
and we can see from here that actually

443
00:16:41,839 --> 00:16:43,120
this

444
00:16:43,120 --> 00:16:45,040
this algorithm has a

445
00:16:45,040 --> 00:16:47,680
very significant impact also in the

446
00:16:47,680 --> 00:16:49,519
software performance

447
00:16:49,519 --> 00:16:51,360
so you can see that that

448
00:16:51,360 --> 00:16:54,000
with the normal original coffee

449
00:16:54,000 --> 00:16:58,560
the discrete logarithms quickly start

450
00:16:59,360 --> 00:17:00,240
start

451
00:17:00,240 --> 00:17:02,720
to dominate here and and the

452
00:17:02,720 --> 00:17:04,720
decryption times grow

453
00:17:04,720 --> 00:17:06,319
to impractical

454
00:17:06,319 --> 00:17:08,319
levels quite quickly because all of

455
00:17:08,319 --> 00:17:11,039
these samples here are actually

456
00:17:11,039 --> 00:17:14,000
rather small in practical sense so so in

457
00:17:14,000 --> 00:17:16,240
some cases there is only one value

458
00:17:16,240 --> 00:17:18,240
the largest 20

459
00:17:18,240 --> 00:17:18,959
but

460
00:17:18,959 --> 00:17:21,039
but as soon as the the the size of the

461
00:17:21,039 --> 00:17:22,959
result grows the

462
00:17:22,959 --> 00:17:25,679
coffee library gets slow

463
00:17:25,679 --> 00:17:26,720
with the

464
00:17:26,720 --> 00:17:29,360
new biscuit look at the algorithm we get

465
00:17:29,360 --> 00:17:31,919
significant speed ups but but by using

466
00:17:31,919 --> 00:17:33,919
the hardware accelerator

467
00:17:33,919 --> 00:17:34,600
we get

468
00:17:34,600 --> 00:17:37,699
[Music]

469
00:17:37,760 --> 00:17:40,160
even much better better results so so we

470
00:17:40,160 --> 00:17:41,520
get

471
00:17:41,520 --> 00:17:44,240
get the speed ups of over a thousand

472
00:17:44,240 --> 00:17:46,080
times compared to original coffee but

473
00:17:46,080 --> 00:17:48,640
almost 20 times even even against the

474
00:17:48,640 --> 00:17:50,000
optimized one

475
00:17:50,000 --> 00:17:52,320
and it's uh so that the

476
00:17:52,320 --> 00:17:54,799
the bigger the functions are the more

477
00:17:54,799 --> 00:17:57,520
the more benefit you get from the

478
00:17:57,520 --> 00:17:59,200
hardware accelerator

479
00:17:59,200 --> 00:18:01,440
and that's you know a

480
00:18:01,440 --> 00:18:03,440
good showcase of the importance of

481
00:18:03,440 --> 00:18:06,160
hardware acceleration for practical

482
00:18:06,160 --> 00:18:08,240
use cases because in those cases the

483
00:18:08,240 --> 00:18:12,320
functions usually are on the larger end

484
00:18:12,799 --> 00:18:14,480
at the beginning i said that we also

485
00:18:14,480 --> 00:18:18,240
tested our system with uh practical or

486
00:18:18,240 --> 00:18:19,600
practical

487
00:18:19,600 --> 00:18:22,799
like scenarios or use cases

488
00:18:22,799 --> 00:18:26,879
and we tested them with two different

489
00:18:27,280 --> 00:18:30,640
image classification use cases

490
00:18:30,640 --> 00:18:33,440
so so the the setup is such that for

491
00:18:33,440 --> 00:18:34,400
example

492
00:18:34,400 --> 00:18:36,320
in the first case we use this mnist

493
00:18:36,320 --> 00:18:38,640
famous mnist database of

494
00:18:38,640 --> 00:18:41,360
images of written digits

495
00:18:41,360 --> 00:18:44,160
and the task there is to normally to to

496
00:18:44,160 --> 00:18:46,960
give this image to a computer and and it

497
00:18:46,960 --> 00:18:51,120
should then say which which digit is is

498
00:18:51,120 --> 00:18:53,120
there in the image

499
00:18:53,120 --> 00:18:57,760
in this case that we have the the

500
00:18:57,760 --> 00:18:58,850
task is much

501
00:18:58,850 --> 00:19:00,080
[Music]

502
00:19:00,080 --> 00:19:01,600
more difficult because we actually

503
00:19:01,600 --> 00:19:03,440
encrypt the image so it's not not

504
00:19:03,440 --> 00:19:05,600
possible to visually even even look at

505
00:19:05,600 --> 00:19:07,679
that and tell which

506
00:19:07,679 --> 00:19:11,440
which image there is and but with the

507
00:19:11,440 --> 00:19:12,640
functional encryption it's still

508
00:19:12,640 --> 00:19:15,600
possible to do this machine learning

509
00:19:15,600 --> 00:19:17,280
computation by

510
00:19:17,280 --> 00:19:20,559
by giving out 10 different

511
00:19:20,559 --> 00:19:21,760
different

512
00:19:21,760 --> 00:19:23,280
decryption keys

513
00:19:23,280 --> 00:19:24,799
one that that

514
00:19:24,799 --> 00:19:26,240
gives the the

515
00:19:26,240 --> 00:19:28,720
likelihood that the

516
00:19:28,720 --> 00:19:31,440
this is the zero the one that it's one

517
00:19:31,440 --> 00:19:34,160
and so on all the way up to nine

518
00:19:34,160 --> 00:19:36,160
and in this example for example we see

519
00:19:36,160 --> 00:19:37,360
that the

520
00:19:37,360 --> 00:19:40,320
the decryption with the key that they

521
00:19:40,320 --> 00:19:42,240
gives the likelihood with

522
00:19:42,240 --> 00:19:45,280
for the digits eight gives the largest

523
00:19:45,280 --> 00:19:48,640
output and then that means that the

524
00:19:48,640 --> 00:19:51,280
the image in that encrypted image

525
00:19:51,280 --> 00:19:55,039
is likely to be eighth

526
00:19:55,039 --> 00:19:59,039
the fashion mnist databases is similar

527
00:19:59,039 --> 00:20:01,280
but instead of hundred and digits it

528
00:20:01,280 --> 00:20:03,600
contains images of different kind of

529
00:20:03,600 --> 00:20:07,200
clothes like t-shirts browsers and so on

530
00:20:07,200 --> 00:20:08,720
and the task is to

531
00:20:08,720 --> 00:20:11,760
is to find out which one that is there

532
00:20:11,760 --> 00:20:13,520
there are also 10 different classes in

533
00:20:13,520 --> 00:20:14,720
that case

534
00:20:14,720 --> 00:20:17,120
so in both cases actually the images are

535
00:20:17,120 --> 00:20:20,080
28 times 28 pixels

536
00:20:20,080 --> 00:20:21,440
and

537
00:20:21,440 --> 00:20:24,480
contain different 10 different classes

538
00:20:24,480 --> 00:20:26,480
but because the

539
00:20:26,480 --> 00:20:28,640
task of

540
00:20:28,640 --> 00:20:30,000
of

541
00:20:30,000 --> 00:20:32,480
classifying these 100 digits is much

542
00:20:32,480 --> 00:20:35,840
much easier actually uh the computation

543
00:20:35,840 --> 00:20:36,880
or the

544
00:20:36,880 --> 00:20:38,640
that is required there is is much

545
00:20:38,640 --> 00:20:41,120
simpler so we we can use in

546
00:20:41,120 --> 00:20:44,000
is 40 as a parameter in that case and we

547
00:20:44,000 --> 00:20:44,720
get

548
00:20:44,720 --> 00:20:47,760
on average 29 bit outputs from the from

549
00:20:47,760 --> 00:20:49,440
the computation

550
00:20:49,440 --> 00:20:50,880
and actually this this kind of a model

551
00:20:50,880 --> 00:20:53,200
gives a 97 percent accuracy

552
00:20:53,200 --> 00:20:55,679
in the case of eminis we have to use

553
00:20:55,679 --> 00:20:56,559
bigger

554
00:20:56,559 --> 00:21:00,320
parameters so we have n is 128

555
00:21:00,320 --> 00:21:02,799
on average 37 bit outputs and still we

556
00:21:02,799 --> 00:21:06,080
get less than 90 accuracy

557
00:21:06,080 --> 00:21:09,440
so if we look at the uh literature so

558
00:21:09,440 --> 00:21:14,159
original gopher was reported to to

559
00:21:14,480 --> 00:21:17,039
have this mnist case done in less than

560
00:21:17,039 --> 00:21:19,280
20 seconds

561
00:21:19,280 --> 00:21:20,159
um

562
00:21:20,159 --> 00:21:22,960
when we do that with optimized coffee

563
00:21:22,960 --> 00:21:23,840
we get

564
00:21:23,840 --> 00:21:25,919
on average 1.3 seconds for that

565
00:21:25,919 --> 00:21:28,559
computation for the mnist

566
00:21:28,559 --> 00:21:31,600
and uh passionate is

567
00:21:31,600 --> 00:21:32,720
done in

568
00:21:32,720 --> 00:21:35,840
5.2 seconds

569
00:21:36,080 --> 00:21:39,918
with our accelerator we are

570
00:21:40,039 --> 00:21:43,600
0.09 seconds for the mnist case and

571
00:21:43,600 --> 00:21:46,960
about 0.4 seconds for the

572
00:21:46,960 --> 00:21:49,520
fashion name list so we get

573
00:21:49,520 --> 00:21:51,679
15 times speed up

574
00:21:51,679 --> 00:21:53,600
which is

575
00:21:53,600 --> 00:21:55,360
something that already has a lot of

576
00:21:55,360 --> 00:21:58,840
practical significance

577
00:22:00,000 --> 00:22:02,000
so as a conclusion

578
00:22:02,000 --> 00:22:04,559
what we showed was that the functional

579
00:22:04,559 --> 00:22:06,640
encryption for quadratic functions

580
00:22:06,640 --> 00:22:08,559
benefits difficulty from hardware

581
00:22:08,559 --> 00:22:09,840
acceleration

582
00:22:09,840 --> 00:22:11,840
although we focused on on us one

583
00:22:11,840 --> 00:22:14,240
specific scheme in this

584
00:22:14,240 --> 00:22:15,360
work

585
00:22:15,360 --> 00:22:17,919
also the other fbq schemes that have

586
00:22:17,919 --> 00:22:20,559
been proposed are actually very similar

587
00:22:20,559 --> 00:22:22,159
in structure so they use pairings and

588
00:22:22,159 --> 00:22:24,000
discrete logarithms

589
00:22:24,000 --> 00:22:26,880
so we expect that our results can be

590
00:22:26,880 --> 00:22:29,600
used or our results generalize

591
00:22:29,600 --> 00:22:31,840
to them also rather

592
00:22:31,840 --> 00:22:33,679
rather easily and

593
00:22:33,679 --> 00:22:35,679
our accelerator can be used

594
00:22:35,679 --> 00:22:38,640
for for different fpqf

595
00:22:38,640 --> 00:22:40,559
schemes with only very minor

596
00:22:40,559 --> 00:22:42,799
modifications

597
00:22:42,799 --> 00:22:45,760
if you are interested in in the paper

598
00:22:45,760 --> 00:22:47,600
or or the the details about the

599
00:22:47,600 --> 00:22:48,960
architecture

600
00:22:48,960 --> 00:22:50,720
algorithms and for your discussion on

601
00:22:50,720 --> 00:22:52,480
site channel attacks please please see

602
00:22:52,480 --> 00:22:53,200
the

603
00:22:53,200 --> 00:22:55,840
see the paper

604
00:22:55,840 --> 00:22:58,480
okay thank you very much and

605
00:22:58,480 --> 00:23:01,120
questions can be

606
00:23:01,120 --> 00:23:02,159
asked

607
00:23:02,159 --> 00:23:04,480
either during the online session or

608
00:23:04,480 --> 00:23:07,200
mailed directly to me this

609
00:23:07,200 --> 00:23:09,840
email address schema dot u dot yeah i

610
00:23:09,840 --> 00:23:12,960
remember not helping you fine

611
00:23:12,960 --> 00:23:17,000
thank you very much for your attention

