1
00:00:03,679 --> 00:00:05,759
hello i'm ting farm

2
00:00:05,759 --> 00:00:09,120
from the university of bristol

3
00:00:09,120 --> 00:00:12,480
in this presentation i will talk about

4
00:00:12,480 --> 00:00:16,480
our chess 2021 paper titled an

5
00:00:16,480 --> 00:00:19,199
instruction set extension to support

6
00:00:19,199 --> 00:00:22,400
software based masking

7
00:00:22,400 --> 00:00:24,960
this is a choice to work with

8
00:00:24,960 --> 00:00:26,240
seagal

9
00:00:26,240 --> 00:00:28,240
joins crosstalk

10
00:00:28,240 --> 00:00:31,519
ben marshall land page and francesco

11
00:00:31,519 --> 00:00:33,840
ricassioni

12
00:00:33,840 --> 00:00:36,320
in the paper we focused on the

13
00:00:36,320 --> 00:00:38,480
implementation of masking scheme

14
00:00:38,480 --> 00:00:42,239
countermeasures against sexual attacks

15
00:00:42,239 --> 00:00:45,280
i think stretching attacks sca is

16
00:00:45,280 --> 00:00:48,160
currently a well-known topic especially

17
00:00:48,160 --> 00:00:50,239
in chess

18
00:00:50,239 --> 00:00:53,520
at the high level sca is a kind of

19
00:00:53,520 --> 00:00:55,760
implementation attacks

20
00:00:55,760 --> 00:00:58,239
which targets on a concrete

21
00:00:58,239 --> 00:00:59,680
implementation

22
00:00:59,680 --> 00:01:03,039
thus potentially bypasses the

23
00:01:03,039 --> 00:01:06,560
theoretical security properties

24
00:01:06,560 --> 00:01:09,360
particularly sca exploits the

25
00:01:09,360 --> 00:01:11,040
information leakage

26
00:01:11,040 --> 00:01:13,600
from sectionals to recover sensitive

27
00:01:13,600 --> 00:01:15,280
data

28
00:01:15,280 --> 00:01:18,640
basically if you have an implementation

29
00:01:18,640 --> 00:01:21,759
being performed by a target device then

30
00:01:21,759 --> 00:01:24,400
as an attacker you can monitor its

31
00:01:24,400 --> 00:01:26,400
computation by capturing

32
00:01:26,400 --> 00:01:29,119
time execution or power consumption

33
00:01:29,119 --> 00:01:32,320
as such general information

34
00:01:32,320 --> 00:01:34,960
if the computations involve

35
00:01:34,960 --> 00:01:37,439
security critical information then

36
00:01:37,439 --> 00:01:38,720
potentially

37
00:01:38,720 --> 00:01:41,280
analyzing the sectional information

38
00:01:41,280 --> 00:01:43,920
can gain some knowledge about the

39
00:01:43,920 --> 00:01:47,600
security critical information

40
00:01:47,600 --> 00:01:50,320
power sectional attacks are generally

41
00:01:50,320 --> 00:01:51,840
categorized

42
00:01:51,840 --> 00:01:55,040
into two types of attacks

43
00:01:55,040 --> 00:01:58,000
simple power analysis sba and

44
00:01:58,000 --> 00:02:01,759
differential power analysis dpa

45
00:02:01,759 --> 00:02:04,640
spi can potentially reveal sensitive

46
00:02:04,640 --> 00:02:07,040
information by observing the power

47
00:02:07,040 --> 00:02:10,560
consumption of one single execution

48
00:02:10,560 --> 00:02:12,160
in contrast

49
00:02:12,160 --> 00:02:15,120
dpi possibly extracts sensitive

50
00:02:15,120 --> 00:02:17,760
information by statically analyzing

51
00:02:17,760 --> 00:02:20,160
numerous power measurements of the

52
00:02:20,160 --> 00:02:24,239
executions on different inputs

53
00:02:24,640 --> 00:02:26,319
on the other hand

54
00:02:26,319 --> 00:02:28,800
masking and heading are two widely used

55
00:02:28,800 --> 00:02:32,239
counter measures against sca

56
00:02:32,239 --> 00:02:34,879
hiding cartomizers try to reduce the

57
00:02:34,879 --> 00:02:37,440
signal to noise strategy of linking

58
00:02:37,440 --> 00:02:39,760
information

59
00:02:39,760 --> 00:02:42,000
while masking cartomizers

60
00:02:42,000 --> 00:02:42,800
which

61
00:02:42,800 --> 00:02:44,080
are focused

62
00:02:44,080 --> 00:02:46,560
most the sensitive information with

63
00:02:46,560 --> 00:02:48,000
random cells

64
00:02:48,000 --> 00:02:50,720
unknown to attackers

65
00:02:50,720 --> 00:02:52,800
they can be viewed as a low-level

66
00:02:52,800 --> 00:02:54,160
analysis

67
00:02:54,160 --> 00:02:58,800
of computing on encrypted data concepts

68
00:02:58,800 --> 00:03:01,599
the customizers are becoming increasing

69
00:03:01,599 --> 00:03:03,440
when understood by now

70
00:03:03,440 --> 00:03:04,959
for example

71
00:03:04,959 --> 00:03:06,480
theoretically

72
00:03:06,480 --> 00:03:09,599
the first order masking could resist the

73
00:03:09,599 --> 00:03:11,840
first order attacks

74
00:03:11,840 --> 00:03:14,560
but vulnerable to the second order

75
00:03:14,560 --> 00:03:16,560
attacks

76
00:03:16,560 --> 00:03:17,599
in turn

77
00:03:17,599 --> 00:03:20,720
such attacks can be mitigated by

78
00:03:20,720 --> 00:03:23,920
second-order masking

79
00:03:24,400 --> 00:03:26,000
in edison

80
00:03:26,000 --> 00:03:28,319
masking can be utilized as various

81
00:03:28,319 --> 00:03:30,799
levels in either hardware and or

82
00:03:30,799 --> 00:03:32,720
software

83
00:03:32,720 --> 00:03:35,599
for masking implementation we probably

84
00:03:35,599 --> 00:03:38,319
have at least two significant challenges

85
00:03:38,319 --> 00:03:39,840
as a high level

86
00:03:39,840 --> 00:03:43,040
that must be arrested

87
00:03:43,040 --> 00:03:44,000
first

88
00:03:44,000 --> 00:03:46,959
it must translate theoretically

89
00:03:46,959 --> 00:03:48,959
security properties

90
00:03:48,959 --> 00:03:51,599
into practice

91
00:03:51,599 --> 00:03:54,560
second it suffers large increases

92
00:03:54,560 --> 00:03:58,799
performance and implementation overheads

93
00:03:58,799 --> 00:04:00,879
more specifically implementing

94
00:04:00,879 --> 00:04:03,200
software-based masking could be a

95
00:04:03,200 --> 00:04:05,760
non-trivial task to achieve the

96
00:04:05,760 --> 00:04:09,040
guaranteed security due to the leakages

97
00:04:09,040 --> 00:04:11,599
that stem from this underlying micro

98
00:04:11,599 --> 00:04:13,760
architecture

99
00:04:13,760 --> 00:04:16,880
such implementation also suffers from

100
00:04:16,880 --> 00:04:18,639
significant overheads

101
00:04:18,639 --> 00:04:20,639
in terms of

102
00:04:20,639 --> 00:04:23,280
for example execution latency

103
00:04:23,280 --> 00:04:26,320
got density and high quality randomness

104
00:04:26,320 --> 00:04:27,840
demand

105
00:04:27,840 --> 00:04:29,600
on the other hand

106
00:04:29,600 --> 00:04:32,000
implementing hardware based masking

107
00:04:32,000 --> 00:04:34,320
faces difficulties to mitigate the

108
00:04:34,320 --> 00:04:36,560
glitch related leakage

109
00:04:36,560 --> 00:04:40,880
that occurred at the gate levels

110
00:04:40,960 --> 00:04:43,919
and the masking also imposes large

111
00:04:43,919 --> 00:04:44,960
overheads

112
00:04:44,960 --> 00:04:46,639
in terms of

113
00:04:46,639 --> 00:04:49,840
aerial and energy consumption

114
00:04:49,840 --> 00:04:52,360
moreover hardware-based masking

115
00:04:52,360 --> 00:04:55,600
inflexible for nouveau designs appearing

116
00:04:55,600 --> 00:04:58,320
regularly

117
00:04:58,639 --> 00:05:01,600
we can pay more costs to address the

118
00:05:01,600 --> 00:05:02,800
leakages

119
00:05:02,800 --> 00:05:05,360
like other reduction

120
00:05:05,360 --> 00:05:08,960
of pressure implementation

121
00:05:09,120 --> 00:05:12,240
such approaches employ additional random

122
00:05:12,240 --> 00:05:14,800
sales to maintain its guarantees

123
00:05:14,800 --> 00:05:19,280
security level regarding the leakages

124
00:05:19,280 --> 00:05:21,840
for example question implementation

125
00:05:21,840 --> 00:05:25,120
u3 instead of two sets for first order

126
00:05:25,120 --> 00:05:27,199
marking

127
00:05:27,199 --> 00:05:29,520
how we can try to solve it with a

128
00:05:29,520 --> 00:05:34,240
collaborative and considerate approach

129
00:05:35,120 --> 00:05:38,720
in this paper we explore the use of an

130
00:05:38,720 --> 00:05:41,199
injection set extension

131
00:05:41,199 --> 00:05:45,039
i see as a means of supporting masking

132
00:05:45,039 --> 00:05:47,840
in software-based implementations

133
00:05:47,840 --> 00:05:50,880
of cryptography

134
00:05:50,880 --> 00:05:53,039
the fact is that

135
00:05:53,039 --> 00:05:55,360
an ice were positioned

136
00:05:55,360 --> 00:05:58,400
to act an interface

137
00:05:58,400 --> 00:06:00,720
between hardware and software

138
00:06:00,720 --> 00:06:01,759
which

139
00:06:01,759 --> 00:06:04,960
enables a collaborative approach

140
00:06:04,960 --> 00:06:07,520
of hagwon software to address the

141
00:06:07,520 --> 00:06:08,639
challenges

142
00:06:08,639 --> 00:06:12,400
of masking implementations

143
00:06:12,479 --> 00:06:15,120
we believe there are at least

144
00:06:15,120 --> 00:06:18,000
three possible attractive benefits

145
00:06:18,000 --> 00:06:21,840
of an ic approach

146
00:06:21,840 --> 00:06:23,280
first

147
00:06:23,280 --> 00:06:26,240
possibly mitigates the leakages

148
00:06:26,240 --> 00:06:29,120
steaming from the underlying micro

149
00:06:29,120 --> 00:06:30,400
architecture

150
00:06:30,400 --> 00:06:31,280
which

151
00:06:31,280 --> 00:06:33,759
is complicated

152
00:06:33,759 --> 00:06:36,479
in software

153
00:06:36,560 --> 00:06:40,560
second offers flexibility through ic

154
00:06:40,560 --> 00:06:42,160
assisted software

155
00:06:42,160 --> 00:06:45,440
which allows the possibility to apply

156
00:06:45,440 --> 00:06:48,880
for new cryptographic designs

157
00:06:48,880 --> 00:06:51,680
and finally against affordable

158
00:06:51,680 --> 00:06:55,120
compromise improving full spring latency

159
00:06:55,120 --> 00:06:59,199
versus a software and area efficiencies

160
00:06:59,199 --> 00:07:00,840
versus a hardware

161
00:07:00,840 --> 00:07:04,080
alternative regarding the security and

162
00:07:04,080 --> 00:07:06,800
the performance of masking our paper

163
00:07:06,800 --> 00:07:09,680
presented some main contributions

164
00:07:09,680 --> 00:07:10,639
first

165
00:07:10,639 --> 00:07:12,160
we introduced

166
00:07:12,160 --> 00:07:14,560
a design of an enriched

167
00:07:14,560 --> 00:07:18,800
ic with a wider set of operations

168
00:07:18,800 --> 00:07:22,960
second we presented an area efficient

169
00:07:22,960 --> 00:07:26,960
and leakage aware implementation of the

170
00:07:26,960 --> 00:07:30,319
ic within a existing risk 5 micro

171
00:07:30,319 --> 00:07:32,400
architecture

172
00:07:32,400 --> 00:07:34,479
finally a leakage

173
00:07:34,479 --> 00:07:37,199
evaluation and a quantitative

174
00:07:37,199 --> 00:07:38,400
analysis

175
00:07:38,400 --> 00:07:39,360
of

176
00:07:39,360 --> 00:07:42,960
the overheads on a wide range of ic

177
00:07:42,960 --> 00:07:45,280
assisted cryptographic software it

178
00:07:45,280 --> 00:07:47,520
conducted

179
00:07:47,520 --> 00:07:50,639
as a result we showed that it's possible

180
00:07:50,639 --> 00:07:53,680
to achieve secure masking using

181
00:07:53,680 --> 00:07:55,840
dedicated instructions

182
00:07:55,840 --> 00:07:58,720
without the needs of duplicating the

183
00:07:58,720 --> 00:08:02,560
database which is often introduced in

184
00:08:02,560 --> 00:08:05,280
existing hardware and ic based

185
00:08:05,280 --> 00:08:07,280
approaches

186
00:08:07,280 --> 00:08:10,720
at a high level we aim at supporting

187
00:08:10,720 --> 00:08:13,919
operations on operands either in boolean

188
00:08:13,919 --> 00:08:17,520
or arithmetic masking representations

189
00:08:17,520 --> 00:08:19,039
the instructions

190
00:08:19,039 --> 00:08:22,160
are designed to execute three types of

191
00:08:22,160 --> 00:08:25,039
operations namely representation

192
00:08:25,039 --> 00:08:29,759
conversion unary and binary operations

193
00:08:29,759 --> 00:08:31,120
concretely

194
00:08:31,120 --> 00:08:34,880
we design forces of masking ic regarding

195
00:08:34,880 --> 00:08:37,679
functionalities namely class a for

196
00:08:37,679 --> 00:08:40,559
arithmetic masking class b for bully

197
00:08:40,559 --> 00:08:41,919
masking

198
00:08:41,919 --> 00:08:44,080
classy for conversion between boolean

199
00:08:44,080 --> 00:08:46,080
and arithmetic masking

200
00:08:46,080 --> 00:08:50,720
and class f for field arithmetic

201
00:08:51,600 --> 00:08:55,200
the a class ic includes a set of

202
00:08:55,200 --> 00:08:57,839
instructions that support first order

203
00:08:57,839 --> 00:08:59,680
arithmetic masking

204
00:08:59,680 --> 00:09:02,800
they allow masking and masking remasking

205
00:09:02,800 --> 00:09:04,080
and mask

206
00:09:04,080 --> 00:09:06,399
operations include addition and

207
00:09:06,399 --> 00:09:08,320
subtraction

208
00:09:08,320 --> 00:09:12,480
black white the big glass ic consists of

209
00:09:12,480 --> 00:09:15,600
a set of instructions that's the pork

210
00:09:15,600 --> 00:09:18,240
first order bully masking

211
00:09:18,240 --> 00:09:21,279
they allow masking and masking masking

212
00:09:21,279 --> 00:09:24,720
and mask operations including

213
00:09:24,720 --> 00:09:28,080
bit wide operations for example not

214
00:09:28,080 --> 00:09:31,040
n xlr and rotations

215
00:09:31,040 --> 00:09:34,240
and arithmetic operations such as

216
00:09:34,240 --> 00:09:37,839
admission and subtraction

217
00:09:39,360 --> 00:09:43,200
the c-class ic supports the conversion

218
00:09:43,200 --> 00:09:45,920
of operas under boolean masking to

219
00:09:45,920 --> 00:09:49,680
arithmetic masking and vice version

220
00:09:49,680 --> 00:09:52,560
finally add class ic

221
00:09:52,560 --> 00:09:53,760
includes

222
00:09:53,760 --> 00:09:57,200
boolean masking arithmetic operation in

223
00:09:57,200 --> 00:10:00,240
the final field

224
00:10:00,240 --> 00:10:02,959
they are especially useful and generic

225
00:10:02,959 --> 00:10:05,040
to support mask

226
00:10:05,040 --> 00:10:08,720
aes and aes like designs

227
00:10:08,720 --> 00:10:13,120
for example sm4 or camellia

228
00:10:13,120 --> 00:10:15,600
at the high level system

229
00:10:15,600 --> 00:10:18,880
we design and implement the ic on our

230
00:10:18,880 --> 00:10:20,880
scarf core

231
00:10:20,880 --> 00:10:25,279
a fast based pipeline rb32imcb

232
00:10:25,279 --> 00:10:27,200
microcontroller

233
00:10:27,200 --> 00:10:31,120
we introduce a masking specific iou to

234
00:10:31,120 --> 00:10:36,240
execute the ic at the execution stage

235
00:10:36,240 --> 00:10:39,760
we employ pair visitor file and try to

236
00:10:39,760 --> 00:10:43,279
minimize the changing of the base core

237
00:10:43,279 --> 00:10:45,519
at the back to accommodate the

238
00:10:45,519 --> 00:10:47,360
additional operands

239
00:10:47,360 --> 00:10:50,079
of the masking operations

240
00:10:50,079 --> 00:10:53,440
especially we take careful efforts

241
00:10:53,440 --> 00:10:55,680
to mitigate the possibilities of

242
00:10:55,680 --> 00:10:58,320
accidental share combination along the

243
00:10:58,320 --> 00:11:00,560
data path

244
00:11:00,560 --> 00:11:03,600
the masking pacific iou is the main

245
00:11:03,600 --> 00:11:08,000
component to execute on mask ic

246
00:11:08,000 --> 00:11:11,360
the mask ious is designed and

247
00:11:11,360 --> 00:11:14,560
implemented consisting of the following

248
00:11:14,560 --> 00:11:15,680
modules

249
00:11:15,680 --> 00:11:19,040
to support masked operations in a manner

250
00:11:19,040 --> 00:11:22,240
for area efficiency and leakage

251
00:11:22,240 --> 00:11:24,800
awareness

252
00:11:25,120 --> 00:11:26,880
random-based generation

253
00:11:26,880 --> 00:11:31,040
rbg generates random masks

254
00:11:31,040 --> 00:11:34,959
for the masking and remasking operations

255
00:11:34,959 --> 00:11:37,920
in the mask alu

256
00:11:37,920 --> 00:11:42,320
based on the demand of mass operations

257
00:11:42,320 --> 00:11:45,519
this includes two instances

258
00:11:45,519 --> 00:11:47,120
each instance

259
00:11:47,120 --> 00:11:49,440
used the hybrid design

260
00:11:49,440 --> 00:11:52,399
motivated by the trade-off between area

261
00:11:52,399 --> 00:11:54,839
throughput and randomness

262
00:11:54,839 --> 00:11:58,399
quality it includes both

263
00:11:58,399 --> 00:12:02,880
musical and true random components

264
00:12:04,079 --> 00:12:05,920
a f class

265
00:12:05,920 --> 00:12:09,279
instructions are supported by separate

266
00:12:09,279 --> 00:12:10,880
modules

267
00:12:10,880 --> 00:12:13,600
b and c's instructions

268
00:12:13,600 --> 00:12:16,320
are executed in an area optimized

269
00:12:16,320 --> 00:12:17,360
modules

270
00:12:17,360 --> 00:12:18,240
which

271
00:12:18,240 --> 00:12:20,720
leverage

272
00:12:20,720 --> 00:12:24,079
integration in and functionality reuse

273
00:12:24,079 --> 00:12:26,399
between operations

274
00:12:26,399 --> 00:12:29,839
especially we carefully mitigate glitch

275
00:12:29,839 --> 00:12:31,680
related leakages

276
00:12:31,680 --> 00:12:35,760
in the mat alu by adopting the

277
00:12:35,760 --> 00:12:40,079
domain oriented masking based strategies

278
00:12:40,079 --> 00:12:44,320
domain oriented masking dome he applied

279
00:12:44,320 --> 00:12:48,079
for non-linear mask operations in the

280
00:12:48,079 --> 00:12:50,320
mask alu

281
00:12:50,320 --> 00:12:53,440
for example boolean mask and and boolean

282
00:12:53,440 --> 00:12:56,720
mask fill multiplier

283
00:12:56,720 --> 00:13:00,079
the figures show the circus

284
00:13:00,079 --> 00:13:03,200
of the masked end and the masked fuel

285
00:13:03,200 --> 00:13:05,680
multiplier

286
00:13:05,680 --> 00:13:09,440
as we can see the circus follows two

287
00:13:09,440 --> 00:13:11,120
principles

288
00:13:11,120 --> 00:13:14,720
the first is separating the operation on

289
00:13:14,720 --> 00:13:16,800
associated search

290
00:13:16,800 --> 00:13:18,839
into their separated

291
00:13:18,839 --> 00:13:22,320
domains the second is inserting the

292
00:13:22,320 --> 00:13:25,680
latching and remask steps

293
00:13:25,680 --> 00:13:29,120
for cross-domain operations to prevent

294
00:13:29,120 --> 00:13:32,959
glitch related leakage

295
00:13:33,040 --> 00:13:36,639
moreover we carefully select suitable

296
00:13:36,639 --> 00:13:40,800
independent and dom dependent variances

297
00:13:40,800 --> 00:13:43,839
regarding the dependency between the two

298
00:13:43,839 --> 00:13:46,560
input operands

299
00:13:46,560 --> 00:13:50,000
for example dom dependence is applied

300
00:13:50,000 --> 00:13:52,079
for mask n

301
00:13:52,079 --> 00:13:55,600
and dom independent e form mask

302
00:13:55,600 --> 00:13:58,880
field multiplier

303
00:13:59,199 --> 00:14:00,959
in edison

304
00:14:00,959 --> 00:14:02,639
we insert the

305
00:14:02,639 --> 00:14:05,760
additional remasking steps

306
00:14:05,760 --> 00:14:08,480
where is necessary or possible

307
00:14:08,480 --> 00:14:10,399
this is a con

308
00:14:10,399 --> 00:14:12,639
conservative decision

309
00:14:12,639 --> 00:14:16,720
with respect to the leakages

310
00:14:16,720 --> 00:14:20,160
especially we adopt the use of double

311
00:14:20,160 --> 00:14:21,279
bomb

312
00:14:21,279 --> 00:14:23,600
blocking to mitigate the latency

313
00:14:23,600 --> 00:14:25,440
overhead caused

314
00:14:25,440 --> 00:14:29,040
by the cross-domain latching

315
00:14:29,040 --> 00:14:32,160
for example the inputs and outputs flip

316
00:14:32,160 --> 00:14:35,120
flops operate with the different clock

317
00:14:35,120 --> 00:14:36,240
edges

318
00:14:36,240 --> 00:14:39,920
versus the latching ones

319
00:14:42,240 --> 00:14:45,120
to evaluate the area overhead we

320
00:14:45,120 --> 00:14:48,160
consider two variants compared to the

321
00:14:48,160 --> 00:14:51,199
baseline core without ic

322
00:14:51,199 --> 00:14:52,560
namely

323
00:14:52,560 --> 00:14:56,839
i see cbi supporting a b and c

324
00:14:56,839 --> 00:15:01,360
classes and i see cbaf

325
00:15:01,360 --> 00:15:06,720
supporting abc and f classes

326
00:15:07,199 --> 00:15:10,240
we synthesize the systems for two

327
00:15:10,240 --> 00:15:12,720
implementation targets

328
00:15:12,720 --> 00:15:15,760
fpga and asic

329
00:15:15,760 --> 00:15:19,920
the results are reported in the table

330
00:15:19,920 --> 00:15:23,440
we can see that the area overheads of ic

331
00:15:23,440 --> 00:15:27,120
cbs is fairly modest

332
00:15:27,120 --> 00:15:30,880
which support the f-class instructions

333
00:15:30,880 --> 00:15:33,519
this over has further increases

334
00:15:33,519 --> 00:15:37,079
in the iccbaf

335
00:15:37,440 --> 00:15:40,920
one can feel this at a trade-off to

336
00:15:40,920 --> 00:15:43,680
specifically support

337
00:15:43,680 --> 00:15:48,800
ies and aes like cyphers

338
00:15:48,880 --> 00:15:51,360
after the implementation of the masked

339
00:15:51,360 --> 00:15:54,880
ic hardware system we evaluate the ic

340
00:15:54,880 --> 00:15:58,880
utilization through ic assisted software

341
00:15:58,880 --> 00:16:02,000
for a range of cryptographic kernels

342
00:16:02,000 --> 00:16:04,880
while we implement such ic assistance

343
00:16:04,880 --> 00:16:09,040
software we face some challenges which

344
00:16:09,040 --> 00:16:12,560
are fairly like that of maxing software

345
00:16:12,560 --> 00:16:15,279
using the base i said only

346
00:16:15,279 --> 00:16:17,199
for example first

347
00:16:17,199 --> 00:16:19,519
various design choices regarding

348
00:16:19,519 --> 00:16:22,720
function in lining and loop and rolling

349
00:16:22,720 --> 00:16:25,600
for a foreign implementation

350
00:16:25,600 --> 00:16:28,800
second register assessed regarding

351
00:16:28,800 --> 00:16:31,519
efficient utilization of a limited

352
00:16:31,519 --> 00:16:33,839
number of registers

353
00:16:33,839 --> 00:16:35,360
pair registers

354
00:16:35,360 --> 00:16:37,519
and avoiding leakage

355
00:16:37,519 --> 00:16:42,000
from moving cells to and from registers

356
00:16:42,000 --> 00:16:44,560
and first the possibilities of

357
00:16:44,560 --> 00:16:47,839
existential unmasking caused by

358
00:16:47,839 --> 00:16:51,120
speculative execution

359
00:16:51,120 --> 00:16:54,079
however we found that implementing a

360
00:16:54,079 --> 00:16:57,279
mask function using the ics in less

361
00:16:57,279 --> 00:16:58,240
effort

362
00:16:58,240 --> 00:17:00,240
than using the isa

363
00:17:00,240 --> 00:17:02,639
and securing such implementation

364
00:17:02,639 --> 00:17:05,199
involves a similar process

365
00:17:05,199 --> 00:17:08,799
but using the ics is easier because the

366
00:17:08,799 --> 00:17:12,000
program is softer

367
00:17:12,799 --> 00:17:15,760
generally the cryptographic kernels are

368
00:17:15,760 --> 00:17:19,039
implemented using assembly language

369
00:17:19,039 --> 00:17:21,359
and we addressed the implementation

370
00:17:21,359 --> 00:17:24,160
challenges manually

371
00:17:24,160 --> 00:17:26,720
in addition for a comprehensive

372
00:17:26,720 --> 00:17:30,080
evaluation of the ic utilization for

373
00:17:30,080 --> 00:17:31,600
each kernel

374
00:17:31,600 --> 00:17:35,280
we implement at least three variants

375
00:17:35,280 --> 00:17:37,440
namely a mask

376
00:17:37,440 --> 00:17:40,080
for unprotected implementation

377
00:17:40,080 --> 00:17:41,760
isa must

378
00:17:41,760 --> 00:17:44,320
for masking implementation using only

379
00:17:44,320 --> 00:17:49,600
the base isa and ic mask for masking

380
00:17:49,600 --> 00:17:53,760
implementation using the proper ic

381
00:17:53,760 --> 00:17:56,400
due to the importance of aes we

382
00:17:56,400 --> 00:17:59,039
particularly focus on it

383
00:17:59,039 --> 00:18:01,679
by design aes can be implemented on

384
00:18:01,679 --> 00:18:03,840
hardware software platforms

385
00:18:03,840 --> 00:18:06,400
with different approaches

386
00:18:06,400 --> 00:18:09,600
for the mask implementation we evaluate

387
00:18:09,600 --> 00:18:12,240
various implementation approaches

388
00:18:12,240 --> 00:18:16,160
namely text mode t table and ic

389
00:18:16,160 --> 00:18:18,640
supporting acceleration

390
00:18:18,640 --> 00:18:20,640
that would provide a more dimensional

391
00:18:20,640 --> 00:18:22,880
comparison

392
00:18:22,880 --> 00:18:25,280
we found that not on implementation

393
00:18:25,280 --> 00:18:26,320
above

394
00:18:26,320 --> 00:18:28,880
are easy to match

395
00:18:28,880 --> 00:18:32,640
for the isi mask implementation we adopt

396
00:18:32,640 --> 00:18:34,960
the ribbon product scheme

397
00:18:34,960 --> 00:18:37,919
this game computes few inversions using

398
00:18:37,919 --> 00:18:41,440
squares and multiplications

399
00:18:41,440 --> 00:18:44,960
for the icy mask implementation we also

400
00:18:44,960 --> 00:18:47,679
leverage the ribbon brow scheme

401
00:18:47,679 --> 00:18:51,440
we employ the mask ac to compute the

402
00:18:51,440 --> 00:18:52,240
mask

403
00:18:52,240 --> 00:18:54,799
operations in the scheme

404
00:18:54,799 --> 00:18:57,919
as expected the mask

405
00:18:57,919 --> 00:19:00,400
ic brings a significant performance

406
00:19:00,400 --> 00:19:01,760
boost

407
00:19:01,760 --> 00:19:05,280
as we can see in the table

408
00:19:05,919 --> 00:19:10,160
to demonstrate the general realities of

409
00:19:10,160 --> 00:19:14,000
the ic we also evaluated the utilization

410
00:19:14,000 --> 00:19:16,480
of the ic using other cryptographic

411
00:19:16,480 --> 00:19:17,600
kernels

412
00:19:17,600 --> 00:19:18,640
namely

413
00:19:18,640 --> 00:19:20,640
sm4 spec

414
00:19:20,640 --> 00:19:24,880
spark and charger 20.

415
00:19:24,880 --> 00:19:27,760
as you can see in the table the base isa

416
00:19:27,760 --> 00:19:31,280
mask implementations suffer enormous

417
00:19:31,280 --> 00:19:33,520
increased overheads

418
00:19:33,520 --> 00:19:37,440
the ic assisted masking as expected

419
00:19:37,440 --> 00:19:39,600
against more than one order of

420
00:19:39,600 --> 00:19:42,559
magnitude's overhead reduction in terms

421
00:19:42,559 --> 00:19:45,120
of construction count

422
00:19:45,120 --> 00:19:47,919
and cycle count in comparison to the

423
00:19:47,919 --> 00:19:51,360
base isa alternative

424
00:19:51,360 --> 00:19:54,400
regarding the security of masking our

425
00:19:54,400 --> 00:19:57,360
strategies modley relies on the dome

426
00:19:57,360 --> 00:19:58,799
approach

427
00:19:58,799 --> 00:20:02,320
for the ic implementation in hardware as

428
00:20:02,320 --> 00:20:03,679
mentioned above

429
00:20:03,679 --> 00:20:06,720
then we do empirical validation by

430
00:20:06,720 --> 00:20:09,360
evaluating the leakage of large

431
00:20:09,360 --> 00:20:12,000
cryptographic kernels of which

432
00:20:12,000 --> 00:20:14,720
implementations are constructed by using

433
00:20:14,720 --> 00:20:17,760
the glitch resilient ic

434
00:20:17,760 --> 00:20:19,600
in this regard our

435
00:20:19,600 --> 00:20:23,120
implementation of the mask ice built on

436
00:20:23,120 --> 00:20:26,159
the sasebo g3 side channel analysis

437
00:20:26,159 --> 00:20:27,840
platform

438
00:20:27,840 --> 00:20:30,559
and we used tboa based

439
00:20:30,559 --> 00:20:32,159
liquid detection

440
00:20:32,159 --> 00:20:35,120
to evaluate the security of the masked

441
00:20:35,120 --> 00:20:38,399
cryptographic kernels

442
00:20:38,480 --> 00:20:41,919
for example the figures show the leakage

443
00:20:41,919 --> 00:20:45,600
evaluation for ies kernels

444
00:20:45,600 --> 00:20:49,520
each evaluation employs a set of

445
00:20:49,520 --> 00:20:51,760
100 and thousand power consumption

446
00:20:51,760 --> 00:20:53,280
choices

447
00:20:53,280 --> 00:20:56,559
the blue plot saw the t value of an

448
00:20:56,559 --> 00:20:59,679
evaluation and the red lines are the

449
00:20:59,679 --> 00:21:02,960
question for liquid detection in a tvoa

450
00:21:02,960 --> 00:21:05,280
evaluation

451
00:21:05,280 --> 00:21:07,200
as we can see

452
00:21:07,200 --> 00:21:10,480
the leakage is clearly observed

453
00:21:10,480 --> 00:21:13,039
in the evaluation of the unmasked

454
00:21:13,039 --> 00:21:14,960
implementation

455
00:21:14,960 --> 00:21:17,760
by carefully implementing masking the

456
00:21:17,760 --> 00:21:18,960
isomat

457
00:21:18,960 --> 00:21:22,000
and ic mask implementations

458
00:21:22,000 --> 00:21:24,320
can mitigate the leakage below the

459
00:21:24,320 --> 00:21:26,320
pressures

460
00:21:26,320 --> 00:21:28,559
the leakage evaluation

461
00:21:28,559 --> 00:21:31,760
of other kernels obtained the same

462
00:21:31,760 --> 00:21:34,320
results

463
00:21:35,120 --> 00:21:36,400
in summary

464
00:21:36,400 --> 00:21:39,600
we presented the design implementation

465
00:21:39,600 --> 00:21:42,880
and evaluation of an ic to support

466
00:21:42,880 --> 00:21:45,679
software software-based masking

467
00:21:45,679 --> 00:21:48,799
our evaluation such that the ic can

468
00:21:48,799 --> 00:21:52,080
support efficient secure first order

469
00:21:52,080 --> 00:21:53,919
masked software

470
00:21:53,919 --> 00:21:55,280
for example

471
00:21:55,280 --> 00:21:59,520
ic assisted mask implementation of aes

472
00:21:59,520 --> 00:22:02,640
in order of magnitude more efficiencies

473
00:22:02,640 --> 00:22:06,320
than the software only alternative

474
00:22:06,320 --> 00:22:07,520
moreover

475
00:22:07,520 --> 00:22:11,200
our ic allows maintenance maintaining

476
00:22:11,200 --> 00:22:12,400
the flexibility

477
00:22:12,400 --> 00:22:15,360
of a software to suit several

478
00:22:15,360 --> 00:22:18,559
cryptographic algorithms while incurring

479
00:22:18,559 --> 00:22:22,720
acceptable inherent area overhead

480
00:22:22,720 --> 00:22:25,440
however utilizing the

481
00:22:25,440 --> 00:22:28,559
in us transfer work

482
00:22:28,559 --> 00:22:32,080
which demands care for example ensure

483
00:22:32,080 --> 00:22:34,640
non-interaction between says

484
00:22:34,640 --> 00:22:36,799
load and store sales

485
00:22:36,799 --> 00:22:40,720
and deal with registered pressure

486
00:22:40,720 --> 00:22:42,559
through the experiences

487
00:22:42,559 --> 00:22:45,840
of implementing and applying the mass ic

488
00:22:45,840 --> 00:22:48,880
for a range of cryptographic kernels

489
00:22:48,880 --> 00:22:50,480
and the results

490
00:22:50,480 --> 00:22:53,520
we recognize various higher level

491
00:22:53,520 --> 00:22:54,720
directions

492
00:22:54,720 --> 00:22:57,440
represent either important or

493
00:22:57,440 --> 00:22:59,679
interesting feature works

494
00:22:59,679 --> 00:23:01,280
for example

495
00:23:01,280 --> 00:23:04,400
this is interesting to look at how an

496
00:23:04,400 --> 00:23:06,480
icy assistive approach

497
00:23:06,480 --> 00:23:09,919
supports generalized masking skins

498
00:23:09,919 --> 00:23:10,720
like

499
00:23:10,720 --> 00:23:12,960
higher order masking

500
00:23:12,960 --> 00:23:16,159
and how an ic can be changed

501
00:23:16,159 --> 00:23:19,679
to support flexible work sizes

502
00:23:19,679 --> 00:23:21,840
like sitting

503
00:23:21,840 --> 00:23:24,959
and 64 bit

504
00:23:25,039 --> 00:23:28,559
we also recognized that the support of

505
00:23:28,559 --> 00:23:32,159
the mask ic allows implementing secure

506
00:23:32,159 --> 00:23:35,679
masking software less complicated

507
00:23:35,679 --> 00:23:39,360
which potentially enables an automatic

508
00:23:39,360 --> 00:23:43,200
generation of mass implementation

509
00:23:43,200 --> 00:23:46,320
so it is interesting to look at how

510
00:23:46,320 --> 00:23:47,279
short

511
00:23:47,279 --> 00:23:51,200
masked ic can be integrated into an

512
00:23:51,200 --> 00:23:52,960
automatic tune

513
00:23:52,960 --> 00:23:56,080
like tornado

514
00:23:56,240 --> 00:23:59,840
in edison there are possible extensions

515
00:23:59,840 --> 00:24:02,640
to support the long-term importance

516
00:24:02,640 --> 00:24:03,360
of

517
00:24:03,360 --> 00:24:06,400
post-quantum cryptography

518
00:24:06,400 --> 00:24:07,919
in more general

519
00:24:07,919 --> 00:24:10,799
the ic can be can have possible

520
00:24:10,799 --> 00:24:13,440
extensions to assist with various

521
00:24:13,440 --> 00:24:15,360
challenges

522
00:24:15,360 --> 00:24:18,880
for example secure register access

523
00:24:18,880 --> 00:24:23,279
and select memory access

524
00:24:24,799 --> 00:24:27,840
so that my presentation of course

525
00:24:27,840 --> 00:24:30,080
this would have some unclear details in

526
00:24:30,080 --> 00:24:31,760
the presentation

527
00:24:31,760 --> 00:24:34,480
i would like to encourage you to read

528
00:24:34,480 --> 00:24:37,279
the paper for full technical details

529
00:24:37,279 --> 00:24:39,600
i look forward to answer any question

530
00:24:39,600 --> 00:24:41,039
that you may have

531
00:24:41,039 --> 00:24:43,840
asked the live section or you can drop

532
00:24:43,840 --> 00:24:46,880
us an email using the addresses on the

533
00:24:46,880 --> 00:24:48,799
first slide

534
00:24:48,799 --> 00:24:52,520
thank you for listening

