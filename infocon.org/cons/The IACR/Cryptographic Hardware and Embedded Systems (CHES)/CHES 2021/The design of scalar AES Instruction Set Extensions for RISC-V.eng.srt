1
00:00:01,599 --> 00:00:03,520
hello all welcome to our talk on the

2
00:00:03,520 --> 00:00:05,680
design of the new aes instruction set

3
00:00:05,680 --> 00:00:08,160
extensions for risk five uh the aim of

4
00:00:08,160 --> 00:00:09,599
this talk is basically to give you an

5
00:00:09,599 --> 00:00:11,519
overview of what risk five is and our

6
00:00:11,519 --> 00:00:13,679
role within it um talk a little bit

7
00:00:13,679 --> 00:00:15,040
about instruction set extensions for

8
00:00:15,040 --> 00:00:16,800
cryptography generally and then the

9
00:00:16,800 --> 00:00:18,560
specific ones that we've built for risk

10
00:00:18,560 --> 00:00:20,720
five um so we'll talk you through our

11
00:00:20,720 --> 00:00:22,560
design process explain how these new

12
00:00:22,560 --> 00:00:24,000
instructions work because i hope a lot

13
00:00:24,000 --> 00:00:25,599
of you will be using them

14
00:00:25,599 --> 00:00:28,000
and then explain sort of our next steps

15
00:00:28,000 --> 00:00:29,119
as a group

16
00:00:29,119 --> 00:00:30,560
as a group of people who are developing

17
00:00:30,560 --> 00:00:33,040
instructions for risk five um we're

18
00:00:33,040 --> 00:00:34,480
going to keep the talk as technical as

19
00:00:34,480 --> 00:00:36,719
possible within the time so most of the

20
00:00:36,719 --> 00:00:38,640
details will still be in the paper

21
00:00:38,640 --> 00:00:39,760
and if you're watching this through on

22
00:00:39,760 --> 00:00:41,120
youtube i will not blame you if you

23
00:00:41,120 --> 00:00:42,800
watch this back at half speed because it

24
00:00:42,800 --> 00:00:46,239
is quite dense so moving on to exactly

25
00:00:46,239 --> 00:00:47,920
what risk five is

26
00:00:47,920 --> 00:00:49,840
so in their own words it's a free and

27
00:00:49,840 --> 00:00:52,800
open iso that lets anyone

28
00:00:52,800 --> 00:00:54,719
pick up the specification and build a

29
00:00:54,719 --> 00:00:58,480
cpu or software to execute on that

30
00:00:58,480 --> 00:01:00,239
as opposed to someone like arm or risk

31
00:01:00,239 --> 00:01:01,920
five where either cost you a lot of

32
00:01:01,920 --> 00:01:03,760
money to buy the chip or simply license

33
00:01:03,760 --> 00:01:04,959
the design

34
00:01:04,959 --> 00:01:06,640
this means anyone can use risk five for

35
00:01:06,640 --> 00:01:08,240
free so it's very popular in research

36
00:01:08,240 --> 00:01:09,360
and industry

37
00:01:09,360 --> 00:01:11,600
particularly in industry for niche

38
00:01:11,600 --> 00:01:13,680
applications like security

39
00:01:13,680 --> 00:01:15,360
and the main principles of risk five are

40
00:01:15,360 --> 00:01:17,759
that it's a very small base instruction

41
00:01:17,759 --> 00:01:19,600
set architecture and then you have

42
00:01:19,600 --> 00:01:21,280
domain specific extensions for

43
00:01:21,280 --> 00:01:23,119
particular things

44
00:01:23,119 --> 00:01:24,080
so this

45
00:01:24,080 --> 00:01:26,640
incomplete map sort of shows this so the

46
00:01:26,640 --> 00:01:28,159
bottom you've got the base instruction

47
00:01:28,159 --> 00:01:30,240
set and then each of the little bricks

48
00:01:30,240 --> 00:01:32,720
represents sort of an extension on top

49
00:01:32,720 --> 00:01:34,720
um the blue ones are ratified so that

50
00:01:34,720 --> 00:01:36,479
means they're frozen and won't change

51
00:01:36,479 --> 00:01:38,479
the bright yellow ones are sort of being

52
00:01:38,479 --> 00:01:41,360
developed currently and then

53
00:01:41,360 --> 00:01:44,320
slightly the paler yellow ones are on

54
00:01:44,320 --> 00:01:45,520
the road map

55
00:01:45,520 --> 00:01:47,680
and some of these are extensions are

56
00:01:47,680 --> 00:01:49,600
being ratified this year including the

57
00:01:49,600 --> 00:01:51,759
scalar cryptography instruction set that

58
00:01:51,759 --> 00:01:54,159
we have been working to extend with

59
00:01:54,159 --> 00:01:56,399
these aes instructions

60
00:01:56,399 --> 00:01:57,840
so that's the focus of this talk it's

61
00:01:57,840 --> 00:01:59,520
not so much the scalar cryptography

62
00:01:59,520 --> 00:02:01,840
instruction set extension specifically

63
00:02:01,840 --> 00:02:03,520
but the design process that we went

64
00:02:03,520 --> 00:02:06,079
through to build the aes accelerator

65
00:02:06,079 --> 00:02:09,840
instructions for risk five

66
00:02:11,200 --> 00:02:14,080
so just to introduce instruction set

67
00:02:14,080 --> 00:02:15,520
extensions for cryptography more

68
00:02:15,520 --> 00:02:17,760
generally so these screenshots are from

69
00:02:17,760 --> 00:02:20,480
the arm manual on the left and the intel

70
00:02:20,480 --> 00:02:22,720
uh blog on the right introducing their

71
00:02:22,720 --> 00:02:25,440
aes acceleration instructions um we're

72
00:02:25,440 --> 00:02:27,520
also on some level familiar with these

73
00:02:27,520 --> 00:02:29,599
the idea being that if you add an

74
00:02:29,599 --> 00:02:31,120
instruction to your architecture that

75
00:02:31,120 --> 00:02:33,519
performs the very specific operation

76
00:02:33,519 --> 00:02:35,840
that aes does or indeed any other piece

77
00:02:35,840 --> 00:02:37,519
of cryptography or the particular

78
00:02:37,519 --> 00:02:39,840
specific operation that your cpu needs

79
00:02:39,840 --> 00:02:42,319
to do you can get an enormous uh power

80
00:02:42,319 --> 00:02:43,760
performance

81
00:02:43,760 --> 00:02:44,959
improvement

82
00:02:44,959 --> 00:02:47,360
um so you know the the more and

83
00:02:47,360 --> 00:02:48,879
cryptography is a really good example of

84
00:02:48,879 --> 00:02:50,800
sort of domain specific instruction set

85
00:02:50,800 --> 00:02:52,720
extensions because you get such an

86
00:02:52,720 --> 00:02:54,720
enormous performance increase you can

87
00:02:54,720 --> 00:02:56,480
very often get a security benefit as

88
00:02:56,480 --> 00:02:58,959
well by removing timing attack vectors

89
00:02:58,959 --> 00:03:01,040
so for aes this means that you're no

90
00:03:01,040 --> 00:03:03,200
longer computing your s boxes and your

91
00:03:03,200 --> 00:03:05,360
mixed columns operations through t

92
00:03:05,360 --> 00:03:06,480
tables

93
00:03:06,480 --> 00:03:08,319
um and you

94
00:03:08,319 --> 00:03:10,080
uh also get us something of a

95
00:03:10,080 --> 00:03:13,760
portability benefit so for uh

96
00:03:13,760 --> 00:03:15,280
sort of smaller embedded applications

97
00:03:15,280 --> 00:03:16,640
where everyone's using a slightly

98
00:03:16,640 --> 00:03:18,800
different dedicated aes sort of

99
00:03:18,800 --> 00:03:21,599
accelerator engine um you have to

100
00:03:21,599 --> 00:03:23,519
interact with via the fire some sort of

101
00:03:23,519 --> 00:03:25,200
hardware abstraction layer that's a bit

102
00:03:25,200 --> 00:03:26,799
of a faff and it's quite difficult to do

103
00:03:26,799 --> 00:03:28,879
for portable software whereas if you've

104
00:03:28,879 --> 00:03:30,480
got them built into the instruction set

105
00:03:30,480 --> 00:03:32,239
software can always rely on them being

106
00:03:32,239 --> 00:03:33,120
there

107
00:03:33,120 --> 00:03:34,879
um the flip side of this is that

108
00:03:34,879 --> 00:03:36,959
particularly for aes

109
00:03:36,959 --> 00:03:39,280
um most of the way that these

110
00:03:39,280 --> 00:03:40,720
instruction set extensions have been

111
00:03:40,720 --> 00:03:42,080
defined and if i flick back to the

112
00:03:42,080 --> 00:03:44,319
previous slide you sort of see this is

113
00:03:44,319 --> 00:03:47,360
that they build on top of the existing

114
00:03:47,360 --> 00:03:51,280
uh cmd or vector registers in the cpu

115
00:03:51,280 --> 00:03:53,439
and that's great because uh

116
00:03:53,439 --> 00:03:55,519
aes cryptography generally tends to have

117
00:03:55,519 --> 00:03:57,840
quite large inputs to its operations so

118
00:03:57,840 --> 00:03:59,040
if you've already got these big

119
00:03:59,040 --> 00:04:00,879
registers in your cpus it makes perfect

120
00:04:00,879 --> 00:04:03,200
sense to reuse them you can see here on

121
00:04:03,200 --> 00:04:04,959
the bottom left here that you know it's

122
00:04:04,959 --> 00:04:08,480
128 bits going in 128 bits coming out

123
00:04:08,480 --> 00:04:10,000
and that's great if you've already got

124
00:04:10,000 --> 00:04:12,239
these big registers in your cpu but for

125
00:04:12,239 --> 00:04:14,319
a large class of cpu that's just not

126
00:04:14,319 --> 00:04:16,399
feasible they are designed to be area

127
00:04:16,399 --> 00:04:18,798
optimized and very very small

128
00:04:18,798 --> 00:04:19,600
um

129
00:04:19,600 --> 00:04:21,279
and of course lots of you have written

130
00:04:21,279 --> 00:04:22,720
software for sort of embedded

131
00:04:22,720 --> 00:04:24,479
microcontroller platforms like arm

132
00:04:24,479 --> 00:04:27,120
cortex m something um and you know that

133
00:04:27,120 --> 00:04:28,479
you know writing cryptography for those

134
00:04:28,479 --> 00:04:30,479
can be a right pain um it can really

135
00:04:30,479 --> 00:04:32,639
benefit from having sort of some level

136
00:04:32,639 --> 00:04:34,560
of accelerated cryptography both in

137
00:04:34,560 --> 00:04:36,240
terms of performance but for smaller

138
00:04:36,240 --> 00:04:38,320
devices in particular uh it's more about

139
00:04:38,320 --> 00:04:40,160
power efficiency as well

140
00:04:40,160 --> 00:04:41,840
um so that's the good and the bad of

141
00:04:41,840 --> 00:04:43,280
sort of instruction set extensions for

142
00:04:43,280 --> 00:04:45,520
cryptography the ugly until recently was

143
00:04:45,520 --> 00:04:46,880
that risk life didn't have any

144
00:04:46,880 --> 00:04:49,280
cryptography acceleration um and they've

145
00:04:49,280 --> 00:04:50,960
been papers pointing out that actually

146
00:04:50,960 --> 00:04:52,479
risk five struggles in a lot of regard

147
00:04:52,479 --> 00:04:54,080
when it comes to sort of certain

148
00:04:54,080 --> 00:04:55,680
cryptographic primitives

149
00:04:55,680 --> 00:04:57,600
so that was our job so the authors of

150
00:04:57,600 --> 00:04:59,360
this paper and a whole bunch of other

151
00:04:59,360 --> 00:05:00,479
people

152
00:05:00,479 --> 00:05:01,600
are members of the risk five

153
00:05:01,600 --> 00:05:03,360
cryptography extension task group and

154
00:05:03,360 --> 00:05:05,919
it's our job to make risk five the best

155
00:05:05,919 --> 00:05:07,280
architecture out there for doing

156
00:05:07,280 --> 00:05:09,680
cryptography and that's hopefully what

157
00:05:09,680 --> 00:05:13,680
we've uh somewhat achieved um and again

158
00:05:13,680 --> 00:05:15,199
this presentation will take you through

159
00:05:15,199 --> 00:05:17,039
the aes versions

160
00:05:17,039 --> 00:05:18,800
um

161
00:05:18,800 --> 00:05:20,400
so the first

162
00:05:20,400 --> 00:05:22,479
question we started with when building

163
00:05:22,479 --> 00:05:24,160
these extensions was do we go down the

164
00:05:24,160 --> 00:05:26,240
traditional route of accelerating air

165
00:05:26,240 --> 00:05:28,240
yes do we reuse the

166
00:05:28,240 --> 00:05:30,080
sort of forthcoming risk five vector

167
00:05:30,080 --> 00:05:32,720
registers um or do we take do something

168
00:05:32,720 --> 00:05:33,840
a bit different that's not actually been

169
00:05:33,840 --> 00:05:35,840
done before do we look at the scalar

170
00:05:35,840 --> 00:05:37,759
approach which is to only use existing

171
00:05:37,759 --> 00:05:39,520
general purpose registers

172
00:05:39,520 --> 00:05:41,600
um

173
00:05:41,600 --> 00:05:43,680
in true risk five fashion we actually

174
00:05:43,680 --> 00:05:45,919
decided to do both but we're focusing on

175
00:05:45,919 --> 00:05:47,759
the scalar

176
00:05:47,759 --> 00:05:50,400
instructions first because they're ready

177
00:05:50,400 --> 00:05:51,919
whereas the risk flight vector extension

178
00:05:51,919 --> 00:05:53,919
is still being defined so you probably

179
00:05:53,919 --> 00:05:54,960
guessed from the title of this

180
00:05:54,960 --> 00:05:56,560
presentation we're looking at scalar

181
00:05:56,560 --> 00:05:58,639
stuff now and what makes scalar

182
00:05:58,639 --> 00:06:00,560
different is that your input and opera

183
00:06:00,560 --> 00:06:01,680
input

184
00:06:01,680 --> 00:06:04,080
registers are maybe only 32 bit or 64

185
00:06:04,080 --> 00:06:07,120
bits wide as opposed to 128 bits

186
00:06:07,120 --> 00:06:09,840
um and this means that inevitably your

187
00:06:09,840 --> 00:06:10,960
implementation is going to be a little

188
00:06:10,960 --> 00:06:12,720
bit slower but it's going to be

189
00:06:12,720 --> 00:06:16,000
available to a much much larger set of

190
00:06:16,000 --> 00:06:18,880
cpu types

191
00:06:18,880 --> 00:06:19,919
and that was the really interesting

192
00:06:19,919 --> 00:06:21,520
thing from a five perspective because

193
00:06:21,520 --> 00:06:22,319
that's

194
00:06:22,319 --> 00:06:23,919
currently it's most popular in the sort

195
00:06:23,919 --> 00:06:26,080
of embedded compute space

196
00:06:26,080 --> 00:06:28,719
um so

197
00:06:28,800 --> 00:06:30,560
in terms of what we actually did to

198
00:06:30,560 --> 00:06:33,039
define these instructions um and our

199
00:06:33,039 --> 00:06:34,400
sort of approach we basically went

200
00:06:34,400 --> 00:06:36,000
looking through the literature we had a

201
00:06:36,000 --> 00:06:38,160
really positive experience going through

202
00:06:38,160 --> 00:06:40,960
um existing stuff uh chairs and various

203
00:06:40,960 --> 00:06:43,199
other venues going back years for how

204
00:06:43,199 --> 00:06:45,680
people thought about adding

205
00:06:45,680 --> 00:06:48,000
uh instruction set extensions to 32-bit

206
00:06:48,000 --> 00:06:50,560
processors in order to speed up aes

207
00:06:50,560 --> 00:06:52,960
um so we find sort of three distinct

208
00:06:52,960 --> 00:06:54,639
pre-existing works that you can see sort

209
00:06:54,639 --> 00:06:56,880
of snapshotted here and we also invented

210
00:06:56,880 --> 00:06:59,680
a couple of our own two our own designs

211
00:06:59,680 --> 00:07:01,280
one of which was for the 64-bit

212
00:07:01,280 --> 00:07:02,560
architecture because we didn't actually

213
00:07:02,560 --> 00:07:03,840
find any

214
00:07:03,840 --> 00:07:06,319
uh sort of 64-bit only work in the

215
00:07:06,319 --> 00:07:08,160
literature for

216
00:07:08,160 --> 00:07:10,000
accelerating aes and then we went

217
00:07:10,000 --> 00:07:11,440
through a fairly standard process of

218
00:07:11,440 --> 00:07:13,360
benchmarking their software performance

219
00:07:13,360 --> 00:07:14,720
looking at static and dynamic

220
00:07:14,720 --> 00:07:16,880
instruction counts how much they cost to

221
00:07:16,880 --> 00:07:19,039
implement in hardware and the sort of

222
00:07:19,039 --> 00:07:21,039
funny complexity like what does this

223
00:07:21,039 --> 00:07:22,319
mean if you want to actually integrate

224
00:07:22,319 --> 00:07:24,960
this into a cpu does it make it

225
00:07:24,960 --> 00:07:26,000
make the rest of the design

226
00:07:26,000 --> 00:07:27,919
disproportionately complex how would we

227
00:07:27,919 --> 00:07:30,000
verify the functionality all these other

228
00:07:30,000 --> 00:07:31,599
sorts of things that don't necessarily

229
00:07:31,599 --> 00:07:32,479
um

230
00:07:32,479 --> 00:07:33,919
aren't immediately apparent if you just

231
00:07:33,919 --> 00:07:36,080
look at the sort of academic designs

232
00:07:36,080 --> 00:07:38,000
um and once we benchmarked all of these

233
00:07:38,000 --> 00:07:39,919
luckily we thought they were two ver

234
00:07:39,919 --> 00:07:42,160
very clear winners um

235
00:07:42,160 --> 00:07:44,720
so we picked one for the 32-bit bass

236
00:07:44,720 --> 00:07:46,400
risk five architecture and one for the

237
00:07:46,400 --> 00:07:48,960
64-bit and the rest of this uh

238
00:07:48,960 --> 00:07:50,400
presentation will give you a sort of

239
00:07:50,400 --> 00:07:52,000
whistle-stop tour of exactly how those

240
00:07:52,000 --> 00:07:53,840
two different instruction set extensions

241
00:07:53,840 --> 00:07:56,080
work

242
00:07:56,080 --> 00:07:59,440
so for 32-bit design uh we basically um

243
00:07:59,440 --> 00:08:01,199
the way we like to explain this is it's

244
00:08:01,199 --> 00:08:03,919
based on t tables in hardware so if you

245
00:08:03,919 --> 00:08:05,840
imagine you've implemented aes and

246
00:08:05,840 --> 00:08:07,280
you've done it in software with a

247
00:08:07,280 --> 00:08:09,599
t-total style you've got essentially a

248
00:08:09,599 --> 00:08:13,520
one byte input producing a 32-bit output

249
00:08:13,520 --> 00:08:14,720
but normally you would do this by

250
00:08:14,720 --> 00:08:17,440
looking up into memory um but in this

251
00:08:17,440 --> 00:08:19,599
case we roll up that entire operation

252
00:08:19,599 --> 00:08:21,360
into a single instruction

253
00:08:21,360 --> 00:08:24,160
so each instruction does one byte of

254
00:08:24,160 --> 00:08:25,759
s-box

255
00:08:25,759 --> 00:08:27,039
does

256
00:08:27,039 --> 00:08:29,759
some of the shift rows and the one bytes

257
00:08:29,759 --> 00:08:31,440
worth of mixed columns and then you

258
00:08:31,440 --> 00:08:33,279
excel that result back into the state

259
00:08:33,279 --> 00:08:34,799
just like you would with a normal

260
00:08:34,799 --> 00:08:37,039
t-table operation

261
00:08:37,039 --> 00:08:38,880
the advantage for this in particularly

262
00:08:38,880 --> 00:08:41,200
for a 32-bit design is that you only

263
00:08:41,200 --> 00:08:43,200
need to instance one s box in hardware

264
00:08:43,200 --> 00:08:44,640
and the area for these instructions is

265
00:08:44,640 --> 00:08:46,560
always dominated by the s box despite

266
00:08:46,560 --> 00:08:48,640
years of research on efficient xbox s

267
00:08:48,640 --> 00:08:51,440
boxes they're still the sort of um

268
00:08:51,440 --> 00:08:53,600
they're the bottleneck basically

269
00:08:53,600 --> 00:08:55,279
um so this is so on the right there you

270
00:08:55,279 --> 00:08:57,200
can see the actual iso specification for

271
00:08:57,200 --> 00:08:59,440
these instructions um i won't dwell on

272
00:08:59,440 --> 00:09:00,640
those too much i'll give you a link to

273
00:09:00,640 --> 00:09:02,080
the spec later on

274
00:09:02,080 --> 00:09:03,440
um but you get

275
00:09:03,440 --> 00:09:04,720
using these instructions you get a

276
00:09:04,720 --> 00:09:06,640
pretty big speed up for a relatively

277
00:09:06,640 --> 00:09:08,240
small cost so there's only about one

278
00:09:08,240 --> 00:09:09,920
cane and two gates

279
00:09:09,920 --> 00:09:12,320
um for both encrypt and decrypt which is

280
00:09:12,320 --> 00:09:14,720
amazing um and you end up with about 20

281
00:09:14,720 --> 00:09:18,000
instructions per encrypted decrypt round

282
00:09:18,000 --> 00:09:19,760
um so in terms of what a round actually

283
00:09:19,760 --> 00:09:22,320
looks like at this point please do pause

284
00:09:22,320 --> 00:09:23,839
on youtube just to take in this

285
00:09:23,839 --> 00:09:27,440
extremely busy slide so pause

286
00:09:27,440 --> 00:09:29,360
and back so

287
00:09:29,360 --> 00:09:31,440
the actual round loop itself

288
00:09:31,440 --> 00:09:33,839
um so you start with four load word

289
00:09:33,839 --> 00:09:36,480
instructions so that's your next round

290
00:09:36,480 --> 00:09:38,880
key essentially and then you've got 16

291
00:09:38,880 --> 00:09:39,920
of these

292
00:09:39,920 --> 00:09:45,200
aes 32 esmi so aes 32 bits encrypt sub

293
00:09:45,200 --> 00:09:46,800
bytes mix

294
00:09:46,800 --> 00:09:48,720
i with an immediate

295
00:09:48,720 --> 00:09:51,040
and what each of the each four

296
00:09:51,040 --> 00:09:53,839
instructions process is one row and each

297
00:09:53,839 --> 00:09:56,959
instruction within a row selects the ith

298
00:09:56,959 --> 00:09:59,920
byte of an of uh one of the input

299
00:09:59,920 --> 00:10:01,200
registers

300
00:10:01,200 --> 00:10:03,920
applies the s box says what's going on

301
00:10:03,920 --> 00:10:05,279
over here

302
00:10:05,279 --> 00:10:07,200
then if it's a middle round it applies

303
00:10:07,200 --> 00:10:08,320
the

304
00:10:08,320 --> 00:10:10,399
mix makes columns and if it's not a

305
00:10:10,399 --> 00:10:12,079
middle round then it doesn't

306
00:10:12,079 --> 00:10:15,200
and then you rotate the result and xor

307
00:10:15,200 --> 00:10:18,000
it back into rs1 i do not expect this to

308
00:10:18,000 --> 00:10:19,440
be completely understood on a first

309
00:10:19,440 --> 00:10:22,240
reading here but this is essentially how

310
00:10:22,240 --> 00:10:24,640
the whole operation breaks down for one

311
00:10:24,640 --> 00:10:27,920
round of aes on a 32-bit risk five

312
00:10:27,920 --> 00:10:28,800
um

313
00:10:28,800 --> 00:10:30,720
so if you want to pause and just take

314
00:10:30,720 --> 00:10:33,200
take all that in i will not blame you

315
00:10:33,200 --> 00:10:34,079
um

316
00:10:34,079 --> 00:10:37,120
for the 32 for the 64-bit design rather

317
00:10:37,120 --> 00:10:39,680
our key realization that if you take two

318
00:10:39,680 --> 00:10:42,160
64-bit registers you can fit an entire

319
00:10:42,160 --> 00:10:44,079
128-bit state and this is an absolute

320
00:10:44,079 --> 00:10:45,920
revelation to us

321
00:10:45,920 --> 00:10:47,680
and that means that we can fit an entire

322
00:10:47,680 --> 00:10:51,600
aes state input into one instruction so

323
00:10:51,600 --> 00:10:53,200
over two instructions which can only

324
00:10:53,200 --> 00:10:55,839
produce a 64-bit result each we can

325
00:10:55,839 --> 00:10:58,320
compute the entire aes next round state

326
00:10:58,320 --> 00:11:01,120
so two instructions an entire round

327
00:11:01,120 --> 00:11:02,720
um

328
00:11:02,720 --> 00:11:03,920
we have

329
00:11:03,920 --> 00:11:05,360
these instructions are

330
00:11:05,360 --> 00:11:07,279
designed because they're for 64-bit

331
00:11:07,279 --> 00:11:08,560
processors which are naturally a little

332
00:11:08,560 --> 00:11:10,320
bit bigger we opted to make them

333
00:11:10,320 --> 00:11:12,480
somewhat more higher performance

334
00:11:12,480 --> 00:11:14,800
so that means you can do them in do an

335
00:11:14,800 --> 00:11:17,839
entire aes encrypt or decrypt operation

336
00:11:17,839 --> 00:11:19,680
in six instructions per round as opposed

337
00:11:19,680 --> 00:11:21,680
to 20 in the previous so you imagine

338
00:11:21,680 --> 00:11:22,800
already there that's quite a big

339
00:11:22,800 --> 00:11:24,720
difference um in terms of how that

340
00:11:24,720 --> 00:11:26,959
stacks up against sort of um arm and

341
00:11:26,959 --> 00:11:28,720
intel's version well they can do an

342
00:11:28,720 --> 00:11:31,120
entire round in one instruction so

343
00:11:31,120 --> 00:11:33,279
although we're not as fast as them in

344
00:11:33,279 --> 00:11:35,279
terms of like cost per performance

345
00:11:35,279 --> 00:11:36,399
increase we're actually extremely

346
00:11:36,399 --> 00:11:37,760
efficient

347
00:11:37,760 --> 00:11:40,320
and this particular instruction has uh

348
00:11:40,320 --> 00:11:42,399
some trade-offs there where you uh can

349
00:11:42,399 --> 00:11:44,640
implement it with one s box over eight

350
00:11:44,640 --> 00:11:46,160
cycles so you make a multi-cycle

351
00:11:46,160 --> 00:11:47,600
operation that's a bit smaller and a bit

352
00:11:47,600 --> 00:11:50,399
slower or you can do eight x boxes in

353
00:11:50,399 --> 00:11:52,560
effectively one cycle of pipeline as

354
00:11:52,560 --> 00:11:53,760
necessary

355
00:11:53,760 --> 00:11:55,440
um so again you've got snapshot from the

356
00:11:55,440 --> 00:11:56,480
spec there

357
00:11:56,480 --> 00:11:58,320
um let's give you a concrete example a

358
00:11:58,320 --> 00:12:00,079
little bit less busy this time

359
00:12:00,079 --> 00:12:02,000
so this is uh the recommended way that

360
00:12:02,000 --> 00:12:04,639
we we think you should implement uh aes

361
00:12:04,639 --> 00:12:07,040
round on a 64-bit risk five

362
00:12:07,040 --> 00:12:09,200
um first of all load in two sets of

363
00:12:09,200 --> 00:12:11,040
round keys so we do double rounds and we

364
00:12:11,040 --> 00:12:13,120
do this because we want to pipeline all

365
00:12:13,120 --> 00:12:14,959
the loads in one go

366
00:12:14,959 --> 00:12:17,440
we use a normal xor instructions two of

367
00:12:17,440 --> 00:12:19,760
them to do the ad round key step

368
00:12:19,760 --> 00:12:22,880
and then the aes 64 encrypt sub pipes

369
00:12:22,880 --> 00:12:25,360
makes columns instruction does the rest

370
00:12:25,360 --> 00:12:27,279
so it does shift rows sub bytes and

371
00:12:27,279 --> 00:12:28,560
mixed columns

372
00:12:28,560 --> 00:12:31,120
um the actual steps involved so you take

373
00:12:31,120 --> 00:12:34,959
128 bits of input from rs1 and rs2

374
00:12:34,959 --> 00:12:37,200
and then you do shift rows

375
00:12:37,200 --> 00:12:40,320
and you only take the low 64 bits of the

376
00:12:40,320 --> 00:12:42,079
result of the shift rows

377
00:12:42,079 --> 00:12:44,160
to which you then apply sub bytes and

378
00:12:44,160 --> 00:12:47,279
mixed columns and output those 64 bits

379
00:12:47,279 --> 00:12:49,200
so that gives you half of a round and

380
00:12:49,200 --> 00:12:52,480
then to compute the other half you just

381
00:12:52,480 --> 00:12:54,959
swap the order of your input registers

382
00:12:54,959 --> 00:12:57,120
and because of the way shift rows works

383
00:12:57,120 --> 00:12:58,800
that means you naturally get the other

384
00:12:58,800 --> 00:13:00,320
half of the output

385
00:13:00,320 --> 00:13:02,399
um if that isn't immediately apparent

386
00:13:02,399 --> 00:13:04,240
just trust me but it's a nice little

387
00:13:04,240 --> 00:13:05,839
trick that meant we only needed half as

388
00:13:05,839 --> 00:13:07,839
many instructions as we thought we did

389
00:13:07,839 --> 00:13:10,959
that's the 64-bit design um

390
00:13:10,959 --> 00:13:13,200
in terms of our evaluation again i

391
00:13:13,200 --> 00:13:14,880
apologize it's a bit of a busy slide but

392
00:13:14,880 --> 00:13:16,160
these are all the numbers that you

393
00:13:16,160 --> 00:13:19,200
really want to see from the paper

394
00:13:19,200 --> 00:13:21,440
the headlines being that we're between

395
00:13:21,440 --> 00:13:23,440
five and ten times faster than software

396
00:13:23,440 --> 00:13:24,720
t tables

397
00:13:24,720 --> 00:13:25,839
um

398
00:13:25,839 --> 00:13:29,279
we get rid of all of the data

399
00:13:29,279 --> 00:13:30,560
data requirements because there are no

400
00:13:30,560 --> 00:13:33,440
more tables um the hardware cost is very

401
00:13:33,440 --> 00:13:36,480
modest um and we're a fair bit faster so

402
00:13:36,480 --> 00:13:38,480
uh yeah this is the headline numbers if

403
00:13:38,480 --> 00:13:39,680
you want to pause again and just take

404
00:13:39,680 --> 00:13:42,000
all of this in please do

405
00:13:42,000 --> 00:13:43,360
um

406
00:13:43,360 --> 00:13:44,959
we did have an anticipated question

407
00:13:44,959 --> 00:13:47,279
because these are obviously instructions

408
00:13:47,279 --> 00:13:50,399
that are intended to go in

409
00:13:50,399 --> 00:13:52,800
smaller machines smaller cpus that

410
00:13:52,800 --> 00:13:55,120
possibly have side channel concerns

411
00:13:55,120 --> 00:13:56,000
um

412
00:13:56,000 --> 00:13:56,880
so

413
00:13:56,880 --> 00:13:58,959
how did we how do we consider this in

414
00:13:58,959 --> 00:14:01,440
our design process so for timing it's

415
00:14:01,440 --> 00:14:02,959
pretty easy you're no longer doing

416
00:14:02,959 --> 00:14:04,480
memory lookups because well you

417
00:14:04,480 --> 00:14:05,760
shouldn't have been doing memory lookups

418
00:14:05,760 --> 00:14:07,920
anyway but if you were there's no need

419
00:14:07,920 --> 00:14:09,920
to anymore because

420
00:14:09,920 --> 00:14:11,760
the actual sbox operation is wrapped up

421
00:14:11,760 --> 00:14:13,839
in the instruction so timing we actually

422
00:14:13,839 --> 00:14:15,440
found fairly simple

423
00:14:15,440 --> 00:14:18,079
um for em and power side channels

424
00:14:18,079 --> 00:14:20,240
however that's a very different question

425
00:14:20,240 --> 00:14:21,360
and i would love to talk to you all

426
00:14:21,360 --> 00:14:22,720
about this

427
00:14:22,720 --> 00:14:24,720
in extreme depth so please come and come

428
00:14:24,720 --> 00:14:26,000
find me about this because there's a lot

429
00:14:26,000 --> 00:14:27,199
to talk about

430
00:14:27,199 --> 00:14:29,279
um but basically we excluded these from

431
00:14:29,279 --> 00:14:31,360
scope pretty early on in the design of

432
00:14:31,360 --> 00:14:33,279
these instructions because at the time

433
00:14:33,279 --> 00:14:35,680
there wasn't much research on how to add

434
00:14:35,680 --> 00:14:38,079
side channel guarantees to instruction

435
00:14:38,079 --> 00:14:40,240
set architectures and whether or not the

436
00:14:40,240 --> 00:14:42,320
instruction set definition is actually

437
00:14:42,320 --> 00:14:44,320
the right place to do that because the

438
00:14:44,320 --> 00:14:46,000
moment you add it to that point in the

439
00:14:46,000 --> 00:14:48,000
abstraction stack you have to be able to

440
00:14:48,000 --> 00:14:51,199
verify it and verifying the absence of

441
00:14:51,199 --> 00:14:53,040
powerside channels is quite difficult at

442
00:14:53,040 --> 00:14:54,959
the moment you can make all kinds of

443
00:14:54,959 --> 00:14:57,440
claims about uh sort of formal proofs of

444
00:14:57,440 --> 00:14:58,720
uh

445
00:14:58,720 --> 00:15:00,720
powerslide channel security but in

446
00:15:00,720 --> 00:15:02,480
reality those rely on a certain set of

447
00:15:02,480 --> 00:15:04,079
assumptions that we couldn't guarantee

448
00:15:04,079 --> 00:15:05,839
would hold for everyone who was going to

449
00:15:05,839 --> 00:15:07,760
implement these instructions

450
00:15:07,760 --> 00:15:08,880
um

451
00:15:08,880 --> 00:15:10,880
so we actually excluded them from scope

452
00:15:10,880 --> 00:15:12,880
however hopefully we're going to put out

453
00:15:12,880 --> 00:15:14,880
an eprint soon that explains how you

454
00:15:14,880 --> 00:15:16,639
might add side channel protections to

455
00:15:16,639 --> 00:15:19,360
these instructions um but generally we

456
00:15:19,360 --> 00:15:21,199
need more research on this so please do

457
00:15:21,199 --> 00:15:22,240
come and talk to us because it's

458
00:15:22,240 --> 00:15:24,560
something that um the the risk five sort

459
00:15:24,560 --> 00:15:26,639
of security and cryptography community

460
00:15:26,639 --> 00:15:28,560
is really interested in

461
00:15:28,560 --> 00:15:30,399
um so that was more of it so i

462
00:15:30,399 --> 00:15:32,240
anticipate your question please do keep

463
00:15:32,240 --> 00:15:34,399
asking about it but

464
00:15:34,399 --> 00:15:35,440
just to

465
00:15:35,440 --> 00:15:37,040
tell you we've we've have done some

466
00:15:37,040 --> 00:15:38,560
thinking about it

467
00:15:38,560 --> 00:15:40,160
um so in terms of what's actually

468
00:15:40,160 --> 00:15:42,320
happening now because of our work

469
00:15:42,320 --> 00:15:45,279
um the risk five scalar cryptography ise

470
00:15:45,279 --> 00:15:47,360
is out for public review and it includes

471
00:15:47,360 --> 00:15:48,880
these instructions

472
00:15:48,880 --> 00:15:51,120
so the the actual instruction set

473
00:15:51,120 --> 00:15:52,639
extension includes not just instructions

474
00:15:52,639 --> 00:15:55,839
for aes but also sm3 sm4

475
00:15:55,839 --> 00:15:57,920
sha2 and a bunch of other sort of more

476
00:15:57,920 --> 00:15:59,920
generic instructions for accelerating

477
00:15:59,920 --> 00:16:02,560
cryptography and you can go and find it

478
00:16:02,560 --> 00:16:04,240
at these various links

479
00:16:04,240 --> 00:16:05,199
um

480
00:16:05,199 --> 00:16:07,600
but we hope the the chess community will

481
00:16:07,600 --> 00:16:10,240
find this very interesting because it's

482
00:16:10,240 --> 00:16:12,560
uh risk five is the first instruction

483
00:16:12,560 --> 00:16:13,600
set

484
00:16:13,600 --> 00:16:16,079
um sort of that's been widely adopted

485
00:16:16,079 --> 00:16:17,680
that's going to have a

486
00:16:17,680 --> 00:16:19,759
dedicated extension for

487
00:16:19,759 --> 00:16:22,800
small cpus to accelerate cryptography

488
00:16:22,800 --> 00:16:24,959
um this hasn't really happened before

489
00:16:24,959 --> 00:16:26,720
and we really want to sort of get it out

490
00:16:26,720 --> 00:16:28,560
into the community so

491
00:16:28,560 --> 00:16:30,880
tell us what you think basically

492
00:16:30,880 --> 00:16:32,720
um and in terms of what's next on our

493
00:16:32,720 --> 00:16:34,880
horizon so the the cryptography task

494
00:16:34,880 --> 00:16:36,720
group within risk five we're going to

495
00:16:36,720 --> 00:16:38,639
start looking at vector instructions for

496
00:16:38,639 --> 00:16:39,839
aes these are the really high

497
00:16:39,839 --> 00:16:41,600
performance versions much more similar

498
00:16:41,600 --> 00:16:44,000
to what x86 and arm have done in the

499
00:16:44,000 --> 00:16:45,759
past uh we also want to look at post

500
00:16:45,759 --> 00:16:47,279
quantum cryptography how are we going to

501
00:16:47,279 --> 00:16:49,440
support the primitives necessary for

502
00:16:49,440 --> 00:16:50,880
that

503
00:16:50,880 --> 00:16:53,279
on on a risk live based system we also

504
00:16:53,279 --> 00:16:54,320
want to look more at side channel

505
00:16:54,320 --> 00:16:56,959
security uh specifically for these aes

506
00:16:56,959 --> 00:16:58,320
instructions because they're very common

507
00:16:58,320 --> 00:17:00,399
target but also more generally how can

508
00:17:00,399 --> 00:17:02,959
we add constraints to the risk five

509
00:17:02,959 --> 00:17:05,359
um sort of design process that makes it

510
00:17:05,359 --> 00:17:07,119
easier to support

511
00:17:07,119 --> 00:17:09,359
power or em side channels

512
00:17:09,359 --> 00:17:11,679
uh security um we've got some ideas

513
00:17:11,679 --> 00:17:13,199
about this but we wanna talk to you

514
00:17:13,199 --> 00:17:15,119
about it because you're all the experts

515
00:17:15,119 --> 00:17:16,880
um because overall our goal is to make

516
00:17:16,880 --> 00:17:18,559
risk five the best iso for cryptography

517
00:17:18,559 --> 00:17:20,640
in the world and we've already used a

518
00:17:20,640 --> 00:17:22,720
lot of work that's appeared at ches in

519
00:17:22,720 --> 00:17:24,880
hopefully uh getting closer to that goal

520
00:17:24,880 --> 00:17:26,880
but we know there's a way to go

521
00:17:26,880 --> 00:17:29,120
so thank you for listening to my

522
00:17:29,120 --> 00:17:30,480
presentation that i realized was a

523
00:17:30,480 --> 00:17:32,160
little bit all over the place but i hope

524
00:17:32,160 --> 00:17:34,080
you've learned a little bit about

525
00:17:34,080 --> 00:17:36,240
not only the aes instructions that we've

526
00:17:36,240 --> 00:17:38,240
designed but also where they're going to

527
00:17:38,240 --> 00:17:40,640
go how they're going to be used

528
00:17:40,640 --> 00:17:41,760
so yeah thank you very much for

529
00:17:41,760 --> 00:17:44,760
listening

