1
00:00:00,080 --> 00:00:02,080
hello and welcome to this presentation

2
00:00:02,080 --> 00:00:04,319
of the paper the speedy family of block

3
00:00:04,319 --> 00:00:06,399
ciphers engineering and ultra low

4
00:00:06,399 --> 00:00:08,240
latency cipher from gate level for

5
00:00:08,240 --> 00:00:10,639
secure processor architectures

6
00:00:10,639 --> 00:00:12,559
my name is torb moss and this is a joint

7
00:00:12,559 --> 00:00:14,880
work with gregor lianna and amir moradi

8
00:00:14,880 --> 00:00:17,279
from university buchum and sharam

9
00:00:17,279 --> 00:00:19,680
khasuzadee from radboat university in

10
00:00:19,680 --> 00:00:22,000
nailing the fundamental research

11
00:00:22,000 --> 00:00:23,840
question we were trying to tackle in

12
00:00:23,840 --> 00:00:26,240
this work is how do we design a secure

13
00:00:26,240 --> 00:00:27,920
encryption algorithm whose hardware

14
00:00:27,920 --> 00:00:30,560
implementation is fast in order to

15
00:00:30,560 --> 00:00:32,159
answer this question we first need to

16
00:00:32,159 --> 00:00:33,680
clarify what kind of hardware

17
00:00:33,680 --> 00:00:35,760
implementation we are talking about and

18
00:00:35,760 --> 00:00:39,040
what our definition of fast is

19
00:00:39,040 --> 00:00:41,200
by hardware implementation we mean here

20
00:00:41,200 --> 00:00:43,120
a circuit representation of the

21
00:00:43,120 --> 00:00:44,960
encryption algorithm constructed

22
00:00:44,960 --> 00:00:47,440
entirely from cmos gates

23
00:00:47,440 --> 00:00:49,440
why do we talk specifically about cmos

24
00:00:49,440 --> 00:00:51,680
gates because cmos has been the de facto

25
00:00:51,680 --> 00:00:53,039
standard for integrated circuit

26
00:00:53,039 --> 00:00:55,600
fabrication for more than 40 years now

27
00:00:55,600 --> 00:00:57,280
and that situation is not going to

28
00:00:57,280 --> 00:00:59,680
change anytime soon

29
00:00:59,680 --> 00:01:01,600
by fast we mean that the time period

30
00:01:01,600 --> 00:01:03,680
between providing the input signals to

31
00:01:03,680 --> 00:01:05,760
the circuit and receiving the correct

32
00:01:05,760 --> 00:01:08,400
stable final output signals should be

33
00:01:08,400 --> 00:01:09,760
minimal

34
00:01:09,760 --> 00:01:11,439
since the inclusion of memory elements

35
00:01:11,439 --> 00:01:13,760
to store intermediate results inevitably

36
00:01:13,760 --> 00:01:16,000
increases this time period we only

37
00:01:16,000 --> 00:01:18,000
consider circuits made entirely from

38
00:01:18,000 --> 00:01:20,799
combinatorial logic gates in other words

39
00:01:20,799 --> 00:01:22,799
we are interested in the minimum latency

40
00:01:22,799 --> 00:01:24,880
of fully unrolled implementations of

41
00:01:24,880 --> 00:01:27,280
encryption algorithms

42
00:01:27,280 --> 00:01:29,200
now this is not the first work in this

43
00:01:29,200 --> 00:01:31,040
area a number of low latency

44
00:01:31,040 --> 00:01:32,799
cryptographic primitives which can be

45
00:01:32,799 --> 00:01:34,720
used to encrypt data in a short period

46
00:01:34,720 --> 00:01:37,439
of time has been proposed in the past

47
00:01:37,439 --> 00:01:39,200
the first notable one is the prince

48
00:01:39,200 --> 00:01:43,119
block cipher proposed at asia crypt 2012

49
00:01:43,119 --> 00:01:45,200
this block cipher has received a small

50
00:01:45,200 --> 00:01:47,360
redesign to increase its security level

51
00:01:47,360 --> 00:01:50,240
at sac 2020 and the result is called

52
00:01:50,240 --> 00:01:52,640
prince version 2.

53
00:01:52,640 --> 00:01:54,720
midori is shown in brackets here because

54
00:01:54,720 --> 00:01:56,880
it is not primarily a low latency cipher

55
00:01:56,880 --> 00:01:59,680
but rather a low energy design

56
00:01:59,680 --> 00:02:02,240
finally the two tweakable block ciphers

57
00:02:02,240 --> 00:02:04,240
mantis and karma have been proposed at

58
00:02:04,240 --> 00:02:09,758
crypto 2016 and fse 2017 respectively

59
00:02:09,758 --> 00:02:11,760
apart from regular block ciphers there

60
00:02:11,760 --> 00:02:13,280
are also two other cryptographic

61
00:02:13,280 --> 00:02:14,879
primitives which are relevant to this

62
00:02:14,879 --> 00:02:17,040
field first of all the cross-platform

63
00:02:17,040 --> 00:02:19,840
permutation gimli this one is also shown

64
00:02:19,840 --> 00:02:21,280
in brackets here because it is not

65
00:02:21,280 --> 00:02:23,680
primarily a low latency design

66
00:02:23,680 --> 00:02:25,520
however recent works have claimed that

67
00:02:25,520 --> 00:02:27,440
its fully unrolled implementation is

68
00:02:27,440 --> 00:02:30,720
rather fast in hardware

69
00:02:30,720 --> 00:02:32,879
autros is not a permutation or key

70
00:02:32,879 --> 00:02:35,040
permutation like a block cipher but it

71
00:02:35,040 --> 00:02:38,160
is a prf or pseudo-random function which

72
00:02:38,160 --> 00:02:39,840
is based on the sum of two key

73
00:02:39,840 --> 00:02:41,519
permutations

74
00:02:41,519 --> 00:02:43,680
as a result autros is not invertible

75
00:02:43,680 --> 00:02:46,080
which means that its outputs cannot be

76
00:02:46,080 --> 00:02:48,560
decrypted

77
00:02:48,560 --> 00:02:51,040
in the sec 2020 paper called prince

78
00:02:51,040 --> 00:02:53,519
version 2 more security for almost no

79
00:02:53,519 --> 00:02:56,000
overhead a latency comparison of the

80
00:02:56,000 --> 00:02:58,319
previously listed block ciphers and only

81
00:02:58,319 --> 00:03:00,640
the block ciphers in none gate open cell

82
00:03:00,640 --> 00:03:03,040
libraries is presented

83
00:03:03,040 --> 00:03:05,440
in this figure the leftmost dot of each

84
00:03:05,440 --> 00:03:07,519
line represents the minimum latency that

85
00:03:07,519 --> 00:03:09,840
could be achieved the farther it is on

86
00:03:09,840 --> 00:03:11,599
the left the smaller is the minimum

87
00:03:11,599 --> 00:03:12,720
latency

88
00:03:12,720 --> 00:03:14,800
clearly prince and prince version 2 are

89
00:03:14,800 --> 00:03:16,400
faster than the competition in this

90
00:03:16,400 --> 00:03:18,720
comparison in nand gate 45 nanometer

91
00:03:18,720 --> 00:03:21,200
technology

92
00:03:21,200 --> 00:03:23,120
comparable results are achieved in

93
00:03:23,120 --> 00:03:25,840
nungate 50 nanometer technology so it

94
00:03:25,840 --> 00:03:27,680
seems that both prince versions are

95
00:03:27,680 --> 00:03:30,480
among the fastest existing block ciphers

96
00:03:30,480 --> 00:03:31,920
of course this comparison is not

97
00:03:31,920 --> 00:03:33,680
entirely fair since tweakable block

98
00:03:33,680 --> 00:03:35,760
ciphers like mantis and karma i expected

99
00:03:35,760 --> 00:03:38,400
to require a larger circuit depth

100
00:03:38,400 --> 00:03:41,360
and since midori is a low energy design

101
00:03:41,360 --> 00:03:43,440
first and foremost and not optimized for

102
00:03:43,440 --> 00:03:47,840
maximum single cycle encryption speed

103
00:03:48,640 --> 00:03:50,560
now it is important to understand that

104
00:03:50,560 --> 00:03:52,720
prince prince version 2

105
00:03:52,720 --> 00:03:55,200
midori mantis and karma are all

106
00:03:55,200 --> 00:03:56,879
lightweight block ciphers and

107
00:03:56,879 --> 00:03:58,560
lightweight block ciphers are typically

108
00:03:58,560 --> 00:04:00,400
supposed to be suitable for resource

109
00:04:00,400 --> 00:04:02,000
constrained environments like

110
00:04:02,000 --> 00:04:04,799
battery-powered devices in the iot

111
00:04:04,799 --> 00:04:06,560
in particular they are designed to be

112
00:04:06,560 --> 00:04:08,720
area and energy efficient

113
00:04:08,720 --> 00:04:10,560
we thought maybe if you take that

114
00:04:10,560 --> 00:04:12,319
requirement away you could develop

115
00:04:12,319 --> 00:04:14,640
something much more performant

116
00:04:14,640 --> 00:04:16,399
additionally the listed low latency

117
00:04:16,399 --> 00:04:18,320
block servers are designed to offer both

118
00:04:18,320 --> 00:04:20,560
encryption and decryption functionality

119
00:04:20,560 --> 00:04:22,479
in one circuit without a significant

120
00:04:22,479 --> 00:04:25,199
area or energy overhead for that purpose

121
00:04:25,199 --> 00:04:27,199
prince for example introduced the alpha

122
00:04:27,199 --> 00:04:29,440
reflection property that allows to

123
00:04:29,440 --> 00:04:31,040
encrypt and decrypt data with

124
00:04:31,040 --> 00:04:33,280
essentially the same circuit

125
00:04:33,280 --> 00:04:34,800
this is another restriction to the

126
00:04:34,800 --> 00:04:36,320
design space

127
00:04:36,320 --> 00:04:38,240
final we were found that gate and

128
00:04:38,240 --> 00:04:40,479
transistor level characteristics of the

129
00:04:40,479 --> 00:04:42,400
underlying hardware have hardly ever

130
00:04:42,400 --> 00:04:44,000
been considered at the design level in

131
00:04:44,000 --> 00:04:45,919
the previous constructions

132
00:04:45,919 --> 00:04:47,759
this all led us to the question whether

133
00:04:47,759 --> 00:04:49,840
we might be able to design a cipher that

134
00:04:49,840 --> 00:04:51,680
is faster than the state of the art by

135
00:04:51,680 --> 00:04:53,759
focusing on maximum encryption speed and

136
00:04:53,759 --> 00:04:55,520
security only

137
00:04:55,520 --> 00:04:57,120
while taking the low-level hardware

138
00:04:57,120 --> 00:04:59,199
characteristics into account

139
00:04:59,199 --> 00:05:01,120
in particular we were interested in

140
00:05:01,120 --> 00:05:03,039
designing a block cipher which is able

141
00:05:03,039 --> 00:05:05,199
to encrypt data faster than the

142
00:05:05,199 --> 00:05:06,960
state-of-the-art without necessarily

143
00:05:06,960 --> 00:05:09,120
keeping it super lightweight and without

144
00:05:09,120 --> 00:05:10,880
paying attention to the efficiency or

145
00:05:10,880 --> 00:05:12,880
the overhead of the decryption

146
00:05:12,880 --> 00:05:14,160
this is essentially what this

147
00:05:14,160 --> 00:05:17,280
presentation is about

148
00:05:17,520 --> 00:05:19,360
the potential applications for such a

149
00:05:19,360 --> 00:05:22,160
cypher design are found in the area of

150
00:05:22,160 --> 00:05:24,919
high-end cpus if the myriad of

151
00:05:24,919 --> 00:05:26,960
microarchitectural attacks over the past

152
00:05:26,960 --> 00:05:29,120
couple of years has taught us one thing

153
00:05:29,120 --> 00:05:31,039
it is that the security architectures of

154
00:05:31,039 --> 00:05:33,759
modern cpus require improvement

155
00:05:33,759 --> 00:05:35,440
a lot of potential solutions have been

156
00:05:35,440 --> 00:05:37,199
suggested in the literature and it can

157
00:05:37,199 --> 00:05:39,440
be observed then many of them call for a

158
00:05:39,440 --> 00:05:41,520
higher level of encrypted communication

159
00:05:41,520 --> 00:05:44,400
inside of cpus and between cpus and

160
00:05:44,400 --> 00:05:46,320
their surrounding components

161
00:05:46,320 --> 00:05:48,639
this includes secure caches based on

162
00:05:48,639 --> 00:05:51,039
address encryption this includes memory

163
00:05:51,039 --> 00:05:53,680
encryption of essentially all storage

164
00:05:53,680 --> 00:05:56,400
elements inside and outside of your cpu

165
00:05:56,400 --> 00:05:58,560
this includes pointer authentication as

166
00:05:58,560 --> 00:06:00,240
implemented using karma and arm

167
00:06:00,240 --> 00:06:01,600
processors

168
00:06:01,600 --> 00:06:03,280
we believe that many more of such

169
00:06:03,280 --> 00:06:05,120
features will be needed and implemented

170
00:06:05,120 --> 00:06:07,840
in future cpu generations and the one

171
00:06:07,840 --> 00:06:09,759
requirement they all have in common is

172
00:06:09,759 --> 00:06:11,199
that they need super performance

173
00:06:11,199 --> 00:06:13,360
cryptographic primitives to avoid a

174
00:06:13,360 --> 00:06:16,639
large performance penalty

175
00:06:17,840 --> 00:06:20,479
okay so much for the introduction let's

176
00:06:20,479 --> 00:06:22,240
jump directly into our latency

177
00:06:22,240 --> 00:06:23,759
considerations

178
00:06:23,759 --> 00:06:25,919
first we concentrate on the latency of

179
00:06:25,919 --> 00:06:29,440
individual cmos logic gates

180
00:06:29,440 --> 00:06:31,360
if you look closely at the way static

181
00:06:31,360 --> 00:06:33,600
cmos gates are constructed namely from a

182
00:06:33,600 --> 00:06:35,360
pull-up network made from pmos

183
00:06:35,360 --> 00:06:37,600
transistors and a pull-down network made

184
00:06:37,600 --> 00:06:40,000
from nmos transistors it becomes clear

185
00:06:40,000 --> 00:06:41,840
that cmos logic gates are naturally

186
00:06:41,840 --> 00:06:43,520
inverting

187
00:06:43,520 --> 00:06:45,520
consider the example on this slide the

188
00:06:45,520 --> 00:06:47,440
left figure shows the three input nand

189
00:06:47,440 --> 00:06:50,560
gate which is an inverted output end

190
00:06:50,560 --> 00:06:52,560
and the right side shows a three input

191
00:06:52,560 --> 00:06:55,039
and gate in cmos hardware the and gate

192
00:06:55,039 --> 00:06:57,360
is realized by concatenating a nand gate

193
00:06:57,360 --> 00:06:59,120
and an inverter gate

194
00:06:59,120 --> 00:07:00,960
clearly the logic gate on the left side

195
00:07:00,960 --> 00:07:03,199
can be evaluated faster and harder than

196
00:07:03,199 --> 00:07:05,120
the gate on the right side due to the

197
00:07:05,120 --> 00:07:06,960
second stage of pull up and pull down

198
00:07:06,960 --> 00:07:08,880
network that the signal needs to pass

199
00:07:08,880 --> 00:07:10,960
through in the right figure

200
00:07:10,960 --> 00:07:12,800
the same can be observed for other logic

201
00:07:12,800 --> 00:07:15,360
gates like ore for example

202
00:07:15,360 --> 00:07:17,840
additionally cmos gates require a

203
00:07:17,840 --> 00:07:20,080
minimum of two times n transistors to

204
00:07:20,080 --> 00:07:22,240
realize any logic function where n is

205
00:07:22,240 --> 00:07:24,400
the number of inputs as you can see the

206
00:07:24,400 --> 00:07:26,400
three input nand is realizable in the

207
00:07:26,400 --> 00:07:28,639
minimum of two times three transistors

208
00:07:28,639 --> 00:07:31,840
while the ant gate is not

209
00:07:32,160 --> 00:07:34,319
this prompted us to introduce a notion

210
00:07:34,319 --> 00:07:37,280
of natural cmos gates our definition

211
00:07:37,280 --> 00:07:39,440
calls all inverting logic cells which

212
00:07:39,440 --> 00:07:41,599
can be realized as static cmos gates in

213
00:07:41,599 --> 00:07:44,080
a single stage of two times n mosfets

214
00:07:44,080 --> 00:07:47,120
natural cmos gates or ncgs

215
00:07:47,120 --> 00:07:49,039
we argue that logic cells with this

216
00:07:49,039 --> 00:07:50,960
property are immensely beneficial for

217
00:07:50,960 --> 00:07:52,879
low latency constructions

218
00:07:52,879 --> 00:07:55,360
common ncgs include the inverter or not

219
00:07:55,360 --> 00:07:57,759
gate the nand and nor gates and the

220
00:07:57,759 --> 00:08:00,319
complex or compound logic gates and or

221
00:08:00,319 --> 00:08:01,199
inf

222
00:08:01,199 --> 00:08:04,479
and or and inf

223
00:08:05,280 --> 00:08:07,440
however we don't stop there as far as

224
00:08:07,440 --> 00:08:09,520
categorizing logic gates and look even

225
00:08:09,520 --> 00:08:12,479
deeper into the hardware characteristics

226
00:08:12,479 --> 00:08:14,639
in fact pmos transistors and silicon

227
00:08:14,639 --> 00:08:16,479
hardware are known to have a higher on

228
00:08:16,479 --> 00:08:18,800
resistance than nmos transistors because

229
00:08:18,800 --> 00:08:20,639
holes have a smaller mobility than

230
00:08:20,639 --> 00:08:22,240
electrons

231
00:08:22,240 --> 00:08:24,160
this means that a switched on pmos

232
00:08:24,160 --> 00:08:25,919
transistor is less conductive than a

233
00:08:25,919 --> 00:08:28,560
switched on nmos transistor of the same

234
00:08:28,560 --> 00:08:29,759
size

235
00:08:29,759 --> 00:08:31,520
the effect of the different on

236
00:08:31,520 --> 00:08:33,599
resistances is even amplified when the

237
00:08:33,599 --> 00:08:35,839
layout of a logic gate requires multiple

238
00:08:35,839 --> 00:08:38,159
pmos transistors to be stacked which

239
00:08:38,159 --> 00:08:41,039
means connected in series as a result

240
00:08:41,039 --> 00:08:43,200
the three input nand on the left side

241
00:08:43,200 --> 00:08:45,279
can charge its output much faster than

242
00:08:45,279 --> 00:08:48,000
the three input nor on the right side

243
00:08:48,000 --> 00:08:50,000
therefore it is clear that natural cmos

244
00:08:50,000 --> 00:08:52,399
gates which require no or only small

245
00:08:52,399 --> 00:08:54,480
pmos stacks in their layout are the

246
00:08:54,480 --> 00:08:56,080
optimal choice for low latency

247
00:08:56,080 --> 00:08:57,440
constructions

248
00:08:57,440 --> 00:08:59,920
such gates include the inverter or not

249
00:08:59,920 --> 00:09:04,080
gate the nand gate and the oei gate

250
00:09:04,080 --> 00:09:06,160
this observation is universal for any

251
00:09:06,160 --> 00:09:09,360
cmos standard cell library

252
00:09:09,360 --> 00:09:11,120
as a quick example we have listed the

253
00:09:11,120 --> 00:09:13,279
base latencies of different logic gates

254
00:09:13,279 --> 00:09:15,279
in non-gate open cell libraries in these

255
00:09:15,279 --> 00:09:17,839
tables for each fan in number which is

256
00:09:17,839 --> 00:09:19,920
the number of inputs n we have

257
00:09:19,920 --> 00:09:22,399
highlighted the minimum latency the

258
00:09:22,399 --> 00:09:25,040
tables also contain the fan into latency

259
00:09:25,040 --> 00:09:28,399
ratio and short flr which allows to

260
00:09:28,399 --> 00:09:30,480
compare gates across their fan in

261
00:09:30,480 --> 00:09:34,160
classes as expected inverter nand and

262
00:09:34,160 --> 00:09:36,560
oai gates are the fastest logic gates

263
00:09:36,560 --> 00:09:40,640
with respect to their number of inputs

264
00:09:40,640 --> 00:09:42,560
it is insufficient to look only at the

265
00:09:42,560 --> 00:09:44,720
latency of individual logic gates we

266
00:09:44,720 --> 00:09:46,720
also need to consider the impact on the

267
00:09:46,720 --> 00:09:48,959
latency when logic gates are connected

268
00:09:48,959 --> 00:09:51,600
to logic circuits

269
00:09:51,600 --> 00:09:54,000
in this regard we first want to dispel

270
00:09:54,000 --> 00:09:55,600
two common myths

271
00:09:55,600 --> 00:09:57,600
the first one is that each sema standard

272
00:09:57,600 --> 00:09:59,440
cell has a fixed delay and each

273
00:09:59,440 --> 00:10:01,920
instantiation of the same exact standard

274
00:10:01,920 --> 00:10:04,720
cell adds approximately the same latency

275
00:10:04,720 --> 00:10:06,079
to a pass

276
00:10:06,079 --> 00:10:08,000
interestingly this is false the

277
00:10:08,000 --> 00:10:10,000
propagation delay of a siemer cell

278
00:10:10,000 --> 00:10:12,000
always depends significantly on its

279
00:10:12,000 --> 00:10:14,800
direct electrical environment

280
00:10:14,800 --> 00:10:16,560
in particular the delay is always a

281
00:10:16,560 --> 00:10:18,480
function of the transition time of the

282
00:10:18,480 --> 00:10:20,880
input signals to the cell as well as the

283
00:10:20,880 --> 00:10:22,959
capacitive load that the siemens cell

284
00:10:22,959 --> 00:10:25,760
needs to drive at its own output

285
00:10:25,760 --> 00:10:28,000
the variations of the delay of a cell

286
00:10:28,000 --> 00:10:29,920
instance depending on its electrical

287
00:10:29,920 --> 00:10:32,160
environment can easily be in the range

288
00:10:32,160 --> 00:10:36,079
of 200 to 300 percent

289
00:10:36,240 --> 00:10:38,880
another miss is that adding a gate to a

290
00:10:38,880 --> 00:10:40,959
path of a circuit and not making any

291
00:10:40,959 --> 00:10:42,880
other changes to the path will always

292
00:10:42,880 --> 00:10:44,959
increase the passes latency

293
00:10:44,959 --> 00:10:47,200
this is also false often adding a

294
00:10:47,200 --> 00:10:48,959
well-placed buffer or inverter where

295
00:10:48,959 --> 00:10:51,360
logically applicable to a path in order

296
00:10:51,360 --> 00:10:53,519
to charge a significant capacitive load

297
00:10:53,519 --> 00:10:55,920
faster can decrease the overall latency

298
00:10:55,920 --> 00:10:57,680
of the pass

299
00:10:57,680 --> 00:10:59,440
therefore the mirror gate depth is not

300
00:10:59,440 --> 00:11:01,279
always indicative of the latency of a

301
00:11:01,279 --> 00:11:03,680
circuit generally the topology of a

302
00:11:03,680 --> 00:11:06,000
circuit primarily the fan out of the

303
00:11:06,000 --> 00:11:08,480
logic cells is similarly important as

304
00:11:08,480 --> 00:11:10,160
the number and type of gates and its

305
00:11:10,160 --> 00:11:11,920
critical paths when determining the

306
00:11:11,920 --> 00:11:14,920
latency

307
00:11:15,200 --> 00:11:17,360
here is a quick example demonstrating

308
00:11:17,360 --> 00:11:19,920
the previous two explanations

309
00:11:19,920 --> 00:11:22,000
on the left side we have an xor gate

310
00:11:22,000 --> 00:11:24,959
which drives eight further exor gates

311
00:11:24,959 --> 00:11:27,440
that means the first stage xor has a fan

312
00:11:27,440 --> 00:11:29,200
out of 8 and needs to drive a

313
00:11:29,200 --> 00:11:31,839
significant capacitive load to charge

314
00:11:31,839 --> 00:11:35,920
the input pins of the second stage xors

315
00:11:35,920 --> 00:11:39,200
the base latency of a 2 input xor is

316
00:11:39,200 --> 00:11:42,320
about 5 picoseconds in this technology

317
00:11:42,320 --> 00:11:44,399
however due to the capacitive loads that

318
00:11:44,399 --> 00:11:46,560
the first stage xor needs to drive it

319
00:11:46,560 --> 00:11:49,680
has a latency of about 21 picoseconds

320
00:11:49,680 --> 00:11:51,680
while the second stage xors have a

321
00:11:51,680 --> 00:11:54,560
maximum latency of 8 picoseconds because

322
00:11:54,560 --> 00:11:57,040
they are driven by a signal with a large

323
00:11:57,040 --> 00:11:58,720
transition time

324
00:11:58,720 --> 00:12:00,480
what the synthesizer will do in such a

325
00:12:00,480 --> 00:12:02,880
case is either upsizing the dry strength

326
00:12:02,880 --> 00:12:05,839
of the first stage xor if such cells are

327
00:12:05,839 --> 00:12:08,000
available or adding a dry strength

328
00:12:08,000 --> 00:12:11,839
buffer between the first two stages

329
00:12:11,920 --> 00:12:13,680
the result of the second option is

330
00:12:13,680 --> 00:12:16,079
depicted in the right figure now the

331
00:12:16,079 --> 00:12:18,880
first stage xor needs to drive only one

332
00:12:18,880 --> 00:12:21,519
pin and the second stage xors are driven

333
00:12:21,519 --> 00:12:23,279
by a signal with a much smaller

334
00:12:23,279 --> 00:12:24,560
transition time

335
00:12:24,560 --> 00:12:26,880
therefore despite increasing the gate

336
00:12:26,880 --> 00:12:29,600
depths by 50 on the right side the

337
00:12:29,600 --> 00:12:32,639
overall latency is decreased by about 35

338
00:12:32,639 --> 00:12:34,240
compared to the left

339
00:12:34,240 --> 00:12:36,160
this is of course nothing we need to do

340
00:12:36,160 --> 00:12:38,160
by hand because it is done automatically

341
00:12:38,160 --> 00:12:39,760
by the synthesis tool

342
00:12:39,760 --> 00:12:41,279
our point here is simply that the

343
00:12:41,279 --> 00:12:43,200
topology of a circuit plays a pretty

344
00:12:43,200 --> 00:12:47,040
significant role in its latency

345
00:12:48,000 --> 00:12:49,760
we have used all the hardware-based

346
00:12:49,760 --> 00:12:51,920
characteristics discussed above and try

347
00:12:51,920 --> 00:12:54,320
to find optimal round operations for an

348
00:12:54,320 --> 00:12:56,560
ultra low latency sci-fi which we then

349
00:12:56,560 --> 00:13:00,959
called speedy for obvious reasons

350
00:13:01,600 --> 00:13:03,680
this is the heart and center piece of

351
00:13:03,680 --> 00:13:06,560
the speedy block cipher namely its 6-bit

352
00:13:06,560 --> 00:13:09,279
s-box it has a uniformity of 8 a

353
00:13:09,279 --> 00:13:11,600
linearity of 24 and provides full

354
00:13:11,600 --> 00:13:13,120
diffusion

355
00:13:13,120 --> 00:13:14,959
at the top you can see that each input

356
00:13:14,959 --> 00:13:18,079
bit is buffered and inverted in parallel

357
00:13:18,079 --> 00:13:20,240
due to the necessity to buffer each

358
00:13:20,240 --> 00:13:22,720
input bit anyway because of the fan outs

359
00:13:22,720 --> 00:13:24,800
the inverters do not add any latency

360
00:13:24,800 --> 00:13:26,160
here

361
00:13:26,160 --> 00:13:27,600
at the bottom we see that each

362
00:13:27,600 --> 00:13:29,519
coordinate function is realized as a

363
00:13:29,519 --> 00:13:32,000
two-level nand tree as we have seen in

364
00:13:32,000 --> 00:13:34,399
our previous discussions nand gates are

365
00:13:34,399 --> 00:13:36,399
among the fastest logic gates for any

366
00:13:36,399 --> 00:13:37,920
number of inputs

367
00:13:37,920 --> 00:13:40,000
the search for this particular s box was

368
00:13:40,000 --> 00:13:42,240
not trivial and took a lot of time more

369
00:13:42,240 --> 00:13:44,320
details in that regard can be found in

370
00:13:44,320 --> 00:13:47,480
the paper

371
00:13:48,079 --> 00:13:50,560
in order to analyze how our new s-box

372
00:13:50,560 --> 00:13:52,959
compares to other cryptographic s-boxes

373
00:13:52,959 --> 00:13:55,279
we have collected the minimum achievable

374
00:13:55,279 --> 00:13:58,000
latencies of a number of s-boxes in six

375
00:13:58,000 --> 00:14:01,120
different standard cell libraries

376
00:14:01,120 --> 00:14:03,199
two of those libraries are nan gate open

377
00:14:03,199 --> 00:14:05,720
cell libraries the other four are

378
00:14:05,720 --> 00:14:08,959
manufacturable foundry libraries

379
00:14:08,959 --> 00:14:11,120
the individual results pair technology

380
00:14:11,120 --> 00:14:13,360
are listed in the paper here we compare

381
00:14:13,360 --> 00:14:16,000
the average normalized latencies of the

382
00:14:16,000 --> 00:14:18,560
s boxes across all six standard cell

383
00:14:18,560 --> 00:14:20,000
libraries

384
00:14:20,000 --> 00:14:22,000
for the comparison we have selected all

385
00:14:22,000 --> 00:14:23,920
s boxes that have been proposed for a

386
00:14:23,920 --> 00:14:26,000
low latency in literature which are

387
00:14:26,000 --> 00:14:28,000
4-bit s-boxes only

388
00:14:28,000 --> 00:14:30,079
additionally we have added the ascon

389
00:14:30,079 --> 00:14:36,720
5-bit s-box the des s1 box and is s-box

390
00:14:36,720 --> 00:14:38,240
of course those last three are not

391
00:14:38,240 --> 00:14:40,880
supposed to offer a low latency they are

392
00:14:40,880 --> 00:14:42,480
merely included to provide a better

393
00:14:42,480 --> 00:14:44,240
perspective with respect to larger

394
00:14:44,240 --> 00:14:45,600
s-boxes

395
00:14:45,600 --> 00:14:47,600
the results show that the speedy s-box

396
00:14:47,600 --> 00:14:50,000
is impressively fast for a 6-bit s-box

397
00:14:50,000 --> 00:14:53,199
even faster than some of the 4-bit boxes

398
00:14:53,199 --> 00:14:54,959
please note that we distinguish between

399
00:14:54,959 --> 00:14:57,360
speedy with a star and speedy without a

400
00:14:57,360 --> 00:14:58,480
star here

401
00:14:58,480 --> 00:15:01,199
for speedy was a star we have replicated

402
00:15:01,199 --> 00:15:03,519
the exact gate level description shown

403
00:15:03,519 --> 00:15:05,600
in the previous slide

404
00:15:05,600 --> 00:15:07,680
for speedy without a star we have only

405
00:15:07,680 --> 00:15:09,839
given the behavioral description to the

406
00:15:09,839 --> 00:15:12,000
synthesizer

407
00:15:12,000 --> 00:15:13,920
which means in a table lookup manner

408
00:15:13,920 --> 00:15:15,519
which is what we have done for all the

409
00:15:15,519 --> 00:15:17,760
other s boxes as well

410
00:15:17,760 --> 00:15:20,079
please also note that the inverse pds

411
00:15:20,079 --> 00:15:22,480
box which is ranked the third from the

412
00:15:22,480 --> 00:15:24,639
right is not required for the encryption

413
00:15:24,639 --> 00:15:27,600
algorithm therefore its latency is not

414
00:15:27,600 --> 00:15:31,040
of primary importance here

415
00:15:31,040 --> 00:15:32,720
we have chosen a rather strong and

416
00:15:32,720 --> 00:15:34,720
expensive linear layer in order to limit

417
00:15:34,720 --> 00:15:36,639
the number of required rounds to a

418
00:15:36,639 --> 00:15:37,600
minimum

419
00:15:37,600 --> 00:15:39,440
this figure shows the combined mixed

420
00:15:39,440 --> 00:15:41,600
columns at round key and at round

421
00:15:41,600 --> 00:15:44,560
constant operation it is realized as a

422
00:15:44,560 --> 00:15:48,240
three level xo3 based on two input xors

423
00:15:48,240 --> 00:15:50,160
we have also experimented with three

424
00:15:50,160 --> 00:15:52,320
input and four input xors to reduce the

425
00:15:52,320 --> 00:15:54,560
number of stages but those did not lead

426
00:15:54,560 --> 00:15:58,079
to a reduction of the latency

427
00:15:58,560 --> 00:16:00,880
this is a structure of the whole cipher

428
00:16:00,880 --> 00:16:03,120
please note that the s box and the shift

429
00:16:03,120 --> 00:16:06,160
columns operation are applied twice each

430
00:16:06,160 --> 00:16:08,160
before one expensive combined mix

431
00:16:08,160 --> 00:16:10,079
columns at round key and at round

432
00:16:10,079 --> 00:16:12,720
constant operation is executed

433
00:16:12,720 --> 00:16:14,160
while the block and key size are

434
00:16:14,160 --> 00:16:16,000
flexible in the speedy family we have

435
00:16:16,000 --> 00:16:18,959
concentrated on 192-bit block and key

436
00:16:18,959 --> 00:16:22,160
sizes as 192 is the least common

437
00:16:22,160 --> 00:16:25,199
multiple of 6 which is a width of the s

438
00:16:25,199 --> 00:16:28,160
box and 64 which is a common data with

439
00:16:28,160 --> 00:16:30,320
in modern cpus

440
00:16:30,320 --> 00:16:31,920
the number of rounds can be used to

441
00:16:31,920 --> 00:16:34,079
adjust the security versus latency

442
00:16:34,079 --> 00:16:36,639
trade-off in this work we concentrate on

443
00:16:36,639 --> 00:16:39,680
the speedy versions with 5 6 and 7

444
00:16:39,680 --> 00:16:42,000
rounds

445
00:16:42,480 --> 00:16:45,160
we claim that attacks on speedy with

446
00:16:45,160 --> 00:16:48,720
192-bit block and key size and 5 rounds

447
00:16:48,720 --> 00:16:51,199
require at least a time complexity of

448
00:16:51,199 --> 00:16:53,199
two to the 128

449
00:16:53,199 --> 00:16:55,279
when the data complexity is limited by

450
00:16:55,279 --> 00:16:57,360
two to the 64.

451
00:16:57,360 --> 00:17:00,560
for six and seven rounds we claim 128

452
00:17:00,560 --> 00:17:04,000
bit and 192 bit security respectively

453
00:17:04,000 --> 00:17:05,679
without restrictions to the data

454
00:17:05,679 --> 00:17:07,919
complexity

455
00:17:07,919 --> 00:17:09,199
therefore

456
00:17:09,199 --> 00:17:11,520
only for speedy with seven rounds we

457
00:17:11,520 --> 00:17:13,359
claim that exhaustive key search is the

458
00:17:13,359 --> 00:17:15,599
best attack for the variance with fewer

459
00:17:15,599 --> 00:17:17,280
rounds better attacks than exhaustive

460
00:17:17,280 --> 00:17:20,079
key search are expected but hopefully

461
00:17:20,079 --> 00:17:22,720
not below our claimed complexities

462
00:17:22,720 --> 00:17:24,640
for comparison prince claims that

463
00:17:24,640 --> 00:17:27,679
attacks against it require 2 to the 127

464
00:17:27,679 --> 00:17:31,200
minus n time complexity for a 2 to the n

465
00:17:31,200 --> 00:17:34,080
data complexity prince version 2 claims

466
00:17:34,080 --> 00:17:36,080
2 to the 112

467
00:17:36,080 --> 00:17:39,039
time complexity for 2 to the 50 data

468
00:17:39,039 --> 00:17:40,400
complexity

469
00:17:40,400 --> 00:17:42,400
in that regard speedy with 5 rounds

470
00:17:42,400 --> 00:17:44,400
already claims a significantly higher

471
00:17:44,400 --> 00:17:46,240
security level than prince and prince

472
00:17:46,240 --> 00:17:48,320
version 2 which up to now are the

473
00:17:48,320 --> 00:17:51,918
fastest known block ciphers

474
00:17:52,559 --> 00:17:54,480
this figure shows a comparison of the

475
00:17:54,480 --> 00:17:57,039
average normalized latency of the full

476
00:17:57,039 --> 00:17:59,200
encryption algorithms across six

477
00:17:59,200 --> 00:18:02,160
different standard cell libraries

478
00:18:02,160 --> 00:18:04,720
clearly speedy with five and six rounds

479
00:18:04,720 --> 00:18:06,960
constituting the four left most bars

480
00:18:06,960 --> 00:18:10,000
here outperforms all other low latency

481
00:18:10,000 --> 00:18:13,840
primitives despite its comparably large

482
00:18:13,840 --> 00:18:15,039
bit state

483
00:18:15,039 --> 00:18:16,480
even with seven rounds speedy

484
00:18:16,480 --> 00:18:18,400
outperforms quite a number of other

485
00:18:18,400 --> 00:18:20,240
latency constructions

486
00:18:20,240 --> 00:18:22,160
the full comparison can be found in the

487
00:18:22,160 --> 00:18:24,559
paper

488
00:18:26,640 --> 00:18:28,720
regarding area comparisons of block

489
00:18:28,720 --> 00:18:30,880
ciphers with different block lengths it

490
00:18:30,880 --> 00:18:32,960
is common to consider the area per bit

491
00:18:32,960 --> 00:18:35,039
instead of the total area

492
00:18:35,039 --> 00:18:37,039
and although this was not a focus of

493
00:18:37,039 --> 00:18:38,960
this work we can see that the area per

494
00:18:38,960 --> 00:18:41,760
bit of speedy 5 is actually lower than

495
00:18:41,760 --> 00:18:44,799
that of prince and prince version 2.

496
00:18:44,799 --> 00:18:47,600
even speedy 6 is not far behind it

497
00:18:47,600 --> 00:18:49,200
becomes clear that the dedicated

498
00:18:49,200 --> 00:18:51,280
lightweight block ciphers are not

499
00:18:51,280 --> 00:18:53,360
necessarily more area efficient than

500
00:18:53,360 --> 00:18:56,360
speedy

501
00:18:58,320 --> 00:19:01,039
to summarize we have created a new ultra

502
00:19:01,039 --> 00:19:02,720
low latency block cipher which

503
00:19:02,720 --> 00:19:04,480
outperforms the state of the art in

504
00:19:04,480 --> 00:19:07,039
terms of execution time when implemented

505
00:19:07,039 --> 00:19:09,520
in cmos technology

506
00:19:09,520 --> 00:19:12,160
speedy 5 is about to quarter faster than

507
00:19:12,160 --> 00:19:13,840
prince and prince version 2 while

508
00:19:13,840 --> 00:19:16,320
occupying less area per bit and

509
00:19:16,320 --> 00:19:18,080
providing a significantly higher

510
00:19:18,080 --> 00:19:21,120
security level in case our claims prove

511
00:19:21,120 --> 00:19:23,679
to be accurate over time

512
00:19:23,679 --> 00:19:26,320
speedy six is eight to twelve percent

513
00:19:26,320 --> 00:19:28,160
faster than prince and prince version

514
00:19:28,160 --> 00:19:30,559
two and three to seven percent faster

515
00:19:30,559 --> 00:19:32,640
than autros which claims the same

516
00:19:32,640 --> 00:19:35,760
security level but is not invertible

517
00:19:35,760 --> 00:19:38,559
speedy seven provides full 192-bit

518
00:19:38,559 --> 00:19:40,720
security while being less than 8 percent

519
00:19:40,720 --> 00:19:43,919
slower than prince and prince version 2.

520
00:19:43,919 --> 00:19:46,160
thus we believe that speedy is a great

521
00:19:46,160 --> 00:19:48,559
choice for any application where high

522
00:19:48,559 --> 00:19:51,200
encryption speed and high security are

523
00:19:51,200 --> 00:19:54,720
the primary requirements

524
00:19:54,720 --> 00:19:56,320
thank you very much for your attention

525
00:19:56,320 --> 00:19:58,559
if there are any questions feel free to

526
00:19:58,559 --> 00:20:00,720
ask them during the live session at

527
00:20:00,720 --> 00:20:02,640
chess 2021

528
00:20:02,640 --> 00:20:07,840
on 17th of september see you there

