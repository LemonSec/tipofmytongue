1
00:00:00,560 --> 00:00:03,360
hi my name is lenath waters and in this

2
00:00:03,360 --> 00:00:05,920
recording talk i will present our paper

3
00:00:05,920 --> 00:00:08,960
titled my other car is your car

4
00:00:08,960 --> 00:00:11,040
compromising the tesla mall x-kilos

5
00:00:11,040 --> 00:00:12,719
entry system

6
00:00:12,719 --> 00:00:14,559
i want to start this presentation by

7
00:00:14,559 --> 00:00:16,880
quickly recapping what a killer's entry

8
00:00:16,880 --> 00:00:19,039
system is exactly

9
00:00:19,039 --> 00:00:21,039
in many modern vehicles there are two

10
00:00:21,039 --> 00:00:23,600
related but separate ways of unlocking

11
00:00:23,600 --> 00:00:26,320
the car using the key fob

12
00:00:26,320 --> 00:00:29,119
specifically in the model x the car can

13
00:00:29,119 --> 00:00:31,679
be unlocked by the price of a button

14
00:00:31,679 --> 00:00:33,600
this is often referred to as remote

15
00:00:33,600 --> 00:00:35,280
keyless entry

16
00:00:35,280 --> 00:00:37,600
in this scenario the key fob transmits a

17
00:00:37,600 --> 00:00:39,840
rolling or hopping code to the vehicle

18
00:00:39,840 --> 00:00:42,480
the vehicle verifies it and then unlocks

19
00:00:42,480 --> 00:00:45,360
the door if the code was valid

20
00:00:45,360 --> 00:00:47,360
noted in this scenario there is no

21
00:00:47,360 --> 00:00:49,440
communication from the car to the key

22
00:00:49,440 --> 00:00:50,800
fob

23
00:00:50,800 --> 00:00:53,199
in contrast in the passive keyless entry

24
00:00:53,199 --> 00:00:55,280
scenario the car will transmit a

25
00:00:55,280 --> 00:00:56,879
challenge to the key fob

26
00:00:56,879 --> 00:00:58,640
and in turn the key fob computes a

27
00:00:58,640 --> 00:01:00,879
cryptographic response and sends it back

28
00:01:00,879 --> 00:01:02,160
to the car

29
00:01:02,160 --> 00:01:04,239
the car verifies the response and

30
00:01:04,239 --> 00:01:06,320
unlocks the doors if the response was

31
00:01:06,320 --> 00:01:08,159
valid

32
00:01:08,159 --> 00:01:10,080
during our initial exploration of the

33
00:01:10,080 --> 00:01:13,040
system we disassembled a model x keyfob

34
00:01:13,040 --> 00:01:14,960
to understand what components are being

35
00:01:14,960 --> 00:01:16,320
used

36
00:01:16,320 --> 00:01:18,720
to our surprise we founded texas

37
00:01:18,720 --> 00:01:20,439
instruments

38
00:01:20,439 --> 00:01:22,880
cc2541 bluetooth low energy

39
00:01:22,880 --> 00:01:25,200
microcontroller which is packed with a

40
00:01:25,200 --> 00:01:27,920
texas instrument's 2.4 gigahertz range

41
00:01:27,920 --> 00:01:29,280
extender

42
00:01:29,280 --> 00:01:31,280
on the other side of the board we find

43
00:01:31,280 --> 00:01:33,920
the maximum integrated 22 kilohertz

44
00:01:33,920 --> 00:01:35,600
transponder chip

45
00:01:35,600 --> 00:01:37,759
this chip allows the key fob to receive

46
00:01:37,759 --> 00:01:39,680
low frequency messages coming from the

47
00:01:39,680 --> 00:01:41,200
car

48
00:01:41,200 --> 00:01:43,680
on the left side of the board we find an

49
00:01:43,680 --> 00:01:46,320
allen log device's accelerometer

50
00:01:46,320 --> 00:01:48,399
this is likely being used to try and

51
00:01:48,399 --> 00:01:50,640
prevent relay attacks or to increase the

52
00:01:50,640 --> 00:01:53,439
battery life of the keyfob

53
00:01:53,439 --> 00:01:54,399
finally

54
00:01:54,399 --> 00:01:57,119
there is an infineon slm-97

55
00:01:57,119 --> 00:02:00,479
common criteria certified secure element

56
00:02:00,479 --> 00:02:02,320
this secure element is responsible for

57
00:02:02,320 --> 00:02:04,640
all of the critical cryptographic

58
00:02:04,640 --> 00:02:07,119
operations performed in this keyfob

59
00:02:07,119 --> 00:02:09,038
it also stores all of the cryptographic

60
00:02:09,038 --> 00:02:10,479
keys

61
00:02:10,479 --> 00:02:12,400
as you can imagine compromising the

62
00:02:12,400 --> 00:02:13,840
secure element itself will be

63
00:02:13,840 --> 00:02:15,280
challenging

64
00:02:15,280 --> 00:02:17,280
nevertheless in this talk we will cover

65
00:02:17,280 --> 00:02:19,520
a practical attack that allows us to

66
00:02:19,520 --> 00:02:21,920
unlock and start a model x without

67
00:02:21,920 --> 00:02:24,560
having to compromise the secure element

68
00:02:24,560 --> 00:02:27,280
instead we are simply going to ask it to

69
00:02:27,280 --> 00:02:30,319
unlock the car for us

70
00:02:30,319 --> 00:02:32,800
interestingly this small battery powered

71
00:02:32,800 --> 00:02:35,519
device contains three hardware aes

72
00:02:35,519 --> 00:02:37,840
accelerators

73
00:02:37,840 --> 00:02:39,680
for the remainder of the stock it is

74
00:02:39,680 --> 00:02:41,440
important to keep in mind that there are

75
00:02:41,440 --> 00:02:43,760
two radio frequency interfaces

76
00:02:43,760 --> 00:02:45,200
and that the secure element is

77
00:02:45,200 --> 00:02:47,040
responsible for storing cryptographic

78
00:02:47,040 --> 00:02:49,200
keys and performing cryptographic

79
00:02:49,200 --> 00:02:51,839
operations

80
00:02:52,400 --> 00:02:54,879
this is our homemade tesla model x key

81
00:02:54,879 --> 00:02:56,640
fob development kit

82
00:02:56,640 --> 00:02:58,560
in which we soldered wires to most of

83
00:02:58,560 --> 00:03:00,879
the exposed test points and some of the

84
00:03:00,879 --> 00:03:02,800
exposed files

85
00:03:02,800 --> 00:03:05,519
we also added a cc debugger that allows

86
00:03:05,519 --> 00:03:07,840
us to read and write the firmware stored

87
00:03:07,840 --> 00:03:08,879
in the bluetooth low energy

88
00:03:08,879 --> 00:03:10,720
microcontroller

89
00:03:10,720 --> 00:03:12,480
by recording the signals present on

90
00:03:12,480 --> 00:03:15,280
these test points using a logic analyzer

91
00:03:15,280 --> 00:03:17,280
we can get a better understanding of how

92
00:03:17,280 --> 00:03:19,360
all of the different components interact

93
00:03:19,360 --> 00:03:21,040
with each other

94
00:03:21,040 --> 00:03:23,200
so with the logic analyzer attached we

95
00:03:23,200 --> 00:03:25,360
can then press a button and figure out

96
00:03:25,360 --> 00:03:27,440
how the button press is handled by the

97
00:03:27,440 --> 00:03:29,120
device

98
00:03:29,120 --> 00:03:31,120
using this information we can then make

99
00:03:31,120 --> 00:03:33,040
a more detailed version of our first

100
00:03:33,040 --> 00:03:34,959
slide

101
00:03:34,959 --> 00:03:37,120
in the remote keyless entry scenario the

102
00:03:37,120 --> 00:03:39,200
user will first press one of the buttons

103
00:03:39,200 --> 00:03:40,720
on the keyfob

104
00:03:40,720 --> 00:03:42,879
this button press is handled by the

105
00:03:42,879 --> 00:03:45,360
cc2541

106
00:03:45,360 --> 00:03:47,920
this microcontroller will then send a

107
00:03:47,920 --> 00:03:51,120
request unlock token apdu command to the

108
00:03:51,120 --> 00:03:52,959
secure element

109
00:03:52,959 --> 00:03:54,959
the secure element will in turn compute

110
00:03:54,959 --> 00:03:59,439
a token and send it back to the cc2541

111
00:03:59,439 --> 00:04:01,680
finally the token is transmitted to the

112
00:04:01,680 --> 00:04:03,599
car using a bluetooth low energy

113
00:04:03,599 --> 00:04:06,239
broadcast message

114
00:04:06,239 --> 00:04:08,319
in the passive keyless entry scenario

115
00:04:08,319 --> 00:04:10,159
the car will send a challenge over the

116
00:04:10,159 --> 00:04:13,680
22 kilohertz low frequency channel

117
00:04:13,680 --> 00:04:15,439
this challenge is received and

118
00:04:15,439 --> 00:04:17,680
demodulated by the maxim integrated

119
00:04:17,680 --> 00:04:19,519
transponder chip

120
00:04:19,519 --> 00:04:21,880
the challenge is then forwarded to the

121
00:04:21,880 --> 00:04:24,960
cc2541 microcontroller over a serial

122
00:04:24,960 --> 00:04:27,759
peripheral interface bus

123
00:04:27,759 --> 00:04:29,600
from there the challenge is sent to the

124
00:04:29,600 --> 00:04:31,600
secure element which will compute a

125
00:04:31,600 --> 00:04:34,320
response to the provider challenge

126
00:04:34,320 --> 00:04:36,320
this response is then sent back to the

127
00:04:36,320 --> 00:04:40,000
car over bluetooth energy

128
00:04:41,199 --> 00:04:42,800
now that we have a basic understanding

129
00:04:42,800 --> 00:04:45,120
of how the device operates we can take a

130
00:04:45,120 --> 00:04:46,880
closer look at the bluetooth low energy

131
00:04:46,880 --> 00:04:48,479
side of things

132
00:04:48,479 --> 00:04:51,360
like many other ble devices the keyfob

133
00:04:51,360 --> 00:04:53,919
behaves like a ble peripheral

134
00:04:53,919 --> 00:04:56,240
by power cycling the keyfob we notice

135
00:04:56,240 --> 00:04:58,639
that the keyfob advertises itself as a

136
00:04:58,639 --> 00:05:02,000
connectable ble peripheral

137
00:05:02,000 --> 00:05:03,360
at this point we can connect to the

138
00:05:03,360 --> 00:05:06,080
keyfob using a variety of tools

139
00:05:06,080 --> 00:05:07,680
on the right you can see a screenshot

140
00:05:07,680 --> 00:05:09,360
from the light blue smartphone app

141
00:05:09,360 --> 00:05:11,840
connected to the key fob

142
00:05:11,840 --> 00:05:14,479
the key fob hosts a variety of services

143
00:05:14,479 --> 00:05:17,600
each including multiple characteristics

144
00:05:17,600 --> 00:05:19,840
the overaired download service is

145
00:05:19,840 --> 00:05:22,400
provided by texas instruments and allows

146
00:05:22,400 --> 00:05:24,720
to update the firmware on the keyfob

147
00:05:24,720 --> 00:05:27,440
over the ble interface

148
00:05:27,440 --> 00:05:29,840
a second interesting service is related

149
00:05:29,840 --> 00:05:32,400
to application protocol data units or

150
00:05:32,400 --> 00:05:34,000
apdus

151
00:05:34,000 --> 00:05:36,479
this service allows to send apdu

152
00:05:36,479 --> 00:05:39,120
commands to the secure element over

153
00:05:39,120 --> 00:05:41,360
bluetooth low energy

154
00:05:41,360 --> 00:05:42,960
next we will have a look at these two

155
00:05:42,960 --> 00:05:45,759
services in more detail

156
00:05:45,759 --> 00:05:48,400
as stated earlier the apdu service

157
00:05:48,400 --> 00:05:50,240
allows us to interact with the secure

158
00:05:50,240 --> 00:05:52,080
element to the bluetooth low energy

159
00:05:52,080 --> 00:05:53,840
microcontroller

160
00:05:53,840 --> 00:05:56,160
this functionality is used when a keyfob

161
00:05:56,160 --> 00:05:58,720
is being paired to a car

162
00:05:58,720 --> 00:06:01,039
one issue with such an interface is that

163
00:06:01,039 --> 00:06:02,800
someone could potentially request an

164
00:06:02,800 --> 00:06:05,440
unlocked token from the secure element

165
00:06:05,440 --> 00:06:07,759
to prevent such an attack a block list

166
00:06:07,759 --> 00:06:09,280
is implemented on the ble

167
00:06:09,280 --> 00:06:10,800
microcontroller

168
00:06:10,800 --> 00:06:12,880
this block list prevents us from using

169
00:06:12,880 --> 00:06:15,600
among others the get unlocked token apgu

170
00:06:15,600 --> 00:06:18,000
command

171
00:06:18,800 --> 00:06:20,880
the overair download service allows us

172
00:06:20,880 --> 00:06:22,280
to update the

173
00:06:22,280 --> 00:06:26,880
cc2541 firmware over the ble interface

174
00:06:26,880 --> 00:06:28,639
as part of a master thesis at our

175
00:06:28,639 --> 00:06:31,280
university we recently investigated the

176
00:06:31,280 --> 00:06:34,240
example oad implementation provided by

177
00:06:34,240 --> 00:06:36,160
texas instruments

178
00:06:36,160 --> 00:06:37,520
the secure variant of this

179
00:06:37,520 --> 00:06:40,319
implementation uses aes encounter mode

180
00:06:40,319 --> 00:06:43,280
to encrypt the firmware and a cbc magtag

181
00:06:43,280 --> 00:06:45,919
to protect its authenticity

182
00:06:45,919 --> 00:06:47,840
on the left you can see a grayscale plot

183
00:06:47,840 --> 00:06:50,160
of a plain text firmware image and on

184
00:06:50,160 --> 00:06:51,599
the right you can see the encrypted

185
00:06:51,599 --> 00:06:53,759
firmware image when encrypted using the

186
00:06:53,759 --> 00:06:56,000
example implementation

187
00:06:56,000 --> 00:06:57,360
we found that the counter mode

188
00:06:57,360 --> 00:06:59,199
implementation had a book

189
00:06:59,199 --> 00:07:01,280
resulting in the counter resetting every

190
00:07:01,280 --> 00:07:03,120
four aes blocks

191
00:07:03,120 --> 00:07:04,960
as the firmware spread it to a fixed

192
00:07:04,960 --> 00:07:06,960
length it is straightforward to recover

193
00:07:06,960 --> 00:07:09,039
the key stream and decrypt the entire

194
00:07:09,039 --> 00:07:11,280
firmware image

195
00:07:11,280 --> 00:07:13,120
we also found the message authentication

196
00:07:13,120 --> 00:07:15,120
tag was being verified using the

197
00:07:15,120 --> 00:07:17,759
standard variable time mem compare

198
00:07:17,759 --> 00:07:18,800
function

199
00:07:18,800 --> 00:07:20,639
this could allow an attacker to craft a

200
00:07:20,639 --> 00:07:23,680
valid attack using a timing side channel

201
00:07:23,680 --> 00:07:25,440
both of these issues have been fixed in

202
00:07:25,440 --> 00:07:27,520
later versions of the texas instruments

203
00:07:27,520 --> 00:07:30,479
software development kit

204
00:07:30,479 --> 00:07:31,919
tesla modified the example

205
00:07:31,919 --> 00:07:33,280
implementation

206
00:07:33,280 --> 00:07:34,960
we found that tesla distributes the

207
00:07:34,960 --> 00:07:37,919
phonomag in plain text and adds a sha-1

208
00:07:37,919 --> 00:07:40,240
hash and rsa second check to the

209
00:07:40,240 --> 00:07:41,919
firmware

210
00:07:41,919 --> 00:07:44,080
during an override download update the

211
00:07:44,080 --> 00:07:46,479
secure element will then compute a sha

212
00:07:46,479 --> 00:07:50,400
256 hash over the provided xiaowan hash

213
00:07:50,400 --> 00:07:53,520
and verifies the rsa signature

214
00:07:53,520 --> 00:07:54,639
however

215
00:07:54,639 --> 00:07:56,319
we noticed that the firmware of the

216
00:07:56,319 --> 00:07:58,240
cc2541

217
00:07:58,240 --> 00:08:00,240
would simply ignore the secure element's

218
00:08:00,240 --> 00:08:01,599
response

219
00:08:01,599 --> 00:08:03,759
so even an unsigned firmware image would

220
00:08:03,759 --> 00:08:06,400
be accepted

221
00:08:06,400 --> 00:08:08,720
having established that the oed service

222
00:08:08,720 --> 00:08:10,960
is vulnerable we can try to build our

223
00:08:10,960 --> 00:08:13,280
own malicious update firmware

224
00:08:13,280 --> 00:08:15,039
the goal of this malicious firmware is

225
00:08:15,039 --> 00:08:17,840
to remove the apdu block list enabling

226
00:08:17,840 --> 00:08:20,240
us to send arbitrary apu commands to the

227
00:08:20,240 --> 00:08:22,160
secure element

228
00:08:22,160 --> 00:08:24,879
to achieve this we have a few options we

229
00:08:24,879 --> 00:08:26,800
can write a custom firmware image from

230
00:08:26,800 --> 00:08:27,919
scratch

231
00:08:27,919 --> 00:08:29,840
however this would require us to become

232
00:08:29,840 --> 00:08:31,520
familiar with the texas instruments

233
00:08:31,520 --> 00:08:34,640
tooling and software development kit

234
00:08:34,640 --> 00:08:36,479
unless we implement all of the key fobs

235
00:08:36,479 --> 00:08:38,640
features it would be rather evident when

236
00:08:38,640 --> 00:08:41,360
a key fob has been updated

237
00:08:41,360 --> 00:08:43,200
a second option would be to statically

238
00:08:43,200 --> 00:08:46,160
reverse engineer the existing fero mesh

239
00:08:46,160 --> 00:08:48,000
while popular reverse engineering tools

240
00:08:48,000 --> 00:08:51,040
support the 8051 instruction set they do

241
00:08:51,040 --> 00:08:52,399
not contain support for the

242
00:08:52,399 --> 00:08:54,160
customizations present in this

243
00:08:54,160 --> 00:08:56,240
particular chip

244
00:08:56,240 --> 00:08:58,640
so finally we decided that reverse

245
00:08:58,640 --> 00:09:00,080
engineering the firmware would be a

246
00:09:00,080 --> 00:09:02,720
time-consuming and tedious endeavor

247
00:09:02,720 --> 00:09:05,200
the solution we came up with is a brute

248
00:09:05,200 --> 00:09:07,040
force based firmware modification

249
00:09:07,040 --> 00:09:11,440
process that can be easily automated

250
00:09:11,440 --> 00:09:13,360
the idea behind this approach is that a

251
00:09:13,360 --> 00:09:15,519
simple block list implementation will

252
00:09:15,519 --> 00:09:17,920
likely use conditional instructions

253
00:09:17,920 --> 00:09:20,080
such as the jump if accumulator is not

254
00:09:20,080 --> 00:09:22,560
zero or jump if accumulator is 0

255
00:09:22,560 --> 00:09:24,480
instructions

256
00:09:24,480 --> 00:09:27,200
so to automatically modify the firmware

257
00:09:27,200 --> 00:09:29,920
we simply replace an occurrence of jump

258
00:09:29,920 --> 00:09:32,480
if accumulator not 0 which if

259
00:09:32,480 --> 00:09:34,320
accumulator is 0.

260
00:09:34,320 --> 00:09:36,480
we then flash this modified firmware to

261
00:09:36,480 --> 00:09:39,200
the keyfob using the cc debugger on our

262
00:09:39,200 --> 00:09:41,519
homemade development kit

263
00:09:41,519 --> 00:09:43,279
afterwards we connect to the key fob

264
00:09:43,279 --> 00:09:45,279
over bluetooth low energy and try to

265
00:09:45,279 --> 00:09:47,600
send a blocked apdu

266
00:09:47,600 --> 00:09:49,440
if we receive response we know that we

267
00:09:49,440 --> 00:09:52,880
successfully modified the block list

268
00:09:52,880 --> 00:09:55,120
having identified the offset at which an

269
00:09:55,120 --> 00:09:56,959
instruction had to be patched we could

270
00:09:56,959 --> 00:09:58,880
then easily disassemble the surrounding

271
00:09:58,880 --> 00:10:01,120
instructions and remove the entire block

272
00:10:01,120 --> 00:10:02,240
list

273
00:10:02,240 --> 00:10:03,920
so at this point we have a malicious

274
00:10:03,920 --> 00:10:05,920
firmware image that can be used in an

275
00:10:05,920 --> 00:10:07,680
attack

276
00:10:07,680 --> 00:10:09,600
so far our plan of attack is to first

277
00:10:09,600 --> 00:10:11,839
reset the keyfob battery

278
00:10:11,839 --> 00:10:13,760
then we can connect to the keyfob and

279
00:10:13,760 --> 00:10:15,839
perform an over the air download using

280
00:10:15,839 --> 00:10:18,480
our malicious firmware image this

281
00:10:18,480 --> 00:10:20,880
firmware has been modified to allow all

282
00:10:20,880 --> 00:10:22,959
of the apdus

283
00:10:22,959 --> 00:10:25,040
we can now use the apidu service to

284
00:10:25,040 --> 00:10:27,519
request a valid rolling code or unlock

285
00:10:27,519 --> 00:10:30,000
token from the secure element

286
00:10:30,000 --> 00:10:31,920
this rolling code can then be used to

287
00:10:31,920 --> 00:10:33,680
unlock the car

288
00:10:33,680 --> 00:10:35,279
it is important to note here that this

289
00:10:35,279 --> 00:10:37,200
code can only be used to unlock the car

290
00:10:37,200 --> 00:10:40,480
and we cannot use it to start the car

291
00:10:40,480 --> 00:10:42,720
of course we want to get rid of this

292
00:10:42,720 --> 00:10:44,880
first step in the attack plan

293
00:10:44,880 --> 00:10:47,040
if we have physical access to the keyfob

294
00:10:47,040 --> 00:10:49,040
we might as well just use it to unlock

295
00:10:49,040 --> 00:10:51,120
the car

296
00:10:51,120 --> 00:10:53,120
next we will have a look at the car side

297
00:10:53,120 --> 00:10:55,200
of the system to identify a way of

298
00:10:55,200 --> 00:10:58,720
waking up the key fob remotely

299
00:10:58,720 --> 00:11:00,720
this picture shows the tesla model x

300
00:11:00,720 --> 00:11:03,200
body control module this is one of the

301
00:11:03,200 --> 00:11:06,079
ecu's located in the car

302
00:11:06,079 --> 00:11:07,680
among other things the body control

303
00:11:07,680 --> 00:11:09,760
module is responsible for unlocking the

304
00:11:09,760 --> 00:11:12,480
doors and starting the vehicle

305
00:11:12,480 --> 00:11:14,640
we can identify a few regions on the

306
00:11:14,640 --> 00:11:16,480
splintered circuit board

307
00:11:16,480 --> 00:11:18,800
we have a power distribution network

308
00:11:18,800 --> 00:11:20,959
but we also have a region with

309
00:11:20,959 --> 00:11:22,959
components related to i o and bus

310
00:11:22,959 --> 00:11:24,480
interfaces

311
00:11:24,480 --> 00:11:26,720
some of these interfaces such as the

312
00:11:26,720 --> 00:11:29,839
controller area network or canvas allow

313
00:11:29,839 --> 00:11:32,160
this bcm to communicate with other parts

314
00:11:32,160 --> 00:11:34,079
in the vehicle

315
00:11:34,079 --> 00:11:36,079
next we have a low frequency transceiver

316
00:11:36,079 --> 00:11:39,040
chip that is connected to five antennas

317
00:11:39,040 --> 00:11:40,560
located in different locations

318
00:11:40,560 --> 00:11:42,480
throughout the vehicle

319
00:11:42,480 --> 00:11:45,360
using this interface the bcm can send

320
00:11:45,360 --> 00:11:48,000
commands or messages to the key fob over

321
00:11:48,000 --> 00:11:50,399
the low frequency channel

322
00:11:50,399 --> 00:11:51,680
there are also three bluetooth low

323
00:11:51,680 --> 00:11:54,160
energy microcontrollers on this bcm

324
00:11:54,160 --> 00:11:56,399
one for each antenna

325
00:11:56,399 --> 00:11:57,440
finally

326
00:11:57,440 --> 00:11:59,920
marked in red we have the main processor

327
00:11:59,920 --> 00:12:04,959
on this board a freescale spc-56

328
00:12:04,959 --> 00:12:07,600
this microcontroller is connected to an

329
00:12:07,600 --> 00:12:09,839
infineon slm-97

330
00:12:09,839 --> 00:12:12,160
element

331
00:12:12,320 --> 00:12:14,399
as it turns out the body control module

332
00:12:14,399 --> 00:12:16,240
can send the wake up command over low

333
00:12:16,240 --> 00:12:18,240
frequency to the key fob

334
00:12:18,240 --> 00:12:20,560
this wake up command then causes the key

335
00:12:20,560 --> 00:12:23,279
fob to advertise itself as connectable

336
00:12:23,279 --> 00:12:25,440
over bluetooth energy

337
00:12:25,440 --> 00:12:28,720
however bcm is only capable of waking up

338
00:12:28,720 --> 00:12:30,800
a keyfob that has been paired to the

339
00:12:30,800 --> 00:12:32,240
same car

340
00:12:32,240 --> 00:12:34,480
as a keyfob will only act on a wake up

341
00:12:34,480 --> 00:12:36,800
command if the wake up command contains

342
00:12:36,800 --> 00:12:39,600
the correct car identifier

343
00:12:39,600 --> 00:12:41,920
this car identifier is derived from the

344
00:12:41,920 --> 00:12:44,320
vehicle identification number or vin

345
00:12:44,320 --> 00:12:45,920
which is readable from the car's

346
00:12:45,920 --> 00:12:47,360
windshield

347
00:12:47,360 --> 00:12:49,680
the vin itself is stored in a secure

348
00:12:49,680 --> 00:12:52,959
element and get by the microcontroller

349
00:12:52,959 --> 00:12:54,720
as the main microcontroller trusts the

350
00:12:54,720 --> 00:12:56,160
information coming from the secure

351
00:12:56,160 --> 00:12:58,240
element we can also trick it into

352
00:12:58,240 --> 00:13:00,480
believing it belongs to a different car

353
00:13:00,480 --> 00:13:02,320
or venom

354
00:13:02,320 --> 00:13:04,800
to do so we remove the secure element

355
00:13:04,800 --> 00:13:07,680
from a bcm and replaced it with a usb to

356
00:13:07,680 --> 00:13:10,399
serial converter allowing us to emulate

357
00:13:10,399 --> 00:13:12,880
the secure element behavior

358
00:13:12,880 --> 00:13:15,760
using this modified bcm we can now force

359
00:13:15,760 --> 00:13:18,320
a target keyfob to wake up and advertise

360
00:13:18,320 --> 00:13:21,440
itself as connectable

361
00:13:21,440 --> 00:13:23,440
in our new plan of attack we can now

362
00:13:23,440 --> 00:13:25,440
first request the target keyfob to

363
00:13:25,440 --> 00:13:28,000
advertise itself as connectable using a

364
00:13:28,000 --> 00:13:30,000
modified dcm

365
00:13:30,000 --> 00:13:31,760
as before we can then connect to the

366
00:13:31,760 --> 00:13:33,760
keyfob and push our malicious firmware

367
00:13:33,760 --> 00:13:35,839
image to the keyfob

368
00:13:35,839 --> 00:13:37,920
afterwards we can request a valid unlock

369
00:13:37,920 --> 00:13:40,560
token from the secure element to the ble

370
00:13:40,560 --> 00:13:42,639
apdu service

371
00:13:42,639 --> 00:13:44,639
this token a rolling code can then be

372
00:13:44,639 --> 00:13:47,279
used to unlock the car

373
00:13:47,279 --> 00:13:48,959
now there is still one final missing

374
00:13:48,959 --> 00:13:49,839
piece

375
00:13:49,839 --> 00:13:52,160
unlocking the card is fun but we want to

376
00:13:52,160 --> 00:13:54,320
be able to drive away with it

377
00:13:54,320 --> 00:13:56,639
to achieve this we had a look at how a

378
00:13:56,639 --> 00:13:59,360
new key fob can be paired to the car

379
00:13:59,360 --> 00:14:01,600
in normal circumstances a tesla service

380
00:14:01,600 --> 00:14:04,240
technician will use the tesla toolbox to

381
00:14:04,240 --> 00:14:06,880
pair a new keyfob to the car

382
00:14:06,880 --> 00:14:09,279
the toolbox is a tool developed by tesla

383
00:14:09,279 --> 00:14:11,120
that is used to service model s and

384
00:14:11,120 --> 00:14:12,880
model x vehicles

385
00:14:12,880 --> 00:14:15,199
the tool is not publicly available with

386
00:14:15,199 --> 00:14:17,120
leaked versions do circulate on the

387
00:14:17,120 --> 00:14:18,320
internet

388
00:14:18,320 --> 00:14:19,920
the tool was recently also

389
00:14:19,920 --> 00:14:21,680
unintentionally released by tesla

390
00:14:21,680 --> 00:14:23,279
themselves

391
00:14:23,279 --> 00:14:25,360
the toolbox consists out of modules that

392
00:14:25,360 --> 00:14:27,680
are stored encrypted on disk but as you

393
00:14:27,680 --> 00:14:29,600
can imagine the software itself has to

394
00:14:29,600 --> 00:14:31,920
decap these modules before they can be

395
00:14:31,920 --> 00:14:33,920
used

396
00:14:33,920 --> 00:14:35,920
in a normal scenario the tesla toolbox

397
00:14:35,920 --> 00:14:38,160
software will run on a laptop

398
00:14:38,160 --> 00:14:39,760
the toolbox software

399
00:14:39,760 --> 00:14:42,560
is able to reach out to a backend hsm if

400
00:14:42,560 --> 00:14:45,440
the user has valid service credentials

401
00:14:45,440 --> 00:14:47,600
using a leaked copy of the software does

402
00:14:47,600 --> 00:14:50,320
not give access to the hsm

403
00:14:50,320 --> 00:14:52,639
additionally the laptop is connected to

404
00:14:52,639 --> 00:14:55,040
a usb to can interface

405
00:14:55,040 --> 00:14:56,880
allowing the software to send commands

406
00:14:56,880 --> 00:14:59,040
to the body control module

407
00:14:59,040 --> 00:15:01,120
this allows the toolbox software to send

408
00:15:01,120 --> 00:15:03,519
apdu commands to the secure element in

409
00:15:03,519 --> 00:15:05,680
the body control module

410
00:15:05,680 --> 00:15:08,160
this interface was reverse engineered by

411
00:15:08,160 --> 00:15:10,079
enumerating the unified diagnostic

412
00:15:10,079 --> 00:15:12,800
service or uds interface

413
00:15:12,800 --> 00:15:15,760
and we will cover this in the next slide

414
00:15:15,760 --> 00:15:18,079
the laptop is also connected to a usb to

415
00:15:18,079 --> 00:15:20,480
ble adapter allowing the toolbox

416
00:15:20,480 --> 00:15:22,959
software to send apdu commands to the

417
00:15:22,959 --> 00:15:24,839
secure element inside the

418
00:15:24,839 --> 00:15:28,240
keyfob so in a way the toolbox software

419
00:15:28,240 --> 00:15:30,320
and all of its interfaces

420
00:15:30,320 --> 00:15:32,399
allow the secure elements to communicate

421
00:15:32,399 --> 00:15:34,800
with each other

422
00:15:34,800 --> 00:15:36,560
we enumerated the functionality of the

423
00:15:36,560 --> 00:15:38,160
body control module's unified

424
00:15:38,160 --> 00:15:40,639
diagnostics interface to figure out how

425
00:15:40,639 --> 00:15:42,800
to send apd commands to the secure

426
00:15:42,800 --> 00:15:44,000
element

427
00:15:44,000 --> 00:15:46,240
as the uds interface is defined in an

428
00:15:46,240 --> 00:15:48,480
iso standard we use the information from

429
00:15:48,480 --> 00:15:50,959
that standard to our advantage

430
00:15:50,959 --> 00:15:53,279
we first started by enumerating all the

431
00:15:53,279 --> 00:15:55,519
routines offered by the service

432
00:15:55,519 --> 00:15:57,600
by sending a routine start command for

433
00:15:57,600 --> 00:16:00,079
each routine identifier and observing

434
00:16:00,079 --> 00:16:01,920
the response code

435
00:16:01,920 --> 00:16:04,000
for each of the existing routines we

436
00:16:04,000 --> 00:16:05,920
could then enumerate how many input

437
00:16:05,920 --> 00:16:06,839
bytes they

438
00:16:06,839 --> 00:16:09,279
expect afterwards we would start the

439
00:16:09,279 --> 00:16:11,440
routine with the correct number of input

440
00:16:11,440 --> 00:16:14,079
bytes and use a logic analyzer to check

441
00:16:14,079 --> 00:16:15,920
if our data arrived at the secure

442
00:16:15,920 --> 00:16:17,279
element

443
00:16:17,279 --> 00:16:19,199
in this way we could determine how to

444
00:16:19,199 --> 00:16:21,920
send apdu commands to the secure element

445
00:16:21,920 --> 00:16:25,519
over uds on can

446
00:16:25,759 --> 00:16:27,839
now that we can send apd commands to

447
00:16:27,839 --> 00:16:30,480
both the keyfob and body control module

448
00:16:30,480 --> 00:16:32,160
we still need to figure out how the

449
00:16:32,160 --> 00:16:34,720
actual pairing protocol works

450
00:16:34,720 --> 00:16:36,480
the toolbox code revealed the overall

451
00:16:36,480 --> 00:16:38,720
structure of the protocol but does not

452
00:16:38,720 --> 00:16:40,560
contain the details of what the secure

453
00:16:40,560 --> 00:16:43,519
element itself is doing exactly

454
00:16:43,519 --> 00:16:46,079
to reverse engineer the full protocol we

455
00:16:46,079 --> 00:16:47,519
combined the information from the

456
00:16:47,519 --> 00:16:48,959
toolbox code

457
00:16:48,959 --> 00:16:50,800
with a guess and determine style reverse

458
00:16:50,800 --> 00:16:52,800
engineering approach

459
00:16:52,800 --> 00:16:54,720
the pairing procedure is carried out in

460
00:16:54,720 --> 00:16:56,000
two steps

461
00:16:56,000 --> 00:16:59,040
a new keyfob is first provisioned

462
00:16:59,040 --> 00:17:00,959
each of these secure elements can store

463
00:17:00,959 --> 00:17:03,199
5 rsa key pairs

464
00:17:03,199 --> 00:17:04,400
in this case

465
00:17:04,400 --> 00:17:06,640
slots 0 and 1 are reserved for tesla

466
00:17:06,640 --> 00:17:08,959
specific certificates

467
00:17:08,959 --> 00:17:11,599
the secure element itself will generate

468
00:17:11,599 --> 00:17:14,720
rsa keypairs for the remaining slots

469
00:17:14,720 --> 00:17:16,720
finally the hsm will sign the

470
00:17:16,720 --> 00:17:18,799
certificates for these slots and these

471
00:17:18,799 --> 00:17:20,400
certificates are then stored in the

472
00:17:20,400 --> 00:17:22,240
secure element

473
00:17:22,240 --> 00:17:24,480
presumably the idea here is that these

474
00:17:24,480 --> 00:17:27,280
certificates can be verified by the car

475
00:17:27,280 --> 00:17:29,600
that way the car can verify that a

476
00:17:29,600 --> 00:17:33,840
legitimate key fob is being paired

477
00:17:34,000 --> 00:17:35,840
after the key fob has been provisioned

478
00:17:35,840 --> 00:17:38,080
it can be paired to the car

479
00:17:38,080 --> 00:17:40,000
the full pairing protocol is provided on

480
00:17:40,000 --> 00:17:41,840
the slide and is explained in more

481
00:17:41,840 --> 00:17:43,760
detail in the paper

482
00:17:43,760 --> 00:17:45,280
the main issue with this protocol

483
00:17:45,280 --> 00:17:47,280
however is that the certificates

484
00:17:47,280 --> 00:17:49,280
generated during the provisioning step

485
00:17:49,280 --> 00:17:51,679
are never sent to the car

486
00:17:51,679 --> 00:17:53,520
the car can does not distinguish between

487
00:17:53,520 --> 00:17:57,600
legitimate or fake key fob

488
00:17:57,679 --> 00:17:59,440
to abuse this vulnerability in the

489
00:17:59,440 --> 00:18:01,520
pairing protocol we had to create a

490
00:18:01,520 --> 00:18:03,280
malicious key fob

491
00:18:03,280 --> 00:18:05,200
this keyfob needs to be able to skip the

492
00:18:05,200 --> 00:18:07,600
provisioning steps while also being able

493
00:18:07,600 --> 00:18:10,000
to perform the pairing protocol and the

494
00:18:10,000 --> 00:18:12,720
rest of the secure elements features

495
00:18:12,720 --> 00:18:15,039
to achieve this we could search for a

496
00:18:15,039 --> 00:18:17,120
matching footprint component and program

497
00:18:17,120 --> 00:18:19,440
it with all of the functionality

498
00:18:19,440 --> 00:18:21,039
as we were building a simple proof of

499
00:18:21,039 --> 00:18:23,200
concept we decided to simply remove the

500
00:18:23,200 --> 00:18:25,520
secure element from a keyfob and replace

501
00:18:25,520 --> 00:18:28,320
it with a usb to serial converter

502
00:18:28,320 --> 00:18:31,360
we chose the cp2102n

503
00:18:31,360 --> 00:18:33,520
usb to serial converter because it

504
00:18:33,520 --> 00:18:36,000
supports arbitrary bot rates and comes

505
00:18:36,000 --> 00:18:39,919
with a few extra gpio pins

506
00:18:39,919 --> 00:18:42,559
we now have a complete plan of attack as

507
00:18:42,559 --> 00:18:43,520
before

508
00:18:43,520 --> 00:18:45,760
we first wake up the target key fob and

509
00:18:45,760 --> 00:18:47,760
push a malicious firmware update to this

510
00:18:47,760 --> 00:18:49,039
key fob

511
00:18:49,039 --> 00:18:51,120
we then request an unlock token from the

512
00:18:51,120 --> 00:18:53,760
secure element and use that to unlock

513
00:18:53,760 --> 00:18:55,280
the car

514
00:18:55,280 --> 00:18:56,960
now that we have physical access to the

515
00:18:56,960 --> 00:18:58,880
interior of the vehicle we can also

516
00:18:58,880 --> 00:19:01,120
connect to the diagnostic port and pair

517
00:19:01,120 --> 00:19:03,600
our malicious key fob to the car

518
00:19:03,600 --> 00:19:05,520
this malicious key fob now allows us to

519
00:19:05,520 --> 00:19:08,080
drive off

520
00:19:08,400 --> 00:19:10,240
to demonstrate that this attack could be

521
00:19:10,240 --> 00:19:12,559
performed in the real world we created a

522
00:19:12,559 --> 00:19:14,400
proof of concept device

523
00:19:14,400 --> 00:19:16,559
the device is battery powered and easily

524
00:19:16,559 --> 00:19:18,400
fits in a backpack

525
00:19:18,400 --> 00:19:20,480
a raspberry pi is used to control all of

526
00:19:20,480 --> 00:19:22,720
the components and allows us to control

527
00:19:22,720 --> 00:19:25,120
the device from a smartphone

528
00:19:25,120 --> 00:19:27,679
a dual interface scan shield allows us

529
00:19:27,679 --> 00:19:29,679
to connect one interface to the body

530
00:19:29,679 --> 00:19:31,520
control module at the back of this

531
00:19:31,520 --> 00:19:33,840
device and one to the diagnostic

532
00:19:33,840 --> 00:19:36,160
connector in the vehicle

533
00:19:36,160 --> 00:19:38,320
the malicious key fob is controlled by

534
00:19:38,320 --> 00:19:40,799
the raspberry pi

535
00:19:40,799 --> 00:19:42,640
this is the back side of the device

536
00:19:42,640 --> 00:19:44,880
showing the modified body control module

537
00:19:44,880 --> 00:19:46,880
in which a secure element was replaced

538
00:19:46,880 --> 00:19:49,360
by a usb to serial converter

539
00:19:49,360 --> 00:19:51,039
the functionality of the secure element

540
00:19:51,039 --> 00:19:53,120
is implemented in python and controlled

541
00:19:53,120 --> 00:19:56,159
by the raspberry pi

542
00:19:57,440 --> 00:19:59,679
we created a short video to demonstrate

543
00:19:59,679 --> 00:20:01,440
how we would conduct such an attack in

544
00:20:01,440 --> 00:20:02,480
practice

545
00:20:02,480 --> 00:20:04,080
so in this case we have someone parking

546
00:20:04,080 --> 00:20:06,159
the tesla model x in front of our

547
00:20:06,159 --> 00:20:08,400
university building probably not the

548
00:20:08,400 --> 00:20:10,799
best decision ever

549
00:20:10,799 --> 00:20:13,200
now we can use our

550
00:20:13,200 --> 00:20:16,480
compact tool to approach the vehicle

551
00:20:16,480 --> 00:20:18,320
from the vehicle's windshield we can

552
00:20:18,320 --> 00:20:20,480
read off the phone number and enter it

553
00:20:20,480 --> 00:20:22,799
into our script

554
00:20:22,799 --> 00:20:24,400
at this point we have a body control

555
00:20:24,400 --> 00:20:26,880
module that believes it belongs to that

556
00:20:26,880 --> 00:20:28,000
vehicle

557
00:20:28,000 --> 00:20:29,919
and this body control module can now be

558
00:20:29,919 --> 00:20:34,000
used to wake up the target's key fob

559
00:20:34,000 --> 00:20:36,159
once the key fob has been woken up we

560
00:20:36,159 --> 00:20:38,960
can connect to it and then start pushing

561
00:20:38,960 --> 00:20:41,360
our new malicious firmware over

562
00:20:41,360 --> 00:20:43,200
bluetooth low energy

563
00:20:43,200 --> 00:20:44,720
as this is done over bluetooth low

564
00:20:44,720 --> 00:20:46,720
energy we can also do this part of the

565
00:20:46,720 --> 00:20:49,760
attack over a longer distance

566
00:20:49,760 --> 00:20:52,000
once the update has been completed we

567
00:20:52,000 --> 00:20:54,320
can request one time valid unlock

568
00:20:54,320 --> 00:20:56,960
commands from the secure element

569
00:20:56,960 --> 00:20:59,039
it's important here that these are one

570
00:20:59,039 --> 00:21:00,240
time valid

571
00:21:00,240 --> 00:21:01,919
and are rolling codes so they have to be

572
00:21:01,919 --> 00:21:03,919
used in the same order as we receive

573
00:21:03,919 --> 00:21:06,480
them from the secure element

574
00:21:06,480 --> 00:21:08,320
having acquired these one-time valid

575
00:21:08,320 --> 00:21:10,960
codes we can go back to the car

576
00:21:10,960 --> 00:21:12,240
and unlock it

577
00:21:12,240 --> 00:21:14,400
and as this is a model x of course we

578
00:21:14,400 --> 00:21:18,320
also have to open the falcon wing doors

579
00:21:19,520 --> 00:21:21,760
so at this point we have gained physical

580
00:21:21,760 --> 00:21:23,360
access to the vehicle

581
00:21:23,360 --> 00:21:25,760
which means we can get inside

582
00:21:25,760 --> 00:21:27,760
and inside of the vehicle

583
00:21:27,760 --> 00:21:29,760
we can connect our device to the

584
00:21:29,760 --> 00:21:31,760
diagnostic connector

585
00:21:31,760 --> 00:21:34,080
this connector is available underneath

586
00:21:34,080 --> 00:21:36,880
the center display in the car

587
00:21:36,880 --> 00:21:38,480
so we connect our device to this

588
00:21:38,480 --> 00:21:39,840
connector

589
00:21:39,840 --> 00:21:41,039
and can then

590
00:21:41,039 --> 00:21:43,120
use our tool to pair the malicious key

591
00:21:43,120 --> 00:21:45,200
fob to this car

592
00:21:45,200 --> 00:21:47,679
this takes only a few seconds

593
00:21:47,679 --> 00:21:50,159
and at this point we have a key fob that

594
00:21:50,159 --> 00:21:53,280
the car thinks is legitimate

595
00:21:53,280 --> 00:21:55,360
and now we can use that key fob to drive

596
00:21:55,360 --> 00:21:56,480
off

597
00:21:56,480 --> 00:21:59,120
so we emulate the normal key fob the car

598
00:21:59,120 --> 00:22:00,799
will send the challenge

599
00:22:00,799 --> 00:22:03,520
we compute a valid response and then we

600
00:22:03,520 --> 00:22:06,559
can drive off with the car

601
00:22:06,559 --> 00:22:07,760
and it's important to note here that

602
00:22:07,760 --> 00:22:09,520
this is not a relay attack

603
00:22:09,520 --> 00:22:11,520
so we can keep on using

604
00:22:11,520 --> 00:22:13,760
this malicious key fob to start the car

605
00:22:13,760 --> 00:22:16,799
and drive off with it

606
00:22:20,880 --> 00:22:23,440
back in august of 2020 we reported these

607
00:22:23,440 --> 00:22:25,120
findings to tesla

608
00:22:25,120 --> 00:22:26,960
tesla released a patch a few months

609
00:22:26,960 --> 00:22:29,039
later that fixed the keyfob firmware

610
00:22:29,039 --> 00:22:31,039
update vulnerability

611
00:22:31,039 --> 00:22:33,039
tesla also wireless with a five thousand

612
00:22:33,039 --> 00:22:35,200
dollar bounty as part of their big

613
00:22:35,200 --> 00:22:38,080
bounty program

614
00:22:38,159 --> 00:22:39,840
even though tesla fixed the initial

615
00:22:39,840 --> 00:22:42,080
vector of an attack there is still some

616
00:22:42,080 --> 00:22:44,640
remaining attack surface

617
00:22:44,640 --> 00:22:48,880
getting a code execution on the cc2541

618
00:22:48,880 --> 00:22:51,600
is sufficient to recreate or attack

619
00:22:51,600 --> 00:22:54,000
this can potentially be achieved using a

620
00:22:54,000 --> 00:22:57,120
chosen prefix sha-1 collision or by

621
00:22:57,120 --> 00:22:59,200
finding a logical or memory corruption

622
00:22:59,200 --> 00:23:01,760
type vulnerability

623
00:23:01,760 --> 00:23:02,880
furthermore

624
00:23:02,880 --> 00:23:05,200
pre-physical access to the vehicle

625
00:23:05,200 --> 00:23:07,120
allows to pair malicious key fob to the

626
00:23:07,120 --> 00:23:11,760
car this can occur in multiple scenarios

627
00:23:11,760 --> 00:23:14,080
another potential avenue for attack is

628
00:23:14,080 --> 00:23:14,840
the

629
00:23:14,840 --> 00:23:18,000
cc2541 in the body control module

630
00:23:18,000 --> 00:23:20,080
if an attacker can get code execution on

631
00:23:20,080 --> 00:23:22,400
these chips they may be able to achieve

632
00:23:22,400 --> 00:23:25,120
arbitrary vehicle unlock

633
00:23:25,120 --> 00:23:27,360
the biggest challenge for such an attack

634
00:23:27,360 --> 00:23:29,440
would likely be compromising the main

635
00:23:29,440 --> 00:23:31,320
processor from the

636
00:23:31,320 --> 00:23:36,120
cc2541 over spi

637
00:23:36,720 --> 00:23:38,559
over-the-air updates can be a blessing

638
00:23:38,559 --> 00:23:39,760
and a curse

639
00:23:39,760 --> 00:23:41,679
in this case tesla was able to resolve

640
00:23:41,679 --> 00:23:43,200
an issue in the overhead download

641
00:23:43,200 --> 00:23:46,400
service using over air download

642
00:23:46,400 --> 00:23:48,720
unsigned and other maliciously formed

643
00:23:48,720 --> 00:23:51,120
updates should definitely be part of the

644
00:23:51,120 --> 00:23:53,279
test cases before pushing out a new

645
00:23:53,279 --> 00:23:55,679
firmware image

646
00:23:55,679 --> 00:23:57,520
remember that cryptography is typically

647
00:23:57,520 --> 00:24:00,080
bypassed and not penetrated

648
00:24:00,080 --> 00:24:02,400
secure elements can be secure but maybe

649
00:24:02,400 --> 00:24:06,080
the device interfacing with it is not

650
00:24:06,080 --> 00:24:07,840
this fundamental weakness in this

651
00:24:07,840 --> 00:24:10,320
system's design is also present in other

652
00:24:10,320 --> 00:24:12,879
devices

653
00:24:13,360 --> 00:24:14,880
even though everything is better with

654
00:24:14,880 --> 00:24:16,720
bluetooth it is also important to

655
00:24:16,720 --> 00:24:18,720
remember that everything has more attack

656
00:24:18,720 --> 00:24:21,840
surface with bluetooth

657
00:24:21,840 --> 00:24:24,240
with that i want to end the stock

658
00:24:24,240 --> 00:24:25,760
you can find all the details in our

659
00:24:25,760 --> 00:24:27,600
paper and you can watch the proof of

660
00:24:27,600 --> 00:24:29,279
concept video again

661
00:24:29,279 --> 00:24:30,720
or you can reach out to me if you have

662
00:24:30,720 --> 00:24:33,840
any questions

