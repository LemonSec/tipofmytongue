1
00:00:01,120 --> 00:00:02,639
hello everyone today i'm gonna be

2
00:00:02,639 --> 00:00:04,799
presenting my paper wrestle written at

3
00:00:04,799 --> 00:00:08,000
the stack based side channel leakage

4
00:00:08,000 --> 00:00:09,920
my name is aniran chakravarthi and i'm a

5
00:00:09,920 --> 00:00:11,759
phd student at indian institute of

6
00:00:11,759 --> 00:00:13,920
technology kharagpur this work has been

7
00:00:13,920 --> 00:00:15,679
done in collaboration with dr charney

8
00:00:15,679 --> 00:00:18,240
bhattacharya from ku leuven manor alam

9
00:00:18,240 --> 00:00:20,320
from international technology kharagpur

10
00:00:20,320 --> 00:00:22,320
dr shikhar patranavish from ets zurich

11
00:00:22,320 --> 00:00:24,480
and dr devde mukhopadhyay from india

12
00:00:24,480 --> 00:00:26,640
astrotechnology kharagpur

13
00:00:26,640 --> 00:00:28,240
before going into the details of our

14
00:00:28,240 --> 00:00:30,160
work i would like to talk about the

15
00:00:30,160 --> 00:00:31,920
deadline scheduler and try to understand

16
00:00:31,920 --> 00:00:34,079
the secret implications

17
00:00:34,079 --> 00:00:36,000
schedules as we know handles remove all

18
00:00:36,000 --> 00:00:37,520
our processes from and selection of

19
00:00:37,520 --> 00:00:39,840
process to the cpu there are many types

20
00:00:39,840 --> 00:00:42,079
of scheduler the common types being cfq

21
00:00:42,079 --> 00:00:44,640
loop and the deadline scheduler so in

22
00:00:44,640 --> 00:00:46,079
particular we focus on deadline

23
00:00:46,079 --> 00:00:47,600
scheduler yeah which actually

24
00:00:47,600 --> 00:00:49,520
automatically preempts a process from

25
00:00:49,520 --> 00:00:51,760
the cpu after its request expiration

26
00:00:51,760 --> 00:00:53,440
time

27
00:00:53,440 --> 00:00:55,920
it creates found quite a wide

28
00:00:55,920 --> 00:00:57,440
applicability

29
00:00:57,440 --> 00:00:59,520
mainly on real-time operating system

30
00:00:59,520 --> 00:01:01,359
amber systems and also in general

31
00:01:01,359 --> 00:01:02,719
purpose servers

32
00:01:02,719 --> 00:01:04,959
however the security implication of

33
00:01:04,959 --> 00:01:06,799
deadline schedulers have never been

34
00:01:06,799 --> 00:01:08,320
studied before

35
00:01:08,320 --> 00:01:11,360
so in this paper we'll talk about the

36
00:01:11,360 --> 00:01:13,600
deadline scheduler and try to exploit

37
00:01:13,600 --> 00:01:16,640
its security implications

38
00:01:17,040 --> 00:01:18,560
to enable the deadline scheduler the

39
00:01:18,560 --> 00:01:21,280
user must have capsis nice permission in

40
00:01:21,280 --> 00:01:22,400
order to adjust the scheduling

41
00:01:22,400 --> 00:01:24,560
parameters normal users can efficiently

42
00:01:24,560 --> 00:01:26,240
utilize system resources for better

43
00:01:26,240 --> 00:01:28,240
performance using deadline scheduler

44
00:01:28,240 --> 00:01:29,840
which is common in case of real-time

45
00:01:29,840 --> 00:01:31,680
execution environments to adjust the

46
00:01:31,680 --> 00:01:33,040
scheduling parameters we can use the

47
00:01:33,040 --> 00:01:35,280
chrt command along with the three

48
00:01:35,280 --> 00:01:36,880
parameters shared run time share

49
00:01:36,880 --> 00:01:38,880
deadline and share period and the name

50
00:01:38,880 --> 00:01:40,560
of the executable so in this

51
00:01:40,560 --> 00:01:42,720
presentation we will show how utilizing

52
00:01:42,720 --> 00:01:43,840
the deadline

53
00:01:43,840 --> 00:01:45,600
an attacker can effectively achieve

54
00:01:45,600 --> 00:01:49,600
synchronization with the victim process

55
00:01:52,159 --> 00:01:54,479
so here is the outline for our talk

56
00:01:54,479 --> 00:01:56,159
first we will discuss about the return

57
00:01:56,159 --> 00:01:57,840
address stack or rash

58
00:01:57,840 --> 00:01:58,960
then we will

59
00:01:58,960 --> 00:02:01,200
see how to reverse engineer the rash for

60
00:02:01,200 --> 00:02:03,200
undocumented processors

61
00:02:03,200 --> 00:02:06,159
we propose a novel attack ration by

62
00:02:06,159 --> 00:02:07,680
establishing a covert channel through

63
00:02:07,680 --> 00:02:09,919
rash then we move on to the case study

64
00:02:09,919 --> 00:02:12,640
on openssl ecg scalar multiplication and

65
00:02:12,640 --> 00:02:14,560
we'll see how to use deadline scheduler

66
00:02:14,560 --> 00:02:17,599
to achieve synchronization finally we

67
00:02:17,599 --> 00:02:20,080
see a case study on ecdsa signature

68
00:02:20,080 --> 00:02:23,560
generation algorithm

69
00:02:23,599 --> 00:02:25,280
written instructions are a special type

70
00:02:25,280 --> 00:02:27,360
of indirect branch instructions that

71
00:02:27,360 --> 00:02:29,200
might get called from different program

72
00:02:29,200 --> 00:02:31,200
locations but the target address will

73
00:02:31,200 --> 00:02:33,840
remain the same now for example uh take

74
00:02:33,840 --> 00:02:35,599
the example of the printf statement

75
00:02:35,599 --> 00:02:38,400
which is a common for gnuc library that

76
00:02:38,400 --> 00:02:40,720
can be called from different locations

77
00:02:40,720 --> 00:02:43,040
in the inside of a source code so every

78
00:02:43,040 --> 00:02:44,879
time the same library subroutine will be

79
00:02:44,879 --> 00:02:46,800
invoked and the same set of instruction

80
00:02:46,800 --> 00:02:49,040
will be executed but since they are

81
00:02:49,040 --> 00:02:50,480
being called from different program

82
00:02:50,480 --> 00:02:52,640
locations the return address for each of

83
00:02:52,640 --> 00:02:54,239
the corresponding function call will be

84
00:02:54,239 --> 00:02:56,640
different

85
00:02:58,159 --> 00:02:59,680
now to reverse energy the size of the

86
00:02:59,680 --> 00:03:01,920
stack we devise a simple experiment we

87
00:03:01,920 --> 00:03:03,519
start with an arbitrary number of nested

88
00:03:03,519 --> 00:03:06,000
function calls suppose 17 where the main

89
00:03:06,000 --> 00:03:08,480
function calls function f 17 which in

90
00:03:08,480 --> 00:03:11,440
turn calls a function f 16 and so on

91
00:03:11,440 --> 00:03:13,440
till the dps function which is f1 here

92
00:03:13,440 --> 00:03:15,599
now as per the working principle of rash

93
00:03:15,599 --> 00:03:17,360
the return address of the main function

94
00:03:17,360 --> 00:03:19,120
will be pushed onto the rasp first

95
00:03:19,120 --> 00:03:20,480
followed by the return address of the

96
00:03:20,480 --> 00:03:23,040
function f 17. now suppose the rest has

97
00:03:23,040 --> 00:03:25,360
high of 16. so proceeding this way when

98
00:03:25,360 --> 00:03:27,599
the function f2 is called its return

99
00:03:27,599 --> 00:03:29,120
address will also be put at the top of

100
00:03:29,120 --> 00:03:31,440
the stack and at this point the stack

101
00:03:31,440 --> 00:03:33,920
will be completely full of all valid

102
00:03:33,920 --> 00:03:36,319
entries now when the function f1 is

103
00:03:36,319 --> 00:03:37,200
called

104
00:03:37,200 --> 00:03:39,200
its return address will also be pushed

105
00:03:39,200 --> 00:03:40,560
into the stack

106
00:03:40,560 --> 00:03:43,280
but as the stack was full at this point

107
00:03:43,280 --> 00:03:45,200
it will lead to overflow condition and

108
00:03:45,200 --> 00:03:47,920
thus the return address for function f17

109
00:03:47,920 --> 00:03:51,440
will be pushed out of the stack

110
00:03:51,840 --> 00:03:54,560
so one must note that rash helps to keep

111
00:03:54,560 --> 00:03:55,920
the return address closer to the

112
00:03:55,920 --> 00:03:57,920
processor and thus reduces the access

113
00:03:57,920 --> 00:04:00,319
latency so for any return address that

114
00:04:00,319 --> 00:04:02,400
is not present in the res the processor

115
00:04:02,400 --> 00:04:03,920
will take more time to complete the

116
00:04:03,920 --> 00:04:06,400
execution so we will use this increase

117
00:04:06,400 --> 00:04:08,480
in execution time to reverse engineer

118
00:04:08,480 --> 00:04:11,040
the stack size so as already discussed

119
00:04:11,040 --> 00:04:12,560
we start with

120
00:04:12,560 --> 00:04:15,040
n nested function calls

121
00:04:15,040 --> 00:04:16,798
and check the difference in execution

122
00:04:16,798 --> 00:04:19,918
time for n minus for n calls and n minus

123
00:04:19,918 --> 00:04:22,160
one call separately in order to account

124
00:04:22,160 --> 00:04:23,600
for the system noise we perform this

125
00:04:23,600 --> 00:04:25,680
operation multiple times and calculate

126
00:04:25,680 --> 00:04:27,280
the mean difference for their execution

127
00:04:27,280 --> 00:04:29,440
times then we repeat it for function

128
00:04:29,440 --> 00:04:31,680
depth n minus 1 and check the mean

129
00:04:31,680 --> 00:04:34,160
difference for n minus 1 and n minus 2

130
00:04:34,160 --> 00:04:36,080
as function calls

131
00:04:36,080 --> 00:04:38,639
so we reduce the function depth by 1

132
00:04:38,639 --> 00:04:40,720
every time and keep a lock of the

133
00:04:40,720 --> 00:04:43,360
difference in their execution type

134
00:04:43,360 --> 00:04:44,720
this clue shows the difference of

135
00:04:44,720 --> 00:04:47,040
execution time for consecutive function

136
00:04:47,040 --> 00:04:48,479
call depths

137
00:04:48,479 --> 00:04:50,000
so we can observe that the difference in

138
00:04:50,000 --> 00:04:51,680
execution time between two consecutive

139
00:04:51,680 --> 00:04:53,840
function depths increases significantly

140
00:04:53,840 --> 00:04:56,560
after 16 function calls so the reason

141
00:04:56,560 --> 00:04:58,479
behind that is when

142
00:04:58,479 --> 00:05:00,400
depth of nested function calls is less

143
00:05:00,400 --> 00:05:02,720
than 16 the processor gets all written

144
00:05:02,720 --> 00:05:04,240
addresses for the rest

145
00:05:04,240 --> 00:05:06,000
and therefore takes considerably less

146
00:05:06,000 --> 00:05:08,400
time to complete the execution

147
00:05:08,400 --> 00:05:10,240
so we can conclude that on our target

148
00:05:10,240 --> 00:05:12,080
system that we did this experiment on

149
00:05:12,080 --> 00:05:14,560
the rash can hold up to 16 entries now

150
00:05:14,560 --> 00:05:16,160
this is a generalized experiment and can

151
00:05:16,160 --> 00:05:18,479
be generalized to any processor to find

152
00:05:18,479 --> 00:05:20,240
out the depth of the rash for that

153
00:05:20,240 --> 00:05:22,000
system

154
00:05:22,000 --> 00:05:24,080
we further validate our observation

155
00:05:24,080 --> 00:05:26,320
using hardware performance counters

156
00:05:26,320 --> 00:05:28,080
we know that in a speculative execution

157
00:05:28,080 --> 00:05:29,680
environment the target address for a

158
00:05:29,680 --> 00:05:31,600
written instruction is predicted by

159
00:05:31,600 --> 00:05:33,600
referring to rash and matched with the

160
00:05:33,600 --> 00:05:35,759
actual value stored in the main memory

161
00:05:35,759 --> 00:05:38,160
much later in the pipeline therefore any

162
00:05:38,160 --> 00:05:39,759
wrongly predicted address or an

163
00:05:39,759 --> 00:05:41,919
underflow overflow condition in the rest

164
00:05:41,919 --> 00:05:44,240
will result in a branch missile branch

165
00:05:44,240 --> 00:05:46,320
miss events are pretty accurately can be

166
00:05:46,320 --> 00:05:48,000
pretty accurately measured

167
00:05:48,000 --> 00:05:49,360
using a

168
00:05:49,360 --> 00:05:52,000
part event tool and the event perf count

169
00:05:52,000 --> 00:05:54,960
hw branch misses

170
00:05:54,960 --> 00:05:57,600
so we observe that for inner 16

171
00:05:57,600 --> 00:05:59,280
functions the number of branch missions

172
00:05:59,280 --> 00:06:00,240
is 2

173
00:06:00,240 --> 00:06:02,319
whereas for the 17 function the number

174
00:06:02,319 --> 00:06:04,560
of branch misses becomes 3 and it

175
00:06:04,560 --> 00:06:06,880
increments by one for every increment in

176
00:06:06,880 --> 00:06:08,800
the depth of the function call so this

177
00:06:08,800 --> 00:06:10,720
validates that

178
00:06:10,720 --> 00:06:13,520
the size of the rash is 16 and because

179
00:06:13,520 --> 00:06:16,000
after that when we are increasing the

180
00:06:16,000 --> 00:06:18,080
depth of the function those are actually

181
00:06:18,080 --> 00:06:21,280
getting overflown and as a result

182
00:06:21,280 --> 00:06:25,679
our branch misses it gets incremented

183
00:06:26,160 --> 00:06:28,000
so we exploit the fact that an

184
00:06:28,000 --> 00:06:29,680
overflowing rash can result in an

185
00:06:29,680 --> 00:06:31,759
increase in execution time and this

186
00:06:31,759 --> 00:06:33,840
difference in timing can be observed by

187
00:06:33,840 --> 00:06:36,319
a co-located process to establish a

188
00:06:36,319 --> 00:06:38,560
covert channel between two processes

189
00:06:38,560 --> 00:06:40,160
now consider the scenario where two

190
00:06:40,160 --> 00:06:41,440
process a and b are running

191
00:06:41,440 --> 00:06:45,039
simultaneously on the same logical code

192
00:06:45,039 --> 00:06:47,120
now process a executes a series of n

193
00:06:47,120 --> 00:06:49,039
nested function calls where process

194
00:06:49,039 --> 00:06:51,440
function f1 is calling f2 which in turn

195
00:06:51,440 --> 00:06:53,199
calling ft and so on so therefore for

196
00:06:53,199 --> 00:06:55,039
each function call and entry is inserted

197
00:06:55,039 --> 00:06:56,880
in the top of the stack now we all

198
00:06:56,880 --> 00:06:59,199
choose n such that the entire stack gets

199
00:06:59,199 --> 00:07:01,599
filled with the return address

200
00:07:01,599 --> 00:07:04,400
inside the innermost function for a

201
00:07:04,400 --> 00:07:06,560
it yields the cpu before executing the

202
00:07:06,560 --> 00:07:08,400
written instruction so therefore the

203
00:07:08,400 --> 00:07:10,319
entire res is filled with the return

204
00:07:10,319 --> 00:07:12,000
address of process a

205
00:07:12,000 --> 00:07:13,680
and at this point

206
00:07:13,680 --> 00:07:15,440
it is yielding the

207
00:07:15,440 --> 00:07:17,199
control of the cpu

208
00:07:17,199 --> 00:07:19,039
to another process b

209
00:07:19,039 --> 00:07:21,759
now b executes m functions also in a

210
00:07:21,759 --> 00:07:25,039
nested fashion now as both process a and

211
00:07:25,039 --> 00:07:27,599
b share the same rash the return address

212
00:07:27,599 --> 00:07:30,479
of process b will push out uh

213
00:07:30,479 --> 00:07:31,759
will push out some of the written

214
00:07:31,759 --> 00:07:35,599
addresses of a or more specifically

215
00:07:35,599 --> 00:07:37,840
n minus m number of return addresses for

216
00:07:37,840 --> 00:07:39,919
process a will be pushed out of the

217
00:07:39,919 --> 00:07:41,360
stack

218
00:07:41,360 --> 00:07:42,800
now when

219
00:07:42,800 --> 00:07:45,360
the when the control again goes back to

220
00:07:45,360 --> 00:07:48,879
process a it can easily understand

221
00:07:48,879 --> 00:07:50,160
that

222
00:07:50,160 --> 00:07:51,680
some of its return addresses has been

223
00:07:51,680 --> 00:07:54,479
pushed out of the stack by measuring the

224
00:07:54,479 --> 00:07:57,280
execution time of its different function

225
00:07:57,280 --> 00:07:59,679
depth

226
00:08:00,000 --> 00:08:01,440
now we will use the scenario that we

227
00:08:01,440 --> 00:08:02,960
just described to create a covert

228
00:08:02,960 --> 00:08:04,080
channel between the sender and the

229
00:08:04,080 --> 00:08:05,520
receiver

230
00:08:05,520 --> 00:08:07,440
the receiver makes 16 message function

231
00:08:07,440 --> 00:08:09,280
calls and yields the cpu in the deepest

232
00:08:09,280 --> 00:08:11,039
function without executing any return

233
00:08:11,039 --> 00:08:13,520
statement so as a result

234
00:08:13,520 --> 00:08:15,919
at this point of time the entire res is

235
00:08:15,919 --> 00:08:17,840
filled with return addresses of the

236
00:08:17,840 --> 00:08:20,160
receiver process and the control now

237
00:08:20,160 --> 00:08:22,240
goes to the sender process now the

238
00:08:22,240 --> 00:08:24,319
sender processor a bit stream of zeros

239
00:08:24,319 --> 00:08:26,800
and one as shown in this adjoining

240
00:08:26,800 --> 00:08:30,080
sample program on processing uh

241
00:08:30,080 --> 00:08:32,080
the value of the bit one it makes a

242
00:08:32,080 --> 00:08:33,839
function called underpricing a zero it

243
00:08:33,839 --> 00:08:36,640
does nothing suppose it processes uh bit

244
00:08:36,640 --> 00:08:37,760
one

245
00:08:37,760 --> 00:08:38,479
so

246
00:08:38,479 --> 00:08:40,559
uh it executes a call to the to this

247
00:08:40,559 --> 00:08:43,039
function func so as a result the return

248
00:08:43,039 --> 00:08:44,880
address of this function gets pushed

249
00:08:44,880 --> 00:08:46,560
onto the address

250
00:08:46,560 --> 00:08:48,480
now since the rest was full with the

251
00:08:48,480 --> 00:08:50,880
receiver's return addresses

252
00:08:50,880 --> 00:08:53,120
one of the return address of the

253
00:08:53,120 --> 00:08:57,040
receiver will be pushed out of the stack

254
00:08:57,760 --> 00:09:00,399
now the access again goes back to the

255
00:09:00,399 --> 00:09:01,920
receiver

256
00:09:01,920 --> 00:09:02,800
so

257
00:09:02,800 --> 00:09:04,560
after the receiver after getting the

258
00:09:04,560 --> 00:09:06,480
control of the cpu back

259
00:09:06,480 --> 00:09:08,320
it will start executing the unfinished

260
00:09:08,320 --> 00:09:09,839
return commands by referencing the

261
00:09:09,839 --> 00:09:13,040
addresses stored in the step

262
00:09:14,320 --> 00:09:16,000
so to infer the message transmitted

263
00:09:16,000 --> 00:09:18,000
across the covert channel the receiver

264
00:09:18,000 --> 00:09:19,680
measures the timing latency of his

265
00:09:19,680 --> 00:09:21,680
outermost function code so on receiving

266
00:09:21,680 --> 00:09:23,839
a one the receiver will encounter a

267
00:09:23,839 --> 00:09:26,800
stack underflow situation and thereby we

268
00:09:26,800 --> 00:09:28,160
will see a

269
00:09:28,160 --> 00:09:30,640
increase in the execution time

270
00:09:30,640 --> 00:09:32,640
whereas in one receiving zero no extra

271
00:09:32,640 --> 00:09:34,560
latency will be observed the adjoining

272
00:09:34,560 --> 00:09:36,880
figure shows the timing values as

273
00:09:36,880 --> 00:09:39,360
observed by the receiver

274
00:09:39,360 --> 00:09:41,040
the threshold is empirically selected

275
00:09:41,040 --> 00:09:42,320
and the timing values above the

276
00:09:42,320 --> 00:09:44,720
threshold denote a bit one and below the

277
00:09:44,720 --> 00:09:46,720
threshold denote a bit zero

278
00:09:46,720 --> 00:09:48,399
we have conducted the experiment on

279
00:09:48,399 --> 00:09:50,480
multiple system where we reverse

280
00:09:50,480 --> 00:09:52,399
engineered the size of the rest and

281
00:09:52,399 --> 00:09:54,399
performed our covert channel experiment

282
00:09:54,399 --> 00:09:58,160
to observe the average bandwidth

283
00:09:58,959 --> 00:10:00,880
so now to demonstrate wrestle on a real

284
00:10:00,880 --> 00:10:02,800
world setting we target the scalar

285
00:10:02,800 --> 00:10:05,440
multiplication operation in p384 curve

286
00:10:05,440 --> 00:10:07,360
from openssl library

287
00:10:07,360 --> 00:10:08,800
electric of cryptography is one of the

288
00:10:08,800 --> 00:10:10,399
most widely used asymmetric key

289
00:10:10,399 --> 00:10:11,839
algorithms based on the algebraic

290
00:10:11,839 --> 00:10:13,680
properties of elliptic curves over

291
00:10:13,680 --> 00:10:15,519
finite field scalar multiplication is a

292
00:10:15,519 --> 00:10:17,360
fundamental security critical operation

293
00:10:17,360 --> 00:10:20,480
in ecc which computes q equals to kp

294
00:10:20,480 --> 00:10:23,600
where k is an n-bit secret scalar and q

295
00:10:23,600 --> 00:10:25,600
and p are points on the electric curve

296
00:10:25,600 --> 00:10:27,279
the security of ecc is defined by the

297
00:10:27,279 --> 00:10:29,519
hardness of determining the scalar k

298
00:10:29,519 --> 00:10:31,200
given both the points and the curve

299
00:10:31,200 --> 00:10:33,440
parameters the scalar multiplication in

300
00:10:33,440 --> 00:10:35,279
open h for this curve is implemented

301
00:10:35,279 --> 00:10:36,880
using montgomery ladder with conditional

302
00:10:36,880 --> 00:10:39,360
swaps and non-adjacent form for scalar

303
00:10:39,360 --> 00:10:41,839
representation the scalar k is transfer

304
00:10:41,839 --> 00:10:44,000
transform to its corresponding w nav

305
00:10:44,000 --> 00:10:45,920
representation and based on this

306
00:10:45,920 --> 00:10:47,519
representation a series of double and

307
00:10:47,519 --> 00:10:49,279
add operations are executed to perform

308
00:10:49,279 --> 00:10:50,640
the multiplication

309
00:10:50,640 --> 00:10:52,640
these operations are further implemented

310
00:10:52,640 --> 00:10:55,120
by a series of b and add and b and sub

311
00:10:55,120 --> 00:10:56,800
functions

312
00:10:56,800 --> 00:10:58,880
we now proceed to perform template

313
00:10:58,880 --> 00:11:01,519
attack on ecc scalar multiplication

314
00:11:01,519 --> 00:11:02,880
the victim and the

315
00:11:02,880 --> 00:11:04,640
attacker are sharing the same logical

316
00:11:04,640 --> 00:11:08,640
code and thereby sharing the same rash

317
00:11:08,640 --> 00:11:11,440
the the attacker first fills up the rest

318
00:11:11,440 --> 00:11:13,760
and yields the cpu to

319
00:11:13,760 --> 00:11:16,079
the victim

320
00:11:16,079 --> 00:11:18,079
the victim again

321
00:11:18,079 --> 00:11:20,320
performs uh ecc multiplication through

322
00:11:20,320 --> 00:11:22,560
the montgomery ladder operation

323
00:11:22,560 --> 00:11:24,399
and yields the cpu after each iteration

324
00:11:24,399 --> 00:11:26,480
of the montgomery level

325
00:11:26,480 --> 00:11:28,399
so the access again comes back to the

326
00:11:28,399 --> 00:11:30,399
adversary which now

327
00:11:30,399 --> 00:11:32,480
measures the timing for its function

328
00:11:32,480 --> 00:11:34,399
calls

329
00:11:34,399 --> 00:11:36,560
so more specifically the spy first fills

330
00:11:36,560 --> 00:11:37,839
up the last

331
00:11:37,839 --> 00:11:39,360
entire rest with the return address of

332
00:11:39,360 --> 00:11:42,560
its n functions now here the value n can

333
00:11:42,560 --> 00:11:45,360
be easily determined

334
00:11:45,360 --> 00:11:47,120
by reverse engineering the size of the

335
00:11:47,120 --> 00:11:48,079
rest

336
00:11:48,079 --> 00:11:49,839
and then it yields the control of the

337
00:11:49,839 --> 00:11:51,920
cpu without executing any return

338
00:11:51,920 --> 00:11:54,160
statement so at this point of time the

339
00:11:54,160 --> 00:11:56,079
entire rash is filled up with the return

340
00:11:56,079 --> 00:11:58,399
address of the spy

341
00:11:58,399 --> 00:12:00,240
the control now goes back to the victim

342
00:12:00,240 --> 00:12:01,600
which is executing ecc scalar

343
00:12:01,600 --> 00:12:03,440
multiplication operation

344
00:12:03,440 --> 00:12:05,680
the victim yields the cpu after every

345
00:12:05,680 --> 00:12:08,240
iteration of the ladder

346
00:12:08,240 --> 00:12:10,079
the control now comes back to the spy

347
00:12:10,079 --> 00:12:11,760
again which measures its own execution

348
00:12:11,760 --> 00:12:13,920
time to check whether any of his return

349
00:12:13,920 --> 00:12:15,519
addresses have been pushed out of the

350
00:12:15,519 --> 00:12:17,040
stack

351
00:12:17,040 --> 00:12:19,040
we perform the attack in an iterative

352
00:12:19,040 --> 00:12:20,959
manner at a particular instance the

353
00:12:20,959 --> 00:12:22,720
adversary targets the is bit of the

354
00:12:22,720 --> 00:12:24,720
secret scalar given the assumption that

355
00:12:24,720 --> 00:12:26,480
the adversary already knows the first i

356
00:12:26,480 --> 00:12:27,920
minus 1 bits

357
00:12:27,920 --> 00:12:30,079
the template attack works in two phases

358
00:12:30,079 --> 00:12:32,000
template building and template matching

359
00:12:32,000 --> 00:12:33,839
during the template building phase the

360
00:12:33,839 --> 00:12:35,839
attacker simulates the number of bn add

361
00:12:35,839 --> 00:12:38,399
and bn sub function calls for each bit

362
00:12:38,399 --> 00:12:40,240
as the number of bn error and bians of

363
00:12:40,240 --> 00:12:41,760
function calls depend on the particular

364
00:12:41,760 --> 00:12:43,440
bit beam process and the affine

365
00:12:43,440 --> 00:12:45,120
coordinate of the curve points the

366
00:12:45,120 --> 00:12:47,519
attacker build templates for each bit

367
00:12:47,519 --> 00:12:48,880
based on the total number of these

368
00:12:48,880 --> 00:12:51,200
function calls executed for a fixed set

369
00:12:51,200 --> 00:12:53,120
of input plaintext

370
00:12:53,120 --> 00:12:55,680
for any particular bit say the ith bit

371
00:12:55,680 --> 00:12:56,880
the attacker performs point

372
00:12:56,880 --> 00:12:58,720
multiplication using a set of unique

373
00:12:58,720 --> 00:13:01,279
inputs fixing the ith bit to be both

374
00:13:01,279 --> 00:13:04,079
zero and one next on each input the

375
00:13:04,079 --> 00:13:05,920
attacker estimates the total number of

376
00:13:05,920 --> 00:13:07,839
addition and subtraction function calls

377
00:13:07,839 --> 00:13:10,320
made by the ecc program for the ith bit

378
00:13:10,320 --> 00:13:12,240
assuming is valid to be both 0 and 1 and

379
00:13:12,240 --> 00:13:15,040
simultaneously it uses a spy process to

380
00:13:15,040 --> 00:13:18,399
measure the execution time using result

381
00:13:18,399 --> 00:13:20,639
now that we have the overall strategy

382
00:13:20,639 --> 00:13:22,720
let's see the process in detail we

383
00:13:22,720 --> 00:13:26,079
introduce an encode scheme

384
00:13:26,160 --> 00:13:28,240
to represent the total number of bn add

385
00:13:28,240 --> 00:13:30,160
and bn sub function calls as unique

386
00:13:30,160 --> 00:13:32,000
classes

387
00:13:32,000 --> 00:13:33,839
suppose for a particular input and is

388
00:13:33,839 --> 00:13:36,320
bit the montgomery ladder executes x b

389
00:13:36,320 --> 00:13:38,320
and uh sub and y b and add function

390
00:13:38,320 --> 00:13:40,959
calls we represent this as

391
00:13:40,959 --> 00:13:43,199
this class as x y

392
00:13:43,199 --> 00:13:45,440
now based on these classes

393
00:13:45,440 --> 00:13:47,360
we segregate the corresponding inputs

394
00:13:47,360 --> 00:13:49,360
and associated timing values

395
00:13:49,360 --> 00:13:51,040
by creating hypothetical bins

396
00:13:51,040 --> 00:13:53,600
corresponding to each class

397
00:13:53,600 --> 00:13:56,560
so by fixing the isb to be 0 we get a

398
00:13:56,560 --> 00:13:59,680
set of bins and by fixing

399
00:13:59,680 --> 00:14:02,240
it the value to be 1 we get another set

400
00:14:02,240 --> 00:14:04,160
of bins

401
00:14:04,160 --> 00:14:06,079
in our experiments we found out that the

402
00:14:06,079 --> 00:14:08,639
classes mostly belong in the range 81 to

403
00:14:08,639 --> 00:14:11,839
85 then 90 to 96 and then again 100 to

404
00:14:11,839 --> 00:14:14,079
100 six

405
00:14:14,079 --> 00:14:16,079
so the attacker selects a pair of bins

406
00:14:16,079 --> 00:14:17,839
which contains relatively high number of

407
00:14:17,839 --> 00:14:20,160
inputs in this example the class 83 and

408
00:14:20,160 --> 00:14:22,079
95

409
00:14:22,079 --> 00:14:24,320
so the take away from this is that

410
00:14:24,320 --> 00:14:27,120
for each bit position there will be four

411
00:14:27,120 --> 00:14:29,760
template bins two for when uh the value

412
00:14:29,760 --> 00:14:31,440
of the bit is

413
00:14:31,440 --> 00:14:33,360
one and two for when the value of the

414
00:14:33,360 --> 00:14:35,279
bit is zero

415
00:14:35,279 --> 00:14:37,760
now once we have selected our bins

416
00:14:37,760 --> 00:14:39,279
we proceed to the template matching

417
00:14:39,279 --> 00:14:40,079
phase

418
00:14:40,079 --> 00:14:41,839
in the template matching phase the goal

419
00:14:41,839 --> 00:14:43,199
of the attacker is to predict the

420
00:14:43,199 --> 00:14:45,600
correct value of the ith bit

421
00:14:45,600 --> 00:14:47,440
the attacker again observes the

422
00:14:47,440 --> 00:14:48,880
encryption process

423
00:14:48,880 --> 00:14:49,839
using

424
00:14:49,839 --> 00:14:51,680
inputs associated with the four selected

425
00:14:51,680 --> 00:14:54,079
bins and also observe the timing values

426
00:14:54,079 --> 00:14:56,719
using rasa

427
00:14:57,519 --> 00:14:59,279
so the idea is basically the timing

428
00:14:59,279 --> 00:15:01,680
values for the correct ith bit should

429
00:15:01,680 --> 00:15:03,440
match with either of the two set of

430
00:15:03,440 --> 00:15:06,880
templates but not with both

431
00:15:07,440 --> 00:15:08,720
so here is the result from our

432
00:15:08,720 --> 00:15:11,600
experiments so this is a template for ah

433
00:15:11,600 --> 00:15:13,519
for the 350th bit

434
00:15:13,519 --> 00:15:15,760
as value 0

435
00:15:15,760 --> 00:15:19,360
we can see the classes uh selected as 83

436
00:15:19,360 --> 00:15:20,720
and 95

437
00:15:20,720 --> 00:15:22,320
now for the correct estimate we can see

438
00:15:22,320 --> 00:15:24,480
the distribution quite clearly matches

439
00:15:24,480 --> 00:15:26,480
with the template or with the correct

440
00:15:26,480 --> 00:15:27,920
template

441
00:15:27,920 --> 00:15:29,920
whereas for the wrong estimate it does

442
00:15:29,920 --> 00:15:33,599
not match with the template

443
00:15:34,800 --> 00:15:37,120
the attack on sec scalar multiplication

444
00:15:37,120 --> 00:15:38,959
demonstrates how russell can be utilized

445
00:15:38,959 --> 00:15:40,959
to leak information about the control

446
00:15:40,959 --> 00:15:42,560
flow of another process

447
00:15:42,560 --> 00:15:44,880
but the challenge there was that it

448
00:15:44,880 --> 00:15:46,720
requires the victim to yield the control

449
00:15:46,720 --> 00:15:50,399
of the cpu for every iteration

450
00:15:50,800 --> 00:15:51,519
so

451
00:15:51,519 --> 00:15:53,440
so this yielding of the control of the

452
00:15:53,440 --> 00:15:54,800
cpu

453
00:15:54,800 --> 00:15:57,279
can be made possible using deadline

454
00:15:57,279 --> 00:15:59,040
schedulers which impose a deadline on

455
00:15:59,040 --> 00:16:00,560
operations to prevent starvation or

456
00:16:00,560 --> 00:16:02,959
processes now victim and the spy can

457
00:16:02,959 --> 00:16:06,160
then be executed with a single skate

458
00:16:06,160 --> 00:16:08,720
runtime parameters

459
00:16:08,720 --> 00:16:10,240
in this case we assume that one of the

460
00:16:10,240 --> 00:16:12,000
schedulers must be a deadline scheduler

461
00:16:12,000 --> 00:16:14,240
of the system and the user obviously

462
00:16:14,240 --> 00:16:16,320
needs to have caps is nice capability to

463
00:16:16,320 --> 00:16:18,000
launch the attack from user space

464
00:16:18,000 --> 00:16:20,399
however no synchronization mechanism is

465
00:16:20,399 --> 00:16:23,440
required inside the victim code

466
00:16:23,440 --> 00:16:25,519
before moving on to our next attack we

467
00:16:25,519 --> 00:16:28,240
will provide a brief background on ecdsa

468
00:16:28,240 --> 00:16:30,480
ecdsa typically uses an elective curve

469
00:16:30,480 --> 00:16:33,040
with a base point p of prime order q and

470
00:16:33,040 --> 00:16:34,800
consists of two parts

471
00:16:34,800 --> 00:16:36,639
one is the signing operation whereas

472
00:16:36,639 --> 00:16:37,759
non-sk

473
00:16:37,759 --> 00:16:40,560
is sampled uniformly in the range 1 to q

474
00:16:40,560 --> 00:16:42,320
minus 1

475
00:16:42,320 --> 00:16:43,920
and outputs

476
00:16:43,920 --> 00:16:46,320
the signature r comma s and the other

477
00:16:46,320 --> 00:16:48,639
part is a verifier given a signature r

478
00:16:48,639 --> 00:16:50,639
comma s and a message m

479
00:16:50,639 --> 00:16:53,279
it computes the hash and finally outputs

480
00:16:53,279 --> 00:16:57,199
1 if the x coordinate of z modulus q is

481
00:16:57,199 --> 00:17:01,360
equals to r or 0 otherwise

482
00:17:01,360 --> 00:17:04,160
now we perform the attack on ecdsa in

483
00:17:04,160 --> 00:17:06,640
two parts one is the online phase where

484
00:17:06,640 --> 00:17:09,199
we performed a targeted recovery of a

485
00:17:09,199 --> 00:17:11,439
fraction of the msb or most significant

486
00:17:11,439 --> 00:17:14,000
bit of the nonsense sampled by the ecdsa

487
00:17:14,000 --> 00:17:15,679
signing algorithm with the help of

488
00:17:15,679 --> 00:17:17,359
russell

489
00:17:17,359 --> 00:17:19,199
and in the offline phase we combine the

490
00:17:19,199 --> 00:17:21,119
partial nonce information with

491
00:17:21,119 --> 00:17:23,039
lattice-based cryptality techniques to

492
00:17:23,039 --> 00:17:26,319
retrieve the final signing key

493
00:17:26,319 --> 00:17:28,000
for the online part of the attack we

494
00:17:28,000 --> 00:17:30,720
again resort to template attack on

495
00:17:30,720 --> 00:17:33,679
randomly selected nonces but this time

496
00:17:33,679 --> 00:17:36,000
we consider building templates of a

497
00:17:36,000 --> 00:17:38,000
window of unknown bits instead of a bit

498
00:17:38,000 --> 00:17:40,320
by bit iterative approach for template

499
00:17:40,320 --> 00:17:42,720
formation the adversary executes a spy

500
00:17:42,720 --> 00:17:44,640
and a dummy victim process performing

501
00:17:44,640 --> 00:17:47,120
ecg scalar multiplication simultaneously

502
00:17:47,120 --> 00:17:50,640
using deadline scheduler

503
00:17:50,640 --> 00:17:52,720
so for the l bit of the msb position of

504
00:17:52,720 --> 00:17:54,559
the nonsense there can be 2 to the power

505
00:17:54,559 --> 00:17:57,679
l combinations of bit sequences possible

506
00:17:57,679 --> 00:18:00,000
we build templates for bit sequences of

507
00:18:00,000 --> 00:18:01,280
each of these 2 to the power l

508
00:18:01,280 --> 00:18:02,960
combinations

509
00:18:02,960 --> 00:18:04,880
now for each of the 2 to the power l bit

510
00:18:04,880 --> 00:18:07,039
sequences the dummy victim process

511
00:18:07,039 --> 00:18:09,360
performs ecc scalar multiplications

512
00:18:09,360 --> 00:18:11,039
using 2 to the power l nonsense by

513
00:18:11,039 --> 00:18:13,200
changing the l most significant bits

514
00:18:13,200 --> 00:18:15,520
while keeping the other bits same

515
00:18:15,520 --> 00:18:17,919
whereas the spy running in parallel

516
00:18:17,919 --> 00:18:19,919
continuously fills up the rest and

517
00:18:19,919 --> 00:18:21,760
probes it to observe the timing values

518
00:18:21,760 --> 00:18:23,520
through dassault as the adversary

519
00:18:23,520 --> 00:18:25,840
requires to retrieve only lmsb's of the

520
00:18:25,840 --> 00:18:28,320
nonce the spy considers only those l

521
00:18:28,320 --> 00:18:30,000
timing observations that correspond to

522
00:18:30,000 --> 00:18:32,320
the lmsps

523
00:18:32,320 --> 00:18:34,400
so now the adversary has timing samples

524
00:18:34,400 --> 00:18:36,720
for lmsb's of each of the 2 to the power

525
00:18:36,720 --> 00:18:39,200
l bit sequences of the nouns next the

526
00:18:39,200 --> 00:18:41,120
adversary selects medians from each of

527
00:18:41,120 --> 00:18:43,280
these timing distributions as a

528
00:18:43,280 --> 00:18:45,520
representative template for a particular

529
00:18:45,520 --> 00:18:48,720
bit position of a particular sequence

530
00:18:48,720 --> 00:18:50,880
now from the figure it is apparent that

531
00:18:50,880 --> 00:18:53,200
the distribution of timing samples for

532
00:18:53,200 --> 00:18:55,440
each bit position can be subdivided into

533
00:18:55,440 --> 00:18:57,520
three regions the most intuitive

534
00:18:57,520 --> 00:18:59,360
explanation for of this observation is

535
00:18:59,360 --> 00:19:01,120
that the spy tries to achieve

536
00:19:01,120 --> 00:19:02,799
synchronization with the help of

537
00:19:02,799 --> 00:19:04,880
deadline scheduler without explicit

538
00:19:04,880 --> 00:19:07,280
handles inside the victim code

539
00:19:07,280 --> 00:19:09,200
so due to the absence of perfect

540
00:19:09,200 --> 00:19:11,360
synchronization mechanism there is a

541
00:19:11,360 --> 00:19:13,440
mutual overlap between the timing

542
00:19:13,440 --> 00:19:16,320
samples of any two adjacent trace points

543
00:19:16,320 --> 00:19:18,320
so therefore we define three separate

544
00:19:18,320 --> 00:19:20,240
regions in the timing distribution a

545
00:19:20,240 --> 00:19:22,320
lower region a medial region and an

546
00:19:22,320 --> 00:19:24,640
upper region and we select medians from

547
00:19:24,640 --> 00:19:26,480
each of this region

548
00:19:26,480 --> 00:19:29,039
therefore the adversary will have 3 into

549
00:19:29,039 --> 00:19:31,840
l into 2 to the power l templates for l

550
00:19:31,840 --> 00:19:34,400
msb positions of the 2 to the power l

551
00:19:34,400 --> 00:19:36,000
non scan dates

552
00:19:36,000 --> 00:19:38,240
now in the template matching phase we

553
00:19:38,240 --> 00:19:41,520
choose 500 non-signature pairs for a

554
00:19:41,520 --> 00:19:45,520
randomly chosen ecdsa signing key

555
00:19:45,520 --> 00:19:47,600
the attacker tries to extract the six

556
00:19:47,600 --> 00:19:51,120
msb's of each of these 500 nonces

557
00:19:51,120 --> 00:19:53,520
so for a particular bit position we have

558
00:19:53,520 --> 00:19:55,600
2 to the power 6 templates each having

559
00:19:55,600 --> 00:19:57,840
three regions next we select the median

560
00:19:57,840 --> 00:19:59,840
which has the least difference with the

561
00:19:59,840 --> 00:20:02,240
actual observed timing value and finally

562
00:20:02,240 --> 00:20:04,559
we perform a least square error

563
00:20:04,559 --> 00:20:06,320
method to determine the top five

564
00:20:06,320 --> 00:20:08,240
templates that represent the possible

565
00:20:08,240 --> 00:20:10,240
combinations for the six image base so

566
00:20:10,240 --> 00:20:13,120
therefore for 500 nonsense we have 500

567
00:20:13,120 --> 00:20:15,679
cross five candidate combinations of the

568
00:20:15,679 --> 00:20:17,919
six msps

569
00:20:17,919 --> 00:20:20,720
the table shows the ordering of

570
00:20:20,720 --> 00:20:22,480
candidate nonce combinations of the six

571
00:20:22,480 --> 00:20:24,559
msbs

572
00:20:24,559 --> 00:20:26,640
achieved by least square

573
00:20:26,640 --> 00:20:29,440
least square error

574
00:20:29,440 --> 00:20:31,520
now given the noisy leakage samples on

575
00:20:31,520 --> 00:20:33,760
the partial nonsense used by the ecdsa

576
00:20:33,760 --> 00:20:36,080
signing algorithm we aim to recover the

577
00:20:36,080 --> 00:20:38,480
ecds signing key using a combination of

578
00:20:38,480 --> 00:20:40,080
lattice reduction algorithm and

579
00:20:40,080 --> 00:20:42,240
statistical mixing and matching of

580
00:20:42,240 --> 00:20:44,880
leakage samples

581
00:20:44,880 --> 00:20:46,960
we adopt a trial and error approach

582
00:20:46,960 --> 00:20:49,679
where we randomly select 200 non

583
00:20:49,679 --> 00:20:52,720
candidate partial nonsense to create the

584
00:20:52,720 --> 00:20:55,840
hidden number problem instance

585
00:20:55,840 --> 00:20:58,080
we convert them into lattice and the

586
00:20:58,080 --> 00:21:00,080
target vector for the cvb problem

587
00:21:00,080 --> 00:21:02,480
instance and finally solve the cbv

588
00:21:02,480 --> 00:21:05,919
problem instance using the f pyl f by ll

589
00:21:05,919 --> 00:21:08,640
solver to arrive at a guess for the

590
00:21:08,640 --> 00:21:10,880
secret key if the case is correct the

591
00:21:10,880 --> 00:21:13,039
attack outputs the recovered secret key

592
00:21:13,039 --> 00:21:15,360
otherwise it repeats the same process

593
00:21:15,360 --> 00:21:18,000
for a different randomly selected set of

594
00:21:18,000 --> 00:21:19,360
instances

595
00:21:19,360 --> 00:21:21,120
we must note that the attack can

596
00:21:21,120 --> 00:21:23,520
trivially identify when the correct key

597
00:21:23,520 --> 00:21:26,000
has been recovered by checking if it

598
00:21:26,000 --> 00:21:27,760
yields the correct public key which is

599
00:21:27,760 --> 00:21:29,679
available for verification this check

600
00:21:29,679 --> 00:21:31,280
involves a single deterministic scalar

601
00:21:31,280 --> 00:21:33,039
multiplication so when the attack

602
00:21:33,039 --> 00:21:35,760
terminates by outputting a secret uh key

603
00:21:35,760 --> 00:21:38,159
we can be sure that the correct secret

604
00:21:38,159 --> 00:21:40,080
key has been recovered as opposed to

605
00:21:40,080 --> 00:21:43,440
merely guessing the correct secret key

606
00:21:43,440 --> 00:21:45,600
so this table shows the time taken for

607
00:21:45,600 --> 00:21:47,360
seriously key retrieval for partially

608
00:21:47,360 --> 00:21:48,799
leaked nonsense

609
00:21:48,799 --> 00:21:50,880
where we try with

610
00:21:50,880 --> 00:21:52,799
500 signatures

611
00:21:52,799 --> 00:21:55,520
and we see that nonsense we

612
00:21:55,520 --> 00:21:58,559
retrieved in each of the cases where the

613
00:21:58,559 --> 00:22:00,320
online phase took

614
00:22:00,320 --> 00:22:02,080
somewhere around five seconds to say

615
00:22:02,080 --> 00:22:04,720
seven seconds and the offline phase

616
00:22:04,720 --> 00:22:07,520
took around one one uh a little more

617
00:22:07,520 --> 00:22:10,240
than one hour

618
00:22:10,559 --> 00:22:12,159
for our attack we use the following

619
00:22:12,159 --> 00:22:13,039
system

620
00:22:13,039 --> 00:22:15,120
for the online phase we the uh we just

621
00:22:15,120 --> 00:22:17,039
use a system with the processor having

622
00:22:17,039 --> 00:22:21,520
intel xeon cpu e52609 v4 it has a by

623
00:22:21,520 --> 00:22:24,159
default deadline scheduler in it and the

624
00:22:24,159 --> 00:22:26,080
operating system was red hat linux

625
00:22:26,080 --> 00:22:29,679
server 7.7 which called in kernel 3.10

626
00:22:29,679 --> 00:22:31,520
the deadline uh scheduler parameters

627
00:22:31,520 --> 00:22:34,480
that we set was uh the skate runtime as

628
00:22:34,480 --> 00:22:37,679
3600 skate deadline at c700

629
00:22:37,679 --> 00:22:39,120
get period as

630
00:22:39,120 --> 00:22:41,760
zero for the offline phase

631
00:22:41,760 --> 00:22:43,039
more specifically for the lattice

632
00:22:43,039 --> 00:22:44,640
reduction part

633
00:22:44,640 --> 00:22:47,919
we used a cluster having 260 nodes where

634
00:22:47,919 --> 00:22:52,159
each node had 128 amd epic 7742

635
00:22:52,159 --> 00:22:55,200
processors with 2.25 gigahertz nominal

636
00:22:55,200 --> 00:22:58,240
and 3.4 gigahertz peak clock speed and a

637
00:22:58,240 --> 00:23:01,120
ram of 512 gb of three two zero zero

638
00:23:01,120 --> 00:23:03,600
megahertz

639
00:23:04,240 --> 00:23:06,720
so to conclude in this presentation we

640
00:23:06,720 --> 00:23:08,720
discussed about retinitis tech a core

641
00:23:08,720 --> 00:23:11,280
component of the speculative execution

642
00:23:11,280 --> 00:23:13,280
subsystem we propose a generic

643
00:23:13,280 --> 00:23:15,520
methodology to reverse engineer the rash

644
00:23:15,520 --> 00:23:18,320
for undocumented processors

645
00:23:18,320 --> 00:23:20,640
we propose a novel attack wrestle where

646
00:23:20,640 --> 00:23:22,159
a covert channel could be created

647
00:23:22,159 --> 00:23:25,120
between two co-located processes

648
00:23:25,120 --> 00:23:27,679
using russell we demonstrated an exploit

649
00:23:27,679 --> 00:23:29,919
on ecc scalar multiplication over the

650
00:23:29,919 --> 00:23:31,840
p384 curve

651
00:23:31,840 --> 00:23:33,039
we have

652
00:23:33,039 --> 00:23:35,200
demonstrated asynchronous execution by

653
00:23:35,200 --> 00:23:37,200
utilizing the deadline scheduler and

654
00:23:37,200 --> 00:23:39,360
finally we showed an exploit on breaking

655
00:23:39,360 --> 00:23:41,679
the ecdsc signature generation algorithm

656
00:23:41,679 --> 00:23:44,880
over curve to p256

657
00:23:44,880 --> 00:23:48,520
thank you for your attention

658
00:23:53,360 --> 00:23:55,439
you

