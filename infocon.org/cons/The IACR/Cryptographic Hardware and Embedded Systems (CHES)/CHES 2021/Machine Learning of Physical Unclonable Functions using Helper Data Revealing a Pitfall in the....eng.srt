1
00:00:01,520 --> 00:00:03,679
hello and welcome to my presentation

2
00:00:03,679 --> 00:00:06,000
about our contribution machine learning

3
00:00:06,000 --> 00:00:08,400
of physical unclonable functions using

4
00:00:08,400 --> 00:00:11,280
hyperdata revealing a pitfall in the

5
00:00:11,280 --> 00:00:13,759
fuzzy commitment scheme

6
00:00:13,759 --> 00:00:15,839
this is joint work of christopher

7
00:00:15,839 --> 00:00:17,920
michelle pill and myself emmanuel

8
00:00:17,920 --> 00:00:18,960
schrider

9
00:00:18,960 --> 00:00:21,600
christoph and michel are affiliated with

10
00:00:21,600 --> 00:00:24,000
the technical university of munich

11
00:00:24,000 --> 00:00:26,560
myself is associated with the fraunhof

12
00:00:26,560 --> 00:00:28,880
institute for applied and integrated

13
00:00:28,880 --> 00:00:33,439
security in gaijin nearby munich

14
00:00:33,680 --> 00:00:37,040
the outline of this talk is as follows

15
00:00:37,040 --> 00:00:38,800
i will give a short recap of the

16
00:00:38,800 --> 00:00:40,640
principles of physical unclonable

17
00:00:40,640 --> 00:00:41,760
functions

18
00:00:41,760 --> 00:00:43,760
afterwards i will explain the fuzzy

19
00:00:43,760 --> 00:00:45,840
commitment scheme which is a core part

20
00:00:45,840 --> 00:00:47,680
of the attack

21
00:00:47,680 --> 00:00:49,760
this is followed by the actual attack

22
00:00:49,760 --> 00:00:53,039
sketch and few results of our work

23
00:00:53,039 --> 00:00:55,120
finally some concluding words and

24
00:00:55,120 --> 00:00:58,320
possible mitigations

25
00:00:58,320 --> 00:01:00,320
let's get started with the recap of

26
00:01:00,320 --> 00:01:02,719
puffs

27
00:01:04,479 --> 00:01:06,880
puffs are security primitives which are

28
00:01:06,880 --> 00:01:09,280
based on manufacturing variations

29
00:01:09,280 --> 00:01:11,840
introduced for example during the doping

30
00:01:11,840 --> 00:01:14,320
process

31
00:01:14,640 --> 00:01:16,720
the manufacturing variations are

32
00:01:16,720 --> 00:01:18,960
different for each device

33
00:01:18,960 --> 00:01:21,600
therefore these variations can be used

34
00:01:21,600 --> 00:01:24,400
to extract device-specific randomness

35
00:01:24,400 --> 00:01:27,119
with simple circuits

36
00:01:27,119 --> 00:01:29,200
there are a broad variety of proposed

37
00:01:29,200 --> 00:01:31,600
puff circuits like arbiter puffs ring

38
00:01:31,600 --> 00:01:34,720
oscillator puffs sram puffs and many to

39
00:01:34,720 --> 00:01:38,720
come because of ongoing research

40
00:01:39,200 --> 00:01:41,600
it is an often disputed topic how to

41
00:01:41,600 --> 00:01:44,079
classify puffs

42
00:01:44,079 --> 00:01:46,640
however the only relevant classification

43
00:01:46,640 --> 00:01:49,200
for our contribution is the difference

44
00:01:49,200 --> 00:01:51,200
between single challenge paths and

45
00:01:51,200 --> 00:01:53,680
multi-challenge puffs

46
00:01:53,680 --> 00:01:56,079
only multi-challenged paths are relevant

47
00:01:56,079 --> 00:01:58,880
for this talk

48
00:02:00,479 --> 00:02:02,159
multi-challenge paths allow the

49
00:02:02,159 --> 00:02:04,159
configuration of the internal building

50
00:02:04,159 --> 00:02:07,040
blocks by applying a challenge

51
00:02:07,040 --> 00:02:09,520
we only consider multi-challenge paths

52
00:02:09,520 --> 00:02:11,680
with a binary output

53
00:02:11,680 --> 00:02:14,319
so for each challenge either 0 or 1 is

54
00:02:14,319 --> 00:02:16,080
returned

55
00:02:16,080 --> 00:02:17,680
another assumption is that the

56
00:02:17,680 --> 00:02:19,920
multi-challenge path can be modeled as a

57
00:02:19,920 --> 00:02:21,920
linear combination of its building

58
00:02:21,920 --> 00:02:24,000
blocks

59
00:02:24,000 --> 00:02:26,400
in our contribution we only consider

60
00:02:26,400 --> 00:02:28,959
ring oscillator sump puffs and armata

61
00:02:28,959 --> 00:02:30,480
puffs

62
00:02:30,480 --> 00:02:32,800
however we think that the attack should

63
00:02:32,800 --> 00:02:35,599
also be possible for all other paths

64
00:02:35,599 --> 00:02:37,599
which were successfully attacked by a

65
00:02:37,599 --> 00:02:40,720
machine learning model

66
00:02:41,840 --> 00:02:43,840
all known multi-challenge paths have

67
00:02:43,840 --> 00:02:45,760
been successfully modeled by machine

68
00:02:45,760 --> 00:02:48,480
learning attacks if the attacker has

69
00:02:48,480 --> 00:02:50,800
unrestricted access to the challenge

70
00:02:50,800 --> 00:02:53,680
response pairs

71
00:02:56,000 --> 00:02:58,159
because puffs use physical device

72
00:02:58,159 --> 00:03:02,640
variations their responses are noisy

73
00:03:02,640 --> 00:03:04,640
one way to mitigate the noise is the

74
00:03:04,640 --> 00:03:06,959
fuzzy commitment scheme which contains

75
00:03:06,959 --> 00:03:10,640
error correction capabilities

76
00:03:10,640 --> 00:03:12,800
there is the idea that if one uses the

77
00:03:12,800 --> 00:03:14,879
fuzzy commitment scheme the puff

78
00:03:14,879 --> 00:03:17,120
responses are not accessible by an

79
00:03:17,120 --> 00:03:18,959
attacker

80
00:03:18,959 --> 00:03:20,959
therefore it seems as if the fuzzy

81
00:03:20,959 --> 00:03:22,480
commitment scheme could be a

82
00:03:22,480 --> 00:03:24,480
countermeasure against machine learning

83
00:03:24,480 --> 00:03:27,440
attacks of multi-challenge puffs

84
00:03:27,440 --> 00:03:29,360
in our contribution we show that this

85
00:03:29,360 --> 00:03:32,560
idea has to be refuted

86
00:03:32,560 --> 00:03:34,799
so let's take a closer look at the fuzzy

87
00:03:34,799 --> 00:03:37,519
commitment scheme

88
00:03:38,480 --> 00:03:40,239
the fuzzy commitment scheme has two

89
00:03:40,239 --> 00:03:41,440
phases

90
00:03:41,440 --> 00:03:43,440
the rollout phase is performed once in a

91
00:03:43,440 --> 00:03:45,599
secure environment

92
00:03:45,599 --> 00:03:47,920
the second phase the reconstruction

93
00:03:47,920 --> 00:03:52,000
phase is performed in field

94
00:03:52,959 --> 00:03:55,040
in the left bottom corner we see the

95
00:03:55,040 --> 00:03:57,599
secret s which is fed through the error

96
00:03:57,599 --> 00:03:58,840
correction

97
00:03:58,840 --> 00:04:01,680
encoder the error correction codes add

98
00:04:01,680 --> 00:04:04,959
redundancy to the secret

99
00:04:04,959 --> 00:04:07,599
the resulting code words c are then

100
00:04:07,599 --> 00:04:10,799
masked by the multi-challenge path

101
00:04:10,799 --> 00:04:13,519
we consider the resulting helper data as

102
00:04:13,519 --> 00:04:15,680
well as the challenged storage as

103
00:04:15,680 --> 00:04:18,478
publicly accessible

104
00:04:18,478 --> 00:04:20,639
to achieve a reasonable trade-off

105
00:04:20,639 --> 00:04:22,880
between code rate and implementation

106
00:04:22,880 --> 00:04:23,840
costs

107
00:04:23,840 --> 00:04:26,479
error correction codes are often split

108
00:04:26,479 --> 00:04:30,320
into an outer and an inner code

109
00:04:33,360 --> 00:04:35,360
in the reconstruction phase the helper

110
00:04:35,360 --> 00:04:38,000
data is unmasked by applying the same

111
00:04:38,000 --> 00:04:40,320
challenges to the multi-challenge path

112
00:04:40,320 --> 00:04:43,040
as in the rollout phase

113
00:04:43,040 --> 00:04:44,960
since we are now in the reconstruction

114
00:04:44,960 --> 00:04:47,840
phase the puff responses are potentially

115
00:04:47,840 --> 00:04:49,520
noisy

116
00:04:49,520 --> 00:04:52,000
therefore the code word contains also

117
00:04:52,000 --> 00:04:54,639
noisy bits

118
00:04:54,639 --> 00:04:56,800
the code words are then corrected by the

119
00:04:56,800 --> 00:04:59,759
error correction code and the secret is

120
00:04:59,759 --> 00:05:02,320
returned

121
00:05:04,160 --> 00:05:06,240
how can we extract machine learning

122
00:05:06,240 --> 00:05:09,120
inputs and labels while having access to

123
00:05:09,120 --> 00:05:13,199
the challenges and the helper data

124
00:05:14,240 --> 00:05:16,000
let's take a closer look at the rollout

125
00:05:16,000 --> 00:05:17,600
phase

126
00:05:17,600 --> 00:05:19,919
to sketch our attack i have exchanged

127
00:05:19,919 --> 00:05:22,639
the ecc encoder which contains multiple

128
00:05:22,639 --> 00:05:26,720
codes with the repetition code

129
00:05:26,880 --> 00:05:29,199
we know that the challenge storage and

130
00:05:29,199 --> 00:05:31,520
the helper data storage are publicly

131
00:05:31,520 --> 00:05:33,759
accessible

132
00:05:33,759 --> 00:05:36,160
so the basic idea is to train a machine

133
00:05:36,160 --> 00:05:37,840
learning model which takes the

134
00:05:37,840 --> 00:05:40,800
challenges and the helper data bits

135
00:05:40,800 --> 00:05:43,280
however that's not possible because the

136
00:05:43,280 --> 00:05:46,960
path masks the code word

137
00:05:47,360 --> 00:05:51,039
but we know one additional thing

138
00:05:51,039 --> 00:05:53,600
we know how the fuzzy commitment scheme

139
00:05:53,600 --> 00:05:57,360
generates the helper data bits

140
00:05:58,080 --> 00:06:00,560
this only depends on the generator

141
00:06:00,560 --> 00:06:04,880
matrix of the used error correction code

142
00:06:04,880 --> 00:06:09,199
we now rewrite this generator matrix

143
00:06:09,360 --> 00:06:10,960
this is the rewritten matrix

144
00:06:10,960 --> 00:06:13,120
representation of the fuzzy commitment

145
00:06:13,120 --> 00:06:14,400
scheme

146
00:06:14,400 --> 00:06:16,720
at the top i have exchanged the generic

147
00:06:16,720 --> 00:06:18,880
generator matrix of the error correction

148
00:06:18,880 --> 00:06:21,199
code with the generator matrix of a

149
00:06:21,199 --> 00:06:23,280
repetition code

150
00:06:23,280 --> 00:06:25,759
in general a repetition code repeats the

151
00:06:25,759 --> 00:06:28,000
input bits a number of times to add

152
00:06:28,000 --> 00:06:30,800
redundancy

153
00:06:30,960 --> 00:06:32,960
for the sake of simplicity in this

154
00:06:32,960 --> 00:06:35,360
example i have used the repetition code

155
00:06:35,360 --> 00:06:39,759
which repeats each bit three times

156
00:06:41,440 --> 00:06:44,800
at the bottom we see the identity matrix

157
00:06:44,800 --> 00:06:47,199
we conclude that each helper data bit is

158
00:06:47,199 --> 00:06:48,560
a combination

159
00:06:48,560 --> 00:06:51,520
of the same secret bit and an individual

160
00:06:51,520 --> 00:06:54,318
path response

161
00:06:56,319 --> 00:06:58,319
since we know the helper data bits we

162
00:06:58,319 --> 00:07:01,360
can xor them

163
00:07:01,360 --> 00:07:03,520
we rewrite this and see

164
00:07:03,520 --> 00:07:06,160
that the secret which is unknown cancels

165
00:07:06,160 --> 00:07:08,400
out

166
00:07:09,520 --> 00:07:12,080
so the responses are in a direct

167
00:07:12,080 --> 00:07:16,120
connection with the challenges

168
00:07:18,639 --> 00:07:21,599
by xoring the helper data bits such that

169
00:07:21,599 --> 00:07:23,680
the secret cancels out we learn a

170
00:07:23,680 --> 00:07:27,280
comparison between two path challenges

171
00:07:27,280 --> 00:07:29,840
for more complex codes the search for

172
00:07:29,840 --> 00:07:33,280
all these xo equations is np-hard

173
00:07:33,280 --> 00:07:35,680
since we want very small xor equations

174
00:07:35,680 --> 00:07:40,319
of same length we can use brute force

175
00:07:41,360 --> 00:07:43,440
let's take a look at a little example

176
00:07:43,440 --> 00:07:46,560
how to derive these xor equations

177
00:07:46,560 --> 00:07:48,720
we have a secret which has in this

178
00:07:48,720 --> 00:07:51,120
example only two bits

179
00:07:51,120 --> 00:07:54,160
one and zero

180
00:07:54,319 --> 00:07:56,879
the secret is fed bitwise into the error

181
00:07:56,879 --> 00:07:59,280
correction code

182
00:07:59,280 --> 00:08:01,680
in this example a repetition code which

183
00:08:01,680 --> 00:08:05,520
repeats every bit three times

184
00:08:06,879 --> 00:08:09,039
each codeword has to be masked by the

185
00:08:09,039 --> 00:08:10,479
path

186
00:08:10,479 --> 00:08:13,039
therefore we need six challenges which

187
00:08:13,039 --> 00:08:15,039
are applied to the multiple challenge

188
00:08:15,039 --> 00:08:19,599
path to receive six response bits

189
00:08:20,639 --> 00:08:23,120
with these responses the two code words

190
00:08:23,120 --> 00:08:27,840
are masked and stored as helper data

191
00:08:29,280 --> 00:08:31,280
please note that the repetition code

192
00:08:31,280 --> 00:08:34,080
returns only two possible code words the

193
00:08:34,080 --> 00:08:38,320
all zero or the all one code word

194
00:08:38,320 --> 00:08:40,880
let's take a look at the first code word

195
00:08:40,880 --> 00:08:44,000
and how this knowledge helps

196
00:08:44,000 --> 00:08:46,000
based on the helper data word and the

197
00:08:46,000 --> 00:08:48,240
knowledge that the repetition code only

198
00:08:48,240 --> 00:08:50,560
returns two code words

199
00:08:50,560 --> 00:08:52,959
we can guess two possible path response

200
00:08:52,959 --> 00:08:56,480
strings for this code word

201
00:08:56,480 --> 00:08:59,200
the puff responses have both the same

202
00:08:59,200 --> 00:09:02,240
transition pattern between the bits

203
00:09:02,240 --> 00:09:05,360
therefore we can formulate xor equations

204
00:09:05,360 --> 00:09:09,640
which account for both possibilities

205
00:09:09,920 --> 00:09:12,800
these labels are independent of the two

206
00:09:12,800 --> 00:09:16,240
possible puff response strings

207
00:09:16,240 --> 00:09:17,200
note

208
00:09:17,200 --> 00:09:19,839
that the training inputs and labels can

209
00:09:19,839 --> 00:09:22,240
only be created within the borders of

210
00:09:22,240 --> 00:09:24,959
the helper data words

211
00:09:24,959 --> 00:09:27,519
the more redundancy the code word has

212
00:09:27,519 --> 00:09:32,160
the more xor equations can be created

213
00:09:33,279 --> 00:09:35,839
the next step is to find an approximator

214
00:09:35,839 --> 00:09:38,240
which in fears by examples a mapping

215
00:09:38,240 --> 00:09:40,240
between challenge pairs

216
00:09:40,240 --> 00:09:44,800
and the result of our xo equations

217
00:09:45,760 --> 00:09:47,680
since in the fuzzy commitment scheme

218
00:09:47,680 --> 00:09:50,399
both challenges are fed into the same

219
00:09:50,399 --> 00:09:51,839
puff instance

220
00:09:51,839 --> 00:09:56,720
we can specify the approximator further

221
00:09:56,720 --> 00:09:58,880
in the presented case of the repetition

222
00:09:58,880 --> 00:10:01,760
code the approximator has to approximate

223
00:10:01,760 --> 00:10:05,839
the same puff instance twice

224
00:10:06,560 --> 00:10:08,880
this construction of an internally

225
00:10:08,880 --> 00:10:11,360
cloned approximator instance can be

226
00:10:11,360 --> 00:10:14,880
modeled by a cmes neural network

227
00:10:14,880 --> 00:10:17,200
a zmes neural network has multiple

228
00:10:17,200 --> 00:10:20,160
copies of the same neural network which

229
00:10:20,160 --> 00:10:23,360
share their trainable weights

230
00:10:23,360 --> 00:10:26,720
all neural networks get one challenge

231
00:10:26,720 --> 00:10:28,880
the label with which the neural network

232
00:10:28,880 --> 00:10:32,959
is trained is the xord helper data bit

233
00:10:32,959 --> 00:10:35,200
with this neural network we were able to

234
00:10:35,200 --> 00:10:38,800
derive a comparison between challenges

235
00:10:38,800 --> 00:10:41,040
instead of speaking that we do not claim

236
00:10:41,040 --> 00:10:43,600
that this approximator is the best or

237
00:10:43,600 --> 00:10:47,720
the only possible one

238
00:10:48,640 --> 00:10:50,959
we trained this network by applying many

239
00:10:50,959 --> 00:10:52,880
challenge pairs

240
00:10:52,880 --> 00:10:55,920
so we have this neural network but yet

241
00:10:55,920 --> 00:10:58,079
not the correct key

242
00:10:58,079 --> 00:11:00,640
to derive the key we have to perform the

243
00:11:00,640 --> 00:11:03,360
attack phase

244
00:11:03,440 --> 00:11:06,160
let's get back to our example

245
00:11:06,160 --> 00:11:07,680
our machine learning model can

246
00:11:07,680 --> 00:11:09,519
approximate the response difference

247
00:11:09,519 --> 00:11:12,000
between two challenges

248
00:11:12,000 --> 00:11:14,480
additionally the approximator does not

249
00:11:14,480 --> 00:11:18,640
depend on any unknown secret anymore

250
00:11:18,640 --> 00:11:20,800
to exploit the machine learning model we

251
00:11:20,800 --> 00:11:22,640
have to fix one challenge as a

252
00:11:22,640 --> 00:11:25,360
hypothesis

253
00:11:25,360 --> 00:11:27,440
in this example i have fixed challenged

254
00:11:27,440 --> 00:11:28,720
zero

255
00:11:28,720 --> 00:11:31,360
however we could use any challenge in

256
00:11:31,360 --> 00:11:34,480
the challenge storage

257
00:11:35,839 --> 00:11:38,560
we then build challenge pairs with all

258
00:11:38,560 --> 00:11:41,439
other challenges

259
00:11:41,600 --> 00:11:44,399
these pairs represent a comparison

260
00:11:44,399 --> 00:11:46,880
between each challenge of the storage

261
00:11:46,880 --> 00:11:50,079
with the fixed challenge

262
00:11:52,240 --> 00:11:54,240
we feed the challenge pairs into our

263
00:11:54,240 --> 00:11:57,760
trained siamese neural network

264
00:11:57,760 --> 00:12:00,560
the noisy response difference string is

265
00:12:00,560 --> 00:12:02,880
either the original or the inverse of

266
00:12:02,880 --> 00:12:04,959
the original response string of the

267
00:12:04,959 --> 00:12:07,519
multi-challenge path

268
00:12:07,519 --> 00:12:11,519
this depends on the challenge we fixed

269
00:12:11,519 --> 00:12:14,000
if the original response of the fixed

270
00:12:14,000 --> 00:12:16,560
challenge was 0 we would receive the

271
00:12:16,560 --> 00:12:19,600
original response string of the path

272
00:12:19,600 --> 00:12:23,800
otherwise the inverse

273
00:12:29,760 --> 00:12:31,920
at this point in our attack we can

274
00:12:31,920 --> 00:12:33,680
exploit the fuzzy commitment scheme

275
00:12:33,680 --> 00:12:36,639
again by using the reconstruction phase

276
00:12:36,639 --> 00:12:39,519
to correct erroneous bits in our noisy

277
00:12:39,519 --> 00:12:41,440
response

278
00:12:41,440 --> 00:12:43,760
since the repetition code in our example

279
00:12:43,760 --> 00:12:46,240
can correct one error per code word

280
00:12:46,240 --> 00:12:48,480
let's assume the noisy response string

281
00:12:48,480 --> 00:12:50,160
looks like this

282
00:12:50,160 --> 00:12:54,160
the false bit is marked in orange

283
00:12:55,920 --> 00:12:58,880
as in the fuzzy commitment scheme we xor

284
00:12:58,880 --> 00:13:02,000
the path response with the helper data

285
00:13:02,000 --> 00:13:03,839
set of speaking that the code word has

286
00:13:03,839 --> 00:13:07,480
the wrong bit too

287
00:13:09,120 --> 00:13:11,680
however after the repetition code the

288
00:13:11,680 --> 00:13:14,480
false bit is corrected and the secret is

289
00:13:14,480 --> 00:13:16,399
derived

290
00:13:16,399 --> 00:13:19,200
that is the end of our attack sketch

291
00:13:19,200 --> 00:13:21,680
as already mentioned for more complex

292
00:13:21,680 --> 00:13:23,839
codes the xor equations are more

293
00:13:23,839 --> 00:13:25,680
difficult to derive

294
00:13:25,680 --> 00:13:30,000
and more xors are involved

295
00:13:31,519 --> 00:13:34,800
let's take a look at some results

296
00:13:34,800 --> 00:13:37,200
here we see results of an attack using

297
00:13:37,200 --> 00:13:40,720
the repetition code and a simulated 128

298
00:13:40,720 --> 00:13:43,600
ring oscillator sump off

299
00:13:43,600 --> 00:13:46,480
on the x-axis of all plots we see the

300
00:13:46,480 --> 00:13:50,720
number of used challenge response pairs

301
00:13:50,720 --> 00:13:53,360
all four plots show different steps in

302
00:13:53,360 --> 00:13:55,360
the attack

303
00:13:55,360 --> 00:13:58,560
the top two plots show the accuracy and

304
00:13:58,560 --> 00:14:01,040
the validation accuracy of our machine

305
00:14:01,040 --> 00:14:04,399
learning model during training

306
00:14:04,399 --> 00:14:06,639
these information would also be

307
00:14:06,639 --> 00:14:09,760
available for an attacker

308
00:14:09,760 --> 00:14:11,839
on the bottom left we see the success

309
00:14:11,839 --> 00:14:14,160
rate after using the trained machine

310
00:14:14,160 --> 00:14:18,160
learning model to decode all challenges

311
00:14:18,160 --> 00:14:20,320
on the bottom right we see the success

312
00:14:20,320 --> 00:14:22,639
rate after having corrected the noisy

313
00:14:22,639 --> 00:14:25,199
response string of our machine learning

314
00:14:25,199 --> 00:14:28,800
model with the fuzzy commitment

315
00:14:28,839 --> 00:14:32,320
scheme when comparing the top right and

316
00:14:32,320 --> 00:14:35,680
the bottom left plot we can clearly see

317
00:14:35,680 --> 00:14:38,320
that the validation accuracy is a good

318
00:14:38,320 --> 00:14:42,000
indicator of the success of our attack

319
00:14:42,000 --> 00:14:44,399
additionally if we compare the bottom

320
00:14:44,399 --> 00:14:46,959
two plots we can see that the fuzzy

321
00:14:46,959 --> 00:14:49,600
commitment scheme itself is reliably

322
00:14:49,600 --> 00:14:50,720
correcting

323
00:14:50,720 --> 00:14:52,959
erroneous bits of the noisy response

324
00:14:52,959 --> 00:14:56,638
string of the machine learning model

325
00:14:57,199 --> 00:15:00,240
with only 800 challenge response pairs

326
00:15:00,240 --> 00:15:02,800
we were able to break this simulated

327
00:15:02,800 --> 00:15:06,319
ring oscillator sump off

328
00:15:07,360 --> 00:15:09,600
we wanted to substantiate the notion

329
00:15:09,600 --> 00:15:12,240
that the redundancy per code word of the

330
00:15:12,240 --> 00:15:14,399
used error correction code has a big

331
00:15:14,399 --> 00:15:17,680
impact on our attack

332
00:15:18,079 --> 00:15:20,399
on the left side we see the growth rate

333
00:15:20,399 --> 00:15:23,279
of the number of xor equations for three

334
00:15:23,279 --> 00:15:25,760
different repetition codes given the

335
00:15:25,760 --> 00:15:28,880
challenge response number

336
00:15:28,880 --> 00:15:31,600
can be seen that the number of derivable

337
00:15:31,600 --> 00:15:34,560
xor equations grows faster for codes

338
00:15:34,560 --> 00:15:37,120
with more redundancy

339
00:15:37,120 --> 00:15:39,279
on the right side we see the mean puff's

340
00:15:39,279 --> 00:15:42,560
success rate of our attack

341
00:15:42,560 --> 00:15:44,720
you can see a clear connection between

342
00:15:44,720 --> 00:15:47,600
the number of derivable xor equations

343
00:15:47,600 --> 00:15:49,600
and the learnability of the machine

344
00:15:49,600 --> 00:15:52,240
learning model

345
00:15:52,240 --> 00:15:54,880
the more exo equations the faster the

346
00:15:54,880 --> 00:15:57,199
learning rate and the better the

347
00:15:57,199 --> 00:15:59,440
generalization of the machine learning

348
00:15:59,440 --> 00:16:01,839
model

349
00:16:03,120 --> 00:16:05,680
another question is the influence of the

350
00:16:05,680 --> 00:16:08,639
choice of the fixed challenge in this

351
00:16:08,639 --> 00:16:11,199
plot we see the median puff success rate

352
00:16:11,199 --> 00:16:13,600
of our attack given the challenge

353
00:16:13,600 --> 00:16:16,000
response number for three different

354
00:16:16,000 --> 00:16:19,360
choices of the fixed challenge

355
00:16:19,360 --> 00:16:22,000
all fixed challenges were evaluated

356
00:16:22,000 --> 00:16:25,519
against the same machine learning model

357
00:16:25,519 --> 00:16:28,160
all three fixed challenges saturate at

358
00:16:28,160 --> 00:16:31,759
around 89 percent

359
00:16:31,759 --> 00:16:33,839
however the slope is different for each

360
00:16:33,839 --> 00:16:36,320
reference challenge

361
00:16:36,320 --> 00:16:38,480
we conclude that there could be

362
00:16:38,480 --> 00:16:41,199
potential to choose a good or a bad

363
00:16:41,199 --> 00:16:43,519
fixed challenge

364
00:16:43,519 --> 00:16:46,399
yet we could not explain this behavior

365
00:16:46,399 --> 00:16:49,360
and consider this task as an unsolved

366
00:16:49,360 --> 00:16:51,839
problem

367
00:16:53,600 --> 00:16:55,519
using publicly accessible ring

368
00:16:55,519 --> 00:16:57,279
oscillator measurements

369
00:16:57,279 --> 00:16:58,519
we built

370
00:16:58,519 --> 00:17:00,079
1300

371
00:17:00,079 --> 00:17:03,680
128 ring oscillator sump puffs

372
00:17:03,680 --> 00:17:08,079
for every of these 1 300 puffs and every

373
00:17:08,079 --> 00:17:10,880
challenge response number we trained 10

374
00:17:10,880 --> 00:17:13,039
machine learning models and evaluated

375
00:17:13,039 --> 00:17:15,599
the attack

376
00:17:16,720 --> 00:17:18,880
we see that also with real ring

377
00:17:18,880 --> 00:17:20,880
oscillator measurements it is possible

378
00:17:20,880 --> 00:17:23,280
to conduct this attack

379
00:17:23,280 --> 00:17:26,000
also with 800 challenge response pairs

380
00:17:26,000 --> 00:17:28,799
it is very likely to find the original

381
00:17:28,799 --> 00:17:33,480
or the inverse of the puff key

382
00:17:34,480 --> 00:17:36,480
we repeated this experiment with the

383
00:17:36,480 --> 00:17:38,799
simulated arbiter puff

384
00:17:38,799 --> 00:17:41,919
the results show more variance but in at

385
00:17:41,919 --> 00:17:45,200
least 1 out of 10 tries we could break

386
00:17:45,200 --> 00:17:47,760
the puff with 800 challenge response

387
00:17:47,760 --> 00:17:49,520
pairs

388
00:17:49,520 --> 00:17:52,400
interestingly due to more variants in

389
00:17:52,400 --> 00:17:55,440
some instances even with 400 challenge

390
00:17:55,440 --> 00:17:58,160
response pairs a high percentage of the

391
00:17:58,160 --> 00:18:02,320
secret bits could be decoded correctly

392
00:18:02,320 --> 00:18:03,280
however

393
00:18:03,280 --> 00:18:05,520
this information is not available for an

394
00:18:05,520 --> 00:18:08,080
attacker

395
00:18:09,039 --> 00:18:11,360
let us summarize

396
00:18:11,360 --> 00:18:13,600
in case of a repetition code with seven

397
00:18:13,600 --> 00:18:16,880
bits only a single key is necessary to

398
00:18:16,880 --> 00:18:19,440
learn a simple ring oscillator sumpuf

399
00:18:19,440 --> 00:18:22,080
and arbiter puff

400
00:18:22,080 --> 00:18:24,559
we have tested our attack with different

401
00:18:24,559 --> 00:18:27,280
and more complex codes however i leave

402
00:18:27,280 --> 00:18:29,200
that for the interested reader of our

403
00:18:29,200 --> 00:18:31,679
paper

404
00:18:32,400 --> 00:18:33,760
we conclude

405
00:18:33,760 --> 00:18:35,919
that the fuzzy commitment scheme or any

406
00:18:35,919 --> 00:18:38,960
fuzzy extractor scheme does not counter

407
00:18:38,960 --> 00:18:43,840
the entropy loss of the underlying path

408
00:18:44,640 --> 00:18:47,360
given that the path is not perfect we

409
00:18:47,360 --> 00:18:49,679
think that the only way to counter such

410
00:18:49,679 --> 00:18:51,600
machine learning attacks is the

411
00:18:51,600 --> 00:18:53,760
limitation of the number of challenge

412
00:18:53,760 --> 00:18:57,320
response pairs

413
00:18:57,440 --> 00:19:00,160
another approach to mitigate this attack

414
00:19:00,160 --> 00:19:02,799
could be the usage of more complex and

415
00:19:02,799 --> 00:19:06,240
monolithic error correction codes

416
00:19:06,240 --> 00:19:09,919
these codes lead to more xors in the xor

417
00:19:09,919 --> 00:19:11,120
equations

418
00:19:11,120 --> 00:19:14,000
and therefore more non-linearity which

419
00:19:14,000 --> 00:19:16,000
is harder to learn for a machine

420
00:19:16,000 --> 00:19:18,720
learning model

421
00:19:19,720 --> 00:19:21,120
[Music]

422
00:19:21,120 --> 00:19:23,600
i thank for your attention and interest

423
00:19:23,600 --> 00:19:27,080
in this topic

