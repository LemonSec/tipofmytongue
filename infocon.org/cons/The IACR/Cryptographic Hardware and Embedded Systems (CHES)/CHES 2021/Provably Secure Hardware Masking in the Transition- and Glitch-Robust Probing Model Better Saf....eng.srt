1
00:00:00,719 --> 00:00:02,480
welcome to this presentation about

2
00:00:02,480 --> 00:00:04,240
probably secure hardware masking in the

3
00:00:04,240 --> 00:00:06,000
transition and glitch robust probing

4
00:00:06,000 --> 00:00:06,960
model

5
00:00:06,960 --> 00:00:08,880
i am getting cassius and this is joint

6
00:00:08,880 --> 00:00:10,559
work with transformative disorder my

7
00:00:10,559 --> 00:00:12,480
advisor

8
00:00:12,480 --> 00:00:14,480
if you look at the approximate type

9
00:00:14,480 --> 00:00:16,560
timeline of masking

10
00:00:16,560 --> 00:00:18,720
all starts with the invention of the

11
00:00:18,720 --> 00:00:20,880
suction attacks then people developed

12
00:00:20,880 --> 00:00:23,359
some empirical quantum measures

13
00:00:23,359 --> 00:00:25,680
which were then studied in a more

14
00:00:25,680 --> 00:00:27,840
formalized model which then enables to

15
00:00:27,840 --> 00:00:29,199
prove the security of some

16
00:00:29,199 --> 00:00:30,880
counter-measures

17
00:00:30,880 --> 00:00:34,399
finally if you want to have another very

18
00:00:34,399 --> 00:00:37,360
strong sense of security we'll sometimes

19
00:00:37,360 --> 00:00:39,600
want to have formal verification of the

20
00:00:39,600 --> 00:00:40,800
counter-measures and of their

21
00:00:40,800 --> 00:00:43,760
implementation and finally if some

22
00:00:43,760 --> 00:00:46,399
automated generation of this contour

23
00:00:46,399 --> 00:00:48,719
measure so um

24
00:00:48,719 --> 00:00:51,120
this is sort of valid for both uh

25
00:00:51,120 --> 00:00:52,719
masked software

26
00:00:52,719 --> 00:00:55,520
uh glitch smart hardware which we've

27
00:00:55,520 --> 00:00:58,239
already seen for instance in previous

28
00:00:58,239 --> 00:01:00,719
chess editions

29
00:01:00,719 --> 00:01:02,079
some works

30
00:01:02,079 --> 00:01:04,799
that want to make formal verification or

31
00:01:04,799 --> 00:01:07,119
even automated generation

32
00:01:07,119 --> 00:01:09,840
and in this work we study hardware

33
00:01:09,840 --> 00:01:12,400
masking it's slightly

34
00:01:12,400 --> 00:01:14,720
more powerful adversary setting which is

35
00:01:14,720 --> 00:01:17,200
the transition robust

36
00:01:17,200 --> 00:01:19,759
mast hardware

37
00:01:19,759 --> 00:01:22,080
and we aim to design and prove the

38
00:01:22,080 --> 00:01:26,320
security of a masking scheme

39
00:01:26,320 --> 00:01:28,640
so all start with our circuit model

40
00:01:28,640 --> 00:01:30,560
which is quite abstract arithmetic

41
00:01:30,560 --> 00:01:33,439
circuit in which we have a combinatorial

42
00:01:33,439 --> 00:01:36,000
gate such that here

43
00:01:36,000 --> 00:01:38,240
the xor gate or the n-gate or in

44
00:01:38,240 --> 00:01:39,600
arithmetic circuit addition and

45
00:01:39,600 --> 00:01:41,360
multiplications

46
00:01:41,360 --> 00:01:44,079
i will use both interchangeably and we

47
00:01:44,079 --> 00:01:47,119
also have the sequential notion of

48
00:01:47,119 --> 00:01:49,119
registers which in practice are

49
00:01:49,119 --> 00:01:50,960
implemented by flip flops and that

50
00:01:50,960 --> 00:01:53,759
corresponds to a sequential evaluation

51
00:01:53,759 --> 00:01:55,200
of the circuits here they are

52
00:01:55,200 --> 00:01:58,560
represented by these boxes

53
00:01:58,640 --> 00:02:01,200
so now that we have our circuit model we

54
00:02:01,200 --> 00:02:03,920
can analyze how to mask this example

55
00:02:03,920 --> 00:02:06,159
circuit so at the heart of masking there

56
00:02:06,159 --> 00:02:08,878
is the notion of secret sharing where

57
00:02:08,878 --> 00:02:12,080
you replace a secret bit a with a set of

58
00:02:12,080 --> 00:02:13,040
shares

59
00:02:13,040 --> 00:02:15,280
that are taken randomly such that their

60
00:02:15,280 --> 00:02:16,800
sum of xor

61
00:02:16,800 --> 00:02:19,760
is the secret itself so here we mask or

62
00:02:19,760 --> 00:02:21,520
share the two input sharing will be

63
00:02:21,520 --> 00:02:23,520
simply two shares

64
00:02:23,520 --> 00:02:26,319
uh note that we have our wires that are

65
00:02:26,319 --> 00:02:28,720
shared we need a masking compiler that

66
00:02:28,720 --> 00:02:32,400
will replace each wire by a sharing and

67
00:02:32,400 --> 00:02:35,200
each logic gate in the original circuit

68
00:02:35,200 --> 00:02:37,920
with a masked gadget that performs the

69
00:02:37,920 --> 00:02:40,800
same operation as the original logic

70
00:02:40,800 --> 00:02:43,760
gate but in the rmask domain

71
00:02:43,760 --> 00:02:45,920
so here we have first a simple xor

72
00:02:45,920 --> 00:02:48,560
gadget that simply makes of n

73
00:02:48,560 --> 00:02:52,000
xor gates for a register that's even a

74
00:02:52,000 --> 00:02:55,680
simple we just replicate the register

75
00:02:55,680 --> 00:02:59,680
as many times as strashes and finally

76
00:02:59,680 --> 00:03:02,239
for the end gate it's a bit more complex

77
00:03:02,239 --> 00:03:04,239
there have been many work but here is an

78
00:03:04,239 --> 00:03:05,440
example

79
00:03:05,440 --> 00:03:07,280
of

80
00:03:07,280 --> 00:03:09,920
and skates i will not go too much into

81
00:03:09,920 --> 00:03:12,879
the detail about specific gadgets

82
00:03:12,879 --> 00:03:15,519
or multiplication gadgets in this

83
00:03:15,519 --> 00:03:18,159
presentation if you want more details

84
00:03:18,159 --> 00:03:20,080
all of them are in the paper

85
00:03:20,080 --> 00:03:21,920
the security of such a masking scheme

86
00:03:21,920 --> 00:03:24,640
can be evaluated into t probing model

87
00:03:24,640 --> 00:03:26,959
whereby the adversary is able to get the

88
00:03:26,959 --> 00:03:27,840
value

89
00:03:27,840 --> 00:03:31,519
of t chosen wires in the circuit

90
00:03:31,519 --> 00:03:33,440
and we say that the circuit is still

91
00:03:33,440 --> 00:03:34,959
probing secure

92
00:03:34,959 --> 00:03:37,200
if no adverse site can learn anything

93
00:03:37,200 --> 00:03:41,599
about the secret inputs of the circuit

94
00:03:41,599 --> 00:03:44,640
the t probing security is hard to verify

95
00:03:44,640 --> 00:03:47,760
first because its computational cost of

96
00:03:47,760 --> 00:03:49,599
verification grows exponentially with

97
00:03:49,599 --> 00:03:51,519
the size of the circuit and second

98
00:03:51,519 --> 00:03:54,319
before because it is not composable

99
00:03:54,319 --> 00:03:56,159
that is if you take one gadget that is t

100
00:03:56,159 --> 00:03:58,239
probing secure another gadget that's

101
00:03:58,239 --> 00:04:00,560
also the probing sector and you connect

102
00:04:00,560 --> 00:04:02,799
both the result might not be keep from

103
00:04:02,799 --> 00:04:04,159
being secure

104
00:04:04,159 --> 00:04:05,920
so usually

105
00:04:05,920 --> 00:04:08,480
we'd like to use a stronger notion which

106
00:04:08,480 --> 00:04:10,720
is called simulatability

107
00:04:10,720 --> 00:04:12,959
and that can be used as a basis for

108
00:04:12,959 --> 00:04:15,599
composition in such a way that you can

109
00:04:15,599 --> 00:04:18,798
first evaluate the security of

110
00:04:18,798 --> 00:04:20,560
individual gadgets

111
00:04:20,560 --> 00:04:22,000
and then

112
00:04:22,000 --> 00:04:23,840
evaluate how they are connected together

113
00:04:23,840 --> 00:04:26,000
in order to prove the security of a

114
00:04:26,000 --> 00:04:27,680
larger circuit

115
00:04:27,680 --> 00:04:29,520
and similar terribility is a broad

116
00:04:29,520 --> 00:04:31,919
framework that has been used

117
00:04:31,919 --> 00:04:35,280
in many concrete instances for instance

118
00:04:35,280 --> 00:04:37,040
it covers the definition of n9

119
00:04:37,040 --> 00:04:38,560
non-interference strongly on

120
00:04:38,560 --> 00:04:42,800
interference spiny and so on

121
00:04:42,800 --> 00:04:44,320
concretely

122
00:04:44,320 --> 00:04:46,000
simulatability

123
00:04:46,000 --> 00:04:48,880
works by saying having a set of probes

124
00:04:48,880 --> 00:04:51,919
in this simple example circuit z is a

125
00:04:51,919 --> 00:04:54,080
probe and asking the question of what

126
00:04:54,080 --> 00:04:56,000
are the inputs to the circuits that are

127
00:04:56,000 --> 00:04:57,040
needed

128
00:04:57,040 --> 00:05:00,400
to be able to simulate properly

129
00:05:00,400 --> 00:05:02,720
this probe assuming that the

130
00:05:02,720 --> 00:05:04,320
distinguisher that has to distinguish

131
00:05:04,320 --> 00:05:06,400
between our simulation and the real

132
00:05:06,400 --> 00:05:08,800
circuit knows the values of all the

133
00:05:08,800 --> 00:05:11,120
inputs of the circuit so in this case if

134
00:05:11,120 --> 00:05:13,199
you want to simulate z you will need to

135
00:05:13,199 --> 00:05:16,240
know both input x and y

136
00:05:16,240 --> 00:05:18,639
in this other example where you observe

137
00:05:18,639 --> 00:05:21,199
an input x with a random bit then you

138
00:05:21,199 --> 00:05:22,639
don't need to know anything about the

139
00:05:22,639 --> 00:05:24,800
inputs as the probes appears to the

140
00:05:24,800 --> 00:05:27,440
distinguisher as just a fresh random

141
00:05:27,440 --> 00:05:29,440
value

142
00:05:29,440 --> 00:05:31,759
then if you look at this and gate

143
00:05:31,759 --> 00:05:33,360
you don't take this masking effect of

144
00:05:33,360 --> 00:05:34,639
the randomness

145
00:05:34,639 --> 00:05:36,240
and you will need the value x to

146
00:05:36,240 --> 00:05:38,080
simulate

147
00:05:38,080 --> 00:05:41,199
and a last example would be where we use

148
00:05:41,199 --> 00:05:43,759
randomness in two distinct cases

149
00:05:43,759 --> 00:05:46,160
and in that case if the adversary

150
00:05:46,160 --> 00:05:49,919
observes both z1 and z2 you will need to

151
00:05:49,919 --> 00:05:52,479
know x and y to simulate this this can

152
00:05:52,479 --> 00:05:55,360
be seen by observing the xor between z1

153
00:05:55,360 --> 00:05:56,960
and z2

154
00:05:56,960 --> 00:06:01,599
is equal to the xor between x and y

155
00:06:02,000 --> 00:06:04,000
so in summary this notion of

156
00:06:04,000 --> 00:06:06,000
simulatability is the key for

157
00:06:06,000 --> 00:06:09,199
composability because it helps you

158
00:06:09,199 --> 00:06:11,039
replace

159
00:06:11,039 --> 00:06:13,680
the knowledge of probes by just the

160
00:06:13,680 --> 00:06:16,639
knowledge of some inputs of the gadgets

161
00:06:16,639 --> 00:06:18,400
and once you know that you need only to

162
00:06:18,400 --> 00:06:20,800
know some inputs of the gadget you can

163
00:06:20,800 --> 00:06:23,600
forget about what's inside this gadget

164
00:06:23,600 --> 00:06:24,800
now that you are equipped with this

165
00:06:24,800 --> 00:06:27,280
framework of simulatability

166
00:06:27,280 --> 00:06:29,199
let's this is how we can make concrete

167
00:06:29,199 --> 00:06:30,960
probing security proof

168
00:06:30,960 --> 00:06:33,280
so the intuition for proofs

169
00:06:33,280 --> 00:06:35,840
is the share isolation

170
00:06:35,840 --> 00:06:39,520
so when we share isolation in circuits

171
00:06:39,520 --> 00:06:41,919
the circuit is split into one part for

172
00:06:41,919 --> 00:06:43,919
each share and those parts not

173
00:06:43,919 --> 00:06:45,840
communicate so in this example if we

174
00:06:45,840 --> 00:06:48,720
forget about the great part we have

175
00:06:48,720 --> 00:06:51,120
one green shell and one orange shell and

176
00:06:51,120 --> 00:06:53,039
those are not interconnected

177
00:06:53,039 --> 00:06:54,560
and here we have two shares so we have

178
00:06:54,560 --> 00:06:56,560
security against one probe

179
00:06:56,560 --> 00:06:58,400
because if the adversary probes the

180
00:06:58,400 --> 00:06:59,919
green part it doesn't learn anything

181
00:06:59,919 --> 00:07:02,000
about the orange part which means that

182
00:07:02,000 --> 00:07:04,800
it doesn't learn nothing about a1

183
00:07:04,800 --> 00:07:06,880
nor b1 which means that it doesn't learn

184
00:07:06,880 --> 00:07:09,440
anything about a nor b

185
00:07:09,440 --> 00:07:10,960
and this extends

186
00:07:10,960 --> 00:07:12,960
simply to higher order as long as you

187
00:07:12,960 --> 00:07:16,560
have more shares than uf probes

188
00:07:16,560 --> 00:07:19,280
and this share isolation notion

189
00:07:19,280 --> 00:07:21,360
is composable

190
00:07:21,360 --> 00:07:23,199
and it is further more trivial to

191
00:07:23,199 --> 00:07:25,199
instantiate linear gadgets that are

192
00:07:25,199 --> 00:07:27,039
share isolating

193
00:07:27,039 --> 00:07:28,720
however

194
00:07:28,720 --> 00:07:30,479
this is not the case for non-linear

195
00:07:30,479 --> 00:07:31,599
gadgets

196
00:07:31,599 --> 00:07:34,319
for aux or gate or and gate sorry that

197
00:07:34,319 --> 00:07:37,199
is great here

198
00:07:37,199 --> 00:07:39,039
it has actually interconnections between

199
00:07:39,039 --> 00:07:41,520
the orange and green parts

200
00:07:41,520 --> 00:07:44,639
so the id for security proof is to have

201
00:07:44,639 --> 00:07:45,440
some

202
00:07:45,440 --> 00:07:47,840
simulated isolation

203
00:07:47,840 --> 00:07:50,080
and that's what we called pioneer by

204
00:07:50,080 --> 00:07:53,120
probe isolating interference

205
00:07:53,120 --> 00:07:55,360
let's now look at the definition of

206
00:07:55,360 --> 00:07:56,560
panic

207
00:07:56,560 --> 00:07:58,319
so basically the definition of binary

208
00:07:58,319 --> 00:08:00,240
relates to how we need inputs to

209
00:08:00,240 --> 00:08:02,319
simulate probes

210
00:08:02,319 --> 00:08:04,560
as a source of inspiration let's look at

211
00:08:04,560 --> 00:08:07,440
how it happens for share isolating agent

212
00:08:07,440 --> 00:08:09,360
in a share isolating gadget here on the

213
00:08:09,360 --> 00:08:12,479
right if you have to simulate an output

214
00:08:12,479 --> 00:08:16,560
probe with share index is zero we need

215
00:08:16,560 --> 00:08:18,720
possibly all the inputs in the same

216
00:08:18,720 --> 00:08:21,599
circuit share that is x0 and y0

217
00:08:21,599 --> 00:08:24,479
if on the other hand we have a probe

218
00:08:24,479 --> 00:08:26,800
inside the gadget it will be inside one

219
00:08:26,800 --> 00:08:28,560
circuit chair inside

220
00:08:28,560 --> 00:08:30,639
the circuit share two for this example

221
00:08:30,639 --> 00:08:32,799
and we will need the inputs of circuit

222
00:08:32,799 --> 00:08:34,320
share two and if we need to simulate

223
00:08:34,320 --> 00:08:36,640
both generally we need all those input

224
00:08:36,640 --> 00:08:37,599
shares

225
00:08:37,599 --> 00:08:39,919
for pioneer it will be a bit of the same

226
00:08:39,919 --> 00:08:44,159
so if we have first one output probe

227
00:08:44,159 --> 00:08:46,880
we will have

228
00:08:47,120 --> 00:08:48,959
the corresponding input shares to

229
00:08:48,959 --> 00:08:50,160
simulate

230
00:08:50,160 --> 00:08:52,160
if on the other hand we have an internal

231
00:08:52,160 --> 00:08:53,279
probe

232
00:08:53,279 --> 00:08:55,600
since there is no share isolation inside

233
00:08:55,600 --> 00:08:57,680
the circuit we will let the simulator

234
00:08:57,680 --> 00:08:58,560
choose

235
00:08:58,560 --> 00:09:00,080
what additionally

236
00:09:00,080 --> 00:09:01,760
he needs as

237
00:09:01,760 --> 00:09:04,720
input share index so in this case he

238
00:09:04,720 --> 00:09:07,600
choose the share index one

239
00:09:07,600 --> 00:09:09,920
and that's how piney works and basically

240
00:09:09,920 --> 00:09:11,680
the only difference is that we kind of

241
00:09:11,680 --> 00:09:13,920
blur the line inside the gadget about

242
00:09:13,920 --> 00:09:15,839
where the internal probes are

243
00:09:15,839 --> 00:09:16,959
but

244
00:09:16,959 --> 00:09:19,279
from the outside it doesn't matter

245
00:09:19,279 --> 00:09:21,600
you could make the upper boxes disappear

246
00:09:21,600 --> 00:09:24,000
and it would basically behave the same

247
00:09:24,000 --> 00:09:26,720
from the point of view of composability

248
00:09:26,720 --> 00:09:29,040
let's go physical up to now we have been

249
00:09:29,040 --> 00:09:31,040
analyzing arithmetic circuit but in the

250
00:09:31,040 --> 00:09:34,160
real world we have more cmos logic

251
00:09:34,160 --> 00:09:36,560
that is we will have in practice

252
00:09:36,560 --> 00:09:37,760
glitches

253
00:09:37,760 --> 00:09:40,240
this means that when you probe one value

254
00:09:40,240 --> 00:09:42,320
after a transition of one clock cycle to

255
00:09:42,320 --> 00:09:43,760
another it will not be stable it will

256
00:09:43,760 --> 00:09:46,160
move and the value that you will take at

257
00:09:46,160 --> 00:09:47,920
this point can be kind of arbitrary

258
00:09:47,920 --> 00:09:50,480
functions of the inputs of the

259
00:09:50,480 --> 00:09:53,680
combinatorial circuit so in our model we

260
00:09:53,680 --> 00:09:56,160
have an extended probe that if it probes

261
00:09:56,160 --> 00:09:58,800
this wire you will get

262
00:09:58,800 --> 00:10:01,040
as values for the adversary

263
00:10:01,040 --> 00:10:03,120
all the values of the input wires to the

264
00:10:03,120 --> 00:10:05,360
combinatorial circuits

265
00:10:05,360 --> 00:10:07,360
then we also have transition so if we

266
00:10:07,360 --> 00:10:08,720
execute a

267
00:10:08,720 --> 00:10:11,120
circuit for two consecutive clock cycles

268
00:10:11,120 --> 00:10:13,440
first clock cycle second clock cycle

269
00:10:13,440 --> 00:10:14,959
then one probe might capture a

270
00:10:14,959 --> 00:10:16,079
transition

271
00:10:16,079 --> 00:10:17,760
between

272
00:10:17,760 --> 00:10:20,160
two states of the wires and using only

273
00:10:20,160 --> 00:10:22,160
one probe the adversary might learn

274
00:10:22,160 --> 00:10:25,440
information about those two states

275
00:10:25,440 --> 00:10:27,040
so this gives us a second kind of

276
00:10:27,040 --> 00:10:29,519
external probes and of course

277
00:10:29,519 --> 00:10:31,680
both transition and glitches can be

278
00:10:31,680 --> 00:10:34,160
combined together and then the adversary

279
00:10:34,160 --> 00:10:35,360
learns all the input of the

280
00:10:35,360 --> 00:10:37,519
combinatorial circuit for two

281
00:10:37,519 --> 00:10:39,440
consecutive clock cycle

282
00:10:39,440 --> 00:10:41,519
let's now briefly discuss the glitch

283
00:10:41,519 --> 00:10:42,720
only case

284
00:10:42,720 --> 00:10:44,480
this is the case we already tackled in

285
00:10:44,480 --> 00:10:46,320
our previous hardware private circuit

286
00:10:46,320 --> 00:10:47,440
paper

287
00:10:47,440 --> 00:10:49,839
the intuition for this is that

288
00:10:49,839 --> 00:10:52,240
if you have a share isolating circuit

289
00:10:52,240 --> 00:10:54,560
then you have no problem with glitches

290
00:10:54,560 --> 00:10:56,720
simply said

291
00:10:56,720 --> 00:10:58,959
one ditch or one set of glitches only

292
00:10:58,959 --> 00:11:01,519
propagate into one circuit share so one

293
00:11:01,519 --> 00:11:04,399
electric external probe will not teach

294
00:11:04,399 --> 00:11:07,120
you more in terms of

295
00:11:07,120 --> 00:11:09,680
number of circuits than one planar probe

296
00:11:09,680 --> 00:11:11,440
so the old argument about counting

297
00:11:11,440 --> 00:11:13,680
circuit shares still applies

298
00:11:13,680 --> 00:11:16,480
so we can try to translate this to piney

299
00:11:16,480 --> 00:11:19,760
by making glitch robust spine gadgets

300
00:11:19,760 --> 00:11:21,760
which amount to saying okay the extended

301
00:11:21,760 --> 00:11:23,680
probe that you have still

302
00:11:23,680 --> 00:11:26,560
due to glitches inside of your gadgets

303
00:11:26,560 --> 00:11:28,399
are not a problem you still have this

304
00:11:28,399 --> 00:11:30,560
spiny property

305
00:11:30,560 --> 00:11:32,720
and then once you have that we can have

306
00:11:32,720 --> 00:11:35,519
a composition terrarium

307
00:11:35,519 --> 00:11:37,680
to handle the glitch that are crossing

308
00:11:37,680 --> 00:11:39,519
multiple gadgets and for which you

309
00:11:39,519 --> 00:11:41,279
cannot handle them at the level of a

310
00:11:41,279 --> 00:11:43,680
simple definition of one gadget

311
00:11:43,680 --> 00:11:45,440
and this composition theorem is

312
00:11:45,440 --> 00:11:46,800
basically that

313
00:11:46,800 --> 00:11:49,279
if in the non-glitchy case you have a

314
00:11:49,279 --> 00:11:51,519
valid composition or secure composition

315
00:11:51,519 --> 00:11:53,680
based on a simulatability based

316
00:11:53,680 --> 00:11:55,360
definition

317
00:11:55,360 --> 00:11:58,000
and you take glitch obviously object

318
00:11:58,000 --> 00:11:59,680
such as take

319
00:11:59,680 --> 00:12:02,320
binding objects decompose now you take

320
00:12:02,320 --> 00:12:05,200
glitch robust by negative this gives you

321
00:12:05,200 --> 00:12:07,440
a glitch robust by knee composition

322
00:12:07,440 --> 00:12:09,120
hence it is

323
00:12:09,120 --> 00:12:11,680
the glitch robust probing secure

324
00:12:11,680 --> 00:12:13,519
let's now move at the transition robust

325
00:12:13,519 --> 00:12:15,120
case or the glitch plus transition

326
00:12:15,120 --> 00:12:17,040
robust case which doesn't matter much at

327
00:12:17,040 --> 00:12:19,600
this level of abstraction

328
00:12:19,600 --> 00:12:22,000
so the good news here is that if you

329
00:12:22,000 --> 00:12:24,959
take a share isolating circuit g

330
00:12:24,959 --> 00:12:27,440
and you have a transition

331
00:12:27,440 --> 00:12:29,360
you don't have issue because since this

332
00:12:29,360 --> 00:12:32,399
wire on which you have the transition

333
00:12:32,399 --> 00:12:34,320
is in the same circuit share for both

334
00:12:34,320 --> 00:12:36,639
execution it asks you for the same

335
00:12:36,639 --> 00:12:38,399
sequential on the input

336
00:12:38,399 --> 00:12:40,800
and then our intuition still holds that

337
00:12:40,800 --> 00:12:41,920
you have

338
00:12:41,920 --> 00:12:42,720
more

339
00:12:42,720 --> 00:12:46,560
more circuit shares than probes

340
00:12:46,560 --> 00:12:48,880
so if you go for piney we can do a

341
00:12:48,880 --> 00:12:50,560
transition robuspani which will take

342
00:12:50,560 --> 00:12:52,800
into account for transition where both

343
00:12:52,800 --> 00:12:54,959
part of the transition extended probe

344
00:12:54,959 --> 00:12:56,800
will be inside one execution of the

345
00:12:56,800 --> 00:12:58,800
gadgets

346
00:12:58,800 --> 00:13:02,079
then for comparison however there is a

347
00:13:02,079 --> 00:13:03,600
bad news

348
00:13:03,600 --> 00:13:05,519
which is that if you look at this

349
00:13:05,519 --> 00:13:07,680
example

350
00:13:07,680 --> 00:13:10,160
let's take a transition extended probe

351
00:13:10,160 --> 00:13:13,279
that happens to be in two execution of

352
00:13:13,279 --> 00:13:15,600
the same gadget as previously but in

353
00:13:15,600 --> 00:13:17,839
this case we make the gadget loop but

354
00:13:17,839 --> 00:13:20,880
itself study that is we have a first

355
00:13:20,880 --> 00:13:23,040
execution here and the output goes back

356
00:13:23,040 --> 00:13:24,959
to the gadget which is represented here

357
00:13:24,959 --> 00:13:28,240
for the second execution

358
00:13:28,240 --> 00:13:29,600
and there

359
00:13:29,600 --> 00:13:31,600
if we want to see how we can simulate

360
00:13:31,600 --> 00:13:32,800
this probe

361
00:13:32,800 --> 00:13:34,800
we first need to simulate this part of

362
00:13:34,800 --> 00:13:37,519
the probe and since we have our

363
00:13:37,519 --> 00:13:39,760
transition robust spiny we will need

364
00:13:39,760 --> 00:13:41,760
probably one second chair to simulate

365
00:13:41,760 --> 00:13:42,880
this

366
00:13:42,880 --> 00:13:45,120
then in order to simulate

367
00:13:45,120 --> 00:13:47,199
the second part of the probe

368
00:13:47,199 --> 00:13:48,480
ends

369
00:13:48,480 --> 00:13:50,720
the output for the first execution of

370
00:13:50,720 --> 00:13:52,959
the gadget according to the transitional

371
00:13:52,959 --> 00:13:54,800
spinning definition we might need two

372
00:13:54,800 --> 00:13:56,079
sequel chairs

373
00:13:56,079 --> 00:13:57,440
and no we have a problem since we have

374
00:13:57,440 --> 00:13:59,920
more secret shares needed to simulate

375
00:13:59,920 --> 00:14:04,160
than we have pro so f2 versus one

376
00:14:04,240 --> 00:14:05,760
and that basically

377
00:14:05,760 --> 00:14:07,680
means that we cannot compose transition

378
00:14:07,680 --> 00:14:09,600
robust gadgets

379
00:14:09,600 --> 00:14:10,639
however

380
00:14:10,639 --> 00:14:12,800
we have this intuition that on this

381
00:14:12,800 --> 00:14:15,920
observation that share isolating gadgets

382
00:14:15,920 --> 00:14:17,120
still work

383
00:14:17,120 --> 00:14:19,360
even if you have transitions

384
00:14:19,360 --> 00:14:20,800
so

385
00:14:20,800 --> 00:14:22,560
the real

386
00:14:22,560 --> 00:14:25,680
cause here is a mismatch between the

387
00:14:25,680 --> 00:14:27,760
properties of charge the leaking gadget

388
00:14:27,760 --> 00:14:29,440
and the properties that you require for

389
00:14:29,440 --> 00:14:31,199
piney

390
00:14:31,199 --> 00:14:34,480
so concretely for share isolating let's

391
00:14:34,480 --> 00:14:36,880
go again on the second execution if you

392
00:14:36,880 --> 00:14:39,279
ask to simulate for one probe

393
00:14:39,279 --> 00:14:41,680
you will

394
00:14:41,839 --> 00:14:44,880
of course need to know one secret share

395
00:14:44,880 --> 00:14:47,120
but then for to share the leaking gadget

396
00:14:47,120 --> 00:14:50,240
you will automatically be able

397
00:14:50,240 --> 00:14:51,040
to

398
00:14:51,040 --> 00:14:53,600
simulate to to get the value for the

399
00:14:53,600 --> 00:14:56,240
corresponding output shares

400
00:14:56,240 --> 00:14:58,720
and this is an additional property

401
00:14:58,720 --> 00:15:00,079
that

402
00:15:00,079 --> 00:15:02,160
is not satisfied for piney

403
00:15:02,160 --> 00:15:04,959
and if we pack it into piney

404
00:15:04,959 --> 00:15:06,880
which is the definition that we called

405
00:15:06,880 --> 00:15:08,800
openness so you add this property on top

406
00:15:08,800 --> 00:15:12,560
of piney you get the following result

407
00:15:12,560 --> 00:15:14,959
for this second execution you can

408
00:15:14,959 --> 00:15:16,560
simulate the output okay you don't care

409
00:15:16,560 --> 00:15:17,519
about it

410
00:15:17,519 --> 00:15:18,720
but

411
00:15:18,720 --> 00:15:20,720
this means that no

412
00:15:20,720 --> 00:15:21,680
based

413
00:15:21,680 --> 00:15:23,519
on this input

414
00:15:23,519 --> 00:15:25,440
you know that the simulator will be able

415
00:15:25,440 --> 00:15:27,920
to simulate both the probe

416
00:15:27,920 --> 00:15:29,920
and the corresponding output which is

417
00:15:29,920 --> 00:15:32,399
exactly what you need for the previous

418
00:15:32,399 --> 00:15:34,560
execution of the gadget so you can

419
00:15:34,560 --> 00:15:36,800
simulate know the full probe based on

420
00:15:36,800 --> 00:15:39,040
only one circuit share

421
00:15:39,040 --> 00:15:41,199
and actually this generalizes well and

422
00:15:41,199 --> 00:15:43,519
we have a composition theorem that says

423
00:15:43,519 --> 00:15:45,920
transition robust openly gadget compose

424
00:15:45,920 --> 00:15:47,600
that is you can compose them and get

425
00:15:47,600 --> 00:15:49,199
still an opinion

426
00:15:49,199 --> 00:15:50,480
gadget

427
00:15:50,480 --> 00:15:52,480
so that's one solution

428
00:15:52,480 --> 00:15:55,199
to get proof up this eq did and

429
00:15:55,199 --> 00:15:57,759
transition robust composition

430
00:15:57,759 --> 00:15:59,600
however there are some cost as you need

431
00:15:59,600 --> 00:16:01,600
to make your gadget not not only piney

432
00:16:01,600 --> 00:16:04,000
but no opini which is a stronger

433
00:16:04,000 --> 00:16:06,560
property therefore you might need more

434
00:16:06,560 --> 00:16:09,360
cost in terms of area randomness

435
00:16:09,360 --> 00:16:11,759
or latency

436
00:16:11,759 --> 00:16:13,440
another solution that you investigate in

437
00:16:13,440 --> 00:16:15,040
the paper

438
00:16:15,040 --> 00:16:18,399
is to use pipeline bubbles

439
00:16:18,399 --> 00:16:21,279
idea would be to completely avoid those

440
00:16:21,279 --> 00:16:22,720
transition

441
00:16:22,720 --> 00:16:25,440
or actually make them benign

442
00:16:25,440 --> 00:16:26,560
that is

443
00:16:26,560 --> 00:16:28,240
we'll make it such that when we have a

444
00:16:28,240 --> 00:16:30,639
transition between two states one of the

445
00:16:30,639 --> 00:16:32,480
states will be

446
00:16:32,480 --> 00:16:36,800
some public or non-sensitive state

447
00:16:36,800 --> 00:16:38,959
therefore the transition

448
00:16:38,959 --> 00:16:41,360
probe will not learn you

449
00:16:41,360 --> 00:16:43,519
more about the secrets than with the

450
00:16:43,519 --> 00:16:46,399
non-extended probe

451
00:16:46,399 --> 00:16:47,839
and we do this

452
00:16:47,839 --> 00:16:52,320
by having a kind of cleanup cycle

453
00:16:52,320 --> 00:16:53,839
every other cycle

454
00:16:53,839 --> 00:16:56,800
so we put an empty state or non-secret

455
00:16:56,800 --> 00:16:58,720
state between

456
00:16:58,720 --> 00:16:59,600
two

457
00:16:59,600 --> 00:17:01,040
secret states

458
00:17:01,040 --> 00:17:03,360
and this makes that you do not need any

459
00:17:03,360 --> 00:17:06,880
transition between two sensitive states

460
00:17:06,880 --> 00:17:08,959
and you do not need extra hardware to do

461
00:17:08,959 --> 00:17:11,839
this except maybe a bit of control

462
00:17:11,839 --> 00:17:12,559
but

463
00:17:12,559 --> 00:17:14,559
the main cost of this is that it lowers

464
00:17:14,559 --> 00:17:15,839
a throughput

465
00:17:15,839 --> 00:17:17,760
so concretely

466
00:17:17,760 --> 00:17:19,599
if we take another example here let's

467
00:17:19,599 --> 00:17:20,880
imagine we want

468
00:17:20,880 --> 00:17:21,760
to

469
00:17:21,760 --> 00:17:23,520
evaluate

470
00:17:23,520 --> 00:17:26,720
an sp and a block cipher

471
00:17:26,720 --> 00:17:28,400
where we have an implementation of an

472
00:17:28,400 --> 00:17:32,320
s-box that's a two-stage pipeline

473
00:17:32,320 --> 00:17:34,240
so let's imagine that there are only

474
00:17:34,240 --> 00:17:36,080
three s-boxes

475
00:17:36,080 --> 00:17:36,960
in

476
00:17:36,960 --> 00:17:38,559
the block cipher

477
00:17:38,559 --> 00:17:39,600
and we

478
00:17:39,600 --> 00:17:41,280
implement them in a serial way that if

479
00:17:41,280 --> 00:17:44,400
we only implement one instance of

480
00:17:44,400 --> 00:17:46,240
the x-box and we evaluate it

481
00:17:46,240 --> 00:17:47,840
sequentially

482
00:17:47,840 --> 00:17:50,720
so let's look at the first round so r0

483
00:17:50,720 --> 00:17:53,600
we take our first the data for first s

484
00:17:53,600 --> 00:17:55,840
box there

485
00:17:55,840 --> 00:17:58,240
so that we have the computation there at

486
00:17:58,240 --> 00:18:00,640
the next cycle we put a gray box that is

487
00:18:00,640 --> 00:18:02,880
we put an incentivisative state like

488
00:18:02,880 --> 00:18:04,960
useless computation

489
00:18:04,960 --> 00:18:07,039
and of course our state is known at the

490
00:18:07,039 --> 00:18:09,200
second stage of the pipeline

491
00:18:09,200 --> 00:18:11,760
now that we've cleaned the states the

492
00:18:11,760 --> 00:18:14,080
first stage of the pipeline we can go

493
00:18:14,080 --> 00:18:16,160
with the second test box

494
00:18:16,160 --> 00:18:18,160
and the pipeline bubble propagates so

495
00:18:18,160 --> 00:18:20,240
that we don't have a transition between

496
00:18:20,240 --> 00:18:22,559
sensitive state there

497
00:18:22,559 --> 00:18:25,520
and so on and so on we can do for it for

498
00:18:25,520 --> 00:18:28,880
the all three s-boxes we put again an

499
00:18:28,880 --> 00:18:31,039
empty cycle and we can go on from the

500
00:18:31,039 --> 00:18:33,120
second round

501
00:18:33,120 --> 00:18:36,320
so as you can see every other cycle

502
00:18:36,320 --> 00:18:37,600
we just put

503
00:18:37,600 --> 00:18:40,400
useless data in this so this costs us a

504
00:18:40,400 --> 00:18:43,280
factor of basically two in throughput

505
00:18:43,280 --> 00:18:46,640
but we don't need extra hardware

506
00:18:46,640 --> 00:18:49,440
so that's basic solution and then we

507
00:18:49,440 --> 00:18:51,840
investigated an alternative

508
00:18:51,840 --> 00:18:54,799
which is to amortize those bubbles

509
00:18:54,799 --> 00:18:57,039
in order to improve the throughput

510
00:18:57,039 --> 00:18:59,760
so the core idea for this is the

511
00:18:59,760 --> 00:19:02,080
original observation that

512
00:19:02,080 --> 00:19:04,160
this parallel piney transition

513
00:19:04,160 --> 00:19:07,120
robustness is still sometimes okay you

514
00:19:07,120 --> 00:19:09,840
sometimes don't need oppini to compose

515
00:19:09,840 --> 00:19:11,840
and this is the specific case where you

516
00:19:11,840 --> 00:19:13,840
have parallel composition

517
00:19:13,840 --> 00:19:16,000
that is a new abstract arithmetic

518
00:19:16,000 --> 00:19:18,480
circuit when the two evaluations of the

519
00:19:18,480 --> 00:19:20,640
circuit are in parallel exactly like the

520
00:19:20,640 --> 00:19:24,000
s-box of an spn

521
00:19:24,000 --> 00:19:26,320
there if you have a transition extended

522
00:19:26,320 --> 00:19:28,320
probe between the two evaluations of the

523
00:19:28,320 --> 00:19:30,000
gadgets

524
00:19:30,000 --> 00:19:32,880
since those gadgets are very similar

525
00:19:32,880 --> 00:19:35,039
and you don't have an input output

526
00:19:35,039 --> 00:19:37,600
dependency between them

527
00:19:37,600 --> 00:19:38,880
you can show that this parallel

528
00:19:38,880 --> 00:19:41,600
composition is still a pioneer

529
00:19:41,600 --> 00:19:44,559
transition robust

530
00:19:44,880 --> 00:19:46,880
and therefore we can allow

531
00:19:46,880 --> 00:19:48,799
transition to a query between those two

532
00:19:48,799 --> 00:19:49,919
execution

533
00:19:49,919 --> 00:19:52,160
as long as they are in parallel if you

534
00:19:52,160 --> 00:19:53,760
go to next round

535
00:19:53,760 --> 00:19:56,720
you will need still a pipeline bubble so

536
00:19:56,720 --> 00:19:57,919
practically

537
00:19:57,919 --> 00:20:00,080
on our example this means that that we

538
00:20:00,080 --> 00:20:02,559
can directly feed in six consecutive

539
00:20:02,559 --> 00:20:05,280
cycles the three s-boxes

540
00:20:05,280 --> 00:20:07,039
and then only after that

541
00:20:07,039 --> 00:20:09,039
we need a pipeline bubble before going

542
00:20:09,039 --> 00:20:10,320
to the next

543
00:20:10,320 --> 00:20:12,720
block cipher round

544
00:20:12,720 --> 00:20:16,159
so this quite nicely amortizes

545
00:20:16,159 --> 00:20:18,080
and it's even better than that

546
00:20:18,080 --> 00:20:21,200
because usually if we take our examples

547
00:20:21,200 --> 00:20:24,240
of block ciphers

548
00:20:25,520 --> 00:20:27,200
we see that in order to evaluate the

549
00:20:27,200 --> 00:20:28,799
second round

550
00:20:28,799 --> 00:20:30,960
we need to have the output of the first

551
00:20:30,960 --> 00:20:32,320
round

552
00:20:32,320 --> 00:20:35,120
so we cannot move this back to the left

553
00:20:35,120 --> 00:20:37,280
it's just like dependent computational

554
00:20:37,280 --> 00:20:38,960
dependencies so you need anyway this

555
00:20:38,960 --> 00:20:40,559
pipeline bubble

556
00:20:40,559 --> 00:20:43,600
which means that uh basically previous

557
00:20:43,600 --> 00:20:45,520
architecture such that the one we built

558
00:20:45,520 --> 00:20:49,120
for the hpc paper already satisfies

559
00:20:49,120 --> 00:20:50,880
this bubble condition

560
00:20:50,880 --> 00:20:52,640
and this bubble is the kind of minimal

561
00:20:52,640 --> 00:20:55,600
cost that you will always have

562
00:20:55,600 --> 00:20:58,159
so we can have glitch plus transition

563
00:20:58,159 --> 00:21:00,880
robustness security

564
00:21:00,880 --> 00:21:03,039
as exactly the same cost actually the

565
00:21:03,039 --> 00:21:04,480
same circuit

566
00:21:04,480 --> 00:21:07,760
than the basic hpc that was only proven

567
00:21:07,760 --> 00:21:10,960
to be secure again glitch

568
00:21:10,960 --> 00:21:12,000
so

569
00:21:12,000 --> 00:21:14,480
basically the observation way works as

570
00:21:14,480 --> 00:21:16,799
long as you are in a kind of spn

571
00:21:16,799 --> 00:21:19,360
evaluation

572
00:21:19,919 --> 00:21:23,600
so summarizing on our results

573
00:21:23,600 --> 00:21:26,080
we have three basic proposals the

574
00:21:26,080 --> 00:21:28,080
opinion proposal the one where you put

575
00:21:28,080 --> 00:21:30,240
bubbles and you completely avoid

576
00:21:30,240 --> 00:21:32,720
transition between two sensitive states

577
00:21:32,720 --> 00:21:35,200
and the one where you amortize it

578
00:21:35,200 --> 00:21:37,360
so across a few criteria we can first

579
00:21:37,360 --> 00:21:38,880
look at genericity

580
00:21:38,880 --> 00:21:40,960
the first two opinion bubbles works for

581
00:21:40,960 --> 00:21:44,559
any circuit this amortized bubble

582
00:21:44,559 --> 00:21:46,960
you only gain in some specific circuits

583
00:21:46,960 --> 00:21:50,159
when you do money parallel evaluation

584
00:21:50,159 --> 00:21:52,960
then in terms of area randomness usage

585
00:21:52,960 --> 00:21:54,480
latency

586
00:21:54,480 --> 00:21:57,200
the bubble and amortizable do not cost

587
00:21:57,200 --> 00:22:00,080
more than a non-transitional robust case

588
00:22:00,080 --> 00:22:01,520
however

589
00:22:01,520 --> 00:22:04,400
they will cost more for the oppini case

590
00:22:04,400 --> 00:22:06,559
and finally in terms of throughput

591
00:22:06,559 --> 00:22:08,720
you don't pay

592
00:22:08,720 --> 00:22:11,600
except in this

593
00:22:11,600 --> 00:22:12,960
bubble case

594
00:22:12,960 --> 00:22:15,840
so as a conclusion when it applies this

595
00:22:15,840 --> 00:22:17,840
amortized bubble

596
00:22:17,840 --> 00:22:20,080
proposal seems to be the best of both

597
00:22:20,080 --> 00:22:22,480
worlds

598
00:22:23,039 --> 00:22:28,000
so if we concretely look at the cost now

599
00:22:28,000 --> 00:22:31,360
we look at the opening proposal the hpc1

600
00:22:31,360 --> 00:22:33,440
which is equivalent to these amortized

601
00:22:33,440 --> 00:22:34,480
bubbles

602
00:22:34,480 --> 00:22:36,880
and the dom allow cautionary notes on

603
00:22:36,880 --> 00:22:38,480
the dom

604
00:22:38,480 --> 00:22:39,600
we should know that this is not

605
00:22:39,600 --> 00:22:41,760
composable so at

606
00:22:41,760 --> 00:22:44,559
starting at some uh masking order you

607
00:22:44,559 --> 00:22:46,640
will start to get composition issues and

608
00:22:46,640 --> 00:22:49,760
then broken security so that's kind of

609
00:22:49,760 --> 00:22:51,760
just for reference but i wouldn't

610
00:22:51,760 --> 00:22:53,840
recommend to use it

611
00:22:53,840 --> 00:22:56,640
for real-world implementations

612
00:22:56,640 --> 00:22:58,320
so in terms of area we can see that

613
00:22:58,320 --> 00:23:01,120
opini and amortized bubble or hpc are

614
00:23:01,120 --> 00:23:03,120
very close to each other

615
00:23:03,120 --> 00:23:06,080
so the overhead of opini is quite

616
00:23:06,080 --> 00:23:09,039
moderate

617
00:23:09,039 --> 00:23:11,120
while we have a significant but not huge

618
00:23:11,120 --> 00:23:12,640
overheads

619
00:23:12,640 --> 00:23:14,080
compared to them

620
00:23:14,080 --> 00:23:16,080
and then in terms of randomness usage we

621
00:23:16,080 --> 00:23:17,919
can see that opening

622
00:23:17,919 --> 00:23:20,640
is a bit above the two order proposals

623
00:23:20,640 --> 00:23:23,200
finally looking at the latency we can

624
00:23:23,200 --> 00:23:24,000
see

625
00:23:24,000 --> 00:23:28,159
that opini has a quite steep overheads

626
00:23:28,159 --> 00:23:29,120
over

627
00:23:29,120 --> 00:23:30,799
the hpc

628
00:23:30,799 --> 00:23:32,640
which itself is a bit cost a bit more

629
00:23:32,640 --> 00:23:35,440
costly than dom

630
00:23:35,760 --> 00:23:39,600
so just questionary notes this is um

631
00:23:39,600 --> 00:23:41,600
only for current gadgets

632
00:23:41,600 --> 00:23:43,679
and in principle if we had to design for

633
00:23:43,679 --> 00:23:45,520
instance better or by negative those

634
00:23:45,520 --> 00:23:48,000
results could improve

635
00:23:48,000 --> 00:23:52,080
but that's the best that we have for now

636
00:23:52,720 --> 00:23:54,880
to conclude our main contribution is of

637
00:23:54,880 --> 00:23:56,640
set of probably secure glitch and

638
00:23:56,640 --> 00:23:58,400
transition robust

639
00:23:58,400 --> 00:24:01,679
masking scheme for adwords circuits that

640
00:24:01,679 --> 00:24:04,720
apply to existing masking skin in some

641
00:24:04,720 --> 00:24:06,559
condition and also

642
00:24:06,559 --> 00:24:10,080
for some new kind of gadgets

643
00:24:10,080 --> 00:24:12,559
natural feature work for

644
00:24:12,559 --> 00:24:13,679
work

645
00:24:13,679 --> 00:24:16,559
is to go on to automated verification of

646
00:24:16,559 --> 00:24:18,159
the properties required on the

647
00:24:18,159 --> 00:24:19,600
implementation

648
00:24:19,600 --> 00:24:21,200
i leave you with a list

649
00:24:21,200 --> 00:24:23,440
of topics that are in the paper and that

650
00:24:23,440 --> 00:24:25,360
i didn't have time to discuss here which

651
00:24:25,360 --> 00:24:26,559
is

652
00:24:26,559 --> 00:24:28,559
some kind of more sophisticated gadget

653
00:24:28,559 --> 00:24:30,000
you know they contain loop or they can

654
00:24:30,000 --> 00:24:32,559
be modified during the execution

655
00:24:32,559 --> 00:24:34,000
the discussion of gadgets for the

656
00:24:34,000 --> 00:24:36,480
transitionally and non-glitchy case

657
00:24:36,480 --> 00:24:37,760
and finally

658
00:24:37,760 --> 00:24:41,039
the construction for all of our gadgets

659
00:24:41,039 --> 00:24:42,799
thank you for your attention i'll be

660
00:24:42,799 --> 00:24:46,600
happy to answer any questions

