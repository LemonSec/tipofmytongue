1
00:00:01,979 --> 00:00:05,959
when when you're ready I can understand

2
00:00:13,799 --> 00:00:16,260
so good morning everybody we're only

3
00:00:16,260 --> 00:00:19,920
eight minutes late that's great I think

4
00:00:19,920 --> 00:00:21,500
um my name is

5
00:00:21,500 --> 00:00:25,140
happy to share this first session of

6
00:00:25,140 --> 00:00:29,160
Chess 2022 track number one which is

7
00:00:29,160 --> 00:00:30,480
about

8
00:00:30,480 --> 00:00:32,700
so it's for site Channel analysis and

9
00:00:32,700 --> 00:00:34,920
crypt analysis so I suggest that we

10
00:00:34,920 --> 00:00:37,920
begin with the first paper

11
00:00:37,920 --> 00:00:40,140
um entitled semi-automatic locating of

12
00:00:40,140 --> 00:00:42,180
cryptographic operations inside Channel

13
00:00:42,180 --> 00:00:45,120
traces the talk will be given in a video

14
00:00:45,120 --> 00:00:47,760
format that is provided by the speaker

15
00:00:47,760 --> 00:00:51,000
James Troutman that will be a will be

16
00:00:51,000 --> 00:00:52,920
available online to answer your

17
00:00:52,920 --> 00:00:54,300
questions later

18
00:00:54,300 --> 00:00:57,078
so let's go

19
00:00:59,039 --> 00:01:01,260
hello my name is Ian strachman I'm from

20
00:01:01,260 --> 00:01:04,739
the FAU nelberg Germany and together in

21
00:01:04,739 --> 00:01:07,080
cooperation with the KU live I want to

22
00:01:07,080 --> 00:01:09,840
present you our topic which is the

23
00:01:09,840 --> 00:01:12,119
semi-automatic location of cryptographic

24
00:01:12,119 --> 00:01:14,460
operations in sectional traces It's

25
00:01:14,460 --> 00:01:16,200
Quickly start with the motivation so

26
00:01:16,200 --> 00:01:17,820
there are several sectional attacks that

27
00:01:17,820 --> 00:01:20,280
work on real world devices for example

28
00:01:20,280 --> 00:01:22,740
on iPhones single board computers iot

29
00:01:22,740 --> 00:01:24,840
devices and the goals of all of those

30
00:01:24,840 --> 00:01:27,240
attacks are that we want to retrieve

31
00:01:27,240 --> 00:01:30,060
keys or implementation details and the

32
00:01:30,060 --> 00:01:31,979
requirements are always that we have

33
00:01:31,979 --> 00:01:34,740
some recording of the side channel here

34
00:01:34,740 --> 00:01:37,020
we have a recording of an AES and we

35
00:01:37,020 --> 00:01:39,659
also want to have an Associated plain

36
00:01:39,659 --> 00:01:41,640
text or ciphertext and then an easy

37
00:01:41,640 --> 00:01:44,520
example for an attack scheme is that we

38
00:01:44,520 --> 00:01:47,040
could use correlation paralysis where we

39
00:01:47,040 --> 00:01:49,619
correlate the Heming weight of for

40
00:01:49,619 --> 00:01:51,840
example here the first plaintext byte

41
00:01:51,840 --> 00:01:54,240
with every single point in all of those

42
00:01:54,240 --> 00:01:57,960
traces and if it correlates with the

43
00:01:57,960 --> 00:02:00,060
power usage then we know where the plain

44
00:02:00,060 --> 00:02:02,399
text was used of course this can only

45
00:02:02,399 --> 00:02:05,880
also be used with intermediate values of

46
00:02:05,880 --> 00:02:08,160
the cryptographic operation and then we

47
00:02:08,160 --> 00:02:11,520
can also get the key from this what is

48
00:02:11,520 --> 00:02:13,020
the most important thing here is that

49
00:02:13,020 --> 00:02:15,239
all of those traces need to be aligned

50
00:02:15,239 --> 00:02:17,220
so they need to start at the same point

51
00:02:17,220 --> 00:02:20,459
in time and therefore we need to exactly

52
00:02:20,459 --> 00:02:22,920
know where they start and where they end

53
00:02:22,920 --> 00:02:25,200
so we can align them

54
00:02:25,200 --> 00:02:28,500
in the real world if we have a device

55
00:02:28,500 --> 00:02:31,020
under test here and an em probe that

56
00:02:31,020 --> 00:02:33,840
transfers its electromagnetic signal to

57
00:02:33,840 --> 00:02:36,480
a digitizer oscilloscope that can then

58
00:02:36,480 --> 00:02:39,900
put this onto a PC we get such a data

59
00:02:39,900 --> 00:02:41,580
stream and the problem is that we don't

60
00:02:41,580 --> 00:02:43,260
really know where those starting points

61
00:02:43,260 --> 00:02:45,840
are that we definitely need for any kind

62
00:02:45,840 --> 00:02:46,980
of attack

63
00:02:46,980 --> 00:02:49,319
and one remedy for this is for example

64
00:02:49,319 --> 00:02:51,300
this trigger box that was presented by

65
00:02:51,300 --> 00:02:52,620
backers that are

66
00:02:52,620 --> 00:02:55,860
in 2016 and what this does is that we

67
00:02:55,860 --> 00:02:58,019
can compare a previously obtained

68
00:02:58,019 --> 00:03:00,599
waveform template and this is the

69
00:03:00,599 --> 00:03:02,400
template pattern of a cryptographic

70
00:03:02,400 --> 00:03:05,280
operation or the prologue of one and we

71
00:03:05,280 --> 00:03:07,980
will compare the incoming data stream to

72
00:03:07,980 --> 00:03:09,599
this template and if it is similar

73
00:03:09,599 --> 00:03:11,280
enough we know that a cryptographic

74
00:03:11,280 --> 00:03:13,860
operation is happening on the trace and

75
00:03:13,860 --> 00:03:17,400
then we can get single traces of each

76
00:03:17,400 --> 00:03:18,959
and every of those cryptographic

77
00:03:18,959 --> 00:03:20,940
operations here marked by those blue

78
00:03:20,940 --> 00:03:24,300
lines to the control PC which then can

79
00:03:24,300 --> 00:03:27,540
do the attack afterwards but you have to

80
00:03:27,540 --> 00:03:29,519
have such a waveform template up front

81
00:03:29,519 --> 00:03:31,739
which is why an evaluator has to go

82
00:03:31,739 --> 00:03:34,440
through such a large trace and find one

83
00:03:34,440 --> 00:03:36,120
occurrence of a cryptographic operation

84
00:03:36,120 --> 00:03:39,480
that can then be used as a template but

85
00:03:39,480 --> 00:03:41,760
this going through the trace and finding

86
00:03:41,760 --> 00:03:43,980
this pattern can be a pretty tedious

87
00:03:43,980 --> 00:03:46,140
task which is why we wanted to automate

88
00:03:46,140 --> 00:03:48,659
this and let's first go over the high

89
00:03:48,659 --> 00:03:51,239
level overview of this method so first

90
00:03:51,239 --> 00:03:54,060
we want to identify one cryptographic

91
00:03:54,060 --> 00:03:56,819
operation in a larger side Channel Trace

92
00:03:56,819 --> 00:04:00,180
so here I have one example of an aes128

93
00:04:00,180 --> 00:04:03,000
and we will only focus on round-based

94
00:04:03,000 --> 00:04:05,879
ciphers as here we can find patterns

95
00:04:05,879 --> 00:04:08,340
that are characteristic to those so here

96
00:04:08,340 --> 00:04:11,879
for AES 128 we have 10 rounds and nine

97
00:04:11,879 --> 00:04:14,099
of those rounds have the exact same

98
00:04:14,099 --> 00:04:16,139
operations but with different data and

99
00:04:16,139 --> 00:04:17,639
this also shows in the side Channel

100
00:04:17,639 --> 00:04:20,279
Trace so here we have nine rounds that

101
00:04:20,279 --> 00:04:22,620
look similar to each other at the

102
00:04:22,620 --> 00:04:24,840
starting index I and an evaluator would

103
00:04:24,840 --> 00:04:27,120
go through and find this recurring

104
00:04:27,120 --> 00:04:29,160
pattern and say okay at this starting

105
00:04:29,160 --> 00:04:31,560
point a cryptographic operation should

106
00:04:31,560 --> 00:04:32,820
start because there are those

107
00:04:32,820 --> 00:04:35,040
reoccurring rounds and we want to do

108
00:04:35,040 --> 00:04:37,560
exactly that but automate it so we will

109
00:04:37,560 --> 00:04:39,300
go through every index and then

110
00:04:39,300 --> 00:04:40,979
calculate the similarity and the more

111
00:04:40,979 --> 00:04:42,960
similar those rounds are the more

112
00:04:42,960 --> 00:04:45,240
probable this is the start of one

113
00:04:45,240 --> 00:04:47,759
cryptographic operation afterwards we

114
00:04:47,759 --> 00:04:49,560
will generate SEO template from that

115
00:04:49,560 --> 00:04:51,600
starting index and then use this Co

116
00:04:51,600 --> 00:04:53,880
template like in the slide before to

117
00:04:53,880 --> 00:04:55,919
find all the trace segments which

118
00:04:55,919 --> 00:04:58,020
correspond to other occurrences of the

119
00:04:58,020 --> 00:04:59,940
same cryptographic operation but of

120
00:04:59,940 --> 00:05:02,160
course with different data and if we

121
00:05:02,160 --> 00:05:04,020
have all of those starting points we can

122
00:05:04,020 --> 00:05:07,020
even refine the co template to get rid

123
00:05:07,020 --> 00:05:08,820
of the noise but this is optional and

124
00:05:08,820 --> 00:05:10,860
only needed if we have a lot of noise on

125
00:05:10,860 --> 00:05:13,320
our traces let's go a little bit deeper

126
00:05:13,320 --> 00:05:16,500
into this method and to see how can we

127
00:05:16,500 --> 00:05:18,780
calculate the similarity between the

128
00:05:18,780 --> 00:05:21,360
rounds algorithmically if we know the

129
00:05:21,360 --> 00:05:23,460
round pattern length w

130
00:05:23,460 --> 00:05:26,580
so we will go through each index in this

131
00:05:26,580 --> 00:05:29,460
Trace T and for all starting points we

132
00:05:29,460 --> 00:05:32,580
will dissect this Trace part into the

133
00:05:32,580 --> 00:05:34,259
different chunks that are then the

134
00:05:34,259 --> 00:05:37,560
rounds or the potential roots and those

135
00:05:37,560 --> 00:05:42,060
all have the same round length W and we

136
00:05:42,060 --> 00:05:44,280
will use an average of those we can see

137
00:05:44,280 --> 00:05:46,919
here in dark blue and calculate the

138
00:05:46,919 --> 00:05:49,800
similarity between this average round

139
00:05:49,800 --> 00:05:52,979
template to all of those different

140
00:05:52,979 --> 00:05:55,020
rounds that we made this average round

141
00:05:55,020 --> 00:05:58,139
template off and if we have then the

142
00:05:58,139 --> 00:05:59,940
highest similarity because we do this

143
00:05:59,940 --> 00:06:02,639
for every Chase trace index we will then

144
00:06:02,639 --> 00:06:05,100
use the highest similarity index as a

145
00:06:05,100 --> 00:06:06,720
starting point of the cryptographic

146
00:06:06,720 --> 00:06:09,600
operation and then use this highest

147
00:06:09,600 --> 00:06:11,460
starting point to create a serum

148
00:06:11,460 --> 00:06:13,740
template and then find all other

149
00:06:13,740 --> 00:06:15,660
occurrences of this cryptographic

150
00:06:15,660 --> 00:06:16,979
operation

151
00:06:16,979 --> 00:06:20,699
to do this on an example we can see here

152
00:06:20,699 --> 00:06:23,039
a black Trace that is our power trace

153
00:06:23,039 --> 00:06:25,919
and then we have the green line up here

154
00:06:25,919 --> 00:06:27,660
which is the trigger Trace which shows

155
00:06:27,660 --> 00:06:30,060
us where the cryptographic operations

156
00:06:30,060 --> 00:06:31,979
are of course we didn't give this

157
00:06:31,979 --> 00:06:34,680
trigger Chase to the tool and if we now

158
00:06:34,680 --> 00:06:37,440
look at One Good Start index remind

159
00:06:37,440 --> 00:06:39,360
yourself we do this for every single

160
00:06:39,360 --> 00:06:41,539
starting point here we will again

161
00:06:41,539 --> 00:06:43,740
calculate the average round template and

162
00:06:43,740 --> 00:06:45,240
then calculate the similarity between

163
00:06:45,240 --> 00:06:47,580
all of those rounds and then we can also

164
00:06:47,580 --> 00:06:49,500
do this for a bad starting point as we

165
00:06:49,500 --> 00:06:52,560
have to do it for any point anyway we

166
00:06:52,560 --> 00:06:55,380
can see here the dark blue color is the

167
00:06:55,380 --> 00:06:57,240
average round template and this is not

168
00:06:57,240 --> 00:06:59,280
similar to all the colorful lines that

169
00:06:59,280 --> 00:07:01,500
can be seen here also

170
00:07:01,500 --> 00:07:03,539
and if we then calculate the similarity

171
00:07:03,539 --> 00:07:06,180
we will see that there are certain Peaks

172
00:07:06,180 --> 00:07:09,600
and especially the highest one here with

173
00:07:09,600 --> 00:07:12,600
a similarity of 0.85 which here

174
00:07:12,600 --> 00:07:15,419
corresponds to correlation you you could

175
00:07:15,419 --> 00:07:17,819
also use some of absolute differences

176
00:07:17,819 --> 00:07:20,099
and this highest point we will use for a

177
00:07:20,099 --> 00:07:22,139
new Co template that we will then

178
00:07:22,139 --> 00:07:24,419
correlate or calculate the similarity

179
00:07:24,419 --> 00:07:27,300
over the entire trace and here the bad

180
00:07:27,300 --> 00:07:29,599
starting point amounts to a quality of

181
00:07:29,599 --> 00:07:33,360
0.37 which is really low and will be not

182
00:07:33,360 --> 00:07:36,180
considered as a CO template so if we

183
00:07:36,180 --> 00:07:38,580
take this nice co template and correlate

184
00:07:38,580 --> 00:07:40,800
it over the entire Trace we will find

185
00:07:40,800 --> 00:07:43,680
very distinct points here which I marked

186
00:07:43,680 --> 00:07:45,720
with the green triangles and those

187
00:07:45,720 --> 00:07:47,759
points are exactly the starting points

188
00:07:47,759 --> 00:07:50,580
of every single Co but the problem here

189
00:07:50,580 --> 00:07:54,000
is that we supposedly know the round

190
00:07:54,000 --> 00:07:57,360
length pattern but what if we don't well

191
00:07:57,360 --> 00:08:00,539
then we could go through all reasonable

192
00:08:00,539 --> 00:08:03,660
widths W that we can calculate and

193
00:08:03,660 --> 00:08:06,900
determine as we did before seon template

194
00:08:06,900 --> 00:08:09,000
for this width and then also calculate

195
00:08:09,000 --> 00:08:11,639
the similarity between this Co template

196
00:08:11,639 --> 00:08:14,400
and our entire Trace but to do this we

197
00:08:14,400 --> 00:08:16,979
have certain requirements that are also

198
00:08:16,979 --> 00:08:20,220
valid for if we know the round length w

199
00:08:20,220 --> 00:08:22,800
we need to know the trace and the

200
00:08:22,800 --> 00:08:25,020
sampling rate we recorded it at we also

201
00:08:25,020 --> 00:08:27,479
need to know the device clock frequency

202
00:08:27,479 --> 00:08:29,460
so the frequency of the device otherwise

203
00:08:29,460 --> 00:08:32,640
we can't really get different widths or

204
00:08:32,640 --> 00:08:34,919
possible widths because we need to find

205
00:08:34,919 --> 00:08:37,740
out how many samples one clock cycle has

206
00:08:37,740 --> 00:08:39,839
and then we also need to know the number

207
00:08:39,839 --> 00:08:42,599
R of successive and identical rounds

208
00:08:42,599 --> 00:08:44,159
that are part of this cryptographic

209
00:08:44,159 --> 00:08:46,260
operation and what we can then do for

210
00:08:46,260 --> 00:08:48,600
all of those with this filter the

211
00:08:48,600 --> 00:08:51,720
correct without by checking out how many

212
00:08:51,720 --> 00:08:53,940
possible starting points there are and

213
00:08:53,940 --> 00:08:55,380
we can do this based on the shape of

214
00:08:55,380 --> 00:08:57,480
similar machine that we will see in on

215
00:08:57,480 --> 00:08:59,700
the next slide and if this number of

216
00:08:59,700 --> 00:09:01,380
possible starting points that we found

217
00:09:01,380 --> 00:09:03,959
is equal to the number of cryptographic

218
00:09:03,959 --> 00:09:06,180
operations in the trace we can say that

219
00:09:06,180 --> 00:09:08,940
this might be a reasonable or a possible

220
00:09:08,940 --> 00:09:12,060
width that we can use further on and

221
00:09:12,060 --> 00:09:13,920
this of course has the requirement that

222
00:09:13,920 --> 00:09:15,839
we need to have a known number of

223
00:09:15,839 --> 00:09:18,360
cryptographic operations in this Trace

224
00:09:18,360 --> 00:09:20,459
which is then n so this is our new

225
00:09:20,459 --> 00:09:23,459
requirement if we don't know the width w

226
00:09:23,459 --> 00:09:27,180
so let's go how can we find out if one

227
00:09:27,180 --> 00:09:28,800
starting point is actually a starting

228
00:09:28,800 --> 00:09:31,080
point of the co here in Gray we have the

229
00:09:31,080 --> 00:09:33,839
trace and the green lines here are the

230
00:09:33,839 --> 00:09:35,580
starting points of one cryptographic

231
00:09:35,580 --> 00:09:37,920
operation which is not a knowledge of

232
00:09:37,920 --> 00:09:40,019
the tools apparently and then we already

233
00:09:40,019 --> 00:09:42,600
completed the first step where we found

234
00:09:42,600 --> 00:09:46,500
a potential Co template now we calculate

235
00:09:46,500 --> 00:09:48,899
the similarity of this template over the

236
00:09:48,899 --> 00:09:51,120
entire trace and what we can see here is

237
00:09:51,120 --> 00:09:54,660
the similarity curve as the Maxima don't

238
00:09:54,660 --> 00:09:57,000
really line up with the starting points

239
00:09:57,000 --> 00:09:59,700
we have to filter this so there's a

240
00:09:59,700 --> 00:10:02,839
moving average filter here which is

241
00:10:02,839 --> 00:10:06,180
parameterized based on the round width W

242
00:10:06,180 --> 00:10:08,399
so we don't have to do this every time

243
00:10:08,399 --> 00:10:11,339
and it is automatically parametrized and

244
00:10:11,339 --> 00:10:13,200
then we can see that the starting point

245
00:10:13,200 --> 00:10:15,899
marked in green line up well with the

246
00:10:15,899 --> 00:10:17,940
highest points of the similarity filter

247
00:10:17,940 --> 00:10:20,160
similarity curve if we now look at one

248
00:10:20,160 --> 00:10:22,980
specific point here we can see that

249
00:10:22,980 --> 00:10:25,920
there is one High maximum and then there

250
00:10:25,920 --> 00:10:28,680
are several lower Maxima here and we

251
00:10:28,680 --> 00:10:30,720
call the main one main Peak and then we

252
00:10:30,720 --> 00:10:33,300
have sub Peaks behind that and this

253
00:10:33,300 --> 00:10:35,820
structure this shape here occurs because

254
00:10:35,820 --> 00:10:38,640
we first match all of the nine similar

255
00:10:38,640 --> 00:10:40,740
rounds because this is AES and we have

256
00:10:40,740 --> 00:10:43,080
nine similar rounds in this trace and

257
00:10:43,080 --> 00:10:46,200
then we have the sub Peaks that match

258
00:10:46,200 --> 00:10:48,600
eight rounds here and then only seven

259
00:10:48,600 --> 00:10:50,940
rounds will match then six and so on and

260
00:10:50,940 --> 00:10:53,339
so forth and because of this shape we

261
00:10:53,339 --> 00:10:56,220
can calculate the number of sub Peaks

262
00:10:56,220 --> 00:10:59,279
behind each main Peak that is in the

263
00:10:59,279 --> 00:11:03,300
width W distance to the main Peak and we

264
00:11:03,300 --> 00:11:05,700
use this as a characteristic to say if

265
00:11:05,700 --> 00:11:07,620
one Peak is actually a start of the

266
00:11:07,620 --> 00:11:09,959
cryptographic operation so we check out

267
00:11:09,959 --> 00:11:11,820
the number of sub Peaks for each main

268
00:11:11,820 --> 00:11:15,060
Peak and then find out how many possible

269
00:11:15,060 --> 00:11:16,800
cryptographic operations are there on

270
00:11:16,800 --> 00:11:18,959
the trace if this was a little bit too

271
00:11:18,959 --> 00:11:22,140
fast you can look at the paper and see

272
00:11:22,140 --> 00:11:24,480
for yourself how this works so we did a

273
00:11:24,480 --> 00:11:26,940
proof of concept with multiple different

274
00:11:26,940 --> 00:11:28,800
systems and I will just briefly show

275
00:11:28,800 --> 00:11:31,680
some of them the tiny AES on the arm

276
00:11:31,680 --> 00:11:34,140
cortex M4 was a pretty easy target you

277
00:11:34,140 --> 00:11:36,360
can see here a cutout of the tray so

278
00:11:36,360 --> 00:11:38,339
this is only part of the trace the green

279
00:11:38,339 --> 00:11:40,140
is the trigger Trace that we didn't give

280
00:11:40,140 --> 00:11:42,779
to the tool and then the tool found this

281
00:11:42,779 --> 00:11:44,940
template here for example and the

282
00:11:44,940 --> 00:11:47,519
starting points that were 100 accurate

283
00:11:47,519 --> 00:11:49,680
meaning that the starting point that we

284
00:11:49,680 --> 00:11:52,019
found is no further than the length of

285
00:11:52,019 --> 00:11:53,820
one cryptographic operation in either

286
00:11:53,820 --> 00:11:56,820
direction away from the actual starting

287
00:11:56,820 --> 00:11:58,980
point and we also tracked this with the

288
00:11:58,980 --> 00:12:00,899
hardware AES this is on the same

289
00:12:00,899 --> 00:12:03,480
platform but with the hardware AES and

290
00:12:03,480 --> 00:12:05,519
then a more difficult Target is the arm

291
00:12:05,519 --> 00:12:07,680
cortex A8 which is clocked at one

292
00:12:07,680 --> 00:12:09,180
gigahertz and is located on the

293
00:12:09,180 --> 00:12:11,339
beaglebone black which runs Linux and we

294
00:12:11,339 --> 00:12:14,760
executed openss Las 128 on it and you

295
00:12:14,760 --> 00:12:17,279
can see here one execution of that and

296
00:12:17,279 --> 00:12:20,160
the template that we found is this here

297
00:12:20,160 --> 00:12:21,779
and here you can really see the round

298
00:12:21,779 --> 00:12:24,240
structure of the different rounds and

299
00:12:24,240 --> 00:12:25,980
then the last round looks a little bit

300
00:12:25,980 --> 00:12:29,220
different more is interestingly we also

301
00:12:29,220 --> 00:12:31,140
looked at the arm cortex M4 but this

302
00:12:31,140 --> 00:12:33,480
time a different model with embed TLS

303
00:12:33,480 --> 00:12:36,420
and Char and not AES which is also round

304
00:12:36,420 --> 00:12:41,040
based and has 64 rounds but we recorded

305
00:12:41,040 --> 00:12:42,899
it one time with an external clock and

306
00:12:42,899 --> 00:12:44,940
one time with an internal clock at the

307
00:12:44,940 --> 00:12:46,860
external clock was synchronized with the

308
00:12:46,860 --> 00:12:48,660
oscilloscopes who have really nice

309
00:12:48,660 --> 00:12:51,120
recordings but the internal one has also

310
00:12:51,120 --> 00:12:52,800
a little bit of clock drift which made

311
00:12:52,800 --> 00:12:55,079
the recordings a little bit more

312
00:12:55,079 --> 00:12:57,959
difficult to for the tool to extract and

313
00:12:57,959 --> 00:13:00,600
here we chose the first 16 rounds to

314
00:13:00,600 --> 00:13:03,779
compare and to find and we found all of

315
00:13:03,779 --> 00:13:06,240
the starting points after refinement

316
00:13:06,240 --> 00:13:09,060
with 100 accuracy for the internal clock

317
00:13:09,060 --> 00:13:10,980
and for the external clock we find them

318
00:13:10,980 --> 00:13:14,940
right away and with embed TLS AES 128 on

319
00:13:14,940 --> 00:13:16,800
the same Target also with an internal

320
00:13:16,800 --> 00:13:18,959
and external clock we also find all of

321
00:13:18,959 --> 00:13:21,000
the starting points and for the internal

322
00:13:21,000 --> 00:13:23,100
one again we needed some refinement to

323
00:13:23,100 --> 00:13:27,360
find all of that them with 100 accuracy

324
00:13:27,360 --> 00:13:30,060
to show that all of the starting points

325
00:13:30,060 --> 00:13:33,420
are really accurately found we created a

326
00:13:33,420 --> 00:13:36,000
toy yet realistic example on the arm

327
00:13:36,000 --> 00:13:39,660
cortex M4 microcontroller and we

328
00:13:39,660 --> 00:13:41,700
simulated that we would have a boot

329
00:13:41,700 --> 00:13:44,279
content with eight kilobytes that is

330
00:13:44,279 --> 00:13:46,680
encrypted and is shifted from the

331
00:13:46,680 --> 00:13:49,500
non-volatile memory and it is hashed and

332
00:13:49,500 --> 00:13:51,540
then we have a signature check and we

333
00:13:51,540 --> 00:13:54,300
have those 500 decryptions so because of

334
00:13:54,300 --> 00:13:57,180
the signature check we can't change the

335
00:13:57,180 --> 00:13:59,220
ciphertext that goes into the decryption

336
00:13:59,220 --> 00:14:02,639
so we need to use what we got from here

337
00:14:02,639 --> 00:14:04,740
so the attacker capabilities is that we

338
00:14:04,740 --> 00:14:06,480
can read out the boot image from the

339
00:14:06,480 --> 00:14:08,579
non-volatile memory we have the

340
00:14:08,579 --> 00:14:09,959
knowledge of the different boot stages

341
00:14:09,959 --> 00:14:12,839
and we also know that there is aes128

342
00:14:12,839 --> 00:14:13,980
running

343
00:14:13,980 --> 00:14:16,560
also we can record the Power Trace of

344
00:14:16,560 --> 00:14:18,959
the entire boot process which ends up

345
00:14:18,959 --> 00:14:22,560
being 250 million samples and for

346
00:14:22,560 --> 00:14:25,139
convenience I noted here where the

347
00:14:25,139 --> 00:14:26,760
different parts take place so we have

348
00:14:26,760 --> 00:14:28,680
hashing here then the signature check

349
00:14:28,680 --> 00:14:31,740
and then the 500 CBC decryptions and of

350
00:14:31,740 --> 00:14:34,320
course we can use CPA to attack this but

351
00:14:34,320 --> 00:14:36,660
for this we need to know exactly where

352
00:14:36,660 --> 00:14:39,720
those 500 ads decryptions take place in

353
00:14:39,720 --> 00:14:42,420
order to align them and we wanted to use

354
00:14:42,420 --> 00:14:45,660
the tool for that so we gave the

355
00:14:45,660 --> 00:14:48,060
Trace to the tool and we extracted all

356
00:14:48,060 --> 00:14:49,800
of the 500 ciphertext from the

357
00:14:49,800 --> 00:14:52,740
non-volent time memory we evaluated then

358
00:14:52,740 --> 00:14:54,779
40 different widths and the two

359
00:14:54,779 --> 00:14:56,880
considered 3 is plausible and we can

360
00:14:56,880 --> 00:14:59,459
select one after looking at the template

361
00:14:59,459 --> 00:15:01,320
that the two produced and also at the

362
00:15:01,320 --> 00:15:04,260
found starting points and if we use then

363
00:15:04,260 --> 00:15:07,199
all of the starting points to create a

364
00:15:07,199 --> 00:15:08,100
Trace

365
00:15:08,100 --> 00:15:10,740
for each found starting point we can

366
00:15:10,740 --> 00:15:12,600
then associate that with the ciphertext

367
00:15:12,600 --> 00:15:14,399
that we found on the non-verbial time

368
00:15:14,399 --> 00:15:17,339
memory and then use CPA directly on this

369
00:15:17,339 --> 00:15:19,980
data without any further post-processing

370
00:15:19,980 --> 00:15:23,459
or alignment of those found traces

371
00:15:23,459 --> 00:15:25,860
and full key recovery with those traces

372
00:15:25,860 --> 00:15:28,860
is possible after only 200 and the

373
00:15:28,860 --> 00:15:31,260
unsupervised analysis that we tested

374
00:15:31,260 --> 00:15:33,660
here the 40 different widths took two

375
00:15:33,660 --> 00:15:35,579
hours and selecting the best candidate

376
00:15:35,579 --> 00:15:37,980
and doing the attack actually only took

377
00:15:37,980 --> 00:15:40,680
a few minutes and this here is the part

378
00:15:40,680 --> 00:15:43,380
then that an analyst has to do and the

379
00:15:43,380 --> 00:15:46,139
other part can be done unsupervised so

380
00:15:46,139 --> 00:15:49,560
we cut down the part of the analyst

381
00:15:49,560 --> 00:15:51,360
um quite heavily

382
00:15:51,360 --> 00:15:54,240
so to summarize we presented now our

383
00:15:54,240 --> 00:15:56,399
semi-automatic algorithm that can find

384
00:15:56,399 --> 00:15:59,519
COS in large side Channel traces at the

385
00:15:59,519 --> 00:16:01,800
partly unsupervised analysis helps to

386
00:16:01,800 --> 00:16:03,959
search through very large traces without

387
00:16:03,959 --> 00:16:06,899
a lot of effort the functionality is

388
00:16:06,899 --> 00:16:09,060
based on meta information meaning the

389
00:16:09,060 --> 00:16:10,680
number of cryptographic operations in

390
00:16:10,680 --> 00:16:12,959
the trace the number of successive and

391
00:16:12,959 --> 00:16:15,180
identical rounds are and the device

392
00:16:15,180 --> 00:16:16,620
frequency

393
00:16:16,620 --> 00:16:19,260
but we don't really need a template as

394
00:16:19,260 --> 00:16:21,420
we have in other approaches which means

395
00:16:21,420 --> 00:16:23,160
that if we want to re-evaluate the

396
00:16:23,160 --> 00:16:26,100
device we don't need to record a new

397
00:16:26,100 --> 00:16:28,500
template because we can just use the

398
00:16:28,500 --> 00:16:30,420
same meta information and still find the

399
00:16:30,420 --> 00:16:33,120
cryptographic operations limitations are

400
00:16:33,120 --> 00:16:35,459
of course random delays unstable clock

401
00:16:35,459 --> 00:16:38,040
frequency some dummy rounds that gets

402
00:16:38,040 --> 00:16:39,959
inserted into

403
00:16:39,959 --> 00:16:42,480
um into the into the implementation so

404
00:16:42,480 --> 00:16:44,100
everything that messes with the round

405
00:16:44,100 --> 00:16:46,920
structure our implementation utilizes

406
00:16:46,920 --> 00:16:49,139
parallel GPU computation which means

407
00:16:49,139 --> 00:16:51,360
that we are highly scalable and we can

408
00:16:51,360 --> 00:16:54,720
also utilize data centers for example to

409
00:16:54,720 --> 00:16:58,019
really speed up the process also the

410
00:16:58,019 --> 00:16:59,820
open source implementation and the chess

411
00:16:59,820 --> 00:17:02,279
artifact is available and we further

412
00:17:02,279 --> 00:17:05,160
also have some jupyter notebooks which

413
00:17:05,160 --> 00:17:08,280
can interactively show you all the steps

414
00:17:08,280 --> 00:17:10,199
I just showed you and you can also

415
00:17:10,199 --> 00:17:12,660
access that under the link of this

416
00:17:12,660 --> 00:17:14,880
artifact for future work we have related

417
00:17:14,880 --> 00:17:17,760
this technique and method on different

418
00:17:17,760 --> 00:17:20,880
architectures especially fpgas and

419
00:17:20,880 --> 00:17:23,099
looked at the success rate that we could

420
00:17:23,099 --> 00:17:26,939
have if we have noisier recordings of

421
00:17:26,939 --> 00:17:30,600
fpgas and this was published at the fccm

422
00:17:30,600 --> 00:17:32,760
this year so this was everything from me

423
00:17:32,760 --> 00:17:34,620
thank you for your attention do you have

424
00:17:34,620 --> 00:17:36,900
any questions you can always write me an

425
00:17:36,900 --> 00:17:39,240
email or ask right now thank you very

426
00:17:39,240 --> 00:17:41,419
much

427
00:17:46,200 --> 00:17:49,380
so thank you gents for the nice talk

428
00:17:49,380 --> 00:17:52,380
is there is time for a question I didn't

429
00:17:52,380 --> 00:17:56,120
see any question in the chats

430
00:17:56,520 --> 00:17:59,580
any question in the room

431
00:17:59,580 --> 00:18:01,559
this is the shyness of the first paper

432
00:18:01,559 --> 00:18:05,460
so I guess I can ask you my questions

433
00:18:05,460 --> 00:18:09,360
so James we can maybe look at him

434
00:18:09,360 --> 00:18:11,520
yes

435
00:18:11,520 --> 00:18:14,520
so your tool is semi-automatic in the

436
00:18:14,520 --> 00:18:16,260
sense that some interactions with the

437
00:18:16,260 --> 00:18:19,799
users are necessary so I wonder how many

438
00:18:19,799 --> 00:18:23,100
interaction one may expect

439
00:18:23,100 --> 00:18:27,660
so uh thank you um you can hear me well

440
00:18:27,660 --> 00:18:30,059
yeah we hear you yeah nice nice

441
00:18:30,059 --> 00:18:32,120
um

442
00:18:33,299 --> 00:18:36,120
so the inter the interaction is uh

443
00:18:36,120 --> 00:18:37,740
limited to the beginning and the end

444
00:18:37,740 --> 00:18:39,720
right so you can try out the different

445
00:18:39,720 --> 00:18:42,360
widths um automatically But first you

446
00:18:42,360 --> 00:18:44,220
have to put in all the information that

447
00:18:44,220 --> 00:18:45,419
the tool needs right the different

448
00:18:45,419 --> 00:18:46,980
widths that you want to test at the

449
00:18:46,980 --> 00:18:49,559
trace and configure it everything and

450
00:18:49,559 --> 00:18:51,120
then at the end you

451
00:18:51,120 --> 00:18:53,220
um again as we showed in our secure boot

452
00:18:53,220 --> 00:18:54,360
example

453
00:18:54,360 --> 00:18:56,640
um have to get the correct width out of

454
00:18:56,640 --> 00:18:58,679
the candidate it's selected

455
00:18:58,679 --> 00:19:01,260
um and then use that so there is just

456
00:19:01,260 --> 00:19:03,660
interactions at the beginning at the end

457
00:19:03,660 --> 00:19:06,419
um and you can't run it unsupervised

458
00:19:06,419 --> 00:19:09,260
completely yeah

459
00:19:09,480 --> 00:19:13,620
okay thank you there's a question from

460
00:19:13,620 --> 00:19:17,100
the chat from John Breeze is it possible

461
00:19:17,100 --> 00:19:19,440
to potentially modify the method to

462
00:19:19,440 --> 00:19:25,020
account for new uniform W so yeah so if

463
00:19:25,020 --> 00:19:27,179
the width is different for if you mean

464
00:19:27,179 --> 00:19:29,400
that there are different for one

465
00:19:29,400 --> 00:19:31,799
operation you have different widths then

466
00:19:31,799 --> 00:19:34,860
it is really uh difficult I guess you

467
00:19:34,860 --> 00:19:37,799
could if you had for example random

468
00:19:37,799 --> 00:19:40,860
operations maybe uh Dynamic time warping

469
00:19:40,860 --> 00:19:43,080
would be an option uh to account for

470
00:19:43,080 --> 00:19:45,900
that but we didn't look into into that

471
00:19:45,900 --> 00:19:48,120
for now

472
00:19:48,120 --> 00:19:49,980
um yeah

473
00:19:49,980 --> 00:19:53,100
okay thank you very much so let things

474
00:19:53,100 --> 00:19:55,620
change again

475
00:19:55,620 --> 00:19:58,219
please

476
00:20:01,580 --> 00:20:05,220
so I'd like the next speaker coming on

477
00:20:05,220 --> 00:20:08,720
stage so ciao soon

478
00:20:11,700 --> 00:20:14,220
so Charleston is gonna give a talk about

479
00:20:14,220 --> 00:20:18,480
his work his and his quota's work yes he

480
00:20:18,480 --> 00:20:21,960
meets improved lattice attacks on ecdsa

481
00:20:21,960 --> 00:20:25,400
with no sleekage

482
00:20:41,820 --> 00:20:44,760
okay thanks for the introduction uh this

483
00:20:44,760 --> 00:20:47,940
is advisors

484
00:20:52,460 --> 00:20:54,960
here's the real name of the snow

485
00:20:54,960 --> 00:20:58,500
signature so to send message so first we

486
00:20:58,500 --> 00:21:00,600
choose the random scale which we will

487
00:21:00,600 --> 00:21:03,120
cause the nouns and the relation R

488
00:21:03,120 --> 00:21:06,179
equals to the K well G of equals g to

489
00:21:06,179 --> 00:21:08,720
the K where

490
00:21:10,400 --> 00:21:13,799
the generator of some groups and the E

491
00:21:13,799 --> 00:21:17,700
equals the Hashi of the r contaminated

492
00:21:17,700 --> 00:21:20,039
with the message here so signature

493
00:21:20,039 --> 00:21:22,799
encloses are okay minus of attempts e

494
00:21:22,799 --> 00:21:25,740
rather understanding key for Sonos

495
00:21:25,740 --> 00:21:28,140
signatures the current implementation

496
00:21:28,140 --> 00:21:32,600
easily needs to again recovery

497
00:21:43,760 --> 00:21:46,580
okay so so

498
00:21:46,580 --> 00:21:49,580
foreign

499
00:21:54,980 --> 00:21:58,980
key we can easily recover the standard

500
00:21:58,980 --> 00:22:02,400
or according to BBC News uh 10 years ago

501
00:22:02,400 --> 00:22:04,799
the iPhone hiker publishes the secret

502
00:22:04,799 --> 00:22:08,820
Sony PlayStation okay mainly because

503
00:22:08,820 --> 00:22:11,240
the engineer made a mistake that his

504
00:22:11,240 --> 00:22:13,980
using the signals every for every

505
00:22:13,980 --> 00:22:15,059
signature

506
00:22:15,059 --> 00:22:17,460
and the new voices are passion and

507
00:22:17,460 --> 00:22:20,159
circles you can suitcase recovery for

508
00:22:20,159 --> 00:22:24,360
example the attacking 250b 256 bits

509
00:22:24,360 --> 00:22:26,640
incident said it was five bits no

510
00:22:26,640 --> 00:22:28,860
leakage is pretty easy and there are a

511
00:22:28,860 --> 00:22:30,960
lot of practical examples for example

512
00:22:30,960 --> 00:22:34,100
there are attacks on Android phones and

513
00:22:34,100 --> 00:22:36,659
cryptocurrencies for example in the

514
00:22:36,659 --> 00:22:38,039
second ones

515
00:22:38,039 --> 00:22:40,860
are the types on cryptocurrencies

516
00:22:40,860 --> 00:22:44,039
there's also in front that in many of

517
00:22:44,039 --> 00:22:47,100
the Bitcoin pilgrims and vaccines their

518
00:22:47,100 --> 00:22:50,000
pseudo Randomness is generated as a

519
00:22:50,000 --> 00:22:53,960
64-bit Randomness it's only only 7

520
00:22:53,960 --> 00:22:56,280
several signatures with

521
00:22:56,280 --> 00:22:59,940
I would can recover the secret sending

522
00:22:59,940 --> 00:23:01,020
key

523
00:23:01,020 --> 00:23:03,299
and generally there are two ways to

524
00:23:03,299 --> 00:23:07,320
attacks the speed biased uh nouns easier

525
00:23:07,320 --> 00:23:10,559
said which is just our rental there's no

526
00:23:10,559 --> 00:23:13,380
signature the original approach to cell

527
00:23:13,380 --> 00:23:16,260
is placed in Bachelor attack which rely

528
00:23:16,260 --> 00:23:19,740
on the free illnesses techniques and the

529
00:23:19,740 --> 00:23:22,620
latest reduction also provides a type

530
00:23:22,620 --> 00:23:24,840
techniques which is our main progress in

531
00:23:24,840 --> 00:23:27,139
this work

532
00:23:38,600 --> 00:23:42,840
it reduces to a lattice problem and

533
00:23:42,840 --> 00:23:45,480
however when the non-selectage is very

534
00:23:45,480 --> 00:23:47,539
small the lattice attacks

535
00:23:47,539 --> 00:23:51,840
become more difficult in 2013 and new

536
00:23:51,840 --> 00:23:55,260
and really attacked 160ps DC with two

537
00:23:55,260 --> 00:23:58,380
bits and most likely is using akz-2 uh

538
00:23:58,380 --> 00:24:02,659
with the block size is 90.

539
00:24:14,360 --> 00:24:16,860
reported results of the attacks and in

540
00:24:16,860 --> 00:24:19,140
cdsa and the first one is the latest

541
00:24:19,140 --> 00:24:21,179
attack since they say as we can say in

542
00:24:21,179 --> 00:24:23,760
the table now Linus attacks can deal

543
00:24:23,760 --> 00:24:26,820
with 160 bit modulus with two business

544
00:24:26,820 --> 00:24:30,960
records and 256 6-speed models

545
00:24:30,960 --> 00:24:34,140
restricted no selectage and 384 bits

546
00:24:34,140 --> 00:24:36,419
with four business leakage

547
00:24:36,419 --> 00:24:38,820
underwater comparison the patient

548
00:24:38,820 --> 00:24:42,360
virtual attacks can't deal with uh a bit

549
00:24:42,360 --> 00:24:45,659
small Mass latency for example it can

550
00:24:45,659 --> 00:24:47,580
deal with Advanced exhibits and modulus

551
00:24:47,580 --> 00:24:51,059
whereas one bit no slackage and the 256

552
00:24:51,059 --> 00:24:53,700
bits uh modulus versus two bits not

553
00:24:53,700 --> 00:24:55,940
record

554
00:24:56,539 --> 00:25:00,120
uh here is a comparison of the place in

555
00:25:00,120 --> 00:25:02,100
Virtual attack and the latest attacks so

556
00:25:02,100 --> 00:25:04,020
generally a blessing Bachelor attacks

557
00:25:04,020 --> 00:25:07,440
can't deal with smallness leakage but of

558
00:25:07,440 --> 00:25:09,539
course the cost is it gives more

559
00:25:09,539 --> 00:25:12,299
signatures as inputs uh very typical

560
00:25:12,299 --> 00:25:13,740
time in terms is a product in battery

561
00:25:13,740 --> 00:25:16,500
attack use two to the 27 signatures and

562
00:25:16,500 --> 00:25:18,840
the lattice attacks used around the 100

563
00:25:18,840 --> 00:25:20,940
signatures and one of the difference is

564
00:25:20,940 --> 00:25:23,400
that at each iteration of operation

565
00:25:23,400 --> 00:25:24,480
virtual attack

566
00:25:24,480 --> 00:25:26,279
some bits of resigning killing is

567
00:25:26,279 --> 00:25:29,100
recovered it's more important bits of

568
00:25:29,100 --> 00:25:31,620
the second key the attack becomes easier

569
00:25:31,620 --> 00:25:34,020
and easier but then let me see tags are

570
00:25:34,020 --> 00:25:35,760
generally all nothing which means that

571
00:25:35,760 --> 00:25:38,460
okay so when you succeed you get the

572
00:25:38,460 --> 00:25:40,620
focus and K and when you fail you get

573
00:25:40,620 --> 00:25:42,779
NASA

574
00:25:42,779 --> 00:25:46,140
and also the little ring and the uh

575
00:25:46,140 --> 00:25:49,620
average the hangar attack are improving

576
00:25:49,620 --> 00:25:51,659
the electricity reduction algorithm

577
00:25:51,659 --> 00:25:54,720
itself in this work our starting point

578
00:25:54,720 --> 00:25:58,919
our starting point uh is a slightly

579
00:25:58,919 --> 00:26:01,559
different so we are trying to understand

580
00:26:01,559 --> 00:26:04,799
some kind of relation between the pledge

581
00:26:04,799 --> 00:26:06,120
and Battery attacks and the latest

582
00:26:06,120 --> 00:26:08,460
attacks which has been mentioned about

583
00:26:08,460 --> 00:26:12,000
 at ECC 17 and also Henninger as

584
00:26:12,000 --> 00:26:15,779
the landscope to Recon and concretely we

585
00:26:15,779 --> 00:26:17,940
can ask her several questions

586
00:26:17,940 --> 00:26:21,059
first the ladies attacks science are

587
00:26:21,059 --> 00:26:23,940
generally all nothing so if some bits of

588
00:26:23,940 --> 00:26:26,279
the standing clear is known does it make

589
00:26:26,279 --> 00:26:28,080
the attack easier

590
00:26:28,080 --> 00:26:30,480
secondly can we exploit the special

591
00:26:30,480 --> 00:26:32,460
structure of the latins

592
00:26:32,460 --> 00:26:34,980
and thirdly by comparison with the

593
00:26:34,980 --> 00:26:37,440
population butcher attacks if given many

594
00:26:37,440 --> 00:26:40,140
more signatures uh can we improve the

595
00:26:40,140 --> 00:26:43,260
latest attacks we'll give positive

596
00:26:43,260 --> 00:26:45,059
answers to these questions and there are

597
00:26:45,059 --> 00:26:47,220
two practical experiments following the

598
00:26:47,220 --> 00:26:49,679
now

599
00:26:49,679 --> 00:26:52,740
and here Escape some uh technical

600
00:26:52,740 --> 00:26:54,600
details and claim that the lattice

601
00:26:54,600 --> 00:26:56,640
attacks are in CDC amongst to this

602
00:26:56,640 --> 00:27:00,240
problem given details of this signatures

603
00:27:00,240 --> 00:27:03,419
are is done with base nouns we construct

604
00:27:03,419 --> 00:27:06,720
a tiui such that the alpha TI and minus

605
00:27:06,720 --> 00:27:10,020
UI plus C IQ is between 0 and the curve

606
00:27:10,020 --> 00:27:12,000
over to the error where Alpha is the

607
00:27:12,000 --> 00:27:13,919
sanity and the AO is the number of

608
00:27:13,919 --> 00:27:16,200
leakage then we constructing the

609
00:27:16,200 --> 00:27:20,340
following items and this Vector U is our

610
00:27:20,340 --> 00:27:23,100
Target point and the heading like a

611
00:27:23,100 --> 00:27:25,260
closed lifespan in this way

612
00:27:25,260 --> 00:27:28,200
uh as we can see the last coordination

613
00:27:28,200 --> 00:27:30,840
of the ray is Alpha which is outside in

614
00:27:30,840 --> 00:27:33,120
case so if we recovery then we recover

615
00:27:33,120 --> 00:27:37,140
the uh sending key then we can solve

616
00:27:37,140 --> 00:27:40,380
this uh lattice problems about neural

617
00:27:40,380 --> 00:27:42,360
supreme or algorithm or we can embedding

618
00:27:42,360 --> 00:27:44,700
measure

619
00:27:44,700 --> 00:27:47,520
and uh let me introduce some intuitive

620
00:27:47,520 --> 00:27:50,039
ideas to improve the attack so if we for

621
00:27:50,039 --> 00:27:52,260
example if we consider the case of bdd

622
00:27:52,260 --> 00:27:54,779
or CET denotes in London one as well as

623
00:27:54,779 --> 00:27:56,220
the shortest Vector in the original

624
00:27:56,220 --> 00:27:59,159
letters and e as a distance between the

625
00:27:59,159 --> 00:28:01,039
touch vector and the lattice

626
00:28:01,039 --> 00:28:03,380
intuitively in order to improve attack

627
00:28:03,380 --> 00:28:06,179
we want to increase the ratio between

628
00:28:06,179 --> 00:28:09,240
Lambda 1 and e or equivalently if you

629
00:28:09,240 --> 00:28:11,520
build in the embedded Letters by color

630
00:28:11,520 --> 00:28:13,980
embedding it becomes a unique svsp

631
00:28:13,980 --> 00:28:16,140
instance and goes to increase the guide

632
00:28:16,140 --> 00:28:20,039
between Lambda 2 and Lambda 1. to

633
00:28:20,039 --> 00:28:21,840
increase the number one according to

634
00:28:21,840 --> 00:28:23,340
Crossing ballistic

635
00:28:23,340 --> 00:28:25,799
they're going to increase the volume of

636
00:28:25,799 --> 00:28:28,039
the legends

637
00:28:28,039 --> 00:28:30,779
requires that the latest reconstruct is

638
00:28:30,779 --> 00:28:33,480
this one and that has Vector is this and

639
00:28:33,480 --> 00:28:36,120
the hidden light Spectra is this and the

640
00:28:36,120 --> 00:28:38,520
denotes the difference Vector between

641
00:28:38,520 --> 00:28:41,760
them as e according to the property of

642
00:28:41,760 --> 00:28:45,600
those inequalities each coordinates of

643
00:28:45,600 --> 00:28:48,480
the E is upper bounded by Q

644
00:28:48,480 --> 00:28:52,440
and if we observe the the structure of

645
00:28:52,440 --> 00:28:54,419
this lattice or if we want to increase

646
00:28:54,419 --> 00:28:58,740
the volume we can just modify the factor

647
00:28:58,740 --> 00:29:00,659
one

648
00:29:00,659 --> 00:29:03,740
so for example to the uh to to the 100

649
00:29:03,740 --> 00:29:06,419
and in this way we increase the volume

650
00:29:06,419 --> 00:29:10,620
by two to 100 however there is a serious

651
00:29:10,620 --> 00:29:12,900
problem that the hidden legislature will

652
00:29:12,900 --> 00:29:14,880
not be close to the patent Vector

653
00:29:14,880 --> 00:29:17,220
anymore because uh in the lives Vector

654
00:29:17,220 --> 00:29:19,500
is this becomes this and the last

655
00:29:19,500 --> 00:29:22,260
confession becomes a total 100 times

656
00:29:22,260 --> 00:29:24,539
Alpha which is very large as I've

657
00:29:24,539 --> 00:29:27,899
mentioned uh

658
00:29:29,880 --> 00:29:33,779
as I mentioned uh so each coefficient of

659
00:29:33,779 --> 00:29:35,700
the difference Vector is apparent bonded

660
00:29:35,700 --> 00:29:39,000
by Q so this two to 100 Alpha is very

661
00:29:39,000 --> 00:29:43,020
very large and uh so uh this means that

662
00:29:43,020 --> 00:29:46,200
uh it's not quite meaningful

663
00:29:46,200 --> 00:29:48,299
and the attempt two is that okay

664
00:29:48,299 --> 00:29:49,980
following the idea of bleaching virtual

665
00:29:49,980 --> 00:29:52,140
attack can we enumerate some bits of the

666
00:29:52,140 --> 00:29:54,840
second key and uh improve lattice

667
00:29:54,840 --> 00:29:57,480
attacks for example with notes are about

668
00:29:57,480 --> 00:30:00,659
with equals the upper one times to say

669
00:30:00,659 --> 00:30:03,000
plus Alpha two other way and then we

670
00:30:03,000 --> 00:30:06,240
substitute our aptitude algories this

671
00:30:06,240 --> 00:30:09,299
one in the in inequalities and then we

672
00:30:09,299 --> 00:30:11,940
have we get a new instance for the alpha

673
00:30:11,940 --> 00:30:15,299
one which is some uh most significant

674
00:30:15,299 --> 00:30:17,580
bits of alpha

675
00:30:17,580 --> 00:30:20,820
however the remaining instance seems to

676
00:30:20,820 --> 00:30:23,039
be as hard as the original one for a

677
00:30:23,039 --> 00:30:26,220
lattice attacks so which also means that

678
00:30:26,220 --> 00:30:28,500
it's not quite meaningful

679
00:30:28,500 --> 00:30:31,679
but perhaps interestingly if we combine

680
00:30:31,679 --> 00:30:33,899
these two attempts

681
00:30:33,899 --> 00:30:36,059
uh something something interesting

682
00:30:36,059 --> 00:30:39,419
happened for example if we increase the

683
00:30:39,419 --> 00:30:43,080
volume by 200 and just assume that the

684
00:30:43,080 --> 00:30:46,620
standing K has 60 bits and then total

685
00:30:46,620 --> 00:30:50,460
100 Alpha is upper body back to the 160

686
00:30:50,460 --> 00:30:52,500
which is rough EQ

687
00:30:52,500 --> 00:30:55,260
then we have increased the volume of the

688
00:30:55,260 --> 00:30:58,399
lightness by 200 and the the

689
00:30:58,399 --> 00:31:01,260
difference Vector the euclidean length

690
00:31:01,260 --> 00:31:06,059
of a difference Vector hasn't changed

691
00:31:06,059 --> 00:31:08,640
so more generally and we can't enumerate

692
00:31:08,640 --> 00:31:12,419
the standing Key by CPS and increase the

693
00:31:12,419 --> 00:31:14,640
volume of the lattice but to affect our

694
00:31:14,640 --> 00:31:16,860
two plus C under the length of the

695
00:31:16,860 --> 00:31:19,500
difference Vector doesn't change it's as

696
00:31:19,500 --> 00:31:22,679
we can improve the attack

697
00:31:22,679 --> 00:31:26,039
and we have some uh other similar ideas

698
00:31:26,039 --> 00:31:29,460
for example we can enumerate additional

699
00:31:29,460 --> 00:31:32,360
bits of the nonsense and probe of those

700
00:31:32,360 --> 00:31:36,059
that are already known and for example

701
00:31:36,059 --> 00:31:38,520
uh suppose that we are in the context of

702
00:31:38,520 --> 00:31:41,760
160 bit group with two bits no leakage

703
00:31:41,760 --> 00:31:44,100
and where we try to enumerate the third

704
00:31:44,100 --> 00:31:46,679
ASP of the nouns

705
00:31:46,679 --> 00:31:49,260
uh however if we enumerate one more

706
00:31:49,260 --> 00:31:51,000
beats for all the signatures it will

707
00:31:51,000 --> 00:31:54,840
become a huge computation but we can do

708
00:31:54,840 --> 00:31:57,720
it for part of signatures and construct

709
00:31:57,720 --> 00:32:00,179
hybrid lattice for example we can guess

710
00:32:00,179 --> 00:32:02,700
one more beautiful 20 or out of the 100

711
00:32:02,700 --> 00:32:05,520
signatures and keeps the other 80

712
00:32:05,520 --> 00:32:07,500
signatures unchanged and construct the

713
00:32:07,500 --> 00:32:09,960
hybrid relations like this and then we

714
00:32:09,960 --> 00:32:11,640
perform the lattice attacks on the new

715
00:32:11,640 --> 00:32:13,980
Matrix that's the cost of 2 to the 20

716
00:32:13,980 --> 00:32:16,440
operations for guessing bits

717
00:32:16,440 --> 00:32:19,200
and uh here are some advantages of

718
00:32:19,200 --> 00:32:21,779
getting bits attacks first it is very

719
00:32:21,779 --> 00:32:24,000
easy to simulate for example we can

720
00:32:24,000 --> 00:32:26,820
assume that we have guessed the correct

721
00:32:26,820 --> 00:32:29,580
bits for self-generated instances this

722
00:32:29,580 --> 00:32:31,799
can save a lot of computation costs and

723
00:32:31,799 --> 00:32:34,020
make the estimate and cost very easy

724
00:32:34,020 --> 00:32:37,080
okay by comparison if you if you

725
00:32:37,080 --> 00:32:40,260
directly use pkz with hyperoxides into a

726
00:32:40,260 --> 00:32:43,919
build a very huge computation cost and

727
00:32:43,919 --> 00:32:46,380
it is very easy to parallelize the

728
00:32:46,380 --> 00:32:47,580
attack

729
00:32:47,580 --> 00:32:51,299
and also we can like uh because we are

730
00:32:51,299 --> 00:32:55,500
constructing diets the CVP instances so

731
00:32:55,500 --> 00:32:58,500
we so we can use the batch sap and the

732
00:32:58,500 --> 00:33:00,960
clip with three processant techniques

733
00:33:00,960 --> 00:33:03,419
and actually this is a good scenario to

734
00:33:03,419 --> 00:33:05,940
test those algorithms

735
00:33:05,940 --> 00:33:07,440
and the

736
00:33:07,440 --> 00:33:10,740
besides it is compatible with the all

737
00:33:10,740 --> 00:33:14,159
those existing techniques for improving

738
00:33:14,159 --> 00:33:17,240
these attacks and it's quite uh

739
00:33:17,240 --> 00:33:19,620
straightforce to combine our deals with

740
00:33:19,620 --> 00:33:21,320
those techniques

741
00:33:21,320 --> 00:33:24,500
and due to time limit I always get

742
00:33:24,500 --> 00:33:27,419
introduce some uh additional

743
00:33:27,419 --> 00:33:29,760
contributions but uh roughly mentioned

744
00:33:29,760 --> 00:33:31,019
them

745
00:33:31,019 --> 00:33:33,299
um we have one more variety of attacks

746
00:33:33,299 --> 00:33:35,700
which is uh utila as many more

747
00:33:35,700 --> 00:33:38,159
signatures to improve the lattice

748
00:33:38,159 --> 00:33:40,679
attacks and we give an explanation of

749
00:33:40,679 --> 00:33:43,080
the gap between the CRP and the s3po

750
00:33:43,080 --> 00:33:46,440
approaches which has been observed in

751
00:33:46,440 --> 00:33:47,940
the minawa paper

752
00:33:47,940 --> 00:33:50,460
and we also have a discussion on

753
00:33:50,460 --> 00:33:53,000
choosing the kind of embedding factor

754
00:33:53,000 --> 00:33:57,000
and we also have a surgical analysis of

755
00:33:57,000 --> 00:33:59,640
the lattice text easily said

756
00:33:59,640 --> 00:34:02,899
and here is our

757
00:34:02,899 --> 00:34:06,059
experimental results uh briefly uh

758
00:34:06,059 --> 00:34:09,359
introduce them here the last one is the

759
00:34:09,359 --> 00:34:11,399
guessing bits of the Circle K and the

760
00:34:11,399 --> 00:34:14,460
right one is the guessing bits of

761
00:34:14,460 --> 00:34:17,820
nonsense and as we can see uh in this

762
00:34:17,820 --> 00:34:20,699
figure for example uh

763
00:34:20,699 --> 00:34:24,418
for uh 256p to distribute last leakage

764
00:34:24,418 --> 00:34:28,320
we if we enumerate and guess uh 20 bits

765
00:34:28,320 --> 00:34:32,099
of the uh Secrets any key and then we

766
00:34:32,099 --> 00:34:35,239
replicate like a 30 percent success rate

767
00:34:35,239 --> 00:34:39,000
and uh the algorithm we are using is

768
00:34:39,000 --> 00:34:42,000
just a big easy Circle so so which means

769
00:34:42,000 --> 00:34:47,899
that the computation cost is 220 times

770
00:34:47,899 --> 00:34:51,060
pkd30 which we think is quite uh

771
00:34:51,060 --> 00:34:54,020
reasonable time

772
00:35:00,599 --> 00:35:03,359
and uh

773
00:35:03,359 --> 00:35:06,780
oh sorry and uh we also did some uh

774
00:35:06,780 --> 00:35:09,900
experiments on TPM Fair uh data sets the

775
00:35:09,900 --> 00:35:12,720
following the work of uh TPM player and

776
00:35:12,720 --> 00:35:16,079
the Monero and uh with only uh 800

777
00:35:16,079 --> 00:35:19,260
signatures uh we are able to uh recover

778
00:35:19,260 --> 00:35:21,839
the standing key

779
00:35:21,839 --> 00:35:25,260
and uh standing uh here is the summary

780
00:35:25,260 --> 00:35:28,560
uh we performs neurons to improve latest

781
00:35:28,560 --> 00:35:31,619
attacks I mean cdsa which is uh get some

782
00:35:31,619 --> 00:35:34,500
bits of the secretly all the nonsense

783
00:35:34,500 --> 00:35:37,740
this serves a difficult cases for

784
00:35:37,740 --> 00:35:40,859
lattice attacks and it is very easy to

785
00:35:40,859 --> 00:35:44,780
simulate and parallelize it and the

786
00:35:44,780 --> 00:35:48,140
experimental results validated our ideas

787
00:35:48,140 --> 00:35:51,359
and that's all for my talk and thank you

788
00:35:51,359 --> 00:35:53,520
for your attention and I'm happy to take

789
00:35:53,520 --> 00:35:55,820
questions

790
00:36:01,020 --> 00:36:03,839
thank you very much for this talk so

791
00:36:03,839 --> 00:36:05,880
actually you save one minute so we have

792
00:36:05,880 --> 00:36:09,200
one minute extra for questions

793
00:36:12,060 --> 00:36:14,660
nobody

794
00:36:14,760 --> 00:36:19,859
okay on the zoom no more

795
00:36:19,859 --> 00:36:24,540
okay so I have some short questions

796
00:36:24,540 --> 00:36:26,579
um I was wondering in order to use your

797
00:36:26,579 --> 00:36:27,780
approach

798
00:36:27,780 --> 00:36:30,119
um has the most leakage to be exact or

799
00:36:30,119 --> 00:36:32,359
you can somehow deal with some

800
00:36:32,359 --> 00:36:34,560
probabilistic values

801
00:36:34,560 --> 00:36:38,460
for the liquid Beats surgery so the

802
00:36:38,460 --> 00:36:42,119
leakage noses has to have to be exact or

803
00:36:42,119 --> 00:36:44,700
you can deal with probabilistic values

804
00:36:44,700 --> 00:36:48,720
oh well so yeah uh in general the

805
00:36:48,720 --> 00:36:51,359
lattice attacks are quite uh like uh

806
00:36:51,359 --> 00:36:54,300
sensitive to to the leakage errors so

807
00:36:54,300 --> 00:36:57,119
like if you have like 100 signatures and

808
00:36:57,119 --> 00:36:58,619
maybe

809
00:36:58,619 --> 00:37:01,800
if 10 of them are incorrect maybe I

810
00:37:01,800 --> 00:37:04,200
guess the the success rate will become

811
00:37:04,200 --> 00:37:06,060
very low

812
00:37:06,060 --> 00:37:09,599
okay yeah okay thank you

813
00:37:09,599 --> 00:37:12,800
any question now

814
00:37:12,960 --> 00:37:16,920
no so actually I was I wanted to ask you

815
00:37:16,920 --> 00:37:19,380
there is a paper that appeared at crypto

816
00:37:19,380 --> 00:37:20,520
2020

817
00:37:20,520 --> 00:37:22,500
uh that suggested that methodology to

818
00:37:22,500 --> 00:37:24,720
inject extra information that they call

819
00:37:24,720 --> 00:37:28,500
hints in order to get an easier lattice

820
00:37:28,500 --> 00:37:30,900
reduction do you see any relation

821
00:37:30,900 --> 00:37:35,359
between your approach and theirs

822
00:37:35,359 --> 00:37:40,200
the crypto 2022 which was about about

823
00:37:40,200 --> 00:37:43,560
um inducting hints information hints

824
00:37:43,560 --> 00:37:45,180
like

825
00:37:45,180 --> 00:37:47,240
um

826
00:37:50,700 --> 00:37:54,060
um yeah that's a good question

827
00:37:54,060 --> 00:37:55,380
um

828
00:37:55,380 --> 00:37:59,660
somebody has got it

829
00:38:04,579 --> 00:38:07,380
oh we can't hear you

830
00:38:07,380 --> 00:38:09,780
need side information LW with side

831
00:38:09,780 --> 00:38:12,020
information

832
00:38:12,660 --> 00:38:17,420
um that was oh you you means uh

833
00:38:24,079 --> 00:38:27,420
the idea is to add some extra linear

834
00:38:27,420 --> 00:38:30,480
equations that you have on the short

835
00:38:30,480 --> 00:38:33,540
Vector that you're looking to find so I

836
00:38:33,540 --> 00:38:35,220
don't know if it applies here yeah so

837
00:38:35,220 --> 00:38:38,520
well I think those two type of lattices

838
00:38:38,520 --> 00:38:39,500
are

839
00:38:39,500 --> 00:38:43,800
somewhat different because the LW lenses

840
00:38:43,800 --> 00:38:46,680
are like a random curabilities and in

841
00:38:46,680 --> 00:38:49,980
our case the hmp lattice is a kind of

842
00:38:49,980 --> 00:38:51,660
life cycle like so it's quite different

843
00:38:51,660 --> 00:38:56,760
and uh their analysis are like I realize

844
00:38:56,760 --> 00:39:00,240
on the question like uh question

845
00:39:00,240 --> 00:39:03,240
distribution and and in our case it's

846
00:39:03,240 --> 00:39:05,640
kind of a uniform distribution and this

847
00:39:05,640 --> 00:39:08,040
kind of uh

848
00:39:08,040 --> 00:39:10,740
well maybe the general idea is someone

849
00:39:10,740 --> 00:39:13,680
related but uh for most suitcases I I

850
00:39:13,680 --> 00:39:16,579
guess it's kind of uh

851
00:39:16,579 --> 00:39:19,820
quite different

852
00:39:20,160 --> 00:39:22,680
thank you

853
00:39:22,680 --> 00:39:24,839
any question now

854
00:39:24,839 --> 00:39:29,720
not at all so thanks again ciao thanks

855
00:39:40,380 --> 00:39:43,560
so I introduced the third talk which is

856
00:39:43,560 --> 00:39:45,960
about side Channel attacks on stream

857
00:39:45,960 --> 00:39:47,040
ciphers

858
00:39:47,040 --> 00:39:50,220
a three-step approach to State key

859
00:39:50,220 --> 00:39:52,200
recovery

860
00:39:52,200 --> 00:39:54,660
and the talk will be gently given by

861
00:39:54,660 --> 00:39:57,540
dear montage

862
00:39:57,540 --> 00:40:00,420
hello can you hear me

863
00:40:00,420 --> 00:40:03,240
okay so welcome everyone for the

864
00:40:03,240 --> 00:40:04,320
presentation and thank you for the

865
00:40:04,320 --> 00:40:06,240
introduction for this talk I will be

866
00:40:06,240 --> 00:40:08,579
presenting our recent work uh China

867
00:40:08,579 --> 00:40:10,560
attack on stream ciphers basically we

868
00:40:10,560 --> 00:40:12,720
are using three-step approach to recover

869
00:40:12,720 --> 00:40:14,880
the state or the PBS

870
00:40:14,880 --> 00:40:17,880
this is the overall uh augment for the

871
00:40:17,880 --> 00:40:20,339
presentation today so first we start

872
00:40:20,339 --> 00:40:23,040
with the introduction by defining our

873
00:40:23,040 --> 00:40:24,960
problem formulation so the idea is that

874
00:40:24,960 --> 00:40:27,300
given a stream Cipher since most of the

875
00:40:27,300 --> 00:40:29,640
work are being done on block Cipher can

876
00:40:29,640 --> 00:40:32,880
we design a generic framework which can

877
00:40:32,880 --> 00:40:35,060
recover the secret information

878
00:40:35,060 --> 00:40:37,980
given a noises such Channel traces from

879
00:40:37,980 --> 00:40:39,720
what we observed to our knowledge most

880
00:40:39,720 --> 00:40:41,579
of the work they have tried to address

881
00:40:41,579 --> 00:40:43,800
this problem are current mostly only on

882
00:40:43,800 --> 00:40:45,960
initialization phase or they are using

883
00:40:45,960 --> 00:40:49,800
multiple IVs for noisy tracers hence the

884
00:40:49,800 --> 00:40:51,359
proper framework to address this

885
00:40:51,359 --> 00:40:54,480
question uh on in the pseudorandom phase

886
00:40:54,480 --> 00:40:57,240
of a stream Cipher using a single IV or

887
00:40:57,240 --> 00:40:59,760
noisy traces is still missing

888
00:40:59,760 --> 00:41:02,099
so following that that's our

889
00:41:02,099 --> 00:41:04,680
contributions as a follow we design a

890
00:41:04,680 --> 00:41:06,900
generic framework which works as a state

891
00:41:06,900 --> 00:41:09,900
lead recovery or key recovery for nlfsr

892
00:41:09,900 --> 00:41:12,359
based stream Cipher or other Cipher with

893
00:41:12,359 --> 00:41:14,099
a similar structure in this case

894
00:41:14,099 --> 00:41:15,780
basically we are combining multiple

895
00:41:15,780 --> 00:41:18,359
tools using machine learning ml mixed in

896
00:41:18,359 --> 00:41:21,060
Brazilian programming MLP satisfiability

897
00:41:21,060 --> 00:41:23,400
modulo theorem smt within a single

898
00:41:23,400 --> 00:41:26,460
framework so then upon the construction

899
00:41:26,460 --> 00:41:29,160
of the two uh of the tool based on this

900
00:41:29,160 --> 00:41:31,380
uh different tools

901
00:41:31,380 --> 00:41:33,480
the use the attacker can fit in the

902
00:41:33,480 --> 00:41:35,640
traces and he can get the secret back

903
00:41:35,640 --> 00:41:37,140
these tools worked in both

904
00:41:37,140 --> 00:41:39,000
initialization and pseudo random phase

905
00:41:39,000 --> 00:41:41,339
and also even in the presence of noise

906
00:41:41,339 --> 00:41:44,040
it can be carried out in a single key IV

907
00:41:44,040 --> 00:41:45,660
environment and we have tested in a

908
00:41:45,660 --> 00:41:48,000
Trivium Cipher implemented on the 32-bit

909
00:41:48,000 --> 00:41:51,119
arm cortex and on Arduino dewy

910
00:41:51,119 --> 00:41:54,420
yeah to recall basically we compare with

911
00:41:54,420 --> 00:41:57,240
previous work as soon as you can see uh

912
00:41:57,240 --> 00:42:00,359
for our work we are there's only besides

913
00:42:00,359 --> 00:42:01,619
our work there's only one which is

914
00:42:01,619 --> 00:42:04,200
working on pseudorandom phase whereas

915
00:42:04,200 --> 00:42:05,400
everything else is working on the

916
00:42:05,400 --> 00:42:07,920
initialization phase for the noise

917
00:42:07,920 --> 00:42:11,000
basically if you are working on a noisy

918
00:42:11,000 --> 00:42:13,140
tracers basically you will require

919
00:42:13,140 --> 00:42:15,599
multiple IVs and then if you request

920
00:42:15,599 --> 00:42:17,339
single IV it's basically a noise free

921
00:42:17,339 --> 00:42:18,780
setting so in this case we try to

922
00:42:18,780 --> 00:42:20,760
address this problem

923
00:42:20,760 --> 00:42:22,920
so this is the general idea of our

924
00:42:22,920 --> 00:42:25,980
framework so we basically try to First

925
00:42:25,980 --> 00:42:27,900
give our tracers and then we predict the

926
00:42:27,900 --> 00:42:29,579
hammingway having distance sequence or

927
00:42:29,579 --> 00:42:31,500
using machine learning and then finally

928
00:42:31,500 --> 00:42:34,079
we fit this information uh to the to our

929
00:42:34,079 --> 00:42:35,700
tool to retrieve the secret so we use

930
00:42:35,700 --> 00:42:39,240
smt instance to return a solution within

931
00:42:39,240 --> 00:42:42,300
a reasonable time for unknown state of

932
00:42:42,300 --> 00:42:43,740
the key

933
00:42:43,740 --> 00:42:46,560
so this is the generic framework so it's

934
00:42:46,560 --> 00:42:48,780
basically a profile setting first we

935
00:42:48,780 --> 00:42:51,720
have a device we collected the tracers

936
00:42:51,720 --> 00:42:54,420
we train a machine learning model then

937
00:42:54,420 --> 00:42:56,460
we simulate the cipher basically what we

938
00:42:56,460 --> 00:42:58,079
mean is we inject the noise into this

939
00:42:58,079 --> 00:43:00,200
Hemingway having distance information

940
00:43:00,200 --> 00:43:03,180
then we cut we compute the error

941
00:43:03,180 --> 00:43:04,920
tolerance limit of the SMD which we'll

942
00:43:04,920 --> 00:43:07,440
explain later this is the offline phase

943
00:43:07,440 --> 00:43:09,599
we get this train model and the error

944
00:43:09,599 --> 00:43:11,720
tolerance and then for the online phase

945
00:43:11,720 --> 00:43:14,700
we have another device under Target we

946
00:43:14,700 --> 00:43:16,560
collected the traces we pass it to the

947
00:43:16,560 --> 00:43:18,720
trained machine learning model it will

948
00:43:18,720 --> 00:43:21,839
predict having distance sequence

949
00:43:21,839 --> 00:43:25,200
then we do a correction using MLP which

950
00:43:25,200 --> 00:43:27,720
we'll explain later again uh then we got

951
00:43:27,720 --> 00:43:29,339
a corrected Hemingway having distance

952
00:43:29,339 --> 00:43:30,359
class

953
00:43:30,359 --> 00:43:33,119
then we pass this to the smt solver and

954
00:43:33,119 --> 00:43:35,040
then this assembly solver will give us

955
00:43:35,040 --> 00:43:37,560
the secret information back so this is

956
00:43:37,560 --> 00:43:40,680
the overview of our approach

957
00:43:40,680 --> 00:43:43,260
by error tolerance is basically given a

958
00:43:43,260 --> 00:43:46,619
original actual Hemingway uh when we

959
00:43:46,619 --> 00:43:48,180
give when we get a predict the Hamming

960
00:43:48,180 --> 00:43:49,740
weight the error tolerance Epsilon

961
00:43:49,740 --> 00:43:52,380
defines that our predictor Hemingway is

962
00:43:52,380 --> 00:43:55,020
successful if it's within the plus minus

963
00:43:55,020 --> 00:43:57,359
Epsilon or within the uh from the

964
00:43:57,359 --> 00:43:59,540
original Hemingway value

965
00:43:59,540 --> 00:44:01,859
so as mentioned before we train the

966
00:44:01,859 --> 00:44:03,599
machine learning uh to predict the

967
00:44:03,599 --> 00:44:04,800
sequence of Hemingway and Hamming

968
00:44:04,800 --> 00:44:06,839
distance however we know that machine

969
00:44:06,839 --> 00:44:09,420
learning is not always 100 giving 100

970
00:44:09,420 --> 00:44:13,140
accuracy so and this is a problem since

971
00:44:13,140 --> 00:44:15,599
our SMP solver require 100 correctness

972
00:44:15,599 --> 00:44:19,500
in this case then we uh use another tool

973
00:44:19,500 --> 00:44:20,819
which is mixed integer linear

974
00:44:20,819 --> 00:44:23,160
programming MLB which basically

975
00:44:23,160 --> 00:44:24,960
optimization problem you have an

976
00:44:24,960 --> 00:44:26,700
objective to solve and then you subject

977
00:44:26,700 --> 00:44:29,400
to uh you have a certain constraint so

978
00:44:29,400 --> 00:44:31,200
we use this to correct the predictor

979
00:44:31,200 --> 00:44:34,380
sequence so we use a Google b as MLP

980
00:44:34,380 --> 00:44:35,880
solver in our case

981
00:44:35,880 --> 00:44:37,920
once we've got the output of the

982
00:44:37,920 --> 00:44:39,900
predictor sequence of the Hemingway

983
00:44:39,900 --> 00:44:42,119
Hamming distance we pass it to the SNP

984
00:44:42,119 --> 00:44:43,980
which is a generalization of the Boolean

985
00:44:43,980 --> 00:44:47,940
Set uh this basically is a solver which

986
00:44:47,940 --> 00:44:49,740
can involve a real number in digital big

987
00:44:49,740 --> 00:44:52,140
factors and Etc so we use Z3 as a smt

988
00:44:52,140 --> 00:44:53,880
solver for R2

989
00:44:53,880 --> 00:44:56,819
our Target function is a string Cipher

990
00:44:56,819 --> 00:45:00,560
Trivium which comprises of pre and

991
00:45:00,560 --> 00:45:05,040
sorry of size 93 bits 84 bits and 111

992
00:45:05,040 --> 00:45:07,920
bits in total they construct like 288

993
00:45:07,920 --> 00:45:10,380
bits for this in the sugar random phase

994
00:45:10,380 --> 00:45:12,720
and the secret key and the IV are both

995
00:45:12,720 --> 00:45:15,300
80 bits and the state update function is

996
00:45:15,300 --> 00:45:17,160
invertible so if you obtain the state

997
00:45:17,160 --> 00:45:19,859
bit of 288 bits it can be used to

998
00:45:19,859 --> 00:45:22,619
reconstruct back the secret key

999
00:45:22,619 --> 00:45:25,140
uh this is our brief information about

1000
00:45:25,140 --> 00:45:27,780
our setup so this is for the measurement

1001
00:45:27,780 --> 00:45:29,220
we use the following setup we

1002
00:45:29,220 --> 00:45:31,920
implemented the target function on atom

1003
00:45:31,920 --> 00:45:34,740
cortex M3 in assembly we it's mounted on

1004
00:45:34,740 --> 00:45:37,079
Arduino Dewey we use a rescue High

1005
00:45:37,079 --> 00:45:39,540
persistent em Pro for collecting the uh

1006
00:45:39,540 --> 00:45:41,579
the tracers we

1007
00:45:41,579 --> 00:45:44,640
but if I'm a great search so we this in

1008
00:45:44,640 --> 00:45:46,200
the picture is shown the optimal

1009
00:45:46,200 --> 00:45:48,300
position as far to our as per our

1010
00:45:48,300 --> 00:45:52,200
knowledge and we got a SNR of 3.3 uh we

1011
00:45:52,200 --> 00:45:55,319
collected two to about 21.17 traces this

1012
00:45:55,319 --> 00:45:57,599
is used in total for training validation

1013
00:45:57,599 --> 00:45:59,579
and testing

1014
00:45:59,579 --> 00:46:02,700
so for the ml we consider MLP since this

1015
00:46:02,700 --> 00:46:04,859
is the simplest form we can use we

1016
00:46:04,859 --> 00:46:06,300
consider a super fast classification

1017
00:46:06,300 --> 00:46:08,700
problem since this is a Hemingway

1018
00:46:08,700 --> 00:46:11,400
leakage model with 32 on 32-bit

1019
00:46:11,400 --> 00:46:14,240
microcontroller we have a 30 33 classes

1020
00:46:14,240 --> 00:46:18,060
and we train it on the MLP classifier

1021
00:46:18,060 --> 00:46:20,640
to give a overview so basically this is

1022
00:46:20,640 --> 00:46:21,780
the trade-off between the machine

1023
00:46:21,780 --> 00:46:23,579
learning accuracy and the error

1024
00:46:23,579 --> 00:46:26,160
tolerance so as you can see that if we

1025
00:46:26,160 --> 00:46:28,920
force it to be exact uh tolerance equal

1026
00:46:28,920 --> 00:46:31,440
to zero the machine learning accuracy is

1027
00:46:31,440 --> 00:46:34,680
only 39.3 however as we increase the

1028
00:46:34,680 --> 00:46:37,079
tolerance the so-called accuracy

1029
00:46:37,079 --> 00:46:39,780
increases however if we uh there's a

1030
00:46:39,780 --> 00:46:41,780
trade-off if we compare it with the smt

1031
00:46:41,780 --> 00:46:44,640
uh the higher the tolerance the solving

1032
00:46:44,640 --> 00:46:46,440
time is increasing

1033
00:46:46,440 --> 00:46:48,599
so in here we have to take a thread off

1034
00:46:48,599 --> 00:46:50,700
so we take Epsilon equals 3 which

1035
00:46:50,700 --> 00:46:52,560
provide a good speed accuracy trade-off

1036
00:46:52,560 --> 00:46:54,660
however there are still small chances

1037
00:46:54,660 --> 00:46:55,800
that the classes are predicted

1038
00:46:55,800 --> 00:46:57,839
incorrectly so we want to reduce it even

1039
00:46:57,839 --> 00:47:01,319
further so we use MLP as a mental in

1040
00:47:01,319 --> 00:47:04,440
between to correct this prediction

1041
00:47:04,440 --> 00:47:08,099
so uh for the MLP model what we want to

1042
00:47:08,099 --> 00:47:09,540
do is that we have a sequence of Hamming

1043
00:47:09,540 --> 00:47:13,859
works we want to so-called correct it so

1044
00:47:13,859 --> 00:47:15,540
that is closer to the Hemingway sequence

1045
00:47:15,540 --> 00:47:18,180
but it's still uh near to the predicted

1046
00:47:18,180 --> 00:47:19,619
Hemingway sequence so this is the

1047
00:47:19,619 --> 00:47:21,599
objective function and for the

1048
00:47:21,599 --> 00:47:23,700
constraint we constructed three types of

1049
00:47:23,700 --> 00:47:26,300
constraint this detail mode on the paper

1050
00:47:26,300 --> 00:47:28,920
so basically it's based on the incoming

1051
00:47:28,920 --> 00:47:30,960
and outgoing bit relation so for figure

1052
00:47:30,960 --> 00:47:34,500
a basically this uh is based on the

1053
00:47:34,500 --> 00:47:36,359
cipher construction you have multiple

1054
00:47:36,359 --> 00:47:37,980
register in Trivium this is a three

1055
00:47:37,980 --> 00:47:41,220
registers so for f for each round when

1056
00:47:41,220 --> 00:47:43,079
the function is updated there's a bit

1057
00:47:43,079 --> 00:47:45,119
which is going in and bits which is

1058
00:47:45,119 --> 00:47:48,180
going out uh then uh based on that the

1059
00:47:48,180 --> 00:47:50,400
Hemingway will have certain properties

1060
00:47:50,400 --> 00:47:53,220
if the prediction is incorrect then the

1061
00:47:53,220 --> 00:47:54,660
Hemingway value will violate this

1062
00:47:54,660 --> 00:47:56,579
relation and it can be detected and

1063
00:47:56,579 --> 00:47:58,500
corrected using the MLP model so we use

1064
00:47:58,500 --> 00:48:01,020
two models so the first one as I

1065
00:48:01,020 --> 00:48:03,000
mentioned is based on the alpha Excel

1066
00:48:03,000 --> 00:48:05,220
and lfsr itself the idea is based on the

1067
00:48:05,220 --> 00:48:07,079
implementation on the B so basically

1068
00:48:07,079 --> 00:48:09,359
it's based on the macro controller uh in

1069
00:48:09,359 --> 00:48:12,839
this case it has 32-bit register so the

1070
00:48:12,839 --> 00:48:14,940
function update also have some relations

1071
00:48:14,940 --> 00:48:16,560
so in this case we combine them into

1072
00:48:16,560 --> 00:48:18,660
three type of constraint and then we fit

1073
00:48:18,660 --> 00:48:21,060
this to the MLP to solve

1074
00:48:21,060 --> 00:48:22,500
you know we have implemented it on

1075
00:48:22,500 --> 00:48:24,660
Trivium and we run a thousand

1076
00:48:24,660 --> 00:48:27,000
experiments uh the the result the

1077
00:48:27,000 --> 00:48:28,140
success rate is shown on the figure

1078
00:48:28,140 --> 00:48:31,640
below the success rate at 110 rounds on

1079
00:48:31,640 --> 00:48:35,040
threshold Epsilon equals 3 is 97.6

1080
00:48:35,040 --> 00:48:37,440
percent taking three seconds uh 3.3

1081
00:48:37,440 --> 00:48:40,440
seconds on uh on average so if we repeat

1082
00:48:40,440 --> 00:48:41,760
the experiment twice with different

1083
00:48:41,760 --> 00:48:43,740
sequence of having for example we take

1084
00:48:43,740 --> 00:48:46,560
the C the sequence on this on the

1085
00:48:46,560 --> 00:48:48,060
beginning of the rounds and maybe we

1086
00:48:48,060 --> 00:48:50,819
take somewhere others different sequence

1087
00:48:50,819 --> 00:48:53,040
we combine them the result the success

1088
00:48:53,040 --> 00:48:55,920
rate can increase even further as we

1089
00:48:55,920 --> 00:48:58,140
notice that yeah for number of rounds uh

1090
00:48:58,140 --> 00:49:00,180
as the number of run increase the

1091
00:49:00,180 --> 00:49:02,579
success rate decreases over time and the

1092
00:49:02,579 --> 00:49:05,280
solving time is also encrypted

1093
00:49:05,280 --> 00:49:08,220
so once we get the MLP result we pass it

1094
00:49:08,220 --> 00:49:10,500
to the SMP to solve for unknown key or

1095
00:49:10,500 --> 00:49:12,720
state so we basically convert the system

1096
00:49:12,720 --> 00:49:14,280
of equation constant into system of

1097
00:49:14,280 --> 00:49:16,500
modular equation which is for uh

1098
00:49:16,500 --> 00:49:19,619
supported better in Z3 so we fed all

1099
00:49:19,619 --> 00:49:22,560
this constant to smt solver and if the

1100
00:49:22,560 --> 00:49:24,720
Hemingway class predictions are within

1101
00:49:24,720 --> 00:49:27,300
the tolerance the solver will return a

1102
00:49:27,300 --> 00:49:28,560
solution within the feasible time

1103
00:49:28,560 --> 00:49:31,260
hopefully it's a unique solution then we

1104
00:49:31,260 --> 00:49:33,440
can verify by feeding it back to the

1105
00:49:33,440 --> 00:49:36,540
cipher and we check the correctness if

1106
00:49:36,540 --> 00:49:38,520
the solution cannot be verified we

1107
00:49:38,520 --> 00:49:41,099
basically run the smt again this time we

1108
00:49:41,099 --> 00:49:42,599
increase the number of rows so we start

1109
00:49:42,599 --> 00:49:45,180
with a fixed number of rounds we

1110
00:49:45,180 --> 00:49:46,619
increase it and then we predict the

1111
00:49:46,619 --> 00:49:49,560
sequence every time if the solution

1112
00:49:49,560 --> 00:49:51,900
cannot be verified if the solution is

1113
00:49:51,900 --> 00:49:53,460
inconsistent means that one of

1114
00:49:53,460 --> 00:49:55,220
predicting prediction is falling outside

1115
00:49:55,220 --> 00:49:57,540
so we have to perform a recovery

1116
00:49:57,540 --> 00:50:00,060
procedure one of the solution we propose

1117
00:50:00,060 --> 00:50:01,619
is basically we just measured longer

1118
00:50:01,619 --> 00:50:03,359
rounds and then we just use partially

1119
00:50:03,359 --> 00:50:06,839
some of the rounds and if if is the

1120
00:50:06,839 --> 00:50:08,339
prediction is inconsistent we just use

1121
00:50:08,339 --> 00:50:11,220
another part of the runs for the attack

1122
00:50:11,220 --> 00:50:13,440
so this is the result when we tested it

1123
00:50:13,440 --> 00:50:15,599
on the pseudo random phase which this is

1124
00:50:15,599 --> 00:50:17,339
all the parameter which return the

1125
00:50:17,339 --> 00:50:19,800
unique solution so the the first one is

1126
00:50:19,800 --> 00:50:21,720
on the a is basically we thought the

1127
00:50:21,720 --> 00:50:23,400
Keystone so we only consider the update

1128
00:50:23,400 --> 00:50:25,260
function and the Heming weight and since

1129
00:50:25,260 --> 00:50:27,540
we are working on Hemingway 32-bit micro

1130
00:50:27,540 --> 00:50:30,839
uh micro controller so an arrow

1131
00:50:30,839 --> 00:50:32,640
tolerance of three the result is on the

1132
00:50:32,640 --> 00:50:35,960
bottom SW 32 3

1133
00:50:35,960 --> 00:50:38,640
tolerance of three and then we can see

1134
00:50:38,640 --> 00:50:42,359
like for number of rounds 180 the the

1135
00:50:42,359 --> 00:50:44,640
the the mean time is the shortest

1136
00:50:44,640 --> 00:50:46,440
because if you reduce the number of

1137
00:50:46,440 --> 00:50:47,640
rounds

1138
00:50:47,640 --> 00:50:50,400
um the smts will take much longer to

1139
00:50:50,400 --> 00:50:52,740
solve so in this case yeah we can we can

1140
00:50:52,740 --> 00:50:54,780
manage to recover the unique solution

1141
00:50:54,780 --> 00:50:57,000
for the without the key stream

1142
00:50:57,000 --> 00:50:58,680
information and if we provide a key

1143
00:50:58,680 --> 00:51:00,720
string function uh generation function

1144
00:51:00,720 --> 00:51:03,240
to the solver the solving time can be

1145
00:51:03,240 --> 00:51:05,880
even the number of runs can be reduced

1146
00:51:05,880 --> 00:51:08,520
and solving time is fast even faster

1147
00:51:08,520 --> 00:51:10,859
so to give a summary basically for

1148
00:51:10,859 --> 00:51:12,780
hummingway model we can recover the

1149
00:51:12,780 --> 00:51:16,020
internal State uh uh uniquely for the

1150
00:51:16,020 --> 00:51:17,940
pseudo random phase and therefore

1151
00:51:17,940 --> 00:51:21,119
initialization phase we can predict uh

1152
00:51:21,119 --> 00:51:22,740
predict the accurate with even higher

1153
00:51:22,740 --> 00:51:26,880
accuracy on a higher tolerance level uh

1154
00:51:26,880 --> 00:51:29,099
in because on initialization phase

1155
00:51:29,099 --> 00:51:30,780
you're only solving it for 80 bits

1156
00:51:30,780 --> 00:51:33,960
instead of the full 288 bit so this then

1157
00:51:33,960 --> 00:51:36,059
this we can sort it even faster and only

1158
00:51:36,059 --> 00:51:38,460
on 80 Seconds

1159
00:51:38,460 --> 00:51:40,079
we have shown the result of the

1160
00:51:40,079 --> 00:51:41,940
Hemingway model then we switch to having

1161
00:51:41,940 --> 00:51:43,859
distance model for Hemingway we have 33

1162
00:51:43,859 --> 00:51:45,720
classes for having distance model is

1163
00:51:45,720 --> 00:51:48,119
just simply we take it further so minus

1164
00:51:48,119 --> 00:51:51,960
32 to 32 so it's a 65-bit model we tried

1165
00:51:51,960 --> 00:51:54,359
first on the initialization phase up to

1166
00:51:54,359 --> 00:51:56,940
tolerance of one we can recover uh the

1167
00:51:56,940 --> 00:51:58,859
state B without needing any guess

1168
00:51:58,859 --> 00:52:01,440
however as we showed earlier that for

1169
00:52:01,440 --> 00:52:03,900
machine learning classifiers tolerance

1170
00:52:03,900 --> 00:52:05,339
was not that good so we have to increase

1171
00:52:05,339 --> 00:52:08,339
it but when we increase it further we it

1172
00:52:08,339 --> 00:52:11,460
needs another uh keep it gases so for

1173
00:52:11,460 --> 00:52:13,079
previously we showed that tolerance

1174
00:52:13,079 --> 00:52:14,400
three is

1175
00:52:14,400 --> 00:52:16,619
good enough but this time we need 20

1176
00:52:16,619 --> 00:52:19,559
guests uh big guesses for so there are

1177
00:52:19,559 --> 00:52:23,339
no phase we is uh to predict all 288

1178
00:52:23,339 --> 00:52:25,800
bits we will request 140 space bits

1179
00:52:25,800 --> 00:52:28,140
however uh it exceeds the exhaustive

1180
00:52:28,140 --> 00:52:29,640
search complexity on the key bit which

1181
00:52:29,640 --> 00:52:32,520
is actually a bit so this is done by

1182
00:52:32,520 --> 00:52:34,380
running the experiment like two days so

1183
00:52:34,380 --> 00:52:36,300
maybe if we increase more time it might

1184
00:52:36,300 --> 00:52:39,180
be so but we did investigate further

1185
00:52:39,180 --> 00:52:41,700
so to summarize basically this is our

1186
00:52:41,700 --> 00:52:44,579
framework we Pro we have first offline

1187
00:52:44,579 --> 00:52:47,220
state to get a machine learning model we

1188
00:52:47,220 --> 00:52:49,200
have we then Target the device another

1189
00:52:49,200 --> 00:52:51,720
device where we collected the tracers we

1190
00:52:51,720 --> 00:52:53,339
predict the class using machine learning

1191
00:52:53,339 --> 00:52:55,740
we corrected it using MLP if it's

1192
00:52:55,740 --> 00:52:57,359
inconsistent we perform a recovery

1193
00:52:57,359 --> 00:52:59,700
otherwise we pass it to SMP solver if

1194
00:52:59,700 --> 00:53:02,640
there's a no unique solution we rerun it

1195
00:53:02,640 --> 00:53:05,280
again and we try uh by increasing more

1196
00:53:05,280 --> 00:53:07,680
information and then we recover the key

1197
00:53:07,680 --> 00:53:11,099
State uh secret State or the key bits

1198
00:53:11,099 --> 00:53:12,900
Yeah so basically our framework will

1199
00:53:12,900 --> 00:53:15,059
show that yeah it works for our purpose

1200
00:53:15,059 --> 00:53:17,520
approach another question we are asked

1201
00:53:17,520 --> 00:53:19,079
before we have also tried a different

1202
00:53:19,079 --> 00:53:22,800
variety of SNL by in taking it testing

1203
00:53:22,800 --> 00:53:24,960
out multiple SNL scenario and then we

1204
00:53:24,960 --> 00:53:27,720
show that yeah as when the SNL goes

1205
00:53:27,720 --> 00:53:30,000
beyond 1.12 the success probably dropped

1206
00:53:30,000 --> 00:53:32,460
to zero so for our current setting yeah

1207
00:53:32,460 --> 00:53:34,619
this is our limit but we can probably

1208
00:53:34,619 --> 00:53:37,740
increase it further yeah this is the

1209
00:53:37,740 --> 00:53:40,740
future what uh what we can do so first

1210
00:53:40,740 --> 00:53:41,640
is

1211
00:53:41,640 --> 00:53:44,000
we consider another analytical approach

1212
00:53:44,000 --> 00:53:46,740
where it might work for less than

1213
00:53:46,740 --> 00:53:49,140
perfect accuracy so we can consider its

1214
00:53:49,140 --> 00:53:51,119
a hidden Markov model which maybe can

1215
00:53:51,119 --> 00:53:54,359
work again by switching it and remove

1216
00:53:54,359 --> 00:53:57,119
MLB we can also consider another leakage

1217
00:53:57,119 --> 00:53:58,680
function we are only considering having

1218
00:53:58,680 --> 00:54:00,900
distance but maybe another form will be

1219
00:54:00,900 --> 00:54:03,359
better and then lastly is improving the

1220
00:54:03,359 --> 00:54:06,180
ml since we are using basic uh ml such

1221
00:54:06,180 --> 00:54:09,300
as sorry we are using basic MLP

1222
00:54:09,300 --> 00:54:11,400
maybe it's not sufficient maybe you can

1223
00:54:11,400 --> 00:54:14,460
use others such as CNN RNA or lstm so

1224
00:54:14,460 --> 00:54:17,040
yeah that's all for my part uh thank you

1225
00:54:17,040 --> 00:54:18,480
any question

1226
00:54:18,480 --> 00:54:20,720
foreign

1227
00:54:30,960 --> 00:54:36,500
yeah one over there just wait for a mic

1228
00:54:45,480 --> 00:54:48,480
yes

1229
00:54:51,000 --> 00:54:54,000
foreign

1230
00:55:23,640 --> 00:55:26,420
thank you

1231
00:55:28,619 --> 00:55:31,980
we are some for one more question

1232
00:55:31,980 --> 00:55:35,000
a question over there

1233
00:55:40,319 --> 00:55:42,740
yes

1234
00:55:52,140 --> 00:55:55,079
which Family Medicine

1235
00:55:55,079 --> 00:55:58,079
foreign

1236
00:56:08,000 --> 00:56:12,380
there is one question just there

1237
00:56:22,740 --> 00:56:26,579
I think we did consider uh asking I

1238
00:56:26,579 --> 00:56:28,559
think the details is more on the paper I

1239
00:56:28,559 --> 00:56:30,540
didn't remember much about the details

1240
00:56:30,540 --> 00:56:32,819
sorry about

1241
00:56:32,819 --> 00:56:35,760
efficiency

1242
00:56:35,760 --> 00:56:40,700
okay let's thanks again dermantle

1243
00:56:45,420 --> 00:56:49,380
so I'll introduce the first and last

1244
00:56:49,380 --> 00:56:51,059
talk

1245
00:56:51,059 --> 00:56:53,280
for this session

1246
00:56:53,280 --> 00:56:55,319
so it will be about

1247
00:56:55,319 --> 00:56:56,660
nice to meet you

1248
00:56:56,660 --> 00:56:59,460
it will be about such an expectation

1249
00:56:59,460 --> 00:57:01,559
maximization attacks

1250
00:57:01,559 --> 00:57:06,680
and it will be given by Julian lugino

1251
00:57:13,440 --> 00:57:15,780
so this presentation is about site

1252
00:57:15,780 --> 00:57:17,700
Channel expectation maximization attack

1253
00:57:17,700 --> 00:57:20,040
and this is a joint work with Dr Wei

1254
00:57:20,040 --> 00:57:23,700
Chang Professor Silva gear on Olivia

1255
00:57:23,700 --> 00:57:26,460
so we will consider a device that is

1256
00:57:26,460 --> 00:57:28,619
performing cryptographic operations with

1257
00:57:28,619 --> 00:57:30,960
s-backed and protected with a first

1258
00:57:30,960 --> 00:57:34,380
order masking Contour measure and the

1259
00:57:34,380 --> 00:57:35,940
attacker will have access to

1260
00:57:35,940 --> 00:57:39,420
electromagnetic leakages

1261
00:57:39,420 --> 00:57:42,900
so to dive into the state of the art we

1262
00:57:42,900 --> 00:57:44,819
need to have three distinctions for the

1263
00:57:44,819 --> 00:57:48,420
super the different distinguishers so it

1264
00:57:48,420 --> 00:57:51,000
will be said to be supervised even if in

1265
00:57:51,000 --> 00:57:52,740
a

1266
00:57:52,740 --> 00:57:55,380
if it has access to the rule uh

1267
00:57:55,380 --> 00:57:57,240
information needs in the profiling phase

1268
00:57:57,240 --> 00:57:58,859
for instance the values of the mask the

1269
00:57:58,859 --> 00:58:01,140
values of the key and so on profiling

1270
00:58:01,140 --> 00:58:02,819
phase means that just prior to the

1271
00:58:02,819 --> 00:58:05,339
attack the distinguishers has access to

1272
00:58:05,339 --> 00:58:08,220
the database with traces on a parametric

1273
00:58:08,220 --> 00:58:11,579
attack is a is an attack where you regas

1274
00:58:11,579 --> 00:58:14,760
parameters before performing the attack

1275
00:58:14,760 --> 00:58:17,280
so there are already many attacks in the

1276
00:58:17,280 --> 00:58:19,800
state of the art namely the template

1277
00:58:19,800 --> 00:58:22,500
attack which is uh the most effective

1278
00:58:22,500 --> 00:58:25,559
one year when you can do a profiling

1279
00:58:25,559 --> 00:58:27,780
when you can cannot do profiling because

1280
00:58:27,780 --> 00:58:29,460
you do not add access to the values of

1281
00:58:29,460 --> 00:58:31,440
the mass for instance you can use

1282
00:58:31,440 --> 00:58:33,780
profile expectation maximization

1283
00:58:33,780 --> 00:58:36,900
suggested by Lemke and r

1284
00:58:36,900 --> 00:58:39,780
when you cannot do profiling at all

1285
00:58:39,780 --> 00:58:41,940
there are two uh three main

1286
00:58:41,940 --> 00:58:44,040
distinguisher the second order

1287
00:58:44,040 --> 00:58:46,440
correlation power analysis the mutual

1288
00:58:46,440 --> 00:58:49,799
information analysis on Casa and here we

1289
00:58:49,799 --> 00:58:52,319
try to bridge the following Gap what if

1290
00:58:52,319 --> 00:58:54,780
we do not have a pro signing also but we

1291
00:58:54,780 --> 00:58:58,099
want to use a parametric attack

1292
00:59:00,540 --> 00:59:03,480
so just for the notation we consider a

1293
00:59:03,480 --> 00:59:06,780
secret key K drawn uniformly with n Bits

1294
00:59:06,780 --> 00:59:09,299
uh plain text that are supposed to be

1295
00:59:09,299 --> 00:59:12,480
known by the attacker random mask iig

1296
00:59:12,480 --> 00:59:15,540
and sensitive variable denoted X at the

1297
00:59:15,540 --> 00:59:19,140
output of this box masked as I said

1298
00:59:19,140 --> 00:59:22,460
and uh to keep the presentation simple

1299
00:59:22,460 --> 00:59:25,920
we consider only a divided attack

1300
00:59:25,920 --> 00:59:28,680
because we have a first order masking so

1301
00:59:28,680 --> 00:59:31,500
this is the minimum number of

1302
00:59:31,500 --> 00:59:33,720
prayers that we need so we don't go

1303
00:59:33,720 --> 00:59:35,760
further but it will be increased if you

1304
00:59:35,760 --> 00:59:37,500
want

1305
00:59:37,500 --> 00:59:39,960
we consider freely catch mobile of the

1306
00:59:39,960 --> 00:59:41,640
register the first one is the simplest

1307
00:59:41,640 --> 00:59:43,859
one the ending wage located at all so

1308
00:59:43,859 --> 00:59:45,839
every bit in the registers leaks the

1309
00:59:45,839 --> 00:59:46,980
same way

1310
00:59:46,980 --> 00:59:49,559
if you want to add more peculiarities to

1311
00:59:49,559 --> 00:59:51,359
to do leakage you can consider that each

1312
00:59:51,359 --> 00:59:53,940
bit leaks differently so you add a DOT

1313
00:59:53,940 --> 00:59:55,980
product and each of the questions are a

1314
00:59:55,980 --> 00:59:57,960
bit different from each other and the

1315
00:59:57,960 --> 00:59:59,460
last one is the quadratic leakage model

1316
00:59:59,460 --> 01:00:02,099
where you consider interaction between

1317
01:00:02,099 --> 01:00:05,339
the bits so this this model are more

1318
01:00:05,339 --> 01:00:07,440
powerful to another because for the

1319
01:00:07,440 --> 01:00:09,299
linear leakage model if you keep the

1320
01:00:09,299 --> 01:00:11,160
vector a proportional to the old one

1321
01:00:11,160 --> 01:00:14,160
vector equivalent Amino hdkg model and

1322
01:00:14,160 --> 01:00:16,559
for the quadratically modality you take

1323
01:00:16,559 --> 01:00:18,960
a diagonal matrix then you recover the

1324
01:00:18,960 --> 01:00:21,240
linear education

1325
01:00:21,240 --> 01:00:23,579
and to keep all the the derivations

1326
01:00:23,579 --> 01:00:25,619
under the same route

1327
01:00:25,619 --> 01:00:28,440
we'll denote all uh the intermediate

1328
01:00:28,440 --> 01:00:31,079
values this way so that if we do not

1329
01:00:31,079 --> 01:00:33,839
precise the leakage model uh we'll only

1330
01:00:33,839 --> 01:00:36,960
precise it when it is necessary

1331
01:00:36,960 --> 01:00:40,559
so as I said the most effective uh

1332
01:00:40,559 --> 01:00:43,559
distinguisher was shown to be uh the

1333
01:00:43,559 --> 01:00:45,540
maximum likelihood by an early user

1334
01:00:45,540 --> 01:00:47,760
where you just take the key that

1335
01:00:47,760 --> 01:00:49,559
maximizes the likelihood after your

1336
01:00:49,559 --> 01:00:52,260
model where you know the parameters a

1337
01:00:52,260 --> 01:00:54,420
star and based on the real parameters

1338
01:00:54,420 --> 01:00:58,260
and that in reality you do not know Visa

1339
01:00:58,260 --> 01:01:00,180
Visa parameter so it cannot be performed

1340
01:01:00,180 --> 01:01:03,180
so you do a template attack where you

1341
01:01:03,180 --> 01:01:05,339
have estimation a ads on the other

1342
01:01:05,339 --> 01:01:08,700
methods the other one we consider in

1343
01:01:08,700 --> 01:01:10,680
this presentation is second order CPA

1344
01:01:10,680 --> 01:01:12,900
when you take the key that maximizes the

1345
01:01:12,900 --> 01:01:14,700
percent correlation coefficients between

1346
01:01:14,700 --> 01:01:17,760
the model and the traces when you take

1347
01:01:17,760 --> 01:01:19,559
when you took as a combination function

1348
01:01:19,559 --> 01:01:24,299
the centroid project of the two shares

1349
01:01:24,299 --> 01:01:27,720
so no uh we dive into a expectation

1350
01:01:27,720 --> 01:01:29,880
maximization or search and Analysis it

1351
01:01:29,880 --> 01:01:32,220
is made of two steps so it is an

1352
01:01:32,220 --> 01:01:34,520
iterative algorithm at first you

1353
01:01:34,520 --> 01:01:38,280
initialize uh arbitrarily the your

1354
01:01:38,280 --> 01:01:40,260
parameter A and B if you have a guess

1355
01:01:40,260 --> 01:01:43,200
it's better because he's a one weakness

1356
01:01:43,200 --> 01:01:45,780
of em because it depends on the

1357
01:01:45,780 --> 01:01:47,400
initialization

1358
01:01:47,400 --> 01:01:49,440
and then you perform iteratively

1359
01:01:49,440 --> 01:01:51,660
maximization step on expectation step

1360
01:01:51,660 --> 01:01:54,720
you do the expectation other The Mask or

1361
01:01:54,720 --> 01:01:56,640
the parameters that you don't know about

1362
01:01:56,640 --> 01:02:00,180
and then you maximize the parameter once

1363
01:02:00,180 --> 01:02:02,520
you have a average out these things that

1364
01:02:02,520 --> 01:02:04,079
you you don't know

1365
01:02:04,079 --> 01:02:07,380
so this is not really explicit as it is

1366
01:02:07,380 --> 01:02:11,460
so we'll uh no derive exactly how to do

1367
01:02:11,460 --> 01:02:13,920
each step on the insta on the m-step for

1368
01:02:13,920 --> 01:02:16,500
site Channel analysis

1369
01:02:16,500 --> 01:02:19,680
so to do the expectation we need just to

1370
01:02:19,680 --> 01:02:22,020
compute uh the posterior probability

1371
01:02:22,020 --> 01:02:25,020
that the mask m is being used for the

1372
01:02:25,020 --> 01:02:28,140
traces Q given observation why if you

1373
01:02:28,140 --> 01:02:32,220
have fixed the parameters AP and BP at a

1374
01:02:32,220 --> 01:02:33,540
step p

1375
01:02:33,540 --> 01:02:35,700
and using base base formula you obtain

1376
01:02:35,700 --> 01:02:37,440
this expression

1377
01:02:37,440 --> 01:02:39,960
so this enables to compute the

1378
01:02:39,960 --> 01:02:42,619
expectations that where

1379
01:02:42,619 --> 01:02:46,200
you see that it just simplifies and this

1380
01:02:46,200 --> 01:02:48,059
is a minimum because I remove the minus

1381
01:02:48,059 --> 01:02:50,339
to a quadratic form

1382
01:02:50,339 --> 01:02:53,660
quadratic expression

1383
01:02:53,819 --> 01:02:55,980
then we can express the maximization

1384
01:02:55,980 --> 01:02:57,780
step for the different leakage model

1385
01:02:57,780 --> 01:02:58,920
this time

1386
01:02:58,920 --> 01:03:00,780
if we have the amine weight leakage

1387
01:03:00,780 --> 01:03:02,880
model this is a simple you just compute

1388
01:03:02,880 --> 01:03:05,280
the covariance on the valence

1389
01:03:05,280 --> 01:03:08,280
on you you do a regression when you see

1390
01:03:08,280 --> 01:03:10,559
that this is the formula for simple CPA

1391
01:03:10,559 --> 01:03:13,260
when this is not mask so what it means

1392
01:03:13,260 --> 01:03:16,559
which is interesting is that the uem

1393
01:03:16,559 --> 01:03:19,799
here its averages out of the Mask then

1394
01:03:19,799 --> 01:03:22,260
you do a simple CPA

1395
01:03:22,260 --> 01:03:24,960
then it averages over the mask then the

1396
01:03:24,960 --> 01:03:27,660
simple CPA until there is a convergence

1397
01:03:27,660 --> 01:03:30,359
and actually when you do the derivations

1398
01:03:30,359 --> 01:03:32,700
and compute the alpha Q

1399
01:03:32,700 --> 01:03:34,799
if your estimations of the parameter A

1400
01:03:34,799 --> 01:03:37,680
and B is good then Alpha Q it means that

1401
01:03:37,680 --> 01:03:40,500
you are learning The Mask so if you knew

1402
01:03:40,500 --> 01:03:42,780
the mask you will do a CPA for instance

1403
01:03:42,780 --> 01:03:46,380
which has been shown to be Optimum

1404
01:03:46,380 --> 01:03:48,540
so here we don't put the max we average

1405
01:03:48,540 --> 01:03:51,180
over the mask and we do CPA we have a

1406
01:03:51,180 --> 01:03:53,579
regular Mass we do CPN sorry

1407
01:03:53,579 --> 01:03:55,740
if you have a linear linkage model this

1408
01:03:55,740 --> 01:03:57,900
is the same thing that we generalize the

1409
01:03:57,900 --> 01:03:59,640
maximization we compute The

1410
01:03:59,640 --> 01:04:01,319
autocorrelation Matrix on the entire

1411
01:04:01,319 --> 01:04:03,540
correlation vector and we do regression

1412
01:04:03,540 --> 01:04:05,160
the same way

1413
01:04:05,160 --> 01:04:07,200
though for the quadratic model it's

1414
01:04:07,200 --> 01:04:10,559
harder to to see so there is no closed

1415
01:04:10,559 --> 01:04:12,119
form expression to to do the

1416
01:04:12,119 --> 01:04:14,280
maximization so you can do a Guardian

1417
01:04:14,280 --> 01:04:17,460
based optimizer it can be quick because

1418
01:04:17,460 --> 01:04:19,740
you can compute explicitly the formula

1419
01:04:19,740 --> 01:04:22,520
for Dozier problem

1420
01:04:23,960 --> 01:04:26,099
do we proceed

1421
01:04:26,099 --> 01:04:28,980
first we normalize and center the traces

1422
01:04:28,980 --> 01:04:30,660
then we initialize the parameter

1423
01:04:30,660 --> 01:04:32,700
arbitrarily but if you can choose it

1424
01:04:32,700 --> 01:04:35,040
it's better as I said

1425
01:04:35,040 --> 01:04:37,440
then we compute the base posterior to to

1426
01:04:37,440 --> 01:04:40,319
do the expectation you see this CQ here

1427
01:04:40,319 --> 01:04:42,780
that I didn't told before just a trick

1428
01:04:42,780 --> 01:04:45,839
to improve this numerical stability of

1429
01:04:45,839 --> 01:04:48,599
the the log sum X because your the log

1430
01:04:48,599 --> 01:04:50,700
of sum of exponential we can be which

1431
01:04:50,700 --> 01:04:52,920
can be numerically unstable so this

1432
01:04:52,920 --> 01:04:55,440
small trick improves the miracle

1433
01:04:55,440 --> 01:04:57,359
stability

1434
01:04:57,359 --> 01:05:00,480
and then the m-step and you see I told

1435
01:05:00,480 --> 01:05:03,119
you earlier that uh you can increase the

1436
01:05:03,119 --> 01:05:05,760
order of the attack if you want and here

1437
01:05:05,760 --> 01:05:08,819
in this for loop I equal 1 2 you can

1438
01:05:08,819 --> 01:05:12,000
choose whatever Bond you want so if you

1439
01:05:12,000 --> 01:05:14,280
have a let's say p shares you can do the

1440
01:05:14,280 --> 01:05:17,160
loop for what I equal one until B and

1441
01:05:17,160 --> 01:05:19,140
maximize for each of the shares your

1442
01:05:19,140 --> 01:05:21,839
leakage or coefficients

1443
01:05:21,839 --> 01:05:24,180
until you have convergence and you can

1444
01:05:24,180 --> 01:05:26,099
even choose different leakage model on

1445
01:05:26,099 --> 01:05:28,920
the different shares that we did on the

1446
01:05:28,920 --> 01:05:30,920
on the simulations

1447
01:05:30,920 --> 01:05:33,420
you pick the key that maximizes the

1448
01:05:33,420 --> 01:05:35,339
goodness of it

1449
01:05:35,339 --> 01:05:38,040
now I come back to the PM that I told

1450
01:05:38,040 --> 01:05:39,960
you about in the introduction to know

1451
01:05:39,960 --> 01:05:42,660
that you know what PM is and the idea is

1452
01:05:42,660 --> 01:05:45,299
to use VM to profile a template for HK

1453
01:05:45,299 --> 01:05:47,700
prophecies so the difference with our

1454
01:05:47,700 --> 01:05:51,299
attack is that uh you need a prior data

1455
01:05:51,299 --> 01:05:54,119
set to do a template attack

1456
01:05:54,119 --> 01:05:58,619
and this is useful when you have a data

1457
01:05:58,619 --> 01:06:01,099
set but you don't know the mask

1458
01:06:01,099 --> 01:06:03,480
while our attack is interesting when you

1459
01:06:03,480 --> 01:06:06,079
do not have a data set

1460
01:06:06,079 --> 01:06:10,200
or if you attended the yesterday's deep

1461
01:06:10,200 --> 01:06:13,200
learning based SCA tutorials when there

1462
01:06:13,200 --> 01:06:15,420
is no transportability that means you

1463
01:06:15,420 --> 01:06:18,540
cannot train a model on a on a clone

1464
01:06:18,540 --> 01:06:20,819
device on set that this is exactly the

1465
01:06:20,819 --> 01:06:25,140
same model for another device

1466
01:06:25,140 --> 01:06:28,740
so here are the numerical evaluations

1467
01:06:28,740 --> 01:06:31,559
and what we did to to to see if it was

1468
01:06:31,559 --> 01:06:34,020
interesting to use uh the linear model

1469
01:06:34,020 --> 01:06:37,640
or the amine waste model was to

1470
01:06:37,640 --> 01:06:41,099
add epistemic knowledge that is we we

1471
01:06:41,099 --> 01:06:42,839
add noise to the coefficient of the

1472
01:06:42,839 --> 01:06:44,400
leakage model starting from an unwind

1473
01:06:44,400 --> 01:06:46,559
leakage model as if the epistemic noise

1474
01:06:46,559 --> 01:06:49,880
is zero you just have a

1475
01:06:50,299 --> 01:06:53,760
and if it is I then you tends more and

1476
01:06:53,760 --> 01:06:55,319
more toward the linear leakage model

1477
01:06:55,319 --> 01:06:59,000
that is a completely random

1478
01:07:00,420 --> 01:07:03,839
so you see that uh the uem with a

1479
01:07:03,839 --> 01:07:05,579
running weight leakage model Works quite

1480
01:07:05,579 --> 01:07:07,680
well and actually it's uh almost as

1481
01:07:07,680 --> 01:07:09,480
efficient as the the template attack

1482
01:07:09,480 --> 01:07:12,059
with amino acid leakage model

1483
01:07:12,059 --> 01:07:15,780
on the the uem with linear leakage model

1484
01:07:15,780 --> 01:07:19,039
it works uh

1485
01:07:19,039 --> 01:07:22,500
uh less well than the um lean on even

1486
01:07:22,500 --> 01:07:24,480
the second order CP at the beginning

1487
01:07:24,480 --> 01:07:27,119
but at some point we've providing enough

1488
01:07:27,119 --> 01:07:29,880
number of traces it becomes better but

1489
01:07:29,880 --> 01:07:34,380
still it is not uh close to the maximum

1490
01:07:34,380 --> 01:07:37,140
likelihood with a linear leakage model

1491
01:07:37,140 --> 01:07:39,420
that you see on the on the corner in

1492
01:07:39,420 --> 01:07:41,400
blue light

1493
01:07:41,400 --> 01:07:44,339
under all the attacks here I'll perform

1494
01:07:44,339 --> 01:07:47,039
a second order CPU

1495
01:07:47,039 --> 01:07:49,920
suggest maybe you see that

1496
01:07:49,920 --> 01:07:53,940
um lean does not really generalize well

1497
01:07:53,940 --> 01:07:57,240
so to use a regularization

1498
01:07:57,240 --> 01:08:00,720
as suggested already in the in Rich

1499
01:08:00,720 --> 01:08:05,400
regression for nanoscaler ship

1500
01:08:05,400 --> 01:08:08,460
on the so we add this regulation down to

1501
01:08:08,460 --> 01:08:10,440
see if we if we narrow the space that we

1502
01:08:10,440 --> 01:08:13,799
explore it improves the the attack

1503
01:08:13,799 --> 01:08:16,319
and we did this we did this with the

1504
01:08:16,319 --> 01:08:18,540
quadratic leakage model but even with

1505
01:08:18,540 --> 01:08:21,960
this the quadratic leakage model does

1506
01:08:21,960 --> 01:08:25,080
not seem to work quite well with uh with

1507
01:08:25,080 --> 01:08:26,219
the

1508
01:08:26,219 --> 01:08:29,100
uem so in this case we suggest to use

1509
01:08:29,100 --> 01:08:30,660
instead a

1510
01:08:30,660 --> 01:08:33,960
uem amp that performs better

1511
01:08:33,960 --> 01:08:36,120
because here you see that it's even

1512
01:08:36,120 --> 01:08:39,299
outperformed by second order CP

1513
01:08:39,299 --> 01:08:42,899
now we compare it with profile DM so

1514
01:08:42,899 --> 01:08:45,960
you need to know two number of traces

1515
01:08:45,960 --> 01:08:48,120
for PM because you need to know how many

1516
01:08:48,120 --> 01:08:49,979
traces for the profiling on how many

1517
01:08:49,979 --> 01:08:53,880
traces for the attack so QP here is the

1518
01:08:53,880 --> 01:08:56,279
number of traces for profiling for hka

1519
01:08:56,279 --> 01:08:58,560
purposes so here as we target the

1520
01:08:58,560 --> 01:09:01,380
present Xbox with four bits that means

1521
01:09:01,380 --> 01:09:05,100
we have 16 times QPR traces for training

1522
01:09:05,100 --> 01:09:06,719
a model

1523
01:09:06,719 --> 01:09:08,939
and you see that it all performed the

1524
01:09:08,939 --> 01:09:12,238
UVM so if you can do the profile DM or

1525
01:09:12,238 --> 01:09:14,939
do the profiling image it's better

1526
01:09:14,939 --> 01:09:17,219
and it rapidly as you increase the

1527
01:09:17,219 --> 01:09:19,620
number of QP it rapidly increased

1528
01:09:19,620 --> 01:09:21,839
towards the maximum lately and it

1529
01:09:21,839 --> 01:09:23,759
generally is better it does not suffer

1530
01:09:23,759 --> 01:09:25,620
from this uh kind of other fitting

1531
01:09:25,620 --> 01:09:27,479
effect that we face

1532
01:09:27,479 --> 01:09:30,060
uh one uh

1533
01:09:30,060 --> 01:09:33,000
imitation for the pem compared to a uem

1534
01:09:33,000 --> 01:09:35,520
is also transportability because if you

1535
01:09:35,520 --> 01:09:37,920
have a prior

1536
01:09:37,920 --> 01:09:41,100
data from another device but it's not a

1537
01:09:41,100 --> 01:09:44,580
mismatched then DM is performed by uem

1538
01:09:44,580 --> 01:09:47,420
because um is not

1539
01:09:47,420 --> 01:09:50,219
affected by mismatch because there is no

1540
01:09:50,219 --> 01:09:52,020
profiling

1541
01:09:52,020 --> 01:09:54,900
and finally we apply these attacks to

1542
01:09:54,900 --> 01:09:57,420
the GPA contest

1543
01:09:57,420 --> 01:09:59,880
on the it worked quite well you see that

1544
01:09:59,880 --> 01:10:00,960
um lean

1545
01:10:00,960 --> 01:10:02,460
we have the same problem it does not

1546
01:10:02,460 --> 01:10:05,880
really work well without regularization

1547
01:10:05,880 --> 01:10:09,000
a bit better than second order CPA at

1548
01:10:09,000 --> 01:10:10,140
some point but

1549
01:10:10,140 --> 01:10:13,739
for less than 150 traces not better

1550
01:10:13,739 --> 01:10:17,160
but if we had regularization on the if

1551
01:10:17,160 --> 01:10:20,040
we consider here linear leakage

1552
01:10:20,040 --> 01:10:22,560
only on the Xbox because for the I mean

1553
01:10:22,560 --> 01:10:24,780
weight at the output just of the The

1554
01:10:24,780 --> 01:10:28,679
Mask which is very uh it follows the I

1555
01:10:28,679 --> 01:10:31,260
mean weight model and it's a bit better

1556
01:10:31,260 --> 01:10:33,960
than the um with just I mean weight of

1557
01:10:33,960 --> 01:10:35,880
the catch mobile but not that much you

1558
01:10:35,880 --> 01:10:38,640
see it does not go that far above the

1559
01:10:38,640 --> 01:10:40,920
maximum likelihood with a handling wave

1560
01:10:40,920 --> 01:10:43,199
indicator

1561
01:10:43,199 --> 01:10:44,760
so

1562
01:10:44,760 --> 01:10:46,440
um is interesting when you cannot

1563
01:10:46,440 --> 01:10:47,760
profile

1564
01:10:47,760 --> 01:10:50,280
uh it works quite well in terms of

1565
01:10:50,280 --> 01:10:53,100
computation it can be adapted to higher

1566
01:10:53,100 --> 01:10:54,960
order attacks you know you you add

1567
01:10:54,960 --> 01:10:57,420
shares in the loop and you can choose

1568
01:10:57,420 --> 01:10:59,699
different leakage on the shares as you

1569
01:10:59,699 --> 01:11:02,940
want though It suffers from

1570
01:11:02,940 --> 01:11:06,659
on kind of other fitting so if you can

1571
01:11:06,659 --> 01:11:08,580
do profiling uh

1572
01:11:08,580 --> 01:11:12,239
it's better but if you can't we it's

1573
01:11:12,239 --> 01:11:14,400
credible maybe to try uem

1574
01:11:14,400 --> 01:11:18,360
and it is also interesting when you

1575
01:11:18,360 --> 01:11:21,739
when you have a mismatch

1576
01:11:22,140 --> 01:11:24,659
so thank you for your attention if you

1577
01:11:24,659 --> 01:11:27,139
have any questions

1578
01:11:34,020 --> 01:11:36,480
thank you for the talk

1579
01:11:36,480 --> 01:11:40,199
um we have time for some question

1580
01:11:40,199 --> 01:11:43,620
okay I'll restart and so even when

1581
01:11:43,620 --> 01:11:45,600
profiling is available you propose to

1582
01:11:45,600 --> 01:11:51,900
use the uem to to deal with the

1583
01:11:51,900 --> 01:11:55,560
portability or transportability issue

1584
01:11:55,560 --> 01:11:57,480
um I was wondering another solution for

1585
01:11:57,480 --> 01:12:00,000
this problem especially in machine

1586
01:12:00,000 --> 01:12:03,739
learning deep learning context

1587
01:12:04,440 --> 01:12:06,600
yeah actually you suggest to use your

1588
01:12:06,600 --> 01:12:09,360
your methodology unsupervised to deal

1589
01:12:09,360 --> 01:12:11,219
with the portability issue or as you

1590
01:12:11,219 --> 01:12:13,320
call this transportability issue so when

1591
01:12:13,320 --> 01:12:14,940
you have a mismatch between your

1592
01:12:14,940 --> 01:12:18,420
templates and your attack on your device

1593
01:12:18,420 --> 01:12:20,880
and so well another solution to that

1594
01:12:20,880 --> 01:12:23,340
problem would be to perform profiling

1595
01:12:23,340 --> 01:12:25,520
onto several

1596
01:12:25,520 --> 01:12:28,739
clone samples in order to get a model

1597
01:12:28,739 --> 01:12:30,960
that takes somehow into accounts the

1598
01:12:30,960 --> 01:12:33,540
best epistemic noise

1599
01:12:33,540 --> 01:12:36,060
so I wanted to ask you do you think that

1600
01:12:36,060 --> 01:12:38,040
this kind of approach could outperform

1601
01:12:38,040 --> 01:12:39,780
you your

1602
01:12:39,780 --> 01:12:43,560
uem or not uh I think that there is a

1603
01:12:43,560 --> 01:12:45,840
non-dollarly model that is uh simple

1604
01:12:45,840 --> 01:12:48,600
enough it could perform the uem sure

1605
01:12:48,600 --> 01:12:52,920
enough Chrome devices uh do it will

1606
01:12:52,920 --> 01:12:56,940
require more more computations on the I

1607
01:12:56,940 --> 01:12:59,940
think it also depends on the

1608
01:12:59,940 --> 01:13:03,060
on the mismatch if it is if um

1609
01:13:03,060 --> 01:13:05,100
all the Clones are quite similar with

1610
01:13:05,100 --> 01:13:07,400
some difference then yes

1611
01:13:07,400 --> 01:13:10,140
this will work but if there is really a

1612
01:13:10,140 --> 01:13:12,840
mismatch between the devices or

1613
01:13:12,840 --> 01:13:14,699
um will perform better

1614
01:13:14,699 --> 01:13:18,060
so I think it depends on the useless

1615
01:13:18,060 --> 01:13:19,440
thank you

1616
01:13:19,440 --> 01:13:22,879
is there any question in the room

1617
01:13:26,820 --> 01:13:29,699
in the chat meter

1618
01:13:29,699 --> 01:13:31,860
um

1619
01:13:31,860 --> 01:13:34,920
how do you think uem would compare with

1620
01:13:34,920 --> 01:13:37,199
non-parametric methodologies such like

1621
01:13:37,199 --> 01:13:39,900
Mutual information analysis yes that

1622
01:13:39,900 --> 01:13:42,500
would be interesting to compare I think

1623
01:13:42,500 --> 01:13:46,739
they will compare quite well the issue

1624
01:13:46,739 --> 01:13:48,900
with a non-parametric attack is that

1625
01:13:48,900 --> 01:13:51,179
they need more nutrases for instance to

1626
01:13:51,179 --> 01:13:54,000
avoid empty beans and that kind of thing

1627
01:13:54,000 --> 01:13:56,480
so I think

1628
01:13:56,480 --> 01:13:58,440
non-parametric attack will do better

1629
01:13:58,440 --> 01:14:01,440
when you do not have a precise idea of

1630
01:14:01,440 --> 01:14:04,320
the model but uem I think it's better if

1631
01:14:04,320 --> 01:14:06,060
you if you know that you have any catch

1632
01:14:06,060 --> 01:14:08,219
model for instance it's better to use it

1633
01:14:08,219 --> 01:14:11,520
because in statistics in general it's

1634
01:14:11,520 --> 01:14:14,580
easier to do parametric statistics when

1635
01:14:14,580 --> 01:14:16,199
when you have a

1636
01:14:16,199 --> 01:14:17,820
Matrix course

1637
01:14:17,820 --> 01:14:20,480
thank you

1638
01:14:23,060 --> 01:14:27,440
well we saved six minutes

1639
01:14:27,600 --> 01:14:30,960
Another Western from there

1640
01:14:30,960 --> 01:14:33,679
well I I ask you another one

1641
01:14:33,679 --> 01:14:38,239
and I remember that well maybe yesterday

1642
01:14:38,239 --> 01:14:40,920
has answered that question but I wanted

1643
01:14:40,920 --> 01:14:43,800
to ask you the same thing

1644
01:14:43,800 --> 01:14:45,840
um you clearly dissociated in your paper

1645
01:14:45,840 --> 01:14:49,140
in two terms that a lot of people in our

1646
01:14:49,140 --> 01:14:51,179
community use as synonyms which is

1647
01:14:51,179 --> 01:14:53,640
profiled and supervised

1648
01:14:53,640 --> 01:14:55,739
may you explain the difference between

1649
01:14:55,739 --> 01:14:58,380
these two terms in your work what I mean

1650
01:14:58,380 --> 01:15:01,020
is when profiling means that you have

1651
01:15:01,020 --> 01:15:03,000
higher data

1652
01:15:03,000 --> 01:15:06,659
uh to uh to learn a model unsupervised

1653
01:15:06,659 --> 01:15:09,480
means that your credit are labeled so

1654
01:15:09,480 --> 01:15:11,940
you know all the intermediate values for

1655
01:15:11,940 --> 01:15:13,620
instance the mask

1656
01:15:13,620 --> 01:15:16,500
in this respect the PM uh already

1657
01:15:16,500 --> 01:15:19,320
existing in the literature the qualified

1658
01:15:19,320 --> 01:15:21,480
but non-supervised on our attack is

1659
01:15:21,480 --> 01:15:23,520
non-profile non-supervised contemporated

1660
01:15:23,520 --> 01:15:25,500
profile supervised

1661
01:15:25,500 --> 01:15:27,239
thank you very much

1662
01:15:27,239 --> 01:15:30,540
so we can thank you Julia again

1663
01:15:30,540 --> 01:15:32,900
thank you

1664
01:15:36,480 --> 01:15:39,840
so this closed the first session let's

1665
01:15:39,840 --> 01:15:41,340
keep in mind that the second session

1666
01:15:41,340 --> 01:15:43,920
will start at 10 50.

1667
01:15:43,920 --> 01:15:45,600
and keeping that in mind in the

1668
01:15:45,600 --> 01:15:49,159
meanwhile enjoy the coffee break

1669
01:16:03,840 --> 01:16:05,840
um

1670
01:16:22,280 --> 01:16:25,280
thank you

