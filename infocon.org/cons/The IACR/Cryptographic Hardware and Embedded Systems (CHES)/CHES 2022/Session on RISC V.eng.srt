1
00:01:11,820 --> 00:01:14,820
foreign

2
00:01:40,700 --> 00:01:43,759
thank you

3
00:02:25,620 --> 00:02:28,220
foreign

4
00:02:31,140 --> 00:02:34,279
the people today

5
00:02:39,020 --> 00:02:41,580
hopefully little whiskey got drink

6
00:02:41,580 --> 00:02:44,940
s yeah I didn't see my message oh no I

7
00:02:44,940 --> 00:02:47,459
haven't looked at Twitter yet oh gosh

8
00:02:47,459 --> 00:02:50,360
oh no

9
00:02:51,980 --> 00:02:55,340
for the questions

10
00:02:58,200 --> 00:03:00,920
foreign

11
00:03:42,000 --> 00:03:45,000
foreign

12
00:04:20,358 --> 00:04:23,479
thank you

13
00:04:24,600 --> 00:04:27,460
foreign

14
00:04:27,460 --> 00:04:30,659
[Music]

15
00:04:52,759 --> 00:04:55,759
thank you

16
00:05:16,340 --> 00:05:19,638
in the emergency

17
00:05:22,340 --> 00:05:25,320
if someone lost their passport we have

18
00:05:25,320 --> 00:05:28,759
one at the registration desk

19
00:05:56,220 --> 00:05:58,220
um

20
00:06:04,820 --> 00:06:07,899
[Music]

21
00:06:07,940 --> 00:06:10,979
is in the room your password is at the

22
00:06:10,979 --> 00:06:13,199
registration desk

23
00:06:13,199 --> 00:06:16,199
o

24
00:07:01,380 --> 00:07:04,560
okay thank you everyone I think we'll

25
00:07:04,560 --> 00:07:07,560
start the final session here of Chess so

26
00:07:07,560 --> 00:07:09,479
thank you for sticking around

27
00:07:09,479 --> 00:07:11,340
um this will be an exciting session on

28
00:07:11,340 --> 00:07:13,740
risk five uh so there's three talks that

29
00:07:13,740 --> 00:07:16,800
are all in person so to keep out the day

30
00:07:16,800 --> 00:07:19,020
strong we have in-person talks keep you

31
00:07:19,020 --> 00:07:20,280
excited

32
00:07:20,280 --> 00:07:22,319
um so the first talk we'll begin with

33
00:07:22,319 --> 00:07:24,660
bypassing the isolated execution on risk

34
00:07:24,660 --> 00:07:27,240
5 using side Channel assisted faulting

35
00:07:27,240 --> 00:07:29,460
text fault injection in its

36
00:07:29,460 --> 00:07:32,039
countermeasures and we have fewer

37
00:07:32,039 --> 00:07:33,840
nashimoto here to give the talk so I'll

38
00:07:33,840 --> 00:07:35,580
let you take it away

39
00:07:35,580 --> 00:07:37,560
thank you for the introduction I'm

40
00:07:37,560 --> 00:07:40,080
Johannes Moto from Eric Drake Japan

41
00:07:40,080 --> 00:07:42,300
today I'm going to talk about Ford

42
00:07:42,300 --> 00:07:45,300
attacks on isolated execution only five

43
00:07:45,300 --> 00:07:47,880
and it's kind of measure

44
00:07:47,880 --> 00:07:50,039
in the beginning I'd like to show you

45
00:07:50,039 --> 00:07:52,919
the overview of my presentation

46
00:07:52,919 --> 00:07:54,599
um what I want to say in this

47
00:07:54,599 --> 00:07:57,599
presentation is a critical interaction

48
00:07:57,599 --> 00:08:00,000
that skipped by Ford injection and

49
00:08:00,000 --> 00:08:02,340
isolated execution only five can be

50
00:08:02,340 --> 00:08:04,680
compromised

51
00:08:04,680 --> 00:08:07,039
our proposed attacks keeps the

52
00:08:07,039 --> 00:08:09,360
reconfiguration of the isolation

53
00:08:09,360 --> 00:08:12,360
settings at context switch

54
00:08:12,360 --> 00:08:14,940
and obtain the previous permission like

55
00:08:14,940 --> 00:08:16,400
this

56
00:08:16,400 --> 00:08:18,960
we also propose the software-based

57
00:08:18,960 --> 00:08:20,759
countermeasure that makes the attack

58
00:08:20,759 --> 00:08:24,259
completely unsuccessful

59
00:08:24,840 --> 00:08:27,000
here is the outline of my presentation

60
00:08:27,000 --> 00:08:30,180
it are six parts now let's begin with

61
00:08:30,180 --> 00:08:32,640
the background

62
00:08:32,640 --> 00:08:35,880
a trusted execution environment or t is

63
00:08:35,880 --> 00:08:39,179
a scale area of a processor isolated by

64
00:08:39,179 --> 00:08:41,940
Hardware sport it's a promising content

65
00:08:41,940 --> 00:08:44,039
measure to protect scale application

66
00:08:44,039 --> 00:08:45,839
from Mauritius and vulnerable

67
00:08:45,839 --> 00:08:47,399
applications

68
00:08:47,399 --> 00:08:50,880
so our attack Target is keys

69
00:08:50,880 --> 00:08:53,760
and ultrasound and interest GX are

70
00:08:53,760 --> 00:08:57,140
famously neighbor technology

71
00:08:57,360 --> 00:08:59,760
for the injection attacks and you know

72
00:08:59,760 --> 00:09:01,980
inject malicious signals into a

73
00:09:01,980 --> 00:09:04,680
processor such as voltage clock and

74
00:09:04,680 --> 00:09:08,160
razor electromagnetic waves and Decor

75
00:09:08,160 --> 00:09:10,680
cause interaction skips and data

76
00:09:10,680 --> 00:09:12,839
production so they are threat to

77
00:09:12,839 --> 00:09:15,120
security mechanisms and cryptographic

78
00:09:15,120 --> 00:09:17,480
operations

79
00:09:17,880 --> 00:09:21,120
this table summarizes are a feature of

80
00:09:21,120 --> 00:09:24,480
existing studies on 40 injection attacks

81
00:09:24,480 --> 00:09:27,080
on teeth

82
00:09:27,080 --> 00:09:30,080
foreign

83
00:09:31,160 --> 00:09:34,500
targets cryptography on inter and

84
00:09:34,500 --> 00:09:38,040
interest checks and um first song so we

85
00:09:38,040 --> 00:09:41,040
aim for a different uh different way to

86
00:09:41,040 --> 00:09:45,060
attack their another technology

87
00:09:45,060 --> 00:09:48,300
here are our motivating questions

88
00:09:48,300 --> 00:09:50,180
um is there any

89
00:09:50,180 --> 00:09:52,920
generic by pressing attack only five

90
00:09:52,920 --> 00:09:56,399
best Keys other than crypto analysis is

91
00:09:56,399 --> 00:09:58,800
it a realistic attack including fourth

92
00:09:58,800 --> 00:10:01,500
parameter extraction and is the

93
00:10:01,500 --> 00:10:03,959
purposing attack on risk 5 applicable to

94
00:10:03,959 --> 00:10:06,000
other T Technologies

95
00:10:06,000 --> 00:10:08,339
the answer is yes to all of them

96
00:10:08,339 --> 00:10:11,100
according to our work let's take a

97
00:10:11,100 --> 00:10:13,200
closer look

98
00:10:13,200 --> 00:10:16,080
first I'll explain the security on risk

99
00:10:16,080 --> 00:10:18,420
5.

100
00:10:18,420 --> 00:10:20,700
I represent the major components

101
00:10:20,700 --> 00:10:23,399
comprising risk Fire based keys

102
00:10:23,399 --> 00:10:26,880
these aims to control access to run run

103
00:10:26,880 --> 00:10:31,019
and peripherals for each application or

104
00:10:31,019 --> 00:10:34,680
applications between two between secure

105
00:10:34,680 --> 00:10:37,260
and non-scure areas

106
00:10:37,260 --> 00:10:39,080
foreign

107
00:10:39,080 --> 00:10:42,660
memory access must be monitored it is

108
00:10:42,660 --> 00:10:44,579
required to check memory access settings

109
00:10:44,579 --> 00:10:48,180
and decide whether it is allowed

110
00:10:48,180 --> 00:10:50,579
a physical and a hardware unit called

111
00:10:50,579 --> 00:10:52,560
physical memory protection or PMP

112
00:10:52,560 --> 00:10:54,660
hundreds tests

113
00:10:54,660 --> 00:10:57,000
and the previous levels are particular

114
00:10:57,000 --> 00:10:59,760
separation which to find the access

115
00:10:59,760 --> 00:11:02,339
right to secure these settings in ice

116
00:11:02,339 --> 00:11:04,140
level

117
00:11:04,140 --> 00:11:06,360
let's see more details

118
00:11:06,360 --> 00:11:09,300
the PMP aims to assign read write and

119
00:11:09,300 --> 00:11:11,459
execution permission to a specific

120
00:11:11,459 --> 00:11:13,019
memory ranges

121
00:11:13,019 --> 00:11:16,019
PMP comprises of config and address

122
00:11:16,019 --> 00:11:19,320
registers and they Define permission and

123
00:11:19,320 --> 00:11:21,720
covered address respectively

124
00:11:21,720 --> 00:11:26,160
a PMP entry or PL BNP CFG and PMP order

125
00:11:26,160 --> 00:11:30,200
and manages one memory range and the PMP

126
00:11:30,200 --> 00:11:34,380
monitors all memory accesses and asserts

127
00:11:34,380 --> 00:11:36,600
and access for the exception in invert

128
00:11:36,600 --> 00:11:40,220
in case of inverted memory access

129
00:11:40,220 --> 00:11:42,959
and the previous mode or about

130
00:11:42,959 --> 00:11:45,120
expression and find the access

131
00:11:45,120 --> 00:11:47,279
permission regarding memory access and

132
00:11:47,279 --> 00:11:50,040
external handbrake and release crime

133
00:11:50,040 --> 00:11:55,260
herds for more memory u s h and Morse

134
00:11:55,260 --> 00:11:58,380
the significant Point here is that only

135
00:11:58,380 --> 00:12:01,700
a mod can handle PMP registers

136
00:12:01,700 --> 00:12:05,100
so in monitor the highest privilege and

137
00:12:05,100 --> 00:12:08,100
Au mode has lowest privilege and you

138
00:12:08,100 --> 00:12:12,180
more the control by all other modes

139
00:12:12,180 --> 00:12:16,560
next I present the world proposed attack

140
00:12:16,560 --> 00:12:19,200
the goal of the attacker is to bypass

141
00:12:19,200 --> 00:12:21,899
the isolation and access the protective

142
00:12:21,899 --> 00:12:24,959
memory memory area by the PMP

143
00:12:24,959 --> 00:12:28,320
our basic idea is to inherit partial

144
00:12:28,320 --> 00:12:31,459
permission of the victim PM PMP settings

145
00:12:31,459 --> 00:12:34,260
by skipping the reconfiguration of the

146
00:12:34,260 --> 00:12:36,060
PMP

147
00:12:36,060 --> 00:12:38,700
first the attacker calls the picked me

148
00:12:38,700 --> 00:12:42,360
application at that time the PMP changed

149
00:12:42,360 --> 00:12:44,820
along with the context

150
00:12:44,820 --> 00:12:47,639
next the program flow returned to their

151
00:12:47,639 --> 00:12:50,100
attack application

152
00:12:50,100 --> 00:12:51,000
um

153
00:12:51,000 --> 00:12:54,860
and the PMP register also restores so

154
00:12:54,860 --> 00:12:58,139
attacker cannot access their up-to's

155
00:12:58,139 --> 00:12:59,399
memory

156
00:12:59,399 --> 00:13:03,260
so we use for the injection to skip the

157
00:13:03,260 --> 00:13:06,420
reconfiguration of the PMP settings as a

158
00:13:06,420 --> 00:13:07,459
result

159
00:13:07,459 --> 00:13:09,720
attacker can obtain the previous

160
00:13:09,720 --> 00:13:11,279
permission

161
00:13:11,279 --> 00:13:14,120
like this

162
00:13:14,279 --> 00:13:17,820
but 40 injection attacking is generally

163
00:13:17,820 --> 00:13:19,820
for information

164
00:13:19,820 --> 00:13:23,760
that is Target instruction and 14

165
00:13:23,760 --> 00:13:27,380
density and good injection timing and

166
00:13:27,380 --> 00:13:29,279
Trigger signal

167
00:13:29,279 --> 00:13:33,360
we mainly focuses on a focus on first

168
00:13:33,360 --> 00:13:36,139
three information

169
00:13:36,240 --> 00:13:38,160
here is the attack scenario and the

170
00:13:38,160 --> 00:13:39,420
attacker model

171
00:13:39,420 --> 00:13:43,440
we refer to a metrozone use case that is

172
00:13:43,440 --> 00:13:47,100
like smartphone's use case where a user

173
00:13:47,100 --> 00:13:52,980
can use a blank area of a Target device

174
00:13:52,980 --> 00:13:55,620
according to the attack scenario we

175
00:13:55,620 --> 00:13:57,420
construct the attack model

176
00:13:57,420 --> 00:14:02,940
attackers can inject a inject words and

177
00:14:02,940 --> 00:14:05,639
run an arbitrary application in the

178
00:14:05,639 --> 00:14:07,700
lowest privilege on the target device

179
00:14:07,700 --> 00:14:12,480
and now the T chord but it cannot be

180
00:14:12,480 --> 00:14:14,040
modified

181
00:14:14,040 --> 00:14:18,680
other applications are also unknown

182
00:14:19,620 --> 00:14:22,620
based on their attacker model we

183
00:14:22,620 --> 00:14:26,160
proposed an attack scheme including the

184
00:14:26,160 --> 00:14:28,440
extraction of fourth intensity and

185
00:14:28,440 --> 00:14:32,279
injection timing and based on using the

186
00:14:32,279 --> 00:14:34,740
profiling and Target devices

187
00:14:34,740 --> 00:14:37,260
this is because

188
00:14:37,260 --> 00:14:40,199
um across the bars verification or more

189
00:14:40,199 --> 00:14:43,380
realistic according to ataka model and

190
00:14:43,380 --> 00:14:45,139
attack scenario

191
00:14:45,139 --> 00:14:48,959
and our proposed attack scheme has five

192
00:14:48,959 --> 00:14:52,620
steps let's see more details

193
00:14:52,620 --> 00:14:55,980
our our trained the most important

194
00:14:55,980 --> 00:14:58,620
aspect of the proposed attack that is

195
00:14:58,620 --> 00:15:00,720
Target instructions

196
00:15:00,720 --> 00:15:02,699
and this feature makes our attack

197
00:15:02,699 --> 00:15:06,060
General and efficient

198
00:15:06,060 --> 00:15:09,600
first of all we have only three kind of

199
00:15:09,600 --> 00:15:11,339
Target the instructions that we write

200
00:15:11,339 --> 00:15:15,240
the PMP settings that is CSR write clear

201
00:15:15,240 --> 00:15:17,160
and set

202
00:15:17,160 --> 00:15:19,800
this is because the PMP is one of the

203
00:15:19,800 --> 00:15:21,959
special registers and requires

204
00:15:21,959 --> 00:15:24,660
privileged instructions

205
00:15:24,660 --> 00:15:28,019
so any team must use these instructions

206
00:15:28,019 --> 00:15:31,440
to construct t on

207
00:15:31,440 --> 00:15:33,420
um describe

208
00:15:33,420 --> 00:15:35,820
still skipping the reconfiguration of

209
00:15:35,820 --> 00:15:37,860
the PMP settings is a common

210
00:15:37,860 --> 00:15:41,040
vulnerability for all required keys so

211
00:15:41,040 --> 00:15:43,320
our talk is General

212
00:15:43,320 --> 00:15:46,740
moreover this feature makes it easy to

213
00:15:46,740 --> 00:15:49,079
extract injection timing and force

214
00:15:49,079 --> 00:15:51,180
intensity

215
00:15:51,180 --> 00:15:54,060
um we adopted search on best temperate

216
00:15:54,060 --> 00:15:56,279
matching and cross device and cross

217
00:15:56,279 --> 00:15:59,160
device profiling for extraction of

218
00:15:59,160 --> 00:16:01,440
injection timing and forth intensity

219
00:16:01,440 --> 00:16:04,079
respectively and these are common

220
00:16:04,079 --> 00:16:07,880
techniques for audible us

221
00:16:09,120 --> 00:16:10,560
and

222
00:16:10,560 --> 00:16:11,220
um

223
00:16:11,220 --> 00:16:13,920
for normal force injection attack

224
00:16:13,920 --> 00:16:16,980
um extraction of this parameter takes a

225
00:16:16,980 --> 00:16:21,500
lot of effort but we have few templates

226
00:16:21,500 --> 00:16:26,639
and a few propelling instructions so our

227
00:16:26,639 --> 00:16:30,800
approach is very efficient

228
00:16:31,139 --> 00:16:33,959
next I'll show you the experimental

229
00:16:33,959 --> 00:16:36,120
results

230
00:16:36,120 --> 00:16:39,180
we have to Target because we need to

231
00:16:39,180 --> 00:16:41,459
verify the generality of the proposed

232
00:16:41,459 --> 00:16:44,459
attack the first one is the pop t or

233
00:16:44,459 --> 00:16:47,759
proof of concept T which is uh our

234
00:16:47,759 --> 00:16:50,880
self-made key and it has barometer

235
00:16:50,880 --> 00:16:52,440
implementation

236
00:16:52,440 --> 00:16:55,380
and second target is a keystone which is

237
00:16:55,380 --> 00:16:58,980
a very famous Eric five best keys and it

238
00:16:58,980 --> 00:17:00,839
has Linux OS

239
00:17:00,839 --> 00:17:03,839
so it's more complicated and more

240
00:17:03,839 --> 00:17:06,740
realistic

241
00:17:07,500 --> 00:17:09,599
let's see the first result

242
00:17:09,599 --> 00:17:13,859
and we our book T round on the software

243
00:17:13,859 --> 00:17:16,740
processor on the fpga board

244
00:17:16,740 --> 00:17:19,439
we adapted clock for injection with chip

245
00:17:19,439 --> 00:17:22,919
Whisperer and EM leakage of the Saturn

246
00:17:22,919 --> 00:17:24,599
information

247
00:17:24,599 --> 00:17:27,480
our property has three applications and

248
00:17:27,480 --> 00:17:31,980
attacker tried to dump a secret key on

249
00:17:31,980 --> 00:17:33,860
up to

250
00:17:33,860 --> 00:17:37,100
as I mentioned earlier the attacker

251
00:17:37,100 --> 00:17:41,340
caused the victim application then when

252
00:17:41,340 --> 00:17:43,559
returning to the attackers application

253
00:17:43,559 --> 00:17:47,780
and they inject faults

254
00:17:49,380 --> 00:17:52,980
first result is 1410 St and these

255
00:17:52,980 --> 00:17:54,860
results are

256
00:17:54,860 --> 00:17:57,660
obtained from profiling and Target

257
00:17:57,660 --> 00:18:01,080
devices respectively and clock Force

258
00:18:01,080 --> 00:18:03,240
injection had two parameters so these

259
00:18:03,240 --> 00:18:05,280
are two dimensional figures

260
00:18:05,280 --> 00:18:08,700
and circle the area mean the expected

261
00:18:08,700 --> 00:18:12,980
Ford so and these results indicate that

262
00:18:12,980 --> 00:18:17,039
these two device have a similar Trend so

263
00:18:17,039 --> 00:18:20,400
across the device profiling works

264
00:18:20,400 --> 00:18:23,039
next is the injection timing

265
00:18:23,039 --> 00:18:25,620
the rest figure shows a new image

266
00:18:25,620 --> 00:18:28,020
template from the propiring device and

267
00:18:28,020 --> 00:18:30,140
then even Trace from the target device

268
00:18:30,140 --> 00:18:34,020
we applied sad matching and succeeded to

269
00:18:34,020 --> 00:18:35,290
extract the

270
00:18:35,290 --> 00:18:36,440
[Music]

271
00:18:36,440 --> 00:18:40,200
execution timing the red garment through

272
00:18:40,200 --> 00:18:43,020
timing and the block current identified

273
00:18:43,020 --> 00:18:44,760
timing

274
00:18:44,760 --> 00:18:47,880
this indicates and there are some Force

275
00:18:47,880 --> 00:18:50,039
positive positives but no Force

276
00:18:50,039 --> 00:18:51,120
negatives

277
00:18:51,120 --> 00:18:56,940
so our approach is effective and works

278
00:18:56,940 --> 00:18:58,980
the last result is the exploitation

279
00:18:58,980 --> 00:19:02,160
result we tried all combinations of

280
00:19:02,160 --> 00:19:04,740
candidates for Port intensity and

281
00:19:04,740 --> 00:19:07,679
injection timing and finally succeeded

282
00:19:07,679 --> 00:19:11,160
to extract um finally succeed to bypass

283
00:19:11,160 --> 00:19:16,340
the isolation and extract the secret key

284
00:19:16,620 --> 00:19:17,340
um

285
00:19:17,340 --> 00:19:19,740
I don't meet the teachers but as for

286
00:19:19,740 --> 00:19:21,799
extraction for

287
00:19:21,799 --> 00:19:25,200
extraction or fourth parameters we need

288
00:19:25,200 --> 00:19:29,820
some margins both for both parameters

289
00:19:29,820 --> 00:19:30,480
um

290
00:19:30,480 --> 00:19:35,100
of course regarding such margins our our

291
00:19:35,100 --> 00:19:37,620
approach is much more efficient than

292
00:19:37,620 --> 00:19:40,080
Brute Force

293
00:19:40,080 --> 00:19:41,039
um

294
00:19:41,039 --> 00:19:44,460
next is uh Keystone

295
00:19:44,460 --> 00:19:47,460
Keystone is temporary application land

296
00:19:47,460 --> 00:19:49,980
under a Target device

297
00:19:49,980 --> 00:19:52,440
and the way you modify the user code on

298
00:19:52,440 --> 00:19:55,799
the sample application

299
00:19:55,799 --> 00:19:59,900
and we adapted em5 with chip shelter

300
00:19:59,900 --> 00:20:03,559
this experiment only verified the

301
00:20:03,559 --> 00:20:06,918
exploitation step

302
00:20:07,740 --> 00:20:10,440
here the Consular output were attacking

303
00:20:10,440 --> 00:20:14,580
Wizard and with EMF why

304
00:20:14,580 --> 00:20:17,600
um without EMF FY the program

305
00:20:17,600 --> 00:20:20,880
the program halted with augmentation

306
00:20:20,880 --> 00:20:23,880
fault and caused by load access force

307
00:20:23,880 --> 00:20:25,620
exception

308
00:20:25,620 --> 00:20:29,520
in contrast with emfy such inverted

309
00:20:29,520 --> 00:20:31,860
access succeeded

310
00:20:31,860 --> 00:20:34,140
so we confirmed that our proposed data

311
00:20:34,140 --> 00:20:38,280
can be applied to more realistic keys

312
00:20:38,280 --> 00:20:41,520
and I believe our proposed attack can be

313
00:20:41,520 --> 00:20:44,280
applied to any other required best teams

314
00:20:44,280 --> 00:20:47,539
because it's General

315
00:20:47,580 --> 00:20:51,120
the last topic is the countermeasure

316
00:20:51,120 --> 00:20:54,120
our goal of countermeasure is to ensure

317
00:20:54,120 --> 00:20:56,760
the PMP is configured correctly at each

318
00:20:56,760 --> 00:21:00,799
application runtime like this

319
00:21:01,080 --> 00:21:03,960
to insert the PMP verification process

320
00:21:03,960 --> 00:21:07,320
is enabled year but it's meaningless

321
00:21:07,320 --> 00:21:10,200
because such verification process can be

322
00:21:10,200 --> 00:21:13,740
skipped by the forward to injection

323
00:21:13,740 --> 00:21:16,940
so we aimed for an approach

324
00:21:16,940 --> 00:21:19,740
where the program flow transit to

325
00:21:19,740 --> 00:21:22,559
abnormal state if the PMP

326
00:21:22,559 --> 00:21:25,679
reconfiguration is skipped but how to do

327
00:21:25,679 --> 00:21:27,780
that

328
00:21:27,780 --> 00:21:30,539
based on the approach we propose jump

329
00:21:30,539 --> 00:21:33,299
others masking and it has two phase

330
00:21:33,299 --> 00:21:35,039
three phases

331
00:21:35,039 --> 00:21:37,080
first

332
00:21:37,080 --> 00:21:40,500
um it marks the jump address with the

333
00:21:40,500 --> 00:21:44,159
hash party um hashed PMP barriers at

334
00:21:44,159 --> 00:21:47,220
build phase and unmasked the marks

335
00:21:47,220 --> 00:21:51,659
address value at execution phase

336
00:21:51,659 --> 00:21:54,960
and if the PMP configuration or our

337
00:21:54,960 --> 00:21:57,380
masking process is skipped

338
00:21:57,380 --> 00:22:00,659
the program flow transit to our blocking

339
00:22:00,659 --> 00:22:04,020
address and which causes an access for

340
00:22:04,020 --> 00:22:05,640
the exception

341
00:22:05,640 --> 00:22:08,520
so we correctly integrated the

342
00:22:08,520 --> 00:22:13,400
verification process and program flow

343
00:22:14,460 --> 00:22:17,100
but um

344
00:22:17,100 --> 00:22:19,740
we note that hash function should be

345
00:22:19,740 --> 00:22:22,080
carefully restricted so that the broker

346
00:22:22,080 --> 00:22:23,640
address doesn't point to the buried

347
00:22:23,640 --> 00:22:25,320
address

348
00:22:25,320 --> 00:22:28,640
and we are automated details but

349
00:22:28,640 --> 00:22:32,280
we proved that our country measure has

350
00:22:32,280 --> 00:22:37,200
complete resistance to possible attacks

351
00:22:37,200 --> 00:22:41,059
now let me summarize my talk

352
00:22:41,159 --> 00:22:43,200
um we proposed by passing attack against

353
00:22:43,200 --> 00:22:45,960
risk 5 based tears it skips the

354
00:22:45,960 --> 00:22:48,480
reconfiguration of the PMP settings by

355
00:22:48,480 --> 00:22:52,020
force injection and it for it's a

356
00:22:52,020 --> 00:22:55,020
general and efficient

357
00:22:55,020 --> 00:22:58,020
aromata teachers but in terms of amateur

358
00:22:58,020 --> 00:23:01,100
Stone our third can be applied to

359
00:23:01,100 --> 00:23:04,500
application isolation but not to World

360
00:23:04,500 --> 00:23:07,159
isolation

361
00:23:08,280 --> 00:23:12,120
and our experimental results showed that

362
00:23:12,120 --> 00:23:17,039
our attack is feasible and general using

363
00:23:17,039 --> 00:23:21,059
the experiment using two kind of to PMT

364
00:23:21,059 --> 00:23:22,740
implementation

365
00:23:22,740 --> 00:23:25,440
and we also propose that jump others

366
00:23:25,440 --> 00:23:27,659
masking and which prevent our attack

367
00:23:27,659 --> 00:23:30,360
completely

368
00:23:30,360 --> 00:23:32,640
and future work includes implementation

369
00:23:32,640 --> 00:23:34,559
and demonstration of the proposed

370
00:23:34,559 --> 00:23:37,380
content measure and application of the

371
00:23:37,380 --> 00:23:39,360
proposed attack to address some best

372
00:23:39,360 --> 00:23:41,760
keys

373
00:23:41,760 --> 00:23:43,860
and here are the some additional

374
00:23:43,860 --> 00:23:47,039
information and we made our property

375
00:23:47,039 --> 00:23:50,220
open source now so you can access our

376
00:23:50,220 --> 00:23:52,260
property from the risk 5 exchange

377
00:23:52,260 --> 00:23:54,120
website

378
00:23:54,120 --> 00:23:56,520
that's all of my presentation thank you

379
00:23:56,520 --> 00:23:59,600
for your kind of attention

380
00:24:04,799 --> 00:24:07,440
thank you very much so we'll start with

381
00:24:07,440 --> 00:24:10,640
questions in the room

382
00:24:14,520 --> 00:24:16,020
questions yet

383
00:24:16,020 --> 00:24:18,059
um so I did look before too and the code

384
00:24:18,059 --> 00:24:20,760
was on GitHub this was true

385
00:24:20,760 --> 00:24:24,120
um if you were seeing people do work

386
00:24:24,120 --> 00:24:26,400
extending your code what would be the

387
00:24:26,400 --> 00:24:27,840
most interesting thing someone could

388
00:24:27,840 --> 00:24:30,480
work on you had some future things there

389
00:24:30,480 --> 00:24:32,700
um but I was curious what you would like

390
00:24:32,700 --> 00:24:35,100
you know to see as a next step with this

391
00:24:35,100 --> 00:24:38,940
next step for what and

392
00:24:38,940 --> 00:24:41,340
yeah so you so using the available code

393
00:24:41,340 --> 00:24:43,740
you you put on GitHub for the uh the T

394
00:24:43,740 --> 00:24:45,720
so that's available for people to work

395
00:24:45,720 --> 00:24:47,940
on I was just curious if you had a you

396
00:24:47,940 --> 00:24:49,380
know advice to someone that goes and

397
00:24:49,380 --> 00:24:50,880
downloads it and wants to implement

398
00:24:50,880 --> 00:24:53,520
something uh so your question is

399
00:24:53,520 --> 00:24:57,960
um how can we use our property yeah what

400
00:24:57,960 --> 00:24:59,159
should people do with it what would you

401
00:24:59,159 --> 00:25:01,320
like to so what would you like to see

402
00:25:01,320 --> 00:25:04,640
them do with the project if you um

403
00:25:04,640 --> 00:25:08,280
yeah but the the proof of concept t uh

404
00:25:08,280 --> 00:25:09,900
it must have something that you said I

405
00:25:09,900 --> 00:25:12,120
want you to do this I wish we had time

406
00:25:12,120 --> 00:25:15,000
to do this okay thank you

407
00:25:15,000 --> 00:25:17,880
um yes and so so what what what is the

408
00:25:17,880 --> 00:25:20,159
question yeah so yeah so what would you

409
00:25:20,159 --> 00:25:23,779
like to see them do with oh okay

410
00:25:23,779 --> 00:25:25,980
different types of attacks or different

411
00:25:25,980 --> 00:25:27,779
direction mechanisms or what do you

412
00:25:27,779 --> 00:25:31,140
think is ah thank you for the questions

413
00:25:31,140 --> 00:25:31,799
um

414
00:25:31,799 --> 00:25:36,240
so I I talked about our property three

415
00:25:36,240 --> 00:25:38,400
days ago but

416
00:25:38,400 --> 00:25:40,500
um on

417
00:25:40,500 --> 00:25:43,440
we um

418
00:25:43,440 --> 00:25:46,559
I think um there are many uses for our

419
00:25:46,559 --> 00:25:49,559
property for example

420
00:25:49,559 --> 00:25:50,159
um

421
00:25:50,159 --> 00:25:53,880
to construct Advanced tea that hurts

422
00:25:53,880 --> 00:25:56,940
physical protection and

423
00:25:56,940 --> 00:25:58,919
um evaluates it's security and

424
00:25:58,919 --> 00:26:01,080
performance such as

425
00:26:01,080 --> 00:26:02,700
um

426
00:26:02,700 --> 00:26:04,620
um I think

427
00:26:04,620 --> 00:26:08,400
um control for integrity extension 45 uh

428
00:26:08,400 --> 00:26:11,940
is uh interesting feature and I believe

429
00:26:11,940 --> 00:26:15,120
such mechanism horse and partial

430
00:26:15,120 --> 00:26:18,539
resistant to for the injection attack so

431
00:26:18,539 --> 00:26:20,700
um such usage is very interesting I

432
00:26:20,700 --> 00:26:23,400
think thank you very much now what are

433
00:26:23,400 --> 00:26:25,440
the questions in the room

434
00:26:25,440 --> 00:26:28,740
you don't see it and then online so I

435
00:26:28,740 --> 00:26:30,900
think we'll spank you again with that

436
00:26:30,900 --> 00:26:32,900
um

437
00:26:37,380 --> 00:26:40,220
if your name is

438
00:26:40,220 --> 00:26:42,480
sorry for your pronunciation and you are

439
00:26:42,480 --> 00:26:44,580
from Korea I have your passport it's

440
00:26:44,580 --> 00:26:46,140
going to be at the registration desk if

441
00:26:46,140 --> 00:26:47,700
you are this person or if you know this

442
00:26:47,700 --> 00:26:49,620
person please send the person to the

443
00:26:49,620 --> 00:26:51,059
registration desk

444
00:26:51,059 --> 00:26:54,200
anyone as you're here

445
00:26:55,440 --> 00:26:59,179
otherwise we have to auction it later

446
00:26:59,340 --> 00:27:00,539
I mean they're still in the country

447
00:27:00,539 --> 00:27:03,740
right so this is

448
00:27:23,460 --> 00:27:26,220
so um with the honor of Tim fritzman

449
00:27:26,220 --> 00:27:27,720
we'll be giving us the next talk in the

450
00:27:27,720 --> 00:27:29,220
session and I think there's seven

451
00:27:29,220 --> 00:27:30,960
co-authors so you're still within the

452
00:27:30,960 --> 00:27:33,000
the allowable length of co-authors here

453
00:27:33,000 --> 00:27:34,620
this is uh acceptable

454
00:27:34,620 --> 00:27:38,880
um so this talk on mass accelerators and

455
00:27:38,880 --> 00:27:40,320
instruction set extensions for post

456
00:27:40,320 --> 00:27:41,880
Quantum cryptographic and Via Tim so

457
00:27:41,880 --> 00:27:43,380
take it away please

458
00:27:43,380 --> 00:27:46,400
yeah thank you

459
00:27:53,159 --> 00:27:56,640
so yes presented our last accelerators

460
00:27:56,640 --> 00:27:58,940
and

461
00:28:02,039 --> 00:28:05,400
okay so again I will present the talk

462
00:28:05,400 --> 00:28:07,980
must accelerators and instruction set

463
00:28:07,980 --> 00:28:10,200
extensions for post Quantum cryptography

464
00:28:10,200 --> 00:28:12,779
this was the joint work with Michelle de

465
00:28:12,779 --> 00:28:16,620
Patria Patrick Thomas Ingrid engaged

466
00:28:16,620 --> 00:28:19,799
uh first of all in the presentation I

467
00:28:19,799 --> 00:28:22,020
will quickly give an overview and a

468
00:28:22,020 --> 00:28:24,480
motivation then we will have a look at

469
00:28:24,480 --> 00:28:26,820
some masking methods in order to protect

470
00:28:26,820 --> 00:28:29,340
the post Quantum cryptographic scheme

471
00:28:29,340 --> 00:28:31,020
saber and kyber against site Channel

472
00:28:31,020 --> 00:28:32,220
attacks

473
00:28:32,220 --> 00:28:34,799
then I will present some masking

474
00:28:34,799 --> 00:28:37,919
accelerators to boost the performance of

475
00:28:37,919 --> 00:28:40,860
a hard design and finally I will provide

476
00:28:40,860 --> 00:28:43,620
some system integration and experimental

477
00:28:43,620 --> 00:28:46,039
results

478
00:28:46,260 --> 00:28:49,580
so several Works already analyzed

479
00:28:49,580 --> 00:28:52,020
counter measures to protect post Quantum

480
00:28:52,020 --> 00:28:53,700
cryptography against site Channel

481
00:28:53,700 --> 00:28:56,520
attacks nevertheless a clear picture

482
00:28:56,520 --> 00:28:59,760
regarding the implementation costs for

483
00:28:59,760 --> 00:29:02,820
these counter measures is still missing

484
00:29:02,820 --> 00:29:05,820
to deepen the cost analysis and this

485
00:29:05,820 --> 00:29:08,700
work we focused on masking as a provable

486
00:29:08,700 --> 00:29:11,039
countermeasure against differential

487
00:29:11,039 --> 00:29:12,900
power analysis

488
00:29:12,900 --> 00:29:15,779
more specifically we presented a mass

489
00:29:15,779 --> 00:29:18,120
type of software co-design for the

490
00:29:18,120 --> 00:29:21,360
picoce finalists caliber and saber

491
00:29:21,360 --> 00:29:24,000
we developed a generic number theoretic

492
00:29:24,000 --> 00:29:26,820
transfer multiplier which is suitable

493
00:29:26,820 --> 00:29:30,000
for most latest based team

494
00:29:30,000 --> 00:29:34,200
and we developed a normal ciphertext

495
00:29:34,200 --> 00:29:36,059
compression technique

496
00:29:36,059 --> 00:29:39,600
and also Mast accelerators for critical

497
00:29:39,600 --> 00:29:42,840
non-linear operations

498
00:29:42,840 --> 00:29:45,179
so public key encryption scheme can be

499
00:29:45,179 --> 00:29:47,360
divided into the following

500
00:29:47,360 --> 00:29:51,240
operations key generation encapsulation

501
00:29:51,240 --> 00:29:53,460
and decapsulation whereas the

502
00:29:53,460 --> 00:29:55,740
decapsulation is the most critical part

503
00:29:55,740 --> 00:29:59,159
as it uses the long-term secret key in

504
00:29:59,159 --> 00:30:02,460
order to decrypt the ciphertext now

505
00:30:02,460 --> 00:30:04,320
masking randomly splits the secret

506
00:30:04,320 --> 00:30:06,299
variables such as the long-term secret

507
00:30:06,299 --> 00:30:09,720
TS into multiple shares in order to

508
00:30:09,720 --> 00:30:11,760
break the correlation between the power

509
00:30:11,760 --> 00:30:13,980
consumption and the currently processed

510
00:30:13,980 --> 00:30:15,360
data

511
00:30:15,360 --> 00:30:16,440
here

512
00:30:16,440 --> 00:30:19,860
but masking Sabra and kyber is quite

513
00:30:19,860 --> 00:30:22,559
different and this is especially as

514
00:30:22,559 --> 00:30:24,840
kyber is based on our module learning

515
00:30:24,840 --> 00:30:27,120
with error problem while slavery is

516
00:30:27,120 --> 00:30:28,559
based on the module learning with

517
00:30:28,559 --> 00:30:31,320
surrounding problem and also kyber uses

518
00:30:31,320 --> 00:30:34,020
a prime modulus and saber our power of

519
00:30:34,020 --> 00:30:36,539
two modulus so here we have some small

520
00:30:36,539 --> 00:30:38,880
differences but they have a larger

521
00:30:38,880 --> 00:30:42,360
impact and the implementation costs

522
00:30:42,360 --> 00:30:44,600
but never let us have a look at the most

523
00:30:44,600 --> 00:30:47,940
decapsulation operation of saber

524
00:30:47,940 --> 00:30:51,120
you have as import our ciphertext pair

525
00:30:51,120 --> 00:30:54,659
C1 and C2 then we will perform some

526
00:30:54,659 --> 00:30:55,980
operations

527
00:30:55,980 --> 00:30:57,779
um in particular with the long-term

528
00:30:57,779 --> 00:31:00,899
secretly s in order to decrypt and the

529
00:31:00,899 --> 00:31:03,299
decapsulation has also a re-encryption

530
00:31:03,299 --> 00:31:05,820
step in order to obtain the ciphertext

531
00:31:05,820 --> 00:31:09,600
pair C1 Prime and C2 Prime

532
00:31:09,600 --> 00:31:11,820
now when we have computed the

533
00:31:11,820 --> 00:31:14,640
re-encryption we can prove we can check

534
00:31:14,640 --> 00:31:16,620
if the input ciphertext and the output

535
00:31:16,620 --> 00:31:18,600
ciphertext is identical

536
00:31:18,600 --> 00:31:21,059
and the fruit is identical we can

537
00:31:21,059 --> 00:31:23,279
forward the decrypted value to the

538
00:31:23,279 --> 00:31:24,240
output

539
00:31:24,240 --> 00:31:26,580
so this re-encryption will prevent

540
00:31:26,580 --> 00:31:28,799
chosen ciphertext attacks

541
00:31:28,799 --> 00:31:32,399
and now we do not compute all of our

542
00:31:32,399 --> 00:31:35,279
computations in our plane variant so we

543
00:31:35,279 --> 00:31:38,340
duplicate the operations and we make it

544
00:31:38,340 --> 00:31:41,520
on a masked way so for example we split

545
00:31:41,520 --> 00:31:43,039
the input

546
00:31:43,039 --> 00:31:46,740
the ciphertext C1 and the two shares but

547
00:31:46,740 --> 00:31:50,120
also the secret key into two shares

548
00:31:50,120 --> 00:31:54,179
and now we have different operations in

549
00:31:54,179 --> 00:31:57,480
our Master encapsulation in yellow we

550
00:31:57,480 --> 00:31:59,159
have the linear polynomial

551
00:31:59,159 --> 00:32:02,100
multiplication which is uh usually very

552
00:32:02,100 --> 00:32:05,520
costly and then in glue we have several

553
00:32:05,520 --> 00:32:07,799
non-linear operations for example the

554
00:32:07,799 --> 00:32:10,640
hash function T external output function

555
00:32:10,640 --> 00:32:13,620
binomial sampling A to B conversion B to

556
00:32:13,620 --> 00:32:16,440
a conversion and mass ciphertext

557
00:32:16,440 --> 00:32:18,120
comparison

558
00:32:18,120 --> 00:32:20,820
now when we look at title the figure

559
00:32:20,820 --> 00:32:23,399
looks a little different the main

560
00:32:23,399 --> 00:32:26,399
differences are that kyber uses three

561
00:32:26,399 --> 00:32:28,799
sampling instances instead of only one

562
00:32:28,799 --> 00:32:31,260
and this is due to the learning those

563
00:32:31,260 --> 00:32:33,240
error setting where we have to sample

564
00:32:33,240 --> 00:32:36,360
also error terms and with the English

565
00:32:36,360 --> 00:32:38,159
rounding setting we do not have to

566
00:32:38,159 --> 00:32:40,760
sample them as the error terms are

567
00:32:40,760 --> 00:32:43,740
implicitly generated by the rounding

568
00:32:43,740 --> 00:32:45,919
effect

569
00:32:46,340 --> 00:32:49,740
has a little bit more complex and b2a

570
00:32:49,740 --> 00:32:52,559
conversion and also a more complex

571
00:32:52,559 --> 00:32:55,760
ciphertext compression

572
00:32:55,980 --> 00:32:58,020
now let us have a look at the individual

573
00:32:58,020 --> 00:33:00,299
components first at the linear

574
00:33:00,299 --> 00:33:02,460
operations as already said they are

575
00:33:02,460 --> 00:33:05,100
duplicated in a mouse setting but that

576
00:33:05,100 --> 00:33:06,779
means also that the execution time

577
00:33:06,779 --> 00:33:09,720
doubles therefore it's an extremely

578
00:33:09,720 --> 00:33:11,659
important to have a very fast

579
00:33:11,659 --> 00:33:14,880
multiplication and in particular a fast

580
00:33:14,880 --> 00:33:18,140
polynomial multiplication

581
00:33:18,899 --> 00:33:21,000
um usually the multiplication is done

582
00:33:21,000 --> 00:33:23,399
with the number of number theoretic

583
00:33:23,399 --> 00:33:26,039
transform while it is very efficient it

584
00:33:26,039 --> 00:33:28,080
is not always directly applicable for

585
00:33:28,080 --> 00:33:30,720
all the schemes for example cell and

586
00:33:30,720 --> 00:33:33,059
Andrew do not specifically design the

587
00:33:33,059 --> 00:33:36,299
parameters for the entity however we can

588
00:33:36,299 --> 00:33:39,000
lift the prime to our higher so-called

589
00:33:39,000 --> 00:33:42,000
entity friendly Prime then we compute

590
00:33:42,000 --> 00:33:44,460
the polynomial multiplication and apply

591
00:33:44,460 --> 00:33:47,640
the entity and after the computations we

592
00:33:47,640 --> 00:33:50,820
can switch back to our original Prime

593
00:33:50,820 --> 00:33:54,600
before we developed in our work a

594
00:33:54,600 --> 00:33:57,059
generic entity-based ring arithmetic

595
00:33:57,059 --> 00:33:59,880
accelerator which also supports the

596
00:33:59,880 --> 00:34:03,019
so-called Prime lift and also supports

597
00:34:03,019 --> 00:34:05,340
non-entity-based schemes such as saber

598
00:34:05,340 --> 00:34:07,820
or Andrew

599
00:34:07,919 --> 00:34:10,739
the final architecture is shown as in

600
00:34:10,739 --> 00:34:13,739
the slide the main Computing element is

601
00:34:13,739 --> 00:34:16,679
the modular arithmetic unit in the lower

602
00:34:16,679 --> 00:34:17,960
corner

603
00:34:17,960 --> 00:34:22,619
and yeah so this unit supports all the

604
00:34:22,619 --> 00:34:25,619
entity operations it supports pointwise

605
00:34:25,619 --> 00:34:28,020
operations such as addition subtractions

606
00:34:28,020 --> 00:34:30,300
and multiplications positive and

607
00:34:30,300 --> 00:34:33,359
negative wrap convolutions and also it

608
00:34:33,359 --> 00:34:36,119
supports the early entity board which is

609
00:34:36,119 --> 00:34:39,619
specially used in kyber

610
00:34:39,619 --> 00:34:43,560
so we use the four address units in

611
00:34:43,560 --> 00:34:46,739
order to perform these operations and to

612
00:34:46,739 --> 00:34:48,839
control the circuit we have several

613
00:34:48,839 --> 00:34:52,040
input signals

614
00:34:52,080 --> 00:34:54,119
now let us have a look at our next

615
00:34:54,119 --> 00:34:56,580
components while the ring arithmetic

616
00:34:56,580 --> 00:34:58,859
requires an arithmetic sharing the

617
00:34:58,859 --> 00:35:01,980
non-linear operations shown in the gray

618
00:35:01,980 --> 00:35:05,400
boxes require a Boolean sharing and

619
00:35:05,400 --> 00:35:07,560
therefore we require some efficient

620
00:35:07,560 --> 00:35:10,380
methods to switch between arithmetic

621
00:35:10,380 --> 00:35:13,380
sharing and Boolean sharing

622
00:35:13,380 --> 00:35:15,660
so the arithmetic sharings puts the

623
00:35:15,660 --> 00:35:17,880
secret variable X and the two additive

624
00:35:17,880 --> 00:35:19,079
parts

625
00:35:19,079 --> 00:35:21,780
while the Boolean sharing uses the extra

626
00:35:21,780 --> 00:35:25,079
operation and the goal of the conversion

627
00:35:25,079 --> 00:35:27,420
is now to efficiently switch between

628
00:35:27,420 --> 00:35:30,240
these two sharing types

629
00:35:30,240 --> 00:35:33,300
so previous Works um already developed

630
00:35:33,300 --> 00:35:34,280
some

631
00:35:34,280 --> 00:35:37,800
generic conversion methods and one was

632
00:35:37,800 --> 00:35:40,859
proposed by Corona and others in 2014

633
00:35:40,859 --> 00:35:43,400
which is based on the secure Edition

634
00:35:43,400 --> 00:35:46,200
this one is very efficient for Hardware

635
00:35:46,200 --> 00:35:49,380
implementations as the secure Adder is

636
00:35:49,380 --> 00:35:51,780
well suited in Hardware

637
00:35:51,780 --> 00:35:54,359
and this I was also very suited for a

638
00:35:54,359 --> 00:35:56,700
power of two mod release and also for

639
00:35:56,700 --> 00:35:59,598
Prime model is

640
00:35:59,940 --> 00:36:01,280
so one

641
00:36:01,280 --> 00:36:04,859
method which is uh based on the b2a

642
00:36:04,859 --> 00:36:07,200
conversion so on the

643
00:36:07,200 --> 00:36:10,320
um so on the A2B conversion on the

644
00:36:10,320 --> 00:36:13,800
arithmetic to Boolean conversion is the

645
00:36:13,800 --> 00:36:15,900
most ciphertech compression the mass

646
00:36:15,900 --> 00:36:18,240
ciphertext compression reduces the key

647
00:36:18,240 --> 00:36:20,940
sizes of the size of text and it can be

648
00:36:20,940 --> 00:36:24,900
computed according to a formula to

649
00:36:24,900 --> 00:36:27,660
while the compression or the most

650
00:36:27,660 --> 00:36:29,700
difficult part in this equation is the

651
00:36:29,700 --> 00:36:31,920
division by the modulus Q

652
00:36:31,920 --> 00:36:35,099
and yeah well this is easier in a

653
00:36:35,099 --> 00:36:36,420
non-mask setting this is quite

654
00:36:36,420 --> 00:36:39,540
challenging in the last setting and

655
00:36:39,540 --> 00:36:42,720
previous Works um therefore proposed an

656
00:36:42,720 --> 00:36:45,180
interval comparison instead of using the

657
00:36:45,180 --> 00:36:48,060
division but this is not possible if we

658
00:36:48,060 --> 00:36:50,880
have higher compression parameters D so

659
00:36:50,880 --> 00:36:54,180
we cannot split um easily into many

660
00:36:54,180 --> 00:36:57,480
intervals and then make the comparison

661
00:36:57,480 --> 00:36:59,640
definitely we have developed an

662
00:36:59,640 --> 00:37:03,480
alternative approach which in fact uses

663
00:37:03,480 --> 00:37:05,940
the division but now let us have a

664
00:37:05,940 --> 00:37:08,960
closer look at the division uh if we

665
00:37:08,960 --> 00:37:12,240
illustrate X Prime into two shares we

666
00:37:12,240 --> 00:37:16,800
can obtain the following figure

667
00:37:16,800 --> 00:37:20,060
and that the version has a principle

668
00:37:20,060 --> 00:37:23,640
infinitively many decimal places and

669
00:37:23,640 --> 00:37:25,320
this makes the carry computation

670
00:37:25,320 --> 00:37:28,440
extremely difficult if your

671
00:37:28,440 --> 00:37:31,020
um yeah have two shares because we do

672
00:37:31,020 --> 00:37:34,079
not know what a carry of the combined

673
00:37:34,079 --> 00:37:35,880
shares is

674
00:37:35,880 --> 00:37:39,240
however in our work we found out that

675
00:37:39,240 --> 00:37:42,359
imprint uh yeah that in principle F

676
00:37:42,359 --> 00:37:45,180
decimal places are sufficient in order

677
00:37:45,180 --> 00:37:48,780
to compute our correct carry computation

678
00:37:48,780 --> 00:37:52,260
with two shares so the Mast

679
00:37:52,260 --> 00:37:54,599
um ciphertext compression tolerates an

680
00:37:54,599 --> 00:37:57,540
approximated quotient

681
00:37:57,540 --> 00:38:01,560
and the amount of decimal places F that

682
00:38:01,560 --> 00:38:04,800
we require is dependent on the scheme

683
00:38:04,800 --> 00:38:07,140
and on the modulus Fork hybrid is for

684
00:38:07,140 --> 00:38:09,599
example 13.

685
00:38:09,599 --> 00:38:12,240
now let us have a look at the circuit

686
00:38:12,240 --> 00:38:13,980
that is used for the ciphertext

687
00:38:13,980 --> 00:38:15,240
compression

688
00:38:15,240 --> 00:38:18,300
so for the multiplication by 2 to the

689
00:38:18,300 --> 00:38:20,820
power of B we are shift

690
00:38:20,820 --> 00:38:24,240
um the input or the input shares by D

691
00:38:24,240 --> 00:38:27,060
positions and then in order to avoid

692
00:38:27,060 --> 00:38:29,460
floating Point arithmetic

693
00:38:29,460 --> 00:38:33,420
we shift again by F positions so we

694
00:38:33,420 --> 00:38:36,599
shift in total by D plus s positions

695
00:38:36,599 --> 00:38:38,880
then we will perform the multiplications

696
00:38:38,880 --> 00:38:42,000
with the inverse of Q we will have some

697
00:38:42,000 --> 00:38:44,480
correction term in order to

698
00:38:44,480 --> 00:38:47,460
avoid the rounding operation and instead

699
00:38:47,460 --> 00:38:50,160
use the shifting operation

700
00:38:50,160 --> 00:38:53,400
and before we shift back to our original

701
00:38:53,400 --> 00:38:57,660
or to our desired result

702
00:38:57,660 --> 00:39:00,720
we apply an A to B conversion and we

703
00:39:00,720 --> 00:39:03,359
apply this A to B conversion

704
00:39:03,359 --> 00:39:05,760
um in order to avoid the complex calorie

705
00:39:05,760 --> 00:39:07,280
computation

706
00:39:07,280 --> 00:39:10,440
for the shift operation so the shift

707
00:39:10,440 --> 00:39:13,320
operation in the arithmetic sharing

708
00:39:13,320 --> 00:39:16,560
requires a carry handling but in a

709
00:39:16,560 --> 00:39:20,160
Boolean sharing we can neglect the Carry

710
00:39:20,160 --> 00:39:21,960
operation

711
00:39:21,960 --> 00:39:24,240
so as you can see here we have quite

712
00:39:24,240 --> 00:39:26,760
simple operations and only one A to B

713
00:39:26,760 --> 00:39:29,040
conversion in order to handle the mass

714
00:39:29,040 --> 00:39:32,180
ciphertext compression

715
00:39:32,339 --> 00:39:34,859
now there are by non-resampling is also

716
00:39:34,859 --> 00:39:36,960
quite critical as it needs to combine

717
00:39:36,960 --> 00:39:40,220
multiple shares in order to

718
00:39:40,220 --> 00:39:45,618
compute the other operations

719
00:39:45,960 --> 00:39:48,900
the central binomial distribution is an

720
00:39:48,900 --> 00:39:51,180
approximation of the gaussian

721
00:39:51,180 --> 00:39:53,280
distribution and is frequently used in

722
00:39:53,280 --> 00:39:55,500
let the space cryptography it can be

723
00:39:55,500 --> 00:39:59,099
computed according to equation 3 which

724
00:39:59,099 --> 00:40:02,339
basically accumulates the other

725
00:40:02,339 --> 00:40:04,920
subtraction the bitwise subtractions of

726
00:40:04,920 --> 00:40:09,480
two independent integers x and x Prime

727
00:40:09,480 --> 00:40:11,700
and this subtraction or this

728
00:40:11,700 --> 00:40:13,920
accumulations this bitwise accumulation

729
00:40:13,920 --> 00:40:15,660
can be computed with the following

730
00:40:15,660 --> 00:40:17,880
editory which contains

731
00:40:17,880 --> 00:40:20,099
um this the house address

732
00:40:20,099 --> 00:40:23,099
first we import our

733
00:40:23,099 --> 00:40:27,660
um Java bits of the variable X and then

734
00:40:27,660 --> 00:40:30,980
after we have computed the sums we are

735
00:40:30,980 --> 00:40:35,220
input negative input of X Prime and at

736
00:40:35,220 --> 00:40:37,440
the end we have this summation so this

737
00:40:37,440 --> 00:40:40,500
is quite simple in our plane design

738
00:40:40,500 --> 00:40:43,619
but how does this look in a mast setting

739
00:40:43,619 --> 00:40:46,079
so one approach is to use the threshold

740
00:40:46,079 --> 00:40:49,200
implementation principles which is a

741
00:40:49,200 --> 00:40:51,720
function based approach based mainly on

742
00:40:51,720 --> 00:40:54,660
the incompleteness property

743
00:40:54,660 --> 00:40:58,280
and then we Define divide our

744
00:40:58,280 --> 00:41:01,500
our addition or half adder in two

745
00:41:01,500 --> 00:41:03,000
separate functions

746
00:41:03,000 --> 00:41:05,280
for the sum and for the carry

747
00:41:05,280 --> 00:41:06,540
computation

748
00:41:06,540 --> 00:41:08,820
and if we apply it then the threshold

749
00:41:08,820 --> 00:41:11,339
implementation principles we obtain the

750
00:41:11,339 --> 00:41:13,740
equations four to seven

751
00:41:13,740 --> 00:41:16,380
and we can see that the linear

752
00:41:16,380 --> 00:41:18,180
operations there are extra operations

753
00:41:18,180 --> 00:41:21,900
are quite easy to compute we can simply

754
00:41:21,900 --> 00:41:23,640
sharewise compute them

755
00:41:23,640 --> 00:41:26,280
the non-linear end operation is a little

756
00:41:26,280 --> 00:41:28,140
bit more tricky

757
00:41:28,140 --> 00:41:30,720
um yeah in order to have a first order

758
00:41:30,720 --> 00:41:32,760
secure implementation in total we

759
00:41:32,760 --> 00:41:34,800
require three shares

760
00:41:34,800 --> 00:41:36,839
but you can see that for example an

761
00:41:36,839 --> 00:41:41,760
equation 5 always one share is missing

762
00:41:41,760 --> 00:41:44,160
um for example equation five the share

763
00:41:44,160 --> 00:41:47,240
zero is missing equation six the

764
00:41:47,240 --> 00:41:49,859
equation one is missing during the

765
00:41:49,859 --> 00:41:51,480
computations

766
00:41:51,480 --> 00:41:55,200
internal equation seven the shell 2 is

767
00:41:55,200 --> 00:41:57,119
missing

768
00:41:57,119 --> 00:41:59,820
now when we turn the previous edit tree

769
00:41:59,820 --> 00:42:01,079
it was

770
00:42:01,079 --> 00:42:02,400
um we haven't returned this into a

771
00:42:02,400 --> 00:42:04,920
threshold implementation we can see that

772
00:42:04,920 --> 00:42:08,220
the circuit is already quite complex and

773
00:42:08,220 --> 00:42:11,700
as you can imagine this has a quite High

774
00:42:11,700 --> 00:42:14,040
resource consumption and also Randomness

775
00:42:14,040 --> 00:42:15,119
requirement

776
00:42:15,119 --> 00:42:17,160
therefore we looked for an alternative

777
00:42:17,160 --> 00:42:19,619
approach based on the domain oriented

778
00:42:19,619 --> 00:42:21,540
masking principles

779
00:42:21,540 --> 00:42:25,320
and here instead of three shares we

780
00:42:25,320 --> 00:42:28,079
require only two shares in order to get

781
00:42:28,079 --> 00:42:30,960
in first order secure implementation and

782
00:42:30,960 --> 00:42:33,720
as you all can also see in the slide

783
00:42:33,720 --> 00:42:37,020
um the circuit is not that complex so we

784
00:42:37,020 --> 00:42:39,960
have much less components here

785
00:42:39,960 --> 00:42:43,920
the principles of the Dom and uh that we

786
00:42:43,920 --> 00:42:47,240
have used for our query computation

787
00:42:47,240 --> 00:42:49,680
is to split

788
00:42:49,680 --> 00:42:51,839
um yeah the secret variables into

789
00:42:51,839 --> 00:42:53,520
separate domains and all the

790
00:42:53,520 --> 00:42:56,280
computations are performed within the

791
00:42:56,280 --> 00:42:59,220
domain and only for the domain Crossing

792
00:42:59,220 --> 00:43:01,920
operations we use fresh Randomness in

793
00:43:01,920 --> 00:43:04,380
our case the R value

794
00:43:04,380 --> 00:43:07,200
so as you can see uh the circuit size

795
00:43:07,200 --> 00:43:10,260
really reduced and in total yeah we have

796
00:43:10,260 --> 00:43:13,260
40 percent less fpga slices here for

797
00:43:13,260 --> 00:43:15,740
example

798
00:43:16,200 --> 00:43:18,780
now all the different accelerators that

799
00:43:18,780 --> 00:43:21,020
I presented and also some more were

800
00:43:21,020 --> 00:43:24,180
integrated into a 32-bit risk 5

801
00:43:24,180 --> 00:43:27,900
processor and yeah this includes for

802
00:43:27,900 --> 00:43:31,079
example catch up accelerator and also

803
00:43:31,079 --> 00:43:33,480
for the non-linear catch up part we have

804
00:43:33,480 --> 00:43:36,660
developed a t accelerator

805
00:43:36,660 --> 00:43:39,480
um our binomial sampling at a tree based

806
00:43:39,480 --> 00:43:41,700
on the main oriented masking

807
00:43:41,700 --> 00:43:44,940
and a secure error for A to B and b2a

808
00:43:44,940 --> 00:43:46,140
conversions

809
00:43:46,140 --> 00:43:49,200
for our ring arithmetic accelerator with

810
00:43:49,200 --> 00:43:50,880
this one we placed outside of the

811
00:43:50,880 --> 00:43:53,640
processor core as we want to strictly

812
00:43:53,640 --> 00:43:57,000
split the 32-bit operations of the risk

813
00:43:57,000 --> 00:44:00,960
5 Core and the higher data path of the

814
00:44:00,960 --> 00:44:04,819
Ring arithmetic accelerator

815
00:44:04,920 --> 00:44:07,800
so when looking at performance results

816
00:44:07,800 --> 00:44:11,339
and cycle counts we observed that our

817
00:44:11,339 --> 00:44:14,280
Mass implementation has an overhead of

818
00:44:14,280 --> 00:44:17,099
factor 4.5 for kyber

819
00:44:17,099 --> 00:44:21,660
and the factor of 2.6 for saber

820
00:44:21,660 --> 00:44:23,880
so it turns out that cellular is a

821
00:44:23,880 --> 00:44:27,119
little bit easier or would say easier

822
00:44:27,119 --> 00:44:31,260
maybe a cheaper to mask and this is

823
00:44:31,260 --> 00:44:34,079
mainly as I said due to the module

824
00:44:34,079 --> 00:44:36,420
running with rounding instead of the

825
00:44:36,420 --> 00:44:38,460
modern learning with everyone and also

826
00:44:38,460 --> 00:44:41,819
the simpler power of two model lead

827
00:44:41,819 --> 00:44:46,680
and yeah so in summary we developed a

828
00:44:46,680 --> 00:44:50,040
yeah we've developed a hardware software

829
00:44:50,040 --> 00:44:53,819
cool design for Sable and kyber we

830
00:44:53,819 --> 00:44:56,900
travel a lot uh tumeric Mass

831
00:44:56,900 --> 00:45:00,680
ring arithmetic accelerator and also

832
00:45:00,680 --> 00:45:03,839
accelerators for the critical non-linear

833
00:45:03,839 --> 00:45:05,280
operations

834
00:45:05,280 --> 00:45:07,500
so to summarizes my talk thank you very

835
00:45:07,500 --> 00:45:10,520
much for your attention

836
00:45:16,200 --> 00:45:18,780
thank you very much there we go so

837
00:45:18,780 --> 00:45:22,280
questions in the room

838
00:45:26,760 --> 00:45:28,140
CME

839
00:45:28,140 --> 00:45:30,240
um one question I had on actually two

840
00:45:30,240 --> 00:45:33,660
but the arm the the results for the

841
00:45:33,660 --> 00:45:35,700
software implementation you also showed

842
00:45:35,700 --> 00:45:37,380
Iron Man wrist five was there any

843
00:45:37,380 --> 00:45:39,300
difference I guess between arm and wrist

844
00:45:39,300 --> 00:45:41,880
five itself that impacted say the cycle

845
00:45:41,880 --> 00:45:43,140
count if you implement the same

846
00:45:43,140 --> 00:45:44,940
algorithm or you'd expect those to be

847
00:45:44,940 --> 00:45:48,079
similar or how would that

848
00:45:48,480 --> 00:45:50,880
um in comparison we achieved a lower

849
00:45:50,880 --> 00:45:53,220
cycle count but this is mainly as we

850
00:45:53,220 --> 00:45:57,180
have a lot of Hardware accelerators also

851
00:45:57,180 --> 00:45:59,880
and yeah so

852
00:45:59,880 --> 00:46:03,240
um yeah you can see here in comparison

853
00:46:03,240 --> 00:46:05,040
for example

854
00:46:05,040 --> 00:46:06,900
yeah for the

855
00:46:06,900 --> 00:46:09,420
Master implementation

856
00:46:09,420 --> 00:46:12,119
um yeah we have one

857
00:46:12,119 --> 00:46:14,400
yeah yeah so I guess the question was

858
00:46:14,400 --> 00:46:16,079
that it's mostly related to your work

859
00:46:16,079 --> 00:46:17,400
and not like if you took your code

860
00:46:17,400 --> 00:46:19,920
compiled it on arm I'm assuming the

861
00:46:19,920 --> 00:46:22,140
cycle count would be a similar

862
00:46:22,140 --> 00:46:23,640
number

863
00:46:23,640 --> 00:46:26,099
or is there any implication on the risk

864
00:46:26,099 --> 00:46:29,400
5 instruction set out of interest

865
00:46:29,400 --> 00:46:33,900
um so yeah for example takes M4 has many

866
00:46:33,900 --> 00:46:37,920
uh nice features and yeah for example

867
00:46:37,920 --> 00:46:42,000
the vectorized arithmetic is quite nice

868
00:46:42,000 --> 00:46:45,000
that we do not directly have in our risk

869
00:46:45,000 --> 00:46:46,859
5 platform here but we can also write

870
00:46:46,859 --> 00:46:49,740
some instruction set extensions

871
00:46:49,740 --> 00:46:52,859
I'm exhausted were there questions in

872
00:46:52,859 --> 00:46:55,098
the room

873
00:46:55,680 --> 00:46:58,260
let's see

874
00:46:58,260 --> 00:47:00,180
I don't see any questions online so I

875
00:47:00,180 --> 00:47:02,220
think with that we'll move on to the

876
00:47:02,220 --> 00:47:03,480
next speaker to keep it on track thank

877
00:47:03,480 --> 00:47:06,200
you very much game time

878
00:47:35,880 --> 00:47:39,020
then click once

879
00:47:49,980 --> 00:47:52,920
okay so for the final talk to close out

880
00:47:52,920 --> 00:47:53,880
chess

881
00:47:53,880 --> 00:47:55,380
um we'll have an interesting work on

882
00:47:55,380 --> 00:47:57,780
consulate enclaves towards disaggregated

883
00:47:57,780 --> 00:48:00,000
trust execution and Mort Schneider here

884
00:48:00,000 --> 00:48:01,920
we'll take it away thank you very much

885
00:48:01,920 --> 00:48:04,920
thanks uh so yeah welcome to my talk my

886
00:48:04,920 --> 00:48:06,839
goal is very easy to pay I try to keep

887
00:48:06,839 --> 00:48:08,280
you from falling asleep

888
00:48:08,280 --> 00:48:10,800
this is the great honor to give the last

889
00:48:10,800 --> 00:48:13,980
talk workers depending who you ask

890
00:48:13,980 --> 00:48:16,260
um today I'm gonna use mostly pictures

891
00:48:16,260 --> 00:48:19,140
no formula no nothing you know try to

892
00:48:19,140 --> 00:48:22,079
keep it light for the end of chess

893
00:48:22,079 --> 00:48:24,359
good so first I'm going to talk a bit

894
00:48:24,359 --> 00:48:26,579
about modern Computing and sort of our

895
00:48:26,579 --> 00:48:28,859
view on this um and this is mainly from

896
00:48:28,859 --> 00:48:31,800
sort of super Computing space as well

897
00:48:31,800 --> 00:48:34,319
um in the past we had processors we had

898
00:48:34,319 --> 00:48:36,060
memory and we did all of our computation

899
00:48:36,060 --> 00:48:38,220
using these two things uh nowadays we

900
00:48:38,220 --> 00:48:40,380
have many devices you know from personal

901
00:48:40,380 --> 00:48:42,660
Computing devices keyboards you know

902
00:48:42,660 --> 00:48:44,900
older input devices cameras microphones

903
00:48:44,900 --> 00:48:48,660
to accelerators you know network cards

904
00:48:48,660 --> 00:48:51,359
graphics cards accelerators and every

905
00:48:51,359 --> 00:48:53,460
all of this is basically used

906
00:48:53,460 --> 00:48:55,920
predominantly now in modern Computing

907
00:48:55,920 --> 00:48:58,260
because we need more performance

908
00:48:58,260 --> 00:49:01,079
now the main thing that's

909
00:49:01,079 --> 00:49:03,300
okay one one more example you don't have

910
00:49:03,300 --> 00:49:06,480
to trust me with this this is uh a

911
00:49:06,480 --> 00:49:09,060
recent arm uh I think it's an apple

912
00:49:09,060 --> 00:49:12,420
processor and here you see like from the

913
00:49:12,420 --> 00:49:14,819
floor diagram only a small amount of the

914
00:49:14,819 --> 00:49:16,619
floor of the area is spent actually on

915
00:49:16,619 --> 00:49:18,720
course on compute course most of it is

916
00:49:18,720 --> 00:49:21,660
spent on neural processing engines on

917
00:49:21,660 --> 00:49:24,180
gpus and so on

918
00:49:24,180 --> 00:49:27,780
now if you look at another area which is

919
00:49:27,780 --> 00:49:30,000
trusted Computing here you know

920
00:49:30,000 --> 00:49:32,099
something a bit weird happens because

921
00:49:32,099 --> 00:49:34,319
like we are before from a different talk

922
00:49:34,319 --> 00:49:35,760
these are all trusting Computing

923
00:49:35,760 --> 00:49:39,480
proposals from industry and Academia but

924
00:49:39,480 --> 00:49:41,760
all of these are based on

925
00:49:41,760 --> 00:49:45,300
One processor on the main processor now

926
00:49:45,300 --> 00:49:47,400
right modern Computing goes to

927
00:49:47,400 --> 00:49:49,079
accelerators trusting Computing goes to

928
00:49:49,079 --> 00:49:50,760
a processor there's already some

929
00:49:50,760 --> 00:49:53,640
disconnect here uh that timing and all

930
00:49:53,640 --> 00:49:55,859
but Nvidia came like after we wrote this

931
00:49:55,859 --> 00:49:58,619
paper and we came with their proposal so

932
00:49:58,619 --> 00:50:01,500
it's kind of a but I'm going to talk

933
00:50:01,500 --> 00:50:03,180
more about this later but for now let's

934
00:50:03,180 --> 00:50:05,400
just ignore it and uh yeah we continue

935
00:50:05,400 --> 00:50:08,940
on so the main thing that's also maybe

936
00:50:08,940 --> 00:50:10,560
you should take away or if you want to

937
00:50:10,560 --> 00:50:12,180
take away something take away this thing

938
00:50:12,180 --> 00:50:14,339
that's you know modern Computing we go

939
00:50:14,339 --> 00:50:16,579
towards custom devices we go towards

940
00:50:16,579 --> 00:50:18,140
acceleration

941
00:50:18,140 --> 00:50:20,940
specialized devices but in trusted

942
00:50:20,940 --> 00:50:23,400
Computing we just say well okay let's go

943
00:50:23,400 --> 00:50:26,579
back to the CPU and we believe that this

944
00:50:26,579 --> 00:50:28,859
is sort of an inherent you know flaw of

945
00:50:28,859 --> 00:50:32,280
the current designs and yeah would be

946
00:50:32,280 --> 00:50:35,880
nice to sort of fix this now

947
00:50:35,880 --> 00:50:37,859
um it's as I said before it's not just

948
00:50:37,859 --> 00:50:39,480
Computing we also have input devices

949
00:50:39,480 --> 00:50:41,460
right we have sensors and we have

950
00:50:41,460 --> 00:50:43,319
cameras you have GPS devices you could

951
00:50:43,319 --> 00:50:45,540
think of you know I might want secure

952
00:50:45,540 --> 00:50:47,220
location

953
00:50:47,220 --> 00:50:49,920
um I might want a secure video feed I

954
00:50:49,920 --> 00:50:51,740
might want you know all of these things

955
00:50:51,740 --> 00:50:54,240
I have light sensors that I want to see

956
00:50:54,240 --> 00:50:57,059
if the light is on or off

957
00:50:57,059 --> 00:51:00,660
um so actually this entire thing is not

958
00:51:00,660 --> 00:51:03,119
trusted Computing doesn't support any of

959
00:51:03,119 --> 00:51:05,220
this mostly there are academic proposals

960
00:51:05,220 --> 00:51:07,619
for individual things but mostly it

961
00:51:07,619 --> 00:51:09,780
doesn't support any of these things

962
00:51:09,780 --> 00:51:11,880
now

963
00:51:11,880 --> 00:51:13,800
um one thing we did actually to go back

964
00:51:13,800 --> 00:51:16,200
here one thing that we sort of did to

965
00:51:16,200 --> 00:51:18,540
build all of our stuff is that we said

966
00:51:18,540 --> 00:51:21,359
okay let's assume we have

967
00:51:21,359 --> 00:51:22,800
um trust execution environments and we

968
00:51:22,800 --> 00:51:24,300
heard the talk before what these are

969
00:51:24,300 --> 00:51:26,960
sort of so let's assume we have these

970
00:51:26,960 --> 00:51:29,640
systems on all of our devices so we have

971
00:51:29,640 --> 00:51:32,280
one in the processor and we have one on

972
00:51:32,280 --> 00:51:34,980
you know the GPU the network card and so

973
00:51:34,980 --> 00:51:38,520
on all sensors and so on now this is not

974
00:51:38,520 --> 00:51:40,559
new people have been doing this in

975
00:51:40,559 --> 00:51:42,359
Academia there's been people who did

976
00:51:42,359 --> 00:51:45,000
this on gpos people fpgas

977
00:51:45,000 --> 00:51:48,000
and many more and now also Nvidia doing

978
00:51:48,000 --> 00:51:50,040
this on actual commercial devices that

979
00:51:50,040 --> 00:51:51,599
you can I'm not sure if you can buy it

980
00:51:51,599 --> 00:51:53,040
right now but they announced it like a

981
00:51:53,040 --> 00:51:55,380
year ago or something

982
00:51:55,380 --> 00:51:56,940
um

983
00:51:56,940 --> 00:51:59,880
now one thing that you have to think of

984
00:51:59,880 --> 00:52:02,280
if you build a system like this is the

985
00:52:02,280 --> 00:52:03,960
original attacker model for many of

986
00:52:03,960 --> 00:52:05,520
these trusted across the Computing

987
00:52:05,520 --> 00:52:09,420
proposals or very strong so in for

988
00:52:09,420 --> 00:52:11,579
example sgx is one of the you know most

989
00:52:11,579 --> 00:52:14,280
prominent ones we have local physics

990
00:52:14,280 --> 00:52:15,960
diversaries we have you know entire

991
00:52:15,960 --> 00:52:18,599
software stack is considered malicious

992
00:52:18,599 --> 00:52:22,200
um and yeah the main issue that this

993
00:52:22,200 --> 00:52:23,760
there with this attacker model like we

994
00:52:23,760 --> 00:52:26,760
would like to have this right but if you

995
00:52:26,760 --> 00:52:28,619
look at for example sensors I mean a

996
00:52:28,619 --> 00:52:30,780
local physics adversary is a bit useless

997
00:52:30,780 --> 00:52:32,640
right because I mean I can just take a

998
00:52:32,640 --> 00:52:34,440
flashlight to point that my sensor and

999
00:52:34,440 --> 00:52:36,680
it's going to read something else right

1000
00:52:36,680 --> 00:52:39,059
so essentially the local physics

1001
00:52:39,059 --> 00:52:40,260
adversary sort of falls out of the

1002
00:52:40,260 --> 00:52:42,900
window if you consider sensors any sort

1003
00:52:42,900 --> 00:52:45,660
of inputs output stuff

1004
00:52:45,660 --> 00:52:47,700
um for accelerators now there's an

1005
00:52:47,700 --> 00:52:49,200
asterisk right if you only consider

1006
00:52:49,200 --> 00:52:51,119
Computing you can't probably do it with

1007
00:52:51,119 --> 00:52:53,280
the local facing adversary

1008
00:52:53,280 --> 00:52:55,260
um but yeah in general if you just want

1009
00:52:55,260 --> 00:52:56,700
to support everything you probably have

1010
00:52:56,700 --> 00:52:57,300
to

1011
00:52:57,300 --> 00:52:59,099
deal um

1012
00:52:59,099 --> 00:53:01,319
you have to exclude the local physics

1013
00:53:01,319 --> 00:53:02,700
adversary

1014
00:53:02,700 --> 00:53:06,720
so maybe a quick um recap for some of

1015
00:53:06,720 --> 00:53:09,000
you that don't know how this works

1016
00:53:09,000 --> 00:53:11,160
essentially how do you interact with

1017
00:53:11,160 --> 00:53:13,260
peripherals on current systems it's

1018
00:53:13,260 --> 00:53:15,900
pretty easy here you have memory this is

1019
00:53:15,900 --> 00:53:18,540
a physical address space and

1020
00:53:18,540 --> 00:53:21,240
essentially after some address you have

1021
00:53:21,240 --> 00:53:23,280
vram that's all mapped there so you can

1022
00:53:23,280 --> 00:53:25,200
access this based on addresses but you

1023
00:53:25,200 --> 00:53:27,839
also have other devices in in air in in

1024
00:53:27,839 --> 00:53:30,359
memory ranges also address ranges that

1025
00:53:30,359 --> 00:53:33,119
are not part of memory

1026
00:53:33,119 --> 00:53:34,920
um so yeah if you are you can have you

1027
00:53:34,920 --> 00:53:37,260
know PCI devices stuff like this and you

1028
00:53:37,260 --> 00:53:39,300
communicate with these using we call

1029
00:53:39,300 --> 00:53:41,520
them memory Maps IO memory map registers

1030
00:53:41,520 --> 00:53:43,619
and you can just access an address like

1031
00:53:43,619 --> 00:53:45,780
this and they will respond or they will

1032
00:53:45,780 --> 00:53:47,880
you know interact somehow with you then

1033
00:53:47,880 --> 00:53:49,680
there's the second way of interaction

1034
00:53:49,680 --> 00:53:51,540
with with specialized hardware and

1035
00:53:51,540 --> 00:53:55,140
that's EMA right we have direct shared

1036
00:53:55,140 --> 00:53:56,339
memory

1037
00:53:56,339 --> 00:54:00,119
um and these devices are usually more

1038
00:54:00,119 --> 00:54:02,160
geared towards higher speeds um

1039
00:54:02,160 --> 00:54:04,380
accelerators and so on but these are

1040
00:54:04,380 --> 00:54:06,720
sort of the main thing is these these

1041
00:54:06,720 --> 00:54:07,940
are the two options that you have

1042
00:54:07,940 --> 00:54:10,859
nowadays to communicate with peripherals

1043
00:54:10,859 --> 00:54:14,880
on normal application processors now I'm

1044
00:54:14,880 --> 00:54:16,200
gonna tell you that you know this is

1045
00:54:16,200 --> 00:54:17,819
cool because we have addresses and you

1046
00:54:17,819 --> 00:54:20,160
can use memory isolation mechanisms

1047
00:54:20,160 --> 00:54:22,260
let's hope this fault injection attack

1048
00:54:22,260 --> 00:54:25,740
we heard before doesn't work for now uh

1049
00:54:25,740 --> 00:54:27,480
um but yeah I'm gonna tell you pmps are

1050
00:54:27,480 --> 00:54:29,520
great don't disregard all of the poll

1051
00:54:29,520 --> 00:54:31,200
injection attacks

1052
00:54:31,200 --> 00:54:33,900
um good so now

1053
00:54:33,900 --> 00:54:37,440
to simplify this a lot

1054
00:54:37,440 --> 00:54:40,319
um what we want we have these we call

1055
00:54:40,319 --> 00:54:42,240
them enclaves in this space

1056
00:54:42,240 --> 00:54:44,280
um these enclaves are sort of isolated

1057
00:54:44,280 --> 00:54:47,400
containers they run some codes that is

1058
00:54:47,400 --> 00:54:49,319
sort of you can attest to remotely and

1059
00:54:49,319 --> 00:54:51,020
then this code does some computation

1060
00:54:51,020 --> 00:54:53,760
traditionally this only did it on the

1061
00:54:53,760 --> 00:54:55,680
processor on the main processor

1062
00:54:55,680 --> 00:54:57,720
and now what we want to do is we want to

1063
00:54:57,720 --> 00:55:00,240
also enable these these containers to

1064
00:55:00,240 --> 00:55:02,760
talk to peripherals right let's say you

1065
00:55:02,760 --> 00:55:05,339
want to talk through memory mapped IO to

1066
00:55:05,339 --> 00:55:07,619
a keyboard or you want to talk through

1067
00:55:07,619 --> 00:55:10,140
dma with a graphics card

1068
00:55:10,140 --> 00:55:12,780
um or actually you might want to have a

1069
00:55:12,780 --> 00:55:14,040
combination of all of this right you

1070
00:55:14,040 --> 00:55:16,200
might want to have a trusted container

1071
00:55:16,200 --> 00:55:18,240
that records video

1072
00:55:18,240 --> 00:55:20,400
and then passes this through some you

1073
00:55:20,400 --> 00:55:22,619
know Vision computer vision Pipeline on

1074
00:55:22,619 --> 00:55:24,720
the graphics card

1075
00:55:24,720 --> 00:55:27,839
um and all of this sort of some of these

1076
00:55:27,839 --> 00:55:29,940
individual Parts you can do with current

1077
00:55:29,940 --> 00:55:32,099
approaches like nvidia's approach for

1078
00:55:32,099 --> 00:55:34,260
example you can do you can essentially

1079
00:55:34,260 --> 00:55:36,059
build a container that is shared that

1080
00:55:36,059 --> 00:55:39,300
that can work with the GPU itself so you

1081
00:55:39,300 --> 00:55:41,520
can have sort of a a thing that works on

1082
00:55:41,520 --> 00:55:43,859
the main processor and the graphics card

1083
00:55:43,859 --> 00:55:46,319
but you cannot integrate any other stuff

1084
00:55:46,319 --> 00:55:49,800
for example you know a camera

1085
00:55:49,800 --> 00:55:51,599
now

1086
00:55:51,599 --> 00:55:53,099
um one of the main problems that there

1087
00:55:53,099 --> 00:55:55,619
are with these these things

1088
00:55:55,619 --> 00:55:58,440
sort of to simplify it also very a lot

1089
00:55:58,440 --> 00:56:01,260
is that the attacker basically wants to

1090
00:56:01,260 --> 00:56:03,119
replace a device at runtime you

1091
00:56:03,119 --> 00:56:05,160
basically do plug it out you plug a new

1092
00:56:05,160 --> 00:56:08,040
device in and that's how you do it right

1093
00:56:08,040 --> 00:56:11,220
um so what we do to you know simplify a

1094
00:56:11,220 --> 00:56:14,640
lot again we essentially facilitate all

1095
00:56:14,640 --> 00:56:17,640
of these connect and disconnect routines

1096
00:56:17,640 --> 00:56:20,339
by doing explicit things in trusted code

1097
00:56:20,339 --> 00:56:22,980
so essentially if you want to share

1098
00:56:22,980 --> 00:56:24,780
memory or if you want to sort of share

1099
00:56:24,780 --> 00:56:27,720
memory between a container and a

1100
00:56:27,720 --> 00:56:29,520
peripheral you want to you have to do

1101
00:56:29,520 --> 00:56:31,740
this explicitly through a call to some

1102
00:56:31,740 --> 00:56:32,940
Thruster code

1103
00:56:32,940 --> 00:56:35,099
now if one of those two dies let's say

1104
00:56:35,099 --> 00:56:37,140
that you know GPU is blocked out then

1105
00:56:37,140 --> 00:56:38,520
what's what's going to happen is that

1106
00:56:38,520 --> 00:56:41,040
this piece of shared memory will just

1107
00:56:41,040 --> 00:56:42,720
have it's no longer shared right it's

1108
00:56:42,720 --> 00:56:45,300
only accessible from the software on the

1109
00:56:45,300 --> 00:56:47,099
processor and you will need to

1110
00:56:47,099 --> 00:56:49,260
explicitly disconnect it before any new

1111
00:56:49,260 --> 00:56:51,660
device or any new entity that gets

1112
00:56:51,660 --> 00:56:54,720
access to it it's now uh very simplified

1113
00:56:54,720 --> 00:56:56,819
a lot but if you have more questions you

1114
00:56:56,819 --> 00:56:59,400
can come ask talk to me later so all of

1115
00:56:59,400 --> 00:57:02,220
this is we base it on Keystone as the

1116
00:57:02,220 --> 00:57:04,200
other top before did as well very cool

1117
00:57:04,200 --> 00:57:07,099
open source te environment

1118
00:57:07,099 --> 00:57:09,599
and we used

1119
00:57:09,599 --> 00:57:12,480
um open source risk 5 course as well we

1120
00:57:12,480 --> 00:57:14,160
had to expand extend some of the cores

1121
00:57:14,160 --> 00:57:15,660
but all of this is now open source so

1122
00:57:15,660 --> 00:57:18,000
you can access it if you want

1123
00:57:18,000 --> 00:57:20,520
um the on the left you see in spga

1124
00:57:20,520 --> 00:57:24,359
that's Ram that's running a 64-bit risk

1125
00:57:24,359 --> 00:57:26,880
5 Core that's I think from

1126
00:57:26,880 --> 00:57:28,559
um I think it's called Ariana but now

1127
00:57:28,559 --> 00:57:30,300
it's called CVA 6 not sure if you know

1128
00:57:30,300 --> 00:57:33,000
but you can find it online and on the

1129
00:57:33,000 --> 00:57:34,440
right you see a sort of a simulated

1130
00:57:34,440 --> 00:57:36,059
peripheral right because we had to run

1131
00:57:36,059 --> 00:57:37,980
we had to have a peripheral that's

1132
00:57:37,980 --> 00:57:40,440
supposed to have a so some sort of

1133
00:57:40,440 --> 00:57:41,940
capabilities some sort of te

1134
00:57:41,940 --> 00:57:44,339
capabilities and here I think it was a

1135
00:57:44,339 --> 00:57:46,680
segment seven segment display and the

1136
00:57:46,680 --> 00:57:49,319
Arduino we use for software running on

1137
00:57:49,319 --> 00:57:51,440
the peripheral itself

1138
00:57:51,440 --> 00:57:54,240
obviously there's a is only output right

1139
00:57:54,240 --> 00:57:57,720
very simple example so what we did to do

1140
00:57:57,720 --> 00:58:00,660
this actually first first I forgot first

1141
00:58:00,660 --> 00:58:02,400
we also measured sort of what our

1142
00:58:02,400 --> 00:58:04,380
approach does in terms of overhead

1143
00:58:04,380 --> 00:58:06,359
because we have to have some extra

1144
00:58:06,359 --> 00:58:08,880
checks in context switching and context

1145
00:58:08,880 --> 00:58:10,740
switching is very important in soft

1146
00:58:10,740 --> 00:58:13,140
development and you know so what we did

1147
00:58:13,140 --> 00:58:15,780
we measured context switch based on how

1148
00:58:15,780 --> 00:58:17,400
much memory we share

1149
00:58:17,400 --> 00:58:19,200
and essentially the context switch

1150
00:58:19,200 --> 00:58:21,119
itself which is the lights green line

1151
00:58:21,119 --> 00:58:24,420
here it doesn't increase that much it's

1152
00:58:24,420 --> 00:58:27,839
basically the same however to create a

1153
00:58:27,839 --> 00:58:29,940
new container new Enclave you have to do

1154
00:58:29,940 --> 00:58:32,040
a lot of a lot of checks and you have to

1155
00:58:32,040 --> 00:58:34,260
do some the main overhead is here the

1156
00:58:34,260 --> 00:58:36,240
virtual to physical translation policing

1157
00:58:36,240 --> 00:58:37,200
and stuff

1158
00:58:37,200 --> 00:58:39,180
so this is sort of linear with the size

1159
00:58:39,180 --> 00:58:41,700
of the shared memory size

1160
00:58:41,700 --> 00:58:43,500
now

1161
00:58:43,500 --> 00:58:45,660
I showed you before the Sim very simple

1162
00:58:45,660 --> 00:58:47,819
sort of um you know device you have a

1163
00:58:47,819 --> 00:58:49,380
segment seven segment display they want

1164
00:58:49,380 --> 00:58:51,299
to connect now we also wanted to look at

1165
00:58:51,299 --> 00:58:53,640
is how we can connect to you know a

1166
00:58:53,640 --> 00:58:55,859
large compute style device so what we

1167
00:58:55,859 --> 00:58:58,380
did is we took sort of this is a very

1168
00:58:58,380 --> 00:59:00,599
simplified view of a big graphics card

1169
00:59:00,599 --> 00:59:02,160
you know we have dram we have a lot of

1170
00:59:02,160 --> 00:59:03,839
small compute clusters and we have a few

1171
00:59:03,839 --> 00:59:06,780
bigger cores that facilitate data

1172
00:59:06,780 --> 00:59:09,240
movement and stuff like this and what we

1173
00:59:09,240 --> 00:59:10,859
did is we took one of these sort of

1174
00:59:10,859 --> 00:59:12,660
small boxes here this is the compute

1175
00:59:12,660 --> 00:59:15,900
capability and essentially one of each

1176
00:59:15,900 --> 00:59:17,819
of these small boxes or we sort of model

1177
00:59:17,819 --> 00:59:20,579
them as yeah there are a few small cores

1178
00:59:20,579 --> 00:59:22,440
that do some computation

1179
00:59:22,440 --> 00:59:25,140
and they have local memory and so on and

1180
00:59:25,140 --> 00:59:27,059
then they're sort of connected and all

1181
00:59:27,059 --> 00:59:28,799
of this is also a risk-5 based

1182
00:59:28,799 --> 00:59:30,480
accelerator that we took and then we

1183
00:59:30,480 --> 00:59:33,240
extended it using to add some PMP

1184
00:59:33,240 --> 00:59:35,400
capabilities to this uh we did some

1185
00:59:35,400 --> 00:59:36,900
optimization so that we don't have to

1186
00:59:36,900 --> 00:59:39,119
have pmps on every single core like

1187
00:59:39,119 --> 00:59:41,460
full-fledged PMP so we essentially said

1188
00:59:41,460 --> 00:59:43,319
we're going to leave the configuration

1189
00:59:43,319 --> 00:59:46,260
of it to one or the one core and then

1190
00:59:46,260 --> 00:59:47,880
mirror the configuration through all of

1191
00:59:47,880 --> 00:59:49,859
these through one of these sort of

1192
00:59:49,859 --> 00:59:51,839
clusters right that we have

1193
00:59:51,839 --> 00:59:53,880
and this is

1194
00:59:53,880 --> 00:59:56,400
um you know relatively small so we did

1195
00:59:56,400 --> 00:59:58,200
synthesize this in 22 nanometer

1196
00:59:58,200 --> 00:59:59,780
technology

1197
00:59:59,780 --> 01:00:03,720
and the it's it's okay so the one thing

1198
01:00:03,720 --> 01:00:05,700
that I have to say here and that's why

1199
01:00:05,700 --> 01:00:07,920
the asterisk is there with the four is

1200
01:00:07,920 --> 01:00:10,500
that essentially we had to adapt the

1201
01:00:10,500 --> 01:00:12,540
speeds so the essentially we wanted to

1202
01:00:12,540 --> 01:00:14,819
for these two

1203
01:00:14,819 --> 01:00:16,799
um points they wanted to evaluate they

1204
01:00:16,799 --> 01:00:20,160
wanted to have sort of an optimal 80

1205
01:00:20,160 --> 01:00:22,140
um plot point that we selected so we

1206
01:00:22,140 --> 01:00:24,359
wanted to have sort of comparable one or

1207
01:00:24,359 --> 01:00:25,559
two select The Sweet Spot of the design

1208
01:00:25,559 --> 01:00:27,299
so that the comparison makes sense

1209
01:00:27,299 --> 01:00:29,040
because otherwise you know one just

1210
01:00:29,040 --> 01:00:32,220
blows up or nothing happens so there are

1211
01:00:32,220 --> 01:00:34,859
four actually it runs a bit slower so if

1212
01:00:34,859 --> 01:00:36,660
you add this isolation Technique we

1213
01:00:36,660 --> 01:00:39,480
added you lose like 10 performance

1214
01:00:39,480 --> 01:00:42,299
but area wise it's sort of the same so

1215
01:00:42,299 --> 01:00:43,500
that's also what happens here is

1216
01:00:43,500 --> 01:00:46,020
essentially we lose performance so we

1217
01:00:46,020 --> 01:00:48,000
add overhead in the course

1218
01:00:48,000 --> 01:00:49,859
but the the floating Point Unit

1219
01:00:49,859 --> 01:00:51,839
essentially gets smaller because we

1220
01:00:51,839 --> 01:00:53,640
lower the speed that's why sort of the

1221
01:00:53,640 --> 01:00:56,880
the offset comes in

1222
01:00:56,880 --> 01:00:57,839
um

1223
01:00:57,839 --> 01:01:00,299
so one thing else that I want to talk

1224
01:01:00,299 --> 01:01:02,339
about is limitations right this is a we

1225
01:01:02,339 --> 01:01:04,260
did sort of very simple prototyping of

1226
01:01:04,260 --> 01:01:05,579
these things

1227
01:01:05,579 --> 01:01:06,180
um

1228
01:01:06,180 --> 01:01:08,700
but you essentially have a problem

1229
01:01:08,700 --> 01:01:10,680
essentially especially if you go to real

1230
01:01:10,680 --> 01:01:13,140
systems you have to write drivers and

1231
01:01:13,140 --> 01:01:15,000
drivers are large and we don't want to

1232
01:01:15,000 --> 01:01:17,119
trust large drivers

1233
01:01:17,119 --> 01:01:19,680
this is this is an inherent limitation

1234
01:01:19,680 --> 01:01:21,780
with all of this this will be limitation

1235
01:01:21,780 --> 01:01:23,160
in the future as well for process

1236
01:01:23,160 --> 01:01:24,960
Computing on devices this is also

1237
01:01:24,960 --> 01:01:27,059
limitation of Nvidia how their new

1238
01:01:27,059 --> 01:01:29,579
approach works so you know if anyone any

1239
01:01:29,579 --> 01:01:32,099
of you has a small idea please come talk

1240
01:01:32,099 --> 01:01:33,720
to me

1241
01:01:33,720 --> 01:01:35,280
um and the other thing is sort of remote

1242
01:01:35,280 --> 01:01:36,599
attacker

1243
01:01:36,599 --> 01:01:38,819
um since we cannot can no longer

1244
01:01:38,819 --> 01:01:40,559
tolerate a local physics attacker it's

1245
01:01:40,559 --> 01:01:42,720
kind of bad we lose a lot of security

1246
01:01:42,720 --> 01:01:45,420
guarantees that you got beforehand uh

1247
01:01:45,420 --> 01:01:47,220
the one thing I can say about this is

1248
01:01:47,220 --> 01:01:49,920
for compute only you can still tolerate

1249
01:01:49,920 --> 01:01:52,079
local physical attackers the thing you

1250
01:01:52,079 --> 01:01:53,640
have to do there is you have to do some

1251
01:01:53,640 --> 01:01:56,099
bus encryption you have to do some key

1252
01:01:56,099 --> 01:01:58,260
exchanges on you know before doing all

1253
01:01:58,260 --> 01:02:00,780
this this is also quite hard to do to

1254
01:02:00,780 --> 01:02:03,119
evaluate you know academically because

1255
01:02:03,119 --> 01:02:04,559
all of these things are essentially

1256
01:02:04,559 --> 01:02:06,540
behind large paywalls and you can don't

1257
01:02:06,540 --> 01:02:08,040
get access to any of these systems

1258
01:02:08,040 --> 01:02:10,380
especially want to encrypt very high

1259
01:02:10,380 --> 01:02:12,480
speed bosses so it's going to be hard to

1260
01:02:12,480 --> 01:02:15,780
valid in the future but would be fun

1261
01:02:15,780 --> 01:02:18,540
um and then lastly thanks to all of

1262
01:02:18,540 --> 01:02:20,280
these awesome open source projects they

1263
01:02:20,280 --> 01:02:21,960
made made these things possible like

1264
01:02:21,960 --> 01:02:23,700
without this we couldn't do any of these

1265
01:02:23,700 --> 01:02:25,020
things and hopefully in the future it

1266
01:02:25,020 --> 01:02:26,819
will be more

1267
01:02:26,819 --> 01:02:28,799
um and yeah with that I'm done with my

1268
01:02:28,799 --> 01:02:30,420
talk and thank you all for listening and

1269
01:02:30,420 --> 01:02:33,799
uh I hope you had a nice chess

1270
01:02:43,140 --> 01:02:44,520
all right thank you very much because

1271
01:02:44,520 --> 01:02:46,380
you said you ignored false attacks I had

1272
01:02:46,380 --> 01:02:48,000
to switch my shirt with little lightning

1273
01:02:48,000 --> 01:02:50,280
bolts so you you can never forget false

1274
01:02:50,280 --> 01:02:51,480
attacks

1275
01:02:51,480 --> 01:02:54,420
um all right so first questions in the

1276
01:02:54,420 --> 01:02:56,540
room

1277
01:02:57,420 --> 01:02:59,880
um and it's not I wondered if all right

1278
01:02:59,880 --> 01:03:01,020
um you could comment on you know

1279
01:03:01,020 --> 01:03:02,339
actually the first talk talking about

1280
01:03:02,339 --> 01:03:04,619
countermeasures to fault attacks and if

1281
01:03:04,619 --> 01:03:06,359
that would be easily applicable to your

1282
01:03:06,359 --> 01:03:08,579
sort of PMP solution or is this

1283
01:03:08,579 --> 01:03:11,099
different or just at a high level

1284
01:03:11,099 --> 01:03:12,599
um I'm pretty sure they would be

1285
01:03:12,599 --> 01:03:14,339
applicable like all the defenses that

1286
01:03:14,339 --> 01:03:16,020
you can do you know masking fault

1287
01:03:16,020 --> 01:03:17,700
injection mitigations all of this is

1288
01:03:17,700 --> 01:03:19,740
what we did essentially is mostly on the

1289
01:03:19,740 --> 01:03:22,440
software level right so essentially all

1290
01:03:22,440 --> 01:03:23,700
the defense you can imagine you can

1291
01:03:23,700 --> 01:03:27,119
apply that work on on other circuits I

1292
01:03:27,119 --> 01:03:27,960
think

1293
01:03:27,960 --> 01:03:30,059
very cool um so look at that great

1294
01:03:30,059 --> 01:03:31,920
Synergy within the session already here

1295
01:03:31,920 --> 01:03:33,660
open source

1296
01:03:33,660 --> 01:03:35,040
um okay so we'll see if there's other

1297
01:03:35,040 --> 01:03:39,619
questions in the room and I check online

1298
01:03:42,119 --> 01:03:44,599
okay

1299
01:03:44,760 --> 01:03:47,040
so with that I think we can thank you

1300
01:03:47,040 --> 01:03:49,020
again for this great talk

1301
01:03:49,020 --> 01:03:51,559
um and

1302
01:03:55,140 --> 01:03:56,700
yeah so thanks again to all the speakers

1303
01:03:56,700 --> 01:03:58,799
it was a very great session and I think

1304
01:03:58,799 --> 01:04:01,619
now we see benedict for one last time

1305
01:04:01,619 --> 01:04:04,079
nice to see you

1306
01:04:04,079 --> 01:04:06,240
um now we wait for five minutes to let

1307
01:04:06,240 --> 01:04:07,559
the other folks

1308
01:04:07,559 --> 01:04:09,839
from the second hour come over here so

1309
01:04:09,839 --> 01:04:12,480
that we do the closing final remarks all

1310
01:04:12,480 --> 01:04:15,420
together in this space so just hang on

1311
01:04:15,420 --> 01:04:16,559
five minutes

1312
01:04:16,559 --> 01:04:18,980
foreign

1313
01:11:44,360 --> 01:11:47,640
all right so

1314
01:11:47,640 --> 01:11:49,620
we have been informed that whoever wants

1315
01:11:49,620 --> 01:11:51,659
to be in this room is in this room so we

1316
01:11:51,659 --> 01:11:54,739
don't have to wait any longer

1317
01:11:54,900 --> 01:11:56,340
um

1318
01:11:56,340 --> 01:11:59,520
it went pretty quick as always

1319
01:11:59,520 --> 01:12:01,679
four days of Chess are over

1320
01:12:01,679 --> 01:12:04,260
this is the last this is the last

1321
01:12:04,260 --> 01:12:08,219
session the closing remarks

1322
01:12:08,219 --> 01:12:10,340
um

1323
01:12:10,679 --> 01:12:12,120
and so we have to say you actually

1324
01:12:12,120 --> 01:12:13,440
really did it again what happened

1325
01:12:13,440 --> 01:12:15,900
yesterday it was crazy this morning we

1326
01:12:15,900 --> 01:12:17,580
had an email from this band from this

1327
01:12:17,580 --> 01:12:19,380
glorious band

1328
01:12:19,380 --> 01:12:21,120
this is what they wrote to us so they

1329
01:12:21,120 --> 01:12:24,960
they enjoyed it absolutely and um so we

1330
01:12:24,960 --> 01:12:26,580
should thank you from them they had a

1331
01:12:26,580 --> 01:12:28,860
great night as well

1332
01:12:28,860 --> 01:12:30,719
um so

1333
01:12:30,719 --> 01:12:33,980
we forward this message

1334
01:12:38,640 --> 01:12:40,679
I was going to put a couple of photos on

1335
01:12:40,679 --> 01:12:41,880
this slide

1336
01:12:41,880 --> 01:12:43,560
then I said no what happens in

1337
01:12:43,560 --> 01:12:44,360
Louisville

1338
01:12:44,360 --> 01:12:48,000
all right so we are going with all the

1339
01:12:48,000 --> 01:12:49,440
photos that we're taking throughout the

1340
01:12:49,440 --> 01:12:50,940
conference we're going to make a

1341
01:12:50,940 --> 01:12:52,739
selection of those available on a photo

1342
01:12:52,739 --> 01:12:54,480
wall later you get you will get an email

1343
01:12:54,480 --> 01:12:56,400
with a link

1344
01:12:56,400 --> 01:12:56,940
um

1345
01:12:56,940 --> 01:12:58,679
maybe not so many photos from yesterday

1346
01:12:58,679 --> 01:13:00,659
evening from people dancing because what

1347
01:13:00,659 --> 01:13:01,820
happens in Louisville

1348
01:13:01,820 --> 01:13:04,440
but so these photos will be made

1349
01:13:04,440 --> 01:13:06,120
available many people asked already so

1350
01:13:06,120 --> 01:13:07,800
don't don't worry about that that will

1351
01:13:07,800 --> 01:13:09,980
come

1352
01:13:10,080 --> 01:13:12,780
yeah we tried when we started organizing

1353
01:13:12,780 --> 01:13:14,400
this we said we have to do something

1354
01:13:14,400 --> 01:13:16,560
special about this chess and I think we

1355
01:13:16,560 --> 01:13:18,840
did something special something that you

1356
01:13:18,840 --> 01:13:20,940
would remember it was the first and just

1357
01:13:20,940 --> 01:13:23,640
after pandemic chess and we had to make

1358
01:13:23,640 --> 01:13:26,340
you remember it somehow and we hope for

1359
01:13:26,340 --> 01:13:28,920
10 years later you're back again this is

1360
01:13:28,920 --> 01:13:31,020
becoming a tradition every 10 years in

1361
01:13:31,020 --> 01:13:32,880
London

1362
01:13:32,880 --> 01:13:37,219
the Young Generation is ready for you

1363
01:13:39,300 --> 01:13:42,239
a bit of Statistics we like statistics

1364
01:13:42,239 --> 01:13:45,780
um so we had today the last registration

1365
01:13:45,780 --> 01:13:49,080
support for for online uh registrations

1366
01:13:49,080 --> 01:13:53,460
we had 520 in person registrations in

1367
01:13:53,460 --> 01:13:54,380
the system

1368
01:13:54,380 --> 01:13:58,739
177 online from 39 countries this is the

1369
01:13:58,739 --> 01:14:00,600
chart with all the countries of course

1370
01:14:00,600 --> 01:14:03,000
we cannot see all of them but the first

1371
01:14:03,000 --> 01:14:05,280
numbers you can see on the left side

1372
01:14:05,280 --> 01:14:07,620
Germany's the winner again

1373
01:14:07,620 --> 01:14:10,739
Belgium follows up but we couldn't beat

1374
01:14:10,739 --> 01:14:12,980
them

1375
01:14:15,060 --> 01:14:18,480
and of course uh not nothing surprised

1376
01:14:18,480 --> 01:14:20,340
just the day before the early bird

1377
01:14:20,340 --> 01:14:22,620
everybody starts to register and the

1378
01:14:22,620 --> 01:14:24,239
pick is then

1379
01:14:24,239 --> 01:14:27,540
please uh next time try to be a bit more

1380
01:14:27,540 --> 01:14:29,820
uh organized and registered on time so

1381
01:14:29,820 --> 01:14:31,679
that we know how much bloggers to order

1382
01:14:31,679 --> 01:14:34,140
how much chocolates to order and things

1383
01:14:34,140 --> 01:14:36,780
like that would be useful

1384
01:14:36,780 --> 01:14:38,940
I would like to thank our sponsors but

1385
01:14:38,940 --> 01:14:40,679
before I thank our sponsors I would like

1386
01:14:40,679 --> 01:14:42,840
to thank all these amazing young people

1387
01:14:42,840 --> 01:14:47,659
that thanks to them please come to stage

1388
01:14:48,300 --> 01:14:51,080
decision

1389
01:14:57,900 --> 01:15:01,099
everybody please

1390
01:15:10,199 --> 01:15:12,659
this is the future of Chess as you can

1391
01:15:12,659 --> 01:15:14,839
imagine

1392
01:15:15,360 --> 01:15:17,159
and we couldn't have done it without

1393
01:15:17,159 --> 01:15:20,100
them thank you very much guys

1394
01:15:20,100 --> 01:15:22,880
thank you

1395
01:15:23,840 --> 01:15:27,960
of course we needed also uh lots of

1396
01:15:27,960 --> 01:15:29,580
sponsors and as I said we are very

1397
01:15:29,580 --> 01:15:32,460
grateful and we really appreciate their

1398
01:15:32,460 --> 01:15:33,360
support

1399
01:15:33,360 --> 01:15:36,360
and next stop purchase will be in Prague

1400
01:15:36,360 --> 01:15:39,300
and uh here we have the next general

1401
01:15:39,300 --> 01:15:42,920
chair to tell us more about this

1402
01:15:43,920 --> 01:15:48,080
okay good afternoon my name is

1403
01:15:49,219 --> 01:15:51,780
General chairs of the next chess in

1404
01:15:51,780 --> 01:15:54,260
Prague so it will be by the beginning of

1405
01:15:54,260 --> 01:15:57,480
September so the weather is still but as

1406
01:15:57,480 --> 01:16:00,239
usual is it's very good in that time in

1407
01:16:00,239 --> 01:16:02,040
Prague if you have not been to Prague

1408
01:16:02,040 --> 01:16:03,600
you should come to practice see how

1409
01:16:03,600 --> 01:16:07,679
practice beautiful city uh we also have

1410
01:16:07,679 --> 01:16:10,440
very good beer and by the way the

1411
01:16:10,440 --> 01:16:12,540
building the venue where we are is the

1412
01:16:12,540 --> 01:16:14,400
building where Pluto was excluded from

1413
01:16:14,400 --> 01:16:16,860
the list of planets in 2006 so you will

1414
01:16:16,860 --> 01:16:18,140
see the building

1415
01:16:18,140 --> 01:16:20,100
and um

1416
01:16:20,100 --> 01:16:22,380
maybe I I think that you deserve an

1417
01:16:22,380 --> 01:16:24,000
explanation why there are two chess

1418
01:16:24,000 --> 01:16:27,179
conferences in a row uh in Europe uh as

1419
01:16:27,179 --> 01:16:28,980
you know the last physical address was

1420
01:16:28,980 --> 01:16:31,620
in Atlanta in 2019 and it just rotates

1421
01:16:31,620 --> 01:16:34,260
so it is in Europe then in uh America

1422
01:16:34,260 --> 01:16:37,140
and then in Asia so just for 2020 it was

1423
01:16:37,140 --> 01:16:40,980
planned for uh for Beijing uh due to the

1424
01:16:40,980 --> 01:16:43,980
covet situation it was shifted twice and

1425
01:16:43,980 --> 01:16:46,440
so the the this year's chess was planned

1426
01:16:46,440 --> 01:16:48,600
for for to be in Beijing unfortunately

1427
01:16:48,600 --> 01:16:51,179
if you have looked at the news you know

1428
01:16:51,179 --> 01:16:53,580
that the covet situation in Beijing

1429
01:16:53,580 --> 01:16:55,260
unfortunately started to develop again

1430
01:16:55,260 --> 01:16:58,560
after the beginning of year and uh for

1431
01:16:58,560 --> 01:17:01,260
this reason svetla and Benedict and

1432
01:17:01,260 --> 01:17:04,260
older team decided to make just for us

1433
01:17:04,260 --> 01:17:08,400
here uh and they did it so well even in

1434
01:17:08,400 --> 01:17:10,320
the short period of time only just six

1435
01:17:10,320 --> 01:17:13,040
six months that we would have really

1436
01:17:13,040 --> 01:17:16,440
hard problems to to to beat them the

1437
01:17:16,440 --> 01:17:18,540
next year in Prague so and I think that

1438
01:17:18,540 --> 01:17:21,000
they all deserve one more blouse from

1439
01:17:21,000 --> 01:17:23,659
all of us again

1440
01:17:31,380 --> 01:17:32,960
that's it

1441
01:17:32,960 --> 01:17:36,600
that was it just 2022 have a safety back

1442
01:17:36,600 --> 01:17:38,580
home and I hope to see you again next

1443
01:17:38,580 --> 01:17:40,760
year

1444
01:17:50,460 --> 01:17:53,120
okay

