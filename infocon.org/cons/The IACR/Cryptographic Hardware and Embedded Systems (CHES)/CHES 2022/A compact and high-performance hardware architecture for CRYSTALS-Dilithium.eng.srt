1
00:00:00,659 --> 00:00:03,240
hi my name is welcome to the

2
00:00:03,240 --> 00:00:05,819
presentation or people combat and high

3
00:00:05,819 --> 00:00:07,560
performance Hardware architecture for

4
00:00:07,560 --> 00:00:10,200
Crystal citizen this work was strongly

5
00:00:10,200 --> 00:00:12,179
done by the qinghai university and

6
00:00:12,179 --> 00:00:13,980
wishing macro Innovation integrated

7
00:00:13,980 --> 00:00:16,320
circuit design company

8
00:00:16,320 --> 00:00:18,900
in this work to achieve a command and

9
00:00:18,900 --> 00:00:20,760
have performance Hardware architecture

10
00:00:20,760 --> 00:00:23,640
for crystallism we propose a segmented

11
00:00:23,640 --> 00:00:26,220
pattern processing method to reduce the

12
00:00:26,220 --> 00:00:28,140
story requirements and the processing

13
00:00:28,140 --> 00:00:30,660
time and will propose several optimized

14
00:00:30,660 --> 00:00:33,239
modules to improve the efficiency of our

15
00:00:33,239 --> 00:00:34,500
architecture

16
00:00:34,500 --> 00:00:36,660
finally I'm going to introduce how the

17
00:00:36,660 --> 00:00:38,579
segmented pipeline processing method

18
00:00:38,579 --> 00:00:41,820
works and why it is efficient but I will

19
00:00:41,820 --> 00:00:43,980
talk about how we design and optimize

20
00:00:43,980 --> 00:00:45,899
the modules and I will give a brief

21
00:00:45,899 --> 00:00:48,960
implementation result and common reason

22
00:00:48,960 --> 00:00:50,579
and this is the first talk of the

23
00:00:50,579 --> 00:00:52,500
session I will give a brief introduction

24
00:00:52,500 --> 00:00:55,199
to post Quantum cryptography

25
00:00:55,199 --> 00:00:57,000
in recent years there has been

26
00:00:57,000 --> 00:00:58,800
substantial amount of research on

27
00:00:58,800 --> 00:01:01,079
quantum computers which consume

28
00:01:01,079 --> 00:01:03,300
mathematical problems that are difficult

29
00:01:03,300 --> 00:01:06,000
for conventional computers if life skill

30
00:01:06,000 --> 00:01:08,159
quantum computers are built we will be

31
00:01:08,159 --> 00:01:09,840
able to break money with a publicly

32
00:01:09,840 --> 00:01:12,299
crypto systems that we use today

33
00:01:12,299 --> 00:01:14,939
the goal of the pqc is to develop

34
00:01:14,939 --> 00:01:17,280
cryptographic systems that will ask you

35
00:01:17,280 --> 00:01:19,320
against both Quantum and classical

36
00:01:19,320 --> 00:01:22,200
conditioners and can interpret with

37
00:01:22,200 --> 00:01:24,540
existing communication protocols and

38
00:01:24,540 --> 00:01:26,939
networks the National Institute of

39
00:01:26,939 --> 00:01:29,340
Standards and the technology initiatives

40
00:01:29,340 --> 00:01:32,400
process to standardize p2c algorithm in

41
00:01:32,400 --> 00:01:35,520
2016 after three rounds of variation and

42
00:01:35,520 --> 00:01:38,159
Analysis the digital signature schemes

43
00:01:38,159 --> 00:01:39,960
are chosen to be standardized in July

44
00:01:39,960 --> 00:01:43,619
2022 Muslim christianism is a primary

45
00:01:43,619 --> 00:01:46,500
one recommended by the nist for most use

46
00:01:46,500 --> 00:01:48,119
cases

47
00:01:48,119 --> 00:01:51,119
this algorithm can have surfaces to

48
00:01:51,119 --> 00:01:53,340
generation signature generation and

49
00:01:53,340 --> 00:01:55,799
signature verification the generation

50
00:01:55,799 --> 00:01:58,140
uses a random seed to generate public

51
00:01:58,140 --> 00:02:00,600
key and security key the signature

52
00:02:00,600 --> 00:02:02,759
generation uses the secret key and the

53
00:02:02,759 --> 00:02:05,280
message through repeatedly generate and

54
00:02:05,280 --> 00:02:08,399
check a signature until it satisfy the

55
00:02:08,399 --> 00:02:11,099
security conditions the signature word

56
00:02:11,099 --> 00:02:13,379
fiction uses the public key to verify

57
00:02:13,379 --> 00:02:16,739
signature among these Fisheries the

58
00:02:16,739 --> 00:02:19,319
signature generation my class son is the

59
00:02:19,319 --> 00:02:20,819
most contact one

60
00:02:20,819 --> 00:02:23,160
it has the most numbers and types of

61
00:02:23,160 --> 00:02:25,560
operations so I'll take it as an example

62
00:02:25,560 --> 00:02:27,900
to show you how our resignation pattern

63
00:02:27,900 --> 00:02:30,480
processing method works

64
00:02:30,480 --> 00:02:32,940
this diagram shows the process of

65
00:02:32,940 --> 00:02:34,980
signature generation Loop there are

66
00:02:34,980 --> 00:02:38,459
several kinds of operations are used

67
00:02:38,459 --> 00:02:42,239
sixth 128 and 256 are used for

68
00:02:42,239 --> 00:02:45,000
Randomness generation and hashing

69
00:02:45,000 --> 00:02:47,280
entity short phone number theoretical

70
00:02:47,280 --> 00:02:49,680
transform and its inverse transform

71
00:02:49,680 --> 00:02:52,080
identity I used to accelerate the

72
00:02:52,080 --> 00:02:55,080
modification of polynomials

73
00:02:55,080 --> 00:02:58,080
modular multiplication and additions are

74
00:02:58,080 --> 00:03:00,000
used several times

75
00:03:00,000 --> 00:03:02,400
rejection summary are used to generate

76
00:03:02,400 --> 00:03:05,879
polynomials in different ranges

77
00:03:05,879 --> 00:03:08,580
and several individualized functions are

78
00:03:08,580 --> 00:03:11,220
used in this room including the most

79
00:03:11,220 --> 00:03:13,800
simple inbox and making

80
00:03:13,800 --> 00:03:15,959
the decompose is used to break up the

81
00:03:15,959 --> 00:03:18,180
numbers into their high order bits and

82
00:03:18,180 --> 00:03:20,879
low order bits the simple inbox is used

83
00:03:20,879 --> 00:03:22,980
to generate a polynomial that has only

84
00:03:22,980 --> 00:03:25,680
two non-zero coefficients whose value

85
00:03:25,680 --> 00:03:28,200
are either one or minus one this

86
00:03:28,200 --> 00:03:30,360
algorithm is an inside-out version of

87
00:03:30,360 --> 00:03:33,180
the feature use Shuffle algorithm

88
00:03:33,180 --> 00:03:36,060
the making is a technique using this

89
00:03:36,060 --> 00:03:40,760
song to reduce the size of public Heat

90
00:03:42,120 --> 00:03:44,879
several different security conditions

91
00:03:44,879 --> 00:03:48,120
attacked as in the loop

92
00:03:48,120 --> 00:03:50,220
to perform these operations efficiently

93
00:03:50,220 --> 00:03:52,500
we Design This architecture which

94
00:03:52,500 --> 00:03:55,860
contains a video every and final modules

95
00:03:55,860 --> 00:03:58,620
the catac module is used for shake 128

96
00:03:58,620 --> 00:04:01,980
and shake 256. the sample module can

97
00:04:01,980 --> 00:04:03,659
perform the rejection assembly and

98
00:04:03,659 --> 00:04:05,340
assembling ball

99
00:04:05,340 --> 00:04:07,260
the higher module contains a modular

100
00:04:07,260 --> 00:04:10,260
multiplier and a modular either

101
00:04:10,260 --> 00:04:12,659
The Entity module comes from the entity

102
00:04:12,659 --> 00:04:16,199
or INTP in a pipeline Miner it contains

103
00:04:16,199 --> 00:04:18,478
four multiplier which can be reused to

104
00:04:18,478 --> 00:04:19,858
calculate four-way parallel

105
00:04:19,858 --> 00:04:21,899
multiplication

106
00:04:21,899 --> 00:04:23,940
the tail module connects the thick most

107
00:04:23,940 --> 00:04:27,240
module on modular the making module and

108
00:04:27,240 --> 00:04:28,919
the comparator to check security

109
00:04:28,919 --> 00:04:31,740
conditions

110
00:04:31,740 --> 00:04:33,900
finally I'm going to show you how the

111
00:04:33,900 --> 00:04:35,880
segmented pattern processing works on

112
00:04:35,880 --> 00:04:38,040
our architecture with the example

113
00:04:38,040 --> 00:04:40,620
signature generation Loop

114
00:04:40,620 --> 00:04:43,380
for the first segment we use the catch

115
00:04:43,380 --> 00:04:46,560
hack module to perform Shake 256 under

116
00:04:46,560 --> 00:04:49,080
generated possible random number is sent

117
00:04:49,080 --> 00:04:50,940
to the sample module for rejection

118
00:04:50,940 --> 00:04:53,699
sampling the output y of the sample

119
00:04:53,699 --> 00:04:56,280
module is sent to the entity module

120
00:04:56,280 --> 00:04:58,860
and the white hat which means why any

121
00:04:58,860 --> 00:05:01,139
entity domain are stored into the period

122
00:05:01,139 --> 00:05:02,699
array

123
00:05:02,699 --> 00:05:05,400
in the second segment we use ketchak and

124
00:05:05,400 --> 00:05:07,979
Sample module to generate the Matrix a

125
00:05:07,979 --> 00:05:10,919
on the Fly and we use the entity module

126
00:05:10,919 --> 00:05:13,560
to prompt for a parallel pointwise

127
00:05:13,560 --> 00:05:15,720
multiplication

128
00:05:15,720 --> 00:05:18,419
in the third segment The Entity module

129
00:05:18,419 --> 00:05:22,460
performs intts on W height and output W

130
00:05:22,460 --> 00:05:24,840
then the tail module performs the

131
00:05:24,840 --> 00:05:27,720
thickness function on W the lower part

132
00:05:27,720 --> 00:05:30,539
w0 is stored into the P RAM and the

133
00:05:30,539 --> 00:05:32,880
higher part W1 is absorbed by the

134
00:05:32,880 --> 00:05:34,680
ketchup module to prepare for the

135
00:05:34,680 --> 00:05:37,440
calculating c-tailed

136
00:05:37,440 --> 00:05:39,780
the C2 is used to generate popular

137
00:05:39,780 --> 00:05:42,120
random number which is used in the

138
00:05:42,120 --> 00:05:44,820
shuffle function sampling block

139
00:05:44,820 --> 00:05:47,160
then the entity module performs entity

140
00:05:47,160 --> 00:05:50,100
on polynomial state to prepare for the

141
00:05:50,100 --> 00:05:52,919
following three multiplications

142
00:05:52,919 --> 00:05:55,380
for the first multiplication say times

143
00:05:55,380 --> 00:05:58,199
S1 plus y all the operands are stored in

144
00:05:58,199 --> 00:06:01,199
Bram in NTT domain so the high module

145
00:06:01,199 --> 00:06:04,680
performs c times S1 plus y entity domain

146
00:06:04,680 --> 00:06:07,440
coefficient by coefficient and the

147
00:06:07,440 --> 00:06:09,720
output is sent to the entity module for

148
00:06:09,720 --> 00:06:13,139
entity transform and the output of the

149
00:06:13,139 --> 00:06:16,139
intt that is z is checked by the tail

150
00:06:16,139 --> 00:06:18,660
module immediately

151
00:06:18,660 --> 00:06:22,500
for the second multiplication w0 minus a

152
00:06:22,500 --> 00:06:25,860
times S2 the C and S2 are stored in TT

153
00:06:25,860 --> 00:06:28,380
domain and the w0 are stored in normal

154
00:06:28,380 --> 00:06:31,080
domain so the high module multiplies the

155
00:06:31,080 --> 00:06:33,600
C height and S2 height and the product

156
00:06:33,600 --> 00:06:36,600
is sent to the entity module the

157
00:06:36,600 --> 00:06:38,699
subtraction is done in the tail module

158
00:06:38,699 --> 00:06:41,100
in normal domain and its result are zero

159
00:06:41,100 --> 00:06:43,500
is checked immediately and stored into

160
00:06:43,500 --> 00:06:45,120
be right

161
00:06:45,120 --> 00:06:47,220
the process of the third multiplication

162
00:06:47,220 --> 00:06:50,940
are zero plus c times t 0 is similar C

163
00:06:50,940 --> 00:06:54,720
hats times t 0 H in the height module

164
00:06:54,720 --> 00:06:57,539
entity in the entity module and the

165
00:06:57,539 --> 00:07:00,539
addition is done in the tail module

166
00:07:00,539 --> 00:07:02,699
the result is checked for the rejection

167
00:07:02,699 --> 00:07:05,400
condition and used to make hint in the

168
00:07:05,400 --> 00:07:07,860
material module

169
00:07:07,860 --> 00:07:10,139
this is how the segmented pipeline

170
00:07:10,139 --> 00:07:12,539
processing method works for comparison

171
00:07:12,539 --> 00:07:16,139
here is an admission showing how the

172
00:07:16,139 --> 00:07:18,840
traditional Hardware architecture works

173
00:07:18,840 --> 00:07:21,479
we can see those modules works one by

174
00:07:21,479 --> 00:07:24,840
one reading processing and writing bike

175
00:07:24,840 --> 00:07:27,180
with intermediary without have to be

176
00:07:27,180 --> 00:07:29,340
stored in the memory and read by the

177
00:07:29,340 --> 00:07:31,979
next module furthermore when one module

178
00:07:31,979 --> 00:07:34,860
is working the other ones have to wait

179
00:07:34,860 --> 00:07:37,259
in the proposed segmented pipeline

180
00:07:37,259 --> 00:07:39,539
processing method these are processed by

181
00:07:39,539 --> 00:07:41,880
the modules in the pipeline Miner like

182
00:07:41,880 --> 00:07:44,120
this

183
00:07:46,500 --> 00:07:48,479
the intermediaries result are

184
00:07:48,479 --> 00:07:50,460
transferred from the former module to

185
00:07:50,460 --> 00:07:52,440
the later one without passing the memory

186
00:07:52,440 --> 00:07:55,199
and in most time of segment modules work

187
00:07:55,199 --> 00:07:56,639
simultaneously

188
00:07:56,639 --> 00:07:59,039
therefore this method can reduce the

189
00:07:59,039 --> 00:08:01,139
sorry requirements and the memory

190
00:08:01,139 --> 00:08:04,020
successful intermediate results and

191
00:08:04,020 --> 00:08:07,979
improves the hardware utilization

192
00:08:08,699 --> 00:08:11,520
to use this method if this is too many

193
00:08:11,520 --> 00:08:14,639
difficulties the first one is how to cut

194
00:08:14,639 --> 00:08:17,099
the algorithm into segments with a high

195
00:08:17,099 --> 00:08:19,919
utilization of the modules we drew the

196
00:08:19,919 --> 00:08:22,440
segments diagram like this based on the

197
00:08:22,440 --> 00:08:25,139
data dependency and making the most use

198
00:08:25,139 --> 00:08:28,620
of the main modules kachakan entity the

199
00:08:28,620 --> 00:08:30,840
second difficulty is that we need to mix

200
00:08:30,840 --> 00:08:33,419
the modules having similar throughput so

201
00:08:33,419 --> 00:08:35,520
that the peplum can run with less

202
00:08:35,520 --> 00:08:37,620
blocking and storing

203
00:08:37,620 --> 00:08:39,899
for the second segment the ketchup

204
00:08:39,899 --> 00:08:41,659
module can process

205
00:08:41,659 --> 00:08:45,720
256 coefficients per 60 Cycles the

206
00:08:45,720 --> 00:08:48,120
sample module per 70 cycles and the

207
00:08:48,120 --> 00:08:50,640
entity module per 64 Cycles

208
00:08:50,640 --> 00:08:53,220
for the fourth segment all the high

209
00:08:53,220 --> 00:08:55,080
modules The Entity module and the team

210
00:08:55,080 --> 00:08:58,440
module process one coefficient per cycle

211
00:08:58,440 --> 00:09:00,480
back carefully cut the algorithm into

212
00:09:00,480 --> 00:09:02,820
segments and designing modules with

213
00:09:02,820 --> 00:09:05,339
similar throughput we can achieve a high

214
00:09:05,339 --> 00:09:07,500
utilization of the modules and thus

215
00:09:07,500 --> 00:09:09,180
improve the efficiency of our

216
00:09:09,180 --> 00:09:11,779
architecture

217
00:09:12,060 --> 00:09:14,040
fully I'm going to give you a brief

218
00:09:14,040 --> 00:09:16,200
introduction to two modules The Entity

219
00:09:16,200 --> 00:09:18,839
module and the sample inboard module MTT

220
00:09:18,839 --> 00:09:21,600
shot for number theoretical transform is

221
00:09:21,600 --> 00:09:23,339
an algorithm to accelerate the

222
00:09:23,339 --> 00:09:26,279
multiplication of polynomials compared

223
00:09:26,279 --> 00:09:28,620
with the school book method which has a

224
00:09:28,620 --> 00:09:31,140
complexity Over N squared and TT only

225
00:09:31,140 --> 00:09:33,720
has a complexity of an login

226
00:09:33,720 --> 00:09:35,700
a popular Hardware architecture for

227
00:09:35,700 --> 00:09:38,880
entity is in place entity a full pump in

228
00:09:38,880 --> 00:09:40,740
place entity calculation is thrown here

229
00:09:40,740 --> 00:09:42,420
as an example

230
00:09:42,420 --> 00:09:44,880
BF stands for the butterfly units which

231
00:09:44,880 --> 00:09:48,360
is a basic calculation units entity

232
00:09:48,360 --> 00:09:51,180
we can see that it needs to read two

233
00:09:51,180 --> 00:09:53,459
coefficients per cycle and write two

234
00:09:53,459 --> 00:09:55,760
back

235
00:09:59,459 --> 00:10:02,519
to accelerate the entity if we use two

236
00:10:02,519 --> 00:10:04,860
butterfly units they need to read four

237
00:10:04,860 --> 00:10:08,940
coefficients and write four per cycle

238
00:10:08,940 --> 00:10:11,580
further acceleration needs faster memory

239
00:10:11,580 --> 00:10:12,899
access

240
00:10:12,899 --> 00:10:15,540
for another architecture pipeline entity

241
00:10:15,540 --> 00:10:18,779
is now the case this animation shows the

242
00:10:18,779 --> 00:10:20,880
case we use two butterfly units for

243
00:10:20,880 --> 00:10:23,700
acceleration it only needs to read two

244
00:10:23,700 --> 00:10:26,399
coefficients and

245
00:10:26,399 --> 00:10:28,800
red

246
00:10:28,800 --> 00:10:32,180
2 per cycle

247
00:10:33,420 --> 00:10:35,580
our entity module is based on classical

248
00:10:35,580 --> 00:10:38,820
pipeline fft architecture the Radix 2

249
00:10:38,820 --> 00:10:40,860
multiplied communicator

250
00:10:40,860 --> 00:10:42,959
but it's not suitable for direct use

251
00:10:42,959 --> 00:10:45,720
here first as shown in the figure there

252
00:10:45,720 --> 00:10:47,640
are a large amount of daily units marked

253
00:10:47,640 --> 00:10:50,760
as the 640 32d and so on if the three

254
00:10:50,760 --> 00:10:53,399
units is implemented directly by shift

255
00:10:53,399 --> 00:10:55,800
registers they'll occupy thousands of

256
00:10:55,800 --> 00:10:57,959
flip-flower resources and cause

257
00:10:57,959 --> 00:10:59,940
potentially higher power consumption

258
00:10:59,940 --> 00:11:03,480
second the original architecture uses

259
00:11:03,480 --> 00:11:05,459
eight memories to offer its different

260
00:11:05,459 --> 00:11:08,100
data factors to 8 butterfly units per

261
00:11:08,100 --> 00:11:09,000
cycle

262
00:11:09,000 --> 00:11:11,519
is a proposed entities module we utilize

263
00:11:11,519 --> 00:11:14,040
the vram to solve these problems first

264
00:11:14,040 --> 00:11:16,740
we use the Bram to implement the delay

265
00:11:16,740 --> 00:11:19,320
units inside of shift registers

266
00:11:19,320 --> 00:11:22,019
here is an example explaining how we

267
00:11:22,019 --> 00:11:24,420
replace shift registers with pre-runs

268
00:11:24,420 --> 00:11:27,360
for the leonies we use 4D which means

269
00:11:27,360 --> 00:11:30,779
the delay of 4 Cycles as an example

270
00:11:30,779 --> 00:11:33,240
the ship's register scheme use four

271
00:11:33,240 --> 00:11:36,839
cascaded registers each beat is shipped

272
00:11:36,839 --> 00:11:40,740
once each cycle and each bit is sold for

273
00:11:40,740 --> 00:11:43,680
four Cycles before shifted out

274
00:11:43,680 --> 00:11:46,500
the bedroom scheme uses the bedroom and

275
00:11:46,500 --> 00:11:48,899
the counter with a range of 0 to 2. the

276
00:11:48,899 --> 00:11:51,180
value of this counter is used as the

277
00:11:51,180 --> 00:11:53,519
address pointer for the Bram this

278
00:11:53,519 --> 00:11:55,920
animation shows how it works at the

279
00:11:55,920 --> 00:11:58,440
beginning either appears that the input

280
00:11:58,440 --> 00:12:00,779
port and the value of the counter is

281
00:12:00,779 --> 00:12:04,500
zero in the next cycle a0 is stored at

282
00:12:04,500 --> 00:12:07,019
the address 0 and the counter changes to

283
00:12:07,019 --> 00:12:11,040
1. in the second cycle A1 is sold as the

284
00:12:11,040 --> 00:12:13,860
dress one and the counter changes to two

285
00:12:13,860 --> 00:12:16,560
in the third cycle the counter changes

286
00:12:16,560 --> 00:12:19,680
back to zero so a0 is going to be read

287
00:12:19,680 --> 00:12:22,079
out in the next Circle

288
00:12:22,079 --> 00:12:24,779
and the fourth cycle a zero is moved to

289
00:12:24,779 --> 00:12:27,420
the resistor at the output port and can

290
00:12:27,420 --> 00:12:30,860
be read during this cycle

291
00:12:31,140 --> 00:12:34,079
by replacing shift register with B Rams

292
00:12:34,079 --> 00:12:36,899
we can utilize the unused spaces and

293
00:12:36,899 --> 00:12:39,839
idle parts of our Bram array and

294
00:12:39,839 --> 00:12:43,079
function flip flops are saved

295
00:12:43,079 --> 00:12:45,839
as for the storage of title factors we

296
00:12:45,839 --> 00:12:49,500
uses only one dualport 36 KB Ram to

297
00:12:49,500 --> 00:12:53,820
store all of the involved Trail factors

298
00:12:53,820 --> 00:12:56,700
well here is the introduction to the

299
00:12:56,700 --> 00:12:59,519
next module sampling ball which performs

300
00:12:59,519 --> 00:13:01,920
an inside out version of the visualized

301
00:13:01,920 --> 00:13:04,500
Shuffle its possible code is shown on

302
00:13:04,500 --> 00:13:07,320
the right for incrementing eye the old

303
00:13:07,320 --> 00:13:10,019
element at the random position J is

304
00:13:10,019 --> 00:13:13,200
moved to the position I and position J

305
00:13:13,200 --> 00:13:16,440
is filled with a new random number one

306
00:13:16,440 --> 00:13:19,260
or minus one this function is difficult

307
00:13:19,260 --> 00:13:22,019
to be accelerated by Hardware as the

308
00:13:22,019 --> 00:13:24,300
operations in different iterations of

309
00:13:24,300 --> 00:13:27,180
tools have data dependency and cannot be

310
00:13:27,180 --> 00:13:29,700
performed in parallel besides element

311
00:13:29,700 --> 00:13:33,779
with index 0 to 255 must be moved to

312
00:13:33,779 --> 00:13:36,360
tall positions which connects diverse

313
00:13:36,360 --> 00:13:38,279
possible directions

314
00:13:38,279 --> 00:13:41,160
we utilize the Dual port vram to

315
00:13:41,160 --> 00:13:44,040
implement this function to show the core

316
00:13:44,040 --> 00:13:46,620
idea a simplified version is shown here

317
00:13:46,620 --> 00:13:49,680
briefly at the port a we write the new

318
00:13:49,680 --> 00:13:54,740
value of CG and read the old value out

319
00:13:54,740 --> 00:13:59,639
is written to the address I at Port B

320
00:13:59,639 --> 00:14:01,800
next I'm going to show you a brief

321
00:14:01,800 --> 00:14:04,920
implementation result and comparison

322
00:14:04,920 --> 00:14:07,399
the zeros of speed and resource results

323
00:14:07,399 --> 00:14:09,720
correspond to three phases key

324
00:14:09,720 --> 00:14:12,480
generation sunny and verification the

325
00:14:12,480 --> 00:14:14,399
listed related words are two most

326
00:14:14,399 --> 00:14:16,380
efficient Hardware implementations of

327
00:14:16,380 --> 00:14:19,260
autism when this work was published the

328
00:14:19,260 --> 00:14:21,480
first one is a compact implementation by

329
00:14:21,480 --> 00:14:24,060
land set switch and igniso the second

330
00:14:24,060 --> 00:14:25,920
one is a high throughput implementation

331
00:14:25,920 --> 00:14:30,180
by Richie Molina jellica and others

332
00:14:30,180 --> 00:14:32,160
to compare the efficiency of the

333
00:14:32,160 --> 00:14:34,860
imaginations we use ADB shots for a

334
00:14:34,860 --> 00:14:37,200
real-time product which is measured by

335
00:14:37,200 --> 00:14:39,180
the multiplying time by the number of

336
00:14:39,180 --> 00:14:41,880
lookup tables three floors the Rams and

337
00:14:41,880 --> 00:14:44,220
dsps respectively

338
00:14:44,220 --> 00:14:47,160
for key generation this work achieves a

339
00:14:47,160 --> 00:14:49,920
6 to 20 times smaller ATP

340
00:14:49,920 --> 00:14:54,240
for sun this work achieves a 2.4 to 7.9

341
00:14:54,240 --> 00:14:56,760
times smaller ATP

342
00:14:56,760 --> 00:15:01,500
for verify our ATP is 1.9 to 6.3 times

343
00:15:01,500 --> 00:15:03,660
smaller

344
00:15:03,660 --> 00:15:06,899
compared with implementation by Richie

345
00:15:06,899 --> 00:15:10,040
for key generation this work achieves a

346
00:15:10,040 --> 00:15:14,220
1.6 to 22 times smaller ATP for verify

347
00:15:14,220 --> 00:15:19,079
our ATP is 3.4 to 66 times smaller

348
00:15:19,079 --> 00:15:21,720
for signing our ATP manual by lookup

349
00:15:21,720 --> 00:15:24,240
table is two times larger because they

350
00:15:24,240 --> 00:15:28,079
use 900 dsps to implement many functions

351
00:15:28,079 --> 00:15:30,899
inside lookup tables which causes their

352
00:15:30,899 --> 00:15:36,660
ATP measured by DSP is 21 times larger

353
00:15:36,660 --> 00:15:39,720
the companies and high efficiency of our

354
00:15:39,720 --> 00:15:41,820
architecture is mainly due to three

355
00:15:41,820 --> 00:15:44,579
reasons first the segmented pipeline

356
00:15:44,579 --> 00:15:47,160
processing method explores multi-level

357
00:15:47,160 --> 00:15:50,220
parallelism and has the execution time

358
00:15:50,220 --> 00:15:53,220
of many operations in addition sorry

359
00:15:53,220 --> 00:15:55,680
requirements are reduced as some

360
00:15:55,680 --> 00:15:57,660
multimedia reloads are processed by

361
00:15:57,660 --> 00:16:00,600
subsequent modules immediately after

362
00:16:00,600 --> 00:16:02,459
they are generated

363
00:16:02,459 --> 00:16:04,800
second we will achieve High utilization

364
00:16:04,800 --> 00:16:07,560
of major modules by making their

365
00:16:07,560 --> 00:16:09,959
throughput similar and reusing entity

366
00:16:09,959 --> 00:16:12,060
module for multiplication

367
00:16:12,060 --> 00:16:14,699
in addition we will use the free spaces

368
00:16:14,699 --> 00:16:17,459
and idle port or be rhymes for sampling

369
00:16:17,459 --> 00:16:19,860
more module and delete units in entity

370
00:16:19,860 --> 00:16:20,880
module

371
00:16:20,880 --> 00:16:23,100
third we design efficient modules for

372
00:16:23,100 --> 00:16:25,380
several functions including the entity

373
00:16:25,380 --> 00:16:28,139
sampling mode the most rejection

374
00:16:28,139 --> 00:16:31,500
sampling modular reduction and so on

375
00:16:31,500 --> 00:16:34,199
Library me to the end of my talk if you

376
00:16:34,199 --> 00:16:36,180
have any questions you are more than

377
00:16:36,180 --> 00:16:38,279
welcome to connect me or other authors

378
00:16:38,279 --> 00:16:40,199
thank you for your attention and hope

379
00:16:40,199 --> 00:16:43,160
you have a great day

