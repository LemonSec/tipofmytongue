1
00:01:02,280 --> 00:01:05,519
can we test the audio

2
00:01:05,519 --> 00:01:08,519
foreign

3
00:01:20,600 --> 00:01:23,700
yes we hear it it would be good if you

4
00:01:23,700 --> 00:01:25,259
could repeat the questions in the other

5
00:01:25,259 --> 00:01:27,299
session we heard trouble hearing the

6
00:01:27,299 --> 00:01:29,479
questions

7
00:05:13,100 --> 00:05:16,280
thank you

8
00:05:23,880 --> 00:05:26,880
foreign

9
00:05:38,280 --> 00:05:41,580
thank you for attending this session and

10
00:05:41,580 --> 00:05:45,600
we have two talks in this session

11
00:05:45,600 --> 00:05:48,320
and uh the first one

12
00:05:48,320 --> 00:05:51,479
will be about highly vectorized psych

13
00:05:51,479 --> 00:05:56,360
for AVX 512 and it's a joint work by how

14
00:05:56,360 --> 00:06:01,259
build skills skills Johan and Peter and

15
00:06:01,259 --> 00:06:04,560
this will be given by Chiang hao

16
00:06:04,560 --> 00:06:08,180
and let's welcome our speaker

17
00:06:09,900 --> 00:06:11,880
work somewhere okay

18
00:06:11,880 --> 00:06:14,520
thanks for the introduction

19
00:06:14,520 --> 00:06:16,680
hello everyone I'm Hal

20
00:06:16,680 --> 00:06:19,800
uh I will talk about our paper this is

21
00:06:19,800 --> 00:06:21,960
the joint work with children's Johan and

22
00:06:21,960 --> 00:06:24,318
Peter

23
00:06:24,419 --> 00:06:26,759
so at the beginning of my talk I'd like

24
00:06:26,759 --> 00:06:29,639
to mention some points uh first of all

25
00:06:29,639 --> 00:06:33,360
sidh or Psych is currently broken due to

26
00:06:33,360 --> 00:06:35,759
catch-trick degree attack and of course

27
00:06:35,759 --> 00:06:38,160
the Sikes that we implemented in the

28
00:06:38,160 --> 00:06:40,139
paper and they will be presented in this

29
00:06:40,139 --> 00:06:42,900
talk is broken version as well and I

30
00:06:42,900 --> 00:06:45,000
won't talk about the security attacks

31
00:06:45,000 --> 00:06:46,979
and the issues of citing this talk but

32
00:06:46,979 --> 00:06:48,479
if you are interested in the security

33
00:06:48,479 --> 00:06:51,479
aspect of Psych or maybe other certain

34
00:06:51,479 --> 00:06:53,520
based crypto systems I would refer you

35
00:06:53,520 --> 00:06:55,979
to this it's like broken yet website for

36
00:06:55,979 --> 00:06:59,400
more information so back to this work uh

37
00:06:59,400 --> 00:07:01,139
the implementation and the bacterization

38
00:07:01,139 --> 00:07:03,180
techniques here would still be useful

39
00:07:03,180 --> 00:07:06,300
for ECC and other iconic based crypto

40
00:07:06,300 --> 00:07:08,660
schemes

41
00:07:08,660 --> 00:07:11,940
okay then let's firmly start we first

42
00:07:11,940 --> 00:07:14,460
look at sidh the short for super

43
00:07:14,460 --> 00:07:16,380
singularized certain DV Helm and kicks

44
00:07:16,380 --> 00:07:17,100
change

45
00:07:17,100 --> 00:07:19,919
so Alice in the Bob will first randomly

46
00:07:19,919 --> 00:07:22,139
generate a secret scalar and this is

47
00:07:22,139 --> 00:07:24,419
their private key and there is public

48
00:07:24,419 --> 00:07:27,000
torsion points they will compute the

49
00:07:27,000 --> 00:07:28,680
secret kernel

50
00:07:28,680 --> 00:07:31,979
and then they compute a certainly with

51
00:07:31,979 --> 00:07:34,319
public base curve and they will get the

52
00:07:34,319 --> 00:07:37,620
new curve EA and EB so the public the

53
00:07:37,620 --> 00:07:39,960
public key includes this new curve and

54
00:07:39,960 --> 00:07:41,880
image of torsion point from the other

55
00:07:41,880 --> 00:07:44,340
side and this new curve and then they

56
00:07:44,340 --> 00:07:46,380
exchange the public keys

57
00:07:46,380 --> 00:07:48,300
so after receiving the public key from

58
00:07:48,300 --> 00:07:49,699
the other side

59
00:07:49,699 --> 00:07:52,560
they use their secret Scala and compute

60
00:07:52,560 --> 00:07:54,900
a new kernel a prime and B Prime

61
00:07:54,900 --> 00:07:57,720
and then they use uh the curve from the

62
00:07:57,720 --> 00:07:59,520
other side and this new kernel to

63
00:07:59,520 --> 00:08:02,160
compute a I saw an A5 Prime and FIB

64
00:08:02,160 --> 00:08:05,220
Prime they will get the result curves so

65
00:08:05,220 --> 00:08:07,680
the result curves on both sides have the

66
00:08:07,680 --> 00:08:09,960
same J environment and the shares to

67
00:08:09,960 --> 00:08:13,219
created this chain warrant

68
00:08:13,620 --> 00:08:15,900
so in sidh there's large isolating

69
00:08:15,900 --> 00:08:19,199
computation for Alice she computes

70
00:08:19,199 --> 00:08:22,259
assortments of degree 22na and this can

71
00:08:22,259 --> 00:08:24,780
be done by composing an aisogynist of

72
00:08:24,780 --> 00:08:27,300
degree two and normally a more efficient

73
00:08:27,300 --> 00:08:31,080
way is using uh by composing an a

74
00:08:31,080 --> 00:08:33,240
divided by two isolates of degree four

75
00:08:33,240 --> 00:08:36,958
and for Bob he computes isogenes of

76
00:08:36,958 --> 00:08:39,240
degree three two and B and by composing

77
00:08:39,240 --> 00:08:42,799
and bi shortness of degree three

78
00:08:43,020 --> 00:08:45,300
okay so Psych is short for super

79
00:08:45,300 --> 00:08:47,040
singularized alternating encapsulation

80
00:08:47,040 --> 00:08:50,459
it is derived from sidh where 50cc motor

81
00:08:50,459 --> 00:08:52,920
transformation and the security is built

82
00:08:52,920 --> 00:08:56,760
on sidh problem uh so now it's broken we

83
00:08:56,760 --> 00:08:59,399
can solve it in polynomial time and side

84
00:08:59,399 --> 00:09:01,800
comes with two main features the short

85
00:09:01,800 --> 00:09:04,080
killings and at the same time the high

86
00:09:04,080 --> 00:09:05,640
Computing cost

87
00:09:05,640 --> 00:09:08,480
so there are two warrants in Psych

88
00:09:08,480 --> 00:09:11,160
one is uncompressed psych so normally

89
00:09:11,160 --> 00:09:13,620
you just call it Psych the other one is

90
00:09:13,620 --> 00:09:16,260
compressike which has a key and a

91
00:09:16,260 --> 00:09:18,120
ciphertext compression to make the key

92
00:09:18,120 --> 00:09:19,500
lens for this motor

93
00:09:19,500 --> 00:09:21,660
so in this work we Target on compressed

94
00:09:21,660 --> 00:09:23,839
like

95
00:09:25,620 --> 00:09:28,140
so we designed and developed a highly

96
00:09:28,140 --> 00:09:30,060
vectorized and optimized software

97
00:09:30,060 --> 00:09:33,240
library for psych named FX psych so it

98
00:09:33,240 --> 00:09:35,040
is implemented with the latest

99
00:09:35,040 --> 00:09:37,860
generation of Intel ABX extension which

100
00:09:37,860 --> 00:09:41,459
is Intel fx512 and particularly this

101
00:09:41,459 --> 00:09:44,279
ifma sub extension so there are two

102
00:09:44,279 --> 00:09:46,080
different types of implementation in our

103
00:09:46,080 --> 00:09:48,360
library one is low latency

104
00:09:48,360 --> 00:09:50,940
implementation every time is killing a

105
00:09:50,940 --> 00:09:53,279
single instance and the other one is

106
00:09:53,279 --> 00:09:55,560
high throughput or you you can call it

107
00:09:55,560 --> 00:09:57,660
the batch implementation so every time

108
00:09:57,660 --> 00:10:00,060
security eight different instances in

109
00:10:00,060 --> 00:10:03,000
parallel and our library supports four

110
00:10:03,000 --> 00:10:05,459
parameter sets and in the source code

111
00:10:05,459 --> 00:10:07,680
there's no secret dependent conditional

112
00:10:07,680 --> 00:10:10,800
statements or the memory accesses and

113
00:10:10,800 --> 00:10:13,320
our source code has a fixed operation or

114
00:10:13,320 --> 00:10:14,880
instruction sequence which means the

115
00:10:14,880 --> 00:10:17,640
software is constant time and source

116
00:10:17,640 --> 00:10:19,800
code is publicly available at our GTA

117
00:10:19,800 --> 00:10:21,180
lab Repository

118
00:10:21,180 --> 00:10:24,240
and because the battery implementation

119
00:10:24,240 --> 00:10:26,399
is relatively straightforward and easy

120
00:10:26,399 --> 00:10:28,920
to implement so in this talk we focus on

121
00:10:28,920 --> 00:10:31,939
this low latency version

122
00:10:32,399 --> 00:10:35,160
from an implementation will Point site

123
00:10:35,160 --> 00:10:37,800
has a structure of pyramid with Rich

124
00:10:37,800 --> 00:10:40,560
arithmetric and multiple layers so in

125
00:10:40,560 --> 00:10:42,420
this work we did store analysis and

126
00:10:42,420 --> 00:10:44,880
vectorization for psych from the bottom

127
00:10:44,880 --> 00:10:47,040
to the top layer by layer

128
00:10:47,040 --> 00:10:48,480
the bottom layer is Hardware

129
00:10:48,480 --> 00:10:50,700
instructions so in this work it refers

130
00:10:50,700 --> 00:10:53,820
to fx512 and the next layer is prime

131
00:10:53,820 --> 00:10:56,579
field arithmetic and on its top is

132
00:10:56,579 --> 00:10:59,279
graphic extension field arithmetic the

133
00:10:59,279 --> 00:11:01,320
FP square and the fourth layer is

134
00:11:01,320 --> 00:11:03,300
Montgomery curve arithmetic so it

135
00:11:03,300 --> 00:11:04,980
includes some point operations like

136
00:11:04,980 --> 00:11:07,019
three point letter Point doubling and

137
00:11:07,019 --> 00:11:09,540
point tripling and some small isolating

138
00:11:09,540 --> 00:11:11,640
computations like 403 I started in

139
00:11:11,640 --> 00:11:13,800
generation evolution

140
00:11:13,800 --> 00:11:16,019
the next layer is large assortment

141
00:11:16,019 --> 00:11:19,079
computation and some papers some Works

142
00:11:19,079 --> 00:11:21,060
have studied the optimal strategies to

143
00:11:21,060 --> 00:11:23,040
further accelerate this layer the higher

144
00:11:23,040 --> 00:11:26,399
layers are pke and cam

145
00:11:26,399 --> 00:11:30,839
okay then have a look from the bottom

146
00:11:30,839 --> 00:11:34,440
uh the bottom layer is fx512 so fx512

147
00:11:34,440 --> 00:11:36,959
works in the CMD pattern so simply means

148
00:11:36,959 --> 00:11:39,060
in single instruction multiple data so

149
00:11:39,060 --> 00:11:41,040
as indicated by its name

150
00:11:41,040 --> 00:11:43,800
it has 512 beta vectors and each Vector

151
00:11:43,800 --> 00:11:46,980
can be divided into 64-bit element times

152
00:11:46,980 --> 00:11:48,360
eight lines

153
00:11:48,360 --> 00:11:51,240
and among the sub extensions of the AVX

154
00:11:51,240 --> 00:11:54,779
512 this ifma is very attractive for the

155
00:11:54,779 --> 00:11:56,700
public key crypto systems whose

156
00:11:56,700 --> 00:11:59,459
underlying arithmetic is a large integer

157
00:11:59,459 --> 00:12:03,000
arithmetic so an integer Fields multiply

158
00:12:03,000 --> 00:12:05,579
add instruction first multiply the

159
00:12:05,579 --> 00:12:08,160
packed 52-bit integers from two

160
00:12:08,160 --> 00:12:12,079
registers A and B and we'll get 104 bit

161
00:12:12,079 --> 00:12:15,600
packed intermediate product T then it

162
00:12:15,600 --> 00:12:17,519
take either the lower or the higher half

163
00:12:17,519 --> 00:12:20,459
of the intermediate product and add it

164
00:12:20,459 --> 00:12:23,399
with a packed a 64-bit parked integer

165
00:12:23,399 --> 00:12:25,740
from the other register C and we'll

166
00:12:25,740 --> 00:12:27,600
store the results in the destination

167
00:12:27,600 --> 00:12:31,079
register R it is supported in the most

168
00:12:31,079 --> 00:12:33,839
recent intels processors like Canon Lake

169
00:12:33,839 --> 00:12:36,360
ice Lake Tiger deck and Rocket league so

170
00:12:36,360 --> 00:12:38,160
in this work we use isolate core

171
00:12:38,160 --> 00:12:39,620
processor

172
00:12:39,620 --> 00:12:43,139
and we only use ifma instructions to

173
00:12:43,139 --> 00:12:44,940
perform the multiplication operation in

174
00:12:44,940 --> 00:12:47,940
our software so which means uh the

175
00:12:47,940 --> 00:12:50,820
vector multiplier is 52-bit and the one

176
00:12:50,820 --> 00:12:52,560
bit header room is more friendly for

177
00:12:52,560 --> 00:12:54,899
card super multiplication so that's why

178
00:12:54,899 --> 00:12:57,480
we use 51 bit prelim representation in

179
00:12:57,480 --> 00:13:00,019
the software

180
00:13:00,480 --> 00:13:02,040
okay the next layer is prime field

181
00:13:02,040 --> 00:13:04,740
arithmetic so here we use multiplication

182
00:13:04,740 --> 00:13:07,680
as an example because multiplication is

183
00:13:07,680 --> 00:13:09,720
most performance critical and the most

184
00:13:09,720 --> 00:13:12,000
complicated at this layer we first

185
00:13:12,000 --> 00:13:14,880
Define a y times Z-Wave vectorization

186
00:13:14,880 --> 00:13:19,019
which means uh you use yft operations in

187
00:13:19,019 --> 00:13:23,540
parallel and each of them use the lines

188
00:13:23,760 --> 00:13:26,220
the first implementation is eight times

189
00:13:26,220 --> 00:13:28,980
one way so this is easy to implement so

190
00:13:28,980 --> 00:13:30,899
basically you just use ABX 512c

191
00:13:30,899 --> 00:13:33,779
instructions instead of x64 to batch the

192
00:13:33,779 --> 00:13:36,000
instances and here's the cursorb that is

193
00:13:36,000 --> 00:13:37,440
more efficient

194
00:13:37,440 --> 00:13:40,320
and this structure set is the example

195
00:13:40,320 --> 00:13:43,920
for the slug p503 so the eight times one

196
00:13:43,920 --> 00:13:46,620
way implementation works on this Lim

197
00:13:46,620 --> 00:13:50,279
Vector set and for site p503 you have 10

198
00:13:50,279 --> 00:13:52,500
limbs so we have 10 vectors in this set

199
00:13:52,500 --> 00:13:54,600
and there are eight lines so you have

200
00:13:54,600 --> 00:13:56,700
eight field elements

201
00:13:56,700 --> 00:14:01,320
so the next implementation is 4 times 2A

202
00:14:01,320 --> 00:14:03,779
so here for this implementation the

203
00:14:03,779 --> 00:14:05,579
school book is more efficient so you

204
00:14:05,579 --> 00:14:07,860
have five vectors in this Lim Vector set

205
00:14:07,860 --> 00:14:11,639
and the four uh field elements in total

206
00:14:11,639 --> 00:14:13,139
and of course you can continue to

207
00:14:13,139 --> 00:14:16,500
implement uh two times four or one times

208
00:14:16,500 --> 00:14:18,180
eight weight but they're less efficient

209
00:14:18,180 --> 00:14:20,820
because there's a strong dependency in

210
00:14:20,820 --> 00:14:23,100
this implementation and the thanks to

211
00:14:23,100 --> 00:14:25,440
the rich arithmetic psych you can

212
00:14:25,440 --> 00:14:27,680
continue to vectorize the higher layers

213
00:14:27,680 --> 00:14:30,480
therefore you can avoid using this less

214
00:14:30,480 --> 00:14:33,740
efficient warranty inside

215
00:14:34,139 --> 00:14:37,680
okay we then look at the next layer the

216
00:14:37,680 --> 00:14:39,720
FP Square we still use multiplication as

217
00:14:39,720 --> 00:14:40,860
example

218
00:14:40,860 --> 00:14:43,079
so the

219
00:14:43,079 --> 00:14:45,859
uh

220
00:14:52,380 --> 00:14:53,880
is here

221
00:14:53,880 --> 00:14:57,180
write some some text on my slides this

222
00:14:57,180 --> 00:15:00,560
can just remove it

223
00:15:09,420 --> 00:15:11,519
okay next

224
00:15:11,519 --> 00:15:14,220
so the straightforward way is a school

225
00:15:14,220 --> 00:15:15,839
book you the school book to compute this

226
00:15:15,839 --> 00:15:17,880
P-Square multiplication and of course

227
00:15:17,880 --> 00:15:20,220
you can use more advanced character to

228
00:15:20,220 --> 00:15:22,860
compute it so on this slide let's forget

229
00:15:22,860 --> 00:15:26,579
the thing of abx512 we only consider the

230
00:15:26,579 --> 00:15:29,339
vectorization between the FP squared

231
00:15:29,339 --> 00:15:31,320
multiplication and FP operations to see

232
00:15:31,320 --> 00:15:35,600
if we can parallelize some FP operations

233
00:15:39,260 --> 00:15:41,459
thank you

234
00:15:41,459 --> 00:15:44,820
the easiest implementation is one-way

235
00:15:44,820 --> 00:15:46,560
parallelization so basically there's no

236
00:15:46,560 --> 00:15:48,660
parallelization at all you perform the

237
00:15:48,660 --> 00:15:51,180
operations sequentially and of course

238
00:15:51,180 --> 00:15:54,360
cursive makes emotions here

239
00:15:54,360 --> 00:15:55,980
the second variance is two-way

240
00:15:55,980 --> 00:15:57,180
parallelization

241
00:15:57,180 --> 00:15:59,040
and obviously schoolbook is more

242
00:15:59,040 --> 00:16:00,720
efficient because in card Suba you have

243
00:16:00,720 --> 00:16:02,760
only three multiplications but more

244
00:16:02,760 --> 00:16:05,339
addition than the subductions

245
00:16:05,339 --> 00:16:07,199
since there are four multiplications in

246
00:16:07,199 --> 00:16:09,480
the school book it's also possible to

247
00:16:09,480 --> 00:16:11,639
paralyze them in a more aggressive ways

248
00:16:11,639 --> 00:16:14,279
so you have this four-way variance

249
00:16:14,279 --> 00:16:16,500
so in this layer in this fq Square

250
00:16:16,500 --> 00:16:17,699
multiplication you have three different

251
00:16:17,699 --> 00:16:21,480
patterns okay now let's take fx512 into

252
00:16:21,480 --> 00:16:23,940
account we should Define this times x

253
00:16:23,940 --> 00:16:27,240
times y times the wave vectorization

254
00:16:27,240 --> 00:16:29,760
and here are our vectorized

255
00:16:29,760 --> 00:16:32,100
implementation candidates and the take

256
00:16:32,100 --> 00:16:33,779
the implementations are more efficient

257
00:16:33,779 --> 00:16:37,079
and it should be noted that for this uh

258
00:16:37,079 --> 00:16:39,959
four times one four times two times one

259
00:16:39,959 --> 00:16:41,639
by implementation and one or four times

260
00:16:41,639 --> 00:16:43,680
one times two implementation so they

261
00:16:43,680 --> 00:16:45,660
both Implement they both execute four

262
00:16:45,660 --> 00:16:48,180
instances in parallel and both of them

263
00:16:48,180 --> 00:16:50,519
use cartuba for one layer and a school

264
00:16:50,519 --> 00:16:52,860
book for the other layer but according

265
00:16:52,860 --> 00:16:55,139
to our experiments this 4 times 2 times

266
00:16:55,139 --> 00:16:57,540
1 is more efficient so which means the

267
00:16:57,540 --> 00:16:59,519
vectorization for the lower layer has

268
00:16:59,519 --> 00:17:01,800
more impact than the vectorization at

269
00:17:01,800 --> 00:17:04,398
higher layer

270
00:17:04,919 --> 00:17:07,619
okay now we enter the fourth layer is it

271
00:17:07,619 --> 00:17:09,540
the curve layer the first operation the

272
00:17:09,540 --> 00:17:12,720
three point letter so recall that Alice

273
00:17:12,720 --> 00:17:15,299
and Bob need to compute the kernel point

274
00:17:15,299 --> 00:17:17,520
and the three point letter is standard

275
00:17:17,520 --> 00:17:20,400
way to compute uh the kernel

276
00:17:20,400 --> 00:17:22,819
it is based on the monogamy leather step

277
00:17:22,819 --> 00:17:25,980
which essentially consists of Point

278
00:17:25,980 --> 00:17:28,260
doubling and differential Point addition

279
00:17:28,260 --> 00:17:30,120
there are already some papers about

280
00:17:30,120 --> 00:17:32,880
vectorizing Montgomery leather step and

281
00:17:32,880 --> 00:17:35,640
the curve especially on curve 25519 in

282
00:17:35,640 --> 00:17:37,559
either 2A or 4-way

283
00:17:37,559 --> 00:17:39,600
and according to their experimental

284
00:17:39,600 --> 00:17:42,059
results the full way variant is always

285
00:17:42,059 --> 00:17:45,240
more efficient than 2A for the fx512 so

286
00:17:45,240 --> 00:17:47,160
it should the fully method of his or at

287
00:17:47,160 --> 00:17:49,860
all because in their method there's no

288
00:17:49,860 --> 00:17:51,299
special multiplication with the Curve

289
00:17:51,299 --> 00:17:53,280
coefficient which is more friendly for

290
00:17:53,280 --> 00:17:54,419
psych

291
00:17:54,419 --> 00:17:56,760
and at this layer we should Define

292
00:17:56,760 --> 00:18:00,240
something like w times x times y times

293
00:18:00,240 --> 00:18:02,700
zero vectorization and for this three

294
00:18:02,700 --> 00:18:05,580
point letter is 1 times 4 times 2 times

295
00:18:05,580 --> 00:18:08,340
1 because every time you execute a

296
00:18:08,340 --> 00:18:09,960
single instance and you internally

297
00:18:09,960 --> 00:18:13,320
vectorize it in four way

298
00:18:13,320 --> 00:18:15,660
so for the other operations at this

299
00:18:15,660 --> 00:18:18,600
layer it's possible to vectorize them or

300
00:18:18,600 --> 00:18:21,360
to vectorize all of them in 2A and we

301
00:18:21,360 --> 00:18:23,640
came up with a modification for the

302
00:18:23,640 --> 00:18:25,559
point tripling and the three isolating

303
00:18:25,559 --> 00:18:28,799
generation so in detail we use c24

304
00:18:28,799 --> 00:18:31,500
instead of a24 minus so both of them are

305
00:18:31,500 --> 00:18:33,600
the projective curve coefficients and

306
00:18:33,600 --> 00:18:35,640
they use different curve coefficients

307
00:18:35,640 --> 00:18:38,760
you get the different formulas so for

308
00:18:38,760 --> 00:18:41,280
the point uh so here the the formulas

309
00:18:41,280 --> 00:18:43,799
are different from the the one used in

310
00:18:43,799 --> 00:18:46,020
the stock specification

311
00:18:46,020 --> 00:18:48,539
so basically this modification doesn't

312
00:18:48,539 --> 00:18:51,299
improve the point tripling it has the

313
00:18:51,299 --> 00:18:52,919
same cost as before

314
00:18:52,919 --> 00:18:54,780
but instead for the three I saw an

315
00:18:54,780 --> 00:18:57,419
evaluation you can save two two-way

316
00:18:57,419 --> 00:19:00,600
additions here so that is more efficient

317
00:19:00,600 --> 00:19:02,760
so for the other operations like Point

318
00:19:02,760 --> 00:19:05,400
doubling for isolation generation of

319
00:19:05,400 --> 00:19:07,440
isolation Evolution so we're just about

320
00:19:07,440 --> 00:19:09,840
price implement the same one-way

321
00:19:09,840 --> 00:19:11,160
implementation in the psych

322
00:19:11,160 --> 00:19:13,679
specification so here are their two-way

323
00:19:13,679 --> 00:19:15,059
implementations

324
00:19:15,059 --> 00:19:18,240
just have very quick view okay so to

325
00:19:18,240 --> 00:19:20,280
summarize the implementation at this

326
00:19:20,280 --> 00:19:21,440
layer

327
00:19:21,440 --> 00:19:25,260
for the most of the the operations you

328
00:19:25,260 --> 00:19:27,360
just need one-way implementation because

329
00:19:27,360 --> 00:19:30,120
every time you execute a single instance

330
00:19:30,120 --> 00:19:32,039
but for the isolation evaluation you

331
00:19:32,039 --> 00:19:34,080
need implementation for multiple

332
00:19:34,080 --> 00:19:36,780
instances because in psyc it's possible

333
00:19:36,780 --> 00:19:39,120
that you perform different isolation

334
00:19:39,120 --> 00:19:41,880
evaluations in parallel

335
00:19:41,880 --> 00:19:43,200
and then we have three more

336
00:19:43,200 --> 00:19:46,200
implementations in in Red so they will

337
00:19:46,200 --> 00:19:48,299
be used in the optimized encryption

338
00:19:48,299 --> 00:19:51,360
operation because in in that optimized

339
00:19:51,360 --> 00:19:53,640
encryption it's even possible that you

340
00:19:53,640 --> 00:19:56,100
perform two three point letter in

341
00:19:56,100 --> 00:19:58,399
parallel

342
00:19:58,799 --> 00:20:01,980
okay so the next layer is this large

343
00:20:01,980 --> 00:20:04,200
eyesore and computation we use two to ni

344
00:20:04,200 --> 00:20:06,840
isotony as an example this is

345
00:20:06,840 --> 00:20:09,120
algorithmic description of this large

346
00:20:09,120 --> 00:20:11,039
isolating computation it's the

347
00:20:11,039 --> 00:20:13,559
operations in blue are our web price

348
00:20:13,559 --> 00:20:15,480
implementation to perform single

349
00:20:15,480 --> 00:20:16,380
instance

350
00:20:16,380 --> 00:20:20,160
and there's operation in Red so this is

351
00:20:20,160 --> 00:20:22,440
the parallel a certain evaluation and

352
00:20:22,440 --> 00:20:24,660
according to the number of the points in

353
00:20:24,660 --> 00:20:25,919
the queue you will use different

354
00:20:25,919 --> 00:20:29,660
evaporized implementation for that

355
00:20:29,820 --> 00:20:32,340
okay even at the higher layers it's

356
00:20:32,340 --> 00:20:34,500
still possible that you paralyze some

357
00:20:34,500 --> 00:20:36,380
implementation

358
00:20:36,380 --> 00:20:39,600
the top is a original encryption inside

359
00:20:39,600 --> 00:20:42,360
specification so here you have two uh

360
00:20:42,360 --> 00:20:44,760
kernel computation in blue and two a

361
00:20:44,760 --> 00:20:46,380
certain computation in red and

362
00:20:46,380 --> 00:20:48,059
unfortunately there's no dependency

363
00:20:48,059 --> 00:20:50,160
between them so which means you can

364
00:20:50,160 --> 00:20:53,160
perform two kernel computation in

365
00:20:53,160 --> 00:20:54,720
parallel and two are certain computation

366
00:20:54,720 --> 00:20:57,299
in parallel as I showed on the bottom

367
00:20:57,299 --> 00:20:59,820
this is our optimized encryption

368
00:20:59,820 --> 00:21:02,220
so after developing our software we

369
00:21:02,220 --> 00:21:05,039
benchmarked it with uh assembly

370
00:21:05,039 --> 00:21:07,500
implementation of Psych in the Microsoft

371
00:21:07,500 --> 00:21:11,520
sidh Library so according to this table

372
00:21:11,520 --> 00:21:14,460
our low latency implementations

373
00:21:14,460 --> 00:21:17,480
2.5 times faster

374
00:21:17,480 --> 00:21:20,640
compared to sidh library for the key

375
00:21:20,640 --> 00:21:22,679
generation decapsulation and the

376
00:21:22,679 --> 00:21:25,200
encapsulations even 3.2 times faster

377
00:21:25,200 --> 00:21:27,900
thanks to this optimized encryption

378
00:21:27,900 --> 00:21:30,419
and the High throughput version has more

379
00:21:30,419 --> 00:21:33,900
than 4.5 Times Higher throughput

380
00:21:33,900 --> 00:21:35,940
this is a result for other parameter

381
00:21:35,940 --> 00:21:38,100
sets and they have the similar spit up

382
00:21:38,100 --> 00:21:42,240
and the throughput Improvement

383
00:21:43,440 --> 00:21:45,780
okay so to summarize this work the

384
00:21:45,780 --> 00:21:48,480
vector engines like fx512 offers great

385
00:21:48,480 --> 00:21:50,460
potential to optimize large integer

386
00:21:50,460 --> 00:21:52,679
arithmetic and a certain base cryptool

387
00:21:52,679 --> 00:21:54,720
and we did store analysis for the stock

388
00:21:54,720 --> 00:21:56,400
arithmetic in this work

389
00:21:56,400 --> 00:21:58,320
and especially in vectorized

390
00:21:58,320 --> 00:22:00,539
implementation if there's less

391
00:22:00,539 --> 00:22:02,700
dependency then you can get much better

392
00:22:02,700 --> 00:22:04,260
performance

393
00:22:04,260 --> 00:22:08,059
okay that's it thanks for attention

394
00:22:13,080 --> 00:22:17,580
anybody has any questions please

395
00:22:24,780 --> 00:22:27,600
uh thank you is it working

396
00:22:27,600 --> 00:22:29,220
yeah I can hear it thank you for the dog

397
00:22:29,220 --> 00:22:31,799
uh so I have two quick questions first

398
00:22:31,799 --> 00:22:33,960
is when you say parallelization at the

399
00:22:33,960 --> 00:22:35,580
higher level I mean does it mean more

400
00:22:35,580 --> 00:22:38,780
course or just vectorization in one core

401
00:22:38,780 --> 00:22:41,460
yeah we work on the single core and a

402
00:22:41,460 --> 00:22:43,140
single threat okay yeah that's

403
00:22:43,140 --> 00:22:46,080
surprising uh did you try to change the

404
00:22:46,080 --> 00:22:47,299
the

405
00:22:47,299 --> 00:22:50,419
isogenous strategies to further optimize

406
00:22:50,419 --> 00:22:53,580
uh no they didn't actually this can be

407
00:22:53,580 --> 00:22:55,980
surrender the future work so basically

408
00:22:55,980 --> 00:22:58,080
you can run this script to evaluate the

409
00:22:58,080 --> 00:23:00,539
the better optimal strategy for the

410
00:23:00,539 --> 00:23:02,220
vectorized implementation yeah I

411
00:23:02,220 --> 00:23:03,600
understand this can improve this work

412
00:23:03,600 --> 00:23:07,200
but we didn't uh do it in in this in

413
00:23:07,200 --> 00:23:08,580
this paper yeah

414
00:23:08,580 --> 00:23:11,299
thank you

415
00:23:14,880 --> 00:23:18,240
any other questions

416
00:23:18,240 --> 00:23:21,840
I mean like I guess I have the question

417
00:23:21,840 --> 00:23:24,120
which is uh how much of this

418
00:23:24,120 --> 00:23:26,940
computational accelerations are

419
00:23:26,940 --> 00:23:30,059
applicable to something like Seaside

420
00:23:30,059 --> 00:23:31,799
uh

421
00:23:31,799 --> 00:23:33,840
good question so actually we had a paper

422
00:23:33,840 --> 00:23:36,480
in last year chess that is about using

423
00:23:36,480 --> 00:23:39,900
the fx512 to accelerate Seaside and in

424
00:23:39,900 --> 00:23:42,299
that paper for the seaside you'll guess

425
00:23:42,299 --> 00:23:44,640
you get the less Improvement compared to

426
00:23:44,640 --> 00:23:47,460
site because there's a stronger

427
00:23:47,460 --> 00:23:49,500
dependency in Seaside because the kernel

428
00:23:49,500 --> 00:23:52,980
sometimes is point at Infinity so this

429
00:23:52,980 --> 00:23:56,580
affect the software so I guess the

430
00:23:56,580 --> 00:23:58,620
Improvement for the low latency would be

431
00:23:58,620 --> 00:24:00,720
less than two times faster it's around

432
00:24:00,720 --> 00:24:04,080
the 1.5 or 1.8 I can't remember it

433
00:24:04,080 --> 00:24:05,039
clearly

434
00:24:05,039 --> 00:24:07,260
but here's Allen chess 2021 you can

435
00:24:07,260 --> 00:24:10,860
check the paper right but I mean like

436
00:24:10,860 --> 00:24:14,640
surely you had more advances since

437
00:24:14,640 --> 00:24:18,360
I mean you did not have more uh like

438
00:24:18,360 --> 00:24:21,360
computation or advances since that paper

439
00:24:21,360 --> 00:24:26,220
or it's it's just uh the same the same

440
00:24:26,220 --> 00:24:31,140
techniques used here well uh so compare

441
00:24:31,140 --> 00:24:34,200
with Seaside so psych has is working on

442
00:24:34,200 --> 00:24:36,780
the quadratic extension field so this is

443
00:24:36,780 --> 00:24:38,820
a big advantage in Psych so which means

444
00:24:38,820 --> 00:24:41,460
you can do the more vectorization in

445
00:24:41,460 --> 00:24:43,500
that in in that layer as we showed in

446
00:24:43,500 --> 00:24:45,659
this paper but in Seaside it directly

447
00:24:45,659 --> 00:24:48,120
works on the prime field arithmetic so

448
00:24:48,120 --> 00:24:52,320
you lose this uh benefit and the the

449
00:24:52,320 --> 00:24:54,419
other factor is that as I explained

450
00:24:54,419 --> 00:24:56,700
before the seaside kernel sometimes

451
00:24:56,700 --> 00:24:59,640
point at Infinity so at that paper we

452
00:24:59,640 --> 00:25:02,400
use some hybrid method to avoid this but

453
00:25:02,400 --> 00:25:04,980
if you use hybrid method you basically

454
00:25:04,980 --> 00:25:09,539
use avex512 implementation Biz the x64

455
00:25:09,539 --> 00:25:13,020
so this is another part that will like

456
00:25:13,020 --> 00:25:16,520
decrease the efficiency

457
00:25:18,500 --> 00:25:21,659
I guess there's no more questions let's

458
00:25:21,659 --> 00:25:24,679
think the speaker again

459
00:25:32,279 --> 00:25:37,740
and here we have the

460
00:25:39,179 --> 00:25:41,100
second talk

461
00:25:41,100 --> 00:25:43,080
of this session

462
00:25:43,080 --> 00:25:45,918
and

463
00:25:46,080 --> 00:25:49,740
basically about psych and side channels

464
00:25:49,740 --> 00:25:54,380
and it will be given by Elisa and tasso

465
00:25:54,380 --> 00:25:58,260
and which is a joint work with many

466
00:25:58,260 --> 00:26:02,700
other people and let's welcome Elise

467
00:26:02,700 --> 00:26:05,299
foreign

468
00:26:25,620 --> 00:26:28,980
so I'm a PhD student at the secure in

469
00:26:28,980 --> 00:26:31,080
the secure architectures and system team

470
00:26:31,080 --> 00:26:33,240
at the center of microelectronics in

471
00:26:33,240 --> 00:26:35,940
Provence in the south of France and it's

472
00:26:35,940 --> 00:26:38,520
a joint research team between Seva and

473
00:26:38,520 --> 00:26:41,460
Echo Domingo santiken and today I will

474
00:26:41,460 --> 00:26:43,980
present the paper psych channels which

475
00:26:43,980 --> 00:26:46,679
is about zero value Cyclone attacks on

476
00:26:46,679 --> 00:26:49,440
Psych and it's joint work with look at

477
00:26:49,440 --> 00:26:52,679
the field is

478
00:26:57,059 --> 00:26:59,279
so first I'm going to start with a

479
00:26:59,279 --> 00:27:00,360
context

480
00:27:00,360 --> 00:27:02,520
so psych was one of the next round for

481
00:27:02,520 --> 00:27:04,620
alternate candidates for encryption and

482
00:27:04,620 --> 00:27:06,900
key encapsulation and it's the only one

483
00:27:06,900 --> 00:27:09,240
based on isogenes between elliptic

484
00:27:09,240 --> 00:27:12,480
curves It's relatively slow but it has a

485
00:27:12,480 --> 00:27:14,520
small public key size which can be very

486
00:27:14,520 --> 00:27:16,620
useful for certain applications

487
00:27:16,620 --> 00:27:19,740
and since July 2022 there is an

488
00:27:19,740 --> 00:27:21,960
efficient crypto analysis in polynomial

489
00:27:21,960 --> 00:27:24,539
time meaning it's broken

490
00:27:24,539 --> 00:27:27,659
however a work can be useful to study

491
00:27:27,659 --> 00:27:30,080
the Hardware security of other

492
00:27:30,080 --> 00:27:32,700
isogeny-based cryptosystems for instance

493
00:27:32,700 --> 00:27:34,860
there is a paper called patient zero and

494
00:27:34,860 --> 00:27:38,340
patient 6 by campus at all which applies

495
00:27:38,340 --> 00:27:40,679
one of the technique in our paper to

496
00:27:40,679 --> 00:27:42,000
Seaside

497
00:27:42,000 --> 00:27:44,580
also another interesting question is the

498
00:27:44,580 --> 00:27:49,080
portability of our tax on Barons of sidh

499
00:27:49,080 --> 00:27:52,200
with mask degree by modita or mask

500
00:27:52,200 --> 00:27:55,440
torsion point images by futsa

501
00:27:55,440 --> 00:27:58,500
so let's go in and look at the building

502
00:27:58,500 --> 00:28:01,200
block of Psych which is the super

503
00:28:01,200 --> 00:28:03,000
singularization in this element key

504
00:28:03,000 --> 00:28:04,140
exchange

505
00:28:04,140 --> 00:28:07,679
so here Alice and Bob want to share a

506
00:28:07,679 --> 00:28:12,080
secret they have at their disposal

507
00:28:12,840 --> 00:28:15,720
um public data so an elliptic curve and

508
00:28:15,720 --> 00:28:17,520
points on this curve

509
00:28:17,520 --> 00:28:21,360
and each of them has a secret key which

510
00:28:21,360 --> 00:28:22,799
is a scholar

511
00:28:22,799 --> 00:28:25,140
the first step is the public key

512
00:28:25,140 --> 00:28:28,440
generation which is a secret isogenic

513
00:28:28,440 --> 00:28:31,200
computation so an isogeny is a map

514
00:28:31,200 --> 00:28:34,440
between two ellipticals here the

515
00:28:34,440 --> 00:28:36,840
starting curve is e0 and the target

516
00:28:36,840 --> 00:28:39,360
curve is defined by the kernel generator

517
00:28:39,360 --> 00:28:44,940
of isogeny which is p plus ska times Q2

518
00:28:44,940 --> 00:28:48,240
so it's a point on the starting curve

519
00:28:48,240 --> 00:28:52,380
Alice will also evaluate this isogeny in

520
00:28:52,380 --> 00:28:55,020
three points p3q for an R3

521
00:28:55,020 --> 00:28:57,960
and her public key will be finally the

522
00:28:57,960 --> 00:29:01,080
triplet of image points here

523
00:29:01,080 --> 00:29:03,360
Bob does the same and they exchange the

524
00:29:03,360 --> 00:29:04,860
public keys

525
00:29:04,860 --> 00:29:07,500
the next step is the computation of the

526
00:29:07,500 --> 00:29:09,840
shared secret itself

527
00:29:09,840 --> 00:29:12,179
so it's very similar it's a nice secret

528
00:29:12,179 --> 00:29:15,480
isogenic computation but this time the

529
00:29:15,480 --> 00:29:18,480
starting curve is defined by the public

530
00:29:18,480 --> 00:29:21,539
key of Alice's partner

531
00:29:21,539 --> 00:29:25,260
and the kernel generator is computed

532
00:29:25,260 --> 00:29:27,539
using again the secret key

533
00:29:27,539 --> 00:29:30,240
and the public key of Bob

534
00:29:30,240 --> 00:29:32,820
and the J invariant of a Target key

535
00:29:32,820 --> 00:29:36,059
Target Curve will be a shared Secret

536
00:29:36,059 --> 00:29:39,059
so this is not enough to build psych you

537
00:29:39,059 --> 00:29:41,279
need to add a fudisaki okamoto

538
00:29:41,279 --> 00:29:45,799
transformation to make it in CCA

539
00:29:46,679 --> 00:29:48,960
so now what about Hardware attacks on

540
00:29:48,960 --> 00:29:51,659
Psych so a good a very good point of

541
00:29:51,659 --> 00:29:54,179
Psych is its regularity and there are

542
00:29:54,179 --> 00:29:56,159
attacks that take advantage of elliptic

543
00:29:56,159 --> 00:29:58,440
curve cryptography in Psych so what you

544
00:29:58,440 --> 00:30:01,020
saw were P plus SK times Q

545
00:30:01,020 --> 00:30:03,539
and later a fire engine computation

546
00:30:03,539 --> 00:30:05,700
there are four attacks inside Channel

547
00:30:05,700 --> 00:30:07,740
analysis that can be theoretical

548
00:30:07,740 --> 00:30:11,039
stimulated or verified in a lab

549
00:30:11,039 --> 00:30:13,919
you can see our work here in purple but

550
00:30:13,919 --> 00:30:16,740
different at all and I will also mention

551
00:30:16,740 --> 00:30:19,320
a work by wanget Island that is related

552
00:30:19,320 --> 00:30:21,600
quote Hertz bleed

553
00:30:21,600 --> 00:30:24,659
foreign so we decided to focus on side

554
00:30:24,659 --> 00:30:27,740
Channel analysis

555
00:30:28,520 --> 00:30:31,679
already performed classical DPI and CPA

556
00:30:31,679 --> 00:30:35,279
on the elliptic curve part of Psych and

557
00:30:35,279 --> 00:30:36,860
they all recommended the classical

558
00:30:36,860 --> 00:30:39,120
masking countermeasure that uses

559
00:30:39,120 --> 00:30:40,500
randomization

560
00:30:40,500 --> 00:30:42,480
meaning you want the common

561
00:30:42,480 --> 00:30:44,340
characteristic between all new Power

562
00:30:44,340 --> 00:30:46,679
traces that is the secret to disappear

563
00:30:46,679 --> 00:30:48,779
using randomness

564
00:30:48,779 --> 00:30:52,919
so here in for psych the points are

565
00:30:52,919 --> 00:30:55,500
represented by projective coordinates x

566
00:30:55,500 --> 00:30:58,260
and z and we are going to multiply them

567
00:30:58,260 --> 00:31:00,419
with a random scalar Lambda to get

568
00:31:00,419 --> 00:31:03,240
coordinates Lambda X Lambda Z Lambda for

569
00:31:03,240 --> 00:31:05,279
Lambda you have a lot of options P

570
00:31:05,279 --> 00:31:08,039
Square minus 1 P being a big Prime and

571
00:31:08,039 --> 00:31:09,480
this doesn't change the coordinates at

572
00:31:09,480 --> 00:31:11,220
all with a projective coordinates you

573
00:31:11,220 --> 00:31:14,399
still have the same quotient x divided

574
00:31:14,399 --> 00:31:15,539
by Z

575
00:31:15,539 --> 00:31:17,520
so a bit more precisely inside you have

576
00:31:17,520 --> 00:31:20,820
points p with coordinates x p 1 and

577
00:31:20,820 --> 00:31:25,140
multiplied you get Lambda X and Lambda

578
00:31:25,140 --> 00:31:28,380
but obviously we want to to bypass this

579
00:31:28,380 --> 00:31:31,140
very cheap and common counter measure an

580
00:31:31,140 --> 00:31:33,000
observation is that there is no

581
00:31:33,000 --> 00:31:34,679
influence on their of their

582
00:31:34,679 --> 00:31:36,480
randomization on zero

583
00:31:36,480 --> 00:31:39,000
so if one of coordinates of your point

584
00:31:39,000 --> 00:31:41,340
is zero you can multiply by Lambda as

585
00:31:41,340 --> 00:31:43,260
much as you want it will still be zero

586
00:31:43,260 --> 00:31:45,480
and this is something that we can detect

587
00:31:45,480 --> 00:31:47,399
with a side Channel

588
00:31:47,399 --> 00:31:50,100
so an idea by Google is to force

589
00:31:50,100 --> 00:31:52,620
computation of zero value points in our

590
00:31:52,620 --> 00:31:54,720
case that would be o with coordinates

591
00:31:54,720 --> 00:31:59,539
one zero and T we've coordinate 0 1.

592
00:31:59,539 --> 00:32:02,940
already proposed zero point attacks like

593
00:32:02,940 --> 00:32:05,700
this on sidh but they cannot be ported

594
00:32:05,700 --> 00:32:08,399
to psych and of course we want a tax on

595
00:32:08,399 --> 00:32:11,340
Psych so the first question was is the

596
00:32:11,340 --> 00:32:14,640
theoretical side Channel attack on Psych

597
00:32:14,640 --> 00:32:16,860
that buys biases according to

598
00:32:16,860 --> 00:32:18,720
randomization

599
00:32:18,720 --> 00:32:21,240
and is this attack exploitable in

600
00:32:21,240 --> 00:32:24,779
practice spoiler yes so in our case with

601
00:32:24,779 --> 00:32:26,520
electromagnetic emissions or power

602
00:32:26,520 --> 00:32:29,460
consumption and also yes in the case of

603
00:32:29,460 --> 00:32:31,380
a work by one adult with his heart split

604
00:32:31,380 --> 00:32:33,600
where they perform a remote timing

605
00:32:33,600 --> 00:32:35,880
attack and afterwards you'd like

606
00:32:35,880 --> 00:32:38,039
countermissions obviously

607
00:32:38,039 --> 00:32:40,140
so I will describe now one of the two

608
00:32:40,140 --> 00:32:42,299
attacks we worked on

609
00:32:42,299 --> 00:32:45,179
so our goal is to recover the secret key

610
00:32:45,179 --> 00:32:49,380
bit by bit here you have a diagram of a

611
00:32:49,380 --> 00:32:51,299
shared secret computation that you saw

612
00:32:51,299 --> 00:32:53,039
inside the H before

613
00:32:53,039 --> 00:32:55,679
so you have a triplet of points you

614
00:32:55,679 --> 00:32:57,539
randomize the code in it that is the

615
00:32:57,539 --> 00:32:58,980
counter measure that we want to bypass

616
00:32:58,980 --> 00:33:03,539
you have a kernel generator computation

617
00:33:03,539 --> 00:33:05,460
where you get that elliptic curve

618
00:33:05,460 --> 00:33:08,460
cryptography part by isogenic

619
00:33:08,460 --> 00:33:11,039
computation and vaginal computation we

620
00:33:11,039 --> 00:33:13,260
assume that the bit of bits of index 0

621
00:33:13,260 --> 00:33:16,860
to K minus 1 are known and we are going

622
00:33:16,860 --> 00:33:19,200
to choose to create a point triplet such

623
00:33:19,200 --> 00:33:21,000
that zero values appear in the

624
00:33:21,000 --> 00:33:22,919
computation if a bit we are looking for

625
00:33:22,919 --> 00:33:26,399
is one but arbitrary is zero sorry an

626
00:33:26,399 --> 00:33:28,980
arbitrary values appear if a bit we are

627
00:33:28,980 --> 00:33:31,080
looking for is one

628
00:33:31,080 --> 00:33:33,299
we identified two spots in the

629
00:33:33,299 --> 00:33:35,100
decapsulation so in the shared secret

630
00:33:35,100 --> 00:33:37,500
computation if you want here but field

631
00:33:37,500 --> 00:33:38,820
zeros

632
00:33:38,820 --> 00:33:41,279
the kernel generator computation so the

633
00:33:41,279 --> 00:33:43,440
 merry ladder elliptic curve

634
00:33:43,440 --> 00:33:46,380
computation and later the isogenic

635
00:33:46,380 --> 00:33:47,519
computation

636
00:33:47,519 --> 00:33:50,519
so we have two attacks

637
00:33:50,519 --> 00:33:53,460
they are a bit different though so the

638
00:33:53,460 --> 00:33:55,440
appearance of a first zero Value Point

639
00:33:55,440 --> 00:33:57,120
for the three-point title attack is due

640
00:33:57,120 --> 00:33:59,519
to an incomplete Edition formula whereas

641
00:33:59,519 --> 00:34:02,399
for either the isogeny attack is due to

642
00:34:02,399 --> 00:34:04,860
the fact that we evaluate by isogeny on

643
00:34:04,860 --> 00:34:07,740
its kernel in both cases we can observe

644
00:34:07,740 --> 00:34:11,099
the point zero zero and an avalanche

645
00:34:11,099 --> 00:34:13,679
effect with lots of zeros appearing

646
00:34:13,679 --> 00:34:15,899
we decided to validate the first attack

647
00:34:15,899 --> 00:34:17,239
with

648
00:34:17,239 --> 00:34:19,139
electromagnetic emissions and the second

649
00:34:19,139 --> 00:34:21,239
one with power consumption

650
00:34:21,239 --> 00:34:23,520
for as for counter measures for the

651
00:34:23,520 --> 00:34:24,780
three-point ladder attacks color

652
00:34:24,780 --> 00:34:28,260
randomization is an option but it

653
00:34:28,260 --> 00:34:30,179
doesn't work at all for another attack

654
00:34:30,179 --> 00:34:33,239
hence we wanted to design an efficient

655
00:34:33,239 --> 00:34:36,000
countermeasure that works for both

656
00:34:36,000 --> 00:34:39,480
now what about hertzblade so one guitar

657
00:34:39,480 --> 00:34:41,940
we discovered independently the

658
00:34:41,940 --> 00:34:43,619
three-point land attack

659
00:34:43,619 --> 00:34:46,699
but they performed it using a remote

660
00:34:46,699 --> 00:34:49,859
planning timing side Channel

661
00:34:49,859 --> 00:34:53,520
it makes the 3.5 attacks stronger and

662
00:34:53,520 --> 00:34:55,560
they don't present though an isogenic

663
00:34:55,560 --> 00:34:57,679
attack

664
00:34:57,900 --> 00:35:00,300
so now I'm only going to describe a

665
00:35:00,300 --> 00:35:01,680
three-point ladder attack because the

666
00:35:01,680 --> 00:35:04,680
exogeny attack has a more complex math

667
00:35:04,680 --> 00:35:06,300
background and it would take too much

668
00:35:06,300 --> 00:35:07,440
time

669
00:35:07,440 --> 00:35:11,339
so the three-point ladder is a method to

670
00:35:11,339 --> 00:35:14,520
compute P plus s k times Q on an

671
00:35:14,520 --> 00:35:17,280
elliptical p and QR points SKS color

672
00:35:17,280 --> 00:35:20,400
here you can see a little toy ladder to

673
00:35:20,400 --> 00:35:22,380
compute P plus 50q

674
00:35:22,380 --> 00:35:25,079
you have the bits here least significant

675
00:35:25,079 --> 00:35:27,900
to most significant bit and at the start

676
00:35:27,900 --> 00:35:31,440
you have free registers with each an

677
00:35:31,440 --> 00:35:33,300
input point

678
00:35:33,300 --> 00:35:36,060
you can see that the contents of l0 is

679
00:35:36,060 --> 00:35:37,740
always doubled it doesn't depend on the

680
00:35:37,740 --> 00:35:40,440
bit value however that what happens with

681
00:35:40,440 --> 00:35:42,599
the other registers depends on the bit

682
00:35:42,599 --> 00:35:43,560
value

683
00:35:43,560 --> 00:35:47,820
if you have a zero value bit here

684
00:35:47,820 --> 00:35:50,940
you add what is in r01 R2 and store it

685
00:35:50,940 --> 00:35:55,980
in R2 you don't touch ah if a bit is one

686
00:35:55,980 --> 00:36:00,180
you store you add sorry what is r in r0

687
00:36:00,180 --> 00:36:02,760
and R so

688
00:36:02,760 --> 00:36:05,000
foreign

689
00:36:07,820 --> 00:36:10,320
and you just perform these little steps

690
00:36:10,320 --> 00:36:13,140
these little steps until you get your P

691
00:36:13,140 --> 00:36:15,180
plus 50q

692
00:36:15,180 --> 00:36:17,700
so now how do we perform the attack let

693
00:36:17,700 --> 00:36:20,280
us assume we want to find bit free which

694
00:36:20,280 --> 00:36:21,420
is zero

695
00:36:21,420 --> 00:36:25,020
that means but you might to make a point

696
00:36:25,020 --> 00:36:28,020
T which has a code in it but zero appear

697
00:36:28,020 --> 00:36:30,119
here

698
00:36:30,119 --> 00:36:33,000
when the bit is zero

699
00:36:33,000 --> 00:36:36,900
so we want an input Point P such that

700
00:36:36,900 --> 00:36:41,460
here the 14 Q minus p is equal to T and

701
00:36:41,460 --> 00:36:44,220
there is a zero appearing

702
00:36:44,220 --> 00:36:48,079
so let's do that so we plug such AP

703
00:36:48,079 --> 00:36:53,160
compute happily as before and indeed we

704
00:36:53,160 --> 00:36:54,420
have a point t

705
00:36:54,420 --> 00:36:56,880
when the battery is zero so if we make

706
00:36:56,880 --> 00:36:59,339
the correct hypothesis on the bit

707
00:36:59,339 --> 00:37:02,940
T appears when B3 is processed

708
00:37:02,940 --> 00:37:05,640
now what happens when we make the wrong

709
00:37:05,640 --> 00:37:08,040
hypothesis and bit free

710
00:37:08,040 --> 00:37:10,380
was not zero but is one

711
00:37:10,380 --> 00:37:12,420
you can see what we just have arbitrary

712
00:37:12,420 --> 00:37:13,440
values

713
00:37:13,440 --> 00:37:16,020
this means that we can distinguish using

714
00:37:16,020 --> 00:37:18,540
our technique bits that are zero and

715
00:37:18,540 --> 00:37:21,060
bits water one

716
00:37:21,060 --> 00:37:24,180
so now what do we do in lab to validate

717
00:37:24,180 --> 00:37:24,839
it

718
00:37:24,839 --> 00:37:26,940
so we attack a software implementation

719
00:37:26,940 --> 00:37:29,820
of the round three version of a psych

720
00:37:29,820 --> 00:37:32,220
freepoint ladder and we add the

721
00:37:32,220 --> 00:37:34,140
projective coordinate countermeasure

722
00:37:34,140 --> 00:37:36,900
because it's it's not by default in the

723
00:37:36,900 --> 00:37:38,760
next mission because this doesn't really

724
00:37:38,760 --> 00:37:41,400
require side Channel counter measures

725
00:37:41,400 --> 00:37:43,500
besides for timing

726
00:37:43,500 --> 00:37:47,160
and we choose to attack nstm 32f4 with a

727
00:37:47,160 --> 00:37:50,900
cortex info at 168 megahertz the classic

728
00:37:50,900 --> 00:37:54,540
nist recommended Target

729
00:37:54,540 --> 00:37:57,660
here you can see our app setup we have a

730
00:37:57,660 --> 00:38:00,180
control computer a motorized XYZ stage

731
00:38:00,180 --> 00:38:03,119
oscilloscope the Target and on top of

732
00:38:03,119 --> 00:38:05,220
the target the electromagnetic probe to

733
00:38:05,220 --> 00:38:06,780
record the emissions

734
00:38:06,780 --> 00:38:08,940
during the campaign we don't move a

735
00:38:08,940 --> 00:38:11,460
probe and I remind you we want to find a

736
00:38:11,460 --> 00:38:15,320
bit K knowing all previous bits

737
00:38:15,599 --> 00:38:18,720
so we record multiple traces of

738
00:38:18,720 --> 00:38:20,839
electromagnetic emissions of a board

739
00:38:20,839 --> 00:38:23,460
performing by ladder computation with

740
00:38:23,460 --> 00:38:26,460
three types of input a random correct

741
00:38:26,460 --> 00:38:29,640
triplet of points a malicious triplets

742
00:38:29,640 --> 00:38:32,460
such that t appears when the bit we are

743
00:38:32,460 --> 00:38:34,800
looking for is zero and the malicious

744
00:38:34,800 --> 00:38:37,380
triplets such a t appears when the bit

745
00:38:37,380 --> 00:38:39,359
is one

746
00:38:39,359 --> 00:38:41,099
here you can have a look at the traces

747
00:38:41,099 --> 00:38:43,260
you can see that the trace for random

748
00:38:43,260 --> 00:38:44,940
inputs in the trace for a wrong

749
00:38:44,940 --> 00:38:46,980
hypothesis on the bits are really

750
00:38:46,980 --> 00:38:49,380
similar whereas the trace for the

751
00:38:49,380 --> 00:38:52,020
correct hypothesis and the trace for the

752
00:38:52,020 --> 00:38:54,839
wrong hypothesis are really different so

753
00:38:54,839 --> 00:38:58,260
to the naked eye a human Observer can

754
00:38:58,260 --> 00:39:00,900
guess I mean can find out which is the

755
00:39:00,900 --> 00:39:03,060
correct hypothesis but obviously it's

756
00:39:03,060 --> 00:39:05,339
not very convenient to have a human

757
00:39:05,339 --> 00:39:07,619
Observer stereo oscilloscope during your

758
00:39:07,619 --> 00:39:11,220
campaign so we decided to automate it

759
00:39:11,220 --> 00:39:14,040
using t-tests so we're going to compare

760
00:39:14,040 --> 00:39:16,260
two t tests t0 and T1

761
00:39:16,260 --> 00:39:19,680
they both use 10 traces obtained with

762
00:39:19,680 --> 00:39:21,960
random correct Point triplets

763
00:39:21,960 --> 00:39:23,520
c0

764
00:39:23,520 --> 00:39:26,280
however uses also 10 traces obtained

765
00:39:26,280 --> 00:39:29,160
with a point flipper that yields T when

766
00:39:29,160 --> 00:39:31,980
the bit is zero we are looking for and

767
00:39:31,980 --> 00:39:34,740
T1 uses 10 traces obtained with a point

768
00:39:34,740 --> 00:39:37,740
triplets but Shield is key when the bit

769
00:39:37,740 --> 00:39:39,300
this one

770
00:39:39,300 --> 00:39:42,660
but that way we avoid the need for a

771
00:39:42,660 --> 00:39:45,740
threshold on the t-test

772
00:39:46,320 --> 00:39:48,780
here the detest results of a wrong and

773
00:39:48,780 --> 00:39:51,060
the correct hypothesis and the cheaters

774
00:39:51,060 --> 00:39:53,339
for the correct hypothesis exhibits such

775
00:39:53,339 --> 00:39:55,200
high values it's very easy to

776
00:39:55,200 --> 00:39:56,940
distinguish them so we can find the

777
00:39:56,940 --> 00:39:59,280
value of bit K

778
00:39:59,280 --> 00:40:02,220
knowing that bits 0 to K we can find bit

779
00:40:02,220 --> 00:40:04,560
K plus 1 and so on and continue or

780
00:40:04,560 --> 00:40:06,660
attack

781
00:40:06,660 --> 00:40:09,500
what about the counter measure now

782
00:40:09,500 --> 00:40:12,240
the both attacks the one about the

783
00:40:12,240 --> 00:40:14,700
three-point ladder I explained and with

784
00:40:14,700 --> 00:40:16,859
one about visor Denis but I did not

785
00:40:16,859 --> 00:40:19,380
explain use malformed input points

786
00:40:19,380 --> 00:40:21,359
meaning they don't have all good

787
00:40:21,359 --> 00:40:23,760
mathematical properties but are in the

788
00:40:23,760 --> 00:40:25,440
psych specifications

789
00:40:25,440 --> 00:40:27,540
so they have order

790
00:40:27,540 --> 00:40:30,180
two times three of the power n for the

791
00:40:30,180 --> 00:40:32,280
three point Slide Attack and two at the

792
00:40:32,280 --> 00:40:33,960
power n for the isogenic computation

793
00:40:33,960 --> 00:40:36,780
attack instead of fiatic power E3 E3

794
00:40:36,780 --> 00:40:38,880
being a side parameter for legitimate

795
00:40:38,880 --> 00:40:39,900
inputs

796
00:40:39,900 --> 00:40:42,599
so we perform checks we check that P and

797
00:40:42,599 --> 00:40:45,119
Q are both of all the three other power

798
00:40:45,119 --> 00:40:47,820
E3 and that will generate if you have

799
00:40:47,820 --> 00:40:50,160
the power E3 torsion this is done by

800
00:40:50,160 --> 00:40:52,500
verifying a few equations and it

801
00:40:52,500 --> 00:40:56,160
protects psych against oof attacks

802
00:40:56,160 --> 00:40:58,380
how to insert how do we insert the

803
00:40:58,380 --> 00:41:01,260
countermeasure just after receiving

804
00:41:01,260 --> 00:41:04,020
the point triplets if a point check is

805
00:41:04,020 --> 00:41:06,060
okay we just continue the computation

806
00:41:06,060 --> 00:41:09,480
until we get the J environment as we are

807
00:41:09,480 --> 00:41:10,500
bought

808
00:41:10,500 --> 00:41:12,780
this contact measure has a 12.9 overhead

809
00:41:12,780 --> 00:41:15,540
on a codex M4 and it has been integrated

810
00:41:15,540 --> 00:41:17,880
in two implementation of Psych or

811
00:41:17,880 --> 00:41:20,520
official submission one PQ crypto sidh

812
00:41:20,520 --> 00:41:23,700
from Microsoft and the circular one by

813
00:41:23,700 --> 00:41:26,460
cloudflare now I must say that the

814
00:41:26,460 --> 00:41:28,140
quantum measure has been integrated

815
00:41:28,140 --> 00:41:30,540
thanks to hertzblade because it's a

816
00:41:30,540 --> 00:41:36,140
timing attack and nist likes requires

817
00:41:36,140 --> 00:41:38,760
submissions protected against timing

818
00:41:38,760 --> 00:41:40,260
attacks

819
00:41:40,260 --> 00:41:42,960
so as a conclusion both zero points

820
00:41:42,960 --> 00:41:45,000
attack the three-point line the one and

821
00:41:45,000 --> 00:41:47,339
the isogeneous enable a bit by bit

822
00:41:47,339 --> 00:41:49,440
recovery of a secret key

823
00:41:49,440 --> 00:41:52,619
we verify them both experimentally using

824
00:41:52,619 --> 00:41:55,020
electromagnetic emissions or power

825
00:41:55,020 --> 00:41:58,680
consumption on a cortex M4 core and the

826
00:41:58,680 --> 00:42:00,660
point check is sufficient to throw out

827
00:42:00,660 --> 00:42:03,119
both attacks thank you for your

828
00:42:03,119 --> 00:42:05,420
attention

829
00:42:11,700 --> 00:42:16,879
and we have time for some questions

830
00:42:22,579 --> 00:42:24,660
uh okay

831
00:42:24,660 --> 00:42:28,380
um so my question is the following uh so

832
00:42:28,380 --> 00:42:30,660
and you mentioned that this is also

833
00:42:30,660 --> 00:42:33,780
applicable to some of the seaside yeah

834
00:42:33,780 --> 00:42:36,619
implementations uh

835
00:42:36,619 --> 00:42:38,579
how

836
00:42:38,579 --> 00:42:43,079
how well does the seaside I mean if you

837
00:42:43,079 --> 00:42:45,540
apply this to Seaside does it work

838
00:42:45,540 --> 00:42:49,500
equally as well as here or yeah it it

839
00:42:49,500 --> 00:42:51,780
works very well actually uh the team

840
00:42:51,780 --> 00:42:53,880
that did that I just checked it by a

841
00:42:53,880 --> 00:42:55,920
simulation but it's a bit different than

842
00:42:55,920 --> 00:42:58,560
ours because we make the zero values

843
00:42:58,560 --> 00:43:01,260
appear in point coordinates and then

844
00:43:01,260 --> 00:43:04,740
make zero value appears on elliptic

845
00:43:04,740 --> 00:43:07,040
curve coordinates because

846
00:43:07,040 --> 00:43:10,920
elliptic curve coefficients in sidh or

847
00:43:10,920 --> 00:43:14,119
psych are represented by uh two

848
00:43:14,119 --> 00:43:17,760
coefficients like similarly to what you

849
00:43:17,760 --> 00:43:20,220
saw for the productive points and then

850
00:43:20,220 --> 00:43:23,880
one then one of the two values is zero

851
00:43:23,880 --> 00:43:26,220
they can detect it and it's also a

852
00:43:26,220 --> 00:43:28,680
chosen ciphertext attack they craft

853
00:43:28,680 --> 00:43:33,319
their ciphertext such that basically the

854
00:43:33,319 --> 00:43:36,420
either little isogenes go back to the

855
00:43:36,420 --> 00:43:38,520
starting curve that has a zero in its

856
00:43:38,520 --> 00:43:40,560
coefficient

857
00:43:40,560 --> 00:43:43,160
I see

858
00:43:43,160 --> 00:43:46,260
my I guess there's another question

859
00:43:46,260 --> 00:43:48,060
which is

860
00:43:48,060 --> 00:43:50,819
I mean of course there are many codecs

861
00:43:50,819 --> 00:43:52,619
and four platforms

862
00:43:52,619 --> 00:43:55,400
and I

863
00:43:55,400 --> 00:44:00,540
noticed and like when uh some of my

864
00:44:00,540 --> 00:44:03,060
students were experimenting that

865
00:44:03,060 --> 00:44:07,280
like low powered versions of the M4

866
00:44:07,280 --> 00:44:11,160
makes the text a lot harder like did you

867
00:44:11,160 --> 00:44:13,819
did you try different

868
00:44:13,819 --> 00:44:17,160
platforms or just use this one we just

869
00:44:17,160 --> 00:44:19,319
used cortex info because in the standard

870
00:44:19,319 --> 00:44:21,480
way just the discovery board

871
00:44:21,480 --> 00:44:24,060
oh no the the one that comes with chip

872
00:44:24,060 --> 00:44:27,839
Whisperer or no it's uh I think I I

873
00:44:27,839 --> 00:44:29,400
wrote the reference

874
00:44:29,400 --> 00:44:32,480
okay so the discovery board it's a

875
00:44:32,480 --> 00:44:34,980
stem32f4 it's not the one on that ship

876
00:44:34,980 --> 00:44:38,160
whisper I think it's a normal stm32 that

877
00:44:38,160 --> 00:44:41,940
you can buy okay thank you let's let's

878
00:44:41,940 --> 00:44:44,900
sing the speaker again

879
00:44:51,780 --> 00:44:55,200
puppy break time back at the theater de

880
00:44:55,200 --> 00:45:01,279
zomer and see you next session

881
00:45:03,660 --> 00:45:06,740
thank you very much

