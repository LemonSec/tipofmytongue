1
00:00:58,399 --> 00:01:01,140
I think it's all

2
00:01:01,140 --> 00:01:03,379
foreign

3
00:01:36,540 --> 00:01:40,159
so you can use this weapon

4
00:01:46,159 --> 00:01:48,900
well whenever someone is making noise

5
00:01:48,900 --> 00:01:51,720
you can mute them and then just remove

6
00:01:51,720 --> 00:01:54,320
this because

7
00:02:02,899 --> 00:02:05,899
thank you

8
00:02:07,200 --> 00:02:08,538
okay

9
00:02:08,538 --> 00:02:13,279
and uh I just started

10
00:02:15,500 --> 00:02:18,200
okay

11
00:02:18,200 --> 00:02:21,980
uh welcome back to the session of first

12
00:02:21,980 --> 00:02:24,620
implementations for post Quantum crypto

13
00:02:24,620 --> 00:02:27,239
for the first targeted online so it's

14
00:02:27,239 --> 00:02:29,520
meant to be a video it's a constant time

15
00:02:29,520 --> 00:02:32,940
avx2 implementation of a variant of Rolo

16
00:02:32,940 --> 00:02:40,040
so it's done child Tony and janahan Leo

17
00:02:58,580 --> 00:03:01,200
Volo is a code base camp that has good

18
00:03:01,200 --> 00:03:03,420
implementation of a variant of roller

19
00:03:03,420 --> 00:03:05,760
and this is a joint work with chin

20
00:03:05,760 --> 00:03:08,120
Handel

21
00:03:10,980 --> 00:03:13,680
Polo is a co-based camp that has entered

22
00:03:13,680 --> 00:03:16,319
the second round of the Miss pqc

23
00:03:16,319 --> 00:03:21,180
competition it's a ranked Matrix scheme

24
00:03:21,180 --> 00:03:23,400
unfortunately Rolo didn't enter the

25
00:03:23,400 --> 00:03:27,360
third round because a new device text

26
00:03:27,360 --> 00:03:30,120
and after that the real thing proposed

27
00:03:30,120 --> 00:03:32,300
to use larger parameter sets

28
00:03:32,300 --> 00:03:37,099
in order to defend the attacks

29
00:03:37,860 --> 00:03:40,920
but even with the larger payments sets

30
00:03:40,920 --> 00:03:43,980
uh actually Rolo still has a pretty

31
00:03:43,980 --> 00:03:47,159
small public keys and this is due to the

32
00:03:47,159 --> 00:03:50,340
entry-like structure

33
00:03:50,340 --> 00:03:52,440
but unfortunately there hasn't been much

34
00:03:52,440 --> 00:03:55,920
work about uh how to

35
00:03:55,920 --> 00:03:58,500
have a fast constant time

36
00:03:58,500 --> 00:04:01,980
so for augmentation varello and this is

37
00:04:01,980 --> 00:04:06,319
exactly the purpose of our paper

38
00:04:08,640 --> 00:04:10,739
and now I can tell you a little bit

39
00:04:10,739 --> 00:04:13,500
about the construction of brolo

40
00:04:13,500 --> 00:04:16,100
basically there's a ring

41
00:04:16,100 --> 00:04:19,798
in the case of Rolo it's a big field

42
00:04:19,798 --> 00:04:23,599
F2 to the n n

43
00:04:24,660 --> 00:04:27,780
um and when you write down a Big Field

44
00:04:27,780 --> 00:04:31,440
element or several Big Field elements uh

45
00:04:31,440 --> 00:04:34,199
you can consider it as a list of f to

46
00:04:34,199 --> 00:04:36,540
the m elements

47
00:04:36,540 --> 00:04:39,540
and then you consider the F2 linear

48
00:04:39,540 --> 00:04:43,080
space scanned by this F2 to the n

49
00:04:43,080 --> 00:04:45,180
elements

50
00:04:45,180 --> 00:04:48,259
this is going to be called the support

51
00:04:48,259 --> 00:04:52,020
of the the elements

52
00:04:52,020 --> 00:04:55,320
and then you can consider the rank

53
00:04:55,320 --> 00:04:58,380
weight of the element uh well which is

54
00:04:58,380 --> 00:05:01,919
just the dimension of this port

55
00:05:01,919 --> 00:05:03,000
uh

56
00:05:03,000 --> 00:05:05,580
and each secret key of Rollo is often

57
00:05:05,580 --> 00:05:07,100
foreign

58
00:05:07,100 --> 00:05:12,540
which has a low rank weight

59
00:05:12,540 --> 00:05:16,199
and the public key is the ratio thing H1

60
00:05:16,199 --> 00:05:18,979
and h0

61
00:05:19,740 --> 00:05:21,960
for in cancellation what you do is that

62
00:05:21,960 --> 00:05:25,740
you create a low weight element e0 and

63
00:05:25,740 --> 00:05:26,820
E1

64
00:05:26,820 --> 00:05:31,440
and then you compute e0 plus ha1 as

65
00:05:31,440 --> 00:05:33,660
cephyr text

66
00:05:33,660 --> 00:05:37,020
for the cancellation uh what you do is

67
00:05:37,020 --> 00:05:39,600
that you will first multiply the seven

68
00:05:39,600 --> 00:05:44,580
text by h0 to 4x0 e0 H1 E1

69
00:05:44,580 --> 00:05:47,880
and then somehow by making use of the

70
00:05:47,880 --> 00:05:52,620
the fact that all the four elements are

71
00:05:52,620 --> 00:05:56,400
low rank weight elements uh you can make

72
00:05:56,400 --> 00:06:01,620
use of rsr obviously to compute a zero

73
00:06:01,620 --> 00:06:05,220
and E1 or the support of the 0 and E1

74
00:06:05,220 --> 00:06:08,759
and this support will be

75
00:06:08,759 --> 00:06:12,740
consider as the session key

76
00:06:15,539 --> 00:06:19,620
okay so here are our main optimization

77
00:06:19,620 --> 00:06:23,360
techniques first of all we improved the

78
00:06:23,360 --> 00:06:26,639
rsr decoding algorithm a little bit

79
00:06:26,639 --> 00:06:28,080
uh

80
00:06:28,080 --> 00:06:32,580
we call the result rsr plus the reason

81
00:06:32,580 --> 00:06:35,240
and we call the resulting crypto system

82
00:06:35,240 --> 00:06:38,419
roller Plus

83
00:06:39,419 --> 00:06:43,460
and we also have some techniques for uh

84
00:06:43,460 --> 00:06:46,680
generating low weight elements quickly

85
00:06:46,680 --> 00:06:49,020
and also multiply

86
00:06:49,020 --> 00:06:53,599
by low weight elements quickly

87
00:06:54,419 --> 00:06:56,759
and we also figure out some techniques

88
00:06:56,759 --> 00:06:58,740
for doing a fast constant time doesn't

89
00:06:58,740 --> 00:07:01,560
help Zero vision

90
00:07:01,560 --> 00:07:04,560
it doesn't help the organisms using rsr

91
00:07:04,560 --> 00:07:07,139
or rsr Plus for computing the

92
00:07:07,139 --> 00:07:10,560
intersection of linear spaces

93
00:07:10,560 --> 00:07:14,100
and in order to do this you have to

94
00:07:14,100 --> 00:07:16,680
figure out like how to do gaussian

95
00:07:16,680 --> 00:07:18,419
elimination inside thousand house

96
00:07:18,419 --> 00:07:21,000
everything quickly and constant time and

97
00:07:21,000 --> 00:07:24,120
also how to retrieve the intersection

98
00:07:24,120 --> 00:07:27,919
quickly in constant time

99
00:07:28,380 --> 00:07:30,300
and here I should note that the

100
00:07:30,300 --> 00:07:32,460
techniques can

101
00:07:32,460 --> 00:07:36,599
also can be used for both Rolo plus and

102
00:07:36,599 --> 00:07:38,819
Rolo itself

103
00:07:38,819 --> 00:07:41,280
and similar techniques can be used for

104
00:07:41,280 --> 00:07:47,539
embedded systems not only in FX2

105
00:07:52,740 --> 00:07:55,680
okay now on the top you can see the

106
00:07:55,680 --> 00:07:58,560
description of the rsr algorithm

107
00:07:58,560 --> 00:08:01,500
basically there are several f2cm

108
00:08:01,500 --> 00:08:07,319
elements F1 to Ft and also s0 to s n

109
00:08:07,319 --> 00:08:10,039
minus 1.

110
00:08:10,380 --> 00:08:12,240
and the goal is to compute the

111
00:08:12,240 --> 00:08:17,400
intersection of f i inverse big S where

112
00:08:17,400 --> 00:08:23,099
big S is the span of s02 S9 minus 1.

113
00:08:23,099 --> 00:08:25,199
so uh

114
00:08:25,199 --> 00:08:28,139
what makes this ergson not so efficient

115
00:08:28,139 --> 00:08:31,259
in natural efficient is that

116
00:08:31,259 --> 00:08:31,979
um

117
00:08:31,979 --> 00:08:35,719
in order to represent this space big S

118
00:08:35,719 --> 00:08:40,620
we need and view elements

119
00:08:40,620 --> 00:08:43,200
if we don't have any uh

120
00:08:43,200 --> 00:08:47,580
assumption for s0 to SN minus 1. but

121
00:08:47,580 --> 00:08:50,339
actually we know that for very like

122
00:08:50,339 --> 00:08:53,220
seven text

123
00:08:53,220 --> 00:08:57,060
um this big S is now going to have rank

124
00:08:57,060 --> 00:09:00,420
n it's going to have some smaller rank d

125
00:09:00,420 --> 00:09:01,800
r

126
00:09:01,800 --> 00:09:05,240
so we propose to use

127
00:09:05,240 --> 00:09:07,800
gaussian illumination to apply

128
00:09:07,800 --> 00:09:10,740
documentation on s02 as a minus 1 first

129
00:09:10,740 --> 00:09:15,360
to check the the dimension of the space

130
00:09:15,360 --> 00:09:18,959
it is the space the dimensional space is

131
00:09:18,959 --> 00:09:21,060
larger than Dr then we consider the

132
00:09:21,060 --> 00:09:23,880
Cyber text invalid

133
00:09:23,880 --> 00:09:27,060
is the dimension is smaller or equal to

134
00:09:27,060 --> 00:09:32,519
Dr then we compute the intersection

135
00:09:32,519 --> 00:09:36,899
and this will help you to save the

136
00:09:36,899 --> 00:09:38,760
number of rows that you need to

137
00:09:38,760 --> 00:09:43,880
represent each fi inverse big S

138
00:09:47,640 --> 00:09:48,899
okay

139
00:09:48,899 --> 00:09:51,779
um uh we also figure out some techniques

140
00:09:51,779 --> 00:09:54,540
about uh dealing with low weight

141
00:09:54,540 --> 00:09:56,820
elements

142
00:09:56,820 --> 00:09:57,660
um

143
00:09:57,660 --> 00:10:01,740
for example we figure out that each low

144
00:10:01,740 --> 00:10:04,920
weight element in F to CNN

145
00:10:04,920 --> 00:10:08,820
can be represented as this form uh alpha

146
00:10:08,820 --> 00:10:14,459
1 beta 1 to uh plus Alpha 2 Beta 2 until

147
00:10:14,459 --> 00:10:17,880
about D plus d beta d

148
00:10:17,880 --> 00:10:20,700
where each Alpha I is an F to C N

149
00:10:20,700 --> 00:10:23,760
elements and each beta I is n f to the m

150
00:10:23,760 --> 00:10:26,480
elements

151
00:10:27,480 --> 00:10:28,140
um

152
00:10:28,140 --> 00:10:32,160
and this help us to generate the lower

153
00:10:32,160 --> 00:10:35,880
elements quickly for example we when we

154
00:10:35,880 --> 00:10:38,339
want to generate a low weight almond we

155
00:10:38,339 --> 00:10:41,220
simply generate this Alpha eye and beta

156
00:10:41,220 --> 00:10:42,660
ice

157
00:10:42,660 --> 00:10:45,720
and then we apply a calcium nation of

158
00:10:45,720 --> 00:10:46,820
our eyes

159
00:10:46,820 --> 00:10:50,640
in beta ice to check whether the ring is

160
00:10:50,640 --> 00:10:53,060
correct

161
00:10:55,980 --> 00:11:00,000
and we also use this representation of

162
00:11:00,000 --> 00:11:04,260
lower elements to multiply to do

163
00:11:04,260 --> 00:11:06,180
multiplications with lower elements

164
00:11:06,180 --> 00:11:07,500
quickly

165
00:11:07,500 --> 00:11:10,200
uh so for example when you want to

166
00:11:10,200 --> 00:11:12,660
multiply a generic

167
00:11:12,660 --> 00:11:16,320
field element with some lower weight

168
00:11:16,320 --> 00:11:17,339
element

169
00:11:17,339 --> 00:11:20,279
what we do is that we represent the the

170
00:11:20,279 --> 00:11:23,399
generic element as a list of f to the m

171
00:11:23,399 --> 00:11:25,920
elements

172
00:11:25,920 --> 00:11:27,600
and then uh

173
00:11:27,600 --> 00:11:31,620
you can multiply the generic view

174
00:11:31,620 --> 00:11:37,579
element by all this beta ice very easily

175
00:11:37,980 --> 00:11:40,079
and of course we still have to deal with

176
00:11:40,079 --> 00:11:45,360
this alpha eyes which are in f2cm and in

177
00:11:45,360 --> 00:11:47,760
this case what you can do is to just do

178
00:11:47,760 --> 00:11:48,779
a

179
00:11:48,779 --> 00:11:51,360
transpose Matrix transpose

180
00:11:51,360 --> 00:11:53,060
to convert

181
00:11:53,060 --> 00:11:56,100
the The Big Field element into at least

182
00:11:56,100 --> 00:11:59,220
some method to the N elements

183
00:11:59,220 --> 00:12:02,100
and then you will be able to multiply by

184
00:12:02,100 --> 00:12:05,399
alpha eyes very easily

185
00:12:05,399 --> 00:12:09,720
and doing Matrix transposition is

186
00:12:09,720 --> 00:12:14,120
actually very efficient in the software

187
00:12:16,680 --> 00:12:20,640
okay and as I mentioned before inside

188
00:12:20,640 --> 00:12:24,120
this rsr ER everything and rsr plus

189
00:12:24,120 --> 00:12:25,740
ergson we

190
00:12:25,740 --> 00:12:27,899
uh open along to compute the

191
00:12:27,899 --> 00:12:31,380
intersection of several linear spaces

192
00:12:31,380 --> 00:12:33,300
and the Thousand house everything is one

193
00:12:33,300 --> 00:12:37,320
way to find a pretty good way to do this

194
00:12:37,320 --> 00:12:39,860
for example if you want to compute the

195
00:12:39,860 --> 00:12:43,500
intersection of two of the row select

196
00:12:43,500 --> 00:12:46,019
space u and row space V

197
00:12:46,019 --> 00:12:50,639
what you can do is do that you first put

198
00:12:50,639 --> 00:12:51,660
UMD

199
00:12:51,660 --> 00:12:56,040
like this if to form the Matrix Z

200
00:12:56,040 --> 00:12:59,160
and then you reduce uh you try to row

201
00:12:59,160 --> 00:13:04,100
reduce D to a form right like this

202
00:13:04,380 --> 00:13:08,940
and then uh so I've been actually uh

203
00:13:08,940 --> 00:13:12,959
your intercession will be just the row

204
00:13:12,959 --> 00:13:16,760
space of this Matrix d

205
00:13:17,700 --> 00:13:21,959
um but how can we uh

206
00:13:21,959 --> 00:13:25,200
generate how can you rewrite a constant

207
00:13:25,200 --> 00:13:27,959
time in the decision for uh doesn't have

208
00:13:27,959 --> 00:13:29,899
a reason

209
00:13:29,899 --> 00:13:33,060
uh this is not so trivial if we really

210
00:13:33,060 --> 00:13:35,579
consider it so basically calcium nation

211
00:13:35,579 --> 00:13:39,180
has to be constant time and also this

212
00:13:39,180 --> 00:13:45,620
extraction of a B has to be content time

213
00:13:50,220 --> 00:13:52,139
okay here's a

214
00:13:52,139 --> 00:13:55,200
how what how you can do calcium nation

215
00:13:55,200 --> 00:13:59,839
in software uh so basically you consider

216
00:13:59,839 --> 00:14:03,200
uh their input Matrix as a mini

217
00:14:03,200 --> 00:14:06,839
Matrix in F2

218
00:14:06,839 --> 00:14:10,139
and uh every time you want to find a

219
00:14:10,139 --> 00:14:12,360
pivot p

220
00:14:12,360 --> 00:14:14,399
all you do is that you compute the

221
00:14:14,399 --> 00:14:19,320
logical or of the piece row to the The

222
00:14:19,320 --> 00:14:22,019
Muse row

223
00:14:22,019 --> 00:14:26,240
and by finding the first index uh J

224
00:14:26,240 --> 00:14:29,940
that's not zero in this vector v

225
00:14:29,940 --> 00:14:33,300
you will be able to figure out the

226
00:14:33,300 --> 00:14:37,219
column index of your pivots

227
00:14:38,220 --> 00:14:40,699
and then here you can see the step four

228
00:14:40,699 --> 00:14:45,540
so step four is for uh basically

229
00:14:45,540 --> 00:14:50,579
putting the pivot into the right uh

230
00:14:50,579 --> 00:14:52,440
right row

231
00:14:52,440 --> 00:14:55,160
so this uh process can be

232
00:14:55,160 --> 00:14:57,779
represented as a list of logical

233
00:14:57,779 --> 00:15:00,480
operations as you see

234
00:15:00,480 --> 00:15:03,779
and here step 5 is just for uh

235
00:15:03,779 --> 00:15:06,959
eliminating the the

236
00:15:06,959 --> 00:15:11,639
Matrix elements above and also below the

237
00:15:11,639 --> 00:15:14,060
pivots

238
00:15:15,300 --> 00:15:20,160
so here uh the the problem is that so so

239
00:15:20,160 --> 00:15:24,120
uh if you want to find the inductory of

240
00:15:24,120 --> 00:15:26,940
the first non-zero entry of the vector B

241
00:15:26,940 --> 00:15:30,540
well this is uh

242
00:15:30,540 --> 00:15:33,720
if you do it rolling you can be

243
00:15:33,720 --> 00:15:35,639
non-constant time so you need to take

244
00:15:35,639 --> 00:15:38,880
care of that and also when you

245
00:15:38,880 --> 00:15:41,579
when you assess the

246
00:15:41,579 --> 00:15:46,019
Matrix elements using this uh index J

247
00:15:46,019 --> 00:15:51,060
because J is a uh J is the dependence of

248
00:15:51,060 --> 00:15:54,300
the Matrix entries

249
00:15:54,300 --> 00:15:58,380
so you also need to avoid just assessing

250
00:15:58,380 --> 00:16:02,820
the elements using memory operations

251
00:16:02,820 --> 00:16:06,060
and today I'm not going to talk a lot

252
00:16:06,060 --> 00:16:09,600
about how we do this in detail but we

253
00:16:09,600 --> 00:16:13,079
make use of some intrinsics if we're

254
00:16:13,079 --> 00:16:15,899
exchange six like the move Max can

255
00:16:15,899 --> 00:16:18,620
permute j6

256
00:16:18,620 --> 00:16:24,360
to do this operations in constant time

257
00:16:24,360 --> 00:16:27,120
so after the gaussian emulation we still

258
00:16:27,120 --> 00:16:28,860
have to somehow retrieve the

259
00:16:28,860 --> 00:16:31,079
intersection

260
00:16:31,079 --> 00:16:34,500
and here we consider the Matrix as two

261
00:16:34,500 --> 00:16:37,199
parts z o and z are and we also divide

262
00:16:37,199 --> 00:16:40,139
the Matrix into the upper part and uh

263
00:16:40,139 --> 00:16:45,540
the lower part is having a Delta rows

264
00:16:45,540 --> 00:16:49,980
and then what we do is that we run a

265
00:16:49,980 --> 00:16:55,139
loop for I from one to Delta

266
00:16:55,139 --> 00:16:58,019
and for each eye the the thing we do is

267
00:16:58,019 --> 00:17:02,880
that we check if the L I is now 0 and 0

268
00:17:02,880 --> 00:17:05,579
I plus Delta is zero

269
00:17:05,579 --> 00:17:11,880
uh if so we set the ri to VR hyper still

270
00:17:11,880 --> 00:17:14,120
down

271
00:17:14,160 --> 00:17:16,740
another thing we do is that we check

272
00:17:16,740 --> 00:17:20,579
whether DOI is now zero and

273
00:17:20,579 --> 00:17:23,939
uh where the DLI plus Delta is also now

274
00:17:23,939 --> 00:17:30,020
zero if so we set the ri to zero

275
00:17:30,960 --> 00:17:34,140
it might be hard to see the effect of uh

276
00:17:34,140 --> 00:17:36,419
doing this Loop

277
00:17:36,419 --> 00:17:37,919
but

278
00:17:37,919 --> 00:17:40,200
uh actually the the picture here is

279
00:17:40,200 --> 00:17:44,039
showing the effects for one case uh for

280
00:17:44,039 --> 00:17:46,740
example if you have the case where B has

281
00:17:46,740 --> 00:17:49,620
some part in the upper part of the

282
00:17:49,620 --> 00:17:52,020
Matrix and some parting the lower part

283
00:17:52,020 --> 00:17:55,020
of the Matrix the result of this is that

284
00:17:55,020 --> 00:17:58,080
the lower part will be brought to the

285
00:17:58,080 --> 00:18:00,000
top of the Matrix

286
00:18:00,000 --> 00:18:03,480
and then you can use the whole upper

287
00:18:03,480 --> 00:18:07,440
right part of the big Matrix for your

288
00:18:07,440 --> 00:18:10,220
next call

289
00:18:14,940 --> 00:18:16,860
and finally I would like to show some

290
00:18:16,860 --> 00:18:18,960
performance numbers these are numbers

291
00:18:18,960 --> 00:18:22,380
for uh uh measure around Sky Lake and

292
00:18:22,380 --> 00:18:24,360
coffee Lake

293
00:18:24,360 --> 00:18:27,960
as you can see the the first big row is

294
00:18:27,960 --> 00:18:30,860
showing numbers for previous paper

295
00:18:30,860 --> 00:18:33,960
implemented Row one

296
00:18:33,960 --> 00:18:37,520
and you can see that our numbers

297
00:18:37,520 --> 00:18:40,559
even for the numbers

298
00:18:40,559 --> 00:18:44,240
for the level five payment is

299
00:18:44,240 --> 00:18:46,860
these numbers are still much better than

300
00:18:46,860 --> 00:18:49,820
the previous paper

301
00:18:50,580 --> 00:18:53,340
okay and this is essentially all my talk

302
00:18:53,340 --> 00:18:56,460
and I'm willing to take any question if

303
00:18:56,460 --> 00:18:58,620
you have any

304
00:18:58,620 --> 00:19:01,320
um so yeah basically that's all thank

305
00:19:01,320 --> 00:19:03,860
you very much

306
00:19:10,280 --> 00:19:13,500
[Music]

307
00:19:13,500 --> 00:19:18,140
do we have any questions for Tom

308
00:19:19,440 --> 00:19:22,580
oh there is one there

309
00:19:29,460 --> 00:19:34,700
could you just remove the mask and stuff

310
00:19:37,679 --> 00:19:39,600
so the question is if there is the

311
00:19:39,600 --> 00:19:43,039
artifacts so the code it's public

312
00:19:43,039 --> 00:19:46,140
Ah that's a good question can you hear

313
00:19:46,140 --> 00:19:47,580
me

314
00:19:47,580 --> 00:19:51,840
yeah we hear you okay okay yeah so

315
00:19:51,840 --> 00:19:54,419
um yeah at this moment the code hasn't

316
00:19:54,419 --> 00:19:58,080
hasn't been put on online yet but the

317
00:19:58,080 --> 00:20:01,020
the uh our goal is to submit to super

318
00:20:01,020 --> 00:20:03,960
super cop eventually

319
00:20:03,960 --> 00:20:06,960
yeah I'm done well this is uh not not

320
00:20:06,960 --> 00:20:10,380
done yet but uh if you if anyone want to

321
00:20:10,380 --> 00:20:13,440
look at the want to access the code uh

322
00:20:13,440 --> 00:20:15,840
you can just write an email to to us and

323
00:20:15,840 --> 00:20:20,780
then we will just send it to you yeah

324
00:20:21,240 --> 00:20:25,760
okay do you have any other question

325
00:20:26,580 --> 00:20:31,919
okay so since we had a small problem and

326
00:20:31,919 --> 00:20:34,200
it's like we are going to go to the next

327
00:20:34,200 --> 00:20:36,900
talk thank you Tony let's just uh say

328
00:20:36,900 --> 00:20:39,000
thank you again

329
00:20:39,000 --> 00:20:41,720
thank you

330
00:20:57,260 --> 00:21:01,200
so for the next uh elk you're going to

331
00:21:01,200 --> 00:21:04,080
have also AVX or a fresh efficient

332
00:21:04,080 --> 00:21:06,000
implementations

333
00:21:06,000 --> 00:21:10,559
um of the uov and rainbow using avx2

334
00:21:10,559 --> 00:21:13,639
and uh

335
00:21:14,539 --> 00:21:18,440
it's going to give the talk

336
00:21:29,400 --> 00:21:32,720
thank you for introduction

337
00:21:32,960 --> 00:21:35,760
I introduced two efficient

338
00:21:35,760 --> 00:21:39,659
implementation method of rainbow and UOB

339
00:21:39,659 --> 00:21:43,280
using avx2

340
00:21:44,640 --> 00:21:48,900
this is how long outline of my

341
00:21:48,900 --> 00:21:53,340
uh first I gave some preliminaries on

342
00:21:53,340 --> 00:21:54,960
mqpkc

343
00:21:54,960 --> 00:22:00,000
and uh next I introduce our

344
00:22:00,000 --> 00:22:02,520
implementation results

345
00:22:02,520 --> 00:22:09,240
which do not apply our uh our methods

346
00:22:09,240 --> 00:22:13,620
next uh I introduce our applicant

347
00:22:13,620 --> 00:22:18,000
implementation method of UOB and Rainbow

348
00:22:18,000 --> 00:22:22,799
including blog batteries inversion and

349
00:22:22,799 --> 00:22:25,580
pre-computation

350
00:22:26,100 --> 00:22:29,360
they conclude my talk

351
00:22:33,480 --> 00:22:34,380
um

352
00:22:34,380 --> 00:22:39,000
for a key generation of mqpkc let F be

353
00:22:39,000 --> 00:22:42,600
an easily multiple quality map and S and

354
00:22:42,600 --> 00:22:45,600
T are invertible open maps

355
00:22:45,600 --> 00:22:49,080
then P which is computed by s stock

356
00:22:49,080 --> 00:22:53,460
Clips Circle T is the probably map and f

357
00:22:53,460 --> 00:22:58,400
s t are secret maps

358
00:23:00,659 --> 00:23:03,480
to generate a signature for given

359
00:23:03,480 --> 00:23:08,240
message n and H value H and commit s

360
00:23:08,240 --> 00:23:12,179
using this equation then SC is very

361
00:23:12,179 --> 00:23:15,440
signature for message m

362
00:23:15,659 --> 00:23:21,480
to verify uh a c signature s is a valid

363
00:23:21,480 --> 00:23:25,919
signature we compute H Prime like this

364
00:23:25,919 --> 00:23:28,919
if H equals to

365
00:23:28,919 --> 00:23:33,860
uh H prime it is a very disconnected

366
00:23:35,720 --> 00:23:38,580
recall these variables by vinegar

367
00:23:38,580 --> 00:23:42,299
variables and these variables by oil

368
00:23:42,299 --> 00:23:45,059
values and we denote3

369
00:23:45,059 --> 00:23:48,179
by the number of variable variables and

370
00:23:48,179 --> 00:23:51,480
all by the number of oil variables

371
00:23:51,480 --> 00:23:54,240
which are equal to the number of

372
00:23:54,240 --> 00:23:58,679
equations in central map f

373
00:23:58,679 --> 00:24:03,600
and N which is equals to beat plus o is

374
00:24:03,600 --> 00:24:06,659
the number of variables in F

375
00:24:06,659 --> 00:24:09,419
then each component function a product K

376
00:24:09,419 --> 00:24:10,799
of f

377
00:24:10,799 --> 00:24:14,179
is of this one

378
00:24:14,400 --> 00:24:17,700
uh it looks like like a general

379
00:24:17,700 --> 00:24:20,760
quadratic polynomial but there is no

380
00:24:20,760 --> 00:24:22,700
quadratic terms

381
00:24:22,700 --> 00:24:28,940
in oil variable times all the variables

382
00:24:30,980 --> 00:24:35,280
if we want to import F choose vinegar

383
00:24:35,280 --> 00:24:38,820
variables and random and substitute them

384
00:24:38,820 --> 00:24:43,140
into each Alpha bracket k then RED parts

385
00:24:43,140 --> 00:24:46,020
are converted to constants in this

386
00:24:46,020 --> 00:24:48,620
polynomial

387
00:24:58,679 --> 00:25:00,679
s

388
00:25:05,280 --> 00:25:07,260
sorry

389
00:25:07,260 --> 00:25:12,480
so because there are no I guess

390
00:25:12,480 --> 00:25:15,260


391
00:25:17,900 --> 00:25:20,900
thank you

392
00:25:23,400 --> 00:25:26,659
oh I'm sorry

393
00:25:27,980 --> 00:25:30,320
because

394
00:25:30,320 --> 00:25:33,900
there are no quadratic terms with all

395
00:25:33,900 --> 00:25:37,740
your variables in each prank okay

396
00:25:37,740 --> 00:25:41,940
so this polynomial uh

397
00:25:41,940 --> 00:25:45,779
replace the linear equation with oil

398
00:25:45,779 --> 00:25:48,320
variables

399
00:25:48,440 --> 00:25:52,559
so we get a linear system of all

400
00:25:52,559 --> 00:25:55,740
equations with all other variables

401
00:25:55,740 --> 00:25:58,799
which can be easily solvable in high

402
00:25:58,799 --> 00:26:01,260
probability

403
00:26:01,260 --> 00:26:04,559
but this system is not solvable then

404
00:26:04,559 --> 00:26:07,559
choose another vanilla variables and try

405
00:26:07,559 --> 00:26:09,860
again

406
00:26:13,559 --> 00:26:18,140
UV is an example of mq signature scheme

407
00:26:18,140 --> 00:26:22,080
using OV maps on Central map

408
00:26:22,080 --> 00:26:25,679
here on balanced means V is larger than

409
00:26:25,679 --> 00:26:27,179
all

410
00:26:27,179 --> 00:26:32,760
rainbow is a multi-layered UOB and is a

411
00:26:32,760 --> 00:26:37,500
finalist of this tqc standardization

412
00:26:37,700 --> 00:26:41,220
recently blue loans proposed a simple

413
00:26:41,220 --> 00:26:43,980
routine rainbow so that an equivalent

414
00:26:43,980 --> 00:26:46,500
key of rainbow we secrete the level 1

415
00:26:46,500 --> 00:26:49,860
can be recovered in 53 hours by your

416
00:26:49,860 --> 00:26:52,020
laptop

417
00:26:52,020 --> 00:26:54,840
because of this attack a rainbow team

418
00:26:54,840 --> 00:26:58,440
announced that they replaced the split

419
00:26:58,440 --> 00:27:00,900
level 1 parameters with security

420
00:27:00,900 --> 00:27:04,380
security level 3 parameters and security

421
00:27:04,380 --> 00:27:07,500
level three parameters with specifically

422
00:27:07,500 --> 00:27:09,900
verify parameters

423
00:27:09,900 --> 00:27:12,900
foreign

424
00:27:28,039 --> 00:27:32,640
ERS for example this parameter for

425
00:27:32,640 --> 00:27:34,980
security level one

426
00:27:34,980 --> 00:27:39,059
are vulnerable under this attack

427
00:27:39,059 --> 00:27:42,539
so we suggesting you suggested new UV

428
00:27:42,539 --> 00:27:45,080
parameter considering the complexity of

429
00:27:45,080 --> 00:27:48,720
the interstitial section attack

430
00:27:48,720 --> 00:27:50,940
very recently

431
00:27:50,940 --> 00:27:53,760
the rainbow team collaborated with

432
00:27:53,760 --> 00:27:57,480
balance suggested new UOB parameters at

433
00:27:57,480 --> 00:28:01,679
the same project had been proposed so

434
00:28:01,679 --> 00:28:03,539
that their parameters are slightly

435
00:28:03,539 --> 00:28:08,299
slightly different from our parameters

436
00:28:08,940 --> 00:28:12,299
for example our employmentation of

437
00:28:12,299 --> 00:28:15,000
rainbow is based on source code of

438
00:28:15,000 --> 00:28:19,020
rainbow team which are submitted in this

439
00:28:19,020 --> 00:28:22,080
difficulty standardization

440
00:28:22,080 --> 00:28:25,559
so our parameters in our paper is same

441
00:28:25,559 --> 00:28:28,380
with these parameters but we apply

442
00:28:28,380 --> 00:28:30,539
parameter changes

443
00:28:30,539 --> 00:28:34,640
mentioned in above slide

444
00:28:35,159 --> 00:28:38,340
so the following table describes our

445
00:28:38,340 --> 00:28:40,799
parameters

446
00:28:40,799 --> 00:28:45,000
that we select Q equal to 256 for all

447
00:28:45,000 --> 00:28:47,960
our parameters

448
00:28:49,039 --> 00:28:53,279
similarly the rainbow we apply t as of

449
00:28:53,279 --> 00:28:56,720
to this form for UOB

450
00:28:56,720 --> 00:29:00,120
that uh General assignment

451
00:29:00,120 --> 00:29:03,539
you should just solve our results and if

452
00:29:03,539 --> 00:29:05,940
each result in this table is an average

453
00:29:05,940 --> 00:29:10,919
of 10 000 measurements for each function

454
00:29:10,919 --> 00:29:13,159
under this

455
00:29:13,159 --> 00:29:16,760
implementation environment

456
00:29:19,020 --> 00:29:21,500
oh

457
00:29:21,600 --> 00:29:25,140
our information implementation users on

458
00:29:25,140 --> 00:29:28,700
signing process is dominated by both

459
00:29:28,700 --> 00:29:32,340
bothly terminated by these two parts the

460
00:29:32,340 --> 00:29:35,940
new value substitutions and computation

461
00:29:35,940 --> 00:29:40,340
of LSP inverse

462
00:29:40,860 --> 00:29:43,459
foreign

463
00:29:47,179 --> 00:29:51,240
ters into the center of polynomial and

464
00:29:51,240 --> 00:29:53,940
then we need to compute the coefficient

465
00:29:53,940 --> 00:29:59,159
Matrix RS3 and constant term of the

466
00:29:59,159 --> 00:30:00,840
linear system

467
00:30:00,840 --> 00:30:04,760
which will be we will obtain

468
00:30:04,760 --> 00:30:07,980
and next we'll require required to

469
00:30:07,980 --> 00:30:11,100
compute the inverse Matrix of this

470
00:30:11,100 --> 00:30:13,200
coefficient Matrix

471
00:30:13,200 --> 00:30:16,039
foreign

472
00:30:17,720 --> 00:30:19,580
like this

473
00:30:19,580 --> 00:30:22,320
first one is the prolong Matrix

474
00:30:22,320 --> 00:30:24,659
inversion

475
00:30:24,659 --> 00:30:27,419
we replace we can replace an inversion

476
00:30:27,419 --> 00:30:31,020
of M by m Matrix into two inversions of

477
00:30:31,020 --> 00:30:34,860
M over 2 times M over 2 Matrix when m is

478
00:30:34,860 --> 00:30:36,720
equal

479
00:30:36,720 --> 00:30:40,320
then and the other one is free

480
00:30:40,320 --> 00:30:42,419
computation

481
00:30:42,419 --> 00:30:45,360
these two parts are can be pretty

482
00:30:45,360 --> 00:30:48,240
competitive and hence

483
00:30:48,240 --> 00:30:53,299
can be omitted in actual signing

484
00:30:57,779 --> 00:31:01,559
first one is problematic system we write

485
00:31:01,559 --> 00:31:05,399
R by this polarized Matrix

486
00:31:05,399 --> 00:31:10,640
where a b c and T are blocked

487
00:31:10,640 --> 00:31:14,299
diagonal matrices of same size

488
00:31:14,299 --> 00:31:18,779
if a is non-singular then R is in

489
00:31:18,779 --> 00:31:22,620
multiple if when only if this Matrix is

490
00:31:22,620 --> 00:31:23,820
invertible

491
00:31:23,820 --> 00:31:27,360
and our inverse can be returned of this

492
00:31:27,360 --> 00:31:29,340
form

493
00:31:29,340 --> 00:31:32,720
if T is not singular then R is

494
00:31:32,720 --> 00:31:35,640
importantly if this Matrix is immutable

495
00:31:35,640 --> 00:31:37,919
and R inverse

496
00:31:37,919 --> 00:31:42,260
is expressed like this

497
00:31:44,100 --> 00:31:45,899
so uh

498
00:31:45,899 --> 00:31:49,640
to come Computing this value

499
00:31:49,640 --> 00:31:52,980
requires two inversions and two matrix

500
00:31:52,980 --> 00:31:55,320
multiplication of heights half size

501
00:31:55,320 --> 00:32:00,559
block Matrix series and four flow Matrix

502
00:32:00,559 --> 00:32:03,000
battery spectral product

503
00:32:03,000 --> 00:32:06,779
where when K is even and I Pi is given

504
00:32:06,779 --> 00:32:09,140
like this

505
00:32:11,539 --> 00:32:16,260
is that we using the ldu decomposition

506
00:32:16,260 --> 00:32:20,940
of R of this form then R inverses is

507
00:32:20,940 --> 00:32:23,779
pressed like this

508
00:32:26,640 --> 00:32:30,120
on inversion or M by m Matrix can be

509
00:32:30,120 --> 00:32:33,539
replaced by two importance of two M over

510
00:32:33,539 --> 00:32:37,200
2 times M over 2 matrices in a similar

511
00:32:37,200 --> 00:32:38,580
manner

512
00:32:38,580 --> 00:32:43,799
it shows two inversions in uh M over 2

513
00:32:43,799 --> 00:32:46,320
times M over 2 matrices can be replaced

514
00:32:46,320 --> 00:32:51,539
by two inversions of M over 4 by M over

515
00:32:51,539 --> 00:32:57,140
4 matrices if m is a multiple of four

516
00:32:57,360 --> 00:33:02,159
if we write K by 2 to the L times K

517
00:33:02,159 --> 00:33:05,399
Prime where L is a positive integer and

518
00:33:05,399 --> 00:33:08,520
K Prime is an audio integer you can

519
00:33:08,520 --> 00:33:12,360
apply the PMI air times

520
00:33:12,360 --> 00:33:19,279
we call this error by a depth of BMI

521
00:33:19,440 --> 00:33:22,440
we cannot use it inspect that early

522
00:33:22,440 --> 00:33:24,840
iterations will always be effective

523
00:33:24,840 --> 00:33:28,140
because 2 to the early inversions of

524
00:33:28,140 --> 00:33:33,260
this size of matrices are required

525
00:33:35,100 --> 00:33:39,059
this table describes uh the

526
00:33:39,059 --> 00:33:42,179
implementation results or PMI on

527
00:33:42,179 --> 00:33:46,320
batteries side of this size

528
00:33:46,320 --> 00:33:49,679
you can see that the larger the size the

529
00:33:49,679 --> 00:33:52,559
greater the performance Improvement

530
00:33:52,559 --> 00:33:56,100
especially it's excellent Improvement in

531
00:33:56,100 --> 00:34:00,059
the case of 64 and 96

532
00:34:00,059 --> 00:34:03,779
due to the fact that the multiples of

533
00:34:03,779 --> 00:34:08,040
33 32 are optimal parameters

534
00:34:08,040 --> 00:34:10,320
so

535
00:34:10,320 --> 00:34:12,418
optimal parameters which are suitable

536
00:34:12,418 --> 00:34:13,500
for

537
00:34:13,500 --> 00:34:19,320
the pap V2 X2 vectorization

538
00:34:19,320 --> 00:34:21,859
foreign

539
00:34:21,980 --> 00:34:25,859
if you want to apply BMI to UOB and

540
00:34:25,859 --> 00:34:30,379
rainbow signing we write error as free

541
00:34:30,379 --> 00:34:33,659
which is the coefficient Matrix of

542
00:34:33,659 --> 00:34:36,899
linear system from the vector clinical

543
00:34:36,899 --> 00:34:39,859
Vector substitution

544
00:34:40,080 --> 00:34:45,800
we write LS3 of like this clockwise

545
00:34:45,800 --> 00:34:50,280
matrices Matrix and apply the BMI on

546
00:34:50,280 --> 00:34:54,000
this clockwise Matrix

547
00:34:54,000 --> 00:34:58,020
if a were this Matrix is not immutable

548
00:34:58,020 --> 00:35:01,339
then choose another

549
00:35:01,339 --> 00:35:04,859
generator values and try again but uh

550
00:35:04,859 --> 00:35:07,200
these matrices are

551
00:35:07,200 --> 00:35:11,240
invertible in high probability

552
00:35:14,240 --> 00:35:17,400
this table describes our implementation

553
00:35:17,400 --> 00:35:18,839
rejoice

554
00:35:18,839 --> 00:35:22,520
on BMI method

555
00:35:23,040 --> 00:35:25,800
compared to you will be implemented in

556
00:35:25,800 --> 00:35:29,460
calcium illumination and by the using

557
00:35:29,460 --> 00:35:33,780
the PMI with depth 1 we can obtain speed

558
00:35:33,780 --> 00:35:37,859
of this ratio uh three categories

559
00:35:37,859 --> 00:35:41,819
it breaks effectively

560
00:35:44,460 --> 00:35:47,900
the best I introduce our

561
00:35:47,900 --> 00:35:50,420
pre-completation method

562
00:35:50,420 --> 00:35:54,720
the general idea of using an offline and

563
00:35:54,720 --> 00:35:57,300
online phase was supposed to introducing

564
00:35:57,300 --> 00:35:59,339
this paper

565
00:35:59,339 --> 00:36:04,260
in online phase of signing or uov

566
00:36:04,260 --> 00:36:05,660
[Music]

567
00:36:05,660 --> 00:36:09,440
substitutes S3

568
00:36:13,579 --> 00:36:18,900
k then we get a linear steam system of

569
00:36:18,900 --> 00:36:21,780
coefficient batteries lsv

570
00:36:21,780 --> 00:36:28,079
of all equations with all variables

571
00:36:28,079 --> 00:36:32,579
then we compute the inverse of LS3

572
00:36:32,579 --> 00:36:36,180
if it is not importable then go back to

573
00:36:36,180 --> 00:36:38,160
the first step

574
00:36:38,160 --> 00:36:41,700
then this Tuple is the precognitive

575
00:36:41,700 --> 00:36:43,859
value

576
00:36:43,859 --> 00:36:48,720
in online pace of UOB

577
00:36:48,720 --> 00:36:52,319
Orlando scwh

578
00:36:55,280 --> 00:36:58,920
using this pre-computed value complete

579
00:36:58,920 --> 00:37:01,859
RPA like this

580
00:37:01,859 --> 00:37:04,980
and we compute Sigma

581
00:37:04,980 --> 00:37:07,440
like this then

582
00:37:07,440 --> 00:37:12,500
this is a signature for message n

583
00:37:15,260 --> 00:37:19,260
offline case of first layer of rainbow

584
00:37:19,260 --> 00:37:21,599
is similar with UOB

585
00:37:21,599 --> 00:37:24,800
but some clinical variables

586
00:37:24,800 --> 00:37:27,900
or from this when you finish up your

587
00:37:27,900 --> 00:37:30,300
address of the second layer

588
00:37:30,300 --> 00:37:34,380
we see are actually only variables in

589
00:37:34,380 --> 00:37:36,420
first layer

590
00:37:36,420 --> 00:37:38,880
are determined depending one or HD

591
00:37:38,880 --> 00:37:41,280
message h

592
00:37:41,280 --> 00:37:44,700
so uh free computation in the second

593
00:37:44,700 --> 00:37:46,859
layer is limited

594
00:37:46,859 --> 00:37:50,760
and only the following variable values

595
00:37:50,760 --> 00:37:54,020
are pre-computable

596
00:37:56,599 --> 00:38:01,339
so uh the following table describes our

597
00:38:01,339 --> 00:38:04,619
implementation results on pre using free

598
00:38:04,619 --> 00:38:06,079
computation

599
00:38:06,079 --> 00:38:08,300
this row

600
00:38:08,300 --> 00:38:10,220
describes

601
00:38:10,220 --> 00:38:13,200
signing without pre-computation and this

602
00:38:13,200 --> 00:38:15,079
row describes

603
00:38:15,079 --> 00:38:18,660
signing with really precomputation you

604
00:38:18,660 --> 00:38:21,240
can see that there are significant

605
00:38:21,240 --> 00:38:23,899
Improvement

606
00:38:25,980 --> 00:38:28,560
it's clear that a pretty competitive

607
00:38:28,560 --> 00:38:29,940
values

608
00:38:29,940 --> 00:38:34,740
are should be stored securely if it is

609
00:38:34,740 --> 00:38:37,560
not secure stored securely

610
00:38:37,560 --> 00:38:40,940
then we show that

611
00:38:40,940 --> 00:38:43,880
the secret key of UOB

612
00:38:43,880 --> 00:38:45,900
is computed

613
00:38:45,900 --> 00:38:50,660
completely recovered in polynomial time

614
00:38:53,040 --> 00:38:56,160
and pretty competitive value should not

615
00:38:56,160 --> 00:39:02,280
be reused in signing if it is used we

616
00:39:02,280 --> 00:39:05,220
can recover an equivalent key in

617
00:39:05,220 --> 00:39:09,200
polynomial time with high probability

618
00:39:09,920 --> 00:39:13,200
we presented two efficient

619
00:39:13,200 --> 00:39:16,740
implementation method to improving to

620
00:39:16,740 --> 00:39:19,920
improve signing of UOB and Rainbow

621
00:39:19,920 --> 00:39:23,220
and we gave some implementation results

622
00:39:23,220 --> 00:39:25,920
on our method

623
00:39:25,920 --> 00:39:30,420
first one is block using develop Matrix

624
00:39:30,420 --> 00:39:31,560
in version

625
00:39:31,560 --> 00:39:34,500
which improves the process to solving

626
00:39:34,500 --> 00:39:37,500
the linear system

627
00:39:37,500 --> 00:39:40,079
and the other one is free computation

628
00:39:40,079 --> 00:39:43,339
which improves the process of

629
00:39:43,339 --> 00:39:47,040
substituting infinitely use and solving

630
00:39:47,040 --> 00:39:49,579
the obtained linear system

631
00:39:49,579 --> 00:39:53,660
thank you for your attention

632
00:39:58,680 --> 00:40:00,839
thank you

633
00:40:00,839 --> 00:40:04,020
okay it's work uh thank you do we have

634
00:40:04,020 --> 00:40:06,380
questions

635
00:40:07,619 --> 00:40:10,859
okay so why are people set do we have

636
00:40:10,859 --> 00:40:13,880
questions here

637
00:40:15,740 --> 00:40:20,419
okay I go and two

638
00:40:25,880 --> 00:40:29,820
so thank you for the talk

639
00:40:29,820 --> 00:40:33,240
um could I uh inquire whether

640
00:40:33,240 --> 00:40:39,060
the precomputation and so how does this

641
00:40:39,060 --> 00:40:40,680
uh

642
00:40:40,680 --> 00:40:45,240
work if you run into a single singular

643
00:40:45,240 --> 00:40:47,640
set of equations uh

644
00:40:47,640 --> 00:40:51,720
is is it likely to beat to something

645
00:40:51,720 --> 00:40:54,180
like a side trender

646
00:40:54,180 --> 00:40:57,359
uh sorry

647
00:40:57,359 --> 00:41:00,680
let's go against please

648
00:41:05,660 --> 00:41:08,540
I guess he didn't hear me

649
00:41:08,540 --> 00:41:12,960
so I mean when you um pre-compute I mean

650
00:41:12,960 --> 00:41:16,079
it's for a specific set of vinegars

651
00:41:16,079 --> 00:41:20,400
right so is it likely to is it possible

652
00:41:20,400 --> 00:41:23,220
to make any information as a result of

653
00:41:23,220 --> 00:41:26,339
uh like your computation and ending up

654
00:41:26,339 --> 00:41:27,540
with uh

655
00:41:27,540 --> 00:41:29,220
uh

656
00:41:29,220 --> 00:41:32,820
singular set of equations

657
00:41:32,820 --> 00:41:35,959
[Music]

658
00:41:45,680 --> 00:41:49,399
single singular set

659
00:41:49,619 --> 00:41:52,320
I think I think that we can you can

660
00:41:52,320 --> 00:41:55,200
discuss with uh we in in like offline

661
00:41:55,200 --> 00:41:58,020
because we have a short time yeah so

662
00:41:58,020 --> 00:42:00,359
thank you again for the for the

663
00:42:00,359 --> 00:42:02,579
presentation let's just thank

664
00:42:02,579 --> 00:42:05,180
foreign

665
00:42:12,980 --> 00:42:15,780
polynomial multiplication on embedded

666
00:42:15,780 --> 00:42:17,640
vector architectures and it's going to

667
00:42:17,640 --> 00:42:21,379
be honor that's going to give the talk

668
00:42:21,960 --> 00:42:23,820
yeah

669
00:42:23,820 --> 00:42:26,400
you can play but you're going to talk

670
00:42:26,400 --> 00:42:27,740
with them

671
00:42:27,740 --> 00:42:32,459
or do we want this yes

672
00:42:34,619 --> 00:42:37,700
um what does it means

673
00:42:37,700 --> 00:42:40,799
[Music]

674
00:42:43,260 --> 00:42:44,940
um yeah

675
00:42:44,940 --> 00:42:47,060
thank you

676
00:42:47,060 --> 00:42:50,040
okay wonderful thanks everyone for for

677
00:42:50,040 --> 00:42:51,900
still being here

678
00:42:51,900 --> 00:42:53,880
um so I'm going to talk about predominal

679
00:42:53,880 --> 00:42:55,500
multiplication and embedded Vector

680
00:42:55,500 --> 00:42:57,240
architectures this joint work with micro

681
00:42:57,240 --> 00:42:58,859
League um Joseph

682
00:42:58,859 --> 00:43:01,380
um from arm and Jose Angelman and Ingrid

683
00:43:01,380 --> 00:43:03,119
from from classic

684
00:43:03,119 --> 00:43:06,420
so um first some was some motivation and

685
00:43:06,420 --> 00:43:08,460
context the talk is primarily about the

686
00:43:08,460 --> 00:43:11,760
M45 Vector extension mve or helium which

687
00:43:11,760 --> 00:43:13,800
is a simdi extension for embedded

688
00:43:13,800 --> 00:43:15,780
microcontrollers which has been

689
00:43:15,780 --> 00:43:20,040
implemented on m55 and m85 so far and

690
00:43:20,040 --> 00:43:22,200
the research question we want to start

691
00:43:22,200 --> 00:43:24,420
is um quite simple we want to understand

692
00:43:24,420 --> 00:43:27,119
to what extent we can leverage mve to

693
00:43:27,119 --> 00:43:29,040
speed up implementations of post Quantum

694
00:43:29,040 --> 00:43:30,660
crypto

695
00:43:30,660 --> 00:43:33,000
and to just make it concrete

696
00:43:33,000 --> 00:43:36,359
um we focus first on tune cook and

697
00:43:36,359 --> 00:43:38,700
entity-based implementations of saber on

698
00:43:38,700 --> 00:43:40,579
cortex m55

699
00:43:40,579 --> 00:43:43,980
but I know that the methods we apply do

700
00:43:43,980 --> 00:43:45,900
apply more generally

701
00:43:45,900 --> 00:43:48,060
so the agenda is I'm going to say a

702
00:43:48,060 --> 00:43:49,740
little bit about Cindy in general and

703
00:43:49,740 --> 00:43:52,400
MBE in particular

704
00:43:52,400 --> 00:43:55,740
we look at the algorithmic improvements

705
00:43:55,740 --> 00:43:59,540
that we found for tungkook and the NTT

706
00:43:59,660 --> 00:44:03,078
we have to stop

707
00:44:03,119 --> 00:44:06,740
that should other sequence

708
00:44:22,319 --> 00:44:24,660
now here you can see

709
00:44:24,660 --> 00:44:27,020
yeah

710
00:44:28,400 --> 00:44:31,079
thank you okay

711
00:44:31,079 --> 00:44:32,520
um and finally we look at our

712
00:44:32,520 --> 00:44:33,900
implementation and the performance

713
00:44:33,900 --> 00:44:35,819
results that we obtain

714
00:44:35,819 --> 00:44:38,599
uh

715
00:44:38,700 --> 00:44:41,700
so um let's recall what CMD actually is

716
00:44:41,700 --> 00:44:44,099
so the idea of similes to add a set of

717
00:44:44,099 --> 00:44:46,140
very large registers that you can view

718
00:44:46,140 --> 00:44:49,260
as vectors of elements of a fixed length

719
00:44:49,260 --> 00:44:52,680
so a vector of length 128 bits you can

720
00:44:52,680 --> 00:44:54,720
register of that length you can view as

721
00:44:54,720 --> 00:44:56,880
the length eight Vector of 16-bit

722
00:44:56,880 --> 00:44:59,040
elements or length 4 Vector of 32-bit

723
00:44:59,040 --> 00:45:01,079
elements and then you have instructions

724
00:45:01,079 --> 00:45:03,119
like the add or vmal which operate

725
00:45:03,119 --> 00:45:05,940
usually on those Lanes independently and

726
00:45:05,940 --> 00:45:07,440
hence the name single instruction

727
00:45:07,440 --> 00:45:10,020
multiple data Sim team and the first two

728
00:45:10,020 --> 00:45:11,640
talks we have seen they're focused on

729
00:45:11,640 --> 00:45:13,800
apx2 which is one example of SMD

730
00:45:13,800 --> 00:45:17,460
extension for x86 and in the arm world

731
00:45:17,460 --> 00:45:21,300
we have Neon versus E2 this is for the a

732
00:45:21,300 --> 00:45:23,700
profile spectrum and this talk is about

733
00:45:23,700 --> 00:45:27,260
mve which is for the M profile Spectrum

734
00:45:27,260 --> 00:45:30,180
so um what are the design considerations

735
00:45:30,180 --> 00:45:33,480
going into simdi on mic controllers yeah

736
00:45:33,480 --> 00:45:35,040
we want to leverage the performance

737
00:45:35,040 --> 00:45:37,140
promise of CMD

738
00:45:37,140 --> 00:45:38,819
um but taking into account the tight

739
00:45:38,819 --> 00:45:40,380
power and area constraints that we have

740
00:45:40,380 --> 00:45:43,619
on microcontrollers and um what do we

741
00:45:43,619 --> 00:45:45,599
want concretely say if our Baseline is

742
00:45:45,599 --> 00:45:47,940
the cortex M4 we would like to have at

743
00:45:47,940 --> 00:45:50,940
least 4X speed up for typical digit

744
00:45:50,940 --> 00:45:53,520
signal processing applications

745
00:45:53,520 --> 00:45:56,160
so at first you might think why can't we

746
00:45:56,160 --> 00:45:58,319
just add neon it's like why can't we do

747
00:45:58,319 --> 00:46:00,780
what we did on the a profile but if you

748
00:46:00,780 --> 00:46:02,940
think about it for um

749
00:46:02,940 --> 00:46:05,460
uh for a moment it's not at all clear

750
00:46:05,460 --> 00:46:08,040
that this makes any sense because

751
00:46:08,040 --> 00:46:09,780
um it's kind of a high performance

752
00:46:09,780 --> 00:46:11,520
feature with high requirements that you

753
00:46:11,520 --> 00:46:12,839
try to fit on an embedded

754
00:46:12,839 --> 00:46:15,780
microcontroller and to make it even more

755
00:46:15,780 --> 00:46:18,780
concrete for a 4X speed up say compared

756
00:46:18,780 --> 00:46:21,380
to Cortex M4 we would need at least

757
00:46:21,380 --> 00:46:23,760
128-bit vectors

758
00:46:23,760 --> 00:46:26,099
but at the same time we don't want to

759
00:46:26,099 --> 00:46:28,500
force any CPU implementing helium to

760
00:46:28,500 --> 00:46:33,000
have say 4 32-bit alus or a 128-bit data

761
00:46:33,000 --> 00:46:35,400
path to memory that would be too much to

762
00:46:35,400 --> 00:46:37,260
ask and also if you look at the number

763
00:46:37,260 --> 00:46:39,240
of registers it's too much we can't ask

764
00:46:39,240 --> 00:46:41,880
for say 32 registers as we have it in

765
00:46:41,880 --> 00:46:43,160
neon

766
00:46:43,160 --> 00:46:46,700
and the focus that mve um chooses is to

767
00:46:46,700 --> 00:46:50,040
emphasize better usage of resources

768
00:46:50,040 --> 00:46:51,839
rather than necessarily gaining the

769
00:46:51,839 --> 00:46:54,060
amount of Hardware that you have and we

770
00:46:54,060 --> 00:46:55,680
are going to see multiple examples for

771
00:46:55,680 --> 00:46:57,900
this and the prime one is instruction

772
00:46:57,900 --> 00:47:01,380
overlapping so in mve

773
00:47:01,380 --> 00:47:03,420
you have instructions Vector

774
00:47:03,420 --> 00:47:05,160
instructions which can run for multiple

775
00:47:05,160 --> 00:47:06,839
Cycles but they are architecturally

776
00:47:06,839 --> 00:47:09,660
allowed to overlap so what this means is

777
00:47:09,660 --> 00:47:11,040
that if you look at the architecture

778
00:47:11,040 --> 00:47:13,500
specification of mve the typical mve

779
00:47:13,500 --> 00:47:15,599
instruction is broken into four steps

780
00:47:15,599 --> 00:47:18,180
called beats and the CPU implementing

781
00:47:18,180 --> 00:47:21,420
mve can execute one two or four beats

782
00:47:21,420 --> 00:47:24,180
per cycle m55 for example executes two

783
00:47:24,180 --> 00:47:25,859
beats per cycle

784
00:47:25,859 --> 00:47:28,380
and then the architecture says that the

785
00:47:28,380 --> 00:47:29,940
last two beats of an instruction they

786
00:47:29,940 --> 00:47:31,800
can overlap with the first two beats of

787
00:47:31,800 --> 00:47:34,020
the next instruction they can they don't

788
00:47:34,020 --> 00:47:36,060
have to it usually depends on what

789
00:47:36,060 --> 00:47:38,940
execution resources they rely on

790
00:47:38,940 --> 00:47:41,880
and two things a noteworthy here

791
00:47:41,880 --> 00:47:45,060
um this is architectural overlapping

792
00:47:45,060 --> 00:47:47,099
um so which saves the the

793
00:47:47,099 --> 00:47:49,380
microcontroller the the cost of

794
00:47:49,380 --> 00:47:52,260
maintaining an illusion of atomicity so

795
00:47:52,260 --> 00:47:53,940
if an exception handle hits this can be

796
00:47:53,940 --> 00:47:55,500
in the middle of an instruction that's

797
00:47:55,500 --> 00:47:56,460
okay

798
00:47:56,460 --> 00:47:59,339
and also note that instruction uh

799
00:47:59,339 --> 00:48:01,020
overlapping is not the same as dual

800
00:48:01,020 --> 00:48:02,700
issuing we still only issue one

801
00:48:02,700 --> 00:48:05,720
instruction per cycle

802
00:48:06,240 --> 00:48:07,800
um an example will hopefully make this

803
00:48:07,800 --> 00:48:10,380
very clear let's say we have a 64-bit

804
00:48:10,380 --> 00:48:14,460
data path and we um so 128-bit load

805
00:48:14,460 --> 00:48:16,859
would take two cycles and let's say we

806
00:48:16,859 --> 00:48:19,380
have two 32-bit alus so Vector

807
00:48:19,380 --> 00:48:21,720
arithmetic will take two cycles but

808
00:48:21,720 --> 00:48:23,880
arithmetic and load stores they can

809
00:48:23,880 --> 00:48:25,380
overlap because they run on different

810
00:48:25,380 --> 00:48:27,780
units then we can achieve something as

811
00:48:27,780 --> 00:48:29,339
you see in this picture where you have

812
00:48:29,339 --> 00:48:31,619
an alternation of loads and multiply

813
00:48:31,619 --> 00:48:33,900
accumulates Each of which takes two

814
00:48:33,900 --> 00:48:37,140
cycles but they are overlap by half and

815
00:48:37,140 --> 00:48:38,640
therefore you still reach an instruction

816
00:48:38,640 --> 00:48:42,660
per cycle ratio of one

817
00:48:42,660 --> 00:48:45,000
and if you look at it you realize if you

818
00:48:45,000 --> 00:48:47,160
compare this within cortex M4 this

819
00:48:47,160 --> 00:48:49,260
scenario here we have doubled the

820
00:48:49,260 --> 00:48:51,660
resources twice the data path

821
00:48:51,660 --> 00:48:53,940
twice the amount of Al use but we get

822
00:48:53,940 --> 00:48:55,260
four times the speed depth simply

823
00:48:55,260 --> 00:48:58,700
because we made better use of it

824
00:48:59,119 --> 00:49:01,680
and um this idea of instruction

825
00:49:01,680 --> 00:49:03,960
overlapping has a profound implications

826
00:49:03,960 --> 00:49:06,359
on how you design the architecture so if

827
00:49:06,359 --> 00:49:08,579
you look at the specification of MBE you

828
00:49:08,579 --> 00:49:09,900
will find that the instruction is

829
00:49:09,900 --> 00:49:13,319
typically designed to describe 128 bits

830
00:49:13,319 --> 00:49:16,440
of work in an intuitive sense so if you

831
00:49:16,440 --> 00:49:17,760
look at neon you have complex

832
00:49:17,760 --> 00:49:20,220
instructions like vld4 which operate on

833
00:49:20,220 --> 00:49:24,240
512 bits you don't see this in mve it's

834
00:49:24,240 --> 00:49:26,040
usually explicitly broken down in

835
00:49:26,040 --> 00:49:28,740
multiple instructions which do 128 bits

836
00:49:28,740 --> 00:49:30,420
of work at a time

837
00:49:30,420 --> 00:49:33,180
and they usually operate from high to

838
00:49:33,180 --> 00:49:35,520
from low to High bits that's why you

839
00:49:35,520 --> 00:49:37,260
have some certain asymmetry in the

840
00:49:37,260 --> 00:49:38,880
instructions that you find you'll find

841
00:49:38,880 --> 00:49:40,980
the long left shift but you won't find

842
00:49:40,980 --> 00:49:44,540
the long right shift for example

843
00:49:45,359 --> 00:49:48,000
um yeah but as a programmer why why

844
00:49:48,000 --> 00:49:50,880
should I know about this the main thing

845
00:49:50,880 --> 00:49:52,740
really to take away if you ever consider

846
00:49:52,740 --> 00:49:55,740
coding with mve and I I hope you do

847
00:49:55,740 --> 00:49:58,560
um the main rule is oops something went

848
00:49:58,560 --> 00:50:00,060
wrong

849
00:50:00,060 --> 00:50:02,640
the main rule is that you should

850
00:50:02,640 --> 00:50:04,880
interleave different kinds of operations

851
00:50:04,880 --> 00:50:07,740
because that's the way you have a chance

852
00:50:07,740 --> 00:50:09,900
to leverage this instruction overlapping

853
00:50:09,900 --> 00:50:12,839
whereas if you block operations of the

854
00:50:12,839 --> 00:50:15,119
same kind then they won't overlap

855
00:50:15,119 --> 00:50:16,859
because they rely on the same execution

856
00:50:16,859 --> 00:50:18,680
resource

857
00:50:18,680 --> 00:50:22,020
and very concretely if you code for m55

858
00:50:22,020 --> 00:50:24,000
you can roughly think of three execution

859
00:50:24,000 --> 00:50:27,300
units for load store for addition and

860
00:50:27,300 --> 00:50:29,220
logical operation and for multiplication

861
00:50:29,220 --> 00:50:30,599
so

862
00:50:30,599 --> 00:50:33,240
um if you look at uh Snippets as you see

863
00:50:33,240 --> 00:50:35,700
it here on the left some this is very

864
00:50:35,700 --> 00:50:38,220
bad it's a nonsensical code but it

865
00:50:38,220 --> 00:50:41,099
proves the point I hope you see

866
00:50:41,099 --> 00:50:43,319
additions multiplies and loads and they

867
00:50:43,319 --> 00:50:45,000
are blocked together this will be very

868
00:50:45,000 --> 00:50:47,700
very poor and whereas on the right you

869
00:50:47,700 --> 00:50:49,500
see a reorder in such a way that you

870
00:50:49,500 --> 00:50:51,059
never have two instructions of the same

871
00:50:51,059 --> 00:50:53,040
kind back to back and this will work

872
00:50:53,040 --> 00:50:56,460
well so you can already see that um

873
00:50:56,460 --> 00:50:58,800
if you code an assembly it can be a bit

874
00:50:58,800 --> 00:51:04,160
of an effort but um usually it works

875
00:51:04,319 --> 00:51:06,240
um and the second point where you make

876
00:51:06,240 --> 00:51:08,040
better use of existing resources is

877
00:51:08,040 --> 00:51:09,780
about the size of the vector file you

878
00:51:09,780 --> 00:51:12,000
have eight Vector registers compared to

879
00:51:12,000 --> 00:51:14,460
32 and neon that's not very much you

880
00:51:14,460 --> 00:51:17,280
might say but you have scalar Vector

881
00:51:17,280 --> 00:51:19,079
instructions where you have vector and

882
00:51:19,079 --> 00:51:21,420
general repurpose register arguments and

883
00:51:21,420 --> 00:51:23,280
that allows to allows you to balance

884
00:51:23,280 --> 00:51:24,720
things and make do with just eight

885
00:51:24,720 --> 00:51:27,680
Vector registers

886
00:51:28,740 --> 00:51:30,180
um yeah

887
00:51:30,180 --> 00:51:33,000
so next we switch PS3 just look at some

888
00:51:33,000 --> 00:51:34,619
algorithmic improvements that we found

889
00:51:34,619 --> 00:51:38,099
for for saber

890
00:51:38,099 --> 00:51:40,020
um as you probably know cyber relies on

891
00:51:40,020 --> 00:51:42,780
some cyclotomic polynomial arithmetic

892
00:51:42,780 --> 00:51:45,059
where the coefficients are have

893
00:51:45,059 --> 00:51:47,940
Precision less than 16 Bits And there

894
00:51:47,940 --> 00:51:49,920
are two primary means apart from just

895
00:51:49,920 --> 00:51:51,660
the plain school book multiplication by

896
00:51:51,660 --> 00:51:53,700
by which you can Implement such a

897
00:51:53,700 --> 00:51:56,660
convolution of polynomials and that's

898
00:51:56,660 --> 00:51:59,480
Uber and the number theoretic transform

899
00:51:59,480 --> 00:52:02,339
and both have in common that they are

900
00:52:02,339 --> 00:52:04,619
examples of multiplication by evaluation

901
00:52:04,619 --> 00:52:06,780
which means that if you want to multiply

902
00:52:06,780 --> 00:52:09,359
two polynomials you both evaluate them

903
00:52:09,359 --> 00:52:12,180
and at a fixed set of points you

904
00:52:12,180 --> 00:52:14,099
multiply those evaluations and then you

905
00:52:14,099 --> 00:52:16,319
interpolate back the product that's the

906
00:52:16,319 --> 00:52:18,660
blueprint that they both use but the

907
00:52:18,660 --> 00:52:20,520
choice of points the number of points

908
00:52:20,520 --> 00:52:22,500
that's different and you see some

909
00:52:22,500 --> 00:52:24,119
implications of what's good and bad

910
00:52:24,119 --> 00:52:27,300
about NTT versus toonkook in this table

911
00:52:27,300 --> 00:52:30,000
and I want to highlight the two bad

912
00:52:30,000 --> 00:52:33,300
things about tomb cook which is that um

913
00:52:33,300 --> 00:52:35,880
you you evaluate and more points than

914
00:52:35,880 --> 00:52:37,859
the degree of your polynomial so your

915
00:52:37,859 --> 00:52:40,079
the size of your data expands as you do

916
00:52:40,079 --> 00:52:42,420
this but also at the if you do the base

917
00:52:42,420 --> 00:52:44,160
multiplication the multiplication of

918
00:52:44,160 --> 00:52:46,319
those evaluations

919
00:52:46,319 --> 00:52:49,020
um they will they are um doubling the

920
00:52:49,020 --> 00:52:51,720
size of the polynomials you still have

921
00:52:51,720 --> 00:52:55,380
and whereas in the NTT based approach

922
00:52:55,380 --> 00:52:57,119
um the number of points is the degree

923
00:52:57,119 --> 00:52:59,280
and you go down to scalars and there's

924
00:52:59,280 --> 00:53:02,040
no expansion so that's really the main

925
00:53:02,040 --> 00:53:04,319
difference but what I want to show you

926
00:53:04,319 --> 00:53:06,720
now is that we can at least tweak get

927
00:53:06,720 --> 00:53:08,579
rid of one of those nodes on the tomb

928
00:53:08,579 --> 00:53:09,540
cook

929
00:53:09,540 --> 00:53:12,540
column and

930
00:53:12,540 --> 00:53:14,640
um for that let's recall what we usually

931
00:53:14,640 --> 00:53:17,640
do in tune cook or kahatsuba we take a

932
00:53:17,640 --> 00:53:20,339
polynomial and we split it and even in

933
00:53:20,339 --> 00:53:23,819
low and high half or for two four for

934
00:53:23,819 --> 00:53:25,440
example you will split it in consecutive

935
00:53:25,440 --> 00:53:27,240
quarters

936
00:53:27,240 --> 00:53:30,119
But You observe that even if the

937
00:53:30,119 --> 00:53:31,800
original polynomial lives in some

938
00:53:31,800 --> 00:53:33,599
circular Atomic polynomial ring so if

939
00:53:33,599 --> 00:53:35,220
you multiply you won't increase the size

940
00:53:35,220 --> 00:53:36,900
because there's a wrap around

941
00:53:36,900 --> 00:53:39,240
those smaller polynomials they won't see

942
00:53:39,240 --> 00:53:41,640
this quotient if you multiply those

943
00:53:41,640 --> 00:53:43,319
smaller polynomials they will double in

944
00:53:43,319 --> 00:53:45,059
size and only as you fold them together

945
00:53:45,059 --> 00:53:47,280
in the end you see the relation

946
00:53:47,280 --> 00:53:49,980
and that's the trouble with the normal

947
00:53:49,980 --> 00:53:53,040
tombok approach but you can quite easily

948
00:53:53,040 --> 00:53:55,800
get rid of this by instead splitting in

949
00:53:55,800 --> 00:53:57,960
even and odd parts or for Tomb four

950
00:53:57,960 --> 00:54:01,440
splitting according to the index mod 4.

951
00:54:01,440 --> 00:54:03,119
and if you do this and you think a

952
00:54:03,119 --> 00:54:05,160
little bit you will realize that if the

953
00:54:05,160 --> 00:54:06,720
original multiplication is the

954
00:54:06,720 --> 00:54:08,700
cyclotomic one then the multiplication

955
00:54:08,700 --> 00:54:10,680
for those sub polynomials is also

956
00:54:10,680 --> 00:54:11,940
cyclotomic

957
00:54:11,940 --> 00:54:15,000
so you get rid of this size expansion

958
00:54:15,000 --> 00:54:17,940
during multiplication

959
00:54:17,940 --> 00:54:20,460
so um the table we get is slightly

960
00:54:20,460 --> 00:54:23,339
better for Doom cook we have a green on

961
00:54:23,339 --> 00:54:26,099
the lower right and the motivation for

962
00:54:26,099 --> 00:54:28,680
us was to understand how this still how

963
00:54:28,680 --> 00:54:32,220
how do they compare with NTT after this

964
00:54:32,220 --> 00:54:34,640
Improvement

965
00:54:35,400 --> 00:54:37,559
um for the entity itself we also made

966
00:54:37,559 --> 00:54:39,420
some improvements um you know that the

967
00:54:39,420 --> 00:54:41,339
entity heavily relies on modular

968
00:54:41,339 --> 00:54:43,980
multiplication with constants which is

969
00:54:43,980 --> 00:54:46,559
typically done um by three

970
00:54:46,559 --> 00:54:48,359
multiplications and in addition our

971
00:54:48,359 --> 00:54:50,940
subtraction and for CMD it's important

972
00:54:50,940 --> 00:54:52,800
that those multiplications are either

973
00:54:52,800 --> 00:54:54,839
high or low multiplications but they are

974
00:54:54,839 --> 00:54:57,180
never doubled with multiplications which

975
00:54:57,180 --> 00:54:59,359
is

976
00:54:59,359 --> 00:55:03,059
helps the implementation in some deep

977
00:55:03,059 --> 00:55:05,339
now here you could take this and

978
00:55:05,339 --> 00:55:07,440
implement it as is in mve there's a high

979
00:55:07,440 --> 00:55:09,780
multiply there's a low multiply but it

980
00:55:09,780 --> 00:55:11,520
wouldn't work well because the high

981
00:55:11,520 --> 00:55:14,160
multiply only works vector vector which

982
00:55:14,160 --> 00:55:15,660
would force you to put twiddles in a

983
00:55:15,660 --> 00:55:17,819
vector and data in a vector and with

984
00:55:17,819 --> 00:55:19,440
eight Vector registers you wouldn't get

985
00:55:19,440 --> 00:55:22,559
very far what we do instead is we use a

986
00:55:22,559 --> 00:55:24,000
slight vary in the doubling High

987
00:55:24,000 --> 00:55:26,160
multiply from fixed Point arithmetic

988
00:55:26,160 --> 00:55:29,040
which allows a scalar Vector version and

989
00:55:29,040 --> 00:55:30,720
then you can put all the twiddles in

990
00:55:30,720 --> 00:55:32,579
general purpose registers and all the

991
00:55:32,579 --> 00:55:34,680
data in vectors and then you can

992
00:55:34,680 --> 00:55:37,200
actually make do with eight vectors 16

993
00:55:37,200 --> 00:55:40,759
GPRS you get somewhere

994
00:55:40,980 --> 00:55:41,579
um

995
00:55:41,579 --> 00:55:44,160
oops let me go back

996
00:55:44,160 --> 00:55:46,980
um and also if you look at this

997
00:55:46,980 --> 00:55:48,839
um blueprint you might wonder can we

998
00:55:48,839 --> 00:55:50,760
somehow merge the third and fourth step

999
00:55:50,760 --> 00:55:52,740
we do an addition a multiplication and

1000
00:55:52,740 --> 00:55:54,240
in addition isn't there always something

1001
00:55:54,240 --> 00:55:56,400
like a multiply accumulate

1002
00:55:56,400 --> 00:55:58,319
and um

1003
00:55:58,319 --> 00:56:00,660
if you try this with the addition in the

1004
00:56:00,660 --> 00:56:02,160
last step and you merge this into the

1005
00:56:02,160 --> 00:56:04,140
high multiply it's actually functionally

1006
00:56:04,140 --> 00:56:06,599
wrong because you miss a carry between

1007
00:56:06,599 --> 00:56:09,420
low and high part but what we observed

1008
00:56:09,420 --> 00:56:11,700
was that you can somehow hack around a

1009
00:56:11,700 --> 00:56:15,180
little bit by expressing this carry from

1010
00:56:15,180 --> 00:56:17,819
low to high as a rounding contribution

1011
00:56:17,819 --> 00:56:20,099
and there are instructions which do

1012
00:56:20,099 --> 00:56:21,839
rounding multiplies

1013
00:56:21,839 --> 00:56:24,780
and this actually allows you to give to

1014
00:56:24,780 --> 00:56:26,339
get the three instruction Montgomery

1015
00:56:26,339 --> 00:56:27,839
multiplication

1016
00:56:27,839 --> 00:56:30,359
which is a little bit hacky and it

1017
00:56:30,359 --> 00:56:33,660
relies on the constant being odd which

1018
00:56:33,660 --> 00:56:36,119
you can enforce

1019
00:56:36,119 --> 00:56:39,059
um but it well it works

1020
00:56:39,059 --> 00:56:40,619
and

1021
00:56:40,619 --> 00:56:42,660
um tomorrow in the neon talk I'm going

1022
00:56:42,660 --> 00:56:44,099
to present an alternative which is

1023
00:56:44,099 --> 00:56:45,960
called Barrett multiplication and also

1024
00:56:45,960 --> 00:56:49,520
has three instructions

1025
00:56:50,339 --> 00:56:51,059
um

1026
00:56:51,059 --> 00:56:55,980
okie doke so as far as the results go

1027
00:56:55,980 --> 00:56:59,099
um our development setup is as follows

1028
00:56:59,099 --> 00:57:01,500
we had a functional model for the m55

1029
00:57:01,500 --> 00:57:04,020
that you can download freely but that

1030
00:57:04,020 --> 00:57:05,640
doesn't give you any cycle accurate

1031
00:57:05,640 --> 00:57:07,680
measurements but allows you to do yeah

1032
00:57:07,680 --> 00:57:09,660
functional development

1033
00:57:09,660 --> 00:57:11,760
and as a benchmarking environment we

1034
00:57:11,760 --> 00:57:15,480
have an mps3 fpga prototyping board

1035
00:57:15,480 --> 00:57:18,059
um on which you can put in fpta image

1036
00:57:18,059 --> 00:57:21,839
for m55 and this image is free and

1037
00:57:21,839 --> 00:57:23,940
um you might be interested to know that

1038
00:57:23,940 --> 00:57:27,480
m85 the newest car also has an fpta

1039
00:57:27,480 --> 00:57:29,700
image for mps3 which will be released

1040
00:57:29,700 --> 00:57:33,660
soon so it's not a super cheap piece of

1041
00:57:33,660 --> 00:57:36,359
equipment this mbs3 but it might be

1042
00:57:36,359 --> 00:57:38,839
worth it

1043
00:57:39,420 --> 00:57:40,079
um

1044
00:57:40,079 --> 00:57:43,020
okay now there's just one slide on the

1045
00:57:43,020 --> 00:57:44,579
results so let's take a little bit of

1046
00:57:44,579 --> 00:57:47,579
time to digest this what you can see in

1047
00:57:47,579 --> 00:57:50,040
this table are um performance numbers

1048
00:57:50,040 --> 00:57:52,319
and cycles for Matrix Vector

1049
00:57:52,319 --> 00:57:54,180
multiplication as you encountered in

1050
00:57:54,180 --> 00:57:57,660
saber and um you have columns for entity

1051
00:57:57,660 --> 00:57:59,400
and you have columns for this driving

1052
00:57:59,400 --> 00:58:01,200
tomb cook

1053
00:58:01,200 --> 00:58:04,559
and we compare our m55 implementation to

1054
00:58:04,559 --> 00:58:07,859
a previous implementation on cortex M4

1055
00:58:07,859 --> 00:58:11,099
so what we see for um NTT is that we get

1056
00:58:11,099 --> 00:58:13,700
a speed of of around three and a half X

1057
00:58:13,700 --> 00:58:16,980
which I'm now somehow if you see just

1058
00:58:16,980 --> 00:58:19,020
the speed up number maybe it doesn't

1059
00:58:19,020 --> 00:58:21,420
mean very much but let's put it into

1060
00:58:21,420 --> 00:58:24,240
context we have 128-bit vectors we are

1061
00:58:24,240 --> 00:58:27,119
operating on 32-bit data it's

1062
00:58:27,119 --> 00:58:28,800
theoretically impossible to get more

1063
00:58:28,800 --> 00:58:32,700
than 4X speed up so if we get 3.5

1064
00:58:32,700 --> 00:58:35,040
um we were quite happy with that

1065
00:58:35,040 --> 00:58:37,740
and and what it means in terms of this

1066
00:58:37,740 --> 00:58:40,200
instruction overlapping

1067
00:58:40,200 --> 00:58:42,359
is that the entity is a beautiful

1068
00:58:42,359 --> 00:58:45,240
algorithm also for the purpose of

1069
00:58:45,240 --> 00:58:47,099
instruction overlapping because it has a

1070
00:58:47,099 --> 00:58:50,780
nice mix of addition logic um Edition

1071
00:58:50,780 --> 00:58:54,000
multiply and load store

1072
00:58:54,000 --> 00:58:57,000
um but if you can't you have to

1073
00:58:57,000 --> 00:58:58,440
interleave multiple butterflies

1074
00:58:58,440 --> 00:59:00,059
otherwise you have somehow a load

1075
00:59:00,059 --> 00:59:01,920
bottleneck and the store bottleneck at

1076
00:59:01,920 --> 00:59:04,380
the top and end so

1077
00:59:04,380 --> 00:59:06,299
um you need to fiddle a little bit to

1078
00:59:06,299 --> 00:59:09,859
interleave everything nicely

1079
00:59:10,760 --> 00:59:13,200
where we get around five to five and a

1080
00:59:13,200 --> 00:59:15,420
half I speed up so why does that make

1081
00:59:15,420 --> 00:59:18,000
sense it's 16-bit data we are operating

1082
00:59:18,000 --> 00:59:21,540
on so shouldn't we get 8X ideally and

1083
00:59:21,540 --> 00:59:23,280
that's not the case because the cortex

1084
00:59:23,280 --> 00:59:25,500
M4 implementation which is our Baseline

1085
00:59:25,500 --> 00:59:28,500
also has 32-bit simd instructions which

1086
00:59:28,500 --> 00:59:31,200
are used here but there aren't so you

1087
00:59:31,200 --> 00:59:33,839
should rather expect 4X and we get 5x

1088
00:59:33,839 --> 00:59:36,119
because there are more

1089
00:59:36,119 --> 00:59:39,240
flexible Vector instructions on m55 than

1090
00:59:39,240 --> 00:59:40,799
on M4

1091
00:59:40,799 --> 00:59:44,100
so um in terms of the

1092
00:59:44,100 --> 00:59:44,460
[Music]

1093
00:59:44,460 --> 00:59:45,480
um

1094
00:59:45,480 --> 00:59:47,579
the theoretical limits I think what we

1095
00:59:47,579 --> 00:59:48,960
achieved um

1096
00:59:48,960 --> 00:59:51,660
I mean we were certainly happy with that

1097
00:59:51,660 --> 00:59:54,119
if we then compare tomb cook and NTT

1098
00:59:54,119 --> 00:59:56,339
what we see is that even though the

1099
00:59:56,339 --> 00:59:59,760
speed up is higher for toonkook

1100
00:59:59,760 --> 01:00:04,440
um entity remains considerably faster

1101
01:00:04,440 --> 01:00:07,280
um yeah

1102
01:00:07,380 --> 01:00:10,740
um okay so some conclusions and we've

1103
01:00:10,740 --> 01:00:14,339
talked about MBE it's a 100 SMD

1104
01:00:14,339 --> 01:00:16,220
extension for microcontrollers which is

1105
01:00:16,220 --> 01:00:19,020
128-bit vectors which is feasible only

1106
01:00:19,020 --> 01:00:21,359
because it offloads some complexity from

1107
01:00:21,359 --> 01:00:24,420
the hardware onto the programmer such as

1108
01:00:24,420 --> 01:00:27,839
fewer Vector registers in Mighty cycle

1109
01:00:27,839 --> 01:00:30,780
instructions but they can overlap

1110
01:00:30,780 --> 01:00:32,640
um so writing good helium code isn't

1111
01:00:32,640 --> 01:00:34,740
exactly trivial it needs you need some

1112
01:00:34,740 --> 01:00:37,079
practice but what we do show is that for

1113
01:00:37,079 --> 01:00:38,880
the workloads of Interest

1114
01:00:38,880 --> 01:00:41,160
it's always possible to write things in

1115
01:00:41,160 --> 01:00:42,780
a way that really leverages this

1116
01:00:42,780 --> 01:00:46,220
instruction overlapping

1117
01:00:46,380 --> 01:00:48,480
um an Outlook

1118
01:00:48,480 --> 01:00:49,819
um this

1119
01:00:49,819 --> 01:00:52,740
reshuffling of neon code you might think

1120
01:00:52,740 --> 01:00:55,559
that should be automated and um I've

1121
01:00:55,559 --> 01:00:57,720
worked on a super Optimizer for for

1122
01:00:57,720 --> 01:01:00,599
helium assembly which uses such solving

1123
01:01:00,599 --> 01:01:03,359
to automate the process of Ideal

1124
01:01:03,359 --> 01:01:04,859
register allocation and instruction

1125
01:01:04,859 --> 01:01:07,440
ordering so you give it just some

1126
01:01:07,440 --> 01:01:09,359
readable functional piece like the one

1127
01:01:09,359 --> 01:01:10,920
the bad one we had in the beginning and

1128
01:01:10,920 --> 01:01:12,540
then it will automatically turn it into

1129
01:01:12,540 --> 01:01:15,619
a good one

1130
01:01:15,960 --> 01:01:17,400
um and that's going to be open source

1131
01:01:17,400 --> 01:01:20,220
soon in terms of other postponing crypto

1132
01:01:20,220 --> 01:01:22,680
schemes um work on Kaiba and the lithium

1133
01:01:22,680 --> 01:01:24,540
has started but there's nothing

1134
01:01:24,540 --> 01:01:26,460
um to to show

1135
01:01:26,460 --> 01:01:28,559
um yet so it's a little bit in a limbo

1136
01:01:28,559 --> 01:01:30,299
state

1137
01:01:30,299 --> 01:01:33,240
um and all code is available on the ptmx

1138
01:01:33,240 --> 01:01:35,460
repository it wasn't very clever to just

1139
01:01:35,460 --> 01:01:39,180
have this link but um if you open it you

1140
01:01:39,180 --> 01:01:41,099
can click on it

1141
01:01:41,099 --> 01:01:44,160
um yeah and there are also some

1142
01:01:44,160 --> 01:01:45,839
resources at the end but I'm not going

1143
01:01:45,839 --> 01:01:47,579
through them it's just for you if you

1144
01:01:47,579 --> 01:01:49,980
want to see a bit more

1145
01:01:49,980 --> 01:01:54,000
um and with that I'm concluding

1146
01:01:54,000 --> 01:01:57,000
foreign

1147
01:02:01,040 --> 01:02:04,640
do we have questions

1148
01:02:04,799 --> 01:02:07,020
it seems that everyone oh there is one

1149
01:02:07,020 --> 01:02:09,259
there

1150
01:02:14,180 --> 01:02:17,760
[Music]

1151
01:02:17,760 --> 01:02:19,760
um

1152
01:02:39,920 --> 01:02:41,880
you're exactly right so the

1153
01:02:41,880 --> 01:02:43,619
interpolation step for two book is

1154
01:02:43,619 --> 01:02:45,299
faster because the data you're operating

1155
01:02:45,299 --> 01:02:47,700
on is half the size

1156
01:02:47,700 --> 01:02:49,319
um because it hasn't doubled during the

1157
01:02:49,319 --> 01:02:51,180
base multiplication I didn't point that

1158
01:02:51,180 --> 01:02:53,280
out yeah and also algorithmically what

1159
01:02:53,280 --> 01:02:55,799
you need the way you fold things back

1160
01:02:55,799 --> 01:02:57,660
together in the interpolation step is

1161
01:02:57,660 --> 01:02:59,640
different than it would be an enormous

1162
01:02:59,640 --> 01:03:01,980
splitting but yeah the main reason why

1163
01:03:01,980 --> 01:03:04,260
you should think it's better is that the

1164
01:03:04,260 --> 01:03:07,140
interpolationist should be twice as fast

1165
01:03:07,140 --> 01:03:09,920
foreign

1166
01:03:15,059 --> 01:03:19,760
so okay let's just thank you hello again

1167
01:03:23,940 --> 01:03:26,579
so for the last uh talk it's going to be

1168
01:03:26,579 --> 01:03:29,280
online so I mean it's going to be a

1169
01:03:29,280 --> 01:03:32,420
recording and it's the improved plan

1170
01:03:32,420 --> 01:03:34,859
arithmetic for lattice based

1171
01:03:34,859 --> 01:03:36,119
cryptography

1172
01:03:36,119 --> 01:03:38,700
and we are going to see the recording

1173
01:03:38,700 --> 01:03:40,020
from

1174
01:03:40,020 --> 01:03:43,339
during our

1175
01:04:05,880 --> 01:04:08,760
hello everyone now I will introduce our

1176
01:04:08,760 --> 01:04:11,099
paper improved Center automatic or

1177
01:04:11,099 --> 01:04:13,200
latest based cryptography

1178
01:04:13,200 --> 01:04:16,200
foreign

1179
01:04:22,619 --> 01:04:24,960
I will introduce this paper in five

1180
01:04:24,960 --> 01:04:27,839
parts first the introductions

1181
01:04:27,839 --> 01:04:30,420
this paper focuses on two latest based

1182
01:04:30,420 --> 01:04:34,380
schemes kyber and ndtiu as we all know

1183
01:04:34,380 --> 01:04:36,839
that Kaiba is one of the third long km

1184
01:04:36,839 --> 01:04:39,420
finalists and according to the latest

1185
01:04:39,420 --> 01:04:42,359
news it is also the final km scheme to

1186
01:04:42,359 --> 01:04:45,480
be standardized cover is based on the

1187
01:04:45,480 --> 01:04:47,579
modular lending with error problems

1188
01:04:47,579 --> 01:04:50,220
which introduce a small K dimensional

1189
01:04:50,220 --> 01:04:52,920
Matrix to provide different security

1190
01:04:52,920 --> 01:04:54,180
levels

1191
01:04:54,180 --> 01:04:56,520
while the other end and the modular

1192
01:04:56,520 --> 01:04:58,160
skill are fixed

1193
01:04:58,160 --> 01:05:01,380
nddru is an antidepinary variance of

1194
01:05:01,380 --> 01:05:05,460
intro km steel proposing teachers 2019

1195
01:05:05,460 --> 01:05:08,520
and the parameter it only provides one

1196
01:05:08,520 --> 01:05:11,540
set of parameters

1197
01:05:11,640 --> 01:05:15,000
and the design archival and entity IU

1198
01:05:15,000 --> 01:05:17,460
enable us to implement the polynomial

1199
01:05:17,460 --> 01:05:19,920
multiplication over these two polynomial

1200
01:05:19,920 --> 01:05:23,640
rings with the system bit entity and

1201
01:05:23,640 --> 01:05:25,920
entity can vectorize this only normal

1202
01:05:25,920 --> 01:05:29,099
range into the product of mainly small

1203
01:05:29,099 --> 01:05:31,500
degree polynomials

1204
01:05:31,500 --> 01:05:34,559
and the cooperation of entity is the

1205
01:05:34,559 --> 01:05:37,740
butterfly unit where City and gear

1206
01:05:37,740 --> 01:05:40,079
spotifys are too commonly used butterfly

1207
01:05:40,079 --> 01:05:40,920
unit

1208
01:05:40,920 --> 01:05:42,960
and we can see that during each

1209
01:05:42,960 --> 01:05:45,480
vertebral unit the most time consuming

1210
01:05:45,480 --> 01:05:47,940
operation is the modular modification by

1211
01:05:47,940 --> 01:05:51,059
the Twitter Factor but the total factor

1212
01:05:51,059 --> 01:05:53,160
is a well-known constant

1213
01:05:53,160 --> 01:05:56,880
and to efficiently implement the modular

1214
01:05:56,880 --> 01:05:59,339
application by the total factors

1215
01:05:59,339 --> 01:06:02,160
the state of the arm method is the

1216
01:06:02,160 --> 01:06:05,339
Montgomery or parallel automatic and we

1217
01:06:05,339 --> 01:06:07,319
can see from these two algorithms that

1218
01:06:07,319 --> 01:06:10,440
both of them need three moderations

1219
01:06:10,440 --> 01:06:13,980
and besides they both use the product c

1220
01:06:13,980 --> 01:06:16,980
equal to a times B twice

1221
01:06:16,980 --> 01:06:20,099
and thanks to the many years development

1222
01:06:20,099 --> 01:06:23,700
of the cryptography Community uh

1223
01:06:23,700 --> 01:06:26,339
both of them suppose sine input in a

1224
01:06:26,339 --> 01:06:27,680
large domain

1225
01:06:27,680 --> 01:06:30,900
therefore enables the basic reduction

1226
01:06:30,900 --> 01:06:33,420
strategy and products improve the

1227
01:06:33,420 --> 01:06:37,700
efficiency of entity and inward entity

1228
01:06:38,280 --> 01:06:41,220
and recently Thomas planter proposed a

1229
01:06:41,220 --> 01:06:43,260
noble Grant roadside modular

1230
01:06:43,260 --> 01:06:45,480
modification which we call plantar

1231
01:06:45,480 --> 01:06:48,119
magnification here and we can see that

1232
01:06:48,119 --> 01:06:50,460
the biggest difference advantage of the

1233
01:06:50,460 --> 01:06:53,520
plantar moderation is that it only use

1234
01:06:53,520 --> 01:06:56,880
the product a Time B once

1235
01:06:56,880 --> 01:06:59,640
uh therefore when multiplying a constant

1236
01:06:59,640 --> 01:07:02,640
for example B is a constant the prime

1237
01:07:02,640 --> 01:07:05,700
term equation can save one location by

1238
01:07:05,700 --> 01:07:08,460
Computing BQ Prime multi to the power of

1239
01:07:08,460 --> 01:07:10,140
2L

1240
01:07:10,140 --> 01:07:13,020
and therefore it is addressed that the

1241
01:07:13,020 --> 01:07:14,880
efficient's prime communication by a

1242
01:07:14,880 --> 01:07:17,400
constant can be used to accelerate the

1243
01:07:17,400 --> 01:07:19,260
butterfly unit

1244
01:07:19,260 --> 01:07:21,960
and however the original Prime term

1245
01:07:21,960 --> 01:07:25,260
relation only supports unsigned integers

1246
01:07:25,260 --> 01:07:28,920
in a small domain 0 to Q

1247
01:07:28,920 --> 01:07:31,920
uh this will require an extra addition

1248
01:07:31,920 --> 01:07:34,799
by a multiple of Q during each butterfly

1249
01:07:34,799 --> 01:07:35,760
unit

1250
01:07:35,760 --> 01:07:37,619
and besides it may also require

1251
01:07:37,619 --> 01:07:40,680
expensive modular reduction after each

1252
01:07:40,680 --> 01:07:43,619
layer of butterflies therefore this

1253
01:07:43,619 --> 01:07:45,839
event disadvantages make the original

1254
01:07:45,839 --> 01:07:48,780
plan term relation in practical in LBC

1255
01:07:48,780 --> 01:07:52,559
schemes so this paper try to investigate

1256
01:07:52,559 --> 01:07:55,380
how we can efficiently apply the plantar

1257
01:07:55,380 --> 01:07:58,079
climatic in LBC

1258
01:07:58,079 --> 01:08:00,960
we now show how we improve the plantar

1259
01:08:00,960 --> 01:08:03,480
aromatic teleport LBC

1260
01:08:03,480 --> 01:08:06,180
so at the improved plan term relation is

1261
01:08:06,180 --> 01:08:09,000
based on two observations the first one

1262
01:08:09,000 --> 01:08:10,920
is that the original modular destruction

1263
01:08:10,920 --> 01:08:14,220
is two is more than two of L divided by

1264
01:08:14,220 --> 01:08:17,279
five verified is the golden ratio

1265
01:08:17,279 --> 01:08:20,580
on the other hand the model in lvc are

1266
01:08:20,580 --> 01:08:23,160
much smaller for example the tail bit

1267
01:08:23,160 --> 01:08:27,000
and 13 bit and modulus in kyber and

1268
01:08:27,000 --> 01:08:28,259
ndtio

1269
01:08:28,259 --> 01:08:30,899
So based on these two observations we

1270
01:08:30,899 --> 01:08:34,259
put a strict model restriction over Q by

1271
01:08:34,259 --> 01:08:37,738
introducing a small integer Alpha where

1272
01:08:37,738 --> 01:08:40,979
all by Speaker or equal to zeros and the

1273
01:08:40,979 --> 01:08:43,140
new modular restriction is Q is more

1274
01:08:43,140 --> 01:08:45,719
than two to the power of L minus Alpha

1275
01:08:45,719 --> 01:08:47,520
minus one

1276
01:08:47,520 --> 01:08:49,699
foreign

1277
01:08:55,160 --> 01:08:57,960
this equation is bigger than zero and

1278
01:08:57,960 --> 01:09:00,540
smaller than 2 12 L 2 L

1279
01:09:00,540 --> 01:09:04,198
and we modify the original equation into

1280
01:09:04,198 --> 01:09:07,620
a new equations and we also saw that

1281
01:09:07,620 --> 01:09:10,380
this new equation also is also bigger

1282
01:09:10,380 --> 01:09:12,359
than 0 and smaller than 2 to the power

1283
01:09:12,359 --> 01:09:17,939
of 2 l o a b in this in this domain

1284
01:09:17,939 --> 01:09:21,540
So based on these two trick uh we

1285
01:09:21,540 --> 01:09:23,819
present and improve plantar modification

1286
01:09:23,819 --> 01:09:27,899
which is shown in algorithm for uh so

1287
01:09:27,899 --> 01:09:31,319
this algorithms support sine inches a b

1288
01:09:31,319 --> 01:09:34,859
in a large domain under the new modular

1289
01:09:34,859 --> 01:09:38,179
restrictions and also produce and sign

1290
01:09:38,179 --> 01:09:41,819
output AR in this domain

1291
01:09:41,819 --> 01:09:44,580
and as for the main step we only need to

1292
01:09:44,580 --> 01:09:48,359
multiply the plus one to plus 2 12 2 to

1293
01:09:48,359 --> 01:09:50,819
the power of power

1294
01:09:50,819 --> 01:09:53,880
and we prove that the algorithm pole is

1295
01:09:53,880 --> 01:09:58,440
correct under the new restrictions

1296
01:09:59,640 --> 01:10:02,580
so compared to the original plan term

1297
01:10:02,580 --> 01:10:04,820
location the improved plantar Marine

1298
01:10:04,820 --> 01:10:08,100
supports sine input and produce sine

1299
01:10:08,100 --> 01:10:09,060
output

1300
01:10:09,060 --> 01:10:11,699
and besides we all we also managed to

1301
01:10:11,699 --> 01:10:14,100
extend the input length from zero to

1302
01:10:14,100 --> 01:10:16,980
kill up to a large domain which

1303
01:10:16,980 --> 01:10:19,560
eliminate a final collection step in the

1304
01:10:19,560 --> 01:10:21,360
original version

1305
01:10:21,360 --> 01:10:24,480
and besides the Improvement automatic

1306
01:10:24,480 --> 01:10:26,880
also have some merits over the state of

1307
01:10:26,880 --> 01:10:30,480
Dr modular aromatic thus in terms of

1308
01:10:30,480 --> 01:10:33,360
efficiency the plantar aromatics can

1309
01:10:33,360 --> 01:10:35,880
save one modification when multiplying a

1310
01:10:35,880 --> 01:10:36,900
constant

1311
01:10:36,900 --> 01:10:39,900
and besides dependent may require an

1312
01:10:39,900 --> 01:10:42,179
Express history population for a

1313
01:10:42,179 --> 01:10:45,600
non-versial upset on counter sample that

1314
01:10:45,600 --> 01:10:47,940
which may further slow down its

1315
01:10:47,940 --> 01:10:49,080
efficiency

1316
01:10:49,080 --> 01:10:51,900
and as for the input range Frontier

1317
01:10:51,900 --> 01:10:54,540
reduction accept input in a large domain

1318
01:10:54,540 --> 01:10:57,360
which is about 2 to the power of power

1319
01:10:57,360 --> 01:11:01,320
times bigger than Montgomery reductions

1320
01:11:01,320 --> 01:11:03,840
and finally the output range of the

1321
01:11:03,840 --> 01:11:05,880
improved algorithm is half of the

1322
01:11:05,880 --> 01:11:07,380
montgomerys

1323
01:11:07,380 --> 01:11:11,340
so with all these other advantage the

1324
01:11:11,340 --> 01:11:13,679
improve plantar motivation also have

1325
01:11:13,679 --> 01:11:17,699
some Merit weak spots first the plantar

1326
01:11:17,699 --> 01:11:20,400
automatic introduced and a special L10

1327
01:11:20,400 --> 01:11:23,580
2lb modifications and we show that it is

1328
01:11:23,580 --> 01:11:26,400
suitable on color sample M7 and some

1329
01:11:26,400 --> 01:11:29,280
32-bit microcontrollers when L is equal

1330
01:11:29,280 --> 01:11:33,659
to 16. and second a deeper computer

1331
01:11:33,659 --> 01:11:36,120
vectors are double size compared to the

1332
01:11:36,120 --> 01:11:38,280
implementation with Montgomery automatic

1333
01:11:38,280 --> 01:11:41,100
it requires extra Cycles to load the

1334
01:11:41,100 --> 01:11:44,480
trigger factors but we show that by

1335
01:11:44,480 --> 01:11:46,620
combining with the layer emerging

1336
01:11:46,620 --> 01:11:50,880
strategy these exercises can be covered

1337
01:11:50,880 --> 01:11:54,239
and we now show how to integrate the

1338
01:11:54,239 --> 01:11:56,520
improved Quantum aromatic into cyber and

1339
01:11:56,520 --> 01:11:59,940
entity IU so the target platform of this

1340
01:11:59,940 --> 01:12:02,340
paper is the current example which is a

1341
01:12:02,340 --> 01:12:05,520
needs replenish platform and it has some

1342
01:12:05,520 --> 01:12:08,520
simd extensions which enable us to

1343
01:12:08,520 --> 01:12:12,060
perform addition subtraction to pack 16

1344
01:12:12,060 --> 01:12:16,380
bit vectors in one instructions and the

1345
01:12:16,380 --> 01:12:18,480
most important instruction we use in

1346
01:12:18,480 --> 01:12:21,179
this paper is the S Mode WB or t

1347
01:12:21,179 --> 01:12:23,699
instructions which can efficiently

1348
01:12:23,699 --> 01:12:26,940
compute the 16 times 32-bit modification

1349
01:12:26,940 --> 01:12:28,920
in plantar aromatic

1350
01:12:28,920 --> 01:12:32,280
and modification instruction or normally

1351
01:12:32,280 --> 01:12:34,380
one Cycles while the low or store

1352
01:12:34,380 --> 01:12:36,780
instructional reality expensive

1353
01:12:36,780 --> 01:12:39,600
so we need to reduce the use of a low

1354
01:12:39,600 --> 01:12:41,460
and store instruction as many as

1355
01:12:41,460 --> 01:12:43,500
possible

1356
01:12:43,500 --> 01:12:46,620
and in the following section we set L

1357
01:12:46,620 --> 01:12:49,500
equal to 16 to suppose that 16 week

1358
01:12:49,500 --> 01:12:54,120
entity in table and entity IU the alpha

1359
01:12:54,120 --> 01:12:57,739
is equal to three or two

1360
01:12:58,940 --> 01:13:02,100
Q satisfy this new modular restrictions

1361
01:13:02,100 --> 01:13:04,980
and based on the Improvement automatic

1362
01:13:04,980 --> 01:13:07,159
represent and efficients through cycle

1363
01:13:07,159 --> 01:13:10,260
counterme Fusion by a constant as shown

1364
01:13:10,260 --> 01:13:13,560
in algorithm by In This algorithm we

1365
01:13:13,560 --> 01:13:16,679
assume that b is a constant so that we

1366
01:13:16,679 --> 01:13:19,980
can pre compute B with Q inversion mod

1367
01:13:19,980 --> 01:13:24,120
to the power 2L so that BQ point is in 2

1368
01:13:24,120 --> 01:13:28,679
lb integers after that the L times 2lb

1369
01:13:28,679 --> 01:13:32,040
multiplication a times BQ Prime can be

1370
01:13:32,040 --> 01:13:34,920
implemented in one instructions as small

1371
01:13:34,920 --> 01:13:36,659
WB

1372
01:13:36,659 --> 01:13:39,000
and the follow-up operation can be

1373
01:13:39,000 --> 01:13:42,060
implementing also in one motivation

1374
01:13:42,060 --> 01:13:43,860
instructions

1375
01:13:43,860 --> 01:13:45,840
and in compared to the state of the

1376
01:13:45,840 --> 01:13:48,780
Montgomery implementation

1377
01:13:48,780 --> 01:13:51,780
on condensation for present in kitchens

1378
01:13:51,780 --> 01:13:55,380
2020. we can save one modification

1379
01:13:55,380 --> 01:13:59,040
namely one Cycles on content sample

1380
01:13:59,040 --> 01:14:01,679
and as for the modular mutation of two

1381
01:14:01,679 --> 01:14:05,340
variables represent a two-cycle plantar

1382
01:14:05,340 --> 01:14:08,340
reduction which is as efficient as the

1383
01:14:08,340 --> 01:14:10,219
state of the Montgomery

1384
01:14:10,219 --> 01:14:13,940
reductions however it has a larger

1385
01:14:13,940 --> 01:14:17,340
bigger input range and smaller output

1386
01:14:17,340 --> 01:14:20,340
range and we show that this adventure

1387
01:14:20,340 --> 01:14:22,739
over Montgomery automatic will enable

1388
01:14:22,739 --> 01:14:25,920
better entity implementations

1389
01:14:25,920 --> 01:14:28,679
and as mentioned before the most time

1390
01:14:28,679 --> 01:14:30,780
consuming operation in the butterfly

1391
01:14:30,780 --> 01:14:33,000
unit is the modular modification by the

1392
01:14:33,000 --> 01:14:35,760
total factors where the total factors is

1393
01:14:35,760 --> 01:14:37,920
a well-known constant so that we can

1394
01:14:37,920 --> 01:14:39,659
utilize the efficient's parental

1395
01:14:39,659 --> 01:14:42,780
modification by a constant to accelerate

1396
01:14:42,780 --> 01:14:45,780
the butterfly unit and to do this we

1397
01:14:45,780 --> 01:14:48,179
need to First compute the total vectors

1398
01:14:48,179 --> 01:14:51,920
by first multiplying a plantar constant

1399
01:14:51,920 --> 01:14:54,659
so that the plantar moderation can

1400
01:14:54,659 --> 01:14:57,960
produce a result in a normal domain

1401
01:14:57,960 --> 01:15:00,840
and besides we also need to multiply it

1402
01:15:00,840 --> 01:15:03,420
with the queuing version more to the

1403
01:15:03,420 --> 01:15:06,120
power of 12. and the two defectors are

1404
01:15:06,120 --> 01:15:08,400
double size compared to the Montgomery

1405
01:15:08,400 --> 01:15:10,080
implementations

1406
01:15:10,080 --> 01:15:14,640
and in summary we can achieve we can

1407
01:15:14,640 --> 01:15:17,280
implement the true modular notification

1408
01:15:17,280 --> 01:15:20,280
by the third factors in four Cycles

1409
01:15:20,280 --> 01:15:22,800
import instructions

1410
01:15:22,800 --> 01:15:25,199
so compared to the Montgomery based

1411
01:15:25,199 --> 01:15:28,080
implementations we can save two cycles

1412
01:15:28,080 --> 01:15:31,380
for two CT butterflies namely saving one

1413
01:15:31,380 --> 01:15:35,100
cycle for each breath by unit

1414
01:15:35,100 --> 01:15:38,219
and because using the plantar limited

1415
01:15:38,219 --> 01:15:40,580
introduced the 32-bit title factors

1416
01:15:40,580 --> 01:15:43,199
therefore it requires excess loading

1417
01:15:43,199 --> 01:15:46,500
Cycles to load the tutor factors but we

1418
01:15:46,500 --> 01:15:48,540
show that by combining with the layer

1419
01:15:48,540 --> 01:15:50,940
merging strategy the Improvement block

1420
01:15:50,940 --> 01:15:53,640
by the plantarmatic can cover the side

1421
01:15:53,640 --> 01:15:56,340
effect of the double size to the factor

1422
01:15:56,340 --> 01:15:58,860
for example in the three layer merging

1423
01:15:58,860 --> 01:16:02,640
strategy is each iteration of the each

1424
01:16:02,640 --> 01:16:05,100
layer can reduce eight Cycles at a cost

1425
01:16:05,100 --> 01:16:09,000
of only 0 1 or 2 extra cycle for loading

1426
01:16:09,000 --> 01:16:11,960
the Twitter factors

1427
01:16:12,140 --> 01:16:15,840
and because as introduced people the

1428
01:16:15,840 --> 01:16:18,239
input length of the improved plantar

1429
01:16:18,239 --> 01:16:20,460
reduction is about 2 to the power of

1430
01:16:20,460 --> 01:16:23,880
Power by 10 bigger than mongolies while

1431
01:16:23,880 --> 01:16:25,739
the output length is half of the

1432
01:16:25,739 --> 01:16:29,280
montgomerys and with with disadvantage

1433
01:16:29,280 --> 01:16:32,280
over Montgomery's automatic we show that

1434
01:16:32,280 --> 01:16:34,860
using the plantar aromatic would enable

1435
01:16:34,860 --> 01:16:37,440
would enable better lazy reduction

1436
01:16:37,440 --> 01:16:40,260
strategies and reduce the total number

1437
01:16:40,260 --> 01:16:43,380
of of the modular reduction of

1438
01:16:43,380 --> 01:16:45,659
coefficients because using the

1439
01:16:45,659 --> 01:16:48,659
plantarmatic would help us slow down the

1440
01:16:48,659 --> 01:16:52,280
glowing rate of coefficients

1441
01:16:52,280 --> 01:16:55,500
and when the coefficients would overflow

1442
01:16:55,500 --> 01:16:59,040
the 16 bit sine integers audio reduction

1443
01:16:59,040 --> 01:17:02,100
of the 16 bit coefficients are required

1444
01:17:02,100 --> 01:17:04,500
to reduce the coefficient size

1445
01:17:04,500 --> 01:17:07,020
and in this paper we showed that plantar

1446
01:17:07,020 --> 01:17:09,480
reduction can also be used to accelerate

1447
01:17:09,480 --> 01:17:12,420
these operations and the proposed double

1448
01:17:12,420 --> 01:17:14,300
parental reduction

1449
01:17:14,300 --> 01:17:16,560
faster than the state of Dr

1450
01:17:16,560 --> 01:17:19,560
implementations

1451
01:17:20,820 --> 01:17:25,080
and as for the result and comparisons we

1452
01:17:25,080 --> 01:17:28,199
integrate the Improvement aromatic into

1453
01:17:28,199 --> 01:17:30,260
two versions of cyber implementation

1454
01:17:30,260 --> 01:17:34,140
thus the code from teachers 2020 and

1455
01:17:34,140 --> 01:17:38,280
then the stack version code of acnx 2022

1456
01:17:38,280 --> 01:17:41,820
and this paper showed that integrating

1457
01:17:41,820 --> 01:17:45,239
the plantar aromatic into entity and

1458
01:17:45,239 --> 01:17:47,640
inward entity obtained quite good uh

1459
01:17:47,640 --> 01:17:50,040
this speed up compared to the Mongolia

1460
01:17:50,040 --> 01:17:53,719
based implementations over 20 to 25

1461
01:17:53,719 --> 01:17:58,440
speed up for entity and 11 to 20 speed

1462
01:17:58,440 --> 01:18:00,659
up for invert entity

1463
01:18:00,659 --> 01:18:03,780
and as for ntttiu to the best of our

1464
01:18:03,780 --> 01:18:06,480
acknowledgment this is the first work

1465
01:18:06,480 --> 01:18:08,219
that presents the assembly

1466
01:18:08,219 --> 01:18:10,739
implementation of ndtio on contact

1467
01:18:10,739 --> 01:18:13,380
sample therefore we only compare the

1468
01:18:13,380 --> 01:18:15,500
reference uh

1469
01:18:15,500 --> 01:18:18,840
implementation in teachers 2019 and

1470
01:18:18,840 --> 01:18:20,640
thanks to the parallel implementation

1471
01:18:20,640 --> 01:18:23,640
and the improved plantar dramatic the

1472
01:18:23,640 --> 01:18:29,040
speed of a range from 55 to 83 percent

1473
01:18:29,040 --> 01:18:31,800
as for the speed performance of the

1474
01:18:31,800 --> 01:18:35,159
overall kyber schemes we obtain slight

1475
01:18:35,159 --> 01:18:39,860
speed up with the same stack usage

1476
01:18:39,860 --> 01:18:43,199
and the slide speed up many can be

1477
01:18:43,199 --> 01:18:45,540
explained explained by the fact that

1478
01:18:45,540 --> 01:18:48,480
entity has been well optimized while

1479
01:18:48,480 --> 01:18:50,640
these symmetric cryptography accounts

1480
01:18:50,640 --> 01:18:53,100
for a large proportion of cycle counts

1481
01:18:53,100 --> 01:18:56,000
and it should be noticed that our

1482
01:18:56,000 --> 01:18:58,140
implementation based on the stack

1483
01:18:58,140 --> 01:19:02,719
version code plan teaches acnx 2022

1484
01:19:02,719 --> 01:19:06,420
outperforms the DSP version code

1485
01:19:06,420 --> 01:19:10,880
with merely half of the stack usage

1486
01:19:10,880 --> 01:19:14,520
and as per the ndtius games we obtained

1487
01:19:14,520 --> 01:19:17,219
about 50 speed up thanks to the

1488
01:19:17,219 --> 01:19:20,760
optimized polynomial automatic

1489
01:19:20,760 --> 01:19:24,120
so in some uh this paper presents an

1490
01:19:24,120 --> 01:19:26,540
improved plantar dramatic tailor for LBC

1491
01:19:26,540 --> 01:19:29,460
and it has some merits over the original

1492
01:19:29,460 --> 01:19:33,000
planter Montgomery and Bella and Matic

1493
01:19:33,000 --> 01:19:35,760
and by replacing the Montgomery and

1494
01:19:35,760 --> 01:19:38,100
Bella automatic with the improved

1495
01:19:38,100 --> 01:19:40,560
plantar automatic we obtain speed up

1496
01:19:40,560 --> 01:19:43,260
archive and entity IU with systemb

1497
01:19:43,260 --> 01:19:46,620
entity on counter sample and future work

1498
01:19:46,620 --> 01:19:49,800
can be uh can be done on its application

1499
01:19:49,800 --> 01:19:53,100
on other platform or on other schemes

1500
01:19:53,100 --> 01:19:55,380
with 32-bit entity

1501
01:19:55,380 --> 01:19:58,620
and it should be noticed that uh that

1502
01:19:58,620 --> 01:20:00,060
Glo

1503
01:20:00,060 --> 01:20:04,020
percent a similar and concurrent work

1504
01:20:04,020 --> 01:20:09,360
on in automatic 2022 they also present a

1505
01:20:09,360 --> 01:20:12,780
similar sign version plantar Rheumatic

1506
01:20:12,780 --> 01:20:15,719
and apply the assigned version automatic

1507
01:20:15,719 --> 01:20:19,260
to cyber on on a setting board with

1508
01:20:19,260 --> 01:20:22,380
respite platform which clearly shows

1509
01:20:22,380 --> 01:20:24,540
that the potential application of the

1510
01:20:24,540 --> 01:20:26,699
plantar limited on the schemes with

1511
01:20:26,699 --> 01:20:28,980
32-bit entity

1512
01:20:28,980 --> 01:20:31,380
and that would be all thank you for

1513
01:20:31,380 --> 01:20:33,480
listening I would love to take any

1514
01:20:33,480 --> 01:20:35,839
questions

1515
01:20:43,260 --> 01:20:46,880
so do we have questions

1516
01:20:47,400 --> 01:20:49,980
okay so no one seems to have questions

1517
01:20:49,980 --> 01:20:53,340
but I have a question can we hear us

1518
01:20:53,340 --> 01:20:57,480
yes yes you hear me yeah okay so you

1519
01:20:57,480 --> 01:20:59,760
presented this 16-bit version and you

1520
01:20:59,760 --> 01:21:02,820
said that can extend to 32. there is any

1521
01:21:02,820 --> 01:21:04,560
reason

1522
01:21:04,560 --> 01:21:06,719
um why you didn't go further in the

1523
01:21:06,719 --> 01:21:09,480
paper like why you didn't explain the 32

1524
01:21:09,480 --> 01:21:14,540
bits or it's just a foreign

1525
01:21:22,880 --> 01:21:27,780
for the 32-bit entity cannot be uh well

1526
01:21:27,780 --> 01:21:31,020
optimized due to the limit of the uh we

1527
01:21:31,020 --> 01:21:33,800
cannot perform the 32-bit uh times

1528
01:21:33,800 --> 01:21:36,659
64-bit multiplication on current sample

1529
01:21:36,659 --> 01:21:40,560
because it is a it's a 32-bit platform

1530
01:21:40,560 --> 01:21:45,120
so we didn't extend it to the 32-bit

1531
01:21:45,120 --> 01:21:47,460
platform entity

1532
01:21:47,460 --> 01:21:50,820
okay thank you we have one more question

1533
01:21:50,820 --> 01:21:53,340
thanks for the nice talk uh are you

1534
01:21:53,340 --> 01:21:55,980
going to merge your code back into pqm4

1535
01:21:55,980 --> 01:21:58,560
have you looked into this

1536
01:21:58,560 --> 01:22:01,860
yes yes we uh we are looking forward to

1537
01:22:01,860 --> 01:22:06,060
do that uh but why not uh we uh

1538
01:22:06,060 --> 01:22:08,880
we are planning to do that in the field

1539
01:22:08,880 --> 01:22:12,480
in in the next few months and we'll

1540
01:22:12,480 --> 01:22:15,019
yes

1541
01:22:15,179 --> 01:22:18,480
okay so thank you for the presentation

1542
01:22:18,480 --> 01:22:21,239
thank you let's just take everyone in

1543
01:22:21,239 --> 01:22:22,400
the session

1544
01:22:22,400 --> 01:22:26,059
thank you thank you

1545
01:22:26,280 --> 01:22:28,739
and it seems that we have announcements

1546
01:22:28,739 --> 01:22:31,260
so no not really an announcement just to

1547
01:22:31,260 --> 01:22:33,300
remind you that at six we have a dinner

1548
01:22:33,300 --> 01:22:35,040
again in the place where we had the

1549
01:22:35,040 --> 01:22:37,679
lunch and then at eight we are back here

1550
01:22:37,679 --> 01:22:41,580
for Ram session and uh open bar

1551
01:22:41,580 --> 01:22:44,300
enjoy

