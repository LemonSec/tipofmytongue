1
00:03:30,720 --> 00:03:33,720
yes

2
00:03:38,780 --> 00:03:40,799
representation there you can see here

3
00:03:40,799 --> 00:03:44,060
what is on the screen okay

4
00:03:48,180 --> 00:03:50,900
the family

5
00:04:26,699 --> 00:04:29,360
perfect

6
00:04:54,860 --> 00:04:57,979
uh yeah

7
00:05:01,560 --> 00:05:05,040
all right welcome everyone to the first

8
00:05:05,040 --> 00:05:07,860
part of the session

9
00:05:07,860 --> 00:05:10,080
um side Channel text on post Quantum

10
00:05:10,080 --> 00:05:12,120
implementations

11
00:05:12,120 --> 00:05:14,040
um the first talk in the session will be

12
00:05:14,040 --> 00:05:17,880
given by Ray Uno and oh he will present

13
00:05:17,880 --> 00:05:19,860
his work on the course of re-encryption

14
00:05:19,860 --> 00:05:22,740
a generic power em analysis on both

15
00:05:22,740 --> 00:05:25,919
Quantum camps go ahead uh thank you for

16
00:05:25,919 --> 00:05:28,380
the introduction uh good afternoon I'm

17
00:05:28,380 --> 00:05:30,960
here in Japan

18
00:05:30,960 --> 00:05:33,240
uh today it's my great pleasure to

19
00:05:33,240 --> 00:05:34,740
present our paper about the south

20
00:05:34,740 --> 00:05:36,900
General attack from Boston against

21
00:05:36,900 --> 00:05:40,680
uh this is collaborative work with Kata

22
00:05:40,680 --> 00:05:45,800
utero Akira jungko and now homie foreign

23
00:05:54,470 --> 00:05:57,519
[Music]

24
00:06:11,230 --> 00:06:14,339
[Music]

25
00:06:19,940 --> 00:06:22,979
approaches to realize the postal current

26
00:06:22,979 --> 00:06:25,620
mechanics as in the Mr postal

27
00:06:25,620 --> 00:06:28,080
cryptographic competition

28
00:06:28,080 --> 00:06:30,919
any uh this talk is about the power over

29
00:06:30,919 --> 00:06:34,860
attack on Quantum games

30
00:06:34,860 --> 00:06:37,860
attack

31
00:06:46,979 --> 00:06:49,860
I do think basically uh because uh it's

32
00:06:49,860 --> 00:06:52,560
quantity kind of construct the ccfpk

33
00:06:52,560 --> 00:06:54,780
director from the mathematical programs

34
00:06:54,780 --> 00:06:57,180
for the public key cryptography

35
00:06:57,180 --> 00:06:59,699
and in fact domestic terms are realized

36
00:06:59,699 --> 00:07:03,000
by combining the CPS and equality or

37
00:07:03,000 --> 00:07:04,800
biology check we followed by the

38
00:07:04,800 --> 00:07:07,280
encryption

39
00:07:31,380 --> 00:07:34,380
okay

40
00:07:34,919 --> 00:07:37,039
okay

41
00:07:37,680 --> 00:07:41,960
let me continue my talk uh

42
00:07:43,259 --> 00:07:46,940
sorry it's not not to actually

43
00:07:50,039 --> 00:07:52,819
uh today uh I'm talking about the power

44
00:07:52,819 --> 00:07:55,740
power you know analysis generic uh

45
00:07:55,740 --> 00:07:57,300
generally I think I put it to the postal

46
00:07:57,300 --> 00:08:02,360
mechanics the best idea about that is

47
00:08:02,360 --> 00:08:07,199
to implement the politics foreign

48
00:08:18,599 --> 00:08:23,639
uh in fact the audio will bring PC

49
00:08:23,639 --> 00:08:25,099
Oracle implementation

50
00:08:25,099 --> 00:08:29,699
dkg it is not very normal and it has

51
00:08:29,699 --> 00:08:31,500
been shown and studied indeed previous

52
00:08:31,500 --> 00:08:34,919
studies but our attraction over the

53
00:08:34,919 --> 00:08:37,620
higher applicability and reality to

54
00:08:37,620 --> 00:08:41,399
Industry so our attack can achieve the

55
00:08:41,399 --> 00:08:45,320
data out of now in terms

56
00:08:47,700 --> 00:08:50,700
technique

57
00:09:06,560 --> 00:09:08,279
all right

58
00:09:08,279 --> 00:09:11,100
because the new providing device for

59
00:09:11,100 --> 00:09:12,360
profiling

60
00:09:12,360 --> 00:09:16,760
not sure thanks to the deal capability

61
00:09:16,820 --> 00:09:18,899
applicable to the protected

62
00:09:18,899 --> 00:09:21,000
implementations including the masked one

63
00:09:21,000 --> 00:09:23,660
and

64
00:09:23,660 --> 00:09:27,560
I are in principle

65
00:09:32,660 --> 00:09:35,220
including protected ones

66
00:09:35,220 --> 00:09:38,220
measure

67
00:09:50,700 --> 00:09:54,000
anyway I introduced the PC work which

68
00:09:54,000 --> 00:09:57,080
breaks an essential role in this talk

69
00:09:57,080 --> 00:10:00,120
is the time the decoration work which is

70
00:10:00,120 --> 00:10:01,740
the binary information will become

71
00:10:01,740 --> 00:10:03,180
declaration results

72
00:10:03,180 --> 00:10:06,180
foreign

73
00:10:17,880 --> 00:10:21,240
so in cubic analysis PCR can be extended

74
00:10:21,240 --> 00:10:25,260
for the inverted type of the East

75
00:10:25,260 --> 00:10:30,420
but if uh apocal uses the C Prime I have

76
00:10:30,420 --> 00:10:31,440
a multiplication of the product

77
00:10:31,440 --> 00:10:33,019
cyphatics to see

78
00:10:33,019 --> 00:10:37,260
if the attacker is this impractical text

79
00:10:37,260 --> 00:10:40,320
to the PC work so it returns by an

80
00:10:40,320 --> 00:10:42,440
information

81
00:10:44,120 --> 00:10:46,620
regard of the indirect ciphertext

82
00:10:46,620 --> 00:10:49,920
according to the original parenthesis

83
00:10:49,920 --> 00:10:52,920
distribution

84
00:11:01,740 --> 00:11:06,320
in fact there are exists

85
00:11:06,680 --> 00:11:10,079
at the southern recipient candidates

86
00:11:10,079 --> 00:11:13,339
except for Christmas

87
00:11:14,640 --> 00:11:18,959
uh I explained uh krpg on that Space apk

88
00:11:18,959 --> 00:11:22,040
is for example

89
00:11:33,200 --> 00:11:36,800
[Music]

90
00:11:36,800 --> 00:11:39,779
before the decode

91
00:11:39,779 --> 00:11:42,360
I mean this battle is the of course the

92
00:11:42,360 --> 00:11:44,180
secretary dependent

93
00:11:44,180 --> 00:11:45,740
s

94
00:11:45,740 --> 00:11:49,040
to uh

95
00:11:56,120 --> 00:12:00,260
pke and in this case

96
00:12:29,579 --> 00:12:32,579


97
00:12:39,000 --> 00:12:42,000
competition

98
00:12:42,860 --> 00:12:45,929
[Music]

99
00:12:49,019 --> 00:12:51,600
so if you adapt to previously uh input

100
00:12:51,600 --> 00:12:53,459
psychotics defined here they are

101
00:12:53,459 --> 00:12:55,320
dividing parent texture is given by this

102
00:12:55,320 --> 00:12:57,660
table and depending on the security key

103
00:12:57,660 --> 00:13:00,300
value and the value of the P so due to

104
00:13:00,300 --> 00:13:04,219
the pre uh checking the parenthesis

105
00:13:08,220 --> 00:13:11,220
candidates

106
00:13:16,079 --> 00:13:19,079
PKS

107
00:13:27,180 --> 00:13:28,740
I basically

108
00:13:28,740 --> 00:13:30,740
um

109
00:13:37,820 --> 00:13:43,279
large the number of uh uh

110
00:13:44,360 --> 00:13:48,899
it becomes greater as the site has a

111
00:13:48,899 --> 00:13:52,620
smaller store value in this table

112
00:13:52,620 --> 00:13:54,800
foreign

113
00:14:21,120 --> 00:14:24,179
[Music]

114
00:14:25,880 --> 00:14:27,600
algorithm

115
00:14:27,600 --> 00:14:30,600
so intuitively the best kind of this

116
00:14:30,600 --> 00:14:35,600
transformation is a verified

117
00:14:35,600 --> 00:14:39,360
to stop to how to put the priority

118
00:14:39,360 --> 00:14:40,620
system for the inverted psychologist

119
00:14:40,620 --> 00:14:43,320
like uh current temperature against for

120
00:14:43,320 --> 00:14:45,600
the injection attacks

121
00:14:45,600 --> 00:14:47,940
so uh reinforce to perform the pka

122
00:14:47,940 --> 00:14:50,279
decryption are using the secret key and

123
00:14:50,279 --> 00:14:52,920
uh some input Cipher text I'm a really

124
00:14:52,920 --> 00:14:57,420
orbital parameters integration result

125
00:14:57,420 --> 00:15:00,420
text

126
00:15:03,360 --> 00:15:07,320
yeah this procedure is a completely same

127
00:15:07,320 --> 00:15:10,560
as the key encapsulation so if I thought

128
00:15:10,560 --> 00:15:12,899
possible with the random order on the

129
00:15:12,899 --> 00:15:15,440
plane tickets

130
00:15:17,120 --> 00:15:20,639
and opening randomness

131
00:15:20,639 --> 00:15:22,760
so this is

132
00:15:22,760 --> 00:15:25,440
generated summary by key interpolation

133
00:15:25,440 --> 00:15:28,139
the result of the inclusion should be

134
00:15:28,139 --> 00:15:31,380
equal to the input cyphatics to

135
00:15:31,380 --> 00:15:33,000
otherwise vertical

136
00:15:33,000 --> 00:15:36,959
so in fact uh equality between input and

137
00:15:36,959 --> 00:15:38,880
reincipated cyphatic

138
00:15:38,880 --> 00:15:43,560
then it Decor we compute and automate

139
00:15:43,560 --> 00:15:45,260
the shared Secret at around six

140
00:15:45,260 --> 00:15:48,300
otherwise uh are the bits uh see the

141
00:15:48,300 --> 00:15:51,300
random number what is action simple

142
00:15:51,300 --> 00:15:52,980
so now I'll explain the proposal

143
00:15:52,980 --> 00:15:54,560
methodology

144
00:15:54,560 --> 00:15:57,120
is the expecting

145
00:15:57,120 --> 00:15:58,920
which are in the encryption to implement

146
00:15:58,920 --> 00:16:03,839
PC worker so uh the kmb the parametric

147
00:16:03,839 --> 00:16:06,600
horizontal and in Prime with the pka

148
00:16:06,600 --> 00:16:07,980
decoration result

149
00:16:07,980 --> 00:16:11,339
so I was talking about the piano

150
00:16:11,339 --> 00:16:14,399
um Prime

151
00:16:16,500 --> 00:16:20,519
so if we can distinguish the pr request

152
00:16:20,519 --> 00:16:22,920
input from the five generations but we

153
00:16:22,920 --> 00:16:27,540
can implement the PC uh checking worker

154
00:16:27,540 --> 00:16:31,560
so namely uh if we distinguish two key

155
00:16:31,560 --> 00:16:33,779
feeds from cyber authorities so One

156
00:16:33,779 --> 00:16:36,139
cases

157
00:16:41,600 --> 00:16:45,480
to the 4C the other right they are

158
00:16:45,480 --> 00:16:47,660
different

159
00:16:48,360 --> 00:16:51,360
implementation

160
00:17:03,740 --> 00:17:06,740
is

161
00:17:08,599 --> 00:17:11,760
the first general attacks and consists

162
00:17:11,760 --> 00:17:13,740
of the confounding effect on the attack

163
00:17:13,740 --> 00:17:15,059
phase

164
00:17:15,059 --> 00:17:17,780
foreign

165
00:17:38,360 --> 00:17:41,340
in addition we also repeated to generate

166
00:17:41,340 --> 00:17:43,919
uh in order to generate long-termatics

167
00:17:43,919 --> 00:17:47,280
to see and the queries to the Target

168
00:17:47,280 --> 00:17:49,559
device and acquire your hydrogen

169
00:17:49,559 --> 00:17:53,419
authorities this type of generator is

170
00:17:53,419 --> 00:17:56,520
not equal to imply

171
00:17:56,520 --> 00:17:58,380
but usually reduce the operating data

172
00:17:58,380 --> 00:18:00,380
set uh returns

173
00:18:00,380 --> 00:18:03,860
to distinguish

174
00:18:03,860 --> 00:18:06,480
foreign Trace

175
00:18:06,480 --> 00:18:09,480
place

176
00:18:25,100 --> 00:18:29,659
it to the Target device

177
00:18:33,860 --> 00:18:37,620
then we perform uh inference of the

178
00:18:37,620 --> 00:18:39,539
neural network to estimate the

179
00:18:39,539 --> 00:18:42,179
probability of the P2 decoration is that

180
00:18:42,179 --> 00:18:45,360
being the N or not

181
00:18:45,360 --> 00:18:46,860
foreign

182
00:18:46,860 --> 00:18:50,400
uh this is a performing attack but it is

183
00:18:50,400 --> 00:18:51,840
providing it can be confirmed the

184
00:18:51,840 --> 00:18:53,959
results

185
00:18:55,050 --> 00:19:00,260
[Music]

186
00:19:00,260 --> 00:19:03,679
in principle

187
00:19:03,780 --> 00:19:06,860
and uh we now um

188
00:19:06,860 --> 00:19:09,660
the feasibility and effectiveness of the

189
00:19:09,660 --> 00:19:15,260
attack experiment is implementation

190
00:19:15,260 --> 00:19:18,419
implementation are listed here you know

191
00:19:18,419 --> 00:19:22,700
anything is not measure uh

192
00:19:22,700 --> 00:19:26,700
so useful for the peer implementation in

193
00:19:26,700 --> 00:19:30,320
the context of the post Quantum again

194
00:19:34,580 --> 00:19:37,200
the major instrumental to keep primitive

195
00:19:37,200 --> 00:19:40,679
uh use the study on the develop below

196
00:19:40,679 --> 00:19:43,080
for working time

197
00:19:43,080 --> 00:19:46,080
study

198
00:19:46,710 --> 00:19:49,829
[Music]

199
00:20:00,539 --> 00:20:04,080
so this is the information without using

200
00:20:04,080 --> 00:20:06,419
700 speculative

201
00:20:06,419 --> 00:20:09,960
so we can achieve the uh accuracy for

202
00:20:09,960 --> 00:20:11,880
the non-particle implementations and

203
00:20:11,880 --> 00:20:13,980
protected implementation a protected

204
00:20:13,980 --> 00:20:17,280
software so always the population for

205
00:20:17,280 --> 00:20:18,900
the president the hardware is not very

206
00:20:18,900 --> 00:20:21,140
high

207
00:20:29,120 --> 00:20:30,960
so all

208
00:20:30,960 --> 00:20:32,960
right

209
00:20:37,160 --> 00:20:41,179
the completely correct location

210
00:20:43,580 --> 00:20:46,080
implementation the basis on majority

211
00:20:46,080 --> 00:20:48,960
voting or likelihood ratio test from

212
00:20:48,960 --> 00:20:51,539
multiple important results

213
00:20:51,539 --> 00:20:54,539
successful

214
00:21:20,220 --> 00:21:23,329
[Music]

215
00:21:25,640 --> 00:21:28,860
implementation is only two traces for

216
00:21:28,860 --> 00:21:31,980
non-protected implementation and five

217
00:21:31,980 --> 00:21:34,799
times even for protected software so

218
00:21:34,799 --> 00:21:37,220
this is the average using uh

219
00:21:37,220 --> 00:21:41,280
with this 1000 test traces

220
00:21:41,280 --> 00:21:44,280
attack

221
00:21:56,039 --> 00:22:00,320
I'll just try to show the final results

222
00:22:07,140 --> 00:22:08,100
hmm

223
00:22:08,100 --> 00:22:10,380
but these bodies are derived at the

224
00:22:10,380 --> 00:22:14,240
product of the number three is foreign

225
00:22:23,780 --> 00:22:25,679
stable

226
00:22:25,679 --> 00:22:27,960
I'll understand that my talk so do you

227
00:22:27,960 --> 00:22:31,260
think so for the CCS activity but it

228
00:22:31,260 --> 00:22:34,080
representative brexit security for

229
00:22:34,080 --> 00:22:35,700
Einstein attack

230
00:22:35,700 --> 00:22:37,700
s

231
00:22:39,260 --> 00:22:44,179
because we also confirmed the

232
00:22:49,140 --> 00:22:51,360
appreciative implementation

233
00:22:51,360 --> 00:22:54,360
and

234
00:23:00,320 --> 00:23:05,460
uh related to attack uh the idea to do

235
00:23:05,460 --> 00:23:06,659
the proposed attack

236
00:23:06,659 --> 00:23:08,340
and that's all thank you for your

237
00:23:08,340 --> 00:23:10,580
attention

238
00:23:17,220 --> 00:23:20,460
okay we have a couple of minutes left

239
00:23:20,460 --> 00:23:23,720
for questions any questions

240
00:23:25,200 --> 00:23:27,980
you know

241
00:23:39,900 --> 00:23:41,900
um

242
00:23:55,919 --> 00:23:58,620
uh sorry the sound is not very curious

243
00:23:58,620 --> 00:24:01,399
so please

244
00:24:03,179 --> 00:24:05,280
the reason why the ti implement

245
00:24:05,280 --> 00:24:07,919
s better than masking

246
00:24:07,919 --> 00:24:11,460
uh so the question is uh why the search

247
00:24:11,460 --> 00:24:13,380
of the implementation is better yeah

248
00:24:13,380 --> 00:24:18,000
okay uh I think it's all I use the

249
00:24:18,000 --> 00:24:21,480
digital explanatory condition and I use

250
00:24:21,480 --> 00:24:25,500
the embedded Army microcontroller and I

251
00:24:25,500 --> 00:24:29,299
because in my case uh

252
00:24:35,360 --> 00:24:38,520
to the uh

253
00:24:38,520 --> 00:24:41,760
uh for this discarding the uh key uh

254
00:24:41,760 --> 00:24:44,220
distinguished attack for the threshold

255
00:24:44,220 --> 00:24:46,440
implementation as the note is very

256
00:24:46,440 --> 00:24:48,720
important for them protecting

257
00:24:48,720 --> 00:24:52,520
incrementation by masklog

258
00:24:55,020 --> 00:24:57,539
okay then uh I think some time is up

259
00:24:57,539 --> 00:25:00,559
let's thank Ray again

260
00:25:24,720 --> 00:25:30,240
and next up we have Morgan Monroe uh who

261
00:25:30,240 --> 00:25:32,039
is presenting their work on the hill

262
00:25:32,039 --> 00:25:35,400
hidden pearlite parallel pipe that is

263
00:25:35,400 --> 00:25:40,520
back again power analysis on falcon

264
00:25:44,240 --> 00:25:47,820
yes thank you for the introduction so

265
00:25:47,820 --> 00:25:50,700
today I'm going to

266
00:25:50,700 --> 00:25:52,980
to get and target with my cable items

267
00:25:52,980 --> 00:25:55,020
but so today I'm going to present you a

268
00:25:55,020 --> 00:25:56,960
joint work with um

269
00:25:56,960 --> 00:25:59,760
Melissa Rossi which is called the hidden

270
00:25:59,760 --> 00:26:02,100
pipette is back again power analysis tax

271
00:26:02,100 --> 00:26:03,900
on falcon

272
00:26:03,900 --> 00:26:06,740
so Falcon is

273
00:26:06,740 --> 00:26:09,360
analysis it was recently solidized by

274
00:26:09,360 --> 00:26:11,880
the news this summer and today I'm going

275
00:26:11,880 --> 00:26:13,620
to present you to power analysis attacks

276
00:26:13,620 --> 00:26:15,840
on the scheme the first one is an

277
00:26:15,840 --> 00:26:17,460
efficient GPA attack on the premage

278
00:26:17,460 --> 00:26:19,559
computation and the second one is a

279
00:26:19,559 --> 00:26:21,120
single trace analysis and the trader

280
00:26:21,120 --> 00:26:23,580
sampler leading to a hidden pipette

281
00:26:23,580 --> 00:26:25,940
problem attack

282
00:26:25,940 --> 00:26:29,340
so uh for those who are not familiar

283
00:26:29,340 --> 00:26:31,320
with Nazis and who like me still

284
00:26:31,320 --> 00:26:33,539
confused let's use some latches I'm

285
00:26:33,539 --> 00:26:34,559
going to

286
00:26:34,559 --> 00:26:37,080
I'm going to put some slide but um what

287
00:26:37,080 --> 00:26:39,360
latches-based cryptography is

288
00:26:39,360 --> 00:26:41,279
um so let's say the cryptography we have

289
00:26:41,279 --> 00:26:43,679
a program which is uh the closest Vector

290
00:26:43,679 --> 00:26:46,200
problem which is a very simple program

291
00:26:46,200 --> 00:26:48,000
um given a large is Lambda and a vector

292
00:26:48,000 --> 00:26:50,580
scene or n fine vector v in lambdas at

293
00:26:50,580 --> 00:26:53,539
that the distance between VNC is minimal

294
00:26:53,539 --> 00:26:56,340
CVP is easy to solve the good basis but

295
00:26:56,340 --> 00:26:59,580
it's hard to solve with a bad basis

296
00:26:59,580 --> 00:27:01,620
um so here we get a basic signature

297
00:27:01,620 --> 00:27:03,480
scheme first we come back to as a

298
00:27:03,480 --> 00:27:06,000
message to sign to Vector scene RN then

299
00:27:06,000 --> 00:27:07,620
we use a good basis which is going to be

300
00:27:07,620 --> 00:27:11,520
the secret key to the CVP and the

301
00:27:11,520 --> 00:27:12,779
signature is going to be the solution to

302
00:27:12,779 --> 00:27:14,760
CVP so it's going to be a vector v and

303
00:27:14,760 --> 00:27:17,039
anyone can verify uh the signature V

304
00:27:17,039 --> 00:27:18,419
with the bad guys this is going to be

305
00:27:18,419 --> 00:27:19,860
the public

306
00:27:19,860 --> 00:27:22,559
of course you must have the property

307
00:27:22,559 --> 00:27:23,940
that it is hard to derivate the good

308
00:27:23,940 --> 00:27:25,500
basis from the bad basis if you want to

309
00:27:25,500 --> 00:27:26,960
have a secure scheme

310
00:27:26,960 --> 00:27:29,039
so I'm going to speak about entry sign

311
00:27:29,039 --> 00:27:31,679
and GTH who wrote the first let's based

312
00:27:31,679 --> 00:27:33,120
signature scheme and were kind of

313
00:27:33,120 --> 00:27:35,279
ancestors to Falcon

314
00:27:35,279 --> 00:27:37,620
um so first step is you first from your

315
00:27:37,620 --> 00:27:39,539
message M you add it to a point C

316
00:27:39,539 --> 00:27:42,299
belonging to Z then you use a round of

317
00:27:42,299 --> 00:27:45,120
algorithm to actually serve CLP and find

318
00:27:45,120 --> 00:27:46,559
the signature so the signature is

319
00:27:46,559 --> 00:27:49,380
completed as follows with this private

320
00:27:49,380 --> 00:27:50,299
basis

321
00:27:50,299 --> 00:27:53,880
and you have that um since since s is

322
00:27:53,880 --> 00:27:55,559
the closest Vector to C you have that s

323
00:27:55,559 --> 00:27:57,600
minus C belongs to the fundamental

324
00:27:57,600 --> 00:28:01,100
participate span by B and that is that

325
00:28:01,100 --> 00:28:04,200
uh which is embarrassing because uh if

326
00:28:04,200 --> 00:28:07,200
you get many signatures of ggiation and

327
00:28:07,200 --> 00:28:10,440
you display them uh you will get this um

328
00:28:10,440 --> 00:28:12,900
hidden palette iPad rebuild and that's

329
00:28:12,900 --> 00:28:14,460
how we get to the hidden pipeline

330
00:28:14,460 --> 00:28:16,620
problem which is to recoverably which is

331
00:28:16,620 --> 00:28:18,480
secreted by this article from

332
00:28:18,480 --> 00:28:20,820
independent samples drawn uniformly in a

333
00:28:20,820 --> 00:28:23,520
very pipe spine by B so this was an

334
00:28:23,520 --> 00:28:25,679
attack presented by NBN Adventure in

335
00:28:25,679 --> 00:28:30,900
2006 uh so emphasize were totally broken

336
00:28:30,900 --> 00:28:32,159
um so they came up with some country

337
00:28:32,159 --> 00:28:34,200
measure one of them was to add small

338
00:28:34,200 --> 00:28:36,059
perturbation to the round of algorithm

339
00:28:36,059 --> 00:28:38,460
so that doesn't look like a parallel

340
00:28:38,460 --> 00:28:41,400
pipette anymore but so um you can even

341
00:28:41,400 --> 00:28:43,020
came up with a different pirate thyroid

342
00:28:43,020 --> 00:28:45,900
problem which is the same at HPP but

343
00:28:45,900 --> 00:28:47,520
when the partial perturbation is applied

344
00:28:47,520 --> 00:28:49,620
during the round of algorithm

345
00:28:49,620 --> 00:28:51,900
uh so it's not an efficient

346
00:28:51,900 --> 00:28:53,220
controversial but it's an efficient

347
00:28:53,220 --> 00:28:55,740
counter measure is the GPB framework uh

348
00:28:55,740 --> 00:28:57,360
which consists in replacing the one buff

349
00:28:57,360 --> 00:28:59,760
algorithm by Travis sampler so that s is

350
00:28:59,760 --> 00:29:02,580
not always the closest vector to the

351
00:29:02,580 --> 00:29:03,779
message

352
00:29:03,779 --> 00:29:06,360
all right and and this is what you get

353
00:29:06,360 --> 00:29:07,980
when you use a GPU framework and doesn't

354
00:29:07,980 --> 00:29:10,020
look like a pipette anymore so we're

355
00:29:10,020 --> 00:29:13,860
fine uh at least value we're fine

356
00:29:13,860 --> 00:29:15,480
um so Falcon is an instantiation of the

357
00:29:15,480 --> 00:29:18,000
GPU framework with Central lattices uh

358
00:29:18,000 --> 00:29:20,159
so you have the private key uh flowing

359
00:29:20,159 --> 00:29:22,500
from you have um it's composed of four

360
00:29:22,500 --> 00:29:24,419
little polynomials uh belonging to R

361
00:29:24,419 --> 00:29:25,799
which satisfies the entry equation

362
00:29:25,799 --> 00:29:27,659
written on the slide

363
00:29:27,659 --> 00:29:29,520
this private basis is only the

364
00:29:29,520 --> 00:29:32,880
combination of those polynomials uh one

365
00:29:32,880 --> 00:29:34,500
interesting fact is that you should take

366
00:29:34,500 --> 00:29:35,940
the first row of the private basis you

367
00:29:35,940 --> 00:29:38,100
actually have all the coefficients of G

368
00:29:38,100 --> 00:29:40,260
and F so um every row of the private

369
00:29:40,260 --> 00:29:42,960
basis is um enough to recover the secret

370
00:29:42,960 --> 00:29:45,840
key uh the world secret key

371
00:29:45,840 --> 00:29:48,600
and here we get to the signing algorithm

372
00:29:48,600 --> 00:29:51,240
in itself so first it's inside algorithm

373
00:29:51,240 --> 00:29:53,279
so for us to draw random sound then you

374
00:29:53,279 --> 00:29:55,500
actually message to a point uh then you

375
00:29:55,500 --> 00:29:57,539
compute the prime HD with the help of

376
00:29:57,539 --> 00:29:59,700
the private basis and then you actually

377
00:29:59,700 --> 00:30:02,100
solve CVP uh with a Trader sampler which

378
00:30:02,100 --> 00:30:03,480
is called FF sampling in the case of

379
00:30:03,480 --> 00:30:04,980
Falcon

380
00:30:04,980 --> 00:30:06,779
um and finally you compute the remaining

381
00:30:06,779 --> 00:30:09,120
of the signature and you return it if

382
00:30:09,120 --> 00:30:10,799
you want to dive a little more into the

383
00:30:10,799 --> 00:30:13,500
details of what is the FF sampling uh

384
00:30:13,500 --> 00:30:16,980
well you have um a succession of sample

385
00:30:16,980 --> 00:30:18,899
uh called in the sampling routing so the

386
00:30:18,899 --> 00:30:20,700
first one is a FF sampling which itself

387
00:30:20,700 --> 00:30:22,559
called the sample Z which is safe codes

388
00:30:22,559 --> 00:30:24,659
the base on Pro the based on press very

389
00:30:24,659 --> 00:30:26,700
basic it's a present integer following

390
00:30:26,700 --> 00:30:29,279
uh add discrete version distribution so

391
00:30:29,279 --> 00:30:31,080
terminal zero with um fixed on the

392
00:30:31,080 --> 00:30:33,659
deviation then it returns Z Plus the

393
00:30:33,659 --> 00:30:36,059
sample Z uses Z Plus to return another

394
00:30:36,059 --> 00:30:38,399
integer sampler with another version

395
00:30:38,399 --> 00:30:40,440
distribution and so on until we get back

396
00:30:40,440 --> 00:30:43,559
to Falcon and with a vector v which

397
00:30:43,559 --> 00:30:45,840
actually serves CVP but not exactly

398
00:30:45,840 --> 00:30:47,100
substitutely because we do not want

399
00:30:47,100 --> 00:30:49,140
exactly the process Vector but you get

400
00:30:49,140 --> 00:30:51,600
it uh and now I'm going to present you

401
00:30:51,600 --> 00:30:52,980
our first attack which has nothing to do

402
00:30:52,980 --> 00:30:54,720
with product iPad

403
00:30:54,720 --> 00:30:56,279
um is the power analysis and the frame

404
00:30:56,279 --> 00:30:58,440
is computation so it's a first step um

405
00:30:58,440 --> 00:31:00,960
on the on the signature computation I

406
00:31:00,960 --> 00:31:03,059
mean the first step is a computation but

407
00:31:03,059 --> 00:31:07,260
I'm not going to to break uh Shake

408
00:31:07,260 --> 00:31:08,580
so

409
00:31:08,580 --> 00:31:10,919
um we present you here an improvement of

410
00:31:10,919 --> 00:31:14,159
an attack from Calgary to nasu from last

411
00:31:14,159 --> 00:31:15,960
year it was a differential power

412
00:31:15,960 --> 00:31:17,220
analysis on the polynomial

413
00:31:17,220 --> 00:31:19,380
multiplication in fft representation

414
00:31:19,380 --> 00:31:22,140
between a public digest c and a private

415
00:31:22,140 --> 00:31:23,840
polynomial f

416
00:31:23,840 --> 00:31:26,640
and we present with three improvements

417
00:31:26,640 --> 00:31:29,159
to this attack the first one is that we

418
00:31:29,159 --> 00:31:30,840
lower the complexity of exhaustive

419
00:31:30,840 --> 00:31:33,299
search uh because we are since we are

420
00:31:33,299 --> 00:31:34,440
dealing with polynomial in fft

421
00:31:34,440 --> 00:31:36,419
representation uh we are dealing with

422
00:31:36,419 --> 00:31:38,700
floating Point arithmetics

423
00:31:38,700 --> 00:31:41,399
um but we show that uh we actually don't

424
00:31:41,399 --> 00:31:44,159
need the double Precision to recover the

425
00:31:44,159 --> 00:31:46,860
key so we do not need to recover the 52

426
00:31:46,860 --> 00:31:49,100
bits of the men's decide to do it

427
00:31:49,100 --> 00:31:51,480
then we prove the way to add the number

428
00:31:51,480 --> 00:31:52,919
of require Traces by combinating

429
00:31:52,919 --> 00:31:55,679
patterns uh against Universe since we

430
00:31:55,679 --> 00:31:58,020
are doing since we are dealing with um

431
00:31:58,020 --> 00:31:59,880
polynomial multiplication in fft we're

432
00:31:59,880 --> 00:32:02,000
doing with complex numbers so there are

433
00:32:02,000 --> 00:32:04,020
multiplication between complex numbers

434
00:32:04,020 --> 00:32:06,600
so you have a lot of intermediary

435
00:32:06,600 --> 00:32:08,460
operation involving real pot and

436
00:32:08,460 --> 00:32:10,020
marginal report and you can use all

437
00:32:10,020 --> 00:32:13,440
those operations uh to increase the data

438
00:32:13,440 --> 00:32:15,419
available and reduce the number of power

439
00:32:15,419 --> 00:32:18,679
traces you need to generate

440
00:32:18,980 --> 00:32:22,200
by grouping similar challenges uh so we

441
00:32:22,200 --> 00:32:23,820
can make an average of our traces to

442
00:32:23,820 --> 00:32:25,860
cancel the noise and that's a reason to

443
00:32:25,860 --> 00:32:26,899
get so

444
00:32:26,899 --> 00:32:29,820
in particular you can see that we are at

445
00:32:29,820 --> 00:32:32,820
a theoretical claim of advising by 200

446
00:32:32,820 --> 00:32:35,220
of query traces uh by Community person

447
00:32:35,220 --> 00:32:38,220
and historical claim is um supported by

448
00:32:38,220 --> 00:32:40,380
experimental results

449
00:32:40,380 --> 00:32:42,659
and I'm going to go back to the Hidden

450
00:32:42,659 --> 00:32:44,159
Valley pipette attack which is on the

451
00:32:44,159 --> 00:32:46,760
Trap the sample

452
00:32:47,220 --> 00:32:48,720
um so it's the first step attack first

453
00:32:48,720 --> 00:32:51,000
uh we are going to do a side Channel

454
00:32:51,000 --> 00:32:53,399
analysis on the best sampler which is um

455
00:32:53,399 --> 00:32:55,620
so the BR one of the brick of the which

456
00:32:55,620 --> 00:32:58,200
is Sabina Falcon to recover sumpers then

457
00:32:58,200 --> 00:32:59,520
we are going to use those in the

458
00:32:59,520 --> 00:33:01,200
majority sample to disclose a different

459
00:33:01,200 --> 00:33:04,380
parallel iPad then we are going to apply

460
00:33:04,380 --> 00:33:07,980
HPP solver on the filter signature and

461
00:33:07,980 --> 00:33:10,620
finally we are going to recovery and

462
00:33:10,620 --> 00:33:12,419
with our result classes magic it is up

463
00:33:12,419 --> 00:33:15,080
to the reader

464
00:33:15,419 --> 00:33:17,760
so it's based on player is a live brick

465
00:33:17,760 --> 00:33:20,519
of the Falcon sampling routines very

466
00:33:20,519 --> 00:33:24,000
basic one record that has a fixed mean

467
00:33:24,000 --> 00:33:27,140
and a fixed standard deviation

468
00:33:27,299 --> 00:33:30,419
so here is the algorithm first you draw

469
00:33:30,419 --> 00:33:32,880
some uniform bits and then you are going

470
00:33:32,880 --> 00:33:34,919
to go through um reverse cumulative

471
00:33:34,919 --> 00:33:36,960
distribution table and you are going to

472
00:33:36,960 --> 00:33:38,940
compare your area to every entry of the

473
00:33:38,940 --> 00:33:41,159
table and if the earlier is lesser than

474
00:33:41,159 --> 00:33:42,600
the entry of the table you are going to

475
00:33:42,600 --> 00:33:45,899
increment a count of Z Plus uh and then

476
00:33:45,899 --> 00:33:48,299
you're going to return the Z Plus

477
00:33:48,299 --> 00:33:50,760
and the trick is that um the comparison

478
00:33:50,760 --> 00:33:52,799
is the info is in fact free successive

479
00:33:52,799 --> 00:33:55,799
subtraction and 24 bit values expressing

480
00:33:55,799 --> 00:33:58,980
words the underflow and a decision to be

481
00:33:58,980 --> 00:34:02,820
leaky um to to borrow analysis because

482
00:34:02,820 --> 00:34:04,860
when you have a number flow you have a

483
00:34:04,860 --> 00:34:06,600
very high difference in earning weight

484
00:34:06,600 --> 00:34:08,760
and there was an attack from Human Ong

485
00:34:08,760 --> 00:34:09,619
in 2018

486
00:34:09,619 --> 00:34:12,418
it was an attack on another schemes

487
00:34:12,418 --> 00:34:14,699
attack on further Kim but since Frodo

488
00:34:14,699 --> 00:34:18,480
Kim uh in Falcon uses the same kind of

489
00:34:18,480 --> 00:34:20,639
sample we showed that this attack was

490
00:34:20,639 --> 00:34:22,980
also applicable to Falcon

491
00:34:22,980 --> 00:34:25,020
and so we are able to choose the value

492
00:34:25,020 --> 00:34:26,399
of the Z Plus through single trace

493
00:34:26,399 --> 00:34:27,480
analysis

494
00:34:27,480 --> 00:34:29,460
so now that we have the value of this

495
00:34:29,460 --> 00:34:31,800
address what do we do with that

496
00:34:31,800 --> 00:34:33,000
well

497
00:34:33,000 --> 00:34:33,960
um

498
00:34:33,960 --> 00:34:37,199
the way that Falcon sub CVP problem can

499
00:34:37,199 --> 00:34:39,060
be seen as a shifted nervous plane

500
00:34:39,060 --> 00:34:41,760
algorithm so before finding the closest

501
00:34:41,760 --> 00:34:43,260
Vector treaty you are first going to

502
00:34:43,260 --> 00:34:46,560
apply a translation Z to T to shift it

503
00:34:46,560 --> 00:34:48,659
in the space and then you are going to

504
00:34:48,659 --> 00:34:50,699
actually search CBP for C Prime which is

505
00:34:50,699 --> 00:34:53,899
a shifted Vector of t

506
00:34:54,300 --> 00:34:56,760
um but that is simple according to a

507
00:34:56,760 --> 00:34:58,560
version distribution sector not zero so

508
00:34:58,560 --> 00:35:01,859
Z can be r0 so what happens if Z is all

509
00:35:01,859 --> 00:35:05,400
zero well if Z are zero then is not

510
00:35:05,400 --> 00:35:07,920
shifted at all and if T is not shifted

511
00:35:07,920 --> 00:35:09,660
at all then you have actually solved

512
00:35:09,660 --> 00:35:12,180
clip uh for the message and if you

513
00:35:12,180 --> 00:35:13,800
return the closest Vector to the message

514
00:35:13,800 --> 00:35:16,380
well we all know what happened uh you

515
00:35:16,380 --> 00:35:19,140
have the hidden title back again

516
00:35:19,140 --> 00:35:22,619
so that's Ian red uh uh I proceed all

517
00:35:22,619 --> 00:35:24,660
the signatures of Falcon and then in red

518
00:35:24,660 --> 00:35:26,700
uh we proceed the signature with all the

519
00:35:26,700 --> 00:35:28,920
Z plus I equal to zero so you can you

520
00:35:28,920 --> 00:35:31,500
can see that the hidden iPad is in fact

521
00:35:31,500 --> 00:35:33,420
disclosed

522
00:35:33,420 --> 00:35:35,339
um but we cannot really

523
00:35:35,339 --> 00:35:37,320
um expect also Z Plus to be zero in very

524
00:35:37,320 --> 00:35:39,359
I Dimension I mean in dimension two it's

525
00:35:39,359 --> 00:35:41,400
reasonable but it's in dimension uh 500

526
00:35:41,400 --> 00:35:44,940
and more it is not so we are going to be

527
00:35:44,940 --> 00:35:46,920
less demanding and only

528
00:35:46,920 --> 00:35:50,400
um require than one that I is zero

529
00:35:50,400 --> 00:35:52,680
so I approach it what happens when only

530
00:35:52,680 --> 00:35:55,380
one that plus zero is zero in this case

531
00:35:55,380 --> 00:35:57,180
you can see that um

532
00:35:57,180 --> 00:35:59,820
Superior pipette is not as nice as

533
00:35:59,820 --> 00:36:02,400
before it's kind of different but

534
00:36:02,400 --> 00:36:05,700
luckily first we have a paper published

535
00:36:05,700 --> 00:36:08,940
by educa and ngn in 2012 and telling us

536
00:36:08,940 --> 00:36:10,800
how to deal with different pipette

537
00:36:10,800 --> 00:36:13,020
problem

538
00:36:13,020 --> 00:36:15,180
so now we are going to replace HPP

539
00:36:15,180 --> 00:36:17,700
servers for different parallel pipeline

540
00:36:17,700 --> 00:36:18,780
um if you want to know how many

541
00:36:18,780 --> 00:36:20,640
signature we are going to keep well we

542
00:36:20,640 --> 00:36:23,220
have this nice calculation below we can

543
00:36:23,220 --> 00:36:26,400
see between a 40 to 55 percent of the

544
00:36:26,400 --> 00:36:28,880
signatures

545
00:36:29,880 --> 00:36:32,339
um one difference between the original

546
00:36:32,339 --> 00:36:36,300
paper of the HPP server and our case is

547
00:36:36,300 --> 00:36:38,640
that the nearest plane algorithm doesn't

548
00:36:38,640 --> 00:36:41,880
choose um B to solve CPP choose B type

549
00:36:41,880 --> 00:36:46,619
the DSO of B and so uh signal does not

550
00:36:46,619 --> 00:36:49,440
belong to uh the iPad stand by B as I

551
00:36:49,440 --> 00:36:51,060
belong to the Prototype it's fine by

552
00:36:51,060 --> 00:36:52,500
b-tile

553
00:36:52,500 --> 00:36:54,359
and you can only retrieve rows of beta

554
00:36:54,359 --> 00:36:57,780
with HPP solver but we don't want for

555
00:36:57,780 --> 00:37:00,599
our B type we want rules of B uh but

556
00:37:00,599 --> 00:37:02,579
there is a useful observation that's

557
00:37:02,579 --> 00:37:04,200
because of the algorithm used in Falcon

558
00:37:04,200 --> 00:37:05,880
to compute the gso which is FFL

559
00:37:05,880 --> 00:37:07,619
algorithm

560
00:37:07,619 --> 00:37:09,780
um and so it computes in a with a train

561
00:37:09,780 --> 00:37:12,420
a recursive way and fancy stuff we have

562
00:37:12,420 --> 00:37:14,940
the following we have actually eight

563
00:37:14,940 --> 00:37:17,880
rows in the gso FB that are very similar

564
00:37:17,880 --> 00:37:20,280
to the original rule of B so we are

565
00:37:20,280 --> 00:37:21,960
going to focus on recovering those eight

566
00:37:21,960 --> 00:37:24,320
rows

567
00:37:24,420 --> 00:37:26,220
um so now that we have found those eight

568
00:37:26,220 --> 00:37:28,200
rules uh we need to recover the private

569
00:37:28,200 --> 00:37:28,980
key

570
00:37:28,980 --> 00:37:32,099
first we can combine we will combine the

571
00:37:32,099 --> 00:37:34,619
all the b l i that will recovered to

572
00:37:34,619 --> 00:37:36,660
attenuate the nodes of f and g

573
00:37:36,660 --> 00:37:39,900
and one interesting fact is that uh once

574
00:37:39,900 --> 00:37:41,880
we have recovered one in the eye

575
00:37:41,880 --> 00:37:42,440
um

576
00:37:42,440 --> 00:37:45,180
iteration of the HPP server will be much

577
00:37:45,180 --> 00:37:48,300
less costly uh because we will be able

578
00:37:48,300 --> 00:37:50,280
to start the gradient Descent of the bi

579
00:37:50,280 --> 00:37:52,320
we already recovered so it's almost free

580
00:37:52,320 --> 00:37:54,000
I said almost because you still have to

581
00:37:54,000 --> 00:37:57,720
compute the gramsmith um Matrix of the

582
00:37:57,720 --> 00:37:59,820
of the point

583
00:37:59,820 --> 00:38:01,740
and then we have two possible ways to

584
00:38:01,740 --> 00:38:04,619
recover the exact private key LG uh the

585
00:38:04,619 --> 00:38:06,599
first one is that we can recover it with

586
00:38:06,599 --> 00:38:08,820
me rounding when the when the error is

587
00:38:08,820 --> 00:38:11,520
small enough so that's nice and the

588
00:38:11,520 --> 00:38:13,140
second one is that we can serve a

589
00:38:13,140 --> 00:38:15,480
distorted uh bonding decoding distance

590
00:38:15,480 --> 00:38:18,960
instance uh that is that is Magic uh

591
00:38:18,960 --> 00:38:21,839
with vtlwe and futul

592
00:38:21,839 --> 00:38:24,119
and we get the following result in terms

593
00:38:24,119 --> 00:38:26,880
of a trade-off between computation and

594
00:38:26,880 --> 00:38:29,760
major signature uh what we can take from

595
00:38:29,760 --> 00:38:32,099
this graph is that starting with 5

596
00:38:32,099 --> 00:38:33,839
million of traces we can recover as a

597
00:38:33,839 --> 00:38:36,119
private key with me running and around

598
00:38:36,119 --> 00:38:38,700
one minute of traces which can have a

599
00:38:38,700 --> 00:38:40,320
reasonable Trader between a lattice

600
00:38:40,320 --> 00:38:44,599
reduction and a number of signatures

601
00:38:44,640 --> 00:38:46,740
so to conclude

602
00:38:46,740 --> 00:38:49,200
um so we presented you two different

603
00:38:49,200 --> 00:38:51,060
Power analysis attack on Falcon the

604
00:38:51,060 --> 00:38:52,920
first one is an improvement of a state

605
00:38:52,920 --> 00:38:55,619
of the Art Attack and so it was a brain

606
00:38:55,619 --> 00:38:57,060
computation and the second one the

607
00:38:57,060 --> 00:38:58,380
Traders employees another attack

608
00:38:58,380 --> 00:39:00,720
combining such an attack and hidden

609
00:39:00,720 --> 00:39:03,119
pipette program and it was also the

610
00:39:03,119 --> 00:39:05,220
first Power analysis to be performed on

611
00:39:05,220 --> 00:39:07,980
the Falcon straps sample

612
00:39:07,980 --> 00:39:10,740
uh concerning future Rock uh well we

613
00:39:10,740 --> 00:39:12,119
could imagine a template attack on the

614
00:39:12,119 --> 00:39:14,460
on some project which is a some projects

615
00:39:14,460 --> 00:39:16,079
before it's based on product because

616
00:39:16,079 --> 00:39:18,720
there are only limited possibility for

617
00:39:18,720 --> 00:39:21,359
the values of the sample or we can also

618
00:39:21,359 --> 00:39:23,820
Imagine a combination with them the

619
00:39:23,820 --> 00:39:26,040
attack from from Canal

620
00:39:26,040 --> 00:39:28,560
um 2020 which was dining attack on

621
00:39:28,560 --> 00:39:30,839
Falcon which is no longer possible

622
00:39:30,839 --> 00:39:33,060
because Falcon because um the sun proof

623
00:39:33,060 --> 00:39:35,220
icon is acronyms

624
00:39:35,220 --> 00:39:37,260
um but we could um replace the timing

625
00:39:37,260 --> 00:39:40,320
attack with the power analysis to get

626
00:39:40,320 --> 00:39:43,140
um to get the standard deviation and

627
00:39:43,140 --> 00:39:45,000
perform the attack if it were to be

628
00:39:45,000 --> 00:39:47,460
adapted in a way that um afford

629
00:39:47,460 --> 00:39:49,740
um Precision loss

630
00:39:49,740 --> 00:39:52,200
so thank you for your attention and do

631
00:39:52,200 --> 00:39:54,740
you have any question

632
00:40:00,420 --> 00:40:04,160
slots are there any questions

633
00:40:09,480 --> 00:40:11,100
Solutions

634
00:40:11,100 --> 00:40:14,400
[Music]

635
00:40:27,720 --> 00:40:29,780
uh yes can I yes

636
00:40:29,780 --> 00:40:32,220
we combine the multiplication between

637
00:40:32,220 --> 00:40:34,500
the imaginary part and the real part of

638
00:40:34,500 --> 00:40:37,140
the of the of the coefficient of the

639
00:40:37,140 --> 00:40:38,220
secret polynomial because in the

640
00:40:38,220 --> 00:40:40,500
original papers there were only focusing

641
00:40:40,500 --> 00:40:43,440
in the challenge to recover

642
00:40:43,440 --> 00:40:44,359
um

643
00:40:44,359 --> 00:40:46,740
I would say floating Point environment a

644
00:40:46,740 --> 00:40:48,599
complex number and so we consider it as

645
00:40:48,599 --> 00:40:51,839
a complex number and we exploited by the

646
00:40:51,839 --> 00:40:53,400
multiplication between imaginary part

647
00:40:53,400 --> 00:40:55,579
and we are both

648
00:40:55,579 --> 00:40:57,270
I'm sorry

649
00:40:57,270 --> 00:40:59,040
[Music]

650
00:40:59,040 --> 00:41:03,060
oh did you um I and we just um cut the

651
00:41:03,060 --> 00:41:05,520
power traces and um like the best power

652
00:41:05,520 --> 00:41:07,079
choices but um

653
00:41:07,079 --> 00:41:10,140
by putting like we considered

654
00:41:10,140 --> 00:41:11,880
um the other part of the security to be

655
00:41:11,880 --> 00:41:13,140
a challenge for the first one and that's

656
00:41:13,140 --> 00:41:14,940
how we communicated like really it was

657
00:41:14,940 --> 00:41:17,579
like a doubling the data available uh to

658
00:41:17,579 --> 00:41:20,359
perform the GPA

659
00:41:25,200 --> 00:41:28,399
any other questions

660
00:41:29,640 --> 00:41:32,220
maybe one for me for the second attack

661
00:41:32,220 --> 00:41:34,560
you combine a lot of different

662
00:41:34,560 --> 00:41:37,800
techniques if one of those ingredients

663
00:41:37,800 --> 00:41:40,320
is not there does it break the attack or

664
00:41:40,320 --> 00:41:42,599
are there work arounds for each of the

665
00:41:42,599 --> 00:41:44,339
separate steps

666
00:41:44,339 --> 00:41:47,460
now you cannot apply only the hppi tag

667
00:41:47,460 --> 00:41:49,140
because it's a secure against HPP

668
00:41:49,140 --> 00:41:50,820
attacker that's the design of the GPU

669
00:41:50,820 --> 00:41:52,380
framework

670
00:41:52,380 --> 00:41:54,359
um I mean you can still only apply um

671
00:41:54,359 --> 00:41:56,460
the single trace analysis on the based

672
00:41:56,460 --> 00:41:58,859
on products you're using the way to

673
00:41:58,859 --> 00:42:00,720
exploit um the instrument jury sample

674
00:42:00,720 --> 00:42:02,760
that you recovered so you really need

675
00:42:02,760 --> 00:42:04,800
the succession of the of the four steps

676
00:42:04,800 --> 00:42:06,900
to finally get the secret key

677
00:42:06,900 --> 00:42:08,460
thank you

678
00:42:08,460 --> 00:42:10,500
um there are also no questions online so

679
00:42:10,500 --> 00:42:13,880
let's thank the speaker again

680
00:42:14,630 --> 00:42:17,820
[Music]

681
00:42:46,859 --> 00:42:50,640
um does the earthquakes work okay

682
00:42:50,640 --> 00:42:53,579
okay then we get to the third talk and

683
00:42:53,579 --> 00:42:55,560
this will be presented by Robin Leon

684
00:42:55,560 --> 00:42:58,560
schroederer and is on the topic of key

685
00:42:58,560 --> 00:43:01,920
recovery timing attacks against hqc and

686
00:43:01,920 --> 00:43:05,099
back good okay hi thanks for the

687
00:43:05,099 --> 00:43:06,839
introduction uh this is a joint work

688
00:43:06,839 --> 00:43:07,700
with

689
00:43:07,700 --> 00:43:10,380
Thomas Johnson Norman La Alexander

690
00:43:10,380 --> 00:43:12,060
Nielsen and myself

691
00:43:12,060 --> 00:43:14,280
and the title is don't reject this key

692
00:43:14,280 --> 00:43:15,900
recovery timing attacks due to rejection

693
00:43:15,900 --> 00:43:18,720
sampling in hqc and bike

694
00:43:18,720 --> 00:43:22,440
so elevator pitch rejection sampling

695
00:43:22,440 --> 00:43:24,420
with a z derived from the message leaks

696
00:43:24,420 --> 00:43:26,760
the secret key today in this talk you're

697
00:43:26,760 --> 00:43:28,619
going to learn what this means the

698
00:43:28,619 --> 00:43:30,599
fundamentals you need the attacks we've

699
00:43:30,599 --> 00:43:32,339
developed and the counter measures we've

700
00:43:32,339 --> 00:43:35,119
developed just to thwart these attacks

701
00:43:35,119 --> 00:43:39,060
so what is hqc hqc or Heming

702
00:43:39,060 --> 00:43:41,160
quasi-cyclic there's a round three

703
00:43:41,160 --> 00:43:44,579
container in the post Quantum effort for

704
00:43:44,579 --> 00:43:46,920
standardization by nist

705
00:43:46,920 --> 00:43:49,560
and it has been Advanced to round four

706
00:43:49,560 --> 00:43:51,480
and it's based on hard problems related

707
00:43:51,480 --> 00:43:53,339
to quasi-cyclic codes

708
00:43:53,339 --> 00:43:55,680
HTC is a key encapsulation mechanism if

709
00:43:55,680 --> 00:43:58,140
we paid attention to the trucks before

710
00:43:58,140 --> 00:43:59,760
this one you probably already know what

711
00:43:59,760 --> 00:44:02,040
this is but I will go through it briefly

712
00:44:02,040 --> 00:44:04,500
it has three algorithms a key generation

713
00:44:04,500 --> 00:44:05,940
algorithm which generates a public

714
00:44:05,940 --> 00:44:07,440
private key pair and encapsulation

715
00:44:07,440 --> 00:44:09,540
algorithm which generates a random key

716
00:44:09,540 --> 00:44:11,579
k0 and a ciphertext and the

717
00:44:11,579 --> 00:44:13,440
decapsulation algorithm which given the

718
00:44:13,440 --> 00:44:15,300
secret key in the ciphertext computes

719
00:44:15,300 --> 00:44:17,640
the key K1 and hopefully if your scheme

720
00:44:17,640 --> 00:44:19,980
is correct the key k0 and K1 are

721
00:44:19,980 --> 00:44:22,740
equivalent at least with overwhelming

722
00:44:22,740 --> 00:44:25,020
probability and the security of these

723
00:44:25,020 --> 00:44:27,839
schemes is similar to that of public key

724
00:44:27,839 --> 00:44:29,280
encryption schemes

725
00:44:29,280 --> 00:44:32,040
and as you see first defines a public

726
00:44:32,040 --> 00:44:35,040
key encryption system and generates a

727
00:44:35,040 --> 00:44:37,319
key by generating two low weight vectors

728
00:44:37,319 --> 00:44:38,880
X and Y

729
00:44:38,880 --> 00:44:41,160
and the parity check Matrix age or at

730
00:44:41,160 --> 00:44:42,839
least part of a parity check Matrix H

731
00:44:42,839 --> 00:44:45,420
and the public key is then formed by age

732
00:44:45,420 --> 00:44:48,060
and the syndrome of X and Y under the

733
00:44:48,060 --> 00:44:51,599
parity check Matrix corresponding to H

734
00:44:51,599 --> 00:44:54,240
and to encrypt a message using this

735
00:44:54,240 --> 00:44:57,119
public key we again have to generate

736
00:44:57,119 --> 00:44:59,700
three random low weight vectors e R1 and

737
00:44:59,700 --> 00:45:02,579
R2 from this cyclic polynomial ring R

738
00:45:02,579 --> 00:45:04,859
which we can essentially view as bit

739
00:45:04,859 --> 00:45:07,339
vectors

740
00:45:07,680 --> 00:45:08,640
um

741
00:45:08,640 --> 00:45:11,460
and then we again compute the the

742
00:45:11,460 --> 00:45:14,099
syndrome of our the vector R1 R2 under

743
00:45:14,099 --> 00:45:16,200
the parity check Matrix corresponding to

744
00:45:16,200 --> 00:45:19,260
H and then we hide an encoding of the

745
00:45:19,260 --> 00:45:22,319
message M times G using a public code g

746
00:45:22,319 --> 00:45:25,920
with this noise that's contributed as s

747
00:45:25,920 --> 00:45:28,500
times R2 plus e

748
00:45:28,500 --> 00:45:30,420
and then we output the ciphertext and to

749
00:45:30,420 --> 00:45:33,300
decrypt this uh we can compute V minus U

750
00:45:33,300 --> 00:45:36,720
times Y and Y is part of the secret key

751
00:45:36,720 --> 00:45:39,240
and put this into the decoder of this

752
00:45:39,240 --> 00:45:43,260
public code g public code C which

753
00:45:43,260 --> 00:45:46,260
corresponds to the generator Matrix CLG

754
00:45:46,260 --> 00:45:49,079
and this works because if we expand this

755
00:45:49,079 --> 00:45:51,300
V minus U times Y which we give to the

756
00:45:51,300 --> 00:45:52,560
decoder

757
00:45:52,560 --> 00:45:54,599
um then we get M times G plus some

758
00:45:54,599 --> 00:45:57,180
sparse Vector so all of these components

759
00:45:57,180 --> 00:45:59,700
of low widths or in

760
00:45:59,700 --> 00:46:02,700
uh this this will typically have with

761
00:46:02,700 --> 00:46:04,140
high probability you also have low

762
00:46:04,140 --> 00:46:04,920
weight

763
00:46:04,920 --> 00:46:07,140
so the decoder can correct these errors

764
00:46:07,140 --> 00:46:09,480
and you will get the message back

765
00:46:09,480 --> 00:46:13,560
so now we've put a CPA Secure Public key

766
00:46:13,560 --> 00:46:15,240
encryption scheme but we really want uh

767
00:46:15,240 --> 00:46:18,359
CCA secure cam so we use the variant of

768
00:46:18,359 --> 00:46:20,339
the fujizaki okamoto transform to get a

769
00:46:20,339 --> 00:46:23,520
encapsulation mechanism and here we what

770
00:46:23,520 --> 00:46:26,040
changes the so the key generation stays

771
00:46:26,040 --> 00:46:27,420
the same but what changes is the

772
00:46:27,420 --> 00:46:29,640
encapsulation and the decapsulation so

773
00:46:29,640 --> 00:46:31,920
now we generate a random message and

774
00:46:31,920 --> 00:46:34,140
then encrypt it but instead of just

775
00:46:34,140 --> 00:46:36,060
encrypting it we de-randomize the

776
00:46:36,060 --> 00:46:39,420
encryption and use this Z Theta which is

777
00:46:39,420 --> 00:46:41,460
derived from the hash of the message

778
00:46:41,460 --> 00:46:43,920
during the encryption to perform either

779
00:46:43,920 --> 00:46:45,900
Randomness generation and then we can

780
00:46:45,900 --> 00:46:48,060
compute the shared PK from a hash of the

781
00:46:48,060 --> 00:46:49,680
message on the ciphertext and the check

782
00:46:49,680 --> 00:46:52,339
value D from the hash of the message

783
00:46:52,339 --> 00:46:55,800
and to decapsulate this

784
00:46:55,800 --> 00:46:57,780
um we put the again just put the

785
00:46:57,780 --> 00:46:59,460
ciphertext into the decryption function

786
00:46:59,460 --> 00:47:00,900
to get the message m

787
00:47:00,900 --> 00:47:02,520
and then we perform this re-encryption

788
00:47:02,520 --> 00:47:03,480
step we've seen in the previous

789
00:47:03,480 --> 00:47:05,040
presentations

790
00:47:05,040 --> 00:47:07,980
and we do this re-encryption step with

791
00:47:07,980 --> 00:47:10,319
the Z Theta derived from the message

792
00:47:10,319 --> 00:47:13,980
that was output by the decryption and

793
00:47:13,980 --> 00:47:16,140
get the ciphertax C which we compared to

794
00:47:16,140 --> 00:47:18,599
the ciphatex that we got

795
00:47:18,599 --> 00:47:21,420
and this is done because if someone were

796
00:47:21,420 --> 00:47:24,599
to to modify the ciphertext then maybe

797
00:47:24,599 --> 00:47:26,040
still the same

798
00:47:26,040 --> 00:47:28,680
um message would come out or a different

799
00:47:28,680 --> 00:47:32,700
message and that would reside on a

800
00:47:32,700 --> 00:47:35,160
different ciphertext or or in the other

801
00:47:35,160 --> 00:47:36,780
way around this modified ciphertext

802
00:47:36,780 --> 00:47:38,400
would not call drawn to the ciphertext

803
00:47:38,400 --> 00:47:40,560
that we recompute so this check would

804
00:47:40,560 --> 00:47:43,200
fail and then we about alternatively we

805
00:47:43,200 --> 00:47:45,780
also recompute this check value D and

806
00:47:45,780 --> 00:47:49,380
also about of this check valves so if we

807
00:47:49,380 --> 00:47:51,660
look at prior work that has looked at as

808
00:47:51,660 --> 00:47:53,420
you can see in terms of timing attacks

809
00:47:53,420 --> 00:47:55,859
then we can see that this decryption

810
00:47:55,859 --> 00:47:59,040
function has had a timing variation that

811
00:47:59,040 --> 00:48:00,780
was exploitable because they used a

812
00:48:00,780 --> 00:48:03,599
non-constant Time decoder uh we can also

813
00:48:03,599 --> 00:48:06,240
see that this comparison was done in

814
00:48:06,240 --> 00:48:07,859
non-constant time because they use a mem

815
00:48:07,859 --> 00:48:10,440
comp function and C which is also non-

816
00:48:10,440 --> 00:48:12,119
non-constant time because it terminates

817
00:48:12,119 --> 00:48:13,260
early

818
00:48:13,260 --> 00:48:15,900
and if we look at what's left so now

819
00:48:15,900 --> 00:48:18,380
there's these hash functions GH and K

820
00:48:18,380 --> 00:48:21,119
which are at least with respect to time

821
00:48:21,119 --> 00:48:23,160
index probably secure at least if

822
00:48:23,160 --> 00:48:25,260
they're not we have bigger problems and

823
00:48:25,260 --> 00:48:27,240
now if we look at what's left well the

824
00:48:27,240 --> 00:48:29,700
input is where we actually found the uh

825
00:48:29,700 --> 00:48:31,619
our timing variation

826
00:48:31,619 --> 00:48:34,740
so how do we find the timing variation

827
00:48:34,740 --> 00:48:36,619
in this day and age

828
00:48:36,619 --> 00:48:39,780
well quite simply we generate a public

829
00:48:39,780 --> 00:48:41,160
private key pair

830
00:48:41,160 --> 00:48:43,980
and then generate 100 ciphertexts for

831
00:48:43,980 --> 00:48:44,940
example

832
00:48:44,940 --> 00:48:47,040
and then we measure a bunch of times so

833
00:48:47,040 --> 00:48:49,079
in our case 10 million times uh how long

834
00:48:49,079 --> 00:48:51,000
the decapsulation takes

835
00:48:51,000 --> 00:48:53,579
and now we can do this thing where we

836
00:48:53,579 --> 00:48:55,619
compare each of those hundred type

837
00:48:55,619 --> 00:48:59,579
attacks that we generated to the to the

838
00:48:59,579 --> 00:49:01,859
other 100 Cipher text or even to itself

839
00:49:01,859 --> 00:49:04,560
on the diagonal and then compute whether

840
00:49:04,560 --> 00:49:06,480
the timing distributions that they took

841
00:49:06,480 --> 00:49:08,700
during the decapsulation

842
00:49:08,700 --> 00:49:11,700
um are the same using a g-test and the

843
00:49:11,700 --> 00:49:13,980
p-value of that t-test is what you see

844
00:49:13,980 --> 00:49:16,740
plotted here essentially orange means

845
00:49:16,740 --> 00:49:18,839
which is close to close to a p-value of

846
00:49:18,839 --> 00:49:20,940
zero means that there was a

847
00:49:20,940 --> 00:49:22,260
statistically significant difference

848
00:49:22,260 --> 00:49:24,260
that was detected

849
00:49:24,260 --> 00:49:26,880
so now we know there is some difference

850
00:49:26,880 --> 00:49:28,980
but we don't really know what it is we

851
00:49:28,980 --> 00:49:31,440
we can already see okay the the

852
00:49:31,440 --> 00:49:33,420
difference that was detected if if there

853
00:49:33,420 --> 00:49:35,819
was a difference is about 8 000 Cycles

854
00:49:35,819 --> 00:49:38,040
or uh four microseconds on a two

855
00:49:38,040 --> 00:49:39,240
gigahertz chip

856
00:49:39,240 --> 00:49:41,339
but we really are interested in where

857
00:49:41,339 --> 00:49:43,500
this variation is coming from so we can

858
00:49:43,500 --> 00:49:46,079
do the same thing again but we look into

859
00:49:46,079 --> 00:49:48,000
the decapsulation function and divide it

860
00:49:48,000 --> 00:49:51,420
into four parts and then we see that so

861
00:49:51,420 --> 00:49:53,160
the four parts are key loading

862
00:49:53,160 --> 00:49:55,020
decryption re-encryption and the shared

863
00:49:55,020 --> 00:49:57,599
secret generation and then we see that

864
00:49:57,599 --> 00:49:59,220
key loading and re-encryption look a bit

865
00:49:59,220 --> 00:50:02,520
fishy key loading I checked it manually

866
00:50:02,520 --> 00:50:04,560
it does not do anything so this is

867
00:50:04,560 --> 00:50:06,839
probably just caching artifacts

868
00:50:06,839 --> 00:50:08,700
but reencryption shows us again this

869
00:50:08,700 --> 00:50:10,680
nice pattern that we saw earlier

870
00:50:10,680 --> 00:50:13,380
and it also shows us the the median

871
00:50:13,380 --> 00:50:15,599
variation when there was a variation is

872
00:50:15,599 --> 00:50:18,060
quite high with 7000 Cycles

873
00:50:18,060 --> 00:50:20,579
and if we look into the re-encryption we

874
00:50:20,579 --> 00:50:22,980
can see and do the same thing again same

875
00:50:22,980 --> 00:50:25,500
analysis again analysis again then we

876
00:50:25,500 --> 00:50:27,119
see that the sample Vector function is

877
00:50:27,119 --> 00:50:28,800
responsible for the timing variation we

878
00:50:28,800 --> 00:50:31,200
observe so what's the sample Vector

879
00:50:31,200 --> 00:50:33,180
function well remember in the encryption

880
00:50:33,180 --> 00:50:34,800
function we had to generate these three

881
00:50:34,800 --> 00:50:37,980
random low wave vectors e are one and R2

882
00:50:37,980 --> 00:50:39,540
and this is done using rejection

883
00:50:39,540 --> 00:50:41,940
sampling so we generate a vector of

884
00:50:41,940 --> 00:50:44,460
length n with some specific desired

885
00:50:44,460 --> 00:50:46,260
weight and in the case of hqc the

886
00:50:46,260 --> 00:50:49,200
vectors are about 17 000 bits and the

887
00:50:49,200 --> 00:50:52,200
weight is approximately 66

888
00:50:52,200 --> 00:50:55,440
so how does does this work we initialize

889
00:50:55,440 --> 00:50:58,740
V to some to a zero vector and then we

890
00:50:58,740 --> 00:51:01,319
sample positions until we achieve the

891
00:51:01,319 --> 00:51:03,240
desired weight

892
00:51:03,240 --> 00:51:05,160
but sometimes it can happen that this

893
00:51:05,160 --> 00:51:08,339
position has already been set to one so

894
00:51:08,339 --> 00:51:10,559
we need to discard the sample

895
00:51:10,559 --> 00:51:13,859
also to generate these positions we have

896
00:51:13,859 --> 00:51:15,660
to do rejection sampling otherwise we

897
00:51:15,660 --> 00:51:19,040
would get a bias distribution

898
00:51:19,260 --> 00:51:22,020
and in the case of hqc we have this

899
00:51:22,020 --> 00:51:25,740
peculiar implementation detail that they

900
00:51:25,740 --> 00:51:27,660
call a zero expander function which is

901
00:51:27,660 --> 00:51:29,520
only called when the randomness buffer

902
00:51:29,520 --> 00:51:31,980
that the seed expander function fills is

903
00:51:31,980 --> 00:51:34,140
exhausted so when they need to generate

904
00:51:34,140 --> 00:51:36,000
new positions then you call this very

905
00:51:36,000 --> 00:51:38,400
expensive seed expander function

906
00:51:38,400 --> 00:51:40,800
to generate more Randomness so you can

907
00:51:40,800 --> 00:51:42,540
continue your rejection sampling

908
00:51:42,540 --> 00:51:44,700
algorithm

909
00:51:44,700 --> 00:51:46,680
so let's look at the big picture again

910
00:51:46,680 --> 00:51:48,660
we have this decapsulation function

911
00:51:48,660 --> 00:51:50,040
which causes the encryption function

912
00:51:50,040 --> 00:51:52,619
which generates uh which computes the

913
00:51:52,619 --> 00:51:55,140
message M and this message m is hashed

914
00:51:55,140 --> 00:51:57,180
and goes into the ZD expander function

915
00:51:57,180 --> 00:51:58,859
and determines the randomness that the

916
00:51:58,859 --> 00:52:01,680
ZD expander function outputs and this in

917
00:52:01,680 --> 00:52:04,740
turn impacts what path is taking in this

918
00:52:04,740 --> 00:52:07,559
random Vector generation function and

919
00:52:07,559 --> 00:52:09,960
the rejection sampling algorithm

920
00:52:09,960 --> 00:52:12,599
so if you follow these traces we can see

921
00:52:12,599 --> 00:52:15,540
that the message M determines the timing

922
00:52:15,540 --> 00:52:17,640
of the ciphert X because the rejection

923
00:52:17,640 --> 00:52:20,760
sampling algorithm may take longer or

924
00:52:20,760 --> 00:52:22,680
less Long depending on whether we

925
00:52:22,680 --> 00:52:24,780
generate more or less conditions with

926
00:52:24,780 --> 00:52:26,220
the specific Randomness that was

927
00:52:26,220 --> 00:52:27,660
generated

928
00:52:27,660 --> 00:52:28,760
foreign

929
00:52:28,760 --> 00:52:31,859
just plot the timing distribution of all

930
00:52:31,859 --> 00:52:34,980
the decapsulations we we've performed

931
00:52:34,980 --> 00:52:36,900
then we can see this margin model

932
00:52:36,900 --> 00:52:38,819
distribution

933
00:52:38,819 --> 00:52:40,800
um where this corresponds to different

934
00:52:40,800 --> 00:52:42,839
number of invocations of the ZD expander

935
00:52:42,839 --> 00:52:44,359
function

936
00:52:44,359 --> 00:52:47,160
and we can also confirm that in in the

937
00:52:47,160 --> 00:52:49,319
case of hqc the CD expander invocations

938
00:52:49,319 --> 00:52:51,180
are responsible for the main differences

939
00:52:51,180 --> 00:52:54,420
between ciphertext timing

940
00:52:54,420 --> 00:52:56,339
so here you can see the the number of

941
00:52:56,339 --> 00:52:58,579
City expander functions are colored in

942
00:52:58,579 --> 00:53:02,220
beige I think correct me if I'm wrong

943
00:53:02,220 --> 00:53:05,700
and that this is essentially a line so

944
00:53:05,700 --> 00:53:08,819
um the number of iterations or the the

945
00:53:08,819 --> 00:53:11,160
number of number number of numbers you

946
00:53:11,160 --> 00:53:13,020
generate doesn't really matter but what

947
00:53:13,020 --> 00:53:15,059
matters is how many times you you call

948
00:53:15,059 --> 00:53:17,700
the Z expander function

949
00:53:17,700 --> 00:53:20,460
so how do we exploit this

950
00:53:20,460 --> 00:53:22,920
let's let's recall that the message M

951
00:53:22,920 --> 00:53:24,780
that the cipher checks decrypts to

952
00:53:24,780 --> 00:53:28,079
determines the timing of the ciphertext

953
00:53:28,079 --> 00:53:30,180
and that the ciphertext does not have to

954
00:53:30,180 --> 00:53:32,880
be valid for it to leak for the

955
00:53:32,880 --> 00:53:36,119
decapsulation to leak the timing of the

956
00:53:36,119 --> 00:53:38,160
cipher checks because even if the

957
00:53:38,160 --> 00:53:39,839
decapsulation Oracle rejects the

958
00:53:39,839 --> 00:53:42,119
ciphertext the timing will still be

959
00:53:42,119 --> 00:53:42,960
leaked

960
00:53:42,960 --> 00:53:45,059
so what we can already do is distinguish

961
00:53:45,059 --> 00:53:48,660
whether a ciphertext corresponding to

962
00:53:48,660 --> 00:53:50,880
some message actually decrypts to that

963
00:53:50,880 --> 00:53:52,740
message or a different message so we can

964
00:53:52,740 --> 00:53:55,079
modify the ciphertext and then if it

965
00:53:55,079 --> 00:53:56,700
decodes to something else the timing

966
00:53:56,700 --> 00:53:58,800
will lead whether it still decrypts to

967
00:53:58,800 --> 00:54:00,359
that message

968
00:54:00,359 --> 00:54:02,700
so this already gives us potentially a

969
00:54:02,700 --> 00:54:05,579
theoretical break of NCCA security but

970
00:54:05,579 --> 00:54:08,099
we are really interested in key recovery

971
00:54:08,099 --> 00:54:10,140
so what we do

972
00:54:10,140 --> 00:54:12,599
um as we do this nice trick where we set

973
00:54:12,599 --> 00:54:16,680
the errors e and R1 and R2 in a way that

974
00:54:16,680 --> 00:54:19,020
in the decapsulation or in the

975
00:54:19,020 --> 00:54:21,720
decryption function uh the decoder gets

976
00:54:21,720 --> 00:54:23,640
M times G minus y

977
00:54:23,640 --> 00:54:25,859
and Y as part of the secret key so if

978
00:54:25,859 --> 00:54:28,079
you can find a way to recover the error

979
00:54:28,079 --> 00:54:30,480
that corresponds to this ciphertext then

980
00:54:30,480 --> 00:54:32,339
we win

981
00:54:32,339 --> 00:54:35,579
and how do we do this where we can use a

982
00:54:35,579 --> 00:54:38,280
really old attack from 1999

983
00:54:38,280 --> 00:54:39,960
um which essentially does the following

984
00:54:39,960 --> 00:54:43,260
imagine years our ciphertext that

985
00:54:43,260 --> 00:54:45,839
corresponding to M times G minus y and

986
00:54:45,839 --> 00:54:47,579
then we just flip random bits in the

987
00:54:47,579 --> 00:54:50,339
ciphertext and essentially perform a

988
00:54:50,339 --> 00:54:52,380
random word until we end up closer to

989
00:54:52,380 --> 00:54:54,839
this other code word C2 that corresponds

990
00:54:54,839 --> 00:54:56,339
to a different message and this code

991
00:54:56,339 --> 00:54:58,800
word is going to have a different timing

992
00:54:58,800 --> 00:55:01,200
with a high probability

993
00:55:01,200 --> 00:55:03,660
so we notice this transition because the

994
00:55:03,660 --> 00:55:06,240
timing because of the timing difference

995
00:55:06,240 --> 00:55:09,000
and then we flip bits again in the

996
00:55:09,000 --> 00:55:11,099
cipher text and see if it brings us back

997
00:55:11,099 --> 00:55:13,200
to the original code word and based on

998
00:55:13,200 --> 00:55:15,300
that we can determine whether the this

999
00:55:15,300 --> 00:55:16,800
bit in the cipher text and the modified

1000
00:55:16,800 --> 00:55:20,040
ciphertext was an error or not

1001
00:55:20,040 --> 00:55:22,140
so we flip bits until the timing changes

1002
00:55:22,140 --> 00:55:24,660
we flip all of them back to determine if

1003
00:55:24,660 --> 00:55:27,240
they are an error individually and we

1004
00:55:27,240 --> 00:55:28,920
repeat this a bunch of times take a

1005
00:55:28,920 --> 00:55:30,180
majority vote and then we have the

1006
00:55:30,180 --> 00:55:32,339
secret key

1007
00:55:32,339 --> 00:55:34,440
so we implement this implemented this

1008
00:55:34,440 --> 00:55:35,460
attack

1009
00:55:35,460 --> 00:55:37,980
um at a success rate of 87 percent and

1010
00:55:37,980 --> 00:55:39,540
after failed attacks

1011
00:55:39,540 --> 00:55:43,319
um 86 terminated with less than 20 20

1012
00:55:43,319 --> 00:55:47,220
incorrect bits so some additional brute

1013
00:55:47,220 --> 00:55:48,900
forcing or information set decoding

1014
00:55:48,900 --> 00:55:50,940
could help with that and we took about

1015
00:55:50,940 --> 00:55:53,220
800 000 idealized Oracle course

1016
00:55:53,220 --> 00:55:55,980
idealized means that we don't model the

1017
00:55:55,980 --> 00:55:58,020
noise that

1018
00:55:58,020 --> 00:56:00,720
when that occurs when you do a timing

1019
00:56:00,720 --> 00:56:03,540
attack so for example for a desktop

1020
00:56:03,540 --> 00:56:05,460
computer you would multiply this with

1021
00:56:05,460 --> 00:56:07,980
for example 10 000 on a local attacker

1022
00:56:07,980 --> 00:56:10,859
or more but uh Timeless attacks for

1023
00:56:10,859 --> 00:56:13,200
example could help with this

1024
00:56:13,200 --> 00:56:15,300
okay back

1025
00:56:15,300 --> 00:56:16,859
um bike or Bridge looking heat

1026
00:56:16,859 --> 00:56:19,079
encapsulation is another code based

1027
00:56:19,079 --> 00:56:21,359
contender in round three uh it's also

1028
00:56:21,359 --> 00:56:25,440
based on the security or at sadness and

1029
00:56:25,440 --> 00:56:27,599
security reduces to hardness of crazy

1030
00:56:27,599 --> 00:56:29,220
cyclic problems

1031
00:56:29,220 --> 00:56:31,680
but what all you really need to know is

1032
00:56:31,680 --> 00:56:34,200
that this function H here is essentially

1033
00:56:34,200 --> 00:56:36,780
the same as an hqc IT attaches the

1034
00:56:36,780 --> 00:56:40,500
message and generates a low rate vector

1035
00:56:40,500 --> 00:56:43,200
so again we have a timing structure that

1036
00:56:43,200 --> 00:56:45,240
we can exploit in the case of bike we

1037
00:56:45,240 --> 00:56:46,319
need to

1038
00:56:46,319 --> 00:56:48,540
um rely on different attacks

1039
00:56:48,540 --> 00:56:51,359
um but here you can see the the timing

1040
00:56:51,359 --> 00:56:53,280
distribution for byte in this case it

1041
00:56:53,280 --> 00:56:55,020
doesn't depend as much on the ZD

1042
00:56:55,020 --> 00:56:56,819
expansions because each seed expansion

1043
00:56:56,819 --> 00:56:59,940
is only a single AES invocation

1044
00:56:59,940 --> 00:57:00,900
um

1045
00:57:00,900 --> 00:57:03,559
but just to still get a timing variation

1046
00:57:03,559 --> 00:57:06,240
and you also have this property that

1047
00:57:06,240 --> 00:57:08,880
some ciphertexts ciphertext timings are

1048
00:57:08,880 --> 00:57:11,160
more rare than others which helps us in

1049
00:57:11,160 --> 00:57:14,339
building a good distinguisher

1050
00:57:14,339 --> 00:57:17,760
to exploit this attack we use uh ideas

1051
00:57:17,760 --> 00:57:20,700
from gjs16

1052
00:57:20,700 --> 00:57:23,819
where they observed this property of a

1053
00:57:23,819 --> 00:57:25,559
distance Spectrum or invented this

1054
00:57:25,559 --> 00:57:27,660
property of a distance spectrum of a

1055
00:57:27,660 --> 00:57:29,040
vector which is essentially the

1056
00:57:29,040 --> 00:57:30,900
distances between the set bits in a

1057
00:57:30,900 --> 00:57:32,640
vector

1058
00:57:32,640 --> 00:57:35,220
and they observed that if the distance

1059
00:57:35,220 --> 00:57:37,500
of an error in a ciphertext occurs in

1060
00:57:37,500 --> 00:57:39,000
the secret key then it lowers the

1061
00:57:39,000 --> 00:57:41,160
decryption failure rate and they also

1062
00:57:41,160 --> 00:57:43,500
notice that if you if you can somehow

1063
00:57:43,500 --> 00:57:45,900
get this distance Spectrum then you can

1064
00:57:45,900 --> 00:57:48,319
recover the secret key using a a

1065
00:57:48,319 --> 00:57:51,000
relatively simple algorithm so the goal

1066
00:57:51,000 --> 00:57:52,800
becomes to recover the distance Spectrum

1067
00:57:52,800 --> 00:57:55,559
from the secret key uh distance spectrum

1068
00:57:55,559 --> 00:57:57,140
of the secret keywords inside Channel

1069
00:57:57,140 --> 00:58:00,000
and we can perform this by generating a

1070
00:58:00,000 --> 00:58:01,740
ciphertext with the

1071
00:58:01,740 --> 00:58:04,020
with a rare timing Behavior to improve

1072
00:58:04,020 --> 00:58:06,059
our distinguisher add some additional

1073
00:58:06,059 --> 00:58:08,040
noise so the decryption failure rate

1074
00:58:08,040 --> 00:58:10,559
becomes fairly High these type attacks

1075
00:58:10,559 --> 00:58:12,119
will all be rejected but we don't care

1076
00:58:12,119 --> 00:58:14,099
about that we send the cipher text to

1077
00:58:14,099 --> 00:58:16,020
the timing Oracle and check the whether

1078
00:58:16,020 --> 00:58:18,420
it decoded successfully or not and that

1079
00:58:18,420 --> 00:58:20,640
way we can estimate the decryption

1080
00:58:20,640 --> 00:58:23,339
failure rate of of the Cyber text

1081
00:58:23,339 --> 00:58:25,740
correlated with the cycling cyclic

1082
00:58:25,740 --> 00:58:28,440
distances that occur in the errors that

1083
00:58:28,440 --> 00:58:31,200
we in the ciphertext that we send and

1084
00:58:31,200 --> 00:58:33,059
based on that we cover the distance back

1085
00:58:33,059 --> 00:58:34,500
from

1086
00:58:34,500 --> 00:58:37,140
and then using the algorithms we get the

1087
00:58:37,140 --> 00:58:39,180
secret key

1088
00:58:39,180 --> 00:58:41,700
how do we spot these attacks quite

1089
00:58:41,700 --> 00:58:43,920
simply we make it constant time so even

1090
00:58:43,920 --> 00:58:45,900
though h2c and by claim they are

1091
00:58:45,900 --> 00:58:48,780
constant time this was not the case

1092
00:58:48,780 --> 00:58:51,000
um because of this dependency on the

1093
00:58:51,000 --> 00:58:52,440
hash of the message

1094
00:58:52,440 --> 00:58:55,859
the decapsulation was not constant time

1095
00:58:55,859 --> 00:58:57,900
so what we can do is we remove the

1096
00:58:57,900 --> 00:59:00,000
rejection sampling

1097
00:59:00,000 --> 00:59:02,579
um or replace it with a constant time

1098
00:59:02,579 --> 00:59:04,559
algorithm that samples a really large

1099
00:59:04,559 --> 00:59:07,380
number and reduces this modular n uh

1100
00:59:07,380 --> 00:59:09,000
this can be done with a Barrette

1101
00:59:09,000 --> 00:59:11,520
reduction for example

1102
00:59:11,520 --> 00:59:13,440
and then the bias is extremely small

1103
00:59:13,440 --> 00:59:16,980
that in these generated numbers

1104
00:59:16,980 --> 00:59:19,140
and to remove this rejection sampling of

1105
00:59:19,140 --> 00:59:21,480
the distinct bit positions we determine

1106
00:59:21,480 --> 00:59:22,520
a

1107
00:59:22,520 --> 00:59:25,079
sufficient number of iterations that we

1108
00:59:25,079 --> 00:59:27,059
would need so that we would essentially

1109
00:59:27,059 --> 00:59:28,859
never need to do another iteration

1110
00:59:28,859 --> 00:59:32,339
because of a bit position collisions

1111
00:59:32,339 --> 00:59:34,920
and we have some nice formulas in the

1112
00:59:34,920 --> 00:59:37,260
paper to compute a sufficient number of

1113
00:59:37,260 --> 00:59:40,260
iterations

1114
00:59:40,440 --> 00:59:42,599
and then if we do the same analysis

1115
00:59:42,599 --> 00:59:44,579
again we can see

1116
00:59:44,579 --> 00:59:46,460
a quite blue ocean

1117
00:59:46,460 --> 00:59:48,900
but we're doing a pretty heavy

1118
00:59:48,900 --> 00:59:51,780
performance set of 29 so hopefully there

1119
00:59:51,780 --> 00:59:53,700
will be some nice follow-up work and

1120
00:59:53,700 --> 00:59:55,740
already it has been spawned some

1121
00:59:55,740 --> 00:59:58,380
interesting works by Nicolas Andrea who

1122
00:59:58,380 --> 01:00:01,140
proposes another very end of the fishery

1123
01:00:01,140 --> 01:00:03,059
AIDS drafting algorithm specifically for

1124
01:00:03,059 --> 01:00:05,339
generating low weight

1125
01:00:05,339 --> 01:00:08,099
um vectors my time is over

1126
01:00:08,099 --> 01:00:10,819
thank you

1127
01:00:19,140 --> 01:00:21,740
it's

1128
01:00:42,420 --> 01:00:45,380
there is

1129
01:00:46,140 --> 01:00:49,759
I'm sorry I can barely hear you

1130
01:00:51,540 --> 01:00:52,510
um

1131
01:00:52,510 --> 01:00:57,829
[Music]

1132
01:01:04,760 --> 01:01:07,909
[Music]

1133
01:01:20,599 --> 01:01:24,859
could you repeat the core idea

1134
01:01:35,819 --> 01:01:39,980
the countermeasure you okay

1135
01:01:50,880 --> 01:01:52,880
um

1136
01:01:56,940 --> 01:01:59,880
so maybe maybe I can just expand a bit

1137
01:01:59,880 --> 01:02:01,740
on this so the reason we have this High

1138
01:02:01,740 --> 01:02:04,079
Performance Set is because of this first

1139
01:02:04,079 --> 01:02:06,839
step where we want to generate

1140
01:02:06,839 --> 01:02:09,920
um a random number from 0 to n minus one

1141
01:02:09,920 --> 01:02:12,900
uh which is done in re using rejection

1142
01:02:12,900 --> 01:02:15,359
sampling in the original algorithm and

1143
01:02:15,359 --> 01:02:17,700
we replace this by essentially sampling

1144
01:02:17,700 --> 01:02:20,700
16 times as much randomness

1145
01:02:20,700 --> 01:02:24,720
which gives us an essentially identical

1146
01:02:24,720 --> 01:02:27,540
distribution to uniform but is terrible

1147
01:02:27,540 --> 01:02:29,880
for performance so that's that's where

1148
01:02:29,880 --> 01:02:35,299
this um 29 increase in Cycles comes from

1149
01:02:35,299 --> 01:02:38,880
what uh zandria also shows in his paper

1150
01:02:38,880 --> 01:02:41,640
is that at least for the case of bike it

1151
01:02:41,640 --> 01:02:44,339
doesn't actually matter whether there is

1152
01:02:44,339 --> 01:02:46,680
a bias in the distribution so you could

1153
01:02:46,680 --> 01:02:48,780
just replace this rejection sampling

1154
01:02:48,780 --> 01:02:51,900
that's done

1155
01:02:51,900 --> 01:02:53,339
here

1156
01:02:53,339 --> 01:02:57,500
and just remove this Loop

1157
01:02:57,599 --> 01:03:00,599
and that's a lot more efficient right

1158
01:03:00,599 --> 01:03:03,599
does that answer your question

1159
01:03:03,599 --> 01:03:07,740
okay and maybe to add to that um

1160
01:03:07,740 --> 01:03:10,079
without that our counter measure would

1161
01:03:10,079 --> 01:03:13,319
be approximately six percent slower

1162
01:03:13,319 --> 01:03:15,900
so if you remove this and just do the

1163
01:03:15,900 --> 01:03:18,299
the upper bound on the iterations you

1164
01:03:18,299 --> 01:03:21,180
only get to the six percent slow down

1165
01:03:21,180 --> 01:03:23,280
but we don't know if it's secure for our

1166
01:03:23,280 --> 01:03:25,819
hqc

1167
01:03:27,119 --> 01:03:28,140
okay

1168
01:03:28,140 --> 01:03:30,480
thanks uh thanks a lot let's thank the

1169
01:03:30,480 --> 01:03:32,960
speaker again

1170
01:03:56,460 --> 01:04:01,140
so the last talk is by grg zoo on single

1171
01:04:01,140 --> 01:04:03,420
trace side channels

1172
01:04:03,420 --> 01:04:06,500
um they are not here

1173
01:04:06,500 --> 01:04:09,420
physically but present online and the

1174
01:04:09,420 --> 01:04:11,280
talk will be

1175
01:04:11,280 --> 01:04:12,359
um

1176
01:04:12,359 --> 01:04:15,740
plates on video

1177
01:04:21,900 --> 01:04:24,960
hi welcome to the presentation of our

1178
01:04:24,960 --> 01:04:25,799
paper

1179
01:04:25,799 --> 01:04:28,200
single Chase stand Channel attacks on

1180
01:04:28,200 --> 01:04:29,400
the term cook

1181
01:04:29,400 --> 01:04:32,280
the case study of civil

1182
01:04:32,280 --> 01:04:32,900
um

1183
01:04:32,900 --> 01:04:36,240
and today I have the privilege of

1184
01:04:36,240 --> 01:04:38,819
presenting this work at the chance on

1185
01:04:38,819 --> 01:04:42,000
behalf of my co-authors

1186
01:04:42,000 --> 01:04:45,359
so today we will briefly introduce Tom

1187
01:04:45,359 --> 01:04:48,359
cook with his vulnerable abilities

1188
01:04:48,359 --> 01:04:52,380
and how I say I say works and we will

1189
01:04:52,380 --> 01:04:55,859
describe the improving attacks and show

1190
01:04:55,859 --> 01:04:58,020
its evaluations

1191
01:04:58,020 --> 01:05:00,720
and we will finish off the presentation

1192
01:05:00,720 --> 01:05:04,160
with conclusion

1193
01:05:04,740 --> 01:05:08,160
now Tom Cook is a divide and conquerable

1194
01:05:08,160 --> 01:05:10,920
approach to implementing polynomial

1195
01:05:10,920 --> 01:05:12,420
multiplication

1196
01:05:12,420 --> 01:05:16,200
which which is displayed multiplayer and

1197
01:05:16,200 --> 01:05:19,500
multiplicand to achieve the theoretical

1198
01:05:19,500 --> 01:05:22,440
minimal multiplayer requirement

1199
01:05:22,440 --> 01:05:25,799
and consumer algorithm can be shown to

1200
01:05:25,799 --> 01:05:29,280
be similar to a TOMCO 2-way

1201
01:05:29,280 --> 01:05:32,099
among the three finalists of teams in

1202
01:05:32,099 --> 01:05:35,220
the third round finalists of nrst's post

1203
01:05:35,220 --> 01:05:38,220
Quantum standardization precise

1204
01:05:38,220 --> 01:05:42,059
NTT based polynomial multiplication is

1205
01:05:42,059 --> 01:05:47,040
used as a cap scheme well ntiu Prime and

1206
01:05:47,040 --> 01:05:50,460
stable use term code base and Care

1207
01:05:50,460 --> 01:05:54,299
supervised polynomial multiplications

1208
01:05:54,299 --> 01:05:57,420
Sabo is a key in chemistry Asian

1209
01:05:57,420 --> 01:05:59,880
mechanism which relies on Modern

1210
01:05:59,880 --> 01:06:02,400
learning with roaming with a

1211
01:06:02,400 --> 01:06:05,880
modification of language air

1212
01:06:05,880 --> 01:06:08,880
the entity-based implementation was

1213
01:06:08,880 --> 01:06:10,680
attacked in your Norway

1214
01:06:10,680 --> 01:06:14,460
however Tom Cook is still an alternative

1215
01:06:14,460 --> 01:06:17,660
to NTT in many post Quantum

1216
01:06:17,660 --> 01:06:20,400
cryptographic algorithms

1217
01:06:20,400 --> 01:06:22,920
and is a security against the same

1218
01:06:22,920 --> 01:06:26,760
channel attacks has now been analyzed is

1219
01:06:26,760 --> 01:06:29,460
one of the reasons why we have select

1220
01:06:29,460 --> 01:06:32,780
for the evaluation

1221
01:06:33,720 --> 01:06:37,200
now with the two end degree polynomials

1222
01:06:37,200 --> 01:06:41,160
we apply time clock 4 to implement

1223
01:06:41,160 --> 01:06:43,920
polynomial multiplication

1224
01:06:43,920 --> 01:06:46,500
there are many three steps in chemical

1225
01:06:46,500 --> 01:06:48,059
multiplication

1226
01:06:48,059 --> 01:06:51,200
the first step

1227
01:07:13,380 --> 01:07:17,280
is the evaluation and it first can be

1228
01:07:17,280 --> 01:07:20,099
displayed into four and before degree

1229
01:07:20,099 --> 01:07:21,660
polynomials

1230
01:07:21,660 --> 01:07:25,400
consider the parameter n is

1231
01:07:25,400 --> 01:07:29,339
256. so they can be writing as follows

1232
01:07:29,339 --> 01:07:32,400
and the coefficient can be obtained

1233
01:07:32,400 --> 01:07:33,960
naturally

1234
01:07:33,960 --> 01:07:37,380
now secondly we select the seven points

1235
01:07:37,380 --> 01:07:39,859
with the small values to decrease

1236
01:07:39,859 --> 01:07:43,680
computation complexity so the second

1237
01:07:43,680 --> 01:07:47,579
step is multiplication for this point

1238
01:07:47,579 --> 01:07:52,079
and the last step is in interpolation to

1239
01:07:52,079 --> 01:07:55,400
calculate the coefficients

1240
01:07:55,859 --> 01:07:59,339
now the polynomials multiplication of

1241
01:07:59,339 --> 01:08:02,520
stable reference C implementation is

1242
01:08:02,520 --> 01:08:05,880
implemented based on the term code the

1243
01:08:05,880 --> 01:08:08,280
full implementation is a very complex

1244
01:08:08,280 --> 01:08:10,920
complex precise

1245
01:08:10,920 --> 01:08:16,200
we simplify foreign key

1246
01:08:21,839 --> 01:08:24,779
and during the multiplication of the

1247
01:08:24,779 --> 01:08:27,779
above variable the polynomials are of

1248
01:08:27,779 --> 01:08:30,779
degree 256.

1249
01:08:30,779 --> 01:08:34,439
perform this polynomial magnification it

1250
01:08:34,439 --> 01:08:37,620
adopts the atomical four-way to select

1251
01:08:37,620 --> 01:08:39,299
the polynomials

1252
01:08:39,299 --> 01:08:42,899
the step transforms the magnification of

1253
01:08:42,899 --> 01:08:47,100
2 256 degree polynomials to 7

1254
01:08:47,100 --> 01:08:51,660
multiplications of 64 degree polynomials

1255
01:08:51,660 --> 01:08:54,479
and it displays the polynomials into

1256
01:08:54,479 --> 01:08:57,839
nine multiplication of degree 16.

1257
01:08:57,839 --> 01:09:00,719
through two levels of calcium

1258
01:09:00,719 --> 01:09:03,000
multiplication

1259
01:09:03,000 --> 01:09:05,698
finally the polynomials perform the

1260
01:09:05,698 --> 01:09:08,460
Superbook multiplication

1261
01:09:08,460 --> 01:09:10,380
the idea is that

1262
01:09:10,380 --> 01:09:12,600
a polynomial should be readable

1263
01:09:12,600 --> 01:09:14,759
displayed when performing the original

1264
01:09:14,759 --> 01:09:17,279
polynomial multiplication

1265
01:09:17,279 --> 01:09:20,219
the family of thermal cook methods is

1266
01:09:20,219 --> 01:09:24,299
considerate an effective method

1267
01:09:24,299 --> 01:09:28,080
by separating polynomials so

1268
01:09:28,080 --> 01:09:31,439
so here we see a position of civil okay

1269
01:09:31,439 --> 01:09:34,259
in capitulation mechanism and the

1270
01:09:34,259 --> 01:09:38,160
atomical four way that our many target

1271
01:09:38,160 --> 01:09:41,120
analysis

1272
01:09:42,259 --> 01:09:45,420
now with the known sample test and

1273
01:09:45,420 --> 01:09:49,560
unknown secret key we can utilize SCA to

1274
01:09:49,560 --> 01:09:53,759
attack its immediate values however the

1275
01:09:53,759 --> 01:09:56,219
application of Tom Cook makes this

1276
01:09:56,219 --> 01:09:59,640
attacks fail to recover full private key

1277
01:09:59,640 --> 01:10:03,120
so we just reveal the first and last one

1278
01:10:03,120 --> 01:10:06,360
per K of private key coefficients

1279
01:10:06,360 --> 01:10:10,320
secondly a critical factor of successful

1280
01:10:10,320 --> 01:10:11,600
power of

1281
01:10:11,600 --> 01:10:14,420
electromagnetic analysis is

1282
01:10:14,420 --> 01:10:16,620
distinguishing the statical analysis

1283
01:10:16,620 --> 01:10:19,920
results of the character key from the

1284
01:10:19,920 --> 01:10:21,239
other one case

1285
01:10:21,239 --> 01:10:23,940
and the Heming weight legs model we

1286
01:10:23,940 --> 01:10:25,860
calculate the portions correlation

1287
01:10:25,860 --> 01:10:28,020
coefficient among the Hemi weight

1288
01:10:28,020 --> 01:10:30,600
vectors corresponding to different

1289
01:10:30,600 --> 01:10:33,120
guessing case for the last level of

1290
01:10:33,120 --> 01:10:35,040
multiplication

1291
01:10:35,040 --> 01:10:36,780
it can be seen that

1292
01:10:36,780 --> 01:10:39,300
many similar correlation coefficients

1293
01:10:39,300 --> 01:10:42,780
even equal values making difficult for

1294
01:10:42,780 --> 01:10:46,260
the attack to this distinguish the

1295
01:10:46,260 --> 01:10:48,980
character k

1296
01:10:50,760 --> 01:10:53,699
now with the challenges of a traditional

1297
01:10:53,699 --> 01:10:56,940
divide and conquer based attacks where

1298
01:10:56,940 --> 01:10:59,159
we introduce an efficient profile

1299
01:10:59,159 --> 01:11:03,600
attacked method of RC SCA with belief

1300
01:11:03,600 --> 01:11:06,960
provocation BP on the factor graph a

1301
01:11:06,960 --> 01:11:09,300
cryptographic implementation

1302
01:11:09,300 --> 01:11:13,440
and template matching we can exploit the

1303
01:11:13,440 --> 01:11:16,980
vulnerabilities in the implementation by

1304
01:11:16,980 --> 01:11:19,080
Sasa

1305
01:11:19,080 --> 01:11:22,260
normally with wearable news that cycles

1306
01:11:22,260 --> 01:11:25,020
and Factor Knows by skills we can

1307
01:11:25,020 --> 01:11:28,980
construct the effect graph you know in a

1308
01:11:28,980 --> 01:11:31,320
photograph or crypto graphic

1309
01:11:31,320 --> 01:11:32,760
implementation

1310
01:11:32,760 --> 01:11:35,640
there are two types of factors

1311
01:11:35,640 --> 01:11:38,580
the one corresponds to the variables of

1312
01:11:38,580 --> 01:11:40,560
implementation

1313
01:11:40,560 --> 01:11:44,280
well the another describe the the

1314
01:11:44,280 --> 01:11:46,679
priority knowledge of the variables

1315
01:11:46,679 --> 01:11:50,159
occurred through template attacks on the

1316
01:11:50,159 --> 01:11:51,900
center channel leakage

1317
01:11:51,900 --> 01:11:56,219
the BP applies above massage rule to all

1318
01:11:56,219 --> 01:11:58,080
the nodes and vectors

1319
01:11:58,080 --> 01:12:01,320
finally the probabilities of sensitive

1320
01:12:01,320 --> 01:12:05,100
rules are obtained with the iteration of

1321
01:12:05,100 --> 01:12:07,820
propagation

1322
01:12:08,760 --> 01:12:13,140
now with the SAA SAA we can construct

1323
01:12:13,140 --> 01:12:14,520
the factor graph

1324
01:12:14,520 --> 01:12:19,199
the secret key as is displayed into bw1

1325
01:12:19,199 --> 01:12:23,659
to bw7 of degrees 64.

1326
01:12:23,659 --> 01:12:28,199
multiplying the W1 to aw7 obtained by

1327
01:12:28,199 --> 01:12:31,440
the step test it follows the place the

1328
01:12:31,440 --> 01:12:33,540
polynomial into four polynomials of

1329
01:12:33,540 --> 01:12:35,159
degree 16.

1330
01:12:35,159 --> 01:12:39,120
and transform 2 degrees complexity

1331
01:12:39,120 --> 01:12:40,400
for example

1332
01:12:40,400 --> 01:12:47,159
aw11 to aw19 and the bw11 to bw19 reduce

1333
01:12:47,159 --> 01:12:51,480
the form in W1 and the bw1 performs the

1334
01:12:51,480 --> 01:12:54,300
circle book polynomial multiplication of

1335
01:12:54,300 --> 01:12:56,460
degree 16.

1336
01:12:56,460 --> 01:12:59,100
and we can construct the corresponding

1337
01:12:59,100 --> 01:13:01,260
to Superbook polynomial multiplication

1338
01:13:01,260 --> 01:13:03,300
as FG

1339
01:13:03,300 --> 01:13:07,860
for every key of 16 degree polynomials

1340
01:13:07,860 --> 01:13:13,560
and under the nose bw11 to bw19 are

1341
01:13:13,560 --> 01:13:17,580
connected to the corresponding sfg

1342
01:13:17,580 --> 01:13:22,080
the factor I've added describes how

1343
01:13:22,080 --> 01:13:24,960
variables nodes inside of two levels of

1344
01:13:24,960 --> 01:13:28,199
the consumer algorithm are relative

1345
01:13:28,199 --> 01:13:30,840
are related are related

1346
01:13:30,840 --> 01:13:33,199
and we can formalize the factor graph

1347
01:13:33,199 --> 01:13:35,600
corresponding to care sugar

1348
01:13:35,600 --> 01:13:39,540
kfg for the nine polynomials of degree

1349
01:13:39,540 --> 01:13:42,260
16.

1350
01:13:44,159 --> 01:13:48,300
now with the sfg and kfg the last step

1351
01:13:48,300 --> 01:13:51,239
is to formalize the implementation of

1352
01:13:51,239 --> 01:13:53,400
term cook evaluation

1353
01:13:53,400 --> 01:13:56,760
for the first stage of the algorithm we

1354
01:13:56,760 --> 01:13:59,940
use a similar idea to construct a vector

1355
01:13:59,940 --> 01:14:02,719
graph for H

1356
01:14:04,980 --> 01:14:08,520
now with too many templates it will

1357
01:14:08,520 --> 01:14:13,020
reduce the efficiency of the rcsca

1358
01:14:13,020 --> 01:14:15,179
for the last paid release of the

1359
01:14:15,179 --> 01:14:18,420
immediate value in the algorithm a

1360
01:14:18,420 --> 01:14:21,000
straightforward way to decrease the

1361
01:14:21,000 --> 01:14:24,600
required templates is to switch to Hemi

1362
01:14:24,600 --> 01:14:25,920
weight templates

1363
01:14:25,920 --> 01:14:27,960
it can be found large

1364
01:14:27,960 --> 01:14:30,960
the class number of each node is

1365
01:14:30,960 --> 01:14:34,620
decreased by using hemiway templates

1366
01:14:34,620 --> 01:14:38,940
however it still requires about 20 cents

1367
01:14:38,940 --> 01:14:41,159
templates

1368
01:14:41,159 --> 01:14:45,120
so with our goal to deep learning

1369
01:14:45,120 --> 01:14:48,300
the extreme work of power power analysis

1370
01:14:48,300 --> 01:14:50,960
shows that neural network technology

1371
01:14:50,960 --> 01:14:55,140
could build an efficient model that at

1372
01:14:55,140 --> 01:14:57,719
least as effective as a standard

1373
01:14:57,719 --> 01:15:00,480
template model without any

1374
01:15:00,480 --> 01:15:03,000
purposing operations

1375
01:15:03,000 --> 01:15:06,120
we utilize a suitable model with a good

1376
01:15:06,120 --> 01:15:10,679
balance between training time and effect

1377
01:15:10,679 --> 01:15:14,159
the impulse of our Network as power

1378
01:15:14,159 --> 01:15:18,780
Chase and it outputs the distribution of

1379
01:15:18,780 --> 01:15:20,699
the class labels

1380
01:15:20,699 --> 01:15:24,420
the result of this classification is a

1381
01:15:24,420 --> 01:15:27,000
probability Vector of the Heming weight

1382
01:15:27,000 --> 01:15:30,320
prediction corresponds to one class

1383
01:15:30,320 --> 01:15:33,440
Factor news

1384
01:15:35,520 --> 01:15:39,540
now with a large graph of many nodes it

1385
01:15:39,540 --> 01:15:42,420
will decrease the execution efficiency

1386
01:15:42,420 --> 01:15:46,739
of the attack and firstly we can use

1387
01:15:46,739 --> 01:15:50,300
this formula to accumulate probability

1388
01:15:50,300 --> 01:15:54,540
and the templated attack of multiple

1389
01:15:54,540 --> 01:15:59,239
curves annoying sfg we found that

1390
01:15:59,239 --> 01:16:02,659
1kbh corresponds to several different

1391
01:16:02,659 --> 01:16:05,699
known sabotaged base

1392
01:16:05,699 --> 01:16:09,659
and we will theoretically that the

1393
01:16:09,659 --> 01:16:12,120
probability of this formula

1394
01:16:12,120 --> 01:16:14,580
is equal to the age of probability

1395
01:16:14,580 --> 01:16:18,480
probability of the BP update

1396
01:16:18,480 --> 01:16:20,880
in the factor graph

1397
01:16:20,880 --> 01:16:24,120
therefore we simplify the factor graph

1398
01:16:24,120 --> 01:16:26,960
to the right

1399
01:16:29,400 --> 01:16:32,580
now with management Cycles the

1400
01:16:32,580 --> 01:16:35,340
performance of BP algorithms will

1401
01:16:35,340 --> 01:16:38,699
decrease so to deal with these short

1402
01:16:38,699 --> 01:16:41,460
circles we will utilize the priority

1403
01:16:41,460 --> 01:16:45,420
check Matrix it indicates that the cycle

1404
01:16:45,420 --> 01:16:49,080
of length 4 occurs when two rows have

1405
01:16:49,080 --> 01:16:52,440
one and two same locations in the

1406
01:16:52,440 --> 01:16:55,639
priority check Matrix

1407
01:16:56,340 --> 01:17:00,659
now with the measures we separate the BP

1408
01:17:00,659 --> 01:17:05,219
algorithm in kfg into two steps we first

1409
01:17:05,219 --> 01:17:07,800
detect the short circles with some

1410
01:17:07,800 --> 01:17:11,159
parity check Matrix firstly it can

1411
01:17:11,159 --> 01:17:12,320
really

1412
01:17:12,320 --> 01:17:15,659
strictly identify the cycles of length

1413
01:17:15,659 --> 01:17:17,880
4. in The Matrix

1414
01:17:17,880 --> 01:17:21,659
and we perform standard BP algorithm on

1415
01:17:21,659 --> 01:17:23,460
the subgraph

1416
01:17:23,460 --> 01:17:27,420
compared to the original BP on kfg this

1417
01:17:27,420 --> 01:17:30,480
method displays the whole BP into two

1418
01:17:30,480 --> 01:17:34,820
steps and excuse in secretion with

1419
01:17:34,820 --> 01:17:37,080
arithmetic with the performance

1420
01:17:37,080 --> 01:17:39,980
degradation

1421
01:17:42,480 --> 01:17:45,860
now with the simulation Chase

1422
01:17:45,860 --> 01:17:48,900
generated by the Heming weight with

1423
01:17:48,900 --> 01:17:51,360
different gaussian noise levels

1424
01:17:51,360 --> 01:17:54,000
we analyze the Improvement of our

1425
01:17:54,000 --> 01:17:55,800
measures

1426
01:17:55,800 --> 01:18:00,020
for each simulation there have 144

1427
01:18:00,020 --> 01:18:03,900
intermediate variables of multiplication

1428
01:18:03,900 --> 01:18:07,500
and we perform 100 experiments and

1429
01:18:07,500 --> 01:18:11,040
compute the average results

1430
01:18:11,040 --> 01:18:14,219
and we first evaluate the effects of the

1431
01:18:14,219 --> 01:18:16,739
fact graph optimization

1432
01:18:16,739 --> 01:18:19,440
the coefficient the coefficient of the

1433
01:18:19,440 --> 01:18:22,199
secret key is played into several

1434
01:18:22,199 --> 01:18:26,159
variables during terminal evaluation

1435
01:18:26,159 --> 01:18:29,280
each variable the place into nine

1436
01:18:29,280 --> 01:18:30,600
coefficients

1437
01:18:30,600 --> 01:18:33,719
during Health super evaluation folder

1438
01:18:33,719 --> 01:18:36,480
and these coefficients are our Target

1439
01:18:36,480 --> 01:18:41,059
during the during the attack

1440
01:18:41,520 --> 01:18:45,120
so from the dots we can see that the

1441
01:18:45,120 --> 01:18:48,540
success rate turns to decrease with

1442
01:18:48,540 --> 01:18:52,159
increasing noise level

1443
01:18:52,380 --> 01:18:56,580
now with a bow we also evaluated the

1444
01:18:56,580 --> 01:19:01,380
whole fact graph under the two-step sfg

1445
01:19:01,380 --> 01:19:05,040
the execution time during the BP

1446
01:19:05,040 --> 01:19:09,239
on the fact graph is recorded to compare

1447
01:19:09,239 --> 01:19:12,719
the efficiency of the two sfgs

1448
01:19:12,719 --> 01:19:14,460
it shows that

1449
01:19:14,460 --> 01:19:18,659
base based base based sfg request last

1450
01:19:18,659 --> 01:19:21,540
time than the original sfg

1451
01:19:21,540 --> 01:19:24,000
while maintaining the same success rate

1452
01:19:24,000 --> 01:19:26,100
as expected

1453
01:19:26,100 --> 01:19:29,360
the time needed to the same success rate

1454
01:19:29,360 --> 01:19:33,060
reduced to less than one second for

1455
01:19:33,060 --> 01:19:36,260
original attacks

1456
01:19:38,640 --> 01:19:42,360
now with the input BP we perform the

1457
01:19:42,360 --> 01:19:45,719
original BP and the input BP on the same

1458
01:19:45,719 --> 01:19:47,159
kfg

1459
01:19:47,159 --> 01:19:50,239
it shows that as predictable

1460
01:19:50,239 --> 01:19:53,000
Cycles in effect graph

1461
01:19:53,000 --> 01:19:55,739
significantly impact attacking

1462
01:19:55,739 --> 01:19:57,360
performance

1463
01:19:57,360 --> 01:20:00,300
the the attack's success rate for

1464
01:20:00,300 --> 01:20:02,699
example the BP and perform the original

1465
01:20:02,699 --> 01:20:07,159
VP while taking less in time

1466
01:20:08,900 --> 01:20:11,940
now with the effectiveness of the

1467
01:20:11,940 --> 01:20:14,280
simulation results we perform the

1468
01:20:14,280 --> 01:20:17,480
Practical attack to evaluate the

1469
01:20:17,480 --> 01:20:20,280
improved assay SCA

1470
01:20:20,280 --> 01:20:22,260
it performs the C reference

1471
01:20:22,260 --> 01:20:26,420
implementation of stable on the

1472
01:20:26,420 --> 01:20:30,860
stm32 nucleus 64 bone and the

1473
01:20:30,860 --> 01:20:34,320
electromagnetic signals are sampled

1474
01:20:34,320 --> 01:20:37,940
assembled to a digital uh statistical

1475
01:20:37,940 --> 01:20:42,360
dsox series from KSAT with a sampling

1476
01:20:42,360 --> 01:20:46,020
rate of 100 million simple per second

1477
01:20:46,020 --> 01:20:49,800
and the bandwidth limited of 200

1478
01:20:49,800 --> 01:20:51,600
megahertz

1479
01:20:51,600 --> 01:20:54,960
so I'll approach image we record each

1480
01:20:54,960 --> 01:20:56,239
operation

1481
01:20:56,239 --> 01:20:58,460
contains one

1482
01:20:58,460 --> 01:21:02,460
144 multiplication

1483
01:21:04,560 --> 01:21:08,540
now when the 16th sabotaged with

1484
01:21:08,540 --> 01:21:10,159
distinguish

1485
01:21:10,159 --> 01:21:13,440
distinguish Hemingway difference among

1486
01:21:13,440 --> 01:21:16,320
among different classes we perform the

1487
01:21:16,320 --> 01:21:18,960
template attack and the Deep learning

1488
01:21:18,960 --> 01:21:21,260
based attack on the training side

1489
01:21:21,260 --> 01:21:25,020
consists of 19736 contains different

1490
01:21:25,020 --> 01:21:30,440
numbers of points of interest 50 80 100

1491
01:21:30,440 --> 01:21:34,320
and the Overton probabilities are used

1492
01:21:34,320 --> 01:21:37,860
to perform the BP on our photograph

1493
01:21:37,860 --> 01:21:39,780
it shows that

1494
01:21:39,780 --> 01:21:42,960
the deeper learning existed as a SAA

1495
01:21:42,960 --> 01:21:45,540
achieves achieve the

1496
01:21:45,540 --> 01:21:48,420
High success rate than the traditional

1497
01:21:48,420 --> 01:21:50,400
template attack

1498
01:21:50,400 --> 01:21:54,420
and it is simplexifies the profile the

1499
01:21:54,420 --> 01:21:57,060
profile procedure other than a large

1500
01:21:57,060 --> 01:21:59,520
number of templates in the traditional

1501
01:21:59,520 --> 01:22:02,780
template attacks

1502
01:22:03,239 --> 01:22:07,199
so to summarize We have basically said

1503
01:22:07,199 --> 01:22:10,380
that the term called multiplication has

1504
01:22:10,380 --> 01:22:12,840
a vulnerabilities considering single

1505
01:22:12,840 --> 01:22:14,219
chance attacks

1506
01:22:14,219 --> 01:22:17,400
and they will and we apply the Deep

1507
01:22:17,400 --> 01:22:20,100
learning power text to decrease the

1508
01:22:20,100 --> 01:22:21,600
tremendous amount

1509
01:22:21,600 --> 01:22:25,800
of money Rarity templates uh traditional

1510
01:22:25,800 --> 01:22:27,780
essay SCA

1511
01:22:27,780 --> 01:22:31,560
and we optimize the factor graph and

1512
01:22:31,560 --> 01:22:35,719
also improve the BP algorithm to

1513
01:22:35,719 --> 01:22:39,900
eliminate eliminate the influence of

1514
01:22:39,900 --> 01:22:43,260
short circles that frequently appears in

1515
01:22:43,260 --> 01:22:45,600
the photograph of Tom Cook

1516
01:22:45,600 --> 01:22:49,140
now with the results of the experiments

1517
01:22:49,140 --> 01:22:53,040
we prove the effect of input attack

1518
01:22:53,040 --> 01:22:56,100
here thanks for your attention and I

1519
01:22:56,100 --> 01:22:58,620
have and if you have any questions you

1520
01:22:58,620 --> 01:23:01,199
are more than welcome to contact the the

1521
01:23:01,199 --> 01:23:04,260
other authors and I want to thank you so

1522
01:23:04,260 --> 01:23:06,900
much for watching and I hope you have a

1523
01:23:06,900 --> 01:23:09,259
great day

1524
01:23:18,679 --> 01:23:22,380
so grg apologizes with their internet

1525
01:23:22,380 --> 01:23:24,540
connection is not really stable enough

1526
01:23:24,540 --> 01:23:27,179
to hear questions from here

1527
01:23:27,179 --> 01:23:29,100
um so if you want to ask them a question

1528
01:23:29,100 --> 01:23:33,000
you can either use zoom chat or yeah as

1529
01:23:33,000 --> 01:23:35,100
mentioned look up the contact info on

1530
01:23:35,100 --> 01:23:36,600
the websites and

1531
01:23:36,600 --> 01:23:40,340
ask all the questions you want

1532
01:23:45,480 --> 01:23:49,199
hello so two quick announcements

1533
01:23:49,199 --> 01:23:52,260
um the first one is just a reminder that

1534
01:23:52,260 --> 01:23:54,480
the let's say the social part of the day

1535
01:23:54,480 --> 01:23:57,360
starts at 6 30.

1536
01:23:57,360 --> 01:24:00,179
um in this place called spot or Aza you

1537
01:24:00,179 --> 01:24:01,560
can you can just type it into Google

1538
01:24:01,560 --> 01:24:04,320
Maps um it's a 15 minutes roughly 15 20

1539
01:24:04,320 --> 01:24:06,780
minutes walk from here

1540
01:24:06,780 --> 01:24:09,659
um if if you prefer to work with us so

1541
01:24:09,659 --> 01:24:11,280
we will have some of our guys walking

1542
01:24:11,280 --> 01:24:14,640
there from here at 6 15 Sharp

1543
01:24:14,640 --> 01:24:17,040
yeah but we can't do that with 500

1544
01:24:17,040 --> 01:24:18,239
people so

1545
01:24:18,239 --> 01:24:20,040
yeah everybody basically who has a phone

1546
01:24:20,040 --> 01:24:21,900
please just go there by yourself around

1547
01:24:21,900 --> 01:24:24,480
6 30 you can be there

1548
01:24:24,480 --> 01:24:26,880
um you can also come a bit a little bit

1549
01:24:26,880 --> 01:24:28,980
later so the first hour is is like a

1550
01:24:28,980 --> 01:24:30,900
cover reception yeah so if you go to the

1551
01:24:30,900 --> 01:24:32,100
hotel room you want to change or

1552
01:24:32,100 --> 01:24:33,840
something you don't have to run and be

1553
01:24:33,840 --> 01:24:36,540
there 6 30 sharp starting from 6 30

1554
01:24:36,540 --> 01:24:39,120
you're welcome to arrive

1555
01:24:39,120 --> 01:24:41,159
if you want to work with us we leave at

1556
01:24:41,159 --> 01:24:43,500
6 15 Sharp

1557
01:24:43,500 --> 01:24:45,480
um the other thing is a little bit uh

1558
01:24:45,480 --> 01:24:47,699
less nice so we have two positive cases

1559
01:24:47,699 --> 01:24:50,460
uh confirmed at chess I mean this was

1560
01:24:50,460 --> 01:24:52,560
kind of to be expected people didn't

1561
01:24:52,560 --> 01:24:54,239
feel well this morning did a self-test

1562
01:24:54,239 --> 01:24:57,060
were positive didn't come anymore okay

1563
01:24:57,060 --> 01:24:58,679
so now we're helping them with getting

1564
01:24:58,679 --> 01:25:01,500
PCR tests and figuring out if they have

1565
01:25:01,500 --> 01:25:04,380
to guarantine and how and whatever

1566
01:25:04,380 --> 01:25:06,120
it shouldn't be a concern for tonight

1567
01:25:06,120 --> 01:25:08,219
the place is huge where we're going it's

1568
01:25:08,219 --> 01:25:10,020
well ventilated it's a huge place you

1569
01:25:10,020 --> 01:25:12,480
will only be like yeah sitting like you

1570
01:25:12,480 --> 01:25:13,739
will only be close to the people who are

1571
01:25:13,739 --> 01:25:15,420
sitting left and right of you off the

1572
01:25:15,420 --> 01:25:17,460
table so it should be okay but we

1573
01:25:17,460 --> 01:25:19,020
thought that you should know this and

1574
01:25:19,020 --> 01:25:21,060
then everybody can decide by themselves

1575
01:25:21,060 --> 01:25:22,980
what they do about it okay we hope

1576
01:25:22,980 --> 01:25:25,020
everybody will still come we don't think

1577
01:25:25,020 --> 01:25:27,420
it's a huge risk but it's it's your own

1578
01:25:27,420 --> 01:25:30,980
call okay see you later

