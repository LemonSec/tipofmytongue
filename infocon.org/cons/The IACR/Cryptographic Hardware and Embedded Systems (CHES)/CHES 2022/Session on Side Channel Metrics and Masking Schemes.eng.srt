1
00:00:00,000 --> 00:00:03,000
yes

2
00:00:09,599 --> 00:00:11,599
um

3
00:00:39,320 --> 00:00:42,379
thank you

4
00:00:47,960 --> 00:00:52,280
all right he's on timer

5
00:00:52,379 --> 00:00:55,379
is

6
00:00:58,260 --> 00:01:00,320
um

7
00:01:01,260 --> 00:01:04,019
I can take the time with somebody and I

8
00:01:04,019 --> 00:01:07,260
will keep it on my lap a bit and then

9
00:01:07,260 --> 00:01:09,479
when the time lapse is close I can give

10
00:01:09,479 --> 00:01:12,979
a sign to you thank you foreign

11
00:01:50,460 --> 00:01:53,179
thank you

12
00:02:06,960 --> 00:02:09,500
okay

13
00:02:28,260 --> 00:02:31,260
foreign

14
00:04:01,379 --> 00:04:03,720
good morning and welcome to this session

15
00:04:03,720 --> 00:04:06,900
of Chess 2022 know

16
00:04:06,900 --> 00:04:07,980
um

17
00:04:07,980 --> 00:04:11,340
today we have four papers to go over the

18
00:04:11,340 --> 00:04:13,860
first one is going to be presented by

19
00:04:13,860 --> 00:04:17,820
Akira Ito the floor is yours thank you

20
00:04:17,820 --> 00:04:20,579
uh thank you for a kind Direction

21
00:04:20,579 --> 00:04:22,620
um I'm akirito from energy source

22
00:04:22,620 --> 00:04:26,100
arithmetics laboratory Japan so so I'd

23
00:04:26,100 --> 00:04:28,020
like to talk up today I'd like to talk

24
00:04:28,020 --> 00:04:30,259
about our papers and tie through the

25
00:04:30,259 --> 00:04:32,880
possible information Revisited new

26
00:04:32,880 --> 00:04:35,400
metrics to operate success rate of Assad

27
00:04:35,400 --> 00:04:38,160
Channel attacks this is Joint work for

28
00:04:38,160 --> 00:04:41,880
the Japan

29
00:04:44,220 --> 00:04:46,979
okay uh let me explain first explain the

30
00:04:46,979 --> 00:04:49,680
background of this work so the you know

31
00:04:49,680 --> 00:04:51,540
the ca is one of the most powerful

32
00:04:51,540 --> 00:04:54,479
attacks and so many studies on the drcca

33
00:04:54,479 --> 00:04:57,720
having conducted recently however there

34
00:04:57,720 --> 00:05:00,000
is a challenges in the performance

35
00:05:00,000 --> 00:05:03,660
separation over dlcca so that there were

36
00:05:03,660 --> 00:05:05,460
training the neural talk model that

37
00:05:05,460 --> 00:05:08,100
requires a performance metric for the

38
00:05:08,100 --> 00:05:11,460
hyper parameter tuning and are stopping

39
00:05:11,460 --> 00:05:14,820
for example there were many architecture

40
00:05:14,820 --> 00:05:16,860
so when you network proposing the

41
00:05:16,860 --> 00:05:19,320
machine learning community of such as

42
00:05:19,320 --> 00:05:21,720
much layer passive Throne convolutional

43
00:05:21,720 --> 00:05:23,699
neural network and the wrong short-term

44
00:05:23,699 --> 00:05:26,160
memories and we have to choose the best

45
00:05:26,160 --> 00:05:29,460
one among them in the training phase so

46
00:05:29,460 --> 00:05:31,340
hyperprint tuning in

47
00:05:31,340 --> 00:05:34,259
so to evaluate the performance of these

48
00:05:34,259 --> 00:05:39,240
models we have we neither performance

49
00:05:39,240 --> 00:05:41,220
metric for the side Channel deep

50
00:05:41,220 --> 00:05:43,259
learning solution attack

51
00:05:43,259 --> 00:05:46,199
another example is are stopping so this

52
00:05:46,199 --> 00:05:48,660
is our example of the running card so

53
00:05:48,660 --> 00:05:51,479
axis shows a number of epochs and y-axis

54
00:05:51,479 --> 00:05:54,660
shows the those values and you can and

55
00:05:54,660 --> 00:05:57,060
in so you know that this part

56
00:05:57,060 --> 00:05:59,460
corresponds to the under 50 and this

57
00:05:59,460 --> 00:06:02,699
corresponds to the row 15 and usually in

58
00:06:02,699 --> 00:06:06,840
training phase we should use a parameter

59
00:06:06,840 --> 00:06:12,198
uh between these parts around here

60
00:06:12,800 --> 00:06:15,180
function using the training is not

61
00:06:15,180 --> 00:06:17,880
adequate for the search engine attack uh

62
00:06:17,880 --> 00:06:20,580
the parameter to this time does not give

63
00:06:20,580 --> 00:06:23,039
the good performance so

64
00:06:23,039 --> 00:06:25,860
the rose function must appear good

65
00:06:25,860 --> 00:06:27,620
metrics for the search and attack

66
00:06:27,620 --> 00:06:30,240
however there are major metrics in the

67
00:06:30,240 --> 00:06:32,699
machine learning such like cross

68
00:06:32,699 --> 00:06:35,220
entropyles function and accuracy are not

69
00:06:35,220 --> 00:06:37,500
suitable for the cytogen attack for

70
00:06:37,500 --> 00:06:40,740
example in teachers 2019

71
00:06:40,740 --> 00:06:44,100
um DJ index group pointed out the model

72
00:06:44,100 --> 00:06:46,500
with addressable zero percent doesn't

73
00:06:46,500 --> 00:06:49,500
know the mean of drcca will fail so

74
00:06:49,500 --> 00:06:51,240
therefore uh

75
00:06:51,240 --> 00:06:55,979
this box encouraged us to use the uh the

76
00:06:55,979 --> 00:06:58,340
conventional conventional research and

77
00:06:58,340 --> 00:07:01,440
metrics such as the success rate and

78
00:07:01,440 --> 00:07:03,840
guessing entropy however the this

79
00:07:03,840 --> 00:07:06,960
computation cost for this Matrix is are

80
00:07:06,960 --> 00:07:08,639
too high for training the unit work

81
00:07:08,639 --> 00:07:10,100
models

82
00:07:10,100 --> 00:07:13,500
so to address this problem with their

83
00:07:13,500 --> 00:07:15,660
performance celebration within the Recca

84
00:07:15,660 --> 00:07:18,840
uh we have the true contributions in

85
00:07:18,840 --> 00:07:21,539
these papers the first one is analysis

86
00:07:21,539 --> 00:07:23,280
of the relation between the

87
00:07:23,280 --> 00:07:25,259
cross-centropy loss function and the

88
00:07:25,259 --> 00:07:27,720
success rate so we explained why

89
00:07:27,720 --> 00:07:30,060
percentropy loss is not suitable to

90
00:07:30,060 --> 00:07:32,240
measure the performance for the drcca

91
00:07:32,240 --> 00:07:35,520
and the second contribution is the

92
00:07:35,520 --> 00:07:39,840
proposal new metrics for dscca and that

93
00:07:39,840 --> 00:07:44,520
is called our effective CE and Pi so the

94
00:07:44,520 --> 00:07:46,199
CE is stand for the cross entropy and

95
00:07:46,199 --> 00:07:48,319
the pi so for the possible information

96
00:07:48,319 --> 00:07:52,259
so EC and API are more useful metrics

97
00:07:52,259 --> 00:07:54,419
than the cross entropy and the passive

98
00:07:54,419 --> 00:07:57,060
information for such an attack and the

99
00:07:57,060 --> 00:07:59,340
API can interverse to estimate their

100
00:07:59,340 --> 00:08:01,680
upper bound with success rate

101
00:08:01,680 --> 00:08:04,560
okay I I work fast explain the relation

102
00:08:04,560 --> 00:08:07,680
between the negative local food which is

103
00:08:07,680 --> 00:08:10,520
a typical function in the

104
00:08:10,520 --> 00:08:13,500
deep running such an attack and mutual

105
00:08:13,500 --> 00:08:16,440
information so the negative logical foot

106
00:08:16,440 --> 00:08:20,580
is defined as a DC equation and in this

107
00:08:20,580 --> 00:08:24,300
equation m is a number of the trace and

108
00:08:24,300 --> 00:08:27,539
the Cure is a property distribution that

109
00:08:27,539 --> 00:08:30,240
will derived from the models and Z is

110
00:08:30,240 --> 00:08:32,458
their intermittent body and X is a trace

111
00:08:32,458 --> 00:08:35,880
and Theta is a model parameters so the

112
00:08:35,880 --> 00:08:37,860
important point of the negative local

113
00:08:37,860 --> 00:08:41,279
food is its minimization is equivalent

114
00:08:41,279 --> 00:08:43,559
to the maximum likelihood estimation so

115
00:08:43,559 --> 00:08:46,080
therefore in the training phase we

116
00:08:46,080 --> 00:08:48,779
usually find the model parameters that

117
00:08:48,779 --> 00:08:52,680
minimize this negative rubric values so

118
00:08:52,680 --> 00:08:55,080
in actions the anilator has a good

119
00:08:55,080 --> 00:08:57,720
property from a third color Viewpoint uh

120
00:08:57,720 --> 00:08:59,760
I mean and then it can be regarded as a

121
00:08:59,760 --> 00:09:03,000
proximation of cross entropy so if the

122
00:09:03,000 --> 00:09:05,459
number of traces m is substantially

123
00:09:05,459 --> 00:09:08,399
large then this approx will have this

124
00:09:08,399 --> 00:09:12,540
approximation so so in any approximated

125
00:09:12,540 --> 00:09:15,180
course is the minus 0 q and this is a

126
00:09:15,180 --> 00:09:17,820
definition of a cross entropy of the Q

127
00:09:17,820 --> 00:09:20,279
so in other words a generator can be

128
00:09:20,279 --> 00:09:22,380
used to approximate the first entropy

129
00:09:22,380 --> 00:09:27,240
and for this reason uh this scenario is

130
00:09:27,240 --> 00:09:29,220
sometimes called their uh course

131
00:09:29,220 --> 00:09:30,959
intervals function

132
00:09:30,959 --> 00:09:33,300
and the in action there is a relation

133
00:09:33,300 --> 00:09:35,339
between the mutual information and the

134
00:09:35,339 --> 00:09:38,459
disclosed entropy I mean the icx which

135
00:09:38,459 --> 00:09:41,300
is a mutual information between the

136
00:09:41,300 --> 00:09:44,700
intermittent body and the trace is

137
00:09:44,700 --> 00:09:48,959
bounded by h k minus CQ where h k is an

138
00:09:48,959 --> 00:09:51,180
entropy with a partial key for example

139
00:09:51,180 --> 00:09:55,620
in the AES the h k is equal to the 8 Bit

140
00:09:55,620 --> 00:09:57,240
And

141
00:09:57,240 --> 00:10:01,500
and so as I mentioned this cross entropy

142
00:10:01,500 --> 00:10:04,200
can be approximated by negative logical

143
00:10:04,200 --> 00:10:07,380
foot so this lower bound can be uh

144
00:10:07,380 --> 00:10:10,620
estimated by using this formulas

145
00:10:10,620 --> 00:10:14,760
so in actions so this HK my CQ is

146
00:10:14,760 --> 00:10:16,260
sometimes called the possible

147
00:10:16,260 --> 00:10:17,360
information

148
00:10:17,360 --> 00:10:20,760
gqzx and this uh denotes how much

149
00:10:20,760 --> 00:10:22,980
information with the key in order to can

150
00:10:22,980 --> 00:10:27,380
extract from the set of channels

151
00:10:27,720 --> 00:10:29,940
okay so then I'd like to explain the

152
00:10:29,940 --> 00:10:31,440
relation between the mutual information

153
00:10:31,440 --> 00:10:35,120
and success rate in the teachers

154
00:10:35,120 --> 00:10:38,519
2019 on the Tuesday and his group proved

155
00:10:38,519 --> 00:10:40,740
that following the inquiries so this

156
00:10:40,740 --> 00:10:42,959
equality gives a relation between their

157
00:10:42,959 --> 00:10:45,060
Mutual information and the success rate

158
00:10:45,060 --> 00:10:47,640
so I'd like to First explain the

159
00:10:47,640 --> 00:10:50,579
left-hand side of this equality so this

160
00:10:50,579 --> 00:10:53,760
figure shows a plot over C sorry for the

161
00:10:53,760 --> 00:10:58,440
bit ranks of partial key is two bits so

162
00:10:58,440 --> 00:11:01,019
the x-axis shows the success rate and

163
00:11:01,019 --> 00:11:05,160
y-axis shows the the value with CSR and

164
00:11:05,160 --> 00:11:08,399
this blue cup shows either a plot over

165
00:11:08,399 --> 00:11:10,440
CSR

166
00:11:10,440 --> 00:11:12,980
so you can see that from these figures

167
00:11:12,980 --> 00:11:17,220
if the success rate is equal to 0.25 the

168
00:11:17,220 --> 00:11:20,160
CSR is becomes zeros which means we need

169
00:11:20,160 --> 00:11:22,440
no key information to achieve this

170
00:11:22,440 --> 00:11:26,399
success rate so so in this case you know

171
00:11:26,399 --> 00:11:30,180
the the bit range of the partial key is

172
00:11:30,180 --> 00:11:32,760
two bits in other words the numbered key

173
00:11:32,760 --> 00:11:36,300
candidates is in the attack attack phase

174
00:11:36,300 --> 00:11:40,019
is four so therefore if we choose a

175
00:11:40,019 --> 00:11:43,440
random read one of the key candidates

176
00:11:43,440 --> 00:11:44,940
and

177
00:11:44,940 --> 00:11:49,440
the probability that the uh choosing the

178
00:11:49,440 --> 00:11:51,660
key candidate is equal to the correct

179
00:11:51,660 --> 00:11:56,100
key is a 0.25 so we don't need any key

180
00:11:56,100 --> 00:11:59,700
information to achieve this uh success

181
00:11:59,700 --> 00:12:03,899
rate okay so then if the success if the

182
00:12:03,899 --> 00:12:06,240
success rate is equal to one The Rock

183
00:12:06,240 --> 00:12:10,740
CSR becomes a 2 there which means we

184
00:12:10,740 --> 00:12:13,440
need the work information that is the

185
00:12:13,440 --> 00:12:17,279
two bits to achieve success rate of one

186
00:12:17,279 --> 00:12:19,440
so in this way there exists are the

187
00:12:19,440 --> 00:12:22,079
north the amount of the information but

188
00:12:22,079 --> 00:12:24,480
the key and we need to achieve the

189
00:12:24,480 --> 00:12:27,360
certain success rate okay so then I'd

190
00:12:27,360 --> 00:12:30,720
like to explain the this right hand side

191
00:12:30,720 --> 00:12:35,160
so to explain this right hand side uh I

192
00:12:35,160 --> 00:12:38,220
introduce the communication channels uh

193
00:12:38,220 --> 00:12:41,339
Which models or side channels so these

194
00:12:41,339 --> 00:12:44,040
figures uh in these figures K is a

195
00:12:44,040 --> 00:12:46,800
secret to key and T is a frame Takis and

196
00:12:46,800 --> 00:12:50,180
D is an intimate body and the K hat is

197
00:12:50,180 --> 00:12:55,320
estimated to keep values so so you can

198
00:12:55,320 --> 00:12:58,399
start in in these channels K is a

199
00:12:58,399 --> 00:13:00,800
propagated through this direction

200
00:13:00,800 --> 00:13:04,440
operation as box and sub channels the

201
00:13:04,440 --> 00:13:07,019
important point and this channel is uh

202
00:13:07,019 --> 00:13:10,139
this channel models the uh set channels

203
00:13:10,139 --> 00:13:12,660
the important point of this channel is

204
00:13:12,660 --> 00:13:15,240
its maximum amount but transmittable

205
00:13:15,240 --> 00:13:17,519
information with the key through this

206
00:13:17,519 --> 00:13:21,360
channel is given by the icx so therefore

207
00:13:21,360 --> 00:13:24,480
the in this security the right hand side

208
00:13:24,480 --> 00:13:26,399
means that amount of amount of

209
00:13:26,399 --> 00:13:28,079
information with the key available with

210
00:13:28,079 --> 00:13:29,880
their input traces

211
00:13:29,880 --> 00:13:32,820
so and this equality means that this

212
00:13:32,820 --> 00:13:35,040
right hand side must exceed this

213
00:13:35,040 --> 00:13:37,139
restaurant side which is means that how

214
00:13:37,139 --> 00:13:39,240
much entropy does attacker need to

215
00:13:39,240 --> 00:13:42,420
achieve the certain success rate

216
00:13:42,420 --> 00:13:45,240
okay so in this work uh we would react

217
00:13:45,240 --> 00:13:48,060
to extend this in quality for the Deep

218
00:13:48,060 --> 00:13:49,920
learning search channel attacks so

219
00:13:49,920 --> 00:13:54,079
intuitively we expect the foreign

220
00:14:09,620 --> 00:14:13,740
traces so if this Force we can estimate

221
00:14:13,740 --> 00:14:17,519
the success rate by using the uh this

222
00:14:17,519 --> 00:14:21,180
possible information and the computation

223
00:14:21,180 --> 00:14:23,700
overhead of the success rate is uh

224
00:14:23,700 --> 00:14:26,700
larger than the the

225
00:14:26,700 --> 00:14:29,700
uh that with the passive information so

226
00:14:29,700 --> 00:14:33,079
therefore this in quality is useful for

227
00:14:33,079 --> 00:14:37,200
training uh performance metric or the

228
00:14:37,200 --> 00:14:40,139
performance separation of network

229
00:14:40,139 --> 00:14:45,240
in actions uh in teachers uh 2020 and

230
00:14:45,240 --> 00:14:47,220
I'm sure in this group experimentally

231
00:14:47,220 --> 00:14:51,180
showed that this in quality mode

232
00:14:51,180 --> 00:14:54,660
however unfortunately this does not hold

233
00:14:54,660 --> 00:14:57,300
in in other words we can create a

234
00:14:57,300 --> 00:15:00,899
counter example of this equality using

235
00:15:00,899 --> 00:15:03,600
this Theory by using these theorems so

236
00:15:03,600 --> 00:15:06,240
red QV the models are defined for a

237
00:15:06,240 --> 00:15:09,560
foreign conversion of Q with their

238
00:15:09,560 --> 00:15:12,420
inverse temperature of which is a

239
00:15:12,420 --> 00:15:15,839
positive real number so and for any

240
00:15:15,839 --> 00:15:18,899
better the success rate using the model

241
00:15:18,899 --> 00:15:22,199
Q is equivalent to that using the uh

242
00:15:22,199 --> 00:15:23,820
this qubit

243
00:15:23,820 --> 00:15:25,560
foreign

244
00:15:25,560 --> 00:15:27,360
Okay so

245
00:15:27,360 --> 00:15:31,760
this is a expanded result of the

246
00:15:31,760 --> 00:15:34,680
dsca on the scale data set and this

247
00:15:34,680 --> 00:15:38,160
table shows uh how the an area and the

248
00:15:38,160 --> 00:15:40,500
Cubase and attack results changed with

249
00:15:40,500 --> 00:15:43,920
the page if the beta varies from the

250
00:15:43,920 --> 00:15:49,800
0.21 to 10 so you can see that uh the if

251
00:15:49,800 --> 00:15:53,339
a little bit a bit of value is a smaller

252
00:15:53,339 --> 00:15:57,740
Rush than the negative lower foot

253
00:15:57,740 --> 00:16:01,680
increases in actions so the shape of the

254
00:16:01,680 --> 00:16:06,420
qubit uh also changed with the page

255
00:16:06,420 --> 00:16:09,019
foreign

256
00:16:13,399 --> 00:16:16,019
distribution like this

257
00:16:16,019 --> 00:16:18,360
on the other hand if there are a bit the

258
00:16:18,360 --> 00:16:21,420
variable debate is a Ratched then the

259
00:16:21,420 --> 00:16:25,699
ship of the qubit is a uh

260
00:16:25,699 --> 00:16:29,820
so uh distribution sorry 100 vectors

261
00:16:29,820 --> 00:16:31,079
like this

262
00:16:31,079 --> 00:16:34,079
so you you can see that the person in

263
00:16:34,079 --> 00:16:36,720
area and Cuba changed with the change

264
00:16:36,720 --> 00:16:39,839
weather bitter values however the attack

265
00:16:39,839 --> 00:16:43,079
results such as suggesting entropy and

266
00:16:43,079 --> 00:16:47,519
success rate does not change with a beta

267
00:16:47,519 --> 00:16:50,300
values as you can see from these figures

268
00:16:50,300 --> 00:16:54,779
so and from this uh fact we can create

269
00:16:54,779 --> 00:16:58,139
the counter example Cubit of foreign

270
00:16:58,139 --> 00:17:00,600
equality so therefore this inequality

271
00:17:00,600 --> 00:17:03,779
does not fall

272
00:17:03,779 --> 00:17:06,679
so as I mentioned the success rate is

273
00:17:06,679 --> 00:17:09,299
invariant but cross entropy and possible

274
00:17:09,299 --> 00:17:12,240
information varies with the variable

275
00:17:12,240 --> 00:17:13,280
debate

276
00:17:13,280 --> 00:17:16,699
so in other words uh

277
00:17:16,699 --> 00:17:19,380
uh the course entertainment possible

278
00:17:19,380 --> 00:17:22,199
information is not consistent with to

279
00:17:22,199 --> 00:17:24,000
the success rate

280
00:17:24,000 --> 00:17:27,059
so to address these problems we propose

281
00:17:27,059 --> 00:17:29,299
a new metrics

282
00:17:29,299 --> 00:17:33,960
effective CE and effective Pi all right

283
00:17:33,960 --> 00:17:37,980
so and these are defined as worlds so

284
00:17:37,980 --> 00:17:40,380
the basic idea of our definition with

285
00:17:40,380 --> 00:17:43,140
this Matrix is to remove the certainty

286
00:17:43,140 --> 00:17:45,059
over cross-centric and possible

287
00:17:45,059 --> 00:17:47,820
information in terms of the success rate

288
00:17:47,820 --> 00:17:50,360
for example in

289
00:17:50,360 --> 00:17:56,719
this easy definition is a minimization

290
00:17:58,700 --> 00:18:01,700
and this minimization removes the

291
00:18:01,700 --> 00:18:03,720
uncertainty of the cross-centered in

292
00:18:03,720 --> 00:18:06,000
terms of a success rate

293
00:18:06,000 --> 00:18:07,760
so and

294
00:18:07,760 --> 00:18:13,140
and using this Matrix we can have this

295
00:18:13,140 --> 00:18:16,440
uh equalities so this is a extension

296
00:18:16,440 --> 00:18:19,440
over

297
00:18:19,440 --> 00:18:22,740
uh sorry yeah sorry

298
00:18:22,740 --> 00:18:26,220
this equality uh this equality for the

299
00:18:26,220 --> 00:18:28,799
tdcca

300
00:18:28,799 --> 00:18:31,500
so okay so and then I'd like to show the

301
00:18:31,500 --> 00:18:34,740
experimental results of the secas on the

302
00:18:34,740 --> 00:18:37,200
mass software and hardware

303
00:18:37,200 --> 00:18:38,840
implementations

304
00:18:38,840 --> 00:18:43,020
and these two figures show the result of

305
00:18:43,020 --> 00:18:46,919
our dlcca on the SQL data set and these

306
00:18:46,919 --> 00:18:50,400
two figures show the DSC result over the

307
00:18:50,400 --> 00:18:54,059
Seca on the ti-based implementation so

308
00:18:54,059 --> 00:18:57,740
TI is a stressful implementation

309
00:19:00,020 --> 00:19:02,760
first focus on the list of two figures

310
00:19:02,760 --> 00:19:05,640
this figure shows a running cup during

311
00:19:05,640 --> 00:19:09,539
the training so the X in these figures

312
00:19:09,539 --> 00:19:12,600
the x-axis shows a number of epochs and

313
00:19:12,600 --> 00:19:15,000
why access shows a bad value of the

314
00:19:15,000 --> 00:19:18,120
negative correctly fit and

315
00:19:18,120 --> 00:19:21,780
so in the this uh these are led to carbs

316
00:19:21,780 --> 00:19:25,559
show the cross entropy value and uh this

317
00:19:25,559 --> 00:19:26,880
group

318
00:19:26,880 --> 00:19:31,559
uh this blue curve shows the ECE values

319
00:19:31,559 --> 00:19:34,620
so you can start the ECE is less than

320
00:19:34,620 --> 00:19:38,160
for centropy since the EC is a lower

321
00:19:38,160 --> 00:19:39,240
bounded

322
00:19:39,240 --> 00:19:41,580
over cross entropy

323
00:19:41,580 --> 00:19:46,559
so then oh sorry I uh we will direct to

324
00:19:46,559 --> 00:19:49,679
focus on the right two figures this

325
00:19:49,679 --> 00:19:53,039
figure shows a number of the traces for

326
00:19:53,039 --> 00:19:55,020
successful attack using the neural

327
00:19:55,020 --> 00:19:58,860
network of each Epoch so the x-axis

328
00:19:58,860 --> 00:20:00,480
shows the number of epochs and the wire

329
00:20:00,480 --> 00:20:01,820
accessories

330
00:20:01,820 --> 00:20:06,419
number of traces and you used for the

331
00:20:06,419 --> 00:20:08,820
key recovery and

332
00:20:08,820 --> 00:20:12,960
and this these are ready to cop shows uh

333
00:20:12,960 --> 00:20:15,600
uh actual value so action value means

334
00:20:15,600 --> 00:20:16,799
are

335
00:20:16,799 --> 00:20:21,419
uh so after body is uh obtained by their

336
00:20:21,419 --> 00:20:23,760
attack and actually attacking their each

337
00:20:23,760 --> 00:20:27,140
implementation using the

338
00:20:34,940 --> 00:20:38,780
foreignties so you can see that's the

339
00:20:38,780 --> 00:20:42,720
This World Cup it is a proportional two

340
00:20:42,720 --> 00:20:47,280
doctor one so our method is a would be

341
00:20:47,280 --> 00:20:48,860
useful to

342
00:20:48,860 --> 00:20:51,840
estimate it useful to estimate their

343
00:20:51,840 --> 00:20:54,480
performance of the neural network

344
00:20:54,480 --> 00:20:57,539
so finally I'd like to show the

345
00:20:57,539 --> 00:21:01,919
processing time with each method so

346
00:21:01,919 --> 00:21:04,280
so you can see direct

347
00:21:04,280 --> 00:21:07,620
our method is very fast so the proposed

348
00:21:07,620 --> 00:21:10,500
method is a several hundreds faster than

349
00:21:10,500 --> 00:21:14,160
the empirical success rate evaluation

350
00:21:14,160 --> 00:21:15,419
so

351
00:21:15,419 --> 00:21:17,760
so therefore our method is be efficient

352
00:21:17,760 --> 00:21:19,620
and uh

353
00:21:19,620 --> 00:21:21,720
useful

354
00:21:21,720 --> 00:21:26,520
so let me summarize my talk and uh so in

355
00:21:26,520 --> 00:21:29,520
my uh in my talk we analyze the relation

356
00:21:29,520 --> 00:21:31,320
between the cross entroperous function

357
00:21:31,320 --> 00:21:35,100
and the success rate and we I mentioned

358
00:21:35,100 --> 00:21:37,520
that there are there exists a conversion

359
00:21:37,520 --> 00:21:40,919
of the property distribution which does

360
00:21:40,919 --> 00:21:43,320
if we change the percent of Heroes but

361
00:21:43,320 --> 00:21:48,600
uh but not our success rate and uh is so

362
00:21:48,600 --> 00:21:49,860
therefore there is cross-centric and

363
00:21:49,860 --> 00:21:52,200
passive information however uh

364
00:21:52,200 --> 00:21:55,440
scientific in terms of success rate and

365
00:21:55,440 --> 00:21:59,700
we propose a new Matrix EC and EPI and

366
00:21:59,700 --> 00:22:02,760
they are using them we can estimate

367
00:22:02,760 --> 00:22:05,720
their attack performance with their uh

368
00:22:05,720 --> 00:22:09,360
dscca so in the homework proof whether

369
00:22:09,360 --> 00:22:11,760
our conjectures that is a creative

370
00:22:11,760 --> 00:22:15,480
scissors Epi remains a future work so

371
00:22:15,480 --> 00:22:18,679
thank you that's fine

372
00:22:24,659 --> 00:22:27,000
um thank you for the great presentation

373
00:22:27,000 --> 00:22:29,520
and let's see if there is

374
00:22:29,520 --> 00:22:32,039
one or two questions from the audience

375
00:22:32,039 --> 00:22:34,700
you please

376
00:22:41,520 --> 00:22:43,520
um

377
00:22:46,030 --> 00:22:49,099
[Music]

378
00:22:51,179 --> 00:22:54,980
the temperature skating camera which is

379
00:22:54,980 --> 00:22:59,539
the regularization technique

380
00:23:01,080 --> 00:23:04,159
so if it's a regular relationship makers

381
00:23:04,159 --> 00:23:10,820
we see that it is expected to balance

382
00:23:11,400 --> 00:23:17,100
yes so do you expect that a new metric

383
00:23:17,100 --> 00:23:20,520
would be more efficient with less

384
00:23:20,520 --> 00:23:25,639
propane data or with more prophetic data

385
00:23:26,820 --> 00:23:32,340
is sorry and so you mean there uh so so

386
00:23:32,340 --> 00:23:34,620
whether our metric is useful for the

387
00:23:34,620 --> 00:23:38,880
non-profining or no for profiling an

388
00:23:38,880 --> 00:23:42,720
experts uh how many students is your new

389
00:23:42,720 --> 00:23:46,260
retreat with respect to the amounts of

390
00:23:46,260 --> 00:23:49,460
profiling traces

391
00:23:50,820 --> 00:23:54,480
sorry and so I didn't get to what you

392
00:23:54,480 --> 00:23:57,000
mean so I think

393
00:23:57,000 --> 00:24:01,140
um what he wanted to ask is assume that

394
00:24:01,140 --> 00:24:05,100
we are using the pi itself now we need X

395
00:24:05,100 --> 00:24:09,960
number of traces to evaluate the

396
00:24:09,960 --> 00:24:12,000
um efficiency of soil Channel analysis

397
00:24:12,000 --> 00:24:15,480
Now using your own metric do I need more

398
00:24:15,480 --> 00:24:18,299
than x number of traces or is it less

399
00:24:18,299 --> 00:24:20,220
than number of exit traces the question

400
00:24:20,220 --> 00:24:23,700
is about the profiling phase

401
00:24:23,700 --> 00:24:27,360
okay so I think you mean there our

402
00:24:27,360 --> 00:24:29,400
metrics can reduce their

403
00:24:29,400 --> 00:24:32,900
the number of traces

404
00:24:35,240 --> 00:24:39,419
so so maybe

405
00:24:46,640 --> 00:24:51,419
so uh make uh sorry uh

406
00:24:51,419 --> 00:24:56,159
so solventory can make the training more

407
00:24:56,159 --> 00:24:59,220
efficiently so therefore the the number

408
00:24:59,220 --> 00:25:01,860
one Trace is required for the profile

409
00:25:01,860 --> 00:25:07,020
phase is it can be reduced I think

410
00:25:07,020 --> 00:25:08,539
I guess yeah

411
00:25:08,539 --> 00:25:11,400
thank you um any other question from

412
00:25:11,400 --> 00:25:13,940
audience

413
00:25:14,580 --> 00:25:17,880
let me also check our online friends

414
00:25:17,880 --> 00:25:21,980
nothing so I can ask a question

415
00:25:22,260 --> 00:25:25,020
um let me see if I understand this

416
00:25:25,020 --> 00:25:29,039
correctly if I want to use your metric

417
00:25:29,039 --> 00:25:32,279
what I should do is just still I can use

418
00:25:32,279 --> 00:25:36,240
my categorical cross entropy function

419
00:25:36,240 --> 00:25:39,000
yes in the neural network but if I want

420
00:25:39,000 --> 00:25:39,980
to

421
00:25:39,980 --> 00:25:42,179
interpret the result

422
00:25:42,179 --> 00:25:45,900
I should not stick to nll but I should

423
00:25:45,900 --> 00:25:49,100
just refine it using your improved

424
00:25:49,100 --> 00:25:51,659
metric is it right

425
00:25:51,659 --> 00:25:53,120
yes sorry

426
00:25:53,120 --> 00:25:55,860
if you can show the first or second

427
00:25:55,860 --> 00:25:59,899
slide then six seconds right okay

428
00:26:02,880 --> 00:26:05,640
yeah here here

429
00:26:05,640 --> 00:26:09,059
one bag please wonderful

430
00:26:09,059 --> 00:26:12,900
number two it was number two three

431
00:26:12,900 --> 00:26:15,900
please three here

432
00:26:15,900 --> 00:26:19,740
um because we have access to loss

433
00:26:19,740 --> 00:26:22,860
functions cross entropy loss functions

434
00:26:22,860 --> 00:26:24,779
of course function

435
00:26:24,779 --> 00:26:27,179
um when we are applying machine learning

436
00:26:27,179 --> 00:26:29,279
techniques so we have the loss function

437
00:26:29,279 --> 00:26:33,240
now if I want to use your Technique I

438
00:26:33,240 --> 00:26:35,460
still can use the that loss function but

439
00:26:35,460 --> 00:26:37,740
I should refine

440
00:26:37,740 --> 00:26:41,039
um how to interpret it and how to relate

441
00:26:41,039 --> 00:26:44,900
it to success rate right

442
00:26:45,720 --> 00:26:47,400
yeah yeah

443
00:26:47,400 --> 00:26:49,440
thank you and we can also discuss it

444
00:26:49,440 --> 00:26:52,440
okay

445
00:26:52,679 --> 00:26:55,860
no other question

446
00:26:55,860 --> 00:27:00,199
let's thank this speaker again thank you

447
00:27:05,760 --> 00:27:08,100
the next presentation is going to be

448
00:27:08,100 --> 00:27:10,559
given by Monies

449
00:27:10,559 --> 00:27:14,960
let's set up everything before that

450
00:27:34,860 --> 00:27:37,100
foreign

451
00:28:06,620 --> 00:28:08,940
hello everyone

452
00:28:08,940 --> 00:28:12,059
so I'm Marius Chaudhary and I'm going to

453
00:28:12,059 --> 00:28:14,580
present you our work on efficient side

454
00:28:14,580 --> 00:28:16,080
channel security valuation so full

455
00:28:16,080 --> 00:28:18,120
cryptographic Keys basically we've been

456
00:28:18,120 --> 00:28:21,659
looking at various methods and I'm going

457
00:28:21,659 --> 00:28:24,240
to try to give you a kind of guideline

458
00:28:24,240 --> 00:28:27,600
on how to perform evolutions on large

459
00:28:27,600 --> 00:28:30,120
cryptographic keys so first I would like

460
00:28:30,120 --> 00:28:31,980
to thank Christ Our God for this work

461
00:28:31,980 --> 00:28:36,059
and also my team at upv and particular

462
00:28:36,059 --> 00:28:39,360
thanks to virginity gliger from CMU for

463
00:28:39,360 --> 00:28:40,919
his tremendous help in improving this

464
00:28:40,919 --> 00:28:43,919
paper so this was a resubmission already

465
00:28:43,919 --> 00:28:46,020
but he helped us quite a lot and here

466
00:28:46,020 --> 00:28:47,460
you have some pictures with our campus

467
00:28:47,460 --> 00:28:48,779
in Romania because maybe you haven't

468
00:28:48,779 --> 00:28:51,179
been there so you can see our part of

469
00:28:51,179 --> 00:28:53,279
our campus here

470
00:28:53,279 --> 00:28:55,380
um so I'll start with a short

471
00:28:55,380 --> 00:28:57,539
introduction as most of you know we have

472
00:28:57,539 --> 00:28:59,299
this problem with such an attacks and

473
00:28:59,299 --> 00:29:02,159
most of you are interested in perform

474
00:29:02,159 --> 00:29:04,080
some sort of evaluation for example you

475
00:29:04,080 --> 00:29:06,480
are an evaluation lab or you are a

476
00:29:06,480 --> 00:29:07,860
manufacturer and you want to know how

477
00:29:07,860 --> 00:29:10,200
secure is your device so so you do these

478
00:29:10,200 --> 00:29:12,179
evaluations for example to get a common

479
00:29:12,179 --> 00:29:13,919
criteria certification or for some other

480
00:29:13,919 --> 00:29:16,260
purposes so for this you need some tools

481
00:29:16,260 --> 00:29:18,059
so for side Channel attacks you also

482
00:29:18,059 --> 00:29:19,679
need some tools in order to measure how

483
00:29:19,679 --> 00:29:23,159
successful is or not a particular attack

484
00:29:23,159 --> 00:29:25,620
on the device so some commonly used

485
00:29:25,620 --> 00:29:28,200
tools as was previously mentioned also

486
00:29:28,200 --> 00:29:30,120
in the previous talk is for example the

487
00:29:30,120 --> 00:29:32,580
success rate or the guessing entropy

488
00:29:32,580 --> 00:29:35,460
these are typically used for small

489
00:29:35,460 --> 00:29:38,520
targets for example for an as sub byte

490
00:29:38,520 --> 00:29:40,559
so if you're looking only at one byte of

491
00:29:40,559 --> 00:29:42,419
the es key you might use some of these

492
00:29:42,419 --> 00:29:45,320
tools some less

493
00:29:45,320 --> 00:29:50,100
some less common tools but which were

494
00:29:50,100 --> 00:29:52,080
actually previously already in the site

495
00:29:52,080 --> 00:29:55,740
Channel let's say community presented uh

496
00:29:55,740 --> 00:29:57,539
things like massive guessing entropy

497
00:29:57,539 --> 00:29:59,720
which will be one of the focus of our

498
00:29:59,720 --> 00:30:03,480
presentation so in fact in 1994 James

499
00:30:03,480 --> 00:30:07,679
Massey introduced this as a measure of

500
00:30:07,679 --> 00:30:10,140
estimating

501
00:30:10,140 --> 00:30:12,720
um the number of tries that an attacker

502
00:30:12,720 --> 00:30:15,240
will have to perform in order to recover

503
00:30:15,240 --> 00:30:18,480
a secret when using the best strategy uh

504
00:30:18,480 --> 00:30:19,740
which in our case would be for example

505
00:30:19,740 --> 00:30:22,320
after running a general attack what

506
00:30:22,320 --> 00:30:24,240
would be the estimate on the number of

507
00:30:24,240 --> 00:30:25,860
Trades that an attacker would have to do

508
00:30:25,860 --> 00:30:28,740
to find the secret value over let's say

509
00:30:28,740 --> 00:30:30,059
of a key byte

510
00:30:30,059 --> 00:30:32,039
and then in 97 was actually a Christian

511
00:30:32,039 --> 00:30:34,500
kashin who termed this as guessing

512
00:30:34,500 --> 00:30:38,580
entropy and uh even provided a form uh

513
00:30:38,580 --> 00:30:40,500
based on some conditional variable which

514
00:30:40,500 --> 00:30:42,360
for us would be for example the leakage

515
00:30:42,360 --> 00:30:45,240
and in 2007 at CCS coffin was in

516
00:30:45,240 --> 00:30:46,799
actually used this conditional guessing

517
00:30:46,799 --> 00:30:49,740
entropy so massive version for side

518
00:30:49,740 --> 00:30:51,600
Channel attacks and also for adaptive

519
00:30:51,600 --> 00:30:53,399
side Channel attacks which perhaps we

520
00:30:53,399 --> 00:30:55,200
don't do so much today but they were

521
00:30:55,200 --> 00:30:56,940
presented there

522
00:30:56,940 --> 00:31:00,659
and then in slightly later in 2009 from

523
00:31:00,659 --> 00:31:03,480
scientist team presented this framework

524
00:31:03,480 --> 00:31:05,700
for such a evaluations including the

525
00:31:05,700 --> 00:31:07,440
guessing the success rate even though

526
00:31:07,440 --> 00:31:09,840
both measures perhaps were slightly used

527
00:31:09,840 --> 00:31:11,820
before that but this was kind of the

528
00:31:11,820 --> 00:31:13,620
Europe paper that introduced them and

529
00:31:13,620 --> 00:31:16,320
that became maybe uh very commonly known

530
00:31:16,320 --> 00:31:19,679
after that and here there was again the

531
00:31:19,679 --> 00:31:21,600
term guessing entropy but with a

532
00:31:21,600 --> 00:31:22,919
different form and this kind of

533
00:31:22,919 --> 00:31:26,279
introduced a bit of a mess in perhaps in

534
00:31:26,279 --> 00:31:29,039
the in the Saturn Community judging from

535
00:31:29,039 --> 00:31:30,659
the reviews that we got because they

536
00:31:30,659 --> 00:31:32,279
said that there is a bit of a mess here

537
00:31:32,279 --> 00:31:35,460
and one of our previous submissions we

538
00:31:35,460 --> 00:31:37,380
had a verifying comment it's good that

539
00:31:37,380 --> 00:31:39,000
you're attacking this mess but it's bad

540
00:31:39,000 --> 00:31:42,000
that you're enforcing the mess so

541
00:31:42,000 --> 00:31:44,760
hopefully after this final version in

542
00:31:44,760 --> 00:31:46,620
this presentation we are going to remove

543
00:31:46,620 --> 00:31:49,380
some of this mess and another big

544
00:31:49,380 --> 00:31:51,360
problem with this tools is that they

545
00:31:51,360 --> 00:31:54,240
actually only work for small data values

546
00:31:54,240 --> 00:31:57,720
so for example for this 8-bit uh

547
00:31:57,720 --> 00:32:01,380
um AES key bytes so we need the methods

548
00:32:01,380 --> 00:32:04,140
that that scaled so those will be the

549
00:32:04,140 --> 00:32:06,840
main uh focus of our work and there are

550
00:32:06,840 --> 00:32:08,279
basically two main approaches for

551
00:32:08,279 --> 00:32:10,020
scaling these evaluation tools to large

552
00:32:10,020 --> 00:32:11,820
Keys one of them is for example key

553
00:32:11,820 --> 00:32:13,980
animation so algorithms that output

554
00:32:13,980 --> 00:32:16,919
large keys in decreasing order of

555
00:32:16,919 --> 00:32:19,380
probabilities of successful of success

556
00:32:19,380 --> 00:32:22,080
so in decreasing order of the likelihood

557
00:32:22,080 --> 00:32:24,600
of that key being the correct key and

558
00:32:24,600 --> 00:32:26,700
another approach which is the main uh

559
00:32:26,700 --> 00:32:29,580
the main focus for us is a security

560
00:32:29,580 --> 00:32:32,460
Evolution tools for large Keys like for

561
00:32:32,460 --> 00:32:34,919
example the rank estimation algorithms

562
00:32:34,919 --> 00:32:38,880
from 2015 or more recent from 2020

563
00:32:38,880 --> 00:32:42,240
as well as our own mathematical bounds

564
00:32:42,240 --> 00:32:44,159
for massive guessing entropy which we

565
00:32:44,159 --> 00:32:46,620
presented back in 2007 at chess in

566
00:32:46,620 --> 00:32:47,520
Taiwan

567
00:32:47,520 --> 00:32:50,460
so we're going to look at this so our

568
00:32:50,460 --> 00:32:53,039
main goal is to compare some of the

569
00:32:53,039 --> 00:32:54,480
let's say more

570
00:32:54,480 --> 00:32:55,020
um

571
00:32:55,020 --> 00:32:58,380
remarkable methods in this area and we

572
00:32:58,380 --> 00:33:00,419
are going to focus on the rank

573
00:33:00,419 --> 00:33:04,559
estimation algorithm from 2015 from Fast

574
00:33:04,559 --> 00:33:06,299
software encryption which is one of the

575
00:33:06,299 --> 00:33:07,640
fastest

576
00:33:07,640 --> 00:33:09,659
estimation algorithms for guessing

577
00:33:09,659 --> 00:33:12,299
entropy even to to this day and it was

578
00:33:12,299 --> 00:33:15,299
quite well for kiss up to let's say 256

579
00:33:15,299 --> 00:33:18,779
bytes then we are going to look at our

580
00:33:18,779 --> 00:33:20,399
bounds to compare them with this

581
00:33:20,399 --> 00:33:22,080
algorithm and finally we're also going

582
00:33:22,080 --> 00:33:24,419
to look at a more recent guessing

583
00:33:24,419 --> 00:33:27,120
entropy estimation algorithm from chess

584
00:33:27,120 --> 00:33:29,659
2020. foreign

585
00:33:29,659 --> 00:33:33,480
but before we move to this analysis of

586
00:33:33,480 --> 00:33:36,360
the full Evolution methods we need to

587
00:33:36,360 --> 00:33:38,760
look a bit at the difference between the

588
00:33:38,760 --> 00:33:40,620
two guessing entropy measures to

589
00:33:40,620 --> 00:33:42,539
understand a bit their difference so

590
00:33:42,539 --> 00:33:46,080
here you have uh let's say uh the

591
00:33:46,080 --> 00:33:48,179
version of the computational version for

592
00:33:48,179 --> 00:33:50,279
the two entropies that we are looking at

593
00:33:50,279 --> 00:33:52,260
so for mass is guessing for the

594
00:33:52,260 --> 00:33:55,039
empirical using entropy in both case

595
00:33:55,039 --> 00:33:58,200
cases we deal uh with a list of

596
00:33:58,200 --> 00:34:00,840
probabilities of scores for mass is more

597
00:34:00,840 --> 00:34:02,399
likely to use probabilities because we

598
00:34:02,399 --> 00:34:04,860
need it for the computation so basically

599
00:34:04,860 --> 00:34:06,720
you see for example on the top in the

600
00:34:06,720 --> 00:34:08,820
case of massive guessing entropy that we

601
00:34:08,820 --> 00:34:11,399
are basically Computing the expectation

602
00:34:11,399 --> 00:34:13,139
of the rank the expectation of the

603
00:34:13,139 --> 00:34:16,980
position I by doing that sum of I over P

604
00:34:16,980 --> 00:34:22,020
of Ki given the particular leakage x q

605
00:34:22,020 --> 00:34:25,199
here is Q is a given measurement so the

606
00:34:25,199 --> 00:34:27,179
Bold X it's a you have a set of

607
00:34:27,179 --> 00:34:28,918
measurements and use that to compute

608
00:34:28,918 --> 00:34:30,899
some probabilities and what is important

609
00:34:30,899 --> 00:34:33,000
for both measures is that once you get

610
00:34:33,000 --> 00:34:34,500
the list of probabilities for example

611
00:34:34,500 --> 00:34:38,300
for the 256 values of an as

612
00:34:38,300 --> 00:34:39,859
key

613
00:34:39,859 --> 00:34:43,500
sub key you sort them you sort them and

614
00:34:43,500 --> 00:34:45,239
then you can apply these two measures

615
00:34:45,239 --> 00:34:46,800
for the first one you don't care about

616
00:34:46,800 --> 00:34:48,719
the correct key you just apply the

617
00:34:48,719 --> 00:34:50,280
formula and you get a value regardless

618
00:34:50,280 --> 00:34:51,899
of the correct key well for the

619
00:34:51,899 --> 00:34:53,460
empirical guessing entropy which is

620
00:34:53,460 --> 00:34:55,500
let's say more common in our community

621
00:34:55,500 --> 00:34:59,099
until now uh you just look at where the

622
00:34:59,099 --> 00:35:00,599
correct is located for example if

623
00:35:00,599 --> 00:35:04,380
correct key is 17 and 17 it's located at

624
00:35:04,380 --> 00:35:06,599
position number three after you sort the

625
00:35:06,599 --> 00:35:08,760
probabilities then negative entropy

626
00:35:08,760 --> 00:35:09,540
three

627
00:35:09,540 --> 00:35:11,460
so one of the solution is that they have

628
00:35:11,460 --> 00:35:13,020
the same complexity because in most

629
00:35:13,020 --> 00:35:14,400
cases you need to sort

630
00:35:14,400 --> 00:35:16,680
uh secondly they both depend on the

631
00:35:16,680 --> 00:35:18,839
actual data set so you cannot actually

632
00:35:18,839 --> 00:35:20,520
claim that one is more objective than

633
00:35:20,520 --> 00:35:22,680
the other as we received some claims at

634
00:35:22,680 --> 00:35:24,780
some point because they both depend on

635
00:35:24,780 --> 00:35:27,660
the data that you get uh what is

636
00:35:27,660 --> 00:35:29,760
interesting however is that uh they

637
00:35:29,760 --> 00:35:31,560
actually use differently the list of

638
00:35:31,560 --> 00:35:33,060
probabilities or in the case of

639
00:35:33,060 --> 00:35:35,040
empirical guessing perhaps there is a

640
00:35:35,040 --> 00:35:39,599
scores that you that you get and uh to

641
00:35:39,599 --> 00:35:42,180
to show that let's use a simple example

642
00:35:42,180 --> 00:35:43,440
to understand better the differences

643
00:35:43,440 --> 00:35:46,619
here we have a very simplistic example

644
00:35:46,619 --> 00:35:48,480
with eight probabilities

645
00:35:48,480 --> 00:35:51,359
for which mass is guessing entropy has

646
00:35:51,359 --> 00:35:54,380
the value of 3.63

647
00:35:54,380 --> 00:35:57,240
however the empirical guessing entropy

648
00:35:57,240 --> 00:35:59,460
have can have different values depending

649
00:35:59,460 --> 00:36:03,180
on how noisy are your traces so for

650
00:36:03,180 --> 00:36:04,920
example in the first example on the left

651
00:36:04,920 --> 00:36:07,859
the correct key could be ranked third in

652
00:36:07,859 --> 00:36:10,200
the middle could be ranked fourth or in

653
00:36:10,200 --> 00:36:11,940
the example on the right you could have

654
00:36:11,940 --> 00:36:14,940
the correct key ranked a fifth so here

655
00:36:14,940 --> 00:36:17,099
you can see the this happens between the

656
00:36:17,099 --> 00:36:19,619
the two measures uh massive guessing

657
00:36:19,619 --> 00:36:21,720
entropy is stable in the sense that it's

658
00:36:21,720 --> 00:36:23,040
going to give you the same value

659
00:36:23,040 --> 00:36:24,780
regardless of where the correct key is

660
00:36:24,780 --> 00:36:26,339
so this could be an advantage you could

661
00:36:26,339 --> 00:36:27,900
also it's a these are not because it's

662
00:36:27,900 --> 00:36:29,720
not giving me the real value

663
00:36:29,720 --> 00:36:32,940
but we'll see through the following

664
00:36:32,940 --> 00:36:35,180
slides that this is necessarily the case

665
00:36:35,180 --> 00:36:39,119
because having a stable smooth value can

666
00:36:39,119 --> 00:36:40,920
can actually be useful in order to give

667
00:36:40,920 --> 00:36:44,880
you a better confidence with a limited

668
00:36:44,880 --> 00:36:47,780
number of experiments

669
00:36:48,300 --> 00:36:52,560
um okay and uh maybe a general remark is

670
00:36:52,560 --> 00:36:55,260
that uh actually uh Massey's guessing

671
00:36:55,260 --> 00:36:57,300
entropy and this was also already

672
00:36:57,300 --> 00:37:00,180
mentioned since 2007 at least uh is

673
00:37:00,180 --> 00:37:02,099
generally a lower Bound for the actual

674
00:37:02,099 --> 00:37:03,960
guessing entropy we are going to see

675
00:37:03,960 --> 00:37:05,940
this throw experiments and this is going

676
00:37:05,940 --> 00:37:07,740
to be a very important observation for

677
00:37:07,740 --> 00:37:09,240
its usefulness

678
00:37:09,240 --> 00:37:13,140
okay so in order to uh present you our

679
00:37:13,140 --> 00:37:16,140
results uh

680
00:37:16,140 --> 00:37:19,200
on a more practical perspective we used

681
00:37:19,200 --> 00:37:21,900
three different data sets one from

682
00:37:21,900 --> 00:37:23,420
simulating

683
00:37:23,420 --> 00:37:26,820
harming ways of AES with some gaussian

684
00:37:26,820 --> 00:37:30,420
noise then we also we also used a harder

685
00:37:30,420 --> 00:37:33,180
as implementation from the AVR X mega

686
00:37:33,180 --> 00:37:36,000
and finally we use the cheap Whisperer

687
00:37:36,000 --> 00:37:40,260
platform with the stm32 microcontroller

688
00:37:40,260 --> 00:37:42,420
and in all the cases we use template

689
00:37:42,420 --> 00:37:46,859
attacks to derive probabilities for the

690
00:37:46,859 --> 00:37:50,099
uh for the key bytes of AES

691
00:37:50,099 --> 00:37:53,460
so we had 16 lists of 256 probabilities

692
00:37:53,460 --> 00:37:56,280
and we use this to evaluate the success

693
00:37:56,280 --> 00:37:58,740
on the on the full as key and also

694
00:37:58,740 --> 00:38:00,780
Beyond as we'll see now

695
00:38:00,780 --> 00:38:02,280
so

696
00:38:02,280 --> 00:38:04,800
we we first start with a comment on the

697
00:38:04,800 --> 00:38:06,300
utility of mass is guessing entropy

698
00:38:06,300 --> 00:38:08,760
which is used by our bonds for the full

699
00:38:08,760 --> 00:38:12,000
key so we need to look a bit at this and

700
00:38:12,000 --> 00:38:15,960
we can by looking at the results on the

701
00:38:15,960 --> 00:38:18,240
three experiments we can make several

702
00:38:18,240 --> 00:38:20,220
observations first of all we can confirm

703
00:38:20,220 --> 00:38:22,619
that indeed massive guessing entropy is

704
00:38:22,619 --> 00:38:24,119
generally a lower Bound for the

705
00:38:24,119 --> 00:38:26,520
empirical guessing entropy which means

706
00:38:26,520 --> 00:38:28,140
that you can use it for example in

707
00:38:28,140 --> 00:38:30,660
security evaluations to at least confirm

708
00:38:30,660 --> 00:38:32,940
that Securities above a certain level so

709
00:38:32,940 --> 00:38:34,740
even if mass is guessing that we will

710
00:38:34,740 --> 00:38:36,240
not give you the exact rank of the key

711
00:38:36,240 --> 00:38:37,859
for that particular implementation that

712
00:38:37,859 --> 00:38:39,060
particular attack in that particular

713
00:38:39,060 --> 00:38:41,960
moment and you see it will tell you that

714
00:38:41,960 --> 00:38:44,700
the actual guessing entropy or the

715
00:38:44,700 --> 00:38:46,740
actual rank will be above that level the

716
00:38:46,740 --> 00:38:49,079
level giving given by mass is guessing

717
00:38:49,079 --> 00:38:50,880
entropy so we think that this can

718
00:38:50,880 --> 00:38:53,880
already be of use for evaluators in the

719
00:38:53,880 --> 00:38:56,160
middle however you may see that for

720
00:38:56,160 --> 00:38:59,099
example for the sock data set that bound

721
00:38:59,099 --> 00:39:00,900
may be trivial because it's very close

722
00:39:00,900 --> 00:39:02,579
to zero so you can say okay maybe that's

723
00:39:02,579 --> 00:39:04,980
useless however this is only when

724
00:39:04,980 --> 00:39:07,380
attacking a single key byte when we

725
00:39:07,380 --> 00:39:10,020
combine this for the full key using for

726
00:39:10,020 --> 00:39:11,940
example our bounds that will show in a

727
00:39:11,940 --> 00:39:14,099
moment you see that mass is guessing

728
00:39:14,099 --> 00:39:15,540
entry actually becomes relevant and

729
00:39:15,540 --> 00:39:17,820
actually useful and the second

730
00:39:17,820 --> 00:39:20,040
observation that we made is that we can

731
00:39:20,040 --> 00:39:21,839
actually combine the two measures to get

732
00:39:21,839 --> 00:39:24,420
an interesting information and that is

733
00:39:24,420 --> 00:39:27,000
whether our leakage model was good or

734
00:39:27,000 --> 00:39:30,900
not so as you can see both on the X mega

735
00:39:30,900 --> 00:39:33,119
example in the simulated example both

736
00:39:33,119 --> 00:39:35,160
measures are relatively close however

737
00:39:35,160 --> 00:39:37,140
for the song data set they are quite far

738
00:39:37,140 --> 00:39:39,000
apart in particular when you have a

739
00:39:39,000 --> 00:39:42,180
small number of attack traces and that

740
00:39:42,180 --> 00:39:46,380
is uh because uh for this St 32-bit

741
00:39:46,380 --> 00:39:49,020
microcontroller we used a bit slice

742
00:39:49,020 --> 00:39:51,780
implementation of IIs targeting 32 bits

743
00:39:51,780 --> 00:39:55,079
at a time but uh the implementation

744
00:39:55,079 --> 00:39:58,320
using 32 bits at a time for register but

745
00:39:58,320 --> 00:40:00,660
for this particular attack on 8 Bits

746
00:40:00,660 --> 00:40:02,820
basically only eight bits were useful

747
00:40:02,820 --> 00:40:04,500
information while the remaining 24 bits

748
00:40:04,500 --> 00:40:06,900
were noise for our particular model so

749
00:40:06,900 --> 00:40:08,339
the leakage mode was very bad in this

750
00:40:08,339 --> 00:40:09,780
case and that's why we had this huge

751
00:40:09,780 --> 00:40:11,720
discrepance here

752
00:40:11,720 --> 00:40:15,000
okay so now let's look at the three full

753
00:40:15,000 --> 00:40:18,060
key evaluation methods that we uh

754
00:40:18,060 --> 00:40:21,420
uh mentioned earlier and let's analyze

755
00:40:21,420 --> 00:40:24,420
them uh in from several perspectives so

756
00:40:24,420 --> 00:40:25,980
first we can look at the Precision of

757
00:40:25,980 --> 00:40:27,000
this method

758
00:40:27,000 --> 00:40:30,540
notice how well uh they approximate the

759
00:40:30,540 --> 00:40:33,119
intended results given a certain number

760
00:40:33,119 --> 00:40:36,420
of experiments so here we used uh 100

761
00:40:36,420 --> 00:40:38,400
experiments and we completed the

762
00:40:38,400 --> 00:40:40,020
standard deviation of these measures to

763
00:40:40,020 --> 00:40:42,660
see how fast or how well they can

764
00:40:42,660 --> 00:40:44,760
approximate the result and the first

765
00:40:44,760 --> 00:40:46,500
observation if we look for example at

766
00:40:46,500 --> 00:40:48,660
the values in the table at the bottom is

767
00:40:48,660 --> 00:40:52,980
that this more recent guessing uh

768
00:40:52,980 --> 00:40:56,579
entropy estimation algorithm the Gia has

769
00:40:56,579 --> 00:40:59,040
the best result from this perspective so

770
00:40:59,040 --> 00:41:00,599
has a small standard deviation which is

771
00:41:00,599 --> 00:41:02,579
something they also claimed and this is

772
00:41:02,579 --> 00:41:04,500
somehow expected given their way of

773
00:41:04,500 --> 00:41:07,640
computing things because basically they

774
00:41:07,640 --> 00:41:11,339
uh they approximate a distribution with

775
00:41:11,339 --> 00:41:13,680
some parameters so it's kind of easier

776
00:41:13,680 --> 00:41:17,520
to get a smooth line uh then we can see

777
00:41:17,520 --> 00:41:20,099
that our bounds are doing better than

778
00:41:20,099 --> 00:41:22,800
the rank estimation from 2015 and this

779
00:41:22,800 --> 00:41:24,119
is also expected and we show more

780
00:41:24,119 --> 00:41:25,380
details in the paper because they don't

781
00:41:25,380 --> 00:41:26,940
have too much time now because actually

782
00:41:26,940 --> 00:41:29,460
mass is guessing entropy has a much

783
00:41:29,460 --> 00:41:31,320
lower standard deviation that the

784
00:41:31,320 --> 00:41:33,119
empirical guessing entropy contrary to

785
00:41:33,119 --> 00:41:36,180
what was perhaps released before

786
00:41:36,180 --> 00:41:38,460
and finally we can also make some

787
00:41:38,460 --> 00:41:41,220
observations regarding the fact that uh

788
00:41:41,220 --> 00:41:44,640
as we can see here for example for uh

789
00:41:44,640 --> 00:41:46,680
our bounds so the blue lines on the

790
00:41:46,680 --> 00:41:48,599
bottom again we can confirm that they

791
00:41:48,599 --> 00:41:52,380
are indeed a lower Bound for uh the rank

792
00:41:52,380 --> 00:41:55,260
estimation uh here on the with black we

793
00:41:55,260 --> 00:41:58,140
have uh the rank estimation algorithm

794
00:41:58,140 --> 00:42:01,380
from 2015 and you can see that generally

795
00:42:01,380 --> 00:42:04,200
uh the GM bounds are below which which

796
00:42:04,200 --> 00:42:06,240
is fine and for example if we look at

797
00:42:06,240 --> 00:42:10,560
the middle image uh we see that if you

798
00:42:10,560 --> 00:42:13,320
are using one attack trees you know only

799
00:42:13,320 --> 00:42:15,960
by using mass is guessing entropy that

800
00:42:15,960 --> 00:42:18,599
you have at least 16 bits of entropy

801
00:42:18,599 --> 00:42:20,220
remaining so this might already be

802
00:42:20,220 --> 00:42:21,599
useful for an evaluator to know that

803
00:42:21,599 --> 00:42:23,579
when using attack trace or the attack

804
00:42:23,579 --> 00:42:26,400
maybe it's not feasible anymore

805
00:42:26,400 --> 00:42:30,359
okay and now let's look at a larger key

806
00:42:30,359 --> 00:42:33,780
for example if we were to use a 128 byte

807
00:42:33,780 --> 00:42:36,720
key so 1024 bit key for example you have

808
00:42:36,720 --> 00:42:40,859
an RSA key of that size uh and we can

809
00:42:40,859 --> 00:42:43,260
confirm these properties uh by looking

810
00:42:43,260 --> 00:42:46,260
at this results here in in black is the

811
00:42:46,260 --> 00:42:48,180
rank estimation algorithm from 2015.

812
00:42:48,180 --> 00:42:50,280
again uh the blue lines at the bottom

813
00:42:50,280 --> 00:42:52,940
are masses bounds

814
00:42:52,940 --> 00:42:56,400
and the red line is this more recent

815
00:42:56,400 --> 00:42:58,859
guessing entropy estimation algorithm so

816
00:42:58,859 --> 00:43:01,260
first we can say about the rank

817
00:43:01,260 --> 00:43:02,940
estimation argument we know that is very

818
00:43:02,940 --> 00:43:05,160
close to the rank so that's kind of the

819
00:43:05,160 --> 00:43:06,839
let's say

820
00:43:06,839 --> 00:43:09,420
um the reference level for what would be

821
00:43:09,420 --> 00:43:12,180
the actual actual rank then our bonds

822
00:43:12,180 --> 00:43:14,040
again we see here that they provide you

823
00:43:14,040 --> 00:43:16,680
this lower bound and in this case they

824
00:43:16,680 --> 00:43:18,720
become perhaps even more useful because

825
00:43:18,720 --> 00:43:21,660
you already have 14 traces something

826
00:43:21,660 --> 00:43:24,300
about 200 bits of entropy so that's

827
00:43:24,300 --> 00:43:25,680
already you already know that if you're

828
00:43:25,680 --> 00:43:27,960
attacking such a large key is not going

829
00:43:27,960 --> 00:43:29,520
to be computationally feasible to obtain

830
00:43:29,520 --> 00:43:31,440
that key just by using these bonds even

831
00:43:31,440 --> 00:43:33,420
if they are quite far apart from the

832
00:43:33,420 --> 00:43:36,140
actual uh actual rank estimation

833
00:43:36,140 --> 00:43:39,500
uh and certainly we can see that

834
00:43:39,500 --> 00:43:42,000
unfortunately this more recent guessing

835
00:43:42,000 --> 00:43:44,220
entropy estimation algorithm is

836
00:43:44,220 --> 00:43:46,800
deviating quite a lot from uh the rank

837
00:43:46,800 --> 00:43:48,119
estimation

838
00:43:48,119 --> 00:43:49,520
um

839
00:43:49,520 --> 00:43:53,220
from 2015 uh and this is somehow

840
00:43:53,220 --> 00:43:55,079
expected due to the fact that as I

841
00:43:55,079 --> 00:43:58,020
mentioned earlier this uh algorithm from

842
00:43:58,020 --> 00:44:01,740
2010 is estimating some distribution of

843
00:44:01,740 --> 00:44:05,099
score vectors uh and this estimation

844
00:44:05,099 --> 00:44:08,880
then relies on some sub sapling of the

845
00:44:08,880 --> 00:44:10,619
full key so it's just taking a random

846
00:44:10,619 --> 00:44:14,579
sample of values from from the list of

847
00:44:14,579 --> 00:44:17,819
probabilities to try to get a better a

848
00:44:17,819 --> 00:44:20,579
better estimate and I I don't have no

849
00:44:20,579 --> 00:44:23,060
more much time to go into details but

850
00:44:23,060 --> 00:44:25,680
it's going to be very difficult for this

851
00:44:25,680 --> 00:44:27,900
method to approximate very well the the

852
00:44:27,900 --> 00:44:31,319
actual rank basically thank you all

853
00:44:31,319 --> 00:44:34,140
right uh and finally I also want to show

854
00:44:34,140 --> 00:44:36,060
some important aspects regarding

855
00:44:36,060 --> 00:44:37,140
computation

856
00:44:37,140 --> 00:44:40,200
so on the computation aspects we can see

857
00:44:40,200 --> 00:44:43,800
that for 16 bytes and 128 bytes the rank

858
00:44:43,800 --> 00:44:45,599
estimation from 2015 Works quite well

859
00:44:45,599 --> 00:44:47,940
although it still takes maybe about one

860
00:44:47,940 --> 00:44:52,099
hour for 128 bytes uh the

861
00:44:52,099 --> 00:44:54,660
methods from 2020 it's slightly better

862
00:44:54,660 --> 00:44:57,420
however none of them can be used for

863
00:44:57,420 --> 00:44:59,579
much larger keys because then it becomes

864
00:44:59,579 --> 00:45:03,060
very uh computational intensive and even

865
00:45:03,060 --> 00:45:05,520
memory wise it's it's it becomes

866
00:45:05,520 --> 00:45:08,700
prohibitive for over let's say 124 bytes

867
00:45:08,700 --> 00:45:11,880
on the other hand our massive bounds are

868
00:45:11,880 --> 00:45:13,740
very fast just a few seconds you can see

869
00:45:13,740 --> 00:45:16,200
here and even for 1024 byte it only

870
00:45:16,200 --> 00:45:17,640
takes 40 seconds

871
00:45:17,640 --> 00:45:20,940
so uh in conclusion we can say that uh

872
00:45:20,940 --> 00:45:23,520
the rank estimation algorithm for 2015

873
00:45:23,520 --> 00:45:25,680
it provides a good opportunity of the

874
00:45:25,680 --> 00:45:27,480
rank or the guessing entropy it works

875
00:45:27,480 --> 00:45:30,119
well for up to let's say 256 bytes so if

876
00:45:30,119 --> 00:45:31,859
you are working with is that's fine

877
00:45:31,859 --> 00:45:34,440
however it becomes a slower for this

878
00:45:34,440 --> 00:45:36,900
large case and even for larger can be

879
00:45:36,900 --> 00:45:39,060
impractical our bands are guaranteed

880
00:45:39,060 --> 00:45:41,700
tight bounce uh for massive guessing

881
00:45:41,700 --> 00:45:45,119
entropy and which as we've shown uh it's

882
00:45:45,119 --> 00:45:47,420
typical lower Bound for the actual rank

883
00:45:47,420 --> 00:45:49,859
what is very fast and can be useful is

884
00:45:49,859 --> 00:45:51,480
very large case so it can give you a

885
00:45:51,480 --> 00:45:53,400
very quick tool to estimate the security

886
00:45:53,400 --> 00:45:56,220
level and finally this last more recent

887
00:45:56,220 --> 00:45:58,380
guessing entropy estimation algorithm

888
00:45:58,380 --> 00:46:00,720
provides a high accuracy but Devi is

889
00:46:00,720 --> 00:46:02,160
quite badly from the rank so in

890
00:46:02,160 --> 00:46:04,500
conclusion perhaps you can use this GM

891
00:46:04,500 --> 00:46:06,599
bounds as a very fast tool to estimate

892
00:46:06,599 --> 00:46:08,460
quickly the security level and in case

893
00:46:08,460 --> 00:46:10,020
you need something more precise then you

894
00:46:10,020 --> 00:46:12,599
can use something like the rank

895
00:46:12,599 --> 00:46:14,579
estimation argument from 2015 and

896
00:46:14,579 --> 00:46:17,400
optionally after that maybe use Akin

897
00:46:17,400 --> 00:46:19,260
range not going to Output the list of

898
00:46:19,260 --> 00:46:23,119
probabilities thank you very much

899
00:46:30,300 --> 00:46:34,200
thank you any question from audience

900
00:46:34,200 --> 00:46:39,020
we have time for one quick one peace

901
00:46:40,030 --> 00:46:41,359
[Music]

902
00:46:41,359 --> 00:46:42,490
Services

903
00:46:42,490 --> 00:46:49,700
[Music]

904
00:46:49,700 --> 00:46:55,578
I think we use about 100 something

905
00:46:57,080 --> 00:47:00,219
[Music]

906
00:47:01,280 --> 00:47:03,980
I think it was one of the standard

907
00:47:03,980 --> 00:47:07,339
numbers that you gave me at some

908
00:47:07,339 --> 00:47:11,339
points okay

909
00:47:15,420 --> 00:47:18,420
so there is no question from the online

910
00:47:18,420 --> 00:47:22,520
um participants any other question

911
00:47:23,460 --> 00:47:25,859
so let's thank you the speaker again

912
00:47:25,859 --> 00:47:27,119
thank you

913
00:47:27,119 --> 00:47:30,119
foreign

914
00:48:15,079 --> 00:48:17,880
thank you very much

915
00:48:17,880 --> 00:48:20,220
um so the work I want to present is

916
00:48:20,220 --> 00:48:21,780
called Randomness optimization for

917
00:48:21,780 --> 00:48:23,339
Gadget composition in higher order

918
00:48:23,339 --> 00:48:26,700
masking and this is a joint work with

919
00:48:26,700 --> 00:48:29,460
David initial Pascal zastrich Ami moradi

920
00:48:29,460 --> 00:48:32,359
and Tim kineson

921
00:48:39,319 --> 00:48:42,240
so I guess at this point in the chess

922
00:48:42,240 --> 00:48:44,640
conference I don't need to motivate or

923
00:48:44,640 --> 00:48:47,040
introduce the side Channel attacks in

924
00:48:47,040 --> 00:48:48,839
more General right because I guess you

925
00:48:48,839 --> 00:48:50,700
have heard about them

926
00:48:50,700 --> 00:48:51,560
um

927
00:48:51,560 --> 00:48:55,260
but I so this is where we work right so

928
00:48:55,260 --> 00:48:56,940
this work exists in the realm of

929
00:48:56,940 --> 00:49:00,180
Sideshow and security uh for Hardware

930
00:49:00,180 --> 00:49:04,619
and more specifically we argue in the

931
00:49:04,619 --> 00:49:06,660
isw prepping model

932
00:49:06,660 --> 00:49:09,540
and I apologize but I will spend a bit

933
00:49:09,540 --> 00:49:12,180
of time to give you the basics of this

934
00:49:12,180 --> 00:49:13,380
model

935
00:49:13,380 --> 00:49:15,540
um even though I guess most of you have

936
00:49:15,540 --> 00:49:17,819
heard the last talks and then you also

937
00:49:17,819 --> 00:49:21,079
have heard about this model right

938
00:49:21,180 --> 00:49:23,760
um so in this work we consider a

939
00:49:23,760 --> 00:49:26,720
specific version of the problem model

940
00:49:26,720 --> 00:49:28,980
which is the glitch attended probing

941
00:49:28,980 --> 00:49:32,400
model and in this model the adversary

942
00:49:32,400 --> 00:49:35,460
gets a circuit so something like this or

943
00:49:35,460 --> 00:49:37,619
a bit more complex Maybe

944
00:49:37,619 --> 00:49:42,240
and then the adversary is allowed to

945
00:49:42,240 --> 00:49:45,180
place up to your certain amount of

946
00:49:45,180 --> 00:49:47,160
probes in the socket

947
00:49:47,160 --> 00:49:48,660
and

948
00:49:48,660 --> 00:49:51,060
by invocation of the circle the

949
00:49:51,060 --> 00:49:54,240
adversary gets the exact values of all

950
00:49:54,240 --> 00:49:56,940
the stable signals that contribute to

951
00:49:56,940 --> 00:49:59,160
the probes which means all the primary

952
00:49:59,160 --> 00:50:01,619
inputs or all the registers

953
00:50:01,619 --> 00:50:04,319
and then we say a circuit is cheap

954
00:50:04,319 --> 00:50:07,680
probing secure if up to T probes can be

955
00:50:07,680 --> 00:50:10,380
simulated without knowledge to any

956
00:50:10,380 --> 00:50:13,680
secret secret and this basically means

957
00:50:13,680 --> 00:50:15,900
that we can recreate the distribution of

958
00:50:15,900 --> 00:50:18,359
the signals without accessing the

959
00:50:18,359 --> 00:50:19,560
secrets

960
00:50:19,560 --> 00:50:22,440
and then it should be secure

961
00:50:22,440 --> 00:50:27,060
and so the question of course is how do

962
00:50:27,060 --> 00:50:30,180
we achieve proving security and if you

963
00:50:30,180 --> 00:50:32,160
have attended this conference you might

964
00:50:32,160 --> 00:50:34,680
know that the answer one answer is

965
00:50:34,680 --> 00:50:39,240
masking and whether we divide each

966
00:50:39,240 --> 00:50:41,700
intermediate value into a vector of

967
00:50:41,700 --> 00:50:44,400
different intermediate values such that

968
00:50:44,400 --> 00:50:46,920
if we involve intermediate values we can

969
00:50:46,920 --> 00:50:47,960
compute

970
00:50:47,960 --> 00:50:50,819
uh the actual Secret

971
00:50:50,819 --> 00:50:55,020
and then we of course need to also

972
00:50:55,020 --> 00:50:58,020
change the circuit we are Computing and

973
00:50:58,020 --> 00:51:00,059
one way to do this is by replacing each

974
00:51:00,059 --> 00:51:03,960
each gate in The Circuit by Gadget which

975
00:51:03,960 --> 00:51:06,660
is a small circuit that operates over

976
00:51:06,660 --> 00:51:10,200
mask values and performs some small

977
00:51:10,200 --> 00:51:12,660
function and this could be the basic

978
00:51:12,660 --> 00:51:15,359
gate types

979
00:51:15,359 --> 00:51:16,140
um

980
00:51:16,140 --> 00:51:19,380
and the thing here is that usually when

981
00:51:19,380 --> 00:51:21,660
you've been scheduled required so each

982
00:51:21,660 --> 00:51:25,260
Gadget requires a unique revenues to

983
00:51:25,260 --> 00:51:28,980
operate securely and to be composable

984
00:51:28,980 --> 00:51:31,800
um and well the target of this work is

985
00:51:31,800 --> 00:51:34,140
to try to optimize this amount of

986
00:51:34,140 --> 00:51:36,960
Randomness we use in the entire circuit

987
00:51:36,960 --> 00:51:39,720
and to reduce the amount

988
00:51:39,720 --> 00:51:43,680
and basically we use this in two steps

989
00:51:43,680 --> 00:51:46,380
so the basic idea is to create clusters

990
00:51:46,380 --> 00:51:50,040
of all those gadgets and within the

991
00:51:50,040 --> 00:51:51,839
cluster we have a certain kind of

992
00:51:51,839 --> 00:51:52,940
Independence

993
00:51:52,940 --> 00:51:56,700
property and then we reuse Randomness

994
00:51:56,700 --> 00:51:59,899
within those clusters

995
00:52:00,180 --> 00:52:03,660
um and yeah in this work we do this for

996
00:52:03,660 --> 00:52:06,900
two types of gadgets the first one is

997
00:52:06,900 --> 00:52:10,260
based on domain oriented masking which

998
00:52:10,260 --> 00:52:12,540
is the gadget that achieves a strong

999
00:52:12,540 --> 00:52:14,819
non-interference composability and I

1000
00:52:14,819 --> 00:52:17,579
will talk about this a bit in in the

1001
00:52:17,579 --> 00:52:19,980
short and there we require

1002
00:52:19,980 --> 00:52:22,200
multiplication gadgets and refresh

1003
00:52:22,200 --> 00:52:25,319
gadgets to achieve the security

1004
00:52:25,319 --> 00:52:27,059
and the second Gadget we are looking

1005
00:52:27,059 --> 00:52:29,540
into is the hardware private circuit 2

1006
00:52:29,540 --> 00:52:32,460
which actually use proper isolating

1007
00:52:32,460 --> 00:52:34,920
non-interference which is another type

1008
00:52:34,920 --> 00:52:36,660
of composability generation and here we

1009
00:52:36,660 --> 00:52:40,380
only require a modification gadgets

1010
00:52:40,380 --> 00:52:43,740
um because we can truly do the additions

1011
00:52:43,740 --> 00:52:45,980
um and then so there's two types of

1012
00:52:45,980 --> 00:52:48,540
gadgets we have two different types of

1013
00:52:48,540 --> 00:52:50,819
clustering algorithms the first one is

1014
00:52:50,819 --> 00:52:53,640
the trusting algorithm where we have

1015
00:52:53,640 --> 00:52:56,040
more rules that we need to follow

1016
00:52:56,040 --> 00:52:58,200
um so this will lead to smaller gadgets

1017
00:52:58,200 --> 00:53:01,859
but we have a stronger Independence uh

1018
00:53:01,859 --> 00:53:04,200
property with within the

1019
00:53:04,200 --> 00:53:06,780
um clusters so we can have a high reuse

1020
00:53:06,780 --> 00:53:08,220
of randomness

1021
00:53:08,220 --> 00:53:10,440
and the other variant is then a more

1022
00:53:10,440 --> 00:53:13,619
relaxed clustery where we can create

1023
00:53:13,619 --> 00:53:16,980
larger clusters but each Gadget still

1024
00:53:16,980 --> 00:53:19,380
requires some unique Randomness to to be

1025
00:53:19,380 --> 00:53:21,680
secure

1026
00:53:21,720 --> 00:53:25,559
um and in this presentation I will focus

1027
00:53:25,559 --> 00:53:27,660
only on the domain oriented masking

1028
00:53:27,660 --> 00:53:29,700
within combination with a strict

1029
00:53:29,700 --> 00:53:31,800
clustering and refer you to the paper

1030
00:53:31,800 --> 00:53:34,319
for all the other details

1031
00:53:34,319 --> 00:53:38,280
um and also our work only considers

1032
00:53:38,280 --> 00:53:40,740
higher order masking so the order is

1033
00:53:40,740 --> 00:53:43,879
always two or larger

1034
00:53:44,220 --> 00:53:47,400
so yeah let's get into this and before I

1035
00:53:47,400 --> 00:53:49,020
give you the rules I want to give you an

1036
00:53:49,020 --> 00:53:50,880
intuition about Sni so strong

1037
00:53:50,880 --> 00:53:52,380
non-interference

1038
00:53:52,380 --> 00:53:55,980
and the idea here is that for Gadget and

1039
00:53:55,980 --> 00:53:59,339
adversary can place internal probes and

1040
00:53:59,339 --> 00:54:03,240
we save the place T1 internal probes and

1041
00:54:03,240 --> 00:54:06,000
an adversary can place output probes so

1042
00:54:06,000 --> 00:54:08,220
probes on the outputs

1043
00:54:08,220 --> 00:54:11,880
um and we say they place two T2 of those

1044
00:54:11,880 --> 00:54:16,319
and then we say that the amount of

1045
00:54:16,319 --> 00:54:18,599
knowledge and adversary can achieve

1046
00:54:18,599 --> 00:54:21,119
about the inputs of the gadget so so

1047
00:54:21,119 --> 00:54:23,700
should only be determined by the number

1048
00:54:23,700 --> 00:54:26,059
of internal probes

1049
00:54:26,059 --> 00:54:27,599
so

1050
00:54:27,599 --> 00:54:30,240
um we basically have a full stop of

1051
00:54:30,240 --> 00:54:32,700
propagation uh from the input to the

1052
00:54:32,700 --> 00:54:35,880
output where the propagation just means

1053
00:54:35,880 --> 00:54:38,760
the knowledge we can learn about

1054
00:54:38,760 --> 00:54:40,079
um prior

1055
00:54:40,079 --> 00:54:45,359
signals um by probings on later values

1056
00:54:45,359 --> 00:54:47,460
and this

1057
00:54:47,460 --> 00:54:49,980
this first definition

1058
00:54:49,980 --> 00:54:53,700
of gadgets that have a single output so

1059
00:54:53,700 --> 00:54:56,280
a single output that is not not shared

1060
00:54:56,280 --> 00:54:58,500
so it kind of of course have multiple

1061
00:54:58,500 --> 00:55:01,280
Shore outputs

1062
00:55:05,220 --> 00:55:08,099
um and the idea here is that you can

1063
00:55:08,099 --> 00:55:10,020
place for each probe you place on The

1064
00:55:10,020 --> 00:55:12,300
Outpost you can place basically a pro on

1065
00:55:12,300 --> 00:55:14,460
all the outputs right so you have

1066
00:55:14,460 --> 00:55:18,839
um T2 output probes on each output

1067
00:55:18,839 --> 00:55:22,880
um but still the number of results

1068
00:55:22,880 --> 00:55:25,200
is only determined by the internal

1069
00:55:25,200 --> 00:55:26,099
probes

1070
00:55:26,099 --> 00:55:29,819
and to capture our Randomness reuse more

1071
00:55:29,819 --> 00:55:32,640
tightly we introduce a new album or

1072
00:55:32,640 --> 00:55:34,140
another

1073
00:55:34,140 --> 00:55:35,300
um

1074
00:55:35,300 --> 00:55:37,680
simulation that is restricted multiple

1075
00:55:37,680 --> 00:55:39,540
strong interference and here we

1076
00:55:39,540 --> 00:55:41,700
basically have a combination of the

1077
00:55:41,700 --> 00:55:44,640
single and the multiple output I mean

1078
00:55:44,640 --> 00:55:47,579
astronomical Feelings by saying okay

1079
00:55:47,579 --> 00:55:50,280
output now even if we have multiple

1080
00:55:50,280 --> 00:55:54,900
outputs we only can probe uh T2 Place T2

1081
00:55:54,900 --> 00:55:57,900
probes at all their outputs right

1082
00:55:57,900 --> 00:56:00,720
um and this is not arbitrarily

1083
00:56:00,720 --> 00:56:02,720
composable so here we really need to

1084
00:56:02,720 --> 00:56:05,520
think about what we do but in the paper

1085
00:56:05,520 --> 00:56:09,680
we show how to deal with that

1086
00:56:10,319 --> 00:56:15,420
um and one last in note all our analysis

1087
00:56:15,420 --> 00:56:17,099
is down on something that we call the

1088
00:56:17,099 --> 00:56:19,140
simplified computation tree

1089
00:56:19,140 --> 00:56:21,420
and the idea here is that if that's an

1090
00:56:21,420 --> 00:56:23,400
eye Gadget because of this property

1091
00:56:23,400 --> 00:56:25,500
there's an output probe cannot propagate

1092
00:56:25,500 --> 00:56:27,720
to the input we just divide it into two

1093
00:56:27,720 --> 00:56:29,579
parts that are

1094
00:56:29,579 --> 00:56:33,300
um we are independent of each other and

1095
00:56:33,300 --> 00:56:36,540
um then a path is really a part of the

1096
00:56:36,540 --> 00:56:38,819
how a pro can propagate within the

1097
00:56:38,819 --> 00:56:39,780
circuit

1098
00:56:39,780 --> 00:56:41,220
and if I

1099
00:56:41,220 --> 00:56:41,940
um

1100
00:56:41,940 --> 00:56:45,240
remaining say I'm uh there is no path I

1101
00:56:45,240 --> 00:56:47,160
mean a path no path in this simplified

1102
00:56:47,160 --> 00:56:50,000
computation tree

1103
00:56:50,280 --> 00:56:53,940
so let's see how to Cluster the gadgets

1104
00:56:53,940 --> 00:56:55,680
and there are basically four rules that

1105
00:56:55,680 --> 00:56:58,619
you need to follow and the first one is

1106
00:56:58,619 --> 00:57:01,380
that there should be no path from the

1107
00:57:01,380 --> 00:57:04,020
same source to two gadgets of the same

1108
00:57:04,020 --> 00:57:06,300
cluster and the reason is quite simple

1109
00:57:06,300 --> 00:57:08,520
so imagine you have two gadgets that

1110
00:57:08,520 --> 00:57:10,740
share some randomness

1111
00:57:10,740 --> 00:57:14,099
um then it is the case that you can

1112
00:57:14,099 --> 00:57:16,260
learn more of the inputs of the money

1113
00:57:16,260 --> 00:57:18,359
Gadget by observing the application

1114
00:57:18,359 --> 00:57:20,040
because basically you can learn the

1115
00:57:20,040 --> 00:57:22,619
randomness that is shared right

1116
00:57:22,619 --> 00:57:25,920
and now if they come from the same cells

1117
00:57:25,920 --> 00:57:27,740
we now learn more

1118
00:57:27,740 --> 00:57:30,420
shares than we are allowed to you know

1119
00:57:30,420 --> 00:57:33,420
in the SMI context which could reveal

1120
00:57:33,420 --> 00:57:35,700
all the secrets

1121
00:57:35,700 --> 00:57:37,920
the second rule is there should be no

1122
00:57:37,920 --> 00:57:42,240
pause between two gadgets of of one

1123
00:57:42,240 --> 00:57:43,800
cluster

1124
00:57:43,800 --> 00:57:47,700
and the reason is that if we have a

1125
00:57:47,700 --> 00:57:50,220
shared uh if we have such a pass and we

1126
00:57:50,220 --> 00:57:52,200
have an output value that is masked by

1127
00:57:52,200 --> 00:57:54,960
some Randomness which is shared later on

1128
00:57:54,960 --> 00:57:56,760
and we have an Excel in this other

1129
00:57:56,760 --> 00:58:00,359
Gadget then while we remove the masking

1130
00:58:00,359 --> 00:58:02,040
instead of increasing refreshing the

1131
00:58:02,040 --> 00:58:03,960
masking which would decrease the

1132
00:58:03,960 --> 00:58:07,500
security instead of holding it

1133
00:58:07,500 --> 00:58:11,579
the third rule is that there is no path

1134
00:58:11,579 --> 00:58:14,520
from two gadgets of the same cluster to

1135
00:58:14,520 --> 00:58:17,400
another Gadget later on that is not in

1136
00:58:17,400 --> 00:58:18,540
the cluster

1137
00:58:18,540 --> 00:58:20,940
and the reason is quite similar to the

1138
00:58:20,940 --> 00:58:22,800
last one because if we have a shared

1139
00:58:22,800 --> 00:58:24,900
Randomness between those two gadgets and

1140
00:58:24,900 --> 00:58:26,940
we X all them later on when we remove

1141
00:58:26,940 --> 00:58:29,520
again the mask

1142
00:58:29,520 --> 00:58:32,339
and the fourth and final rule here is

1143
00:58:32,339 --> 00:58:34,319
that there is no path from each output

1144
00:58:34,319 --> 00:58:38,339
of the uh of of the gadgets in one

1145
00:58:38,339 --> 00:58:41,099
cluster to another Gadget and this is

1146
00:58:41,099 --> 00:58:43,680
trivially true for all Sni gadgets for

1147
00:58:43,680 --> 00:58:46,200
always and eye compositions but

1148
00:58:46,200 --> 00:58:48,119
um yeah we have it here for completeness

1149
00:58:48,119 --> 00:58:50,400
and we will similar to the first one

1150
00:58:50,400 --> 00:58:53,760
right you can learn more probes and uh

1151
00:58:53,760 --> 00:58:56,220
yeah you can learn all the shares by

1152
00:58:56,220 --> 00:58:58,319
only placing the amount of probes you're

1153
00:58:58,319 --> 00:59:00,480
allowed to

1154
00:59:00,480 --> 00:59:03,480
so these are the clustering rules and

1155
00:59:03,480 --> 00:59:05,640
now the real estate distribution for

1156
00:59:05,640 --> 00:59:07,980
this cluster videos is quite easy there

1157
00:59:07,980 --> 00:59:10,200
is only one rule and this rule is that

1158
00:59:10,200 --> 00:59:12,240
there should be no pair of Randomness

1159
00:59:12,240 --> 00:59:15,500
values that come into more than uh one

1160
00:59:15,500 --> 00:59:17,819
uh Gadget

1161
00:59:17,819 --> 00:59:21,900
and so an example you can see on the

1162
00:59:21,900 --> 00:59:27,000
uh here and so the first Gadget gets the

1163
00:59:27,000 --> 00:59:29,880
uh the running material one and two

1164
00:59:29,880 --> 00:59:33,000
random to zero to three and four and one

1165
00:59:33,000 --> 00:59:35,099
three and five and

1166
00:59:35,099 --> 00:59:38,160
yeah this follows this Rule and the

1167
00:59:38,160 --> 00:59:39,900
reason is that with this we can

1168
00:59:39,900 --> 00:59:42,180
guarantee that

1169
00:59:42,180 --> 00:59:45,480
um each product can remove at most one

1170
00:59:45,480 --> 00:59:47,339
running from another probe so we

1171
00:59:47,339 --> 00:59:49,380
basically have if you are familiar with

1172
00:59:49,380 --> 00:59:51,780
the designs of the gadgets we basically

1173
00:59:51,780 --> 00:59:53,640
have the same rules that we have within

1174
00:59:53,640 --> 00:59:58,460
the budgets also across gadgets

1175
00:59:59,040 --> 01:00:02,520
and so given those clustering and

1176
01:00:02,520 --> 01:00:04,500
Remnants rules we can then prove the

1177
01:00:04,500 --> 01:00:06,420
following theorems

1178
01:00:06,420 --> 01:00:08,880
um namely that if we have an SNR

1179
01:00:08,880 --> 01:00:11,339
composition

1180
01:00:11,339 --> 01:00:13,380
um where we do the clustering then by

1181
01:00:13,380 --> 01:00:15,660
propr propagation we get at most T

1182
01:00:15,660 --> 01:00:19,140
probes at the output of such a cluster

1183
01:00:19,140 --> 01:00:20,520
um and

1184
01:00:20,520 --> 01:00:23,339
in addition we get that if we do the

1185
01:00:23,339 --> 01:00:24,599
randomness

1186
01:00:24,599 --> 01:00:27,059
um sharing that I showed you we can show

1187
01:00:27,059 --> 01:00:29,640
that the Dom gadgets

1188
01:00:29,640 --> 01:00:32,640
with this Randomness optimization are

1189
01:00:32,640 --> 01:00:34,799
reduced multiple output Sni and in

1190
01:00:34,799 --> 01:00:37,020
combination this gives us a way to

1191
01:00:37,020 --> 01:00:40,079
optimize this the randomness Without

1192
01:00:40,079 --> 01:00:42,720
Really decreasing the security and the

1193
01:00:42,720 --> 01:00:45,500
proofs for that are in the paper

1194
01:00:45,500 --> 01:00:48,599
now for evaluation

1195
01:00:48,599 --> 01:00:53,099
um the worst observation is that

1196
01:00:53,099 --> 01:00:55,500
because we require this Independence

1197
01:00:55,500 --> 01:00:57,480
property this is really good for

1198
01:00:57,480 --> 01:01:00,119
parallel structures right so in this

1199
01:01:00,119 --> 01:01:04,079
graph you see the randomness requirement

1200
01:01:04,079 --> 01:01:07,680
here s box for finding a certain number

1201
01:01:07,680 --> 01:01:10,440
of parallel as books so the x-axis is

1202
01:01:10,440 --> 01:01:13,799
the number of parallel s boxes and the

1203
01:01:13,799 --> 01:01:16,380
y-axis is the number of Randomness the

1204
01:01:16,380 --> 01:01:19,200
required pair s-box so for a single Xbox

1205
01:01:19,200 --> 01:01:21,839
and here you see that for all security

1206
01:01:21,839 --> 01:01:24,359
orders the randomness really decreases

1207
01:01:24,359 --> 01:01:27,480
Paris box with additional parallel

1208
01:01:27,480 --> 01:01:29,579
structures except for the first order

1209
01:01:29,579 --> 01:01:32,099
case but as I said this is something we

1210
01:01:32,099 --> 01:01:34,760
don't consider here

1211
01:01:35,579 --> 01:01:37,559
um and then

1212
01:01:37,559 --> 01:01:41,520
for the we also analyzed the AES

1213
01:01:41,520 --> 01:01:44,480
implementations on Android is

1214
01:01:44,480 --> 01:01:46,920
implementation with two different kinds

1215
01:01:46,920 --> 01:01:49,319
of s-boxes

1216
01:01:49,319 --> 01:01:52,680
um and I basically want to show I want

1217
01:01:52,680 --> 01:01:55,559
to focus here on four numbers

1218
01:01:55,559 --> 01:01:57,059
um and

1219
01:01:57,059 --> 01:02:00,240
here we see that even though the

1220
01:02:00,240 --> 01:02:02,339
standard variance or the non-optimized

1221
01:02:02,339 --> 01:02:04,920
version of the second version is

1222
01:02:04,920 --> 01:02:07,200
requires less randomness

1223
01:02:07,200 --> 01:02:10,140
the optimized version of the first run

1224
01:02:10,140 --> 01:02:13,619
of the first variant requires the less

1225
01:02:13,619 --> 01:02:16,260
rent so the minimum number of Randomness

1226
01:02:16,260 --> 01:02:19,680
in our entire uh system so this shows

1227
01:02:19,680 --> 01:02:22,980
that the number we can optimize is

1228
01:02:22,980 --> 01:02:26,040
really dependent on the structure of the

1229
01:02:26,040 --> 01:02:27,780
entire circuit and even if you have a

1230
01:02:27,780 --> 01:02:30,000
better design before it could be that

1231
01:02:30,000 --> 01:02:33,240
this is not the best after optimization

1232
01:02:33,240 --> 01:02:35,579
and also as a side note

1233
01:02:35,579 --> 01:02:37,920
um our analysis shows that peony does

1234
01:02:37,920 --> 01:02:39,980
not really work that one with our

1235
01:02:39,980 --> 01:02:43,920
structure and the reason is that in the

1236
01:02:43,920 --> 01:02:45,780
simplified computation tree we don't

1237
01:02:45,780 --> 01:02:47,640
separate peony gadgets because they are

1238
01:02:47,640 --> 01:02:51,379
the propagation go through

1239
01:02:51,660 --> 01:02:54,540
yeah and more details and also analysis

1240
01:02:54,540 --> 01:02:56,760
of the other cases can be found in the

1241
01:02:56,760 --> 01:02:57,720
paper

1242
01:02:57,720 --> 01:03:00,000
and that's it from my side so thank you

1243
01:03:00,000 --> 01:03:01,440
very much and I'm happy to answer

1244
01:03:01,440 --> 01:03:03,799
questions

1245
01:03:09,020 --> 01:03:12,359
any question from the audience one or

1246
01:03:12,359 --> 01:03:16,700
two quick question we can have

1247
01:03:16,740 --> 01:03:18,740
um

1248
01:03:20,760 --> 01:03:24,380
no question from a very responded

1249
01:03:24,380 --> 01:03:28,380
please no

1250
01:03:35,680 --> 01:03:38,770
[Music]

1251
01:03:39,079 --> 01:03:41,760
so yes in this work we did not consider

1252
01:03:41,760 --> 01:03:43,500
transitions uh this is definitely

1253
01:03:43,500 --> 01:03:45,299
something to look at in the future work

1254
01:03:45,299 --> 01:03:47,700
and we started already in into looking

1255
01:03:47,700 --> 01:03:49,140
into that

1256
01:03:49,140 --> 01:03:49,920
um

1257
01:03:49,920 --> 01:03:51,960
so basically

1258
01:03:51,960 --> 01:03:53,880
um yeah if you look at transitions you

1259
01:03:53,880 --> 01:03:55,619
can either extend the rules right to

1260
01:03:55,619 --> 01:03:57,780
also capture multiple rounds

1261
01:03:57,780 --> 01:04:00,180
um or you ensure that there is no

1262
01:04:00,180 --> 01:04:02,220
transition by I don't know doing a

1263
01:04:02,220 --> 01:04:04,680
bubble in between right as you propose

1264
01:04:04,680 --> 01:04:07,440
in the opening paper

1265
01:04:07,440 --> 01:04:09,920
what

1266
01:04:10,920 --> 01:04:13,559
no other question

1267
01:04:13,559 --> 01:04:17,660
let's thank you speaker again thank you

1268
01:04:21,839 --> 01:04:24,780
the next presentation is also related to

1269
01:04:24,780 --> 01:04:26,760
the notion of masking and reshope is

1270
01:04:26,760 --> 01:04:30,440
going to present the Florissant

1271
01:05:36,660 --> 01:05:39,299
hi welcome to the presentation on riding

1272
01:05:39,299 --> 01:05:41,040
the waves towards generic single cycle

1273
01:05:41,040 --> 01:05:43,319
masking and Hardware my name is rishab

1274
01:05:43,319 --> 01:05:44,819
and this was a joint work with Barbara

1275
01:05:44,819 --> 01:05:48,000
gigral Robert primas and Stefan Vanguard

1276
01:05:48,000 --> 01:05:50,339
so I get the pleasure of doing the last

1277
01:05:50,339 --> 01:05:52,799
masking talk so let's review

1278
01:05:52,799 --> 01:05:55,319
power analysis is a threat to real world

1279
01:05:55,319 --> 01:05:56,579
crypto

1280
01:05:56,579 --> 01:05:58,559
masking is a countermeasure where secret

1281
01:05:58,559 --> 01:06:00,599
data is split into shares and processed

1282
01:06:00,599 --> 01:06:01,799
separately

1283
01:06:01,799 --> 01:06:03,359
and a masked implementation is

1284
01:06:03,359 --> 01:06:05,339
considered de-order secure if an

1285
01:06:05,339 --> 01:06:06,839
attacker needs at least D plus one

1286
01:06:06,839 --> 01:06:08,880
shares to recover secrets so I put

1287
01:06:08,880 --> 01:06:11,400
asterisk here because of course when you

1288
01:06:11,400 --> 01:06:13,319
have a non-linear operation

1289
01:06:13,319 --> 01:06:15,480
glitches can be a problem and they can

1290
01:06:15,480 --> 01:06:18,480
potentially leak circuits and this uh

1291
01:06:18,480 --> 01:06:20,099
countermeasure

1292
01:06:20,099 --> 01:06:22,619
uh has some issues when it comes to

1293
01:06:22,619 --> 01:06:24,299
nonlinear circuits because the masking

1294
01:06:24,299 --> 01:06:26,220
can be very expensive

1295
01:06:26,220 --> 01:06:28,980
how masking requires more circuit area

1296
01:06:28,980 --> 01:06:31,680
you need an RNG and more clock Cycles to

1297
01:06:31,680 --> 01:06:33,839
compute something

1298
01:06:33,839 --> 01:06:36,539
and this can be a non-starter for

1299
01:06:36,539 --> 01:06:38,220
performance critical applications such

1300
01:06:38,220 --> 01:06:41,099
as memory encryption where latency is

1301
01:06:41,099 --> 01:06:43,859
critical and this leads into the area of

1302
01:06:43,859 --> 01:06:46,319
low latency masking and the question we

1303
01:06:46,319 --> 01:06:49,020
want to ask is can we compute a mass

1304
01:06:49,020 --> 01:06:51,420
circuit which computes securely in a

1305
01:06:51,420 --> 01:06:53,819
single clock cycle and to that end we

1306
01:06:53,819 --> 01:06:56,640
present self-synchronized masking a or

1307
01:06:56,640 --> 01:06:58,920
cesium and cesium is a technique which

1308
01:06:58,920 --> 01:07:01,200
can be applied to any masking scheme to

1309
01:07:01,200 --> 01:07:03,059
achieve single cycle de-order security

1310
01:07:03,059 --> 01:07:05,280
without requiring additional Randomness

1311
01:07:05,280 --> 01:07:07,740
so what would you do you take a Dom

1312
01:07:07,740 --> 01:07:10,319
circuit the ti circuit or an HPC circuit

1313
01:07:10,319 --> 01:07:12,900
or whatever you apply some season

1314
01:07:12,900 --> 01:07:15,180
techniques to it not on everything but

1315
01:07:15,180 --> 01:07:17,460
on just a small portion and you get a

1316
01:07:17,460 --> 01:07:19,140
single cycle the order secure circuit at

1317
01:07:19,140 --> 01:07:21,720
the output how do we do this we combine

1318
01:07:21,720 --> 01:07:23,760
dual rail logic and asynchronous

1319
01:07:23,760 --> 01:07:26,099
Primitives to achieve this

1320
01:07:26,099 --> 01:07:28,020
if you're familiar with dual logic it

1321
01:07:28,020 --> 01:07:29,520
was used a lot in the past for hiding

1322
01:07:29,520 --> 01:07:31,799
countermeasures here we don't use any

1323
01:07:31,799 --> 01:07:33,839
anything like that we are just using it

1324
01:07:33,839 --> 01:07:36,000
and The asynchronous Primitives to

1325
01:07:36,000 --> 01:07:40,319
create a circuit that can set itself

1326
01:07:40,319 --> 01:07:42,660
without the presence of a global clock

1327
01:07:42,660 --> 01:07:45,480
and operate in a glitch free operation

1328
01:07:45,480 --> 01:07:47,400
and I want to emphasize again we don't

1329
01:07:47,400 --> 01:07:49,380
require any additional Randomness so if

1330
01:07:49,380 --> 01:07:51,720
you're a Dom Gadget or your HPC circuit

1331
01:07:51,720 --> 01:07:54,839
requires 500 bits at the output at the

1332
01:07:54,839 --> 01:07:56,220
single cycle variant will also require

1333
01:07:56,220 --> 01:07:58,859
the same amount of randomness

1334
01:07:58,859 --> 01:08:01,619
so let's look into more details so here

1335
01:08:01,619 --> 01:08:03,900
I was explaining dual rail logic again

1336
01:08:03,900 --> 01:08:06,720
so we use two wires to encode a bit the

1337
01:08:06,720 --> 01:08:08,880
first wire is for The Logical value and

1338
01:08:08,880 --> 01:08:10,200
the second wire is for the inverted

1339
01:08:10,200 --> 01:08:11,819
value

1340
01:08:11,819 --> 01:08:14,099
over here we have a state diagram so we

1341
01:08:14,099 --> 01:08:16,500
have three symbols or code words the

1342
01:08:16,500 --> 01:08:18,299
center one is null and that's when both

1343
01:08:18,299 --> 01:08:19,979
wires are zero

1344
01:08:19,979 --> 01:08:22,020
and then on the outer side we have beta0

1345
01:08:22,020 --> 01:08:24,719
and beta1 and these are the logical

1346
01:08:24,719 --> 01:08:27,420
values of the encoding so they have

1347
01:08:27,420 --> 01:08:29,219
opposite values

1348
01:08:29,219 --> 01:08:32,160
your logic is evaluated in two steps so

1349
01:08:32,160 --> 01:08:34,259
the first is the pre-charge step so what

1350
01:08:34,259 --> 01:08:37,679
happens is you take all of the wires and

1351
01:08:37,679 --> 01:08:39,719
pre-charge them to the null words

1352
01:08:39,719 --> 01:08:41,939
and then you evaluate your circuit which

1353
01:08:41,939 --> 01:08:43,920
where you compute you do your operations

1354
01:08:43,920 --> 01:08:45,899
on Dual rail Gates and then every wire

1355
01:08:45,899 --> 01:08:48,299
is set to either a zero or one in the

1356
01:08:48,299 --> 01:08:50,460
encoding

1357
01:08:50,460 --> 01:08:52,679
so specifically we use wave Dynamic

1358
01:08:52,679 --> 01:08:54,120
differential logic this is where the

1359
01:08:54,120 --> 01:08:58,080
title comes from so dual wddl Gates as a

1360
01:08:58,080 --> 01:09:00,420
logic style based on standard cells here

1361
01:09:00,420 --> 01:09:03,540
we have a and gate so here we have an

1362
01:09:03,540 --> 01:09:05,819
and gate and an or gate and they both

1363
01:09:05,819 --> 01:09:07,560
operate to do the and operation in the

1364
01:09:07,560 --> 01:09:09,238
durail world

1365
01:09:09,238 --> 01:09:11,219
and I want to just point out this

1366
01:09:11,219 --> 01:09:13,439
notation here we use a box around the

1367
01:09:13,439 --> 01:09:15,359
symbol to represent the Dual rail Gadget

1368
01:09:15,359 --> 01:09:17,580
or a circuit

1369
01:09:17,580 --> 01:09:20,520
so wgdo Gates have some nice properties

1370
01:09:20,520 --> 01:09:22,319
so the first is they don't compute

1371
01:09:22,319 --> 01:09:24,420
intermediate results so if one of the

1372
01:09:24,420 --> 01:09:26,759
inputs is null in the null State then

1373
01:09:26,759 --> 01:09:28,319
the output will remain in the null State

1374
01:09:28,319 --> 01:09:30,779
until both have stabilized into their

1375
01:09:30,779 --> 01:09:33,660
data Logics values

1376
01:09:33,660 --> 01:09:35,939
the second property is that these gates

1377
01:09:35,939 --> 01:09:38,219
are positive and monotonic which means

1378
01:09:38,219 --> 01:09:40,140
the hemming weight of the output always

1379
01:09:40,140 --> 01:09:42,359
increases until we pre-charge and then

1380
01:09:42,359 --> 01:09:43,859
it goes back to zero

1381
01:09:43,859 --> 01:09:46,380
and these two properties imply that wddl

1382
01:09:46,380 --> 01:09:48,299
Gates do not glitch and there's a proof

1383
01:09:48,299 --> 01:09:52,140
in the original paper by Theory at all

1384
01:09:52,140 --> 01:09:53,819
and the second thing I want to introduce

1385
01:09:53,819 --> 01:09:56,160
is the C element and this is a gadget or

1386
01:09:56,160 --> 01:09:58,320
not a gadget sorry a logic gate which

1387
01:09:58,320 --> 01:10:00,360
can determine if a set of signals is

1388
01:10:00,360 --> 01:10:02,280
synchronized and this is used a lot in

1389
01:10:02,280 --> 01:10:04,320
asynchronous circuit design and here we

1390
01:10:04,320 --> 01:10:06,960
use it to uh essentially as a latch so

1391
01:10:06,960 --> 01:10:08,760
this is the symbol and this is a truth

1392
01:10:08,760 --> 01:10:11,160
table so notice that the output only

1393
01:10:11,160 --> 01:10:13,560
changes Q when the inputs A and B are

1394
01:10:13,560 --> 01:10:15,900
equal so otherwise it retains its

1395
01:10:15,900 --> 01:10:17,699
previous output so you can think of it

1396
01:10:17,699 --> 01:10:19,800
as a latch where one of the inputs is

1397
01:10:19,800 --> 01:10:21,300
the data and the others the gate and

1398
01:10:21,300 --> 01:10:24,239
they only change when they're equal

1399
01:10:24,239 --> 01:10:26,100
so let's design some circuits we see

1400
01:10:26,100 --> 01:10:26,940
them

1401
01:10:26,940 --> 01:10:29,640
so here's a first order Dom gate we have

1402
01:10:29,640 --> 01:10:33,239
four inputs the shares of X and Y

1403
01:10:33,239 --> 01:10:35,400
we have a layer of and Gates

1404
01:10:35,400 --> 01:10:37,679
and then a

1405
01:10:37,679 --> 01:10:40,020
xor with a random flash Randomness masks

1406
01:10:40,020 --> 01:10:43,860
to registers and the outputs

1407
01:10:43,860 --> 01:10:46,380
so we want to remove these two registers

1408
01:10:46,380 --> 01:10:48,239
right because they incur the latency

1409
01:10:48,239 --> 01:10:50,820
penalty we have to wait two cycles to

1410
01:10:50,820 --> 01:10:52,620
compute Z

1411
01:10:52,620 --> 01:10:55,080
so let's try to remove them the first

1412
01:10:55,080 --> 01:10:57,179
thing we would do is replace all of the

1413
01:10:57,179 --> 01:10:58,800
wires and all of the gates with the

1414
01:10:58,800 --> 01:11:01,020
Durrell equivalents and we have to dual

1415
01:11:01,020 --> 01:11:02,699
rail the inputs

1416
01:11:02,699 --> 01:11:06,719
so this creates a uh a glitch-free

1417
01:11:06,719 --> 01:11:09,659
environment so all the inputs will

1418
01:11:09,659 --> 01:11:11,040
propagate to the output and we don't

1419
01:11:11,040 --> 01:11:13,140
need any registers anymore but we need

1420
01:11:13,140 --> 01:11:14,760
to still synchronize and convert back to

1421
01:11:14,760 --> 01:11:16,860
single rail so what we do is we use the

1422
01:11:16,860 --> 01:11:18,900
C elements the C elements have an

1423
01:11:18,900 --> 01:11:21,239
inverted input so that means that when

1424
01:11:21,239 --> 01:11:22,920
you have a data State the zero one or

1425
01:11:22,920 --> 01:11:25,739
one zero they will convert back to

1426
01:11:25,739 --> 01:11:27,120
single row because of that inversion

1427
01:11:27,120 --> 01:11:29,219
right so we this this gate will see that

1428
01:11:29,219 --> 01:11:31,440
they're both equal

1429
01:11:31,440 --> 01:11:34,380
all right so let's look at a more

1430
01:11:34,380 --> 01:11:36,060
complicated circuit so this is the ascon

1431
01:11:36,060 --> 01:11:38,400
permutation here we have the state

1432
01:11:38,400 --> 01:11:40,020
registers and here we have the inverted

1433
01:11:40,020 --> 01:11:41,760
State registers and together they form

1434
01:11:41,760 --> 01:11:43,560
the Dual rail bus right so this would be

1435
01:11:43,560 --> 01:11:44,880
the true wire this would be the false

1436
01:11:44,880 --> 01:11:45,600
wire

1437
01:11:45,600 --> 01:11:47,699
then we have a pre-charger so this

1438
01:11:47,699 --> 01:11:49,500
circuit forwards the input to the output

1439
01:11:49,500 --> 01:11:52,320
until this pre-charge signal input comes

1440
01:11:52,320 --> 01:11:54,420
High then it forwards the null codewords

1441
01:11:54,420 --> 01:11:56,820
then we have the round constant amassed

1442
01:11:56,820 --> 01:11:59,520
s box completion detector so this

1443
01:11:59,520 --> 01:12:02,280
detects if all the inputs on the durable

1444
01:12:02,280 --> 01:12:04,739
bus are in their data State and when

1445
01:12:04,739 --> 01:12:07,260
that's true it sends a pre sends a 1 to

1446
01:12:07,260 --> 01:12:09,360
the pre-charger and that will recharge

1447
01:12:09,360 --> 01:12:11,219
this massive part then we have the C

1448
01:12:11,219 --> 01:12:14,699
element again notice the inverted input

1449
01:12:14,699 --> 01:12:16,620
so this will convert back to single rail

1450
01:12:16,620 --> 01:12:18,900
then we go to the linear layer do that

1451
01:12:18,900 --> 01:12:21,000
stuff and then we're ready to compute

1452
01:12:21,000 --> 01:12:22,320
the next round

1453
01:12:22,320 --> 01:12:25,320
so to illustrate it so first at the

1454
01:12:25,320 --> 01:12:27,840
beginning of the clock Edge the data

1455
01:12:27,840 --> 01:12:29,699
from the registers will pass through the

1456
01:12:29,699 --> 01:12:32,159
pre-charger if that's the wrong constant

1457
01:12:32,159 --> 01:12:34,980
and into the mass test box

1458
01:12:34,980 --> 01:12:37,440
then it's there's two things that will

1459
01:12:37,440 --> 01:12:38,880
happen after the mass test block

1460
01:12:38,880 --> 01:12:41,760
computation the first is that the C

1461
01:12:41,760 --> 01:12:44,219
elements will latch this value convert

1462
01:12:44,219 --> 01:12:45,780
it to single Rail and forward it to the

1463
01:12:45,780 --> 01:12:48,179
linear layer

1464
01:12:48,179 --> 01:12:50,040
the second is the completion detector

1465
01:12:50,040 --> 01:12:51,480
we'll see that

1466
01:12:51,480 --> 01:12:53,580
all of the inputs are in their data

1467
01:12:53,580 --> 01:12:54,780
state they're not pre-charged anymore

1468
01:12:54,780 --> 01:12:56,880
and that will forward a one to the

1469
01:12:56,880 --> 01:12:58,080
pre-charger

1470
01:12:58,080 --> 01:12:59,760
and that will pre-charge this whole

1471
01:12:59,760 --> 01:13:01,199
circuit

1472
01:13:01,199 --> 01:13:04,199
and then this will complete and then

1473
01:13:04,199 --> 01:13:07,400
they're ready to do the next round

1474
01:13:08,820 --> 01:13:11,400
so we made several implementations with

1475
01:13:11,400 --> 01:13:13,800
this design technique right and all of

1476
01:13:13,800 --> 01:13:15,420
these are available online and the paper

1477
01:13:15,420 --> 01:13:16,980
there's a link and you can play with

1478
01:13:16,980 --> 01:13:19,980
these or evaluate them so what we did is

1479
01:13:19,980 --> 01:13:23,640
we took a ascon implementation from

1480
01:13:23,640 --> 01:13:25,440
generic low latency masking and

1481
01:13:25,440 --> 01:13:28,260
comparative with our work so glm was one

1482
01:13:28,260 --> 01:13:30,420
of the first low latency masking papers

1483
01:13:30,420 --> 01:13:33,480
so to highlight it we don't require any

1484
01:13:33,480 --> 01:13:35,520
additional Randomness right so we have

1485
01:13:35,520 --> 01:13:38,100
improved by a factor of six here and the

1486
01:13:38,100 --> 01:13:40,320
area is still quite competitive in the

1487
01:13:40,320 --> 01:13:41,940
table we have more detail uh in the

1488
01:13:41,940 --> 01:13:44,580
paper sorry we have more uh expressive

1489
01:13:44,580 --> 01:13:46,800
tables and more discussion on that and

1490
01:13:46,800 --> 01:13:49,140
how we achieved it additionally our

1491
01:13:49,140 --> 01:13:52,140
clock frequencies are quite good

1492
01:13:52,140 --> 01:13:54,840
and we also wanted to figure out how it

1493
01:13:54,840 --> 01:13:58,080
scales for large s boxes like AES so we

1494
01:13:58,080 --> 01:14:00,480
we compared it with several different uh

1495
01:14:00,480 --> 01:14:03,360
single cycle maths papers and we

1496
01:14:03,360 --> 01:14:05,400
implemented two different architectures

1497
01:14:05,400 --> 01:14:08,400
for the AES box so we can see that our

1498
01:14:08,400 --> 01:14:11,219
area numbers are quite competitive and

1499
01:14:11,219 --> 01:14:13,800
our Randomness numbers are pretty good

1500
01:14:13,800 --> 01:14:17,219
so we uh if we found that with the

1501
01:14:17,219 --> 01:14:19,739
season the higher order uh not higher

1502
01:14:19,739 --> 01:14:22,380
order sorry the higher algebraic degree

1503
01:14:22,380 --> 01:14:25,920
s boxes are a lot uh uh easier to do

1504
01:14:25,920 --> 01:14:28,080
it's because we can improve a lot in

1505
01:14:28,080 --> 01:14:30,000
this area domain

1506
01:14:30,000 --> 01:14:32,280
and then our main contribution is that

1507
01:14:32,280 --> 01:14:35,219
we also made a single cycle a higher

1508
01:14:35,219 --> 01:14:36,719
order Xbox and this is the first in

1509
01:14:36,719 --> 01:14:39,179
literature to do so and again our area

1510
01:14:39,179 --> 01:14:41,760
numbers and our Randomness requirements

1511
01:14:41,760 --> 01:14:43,800
are quite competitive and we are also

1512
01:14:43,800 --> 01:14:45,300
the only one that can do it in a single

1513
01:14:45,300 --> 01:14:47,400
clock cycle

1514
01:14:47,400 --> 01:14:49,380
and then we went ahead and implemented

1515
01:14:49,380 --> 01:14:52,320
the full aes128 with encryption only and

1516
01:14:52,320 --> 01:14:54,719
compared it to the competing work from

1517
01:14:54,719 --> 01:14:57,380
lmdpl

1518
01:14:57,719 --> 01:15:01,920
and again right we have a very very uh

1519
01:15:01,920 --> 01:15:03,960
competitive area numbers and low

1520
01:15:03,960 --> 01:15:06,179
Randomness so one place we suffer here

1521
01:15:06,179 --> 01:15:08,640
is in the cloud frequency and aside from

1522
01:15:08,640 --> 01:15:11,100
the different gate libraries used uh one

1523
01:15:11,100 --> 01:15:13,020
issue we had is implementing this C

1524
01:15:13,020 --> 01:15:15,900
element right we usually would uh

1525
01:15:15,900 --> 01:15:17,580
implement this in commercial settings

1526
01:15:17,580 --> 01:15:20,040
with a custom standard cell but here we

1527
01:15:20,040 --> 01:15:21,960
had to do it with a regular ending or

1528
01:15:21,960 --> 01:15:24,659
Gates and the problem is that this gate

1529
01:15:24,659 --> 01:15:26,280
is kind of special and it requires a

1530
01:15:26,280 --> 01:15:28,440
combinatorial loop and that's quite hard

1531
01:15:28,440 --> 01:15:30,900
to synthesize out of the box but you can

1532
01:15:30,900 --> 01:15:32,640
view these numbers as kind of a worst

1533
01:15:32,640 --> 01:15:34,739
case because you would typically

1534
01:15:34,739 --> 01:15:37,140
implement this as a standard cell and

1535
01:15:37,140 --> 01:15:39,060
then already the timing and the tool is

1536
01:15:39,060 --> 01:15:41,040
able to handle this better

1537
01:15:41,040 --> 01:15:43,140
so we also did some several security

1538
01:15:43,140 --> 01:15:44,820
evaluations

1539
01:15:44,820 --> 01:15:47,580
so we used the cocoa tool and we

1540
01:15:47,580 --> 01:15:50,219
verified it in the d-extended probing

1541
01:15:50,219 --> 01:15:51,960
model which takes account into glitches

1542
01:15:51,960 --> 01:15:55,020
and transitions and we are able to model

1543
01:15:55,020 --> 01:15:57,120
the wddl gates based on this glitch-free

1544
01:15:57,120 --> 01:15:59,520
assumption from the original paper and

1545
01:15:59,520 --> 01:16:01,980
we verified both our ascon design and

1546
01:16:01,980 --> 01:16:04,759
our AES design

1547
01:16:05,040 --> 01:16:07,920
then additionally we took traces and did

1548
01:16:07,920 --> 01:16:10,320
the power power analysis

1549
01:16:10,320 --> 01:16:12,239
and this is the first order ascon

1550
01:16:12,239 --> 01:16:14,280
implementation with 10 million traces on

1551
01:16:14,280 --> 01:16:16,260
the left we have the first order t-test

1552
01:16:16,260 --> 01:16:18,239
and there's no leakage Beyond this 4.5

1553
01:16:18,239 --> 01:16:20,820
threshold and the second order test we

1554
01:16:20,820 --> 01:16:22,620
do see some leakage and that's expected

1555
01:16:22,620 --> 01:16:24,120
because this is a first order design and

1556
01:16:24,120 --> 01:16:25,440
we don't expect it to be second order

1557
01:16:25,440 --> 01:16:26,880
secure

1558
01:16:26,880 --> 01:16:30,900
we also implemented our aes128 up to 100

1559
01:16:30,900 --> 01:16:32,520
million traces I don't think you can see

1560
01:16:32,520 --> 01:16:35,100
it here but this is 100 million traces

1561
01:16:35,100 --> 01:16:37,860
this is the uh pre-charge and this is

1562
01:16:37,860 --> 01:16:40,080
the evaluates in the Power Trace and

1563
01:16:40,080 --> 01:16:41,820
this is the first order t-test again the

1564
01:16:41,820 --> 01:16:43,020
leakage here

1565
01:16:43,020 --> 01:16:45,000
and their second order t-test there's no

1566
01:16:45,000 --> 01:16:46,739
leakage as expected and this one is

1567
01:16:46,739 --> 01:16:48,360
curious this is a third order t-test and

1568
01:16:48,360 --> 01:16:51,060
we again don't see leakage now this uh

1569
01:16:51,060 --> 01:16:53,400
Comes This contribution comes from the

1570
01:16:53,400 --> 01:16:55,620
Dual part right this power hiding thing

1571
01:16:55,620 --> 01:16:58,679
but this is a an additional feature it's

1572
01:16:58,679 --> 01:17:00,719
not we don't base our security on this

1573
01:17:00,719 --> 01:17:03,480
so uh and then this this result was also

1574
01:17:03,480 --> 01:17:06,239
observed in the lmtpl paper previously

1575
01:17:06,239 --> 01:17:08,880
where you can see protection in higher

1576
01:17:08,880 --> 01:17:10,260
orders but this of course is not

1577
01:17:10,260 --> 01:17:12,300
guaranteed and most likely will break if

1578
01:17:12,300 --> 01:17:15,000
we take more and more traces

1579
01:17:15,000 --> 01:17:17,280
and we also did a b variate analysis so

1580
01:17:17,280 --> 01:17:19,080
this is with 10 million traces in this

1581
01:17:19,080 --> 01:17:22,140
upper triangle here we disabled the RNG

1582
01:17:22,140 --> 01:17:25,080
so we expect leakage in this in this

1583
01:17:25,080 --> 01:17:28,679
quadrant and here uh this was 100 uh 10

1584
01:17:28,679 --> 01:17:30,420
million traces sorry and in the lower

1585
01:17:30,420 --> 01:17:32,040
quadrant we don't expect any leakage

1586
01:17:32,040 --> 01:17:35,960
because this is with the masks enabled

1587
01:17:36,480 --> 01:17:38,460
and to summarize here we introduced

1588
01:17:38,460 --> 01:17:40,140
self-synchronized masking a design

1589
01:17:40,140 --> 01:17:42,120
technique where you can design the order

1590
01:17:42,120 --> 01:17:43,860
secure circuits which evaluates in a

1591
01:17:43,860 --> 01:17:45,719
single clock cycle

1592
01:17:45,719 --> 01:17:47,699
season combines ordinary masking with

1593
01:17:47,699 --> 01:17:49,920
asynchronous circuit design dual Rail

1594
01:17:49,920 --> 01:17:51,840
and EC elements and the design is still

1595
01:17:51,840 --> 01:17:54,420
mostly synchronous we still uh just need

1596
01:17:54,420 --> 01:17:56,699
to do the masked part in dual rails so

1597
01:17:56,699 --> 01:17:58,739
we can be be sure to do it in a single

1598
01:17:58,739 --> 01:17:59,940
clock cycle

1599
01:17:59,940 --> 01:18:01,140
and then there's no balancing

1600
01:18:01,140 --> 01:18:02,699
requirements for this dual rail encoding

1601
01:18:02,699 --> 01:18:04,320
this is a problem with the power hiding

1602
01:18:04,320 --> 01:18:07,199
area you need to make sure that each

1603
01:18:07,199 --> 01:18:09,840
rail is uh more or less operates at the

1604
01:18:09,840 --> 01:18:11,940
same time if we don't rely on this right

1605
01:18:11,940 --> 01:18:14,280
we just need masking that's our main

1606
01:18:14,280 --> 01:18:15,900
security area

1607
01:18:15,900 --> 01:18:18,600
and then we can also enable designers to

1608
01:18:18,600 --> 01:18:20,280
focus on performance goals rather than

1609
01:18:20,280 --> 01:18:22,260
on security requirements for example you

1610
01:18:22,260 --> 01:18:24,120
can unroll these season designs to

1611
01:18:24,120 --> 01:18:25,860
whatever you wish and evaluate that

1612
01:18:25,860 --> 01:18:27,659
without having to use the security

1613
01:18:27,659 --> 01:18:30,239
critical registers and this this is

1614
01:18:30,239 --> 01:18:31,860
great for designers because now you can

1615
01:18:31,860 --> 01:18:33,719
focus on your performance optimization

1616
01:18:33,719 --> 01:18:36,300
such as your low latency application

1617
01:18:36,300 --> 01:18:38,400
and then we also implemented the first

1618
01:18:38,400 --> 01:18:41,040
practical higher order Mass AES in the

1619
01:18:41,040 --> 01:18:42,440
literature

1620
01:18:42,440 --> 01:18:45,559
thank you

1621
01:18:51,239 --> 01:18:53,400
thank you for the nice presentation

1622
01:18:53,400 --> 01:18:55,140
any questions

1623
01:18:55,140 --> 01:18:57,540
from audience

1624
01:18:57,540 --> 01:19:00,440
thank you please

1625
01:19:01,040 --> 01:19:04,340
thank you for the

1626
01:19:05,460 --> 01:19:09,060
mcmaster.com students do you know if we

1627
01:19:09,060 --> 01:19:11,040
can do a bit better we can design the

1628
01:19:11,040 --> 01:19:13,699
exports itself

1629
01:19:15,800 --> 01:19:19,380
oh yeah you can of course so you mean

1630
01:19:19,380 --> 01:19:21,000
like to

1631
01:19:21,000 --> 01:19:23,520
design a masking scene direct from the

1632
01:19:23,520 --> 01:19:25,620
ground up or do real so we didn't

1633
01:19:25,620 --> 01:19:27,540
explore this question because we didn't

1634
01:19:27,540 --> 01:19:29,340
want to do this we wanted to extend

1635
01:19:29,340 --> 01:19:34,460
existing ones and uh make sure that uh

1636
01:19:34,940 --> 01:19:38,219
the security uh guarantees of these

1637
01:19:38,219 --> 01:19:40,679
gadgets carry through right so if we do

1638
01:19:40,679 --> 01:19:42,540
an HBC Gadget right the composability

1639
01:19:42,540 --> 01:19:44,159
will carry through and then we don't

1640
01:19:44,159 --> 01:19:45,900
lose anything there but we just wanted

1641
01:19:45,900 --> 01:19:47,219
to make sure that we can do everything

1642
01:19:47,219 --> 01:19:49,560
without this overhead that's our main

1643
01:19:49,560 --> 01:19:52,100
optimization

1644
01:19:57,080 --> 01:20:00,120
I'm sure it is possible but this is I

1645
01:20:00,120 --> 01:20:02,960
think future work then

1646
01:20:03,060 --> 01:20:06,060
any other question please thank you

1647
01:20:06,060 --> 01:20:06,719
[Music]

1648
01:20:06,719 --> 01:20:08,719
um

1649
01:20:14,140 --> 01:20:17,369
[Music]

1650
01:20:28,890 --> 01:20:31,280
[Music]

1651
01:20:31,280 --> 01:20:35,100
means that if we for example e bar it is

1652
01:20:35,100 --> 01:20:38,400
one completely independent of a the c

1653
01:20:38,400 --> 01:20:40,820
bar the old switch the second one

1654
01:20:40,820 --> 01:20:42,199
[Music]

1655
01:20:42,199 --> 01:20:45,510
yeah yeah

1656
01:20:45,510 --> 01:20:49,310
[Music]

1657
01:20:49,500 --> 01:20:51,540
and then if you go further into your

1658
01:20:51,540 --> 01:20:54,239
size you will move the registers in the

1659
01:20:54,239 --> 01:20:58,940
for example you remove the people back

1660
01:20:58,940 --> 01:21:02,100
yeah now you remove these languages now

1661
01:21:02,100 --> 01:21:04,140
delete this red resistor to actually see

1662
01:21:04,140 --> 01:21:06,620
foreign

1663
01:21:11,670 --> 01:21:14,779
[Music]

1664
01:21:19,970 --> 01:21:23,079
[Music]

1665
01:21:29,610 --> 01:21:35,049
[Music]

1666
01:21:40,020 --> 01:21:42,060
okay so the question is related to this

1667
01:21:42,060 --> 01:21:44,760
early evaluation effect of wddl gates so

1668
01:21:44,760 --> 01:21:46,920
in some cases right if you have a false

1669
01:21:46,920 --> 01:21:48,780
input right then you can short circuit

1670
01:21:48,780 --> 01:21:50,820
evaluate and get a false on the output

1671
01:21:50,820 --> 01:21:52,620
immediately without waiting for the null

1672
01:21:52,620 --> 01:21:54,900
of the other one is that related right

1673
01:21:54,900 --> 01:21:57,679
it's your question

1674
01:22:00,739 --> 01:22:03,980
right right

1675
01:22:05,460 --> 01:22:06,000
if

1676
01:22:06,000 --> 01:22:08,000
um

1677
01:22:15,580 --> 01:22:22,890
[Music]

1678
01:22:24,980 --> 01:22:27,179
they should be really at the same time

1679
01:22:27,179 --> 01:22:28,860
in the time that they are available

1680
01:22:28,860 --> 01:22:31,320
depend on the inputs then you have

1681
01:22:31,320 --> 01:22:32,880
autonomy information

1682
01:22:32,880 --> 01:22:37,399
[Music]

1683
01:22:38,880 --> 01:22:42,060
yeah so what we observed is that

1684
01:22:42,060 --> 01:22:44,400
since we rely on masking or not on this

1685
01:22:44,400 --> 01:22:46,860
hiding technique right uh it is

1686
01:22:46,860 --> 01:22:49,080
generally okay especially considering

1687
01:22:49,080 --> 01:22:50,760
that these xor Gates Don't evaluate

1688
01:22:50,760 --> 01:22:54,120
until both of the inputs arrive and we

1689
01:22:54,120 --> 01:22:56,460
didn't we didn't also see in our formal

1690
01:22:56,460 --> 01:22:59,940
analysis any issue with this uh we we

1691
01:22:59,940 --> 01:23:02,699
modeled it and in the paper I think we

1692
01:23:02,699 --> 01:23:04,980
have a more structured proof about it

1693
01:23:04,980 --> 01:23:07,080
and as well as uh

1694
01:23:07,080 --> 01:23:10,140
we don't really rely on that

1695
01:23:10,140 --> 01:23:11,159
um

1696
01:23:11,159 --> 01:23:13,380
aspects because most of the security

1697
01:23:13,380 --> 01:23:17,100
comes from these uh Mass circuits but

1698
01:23:17,100 --> 01:23:20,460
yes we explored this issue and from what

1699
01:23:20,460 --> 01:23:21,179
we

1700
01:23:21,179 --> 01:23:23,699
discovered there was not a problem is

1701
01:23:23,699 --> 01:23:27,360
when we took this um these wddl Gates

1702
01:23:27,360 --> 01:23:29,280
and then modeled it in cocoa and then

1703
01:23:29,280 --> 01:23:32,360
did the formal verification

1704
01:23:32,820 --> 01:23:35,599
any other questions

1705
01:23:36,300 --> 01:23:39,920
question exactly regarding this issue

1706
01:23:39,920 --> 01:23:42,659
perhaps I'm missing that what is

1707
01:23:42,659 --> 01:23:44,940
providing these synchronous effect in

1708
01:23:44,940 --> 01:23:47,400
your design can you elaborate on that

1709
01:23:47,400 --> 01:23:51,300
instead of having those two registers

1710
01:23:51,300 --> 01:23:53,159
oh I see

1711
01:23:53,159 --> 01:23:56,880
so these uh elements these are the uh

1712
01:23:56,880 --> 01:24:00,060
they provide a synchronization right so

1713
01:24:00,060 --> 01:24:02,580
they they act as latches and they will

1714
01:24:02,580 --> 01:24:05,460
make sure that uh every input

1715
01:24:05,460 --> 01:24:07,739
or rather all these um

1716
01:24:07,739 --> 01:24:10,620
these two wires will uh synchronize and

1717
01:24:10,620 --> 01:24:12,239
they won't change until both of them

1718
01:24:12,239 --> 01:24:15,120
have arrived thank you let me check

1719
01:24:15,120 --> 01:24:17,460
these two there is no question any other

1720
01:24:17,460 --> 01:24:20,640
question from audience

1721
01:24:20,640 --> 01:24:22,800
if not let's thank

1722
01:24:22,800 --> 01:24:25,800
foreign

1723
01:24:30,060 --> 01:24:32,820
before you leave just to remind you if

1724
01:24:32,820 --> 01:24:35,340
you want to watch track one after the

1725
01:24:35,340 --> 01:24:37,800
launch you don't come to this room

1726
01:24:37,800 --> 01:24:40,620
please don't leave anything in this room

1727
01:24:40,620 --> 01:24:43,020
because it will be used uh by somebody

1728
01:24:43,020 --> 01:24:47,040
else for an hour or so after the lunch

1729
01:24:47,040 --> 01:24:50,219
10 minutes before two come to the square

1730
01:24:50,219 --> 01:24:53,040
in front of Perez don't enter the lobby

1731
01:24:53,040 --> 01:24:55,219
even

