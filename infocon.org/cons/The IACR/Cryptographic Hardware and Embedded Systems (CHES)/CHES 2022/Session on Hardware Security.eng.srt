1
00:07:58,380 --> 00:08:01,819
and you can turn that up

2
00:08:08,460 --> 00:08:11,060
okay

3
00:08:24,199 --> 00:08:28,639
yeah that's like the yes

4
00:08:59,420 --> 00:09:02,420
thank you

5
00:09:26,459 --> 00:09:29,000
videos

6
00:09:56,959 --> 00:09:59,959
thank you

7
00:10:16,040 --> 00:10:18,560
it's awesome

8
00:10:18,560 --> 00:10:21,979
better than that

9
00:10:26,700 --> 00:10:28,700
um

10
00:11:19,620 --> 00:11:21,920
foreign

11
00:11:50,399 --> 00:11:53,120
goodness

12
00:11:54,480 --> 00:11:56,480
um

13
00:12:29,779 --> 00:12:32,779
thank you

14
00:12:49,100 --> 00:12:52,079
I will handle it that's okay thank you

15
00:12:52,079 --> 00:12:54,360
okay thank you um thank you now I mean

16
00:12:54,360 --> 00:12:57,360
thank you I should go collected but um

17
00:12:57,360 --> 00:13:00,480
um hello everybody and welcome to

18
00:13:00,480 --> 00:13:04,200
a decision called Hardware security we

19
00:13:04,200 --> 00:13:06,899
have four papers in in the session and

20
00:13:06,899 --> 00:13:08,220
actually we have all kind of

21
00:13:08,220 --> 00:13:10,139
presentations we have uh in-person

22
00:13:10,139 --> 00:13:12,000
presentation we have online presentation

23
00:13:12,000 --> 00:13:14,399
we have also video presentation

24
00:13:14,399 --> 00:13:17,220
good and the first paper is called can't

25
00:13:17,220 --> 00:13:18,779
touch this

26
00:13:18,779 --> 00:13:21,240
um inertial hsms toward advanced

27
00:13:21,240 --> 00:13:23,459
physical attacks and the talk is given

28
00:13:23,459 --> 00:13:27,060
by Jan Sebastian gotcha thank you yeah

29
00:13:27,060 --> 00:13:29,279
hi I'm Jan um I'm presenting the work of

30
00:13:29,279 --> 00:13:31,980
me and bjerman on what we call inertial

31
00:13:31,980 --> 00:13:34,139
hsms which is a novel concept of

32
00:13:34,139 --> 00:13:37,139
building easy to build cheap high

33
00:13:37,139 --> 00:13:39,779
security Hardware security modules so

34
00:13:39,779 --> 00:13:41,940
what is a Hardware security module um it

35
00:13:41,940 --> 00:13:43,800
is basically a computer that constantly

36
00:13:43,800 --> 00:13:46,079
monitors itself for physical attacks and

37
00:13:46,079 --> 00:13:48,420
that destroys or makes unusable the data

38
00:13:48,420 --> 00:13:51,480
contained within when it is tampered

39
00:13:51,480 --> 00:13:53,040
um this is like kind of my definition

40
00:13:53,040 --> 00:13:55,560
but like we contrast hsms to Smart cards

41
00:13:55,560 --> 00:13:57,540
and that an HSM is powered on at all

42
00:13:57,540 --> 00:14:00,600
times at least most designs are and that

43
00:14:00,600 --> 00:14:03,360
it's actively monitors for tampering

44
00:14:03,360 --> 00:14:05,519
um usually commercial hsms at least use

45
00:14:05,519 --> 00:14:07,740
called time per sensing membranes which

46
00:14:07,740 --> 00:14:10,560
are meshes which is a very fine uh

47
00:14:10,560 --> 00:14:12,540
plastic fall patent with like a squiggly

48
00:14:12,540 --> 00:14:14,339
Trace that is continuously monitored for

49
00:14:14,339 --> 00:14:16,040
like interruptions short circuits

50
00:14:16,040 --> 00:14:19,980
capacitance resistance or other factors

51
00:14:19,980 --> 00:14:21,839
um hsms in contrast to Smart cards

52
00:14:21,839 --> 00:14:23,639
protect macroscopic circuits so they

53
00:14:23,639 --> 00:14:24,899
usually protect like a circuit board

54
00:14:24,899 --> 00:14:26,940
with several chips instead of just like

55
00:14:26,940 --> 00:14:28,980
a single die of a chip

56
00:14:28,980 --> 00:14:30,600
um and also often they contain multiple

57
00:14:30,600 --> 00:14:32,639
tamper sensors just like smart cards for

58
00:14:32,639 --> 00:14:34,200
example also temperature sensors light

59
00:14:34,200 --> 00:14:35,820
sensors and others

60
00:14:35,820 --> 00:14:37,440
um why would you want one well basically

61
00:14:37,440 --> 00:14:39,540
I see them as a kind of a stop Gap

62
00:14:39,540 --> 00:14:41,820
measure that allows us to do things uh

63
00:14:41,820 --> 00:14:43,740
in practice that we cannot yet do

64
00:14:43,740 --> 00:14:45,720
efficiently with like cryptographic

65
00:14:45,720 --> 00:14:47,279
techniques such as you can multi-party

66
00:14:47,279 --> 00:14:48,899
computation and others

67
00:14:48,899 --> 00:14:50,699
um traditional hsms usually offer some

68
00:14:50,699 --> 00:14:52,680
proprietary API offering like Key

69
00:14:52,680 --> 00:14:54,720
Management functions encryption

70
00:14:54,720 --> 00:14:57,000
decryption key Generation

71
00:14:57,000 --> 00:14:59,220
Um custom software is rarely run inside

72
00:14:59,220 --> 00:15:01,260
the HSM itself so usually it's like part

73
00:15:01,260 --> 00:15:02,760
of a larger application running outside

74
00:15:02,760 --> 00:15:04,740
their talks through the API

75
00:15:04,740 --> 00:15:06,360
um so you don't usually offload like the

76
00:15:06,360 --> 00:15:09,180
entire application into the HSM the

77
00:15:09,180 --> 00:15:10,440
history of them is like the first

78
00:15:10,440 --> 00:15:12,180
references I could find or the concept

79
00:15:12,180 --> 00:15:14,820
are like from some NSA documents from

80
00:15:14,820 --> 00:15:17,160
the like Second World War era

81
00:15:17,160 --> 00:15:19,380
um they went into like fairly widespread

82
00:15:19,380 --> 00:15:22,019
military use in the following years and

83
00:15:22,019 --> 00:15:23,760
finally arrived like in commercial users

84
00:15:23,760 --> 00:15:26,699
in the 1980s 1990s sometime in like

85
00:15:26,699 --> 00:15:28,560
banking applications for protecting

86
00:15:28,560 --> 00:15:31,380
semantic keys and our goal is that today

87
00:15:31,380 --> 00:15:33,360
maybe they will finally arrive

88
00:15:33,360 --> 00:15:36,360
widespread in research labs so this is

89
00:15:36,360 --> 00:15:38,279
like one of these early hsms this is

90
00:15:38,279 --> 00:15:40,019
like U.S American one which is literally

91
00:15:40,019 --> 00:15:42,360
just like a special purpose encryption

92
00:15:42,360 --> 00:15:44,639
machine inside of a safe right that has

93
00:15:44,639 --> 00:15:47,160
some temper sensing features

94
00:15:47,160 --> 00:15:49,680
um the state-of-the-art infomercial hsms

95
00:15:49,680 --> 00:15:52,560
looks kind of like this so what you have

96
00:15:52,560 --> 00:15:54,180
is like a circuit board with a couple of

97
00:15:54,180 --> 00:15:56,279
uh with like a processor and some memory

98
00:15:56,279 --> 00:15:58,800
on it that is protected inside one of

99
00:15:58,800 --> 00:16:00,540
these security measures

100
00:16:00,540 --> 00:16:01,860
um they usually have usually have like

101
00:16:01,860 --> 00:16:03,480
structure sizes in the hundreds of

102
00:16:03,480 --> 00:16:05,639
micrometers so the target is that they

103
00:16:05,639 --> 00:16:07,139
should detect like drilling of like fine

104
00:16:07,139 --> 00:16:10,079
drill bits but they cannot uh like sense

105
00:16:10,079 --> 00:16:12,959
smaller intrusions than that usually

106
00:16:12,959 --> 00:16:15,000
um commercializations amps uses use

107
00:16:15,000 --> 00:16:17,459
these security meshes almost exclusively

108
00:16:17,459 --> 00:16:19,079
as far as I know

109
00:16:19,079 --> 00:16:21,660
um but in research it's like the state

110
00:16:21,660 --> 00:16:22,800
of the art is a little bit further

111
00:16:22,800 --> 00:16:24,660
already like in research

112
00:16:24,660 --> 00:16:27,000
um designs go beyond these simple meshes

113
00:16:27,000 --> 00:16:28,920
um but in our opinion there is still a

114
00:16:28,920 --> 00:16:30,540
lack of designs at like a sweet spot

115
00:16:30,540 --> 00:16:32,579
between manufacturer manufacturability

116
00:16:32,579 --> 00:16:35,279
and sensitivity so for example on one

117
00:16:35,279 --> 00:16:38,100
end of the scale we have the work by

118
00:16:38,100 --> 00:16:41,820
Toby that uses radio frequency

119
00:16:41,820 --> 00:16:43,500
measurements to scope out like the

120
00:16:43,500 --> 00:16:46,019
inside of a conductive enclosure they're

121
00:16:46,019 --> 00:16:48,300
easy to manufacture in Mars even

122
00:16:48,300 --> 00:16:50,220
um but they're not very sensitive as far

123
00:16:50,220 --> 00:16:53,279
as I understand it on the other end of

124
00:16:53,279 --> 00:16:54,779
the spectrum you have the harder to

125
00:16:54,779 --> 00:16:57,839
replicate but very sensitive uh work by

126
00:16:57,839 --> 00:16:59,339
uh

127
00:16:59,339 --> 00:17:00,959
um earlier today that was in the Puffs

128
00:17:00,959 --> 00:17:03,720
session a presentation on this which is

129
00:17:03,720 --> 00:17:05,819
very sensitive but of course it's harder

130
00:17:05,819 --> 00:17:07,679
to manufacture because it requires like

131
00:17:07,679 --> 00:17:10,919
a fine special purpose security mesh

132
00:17:10,919 --> 00:17:12,179
membrane that requires specialized

133
00:17:12,179 --> 00:17:13,500
production processes and also it

134
00:17:13,500 --> 00:17:15,839
requires uh like very complex analog

135
00:17:15,839 --> 00:17:18,540
circuitry to read that mesh our work is

136
00:17:18,540 --> 00:17:20,760
kind of in between of these it's uh we

137
00:17:20,760 --> 00:17:24,480
hope at once easy to replicate

138
00:17:24,480 --> 00:17:26,459
um with like low resources but also

139
00:17:26,459 --> 00:17:28,380
sensitive enough to provide like a

140
00:17:28,380 --> 00:17:30,120
practical security guarantee even

141
00:17:30,120 --> 00:17:32,760
insensitive applications

142
00:17:32,760 --> 00:17:34,860
um commercially available HSM I promise

143
00:17:34,860 --> 00:17:36,179
this is the only hot take for this

144
00:17:36,179 --> 00:17:37,559
presentation

145
00:17:37,559 --> 00:17:39,900
um in my opinion show like kind of a

146
00:17:39,900 --> 00:17:41,880
example of technological stagnation due

147
00:17:41,880 --> 00:17:43,080
to like a lack of competition since

148
00:17:43,080 --> 00:17:45,240
these designs are usually kind of siled

149
00:17:45,240 --> 00:17:48,780
inside of an of a single country because

150
00:17:48,780 --> 00:17:50,460
they're used for like military or police

151
00:17:50,460 --> 00:17:52,200
security applications

152
00:17:52,200 --> 00:17:54,000
um there doesn't seem to be like much

153
00:17:54,000 --> 00:17:55,440
competition it's usually like three

154
00:17:55,440 --> 00:17:57,120
vendors maybe

155
00:17:57,120 --> 00:17:58,679
um the disadvantages are they have

156
00:17:58,679 --> 00:18:00,179
fairly low processing speed which is

157
00:18:00,179 --> 00:18:01,860
also limited by power dissipation

158
00:18:01,860 --> 00:18:03,240
because all the power has to be

159
00:18:03,240 --> 00:18:04,500
dissipated through heat conduction

160
00:18:04,500 --> 00:18:06,960
through the membrane they do not usually

161
00:18:06,960 --> 00:18:08,700
offer bare metal access to the

162
00:18:08,700 --> 00:18:11,340
processing hardware and also from a

163
00:18:11,340 --> 00:18:13,620
research point of view the requirement

164
00:18:13,620 --> 00:18:15,720
to sign an NDA to get access to them as

165
00:18:15,720 --> 00:18:17,580
well as the extremely high cost at like

166
00:18:17,580 --> 00:18:20,520
20 000 Euros a unit uh kind of limits

167
00:18:20,520 --> 00:18:21,960
what you can do with them in a research

168
00:18:21,960 --> 00:18:23,520
context

169
00:18:23,520 --> 00:18:25,860
um so our idea was well if we can't buy

170
00:18:25,860 --> 00:18:26,640
it

171
00:18:26,640 --> 00:18:29,039
we'll just make your own

172
00:18:29,039 --> 00:18:31,679
um the difficult part in our opinion to

173
00:18:31,679 --> 00:18:34,200
uh diying like building your own

174
00:18:34,200 --> 00:18:36,120
Hardware security model is the security

175
00:18:36,120 --> 00:18:37,620
barrier

176
00:18:37,620 --> 00:18:39,059
um basically to prevent attacks by

177
00:18:39,059 --> 00:18:41,520
probing or bridging traces

178
00:18:41,520 --> 00:18:43,740
um you need very fine features

179
00:18:43,740 --> 00:18:45,840
um so like very fine traces fine not for

180
00:18:45,840 --> 00:18:48,299
like semiconductor process scales but

181
00:18:48,299 --> 00:18:50,100
like for for example printed circuit

182
00:18:50,100 --> 00:18:52,679
board manufacturing uh scales to prevent

183
00:18:52,679 --> 00:18:54,660
disassembly the parts must be engineered

184
00:18:54,660 --> 00:18:57,059
to be fragile so the idea is that if

185
00:18:57,059 --> 00:18:59,520
somebody tries to manipulate the HSM in

186
00:18:59,520 --> 00:19:01,380
any way it's supposed to break as much

187
00:19:01,380 --> 00:19:03,539
as possible so you can easily sense the

188
00:19:03,539 --> 00:19:04,799
intrusion

189
00:19:04,799 --> 00:19:06,419
um the obvious choice of using a

190
00:19:06,419 --> 00:19:07,620
commercial printed circuit board

191
00:19:07,620 --> 00:19:09,059
manufacturing process is for the

192
00:19:09,059 --> 00:19:10,980
security mesh in our opinion doesn't

193
00:19:10,980 --> 00:19:12,720
really work because these commercial

194
00:19:12,720 --> 00:19:14,400
printed circuit boards are usually made

195
00:19:14,400 --> 00:19:16,679
to be robust so they're like fairly easy

196
00:19:16,679 --> 00:19:18,480
to modify after the effect by like

197
00:19:18,480 --> 00:19:20,039
scratching off solar resist and like

198
00:19:20,039 --> 00:19:21,780
bridging traces with copper wires under

199
00:19:21,780 --> 00:19:22,980
the microscope

200
00:19:22,980 --> 00:19:24,840
which is kind of the opposite of what we

201
00:19:24,840 --> 00:19:28,380
need so our idea is what we call the

202
00:19:28,380 --> 00:19:30,059
inertial Hardware security module the

203
00:19:30,059 --> 00:19:32,160
idea the the core observation is that

204
00:19:32,160 --> 00:19:33,660
you can't tamper what you can't touch

205
00:19:33,660 --> 00:19:35,160
right

206
00:19:35,160 --> 00:19:36,780
um extremely like some very specialty

207
00:19:36,780 --> 00:19:39,419
techniques um so to create a secure

208
00:19:39,419 --> 00:19:41,280
tamper barrier from cheap off-the-shelf

209
00:19:41,280 --> 00:19:43,020
printed circuit boards what we did is we

210
00:19:43,020 --> 00:19:44,760
first create an insecure barrier from

211
00:19:44,760 --> 00:19:45,660
them

212
00:19:45,660 --> 00:19:47,580
um so we just pattern these circuit

213
00:19:47,580 --> 00:19:49,679
boards with like mesh traces and then to

214
00:19:49,679 --> 00:19:52,020
avoid or to prevent an attacker from

215
00:19:52,020 --> 00:19:53,700
tampering with these mesh traces what we

216
00:19:53,700 --> 00:19:56,100
do is we take this cage we build up this

217
00:19:56,100 --> 00:19:57,660
out of these circuit boards and we spin

218
00:19:57,660 --> 00:19:59,640
it really fast really fast means about a

219
00:19:59,640 --> 00:20:01,140
thousand RPM

220
00:20:01,140 --> 00:20:02,039
um

221
00:20:02,039 --> 00:20:04,320
so that you kind of cannot easily like

222
00:20:04,320 --> 00:20:06,000
rotate yourself along with the device

223
00:20:06,000 --> 00:20:08,880
without like incurring serious damage

224
00:20:08,880 --> 00:20:10,679
um we can tell if somebody stops

225
00:20:10,679 --> 00:20:12,539
spinning our security mesh by putting an

226
00:20:12,539 --> 00:20:14,460
accelerometer on it

227
00:20:14,460 --> 00:20:18,059
um and we like the main points you could

228
00:20:18,059 --> 00:20:19,559
imagine against a design like this is

229
00:20:19,559 --> 00:20:21,780
probably like longevity uh power

230
00:20:21,780 --> 00:20:23,280
consumption but it turns out this is not

231
00:20:23,280 --> 00:20:25,200
really a problem um compared to like a

232
00:20:25,200 --> 00:20:27,419
PC case fan which has about the same

233
00:20:27,419 --> 00:20:29,640
rotation speed of 1000 RPM and which

234
00:20:29,640 --> 00:20:30,900
runs from like a couple hundred

235
00:20:30,900 --> 00:20:33,179
milliwatts or even a watt and this thing

236
00:20:33,179 --> 00:20:34,980
also pushes Air at the same time so like

237
00:20:34,980 --> 00:20:36,660
we don't need to push s we need less

238
00:20:36,660 --> 00:20:39,419
energy less power and they run for years

239
00:20:39,419 --> 00:20:41,820
at a time with no issues

240
00:20:41,820 --> 00:20:42,960
um the key components of an

241
00:20:42,960 --> 00:20:44,220
international Hardware security module

242
00:20:44,220 --> 00:20:46,260
you see like a mock-up of our prototype

243
00:20:46,260 --> 00:20:48,360
on the right side of the side the qcom

244
00:20:48,360 --> 00:20:49,620
columns are like the low-tech security

245
00:20:49,620 --> 00:20:52,440
mesh made from pcbs um an accelerometer

246
00:20:52,440 --> 00:20:54,120
that is placed on the rotating security

247
00:20:54,120 --> 00:20:55,260
mesh

248
00:20:55,260 --> 00:20:57,120
um you need a rotating power and data

249
00:20:57,120 --> 00:20:59,039
coupling for like transferring like for

250
00:20:59,039 --> 00:21:00,900
powering the rotating security mesh and

251
00:21:00,900 --> 00:21:03,539
for communicating between the stationary

252
00:21:03,539 --> 00:21:06,059
static payload system and the rotating

253
00:21:06,059 --> 00:21:07,679
security mesh

254
00:21:07,679 --> 00:21:09,240
um and you need a motion subsystem which

255
00:21:09,240 --> 00:21:10,799
is basically motor with an adjustable

256
00:21:10,799 --> 00:21:13,860
digitally controlled motor controller

257
00:21:13,860 --> 00:21:15,539
um the first issue we tackled in

258
00:21:15,539 --> 00:21:17,039
creating a prototype for one of these is

259
00:21:17,039 --> 00:21:19,380
the mesh generation we developed an open

260
00:21:19,380 --> 00:21:21,720
source workflow to use the kitecad

261
00:21:21,720 --> 00:21:24,539
electronics Ada package to create these

262
00:21:24,539 --> 00:21:26,460
security mesh pcbs such as the one you

263
00:21:26,460 --> 00:21:28,559
see here on the slide

264
00:21:28,559 --> 00:21:30,960
um for like arbitrary shapes

265
00:21:30,960 --> 00:21:32,580
um what we do is we take the input shape

266
00:21:32,580 --> 00:21:34,500
of our circuit boards including holes or

267
00:21:34,500 --> 00:21:37,440
any other features we overlay it with a

268
00:21:37,440 --> 00:21:39,720
grid of cells

269
00:21:39,720 --> 00:21:42,000
um we then filter out all these cells

270
00:21:42,000 --> 00:21:43,500
that are like inside like completely

271
00:21:43,500 --> 00:21:45,900
contained within the shape we then do

272
00:21:45,900 --> 00:21:48,480
from a started manually located starting

273
00:21:48,480 --> 00:21:51,179
point we do like a uh we cover the

274
00:21:51,179 --> 00:21:54,059
entire grid with the tree uh search and

275
00:21:54,059 --> 00:21:57,000
then we lay it like two two or more

276
00:21:57,000 --> 00:22:00,059
traces of the uh of the circuit along

277
00:22:00,059 --> 00:22:02,580
the outside of This research as is

278
00:22:02,580 --> 00:22:04,440
Illustrated in this picture and practice

279
00:22:04,440 --> 00:22:06,000
and optimization we're using here is

280
00:22:06,000 --> 00:22:07,559
that we observe that there's only 15

281
00:22:07,559 --> 00:22:09,480
possible combinations on how these cells

282
00:22:09,480 --> 00:22:10,860
in this grid can be connected to the

283
00:22:10,860 --> 00:22:12,600
neighbors so we can simply do this very

284
00:22:12,600 --> 00:22:14,940
efficiently with a lookup table the

285
00:22:14,940 --> 00:22:16,320
thing runs even within this keycard

286
00:22:16,320 --> 00:22:17,880
automation system within a couple of

287
00:22:17,880 --> 00:22:18,900
seconds

288
00:22:18,900 --> 00:22:21,720
this is what the measures look like for

289
00:22:21,720 --> 00:22:23,700
the research this shows like increasing

290
00:22:23,700 --> 00:22:26,220
Randomness factors which means in on the

291
00:22:26,220 --> 00:22:27,539
left for every cell we take a

292
00:22:27,539 --> 00:22:30,600
deterministic next cell if available and

293
00:22:30,600 --> 00:22:32,340
on the right for every cell we randomize

294
00:22:32,340 --> 00:22:33,679
all the possible

295
00:22:33,679 --> 00:22:36,140
cells that we can continue walking into

296
00:22:36,140 --> 00:22:40,620
uh with uniformly distribution so as you

297
00:22:40,620 --> 00:22:42,659
can see like well yeah we are able to

298
00:22:42,659 --> 00:22:44,039
like cover arbitrary shapes with this

299
00:22:44,039 --> 00:22:45,419
and it also doesn't like obviously

300
00:22:45,419 --> 00:22:47,280
include like any repeatable patterns

301
00:22:47,280 --> 00:22:49,380
visible to human eye of somebody trying

302
00:22:49,380 --> 00:22:51,299
to reverse engineer one

303
00:22:51,299 --> 00:22:54,539
um the second issue we had to tackle is

304
00:22:54,539 --> 00:22:56,460
um with the mesh done the second tempo

305
00:22:56,460 --> 00:22:58,440
sensor we need is the accelerometer um

306
00:22:58,440 --> 00:22:59,940
the issue we have to tackle with that is

307
00:22:59,940 --> 00:23:01,440
the question whether it's sensitive

308
00:23:01,440 --> 00:23:03,600
enough and whether the this it is

309
00:23:03,600 --> 00:23:05,880
resilient enough against environmental

310
00:23:05,880 --> 00:23:08,039
noise so we use an off-the-shelf

311
00:23:08,039 --> 00:23:11,340
automotive accelerometer because at 1000

312
00:23:11,340 --> 00:23:13,559
RPM we very quickly at very low radius

313
00:23:13,559 --> 00:23:15,419
already get extremely large

314
00:23:15,419 --> 00:23:19,679
accelerations of like 100 G's so um we

315
00:23:19,679 --> 00:23:21,120
found that this uh these Automotive

316
00:23:21,120 --> 00:23:22,740
Parts have the required range and have

317
00:23:22,740 --> 00:23:25,200
sufficient Precision they external

318
00:23:25,200 --> 00:23:27,059
inferences such as shocks elaboration

319
00:23:27,059 --> 00:23:29,039
due to a nearby Machinery or earthquakes

320
00:23:29,039 --> 00:23:31,080
even are like orders of magnitude

321
00:23:31,080 --> 00:23:32,820
smaller than our signal on the right you

322
00:23:32,820 --> 00:23:34,559
see like a couple of traces that we took

323
00:23:34,559 --> 00:23:36,179
at different accelerate the different

324
00:23:36,179 --> 00:23:38,340
rotation speeds with our accelerometer

325
00:23:38,340 --> 00:23:40,080
and so

326
00:23:40,080 --> 00:23:41,880
um we get a very clean signal out of

327
00:23:41,880 --> 00:23:43,860
that um all external monitors produce

328
00:23:43,860 --> 00:23:45,539
have a constant drift and they only

329
00:23:45,539 --> 00:23:47,520
produce relative measurements um so we

330
00:23:47,520 --> 00:23:49,200
have to like occasionally change the

331
00:23:49,200 --> 00:23:50,460
rotation speed in a practical

332
00:23:50,460 --> 00:23:52,140
application or to recalibrate the

333
00:23:52,140 --> 00:23:54,539
accelerometer on the Fly

334
00:23:54,539 --> 00:23:56,280
um finally the issue of power and data

335
00:23:56,280 --> 00:23:58,980
transfer remains um now

336
00:23:58,980 --> 00:24:00,600
we considered a couple of options

337
00:24:00,600 --> 00:24:02,340
mechanical slip Rings don't really work

338
00:24:02,340 --> 00:24:03,720
because they don't work at the high

339
00:24:03,720 --> 00:24:05,460
speeds for long durations

340
00:24:05,460 --> 00:24:07,620
um we considered having a special motor

341
00:24:07,620 --> 00:24:10,080
wound that includes a second Transformer

342
00:24:10,080 --> 00:24:12,659
coil as part of the construction we

343
00:24:12,659 --> 00:24:14,820
decided against that of course we do

344
00:24:14,820 --> 00:24:16,559
want our design to be easily replicated

345
00:24:16,559 --> 00:24:18,419
by any research lab without needing to

346
00:24:18,419 --> 00:24:19,740
talk to manufacturers to have like

347
00:24:19,740 --> 00:24:22,140
specialty components made we settled on

348
00:24:22,140 --> 00:24:23,700
a purely Optical system that for the

349
00:24:23,700 --> 00:24:25,380
data link uses photodiode and photo

350
00:24:25,380 --> 00:24:28,700
transistors and LEDs so in the latest

351
00:24:28,700 --> 00:24:31,020
version of the design we simply use like

352
00:24:31,020 --> 00:24:33,179
a red LED for the TX line and the blue

353
00:24:33,179 --> 00:24:35,400
LED for the RX line of an uart and then

354
00:24:35,400 --> 00:24:37,620
we talk some very simple noise based

355
00:24:37,620 --> 00:24:39,179
protocol with like some authentication

356
00:24:39,179 --> 00:24:41,520
and encryption over that through a

357
00:24:41,520 --> 00:24:43,320
standard uart between like our payload

358
00:24:43,320 --> 00:24:45,179
and our rotating mesh monitoring

359
00:24:45,179 --> 00:24:47,340
microcontroller the disadvantage is a

360
00:24:47,340 --> 00:24:49,020
slightly mechanically complex but it can

361
00:24:49,020 --> 00:24:51,360
build 100 from cheap commercially

362
00:24:51,360 --> 00:24:53,640
available components

363
00:24:53,640 --> 00:24:56,400
um now an issue with our initial design

364
00:24:56,400 --> 00:24:59,159
is that it has a weak point at the axis

365
00:24:59,159 --> 00:25:00,659
of rotation where the axis penetrates

366
00:25:00,659 --> 00:25:02,280
the security mesh

367
00:25:02,280 --> 00:25:04,919
um we accepted that vulnerability for

368
00:25:04,919 --> 00:25:06,840
the initial proof of concept

369
00:25:06,840 --> 00:25:09,480
um the defense mechanisms of that like

370
00:25:09,480 --> 00:25:10,799
there's a bunch of defenses you can do

371
00:25:10,799 --> 00:25:12,419
against that you can either have more

372
00:25:12,419 --> 00:25:14,100
than one axis of rotation you can have

373
00:25:14,100 --> 00:25:16,919
the axis of rotation precess as well

374
00:25:16,919 --> 00:25:19,020
um or what I should have shown here was

375
00:25:19,020 --> 00:25:21,059
also in the papers you can have like a

376
00:25:21,059 --> 00:25:23,039
second independent security mesh on the

377
00:25:23,039 --> 00:25:25,140
inside that why not theoretically

378
00:25:25,140 --> 00:25:26,880
mitigating this vulnerability at least

379
00:25:26,880 --> 00:25:29,100
makes it extremely annoying to fit some

380
00:25:29,100 --> 00:25:31,140
sort of probe into the device without

381
00:25:31,140 --> 00:25:32,940
breaking any of the meshes and without

382
00:25:32,940 --> 00:25:34,919
affecting like any of the rotation of

383
00:25:34,919 --> 00:25:37,320
any of the measures

384
00:25:37,320 --> 00:25:39,120
um also you would include in a in one of

385
00:25:39,120 --> 00:25:40,559
these hsms like in any other Hardware

386
00:25:40,559 --> 00:25:42,360
security module additional tamper

387
00:25:42,360 --> 00:25:44,460
sensing through things like light or

388
00:25:44,460 --> 00:25:46,559
radiation or temperature sensors

389
00:25:46,559 --> 00:25:48,299
um but also since we have XLR monitors

390
00:25:48,299 --> 00:25:50,279
and digital motor control we can use the

391
00:25:50,279 --> 00:25:51,840
we can monitor motor current and

392
00:25:51,840 --> 00:25:54,960
vibration as well for tempering

393
00:25:54,960 --> 00:25:57,779
um this is pictures of the PCB component

394
00:25:57,779 --> 00:25:59,159
like circuit board components of our

395
00:25:59,159 --> 00:26:01,679
initial design on the left you see the

396
00:26:01,679 --> 00:26:04,440
actual security mesh cage so the entire

397
00:26:04,440 --> 00:26:06,120
outside of this thing is covered by the

398
00:26:06,120 --> 00:26:07,919
security mesh as you can see we do not

399
00:26:07,919 --> 00:26:10,500
need a full cylinder or anything because

400
00:26:10,500 --> 00:26:12,419
we are rotating the thing we can have

401
00:26:12,419 --> 00:26:15,299
like these vertical struts for the same

402
00:26:15,299 --> 00:26:17,460
effect on this means this is designed

403
00:26:17,460 --> 00:26:19,260
for example allows for air cooling of

404
00:26:19,260 --> 00:26:21,120
the payload which allows for like much

405
00:26:21,120 --> 00:26:22,500
higher power dissipation than with

406
00:26:22,500 --> 00:26:24,419
traditional designs the part on the

407
00:26:24,419 --> 00:26:25,799
right in this picture is just the mount

408
00:26:25,799 --> 00:26:28,320
for in our prototype Raspberry Pi single

409
00:26:28,320 --> 00:26:30,539
board computer as just a stand in for

410
00:26:30,539 --> 00:26:32,520
the actual payload system

411
00:26:32,520 --> 00:26:33,840
um this is what the fully assembled

412
00:26:33,840 --> 00:26:35,400
prototype looks like

413
00:26:35,400 --> 00:26:37,620
um so you see in the middle the mount

414
00:26:37,620 --> 00:26:39,299
for the Raspberry Pi with also the motor

415
00:26:39,299 --> 00:26:40,860
controller on it and then like the

416
00:26:40,860 --> 00:26:43,440
security mesh positioned on a concentric

417
00:26:43,440 --> 00:26:45,600
axis around it in this picture it's

418
00:26:45,600 --> 00:26:47,340
missing these vertical struts that you

419
00:26:47,340 --> 00:26:48,900
saw in the last picture simply because

420
00:26:48,900 --> 00:26:50,580
the motor controller is inside and it

421
00:26:50,580 --> 00:26:52,620
needed like a manual knob to turn to

422
00:26:52,620 --> 00:26:54,600
turn it on and I didn't want to like uh

423
00:26:54,600 --> 00:26:58,140
break my fingers trying to access it

424
00:26:58,140 --> 00:27:00,000
um yeah so

425
00:27:00,000 --> 00:27:02,400
our idea our mission with this project

426
00:27:02,400 --> 00:27:03,840
is to enable Research into Hardware

427
00:27:03,840 --> 00:27:06,120
security models more widespread by

428
00:27:06,120 --> 00:27:08,039
making these things open source

429
00:27:08,039 --> 00:27:09,900
accessible to anyone within basic

430
00:27:09,900 --> 00:27:11,760
Electronics lab without specialty

431
00:27:11,760 --> 00:27:13,440
components without special manufacturing

432
00:27:13,440 --> 00:27:15,900
processes and to enable a bunch of new

433
00:27:15,900 --> 00:27:17,640
applications for example with custom

434
00:27:17,640 --> 00:27:18,900
Hardware inside the Hardware security

435
00:27:18,900 --> 00:27:22,020
module or with new applications running

436
00:27:22,020 --> 00:27:24,480
entirely within the HSM because we now

437
00:27:24,480 --> 00:27:26,700
have like general purpose commodity

438
00:27:26,700 --> 00:27:29,640
processing Hardware as the payload

439
00:27:29,640 --> 00:27:30,299
um

440
00:27:30,299 --> 00:27:31,740
this is something we're currently

441
00:27:31,740 --> 00:27:33,240
working on which is we want to scale up

442
00:27:33,240 --> 00:27:35,700
the design to allow for full Micro ATX

443
00:27:35,700 --> 00:27:37,380
server main boards inside of the

444
00:27:37,380 --> 00:27:39,419
security envelope which will allow like

445
00:27:39,419 --> 00:27:41,220
new applications because now we can do

446
00:27:41,220 --> 00:27:42,840
like the entire application inside the

447
00:27:42,840 --> 00:27:44,760
security envelope whereas previously you

448
00:27:44,760 --> 00:27:46,500
would have to split it along some API

449
00:27:46,500 --> 00:27:50,039
boundary into the secure non-secure part

450
00:27:50,039 --> 00:27:52,380
um yeah the designs are all open source

451
00:27:52,380 --> 00:27:54,720
from CAD designs to code and available

452
00:27:54,720 --> 00:27:57,120
at the get well over there

453
00:27:57,120 --> 00:27:59,400
um and I'm open for your questions a bit

454
00:27:59,400 --> 00:28:02,120
fast I'm sorry

455
00:28:07,620 --> 00:28:11,159
thank you yeah there is a question there

456
00:28:11,159 --> 00:28:13,380
um there's another one here okay yeah we

457
00:28:13,380 --> 00:28:14,700
have to like run around a bit with the

458
00:28:14,700 --> 00:28:16,260
microphone because we only have one for

459
00:28:16,260 --> 00:28:18,200
this room

460
00:28:18,200 --> 00:28:20,220
hi uh thank you for your talk

461
00:28:20,220 --> 00:28:22,020
interesting idea

462
00:28:22,020 --> 00:28:24,539
um so what are the attacks you claim you

463
00:28:24,539 --> 00:28:27,419
protect against so I've guess I missed

464
00:28:27,419 --> 00:28:30,120
it okay so like the uh we basically have

465
00:28:30,120 --> 00:28:32,100
the same attacker model as a traditional

466
00:28:32,100 --> 00:28:34,020
HSM so we assume that an attacker wants

467
00:28:34,020 --> 00:28:36,600
to for example uh probe circuit traces

468
00:28:36,600 --> 00:28:38,520
inside of the HSN we don't even consider

469
00:28:38,520 --> 00:28:41,039
like attacks at the chip level we assume

470
00:28:41,039 --> 00:28:42,779
for example that inside the HSM there

471
00:28:42,779 --> 00:28:45,000
might be a chip running firmware that is

472
00:28:45,000 --> 00:28:47,039
next to memory where it could even probe

473
00:28:47,039 --> 00:28:48,299
the traces and gain some information

474
00:28:48,299 --> 00:28:50,580
that way so what we want is we basically

475
00:28:50,580 --> 00:28:52,380
want to have the security envelope of

476
00:28:52,380 --> 00:28:54,000
like a couple centimeters in diameter

477
00:28:54,000 --> 00:28:55,620
and keep any attacker manipulation

478
00:28:55,620 --> 00:28:58,020
outside of that physical space so in

479
00:28:58,020 --> 00:29:00,840
unity in hsms I understand it you also

480
00:29:00,840 --> 00:29:03,659
protect against fault attacks right

481
00:29:03,659 --> 00:29:06,480
traditional hsms protect against that in

482
00:29:06,480 --> 00:29:09,000
that they also simply put like a

483
00:29:09,000 --> 00:29:10,440
physical distance between the nearest

484
00:29:10,440 --> 00:29:12,480
you can get to the application chips and

485
00:29:12,480 --> 00:29:13,919
they do have filtering on the power

486
00:29:13,919 --> 00:29:15,720
input to the device which we would also

487
00:29:15,720 --> 00:29:17,460
need in our design if we were to like

488
00:29:17,460 --> 00:29:19,200
build it out into like a full practical

489
00:29:19,200 --> 00:29:20,640
implementation

490
00:29:20,640 --> 00:29:23,100
but you can Fold It by laser because you

491
00:29:23,100 --> 00:29:24,360
have an optical

492
00:29:24,360 --> 00:29:26,220
data transfer right uh yeah well you

493
00:29:26,220 --> 00:29:28,020
could definitely fold the op like the in

494
00:29:28,020 --> 00:29:30,240
in this uh in this draft you could

495
00:29:30,240 --> 00:29:32,520
definitely follow the optical like uh

496
00:29:32,520 --> 00:29:34,559
Communications link between the mesh

497
00:29:34,559 --> 00:29:36,659
microcontroller and the payload what we

498
00:29:36,659 --> 00:29:38,580
did against that is a bit more described

499
00:29:38,580 --> 00:29:40,980
in the paper we simply used like uh

500
00:29:40,980 --> 00:29:43,200
cryptographically authenticated and

501
00:29:43,200 --> 00:29:46,140
encrypted Channel over the uart

502
00:29:46,140 --> 00:29:48,179
um where on first spin up when the

503
00:29:48,179 --> 00:29:50,700
device gets commissioned it uses an

504
00:29:50,700 --> 00:29:53,340
ephemeral key which then memorizes so

505
00:29:53,340 --> 00:29:55,320
you could inject data into that but then

506
00:29:55,320 --> 00:29:56,880
that would quickly be caught by like a

507
00:29:56,880 --> 00:29:58,799
heartbeat signal sent over that link

508
00:29:58,799 --> 00:30:01,940
okay thank you

509
00:30:02,720 --> 00:30:05,940
my question is what happens if attacker

510
00:30:05,940 --> 00:30:08,100
builds the system that rotates around so

511
00:30:08,100 --> 00:30:10,440
the the yeah with the same angle speed

512
00:30:10,440 --> 00:30:12,240
yeah that is the one thing you could

513
00:30:12,240 --> 00:30:14,220
definitely do to attack this system

514
00:30:14,220 --> 00:30:16,919
um I think the reasoning of it is that

515
00:30:16,919 --> 00:30:19,500
we increase the effort you need for an

516
00:30:19,500 --> 00:30:20,940
attack by like orders of magnitude

517
00:30:20,940 --> 00:30:23,340
because at a thousand RPM to build a

518
00:30:23,340 --> 00:30:25,020
like it's a thousand RPM at the distance

519
00:30:25,020 --> 00:30:26,820
at a radius of 10 centimeters you

520
00:30:26,820 --> 00:30:28,679
already have more than 100 G of

521
00:30:28,679 --> 00:30:31,799
centrifugal acceleration so to build a

522
00:30:31,799 --> 00:30:33,779
robot that is able to do like a targeted

523
00:30:33,779 --> 00:30:36,299
like I don't know solder a wire to a

524
00:30:36,299 --> 00:30:38,700
security mesh at a thousand RPM in our

525
00:30:38,700 --> 00:30:41,279
opinion is not really feasible from an

526
00:30:41,279 --> 00:30:42,659
engineering point of view

527
00:30:42,659 --> 00:30:44,940
and if it becomes feasible at some point

528
00:30:44,940 --> 00:30:47,520
we can bump it up to 2000 RPM which like

529
00:30:47,520 --> 00:30:49,260
increases the uh Centric Google

530
00:30:49,260 --> 00:30:53,399
acceleration by a factor of four okay

531
00:30:53,399 --> 00:30:56,840
okay any other question

532
00:30:57,320 --> 00:30:58,860
uh

533
00:30:58,860 --> 00:31:00,840
I just want to ask about your threat

534
00:31:00,840 --> 00:31:02,700
model do you consider the chip inside

535
00:31:02,700 --> 00:31:06,059
the module it is trusted or untrusted

536
00:31:06,059 --> 00:31:08,279
sorry I did not answer that I mean you

537
00:31:08,279 --> 00:31:10,980
think that the chip inside the module is

538
00:31:10,980 --> 00:31:13,080
it trusted

539
00:31:13,080 --> 00:31:16,620
okay so the payload of the module um is

540
00:31:16,620 --> 00:31:18,240
basically anything the user wants it to

541
00:31:18,240 --> 00:31:19,440
be

542
00:31:19,440 --> 00:31:22,440
um you would with what by employing this

543
00:31:22,440 --> 00:31:24,360
technology what you do is from the point

544
00:31:24,360 --> 00:31:26,940
where commission it where you spin it up

545
00:31:26,940 --> 00:31:29,159
um onwards you have a certain assurance

546
00:31:29,159 --> 00:31:30,600
that nobody is going to be able to

547
00:31:30,600 --> 00:31:32,940
tamper with the payload so for example

548
00:31:32,940 --> 00:31:35,880
you could put like a the Raspberry Pi a

549
00:31:35,880 --> 00:31:37,679
single board computer inside there and

550
00:31:37,679 --> 00:31:39,120
then like once you have commissioned it

551
00:31:39,120 --> 00:31:40,799
even if you put it in untrusted location

552
00:31:40,799 --> 00:31:43,020
such as a data center you would have a

553
00:31:43,020 --> 00:31:44,340
certain assurance that nobody will be

554
00:31:44,340 --> 00:31:45,539
able to like

555
00:31:45,539 --> 00:31:48,240
tamper with that payload system

556
00:31:48,240 --> 00:31:51,419
uh so did you also evaluate for the

557
00:31:51,419 --> 00:31:54,240
higher frequency radiations I mean the

558
00:31:54,240 --> 00:31:56,580
terahertz or something like this yeah so

559
00:31:56,580 --> 00:31:58,320
the um you have to consider two things

560
00:31:58,320 --> 00:31:59,940
that the payload itself has to be

561
00:31:59,940 --> 00:32:02,460
protected by electromagnetic shielding

562
00:32:02,460 --> 00:32:04,140
also you have to mechanically Shield it

563
00:32:04,140 --> 00:32:06,120
because if you have like our prototype

564
00:32:06,120 --> 00:32:07,559
design has like these gaps in the

565
00:32:07,559 --> 00:32:09,539
security envelope a synchronized pulse

566
00:32:09,539 --> 00:32:11,220
laser might also be able to do something

567
00:32:11,220 --> 00:32:12,840
to the payload so you have to Shield

568
00:32:12,840 --> 00:32:14,760
against that but it should be fairly

569
00:32:14,760 --> 00:32:16,140
easy because you just need like a

570
00:32:16,140 --> 00:32:17,940
centimeter of aluminum to make it really

571
00:32:17,940 --> 00:32:19,919
annoying to do anything to the payload

572
00:32:19,919 --> 00:32:21,179
within

573
00:32:21,179 --> 00:32:22,980
um the other thing that we have to trust

574
00:32:22,980 --> 00:32:24,360
is like the piece of the the

575
00:32:24,360 --> 00:32:26,159
microcontroller that is monitoring the

576
00:32:26,159 --> 00:32:28,080
mesh that is sitting on the mesh there

577
00:32:28,080 --> 00:32:31,260
basically we have to assure that with a

578
00:32:31,260 --> 00:32:33,600
like non-contact attack using some laser

579
00:32:33,600 --> 00:32:35,399
or something it is not possible to like

580
00:32:35,399 --> 00:32:37,380
modify that microcontroller in a

581
00:32:37,380 --> 00:32:39,120
targeted way to cause it to stop

582
00:32:39,120 --> 00:32:41,220
monitoring the mesh for example but we

583
00:32:41,220 --> 00:32:42,659
think that is a reasonable assumption

584
00:32:42,659 --> 00:32:44,760
given like the current state of the art

585
00:32:44,760 --> 00:32:47,700
and engineering

586
00:32:47,700 --> 00:32:49,679
okay thank you there was another

587
00:32:49,679 --> 00:32:51,360
question here but we run a lot of time

588
00:32:51,360 --> 00:32:52,919
if it's okay to leave it for the for the

589
00:32:52,919 --> 00:32:55,080
break for the coffee break okay thank

590
00:32:55,080 --> 00:32:56,700
you so much thank you very much let's uh

591
00:32:56,700 --> 00:32:59,360
thank you on again

592
00:33:02,960 --> 00:33:06,000
okay the next talk will be completely

593
00:33:06,000 --> 00:33:08,240
online

594
00:33:12,600 --> 00:33:15,360
um you can share your screen Mario Mario

595
00:33:15,360 --> 00:33:18,240
's I don't know how to pronounce

596
00:33:18,240 --> 00:33:20,279
oh my yes yeah

597
00:33:20,279 --> 00:33:22,500
okay we see your face

598
00:33:22,500 --> 00:33:25,140
I think your screen is also coming do

599
00:33:25,140 --> 00:33:26,460
you hear us right

600
00:33:26,460 --> 00:33:30,320
yes I can hear you well good

601
00:33:34,679 --> 00:33:37,320
um yes we see your screen I don't know

602
00:33:37,320 --> 00:33:39,360
whether it's full screen or no whether

603
00:33:39,360 --> 00:33:41,220
you can make it better but if it's uh

604
00:33:41,220 --> 00:33:43,260
the maximum thing that you can do

605
00:33:43,260 --> 00:33:45,240
you are on the stage

606
00:33:45,240 --> 00:33:46,799
um I need to change something in a

607
00:33:46,799 --> 00:33:49,039
screen

608
00:33:50,519 --> 00:33:52,620
um yeah I think this is the best I can

609
00:33:52,620 --> 00:33:54,600
do I don't know if

610
00:33:54,600 --> 00:33:57,179
good there is a little bit on the top

611
00:33:57,179 --> 00:33:58,500
are you ready Mario

612
00:33:58,500 --> 00:33:59,820
yes

613
00:33:59,820 --> 00:34:02,640
good yeah the talk or the paper is

614
00:34:02,640 --> 00:34:05,279
called towards a formal treatment of

615
00:34:05,279 --> 00:34:09,239
logic locking and Mario's skorogio is

616
00:34:09,239 --> 00:34:12,540
giving the talk Mario the stage is yours

617
00:34:12,540 --> 00:34:16,859
ah thank you so yeah this is a um this

618
00:34:16,859 --> 00:34:19,020
is a talk about a logic logging and it's

619
00:34:19,020 --> 00:34:21,659
a joint work with a Pierre religion and

620
00:34:21,659 --> 00:34:23,520
Peterborough from the University of

621
00:34:23,520 --> 00:34:26,280
Southern California and Alex malosemov

622
00:34:26,280 --> 00:34:29,280
and Ben Hamlin from galwa

623
00:34:29,280 --> 00:34:31,080
all right so

624
00:34:31,080 --> 00:34:32,879
um let's start with a motivation of

625
00:34:32,879 --> 00:34:35,820
logic blocking so let's say

626
00:34:35,820 --> 00:34:37,800
um there is a designer that comes up

627
00:34:37,800 --> 00:34:40,500
with a with a new chip that does

628
00:34:40,500 --> 00:34:41,300
something

629
00:34:41,300 --> 00:34:44,219
something new for example it performs a

630
00:34:44,219 --> 00:34:47,040
new Fast algorithm or some machine

631
00:34:47,040 --> 00:34:49,020
learning model

632
00:34:49,020 --> 00:34:50,820
um or something Proprietor in general

633
00:34:50,820 --> 00:34:54,199
and it would like to print this chip

634
00:34:54,199 --> 00:34:58,619
and and today it's um it's it's usually

635
00:34:58,619 --> 00:35:01,680
uh cheaper to basically delegate the

636
00:35:01,680 --> 00:35:05,099
manufacturing of the chip to to another

637
00:35:05,099 --> 00:35:08,040
manufacturer where we basically send the

638
00:35:08,040 --> 00:35:09,660
description eye of the chip the

639
00:35:09,660 --> 00:35:11,880
manufacturer princetic and sends it back

640
00:35:11,880 --> 00:35:14,760
to them to the designer

641
00:35:14,760 --> 00:35:17,040
all right so

642
00:35:17,040 --> 00:35:20,420
um however what happens if if the the

643
00:35:20,420 --> 00:35:23,339
manufacturer the the Fab is actually

644
00:35:23,339 --> 00:35:26,160
malicious right in this case they can do

645
00:35:26,160 --> 00:35:28,320
a lot of um a number of different things

646
00:35:28,320 --> 00:35:31,980
it could try to over produce this chip

647
00:35:31,980 --> 00:35:35,040
for its own benefit it could try to

648
00:35:35,040 --> 00:35:36,960
um extract

649
00:35:36,960 --> 00:35:39,119
uh yeah I can talk a little bit I can

650
00:35:39,119 --> 00:35:40,320
try to

651
00:35:40,320 --> 00:35:42,119
talk a little bit louder I don't know if

652
00:35:42,119 --> 00:35:45,260
you if this is better

653
00:35:45,780 --> 00:35:46,800
um

654
00:35:46,800 --> 00:35:49,859
all right yeah so it can try to over

655
00:35:49,859 --> 00:35:51,660
produce for its own benefit or can try

656
00:35:51,660 --> 00:35:53,280
to extract some intellectual property

657
00:35:53,280 --> 00:35:55,680
for example yeah this is an improved

658
00:35:55,680 --> 00:35:57,240
algorithm or a

659
00:35:57,240 --> 00:36:00,780
um this machine learning model I can try

660
00:36:00,780 --> 00:36:02,700
to extract sensitive data that is

661
00:36:02,700 --> 00:36:05,099
hardwired or the cheaper or maybe some

662
00:36:05,099 --> 00:36:06,720
secret keys that are also hardwired in

663
00:36:06,720 --> 00:36:08,460
this chip

664
00:36:08,460 --> 00:36:11,220
um all right so the idea behind logic

665
00:36:11,220 --> 00:36:13,619
login is to modify

666
00:36:13,619 --> 00:36:16,020
um this interaction basically with a

667
00:36:16,020 --> 00:36:19,619
with a Fab so now the the designer

668
00:36:19,619 --> 00:36:22,020
first lock system with a with some

669
00:36:22,020 --> 00:36:23,940
secret key and then says this locked

670
00:36:23,940 --> 00:36:25,740
version uh to the Fab

671
00:36:25,740 --> 00:36:27,839
and now the file prints this locked

672
00:36:27,839 --> 00:36:29,700
version of the Chip and sends it back to

673
00:36:29,700 --> 00:36:32,880
the uh to the designer and now the the

674
00:36:32,880 --> 00:36:35,700
chip is only useful as as long as we

675
00:36:35,700 --> 00:36:38,520
provide the correct key to it

676
00:36:38,520 --> 00:36:41,280
um all right so yeah this is the basic

677
00:36:41,280 --> 00:36:44,460
idea of a logic locking uh however in

678
00:36:44,460 --> 00:36:47,540
the past there have been a lot of um

679
00:36:47,540 --> 00:36:50,460
pitfalls and cryptography misuse

680
00:36:50,460 --> 00:36:53,339
so for one there was a there has been a

681
00:36:53,339 --> 00:36:55,380
lack of a formal threat model I for

682
00:36:55,380 --> 00:36:56,520
example

683
00:36:56,520 --> 00:36:59,640
um the there has been only uh there were

684
00:36:59,640 --> 00:37:00,540
only

685
00:37:00,540 --> 00:37:03,119
um a limited set of um of attacks that

686
00:37:03,119 --> 00:37:04,680
were considered for example only set

687
00:37:04,680 --> 00:37:08,339
attacks in general they were um implicit

688
00:37:08,339 --> 00:37:09,900
or informal assumptions about the set

689
00:37:09,900 --> 00:37:11,220
model

690
00:37:11,220 --> 00:37:13,200
um there was also a lack of rigorous

691
00:37:13,200 --> 00:37:15,240
security definitions uh in the sense

692
00:37:15,240 --> 00:37:16,740
that we didn't

693
00:37:16,740 --> 00:37:20,160
um yeah it wasn't precise uh what the

694
00:37:20,160 --> 00:37:22,980
adversary task is is it true to uh to

695
00:37:22,980 --> 00:37:25,260
recover the original circuit uh is it to

696
00:37:25,260 --> 00:37:27,060
recover a predicate of the circuit is it

697
00:37:27,060 --> 00:37:29,339
to recover the uh the key that we used

698
00:37:29,339 --> 00:37:32,040
to lock the circuit I am what are the

699
00:37:32,040 --> 00:37:34,560
adversaries resources also I'm is it the

700
00:37:34,560 --> 00:37:36,599
description of the chip does the

701
00:37:36,599 --> 00:37:38,640
advisory have black box access to the

702
00:37:38,640 --> 00:37:41,220
chip and things like this and also

703
00:37:41,220 --> 00:37:43,619
what's the the the the power of the

704
00:37:43,619 --> 00:37:46,320
advisor in terms of time and space

705
00:37:46,320 --> 00:37:49,740
um and the uh it was also confused um in

706
00:37:49,740 --> 00:37:53,040
some cases with a software application

707
00:37:53,040 --> 00:37:55,260
all right so what do we do in um in this

708
00:37:55,260 --> 00:37:57,960
paper uh basically we try to formalize a

709
00:37:57,960 --> 00:38:01,560
logic logic and at its core we say that

710
00:38:01,560 --> 00:38:03,900
logic locking is a procedure or a

711
00:38:03,900 --> 00:38:06,720
randomized algorithm that takes an input

712
00:38:06,720 --> 00:38:10,260
takes an input as input a second C and

713
00:38:10,260 --> 00:38:13,260
what it output it's it that was is a log

714
00:38:13,260 --> 00:38:16,440
circuit L together with a key

715
00:38:16,440 --> 00:38:19,320
and correctness says that the if we

716
00:38:19,320 --> 00:38:21,020
evaluate l

717
00:38:21,020 --> 00:38:24,540
on any on an input using the correct the

718
00:38:24,540 --> 00:38:26,760
correct key then the output is what we

719
00:38:26,760 --> 00:38:30,660
would get if we evaluate it C right so L

720
00:38:30,660 --> 00:38:33,660
and C are functional equivalent uh as as

721
00:38:33,660 --> 00:38:35,940
long as we give the correct key to the

722
00:38:35,940 --> 00:38:39,000
um to the left circuit

723
00:38:39,000 --> 00:38:41,520
all right so this is the this is the

724
00:38:41,520 --> 00:38:42,660
correctness

725
00:38:42,660 --> 00:38:45,960
um but how about security right so as we

726
00:38:45,960 --> 00:38:48,240
said there have been um there have been

727
00:38:48,240 --> 00:38:50,880
uh in the past there were only specific

728
00:38:50,880 --> 00:38:52,680
classes of attacks that were considered

729
00:38:52,680 --> 00:38:54,420
for example

730
00:38:54,420 --> 00:38:56,880
um only sat attacks uh or structural

731
00:38:56,880 --> 00:38:59,220
attacks or removal attacks from the

732
00:38:59,220 --> 00:39:01,980
circuit but in practice advisories can

733
00:39:01,980 --> 00:39:04,859
can do much more than just sat attacks

734
00:39:04,859 --> 00:39:07,680
right and so we'd like to follow a more

735
00:39:07,680 --> 00:39:10,500
cryptographic approach to this where we

736
00:39:10,500 --> 00:39:13,980
we basically are become very rigorous

737
00:39:13,980 --> 00:39:16,079
about the types of adversaries and the

738
00:39:16,079 --> 00:39:18,900
class of adversaries that we consider

739
00:39:18,900 --> 00:39:21,619
and also in the past um

740
00:39:21,619 --> 00:39:24,780
it it was a it was at times not clear

741
00:39:24,780 --> 00:39:29,160
what a a what the advisory has access to

742
00:39:29,160 --> 00:39:31,380
um or what else what are the adversaries

743
00:39:31,380 --> 00:39:33,780
objectives

744
00:39:33,780 --> 00:39:34,560
um

745
00:39:34,560 --> 00:39:35,880
for example

746
00:39:35,880 --> 00:39:38,220
um is a the object the adversary is

747
00:39:38,220 --> 00:39:40,500
objective to to recover the whole

748
00:39:40,500 --> 00:39:42,780
circuit or an important part of the

749
00:39:42,780 --> 00:39:44,880
circuit or yeah some predicate of the

750
00:39:44,880 --> 00:39:47,220
circuit

751
00:39:47,220 --> 00:39:48,780
all right so the first definition of

752
00:39:48,780 --> 00:39:50,820
security that we give is a an

753
00:39:50,820 --> 00:39:52,200
indistinguishability based definition

754
00:39:52,200 --> 00:39:55,200
and it goes at as follows so we have the

755
00:39:55,200 --> 00:39:57,359
adversary and the Challenger which is a

756
00:39:57,359 --> 00:40:01,680
kind of um a very common approach to

757
00:40:01,680 --> 00:40:05,880
approach Security in cryptography and so

758
00:40:05,880 --> 00:40:08,220
and so the adversary picks two circuits

759
00:40:08,220 --> 00:40:10,260
of its Choice as easy and C1 and sends

760
00:40:10,260 --> 00:40:12,119
them to the Challenger and now the

761
00:40:12,119 --> 00:40:14,940
Challenger locks a one of the two at

762
00:40:14,940 --> 00:40:16,980
random and sends back the locks the lock

763
00:40:16,980 --> 00:40:18,839
set it back to the adversary another

764
00:40:18,839 --> 00:40:20,760
side is goal is simply to guess which of

765
00:40:20,760 --> 00:40:22,020
the two circuits

766
00:40:22,020 --> 00:40:25,500
uh the challenge are locked and and we

767
00:40:25,500 --> 00:40:27,839
say that the adversary wins if it

768
00:40:27,839 --> 00:40:30,300
manages to guess uh the the circuit that

769
00:40:30,300 --> 00:40:32,760
the Challenger picked right and then

770
00:40:32,760 --> 00:40:34,740
logic logging we say that logic logging

771
00:40:34,740 --> 00:40:37,740
is indelible secure if all adversaries

772
00:40:37,740 --> 00:40:39,359
win with probability

773
00:40:39,359 --> 00:40:42,000
um at most one half plus something plus

774
00:40:42,000 --> 00:40:45,060
something negligible

775
00:40:45,060 --> 00:40:46,500
all right

776
00:40:46,500 --> 00:40:48,359
um so yeah this you can see this

777
00:40:48,359 --> 00:40:50,220
resembles a lot in distinguishability

778
00:40:50,220 --> 00:40:53,040
also in in encryption

779
00:40:53,040 --> 00:40:55,140
okay so what have we managed to do until

780
00:40:55,140 --> 00:40:57,359
now right so first we do not constrain

781
00:40:57,359 --> 00:40:59,280
the adversary to any specific attack

782
00:40:59,280 --> 00:41:00,720
right

783
00:41:00,720 --> 00:41:02,579
um second we consider a very particular

784
00:41:02,579 --> 00:41:04,800
a particularly strong setting if the

785
00:41:04,800 --> 00:41:07,020
adversary knows basically the adversary

786
00:41:07,020 --> 00:41:08,700
knows everything about the two circuits

787
00:41:08,700 --> 00:41:11,640
right because it shows them but still it

788
00:41:11,640 --> 00:41:13,800
kind of figure out which which of the

789
00:41:13,800 --> 00:41:15,960
two circuits we locked

790
00:41:15,960 --> 00:41:18,599
it also captures a lot of other uh

791
00:41:18,599 --> 00:41:21,660
concrete security goals right because

792
00:41:21,660 --> 00:41:24,000
um it we can show the different an

793
00:41:24,000 --> 00:41:25,740
adversary cannot distinguish it can also

794
00:41:25,740 --> 00:41:28,619
not use a SAT attack to recover the key

795
00:41:28,619 --> 00:41:30,599
for example or it cannot recover the

796
00:41:30,599 --> 00:41:33,599
whole circuit or a part of the circuit

797
00:41:33,599 --> 00:41:36,119
um and and I won't touch this this topic

798
00:41:36,119 --> 00:41:37,680
but it can also be extended to security

799
00:41:37,680 --> 00:41:42,379
with leakage or side Channel attacks

800
00:41:42,599 --> 00:41:44,640
all right so

801
00:41:44,640 --> 00:41:46,800
um this is indistinguishability base

802
00:41:46,800 --> 00:41:48,780
definitions are nice and they are easy

803
00:41:48,780 --> 00:41:51,540
to to work with but

804
00:41:51,540 --> 00:41:54,780
um they're not as intuitive right so

805
00:41:54,780 --> 00:41:56,880
what we would like to do is to try to

806
00:41:56,880 --> 00:41:58,680
give a more intuitive definition using

807
00:41:58,680 --> 00:42:00,000
simulators

808
00:42:00,000 --> 00:42:03,000
and the idea is to basically imagine an

809
00:42:03,000 --> 00:42:05,400
entity that we usually call a simulator

810
00:42:05,400 --> 00:42:07,800
that does not have access at all to the

811
00:42:07,800 --> 00:42:10,140
locked circuit l

812
00:42:10,140 --> 00:42:12,000
and now if you can show that

813
00:42:12,000 --> 00:42:14,880
um an adversary with access to the log

814
00:42:14,880 --> 00:42:16,800
circuit cannot learn any more

815
00:42:16,800 --> 00:42:19,560
information than the simulator who does

816
00:42:19,560 --> 00:42:21,540
not have access to the to the log

817
00:42:21,540 --> 00:42:24,420
circuit then the scheme is secure right

818
00:42:24,420 --> 00:42:27,359
because because the simulator

819
00:42:27,359 --> 00:42:29,280
um basically does not even have access

820
00:42:29,280 --> 00:42:31,619
to the lock set so it cannot get any

821
00:42:31,619 --> 00:42:34,020
information out of it

822
00:42:34,020 --> 00:42:37,020
all right so how would we formalize a

823
00:42:37,020 --> 00:42:38,520
simulation security

824
00:42:38,520 --> 00:42:40,859
so we have the adversary on the left

825
00:42:40,859 --> 00:42:43,800
that takes as input l

826
00:42:43,800 --> 00:42:46,980
as well as Oracle access to the to the

827
00:42:46,980 --> 00:42:48,839
original circuit see

828
00:42:48,839 --> 00:42:52,140
and at the end it outputs a bit B

829
00:42:52,140 --> 00:42:55,500
and this B can be this bit can be some

830
00:42:55,500 --> 00:42:57,180
predicate of the of the circuit for

831
00:42:57,180 --> 00:42:59,400
example whether the first date of the

832
00:42:59,400 --> 00:43:01,800
circuit is an end gate or or it is not

833
00:43:01,800 --> 00:43:02,940
an end date

834
00:43:02,940 --> 00:43:04,920
and now the simulator

835
00:43:04,920 --> 00:43:07,619
and on the right takes no input at all

836
00:43:07,619 --> 00:43:10,020
right so it doesn't take l

837
00:43:10,020 --> 00:43:12,359
and it's given again access Oracle

838
00:43:12,359 --> 00:43:14,520
access to the circuit and it is allowed

839
00:43:14,520 --> 00:43:16,500
also to have black box Black Box access

840
00:43:16,500 --> 00:43:18,780
to the adversary right so it can come up

841
00:43:18,780 --> 00:43:20,780
with some uh

842
00:43:20,780 --> 00:43:23,640
circuit L of its choice and give it to

843
00:43:23,640 --> 00:43:25,140
the adversary and then it can also

844
00:43:25,140 --> 00:43:26,579
receive queries from the other side and

845
00:43:26,579 --> 00:43:28,280
you get give back

846
00:43:28,280 --> 00:43:31,260
answers to the adversary

847
00:43:31,260 --> 00:43:34,619
all right and we say that the the scheme

848
00:43:34,619 --> 00:43:37,380
is similar secure if basically B and B

849
00:43:37,380 --> 00:43:41,780
Prime have almost the same distributions

850
00:43:43,619 --> 00:43:45,300
okay and now I would like to show you

851
00:43:45,300 --> 00:43:47,640
some implications between these uh these

852
00:43:47,640 --> 00:43:50,160
definitions so the first one is that

853
00:43:50,160 --> 00:43:53,400
Intel implies similarly

854
00:43:53,400 --> 00:43:55,980
and the proof sketch goes as follows

855
00:43:55,980 --> 00:43:58,500
basically we want to define a simulator

856
00:43:58,500 --> 00:43:59,579
that

857
00:43:59,579 --> 00:44:01,920
kind of simulates the adversary right

858
00:44:01,920 --> 00:44:04,319
so the way it works is basically by

859
00:44:04,319 --> 00:44:06,780
first picking a random an arbitrary

860
00:44:06,780 --> 00:44:08,579
circuit C Prime

861
00:44:08,579 --> 00:44:11,700
and locking this C Prime so it gets an L

862
00:44:11,700 --> 00:44:12,839
Prime back

863
00:44:12,839 --> 00:44:14,760
and then it initializes the adversary

864
00:44:14,760 --> 00:44:16,500
with this L Prime

865
00:44:16,500 --> 00:44:18,900
and now the adversary whenever the

866
00:44:18,900 --> 00:44:21,960
adversary queries makes a query then the

867
00:44:21,960 --> 00:44:23,880
simulator takes this query and forwards

868
00:44:23,880 --> 00:44:27,119
it to its own Oracle and yet gives back

869
00:44:27,119 --> 00:44:28,920
to the adversary the result of the

870
00:44:28,920 --> 00:44:31,020
oracle

871
00:44:31,020 --> 00:44:33,660
all right and we can basically see kind

872
00:44:33,660 --> 00:44:35,520
of intuitively that

873
00:44:35,520 --> 00:44:38,760
um this this simulator is is working uh

874
00:44:38,760 --> 00:44:42,000
well why because L

875
00:44:42,000 --> 00:44:44,280
um lnn Prime are indistinguishable from

876
00:44:44,280 --> 00:44:45,660
the point of view of the adversary right

877
00:44:45,660 --> 00:44:47,460
so the adversary behaves

878
00:44:47,460 --> 00:44:50,220
uh the same way no matter whether it's

879
00:44:50,220 --> 00:44:53,480
given l or l Prime

880
00:44:53,940 --> 00:44:56,460
uh the second the second proof that I

881
00:44:56,460 --> 00:44:57,839
would like the second theorem that I

882
00:44:57,839 --> 00:44:59,640
would like to show you is that the cmll

883
00:44:59,640 --> 00:45:01,680
does not imply in the L

884
00:45:01,680 --> 00:45:04,619
another proof goes as follows we would

885
00:45:04,619 --> 00:45:07,560
like to uh to take a scheme that is

886
00:45:07,560 --> 00:45:09,000
similar

887
00:45:09,000 --> 00:45:11,579
and transforming it into another scheme

888
00:45:11,579 --> 00:45:13,740
that is that remains similar but is not

889
00:45:13,740 --> 00:45:14,760
in the level

890
00:45:14,760 --> 00:45:17,819
anymore all right and how do we do this

891
00:45:17,819 --> 00:45:20,520
so basically I will create this log

892
00:45:20,520 --> 00:45:22,319
Prime

893
00:45:22,319 --> 00:45:24,720
that what it does is it first

894
00:45:24,720 --> 00:45:27,540
locks the circuit using lock

895
00:45:27,540 --> 00:45:29,819
and then it attaches to this lock

896
00:45:29,819 --> 00:45:31,140
circuit

897
00:45:31,140 --> 00:45:33,900
um say the the value of the circuit

898
00:45:33,900 --> 00:45:36,720
evaluated on on a fixed value let's say

899
00:45:36,720 --> 00:45:37,920
zero

900
00:45:37,920 --> 00:45:42,140
and now this is the new circuit L Prime

901
00:45:42,180 --> 00:45:43,859
um and this is yeah this is basically

902
00:45:43,859 --> 00:45:46,319
the locked the load circuit and

903
00:45:46,319 --> 00:45:49,740
we can show that these two claims hold

904
00:45:49,740 --> 00:45:52,859
so the first claim is that log Prime

905
00:45:52,859 --> 00:45:56,099
remains similar and the idea here is

906
00:45:56,099 --> 00:45:59,040
that see even even though the simulator

907
00:45:59,040 --> 00:46:01,260
is not given L Prime right so it doesn't

908
00:46:01,260 --> 00:46:04,319
really know c0 C of zero it does have

909
00:46:04,319 --> 00:46:08,579
Oracle access to C so it can retrieve c0

910
00:46:08,579 --> 00:46:10,680
um by itself

911
00:46:10,680 --> 00:46:12,720
on the other hand

912
00:46:12,720 --> 00:46:15,720
um log Prime is not in the level anymore

913
00:46:15,720 --> 00:46:18,119
and the reason is that now an adversary

914
00:46:18,119 --> 00:46:19,680
that plays the indistinguishability game

915
00:46:19,680 --> 00:46:22,680
can pick two circuits c0 and C1 that

916
00:46:22,680 --> 00:46:25,140
differ on zero

917
00:46:25,140 --> 00:46:28,200
and so by getting back L prime it can

918
00:46:28,200 --> 00:46:30,420
easily tell which of the two circuits we

919
00:46:30,420 --> 00:46:33,020
we locked

920
00:46:33,180 --> 00:46:34,619
now

921
00:46:34,619 --> 00:46:36,540
um yeah I another definition that I'd

922
00:46:36,540 --> 00:46:39,180
like to show you uh is uh is that of

923
00:46:39,180 --> 00:46:40,619
functional secrecy that has been

924
00:46:40,619 --> 00:46:43,680
implicit among several previous works

925
00:46:43,680 --> 00:46:46,319
and this definition is very similar to

926
00:46:46,319 --> 00:46:48,119
simulation based definition that we saw

927
00:46:48,119 --> 00:46:49,740
we showed earlier

928
00:46:49,740 --> 00:46:51,359
uh with the difference that the

929
00:46:51,359 --> 00:46:53,099
adversary now has to guess the whole

930
00:46:53,099 --> 00:46:55,140
circuit

931
00:46:55,140 --> 00:46:57,660
uh and the simulator has to get this

932
00:46:57,660 --> 00:46:59,040
whole circuit as well right so the

933
00:46:59,040 --> 00:47:02,460
advisory output circuits uh C adversary

934
00:47:02,460 --> 00:47:04,800
and the simulator outputs a second C

935
00:47:04,800 --> 00:47:06,180
simulator

936
00:47:06,180 --> 00:47:08,400
and it will say that the logic login

937
00:47:08,400 --> 00:47:10,859
scheme is a f a secure

938
00:47:10,859 --> 00:47:13,200
if the probability that the advancer is

939
00:47:13,200 --> 00:47:15,780
guessing correctly guesses correctly is

940
00:47:15,780 --> 00:47:17,400
is almost the same as the probability

941
00:47:17,400 --> 00:47:19,740
that the simulator guesses correctly

942
00:47:19,740 --> 00:47:21,480
um the second

943
00:47:21,480 --> 00:47:23,640
and we can show that the cmll actually

944
00:47:23,640 --> 00:47:27,500
implies a functional secrecy

945
00:47:27,900 --> 00:47:30,060
another definition that was proposed

946
00:47:30,060 --> 00:47:32,960
last year by Chota and symptoms

947
00:47:32,960 --> 00:47:36,119
basically considers a logic logging only

948
00:47:36,119 --> 00:47:38,640
for unlearnable circuits so what are

949
00:47:38,640 --> 00:47:41,280
unleadable circuits basically they are

950
00:47:41,280 --> 00:47:43,800
it's it's a class of circuits

951
00:47:43,800 --> 00:47:46,380
where if we pick a random circuit from

952
00:47:46,380 --> 00:47:48,540
this class and we give Oracle access to

953
00:47:48,540 --> 00:47:51,540
the adversary to that circuit then the

954
00:47:51,540 --> 00:47:53,520
adversary cannot really guess which

955
00:47:53,520 --> 00:47:54,900
circuit we picked out of this class

956
00:47:54,900 --> 00:47:57,720
right so we say that this class A

957
00:47:57,720 --> 00:47:59,640
calligraphics

958
00:47:59,640 --> 00:48:02,520
is unlearnable if the the best adversary

959
00:48:02,520 --> 00:48:05,339
can can guess the circuit with

960
00:48:05,339 --> 00:48:07,560
probability almost one over the size of

961
00:48:07,560 --> 00:48:09,119
C right

962
00:48:09,119 --> 00:48:12,060
um because we can always guess we can

963
00:48:12,060 --> 00:48:14,099
always make a random guess and get a

964
00:48:14,099 --> 00:48:17,220
winning probability of one over C on one

965
00:48:17,220 --> 00:48:19,680
of the over the size of C

966
00:48:19,680 --> 00:48:21,680
you can think of unleadable functions as

967
00:48:21,680 --> 00:48:24,420
for example Point functions

968
00:48:24,420 --> 00:48:26,640
this is a class of honorable unnerable

969
00:48:26,640 --> 00:48:29,640
functions

970
00:48:29,700 --> 00:48:32,520
and Now function recovery is defined

971
00:48:32,520 --> 00:48:35,220
basically by having the Challenger also

972
00:48:35,220 --> 00:48:38,640
sent the locked version of this random

973
00:48:38,640 --> 00:48:41,339
circuit picked from the from the class

974
00:48:41,339 --> 00:48:43,319
right so the adversary task in the same

975
00:48:43,319 --> 00:48:44,339
again

976
00:48:44,339 --> 00:48:47,040
to guess to guess the the circuit that

977
00:48:47,040 --> 00:48:50,460
we we picked but it's also given now the

978
00:48:50,460 --> 00:48:53,760
locked a second

979
00:48:53,760 --> 00:48:56,760
all right and now we can show that a

980
00:48:56,760 --> 00:48:58,680
functional secrecy implies functional

981
00:48:58,680 --> 00:49:01,140
recovery so remind you that functional

982
00:49:01,140 --> 00:49:02,579
sequence is a simulation based

983
00:49:02,579 --> 00:49:05,339
definition where the adversary and the

984
00:49:05,339 --> 00:49:08,819
simulator output their guesses of of the

985
00:49:08,819 --> 00:49:10,740
of the circuit

986
00:49:10,740 --> 00:49:14,720
and how does the proof go basically a

987
00:49:14,720 --> 00:49:18,480
suppose we have an adversary against fr

988
00:49:18,480 --> 00:49:20,460
then this adversary

989
00:49:20,460 --> 00:49:22,500
is also an adversary against a

990
00:49:22,500 --> 00:49:24,300
functional secrecy and We Know by

991
00:49:24,300 --> 00:49:25,680
functional secrecy that there is a

992
00:49:25,680 --> 00:49:26,760
simulator

993
00:49:26,760 --> 00:49:29,300
that can guess the circuit even without

994
00:49:29,300 --> 00:49:31,920
given given l

995
00:49:31,920 --> 00:49:33,720
right but this simulator is actually a

996
00:49:33,720 --> 00:49:37,020
learner for this for this class

997
00:49:37,020 --> 00:49:39,359
so we end up so we basically proved by

998
00:49:39,359 --> 00:49:41,160
contradiction that

999
00:49:41,160 --> 00:49:42,000
um

1000
00:49:42,000 --> 00:49:44,099
yeah we basically this basically implies

1001
00:49:44,099 --> 00:49:46,560
that C Is learnable Right which uh which

1002
00:49:46,560 --> 00:49:49,859
bring bring us as to contradiction

1003
00:49:49,859 --> 00:49:52,440
and we show more relations

1004
00:49:52,440 --> 00:49:55,380
um between um yeah we Define some more

1005
00:49:55,380 --> 00:49:57,420
definitions and then we saw some more

1006
00:49:57,420 --> 00:50:00,420
relations between these definitions hey

1007
00:50:00,420 --> 00:50:01,920
one last thing I would like to show you

1008
00:50:01,920 --> 00:50:05,040
is um is how to build

1009
00:50:05,040 --> 00:50:07,680
a logic login secure logic locking using

1010
00:50:07,680 --> 00:50:09,240
Universal circuits

1011
00:50:09,240 --> 00:50:11,640
and I remind you that Universal circuits

1012
00:50:11,640 --> 00:50:13,920
are circuits that can basically evaluate

1013
00:50:13,920 --> 00:50:16,140
any other circuits any other Circuit of

1014
00:50:16,140 --> 00:50:17,160
size n

1015
00:50:17,160 --> 00:50:21,540
so if you if if we give a circuit C

1016
00:50:21,540 --> 00:50:24,060
together with an input X to a universal

1017
00:50:24,060 --> 00:50:28,640
circuit then this evaluates to C of x

1018
00:50:28,740 --> 00:50:31,319
all right and how do we build the indole

1019
00:50:31,319 --> 00:50:34,619
security using Universal circuits well

1020
00:50:34,619 --> 00:50:36,720
the the construction is straightforward

1021
00:50:36,720 --> 00:50:39,660
so we set L to be the universal circuit

1022
00:50:39,660 --> 00:50:43,319
and we set K to be uh the second we want

1023
00:50:43,319 --> 00:50:44,520
to lock

1024
00:50:44,520 --> 00:50:46,440
right and now it's easy to show

1025
00:50:46,440 --> 00:50:49,200
correctness and in fact we even get

1026
00:50:49,200 --> 00:50:50,359
perfect

1027
00:50:50,359 --> 00:50:53,460
perfectly distinguishability right why

1028
00:50:53,460 --> 00:50:57,240
because uh no matter whether we log c0

1029
00:50:57,240 --> 00:50:58,619
or C1

1030
00:50:58,619 --> 00:51:01,260
right we always get the same L the

1031
00:51:01,260 --> 00:51:02,780
universal circuit

1032
00:51:02,780 --> 00:51:05,280
and so there is no way

1033
00:51:05,280 --> 00:51:06,720
to tell

1034
00:51:06,720 --> 00:51:08,520
by looking at the University second

1035
00:51:08,520 --> 00:51:09,839
there is no way to tell which of the two

1036
00:51:09,839 --> 00:51:13,460
circuits we locked

1037
00:51:13,859 --> 00:51:16,440
um all right so

1038
00:51:16,440 --> 00:51:19,980
so uh some open problems and this is my

1039
00:51:19,980 --> 00:51:21,119
last slide

1040
00:51:21,119 --> 00:51:25,559
yeah so we can use Universal circuits to

1041
00:51:25,559 --> 00:51:28,020
get perfect security right so a

1042
00:51:28,020 --> 00:51:29,819
reasonable question is can we trade

1043
00:51:29,819 --> 00:51:31,500
perfect security

1044
00:51:31,500 --> 00:51:33,240
for more efficient constructions because

1045
00:51:33,240 --> 00:51:36,000
Universal circuits have size at least n

1046
00:51:36,000 --> 00:51:39,119
log n for a foreign if we want to

1047
00:51:39,119 --> 00:51:41,760
evaluate circuits of size n

1048
00:51:41,760 --> 00:51:43,800
a universal circuit has to have size at

1049
00:51:43,800 --> 00:51:45,180
least then login

1050
00:51:45,180 --> 00:51:47,700
so the idea would be to have a pseudo

1051
00:51:47,700 --> 00:51:49,500
universal circuit that can evaluate only

1052
00:51:49,500 --> 00:51:51,599
a small a small number of circuits but

1053
00:51:51,599 --> 00:51:53,339
still the adversary cannot tell

1054
00:51:53,339 --> 00:51:57,980
with seconds it it can evaluate

1055
00:51:58,319 --> 00:52:00,720
um and the current work focuses only on

1056
00:52:00,720 --> 00:52:02,760
computation uh combinational circuits

1057
00:52:02,760 --> 00:52:05,220
and some interesting next steps is to

1058
00:52:05,220 --> 00:52:08,700
develop definitions for latch logging as

1059
00:52:08,700 --> 00:52:10,920
well as a definitions for sequential

1060
00:52:10,920 --> 00:52:13,339
circuits

1061
00:52:14,339 --> 00:52:17,339
uh yeah and this uh basically concludes

1062
00:52:17,339 --> 00:52:19,759
my talk

1063
00:52:25,700 --> 00:52:28,140
okay thank you for the talk any

1064
00:52:28,140 --> 00:52:31,740
questions from the audience I go here we

1065
00:52:31,740 --> 00:52:34,220
have a question

1066
00:52:34,380 --> 00:52:38,400
well yes do you hear us yes

1067
00:52:38,400 --> 00:52:40,619
okay thank you for the presentation uh I

1068
00:52:40,619 --> 00:52:42,180
can see your threat model I mean it's

1069
00:52:42,180 --> 00:52:45,660
still generic uh and the question that I

1070
00:52:45,660 --> 00:52:47,160
have that you presented a proof of

1071
00:52:47,160 --> 00:52:50,640
concept for the logic locking but I

1072
00:52:50,640 --> 00:52:53,579
could not see the security analysis uh I

1073
00:52:53,579 --> 00:52:55,680
mean how you can prove that this is I

1074
00:52:55,680 --> 00:52:59,000
mean uh it's a like a resistance to the

1075
00:52:59,000 --> 00:53:01,579
uh already state-of-the-art

1076
00:53:01,579 --> 00:53:05,180
state-of-the-art attacks

1077
00:53:05,400 --> 00:53:08,640
uh right so the

1078
00:53:08,640 --> 00:53:11,579
um the proof is a is basically from a

1079
00:53:11,579 --> 00:53:14,940
cryptographic point of view so

1080
00:53:14,940 --> 00:53:17,640
um basically the universal circuit

1081
00:53:17,640 --> 00:53:19,579
doesn't doesn't have any information

1082
00:53:19,579 --> 00:53:22,380
related to the Circuit we want to

1083
00:53:22,380 --> 00:53:24,599
evaluate right so the universal circuit

1084
00:53:24,599 --> 00:53:27,300
you can evaluate any other Circuit of a

1085
00:53:27,300 --> 00:53:29,640
specific size

1086
00:53:29,640 --> 00:53:31,079
um and so

1087
00:53:31,079 --> 00:53:34,140
and so by by picking by picking the

1088
00:53:34,140 --> 00:53:35,880
universal circuit kind of independently

1089
00:53:35,880 --> 00:53:38,400
of the circuit we want to evaluate we

1090
00:53:38,400 --> 00:53:39,540
are sure

1091
00:53:39,540 --> 00:53:42,780
uh that um we get security

1092
00:53:42,780 --> 00:53:44,520
um not sure if

1093
00:53:44,520 --> 00:53:46,800
this and this is

1094
00:53:46,800 --> 00:53:49,440
this answer your question

1095
00:53:49,440 --> 00:53:51,780
um I just want to add one remark because

1096
00:53:51,780 --> 00:53:54,059
the SAT attacks are too powerful attack

1097
00:53:54,059 --> 00:53:56,460
and I mean we have to Define very

1098
00:53:56,460 --> 00:53:58,079
carefully the threat model there are

1099
00:53:58,079 --> 00:54:00,720
oracles and oracle-based technique and

1100
00:54:00,720 --> 00:54:03,119
they can break I mean it's very smart

1101
00:54:03,119 --> 00:54:06,900
attack so for to prove the our idea it's

1102
00:54:06,900 --> 00:54:10,440
very important that we have to provide

1103
00:54:10,440 --> 00:54:12,359
the security analysis otherwise I mean

1104
00:54:12,359 --> 00:54:15,980
it's hard to convince someone

1105
00:54:15,980 --> 00:54:19,339
right right

1106
00:54:21,359 --> 00:54:23,400
okay thank you we have it and now we

1107
00:54:23,400 --> 00:54:24,660
have another question for the second

1108
00:54:24,660 --> 00:54:27,319
Mario's

1109
00:54:27,540 --> 00:54:29,579
yeah actually I don't have any question

1110
00:54:29,579 --> 00:54:31,980
I just wanted to answer

1111
00:54:31,980 --> 00:54:34,380
um your question related to this the

1112
00:54:34,380 --> 00:54:36,839
point is that universal circuit does not

1113
00:54:36,839 --> 00:54:39,839
leak any information possible about the

1114
00:54:39,839 --> 00:54:42,559
circuit therefore smt and sat at X or

1115
00:54:42,559 --> 00:54:45,960
infeasible it is cryptographically

1116
00:54:45,960 --> 00:54:49,880
prove that it is impossible

1117
00:54:50,099 --> 00:54:52,079
okay thank you any other yeah there is

1118
00:54:52,079 --> 00:54:54,559
another question

1119
00:54:54,900 --> 00:54:58,700
yeah after lunch I have to run you know

1120
00:55:00,119 --> 00:55:02,040
just trying to imagine it practically

1121
00:55:02,040 --> 00:55:03,359
what would be the difference between

1122
00:55:03,359 --> 00:55:07,098
your universal circuit and an fpga

1123
00:55:07,619 --> 00:55:09,420
um right so

1124
00:55:09,420 --> 00:55:10,920
um

1125
00:55:10,920 --> 00:55:13,859
right so we we believe that fpga is

1126
00:55:13,859 --> 00:55:16,500
basically uh implementing practice this

1127
00:55:16,500 --> 00:55:20,040
idea of a universal circuits and in fact

1128
00:55:20,040 --> 00:55:24,180
um we say this work by a recent work by

1129
00:55:24,180 --> 00:55:30,140
macero vital maserova guard my legs

1130
00:55:30,319 --> 00:55:33,200
that I cite in the bottom of the slide

1131
00:55:33,200 --> 00:55:35,359
uh in fact

1132
00:55:35,359 --> 00:55:37,319
implements the idea of universal

1133
00:55:37,319 --> 00:55:41,300
circuits on an fpga

1134
00:55:42,420 --> 00:55:45,420
okay thank you um just have a we'll have

1135
00:55:45,420 --> 00:55:46,800
a look whether we have any questions

1136
00:55:46,800 --> 00:55:49,619
from online audience

1137
00:55:49,619 --> 00:55:51,540
um I have at least seen some messages in

1138
00:55:51,540 --> 00:55:52,559
the chat

1139
00:55:52,559 --> 00:55:53,940
um

1140
00:55:53,940 --> 00:55:57,180
but here not right okay no because there

1141
00:55:57,180 --> 00:56:00,059
is chat message okay thank you so much

1142
00:56:00,059 --> 00:56:03,859
let's um thank Marios again

1143
00:56:09,240 --> 00:56:12,240
Microsoft

1144
00:56:13,200 --> 00:56:16,520
um that was too loud

1145
00:56:16,680 --> 00:56:21,299
oh that first video okay okay uh

1146
00:56:23,280 --> 00:56:27,359
Marco you are online right yes I'm here

1147
00:56:27,359 --> 00:56:28,680
okay

1148
00:56:28,680 --> 00:56:30,839
thanks for your availability we will

1149
00:56:30,839 --> 00:56:34,140
play your video now and then um you are

1150
00:56:34,140 --> 00:56:35,880
available for questions

1151
00:56:35,880 --> 00:56:39,960
yes thank you we will start not too loud

1152
00:56:39,960 --> 00:56:42,380
hopefully

1153
00:56:42,380 --> 00:56:44,819
and the good thing is you can see the

1154
00:56:44,819 --> 00:56:47,480
Mario's face

1155
00:56:54,859 --> 00:56:57,780
this is a joint work with my PhD advisor

1156
00:56:57,780 --> 00:56:59,940
Daniel Antonio from eurocom a Leonardo

1157
00:56:59,940 --> 00:57:01,380
zuk and Mauro Conti from the University

1158
00:57:01,380 --> 00:57:03,359
of Padova and Matthias speaker from the

1159
00:57:03,359 --> 00:57:05,640
apfl I will now present break me

1160
00:57:05,640 --> 00:57:07,380
reversing exploiting and fixing some

1161
00:57:07,380 --> 00:57:09,540
efficient and striking ecosystem we

1162
00:57:09,540 --> 00:57:10,980
studied the fitness tracking devices

1163
00:57:10,980 --> 00:57:12,780
such as wearable smart bands because

1164
00:57:12,780 --> 00:57:14,339
they are cheap multi-purpose and

1165
00:57:14,339 --> 00:57:16,559
increasingly popular smart bands have a

1166
00:57:16,559 --> 00:57:18,240
sensors that calculate steps calories

1167
00:57:18,240 --> 00:57:20,520
sleep and heart rate and protected

1168
00:57:20,520 --> 00:57:22,680
access to this sensitive Health Data

1169
00:57:22,680 --> 00:57:26,099
will be a critical privacy breach

1170
00:57:26,099 --> 00:57:28,260
bitterness trackers also provide many

1171
00:57:28,260 --> 00:57:30,180
more exploitable features the attacker

1172
00:57:30,180 --> 00:57:32,040
could upload a rogue firmware to the

1173
00:57:32,040 --> 00:57:33,720
over-the-air firmware update process

1174
00:57:33,720 --> 00:57:36,420
hijack NFC payments or unlock phones

1175
00:57:36,420 --> 00:57:38,640
using the tracker most fitness trackers

1176
00:57:38,640 --> 00:57:41,280
communicate over Bluetooth low energy in

1177
00:57:41,280 --> 00:57:43,980
short ble and can benefit from the

1178
00:57:43,980 --> 00:57:46,200
security mechanisms put in place by the

1179
00:57:46,200 --> 00:57:48,300
blue standard the duty of a correct

1180
00:57:48,300 --> 00:57:50,220
implementation falls on the developers

1181
00:57:50,220 --> 00:57:52,619
which often ignore or misuse and

1182
00:57:52,619 --> 00:57:55,859
mechanisms we wanted to understand how

1183
00:57:55,859 --> 00:57:57,900
secure Fitness tracking ecosystems

1184
00:57:57,900 --> 00:58:00,780
actually are we chose xiaomi as our

1185
00:58:00,780 --> 00:58:02,579
Target because it is a market leader

1186
00:58:02,579 --> 00:58:04,559
thanks to its Flagship product the Mi

1187
00:58:04,559 --> 00:58:07,920
band ours is the first research work to

1188
00:58:07,920 --> 00:58:09,540
assess the security and privacy of

1189
00:58:09,540 --> 00:58:11,819
xiaomi Fitness tracking ecosystem and

1190
00:58:11,819 --> 00:58:14,280
our findings are demoralizing

1191
00:58:14,280 --> 00:58:16,559
xiaomi designed custom proprietary

1192
00:58:16,559 --> 00:58:18,900
protocols on top of ble are implementing

1193
00:58:18,900 --> 00:58:21,119
ble pairing and session establishment in

1194
00:58:21,119 --> 00:58:23,640
their own unsecure way

1195
00:58:23,640 --> 00:58:25,980
in our work we reverse xiaomi's custom

1196
00:58:25,980 --> 00:58:28,920
protocols spoken over ble we discovered

1197
00:58:28,920 --> 00:58:30,780
that they disregard the belly Standard

1198
00:58:30,780 --> 00:58:33,059
Security mechanisms despite supporting

1199
00:58:33,059 --> 00:58:35,760
them then we identify severe and unknown

1200
00:58:35,760 --> 00:58:37,380
vulnerabilities in their custom

1201
00:58:37,380 --> 00:58:39,780
implementation such as unilateral and

1202
00:58:39,780 --> 00:58:42,000
repayable authentication we exploit

1203
00:58:42,000 --> 00:58:43,920
those vulnerabilities in six automated

1204
00:58:43,920 --> 00:58:45,960
and low cost attacks that result in

1205
00:58:45,960 --> 00:58:48,059
privacy breach and complete control over

1206
00:58:48,059 --> 00:58:50,940
the ble traffic the attacks affect all

1207
00:58:50,940 --> 00:58:54,480
trackers released between 2016 and 2021.

1208
00:58:54,480 --> 00:58:56,700
we open source blackmail an extensible

1209
00:58:56,700 --> 00:58:59,280
toolkit we fix xiaomi protocols using

1210
00:58:59,280 --> 00:59:01,140
state-of-the-art countermeasures such as

1211
00:59:01,140 --> 00:59:03,839
elliptical Defiance agreement and ble

1212
00:59:03,839 --> 00:59:06,059
link layer encryption and we disclose

1213
00:59:06,059 --> 00:59:08,640
our findings to xiaomi we also evaluate

1214
00:59:08,640 --> 00:59:10,440
the Fitbit ecosystem and the charge

1215
00:59:10,440 --> 00:59:13,200
shoot tracker you will find more details

1216
00:59:13,200 --> 00:59:14,819
on the counter measures and the Fitbit

1217
00:59:14,819 --> 00:59:17,040
ecosystem in our paper as I will skip

1218
00:59:17,040 --> 00:59:19,200
those topics because of time constraints

1219
00:59:19,200 --> 00:59:21,059
in the following slides I will

1220
00:59:21,059 --> 00:59:22,920
illustrate our system model and give a

1221
00:59:22,920 --> 00:59:25,260
broad overview of semi-protocols then I

1222
00:59:25,260 --> 00:59:26,520
will explain the attacks and the

1223
00:59:26,520 --> 00:59:28,619
vulnerabilities they exploit finally I

1224
00:59:28,619 --> 00:59:30,480
will conclude by describing our setup

1225
00:59:30,480 --> 00:59:33,299
and the evaluation results

1226
00:59:33,299 --> 00:59:35,520
fitness trackers such as the Mi band can

1227
00:59:35,520 --> 00:59:37,619
only communicate over Bluetooth energy a

1228
00:59:37,619 --> 00:59:39,480
wireless communication protocol used by

1229
00:59:39,480 --> 00:59:41,579
low power devices that follows a client

1230
00:59:41,579 --> 00:59:43,859
server architecture the mobile companion

1231
00:59:43,859 --> 00:59:46,079
app the client connects and communicates

1232
00:59:46,079 --> 00:59:48,780
with the fitness tracker the server our

1233
00:59:48,780 --> 00:59:51,000
system model includes three entities the

1234
00:59:51,000 --> 00:59:52,980
tracker the app and the back end

1235
00:59:52,980 --> 00:59:55,980
connected to the app over Wi-Fi

1236
00:59:55,980 --> 00:59:58,559
most traffic happens over ble so this

1237
00:59:58,559 --> 01:00:01,079
will be our main focus for many devices

1238
01:00:01,079 --> 01:00:03,780
the ble protocol stack is enough for

1239
01:00:03,780 --> 01:00:05,819
more complex operations developers can

1240
01:00:05,819 --> 01:00:07,920
Implement on top of ble host and

1241
01:00:07,920 --> 01:00:10,380
controller layers their own custom

1242
01:00:10,380 --> 01:00:12,960
protocols at the application layer

1243
01:00:12,960 --> 01:00:15,660
next we describe the three xiaomi custom

1244
01:00:15,660 --> 01:00:17,940
protocols pairing authentication and

1245
01:00:17,940 --> 01:00:19,020
communication

1246
01:00:19,020 --> 01:00:21,480
we reverse them with a combination of

1247
01:00:21,480 --> 01:00:23,520
static and dynamic reverse engineering

1248
01:00:23,520 --> 01:00:25,799
techniques including the compiling the

1249
01:00:25,799 --> 01:00:27,839
obfuscation Dynamic traffic analysis and

1250
01:00:27,839 --> 01:00:31,020
dynamic binary instrumentation

1251
01:00:31,020 --> 01:00:32,880
pairing happens the first time the app

1252
01:00:32,880 --> 01:00:35,220
connects to a new tracker during pairing

1253
01:00:35,220 --> 01:00:38,700
the two entities agree on a secret long

1254
01:00:38,700 --> 01:00:41,400
term pairing key shown as a black key in

1255
01:00:41,400 --> 01:00:43,140
the figure that will be used during

1256
01:00:43,140 --> 01:00:45,540
authentication we reversed xiaomi

1257
01:00:45,540 --> 01:00:48,000
playing version 1 used by Mi Band 2 3

1258
01:00:48,000 --> 01:00:51,540
and number three we also reversed xiaomi

1259
01:00:51,540 --> 01:00:54,359
pairing version 2 released in 2019 and

1260
01:00:54,359 --> 01:00:57,059
used by the Mi band 4 5 and 6. the

1261
01:00:57,059 --> 01:00:59,099
second version is more sophisticated as

1262
01:00:59,099 --> 01:01:02,400
it requires access to xiaomi backend our

1263
01:01:02,400 --> 01:01:04,559
tax work regardless of the pairing

1264
01:01:04,559 --> 01:01:06,960
version and without knowledge of the

1265
01:01:06,960 --> 01:01:09,180
existing fighting key

1266
01:01:09,180 --> 01:01:10,920
authentication happens at the beginning

1267
01:01:10,920 --> 01:01:13,619
of every session namely whenever the app

1268
01:01:13,619 --> 01:01:16,140
starts a new connection with a

1269
01:01:16,140 --> 01:01:18,480
previously paired tracker the goal of

1270
01:01:18,480 --> 01:01:20,220
authentication is to prove the

1271
01:01:20,220 --> 01:01:22,200
possession of the pairing key exchanged

1272
01:01:22,200 --> 01:01:24,420
during paying the app authenticates

1273
01:01:24,420 --> 01:01:26,579
through a challenge response and gains

1274
01:01:26,579 --> 01:01:28,619
access to the protected data on the

1275
01:01:28,619 --> 01:01:29,819
tracker

1276
01:01:29,819 --> 01:01:31,619
after authenticating the app can

1277
01:01:31,619 --> 01:01:33,540
subscribe to Services exposed by the

1278
01:01:33,540 --> 01:01:35,460
tracker when subscribe to the app

1279
01:01:35,460 --> 01:01:37,559
receives periodic updates on the data

1280
01:01:37,559 --> 01:01:39,540
gathered by the tracker for example the

1281
01:01:39,540 --> 01:01:42,059
heart rate and the steps we call this

1282
01:01:42,059 --> 01:01:44,700
the communication protocol

1283
01:01:44,700 --> 01:01:47,099
now I will present the threat model for

1284
01:01:47,099 --> 01:01:49,380
our four proximity over their attacks

1285
01:01:49,380 --> 01:01:51,059
then I will explain the attacks the

1286
01:01:51,059 --> 01:01:52,799
vulnerabilities the exploit and their

1287
01:01:52,799 --> 01:01:54,359
impact

1288
01:01:54,359 --> 01:01:56,160
in our proximity threat model the

1289
01:01:56,160 --> 01:01:57,900
attacker attacks a fitness tracker and

1290
01:01:57,900 --> 01:02:00,540
the app paired with it he is within ble

1291
01:02:00,540 --> 01:02:04,079
range easily up to 20 and 30 meters

1292
01:02:04,079 --> 01:02:06,119
and targets xiaomi's pairing

1293
01:02:06,119 --> 01:02:07,319
authentication and communication

1294
01:02:07,319 --> 01:02:09,839
protocols by sniffy bla traffic and by

1295
01:02:09,839 --> 01:02:11,940
interacting with the tracker and the app

1296
01:02:11,940 --> 01:02:14,460
with xiaomi compliant packets the

1297
01:02:14,460 --> 01:02:16,680
attacker has no physical access and does

1298
01:02:16,680 --> 01:02:18,480
not tamper with the device's operative

1299
01:02:18,480 --> 01:02:21,480
system or Hardware he knows public level

1300
01:02:21,480 --> 01:02:23,940
information such as the trackers ble

1301
01:02:23,940 --> 01:02:26,819
address a hex identifier periodically

1302
01:02:26,819 --> 01:02:29,940
advertised within ble range the attacker

1303
01:02:29,940 --> 01:02:31,980
has no prior knowledge of the shared

1304
01:02:31,980 --> 01:02:34,619
Secrets such as the pairing key he has

1305
01:02:34,619 --> 01:02:37,260
four goals impersonating the up to the

1306
01:02:37,260 --> 01:02:39,480
tracker impersonating the track the

1307
01:02:39,480 --> 01:02:41,819
tracker to the app establishing a man in

1308
01:02:41,819 --> 01:02:43,680
the middle position between them and is

1309
01:02:43,680 --> 01:02:45,839
dropping the private data exchanged

1310
01:02:45,839 --> 01:02:47,579
between them

1311
01:02:47,579 --> 01:02:50,040
in the proximity is dropping attack the

1312
01:02:50,040 --> 01:02:52,319
attackers needs daily traffic and reads

1313
01:02:52,319 --> 01:02:54,780
it three novel vulnerabilities makes

1314
01:02:54,780 --> 01:02:56,880
this attack impactful

1315
01:02:56,880 --> 01:02:58,980
during playing version 1 he reads the

1316
01:02:58,980 --> 01:03:00,720
pairing key something clear by the app

1317
01:03:00,720 --> 01:03:02,880
our first vulnerability

1318
01:03:02,880 --> 01:03:05,220
during perim version 2 he reads the

1319
01:03:05,220 --> 01:03:07,200
pairing key seed something clear by the

1320
01:03:07,200 --> 01:03:09,480
tracker a second vulnerability it is

1321
01:03:09,480 --> 01:03:11,160
easy to derive the pairing key from this

1322
01:03:11,160 --> 01:03:14,040
seat the attacker inputs the seed and

1323
01:03:14,040 --> 01:03:17,040
the public ble address of the tracker in

1324
01:03:17,040 --> 01:03:18,839
the custom xiaomi key derivation

1325
01:03:18,839 --> 01:03:21,720
function will reversed and obtains the

1326
01:03:21,720 --> 01:03:24,359
key as the result in both pairing

1327
01:03:24,359 --> 01:03:26,460
versions The attacker retrieves the key

1328
01:03:26,460 --> 01:03:28,500
and can authenticate later

1329
01:03:28,500 --> 01:03:30,660
during communication the data is

1330
01:03:30,660 --> 01:03:32,760
exchanged without encryption despite

1331
01:03:32,760 --> 01:03:34,980
sharing the pairing key this serious

1332
01:03:34,980 --> 01:03:36,960
vulnerability allows the attacker to

1333
01:03:36,960 --> 01:03:39,540
read the Health Data of the victim in

1334
01:03:39,540 --> 01:03:41,460
real time

1335
01:03:41,460 --> 01:03:43,260
in the proximity tracking impersonation

1336
01:03:43,260 --> 01:03:45,000
attack the attacker targets the

1337
01:03:45,000 --> 01:03:47,099
Authentication Protocol shown in the

1338
01:03:47,099 --> 01:03:49,319
diagram the attacker creates a fake

1339
01:03:49,319 --> 01:03:51,180
tracker with a billing address that

1340
01:03:51,180 --> 01:03:54,299
matches the target tracker the app sees

1341
01:03:54,299 --> 01:03:56,700
the matching address and connects to it

1342
01:03:56,700 --> 01:03:59,760
then the challenge response begins using

1343
01:03:59,760 --> 01:04:01,640
the pairing key as the shared secret

1344
01:04:01,640 --> 01:04:04,079
xiomi's authentication suffers from the

1345
01:04:04,079 --> 01:04:06,000
unilateral authentication vulnerability

1346
01:04:06,000 --> 01:04:08,160
as this challenge responds only

1347
01:04:08,160 --> 01:04:10,559
authenticates the app to the tracker

1348
01:04:10,559 --> 01:04:13,319
therefore an attacker can impersonate

1349
01:04:13,319 --> 01:04:15,180
any tracker without needing to

1350
01:04:15,180 --> 01:04:18,240
authenticate and can submit fake data to

1351
01:04:18,240 --> 01:04:20,160
the app

1352
01:04:20,160 --> 01:04:22,319
in the proximity upon personal attack

1353
01:04:22,319 --> 01:04:24,180
the attacker gains a main the middle

1354
01:04:24,180 --> 01:04:26,339
position between the tracker and the up

1355
01:04:26,339 --> 01:04:29,579
forwarding any message exchanged in

1356
01:04:29,579 --> 01:04:31,500
particular the attacker forwards the

1357
01:04:31,500 --> 01:04:33,960
challenge it to the legitimate app and

1358
01:04:33,960 --> 01:04:36,299
retrieves the correct response needed to

1359
01:04:36,299 --> 01:04:38,400
authenticate the replayable

1360
01:04:38,400 --> 01:04:40,859
authentication vulnerability is caused

1361
01:04:40,859 --> 01:04:43,859
by the lack of nonsense given a specific

1362
01:04:43,859 --> 01:04:46,859
challenge the response from the app will

1363
01:04:46,859 --> 01:04:49,319
always be the same leading to

1364
01:04:49,319 --> 01:04:50,819
replayability

1365
01:04:50,819 --> 01:04:53,220
while authenticated the attacker can

1366
01:04:53,220 --> 01:04:55,799
access to protected data the attacker

1367
01:04:55,799 --> 01:04:57,900
has now a trusted connection with the

1368
01:04:57,900 --> 01:05:00,839
tracker so he drops the connection with

1369
01:05:00,839 --> 01:05:03,180
the app

1370
01:05:03,180 --> 01:05:05,160
the proximity men in the middle attack

1371
01:05:05,160 --> 01:05:07,140
combines the previous tracking

1372
01:05:07,140 --> 01:05:08,880
impersonation and up impersonation

1373
01:05:08,880 --> 01:05:11,700
attacks deploying them at the same time

1374
01:05:11,700 --> 01:05:14,280
in this case the attacker keeps the

1375
01:05:14,280 --> 01:05:16,559
connection with legitimate app and has

1376
01:05:16,559 --> 01:05:19,319
complete control over any ble traffic

1377
01:05:19,319 --> 01:05:21,839
not only the attacker can read the

1378
01:05:21,839 --> 01:05:24,240
traffic due to the lack of encryption

1379
01:05:24,240 --> 01:05:27,299
but another vulnerability the lack of

1380
01:05:27,299 --> 01:05:30,420
Integrity protection allows him to forge

1381
01:05:30,420 --> 01:05:32,960
packets

1382
01:05:33,359 --> 01:05:35,700
now I will present the threat model for

1383
01:05:35,700 --> 01:05:38,160
our two remote software-based attacks

1384
01:05:38,160 --> 01:05:40,020
then I will explain the attacks the

1385
01:05:40,020 --> 01:05:41,760
vulnerability is the exploit and their

1386
01:05:41,760 --> 01:05:43,140
impact

1387
01:05:43,140 --> 01:05:45,839
in our remote track model the attacker

1388
01:05:45,839 --> 01:05:47,700
attacks a fitness tracker and the app

1389
01:05:47,700 --> 01:05:49,020
paired to it

1390
01:05:49,020 --> 01:05:52,319
but proximity is not required he targets

1391
01:05:52,319 --> 01:05:54,420
a victim with an Android phone

1392
01:05:54,420 --> 01:05:56,819
we assume that the attacker is able to

1393
01:05:56,819 --> 01:05:58,980
install a malicious app on the victim's

1394
01:05:58,980 --> 01:06:01,680
smartphone a common exception for many

1395
01:06:01,680 --> 01:06:04,559
Android malware studies the attacker app

1396
01:06:04,559 --> 01:06:06,660
uses normal permissions except for

1397
01:06:06,660 --> 01:06:09,299
Android 12 and does not require root

1398
01:06:09,299 --> 01:06:11,640
privileges the attacker has no physical

1399
01:06:11,640 --> 01:06:13,380
access and does not tamper with the

1400
01:06:13,380 --> 01:06:14,940
device's operative system or Hardware

1401
01:06:14,940 --> 01:06:17,099
but can connect with the tracker over

1402
01:06:17,099 --> 01:06:20,220
ble and with the xiaomi backend to Wi-Fi

1403
01:06:20,220 --> 01:06:22,200
the attacker has no prior knowledge of

1404
01:06:22,200 --> 01:06:23,880
the shared Secrets such as the pairing

1405
01:06:23,880 --> 01:06:26,099
key he targets xiaomi's pairing

1406
01:06:26,099 --> 01:06:27,119
authentication and communication

1407
01:06:27,119 --> 01:06:29,039
protocols and has two goals

1408
01:06:29,039 --> 01:06:31,680
impersonating the app to the tracker and

1409
01:06:31,680 --> 01:06:33,960
is dropping the private data exchanged

1410
01:06:33,960 --> 01:06:36,119
between them

1411
01:06:36,119 --> 01:06:38,160
in the remotives dropping attack the

1412
01:06:38,160 --> 01:06:40,380
attacker exploits a known Android issue

1413
01:06:40,380 --> 01:06:42,839
since the ble channel is shared by all

1414
01:06:42,839 --> 01:06:45,299
apps any app can read the whole daily

1415
01:06:45,299 --> 01:06:47,880
traffic we combine this issue with the

1416
01:06:47,880 --> 01:06:49,859
novel xiaomi vulnerabilities explained

1417
01:06:49,859 --> 01:06:52,759
in the previous slides

1418
01:06:52,880 --> 01:06:56,039
packet because of no encryption in

1419
01:06:56,039 --> 01:06:58,020
particular it can intersect the pairing

1420
01:06:58,020 --> 01:07:00,599
key or the pairing key seed it can also

1421
01:07:00,599 --> 01:07:02,760
directly access protected data as the

1422
01:07:02,760 --> 01:07:04,920
legitimate app authenticates the

1423
01:07:04,920 --> 01:07:07,260
smartphone to the tracker and our

1424
01:07:07,260 --> 01:07:09,180
malicious app shares the same connection

1425
01:07:09,180 --> 01:07:12,839
and does not need to authenticate

1426
01:07:12,839 --> 01:07:14,940
in the remote app impersonation attack

1427
01:07:14,940 --> 01:07:17,400
the attacker exploits a novel trick we

1428
01:07:17,400 --> 01:07:19,559
discovered a factory that really command

1429
01:07:19,559 --> 01:07:22,319
that does not require Authentication

1430
01:07:22,319 --> 01:07:24,780
the tracker results changing daily

1431
01:07:24,780 --> 01:07:25,740
address

1432
01:07:25,740 --> 01:07:29,400
since xiaomi app it identifies trackers

1433
01:07:29,400 --> 01:07:31,799
by their address it will not recognize

1434
01:07:31,799 --> 01:07:33,780
the device anymore

1435
01:07:33,780 --> 01:07:36,299
now the attacker can legitimately Pair

1436
01:07:36,299 --> 01:07:38,700
by implementing some repairing and by

1437
01:07:38,700 --> 01:07:40,500
exporting the weak user confirmation

1438
01:07:40,500 --> 01:07:41,760
vulnerability

1439
01:07:41,760 --> 01:07:44,700
while a user prompt appears on the

1440
01:07:44,700 --> 01:07:47,339
tracker's display it does not show

1441
01:07:47,339 --> 01:07:48,839
enough information

1442
01:07:48,839 --> 01:07:51,720
in the figure we show pairing version 2

1443
01:07:51,720 --> 01:07:53,400
that requires additional interaction

1444
01:07:53,400 --> 01:07:57,180
with xiaomi backend we reverse those web

1445
01:07:57,180 --> 01:07:59,400
API calls using many individual proxy to

1446
01:07:59,400 --> 01:08:01,859
intercept https traffic

1447
01:08:01,859 --> 01:08:04,200
after designing and implementing our

1448
01:08:04,200 --> 01:08:06,839
attacks in the blackme toolkit we test

1449
01:08:06,839 --> 01:08:09,240
them on different trackers app and

1450
01:08:09,240 --> 01:08:10,980
smartphones

1451
01:08:10,980 --> 01:08:13,680
we evaluated six semi fitness trackers

1452
01:08:13,680 --> 01:08:17,040
released from 2016 to 2021 and

1453
01:08:17,040 --> 01:08:19,738
chronologically sorted in the table from

1454
01:08:19,738 --> 01:08:21,960
the older one the Mi Band 2 to the most

1455
01:08:21,960 --> 01:08:25,859
recent one at the time the Mi band 6.

1456
01:08:25,859 --> 01:08:28,620
Mi band 4 5 and 6 run appearing version

1457
01:08:28,620 --> 01:08:31,920
2 Implement Bluetooth 5.0 and support

1458
01:08:31,920 --> 01:08:35,100
both early secure connections and Link

1459
01:08:35,100 --> 01:08:36,660
layer security

1460
01:08:36,660 --> 01:08:39,299
those two security features are ignored

1461
01:08:39,299 --> 01:08:42,060
by xiaomi even though they would weaken

1462
01:08:42,060 --> 01:08:44,819
some of our attacks without much impact

1463
01:08:44,819 --> 01:08:47,520
on batteries on consumption

1464
01:08:47,520 --> 01:08:49,738
we evaluated the two Summit official

1465
01:08:49,738 --> 01:08:53,100
apps that life and zap both apps were

1466
01:08:53,100 --> 01:08:55,439
rebranded very recently Amazon fit

1467
01:08:55,439 --> 01:08:57,479
became that life after our first

1468
01:08:57,479 --> 01:09:00,420
experiments in 2020 and mifit became

1469
01:09:00,420 --> 01:09:03,719
that life in 2022 months after our

1470
01:09:03,719 --> 01:09:07,020
disclosure we tested that life in 2020

1471
01:09:07,020 --> 01:09:10,020
and zap in 2021 and noticed that they

1472
01:09:10,020 --> 01:09:12,120
shared the same semi protocols and

1473
01:09:12,120 --> 01:09:13,080
backend

1474
01:09:13,080 --> 01:09:15,479
pairing with that life will also show

1475
01:09:15,479 --> 01:09:17,698
the newly paired tracker on deck and

1476
01:09:17,698 --> 01:09:20,580
vice versa the rest of our setup is low

1477
01:09:20,580 --> 01:09:22,738
cost and easy to reproduce consisting of

1478
01:09:22,738 --> 01:09:24,540
Open Source software and cheap Hardware

1479
01:09:24,540 --> 01:09:28,259
a laptop running Ubuntu a CSR ble dongle

1480
01:09:28,259 --> 01:09:30,179
for barely other spoofing and ability

1481
01:09:30,179 --> 01:09:31,979
sniffer

1482
01:09:31,979 --> 01:09:34,198
we deployed the four proximity and two

1483
01:09:34,198 --> 01:09:36,299
remote attacks on the six most recent

1484
01:09:36,299 --> 01:09:39,238
trackers and the two official apps we

1485
01:09:39,238 --> 01:09:41,640
confirm that that life and that are

1486
01:09:41,640 --> 01:09:43,259
vulnerable to the four attacks that

1487
01:09:43,259 --> 01:09:45,899
interact with the app compared to that

1488
01:09:45,899 --> 01:09:48,179
that life updates the firmware of the

1489
01:09:48,179 --> 01:09:50,520
tracker to a more recent version but is

1490
01:09:50,520 --> 01:09:52,738
still vulnerable to all attacks

1491
01:09:52,738 --> 01:09:55,140
we also tested five Mi bands and The

1492
01:09:55,140 --> 01:09:58,140
amazfit Core 2 which we identified as a

1493
01:09:58,140 --> 01:09:59,940
mi Band 3 Clone

1494
01:09:59,940 --> 01:10:01,920
the fact that the trackers slightly

1495
01:10:01,920 --> 01:10:04,199
differ from each other was not an issue

1496
01:10:04,199 --> 01:10:06,480
for example when the Mi band 6 was

1497
01:10:06,480 --> 01:10:08,940
released we updated the break me toolkit

1498
01:10:08,940 --> 01:10:11,640
and deployed all six attacks within one

1499
01:10:11,640 --> 01:10:12,600
day

1500
01:10:12,600 --> 01:10:15,480
we confirm that all evaluated trackers

1501
01:10:15,480 --> 01:10:17,820
are vulnerable to our attacks

1502
01:10:17,820 --> 01:10:20,280
the results of our evaluation clearly

1503
01:10:20,280 --> 01:10:21,960
show that the security and privacy of

1504
01:10:21,960 --> 01:10:23,880
the xiaomi ecosystem are compromised

1505
01:10:23,880 --> 01:10:26,640
despite the guarantees made by excelling

1506
01:10:26,640 --> 01:10:29,040
we also remind that our attacks are

1507
01:10:29,040 --> 01:10:30,719
compliant with xiaomi protocols

1508
01:10:30,719 --> 01:10:33,600
therefore they work on any app and

1509
01:10:33,600 --> 01:10:36,480
tracker that support our versions of

1510
01:10:36,480 --> 01:10:38,159
xiaomi pairing authentication and

1511
01:10:38,159 --> 01:10:40,380
communication regardless of hardware and

1512
01:10:40,380 --> 01:10:43,260
software details this means that they

1513
01:10:43,260 --> 01:10:46,620
would work on unofficial apps as well as

1514
01:10:46,620 --> 01:10:48,900
ble devices that are not fitness

1515
01:10:48,900 --> 01:10:52,020
trackers thus compromising the whole

1516
01:10:52,020 --> 01:10:54,840
xiaomi ecosystem

1517
01:10:54,840 --> 01:10:57,900
statistical data updated to August 2022

1518
01:10:57,900 --> 01:11:00,239
show that our remote attacks work on at

1519
01:11:00,239 --> 01:11:02,460
least 93 percent of android devices as

1520
01:11:02,460 --> 01:11:05,280
we test them on 600 versions most

1521
01:11:05,280 --> 01:11:07,560
versions only need the standard Loot and

1522
01:11:07,560 --> 01:11:09,239
internet permissions

1523
01:11:09,239 --> 01:11:11,940
instead the newer Android 12 requires a

1524
01:11:11,940 --> 01:11:13,440
stronger threat model because the

1525
01:11:13,440 --> 01:11:15,060
malicious app needs the dangerous

1526
01:11:15,060 --> 01:11:17,400
runtime permission Bluetooth connect to

1527
01:11:17,400 --> 01:11:19,199
speak with already connected Fitness

1528
01:11:19,199 --> 01:11:22,320
tracker while Android 12 unless the ble

1529
01:11:22,320 --> 01:11:25,500
API security issue is it does not affect

1530
01:11:25,500 --> 01:11:27,780
in any way the xiaomi vulnerabilities we

1531
01:11:27,780 --> 01:11:29,880
highlighted that are still present and

1532
01:11:29,880 --> 01:11:31,860
severe

1533
01:11:31,860 --> 01:11:34,020
we open source the back me toolkit on

1534
01:11:34,020 --> 01:11:35,880
GitHub it contains scappy protocol

1535
01:11:35,880 --> 01:11:37,920
detectors able to identify and craft

1536
01:11:37,920 --> 01:11:40,620
xiaomi combined packets it replements

1537
01:11:40,620 --> 01:11:42,000
the custom key derivation function

1538
01:11:42,000 --> 01:11:43,199
during pairing and the challenge

1539
01:11:43,199 --> 01:11:45,659
response during authentication brachmi

1540
01:11:45,659 --> 01:11:48,420
can deploy all six presented attacks you

1541
01:11:48,420 --> 01:11:49,980
will find the video demonstration on the

1542
01:11:49,980 --> 01:11:51,600
black me YouTube channel attacking

1543
01:11:51,600 --> 01:11:54,179
xiaomi and Fitbit devices in the videos

1544
01:11:54,179 --> 01:11:56,100
I explained in few minutes how to

1545
01:11:56,100 --> 01:11:57,900
perform belly other spoofing the

1546
01:11:57,900 --> 01:11:59,699
different setups for xiaomi and Fitbit

1547
01:11:59,699 --> 01:12:02,040
described step by step the attacks on

1548
01:12:02,040 --> 01:12:03,960
real fitness trackers and show how they

1549
01:12:03,960 --> 01:12:06,120
affect the user our toolkit is an

1550
01:12:06,120 --> 01:12:08,940
approved chess artifact

1551
01:12:08,940 --> 01:12:11,100
in conclusion I presented the results of

1552
01:12:11,100 --> 01:12:12,960
our security assessment of the xiaomi

1553
01:12:12,960 --> 01:12:15,179
fitness tracking ecosystem I highlighted

1554
01:12:15,179 --> 01:12:18,000
the security and privacy concerns raised

1555
01:12:18,000 --> 01:12:19,739
by the presence of many severe and

1556
01:12:19,739 --> 01:12:21,480
unknown vulnerabilities in xiaomi's

1557
01:12:21,480 --> 01:12:23,940
custom protocols such as the natural and

1558
01:12:23,940 --> 01:12:26,400
repayable authentication in our paper we

1559
01:12:26,400 --> 01:12:28,500
discuss even more vulnerabilities such

1560
01:12:28,500 --> 01:12:30,659
as the unauthenticated pairing version

1561
01:12:30,659 --> 01:12:32,040
1.

1562
01:12:32,040 --> 01:12:34,620
the ecosystem-wide default keeper and

1563
01:12:34,620 --> 01:12:36,360
the weak authentication in pairing

1564
01:12:36,360 --> 01:12:39,500
version 2 and more I explained our six

1565
01:12:39,500 --> 01:12:42,060
proximity and remote attacks easily

1566
01:12:42,060 --> 01:12:44,040
reproducible with blackmail and

1567
01:12:44,040 --> 01:12:46,380
automated and extendable ble security

1568
01:12:46,380 --> 01:12:48,900
toolkit in our paper we will also find

1569
01:12:48,900 --> 01:12:50,940
an in-depth analysis of xiaomi's

1570
01:12:50,940 --> 01:12:53,100
protocols more information about our

1571
01:12:53,100 --> 01:12:55,140
reverse engineering efforts and the

1572
01:12:55,140 --> 01:12:56,760
final state of the art Hunter measures

1573
01:12:56,760 --> 01:12:59,280
that we propose to fix a mid protocol

1574
01:12:59,280 --> 01:13:01,980
furthermore we extended our analysis to

1575
01:13:01,980 --> 01:13:03,780
the Fitbit ecosystem by targeting the

1576
01:13:03,780 --> 01:13:05,940
channel 2 tracker and discovered that

1577
01:13:05,940 --> 01:13:08,640
despite stronger security mechanisms it

1578
01:13:08,640 --> 01:13:11,040
is still vulnerable to 5 out of the six

1579
01:13:11,040 --> 01:13:13,860
presented attacks we encourage xiaomi

1580
01:13:13,860 --> 01:13:15,840
and other Fitness tracking companies to

1581
01:13:15,840 --> 01:13:18,060
provide better security and privacy for

1582
01:13:18,060 --> 01:13:19,920
the users in the future releases of

1583
01:13:19,920 --> 01:13:24,199
their property protocols thank you

1584
01:13:30,719 --> 01:13:36,080
okay any question from the audience

1585
01:13:37,380 --> 01:13:39,920
okay

1586
01:13:41,880 --> 01:13:44,340
thank you for your talk um you mentioned

1587
01:13:44,340 --> 01:13:46,320
that you disclose the vulnerabilities to

1588
01:13:46,320 --> 01:13:47,640
xiaomi

1589
01:13:47,640 --> 01:13:49,400
um can you say something about their

1590
01:13:49,400 --> 01:13:52,380
answers did they uh did you receive any

1591
01:13:52,380 --> 01:13:53,580
answer

1592
01:13:53,580 --> 01:13:55,320
uh yes we disclosed all the

1593
01:13:55,320 --> 01:13:58,320
vulnerabilities and our fixes and the

1594
01:13:58,320 --> 01:14:02,460
answer was a cluster because uh

1595
01:14:02,460 --> 01:14:05,880
um they just dismissed them as a lack of

1596
01:14:05,880 --> 01:14:08,940
encryption and we already know them so

1597
01:14:08,940 --> 01:14:11,760
uh that was it a follow-up from Fitbit

1598
01:14:11,760 --> 01:14:14,820
was from Google which I wanted to Fitbit

1599
01:14:14,820 --> 01:14:17,280
was a little bit better but if it was

1600
01:14:17,280 --> 01:14:19,560
the older devices so they are still

1601
01:14:19,560 --> 01:14:21,600
figuring it out if they want to deploy

1602
01:14:21,600 --> 01:14:25,500
uh fixes uh the only other thing I can

1603
01:14:25,500 --> 01:14:28,560
say is that after the disclosure after I

1604
01:14:28,560 --> 01:14:31,920
think the a few months the new event

1605
01:14:31,920 --> 01:14:35,159
arrived and it write a new firmware

1606
01:14:35,159 --> 01:14:39,000
version and this implemented at least

1607
01:14:39,000 --> 01:14:43,199
some of uh the fixes we suggested which

1608
01:14:43,199 --> 01:14:47,880
I don't I'm not saying that it's our

1609
01:14:47,880 --> 01:14:48,780
um

1610
01:14:48,780 --> 01:14:50,400
it was our

1611
01:14:50,400 --> 01:14:51,060
um

1612
01:14:51,060 --> 01:14:53,400
they were what was it motivated by ours

1613
01:14:53,400 --> 01:14:56,280
but uh we are happy that they are taking

1614
01:14:56,280 --> 01:14:59,219
care of at least uh some uh

1615
01:14:59,219 --> 01:15:01,320
vulnerabilities but we didn't perform a

1616
01:15:01,320 --> 01:15:03,600
full evaluation so that's the current

1617
01:15:03,600 --> 01:15:08,760
state uh of events that we know of

1618
01:15:08,760 --> 01:15:11,100
okay thank you I recommend to keep the

1619
01:15:11,100 --> 01:15:12,960
next question if you have to um probably

1620
01:15:12,960 --> 01:15:15,120
offline through email

1621
01:15:15,120 --> 01:15:17,699
um to Marco and we move to the next or

1622
01:15:17,699 --> 01:15:21,420
last Talk of the session thank you Marco

1623
01:15:21,420 --> 01:15:24,320
thank you thank you

1624
01:15:30,300 --> 01:15:33,120
okay we are going to start the last

1625
01:15:33,120 --> 01:15:35,699
stack of a session

1626
01:15:35,699 --> 01:15:37,820
um

1627
01:15:54,300 --> 01:15:58,040
okay the setup is ready

1628
01:15:59,400 --> 01:16:00,659
almost

1629
01:16:00,659 --> 01:16:05,280
good the the paper is titled and

1630
01:16:05,280 --> 01:16:08,219
um your gun okay can you go to the first

1631
01:16:08,219 --> 01:16:10,860
and energy and area efficient All

1632
01:16:10,860 --> 01:16:13,560
Digital entropy Source compatible with

1633
01:16:13,560 --> 01:16:16,260
modern standards based on gtaire

1634
01:16:16,260 --> 01:16:19,199
pipelining and now we have

1635
01:16:19,199 --> 01:16:22,140
um Adrian now to give the talk

1636
01:16:22,140 --> 01:16:24,120
okay thanks

1637
01:16:24,120 --> 01:16:26,400
um good afternoon everyone so in this

1638
01:16:26,400 --> 01:16:29,219
talk I will introduce you to our true

1639
01:16:29,219 --> 01:16:31,080
random number generator design which was

1640
01:16:31,080 --> 01:16:33,679
fabricated in a 28 nanometer technology

1641
01:16:33,679 --> 01:16:36,600
and which should be compatible to Modern

1642
01:16:36,600 --> 01:16:39,179
standards

1643
01:16:39,179 --> 01:16:40,800
um so first let's start with a quick

1644
01:16:40,800 --> 01:16:42,840
introduction to random numbers so

1645
01:16:42,840 --> 01:16:44,880
probably most of you are aware by the

1646
01:16:44,880 --> 01:16:46,800
fact that random numbers are heavily

1647
01:16:46,800 --> 01:16:49,260
used in cryptography but also in other

1648
01:16:49,260 --> 01:16:51,060
domains like for example statistical

1649
01:16:51,060 --> 01:16:53,460
simulations or online games and gambling

1650
01:16:53,460 --> 01:16:57,000
uh random numbers are used uh the

1651
01:16:57,000 --> 01:17:00,360
circuit I will show you here is mostly

1652
01:17:00,360 --> 01:17:03,900
focused on the use in cryptography

1653
01:17:03,900 --> 01:17:07,380
so how to generate random numbers uh in

1654
01:17:07,380 --> 01:17:09,120
essence there are two ways of generating

1655
01:17:09,120 --> 01:17:11,820
random numbers so on the left you see

1656
01:17:11,820 --> 01:17:13,560
what we call a pseudo-random number

1657
01:17:13,560 --> 01:17:16,320
generator so this is a deterministic

1658
01:17:16,320 --> 01:17:19,380
device that given a certain protocol and

1659
01:17:19,380 --> 01:17:22,679
a seat input will generate a stream of

1660
01:17:22,679 --> 01:17:26,760
random uh looking digits it's important

1661
01:17:26,760 --> 01:17:28,320
to know that everyone who has the same

1662
01:17:28,320 --> 01:17:30,420
seat and the same protocol will generate

1663
01:17:30,420 --> 01:17:33,300
the same output so no fresh entropy is

1664
01:17:33,300 --> 01:17:35,340
being generated here on the right hand

1665
01:17:35,340 --> 01:17:36,900
we have what we call a true random

1666
01:17:36,900 --> 01:17:38,460
number generator so this is an

1667
01:17:38,460 --> 01:17:40,860
electronic device that based on some

1668
01:17:40,860 --> 01:17:43,500
noise or mostly electrical noise in

1669
01:17:43,500 --> 01:17:46,460
integrated circuits will try to

1670
01:17:46,460 --> 01:17:49,500
try to capture entropy from it and

1671
01:17:49,500 --> 01:17:51,780
generate a random bitstream so the

1672
01:17:51,780 --> 01:17:54,360
devices I will show you later is of this

1673
01:17:54,360 --> 01:17:56,400
second type

1674
01:17:56,400 --> 01:17:58,739
so if you've built your entropy Source

1675
01:17:58,739 --> 01:18:00,960
how can you make sure that it's actually

1676
01:18:00,960 --> 01:18:03,239
working properly because the output is

1677
01:18:03,239 --> 01:18:06,420
random you cannot just uh test it

1678
01:18:06,420 --> 01:18:08,520
um so what people tend to do in the past

1679
01:18:08,520 --> 01:18:11,280
was generate a large amount of random

1680
01:18:11,280 --> 01:18:14,520
bits then they applied all sorts of

1681
01:18:14,520 --> 01:18:16,980
statistical tests to them and then the

1682
01:18:16,980 --> 01:18:18,840
test would indicate if there was some

1683
01:18:18,840 --> 01:18:20,640
evidence that that the bits were not

1684
01:18:20,640 --> 01:18:22,620
generated by a uniform random number

1685
01:18:22,620 --> 01:18:24,480
generator

1686
01:18:24,480 --> 01:18:26,460
um if this was the case then the

1687
01:18:26,460 --> 01:18:28,380
designer tend to fine-tune some

1688
01:18:28,380 --> 01:18:30,480
parameters in the entropy Source until

1689
01:18:30,480 --> 01:18:34,199
the test indicated that the the the bits

1690
01:18:34,199 --> 01:18:35,760
could be produced by a true random

1691
01:18:35,760 --> 01:18:38,040
number generator there are some issues

1692
01:18:38,040 --> 01:18:39,600
with this approach and the main issue is

1693
01:18:39,600 --> 01:18:41,520
that these tests will treat the entropy

1694
01:18:41,520 --> 01:18:44,040
saws as a black box so the tests are

1695
01:18:44,040 --> 01:18:45,800
actually not able to distinguish between

1696
01:18:45,800 --> 01:18:49,500
fresh entropy being generated or episode

1697
01:18:49,500 --> 01:18:52,679
random process producing random bits or

1698
01:18:52,679 --> 01:18:54,540
a combination of boats so this test

1699
01:18:54,540 --> 01:18:56,340
cannot differentiate between this and it

1700
01:18:56,340 --> 01:18:58,320
has been shown that a well-designed

1701
01:18:58,320 --> 01:18:59,940
pseudo-random number generator is

1702
01:18:59,940 --> 01:19:02,640
actually capable of passing uh several

1703
01:19:02,640 --> 01:19:04,980
statistical tests so that's why people

1704
01:19:04,980 --> 01:19:08,159
moved on to a more modern approach

1705
01:19:08,159 --> 01:19:09,360
um and there's a project centered around

1706
01:19:09,360 --> 01:19:11,280
the existence of a stochastic model so

1707
01:19:11,280 --> 01:19:13,020
stochastic model is a mathematical

1708
01:19:13,020 --> 01:19:15,360
description of how entropy is being

1709
01:19:15,360 --> 01:19:16,920
captured from a noise source and

1710
01:19:16,920 --> 01:19:19,860
transferred to an output bit stream this

1711
01:19:19,860 --> 01:19:22,860
model uh is based on three inputs an

1712
01:19:22,860 --> 01:19:24,900
entropy requirement this can come from a

1713
01:19:24,900 --> 01:19:27,659
standard or from an application some

1714
01:19:27,659 --> 01:19:29,100
assumptions like for example the

1715
01:19:29,100 --> 01:19:30,659
existence of certain type of noise

1716
01:19:30,659 --> 01:19:33,840
sources and platform parameters which

1717
01:19:33,840 --> 01:19:35,520
should be experimentally verified like

1718
01:19:35,520 --> 01:19:37,500
for example the intrinsic gate delay in

1719
01:19:37,500 --> 01:19:38,880
a certain technology

1720
01:19:38,880 --> 01:19:41,219
then the stochastic model allows you to

1721
01:19:41,219 --> 01:19:42,420
make

1722
01:19:42,420 --> 01:19:45,360
um to determine

1723
01:19:45,360 --> 01:19:47,340
um your certain design parameters of

1724
01:19:47,340 --> 01:19:49,500
your entropy source and the stochastic

1725
01:19:49,500 --> 01:19:51,239
model will also allow you to make an

1726
01:19:51,239 --> 01:19:53,820
entropy estimate of the output what you

1727
01:19:53,820 --> 01:19:55,980
will do then is configure your entropy

1728
01:19:55,980 --> 01:19:57,659
source and then at the end run some

1729
01:19:57,659 --> 01:20:00,179
tests to check if the bits being

1730
01:20:00,179 --> 01:20:04,199
produced meet this entropy Claim by the

1731
01:20:04,199 --> 01:20:06,000
model

1732
01:20:06,000 --> 01:20:08,460
so

1733
01:20:08,460 --> 01:20:10,140
um this is the device that I will

1734
01:20:10,140 --> 01:20:12,540
present you in this talk so it actually

1735
01:20:12,540 --> 01:20:15,120
consists out of three parts on the left

1736
01:20:15,120 --> 01:20:16,739
you have the delay chain so these are

1737
01:20:16,739 --> 01:20:20,640
two chains of inverters and we apply an

1738
01:20:20,640 --> 01:20:23,159
edge to this to the start of this chain

1739
01:20:23,159 --> 01:20:26,219
so out of this of both chains comes uh

1740
01:20:26,219 --> 01:20:29,760
two different edges uh because of

1741
01:20:29,760 --> 01:20:33,000
um random Jitter always present in this

1742
01:20:33,000 --> 01:20:35,640
in these inverters both edges will have

1743
01:20:35,640 --> 01:20:37,980
some slightly random variations in the

1744
01:20:37,980 --> 01:20:39,960
exact timing on when they come at the

1745
01:20:39,960 --> 01:20:42,600
output and this difference in random

1746
01:20:42,600 --> 01:20:44,880
timing is what we try to capture in the

1747
01:20:44,880 --> 01:20:46,500
time to digital converter which is the

1748
01:20:46,500 --> 01:20:49,920
middle Block in the circuit so this is

1749
01:20:49,920 --> 01:20:52,500
based on the fact that two ring

1750
01:20:52,500 --> 01:20:54,840
oscillators are running independently

1751
01:20:54,840 --> 01:20:57,239
and freely and

1752
01:20:57,239 --> 01:20:59,760
um so the phases will start with some

1753
01:20:59,760 --> 01:21:01,380
initial phase difference and after a

1754
01:21:01,380 --> 01:21:02,760
while because the frequencies of both

1755
01:21:02,760 --> 01:21:04,260
ring oscillators are slightly different

1756
01:21:04,260 --> 01:21:06,480
these phases will tend to synchronize

1757
01:21:06,480 --> 01:21:08,820
and the synchronization is detected by

1758
01:21:08,820 --> 01:21:10,980
the digitization and then the

1759
01:21:10,980 --> 01:21:13,980
digitization will capture the length of

1760
01:21:13,980 --> 01:21:17,280
the synchronization as a random bit it

1761
01:21:17,280 --> 01:21:20,040
will produce a random bit from this

1762
01:21:20,040 --> 01:21:23,940
we did several things to optimize this

1763
01:21:23,940 --> 01:21:25,620
architecture throughput so the first

1764
01:21:25,620 --> 01:21:28,800
thing we did was trying to get the

1765
01:21:28,800 --> 01:21:31,199
resolution at which we are capturing the

1766
01:21:31,199 --> 01:21:33,360
random timing difference produced by the

1767
01:21:33,360 --> 01:21:34,980
delay chains to get this resolution as

1768
01:21:34,980 --> 01:21:36,900
small as possible because if you have

1769
01:21:36,900 --> 01:21:38,820
good resolution you don't need large

1770
01:21:38,820 --> 01:21:41,040
accumulation times to accumulate enough

1771
01:21:41,040 --> 01:21:43,380
timing Jitter before you can actually

1772
01:21:43,380 --> 01:21:45,360
start measuring it

1773
01:21:45,360 --> 01:21:47,219
so this was done by doing precise

1774
01:21:47,219 --> 01:21:49,320
frequency matching of the two ring

1775
01:21:49,320 --> 01:21:52,860
oscillators in the middle block

1776
01:21:52,860 --> 01:21:55,440
um another thing we noticed is that

1777
01:21:55,440 --> 01:21:59,040
um as the bit is being uh being

1778
01:21:59,040 --> 01:22:00,900
processed by the delay chain and then

1779
01:22:00,900 --> 01:22:02,820
handled over to the time the digital

1780
01:22:02,820 --> 01:22:04,920
converter the delay chain is not doing

1781
01:22:04,920 --> 01:22:06,420
anything at all so we could already

1782
01:22:06,420 --> 01:22:08,760
start the next bit so in essence what we

1783
01:22:08,760 --> 01:22:10,199
are doing here is creating a jetted

1784
01:22:10,199 --> 01:22:12,060
pipeline where two bits are being

1785
01:22:12,060 --> 01:22:14,880
processed or accumulating Jitter at the

1786
01:22:14,880 --> 01:22:17,239
same time

1787
01:22:17,340 --> 01:22:20,520
um this opened up an all new world of

1788
01:22:20,520 --> 01:22:22,260
optimization because we now have to make

1789
01:22:22,260 --> 01:22:24,000
sure that the pipeline is balanced as

1790
01:22:24,000 --> 01:22:25,620
well

1791
01:22:25,620 --> 01:22:28,020
um for example this is a timing diagram

1792
01:22:28,020 --> 01:22:29,640
where I showed this pipelining principle

1793
01:22:29,640 --> 01:22:31,800
so at the top you can see we apply a

1794
01:22:31,800 --> 01:22:34,080
starting Edge then what comes out of the

1795
01:22:34,080 --> 01:22:36,179
both delay chains are two different

1796
01:22:36,179 --> 01:22:38,580
edges and this will trigger the start of

1797
01:22:38,580 --> 01:22:40,800
the TDC ring oscillators and when the

1798
01:22:40,800 --> 01:22:43,140
TDC oscillators are still running

1799
01:22:43,140 --> 01:22:45,060
um we already apply a new starting Edge

1800
01:22:45,060 --> 01:22:49,100
and the second bit is being processed

1801
01:22:50,699 --> 01:22:53,340
um then the main part of our of our

1802
01:22:53,340 --> 01:22:55,020
paper consists of the of the stochastic

1803
01:22:55,020 --> 01:22:56,699
model for this device so this is a high

1804
01:22:56,699 --> 01:22:58,860
level overview of this model for the

1805
01:22:58,860 --> 01:23:01,080
medical mathematical details I have to

1806
01:23:01,080 --> 01:23:03,300
refer to the paper

1807
01:23:03,300 --> 01:23:08,219
so I'll try to explain it so we apply a

1808
01:23:08,219 --> 01:23:09,960
starting Edge in green

1809
01:23:09,960 --> 01:23:11,699
and then what comes out of these two

1810
01:23:11,699 --> 01:23:14,699
delay chains are two edges in blue and

1811
01:23:14,699 --> 01:23:16,920
red and these edges will have some

1812
01:23:16,920 --> 01:23:18,600
slight variations on them which are

1813
01:23:18,600 --> 01:23:20,880
indicated by the light blue

1814
01:23:20,880 --> 01:23:23,820
distributions t0 and T1

1815
01:23:23,820 --> 01:23:26,100
because the time to digital converter

1816
01:23:26,100 --> 01:23:28,500
only looks at timing difference we are

1817
01:23:28,500 --> 01:23:30,239
also only interested in timing the

1818
01:23:30,239 --> 01:23:32,159
difference which is indicated by this T

1819
01:23:32,159 --> 01:23:35,239
Delta distribution

1820
01:23:36,659 --> 01:23:39,060
um this timing difference will then

1821
01:23:39,060 --> 01:23:41,100
um determine the initial phase

1822
01:23:41,100 --> 01:23:42,840
difference of this free running ring

1823
01:23:42,840 --> 01:23:44,040
oscillators in the time to digital

1824
01:23:44,040 --> 01:23:46,500
converter and this this phase different

1825
01:23:46,500 --> 01:23:49,080
difference will tend I will start to

1826
01:23:49,080 --> 01:23:51,060
drift towards some threshold which

1827
01:23:51,060 --> 01:23:52,980
indicates synchronization of the phases

1828
01:23:52,980 --> 01:23:55,260
and this is indicated by these noisy

1829
01:23:55,260 --> 01:23:57,840
orange curves and the time it takes for

1830
01:23:57,840 --> 01:24:01,080
this curve to hit this threshold is what

1831
01:24:01,080 --> 01:24:03,420
we call a synchronization time or which

1832
01:24:03,420 --> 01:24:06,120
is indicated by the T Pi Distribution on

1833
01:24:06,120 --> 01:24:08,400
top and then what the digitization does

1834
01:24:08,400 --> 01:24:11,760
is digitizing this distribution into a

1835
01:24:11,760 --> 01:24:14,699
discrete random variable R and then the

1836
01:24:14,699 --> 01:24:17,040
parity of this random variable is what

1837
01:24:17,040 --> 01:24:20,960
will be your output a bit

1838
01:24:21,600 --> 01:24:24,480
um so the entropy estimate made by the

1839
01:24:24,480 --> 01:24:27,420
model is highly dependent on a certain

1840
01:24:27,420 --> 01:24:29,400
platform parameter which we call Jitter

1841
01:24:29,400 --> 01:24:31,920
strength so Jitter strength is the the

1842
01:24:31,920 --> 01:24:34,860
ratio of the amount of variants you

1843
01:24:34,860 --> 01:24:36,540
accumulate

1844
01:24:36,540 --> 01:24:38,520
um the amount of variance of your timing

1845
01:24:38,520 --> 01:24:39,780
difference of your time in your

1846
01:24:39,780 --> 01:24:42,900
accumulate uh compared to the overall

1847
01:24:42,900 --> 01:24:46,080
period length of a certain oscillator

1848
01:24:46,080 --> 01:24:49,380
uh so we try to measure or estimate this

1849
01:24:49,380 --> 01:24:52,739
parameter by reusing the theology during

1850
01:24:52,739 --> 01:24:55,500
this circuitry already had on the Asic

1851
01:24:55,500 --> 01:24:56,540
design

1852
01:24:56,540 --> 01:24:59,880
so on the left you can see both delay

1853
01:24:59,880 --> 01:25:01,620
chains which are used and on the bottom

1854
01:25:01,620 --> 01:25:03,540
right you can see one TDC ring

1855
01:25:03,540 --> 01:25:06,179
oscillator used so what we did was we

1856
01:25:06,179 --> 01:25:09,239
configured the top red delay chain to

1857
01:25:09,239 --> 01:25:11,460
have a very long delay and the bottom

1858
01:25:11,460 --> 01:25:14,460
blue one to have a very short delay so

1859
01:25:14,460 --> 01:25:17,400
the time in between that the bottom one

1860
01:25:17,400 --> 01:25:19,020
generates an edge and the top one

1861
01:25:19,020 --> 01:25:21,540
generates an edge we get we let this DD

1862
01:25:21,540 --> 01:25:24,000
seeding oscillator run and we count how

1863
01:25:24,000 --> 01:25:25,980
many cycles it takes before the top one

1864
01:25:25,980 --> 01:25:28,500
produces its output and because of the

1865
01:25:28,500 --> 01:25:31,800
random variations in this delay the

1866
01:25:31,800 --> 01:25:33,659
counter output will also be random and

1867
01:25:33,659 --> 01:25:35,820
based on this counter output pivot back

1868
01:25:35,820 --> 01:25:39,540
what was the digital strength so two

1869
01:25:39,540 --> 01:25:41,520
important notes on this

1870
01:25:41,520 --> 01:25:43,440
um this measurement is done

1871
01:25:43,440 --> 01:25:45,719
differentially because we use two

1872
01:25:45,719 --> 01:25:47,219
um deletions and we only measure the

1873
01:25:47,219 --> 01:25:48,659
difference and all measurements were

1874
01:25:48,659 --> 01:25:50,880
performed on chip all this is done to

1875
01:25:50,880 --> 01:25:53,280
minimize influence of external noise

1876
01:25:53,280 --> 01:25:55,080
sources

1877
01:25:55,080 --> 01:25:58,080
we try to be as conservative as possible

1878
01:25:58,080 --> 01:25:59,820
because

1879
01:25:59,820 --> 01:26:01,380
um the worst thing you could do is

1880
01:26:01,380 --> 01:26:03,360
overestimating the available Jitter

1881
01:26:03,360 --> 01:26:04,860
strength which would lead to an

1882
01:26:04,860 --> 01:26:07,320
overestimation of the available entropy

1883
01:26:07,320 --> 01:26:09,120
density which in turn would lead to a

1884
01:26:09,120 --> 01:26:10,800
false security claim

1885
01:26:10,800 --> 01:26:13,080
so the measurement that performed on

1886
01:26:13,080 --> 01:26:15,600
five devices and as you could see we

1887
01:26:15,600 --> 01:26:18,120
took the most conservative one which

1888
01:26:18,120 --> 01:26:19,620
resulted in a Jetta strength of 30

1889
01:26:19,620 --> 01:26:22,460
framesoseconds

1890
01:26:23,159 --> 01:26:25,260
um then we still have four three

1891
01:26:25,260 --> 01:26:26,880
parameters we could choose which are the

1892
01:26:26,880 --> 01:26:29,100
periods of these four ring oscillators

1893
01:26:29,100 --> 01:26:30,360
you can see it's a two in the delay

1894
01:26:30,360 --> 01:26:32,520
chains so which is actually the total

1895
01:26:32,520 --> 01:26:36,360
delay of one delay chain and the periods

1896
01:26:36,360 --> 01:26:39,179
of the DD series oscillators there are

1897
01:26:39,179 --> 01:26:43,080
three constraints that restricts or our

1898
01:26:43,080 --> 01:26:44,820
choice of these parameters namely the

1899
01:26:44,820 --> 01:26:46,920
pipeline balance as I explained earlier

1900
01:26:46,920 --> 01:26:48,600
both stages of the power plant should

1901
01:26:48,600 --> 01:26:51,420
have approximately equal delay then

1902
01:26:51,420 --> 01:26:52,800
there is an entropy density constraint

1903
01:26:52,800 --> 01:26:54,840
because we want to have a sufficient

1904
01:26:54,840 --> 01:26:57,540
amount of entropy at the output

1905
01:26:57,540 --> 01:26:59,940
and the throughput because at the end if

1906
01:26:59,940 --> 01:27:01,620
you still have some Freedom we want to

1907
01:27:01,620 --> 01:27:04,639
maximize for throughput

1908
01:27:04,739 --> 01:27:06,840
um so these constraints and are

1909
01:27:06,840 --> 01:27:08,520
visualized in the figure on top so on

1910
01:27:08,520 --> 01:27:10,020
the vertical axis you will see a

1911
01:27:10,020 --> 01:27:12,480
resolution of the uh of the time to

1912
01:27:12,480 --> 01:27:14,460
digital converter and on the horizontal

1913
01:27:14,460 --> 01:27:17,699
axis you will see accumulation time

1914
01:27:17,699 --> 01:27:19,920
so the entropy density constraint is

1915
01:27:19,920 --> 01:27:22,320
indicated by the blue curve on top which

1916
01:27:22,320 --> 01:27:25,500
means that your it it it will produce an

1917
01:27:25,500 --> 01:27:27,239
upper bound on your resolution because

1918
01:27:27,239 --> 01:27:29,520
if you want to have enough entropy you

1919
01:27:29,520 --> 01:27:32,100
need to have a certain Precision for a

1920
01:27:32,100 --> 01:27:33,900
certain accumulation time to be able to

1921
01:27:33,900 --> 01:27:35,940
measure the Jeter if your resolution is

1922
01:27:35,940 --> 01:27:39,659
too large you will just miss the Jitter

1923
01:27:39,659 --> 01:27:41,639
the pipeline balance constraint on the

1924
01:27:41,639 --> 01:27:43,380
other hand will produce a lower bound on

1925
01:27:43,380 --> 01:27:44,580
your resolution because if the

1926
01:27:44,580 --> 01:27:46,679
resolution is too small it will take too

1927
01:27:46,679 --> 01:27:48,000
long for the ring oscillators to

1928
01:27:48,000 --> 01:27:50,760
synchronize and the TDC stage will be

1929
01:27:50,760 --> 01:27:53,040
much larger than delay than the first

1930
01:27:53,040 --> 01:27:55,440
stage so your pipeline is unbalanced so

1931
01:27:55,440 --> 01:27:57,060
your resolution should be somewhere in

1932
01:27:57,060 --> 01:27:59,219
between the blue and the red curve which

1933
01:27:59,219 --> 01:28:02,460
is indicated by the Purple Gradient and

1934
01:28:02,460 --> 01:28:05,100
of course as throughput is inversely

1935
01:28:05,100 --> 01:28:07,320
proportional to accumulation time we

1936
01:28:07,320 --> 01:28:09,000
want to have a small accumulation time

1937
01:28:09,000 --> 01:28:11,040
as possible which is more to the left of

1938
01:28:11,040 --> 01:28:13,860
the graph so in in theory the optimal

1939
01:28:13,860 --> 01:28:15,179
point would be at the intersection of

1940
01:28:15,179 --> 01:28:18,000
both curves but as we want to have a

1941
01:28:18,000 --> 01:28:20,219
robust architecture we want to have some

1942
01:28:20,219 --> 01:28:21,900
margin away from the boundaries so we

1943
01:28:21,900 --> 01:28:25,080
end up with an optimal region

1944
01:28:25,080 --> 01:28:27,360
it's also interesting to look how the

1945
01:28:27,360 --> 01:28:29,340
position of these bounce is determined

1946
01:28:29,340 --> 01:28:31,500
uh the entropy density considering the

1947
01:28:31,500 --> 01:28:33,600
blue one on top is mainly determined by

1948
01:28:33,600 --> 01:28:34,980
the Jitter strength parameter we

1949
01:28:34,980 --> 01:28:37,380
measured earlier so the higher this

1950
01:28:37,380 --> 01:28:39,360
parameter will turn I will make this

1951
01:28:39,360 --> 01:28:43,080
blue curve shift apart

1952
01:28:43,080 --> 01:28:45,480
um the pipeline balancing constraint the

1953
01:28:45,480 --> 01:28:47,400
red one on bottom is highly influenced

1954
01:28:47,400 --> 01:28:49,620
by the maximum oscillation speed of the

1955
01:28:49,620 --> 01:28:51,840
TDC ring oscillator so the higher ring

1956
01:28:51,840 --> 01:28:54,000
oscillator speeds we could achieve the

1957
01:28:54,000 --> 01:28:55,800
lower this curve would be and the higher

1958
01:28:55,800 --> 01:28:57,840
of throughput will be

1959
01:28:57,840 --> 01:28:59,120
foreign

1960
01:28:59,120 --> 01:29:02,699
so then the experimental results so as

1961
01:29:02,699 --> 01:29:05,580
uh mentioned earlier we this this device

1962
01:29:05,580 --> 01:29:07,920
was fabricated in a 28 nanometer CMOS

1963
01:29:07,920 --> 01:29:10,320
technology uh we measured out five

1964
01:29:10,320 --> 01:29:13,020
devices uh the first thing we checked

1965
01:29:13,020 --> 01:29:16,139
was the IID claim because we claimed the

1966
01:29:16,139 --> 01:29:19,199
output bits are independent and

1967
01:29:19,199 --> 01:29:21,600
identically distributed because in

1968
01:29:21,600 --> 01:29:23,159
theory there is no State being

1969
01:29:23,159 --> 01:29:25,560
transformed from one bit generation to

1970
01:29:25,560 --> 01:29:27,719
another

1971
01:29:27,719 --> 01:29:30,719
um so we generated uh consecutive

1972
01:29:30,719 --> 01:29:33,480
counter outputs and checked for

1973
01:29:33,480 --> 01:29:35,219
correlation no evidence of correlation

1974
01:29:35,219 --> 01:29:37,440
was found and the second thing we did

1975
01:29:37,440 --> 01:29:40,380
was we applied the nist SP 890b IID

1976
01:29:40,380 --> 01:29:43,199
tests and again no uh evidence of

1977
01:29:43,199 --> 01:29:46,080
dependency was found

1978
01:29:46,080 --> 01:29:48,719
uh we also validated validated the

1979
01:29:48,719 --> 01:29:50,699
entropy and we observed that all five

1980
01:29:50,699 --> 01:29:53,040
devices tested were able to achieve the

1981
01:29:53,040 --> 01:29:55,860
minimal minimally required 0.91 bit

1982
01:29:55,860 --> 01:30:00,199
entropy density at the output

1983
01:30:00,600 --> 01:30:02,400
um at the end we also check for

1984
01:30:02,400 --> 01:30:04,679
throughput and power so we observe that

1985
01:30:04,679 --> 01:30:07,920
all devices were able to produce a

1986
01:30:07,920 --> 01:30:10,260
throughput of higher than 250 megabits

1987
01:30:10,260 --> 01:30:12,540
per seconds which is uh the highest

1988
01:30:12,540 --> 01:30:16,739
reported so far for Jitter based tngs

1989
01:30:16,739 --> 01:30:20,159
um the output minimum entropy was always

1990
01:30:20,159 --> 01:30:23,400
above the 0.91 threshold for all voltage

1991
01:30:23,400 --> 01:30:25,340
levels both Under and Over voltage

1992
01:30:25,340 --> 01:30:27,300
levels tested

1993
01:30:27,300 --> 01:30:28,860
and we achieved the best Energy

1994
01:30:28,860 --> 01:30:31,500
Efficiency of 1.46 Pico joules per bit

1995
01:30:31,500 --> 01:30:34,860
which is highest energy a lowest Energy

1996
01:30:34,860 --> 01:30:37,620
Efficiency best Energy Efficiency but

1997
01:30:37,620 --> 01:30:41,520
lowest energy reported so far

1998
01:30:41,520 --> 01:30:43,320
um so to conclude

1999
01:30:43,320 --> 01:30:46,560
uh we presented here a entropy Source

2000
01:30:46,560 --> 01:30:48,600
architecture design and verification

2001
01:30:48,600 --> 01:30:51,540
method uh which was fabricated in a 28

2002
01:30:51,540 --> 01:30:54,120
nanometer technology uh the design is

2003
01:30:54,120 --> 01:30:56,400
compatible with modern standards uh the

2004
01:30:56,400 --> 01:30:58,560
Jitter pipelining architecture should

2005
01:30:58,560 --> 01:31:01,440
allow for efficient entropy generation

2006
01:31:01,440 --> 01:31:04,739
both in terms of area and energy usage

2007
01:31:04,739 --> 01:31:07,380
the structure is All Digital which means

2008
01:31:07,380 --> 01:31:10,380
it will benefit from further scaling and

2009
01:31:10,380 --> 01:31:11,699
would

2010
01:31:11,699 --> 01:31:14,760
uh would would make it easy to integrate

2011
01:31:14,760 --> 01:31:17,639
with other digital components there is

2012
01:31:17,639 --> 01:31:19,800
also stochastic model available which is

2013
01:31:19,800 --> 01:31:23,580
capable of creating an entropy estimate

2014
01:31:23,580 --> 01:31:25,500
we have on-shaped Jitter measurements

2015
01:31:25,500 --> 01:31:28,020
and we have an optimization scheme which

2016
01:31:28,020 --> 01:31:30,659
should guide the designer to for

2017
01:31:30,659 --> 01:31:32,580
parameter selection

2018
01:31:32,580 --> 01:31:35,239
thank you

2019
01:31:40,920 --> 01:31:43,760
any questions

2020
01:31:46,760 --> 01:31:50,460
okay there is a question online that did

2021
01:31:50,460 --> 01:31:53,100
you check bias correlation and channel

2022
01:31:53,100 --> 01:31:54,719
entropy

2023
01:31:54,719 --> 01:31:58,080
um I'm not sure actually a is 31 bonds

2024
01:31:58,080 --> 01:32:01,880
with much more samples like 2 to the 30

2025
01:32:01,880 --> 01:32:06,060
instead of just using 4 000 values

2026
01:32:06,060 --> 01:32:08,520
yeah so um

2027
01:32:08,520 --> 01:32:12,060
so yeah we checked for entropy because I

2028
01:32:12,060 --> 01:32:13,980
asked for Shannon entropy but yeah we

2029
01:32:13,980 --> 01:32:16,080
always reported men entropy but there is

2030
01:32:16,080 --> 01:32:19,080
a one-to-one relation between this

2031
01:32:19,080 --> 01:32:22,380
um and yeah these things are are related

2032
01:32:22,380 --> 01:32:24,420
to buyers and entropy so these are also

2033
01:32:24,420 --> 01:32:25,560
fine

2034
01:32:25,560 --> 01:32:26,880
um then there was a question about the

2035
01:32:26,880 --> 01:32:29,940
amount of data we use so maybe there is

2036
01:32:29,940 --> 01:32:31,860
a confusion so the

2037
01:32:31,860 --> 01:32:34,260
only the IID test the correlation test

2038
01:32:34,260 --> 01:32:37,020
was performed with 4096 counter values

2039
01:32:37,020 --> 01:32:40,020
the other ones were all um performed

2040
01:32:40,020 --> 01:32:42,060
with more than one at least one megabit

2041
01:32:42,060 --> 01:32:45,120
of consecutively generated bits

2042
01:32:45,120 --> 01:32:49,340
okay thank you there is a question there

2043
01:32:56,580 --> 01:32:58,920
thanks a lot for an interesting talk

2044
01:32:58,920 --> 01:33:00,360
um how

2045
01:33:00,360 --> 01:33:02,400
um difficult would it be to transfer

2046
01:33:02,400 --> 01:33:04,679
this to a different technology node do

2047
01:33:04,679 --> 01:33:05,820
you think

2048
01:33:05,820 --> 01:33:08,400
I guess it's fairly easy to do this

2049
01:33:08,400 --> 01:33:11,280
because it's a fully digital design

2050
01:33:11,280 --> 01:33:13,980
um all the the blocks here are just

2051
01:33:13,980 --> 01:33:16,800
regular CMOS logic so I guess there is

2052
01:33:16,800 --> 01:33:18,600
not much effort to transfer this of

2053
01:33:18,600 --> 01:33:19,980
course you still need to fine tune the

2054
01:33:19,980 --> 01:33:22,440
parameters a bit because of the

2055
01:33:22,440 --> 01:33:24,179
interesting catalase might be slightly

2056
01:33:24,179 --> 01:33:26,159
different but the effort should be

2057
01:33:26,159 --> 01:33:28,739
fairly low uh especially compared to

2058
01:33:28,739 --> 01:33:30,840
other TNG designs

2059
01:33:30,840 --> 01:33:33,360
okay for the last question I have to run

2060
01:33:33,360 --> 01:33:35,599
again

2061
01:33:42,120 --> 01:33:44,340
thanks for the interesting talk

2062
01:33:44,340 --> 01:33:46,560
um I was wondering if you had considered

2063
01:33:46,560 --> 01:33:49,020
uh fault attacks at all and how it might

2064
01:33:49,020 --> 01:33:52,139
impact the circuit but now we didn't uh

2065
01:33:52,139 --> 01:33:54,360
do anything of that kind of work but

2066
01:33:54,360 --> 01:33:56,820
that would be an interesting future work

2067
01:33:56,820 --> 01:34:00,780
of course but for now yeah intuitively I

2068
01:34:00,780 --> 01:34:02,580
would say because the the architecture

2069
01:34:02,580 --> 01:34:04,800
is fully differential so if you for

2070
01:34:04,800 --> 01:34:06,960
example play with power lines the

2071
01:34:06,960 --> 01:34:08,580
effects would be somewhat reduced but

2072
01:34:08,580 --> 01:34:11,460
still it's hard to tell at this moment

2073
01:34:11,460 --> 01:34:13,860
I look forward to hearing your future

2074
01:34:13,860 --> 01:34:16,800
investigations thank you

2075
01:34:16,800 --> 01:34:19,440
okay thank you so much and let's thank

2076
01:34:19,440 --> 01:34:22,879
all the speakers of the sessions

2077
01:34:28,020 --> 01:34:29,940
before you leave there is something from

2078
01:34:29,940 --> 01:34:32,400
Benedict yes so please please stay in

2079
01:34:32,400 --> 01:34:33,540
the room for one minute let the yellow

2080
01:34:33,540 --> 01:34:35,100
shirts guys first get into their

2081
01:34:35,100 --> 01:34:37,139
positions to guide you out we have been

2082
01:34:37,139 --> 01:34:39,120
informed that the 900 students that were

2083
01:34:39,120 --> 01:34:40,739
in the other Auditorium have left the

2084
01:34:40,739 --> 01:34:44,639
building and coffee is ready so just you

2085
01:34:44,639 --> 01:34:46,260
guys distribute please and then they

2086
01:34:46,260 --> 01:34:48,540
guide you back to the coffee break thank

2087
01:34:48,540 --> 01:34:50,659
you

2088
01:34:53,340 --> 01:34:55,520
thank you

