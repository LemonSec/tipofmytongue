1
00:00:06,240 --> 00:00:09,240
foreign

2
00:00:30,720 --> 00:00:32,170
speakers

3
00:00:32,170 --> 00:00:35,310
[Music]

4
00:00:35,760 --> 00:00:37,079
here

5
00:00:37,079 --> 00:00:39,780
you are so yeah you can put that

6
00:00:39,780 --> 00:00:42,719
somewhere on your browser it also has a

7
00:00:42,719 --> 00:00:45,980
slider for muting the microphone so here

8
00:00:45,980 --> 00:00:50,039
if you switch this slider up okay uh you

9
00:00:50,039 --> 00:00:51,539
unmute yourself because it's currently

10
00:00:51,539 --> 00:00:53,460
it's muted okay but you need to do that

11
00:00:53,460 --> 00:00:56,480
before you start speaking

12
00:01:00,059 --> 00:01:02,399
maybe like we make it closer to your

13
00:01:02,399 --> 00:01:04,019
mouth because otherwise it's a bit

14
00:01:04,019 --> 00:01:05,700
silent

15
00:01:05,700 --> 00:01:07,680
I just feel like

16
00:01:07,680 --> 00:01:10,159
like that okay

17
00:01:10,159 --> 00:01:13,320
so here you have microphone here make

18
00:01:13,320 --> 00:01:14,939
sure to put you yourself at the right

19
00:01:14,939 --> 00:01:17,640
moment because currently it's new

20
00:01:17,640 --> 00:01:19,619
perfect and then

21
00:01:19,619 --> 00:01:23,360
we started

22
00:01:29,040 --> 00:01:31,820
thank you

23
00:01:49,560 --> 00:01:51,360
hello everyone

24
00:01:51,360 --> 00:01:54,979
I think this is that working

25
00:02:01,500 --> 00:02:03,920
okay

26
00:02:04,560 --> 00:02:07,380
hi everyone welcome back from the coffee

27
00:02:07,380 --> 00:02:11,119
break I hope no

28
00:02:11,340 --> 00:02:13,260
very close to my mouth I think that

29
00:02:13,260 --> 00:02:16,080
works now right okay okay uh welcome

30
00:02:16,080 --> 00:02:18,239
back after the coffee break

31
00:02:18,239 --> 00:02:21,599
um I hope you got refreshed a bit uh I

32
00:02:21,599 --> 00:02:24,180
see still people coming in but we are

33
00:02:24,180 --> 00:02:26,819
four minutes till late so I think we can

34
00:02:26,819 --> 00:02:29,819
already start and then uh people can

35
00:02:29,819 --> 00:02:32,940
catch up later uh the the this session

36
00:02:32,940 --> 00:02:35,280
is about leakage resilience and masking

37
00:02:35,280 --> 00:02:37,260
verification

38
00:02:37,260 --> 00:02:39,239
um and we have four talks in this

39
00:02:39,239 --> 00:02:41,700
session uh the first one being on the

40
00:02:41,700 --> 00:02:45,480
deacons resilience of OCB uh and roma is

41
00:02:45,480 --> 00:02:47,700
going to give the presentation

42
00:02:47,700 --> 00:02:49,440
test okay

43
00:02:49,440 --> 00:02:51,420
thank you for the introduction I'm going

44
00:02:51,420 --> 00:02:54,120
to present the result of a joint work uh

45
00:02:54,120 --> 00:02:56,459
between the university Catholic de luva

46
00:02:56,459 --> 00:02:59,459
and the 99 Technological University

47
00:02:59,459 --> 00:03:02,519
where we investigated the security of

48
00:03:02,519 --> 00:03:04,440
all the different parts of the OCB mode

49
00:03:04,440 --> 00:03:05,519
of encryption

50
00:03:05,519 --> 00:03:07,680
going in details to see which part are

51
00:03:07,680 --> 00:03:09,720
easy to attack which one are harder and

52
00:03:09,720 --> 00:03:12,360
everything until deep down first I'm

53
00:03:12,360 --> 00:03:15,420
gonna give an introduction of OCB see

54
00:03:15,420 --> 00:03:17,280
how it works I'm going to show what I

55
00:03:17,280 --> 00:03:18,900
call trivial attacks

56
00:03:18,900 --> 00:03:20,700
then I'm going to introduce the first of

57
00:03:20,700 --> 00:03:22,379
us protection where we're going to

58
00:03:22,379 --> 00:03:23,700
assume that a designer would have

59
00:03:23,700 --> 00:03:25,500
protected his implementation again this

60
00:03:25,500 --> 00:03:27,840
trivial attacks and we're gonna see what

61
00:03:27,840 --> 00:03:29,580
we can do then

62
00:03:29,580 --> 00:03:31,260
so we're going to introduce two attacks

63
00:03:31,260 --> 00:03:32,640
which is one of called the Baseline the

64
00:03:32,640 --> 00:03:34,620
other one called the improved one

65
00:03:34,620 --> 00:03:36,239
and then again we're going to do a

66
00:03:36,239 --> 00:03:38,459
second level of protection where we're

67
00:03:38,459 --> 00:03:39,720
going to assume that this attack cannot

68
00:03:39,720 --> 00:03:41,400
be done anymore because the designer has

69
00:03:41,400 --> 00:03:43,500
again protected the seven implementation

70
00:03:43,500 --> 00:03:46,200
against them and we're gonna see what we

71
00:03:46,200 --> 00:03:47,940
can do then in that case and then I will

72
00:03:47,940 --> 00:03:49,440
conclude

73
00:03:49,440 --> 00:03:50,580
okay

74
00:03:50,580 --> 00:03:54,000
so OCB version 3 is the authenticated

75
00:03:54,000 --> 00:03:56,159
mode of encryption one of the Cesar

76
00:03:56,159 --> 00:03:58,560
competition finalists it's not misuse

77
00:03:58,560 --> 00:04:00,599
resistance and by design it does not

78
00:04:00,599 --> 00:04:03,480
claim any protection uh against such an

79
00:04:03,480 --> 00:04:06,000
attack meaning that a designer should

80
00:04:06,000 --> 00:04:08,280
normally protect everything strongly to

81
00:04:08,280 --> 00:04:10,379
be protected against them

82
00:04:10,379 --> 00:04:12,420
but in practice if we want to attack a

83
00:04:12,420 --> 00:04:14,519
mode of encryption it can differ from a

84
00:04:14,519 --> 00:04:17,279
usual case when we do a such an attack

85
00:04:17,279 --> 00:04:19,620
let's say on the AES and we can choose

86
00:04:19,620 --> 00:04:21,238
our plain text or know the plaintext and

87
00:04:21,238 --> 00:04:23,160
we just run our attack impressive can

88
00:04:23,160 --> 00:04:24,900
differ quite much which is why in this

89
00:04:24,900 --> 00:04:27,000
study we actually looked into the mode

90
00:04:27,000 --> 00:04:28,800
of encryption OCB

91
00:04:28,800 --> 00:04:31,080
we look at every single part and we see

92
00:04:31,080 --> 00:04:33,180
which one are easy to attack and which

93
00:04:33,180 --> 00:04:35,220
one are harder and could be slightly

94
00:04:35,220 --> 00:04:36,540
less protected

95
00:04:36,540 --> 00:04:38,880
and a bit of terminology in this talk

96
00:04:38,880 --> 00:04:41,160
when I will say DPA I will mean any

97
00:04:41,160 --> 00:04:44,300
attack that use varying plain text

98
00:04:44,300 --> 00:04:46,800
to run independently of the

99
00:04:46,800 --> 00:04:48,479
distinguisher that is used whether it is

100
00:04:48,479 --> 00:04:50,940
Mia CPA template or whatever

101
00:04:50,940 --> 00:04:53,820
and when I will say SBA I mean any

102
00:04:53,820 --> 00:04:56,940
attack that only use a fixed plain text

103
00:04:56,940 --> 00:04:59,220
value again independently of the side

104
00:04:59,220 --> 00:05:01,620
service distinguisher

105
00:05:01,620 --> 00:05:04,259
so this is the overview of OCD

106
00:05:04,259 --> 00:05:07,740
and the thing we need to know is um on

107
00:05:07,740 --> 00:05:10,560
the top left we have uh initialization

108
00:05:10,560 --> 00:05:12,300
function that depends on the nodes and

109
00:05:12,300 --> 00:05:15,479
gonna create a value Delta zero and this

110
00:05:15,479 --> 00:05:17,220
value Delta 0 is going to be used to

111
00:05:17,220 --> 00:05:20,280
create many Delta I values through an

112
00:05:20,280 --> 00:05:22,560
incrementation so Delta 1 is from Delta

113
00:05:22,560 --> 00:05:25,380
0 Delta 2 is from Delta 1 and so on

114
00:05:25,380 --> 00:05:27,240
and this is what we call the whitening

115
00:05:27,240 --> 00:05:28,199
values

116
00:05:28,199 --> 00:05:29,940
then for the message block processing

117
00:05:29,940 --> 00:05:31,680
each measures block is processed

118
00:05:31,680 --> 00:05:34,080
independently is first asks the message

119
00:05:34,080 --> 00:05:36,419
Mi is exiled with the whitening value

120
00:05:36,419 --> 00:05:38,280
Delta I it then goes through the block

121
00:05:38,280 --> 00:05:40,380
cipherit exot again and then produces a

122
00:05:40,380 --> 00:05:41,699
text

123
00:05:41,699 --> 00:05:43,440
finally we have a checksum which is the

124
00:05:43,440 --> 00:05:45,960
sum of all the plain text to produce the

125
00:05:45,960 --> 00:05:48,180
tag and I don't show here but we also

126
00:05:48,180 --> 00:05:49,259
have the processing of the associate

127
00:05:49,259 --> 00:05:50,699
data

128
00:05:50,699 --> 00:05:53,220
I zoom a bit more into the two

129
00:05:53,220 --> 00:05:55,680
initialization function so first we have

130
00:05:55,680 --> 00:05:58,860
init which roughly speaking is just uh

131
00:05:58,860 --> 00:06:00,660
the encryption of the nouns using the

132
00:06:00,660 --> 00:06:03,240
block Cipher with the master key was not

133
00:06:03,240 --> 00:06:04,380
exactly that but that's the only thing

134
00:06:04,380 --> 00:06:07,020
we need to know so the earlier known

135
00:06:07,020 --> 00:06:09,120
here to produce is data zero is the

136
00:06:09,120 --> 00:06:10,500
master key

137
00:06:10,500 --> 00:06:12,479
and the nodes of court is known

138
00:06:12,479 --> 00:06:14,039
then we have the incrementation function

139
00:06:14,039 --> 00:06:15,900
to produce all the whitening value so

140
00:06:15,900 --> 00:06:17,820
slightly more complicated but basically

141
00:06:17,820 --> 00:06:19,800
first we're going to produce this value

142
00:06:19,800 --> 00:06:21,479
L star that we see which is the

143
00:06:21,479 --> 00:06:24,060
encryption of the value 0 with the block

144
00:06:24,060 --> 00:06:25,259
Cipher

145
00:06:25,259 --> 00:06:26,639
then it's going to be doubled where

146
00:06:26,639 --> 00:06:28,319
double just means the multiplication by

147
00:06:28,319 --> 00:06:31,500
two on the finite field until we get the

148
00:06:31,500 --> 00:06:34,319
value l0 and then from SEO we press L1

149
00:06:34,319 --> 00:06:37,020
where L1 is 2 times l0 and 2 is 2 times

150
00:06:37,020 --> 00:06:39,300
L1 and so on and so on and so on

151
00:06:39,300 --> 00:06:42,419
and thanks to all this Li we're going to

152
00:06:42,419 --> 00:06:44,400
compute the whitening values Delta I

153
00:06:44,400 --> 00:06:47,340
where Delta 1 is Delta 0 plus l0 Delta 2

154
00:06:47,340 --> 00:06:50,100
is Delta 1 plus N1 and so on and the

155
00:06:50,100 --> 00:06:52,800
index of the Y the L value that is used

156
00:06:52,800 --> 00:06:55,800
depends on the index I

157
00:06:55,800 --> 00:06:57,479
okay

158
00:06:57,479 --> 00:07:01,319
so as I said uh uh while OCB does not

159
00:07:01,319 --> 00:07:03,120
provide any inherent resistance against

160
00:07:03,120 --> 00:07:05,160
such an attacks actually if you want to

161
00:07:05,160 --> 00:07:07,560
attack it can differ from the attacking

162
00:07:07,560 --> 00:07:09,660
a normal the normal setting when we want

163
00:07:09,660 --> 00:07:12,180
to attack a block Cipher

164
00:07:12,180 --> 00:07:14,580
and the first thing we looked at is what

165
00:07:14,580 --> 00:07:16,800
we call trivial attacks is the place in

166
00:07:16,800 --> 00:07:18,900
OCB where actually it's the same as

167
00:07:18,900 --> 00:07:21,419
attacking let's say the AIS where we

168
00:07:21,419 --> 00:07:23,699
know the plain text and we found a few

169
00:07:23,699 --> 00:07:25,259
of them I'm just going to give the

170
00:07:25,259 --> 00:07:26,580
example of the decryption but for

171
00:07:26,580 --> 00:07:27,479
example

172
00:07:27,479 --> 00:07:29,699
uh if we want to attack the OCB

173
00:07:29,699 --> 00:07:32,400
decryption in that case we can use the

174
00:07:32,400 --> 00:07:34,080
same nouns many times

175
00:07:34,080 --> 00:07:36,060
which mean that the whitening values

176
00:07:36,060 --> 00:07:38,460
would be fixed

177
00:07:38,460 --> 00:07:40,380
and then the attacker could just do a

178
00:07:40,380 --> 00:07:42,840
normal DPA attack on a chosen ciphertext

179
00:07:42,840 --> 00:07:45,240
or known ciphertext except that it would

180
00:07:45,240 --> 00:07:47,160
be in two parts because in the first

181
00:07:47,160 --> 00:07:48,840
part you would try to recover the key

182
00:07:48,840 --> 00:07:50,699
exalt with the whitening value which

183
00:07:50,699 --> 00:07:52,740
would be the secret one this is known

184
00:07:52,740 --> 00:07:55,680
you could just then predict the the

185
00:07:55,680 --> 00:07:57,240
output of the first round then attack

186
00:07:57,240 --> 00:08:00,360
the second round and recover the key

187
00:08:00,360 --> 00:08:02,099
we also have the same thing for the

188
00:08:02,099 --> 00:08:04,259
initialization we have this for the

189
00:08:04,259 --> 00:08:06,300
processing of the associate data the

190
00:08:06,300 --> 00:08:07,979
associated data

191
00:08:07,979 --> 00:08:10,620
and we also have this uh for the last

192
00:08:10,620 --> 00:08:14,039
message block if it's incomplete

193
00:08:14,039 --> 00:08:15,240
okay

194
00:08:15,240 --> 00:08:16,680
so now

195
00:08:16,680 --> 00:08:18,419
we've seen this part that are just

196
00:08:18,419 --> 00:08:20,039
trivial to attack using inside channel

197
00:08:20,039 --> 00:08:21,780
so what we're going to do is that we're

198
00:08:21,780 --> 00:08:23,160
going to assume that the designer would

199
00:08:23,160 --> 00:08:24,599
have very strongly protected them

200
00:08:24,599 --> 00:08:26,039
against side channels

201
00:08:26,039 --> 00:08:28,319
we don't know how but it did and we're

202
00:08:28,319 --> 00:08:29,699
gonna look we're gonna assume that we

203
00:08:29,699 --> 00:08:31,259
can't attack them right now and we're

204
00:08:31,259 --> 00:08:33,000
going to look at what we can do

205
00:08:33,000 --> 00:08:35,520
so we assume that we can't Target OCB

206
00:08:35,520 --> 00:08:37,440
decryption Precision of associated data

207
00:08:37,440 --> 00:08:39,419
the initialization and the last message

208
00:08:39,419 --> 00:08:41,039
block

209
00:08:41,039 --> 00:08:43,620
so what we have now is just the

210
00:08:43,620 --> 00:08:45,180
processing of the

211
00:08:45,180 --> 00:08:46,740
the main part of the CV which is the

212
00:08:46,740 --> 00:08:49,560
encryption of each message block

213
00:08:49,560 --> 00:08:51,060
and here we can see that we have a

214
00:08:51,060 --> 00:08:54,480
little problem which is that uh OCB is

215
00:08:54,480 --> 00:08:56,399
not misuse resistant

216
00:08:56,399 --> 00:08:58,860
meaning that these whitening values are

217
00:08:58,860 --> 00:09:00,959
not known to the attacker and they

218
00:09:00,959 --> 00:09:02,880
change every time

219
00:09:02,880 --> 00:09:05,100
so we don't know the input of the block

220
00:09:05,100 --> 00:09:07,680
Cipher by the way I'm going to assume

221
00:09:07,680 --> 00:09:10,080
the Das so it's OCB using the as the

222
00:09:10,080 --> 00:09:11,760
block Cipher

223
00:09:11,760 --> 00:09:13,800
so it's like we attack the EAS but we

224
00:09:13,800 --> 00:09:15,540
don't know the message input

225
00:09:15,540 --> 00:09:17,399
so the first week we can do which we

226
00:09:17,399 --> 00:09:19,440
call the Baseline attack

227
00:09:19,440 --> 00:09:21,480
is actually just apply a second order

228
00:09:21,480 --> 00:09:23,820
attack basically considering that the

229
00:09:23,820 --> 00:09:26,339
whitening value is would be like a share

230
00:09:26,339 --> 00:09:28,500
in a first order implementation

231
00:09:28,500 --> 00:09:30,300
so we provide the attacker with two

232
00:09:30,300 --> 00:09:32,220
leakages the first one being on the

233
00:09:32,220 --> 00:09:34,320
frontal loading of the whitening value

234
00:09:34,320 --> 00:09:37,019
Delta 1. and the second one will be on

235
00:09:37,019 --> 00:09:39,899
the Xbox output and then we just apply a

236
00:09:39,899 --> 00:09:42,420
second order attack which give this

237
00:09:42,420 --> 00:09:44,100
result here so we did a custom

238
00:09:44,100 --> 00:09:47,100
implementation on OCB on the cortex m0

239
00:09:47,100 --> 00:09:49,140
for every attack you're going to see in

240
00:09:49,140 --> 00:09:51,120
the presentation we also we always do

241
00:09:51,120 --> 00:09:52,440
the same procedure where we first did

242
00:09:52,440 --> 00:09:54,120
the national analysis to find some point

243
00:09:54,120 --> 00:09:56,940
of Interest then the LDA for uh Point

244
00:09:56,940 --> 00:09:59,760
reductions and then a template attack

245
00:09:59,760 --> 00:10:02,760
we use 100K traces for the profiling and

246
00:10:02,760 --> 00:10:04,680
to produce this figure we use 20 plain

247
00:10:04,680 --> 00:10:06,779
texts each one being 80 000 message

248
00:10:06,779 --> 00:10:11,459
blocks so 1.6 million traces in total so

249
00:10:11,459 --> 00:10:13,080
when we apply the Baseline attack on our

250
00:10:13,080 --> 00:10:16,140
implementation for rsnr level we needed

251
00:10:16,140 --> 00:10:19,380
around 125 traces to to recover the

252
00:10:19,380 --> 00:10:20,880
master key

253
00:10:20,880 --> 00:10:22,220
okay

254
00:10:22,220 --> 00:10:25,320
so as I said it's a second order attack

255
00:10:25,320 --> 00:10:26,399
so of course there is a link with

256
00:10:26,399 --> 00:10:27,779
masking

257
00:10:27,779 --> 00:10:30,240
and in order to analyze this link we did

258
00:10:30,240 --> 00:10:32,399
some I.T analysis

259
00:10:32,399 --> 00:10:34,500
which is shown here on this graph this

260
00:10:34,500 --> 00:10:37,860
is on simulation uh so we looked at

261
00:10:37,860 --> 00:10:39,720
three implementation one for unprotected

262
00:10:39,720 --> 00:10:42,240
as one for a mask as and one for the

263
00:10:42,240 --> 00:10:43,560
Baseline attack

264
00:10:43,560 --> 00:10:46,560
against OCB and we plotted the mutual

265
00:10:46,560 --> 00:10:48,180
information between the leakage and the

266
00:10:48,180 --> 00:10:50,700
key on the y-axis for different SNR

267
00:10:50,700 --> 00:10:53,640
values on the x-axis

268
00:10:53,640 --> 00:10:56,399
and as you know as you may know the

269
00:10:56,399 --> 00:10:57,720
rough is the number of choices to break

270
00:10:57,720 --> 00:10:59,579
an implementation is pretty much

271
00:10:59,579 --> 00:11:01,500
invertently proportional to the mutual

272
00:11:01,500 --> 00:11:02,579
information

273
00:11:02,579 --> 00:11:04,800
and what we can see here but mainly two

274
00:11:04,800 --> 00:11:05,820
things

275
00:11:05,820 --> 00:11:08,459
first uh so the red one which is the

276
00:11:08,459 --> 00:11:10,620
master yes and the yellow one which is

277
00:11:10,620 --> 00:11:12,360
the Baseline attack on the CV they have

278
00:11:12,360 --> 00:11:14,519
the same slope when the noise is high

279
00:11:14,519 --> 00:11:16,620
enough which means that indeed we

280
00:11:16,620 --> 00:11:18,360
exploit a statistical moment of order

281
00:11:18,360 --> 00:11:19,820
two

282
00:11:19,820 --> 00:11:23,279
so asymptotically we have the same

283
00:11:23,279 --> 00:11:25,200
security gain as for a mass

284
00:11:25,200 --> 00:11:26,820
implementation so the quality gain

285
00:11:26,820 --> 00:11:29,100
compared to the unprotected a yes

286
00:11:29,100 --> 00:11:31,079
but also we can see that the yellow

287
00:11:31,079 --> 00:11:34,019
curve is below the red one so it means

288
00:11:34,019 --> 00:11:36,000
that we have less information when

289
00:11:36,000 --> 00:11:38,160
attacking OCB meaning that it would be

290
00:11:38,160 --> 00:11:39,600
more secure when we do this Baseline

291
00:11:39,600 --> 00:11:42,720
attack and the reason is that we you see

292
00:11:42,720 --> 00:11:44,820
that on the on the bottom right

293
00:11:44,820 --> 00:11:46,800
that when we target when we use the

294
00:11:46,800 --> 00:11:49,200
leakage of the Xbox output for a must as

295
00:11:49,200 --> 00:11:50,220
the

296
00:11:50,220 --> 00:11:52,440
exorbing with the share which would be

297
00:11:52,440 --> 00:11:55,019
Delta 1 here is outside the Xbox and for

298
00:11:55,019 --> 00:11:57,720
OCB it's inside and it could be seen as

299
00:11:57,720 --> 00:11:59,940
a it's kind of the same thing you happen

300
00:11:59,940 --> 00:12:01,380
when you're using your product masking

301
00:12:01,380 --> 00:12:03,360
and you have a higher algebraic

302
00:12:03,360 --> 00:12:04,860
complexity

303
00:12:04,860 --> 00:12:07,820
foreign

304
00:12:08,220 --> 00:12:11,760
when we just look at it like this way we

305
00:12:11,760 --> 00:12:14,160
it's it seems that OCB provides some

306
00:12:14,160 --> 00:12:16,860
sort of sideline protection

307
00:12:16,860 --> 00:12:19,440
uh because it it kind of have the same

308
00:12:19,440 --> 00:12:22,620
leakages as for a mass implementation

309
00:12:22,620 --> 00:12:25,260
but actually we can do much more and uh

310
00:12:25,260 --> 00:12:28,620
we do what we call the improved attack

311
00:12:28,620 --> 00:12:31,019
that I summarize here I'm going to go in

312
00:12:31,019 --> 00:12:33,540
a bit more into details afterwards

313
00:12:33,540 --> 00:12:35,700
so instead the main difference that

314
00:12:35,700 --> 00:12:38,279
instead of for the attack for the

315
00:12:38,279 --> 00:12:40,740
guessing space instead of just searching

316
00:12:40,740 --> 00:12:43,740
over the different possible key values

317
00:12:43,740 --> 00:12:45,839
we add additional bits for the guessing

318
00:12:45,839 --> 00:12:48,720
space so one the the thing we will try

319
00:12:48,720 --> 00:12:50,700
to recover instead of the key is going

320
00:12:50,700 --> 00:12:54,180
to be the key X or our first initial y

321
00:12:54,180 --> 00:12:55,680
chaining value

322
00:12:55,680 --> 00:12:57,779
and we're going to add bits of the the

323
00:12:57,779 --> 00:12:59,399
value l0

324
00:12:59,399 --> 00:13:01,680
that we saw in the in initialization

325
00:13:01,680 --> 00:13:03,959
procedure into our guessing space for

326
00:13:03,959 --> 00:13:06,260
the attack

327
00:13:06,720 --> 00:13:08,639
doing that we're going to Target each

328
00:13:08,639 --> 00:13:10,920
byte of the AES

329
00:13:10,920 --> 00:13:12,420
and at the end we're going to recover

330
00:13:12,420 --> 00:13:14,700
the whole value for a key X or Delta

331
00:13:14,700 --> 00:13:15,720
zero

332
00:13:15,720 --> 00:13:16,740
foreign

333
00:13:16,740 --> 00:13:18,420
and with that we're going to be able to

334
00:13:18,420 --> 00:13:21,540
be to guess the output of the of the

335
00:13:21,540 --> 00:13:24,000
first round of the AES and then we can

336
00:13:24,000 --> 00:13:25,560
attack the second round because we can

337
00:13:25,560 --> 00:13:27,899
guess the values with a normal DPA and

338
00:13:27,899 --> 00:13:30,720
then recover the key k

339
00:13:30,720 --> 00:13:33,060
so I explain here a bit more why it

340
00:13:33,060 --> 00:13:34,260
works

341
00:13:34,260 --> 00:13:37,860
so this is the I uh what happened at the

342
00:13:37,860 --> 00:13:39,300
for the processing of its at the

343
00:13:39,300 --> 00:13:40,920
beginning of each message block so I'm

344
00:13:40,920 --> 00:13:43,560
assuming uh plain text of three message

345
00:13:43,560 --> 00:13:44,760
block

346
00:13:44,760 --> 00:13:47,579
so M1 is for EXO with the value Delta 1

347
00:13:47,579 --> 00:13:49,560
which is the first whitening value and

348
00:13:49,560 --> 00:13:51,660
then it goes through the add-on key and

349
00:13:51,660 --> 00:13:54,060
when we write it down we can see that

350
00:13:54,060 --> 00:13:57,420
it's equal to KX or Delta X or M1

351
00:13:57,420 --> 00:14:00,660
but we can rewrite it by putting Delta 0

352
00:14:00,660 --> 00:14:05,579
out which become key so Delta 0 0 1. we

353
00:14:05,579 --> 00:14:08,459
can do the same for M2 for M3 and so on

354
00:14:08,459 --> 00:14:10,680
and what we see that we always have one

355
00:14:10,680 --> 00:14:12,420
fixed value that never change which is

356
00:14:12,420 --> 00:14:14,820
key X or Delta zero

357
00:14:14,820 --> 00:14:16,260
we have the message that is of course

358
00:14:16,260 --> 00:14:17,339
known

359
00:14:17,339 --> 00:14:21,480
and if we would know the LI values

360
00:14:21,480 --> 00:14:23,339
we could just do a first order regular

361
00:14:23,339 --> 00:14:26,279
DPA where the what we would recover is

362
00:14:26,279 --> 00:14:29,040
the new secret material which is key X

363
00:14:29,040 --> 00:14:31,320
or Delta zero

364
00:14:31,320 --> 00:14:35,160
of course we don't know the LI values as

365
00:14:35,160 --> 00:14:36,300
an attacker

366
00:14:36,300 --> 00:14:38,940
so what we do is that we add them into

367
00:14:38,940 --> 00:14:40,680
our guessing space when we run the

368
00:14:40,680 --> 00:14:42,240
attack

369
00:14:42,240 --> 00:14:45,060
and of course if we had to add 8-bit of

370
00:14:45,060 --> 00:14:46,920
information for each Li that would be of

371
00:14:46,920 --> 00:14:48,540
course infeasible because to high

372
00:14:48,540 --> 00:14:51,420
complexity but due to the relation

373
00:14:51,420 --> 00:14:53,399
between the Allies it can be done more

374
00:14:53,399 --> 00:14:54,420
easily

375
00:14:54,420 --> 00:14:58,079
because L1 is equal to 2 times l0 L2 is

376
00:14:58,079 --> 00:15:00,779
equal to 2 times and one and so on

377
00:15:00,779 --> 00:15:04,019
so basically what I show here is that if

378
00:15:04,019 --> 00:15:06,959
we guess 10 bits of l0 it translates to

379
00:15:06,959 --> 00:15:10,560
9 bits of L1 we translate to 8 bit of L2

380
00:15:10,560 --> 00:15:12,000
and so on

381
00:15:12,000 --> 00:15:16,920
so overall if we had eight plus n Bits

382
00:15:16,920 --> 00:15:19,380
of guessing space on l0

383
00:15:19,380 --> 00:15:20,940
we're going to be able to guess the

384
00:15:20,940 --> 00:15:25,320
values of all the LI from 1 to n

385
00:15:25,320 --> 00:15:27,120
so of course it's still intact that's

386
00:15:27,120 --> 00:15:28,560
going to have a very high complexity

387
00:15:28,560 --> 00:15:30,300
because first we have eight bit of gas

388
00:15:30,300 --> 00:15:32,399
for our secret material then we have

389
00:15:32,399 --> 00:15:35,160
eight bit of gas for l0 and then the n

390
00:15:35,160 --> 00:15:37,320
Bits which is our attack parameter

391
00:15:37,320 --> 00:15:39,720
that's going to be allow us to use 2 to

392
00:15:39,720 --> 00:15:42,120
the N plus one traces so if you want to

393
00:15:42,120 --> 00:15:43,519
use two to the

394
00:15:43,519 --> 00:15:46,980
uh eight traces but then we need a

395
00:15:46,980 --> 00:15:49,980
complexity of two to twenty four

396
00:15:49,980 --> 00:15:53,399
but it's a first order attack so if we

397
00:15:53,399 --> 00:15:56,100
can run it then it's as efficient as a

398
00:15:56,100 --> 00:15:58,079
regular first order DPA

399
00:15:58,079 --> 00:16:00,600
so let's stretch demanding which is what

400
00:16:00,600 --> 00:16:03,120
we can see here uh this is the result of

401
00:16:03,120 --> 00:16:05,279
the attack so on the left is the

402
00:16:05,279 --> 00:16:07,680
Baseline that we saw earlier and on the

403
00:16:07,680 --> 00:16:09,000
right is the improved one for the same

404
00:16:09,000 --> 00:16:11,940
implementation uh so we set n such that

405
00:16:11,940 --> 00:16:13,740
the attack was visible

406
00:16:13,740 --> 00:16:16,740
and instead of needing 125 trades we

407
00:16:16,740 --> 00:16:18,779
were done in less than 10 traces so it

408
00:16:18,779 --> 00:16:21,959
was uh it's it's the same as a regular

409
00:16:21,959 --> 00:16:23,699
DPA on an unprotected implementation

410
00:16:23,699 --> 00:16:25,880
basically

411
00:16:25,880 --> 00:16:30,000
okay and finally now uh we're gonna

412
00:16:30,000 --> 00:16:32,420
assume that the designer went further

413
00:16:32,420 --> 00:16:36,720
and he protected strongly all the all

414
00:16:36,720 --> 00:16:39,600
the block Cipher calls so that we cannot

415
00:16:39,600 --> 00:16:42,600
exploit the Xbox output so we we assume

416
00:16:42,600 --> 00:16:44,519
that we're not we don't manage to export

417
00:16:44,519 --> 00:16:46,500
any leakage inside any of the block

418
00:16:46,500 --> 00:16:48,000
Cipher calls

419
00:16:48,000 --> 00:16:50,279
and we see what we can still do

420
00:16:50,279 --> 00:16:52,980
so the only thing we can use now

421
00:16:52,980 --> 00:16:54,360
as the leakage the only thing that's

422
00:16:54,360 --> 00:16:57,240
left for the attacker is the

423
00:16:57,240 --> 00:17:00,660
uh the xor between the the message and

424
00:17:00,660 --> 00:17:02,100
the whitening values

425
00:17:02,100 --> 00:17:04,079
so well we're going to attack this

426
00:17:04,079 --> 00:17:05,699
because that's the only thing we have

427
00:17:05,699 --> 00:17:07,559
and what we can see

428
00:17:07,559 --> 00:17:09,720
is that if we have a plain text of n

429
00:17:09,720 --> 00:17:10,939
blocks

430
00:17:10,939 --> 00:17:13,919
uh the value l0 is going to be loaded

431
00:17:13,919 --> 00:17:15,900
it's going to be used as over two times

432
00:17:15,900 --> 00:17:17,579
in total

433
00:17:17,579 --> 00:17:19,980
so we just do we're just going to do an

434
00:17:19,980 --> 00:17:22,220
Spa on l0 directly

435
00:17:22,220 --> 00:17:25,020
and this is what happened when we did it

436
00:17:25,020 --> 00:17:29,400
so here on the y-axis is the rank of the

437
00:17:29,400 --> 00:17:32,160
whole l0 value so the 128 bit

438
00:17:32,160 --> 00:17:34,020
on the way on the x-axis the number of

439
00:17:34,020 --> 00:17:36,360
traces we used and the blue the blue

440
00:17:36,360 --> 00:17:38,340
curve is the average rank of the of the

441
00:17:38,340 --> 00:17:39,419
whole l0

442
00:17:39,419 --> 00:17:40,740
and by the way

443
00:17:40,740 --> 00:17:43,200
so we did the attack on a weaker version

444
00:17:43,200 --> 00:17:44,940
of the implementation because it was a

445
00:17:44,940 --> 00:17:46,980
32-bit implementation for the xor and

446
00:17:46,980 --> 00:17:48,600
which was not really feasible for us to

447
00:17:48,600 --> 00:17:50,880
attack could plot was what we have so we

448
00:17:50,880 --> 00:17:53,039
Twisted it we made it weaker so that it

449
00:17:53,039 --> 00:17:56,340
do the EXO but bye bye so it it's a

450
00:17:56,340 --> 00:17:58,100
weaker implementation

451
00:17:58,100 --> 00:18:00,780
so we didn't manage to actually recover

452
00:18:00,780 --> 00:18:03,539
l0 because it's an spa and well Spa is

453
00:18:03,539 --> 00:18:04,440
very hard

454
00:18:04,440 --> 00:18:07,320
even if we have uh we can do average

455
00:18:07,320 --> 00:18:09,720
pretty much as much as we want

456
00:18:09,720 --> 00:18:12,120
but we still managed to met the to make

457
00:18:12,120 --> 00:18:14,580
the Run go below 2 to 32 which is a an

458
00:18:14,580 --> 00:18:16,679
arrayable range that's good enough let's

459
00:18:16,679 --> 00:18:17,520
say

460
00:18:17,520 --> 00:18:20,160
uh uh yeah and we also try to improve

461
00:18:20,160 --> 00:18:21,600
the attack by exploiting the relation

462
00:18:21,600 --> 00:18:23,460
between the different allies but the

463
00:18:23,460 --> 00:18:25,380
artifacts published anywhere because I

464
00:18:25,380 --> 00:18:27,539
couldn't find them

465
00:18:27,539 --> 00:18:29,780
okay

466
00:18:29,780 --> 00:18:33,059
and the artifacts published anywhere

467
00:18:33,059 --> 00:18:36,678
because I could not find the code

468
00:18:36,780 --> 00:18:38,820
sorry

469
00:18:38,820 --> 00:18:41,659
is it for me

470
00:18:42,179 --> 00:18:43,740
the question is I think are the

471
00:18:43,740 --> 00:18:46,440
artifacts published if I'm hearing it

472
00:18:46,440 --> 00:18:49,020
right I'm good I think the question is

473
00:18:49,020 --> 00:18:51,780
if the artifacts are published

474
00:18:51,780 --> 00:18:55,700
um is is open the artifact

475
00:18:56,160 --> 00:18:57,720
what artifact

476
00:18:57,720 --> 00:19:00,360
um I think the question is coming from

477
00:19:00,360 --> 00:19:03,620
um online right

478
00:19:04,140 --> 00:19:06,660
sorry okay let's uh

479
00:19:06,660 --> 00:19:09,059
all right that was awkward

480
00:19:09,059 --> 00:19:11,780
uh

481
00:19:12,120 --> 00:19:15,059
Okay so

482
00:19:15,059 --> 00:19:17,880
where was I now we're gonna assume that

483
00:19:17,880 --> 00:19:19,020
um

484
00:19:19,020 --> 00:19:21,059
the attacker managed to recover l0

485
00:19:21,059 --> 00:19:23,820
through the side Channel

486
00:19:23,820 --> 00:19:25,679
and we're gonna see what we can do with

487
00:19:25,679 --> 00:19:26,520
that

488
00:19:26,520 --> 00:19:29,820
and what we managed to do is the so we

489
00:19:29,820 --> 00:19:31,620
couldn't do a key recovery with the sole

490
00:19:31,620 --> 00:19:34,559
knowledge of l0 but we could still break

491
00:19:34,559 --> 00:19:35,700
the

492
00:19:35,700 --> 00:19:38,880
the integrity and confidentiality of OCB

493
00:19:38,880 --> 00:19:40,919
and here I show I'm not going to create

494
00:19:40,919 --> 00:19:42,960
a detail but the an example with the

495
00:19:42,960 --> 00:19:44,280
integrity

496
00:19:44,280 --> 00:19:47,100
so the attacker would do a query of the

497
00:19:47,100 --> 00:19:49,440
encryption of a message of three blocks

498
00:19:49,440 --> 00:19:52,320
M1 M2 and three with some nodes n

499
00:19:52,320 --> 00:19:53,700
and you would get the corresponding

500
00:19:53,700 --> 00:19:55,679
ciphertext you want c2c3 with the

501
00:19:55,679 --> 00:19:57,419
corresponding tag tool

502
00:19:57,419 --> 00:19:59,700
and we can from that we can just do a

503
00:19:59,700 --> 00:20:03,840
forgery where we would just use as the

504
00:20:03,840 --> 00:20:07,080
first ciphertext C2 instead of C1 xol1

505
00:20:07,080 --> 00:20:08,880
because then L1 is known since we

506
00:20:08,880 --> 00:20:10,559
recovered it through the side Channel

507
00:20:10,559 --> 00:20:13,740
the second one is C1 so L1 and C Street

508
00:20:13,740 --> 00:20:15,960
and change and we use the same tag and

509
00:20:15,960 --> 00:20:17,880
that would correspond to a very forgery

510
00:20:17,880 --> 00:20:20,400
for the plain text M2 plus L1 and one

511
00:20:20,400 --> 00:20:24,140
plus N1 M3 and the same nouns

512
00:20:24,140 --> 00:20:27,720
so to conclude uh as I said earlier at

513
00:20:27,720 --> 00:20:30,780
the beginning while OCD is not well is

514
00:20:30,780 --> 00:20:32,580
not designed to protect any to have any

515
00:20:32,580 --> 00:20:34,799
protection against side Channel by

516
00:20:34,799 --> 00:20:35,840
Design

517
00:20:35,840 --> 00:20:37,919
uh it's still interesting to look at

518
00:20:37,919 --> 00:20:39,539
every part of it because it's a mode of

519
00:20:39,539 --> 00:20:41,220
encryption and it's different from just

520
00:20:41,220 --> 00:20:42,900
attacking a primitive

521
00:20:42,900 --> 00:20:44,820
and actually we saw that some parts

522
00:20:44,820 --> 00:20:47,400
actually are actually are as easy to

523
00:20:47,400 --> 00:20:49,500
attack as the Primitive itself

524
00:20:49,500 --> 00:20:52,919
but we saw that the inner blocks are

525
00:20:52,919 --> 00:20:54,360
actually a bit more tricky to attack we

526
00:20:54,360 --> 00:20:56,100
could do either a second order attack

527
00:20:56,100 --> 00:20:58,020
which will suffer from the same Trace

528
00:20:58,020 --> 00:21:01,080
complexity as when attacking a first

529
00:21:01,080 --> 00:21:04,260
order mask AES actually slightly more

530
00:21:04,260 --> 00:21:06,120
and we can also design an efficient

531
00:21:06,120 --> 00:21:08,640
attack in terms of traces but that will

532
00:21:08,640 --> 00:21:10,559
cost a lot in terms of complexity but

533
00:21:10,559 --> 00:21:12,419
for the actual trade-off between the the

534
00:21:12,419 --> 00:21:15,000
complexity and the data

535
00:21:15,000 --> 00:21:16,860
and finally we saw that even if we

536
00:21:16,860 --> 00:21:20,039
protect all the block Cipher calls uh we

537
00:21:20,039 --> 00:21:21,240
can still have some leakage on the

538
00:21:21,240 --> 00:21:22,500
whitening values

539
00:21:22,500 --> 00:21:25,200
and of course even on 9 bit

540
00:21:25,200 --> 00:21:26,820
implementation it was kind of hard to do

541
00:21:26,820 --> 00:21:29,520
so on a higher larger architecture it's

542
00:21:29,520 --> 00:21:31,500
probably very hard to perform so it's

543
00:21:31,500 --> 00:21:33,720
more of a warning but if the attacker

544
00:21:33,720 --> 00:21:35,039
managed to get information on these

545
00:21:35,039 --> 00:21:36,179
values then

546
00:21:36,179 --> 00:21:38,100
uh even though we can't recover the key

547
00:21:38,100 --> 00:21:39,720
you can still break the integrity and

548
00:21:39,720 --> 00:21:42,000
confidentiality of ocv so let's go over

549
00:21:42,000 --> 00:21:42,960
morning

550
00:21:42,960 --> 00:21:46,620
and yeah of course uh if we want to have

551
00:21:46,620 --> 00:21:48,179
protection maybe some other mode would

552
00:21:48,179 --> 00:21:50,460
be preferred than OCB

553
00:21:50,460 --> 00:21:54,320
thank you and if you have any question

554
00:21:58,740 --> 00:22:00,659
for presentation I'm sorry for the

555
00:22:00,659 --> 00:22:03,240
interruption in the middle uh are there

556
00:22:03,240 --> 00:22:05,840
any questions

557
00:22:07,020 --> 00:22:09,480
from the audience

558
00:22:09,480 --> 00:22:11,640
um while you're thinking I don't see

559
00:22:11,640 --> 00:22:13,559
anything in chat as well I have a

560
00:22:13,559 --> 00:22:16,200
question about your platform uh you had

561
00:22:16,200 --> 00:22:18,360
evaluation can you elaborate a little

562
00:22:18,360 --> 00:22:20,640
bit more on the platform that you had

563
00:22:20,640 --> 00:22:23,220
done your Revelation on that is an m0

564
00:22:23,220 --> 00:22:25,380
was it right

565
00:22:25,380 --> 00:22:27,240
um yeah actually I think I was lying on

566
00:22:27,240 --> 00:22:27,960
this

567
00:22:27,960 --> 00:22:29,340
uh yeah

568
00:22:29,340 --> 00:22:33,179
so this is the details oh okay

569
00:22:33,179 --> 00:22:36,480
uh you don't want it's not it's not that

570
00:22:36,480 --> 00:22:38,280
relevant for the study so I didn't want

571
00:22:38,280 --> 00:22:40,740
to spend too much time but uh yeah it

572
00:22:40,740 --> 00:22:43,620
was on cortex m0 uh with a stm32

573
00:22:43,620 --> 00:22:45,240
discovery board

574
00:22:45,240 --> 00:22:49,140
we used power leakages and uh the team

575
00:22:49,140 --> 00:22:50,520
the implementation was optimized for

576
00:22:50,520 --> 00:22:52,260
32-bits but actually we Twisted it

577
00:22:52,260 --> 00:22:54,600
because it was easier to attack

578
00:22:54,600 --> 00:22:57,120
okay okay thank you

579
00:22:57,120 --> 00:22:59,239
um

580
00:23:01,980 --> 00:23:04,799
uh thank you very thank you for very

581
00:23:04,799 --> 00:23:07,020
very nice talk I have a question so you

582
00:23:07,020 --> 00:23:09,059
used the profile link

583
00:23:09,059 --> 00:23:12,720
and um do you do you have results for uh

584
00:23:12,720 --> 00:23:15,539
just CPA or like because you could do

585
00:23:15,539 --> 00:23:17,280
like second order attack I'm just

586
00:23:17,280 --> 00:23:19,220
curious how much the race is

587
00:23:19,220 --> 00:23:22,559
you mean uh

588
00:23:22,559 --> 00:23:24,900
for the Baseline one

589
00:23:24,900 --> 00:23:27,299
um yes because that's that's with

590
00:23:27,299 --> 00:23:29,760
profiling yeah you could do a second

591
00:23:29,760 --> 00:23:31,559
order CPA you could do anything you

592
00:23:31,559 --> 00:23:33,360
didn't write I'm just curious no that

593
00:23:33,360 --> 00:23:35,340
would work actually I mean we just use

594
00:23:35,340 --> 00:23:38,100
template as an example but in the end I

595
00:23:38,100 --> 00:23:39,900
just say GPA you can use whatever

596
00:23:39,900 --> 00:23:42,900
distinguisher you want profile unprofile

597
00:23:42,900 --> 00:23:45,480
any any woodwork no I was just curious

598
00:23:45,480 --> 00:23:48,299
like how the traces are like how many

599
00:23:48,299 --> 00:23:50,159
traces then you need easy I guess you

600
00:23:50,159 --> 00:23:51,360
would need a bit more of course because

601
00:23:51,360 --> 00:23:53,400
it's less optimal but yeah

602
00:23:53,400 --> 00:23:56,520
there there's training here so I mean

603
00:23:56,520 --> 00:23:58,679
all these traces here are plus the

604
00:23:58,679 --> 00:24:00,419
training in a way so but I was just

605
00:24:00,419 --> 00:24:03,120
curious it's okay it's clear okay thank

606
00:24:03,120 --> 00:24:05,299
you

607
00:24:13,220 --> 00:24:16,200
thanks for the next topic so regarding

608
00:24:16,200 --> 00:24:18,960
the evaluation from your information in

609
00:24:18,960 --> 00:24:24,720
page 14. so uh it's uh emulator and in

610
00:24:24,720 --> 00:24:26,580
an indicative model I don't hear you

611
00:24:26,580 --> 00:24:28,159
much sorry

612
00:24:28,159 --> 00:24:31,080
so so the evaluation of mutual Mission

613
00:24:31,080 --> 00:24:34,980
yeah uh it's it's under which which

614
00:24:34,980 --> 00:24:38,400
model it was actually

615
00:24:38,400 --> 00:24:42,059
so I there was an 8-bit platform that an

616
00:24:42,059 --> 00:24:43,980
old one I don't it was an Arduino board

617
00:24:43,980 --> 00:24:47,100
I took traces I did linear regression to

618
00:24:47,100 --> 00:24:49,919
get a linear basis and I used the basis

619
00:24:49,919 --> 00:24:52,500
I got to do the simulation so it's it's

620
00:24:52,500 --> 00:24:54,480
not coming where it's uh basically

621
00:24:54,480 --> 00:24:57,120
ponderated uh

622
00:24:57,120 --> 00:25:00,780
weight of the bits okay and also for

623
00:25:00,780 --> 00:25:02,100
this curve

624
00:25:02,100 --> 00:25:04,520
said that it's comparable to

625
00:25:04,520 --> 00:25:07,620
in-approductive masking so did you try

626
00:25:07,620 --> 00:25:10,740
and any comparison to the inner product

627
00:25:10,740 --> 00:25:13,799
capacity it's not exactly comparable

628
00:25:13,799 --> 00:25:17,700
it's just um if we

629
00:25:17,700 --> 00:25:19,860
if you do that it curves for inner

630
00:25:19,860 --> 00:25:21,179
product masking

631
00:25:21,179 --> 00:25:24,059
for some specific value of the of the

632
00:25:24,059 --> 00:25:26,580
law of the multiplicative

633
00:25:26,580 --> 00:25:28,440
you will see that the curve is below the

634
00:25:28,440 --> 00:25:30,120
one for Boolean sometimes you can even

635
00:25:30,120 --> 00:25:31,200
get

636
00:25:31,200 --> 00:25:33,419
a higher order security but

637
00:25:33,419 --> 00:25:35,700
it's just to show that just to explain

638
00:25:35,700 --> 00:25:37,860
that we have more algebraic complexity

639
00:25:37,860 --> 00:25:39,480
the same for our

640
00:25:39,480 --> 00:25:42,299
just to do some comparison

641
00:25:42,299 --> 00:25:45,200
okay thanks

642
00:25:48,600 --> 00:25:50,520
another question

643
00:25:50,520 --> 00:25:53,039
from the audience

644
00:25:53,039 --> 00:25:55,440
check once again

645
00:25:55,440 --> 00:25:57,659
um I don't see any other questions thank

646
00:25:57,659 --> 00:26:01,400
you very much for your talk

647
00:26:40,740 --> 00:26:43,140
okay now it's open

648
00:26:43,140 --> 00:26:45,799
okay

649
00:26:47,400 --> 00:26:50,720
so this is the slide

650
00:27:21,419 --> 00:27:24,679
all right excuse me

651
00:27:24,799 --> 00:27:26,580
face right

652
00:27:26,580 --> 00:27:29,120
okay

653
00:27:32,880 --> 00:27:34,500
okay

654
00:27:34,500 --> 00:27:35,880
um

655
00:27:35,880 --> 00:27:40,520
yeah we are Yes means okay

656
00:27:40,860 --> 00:27:44,220
okay I ready for the second talk uh the

657
00:27:44,220 --> 00:27:46,740
second Talk of the session is Triplex uh

658
00:27:46,740 --> 00:27:48,179
inefficient and OnePlus leakage

659
00:27:48,179 --> 00:27:49,860
resilient mode of operation and the top

660
00:27:49,860 --> 00:27:52,440
will be given by uh yoga

661
00:27:52,440 --> 00:27:55,440
yeah thank you for introduction uh today

662
00:27:55,440 --> 00:27:57,600
I'm going to introduce a new AE mode

663
00:27:57,600 --> 00:27:59,940
that's called Triplex and it is a

664
00:27:59,940 --> 00:28:03,480
leakage resistant uh authenticated in

665
00:28:03,480 --> 00:28:05,220
question and this is lecturing war with

666
00:28:05,220 --> 00:28:09,360
Thoma and Francois Sevilla and also

667
00:28:09,360 --> 00:28:12,120
uh keto and quarantine

668
00:28:12,120 --> 00:28:14,159
I will first some give some background

669
00:28:14,159 --> 00:28:17,779
and then introduce our new design

670
00:28:19,679 --> 00:28:21,900
or significantly encryption is what is

671
00:28:21,900 --> 00:28:25,080
the symmetric key uh primitive that can

672
00:28:25,080 --> 00:28:26,760
ensure the integrity and confidential

673
00:28:26,760 --> 00:28:28,919
entity at the same time

674
00:28:28,919 --> 00:28:32,760
uh usually uh typically for a skin it

675
00:28:32,760 --> 00:28:35,400
consists of three parts one is the key

676
00:28:35,400 --> 00:28:37,740
derivation function and also the

677
00:28:37,740 --> 00:28:39,600
majority processing function and also

678
00:28:39,600 --> 00:28:41,940
the Touch Generation function I usually

679
00:28:41,940 --> 00:28:44,460
uh take as input the lungs and the

680
00:28:44,460 --> 00:28:45,900
master key

681
00:28:45,900 --> 00:28:48,299
a lucky derivation function will produce

682
00:28:48,299 --> 00:28:50,820
a sub key and then the mesh G processing

683
00:28:50,820 --> 00:28:52,679
function will use this sub key to

684
00:28:52,679 --> 00:28:55,260
encrypt the message and produce the

685
00:28:55,260 --> 00:28:56,760
Cyber test and finally The Touch

686
00:28:56,760 --> 00:28:59,580
Generation function will encapsulate the

687
00:28:59,580 --> 00:29:02,460
final step to produce the tag

688
00:29:02,460 --> 00:29:05,279
but in practice we need to implement the

689
00:29:05,279 --> 00:29:07,880
ASCII in the device

690
00:29:07,880 --> 00:29:10,679
so we need to consider the liquid from

691
00:29:10,679 --> 00:29:13,740
the Decay from information attempt at a

692
00:29:13,740 --> 00:29:16,159
grocery

693
00:29:16,500 --> 00:29:19,200
so usually one of the

694
00:29:19,200 --> 00:29:22,620
a popular protection muscle against the

695
00:29:22,620 --> 00:29:24,899
sectional attack is masking

696
00:29:24,899 --> 00:29:27,600
in politics uh we usually we need to

697
00:29:27,600 --> 00:29:30,240
protect uh every path like the example

698
00:29:30,240 --> 00:29:34,200
in OCB so if you use the masking to

699
00:29:34,200 --> 00:29:37,440
protect every part usually the of the

700
00:29:37,440 --> 00:29:38,520
period

701
00:29:38,520 --> 00:29:41,159
result in a significant performance

702
00:29:41,159 --> 00:29:43,140
overhead

703
00:29:43,140 --> 00:29:46,260
so how to improve the performance uh

704
00:29:46,260 --> 00:29:49,200
one of the credible idea is called by

705
00:29:49,200 --> 00:29:51,960
the level implementation let's introduce

706
00:29:51,960 --> 00:29:55,860
in the CCS 2019 the my idea is that we

707
00:29:55,860 --> 00:29:58,200
can avoid equally protecting or parts of

708
00:29:58,200 --> 00:30:01,020
the implementation but before that we

709
00:30:01,020 --> 00:30:03,299
need to identify the protection level of

710
00:30:03,299 --> 00:30:05,039
each part and then we can obtain the

711
00:30:05,039 --> 00:30:06,720
performance scans

712
00:30:06,720 --> 00:30:09,720
uh for example there's a paper that is

713
00:30:09,720 --> 00:30:13,380
published in FSC uh given the AES

714
00:30:13,380 --> 00:30:16,580
example actually regarding the Integrity

715
00:30:16,580 --> 00:30:19,140
usually we can only protect the first

716
00:30:19,140 --> 00:30:23,399
part okay the relation function tax

717
00:30:23,399 --> 00:30:25,140
generation function while the main part

718
00:30:25,140 --> 00:30:29,399
they deal with the mhq uh actually you

719
00:30:29,399 --> 00:30:32,399
can request uh no protection at all

720
00:30:32,399 --> 00:30:35,100
so it means that we only need to have a

721
00:30:35,100 --> 00:30:37,679
ptta protection for a first part and the

722
00:30:37,679 --> 00:30:40,919
final part here

723
00:30:40,919 --> 00:30:43,980
uh and I'll give some example for the

724
00:30:43,980 --> 00:30:47,000
leakage reached an AE mode

725
00:30:47,000 --> 00:30:50,760
and this uh my talk is only focus on the

726
00:30:50,760 --> 00:30:54,179
OnePlus mode and typically layers 2

727
00:30:54,179 --> 00:30:57,299
security go one is the cm2 and CCA ml1

728
00:30:57,299 --> 00:30:59,880
in the leakage resistance setting for

729
00:30:59,880 --> 00:31:02,880
the crm2 is for integrated it is the

730
00:31:02,880 --> 00:31:04,799
abbreviation of the Cyber test in grade

731
00:31:04,799 --> 00:31:07,620
t with lungs misuse resistant leakage in

732
00:31:07,620 --> 00:31:09,600
both encryption decryption

733
00:31:09,600 --> 00:31:13,700
but for confidentiality uh it is the

734
00:31:13,700 --> 00:31:17,039
CCI with misuse resilient and leakage in

735
00:31:17,039 --> 00:31:18,320
encryption

736
00:31:18,320 --> 00:31:21,539
for confidential confidentiality we only

737
00:31:21,539 --> 00:31:23,820
consider leakage in caption because if

738
00:31:23,820 --> 00:31:26,640
we want to receive dedication the

739
00:31:26,640 --> 00:31:28,200
question we need to have to pass mode

740
00:31:28,200 --> 00:31:30,960
Which is less efficient and it's not the

741
00:31:30,960 --> 00:31:34,260
focus our of this talk

742
00:31:34,260 --> 00:31:39,360
last one famous is the eskom allow it is

743
00:31:39,360 --> 00:31:41,100
one of the finalists in The instant

744
00:31:41,100 --> 00:31:42,860
electric condition

745
00:31:42,860 --> 00:31:45,799
uh it is based on is it a sponge base

746
00:31:45,799 --> 00:31:49,140
and you will consider it in the leakage

747
00:31:49,140 --> 00:31:50,899
setting

748
00:31:50,899 --> 00:31:54,720
uh actually only the

749
00:31:54,720 --> 00:31:56,820
first uh permutation and last

750
00:31:56,820 --> 00:31:58,980
permutation need that strong protection

751
00:31:58,980 --> 00:32:01,620
against the DPA production against the

752
00:32:01,620 --> 00:32:02,880
sexual attack

753
00:32:02,880 --> 00:32:06,059
while the main part of the computer

754
00:32:06,059 --> 00:32:07,620
uh

755
00:32:07,620 --> 00:32:11,760
is allowed to leak to release adversary

756
00:32:11,760 --> 00:32:15,179
so in practice we can typically we can

757
00:32:15,179 --> 00:32:17,220
yeah we can

758
00:32:17,220 --> 00:32:19,440
let us know protection at all in the

759
00:32:19,440 --> 00:32:20,700
main part

760
00:32:20,700 --> 00:32:25,020
another example is the TTT let's propose

761
00:32:25,020 --> 00:32:29,640
in chess 2020 uh it is based on a TBC

762
00:32:29,640 --> 00:32:32,279
uh you can also achieve the crml2 and

763
00:32:32,279 --> 00:32:34,679
CCI ml1

764
00:32:34,679 --> 00:32:38,580
uh and the design idea of the TT is also

765
00:32:38,580 --> 00:32:40,620
followed from the level implementation

766
00:32:40,620 --> 00:32:41,940
idea

767
00:32:41,940 --> 00:32:45,360
to approve a security in the

768
00:32:45,360 --> 00:32:49,799
uh such you know attack only the

769
00:32:49,799 --> 00:32:52,860
uh first TBC call and last TBC call

770
00:32:52,860 --> 00:32:57,000
requires a heavy DPA protection

771
00:32:57,000 --> 00:32:59,600
and while the main part

772
00:32:59,600 --> 00:33:02,159
can lead to a rosary

773
00:33:02,159 --> 00:33:05,580
but one of the drawback of Lismore is

774
00:33:05,580 --> 00:33:08,700
that the way is less efficient because

775
00:33:08,700 --> 00:33:11,760
you can see for each iteration it

776
00:33:11,760 --> 00:33:14,460
required to TBC code to process a

777
00:33:14,460 --> 00:33:16,860
ambient HD block

778
00:33:16,860 --> 00:33:20,039
so this is what our design mode

779
00:33:20,039 --> 00:33:22,500
motivation we try to improve the rate of

780
00:33:22,500 --> 00:33:25,919
the tdt

781
00:33:27,779 --> 00:33:32,100
uh here is our new design Triplex and it

782
00:33:32,100 --> 00:33:34,740
also can achieve the cm2 and ccmr1

783
00:33:34,740 --> 00:33:36,980
security

784
00:33:38,100 --> 00:33:41,760
and the red for the next two years uh

785
00:33:41,760 --> 00:33:43,860
two over three which means that it

786
00:33:43,860 --> 00:33:47,700
requires ptbc Corp to Ambit uh HD block

787
00:33:47,700 --> 00:33:51,899
and do it one for a Associated data that

788
00:33:51,899 --> 00:33:56,760
is to TBC cores per 2 Ambit block

789
00:33:56,760 --> 00:33:59,399
uh this is the abstract

790
00:33:59,399 --> 00:34:01,559
picture of our mode

791
00:34:01,559 --> 00:34:03,960
you can see that for each iteration is

792
00:34:03,960 --> 00:34:07,440
required to three PVC call to process

793
00:34:07,440 --> 00:34:10,619
the 2mb messages but for a solid data

794
00:34:10,619 --> 00:34:13,679
also the data we don't need encryption

795
00:34:13,679 --> 00:34:18,060
so actually only to TBC uh are enough

796
00:34:18,060 --> 00:34:20,580
for for the for two process the

797
00:34:20,580 --> 00:34:23,280
associated data

798
00:34:23,280 --> 00:34:26,580
and the underlying primitive is the TBC

799
00:34:26,580 --> 00:34:27,780
with the

800
00:34:27,780 --> 00:34:31,619
2mb trick and we can instead is

801
00:34:31,619 --> 00:34:34,080
instantially either with the skinny 128

802
00:34:34,080 --> 00:34:39,800
and 384 or dark ctbc128 r384

803
00:34:39,800 --> 00:34:44,659
now I will give more detail about design

804
00:34:45,179 --> 00:34:50,460
our starting point is the one of the uh

805
00:34:50,460 --> 00:34:52,918
famous uh compression function called

806
00:34:52,918 --> 00:34:55,918
hydro's temperature function but we

807
00:34:55,918 --> 00:34:57,980
start from

808
00:34:57,980 --> 00:35:00,839
previously is based on the peroxide but

809
00:35:00,839 --> 00:35:03,240
now we consider a variant that is based

810
00:35:03,240 --> 00:35:04,640
on TBC

811
00:35:04,640 --> 00:35:08,400
uh for each iteration of the titles

812
00:35:08,400 --> 00:35:10,740
completion function it requires the TBC

813
00:35:10,740 --> 00:35:11,520
call

814
00:35:11,520 --> 00:35:13,800
and the initial state are two ambient

815
00:35:13,800 --> 00:35:16,740
block and one block is used as an input

816
00:35:16,740 --> 00:35:19,380
to the PVC and with the help of counter

817
00:35:19,380 --> 00:35:22,140
and the other block is used to sub as

818
00:35:22,140 --> 00:35:24,540
the key for the TBC

819
00:35:24,540 --> 00:35:27,000
and you can absorb the

820
00:35:27,000 --> 00:35:29,339
data as the trick

821
00:35:29,339 --> 00:35:33,619
and we can prove like actually the

822
00:35:36,500 --> 00:35:40,200
instead for the next iteration

823
00:35:40,200 --> 00:35:44,640
and these two MBA state are arranged

824
00:35:44,640 --> 00:35:47,700
so our life idea is that we can use one

825
00:35:47,700 --> 00:35:50,280
block for Excel encryption

826
00:35:50,280 --> 00:35:53,099
and they are blocked for the sub key for

827
00:35:53,099 --> 00:35:55,560
the next iteration then we can continue

828
00:35:55,560 --> 00:35:58,380
to process the mhg by iterating this

829
00:35:58,380 --> 00:36:00,119
function

830
00:36:00,119 --> 00:36:02,220
but this idea you can only achieve the

831
00:36:02,220 --> 00:36:05,099
latest one over two because it requires

832
00:36:05,099 --> 00:36:08,780
two TBC per ambient messages

833
00:36:08,780 --> 00:36:11,099
so we try to

834
00:36:11,099 --> 00:36:13,619
improve the efficiency regarding the

835
00:36:13,619 --> 00:36:15,359
rate

836
00:36:15,359 --> 00:36:19,200
here we add a TBC on top of list to

837
00:36:19,200 --> 00:36:21,119
GBC

838
00:36:21,119 --> 00:36:24,960
uh the idea is simple so actually we

839
00:36:24,960 --> 00:36:28,680
just add a 30 BC on top list two

840
00:36:28,680 --> 00:36:31,619
uh we can also show at least the output

841
00:36:31,619 --> 00:36:33,900
empty stage is still random and so we

842
00:36:33,900 --> 00:36:35,880
can use this another block for Excel

843
00:36:35,880 --> 00:36:38,359
encryption

844
00:36:38,579 --> 00:36:42,480
learn the way will be two over three

845
00:36:42,480 --> 00:36:44,940
uh at this point we can achieve the

846
00:36:44,940 --> 00:36:47,339
confidentiality but for AE we still need

847
00:36:47,339 --> 00:36:49,980
that authentic authenticity

848
00:36:49,980 --> 00:36:54,000
so we use the fact actually the the

849
00:36:54,000 --> 00:36:57,240
trick or the TBC is public but it will

850
00:36:57,240 --> 00:36:59,880
influence the output significantly

851
00:36:59,880 --> 00:37:02,480
so actually we can simply put the

852
00:37:02,480 --> 00:37:05,280
subtest or study data as the trick to be

853
00:37:05,280 --> 00:37:07,200
authenticated

854
00:37:07,200 --> 00:37:10,260
so this is the main idea bit higher

855
00:37:10,260 --> 00:37:11,400
design

856
00:37:11,400 --> 00:37:14,640
now this is the full fridge skin above

857
00:37:14,640 --> 00:37:17,700
for fridge skin XXX

858
00:37:17,700 --> 00:37:20,160
uh as you can see here actually the main

859
00:37:20,160 --> 00:37:21,260
part

860
00:37:21,260 --> 00:37:23,520
that used to encrypt an alternate

861
00:37:23,520 --> 00:37:26,280
chemistry is by using a high Los

862
00:37:26,280 --> 00:37:28,920
temperature function plus a 30 BC to

863
00:37:28,920 --> 00:37:30,920
improve the rate

864
00:37:30,920 --> 00:37:33,839
and the first part is the key duration

865
00:37:33,839 --> 00:37:36,359
function that to produce

866
00:37:36,359 --> 00:37:39,839
a 2mb initial stat like is useful for

867
00:37:39,839 --> 00:37:43,859
for the message G processing part

868
00:37:43,859 --> 00:37:47,339
and also the for each this iteration is

869
00:37:47,339 --> 00:37:48,480
similar to high lowest temperature

870
00:37:48,480 --> 00:37:49,619
function

871
00:37:49,619 --> 00:37:52,280
foreign

872
00:37:52,700 --> 00:37:57,119
function it only requires uh one uh TBC

873
00:37:57,119 --> 00:37:58,680
they will

874
00:37:58,680 --> 00:38:02,579
encrypt the 2mb internal state

875
00:38:02,579 --> 00:38:05,640
we have more design consideration like

876
00:38:05,640 --> 00:38:09,359
to improve the security against the in

877
00:38:09,359 --> 00:38:12,359
the market user setting so here we put a

878
00:38:12,359 --> 00:38:14,880
public key public key here is the public

879
00:38:14,880 --> 00:38:16,800
where this is the release three but the

880
00:38:16,800 --> 00:38:19,560
key can be public uh usually you can

881
00:38:19,560 --> 00:38:20,520
also

882
00:38:20,520 --> 00:38:22,260
uh use the

883
00:38:22,260 --> 00:38:25,380
user ID as the public key to reduce

884
00:38:25,380 --> 00:38:27,540
against the key Collision attack against

885
00:38:27,540 --> 00:38:28,380
the

886
00:38:28,380 --> 00:38:31,619
and also for attack generation we follow

887
00:38:31,619 --> 00:38:34,380
a recently paper and published in last

888
00:38:34,380 --> 00:38:38,400
year's action Crypt that we use uh the

889
00:38:38,400 --> 00:38:40,740
input is constant and

890
00:38:40,740 --> 00:38:42,900
also for the question will

891
00:38:42,900 --> 00:38:46,700
check the inverse of the TBC

892
00:38:47,700 --> 00:38:51,119
we also provide a security analysis in

893
00:38:51,119 --> 00:38:53,579
terms of the Integrity analysis

894
00:38:53,579 --> 00:38:57,720
are we sure that uh the triplets can

895
00:38:57,720 --> 00:39:01,560
provide a mylex.mps of CMR 2 in the

896
00:39:01,560 --> 00:39:03,720
ambang daily leakage model

897
00:39:03,720 --> 00:39:06,960
this implies the integrated Triplex

898
00:39:06,960 --> 00:39:09,960
holes if the number of calories uh less

899
00:39:09,960 --> 00:39:13,820
than two two to the power n over n

900
00:39:13,859 --> 00:39:17,820
uh this model is quite useful regarding

901
00:39:17,820 --> 00:39:19,560
the sectional attack because it means

902
00:39:19,560 --> 00:39:20,820
that

903
00:39:20,820 --> 00:39:23,460
actually the main part of the compute

904
00:39:23,460 --> 00:39:26,820
computation requires no protection

905
00:39:26,820 --> 00:39:30,300
uh it can be linked forward to reversary

906
00:39:30,300 --> 00:39:33,119
and we only need to protect the first

907
00:39:33,119 --> 00:39:36,900
TBC core and last TBC core and we can

908
00:39:36,900 --> 00:39:41,060
achieve the high CM local security

909
00:39:41,280 --> 00:39:43,800
regarding the confidentiality I will

910
00:39:43,800 --> 00:39:47,040
also provide the Hub and Bs for ccmr1

911
00:39:47,040 --> 00:39:50,460
due to the raking process and this this

912
00:39:50,460 --> 00:39:52,320
security result is standard for the

913
00:39:52,320 --> 00:39:55,859
OnePlus mode in a leakage setting we

914
00:39:55,859 --> 00:39:58,680
also show the M minus stock and Bs

915
00:39:58,680 --> 00:40:00,839
confidential LED with Audi keys in the

916
00:40:00,839 --> 00:40:03,980
lungs misused setting

917
00:40:04,380 --> 00:40:07,020
uh here is the table like comparison

918
00:40:07,020 --> 00:40:09,839
with other TBC based leakage register a

919
00:40:09,839 --> 00:40:13,260
mode We compare with the tdt let's

920
00:40:13,260 --> 00:40:14,760
introduce in

921
00:40:14,760 --> 00:40:16,020
uh

922
00:40:16,020 --> 00:40:18,900
chess 2020 and so the PDP in the same

923
00:40:18,900 --> 00:40:22,619
paper or TT and also Loma leaves T which

924
00:40:22,619 --> 00:40:25,800
follows similar idea of the tdt and it

925
00:40:25,800 --> 00:40:27,900
is a variant of cumulus

926
00:40:27,900 --> 00:40:30,060
and also a new reason to introdu

927
00:40:30,060 --> 00:40:32,760
introduce TD T2

928
00:40:32,760 --> 00:40:35,960
uh I want to highlight here

929
00:40:35,960 --> 00:40:39,000
triplets can achieve a higher uh High

930
00:40:39,000 --> 00:40:41,700
rate because previously the basically

931
00:40:41,700 --> 00:40:45,119
rate I think maybe is the TT is one over

932
00:40:45,119 --> 00:40:46,920
two and

933
00:40:46,920 --> 00:40:49,500
the triplex secondary red race two over

934
00:40:49,500 --> 00:40:51,420
three

935
00:40:51,420 --> 00:40:54,560
and also for the massive maximum

936
00:40:54,560 --> 00:40:58,020
problems or the of the message

937
00:40:58,020 --> 00:41:01,800
uh it can be two to the over 2 to the

938
00:41:01,800 --> 00:41:03,180
power n over n

939
00:41:03,180 --> 00:41:05,880
which is quite large and previous design

940
00:41:05,880 --> 00:41:07,980
that use the counter to separate domain

941
00:41:07,980 --> 00:41:12,300
of the TBC so that which uh the maximum

942
00:41:12,300 --> 00:41:14,400
programs from HG is limited by the

943
00:41:14,400 --> 00:41:17,880
length of the counter

944
00:41:17,880 --> 00:41:20,579
uh we also show like implementation

945
00:41:20,579 --> 00:41:23,640
performance of the XXX

946
00:41:23,640 --> 00:41:26,579
We compare with the Luminous lumulus and

947
00:41:26,579 --> 00:41:28,800
and also the s-con

948
00:41:28,800 --> 00:41:31,079
here we can first look at the

949
00:41:31,079 --> 00:41:32,040
performance

950
00:41:32,040 --> 00:41:34,380
between the triple X when it is

951
00:41:34,380 --> 00:41:39,680
instantially skinny and with lumos n

952
00:41:40,040 --> 00:41:43,800
is unifully protected it means that we

953
00:41:43,800 --> 00:41:45,960
need to protect everything uh lip

954
00:41:45,960 --> 00:41:47,760
protect every part

955
00:41:47,760 --> 00:41:50,040
uh

956
00:41:50,040 --> 00:41:52,980
you can see in the figure B uh this is

957
00:41:52,980 --> 00:41:56,040
the area requirement for the

958
00:41:56,040 --> 00:41:59,000
foreign

959
00:42:01,940 --> 00:42:04,940
mask

960
00:42:06,200 --> 00:42:08,640
and the blue

961
00:42:08,640 --> 00:42:11,160
the orange one is the long marks and the

962
00:42:11,160 --> 00:42:14,300
blue one is the the implementation mode

963
00:42:14,300 --> 00:42:18,000
you can see in this figure actually the

964
00:42:18,000 --> 00:42:20,460
dominant part is the mask mask

965
00:42:20,460 --> 00:42:22,760
implementation

966
00:42:22,760 --> 00:42:25,440
and the window number of shares actually

967
00:42:25,440 --> 00:42:26,820
the

968
00:42:26,820 --> 00:42:32,540
level the two two level inputation uh

969
00:42:33,359 --> 00:42:36,119
uh string relatives

970
00:42:36,119 --> 00:42:39,500
string relatively

971
00:42:41,339 --> 00:42:43,140
and uh

972
00:42:43,140 --> 00:42:46,260
compared with the lumos any uh Triplex

973
00:42:46,260 --> 00:42:49,200
has a limited overhead uh I already

974
00:42:49,200 --> 00:42:51,300
overhead but you can see in the figure

975
00:42:51,300 --> 00:42:55,380
eight the performance of the triplex is

976
00:42:55,380 --> 00:42:59,640
much better than the uh no no mirrors

977
00:42:59,640 --> 00:43:03,859
and due to the labor implementation

978
00:43:03,960 --> 00:43:07,560
and also we also compare the

979
00:43:07,560 --> 00:43:12,440
implementation result with the s-con

980
00:43:12,680 --> 00:43:17,099
a full areas over area overhead actually

981
00:43:17,099 --> 00:43:21,420
triple X and x-con they have similar uh

982
00:43:21,420 --> 00:43:23,880
area overhead but when the number of

983
00:43:23,880 --> 00:43:26,880
shears increased

984
00:43:26,880 --> 00:43:31,440
the area of the head of blood as Kong is

985
00:43:31,440 --> 00:43:35,520
uh a bit higher than that of the triplex

986
00:43:35,520 --> 00:43:38,160
uh but you can see in the figure a uh

987
00:43:38,160 --> 00:43:39,000
the

988
00:43:39,000 --> 00:43:41,579
encryption that history of Triple X is

989
00:43:41,579 --> 00:43:44,520
slightly worse than the s-con

990
00:43:44,520 --> 00:43:48,180
but this result is quite sensitive to to

991
00:43:48,180 --> 00:43:49,980
the security margin

992
00:43:49,980 --> 00:43:52,680
uh uh it depends on the number of runs

993
00:43:52,680 --> 00:43:54,480
in the permutation also number one of

994
00:43:54,480 --> 00:43:56,099
the TBC

995
00:43:56,099 --> 00:43:59,520
and also a number of shares and I I also

996
00:43:59,520 --> 00:44:02,160
want to emphasize here let the escort is

997
00:44:02,160 --> 00:44:03,839
based on representation and triple X is

998
00:44:03,839 --> 00:44:06,900
both based on the TBC and the Primitive

999
00:44:06,900 --> 00:44:10,740
by different state size yeah and you may

1000
00:44:10,740 --> 00:44:13,500
follow I think let's if let's decide is

1001
00:44:13,500 --> 00:44:15,720
the most is smaller than we may be

1002
00:44:15,720 --> 00:44:17,400
easier to protect against the sexual

1003
00:44:17,400 --> 00:44:18,540
attack

1004
00:44:18,540 --> 00:44:21,480
so here comes the conclusion we propose

1005
00:44:21,480 --> 00:44:24,260
a new Mode called triple x

1006
00:44:24,260 --> 00:44:27,359
is two over three and you can achieve

1007
00:44:27,359 --> 00:44:30,078
the N minus

1008
00:44:41,119 --> 00:44:44,220
uh our design maker TBC based design

1009
00:44:44,220 --> 00:44:47,160
more capable to spongy based

1010
00:44:47,160 --> 00:44:50,160
uh most importantly uh it shows that

1011
00:44:50,160 --> 00:44:54,119
indeed level invitation it generally

1012
00:44:54,119 --> 00:44:58,640
beneficial to improve the performance

1013
00:44:58,800 --> 00:45:01,579
okay thank you

1014
00:45:03,660 --> 00:45:06,618
foreign

1015
00:45:07,140 --> 00:45:09,300
thank you for your presentation

1016
00:45:09,300 --> 00:45:12,020
um are there any questions

1017
00:45:19,200 --> 00:45:23,040
um maybe I will start with a um maybe a

1018
00:45:23,040 --> 00:45:24,900
directorial question can you elaborate

1019
00:45:24,900 --> 00:45:27,359
on why you are only protecting the

1020
00:45:27,359 --> 00:45:29,940
beginning and the end same with ascon

1021
00:45:29,940 --> 00:45:30,900
um

1022
00:45:30,900 --> 00:45:33,060
uh

1023
00:45:33,060 --> 00:45:37,380
because for the Integrity actually

1024
00:45:37,380 --> 00:45:39,720
if we consider Integrity for two

1025
00:45:39,720 --> 00:45:41,400
different messages

1026
00:45:41,400 --> 00:45:43,619
for the first part actually we just need

1027
00:45:43,619 --> 00:45:46,800
to install the the produce initial value

1028
00:45:46,800 --> 00:45:47,700
is

1029
00:45:47,700 --> 00:45:51,480
is keep secret and for the final TBC

1030
00:45:51,480 --> 00:45:52,680
code

1031
00:45:52,680 --> 00:45:55,079
because for integrity we only need to

1032
00:45:55,079 --> 00:45:56,819
ensure actually the for two different

1033
00:45:56,819 --> 00:45:58,980
mesh g is how to find the creation on

1034
00:45:58,980 --> 00:46:02,700
the final part so the the first part is

1035
00:46:02,700 --> 00:46:04,500
to ensure we have enough loaded lens at

1036
00:46:04,500 --> 00:46:06,660
the beginning and the final part is what

1037
00:46:06,660 --> 00:46:08,220
it's hard for the service to refine the

1038
00:46:08,220 --> 00:46:09,920
Collision for two different messages

1039
00:46:09,920 --> 00:46:13,319
because in the leakage setting maybe you

1040
00:46:13,319 --> 00:46:17,040
you can you can find if you attend the

1041
00:46:17,040 --> 00:46:18,300
internal

1042
00:46:18,300 --> 00:46:21,440
State finally then maybe you can

1043
00:46:21,440 --> 00:46:23,880
construct a lot of different HG that

1044
00:46:23,880 --> 00:46:26,220
will have less than internal value so

1045
00:46:26,220 --> 00:46:28,020
essentially you'll only need to focus on

1046
00:46:28,020 --> 00:46:30,540
the first part and last part here

1047
00:46:30,540 --> 00:46:33,060
okay okay thank you

1048
00:46:33,060 --> 00:46:35,900
um any other questions

1049
00:46:36,900 --> 00:46:39,420
I'm also checking chats I don't see

1050
00:46:39,420 --> 00:46:40,500
anything

1051
00:46:40,500 --> 00:46:42,300
um thank you for your presentation good

1052
00:46:42,300 --> 00:46:44,780
thank you

1053
00:47:20,520 --> 00:47:22,680
okay I think

1054
00:47:22,680 --> 00:47:25,859
we are all set up so the next two talks

1055
00:47:25,859 --> 00:47:28,980
will be given by uh Nikolai Miller uh

1056
00:47:28,980 --> 00:47:30,839
the the first one is Transitional

1057
00:47:30,839 --> 00:47:33,180
leakages interior practice

1058
00:47:33,180 --> 00:47:34,800
um unveiling security Flows In The Mask

1059
00:47:34,800 --> 00:47:36,660
circuits

1060
00:47:36,660 --> 00:47:38,940
okay can you hear me yeah sounds great

1061
00:47:38,940 --> 00:47:41,280
so many thanks for joining for my first

1062
00:47:41,280 --> 00:47:43,980
talk here during the next yeah two talks

1063
00:47:43,980 --> 00:47:46,740
we talk a little bit about our

1064
00:47:46,740 --> 00:47:49,200
our tools for Implement for verification

1065
00:47:49,200 --> 00:47:51,480
of software implementation which I did

1066
00:47:51,480 --> 00:47:52,619
together with my colleagues at

1067
00:47:52,619 --> 00:47:55,680
University we start with the first talk

1068
00:47:55,680 --> 00:47:58,319
as you might know during the last years

1069
00:47:58,319 --> 00:48:00,300
we made a lot of progress in designing

1070
00:48:00,300 --> 00:48:02,880
secure cryptographic algorithms meaning

1071
00:48:02,880 --> 00:48:05,160
from a mathematical point of view or

1072
00:48:05,160 --> 00:48:06,540
when we look at that man in the Black

1073
00:48:06,540 --> 00:48:08,520
Box model our cryptography is really

1074
00:48:08,520 --> 00:48:10,619
secure when an attacker is able to get

1075
00:48:10,619 --> 00:48:12,480
for example plain text ciphertext spells

1076
00:48:12,480 --> 00:48:14,040
he's usually not able to get information

1077
00:48:14,040 --> 00:48:15,900
about the secret key

1078
00:48:15,900 --> 00:48:18,000
unfortunately the secure implementation

1079
00:48:18,000 --> 00:48:19,920
and Hardware remains an open challenge

1080
00:48:19,920 --> 00:48:22,560
because of implementation attacks we

1081
00:48:22,560 --> 00:48:24,780
know since at least 20 years that

1082
00:48:24,780 --> 00:48:26,280
physical characteristics of a hardware

1083
00:48:26,280 --> 00:48:29,460
device can reveal Secrets or information

1084
00:48:29,460 --> 00:48:32,160
about the underlying secret key here for

1085
00:48:32,160 --> 00:48:34,800
example doing so-called side channels we

1086
00:48:34,800 --> 00:48:36,359
know usually about timing power

1087
00:48:36,359 --> 00:48:37,980
consumption and electromagnetic

1088
00:48:37,980 --> 00:48:39,960
radiation

1089
00:48:39,960 --> 00:48:41,819
so fortunately there is a solution for

1090
00:48:41,819 --> 00:48:43,440
that problem which is called Boolean

1091
00:48:43,440 --> 00:48:45,900
masking which can be integrated directly

1092
00:48:45,900 --> 00:48:48,359
into our cryptographic algorithm so we

1093
00:48:48,359 --> 00:48:50,579
could just integrate this mask and our

1094
00:48:50,579 --> 00:48:52,980
side channels should not be should not

1095
00:48:52,980 --> 00:48:54,720
give any information about our secret

1096
00:48:54,720 --> 00:48:55,680
key

1097
00:48:55,680 --> 00:48:57,839
this is based on secret sharing so

1098
00:48:57,839 --> 00:48:59,880
intermediate values which are sensitive

1099
00:48:59,880 --> 00:49:01,680
should be shared according to be

1100
00:49:01,680 --> 00:49:04,260
randomized as I said it's supplied on

1101
00:49:04,260 --> 00:49:06,060
algorithmic levels that means that it's

1102
00:49:06,060 --> 00:49:07,560
independent of our underlying device

1103
00:49:07,560 --> 00:49:09,240
which is great

1104
00:49:09,240 --> 00:49:11,400
unfortunately this integration of

1105
00:49:11,400 --> 00:49:13,619
Boolean masking is also challenging

1106
00:49:13,619 --> 00:49:16,440
during the last years we saw that this

1107
00:49:16,440 --> 00:49:18,720
lead to mistakes because it's a usual

1108
00:49:18,720 --> 00:49:21,420
manual and error-prone task so even

1109
00:49:21,420 --> 00:49:23,339
experienced designers sometimes make

1110
00:49:23,339 --> 00:49:25,319
mistakes what leads to the question is

1111
00:49:25,319 --> 00:49:27,420
how we can verify that it's not so how

1112
00:49:27,420 --> 00:49:30,240
we can verify okay our underlying Mass

1113
00:49:30,240 --> 00:49:31,920
implementation is secure the designer

1114
00:49:31,920 --> 00:49:34,079
made no mistake

1115
00:49:34,079 --> 00:49:36,420
there's also a solution for that problem

1116
00:49:36,420 --> 00:49:38,160
which is called formal verification

1117
00:49:38,160 --> 00:49:41,040
which is today integrated into multiple

1118
00:49:41,040 --> 00:49:43,140
tools which can verify Mass hardware

1119
00:49:43,140 --> 00:49:44,640
implementations

1120
00:49:44,640 --> 00:49:47,280
usually they use formal adversary models

1121
00:49:47,280 --> 00:49:49,500
which are underlined to abstract the

1122
00:49:49,500 --> 00:49:52,140
attacker's capabilities for example deep

1123
00:49:52,140 --> 00:49:54,960
probing model which we consider later

1124
00:49:54,960 --> 00:49:57,000
it should be look like this I give the

1125
00:49:57,000 --> 00:49:59,099
shot the short graphic here we just give

1126
00:49:59,099 --> 00:50:01,020
our Mass implementation to some kind of

1127
00:50:01,020 --> 00:50:03,119
tool and the tool gives the answer okay

1128
00:50:03,119 --> 00:50:06,680
our masking is secure or it's not

1129
00:50:06,680 --> 00:50:09,720
unfortunately these tools do not

1130
00:50:09,720 --> 00:50:11,880
consider all physical defaults usually

1131
00:50:11,880 --> 00:50:14,520
when we wrote this paper it was a common

1132
00:50:14,520 --> 00:50:16,740
rule that these tools consider glitches

1133
00:50:16,740 --> 00:50:19,980
but for example no transitions and here

1134
00:50:19,980 --> 00:50:21,960
we come into the game as we want to give

1135
00:50:21,960 --> 00:50:24,660
an algorithmically modeled approach to

1136
00:50:24,660 --> 00:50:27,000
cover leakage due to Transitions and

1137
00:50:27,000 --> 00:50:28,980
glitches

1138
00:50:28,980 --> 00:50:32,099
afterwards we extend one of the former

1139
00:50:32,099 --> 00:50:33,720
verification tools called server with

1140
00:50:33,720 --> 00:50:35,819
our approach so now Silver's able to

1141
00:50:35,819 --> 00:50:37,020
cover glitches and transition

1142
00:50:37,020 --> 00:50:39,480
simultaneously

1143
00:50:39,480 --> 00:50:41,040
to give you the appropriate background

1144
00:50:41,040 --> 00:50:42,839
here we talk a little bit about probing

1145
00:50:42,839 --> 00:50:44,819
models as I said usually form a

1146
00:50:44,819 --> 00:50:46,380
verification tools are based on form

1147
00:50:46,380 --> 00:50:48,480
adversary models the most common one is

1148
00:50:48,480 --> 00:50:51,000
the Deep probing model which specifies

1149
00:50:51,000 --> 00:50:52,859
an attacker which is allowed to probe up

1150
00:50:52,859 --> 00:50:54,780
to the intermediates of an ideal circuit

1151
00:50:54,780 --> 00:50:57,839
while D specifies the security order so

1152
00:50:57,839 --> 00:50:59,520
for example when we consider the circuit

1153
00:50:59,520 --> 00:51:01,980
on the right side here and set D equals

1154
00:51:01,980 --> 00:51:03,720
one then the attacker is able to place

1155
00:51:03,720 --> 00:51:06,119
one probe for example here to get the

1156
00:51:06,119 --> 00:51:07,859
output set

1157
00:51:07,859 --> 00:51:09,780
unfortunately this model does not

1158
00:51:09,780 --> 00:51:12,119
consider any physical defaults and as I

1159
00:51:12,119 --> 00:51:13,260
said we want to consider physical

1160
00:51:13,260 --> 00:51:15,839
defaults here so this model is extended

1161
00:51:15,839 --> 00:51:17,819
by the robust probing model which is

1162
00:51:17,819 --> 00:51:19,079
actually able to cover all these

1163
00:51:19,079 --> 00:51:20,880
physical defaults by being very similar

1164
00:51:20,880 --> 00:51:23,579
to the underlying probing model

1165
00:51:23,579 --> 00:51:25,920
this model is designed in a way that all

1166
00:51:25,920 --> 00:51:27,839
physical defaults are considered via

1167
00:51:27,839 --> 00:51:30,420
probe extension procedures so when we

1168
00:51:30,420 --> 00:51:32,220
consider the green probe we can just

1169
00:51:32,220 --> 00:51:33,960
extend this probe to multiple other

1170
00:51:33,960 --> 00:51:35,640
probes in order to cover physical

1171
00:51:35,640 --> 00:51:38,160
defaults for example glitches when we

1172
00:51:38,160 --> 00:51:40,319
want to cover glitches this probe is

1173
00:51:40,319 --> 00:51:42,839
just substituted by some other probes

1174
00:51:42,839 --> 00:51:44,520
which go back to the last

1175
00:51:44,520 --> 00:51:46,440
synchronization points so all stable

1176
00:51:46,440 --> 00:51:49,020
inputs that contribute to the probe wire

1177
00:51:49,020 --> 00:51:51,000
recorded by the print probe are here

1178
00:51:51,000 --> 00:51:52,559
considered

1179
00:51:52,559 --> 00:51:55,200
another one transitions it's just com

1180
00:51:55,200 --> 00:51:57,119
it's just considered by probing

1181
00:51:57,119 --> 00:51:59,339
consecutive values so during two

1182
00:51:59,339 --> 00:52:00,960
consecutive clock cycles for example so

1183
00:52:00,960 --> 00:52:02,880
the probe is given at the same position

1184
00:52:02,880 --> 00:52:05,880
but records during another clock cyber

1185
00:52:05,880 --> 00:52:08,520
the third one which is considered by the

1186
00:52:08,520 --> 00:52:09,660
rubber's probing model is actually

1187
00:52:09,660 --> 00:52:11,819
coupling which we do not consider doing

1188
00:52:11,819 --> 00:52:14,339
this talk since to uh to model coupling

1189
00:52:14,339 --> 00:52:15,960
we need more information than the gate

1190
00:52:15,960 --> 00:52:17,819
level net list and so we usually

1191
00:52:17,819 --> 00:52:19,800
evaluates the gate level net list so we

1192
00:52:19,800 --> 00:52:22,559
cannot consider coupling here

1193
00:52:22,559 --> 00:52:24,240
so that was the theory I want to give

1194
00:52:24,240 --> 00:52:26,040
you a short example what we want to do

1195
00:52:26,040 --> 00:52:27,119
here

1196
00:52:27,119 --> 00:52:29,339
first of all to cover translucent

1197
00:52:29,339 --> 00:52:31,440
transitions we consider an iterative

1198
00:52:31,440 --> 00:52:33,059
circuit since it was shown in another

1199
00:52:33,059 --> 00:52:35,040
work the iterative circuits are usually

1200
00:52:35,040 --> 00:52:37,559
prone to Transitions this is because

1201
00:52:37,559 --> 00:52:40,020
transition iterated circuits are always

1202
00:52:40,020 --> 00:52:41,880
evaluate the same functions or different

1203
00:52:41,880 --> 00:52:44,760
but not necessarily independent inputs

1204
00:52:44,760 --> 00:52:47,099
so in this example we consider the

1205
00:52:47,099 --> 00:52:48,839
following iterative circuit which you

1206
00:52:48,839 --> 00:52:50,400
can see on the right

1207
00:52:50,400 --> 00:52:52,740
so the circuit covers two combinational

1208
00:52:52,740 --> 00:52:55,440
functions F0 and F1 which are separated

1209
00:52:55,440 --> 00:52:57,780
by two register stages at the beginning

1210
00:52:57,780 --> 00:53:00,119
you can see a multiplexer which just

1211
00:53:00,119 --> 00:53:02,280
decides if the feedback signal is given

1212
00:53:02,280 --> 00:53:05,040
to the Circuit or the primary input the

1213
00:53:05,040 --> 00:53:06,780
primary input here is shared so we

1214
00:53:06,780 --> 00:53:08,819
consider a for example first order

1215
00:53:08,819 --> 00:53:11,460
secure implementation where the input is

1216
00:53:11,460 --> 00:53:16,460
divided into three shares here x0 to X2

1217
00:53:16,680 --> 00:53:19,680
and to keep it easy for now we made one

1218
00:53:19,680 --> 00:53:21,359
assumption the primary input should

1219
00:53:21,359 --> 00:53:22,680
remain stable during the entire

1220
00:53:22,680 --> 00:53:25,319
execution this is not true always you

1221
00:53:25,319 --> 00:53:26,760
can change the primary input with the

1222
00:53:26,760 --> 00:53:29,460
execution but we consider that later

1223
00:53:29,460 --> 00:53:31,260
okay let's start with our formal

1224
00:53:31,260 --> 00:53:32,579
verification

1225
00:53:32,579 --> 00:53:34,619
first we consider an attacker just an

1226
00:53:34,619 --> 00:53:37,380
example who is able to place two probes

1227
00:53:37,380 --> 00:53:40,920
on the circuit for example P0 and P1 on

1228
00:53:40,920 --> 00:53:44,760
the outputs of F0 and F1 just an example

1229
00:53:44,760 --> 00:53:47,640
so in the following we want to yeah kind

1230
00:53:47,640 --> 00:53:49,859
of modeling algorithmically that this p

1231
00:53:49,859 --> 00:53:51,420
is extended to a probing set which

1232
00:53:51,420 --> 00:53:53,640
covers glitches and transitions

1233
00:53:53,640 --> 00:53:56,099
we start with the glitch extension which

1234
00:53:56,099 --> 00:53:58,559
we already already know how it works we

1235
00:53:58,559 --> 00:54:00,000
can do a back propagation for the last

1236
00:54:00,000 --> 00:54:02,940
register stage and for example get E2

1237
00:54:02,940 --> 00:54:04,500
and P3

1238
00:54:04,500 --> 00:54:06,780
this should be clear

1239
00:54:06,780 --> 00:54:08,520
because of this multiplexer at the

1240
00:54:08,520 --> 00:54:10,500
beginning we have to take care how to

1241
00:54:10,500 --> 00:54:12,599
model glitches for P0

1242
00:54:12,599 --> 00:54:14,579
since we have two feedbacks here we have

1243
00:54:14,579 --> 00:54:15,900
the feedback signal and we have the

1244
00:54:15,900 --> 00:54:18,359
primary input during the multiplexer

1245
00:54:18,359 --> 00:54:19,980
so we have to take care about the

1246
00:54:19,980 --> 00:54:21,839
glitches propagated for the multiplexer

1247
00:54:21,839 --> 00:54:24,180
and have to place probes on the primary

1248
00:54:24,180 --> 00:54:26,940
input and the feedback signals

1249
00:54:26,940 --> 00:54:29,700
so you can see here for example P4 and

1250
00:54:29,700 --> 00:54:30,780
P5

1251
00:54:30,780 --> 00:54:33,599
due to the feedback signal and P6 and p7

1252
00:54:33,599 --> 00:54:36,420
due to the primary inputs

1253
00:54:36,420 --> 00:54:38,160
so this leads to the following glitch

1254
00:54:38,160 --> 00:54:41,819
external probing set from P2 to p7

1255
00:54:41,819 --> 00:54:43,200
when we also want to consider

1256
00:54:43,200 --> 00:54:45,780
transitions we then just extend the

1257
00:54:45,780 --> 00:54:47,160
glitch extended probing set by

1258
00:54:47,160 --> 00:54:49,559
transition extended probes

1259
00:54:49,559 --> 00:54:50,940
so

1260
00:54:50,940 --> 00:54:52,319
first of all

1261
00:54:52,319 --> 00:54:53,880
we have to place probes on two

1262
00:54:53,880 --> 00:54:55,680
consecutive clock Cycles as I said

1263
00:54:55,680 --> 00:54:58,079
before unfortunately silver does not

1264
00:54:58,079 --> 00:54:59,819
support this because silver has no

1265
00:54:59,819 --> 00:55:02,819
notion of time what we do to avoid this

1266
00:55:02,819 --> 00:55:06,180
issue we place problem we replace probes

1267
00:55:06,180 --> 00:55:08,280
on register inputs when we have probes

1268
00:55:08,280 --> 00:55:10,200
on register outputs so that they cover

1269
00:55:10,200 --> 00:55:12,119
the next value which is written to the

1270
00:55:12,119 --> 00:55:13,140
register

1271
00:55:13,140 --> 00:55:15,960
so in this case for example for P2 we

1272
00:55:15,960 --> 00:55:18,900
get another Probe on P2 slash and for P3

1273
00:55:18,900 --> 00:55:24,740
exactly the same the same for P4 and P5

1274
00:55:25,020 --> 00:55:26,460
okay

1275
00:55:26,460 --> 00:55:29,460
so that's for this example we're done

1276
00:55:29,460 --> 00:55:32,160
now but as I said before

1277
00:55:32,160 --> 00:55:33,960
we made this assumption that our inputs

1278
00:55:33,960 --> 00:55:35,579
remain stable which is not always true

1279
00:55:35,579 --> 00:55:38,220
and now we change this so now we

1280
00:55:38,220 --> 00:55:40,319
expected our primary inputs can change

1281
00:55:40,319 --> 00:55:42,359
during every clock cycle

1282
00:55:42,359 --> 00:55:44,520
so if this is the case we don't have x0

1283
00:55:44,520 --> 00:55:47,579
X1 and X2 but we have some kind of input

1284
00:55:47,579 --> 00:55:49,559
sequence so in Epic clock cycle we can

1285
00:55:49,559 --> 00:55:51,660
get a new primary input

1286
00:55:51,660 --> 00:55:53,760
so we consider the sequence of primary

1287
00:55:53,760 --> 00:55:55,559
inputs and have to consider transitions

1288
00:55:55,559 --> 00:55:58,140
on the primary inputs so what we do is

1289
00:55:58,140 --> 00:56:00,960
we add another probe for example P6

1290
00:56:00,960 --> 00:56:02,880
slash which just probes the next

1291
00:56:02,880 --> 00:56:05,480
consecutive clock cycle the same for p7

1292
00:56:05,480 --> 00:56:07,920
this leads to our final probing set

1293
00:56:07,920 --> 00:56:09,960
extended with glitches and transitions

1294
00:56:09,960 --> 00:56:12,900
which is yeah really long here but yeah

1295
00:56:12,900 --> 00:56:14,819
that's it

1296
00:56:14,819 --> 00:56:16,200
so

1297
00:56:16,200 --> 00:56:18,119
that's the idea of what we want to do

1298
00:56:18,119 --> 00:56:19,920
now we want to integrate exactly this

1299
00:56:19,920 --> 00:56:21,900
algorithmic approach in silver

1300
00:56:21,900 --> 00:56:23,880
so to talk a little bit about silver and

1301
00:56:23,880 --> 00:56:25,740
to give it a necessary background

1302
00:56:25,740 --> 00:56:27,420
we have a look at the circuit model of

1303
00:56:27,420 --> 00:56:28,980
silver silver

1304
00:56:28,980 --> 00:56:32,520
covers each circuit as a direct craft so

1305
00:56:32,520 --> 00:56:34,680
all gates are represented as nodes and

1306
00:56:34,680 --> 00:56:37,260
all wires are represented as edges

1307
00:56:37,260 --> 00:56:39,900
inputs are manually annotated so when

1308
00:56:39,900 --> 00:56:41,940
you give your primary inputs you just

1309
00:56:41,940 --> 00:56:45,180
get a list okay primary inputs are x0 X1

1310
00:56:45,180 --> 00:56:47,339
X2 for example

1311
00:56:47,339 --> 00:56:50,460
as I said before no notion of time so we

1312
00:56:50,460 --> 00:56:52,319
have to extend this list to cover input

1313
00:56:52,319 --> 00:56:54,420
sequence this is the first change we

1314
00:56:54,420 --> 00:56:56,520
made on Silver so now we can say okay

1315
00:56:56,520 --> 00:56:58,619
this input 2 in clock cycle zero this

1316
00:56:58,619 --> 00:57:01,880
input doing clock cycle one and so on

1317
00:57:01,880 --> 00:57:04,440
however we created another list to cover

1318
00:57:04,440 --> 00:57:06,960
transitions on the primary input so in

1319
00:57:06,960 --> 00:57:08,700
this list we just show the changes on

1320
00:57:08,700 --> 00:57:10,260
the primary input sequence so for

1321
00:57:10,260 --> 00:57:12,300
example during clock cycle 1 we change

1322
00:57:12,300 --> 00:57:13,980
from the input from clock cycle zero to

1323
00:57:13,980 --> 00:57:17,040
the input of clock cycle one

1324
00:57:17,040 --> 00:57:19,260
another problem is that silver does not

1325
00:57:19,260 --> 00:57:21,480
support Loops that's why we always give

1326
00:57:21,480 --> 00:57:23,160
this feedback signal here with dashed

1327
00:57:23,160 --> 00:57:24,720
lines

1328
00:57:24,720 --> 00:57:26,880
actually this is not there we extracted

1329
00:57:26,880 --> 00:57:29,700
a loop free graph so we remove the loop

1330
00:57:29,700 --> 00:57:31,980
it's not there the primary inputs are

1331
00:57:31,980 --> 00:57:34,020
yeah for silver the outputs of the

1332
00:57:34,020 --> 00:57:35,940
multiplexer so they're given directly to

1333
00:57:35,940 --> 00:57:38,520
the Circuit without the loop and for the

1334
00:57:38,520 --> 00:57:41,460
loop we also store a list of transitions

1335
00:57:41,460 --> 00:57:43,380
so you can see here when the multiplex

1336
00:57:43,380 --> 00:57:45,000
is removed we just keep the same

1337
00:57:45,000 --> 00:57:47,460
information in the list above so in

1338
00:57:47,460 --> 00:57:49,200
clock cycle tool the multiplexer

1339
00:57:49,200 --> 00:57:51,240
switches and gives the feedback signal

1340
00:57:51,240 --> 00:57:53,040
instead of the primary inputs to the

1341
00:57:53,040 --> 00:57:55,460
circuit

1342
00:57:56,099 --> 00:57:57,059
so

1343
00:57:57,059 --> 00:57:59,099
this is our yeah model what we

1344
00:57:59,099 --> 00:58:01,020
integrated in server now we want to

1345
00:58:01,020 --> 00:58:03,119
model glitches for this silver

1346
00:58:03,119 --> 00:58:04,980
implements a depth first search back to

1347
00:58:04,980 --> 00:58:07,559
the register input so it's almost done

1348
00:58:07,559 --> 00:58:09,619
by silver so because silver already

1349
00:58:09,619 --> 00:58:12,960
covers glitches you only have to do this

1350
00:58:12,960 --> 00:58:15,359
prop extension on the new primary input

1351
00:58:15,359 --> 00:58:17,700
so on this outputs of the multiplexer

1352
00:58:17,700 --> 00:58:18,960
since we have to consider the feedback

1353
00:58:18,960 --> 00:58:21,540
signals and the primary inputs

1354
00:58:21,540 --> 00:58:23,819
this can be done by looking at our input

1355
00:58:23,819 --> 00:58:26,819
list so we just can search for the

1356
00:58:26,819 --> 00:58:28,920
signal in the feedback list if we have a

1357
00:58:28,920 --> 00:58:31,200
feedback doing that clock cycle we cover

1358
00:58:31,200 --> 00:58:33,720
probes on both on both values of the

1359
00:58:33,720 --> 00:58:35,839
list

1360
00:58:36,000 --> 00:58:39,720
this leads to a big big change in silver

1361
00:58:39,720 --> 00:58:42,240
since probing sets can change over time

1362
00:58:42,240 --> 00:58:44,640
we don't have this this transitions in

1363
00:58:44,640 --> 00:58:47,040
the multiplexer in all clock Cycles so

1364
00:58:47,040 --> 00:58:48,540
we have to consider different probing

1365
00:58:48,540 --> 00:58:52,040
sets for different clock Cycles

1366
00:58:52,500 --> 00:58:54,480
so when we want to model transitions on

1367
00:58:54,480 --> 00:58:56,220
this glitch external probing sets we

1368
00:58:56,220 --> 00:58:57,900
have to consider all glitch extended

1369
00:58:57,900 --> 00:58:59,760
probing sets per clock Cycles or for one

1370
00:58:59,760 --> 00:59:01,680
clock Cycle One glitch external probing

1371
00:59:01,680 --> 00:59:02,640
set

1372
00:59:02,640 --> 00:59:04,559
for any Probe on a register input we

1373
00:59:04,559 --> 00:59:06,059
place the Probe on the register output

1374
00:59:06,059 --> 00:59:07,680
as before

1375
00:59:07,680 --> 00:59:09,299
afterwards there are no further glitch

1376
00:59:09,299 --> 00:59:10,559
extension

1377
00:59:10,559 --> 00:59:12,480
and for any problem the primary input we

1378
00:59:12,480 --> 00:59:13,980
have to place a probe on the primary

1379
00:59:13,980 --> 00:59:16,319
input before this is also done by

1380
00:59:16,319 --> 00:59:18,900
looking at our list so we just search

1381
00:59:18,900 --> 00:59:20,339
for this two bill in the input

1382
00:59:20,339 --> 00:59:22,980
transition list list if it exists we

1383
00:59:22,980 --> 00:59:25,380
just add probes on them

1384
00:59:25,380 --> 00:59:28,260
so this is what we did afterwards we did

1385
00:59:28,260 --> 00:59:30,660
some case studies to show that server

1386
00:59:30,660 --> 00:59:32,099
actually works and is able to detect

1387
00:59:32,099 --> 00:59:33,599
transitional leakage

1388
00:59:33,599 --> 00:59:35,760
first of all we evaluate some iterated

1389
00:59:35,760 --> 00:59:39,180
Xbox design which were presented in 2017

1390
00:59:39,180 --> 00:59:41,940
the idea here was to build some 8-bit

1391
00:59:41,940 --> 00:59:44,520
s-boxes based on 4-bit s-boxes with

1392
00:59:44,520 --> 00:59:45,960
linear operations

1393
00:59:45,960 --> 00:59:48,059
this is actually a nice idea because

1394
00:59:48,059 --> 00:59:50,099
this Xboxes are really small because

1395
00:59:50,099 --> 00:59:52,319
they are based on a 4-bit s-box

1396
00:59:52,319 --> 00:59:54,000
unfortunately the cryptographic

1397
00:59:54,000 --> 00:59:56,760
properties are not that nice so the idea

1398
00:59:56,760 --> 00:59:59,760
was just to iterate this weak s box with

1399
00:59:59,760 --> 01:00:01,380
the hope to become stronger Xbox which

1400
01:00:01,380 --> 01:00:03,119
actually works

1401
01:00:03,119 --> 01:00:06,000
so we get some some circuit like this we

1402
01:00:06,000 --> 01:00:07,920
have the original s-box here which is

1403
01:00:07,920 --> 01:00:09,839
called as SB

1404
01:00:09,839 --> 01:00:11,880
in one of the underlying constructions

1405
01:00:11,880 --> 01:00:13,559
namely a physical Network and this

1406
01:00:13,559 --> 01:00:15,059
deconstruction or substitution

1407
01:00:15,059 --> 01:00:16,920
permutation Network

1408
01:00:16,920 --> 01:00:19,680
moreover there's this P layer which just

1409
01:00:19,680 --> 01:00:23,058
permutates different shares

1410
01:00:23,099 --> 01:00:25,020
the authors also implemented the first

1411
01:00:25,020 --> 01:00:26,700
order security eye with three shares on

1412
01:00:26,700 --> 01:00:28,619
them so you can see

1413
01:00:28,619 --> 01:00:31,319
in this circuit also free shared inputs

1414
01:00:31,319 --> 01:00:36,619
here x0 X1 and X2 each with 8 Bits

1415
01:00:37,040 --> 01:00:40,079
all these designs are secure under the

1416
01:00:40,079 --> 01:00:41,760
glitch extended programming model so we

1417
01:00:41,760 --> 01:00:43,740
verified that with silver so when we

1418
01:00:43,740 --> 01:00:45,720
consider glitches only all these designs

1419
01:00:45,720 --> 01:00:46,920
are secure

1420
01:00:46,920 --> 01:00:49,020
but what about transitions so when we

1421
01:00:49,020 --> 01:00:51,960
also cover glitches and transitions

1422
01:00:51,960 --> 01:00:54,299
what happens

1423
01:00:54,299 --> 01:00:56,280
we can see in the table what happens we

1424
01:00:56,280 --> 01:00:58,380
evaluated eight different Xbox designs

1425
01:00:58,380 --> 01:01:00,660
with six different shared permutation

1426
01:01:00,660 --> 01:01:02,819
layers and what we can see is indicated

1427
01:01:02,819 --> 01:01:05,220
by the red crosses most of the designs

1428
01:01:05,220 --> 01:01:06,720
become insecure when we consider

1429
01:01:06,720 --> 01:01:07,980
glitches

1430
01:01:07,980 --> 01:01:10,079
some of them are still secure but we

1431
01:01:10,079 --> 01:01:12,540
cannot really give a guess why they are

1432
01:01:12,540 --> 01:01:14,579
so we cannot say okay when you

1433
01:01:14,579 --> 01:01:16,559
implemented am I in this or that way we

1434
01:01:16,559 --> 01:01:18,960
can generate the interpolation step of

1435
01:01:18,960 --> 01:01:21,960
the Tomb cook or the evolution step but

1436
01:01:21,960 --> 01:01:23,700
I guess the you actually consider that

1437
01:01:23,700 --> 01:01:26,700
later so we can just uh don't say okay

1438
01:01:26,700 --> 01:01:28,680
when we implement it like this we always

1439
01:01:28,680 --> 01:01:30,359
have security against glitches and

1440
01:01:30,359 --> 01:01:33,059
transitions this is yeah maybe almost

1441
01:01:33,059 --> 01:01:36,000
random that some of them are secure

1442
01:01:36,000 --> 01:01:39,240
as a second case study we cover iterated

1443
01:01:39,240 --> 01:01:41,579
HPC gadgets which was also shown in

1444
01:01:41,579 --> 01:01:44,280
another paper since for example HPC

1445
01:01:44,280 --> 01:01:46,380
gadgets are composable under the PD

1446
01:01:46,380 --> 01:01:48,240
notion but only in the glitch extended

1447
01:01:48,240 --> 01:01:49,619
probing model

1448
01:01:49,619 --> 01:01:51,180
so

1449
01:01:51,180 --> 01:01:53,700
where we hear cover transitions it was

1450
01:01:53,700 --> 01:01:55,859
shown that iterated HPC gadgets May

1451
01:01:55,859 --> 01:01:58,200
League informations due to Transitions

1452
01:01:58,200 --> 01:01:59,579
for example when we consider the

1453
01:01:59,579 --> 01:02:01,980
following circuit we have some kind of

1454
01:02:01,980 --> 01:02:04,079
HPC gadgets here which is iterated with

1455
01:02:04,079 --> 01:02:05,520
this multiplexer

1456
01:02:05,520 --> 01:02:07,859
on the shared input

1457
01:02:07,859 --> 01:02:10,500
it's not secure where we cover only

1458
01:02:10,500 --> 01:02:12,599
glitches there's also a solution given

1459
01:02:12,599 --> 01:02:14,280
by the by the authors which is called

1460
01:02:14,280 --> 01:02:17,280
the opening notion which is yeah just a

1461
01:02:17,280 --> 01:02:19,140
peony notion powering glitches and

1462
01:02:19,140 --> 01:02:21,059
transitions

1463
01:02:21,059 --> 01:02:23,220
yeah they refine this notion so it

1464
01:02:23,220 --> 01:02:24,660
considers glitches and Transitions and

1465
01:02:24,660 --> 01:02:26,400
moreover they also give some gadgets

1466
01:02:26,400 --> 01:02:28,799
under this whole peony notion so what we

1467
01:02:28,799 --> 01:02:31,799
had with hpc2 for example they also give

1468
01:02:31,799 --> 01:02:34,440
under the opening notion so we can

1469
01:02:34,440 --> 01:02:36,480
evaluate both the original peeny gadgets

1470
01:02:36,480 --> 01:02:39,839
and gadgets under this opinion notion be

1471
01:02:39,839 --> 01:02:41,579
evaluated both up to order free with

1472
01:02:41,579 --> 01:02:43,799
silver and yeah we were actually able to

1473
01:02:43,799 --> 01:02:45,960
confirm the results when we consider

1474
01:02:45,960 --> 01:02:49,079
only hpc2 gadgets with no protection

1475
01:02:49,079 --> 01:02:50,579
against transitions we have a security

1476
01:02:50,579 --> 01:02:52,740
downgrade by one order so second order

1477
01:02:52,740 --> 01:02:55,920
design is only first order secure

1478
01:02:55,920 --> 01:02:58,260
while the new opening gadgets just

1479
01:02:58,260 --> 01:02:59,880
achieved the expected security

1480
01:02:59,880 --> 01:03:01,980
requirements so if they say it's first

1481
01:03:01,980 --> 01:03:05,220
order secure it is first order secure

1482
01:03:05,220 --> 01:03:07,859
okay to come to an end I want to show

1483
01:03:07,859 --> 01:03:10,500
you again what we did here we created an

1484
01:03:10,500 --> 01:03:12,240
algorithmic procedure for the former

1485
01:03:12,240 --> 01:03:13,920
verification and hardware and presence

1486
01:03:13,920 --> 01:03:16,200
of glitches and transitions

1487
01:03:16,200 --> 01:03:18,240
and to show how it works we integrated

1488
01:03:18,240 --> 01:03:20,819
this modeling into silver so silver is

1489
01:03:20,819 --> 01:03:22,200
now able to cover glitches and

1490
01:03:22,200 --> 01:03:25,140
transitions simultaneously

1491
01:03:25,140 --> 01:03:27,599
we also demonstrated the feasibility and

1492
01:03:27,599 --> 01:03:29,640
also the importance of such a tool into

1493
01:03:29,640 --> 01:03:31,260
multiple case studies and showed okay

1494
01:03:31,260 --> 01:03:33,359
this designs we evaluated are not

1495
01:03:33,359 --> 01:03:35,339
trivially secure when transitions are

1496
01:03:35,339 --> 01:03:37,799
when transitions are considered

1497
01:03:37,799 --> 01:03:40,260
nevertheless there's a lot of work to do

1498
01:03:40,260 --> 01:03:43,079
first of all we made our design our tool

1499
01:03:43,079 --> 01:03:45,359
and our designs public you can get them

1500
01:03:45,359 --> 01:03:47,280
from GitHub if you want to use them for

1501
01:03:47,280 --> 01:03:51,240
your own evaluation tasks

1502
01:03:51,240 --> 01:03:53,400
up to now there are some problems in

1503
01:03:53,400 --> 01:03:55,920
this in the silver tool mainly and the

1504
01:03:55,920 --> 01:03:57,299
most important one that silver is

1505
01:03:57,299 --> 01:03:59,220
restricted to the evaluation of small

1506
01:03:59,220 --> 01:04:03,240
circuit usually gadgets or small s boxes

1507
01:04:03,240 --> 01:04:05,339
but this will give a nice introduction

1508
01:04:05,339 --> 01:04:07,740
for next talk so we will talk about this

1509
01:04:07,740 --> 01:04:08,940
problem later

1510
01:04:08,940 --> 01:04:11,220
thank you very much for now we will

1511
01:04:11,220 --> 01:04:14,480
continue later with the next talk

1512
01:04:19,920 --> 01:04:22,819
um are there any questions

1513
01:04:32,160 --> 01:04:33,420
oh yeah

1514
01:04:33,420 --> 01:04:36,240
um that was really cool uh what I saw

1515
01:04:36,240 --> 01:04:37,980
some of your gadgets they they took

1516
01:04:37,980 --> 01:04:39,900
wildly different times to either prove

1517
01:04:39,900 --> 01:04:42,780
or disprove the security of so sorry and

1518
01:04:42,780 --> 01:04:45,180
I don't do perfect can you hear me okay

1519
01:04:45,180 --> 01:04:47,400
now you can hear me okay sorry I'll talk

1520
01:04:47,400 --> 01:04:48,480
at them Mike

1521
01:04:48,480 --> 01:04:50,460
um some of your gadgets took wildly

1522
01:04:50,460 --> 01:04:52,260
different times to either prove or

1523
01:04:52,260 --> 01:04:55,500
disprove the the security of what is it

1524
01:04:55,500 --> 01:04:56,579
about

1525
01:04:56,579 --> 01:04:59,040
so yeah what what does the sort of proof

1526
01:04:59,040 --> 01:05:01,920
time scale with how you mean here yeah

1527
01:05:01,920 --> 01:05:04,020
yeah where you had a previous slide as

1528
01:05:04,020 --> 01:05:06,299
well that seemed to show a few results

1529
01:05:06,299 --> 01:05:08,339
as well

1530
01:05:08,339 --> 01:05:10,440
here you mean yeah those all have very

1531
01:05:10,440 --> 01:05:12,180
different times and I was trying to work

1532
01:05:12,180 --> 01:05:13,319
out what

1533
01:05:13,319 --> 01:05:15,720
what affects it most okay let's start

1534
01:05:15,720 --> 01:05:17,520
with the first one when we have a

1535
01:05:17,520 --> 01:05:19,680
leaking design here we can stop as soon

1536
01:05:19,680 --> 01:05:21,240
as we find the leaking leaking address

1537
01:05:21,240 --> 01:05:23,160
we so for the secure one we have to

1538
01:05:23,160 --> 01:05:25,440
evaluate all possible attackers for the

1539
01:05:25,440 --> 01:05:27,299
leaking one we can stop if we found the

1540
01:05:27,299 --> 01:05:29,280
first one so that's why usually the

1541
01:05:29,280 --> 01:05:31,680
leaking ones are evaluated faster

1542
01:05:31,680 --> 01:05:34,680
another point is depending on how many

1543
01:05:34,680 --> 01:05:36,599
how many adversaries we have to consider

1544
01:05:36,599 --> 01:05:38,460
and how large the probing sets become

1545
01:05:38,460 --> 01:05:41,579
those are usually the the factors here

1546
01:05:41,579 --> 01:05:42,599
cool

1547
01:05:42,599 --> 01:05:44,940
thank you no problem

1548
01:05:44,940 --> 01:05:47,780
any more questions

1549
01:05:57,299 --> 01:06:00,299
seems not to be the case

1550
01:06:00,299 --> 01:06:01,559
okay

1551
01:06:01,559 --> 01:06:03,720
um thank you for this uh for this nice

1552
01:06:03,720 --> 01:06:04,619
talk

1553
01:06:04,619 --> 01:06:06,900
um I don't see any other questions

1554
01:06:06,900 --> 01:06:07,680
um

1555
01:06:07,680 --> 01:06:11,598
so we can move to the next one okay

1556
01:06:16,980 --> 01:06:19,700
and while we are setting up a reminder

1557
01:06:19,700 --> 01:06:22,799
for those especially that are listening

1558
01:06:22,799 --> 01:06:24,420
online please make sure that you are

1559
01:06:24,420 --> 01:06:25,520
muted

1560
01:06:25,520 --> 01:06:29,339
and type in your questions or you can

1561
01:06:29,339 --> 01:06:31,020
always also ask your questions at the

1562
01:06:31,020 --> 01:06:33,059
end of the session at the end of the

1563
01:06:33,059 --> 01:06:35,960
vote sorry yeah

1564
01:06:37,440 --> 01:06:40,619
and we are coming to the last Talk of

1565
01:06:40,619 --> 01:06:43,079
the session that is pro lead you have

1566
01:06:43,079 --> 01:06:45,180
already heard multiple referrals to that

1567
01:06:45,180 --> 01:06:47,640
talk already in the morning and also in

1568
01:06:47,640 --> 01:06:49,980
the previous session uh in the previous

1569
01:06:49,980 --> 01:06:53,520
talk so yeah please go ahead okay thanks

1570
01:06:53,520 --> 01:06:56,099
hello again thanks thanks for not

1571
01:06:56,099 --> 01:06:58,020
leaving so in the second talk we talk

1572
01:06:58,020 --> 01:06:59,460
about Pro lead a probing based Hardware

1573
01:06:59,460 --> 01:07:01,319
leakage detection tool

1574
01:07:01,319 --> 01:07:03,480
which is you're mostly in the same line

1575
01:07:03,480 --> 01:07:05,640
as the server extension so I think I

1576
01:07:05,640 --> 01:07:07,140
don't have to give that much background

1577
01:07:07,140 --> 01:07:09,420
now it's almost the same we're in the

1578
01:07:09,420 --> 01:07:10,980
same setting we consider implementation

1579
01:07:10,980 --> 01:07:13,079
attacks so physical characteristics of

1580
01:07:13,079 --> 01:07:15,240
the device can reveal Secrets as before

1581
01:07:15,240 --> 01:07:17,960
the solution is again Boolean masking

1582
01:07:17,960 --> 01:07:20,099
algorithmic countermeasure the problem

1583
01:07:20,099 --> 01:07:22,079
is again the implementation

1584
01:07:22,079 --> 01:07:24,720
so up to now it's exactly the same as

1585
01:07:24,720 --> 01:07:25,559
before

1586
01:07:25,559 --> 01:07:27,900
I want to give one more solution now

1587
01:07:27,900 --> 01:07:30,059
which are composable gadgets so I said

1588
01:07:30,059 --> 01:07:32,880
before that this implementation of lots

1589
01:07:32,880 --> 01:07:35,039
of of mass ciphers is challenging which

1590
01:07:35,039 --> 01:07:36,780
is two but we have one important

1591
01:07:36,780 --> 01:07:38,880
solution called composable gadgets and

1592
01:07:38,880 --> 01:07:41,339
the idea is really really great we can

1593
01:07:41,339 --> 01:07:43,440
just design small building blocks which

1594
01:07:43,440 --> 01:07:45,599
are secure and composable and compose

1595
01:07:45,599 --> 01:07:47,400
them to get larger circuits which are

1596
01:07:47,400 --> 01:07:50,039
also secure which is great the only

1597
01:07:50,039 --> 01:07:52,440
problem here is efficiency since the

1598
01:07:52,440 --> 01:07:55,400
sketches usually adds some some

1599
01:07:55,400 --> 01:07:58,200
latency or area overhead

1600
01:07:58,200 --> 01:08:01,079
if we can accept this it's fine we can

1601
01:08:01,079 --> 01:08:03,359
just use gadgets if not we come back to

1602
01:08:03,359 --> 01:08:04,799
the problem with implementation so when

1603
01:08:04,799 --> 01:08:06,660
we want to do handcraft the design

1604
01:08:06,660 --> 01:08:08,520
without our gamer or without using

1605
01:08:08,520 --> 01:08:10,619
composable gadgets we still have the

1606
01:08:10,619 --> 01:08:14,160
problem of how we can verify our designs

1607
01:08:14,160 --> 01:08:15,960
and actually there are two solutions I

1608
01:08:15,960 --> 01:08:17,580
present the first one before from the

1609
01:08:17,580 --> 01:08:19,380
verification I call it here the exact

1610
01:08:19,380 --> 01:08:20,399
way

1611
01:08:20,399 --> 01:08:22,500
since it means an exhaustive evaluation

1612
01:08:22,500 --> 01:08:24,660
of our Target design meaning that it's

1613
01:08:24,660 --> 01:08:27,000
complete there are no false negatives

1614
01:08:27,000 --> 01:08:28,140
here

1615
01:08:28,140 --> 01:08:30,179
this is usually assisted by predefined

1616
01:08:30,179 --> 01:08:31,979
diversary models I presented the robust

1617
01:08:31,979 --> 01:08:33,660
probing model there's also for example

1618
01:08:33,660 --> 01:08:35,279
the random probing model

1619
01:08:35,279 --> 01:08:37,500
on the negative side formal verification

1620
01:08:37,500 --> 01:08:40,799
is computationally expensive I also said

1621
01:08:40,799 --> 01:08:42,779
this restricts us to small building

1622
01:08:42,779 --> 01:08:44,640
blocks or to the evaluation of small

1623
01:08:44,640 --> 01:08:47,460
blocks like for example Mass gadgets or

1624
01:08:47,460 --> 01:08:50,219
small s boxes so for Heroes it is great

1625
01:08:50,219 --> 01:08:52,198
when we can can verify our mass

1626
01:08:52,198 --> 01:08:54,420
schedules we we have a super nice tool

1627
01:08:54,420 --> 01:08:55,738
we can use the gadgets which are

1628
01:08:55,738 --> 01:08:57,479
formally verified and can compose them

1629
01:08:57,479 --> 01:09:00,060
to arbitrary large circuits great

1630
01:09:00,060 --> 01:09:02,698
if we cannot use that another way I call

1631
01:09:02,698 --> 01:09:04,319
it the fast way is leakage simulation

1632
01:09:04,319 --> 01:09:06,540
but just tries to simulate the power

1633
01:09:06,540 --> 01:09:08,460
consumption of a prototype instead of

1634
01:09:08,460 --> 01:09:10,259
doing real measurements

1635
01:09:10,259 --> 01:09:13,080
and this type of of tools usually only

1636
01:09:13,080 --> 01:09:15,359
fixed set of inputs is evaluated so it's

1637
01:09:15,359 --> 01:09:17,520
non-complete and false negatives can

1638
01:09:17,520 --> 01:09:19,620
occur so it means that this leakage

1639
01:09:19,620 --> 01:09:22,080
simulation results cannot be considered

1640
01:09:22,080 --> 01:09:24,299
a security proofs there is also some

1641
01:09:24,299 --> 01:09:26,219
kind of error rate here

1642
01:09:26,219 --> 01:09:28,319
there's usually no underlying adversary

1643
01:09:28,319 --> 01:09:30,000
model so they are not in line with for

1644
01:09:30,000 --> 01:09:32,040
example Rob's probing security they're

1645
01:09:32,040 --> 01:09:34,319
usually based on some power leakage

1646
01:09:34,319 --> 01:09:36,120
model or heuristics like Heming weight

1647
01:09:36,120 --> 01:09:37,920
or Hamming distance

1648
01:09:37,920 --> 01:09:40,738
the accuracy of the simulator depends on

1649
01:09:40,738 --> 01:09:42,660
different abstraction levels so for

1650
01:09:42,660 --> 01:09:44,040
example we can use them at register

1651
01:09:44,040 --> 01:09:45,839
transfer level gate level or transistor

1652
01:09:45,839 --> 01:09:48,120
level the problem here is the more

1653
01:09:48,120 --> 01:09:51,000
accurate Mass simulation tool becomes so

1654
01:09:51,000 --> 01:09:53,219
the larger I go in my design and the

1655
01:09:53,219 --> 01:09:55,500
more the more details I I use for

1656
01:09:55,500 --> 01:09:56,580
simulation

1657
01:09:56,580 --> 01:09:58,679
the larger my simulation becomes and the

1658
01:09:58,679 --> 01:10:01,140
more time I need to simulate

1659
01:10:01,140 --> 01:10:02,760
so there's always a trade-off between

1660
01:10:02,760 --> 01:10:05,460
accuracy and simulation time

1661
01:10:05,460 --> 01:10:07,500
but nevertheless we can preliminate

1662
01:10:07,500 --> 01:10:09,840
check large designs with that but

1663
01:10:09,840 --> 01:10:12,480
unfortunately no security proof and not

1664
01:10:12,480 --> 01:10:14,880
in line with our probing model

1665
01:10:14,880 --> 01:10:16,739
so our contribution here is some kind of

1666
01:10:16,739 --> 01:10:18,960
middle way we call the tool pro leads

1667
01:10:18,960 --> 01:10:21,000
from probing based leakage detection as

1668
01:10:21,000 --> 01:10:23,880
in the title and our idea was to combine

1669
01:10:23,880 --> 01:10:25,980
the benefits of formal verification and

1670
01:10:25,980 --> 01:10:27,780
leakage stimulation

1671
01:10:27,780 --> 01:10:30,420
so what we have prolit is in line with

1672
01:10:30,420 --> 01:10:32,520
the robust probing model so from from

1673
01:10:32,520 --> 01:10:34,739
the verification side we use this

1674
01:10:34,739 --> 01:10:37,140
formally defined adversary models we

1675
01:10:37,140 --> 01:10:39,300
consider as silver now the combined

1676
01:10:39,300 --> 01:10:40,860
occurrence of glitches and transitions

1677
01:10:40,860 --> 01:10:43,260
we are also able to cover multivariate

1678
01:10:43,260 --> 01:10:45,480
and univariate attacks

1679
01:10:45,480 --> 01:10:47,580
from the leakage simulation side we take

1680
01:10:47,580 --> 01:10:49,620
the fast simulation simulation based

1681
01:10:49,620 --> 01:10:51,179
approach so in contrast to form a

1682
01:10:51,179 --> 01:10:53,580
verification we don't do this exhaustive

1683
01:10:53,580 --> 01:10:55,980
evaluation we just do simulation based

1684
01:10:55,980 --> 01:10:57,659
evaluation which means that we are a lot

1685
01:10:57,659 --> 01:11:00,120
faster and can cover larger circuits but

1686
01:11:00,120 --> 01:11:02,040
again that's the negative side we can

1687
01:11:02,040 --> 01:11:04,800
don't give security proofs here

1688
01:11:04,800 --> 01:11:07,860
nevertheless larger circuits have higher

1689
01:11:07,860 --> 01:11:09,540
security order this is what we want to

1690
01:11:09,540 --> 01:11:10,800
do we want to have a tool which is in

1691
01:11:10,800 --> 01:11:12,239
line with four hours probing security

1692
01:11:12,239 --> 01:11:14,640
and can cover larger circuits than S

1693
01:11:14,640 --> 01:11:16,980
boxes or gadgets

1694
01:11:16,980 --> 01:11:18,659
so I think I can skip the background

1695
01:11:18,659 --> 01:11:20,820
it's exactly the same as before

1696
01:11:20,820 --> 01:11:23,280
robust probing model can cover glitches

1697
01:11:23,280 --> 01:11:25,020
and transitions with the same probe

1698
01:11:25,020 --> 01:11:27,960
extension procedures as before

1699
01:11:27,960 --> 01:11:30,480
so let's start with Pro lead

1700
01:11:30,480 --> 01:11:32,699
probably it receives three inputs a

1701
01:11:32,699 --> 01:11:34,920
config file a library file and a net

1702
01:11:34,920 --> 01:11:37,560
list the config file just gives the

1703
01:11:37,560 --> 01:11:39,719
setting for the evaluation for example

1704
01:11:39,719 --> 01:11:41,640
what security order you want to evaluate

1705
01:11:41,640 --> 01:11:43,739
if you want to evaluate univariate or

1706
01:11:43,739 --> 01:11:45,780
multivariate attackers and many many

1707
01:11:45,780 --> 01:11:46,679
more

1708
01:11:46,679 --> 01:11:48,659
the netlist is actually a gate level net

1709
01:11:48,659 --> 01:11:50,159
list so it could be the output of for

1710
01:11:50,159 --> 01:11:52,260
example design compiler and users and

1711
01:11:52,260 --> 01:11:54,840
the library files Library file justifies

1712
01:11:54,840 --> 01:11:56,400
the gates which are used in the net list

1713
01:11:56,400 --> 01:11:59,640
so you can use almost different net

1714
01:11:59,640 --> 01:12:02,820
lists as long as you define all view

1715
01:12:02,820 --> 01:12:05,100
skates in the library file so and nor or

1716
01:12:05,100 --> 01:12:08,520
xor registers and so on

1717
01:12:08,520 --> 01:12:10,320
as a result of pro lead we get a

1718
01:12:10,320 --> 01:12:12,480
detailed simulation or leaked simulation

1719
01:12:12,480 --> 01:12:15,060
report so just gives information about

1720
01:12:15,060 --> 01:12:17,580
okay an attacker who can place probes on

1721
01:12:17,580 --> 01:12:19,140
this and that position will lead to

1722
01:12:19,140 --> 01:12:21,060
leakage or will will be able to recover

1723
01:12:21,060 --> 01:12:23,580
uh to recover secrets

1724
01:12:23,580 --> 01:12:25,620
but probably internally does are the

1725
01:12:25,620 --> 01:12:27,360
following steps

1726
01:12:27,360 --> 01:12:29,159
first of all we read the design and the

1727
01:12:29,159 --> 01:12:30,659
configuration and build some internal

1728
01:12:30,659 --> 01:12:32,880
models afterwards we generate all

1729
01:12:32,880 --> 01:12:34,800
possible probing sets so we consider all

1730
01:12:34,800 --> 01:12:36,960
possible robots probing adversaries here

1731
01:12:36,960 --> 01:12:39,000
we did some simulation and some

1732
01:12:39,000 --> 01:12:41,159
statistical evaluation in the end this

1733
01:12:41,159 --> 01:12:42,540
is just that you can follow the next

1734
01:12:42,540 --> 01:12:45,000
slide so we have a little little kind of

1735
01:12:45,000 --> 01:12:48,360
red line here so we start by generating

1736
01:12:48,360 --> 01:12:50,159
our circuit model after reading and

1737
01:12:50,159 --> 01:12:52,739
passing some inputs as with our gamma we

1738
01:12:52,739 --> 01:12:54,480
consider our circuit as a melee machine

1739
01:12:54,480 --> 01:12:56,340
which consists of combinational logic

1740
01:12:56,340 --> 01:12:58,980
and a single register stage

1741
01:12:58,980 --> 01:13:01,260
this is modeled here as a directed graph

1742
01:13:01,260 --> 01:13:03,780
internally so each node is represented

1743
01:13:03,780 --> 01:13:05,640
as a gate or register

1744
01:13:05,640 --> 01:13:07,679
we store some intermediate information

1745
01:13:07,679 --> 01:13:09,600
later for the simulation

1746
01:13:09,600 --> 01:13:12,840
and each Edge is represent the wire

1747
01:13:12,840 --> 01:13:15,600
again we store some internal information

1748
01:13:15,600 --> 01:13:17,880
here for example The Driven value which

1749
01:13:17,880 --> 01:13:20,219
we need later for the simulation

1750
01:13:20,219 --> 01:13:21,780
so

1751
01:13:21,780 --> 01:13:23,580
first of all I give you two different

1752
01:13:23,580 --> 01:13:26,699
definitions here first of all a probe we

1753
01:13:26,699 --> 01:13:28,620
consider a notion of time here so our

1754
01:13:28,620 --> 01:13:30,840
probe here records a signal on a wire

1755
01:13:30,840 --> 01:13:33,179
during a single clock cycle so we can

1756
01:13:33,179 --> 01:13:35,219
give each prop as a tuple

1757
01:13:35,219 --> 01:13:37,620
moreover we consider probing sets as a

1758
01:13:37,620 --> 01:13:38,820
list of probes

1759
01:13:38,820 --> 01:13:40,980
which we later need to Define our

1760
01:13:40,980 --> 01:13:43,199
attacker so each attacker gets a probing

1761
01:13:43,199 --> 01:13:46,199
set where he's able to get props

1762
01:13:46,199 --> 01:13:48,719
so first of all we have to find suited

1763
01:13:48,719 --> 01:13:51,420
propositions of our Circle

1764
01:13:51,420 --> 01:13:52,980
for example we can consider the

1765
01:13:52,980 --> 01:13:54,480
following circuit as I'll show you

1766
01:13:54,480 --> 01:13:55,860
before

1767
01:13:55,860 --> 01:13:57,719
if we want to consider all possible

1768
01:13:57,719 --> 01:13:59,880
attackers we have to place standard

1769
01:13:59,880 --> 01:14:02,699
probes on all possible wires here

1770
01:14:02,699 --> 01:14:04,980
fortunately this is not necessary since

1771
01:14:04,980 --> 01:14:07,320
we always consider glitches and as I

1772
01:14:07,320 --> 01:14:09,719
said you before some probes can be later

1773
01:14:09,719 --> 01:14:11,820
extended to glitch extended probes here

1774
01:14:11,820 --> 01:14:14,699
for example like this

1775
01:14:14,699 --> 01:14:17,280
the blue probes here are just probes

1776
01:14:17,280 --> 01:14:19,500
which can be get by Glitch extension of

1777
01:14:19,500 --> 01:14:21,659
the other probes so when we consider

1778
01:14:21,659 --> 01:14:23,880
these three probes which are remaining a

1779
01:14:23,880 --> 01:14:26,280
screen we can cover all standard props

1780
01:14:26,280 --> 01:14:28,260
of the circuit here

1781
01:14:28,260 --> 01:14:30,840
so what we need are probes on primary

1782
01:14:30,840 --> 01:14:33,179
outputs and probes on register inputs

1783
01:14:33,179 --> 01:14:35,460
that are the remaining free ones

1784
01:14:35,460 --> 01:14:38,580
so now we have standard props what we

1785
01:14:38,580 --> 01:14:40,380
need to Define an attacker as a probing

1786
01:14:40,380 --> 01:14:43,020
set this is the next step here so what

1787
01:14:43,020 --> 01:14:44,699
we do is we make D combinations of

1788
01:14:44,699 --> 01:14:46,739
probes according to our security order

1789
01:14:46,739 --> 01:14:49,080
and attackers able to place the standard

1790
01:14:49,080 --> 01:14:51,120
probes so we consider all combinations

1791
01:14:51,120 --> 01:14:54,179
of these standard Pros for example where

1792
01:14:54,179 --> 01:14:56,100
we consider a second order adversary he

1793
01:14:56,100 --> 01:14:58,320
can place two standard probes so we

1794
01:14:58,320 --> 01:15:01,320
consider all combinations of two probes

1795
01:15:01,320 --> 01:15:02,940
here we have three probes on different

1796
01:15:02,940 --> 01:15:06,900
wires I call them w0w1 and W2 and I

1797
01:15:06,900 --> 01:15:10,320
consider two clock cycles c0 and C1 so

1798
01:15:10,320 --> 01:15:12,360
according to the iron model you maybe

1799
01:15:12,360 --> 01:15:14,100
know from statistics

1800
01:15:14,100 --> 01:15:16,199
we can get for a univariate attacker six

1801
01:15:16,199 --> 01:15:18,000
combinations and for a multivariate

1802
01:15:18,000 --> 01:15:21,179
attacker 15 combinations so we have to

1803
01:15:21,179 --> 01:15:23,580
consider for univariate case six probing

1804
01:15:23,580 --> 01:15:25,860
set and for a multivariate case 15 probe

1805
01:15:25,860 --> 01:15:27,120
insets

1806
01:15:27,120 --> 01:15:29,340
okay afterwards they get extended by

1807
01:15:29,340 --> 01:15:31,800
glitches and transitions as you define

1808
01:15:31,800 --> 01:15:34,380
by glitches and transitions

1809
01:15:34,380 --> 01:15:37,260
this is almost straightforward for

1810
01:15:37,260 --> 01:15:39,179
glitches we know how to do it from

1811
01:15:39,179 --> 01:15:42,000
Silver the only difference here what I

1812
01:15:42,000 --> 01:15:43,800
what I want to remark is that we

1813
01:15:43,800 --> 01:15:46,020
pre-computed so for each standard probe

1814
01:15:46,020 --> 01:15:48,360
we already know how the glitches the

1815
01:15:48,360 --> 01:15:51,120
glitch uh extended probes are working so

1816
01:15:51,120 --> 01:15:52,199
we don't have to do that for every

1817
01:15:52,199 --> 01:15:54,239
probing set separately

1818
01:15:54,239 --> 01:15:56,040
transition extension is now super easy

1819
01:15:56,040 --> 01:15:58,080
since we have a notion of time we just

1820
01:15:58,080 --> 01:16:00,840
can go one step back in time and set a

1821
01:16:00,840 --> 01:16:04,580
probe on this on this value

1822
01:16:04,679 --> 01:16:05,880
so

1823
01:16:05,880 --> 01:16:08,159
now we come to the really important part

1824
01:16:08,159 --> 01:16:10,140
of probably we start to simulate the

1825
01:16:10,140 --> 01:16:12,060
probed intermediates and this is one of

1826
01:16:12,060 --> 01:16:13,620
the biggest differences to other

1827
01:16:13,620 --> 01:16:15,780
simulation based leakage evaluation

1828
01:16:15,780 --> 01:16:18,659
tools we simulate intermediates and no

1829
01:16:18,659 --> 01:16:20,159
power consumption

1830
01:16:20,159 --> 01:16:23,760
so maybe you know tools like I think we

1831
01:16:23,760 --> 01:16:25,500
heard the talk before where this power

1832
01:16:25,500 --> 01:16:27,780
consumption simulation was also used we

1833
01:16:27,780 --> 01:16:29,520
do it not we just simulate the

1834
01:16:29,520 --> 01:16:31,980
underlying intermediates

1835
01:16:31,980 --> 01:16:34,320
the user can specify multiple groups

1836
01:16:34,320 --> 01:16:36,659
with a corresponding input wire you can

1837
01:16:36,659 --> 01:16:38,219
think about that a little bit like in a

1838
01:16:38,219 --> 01:16:40,860
tvla scenario so we can for example

1839
01:16:40,860 --> 01:16:42,900
evaluate fixed versus fixed or fixed

1840
01:16:42,900 --> 01:16:45,000
versus random here then we Define two

1841
01:16:45,000 --> 01:16:47,219
groups with for example one fixed

1842
01:16:47,219 --> 01:16:49,080
underlying value and a random underlying

1843
01:16:49,080 --> 01:16:50,460
value

1844
01:16:50,460 --> 01:16:52,380
the corresponding values will be shared

1845
01:16:52,380 --> 01:16:54,179
internally to the standby Pro lead so

1846
01:16:54,179 --> 01:16:56,400
when you specify an underlying value

1847
01:16:56,400 --> 01:16:57,840
probably it will share it to give the

1848
01:16:57,840 --> 01:17:00,060
input shells to the mass design

1849
01:17:00,060 --> 01:17:01,980
the user can also specify the number of

1850
01:17:01,980 --> 01:17:03,540
simulations and the number of clock

1851
01:17:03,540 --> 01:17:05,520
Cycles to simulate for example if you

1852
01:17:05,520 --> 01:17:08,280
have a round-based as which runs 10 or

1853
01:17:08,280 --> 01:17:09,840
11 clock cycle you just say probably

1854
01:17:09,840 --> 01:17:12,239
okay Run 10 or 11 clock cycles for the

1855
01:17:12,239 --> 01:17:14,400
simulation and run for example 100

1856
01:17:14,400 --> 01:17:15,900
simulations

1857
01:17:15,900 --> 01:17:17,640
I want to give a short example here

1858
01:17:17,640 --> 01:17:19,739
which is not bit sliced to accelerate

1859
01:17:19,739 --> 01:17:21,719
Pro lead we bit slice the simulation

1860
01:17:21,719 --> 01:17:24,780
approach so we usually do 64 simulations

1861
01:17:24,780 --> 01:17:27,600
for 64-bit architectures at the same

1862
01:17:27,600 --> 01:17:30,060
time which you don't do in this example

1863
01:17:30,060 --> 01:17:31,980
for example we can consider design with

1864
01:17:31,980 --> 01:17:33,719
two shares which is a little bit

1865
01:17:33,719 --> 01:17:35,520
constructed here it's the same circuit

1866
01:17:35,520 --> 01:17:38,520
as before I just consider X and Y as the

1867
01:17:38,520 --> 01:17:40,560
shared inputs with the shares b and d

1868
01:17:40,560 --> 01:17:43,260
and c and e and I generated two groups

1869
01:17:43,260 --> 01:17:45,659
which gives for example a fixed input

1870
01:17:45,659 --> 01:17:47,640
value which is a zero Vector here and

1871
01:17:47,640 --> 01:17:49,500
with this dollar signs we indicate in

1872
01:17:49,500 --> 01:17:51,600
probably that the underlying value is

1873
01:17:51,600 --> 01:17:53,580
random so we have a typical fixed versus

1874
01:17:53,580 --> 01:17:55,620
random scenario

1875
01:17:55,620 --> 01:17:58,199
the a value here is not shared we can

1876
01:17:58,199 --> 01:17:59,880
also Define this in Pro lead so it's for

1877
01:17:59,880 --> 01:18:01,440
example configuration value or something

1878
01:18:01,440 --> 01:18:03,719
like that and we Define here okay this

1879
01:18:03,719 --> 01:18:06,659
is set to one for our clock Cycles

1880
01:18:06,659 --> 01:18:09,600
so when we want to do simulation for

1881
01:18:09,600 --> 01:18:11,640
example we can do it like this this is

1882
01:18:11,640 --> 01:18:14,100
just a shared zero Vector here so group

1883
01:18:14,100 --> 01:18:17,159
0 is considered and we can see if we

1884
01:18:17,159 --> 01:18:19,260
consider first order TECO which gets a

1885
01:18:19,260 --> 01:18:21,719
glitch extended probes like this so

1886
01:18:21,719 --> 01:18:24,060
three probes are considered

1887
01:18:24,060 --> 01:18:27,540
we usually simulate the value 1 0 1 here

1888
01:18:27,540 --> 01:18:29,699
because we consider the values from the

1889
01:18:29,699 --> 01:18:32,340
free glitch extended probes

1890
01:18:32,340 --> 01:18:34,140
when we consider for example another

1891
01:18:34,140 --> 01:18:36,120
group it's just a random value which is

1892
01:18:36,120 --> 01:18:39,480
shared here we can probe the value 1 1

1893
01:18:39,480 --> 01:18:42,780
0. so those two values

1894
01:18:42,780 --> 01:18:45,060
so that's the simulation what we do

1895
01:18:45,060 --> 01:18:46,980
afterwards

1896
01:18:46,980 --> 01:18:49,260
we have to process the simulation in a

1897
01:18:49,260 --> 01:18:51,360
way to generate distributions for each

1898
01:18:51,360 --> 01:18:53,400
group so we convert the simulated

1899
01:18:53,400 --> 01:18:55,860
results into a distribution table

1900
01:18:55,860 --> 01:18:58,380
if you haven't used for example g-square

1901
01:18:58,380 --> 01:19:00,719
test you may know that it's just type of

1902
01:19:00,719 --> 01:19:02,340
contingency table

1903
01:19:02,340 --> 01:19:04,560
which can look like this for example for

1904
01:19:04,560 --> 01:19:07,199
100 simulation we just count okay for

1905
01:19:07,199 --> 01:19:10,260
group 0 the value zero zero zero or q6

1906
01:19:10,260 --> 01:19:13,260
times and for group one it also it also

1907
01:19:13,260 --> 01:19:15,960
occurs six times in totally it occurs 12

1908
01:19:15,960 --> 01:19:18,120
times and so on so in total we have 100

1909
01:19:18,120 --> 01:19:21,239
simulations splitted on two groups so if

1910
01:19:21,239 --> 01:19:24,900
each value here separately so for now we

1911
01:19:24,900 --> 01:19:27,420
have this contingency tables and if you

1912
01:19:27,420 --> 01:19:29,699
maybe know from g-square test if not I

1913
01:19:29,699 --> 01:19:31,500
explain it to you we can do some

1914
01:19:31,500 --> 01:19:33,420
statistical hypothesis tests here namely

1915
01:19:33,420 --> 01:19:35,280
Independence test

1916
01:19:35,280 --> 01:19:37,140
so what we can do is we can evaluate

1917
01:19:37,140 --> 01:19:38,880
whether there's a significant dependency

1918
01:19:38,880 --> 01:19:42,360
between two categorical variables so we

1919
01:19:42,360 --> 01:19:44,460
Define a null hypothesis that there is

1920
01:19:44,460 --> 01:19:46,080
no relation between multiple groups of

1921
01:19:46,080 --> 01:19:48,239
samples but this is actually the step

1922
01:19:48,239 --> 01:19:51,060
where we do the leakage detection

1923
01:19:51,060 --> 01:19:54,300
so from this from this Independence

1924
01:19:54,300 --> 01:19:56,280
testing we get a p-value and based on

1925
01:19:56,280 --> 01:19:58,140
this p-value we can accept or reject our

1926
01:19:58,140 --> 01:20:01,500
null hypothesis so we can give

1927
01:20:01,500 --> 01:20:03,600
information here if we detect leakage or

1928
01:20:03,600 --> 01:20:04,800
not

1929
01:20:04,800 --> 01:20:07,080
for this we use the G test here instead

1930
01:20:07,080 --> 01:20:10,260
of g-square test it's almost computes

1931
01:20:10,260 --> 01:20:12,840
the same values here for example the V

1932
01:20:12,840 --> 01:20:14,820
here is the degree of freedom and we

1933
01:20:14,820 --> 01:20:18,000
compute a p-value at the end

1934
01:20:18,000 --> 01:20:20,640
so this is actually all this is the

1935
01:20:20,640 --> 01:20:22,320
whole probably procedure

1936
01:20:22,320 --> 01:20:24,900
we often got the questions how confident

1937
01:20:24,900 --> 01:20:28,320
are our results so can we be sure that

1938
01:20:28,320 --> 01:20:31,199
the results detect leakage or not

1939
01:20:31,199 --> 01:20:33,659
this is closely related to two steps two

1940
01:20:33,659 --> 01:20:36,000
false positive probability and false

1941
01:20:36,000 --> 01:20:37,440
negative probability

1942
01:20:37,440 --> 01:20:39,659
let's start with the less problematic

1943
01:20:39,659 --> 01:20:42,659
one false positive probability so

1944
01:20:42,659 --> 01:20:44,940
how possible is it that we detect

1945
01:20:44,940 --> 01:20:46,800
leakage where no leakage is or that we

1946
01:20:46,800 --> 01:20:48,659
falsely classify a security design as

1947
01:20:48,659 --> 01:20:50,040
insecure

1948
01:20:50,040 --> 01:20:52,260
this is closely related to a p-value

1949
01:20:52,260 --> 01:20:54,719
threshold so maybe you know from tvla it

1950
01:20:54,719 --> 01:20:56,820
is 4.5 threshold indicating that you

1951
01:20:56,820 --> 01:20:58,920
have leakage or not we have something

1952
01:20:58,920 --> 01:21:01,500
which is quite similar here so we set it

1953
01:21:01,500 --> 01:21:04,199
to the same value internally We compare

1954
01:21:04,199 --> 01:21:06,420
our p-value to 10 to the power of -5

1955
01:21:06,420 --> 01:21:09,000
just given here in the logarithmic way

1956
01:21:09,000 --> 01:21:11,640
if our p-value exceeds this threshold we

1957
01:21:11,640 --> 01:21:13,739
detect we say that we detect leakage if

1958
01:21:13,739 --> 01:21:16,500
not we say that our design is secure

1959
01:21:16,500 --> 01:21:18,420
so this is

1960
01:21:18,420 --> 01:21:21,060
yeah so clear now we have underlying

1961
01:21:21,060 --> 01:21:22,860
probability of 10 to the power of minus

1962
01:21:22,860 --> 01:21:24,960
5 for a false positive

1963
01:21:24,960 --> 01:21:28,199
if we evaluate very much attacker so for

1964
01:21:28,199 --> 01:21:30,179
example if we have millions of probing

1965
01:21:30,179 --> 01:21:33,060
sets this value can be too small then

1966
01:21:33,060 --> 01:21:35,159
our false positive probability could be

1967
01:21:35,159 --> 01:21:36,960
too high and we can

1968
01:21:36,960 --> 01:21:39,420
maybe observe some false positives then

1969
01:21:39,420 --> 01:21:41,580
we have to increase this threshold

1970
01:21:41,580 --> 01:21:43,260
the more important part is the false

1971
01:21:43,260 --> 01:21:46,320
negative probability so how possible is

1972
01:21:46,320 --> 01:21:48,179
it that probably oversees some leakage

1973
01:21:48,179 --> 01:21:50,100
or that we falsely classify an insecure

1974
01:21:50,100 --> 01:21:52,140
design as secure which is much much more

1975
01:21:52,140 --> 01:21:53,699
problematic

1976
01:21:53,699 --> 01:21:55,440
this is also strongly related to the

1977
01:21:55,440 --> 01:21:57,600
question how many simulations we have to

1978
01:21:57,600 --> 01:21:58,800
perform

1979
01:21:58,800 --> 01:22:01,440
and for this the statistic yeah has some

1980
01:22:01,440 --> 01:22:02,760
kind of approach to answer that question

1981
01:22:02,760 --> 01:22:04,199
which is related to the statistical

1982
01:22:04,199 --> 01:22:06,179
power of a test

1983
01:22:06,179 --> 01:22:08,940
this power defines two values the effect

1984
01:22:08,940 --> 01:22:10,980
size fee and the false negative

1985
01:22:10,980 --> 01:22:12,780
probability threshold

1986
01:22:12,780 --> 01:22:15,120
this effect size is just the value

1987
01:22:15,120 --> 01:22:17,699
statistic and set to evaluate the size

1988
01:22:17,699 --> 01:22:20,219
of an effect for example we set this

1989
01:22:20,219 --> 01:22:22,860
value here to 0.1 to detect even small

1990
01:22:22,860 --> 01:22:25,080
effects according to Cone there are

1991
01:22:25,080 --> 01:22:29,280
three values 0.1 0.3 and 0.5 to indicate

1992
01:22:29,280 --> 01:22:32,520
small medium and large effects but this

1993
01:22:32,520 --> 01:22:35,219
value are not that nice argument that

1994
01:22:35,219 --> 01:22:38,219
this they are almost just there

1995
01:22:38,219 --> 01:22:39,960
afterwards we set the false negative

1996
01:22:39,960 --> 01:22:41,760
probability beta which we need later

1997
01:22:41,760 --> 01:22:45,239
again 10 to the power of -5 what is now

1998
01:22:45,239 --> 01:22:46,560
important

1999
01:22:46,560 --> 01:22:49,260
from this effect size and from the false

2000
01:22:49,260 --> 01:22:51,540
negative probability we can compute the

2001
01:22:51,540 --> 01:22:53,880
number of traces to guarantee that we

2002
01:22:53,880 --> 01:22:57,120
detect effects of size 0.1 and larger

2003
01:22:57,120 --> 01:22:59,219
with a false negative probability of 10

2004
01:22:59,219 --> 01:23:01,080
to the power of -5

2005
01:23:01,080 --> 01:23:04,320
so here we cannot say okay our design is

2006
01:23:04,320 --> 01:23:06,360
secure or not but we can guarantee okay

2007
01:23:06,360 --> 01:23:08,640
we detect at least effects of a

2008
01:23:08,640 --> 01:23:10,920
particular size

2009
01:23:10,920 --> 01:23:12,239
okay

2010
01:23:12,239 --> 01:23:14,460
we also did some case studies

2011
01:23:14,460 --> 01:23:16,860
where we evaluated some Mass designs

2012
01:23:16,860 --> 01:23:17,880
which are available through public

2013
01:23:17,880 --> 01:23:20,820
GitHub reports and as I said before the

2014
01:23:20,820 --> 01:23:22,620
main focus of pro lead lies in

2015
01:23:22,620 --> 01:23:24,900
evaluating complete size of course so we

2016
01:23:24,900 --> 01:23:26,640
evaluate complete Cipher calls at first

2017
01:23:26,640 --> 01:23:28,739
and second security order

2018
01:23:28,739 --> 01:23:31,260
I don't want to go too much into detail

2019
01:23:31,260 --> 01:23:33,360
since we did a lot of case studies as

2020
01:23:33,360 --> 01:23:35,280
you can see here I want to say something

2021
01:23:35,280 --> 01:23:38,219
about it first we use enough simulations

2022
01:23:38,219 --> 01:23:40,800
to achieve an effect size of 0.1 so we

2023
01:23:40,800 --> 01:23:43,260
can affect we can detect all effects of

2024
01:23:43,260 --> 01:23:47,100
size 0.1 and larger

2025
01:23:47,100 --> 01:23:49,320
for the results I want to say at least

2026
01:23:49,320 --> 01:23:51,360
we can do it so we are able to evaluate

2027
01:23:51,360 --> 01:23:53,460
first and second order secure designs in

2028
01:23:53,460 --> 01:23:54,900
reasonable time

2029
01:23:54,900 --> 01:23:57,780
so yeah this reason of tie here depends

2030
01:23:57,780 --> 01:24:00,540
between seconds and you know weeks so

2031
01:24:00,540 --> 01:24:02,820
for some designs we need a lot of time

2032
01:24:02,820 --> 01:24:04,679
since they have our Thai security orders

2033
01:24:04,679 --> 01:24:06,719
and our really really large designs and

2034
01:24:06,719 --> 01:24:08,580
some are reasonably fast

2035
01:24:08,580 --> 01:24:11,159
the more important sentence I want to

2036
01:24:11,159 --> 01:24:13,620
give you is we found several mistakes in

2037
01:24:13,620 --> 01:24:16,020
designs which are given to conferences

2038
01:24:16,020 --> 01:24:18,420
so these designs are already evaluated

2039
01:24:18,420 --> 01:24:20,400
and the artists claim them as secure we

2040
01:24:20,400 --> 01:24:24,199
detect with Pro lead they are not

2041
01:24:24,659 --> 01:24:26,580
so I want to skip that because of time

2042
01:24:26,580 --> 01:24:28,440
to come to an end here

2043
01:24:28,440 --> 01:24:30,780
we introduced Pro lead a tool based on

2044
01:24:30,780 --> 01:24:32,040
the simulation-based approach to

2045
01:24:32,040 --> 01:24:33,540
evaluate the security of mass

2046
01:24:33,540 --> 01:24:34,920
implementation

2047
01:24:34,920 --> 01:24:37,679
we combine the benefits of leakage

2048
01:24:37,679 --> 01:24:39,500
simulators and formal verification

2049
01:24:39,500 --> 01:24:42,300
namely that we are in line with probing

2050
01:24:42,300 --> 01:24:45,480
model and that we are more performant

2051
01:24:45,480 --> 01:24:47,219
than formal verification tools and then

2052
01:24:47,219 --> 01:24:50,520
we can evaluate larger designs

2053
01:24:50,520 --> 01:24:52,440
probably it is available through GitHub

2054
01:24:52,440 --> 01:24:54,300
so I would be happy if you use it

2055
01:24:54,300 --> 01:24:56,460
actually I spent a lot of time to write

2056
01:24:56,460 --> 01:24:58,739
a good Wiki so hopefully you are all

2057
01:24:58,739 --> 01:25:00,420
able to use this tool

2058
01:25:00,420 --> 01:25:02,159
I would be nice to hear that if someone

2059
01:25:02,159 --> 01:25:04,140
of you really uses it

2060
01:25:04,140 --> 01:25:05,460
okay

2061
01:25:05,460 --> 01:25:07,380
that's all from my side thank you very

2062
01:25:07,380 --> 01:25:09,000
much for your attention if you have any

2063
01:25:09,000 --> 01:25:12,140
questions just us

2064
01:25:20,760 --> 01:25:22,320
okay looking around are there any

2065
01:25:22,320 --> 01:25:24,620
questions

2066
01:25:30,719 --> 01:25:33,060
okay there is a question

2067
01:25:33,060 --> 01:25:35,340
um is it going to be an issue if your

2068
01:25:35,340 --> 01:25:37,640
probing set becomes too large for

2069
01:25:37,640 --> 01:25:41,580
g-square or G test say 64 bits if the

2070
01:25:41,580 --> 01:25:43,679
probing set become too large

2071
01:25:43,679 --> 01:25:47,460
yes yes yes it is unfortunately so the

2072
01:25:47,460 --> 01:25:49,440
larger the probing set become the more

2073
01:25:49,440 --> 01:25:51,000
traces you have to simulate or the more

2074
01:25:51,000 --> 01:25:53,100
simulations you need if you have a

2075
01:25:53,100 --> 01:25:54,360
really really really really large

2076
01:25:54,360 --> 01:25:57,780
probing set you may need very much

2077
01:25:57,780 --> 01:25:59,580
simulations and you cannot achieve that

2078
01:25:59,580 --> 01:26:01,080
in reasonable time that could be a

2079
01:26:01,080 --> 01:26:04,679
problem we have some other modes to

2080
01:26:04,679 --> 01:26:06,420
counteract this which are based on

2081
01:26:06,420 --> 01:26:07,920
decreasing the

2082
01:26:07,920 --> 01:26:10,260
the table a little bit just compressing

2083
01:26:10,260 --> 01:26:12,600
the values but this is not in line with

2084
01:26:12,600 --> 01:26:14,280
that what I presented in this case we

2085
01:26:14,280 --> 01:26:16,440
have to do some some compression of our

2086
01:26:16,440 --> 01:26:20,040
values so short answer yes that could be

2087
01:26:20,040 --> 01:26:21,120
a problem

2088
01:26:21,120 --> 01:26:23,280
okay thank you

2089
01:26:23,280 --> 01:26:25,260
yeah

2090
01:26:25,260 --> 01:26:27,000
it's not a nice presentation a very

2091
01:26:27,000 --> 01:26:29,159
interesting approach I was wondering in

2092
01:26:29,159 --> 01:26:30,659
your case studies did you try to

2093
01:26:30,659 --> 01:26:32,820
challenge the confidence intervals you

2094
01:26:32,820 --> 01:26:34,980
complete can you repeat it I cannot hear

2095
01:26:34,980 --> 01:26:35,880
sorry

2096
01:26:35,880 --> 01:26:38,639
um sorry I will try to speak louder

2097
01:26:38,639 --> 01:26:41,159
um in your case studies did you actually

2098
01:26:41,159 --> 01:26:43,260
um challenge the confidence intervals

2099
01:26:43,260 --> 01:26:45,239
you computed in a sense that you break

2100
01:26:45,239 --> 01:26:48,420
the implementation or make it broken by

2101
01:26:48,420 --> 01:26:51,780
changing it at some very hidden place

2102
01:26:51,780 --> 01:26:53,760
and then trying to detect that with with

2103
01:26:53,760 --> 01:26:56,639
the tools so so you mean if we can if we

2104
01:26:56,639 --> 01:26:58,860
can do detect improvements so when we

2105
01:26:58,860 --> 01:27:00,780
that we detect leakage and then secure

2106
01:27:00,780 --> 01:27:02,940
it and then verify that the the leakage

2107
01:27:02,940 --> 01:27:05,400
is gone so yeah your tool should reject

2108
01:27:05,400 --> 01:27:06,960
an implementation which is insecure

2109
01:27:06,960 --> 01:27:09,540
right yeah so instead of just checking

2110
01:27:09,540 --> 01:27:12,780
whether it's secure break it no make it

2111
01:27:12,780 --> 01:27:15,060
make it broken and then check that the

2112
01:27:15,060 --> 01:27:16,800
tool really finds the spark even if it's

2113
01:27:16,800 --> 01:27:18,300
well hidden

2114
01:27:18,300 --> 01:27:20,719
to get a few minutes

2115
01:27:20,719 --> 01:27:25,159
if I get two negatives yes of course

2116
01:27:26,520 --> 01:27:28,560
I'm not sure if I get the question sorry

2117
01:27:28,560 --> 01:27:30,780
maybe we can discuss it offline I'd be

2118
01:27:30,780 --> 01:27:33,139
happy to

2119
01:27:36,120 --> 01:27:39,019
any more questions

2120
01:27:39,120 --> 01:27:41,540
yep

2121
01:27:43,560 --> 01:27:45,420
hello thank you for the presentation I

2122
01:27:45,420 --> 01:27:47,639
just had a question about uh the

2123
01:27:47,639 --> 01:27:49,860
statistical test that you use so you you

2124
01:27:49,860 --> 01:27:52,860
choose the g-test sorry I'm sorry maybe

2125
01:27:52,860 --> 01:27:55,620
about ESR not that good so yeah you you

2126
01:27:55,620 --> 01:27:58,440
use the g-test right so actually I'm

2127
01:27:58,440 --> 01:28:00,600
totally unfamiliar with the g-test so I

2128
01:28:00,600 --> 01:28:03,300
was just curious about what are these uh

2129
01:28:03,300 --> 01:28:04,320
the

2130
01:28:04,320 --> 01:28:07,260
the strength of the g-test compared to a

2131
01:28:07,260 --> 01:28:10,020
t-test or a key squared or anything I

2132
01:28:10,020 --> 01:28:12,719
can answer that so for g-square test is

2133
01:28:12,719 --> 01:28:14,880
usually a problem that it overestimates

2134
01:28:14,880 --> 01:28:17,280
statistical outliers so the problem here

2135
01:28:17,280 --> 01:28:18,900
is especially how we can deal with

2136
01:28:18,900 --> 01:28:20,639
sparse contingency table so when we have

2137
01:28:20,639 --> 01:28:22,199
a really really large contingency table

2138
01:28:22,199 --> 01:28:24,120
it could be a problem since this

2139
01:28:24,120 --> 01:28:26,100
outliers are overestimated and we detect

2140
01:28:26,100 --> 01:28:28,739
leakage where no leakage is this is a

2141
01:28:28,739 --> 01:28:31,139
little bit better with g-test that was

2142
01:28:31,139 --> 01:28:33,679
the only idea

2143
01:28:37,380 --> 01:28:39,980
around

2144
01:28:42,000 --> 01:28:45,719
yep I think with this week we can we

2145
01:28:45,719 --> 01:28:48,920
will end this session thank you

2146
01:28:53,820 --> 01:28:56,840
thank you thank you

2147
01:29:00,540 --> 01:29:02,100
it's not mute no do you hear me yes okay

2148
01:29:02,100 --> 01:29:04,620
so um that's the end of the session

2149
01:29:04,620 --> 01:29:06,840
thanks for to all the speakers

2150
01:29:06,840 --> 01:29:09,480
uh the program continues now starting

2151
01:29:09,480 --> 01:29:11,100
from six o'clock we have a walking

2152
01:29:11,100 --> 01:29:13,260
dinner and you believe that that's where

2153
01:29:13,260 --> 01:29:15,540
you had lunch today

2154
01:29:15,540 --> 01:29:17,159
it's not far from here

2155
01:29:17,159 --> 01:29:18,719
right

2156
01:29:18,719 --> 01:29:21,360
um that's for two hours until eight at

2157
01:29:21,360 --> 01:29:22,620
eight o'clock we go from you Williams

2158
01:29:22,620 --> 01:29:24,840
are to Peter the summer

2159
01:29:24,840 --> 01:29:26,940
the the main venue

2160
01:29:26,940 --> 01:29:28,739
there we have the test of time award

2161
01:29:28,739 --> 01:29:30,179
ceremony

2162
01:29:30,179 --> 01:29:32,760
and afterwards the rum session and an

2163
01:29:32,760 --> 01:29:34,800
open bar

2164
01:29:34,800 --> 01:29:37,400
see you there

2165
01:29:42,239 --> 01:29:44,159
did you have to put these ones extremely

2166
01:29:44,159 --> 01:29:46,339
good

2167
01:29:48,659 --> 01:29:51,379
we have to really

