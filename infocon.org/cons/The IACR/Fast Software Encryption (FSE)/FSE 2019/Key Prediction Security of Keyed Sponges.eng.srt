1
00:00:00,050 --> 00:00:07,700
so the Sudan turkeys keep addition

2
00:00:03,540 --> 00:00:07,700
security of kids sponges by batmanning

3
00:00:07,760 --> 00:00:14,070
okay I cannot walk around here so I have

4
00:00:12,059 --> 00:00:16,619
to i stand here so welcome to my

5
00:00:14,070 --> 00:00:18,420
presentation bit of explanation to the

6
00:00:16,619 --> 00:00:20,730
pictures so there has been a lot of

7
00:00:18,420 --> 00:00:22,529
analysis on the kid sponge I turned out

8
00:00:20,730 --> 00:00:25,470
that there was one small piece of the

9
00:00:22,529 --> 00:00:28,619
analysis that was not really finished

10
00:00:25,470 --> 00:00:30,810
yet and so basically what this work does

11
00:00:28,619 --> 00:00:34,040
it's a last piece of the black box

12
00:00:30,810 --> 00:00:37,320
security of the well of the kid sponge

13
00:00:34,040 --> 00:00:38,550
so I think most of you know the basic

14
00:00:37,320 --> 00:00:41,160
sponge construction it's a hash function

15
00:00:38,550 --> 00:00:45,449
it takes it a permutation in this case

16
00:00:41,160 --> 00:00:47,489
permutation pie and then you have an

17
00:00:45,450 --> 00:00:49,530
inner part and an outer part and the

18
00:00:47,489 --> 00:00:52,800
message is always absorbed in the outer

19
00:00:49,530 --> 00:00:54,780
part step by step then you permute put

20
00:00:52,800 --> 00:00:58,440
in the state and in the end you truncate

21
00:00:54,780 --> 00:01:00,690
part and you truncate data by squeezing

22
00:00:58,440 --> 00:01:02,579
the outer part and the construction

23
00:01:00,690 --> 00:01:03,989
turns out to be very popular since the

24
00:01:02,579 --> 00:01:08,010
introduction it has been used in many

25
00:01:03,989 --> 00:01:09,840
hash functions including shot 3 and many

26
00:01:08,010 --> 00:01:12,630
lightweight hash functions are based on

27
00:01:09,840 --> 00:01:14,729
it and it is proven that if you take an

28
00:01:12,630 --> 00:01:16,530
ideal permutation pie then this

29
00:01:14,729 --> 00:01:19,350
construction behaves like a random

30
00:01:16,530 --> 00:01:21,810
Oracle up to 2 to the C over 2 where C

31
00:01:19,350 --> 00:01:25,110
is the capacity so the size of the inner

32
00:01:21,810 --> 00:01:27,330
state but this is just keyless hashing a

33
00:01:25,110 --> 00:01:29,700
keyless a cryptography choice hashing

34
00:01:27,330 --> 00:01:32,579
and it turns out that you can also use

35
00:01:29,700 --> 00:01:34,500
this points in a kid setting and this is

36
00:01:32,579 --> 00:01:36,210
what the kids punched us and originally

37
00:01:34,500 --> 00:01:38,579
the original idea of the keys point is

38
00:01:36,210 --> 00:01:42,600
just to glue together the key and the

39
00:01:38,579 --> 00:01:43,289
message so you used the normal sponge as

40
00:01:42,600 --> 00:01:45,000
a black box

41
00:01:43,290 --> 00:01:46,829
but as input of the message you just

42
00:01:45,000 --> 00:01:48,360
don't take the message but you glue

43
00:01:46,829 --> 00:01:50,880
together the key and the message and

44
00:01:48,360 --> 00:01:52,950
then you Pat it into our bed blocks and

45
00:01:50,880 --> 00:01:55,619
then you absorb it step after step and

46
00:01:52,950 --> 00:01:57,329
this is your outer kids this is the

47
00:01:55,619 --> 00:01:59,670
original key sponge which is currently

48
00:01:57,329 --> 00:02:02,960
known as the ultra kid sponge because

49
00:01:59,670 --> 00:02:05,790
the key goes into the outer part and

50
00:02:02,960 --> 00:02:07,860
there is an alternative namely the inner

51
00:02:05,790 --> 00:02:08,819
key sponge where the key goes into the

52
00:02:07,860 --> 00:02:12,300
inner part

53
00:02:08,818 --> 00:02:13,170
so you just initialize the state and by

54
00:02:12,300 --> 00:02:14,910
having

55
00:02:13,170 --> 00:02:17,640
okay Indiana part doesn't need to be

56
00:02:14,910 --> 00:02:20,900
cbits what matters here is that the key

57
00:02:17,640 --> 00:02:26,519
size is smaller or equal than cbits and

58
00:02:20,900 --> 00:02:28,410
and this is the energy sponge finally

59
00:02:26,520 --> 00:02:30,540
there was a full kiss point because it

60
00:02:28,410 --> 00:02:32,670
turned out that you do not need to have

61
00:02:30,540 --> 00:02:35,459
if you have a kid state so if you have a

62
00:02:32,670 --> 00:02:37,619
secret state you do not risk need to

63
00:02:35,459 --> 00:02:39,750
restrict yourself to are bit absurd you

64
00:02:37,620 --> 00:02:42,450
can have full state absorption and this

65
00:02:39,750 --> 00:02:44,340
is the full kid sponge and note that the

66
00:02:42,450 --> 00:02:46,160
focus point is a generalization of the

67
00:02:44,340 --> 00:02:49,170
energy sponge because you can just pad

68
00:02:46,160 --> 00:02:50,760
the message in such a way that you have

69
00:02:49,170 --> 00:02:53,130
our bet message blocks and then you

70
00:02:50,760 --> 00:02:56,040
padded with zeros so the Fugees points

71
00:02:53,130 --> 00:02:59,609
this is a generalization of the energy

72
00:02:56,040 --> 00:03:01,109
sponge and this work considers therefore

73
00:02:59,610 --> 00:03:02,670
consider see out the kids points and the

74
00:03:01,110 --> 00:03:04,319
focus points so the focus in this work

75
00:03:02,670 --> 00:03:07,679
is on the other kids points and the full

76
00:03:04,319 --> 00:03:10,619
kit sponge and this is a picture that

77
00:03:07,680 --> 00:03:13,830
covers both of them so I'm sorry I

78
00:03:10,620 --> 00:03:16,980
changed this time but it's the same as

79
00:03:13,830 --> 00:03:20,100
the same function and so we have a

80
00:03:16,980 --> 00:03:22,440
capacity C which guarantee is basically

81
00:03:20,100 --> 00:03:24,900
the security which is the capacity

82
00:03:22,440 --> 00:03:27,989
during the squeezing so here you have a

83
00:03:24,900 --> 00:03:30,900
squeezing of our base and the capacity

84
00:03:27,989 --> 00:03:34,200
is C for absorption you have a capacity

85
00:03:30,900 --> 00:03:36,269
which I currently called C prime and so

86
00:03:34,200 --> 00:03:37,858
the absorption of the key the key is

87
00:03:36,269 --> 00:03:40,320
first padded in the blocks then a

88
00:03:37,859 --> 00:03:43,260
message which is padded into blocks the

89
00:03:40,320 --> 00:03:45,120
capacity is C prime which is 0 which is

90
00:03:43,260 --> 00:03:46,980
C if you take the outer case point which

91
00:03:45,120 --> 00:03:50,130
is 0 if you take the focus punch and

92
00:03:46,980 --> 00:03:53,000
this picture does covers both the focus

93
00:03:50,130 --> 00:03:55,380
points in the artwork into a sponge

94
00:03:53,000 --> 00:03:57,120
now if you look at the security of the

95
00:03:55,380 --> 00:03:59,430
analysis of the scheme the scheme has

96
00:03:57,120 --> 00:04:01,950
received a lot of analysis and but if

97
00:03:59,430 --> 00:04:04,200
you really simplify the bounce really

98
00:04:01,950 --> 00:04:05,880
look at the decor terms in the bound you

99
00:04:04,200 --> 00:04:10,108
see the both have a comparable security

100
00:04:05,880 --> 00:04:12,630
bound so if you take m to be the honor

101
00:04:10,109 --> 00:04:15,030
the data complexity so the cost of

102
00:04:12,630 --> 00:04:17,130
making construction queries and the time

103
00:04:15,030 --> 00:04:19,589
complexities which in this case

104
00:04:17,130 --> 00:04:22,979
corresponds to the number of queries to

105
00:04:19,589 --> 00:04:24,830
the permutation pi then the the bound

106
00:04:22,979 --> 00:04:28,520
really is something for our M square

107
00:04:24,830 --> 00:04:31,639
- to the C + M times n over 2 to the C +

108
00:04:28,520 --> 00:04:33,318
some magical term and this applies for

109
00:04:31,639 --> 00:04:34,550
both the Fugees points in the other case

110
00:04:33,319 --> 00:04:36,319
points there are a lot of constants

111
00:04:34,550 --> 00:04:39,740
hidden in this equation which I did not

112
00:04:36,319 --> 00:04:41,479
put on the slide but at a high level

113
00:04:39,740 --> 00:04:44,870
this is how the bound looks like for

114
00:04:41,479 --> 00:04:48,680
both constructions this work focuses on

115
00:04:44,870 --> 00:04:51,169
this last term this magic term here and

116
00:04:48,680 --> 00:04:53,120
what this term basically says is it

117
00:04:51,169 --> 00:04:57,139
bounds the probability that the attacker

118
00:04:53,120 --> 00:05:00,830
predicts the key and what do we mean by

119
00:04:57,139 --> 00:05:04,129
this and so we focus on the key

120
00:05:00,830 --> 00:05:05,960
absorption part in the sponge so the

121
00:05:04,129 --> 00:05:08,120
rest we forget about we forget about the

122
00:05:05,960 --> 00:05:09,888
rest we focus on the key absorption in

123
00:05:08,120 --> 00:05:12,110
this case we have lambda blocks which

124
00:05:09,889 --> 00:05:13,580
are absorbed one by one and now the we

125
00:05:12,110 --> 00:05:15,530
consider the following game for an

126
00:05:13,580 --> 00:05:19,840
attacker so the attacker can make

127
00:05:15,530 --> 00:05:19,840
primitive queries evaluations of pi

128
00:05:19,900 --> 00:05:26,239
namely n of them and then we randomly

129
00:05:23,270 --> 00:05:28,639
select a key and the attacker wins if

130
00:05:26,240 --> 00:05:32,509
the query history so all queries that

131
00:05:28,639 --> 00:05:34,909
the attacker made cover the evaluation

132
00:05:32,509 --> 00:05:37,250
of the key absorption here and each once

133
00:05:34,909 --> 00:05:39,800
the key is selected and you absorb the

134
00:05:37,250 --> 00:05:42,020
key here you make lambda permutations of

135
00:05:39,800 --> 00:05:44,330
pi and the attacker basically wins the

136
00:05:42,020 --> 00:05:47,870
game if these lambda queries are already

137
00:05:44,330 --> 00:05:50,750
in a square history and so it's a weird

138
00:05:47,870 --> 00:05:54,409
game right it's not a security model on

139
00:05:50,750 --> 00:05:57,650
its own but what happens if you look at

140
00:05:54,409 --> 00:05:59,810
typical keeps punch proofs this is it's

141
00:05:57,650 --> 00:06:01,310
typically a bad event so if you look at

142
00:05:59,810 --> 00:06:04,039
the analysis somewhere hidden in the

143
00:06:01,310 --> 00:06:05,960
analysis is a bad event namely the event

144
00:06:04,039 --> 00:06:10,128
that the attacker accidentally broke

145
00:06:05,960 --> 00:06:12,979
this however in this work we focus on

146
00:06:10,129 --> 00:06:14,719
this and bad event in particular and

147
00:06:12,979 --> 00:06:17,930
that's why we call that the key

148
00:06:14,719 --> 00:06:19,759
prediction security and but it's not a

149
00:06:17,930 --> 00:06:23,180
security notion on itself it should be

150
00:06:19,759 --> 00:06:24,860
seen as a part of a big security

151
00:06:23,180 --> 00:06:30,620
analysis of the kids punch or the key

152
00:06:24,860 --> 00:06:32,539
duplex or whatever so how large is this

153
00:06:30,620 --> 00:06:35,330
key prediction security so the attacker

154
00:06:32,539 --> 00:06:37,550
needs to make queries and then the key

155
00:06:35,330 --> 00:06:38,240
is selected and the attacker wins if his

156
00:06:37,550 --> 00:06:42,199
queries

157
00:06:38,240 --> 00:06:43,699
cover the evaluation of okay now first

158
00:06:42,199 --> 00:06:46,580
consider the case where the key is one

159
00:06:43,699 --> 00:06:49,400
block so here we change the picture so

160
00:06:46,580 --> 00:06:51,229
the key is just one block it's absorbed

161
00:06:49,400 --> 00:06:53,620
then the permutation is evaluated and

162
00:06:51,229 --> 00:06:56,090
then you start with message m1 etc and

163
00:06:53,620 --> 00:06:58,669
this happens for instance in full kids

164
00:06:56,090 --> 00:07:00,349
punch where C prime is zero it also

165
00:06:58,669 --> 00:07:02,690
happens in the other kids point if the

166
00:07:00,350 --> 00:07:07,340
key is smaller than the the key size is

167
00:07:02,690 --> 00:07:09,889
smaller than the rate but for this the

168
00:07:07,340 --> 00:07:11,690
security bound is pretty obvious and the

169
00:07:09,889 --> 00:07:14,509
attacker makes an query so it can make

170
00:07:11,690 --> 00:07:16,009
an permutation attempts so it can make n

171
00:07:14,509 --> 00:07:18,110
queries of this permutation for

172
00:07:16,009 --> 00:07:20,270
different key gasses and the attacker

173
00:07:18,110 --> 00:07:22,130
wins if any of them is correct so

174
00:07:20,270 --> 00:07:27,229
basically the key prediction security

175
00:07:22,130 --> 00:07:30,169
would be an over two to the k however

176
00:07:27,229 --> 00:07:33,440
for more than one key block the analysis

177
00:07:30,169 --> 00:07:35,359
turns out to be significantly harder and

178
00:07:33,440 --> 00:07:36,199
there is a work there is an analysis of

179
00:07:35,360 --> 00:07:38,780
Cassie at all

180
00:07:36,199 --> 00:07:43,460
who considered this event as part of a

181
00:07:38,780 --> 00:07:46,219
big analysis and they proved that the

182
00:07:43,460 --> 00:07:48,260
key prediction security is at most B to

183
00:07:46,220 --> 00:07:51,199
the lambda P is to full state size of

184
00:07:48,260 --> 00:07:56,300
the permutation times M over 2 to the K

185
00:07:51,199 --> 00:07:59,030
over 2 and it's a tedious is a technical

186
00:07:56,300 --> 00:08:02,330
analysis but it's used in many sponge

187
00:07:59,030 --> 00:08:04,219
proofs and many follow-up works use this

188
00:08:02,330 --> 00:08:06,830
analysis of the key prediction security

189
00:08:04,220 --> 00:08:09,110
as a black box even though it was not

190
00:08:06,830 --> 00:08:11,270
named key prediction security but they

191
00:08:09,110 --> 00:08:14,120
use this analysis this result about as a

192
00:08:11,270 --> 00:08:15,770
black box but it should be obvious that

193
00:08:14,120 --> 00:08:17,570
this part is not really tight

194
00:08:15,770 --> 00:08:19,940
I mean it's control intuitive that you

195
00:08:17,570 --> 00:08:22,190
have a very bad pound here you have

196
00:08:19,940 --> 00:08:25,639
basically 2 to the K security here you

197
00:08:22,190 --> 00:08:27,139
can add 2 to the K over 2 security so if

198
00:08:25,639 --> 00:08:30,340
you look at a concrete example so

199
00:08:27,139 --> 00:08:33,320
suppose we take the outer kids point

200
00:08:30,340 --> 00:08:35,809
these are some really arbitrary numbers

201
00:08:33,320 --> 00:08:38,779
like a 320 bit permit a state size a

202
00:08:35,809 --> 00:08:41,630
capacity of 256 bits a rate of 64 bits

203
00:08:38,779 --> 00:08:43,760
and a key size of 64 bits if you for

204
00:08:41,630 --> 00:08:46,700
instance take these numbers so in other

205
00:08:43,760 --> 00:08:48,950
kids points with these numbers the

206
00:08:46,700 --> 00:08:50,540
security punch really behaves as follows

207
00:08:48,950 --> 00:08:51,190
so here you get the key prediction

208
00:08:50,540 --> 00:08:53,829
security

209
00:08:51,190 --> 00:08:55,629
so these are the basic terms which I'm

210
00:08:53,829 --> 00:08:57,519
not touching in this work the key

211
00:08:55,629 --> 00:08:59,889
protection security would be n over 2 to

212
00:08:57,519 --> 00:09:01,870
the K so you basically get I mean it's

213
00:08:59,889 --> 00:09:04,870
the dominating term and over 2 to the 64

214
00:09:01,870 --> 00:09:06,970
bit security however if you now double

215
00:09:04,870 --> 00:09:09,040
the key size so you take the same be the

216
00:09:06,970 --> 00:09:11,589
same capacity the same rate but at twice

217
00:09:09,040 --> 00:09:15,939
as large key you also get 64 bits of

218
00:09:11,589 --> 00:09:17,339
security and catch a key i can nort and

219
00:09:15,939 --> 00:09:20,469
these are the parameters

220
00:09:17,339 --> 00:09:22,930
note that KIAC was a full kit sponsor

221
00:09:20,470 --> 00:09:24,370
other ones for other kids punch the rat

222
00:09:22,930 --> 00:09:28,508
ones are the ones where the key is

223
00:09:24,370 --> 00:09:30,100
larger than the rate one would be

224
00:09:28,509 --> 00:09:31,449
tempted to say that in this case the key

225
00:09:30,100 --> 00:09:35,040
prediction security improves the

226
00:09:31,449 --> 00:09:37,479
analysis but well there's a there's a

227
00:09:35,040 --> 00:09:40,269
trick here namely that these schemes

228
00:09:37,480 --> 00:09:42,279
they were indeed out the kids punch but

229
00:09:40,269 --> 00:09:43,300
they initialized the state as if it was

230
00:09:42,279 --> 00:09:46,060
a full kids punch

231
00:09:43,300 --> 00:09:50,620
so if you look for instance at ask only

232
00:09:46,060 --> 00:09:53,410
one point two and you see this is just a

233
00:09:50,620 --> 00:09:55,990
print screen from their paper and you

234
00:09:53,410 --> 00:09:59,889
see you do full state absorption and

235
00:09:55,990 --> 00:10:02,560
full state screen I'm out of state out

236
00:09:59,889 --> 00:10:04,930
of part absorption and squeezing but the

237
00:10:02,560 --> 00:10:08,349
initialization of the key is on the full

238
00:10:04,930 --> 00:10:11,500
state so and that saves them about say

239
00:10:08,350 --> 00:10:13,259
if stamp I mean that means that with the

240
00:10:11,500 --> 00:10:16,209
analysis we did in this work does not

241
00:10:13,259 --> 00:10:18,009
improve the analysis fast comput

242
00:10:16,209 --> 00:10:21,339
irrational bound ready apply then the

243
00:10:18,009 --> 00:10:24,069
same holds for ketchup so I don't want

244
00:10:21,339 --> 00:10:25,930
to oversell by saying that that our

245
00:10:24,069 --> 00:10:27,790
results apply to us gonna catch it they

246
00:10:25,930 --> 00:10:29,709
don't apply to us gonna catch it because

247
00:10:27,790 --> 00:10:33,069
he analysis was already the scheme was

248
00:10:29,709 --> 00:10:34,569
already good enough so that we didn't

249
00:10:33,069 --> 00:10:38,380
need to do the work for us gonna catch

250
00:10:34,569 --> 00:10:39,910
however if you still look at Frances she

251
00:10:38,380 --> 00:10:43,660
asked on parameter so if you take the

252
00:10:39,910 --> 00:10:45,459
ask on parameters with 322 56 64 and 128

253
00:10:43,660 --> 00:10:49,480
which is the example which we saw a

254
00:10:45,459 --> 00:10:52,209
couple of slides back then this would be

255
00:10:49,480 --> 00:10:56,620
the old pant so I'm squared over to

256
00:10:52,209 --> 00:11:00,099
today B and over to to the C + + / to

257
00:10:56,620 --> 00:11:02,769
today are over to so 10 over 2 to the 64

258
00:11:00,100 --> 00:11:04,250
and a new bound would basically improve

259
00:11:02,769 --> 00:11:07,940
it to n over 2 to the 1

260
00:11:04,250 --> 00:11:10,340
so intuitively a few limited unlike two

261
00:11:07,940 --> 00:11:11,780
to the power one sixty the all bound to

262
00:11:10,340 --> 00:11:14,210
give security as long as you're flying

263
00:11:11,780 --> 00:11:15,890
complexity is two to the 64 and an

264
00:11:14,210 --> 00:11:18,580
Ubuntu gives security as long as you

265
00:11:15,890 --> 00:11:20,870
offline to praxis at most two to the 128

266
00:11:18,580 --> 00:11:23,450
but once again this is only forty

267
00:11:20,870 --> 00:11:26,360
parameters it doesn't apply to ask on

268
00:11:23,450 --> 00:11:30,080
itself and but a case where it does

269
00:11:26,360 --> 00:11:31,430
apply a stroke so strobe with how they

270
00:11:30,080 --> 00:11:34,310
call the lighter II framework for

271
00:11:31,430 --> 00:11:35,510
network protocols at a used sponge for

272
00:11:34,310 --> 00:11:37,640
many things so they wanted to have a

273
00:11:35,510 --> 00:11:39,530
simple small code size so they use the

274
00:11:37,640 --> 00:11:42,680
Kiedis sponge as a black box for

275
00:11:39,530 --> 00:11:44,030
everything so also for message

276
00:11:42,680 --> 00:11:46,370
authentication so they use the key

277
00:11:44,030 --> 00:11:48,740
sponges a black box and then they the

278
00:11:46,370 --> 00:11:52,040
inputs are always absorbed as if it was

279
00:11:48,740 --> 00:11:54,410
an ultra kids punch and these are the

280
00:11:52,040 --> 00:11:57,079
parameter sizes of strobe so forget

281
00:11:54,410 --> 00:12:00,709
about the big ones now for the small one

282
00:11:57,080 --> 00:12:04,160
it has a four hundred state a 256 bit

283
00:12:00,710 --> 00:12:06,800
capacity 144 bits rate and a 256 bit key

284
00:12:04,160 --> 00:12:09,199
so the smallest version of strobe

285
00:12:06,800 --> 00:12:11,630
effectively absorbs the key in two

286
00:12:09,200 --> 00:12:14,180
rounds so this means that if you would

287
00:12:11,630 --> 00:12:15,589
apply the bound the analysis to do the

288
00:12:14,180 --> 00:12:18,079
old analysis to strobe

289
00:12:15,589 --> 00:12:19,700
you would get about that basically looks

290
00:12:18,080 --> 00:12:22,160
like this so the first parts don't

291
00:12:19,700 --> 00:12:25,339
matter in this work so this is the

292
00:12:22,160 --> 00:12:28,130
security to to the 128-bit security even

293
00:12:25,339 --> 00:12:30,800
though you use it 256 bit key but now we

294
00:12:28,130 --> 00:12:32,930
improved it to and over to to the 256

295
00:12:30,800 --> 00:12:35,810
and intuitively this means that if you

296
00:12:32,930 --> 00:12:38,449
limit the online complexity to to 100 in

297
00:12:35,810 --> 00:12:40,219
the old case you only had security as

298
00:12:38,450 --> 00:12:44,680
long as you offline praxis to through

299
00:12:40,220 --> 00:12:47,720
128 but now it gets to 2 to 156 of

300
00:12:44,680 --> 00:12:53,380
course one may argue that two to 128 is

301
00:12:47,720 --> 00:12:53,380
still quite big but it is an improvement

302
00:12:54,280 --> 00:12:59,420
so to conclude this key prediction

303
00:12:57,290 --> 00:13:01,730
security was basically the last missing

304
00:12:59,420 --> 00:13:03,589
link indicates punch proves so somewhere

305
00:13:01,730 --> 00:13:06,050
hidden in this case punch proof analysis

306
00:13:03,589 --> 00:13:09,589
there was this term and but it was not

307
00:13:06,050 --> 00:13:11,589
optimal for various results it's close

308
00:13:09,589 --> 00:13:14,720
to the optimal banter is a small loss

309
00:13:11,589 --> 00:13:17,160
due to a proof technique and but there

310
00:13:14,720 --> 00:13:20,190
is no attack faster than a key recovery

311
00:13:17,160 --> 00:13:21,540
and it applies basically to every usage

312
00:13:20,190 --> 00:13:23,370
of the other kid's point with the key

313
00:13:21,540 --> 00:13:25,800
larger than rate and there are other

314
00:13:23,370 --> 00:13:27,990
examples like H max a tree of Nitro and

315
00:13:25,800 --> 00:13:32,280
Yasuda and the sandwich sponge sandwich

316
00:13:27,990 --> 00:13:34,230
sponge and that use the result as a use

317
00:13:32,280 --> 00:13:36,270
the result of gauzy at all as a black

318
00:13:34,230 --> 00:13:39,030
box and now they can use the new result

319
00:13:36,270 --> 00:13:40,410
and then the rope protocol framework and

320
00:13:39,030 --> 00:13:42,449
also in light weight permutations if you

321
00:13:40,410 --> 00:13:44,430
use a really small permutation then you

322
00:13:42,450 --> 00:13:46,890
could have good run and the problems or

323
00:13:44,430 --> 00:13:49,109
if the rate is smaller than they and key

324
00:13:46,890 --> 00:13:51,060
but basically what you should do in this

325
00:13:49,110 --> 00:13:52,800
case is just do a full state absorption

326
00:13:51,060 --> 00:13:55,920
in the first run so just initialize the

327
00:13:52,800 --> 00:13:57,449
key the state using the key that

328
00:13:55,920 --> 00:14:05,670
concludes my talk so I'd like to thank

329
00:13:57,450 --> 00:14:10,740
you for your attention one quick

330
00:14:05,670 --> 00:14:13,140
question maybe for bats so among all the

331
00:14:10,740 --> 00:14:15,480
seed mode for sponges which one have

332
00:14:13,140 --> 00:14:18,300
time a tight security analysis now does

333
00:14:15,480 --> 00:14:23,670
it closes the gap for for for some mods

334
00:14:18,300 --> 00:14:24,449
or is there room for improvements yeah

335
00:14:23,670 --> 00:14:26,099
that's a good question

336
00:14:24,450 --> 00:14:28,950
I mean at the part I gave in the slicer

337
00:14:26,100 --> 00:14:31,440
just I'm abstracting away a lot of

338
00:14:28,950 --> 00:14:33,420
things right and but I think the bounty

339
00:14:31,440 --> 00:14:36,900
the last part of Asia group 2015 is

340
00:14:33,420 --> 00:14:39,030
pretty tight and I don't really see an

341
00:14:36,900 --> 00:14:41,610
attack that I mean you always have to

342
00:14:39,030 --> 00:14:44,610
small I mean that's a general analysis

343
00:14:41,610 --> 00:14:46,290
and that covers many variants so if you

344
00:14:44,610 --> 00:14:48,140
look at specific variants sometimes

345
00:14:46,290 --> 00:14:50,339
maybe you can derive a better bound but

346
00:14:48,140 --> 00:14:55,770
that bound I think is pretty tight

347
00:14:50,340 --> 00:14:57,030
general but it's pretty tight ok so if

348
00:14:55,770 --> 00:15:00,140
there is no the cushion let's think

349
00:14:57,030 --> 00:15:00,140
bucket bath again

350
00:15:01,190 --> 00:15:03,250
you

