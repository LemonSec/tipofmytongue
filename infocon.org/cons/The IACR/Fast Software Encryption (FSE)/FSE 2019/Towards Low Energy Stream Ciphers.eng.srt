1
00:00:08,750 --> 00:00:15,839
so now to the last talk of FAC 2019

2
00:00:12,950 --> 00:00:18,660
which is towards low energy stream

3
00:00:15,839 --> 00:00:21,630
cyphers by super D panic Vasiliy

4
00:00:18,660 --> 00:00:24,390
McAuliffe Clara Dominic Takanori sober

5
00:00:21,630 --> 00:00:27,509
Villa Maya and the book turn off UI

6
00:00:24,390 --> 00:00:33,420
button Abba and Francesco again Soni and

7
00:00:27,510 --> 00:00:42,450
Vasily will present so can you hear me

8
00:00:33,420 --> 00:00:45,539
well so I'm going to talk about energy

9
00:00:42,450 --> 00:00:50,850
efficiency in stream ciphers so a short

10
00:00:45,539 --> 00:00:52,800
outline of my work of our work so I will

11
00:00:50,850 --> 00:00:54,420
start with introduction so in principle

12
00:00:52,800 --> 00:00:57,030
I will explain why we are doing this

13
00:00:54,420 --> 00:01:00,539
give some motivation explain the current

14
00:00:57,030 --> 00:01:02,670
state of the art then we will go to the

15
00:01:00,539 --> 00:01:05,540
comparison of their stream ciphers with

16
00:01:02,670 --> 00:01:08,430
block ciphers to figure out in which

17
00:01:05,540 --> 00:01:12,270
scenarios which ones are more efficient

18
00:01:08,430 --> 00:01:14,970
energy voice and then we will discuss

19
00:01:12,270 --> 00:01:17,130
the energy impact of individual

20
00:01:14,970 --> 00:01:18,780
components of stream ciphers and of

21
00:01:17,130 --> 00:01:21,270
different design decisions

22
00:01:18,780 --> 00:01:24,810
so in principle here our goal was to

23
00:01:21,270 --> 00:01:27,360
figure out how do we design the stream

24
00:01:24,810 --> 00:01:30,150
ciphers as energy efficient as possible

25
00:01:27,360 --> 00:01:36,360
and I will come up to the conclusion

26
00:01:30,150 --> 00:01:39,360
them so although these two terms are

27
00:01:36,360 --> 00:01:43,079
really related energy and power they in

28
00:01:39,360 --> 00:01:43,979
fact different so people often confuse

29
00:01:43,079 --> 00:01:46,919
them

30
00:01:43,979 --> 00:01:51,149
in fact energy is the time integral of

31
00:01:46,920 --> 00:01:56,790
power so energy is linked to the total

32
00:01:51,149 --> 00:02:00,810
electrical work done by by the device so

33
00:01:56,790 --> 00:02:05,670
it's I mean we can consider it probably

34
00:02:00,810 --> 00:02:08,789
as the most fair metrics to analyze the

35
00:02:05,670 --> 00:02:13,440
light witness of the of this of that

36
00:02:08,788 --> 00:02:17,429
design so in the applications

37
00:02:13,440 --> 00:02:20,520
where energy is crucial the

38
00:02:17,430 --> 00:02:26,040
battery-operated devices by the

39
00:02:20,520 --> 00:02:28,770
influence in different IOT devices so

40
00:02:26,040 --> 00:02:30,870
when we talk about designing a

41
00:02:28,770 --> 00:02:37,520
cryptographic primitive there is usually

42
00:02:30,870 --> 00:02:40,770
a trade-off between speed costs like

43
00:02:37,520 --> 00:02:43,800
resources amount of resources and the

44
00:02:40,770 --> 00:02:48,090
security so the security is something

45
00:02:43,800 --> 00:02:51,720
what is fixed so we cannot do anything

46
00:02:48,090 --> 00:02:54,690
about it but usually the goals are

47
00:02:51,720 --> 00:02:58,890
either to increase the throughput or to

48
00:02:54,690 --> 00:03:02,160
reduce the resources so if we want just

49
00:02:58,890 --> 00:03:04,230
to increase their speed I mean if you

50
00:03:02,160 --> 00:03:07,410
don't care about anything else and our

51
00:03:04,230 --> 00:03:10,619
ultimate goal is just the throughput I

52
00:03:07,410 --> 00:03:12,060
mean that's fairly easy so we just use

53
00:03:10,620 --> 00:03:16,080
more resources for that

54
00:03:12,060 --> 00:03:18,990
so for example I mean we can parallel

55
00:03:16,080 --> 00:03:21,350
ice everything we can just copy the

56
00:03:18,990 --> 00:03:26,490
primitives and implement them twice

57
00:03:21,350 --> 00:03:29,730
whatever in the case when we our goal is

58
00:03:26,490 --> 00:03:33,240
just to reduce their area and the power

59
00:03:29,730 --> 00:03:36,149
which is closely related to area it's

60
00:03:33,240 --> 00:03:38,870
also quite simple so in principle we do

61
00:03:36,150 --> 00:03:44,430
our design in such a way that we use

62
00:03:38,870 --> 00:03:48,450
minimal logic and minimal area and

63
00:03:44,430 --> 00:03:51,900
whatever but we don't care about the

64
00:03:48,450 --> 00:03:56,579
speed so we do it really many times with

65
00:03:51,900 --> 00:04:00,690
very simple let's say boolean functions

66
00:03:56,580 --> 00:04:06,300
and after enough number of updates our

67
00:04:00,690 --> 00:04:10,320
state is already well confused and all

68
00:04:06,300 --> 00:04:14,760
their initial bits are distributed very

69
00:04:10,320 --> 00:04:17,519
well so this is another way to go but

70
00:04:14,760 --> 00:04:21,930
when we actually want to optimize energy

71
00:04:17,519 --> 00:04:25,289
this is not so simple because here we

72
00:04:21,930 --> 00:04:26,850
have to consider both so we want to

73
00:04:25,289 --> 00:04:31,590
increase the throughput

74
00:04:26,850 --> 00:04:34,110
and or decrease the power consumption so

75
00:04:31,590 --> 00:04:37,979
in principle the main idea

76
00:04:34,110 --> 00:04:40,470
well optimizing the energy would be to

77
00:04:37,980 --> 00:04:44,160
increase the throughput by larger factor

78
00:04:40,470 --> 00:04:46,560
than you increase the power or the other

79
00:04:44,160 --> 00:04:49,470
way around so reduce the power

80
00:04:46,560 --> 00:04:57,230
consumption by larger factor than the

81
00:04:49,470 --> 00:05:01,490
throughput so what do we have so far

82
00:04:57,230 --> 00:05:04,500
this area of lightweight cryptography I

83
00:05:01,490 --> 00:05:08,700
don't know how old it is maybe 15 20

84
00:05:04,500 --> 00:05:12,740
years already but by now or by recently

85
00:05:08,700 --> 00:05:18,510
most of the focus have been put on the

86
00:05:12,740 --> 00:05:21,540
designs for low area and I mean quite

87
00:05:18,510 --> 00:05:24,890
many designs for low-power but there was

88
00:05:21,540 --> 00:05:29,010
not much about low energy consumption

89
00:05:24,890 --> 00:05:35,870
until they work of 2015 of Vanek and the

90
00:05:29,010 --> 00:05:39,240
others were at SAC they carefully

91
00:05:35,870 --> 00:05:41,370
investigated the energy consumption of

92
00:05:39,240 --> 00:05:44,880
block ciphers and following this

93
00:05:41,370 --> 00:05:47,790
research the block cipher midori which

94
00:05:44,880 --> 00:05:51,240
was specifically designed for energy

95
00:05:47,790 --> 00:05:53,280
consumption was developed however the

96
00:05:51,240 --> 00:06:00,650
energy efficiency of stream ciphers was

97
00:05:53,280 --> 00:06:03,299
never investigated in a good manner so

98
00:06:00,650 --> 00:06:04,770
this is actually our goal here to

99
00:06:03,300 --> 00:06:08,970
investigate a different design

100
00:06:04,770 --> 00:06:13,650
components and to see how a whole stream

101
00:06:08,970 --> 00:06:15,840
ciphers perform energy wise so what we

102
00:06:13,650 --> 00:06:18,030
start with is the comparison of stream

103
00:06:15,840 --> 00:06:21,270
ciphers with block ciphers in order to

104
00:06:18,030 --> 00:06:23,700
see if it makes sense at all because I

105
00:06:21,270 --> 00:06:25,409
mean if let's say energy of stream

106
00:06:23,700 --> 00:06:27,599
ciphers is much broader than block

107
00:06:25,410 --> 00:06:30,540
ciphers maybe doesn't it make sense to

108
00:06:27,600 --> 00:06:34,550
consider it and actually there is a

109
00:06:30,540 --> 00:06:37,410
common belief when people think that

110
00:06:34,550 --> 00:06:40,350
because of the long initialization phase

111
00:06:37,410 --> 00:06:40,680
of stream ciphers they only make sense

112
00:06:40,350 --> 00:06:43,440
when

113
00:06:40,680 --> 00:06:46,590
we want to encrypt really huge amounts

114
00:06:43,440 --> 00:06:48,479
of data but for the short amounts of

115
00:06:46,590 --> 00:06:49,710
data which is usually the case of the

116
00:06:48,479 --> 00:06:53,280
lightweight crypto

117
00:06:49,710 --> 00:06:55,500
I mean stream ciphers are much gross as

118
00:06:53,280 --> 00:06:58,789
compared to the block ciphers so we

119
00:06:55,500 --> 00:07:02,340
wanted to figure out if this is true and

120
00:06:58,789 --> 00:07:05,039
I mean in this work we analyzed the

121
00:07:02,340 --> 00:07:10,489
following ciphers so for the stream

122
00:07:05,039 --> 00:07:15,180
ciphers we took the tool estream

123
00:07:10,490 --> 00:07:20,370
finalists grain and tritium so these two

124
00:07:15,180 --> 00:07:23,250
have two different conceptions behind

125
00:07:20,370 --> 00:07:27,840
their design so brain was developed to

126
00:07:23,250 --> 00:07:30,509
have the minimum internal state size so

127
00:07:27,840 --> 00:07:36,090
its internal state size is just twice

128
00:07:30,509 --> 00:07:38,699
the key size which is given by the time

129
00:07:36,090 --> 00:07:42,119
memory data trade-off attack well the

130
00:07:38,699 --> 00:07:44,610
tree room was designed to have a small

131
00:07:42,120 --> 00:07:46,740
update and output functions as possible

132
00:07:44,610 --> 00:07:49,289
so they did not care too much about the

133
00:07:46,740 --> 00:07:52,280
internal state size which is much bigger

134
00:07:49,289 --> 00:07:55,610
than the straight of however they

135
00:07:52,280 --> 00:07:59,219
managed to use a really really simple

136
00:07:55,610 --> 00:08:03,900
functions so we also took a look at

137
00:07:59,220 --> 00:08:09,720
Caribbean which is a tweak of tritium

138
00:08:03,900 --> 00:08:12,780
but for 128 bit security so just some

139
00:08:09,720 --> 00:08:17,340
small changes when clued into it in

140
00:08:12,780 --> 00:08:21,919
order to get rid of the attack of the

141
00:08:17,340 --> 00:08:26,250
normal tritium if 128 bit was used and

142
00:08:21,919 --> 00:08:28,650
we also looked at two recent examples of

143
00:08:26,250 --> 00:08:29,340
stream ciphers there's a planet and

144
00:08:28,650 --> 00:08:32,189
lizard

145
00:08:29,340 --> 00:08:34,228
so some tricks they were used in order

146
00:08:32,190 --> 00:08:37,740
to decrease the internal state size

147
00:08:34,229 --> 00:08:39,719
below this trade-off curve so in

148
00:08:37,740 --> 00:08:42,060
principle they use short internal state

149
00:08:39,719 --> 00:08:48,180
size but they actually have to access

150
00:08:42,059 --> 00:08:51,869
the key more often and regardin block

151
00:08:48,180 --> 00:08:53,199
ciphers we considered present which is a

152
00:08:51,870 --> 00:08:55,450
standard

153
00:08:53,200 --> 00:08:59,139
which was standardized and it was also

154
00:08:55,450 --> 00:09:02,079
shown to be very extremely efficient for

155
00:08:59,139 --> 00:09:03,940
energy consumption and of course the

156
00:09:02,079 --> 00:09:07,630
Midori which was specifically designed

157
00:09:03,940 --> 00:09:09,639
for it so if you take a look at the best

158
00:09:07,630 --> 00:09:12,040
cipher configurations with respect to

159
00:09:09,639 --> 00:09:14,470
the energy consumption I mean I will

160
00:09:12,040 --> 00:09:16,810
later explain what we're safer

161
00:09:14,470 --> 00:09:21,730
configurations are when I will talk

162
00:09:16,810 --> 00:09:27,540
about the design decisions and so on so

163
00:09:21,730 --> 00:09:27,540
we can see that Trivium is actually a

164
00:09:27,690 --> 00:09:34,240
much more energy efficient that the best

165
00:09:31,480 --> 00:09:37,870
Midori implementation but this is when

166
00:09:34,240 --> 00:09:41,170
we actually want to to increase 1,000

167
00:09:37,870 --> 00:09:43,810
blocks and one block is 64 bits so this

168
00:09:41,170 --> 00:09:46,959
is nothing really surprising this is

169
00:09:43,810 --> 00:09:51,459
what we more or less expected but let's

170
00:09:46,959 --> 00:09:54,880
also see what happens when we look at

171
00:09:51,459 --> 00:09:58,420
the small rounds or at this graph you

172
00:09:54,880 --> 00:10:00,820
can see energy consumption for the

173
00:09:58,420 --> 00:10:03,550
different number of blocks to be

174
00:10:00,820 --> 00:10:08,010
encrypted by different ciphers and what

175
00:10:03,550 --> 00:10:11,979
we can actually see here that the Midori

176
00:10:08,010 --> 00:10:13,630
it actually provides the best energy

177
00:10:11,980 --> 00:10:16,060
consumption the lowest energy

178
00:10:13,630 --> 00:10:21,820
consumption when we want to increase

179
00:10:16,060 --> 00:10:25,469
just one block just 64 bits however when

180
00:10:21,820 --> 00:10:29,620
we want to encrypt two blocks of data

181
00:10:25,470 --> 00:10:34,839
Nitori already is worse than for example

182
00:10:29,620 --> 00:10:37,390
grain version one and grain 128 and

183
00:10:34,839 --> 00:10:40,360
after six blocks of data tritium

184
00:10:37,390 --> 00:10:43,329
outperforms all other candidates so we

185
00:10:40,360 --> 00:10:50,230
actually focused our research on these

186
00:10:43,329 --> 00:10:54,130
two ciphers grain in Trivial so

187
00:10:50,230 --> 00:10:59,010
now we were going to discuss I mean the

188
00:10:54,130 --> 00:11:01,899
insights what leads to this behavior and

189
00:10:59,010 --> 00:11:03,490
the best thing for the most efficient

190
00:11:01,899 --> 00:11:06,130
thing what you can do in order to

191
00:11:03,490 --> 00:11:10,360
optimize energy consumption of stream

192
00:11:06,130 --> 00:11:12,820
ciphers is to unroll rounds so in fact

193
00:11:10,360 --> 00:11:16,389
the idea is to increase the throughput

194
00:11:12,820 --> 00:11:20,230
again at the cost of the area but this

195
00:11:16,389 --> 00:11:23,800
is not just to Dublin everything so the

196
00:11:20,230 --> 00:11:26,649
idea is that we only replace the logic

197
00:11:23,800 --> 00:11:29,260
designed for one round by the one which

198
00:11:26,649 --> 00:11:32,410
implements several rounds as you can see

199
00:11:29,260 --> 00:11:34,630
here however we keep the same register

200
00:11:32,410 --> 00:11:38,069
so there was no need to copy the

201
00:11:34,630 --> 00:11:41,139
registers in order to double or triple

202
00:11:38,070 --> 00:11:45,579
the throughput or whatever but just to

203
00:11:41,139 --> 00:11:48,519
copy them in logic and the stream

204
00:11:45,579 --> 00:11:53,069
ciphers were especially designed to

205
00:11:48,519 --> 00:11:55,930
allow this to be easily done so in fact

206
00:11:53,070 --> 00:12:00,040
it most of the stream ciphers used

207
00:11:55,930 --> 00:12:03,760
feedback shift registers and if the last

208
00:12:00,040 --> 00:12:07,319
bits of each of the feedback shift

209
00:12:03,760 --> 00:12:11,230
register is not used neither in the

210
00:12:07,320 --> 00:12:14,820
update no output function we can simply

211
00:12:11,230 --> 00:12:18,370
copy this functions and then instead of

212
00:12:14,820 --> 00:12:20,980
shifting the values in the state by one

213
00:12:18,370 --> 00:12:26,860
position at every clock cycle we can

214
00:12:20,980 --> 00:12:29,010
shift by two this allows us to to double

215
00:12:26,860 --> 00:12:33,029
the throughput by the cost of just

216
00:12:29,010 --> 00:12:36,939
copying the functions so the same

217
00:12:33,029 --> 00:12:39,880
strategy of development was done in

218
00:12:36,940 --> 00:12:41,740
Trivium for example so in fact many

219
00:12:39,880 --> 00:12:46,959
stream ciphers were designed to allow

220
00:12:41,740 --> 00:12:50,410
this easy unrolling so in case of

221
00:12:46,959 --> 00:12:53,560
Trivium 1 the 16 bits are neither used

222
00:12:50,410 --> 00:12:56,829
the 16 last bits are neither you know in

223
00:12:53,560 --> 00:13:01,359
the output no in the feedback functions

224
00:12:56,829 --> 00:13:02,400
so this allows to easily unroll 16

225
00:13:01,360 --> 00:13:05,190
rounds

226
00:13:02,400 --> 00:13:08,370
so this is the 16 bits per clock cycle

227
00:13:05,190 --> 00:13:11,010
version of green version one a very

228
00:13:08,370 --> 00:13:12,660
filled enrolling is also possible but it

229
00:13:11,010 --> 00:13:14,610
requires more complicated of the

230
00:13:12,660 --> 00:13:17,719
algebraic structure of the update

231
00:13:14,610 --> 00:13:20,700
functions because simply adding more

232
00:13:17,720 --> 00:13:23,339
copies of the round functions will no

233
00:13:20,700 --> 00:13:30,750
lead to the correct functionality

234
00:13:23,339 --> 00:13:33,529
anymore so after we start increasing the

235
00:13:30,750 --> 00:13:37,290
throughput by unrolling further rounds

236
00:13:33,529 --> 00:13:39,720
we still get the improvements of the

237
00:13:37,290 --> 00:13:43,020
energy but this happens only until

238
00:13:39,720 --> 00:13:46,320
certain point in time and beyond a set

239
00:13:43,020 --> 00:13:51,029
certain degree of unrolling the increase

240
00:13:46,320 --> 00:13:53,720
in actually results in to increase of

241
00:13:51,029 --> 00:13:57,570
the energy consumption so the resort of

242
00:13:53,720 --> 00:14:00,420
parabolic behavior so if you take a look

243
00:13:57,570 --> 00:14:06,029
on the table for example we can see that

244
00:14:00,420 --> 00:14:08,939
up to 20 rounds the power consumption or

245
00:14:06,029 --> 00:14:12,000
the energy consumption the power the

246
00:14:08,940 --> 00:14:15,209
energy consumption goes down but after

247
00:14:12,000 --> 00:14:19,940
this it goes up again and in case of

248
00:14:15,209 --> 00:14:24,510
Trivium this number of rounds is 160 so

249
00:14:19,940 --> 00:14:27,660
up to 160 rounds of unrolling

250
00:14:24,510 --> 00:14:30,870
we get the decrease in the energy

251
00:14:27,660 --> 00:14:35,040
consumption per block and afterwards is

252
00:14:30,870 --> 00:14:37,910
being increased so in order to figure

253
00:14:35,040 --> 00:14:44,089
out what's actually happening internally

254
00:14:37,910 --> 00:14:46,529
we took a look on the power of shares of

255
00:14:44,089 --> 00:14:50,130
grain in Trivium for different degrees

256
00:14:46,529 --> 00:14:52,080
of unrolling so recall that the update

257
00:14:50,130 --> 00:14:54,150
function of grain is much more

258
00:14:52,080 --> 00:14:58,140
complicated than the update functions of

259
00:14:54,150 --> 00:15:00,839
trivial but it uses less internal size

260
00:14:58,140 --> 00:15:07,589
and actually less number of clock cycles

261
00:15:00,839 --> 00:15:09,779
in the initialization phase so for one

262
00:15:07,589 --> 00:15:11,940
degree of unrolling so the classical

263
00:15:09,779 --> 00:15:16,100
implementation we can see that the logic

264
00:15:11,940 --> 00:15:20,000
of grain takes extremely low part of the

265
00:15:16,100 --> 00:15:23,209
energy but as soon as we start

266
00:15:20,000 --> 00:15:27,110
increasing it's actually taking most of

267
00:15:23,209 --> 00:15:30,229
the energy already after 32 degrees of

268
00:15:27,110 --> 00:15:38,209
unrolling we have around 64 percent of

269
00:15:30,230 --> 00:15:40,339
energy taken by the logic and for 64 I

270
00:15:38,209 --> 00:15:44,180
mean it's almost everything which is

271
00:15:40,339 --> 00:15:48,910
taken by logic so if you can see for

272
00:15:44,180 --> 00:15:55,670
example here we increase the throughput

273
00:15:48,910 --> 00:15:58,310
twice so 32 versus 64 but the power

274
00:15:55,670 --> 00:16:02,779
consumption taken by logic increases

275
00:15:58,310 --> 00:16:06,380
more than four times with in case of

276
00:16:02,779 --> 00:16:12,470
trivial this does not happen so fast so

277
00:16:06,380 --> 00:16:14,420
in the beginning again the logic takes

278
00:16:12,470 --> 00:16:18,410
just a small portion of the entire

279
00:16:14,420 --> 00:16:23,469
energy but even in the case of the three

280
00:16:18,410 --> 00:16:27,709
beyond 160 so when we unroll 160 rounds

281
00:16:23,470 --> 00:16:29,750
we only take around one half of the

282
00:16:27,709 --> 00:16:33,768
entire energy and the other half is

283
00:16:29,750 --> 00:16:35,870
taken by their register so the lesson

284
00:16:33,769 --> 00:16:39,199
that we can learn from here is that in

285
00:16:35,870 --> 00:16:42,189
order to really optimize the energy just

286
00:16:39,199 --> 00:16:45,079
design a cipher which has very small

287
00:16:42,189 --> 00:16:51,230
functions and don't care too much about

288
00:16:45,079 --> 00:16:54,729
the state so this is the major thing

289
00:16:51,230 --> 00:16:59,480
that you can do but we also decided to

290
00:16:54,730 --> 00:17:01,459
look at the more small design decisions

291
00:16:59,480 --> 00:17:04,549
which could also help us to improve the

292
00:17:01,459 --> 00:17:06,408
power consumption so the first one was

293
00:17:04,549 --> 00:17:08,900
to consider different types of

294
00:17:06,409 --> 00:17:12,380
flip-flops so in fact there stream

295
00:17:08,900 --> 00:17:14,480
cyphers registers normally have 2 inputs

296
00:17:12,380 --> 00:17:18,709
so in the beginning they have to be

297
00:17:14,480 --> 00:17:23,799
initialized the key on the IV and during

298
00:17:18,709 --> 00:17:27,079
the I mean clocking process or the

299
00:17:23,799 --> 00:17:29,960
initialization phase or the keystream

300
00:17:27,079 --> 00:17:33,020
generation phase the registers have been

301
00:17:29,960 --> 00:17:35,419
updated so by some functions therefore

302
00:17:33,020 --> 00:17:38,210
we have to have two inputs and therefore

303
00:17:35,419 --> 00:17:41,630
we need a multiplexer to figure out

304
00:17:38,210 --> 00:17:45,590
which input goes into into the register

305
00:17:41,630 --> 00:17:49,210
so there are two ways of realizing it

306
00:17:45,590 --> 00:17:53,809
either taken a simple flip-flop with the

307
00:17:49,210 --> 00:17:55,940
multiplexer before or we can have a scan

308
00:17:53,809 --> 00:18:03,799
flip-flop which already provides this

309
00:17:55,940 --> 00:18:07,070
functionality so this is the the result

310
00:18:03,799 --> 00:18:09,559
and we can see that for all cases the

311
00:18:07,070 --> 00:18:12,110
scan flip-flops outperform the regular

312
00:18:09,559 --> 00:18:17,408
ones so when you're interested in the

313
00:18:12,110 --> 00:18:17,408
energy consumption use scan flip-flops

314
00:18:17,500 --> 00:18:23,270
another thing is the architecture so the

315
00:18:20,899 --> 00:18:26,949
feedback shift registers can be realized

316
00:18:23,270 --> 00:18:32,029
in Gulu are in fibonacci configuration

317
00:18:26,950 --> 00:18:34,970
so in fact this is based on either we

318
00:18:32,029 --> 00:18:38,179
have just one update function in one

319
00:18:34,970 --> 00:18:41,600
register or we just split the update

320
00:18:38,179 --> 00:18:45,140
function into smaller ones and to feed

321
00:18:41,600 --> 00:18:47,059
them into different registers so in fact

322
00:18:45,140 --> 00:18:50,419
there is no big difference but the

323
00:18:47,059 --> 00:18:53,389
fibonacci ones were a bit better and

324
00:18:50,419 --> 00:18:56,090
they actually also allow us to easier

325
00:18:53,390 --> 00:19:01,640
unroll so it's better to use fibonacci

326
00:18:56,090 --> 00:19:04,039
ones and another parameter that we

327
00:19:01,640 --> 00:19:07,070
looked at is how do we actually

328
00:19:04,039 --> 00:19:09,559
implement the round function so there

329
00:19:07,070 --> 00:19:11,720
are different ways the lookup table we

330
00:19:09,559 --> 00:19:15,279
can just give their functionality to the

331
00:19:11,720 --> 00:19:17,990
synthesizer and ask it to optimize and

332
00:19:15,279 --> 00:19:20,690
using the decoders which encode the

333
00:19:17,990 --> 00:19:22,990
configuration which in principle was

334
00:19:20,690 --> 00:19:27,440
shown to be optimal for example for

335
00:19:22,990 --> 00:19:30,470
implementation of the RSS boxes so in

336
00:19:27,440 --> 00:19:35,110
case of the stream cyphers the most

337
00:19:30,470 --> 00:19:39,620
efficient was always to give it to the

338
00:19:35,110 --> 00:19:42,860
synthesizer to optimize it

339
00:19:39,620 --> 00:19:45,049
so just to summarize the lessons that

340
00:19:42,860 --> 00:19:47,539
we've learned so it's better to use skin

341
00:19:45,049 --> 00:19:50,240
flip-flops in the fibonacci

342
00:19:47,539 --> 00:19:54,020
configuration let the synthesizer to

343
00:19:50,240 --> 00:19:57,770
optimize everything and I mean the

344
00:19:54,020 --> 00:20:00,620
really key way to optimize energy

345
00:19:57,770 --> 00:20:04,158
consumption is to use simple update

346
00:20:00,620 --> 00:20:06,949
functions so the state size is less

347
00:20:04,159 --> 00:20:09,260
important and in principle the

348
00:20:06,950 --> 00:20:13,220
initialization time can also be large

349
00:20:09,260 --> 00:20:15,649
but after certain time or after the

350
00:20:13,220 --> 00:20:19,429
certain degree of unrolling it becomes

351
00:20:15,649 --> 00:20:26,620
less important so we looked at different

352
00:20:19,429 --> 00:20:29,360
parameters and we can summarize that for

353
00:20:26,620 --> 00:20:31,309
longer datastream multiple rounds and

354
00:20:29,360 --> 00:20:34,279
roll stream surface before better than

355
00:20:31,309 --> 00:20:37,908
the block ciphers so even for two blocks

356
00:20:34,279 --> 00:20:41,480
of if you want to encrypt as much as

357
00:20:37,909 --> 00:20:44,179
let's say 128 bits the energy

358
00:20:41,480 --> 00:20:46,640
consumption will be less if we use

359
00:20:44,179 --> 00:20:50,779
certain stream ciphers rather than the

360
00:20:46,640 --> 00:20:55,460
best block ciphers and the key to read

361
00:20:50,779 --> 00:20:58,700
is the simple functions so the further

362
00:20:55,460 --> 00:21:02,330
steps would be to come up with even more

363
00:20:58,700 --> 00:21:05,690
energy efficient designs so we tried to

364
00:21:02,330 --> 00:21:08,120
beat trivial and it appeared to be not

365
00:21:05,690 --> 00:21:11,029
so far so it seems that the design was

366
00:21:08,120 --> 00:21:14,860
really good in terms of the energy

367
00:21:11,029 --> 00:21:18,620
consumption but for examples the designs

368
00:21:14,860 --> 00:21:22,010
Trivium allows only for 128 bits

369
00:21:18,620 --> 00:21:25,879
security or for 8-bit security but if we

370
00:21:22,010 --> 00:21:28,279
want to go for 128 bits security it

371
00:21:25,880 --> 00:21:37,510
seems that we can be it's trivial at

372
00:21:28,279 --> 00:21:41,380
least slightly and so in principle

373
00:21:37,510 --> 00:21:44,990
another possible further step could be

374
00:21:41,380 --> 00:21:48,309
just to fix some parameter and try to

375
00:21:44,990 --> 00:21:52,190
optimize energy under these restrictions

376
00:21:48,309 --> 00:21:52,999
so for example if we limit the area size

377
00:21:52,190 --> 00:21:55,699
I don't know

378
00:21:52,999 --> 00:21:58,369
- mm gate equivalence that's a which is

379
00:21:55,699 --> 00:22:01,609
a common threshold for lightweight

380
00:21:58,369 --> 00:22:04,428
devices we can optimize the energy

381
00:22:01,609 --> 00:22:06,168
consumption there or we say that they we

382
00:22:04,429 --> 00:22:08,809
have limited power consumption just

383
00:22:06,169 --> 00:22:10,939
supported by the device what will happen

384
00:22:08,809 --> 00:22:14,449
then or if we need to have some fixed

385
00:22:10,939 --> 00:22:17,419
throughput we can also take a look what

386
00:22:14,449 --> 00:22:28,099
would be then the best way to optimize

387
00:22:17,419 --> 00:22:36,829
the energy so thank you very much any

388
00:22:28,099 --> 00:22:39,049
questions and I have a question actually

389
00:22:36,829 --> 00:22:41,688
so could you maybe give some insight how

390
00:22:39,049 --> 00:22:45,789
you arrived at this energy numbers like

391
00:22:41,689 --> 00:22:48,429
what is the target platform architecture

392
00:22:45,789 --> 00:22:51,199
or is there difference between what

393
00:22:48,429 --> 00:22:59,629
architecture you aim for regarding the

394
00:22:51,199 --> 00:23:02,989
energy consumption nano meters logical

395
00:22:59,629 --> 00:23:06,738
process and I think the frequency was

396
00:23:02,989 --> 00:23:10,279
set to 10 megahertz just because when we

397
00:23:06,739 --> 00:23:13,489
go for the low frequency the role of the

398
00:23:10,279 --> 00:23:17,659
static power becomes quite high so we

399
00:23:13,489 --> 00:23:20,289
actually wanted to see how it deals with

400
00:23:17,659 --> 00:23:25,389
the dynamic power and when we talk about

401
00:23:20,289 --> 00:23:25,389
100 megahertz or high frequencies there

402
00:23:25,479 --> 00:23:31,399
the static power almost doesn't play in

403
00:23:29,089 --> 00:23:37,729
your role so does it answer your

404
00:23:31,399 --> 00:23:40,268
question so it's a 690 learning me any

405
00:23:37,729 --> 00:23:40,269
other questions

406
00:23:42,330 --> 00:23:48,080
you have not then we can close the

407
00:23:44,590 --> 00:23:54,169
session and thanks to Vasily again

408
00:23:48,080 --> 00:23:54,169
[Applause]

