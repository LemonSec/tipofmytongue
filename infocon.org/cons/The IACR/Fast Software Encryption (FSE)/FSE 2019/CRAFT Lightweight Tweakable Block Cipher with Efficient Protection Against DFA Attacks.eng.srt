1
00:00:05,930 --> 00:00:11,370
so when the next talk is it's called

2
00:00:09,000 --> 00:00:13,379
Croft lightweight 300 block cipher with

3
00:00:11,370 --> 00:00:15,989
efficient protection against folder text

4
00:00:13,380 --> 00:00:19,400
is a paper by Crystal by Alec regularly

5
00:00:15,990 --> 00:00:24,869
under emile mahadji and Siham rezo's Adi

6
00:00:19,400 --> 00:00:26,990
and Shambo gives the talk thank you in

7
00:00:24,869 --> 00:00:30,240
this talk I'm going to present craft

8
00:00:26,990 --> 00:00:32,399
which is a new block to equal block

9
00:00:30,240 --> 00:00:34,800
cipher and it is designed to be

10
00:00:32,399 --> 00:00:38,910
efficient in protection against

11
00:00:34,800 --> 00:00:41,280
differential fault analysis attacks in

12
00:00:38,910 --> 00:00:44,000
last two decades it is known that

13
00:00:41,280 --> 00:00:46,489
secrets is stored or processed by

14
00:00:44,000 --> 00:00:52,050
implementation of an algorithm can be

15
00:00:46,489 --> 00:00:57,000
recovered using physical attacks one of

16
00:00:52,050 --> 00:00:59,250
the important and most known such

17
00:00:57,000 --> 00:01:04,589
attacks is differential fault analysis

18
00:00:59,250 --> 00:01:10,320
or refreezing DFA attacks that attacker

19
00:01:04,589 --> 00:01:16,770
tries to tries to disturb the device

20
00:01:10,320 --> 00:01:19,798
during its operation he compute output

21
00:01:16,770 --> 00:01:21,658
for the same input twice one with and

22
00:01:19,799 --> 00:01:24,830
one without fault injection and by

23
00:01:21,659 --> 00:01:29,130
comparing the output he finds some

24
00:01:24,830 --> 00:01:32,270
information about the sacred value the

25
00:01:29,130 --> 00:01:35,310
most simplest countermeasure to protect

26
00:01:32,270 --> 00:01:40,140
implementation is the application where

27
00:01:35,310 --> 00:01:45,119
in the implementation there is the

28
00:01:40,140 --> 00:01:51,509
function is implemented to us and by

29
00:01:45,119 --> 00:01:54,270
comparing the the output if they are

30
00:01:51,509 --> 00:01:58,200
equal implementation gives the output

31
00:01:54,270 --> 00:02:02,009
otherwise it gives some random or null

32
00:01:58,200 --> 00:02:04,979
value more complicated country measures

33
00:02:02,009 --> 00:02:08,310
are concurrent error detection which by

34
00:02:04,979 --> 00:02:11,370
adding some redundancy to the original

35
00:02:08,310 --> 00:02:15,390
implementation it checks if the fault is

36
00:02:11,370 --> 00:02:20,610
injected or not in a recent paper named

37
00:02:15,390 --> 00:02:22,619
impeccable circuit we introduced a

38
00:02:20,610 --> 00:02:25,850
technique that grantees detection of

39
00:02:22,620 --> 00:02:29,540
fault injections up to a certain number

40
00:02:25,850 --> 00:02:32,930
in any place of the implementation and

41
00:02:29,540 --> 00:02:37,890
there we considered to adversely model

42
00:02:32,930 --> 00:02:42,360
that the attacker is able to make at

43
00:02:37,890 --> 00:02:45,540
most some number of injections in any

44
00:02:42,360 --> 00:02:49,380
place after implementation either in one

45
00:02:45,540 --> 00:02:53,060
clock cycle or every clock cycle clock

46
00:02:49,380 --> 00:03:01,200
cycle depending on the adverse remodel

47
00:02:53,060 --> 00:03:04,980
to make it clear in this models SFA safe

48
00:03:01,200 --> 00:03:08,160
error or circuit models are not covered

49
00:03:04,980 --> 00:03:12,380
so SFA kind of attacks or safar kind of

50
00:03:08,160 --> 00:03:14,880
attacks are not covered by this

51
00:03:12,380 --> 00:03:20,130
countermeasure and they need some extra

52
00:03:14,880 --> 00:03:24,140
countermeasure to be protected one

53
00:03:20,130 --> 00:03:27,390
important result from that paper was

54
00:03:24,140 --> 00:03:31,290
independence property that says to

55
00:03:27,390 --> 00:03:33,839
prevent implementation to prevent fault

56
00:03:31,290 --> 00:03:35,940
propagation the coordinate function of

57
00:03:33,840 --> 00:03:42,030
each point each operation has to be

58
00:03:35,940 --> 00:03:46,140
implemented independently for example

59
00:03:42,030 --> 00:03:48,870
considering skinny's mix column the

60
00:03:46,140 --> 00:03:53,670
implementation is shown in this picture

61
00:03:48,870 --> 00:03:57,000
that it needs 3 XOR gates but if

62
00:03:53,670 --> 00:04:02,339
attacker injects false fault

63
00:03:57,000 --> 00:04:06,840
in the second second xor gate that is

64
00:04:02,340 --> 00:04:09,540
shown by red it will propagate it will

65
00:04:06,840 --> 00:04:13,100
affect two output bits in other meaning

66
00:04:09,540 --> 00:04:17,019
by injecting one fault one bit fault

67
00:04:13,100 --> 00:04:20,319
attacker gains two gains one more bit

68
00:04:17,019 --> 00:04:28,360
in the output using independence

69
00:04:20,319 --> 00:04:33,310
property to prevent fault propagation we

70
00:04:28,360 --> 00:04:36,400
should implement in implementation in

71
00:04:33,310 --> 00:04:44,259
the patent picture that it will need for

72
00:04:36,400 --> 00:04:48,099
exact aids in a set of three and that

73
00:04:44,259 --> 00:04:53,580
paper will considering different size

74
00:04:48,099 --> 00:04:58,889
for redundancy we examined our

75
00:04:53,580 --> 00:05:01,539
constructions 46 known well-known

76
00:04:58,889 --> 00:05:04,210
lightweight block ciphers and find out

77
00:05:01,539 --> 00:05:07,990
that they are not efficiently designed

78
00:05:04,210 --> 00:05:09,370
for protection against differential

79
00:05:07,990 --> 00:05:12,340
fault analysis attacks

80
00:05:09,370 --> 00:05:16,860
this was our motivation for designing

81
00:05:12,340 --> 00:05:21,000
craft that in that our first goal was to

82
00:05:16,860 --> 00:05:25,210
design in tweakable block block cipher

83
00:05:21,000 --> 00:05:29,020
that in algorithmic level it is

84
00:05:25,210 --> 00:05:32,620
efficient efficient in protection

85
00:05:29,020 --> 00:05:37,440
against the FA attacks and we also

86
00:05:32,620 --> 00:05:40,650
wanted craft to be tweakable and also

87
00:05:37,440 --> 00:05:44,860
provides the decryption in the same

88
00:05:40,650 --> 00:05:51,448
structure for encryption with small area

89
00:05:44,860 --> 00:05:55,599
overhead and also to have an easy

90
00:05:51,449 --> 00:05:59,319
security analysis we we decided to use

91
00:05:55,599 --> 00:06:03,430
already known design methods to this

92
00:05:59,319 --> 00:06:09,940
reason we chose a skinny like structure

93
00:06:03,430 --> 00:06:15,479
it one 128-bit key and 64-bit block and

94
00:06:09,940 --> 00:06:20,469
twig size what we designed this

95
00:06:15,479 --> 00:06:26,550
iteration of 31 rounds and it appends

96
00:06:20,469 --> 00:06:26,550
one linear linear run to the end

97
00:06:27,460 --> 00:06:36,609
and there the run function can can be

98
00:06:33,220 --> 00:06:41,040
shown as the picture in the bottom that

99
00:06:36,610 --> 00:06:46,090
it starts with linear operations and

100
00:06:41,040 --> 00:06:48,250
ends with Lani nonlinear one also the

101
00:06:46,090 --> 00:06:54,580
last round which is linear one doesn't

102
00:06:48,250 --> 00:06:59,860
add any security to the design but as

103
00:06:54,580 --> 00:07:03,000
you'll see it will help us in the in the

104
00:06:59,860 --> 00:07:08,130
decryption structure in more detail

105
00:07:03,000 --> 00:07:11,920
there are five operation in each run

106
00:07:08,130 --> 00:07:16,450
that all of them are involutions it

107
00:07:11,920 --> 00:07:18,910
starts with mix column that an a binary

108
00:07:16,450 --> 00:07:23,500
matrix M is multiplied to each column

109
00:07:18,910 --> 00:07:27,280
and then R and can't run constants are

110
00:07:23,500 --> 00:07:31,270
bit slower to only fish and force a

111
00:07:27,280 --> 00:07:34,239
nibble of the estate then runt wiki is

112
00:07:31,270 --> 00:07:38,080
exerted to all of the estate and the

113
00:07:34,240 --> 00:07:41,290
last linear operation is nibble

114
00:07:38,080 --> 00:07:43,630
fermentation that permutation P changes

115
00:07:41,290 --> 00:07:49,600
the position of nibble in the state and

116
00:07:43,630 --> 00:07:54,790
ends with nonlinear operation which is

117
00:07:49,600 --> 00:08:03,370
an sbox layer that that's applied to

118
00:07:54,790 --> 00:08:08,040
each nibble and the difference of last

119
00:08:03,370 --> 00:08:12,010
round is that it doesn't involve include

120
00:08:08,040 --> 00:08:16,090
operation so it reads the round function

121
00:08:12,010 --> 00:08:18,010
32 times but in the last round it gives

122
00:08:16,090 --> 00:08:23,349
the output before fermentation of

123
00:08:18,010 --> 00:08:26,409
nibbles and about wiki schedule we

124
00:08:23,350 --> 00:08:30,160
separate the key to its two halves and

125
00:08:26,410 --> 00:08:37,320
simply ignore it with TWiki and this

126
00:08:30,160 --> 00:08:40,070
will give us the first two twitches but

127
00:08:37,320 --> 00:08:44,750
for security reasons

128
00:08:40,070 --> 00:08:50,810
to use tweak in another very XOR it with

129
00:08:44,750 --> 00:08:55,100
another way to kiss and to provide other

130
00:08:50,810 --> 00:08:58,459
other tooth which is we used cube

131
00:08:55,100 --> 00:09:02,810
permutation to change nibbles of tweak

132
00:08:58,459 --> 00:09:06,219
and again XOR it with round keys and we

133
00:09:02,810 --> 00:09:09,920
will have this for Twinkies and then

134
00:09:06,220 --> 00:09:12,800
depending on the reminder of round index

135
00:09:09,920 --> 00:09:21,370
to therefore one of these treaties are

136
00:09:12,800 --> 00:09:21,370
exhorted a state about design rationale

137
00:09:22,130 --> 00:09:25,539
[Music]

138
00:09:28,970 --> 00:09:36,520
yeah briefly saying from all the options

139
00:09:32,540 --> 00:09:40,420
that we had we chose the ones that are

140
00:09:36,520 --> 00:09:42,560
efficient in concurrent in the

141
00:09:40,420 --> 00:09:46,550
construction for concurrent error

142
00:09:42,560 --> 00:09:49,790
detection also we wanted them to be

143
00:09:46,550 --> 00:09:51,859
involutions to provide decryption

144
00:09:49,790 --> 00:09:55,760
structure in the same structure for

145
00:09:51,860 --> 00:10:00,320
encryption with small modifications so

146
00:09:55,760 --> 00:10:02,330
far decryption in the bit modifying

147
00:10:00,320 --> 00:10:07,010
TWiki and reversing order of run

148
00:10:02,330 --> 00:10:10,700
constants decryption of craft is it's is

149
00:10:07,010 --> 00:10:13,310
the same as its encryption and that is

150
00:10:10,700 --> 00:10:15,850
because of these two equations that the

151
00:10:13,310 --> 00:10:18,760
first one says changing place of s box

152
00:10:15,850 --> 00:10:22,010
operation and permutation of nibbles

153
00:10:18,760 --> 00:10:25,430
doesn't change structure and also we can

154
00:10:22,010 --> 00:10:28,670
change the order of mix column a trans

155
00:10:25,430 --> 00:10:33,349
constant and at TWiki with only

156
00:10:28,670 --> 00:10:38,060
modifying the tweak value then

157
00:10:33,350 --> 00:10:44,840
decryption equation can can be which is

158
00:10:38,060 --> 00:10:46,670
the reverse of encryption and as all the

159
00:10:44,840 --> 00:10:50,360
operations are involutions

160
00:10:46,670 --> 00:10:54,680
we can just reverse the to inverse the

161
00:10:50,360 --> 00:10:57,140
encryption equation we need to reverse

162
00:10:54,680 --> 00:11:00,709
the order of operations which is shown

163
00:10:57,140 --> 00:11:03,590
in the second equation and using two

164
00:11:00,710 --> 00:11:07,550
previously shown equations we can change

165
00:11:03,590 --> 00:11:10,010
the position of s box with permutation

166
00:11:07,550 --> 00:11:13,520
of nibbles which is shown in red color

167
00:11:10,010 --> 00:11:18,319
and also change the position of at twiki

168
00:11:13,520 --> 00:11:22,430
with mix column by modifying the tweak

169
00:11:18,320 --> 00:11:27,670
value twiki value then we will reach to

170
00:11:22,430 --> 00:11:27,670
the third equation and considering with

171
00:11:28,060 --> 00:11:36,189
equation for encryption it is same up to

172
00:11:32,290 --> 00:11:40,270
reversing order of run constants and

173
00:11:36,190 --> 00:11:40,270
multiplying three key value

174
00:11:40,960 --> 00:11:50,920
for the other round of round functions

175
00:11:45,300 --> 00:11:53,890
research exhaustively through through

176
00:11:50,920 --> 00:11:57,130
all options that we had and we chose the

177
00:11:53,890 --> 00:12:00,730
ones that provides us the most security

178
00:11:57,130 --> 00:12:06,520
here I only talked about the way that we

179
00:12:00,730 --> 00:12:12,730
chose s box and for the rest you can see

180
00:12:06,520 --> 00:12:14,980
the paper yeah each s faxing in C

181
00:12:12,730 --> 00:12:17,940
deconstruction need to be implemented

182
00:12:14,980 --> 00:12:22,540
with the redundant aspects for example

183
00:12:17,940 --> 00:12:26,200
in case of 4-bit redundancy as S box s

184
00:12:22,540 --> 00:12:30,400
need to be implemented together with as

185
00:12:26,200 --> 00:12:32,950
far which is defined a question and a

186
00:12:30,400 --> 00:12:37,079
for is multiplication with the shown

187
00:12:32,950 --> 00:12:41,860
matrix and this matrix is part of

188
00:12:37,080 --> 00:12:47,490
generator matrix for extended Hamming

189
00:12:41,860 --> 00:12:51,790
code which is able to detect up to three

190
00:12:47,490 --> 00:12:55,000
file three bit fault injections but

191
00:12:51,790 --> 00:12:59,140
there is a problem if we search through

192
00:12:55,000 --> 00:13:02,830
all s boxes that is there are about four

193
00:12:59,140 --> 00:13:05,710
four to six million millions in blue

194
00:13:02,830 --> 00:13:09,550
tree s boxes implementing and

195
00:13:05,710 --> 00:13:14,260
synthesizing them are not possible what

196
00:13:09,550 --> 00:13:17,290
we did is taking benefit of Independence

197
00:13:14,260 --> 00:13:20,230
property which says each coordinate

198
00:13:17,290 --> 00:13:25,319
function of S box has to be must be

199
00:13:20,230 --> 00:13:27,990
implemented in separately that means

200
00:13:25,320 --> 00:13:32,980
implementation cost for S box and

201
00:13:27,990 --> 00:13:40,680
redundant s box is sum of area size for

202
00:13:32,980 --> 00:13:40,680
each coordinate function and in all of

203
00:13:41,490 --> 00:13:48,160
all of the cases that we considered for

204
00:13:44,310 --> 00:13:51,890
redundancy size only certain boolean

205
00:13:48,160 --> 00:13:54,800
functions were important for each S box

206
00:13:51,890 --> 00:13:56,630
so if we have implementation for all of

207
00:13:54,800 --> 00:14:01,640
the balanced boolean functions we can

208
00:13:56,630 --> 00:14:05,300
say evaluate the cost for implementation

209
00:14:01,640 --> 00:14:09,649
of s box in our constructions and there

210
00:14:05,300 --> 00:14:11,810
are around 13,000 4-bit balanced boolean

211
00:14:09,649 --> 00:14:14,890
functions and this number up to bit

212
00:14:11,810 --> 00:14:18,079
fermentation equivalence is only 730

213
00:14:14,890 --> 00:14:20,529
balanced boolean functions and what we

214
00:14:18,079 --> 00:14:23,660
did is to implement and synthesize this

215
00:14:20,529 --> 00:14:27,380
730 balanced boolean functions which

216
00:14:23,660 --> 00:14:30,740
took around half a day and extended to

217
00:14:27,380 --> 00:14:34,130
all of the 13,000 balanced balanced

218
00:14:30,740 --> 00:14:37,279
boolean functions then for each s box we

219
00:14:34,130 --> 00:14:41,000
just need to do certain look-up tables

220
00:14:37,279 --> 00:14:45,140
and say what is the cost implementation

221
00:14:41,000 --> 00:14:48,410
for this S box searching for all of the

222
00:14:45,140 --> 00:14:51,529
searching through all of the S boxes we

223
00:14:48,410 --> 00:14:54,019
decided to use the chosen one which is

224
00:14:51,529 --> 00:14:59,630
also the S box for midori

225
00:14:54,019 --> 00:15:04,750
and it is not not only the smallest one

226
00:14:59,630 --> 00:15:04,750
also it provides the minimum possible

227
00:15:05,170 --> 00:15:14,269
uniformity and linearity about twiki

228
00:15:10,670 --> 00:15:17,120
schedule and for key schedule there were

229
00:15:14,269 --> 00:15:20,779
two options for us the first one was a

230
00:15:17,120 --> 00:15:24,410
key run key updating and the next was

231
00:15:20,779 --> 00:15:29,810
key run key alternating that the first

232
00:15:24,410 --> 00:15:33,019
one needs at least 128 registers in run

233
00:15:29,810 --> 00:15:36,469
based implementation but the other one

234
00:15:33,019 --> 00:15:39,980
needs only 64 multiplexers to be a

235
00:15:36,470 --> 00:15:43,310
lightweight in implementation we decided

236
00:15:39,980 --> 00:15:47,839
to use the second one and about the

237
00:15:43,310 --> 00:15:54,079
Twizy schedule we decided to simply

238
00:15:47,839 --> 00:15:58,070
ignore it with the key but if we use

239
00:15:54,079 --> 00:16:01,130
only truth to first week is that would

240
00:15:58,070 --> 00:16:03,360
cause time data memory relative attacks

241
00:16:01,130 --> 00:16:10,649
in the related key model

242
00:16:03,360 --> 00:16:14,009
and to prevent it we need to use QQ

243
00:16:10,649 --> 00:16:18,119
parent ation to change the tweak in in

244
00:16:14,009 --> 00:16:23,610
the runs that has same the same round

245
00:16:18,119 --> 00:16:25,709
keys to to provide maximum possible

246
00:16:23,610 --> 00:16:30,600
security against time data memory trade

247
00:16:25,709 --> 00:16:32,939
of attacks this Q must be a circular one

248
00:16:30,600 --> 00:16:38,369
and there are around two to the forty

249
00:16:32,939 --> 00:16:41,099
such operations but checking for all of

250
00:16:38,369 --> 00:16:44,540
these two to the forty the security

251
00:16:41,100 --> 00:16:47,639
provided by these two to the forty

252
00:16:44,540 --> 00:16:52,709
plantations are not possible and what we

253
00:16:47,639 --> 00:16:56,369
did is to choose around one thousand

254
00:16:52,709 --> 00:16:58,709
thousands of them and evaluate the

255
00:16:56,369 --> 00:17:01,189
security provided by them and the

256
00:16:58,709 --> 00:17:05,309
current one that we already chose is

257
00:17:01,189 --> 00:17:08,760
Devon has most activists boxes in

258
00:17:05,309 --> 00:17:12,109
related to each model related to each

259
00:17:08,760 --> 00:17:12,109
differential attack

260
00:17:21,890 --> 00:17:30,700
when designing finished we checked the

261
00:17:25,400 --> 00:17:35,570
security provided by our design we

262
00:17:30,700 --> 00:17:38,390
evaluate security of craft against the

263
00:17:35,570 --> 00:17:41,720
attacks that was the most vulnerable

264
00:17:38,390 --> 00:17:45,860
ones to to the similar design block

265
00:17:41,720 --> 00:17:50,710
cyphers we listed attacks that we

266
00:17:45,860 --> 00:17:55,219
already analyzed them analyzed against

267
00:17:50,710 --> 00:17:59,030
craft and I asked you to see the paper

268
00:17:55,220 --> 00:18:02,240
if you are interested and the security

269
00:17:59,030 --> 00:18:15,918
that we are claiming is that craft

270
00:18:02,240 --> 00:18:18,980
provides 124 bit security and the most

271
00:18:15,919 --> 00:18:22,160
promising attack is an accelerated

272
00:18:18,980 --> 00:18:25,580
exhaustive search that that is because

273
00:18:22,160 --> 00:18:31,190
of related key property of twiki

274
00:18:25,580 --> 00:18:35,120
schedule and it says that if difference

275
00:18:31,190 --> 00:18:38,990
delta is such that all the values and

276
00:18:35,120 --> 00:18:42,830
nibbles are the same then q permutation

277
00:18:38,990 --> 00:18:49,790
of delta will not change its value then

278
00:18:42,830 --> 00:18:54,139
using either k0 k1 tweak or k 0 plus

279
00:18:49,790 --> 00:18:57,850
delta k 1 plus 2 plus delta

280
00:18:54,140 --> 00:19:03,740
both will give same Twinkies and

281
00:18:57,850 --> 00:19:09,080
attacker using this property by asking

282
00:19:03,740 --> 00:19:13,730
to to encryption of the same plain text

283
00:19:09,080 --> 00:19:19,570
under 16 different tweak to tweaks he

284
00:19:13,730 --> 00:19:27,309
can find the master key with two to the

285
00:19:19,570 --> 00:19:32,870
124 computations after analyzing it we

286
00:19:27,309 --> 00:19:34,279
compared our design with six block

287
00:19:32,870 --> 00:19:37,549
ciphers that already

288
00:19:34,279 --> 00:19:41,509
the examined an impact with circles

289
00:19:37,549 --> 00:19:44,359
paper and also we had some extra block

290
00:19:41,509 --> 00:19:49,190
ciphers that reviewers ask again

291
00:19:44,359 --> 00:19:53,418
implemented and I didn't bring them all

292
00:19:49,190 --> 00:19:57,229
here I just bring skinny which we found

293
00:19:53,419 --> 00:20:04,820
it more reasonable and by skinny

294
00:19:57,229 --> 00:20:12,799
I mean skinny with 64 black size but 128

295
00:20:04,820 --> 00:20:17,960
key and also 122 which supports tweak in

296
00:20:12,799 --> 00:20:23,960
all case for each half for each set of

297
00:20:17,960 --> 00:20:26,690
five five bars the smallest one is the

298
00:20:23,960 --> 00:20:31,039
unprotected version and then the right

299
00:20:26,690 --> 00:20:36,339
one is bit 1 bit and increasingly up to

300
00:20:31,039 --> 00:20:41,658
4 bit redundancy as you see in all cases

301
00:20:36,339 --> 00:20:46,190
craft is smaller than skinny and also

302
00:20:41,659 --> 00:20:55,190
when supports to eat it is again smaller

303
00:20:46,190 --> 00:20:58,909
than skinny 120 192 to conclude this

304
00:20:55,190 --> 00:21:00,979
part we designed the design craft which

305
00:20:58,909 --> 00:21:02,779
is a lightweight which will block cipher

306
00:21:00,979 --> 00:21:06,589
that is efficient we designed for

307
00:21:02,779 --> 00:21:10,580
protection against differential fault

308
00:21:06,589 --> 00:21:15,309
analysis attacks and as far as we know

309
00:21:10,580 --> 00:21:18,289
it is the smallest block cipher with 120

310
00:21:15,309 --> 00:21:22,399
28 bit key in the round based

311
00:21:18,289 --> 00:21:25,460
implementation and just with some area

312
00:21:22,399 --> 00:21:29,859
overhead it support 64-bit tweak and

313
00:21:25,460 --> 00:21:34,399
also supports decryption in the same

314
00:21:29,859 --> 00:21:36,789
structure for encryption and it has 124

315
00:21:34,399 --> 00:21:40,549
bit security and related key modem that

316
00:21:36,789 --> 00:21:43,629
was in the end of my talk and would be

317
00:21:40,549 --> 00:21:43,629
happy to answer you

318
00:21:48,350 --> 00:22:00,980
any questions there is a question I have

319
00:21:56,460 --> 00:22:03,710
a general question which application

320
00:22:00,980 --> 00:22:06,890
what is the motivation of designing

321
00:22:03,710 --> 00:22:09,690
tweakable lightweight block cipher so

322
00:22:06,890 --> 00:22:12,630
for tweakable block cipher for example

323
00:22:09,690 --> 00:22:15,150
it can be used in encrypting memories

324
00:22:12,630 --> 00:22:18,080
because we can consider the address of

325
00:22:15,150 --> 00:22:21,030
the memory as tui but in lightweight

326
00:22:18,080 --> 00:22:24,899
settings in correct devices do you have

327
00:22:21,030 --> 00:22:30,300
any application to for using tweakable

328
00:22:24,900 --> 00:22:34,020
block cipher for this I'm not that much

329
00:22:30,300 --> 00:22:38,610
exposed to to say what is the reason to

330
00:22:34,020 --> 00:22:44,240
have block cipher but let's say we don't

331
00:22:38,610 --> 00:22:44,240
need to change the key most often and

332
00:22:45,800 --> 00:22:58,139
not only in the also lightweight block

333
00:22:52,620 --> 00:23:03,919
ciphers need to be because like in RFID

334
00:22:58,140 --> 00:23:07,170
implementations you don't need to have

335
00:23:03,920 --> 00:23:12,860
you don't need to change the key most

336
00:23:07,170 --> 00:23:12,860
most often it was not if it was not

337
00:23:15,590 --> 00:23:27,350
I'm not sure if I could answer any other

338
00:23:20,450 --> 00:23:29,779
question okay

339
00:23:27,350 --> 00:23:32,269
you said you're safer it's easier to

340
00:23:29,779 --> 00:23:34,279
break against fault attacks so the

341
00:23:32,269 --> 00:23:37,309
obvious question would be to did some

342
00:23:34,279 --> 00:23:40,240
practical evaluation and as well or how

343
00:23:37,309 --> 00:23:47,029
do you verify that indeed you can tease

344
00:23:40,240 --> 00:23:50,690
security guys for pitfalls of having the

345
00:23:47,029 --> 00:23:53,809
chip and implement inject some holes

346
00:23:50,690 --> 00:24:05,799
into it no we didn't try it but it is in

347
00:23:53,809 --> 00:24:14,289
plan because because is time consuming

348
00:24:05,799 --> 00:24:20,210
but what we did is we write some

349
00:24:14,289 --> 00:24:27,590
simulations and we checked it and it was

350
00:24:20,210 --> 00:24:32,090
able to detect the claim the granted

351
00:24:27,590 --> 00:24:34,639
number of bits in there okay and the

352
00:24:32,090 --> 00:24:36,678
fault model was that you can skip some

353
00:24:34,639 --> 00:24:38,360
instructions like the X or C as you

354
00:24:36,679 --> 00:24:42,499
showed in the example or can you do more

355
00:24:38,360 --> 00:24:43,908
than that so in the vault model you

356
00:24:42,499 --> 00:24:46,220
assume that you can skip some

357
00:24:43,909 --> 00:24:47,899
instructions or fold the particular gate

358
00:24:46,220 --> 00:24:49,970
or you can either take a - more than

359
00:24:47,899 --> 00:24:52,149
that like tapping buyers or stuff like

360
00:24:49,970 --> 00:24:52,149
that

361
00:24:57,399 --> 00:25:08,168
implementation by use of differential

362
00:25:03,649 --> 00:25:17,719
balances not like c4 kind of attacks

363
00:25:08,169 --> 00:25:21,369
okay thank you so can you comment how

364
00:25:17,720 --> 00:25:21,369
you generate around the constants

365
00:25:22,460 --> 00:25:37,230
it's 40 pages the paper was 40 pages we

366
00:25:29,790 --> 00:25:44,820
used to lfsr's one for bid and one 1/3

367
00:25:37,230 --> 00:25:48,270
bit yeah yeah and we add them to only

368
00:25:44,820 --> 00:26:02,939
force and reasonable we checked security

369
00:25:48,270 --> 00:26:06,330
against other questions okay if there

370
00:26:02,940 --> 00:26:13,590
are no questions let's thank and Sock'em

371
00:26:06,330 --> 00:26:16,649
and the other speakers again and I think

372
00:26:13,590 --> 00:26:20,179
that concludes today okay then I hope to

373
00:26:16,650 --> 00:26:20,180
see all of you tomorrow morning

