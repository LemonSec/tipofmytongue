1
00:00:00,439 --> 00:00:05,040
so I didn't quite get the owner of being

2
00:00:02,820 --> 00:00:06,569
the last speaker well I guess I can

3
00:00:05,040 --> 00:00:09,450
unlock that and cheap and some other

4
00:00:06,569 --> 00:00:11,820
thing yeah this is John work with Martin

5
00:00:09,450 --> 00:00:13,530
earthquake and Kenya paracin just a

6
00:00:11,820 --> 00:00:15,900
quick outline of the next 20 years

7
00:00:13,530 --> 00:00:22,049
minutes can you hear me here I should go

8
00:00:15,900 --> 00:00:23,850
closer for this a quick outline of next

9
00:00:22,050 --> 00:00:27,029
20 minutes so first we'll go over some

10
00:00:23,850 --> 00:00:28,859
motivation and then I will introduce to

11
00:00:27,029 --> 00:00:31,470
you the Pinta Mac which is a library

12
00:00:28,859 --> 00:00:33,540
built and then I will show how we use

13
00:00:31,470 --> 00:00:38,100
the benchmark to implement new SSH

14
00:00:33,540 --> 00:00:43,710
encryption schemes and I guess I have to

15
00:00:38,100 --> 00:00:46,050
start over depends a Mac that go so you

16
00:00:43,710 --> 00:00:49,170
all probably know and use SSH it's a

17
00:00:46,050 --> 00:00:51,980
very widely deployed protocol that

18
00:00:49,170 --> 00:00:55,500
protects a large amount of traffic

19
00:00:51,980 --> 00:00:57,269
there's a safe transport layer protocol

20
00:00:55,500 --> 00:01:02,280
this is called the binary packet

21
00:00:57,270 --> 00:01:04,589
protocol defines the packet format and a

22
00:01:02,280 --> 00:01:07,409
quarterback cryptographic processing you

23
00:01:04,589 --> 00:01:09,350
doing them it provides the fundamental

24
00:01:07,409 --> 00:01:11,840
security guarantees of SSH which is

25
00:01:09,350 --> 00:01:14,399
confidentiality and integrity of data

26
00:01:11,840 --> 00:01:16,939
but as the sakes actually aims at going

27
00:01:14,400 --> 00:01:19,229
beyond those fundamentals so I've see

28
00:01:16,939 --> 00:01:23,429
42:51 which defines the overall

29
00:01:19,229 --> 00:01:25,500
architecture of SSH lists a number of

30
00:01:23,430 --> 00:01:27,659
other security guarantees that SSH wants

31
00:01:25,500 --> 00:01:29,700
to provide and we want to focus on two

32
00:01:27,659 --> 00:01:32,070
of these in our service and traffic

33
00:01:29,700 --> 00:01:34,950
analysis and we're going to consider

34
00:01:32,070 --> 00:01:37,889
these as properties of SSH encryption

35
00:01:34,950 --> 00:01:40,890
schemes and by doing that we can

36
00:01:37,890 --> 00:01:42,930
actually formally capture what it means

37
00:01:40,890 --> 00:01:46,380
to be secure against denial of service

38
00:01:42,930 --> 00:01:48,090
and traffic analysis so the tool we want

39
00:01:46,380 --> 00:01:50,820
to use that we are going to use this is

40
00:01:48,090 --> 00:01:54,090
work by Baldwin take a Bailey Patterson

41
00:01:50,820 --> 00:01:55,500
and stem from 2012 so they introduced

42
00:01:54,090 --> 00:01:57,659
the notion of symmetric encryption

43
00:01:55,500 --> 00:02:03,030
schemes supporting ciphertext

44
00:01:57,659 --> 00:02:05,759
fragmentation so does this work so let's

45
00:02:03,030 --> 00:02:08,009
say that Alice produces a cipher text

46
00:02:05,759 --> 00:02:10,619
and sensitive Bob so the normal

47
00:02:08,008 --> 00:02:12,869
assumption you got you're making is that

48
00:02:10,619 --> 00:02:13,770
Bob's receive this cipher text in its

49
00:02:12,870 --> 00:02:15,480
entirety

50
00:02:13,770 --> 00:02:21,110
you can sometimes you also call this

51
00:02:15,480 --> 00:02:24,089
atomic delivery but but that completely

52
00:02:21,110 --> 00:02:26,340
neglects that when when traffic or data

53
00:02:24,090 --> 00:02:28,980
services networks there's a chance of

54
00:02:26,340 --> 00:02:31,860
arbitrary fragmentation so the service

55
00:02:28,980 --> 00:02:37,019
XE might arrive above in fragments and

56
00:02:31,860 --> 00:02:39,780
you these and we'll call these cyber six

57
00:02:37,020 --> 00:02:41,670
fragments and is then out to Bob to

58
00:02:39,780 --> 00:02:45,360
somehow encrypt these fragments but

59
00:02:41,670 --> 00:02:48,869
still arrive at underlying message so

60
00:02:45,360 --> 00:02:52,920
it's this induced fragmentation that be

61
00:02:48,870 --> 00:02:54,420
DPS called cybertek's fragmentation so

62
00:02:52,920 --> 00:02:57,630
that's what we're gonna use to to

63
00:02:54,420 --> 00:03:00,329
formally define these security

64
00:02:57,630 --> 00:03:02,250
properties so be DPS together without

65
00:03:00,330 --> 00:03:04,590
break the ble myself in Patterson

66
00:03:02,250 --> 00:03:06,870
defined a number of different security

67
00:03:04,590 --> 00:03:09,390
notions in this city there are the

68
00:03:06,870 --> 00:03:12,420
fundamental ones of confidentiality and

69
00:03:09,390 --> 00:03:15,350
integrity but also to more advanced ones

70
00:03:12,420 --> 00:03:17,280
that is called boundary hiding and dos I

71
00:03:15,350 --> 00:03:19,739
will give you a flavor of how these

72
00:03:17,280 --> 00:03:22,740
works but I'm not gonna venture into the

73
00:03:19,740 --> 00:03:25,230
nitty-gritty details so boundary hiding

74
00:03:22,740 --> 00:03:28,710
is is going to capture security against

75
00:03:25,230 --> 00:03:30,510
traffic analysis and it essentially says

76
00:03:28,710 --> 00:03:34,350
the following so if the adversary is

77
00:03:30,510 --> 00:03:35,940
giving a sequence of ciphertext then

78
00:03:34,350 --> 00:03:38,160
it's impossible for the adversary to

79
00:03:35,940 --> 00:03:41,850
delineate the ciphertext boundaries in

80
00:03:38,160 --> 00:03:46,230
this sequence there are two versions of

81
00:03:41,850 --> 00:03:48,150
this there's a passive version where the

82
00:03:46,230 --> 00:03:51,690
adversary only has access to the

83
00:03:48,150 --> 00:03:53,340
encryption Oracle and then there was an

84
00:03:51,690 --> 00:03:57,240
active version where the adversary also

85
00:03:53,340 --> 00:03:59,040
has access to the decryption Oracle the

86
00:03:57,240 --> 00:04:01,080
dos notion is going to capture security

87
00:03:59,040 --> 00:04:05,820
against denial service and it's

88
00:04:01,080 --> 00:04:07,860
parameterize by a parameter lambda this

89
00:04:05,820 --> 00:04:10,620
notion is very it's kind of technical

90
00:04:07,860 --> 00:04:17,190
but it sensibly says that no adversary

91
00:04:10,620 --> 00:04:19,290
can make Bob hang a weight by making him

92
00:04:17,190 --> 00:04:20,100
expect more than lump the amount of

93
00:04:19,290 --> 00:04:22,500
ciphertext

94
00:04:20,100 --> 00:04:24,690
so this says this essentially says that

95
00:04:22,500 --> 00:04:26,700
the lower the lambda is the better Bob

96
00:04:24,690 --> 00:04:27,520
is that detecting denial of service

97
00:04:26,700 --> 00:04:38,199
attacks and the

98
00:04:27,520 --> 00:04:39,340
faster you can respond okay so as ice

99
00:04:38,199 --> 00:04:43,240
age supports a number of different

100
00:04:39,340 --> 00:04:47,349
encryption schemes all wasted here an

101
00:04:43,240 --> 00:04:49,270
AEDPA 888 SP did a study where the

102
00:04:47,349 --> 00:04:50,979
analyzed these schemes with respect to

103
00:04:49,270 --> 00:04:53,620
the security notions we have just seen

104
00:04:50,979 --> 00:04:55,750
and it turns out to be a pretty negative

105
00:04:53,620 --> 00:04:56,370
study hope known as badbrakes is but

106
00:04:55,750 --> 00:05:00,490
close

107
00:04:56,370 --> 00:05:03,430
so only ChaCha and put chatter pulley

108
00:05:00,490 --> 00:05:06,280
and encrypt-then-mac meets the boundary

109
00:05:03,430 --> 00:05:08,830
hiding the passive notion for boundary

110
00:05:06,280 --> 00:05:10,599
hiding however these two schemes has

111
00:05:08,830 --> 00:05:12,699
other noticeable drawbacks in the

112
00:05:10,599 --> 00:05:14,169
context of SSH first of all

113
00:05:12,699 --> 00:05:17,470
encrypt-then-mac it's not inherently

114
00:05:14,169 --> 00:05:19,750
secure this was both true Mumbai albeit

115
00:05:17,470 --> 00:05:24,389
Patterson and Watson in o.9 but also by

116
00:05:19,750 --> 00:05:26,710
80hp and I guess we can all agree that

117
00:05:24,389 --> 00:05:29,319
encrypting or decrypting on unverified

118
00:05:26,710 --> 00:05:31,419
data it's probably not very good all

119
00:05:29,319 --> 00:05:33,880
right so even though ChaCha is a chatter

120
00:05:31,419 --> 00:05:36,370
pool is very great scheme it can utilize

121
00:05:33,880 --> 00:05:39,969
AES and 26 which is pretty bad in in

122
00:05:36,370 --> 00:05:43,060
some popular context context where SSH

123
00:05:39,969 --> 00:05:44,529
is used and so we see that none of the

124
00:05:43,060 --> 00:05:47,259
current SSH encryption schemes

125
00:05:44,529 --> 00:05:49,930
adequately provides to decide security

126
00:05:47,259 --> 00:05:52,090
properties so two natural questions to

127
00:05:49,930 --> 00:05:56,229
ask other than candy security policies

128
00:05:52,090 --> 00:05:58,529
be realized simultaneously in SSH and at

129
00:05:56,229 --> 00:05:58,529
what cost

130
00:06:01,930 --> 00:06:11,320
oh no you saw it it's kind of finished

131
00:06:07,960 --> 00:06:13,539
nothing okay so to answer this question

132
00:06:11,320 --> 00:06:15,130
is maybe not surprised that we're gonna

133
00:06:13,539 --> 00:06:17,259
start out with looking at this scheme

134
00:06:15,130 --> 00:06:19,419
called intimate so this game is pretty

135
00:06:17,259 --> 00:06:23,289
simple I'm gonna explain how it works so

136
00:06:19,419 --> 00:06:24,969
giving a message this message you first

137
00:06:23,289 --> 00:06:29,800
split it into equal sized chunks of

138
00:06:24,970 --> 00:06:32,110
length n counting in bytes then this n

139
00:06:29,800 --> 00:06:35,620
you call the chunk length you then

140
00:06:32,110 --> 00:06:36,970
encode each chunk with a byte 0 except

141
00:06:35,620 --> 00:06:38,280
the last chunk which you can cope with

142
00:06:36,970 --> 00:06:41,139
about 1

143
00:06:38,280 --> 00:06:44,440
you don't encrypt each encoded chunk and

144
00:06:41,139 --> 00:06:46,750
you compute a mag over it but you see

145
00:06:44,440 --> 00:06:48,729
that 2 to be able to prevent reordering

146
00:06:46,750 --> 00:06:52,180
attacks you have to include two counters

147
00:06:48,729 --> 00:06:53,830
into the Mack computation okay so to

148
00:06:52,180 --> 00:06:56,650
arrive at the final cyber take you just

149
00:06:53,830 --> 00:06:58,419
concatenate everything together and to

150
00:06:56,650 --> 00:07:01,299
decrypt you just shift your gear into

151
00:06:58,419 --> 00:07:03,280
reverse you verify the mag you decrypt

152
00:07:01,300 --> 00:07:06,039
and then you inspector encoding byte and

153
00:07:03,280 --> 00:07:09,479
if this encoding byte is the one you

154
00:07:06,039 --> 00:07:11,560
have you're recovered you have plaintext

155
00:07:09,479 --> 00:07:14,680
all right so this scheme was also

156
00:07:11,560 --> 00:07:17,310
proposed by B DPS and they prove that it

157
00:07:14,680 --> 00:07:22,389
achieves confidentiality integrity

158
00:07:17,310 --> 00:07:24,190
analysis and those so we want to go

159
00:07:22,389 --> 00:07:25,810
ahead and implement this but before we

160
00:07:24,190 --> 00:07:27,880
did that we realized that BT PS kind of

161
00:07:25,810 --> 00:07:30,130
cheated because this scheme only

162
00:07:27,880 --> 00:07:31,719
supports messages that I it's a multiple

163
00:07:30,130 --> 00:07:35,919
of n which is not really good in

164
00:07:31,720 --> 00:07:38,310
practice luckily there's an easy way to

165
00:07:35,919 --> 00:07:40,510
resolve this we just apply some padding

166
00:07:38,310 --> 00:07:43,449
now the padding scheme we're gonna use

167
00:07:40,510 --> 00:07:45,520
is pretty simple if the last byte of the

168
00:07:43,449 --> 00:07:47,380
message is just zero you just type it

169
00:07:45,520 --> 00:07:49,409
once and if it's not serial you just

170
00:07:47,380 --> 00:07:51,639
pack a service well it's pretty simple

171
00:07:49,409 --> 00:07:53,860
now if we did some other changes to

172
00:07:51,639 --> 00:07:55,630
enter max scheme you also didn't want to

173
00:07:53,860 --> 00:07:58,120
add padding if the message was already a

174
00:07:55,630 --> 00:08:00,520
multiple of n so we encode this

175
00:07:58,120 --> 00:08:04,060
information in a last encoding byte of

176
00:08:00,520 --> 00:08:06,460
the last chunk we also replaced is

177
00:08:04,060 --> 00:08:08,710
encrypt and Mac construction with more

178
00:08:06,460 --> 00:08:11,229
modern on space of indicating Krypton

179
00:08:08,710 --> 00:08:12,820
schemes about doing that which somehow

180
00:08:11,229 --> 00:08:15,240
needs to figure out a way to include the

181
00:08:12,820 --> 00:08:17,039
counters to prevent reordering

182
00:08:15,240 --> 00:08:20,280
we do this by joining the neurons from

183
00:08:17,039 --> 00:08:22,770
the counters oh and then we prove that

184
00:08:20,280 --> 00:08:24,799
the this modified enzyme AG scheme

185
00:08:22,770 --> 00:08:27,299
achieves all the same security notions

186
00:08:24,800 --> 00:08:31,380
confidentiality integrity bow no hiding

187
00:08:27,300 --> 00:08:32,490
indoors all right so we went ahead and

188
00:08:31,380 --> 00:08:34,950
implemented this and we call the

189
00:08:32,490 --> 00:08:36,690
implementation leap into my it's a CA

190
00:08:34,950 --> 00:08:39,149
implementation we kind of try to make it

191
00:08:36,690 --> 00:08:41,399
a fun library to use so we have a small

192
00:08:39,149 --> 00:08:44,279
API which should also make it easier to

193
00:08:41,399 --> 00:08:46,320
use we completely remove the

194
00:08:44,279 --> 00:08:49,620
responsibility of nonce management away

195
00:08:46,320 --> 00:08:56,130
from the user and and handles all this

196
00:08:49,620 --> 00:08:58,050
internally we also a feature of

197
00:08:56,130 --> 00:09:01,649
algorithm agility with respect to the

198
00:08:58,050 --> 00:09:03,810
underlying underlying nonce based

199
00:09:01,649 --> 00:09:06,959
encryption scheme right now we have code

200
00:09:03,810 --> 00:09:09,930
for AST cm and ChaCha pulley and should

201
00:09:06,959 --> 00:09:11,699
note that you shouldn't you shouldn't so

202
00:09:09,930 --> 00:09:13,949
i overload the naming here you shouldn't

203
00:09:11,700 --> 00:09:16,890
confuse these two with the ssh

204
00:09:13,950 --> 00:09:19,260
encryption schemes of the same name ssh

205
00:09:16,890 --> 00:09:20,810
encryption schemes the definition of

206
00:09:19,260 --> 00:09:24,660
those and the name you use those

207
00:09:20,810 --> 00:09:28,380
includes more it also includes encoding

208
00:09:24,660 --> 00:09:30,150
and processing of packets so another

209
00:09:28,380 --> 00:09:32,430
thing you mention is that we try to

210
00:09:30,150 --> 00:09:35,220
identify attack vectors that goes beyond

211
00:09:32,430 --> 00:09:37,050
the formal model and implement

212
00:09:35,220 --> 00:09:39,500
countermeasures against them so I'll go

213
00:09:37,050 --> 00:09:42,000
into a bit more detail of one of these

214
00:09:39,500 --> 00:09:43,860
and it kind of shows that even though

215
00:09:42,000 --> 00:09:47,250
Intermatic has a really really simple

216
00:09:43,860 --> 00:09:49,770
description you can't have to keep track

217
00:09:47,250 --> 00:09:52,470
of a lot of things when you when you

218
00:09:49,770 --> 00:09:55,050
have to implement it so one issue we

219
00:09:52,470 --> 00:09:59,490
identified was with the decryption

220
00:09:55,050 --> 00:10:00,719
algorithm so that's good that's where we

221
00:09:59,490 --> 00:10:03,720
wind a bit and go back to the boundary

222
00:10:00,720 --> 00:10:06,209
honey notion so we call that it says

223
00:10:03,720 --> 00:10:08,190
that the adversary cannot delineate

224
00:10:06,209 --> 00:10:11,010
cybertek's boundaries in a sequence of

225
00:10:08,190 --> 00:10:12,899
ciphertext here by the thing that ever

226
00:10:11,010 --> 00:10:17,069
so you can do is to measure the response

227
00:10:12,899 --> 00:10:19,589
time from the decryption algorithm above

228
00:10:17,070 --> 00:10:22,860
and this is not captured by the formal

229
00:10:19,589 --> 00:10:24,750
security model so if this response time

230
00:10:22,860 --> 00:10:27,320
it is somehow ciphertext boundary

231
00:10:24,750 --> 00:10:28,820
dependent then Bob

232
00:10:27,320 --> 00:10:31,820
so the adversary might be able to

233
00:10:28,820 --> 00:10:33,890
delineate decipher two exponents so to

234
00:10:31,820 --> 00:10:37,610
combat this we have to make sure that

235
00:10:33,890 --> 00:10:39,319
the execution time of the decryption

236
00:10:37,610 --> 00:10:44,780
algorithm is independent of cybersex

237
00:10:39,320 --> 00:10:46,760
boundaries so one source of non-uniform

238
00:10:44,780 --> 00:10:49,640
response times can come from padding

239
00:10:46,760 --> 00:10:52,130
room so remember you do you do this when

240
00:10:49,640 --> 00:10:53,960
you decrypt the last chunk and you

241
00:10:52,130 --> 00:10:55,850
inspect the encoding part and it's this

242
00:10:53,960 --> 00:10:57,530
encoding by tells you that there's

243
00:10:55,850 --> 00:10:59,540
padding then you have to remove it

244
00:10:57,530 --> 00:11:00,890
somehow the first thing you has to do is

245
00:10:59,540 --> 00:11:03,500
to figure out how much padding there is

246
00:11:00,890 --> 00:11:05,360
and the most optimal way to do this

247
00:11:03,500 --> 00:11:08,690
probably just to start from the end and

248
00:11:05,360 --> 00:11:10,490
then do a back trace until you find a

249
00:11:08,690 --> 00:11:12,370
byte that is different and never reveal

250
00:11:10,490 --> 00:11:14,870
the the amount of padding you have

251
00:11:12,370 --> 00:11:16,340
however obviously this takes time

252
00:11:14,870 --> 00:11:20,000
proportional to the amount of padding

253
00:11:16,340 --> 00:11:26,270
which kind of reveals the boundaries the

254
00:11:20,000 --> 00:11:28,220
ciphertext boundaries so so we implement

255
00:11:26,270 --> 00:11:29,900
a constant time padding removal function

256
00:11:28,220 --> 00:11:32,180
and what it does is that it searches

257
00:11:29,900 --> 00:11:35,150
through the whole chunk so he visits

258
00:11:32,180 --> 00:11:37,310
each byte exactly once and we also

259
00:11:35,150 --> 00:11:39,650
invoke this algorithm all chunks of all

260
00:11:37,310 --> 00:11:42,380
messages not to leak which chunk you've

261
00:11:39,650 --> 00:11:44,959
been moving panning from so obviously

262
00:11:42,380 --> 00:11:48,140
doing a linear search over all chunks

263
00:11:44,960 --> 00:11:50,720
chunks of all messages kind of must add

264
00:11:48,140 --> 00:11:51,680
some overhead so we did a study to show

265
00:11:50,720 --> 00:11:53,840
how much that is

266
00:11:51,680 --> 00:11:57,380
so we decrypted an 8 kilobyte message

267
00:11:53,840 --> 00:11:58,970
for different chunk links and where we

268
00:11:57,380 --> 00:12:00,710
implement that decryption algorithm with

269
00:11:58,970 --> 00:12:02,600
constant time padding removal and

270
00:12:00,710 --> 00:12:07,670
another one with non constant time patty

271
00:12:02,600 --> 00:12:09,860
removal and it's this simple study

272
00:12:07,670 --> 00:12:12,890
showed that using a constant time

273
00:12:09,860 --> 00:12:15,350
padding removal algorithm slows the

274
00:12:12,890 --> 00:12:17,390
decryption down with a factor between

275
00:12:15,350 --> 00:12:20,930
four to five which is kind of

276
00:12:17,390 --> 00:12:22,939
significant but we wanted to make about

277
00:12:20,930 --> 00:12:28,250
maximum security so we still implemented

278
00:12:22,940 --> 00:12:30,410
the constant time version okay so we

279
00:12:28,250 --> 00:12:32,690
identified additional timing channels of

280
00:12:30,410 --> 00:12:34,819
the same format and we implemented

281
00:12:32,690 --> 00:12:36,410
countermeasures against them however in

282
00:12:34,820 --> 00:12:38,330
the code there are still some branches

283
00:12:36,410 --> 00:12:39,650
that depends on cybertek's boundaries so

284
00:12:38,330 --> 00:12:41,120
we cannot really claim that we have a

285
00:12:39,650 --> 00:12:45,079
full constant time decryption

286
00:12:41,120 --> 00:12:47,960
and we think there's still some a lot of

287
00:12:45,080 --> 00:12:49,490
home apartments in this area and I and I

288
00:12:47,960 --> 00:12:51,050
guess I can use that as a shameful plug

289
00:12:49,490 --> 00:12:59,630
to make you read the papers you want to

290
00:12:51,050 --> 00:13:02,569
know more all right so we also looked at

291
00:12:59,630 --> 00:13:08,060
how other performances for Lipton tamang

292
00:13:02,570 --> 00:13:10,339
in Canada is extensive benchmarking we

293
00:13:08,060 --> 00:13:13,250
did it for four different four different

294
00:13:10,339 --> 00:13:16,279
message lengths and this shows the

295
00:13:13,250 --> 00:13:18,680
decryption encryption algorithm where we

296
00:13:16,279 --> 00:13:21,500
use AES TCM as the internal nonce based

297
00:13:18,680 --> 00:13:24,290
encryption scheme the y axis denotes the

298
00:13:21,500 --> 00:13:28,029
chunk length and x axis denotes the

299
00:13:24,290 --> 00:13:31,189
performance measured in cycles per byte

300
00:13:28,029 --> 00:13:32,960
and if you go through this chart you

301
00:13:31,190 --> 00:13:34,610
will see that for each message length

302
00:13:32,960 --> 00:13:38,620
the optimal performance you can achieve

303
00:13:34,610 --> 00:13:43,190
is between 1.4 and 2.5 cycles per byte

304
00:13:38,620 --> 00:13:44,870
so it's not it's not that bad the story

305
00:13:43,190 --> 00:13:47,180
completely changes for decryption so

306
00:13:44,870 --> 00:13:50,570
here you have a a slowdown a factor of

307
00:13:47,180 --> 00:13:53,630
10 and much of that you can trace back

308
00:13:50,570 --> 00:13:55,160
to this constant time padding removal it

309
00:13:53,630 --> 00:13:58,610
slows even more down if you use chapter

310
00:13:55,160 --> 00:14:01,400
pulley which has a which slows it down

311
00:13:58,610 --> 00:14:04,190
with a factor between 25 and 35 so

312
00:14:01,400 --> 00:14:06,470
obviously these measurements are done on

313
00:14:04,190 --> 00:14:09,620
a machine that suppose a yes intrinsic

314
00:14:06,470 --> 00:14:12,620
so I mean that's why Chacho is quite a

315
00:14:09,620 --> 00:14:14,630
lot slow I really didn't think about

316
00:14:12,620 --> 00:14:17,120
it's about speed so still think there's

317
00:14:14,630 --> 00:14:19,189
a lot of proof in there's still a lot of

318
00:14:17,120 --> 00:14:25,550
room for improving these these

319
00:14:19,190 --> 00:14:28,750
measurements ok so now we have a solid

320
00:14:25,550 --> 00:14:33,050
scheme on implementation of inter Mac

321
00:14:28,750 --> 00:14:34,520
and we want to see how let me see how we

322
00:14:33,050 --> 00:14:37,790
wanted to see how it performs an

323
00:14:34,520 --> 00:14:39,770
association so to do that we implemented

324
00:14:37,790 --> 00:14:43,040
into Mac based encryption schemes in

325
00:14:39,770 --> 00:14:46,910
OpenSSH this required us to do a number

326
00:14:43,040 --> 00:14:49,880
of changes to to old mrs. H so this is

327
00:14:46,910 --> 00:14:52,910
the SSH packet format contains a link

328
00:14:49,880 --> 00:14:54,500
field patty main field admissions this

329
00:14:52,910 --> 00:14:57,199
amount of padding and stuff

330
00:14:54,500 --> 00:14:58,610
but most of these fields actually comes

331
00:14:57,200 --> 00:14:59,750
with done than when you use into mic you

332
00:14:58,610 --> 00:15:03,560
don't really need them to process

333
00:14:59,750 --> 00:15:05,480
packets anymore so we removed them we

334
00:15:03,560 --> 00:15:07,750
also implemented standalone code paths

335
00:15:05,480 --> 00:15:10,340
for Intermatic encryption and decryption

336
00:15:07,750 --> 00:15:13,120
its first of all circumvent some really

337
00:15:10,340 --> 00:15:16,580
bad history of some of the OpenSSH code

338
00:15:13,120 --> 00:15:18,710
but we also needed that because inter

339
00:15:16,580 --> 00:15:21,590
mag is kind of really different from

340
00:15:18,710 --> 00:15:24,620
some of the other big encryption schemes

341
00:15:21,590 --> 00:15:26,270
that OpenSSH supports and for that same

342
00:15:24,620 --> 00:15:28,190
reason we had to implement some

343
00:15:26,270 --> 00:15:31,420
non-standard buffering of the output

344
00:15:28,190 --> 00:15:34,460
from the Intermatic decryption algorithm

345
00:15:31,420 --> 00:15:35,990
so if you sum all this up this kind of

346
00:15:34,460 --> 00:15:38,060
shows that if you want to integrate into

347
00:15:35,990 --> 00:15:42,290
mag into your application it can become

348
00:15:38,060 --> 00:15:45,050
quite complex unfortunately I am so we

349
00:15:42,290 --> 00:15:47,270
did two two studies to see how a well

350
00:15:45,050 --> 00:15:50,260
into my performing an SSH so the first

351
00:15:47,270 --> 00:15:52,970
study we we transferred a 50 megabyte

352
00:15:50,260 --> 00:15:55,640
using SCP and uh no SCP is not really

353
00:15:52,970 --> 00:15:57,770
good that's what we have and we want to

354
00:15:55,640 --> 00:16:00,290
use SCP because it's an SSA it's based

355
00:15:57,770 --> 00:16:02,900
at transfer protocol so we did this

356
00:16:00,290 --> 00:16:04,370
between two easy two instances in two

357
00:16:02,900 --> 00:16:07,100
different availability zones and it

358
00:16:04,370 --> 00:16:08,720
obvious and by doing a bit to between

359
00:16:07,100 --> 00:16:10,700
two availability zones means that the

360
00:16:08,720 --> 00:16:15,100
distance is really short also the

361
00:16:10,700 --> 00:16:17,600
network is extremely fast so the first

362
00:16:15,100 --> 00:16:21,680
optimizing the first observation you can

363
00:16:17,600 --> 00:16:24,950
make is that the inter Mac encryption

364
00:16:21,680 --> 00:16:26,930
schemes in that we implemented performs

365
00:16:24,950 --> 00:16:27,290
kind of on the same level as charter

366
00:16:26,930 --> 00:16:29,630
poly

367
00:16:27,290 --> 00:16:32,030
there's the chatter pulley scheme in

368
00:16:29,630 --> 00:16:34,220
OpenSSH and chat apple is currently the

369
00:16:32,030 --> 00:16:37,520
default the encryption scheme that

370
00:16:34,220 --> 00:16:41,570
almost says use a general observation

371
00:16:37,520 --> 00:16:43,900
you can make is that this performance

372
00:16:41,570 --> 00:16:46,520
seems to be conversational dependent

373
00:16:43,900 --> 00:16:48,709
this kind of changes in the second

374
00:16:46,520 --> 00:16:50,660
experiment we did so here instead of

375
00:16:48,710 --> 00:16:53,060
doing a between 12 ability zones we did

376
00:16:50,660 --> 00:16:54,890
it between two different regions so this

377
00:16:53,060 --> 00:16:56,599
means that the distance greatly

378
00:16:54,890 --> 00:17:01,310
increases but also the network becomes

379
00:16:56,600 --> 00:17:04,610
kind of not so good and it's clear to

380
00:17:01,310 --> 00:17:07,280
see that performance is no longer

381
00:17:04,609 --> 00:17:08,329
conversation with dependent but it's

382
00:17:07,280 --> 00:17:11,148
probably more a network

383
00:17:08,329 --> 00:17:12,889
dependent and it has a really great

384
00:17:11,148 --> 00:17:16,309
similarity with this other graph over

385
00:17:12,890 --> 00:17:20,720
here which shows the ciphertex expansion

386
00:17:16,309 --> 00:17:22,459
for each encryption scheme in OpenSSH so

387
00:17:20,720 --> 00:17:25,100
for the existing schemes this is just

388
00:17:22,459 --> 00:17:27,199
some of them there are many more there's

389
00:17:25,099 --> 00:17:29,389
it's quite uniform it's not much

390
00:17:27,199 --> 00:17:31,100
difference between schemes this changes

391
00:17:29,390 --> 00:17:33,590
completely for enzymatic schemes where

392
00:17:31,100 --> 00:17:36,709
we have a great variety of different

393
00:17:33,590 --> 00:17:38,120
ciphertext expansion amounts and the

394
00:17:36,710 --> 00:17:40,399
reason for that is because of the

395
00:17:38,120 --> 00:17:43,039
padding and how this padding or how the

396
00:17:40,399 --> 00:17:44,799
the messages fit from this SCP

397
00:17:43,039 --> 00:17:46,940
application down to the transport layer

398
00:17:44,799 --> 00:17:49,340
interacts with the chunk length from

399
00:17:46,940 --> 00:17:52,429
this padding which creates this really

400
00:17:49,340 --> 00:17:54,408
weird distribution but we also have the

401
00:17:52,429 --> 00:17:56,389
side would say expansion between 10 to

402
00:17:54,409 --> 00:17:59,240
35 percent for the enzymatic schemes

403
00:17:56,389 --> 00:18:03,408
which is quite a lot it also creates

404
00:17:59,240 --> 00:18:06,830
this funny thing there I hate to

405
00:18:03,409 --> 00:18:09,889
conclude so the answer to the first

406
00:18:06,830 --> 00:18:13,010
question is yes we implemented in term

407
00:18:09,889 --> 00:18:14,830
and we also try to identify issues that

408
00:18:13,010 --> 00:18:17,450
goes beyond the formal security model

409
00:18:14,830 --> 00:18:20,299
and we think that our inter mac based

410
00:18:17,450 --> 00:18:23,330
encryption schemes and OpenSSH kind of

411
00:18:20,299 --> 00:18:25,580
captures the desired security that ssh

412
00:18:23,330 --> 00:18:28,580
wants to provide a bit better than the

413
00:18:25,580 --> 00:18:31,519
existing ones by using inter mag also

414
00:18:28,580 --> 00:18:34,908
add some cost or overhead so we observe

415
00:18:31,519 --> 00:18:37,639
increased complexity complexity in

416
00:18:34,909 --> 00:18:40,460
integration and implementation this

417
00:18:37,639 --> 00:18:42,260
affects performance to some extent but

418
00:18:40,460 --> 00:18:45,380
depending on your use case this might or

419
00:18:42,260 --> 00:18:47,809
might not be tolerable make a final goal

420
00:18:45,380 --> 00:18:50,250
or code on github or you can hit us up

421
00:18:47,809 --> 00:18:55,059
on Twitter thank you

422
00:18:50,250 --> 00:19:01,399
[Applause]

423
00:18:55,059 --> 00:19:03,950
question don't you think that having

424
00:19:01,399 --> 00:19:05,988
this new libraries also couldn't also be

425
00:19:03,950 --> 00:19:08,779
a good opportunity to implement some of

426
00:19:05,989 --> 00:19:13,759
the C's algorithms and do you have plans

427
00:19:08,779 --> 00:19:15,649
for that there will be no no to which

428
00:19:13,759 --> 00:19:20,749
question a plan or a good isn't it a

429
00:19:15,649 --> 00:19:23,149
good opportunity none of them maybe I

430
00:19:20,749 --> 00:19:24,859
mean I mean everyone can implement it

431
00:19:23,149 --> 00:19:33,580
it's pretty easy to implement new

432
00:19:24,859 --> 00:19:33,580
schemes for let's go all the way back

433
00:19:34,720 --> 00:19:40,700
there it's pretty easy to do this in the

434
00:19:37,729 --> 00:19:42,259
benchmark so I made it easy to for other

435
00:19:40,700 --> 00:19:44,149
user to actually implement schemes you

436
00:19:42,259 --> 00:19:46,220
just have to program against an

437
00:19:44,149 --> 00:19:53,408
interface and then you can quickly use

438
00:19:46,220 --> 00:19:53,409
it so I mean anyone has invited Thanks

439
00:20:00,770 --> 00:20:05,820
if there are no further questions then

440
00:20:03,080 --> 00:20:11,659
think the speak again

441
00:20:05,820 --> 00:20:11,659
[Applause]

