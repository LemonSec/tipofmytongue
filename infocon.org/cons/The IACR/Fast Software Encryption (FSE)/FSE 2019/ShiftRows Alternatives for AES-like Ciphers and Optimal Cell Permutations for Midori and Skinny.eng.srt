1
00:00:00,030 --> 00:00:07,379
yeah thank you for an introduction so

2
00:00:02,009 --> 00:00:11,250
this thought will be about this thought

3
00:00:07,379 --> 00:00:13,290
will be about a s like ciphers and a s

4
00:00:11,250 --> 00:00:15,929
like constructions have been a very

5
00:00:13,290 --> 00:00:17,538
popular design choice and a wide range

6
00:00:15,929 --> 00:00:20,010
of primitives have been constructed

7
00:00:17,539 --> 00:00:22,580
their proxy furs hash functions

8
00:00:20,010 --> 00:00:25,439
permutations all which use ideas

9
00:00:22,580 --> 00:00:29,459
originally proposed in the design of AES

10
00:00:25,439 --> 00:00:31,140
and also for all the competitions we had

11
00:00:29,460 --> 00:00:33,540
so in Jeffrey we had a lot of areas like

12
00:00:31,140 --> 00:00:35,040
designs and probably also if the

13
00:00:33,540 --> 00:00:40,559
lightweight competition we will have a

14
00:00:35,040 --> 00:00:42,660
lot of a is like designs so what we mean

15
00:00:40,559 --> 00:00:45,120
with a has like decides we consider here

16
00:00:42,660 --> 00:00:48,300
the following building blocks so we have

17
00:00:45,120 --> 00:00:51,959
a round function and it consists of this

18
00:00:48,300 --> 00:00:54,649
free sub functions so the first one is

19
00:00:51,960 --> 00:00:59,550
just the application of an sbox

20
00:00:54,649 --> 00:01:01,890
then the permutation is applied which

21
00:00:59,550 --> 00:01:05,789
changes the position of the elements in

22
00:01:01,890 --> 00:01:10,560
the state and finally matrix is

23
00:01:05,790 --> 00:01:14,939
multiplied on each column and a lot of

24
00:01:10,560 --> 00:01:17,040
designs fall into this category so about

25
00:01:14,939 --> 00:01:19,529
the S boxes so there has been a lot of

26
00:01:17,040 --> 00:01:21,600
research on how to construct s boxes I

27
00:01:19,530 --> 00:01:24,900
think we also have a session later this

28
00:01:21,600 --> 00:01:26,669
week on s boxes and it's the only

29
00:01:24,900 --> 00:01:28,799
nonlinear component so it's a very

30
00:01:26,670 --> 00:01:30,479
important building block here but

31
00:01:28,799 --> 00:01:31,979
there's been a lot of research on this

32
00:01:30,479 --> 00:01:37,320
then it will not be the focus of this

33
00:01:31,979 --> 00:01:40,020
talk then similar for a mix columns

34
00:01:37,320 --> 00:01:42,179
operation there's been a lot of research

35
00:01:40,020 --> 00:01:43,740
on how to design these matrices what

36
00:01:42,180 --> 00:01:46,590
properties we want how to get them

37
00:01:43,740 --> 00:01:48,619
efficiently although the next two talks

38
00:01:46,590 --> 00:01:52,380
in this session will be about this and

39
00:01:48,619 --> 00:01:53,759
this thought will not be about this what

40
00:01:52,380 --> 00:01:55,798
we are going to talk about is this

41
00:01:53,759 --> 00:02:01,380
middle layer so how do you change the

42
00:01:55,799 --> 00:02:05,070
position of these cells so arguably one

43
00:02:01,380 --> 00:02:07,039
of the most important criteria for block

44
00:02:05,070 --> 00:02:09,000
cipher but also other primitives is

45
00:02:07,039 --> 00:02:11,640
resistance against differential and

46
00:02:09,000 --> 00:02:13,200
linear cryptanalysis and each one of

47
00:02:11,640 --> 00:02:13,920
this building blocks plays quite a

48
00:02:13,200 --> 00:02:17,849
crucial role

49
00:02:13,920 --> 00:02:20,429
in constructing a primitive secure

50
00:02:17,849 --> 00:02:22,970
against these attacks though the sbox

51
00:02:20,430 --> 00:02:27,420
directly influences the probability of

52
00:02:22,970 --> 00:02:29,609
difference going through it the matrix

53
00:02:27,420 --> 00:02:31,920
multiplication it directly gives you a

54
00:02:29,610 --> 00:02:37,410
lower bound on the number of active s

55
00:02:31,920 --> 00:02:39,299
boxes in a single round but the relation

56
00:02:37,410 --> 00:02:42,269
of how you do this permutation is a bit

57
00:02:39,300 --> 00:02:44,940
less less clear what happens in general

58
00:02:42,269 --> 00:02:46,530
and it still heavily influences the

59
00:02:44,940 --> 00:02:49,859
number of activist boxes you get in

60
00:02:46,530 --> 00:02:52,319
total so the typically goal for every

61
00:02:49,860 --> 00:02:54,709
designers yeah we want to have a as high

62
00:02:52,319 --> 00:02:59,609
as possible number of activist boxes

63
00:02:54,709 --> 00:03:02,069
over many rounds so as an example a yes

64
00:02:59,610 --> 00:03:04,950
has a mixed columns with french number

65
00:03:02,069 --> 00:03:07,619
five and this is if the quite simple

66
00:03:04,950 --> 00:03:09,899
constraint on what can be achieved in

67
00:03:07,620 --> 00:03:12,600
one round so french number five here

68
00:03:09,900 --> 00:03:15,660
means just if we we start with a single

69
00:03:12,600 --> 00:03:18,420
difference it goes through the S box and

70
00:03:15,660 --> 00:03:19,829
shift rows and then it becomes a full

71
00:03:18,420 --> 00:03:22,500
length column and this is kind of the

72
00:03:19,829 --> 00:03:26,190
constrained behavior so the sum of the

73
00:03:22,500 --> 00:03:27,959
input differences and the output

74
00:03:26,190 --> 00:03:31,920
differences has to bigger than five in

75
00:03:27,959 --> 00:03:34,049
the case of mixed columns and this

76
00:03:31,920 --> 00:03:35,940
allows quite nice arguments on the

77
00:03:34,049 --> 00:03:39,269
minimum number of active s boxes you get

78
00:03:35,940 --> 00:03:41,700
over more rounds however for other

79
00:03:39,269 --> 00:03:43,920
choices of mixed columns and shift rows

80
00:03:41,700 --> 00:03:45,328
it becomes a bit less clear so there are

81
00:03:43,920 --> 00:03:47,548
lot of other designs following these

82
00:03:45,329 --> 00:03:50,400
strategies so for instance Midori we

83
00:03:47,549 --> 00:03:53,250
heard about it before it uses a branch

84
00:03:50,400 --> 00:03:55,140
number four so okay we would have this

85
00:03:53,250 --> 00:03:58,319
constraint they have to be at least four

86
00:03:55,140 --> 00:03:59,970
if we sum up input plus output but

87
00:03:58,319 --> 00:04:02,190
actually they are transitions India

88
00:03:59,970 --> 00:04:04,049
which are not possible in the case of

89
00:04:02,190 --> 00:04:08,130
matauri you can never go from two to

90
00:04:04,049 --> 00:04:10,410
three active through mixed columns in

91
00:04:08,130 --> 00:04:12,420
the picture below this very complex

92
00:04:10,410 --> 00:04:14,790
picture shows you what happens through a

93
00:04:12,420 --> 00:04:17,339
skinny mix columns so skinny mix columns

94
00:04:14,790 --> 00:04:20,219
is extremely lightweight it only as a

95
00:04:17,339 --> 00:04:22,500
branch number of two but not all

96
00:04:20,220 --> 00:04:24,570
transitions are possible so actually if

97
00:04:22,500 --> 00:04:26,690
you look at this you will see only two

98
00:04:24,570 --> 00:04:30,230
transitions here which go from one to

99
00:04:26,690 --> 00:04:32,030
and reach this minimal bound so if you

100
00:04:30,230 --> 00:04:34,700
now want to analyze the cipher for more

101
00:04:32,030 --> 00:04:39,679
rounds it becomes quite complex in the

102
00:04:34,700 --> 00:04:42,050
case of those designs there are some

103
00:04:39,680 --> 00:04:44,240
results known on this so for case of a

104
00:04:42,050 --> 00:04:47,180
yes yeah we know if we have a square

105
00:04:44,240 --> 00:04:50,330
state and the matrix is MDS then shift

106
00:04:47,180 --> 00:04:54,020
rows will be optimal it has also been

107
00:04:50,330 --> 00:04:56,210
some additional work on this where you

108
00:04:54,020 --> 00:04:59,210
look at all the other shapes of states

109
00:04:56,210 --> 00:05:01,700
and other properties of this mix column

110
00:04:59,210 --> 00:05:03,590
so but the problem that we solve in

111
00:05:01,700 --> 00:05:07,010
these papers now if you are given an N

112
00:05:03,590 --> 00:05:09,950
times n state and we fixed the mix

113
00:05:07,010 --> 00:05:12,740
columns what is actually optimal choice

114
00:05:09,950 --> 00:05:18,650
for permutation with respect to

115
00:05:12,740 --> 00:05:20,660
differential and linear cryptanalysis so

116
00:05:18,650 --> 00:05:23,090
let's look at an example so we want to

117
00:05:20,660 --> 00:05:24,760
choose this permutation now so let's

118
00:05:23,090 --> 00:05:27,500
assume we have a four times four state

119
00:05:24,760 --> 00:05:29,300
then we already would get like sixteen

120
00:05:27,500 --> 00:05:32,750
factorial possible choices for this

121
00:05:29,300 --> 00:05:35,180
permutation so this is quite a big

122
00:05:32,750 --> 00:05:37,100
number but may be still feasible to

123
00:05:35,180 --> 00:05:39,620
handle but the issue is we need to kind

124
00:05:37,100 --> 00:05:42,320
of evaluate each design now if we fix

125
00:05:39,620 --> 00:05:44,330
the mix column which permutation we kind

126
00:05:42,320 --> 00:05:47,770
of want to know what are the bounds on

127
00:05:44,330 --> 00:05:52,669
the active s boxes then this might be

128
00:05:47,770 --> 00:05:55,760
quite out of not be feasible for us to

129
00:05:52,669 --> 00:05:58,099
run for all the permutations in this

130
00:05:55,760 --> 00:06:02,450
case so what we have to do is we kind of

131
00:05:58,100 --> 00:06:04,820
have to limit the search space so the

132
00:06:02,450 --> 00:06:07,520
first observation we made here so if you

133
00:06:04,820 --> 00:06:11,180
have a permutation P and the permutation

134
00:06:07,520 --> 00:06:14,990
theta so if theta R commutes with this

135
00:06:11,180 --> 00:06:19,640
matrix M used in the mixed columns then

136
00:06:14,990 --> 00:06:22,960
the cipher where you use the permutation

137
00:06:19,640 --> 00:06:26,539
P and the cipher values the permutation

138
00:06:22,960 --> 00:06:30,500
theta inverse P theta have the same

139
00:06:26,540 --> 00:06:33,710
properties and this can be quite easily

140
00:06:30,500 --> 00:06:38,120
shown here so down here we have the

141
00:06:33,710 --> 00:06:40,500
round function and if we change the

142
00:06:38,120 --> 00:06:43,800
position of the theta inverse

143
00:06:40,500 --> 00:06:46,860
with the sbox so we just swapped them we

144
00:06:43,800 --> 00:06:52,170
then have to apply this permutation also

145
00:06:46,860 --> 00:06:54,420
in the key and now if the théâtre

146
00:06:52,170 --> 00:06:59,460
commutes with the matrix M we can also

147
00:06:54,420 --> 00:07:03,000
swap the position of the mix layer and

148
00:06:59,460 --> 00:07:04,799
the permutation here and then we can see

149
00:07:03,000 --> 00:07:06,420
okay we have a theta and then apply

150
00:07:04,800 --> 00:07:09,300
theta inverse so it just becomes the

151
00:07:06,420 --> 00:07:14,070
identity and we get the same cipher

152
00:07:09,300 --> 00:07:16,620
basically and we use this to define an

153
00:07:14,070 --> 00:07:19,050
equivalence relation so we say we have

154
00:07:16,620 --> 00:07:21,990
two permutations P and P Prime and they

155
00:07:19,050 --> 00:07:24,480
are M equivalent if such a theta exists

156
00:07:21,990 --> 00:07:27,360
with these properties and the nice

157
00:07:24,480 --> 00:07:29,520
conclusion from this is all permutations

158
00:07:27,360 --> 00:07:33,840
which I am equivalent will have the same

159
00:07:29,520 --> 00:07:35,460
number of active s boxes there's some

160
00:07:33,840 --> 00:07:37,169
drawback because we don't actually know

161
00:07:35,460 --> 00:07:39,960
how to test M equivalence between

162
00:07:37,169 --> 00:07:45,270
permutations so we have to go a few more

163
00:07:39,960 --> 00:07:47,880
steps and see how we can achieve this so

164
00:07:45,270 --> 00:07:49,320
what we did is we make the job a bit

165
00:07:47,880 --> 00:07:51,270
easier we first look at the weaker

166
00:07:49,320 --> 00:07:54,320
equivalence relation which we call weak

167
00:07:51,270 --> 00:07:57,750
mm equivalence the only difference is

168
00:07:54,320 --> 00:08:00,270
theta has now a structure so we say

169
00:07:57,750 --> 00:08:04,350
theta is composed of two permutations

170
00:08:00,270 --> 00:08:07,710
Phi and PI so pi only permutes the

171
00:08:04,350 --> 00:08:10,220
columns with each other and fire only

172
00:08:07,710 --> 00:08:14,039
permutes elements inside each column

173
00:08:10,220 --> 00:08:16,590
independently so if theta is of this

174
00:08:14,040 --> 00:08:21,570
form then two permutations are weak M

175
00:08:16,590 --> 00:08:23,840
equivalent we need one more tool so

176
00:08:21,570 --> 00:08:26,760
which we term you the structure matrix

177
00:08:23,840 --> 00:08:28,320
so we have figure it's probably easiest

178
00:08:26,760 --> 00:08:32,819
understood on an example so we have a

179
00:08:28,320 --> 00:08:34,110
example of a generic permutation so on

180
00:08:32,820 --> 00:08:35,820
the left you see the elements of the

181
00:08:34,110 --> 00:08:37,260
state on the right how they get per unit

182
00:08:35,820 --> 00:08:40,800
and this would be the structure matrix

183
00:08:37,260 --> 00:08:42,689
and the structure matrix shows you from

184
00:08:40,799 --> 00:08:44,599
which column how many elements can

185
00:08:42,690 --> 00:08:49,230
elements get moved to a different color

186
00:08:44,600 --> 00:08:52,050
so first column okay zero elements get

187
00:08:49,230 --> 00:08:54,160
moved to the first column one element

188
00:08:52,050 --> 00:08:55,990
gets moved to the second column

189
00:08:54,160 --> 00:09:00,610
zero to the third and three to the

190
00:08:55,990 --> 00:09:03,190
fourth another example in this case yeah

191
00:09:00,610 --> 00:09:05,800
the second column to go to the first

192
00:09:03,190 --> 00:09:09,940
column one to the second one to refer

193
00:09:05,800 --> 00:09:12,279
1002 that last column here they are

194
00:09:09,940 --> 00:09:15,610
distributed to all different columns so

195
00:09:12,279 --> 00:09:21,519
you get all ones and here again you can

196
00:09:15,610 --> 00:09:24,970
see there how it works basically so what

197
00:09:21,519 --> 00:09:26,560
we know shall show in our paper is that

198
00:09:24,970 --> 00:09:28,810
there's an efficient algorithm which can

199
00:09:26,560 --> 00:09:32,410
enumerate all the permutations up to M

200
00:09:28,810 --> 00:09:34,300
equivalents and I only give you a basic

201
00:09:32,410 --> 00:09:36,100
idea so if you want to have two details

202
00:09:34,300 --> 00:09:39,040
on an algorithm it's best to look it up

203
00:09:36,100 --> 00:09:41,709
in the paper but the ideas we can

204
00:09:39,040 --> 00:09:43,300
enumerate all these permutations up to

205
00:09:41,709 --> 00:09:45,399
this week M equivalents for given

206
00:09:43,300 --> 00:09:47,290
structure matrix and they are not too

207
00:09:45,399 --> 00:09:49,629
many valid structure matrices actually

208
00:09:47,290 --> 00:09:52,449
so if we consider four times four state

209
00:09:49,629 --> 00:09:55,509
there are only around 10,000 and some of

210
00:09:52,449 --> 00:09:59,349
them also have some symmetries and you

211
00:09:55,509 --> 00:10:01,930
can further reduce this number what we

212
00:09:59,350 --> 00:10:04,060
can do now is we can just pick one of

213
00:10:01,930 --> 00:10:05,769
the smallest representatives of each of

214
00:10:04,060 --> 00:10:11,500
this equivalence class and then carry

215
00:10:05,769 --> 00:10:13,600
out the crypt analysis on those so this

216
00:10:11,500 --> 00:10:15,759
still only gives us this week M

217
00:10:13,600 --> 00:10:18,040
equivalence so this kind of the obvious

218
00:10:15,759 --> 00:10:20,529
question then when does this week M

219
00:10:18,040 --> 00:10:24,730
equivalence actually imply M equivalence

220
00:10:20,529 --> 00:10:28,420
and there's a nice property on M which

221
00:10:24,730 --> 00:10:33,819
can be used to show this so if we take

222
00:10:28,420 --> 00:10:36,610
this matrix m and use it as a Chasen C

223
00:10:33,819 --> 00:10:40,209
matrix for graph we can test this graph

224
00:10:36,610 --> 00:10:42,309
for strong connectivity and if the graph

225
00:10:40,209 --> 00:10:47,459
is strongly connected then weak mmm

226
00:10:42,309 --> 00:10:47,459
equivalence will imply team equivalence

227
00:10:48,839 --> 00:10:53,500
in the paper we now use this approach to

228
00:10:51,519 --> 00:10:56,050
look at two ciphers so the first one is

229
00:10:53,500 --> 00:10:58,480
matauri with a light weight energy

230
00:10:56,050 --> 00:10:59,949
efficient cipher and it's probably the

231
00:10:58,480 --> 00:11:02,139
most obvious target because it

232
00:10:59,949 --> 00:11:05,139
introduced using this operator

233
00:11:02,139 --> 00:11:07,460
implementation so often you want the

234
00:11:05,139 --> 00:11:09,680
most structured permutation so you

235
00:11:07,460 --> 00:11:11,600
have some implementation advantages but

236
00:11:09,680 --> 00:11:13,729
also in hardware it doesn't matter

237
00:11:11,600 --> 00:11:17,360
because it's often if you do around

238
00:11:13,730 --> 00:11:20,450
based implementations just rewiring so

239
00:11:17,360 --> 00:11:25,610
question was is the permutation used in

240
00:11:20,450 --> 00:11:27,680
Vettori optimal so first yeah this

241
00:11:25,610 --> 00:11:30,920
mixcolumns used in Vitoria as I said

242
00:11:27,680 --> 00:11:32,449
before as a branch number four and the

243
00:11:30,920 --> 00:11:37,880
good thing is if we look at the graph

244
00:11:32,450 --> 00:11:41,140
opinion strongly connected so you can

245
00:11:37,880 --> 00:11:43,370
basically go from every edge here to

246
00:11:41,140 --> 00:11:47,870
every other edge and there's a path in

247
00:11:43,370 --> 00:11:50,540
both directions so it took a few days

248
00:11:47,870 --> 00:11:53,990
then to on a normal PC to find all these

249
00:11:50,540 --> 00:11:55,939
permutations up to M equivalence it

250
00:11:53,990 --> 00:12:00,320
turns out there are around to to 222

251
00:11:55,940 --> 00:12:02,120
classes so we then pick for each of

252
00:12:00,320 --> 00:12:05,720
these equivalence classes one candidate

253
00:12:02,120 --> 00:12:08,900
and try to determine the number of

254
00:12:05,720 --> 00:12:10,460
active s boxes so first we tried to say

255
00:12:08,900 --> 00:12:12,110
we've mixed integer linear programming

256
00:12:10,460 --> 00:12:15,670
but it turned out to be a bit too slow

257
00:12:12,110 --> 00:12:18,440
for running it on all these 222

258
00:12:15,670 --> 00:12:21,170
permutations so we then decided to

259
00:12:18,440 --> 00:12:24,080
implement some custom printing bound

260
00:12:21,170 --> 00:12:29,930
algorithm to do it faster but you can

261
00:12:24,080 --> 00:12:32,210
also find here so this is basically the

262
00:12:29,930 --> 00:12:33,770
summary of all our computation so I

263
00:12:32,210 --> 00:12:36,740
guess for full effect you should look

264
00:12:33,770 --> 00:12:39,230
into the paper and zoom in but just to

265
00:12:36,740 --> 00:12:41,090
show you the general picture so if you

266
00:12:39,230 --> 00:12:43,700
can spot that like a red line going

267
00:12:41,090 --> 00:12:45,320
through through all these other pluie

268
00:12:43,700 --> 00:12:49,040
and green lines so the red line is the

269
00:12:45,320 --> 00:12:51,860
original permutation the blue line are

270
00:12:49,040 --> 00:12:54,829
all permutations which at least optimal

271
00:12:51,860 --> 00:12:56,060
in one of the rounds and the green are

272
00:12:54,830 --> 00:12:58,660
then another random sample of

273
00:12:56,060 --> 00:12:58,660
permutations

274
00:13:02,990 --> 00:13:06,680
the main conclusion from this is well

275
00:13:05,180 --> 00:13:08,949
the original permutation is actually

276
00:13:06,680 --> 00:13:11,239
optimal up to 12 rounds

277
00:13:08,950 --> 00:13:14,150
except for nine rounds it seems an

278
00:13:11,240 --> 00:13:16,550
outlier here but for any higher number

279
00:13:14,150 --> 00:13:17,540
of round it is never hopped ml so when

280
00:13:16,550 --> 00:13:19,550
you look at the picture you will see

281
00:13:17,540 --> 00:13:22,910
there are lot of blue permutations on

282
00:13:19,550 --> 00:13:25,640
top of the red permutation but it's also

283
00:13:22,910 --> 00:13:27,949
mostly outside the number of rounds of

284
00:13:25,640 --> 00:13:30,920
Midori so maybe it doesn't matter too

285
00:13:27,950 --> 00:13:32,240
much in this case it's also quite

286
00:13:30,920 --> 00:13:34,699
interesting there's not a single

287
00:13:32,240 --> 00:13:36,920
permutation which really stands out here

288
00:13:34,700 --> 00:13:39,290
so a lot of the permutations they are

289
00:13:36,920 --> 00:13:41,959
better for some rounds so it really

290
00:13:39,290 --> 00:13:43,910
depends on what parameters use which

291
00:13:41,960 --> 00:13:50,660
permutation actually is the optimal one

292
00:13:43,910 --> 00:13:53,449
here we also show a nice proof in the

293
00:13:50,660 --> 00:13:56,150
paper which gives your easy to check

294
00:13:53,450 --> 00:13:59,390
condition on your permutation so if your

295
00:13:56,150 --> 00:14:00,949
permutation P P squared and P cube if

296
00:13:59,390 --> 00:14:03,770
they all have the structure all one

297
00:14:00,950 --> 00:14:08,800
structure matrix then you'll get at

298
00:14:03,770 --> 00:14:08,800
least 28 active s boxes over six rounds

299
00:14:10,930 --> 00:14:15,079
in the second example we looked at is

300
00:14:13,340 --> 00:14:19,190
the skinny block cipher which we also

301
00:14:15,080 --> 00:14:23,480
had a few times already so it uses a s

302
00:14:19,190 --> 00:14:26,150
shift rose and very sparse mix column so

303
00:14:23,480 --> 00:14:28,310
you only get a branch number of two and

304
00:14:26,150 --> 00:14:31,910
it's again an interesting choice here

305
00:14:28,310 --> 00:14:33,979
because the mix column seems very simple

306
00:14:31,910 --> 00:14:35,540
and the chief throws is a bit structured

307
00:14:33,980 --> 00:14:40,270
so maybe if you use a more generic

308
00:14:35,540 --> 00:14:40,270
permutation you could improve the bounds

309
00:14:41,530 --> 00:14:47,120
so we applied again this algorithm to

310
00:14:44,240 --> 00:14:49,700
find all the permutations all their

311
00:14:47,120 --> 00:14:52,160
equivalence classes but in the case of

312
00:14:49,700 --> 00:14:54,650
skinny it turned out they are quite a

313
00:14:52,160 --> 00:14:57,520
lot more so it's almost two to the forty

314
00:14:54,650 --> 00:15:00,079
equivalence classes here he already took

315
00:14:57,520 --> 00:15:06,710
24 CPU days to find all these

316
00:15:00,080 --> 00:15:08,540
equivalence classes so doing this

317
00:15:06,710 --> 00:15:11,600
cryptanalysis counting the active s

318
00:15:08,540 --> 00:15:12,980
boxes for all these to do the 40 then we

319
00:15:11,600 --> 00:15:14,650
probably would have submitted the paper

320
00:15:12,980 --> 00:15:18,590
only around now

321
00:15:14,650 --> 00:15:21,319
but we then decided to filter it a bit

322
00:15:18,590 --> 00:15:23,390
further so we reduced the permutations

323
00:15:21,320 --> 00:15:25,370
and only picked those permutations which

324
00:15:23,390 --> 00:15:28,970
have at least this good diffusion as the

325
00:15:25,370 --> 00:15:31,460
original one they're still around three

326
00:15:28,970 --> 00:15:34,040
million permutations left and it took

327
00:15:31,460 --> 00:15:38,080
roughly three thousand CPU days to test

328
00:15:34,040 --> 00:15:38,079
all of them with the Matsui algorithm

329
00:15:38,950 --> 00:15:44,930
we're getting it like this picture here

330
00:15:41,240 --> 00:15:47,660
so red line is again the original skinny

331
00:15:44,930 --> 00:15:50,209
permutation blue are all the

332
00:15:47,660 --> 00:15:52,490
permutations which are optimal in at

333
00:15:50,210 --> 00:15:57,050
least one of the rounds and green is a

334
00:15:52,490 --> 00:15:58,220
random sample of 10,000 permutations and

335
00:15:57,050 --> 00:16:00,680
we can see are quite clearly and

336
00:15:58,220 --> 00:16:04,070
actually the skinny permutation even

337
00:16:00,680 --> 00:16:05,449
though it's quite structured it holds up

338
00:16:04,070 --> 00:16:08,840
quite well and it doesn't make too much

339
00:16:05,450 --> 00:16:13,480
difference if you loosen this

340
00:16:08,840 --> 00:16:13,480
restriction to only operate on the rows

341
00:16:16,540 --> 00:16:21,079
so to summarize I think paper gives a

342
00:16:19,400 --> 00:16:23,689
likewise nice theoretically

343
00:16:21,080 --> 00:16:26,840
understanding of how these permutations

344
00:16:23,690 --> 00:16:29,930
behave how they influence the number of

345
00:16:26,840 --> 00:16:33,160
active S boxes and it's especially a

346
00:16:29,930 --> 00:16:35,089
finger useful design for any future

347
00:16:33,160 --> 00:16:37,839
designers if you want to make a new

348
00:16:35,090 --> 00:16:41,240
design you should maybe look at this and

349
00:16:37,840 --> 00:16:44,030
it's often actually feasible to test the

350
00:16:41,240 --> 00:16:45,620
full design space so if you have a 4 x 4

351
00:16:44,030 --> 00:16:48,650
state there's a very good chance you can

352
00:16:45,620 --> 00:16:54,680
actually find the best permutation for

353
00:16:48,650 --> 00:16:56,890
your design this concludes my talk so if

354
00:16:54,680 --> 00:17:01,270
there are any questions feel free to ask

355
00:16:56,890 --> 00:17:01,270
thank you thank you very much

356
00:17:03,280 --> 00:17:09,280
any questions for Stefan just one here

357
00:17:06,980 --> 00:17:09,280
the front

358
00:17:16,810 --> 00:17:25,190
yeah so assuming you fix some arbitrary

359
00:17:21,319 --> 00:17:27,430
key schedule or even don't put some do

360
00:17:25,190 --> 00:17:30,620
the same kind of thing to evaluate

361
00:17:27,430 --> 00:17:33,340
security for reality model yeah we

362
00:17:30,620 --> 00:17:35,510
didn't include the related key so the

363
00:17:33,340 --> 00:17:37,340
problem is really probably that your

364
00:17:35,510 --> 00:17:40,629
search is going to be much more

365
00:17:37,340 --> 00:17:43,970
expensive for the activist box count so

366
00:17:40,630 --> 00:17:46,280
yeah but it's my drinking an exhaustive

367
00:17:43,970 --> 00:17:48,460
search yeah you still have to do for

368
00:17:46,280 --> 00:17:52,520
each of the equivalence classes here the

369
00:17:48,460 --> 00:17:54,650
test on the active s boxes so if we can

370
00:17:52,520 --> 00:18:03,530
do that efficiently then it might be

371
00:17:54,650 --> 00:18:06,920
possible okay thank you more questions

372
00:18:03,530 --> 00:18:10,149
so I have a question would it make sense

373
00:18:06,920 --> 00:18:12,500
for the best choices to then look for

374
00:18:10,150 --> 00:18:14,270
characteristics or even differentials to

375
00:18:12,500 --> 00:18:16,220
find out whether it is really also

376
00:18:14,270 --> 00:18:20,270
active s box is a good indication for

377
00:18:16,220 --> 00:18:22,760
the best attacks so that's I think quite

378
00:18:20,270 --> 00:18:23,960
difficult to evaluate for the es like

379
00:18:22,760 --> 00:18:26,990
ciphers because you have this strong

380
00:18:23,960 --> 00:18:29,330
alignment to really say this permutation

381
00:18:26,990 --> 00:18:32,300
is better than the others in this

382
00:18:29,330 --> 00:18:34,429
differential setting so think that might

383
00:18:32,300 --> 00:18:37,220
be at the moment I don't think we have

384
00:18:34,430 --> 00:18:40,460
such good tools to evaluate these

385
00:18:37,220 --> 00:18:41,960
properties for a s like ciphers and it

386
00:18:40,460 --> 00:18:45,530
might not be feasible to do this for all

387
00:18:41,960 --> 00:18:47,690
the permutations but only for the best

388
00:18:45,530 --> 00:18:50,899
ones you find for the best box you can

389
00:18:47,690 --> 00:18:52,490
of course do that there yeah and what

390
00:18:50,900 --> 00:18:54,560
about other attacks like scarlet

391
00:18:52,490 --> 00:18:56,660
actually depend on the permutation or is

392
00:18:54,560 --> 00:18:58,760
this orthogonal it depends on the

393
00:18:56,660 --> 00:19:01,400
structural ethic of course so for some

394
00:18:58,760 --> 00:19:03,440
it's it's probably a good so the nice

395
00:19:01,400 --> 00:19:04,880
thing is also you can pick the

396
00:19:03,440 --> 00:19:07,250
permutation which is best in his

397
00:19:04,880 --> 00:19:09,020
equivalence class then you could also

398
00:19:07,250 --> 00:19:11,300
generate all this permutation in this

399
00:19:09,020 --> 00:19:13,760
equivalence class and then check those

400
00:19:11,300 --> 00:19:17,389
again as the second filter against the

401
00:19:13,760 --> 00:19:18,740
structural attacks also for if you want

402
00:19:17,390 --> 00:19:20,840
to do efficient implementations you

403
00:19:18,740 --> 00:19:22,400
could also do that you just test one in

404
00:19:20,840 --> 00:19:27,100
the equivalent class and then test other

405
00:19:22,400 --> 00:19:27,100
texts and implementation properties

406
00:19:27,620 --> 00:19:32,100
okay if there's no more questions please

407
00:19:29,820 --> 00:19:33,169
join me in thanking Stefan forestock

408
00:19:32,100 --> 00:19:39,139
thank you very much

409
00:19:33,170 --> 00:19:39,140
[Applause]

