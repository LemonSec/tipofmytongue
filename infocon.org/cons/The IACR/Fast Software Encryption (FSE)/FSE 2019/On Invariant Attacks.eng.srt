1
00:00:00,089 --> 00:00:05,700
welcome to the first mighty talk of FEC

2
00:00:03,149 --> 00:00:06,540
this year we are happy to have Kakinada

3
00:00:05,700 --> 00:00:07,980
here

4
00:00:06,540 --> 00:00:10,530
sorry guys man known for his

5
00:00:07,980 --> 00:00:14,250
contributions to symmetric cryptography

6
00:00:10,530 --> 00:00:15,838
in particular that led photography he's

7
00:00:14,250 --> 00:00:19,020
the co design of many electric block

8
00:00:15,839 --> 00:00:22,830
ciphers like present prints or recently

9
00:00:19,020 --> 00:00:37,349
skinny however this time we will speak

10
00:00:22,830 --> 00:00:40,410
how to analyze the ciphers and I'm going

11
00:00:37,350 --> 00:00:42,270
to talk about the text that's based on a

12
00:00:40,410 --> 00:00:45,809
series of works that we published since

13
00:00:42,270 --> 00:00:48,270
the last five six years and so I

14
00:00:45,809 --> 00:00:51,570
mentioned many people here probably I

15
00:00:48,270 --> 00:00:54,270
forgot something it's it's louder it's

16
00:00:51,570 --> 00:00:57,030
probably I forgot some I'm sorry for

17
00:00:54,270 --> 00:01:00,690
this but so it's not only my work but it

18
00:00:57,030 --> 00:01:02,160
started with many other people I already

19
00:01:00,690 --> 00:01:03,660
gave this talk several times

20
00:01:02,160 --> 00:01:04,949
similar talks in several times so I had

21
00:01:03,660 --> 00:01:07,560
the impression maybe it's boring for

22
00:01:04,949 --> 00:01:11,880
some of you might have seen previous

23
00:01:07,560 --> 00:01:13,979
editions so I try to have to add a few

24
00:01:11,880 --> 00:01:15,810
new things I don't have breakthrough new

25
00:01:13,979 --> 00:01:18,960
results that I'm going to present I'm

26
00:01:15,810 --> 00:01:23,759
going to add I added three insider

27
00:01:18,960 --> 00:01:25,619
information that maybe at least I think

28
00:01:23,759 --> 00:01:28,470
nobody except the people I mentioned

29
00:01:25,619 --> 00:01:30,119
should know about this so maybe there's

30
00:01:28,470 --> 00:01:34,979
something new for for everybody

31
00:01:30,119 --> 00:01:37,200
I hope so the idea is I'm going to work

32
00:01:34,979 --> 00:01:38,390
on the explain about this in oriented

33
00:01:37,200 --> 00:01:40,500
text and I'm going to start with

34
00:01:38,390 --> 00:01:42,540
introduction the general problem the

35
00:01:40,500 --> 00:01:44,189
general setup and then start with the

36
00:01:42,540 --> 00:01:46,799
first version which was this invariant

37
00:01:44,189 --> 00:01:48,119
subspace the text which we developed and

38
00:01:46,799 --> 00:01:50,909
then the generalization which is

39
00:01:48,119 --> 00:01:53,399
non-linear attack and then finally i'm

40
00:01:50,909 --> 00:01:55,799
going to to explain how you could

41
00:01:53,399 --> 00:01:57,750
potentially avoid these attacks in the

42
00:01:55,799 --> 00:02:00,270
future and we will see if this works out

43
00:01:57,750 --> 00:02:01,770
in one of the insider takes insider

44
00:02:00,270 --> 00:02:05,490
information says maybe it's not so easy

45
00:02:01,770 --> 00:02:10,049
as we were hoping okay

46
00:02:05,490 --> 00:02:12,700
so Florian mentioned I worked a lot on a

47
00:02:10,050 --> 00:02:15,490
lightweight ciphers and

48
00:02:12,700 --> 00:02:17,530
I think one of so there's of course the

49
00:02:15,490 --> 00:02:20,080
impact that this might be more efficient

50
00:02:17,530 --> 00:02:21,520
and nice and whatever but I think that

51
00:02:20,080 --> 00:02:23,020
one of the real impacts of this life

52
00:02:21,520 --> 00:02:25,600
right crypto we have many proposals that

53
00:02:23,020 --> 00:02:27,100
probably will never be used many of them

54
00:02:25,600 --> 00:02:29,079
are mine and probably none of them will

55
00:02:27,100 --> 00:02:30,609
ever be used in practice but what I

56
00:02:29,080 --> 00:02:32,770
think is nice from this lightweight

57
00:02:30,610 --> 00:02:36,610
crypto is that we really focused on

58
00:02:32,770 --> 00:02:38,200
designs which are reduced so everything

59
00:02:36,610 --> 00:02:40,660
that is not really needed for security

60
00:02:38,200 --> 00:02:42,970
is thrown away and in a way this tells

61
00:02:40,660 --> 00:02:46,000
us or maybe tells us not how not to

62
00:02:42,970 --> 00:02:47,530
design ciphers the data cube so I think

63
00:02:46,000 --> 00:02:50,890
this is one nice inside of all this

64
00:02:47,530 --> 00:02:52,480
lightweight trend that we in deadly had

65
00:02:50,890 --> 00:02:54,730
in recent years and from this

66
00:02:52,480 --> 00:02:58,119
perspective I think that NIST at least

67
00:02:54,730 --> 00:02:59,980
for the research made not good favor to

68
00:02:58,120 --> 00:03:02,050
us by saying that they want only well

69
00:02:59,980 --> 00:03:04,600
understood designs which means all these

70
00:03:02,050 --> 00:03:07,630
nice new designs that get broken and we

71
00:03:04,600 --> 00:03:09,670
understand more this is maybe not not

72
00:03:07,630 --> 00:03:12,070
going to happen with NIST but then again

73
00:03:09,670 --> 00:03:14,470
I'm not sure that all the people listen

74
00:03:12,070 --> 00:03:17,620
to this all the designers I know some

75
00:03:14,470 --> 00:03:21,070
including myself we didn't take this to

76
00:03:17,620 --> 00:03:23,560
series so so I hope there are some new

77
00:03:21,070 --> 00:03:26,200
ideas also there okay

78
00:03:23,560 --> 00:03:28,480
so I'm mainly focusing because this is

79
00:03:26,200 --> 00:03:30,970
all I know I'm going to focus on this

80
00:03:28,480 --> 00:03:33,160
key alternating ciphers so I'm talking

81
00:03:30,970 --> 00:03:34,750
about block ciphers where you have a

82
00:03:33,160 --> 00:03:38,799
round function in here for X or in

83
00:03:34,750 --> 00:03:41,650
between with with the round keys I think

84
00:03:38,799 --> 00:03:45,280
it may be a bold claim but I think many

85
00:03:41,650 --> 00:03:47,019
of these ideas take over to two other

86
00:03:45,280 --> 00:03:48,459
scenarios as well for example if you

87
00:03:47,019 --> 00:03:50,739
have password normally a non-linear

88
00:03:48,459 --> 00:03:52,390
layer may be faisal structures and many

89
00:03:50,739 --> 00:03:54,070
of these things can be adapted and also

90
00:03:52,390 --> 00:03:57,010
to cryptographic permutations that might

91
00:03:54,070 --> 00:03:59,980
also be relevant for those but I'm

92
00:03:57,010 --> 00:04:01,480
focusing on this menu in this case and

93
00:03:59,980 --> 00:04:04,030
I'm also not focusing too much on

94
00:04:01,480 --> 00:04:07,048
tweakable ciphers but also they are it's

95
00:04:04,030 --> 00:04:10,420
possible to adapt many of the results

96
00:04:07,049 --> 00:04:12,640
and even more to consider this case it

97
00:04:10,420 --> 00:04:14,589
will be especially at the very end of

98
00:04:12,640 --> 00:04:16,599
the talk it will play a role that how

99
00:04:14,590 --> 00:04:20,350
the round function is actually designed

100
00:04:16,600 --> 00:04:22,000
and I'll focus on this SP network where

101
00:04:20,350 --> 00:04:24,550
you have the each round function is

102
00:04:22,000 --> 00:04:25,300
composed of two layers one consists of

103
00:04:24,550 --> 00:04:27,490
small

104
00:04:25,300 --> 00:04:31,569
s-boxes and another one is a linear

105
00:04:27,490 --> 00:04:37,750
mapping of f2 to the N okay so so far I

106
00:04:31,569 --> 00:04:39,669
think that's very general and now one

107
00:04:37,750 --> 00:04:41,949
saying one of these things that happened

108
00:04:39,669 --> 00:04:44,378
in light-weight crypto in particular is

109
00:04:41,949 --> 00:04:46,840
that we don't have a key scheduling in

110
00:04:44,379 --> 00:04:49,090
many new designs is the key skeleton is

111
00:04:46,840 --> 00:04:54,359
gone and we use the same wrong keys or

112
00:04:49,090 --> 00:04:57,190
maybe alternating round keys and for for

113
00:04:54,360 --> 00:04:58,569
just derived from the master key and so

114
00:04:57,190 --> 00:04:59,979
the only thing we have is wrong

115
00:04:58,569 --> 00:05:01,360
constants too to make the rounds

116
00:04:59,979 --> 00:05:02,650
different because this is clearly it's

117
00:05:01,360 --> 00:05:04,870
something we need otherwise it's broken

118
00:05:02,650 --> 00:05:07,150
immediately so this is something that

119
00:05:04,870 --> 00:05:08,650
many of the ciphers happened this is

120
00:05:07,150 --> 00:05:11,229
also maybe one of the reasons why all

121
00:05:08,650 --> 00:05:12,818
this annoyances started yeah so if all

122
00:05:11,229 --> 00:05:14,710
these ciphers would have a bit more of a

123
00:05:12,819 --> 00:05:16,990
key scheduling none of these results

124
00:05:14,710 --> 00:05:18,669
would ever have baptising here so that's

125
00:05:16,990 --> 00:05:21,729
one of the things where where this

126
00:05:18,669 --> 00:05:25,210
minimizing is is nice because we kind of

127
00:05:21,729 --> 00:05:26,860
see things that we didn't see before is

128
00:05:25,210 --> 00:05:30,340
this a good idea to have this round

129
00:05:26,860 --> 00:05:32,259
connect Keys just identical up to a

130
00:05:30,340 --> 00:05:32,710
constant I think yeah you have to be

131
00:05:32,259 --> 00:05:34,810
careful

132
00:05:32,710 --> 00:05:37,029
that's basically what what all this work

133
00:05:34,810 --> 00:05:38,620
is about that if you do this you have to

134
00:05:37,029 --> 00:05:42,490
be careful in how you choose the

135
00:05:38,620 --> 00:05:46,150
constants and I said at the very end and

136
00:05:42,490 --> 00:05:47,800
we get some some ideas some conditions

137
00:05:46,150 --> 00:05:50,349
on how you should pick these constants

138
00:05:47,800 --> 00:05:52,419
often they're chosen in a very ad hoc

139
00:05:50,349 --> 00:05:54,520
way I know this from my designs as well

140
00:05:52,419 --> 00:05:56,349
the last thing you will do is okay

141
00:05:54,520 --> 00:05:57,669
we need some wrong constants and then at

142
00:05:56,349 --> 00:06:00,069
the last minute you write down some

143
00:05:57,669 --> 00:06:02,080
wrong constants that are very efficient

144
00:06:00,069 --> 00:06:06,310
to implement and sometimes this is this

145
00:06:02,080 --> 00:06:08,080
is not a good idea I mean it's good for

146
00:06:06,310 --> 00:06:13,120
me because I have all these publications

147
00:06:08,080 --> 00:06:14,948
but okay so you have to be aware of

148
00:06:13,120 --> 00:06:16,870
these symmetries and symmetries is

149
00:06:14,949 --> 00:06:19,719
basically a special case of this

150
00:06:16,870 --> 00:06:20,919
invariant subspace invariant subspaces

151
00:06:19,719 --> 00:06:22,300
in the generalization of these

152
00:06:20,919 --> 00:06:24,370
invariants so what you don't want for

153
00:06:22,300 --> 00:06:27,099
example just to give it easy example is

154
00:06:24,370 --> 00:06:28,150
that if you have a plaintext that where

155
00:06:27,099 --> 00:06:31,210
the first half and the second half

156
00:06:28,150 --> 00:06:32,888
identical and maybe you have a key which

157
00:06:31,210 --> 00:06:34,690
is also of this form first half of the

158
00:06:32,889 --> 00:06:36,550
master key is equal to the second half

159
00:06:34,690 --> 00:06:37,510
of the master key you don't want that

160
00:06:36,550 --> 00:06:40,330
all these

161
00:06:37,510 --> 00:06:42,370
encrypting any of these plaintext with

162
00:06:40,330 --> 00:06:44,109
any of these keys leads to ciphertext

163
00:06:42,370 --> 00:06:45,430
which also is symmetric in this way this

164
00:06:44,110 --> 00:06:47,350
is something you don't want because it's

165
00:06:45,430 --> 00:06:49,150
easy for at least for these wiki's to

166
00:06:47,350 --> 00:06:50,590
distinguish the the block cipher from a

167
00:06:49,150 --> 00:06:51,820
random permutation that's not going to

168
00:06:50,590 --> 00:06:53,950
happen for a random permutation with

169
00:06:51,820 --> 00:06:55,540
very high probability and so this is

170
00:06:53,950 --> 00:06:57,130
something you don't want and I think the

171
00:06:55,540 --> 00:06:59,230
right abstraction from this very

172
00:06:57,130 --> 00:07:02,020
concrete setting is that you talk about

173
00:06:59,230 --> 00:07:04,030
invariant subspaces yeah so why is it a

174
00:07:02,020 --> 00:07:06,070
subspace because you can write down

175
00:07:04,030 --> 00:07:07,599
linear equations source being symmetric

176
00:07:06,070 --> 00:07:09,310
is something you can characterize by

177
00:07:07,600 --> 00:07:11,620
writing down linear questions the first

178
00:07:09,310 --> 00:07:13,960
videos whatever bit and so on it's

179
00:07:11,620 --> 00:07:18,040
linear equations so generalizing this

180
00:07:13,960 --> 00:07:20,440
you end up in in a fine linear subspaces

181
00:07:18,040 --> 00:07:23,800
and then one more obstructionist I find

182
00:07:20,440 --> 00:07:27,580
subspaces so you don't want a subspace

183
00:07:23,800 --> 00:07:30,610
of plaintext encrypted under some we

184
00:07:27,580 --> 00:07:32,409
keystore had not been the same subspace

185
00:07:30,610 --> 00:07:34,060
for the ciphertext that would again not

186
00:07:32,410 --> 00:07:35,830
happen for random permutation so that's

187
00:07:34,060 --> 00:07:38,950
what's something we want to avoid

188
00:07:35,830 --> 00:07:40,900
so the question is nice do these things

189
00:07:38,950 --> 00:07:45,510
happen and actually here's a list of

190
00:07:40,900 --> 00:07:49,840
ciphers that get broken with variants of

191
00:07:45,510 --> 00:07:51,849
invariant subspace attacks so it may be

192
00:07:49,840 --> 00:07:53,440
it's not complete but it's also not the

193
00:07:51,850 --> 00:07:59,710
point the main point is that happens and

194
00:07:53,440 --> 00:08:02,920
I just to see a trend I asked the X to

195
00:07:59,710 --> 00:08:06,489
plot this oh this is going and I don't

196
00:08:02,920 --> 00:08:10,830
know what happened here so something

197
00:08:06,490 --> 00:08:13,660
tweaked and was fixed again for so time

198
00:08:10,830 --> 00:08:15,669
and then I also looked at okay how is

199
00:08:13,660 --> 00:08:17,980
this going to continue and in extra you

200
00:08:15,670 --> 00:08:20,640
can easily ask hey what is it what is

201
00:08:17,980 --> 00:08:27,370
the prediction for the future

202
00:08:20,640 --> 00:08:28,930
so there's 2020 we almost here we should

203
00:08:27,370 --> 00:08:33,039
see the lot of publication soon I think

204
00:08:28,930 --> 00:08:36,010
and that's for 2026 and we have 370

205
00:08:33,039 --> 00:08:37,059
ciphers being broken this so actually

206
00:08:36,010 --> 00:08:39,400
this invariant at Texas Motor

207
00:08:37,059 --> 00:08:43,500
interesting then quantum all this

208
00:08:39,400 --> 00:08:47,110
publicity that's that's the real threat

209
00:08:43,500 --> 00:08:49,000
we'll see if this happened okay and

210
00:08:47,110 --> 00:08:50,830
here's the first insider information I

211
00:08:49,000 --> 00:08:55,480
wanted to share which is something that

212
00:08:50,830 --> 00:08:56,020
we that we found by deciding designing

213
00:08:55,480 --> 00:08:57,960
pride

214
00:08:56,020 --> 00:09:05,160
so pride is decipher be designed for

215
00:08:57,960 --> 00:09:08,200
being optimized for being efficient on

216
00:09:05,160 --> 00:09:10,270
8-bit and 16-bit CPUs so embedded

217
00:09:08,200 --> 00:09:12,340
devices that run software and then try

218
00:09:10,270 --> 00:09:13,870
to be efficient on those so we tried in

219
00:09:12,340 --> 00:09:15,790
particular to find the linear layer

220
00:09:13,870 --> 00:09:18,760
which is very efficiently implemented on

221
00:09:15,790 --> 00:09:21,310
those devices and then three days before

222
00:09:18,760 --> 00:09:23,290
the submission I got this email from

223
00:09:21,310 --> 00:09:25,540
Benedict Gleason one of the courses it's

224
00:09:23,290 --> 00:09:27,880
in German I know but I wanted to keep it

225
00:09:25,540 --> 00:09:30,730
authentic so this is the email I got it

226
00:09:27,880 --> 00:09:33,580
says so this is from him to me

227
00:09:30,730 --> 00:09:36,010
Detroit the subject is pride test

228
00:09:33,580 --> 00:09:37,270
vectors so you just because we need this

229
00:09:36,010 --> 00:09:38,920
in the submission you compute the test

230
00:09:37,270 --> 00:09:41,590
vectors and then he asked is this a

231
00:09:38,920 --> 00:09:45,760
problem to to be if there's something to

232
00:09:41,590 --> 00:09:47,170
be worried about computed and then the

233
00:09:45,760 --> 00:09:50,560
point is in the ciphertext there are all

234
00:09:47,170 --> 00:09:54,400
these zeros and I first replied no no I

235
00:09:50,560 --> 00:09:57,459
guess that's a coincidence but then I

236
00:09:54,400 --> 00:09:58,810
said maybe think about for a second time

237
00:09:57,460 --> 00:10:00,340
and then of course it turns out this is

238
00:09:58,810 --> 00:10:03,910
this is an example of an invariant

239
00:10:00,340 --> 00:10:07,450
subspace and that we fixed just in time

240
00:10:03,910 --> 00:10:09,579
so it's good for pride that this was

241
00:10:07,450 --> 00:10:10,930
three days before but actually if you

242
00:10:09,580 --> 00:10:13,900
look at the prediction what's going to

243
00:10:10,930 --> 00:10:15,489
happen so the point being if what would

244
00:10:13,900 --> 00:10:18,340
happen if he would not have found this

245
00:10:15,490 --> 00:10:21,060
then right would be broken of course yes

246
00:10:18,340 --> 00:10:23,430
so this is why this line

247
00:10:21,060 --> 00:10:24,660
if you would not have fixed it and now

248
00:10:23,430 --> 00:10:26,540
the interesting thing is what happens if

249
00:10:24,660 --> 00:10:31,680
you do the same prediction is before me

250
00:10:26,540 --> 00:10:34,620
and actually so and this means because

251
00:10:31,680 --> 00:10:36,439
we fixed pride hundred other ciphers

252
00:10:34,620 --> 00:10:39,150
will be broken

253
00:10:36,440 --> 00:10:41,610
sometimes you is this butterfly singing

254
00:10:39,150 --> 00:10:43,530
and sometimes you will do changes and

255
00:10:41,610 --> 00:10:46,380
it's unclear you are not aware of the

256
00:10:43,530 --> 00:10:47,640
effects so that's the first inside

257
00:10:46,380 --> 00:10:52,650
information

258
00:10:47,640 --> 00:10:57,060
I'm sorry for this ok good ok let's get

259
00:10:52,650 --> 00:10:59,430
a bit more into into details and so the

260
00:10:57,060 --> 00:11:02,489
first invariant subspace attack that

261
00:10:59,430 --> 00:11:04,739
that was published under this name was

262
00:11:02,490 --> 00:11:08,220
an attack on this print cipher but

263
00:11:04,740 --> 00:11:10,320
actually there are a previous text in

264
00:11:08,220 --> 00:11:13,290
the same way where basically the main

265
00:11:10,320 --> 00:11:14,970
why they are not so where they not did

266
00:11:13,290 --> 00:11:17,069
not became so popular as maybe because

267
00:11:14,970 --> 00:11:19,380
they were missing the targets so

268
00:11:17,070 --> 00:11:21,360
petitioning attack is something

269
00:11:19,380 --> 00:11:23,400
petitioning cryptanalysis is something

270
00:11:21,360 --> 00:11:26,010
that is a general form of invariant

271
00:11:23,400 --> 00:11:28,079
subspace attacks and also non linear

272
00:11:26,010 --> 00:11:32,160
approximation was was there before and

273
00:11:28,080 --> 00:11:34,830
also could not really find enough

274
00:11:32,160 --> 00:11:37,920
targets to to become as visible as it

275
00:11:34,830 --> 00:11:39,300
should have been so this is the attack

276
00:11:37,920 --> 00:11:42,569
on on prints effort just to give you an

277
00:11:39,300 --> 00:11:45,329
idea of how these things look like so

278
00:11:42,570 --> 00:11:47,520
this is Prince Haifa looks a bit like

279
00:11:45,330 --> 00:11:51,420
present see maybe not the coincidence

280
00:11:47,520 --> 00:11:53,250
and so what happens if you fix I hope

281
00:11:51,420 --> 00:11:55,290
it's visible if you fix some of these

282
00:11:53,250 --> 00:11:58,460
bits to 0 and 1 this is the input for

283
00:11:55,290 --> 00:12:01,589
one round and you also fix some bits in

284
00:11:58,460 --> 00:12:03,000
the key which is exhort and you

285
00:12:01,590 --> 00:12:05,100
carefully check then you will see that

286
00:12:03,000 --> 00:12:08,010
this is the same thing after one round

287
00:12:05,100 --> 00:12:09,080
as the input so the input and the output

288
00:12:08,010 --> 00:12:11,730
of one round

289
00:12:09,080 --> 00:12:13,410
they share the same linear equation so I

290
00:12:11,730 --> 00:12:15,210
find equations and then because it's

291
00:12:13,410 --> 00:12:18,120
iterative you it's going to work through

292
00:12:15,210 --> 00:12:19,830
the whole siphon this is actually one

293
00:12:18,120 --> 00:12:21,780
example of an invariant detectors to

294
00:12:19,830 --> 00:12:23,370
have it more concrete to to get a bit an

295
00:12:21,780 --> 00:12:24,930
idea what what this means this is

296
00:12:23,370 --> 00:12:30,030
oriented X so this is how it could look

297
00:12:24,930 --> 00:12:31,829
like in a in a cipher so that leads to a

298
00:12:30,030 --> 00:12:32,110
probability one distinguisher for the

299
00:12:31,830 --> 00:12:34,989
whole

300
00:12:32,110 --> 00:12:37,269
or cypher and if you do the counting

301
00:12:34,989 --> 00:12:40,290
it's 250 out of these two to the 80 keys

302
00:12:37,269 --> 00:12:44,079
a week so that's I think significant and

303
00:12:40,290 --> 00:12:45,429
then the abstraction is that okay what

304
00:12:44,079 --> 00:12:51,008
actually happened is that we have a

305
00:12:45,429 --> 00:12:53,139
subspace you linear subspace and the

306
00:12:51,009 --> 00:12:55,869
constant a sum which makes it an affine

307
00:12:53,139 --> 00:12:59,350
subspace that's mapped under the round

308
00:12:55,869 --> 00:13:01,420
function to sum to Co set to a different

309
00:12:59,350 --> 00:13:03,670
core set so different translation of the

310
00:13:01,420 --> 00:13:07,540
same subspace and then if you have a key

311
00:13:03,670 --> 00:13:10,329
which is kind of pushing this different

312
00:13:07,540 --> 00:13:14,790
subspace again back to the to the origin

313
00:13:10,329 --> 00:13:17,349
then it becomes iterative and will work

314
00:13:14,790 --> 00:13:20,410
for the rods and this is this is one of

315
00:13:17,350 --> 00:13:22,119
the cases where it's really easy it

316
00:13:20,410 --> 00:13:24,040
really helps if all the wrong keys are

317
00:13:22,119 --> 00:13:26,350
the same because this is a linear

318
00:13:24,040 --> 00:13:28,540
equation which has to be so this is a

319
00:13:26,350 --> 00:13:31,089
linear conditions for a find conditions

320
00:13:28,540 --> 00:13:33,759
for all wrong keys and if you have

321
00:13:31,089 --> 00:13:35,410
different drunkies these equations would

322
00:13:33,759 --> 00:13:37,720
add up and probably you would end up

323
00:13:35,410 --> 00:13:39,939
with only 1 or 0 keys that fulfill all

324
00:13:37,720 --> 00:13:44,230
these equations but because all the

325
00:13:39,939 --> 00:13:46,839
round keys are the same you do not get

326
00:13:44,230 --> 00:13:48,730
any additional equations and if one

327
00:13:46,839 --> 00:13:52,779
wrong key fulfills these equations or

328
00:13:48,730 --> 00:13:54,369
the wrong keys ok so the next question

329
00:13:52,779 --> 00:13:55,660
was basically how to detect it

330
00:13:54,369 --> 00:13:58,179
automatically you know so for prints

331
00:13:55,660 --> 00:14:01,569
ever be released at at the blackboard

332
00:13:58,179 --> 00:14:04,689
for a long time and somehow we saw this

333
00:14:01,569 --> 00:14:05,878
knitted we finally found this attack and

334
00:14:04,689 --> 00:14:08,769
the question is how can we do it

335
00:14:05,879 --> 00:14:13,629
automatically so it was the next thing

336
00:14:08,769 --> 00:14:19,149
and briefly explained how to detect

337
00:14:13,629 --> 00:14:21,129
those things automatically so this is

338
00:14:19,149 --> 00:14:22,360
same thing in the picture and I'll use

339
00:14:21,129 --> 00:14:26,619
the picture also to explain this

340
00:14:22,360 --> 00:14:29,139
algorithm so we have the whole thing is

341
00:14:26,619 --> 00:14:32,139
the space of all possible states of the

342
00:14:29,139 --> 00:14:33,759
cipher and then we have a fine subspace

343
00:14:32,139 --> 00:14:36,819
which under the round function is mapped

344
00:14:33,759 --> 00:14:38,259
to an affine subspace and a co set of

345
00:14:36,819 --> 00:14:39,519
the same subspace and then the key

346
00:14:38,259 --> 00:14:43,029
addition is going to put it back and

347
00:14:39,519 --> 00:14:44,350
it's iterative same thing as on the

348
00:14:43,029 --> 00:14:49,780
slide before just to repeat

349
00:14:44,350 --> 00:14:50,830
so and the idea of of how to detect

350
00:14:49,780 --> 00:14:56,079
these things automatically

351
00:14:50,830 --> 00:14:58,180
and was published in 2015 and the idea

352
00:14:56,080 --> 00:15:02,470
is relatively simple I think you you try

353
00:14:58,180 --> 00:15:04,989
to guess a subspace subset of these of

354
00:15:02,470 --> 00:15:07,000
these ingredient subspace and then try

355
00:15:04,990 --> 00:15:10,060
to discover those also in the picture

356
00:15:07,000 --> 00:15:11,770
how it works so the idea is I have this

357
00:15:10,060 --> 00:15:14,170
round function and the nice thing about

358
00:15:11,770 --> 00:15:16,030
this algorithm is it's very generic yeah

359
00:15:14,170 --> 00:15:18,760
so no matter what your round function is

360
00:15:16,030 --> 00:15:20,800
it could be it could be anything you

361
00:15:18,760 --> 00:15:22,150
just need an efficient implementation of

362
00:15:20,800 --> 00:15:24,010
the round function and it's inverse and

363
00:15:22,150 --> 00:15:26,050
you can run this run this attack the bad

364
00:15:24,010 --> 00:15:30,000
thing is it's not efficient but it's

365
00:15:26,050 --> 00:15:33,219
very generic so what you do is you guess

366
00:15:30,000 --> 00:15:35,110
few elements in the state space and you

367
00:15:33,220 --> 00:15:37,930
hope that all these elements that you

368
00:15:35,110 --> 00:15:40,870
guess that actually inside inside the

369
00:15:37,930 --> 00:15:42,819
invariant subspace if this is the case

370
00:15:40,870 --> 00:15:44,350
you're going just to map all these

371
00:15:42,820 --> 00:15:46,870
elements with the function f and you're

372
00:15:44,350 --> 00:15:48,490
going to get some set here but because

373
00:15:46,870 --> 00:15:50,920
you're looking you're trying to find an

374
00:15:48,490 --> 00:15:52,690
invariant subspace you know if this is

375
00:15:50,920 --> 00:15:55,000
correct then this all these set should

376
00:15:52,690 --> 00:15:57,040
also be in within this invariant

377
00:15:55,000 --> 00:15:59,560
subspace and because it's it's closed

378
00:15:57,040 --> 00:16:03,130
under taking linear and it's a subspace

379
00:15:59,560 --> 00:16:06,459
so also the subspace spanned by this set

380
00:16:03,130 --> 00:16:09,220
should be again contained in the and the

381
00:16:06,460 --> 00:16:12,790
invariant subspace so the picture I hope

382
00:16:09,220 --> 00:16:14,530
it's clear if I draw some rectangle it's

383
00:16:12,790 --> 00:16:17,530
supposed to be a subspace and if it

384
00:16:14,530 --> 00:16:19,600
looks Bo it's just a set okay so this

385
00:16:17,530 --> 00:16:23,199
this thing is to supposed to be the

386
00:16:19,600 --> 00:16:24,730
linear span of this set and then you

387
00:16:23,200 --> 00:16:27,550
have more elements and and you map them

388
00:16:24,730 --> 00:16:30,250
back and you get another set and again

389
00:16:27,550 --> 00:16:32,500
you look at the linear span spend by all

390
00:16:30,250 --> 00:16:34,600
these elements and you continue doing so

391
00:16:32,500 --> 00:16:36,610
and now if your guess was correct

392
00:16:34,600 --> 00:16:40,030
the point is that this is going to be

393
00:16:36,610 --> 00:16:43,240
stabilized at some point and it will not

394
00:16:40,030 --> 00:16:45,730
add any more elements when you do this

395
00:16:43,240 --> 00:16:47,320
computing the linear the linear span of

396
00:16:45,730 --> 00:16:50,290
this at some point if we stabilize and

397
00:16:47,320 --> 00:16:51,790
and you found your your sub space so

398
00:16:50,290 --> 00:16:55,689
that's relatively easy and if your guess

399
00:16:51,790 --> 00:16:57,199
is incorrect then you just it will

400
00:16:55,690 --> 00:16:58,760
stabilize when you have the full space

401
00:16:57,200 --> 00:17:00,530
because of course the full space is

402
00:16:58,760 --> 00:17:02,510
ingredient but this is trivial it not

403
00:17:00,530 --> 00:17:03,709
helpful for anything and but this is

404
00:17:02,510 --> 00:17:05,930
what what happened what's going to

405
00:17:03,710 --> 00:17:09,890
happen so that's relatively efficient

406
00:17:05,930 --> 00:17:12,140
you have to it's given one guess it's

407
00:17:09,890 --> 00:17:14,089
relatively efficient to do this mapping

408
00:17:12,140 --> 00:17:15,530
back and forth so you're not going to

409
00:17:14,089 --> 00:17:17,359
map the full set all the time it's just

410
00:17:15,530 --> 00:17:18,949
some random elements and you have to be

411
00:17:17,359 --> 00:17:20,958
a bit careful with those probabilities

412
00:17:18,949 --> 00:17:24,170
that you're going to do you take wrong

413
00:17:20,959 --> 00:17:30,290
things but it's it's easy to implement

414
00:17:24,170 --> 00:17:30,590
them so the bad thing is the running

415
00:17:30,290 --> 00:17:32,960
time

416
00:17:30,590 --> 00:17:35,860
so if I have block length N and I want

417
00:17:32,960 --> 00:17:38,330
to detect something of dimension D then

418
00:17:35,860 --> 00:17:41,870
because I have to guess at least a two

419
00:17:38,330 --> 00:17:44,210
dimensional space otherwise I don't have

420
00:17:41,870 --> 00:17:45,649
any linear attitude to form so I have to

421
00:17:44,210 --> 00:17:47,900
get two elements in the space and I have

422
00:17:45,650 --> 00:17:50,030
to guess in a third element which is the

423
00:17:47,900 --> 00:17:51,560
offset which means I have to get three

424
00:17:50,030 --> 00:17:54,230
basically three elements in the space

425
00:17:51,560 --> 00:17:55,460
and the probability for one of them for

426
00:17:54,230 --> 00:17:58,820
an element to be in the space of

427
00:17:55,460 --> 00:18:02,240
dimension D is 2 to the D minus N and

428
00:17:58,820 --> 00:18:05,120
then I need these three times and then

429
00:18:02,240 --> 00:18:06,560
the expected running time is this is the

430
00:18:05,120 --> 00:18:09,290
expected number of guesses I have to do

431
00:18:06,560 --> 00:18:11,960
2 to the 3 times n minus T so even if n

432
00:18:09,290 --> 00:18:13,639
is small if you have a small block

433
00:18:11,960 --> 00:18:15,050
cipher of small dimensions let's say 64

434
00:18:13,640 --> 00:18:17,690
bits and you are looking for a really

435
00:18:15,050 --> 00:18:19,220
high dimensional thing let's say 30

436
00:18:17,690 --> 00:18:25,280
two-dimensional invariant subspace

437
00:18:19,220 --> 00:18:28,760
that's a lot three times 32 which is 96

438
00:18:25,280 --> 00:18:31,790
maybe yeah and it's 2 to the 96 that's

439
00:18:28,760 --> 00:18:34,790
nothing you can do so one thing is you

440
00:18:31,790 --> 00:18:35,990
as I said this is mostly interesting for

441
00:18:34,790 --> 00:18:37,700
the case where the wrong keys are

442
00:18:35,990 --> 00:18:40,880
identical and you only had brought

443
00:18:37,700 --> 00:18:42,830
constants and then you want this

444
00:18:40,880 --> 00:18:44,330
subspace to be invariant of all these

445
00:18:42,830 --> 00:18:47,179
rounds meaning for all these different

446
00:18:44,330 --> 00:18:49,520
round constants so actually it's right

447
00:18:47,180 --> 00:18:52,010
to see and I'll explain something

448
00:18:49,520 --> 00:18:53,210
similar later in more detail that all

449
00:18:52,010 --> 00:18:55,400
the wrong constants have to be in this

450
00:18:53,210 --> 00:18:57,230
space and this means the only thing

451
00:18:55,400 --> 00:18:59,270
you're left that you have to guess is

452
00:18:57,230 --> 00:19:01,160
actually this offset so which reduces

453
00:18:59,270 --> 00:19:02,690
the running time from getting three

454
00:19:01,160 --> 00:19:05,930
elements to getting one element

455
00:19:02,690 --> 00:19:07,820
correctly and now okay for this case

456
00:19:05,930 --> 00:19:10,950
that I just mentioned 64-bit the block

457
00:19:07,820 --> 00:19:13,659
size 32 dimensional space this is a fish

458
00:19:10,950 --> 00:19:15,370
it will detect something it's still not

459
00:19:13,660 --> 00:19:19,240
satisfactory because for many

460
00:19:15,370 --> 00:19:25,750
applications it's not it's not it's not

461
00:19:19,240 --> 00:19:30,400
good enough so then lunch is later ok

462
00:19:25,750 --> 00:19:33,520
explain I will explain one application

463
00:19:30,400 --> 00:19:35,560
to give you another application of how

464
00:19:33,520 --> 00:19:38,020
this subspace could look so this is

465
00:19:35,560 --> 00:19:42,220
Robin an ice-cream which are ciphers

466
00:19:38,020 --> 00:19:44,050
that following this LS design which i

467
00:19:42,220 --> 00:19:45,640
think is a very nice approach to to

468
00:19:44,050 --> 00:19:47,620
design efficient lightweight ciphers and

469
00:19:45,640 --> 00:19:50,140
the point here is that they are easy to

470
00:19:47,620 --> 00:19:52,689
mask so that's also where the name comes

471
00:19:50,140 --> 00:19:55,660
from robin is the small brother of

472
00:19:52,690 --> 00:20:02,470
batman and he wears a mask so this is

473
00:19:55,660 --> 00:20:06,670
where the mask it's not my idea so like

474
00:20:02,470 --> 00:20:09,220
this this each bit is 1 its squares one

475
00:20:06,670 --> 00:20:10,480
bit and you would store columns if you

476
00:20:09,220 --> 00:20:15,460
want to implement the cipher you would

477
00:20:10,480 --> 00:20:17,110
store columns in registers and so you

478
00:20:15,460 --> 00:20:19,570
have s boxes in linear layer and the

479
00:20:17,110 --> 00:20:21,580
idea is that S boxes work on rows so

480
00:20:19,570 --> 00:20:23,080
you'll have application of s boxes in

481
00:20:21,580 --> 00:20:25,510
this direction and then you will have

482
00:20:23,080 --> 00:20:27,790
linear layers in on the columns this is

483
00:20:25,510 --> 00:20:30,640
how the cipher works and then you will

484
00:20:27,790 --> 00:20:36,129
have wrong constants here in this case

485
00:20:30,640 --> 00:20:37,840
of some constants only on one register

486
00:20:36,130 --> 00:20:39,790
why only oh just that because it's more

487
00:20:37,840 --> 00:20:45,760
efficient to it X only to reduce that

488
00:20:39,790 --> 00:20:48,790
you save some some some instructions ok

489
00:20:45,760 --> 00:20:51,640
so and now if you run this algorithm

490
00:20:48,790 --> 00:20:55,240
that I just presented on this design it

491
00:20:51,640 --> 00:20:57,130
will actually very fast find this 2

492
00:20:55,240 --> 00:20:58,990
dimensional subspace and also for sorrow

493
00:20:57,130 --> 00:21:01,780
and you could do the segment it will

494
00:20:58,990 --> 00:21:05,050
also detect some some weaknesses and

495
00:21:01,780 --> 00:21:06,610
then it will detect the one problem is

496
00:21:05,050 --> 00:21:09,399
this automatic to list it will always

497
00:21:06,610 --> 00:21:11,620
detect the minimal invariant subspace

498
00:21:09,400 --> 00:21:13,060
because then it stabilizes and it's not

499
00:21:11,620 --> 00:21:14,320
going to find more but there's an

500
00:21:13,060 --> 00:21:16,590
attacker you are actually interested in

501
00:21:14,320 --> 00:21:17,860
finding the the largest subspace yeah

502
00:21:16,590 --> 00:21:19,209
but

503
00:21:17,860 --> 00:21:23,049
so there are it

504
00:21:19,210 --> 00:21:24,730
in work we're sitting down and sinking

505
00:21:23,049 --> 00:21:26,710
to understand why this happens and then

506
00:21:24,730 --> 00:21:28,659
most of the time you are able to to

507
00:21:26,710 --> 00:21:31,390
generalize and see what is the

508
00:21:28,659 --> 00:21:34,299
structural weakness that actually allows

509
00:21:31,390 --> 00:21:36,340
this subspace to be invariant so this is

510
00:21:34,299 --> 00:21:38,559
the reason this is the subsidized that

511
00:21:36,340 --> 00:21:39,220
happens in Robin is something in the

512
00:21:38,559 --> 00:21:41,770
icebox

513
00:21:39,220 --> 00:21:44,200
so it's an 8-bit s box and it maps those

514
00:21:41,770 --> 00:21:47,168
values to those values and it's the

515
00:21:44,200 --> 00:21:48,880
first certainly not so interesting the

516
00:21:47,169 --> 00:21:52,419
first thing is that these eight values

517
00:21:48,880 --> 00:21:54,640
are the same as these eight values so

518
00:21:52,419 --> 00:21:57,399
that's an invariant set and actually

519
00:21:54,640 --> 00:21:59,409
it's a subspace so zero is contained

520
00:21:57,399 --> 00:22:00,969
that's good for a subspace and then

521
00:21:59,409 --> 00:22:03,220
whenever you take two elements here and

522
00:22:00,970 --> 00:22:06,779
you add them it's going to be again in

523
00:22:03,220 --> 00:22:09,309
the set so this is actually one way of

524
00:22:06,779 --> 00:22:11,230
representing these eight values is the

525
00:22:09,309 --> 00:22:13,000
first bit can be anything

526
00:22:11,230 --> 00:22:15,909
then you've called the second bit a the

527
00:22:13,000 --> 00:22:18,010
set bit B then two zeros there's always

528
00:22:15,909 --> 00:22:20,470
a zero in the third and the fourth row

529
00:22:18,010 --> 00:22:22,270
then the FIR the second bit is repeated

530
00:22:20,470 --> 00:22:25,419
another zero and then the XOR of the two

531
00:22:22,270 --> 00:22:28,770
so that's one possible representation of

532
00:22:25,419 --> 00:22:34,270
this subspace which has dimension three

533
00:22:28,770 --> 00:22:37,120
three-dimensional for the S box okay now

534
00:22:34,270 --> 00:22:40,799
notice a B and for the output you get

535
00:22:37,120 --> 00:22:46,209
some alphabet it's different but it's

536
00:22:40,799 --> 00:22:48,789
the same structure okay so now we what

537
00:22:46,210 --> 00:22:51,010
you can do is you can put this structure

538
00:22:48,789 --> 00:22:53,590
in each of the columns so I'm going to

539
00:22:51,010 --> 00:22:55,570
put in some bit here another bit here

540
00:22:53,590 --> 00:22:57,100
I'm going to put two zeros here and then

541
00:22:55,570 --> 00:22:58,600
I'm going to repeat this bit another

542
00:22:57,100 --> 00:23:02,620
zero here and so on and I do this for

543
00:22:58,600 --> 00:23:05,168
the rows so now we will try to see what

544
00:23:02,620 --> 00:23:09,250
happens if I encrypt the plaintext of

545
00:23:05,169 --> 00:23:11,289
this form with with with Robin so the

546
00:23:09,250 --> 00:23:13,840
first thing is this S boxes and because

547
00:23:11,289 --> 00:23:16,629
I just showed that this is invariant for

548
00:23:13,840 --> 00:23:18,279
the S box in each of the in each of the

549
00:23:16,630 --> 00:23:20,049
columns if you start with within this

550
00:23:18,279 --> 00:23:21,850
subspace you're going to stay there so

551
00:23:20,049 --> 00:23:23,500
the only thing that happens is that this

552
00:23:21,850 --> 00:23:25,449
a and B gets replaced but I'll find that

553
00:23:23,500 --> 00:23:28,450
that's all that happens to the plaintext

554
00:23:25,450 --> 00:23:30,010
so basically this happens for for the S

555
00:23:28,450 --> 00:23:31,410
box layer so after the whole S box layer

556
00:23:30,010 --> 00:23:33,540
this this

557
00:23:31,410 --> 00:23:36,060
subspace is going to map to it to itself

558
00:23:33,540 --> 00:23:37,980
and then the next thing is the linear

559
00:23:36,060 --> 00:23:39,860
layer which is going to apply to the

560
00:23:37,980 --> 00:23:42,240
columns and so for the first column

561
00:23:39,860 --> 00:23:43,649
there's something in the first column

562
00:23:42,240 --> 00:23:44,850
and after the linear layer there's

563
00:23:43,650 --> 00:23:47,610
something else in the column but it's

564
00:23:44,850 --> 00:23:48,780
just a representation stays the same in

565
00:23:47,610 --> 00:23:51,090
the second column you have all these

566
00:23:48,780 --> 00:23:53,040
alphas and this is where my lattice

567
00:23:51,090 --> 00:23:57,139
skills stopped so you get something

568
00:23:53,040 --> 00:24:01,889
different but I'll still call it alpha I

569
00:23:57,140 --> 00:24:02,880
couldn't it was too much so okay this is

570
00:24:01,890 --> 00:24:11,040
a different value

571
00:24:02,880 --> 00:24:12,570
it's the Alpha so the same for better I

572
00:24:11,040 --> 00:24:15,030
have some input better and I'll apply

573
00:24:12,570 --> 00:24:16,679
else with I get some L of beta then I

574
00:24:15,030 --> 00:24:19,320
have 0 here and because it's a linear

575
00:24:16,680 --> 00:24:21,720
mapping it will stay 0 so 0 is meant to

576
00:24:19,320 --> 00:24:24,270
0 that stays the same the same here and

577
00:24:21,720 --> 00:24:25,920
now this is the same input as here and

578
00:24:24,270 --> 00:24:28,980
because we apply the same linear layer

579
00:24:25,920 --> 00:24:32,180
we get the same output so on now this

580
00:24:28,980 --> 00:24:37,050
alpha is really the same as this alpha

581
00:24:32,180 --> 00:24:39,390
and then 0 again and now this is the XOR

582
00:24:37,050 --> 00:24:43,379
of those two columns and of course it's

583
00:24:39,390 --> 00:24:46,170
a linear mapping the output is again the

584
00:24:43,380 --> 00:24:48,060
X all the outputs so it's also invariant

585
00:24:46,170 --> 00:24:49,470
for for the linear layer so it's

586
00:24:48,060 --> 00:24:51,690
invariant for the S box it's invariant

587
00:24:49,470 --> 00:24:53,100
for the linear layer and then we have

588
00:24:51,690 --> 00:24:54,570
the wrong constant but the bad thing is

589
00:24:53,100 --> 00:24:56,580
the wrong constants are there where I

590
00:24:54,570 --> 00:24:58,679
don't care anyway what the state is

591
00:24:56,580 --> 00:25:00,600
and so it's ingredient for the for the

592
00:24:58,680 --> 00:25:01,940
host I find it repeats and this is why

593
00:25:00,600 --> 00:25:07,740
it's broken

594
00:25:01,940 --> 00:25:09,660
ok so so far we discussed this in

595
00:25:07,740 --> 00:25:10,950
reading subspace attacks and now the

596
00:25:09,660 --> 00:25:12,810
question is how can we generalize this

597
00:25:10,950 --> 00:25:15,690
and there are many ways to generalize I

598
00:25:12,810 --> 00:25:17,610
think so the first point and I'm going

599
00:25:15,690 --> 00:25:19,590
to discuss a bit about this is not focus

600
00:25:17,610 --> 00:25:22,139
on subspaces only but some may be

601
00:25:19,590 --> 00:25:24,360
invariant sets more general you can look

602
00:25:22,140 --> 00:25:27,120
at statistical variance and we actually

603
00:25:24,360 --> 00:25:30,020
tend after the break this Christoff is

604
00:25:27,120 --> 00:25:32,879
going to talk about how you can maybe

605
00:25:30,020 --> 00:25:36,930
generalize a bit to or to not something

606
00:25:32,880 --> 00:25:39,630
which happens probability 1 you can also

607
00:25:36,930 --> 00:25:41,490
allow the subspace to change so you have

608
00:25:39,630 --> 00:25:43,260
one subspace let's map to different

609
00:25:41,490 --> 00:25:44,200
subspace after one round and again

610
00:25:43,260 --> 00:25:45,908
there's a difference of

611
00:25:44,200 --> 00:25:48,669
and so on so you maybe have something

612
00:25:45,909 --> 00:25:50,619
like a subspace trail substrate the name

613
00:25:48,669 --> 00:25:55,330
is used for something else but I think

614
00:25:50,619 --> 00:25:56,590
the idea was and you can also think

615
00:25:55,330 --> 00:25:59,529
about how can can you deal with

616
00:25:56,590 --> 00:26:01,090
non-trivial key scheduling so especially

617
00:25:59,529 --> 00:26:03,489
those two the last two things together

618
00:26:01,090 --> 00:26:04,749
might lead to other attacks on on

619
00:26:03,489 --> 00:26:07,359
ciphers where you actually do have a key

620
00:26:04,749 --> 00:26:10,559
scheduling okay but I'm not only going

621
00:26:07,359 --> 00:26:13,119
to focus on what happens if you try to

622
00:26:10,559 --> 00:26:16,629
generalize to not only having subspaces

623
00:26:13,119 --> 00:26:19,418
but maybe invariant sets okay and this

624
00:26:16,629 --> 00:26:24,939
is something we published it I published

625
00:26:19,419 --> 00:26:26,559
together with Oscar and you on 16 and it

626
00:26:24,940 --> 00:26:30,009
did not develop I like this storyline

627
00:26:26,559 --> 00:26:32,080
it's a chest so from from the picture it

628
00:26:30,009 --> 00:26:35,109
seems like it's super a trivial thing to

629
00:26:32,080 --> 00:26:37,029
do so this is what we had before and now

630
00:26:35,109 --> 00:26:38,649
we don't want to focus on subspaces only

631
00:26:37,029 --> 00:26:40,809
but we just formed to focus on some

632
00:26:38,649 --> 00:26:44,979
invariant sets that's it's the whole

633
00:26:40,809 --> 00:26:48,220
idea the point is you can easily

634
00:26:44,980 --> 00:26:50,619
generalize all the attacks but I think

635
00:26:48,220 --> 00:26:53,559
it's only meaningful when when you have

636
00:26:50,619 --> 00:26:56,019
first of all some target to actually

637
00:26:53,559 --> 00:26:59,859
exploit this generalization and also

638
00:26:56,019 --> 00:27:01,619
some some some way to to efficiently or

639
00:26:59,859 --> 00:27:04,299
exhaustively check for all these attacks

640
00:27:01,619 --> 00:27:07,149
otherwise it's you can always say I have

641
00:27:04,299 --> 00:27:08,679
some strange behavior and and then all

642
00:27:07,149 --> 00:27:11,320
the attacks will fit to this but it's I

643
00:27:08,679 --> 00:27:12,639
think it's too general so it's important

644
00:27:11,320 --> 00:27:17,279
to find the generalization which which

645
00:27:12,639 --> 00:27:17,279
kind of allows you to do some things and

646
00:27:17,970 --> 00:27:23,980
so in invariant subspace in nonlinear

647
00:27:21,340 --> 00:27:26,619
entering the text it's actually easier

648
00:27:23,980 --> 00:27:28,749
to not think about the set but to think

649
00:27:26,619 --> 00:27:34,209
about functions that keeps things in

650
00:27:28,749 --> 00:27:36,580
orient so the the following was the

651
00:27:34,210 --> 00:27:38,259
definition that we that we proposed so

652
00:27:36,580 --> 00:27:40,840
if I have this round function which Maps

653
00:27:38,259 --> 00:27:42,759
n bits to n bits because we're thinking

654
00:27:40,840 --> 00:27:45,309
about the boolean function so this only

655
00:27:42,759 --> 00:27:47,289
outputs one bit and we call this a

656
00:27:45,309 --> 00:27:50,080
nonlinear invariant for this function f

657
00:27:47,289 --> 00:27:52,869
if this equation holds so if G evaluated

658
00:27:50,080 --> 00:27:55,399
on the output is the same as G evaluated

659
00:27:52,869 --> 00:27:59,050
for the input

660
00:27:55,400 --> 00:28:03,020
in rent and maybe it's complemented and

661
00:27:59,050 --> 00:28:05,600
the link to the picture with this DCP

662
00:28:03,020 --> 00:28:08,510
the G basically is the indicator

663
00:28:05,600 --> 00:28:11,840
function of this invariant set so you

664
00:28:08,510 --> 00:28:13,370
look at you look at this set and you

665
00:28:11,840 --> 00:28:14,959
define the function G you it's the

666
00:28:13,370 --> 00:28:17,030
boolean function it's only 0 and 1 and

667
00:28:14,960 --> 00:28:18,590
you to find it to be 1 if you're in this

668
00:28:17,030 --> 00:28:20,300
set and you define it to be 0 in this

669
00:28:18,590 --> 00:28:24,649
set and then it's a link to the picture

670
00:28:20,300 --> 00:28:26,930
ingredient set can can be modeled nicer

671
00:28:24,650 --> 00:28:30,020
I think I said invariant function okay

672
00:28:26,930 --> 00:28:31,520
so that's what this explanation is yes

673
00:28:30,020 --> 00:28:34,520
you look at the support of the function

674
00:28:31,520 --> 00:28:41,410
and then the support and its complement

675
00:28:34,520 --> 00:28:43,250
are going to be invariant okay and again

676
00:28:41,410 --> 00:28:45,140
the nice thing is again there are

677
00:28:43,250 --> 00:28:47,500
ciphers which which you can break break

678
00:28:45,140 --> 00:28:50,929
with this it's the ice cream Midori and

679
00:28:47,500 --> 00:28:53,179
also scream the updated version of

680
00:28:50,929 --> 00:28:54,320
scream which was really unlucky I think

681
00:28:53,179 --> 00:28:56,990
for the screen designers because

682
00:28:54,320 --> 00:28:59,330
question 2 was safe and which one was

683
00:28:56,990 --> 00:29:01,100
safe in version 3 because there's a

684
00:28:59,330 --> 00:29:04,669
small change in the S box was the

685
00:29:01,100 --> 00:29:08,389
netiquette and the nice thing was this

686
00:29:04,670 --> 00:29:10,760
attackers that that you can extend this

687
00:29:08,390 --> 00:29:14,090
to an attack on on the mods so it really

688
00:29:10,760 --> 00:29:16,160
gives you own well before this invariant

689
00:29:14,090 --> 00:29:17,990
subspace attack I always thought of it

690
00:29:16,160 --> 00:29:19,370
as just a distinguished huh that's

691
00:29:17,990 --> 00:29:21,110
something you don't want but actually

692
00:29:19,370 --> 00:29:22,610
you can use it a lot for key recovery

693
00:29:21,110 --> 00:29:24,500
because it happens probability

694
00:29:22,610 --> 00:29:25,850
probability one guessing keys and

695
00:29:24,500 --> 00:29:29,320
computing backwards is not going to help

696
00:29:25,850 --> 00:29:32,809
and here you can really extend this to

697
00:29:29,320 --> 00:29:35,210
ciphertext only attacks in some modes

698
00:29:32,809 --> 00:29:37,250
and it has very low complexity if you

699
00:29:35,210 --> 00:29:39,260
have wiki's wiki then it's really

700
00:29:37,250 --> 00:29:42,230
efficient so this is just a summary of

701
00:29:39,260 --> 00:29:43,460
these results of a screen for example we

702
00:29:42,230 --> 00:29:46,400
have 2 to the 96

703
00:29:43,460 --> 00:29:50,330
wiki's out of 2 to the 128 keys and then

704
00:29:46,400 --> 00:29:56,350
you can recover 1/4 of the plaintext

705
00:29:50,330 --> 00:29:58,760
bits with very small time with zero time

706
00:29:56,350 --> 00:30:01,520
okay so I'm skipping all the details

707
00:29:58,760 --> 00:30:05,480
here so I'm not explaining how this

708
00:30:01,520 --> 00:30:06,980
happens and why this works so if you

709
00:30:05,480 --> 00:30:10,250
want to details you

710
00:30:06,980 --> 00:30:13,580
look into the paper and also there's a

711
00:30:10,250 --> 00:30:14,510
nice explanation why this attack this

712
00:30:13,580 --> 00:30:17,658
attack actually works

713
00:30:14,510 --> 00:30:20,149
so for the sbox it's relatively easy to

714
00:30:17,659 --> 00:30:22,070
see why it works for the sbox but then

715
00:30:20,149 --> 00:30:23,600
luckily it also works for the linear

716
00:30:22,070 --> 00:30:26,090
layer luckily for us it also works for

717
00:30:23,600 --> 00:30:27,469
the linearly and this is explained in

718
00:30:26,090 --> 00:30:30,139
the paper why what is the structural

719
00:30:27,470 --> 00:30:33,019
weakness that makes this happen so

720
00:30:30,139 --> 00:30:35,928
here's the second insider information I

721
00:30:33,019 --> 00:30:38,450
already said that this was not developed

722
00:30:35,929 --> 00:30:39,889
like like I explained now so it was not

723
00:30:38,450 --> 00:30:41,750
like we looked at inspection they okay

724
00:30:39,889 --> 00:30:43,699
let's look into invariant set so we did

725
00:30:41,750 --> 00:30:46,279
something completely different so this

726
00:30:43,700 --> 00:30:47,590
is what we Yosuke Toto was visiting our

727
00:30:46,279 --> 00:30:51,110
ubian

728
00:30:47,590 --> 00:30:54,649
end of 15 beginning of 16 beginning of

729
00:30:51,110 --> 00:31:01,610
16 and we were working on division

730
00:30:54,649 --> 00:31:03,408
property and so just we've recall what

731
00:31:01,610 --> 00:31:05,570
division property is I'm going to be

732
00:31:03,409 --> 00:31:09,649
very brief in this so you have a set X

733
00:31:05,570 --> 00:31:12,529
and it has the division property D and K

734
00:31:09,649 --> 00:31:17,149
and so the N is the block length and K

735
00:31:12,529 --> 00:31:27,260
is if summing up over all these elements

736
00:31:17,149 --> 00:31:32,840
X in the set X X to the U is zero where

737
00:31:27,260 --> 00:31:34,669
this X to the U is just think of X to

738
00:31:32,840 --> 00:31:38,059
the USS you want and some X to the you

739
00:31:34,669 --> 00:31:40,279
where the weight of u so U is again a

740
00:31:38,059 --> 00:31:42,019
vector and the weight of you should be

741
00:31:40,279 --> 00:31:43,970
smaller than K so for all the vectors u

742
00:31:42,019 --> 00:31:45,350
is smaller than K this is going this

743
00:31:43,970 --> 00:31:47,840
term is going to evaluate to zero

744
00:31:45,350 --> 00:31:50,629
another way of saying this is that you

745
00:31:47,840 --> 00:31:54,070
can take any function of degree smaller

746
00:31:50,630 --> 00:31:56,659
than K and F evaluated on all these

747
00:31:54,070 --> 00:31:59,269
elements in the set and you add them up

748
00:31:56,659 --> 00:32:02,210
that will give you a zero so this is one

749
00:31:59,269 --> 00:32:04,639
way of simple variant of this division

750
00:32:02,210 --> 00:32:06,620
property and so the research question

751
00:32:04,639 --> 00:32:10,370
that we had when you skir was visiting

752
00:32:06,620 --> 00:32:12,439
it ru easy hey can we come it can become

753
00:32:10,370 --> 00:32:15,649
overcome one can be overcome one s box

754
00:32:12,440 --> 00:32:16,120
without guessing the entire key so let

755
00:32:15,649 --> 00:32:18,280
me

756
00:32:16,120 --> 00:32:19,750
we'll be more specific you imagine you

757
00:32:18,280 --> 00:32:22,720
have this S box which is maybe high

758
00:32:19,750 --> 00:32:24,880
degree and you have some division

759
00:32:22,720 --> 00:32:27,130
property like this so the three means

760
00:32:24,880 --> 00:32:29,680
any we have a set here where any

761
00:32:27,130 --> 00:32:32,230
quadratic function evaluated on X will

762
00:32:29,680 --> 00:32:34,660
add up to two zero that's the division

763
00:32:32,230 --> 00:32:36,160
property the 3n and now the idea was

764
00:32:34,660 --> 00:32:39,940
okay maybe we can can be evaluate

765
00:32:36,160 --> 00:32:42,100
something on Y can we test this division

766
00:32:39,940 --> 00:32:44,110
property on Y without guessing the whole

767
00:32:42,100 --> 00:32:45,969
key and it would be nice because it

768
00:32:44,110 --> 00:32:48,699
would speed up a key recovery or maybe

769
00:32:45,970 --> 00:32:50,290
allowed to add one more round so we try

770
00:32:48,700 --> 00:32:52,540
to try this and the idea was the

771
00:32:50,290 --> 00:32:55,149
following let's try to find a function G

772
00:32:52,540 --> 00:32:58,780
but you evaluate on this intermediate

773
00:32:55,150 --> 00:33:01,390
value set which fulfills two things so

774
00:32:58,780 --> 00:33:04,270
first of all it should this G of set

775
00:33:01,390 --> 00:33:07,420
this function G should not depend on all

776
00:33:04,270 --> 00:33:09,460
bits in a nonlinear way because if this

777
00:33:07,420 --> 00:33:11,170
is the case if it does not depend let's

778
00:33:09,460 --> 00:33:14,050
say it just does not depend on all bits

779
00:33:11,170 --> 00:33:15,430
of set then actually you have Y you

780
00:33:14,050 --> 00:33:18,100
don't have to guess the whole key and

781
00:33:15,430 --> 00:33:20,260
you can evaluate this and then evaluate

782
00:33:18,100 --> 00:33:22,449
G of of this thing without guessing the

783
00:33:20,260 --> 00:33:25,990
entire key and the second thing is we

784
00:33:22,450 --> 00:33:28,720
wanted the G of set equals some other

785
00:33:25,990 --> 00:33:32,080
function f of X which in this F should

786
00:33:28,720 --> 00:33:34,000
be quadratic why because we know if F is

787
00:33:32,080 --> 00:33:35,770
podriatic f of X is podriatic and we sum

788
00:33:34,000 --> 00:33:38,290
above all these values we get zero so we

789
00:33:35,770 --> 00:33:41,560
have a distinguished following from the

790
00:33:38,290 --> 00:33:43,270
division property so just different so

791
00:33:41,560 --> 00:33:46,360
definitely I want a function G of set

792
00:33:43,270 --> 00:33:48,280
which equals to f of X and this F should

793
00:33:46,360 --> 00:33:49,929
be a quadratic and then I would guess

794
00:33:48,280 --> 00:33:51,820
some parts of the key bits which are

795
00:33:49,930 --> 00:33:55,060
required to compute this G of set and

796
00:33:51,820 --> 00:33:57,399
then add up all these values G offset

797
00:33:55,060 --> 00:33:59,070
and if it's zero the this partial key

798
00:33:57,400 --> 00:34:03,370
guess was correct so I think it was a

799
00:33:59,070 --> 00:34:06,790
good try and then we searched for many

800
00:34:03,370 --> 00:34:08,770
candidates and we looked at many s boxes

801
00:34:06,790 --> 00:34:10,810
is this going to happen what are the

802
00:34:08,770 --> 00:34:12,550
conditions so if I look at this code

803
00:34:10,810 --> 00:34:14,949
back now it was really stupid things we

804
00:34:12,550 --> 00:34:17,140
tried but that's a super inefficient

805
00:34:14,949 --> 00:34:19,179
just run running through all possible

806
00:34:17,139 --> 00:34:22,929
functions in a stupid way you can do

807
00:34:19,179 --> 00:34:24,790
these things much better and then we

808
00:34:22,929 --> 00:34:27,129
found this yeah so for the if this is

809
00:34:24,790 --> 00:34:28,810
the scream s box it fulfills something

810
00:34:27,130 --> 00:34:32,350
like this x1 times x2

811
00:34:28,810 --> 00:34:35,409
and so on is this one so in this case it

812
00:34:32,350 --> 00:34:38,110
was really a coincidence and this F and

813
00:34:35,409 --> 00:34:40,600
G are basically identical just by

814
00:34:38,110 --> 00:34:43,150
accident it happens you know that's

815
00:34:40,600 --> 00:34:46,839
interesting that's cool maybe that's

816
00:34:43,150 --> 00:34:49,540
something to say okay can we maybe it's

817
00:34:46,840 --> 00:34:50,380
just a coincidence and can we do

818
00:34:49,540 --> 00:34:53,460
something with it

819
00:34:50,380 --> 00:34:56,470
and I didn't know I think ok maybe just

820
00:34:53,460 --> 00:34:57,880
nothing to follow up on it looks too

821
00:34:56,469 --> 00:34:59,620
complicated in there so this linear

822
00:34:57,880 --> 00:35:03,400
layer and it's going to destroy this for

823
00:34:59,620 --> 00:35:05,080
sure and then one month later I got this

824
00:35:03,400 --> 00:35:07,540
email from you asked and he said I have

825
00:35:05,080 --> 00:35:10,450
some new results and I would like to

826
00:35:07,540 --> 00:35:13,240
publish this and this was then I went

827
00:35:10,450 --> 00:35:15,520
home and discussed with you and this

828
00:35:13,240 --> 00:35:18,939
basically sent a complete paper to move

829
00:35:15,520 --> 00:35:20,860
to me so my my contribution to this no

830
00:35:18,940 --> 00:35:25,030
lady anything was actually a bit limited

831
00:35:20,860 --> 00:35:26,470
maybe it was luck to find this very nice

832
00:35:25,030 --> 00:35:31,270
observation that this also works well

833
00:35:26,470 --> 00:35:36,509
for the linear ended up in this paper

834
00:35:31,270 --> 00:35:38,830
today try to explain okay

835
00:35:36,510 --> 00:35:45,070
so last part how to prevent these

836
00:35:38,830 --> 00:35:47,400
attacks so which is quite general and

837
00:35:45,070 --> 00:35:50,650
now you would like to be sure that that

838
00:35:47,400 --> 00:35:52,030
your cipher is secure against this and I

839
00:35:50,650 --> 00:35:53,920
already explained that there's this

840
00:35:52,030 --> 00:35:55,630
automatic algorithm which is not not

841
00:35:53,920 --> 00:35:57,490
efficient so maybe we need something

842
00:35:55,630 --> 00:35:58,990
better and this algorithm is not even

843
00:35:57,490 --> 00:36:00,759
efficient if it's if you try to adapt

844
00:35:58,990 --> 00:36:02,919
this algorithm that I explained to

845
00:36:00,760 --> 00:36:05,200
invariant sets it basically breaks down

846
00:36:02,920 --> 00:36:06,610
immediately because the main idea was to

847
00:36:05,200 --> 00:36:08,080
look at this linear span and you cannot

848
00:36:06,610 --> 00:36:10,000
do this because you're not looking into

849
00:36:08,080 --> 00:36:12,190
invariant subspace again ok so we need

850
00:36:10,000 --> 00:36:13,990
some new ideas how to how to prevent

851
00:36:12,190 --> 00:36:16,270
these attacks now we are changing from

852
00:36:13,990 --> 00:36:18,189
an attackers perspective to a designer's

853
00:36:16,270 --> 00:36:19,870
perspective we want as designers to have

854
00:36:18,190 --> 00:36:22,480
a way to choose our own constraints

855
00:36:19,870 --> 00:36:24,339
probably in a sound way that allows you

856
00:36:22,480 --> 00:36:29,260
to be sure there's nothing you have to

857
00:36:24,340 --> 00:36:35,650
worry about corresponding paper which

858
00:36:29,260 --> 00:36:36,970
appeared at crypto 17 and so there's

859
00:36:35,650 --> 00:36:38,800
this question mark and I'll explain why

860
00:36:36,970 --> 00:36:41,000
there is a question mark it says a

861
00:36:38,800 --> 00:36:42,710
satisfactory answer for the

862
00:36:41,000 --> 00:36:45,800
- and I think we were very happy with

863
00:36:42,710 --> 00:36:49,640
this explained this is the last insider

864
00:36:45,800 --> 00:36:55,610
information is this question mark am so

865
00:36:49,640 --> 00:36:58,490
and I think finding some very general

866
00:36:55,610 --> 00:37:01,040
arguments is really complicated so we

867
00:36:58,490 --> 00:37:02,660
decided to to restrict the

868
00:37:01,040 --> 00:37:04,580
considerations of preventing this

869
00:37:02,660 --> 00:37:07,359
preventing these attacks to a special

870
00:37:04,580 --> 00:37:10,549
case but actually it's the special cases

871
00:37:07,360 --> 00:37:13,010
mainly motivated by all the attacks up

872
00:37:10,550 --> 00:37:15,380
to them which are ingredient to text

873
00:37:13,010 --> 00:37:18,170
really of this form and also they once I

874
00:37:15,380 --> 00:37:21,830
explained and previously on Robin is of

875
00:37:18,170 --> 00:37:24,470
this form so we have this SP n layer and

876
00:37:21,830 --> 00:37:26,600
we have an invariant which is invariant

877
00:37:24,470 --> 00:37:28,850
for the sbox layer and in Orion for the

878
00:37:26,600 --> 00:37:31,009
linear layer the linear layer including

879
00:37:28,850 --> 00:37:33,170
the key addition so it's in brilliant

880
00:37:31,010 --> 00:37:35,870
foot box that's not necessary you can

881
00:37:33,170 --> 00:37:38,300
easily in principle have an invariant

882
00:37:35,870 --> 00:37:40,069
which is in brilliant for for the for

883
00:37:38,300 --> 00:37:42,110
one round without being in brilliant for

884
00:37:40,070 --> 00:37:44,450
most parts so anything which is

885
00:37:42,110 --> 00:37:45,890
invariant for both parts is invariant

886
00:37:44,450 --> 00:37:47,000
for the whole round but not everything

887
00:37:45,890 --> 00:37:49,640
which is invariant for the whole round

888
00:37:47,000 --> 00:37:51,830
has to be invariant for both parts but

889
00:37:49,640 --> 00:37:55,640
it's all in your textbook of this form

890
00:37:51,830 --> 00:37:57,529
and it seems like the natural way to

891
00:37:55,640 --> 00:37:59,240
look at look at these things so we are

892
00:37:57,530 --> 00:38:00,530
considering only invariance which are

893
00:37:59,240 --> 00:38:05,180
invariant for the sbox and for the

894
00:38:00,530 --> 00:38:08,240
linear name and then the linear layer

895
00:38:05,180 --> 00:38:11,180
including this key addition so one

896
00:38:08,240 --> 00:38:12,890
exception is best paper from last edge a

897
00:38:11,180 --> 00:38:14,779
crypt which actually has a text which

898
00:38:12,890 --> 00:38:18,290
are not of this form but okay that's

899
00:38:14,780 --> 00:38:20,900
very nice but we couldn't consider this

900
00:38:18,290 --> 00:38:22,610
because it was after work and I'm not

901
00:38:20,900 --> 00:38:26,720
going to go into details here but it's

902
00:38:22,610 --> 00:38:28,520
very nice okay so why is this nice from

903
00:38:26,720 --> 00:38:30,709
a kind of trying to find arguments

904
00:38:28,520 --> 00:38:32,420
perspective why is it how does it help

905
00:38:30,710 --> 00:38:35,150
to have this invariants and oppose

906
00:38:32,420 --> 00:38:37,280
things the the nice thing is okay so we

907
00:38:35,150 --> 00:38:39,080
want this function this invariant G so

908
00:38:37,280 --> 00:38:41,150
what we want is its G should be

909
00:38:39,080 --> 00:38:44,060
invariant and that this linear layer so

910
00:38:41,150 --> 00:38:46,880
that means that G of X is the same as G

911
00:38:44,060 --> 00:38:49,880
of L of X plus ki because G should be

912
00:38:46,880 --> 00:38:51,320
invariant under this so the the linear

913
00:38:49,880 --> 00:38:51,940
layer including the key addition should

914
00:38:51,320 --> 00:38:55,240
be invariant

915
00:38:51,940 --> 00:38:56,890
energy yeah so this should be true for

916
00:38:55,240 --> 00:38:58,538
all wrong keys so it should be true for

917
00:38:56,890 --> 00:39:01,660
all round keys ki and it should also be

918
00:38:58,539 --> 00:39:05,170
true for this KJ I enjoy any possible

919
00:39:01,660 --> 00:39:06,879
choices of rounds so and then if you add

920
00:39:05,170 --> 00:39:09,579
up those two equations you see that

921
00:39:06,880 --> 00:39:12,460
actually G of L of X plus K is the same

922
00:39:09,579 --> 00:39:14,710
as G of L of x + KJ plus this constant

923
00:39:12,460 --> 00:39:17,890
it's the same thing and then you do

924
00:39:14,710 --> 00:39:20,829
replace L of X by maybe Y Prime and then

925
00:39:17,890 --> 00:39:23,020
Y prime by y plus ki and so you end up

926
00:39:20,829 --> 00:39:26,740
with this equation so that means for all

927
00:39:23,020 --> 00:39:29,049
Y G has to fulfill G of Y plus and this

928
00:39:26,740 --> 00:39:32,229
element here has to be the same as G of

929
00:39:29,049 --> 00:39:34,630
Y and this is what we call in linear

930
00:39:32,230 --> 00:39:36,339
structure 440 so a linear structure is

931
00:39:34,630 --> 00:39:38,140
like a derivative of your boolean

932
00:39:36,339 --> 00:39:40,029
function which is going to be constant

933
00:39:38,140 --> 00:39:41,950
and this is what happens you and

934
00:39:40,030 --> 00:39:44,829
actually this you if you look at the the

935
00:39:41,950 --> 00:39:46,779
set of all these these derivatives or

936
00:39:44,829 --> 00:39:48,849
these ifs that this derivative is

937
00:39:46,780 --> 00:39:50,140
constant they form a linear space and

938
00:39:48,849 --> 00:39:51,640
it's again a subspace if you have two of

939
00:39:50,140 --> 00:40:05,500
them then the sum is also going to be

940
00:39:51,640 --> 00:40:08,710
one of them yes and similar computation

941
00:40:05,500 --> 00:40:11,230
also shows that if if you have these

942
00:40:08,710 --> 00:40:14,529
conditions and and you have this K of I

943
00:40:11,230 --> 00:40:17,440
plus K of J should be a linear structure

944
00:40:14,529 --> 00:40:21,819
then also L applied to this to this

945
00:40:17,440 --> 00:40:24,490
thing should be so that's what I am

946
00:40:21,819 --> 00:40:26,619
summarizing here so these linear

947
00:40:24,490 --> 00:40:28,689
instructions the linear structures of

948
00:40:26,619 --> 00:40:31,240
this invariant G have to contain all

949
00:40:28,690 --> 00:40:34,990
these differences of round keys and they

950
00:40:31,240 --> 00:40:36,279
also have to be invariant under L and

951
00:40:34,990 --> 00:40:39,220
this is this is really the key point

952
00:40:36,279 --> 00:40:41,069
because this allows you to in an easy

953
00:40:39,220 --> 00:40:43,959
way to check if this is possible or not

954
00:40:41,069 --> 00:40:45,339
and now again these differences if you

955
00:40:43,960 --> 00:40:46,779
have a proper key scheduling these

956
00:40:45,339 --> 00:40:49,509
differences could be very complicated

957
00:40:46,779 --> 00:40:51,160
but if you have this simple key scaling

958
00:40:49,510 --> 00:40:54,069
that explained where all the wrong keys

959
00:40:51,160 --> 00:40:56,529
only differ by constants this this this

960
00:40:54,069 --> 00:40:58,869
difference of two consecutive round keys

961
00:40:56,529 --> 00:41:00,789
is two to two round keys it's again a

962
00:40:58,869 --> 00:41:03,760
constant so it's just a constant and

963
00:41:00,789 --> 00:41:05,410
actually this is another open question

964
00:41:03,760 --> 00:41:07,060
and what happens if you have a maybe a

965
00:41:05,410 --> 00:41:09,609
linear kiss killing probably you're

966
00:41:07,060 --> 00:41:13,060
still able to say something is but and

967
00:41:09,609 --> 00:41:15,009
maybe do similar arguments su but

968
00:41:13,060 --> 00:41:17,830
further it at least for sure for this

969
00:41:15,010 --> 00:41:19,240
simple case of of identical wrong keys

970
00:41:17,830 --> 00:41:24,100
it's very simple and you've been the

971
00:41:19,240 --> 00:41:25,930
constant so then if you want if you want

972
00:41:24,100 --> 00:41:27,730
to see if you can find these invariants

973
00:41:25,930 --> 00:41:30,160
all you have to do is you look at the

974
00:41:27,730 --> 00:41:33,040
set of all these differences of round

975
00:41:30,160 --> 00:41:34,930
concerns and you look at the smallest L

976
00:41:33,040 --> 00:41:36,880
invariant space containing all these

977
00:41:34,930 --> 00:41:38,649
differences it's going to be some space

978
00:41:36,880 --> 00:41:42,220
and if you're lucky this space is big

979
00:41:38,650 --> 00:41:45,750
why is it good if it's big because that

980
00:41:42,220 --> 00:41:48,339
it is a strong restriction for your

981
00:41:45,750 --> 00:41:50,320
invariant so the linear structures of

982
00:41:48,340 --> 00:41:52,810
this invariant you're looking for has to

983
00:41:50,320 --> 00:41:56,380
contain this space that it's easy to

984
00:41:52,810 --> 00:41:58,960
compute and now the nice thing is if

985
00:41:56,380 --> 00:42:02,680
this dimension of this space is n minus

986
00:41:58,960 --> 00:42:05,830
1 then you know n minus 1 or larger so n

987
00:42:02,680 --> 00:42:09,190
minus 1 or n then it's easy to see that

988
00:42:05,830 --> 00:42:10,740
then such an invariant cannot exist so

989
00:42:09,190 --> 00:42:12,970
the nice thing is it's easy computation

990
00:42:10,740 --> 00:42:16,089
easy compute easily compute this

991
00:42:12,970 --> 00:42:19,660
dimension and check this dimension is

992
00:42:16,090 --> 00:42:21,550
high enough you're done you're safe and

993
00:42:19,660 --> 00:42:24,190
for example this is allow us to easily

994
00:42:21,550 --> 00:42:26,320
prove then that for led and what for

995
00:42:24,190 --> 00:42:34,270
skinny some variants of skinny these

996
00:42:26,320 --> 00:42:36,790
attacks will not work and you can do a

997
00:42:34,270 --> 00:42:39,670
bit more of linear algebra and look at

998
00:42:36,790 --> 00:42:41,590
the look at the rational economic reform

999
00:42:39,670 --> 00:42:43,540
whatever this is of the linear layer so

1000
00:42:41,590 --> 00:42:47,619
you look at this matrix and look at this

1001
00:42:43,540 --> 00:42:49,480
it's economical form and then there's a

1002
00:42:47,619 --> 00:42:52,030
notion of invariant factors for a linear

1003
00:42:49,480 --> 00:42:54,310
mapping and actually can and they will

1004
00:42:52,030 --> 00:42:57,070
basically determine how many round

1005
00:42:54,310 --> 00:43:02,859
constants you need in order to to make

1006
00:42:57,070 --> 00:43:05,109
this argument work that's exceptionally

1007
00:43:02,859 --> 00:43:06,790
easy take the linear layer come and

1008
00:43:05,109 --> 00:43:08,890
compute this rational economic reform

1009
00:43:06,790 --> 00:43:10,180
and then you know how many wrong

1010
00:43:08,890 --> 00:43:11,770
constant you have to pick and then you

1011
00:43:10,180 --> 00:43:14,810
pick around constants and you compute

1012
00:43:11,770 --> 00:43:19,460
this dimension of this set

1013
00:43:14,810 --> 00:43:21,470
of this said awl and if it's a food I

1014
00:43:19,460 --> 00:43:23,180
mentioned you know nobody can attack

1015
00:43:21,470 --> 00:43:25,370
this thing with invariant detection so I

1016
00:43:23,180 --> 00:43:27,529
think that was nice I was very happy

1017
00:43:25,370 --> 00:43:30,109
with this the nice thing is works

1018
00:43:27,530 --> 00:43:33,110
independent of the linear of the S box

1019
00:43:30,110 --> 00:43:36,110
so for NES box is going to be fine it's

1020
00:43:33,110 --> 00:43:40,790
really a question of is really property

1021
00:43:36,110 --> 00:43:45,320
of the linear layer only okay so here's

1022
00:43:40,790 --> 00:43:48,980
the last inside information and finish

1023
00:43:45,320 --> 00:43:51,620
in time so this is the but so I'm going

1024
00:43:48,980 --> 00:43:53,840
to explain the question mark so I said

1025
00:43:51,620 --> 00:43:58,279
maybe this is not a satisfactory answer

1026
00:43:53,840 --> 00:44:00,350
and the point is this so I said we are

1027
00:43:58,280 --> 00:44:02,750
looking at ingredients which are

1028
00:44:00,350 --> 00:44:04,790
invariant under the sbox layer and

1029
00:44:02,750 --> 00:44:08,060
another linear layer including the key

1030
00:44:04,790 --> 00:44:09,980
and then I claimed it also works for any

1031
00:44:08,060 --> 00:44:12,410
s box it's independent of the aspects

1032
00:44:09,980 --> 00:44:14,810
you can choose the S box s21 and still

1033
00:44:12,410 --> 00:44:17,060
going to work so this analysis is very

1034
00:44:14,810 --> 00:44:18,080
simple and nice so let's do some some

1035
00:44:17,060 --> 00:44:21,950
cosmetic this is something that

1036
00:44:18,080 --> 00:44:29,870
Christophe bialya pointed out to me if

1037
00:44:21,950 --> 00:44:31,700
you weeks ago I wanted to share it's not

1038
00:44:29,870 --> 00:44:34,730
nice but okay let's do some cosmetic

1039
00:44:31,700 --> 00:44:36,950
changes so I have this S box layer so I

1040
00:44:34,730 --> 00:44:38,600
try to maybe it's not three s boxes put

1041
00:44:36,950 --> 00:44:41,210
some s boxes and have the linear layout

1042
00:44:38,600 --> 00:44:44,410
and I'm looking for an invariant for

1043
00:44:41,210 --> 00:44:46,910
this part and invariant for this part so

1044
00:44:44,410 --> 00:44:51,680
get rid of this boundary between these

1045
00:44:46,910 --> 00:44:54,410
two invariants and add some identity so

1046
00:44:51,680 --> 00:44:56,839
it's a linear mapping T and it's inverse

1047
00:44:54,410 --> 00:45:01,399
and then I added nothing here in the

1048
00:44:56,840 --> 00:45:02,960
middle so T is linear but then instead

1049
00:45:01,400 --> 00:45:04,100
of having it in the middle I'm going to

1050
00:45:02,960 --> 00:45:06,320
split it into parts

1051
00:45:04,100 --> 00:45:08,569
so T I'm going to think of T as being

1052
00:45:06,320 --> 00:45:12,350
part of the S box and they're sick of T

1053
00:45:08,570 --> 00:45:14,500
inverse and this direct product of these

1054
00:45:12,350 --> 00:45:18,529
T inverse mappings as part of the linear

1055
00:45:14,500 --> 00:45:21,350
so nothing changes the same cipher but I

1056
00:45:18,530 --> 00:45:24,080
have a different aspects now and I also

1057
00:45:21,350 --> 00:45:27,110
have it is different linearly and the

1058
00:45:24,080 --> 00:45:28,509
point is that so nothing happened but

1059
00:45:27,110 --> 00:45:32,260
the linear layer is different

1060
00:45:28,510 --> 00:45:34,270
and that means that if I compute the if

1061
00:45:32,260 --> 00:45:35,580
I did did this job of choosing the

1062
00:45:34,270 --> 00:45:37,840
constant by looking at the rational

1063
00:45:35,580 --> 00:45:39,730
canonical form of this saying and

1064
00:45:37,840 --> 00:45:41,560
everything was nice I get high dimension

1065
00:45:39,730 --> 00:45:44,020
everything is good it doesn't mean

1066
00:45:41,560 --> 00:45:45,759
anything about the linear but the

1067
00:45:44,020 --> 00:45:48,480
rational economic reform and all this

1068
00:45:45,760 --> 00:45:51,910
dimension for this new linear here

1069
00:45:48,480 --> 00:45:53,740
so the argument might might work for

1070
00:45:51,910 --> 00:45:56,140
this one but it didn't might not work

1071
00:45:53,740 --> 00:45:58,240
for this one and it's the same cipher

1072
00:45:56,140 --> 00:46:05,100
and there's no reason why the attacker

1073
00:45:58,240 --> 00:46:07,180
has to stick to this one and maybe him

1074
00:46:05,100 --> 00:46:08,680
and that's the last point I wanted to

1075
00:46:07,180 --> 00:46:12,580
make maybe that's actually something we

1076
00:46:08,680 --> 00:46:14,740
it's not risk only for this case but so

1077
00:46:12,580 --> 00:46:16,630
we but I think a way of I mean all

1078
00:46:14,740 --> 00:46:18,040
that's in the paper is correct and it's

1079
00:46:16,630 --> 00:46:22,780
not like this is a mistake of the paper

1080
00:46:18,040 --> 00:46:24,790
that that but it's really a better way

1081
00:46:22,780 --> 00:46:27,310
of phrasing this is maybe that we have a

1082
00:46:24,790 --> 00:46:28,930
secure a security argument for an exact

1083
00:46:27,310 --> 00:46:31,210
representation of the cipher so it's

1084
00:46:28,930 --> 00:46:33,609
this representation meaning this this

1085
00:46:31,210 --> 00:46:35,530
boundaries basically between the the S

1086
00:46:33,610 --> 00:46:38,680
box and the linear layer where you can

1087
00:46:35,530 --> 00:46:40,870
do your security argument but this

1088
00:46:38,680 --> 00:46:42,700
boundary is is very arbitrary and like I

1089
00:46:40,870 --> 00:46:45,279
said it's just a cosmetic change and you

1090
00:46:42,700 --> 00:46:47,290
put some parts of the of the linear

1091
00:46:45,280 --> 00:46:48,760
layer within the S box or some part out

1092
00:46:47,290 --> 00:46:50,410
of the S box and the linear layer and

1093
00:46:48,760 --> 00:46:52,180
and for the attacker doesn't make a

1094
00:46:50,410 --> 00:46:53,950
difference but the argument breaks down

1095
00:46:52,180 --> 00:46:58,210
and I think this is something that is

1096
00:46:53,950 --> 00:46:59,919
not only for for this case of in read

1097
00:46:58,210 --> 00:47:02,410
the text but that's something that may

1098
00:46:59,920 --> 00:47:04,090
be marginal that we often actually focus

1099
00:47:02,410 --> 00:47:05,910
maybe too much on a specific

1100
00:47:04,090 --> 00:47:07,930
representation of the cipher because

1101
00:47:05,910 --> 00:47:13,359
everything else will become a bit more

1102
00:47:07,930 --> 00:47:16,330
difficult but yeah that's not nice and I

1103
00:47:13,360 --> 00:47:17,680
think it's a good one of the questions

1104
00:47:16,330 --> 00:47:19,390
of course can can you remove this

1105
00:47:17,680 --> 00:47:22,089
restriction how can you find an argument

1106
00:47:19,390 --> 00:47:23,799
which will work for all these for all

1107
00:47:22,090 --> 00:47:26,020
these linear layers so it's not an

1108
00:47:23,800 --> 00:47:27,910
arbitrary linear layer so it's it's

1109
00:47:26,020 --> 00:47:29,830
still the T's of course I mean the thing

1110
00:47:27,910 --> 00:47:32,410
is of a certain form and maybe you can

1111
00:47:29,830 --> 00:47:36,630
still try to lift their security

1112
00:47:32,410 --> 00:47:36,629
arguments for this I don't know yet

1113
00:47:36,760 --> 00:47:40,000
okay and that's all I want thank you

1114
00:47:38,920 --> 00:47:47,040
very much

1115
00:47:40,000 --> 00:47:54,730
[Applause]

1116
00:47:47,040 --> 00:47:57,400
or any questions for Kayla so everyone

1117
00:47:54,730 --> 00:48:01,450
is hungry huh I have a question so you

1118
00:47:57,400 --> 00:48:06,280
mentioned the problem in the end to your

1119
00:48:01,450 --> 00:48:08,290
fi dear so to overcome this no idea

1120
00:48:06,280 --> 00:48:10,330
because to me it seems if you're

1121
00:48:08,290 --> 00:48:17,680
allowing to do this you can also cancel

1122
00:48:10,330 --> 00:48:21,790
the round constants to some extent you

1123
00:48:17,680 --> 00:48:26,009
can move it to this box yeah but your

1124
00:48:21,790 --> 00:48:29,470
boss says it's working fine yes box yes

1125
00:48:26,010 --> 00:48:33,490
of course you you really if you could do

1126
00:48:29,470 --> 00:48:35,410
this um but then you need a different I

1127
00:48:33,490 --> 00:48:38,830
mean then it said the invariant has to

1128
00:48:35,410 --> 00:48:40,569
work for our last boxes but now it's the

1129
00:48:38,830 --> 00:48:42,940
S is always the same and you weren't the

1130
00:48:40,570 --> 00:48:45,400
same different aspects it's it's

1131
00:48:42,940 --> 00:48:47,440
different I mean the S boxes will be so

1132
00:48:45,400 --> 00:48:49,840
each box will be different potentially

1133
00:48:47,440 --> 00:48:51,400
yeah because they actually the T was for

1134
00:48:49,840 --> 00:48:53,380
simplicity this is the same T but

1135
00:48:51,400 --> 00:48:55,660
there's no reason to take the same T for

1136
00:48:53,380 --> 00:48:57,460
the S boxes and if you move the wrong

1137
00:48:55,660 --> 00:49:00,279
concerns there on top you have different

1138
00:48:57,460 --> 00:49:04,800
s boxes within one round and again

1139
00:49:00,280 --> 00:49:09,510
different less boxes I wouldn't do this

1140
00:49:04,800 --> 00:49:09,510
you can but it's not going to help

1141
00:49:17,970 --> 00:49:25,919
at York paper your paper in 2015 you

1142
00:49:22,829 --> 00:49:29,010
mentioned that don't attack on ice cream

1143
00:49:25,920 --> 00:49:33,030
and others it can be interpreted in the

1144
00:49:29,010 --> 00:49:35,540
related case setting like is it true for

1145
00:49:33,030 --> 00:49:40,530
other variant of the in violent attacks

1146
00:49:35,540 --> 00:49:57,470
can be we define them the related case I

1147
00:49:40,530 --> 00:50:00,960
think so what was the you mentioned that

1148
00:49:57,470 --> 00:50:05,279
the environment attack on ice cream

1149
00:50:00,960 --> 00:50:07,500
there were three target ciphers and you

1150
00:50:05,280 --> 00:50:10,200
mentioned that another interpolation is

1151
00:50:07,500 --> 00:50:12,420
that we can say that the cipher can be

1152
00:50:10,200 --> 00:50:16,759
broken immediately in the related key

1153
00:50:12,420 --> 00:50:21,540
setting in the related key model

1154
00:50:16,760 --> 00:50:24,359
particular yeah I don't think it's in

1155
00:50:21,540 --> 00:50:26,750
general you can see the wiki as a self

1156
00:50:24,359 --> 00:50:29,960
related key I think something like that

1157
00:50:26,750 --> 00:50:33,420
yeah I don't think it generalizes to

1158
00:50:29,960 --> 00:50:35,160
talk to the whole space of possible in

1159
00:50:33,420 --> 00:50:37,760
reading the text so I think it's

1160
00:50:35,160 --> 00:50:37,759
particular

1161
00:50:41,579 --> 00:50:47,349
the question was what does it mean for

1162
00:50:43,779 --> 00:50:49,240
permutations I don't know what security

1163
00:50:47,349 --> 00:50:53,349
for permutations how do you argue this

1164
00:50:49,240 --> 00:50:54,970
anyway I have to say you use it in

1165
00:50:53,349 --> 00:50:58,390
constructor no and I think it's nice but

1166
00:50:54,970 --> 00:50:59,890
I think the anything what does

1167
00:50:58,390 --> 00:51:01,629
differential cryptanalysis mean for

1168
00:50:59,890 --> 00:51:13,868
permutations all this for me it's very

1169
00:51:01,630 --> 00:51:17,520
unclear but I think yeah you again so at

1170
00:51:13,869 --> 00:51:24,640
least I mean it's not romantic I guess

1171
00:51:17,520 --> 00:51:26,799
yes so for even men so maybe yeah it

1172
00:51:24,640 --> 00:51:28,509
could be I guess it again depends on the

1173
00:51:26,799 --> 00:51:32,650
mode and the exact location of the

1174
00:51:28,510 --> 00:51:35,890
subspace so that you use this SSI for

1175
00:51:32,650 --> 00:51:45,940
yeah so then again I guess it would be

1176
00:51:35,890 --> 00:51:48,160
allow you to distinguish the it likely

1177
00:51:45,940 --> 00:51:51,150
that there are exploitable invariant

1178
00:51:48,160 --> 00:51:55,359
subspace it is it's not less likely for

1179
00:51:51,150 --> 00:51:58,029
permutations then basically I think we

1180
00:51:55,359 --> 00:51:59,740
have freedom that you have a key where

1181
00:51:58,029 --> 00:52:01,720
you can find a subspace you know there's

1182
00:51:59,740 --> 00:52:02,680
no weak sub keys because there's no key

1183
00:52:01,720 --> 00:52:04,689
so yeah true

1184
00:52:02,680 --> 00:52:08,410
so that was my question okay yeah no I

1185
00:52:04,690 --> 00:52:10,779
got the question so I think I mean if

1186
00:52:08,410 --> 00:52:13,480
you look at the ingredient sub space or

1187
00:52:10,779 --> 00:52:15,789
the this is the text we have here what

1188
00:52:13,480 --> 00:52:18,640
happens a lot of the times is that the

1189
00:52:15,789 --> 00:52:22,510
zero key is actually weak and now the

1190
00:52:18,640 --> 00:52:24,538
zero key would would directly if this

1191
00:52:22,510 --> 00:52:27,339
would be a permutation it's basically

1192
00:52:24,539 --> 00:52:31,059
the cipher with the zero key round count

1193
00:52:27,339 --> 00:52:33,730
Stinson yeah but I mean taking zero key

1194
00:52:31,059 --> 00:52:35,440
that you have wrong concerns and still

1195
00:52:33,730 --> 00:52:37,809
the zero key is going to be in in many

1196
00:52:35,440 --> 00:52:41,020
cases the zero key is in this class of

1197
00:52:37,809 --> 00:52:44,040
wikis which then would be the case for

1198
00:52:41,020 --> 00:52:46,590
that's that's directly the same

1199
00:52:44,040 --> 00:52:48,000
for permutation zero key is exactly what

1200
00:52:46,590 --> 00:52:49,560
you are you still have the count wrong

1201
00:52:48,000 --> 00:52:50,820
constants in the permutation you have

1202
00:52:49,560 --> 00:52:52,830
the wrong constant in the in the block

1203
00:52:50,820 --> 00:52:55,740
cipher so of course there is less

1204
00:52:52,830 --> 00:53:00,299
freedom but so from the examples I think

1205
00:52:55,740 --> 00:53:05,700
you should also check for No just asking

1206
00:53:00,300 --> 00:53:07,910
yeah yes but you're right there's less

1207
00:53:05,700 --> 00:53:07,910
freedom

1208
00:53:14,280 --> 00:53:21,500
some more questions for Kayla now get on

1209
00:53:19,770 --> 00:53:29,139
let's I'm Joanna

1210
00:53:21,500 --> 00:53:29,139
[Applause]

