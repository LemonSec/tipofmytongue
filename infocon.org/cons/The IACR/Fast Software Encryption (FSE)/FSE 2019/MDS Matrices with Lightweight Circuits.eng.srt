1
00:00:00,030 --> 00:00:04,470
hello everyone thank you for the

2
00:00:01,560 --> 00:00:08,160
introduction so this is a work about

3
00:00:04,470 --> 00:00:18,930
building diffusion layers for well

4
00:00:08,160 --> 00:00:21,150
typically block cyphers so we have

5
00:00:18,930 --> 00:00:23,600
general criteria for the security of

6
00:00:21,150 --> 00:00:26,340
block ciphers diffusion confusion

7
00:00:23,600 --> 00:00:28,320
diffusion means that every bit of the

8
00:00:26,340 --> 00:00:30,689
output must depend on every bit of the

9
00:00:28,320 --> 00:00:33,390
plaintext and a bit of the key this can

10
00:00:30,689 --> 00:00:36,180
be very simple dependencies so linear

11
00:00:33,390 --> 00:00:38,250
functions are usually used and confusion

12
00:00:36,180 --> 00:00:40,920
means that there should be a complex

13
00:00:38,250 --> 00:00:42,149
relation between the plaintext and

14
00:00:40,920 --> 00:00:44,730
ciphertext

15
00:00:42,149 --> 00:00:49,140
so for this we use nonlinear operations

16
00:00:44,730 --> 00:00:51,148
which we'll call s boxes and a very

17
00:00:49,140 --> 00:00:59,160
typical way to design such a block

18
00:00:51,149 --> 00:01:01,170
cipher is the SPN structure sorry okay

19
00:00:59,160 --> 00:01:03,690
here we have two rounds on this SP n

20
00:01:01,170 --> 00:01:06,750
structure so one in one round you have

21
00:01:03,690 --> 00:01:08,700
the first a confusion layer with a small

22
00:01:06,750 --> 00:01:10,830
S boxes applied in parallel then a

23
00:01:08,700 --> 00:01:13,530
diffusion layer with a big diffusion

24
00:01:10,830 --> 00:01:18,000
matrix applied on the whole state and

25
00:01:13,530 --> 00:01:19,770
then a run constant round one key

26
00:01:18,000 --> 00:01:21,689
addition and you have to read this as

27
00:01:19,770 --> 00:01:24,449
many times as you need to get your

28
00:01:21,689 --> 00:01:30,539
security here we will be focusing on

29
00:01:24,450 --> 00:01:33,299
this el diffusion layer and so typically

30
00:01:30,540 --> 00:01:35,369
we will try to resist differential and

31
00:01:33,299 --> 00:01:37,950
linear attack so here I will mostly

32
00:01:35,369 --> 00:01:39,450
focus focus on differential attacks the

33
00:01:37,950 --> 00:01:42,540
idea of a differential attack is well

34
00:01:39,450 --> 00:01:44,399
you look at the input X the output Y and

35
00:01:42,540 --> 00:01:46,439
you look at what happens when you have a

36
00:01:44,399 --> 00:01:48,570
difference on the input a what

37
00:01:46,439 --> 00:01:51,148
difference on the output B you get and

38
00:01:48,570 --> 00:01:53,699
if for some difference is a B you have

39
00:01:51,149 --> 00:01:55,380
very high probability that this

40
00:01:53,700 --> 00:01:58,979
difference a on the input gives a

41
00:01:55,380 --> 00:02:01,289
difference B on the output then you can

42
00:01:58,979 --> 00:02:05,670
distinguish your cipher from a random

43
00:02:01,290 --> 00:02:07,860
permutation and possibly attack so the

44
00:02:05,670 --> 00:02:10,890
probability of such different attacks

45
00:02:07,860 --> 00:02:13,410
depends on the S box with a certain

46
00:02:10,889 --> 00:02:16,440
function of the S box and on the

47
00:02:13,410 --> 00:02:19,260
diffusion layer and actually what gives

48
00:02:16,440 --> 00:02:21,780
the security against these kind of the

49
00:02:19,260 --> 00:02:23,970
tanks are active as boxes what we call

50
00:02:21,780 --> 00:02:25,980
active as boxes are the yes box Edgewood

51
00:02:23,970 --> 00:02:28,260
which when you have a difference on the

52
00:02:25,980 --> 00:02:31,950
input a receive a nonzero input

53
00:02:28,260 --> 00:02:33,899
difference and their rule then of the

54
00:02:31,950 --> 00:02:37,560
diffusion matrix is to make sure that as

55
00:02:33,900 --> 00:02:42,780
many as possible s boxes are active

56
00:02:37,560 --> 00:02:46,140
that's what this formula here gives so

57
00:02:42,780 --> 00:02:48,510
if we look a bit closer here we usually

58
00:02:46,140 --> 00:02:51,420
consider counting the number of active s

59
00:02:48,510 --> 00:02:51,959
boxes in two successive layers of s

60
00:02:51,420 --> 00:02:54,089
boxes

61
00:02:51,960 --> 00:02:57,480
so you have one big in the field made

62
00:02:54,090 --> 00:03:00,540
function which can be seen in two ways

63
00:02:57,480 --> 00:03:05,070
either as a big function on the whole

64
00:03:00,540 --> 00:03:07,769
state or as a matrix on words because

65
00:03:05,070 --> 00:03:09,959
you can consider that you have for input

66
00:03:07,770 --> 00:03:12,300
and for output words in this case on the

67
00:03:09,960 --> 00:03:13,770
size of the S box and since its linear

68
00:03:12,300 --> 00:03:18,750
it will usually consider it to be a

69
00:03:13,770 --> 00:03:20,460
matrix and in this case what we want is

70
00:03:18,750 --> 00:03:22,980
to have as many active as both keys as

71
00:03:20,460 --> 00:03:25,740
possible which means basically that we

72
00:03:22,980 --> 00:03:27,899
want as many input words to be active

73
00:03:25,740 --> 00:03:30,660
and as many output words to be active as

74
00:03:27,900 --> 00:03:32,130
possible so to have differences and this

75
00:03:30,660 --> 00:03:34,620
is exactly what the branch number

76
00:03:32,130 --> 00:03:36,630
captures for different share tags and

77
00:03:34,620 --> 00:03:40,110
for linear attacks is the same thing we

78
00:03:36,630 --> 00:03:43,260
just used the transpose of the matrix so

79
00:03:40,110 --> 00:03:47,130
I'm talking about okay so here for

80
00:03:43,260 --> 00:03:49,950
instance we can have we can have these

81
00:03:47,130 --> 00:03:51,690
as boxes active so here we'll have five

82
00:03:49,950 --> 00:03:53,429
active s boxes in two rounds

83
00:03:51,690 --> 00:03:57,510
that's how we count and the best we can

84
00:03:53,430 --> 00:03:59,700
do is well having one if we have only

85
00:03:57,510 --> 00:04:02,730
one active S box on the input we cannot

86
00:03:59,700 --> 00:04:04,859
have more than all the output words

87
00:04:02,730 --> 00:04:07,679
active so this is the best we can get

88
00:04:04,860 --> 00:04:11,250
and the diffusion matrices which reach

89
00:04:07,680 --> 00:04:12,810
this optimum are called MDS because they

90
00:04:11,250 --> 00:04:17,279
are equivalent to a maximum distance

91
00:04:12,810 --> 00:04:19,769
separable codes so I'm talking about

92
00:04:17,279 --> 00:04:21,959
matrices because we represent this as

93
00:04:19,769 --> 00:04:24,870
matrices usually matrices on a finite

94
00:04:21,959 --> 00:04:26,940
field so we define the primitive element

95
00:04:24,870 --> 00:04:28,770
X 1 F 2 to the M

96
00:04:26,940 --> 00:04:32,160
and then the words and the coefficients

97
00:04:28,770 --> 00:04:35,010
can be considered as elements of this

98
00:04:32,160 --> 00:04:37,920
field so polynomials in X with binary

99
00:04:35,010 --> 00:04:41,430
coefficients and we usually represent

100
00:04:37,920 --> 00:04:43,890
them two with integers by just setting

101
00:04:41,430 --> 00:04:48,930
that X is equal to two so we have a

102
00:04:43,890 --> 00:04:50,550
binary decomposition of an integer we

103
00:04:48,930 --> 00:04:52,950
get these kind of matrices here four by

104
00:04:50,550 --> 00:04:56,310
four matrix this is the Mexican from the

105
00:04:52,950 --> 00:04:58,560
AES and this one is MDS so it's optimal

106
00:04:56,310 --> 00:05:01,380
and the good thing is we can

107
00:04:58,560 --> 00:05:06,390
characterize which matrices are optimal

108
00:05:01,380 --> 00:05:09,420
our MDS or not on this matrix the idea

109
00:05:06,390 --> 00:05:12,570
is that matrix will be MDS if and only

110
00:05:09,420 --> 00:05:14,340
if all of its minors are nonzero the

111
00:05:12,570 --> 00:05:17,370
minors being the determinants of the

112
00:05:14,340 --> 00:05:19,140
square sub matrices so in particular the

113
00:05:17,370 --> 00:05:21,750
determinant of the whole matrix must be

114
00:05:19,140 --> 00:05:24,479
nonzero and the coefficients of the

115
00:05:21,750 --> 00:05:27,420
matrix must be nonzero so for example a

116
00:05:24,480 --> 00:05:33,660
binary matrix cannot be MDS because it

117
00:05:27,420 --> 00:05:36,030
will have zeros there has been a lot of

118
00:05:33,660 --> 00:05:38,430
previous work on this topic not to find

119
00:05:36,030 --> 00:05:40,590
MDS matrices because we know some but

120
00:05:38,430 --> 00:05:43,680
you try to reduce the cost of these MDS

121
00:05:40,590 --> 00:05:46,679
matrices and I will not go through all

122
00:05:43,680 --> 00:05:49,740
of it but just a few examples one which

123
00:05:46,680 --> 00:05:52,380
is nice I think is recursive matrices in

124
00:05:49,740 --> 00:05:54,030
which you have a trade-off between the

125
00:05:52,380 --> 00:05:58,500
size of the implementation and the time

126
00:05:54,030 --> 00:06:01,409
you need to implement if you don't

127
00:05:58,500 --> 00:06:04,770
implement MDS matrix it just implements

128
00:06:01,410 --> 00:06:07,290
a small matrix a of which a power I is

129
00:06:04,770 --> 00:06:10,289
MDS and then you iterate I times to get

130
00:06:07,290 --> 00:06:11,910
an MDS diffusion layer what hole has

131
00:06:10,290 --> 00:06:14,550
also been done a lot is trying to

132
00:06:11,910 --> 00:06:17,160
optimize the coefficients of the matrix

133
00:06:14,550 --> 00:06:19,560
what do I mean by this well if you look

134
00:06:17,160 --> 00:06:20,960
at this matrix we can imagine that we

135
00:06:19,560 --> 00:06:23,910
are going to do a matrix vector

136
00:06:20,960 --> 00:06:26,419
multiplication for which we have a fixed

137
00:06:23,910 --> 00:06:29,090
number of zeros and we have to do

138
00:06:26,419 --> 00:06:31,380
multiplications by each of the elements

139
00:06:29,090 --> 00:06:33,150
each of the coefficients of the matrix

140
00:06:31,380 --> 00:06:35,010
so if we have coefficients which are

141
00:06:33,150 --> 00:06:35,909
light weight to multiply in the final

142
00:06:35,010 --> 00:06:38,070
field that's better

143
00:06:35,910 --> 00:06:40,300
so one two and three are very nice in

144
00:06:38,070 --> 00:06:42,190
this case but

145
00:06:40,300 --> 00:06:44,940
the search space is huge people usually

146
00:06:42,190 --> 00:06:47,919
look at structured types of matrices in

147
00:06:44,940 --> 00:06:50,169
subspaces where we think are many MDS

148
00:06:47,919 --> 00:06:52,389
and matrices and then basically try to

149
00:06:50,169 --> 00:06:53,310
look at all the coefficients and take

150
00:06:52,389 --> 00:06:56,440
the best ones

151
00:06:53,310 --> 00:07:00,129
what is also doable is to go the other

152
00:06:56,440 --> 00:07:02,860
way around get out of the find field so

153
00:07:00,129 --> 00:07:05,169
had to have a larger search space and in

154
00:07:02,860 --> 00:07:07,259
that case maybe if we just take that the

155
00:07:05,169 --> 00:07:09,580
inputs are binary vectors and

156
00:07:07,259 --> 00:07:11,349
coefficients are n by n matrices maybe

157
00:07:09,580 --> 00:07:17,139
we have something less costly than

158
00:07:11,349 --> 00:07:19,150
finite to your multiplications so the

159
00:07:17,139 --> 00:07:21,219
big question here I'm talking about cost

160
00:07:19,150 --> 00:07:24,609
well how do we evaluate this cost

161
00:07:21,219 --> 00:07:26,560
well the real cost of an diffusion layer

162
00:07:24,610 --> 00:07:28,270
would be the number of bit wise exhaust

163
00:07:26,560 --> 00:07:30,699
number of operations that we need to

164
00:07:28,270 --> 00:07:33,818
implement this layer with the best

165
00:07:30,699 --> 00:07:35,979
implementation but we don't really know

166
00:07:33,819 --> 00:07:38,800
how to evaluate this so usually we use

167
00:07:35,979 --> 00:07:40,960
estimates the one which has been the

168
00:07:38,800 --> 00:07:42,909
most used in the liquid literature is

169
00:07:40,960 --> 00:07:44,620
the guzol count which is a quite naive

170
00:07:42,909 --> 00:07:47,319
way to count the number of bit wise

171
00:07:44,620 --> 00:07:49,840
souls but simply looking at the Hamming

172
00:07:47,319 --> 00:07:51,759
weight of the binary matrix and the

173
00:07:49,840 --> 00:07:53,130
problem of this is that in this kind of

174
00:07:51,759 --> 00:07:57,159
implementations you cannot reuse

175
00:07:53,130 --> 00:07:59,620
intermediate values and there has been

176
00:07:57,159 --> 00:08:02,800
some other kinds of metrics considered

177
00:07:59,620 --> 00:08:05,110
like local optimizations as I just

178
00:08:02,800 --> 00:08:06,699
mentioned trying to consider that the

179
00:08:05,110 --> 00:08:09,039
cost is the cost of multiplying the

180
00:08:06,699 --> 00:08:11,680
matrix so you have a fixed number of

181
00:08:09,039 --> 00:08:15,909
zeros and then you need to have the cost

182
00:08:11,680 --> 00:08:18,009
of multiplicative playing multiplying by

183
00:08:15,909 --> 00:08:20,500
each of the coefficients of the matrix

184
00:08:18,009 --> 00:08:23,860
and then you try to reduce the cost of

185
00:08:20,500 --> 00:08:26,680
each coefficient independently so it's

186
00:08:23,860 --> 00:08:29,349
local optimizations and what has been

187
00:08:26,680 --> 00:08:34,870
considered recently now is a global

188
00:08:29,349 --> 00:08:37,269
optimization so there has been a another

189
00:08:34,870 --> 00:08:41,320
work than ours in parallel done by a

190
00:08:37,269 --> 00:08:44,920
team from boham so concept and what they

191
00:08:41,320 --> 00:08:46,329
what they did is they use Hardware

192
00:08:44,920 --> 00:08:49,839
synthesis tools straight line

193
00:08:46,329 --> 00:08:52,279
programming and to try to find good

194
00:08:49,839 --> 00:08:56,569
circuits to implement

195
00:08:52,279 --> 00:09:00,649
burner mattresses we use also a global

196
00:08:56,569 --> 00:09:03,079
approach in which the idea is that you

197
00:09:00,649 --> 00:09:05,389
look you try to find an implementation

198
00:09:03,079 --> 00:09:07,729
of the matrix as a circuit and you try

199
00:09:05,389 --> 00:09:11,209
to find this implementation with the

200
00:09:07,730 --> 00:09:13,879
least number of operations and in our

201
00:09:11,209 --> 00:09:18,680
case we only use operations on words not

202
00:09:13,879 --> 00:09:21,410
on on bits because it's too costly so if

203
00:09:18,680 --> 00:09:26,469
we compare these kind of metrics here

204
00:09:21,410 --> 00:09:29,779
for this matrix with the count as a

205
00:09:26,470 --> 00:09:31,519
matrix multiplication we would need six

206
00:09:29,779 --> 00:09:33,800
multiplications by two two

207
00:09:31,519 --> 00:09:36,290
multiplications by three and six exhaust

208
00:09:33,800 --> 00:09:38,420
to perform the matrix multiplication but

209
00:09:36,290 --> 00:09:41,449
actually this circuit here does exactly

210
00:09:38,420 --> 00:09:43,309
the same operation but by reusing some

211
00:09:41,449 --> 00:09:45,709
intermediate values we just need one

212
00:09:43,309 --> 00:09:50,529
multiplication by 2 and 5 eggs also it's

213
00:09:45,709 --> 00:09:52,969
is the metric that we will use and

214
00:09:50,529 --> 00:09:56,540
actually we will get out of the finite

215
00:09:52,970 --> 00:09:58,910
field what we will do is replace this

216
00:09:56,540 --> 00:10:02,719
multiplication by 2 here in the finite

217
00:09:58,910 --> 00:10:05,360
field by any linear mapping alpha on f2

218
00:10:02,720 --> 00:10:07,819
to the N and then we will optimize in

219
00:10:05,360 --> 00:10:09,860
two steps first we will try to find a

220
00:10:07,819 --> 00:10:11,719
matrix and alpha which is lightweight

221
00:10:09,860 --> 00:10:13,699
and then we will try to find the

222
00:10:11,720 --> 00:10:17,240
lightest implementation of this alpha

223
00:10:13,699 --> 00:10:19,128
which gives an MDS matrix so what we

224
00:10:17,240 --> 00:10:22,759
have in the end is not necessarily a

225
00:10:19,129 --> 00:10:26,240
field it's a polynomial ring in general

226
00:10:22,759 --> 00:10:28,490
and so basically the the words and the

227
00:10:26,240 --> 00:10:30,949
coefficients are not elements of a

228
00:10:28,490 --> 00:10:33,230
finite field they are not polynomials in

229
00:10:30,949 --> 00:10:35,209
a primitive element X they are

230
00:10:33,230 --> 00:10:40,399
polynomials with binary coefficients in

231
00:10:35,209 --> 00:10:42,709
alpha but what is nice is that we can

232
00:10:40,399 --> 00:10:45,410
characterize exactly which matrices are

233
00:10:42,709 --> 00:10:48,709
interesting which for more matrices in

234
00:10:45,410 --> 00:10:52,519
alpha are interesting which ones can

235
00:10:48,709 --> 00:10:56,300
give MDS instantiations we will call

236
00:10:52,519 --> 00:10:58,370
them formally MDS it simply corresponds

237
00:10:56,300 --> 00:11:01,490
to once again having all the minors of

238
00:10:58,370 --> 00:11:05,960
the matrix which is a formal matrix with

239
00:11:01,490 --> 00:11:09,710
nonzero and these minors being now

240
00:11:05,960 --> 00:11:14,000
mewls in alpha and we know we can prove

241
00:11:09,710 --> 00:11:16,760
that if the miners are non zero then we

242
00:11:14,000 --> 00:11:19,160
can have an MDS instantiation and

243
00:11:16,760 --> 00:11:24,980
otherwise it's not possible so really we

244
00:11:19,160 --> 00:11:27,020
missed no one and then we did so in two

245
00:11:24,980 --> 00:11:28,690
steps the rest of the talk would be in

246
00:11:27,020 --> 00:11:31,970
two steps first trying to find

247
00:11:28,690 --> 00:11:34,190
lightweight formal MDS matrices and then

248
00:11:31,970 --> 00:11:36,620
trying to instantiate in the like this

249
00:11:34,190 --> 00:11:40,970
way possible so our search space is this

250
00:11:36,620 --> 00:11:43,130
for the formal addresses we ran a search

251
00:11:40,970 --> 00:11:46,580
of a small circuits trying to find the

252
00:11:43,130 --> 00:11:48,380
the first one which is NDS basically the

253
00:11:46,580 --> 00:11:52,190
operations that we use our only word

254
00:11:48,380 --> 00:11:54,140
wise operations so word wise owes this

255
00:11:52,190 --> 00:11:59,420
linear mapping alpha which is undefined

256
00:11:54,140 --> 00:12:01,490
and copy operations onwards and we have

257
00:11:59,420 --> 00:12:03,860
a few registers to suit to store the

258
00:12:01,490 --> 00:12:06,380
values we need at least one register per

259
00:12:03,860 --> 00:12:10,220
word and we have a few more registers to

260
00:12:06,380 --> 00:12:13,910
allow for more complex operations the

261
00:12:10,220 --> 00:12:16,670
main idea of this search well is that we

262
00:12:13,910 --> 00:12:19,760
use a graph based search with a Dijkstra

263
00:12:16,670 --> 00:12:22,520
algorithm and so a node of this graph

264
00:12:19,760 --> 00:12:24,700
would be a matrix represented by a

265
00:12:22,520 --> 00:12:27,890
sequence of operations so a circuit and

266
00:12:24,700 --> 00:12:31,040
an edge would be adding an operation to

267
00:12:27,890 --> 00:12:33,170
the node so in this case the lightest

268
00:12:31,040 --> 00:12:35,630
circuit one MDS matrix would be the

269
00:12:33,170 --> 00:12:38,510
shortest path from the root which is the

270
00:12:35,630 --> 00:12:42,980
identity to and MDS matrix so it's just

271
00:12:38,510 --> 00:12:45,200
a texture algorithm basically this

272
00:12:42,980 --> 00:12:47,690
search is very costly in particular in

273
00:12:45,200 --> 00:12:50,600
terms of memory for three by three

274
00:12:47,690 --> 00:12:54,110
matrices it was very fast very easy but

275
00:12:50,600 --> 00:12:56,060
for 4x4 matrices it was already very not

276
00:12:54,110 --> 00:12:57,980
that much time consuming but memory

277
00:12:56,060 --> 00:13:01,040
consuming and for four by five by five

278
00:12:57,980 --> 00:13:02,570
matrices it's just not doable and what

279
00:13:01,040 --> 00:13:04,490
we get in the end is a collection of

280
00:13:02,570 --> 00:13:06,830
angeas matrices formally and des

281
00:13:04,490 --> 00:13:08,930
matrices we've a trade-off between the

282
00:13:06,830 --> 00:13:11,720
cost of the implementation and the depth

283
00:13:08,930 --> 00:13:14,300
of the circuit so the depth being

284
00:13:11,720 --> 00:13:18,310
related to how long how much time it

285
00:13:14,300 --> 00:13:18,310
takes to perform this diffusion layer

286
00:13:18,740 --> 00:13:23,000
so if we look at what it looks like

287
00:13:20,840 --> 00:13:26,900
basically it's like this we spawn a big

288
00:13:23,000 --> 00:13:31,040
big graph and then each each edge I've

289
00:13:26,900 --> 00:13:32,689
just adds an operation and we did a lot

290
00:13:31,040 --> 00:13:35,810
of optimization for this because it's

291
00:13:32,690 --> 00:13:38,300
not doable just like that at many levels

292
00:13:35,810 --> 00:13:40,310
we did optimizations one of the big ones

293
00:13:38,300 --> 00:13:43,609
is rather than using an extra argument

294
00:13:40,310 --> 00:13:46,250
we use an a-star approach a star is a

295
00:13:43,610 --> 00:13:48,170
guide that Dijkstra in which rather than

296
00:13:46,250 --> 00:13:51,140
having for each node its weight which is

297
00:13:48,170 --> 00:13:53,839
the weight from the origin we also add

298
00:13:51,140 --> 00:13:56,150
an estimate of how much it would take to

299
00:13:53,840 --> 00:13:59,420
get to the objective so here our

300
00:13:56,150 --> 00:14:02,510
estimate is how far are we from an MDS

301
00:13:59,420 --> 00:14:05,060
matrix and what we use is simply that if

302
00:14:02,510 --> 00:14:08,000
we have a column with a 0 in our matrix

303
00:14:05,060 --> 00:14:11,510
then it cannot be part of an MDS matrix

304
00:14:08,000 --> 00:14:13,880
and if we have linearly dependent

305
00:14:11,510 --> 00:14:17,390
columns they cannot be part of an MDS

306
00:14:13,880 --> 00:14:22,310
matrix together so what we use in the

307
00:14:17,390 --> 00:14:25,580
end as our estimate is the rank of the

308
00:14:22,310 --> 00:14:30,109
matrix without the comes which contains

309
00:14:25,580 --> 00:14:31,760
zeros so we need at least K minus M a

310
00:14:30,110 --> 00:14:34,250
worldwide exhaust to get to an MDS

311
00:14:31,760 --> 00:14:36,680
matrix where K is the number of words

312
00:14:34,250 --> 00:14:38,750
and M the rank of this matrix and the

313
00:14:36,680 --> 00:14:43,339
result is that it runs much faster with

314
00:14:38,750 --> 00:14:48,080
much less memory so using this we get a

315
00:14:43,340 --> 00:14:52,190
lot of results like 20 a very good and

316
00:14:48,080 --> 00:14:54,860
and yes formally MDS matrices and now we

317
00:14:52,190 --> 00:14:57,890
need to instantiate them so we have

318
00:14:54,860 --> 00:14:59,960
formally MDS matrix matrices in alpha

319
00:14:57,890 --> 00:15:03,560
and now we want to find the best

320
00:14:59,960 --> 00:15:05,540
instantiation for this alpha which is

321
00:15:03,560 --> 00:15:11,119
the one which will give something MDS

322
00:15:05,540 --> 00:15:13,490
and lightweight and the good thing is we

323
00:15:11,120 --> 00:15:16,220
can characterize very efficiently if an

324
00:15:13,490 --> 00:15:18,410
instantiation will be MDS or not so the

325
00:15:16,220 --> 00:15:21,080
basic way to do this would be to just

326
00:15:18,410 --> 00:15:24,230
take a linear mapping a evaluate the

327
00:15:21,080 --> 00:15:26,450
matrix at point a and see if all the

328
00:15:24,230 --> 00:15:30,770
minors are non singular which is just

329
00:15:26,450 --> 00:15:32,550
basic definition of an MDS matrix but

330
00:15:30,770 --> 00:15:34,470
actually you can start by compute

331
00:15:32,550 --> 00:15:38,519
the miners directly on the formal

332
00:15:34,470 --> 00:15:40,649
matrices so here I denote them mij the

333
00:15:38,519 --> 00:15:42,839
four more miners in which are

334
00:15:40,649 --> 00:15:45,180
polynomials and alpha and then we can

335
00:15:42,839 --> 00:15:49,500
evaluate these polynomials at Point a

336
00:15:45,180 --> 00:15:51,660
and and them it is an equivalence for

337
00:15:49,500 --> 00:15:54,060
the instantiation to be and yes or for

338
00:15:51,660 --> 00:15:58,140
these miners to be non-singular it's not

339
00:15:54,060 --> 00:16:00,089
obvious but it works and actually we can

340
00:15:58,140 --> 00:16:02,730
go even further than that using the

341
00:16:00,089 --> 00:16:07,230
minimal polynomial of the linear mapping

342
00:16:02,730 --> 00:16:09,810
a new way we have an equivalence the

343
00:16:07,230 --> 00:16:12,959
instantiation will be MDS if and only if

344
00:16:09,810 --> 00:16:16,199
the minimal polynomial is a prime with

345
00:16:12,959 --> 00:16:18,089
all the formal miners so this is very

346
00:16:16,200 --> 00:16:20,160
efficient because when we want to is

347
00:16:18,089 --> 00:16:23,640
tenshi eight we just have to compute all

348
00:16:20,160 --> 00:16:26,010
the formal miners M of M IJ once for the

349
00:16:23,640 --> 00:16:28,350
matrix with formal matrix and then for

350
00:16:26,010 --> 00:16:30,060
each instance that we want to try we'll

351
00:16:28,350 --> 00:16:33,180
just compute its minimal polynomial and

352
00:16:30,060 --> 00:16:37,260
see if its primary order form or minors

353
00:16:33,180 --> 00:16:40,260
and actually we can do this just by

354
00:16:37,260 --> 00:16:42,300
theory by going back to the finite field

355
00:16:40,260 --> 00:16:45,120
so what we want is to find a linear

356
00:16:42,300 --> 00:16:47,399
mapping a such that it's minimal

357
00:16:45,120 --> 00:16:50,600
polynomial is prime with all the formal

358
00:16:47,399 --> 00:16:52,410
minors and if we just look at

359
00:16:50,600 --> 00:16:55,260
multiplications and a finite field who

360
00:16:52,410 --> 00:16:56,819
can do this if we just take the greater

361
00:16:55,260 --> 00:17:00,390
than the degrees of all the formal

362
00:16:56,820 --> 00:17:03,300
minors then if you choose PI and a

363
00:17:00,390 --> 00:17:05,579
reducible polynomial of degree D well

364
00:17:03,300 --> 00:17:09,389
just by construction pi is relatively

365
00:17:05,579 --> 00:17:11,849
prime with all the formal minors and so

366
00:17:09,390 --> 00:17:14,339
if we take for a the companion matrix of

367
00:17:11,849 --> 00:17:17,069
by well this will give an MDS

368
00:17:14,339 --> 00:17:18,208
instantiation and this a just

369
00:17:17,069 --> 00:17:21,510
corresponds to a finite for

370
00:17:18,209 --> 00:17:23,459
multiplication and which what is nice is

371
00:17:21,510 --> 00:17:26,189
that we know how to do this at a low

372
00:17:23,459 --> 00:17:29,669
cost because if we pick for pi just a

373
00:17:26,189 --> 00:17:31,980
few coefficients for instance trinomial

374
00:17:29,669 --> 00:17:35,970
well this can be implemented with just

375
00:17:31,980 --> 00:17:40,320
one rotation and ones one bit was saw so

376
00:17:35,970 --> 00:17:43,320
almost nothing so that's what we did and

377
00:17:40,320 --> 00:17:46,320
that's what we did in the end these are

378
00:17:43,320 --> 00:17:48,960
the matrices that we used for a

379
00:17:46,320 --> 00:17:50,669
we just use these for mattresses it's

380
00:17:48,960 --> 00:17:53,460
not obvious that it works for everything

381
00:17:50,670 --> 00:17:55,830
but in our case for all of our formal

382
00:17:53,460 --> 00:17:59,880
mattresses just these four instances of

383
00:17:55,830 --> 00:18:01,889
a we're enough to instantiate so at this

384
00:17:59,880 --> 00:18:03,990
point we need to fix the size of the

385
00:18:01,890 --> 00:18:06,180
words that we are working on only know

386
00:18:03,990 --> 00:18:09,090
do we need to do this all the rest of

387
00:18:06,180 --> 00:18:12,330
the time we had words on f2 to the N now

388
00:18:09,090 --> 00:18:14,399
we need to fix n so we chose two sizes

389
00:18:12,330 --> 00:18:18,540
which are typical for s boxes for bits

390
00:18:14,400 --> 00:18:22,290
and 8 bits and we go for all of them

391
00:18:18,540 --> 00:18:24,720
wins accentuated using a four here which

392
00:18:22,290 --> 00:18:27,480
is the companion matrix of an

393
00:18:24,720 --> 00:18:28,440
irreducible polynomial so exactly as I

394
00:18:27,480 --> 00:18:31,470
told you it's a finally fill

395
00:18:28,440 --> 00:18:34,260
multiplication it's its inverse for

396
00:18:31,470 --> 00:18:36,150
eight bits we cannot have irreducible

397
00:18:34,260 --> 00:18:39,870
polynomials but it's just the square of

398
00:18:36,150 --> 00:18:44,310
the polynomial here and using this well

399
00:18:39,870 --> 00:18:46,860
we get some quite good results if we

400
00:18:44,310 --> 00:18:49,340
compare this with the literature we need

401
00:18:46,860 --> 00:18:52,620
to compare with two types of results

402
00:18:49,340 --> 00:18:55,949
results from more than say one year ago

403
00:18:52,620 --> 00:18:58,350
and without since then because as I said

404
00:18:55,950 --> 00:18:59,400
in the beginning and there was a team

405
00:18:58,350 --> 00:19:03,480
from Boehm

406
00:18:59,400 --> 00:19:05,790
so Khan said and who who did the same

407
00:19:03,480 --> 00:19:08,100
kind of approach for the the globe

408
00:19:05,790 --> 00:19:10,250
optimization and they get quite good

409
00:19:08,100 --> 00:19:14,370
results too but if we compare with what

410
00:19:10,250 --> 00:19:17,070
existed just before this for 4x4

411
00:19:14,370 --> 00:19:20,010
matrices with 8-bit words or the best

412
00:19:17,070 --> 00:19:25,379
that existed before was 106 bitwise

413
00:19:20,010 --> 00:19:27,540
exuse for MDS matrix concept and 72

414
00:19:25,380 --> 00:19:29,850
bitwise exhaust and then and the depth

415
00:19:27,540 --> 00:19:33,300
of 6 and we managed to do a bit better

416
00:19:29,850 --> 00:19:37,649
than that and actually also have a very

417
00:19:33,300 --> 00:19:40,350
variety of possible depths and it's

418
00:19:37,650 --> 00:19:44,130
exactly the same thing for 4x4 matrices

419
00:19:40,350 --> 00:19:46,350
on 4-bit words so these are very

420
00:19:44,130 --> 00:19:49,800
lightweight MGS matrices that can be

421
00:19:46,350 --> 00:19:52,260
used in lightweight ciphers now and for

422
00:19:49,800 --> 00:19:56,940
instance it was used now in the one of

423
00:19:52,260 --> 00:19:58,470
the NIST submissions Satriano thank you

424
00:19:56,940 --> 00:19:59,230
for your attention if you have any

425
00:19:58,470 --> 00:20:15,250
questions

426
00:19:59,230 --> 00:20:17,470
thank you very much any questions so you

427
00:20:15,250 --> 00:20:21,730
told us that your search algorithms

428
00:20:17,470 --> 00:20:24,549
became infeasible at 5x5 is there any

429
00:20:21,730 --> 00:20:26,200
way to use heuristics or a way to reduce

430
00:20:24,549 --> 00:20:30,010
the space to still make further progress

431
00:20:26,200 --> 00:20:34,450
on it seems complicated but complicated

432
00:20:30,010 --> 00:20:38,379
for MDS matrices we also tried for near

433
00:20:34,450 --> 00:20:41,080
MDS matrices and that may be with a lot

434
00:20:38,380 --> 00:20:44,320
of work could work on four five by five

435
00:20:41,080 --> 00:20:48,730
bit size box and matrices but I don't

436
00:20:44,320 --> 00:20:51,970
think we can find MDS ones using this it

437
00:20:48,730 --> 00:20:55,929
seems too much things already 2.5

438
00:20:51,970 --> 00:21:01,059
terabytes of RAM for 4x4 matrices so

439
00:20:55,929 --> 00:21:02,769
it's a lot and 5x5 is not feasible and

440
00:21:01,059 --> 00:21:04,149
if you look at these matrices which you

441
00:21:02,769 --> 00:21:06,010
found do they have a special structure

442
00:21:04,149 --> 00:21:13,000
because we didn't show us how they look

443
00:21:06,010 --> 00:21:16,629
like yes some of them quite a few

444
00:21:13,000 --> 00:21:18,370
actually are for the 4x4 case have for

445
00:21:16,630 --> 00:21:20,980
people who know these kind of stuffs

446
00:21:18,370 --> 00:21:25,418
have some kind of a generalized feistel

447
00:21:20,980 --> 00:21:27,010
structure more or less so maybe there's

448
00:21:25,419 --> 00:21:30,220
something to find that but we didn't

449
00:21:27,010 --> 00:21:35,730
understand exactly why maybe that's just

450
00:21:30,220 --> 00:21:35,730
the way we we put them in the index keys

451
00:21:36,029 --> 00:21:41,370
okay if there's no more questions let's

452
00:21:38,440 --> 00:21:41,370
thank CMS yeah

