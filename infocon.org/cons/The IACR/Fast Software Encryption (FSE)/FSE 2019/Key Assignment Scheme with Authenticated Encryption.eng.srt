1
00:00:01,700 --> 00:00:40,620
welcome to the so this is a joint in

2
00:00:36,750 --> 00:00:42,899
this presentation first I'll go over the

3
00:00:40,620 --> 00:00:45,328
introductions followed by the motivation

4
00:00:42,899 --> 00:00:48,539
and then define the problem statements

5
00:00:45,329 --> 00:00:51,690
then for the solutions will twist first

6
00:00:48,539 --> 00:00:54,300
use the definition of cast a e followed

7
00:00:51,690 --> 00:00:59,430
by the construction and then companion

8
00:00:54,300 --> 00:01:02,910
and then I continue to suppose there is

9
00:00:59,430 --> 00:01:08,220
a structure a heretical exit structure

10
00:01:02,910 --> 00:01:12,000
as shown in the slide here and she has

11
00:01:08,220 --> 00:01:15,770
some information say again the file she

12
00:01:12,000 --> 00:01:21,869
wants to impart a part of this file to

13
00:01:15,770 --> 00:01:25,350
the Dean F a and he gets a file safe a

14
00:01:21,869 --> 00:01:28,130
green file now the Dean MP further gives

15
00:01:25,350 --> 00:01:31,439
a part of his own files to a faculty

16
00:01:28,130 --> 00:01:34,439
which we call as a blue file and now the

17
00:01:31,439 --> 00:01:37,130
faculty gives a part of his blue file to

18
00:01:34,439 --> 00:01:44,399
a student which we call as a red file

19
00:01:37,130 --> 00:01:47,460
the file can have huge represented where

20
00:01:44,399 --> 00:01:49,290
a big file belongs to the director the

21
00:01:47,460 --> 00:01:51,630
yellow files containing all the four

22
00:01:49,290 --> 00:01:54,409
parts red blue green and yellow the

23
00:01:51,630 --> 00:01:57,960
student contains will be the best part

24
00:01:54,409 --> 00:02:01,219
this difference the hierarchical actual

25
00:01:57,960 --> 00:02:01,219
structure of the filter

26
00:02:05,820 --> 00:02:11,850
access to unauthorized ones it requires

27
00:02:09,449 --> 00:02:15,000
a method to generate and retrieve the

28
00:02:11,850 --> 00:02:17,820
keys for accessible parts of the file it

29
00:02:15,000 --> 00:02:19,800
is it finds its deployment in the

30
00:02:17,820 --> 00:02:22,709
business and other areas of the private

31
00:02:19,800 --> 00:02:26,700
sector and the solution is key

32
00:02:22,710 --> 00:02:28,800
assignment scheme cause a key assignment

33
00:02:26,700 --> 00:02:31,200
scheme is basically a key generation

34
00:02:28,800 --> 00:02:33,660
scheme where the key required for

35
00:02:31,200 --> 00:02:37,109
encryption and decryption of a file can

36
00:02:33,660 --> 00:02:41,100
be obtained by an authorized user only

37
00:02:37,110 --> 00:02:44,250
it achieves access control privacy and

38
00:02:41,100 --> 00:02:46,220
it finds his application in the access

39
00:02:44,250 --> 00:02:50,010
control in the hierarchically structured

40
00:02:46,220 --> 00:02:50,520
organization there has been a huge work

41
00:02:50,010 --> 00:02:52,709
done

42
00:02:50,520 --> 00:02:55,350
in last three and a half decades in

43
00:02:52,709 --> 00:03:04,110
defining new and efficient methods of

44
00:02:55,350 --> 00:03:07,079
cos schemes the motivation from is the

45
00:03:04,110 --> 00:03:13,410
fact that when an authentication of data

46
00:03:07,080 --> 00:03:16,080
are not integral part is possible so now

47
00:03:13,410 --> 00:03:19,950
we need to combine cars with

48
00:03:16,080 --> 00:03:23,430
authenticated encryption and the

49
00:03:19,950 --> 00:03:26,160
question is is cause he really required

50
00:03:23,430 --> 00:03:30,080
as a new primitive or the combination of

51
00:03:26,160 --> 00:03:33,299
cos and AE is sufficient

52
00:03:30,080 --> 00:03:36,780
so first let's see a construction which

53
00:03:33,299 --> 00:03:39,959
is a simple combination and a very

54
00:03:36,780 --> 00:03:43,470
natural construction forecast AE here we

55
00:03:39,959 --> 00:03:46,560
are using the ghazal scheme which is Sai

56
00:03:43,470 --> 00:03:49,739
and has two algorithms key generation

57
00:03:46,560 --> 00:03:52,920
and key derivation and the AES scheme

58
00:03:49,739 --> 00:03:56,670
Omega which has three algorithms the key

59
00:03:52,920 --> 00:03:59,609
generation encryption and decryption the

60
00:03:56,670 --> 00:04:02,070
cause a scheme which here has three

61
00:03:59,610 --> 00:04:05,510
algorithms will be explained very

62
00:04:02,070 --> 00:04:07,859
quickly in the definitions part but

63
00:04:05,510 --> 00:04:12,060
let's design the natural construction

64
00:04:07,860 --> 00:04:14,639
forecast a year so in the encryption

65
00:04:12,060 --> 00:04:18,480
algorithm first of all we use the cause

66
00:04:14,639 --> 00:04:19,230
scheme to generate all the keys the

67
00:04:18,480 --> 00:04:23,390
secret

68
00:04:19,230 --> 00:04:27,870
and the public values and using each key

69
00:04:23,390 --> 00:04:29,520
for every file for every user we encrypt

70
00:04:27,870 --> 00:04:32,790
the files to generate the cipher text

71
00:04:29,520 --> 00:04:36,180
and tag these cipher text and tag are

72
00:04:32,790 --> 00:04:40,260
then stored in the public values which

73
00:04:36,180 --> 00:04:44,460
we can assume to be cloud the key derive

74
00:04:40,260 --> 00:04:47,280
algorithm is just invocation of the key

75
00:04:44,460 --> 00:04:50,250
driver algorithm for the Casa scheme and

76
00:04:47,280 --> 00:04:52,679
the decryption algorithm is the

77
00:04:50,250 --> 00:04:54,990
invocation of key derive algorithm

78
00:04:52,680 --> 00:04:57,690
followed by the decryption of AE

79
00:04:54,990 --> 00:05:01,080
algorithm this is the natural

80
00:04:57,690 --> 00:05:03,390
construction construction alpha but we

81
00:05:01,080 --> 00:05:07,430
have found that there is an attack on

82
00:05:03,390 --> 00:05:12,300
construction alpha suppose here is a

83
00:05:07,430 --> 00:05:17,040
small example a user you with the secret

84
00:05:12,300 --> 00:05:20,430
key K you and the secret values su wants

85
00:05:17,040 --> 00:05:24,360
to attack the user V so what he can do

86
00:05:20,430 --> 00:05:26,930
is he can compute the values kV using

87
00:05:24,360 --> 00:05:30,480
the de our algorithm of casts a scheme

88
00:05:26,930 --> 00:05:34,830
then he can generate a new file F prime

89
00:05:30,480 --> 00:05:38,010
V which is different from FV and then he

90
00:05:34,830 --> 00:05:41,460
can encrypt F prime V to generate C

91
00:05:38,010 --> 00:05:43,650
prime V and D prime V now he can just

92
00:05:41,460 --> 00:05:45,989
replace C V and DV

93
00:05:43,650 --> 00:05:50,250
with C prime V and P prime V on the

94
00:05:45,990 --> 00:05:52,830
cloud and any user who tries to decrypt

95
00:05:50,250 --> 00:05:55,710
the file corresponding to user V will

96
00:05:52,830 --> 00:06:00,900
now get the file F prime V instead of

97
00:05:55,710 --> 00:06:03,479
the file F V because of this attack it's

98
00:06:00,900 --> 00:06:07,169
not trivial to construct a cause AE

99
00:06:03,480 --> 00:06:09,620
scheme now moving on to a secure

100
00:06:07,170 --> 00:06:13,980
construction which is construction beta

101
00:06:09,620 --> 00:06:17,250
here we have made one changes the

102
00:06:13,980 --> 00:06:19,850
changes we have included the tag with

103
00:06:17,250 --> 00:06:23,130
the secret information of every user and

104
00:06:19,850 --> 00:06:26,700
therefore the attack that was possible

105
00:06:23,130 --> 00:06:30,140
in construction alpha here is not

106
00:06:26,700 --> 00:06:32,680
possible anymore in construction beta

107
00:06:30,140 --> 00:06:36,070
but the problem here is

108
00:06:32,680 --> 00:06:36,750
it is highly memory inefficient I'm

109
00:06:36,070 --> 00:06:39,870
sorry

110
00:06:36,750 --> 00:06:42,669
it's highly memory inefficient because

111
00:06:39,870 --> 00:06:47,139
every user has to store a large number

112
00:06:42,669 --> 00:06:50,080
of tags so we have seen that the trivial

113
00:06:47,139 --> 00:06:53,050
combination of caste and AE is insecure

114
00:06:50,080 --> 00:06:56,500
and the secure combination is memory and

115
00:06:53,050 --> 00:06:59,259
efficient that's why our question is can

116
00:06:56,500 --> 00:07:01,210
we construct a secure cos a scheme that

117
00:06:59,259 --> 00:07:04,060
solves hierarchical access control

118
00:07:01,210 --> 00:07:07,239
problem more efficiently than a simple

119
00:07:04,060 --> 00:07:09,419
combination of cos and AE executed in

120
00:07:07,240 --> 00:07:12,970
that order

121
00:07:09,419 --> 00:07:14,919
beginning with the COS AE definition key

122
00:07:12,970 --> 00:07:17,229
assignment scheme with authenticated

123
00:07:14,919 --> 00:07:20,229
encryption is a key generation scheme

124
00:07:17,229 --> 00:07:22,389
where the key required for encryption

125
00:07:20,229 --> 00:07:25,449
and decryption of a file can be obtained

126
00:07:22,389 --> 00:07:27,760
by only an authorized user and the

127
00:07:25,449 --> 00:07:31,479
message encryption and authentication is

128
00:07:27,760 --> 00:07:34,990
an integral part of the primitive itself

129
00:07:31,479 --> 00:07:39,250
it achieves access control along with

130
00:07:34,990 --> 00:07:41,410
privacy integrity and authenticity the

131
00:07:39,250 --> 00:07:45,669
three functionality is included in casts

132
00:07:41,410 --> 00:07:47,949
a e our first the encryption which is

133
00:07:45,669 --> 00:07:50,099
responsible for generation of keys and

134
00:07:47,949 --> 00:07:52,680
secret information for each user

135
00:07:50,099 --> 00:07:54,969
encryption of files for each user

136
00:07:52,680 --> 00:07:57,490
generating the public values for the

137
00:07:54,970 --> 00:07:59,710
system and distribution of keys and

138
00:07:57,490 --> 00:08:02,080
secret information to each user

139
00:07:59,710 --> 00:08:05,590
the second functionality is key

140
00:08:02,080 --> 00:08:09,520
derivation de R which is recomputation

141
00:08:05,590 --> 00:08:13,530
of decryption key of an inferior node or

142
00:08:09,520 --> 00:08:16,299
the subordinate node by a superior node

143
00:08:13,530 --> 00:08:18,760
the 3rd functionality is a decryption

144
00:08:16,300 --> 00:08:21,430
algorithm where the decryption and

145
00:08:18,760 --> 00:08:24,550
verification of ciphertext corresponding

146
00:08:21,430 --> 00:08:27,820
to the same node or the subordinate node

147
00:08:24,550 --> 00:08:31,240
takes place here is the formal

148
00:08:27,820 --> 00:08:34,779
definition of cos a which is given in

149
00:08:31,240 --> 00:08:37,479
even more details in the paper you can

150
00:08:34,779 --> 00:08:40,570
find the encryption algorithm here that

151
00:08:37,479 --> 00:08:43,690
takes the graph of hierarchical access

152
00:08:40,570 --> 00:08:45,570
structure and this all the files as the

153
00:08:43,690 --> 00:08:50,280
input and generates the C

154
00:08:45,570 --> 00:08:53,370
values keys and the public values the

155
00:08:50,280 --> 00:08:57,209
second is the key derive function which

156
00:08:53,370 --> 00:08:59,790
takes the graph the superior node the

157
00:08:57,210 --> 00:09:02,370
subordinate node the secret values of

158
00:08:59,790 --> 00:09:05,010
the sub or superior nodes and the public

159
00:09:02,370 --> 00:09:08,640
values to generate the key corresponding

160
00:09:05,010 --> 00:09:11,250
to the subordinate node and similar is

161
00:09:08,640 --> 00:09:13,290
the decryption algorithm which aims to

162
00:09:11,250 --> 00:09:18,210
generate the file for the subordinate

163
00:09:13,290 --> 00:09:21,270
node the correctness requires that the

164
00:09:18,210 --> 00:09:24,330
the derive algorithm derives the exact

165
00:09:21,270 --> 00:09:26,850
same key which was derived during the

166
00:09:24,330 --> 00:09:30,870
encryption process and the decryption

167
00:09:26,850 --> 00:09:34,170
requires that the file should be the

168
00:09:30,870 --> 00:09:36,060
same as the one encrypted here here we

169
00:09:34,170 --> 00:09:39,000
are considering three security issues

170
00:09:36,060 --> 00:09:41,219
the key recovery privacy and our

171
00:09:39,000 --> 00:09:46,880
consistency which have been realized

172
00:09:41,220 --> 00:09:49,350
using K R IND PRV and int security games

173
00:09:46,880 --> 00:09:52,020
now we move on to the casts ie

174
00:09:49,350 --> 00:09:55,830
constructions the first method is to

175
00:09:52,020 --> 00:09:58,230
construct casts ae is from cast chain so

176
00:09:55,830 --> 00:10:01,020
casts a each chain is a special type of

177
00:09:58,230 --> 00:10:04,830
cast ie where the access graph is a

178
00:10:01,020 --> 00:10:08,130
totally ordered set there is there is no

179
00:10:04,830 --> 00:10:11,000
hierarchical structure which is having

180
00:10:08,130 --> 00:10:14,820
multiple where a node has a multiple

181
00:10:11,000 --> 00:10:18,090
subordinate nodes every superior node

182
00:10:14,820 --> 00:10:20,340
has just one subordinate node and the

183
00:10:18,090 --> 00:10:22,620
second ingredient used here is modified

184
00:10:20,340 --> 00:10:25,440
chain partition algorithm this is a

185
00:10:22,620 --> 00:10:27,420
divide and conquer algorithm where first

186
00:10:25,440 --> 00:10:30,420
we partition the entire access graph

187
00:10:27,420 --> 00:10:32,000
into disjoint chains and then we

188
00:10:30,420 --> 00:10:35,209
designed casts a each chain

189
00:10:32,000 --> 00:10:38,670
corresponding to each of these trail now

190
00:10:35,210 --> 00:10:41,700
finally we securely join each of these

191
00:10:38,670 --> 00:10:44,400
casts a chains to form the cast AE for

192
00:10:41,700 --> 00:10:46,740
the full access graph in the paper we

193
00:10:44,400 --> 00:10:50,220
have proposed for constructions namely

194
00:10:46,740 --> 00:10:52,620
ABC and D which have the modified chain

195
00:10:50,220 --> 00:10:55,520
partition algorithm in common and they

196
00:10:52,620 --> 00:10:58,620
differ just in the cast a chain schemes

197
00:10:55,520 --> 00:10:59,189
the first casts a chain scheme that we

198
00:10:58,620 --> 00:11:02,040
have destroyed

199
00:10:59,190 --> 00:11:06,480
is 18 which is similar to our

200
00:11:02,040 --> 00:11:10,740
construction beta where we use the cast

201
00:11:06,480 --> 00:11:13,800
chain scheme sai and AE algorithm Omega

202
00:11:10,740 --> 00:11:18,390
and these toward the tags as secret

203
00:11:13,800 --> 00:11:21,120
values for every user the second

204
00:11:18,390 --> 00:11:25,860
construction is B chain which is

205
00:11:21,120 --> 00:11:29,310
inspired from Emily and we use Emily as

206
00:11:25,860 --> 00:11:32,100
a black box here so in the totally

207
00:11:29,310 --> 00:11:37,109
ordered set as shown here the encryption

208
00:11:32,100 --> 00:11:40,950
process is of is of here is described

209
00:11:37,110 --> 00:11:43,020
here where first we encrypt the file for

210
00:11:40,950 --> 00:11:46,560
the user you tree which is at the bottom

211
00:11:43,020 --> 00:11:50,819
of this axis graph then for user u2 and

212
00:11:46,560 --> 00:11:55,140
for user u1 and whenever we encrypt the

213
00:11:50,820 --> 00:11:57,750
file for user we include the key into

214
00:11:55,140 --> 00:12:00,870
the file itself before encryption so

215
00:11:57,750 --> 00:12:06,240
while we are deriving the key or when we

216
00:12:00,870 --> 00:12:09,030
are decrypting or when we are decrypting

217
00:12:06,240 --> 00:12:12,270
on decryption of each ciphertext we

218
00:12:09,030 --> 00:12:17,280
actually get the key for the subordinate

219
00:12:12,270 --> 00:12:19,949
node over third our third caused a chain

220
00:12:17,280 --> 00:12:23,370
construction is based on the

221
00:12:19,950 --> 00:12:25,200
functionalities f1 and f2 which are

222
00:12:23,370 --> 00:12:28,890
themselves inspired from Cape

223
00:12:25,200 --> 00:12:33,660
authenticated encryption given by an

224
00:12:28,890 --> 00:12:36,180
triva at all in FSC 2014 let me give the

225
00:12:33,660 --> 00:12:39,089
disclaimer that that the functionality

226
00:12:36,180 --> 00:12:41,310
is F 1 and F 2 are not exactly identical

227
00:12:39,090 --> 00:12:45,089
to the encryption and decryption of a

228
00:12:41,310 --> 00:12:51,839
they are a modification of encryption

229
00:12:45,089 --> 00:12:54,839
and decryption function now one more

230
00:12:51,839 --> 00:12:58,560
thing to notice is the functionality f1

231
00:12:54,839 --> 00:13:01,500
takes as input message m and 2 initial

232
00:12:58,560 --> 00:13:04,109
vectors IV 1 and IV 2 and outputs the

233
00:13:01,500 --> 00:13:06,540
cipher text and the key whereas the

234
00:13:04,110 --> 00:13:09,690
functionality f2 takes as input

235
00:13:06,540 --> 00:13:10,969
ciphertext C and the key K and outputs

236
00:13:09,690 --> 00:13:13,460
the message m

237
00:13:10,970 --> 00:13:18,020
Ivy - because of this property of

238
00:13:13,460 --> 00:13:20,900
outputting Ivy - we employ the key of

239
00:13:18,020 --> 00:13:24,880
the subordinate node as the value of IV

240
00:13:20,900 --> 00:13:29,689
- which is shown here in the encryption

241
00:13:24,880 --> 00:13:32,420
derivation and decryption diagrams for

242
00:13:29,690 --> 00:13:36,920
the first user we use both of the values

243
00:13:32,420 --> 00:13:40,459
of IB as zeros for the second we use IV

244
00:13:36,920 --> 00:13:45,319
one as the ciphertext and IV 2 as the

245
00:13:40,460 --> 00:13:49,580
key and we go on while decryption we get

246
00:13:45,320 --> 00:13:56,000
the keys k k2 from ciphertext C 1 k3

247
00:13:49,580 --> 00:13:58,430
from ciphertext C 2 and so on our fourth

248
00:13:56,000 --> 00:14:01,070
caused a chain construction is based on

249
00:13:58,430 --> 00:14:04,069
FB hash mode of operation which was

250
00:14:01,070 --> 00:14:08,630
given by Paul Holmes become all and

251
00:14:04,070 --> 00:14:12,260
caged in in decrypt 2012 these designs

252
00:14:08,630 --> 00:14:14,510
are also not exactly identical to the

253
00:14:12,260 --> 00:14:18,710
happy hash mode of operation instead

254
00:14:14,510 --> 00:14:21,470
they are a modification to them here

255
00:14:18,710 --> 00:14:24,350
also for the encryption we have message

256
00:14:21,470 --> 00:14:29,360
and IV 1 and IV 2 as the inputs and the

257
00:14:24,350 --> 00:14:34,190
output is K and G 1 sorry and the C but

258
00:14:29,360 --> 00:14:37,370
for decryption the input is C K and IV 1

259
00:14:34,190 --> 00:14:40,930
and the output is IV 2 and message M

260
00:14:37,370 --> 00:14:45,140
therefore there is a slight change when

261
00:14:40,930 --> 00:14:47,540
in the encryption key derivation and

262
00:14:45,140 --> 00:14:51,470
decryption procedure but the efficiency

263
00:14:47,540 --> 00:14:54,500
results are exactly same now we go for

264
00:14:51,470 --> 00:14:57,410
the second method where we construct COS

265
00:14:54,500 --> 00:14:59,080
AE schemes from the scratch and we

266
00:14:57,410 --> 00:15:01,280
proposed three constructions

267
00:14:59,080 --> 00:15:03,980
construction one based on M le

268
00:15:01,280 --> 00:15:06,170
construction two based on a and third

269
00:15:03,980 --> 00:15:09,440
construction based on FB hash mode of

270
00:15:06,170 --> 00:15:13,270
operation our first construction which

271
00:15:09,440 --> 00:15:15,530
is based on Emily uses the idea that

272
00:15:13,270 --> 00:15:18,290
encrypting the decryption keys of

273
00:15:15,530 --> 00:15:20,630
immediate children all the immediate

274
00:15:18,290 --> 00:15:23,689
children of the node along with the

275
00:15:20,630 --> 00:15:24,750
files of the node which offers us the

276
00:15:23,690 --> 00:15:26,790
advantage of

277
00:15:24,750 --> 00:15:28,829
decryption keys for the immediate

278
00:15:26,790 --> 00:15:31,980
children nodes are obtained on

279
00:15:28,829 --> 00:15:33,870
decryption and Emily itself takes care

280
00:15:31,980 --> 00:15:36,959
of the authentication and encryption

281
00:15:33,870 --> 00:15:40,279
together why are the decryption key so

282
00:15:36,959 --> 00:15:43,979
we do not need to store the tags here

283
00:15:40,279 --> 00:15:47,339
here is the encryption algorithm for

284
00:15:43,980 --> 00:15:50,040
this reference graph where you for u5

285
00:15:47,339 --> 00:15:55,220
musics and u7 are the nodes at the

286
00:15:50,040 --> 00:15:59,310
bottom so first we encrypt them second

287
00:15:55,220 --> 00:16:03,329
using the keys that are output from you

288
00:15:59,310 --> 00:16:07,849
for 2 u7 we prevent them over the files

289
00:16:03,329 --> 00:16:11,699
of u2 and u3 and then encrypt them

290
00:16:07,850 --> 00:16:14,339
finally we encrypt u1 to get the key k1

291
00:16:11,699 --> 00:16:17,878
which is the master key or the key for

292
00:16:14,339 --> 00:16:21,480
the root node which is the superior node

293
00:16:17,879 --> 00:16:25,439
of the entire graph the key derivation

294
00:16:21,480 --> 00:16:30,209
works as follows if user u1 wants to

295
00:16:25,439 --> 00:16:36,240
find the key for u6 they get it from k3

296
00:16:30,209 --> 00:16:39,628
and then k3 decrypt c3 to get k6 for for

297
00:16:36,240 --> 00:16:44,339
decryption algorithm the case X here is

298
00:16:39,629 --> 00:16:49,050
plug into F into c6 and then we obtain

299
00:16:44,339 --> 00:16:51,689
the file f6 our construction 2 is based

300
00:16:49,050 --> 00:16:54,420
on a p-- authenticated encryption where

301
00:16:51,689 --> 00:16:57,959
the idea is reverse decryption property

302
00:16:54,420 --> 00:17:01,849
of APE which gives the keys of immediate

303
00:16:57,959 --> 00:17:04,109
children nodes while decryption and

304
00:17:01,850 --> 00:17:06,630
during the encryption we take the

305
00:17:04,109 --> 00:17:09,958
immediate children nodes and encrypted

306
00:17:06,630 --> 00:17:11,939
along with the file this offers us the

307
00:17:09,959 --> 00:17:14,669
advantage of allowing efficiency

308
00:17:11,939 --> 00:17:16,110
improvements and the decryption keys for

309
00:17:14,669 --> 00:17:19,740
the immediate children nodes are

310
00:17:16,109 --> 00:17:25,319
obtained on decryption we do not need to

311
00:17:19,740 --> 00:17:28,079
store any tags for the file here here

312
00:17:25,319 --> 00:17:30,960
are the functionalities f1 and f2 that

313
00:17:28,079 --> 00:17:34,260
we have already seen in the C chain

314
00:17:30,960 --> 00:17:38,340
construction and this is the same method

315
00:17:34,260 --> 00:17:43,910
of encrypting it here for the you for

316
00:17:38,340 --> 00:17:46,620
as ib1 and IV - we are using zeros and

317
00:17:43,910 --> 00:17:49,350
for all the children's which are at the

318
00:17:46,620 --> 00:17:53,879
leaf node and for the intermediate nodes

319
00:17:49,350 --> 00:17:57,300
and the root node we have that the key

320
00:17:53,880 --> 00:18:01,350
is off of their first children as this

321
00:17:57,300 --> 00:18:05,030
first value this is the encryption key

322
00:18:01,350 --> 00:18:07,409
derivation and decryption module

323
00:18:05,030 --> 00:18:10,410
now the next construction is

324
00:18:07,410 --> 00:18:12,810
construction 3 which is based on FP hash

325
00:18:10,410 --> 00:18:17,790
mode of operation where the idea is

326
00:18:12,810 --> 00:18:21,659
exactly the same and it offers us the

327
00:18:17,790 --> 00:18:24,780
similar advantages the functionality and

328
00:18:21,660 --> 00:18:28,980
G 1 and G 2 which are being used in the

329
00:18:24,780 --> 00:18:32,540
encryption and G 2 being used in the key

330
00:18:28,980 --> 00:18:34,920
derivation and the decryption algorithm

331
00:18:32,540 --> 00:18:38,370
now I would like to show you the

332
00:18:34,920 --> 00:18:40,980
comparison table where the first five

333
00:18:38,370 --> 00:18:44,610
scream the first five schemes are

334
00:18:40,980 --> 00:18:47,130
actually construction beta and in this

335
00:18:44,610 --> 00:18:53,939
construction beta we have plucked the

336
00:18:47,130 --> 00:18:57,840
COS teams which are T cos T ke cos DK

337
00:18:53,940 --> 00:19:00,390
cos i ke cars and n NB cars which are

338
00:18:57,840 --> 00:19:05,669
given in details by Crompton Martine and

339
00:19:00,390 --> 00:19:09,000
wild in 2006 and we obtained the results

340
00:19:05,670 --> 00:19:14,250
here so we see that for the these five

341
00:19:09,000 --> 00:19:18,120
schemes we have n Lamb n square lambda

342
00:19:14,250 --> 00:19:21,000
times the private storage which we saw

343
00:19:18,120 --> 00:19:22,739
that which we saw in the construction

344
00:19:21,000 --> 00:19:25,560
beta that it has a big advantage

345
00:19:22,740 --> 00:19:28,500
disadvantage of having a huge private

346
00:19:25,560 --> 00:19:32,210
memory requirement of a construction a

347
00:19:28,500 --> 00:19:36,180
which is also based on caste and AE

348
00:19:32,210 --> 00:19:39,030
offers the same disadvantage of having a

349
00:19:36,180 --> 00:19:42,030
huge private storage requirement the

350
00:19:39,030 --> 00:19:44,670
construction B which was you made using

351
00:19:42,030 --> 00:19:49,830
construction B chain and modified chain

352
00:19:44,670 --> 00:19:50,930
partition using Emily this has n W

353
00:19:49,830 --> 00:19:53,389
lambda where

354
00:19:50,930 --> 00:19:55,730
is the width of the access graph and

355
00:19:53,390 --> 00:19:58,010
this access graph represents the posit

356
00:19:55,730 --> 00:20:01,700
which describes the hierarchical

357
00:19:58,010 --> 00:20:04,960
structure of the organization of a

358
00:20:01,700 --> 00:20:07,640
construction B C and D offered the same

359
00:20:04,960 --> 00:20:11,990
storage private storage requirement of

360
00:20:07,640 --> 00:20:15,710
NW lambda and and the public storage

361
00:20:11,990 --> 00:20:17,620
requirement with a cipher text expansion

362
00:20:15,710 --> 00:20:20,810
of 2 and lambda and lambda and lambda

363
00:20:17,620 --> 00:20:23,419
respectively however most official

364
00:20:20,810 --> 00:20:27,110
constructions are construction 1 2 and 3

365
00:20:23,420 --> 00:20:30,170
which we just need to store lambda bit

366
00:20:27,110 --> 00:20:32,750
values per user here n actually

367
00:20:30,170 --> 00:20:35,360
represents the number of users in the

368
00:20:32,750 --> 00:20:38,960
organization and therefore it is just

369
00:20:35,360 --> 00:20:41,270
lambda bits per user the ciphertext is a

370
00:20:38,960 --> 00:20:43,100
little larger but that really doesn't

371
00:20:41,270 --> 00:20:46,940
matter because we are storing everything

372
00:20:43,100 --> 00:20:49,070
on the public data and the most

373
00:20:46,940 --> 00:20:53,270
important part is storage of private

374
00:20:49,070 --> 00:20:54,980
keys which we Excel here in the

375
00:20:53,270 --> 00:20:59,300
conclusion I would like to say that

376
00:20:54,980 --> 00:21:02,180
construction 2 and 3 have a super

377
00:20:59,300 --> 00:21:04,940
advantage of having a reverse decryption

378
00:21:02,180 --> 00:21:07,520
and prepending keys of subordinate nodes

379
00:21:04,940 --> 00:21:09,830
to the file of support superior nodes

380
00:21:07,520 --> 00:21:12,590
they are based on easy to invert

381
00:21:09,830 --> 00:21:14,960
permutation which offer the advantage of

382
00:21:12,590 --> 00:21:18,129
being easy to realize in hardware and

383
00:21:14,960 --> 00:21:21,410
have negligible private storage overhead

384
00:21:18,130 --> 00:21:24,320
they are randomized and therefore they

385
00:21:21,410 --> 00:21:26,240
avoid all the dictionary attacks they

386
00:21:24,320 --> 00:21:29,840
have one pass encryption key derivation

387
00:21:26,240 --> 00:21:33,020
and decryption mechanism we leave it as

388
00:21:29,840 --> 00:21:35,899
open problems to have more efficient

389
00:21:33,020 --> 00:21:38,530
cars AE constructions and to introduce

390
00:21:35,900 --> 00:21:44,650
the functionalities like key revocation

391
00:21:38,530 --> 00:21:51,399
updating the file itself etc and cos a

392
00:21:44,650 --> 00:21:51,400
here are the references of other papers

393
00:22:00,830 --> 00:22:18,350
thank you we have time for a couple of

394
00:22:10,250 --> 00:22:20,570
questions so yeah I have one question

395
00:22:18,350 --> 00:22:23,540
about your construction based on the

396
00:22:20,570 --> 00:22:24,860
message locked encryption so for message

397
00:22:23,540 --> 00:22:28,159
locked encryption you cannot have

398
00:22:24,860 --> 00:22:30,500
privacy for you need high entropy

399
00:22:28,160 --> 00:22:33,080
messages right to have privacy so does

400
00:22:30,500 --> 00:22:36,350
it apply to the resulting construction

401
00:22:33,080 --> 00:22:39,679
or actually what we do is we add a

402
00:22:36,350 --> 00:22:42,199
random number to the file and that's why

403
00:22:39,680 --> 00:22:44,240
this random number ensures that the

404
00:22:42,200 --> 00:22:47,480
total entropy of the message becomes

405
00:22:44,240 --> 00:22:51,080
high and this way we are preventing the

406
00:22:47,480 --> 00:22:54,610
attacks for the known message attacks on

407
00:22:51,080 --> 00:22:58,310
the MLE okay thanks thank you

408
00:22:54,610 --> 00:22:58,850
other questions well if not let's

409
00:22:58,310 --> 00:22:59,919
venture

410
00:22:58,850 --> 00:23:06,449
swegen

411
00:22:59,920 --> 00:23:06,450
[Applause]

