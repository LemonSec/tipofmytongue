1
00:00:00,030 --> 00:00:04,560
they small Universal deterministic

2
00:00:02,610 --> 00:00:07,020
authenticated encryption for the IOT

3
00:00:04,560 --> 00:00:08,879
it's a paper by Super T panic and a

4
00:00:07,020 --> 00:00:10,769
button of a two legs and arm of Tish

5
00:00:08,880 --> 00:00:18,000
Hauser and super deep we'll give the

6
00:00:10,769 --> 00:00:21,230
talk thank you for the introduction so

7
00:00:18,000 --> 00:00:24,539
I'll be talking about this deterministic

8
00:00:21,230 --> 00:00:28,590
block cipher based 20 dated encryption

9
00:00:24,539 --> 00:00:30,210
mode called Sunday block ciphers have

10
00:00:28,590 --> 00:00:32,040
traditionally been very very popular

11
00:00:30,210 --> 00:00:34,170
primitives for implementing or

12
00:00:32,040 --> 00:00:39,930
constructing authenticated encryption

13
00:00:34,170 --> 00:00:41,700
modes often it may so happen that block

14
00:00:39,930 --> 00:00:45,210
cipher when considered in isolation is

15
00:00:41,700 --> 00:00:48,300
ideal for a given environment but when

16
00:00:45,210 --> 00:00:50,940
it is used in a mode of operation quite

17
00:00:48,300 --> 00:00:53,819
often it may so happen that the mode of

18
00:00:50,940 --> 00:00:56,670
operation kind of erases the benefits

19
00:00:53,820 --> 00:01:02,670
that the block cipher brings in

20
00:00:56,670 --> 00:01:06,360
isolation this is the case with for

21
00:01:02,670 --> 00:01:08,960
example SIV that requires two

22
00:01:06,360 --> 00:01:13,619
independent keys as in the case of

23
00:01:08,960 --> 00:01:17,070
copper or lmd and that requires internal

24
00:01:13,619 --> 00:01:21,658
state size at least tries the block size

25
00:01:17,070 --> 00:01:23,850
of the underlying block cipher or in the

26
00:01:21,659 --> 00:01:26,820
case of EAX which requires multiple

27
00:01:23,850 --> 00:01:32,009
calls to the block cipher before any

28
00:01:26,820 --> 00:01:36,119
data can be processed mmm another

29
00:01:32,009 --> 00:01:40,189
example is this GCM SIV that was

30
00:01:36,119 --> 00:01:42,600
proposed in CCS in 2015 although it's

31
00:01:40,189 --> 00:01:45,839
quite competitive performance in

32
00:01:42,600 --> 00:01:49,079
software on recent Intel past

33
00:01:45,840 --> 00:01:51,930
architectures the mod employers full

34
00:01:49,079 --> 00:01:54,779
multiplication in this hiring 28 bit

35
00:01:51,930 --> 00:01:56,280
finite field which makes it an

36
00:01:54,780 --> 00:02:00,689
attractive proposition for

37
00:01:56,280 --> 00:02:04,229
implementation in hardware and resource

38
00:02:00,689 --> 00:02:07,350
constrained platforms ok so we proposed

39
00:02:04,229 --> 00:02:11,610
a mode of operation called sunday that

40
00:02:07,350 --> 00:02:14,670
is efficient respect to fort messages

41
00:02:11,610 --> 00:02:16,640
and it's competitive but much like cloak

42
00:02:14,670 --> 00:02:21,690
and Jambu in this respect

43
00:02:16,640 --> 00:02:25,140
it has a short state size it is flexible

44
00:02:21,690 --> 00:02:27,829
in so much as it offers good performance

45
00:02:25,140 --> 00:02:29,790
characteristics over both

46
00:02:27,830 --> 00:02:32,940
resource-constrained and high-end

47
00:02:29,790 --> 00:02:38,340
platforms and additionally it also

48
00:02:32,940 --> 00:02:40,320
provides robustness if the device in

49
00:02:38,340 --> 00:02:43,140
which it is implemented does not have

50
00:02:40,320 --> 00:02:45,680
access to reliable sufficient and

51
00:02:43,140 --> 00:02:47,970
reliable sources of randomness so our

52
00:02:45,680 --> 00:02:52,290
mode of encryption is completely

53
00:02:47,970 --> 00:02:54,330
deterministic the specifications

54
00:02:52,290 --> 00:02:58,230
currently do not explicitly mention a

55
00:02:54,330 --> 00:03:01,680
nonce but if a nonce is required the

56
00:02:58,230 --> 00:03:03,049
first X bits or so of the associate data

57
00:03:01,680 --> 00:03:07,620
can be used for this purpose

58
00:03:03,050 --> 00:03:10,860
so it is a SIV mode optimized for

59
00:03:07,620 --> 00:03:14,660
lightweight settings it uses a single

60
00:03:10,860 --> 00:03:17,310
key and a bunch of block cipher calls

61
00:03:14,660 --> 00:03:20,609
the only additional operations that the

62
00:03:17,310 --> 00:03:22,709
mode uses are all linear first is an XOR

63
00:03:20,610 --> 00:03:25,590
and second is multiplication by a

64
00:03:22,709 --> 00:03:28,370
constant over a finite field both of

65
00:03:25,590 --> 00:03:31,830
which can be achieved by only XOR gates

66
00:03:28,370 --> 00:03:35,340
so it also has a short state size if the

67
00:03:31,830 --> 00:03:37,739
underlying block cipher has has block

68
00:03:35,340 --> 00:03:40,620
size n then Sunday also requires a size

69
00:03:37,739 --> 00:03:42,780
of n which is an improvement over some

70
00:03:40,620 --> 00:03:47,070
of the recent modes of operations

71
00:03:42,780 --> 00:03:49,320
proposed in literature so our

72
00:03:47,070 --> 00:03:52,170
performance is limited by fundaments in

73
00:03:49,320 --> 00:03:54,000
the fact that it's rate half mode so

74
00:03:52,170 --> 00:03:57,089
that it requires two block cipher calls

75
00:03:54,000 --> 00:04:01,200
per message block as such the idea use

76
00:03:57,090 --> 00:04:03,959
case for emotive operations as for short

77
00:04:01,200 --> 00:04:05,850
messages for which it achieves

78
00:04:03,959 --> 00:04:08,480
comparative performance with respect to

79
00:04:05,850 --> 00:04:11,250
other modes of operation for example

80
00:04:08,480 --> 00:04:16,529
consider a data set consisting of one

81
00:04:11,250 --> 00:04:18,810
block of nonce 80 and plaintext in such

82
00:04:16,529 --> 00:04:20,070
an event Sunday would require five calls

83
00:04:18,810 --> 00:04:23,400
to the underlying blocks I flow it will

84
00:04:20,070 --> 00:04:25,370
reduce to four if you allow one block

85
00:04:23,400 --> 00:04:29,198
cipher calls to be pre computed

86
00:04:25,370 --> 00:04:33,850
so as such the the ideal use cases

87
00:04:29,199 --> 00:04:35,690
settings in which there is more cost to

88
00:04:33,850 --> 00:04:39,139
the communication rather than

89
00:04:35,690 --> 00:04:41,919
computational resources and settings

90
00:04:39,139 --> 00:04:49,210
that says the like no repetition of

91
00:04:41,919 --> 00:04:53,299
Sushi data or plain text etc so this is

92
00:04:49,210 --> 00:04:54,530
an algorithmic description of the

93
00:04:53,300 --> 00:04:56,270
encryption and decryption I think it'd

94
00:04:54,530 --> 00:05:02,210
be much better if I move to a pictorial

95
00:04:56,270 --> 00:05:05,539
representation so so the initial input

96
00:05:02,210 --> 00:05:08,289
to the mode of operation is this value

97
00:05:05,540 --> 00:05:10,790
called IV which can take four values

98
00:05:08,290 --> 00:05:14,840
depending on whether the Associated are

99
00:05:10,790 --> 00:05:17,120
plaintext is empty or not after every

100
00:05:14,840 --> 00:05:19,010
block cipher call the associate data and

101
00:05:17,120 --> 00:05:21,590
the message is absorbed by means of an

102
00:05:19,010 --> 00:05:24,250
actual function the domains of

103
00:05:21,590 --> 00:05:25,940
separation is provided by these two

104
00:05:24,250 --> 00:05:31,520
multiplication operations over the

105
00:05:25,940 --> 00:05:34,969
finite field multiplication is with the

106
00:05:31,520 --> 00:05:40,159
constant 2 or 4 depending on whether the

107
00:05:34,970 --> 00:05:44,389
final block is complete or not as can be

108
00:05:40,160 --> 00:05:50,000
seen that after absorbing the associate

109
00:05:44,389 --> 00:05:51,530
data and plaintext Sunday execute one

110
00:05:50,000 --> 00:05:56,750
additional block cipher call and with E

111
00:05:51,530 --> 00:05:58,940
and produces the tag for this associated

112
00:05:56,750 --> 00:06:02,930
end message pair which also serves as

113
00:05:58,940 --> 00:06:06,320
the kind of a synthetic IV to this so

114
00:06:02,930 --> 00:06:10,090
this arrow should point here it also

115
00:06:06,320 --> 00:06:12,500
serves as the input synthetic IV to this

116
00:06:10,090 --> 00:06:14,060
V more different groups of every type

117
00:06:12,500 --> 00:06:16,430
stream cipher more encryption which

118
00:06:14,060 --> 00:06:18,440
provide which produces key stream that

119
00:06:16,430 --> 00:06:21,910
is XOR to the message to provide the

120
00:06:18,440 --> 00:06:21,910
subtext to produce subtext

121
00:06:23,539 --> 00:06:29,780
I come to the main security statement of

122
00:06:26,740 --> 00:06:32,870
Sunday so we have shown in the paper

123
00:06:29,780 --> 00:06:36,830
that and in fact we have proven in the

124
00:06:32,870 --> 00:06:38,840
paper that the da e advantage of Sunday

125
00:06:36,830 --> 00:06:43,520
reduces to this huge expression over

126
00:06:38,840 --> 00:06:46,609
here where and he is the total different

127
00:06:43,520 --> 00:06:46,609
[Music]

128
00:06:46,720 --> 00:06:54,500
total distinct blocks block cipher calls

129
00:06:49,580 --> 00:06:57,159
and and the mode makes it these Q

130
00:06:54,500 --> 00:07:00,169
encryption like UV decryption queries

131
00:06:57,159 --> 00:07:03,860
and total length cost of Sigma I Sigma P

132
00:07:00,169 --> 00:07:07,758
and Sigma C this is the security shown

133
00:07:03,860 --> 00:07:09,949
up to but they bound the entire proof is

134
00:07:07,759 --> 00:07:12,740
around 10 to 12 pages done but what I

135
00:07:09,949 --> 00:07:17,569
will do in this presentation is give you

136
00:07:12,740 --> 00:07:19,960
a broad overview of how we came to get

137
00:07:17,569 --> 00:07:19,960
this expression

138
00:07:21,849 --> 00:07:27,469
step one is quite naturally after

139
00:07:24,560 --> 00:07:31,580
replacing the block cipher calls with a

140
00:07:27,469 --> 00:07:35,949
uniform random function row it can be

141
00:07:31,580 --> 00:07:39,080
shown that the Dae advantage of Sunda

142
00:07:35,949 --> 00:07:42,199
can be shown by ten shown that the Dae

143
00:07:39,080 --> 00:07:43,580
advantage of Sunday by using some sort

144
00:07:42,199 --> 00:07:45,380
of a triangular inequality it

145
00:07:43,580 --> 00:07:48,320
commissioned that disadvantage can be

146
00:07:45,380 --> 00:07:52,789
written as a sum of three terms so this

147
00:07:48,320 --> 00:07:54,889
term is comes from the PRP PRF switch

148
00:07:52,789 --> 00:07:58,250
and this is the PRP advantage of the

149
00:07:54,889 --> 00:08:01,940
underlying dog cipher and this is the

150
00:07:58,250 --> 00:08:09,680
dae advantage of sunday when operating

151
00:08:01,940 --> 00:08:12,710
on in from random functions okay we

152
00:08:09,680 --> 00:08:15,590
compute the Dae advantage of Sunday

153
00:08:12,710 --> 00:08:17,150
directly we can also separately argue

154
00:08:15,590 --> 00:08:20,330
for the authenticity and confidentiality

155
00:08:17,150 --> 00:08:26,179
of the mood for confidentiality you can

156
00:08:20,330 --> 00:08:30,198
can observe that the ciphertext is

157
00:08:26,180 --> 00:08:31,760
essentially produced by a stream cipher

158
00:08:30,199 --> 00:08:33,289
like Oh every mode of operation and

159
00:08:31,760 --> 00:08:34,850
hence

160
00:08:33,289 --> 00:08:38,240
confidentiality is intuitively

161
00:08:34,850 --> 00:08:41,690
guaranteed if the input to do FB mode

162
00:08:38,240 --> 00:08:45,650
that is the stag over here is

163
00:08:41,690 --> 00:08:48,830
unpredictable to the adversary it's

164
00:08:45,650 --> 00:08:50,449
slightly tricky to do so because the

165
00:08:48,830 --> 00:08:54,260
associate data and plaintext up our

166
00:08:50,450 --> 00:08:56,960
process similarly and the only motive to

167
00:08:54,260 --> 00:08:59,090
mean so separation are these very very

168
00:08:56,960 --> 00:09:02,570
simple functions that we employ so a

169
00:08:59,090 --> 00:09:05,660
bulk of the security argument goes by

170
00:09:02,570 --> 00:09:07,400
goes to prove the fact that this domain

171
00:09:05,660 --> 00:09:11,630
separation howsoever simple actually

172
00:09:07,400 --> 00:09:16,760
works for our purpose for authenticity

173
00:09:11,630 --> 00:09:19,820
we just want to observe that if it was

174
00:09:16,760 --> 00:09:22,460
to be for forges a message ciphertext at

175
00:09:19,820 --> 00:09:26,270
pair C T and what it essentially means

176
00:09:22,460 --> 00:09:30,680
is that the Mac of the decryption

177
00:09:26,270 --> 00:09:35,990
algorithm will run on C comma T outputs

178
00:09:30,680 --> 00:09:38,089
the tag team by definition C is assumed

179
00:09:35,990 --> 00:09:41,510
not to be part of any previous

180
00:09:38,090 --> 00:09:43,840
transcript are assumed not to have been

181
00:09:41,510 --> 00:09:46,819
output by any previous encryption call

182
00:09:43,840 --> 00:09:49,850
and then in under such circumstances it

183
00:09:46,820 --> 00:09:51,650
is easy to show that forging is

184
00:09:49,850 --> 00:09:53,180
equivalent to finding the pre middle

185
00:09:51,650 --> 00:09:56,990
second preimage of this underlying Mac

186
00:09:53,180 --> 00:09:58,579
and a part of the security argument also

187
00:09:56,990 --> 00:10:01,280
goes to prove that goes and because

188
00:09:58,580 --> 00:10:06,160
behind proving that it is difficult for

189
00:10:01,280 --> 00:10:11,990
the adversity to do so ah

190
00:10:06,160 --> 00:10:14,060
now for ease of representation what I

191
00:10:11,990 --> 00:10:15,770
will do is label some parts of the

192
00:10:14,060 --> 00:10:18,229
operation so that it is easier to

193
00:10:15,770 --> 00:10:21,620
express for example this set of

194
00:10:18,230 --> 00:10:25,190
operations from here to here which

195
00:10:21,620 --> 00:10:26,930
produces this key stream given the sushi

196
00:10:25,190 --> 00:10:30,470
data and message input will call Inc

197
00:10:26,930 --> 00:10:35,300
stream and this stretch of operation

198
00:10:30,470 --> 00:10:37,340
this set of sub operations which when

199
00:10:35,300 --> 00:10:43,060
given T produces the key stream you call

200
00:10:37,340 --> 00:10:46,310
simply stream and and the encryption

201
00:10:43,060 --> 00:10:48,349
algorithm of Sunda which produces the

202
00:10:46,310 --> 00:10:51,250
tag on the cipher

203
00:10:48,350 --> 00:10:53,480
is can be shown to be equivalent to

204
00:10:51,250 --> 00:10:54,980
applying the angstrom algorithm

205
00:10:53,480 --> 00:10:57,830
producing the size producing the

206
00:10:54,980 --> 00:11:00,070
keystream and then applying this chop

207
00:10:57,830 --> 00:11:03,140
XOR algorithm which is essentially

208
00:11:00,070 --> 00:11:05,120
taking the keystream chopping it first

209
00:11:03,140 --> 00:11:07,100
to make it of same size as plain text

210
00:11:05,120 --> 00:11:11,000
and then exhaling hence the name chopped

211
00:11:07,100 --> 00:11:12,620
extra so the encryption part of sun is

212
00:11:11,000 --> 00:11:17,870
essentially composition of these two

213
00:11:12,620 --> 00:11:20,450
operations show up XOR and extreme and

214
00:11:17,870 --> 00:11:23,480
we can similarly describe a deck stream

215
00:11:20,450 --> 00:11:27,490
algorithm which proceeds in this

216
00:11:23,480 --> 00:11:32,540
roundabout manner so given an input TC

217
00:11:27,490 --> 00:11:37,310
it first compute stream produces key

218
00:11:32,540 --> 00:11:40,730
stream then then applies chop XOR with

219
00:11:37,310 --> 00:11:43,640
the ciphertext to get the get some

220
00:11:40,730 --> 00:11:47,150
message plan some message m Prime and

221
00:11:43,640 --> 00:11:50,390
then it comes back over here then it

222
00:11:47,150 --> 00:11:54,910
again runs dang stream algorithm for a

223
00:11:50,390 --> 00:11:57,500
comma and prying and then it looks at

224
00:11:54,910 --> 00:12:00,560
the output to prime that it has produced

225
00:11:57,500 --> 00:12:03,680
if T equal to T prime then the tag has

226
00:12:00,560 --> 00:12:06,770
then the tag has verified in such in

227
00:12:03,680 --> 00:12:09,609
certain event it releases the output

228
00:12:06,770 --> 00:12:11,449
stream TS jesus nothing

229
00:12:09,610 --> 00:12:14,630
although the decryption algorithm is

230
00:12:11,450 --> 00:12:24,400
also kind of the extreme ex composed

231
00:12:14,630 --> 00:12:27,350
with this topics or so so given this

232
00:12:24,400 --> 00:12:28,790
description of sunday so we have an

233
00:12:27,350 --> 00:12:31,130
encryption algorithm with these topics

234
00:12:28,790 --> 00:12:34,040
or x extreme and the decryption

235
00:12:31,130 --> 00:12:36,260
algorithm which is topics or times the

236
00:12:34,040 --> 00:12:40,490
extreme so the next step is to remove

237
00:12:36,260 --> 00:12:46,430
this topic so from this incan deck to

238
00:12:40,490 --> 00:12:48,680
make things easier so so what we can do

239
00:12:46,430 --> 00:12:56,540
is define another adversity each for

240
00:12:48,680 --> 00:12:58,579
picture that interacts with either the

241
00:12:56,540 --> 00:13:00,540
encryption on encryption decryption with

242
00:12:58,580 --> 00:13:04,860
the uniform random function or

243
00:13:00,540 --> 00:13:08,790
dollar bottom for every query that a

244
00:13:04,860 --> 00:13:11,820
makes a job topics or simply forwards it

245
00:13:08,790 --> 00:13:13,260
to it's cool and then chops next source

246
00:13:11,820 --> 00:13:18,570
with the kitchen with the message or the

247
00:13:13,260 --> 00:13:23,519
ciphertext and returns it today after

248
00:13:18,570 --> 00:13:26,910
doing this it can be shown that the the

249
00:13:23,519 --> 00:13:32,910
AE advantage of each topic so is more

250
00:13:26,910 --> 00:13:34,709
than the advantage of the da e advantage

251
00:13:32,910 --> 00:13:37,319
of the actual Sunday motive encryption

252
00:13:34,709 --> 00:13:40,849
on running on in running functions and

253
00:13:37,320 --> 00:13:47,190
so we kind of concentrate on this term

254
00:13:40,850 --> 00:13:50,820
including the bounds on this term the

255
00:13:47,190 --> 00:13:53,220
next step is kind of natural to so we

256
00:13:50,820 --> 00:13:57,800
define two additional routines called

257
00:13:53,220 --> 00:14:00,990
the stream star and deck of stream star

258
00:13:57,800 --> 00:14:02,969
stream star simply ignores the ofb mode

259
00:14:00,990 --> 00:14:08,160
and outputs completely random values of

260
00:14:02,970 --> 00:14:15,779
the required length and Dec stream star

261
00:14:08,160 --> 00:14:19,350
doesn't require bookkeeping if the input

262
00:14:15,779 --> 00:14:21,720
T equals to some T ie previously present

263
00:14:19,350 --> 00:14:22,730
in the transcript it output stream star

264
00:14:21,720 --> 00:14:26,100
of Ti

265
00:14:22,730 --> 00:14:28,980
otherwise it's simply outputs bottom and

266
00:14:26,100 --> 00:14:32,160
by applying triangular inequality it can

267
00:14:28,980 --> 00:14:36,620
be shown that this da advantage can be

268
00:14:32,160 --> 00:14:40,199
written as a sum of this and this so

269
00:14:36,620 --> 00:14:45,269
concentrate on the term at the bottom so

270
00:14:40,199 --> 00:14:47,219
the term at the bottom is the advantage

271
00:14:45,269 --> 00:14:51,029
of this adversary when interacting with

272
00:14:47,220 --> 00:14:54,149
the extreme star and bottom so this is

273
00:14:51,029 --> 00:14:55,470
essentially a bounding this term is

274
00:14:54,149 --> 00:14:58,260
essentially bounding the probability

275
00:14:55,470 --> 00:15:01,860
that the extreme star produces non

276
00:14:58,260 --> 00:15:03,930
bottom output it has been shown in the

277
00:15:01,860 --> 00:15:06,149
people that this is same as finding a

278
00:15:03,930 --> 00:15:08,670
pre-image or the second preimage of the

279
00:15:06,149 --> 00:15:10,800
underlying first ten bits of dollar

280
00:15:08,670 --> 00:15:13,780
which is basically the mock algorithm

281
00:15:10,800 --> 00:15:18,459
and so it can be argued that

282
00:15:13,780 --> 00:15:19,990
this term is actually bounded by this

283
00:15:18,460 --> 00:15:22,090
expression over here where Q is the

284
00:15:19,990 --> 00:15:25,390
total encryption and Q via the total

285
00:15:22,090 --> 00:15:28,630
number of decryption queries so we are

286
00:15:25,390 --> 00:15:30,819
only left with this term and the

287
00:15:28,630 --> 00:15:34,150
expression which we haven't found bound

288
00:15:30,820 --> 00:15:37,300
for yet and the next part of the paper

289
00:15:34,150 --> 00:15:43,750
is dedicated to finding the bound on

290
00:15:37,300 --> 00:15:46,569
this disadvantage and we have used the

291
00:15:43,750 --> 00:15:48,760
edge coefficient technique to bound this

292
00:15:46,570 --> 00:15:50,170
advantage term for those who are

293
00:15:48,760 --> 00:15:52,540
familiar with the edge go fishing

294
00:15:50,170 --> 00:15:56,229
technique it and was taking the set of

295
00:15:52,540 --> 00:15:58,060
all transcripts and partitioning the set

296
00:15:56,230 --> 00:16:04,960
of transcripts entity identity bath so

297
00:15:58,060 --> 00:16:07,599
that certain properties satisfied so in

298
00:16:04,960 --> 00:16:11,260
order to do so we will start with a few

299
00:16:07,600 --> 00:16:13,930
definitions you know to be in order to

300
00:16:11,260 --> 00:16:22,300
explain the partition of the transcripts

301
00:16:13,930 --> 00:16:25,089
better so the first step is to to

302
00:16:22,300 --> 00:16:27,910
convert the transcript from a set of

303
00:16:25,090 --> 00:16:31,240
values to a graph and we do it as

304
00:16:27,910 --> 00:16:34,600
follows so we split the associate data

305
00:16:31,240 --> 00:16:37,390
and the message into into individual

306
00:16:34,600 --> 00:16:41,050
blocks and after splitting it we

307
00:16:37,390 --> 00:16:43,420
prepared a single bit with every block

308
00:16:41,050 --> 00:16:45,699
in order to indicate whether it is a

309
00:16:43,420 --> 00:16:48,910
final block or not for example since

310
00:16:45,700 --> 00:16:54,150
this finally prepend the bit 1 otherwise

311
00:16:48,910 --> 00:16:56,680
we prevent 0 and then we transform this

312
00:16:54,150 --> 00:17:00,390
set of values into a set of functions

313
00:16:56,680 --> 00:17:03,459
defined as follows so for every block

314
00:17:00,390 --> 00:17:07,270
for every extended block Delta comma X

315
00:17:03,460 --> 00:17:12,400
Delta is a bit and axis from an element

316
00:17:07,270 --> 00:17:17,079
of block size so we define f of Delta X

317
00:17:12,400 --> 00:17:22,680
as simply an XOR if it is a non final

318
00:17:17,079 --> 00:17:26,649
block and we multiply with a constant

319
00:17:22,680 --> 00:17:27,490
and the XOR if it is a final block and

320
00:17:26,650 --> 00:17:34,540
it is

321
00:17:27,490 --> 00:17:37,410
complete / incomplete and so you can you

322
00:17:34,540 --> 00:17:39,820
can see that every transcript can be

323
00:17:37,410 --> 00:17:42,580
written as a sequence of functions for

324
00:17:39,820 --> 00:17:45,159
example if associate data and the

325
00:17:42,580 --> 00:17:47,409
message are both non-empty then we can

326
00:17:45,160 --> 00:17:49,630
write we can convert this transcript

327
00:17:47,410 --> 00:17:52,780
into a sequence of functions given by I

328
00:17:49,630 --> 00:17:56,800
of a comma M which starts with the

329
00:17:52,780 --> 00:18:01,270
initial IV and lists the set of

330
00:17:56,800 --> 00:18:02,919
functions one by one and any constant

331
00:18:01,270 --> 00:18:05,910
values in the sequence should be simply

332
00:18:02,920 --> 00:18:09,910
interpreted as a constant function

333
00:18:05,910 --> 00:18:13,660
so given this set of functions X 1 to X

334
00:18:09,910 --> 00:18:16,690
L we can then define the sequence Rho

335
00:18:13,660 --> 00:18:19,210
hat of X which ultimately applies in

336
00:18:16,690 --> 00:18:21,910
from random function Rho and elements of

337
00:18:19,210 --> 00:18:24,970
the sequence and it is not very

338
00:18:21,910 --> 00:18:27,160
difficult to see that sandy algorithm is

339
00:18:24,970 --> 00:18:31,900
the encryption of the sandy algorithm is

340
00:18:27,160 --> 00:18:39,670
essentially essentially is to the stream

341
00:18:31,900 --> 00:18:41,770
hat i FM and now it come in the

342
00:18:39,670 --> 00:18:43,510
converting the transcript to a graph is

343
00:18:41,770 --> 00:18:49,360
very naturally if you follow simple

344
00:18:43,510 --> 00:18:52,090
rules of prefix like for input message

345
00:18:49,360 --> 00:18:55,419
or input functions that have a common

346
00:18:52,090 --> 00:18:57,189
prefix we just make sure that if they

347
00:18:55,420 --> 00:19:00,130
have the same prefix then then they

348
00:18:57,190 --> 00:19:03,700
follow the same path from root to the

349
00:19:00,130 --> 00:19:08,200
leaf so we can define two such graphs

350
00:19:03,700 --> 00:19:13,030
one is simply one in which the nodes are

351
00:19:08,200 --> 00:19:15,280
simply the values we can define a

352
00:19:13,030 --> 00:19:18,790
similar graph in which the values are

353
00:19:15,280 --> 00:19:23,080
converted into function sequences and

354
00:19:18,790 --> 00:19:25,178
there are most conditions the graphs are

355
00:19:23,080 --> 00:19:27,939
isomorphic do not always and I'll come

356
00:19:25,179 --> 00:19:31,140
to the situation why well come to

357
00:19:27,940 --> 00:19:31,140
situation when they are not isomorphic

358
00:19:31,830 --> 00:19:38,770
so and of course the the output key

359
00:19:37,330 --> 00:19:40,509
stream produced by the algorithm is

360
00:19:38,770 --> 00:19:42,389
expressed by you

361
00:19:40,509 --> 00:19:47,110
and they exist as independent

362
00:19:42,389 --> 00:19:49,120
unconnected nodes in the graph so when

363
00:19:47,110 --> 00:19:53,168
we are implementing this as a function

364
00:19:49,120 --> 00:19:56,379
it is easy to see that these edges

365
00:19:53,169 --> 00:20:01,059
represent calls to uniform random

366
00:19:56,379 --> 00:20:02,678
function and each each query to Sunday

367
00:20:01,059 --> 00:20:04,600
or each row of the transcript is

368
00:20:02,679 --> 00:20:07,240
essentially application of all the

369
00:20:04,600 --> 00:20:13,209
functions starting from the root node to

370
00:20:07,240 --> 00:20:15,220
the leaf node and this being so we can

371
00:20:13,210 --> 00:20:18,940
also label each of the nodes by these

372
00:20:15,220 --> 00:20:20,830
labels Kaiser Chi 0 Chi 1 so label would

373
00:20:18,940 --> 00:20:23,009
be defined as the intermediate value

374
00:20:20,830 --> 00:20:25,870
applied after applying the function f

375
00:20:23,009 --> 00:20:33,309
that is written inside the node for

376
00:20:25,870 --> 00:20:36,158
example Chi 0 would be applying the

377
00:20:33,309 --> 00:20:38,019
uniform random function IV then applying

378
00:20:36,159 --> 00:20:41,289
the function FA 0 and the output that

379
00:20:38,019 --> 00:20:46,509
you get we can use that as a label to

380
00:20:41,289 --> 00:20:48,789
that node ok so now we will define

381
00:20:46,509 --> 00:20:53,500
trance define the partition of the

382
00:20:48,789 --> 00:20:55,779
transcripts so we define the set of bad

383
00:20:53,500 --> 00:21:00,610
transcripts to be the transcripts that

384
00:20:55,779 --> 00:21:02,289
force the events 1 or 2 to occur these

385
00:21:00,610 --> 00:21:05,289
are the events that allow the adversary

386
00:21:02,289 --> 00:21:09,370
to construct trivial fortress so the

387
00:21:05,289 --> 00:21:14,350
first bad event is if one of the key

388
00:21:09,370 --> 00:21:18,729
stream blocks has value equal to one of

389
00:21:14,350 --> 00:21:21,730
the 4 IV values that the mode starts

390
00:21:18,730 --> 00:21:23,200
with and the second bad event is a

391
00:21:21,730 --> 00:21:27,610
collision in between the key stream

392
00:21:23,200 --> 00:21:30,690
blocks themselves so so this having

393
00:21:27,610 --> 00:21:34,360
since this having defined we now

394
00:21:30,690 --> 00:21:37,409
concentrate on the set of transcripts in

395
00:21:34,360 --> 00:21:39,820
which these two events do not occur so

396
00:21:37,409 --> 00:21:40,929
there are two more events of interest

397
00:21:39,820 --> 00:21:45,269
the first of which we will call a

398
00:21:40,929 --> 00:21:51,399
structural collision so this happens if

399
00:21:45,269 --> 00:21:54,960
if two values when two blocks when they

400
00:21:51,399 --> 00:21:54,959
are converted into functions the

401
00:21:54,970 --> 00:21:59,960
yeah when two unequal values when they

402
00:21:58,640 --> 00:22:07,400
are converted into functions they map to

403
00:21:59,960 --> 00:22:18,890
the same function yes okay so uh so the

404
00:22:07,400 --> 00:22:20,630
main so the main part is that such a

405
00:22:18,890 --> 00:22:23,420
structural collision will never occur in

406
00:22:20,630 --> 00:22:25,850
Sunday because the mapping from Delta x2

407
00:22:23,420 --> 00:22:27,890
f of Delta X is essentially injective so

408
00:22:25,850 --> 00:22:30,800
this this is the thing that we do not

409
00:22:27,890 --> 00:22:32,780
have to worry about in in this mode of

410
00:22:30,800 --> 00:22:35,720
encryption and the final level of

411
00:22:32,780 --> 00:22:38,809
interest is a row collision in which the

412
00:22:35,720 --> 00:22:41,630
labels off two nodes collide which may

413
00:22:38,809 --> 00:22:44,480
occur due to randomness induced because

414
00:22:41,630 --> 00:22:47,000
of applying the uniform random functions

415
00:22:44,480 --> 00:22:48,710
represented by the edges so it's in the

416
00:22:47,000 --> 00:22:51,320
paper we use graph theoretic arguments

417
00:22:48,710 --> 00:22:53,750
to prove or rather to bound the

418
00:22:51,320 --> 00:22:56,710
probability that collision occurs

419
00:22:53,750 --> 00:22:59,030
between the labels and once we do that

420
00:22:56,710 --> 00:23:01,550
the application of the edge coefficient

421
00:22:59,030 --> 00:23:05,000
technique is straightforward so we can

422
00:23:01,550 --> 00:23:08,178
prove that the only term that was left

423
00:23:05,000 --> 00:23:10,040
behind you can prove that this advantage

424
00:23:08,179 --> 00:23:15,230
bounds is bounded by this expression

425
00:23:10,040 --> 00:23:17,570
over here now since we have all the

426
00:23:15,230 --> 00:23:19,910
necessary terms you can add all of them

427
00:23:17,570 --> 00:23:23,090
to get the bound in term one so very

428
00:23:19,910 --> 00:23:26,270
quickly we do a brief overview of

429
00:23:23,090 --> 00:23:31,730
performance so we implemented the modes

430
00:23:26,270 --> 00:23:36,080
in both resource both the low end on v8

431
00:23:31,730 --> 00:23:40,690
platform and also on the Intel on Intel

432
00:23:36,080 --> 00:23:43,550
CPU for message length from I think for

433
00:23:40,690 --> 00:23:46,420
228 blocks we found that on high end

434
00:23:43,550 --> 00:23:51,860
architectures it's only 3% slower than

435
00:23:46,420 --> 00:23:57,350
two passes of CBC and on low-end updated

436
00:23:51,860 --> 00:23:59,120
the difference was around 7% for all

437
00:23:57,350 --> 00:24:01,010
processes in general for short messages

438
00:23:59,120 --> 00:24:03,020
it was only 11% worse than for longer

439
00:24:01,010 --> 00:24:05,070
messages however the performance

440
00:24:03,020 --> 00:24:08,850
penalties

441
00:24:05,070 --> 00:24:11,610
far greater for modes like Co FB which

442
00:24:08,850 --> 00:24:13,830
were designed to be single pass and for

443
00:24:11,610 --> 00:24:17,309
this we have a significant penalty in

444
00:24:13,830 --> 00:24:20,460
both low end and high end platforms so

445
00:24:17,309 --> 00:24:27,240
this is a tabulation of the substrate

446
00:24:20,460 --> 00:24:29,760
performance one minute maximum so this

447
00:24:27,240 --> 00:24:34,140
is on both the high-end and low-end

448
00:24:29,760 --> 00:24:38,429
platforms for ASIC we kind of tweaked

449
00:24:34,140 --> 00:24:41,309
the doubling by replacing it with a

450
00:24:38,429 --> 00:24:43,980
doublings on on a smaller field which we

451
00:24:41,309 --> 00:24:46,889
found very nicely fits into this spite

452
00:24:43,980 --> 00:24:48,510
wires a yes architecture and does not

453
00:24:46,890 --> 00:24:50,640
cause any problems to the security

454
00:24:48,510 --> 00:24:55,980
because this mapping from Delta X is

455
00:24:50,640 --> 00:24:58,530
still injective we implemented it using

456
00:24:55,980 --> 00:25:00,840
this bytes by serial a yes architecture

457
00:24:58,530 --> 00:25:02,100
and also nibble wise present act

458
00:25:00,840 --> 00:25:03,928
architecture and bonds both

459
00:25:02,100 --> 00:25:07,409
architectures it compares very favorably

460
00:25:03,929 --> 00:25:17,580
with the existing modes that also make

461
00:25:07,410 --> 00:25:18,570
use of thank you okay thank you so if

462
00:25:17,580 --> 00:25:21,480
there are any questions I would

463
00:25:18,570 --> 00:25:23,280
encourage you to ask them afterwards

464
00:25:21,480 --> 00:25:25,140
but if there is a very important

465
00:25:23,280 --> 00:25:30,690
question you can still ask it we can

466
00:25:25,140 --> 00:25:32,940
make an exception okay no one wants to

467
00:25:30,690 --> 00:25:34,310
ask you a question and so let's say

468
00:25:32,940 --> 00:25:40,349
thanks super-deep again

469
00:25:34,310 --> 00:25:40,349
[Applause]

