1
00:00:00,030 --> 00:00:06,270
now welcome to the last session of FZ it

2
00:00:04,170 --> 00:00:08,460
will be a session about new designs and

3
00:00:06,270 --> 00:00:10,320
there will be free talks the first talk

4
00:00:08,460 --> 00:00:12,750
is re on tone length preserving

5
00:00:10,320 --> 00:00:15,660
encryption for entry-level processors by

6
00:00:12,750 --> 00:00:18,779
Paul Crowley and Eric Biggers and Paul

7
00:00:15,660 --> 00:00:22,140
will give the talk thank you very much

8
00:00:18,779 --> 00:00:25,109
for the introduction I want to talk

9
00:00:22,140 --> 00:00:27,840
about a problem I'm on the Android

10
00:00:25,109 --> 00:00:29,220
platform security team and I want to

11
00:00:27,840 --> 00:00:31,500
talk about a problem myself or my

12
00:00:29,220 --> 00:00:33,870
colleague Eric faced and what we did

13
00:00:31,500 --> 00:00:35,640
about it this is going to one of the

14
00:00:33,870 --> 00:00:38,370
less technical talks you know it's the

15
00:00:35,640 --> 00:00:40,770
last day we're all tired but also any

16
00:00:38,370 --> 00:00:42,989
anthem is not a sort of deep technical

17
00:00:40,770 --> 00:00:44,399
advance its combination of well

18
00:00:42,989 --> 00:00:46,649
understood techniques and what I want to

19
00:00:44,399 --> 00:00:50,129
talk about is the the practical problem

20
00:00:46,649 --> 00:00:57,719
that we faced and why we chose adding

21
00:00:50,129 --> 00:01:00,780
anthem as a way of solving it if you any

22
00:00:57,719 --> 00:01:03,480
of you who have Android devices in this

23
00:01:00,780 --> 00:01:06,680
room undoubtedly those devices will be

24
00:01:03,480 --> 00:01:09,658
encrypted and those devices will have

25
00:01:06,680 --> 00:01:12,000
something like arm cryptographic

26
00:01:09,659 --> 00:01:14,720
extensions or perhaps even an inline

27
00:01:12,000 --> 00:01:17,040
crypto engine that makes AES super fast

28
00:01:14,720 --> 00:01:20,670
and so those devices will be encrypted

29
00:01:17,040 --> 00:01:22,229
using AES but for a lot of devices not

30
00:01:20,670 --> 00:01:24,320
in this room devices being for example

31
00:01:22,229 --> 00:01:27,810
being used in developing countries or

32
00:01:24,320 --> 00:01:29,520
IOT devices or something like that they

33
00:01:27,810 --> 00:01:34,229
have processes like the cortex a7

34
00:01:29,520 --> 00:01:35,699
processor which lack the ASCE extensions

35
00:01:34,229 --> 00:01:38,310
and on those devices

36
00:01:35,700 --> 00:01:41,549
AES is just not only acceptable

37
00:01:38,310 --> 00:01:43,259
performance and so this affects storage

38
00:01:41,549 --> 00:01:44,520
encryption which is my area but it

39
00:01:43,259 --> 00:01:49,820
affects all sorts of things like for

40
00:01:44,520 --> 00:01:54,600
example TLS connections and in TLS the

41
00:01:49,820 --> 00:01:57,570
solution to this was RFC 75 39 which

42
00:01:54,600 --> 00:02:01,079
uses down bernstein's primitives chacha

43
00:01:57,570 --> 00:02:04,679
only one 305 to build a fairly

44
00:02:01,079 --> 00:02:06,658
straightforward a EAD mode that you can

45
00:02:04,680 --> 00:02:08,640
use for these kinds of applications and

46
00:02:06,659 --> 00:02:10,050
it is I don't have benchmarks but

47
00:02:08,639 --> 00:02:13,049
there's similar benchmarks I'll show you

48
00:02:10,050 --> 00:02:14,760
later Friday anthem is way faster

49
00:02:13,050 --> 00:02:16,830
than a us on these devices and that

50
00:02:14,760 --> 00:02:18,540
gives you an acceptable performance and

51
00:02:16,830 --> 00:02:20,430
so for an internet connection for

52
00:02:18,540 --> 00:02:22,650
network connections

53
00:02:20,430 --> 00:02:28,020
RFC seventy five three nine solves this

54
00:02:22,650 --> 00:02:30,150
problem trouble is because it's an AED

55
00:02:28,020 --> 00:02:32,700
mode the cipher text has to be larger

56
00:02:30,150 --> 00:02:35,700
than their plaintext there has to be

57
00:02:32,700 --> 00:02:38,250
room for a Mac and there has to be an on

58
00:02:35,700 --> 00:02:40,890
switch is not reused the storage

59
00:02:38,250 --> 00:02:42,740
encryption we have to have a cipher text

60
00:02:40,890 --> 00:02:46,890
which is the same size as the plaintext

61
00:02:42,740 --> 00:02:48,570
and I'll get on to why that is so you're

62
00:02:46,890 --> 00:02:52,410
probably that the most familiar example

63
00:02:48,570 --> 00:02:54,720
of storage encryption is the full disk

64
00:02:52,410 --> 00:02:57,710
encryption for every physical sector on

65
00:02:54,720 --> 00:03:01,490
the device we have a virtual sector and

66
00:02:57,710 --> 00:03:03,810
the read/write to the virtual sector

67
00:03:01,490 --> 00:03:05,310
which is has to be exactly four

68
00:03:03,810 --> 00:03:07,980
kilobytes because that's what the

69
00:03:05,310 --> 00:03:10,470
software expects is encrypted and is

70
00:03:07,980 --> 00:03:11,880
sent of the hardware as exactly four

71
00:03:10,470 --> 00:03:15,270
kilobytes because that's what the

72
00:03:11,880 --> 00:03:18,240
hardware supports if we had flash

73
00:03:15,270 --> 00:03:21,240
storage that gave us a little bit more

74
00:03:18,240 --> 00:03:23,580
room we had to have a few extra bytes in

75
00:03:21,240 --> 00:03:25,350
our sectors then we could use an ad mode

76
00:03:23,580 --> 00:03:26,760
store these extra bytes that would that

77
00:03:25,350 --> 00:03:29,700
would change the picture they're a

78
00:03:26,760 --> 00:03:31,890
little bit I've been saying this since

79
00:03:29,700 --> 00:03:33,089
about 2000 I've been having this

80
00:03:31,890 --> 00:03:34,350
conversation with like if there's

81
00:03:33,090 --> 00:03:35,910
storage manufacturers could just give us

82
00:03:34,350 --> 00:03:39,150
a bit of extra room here we could really

83
00:03:35,910 --> 00:03:40,829
do something different even if they were

84
00:03:39,150 --> 00:03:43,620
to turn around tomorrow and say ok we're

85
00:03:40,830 --> 00:03:45,690
gonna do it we take a long time for that

86
00:03:43,620 --> 00:03:46,830
hardware to become available and to me

87
00:03:45,690 --> 00:03:49,079
this problem is urgent

88
00:03:46,830 --> 00:03:51,060
there are devices out there that are not

89
00:03:49,080 --> 00:03:56,850
using encryption because we don't have a

90
00:03:51,060 --> 00:03:59,190
solution to face now on a lot of more

91
00:03:56,850 --> 00:04:01,019
recent Android devices we don't use full

92
00:03:59,190 --> 00:04:03,270
disk encryption we use file based

93
00:04:01,020 --> 00:04:05,160
encryption and at first I hoped that

94
00:04:03,270 --> 00:04:09,140
this would give us another way to

95
00:04:05,160 --> 00:04:09,140
address the problem it would allow us to

96
00:04:09,470 --> 00:04:13,020
the file based encryption could mean we

97
00:04:11,910 --> 00:04:15,000
could be a little flexibility in our

98
00:04:13,020 --> 00:04:17,640
store format and maybe we could make

99
00:04:15,000 --> 00:04:20,100
room for a little bit of extra storage

100
00:04:17,640 --> 00:04:22,950
for a nonce on a Mac sadly it doesn't

101
00:04:20,100 --> 00:04:24,930
really work that way first of all that

102
00:04:22,950 --> 00:04:26,340
would be a major engineering effort bias

103
00:04:24,930 --> 00:04:28,440
to write a file system that could make

104
00:04:26,340 --> 00:04:31,619
room for this it would be a pretty deep

105
00:04:28,440 --> 00:04:33,090
change but even given those deep changes

106
00:04:31,620 --> 00:04:34,919
there will be certain circumstances

107
00:04:33,090 --> 00:04:37,799
where you would see a major hit

108
00:04:34,919 --> 00:04:39,659
so databases for example they expect

109
00:04:37,800 --> 00:04:42,060
that if they have a multi gigabyte

110
00:04:39,660 --> 00:04:44,310
database file they can go to some four

111
00:04:42,060 --> 00:04:47,160
kilobyte align sector and make a change

112
00:04:44,310 --> 00:04:49,289
and see a single write if we have to

113
00:04:47,160 --> 00:04:50,970
update an alts and a Mac for that sector

114
00:04:49,289 --> 00:04:53,219
making a little bit larger that means

115
00:04:50,970 --> 00:04:54,720
it's got to be at least two writes and

116
00:04:53,220 --> 00:04:59,099
when they read from it at least two

117
00:04:54,720 --> 00:05:01,860
reads that has the speed it breaks

118
00:04:59,099 --> 00:05:04,530
atomicity it makes it much it's a major

119
00:05:01,860 --> 00:05:07,440
challenge to update this in a way that

120
00:05:04,530 --> 00:05:09,840
is atomic but worse than that it's

121
00:05:07,440 --> 00:05:12,240
really bad for the flash devices the

122
00:05:09,840 --> 00:05:14,698
lifetime of a flash device is measured

123
00:05:12,240 --> 00:05:16,680
in writes if under these circumstances

124
00:05:14,699 --> 00:05:17,970
we're doubling the number of writes it

125
00:05:16,680 --> 00:05:19,800
will have the lifetime of the flash

126
00:05:17,970 --> 00:05:22,110
device which would be a serious

127
00:05:19,800 --> 00:05:23,789
inconvenience for users so even in the

128
00:05:22,110 --> 00:05:25,680
file based encryption scenario we can't

129
00:05:23,789 --> 00:05:27,690
get away from this problem that we have

130
00:05:25,680 --> 00:05:32,639
to have the cipher text the same size as

131
00:05:27,690 --> 00:05:35,430
the plaintext in order to call itself an

132
00:05:32,639 --> 00:05:37,199
Android device advice has to pass what

133
00:05:35,430 --> 00:05:40,620
we call the the compatibility definition

134
00:05:37,199 --> 00:05:43,380
document and that for many years now the

135
00:05:40,620 --> 00:05:46,199
CDD has required that Android devices be

136
00:05:43,380 --> 00:05:47,880
encrypted but there's a carve out and

137
00:05:46,199 --> 00:05:50,370
there's a carve out so that people in

138
00:05:47,880 --> 00:05:54,090
developing world countries can have a

139
00:05:50,370 --> 00:05:56,460
full-fledged smartphone operating system

140
00:05:54,090 --> 00:06:00,060
on the hardware that people that can

141
00:05:56,460 --> 00:06:02,849
afford that carve out says that if you

142
00:06:00,060 --> 00:06:04,949
encrypt AES at below 50 megabytes a

143
00:06:02,849 --> 00:06:08,820
second you may ship an unencrypted

144
00:06:04,949 --> 00:06:10,650
device now that's that's sad and that

145
00:06:08,820 --> 00:06:12,389
lots of people have unencrypted devices

146
00:06:10,650 --> 00:06:15,150
but it also provides some pretty weird

147
00:06:12,389 --> 00:06:17,490
incentives if you can just slow down ASN

148
00:06:15,150 --> 00:06:19,258
your device to 49 megabytes of seconds

149
00:06:17,490 --> 00:06:21,060
bingo you can ship that device

150
00:06:19,259 --> 00:06:22,740
unencrypted and now your device is

151
00:06:21,060 --> 00:06:24,570
faster than the device that one's 51

152
00:06:22,740 --> 00:06:27,780
megabytes a second which is unencrypted

153
00:06:24,570 --> 00:06:31,349
so oh I was pretty unsatisfied with this

154
00:06:27,780 --> 00:06:35,279
and III wanted to fix that so here's

155
00:06:31,349 --> 00:06:36,870
what we did so given that the ciphertext

156
00:06:35,279 --> 00:06:38,880
has to be the same size of the plaintext

157
00:06:36,870 --> 00:06:41,730
we can't achieve formal property

158
00:06:38,880 --> 00:06:43,400
of an a EAD mode it has to be

159
00:06:41,730 --> 00:06:46,740
deterministic because it's a bijection

160
00:06:43,400 --> 00:06:49,380
we rewrite new content to all sectors so

161
00:06:46,740 --> 00:06:51,450
there's no way to store a and a nonce

162
00:06:49,380 --> 00:06:53,460
that isn't reused and the best we can

163
00:06:51,450 --> 00:06:56,430
achieve is a tweakable super

164
00:06:53,460 --> 00:07:00,440
pseudo-random permutation we want for

165
00:06:56,430 --> 00:07:02,280
every sector we want there to be a

166
00:07:00,440 --> 00:07:03,960
ejection between the plaintext and

167
00:07:02,280 --> 00:07:07,020
ciphertext which is indistinguishable

168
00:07:03,960 --> 00:07:08,789
from a random permutation and for all of

169
00:07:07,020 --> 00:07:11,159
those sectors we want it to be a family

170
00:07:08,790 --> 00:07:12,600
of random family of permutations

171
00:07:11,160 --> 00:07:14,670
indistinguishable from a family of

172
00:07:12,600 --> 00:07:16,680
random permutations and that's assuming

173
00:07:14,670 --> 00:07:22,350
the attacker has access to the

174
00:07:16,680 --> 00:07:23,610
encryption and decryption functions so

175
00:07:22,350 --> 00:07:25,740
an example of a tweakable

176
00:07:23,610 --> 00:07:28,110
super pseudo-random permutation is a sx

177
00:07:25,740 --> 00:07:31,920
TS and this is what we use on modern

178
00:07:28,110 --> 00:07:34,860
file based encrypted devices to encrypt

179
00:07:31,920 --> 00:07:38,370
a 4 kilobyte sector we simply apply a sx

180
00:07:34,860 --> 00:07:39,870
d s 256 times in parallel units and so

181
00:07:38,370 --> 00:07:41,580
the tweet comes in two parts there's a

182
00:07:39,870 --> 00:07:43,860
part for the offset in to the sector and

183
00:07:41,580 --> 00:07:46,560
there's a part within the sector for the

184
00:07:43,860 --> 00:07:48,780
offset within the sector however on the

185
00:07:46,560 --> 00:07:52,650
devices to be target we see performance

186
00:07:48,780 --> 00:07:54,929
of around 59 cycles per byte which is

187
00:07:52,650 --> 00:07:57,299
like 20 mega second which is way too

188
00:07:54,930 --> 00:07:59,120
slow for our users experience if they're

189
00:07:57,300 --> 00:08:02,820
loading an app or something it takes

190
00:07:59,120 --> 00:08:06,830
really visibly too long and so we can't

191
00:08:02,820 --> 00:08:06,830
expect about our users won't accept it

192
00:08:07,460 --> 00:08:12,840
better than we can achieve a better

193
00:08:10,230 --> 00:08:14,970
security guarantee fast super

194
00:08:12,840 --> 00:08:17,280
pseudo-random permutation is applied to

195
00:08:14,970 --> 00:08:18,870
the entire four kilobyte sector so a

196
00:08:17,280 --> 00:08:20,429
change to any bit of the plaintext in

197
00:08:18,870 --> 00:08:22,800
that sector it affects the entire cipher

198
00:08:20,430 --> 00:08:25,770
text and vice versa and for every tweak

199
00:08:22,800 --> 00:08:28,170
it should appear to be a completely new

200
00:08:25,770 --> 00:08:30,510
permutation not only does this give us

201
00:08:28,170 --> 00:08:32,700
better security properties it gives us

202
00:08:30,510 --> 00:08:35,669
an opportunity to be faster because

203
00:08:32,700 --> 00:08:38,310
we're operating in much larger bulk on

204
00:08:35,669 --> 00:08:41,069
the data we can use primitives that work

205
00:08:38,309 --> 00:08:47,729
in bulk and give us greater speed in

206
00:08:41,070 --> 00:08:48,390
bulk NS PRP has to read every byte of

207
00:08:47,730 --> 00:08:50,100
the plaintext

208
00:08:48,390 --> 00:08:52,890
before they write anything so you have

209
00:08:50,100 --> 00:08:53,170
to have at least two passes because we

210
00:08:52,890 --> 00:08:55,810
will

211
00:08:53,170 --> 00:08:57,189
it to be super pseudo-random we need the

212
00:08:55,810 --> 00:08:59,050
same property in the during decryption

213
00:08:57,190 --> 00:09:02,920
direction which means a minimum of three

214
00:08:59,050 --> 00:09:05,349
files passes so we've gone for a hash so

215
00:09:02,920 --> 00:09:07,779
hash structure simply because the hash

216
00:09:05,350 --> 00:09:09,910
is faster than desorb and so doubling up

217
00:09:07,779 --> 00:09:12,100
the hashes is faster than doubling is

218
00:09:09,910 --> 00:09:14,139
all wrong

219
00:09:12,100 --> 00:09:16,389
and we're inspired by examples like I

220
00:09:14,139 --> 00:09:17,970
mean there's a lot of interesting work

221
00:09:16,389 --> 00:09:21,160
in this area which is cited in the paper

222
00:09:17,970 --> 00:09:26,199
we are inspired by examples like a each

223
00:09:21,160 --> 00:09:29,230
counter in h CH which that you like the

224
00:09:26,199 --> 00:09:31,060
other work that we looked at is based on

225
00:09:29,230 --> 00:09:33,250
the assumption that you're going to use

226
00:09:31,060 --> 00:09:37,388
AES and you're going to use multipliers

227
00:09:33,250 --> 00:09:39,850
and GF 1 2 8h counter initiate have this

228
00:09:37,389 --> 00:09:45,670
this hash door hash structure they have

229
00:09:39,850 --> 00:09:48,220
a narrow 16 byte block on the left and

230
00:09:45,670 --> 00:09:49,930
they use that they hash the wide block

231
00:09:48,220 --> 00:09:52,930
on the right to combine with a block on

232
00:09:49,930 --> 00:09:54,399
the left they use that to generate the

233
00:09:52,930 --> 00:09:56,680
notes that goes into the counter mode

234
00:09:54,399 --> 00:09:59,529
encryption and then they hash can on the

235
00:09:56,680 --> 00:10:01,899
other side and there's a single block

236
00:09:59,529 --> 00:10:05,709
cipher call on the thin block on the

237
00:10:01,899 --> 00:10:09,100
left to defeat the Looby drag off attack

238
00:10:05,709 --> 00:10:11,109
on the three round feistel structure but

239
00:10:09,100 --> 00:10:14,019
because like the other things I looked

240
00:10:11,110 --> 00:10:16,540
at this is based on a es and Jia GF 2 to

241
00:10:14,019 --> 00:10:18,310
the ones who ate it doesn't form except

242
00:10:16,540 --> 00:10:19,329
its eaves better security properties but

243
00:10:18,310 --> 00:10:23,890
it doesn't perform better on our

244
00:10:19,329 --> 00:10:26,050
hardware so the work we did was simply

245
00:10:23,890 --> 00:10:28,089
to take these ideas in H counter and H

246
00:10:26,050 --> 00:10:30,790
th and combine them with the ideas from

247
00:10:28,089 --> 00:10:35,550
RFC 75 39 with their like high

248
00:10:30,790 --> 00:10:38,050
performance primitives we have and so we

249
00:10:35,550 --> 00:10:41,469
that means we change the the hash

250
00:10:38,050 --> 00:10:42,670
combiner on the left to a addition more

251
00:10:41,470 --> 00:10:43,779
two to the one to eight because that's

252
00:10:42,670 --> 00:10:47,709
the combiner that works well with our

253
00:10:43,779 --> 00:10:49,089
hash and but the structure is basically

254
00:10:47,709 --> 00:10:51,760
very similar

255
00:10:49,089 --> 00:10:52,360
we also because to char is very well

256
00:10:51,760 --> 00:10:54,880
behaved

257
00:10:52,360 --> 00:10:57,670
compared to AES in counter mode we can

258
00:10:54,880 --> 00:11:03,100
achieve a slight optimization where we

259
00:10:57,670 --> 00:11:05,319
don't have to we can see the slight

260
00:11:03,100 --> 00:11:06,790
optimization where to char and AES can

261
00:11:05,319 --> 00:11:08,560
run in parallel in the decryption

262
00:11:06,790 --> 00:11:09,969
interactions that we sacrifice the

263
00:11:08,560 --> 00:11:12,250
asymmetry of encryption and decryption

264
00:11:09,970 --> 00:11:15,220
but it can give us an opportunity for a

265
00:11:12,250 --> 00:11:16,780
slight speed up in decryption and so

266
00:11:15,220 --> 00:11:19,360
that if that gives us a massive

267
00:11:16,780 --> 00:11:23,260
performance boost 17.8 cycles were quite

268
00:11:19,360 --> 00:11:26,080
well over twice as fast as a sx TS and

269
00:11:23,260 --> 00:11:29,890
that was a big win but we needed it to

270
00:11:26,080 --> 00:11:31,960
be if we were going to the discussion we

271
00:11:29,890 --> 00:11:34,750
were going to have with OEMs trying to

272
00:11:31,960 --> 00:11:36,580
make sure this feature was mandatory was

273
00:11:34,750 --> 00:11:39,490
going to be a lot easier for every cycle

274
00:11:36,580 --> 00:11:41,530
of a byte I could shave off this mode so

275
00:11:39,490 --> 00:11:44,920
the first change we made was we switched

276
00:11:41,530 --> 00:11:47,220
from chassis r22 cha-cha r12 the

277
00:11:44,920 --> 00:11:50,050
currently the best attacks on ChaCha

278
00:11:47,220 --> 00:11:52,000
break7 rounds and that's been the case

279
00:11:50,050 --> 00:11:54,160
for over a decade now and it's seen a

280
00:11:52,000 --> 00:11:56,380
lot of crypt analysis in that time so

281
00:11:54,160 --> 00:12:00,839
every round of cha-cha adds a lot of

282
00:11:56,380 --> 00:12:05,620
strength and so we felt good about

283
00:12:00,840 --> 00:12:07,150
choosing choosing that mode that gave us

284
00:12:05,620 --> 00:12:09,460
thirteen point six cycles byte which is

285
00:12:07,150 --> 00:12:12,280
a significant improvement but there was

286
00:12:09,460 --> 00:12:13,930
room for one other improvement which is

287
00:12:12,280 --> 00:12:17,470
that while poly one three or five is

288
00:12:13,930 --> 00:12:20,829
very fast there are still faster epsilon

289
00:12:17,470 --> 00:12:24,130
with Delta Universal functions on on

290
00:12:20,830 --> 00:12:27,160
this hardware and so we looked at NH for

291
00:12:24,130 --> 00:12:29,560
hashing the bulk of the data NH is

292
00:12:27,160 --> 00:12:32,230
blindingly fast around 1.5 cycles a byte

293
00:12:29,560 --> 00:12:35,619
and they just output is variable length

294
00:12:32,230 --> 00:12:37,900
the long the more you hash the larger

295
00:12:35,620 --> 00:12:39,280
larger its output so we use NH

296
00:12:37,900 --> 00:12:42,040
essentially as a as a compression

297
00:12:39,280 --> 00:12:43,810
function to reduce the amount of data we

298
00:12:42,040 --> 00:12:45,520
feed to probably 1 3 or 5 and then poly

299
00:12:43,810 --> 00:12:48,189
one 3 or 5 handles the final hashing

300
00:12:45,520 --> 00:12:50,680
stage and that's then combined combined

301
00:12:48,190 --> 00:12:53,320
with the tweak and that gives us our

302
00:12:50,680 --> 00:12:57,370
mode @e anthem at ten point six cycles

303
00:12:53,320 --> 00:13:03,880
per byte and so this is the overall

304
00:12:57,370 --> 00:13:06,550
performance where so because the because

305
00:13:03,880 --> 00:13:08,020
of the single IES encryption we get

306
00:13:06,550 --> 00:13:10,270
faster the wider the block we're

307
00:13:08,020 --> 00:13:13,720
encrypting but we still fairly

308
00:13:10,270 --> 00:13:17,439
acceptable evil on the 512-byte sectors

309
00:13:13,720 --> 00:13:20,140
that you used to get on all devices and

310
00:13:17,440 --> 00:13:21,000
with wear faster than normal in fosston

311
00:13:20,140 --> 00:13:23,340
aes fast

312
00:13:21,000 --> 00:13:25,170
other block ciphers such as noachian and

313
00:13:23,340 --> 00:13:31,110
speck and there's a there's a larger

314
00:13:25,170 --> 00:13:32,790
performance table in the paper I think

315
00:13:31,110 --> 00:13:36,740
I've got time to talk a little bit about

316
00:13:32,790 --> 00:13:39,390
the proof it's fairly straightforward so

317
00:13:36,740 --> 00:13:40,800
this is the main step in the proof where

318
00:13:39,390 --> 00:13:43,520
the adversary is trying to distinguish

319
00:13:40,800 --> 00:13:45,719
between two worlds world X and world by

320
00:13:43,520 --> 00:13:49,770
they can make plaintext and ciphertext

321
00:13:45,720 --> 00:13:51,210
queries of any length and tweak so so

322
00:13:49,770 --> 00:13:53,760
world X is essentially a tea anton

323
00:13:51,210 --> 00:13:56,100
except we replace the block cipher aes

324
00:13:53,760 --> 00:13:58,590
with a random permutation pi and we

325
00:13:56,100 --> 00:14:01,980
replaced a char with a random function f

326
00:13:58,590 --> 00:14:03,690
in world Y for every query the attacker

327
00:14:01,980 --> 00:14:06,060
makes they get a random reply of the

328
00:14:03,690 --> 00:14:08,910
appropriate length and we're going to

329
00:14:06,060 --> 00:14:10,290
use the H Co efficient technique which

330
00:14:08,910 --> 00:14:13,890
is thanks to one of my reviews for

331
00:14:10,290 --> 00:14:16,020
pointing that suggesting that and so

332
00:14:13,890 --> 00:14:17,069
after the final query we're gonna make

333
00:14:16,020 --> 00:14:18,510
the attackers life a little bit easier

334
00:14:17,070 --> 00:14:22,250
we're going to give them the hash key

335
00:14:18,510 --> 00:14:22,250
which can't hurt and can only help them

336
00:14:23,870 --> 00:14:29,790
once the attacker has the hash key one

337
00:14:27,540 --> 00:14:32,010
thing they can do is calculate all of

338
00:14:29,790 --> 00:14:35,640
the intermediate hashes inside of a

339
00:14:32,010 --> 00:14:37,920
mountain so you've got this this diagram

340
00:14:35,640 --> 00:14:40,439
where you've got these hashes being

341
00:14:37,920 --> 00:14:43,740
either side of AES and we're going to

342
00:14:40,440 --> 00:14:45,330
allow the attacker to calculate those so

343
00:14:43,740 --> 00:14:46,740
they can put in the plaintext at the top

344
00:14:45,330 --> 00:14:48,270
tweak it aside and get the plaintext

345
00:14:46,740 --> 00:14:52,290
hash and the same thing for the

346
00:14:48,270 --> 00:14:55,230
ciphertext of the other out having done

347
00:14:52,290 --> 00:14:56,969
that they can look for collisions either

348
00:14:55,230 --> 00:14:58,530
in the plaintext hash or the ciphertext

349
00:14:56,970 --> 00:14:59,850
hash it doesn't matter of a plaintext

350
00:14:58,530 --> 00:15:01,470
have collides of the ciphertext hash

351
00:14:59,850 --> 00:15:07,080
only matters that if there's a collision

352
00:15:01,470 --> 00:15:08,250
in a specific layer and the if they find

353
00:15:07,080 --> 00:15:10,740
such a collision they're going they're

354
00:15:08,250 --> 00:15:13,860
going to win what's the probability for

355
00:15:10,740 --> 00:15:15,180
whatever queries they do we can bound

356
00:15:13,860 --> 00:15:18,750
the probability of finding such a

357
00:15:15,180 --> 00:15:20,219
collision and because the wonderful

358
00:15:18,750 --> 00:15:21,750
thing about the H coefficient technique

359
00:15:20,220 --> 00:15:24,180
is we only have to consider the

360
00:15:21,750 --> 00:15:27,110
probability in world wide this is this

361
00:15:24,180 --> 00:15:29,729
is the effort that it saves us so the

362
00:15:27,110 --> 00:15:31,470
for the result it's pretty simple the

363
00:15:29,730 --> 00:15:33,140
result is totally random so the

364
00:15:31,470 --> 00:15:34,519
right-hand side is totally random

365
00:15:33,140 --> 00:15:35,870
and it's combined with whatever the hash

366
00:15:34,519 --> 00:15:37,970
value is but the result is totally

367
00:15:35,870 --> 00:15:40,820
random so the probability of collide

368
00:15:37,970 --> 00:15:44,510
with any specific previous query is 2 to

369
00:15:40,820 --> 00:15:45,980
the minus 1 to 8 for the this is

370
00:15:44,510 --> 00:15:48,880
assuming a plaintext query at all the

371
00:15:45,980 --> 00:15:53,630
exact opposite for a cipher text query

372
00:15:48,880 --> 00:15:55,760
for a plaintext query the it's the

373
00:15:53,630 --> 00:15:57,439
epsilon we were blind the epsilon almost

374
00:15:55,760 --> 00:16:01,510
or universal property of the hash

375
00:15:57,440 --> 00:16:04,579
function the we forbid pointless queries

376
00:16:01,510 --> 00:16:07,250
so given its claimed its query either

377
00:16:04,579 --> 00:16:09,260
plain text or the tweet or both must for

378
00:16:07,250 --> 00:16:10,820
any given previous query they have to

379
00:16:09,260 --> 00:16:13,279
one of those two has to be different and

380
00:16:10,820 --> 00:16:15,350
so the result is the probability that

381
00:16:13,279 --> 00:16:17,689
the hash will differ by any given amount

382
00:16:15,350 --> 00:16:19,279
is at most Epsilon

383
00:16:17,690 --> 00:16:21,500
meaning the probability there'll be a

384
00:16:19,279 --> 00:16:25,880
collision in the plaintext is at most

385
00:16:21,500 --> 00:16:30,310
Epsilon and so across all pairs of

386
00:16:25,880 --> 00:16:32,959
queries the probability that we'll see

387
00:16:30,310 --> 00:16:35,569
such a collision is the most epsilon

388
00:16:32,959 --> 00:16:39,109
plus 2 to the minus 1 to 8 times Q

389
00:16:35,570 --> 00:16:43,010
choose 2 if that happens we call that a

390
00:16:39,110 --> 00:16:47,990
bad transcript and so supposing we get a

391
00:16:43,010 --> 00:16:51,890
good transcript what's the probability

392
00:16:47,990 --> 00:16:53,990
given the queries the attacker for a

393
00:16:51,890 --> 00:16:56,990
given deterministic attacker what's the

394
00:16:53,990 --> 00:16:59,899
probability we'll see a particular set

395
00:16:56,990 --> 00:17:01,100
of responses and well why it's pretty

396
00:16:59,899 --> 00:17:02,870
simple for a given response the

397
00:17:01,100 --> 00:17:04,579
probability is 2 to the minus P all the

398
00:17:02,870 --> 00:17:08,089
filters are equally likely the length of

399
00:17:04,579 --> 00:17:10,399
the response is the length of P and 2 to

400
00:17:08,089 --> 00:17:13,159
the minus the length of P in world X

401
00:17:10,400 --> 00:17:15,500
it's almost the same we'll see a

402
00:17:13,160 --> 00:17:17,689
particular response first of all if F

403
00:17:15,500 --> 00:17:19,520
has exactly the correct output des or

404
00:17:17,689 --> 00:17:21,860
into the content on the left-hand side

405
00:17:19,520 --> 00:17:24,949
to convert it to the expected content in

406
00:17:21,859 --> 00:17:27,290
the ciphertext probability of that is 2

407
00:17:24,949 --> 00:17:31,370
to the minus the length of P minus 1 to

408
00:17:27,290 --> 00:17:34,070
8 on the right hand side pi has to

409
00:17:31,370 --> 00:17:36,260
encrypt in just the right way for the

410
00:17:34,070 --> 00:17:39,020
first query the probability of that is 2

411
00:17:36,260 --> 00:17:42,950
to the minus 1 to 8 as the queries go on

412
00:17:39,020 --> 00:17:44,629
because this is a good transcript it's

413
00:17:42,950 --> 00:17:45,679
always producing a value that it's a

414
00:17:44,630 --> 00:17:46,470
never produced before it's always

415
00:17:45,679 --> 00:17:47,789
guaranteed

416
00:17:46,470 --> 00:17:51,360
deucey Valley has never produced before

417
00:17:47,789 --> 00:17:54,059
and so the it's a probability of getting

418
00:17:51,360 --> 00:17:56,580
it right goes up by a tiny bit every

419
00:17:54,059 --> 00:17:58,200
time and so that's 1 over 2 to the 1 - 8

420
00:17:56,580 --> 00:18:01,620
- I where I is the number of queries

421
00:17:58,200 --> 00:18:04,289
before this one and I should mention

422
00:18:01,620 --> 00:18:05,850
that the reason why we can say make the

423
00:18:04,289 --> 00:18:07,740
assertion I did where F is because the

424
00:18:05,850 --> 00:18:09,449
notes is being fed to F is unique every

425
00:18:07,740 --> 00:18:11,179
time and so its output is always

426
00:18:09,450 --> 00:18:13,260
independent from all previous outputs

427
00:18:11,179 --> 00:18:15,870
and these two probabilities are also

428
00:18:13,260 --> 00:18:19,080
independent so overall the probability

429
00:18:15,870 --> 00:18:20,760
we'll see this well it's this formula

430
00:18:19,080 --> 00:18:22,620
here it's the product of the two but the

431
00:18:20,760 --> 00:18:25,289
important thing is this is always either

432
00:18:22,620 --> 00:18:26,189
the same and if it's one query or just a

433
00:18:25,289 --> 00:18:28,140
little bit bigger

434
00:18:26,190 --> 00:18:30,659
the worldA Probert than the probability

435
00:18:28,140 --> 00:18:35,039
in world wide and these sum across all

436
00:18:30,659 --> 00:18:36,840
queries so now we can play the H

437
00:18:35,039 --> 00:18:38,129
coefficient technique every good

438
00:18:36,840 --> 00:18:40,439
transcript is at least as likely in

439
00:18:38,130 --> 00:18:42,539
world X well why we've bounded the

440
00:18:40,440 --> 00:18:45,450
probability of a bad transcript and that

441
00:18:42,539 --> 00:18:47,158
bound it bounds the distinguishing

442
00:18:45,450 --> 00:18:51,780
advantage which is that most epsilon

443
00:18:47,159 --> 00:18:57,960
plus 2 to the minus 1/2 8 times Q choose

444
00:18:51,780 --> 00:18:59,580
2 so epsilon depends on the sum bound on

445
00:18:57,960 --> 00:19:00,750
the length of the message in the tweak

446
00:18:59,580 --> 00:19:03,449
the attacker sounds we're using

447
00:19:00,750 --> 00:19:04,980
polynomial hashing so the longer the

448
00:19:03,450 --> 00:19:09,120
message gets longer the tweak gets the

449
00:19:04,980 --> 00:19:12,179
the larger epsilon gets but we plug that

450
00:19:09,120 --> 00:19:17,789
into our formula and we add terms for RP

451
00:19:12,179 --> 00:19:20,100
RP RP PRF bounds and for to chart and a

452
00:19:17,789 --> 00:19:22,470
s and we get this rather large

453
00:19:20,100 --> 00:19:24,899
expression but the key thing is that it

454
00:19:22,470 --> 00:19:26,669
is linear in the message to tweet length

455
00:19:24,900 --> 00:19:30,020
and it's quadratic and a number of

456
00:19:26,669 --> 00:19:30,020
queries and it's small

457
00:19:34,390 --> 00:19:40,780
the good news is adiantum is already

458
00:19:37,330 --> 00:19:43,780
part of the league's 5.0 so I don't

459
00:19:40,780 --> 00:19:45,639
really think in terms of years I don't

460
00:19:43,780 --> 00:19:48,250
call these 2017 and 2018 you know I call

461
00:19:45,640 --> 00:19:49,960
years things like Oreo and pie because

462
00:19:48,250 --> 00:19:51,850
those the names of the Android dessert

463
00:19:49,960 --> 00:19:54,460
releases to come out in each year so

464
00:19:51,850 --> 00:19:57,399
this year's release was Android pie and

465
00:19:54,460 --> 00:19:59,080
we have added and at the end time to

466
00:19:57,400 --> 00:20:03,040
enjoy pie and some devices will be using

467
00:19:59,080 --> 00:20:04,270
that and in android q which we don't

468
00:20:03,040 --> 00:20:06,700
know what it'll be called yet if you

469
00:20:04,270 --> 00:20:09,030
know of a dessert with that's called

470
00:20:06,700 --> 00:20:12,040
after the letter Q please let me know

471
00:20:09,030 --> 00:20:13,990
the there will be no carve out we will

472
00:20:12,040 --> 00:20:16,720
require encryption on all devices and

473
00:20:13,990 --> 00:20:27,940
wear AAS is too slow those devices will

474
00:20:16,720 --> 00:20:30,810
use adiantum thank you very much any

475
00:20:27,940 --> 00:20:30,810
questions from the audience

476
00:20:39,039 --> 00:20:44,509
so then I will ask a question I was

477
00:20:42,169 --> 00:20:46,989
wondering sir you said it has some

478
00:20:44,509 --> 00:20:50,450
favorable properties compared to X yes

479
00:20:46,989 --> 00:20:52,940
so could it be also interesting to use

480
00:20:50,450 --> 00:20:56,539
it on the devices which have aes support

481
00:20:52,940 --> 00:20:58,639
and then replace the cha-cha call with a

482
00:20:56,539 --> 00:21:02,359
yes in counter mode or something is that

483
00:20:58,639 --> 00:21:04,340
something you looked at where you used

484
00:21:02,359 --> 00:21:07,249
to like ASC instructions that are very

485
00:21:04,340 --> 00:21:08,478
appealing a lot of these devices so all

486
00:21:07,249 --> 00:21:09,739
these devices have inline encryption

487
00:21:08,479 --> 00:21:12,320
engines and they're it's hard to make

488
00:21:09,739 --> 00:21:13,820
changes but also an S PRP mode is a

489
00:21:12,320 --> 00:21:15,739
terrible fit for an in-line encryption

490
00:21:13,820 --> 00:21:18,168
engine they want to be able to stream

491
00:21:15,739 --> 00:21:20,210
the data path they want to be able to

492
00:21:18,169 --> 00:21:23,210
stream the data past and decrypt it as

493
00:21:20,210 --> 00:21:24,259
it goes an SPF p mode totally rules that

494
00:21:23,210 --> 00:21:26,989
out you have to read everything before

495
00:21:24,259 --> 00:21:28,190
you get to write anything and so maybe

496
00:21:26,989 --> 00:21:30,080
that's possible but I think that will be

497
00:21:28,190 --> 00:21:33,889
that will take a little bit longer to to

498
00:21:30,080 --> 00:21:35,658
land okay and maybe another question

499
00:21:33,889 --> 00:21:37,728
that was interested just maybe could you

500
00:21:35,659 --> 00:21:41,960
give some ballpark figures like how many

501
00:21:37,729 --> 00:21:50,570
percent of Android devices this would be

502
00:21:41,960 --> 00:21:53,899
deployed in the many millions but I we

503
00:21:50,570 --> 00:21:55,759
take this question often but it's a lot

504
00:21:53,899 --> 00:21:57,228
I mean you know it's a next billion

505
00:21:55,759 --> 00:22:01,519
users were aiming this at it's a lot of

506
00:21:57,229 --> 00:22:03,369
people okay any questions from the

507
00:22:01,519 --> 00:22:06,750
audience

508
00:22:03,369 --> 00:22:11,619
then let's finish speak again

509
00:22:06,750 --> 00:22:11,619
[Applause]

