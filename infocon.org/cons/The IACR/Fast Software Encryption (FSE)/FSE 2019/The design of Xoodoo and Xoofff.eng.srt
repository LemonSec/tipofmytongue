1
00:00:01,100 --> 00:00:06,720
so the next presentation is called the

2
00:00:03,480 --> 00:00:08,700
design of Zulu and zu it's a paper by

3
00:00:06,720 --> 00:00:10,500
you and AMA set off off the shelf and

4
00:00:08,700 --> 00:00:12,540
Asha honey from cave and she will give

5
00:00:10,500 --> 00:00:14,910
the talk okay thank you for the

6
00:00:12,540 --> 00:00:17,939
introduction hello everyone so indeed

7
00:00:14,910 --> 00:00:20,730
I'm going to talk about Zoo and zoo so

8
00:00:17,940 --> 00:00:22,529
this is the outline of a presentation I

9
00:00:20,730 --> 00:00:25,410
will give some motivation for this work

10
00:00:22,529 --> 00:00:27,930
then I will go through the definition

11
00:00:25,410 --> 00:00:30,840
sorry of zoo do then zoo and I will

12
00:00:27,930 --> 00:00:35,430
conclude with some words on how to how

13
00:00:30,840 --> 00:00:38,100
to use zoo how it can be used so first

14
00:00:35,430 --> 00:00:40,079
motivation the motivation starts from

15
00:00:38,100 --> 00:00:42,149
the very title of this conference we

16
00:00:40,079 --> 00:00:45,840
want to have first off to our encryption

17
00:00:42,149 --> 00:00:49,730
and presumably it needs to be secure all

18
00:00:45,840 --> 00:00:51,899
right usually we don't only need

19
00:00:49,730 --> 00:00:53,328
confidentiality but authentication is

20
00:00:51,899 --> 00:00:56,370
also important sometimes we need

21
00:00:53,329 --> 00:00:58,620
authentication encryption and it needs

22
00:00:56,370 --> 00:01:03,239
to run fast on software but yeah

23
00:00:58,620 --> 00:01:06,330
hardware that should not be should also

24
00:01:03,239 --> 00:01:09,210
looked at but more generally we would

25
00:01:06,330 --> 00:01:11,580
like to have something that runs a fine

26
00:01:09,210 --> 00:01:13,289
on a wide range of platforms because in

27
00:01:11,580 --> 00:01:15,750
many applications you can have small

28
00:01:13,290 --> 00:01:18,750
devices that interact with the high end

29
00:01:15,750 --> 00:01:20,939
server on the other end so the same the

30
00:01:18,750 --> 00:01:24,119
same algorithm would like it it would be

31
00:01:20,939 --> 00:01:29,130
nice if it can run fine on from the low

32
00:01:24,119 --> 00:01:31,650
end to the I end so one way to do this

33
00:01:29,130 --> 00:01:34,619
it would be to have some very small

34
00:01:31,650 --> 00:01:36,570
primitive that can be used in a mode or

35
00:01:34,619 --> 00:01:39,960
construction where there is a lot of

36
00:01:36,570 --> 00:01:43,139
parallelism so the small device can just

37
00:01:39,960 --> 00:01:47,130
compute this primitive serially but then

38
00:01:43,140 --> 00:01:49,649
as the platform grows this primitive can

39
00:01:47,130 --> 00:01:53,820
be computed several times in parallel as

40
00:01:49,649 --> 00:01:55,680
much as the platform allows it and so

41
00:01:53,820 --> 00:01:57,630
last year we presented something called

42
00:01:55,680 --> 00:02:00,780
farfalle it's a construction based on

43
00:01:57,630 --> 00:02:03,689
permutations and it has a lot of

44
00:02:00,780 --> 00:02:07,099
parallelism so let me go briefly through

45
00:02:03,689 --> 00:02:10,739
it so it takes as input a secret key K

46
00:02:07,099 --> 00:02:12,420
it goes to - there's a permutation F it

47
00:02:10,739 --> 00:02:12,940
goes to the fermentation to create a

48
00:02:12,420 --> 00:02:15,609
mask

49
00:02:12,940 --> 00:02:18,520
okay and then there is the the input of

50
00:02:15,610 --> 00:02:21,070
this pseudo-random function is divided

51
00:02:18,520 --> 00:02:23,410
into blocks the mask is going to be

52
00:02:21,070 --> 00:02:25,660
exalt into these these blocks but the

53
00:02:23,410 --> 00:02:28,359
mask is going to evolve through a

54
00:02:25,660 --> 00:02:31,060
rolling function depicted in blue and in

55
00:02:28,360 --> 00:02:33,340
all these these resulting sauce will be

56
00:02:31,060 --> 00:02:35,950
will go through permutations and will be

57
00:02:33,340 --> 00:02:37,930
the output will be summed so you can see

58
00:02:35,950 --> 00:02:40,750
that all these codes to the permutation

59
00:02:37,930 --> 00:02:43,210
can be paralyzed then the sum goes

60
00:02:40,750 --> 00:02:46,150
through another go to the permutation

61
00:02:43,210 --> 00:02:47,740
and then the output is again going

62
00:02:46,150 --> 00:02:52,210
through a rolling function to be

63
00:02:47,740 --> 00:02:55,000
diversified and weak so the secret the

64
00:02:52,210 --> 00:02:57,580
secret mask and this gives us output

65
00:02:55,000 --> 00:03:02,170
blocks so again the output can also be

66
00:02:57,580 --> 00:03:04,210
paralyzed so last year we proposed an

67
00:03:02,170 --> 00:03:06,130
instance of a file using the cat shock

68
00:03:04,210 --> 00:03:10,290
permutation with sixteen hundred bits

69
00:03:06,130 --> 00:03:13,180
and the result was called cavity well

70
00:03:10,290 --> 00:03:16,179
sixteen hundred bits that's a big too

71
00:03:13,180 --> 00:03:18,570
much for low-end devices so one option

72
00:03:16,180 --> 00:03:22,180
would be to go for instance to catch AK

73
00:03:18,570 --> 00:03:24,489
p400 but kajak p400 uses 16 bit length

74
00:03:22,180 --> 00:03:26,830
which is not very convenient on 32-bit

75
00:03:24,489 --> 00:03:29,380
platform so instead our motivation was

76
00:03:26,830 --> 00:03:33,750
to try to have a permutation that fits

77
00:03:29,380 --> 00:03:37,930
nicely in this setting and that's to do

78
00:03:33,750 --> 00:03:42,690
so please meet the the mascot of Zoo do

79
00:03:37,930 --> 00:03:46,300
so it's a very robust animal so yeah

80
00:03:42,690 --> 00:03:48,340
basically zoo do takes a lot of

81
00:03:46,300 --> 00:03:50,980
inspiration from the Gimli permutation

82
00:03:48,340 --> 00:03:53,830
so the Gimli permutation is defined on

83
00:03:50,980 --> 00:03:56,109
twelve words of 32 bit so that it fits

84
00:03:53,830 --> 00:04:00,880
nicely in the registers of typical ARM

85
00:03:56,110 --> 00:04:03,519
processors we reuse that idea but the

86
00:04:00,880 --> 00:04:05,560
round function itself is more inspired

87
00:04:03,519 --> 00:04:09,209
from from Tkachuk components than

88
00:04:05,560 --> 00:04:12,250
anything else and our main purpose is to

89
00:04:09,209 --> 00:04:14,410
plug this permutation into farfalle as I

90
00:04:12,250 --> 00:04:16,738
just explained and the result is called

91
00:04:14,410 --> 00:04:16,738
zoo

92
00:04:17,010 --> 00:04:21,159
another purpose is to plug it in the

93
00:04:19,510 --> 00:04:24,250
duplex construction the result is called

94
00:04:21,160 --> 00:04:25,430
zoo jack it's it's available in the

95
00:04:24,250 --> 00:04:28,030
pseudocode book

96
00:04:25,430 --> 00:04:32,660
but that's not the purpose of this talk

97
00:04:28,030 --> 00:04:35,119
okay so I said that we have 12 hours of

98
00:04:32,660 --> 00:04:38,650
32 bits so actually the state is

99
00:04:35,120 --> 00:04:38,650
organized oops

100
00:04:39,430 --> 00:04:46,639
as four times three times 32 bits this

101
00:04:44,660 --> 00:04:49,400
picture only shows 8 bits in the Z

102
00:04:46,639 --> 00:04:52,280
direction it should be 32 just for the

103
00:04:49,400 --> 00:04:55,159
picture so that's the state and the

104
00:04:52,280 --> 00:04:57,770
state consists of three planes of 128

105
00:04:55,160 --> 00:05:02,360
bits and each plane consists of four

106
00:04:57,770 --> 00:05:04,310
lanes of 32 bits a column is something

107
00:05:02,360 --> 00:05:06,830
that we are going to use a lot in the

108
00:05:04,310 --> 00:05:10,669
round function so the run function

109
00:05:06,830 --> 00:05:13,130
consists of first data the linear mixing

110
00:05:10,669 --> 00:05:16,909
go west we will move the planes

111
00:05:13,130 --> 00:05:19,789
independently of each other then by the

112
00:05:16,910 --> 00:05:21,620
nonlinear the yes box and who east again

113
00:05:19,789 --> 00:05:23,509
we will move the planes independently of

114
00:05:21,620 --> 00:05:28,460
each other and of course they are round

115
00:05:23,509 --> 00:05:30,710
constant so first guy so kai is really a

116
00:05:28,460 --> 00:05:32,570
three bit s box just like the S box of

117
00:05:30,710 --> 00:05:36,590
cash except that is on three bits

118
00:05:32,570 --> 00:05:41,870
instead of five so to compute one output

119
00:05:36,590 --> 00:05:43,698
bit you take two other bits from the

120
00:05:41,870 --> 00:05:45,979
input one of them is complemented

121
00:05:43,699 --> 00:05:48,349
then you take the product of these two

122
00:05:45,979 --> 00:05:49,609
bits and then you saw the result to the

123
00:05:48,349 --> 00:05:53,150
third bit and you do that for all the

124
00:05:49,610 --> 00:05:55,550
three bits it's a degree two function

125
00:05:53,150 --> 00:05:57,710
that is also an involution and it has

126
00:05:55,550 --> 00:06:01,880
nice properties in terms of propagation

127
00:05:57,710 --> 00:06:05,780
of linear masks and differences and yeah

128
00:06:01,880 --> 00:06:07,940
it made the analysis much easier in

129
00:06:05,780 --> 00:06:12,169
terms of trades I will give a few words

130
00:06:07,940 --> 00:06:15,560
on this theta is the mixing layer so

131
00:06:12,169 --> 00:06:18,169
it's a comparative mixer so the idea is

132
00:06:15,560 --> 00:06:21,169
that we first compute the parity of all

133
00:06:18,169 --> 00:06:23,150
the currents here then there isn't some

134
00:06:21,169 --> 00:06:25,400
folding so the idea is that two copies

135
00:06:23,150 --> 00:06:29,120
of the parity are sold together with

136
00:06:25,400 --> 00:06:31,460
different translations then the result

137
00:06:29,120 --> 00:06:34,550
is so backed into the state and that's

138
00:06:31,460 --> 00:06:36,349
the result so if you have one just one

139
00:06:34,550 --> 00:06:37,010
bit set to one you can you can see the

140
00:06:36,349 --> 00:06:38,870
effect

141
00:06:37,010 --> 00:06:42,080
so the

142
00:06:38,870 --> 00:06:43,370
sorry the the piety will be one bit and

143
00:06:42,080 --> 00:06:45,289
the folding will be two bits and then

144
00:06:43,370 --> 00:06:47,900
six bits will be soft to the to the

145
00:06:45,289 --> 00:06:50,150
state of course if you have two bits set

146
00:06:47,900 --> 00:06:53,590
to one is the same : the parity is zero

147
00:06:50,150 --> 00:06:55,128
and there is no effect that's the kernel

148
00:06:53,590 --> 00:06:58,250
holy s--t

149
00:06:55,129 --> 00:07:01,069
we don't shift the plane at y equals

150
00:06:58,250 --> 00:07:03,259
zero we shift by one position in the z

151
00:07:01,069 --> 00:07:06,319
direction the plane at y equal one and

152
00:07:03,259 --> 00:07:09,199
at y equal equals two we shift by two

153
00:07:06,319 --> 00:07:13,400
position two positions along x and eight

154
00:07:09,199 --> 00:07:18,050
positions along Z and then similarly go

155
00:07:13,400 --> 00:07:21,830
west one shift by X on the plane y

156
00:07:18,050 --> 00:07:24,740
equals one and eleven shifts along that

157
00:07:21,830 --> 00:07:27,948
in the plane y equals two so these

158
00:07:24,740 --> 00:07:30,740
planes they move independently of each

159
00:07:27,949 --> 00:07:32,569
other so all the structures on the

160
00:07:30,740 --> 00:07:36,500
currents will be destroyed for the next

161
00:07:32,569 --> 00:07:38,779
round so that's the pseudocode of of zoo

162
00:07:36,500 --> 00:07:41,029
do so first data computing the parity

163
00:07:38,779 --> 00:07:43,789
having the two copies and then showing

164
00:07:41,029 --> 00:07:44,300
them back hoe west shifting the two

165
00:07:43,789 --> 00:07:48,500
planes

166
00:07:44,300 --> 00:07:50,569
Yatta constants Chi computing the the

167
00:07:48,500 --> 00:07:55,849
products and then sewing them back and

168
00:07:50,569 --> 00:07:58,029
then host moving the 202 planes okay so

169
00:07:55,849 --> 00:08:00,889
in terms of cryptographic properties

170
00:07:58,029 --> 00:08:03,050
clearly the security of anything based

171
00:08:00,889 --> 00:08:04,699
on on Zulu would be limited by by

172
00:08:03,050 --> 00:08:07,159
differential cryptanalysis so the

173
00:08:04,699 --> 00:08:11,629
maximum probability of a differential

174
00:08:07,159 --> 00:08:13,938
from Delta a 2 letter B but finding this

175
00:08:11,629 --> 00:08:17,659
maximum differential is all to determine

176
00:08:13,939 --> 00:08:20,360
and instead we look we approximate this

177
00:08:17,659 --> 00:08:22,610
by the max the maximum probability of a

178
00:08:20,360 --> 00:08:24,500
differential trail differential trade is

179
00:08:22,610 --> 00:08:26,210
a trade it's a differential where each

180
00:08:24,500 --> 00:08:29,569
difference each intermediate difference

181
00:08:26,210 --> 00:08:31,489
is specified and similarly to the design

182
00:08:29,569 --> 00:08:33,320
of a check we have something called weak

183
00:08:31,490 --> 00:08:38,479
alignment and that makes this

184
00:08:33,320 --> 00:08:41,329
approximation plausible at least ok so

185
00:08:38,479 --> 00:08:43,190
we instead of talking about differential

186
00:08:41,328 --> 00:08:44,630
properties we talk about weights which

187
00:08:43,190 --> 00:08:47,839
is the negative logarithm of the

188
00:08:44,630 --> 00:08:51,019
differential probability and we looked

189
00:08:47,839 --> 00:08:52,670
at Zoo and try to have bounced on the

190
00:08:51,019 --> 00:08:57,470
these trails using the techniques

191
00:08:52,670 --> 00:09:01,069
presented two years ago so what we

192
00:08:57,470 --> 00:09:03,649
started with the all the trails up to of

193
00:09:01,069 --> 00:09:06,139
three rounds up to weight 50 and there

194
00:09:03,649 --> 00:09:09,139
we could find one with weight 36 so that

195
00:09:06,139 --> 00:09:12,350
gives us a bound of 36 for three rounds

196
00:09:09,139 --> 00:09:14,930
then we could extend these two to six

197
00:09:12,350 --> 00:09:18,410
front I mean we could not extend them to

198
00:09:14,930 --> 00:09:20,839
six round we could have by showing that

199
00:09:18,410 --> 00:09:22,730
we cannot extend them to six rounds we

200
00:09:20,839 --> 00:09:24,800
have an argument that says that any

201
00:09:22,730 --> 00:09:29,180
trail on six rounds should have at least

202
00:09:24,800 --> 00:09:31,008
weight of 104 and then 405 rounds we

203
00:09:29,180 --> 00:09:33,579
also did the exercise that's updated

204
00:09:31,009 --> 00:09:36,800
compared to the paper so for four rounds

205
00:09:33,579 --> 00:09:40,219
we could prove the bound of 74 and we

206
00:09:36,800 --> 00:09:42,410
found an instance of 80 so we don't know

207
00:09:40,220 --> 00:09:44,240
if this it is the best or not we just

208
00:09:42,410 --> 00:09:45,740
have an example for five rounds we

209
00:09:44,240 --> 00:09:47,449
didn't have an example but we could

210
00:09:45,740 --> 00:09:48,980
prove that the weight is at least 90 and

211
00:09:47,449 --> 00:09:51,740
the same goes for linear differential

212
00:09:48,980 --> 00:09:56,209
and linear trails have the same the same

213
00:09:51,740 --> 00:09:58,250
bounds on purpose by design we choose

214
00:09:56,209 --> 00:10:02,059
the the rotation constant such that this

215
00:09:58,250 --> 00:10:04,189
situation is like this so the diffusion

216
00:10:02,059 --> 00:10:06,350
is pretty good in terms of the strict

217
00:10:04,189 --> 00:10:08,000
Avalanche criteria we need three point

218
00:10:06,350 --> 00:10:11,059
five three and a half rounds in the fall

219
00:10:08,000 --> 00:10:12,620
direction to have fully diffusion and in

220
00:10:11,059 --> 00:10:15,980
the backward direction the inverse of

221
00:10:12,620 --> 00:10:20,449
theta is heavier and then we just need

222
00:10:15,980 --> 00:10:24,649
two rounds I think that's it for for zoo

223
00:10:20,449 --> 00:10:27,290
do so Zoo is just taking for phali

224
00:10:24,649 --> 00:10:28,189
plugging in zoo in those F's they're all

225
00:10:27,290 --> 00:10:32,420
old yes

226
00:10:28,189 --> 00:10:34,250
we also so yes zoo do is yeah it's a

227
00:10:32,420 --> 00:10:36,410
family of permutations parameterize by

228
00:10:34,250 --> 00:10:41,209
Deneuve round so we use six rounds of

229
00:10:36,410 --> 00:10:44,240
zoo in in zoo we also need to define the

230
00:10:41,209 --> 00:10:46,819
rolling function so for the on the

231
00:10:44,240 --> 00:10:49,579
compression side the rolling function is

232
00:10:46,819 --> 00:10:51,740
linear operating along full state and on

233
00:10:49,579 --> 00:10:55,489
the expansion side it's nonlinear and

234
00:10:51,740 --> 00:10:59,029
also operating on the full state we make

235
00:10:55,490 --> 00:11:02,350
a security claim of 128 bits of security

236
00:10:59,029 --> 00:11:05,740
I think it's both data and time

237
00:11:02,350 --> 00:11:08,680
exactly and we also make a post quantum

238
00:11:05,740 --> 00:11:10,690
claim if someone has access to a quantum

239
00:11:08,680 --> 00:11:13,810
computer then then the security is 2 to

240
00:11:10,690 --> 00:11:15,340
the 96 we don't make a claim for someone

241
00:11:13,810 --> 00:11:18,449
would implement this on a quantum

242
00:11:15,340 --> 00:11:18,450
computer that's a different story

243
00:11:19,350 --> 00:11:22,510
yeah

244
00:11:20,770 --> 00:11:24,430
so I said our goal was to have some good

245
00:11:22,510 --> 00:11:27,100
performance on a wide range of platforms

246
00:11:24,430 --> 00:11:29,500
so let me give you some some numbers so

247
00:11:27,100 --> 00:11:34,330
let's start with the context and the arm

248
00:11:29,500 --> 00:11:37,750
cortex-m zero so for long inputs we can

249
00:11:34,330 --> 00:11:40,240
reach 26 cycles per byte and on outputs

250
00:11:37,750 --> 00:11:42,850
similarly 25 grams per byte and then as

251
00:11:40,240 --> 00:11:45,310
a comparison the aes-128 in counter mode

252
00:11:42,850 --> 00:11:49,720
is about five times slower on that

253
00:11:45,310 --> 00:11:52,300
platform on cortex m3 which is a bit

254
00:11:49,720 --> 00:11:54,280
bigger we can reach between eight and

255
00:11:52,300 --> 00:11:57,459
nine cycles per byte for long inputs and

256
00:11:54,280 --> 00:12:01,150
outputs compared to something of about

257
00:11:57,460 --> 00:12:04,840
four times slower for the AES then on

258
00:12:01,150 --> 00:12:07,449
the high end so that's on the skylit

259
00:12:04,840 --> 00:12:09,340
processor we use the avx2 instruction

260
00:12:07,450 --> 00:12:11,680
set which allows us to have eight

261
00:12:09,340 --> 00:12:15,310
instances of zou do compute in parallel

262
00:12:11,680 --> 00:12:18,579
using 256 bit registers and then we are

263
00:12:15,310 --> 00:12:20,890
slightly slower than then yes well below

264
00:12:18,580 --> 00:12:22,810
one cycles per byte but slightly slower

265
00:12:20,890 --> 00:12:24,900
than than the yes but still using

266
00:12:22,810 --> 00:12:27,280
something that is a general-purpose

267
00:12:24,900 --> 00:12:33,100
instrument a general-purpose instruction

268
00:12:27,280 --> 00:12:36,400
set on the skylake accident the more

269
00:12:33,100 --> 00:12:39,430
recent processor they have ATX 512

270
00:12:36,400 --> 00:12:41,920
instruction set there we can compute 16

271
00:12:39,430 --> 00:12:45,069
instances of zoo do in parallel and and

272
00:12:41,920 --> 00:12:47,770
there we again are below 1 cycles per

273
00:12:45,070 --> 00:12:50,620
byte and we are even faster than and

274
00:12:47,770 --> 00:12:55,480
then they yes using hardware's

275
00:12:50,620 --> 00:12:58,230
instructions of course so let me

276
00:12:55,480 --> 00:12:59,620
conclude this presentation by now

277
00:12:58,230 --> 00:13:05,370
assuming we have

278
00:12:59,620 --> 00:13:06,490
zoo what can we do with it and actually

279
00:13:05,370 --> 00:13:08,980
farfalle

280
00:13:06,490 --> 00:13:10,510
implement something that we call a deck

281
00:13:08,980 --> 00:13:12,190
function so a deck function is not a new

282
00:13:10,510 --> 00:13:14,710
construction I'm going to define just a

283
00:13:12,190 --> 00:13:16,150
way to capture the that kind of the kind

284
00:13:14,710 --> 00:13:18,400
of functionality that farfalle

285
00:13:16,150 --> 00:13:19,840
implements of Zeus implements so deck

286
00:13:18,400 --> 00:13:22,930
stands for doubly extendable

287
00:13:19,840 --> 00:13:25,210
cryptographic kid function and so it's

288
00:13:22,930 --> 00:13:28,599
this FX here it takes as input a

289
00:13:25,210 --> 00:13:30,850
sequence of string so from x1 to XM and

290
00:13:28,600 --> 00:13:34,410
it's going to produce some output bits

291
00:13:30,850 --> 00:13:37,570
like a PRF but potentially an infinite

292
00:13:34,410 --> 00:13:39,100
number of output bits so now I'm going

293
00:13:37,570 --> 00:13:42,850
to explain a little bit the the

294
00:13:39,100 --> 00:13:44,590
conventions when we saw a string of a

295
00:13:42,850 --> 00:13:46,900
given length to another string of

296
00:13:44,590 --> 00:13:48,970
another length the result is the length

297
00:13:46,900 --> 00:13:50,650
of the smaller of the two strings so I

298
00:13:48,970 --> 00:13:52,660
have an infinite potentially infinite

299
00:13:50,650 --> 00:13:54,579
number of bits of output bits here but

300
00:13:52,660 --> 00:13:56,770
I'm showing that to 0 to the N so I

301
00:13:54,580 --> 00:14:00,070
effectively I'm just taking n bits of

302
00:13:56,770 --> 00:14:02,530
output from this deck function then this

303
00:14:00,070 --> 00:14:04,450
shift by cue means I'm skipping the

304
00:14:02,530 --> 00:14:07,510
first qubits so what I'm doing here is

305
00:14:04,450 --> 00:14:09,400
just taking n bits from this deck

306
00:14:07,510 --> 00:14:12,220
function starting from the offset cube

307
00:14:09,400 --> 00:14:16,420
so from object Q to offset Q plus n

308
00:14:12,220 --> 00:14:19,320
minus 1 so it's doubly extendable

309
00:14:16,420 --> 00:14:21,699
meaning that it has some incrementality

310
00:14:19,320 --> 00:14:24,820
properties first on the input if you

311
00:14:21,700 --> 00:14:28,240
compute FK of X and then you save some

312
00:14:24,820 --> 00:14:31,150
state and you want to compute F of Y

313
00:14:28,240 --> 00:14:33,250
after X then the the cost of computing

314
00:14:31,150 --> 00:14:36,250
this this new making this new evaluation

315
00:14:33,250 --> 00:14:39,700
does not depend on X J only depends on

316
00:14:36,250 --> 00:14:43,090
the next length of Y and clearly the

317
00:14:39,700 --> 00:14:46,570
farfalle construction allows for this

318
00:14:43,090 --> 00:14:48,820
and similarly on the output so it's also

319
00:14:46,570 --> 00:14:51,430
extendable on the output you can request

320
00:14:48,820 --> 00:14:53,350
first a number of bits then more bits

321
00:14:51,430 --> 00:14:55,000
and more bits and every time you ask for

322
00:14:53,350 --> 00:14:56,770
more bits you don't need to start from

323
00:14:55,000 --> 00:14:59,140
the beginning you just pay a cost that

324
00:14:56,770 --> 00:15:03,730
is proportional to the number of it you

325
00:14:59,140 --> 00:15:06,699
ask for incrementally so having a deck

326
00:15:03,730 --> 00:15:08,170
function and using this this idea of

327
00:15:06,700 --> 00:15:10,870
having a deck function you can build

328
00:15:08,170 --> 00:15:13,120
some modes and I'm going just to give

329
00:15:10,870 --> 00:15:16,120
one mode as an example we call this mode

330
00:15:13,120 --> 00:15:18,940
deck sunny force so it's a session based

331
00:15:16,120 --> 00:15:22,450
authenticating crucian mode session and

332
00:15:18,940 --> 00:15:26,020
non spaced so first session because we

333
00:15:22,450 --> 00:15:28,480
can it's a it's a stateful object and we

334
00:15:26,020 --> 00:15:29,910
can ask authenticated encryption of

335
00:15:28,480 --> 00:15:32,430
messages and

336
00:15:29,910 --> 00:15:34,709
every time the tag authenticates not

337
00:15:32,430 --> 00:15:36,150
only the current message but all the

338
00:15:34,710 --> 00:15:37,830
messages the sequence of all the

339
00:15:36,150 --> 00:15:39,709
messages that have been received so far

340
00:15:37,830 --> 00:15:43,400
that's that that's the session

341
00:15:39,710 --> 00:15:46,890
so at initialization it takes unknowns

342
00:15:43,400 --> 00:15:49,170
then we are going to use some bit e that

343
00:15:46,890 --> 00:15:50,970
is just one bit that is going to toggle

344
00:15:49,170 --> 00:15:54,599
from zero to one every time we switch

345
00:15:50,970 --> 00:15:57,300
from one message to the other history is

346
00:15:54,600 --> 00:15:59,970
going to capture the input of my deck

347
00:15:57,300 --> 00:16:04,410
function so it starts with just n the

348
00:15:59,970 --> 00:16:06,570
nuns and we create a tag an optional tag

349
00:16:04,410 --> 00:16:10,199
on just the session setup at just

350
00:16:06,570 --> 00:16:12,600
authenticates nuns then if a message

351
00:16:10,200 --> 00:16:16,230
comes in so it contains associate data a

352
00:16:12,600 --> 00:16:19,830
and plaintext B we start by creating

353
00:16:16,230 --> 00:16:22,350
some key stream here with the our deck

354
00:16:19,830 --> 00:16:24,630
function so now we have we still have

355
00:16:22,350 --> 00:16:26,610
only the nuns we skip the first T bits

356
00:16:24,630 --> 00:16:28,980
because we use them for the tag here and

357
00:16:26,610 --> 00:16:32,040
we saw that - the plaintext pin that

358
00:16:28,980 --> 00:16:34,980
gives us the cipher text then we update

359
00:16:32,040 --> 00:16:38,459
the history by adding the associate data

360
00:16:34,980 --> 00:16:41,310
and zero to recognize it e to recognize

361
00:16:38,460 --> 00:16:45,240
the current message same for the cipher

362
00:16:41,310 --> 00:16:47,369
text and one and we produce a tag on the

363
00:16:45,240 --> 00:16:50,880
current version of the history and we

364
00:16:47,370 --> 00:16:53,100
flip the bit for the next iteration the

365
00:16:50,880 --> 00:16:55,470
next iteration is going to start with

366
00:16:53,100 --> 00:16:57,480
this with the same history just skipping

367
00:16:55,470 --> 00:17:00,000
the first two bits but because they were

368
00:16:57,480 --> 00:17:02,700
produced as a tag in for the previous

369
00:17:00,000 --> 00:17:06,810
message and it goes on like this and e

370
00:17:02,700 --> 00:17:10,530
toggles from zero to one every time if

371
00:17:06,810 --> 00:17:15,510
we instantiate decks on e with roof the

372
00:17:10,530 --> 00:17:18,450
result is Zeus on e we also propose a

373
00:17:15,510 --> 00:17:20,339
mode called sansei which is basically it

374
00:17:18,450 --> 00:17:23,370
has the same functionality but there is

375
00:17:20,339 --> 00:17:26,339
no the nonce is constructed in SIV a

376
00:17:23,369 --> 00:17:29,129
kind of mode so the SIV is constructed

377
00:17:26,339 --> 00:17:31,610
from from the message sorry the nonce is

378
00:17:29,130 --> 00:17:36,720
created using SIV from the message and

379
00:17:31,610 --> 00:17:39,709
then deck WBC is a wide block cipher so

380
00:17:36,720 --> 00:17:43,520
it provides authenticated encryption

381
00:17:39,710 --> 00:17:46,220
with minimal expansion and all this is

382
00:17:43,520 --> 00:17:49,820
available in India in the extended key

383
00:17:46,220 --> 00:17:52,420
check code package and that's it thank

384
00:17:49,820 --> 00:17:52,419
you for your attention

385
00:17:54,950 --> 00:18:06,110
[Applause]

386
00:17:57,280 --> 00:18:07,310
any questions okay I have one small

387
00:18:06,110 --> 00:18:09,350
question

388
00:18:07,310 --> 00:18:10,010
so you mostly introduced in the context

389
00:18:09,350 --> 00:18:12,409
of your father

390
00:18:10,010 --> 00:18:14,060
but should I see suru as a standalone

391
00:18:12,410 --> 00:18:17,540
permutation or is it really designed for

392
00:18:14,060 --> 00:18:18,169
for father no you can use it for other

393
00:18:17,540 --> 00:18:20,990
purposes

394
00:18:18,170 --> 00:18:22,970
for instance if you take 12 rounds and

395
00:18:20,990 --> 00:18:24,530
it's sufficient to be plugged in the

396
00:18:22,970 --> 00:18:29,630
sponge or duplex construction it's

397
00:18:24,530 --> 00:18:32,440
strong enough for that okay so no other

398
00:18:29,630 --> 00:18:38,219
questions let's thanks you'll again

399
00:18:32,440 --> 00:18:38,219
[Applause]

