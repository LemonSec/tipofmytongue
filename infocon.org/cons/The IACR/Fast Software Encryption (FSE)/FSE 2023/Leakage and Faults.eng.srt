1
00:00:00,319 --> 00:00:05,160
is a leakage and the force and we have

2
00:00:05,160 --> 00:00:06,359
two talks

3
00:00:06,359 --> 00:00:08,300
and our first talk

4
00:00:08,300 --> 00:00:11,160
entertained by the exploring Integrity

5
00:00:11,160 --> 00:00:13,740
of AES with odds definitions and

6
00:00:13,740 --> 00:00:16,560
constructions are also the cyan deep

7
00:00:16,560 --> 00:00:19,140
Sahar Mustafa Kaila and the Tomah parang

8
00:00:19,140 --> 00:00:21,720
and the Mustafa will give us a talk

9
00:00:21,720 --> 00:00:25,619
please thanks

10
00:00:26,519 --> 00:00:29,279
so I will be first discussing a bit

11
00:00:29,279 --> 00:00:31,199
about fault attacks how they work and

12
00:00:31,199 --> 00:00:34,020
how we can attack classical AEG schemes

13
00:00:34,020 --> 00:00:36,180
I will give the concept about leveled

14
00:00:36,180 --> 00:00:38,040
implementations briefly and then I will

15
00:00:38,040 --> 00:00:41,219
discuss our constructions

16
00:00:41,219 --> 00:00:43,500
so fault attacks have been introduced in

17
00:00:43,500 --> 00:00:46,920
1997 and there is a lot of analysis on

18
00:00:46,920 --> 00:00:49,800
and discussions in the literature on how

19
00:00:49,800 --> 00:00:51,000
they can be used to break different

20
00:00:51,000 --> 00:00:53,399
schemes but most of these attacks they

21
00:00:53,399 --> 00:00:55,199
target like either key recovery or state

22
00:00:55,199 --> 00:00:57,780
recovery with few attacks that Target

23
00:00:57,780 --> 00:01:00,120
Integrity but most of them Target state

24
00:01:00,120 --> 00:01:01,559
recovery

25
00:01:01,559 --> 00:01:03,539
and the counter measures also targeted

26
00:01:03,539 --> 00:01:05,880
however in this line of work there are

27
00:01:05,880 --> 00:01:08,520
recently some works on this so there was

28
00:01:08,520 --> 00:01:10,979
a paper on sponge-like constructions

29
00:01:10,979 --> 00:01:13,080
where the amount of information leaked

30
00:01:13,080 --> 00:01:15,240
using faults is bounded in the security

31
00:01:15,240 --> 00:01:16,460
group

32
00:01:16,460 --> 00:01:19,619
and then there was a paper by fischlin

33
00:01:19,619 --> 00:01:22,619
and Ganser in ctrsca 2020 where they

34
00:01:22,619 --> 00:01:24,299
started discussing the concept of fault

35
00:01:24,299 --> 00:01:26,640
resilient authenticated encryption and

36
00:01:26,640 --> 00:01:28,580
they give one Construction

37
00:01:28,580 --> 00:01:31,500
in this work we discussed some of the

38
00:01:31,500 --> 00:01:33,900
definitions for default model and the

39
00:01:33,900 --> 00:01:35,939
different constructions like brf and mac

40
00:01:35,939 --> 00:01:38,579
and authenticated encryption we also

41
00:01:38,579 --> 00:01:40,140
show that the construction they gave in

42
00:01:40,140 --> 00:01:42,240
the 2020 paper does not achieve

43
00:01:42,240 --> 00:01:44,100
Integrity with faults

44
00:01:44,100 --> 00:01:45,960
and there is a parallel work which is

45
00:01:45,960 --> 00:01:48,000
the which is the talk after this one

46
00:01:48,000 --> 00:01:50,159
where they talk about the security of

47
00:01:50,159 --> 00:01:53,240
fault resilient Max

48
00:01:58,079 --> 00:02:00,000
so there are different types of fault

49
00:02:00,000 --> 00:02:01,560
attacks there is something called

50
00:02:01,560 --> 00:02:03,659
differential for fault attacks or DFA

51
00:02:03,659 --> 00:02:05,159
where for example you encrypt the

52
00:02:05,159 --> 00:02:06,899
message and you encrypt the same message

53
00:02:06,899 --> 00:02:08,880
again and you inject the fault and then

54
00:02:08,880 --> 00:02:10,199
you compare the output difference and

55
00:02:10,199 --> 00:02:13,020
you try to analyze it to get information

56
00:02:13,020 --> 00:02:15,360
about the state or the key there is

57
00:02:15,360 --> 00:02:17,700
statistical fault attacks or statistical

58
00:02:17,700 --> 00:02:20,040
ineffective fault attacks FIFA where you

59
00:02:20,040 --> 00:02:21,480
have many plain texts and you're

60
00:02:21,480 --> 00:02:23,580
injecting faults and then you observe

61
00:02:23,580 --> 00:02:25,020
some statistical properties in the

62
00:02:25,020 --> 00:02:27,300
output and then there are like something

63
00:02:27,300 --> 00:02:29,400
called safe error attack which is mostly

64
00:02:29,400 --> 00:02:31,739
your injector fault and you check that

65
00:02:31,739 --> 00:02:33,480
default did not have an effect on the

66
00:02:33,480 --> 00:02:35,940
message and from that you can also get

67
00:02:35,940 --> 00:02:39,980
yes information about the state

68
00:02:40,620 --> 00:02:44,220
so classical AED schemes don't take

69
00:02:44,220 --> 00:02:46,500
fault faults into consideration because

70
00:02:46,500 --> 00:02:48,060
they assume the implementation will be

71
00:02:48,060 --> 00:02:51,900
protected so we can even if we our goal

72
00:02:51,900 --> 00:02:53,580
is not the key recovery we can find the

73
00:02:53,580 --> 00:02:55,260
text to break the Integrity of this

74
00:02:55,260 --> 00:02:57,660
scheme so in this slide we talk we see

75
00:02:57,660 --> 00:02:59,940
ascon and

76
00:02:59,940 --> 00:03:01,860
for ascon we like it's a sponge

77
00:03:01,860 --> 00:03:03,599
construction so we're encrypting the

78
00:03:03,599 --> 00:03:05,760
plaintext and getting the ciphertext so

79
00:03:05,760 --> 00:03:08,400
for example we can inject a fault inside

80
00:03:08,400 --> 00:03:10,500
the state but it doesn't affect the

81
00:03:10,500 --> 00:03:13,739
ciphertext and then we can deduce what

82
00:03:13,739 --> 00:03:15,680
is the value of this ciphertext will be

83
00:03:15,680 --> 00:03:17,640
corresponding to that fold and that

84
00:03:17,640 --> 00:03:19,739
helped us break the integrity

85
00:03:19,739 --> 00:03:23,159
we can do the same attack on other types

86
00:03:23,159 --> 00:03:26,159
of AD schemes so for example on cfp we

87
00:03:26,159 --> 00:03:28,620
can also inject the fault internally in

88
00:03:28,620 --> 00:03:30,120
the plain text but it doesn't affect the

89
00:03:30,120 --> 00:03:32,640
ciphertext output and if we have control

90
00:03:32,640 --> 00:03:35,099
over this fault it can help us break the

91
00:03:35,099 --> 00:03:36,959
integrity

92
00:03:36,959 --> 00:03:39,300
there are also attacks on SIV and ink

93
00:03:39,300 --> 00:03:41,159
the Mac the SIV one will be discussed

94
00:03:41,159 --> 00:03:42,599
later in the talk when we get to the

95
00:03:42,599 --> 00:03:45,060
authenticated encryptions

96
00:03:45,060 --> 00:03:47,280
so what is leveled implementation it's a

97
00:03:47,280 --> 00:03:48,900
concept that was introduced in the

98
00:03:48,900 --> 00:03:51,599
context of site Channel protection and

99
00:03:51,599 --> 00:03:55,319
leakage resilient schemes where they

100
00:03:55,319 --> 00:03:57,900
classify the modes into two categories

101
00:03:57,900 --> 00:03:59,519
so

102
00:03:59,519 --> 00:04:03,959
on the left we have the OCB scheme which

103
00:04:03,959 --> 00:04:06,239
uses the secret key everywhere and if we

104
00:04:06,239 --> 00:04:08,040
want to protect it against leakage or in

105
00:04:08,040 --> 00:04:10,319
this case against fault we have to

106
00:04:10,319 --> 00:04:13,500
protect everything like all the block

107
00:04:13,500 --> 00:04:15,900
Cipher calls and also all the operations

108
00:04:15,900 --> 00:04:18,238
outside the block cycle while in leveled

109
00:04:18,238 --> 00:04:20,279
implementations we can have security

110
00:04:20,279 --> 00:04:22,820
proofs which only assume that certain

111
00:04:22,820 --> 00:04:24,960
elements of the scheme are heavily

112
00:04:24,960 --> 00:04:27,479
protected so for example one block

113
00:04:27,479 --> 00:04:29,639
Cipher call at the beginning and at the

114
00:04:29,639 --> 00:04:31,560
end and the rest either are not

115
00:04:31,560 --> 00:04:33,960
protected or are lightly protected

116
00:04:33,960 --> 00:04:35,520
depending on what security goals you

117
00:04:35,520 --> 00:04:38,120
want to achieve

118
00:04:38,940 --> 00:04:42,600
so this will lead to our discussion how

119
00:04:42,600 --> 00:04:44,160
this leveled implementation so to

120
00:04:44,160 --> 00:04:46,139
construct our schemes first we need to

121
00:04:46,139 --> 00:04:49,199
construct a prf that's resilient against

122
00:04:49,199 --> 00:04:52,500
faults so to think about the fault

123
00:04:52,500 --> 00:04:54,419
resilient brf we think about what

124
00:04:54,419 --> 00:04:56,280
happens when we have a prf and we inject

125
00:04:56,280 --> 00:04:59,220
faults in it so we have a non-faulty

126
00:04:59,220 --> 00:05:01,800
execution with M which I would see and

127
00:05:01,800 --> 00:05:03,540
then we have let's say a faulty

128
00:05:03,540 --> 00:05:05,520
implementation of the prf or we inject

129
00:05:05,520 --> 00:05:07,979
The Fault in it we insert the same text

130
00:05:07,979 --> 00:05:11,060
M we will get a different ciphertext C

131
00:05:11,060 --> 00:05:13,320
however due to the details of the

132
00:05:13,320 --> 00:05:17,220
implementation and how the

133
00:05:17,220 --> 00:05:19,139
fault is injected and how the scheme is

134
00:05:19,139 --> 00:05:21,360
implemented it's possible that this

135
00:05:21,360 --> 00:05:25,740
fault allows the adversary to guess the

136
00:05:25,740 --> 00:05:28,500
input that's corresponding to C Dash

137
00:05:28,500 --> 00:05:30,720
so in this case Helix one input and

138
00:05:30,720 --> 00:05:32,400
theoretically at least

139
00:05:32,400 --> 00:05:35,160
we dislike is unavoidable because we

140
00:05:35,160 --> 00:05:36,240
don't know the details of the

141
00:05:36,240 --> 00:05:38,280
implementation we don't know the details

142
00:05:38,280 --> 00:05:40,860
of the fault so it's possible that the

143
00:05:40,860 --> 00:05:42,539
attack will the attacker will be able to

144
00:05:42,539 --> 00:05:44,699
guess this value

145
00:05:44,699 --> 00:05:47,580
however we say that okay even if this

146
00:05:47,580 --> 00:05:50,160
value is unavoidable can we still get

147
00:05:50,160 --> 00:05:52,320
something like we say okay we will not

148
00:05:52,320 --> 00:05:53,880
consider this value as part of the

149
00:05:53,880 --> 00:05:55,979
challenge queries can we still get some

150
00:05:55,979 --> 00:05:57,479
security

151
00:05:57,479 --> 00:06:01,979
so we Define the security game into two

152
00:06:01,979 --> 00:06:04,080
into two phases first is a training

153
00:06:04,080 --> 00:06:05,940
phase where we give access to the real

154
00:06:05,940 --> 00:06:08,100
implementation to the adversary

155
00:06:08,100 --> 00:06:10,800
and the adversary can inject faults and

156
00:06:10,800 --> 00:06:13,440
learn about the implementation

157
00:06:13,440 --> 00:06:16,860
but the values that he guesses from this

158
00:06:16,860 --> 00:06:18,660
phase cannot be used during the

159
00:06:18,660 --> 00:06:20,160
challenge phase so in the attack phase

160
00:06:20,160 --> 00:06:21,960
or in the challenge waste he cannot

161
00:06:21,960 --> 00:06:24,539
inject faults anymore and he will be

162
00:06:24,539 --> 00:06:26,880
given access to either aerial prf or the

163
00:06:26,880 --> 00:06:29,340
same brf but without faults

164
00:06:29,340 --> 00:06:31,919
sorry are you that's the real brf in the

165
00:06:31,919 --> 00:06:35,599
other case it will be just random helps

166
00:06:35,639 --> 00:06:38,400
so this is in a bit more detail there is

167
00:06:38,400 --> 00:06:39,960
in the paper there is like the exact

168
00:06:39,960 --> 00:06:41,639
details of the model but here it's just

169
00:06:41,639 --> 00:06:44,580
a overview so in the real world we have

170
00:06:44,580 --> 00:06:47,280
in the first phase faulty implementation

171
00:06:47,280 --> 00:06:49,199
and then in the second phase we have

172
00:06:49,199 --> 00:06:52,500
real implementation with fresh inputs

173
00:06:52,500 --> 00:06:54,479
in the ideal world do we have the faulty

174
00:06:54,479 --> 00:06:57,479
implementation but this Oracle will

175
00:06:57,479 --> 00:07:00,180
terminate if the prf implementation

176
00:07:00,180 --> 00:07:02,940
leaks more than one point so if the

177
00:07:02,940 --> 00:07:05,280
adversary leaks more than one M Dash

178
00:07:05,280 --> 00:07:07,319
corresponding to C Dash

179
00:07:07,319 --> 00:07:09,780
then this will terminate

180
00:07:09,780 --> 00:07:11,759
and in there

181
00:07:11,759 --> 00:07:13,860
second phase it will be just a random

182
00:07:13,860 --> 00:07:15,780
input a random function and the inputs

183
00:07:15,780 --> 00:07:18,380
cannot be repeated

184
00:07:20,520 --> 00:07:23,099
so to implement the faulty Oracle we

185
00:07:23,099 --> 00:07:25,680
assume that we have the full tbrf the

186
00:07:25,680 --> 00:07:28,139
implementation description and we have a

187
00:07:28,139 --> 00:07:29,699
fault specification based on the

188
00:07:29,699 --> 00:07:31,800
implementation details and the Computing

189
00:07:31,800 --> 00:07:33,840
platform we can specify the fault model

190
00:07:33,840 --> 00:07:36,360
also more details about this is in the

191
00:07:36,360 --> 00:07:39,000
paper and then it will return either

192
00:07:39,000 --> 00:07:41,520
like C Dash and if possible we'll return

193
00:07:41,520 --> 00:07:44,220
M Dash and in the ideal World it will

194
00:07:44,220 --> 00:07:46,440
terminate if the M Dash is more than one

195
00:07:46,440 --> 00:07:48,680
value

196
00:07:51,300 --> 00:07:54,120
so we can build this construction using

197
00:07:54,120 --> 00:07:56,099
like a protected to equal block Cipher

198
00:07:56,099 --> 00:07:58,740
against fault attacks and while it's not

199
00:07:58,740 --> 00:08:01,620
exactly key recovery in practice it

200
00:08:01,620 --> 00:08:03,120
should be close to key recovery like if

201
00:08:03,120 --> 00:08:04,560
you protect your scheme against key

202
00:08:04,560 --> 00:08:07,259
recovery against faults then it should

203
00:08:07,259 --> 00:08:09,780
satisfy this we also think it might be

204
00:08:09,780 --> 00:08:11,280
possible to show that the isap

205
00:08:11,280 --> 00:08:14,400
finalization is also an frprf

206
00:08:14,400 --> 00:08:15,720
and

207
00:08:15,720 --> 00:08:18,240
see we don't know how like if if leaking

208
00:08:18,240 --> 00:08:20,340
this m Dash is easy or not in practice

209
00:08:20,340 --> 00:08:21,780
but

210
00:08:21,780 --> 00:08:24,479
we we consider it unavoidable

211
00:08:24,479 --> 00:08:26,160
theoretically because we don't know all

212
00:08:26,160 --> 00:08:29,160
the implementation details

213
00:08:29,160 --> 00:08:32,760
so once we have constructed this frprf

214
00:08:32,760 --> 00:08:36,360
we have the FR Mac Construction

215
00:08:36,360 --> 00:08:38,039
which is essentially the same security

216
00:08:38,039 --> 00:08:41,940
but for arbitrary lens message messages

217
00:08:41,940 --> 00:08:45,540
and in this case we have a hash function

218
00:08:45,540 --> 00:08:47,940
and we have a the brf that we

219
00:08:47,940 --> 00:08:50,279
constructed before but we also have a

220
00:08:50,279 --> 00:08:52,019
random salt and this random salt is

221
00:08:52,019 --> 00:08:54,720
critical for default attack also

222
00:08:54,720 --> 00:08:58,019
so we had we bet the random salt

223
00:08:58,019 --> 00:09:00,660
and we give it to the hash function and

224
00:09:00,660 --> 00:09:02,760
we output here and the decrypt the

225
00:09:02,760 --> 00:09:04,620
verification is simple we just do this

226
00:09:04,620 --> 00:09:06,959
and compare the tag at the end

227
00:09:06,959 --> 00:09:09,360
and the security is the same as the

228
00:09:09,360 --> 00:09:11,820
frbrprf but including the

229
00:09:11,820 --> 00:09:14,339
verification

230
00:09:14,339 --> 00:09:16,980
and we assume that there is no Collision

231
00:09:16,980 --> 00:09:18,899
so there's no Collision on the random

232
00:09:18,899 --> 00:09:21,240
salt or on the output of the hash so

233
00:09:21,240 --> 00:09:22,640
these two

234
00:09:22,640 --> 00:09:25,019
values if there is a collision on them

235
00:09:25,019 --> 00:09:27,540
that will be included in the pound and

236
00:09:27,540 --> 00:09:29,760
also that in the training phase only

237
00:09:29,760 --> 00:09:32,399
trivial pre-images so trivial pre images

238
00:09:32,399 --> 00:09:33,839
is like if the hash function is

239
00:09:33,839 --> 00:09:36,180
implemented and let's say it's like a

240
00:09:36,180 --> 00:09:37,740
round based function so it's like it's

241
00:09:37,740 --> 00:09:40,200
SPN or something and then you inject a

242
00:09:40,200 --> 00:09:42,480
fault in the first round you will be

243
00:09:42,480 --> 00:09:45,480
able to to say this fault corresponding

244
00:09:45,480 --> 00:09:48,060
to a certain plain text and this is what

245
00:09:48,060 --> 00:09:49,800
we consider trivial but from the model

246
00:09:49,800 --> 00:09:52,019
we say that you can only get one

247
00:09:52,019 --> 00:09:54,180
pre-image per 40 query you cannot get

248
00:09:54,180 --> 00:09:56,660
more than that

249
00:09:58,740 --> 00:10:01,860
so now how to use this inside an AED

250
00:10:01,860 --> 00:10:04,860
so first the AED game is the Fault

251
00:10:04,860 --> 00:10:07,200
resilient AED game is similar to the prf

252
00:10:07,200 --> 00:10:09,720
but again we have like the Privacy and

253
00:10:09,720 --> 00:10:11,519
the decryption into account and this

254
00:10:11,519 --> 00:10:13,260
game is a variation of already the game

255
00:10:13,260 --> 00:10:16,140
that was proposed in the by fishing and

256
00:10:16,140 --> 00:10:19,640
cancer in 2022 in ctrc

257
00:10:19,640 --> 00:10:22,620
so they proposed a scheme called SIV

258
00:10:22,620 --> 00:10:25,320
random which is similar to SIV so you

259
00:10:25,320 --> 00:10:27,899
generate two keys and then you take the

260
00:10:27,899 --> 00:10:31,019
message with a random salt do a prf so

261
00:10:31,019 --> 00:10:33,959
this looks similar to our FR Mac

262
00:10:33,959 --> 00:10:38,040
and then you do a ncba encryption but

263
00:10:38,040 --> 00:10:40,560
you also encrypt the random salt

264
00:10:40,560 --> 00:10:42,300
and during decryption it's just the

265
00:10:42,300 --> 00:10:43,860
opposite and you check the IV at the end

266
00:10:43,860 --> 00:10:45,899
whether it's equal or not and in the

267
00:10:45,899 --> 00:10:47,579
paper they claim that this would achieve

268
00:10:47,579 --> 00:10:51,140
false resilient AED

269
00:10:53,279 --> 00:10:56,940
however we can do an attack on sav-like

270
00:10:56,940 --> 00:10:58,800
schemes especially if the schemes are

271
00:10:58,800 --> 00:11:01,920
not secure against CCA attacks

272
00:11:01,920 --> 00:11:04,860
so basically we take so this is an

273
00:11:04,860 --> 00:11:07,680
example of a siv-like scheme where the

274
00:11:07,680 --> 00:11:09,540
encryption is stream Cipher based or key

275
00:11:09,540 --> 00:11:10,860
stream based

276
00:11:10,860 --> 00:11:14,040
so we take the MAC at the beginning but

277
00:11:14,040 --> 00:11:15,839
during the Mac operation we can inject

278
00:11:15,839 --> 00:11:19,380
the fault so we convert M to M Dash

279
00:11:19,380 --> 00:11:21,060
but this will not affect the message

280
00:11:21,060 --> 00:11:22,800
when we encrypt it

281
00:11:22,800 --> 00:11:25,140
so we will get a message encrypted with

282
00:11:25,140 --> 00:11:29,040
IV that's corresponding to M Dash but it

283
00:11:29,040 --> 00:11:31,320
encrypts m but because the encryption is

284
00:11:31,320 --> 00:11:33,959
linear we can change the message to be

285
00:11:33,959 --> 00:11:37,019
an encryption of M Dash and when we try

286
00:11:37,019 --> 00:11:38,459
to verify that it will pass the

287
00:11:38,459 --> 00:11:40,740
verification and it will not be detected

288
00:11:40,740 --> 00:11:43,200
as a in the game as a trivial Cipher

289
00:11:43,200 --> 00:11:44,760
text because

290
00:11:44,760 --> 00:11:47,100
when that when we check here it was

291
00:11:47,100 --> 00:11:48,959
never outputted by the encryption Oracle

292
00:11:48,959 --> 00:11:51,000
either in a faulty query or an unfaulty

293
00:11:51,000 --> 00:11:53,240
query

294
00:11:55,440 --> 00:11:57,660
so the solution to this is we start from

295
00:11:57,660 --> 00:11:59,339
their construction and say okay we can

296
00:11:59,339 --> 00:12:01,920
do magazine encrypt like they do but

297
00:12:01,920 --> 00:12:05,300
then we do another Mech at the end

298
00:12:06,480 --> 00:12:10,019
so this is the Full Construction

299
00:12:10,019 --> 00:12:12,420
and so we have one Mac here and then the

300
00:12:12,420 --> 00:12:14,700
encryption and then another Mac at the

301
00:12:14,700 --> 00:12:16,740
end which takes into account the first

302
00:12:16,740 --> 00:12:21,480
IV or First tag and the ciphertext

303
00:12:21,480 --> 00:12:23,399
and we chose these Primitives because

304
00:12:23,399 --> 00:12:26,279
also they have nice leakage resilient

305
00:12:26,279 --> 00:12:28,380
properties so we expect them also to be

306
00:12:28,380 --> 00:12:30,480
secure against side Channel however for

307
00:12:30,480 --> 00:12:32,399
the combined security where you have

308
00:12:32,399 --> 00:12:34,260
fault and leakage at the same time

309
00:12:34,260 --> 00:12:37,579
that's we haven't studied yet

310
00:12:40,920 --> 00:12:43,079
so for the security Arguments for this

311
00:12:43,079 --> 00:12:45,660
scheme we assume that we have no

312
00:12:45,660 --> 00:12:48,959
Collision on the Randomness the random

313
00:12:48,959 --> 00:12:49,800
salt

314
00:12:49,800 --> 00:12:51,839
and we have no Collision on the output

315
00:12:51,839 --> 00:12:53,399
of the first Mech

316
00:12:53,399 --> 00:12:55,320
again if these collisions exist they are

317
00:12:55,320 --> 00:12:57,600
captured in the pound in the paper

318
00:12:57,600 --> 00:13:00,180
and if that happens then the security

319
00:13:00,180 --> 00:13:03,060
reduces to The Fault resilience of these

320
00:13:03,060 --> 00:13:05,959
three layers

321
00:13:08,459 --> 00:13:12,180
so first I will sum up like it's we say

322
00:13:12,180 --> 00:13:14,100
we in the paper we conclude that it's

323
00:13:14,100 --> 00:13:15,420
possible to protect against certain

324
00:13:15,420 --> 00:13:17,160
classes of fault attacks using these

325
00:13:17,160 --> 00:13:18,720
level implementations

326
00:13:18,720 --> 00:13:21,779
but also that random salt is critical

327
00:13:21,779 --> 00:13:23,459
for differential faults we cannot

328
00:13:23,459 --> 00:13:25,459
protect against it and I think

329
00:13:25,459 --> 00:13:28,200
in the next paper they also use random

330
00:13:28,200 --> 00:13:30,060
salts in one of the in one of their

331
00:13:30,060 --> 00:13:32,279
constructions

332
00:13:32,279 --> 00:13:33,779
and

333
00:13:33,779 --> 00:13:36,660
it's also possible to prevent single

334
00:13:36,660 --> 00:13:38,880
differential fault attacks with less

335
00:13:38,880 --> 00:13:40,620
cost than dummy duplication dummy

336
00:13:40,620 --> 00:13:42,540
duplication means you have two AE

337
00:13:42,540 --> 00:13:44,760
schemes two black box a schemes or the

338
00:13:44,760 --> 00:13:47,459
same a scheme twice and you're just

339
00:13:47,459 --> 00:13:49,500
implementing it twice and comparing the

340
00:13:49,500 --> 00:13:51,839
results here we only have one kind of

341
00:13:51,839 --> 00:13:55,339
one a scheme plus one Mac

342
00:13:56,279 --> 00:14:00,779
so what's the state so far so we have an

343
00:14:00,779 --> 00:14:03,180
open problem that we assume certain

344
00:14:03,180 --> 00:14:04,860
properties about the hash function so

345
00:14:04,860 --> 00:14:06,959
verification of these properties even

346
00:14:06,959 --> 00:14:09,300
though like it sounds easy but we it's

347
00:14:09,300 --> 00:14:11,399
not in this paper yet

348
00:14:11,399 --> 00:14:14,279
uh we also want to show that security

349
00:14:14,279 --> 00:14:16,920
against combined attacks when we have

350
00:14:16,920 --> 00:14:19,980
both fault and leakage at the same time

351
00:14:19,980 --> 00:14:22,800
and com protecting against multiple

352
00:14:22,800 --> 00:14:24,180
faults I should say here multiple

353
00:14:24,180 --> 00:14:28,019
differential faults because the brf or

354
00:14:28,019 --> 00:14:30,000
the encryption the currently they can

355
00:14:30,000 --> 00:14:31,980
protect against manifolds but for these

356
00:14:31,980 --> 00:14:34,620
Integrity attacks where we decouple the

357
00:14:34,620 --> 00:14:36,600
Mac from the encryption

358
00:14:36,600 --> 00:14:38,399
this scheme will protect against one

359
00:14:38,399 --> 00:14:40,680
fault because it has a redundancy of one

360
00:14:40,680 --> 00:14:42,839
but if we want to protect against more

361
00:14:42,839 --> 00:14:45,779
faults we'd have to have more redundancy

362
00:14:45,779 --> 00:14:48,300
and as I said there was this parallel

363
00:14:48,300 --> 00:14:51,000
work that did work on Leo Max and they

364
00:14:51,000 --> 00:14:52,620
have schemes to protect against more

365
00:14:52,620 --> 00:14:54,480
than one fault but to protect against

366
00:14:54,480 --> 00:14:57,240
twofolds they have two Mac invocations

367
00:14:57,240 --> 00:14:59,639
so is there a possibility to do it

368
00:14:59,639 --> 00:15:01,620
cheaper than that maybe maybe not and

369
00:15:01,620 --> 00:15:03,839
the last thing we we are looking at as a

370
00:15:03,839 --> 00:15:06,720
future work is looking at certain fault

371
00:15:06,720 --> 00:15:08,519
counter measures and how they relate to

372
00:15:08,519 --> 00:15:10,920
our assumption so the most obvious one

373
00:15:10,920 --> 00:15:13,440
would be icaps prf does it satisfy this

374
00:15:13,440 --> 00:15:14,579
assumption or not something we're

375
00:15:14,579 --> 00:15:15,540
looking at

376
00:15:15,540 --> 00:15:18,079
thanks

377
00:15:23,100 --> 00:15:27,180
thank you so move to the question uh is

378
00:15:27,180 --> 00:15:31,579
there any question from Beijing

379
00:15:43,560 --> 00:15:45,000
I think

380
00:15:45,000 --> 00:15:49,579
or any other question from Kobe

381
00:15:53,459 --> 00:15:55,560
hello so thanks for your presentation um

382
00:15:55,560 --> 00:15:57,420
I had one small question all right well

383
00:15:57,420 --> 00:15:59,279
two actually so we've got the learning

384
00:15:59,279 --> 00:16:01,500
phase and the challenge phase they can

385
00:16:01,500 --> 00:16:03,240
be interleaved right or is it really

386
00:16:03,240 --> 00:16:05,360
like sequential

387
00:16:05,360 --> 00:16:09,000
uh so far for these schemes they cannot

388
00:16:09,000 --> 00:16:10,860
be interleaved I think so you first have

389
00:16:10,860 --> 00:16:12,660
a learning phase and then the challenge

390
00:16:12,660 --> 00:16:14,220
phase okay it doesn't make sense or is

391
00:16:14,220 --> 00:16:15,899
it possible to to

392
00:16:15,899 --> 00:16:17,940
I think it makes sense in certain

393
00:16:17,940 --> 00:16:19,199
applications where you have the

394
00:16:19,199 --> 00:16:21,360
adversary has the device and can inject

395
00:16:21,360 --> 00:16:23,459
faults but you you're concerned about

396
00:16:23,459 --> 00:16:25,740
the security after that yes of course

397
00:16:25,740 --> 00:16:26,940
yes yes

398
00:16:26,940 --> 00:16:30,540
um so isap's prf this is a very keying

399
00:16:30,540 --> 00:16:33,420
function in the ASAP the Reiki ah okay

400
00:16:33,420 --> 00:16:36,660
so the wreaking function in the suffix

401
00:16:36,660 --> 00:16:38,759
Goods okay yes yes

402
00:16:38,759 --> 00:16:41,399
okay thank you um yeah I have no other

403
00:16:41,399 --> 00:16:43,699
questions

404
00:16:45,959 --> 00:16:47,699
okay

405
00:16:47,699 --> 00:16:51,019
is there any other questions

406
00:16:51,720 --> 00:16:56,120
and I have one small question also so

407
00:16:56,120 --> 00:17:00,180
you in your mem constructions yeah

408
00:17:00,180 --> 00:17:02,699
it seems that Dana you have review the

409
00:17:02,699 --> 00:17:05,040
other uh yeah okay that's right so you

410
00:17:05,040 --> 00:17:09,839
have uh t0 here is a code with a random

411
00:17:09,839 --> 00:17:13,439
uh I don't see what the intention here

412
00:17:13,439 --> 00:17:15,780
yeah so could you explain something you

413
00:17:15,780 --> 00:17:17,579
need to hide r

414
00:17:17,579 --> 00:17:21,419
yeah because if if R is controlled

415
00:17:21,419 --> 00:17:23,280
during the encryption during the

416
00:17:23,280 --> 00:17:25,319
decryption it could lead to problems so

417
00:17:25,319 --> 00:17:27,119
in the Mac there is an assumption that R

418
00:17:27,119 --> 00:17:29,960
is community communicated securely

419
00:17:29,960 --> 00:17:34,220
means that it is not uh

420
00:17:34,220 --> 00:17:37,020
transport in Korea not

421
00:17:37,020 --> 00:17:40,140
it's it's communicated something out of

422
00:17:40,140 --> 00:17:41,360
band right

423
00:17:41,360 --> 00:17:45,360
here we do it through the encryption

424
00:17:45,360 --> 00:17:47,340
is

425
00:17:47,340 --> 00:17:50,280
so R is not

426
00:17:50,280 --> 00:17:52,740
are present in Korea has always

427
00:17:52,740 --> 00:17:54,240
encrypted

428
00:17:54,240 --> 00:17:59,100
but how do you compute H1 uh sorry uh

429
00:17:59,100 --> 00:18:00,600
yeah

430
00:18:00,600 --> 00:18:03,780
always are yeah so the output is so so

431
00:18:03,780 --> 00:18:06,840
the text size now is like three and

432
00:18:06,840 --> 00:18:09,240
where n is the ciphertext block size

433
00:18:09,240 --> 00:18:12,240
yeah so the attack size will be T1 c0

434
00:18:12,240 --> 00:18:16,440
sorry the tag will be T1 c0 C2

435
00:18:16,440 --> 00:18:18,960
so you will start the decryption from to

436
00:18:18,960 --> 00:18:21,960
you like this you verify T2 and then you

437
00:18:21,960 --> 00:18:23,820
decrypt this and you get r

438
00:18:23,820 --> 00:18:27,179
and then you do the last map

439
00:18:27,179 --> 00:18:28,679
uh

440
00:18:28,679 --> 00:18:31,799
all right ah yeah I see ah okay

441
00:18:31,799 --> 00:18:34,039
okay

442
00:18:34,080 --> 00:18:37,200
and so sorry and I'm yeah very smooth

443
00:18:37,200 --> 00:18:38,179
questions

444
00:18:38,179 --> 00:18:40,440
how do you consider the possibility to

445
00:18:40,440 --> 00:18:43,260
inserting the port into the London

446
00:18:43,260 --> 00:18:44,760
generator itself

447
00:18:44,760 --> 00:18:47,039
like in the protected element

448
00:18:47,039 --> 00:18:51,179
r i mean r a differential fault yes so

449
00:18:51,179 --> 00:18:53,640
that's why R has to be secret okay thank

450
00:18:53,640 --> 00:18:55,559
you because differential fault if it's

451
00:18:55,559 --> 00:18:57,900
secret will still be random yeah

452
00:18:57,900 --> 00:19:00,120
thank you

453
00:19:00,120 --> 00:19:01,760
so

454
00:19:01,760 --> 00:19:04,500
any other questions

455
00:19:04,500 --> 00:19:05,940
from

456
00:19:05,940 --> 00:19:07,380
Beijing

457
00:19:07,380 --> 00:19:09,950
or online

458
00:19:09,950 --> 00:19:13,039
[Music]

459
00:19:22,880 --> 00:19:26,179
speak again

460
00:19:33,440 --> 00:19:38,120
so the next talk

461
00:19:38,480 --> 00:19:41,179
entitled as a secure message

462
00:19:41,179 --> 00:19:43,620
authentication in the present Soul

463
00:19:43,620 --> 00:19:46,879
leakage and the faults

464
00:19:52,160 --> 00:19:56,340
and the speaker is here being Shin so

465
00:19:56,340 --> 00:19:59,760
you have been could produce that

466
00:19:59,760 --> 00:20:02,100
and you are ready

467
00:20:02,100 --> 00:20:05,280
uh yes can you see my screen

468
00:20:05,280 --> 00:20:08,520
yes we see the screen thanks for the

469
00:20:08,520 --> 00:20:11,100
introduction and today I'm going to talk

470
00:20:11,100 --> 00:20:13,679
about uh secure mystery authentication

471
00:20:13,679 --> 00:20:15,480
in the presence of both the kitchen and

472
00:20:15,480 --> 00:20:17,340
both and this is the Jung voice

473
00:20:17,340 --> 00:20:21,360
Francisco Chun Toma and from here

474
00:20:21,360 --> 00:20:25,440
all right so the top will be a cases the

475
00:20:25,440 --> 00:20:26,760
first will be the multiplication and

476
00:20:26,760 --> 00:20:29,039
then the contribution I finally I will

477
00:20:29,039 --> 00:20:31,559
conclude our top

478
00:20:31,559 --> 00:20:34,440
uh so message authentication core is a

479
00:20:34,440 --> 00:20:36,600
symmetrically limited to ensure data

480
00:20:36,600 --> 00:20:37,919
integrity

481
00:20:37,919 --> 00:20:42,240
uh the sender will uh authenticate the

482
00:20:42,240 --> 00:20:43,860
mainstream by using the Touch Generation

483
00:20:43,860 --> 00:20:46,740
algorithm and let's send the message and

484
00:20:46,740 --> 00:20:49,799
talk to the receiver receiver can verify

485
00:20:49,799 --> 00:20:51,120
the message by using the verification

486
00:20:51,120 --> 00:20:54,720
algorithm and you output well with uh

487
00:20:54,720 --> 00:20:58,020
establishment or not and typically the

488
00:20:58,020 --> 00:20:59,940
message Nicole are designed in a black

489
00:20:59,940 --> 00:21:03,179
box way uh that means the attacker only

490
00:21:03,179 --> 00:21:05,220
knows the algorithm and can only see the

491
00:21:05,220 --> 00:21:07,679
inputs and output while the key and the

492
00:21:07,679 --> 00:21:10,559
internal values are secret

493
00:21:10,559 --> 00:21:13,340
uh

494
00:21:18,299 --> 00:21:20,640
so in pretty cool in physical

495
00:21:20,640 --> 00:21:23,400
implementation the obviously usually can

496
00:21:23,400 --> 00:21:25,260
learn more information by using the

497
00:21:25,260 --> 00:21:27,660
sectional attack like the time or the

498
00:21:27,660 --> 00:21:30,000
power consumption to obtain maybe some

499
00:21:30,000 --> 00:21:31,799
information on the key also the same

500
00:21:31,799 --> 00:21:35,100
information of the internal values

501
00:21:35,100 --> 00:21:37,559
uh even what even was the adversary can

502
00:21:37,559 --> 00:21:40,080
be active he can inject force and maybe

503
00:21:40,080 --> 00:21:42,480
by using the laser of the or like it

504
00:21:42,480 --> 00:21:45,240
actually make glass so the the video key

505
00:21:45,240 --> 00:21:47,039
may be influenced and in the internal

506
00:21:47,039 --> 00:21:49,260
value may be influenced

507
00:21:49,260 --> 00:21:52,440
and there somebody can also uh model the

508
00:21:52,440 --> 00:21:54,120
combine attack like by using a side

509
00:21:54,120 --> 00:21:56,400
Channel and for the tag so in this case

510
00:21:56,400 --> 00:21:58,740
it means the key and the intervalue then

511
00:21:58,740 --> 00:22:01,200
both can be both uh influenced and

512
00:22:01,200 --> 00:22:03,419
leaked

513
00:22:03,419 --> 00:22:07,440
so how to protect uh how to protect the

514
00:22:07,440 --> 00:22:10,080
security or map against the leakage and

515
00:22:10,080 --> 00:22:13,740
force I will give a example a touchdown

516
00:22:13,740 --> 00:22:15,780
PF is a very popular way to design a

517
00:22:15,780 --> 00:22:18,960
mark so uh e consists of part the first

518
00:22:18,960 --> 00:22:20,220
part is the heart function you will

519
00:22:20,220 --> 00:22:22,440
Flash The Message to a fixed lens string

520
00:22:22,440 --> 00:22:24,900
then use a pif to enquiry string to

521
00:22:24,900 --> 00:22:27,539
produce attack so usually the protection

522
00:22:27,539 --> 00:22:29,580
against the section attack and force

523
00:22:29,580 --> 00:22:31,260
will be using maybe masking or

524
00:22:31,260 --> 00:22:34,080
redundancy computation so in this case

525
00:22:34,080 --> 00:22:36,780
it will introduce a very significant

526
00:22:36,780 --> 00:22:39,000
performance of a heads

527
00:22:39,000 --> 00:22:41,640
so how to improve the performance a

528
00:22:41,640 --> 00:22:44,640
clever idea is to use the uh level

529
00:22:44,640 --> 00:22:47,039
impatilation you can avoid equally

530
00:22:47,039 --> 00:22:48,539
protecting or powerful implementation

531
00:22:48,539 --> 00:22:51,000
but we need to identify the protectant

532
00:22:51,000 --> 00:22:53,280
protection level of each part so then we

533
00:22:53,280 --> 00:22:55,020
can obtain the performance against in

534
00:22:55,020 --> 00:22:56,460
the physical implication

535
00:22:56,460 --> 00:23:00,360
a typical example is one is proposed in

536
00:23:00,360 --> 00:23:02,100
the action crept 2021

537
00:23:02,100 --> 00:23:05,880
uh so this picture is uh the skin so the

538
00:23:05,880 --> 00:23:07,980
given the message you use the hash

539
00:23:07,980 --> 00:23:10,500
function and then use the TBC to encrypt

540
00:23:10,500 --> 00:23:14,780
the harsh value and produce attack

541
00:23:14,780 --> 00:23:17,820
we do not need any production regarding

542
00:23:17,820 --> 00:23:19,919
the heart function and we will need to a

543
00:23:19,919 --> 00:23:23,100
DPA protect TBC that's the last core of

544
00:23:23,100 --> 00:23:26,340
the skin and it can lead to substance

545
00:23:26,340 --> 00:23:29,700
substantial performance but uh their

546
00:23:29,700 --> 00:23:32,460
skin only consider allocation so can we

547
00:23:32,460 --> 00:23:34,260
use the simile idea for the combined

548
00:23:34,260 --> 00:23:37,679
attack to include the attack so in this

549
00:23:37,679 --> 00:23:40,559
paper we initial more label study or

550
00:23:40,559 --> 00:23:42,299
marks against the sectional and further

551
00:23:42,299 --> 00:23:45,120
Tech in the level implementation

552
00:23:45,120 --> 00:23:48,659
uh so now I will give overview of a

553
00:23:48,659 --> 00:23:50,159
contribution

554
00:23:50,159 --> 00:23:52,260
so we first proposed the model to

555
00:23:52,260 --> 00:23:55,020
capture both the leakage and force uh we

556
00:23:55,020 --> 00:23:57,000
also make some assumptions some Atomic

557
00:23:57,000 --> 00:23:58,559
components that are out of control

558
00:23:58,559 --> 00:24:01,080
adversary this assumption is naturally

559
00:24:01,080 --> 00:24:03,960
because if others really can obtain any

560
00:24:03,960 --> 00:24:06,120
information or can influence any

561
00:24:06,120 --> 00:24:07,980
internal video then there's no security

562
00:24:07,980 --> 00:24:10,860
at all then by using this model we show

563
00:24:10,860 --> 00:24:13,980
that the LR Mark 1 is insecure if only

564
00:24:13,980 --> 00:24:16,320
the verification is for kids

565
00:24:16,320 --> 00:24:19,919
we also proposed to a new uh Mark

566
00:24:19,919 --> 00:24:23,100
algorithm the first the first algorithm

567
00:24:23,100 --> 00:24:26,700
is called Lor MCD is uh is similar to

568
00:24:26,700 --> 00:24:29,580
the by iterating the LR mark one twice

569
00:24:29,580 --> 00:24:32,039
but it can reduce more than one-fourth

570
00:24:32,039 --> 00:24:36,020
and is secure for both the

571
00:24:36,679 --> 00:24:39,120
and impose the verification and

572
00:24:39,120 --> 00:24:41,700
generation we also propose another

573
00:24:41,700 --> 00:24:44,240
algorithm called Lor Max

574
00:24:44,240 --> 00:24:47,640
use the additional Readiness it can also

575
00:24:47,640 --> 00:24:50,280
uh reduce the fourth impulse the

576
00:24:50,280 --> 00:24:52,200
verification and also the mark

577
00:24:52,200 --> 00:24:54,679
generation

578
00:24:54,780 --> 00:24:57,419
so let's go into detail how we model the

579
00:24:57,419 --> 00:25:00,179
force so given the cryptography

580
00:25:00,179 --> 00:25:03,360
algorithm y equals to uh

581
00:25:03,360 --> 00:25:07,799
algorithm KX with implementation from F1

582
00:25:07,799 --> 00:25:10,860
to FM so usually uh algorithm usually

583
00:25:10,860 --> 00:25:13,380
consists of several signal function so

584
00:25:13,380 --> 00:25:15,179
the laptop can be seen at the

585
00:25:15,179 --> 00:25:17,340
implementation of this algorithm and we

586
00:25:17,340 --> 00:25:20,640
can transfer to dependency Matrix

587
00:25:20,640 --> 00:25:25,279
so the left part is the uh M uh function

588
00:25:25,279 --> 00:25:27,720
and the right part is the dependency

589
00:25:27,720 --> 00:25:31,919
Matrix so the first row is the the first

590
00:25:31,919 --> 00:25:33,539
rule of the definition Matrix is the

591
00:25:33,539 --> 00:25:35,820
input of the first function and

592
00:25:35,820 --> 00:25:38,279
similarly the second law of geometry is

593
00:25:38,279 --> 00:25:40,740
the input of the second function

594
00:25:40,740 --> 00:25:43,260
and we can look at the and here like if

595
00:25:43,260 --> 00:25:45,659
from the different means there's no

596
00:25:45,659 --> 00:25:49,799
input at this item we can see example uh

597
00:25:49,799 --> 00:25:52,860
that's more example so for a crypto

598
00:25:52,860 --> 00:25:54,779
query algorithm uh consists of

599
00:25:54,779 --> 00:25:59,279
implementation F1 f2l3 and with input X1

600
00:25:59,279 --> 00:26:00,419
X2

601
00:26:00,419 --> 00:26:04,020
here the dependency Matrix is uh

602
00:26:04,020 --> 00:26:06,779
the right path so the first rule is only

603
00:26:06,779 --> 00:26:09,720
X1 so it means only the first function

604
00:26:09,720 --> 00:26:12,360
only takes the X1 as input and the

605
00:26:12,360 --> 00:26:15,059
second second rule is only X2 so it

606
00:26:15,059 --> 00:26:19,159
means F2 will only text X2 as input

607
00:26:19,159 --> 00:26:23,159
is the X1 y1 Y is blue so the third

608
00:26:23,159 --> 00:26:26,400
function will take the X1 y1 Y2 X input

609
00:26:26,400 --> 00:26:29,220
and here the YY is the output of the

610
00:26:29,220 --> 00:26:31,860
first function and Y2 will be the output

611
00:26:31,860 --> 00:26:34,380
of the second function

612
00:26:34,380 --> 00:26:37,559
so by using the dependence Matrix we can

613
00:26:37,559 --> 00:26:40,140
capture the internal competition of

614
00:26:40,140 --> 00:26:42,900
algorithms

615
00:26:42,900 --> 00:26:45,179
so learn how to capture the fourth

616
00:26:45,179 --> 00:26:49,200
letter injected uh into the algorithm

617
00:26:49,200 --> 00:26:51,000
so the left part is the dependency

618
00:26:51,000 --> 00:26:54,299
Matrix in the previous example if the

619
00:26:54,299 --> 00:26:56,640
other three inject Force then we can

620
00:26:56,640 --> 00:26:59,760
capture by using the right part the 40

621
00:26:59,760 --> 00:27:00,900
Matrix

622
00:27:00,900 --> 00:27:04,620
solar Republic tricks here that X1 prime

623
00:27:04,620 --> 00:27:08,279
it means the XY is 42b the X1 Prime

624
00:27:08,279 --> 00:27:13,200
and in the last row here is the new uh

625
00:27:13,200 --> 00:27:16,500
Radio 1 prime it means the y1 is 42 beta

626
00:27:16,500 --> 00:27:17,580
y1 Prime

627
00:27:17,580 --> 00:27:21,299
and also the second rule the X2 we use

628
00:27:21,299 --> 00:27:23,400
the dot in this position means uh

629
00:27:23,400 --> 00:27:27,539
there's no fourth in this value and also

630
00:27:27,539 --> 00:27:29,880
the the third rule the first element in

631
00:27:29,880 --> 00:27:31,740
the third row we also use the door to

632
00:27:31,740 --> 00:27:34,679
mean this value is known for and we also

633
00:27:34,679 --> 00:27:37,860
use another simple in the third row is

634
00:27:37,860 --> 00:27:41,159
the board symbol2 means layers this

635
00:27:41,159 --> 00:27:44,580
value should be protected against Force

636
00:27:44,580 --> 00:27:47,580
uh so in this in this paper we consider

637
00:27:47,580 --> 00:27:49,980
two forks the first one is stuck at

638
00:27:49,980 --> 00:27:51,900
first it means the adversary can replace

639
00:27:51,900 --> 00:27:54,600
the base of the income value by any

640
00:27:54,600 --> 00:27:58,500
value uh she chosen we also consider the

641
00:27:58,500 --> 00:28:00,179
differential force that means the

642
00:28:00,179 --> 00:28:02,580
diversary can explore the differential

643
00:28:02,580 --> 00:28:05,840
to the internal value

644
00:28:07,200 --> 00:28:09,659
so at this stage we we already capture

645
00:28:09,659 --> 00:28:12,480
the first and how to modeling leakage

646
00:28:12,480 --> 00:28:14,880
similarly for cryptographic algorithm uh

647
00:28:14,880 --> 00:28:19,140
with implementation from F1 to FF we

648
00:28:19,140 --> 00:28:22,080
associate a rich function Loi for each

649
00:28:22,080 --> 00:28:26,580
uh function so that uh the leakage

650
00:28:26,580 --> 00:28:30,480
function will be a vector from L1 to llm

651
00:28:30,480 --> 00:28:34,980
and we write uh hello algorithm KX for a

652
00:28:34,980 --> 00:28:36,720
leakier reason which is almost

653
00:28:36,720 --> 00:28:38,940
equivalent to the original algorithm

654
00:28:38,940 --> 00:28:41,940
plus the output of the leakage

655
00:28:41,940 --> 00:28:44,580
uh so naturally we can Define the full

656
00:28:44,580 --> 00:28:47,539
tdq algorithm uh as the allo algorithm

657
00:28:47,539 --> 00:28:51,900
kxa and here J will be the the fourth

658
00:28:51,900 --> 00:28:55,620
leg injector to release algorithm so

659
00:28:55,620 --> 00:28:59,600
here is the example

660
00:28:59,600 --> 00:29:04,320
is if the 40 metric is uh in the right

661
00:29:04,320 --> 00:29:07,919
path uh as the same previous example so

662
00:29:07,919 --> 00:29:10,919
another story has injected for X1 price

663
00:29:10,919 --> 00:29:13,020
and also the one price so we can use

664
00:29:13,020 --> 00:29:15,480
these Vector Z to capture this for the

665
00:29:15,480 --> 00:29:19,799
Tuple so let the uh 40 degrees algorithm

666
00:29:19,799 --> 00:29:20,820
will

667
00:29:20,820 --> 00:29:23,580
let's say here is just the X1 Prime and

668
00:29:23,580 --> 00:29:25,380
one prime

669
00:29:25,380 --> 00:29:28,020
uh we also uh make some assumption in

670
00:29:28,020 --> 00:29:30,840
our paper uh we assume the key is for

671
00:29:30,840 --> 00:29:33,899
immune it means we do not consider a

672
00:29:33,899 --> 00:29:37,140
really key attack in our in our model we

673
00:29:37,140 --> 00:29:40,200
also assume that the function of Y is

674
00:29:40,200 --> 00:29:42,360
regarded as the atomic component

675
00:29:42,360 --> 00:29:45,120
so we do not consider the fourth inside

676
00:29:45,120 --> 00:29:47,460
the this small function

677
00:29:47,460 --> 00:29:49,620
we also consider the fourth standard

678
00:29:49,620 --> 00:29:51,059
model

679
00:29:51,059 --> 00:29:53,880
uh we also this uh consider the ambang

680
00:29:53,880 --> 00:29:55,799
divorce and aerobang the force the

681
00:29:55,799 --> 00:29:57,539
ampang the force means that diversary to

682
00:29:57,539 --> 00:30:00,260
inject any number of force in this

683
00:30:00,260 --> 00:30:02,399
algorithmic Force means diversary can

684
00:30:02,399 --> 00:30:05,039
inject at most yellow Force initial

685
00:30:05,039 --> 00:30:07,580
reasons

686
00:30:08,700 --> 00:30:10,799
so at this point we capture both the

687
00:30:10,799 --> 00:30:13,260
force and leakage by using our Matrix

688
00:30:13,260 --> 00:30:17,100
so let's see uh the LR mark one

689
00:30:17,100 --> 00:30:20,520
uh so this uh this picture of Arrow mark

690
00:30:20,520 --> 00:30:22,500
one less I introduced in the previous

691
00:30:22,500 --> 00:30:24,419
slide

692
00:30:24,419 --> 00:30:27,720
so we should let the advantage for us uh

693
00:30:27,720 --> 00:30:29,279
against the stock ad and differential

694
00:30:29,279 --> 00:30:33,120
for landing attack uh in relocation can

695
00:30:33,120 --> 00:30:36,240
be captured by this uh equation it means

696
00:30:36,240 --> 00:30:39,480
that if adults removed to find a ready

697
00:30:39,480 --> 00:30:42,059
for jury then the grocery needs to

698
00:30:42,059 --> 00:30:43,860
either to find the Collision against the

699
00:30:43,860 --> 00:30:46,500
heart function or find a weighted turbo

700
00:30:46,500 --> 00:30:50,399
against the strong unpredictable uh we

701
00:30:50,399 --> 00:30:53,159
speak security or TBC f

702
00:30:53,159 --> 00:30:55,500
here we do not make a ideal assumption

703
00:30:55,500 --> 00:30:58,440
on TBC we only assure that it is a

704
00:30:58,440 --> 00:31:00,179
strong unpredictable in the liquid

705
00:31:00,179 --> 00:31:02,880
setting

706
00:31:02,880 --> 00:31:07,380
and this can be evaluated by the uh by

707
00:31:07,380 --> 00:31:09,000
the lab

708
00:31:09,000 --> 00:31:12,659
uh so which uh this is uh to show how to

709
00:31:12,659 --> 00:31:14,640
model how to use our model

710
00:31:14,640 --> 00:31:16,279
uh for uh

711
00:31:16,279 --> 00:31:20,399
so here the atomic implemented uh sold

712
00:31:20,399 --> 00:31:24,120
for medication is a hash function and

713
00:31:24,120 --> 00:31:26,460
it's also inverse of PPC so the atomic

714
00:31:26,460 --> 00:31:28,919
implementation here will be the F1 will

715
00:31:28,919 --> 00:31:31,260
be just the hash function the F2 will be

716
00:31:31,260 --> 00:31:32,760
immersed on TBC

717
00:31:32,760 --> 00:31:36,419
and so for input X1 X2 which will be the

718
00:31:36,419 --> 00:31:39,480
The Matrix and also the attack

719
00:31:39,480 --> 00:31:41,820
the output of the first function will be

720
00:31:41,820 --> 00:31:43,980
y1 which is exactly the hash value and

721
00:31:43,980 --> 00:31:46,080
what the output or second function will

722
00:31:46,080 --> 00:31:47,820
be inverse of TBC

723
00:31:47,820 --> 00:31:49,860
uh so dependency Ministries can be

724
00:31:49,860 --> 00:31:51,960
captured by the left part and also the

725
00:31:51,960 --> 00:31:54,539
40 mixture can be captured by a wrapper

726
00:31:54,539 --> 00:31:57,960
uh this protection means the adversary

727
00:31:57,960 --> 00:32:01,799
can inject any fourth uh in the X1 X2 or

728
00:32:01,799 --> 00:32:05,360
y1 in these three partitions

729
00:32:05,779 --> 00:32:08,880
query can be captured by the symbol at

730
00:32:08,880 --> 00:32:13,980
flow of Education K and two test three

731
00:32:13,980 --> 00:32:17,159
and also we the liquid attack generation

732
00:32:17,159 --> 00:32:19,200
query can be captured by the Lor Mark

733
00:32:19,200 --> 00:32:21,440
Kim

734
00:32:24,059 --> 00:32:26,460
so and

735
00:32:26,460 --> 00:32:31,260
as mentioned previously can only reduce

736
00:32:31,260 --> 00:32:33,120
the fourth uh full attack verification

737
00:32:33,120 --> 00:32:35,820
verification here we show an attack when

738
00:32:35,820 --> 00:32:37,740
the adult so you can inject fourth uh

739
00:32:37,740 --> 00:32:39,899
during the attack generation

740
00:32:39,899 --> 00:32:42,659
so you can only focus on the has value

741
00:32:42,659 --> 00:32:46,200
the attack procedure is external a lot

742
00:32:46,200 --> 00:32:48,120
another story can simply just compute

743
00:32:48,120 --> 00:32:51,299
the hash value of the HDM locally and

744
00:32:51,299 --> 00:32:53,760
also another harsh value of M Prime and

745
00:32:53,760 --> 00:32:55,440
then compute the difference of these two

746
00:32:55,440 --> 00:32:58,860
hash values and then you can query M to

747
00:32:58,860 --> 00:33:01,140
this uh Mark and enjoy the differential

748
00:33:01,140 --> 00:33:04,740
for Delta into Edge to obtain the

749
00:33:04,740 --> 00:33:05,880
corresponding

750
00:33:05,880 --> 00:33:09,360
then the M Prime and the talk will be a

751
00:33:09,360 --> 00:33:11,039
very refrigerate because and prime

752
00:33:11,039 --> 00:33:14,899
number query to this algorithm

753
00:33:16,500 --> 00:33:19,080
so to improve the security

754
00:33:19,080 --> 00:33:21,419
uh we it proposed another algorithm

755
00:33:21,419 --> 00:33:24,360
called hello MRT which can do GS4 in

756
00:33:24,360 --> 00:33:26,399
both the touch solution also tax

757
00:33:26,399 --> 00:33:29,159
verification is similar like the

758
00:33:29,159 --> 00:33:33,480
iterating the Lor Mach 1 twice

759
00:33:33,480 --> 00:33:35,159
and here I want to emphasize the

760
00:33:35,159 --> 00:33:38,279
internet the internal value in the

761
00:33:38,279 --> 00:33:40,740
picture W which will be used as the key

762
00:33:40,740 --> 00:33:42,720
of the second TBC should be protected

763
00:33:42,720 --> 00:33:45,960
against the force

764
00:33:45,960 --> 00:33:49,260
and we sure let the fourth Advantage for

765
00:33:49,260 --> 00:33:51,419
the stock ads and different show and One

766
00:33:51,419 --> 00:33:53,100
bank before landing attack in touch

767
00:33:53,100 --> 00:33:56,700
ratio and purification uh can be reduced

768
00:33:56,700 --> 00:33:59,159
to the Collision resistance of the hash

769
00:33:59,159 --> 00:34:01,100
function and also

770
00:34:01,100 --> 00:34:03,360
uh a new definition that is called

771
00:34:03,360 --> 00:34:07,279
self-preserving unpredictable TBC

772
00:34:09,719 --> 00:34:13,320
so and here uh there's a tag called the

773
00:34:13,320 --> 00:34:15,719
grafting attack that can work on any

774
00:34:15,719 --> 00:34:18,618
iterative construction

775
00:34:19,260 --> 00:34:22,918
uh so for any attack iterative skin that

776
00:34:22,918 --> 00:34:26,760
consists of two part maybe uh F and H

777
00:34:26,760 --> 00:34:29,940
uh so for a corrupting attack it the

778
00:34:29,940 --> 00:34:33,780
adoption can force query uh gm1 to skin

779
00:34:33,780 --> 00:34:37,320
X and inject 40 Value uh actually start

780
00:34:37,320 --> 00:34:42,119
to replace the the correct value uh H1

781
00:34:42,119 --> 00:34:44,219
and then query that's the chemistry M2

782
00:34:44,219 --> 00:34:47,460
to S and inject for the value H1 to

783
00:34:47,460 --> 00:34:50,580
replace the H2 and then obtain the sub

784
00:34:50,580 --> 00:34:52,500
second task then you can use the first

785
00:34:52,500 --> 00:34:55,320
mesh G and the second part to forge a

786
00:34:55,320 --> 00:34:57,180
very difficulturally and the successful

787
00:34:57,180 --> 00:34:58,859
probability will be one

788
00:34:58,859 --> 00:35:01,200
so this attack means the protection of

789
00:35:01,200 --> 00:35:03,800
the W in the yellow MRT is necessary

790
00:35:03,800 --> 00:35:06,780
otherwise the adversary can break the

791
00:35:06,780 --> 00:35:07,680
skin

792
00:35:07,680 --> 00:35:10,619
so if we buy iterating maybe iterating

793
00:35:10,619 --> 00:35:13,680
many times then the arrow MRT can do GS

794
00:35:13,680 --> 00:35:16,399
more Force

795
00:35:16,440 --> 00:35:18,780
and finally we will also propose another

796
00:35:18,780 --> 00:35:20,960
algorithm called

797
00:35:20,960 --> 00:35:24,599
is use additional maintenance

798
00:35:24,599 --> 00:35:28,079
so it's similar to Elohim instead we use

799
00:35:28,079 --> 00:35:30,720
the Netherlands R they will be take as

800
00:35:30,720 --> 00:35:33,420
input for a harsh function and also as

801
00:35:33,420 --> 00:35:36,960
input to the final PPC

802
00:35:36,960 --> 00:35:39,300
so here uh

803
00:35:39,300 --> 00:35:41,520
the buildings are something like the

804
00:35:41,520 --> 00:35:45,540
commitment of the hash value

805
00:35:45,540 --> 00:35:48,420
and for each tattoo initial this

806
00:35:48,420 --> 00:35:51,720
building is to be selected

807
00:35:51,720 --> 00:35:55,020
we also show the first advantage of this

808
00:35:55,020 --> 00:35:57,960
skin can be reduced to either the

809
00:35:57,960 --> 00:36:00,780
region register and premium resistance

810
00:36:00,780 --> 00:36:03,540
of the computation of the hash function

811
00:36:03,540 --> 00:36:06,720
and also a strong unpredictable with DQ

812
00:36:06,720 --> 00:36:09,300
security of the TBC or the loadedness of

813
00:36:09,300 --> 00:36:11,660
the r

814
00:36:13,920 --> 00:36:16,560
so here is the conclusion

815
00:36:16,560 --> 00:36:19,619
so we propose a model to capture both

816
00:36:19,619 --> 00:36:22,200
the leakage and force and we also show

817
00:36:22,200 --> 00:36:25,560
the previous alumac one is keyword or

818
00:36:25,560 --> 00:36:27,359
only if the touch of education is

819
00:36:27,359 --> 00:36:29,940
floated with the proposed to Max they

820
00:36:29,940 --> 00:36:31,339
called along

821
00:36:31,339 --> 00:36:33,960
they can reduce fourth by using

822
00:36:33,960 --> 00:36:35,640
different mechanisms

823
00:36:35,640 --> 00:36:38,220
uh there are some also more in paper

824
00:36:38,220 --> 00:36:41,339
including the discussion for the GDs and

825
00:36:41,339 --> 00:36:44,400
for register and also the discussion sub

826
00:36:44,400 --> 00:36:46,920
atomic force and also our model

827
00:36:46,920 --> 00:36:52,099
discussion and the details okay thanks

828
00:36:58,560 --> 00:37:05,180
so any questions uh us from Beijing

829
00:37:19,680 --> 00:37:22,520
no questions

830
00:37:22,520 --> 00:37:25,200
or uh

831
00:37:25,200 --> 00:37:29,180
then any questions from Kobe

832
00:37:33,359 --> 00:37:35,520
hello thank you for your presentation

833
00:37:35,520 --> 00:37:37,440
and one small question I have as you

834
00:37:37,440 --> 00:37:39,780
looked only at two types of false like

835
00:37:39,780 --> 00:37:42,000
the full hat and the the um the stock ad

836
00:37:42,000 --> 00:37:44,520
and the difference

837
00:37:44,520 --> 00:37:46,740
um is there a possibility to generalize

838
00:37:46,740 --> 00:37:49,200
to yeah not any possible thought

839
00:37:49,200 --> 00:37:52,020
obviously but uh but to a wider class of

840
00:37:52,020 --> 00:37:54,119
faults maybe I missed it

841
00:37:54,119 --> 00:37:55,980
yeah I think it is possible to

842
00:37:55,980 --> 00:37:57,900
generalize because that because there

843
00:37:57,900 --> 00:38:00,660
are many type of force and to make the

844
00:38:00,660 --> 00:38:02,460
proof and also the construction simple

845
00:38:02,460 --> 00:38:05,280
we only focus on the two popular four

846
00:38:05,280 --> 00:38:07,320
states uh stuck at the differential food

847
00:38:07,320 --> 00:38:09,420
so I think it is possible to generalize

848
00:38:09,420 --> 00:38:11,160
model and consider more different type

849
00:38:11,160 --> 00:38:12,480
of force

850
00:38:12,480 --> 00:38:15,540
okay but the bound to become much worse

851
00:38:15,540 --> 00:38:18,540
than or what do you expect yeah maybe

852
00:38:18,540 --> 00:38:21,060
but for the stuck at four I think it's

853
00:38:21,060 --> 00:38:24,060
also quite strong in the in a physical

854
00:38:24,060 --> 00:38:25,619
implication

855
00:38:25,619 --> 00:38:28,140
so it depends on how strong the double

856
00:38:28,140 --> 00:38:30,720
three will be

857
00:38:30,720 --> 00:38:33,000
yes you mean it is maybe not even

858
00:38:33,000 --> 00:38:35,880
meaningful to generalize yeah I think

859
00:38:35,880 --> 00:38:38,040
the stock identiful already very strong

860
00:38:38,040 --> 00:38:40,740
because typically the fourth attack is

861
00:38:40,740 --> 00:38:43,560
it's hard to to mount in the previous

862
00:38:43,560 --> 00:38:44,880
yes

863
00:38:44,880 --> 00:38:48,920
okay thank you okay thank you

864
00:38:50,460 --> 00:38:54,079
are there any other questions

865
00:39:06,960 --> 00:39:11,400
okay so I have one question so uh about

866
00:39:11,400 --> 00:39:15,060
your LR macd I mean that the D should be

867
00:39:15,060 --> 00:39:18,839
the double yes and yeah

868
00:39:18,839 --> 00:39:23,400
yeah my uh my question is if we don't

869
00:39:23,400 --> 00:39:26,760
have to consider the Lee cash I mean

870
00:39:26,760 --> 00:39:30,000
only the fourth attack is possible then

871
00:39:30,000 --> 00:39:30,780
the

872
00:39:30,780 --> 00:39:35,820
uh you can we use just a naive Black Box

873
00:39:35,820 --> 00:39:40,200
secure Max uh twice is that of enough or

874
00:39:40,200 --> 00:39:42,359
not

875
00:39:42,359 --> 00:39:46,079
uh Yumi Implement us a different marks

876
00:39:46,079 --> 00:39:49,920
twice yeah yeah I yeah to my uh

877
00:39:49,920 --> 00:39:51,180
understand yeah to my neighbor

878
00:39:51,180 --> 00:39:54,000
understanding that duplication is the

879
00:39:54,000 --> 00:39:57,119
best most basic uh protection against

880
00:39:57,119 --> 00:40:00,960
Ford attack so yeah I think yes I think

881
00:40:00,960 --> 00:40:02,760
it should be possible and I think the

882
00:40:02,760 --> 00:40:04,800
implement the two different everything

883
00:40:04,800 --> 00:40:08,760
twice is a good way for the

884
00:40:08,760 --> 00:40:11,820
for against the for the tech but here I

885
00:40:11,820 --> 00:40:14,220
think our construction may be a bit

886
00:40:14,220 --> 00:40:16,500
efficient because we only use the single

887
00:40:16,500 --> 00:40:19,200
key care okay here and we derive a

888
00:40:19,200 --> 00:40:20,400
second key by using the first

889
00:40:20,400 --> 00:40:21,660
Construction

890
00:40:21,660 --> 00:40:24,839
so and our construction have the almost

891
00:40:24,839 --> 00:40:27,720
the same component where only only based

892
00:40:27,720 --> 00:40:30,660
on the TBC and also hash function so

893
00:40:30,660 --> 00:40:33,119
maybe a bit efficient more efficient

894
00:40:33,119 --> 00:40:36,180
than a simply implement the mark

895
00:40:36,180 --> 00:40:37,880
everything twice

896
00:40:37,880 --> 00:40:41,480
all right thank you

897
00:40:42,839 --> 00:40:46,440
okay if no more questions

898
00:40:46,440 --> 00:40:49,320
let's thanks the speakers or the

899
00:40:49,320 --> 00:40:54,359
speakers Obsession at the questions yeah

900
00:40:54,359 --> 00:40:56,720
thank you

