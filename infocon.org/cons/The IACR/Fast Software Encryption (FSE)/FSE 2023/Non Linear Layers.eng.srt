1
00:00:00,000 --> 00:00:02,460
if you're here as could you start the

2
00:00:02,460 --> 00:00:04,620
recording

3
00:00:04,620 --> 00:00:06,000
I did

4
00:00:06,000 --> 00:00:08,779
yeah thanks

5
00:00:12,960 --> 00:00:14,820
hello everyone and welcome to the

6
00:00:14,820 --> 00:00:18,000
session on non-linear layers the first

7
00:00:18,000 --> 00:00:20,760
talk will be given by Shaham hazrul Sade

8
00:00:20,760 --> 00:00:24,000
from hadbout and yes I'm French as you

9
00:00:24,000 --> 00:00:26,160
have noticed he's going to talk about

10
00:00:26,160 --> 00:00:27,840
low latency brain functions and

11
00:00:27,840 --> 00:00:30,240
bijective S boxes

12
00:00:30,240 --> 00:00:32,399
thank you love for the introduction I'm

13
00:00:32,399 --> 00:00:35,399
shahram and now uh today I will talk

14
00:00:35,399 --> 00:00:38,219
about my recent studies on low latency

15
00:00:38,219 --> 00:00:40,860
as boxes

16
00:00:40,860 --> 00:00:42,559
uh

17
00:00:42,559 --> 00:00:46,020
Xboxes are one of the main components in

18
00:00:46,020 --> 00:00:49,500
designing black ciphers and also in many

19
00:00:49,500 --> 00:00:51,660
other symmetric crypto parameters they

20
00:00:51,660 --> 00:00:52,579
are actually

21
00:00:52,579 --> 00:00:56,340
nb2mbit factorial Boolean functions

22
00:00:56,340 --> 00:00:59,219
to make it clear what I will call later

23
00:00:59,219 --> 00:01:03,000
by coordinate functions I mean each

24
00:01:03,000 --> 00:01:06,780
output function of a function and by

25
00:01:06,780 --> 00:01:09,979
components functions I will mean

26
00:01:09,979 --> 00:01:12,420
any linear combination of with these

27
00:01:12,420 --> 00:01:16,140
output output functions we usually are

28
00:01:16,140 --> 00:01:19,320
interested in balance test boxes that

29
00:01:19,320 --> 00:01:21,920
means each output value appears

30
00:01:21,920 --> 00:01:26,040
uniformly and it is already known that

31
00:01:26,040 --> 00:01:29,580
it is equivalent to that each component

32
00:01:29,580 --> 00:01:32,400
function of this balance test box is a

33
00:01:32,400 --> 00:01:34,979
balanced Boolean function

34
00:01:34,979 --> 00:01:36,479
uh

35
00:01:36,479 --> 00:01:39,420
we we study these functions by their

36
00:01:39,420 --> 00:01:41,700
properties we have cryptographic

37
00:01:41,700 --> 00:01:43,799
properties of s-boxes

38
00:01:43,799 --> 00:01:47,720
we have uniformity to as a metric to

39
00:01:47,720 --> 00:01:51,000
resistance of the Xbox against the

40
00:01:51,000 --> 00:01:54,240
differential crypto analysis and also

41
00:01:54,240 --> 00:01:57,659
linearity that is a metric for its

42
00:01:57,659 --> 00:02:00,840
resistance for uh linear capitalensis

43
00:02:00,840 --> 00:02:03,180
and also sometimes we use algebra

44
00:02:03,180 --> 00:02:04,579
critically

45
00:02:04,579 --> 00:02:08,220
as a metric for resistance against

46
00:02:08,220 --> 00:02:10,258
higher order differential or cubic

47
00:02:10,258 --> 00:02:11,700
methods such as

48
00:02:11,700 --> 00:02:14,459
such as attacks

49
00:02:14,459 --> 00:02:18,180
but we need to implement this uh ciphers

50
00:02:18,180 --> 00:02:21,840
these functions in some platforms

51
00:02:21,840 --> 00:02:23,660
here I will

52
00:02:23,660 --> 00:02:26,879
sum of a proper Hardware implementation

53
00:02:26,879 --> 00:02:31,319
properties area latency we have power or

54
00:02:31,319 --> 00:02:34,739
gate count and gate depths we cannot

55
00:02:34,739 --> 00:02:38,660
measure these properties exactly exactly

56
00:02:38,660 --> 00:02:41,040
really Implement them

57
00:02:41,040 --> 00:02:43,739
we can synthesize them but still they

58
00:02:43,739 --> 00:02:47,459
are not really precise so we come with

59
00:02:47,459 --> 00:02:50,300
some solutions to

60
00:02:50,300 --> 00:02:53,280
mathematically study these properties we

61
00:02:53,280 --> 00:02:56,400
Define some circuit complexities such as

62
00:02:56,400 --> 00:02:58,220
gate count or

63
00:02:58,220 --> 00:03:01,440
multiplicative multiplicative complexity

64
00:03:01,440 --> 00:03:02,660
to

65
00:03:02,660 --> 00:03:05,519
measure some of these properties uh

66
00:03:05,519 --> 00:03:07,500
mathematically

67
00:03:07,500 --> 00:03:09,180
uh

68
00:03:09,180 --> 00:03:12,560
it's not easy it's not usually easy to

69
00:03:12,560 --> 00:03:16,200
study all of the Boolean functions

70
00:03:16,200 --> 00:03:18,780
with respect to this property so we

71
00:03:18,780 --> 00:03:22,440
consider some equivalency relations uh

72
00:03:22,440 --> 00:03:25,220
to reduce the amount of

73
00:03:25,220 --> 00:03:28,980
studies to make it easier we have a

74
00:03:28,980 --> 00:03:31,980
pigmentation equivalence that is uh two

75
00:03:31,980 --> 00:03:33,840
functions are equivalent under this

76
00:03:33,840 --> 00:03:38,540
relation if we put a

77
00:03:39,680 --> 00:03:42,480
mappings in the input and output of one

78
00:03:42,480 --> 00:03:44,940
function to get the other one you can

79
00:03:44,940 --> 00:03:47,700
extend it uh to Extended permutation

80
00:03:47,700 --> 00:03:49,860
equivalence by adding some constants in

81
00:03:49,860 --> 00:03:53,400
the inputs or uh with linear mappings we

82
00:03:53,400 --> 00:03:56,640
have linear equivalence relation and

83
00:03:56,640 --> 00:03:58,680
again we can extend it to our find by

84
00:03:58,680 --> 00:04:02,040
adding some constants to the linear

85
00:04:02,040 --> 00:04:03,480
relation

86
00:04:03,480 --> 00:04:06,840
and to Extended alphan equivalence which

87
00:04:06,840 --> 00:04:10,560
uh extended by adding a linear mapping

88
00:04:10,560 --> 00:04:14,959
to the output from one of the functions

89
00:04:14,959 --> 00:04:17,880
many of the cryptographic properties of

90
00:04:17,880 --> 00:04:20,699
Xbox's Boolean functions are invariant

91
00:04:20,699 --> 00:04:22,500
over extended I find equivalent

92
00:04:22,500 --> 00:04:25,080
population

93
00:04:25,080 --> 00:04:29,639
and amongst this uh five equivalency

94
00:04:29,639 --> 00:04:32,580
relations it is the most strongest one

95
00:04:32,580 --> 00:04:35,699
you have less number of classes to be

96
00:04:35,699 --> 00:04:38,880
studied compared to the other relations

97
00:04:38,880 --> 00:04:41,160
however for uh

98
00:04:41,160 --> 00:04:44,220
implementation properties they are only

99
00:04:44,220 --> 00:04:47,280
most of them are only invariant over

100
00:04:47,280 --> 00:04:49,560
permutation equivalence and this

101
00:04:49,560 --> 00:04:52,440
permutation equivalence is the

102
00:04:52,440 --> 00:04:55,680
weakest one amongst this uh five

103
00:04:55,680 --> 00:05:00,060
populations and since it is the weakest

104
00:05:00,060 --> 00:05:02,340
one and there are many number of classes

105
00:05:02,340 --> 00:05:06,180
to be studied it is usually not easy to

106
00:05:06,180 --> 00:05:08,419
finish

107
00:05:09,259 --> 00:05:11,160
studying or classifying all their

108
00:05:11,160 --> 00:05:14,300
functions for these properties

109
00:05:14,300 --> 00:05:18,360
however it was a shown by Axel kushman

110
00:05:18,360 --> 00:05:21,120
and Virgo Lander that by accepting some

111
00:05:21,120 --> 00:05:22,160
small

112
00:05:22,160 --> 00:05:26,300
tolerances in the properties and also

113
00:05:26,300 --> 00:05:29,880
since these functions are implemented

114
00:05:29,880 --> 00:05:31,940
together with some other

115
00:05:31,940 --> 00:05:35,280
some other circuits to build large list

116
00:05:35,280 --> 00:05:37,940
boxes together we can

117
00:05:37,940 --> 00:05:41,400
consider this properties which are

118
00:05:41,400 --> 00:05:43,380
bitmenutation equivalent

119
00:05:43,380 --> 00:05:48,199
to be a semi semi-invariant over uh

120
00:05:48,199 --> 00:05:52,520
extended bit permutation equivalence

121
00:05:53,000 --> 00:05:55,460
here we will talk about the latency

122
00:05:55,460 --> 00:05:59,960
latency of this boxes it is the time

123
00:05:59,960 --> 00:06:02,520
required to compute all the output

124
00:06:02,520 --> 00:06:06,300
speeds of a function a circuit not a

125
00:06:06,300 --> 00:06:07,199
function

126
00:06:07,199 --> 00:06:08,580
uh

127
00:06:08,580 --> 00:06:12,479
this property is secretly specific since

128
00:06:12,479 --> 00:06:15,360
for for one function there is no unique

129
00:06:15,360 --> 00:06:18,000
password circuit to realize it

130
00:06:18,000 --> 00:06:20,580
from one circuit to other circuit this

131
00:06:20,580 --> 00:06:23,460
can be different and not only a security

132
00:06:23,460 --> 00:06:26,220
specific it's also a technology specific

133
00:06:26,220 --> 00:06:27,680
property

134
00:06:27,680 --> 00:06:30,199
for the same circuit in different

135
00:06:30,199 --> 00:06:32,819
realizing different Technologies it can

136
00:06:32,819 --> 00:06:35,639
have different values so it's not really

137
00:06:35,639 --> 00:06:39,479
easy to understand what is not

138
00:06:39,479 --> 00:06:41,759
understand to know what is the latent

139
00:06:41,759 --> 00:06:45,380
surface function from the beginning

140
00:06:45,560 --> 00:06:48,360
previously gate theft's complexity was

141
00:06:48,360 --> 00:06:51,199
the metric to model uh

142
00:06:51,199 --> 00:06:55,139
mathematically model latency of a

143
00:06:55,139 --> 00:06:57,539
function and it is the minimum possible

144
00:06:57,539 --> 00:07:03,360
value or the lungs lungs pass of the

145
00:07:03,360 --> 00:07:05,280
circuits through all possible

146
00:07:05,280 --> 00:07:07,759
implementations

147
00:07:07,759 --> 00:07:11,520
but it is always possible to implement

148
00:07:11,520 --> 00:07:15,120
any functions within two gate divs if we

149
00:07:15,120 --> 00:07:19,199
allow any input size of input size for

150
00:07:19,199 --> 00:07:22,500
the gates therefore we only we usually

151
00:07:22,500 --> 00:07:24,840
restrict ourselves for the kids that has

152
00:07:24,840 --> 00:07:28,440
a funny number or input number of one or

153
00:07:28,440 --> 00:07:30,000
two

154
00:07:30,000 --> 00:07:34,919
uh here uh I bring the the minimum

155
00:07:34,919 --> 00:07:37,979
possible latency that you can achieve uh

156
00:07:37,979 --> 00:07:42,120
for these Gates two bit gates in 15

157
00:07:42,120 --> 00:07:45,539
nanometer and 40 nanometer uh open cell

158
00:07:45,539 --> 00:07:49,740
nand gate open cell open cell libraries

159
00:07:49,740 --> 00:07:54,419
nand is always the the fastest one and

160
00:07:54,419 --> 00:07:58,220
Pixar is usually the

161
00:07:58,220 --> 00:08:00,180
slowest ones

162
00:08:00,180 --> 00:08:03,720
and as you see it is quite twice after

163
00:08:03,720 --> 00:08:06,300
the latency for nands

164
00:08:06,300 --> 00:08:09,240
this is not coincidence or not specific

165
00:08:09,240 --> 00:08:12,740
for this technology for this libraries

166
00:08:12,740 --> 00:08:17,340
this is based on the CMOS how you

167
00:08:17,340 --> 00:08:20,819
realize uh xor or ignore in the CMOS

168
00:08:20,819 --> 00:08:21,900
technology

169
00:08:21,900 --> 00:08:25,860
so uh based on this we found that ktep's

170
00:08:25,860 --> 00:08:30,240
complexity is quite a loose metric to

171
00:08:30,240 --> 00:08:34,820
compare latency of Boolean functions

172
00:08:34,979 --> 00:08:37,860
so we came up with another metric we

173
00:08:37,860 --> 00:08:40,440
call it latency complexity that is the

174
00:08:40,440 --> 00:08:42,599
gate depths complexity in the basis of

175
00:08:42,599 --> 00:08:45,060
nand nor an inverter

176
00:08:45,060 --> 00:08:48,480
but we don't count the inverters in the

177
00:08:48,480 --> 00:08:51,000
gatecon

178
00:08:51,000 --> 00:08:54,240
and pleasing comes why we don't I will

179
00:08:54,240 --> 00:08:56,580
explain it here now why we don't can't

180
00:08:56,580 --> 00:08:58,680
uh in vectors

181
00:08:58,680 --> 00:09:01,019
we first showed that any Boolean

182
00:09:01,019 --> 00:09:04,260
function with latency complexity D can

183
00:09:04,260 --> 00:09:07,860
be realized within this construction you

184
00:09:07,860 --> 00:09:12,720
have the levels of uh Gates nand or nor

185
00:09:12,720 --> 00:09:15,140
Gates and one

186
00:09:15,140 --> 00:09:18,959
starting layer of buffers or inverters

187
00:09:18,959 --> 00:09:22,800
and input of these buffers are one of

188
00:09:22,800 --> 00:09:27,060
the AIS are one of the inputs to the

189
00:09:27,060 --> 00:09:28,140
function

190
00:09:28,140 --> 00:09:30,899
and as you see there is only one level

191
00:09:30,899 --> 00:09:35,000
of inverters or buffers and

192
00:09:35,000 --> 00:09:38,660
comparing to latency of all uh

193
00:09:38,660 --> 00:09:41,040
circuit it is

194
00:09:41,040 --> 00:09:43,260
much smaller

195
00:09:43,260 --> 00:09:44,720
also

196
00:09:44,720 --> 00:09:47,519
we will implement this function together

197
00:09:47,519 --> 00:09:50,459
with other functions so this nands can

198
00:09:50,459 --> 00:09:54,240
be combined with the previous layer of

199
00:09:54,240 --> 00:09:57,360
the circuits and also in the low latency

200
00:09:57,360 --> 00:09:59,279
implementation of

201
00:09:59,279 --> 00:10:03,360
uh functions or let's say ciphers here

202
00:10:03,360 --> 00:10:07,500
we need usually a buffer a layer of

203
00:10:07,500 --> 00:10:12,560
buffers to modify the voltage of

204
00:10:12,560 --> 00:10:16,019
amplifier voltage of signals coming to

205
00:10:16,019 --> 00:10:19,740
this layer so we can just say we don't

206
00:10:19,740 --> 00:10:22,920
consider these buffers or

207
00:10:22,920 --> 00:10:26,360
inverters in this layer

208
00:10:26,360 --> 00:10:30,899
this structure also helps us to find all

209
00:10:30,899 --> 00:10:32,760
the uh

210
00:10:32,760 --> 00:10:35,399
Boolean functions with latency

211
00:10:35,399 --> 00:10:39,019
complexity we only need to

212
00:10:39,019 --> 00:10:41,940
considering that we already found all

213
00:10:41,940 --> 00:10:45,120
the functions with latency complexity D

214
00:10:45,120 --> 00:10:47,579
minus one we choose two of them and then

215
00:10:47,579 --> 00:10:49,320
combine uh

216
00:10:49,320 --> 00:10:51,660
these two functions through a nand or

217
00:10:51,660 --> 00:10:54,060
nor gate and then we will have the set

218
00:10:54,060 --> 00:10:57,000
of all possible Boolean functions with

219
00:10:57,000 --> 00:10:59,700
latency complexity

220
00:10:59,700 --> 00:11:01,260
uh

221
00:11:01,260 --> 00:11:02,820
we

222
00:11:02,820 --> 00:11:06,899
propose the we presenter quite

223
00:11:06,899 --> 00:11:09,120
complicated

224
00:11:09,120 --> 00:11:12,180
algorithm to find it more efficiently

225
00:11:12,180 --> 00:11:16,440
but simply saying it we only find these

226
00:11:16,440 --> 00:11:19,680
functions up to the extended bit

227
00:11:19,680 --> 00:11:22,260
permutation equivalence so we can

228
00:11:22,260 --> 00:11:25,140
instead of going through all possible

229
00:11:25,140 --> 00:11:30,060
choices for uh two pairs we only need to

230
00:11:30,060 --> 00:11:31,860
consider one of them to be

231
00:11:31,860 --> 00:11:35,959
representative and one can be any

232
00:11:35,959 --> 00:11:39,060
Boolean function with latency complex DT

233
00:11:39,060 --> 00:11:42,480
minus one then we combine them but only

234
00:11:42,480 --> 00:11:45,660
with nand gate not both of nand and nor

235
00:11:45,660 --> 00:11:49,019
and this is because of uh equivalence

236
00:11:49,019 --> 00:11:51,839
relation in the output then we compute

237
00:11:51,839 --> 00:11:54,660
its representative and added to the set

238
00:11:54,660 --> 00:11:55,920
of

239
00:11:55,920 --> 00:11:57,660
Boolean functions with latency

240
00:11:57,660 --> 00:11:59,579
complexity

241
00:11:59,579 --> 00:12:02,579
using this algorithm we were it was

242
00:12:02,579 --> 00:12:05,100
possible for us to find latency

243
00:12:05,100 --> 00:12:08,279
complexity of all Boolean functions up

244
00:12:08,279 --> 00:12:13,200
to five bits and also we could find all

245
00:12:13,200 --> 00:12:14,240
the

246
00:12:14,240 --> 00:12:17,040
Boolean functions up to eight bits with

247
00:12:17,040 --> 00:12:20,599
the latency complex C4

248
00:12:22,620 --> 00:12:25,160
having this set of

249
00:12:25,160 --> 00:12:26,839
Representative

250
00:12:26,839 --> 00:12:30,060
defining their uh input numbers and

251
00:12:30,060 --> 00:12:33,200
latency complexity we could also

252
00:12:33,200 --> 00:12:36,720
introduce a new algorithm to find all

253
00:12:36,720 --> 00:12:38,940
the possible implementations for a

254
00:12:38,940 --> 00:12:40,620
Boolean function

255
00:12:40,620 --> 00:12:43,339
uh

256
00:12:43,860 --> 00:12:47,339
we consider that f is the function that

257
00:12:47,339 --> 00:12:49,139
we want to find it's all possible

258
00:12:49,139 --> 00:12:51,660
circuits with the minimum Lo with the

259
00:12:51,660 --> 00:12:52,980
minimum

260
00:12:52,980 --> 00:12:57,720
latency devs and G to be one one

261
00:12:57,720 --> 00:13:01,019
candidate to be its sub circuit that

262
00:13:01,019 --> 00:13:04,320
together with another function that can

263
00:13:04,320 --> 00:13:07,260
make it a

264
00:13:07,260 --> 00:13:09,899
together with an end or an orgate can

265
00:13:09,899 --> 00:13:14,220
realize the circuit for f if G uh has

266
00:13:14,220 --> 00:13:18,300
such a property it has to fulfill the

267
00:13:18,300 --> 00:13:20,820
condition in line seven

268
00:13:20,820 --> 00:13:24,540
and if these conditions is fulfilled we

269
00:13:24,540 --> 00:13:27,540
save it save G function in a set of a

270
00:13:27,540 --> 00:13:30,360
nand and also if

271
00:13:30,360 --> 00:13:32,720
G can be a candidate for

272
00:13:32,720 --> 00:13:34,399
realizing

273
00:13:34,399 --> 00:13:36,899
realizing a circuit for f function

274
00:13:36,899 --> 00:13:38,160
together with

275
00:13:38,160 --> 00:13:41,459
and other function through a nor gate it

276
00:13:41,459 --> 00:13:45,440
has to fulfill the condition in line 9.

277
00:13:45,440 --> 00:13:48,779
going through all these G functions and

278
00:13:48,779 --> 00:13:52,139
building all the these two sets of a

279
00:13:52,139 --> 00:13:53,959
nand and a nor

280
00:13:53,959 --> 00:13:58,500
we go through all pairs in this uh sets

281
00:13:58,500 --> 00:13:59,660
and

282
00:13:59,660 --> 00:14:03,320
if there is a pair of G and H that can

283
00:14:03,320 --> 00:14:08,360
fulfill a condition in line 12 we can

284
00:14:08,360 --> 00:14:11,760
say this is a possible solution and then

285
00:14:11,760 --> 00:14:15,120
we go to find all circuits for G and H

286
00:14:15,120 --> 00:14:18,240
we continue this test until the steps

287
00:14:18,240 --> 00:14:20,720
that the

288
00:14:20,720 --> 00:14:24,300
sub circuit for sub functions are only

289
00:14:24,300 --> 00:14:28,860
one bit functions and then we return the

290
00:14:28,860 --> 00:14:31,740
trivial solution of it is the invariant

291
00:14:31,740 --> 00:14:34,380
or it's a negative value of the

292
00:14:34,380 --> 00:14:36,420
environment

293
00:14:36,420 --> 00:14:38,279
[Music]

294
00:14:38,279 --> 00:14:41,940
we also studied latency complex of

295
00:14:41,940 --> 00:14:44,040
previously known as boxes

296
00:14:44,040 --> 00:14:46,820
uh

297
00:14:46,820 --> 00:14:49,440
we did quite comprehensive search

298
00:14:49,440 --> 00:14:52,380
through all the Xboxes that is used in

299
00:14:52,380 --> 00:14:54,839
the literature for three bit as boxes

300
00:14:54,839 --> 00:14:59,220
what is used is already uh has has

301
00:14:59,220 --> 00:15:01,920
latency complex they have three and four

302
00:15:01,920 --> 00:15:05,579
bits as well for 4-bit Xboxes uh except

303
00:15:05,579 --> 00:15:08,339
for midori's Xbox

304
00:15:08,339 --> 00:15:10,800
all the other Xbox has latency

305
00:15:10,800 --> 00:15:13,199
complexity or file

306
00:15:13,199 --> 00:15:16,100
or five bits except catch access box

307
00:15:16,100 --> 00:15:20,820
which has a latency complex D3 and

308
00:15:20,820 --> 00:15:24,180
linearity 69 uniform V8 all the address

309
00:15:24,180 --> 00:15:28,320
boxes such as APN Xbox like in bytes

310
00:15:28,320 --> 00:15:32,060
files Xbox it has uh they have a

311
00:15:32,060 --> 00:15:35,100
complexity equal to five

312
00:15:35,100 --> 00:15:38,699
for large rest boxes there is no uh

313
00:15:38,699 --> 00:15:43,079
Xboxes with a latency complexity less

314
00:15:43,079 --> 00:15:45,480
than six exactly three disease box that

315
00:15:45,480 --> 00:15:49,380
has a latency complex C4 and linearity

316
00:15:49,380 --> 00:15:52,440
24 uniformity pay

317
00:15:52,440 --> 00:15:55,139
so this was a motivation for us to

318
00:15:55,139 --> 00:15:58,920
search for Xboxes with low latency

319
00:15:58,920 --> 00:16:00,899
complexity

320
00:16:00,899 --> 00:16:03,320
for this we

321
00:16:03,320 --> 00:16:07,980
we chose our criteria in this order we

322
00:16:07,980 --> 00:16:11,180
need low latency complexity for the Xbox

323
00:16:11,180 --> 00:16:14,399
we need minimum possible linearity and

324
00:16:14,399 --> 00:16:17,519
then minimum uniformity and also then

325
00:16:17,519 --> 00:16:20,940
later we add algebraic degree to be

326
00:16:20,940 --> 00:16:25,019
quadratic or to be maximum as possible

327
00:16:25,019 --> 00:16:27,660
why we prioritize linearity over

328
00:16:27,660 --> 00:16:30,480
uniformity is that we can check for

329
00:16:30,480 --> 00:16:33,480
linearity of s-box by having its

330
00:16:33,480 --> 00:16:36,600
coordinates but this is not possible to

331
00:16:36,600 --> 00:16:39,779
check for uniform you have Xbox by only

332
00:16:39,779 --> 00:16:42,600
having a coordinates function of it

333
00:16:42,600 --> 00:16:44,880
uh

334
00:16:44,880 --> 00:16:48,600
other method of building Xbox is we do

335
00:16:48,600 --> 00:16:52,019
steps over uh choosing the coordinates

336
00:16:52,019 --> 00:16:54,380
of the Xbox

337
00:16:54,380 --> 00:16:58,560
I mean considering s is our s-box and if

338
00:16:58,560 --> 00:17:01,320
either is coordinate we first choose F0

339
00:17:01,320 --> 00:17:04,559
we check for criteria we choose F1 we

340
00:17:04,559 --> 00:17:07,020
choose we check for criteria and then

341
00:17:07,020 --> 00:17:09,480
until the end that we have the last

342
00:17:09,480 --> 00:17:12,799
coordinate and we check for uh

343
00:17:12,799 --> 00:17:17,760
uniformity criteria and say okay this s

344
00:17:17,760 --> 00:17:19,740
is acceptable

345
00:17:19,740 --> 00:17:22,459
uh

346
00:17:23,640 --> 00:17:26,819
we consider f as the set of all Boolean

347
00:17:26,819 --> 00:17:29,960
functions satisfying this criteria uh

348
00:17:29,960 --> 00:17:33,360
criteria for latency and linearity and

349
00:17:33,360 --> 00:17:35,880
also the the algebra particularly and

350
00:17:35,880 --> 00:17:40,799
also uh we show by R1 the setup all

351
00:17:40,799 --> 00:17:45,660
representatives from this set f

352
00:17:45,660 --> 00:17:47,940
uh

353
00:17:47,940 --> 00:17:51,320
Christopher uh

354
00:17:51,320 --> 00:17:55,799
proposed the basic algorithm for this

355
00:17:55,799 --> 00:17:58,320
method

356
00:17:58,320 --> 00:18:02,179
there the first set the

357
00:18:02,179 --> 00:18:07,260
our sets s r 2 2 r m to be empty sets

358
00:18:07,260 --> 00:18:12,240
then for each vectorable in function f

359
00:18:12,240 --> 00:18:14,820
Prime from previous representative sets

360
00:18:14,820 --> 00:18:18,720
and for each coordinate F ROM set of all

361
00:18:18,720 --> 00:18:20,220
Boolean functions

362
00:18:20,220 --> 00:18:21,679
the

363
00:18:21,679 --> 00:18:25,140
compute the composite function and then

364
00:18:25,140 --> 00:18:27,419
we check for the criteria

365
00:18:27,419 --> 00:18:31,260
if it was if it fulfills the criteria we

366
00:18:31,260 --> 00:18:33,419
added to the set s

367
00:18:33,419 --> 00:18:37,140
and when we finish this Loop we go

368
00:18:37,140 --> 00:18:40,080
through all the functions in s to check

369
00:18:40,080 --> 00:18:43,440
if they are new by being a

370
00:18:43,440 --> 00:18:47,340
equivalent to others or not we check uh

371
00:18:47,340 --> 00:18:52,799
we choose one of these f1s from s and uh

372
00:18:52,799 --> 00:18:56,460
for each F0 from this representative

373
00:18:56,460 --> 00:18:59,039
sets we check if they are equivalent or

374
00:18:59,039 --> 00:19:01,980
not if it is equivalent to one of these

375
00:19:01,980 --> 00:19:06,240
uh so or this F1 is not new we go to

376
00:19:06,240 --> 00:19:10,919
other F1 from this asset but if for all

377
00:19:10,919 --> 00:19:13,919
of these F's rows we find that it is not

378
00:19:13,919 --> 00:19:16,020
equivalent to any of them so it's the

379
00:19:16,020 --> 00:19:18,900
new function and will be added to a set

380
00:19:18,900 --> 00:19:22,740
of RI we fulfill it we finish the slope

381
00:19:22,740 --> 00:19:25,740
and then we increase I go to the higher

382
00:19:25,740 --> 00:19:29,640
dimension of search

383
00:19:31,020 --> 00:19:36,240
here we need to save the set s

384
00:19:36,240 --> 00:19:39,480
and also uh

385
00:19:39,480 --> 00:19:43,500
we need to check the equivalency of all

386
00:19:43,500 --> 00:19:46,380
between all possible F bands and F

387
00:19:46,380 --> 00:19:47,820
series

388
00:19:47,820 --> 00:19:49,500
this

389
00:19:49,500 --> 00:19:53,220
is saving s is uh may be possible for

390
00:19:53,220 --> 00:19:54,360
the case of

391
00:19:54,360 --> 00:19:55,740
oh

392
00:19:55,740 --> 00:19:58,919
okay I will make it faster

393
00:19:58,919 --> 00:20:02,460
s may be needs a bit uh

394
00:20:02,460 --> 00:20:04,740
more memory

395
00:20:04,740 --> 00:20:07,320
in the case of a bit transition

396
00:20:07,320 --> 00:20:08,660
equivalence

397
00:20:08,660 --> 00:20:11,660
be multiplied it in the following

398
00:20:11,660 --> 00:20:13,700
algorithm

399
00:20:13,700 --> 00:20:18,780
for each composite function f we check

400
00:20:18,780 --> 00:20:21,780
we directly compute its

401
00:20:21,780 --> 00:20:23,640
representativeness and then add it to

402
00:20:23,640 --> 00:20:24,559
the

403
00:20:24,559 --> 00:20:26,160
so

404
00:20:26,160 --> 00:20:28,500
to the representatives and then we

405
00:20:28,500 --> 00:20:30,559
continue to the next

406
00:20:30,559 --> 00:20:34,020
dimension of building s-boxes

407
00:20:34,020 --> 00:20:35,580
uh

408
00:20:35,580 --> 00:20:39,059
here the complex the computation

409
00:20:39,059 --> 00:20:41,039
conflicts the memory complexity will be

410
00:20:41,039 --> 00:20:42,120
like this

411
00:20:42,120 --> 00:20:44,340
but consider that we don't need to

412
00:20:44,340 --> 00:20:47,539
classify uh

413
00:20:48,380 --> 00:20:51,900
classify all the functions and we are

414
00:20:51,900 --> 00:20:55,320
interested in only finding uh some

415
00:20:55,320 --> 00:20:59,240
s-boxes with criteria with our criteria

416
00:20:59,240 --> 00:21:03,600
we modify this algorithm to following

417
00:21:03,600 --> 00:21:04,700
way

418
00:21:04,700 --> 00:21:07,559
uh we

419
00:21:07,559 --> 00:21:10,799
go through loops

420
00:21:10,799 --> 00:21:14,179
oh I'm over time

421
00:21:15,620 --> 00:21:22,700
okay we introduced uh quite a new uh

422
00:21:22,700 --> 00:21:27,440
algorithm and uh with efficient to be uh

423
00:21:27,440 --> 00:21:31,520
to be good in time time of the

424
00:21:31,520 --> 00:21:34,799
complexity not time of presenting

425
00:21:34,799 --> 00:21:36,059
uh

426
00:21:36,059 --> 00:21:37,980
and uh

427
00:21:37,980 --> 00:21:42,360
based on this we find quite new quite

428
00:21:42,360 --> 00:21:48,240
good Xboxes to be a low low latency for

429
00:21:48,240 --> 00:21:51,059
the case of uh let's uh latency

430
00:21:51,059 --> 00:21:55,460
complexity to B4 we find uh

431
00:21:55,460 --> 00:21:59,159
six bit and seven bit s-boxes with

432
00:21:59,159 --> 00:22:02,159
linearity two to the N minus two and

433
00:22:02,159 --> 00:22:06,320
uniformity is 2 to the N minus 4.

434
00:22:06,320 --> 00:22:11,760
uh yeah all the results are are publicly

435
00:22:11,760 --> 00:22:14,760
available in this uh address you can

436
00:22:14,760 --> 00:22:18,200
check and if you need any

437
00:22:18,200 --> 00:22:22,200
tools or related code just send me an

438
00:22:22,200 --> 00:22:24,600
email and I will provide it

439
00:22:24,600 --> 00:22:26,760
thank you for your attention and sorry

440
00:22:26,760 --> 00:22:30,440
for being here thank you Sean

441
00:22:33,659 --> 00:22:36,840
um do we have a very quick question uh

442
00:22:36,840 --> 00:22:39,720
on the chat here or in Beijing yes

443
00:22:39,720 --> 00:22:42,620
Christina

444
00:22:43,620 --> 00:22:47,658
please wait a moment there is question

445
00:22:48,179 --> 00:22:51,120
okay hi sham I have a question

446
00:22:51,120 --> 00:22:54,020
um is there a some link between the

447
00:22:54,020 --> 00:22:56,640
latency and the differential properties

448
00:22:56,640 --> 00:22:59,159
of the of the s box

449
00:22:59,159 --> 00:23:02,340
that is also a conjunction for me I

450
00:23:02,340 --> 00:23:05,940
decided but I didn't find any relation

451
00:23:05,940 --> 00:23:09,919
but probably there is

452
00:23:12,659 --> 00:23:14,220
okay

453
00:23:14,220 --> 00:23:16,280
um

454
00:23:17,659 --> 00:23:21,419
okay so please from Beijing what's the

455
00:23:21,419 --> 00:23:23,600
question

456
00:23:25,620 --> 00:23:28,500
I want to know how to measure the time

457
00:23:28,500 --> 00:23:33,500
of computing the representative function

458
00:23:34,980 --> 00:23:38,760
you mean what is the time for computing

459
00:23:38,760 --> 00:23:40,440
a representative function of a giving

460
00:23:40,440 --> 00:23:41,940
function right

461
00:23:41,940 --> 00:23:43,700
oh yeah

462
00:23:43,700 --> 00:23:48,419
uh what I did is just uh very simply I

463
00:23:48,419 --> 00:23:51,120
put all the

464
00:23:51,120 --> 00:23:53,460
possible input mappings and possible

465
00:23:53,460 --> 00:23:58,260
output mappings and uh compute the

466
00:23:58,260 --> 00:24:00,900
outcoming result and see if it is

467
00:24:00,900 --> 00:24:03,419
smaller than already saved

468
00:24:03,419 --> 00:24:05,460
representative

469
00:24:05,460 --> 00:24:09,419
and searching through all these uh we

470
00:24:09,419 --> 00:24:12,539
see if it can what is the final

471
00:24:12,539 --> 00:24:15,000
representative it is like finding a

472
00:24:15,000 --> 00:24:18,720
minimum through an area integers

473
00:24:18,720 --> 00:24:21,840
something like this but you can always

474
00:24:21,840 --> 00:24:25,100
speed it up

475
00:24:26,340 --> 00:24:29,840
is that answer your question

476
00:24:32,100 --> 00:24:34,919
okay and with that we can thank shahram

477
00:24:34,919 --> 00:24:37,159
again

478
00:24:42,659 --> 00:24:45,059
now we're going to have a talk which

479
00:24:45,059 --> 00:24:46,919
will be given by Lorenzo on invertible

480
00:24:46,919 --> 00:24:50,580
quadratic non-linear layers for

481
00:24:50,580 --> 00:24:51,840
motivation

482
00:24:51,840 --> 00:24:53,640
foreign

483
00:24:53,640 --> 00:24:57,120
for MPC fhc ZK friendly schemes over FP

484
00:24:57,120 --> 00:24:58,860
to the n and it's a joint work with

485
00:24:58,860 --> 00:25:03,539
Sylvia onofre Marco pericini and lucasi

486
00:25:03,539 --> 00:25:05,419
please thank you

487
00:25:05,419 --> 00:25:07,799
so okay I did this work when I was at

488
00:25:07,799 --> 00:25:11,100
RedBot University now I'm in Boku I'm

489
00:25:11,100 --> 00:25:12,840
going to start this work with a bit of

490
00:25:12,840 --> 00:25:15,419
motivation and to explain the goals of

491
00:25:15,419 --> 00:25:17,159
this of this work

492
00:25:17,159 --> 00:25:18,659
so as you may know there are a new

493
00:25:18,659 --> 00:25:21,299
applications like NPC free morphic

494
00:25:21,299 --> 00:25:23,220
encryption zero knowledge that requires

495
00:25:23,220 --> 00:25:25,620
symmetic primitive primitive some

496
00:25:25,620 --> 00:25:27,900
symmetic cryptography

497
00:25:27,900 --> 00:25:30,659
and disabilities are usually defined on

498
00:25:30,659 --> 00:25:32,460
their Prime fix because this application

499
00:25:32,460 --> 00:25:35,279
works so they are applying feeds and P

500
00:25:35,279 --> 00:25:37,200
is usually a very large Prime integers

501
00:25:37,200 --> 00:25:40,080
for example to the power of 128 or even

502
00:25:40,080 --> 00:25:40,919
more

503
00:25:40,919 --> 00:25:43,080
and what is important in that is that

504
00:25:43,080 --> 00:25:45,419
these Primitives minimize the

505
00:25:45,419 --> 00:25:47,460
multiplicative complexity which means

506
00:25:47,460 --> 00:25:49,620
the number of multiplications of no

507
00:25:49,620 --> 00:25:51,659
linear operation that are required to

508
00:25:51,659 --> 00:25:56,600
either compute or verify these schemes

509
00:25:57,179 --> 00:25:58,500
now

510
00:25:58,500 --> 00:26:01,260
um due to the size of these Prime we

511
00:26:01,260 --> 00:26:04,140
cannot pre-compute and store the linear

512
00:26:04,140 --> 00:26:07,260
page operation for example the Xbox for

513
00:26:07,260 --> 00:26:09,120
example in AES we can do that it's just

514
00:26:09,120 --> 00:26:11,220
8-bit but here the prime is too large so

515
00:26:11,220 --> 00:26:12,480
we cannot do this

516
00:26:12,480 --> 00:26:14,580
so this means that we need no linear

517
00:26:14,580 --> 00:26:17,340
operation that admit a very simple

518
00:26:17,340 --> 00:26:19,380
algebraic expression so very simple

519
00:26:19,380 --> 00:26:21,539
doesn't mean low degree just means a

520
00:26:21,539 --> 00:26:24,299
simple expression

521
00:26:24,299 --> 00:26:27,120
for example we have power math which are

522
00:26:27,120 --> 00:26:29,100
invaluable if the exponent is equal

523
00:26:29,100 --> 00:26:31,320
Prime with P minus one the Dixon

524
00:26:31,320 --> 00:26:33,240
polynomial which are generalization of

525
00:26:33,240 --> 00:26:35,400
the power maps and are in the theraco

526
00:26:35,400 --> 00:26:36,900
prime if

527
00:26:36,900 --> 00:26:39,419
um p is compliant with B squared minus

528
00:26:39,419 --> 00:26:40,260
one

529
00:26:40,260 --> 00:26:43,380
other functions that can be set up via

530
00:26:43,380 --> 00:26:45,240
deletion function or for example the

531
00:26:45,240 --> 00:26:47,400
minus one to the power of X operator

532
00:26:47,400 --> 00:26:50,400
that we propose last year at FSC but you

533
00:26:50,400 --> 00:26:52,260
can also set up no linear layer by using

534
00:26:52,260 --> 00:26:55,500
fisa or lime schema

535
00:26:55,500 --> 00:26:57,720
probably there are others these are

536
00:26:57,720 --> 00:26:59,460
known

537
00:26:59,460 --> 00:27:01,260
now if you focus on the force two for

538
00:27:01,260 --> 00:27:02,419
example

539
00:27:02,419 --> 00:27:05,640
they are nice but there could be a

540
00:27:05,640 --> 00:27:07,799
problem when we use them in practice and

541
00:27:07,799 --> 00:27:09,360
the reason is that in this application

542
00:27:09,360 --> 00:27:12,120
we use several primes so we have to

543
00:27:12,120 --> 00:27:14,460
change the exponent in base based on the

544
00:27:14,460 --> 00:27:15,480
prime

545
00:27:15,480 --> 00:27:18,299
and this is not very good in some cases

546
00:27:18,299 --> 00:27:19,799
because this means that we have to

547
00:27:19,799 --> 00:27:21,240
change for example the security analysis

548
00:27:21,240 --> 00:27:24,179
for example the growth degree can change

549
00:27:24,179 --> 00:27:26,820
depending on the exponent t or for

550
00:27:26,820 --> 00:27:28,740
example the density of the polynomial

551
00:27:28,740 --> 00:27:30,360
representation can change so we have to

552
00:27:30,360 --> 00:27:31,980
adapt the security analysis depending on

553
00:27:31,980 --> 00:27:33,360
the exponent

554
00:27:33,360 --> 00:27:35,039
and the other point is that in some

555
00:27:35,039 --> 00:27:37,620
cases this uh Primitives could be

556
00:27:37,620 --> 00:27:40,200
efficient for some exponent but not for

557
00:27:40,200 --> 00:27:42,059
others

558
00:27:42,059 --> 00:27:45,240
and for five style and Lamas schemes uh

559
00:27:45,240 --> 00:27:46,919
they are it's a partial engineer in the

560
00:27:46,919 --> 00:27:48,840
sense that some output the arena

561
00:27:48,840 --> 00:27:51,120
function of the input and in some cases

562
00:27:51,120 --> 00:27:54,600
this is not also very nice

563
00:27:54,600 --> 00:27:56,700
so the code of this paper

564
00:27:56,700 --> 00:28:00,659
was to look for new invertible knowing a

565
00:28:00,659 --> 00:28:03,000
layers of the rfp2 then that cause and

566
00:28:03,000 --> 00:28:04,860
multiplication so in general I would

567
00:28:04,860 --> 00:28:08,039
agree two and if possible they have a

568
00:28:08,039 --> 00:28:10,620
degree inverse so for preventing meeting

569
00:28:10,620 --> 00:28:14,120
the middle Azure bike attacks

570
00:28:16,200 --> 00:28:18,480
okay so if we have a function over FP to

571
00:28:18,480 --> 00:28:19,460
the N

572
00:28:19,460 --> 00:28:23,279
is the generic function so each output y

573
00:28:23,279 --> 00:28:25,860
i is defined as the output of a function

574
00:28:25,860 --> 00:28:30,360
f i that takes in input x0x1 and so on

575
00:28:30,360 --> 00:28:33,539
as you can understand we cannot analyze

576
00:28:33,539 --> 00:28:35,580
all these cases because there are too

577
00:28:35,580 --> 00:28:38,820
many so what we did is to focus on the

578
00:28:38,820 --> 00:28:42,299
cellular automata so we Define s as a

579
00:28:42,299 --> 00:28:45,000
cellular automator so as a sheet Divine

580
00:28:45,000 --> 00:28:47,039
transformation over an array of n

581
00:28:47,039 --> 00:28:49,980
element that are defined by a single

582
00:28:49,980 --> 00:28:53,600
local map so in this case n is the size

583
00:28:53,600 --> 00:28:56,039
of the feed where we are working on and

584
00:28:56,039 --> 00:28:58,140
M is the side is the number of input of

585
00:28:58,140 --> 00:29:00,919
this function f

586
00:29:03,059 --> 00:29:05,340
so to be a bit more formal we say that

587
00:29:05,340 --> 00:29:07,919
the shift in variant lifting function SF

588
00:29:07,919 --> 00:29:10,440
over fp2 then is defined by is induced

589
00:29:10,440 --> 00:29:14,039
by the local map F if it is defined in

590
00:29:14,039 --> 00:29:16,679
this way so each output y i is defined

591
00:29:16,679 --> 00:29:20,100
as as F applied to x i x i plus 1 and so

592
00:29:20,100 --> 00:29:22,380
on so we have a single local map and we

593
00:29:22,380 --> 00:29:24,779
just use this locking map to compute all

594
00:29:24,779 --> 00:29:27,559
the possible OD output

595
00:29:27,559 --> 00:29:30,559
foreign

596
00:29:31,760 --> 00:29:34,799
this function commute with the shift

597
00:29:34,799 --> 00:29:37,200
function transformation so if we apply

598
00:29:37,200 --> 00:29:39,360
the shift function and then SF we get

599
00:29:39,360 --> 00:29:41,779
the same result if we apply SF and then

600
00:29:41,779 --> 00:29:45,380
the shift function

601
00:29:45,779 --> 00:29:48,480
now why we focus on this particular

602
00:29:48,480 --> 00:29:51,000
functions well because we know that in

603
00:29:51,000 --> 00:29:52,020
the binary case we can actually

604
00:29:52,020 --> 00:29:54,779
construct a bijective function of this

605
00:29:54,779 --> 00:29:56,640
form for example if you have a look at

606
00:29:56,640 --> 00:29:59,760
the yarn thesis uh one example is the

607
00:29:59,760 --> 00:30:01,799
chi function so the chi function Works

608
00:30:01,799 --> 00:30:04,200
takes three input repeat in input and

609
00:30:04,200 --> 00:30:05,820
return a single biting out to Define it

610
00:30:05,820 --> 00:30:09,360
this way and ski over F2 to the N is

611
00:30:09,360 --> 00:30:12,720
invertible if n is odd this is not the

612
00:30:12,720 --> 00:30:14,580
only example there are many many other

613
00:30:14,580 --> 00:30:18,000
examples Indian cases for example the

614
00:30:18,000 --> 00:30:19,679
second one is invertible if n is

615
00:30:19,679 --> 00:30:21,659
complying with three and the last one is

616
00:30:21,659 --> 00:30:23,640
always invertible for each and uh

617
00:30:23,640 --> 00:30:26,600
greater equivalent six

618
00:30:27,620 --> 00:30:31,200
so in our case uh we focus on the prime

619
00:30:31,200 --> 00:30:34,140
feeds so we assume P to be a prime and

620
00:30:34,140 --> 00:30:36,179
at least equal to 3 and F to be a

621
00:30:36,179 --> 00:30:37,620
quadratic function that takes an input

622
00:30:37,620 --> 00:30:40,440
the M argument a return a single FP

623
00:30:40,440 --> 00:30:42,960
element so we have SF defined as before

624
00:30:42,960 --> 00:30:44,580
so we have a single Locker map and we

625
00:30:44,580 --> 00:30:47,700
Define uh all the output via it and we

626
00:30:47,700 --> 00:30:49,620
ask ourselves it is possible to find F

627
00:30:49,620 --> 00:30:52,200
for which SF is invertible and if yes if

628
00:30:52,200 --> 00:30:56,600
it is a case for any and and there we m

629
00:30:58,320 --> 00:30:59,940
so actually in the paper we just focus

630
00:30:59,940 --> 00:31:01,440
on the case in which m is equal to two

631
00:31:01,440 --> 00:31:03,240
or three

632
00:31:03,240 --> 00:31:05,520
and uh okay get stuck with necessary

633
00:31:05,520 --> 00:31:08,820
condition so we have f is a quadratic

634
00:31:08,820 --> 00:31:11,340
function from FP to them to FP so that

635
00:31:11,340 --> 00:31:14,760
one is the algebraic representation so

636
00:31:14,760 --> 00:31:16,799
the interesting point is that the

637
00:31:16,799 --> 00:31:18,840
indices of alpha are exactly the

638
00:31:18,840 --> 00:31:21,840
exponent of x 0 x 1 and so on

639
00:31:21,840 --> 00:31:23,460
and in the following I'm going to Define

640
00:31:23,460 --> 00:31:26,100
Alpha d as the sum of the coefficient of

641
00:31:26,100 --> 00:31:27,779
the monomial of the greedy so for

642
00:31:27,779 --> 00:31:29,159
example Alpha 2 is the sum of the

643
00:31:29,159 --> 00:31:31,320
coefficient of the monometric 2 and

644
00:31:31,320 --> 00:31:33,419
Alpha 1 is the sum of the coefficient of

645
00:31:33,419 --> 00:31:35,460
the monomial category one

646
00:31:35,460 --> 00:31:37,020
so necessary requirement for

647
00:31:37,020 --> 00:31:39,659
invertibility is that Alpha 2 is equal

648
00:31:39,659 --> 00:31:41,580
to 0 and Alpha 1 is different from

649
00:31:41,580 --> 00:31:42,600
theorem

650
00:31:42,600 --> 00:31:46,500
why well very simple so if alpha alpha 2

651
00:31:46,500 --> 00:31:48,779
and Alpha 1 are equal to zero then if we

652
00:31:48,779 --> 00:31:52,500
apply F to x x and so on this o is equal

653
00:31:52,500 --> 00:31:55,440
to F zero zero zero so it's very easy to

654
00:31:55,440 --> 00:31:56,640
set up a collision

655
00:31:56,640 --> 00:31:58,980
if Alpha 2 is different from zero then

656
00:31:58,980 --> 00:32:02,220
again we apply F to the same input we

657
00:32:02,220 --> 00:32:04,320
get a function of degree two we know

658
00:32:04,320 --> 00:32:05,880
that this function is not invertible so

659
00:32:05,880 --> 00:32:09,020
we can set up Collision

660
00:32:09,659 --> 00:32:11,340
okay

661
00:32:11,340 --> 00:32:14,000
uh so first result

662
00:32:14,000 --> 00:32:17,880
let the prime let m equal to 2 and then

663
00:32:17,880 --> 00:32:20,100
at least equal to two so f is a

664
00:32:20,100 --> 00:32:23,100
quadratic function as before from fp2 to

665
00:32:23,100 --> 00:32:24,840
fp2 to FP

666
00:32:24,840 --> 00:32:27,539
so if n is equal to 2 then SF is

667
00:32:27,539 --> 00:32:29,820
invertible if and log if the function f

668
00:32:29,820 --> 00:32:31,679
as this particular form which is

669
00:32:31,679 --> 00:32:34,640
basically a limousine alignment scheme

670
00:32:34,640 --> 00:32:38,640
where gamma zero must be different from

671
00:32:38,640 --> 00:32:42,059
plus and minus Gamma 1 and if n is at

672
00:32:42,059 --> 00:32:44,039
least equal to 3 then s f is never

673
00:32:44,039 --> 00:32:45,840
invertible

674
00:32:45,840 --> 00:32:48,419
so the first part you can see that you

675
00:32:48,419 --> 00:32:49,860
can have a look to the paper I'm just

676
00:32:49,860 --> 00:32:52,200
going to briefly explain the proof of

677
00:32:52,200 --> 00:32:54,840
the second part

678
00:32:54,840 --> 00:32:57,600
and the idea is quite simple

679
00:32:57,600 --> 00:33:00,240
um so if we consider Collision of this

680
00:33:00,240 --> 00:33:04,500
form so 0 x 0 x 1 and 0 x 0 Prime and X1

681
00:33:04,500 --> 00:33:05,700
Prime

682
00:33:05,700 --> 00:33:07,500
if you have a collision of this one we

683
00:33:07,500 --> 00:33:09,539
can generalize it over FP to then for

684
00:33:09,539 --> 00:33:13,320
each scanner in which way we just append

685
00:33:13,320 --> 00:33:14,760
zeros

686
00:33:14,760 --> 00:33:18,600
and the reason is that both equities are

687
00:33:18,600 --> 00:33:21,860
satisfied by this pre-equality on F so

688
00:33:21,860 --> 00:33:24,840
if we have a collision of that form of

689
00:33:24,840 --> 00:33:27,240
rfp23 we can generalize generalize it

690
00:33:27,240 --> 00:33:29,580
for over FP to 10.

691
00:33:29,580 --> 00:33:31,679
so this means that we don't have to

692
00:33:31,679 --> 00:33:33,059
consider the generic case we can just

693
00:33:33,059 --> 00:33:35,880
work over n equal to 3 and look for

694
00:33:35,880 --> 00:33:38,779
Collision of this form

695
00:33:39,299 --> 00:33:42,960
and we also know that we have two these

696
00:33:42,960 --> 00:33:45,360
two requirements on the Alphas

697
00:33:45,360 --> 00:33:47,399
so in the paper we consider all possible

698
00:33:47,399 --> 00:33:50,700
Alphas that satisfy these two conditions

699
00:33:50,700 --> 00:33:53,519
and repurpose Collision for example for

700
00:33:53,519 --> 00:33:55,799
Alpha to zero and Alpha One One

701
00:33:55,799 --> 00:33:57,840
different from zero we have this

702
00:33:57,840 --> 00:34:00,320
vertical equation

703
00:34:00,320 --> 00:34:03,559
in the paper

704
00:34:05,340 --> 00:34:08,099
okay now for m equal three and N equal

705
00:34:08,099 --> 00:34:10,500
three or four uh there are function f

706
00:34:10,500 --> 00:34:12,839
for which SF is invertible for example

707
00:34:12,839 --> 00:34:15,719
in the first case uh

708
00:34:15,719 --> 00:34:17,520
we have a function that map free

709
00:34:17,520 --> 00:34:20,159
argument free element from FB to FB and

710
00:34:20,159 --> 00:34:22,379
SF is invertible and in the second case

711
00:34:22,379 --> 00:34:24,899
as f is the final FP to the four and

712
00:34:24,899 --> 00:34:27,119
again is impractical

713
00:34:27,119 --> 00:34:29,520
you can find other example in the paper

714
00:34:29,520 --> 00:34:31,679
what is more interesting in the case m

715
00:34:31,679 --> 00:34:33,780
equals three and then at least equal to

716
00:34:33,780 --> 00:34:36,960
5. so in this case if f is a quadratic

717
00:34:36,960 --> 00:34:40,739
function then SF is never invertible

718
00:34:40,739 --> 00:34:42,359
so the proof is similar to the previous

719
00:34:42,359 --> 00:34:44,520
case but this is very interesting

720
00:34:44,520 --> 00:34:46,800
because it is exactly the opposite of of

721
00:34:46,800 --> 00:34:48,659
what happens in the binary case so in

722
00:34:48,659 --> 00:34:50,099
the binary case we know that the key

723
00:34:50,099 --> 00:34:52,800
function the chi function provide an

724
00:34:52,800 --> 00:34:55,199
invertible function over F2 to 10 but in

725
00:34:55,199 --> 00:34:56,879
the implying case it's not possible to

726
00:34:56,879 --> 00:34:59,339
set up a shifting variant lifting

727
00:34:59,339 --> 00:35:01,500
function that is invertible

728
00:35:01,500 --> 00:35:04,760
but it's very interesting

729
00:35:04,920 --> 00:35:07,260
okay so the last thing a concrete

730
00:35:07,260 --> 00:35:11,280
application so we modify Poseidon you

731
00:35:11,280 --> 00:35:12,900
know by using this result in order to

732
00:35:12,900 --> 00:35:15,839
improve the efficiency so Poseidon is a

733
00:35:15,839 --> 00:35:18,300
sponge function proposed for zero

734
00:35:18,300 --> 00:35:19,140
knowledge

735
00:35:19,140 --> 00:35:21,000
the Poseidon internal permutation is

736
00:35:21,000 --> 00:35:22,740
defined in this way so we have around

737
00:35:22,740 --> 00:35:25,640
with Google

738
00:35:26,579 --> 00:35:28,680
so we found going too much in the

739
00:35:28,680 --> 00:35:31,380
details so the Xbox is a power map where

740
00:35:31,380 --> 00:35:32,880
the exponent must be copying with P

741
00:35:32,880 --> 00:35:35,180
minus one in order to to be invertible

742
00:35:35,180 --> 00:35:37,440
linearly register multiplication with

743
00:35:37,440 --> 00:35:40,200
MTS Matrix and the number of rounds are

744
00:35:40,200 --> 00:35:42,420
eight with the extent around so six plus

745
00:35:42,420 --> 00:35:44,640
two of security matching and the number

746
00:35:44,640 --> 00:35:46,020
of count of the push around is

747
00:35:46,020 --> 00:35:49,940
proportional to log tfp

748
00:35:51,119 --> 00:35:53,280
now the internal round are crucial for

749
00:35:53,280 --> 00:35:54,920
increasing the degree

750
00:35:54,920 --> 00:35:57,720
and the cost of the internal ground is

751
00:35:57,720 --> 00:35:59,579
uh okay the number of the internal

752
00:35:59,579 --> 00:36:02,040
account times the cost of computing x to

753
00:36:02,040 --> 00:36:04,619
the power of T so approximately two

754
00:36:04,619 --> 00:36:08,400
times log P of B and this uh cost is

755
00:36:08,400 --> 00:36:11,900
independent of D so the size of the feed

756
00:36:11,900 --> 00:36:14,579
the extent around are necessary to

757
00:36:14,579 --> 00:36:16,200
guarantee security against statistical

758
00:36:16,200 --> 00:36:19,079
packs and here the cost depends on tier

759
00:36:19,079 --> 00:36:22,140
now if these like 12 or 16 the cost of

760
00:36:22,140 --> 00:36:24,480
the exam account could be also higher

761
00:36:24,480 --> 00:36:26,579
than the cost of the intern around so

762
00:36:26,579 --> 00:36:29,579
this is not very nice so what we try

763
00:36:29,579 --> 00:36:31,380
what we did was to

764
00:36:31,380 --> 00:36:34,140
sorry modify the external ground we're

765
00:36:34,140 --> 00:36:36,839
reducing the reducing for reducing the

766
00:36:36,839 --> 00:36:39,420
total cost so what we try is to try to

767
00:36:39,420 --> 00:36:41,880
reduce the factor that multiplies uh

768
00:36:41,880 --> 00:36:43,980
without decreasing the security

769
00:36:43,980 --> 00:36:47,160
so the original idea was to have a local

770
00:36:47,160 --> 00:36:49,440
map and by using this locking map to set

771
00:36:49,440 --> 00:36:52,140
up a log in a layer over to FP to the N

772
00:36:52,140 --> 00:36:54,720
but as we saw this is not possible

773
00:36:54,720 --> 00:36:57,900
because we cannot get any vertical log

774
00:36:57,900 --> 00:36:59,160
in a layer

775
00:36:59,160 --> 00:37:02,520
so what we did is just to use as boxes

776
00:37:02,520 --> 00:37:05,220
over fp22 so we Define the state to be

777
00:37:05,220 --> 00:37:07,440
an even number and we defined the inog

778
00:37:07,440 --> 00:37:09,060
linear layer as the concatenation of s

779
00:37:09,060 --> 00:37:11,700
boxes over fp22 so that's because it's

780
00:37:11,700 --> 00:37:13,980
just a concatenation of S Prime A and S

781
00:37:13,980 --> 00:37:17,520
Prime S Prime is a lemastic construction

782
00:37:17,520 --> 00:37:20,760
and a is an affine map that aims to

783
00:37:20,760 --> 00:37:22,320
destroy the environment space of the

784
00:37:22,320 --> 00:37:23,839
Legacy

785
00:37:23,839 --> 00:37:26,400
and because of this nominal layer is

786
00:37:26,400 --> 00:37:29,400
demodification

787
00:37:30,119 --> 00:37:31,680
so you can find more details about

788
00:37:31,680 --> 00:37:33,780
Neptune so this modified version of

789
00:37:33,780 --> 00:37:35,880
Poseidon in the paper so the different

790
00:37:35,880 --> 00:37:37,980
linear layer the explanation of the

791
00:37:37,980 --> 00:37:41,280
round and so on but as you can see we

792
00:37:41,280 --> 00:37:43,200
were able to reduce the cost the

793
00:37:43,200 --> 00:37:44,820
multiplicative complexity of Poseidon

794
00:37:44,820 --> 00:37:46,640
for example for T equals 16

795
00:37:46,640 --> 00:37:50,040
the cost of Poseidon is approximately 65

796
00:37:50,040 --> 00:37:54,200
more than the cost of Neptune

797
00:37:56,099 --> 00:37:58,140
okay that's all from my side so I'm just

798
00:37:58,140 --> 00:38:00,240
going to summarize and to propose some

799
00:38:00,240 --> 00:38:01,680
open problems

800
00:38:01,680 --> 00:38:05,339
so P when p is a prime

801
00:38:05,339 --> 00:38:07,140
um if you have a quadratic function from

802
00:38:07,140 --> 00:38:09,480
FP to them to FP

803
00:38:09,480 --> 00:38:12,060
then the shifting bind lifting function

804
00:38:12,060 --> 00:38:15,240
as F of f p to then is not inval in

805
00:38:15,240 --> 00:38:17,520
these three cases so m equal 1 and and

806
00:38:17,520 --> 00:38:20,040
bigger equal than one m equal to or n

807
00:38:20,040 --> 00:38:22,440
big or equal than three m equals three

808
00:38:22,440 --> 00:38:25,380
and then bigger equal than five

809
00:38:25,380 --> 00:38:28,740
so we propose this open conjecture that

810
00:38:28,740 --> 00:38:31,260
given f as before SF is never impactable

811
00:38:31,260 --> 00:38:33,540
is n is bigger equal than 2 times M

812
00:38:33,540 --> 00:38:35,640
minus one so you can see that the three

813
00:38:35,640 --> 00:38:38,099
cases before are satisfied

814
00:38:38,099 --> 00:38:40,260
but we are not able to prove this

815
00:38:40,260 --> 00:38:42,359
contraction for the case m equals four

816
00:38:42,359 --> 00:38:44,099
or more

817
00:38:44,099 --> 00:38:46,500
we left the open problem to construct

818
00:38:46,500 --> 00:38:49,320
new invertible no linear function over

819
00:38:49,320 --> 00:38:52,099
FP to the end that minimize their

820
00:38:52,099 --> 00:38:55,200
complexity and we suggest to exploit

821
00:38:55,200 --> 00:38:57,420
these new nominal layers for future

822
00:38:57,420 --> 00:39:00,780
design of NPC zero knowledge or

823
00:39:00,780 --> 00:39:02,880
rheumomorphic uh

824
00:39:02,880 --> 00:39:04,920
friendly symmetic scheme

825
00:39:04,920 --> 00:39:08,160
thank you very much for your attention

826
00:39:08,160 --> 00:39:11,779
okay thank you

827
00:39:12,320 --> 00:39:14,760
so thank you Lorenzo do we have any

828
00:39:14,760 --> 00:39:18,800
questions in the room in Kobe

829
00:39:19,680 --> 00:39:22,740
what about the chat uh you do have a

830
00:39:22,740 --> 00:39:25,399
question okay

831
00:39:25,880 --> 00:39:28,980
can you show me the conjecture

832
00:39:28,980 --> 00:39:34,020
so so do you uh for the for your proof

833
00:39:34,020 --> 00:39:36,780
for the first three cases you mainly

834
00:39:36,780 --> 00:39:39,960
found uh they are cleans if we choose

835
00:39:39,960 --> 00:39:44,160
the parameters in this way right so

836
00:39:44,160 --> 00:39:47,820
what's the difficulty to extend such a

837
00:39:47,820 --> 00:39:51,000
approach to for the case uh like

838
00:39:51,000 --> 00:39:54,119
conjecture the m is large and any slot

839
00:39:54,119 --> 00:39:56,280
the main Optical so it's difficult to

840
00:39:56,280 --> 00:39:58,920
construct some cleans or

841
00:39:58,920 --> 00:40:00,540
or something like that

842
00:40:00,540 --> 00:40:02,579
yeah

843
00:40:02,579 --> 00:40:05,820
so for n equal five we mostly use this

844
00:40:05,820 --> 00:40:08,099
approach so to work like with any code

845
00:40:08,099 --> 00:40:09,599
five and then to extend the Collision

846
00:40:09,599 --> 00:40:11,579
but in some cases we cannot do that we

847
00:40:11,579 --> 00:40:13,980
have to find a collision over the entire

848
00:40:13,980 --> 00:40:15,960
state so it's not a structured no

849
00:40:15,960 --> 00:40:18,119
exactly okay there are a few cases but

850
00:40:18,119 --> 00:40:20,160
uh it could happen Okay thank you very

851
00:40:20,160 --> 00:40:22,279
much

852
00:40:23,040 --> 00:40:26,700
thanks uh do we have anything in Beijing

853
00:40:26,700 --> 00:40:29,598
or in the chat

854
00:40:32,820 --> 00:40:36,660
yep okay well then let's thank Lorenzo

855
00:40:36,660 --> 00:40:39,740
and all the speakers of the session

856
00:40:44,820 --> 00:40:47,460
and that clock is a bit ahead of time

857
00:40:47,460 --> 00:40:50,579
it's actually more like 41 so I think we

858
00:40:50,579 --> 00:40:52,920
can still meet at 450 for the next

859
00:40:52,920 --> 00:40:54,359
session

860
00:40:54,359 --> 00:40:56,839
thanks

