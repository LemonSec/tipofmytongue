1
00:00:00,000 --> 00:00:01,500
okay

2
00:00:01,500 --> 00:00:03,780
so the second session is afternoon is

3
00:00:03,780 --> 00:00:06,720
about a photographic applications the

4
00:00:06,720 --> 00:00:09,120
first paper is titled supporting

5
00:00:09,120 --> 00:00:12,480
telegrams end-to-end encryption and also

6
00:00:12,480 --> 00:00:15,360
the north cochlear teeth Jordan Eason

7
00:00:15,360 --> 00:00:17,279
and Ashland

8
00:00:17,279 --> 00:00:19,140
children will be able to talk so let's

9
00:00:19,140 --> 00:00:20,820
welcome

10
00:00:20,820 --> 00:00:23,160
thank you for the introduction so the

11
00:00:23,160 --> 00:00:24,960
title of this talk is about intelligence

12
00:00:24,960 --> 00:00:26,939
end-to-end encryption this is a joint

13
00:00:26,939 --> 00:00:29,300
walk with

14
00:00:29,640 --> 00:00:31,800
the talk will be divided into three

15
00:00:31,800 --> 00:00:33,780
parts in the first part I'll give some

16
00:00:33,780 --> 00:00:36,239
motivation as to why we chose to study

17
00:00:36,239 --> 00:00:39,000
the security protocol of empty of

18
00:00:39,000 --> 00:00:42,600
Telecom then I will briefly discuss the

19
00:00:42,600 --> 00:00:44,879
implementation of the security protocol

20
00:00:44,879 --> 00:00:48,239
of Telecom and finally I will give two

21
00:00:48,239 --> 00:00:50,760
subversion attacks on the protocol and

22
00:00:50,760 --> 00:00:54,980
discuss the analysis so as you may know

23
00:00:54,980 --> 00:00:58,320
telegram is a very popular chatting app

24
00:00:58,320 --> 00:01:01,800
with over 500 million active users which

25
00:01:01,800 --> 00:01:03,780
claims to be faster and safer than its

26
00:01:03,780 --> 00:01:04,819
alternative

27
00:01:04,819 --> 00:01:07,920
and uses its own on-board security

28
00:01:07,920 --> 00:01:11,460
protocol Mt portal and however not a lot

29
00:01:11,460 --> 00:01:13,500
of existing analysis exist on the

30
00:01:13,500 --> 00:01:18,000
subject which so telegram offers two

31
00:01:18,000 --> 00:01:20,460
conversation mods the cloud chart and

32
00:01:20,460 --> 00:01:23,340
the secret chart in the cloud chart it

33
00:01:23,340 --> 00:01:25,020
offers a client to server encryption

34
00:01:25,020 --> 00:01:27,479
that stores the encrypted messages in

35
00:01:27,479 --> 00:01:29,939
the server and where the chat install is

36
00:01:29,939 --> 00:01:32,460
accessible across all devices and

37
00:01:32,460 --> 00:01:35,159
contrast in the secret chat it uses a

38
00:01:35,159 --> 00:01:36,780
end-to-end encryption between the cloud

39
00:01:36,780 --> 00:01:39,780
the clients and are storing um stores

40
00:01:39,780 --> 00:01:43,500
the messages in the local devices only

41
00:01:43,500 --> 00:01:46,079
so what is known up to now about Mt

42
00:01:46,079 --> 00:01:48,420
portal security so the first version of

43
00:01:48,420 --> 00:01:50,820
Mt portal was actually shown to be not

44
00:01:50,820 --> 00:01:54,000
in CCA secure by Jacobson and Orlando in

45
00:01:54,000 --> 00:01:57,119
2016. this made the telegram team

46
00:01:57,119 --> 00:01:59,579
revisers came into the known current

47
00:01:59,579 --> 00:02:02,220
protocol Mt Proto 2.0 which they claim

48
00:02:02,220 --> 00:02:03,600
is in CCA

49
00:02:03,600 --> 00:02:07,200
indeed in 2022 Albert Al showed that Mt

50
00:02:07,200 --> 00:02:10,739
Porto 2.0 is an in CCA but it requires

51
00:02:10,739 --> 00:02:12,599
some non-standard assumption on the

52
00:02:12,599 --> 00:02:13,860
building blocks

53
00:02:13,860 --> 00:02:17,780
so um however and moreover

54
00:02:17,780 --> 00:02:20,580
known we don't know much about practical

55
00:02:20,580 --> 00:02:22,860
attacks or especially about sublossion

56
00:02:22,860 --> 00:02:24,720
attacks

57
00:02:24,720 --> 00:02:26,520
so what is the motivation behind

58
00:02:26,520 --> 00:02:28,980
studying subversion attacks so following

59
00:02:28,980 --> 00:02:30,720
Snowden revelation we actually learned

60
00:02:30,720 --> 00:02:33,180
that uh Master surveillance has been

61
00:02:33,180 --> 00:02:35,879
taken care of being conducted on the

62
00:02:35,879 --> 00:02:38,940
Internet by governmental agencies so

63
00:02:38,940 --> 00:02:40,800
encrypting the data actually might not

64
00:02:40,800 --> 00:02:42,900
be enough anymore as agencies can inject

65
00:02:42,900 --> 00:02:45,300
back those into secure implementation by

66
00:02:45,300 --> 00:02:47,940
manipulating the encryption algorithms

67
00:02:47,940 --> 00:02:50,879
subversion attacks actually date back to

68
00:02:50,879 --> 00:02:52,860
the 90s and were first introduced by

69
00:02:52,860 --> 00:02:54,900
Young and young under the name of

70
00:02:54,900 --> 00:02:57,120
cryptography they defined it as an

71
00:02:57,120 --> 00:02:59,280
algorithm whose output is in this

72
00:02:59,280 --> 00:03:01,440
computational indistinguishable from the

73
00:03:01,440 --> 00:03:04,140
output of the undemodified algorithm and

74
00:03:04,140 --> 00:03:05,879
also that you leak the key through its

75
00:03:05,879 --> 00:03:07,739
out actually the secret key to its

76
00:03:07,739 --> 00:03:10,680
output somehow later on belari at all in

77
00:03:10,680 --> 00:03:12,959
2014 actually introduced the notion of

78
00:03:12,959 --> 00:03:15,480
algorithm substitution attacks ASA

79
00:03:15,480 --> 00:03:17,700
against randomized encryption schemes

80
00:03:17,700 --> 00:03:20,640
these attacks relied on the randomness

81
00:03:20,640 --> 00:03:23,519
of the generated in the encryption and

82
00:03:23,519 --> 00:03:26,580
walking against a subclass of randomized

83
00:03:26,580 --> 00:03:29,340
scheme called coin injective

84
00:03:29,340 --> 00:03:31,319
so our contribution in this vocal

85
00:03:31,319 --> 00:03:34,140
twofold first we propose a first partial

86
00:03:34,140 --> 00:03:36,180
key recovery algorithm substitution

87
00:03:36,180 --> 00:03:38,340
attack on the secret chat mode of empty

88
00:03:38,340 --> 00:03:41,159
portal telegram this attack exploits the

89
00:03:41,159 --> 00:03:42,780
random padding and its length during the

90
00:03:42,780 --> 00:03:44,879
encryption and works on the desktop

91
00:03:44,879 --> 00:03:49,319
client and TD lib libraries sorry used

92
00:03:49,319 --> 00:03:52,500
by the third party clients the second

93
00:03:52,500 --> 00:03:55,440
contribution is the how we can take the

94
00:03:55,440 --> 00:03:57,360
subversion attack and affert it by

95
00:03:57,360 --> 00:03:59,519
modifying the current version

96
00:03:59,519 --> 00:04:02,519
so now I will go into more details about

97
00:04:02,519 --> 00:04:05,159
what is Mt portal 2.0 for secret chat

98
00:04:05,159 --> 00:04:08,459
what is it its implementation so empty

99
00:04:08,459 --> 00:04:11,400
portal 2.0 can be seen can be seen as

100
00:04:11,400 --> 00:04:13,620
two parts first we have a key generation

101
00:04:13,620 --> 00:04:16,680
algorithm that negotiates between the

102
00:04:16,680 --> 00:04:21,120
clients a master key of 2048 bits and

103
00:04:21,120 --> 00:04:24,380
then the second part is an encryption

104
00:04:24,380 --> 00:04:28,320
pass which consists of three parts so in

105
00:04:28,320 --> 00:04:29,940
this setting we have a payload X Prime

106
00:04:29,940 --> 00:04:32,280
which is the message and some Associated

107
00:04:32,280 --> 00:04:34,259
data the first phase is an

108
00:04:34,259 --> 00:04:38,280
authentication phase using a 256 bit key

109
00:04:38,280 --> 00:04:40,199
derived from the master key

110
00:04:40,199 --> 00:04:43,699
then its output which is attack T is

111
00:04:43,699 --> 00:04:46,440
inputted in key derivation function

112
00:04:46,440 --> 00:04:50,880
along with 576 bits of the master key to

113
00:04:50,880 --> 00:04:54,000
create a key l and an IV that is used in

114
00:04:54,000 --> 00:04:56,759
the IV based encryption to encrypt the

115
00:04:56,759 --> 00:04:59,340
payload this produces a ciphertext where

116
00:04:59,340 --> 00:05:02,699
the out the complete output of the

117
00:05:02,699 --> 00:05:05,340
protocol is the ciphertext C the tacti

118
00:05:05,340 --> 00:05:09,540
and some fingerprint F of the shared key

119
00:05:09,540 --> 00:05:12,060
K that is used to detect bugs in the

120
00:05:12,060 --> 00:05:13,979
software implementation

121
00:05:13,979 --> 00:05:16,919
so in order to actually understand our

122
00:05:16,919 --> 00:05:19,220
attack we'll we will have to

123
00:05:19,220 --> 00:05:22,139
dive into the um how the payload is

124
00:05:22,139 --> 00:05:24,419
constructed since the randomness Source

125
00:05:24,419 --> 00:05:26,880
comes from the payload so the payload

126
00:05:26,880 --> 00:05:29,280
first defines what a full message is the

127
00:05:29,280 --> 00:05:31,680
full message is just some Associated

128
00:05:31,680 --> 00:05:34,199
data with the message and the payload is

129
00:05:34,199 --> 00:05:36,780
defined as the full message uh

130
00:05:36,780 --> 00:05:39,720
concatenated with a random padding X

131
00:05:39,720 --> 00:05:40,680
Prime

132
00:05:40,680 --> 00:05:42,900
in our attack we'll use three of these

133
00:05:42,900 --> 00:05:45,660
fields so the in sequence number out

134
00:05:45,660 --> 00:05:47,340
sequence number found in the full

135
00:05:47,340 --> 00:05:49,800
message will be used to derive the state

136
00:05:49,800 --> 00:05:54,419
for our attack and the the size of X

137
00:05:54,419 --> 00:05:57,180
Prime which we call Sigma Prime is the

138
00:05:57,180 --> 00:06:00,360
is the length of the padded message is

139
00:06:00,360 --> 00:06:03,180
indeed random and divisible by 16 this

140
00:06:03,180 --> 00:06:05,160
will be the main vulnerability of our

141
00:06:05,160 --> 00:06:07,800
attack and lastly the random funding

142
00:06:07,800 --> 00:06:11,580
themselves which is uh 12 to 1024 random

143
00:06:11,580 --> 00:06:14,100
bytes used to improve the first attack

144
00:06:14,100 --> 00:06:15,600
so

145
00:06:15,600 --> 00:06:18,419
the since the main vulnerability is

146
00:06:18,419 --> 00:06:21,300
actually the padding length we uh we

147
00:06:21,300 --> 00:06:22,800
actually looked into the code of

148
00:06:22,800 --> 00:06:25,259
telegram and we found that the padding

149
00:06:25,259 --> 00:06:27,060
lamps sampled differently for each of

150
00:06:27,060 --> 00:06:29,819
the clients in this walk we concentrate

151
00:06:29,819 --> 00:06:32,100
on the desktop client and the daily lib

152
00:06:32,100 --> 00:06:33,840
Library so how does the original

153
00:06:33,840 --> 00:06:36,060
sampling works for a message of Sigma

154
00:06:36,060 --> 00:06:39,900
bytes so it consists of first Computing

155
00:06:39,900 --> 00:06:42,479
some deterministing function G of Sigma

156
00:06:42,479 --> 00:06:45,960
in 16 byte blocks then adding a random

157
00:06:45,960 --> 00:06:49,380
number between 0 and 15v alternatively

158
00:06:49,380 --> 00:06:52,100
what we can do is just simply

159
00:06:52,100 --> 00:06:55,280
sample Sigma Prime mod 16

160
00:06:55,280 --> 00:06:57,960
randomly and then take Sigma Prime to be

161
00:06:57,960 --> 00:07:01,020
close to G of Sigma in 16 byte block

162
00:07:01,020 --> 00:07:03,419
the second sampling actually will prove

163
00:07:03,419 --> 00:07:05,819
useful for our attack will need it and

164
00:07:05,819 --> 00:07:09,240
we Define a padding rule pad MV as well

165
00:07:09,240 --> 00:07:11,580
m is added to a message with lamping 16

166
00:07:11,580 --> 00:07:15,300
byte blocks is exactly remote 16. so now

167
00:07:15,300 --> 00:07:17,639
we are ready to introduce our subversion

168
00:07:17,639 --> 00:07:18,300
attack

169
00:07:18,300 --> 00:07:20,699
so in the normal setting we have two

170
00:07:20,699 --> 00:07:22,740
users who aim to communicate securely

171
00:07:22,740 --> 00:07:24,780
they have an encryption algorithm and an

172
00:07:24,780 --> 00:07:27,419
encryption algorithm the first user uses

173
00:07:27,419 --> 00:07:30,599
a key a negotiated keyke some Associated

174
00:07:30,599 --> 00:07:33,479
data a so message M and IV and a state

175
00:07:33,479 --> 00:07:36,180
to encrypt his message then he sends it

176
00:07:36,180 --> 00:07:38,060
the ciphertext to the other

177
00:07:38,060 --> 00:07:40,740
user who then decrypt it using the same

178
00:07:40,740 --> 00:07:43,919
key in the supported version we actually

179
00:07:43,919 --> 00:07:47,220
uh now have a subversion algorithm that

180
00:07:47,220 --> 00:07:49,020
uses the same parameters and an

181
00:07:49,020 --> 00:07:53,039
additional K adversary secret key Ka it

182
00:07:53,039 --> 00:07:56,060
then sends the ciphertext to the other

183
00:07:56,060 --> 00:07:59,819
client and we require that this

184
00:07:59,819 --> 00:08:03,780
ciphertext will be decryptable with the

185
00:08:03,780 --> 00:08:05,520
normal decryption algorithm with the

186
00:08:05,520 --> 00:08:07,620
same Key by an honest client and also

187
00:08:07,620 --> 00:08:10,400
look indistinguishable from a normal

188
00:08:10,400 --> 00:08:13,560
cycle text moreover we require the

189
00:08:13,560 --> 00:08:17,460
subversion algorithm to uh um to try and

190
00:08:17,460 --> 00:08:19,680
extract the key ones has enough of this

191
00:08:19,680 --> 00:08:21,360
subverted ciphertext

192
00:08:21,360 --> 00:08:23,340
so in essence the subversion has two

193
00:08:23,340 --> 00:08:24,479
goals

194
00:08:24,479 --> 00:08:27,120
the first goal is to be undetected which

195
00:08:27,120 --> 00:08:28,620
means that as long as the client or the

196
00:08:28,620 --> 00:08:30,479
server that tries to detect it does not

197
00:08:30,479 --> 00:08:32,700
have access to the adversary key the

198
00:08:32,700 --> 00:08:35,039
outputs of the real encryption and the

199
00:08:35,039 --> 00:08:36,059
supported encryption are

200
00:08:36,059 --> 00:08:38,520
indistinguishable and to have a key

201
00:08:38,520 --> 00:08:41,219
recovery algorithm which means that

202
00:08:41,219 --> 00:08:43,320
um when we have enough disciple attacks

203
00:08:43,320 --> 00:08:44,760
we can actually recover part of the key

204
00:08:44,760 --> 00:08:47,300
or all of the key if possible

205
00:08:47,300 --> 00:08:49,980
additionally we say that subversion

206
00:08:49,980 --> 00:08:52,680
algorithm is stateless if it does not

207
00:08:52,680 --> 00:08:55,320
use the if no state was used during the

208
00:08:55,320 --> 00:08:57,360
the algorithm and otherwise we say it's

209
00:08:57,360 --> 00:09:00,240
stateful so the key idea of our attack

210
00:09:00,240 --> 00:09:03,000
actually comes from the work of belaret

211
00:09:03,000 --> 00:09:05,519
and in 2015. they present a very simple

212
00:09:05,519 --> 00:09:07,560
subversion attack for randomized IV

213
00:09:07,560 --> 00:09:09,600
based encryption scheme that relies on a

214
00:09:09,600 --> 00:09:13,440
prfff with output space n plus one that

215
00:09:13,440 --> 00:09:16,200
is the well n is the size of the key so

216
00:09:16,200 --> 00:09:18,420
the idea of the attack is actually to

217
00:09:18,420 --> 00:09:20,820
sample an IV until a ciphertext

218
00:09:20,820 --> 00:09:23,959
satisfies some property which is that

219
00:09:23,959 --> 00:09:28,260
the prf on the adversary TKA on the

220
00:09:28,260 --> 00:09:30,899
ciphertext outputs a bit and an index

221
00:09:30,899 --> 00:09:33,779
where that corresponds exactly to some

222
00:09:33,779 --> 00:09:36,240
in some bit of the key

223
00:09:36,240 --> 00:09:38,700
uh once we have of course once we have

224
00:09:38,700 --> 00:09:41,040
enough of these subverted ciphertext we

225
00:09:41,040 --> 00:09:43,680
can just extract from the ciphertext key

226
00:09:43,680 --> 00:09:45,660
bit by using the prf

227
00:09:45,660 --> 00:09:47,880
so this we can see that these attacks is

228
00:09:47,880 --> 00:09:49,980
actually stateless but it can fail on a

229
00:09:49,980 --> 00:09:53,820
specific key bit so I will to better

230
00:09:53,820 --> 00:09:56,519
mimic the actual behavior of empty

231
00:09:56,519 --> 00:09:58,380
portal our setting will differ from

232
00:09:58,380 --> 00:10:00,779
belaret Island two main points

233
00:10:00,779 --> 00:10:03,779
uh empty portal 2.0 will maintain the

234
00:10:03,779 --> 00:10:05,940
key a state for each key therefore we

235
00:10:05,940 --> 00:10:07,560
allow the subversion to be stateful with

236
00:10:07,560 --> 00:10:09,959
that state and we assume that the

237
00:10:09,959 --> 00:10:12,120
command communicating parties are honest

238
00:10:12,120 --> 00:10:14,100
and interested in Secure communication

239
00:10:14,100 --> 00:10:16,200
therefore we assume that the key is

240
00:10:16,200 --> 00:10:18,720
generated at random we present two

241
00:10:18,720 --> 00:10:20,820
subversion attack actually on Mt portal

242
00:10:20,820 --> 00:10:23,160
2.0 the first attack relies on an

243
00:10:23,160 --> 00:10:24,480
additional length preserving

244
00:10:24,480 --> 00:10:27,000
deterministic encryption scheme e

245
00:10:27,000 --> 00:10:29,580
so how does this subversion work so it

246
00:10:29,580 --> 00:10:33,060
gets uh adversely TKA some key that we

247
00:10:33,060 --> 00:10:35,700
want to actually recover ke and message

248
00:10:35,700 --> 00:10:39,720
M and state Sigma first we use the new

249
00:10:39,720 --> 00:10:42,060
component e along with the key Ka to

250
00:10:42,060 --> 00:10:43,980
encrypt the key ke

251
00:10:43,980 --> 00:10:46,740
then we derive a padding length Len that

252
00:10:46,740 --> 00:10:50,220
is four bits of the encrypted key that

253
00:10:50,220 --> 00:10:52,320
depends on the state then we put the

254
00:10:52,320 --> 00:10:55,260
message using our new padding hole and

255
00:10:55,260 --> 00:10:57,779
we encrypt the message using the normal

256
00:10:57,779 --> 00:11:00,779
original encryption how do we recover

257
00:11:00,779 --> 00:11:04,500
now the the how do we call the key from

258
00:11:04,500 --> 00:11:06,720
the ciphertext so for every ciphertext

259
00:11:06,720 --> 00:11:08,760
that we gathered we can actually divide

260
00:11:08,760 --> 00:11:12,800
it by 16 mode 16 to recover the

261
00:11:12,800 --> 00:11:15,360
encrypted the key the four encrypted

262
00:11:15,360 --> 00:11:17,579
qubits then we join all the values

263
00:11:17,579 --> 00:11:20,459
together to form y of size n and we

264
00:11:20,459 --> 00:11:23,880
decrypt it using e and the adversary key

265
00:11:23,880 --> 00:11:27,240
Ka so it is not very difficult to see

266
00:11:27,240 --> 00:11:29,579
that as long as e secure both version

267
00:11:29,579 --> 00:11:31,019
the subverted version and the original

268
00:11:31,019 --> 00:11:33,779
version are indistinguishable moreover

269
00:11:33,779 --> 00:11:35,959
if we have more than K divided by 4

270
00:11:35,959 --> 00:11:38,760
queries the key recovery is successful

271
00:11:38,760 --> 00:11:40,140
with probability one

272
00:11:40,140 --> 00:11:42,959
however the maximum key bit stack we

273
00:11:42,959 --> 00:11:44,880
actually can recover is at most 400

274
00:11:44,880 --> 00:11:47,760
because we call that the key

275
00:11:47,760 --> 00:11:50,459
regeneration happens every 100 messages

276
00:11:50,459 --> 00:11:53,399
so since the adversary is interested in

277
00:11:53,399 --> 00:11:56,160
reading the messages he will need 576

278
00:11:56,160 --> 00:11:58,140
bit of the master key for the encryption

279
00:11:58,140 --> 00:11:59,480
pass

280
00:11:59,480 --> 00:12:02,339
and luckily for us we still have another

281
00:12:02,339 --> 00:12:04,320
source of Randomness which is the

282
00:12:04,320 --> 00:12:05,459
padding bits that have not been

283
00:12:05,459 --> 00:12:08,579
exploited so we improve our algorithm by

284
00:12:08,579 --> 00:12:10,980
using another prfff with output space

285
00:12:10,980 --> 00:12:13,740
Delta bits and a new adversary key a

286
00:12:13,740 --> 00:12:17,100
point and some parameter Tau that we

287
00:12:17,100 --> 00:12:19,620
will need for Simplicity so actually

288
00:12:19,620 --> 00:12:21,600
there's a typo here it should be on the

289
00:12:21,600 --> 00:12:24,000
second line Tau Tau plus three but it's

290
00:12:24,000 --> 00:12:26,700
not very important for the talk so the

291
00:12:26,700 --> 00:12:28,980
actually the second attack is uh almost

292
00:12:28,980 --> 00:12:31,440
identical to the first attack besides

293
00:12:31,440 --> 00:12:33,959
the encryption phase so in this

294
00:12:33,959 --> 00:12:36,420
algorithm we actually use the belaret AL

295
00:12:36,420 --> 00:12:39,720
2015 trick so instead of just encrypting

296
00:12:39,720 --> 00:12:42,980
normally we compute we compute the tag T

297
00:12:42,980 --> 00:12:47,459
until the prf on the new adversary Ka

298
00:12:47,459 --> 00:12:48,380
Prime

299
00:12:48,380 --> 00:12:51,480
lands on exactly

300
00:12:51,480 --> 00:12:55,860
um Delta new encrypted bits or some

301
00:12:55,860 --> 00:12:59,579
Maximum parameter s and we continue the

302
00:12:59,579 --> 00:13:01,740
original algorithm as normal

303
00:13:01,740 --> 00:13:03,720
and the key recovery of course is

304
00:13:03,720 --> 00:13:06,899
identical since we didn't change much

305
00:13:06,899 --> 00:13:10,320
okay so actually this attack offers some

306
00:13:10,320 --> 00:13:12,660
improvement first of all the heavy

307
00:13:12,660 --> 00:13:15,660
computation of the encryption phase G

308
00:13:15,660 --> 00:13:18,060
which is the kdf and E which is the IV

309
00:13:18,060 --> 00:13:20,579
based encryption are computed in in this

310
00:13:20,579 --> 00:13:23,040
algorithm only once and not as times

311
00:13:23,040 --> 00:13:25,380
secondly the authentication phase with

312
00:13:25,380 --> 00:13:27,660
with f which can be seen as an iterated

313
00:13:27,660 --> 00:13:30,540
ash within discuss it but we can see it

314
00:13:30,540 --> 00:13:33,300
uh we can save some computation on fixed

315
00:13:33,300 --> 00:13:36,000
blocks and Ash only the random padding

316
00:13:36,000 --> 00:13:38,300
so we save a bit of computation

317
00:13:38,300 --> 00:13:42,300
uh then we can we show that for some

318
00:13:42,300 --> 00:13:43,980
parameters and as long as the advantages

319
00:13:43,980 --> 00:13:45,839
for the adversaries of the components

320
00:13:45,839 --> 00:13:48,300
the prf the encryption scheme and empty

321
00:13:48,300 --> 00:13:50,519
portal are negligible so is the

322
00:13:50,519 --> 00:13:53,820
detectability advancory and additionally

323
00:13:53,820 --> 00:13:56,220
now if we have more than K divided by 4

324
00:13:56,220 --> 00:13:59,040
plus Delta queries we show that the

325
00:13:59,040 --> 00:14:01,139
recovery success is of the key is

326
00:14:01,139 --> 00:14:03,959
actually 1 minus Q times e to the minus

327
00:14:03,959 --> 00:14:05,100
Delta s

328
00:14:05,100 --> 00:14:08,519
so what does that mean in practice so

329
00:14:08,519 --> 00:14:10,440
the dominating term of success is

330
00:14:10,440 --> 00:14:13,139
actually Q times e to the minus Delta s

331
00:14:13,139 --> 00:14:15,720
for at most Q which is 100 because of

332
00:14:15,720 --> 00:14:19,760
the Regeneration so if we choose

333
00:14:19,760 --> 00:14:23,240
if we choose

334
00:14:23,279 --> 00:14:25,079
see it here

335
00:14:25,079 --> 00:14:28,380
if we choose this line with Delta equals

336
00:14:28,380 --> 00:14:30,860
eight and S equals

337
00:14:30,860 --> 00:14:33,899
1485 we can actually recover 600 key

338
00:14:33,899 --> 00:14:37,860
bits with probability uh 85 percent more

339
00:14:37,860 --> 00:14:41,100
than 85 percent but this s which is the

340
00:14:41,100 --> 00:14:42,779
number of tries in the algorithm might

341
00:14:42,779 --> 00:14:45,260
be too large so

342
00:14:45,260 --> 00:14:49,500
so that it uh encodes OS detection so a

343
00:14:49,500 --> 00:14:50,880
more modest approach is actually to

344
00:14:50,880 --> 00:14:53,940
extract 500 key bits which are done by

345
00:14:53,940 --> 00:14:56,940
choosing Delta equals s and Delta equals

346
00:14:56,940 --> 00:15:00,120
6 and S equals 369 price with

347
00:15:00,120 --> 00:15:02,880
probability more than 85 percent

348
00:15:02,880 --> 00:15:05,220
so we actually discussed with telegram

349
00:15:05,220 --> 00:15:08,279
and the claim for about this attack is

350
00:15:08,279 --> 00:15:11,040
that since since the code their code is

351
00:15:11,040 --> 00:15:14,040
built and reproducible it would be it

352
00:15:14,040 --> 00:15:15,720
would be difficult to massively roll out

353
00:15:15,720 --> 00:15:18,240
the attack however we can see that it

354
00:15:18,240 --> 00:15:20,040
can still be deployed on targeted users

355
00:15:20,040 --> 00:15:23,160
or on closed Source third-party clients

356
00:15:23,160 --> 00:15:25,560
so to conclude the talk we first we

357
00:15:25,560 --> 00:15:26,760
introduced the first algorithm

358
00:15:26,760 --> 00:15:29,699
substitution attack on empty portal 2.0

359
00:15:29,699 --> 00:15:31,740
we showed that the attack is

360
00:15:31,740 --> 00:15:34,860
undetectable and we show that for more

361
00:15:34,860 --> 00:15:37,199
than K divided by 4 plus Delta queries

362
00:15:37,199 --> 00:15:39,420
we can actually extract 10 key bits per

363
00:15:39,420 --> 00:15:41,760
message probability at least 85 percent

364
00:15:41,760 --> 00:15:44,579
which is enough to recover most of the

365
00:15:44,579 --> 00:15:46,560
key bits of the encryption encryption

366
00:15:46,560 --> 00:15:48,959
pass and in the full paper we show that

367
00:15:48,959 --> 00:15:50,820
the subversion attack can be averted by

368
00:15:50,820 --> 00:15:53,639
modifying the version in three steps so

369
00:15:53,639 --> 00:15:55,620
first we show that empty Potter 2.0 can

370
00:15:55,620 --> 00:15:58,019
be seen as an instant station of a

371
00:15:58,019 --> 00:15:59,699
secure deterministic authenticated

372
00:15:59,699 --> 00:16:03,180
encryption scheme empty Porto G then we

373
00:16:03,180 --> 00:16:04,800
make small changes to the algorithm

374
00:16:04,800 --> 00:16:06,060
mainly to the padding to make it

375
00:16:06,060 --> 00:16:07,560
deterministic since that was the

376
00:16:07,560 --> 00:16:09,959
vulnerability of the attack and assuming

377
00:16:09,959 --> 00:16:11,579
perfect the compatibility and key

378
00:16:11,579 --> 00:16:13,620
independent messages we showed that the

379
00:16:13,620 --> 00:16:15,779
modified version is actually subversion

380
00:16:15,779 --> 00:16:17,880
resistant thank you very much for your

381
00:16:17,880 --> 00:16:20,120
attention

382
00:16:20,279 --> 00:16:22,680
okay exactly wonderful work any

383
00:16:22,680 --> 00:16:26,420
questions from Kobe

384
00:16:36,620 --> 00:16:39,600
did you communicate your findings to the

385
00:16:39,600 --> 00:16:42,899
telegraph team and what did they oh yeah

386
00:16:42,899 --> 00:16:46,100
probably arrested sorry

387
00:16:47,940 --> 00:16:50,820
so they claim they only made that

388
00:16:50,820 --> 00:16:53,880
comment and that's enough that's what

389
00:16:53,880 --> 00:16:55,740
they say like there was not a lot of

390
00:16:55,740 --> 00:16:57,959
emails so they said that since the code

391
00:16:57,959 --> 00:17:00,180
builds are reproducible

392
00:17:00,180 --> 00:17:02,519
you you would find out that the

393
00:17:02,519 --> 00:17:05,819
algorithm is subverted and um that's it

394
00:17:05,819 --> 00:17:07,439
for them that's enough for them like

395
00:17:07,439 --> 00:17:09,240
they don't care much more than that okay

396
00:17:09,240 --> 00:17:11,959
thanks a lot

397
00:17:13,919 --> 00:17:17,540
questions from Beijing

398
00:17:21,540 --> 00:17:25,040
and what about the chat

399
00:17:31,559 --> 00:17:34,440
then I have a small question uh what

400
00:17:34,440 --> 00:17:36,600
about the other practical aspects of

401
00:17:36,600 --> 00:17:39,600
calligraphy such as timing attacks CPA

402
00:17:39,600 --> 00:17:42,840
and white box key extraction

403
00:17:42,840 --> 00:17:45,539
again I see I didn't hear sorry

404
00:17:45,539 --> 00:17:47,880
what about the other practical aspects

405
00:17:47,880 --> 00:17:49,799
of the telegram YouTube

406
00:17:49,799 --> 00:17:52,919
that has timing attacks and the DPA and

407
00:17:52,919 --> 00:17:54,720
a y box key instruction

408
00:17:54,720 --> 00:17:57,660
uh we didn't concentrate on that so we

409
00:17:57,660 --> 00:17:59,700
mainly went into the subversion attacks

410
00:17:59,700 --> 00:18:02,760
and showed that it does is subversion

411
00:18:02,760 --> 00:18:04,559
resistance so it's out of the scope of

412
00:18:04,559 --> 00:18:05,340
the

413
00:18:05,340 --> 00:18:07,140
people

414
00:18:07,140 --> 00:18:09,900
okay it's okay

415
00:18:09,900 --> 00:18:12,679
questions

416
00:18:14,160 --> 00:18:16,980
uh so let's send the speaker again and

417
00:18:16,980 --> 00:18:20,600
let's move on to the next talk

418
00:18:36,000 --> 00:18:39,179
this talk is uh attacking the IHF ISO

419
00:18:39,179 --> 00:18:42,299
standard for internal looking CTI cpkm

420
00:18:42,299 --> 00:18:44,780
also the buy or document

421
00:18:44,780 --> 00:18:46,620
and the

422
00:18:46,620 --> 00:18:49,559
Iran memory Japan will give the talk so

423
00:18:49,559 --> 00:18:51,000
let's welcome

424
00:18:51,000 --> 00:18:52,500
uh hello

425
00:18:52,500 --> 00:18:53,960
thank you

426
00:18:53,960 --> 00:18:57,600
so this is attacking ITF ISO standards

427
00:18:57,600 --> 00:19:01,620
for internal raking name CTR CPK

428
00:19:01,620 --> 00:19:06,120
here is the overview of our talk

429
00:19:06,120 --> 00:19:09,720
so uh first of all uh why this leaking

430
00:19:09,720 --> 00:19:12,419
is important so this to an end security

431
00:19:12,419 --> 00:19:15,000
it is common practice to restrict the

432
00:19:15,000 --> 00:19:17,400
duration of key after encrypting a

433
00:19:17,400 --> 00:19:19,200
limited number of data you need to

434
00:19:19,200 --> 00:19:20,360
change the key

435
00:19:20,360 --> 00:19:23,280
and the encryption key is typically

436
00:19:23,280 --> 00:19:25,080
changed after the amount of encryption

437
00:19:25,080 --> 00:19:27,720
and the maximum amount of data that can

438
00:19:27,720 --> 00:19:29,460
be encrypted only key is called key

439
00:19:29,460 --> 00:19:31,679
lighting you decide the key light time

440
00:19:31,679 --> 00:19:35,700
based on various properties like some uh

441
00:19:35,700 --> 00:19:38,640
like about the bound property or some

442
00:19:38,640 --> 00:19:40,980
differential linear attack or some side

443
00:19:40,980 --> 00:19:42,299
Channel analysis

444
00:19:42,299 --> 00:19:44,700
but the problem is how to change the key

445
00:19:44,700 --> 00:19:47,340
changing a key requires a key exchange

446
00:19:47,340 --> 00:19:49,860
protocol which is high computation and

447
00:19:49,860 --> 00:19:52,500
communication cost

448
00:19:52,500 --> 00:19:55,260
so leaking mechanism was suggested by

449
00:19:55,260 --> 00:19:57,960
Abdullah and bellary as generating a

450
00:19:57,960 --> 00:20:00,299
secret key Ki for the IIT Pub based on

451
00:20:00,299 --> 00:20:02,340
the previous keys

452
00:20:02,340 --> 00:20:05,039
and there are three types of breaking

453
00:20:05,039 --> 00:20:07,200
basically the block Cipher label which

454
00:20:07,200 --> 00:20:09,120
is phrase raking in the block Cipher

455
00:20:09,120 --> 00:20:10,980
mode of operational level that is

456
00:20:10,980 --> 00:20:12,840
internal and leaking which we discuss

457
00:20:12,840 --> 00:20:15,299
today and the protocol label which is

458
00:20:15,299 --> 00:20:17,760
external raking

459
00:20:17,760 --> 00:20:20,820
so ACP came the basic idea is called a

460
00:20:20,820 --> 00:20:23,520
key update function after a after

461
00:20:23,520 --> 00:20:25,260
encrypting if we Define number of blocks

462
00:20:25,260 --> 00:20:28,260
known as section sap came was proposed

463
00:20:28,260 --> 00:20:33,059
by in CTC clip 2016 and the counter mode

464
00:20:33,059 --> 00:20:35,940
with sap came which is CTR ACP is

465
00:20:35,940 --> 00:20:37,260
passing through the last form of

466
00:20:37,260 --> 00:20:40,080
standardization process in iitf and was

467
00:20:40,080 --> 00:20:42,720
standardized by ISO

468
00:20:42,720 --> 00:20:45,240
so here is the idea if you want to get

469
00:20:45,240 --> 00:20:48,299
the jth key you encrypt some carefully

470
00:20:48,299 --> 00:20:51,419
chosen constant with J minus one key and

471
00:20:51,419 --> 00:20:55,140
you you take the J you you take you need

472
00:20:55,140 --> 00:20:58,020
some encryption uh based on the size of

473
00:20:58,020 --> 00:21:01,080
the key and the block size

474
00:21:01,080 --> 00:21:03,600
so here is an example for K is equal to

475
00:21:03,600 --> 00:21:07,080
4m you need four encryption process you

476
00:21:07,080 --> 00:21:10,100
D1 D2 D3 and D4 pass through the

477
00:21:10,100 --> 00:21:12,360
encryption and you concatenate the

478
00:21:12,360 --> 00:21:17,120
output to get the key j key

479
00:21:17,160 --> 00:21:21,179
and this is CTR ACP so ah suppose the

480
00:21:21,179 --> 00:21:23,700
section size is s then up to S minus one

481
00:21:23,700 --> 00:21:26,640
is section ah absolute s minus 1 is 1

482
00:21:26,640 --> 00:21:30,539
block you encrypt as the CTR mode after

483
00:21:30,539 --> 00:21:34,380
that you need to change the key using uh

484
00:21:34,380 --> 00:21:37,679
sap Cam and then you encrypt the second

485
00:21:37,679 --> 00:21:40,880
section and so on

486
00:21:41,220 --> 00:21:44,460
so what is the problem with sap chem

487
00:21:44,460 --> 00:21:47,940
transformation ah so the first problem

488
00:21:47,940 --> 00:21:49,559
is entropy loss during this

489
00:21:49,559 --> 00:21:52,380
transformation ah so consider this sap

490
00:21:52,380 --> 00:21:56,520
came as a functional graph where the

491
00:21:56,520 --> 00:21:57,900
vertices are

492
00:21:57,900 --> 00:22:01,260
set up all keys and the graphs are K to

493
00:22:01,260 --> 00:22:03,120
sap came up k

494
00:22:03,120 --> 00:22:06,539
and we say that the newest iterate image

495
00:22:06,539 --> 00:22:10,140
point is K is in your 38 image point if

496
00:22:10,140 --> 00:22:14,039
there is a new pre-image of the key and

497
00:22:14,039 --> 00:22:18,020
this set is denoted by I need

498
00:22:19,740 --> 00:22:22,440
so this is a famous result on functional

499
00:22:22,440 --> 00:22:25,559
graph that the h0 entropy of the key

500
00:22:25,559 --> 00:22:27,299
space of today's iteration is

501
00:22:27,299 --> 00:22:30,240
approximately K plus 1 minus log 2 a

502
00:22:30,240 --> 00:22:33,179
base so there are some entropy drop uh

503
00:22:33,179 --> 00:22:35,400
after a few iteration

504
00:22:35,400 --> 00:22:39,960
and based on this we propose a improved

505
00:22:39,960 --> 00:22:42,360
exhaustive search for the later section

506
00:22:42,360 --> 00:22:43,919
keys

507
00:22:43,919 --> 00:22:46,020
so ah

508
00:22:46,020 --> 00:22:49,500
if a k is a valid section key if and or

509
00:22:49,500 --> 00:22:53,220
leap this is a new new primit

510
00:22:53,220 --> 00:22:56,039
and so uh how to exhaustive search this

511
00:22:56,039 --> 00:22:58,860
key so this is nothing we can we can

512
00:22:58,860 --> 00:23:01,020
start from a key and update an update

513
00:23:01,020 --> 00:23:03,059
until Newt section if it is updated to

514
00:23:03,059 --> 00:23:05,340
near section then we can get a valid

515
00:23:05,340 --> 00:23:07,440
section key for the new

516
00:23:07,440 --> 00:23:11,580
now we can do this for many keys many

517
00:23:11,580 --> 00:23:14,820
many keys to collect a lot of uh newer

518
00:23:14,820 --> 00:23:16,799
section key it is also possible that

519
00:23:16,799 --> 00:23:21,200
sometime it collide with some other keys

520
00:23:21,200 --> 00:23:25,380
but this process is so much inefficient

521
00:23:25,380 --> 00:23:27,179
we need to do we need to call the

522
00:23:27,179 --> 00:23:29,580
encryption algorithm lot of times the

523
00:23:29,580 --> 00:23:31,500
blocks I've had a lot of times to get

524
00:23:31,500 --> 00:23:33,960
all possible keys

525
00:23:33,960 --> 00:23:37,440
so here is the one Improvement is that

526
00:23:37,440 --> 00:23:42,000
so suppose K is a new section key so

527
00:23:42,000 --> 00:23:45,419
there is a new pre-image for K now if we

528
00:23:45,419 --> 00:23:48,659
apply the IF function or this is a cpkm

529
00:23:48,659 --> 00:23:52,740
function again on K then we get if new

530
00:23:52,740 --> 00:23:56,120
of f x so as K was a

531
00:23:56,120 --> 00:23:59,700
valid newer section key because it has a

532
00:23:59,700 --> 00:24:02,940
pre-image x similarly F of K is a valid

533
00:24:02,940 --> 00:24:07,020
section key as it has free image Apex

534
00:24:07,020 --> 00:24:09,679
So based on this will not stop here

535
00:24:09,679 --> 00:24:13,799
we'll after finding the newest key we

536
00:24:13,799 --> 00:24:16,140
will encrypt again and again

537
00:24:16,140 --> 00:24:19,260
and all of these are valid section key

538
00:24:19,260 --> 00:24:22,440
and we'll do this until we find a cycle

539
00:24:22,440 --> 00:24:26,159
so this is a basic idea of finding uh

540
00:24:26,159 --> 00:24:28,679
the finding section valid section key

541
00:24:28,679 --> 00:24:31,580
for the new Earth section

542
00:24:32,100 --> 00:24:34,140
now uh

543
00:24:34,140 --> 00:24:37,559
now we come to the H1 entropy loss

544
00:24:37,559 --> 00:24:40,260
um so before going to the discussion H1

545
00:24:40,260 --> 00:24:44,280
entropy loss uh this is a this is a set

546
00:24:44,280 --> 00:24:46,980
we Define that PK new is the set of all

547
00:24:46,980 --> 00:24:50,640
master keys that after new uh update

548
00:24:50,640 --> 00:24:53,940
mapped to the cape key

549
00:24:53,940 --> 00:24:56,280
and the probability that the KFC is

550
00:24:56,280 --> 00:24:57,559
valid

551
00:24:57,559 --> 00:25:01,799
is probability is the set of the size of

552
00:25:01,799 --> 00:25:03,000
this set

553
00:25:03,000 --> 00:25:06,020
um by 2 to the power k

554
00:25:06,059 --> 00:25:09,600
and the H1 entropy or cyanone entropy is

555
00:25:09,600 --> 00:25:12,720
is a summation over probability of K

556
00:25:12,720 --> 00:25:15,059
into log of probability of log of 1 by

557
00:25:15,059 --> 00:25:17,760
probability of K and this sum over all

558
00:25:17,760 --> 00:25:19,400
possible

559
00:25:19,400 --> 00:25:22,760
section key

560
00:25:23,039 --> 00:25:26,880
now this is the H1 entropy loss we can

561
00:25:26,880 --> 00:25:28,980
see that H1 in the last column H1

562
00:25:28,980 --> 00:25:32,400
entropy loss is more than a0 entropy

563
00:25:32,400 --> 00:25:35,460
loss this is an experiment on uh 32 bit

564
00:25:35,460 --> 00:25:40,080
chopped AES and this is on 32-bit Simon

565
00:25:40,080 --> 00:25:44,340
and so the loss of H1 entropy actually

566
00:25:44,340 --> 00:25:46,860
indicates non-uniform distribution of

567
00:25:46,860 --> 00:25:49,620
master keys among the valid section

568
00:25:49,620 --> 00:25:51,779
so some section Keys covered more master

569
00:25:51,779 --> 00:25:53,279
keys than others

570
00:25:53,279 --> 00:25:56,039
and keys that cover mode master key have

571
00:25:56,039 --> 00:25:57,720
higher probability of being correctly

572
00:25:57,720 --> 00:25:59,580
with Section key

573
00:25:59,580 --> 00:26:02,700
and we will focus on those those section

574
00:26:02,700 --> 00:26:06,059
Key by checking larger PK new

575
00:26:06,059 --> 00:26:09,659
so the idea is same as previous

576
00:26:09,659 --> 00:26:12,779
will search from various random master

577
00:26:12,779 --> 00:26:16,020
key and collect all those section key

578
00:26:16,020 --> 00:26:20,720
and it is also possible that sometime

579
00:26:20,720 --> 00:26:26,059
2-2 searching Trail are same they

580
00:26:26,059 --> 00:26:30,120
contain same section key so in that case

581
00:26:30,120 --> 00:26:33,600
we can see that in that case as we go

582
00:26:33,600 --> 00:26:36,720
with more and more master key then after

583
00:26:36,720 --> 00:26:39,299
some time the effectiveness which is

584
00:26:39,299 --> 00:26:42,600
collection of new keys divided by the

585
00:26:42,600 --> 00:26:47,400
computation is going going to decrease

586
00:26:47,400 --> 00:26:49,799
and we can see that this is the

587
00:26:49,799 --> 00:26:52,740
experiment on AES again and we can see

588
00:26:52,740 --> 00:26:55,919
that after 512 iteration the

589
00:26:55,919 --> 00:27:00,679
effectiveness is almost near to one

590
00:27:01,980 --> 00:27:04,320
and the success probability of the

591
00:27:04,320 --> 00:27:07,200
attack we proved that this expected size

592
00:27:07,200 --> 00:27:11,220
of this PK new overall the uh over over

593
00:27:11,220 --> 00:27:14,100
a set of valid section Keys is greater

594
00:27:14,100 --> 00:27:16,559
equal to size of the valid section key

595
00:27:16,559 --> 00:27:18,960
into new so this suggest one crucial

596
00:27:18,960 --> 00:27:22,080
thing that uh a section new in the range

597
00:27:22,080 --> 00:27:24,000
of 2 to the power K by four to two to

598
00:27:24,000 --> 00:27:26,820
the power K by 2 is expected to cover 2

599
00:27:26,820 --> 00:27:29,700
to the power 3 K by 4 master keys

600
00:27:29,700 --> 00:27:32,700
so only one iteration suggests an attack

601
00:27:32,700 --> 00:27:35,400
with a Time complexity to the power K by

602
00:27:35,400 --> 00:27:38,159
2 and accelerated to the power minus K

603
00:27:38,159 --> 00:27:39,960
by 4.

604
00:27:39,960 --> 00:27:43,620
so we did some experiment uh to verify

605
00:27:43,620 --> 00:27:46,620
this again in AES and we can see that

606
00:27:46,620 --> 00:27:51,539
for Section size 1632 and all uh this is

607
00:27:51,539 --> 00:27:53,640
uh this is the average corporate key

608
00:27:53,640 --> 00:27:56,419
which is actually

609
00:28:01,140 --> 00:28:04,140
CPK

610
00:28:07,919 --> 00:28:11,279
now consider City sap came instead with

611
00:28:11,279 --> 00:28:14,120
Section size s and the master key is K

612
00:28:14,120 --> 00:28:17,039
and another with Section size S Prime

613
00:28:17,039 --> 00:28:21,600
and master key K Prime and S is S Prime

614
00:28:21,600 --> 00:28:23,460
is greater than S

615
00:28:23,460 --> 00:28:26,220
and less than two ways

616
00:28:26,220 --> 00:28:28,620
now uh consider a message known sphere

617
00:28:28,620 --> 00:28:33,120
IV M1 and encrypt this with ctrdc became

618
00:28:33,120 --> 00:28:36,240
the first instance and get C1

619
00:28:36,240 --> 00:28:39,779
similarly for ibm2 we get C2 now during

620
00:28:39,779 --> 00:28:42,779
this encryption of the first uh CTR

621
00:28:42,779 --> 00:28:46,919
instance so until s minus 1 it block

622
00:28:46,919 --> 00:28:48,600
will encrypt with the first key then

623
00:28:48,600 --> 00:28:50,220
from as it will increase from the second

624
00:28:50,220 --> 00:28:53,580
key but when the second instance comes

625
00:28:53,580 --> 00:28:56,279
into the picture you can see that these

626
00:28:56,279 --> 00:28:58,320
two key are same

627
00:28:58,320 --> 00:29:02,100
so this asset position are actually

628
00:29:02,100 --> 00:29:04,320
encrypted by the same key

629
00:29:04,320 --> 00:29:07,200
so this immediately giving a relatively

630
00:29:07,200 --> 00:29:10,260
distinguisher and as this is a counter

631
00:29:10,260 --> 00:29:11,640
mode we can easily check by this

632
00:29:11,640 --> 00:29:16,400
relation that this is actually holding

633
00:29:16,880 --> 00:29:21,419
so now we will discuss a ctma ctrs APK

634
00:29:21,419 --> 00:29:24,299
with when instantiated with weak block

635
00:29:24,299 --> 00:29:27,480
ciphers uh so consider the case for

636
00:29:27,480 --> 00:29:30,000
Kappa is equal to 2N the key size is

637
00:29:30,000 --> 00:29:32,760
twice the block size so we need actually

638
00:29:32,760 --> 00:29:36,480
two encryption process and jth keys

639
00:29:36,480 --> 00:29:39,120
concatenation of these two

640
00:29:39,120 --> 00:29:42,980
now if the if what happens if there is a

641
00:29:42,980 --> 00:29:46,080
Delta x 2 Delta y differential with

642
00:29:46,080 --> 00:29:48,600
probability P we can see that the output

643
00:29:48,600 --> 00:29:52,440
key and the two parts of the key also

644
00:29:52,440 --> 00:29:55,679
differ by Delta y

645
00:29:55,679 --> 00:29:59,460
and we can see we can check by this uh

646
00:29:59,460 --> 00:30:02,520
seeing one order of one by P sections

647
00:30:02,520 --> 00:30:04,140
and the time complexity is 2 to the

648
00:30:04,140 --> 00:30:06,799
power n by P

649
00:30:07,380 --> 00:30:12,240
now if we have a related key property in

650
00:30:12,240 --> 00:30:15,380
the cipher so suppose ah 0 to 0

651
00:30:15,380 --> 00:30:17,220
erratically property holds with

652
00:30:17,220 --> 00:30:19,559
probability p and it's immediate that

653
00:30:19,559 --> 00:30:22,679
the if we encrypt get two keys two keys

654
00:30:22,679 --> 00:30:25,559
are actually equal with probability p

655
00:30:25,559 --> 00:30:29,580
and it has an uh example we checked that

656
00:30:29,580 --> 00:30:31,919
key entropy of a random function should

657
00:30:31,919 --> 00:30:35,880
drop 0.66 bit in One update but for ta

658
00:30:35,880 --> 00:30:37,740
due to its three related Key Properties

659
00:30:37,740 --> 00:30:42,500
the drop is almost 2.34 bits

660
00:30:43,679 --> 00:30:46,679
now for uh K is equal to 4 n we can get

661
00:30:46,679 --> 00:30:48,620
even a better attack

662
00:30:48,620 --> 00:30:51,179
because we can choose four C two pairs

663
00:30:51,179 --> 00:30:53,480
from D1 D2 D3 D4

664
00:30:53,480 --> 00:30:58,200
ah so first one is as before we if we

665
00:30:58,200 --> 00:31:02,039
have a d Delta X1 to Delta X Y 1 with

666
00:31:02,039 --> 00:31:03,840
probability P one differential and Delta

667
00:31:03,840 --> 00:31:06,419
x 2 to Delta Y 2 with probability P two

668
00:31:06,419 --> 00:31:08,580
difference here

669
00:31:08,580 --> 00:31:12,480
then uh the then a fast part and the

670
00:31:12,480 --> 00:31:14,700
second part of the key uh differ by

671
00:31:14,700 --> 00:31:17,580
Delta y one we probably and third part

672
00:31:17,580 --> 00:31:20,100
and fourth part divided by Delta y two

673
00:31:20,100 --> 00:31:21,779
and this happens with probability P one

674
00:31:21,779 --> 00:31:23,340
p two

675
00:31:23,340 --> 00:31:28,740
now consider another relation if a D1

676
00:31:28,740 --> 00:31:32,760
and D3 also differ by Delta x 2 then we

677
00:31:32,760 --> 00:31:34,740
can get the first part and third part is

678
00:31:34,740 --> 00:31:36,899
also referred by Delta y two and these

679
00:31:36,899 --> 00:31:40,020
three relation directly imply that D2

680
00:31:40,020 --> 00:31:43,799
and D four also differ by Delta y two

681
00:31:43,799 --> 00:31:47,820
and in that case we get again one more

682
00:31:47,820 --> 00:31:52,880
relation so the jth key will be

683
00:31:52,880 --> 00:31:55,799
kj1 and the first part and second part

684
00:31:55,799 --> 00:31:58,919
is deeper by y one and third part and

685
00:31:58,919 --> 00:32:01,919
fourth by Deeper by again Delta y 1 over

686
00:32:01,919 --> 00:32:03,840
the P one square and this is with

687
00:32:03,840 --> 00:32:06,000
probability P two square

688
00:32:06,000 --> 00:32:08,279
and we note that actually that in the

689
00:32:08,279 --> 00:32:11,520
RFC documentation the constant given

690
00:32:11,520 --> 00:32:14,580
constant actually allow us to hold this

691
00:32:14,580 --> 00:32:16,939
relation

692
00:32:17,700 --> 00:32:21,539
so now let's conclude this so we propose

693
00:32:21,539 --> 00:32:25,320
attack based on a 0 entropy loss uh and

694
00:32:25,320 --> 00:32:26,880
improve the existed search for the

695
00:32:26,880 --> 00:32:29,220
section key and we I did not discuss

696
00:32:29,220 --> 00:32:31,320
these two attack called key Collision in

697
00:32:31,320 --> 00:32:33,480
multi-user setting and key recovery in

698
00:32:33,480 --> 00:32:35,640
multi-user setting so this is basically

699
00:32:35,640 --> 00:32:39,380
a direct on skills consequences of uh

700
00:32:39,380 --> 00:32:41,399
entropy loss

701
00:32:41,399 --> 00:32:43,799
please see the paper for these two

702
00:32:43,799 --> 00:32:45,500
attacks

703
00:32:45,500 --> 00:32:48,600
and importance of H1 intrapulos H1

704
00:32:48,600 --> 00:32:51,059
intrapulosis is much more effective than

705
00:32:51,059 --> 00:32:53,460
agile entropy loss

706
00:32:53,460 --> 00:32:56,460
and a related distinguish on CTR ACP

707
00:32:56,460 --> 00:32:59,279
which is independent of the underlying

708
00:32:59,279 --> 00:33:01,140
primitive

709
00:33:01,140 --> 00:33:03,779
and attack based on faultier background

710
00:33:03,779 --> 00:33:05,600
implementation of a city recipe

711
00:33:05,600 --> 00:33:08,240
instantiated with

712
00:33:08,240 --> 00:33:12,179
bad block Cipher weak block Cipher in

713
00:33:12,179 --> 00:33:14,220
that case analysis designer May harm the

714
00:33:14,220 --> 00:33:18,960
more more and attack based on specific

715
00:33:18,960 --> 00:33:21,860
related to differential property

716
00:33:21,860 --> 00:33:24,419
now the recommendation for the use of a

717
00:33:24,419 --> 00:33:27,779
CPK so using sap came without any

718
00:33:27,779 --> 00:33:30,120
changes can be acceptable if these

719
00:33:30,120 --> 00:33:33,899
things are done I mean a large initial

720
00:33:33,899 --> 00:33:38,399
key size so the entropy loss will not be

721
00:33:38,399 --> 00:33:39,720
a matter

722
00:33:39,720 --> 00:33:42,059
uh a implementation issues are addressed

723
00:33:42,059 --> 00:33:44,880
also in our paper we discussed another

724
00:33:44,880 --> 00:33:48,539
attack that if we instantiated this sap

725
00:33:48,539 --> 00:33:51,600
came with a block Cipher with block size

726
00:33:51,600 --> 00:33:55,200
not multiple of eight like we do it in a

727
00:33:55,200 --> 00:33:57,659
format preserving encryption then we can

728
00:33:57,659 --> 00:34:00,559
actually recover the master key

729
00:34:00,559 --> 00:34:03,960
so an appropriate warnings should be

730
00:34:03,960 --> 00:34:06,480
added to the standard

731
00:34:06,480 --> 00:34:08,899
and Russian Standard ghost and uh

732
00:34:08,899 --> 00:34:10,879
suggested for

733
00:34:10,879 --> 00:34:14,339
scpm and its produces a CPA Kim

734
00:34:14,339 --> 00:34:16,199
and we know that ghost has several

735
00:34:16,199 --> 00:34:19,199
differential property and multiple Works

736
00:34:19,199 --> 00:34:22,159
suggests that hidden design recently

737
00:34:22,159 --> 00:34:24,839
and designed assembly of the cipher is

738
00:34:24,839 --> 00:34:27,080
unknown so

739
00:34:27,080 --> 00:34:29,820
you should be careful when using this

740
00:34:29,820 --> 00:34:32,699
type of mold

741
00:34:32,699 --> 00:34:35,779
thank you

742
00:34:36,300 --> 00:34:38,520
thanks for the nice work uh questions

743
00:34:38,520 --> 00:34:41,359
from Kobe

744
00:34:44,399 --> 00:34:45,440
um

745
00:34:45,440 --> 00:34:49,500
by the remote is possible

746
00:34:49,500 --> 00:34:52,040
yes

747
00:34:52,040 --> 00:34:55,099
I am the one of those also the original

748
00:34:55,099 --> 00:34:58,800
ispk mode and the standards and the

749
00:34:58,800 --> 00:35:01,020
security proof the security papers said

750
00:35:01,020 --> 00:35:04,280
so first of all uh I would like to thank

751
00:35:04,280 --> 00:35:07,740
shibam or and Aaron it's a great work

752
00:35:07,740 --> 00:35:10,740
it's a great research and it allows us

753
00:35:10,740 --> 00:35:16,020
to deeply understand uh how the key

754
00:35:16,020 --> 00:35:18,540
space is reduced in the case of huge

755
00:35:18,540 --> 00:35:21,960
number of interpretations at the same

756
00:35:21,960 --> 00:35:25,020
time I would like to say that as or said

757
00:35:25,020 --> 00:35:29,119
as he is a talk at crypto Ram session

758
00:35:29,119 --> 00:35:32,040
the entrepreneurs property itself is

759
00:35:32,040 --> 00:35:35,160
quite trivial it's obvious and I would

760
00:35:35,160 --> 00:35:38,040
like to add that there are some known

761
00:35:38,040 --> 00:35:41,660
results from 2016 about gender pillows

762
00:35:41,660 --> 00:35:44,640
but they were only asymptotics without

763
00:35:44,640 --> 00:35:48,540
any concrete methods so I would like to

764
00:35:48,540 --> 00:35:49,940
stress that

765
00:35:49,940 --> 00:35:52,920
there it is not a sensation that the

766
00:35:52,920 --> 00:35:55,560
entropellers happens on a large number

767
00:35:55,560 --> 00:35:56,540
of

768
00:35:56,540 --> 00:36:00,000
hurricanes on a huge number of games uh

769
00:36:00,000 --> 00:36:02,820
much larger extremely larger the used in

770
00:36:02,820 --> 00:36:05,880
real world particles but of course it's

771
00:36:05,880 --> 00:36:08,780
a very good understanding

772
00:36:08,780 --> 00:36:12,780
secondly I would like to stress that the

773
00:36:12,780 --> 00:36:15,839
security proofs that were that exist for

774
00:36:15,839 --> 00:36:19,500
this node were not disproven so they

775
00:36:19,500 --> 00:36:22,320
they are correct moreover I would like

776
00:36:22,320 --> 00:36:26,820
to say that the attacks show that the

777
00:36:26,820 --> 00:36:30,180
existing lower bounds seems to be very

778
00:36:30,180 --> 00:36:33,740
close to being at tight bounds because

779
00:36:33,740 --> 00:36:38,099
if you take the security bound from the

780
00:36:38,099 --> 00:36:41,460
initial research paper for spkm you give

781
00:36:41,460 --> 00:36:45,480
me may see that it it is more or less

782
00:36:45,480 --> 00:36:48,200
the same that about

783
00:36:48,200 --> 00:36:51,599
that is deduced from your attacks so in

784
00:36:51,599 --> 00:36:53,960
fact it

785
00:36:53,960 --> 00:36:56,480
it let us know that

786
00:36:56,480 --> 00:37:00,060
we don't have to spend more time on

787
00:37:00,060 --> 00:37:02,099
trying to make our low balance better

788
00:37:02,099 --> 00:37:05,099
because they seem to be tight

789
00:37:05,099 --> 00:37:07,680
um and uh but at the same time I have

790
00:37:07,680 --> 00:37:10,619
one comment about the presentation

791
00:37:10,619 --> 00:37:13,140
um unfortunately there is a misleading

792
00:37:13,140 --> 00:37:15,660
statement uh in the end of the

793
00:37:15,660 --> 00:37:18,540
presentation in the print paper you said

794
00:37:18,540 --> 00:37:20,400
that there are some issues in the

795
00:37:20,400 --> 00:37:24,359
standards in RFC and in ISO standard uh

796
00:37:24,359 --> 00:37:27,000
regarding the section size of the book

797
00:37:27,000 --> 00:37:31,820
server you said that if the block Cipher

798
00:37:31,820 --> 00:37:35,760
section is not multiple by eight then

799
00:37:35,760 --> 00:37:39,119
the existing constants lead to problems

800
00:37:39,119 --> 00:37:42,900
and you're completely right and I

801
00:37:42,900 --> 00:37:45,540
absolutely agree but the fact is that

802
00:37:45,540 --> 00:37:48,180
there are explicit requirements in both

803
00:37:48,180 --> 00:37:51,540
the RFC and the standard to use only

804
00:37:51,540 --> 00:37:54,660
block ciphers with block sizes multiple

805
00:37:54,660 --> 00:37:57,780
divisible by eight I can it can be

806
00:37:57,780 --> 00:38:01,220
either easily checked each section uh

807
00:38:01,220 --> 00:38:06,060
13.2 of iso standard and at page 8 of

808
00:38:06,060 --> 00:38:11,040
RFC there is a explicitly required that

809
00:38:11,040 --> 00:38:14,240
only block servers with block multiple

810
00:38:14,240 --> 00:38:17,820
individual by eight might be used so

811
00:38:17,820 --> 00:38:20,820
please try to be more careful about this

812
00:38:20,820 --> 00:38:24,720
uh and to conclude uh again it's a great

813
00:38:24,720 --> 00:38:29,099
paper it gives us more understanding of

814
00:38:29,099 --> 00:38:32,220
the limits of limitations of the usage

815
00:38:32,220 --> 00:38:36,720
of the mode and uh I think that my

816
00:38:36,720 --> 00:38:39,200
colleagues and I will

817
00:38:39,200 --> 00:38:42,780
prepare a paper on some methodology how

818
00:38:42,780 --> 00:38:45,480
to use and not to use aspkm protocols

819
00:38:45,480 --> 00:38:46,640
because

820
00:38:46,640 --> 00:38:50,720
we understood a lot of limitations

821
00:38:50,720 --> 00:38:53,400
deduced from the lower bounds but now

822
00:38:53,400 --> 00:38:55,560
you give us give us even more

823
00:38:55,560 --> 00:38:56,660
information

824
00:38:56,660 --> 00:38:59,579
but I would like to stress that no

825
00:38:59,579 --> 00:39:02,640
security claims or security bounds that

826
00:39:02,640 --> 00:39:05,640
exist about this became was disproven so

827
00:39:05,640 --> 00:39:09,480
all security claims remain true but of

828
00:39:09,480 --> 00:39:13,079
course if someone would like to use spkm

829
00:39:13,079 --> 00:39:15,720
beyond the security bound Beyond The

830
00:39:15,720 --> 00:39:19,740
Proven lower bound hero he will have a

831
00:39:19,740 --> 00:39:21,960
lot of problems as you said so again

832
00:39:21,960 --> 00:39:24,240
it's a great work and I'll be happy to

833
00:39:24,240 --> 00:39:26,339
discuss it further this all three of you

834
00:39:26,339 --> 00:39:29,180
thank you very much

835
00:39:29,220 --> 00:39:32,460
thank you for your comment uh

836
00:39:32,460 --> 00:39:34,740
it was a long comment but I understand

837
00:39:34,740 --> 00:39:36,900
few things first of all about the

838
00:39:36,900 --> 00:39:38,760
multiple of eight we clearly mentioned

839
00:39:38,760 --> 00:39:41,220
in the paper also that yes it is written

840
00:39:41,220 --> 00:39:43,440
in RFC that we should use multiple of

841
00:39:43,440 --> 00:39:46,079
eight block ciphers but a mistake

842
00:39:46,079 --> 00:39:48,180
happens and if this happens then master

843
00:39:48,180 --> 00:39:51,920
key can be recovered ah sorry I correct

844
00:39:51,920 --> 00:39:55,740
section key can be recovered and about

845
00:39:55,740 --> 00:39:58,740
the lower bound it is an we tried to

846
00:39:58,740 --> 00:40:00,839
incorporate this in security proof but

847
00:40:00,839 --> 00:40:04,079
we failed so if someone can come up with

848
00:40:04,079 --> 00:40:06,540
a proof that actually take account of

849
00:40:06,540 --> 00:40:07,880
this

850
00:40:07,880 --> 00:40:11,099
entropy loss I think it will be great

851
00:40:11,099 --> 00:40:14,540
and thank you

852
00:40:15,359 --> 00:40:18,560
any more questions

853
00:40:24,680 --> 00:40:27,540
thanks for your interesting talk I think

854
00:40:27,540 --> 00:40:29,400
this is the interesting paper and I have

855
00:40:29,400 --> 00:40:32,339
a small question so in the paper you

856
00:40:32,339 --> 00:40:35,280
consider the king uh the influence of

857
00:40:35,280 --> 00:40:38,640
Reiki in the CTR mode

858
00:40:38,640 --> 00:40:42,300
um so I think in the ietf standard there

859
00:40:42,300 --> 00:40:45,240
are still many more including the GCM

860
00:40:45,240 --> 00:40:49,140
CBC and all happy do you have ever

861
00:40:49,140 --> 00:40:51,720
considering the influence of raking on

862
00:40:51,720 --> 00:40:56,460
this uh most yes so I showed all the

863
00:40:56,460 --> 00:40:58,440
results that in our paper we already

864
00:40:58,440 --> 00:41:00,420
mentioned in the paper that all the

865
00:41:00,420 --> 00:41:04,320
results are trivially applied to a CCM

866
00:41:04,320 --> 00:41:07,260
also I mean dcmacpm the standard given

867
00:41:07,260 --> 00:41:10,380
in RFC so all the result this is

868
00:41:10,380 --> 00:41:12,480
independent of CTR or GCM this is

869
00:41:12,480 --> 00:41:14,940
inherent property of ACP so all the

870
00:41:14,940 --> 00:41:18,359
results are also applied to GCM

871
00:41:18,359 --> 00:41:22,819
okay thank you uh yeah thank you

872
00:41:27,900 --> 00:41:33,060
okay there is a question online I guess

873
00:41:33,060 --> 00:41:33,619
yes

874
00:41:33,619 --> 00:41:36,480
hi thank you very much for the

875
00:41:36,480 --> 00:41:38,300
presentation wonderful paper

876
00:41:38,300 --> 00:41:40,680
just to be honest

877
00:41:40,680 --> 00:41:43,680
um I I want to just reply to what was

878
00:41:43,680 --> 00:41:45,800
said earlier by the Russian

879
00:41:45,800 --> 00:41:49,380
designers I think that the related key

880
00:41:49,380 --> 00:41:51,480
attack if shibam can you please go back

881
00:41:51,480 --> 00:41:54,180
a few slides backwards to the two

882
00:41:54,180 --> 00:41:58,560
sections please yes I think this is a

883
00:41:58,560 --> 00:42:00,960
a

884
00:42:00,960 --> 00:42:03,359
this is for example an attack that is

885
00:42:03,359 --> 00:42:05,880
not covered by security proofs it is not

886
00:42:05,880 --> 00:42:08,520
uh mentioned or analyzed in any place

887
00:42:08,520 --> 00:42:10,560
and the importance of related key

888
00:42:10,560 --> 00:42:11,780
security

889
00:42:11,780 --> 00:42:14,700
especially for the block ciphers which

890
00:42:14,700 --> 00:42:19,578
are used with acpkm both ghost and

891
00:42:19,940 --> 00:42:22,380
as magma and kuznetic their design

892
00:42:22,380 --> 00:42:24,660
rationale was not publicly disclosed so

893
00:42:24,660 --> 00:42:26,099
we don't know so if you look for example

894
00:42:26,099 --> 00:42:28,560
at this example this is not covered by

895
00:42:28,560 --> 00:42:31,380
the security proof it doesn't show that

896
00:42:31,380 --> 00:42:33,060
the security proofs are wrong it's just

897
00:42:33,060 --> 00:42:35,220
not covered by security person this is a

898
00:42:35,220 --> 00:42:37,859
real issue and the second related key

899
00:42:37,859 --> 00:42:40,320
attack that Shiba mentioned in other

900
00:42:40,320 --> 00:42:42,900
related key attacks well if the designer

901
00:42:42,900 --> 00:42:45,720
Chanel of magma and kuznetic are not

902
00:42:45,720 --> 00:42:47,820
being made publicly available and there

903
00:42:47,820 --> 00:42:50,579
is not a lot of related key analysis of

904
00:42:50,579 --> 00:42:55,079
those ciphers then we cannot I suggest

905
00:42:55,079 --> 00:42:57,900
not to use those Cypher Swiss acpkm

906
00:42:57,900 --> 00:42:59,160
because of the related key problems

907
00:42:59,160 --> 00:43:01,020
again these are covered by the security

908
00:43:01,020 --> 00:43:04,260
proofs on one hand on the other hand the

909
00:43:04,260 --> 00:43:05,700
security proofs assume that the block

910
00:43:05,700 --> 00:43:08,579
ciphers are ideal and again we don't

911
00:43:08,579 --> 00:43:10,740
have the design rational and whenever we

912
00:43:10,740 --> 00:43:12,300
raise the issues with related key

913
00:43:12,300 --> 00:43:14,480
attacks against various

914
00:43:14,480 --> 00:43:17,880
ciphers for example ghost magma we got

915
00:43:17,880 --> 00:43:19,740
quite a lot of complaints from from the

916
00:43:19,740 --> 00:43:21,780
designers and the representative of the

917
00:43:21,780 --> 00:43:23,880
Russian designers that said related K

918
00:43:23,880 --> 00:43:25,200
attacks are not important and I think

919
00:43:25,200 --> 00:43:26,520
that these shows that related to get tax

920
00:43:26,520 --> 00:43:28,920
are actually very much important

921
00:43:28,920 --> 00:43:30,420
thank you

922
00:43:30,420 --> 00:43:33,000
thank you can you can I talk to the

923
00:43:33,000 --> 00:43:35,300
reply

924
00:43:35,640 --> 00:43:38,099
uh or thank you for your comment I would

925
00:43:38,099 --> 00:43:40,380
like to stress that in both standards in

926
00:43:40,380 --> 00:43:45,020
RFC and in ISO standard the sbk mode is

927
00:43:45,020 --> 00:43:49,040
uh methodized

928
00:43:49,040 --> 00:43:52,619
for an arbitrary Cypher so it's not

929
00:43:52,619 --> 00:43:57,780
connected any in any way to any servers

930
00:43:57,780 --> 00:43:59,819
including Russian ciphers and the second

931
00:43:59,819 --> 00:44:03,240
way is think that in RFC there is an

932
00:44:03,240 --> 00:44:05,839
explicit requirement that

933
00:44:05,839 --> 00:44:08,339
if efficient attacks on the server

934
00:44:08,339 --> 00:44:09,780
already known that the cipher must not

935
00:44:09,780 --> 00:44:13,220
be used to be used ctrsp

936
00:44:13,220 --> 00:44:16,500
Wireless with any other mode so of

937
00:44:16,500 --> 00:44:18,480
course I understand your point I get a

938
00:44:18,480 --> 00:44:22,200
point and I agree that if related key

939
00:44:22,200 --> 00:44:26,880
attacks are known for the protocol or

940
00:44:26,880 --> 00:44:29,940
for the underlying block server then

941
00:44:29,940 --> 00:44:32,099
there can be additional issues with

942
00:44:32,099 --> 00:44:34,980
ASPCA mode so again thank you for this

943
00:44:34,980 --> 00:44:37,140
understanding of limitations of using

944
00:44:37,140 --> 00:44:39,540
the mode but I don't think that it is a

945
00:44:39,540 --> 00:44:42,800
problem of remote is just like a more

946
00:44:42,800 --> 00:44:47,280
deep understanding of the limitations

947
00:44:47,280 --> 00:44:49,880
thank you

948
00:44:51,780 --> 00:44:55,500
okay thank you thank you

949
00:44:55,500 --> 00:44:58,200
so let's uh Central speaker again and

950
00:44:58,200 --> 00:45:01,098
another section

