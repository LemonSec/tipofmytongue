1
00:00:00,000 --> 00:00:03,360
three talks in this session the first

2
00:00:03,360 --> 00:00:07,140
talk is the dry Cold Stream Cipher the

3
00:00:07,140 --> 00:00:10,400
authors are Alexander mock must use

4
00:00:10,400 --> 00:00:14,880
Haman Matthews curse and basically mikh

5
00:00:14,880 --> 00:00:17,580
Khalif I think Alexander will give us

6
00:00:17,580 --> 00:00:20,060
the talk

7
00:01:02,460 --> 00:01:05,459
okay um thank you for the introduction

8
00:01:05,459 --> 00:01:07,580
um

9
00:01:35,700 --> 00:01:37,380
okay again uh thank you for the

10
00:01:37,380 --> 00:01:40,500
introduction uh my name is Alex uh this

11
00:01:40,500 --> 00:01:42,479
joint work with my colleagues uh

12
00:01:42,479 --> 00:01:43,979
Matthias Harmon who's also in the

13
00:01:43,979 --> 00:01:46,380
audience today and Matthias Hauser and

14
00:01:46,380 --> 00:01:48,060
Vasily michalev

15
00:01:48,060 --> 00:01:49,560
um today I'm going to talk about the new

16
00:01:49,560 --> 00:01:51,420
stream Cipher proposal that we call

17
00:01:51,420 --> 00:01:53,520
Draco

18
00:01:53,520 --> 00:01:55,380
um so first up a little bit of

19
00:01:55,380 --> 00:01:57,540
motivation was the problem with uh

20
00:01:57,540 --> 00:02:00,119
screen cyphers or what are we what are

21
00:02:00,119 --> 00:02:01,619
they trying to solve with our new

22
00:02:01,619 --> 00:02:04,439
screensaver proposal so

23
00:02:04,439 --> 00:02:07,439
um screen savers are vulnerable to to

24
00:02:07,439 --> 00:02:09,479
generic attacks called time memory data

25
00:02:09,479 --> 00:02:12,300
trade of attacks and these attacks they

26
00:02:12,300 --> 00:02:14,940
exploit the the birthday Paradox so an

27
00:02:14,940 --> 00:02:17,940
adversary who observes some keystream

28
00:02:17,940 --> 00:02:21,060
can also randomly generate some

29
00:02:21,060 --> 00:02:24,060
um internal state by by himself and

30
00:02:24,060 --> 00:02:26,120
generate some key stream from that

31
00:02:26,120 --> 00:02:28,319
Observer Collision in the in the key

32
00:02:28,319 --> 00:02:30,840
screen and eventually

33
00:02:30,840 --> 00:02:32,459
um if there is a collision a key stream

34
00:02:32,459 --> 00:02:34,020
of high probability that is due to

35
00:02:34,020 --> 00:02:36,780
internal State collision and

36
00:02:36,780 --> 00:02:39,480
if the if the adversary has the internal

37
00:02:39,480 --> 00:02:40,620
State

38
00:02:40,620 --> 00:02:43,739
um or the if he has an internal State he

39
00:02:43,739 --> 00:02:45,840
can generate from that more key screen

40
00:02:45,840 --> 00:02:47,519
or potentially even get the key from

41
00:02:47,519 --> 00:02:50,760
that and these attacks as I said

42
00:02:50,760 --> 00:02:54,239
exploded birthday Paradox so

43
00:02:54,239 --> 00:02:57,420
um to to achieve a security level of of

44
00:02:57,420 --> 00:02:59,519
and the state size needs to be at least

45
00:02:59,519 --> 00:03:04,319
uh two times n and I also copied some uh

46
00:03:04,319 --> 00:03:06,000
from

47
00:03:06,000 --> 00:03:09,720
some input from the e-screen contacts

48
00:03:09,720 --> 00:03:11,879
from from the call of papers

49
00:03:11,879 --> 00:03:14,599
um which also noted um talked about

50
00:03:14,599 --> 00:03:17,159
needing a state which is twice the key

51
00:03:17,159 --> 00:03:20,280
size and uh some more

52
00:03:20,280 --> 00:03:22,080
um

53
00:03:22,080 --> 00:03:24,360
um some more several properties for

54
00:03:24,360 --> 00:03:26,220
screen Cipher in particular any key

55
00:03:26,220 --> 00:03:28,319
recovery Tech should be at least as

56
00:03:28,319 --> 00:03:30,599
difficult it has exhaustive search and

57
00:03:30,599 --> 00:03:33,180
they also mentioned

58
00:03:33,180 --> 00:03:34,680
um distinguishing attacks to be of

59
00:03:34,680 --> 00:03:37,500
interest so what to take away from this

60
00:03:37,500 --> 00:03:39,900
is State size is typically twice a key

61
00:03:39,900 --> 00:03:43,379
size for conventional ciphers and what

62
00:03:43,379 --> 00:03:45,000
we are trying to do is we want to reduce

63
00:03:45,000 --> 00:03:48,659
the state size so the state sells in a

64
00:03:48,659 --> 00:03:51,480
hardware module induces substantial

65
00:03:51,480 --> 00:03:53,099
Hardware costs in terms of area and

66
00:03:53,099 --> 00:03:56,400
power and we want to try to reduce the

67
00:03:56,400 --> 00:03:59,819
hardware costs in particular for RFI

68
00:03:59,819 --> 00:04:01,500
detects producing millions and billions

69
00:04:01,500 --> 00:04:04,319
uh even a few cents can matter and

70
00:04:04,319 --> 00:04:06,900
reduce power and energy consumption also

71
00:04:06,900 --> 00:04:09,120
will widen application scenarios

72
00:04:09,120 --> 00:04:10,680
so

73
00:04:10,680 --> 00:04:14,040
um how do we measure Hardware costs so

74
00:04:14,040 --> 00:04:16,738
one one measure that we will consider is

75
00:04:16,738 --> 00:04:19,260
area so typically measured in Gate

76
00:04:19,260 --> 00:04:20,940
equivalence

77
00:04:20,940 --> 00:04:23,100
um one gate equivalent corresponds to

78
00:04:23,100 --> 00:04:26,520
the area of a of an ant gate um below

79
00:04:26,520 --> 00:04:29,160
you can find a table which shows you the

80
00:04:29,160 --> 00:04:31,639
hardware costs in in terms of nand gates

81
00:04:31,639 --> 00:04:35,699
and the area as he has written is

82
00:04:35,699 --> 00:04:38,580
strongly influenced by the main the chip

83
00:04:38,580 --> 00:04:39,900
area certainly influences the

84
00:04:39,900 --> 00:04:42,300
manufacturing costs and

85
00:04:42,300 --> 00:04:45,419
still uh the reasons yes the focus has

86
00:04:45,419 --> 00:04:46,680
shifted towards power and energy

87
00:04:46,680 --> 00:04:47,940
consumption

88
00:04:47,940 --> 00:04:50,040
so the first thing the note power

89
00:04:50,040 --> 00:04:51,259
doesn't equal

90
00:04:51,259 --> 00:04:55,500
energy or low cost rfids we usually they

91
00:04:55,500 --> 00:04:58,740
are usually passively powered so

92
00:04:58,740 --> 00:05:01,320
um it's an example of an electromagnetic

93
00:05:01,320 --> 00:05:05,400
field and this is important because

94
00:05:05,400 --> 00:05:06,600
um

95
00:05:06,600 --> 00:05:09,180
if we have less or difficult consumption

96
00:05:09,180 --> 00:05:10,620
tournaments whether it works all in the

97
00:05:10,620 --> 00:05:14,280
field if it um if it uh needs too much

98
00:05:14,280 --> 00:05:17,759
power and the feel is to to weak that

99
00:05:17,759 --> 00:05:20,040
probably will not work

100
00:05:20,040 --> 00:05:22,020
um also that will limit the range and

101
00:05:22,020 --> 00:05:24,660
affect the temperature and proactively

102
00:05:24,660 --> 00:05:26,580
powered rfids

103
00:05:26,580 --> 00:05:29,039
um energy consumptions also relevant I

104
00:05:29,039 --> 00:05:32,340
think it's a battery life of a pacemaker

105
00:05:32,340 --> 00:05:34,620
um when it comes to

106
00:05:34,620 --> 00:05:36,539
um call consumption we typically also

107
00:05:36,539 --> 00:05:39,419
divide between static power and dynamic

108
00:05:39,419 --> 00:05:41,940
power consumption so static uh power

109
00:05:41,940 --> 00:05:44,220
consumption here we have um may be

110
00:05:44,220 --> 00:05:46,259
caused by leakage currents so for

111
00:05:46,259 --> 00:05:49,800
example just to hold a constant value uh

112
00:05:49,800 --> 00:05:52,139
and dynamic power consumption on the

113
00:05:52,139 --> 00:05:53,759
other hand is caused by switching it

114
00:05:53,759 --> 00:05:55,500
activity

115
00:05:55,500 --> 00:06:01,380
um in particular for changing values and

116
00:06:01,380 --> 00:06:03,720
for moderate clock frequencies Dynamic

117
00:06:03,720 --> 00:06:05,940
power consumption will dominate a static

118
00:06:05,940 --> 00:06:08,280
power consumption and we will also

119
00:06:08,280 --> 00:06:11,160
explore that in our screen server

120
00:06:11,160 --> 00:06:13,199
proposal but more on that later

121
00:06:13,199 --> 00:06:14,639
so

122
00:06:14,639 --> 00:06:17,039
um before we move on what cybers exist

123
00:06:17,039 --> 00:06:18,120
in the field

124
00:06:18,120 --> 00:06:19,800
um there exists already a couple of

125
00:06:19,800 --> 00:06:23,280
small set ciphers so what are what do

126
00:06:23,280 --> 00:06:25,800
small states do in the first place well

127
00:06:25,800 --> 00:06:27,600
they divide the state into a volatile

128
00:06:27,600 --> 00:06:30,960
and non-volent entire part so the

129
00:06:30,960 --> 00:06:33,620
um the non-volatile part of civilism

130
00:06:33,620 --> 00:06:36,000
external resource that is not kept in

131
00:06:36,000 --> 00:06:39,060
The Cypher Hardware module and some

132
00:06:39,060 --> 00:06:41,460
stream server proposals that were

133
00:06:41,460 --> 00:06:43,199
already made were sprout plant like food

134
00:06:43,199 --> 00:06:44,940
and atom

135
00:06:44,940 --> 00:06:46,440
um

136
00:06:46,440 --> 00:06:48,360
they are all vulnerable to a

137
00:06:48,360 --> 00:06:50,400
distinguishing attack uh limiting the

138
00:06:50,400 --> 00:06:52,979
security to half of the volatile State

139
00:06:52,979 --> 00:06:54,020
size

140
00:06:54,020 --> 00:06:57,180
and my colleagues and I we made a we

141
00:06:57,180 --> 00:07:00,000
made a suggestion at SEC 2019 where

142
00:07:00,000 --> 00:07:03,419
instead of using the key during key

143
00:07:03,419 --> 00:07:05,280
stream Generation

144
00:07:05,280 --> 00:07:07,259
Um as sprout plant and fruit fruit and

145
00:07:07,259 --> 00:07:11,039
atom do we propose a proof where we

146
00:07:11,039 --> 00:07:13,380
continuously during Keystone generation

147
00:07:13,380 --> 00:07:16,680
use the non-volatile IV

148
00:07:16,680 --> 00:07:19,080
um there however does not exist any

149
00:07:19,080 --> 00:07:23,880
concrete cyber proposal for this scheme

150
00:07:23,880 --> 00:07:28,139
um so what do we do uh we wanted to to

151
00:07:28,139 --> 00:07:30,120
improve on the on the bound of the

152
00:07:30,120 --> 00:07:33,539
previous work in the previous work we

153
00:07:33,539 --> 00:07:37,440
um use the only the um non-volatile IV

154
00:07:37,440 --> 00:07:39,840
in this work we'll also use a key prefix

155
00:07:39,840 --> 00:07:43,020
in our non-volatile state and basically

156
00:07:43,020 --> 00:07:45,060
to prove security we use the same model

157
00:07:45,060 --> 00:07:49,440
as uh as in sex 2019 uh just slightly

158
00:07:49,440 --> 00:07:52,199
modified so we can so we have an easier

159
00:07:52,199 --> 00:07:53,180
proof

160
00:07:53,180 --> 00:07:56,460
and what matters in particular for this

161
00:07:56,460 --> 00:07:57,479
uh

162
00:07:57,479 --> 00:08:00,539
for this model is that all tmddo attacks

163
00:08:00,539 --> 00:08:02,280
for the classical

164
00:08:02,280 --> 00:08:05,400
um ciphers for the uh cyphers

165
00:08:05,400 --> 00:08:07,199
continuously using the key contingency

166
00:08:07,199 --> 00:08:09,660
using AV and and the one that we propose

167
00:08:09,660 --> 00:08:12,180
or use the IV and a key prefix

168
00:08:12,180 --> 00:08:14,940
um All the known uh tmdto attacks they

169
00:08:14,940 --> 00:08:17,460
also work in in this model

170
00:08:17,460 --> 00:08:21,300
um and um the proofs uh in this in this

171
00:08:21,300 --> 00:08:25,220
work we show only the proof for for the

172
00:08:28,440 --> 00:08:29,220
um

173
00:08:29,220 --> 00:08:31,259
new construction

174
00:08:31,259 --> 00:08:33,659
um but uh the lower bounds and the upper

175
00:08:33,659 --> 00:08:36,360
bounds match for all the deconstruction

176
00:08:36,360 --> 00:08:37,260
um

177
00:08:37,260 --> 00:08:40,440
that uh have been mentioned here

178
00:08:40,440 --> 00:08:43,080
uh what we also do we introduce a packet

179
00:08:43,080 --> 00:08:46,260
I also talk more on that later basically

180
00:08:46,260 --> 00:08:49,200
what we do is we limit the amount of key

181
00:08:49,200 --> 00:08:52,440
screen generated per kiv pair and I will

182
00:08:52,440 --> 00:08:56,459
later elaborate why this is uh legit

183
00:08:56,459 --> 00:08:58,740
um and then we present a screensaver

184
00:08:58,740 --> 00:09:00,779
based basically upon this uh called

185
00:09:00,779 --> 00:09:02,459
Graco

186
00:09:02,459 --> 00:09:03,720
um

187
00:09:03,720 --> 00:09:06,959
Greg was a 128 bit secret key and a

188
00:09:06,959 --> 00:09:09,300
128-bit volatile internal State and a

189
00:09:09,300 --> 00:09:12,360
non-volatile part with a 96

190
00:09:12,360 --> 00:09:15,360
it's normal style IB and a 32-bit key

191
00:09:15,360 --> 00:09:16,560
prefix

192
00:09:16,560 --> 00:09:19,440
so uh to prove the

193
00:09:19,440 --> 00:09:20,040
um

194
00:09:20,040 --> 00:09:23,760
to prove the security in a generic sense

195
00:09:23,760 --> 00:09:26,399
uh we sort of need to abstract from some

196
00:09:26,399 --> 00:09:28,920
screen ciphers so basically how the

197
00:09:28,920 --> 00:09:31,140
screen Cipher generate

198
00:09:31,140 --> 00:09:33,000
um heat stream

199
00:09:33,000 --> 00:09:33,720
um

200
00:09:33,720 --> 00:09:34,980
so

201
00:09:34,980 --> 00:09:37,320
initially we have the key in the IV the

202
00:09:37,320 --> 00:09:39,660
IV is called X in this case

203
00:09:39,660 --> 00:09:41,459
um and initially we load it into the

204
00:09:41,459 --> 00:09:44,040
hardware module uh we will not be very

205
00:09:44,040 --> 00:09:45,779
concerned in the proof of the loading

206
00:09:45,779 --> 00:09:48,839
it's just some nice notation uh but next

207
00:09:48,839 --> 00:09:51,360
thing is we will initialize

208
00:09:51,360 --> 00:09:55,019
um where we permute or mix the volatile

209
00:09:55,019 --> 00:09:56,940
internal State

210
00:09:56,940 --> 00:09:59,160
um get an initial state from that update

211
00:09:59,160 --> 00:10:02,100
one state to the next and from from this

212
00:10:02,100 --> 00:10:06,120
internal State uh here called y i we

213
00:10:06,120 --> 00:10:08,459
feed it into the output function and and

214
00:10:08,459 --> 00:10:11,880
get an output with z i and then next

215
00:10:11,880 --> 00:10:15,060
thing we do we update get a new Yi feed

216
00:10:15,060 --> 00:10:18,000
into the output function and so on

217
00:10:18,000 --> 00:10:18,779
um

218
00:10:18,779 --> 00:10:21,839
so as I said we also introduce a packet

219
00:10:21,839 --> 00:10:22,560
mode

220
00:10:22,560 --> 00:10:24,540
what basically means we limit the amount

221
00:10:24,540 --> 00:10:27,060
of key screen bits uh that can be output

222
00:10:27,060 --> 00:10:28,800
for key IV

223
00:10:28,800 --> 00:10:31,680
um combination after that limit has been

224
00:10:31,680 --> 00:10:34,920
reached the new ID must be used and the

225
00:10:34,920 --> 00:10:36,779
nice thing about this in particular is

226
00:10:36,779 --> 00:10:40,200
that two packets with different IVs

227
00:10:40,200 --> 00:10:42,660
share No internal State

228
00:10:42,660 --> 00:10:43,500
um

229
00:10:43,500 --> 00:10:46,500
this means if we can consider the entire

230
00:10:46,500 --> 00:10:48,720
State non-volatile and volatile State

231
00:10:48,720 --> 00:10:52,380
combined as we use the IV in in the

232
00:10:52,380 --> 00:10:55,560
non-volatile state and we have two

233
00:10:55,560 --> 00:10:57,300
different IVs

234
00:10:57,300 --> 00:10:59,579
well they are different so they can

235
00:10:59,579 --> 00:11:00,779
Collide

236
00:11:00,779 --> 00:11:01,560
um

237
00:11:01,560 --> 00:11:04,140
talking about uh packet mode why is this

238
00:11:04,140 --> 00:11:06,000
reasonable

239
00:11:06,000 --> 00:11:08,220
um so here are a couple of protocols A51

240
00:11:08,220 --> 00:11:11,060
used in GSM Bluetooth wireless

241
00:11:11,060 --> 00:11:15,720
networking and TLS and they they all

242
00:11:15,720 --> 00:11:18,060
limit the amount of data encrypted for

243
00:11:18,060 --> 00:11:20,519
for giv pair

244
00:11:20,519 --> 00:11:22,860
um TLS being the larger scale with two

245
00:11:22,860 --> 00:11:24,720
to the power of 18 bits

246
00:11:24,720 --> 00:11:26,160
um

247
00:11:26,160 --> 00:11:28,980
Draco as I will introduce later we'll

248
00:11:28,980 --> 00:11:30,420
actually have a limit of 2 to the power

249
00:11:30,420 --> 00:11:34,620
of 32 so I think it's legit to limit the

250
00:11:34,620 --> 00:11:37,200
amount of Keystone bits generator eib

251
00:11:37,200 --> 00:11:38,940
pair

252
00:11:38,940 --> 00:11:40,560
um so how do we prove

253
00:11:40,560 --> 00:11:44,220
security basically the um

254
00:11:44,220 --> 00:11:46,260
the initialization function and the

255
00:11:46,260 --> 00:11:48,720
output function are replaced by a random

256
00:11:48,720 --> 00:11:51,660
permutation and a random function

257
00:11:51,660 --> 00:11:53,700
um for the initialization only the

258
00:11:53,700 --> 00:11:56,100
volatile state is permuted and for each

259
00:11:56,100 --> 00:11:58,019
non-volatile state we pick a new uh

260
00:11:58,019 --> 00:11:59,420
random

261
00:11:59,420 --> 00:12:02,820
random permutation and the output

262
00:12:02,820 --> 00:12:04,800
function is also placed by a by a random

263
00:12:04,800 --> 00:12:06,959
function I had some comments by the

264
00:12:06,959 --> 00:12:08,880
reviews and also some some colleagues

265
00:12:08,880 --> 00:12:11,399
that this is pretty strong what uh but

266
00:12:11,399 --> 00:12:14,279
what matters that doing the proofs for

267
00:12:14,279 --> 00:12:16,800
all of the constructions

268
00:12:16,800 --> 00:12:19,800
um considered so far

269
00:12:19,800 --> 00:12:23,820
all of the attacks that we've seen

270
00:12:23,820 --> 00:12:25,860
um previously on the Cyrus they still

271
00:12:25,860 --> 00:12:27,540
work in that model so I I think it's

272
00:12:27,540 --> 00:12:30,600
legally to model it that way

273
00:12:30,600 --> 00:12:31,560
um

274
00:12:31,560 --> 00:12:35,040
so I don't want to do the proof in in

275
00:12:35,040 --> 00:12:38,279
much detail just give me some idea so

276
00:12:38,279 --> 00:12:40,079
basically we have a chosen IV attacker

277
00:12:40,079 --> 00:12:42,000
the attacker can query the construction

278
00:12:42,000 --> 00:12:44,519
as well as the random permutation the

279
00:12:44,519 --> 00:12:46,680
random function

280
00:12:46,680 --> 00:12:48,720
um

281
00:12:48,720 --> 00:12:49,399
um

282
00:12:49,399 --> 00:12:53,459
after the adversary has

283
00:12:53,459 --> 00:12:56,579
let's finish the interaction with the uh

284
00:12:56,579 --> 00:12:58,880
with the RS listed construction

285
00:12:58,880 --> 00:13:01,560
and the random functions it will receive

286
00:13:01,560 --> 00:13:04,860
the internal states that occur I mean if

287
00:13:04,860 --> 00:13:07,139
you do a construction query for KX and

288
00:13:07,139 --> 00:13:10,440
get zy you'll get some intermediate

289
00:13:10,440 --> 00:13:12,540
um internal States we will give that to

290
00:13:12,540 --> 00:13:15,000
the adversary in the end and we'll also

291
00:13:15,000 --> 00:13:17,120
give the key to the adversary in the end

292
00:13:17,120 --> 00:13:19,860
uh all of that is collected in a

293
00:13:19,860 --> 00:13:22,620
transcript and using the H coefficient

294
00:13:22,620 --> 00:13:24,720
Technique we get the bound that is shown

295
00:13:24,720 --> 00:13:26,399
on slides

296
00:13:26,399 --> 00:13:28,399
um basically you can see that

297
00:13:28,399 --> 00:13:30,959
the first term tells you that security

298
00:13:30,959 --> 00:13:34,260
is limited by the key length and the

299
00:13:34,260 --> 00:13:36,360
second term tells you that security is

300
00:13:36,360 --> 00:13:40,339
limited by the volatile State length

301
00:13:40,380 --> 00:13:44,100
um okay so now we can introduce gray

302
00:13:44,100 --> 00:13:48,120
code so that's that's the cipher it uh

303
00:13:48,120 --> 00:13:50,100
it was inspired by grains as a grain

304
00:13:50,100 --> 00:13:53,339
like like structure we use a 128 bit key

305
00:13:53,339 --> 00:13:55,079
128 uh

306
00:13:55,079 --> 00:13:57,600
with volatile state that is in this case

307
00:13:57,600 --> 00:14:01,320
divided between those two nfsrs

308
00:14:01,320 --> 00:14:03,660
um the non-volatile state consists of

309
00:14:03,660 --> 00:14:05,660
96-bit uh

310
00:14:05,660 --> 00:14:11,100
IV and uh 30-bit key prefix the nfsrs

311
00:14:11,100 --> 00:14:14,060
are based uh the nfsr1 is based on

312
00:14:14,060 --> 00:14:17,040
afterpan and has a maximum period of t

313
00:14:17,040 --> 00:14:20,040
to the power of 33. and the other one is

314
00:14:20,040 --> 00:14:23,459
based on grain 128a and data

315
00:14:23,459 --> 00:14:26,839
initialization takes uh takes 512 cycles

316
00:14:26,839 --> 00:14:30,360
and the packet length is 2 to the power

317
00:14:30,360 --> 00:14:33,120
of 32 bits so

318
00:14:33,120 --> 00:14:36,060
um yeah as I said earlier we limit an

319
00:14:36,060 --> 00:14:38,579
amount of key stream generator or kia V

320
00:14:38,579 --> 00:14:40,079
pair

321
00:14:40,079 --> 00:14:41,279
um

322
00:14:41,279 --> 00:14:45,120
what we also did we

323
00:14:45,120 --> 00:14:47,699
um we considered uh

324
00:14:47,699 --> 00:14:49,860
for implementation variants of Graco

325
00:14:49,860 --> 00:14:52,079
basically the regular variant of

326
00:14:52,079 --> 00:14:54,959
critical is where the key prefix is

327
00:14:54,959 --> 00:14:55,560
um

328
00:14:55,560 --> 00:14:57,839
key prefix and IV are both externally

329
00:14:57,839 --> 00:14:59,940
available then we have the K version

330
00:14:59,940 --> 00:15:04,260
with um with the key

331
00:15:04,260 --> 00:15:07,079
um in the hardware module if the IV is

332
00:15:07,079 --> 00:15:09,779
externally available

333
00:15:09,779 --> 00:15:12,779
um the index I version if the IV is in

334
00:15:12,779 --> 00:15:15,120
the Draco Hardware module and the key

335
00:15:15,120 --> 00:15:18,240
prefix is externally available in the Ki

336
00:15:18,240 --> 00:15:21,060
is if both key prefix and IV are inside

337
00:15:21,060 --> 00:15:23,639
Graco software module

338
00:15:23,639 --> 00:15:24,600
um

339
00:15:24,600 --> 00:15:26,880
so now there's a problem with Graco

340
00:15:26,880 --> 00:15:29,220
which you will see in a next talk

341
00:15:29,220 --> 00:15:31,740
um next talk will present the

342
00:15:31,740 --> 00:15:34,079
distinguishing attack on Draco with 107

343
00:15:34,079 --> 00:15:36,660
bits of complexity uh I have a typo here

344
00:15:36,660 --> 00:15:39,899
I checked again it was 107 bits

345
00:15:39,899 --> 00:15:42,180
um so I don't want to go too much into

346
00:15:42,180 --> 00:15:45,180
detail but basically what was the issue

347
00:15:45,180 --> 00:15:48,060
we have a small key prefix the period of

348
00:15:48,060 --> 00:15:50,000
the um

349
00:15:50,000 --> 00:15:53,399
schedule bit is small basically this DT

350
00:15:53,399 --> 00:15:55,320
you have there in in the in the second

351
00:15:55,320 --> 00:16:01,079
line You'll see we have the k k x or X

352
00:16:01,079 --> 00:16:02,519
um and we will see that the period of

353
00:16:02,519 --> 00:16:05,880
this part will be 32 times 97 which is

354
00:16:05,880 --> 00:16:07,260
pretty pretty

355
00:16:07,260 --> 00:16:08,040
um

356
00:16:08,040 --> 00:16:11,339
small and for some of these this uh D

357
00:16:11,339 --> 00:16:13,920
value can be zeroed for several clock

358
00:16:13,920 --> 00:16:17,100
cycles and that basically broke the

359
00:16:17,100 --> 00:16:19,800
cipher and the quick fix to this is

360
00:16:19,800 --> 00:16:22,139
basically to extend the key prefix to

361
00:16:22,139 --> 00:16:25,079
full one 28 bits

362
00:16:25,079 --> 00:16:25,980
um

363
00:16:25,980 --> 00:16:28,199
that only marginally affects variants

364
00:16:28,199 --> 00:16:31,079
with an external uh key prefix but if we

365
00:16:31,079 --> 00:16:33,420
keep the key prefix on that case the

366
00:16:33,420 --> 00:16:34,920
entire key inside the Draco Hardware

367
00:16:34,920 --> 00:16:37,860
module that will significantly worsen

368
00:16:37,860 --> 00:16:39,000
the

369
00:16:39,000 --> 00:16:41,699
um the hardware requirements so here you

370
00:16:41,699 --> 00:16:43,500
can see a comparison of the original

371
00:16:43,500 --> 00:16:45,959
variant of Graco and the one with the

372
00:16:45,959 --> 00:16:48,839
with the Quick Fix uh basically Quick

373
00:16:48,839 --> 00:16:52,019
Fix is the one with a lot

374
00:16:52,019 --> 00:16:55,199
with a large key prefix and you can see

375
00:16:55,199 --> 00:16:57,480
in the in the black one which is the um

376
00:16:57,480 --> 00:17:00,139
which is basically the regular variant

377
00:17:00,139 --> 00:17:03,420
and the green one that

378
00:17:03,420 --> 00:17:06,119
the Quick Fix didn't do much of damage

379
00:17:06,119 --> 00:17:09,119
but if you keep the key and the uh key

380
00:17:09,119 --> 00:17:11,280
uh inside the hardware module numbers

381
00:17:11,280 --> 00:17:13,319
got significantly worse

382
00:17:13,319 --> 00:17:15,140
so

383
00:17:15,140 --> 00:17:18,240
we were wondering how can we go back to

384
00:17:18,240 --> 00:17:21,660
a 32-bit key prefix

385
00:17:21,660 --> 00:17:23,780
um

386
00:17:23,939 --> 00:17:26,520
so we came up with a new kiv schedule

387
00:17:26,520 --> 00:17:28,740
and as you can see in the title this is

388
00:17:28,740 --> 00:17:30,600
work in progress so we're currently

389
00:17:30,600 --> 00:17:34,679
working on this basically going back to

390
00:17:34,679 --> 00:17:37,200
a um

391
00:17:37,200 --> 00:17:40,919
back to Thursday key prefix and the idea

392
00:17:40,919 --> 00:17:42,840
is basically to use

393
00:17:42,840 --> 00:17:45,000
um again in this DT in the last line

394
00:17:45,000 --> 00:17:49,080
You'll see we will choose two key uh

395
00:17:49,080 --> 00:17:51,539
prefix picks cyclically one from the

396
00:17:51,539 --> 00:17:55,440
first 15 bits one from the last 17 bits

397
00:17:55,440 --> 00:17:58,860
and and a third key prefix bit is

398
00:17:58,860 --> 00:18:00,720
calculated from address which is taken

399
00:18:00,720 --> 00:18:04,980
from nfsr1 According to to

400
00:18:04,980 --> 00:18:06,559
um the last line

401
00:18:06,559 --> 00:18:10,140
and we ran that again

402
00:18:10,140 --> 00:18:11,340
um

403
00:18:11,340 --> 00:18:13,500
have the updated numbers on on Graco

404
00:18:13,500 --> 00:18:15,299
again

405
00:18:15,299 --> 00:18:16,799
um for each variant the one the first

406
00:18:16,799 --> 00:18:19,140
was the original variant which was

407
00:18:19,140 --> 00:18:23,760
broken and the new work in progress uh

408
00:18:23,760 --> 00:18:27,120
variant seems to be uh promising and as

409
00:18:27,120 --> 00:18:29,640
you can see numbers got a little worse

410
00:18:29,640 --> 00:18:32,460
but not as dramatically as before

411
00:18:32,460 --> 00:18:36,080
so um thank you

412
00:18:39,059 --> 00:18:42,360
okay thanks Alexander are there any

413
00:18:42,360 --> 00:18:45,740
questions in Kobe

414
00:18:49,799 --> 00:18:54,740
is there any questions in wait okay

415
00:19:07,380 --> 00:19:08,280
um

416
00:19:08,280 --> 00:19:09,320
um

417
00:19:09,320 --> 00:19:12,660
for the stream server dry core we know

418
00:19:12,660 --> 00:19:16,559
that the ofs1 on the pure real job

419
00:19:16,559 --> 00:19:18,840
without alternate sequences of omega

420
00:19:18,840 --> 00:19:22,559
star one has The Surreal job 2 to the

421
00:19:22,559 --> 00:19:23,840
power of

422
00:19:23,840 --> 00:19:28,140
33 then uh for the

423
00:19:28,140 --> 00:19:28,700
um

424
00:19:28,700 --> 00:19:34,500
if a lot of tips is high so I have I I

425
00:19:34,500 --> 00:19:38,580
have a question is that what about the

426
00:19:38,580 --> 00:19:40,740
delay of the

427
00:19:40,740 --> 00:19:44,059
it's a dream so far

428
00:19:45,960 --> 00:19:47,640
I'm sorry I didn't understand the

429
00:19:47,640 --> 00:19:49,820
question

430
00:19:51,200 --> 00:19:52,740
[Music]

431
00:19:52,740 --> 00:19:55,340
uh

432
00:19:59,360 --> 00:20:01,740
let me see

433
00:20:01,740 --> 00:20:05,000
oh we know that the um fsr1

434
00:20:05,000 --> 00:20:09,900
is uh has the maximum sure rate which

435
00:20:09,900 --> 00:20:13,440
means that which means that is feedback

436
00:20:13,440 --> 00:20:16,679
function will have a large monomial

437
00:20:16,679 --> 00:20:20,120
and this will lead to

438
00:20:20,120 --> 00:20:24,179
the Deep the large tips of this Boolean

439
00:20:24,179 --> 00:20:28,039
function is very high right

440
00:20:32,400 --> 00:20:34,559
um when it comes to the implementation

441
00:20:34,559 --> 00:20:37,200
my colleague was actually involved in

442
00:20:37,200 --> 00:20:39,360
this maybe he can ask answer this

443
00:20:39,360 --> 00:20:41,600
question

444
00:20:42,320 --> 00:20:45,299
hey my name is Matthias Harman so as far

445
00:20:45,299 --> 00:20:46,559
as I understood you were talking about

446
00:20:46,559 --> 00:20:49,860
uh because nfsr won

447
00:20:49,860 --> 00:20:51,780
um being non-linear but still having the

448
00:20:51,780 --> 00:20:53,400
maximum period

449
00:20:53,400 --> 00:20:56,220
um you you were referring to it will

450
00:20:56,220 --> 00:20:58,740
probably have quite complicated uh

451
00:20:58,740 --> 00:21:01,080
complicated terms leading to a large

452
00:21:01,080 --> 00:21:05,880
delay and therefore causing a uh um a

453
00:21:05,880 --> 00:21:08,820
large critical path and therefore a a

454
00:21:08,820 --> 00:21:10,919
small maximum clock frequency this was

455
00:21:10,919 --> 00:21:15,720
your fear so to speak right yes yes yeah

456
00:21:15,720 --> 00:21:18,299
um actually I do not have the delay

457
00:21:18,299 --> 00:21:20,160
um with me here but what I can tell you

458
00:21:20,160 --> 00:21:22,980
is we had for example in in the table

459
00:21:22,980 --> 00:21:25,020
that Alex presented

460
00:21:25,020 --> 00:21:27,960
um we we had it synthesized for uh over

461
00:21:27,960 --> 00:21:30,960
one gigahertz and that it was not a

462
00:21:30,960 --> 00:21:33,000
problem so I do not have the precise

463
00:21:33,000 --> 00:21:35,640
number for it but it's like uh it's

464
00:21:35,640 --> 00:21:38,100
absolutely comparable to all the others

465
00:21:38,100 --> 00:21:39,900
um the idea is

466
00:21:39,900 --> 00:21:43,140
um as Alex was talking this uh nfsr's

467
00:21:43,140 --> 00:21:45,360
feedback function is taken from uh it's

468
00:21:45,360 --> 00:21:47,460
not our own it's taken from one of the

469
00:21:47,460 --> 00:21:50,159
nfsrs of achtaban which was the e-stream

470
00:21:50,159 --> 00:21:52,860
candidate and uh they went into great

471
00:21:52,860 --> 00:21:55,799
detail to create a very also the

472
00:21:55,799 --> 00:21:58,020
hardware footprint is very very small so

473
00:21:58,020 --> 00:22:01,260
it's just I think 30 gate equivalents or

474
00:22:01,260 --> 00:22:02,400
a little bit more than 30 gate

475
00:22:02,400 --> 00:22:04,260
equivalents so it's a very small

476
00:22:04,260 --> 00:22:06,000
Hardware footprint for the for the

477
00:22:06,000 --> 00:22:07,740
feedback function there

478
00:22:07,740 --> 00:22:09,179
um so it's highly optimized and

479
00:22:09,179 --> 00:22:11,820
therefore it also has a very small delay

480
00:22:11,820 --> 00:22:13,980
it's a very particular function

481
00:22:13,980 --> 00:22:16,700
okay okay but it is

482
00:22:16,700 --> 00:22:20,340
another stream Cipher Lisa the only

483
00:22:20,340 --> 00:22:24,000
accessor one is true to the surround of

484
00:22:24,000 --> 00:22:27,440
which is 2 to the power of

485
00:22:27,440 --> 00:22:32,760
31 minus one so uh why not

486
00:22:32,760 --> 00:22:36,299
because I know that's a stream Cipher

487
00:22:36,299 --> 00:22:41,400
useful proposed by uh your team yeah

488
00:22:41,400 --> 00:22:45,120
um the the thing there was actually the

489
00:22:45,120 --> 00:22:48,480
um the original octavans um uh feedback

490
00:22:48,480 --> 00:22:50,400
function actually as far as I remember

491
00:22:50,400 --> 00:22:54,360
also had two to the power of n minus one

492
00:22:54,360 --> 00:22:56,520
um but the problem for all those ciphers

493
00:22:56,520 --> 00:22:58,380
and this is what actually broke um

494
00:22:58,380 --> 00:23:01,440
Sprout the initial continuous key Cipher

495
00:23:01,440 --> 00:23:04,020
was the problem that if after

496
00:23:04,020 --> 00:23:06,600
initialization this uh this register

497
00:23:06,600 --> 00:23:09,179
ends up in an all zero state it will

498
00:23:09,179 --> 00:23:11,340
never leave the all serious state after

499
00:23:11,340 --> 00:23:13,320
initialization if it's 2 to the power of

500
00:23:13,320 --> 00:23:17,460
n minus one and uh therefore uh yeah you

501
00:23:17,460 --> 00:23:19,080
have a you have a huge problem after

502
00:23:19,080 --> 00:23:21,179
that and it led for example to attacks

503
00:23:21,179 --> 00:23:23,520
against Sprout and so on but as this is

504
00:23:23,520 --> 00:23:25,140
a non-linear feedback shift register

505
00:23:25,140 --> 00:23:28,320
it's easy by adding one single term with

506
00:23:28,320 --> 00:23:30,960
a with a one single monomial

507
00:23:30,960 --> 00:23:33,539
um with um

508
00:23:33,539 --> 00:23:36,120
um yeah a lot of TAPS so to speak

509
00:23:36,120 --> 00:23:38,039
um by turning it from the Power of 2 to

510
00:23:38,039 --> 00:23:39,539
the power of n minus one to two to the

511
00:23:39,539 --> 00:23:41,940
power of n and by that we avoid the all

512
00:23:41,940 --> 00:23:44,100
zero state so we do not have to care at

513
00:23:44,100 --> 00:23:46,080
all about after the initialization

514
00:23:46,080 --> 00:23:48,299
whether there is this tiny probability

515
00:23:48,299 --> 00:23:49,980
of ending up in the all zero State

516
00:23:49,980 --> 00:23:51,900
because it eventually will leave it

517
00:23:51,900 --> 00:23:53,880
again in the next step

518
00:23:53,880 --> 00:23:56,299
okay

519
00:24:01,820 --> 00:24:05,460
just like this uh on streams have a

520
00:24:05,460 --> 00:24:08,179
child called

521
00:24:08,280 --> 00:24:12,299
um do you consider or replace the revers

522
00:24:12,299 --> 00:24:15,059
or one by our larger

523
00:24:15,059 --> 00:24:17,159
um pure realtor

524
00:24:17,159 --> 00:24:18,720
foreign

525
00:24:18,720 --> 00:24:21,720
the the problem there is actually that

526
00:24:21,720 --> 00:24:23,880
for Elephants us you have a very nice

527
00:24:23,880 --> 00:24:26,280
mathematical Theory how to create large

528
00:24:26,280 --> 00:24:28,860
nfsrs with full elephants with full

529
00:24:28,860 --> 00:24:29,880
period

530
00:24:29,880 --> 00:24:32,460
um for nfsrs you do not have this expect

531
00:24:32,460 --> 00:24:35,100
except for very particular cases for

532
00:24:35,100 --> 00:24:37,080
nfsrs which have some

533
00:24:37,080 --> 00:24:39,960
um not so nice properties so for NFL

534
00:24:39,960 --> 00:24:42,539
nice properties you do not have a theory

535
00:24:42,539 --> 00:24:44,520
how to create those with a very large

536
00:24:44,520 --> 00:24:47,880
period and uh they these we have to up

537
00:24:47,880 --> 00:24:50,340
to this period and this size uh they're

538
00:24:50,340 --> 00:24:52,799
actually basically uh based on some

539
00:24:52,799 --> 00:24:54,600
Theory but also based on a lot of

540
00:24:54,600 --> 00:24:58,080
experimental checkup uh found so uh if

541
00:24:58,080 --> 00:25:00,659
someone comes up with nfsrs with a

542
00:25:00,659 --> 00:25:04,140
larger period uh maximum period uh so a

543
00:25:04,140 --> 00:25:05,400
larger emphasized with the maximum

544
00:25:05,400 --> 00:25:07,080
period with nice cryptographic

545
00:25:07,080 --> 00:25:10,020
properties I'm the first one to use it

546
00:25:10,020 --> 00:25:13,020
essential

547
00:25:15,659 --> 00:25:18,980
there any more questions

548
00:25:20,400 --> 00:25:24,720
okay then maybe there's a question from

549
00:25:24,720 --> 00:25:28,520
Kobe's so one question

550
00:25:29,279 --> 00:25:32,220
uh so so my question is very simple and

551
00:25:32,220 --> 00:25:34,919
low yeah maybe stupid one so you're

552
00:25:34,919 --> 00:25:37,799
showing the implementation figures and

553
00:25:37,799 --> 00:25:40,020
I'm just curious what is the

554
00:25:40,020 --> 00:25:43,500
your ultimate goal for the size of the

555
00:25:43,500 --> 00:25:47,279
Supreme Cipher in this case and yeah

556
00:25:47,279 --> 00:25:49,620
well so the ultimate goal is to keep it

557
00:25:49,620 --> 00:25:51,539
as small as possible of course

558
00:25:51,539 --> 00:25:54,120
um the thing is actually we were

559
00:25:54,120 --> 00:25:57,360
focusing on on the power aspect here

560
00:25:57,360 --> 00:26:00,179
um because actually uh in I would say

561
00:26:00,179 --> 00:26:02,460
about 10 years ago everyone was focusing

562
00:26:02,460 --> 00:26:04,080
on area

563
00:26:04,080 --> 00:26:05,640
um but actually we were also told with

564
00:26:05,640 --> 00:26:07,380
context from industry that the focus is

565
00:26:07,380 --> 00:26:10,260
more shifting towards power consumption

566
00:26:10,260 --> 00:26:14,100
and energy consumption so for us it was

567
00:26:14,100 --> 00:26:17,539
like the thing is

568
00:26:18,799 --> 00:26:21,659
in terms of for example when Alex was

569
00:26:21,659 --> 00:26:22,919
talking about the static power

570
00:26:22,919 --> 00:26:24,779
consumption of a flip-flop which is not

571
00:26:24,779 --> 00:26:27,539
clock then the more flip-flops you have

572
00:26:27,539 --> 00:26:30,179
the more larger representative sizes the

573
00:26:30,179 --> 00:26:32,279
area will uh will grow and also the

574
00:26:32,279 --> 00:26:33,779
power consumption

575
00:26:33,779 --> 00:26:36,000
um will grow but what actually the the

576
00:26:36,000 --> 00:26:38,220
very interesting thing is um and this is

577
00:26:38,220 --> 00:26:39,900
what sets the cipher apart for example

578
00:26:39,900 --> 00:26:42,900
for for grain the Paradigm was okay oh

579
00:26:42,900 --> 00:26:45,840
and also in in the past the Paradigm was

580
00:26:45,840 --> 00:26:48,419
if I have those flip-flops let's use

581
00:26:48,419 --> 00:26:50,220
them let's clock them let's change their

582
00:26:50,220 --> 00:26:53,100
values very often for this very last

583
00:26:53,100 --> 00:26:55,500
line that we have where we uh this great

584
00:26:55,500 --> 00:26:57,600
implementation variant where we actually

585
00:26:57,600 --> 00:27:00,059
also see do not assume anything we do

586
00:27:00,059 --> 00:27:01,799
not assume that we can continuously

587
00:27:01,799 --> 00:27:03,720
actually access the key from external

588
00:27:03,720 --> 00:27:06,059
and the IB just in the first clock we

589
00:27:06,059 --> 00:27:07,860
load them to the cipher module and store

590
00:27:07,860 --> 00:27:10,440
them there in registers but what we make

591
00:27:10,440 --> 00:27:13,679
use of is that half of this part this

592
00:27:13,679 --> 00:27:15,480
key prefix in the IV which are loaded

593
00:27:15,480 --> 00:27:17,460
which are stored then in registers they

594
00:27:17,460 --> 00:27:19,559
are not clocked

595
00:27:19,559 --> 00:27:21,720
um we just need them so we have just a

596
00:27:21,720 --> 00:27:23,520
static power consumption there so we

597
00:27:23,520 --> 00:27:26,220
have the practically we have the dynamic

598
00:27:26,220 --> 00:27:28,080
power consumption of the cipher which

599
00:27:28,080 --> 00:27:29,700
makes it a very power efficient

600
00:27:29,700 --> 00:27:31,919
especially already for for as you see

601
00:27:31,919 --> 00:27:34,080
clock friends for clock frequencies and

602
00:27:34,080 --> 00:27:36,539
10 megahertz so there is a little bit of

603
00:27:36,539 --> 00:27:40,140
playing together of area and power

604
00:27:40,140 --> 00:27:42,539
consumption but our Focus here clearly

605
00:27:42,539 --> 00:27:44,640
is actually on on the power consumption

606
00:27:44,640 --> 00:27:45,380
part

607
00:27:45,380 --> 00:27:47,880
yeah I understand thank you thank you

608
00:27:47,880 --> 00:27:50,120
very much

609
00:27:50,179 --> 00:27:52,740
thank you the speakers and the

610
00:27:52,740 --> 00:27:56,039
colleagues Now we move to the second

611
00:27:56,039 --> 00:27:59,100
talk of this session Crypt analysis of

612
00:27:59,100 --> 00:28:02,000
Draco the author is

613
00:28:02,000 --> 00:28:05,400
I think Sandeep will give us a talk some

614
00:28:05,400 --> 00:28:08,120
people are you online

615
00:28:13,279 --> 00:28:16,080
unfortunately I have not seen the

616
00:28:16,080 --> 00:28:18,000
speaker for the second talk

617
00:28:18,000 --> 00:28:20,460
but the speaker for the third talk is

618
00:28:20,460 --> 00:28:23,480
ready to go ahead

619
00:28:24,000 --> 00:28:28,980
okay then maybe we just move to the

620
00:28:28,980 --> 00:28:31,860
third talk of this session

621
00:28:31,860 --> 00:28:35,220
the title of these papers attacks on the

622
00:28:35,220 --> 00:28:40,640
fire kite Cipher the authors are Wu

623
00:28:42,860 --> 00:28:47,340
I think the speakers will need you are

624
00:28:47,340 --> 00:28:49,620
you online yes I'm here

625
00:28:49,620 --> 00:28:52,500
okay you can start

626
00:28:52,500 --> 00:28:56,100
hi uh can you see my screen well

627
00:28:56,100 --> 00:28:57,240
yes

628
00:28:57,240 --> 00:29:01,620
okay uh all right so uh thank you all

629
00:29:01,620 --> 00:29:02,880
for being here

630
00:29:02,880 --> 00:29:05,820
so today I will send our work attack on

631
00:29:05,820 --> 00:29:08,220
the park by sniper and it takes a

632
00:29:08,220 --> 00:29:09,779
collaboration with my supervisor

633
00:29:09,779 --> 00:29:12,179
Professor Thomas Johansson from Learning

634
00:29:12,179 --> 00:29:14,760
University and Professor Billy Maya from

635
00:29:14,760 --> 00:29:16,320
the University of applied science and

636
00:29:16,320 --> 00:29:19,980
art and Northwestern Switzerland

637
00:29:19,980 --> 00:29:22,679
uh so a little bit of introduction

638
00:29:22,679 --> 00:29:24,600
so we know that's in the discrete log

639
00:29:24,600 --> 00:29:26,640
and fraction problem was shown to be

640
00:29:26,640 --> 00:29:29,520
vulnerable to Quantum algorithms post

641
00:29:29,520 --> 00:29:31,260
Quantum cryptography has become an

642
00:29:31,260 --> 00:29:33,659
important fear of research so here we

643
00:29:33,659 --> 00:29:35,279
study cryptographic construction that

644
00:29:35,279 --> 00:29:37,980
rely on our problems that are believed

645
00:29:37,980 --> 00:29:39,840
to resist Quantum attack

646
00:29:39,840 --> 00:29:42,179
so for example we have a code base

647
00:29:42,179 --> 00:29:45,299
latify or motor very based or

648
00:29:45,299 --> 00:29:47,460
exogenic-based cryptography

649
00:29:47,460 --> 00:29:50,340
and alternatively we have we also have

650
00:29:50,340 --> 00:29:52,620
other assumptions such as learning

651
00:29:52,620 --> 00:29:53,940
assumptions

652
00:29:53,940 --> 00:29:56,399
such as learning parity with noise and

653
00:29:56,399 --> 00:29:58,020
learning with arrows

654
00:29:58,020 --> 00:30:00,419
and among those the learning part with

655
00:30:00,419 --> 00:30:02,159
noise is appealing in many applications

656
00:30:02,159 --> 00:30:05,520
but it's completely and efficiency which

657
00:30:05,520 --> 00:30:08,039
has opened the door to many realizations

658
00:30:08,039 --> 00:30:09,840
in lightweight devices

659
00:30:09,840 --> 00:30:12,240
so for example to mention a few we have

660
00:30:12,240 --> 00:30:14,520
a lightweight a different identification

661
00:30:14,520 --> 00:30:16,799
protocols measured authentication

662
00:30:16,799 --> 00:30:19,500
pseudorandom generator or public key

663
00:30:19,500 --> 00:30:21,919
encryption schemes

664
00:30:21,919 --> 00:30:24,720
however there's a common drawback in LPN

665
00:30:24,720 --> 00:30:26,700
based contractions which has been

666
00:30:26,700 --> 00:30:29,039
pointed out is that we have to ask for

667
00:30:29,039 --> 00:30:31,799
fresh Randomness multiple times this is

668
00:30:31,799 --> 00:30:34,200
clearly not viable in low power or

669
00:30:34,200 --> 00:30:35,700
constraint device

670
00:30:35,700 --> 00:30:38,659
so with this scenario and motivation

671
00:30:38,659 --> 00:30:42,360
vocals and other in 2021 they proposed

672
00:30:42,360 --> 00:30:44,039
the synchronous stream to server called

673
00:30:44,039 --> 00:30:46,500
Far Cry let's use an LPN based

674
00:30:46,500 --> 00:30:49,860
construction and this extreme driver can

675
00:30:49,860 --> 00:30:52,200
solve the aforementioned problem and can

676
00:30:52,200 --> 00:30:54,740
be efficient in terms of throughput

677
00:30:54,740 --> 00:30:57,179
parallelization and variable in

678
00:30:57,179 --> 00:30:58,679
lightweight devices

679
00:30:58,679 --> 00:31:01,140
so let's present the podcast type and

680
00:31:01,140 --> 00:31:03,980
the LPN problem

681
00:31:04,500 --> 00:31:06,419
though the design of parkai is

682
00:31:06,419 --> 00:31:09,600
straightforward so let N M and K be

683
00:31:09,600 --> 00:31:12,419
integers where n is much bigger than m

684
00:31:12,419 --> 00:31:14,399
then the essential idea of the

685
00:31:14,399 --> 00:31:16,919
construction can be explained as a noisy

686
00:31:16,919 --> 00:31:20,580
product of a length M vectors we made a

687
00:31:20,580 --> 00:31:23,640
secret Matrix M authorized mmn

688
00:31:23,640 --> 00:31:26,940
and an arrow Vector of weight k

689
00:31:26,940 --> 00:31:29,220
so to solve the problem of fresh

690
00:31:29,220 --> 00:31:31,860
Randomness we can save a portion of the

691
00:31:31,860 --> 00:31:33,659
output to update the state of this

692
00:31:33,659 --> 00:31:35,760
pseudorandom generator

693
00:31:35,760 --> 00:31:38,279
uh in particular we need embed for the

694
00:31:38,279 --> 00:31:40,980
next fee and some bit to encode the next

695
00:31:40,980 --> 00:31:42,840
Arrow Vector e

696
00:31:42,840 --> 00:31:45,360
uh and what we have left is the key

697
00:31:45,360 --> 00:31:47,580
stream for the forecast Cypher

698
00:31:47,580 --> 00:31:50,520
uh so as for the presentation of the

699
00:31:50,520 --> 00:31:53,100
arrow so the Arrow Way is K and we need

700
00:31:53,100 --> 00:31:57,360
log n to represent the error bit uh in

701
00:31:57,360 --> 00:31:59,940
total uh this console presentation will

702
00:31:59,940 --> 00:32:02,520
cost us a log n bit

703
00:32:02,520 --> 00:32:05,159
so in conclusion uh for each invocation

704
00:32:05,159 --> 00:32:07,080
of this particular random generator we

705
00:32:07,080 --> 00:32:11,100
can encrypt or decrypt D equal m t equal

706
00:32:11,100 --> 00:32:15,059
n minus n minus K log M bit

707
00:32:15,059 --> 00:32:17,940
uh uh and another aspect of this this

708
00:32:17,940 --> 00:32:20,460
point to be secure parameter M and N

709
00:32:20,460 --> 00:32:23,279
need to be big so for efficiency the

710
00:32:23,279 --> 00:32:26,520
authors decide to use secretive Matrix

711
00:32:26,520 --> 00:32:29,100
such a matrix is generated by Shifting

712
00:32:29,100 --> 00:32:30,960
the first row consecutively to obtain

713
00:32:30,960 --> 00:32:33,360
all the rows so would there be a

714
00:32:33,360 --> 00:32:35,220
security concern when you search a

715
00:32:35,220 --> 00:32:37,440
particular Matrix you may ask

716
00:32:37,440 --> 00:32:39,659
so however there is a good reason to do

717
00:32:39,659 --> 00:32:42,960
so as it will relate to the LPN problem

718
00:32:42,960 --> 00:32:45,600
and its variant ring LPN that we present

719
00:32:45,600 --> 00:32:47,719
now

720
00:32:48,419 --> 00:32:51,899
so let us introduce the LPN problem in

721
00:32:51,899 --> 00:32:55,500
privacy so informally speaking the LPN

722
00:32:55,500 --> 00:32:57,539
Oracle gives out a randomly generated

723
00:32:57,539 --> 00:33:00,360
Vector G and it's a nicely put up with a

724
00:33:00,360 --> 00:33:03,360
secret Act so each Arrow bit is

725
00:33:03,360 --> 00:33:05,520
generally distributed with Byram

726
00:33:05,520 --> 00:33:08,820
parameter at the so meaning that the the

727
00:33:08,820 --> 00:33:11,220
probability that an arrow between one is

728
00:33:11,220 --> 00:33:12,539
Heather

729
00:33:12,539 --> 00:33:15,600
so the search version of LPN simply asks

730
00:33:15,600 --> 00:33:18,779
for the recovery of the secret Act

731
00:33:18,779 --> 00:33:21,480
a few remarks about LPN

732
00:33:21,480 --> 00:33:23,640
so first is the search to decision

733
00:33:23,640 --> 00:33:24,779
reduction

734
00:33:24,779 --> 00:33:27,299
and it is closely related to the famous

735
00:33:27,299 --> 00:33:29,760
syndrome decoding problem encoding

736
00:33:29,760 --> 00:33:31,860
theory in which many code based crypto

737
00:33:31,860 --> 00:33:34,559
schemes rely on so they are equivalent

738
00:33:34,559 --> 00:33:37,620
when we limit ourselves to limited

739
00:33:37,620 --> 00:33:39,979
samples

740
00:33:40,919 --> 00:33:43,919
so having introduced both particles Far

741
00:33:43,919 --> 00:33:46,200
Cry Cypher and LPN problem it is also

742
00:33:46,200 --> 00:33:47,580
important to understand the difference

743
00:33:47,580 --> 00:33:50,159
between them and how the security of

744
00:33:50,159 --> 00:33:52,740
farca is measured using LPN solving

745
00:33:52,740 --> 00:33:53,940
algorithms

746
00:33:53,940 --> 00:33:56,159
so the first difference we can notice is

747
00:33:56,159 --> 00:33:58,320
that the arrow vectors are different in

748
00:33:58,320 --> 00:33:59,399
two cases

749
00:33:59,399 --> 00:34:03,179
one is of way at most K in FICO and the

750
00:34:03,179 --> 00:34:05,880
other follows the binary distribution

751
00:34:05,880 --> 00:34:09,440
and second both B and the Matrix m in

752
00:34:09,440 --> 00:34:12,659
kept secret and the adversary only sees

753
00:34:12,659 --> 00:34:14,820
the part of the noisy product

754
00:34:14,820 --> 00:34:17,760
and finally the Magic in park I stick

755
00:34:17,760 --> 00:34:19,800
like as opposed to the uniformly Random

756
00:34:19,800 --> 00:34:22,980
and Row was independent in LPN

757
00:34:22,980 --> 00:34:25,619
so the use of touch Matrix is often

758
00:34:25,619 --> 00:34:28,879
called ring LPN

759
00:34:28,879 --> 00:34:31,918
as for the security reduction the author

760
00:34:31,918 --> 00:34:34,440
showed a transformation from particular

761
00:34:34,440 --> 00:34:37,260
instance to an LPN instant then they

762
00:34:37,260 --> 00:34:39,239
applied with analysis method to reduce

763
00:34:39,239 --> 00:34:41,040
the security

764
00:34:41,040 --> 00:34:45,239
so uh it is also worth noting that this

765
00:34:45,239 --> 00:34:47,339
security assumptions are substantiated

766
00:34:47,339 --> 00:34:50,639
by further assumption that are ring LPN

767
00:34:50,639 --> 00:34:55,379
is as far as LPN and Far Cry is also

768
00:34:55,379 --> 00:34:58,260
exposed to transform LPN incident

769
00:34:58,260 --> 00:35:00,660
so why the first assumption is okay and

770
00:35:00,660 --> 00:35:03,060
generally believe for the second

771
00:35:03,060 --> 00:35:05,900
assumption the only shows

772
00:35:05,900 --> 00:35:09,839
Quaker is at most at LPN and for the

773
00:35:09,839 --> 00:35:13,700
other direction the level contractor

774
00:35:13,920 --> 00:35:16,320
so now we know part guy we can describe

775
00:35:16,320 --> 00:35:19,920
our attack by some observation

776
00:35:19,920 --> 00:35:23,460
so uh since we end the adversary but we

777
00:35:23,460 --> 00:35:25,020
only see the first debit of the north

778
00:35:25,020 --> 00:35:27,780
shift product so we can focus on the

779
00:35:27,780 --> 00:35:31,020
first three columns of the secret Matrix

780
00:35:31,020 --> 00:35:33,900
so our first observation is I think the

781
00:35:33,900 --> 00:35:37,260
secret Matrix m is fixed so we speculate

782
00:35:37,260 --> 00:35:39,119
that we can detect some non-randomeness

783
00:35:39,119 --> 00:35:42,780
from observing pi

784
00:35:42,780 --> 00:35:46,500
the second observation is uh if L vector

785
00:35:46,500 --> 00:35:48,660
v i cancel out then the sum of the

786
00:35:48,660 --> 00:35:50,640
correct modeling TI will be con will be

787
00:35:50,640 --> 00:35:53,339
made up by only arrow vectors and for

788
00:35:53,339 --> 00:35:56,160
most forical parameters the arrow

789
00:35:56,160 --> 00:35:58,560
vectors are support so the sum will also

790
00:35:58,560 --> 00:35:59,820
be square

791
00:35:59,820 --> 00:36:02,640
and we know that uh

792
00:36:02,640 --> 00:36:06,300
an L length M vector v i uh cancel out

793
00:36:06,300 --> 00:36:09,599
we use a lower sum we hope that we can

794
00:36:09,599 --> 00:36:11,640
see this low wave combination more

795
00:36:11,640 --> 00:36:15,078
frequently than the random cases

796
00:36:15,240 --> 00:36:18,960
so how do we exploit the observation

797
00:36:18,960 --> 00:36:21,180
so the idea is that if we can detect a

798
00:36:21,180 --> 00:36:24,060
lower sum and it is statistically

799
00:36:24,060 --> 00:36:26,400
impossible to have such uh some in a

800
00:36:26,400 --> 00:36:28,380
random case then it must have come from

801
00:36:28,380 --> 00:36:32,040
a collision in VI in other words ficoid

802
00:36:32,040 --> 00:36:35,099
were used to produce a clear screen

803
00:36:35,099 --> 00:36:37,800
so the main question uh comes down to

804
00:36:37,800 --> 00:36:40,859
how we can follow with some efficiently

805
00:36:40,859 --> 00:36:43,079
so fortunately there are many Works

806
00:36:43,079 --> 00:36:44,880
dedicated to this problem

807
00:36:44,880 --> 00:36:47,400
so in particular the two algorithms that

808
00:36:47,400 --> 00:36:49,680
Inspire our work was the Ragnar Rhythm

809
00:36:49,680 --> 00:36:52,200
and the matching field I wouldn't spend

810
00:36:52,200 --> 00:36:53,760
both in May

811
00:36:53,760 --> 00:36:55,220
so

812
00:36:55,220 --> 00:36:59,160
briefly for the case L equals four we

813
00:36:59,160 --> 00:37:01,740
start with four little vectors and we

814
00:37:01,740 --> 00:37:03,660
gradually cancel our speed position by

815
00:37:03,660 --> 00:37:05,220
combining vectors

816
00:37:05,220 --> 00:37:07,079
so note that the difference between

817
00:37:07,079 --> 00:37:09,599
between two algorithm is uh Wagner

818
00:37:09,599 --> 00:37:12,240
wanted to buy zero terms with my

819
00:37:12,240 --> 00:37:14,579
computer fires a low version

820
00:37:14,579 --> 00:37:17,839
so the parameter C is important because

821
00:37:17,839 --> 00:37:20,400
we need the finalist side to be big

822
00:37:20,400 --> 00:37:23,280
enough so that a zero sum or low waste

823
00:37:23,280 --> 00:37:25,140
can be found with non-negligible

824
00:37:25,140 --> 00:37:27,740
probability

825
00:37:27,839 --> 00:37:30,000
so with the help of those algorithms we

826
00:37:30,000 --> 00:37:31,859
come up with our own Blossom

827
00:37:31,859 --> 00:37:34,400
modification

828
00:37:34,440 --> 00:37:37,800
so first modification is that we we can

829
00:37:37,800 --> 00:37:40,859
only use one list One initial list with

830
00:37:40,859 --> 00:37:43,079
an increase size so in particular to

831
00:37:43,079 --> 00:37:44,820
come to our ship it and maintain the

832
00:37:44,820 --> 00:37:47,520
list soil we need a factor three here

833
00:37:47,520 --> 00:37:50,400
and we will explain this factor in a

834
00:37:50,400 --> 00:37:51,780
minute

835
00:37:51,780 --> 00:37:54,000
so let's call combine the routine to

836
00:37:54,000 --> 00:37:56,520
five vectors that Collide C bit and t

837
00:37:56,520 --> 00:37:58,980
equal log l then we need to apply

838
00:37:58,980 --> 00:38:02,700
combined P terms resulting in uh an

839
00:38:02,700 --> 00:38:05,700
evolution evolution of list l0 L1 and so

840
00:38:05,700 --> 00:38:08,220
on to LP

841
00:38:08,220 --> 00:38:11,160
uh lastly we need a slightly a slightly

842
00:38:11,160 --> 00:38:13,500
larger C compared to Wagner algorithms

843
00:38:13,500 --> 00:38:17,099
because when we detect a lower sum by

844
00:38:17,099 --> 00:38:19,680
using such algorithms we also condition

845
00:38:19,680 --> 00:38:22,500
the sum of Arrow factors to be at least

846
00:38:22,500 --> 00:38:24,480
Arrow 3 modulo 2 in the first PP

847
00:38:24,480 --> 00:38:26,720
position

848
00:38:26,820 --> 00:38:30,660
so let's take a closer look to combine

849
00:38:30,660 --> 00:38:34,020
so similarly to all the algorithms we

850
00:38:34,020 --> 00:38:36,540
can use C double as indices or keys in a

851
00:38:36,540 --> 00:38:39,119
hash table to detect Collision in each

852
00:38:39,119 --> 00:38:41,160
iteration of combined

853
00:38:41,160 --> 00:38:47,160
so for each bucket index by C tuples

854
00:38:47,160 --> 00:38:49,619
because we had three times two to the

855
00:38:49,619 --> 00:38:52,020
three vectors then for each bucket we

856
00:38:52,020 --> 00:38:54,960
will have around three vectors

857
00:38:54,960 --> 00:38:57,060
so heuristically we can have three

858
00:38:57,060 --> 00:38:59,220
combination so delete price can be

859
00:38:59,220 --> 00:39:01,740
maintained this way so this should

860
00:39:01,740 --> 00:39:05,220
explain our factor three earlier

861
00:39:05,220 --> 00:39:07,680
and finally we can just simply filter

862
00:39:07,680 --> 00:39:10,800
the last list with that Target Target

863
00:39:10,800 --> 00:39:14,060
weight P Omega

864
00:39:14,099 --> 00:39:17,280
now we have Bitcoin our algorithms uh we

865
00:39:17,280 --> 00:39:18,780
need to answer the auto a few more

866
00:39:18,780 --> 00:39:21,119
important questions so how do we choose

867
00:39:21,119 --> 00:39:23,520
the target way C Omega

868
00:39:23,520 --> 00:39:26,220
so 3 omega is the relative way of L

869
00:39:26,220 --> 00:39:28,920
Arrow Vector in BL and bit

870
00:39:28,920 --> 00:39:31,619
so we can set it to be out on K times D

871
00:39:31,619 --> 00:39:34,440
Over N where K is the way of each Arrow

872
00:39:34,440 --> 00:39:36,660
vector

873
00:39:36,660 --> 00:39:39,540
and second we see that this P Omega will

874
00:39:39,540 --> 00:39:42,839
grow if we choose a large L and if the

875
00:39:42,839 --> 00:39:45,060
Omega is Big it's going to be hard to

876
00:39:45,060 --> 00:39:47,820
distinguish a lower sound from a random

877
00:39:47,820 --> 00:39:52,740
zone so we need to find the best L to

878
00:39:52,740 --> 00:39:55,079
initialize our algorithms so for

879
00:39:55,079 --> 00:39:57,839
multiple parameters I will go four or

880
00:39:57,839 --> 00:40:00,540
eight is reasonable which corresponds to

881
00:40:00,540 --> 00:40:06,079
the possum and asum uh instant

882
00:40:06,359 --> 00:40:08,820
so how many vectors in the initial list

883
00:40:08,820 --> 00:40:10,920
do we need

884
00:40:10,920 --> 00:40:15,359
so we assume uh let's call PNF as the

885
00:40:15,359 --> 00:40:17,640
probability that a lower sum is error of

886
00:40:17,640 --> 00:40:20,460
being modulo 2 in the first DC bit

887
00:40:20,460 --> 00:40:23,940
so uh compared to Wagner algorithms we

888
00:40:23,940 --> 00:40:26,760
need a slightly overhead called our PNF

889
00:40:26,760 --> 00:40:29,820
so depending on this the PNF value we

890
00:40:29,820 --> 00:40:32,099
need to measure our overhead to

891
00:40:32,099 --> 00:40:36,079
uh the the size of initial list

892
00:40:36,540 --> 00:40:38,280
so we came to the we come to the

893
00:40:38,280 --> 00:40:39,780
analysis part

894
00:40:39,780 --> 00:40:42,060
so the first thing we need to analyze is

895
00:40:42,060 --> 00:40:45,920
our memory requirement

896
00:40:46,040 --> 00:40:49,260
so we can record a collision of Airline

897
00:40:49,260 --> 00:40:52,320
and Vector VI according to Wagner we

898
00:40:52,320 --> 00:40:56,099
require 2 to the M over 1 plus L vectors

899
00:40:56,099 --> 00:40:58,980
and as explained before we need a small

900
00:40:58,980 --> 00:41:02,820
overhead here our Alpha PNF

901
00:41:02,820 --> 00:41:06,660
so for PNF we can rely on an estimation

902
00:41:06,660 --> 00:41:08,460
or a lower bound

903
00:41:08,460 --> 00:41:11,099
so in particular we know that this PNF

904
00:41:11,099 --> 00:41:12,839
will be bigger than the probability that

905
00:41:12,839 --> 00:41:15,780
all arrows e or zeros at the first TV

906
00:41:15,780 --> 00:41:17,760
position

907
00:41:17,760 --> 00:41:20,579
we noticed that the battery we estimate

908
00:41:20,579 --> 00:41:23,359
PNF the smaller the overhead will be

909
00:41:23,359 --> 00:41:27,480
uh for example foreign we can consider

910
00:41:27,480 --> 00:41:29,520
more complicated Arrow pattern in the

911
00:41:29,520 --> 00:41:33,960
first PC bit to better approximate PNF

912
00:41:33,960 --> 00:41:37,200
so it can happen that two arrows which

913
00:41:37,200 --> 00:41:39,480
can Collide in the same position

914
00:41:39,480 --> 00:41:42,000
uh we call it in Double Arrow or we can

915
00:41:42,000 --> 00:41:44,099
think about two double arrow or three

916
00:41:44,099 --> 00:41:46,820
double arrows

917
00:41:47,280 --> 00:41:49,380
so

918
00:41:49,380 --> 00:41:52,320
in conclusion how do we choose C

919
00:41:52,320 --> 00:41:54,599
so remember that the parameters V need

920
00:41:54,599 --> 00:41:56,520
to be enough so that we can file lower

921
00:41:56,520 --> 00:41:59,280
sum in the final list so let's end the

922
00:41:59,280 --> 00:42:01,740
note this expected value then for area

923
00:42:01,740 --> 00:42:04,500
code four or four or equal a we have the

924
00:42:04,500 --> 00:42:05,579
following

925
00:42:05,579 --> 00:42:08,579
and we simply choose the the smaller key

926
00:42:08,579 --> 00:42:10,140
that started by either equation

927
00:42:10,140 --> 00:42:12,960
depending on the values here L that we

928
00:42:12,960 --> 00:42:16,380
initialize our algorithm

929
00:42:16,380 --> 00:42:17,400
so

930
00:42:17,400 --> 00:42:20,040
um the complexity of our algorithm is

931
00:42:20,040 --> 00:42:22,320
also straightforward so the dominating

932
00:42:22,320 --> 00:42:25,200
part of the complexity is the cost of P

933
00:42:25,200 --> 00:42:28,500
combined routine and in HP compile

934
00:42:28,500 --> 00:42:30,780
routine we have to do three term two to

935
00:42:30,780 --> 00:42:33,480
the C Echo operations and we can model

936
00:42:33,480 --> 00:42:37,940
each actual Operation X here

937
00:42:39,839 --> 00:42:42,260
so to understand the success probability

938
00:42:42,260 --> 00:42:45,180
we need to look at how frequent for such

939
00:42:45,180 --> 00:42:46,980
a low waste sum to appear in the random

940
00:42:46,980 --> 00:42:49,740
case and we didn't know this number by n

941
00:42:49,740 --> 00:42:50,700
random

942
00:42:50,700 --> 00:42:53,400
so if the value is really close to zero

943
00:42:53,400 --> 00:42:55,980
say one in a billion or billion billion

944
00:42:55,980 --> 00:42:58,380
chance then we are pretty confident that

945
00:42:58,380 --> 00:43:02,359
the encryption indeed use Far Cry

946
00:43:03,240 --> 00:43:06,000
so we can present some numerical values

947
00:43:06,000 --> 00:43:08,220
for our attack for different ficup

948
00:43:08,220 --> 00:43:09,540
parameters

949
00:43:09,540 --> 00:43:13,740
so as we can see uh the Five Guys Cipher

950
00:43:13,740 --> 00:43:18,300
is the festival to our eighthome attack

951
00:43:18,300 --> 00:43:21,540
and we can better measure the security

952
00:43:21,540 --> 00:43:24,420
by up to 20 Bits And if you look at the

953
00:43:24,420 --> 00:43:27,599
N random so the success probability we

954
00:43:27,599 --> 00:43:29,660
can see that we have really good

955
00:43:29,660 --> 00:43:32,520
indication that our distinguishing

956
00:43:32,520 --> 00:43:34,560
attack works

957
00:43:34,560 --> 00:43:37,560
uh we in in our paper we also documented

958
00:43:37,560 --> 00:43:42,079
uh where our distinguishing attack files

959
00:43:42,079 --> 00:43:44,640
and how to optimize them for larger

960
00:43:44,640 --> 00:43:47,240
parameters

961
00:43:47,520 --> 00:43:50,220
so we're going to go to the e-recovery

962
00:43:50,220 --> 00:43:53,419
but just in Pros

963
00:43:55,520 --> 00:43:58,680
so the key recording we use our Asian

964
00:43:58,680 --> 00:43:59,940
distinguishing attack and the

965
00:43:59,940 --> 00:44:02,160
information stat decoding or ICT

966
00:44:02,160 --> 00:44:03,300
algorithm

967
00:44:03,300 --> 00:44:06,359
so how does I say algorithm work

968
00:44:06,359 --> 00:44:09,359
we look at this famous problem so let's

969
00:44:09,359 --> 00:44:12,060
see be a random one we code generated by

970
00:44:12,060 --> 00:44:15,240
a matrix of Dimension K term n

971
00:44:15,240 --> 00:44:18,480
and Y be a noisy cohort uh where Omega

972
00:44:18,480 --> 00:44:21,660
is the uh the weight of the arrow vector

973
00:44:21,660 --> 00:44:26,480
and the toss is simply recover while e

974
00:44:26,880 --> 00:44:29,880
so we can consider a new code by

975
00:44:29,880 --> 00:44:31,980
including the noisy codeword in our

976
00:44:31,980 --> 00:44:33,480
previous code

977
00:44:33,480 --> 00:44:35,760
this new code is going to be made up by

978
00:44:35,760 --> 00:44:39,060
The Matrix t concatenated with y

979
00:44:39,060 --> 00:44:42,060
so the problem will amount of fighting a

980
00:44:42,060 --> 00:44:45,960
weight Omega cohorts in this new code

981
00:44:45,960 --> 00:44:48,900
so the IC algorithm you simply pick

982
00:44:48,900 --> 00:44:50,280
eight columns

983
00:44:50,280 --> 00:44:52,500
and then apply the permutation to move

984
00:44:52,500 --> 00:44:54,960
those column to the left and with high

985
00:44:54,960 --> 00:44:57,119
probability this column are going to be

986
00:44:57,119 --> 00:45:00,000
independent and you can apply a gaussian

987
00:45:00,000 --> 00:45:02,640
elimination resulting in this Matrix in

988
00:45:02,640 --> 00:45:04,800
systematic form IJ

989
00:45:04,800 --> 00:45:07,200
and then you can get the first part

990
00:45:07,200 --> 00:45:11,579
content p uh the way p and then so you

991
00:45:11,579 --> 00:45:13,920
run through all way P Vector U of blank

992
00:45:13,920 --> 00:45:16,800
K and check if the or the Hemingway of u

993
00:45:16,800 --> 00:45:20,339
j is Omega minus p and if not we can

994
00:45:20,339 --> 00:45:22,619
pick another K column and repeat

995
00:45:22,619 --> 00:45:24,960
so in principle how do we apply our

996
00:45:24,960 --> 00:45:26,640
distinguishing attacks to do a key

997
00:45:26,640 --> 00:45:29,598
recovery fight card

998
00:45:29,880 --> 00:45:32,520
so first we can use the distinguisher to

999
00:45:32,520 --> 00:45:34,740
collect and lower some

1000
00:45:34,740 --> 00:45:37,560
for each asum we get the seven

1001
00:45:37,560 --> 00:45:40,079
independent vectors so in total we have

1002
00:45:40,079 --> 00:45:43,319
seven n vectors and we assume that we

1003
00:45:43,319 --> 00:45:44,880
can collect more than m

1004
00:45:44,880 --> 00:45:47,520
so these vectors will form a mat we form

1005
00:45:47,520 --> 00:45:50,660
a matrix G here

1006
00:45:50,720 --> 00:45:55,619
uh for each asum we know many erroneous

1007
00:45:55,619 --> 00:45:58,140
positions and we only keep Columns of

1008
00:45:58,140 --> 00:46:00,599
sheet that are error free for all a sums

1009
00:46:00,599 --> 00:46:02,940
so this will result in The Matrix of

1010
00:46:02,940 --> 00:46:05,060
much smaller dimension

1011
00:46:05,060 --> 00:46:07,859
and there will be only double arrows

1012
00:46:07,859 --> 00:46:09,960
left

1013
00:46:09,960 --> 00:46:12,540
those double arrows when we recombine

1014
00:46:12,540 --> 00:46:14,760
them will result in low weight uh

1015
00:46:14,760 --> 00:46:17,520
codeword preferably lower than the Uber

1016
00:46:17,520 --> 00:46:19,140
fashion bound

1017
00:46:19,140 --> 00:46:21,420
and so by estimate the number of double

1018
00:46:21,420 --> 00:46:24,000
arrows and apply our favorite ice the

1019
00:46:24,000 --> 00:46:26,099
algorithm we can recover all the error

1020
00:46:26,099 --> 00:46:28,560
information and eventually the secret

1021
00:46:28,560 --> 00:46:31,279
Matrix m

1022
00:46:32,819 --> 00:46:36,599
so in conclusions we have presented our

1023
00:46:36,599 --> 00:46:38,940
distinguishing and key recovery attack

1024
00:46:38,940 --> 00:46:41,579
that that can estimate better the

1025
00:46:41,579 --> 00:46:44,599
security of Far Cry

1026
00:46:44,640 --> 00:46:45,780
um

1027
00:46:45,780 --> 00:46:48,119
we have to stretch the LPN based

1028
00:46:48,119 --> 00:46:49,500
construction are very interesting

1029
00:46:49,500 --> 00:46:52,020
because they have provable security they

1030
00:46:52,020 --> 00:46:54,839
can be efficient and they are new

1031
00:46:54,839 --> 00:46:57,300
uh however that

1032
00:46:57,300 --> 00:46:59,760
it needs they need more crypto analysis

1033
00:46:59,760 --> 00:47:01,020
to effort

1034
00:47:01,020 --> 00:47:04,200
and uh further investigation on those

1035
00:47:04,200 --> 00:47:06,660
honest assumptions

1036
00:47:06,660 --> 00:47:09,240
in our paper we also we also recommend

1037
00:47:09,240 --> 00:47:12,359
some fixtures for file cut parameters so

1038
00:47:12,359 --> 00:47:15,180
we can think about uh choosing a logic K

1039
00:47:15,180 --> 00:47:17,400
and it seems to be beneficial for more

1040
00:47:17,400 --> 00:47:21,060
parameters as it will become really hard

1041
00:47:21,060 --> 00:47:23,040
to distinguish the lowest sound from a

1042
00:47:23,040 --> 00:47:25,079
random practice

1043
00:47:25,079 --> 00:47:27,540
we can also think about reconfigure all

1044
00:47:27,540 --> 00:47:30,540
the parameters like m and n but overall

1045
00:47:30,540 --> 00:47:32,339
they come with a cost of lower

1046
00:47:32,339 --> 00:47:34,619
efficiency for Far Cry

1047
00:47:34,619 --> 00:47:38,339
as for feudal work further works for the

1048
00:47:38,339 --> 00:47:41,760
theoretical direction we can apply uh

1049
00:47:41,760 --> 00:47:45,020
all the sophisticated

1050
00:47:45,020 --> 00:47:47,520
searching method

1051
00:47:47,520 --> 00:47:51,180
uh in in uh in our routine combined for

1052
00:47:51,180 --> 00:47:53,339
example we can think about we don't have

1053
00:47:53,339 --> 00:47:55,740
to limit ourselves to all zero in the

1054
00:47:55,740 --> 00:47:58,020
first DC position where we can include

1055
00:47:58,020 --> 00:48:00,839
some noisy bit there and so we we're

1056
00:48:00,839 --> 00:48:03,359
going to have a lower memory requirement

1057
00:48:03,359 --> 00:48:06,839
and also lower complexity

1058
00:48:06,839 --> 00:48:10,339
all right thanks for your attention

1059
00:48:12,060 --> 00:48:15,000
okay thanks one are there any questions

1060
00:48:15,000 --> 00:48:17,839
in Kobe

1061
00:48:27,300 --> 00:48:30,300
uh it seems no other questions here in

1062
00:48:30,300 --> 00:48:32,780
Beijing

1063
00:48:38,640 --> 00:48:41,640
okay one I have some questions for your

1064
00:48:41,640 --> 00:48:42,480
talk

1065
00:48:42,480 --> 00:48:44,400
yep

1066
00:48:44,400 --> 00:48:47,700
um first one may I know what is the

1067
00:48:47,700 --> 00:48:50,599
difference of the new sign for fire kite

1068
00:48:50,599 --> 00:48:54,960
uh the difference between in fact and

1069
00:48:54,960 --> 00:48:58,079
the previous constructions based on rpn

1070
00:48:58,079 --> 00:49:01,079
uh so there is another construction it's

1071
00:49:01,079 --> 00:49:02,940
called lbnc

1072
00:49:02,940 --> 00:49:06,359
uh so if you look at the the design of

1073
00:49:06,359 --> 00:49:08,160
five guy here

1074
00:49:08,160 --> 00:49:11,760
so compared to uh compared to the

1075
00:49:11,760 --> 00:49:14,180
previous LPN based type of construction

1076
00:49:14,180 --> 00:49:17,060
you also need an error correcting code

1077
00:49:17,060 --> 00:49:20,460
and uh for the for that construction uh

1078
00:49:20,460 --> 00:49:22,800
for every time you uh you invoke this

1079
00:49:22,800 --> 00:49:25,020
pseudo random generator we have you have

1080
00:49:25,020 --> 00:49:28,140
to uh generate a fresh Randomness for

1081
00:49:28,140 --> 00:49:30,000
example for b and e here

1082
00:49:30,000 --> 00:49:33,680
uh uh so this will introduce an overhead

1083
00:49:33,680 --> 00:49:36,720
and this is not suitable for lightweight

1084
00:49:36,720 --> 00:49:38,520
or constrained device

1085
00:49:38,520 --> 00:49:41,880
so for the the difference uh um for this

1086
00:49:41,880 --> 00:49:45,119
purpose the five cup uh Cipher would use

1087
00:49:45,119 --> 00:49:47,579
a part of the noisy product here to

1088
00:49:47,579 --> 00:49:51,420
enter to give out a fresh Randomness and

1089
00:49:51,420 --> 00:49:53,940
the authors also test their construction

1090
00:49:53,940 --> 00:49:57,960
on an fpga to show that uh that that

1091
00:49:57,960 --> 00:50:00,540
designs are independable

1092
00:50:00,540 --> 00:50:04,880
for a low power scenario

1093
00:50:05,700 --> 00:50:10,260
okay then I have another question that

1094
00:50:10,260 --> 00:50:13,800
is it's uh some available European

1095
00:50:13,800 --> 00:50:15,900
solving algorithms work here for

1096
00:50:15,900 --> 00:50:18,119
attacking Fair kite

1097
00:50:18,119 --> 00:50:20,520
uh yes so uh

1098
00:50:20,520 --> 00:50:22,980
uh

1099
00:50:22,980 --> 00:50:25,619
if we go back here

1100
00:50:25,619 --> 00:50:27,180
so

1101
00:50:27,180 --> 00:50:29,400
because it is closely related to the

1102
00:50:29,400 --> 00:50:31,079
symptom decoding problem

1103
00:50:31,079 --> 00:50:34,920
uh so we have two direction so if the

1104
00:50:34,920 --> 00:50:37,920
number of samples are limited you use

1105
00:50:37,920 --> 00:50:39,599
the IC algorithm

1106
00:50:39,599 --> 00:50:41,400
so the Isley outcome is really famous

1107
00:50:41,400 --> 00:50:45,060
among probase cryptography community

1108
00:50:45,060 --> 00:50:48,660
uh so but when the uh the number of

1109
00:50:48,660 --> 00:50:50,579
samples are not limited we can use

1110
00:50:50,579 --> 00:50:53,099
another algorithm it's called bkw

1111
00:50:53,099 --> 00:50:54,420
uh

1112
00:50:54,420 --> 00:50:56,099
uh so this algorithm

1113
00:50:56,099 --> 00:50:59,099
were they have some exponential

1114
00:50:59,099 --> 00:51:01,500
performance but only in the case of

1115
00:51:01,500 --> 00:51:03,660
unlimited samples

1116
00:51:03,660 --> 00:51:06,480
so in certain scenarios you can limit a

1117
00:51:06,480 --> 00:51:08,940
number of samples that an adversary can

1118
00:51:08,940 --> 00:51:11,220
observe so

1119
00:51:11,220 --> 00:51:14,579
uh for actually algorithms uh there's a

1120
00:51:14,579 --> 00:51:16,740
long line research so you can take back

1121
00:51:16,740 --> 00:51:19,920
to half a century ago so now you have

1122
00:51:19,920 --> 00:51:23,640
the original prank HD algorithm but you

1123
00:51:23,640 --> 00:51:26,339
also have more sophisticated we call it

1124
00:51:26,339 --> 00:51:30,000
an enumeration based actually algorithm

1125
00:51:30,000 --> 00:51:31,260
uh

1126
00:51:31,260 --> 00:51:33,960
and they're all Crypt analysis tool to

1127
00:51:33,960 --> 00:51:36,540
to measure those code based uh

1128
00:51:36,540 --> 00:51:38,220
candidates in this standardization

1129
00:51:38,220 --> 00:51:40,879
process

1130
00:51:41,880 --> 00:51:45,660
Okay the third question is that why

1131
00:51:45,660 --> 00:51:47,880
there's a common code technique can be

1132
00:51:47,880 --> 00:51:50,460
used here for the attack

1133
00:51:50,460 --> 00:51:52,800
uh yes

1134
00:51:52,800 --> 00:51:55,800
so

1135
00:51:56,579 --> 00:51:59,540
so for our key recovery attack we just

1136
00:51:59,540 --> 00:52:01,260
catch it

1137
00:52:01,260 --> 00:52:03,540
uh in principle

1138
00:52:03,540 --> 00:52:06,359
but I guess that after you or you can

1139
00:52:06,359 --> 00:52:10,260
recover uh some of the noise some of the

1140
00:52:10,260 --> 00:52:11,640
arrow bit

1141
00:52:11,640 --> 00:52:13,440
when you apply all this thing with

1142
00:52:13,440 --> 00:52:16,020
distinguishing attack you can apply a

1143
00:52:16,020 --> 00:52:18,599
more sophisticated key recovering method

1144
00:52:18,599 --> 00:52:21,839
but we haven't thought about it beside

1145
00:52:21,839 --> 00:52:25,339
our own key recovery

1146
00:52:27,900 --> 00:52:31,440
yes under the first question is that do

1147
00:52:31,440 --> 00:52:33,240
you think the techniques in fast

1148
00:52:33,240 --> 00:52:35,880
correlation attacks will work here or

1149
00:52:35,880 --> 00:52:37,800
maybe some modifications

1150
00:52:37,800 --> 00:52:40,819
both attacks is safer

1151
00:52:40,819 --> 00:52:44,220
uh I'm sorry can you say it again

1152
00:52:44,220 --> 00:52:47,040
uh I just said that whether the

1153
00:52:47,040 --> 00:52:48,960
techniques from Fast correlation attacks

1154
00:52:48,960 --> 00:52:52,160
could work here for attack decipher

1155
00:52:52,160 --> 00:52:54,480
uh I'm not sure

1156
00:52:54,480 --> 00:52:56,420
um I don't really know about fast

1157
00:52:56,420 --> 00:52:59,460
correlation attack Maybe

1158
00:52:59,460 --> 00:53:04,760
uh the co-author really can help me here

1159
00:53:05,700 --> 00:53:08,880
hello everybody so that's a good

1160
00:53:08,880 --> 00:53:13,099
question Bobby can you hear me

1161
00:53:14,359 --> 00:53:16,920
actually I have also thought about

1162
00:53:16,920 --> 00:53:19,079
whether a kind of fast correlation

1163
00:53:19,079 --> 00:53:21,480
attacks might work here but there is a

1164
00:53:21,480 --> 00:53:25,079
big difference uh mostly these work when

1165
00:53:25,079 --> 00:53:28,920
the ciphers are more or less lfsr based

1166
00:53:28,920 --> 00:53:31,500
but here the construction is quite

1167
00:53:31,500 --> 00:53:33,900
different although there are

1168
00:53:33,900 --> 00:53:36,180
interrelations between fast correlation

1169
00:53:36,180 --> 00:53:39,200
attacks and kind of uh

1170
00:53:39,200 --> 00:53:43,280
coding based techniques so in this a bit

1171
00:53:43,280 --> 00:53:46,559
weak sense the answer would be yes but

1172
00:53:46,559 --> 00:53:50,280
in a strong sense I would say no

1173
00:53:50,280 --> 00:53:53,660
okay thanks really

1174
00:53:54,000 --> 00:53:57,800
do you have some comments on the

1175
00:53:57,800 --> 00:54:00,420
applicability of fast Collision tax

1176
00:54:00,420 --> 00:54:03,500
recording algorithm here

1177
00:54:06,140 --> 00:54:09,558
comment on this

1178
00:54:18,240 --> 00:54:20,760
I'm not sure I guess we haven't tried

1179
00:54:20,760 --> 00:54:22,200
that

1180
00:54:22,200 --> 00:54:23,880
yes

1181
00:54:23,880 --> 00:54:27,780
uh also I have another question that is

1182
00:54:27,780 --> 00:54:29,160
uh

1183
00:54:29,160 --> 00:54:32,099
um whether you're a attack technique can

1184
00:54:32,099 --> 00:54:36,180
be generalized to some um

1185
00:54:36,180 --> 00:54:39,240
a larger form for example something like

1186
00:54:39,240 --> 00:54:42,680
the Big W deduction

1187
00:54:43,200 --> 00:54:45,319
um

1188
00:54:48,119 --> 00:54:51,119
channelize

1189
00:54:53,940 --> 00:54:57,180
I'm not sure about that

1190
00:54:57,180 --> 00:55:00,119
yeah I mean most of the our modification

1191
00:55:00,119 --> 00:55:03,000
the first two modification it comes from

1192
00:55:03,000 --> 00:55:04,220
bkw

1193
00:55:04,220 --> 00:55:07,260
but uh I'm not sure if you are doing the

1194
00:55:07,260 --> 00:55:10,339
same thing on bkw

1195
00:55:11,700 --> 00:55:15,180
but I think yeah it looks like pkw after

1196
00:55:15,180 --> 00:55:17,480
all

1197
00:55:18,660 --> 00:55:22,640
resemble slightly do some very recent

1198
00:55:22,640 --> 00:55:25,079
analysis but in a totally different

1199
00:55:25,079 --> 00:55:26,460
context

1200
00:55:26,460 --> 00:55:32,400
so maybe in LPN uh kind of designs

1201
00:55:32,400 --> 00:55:35,460
which have where the error patterns have

1202
00:55:35,460 --> 00:55:38,460
a very special structure but this is a

1203
00:55:38,460 --> 00:55:40,980
is a very recent observation like I'm

1204
00:55:40,980 --> 00:55:45,559
not able to say more about this

1205
00:55:47,880 --> 00:55:51,480
um yes uh can we see that the techniques

1206
00:55:51,480 --> 00:55:55,740
here can be used to analyze some acid

1207
00:55:55,740 --> 00:55:58,920
topic complexity resource

1208
00:55:58,920 --> 00:56:02,780
in the general form

1209
00:56:02,940 --> 00:56:05,520
yeah I'm sorry can you say it again

1210
00:56:05,520 --> 00:56:08,280
uh I just want to know why there's a

1211
00:56:08,280 --> 00:56:11,760
techniques here can be used to generate

1212
00:56:11,760 --> 00:56:15,180
some theoretical uh results for the a

1213
00:56:15,180 --> 00:56:18,540
safe topic complexity resource

1214
00:56:18,540 --> 00:56:22,079
for the RPM uh

1215
00:56:22,079 --> 00:56:24,359
uh I mean again

1216
00:56:24,359 --> 00:56:28,200
uh yes um I I mean

1217
00:56:28,200 --> 00:56:30,660
the thing is our algorithm Works in a

1218
00:56:30,660 --> 00:56:34,319
really specific context come not all LPN

1219
00:56:34,319 --> 00:56:37,800
construction we use this kind of like

1220
00:56:37,800 --> 00:56:40,859
restricted like here we have the arrow

1221
00:56:40,859 --> 00:56:42,839
waste the atmos k

1222
00:56:42,839 --> 00:56:44,339
uh

1223
00:56:44,339 --> 00:56:47,640
so our attack works here uh

1224
00:56:47,640 --> 00:56:49,380
I don't I don't think it's really

1225
00:56:49,380 --> 00:56:52,440
applicable to like Channel LPN

1226
00:56:52,440 --> 00:56:56,059
cases yeah

1227
00:56:57,240 --> 00:57:01,380
okay also may I know that whether your

1228
00:57:01,380 --> 00:57:04,380
techniques uh use some barriers of the

1229
00:57:04,380 --> 00:57:06,960
Buckner's catering algorithm also yes

1230
00:57:06,960 --> 00:57:11,400
new algorithm so we use uh I mean if you

1231
00:57:11,400 --> 00:57:12,720
look closely

1232
00:57:12,720 --> 00:57:15,119
it will resample more to the matching

1233
00:57:15,119 --> 00:57:18,599
filters but uh for our argument and

1234
00:57:18,599 --> 00:57:22,800
memory requirement uh it's from fact

1235
00:57:22,800 --> 00:57:25,619
and we tested on our implementation and

1236
00:57:25,619 --> 00:57:27,300
it works really well

1237
00:57:27,300 --> 00:57:31,339
so we use both of these yeah

1238
00:57:31,740 --> 00:57:35,040
can your Technique be used to further

1239
00:57:35,040 --> 00:57:38,670
improve Badness catering algorithm

1240
00:57:38,670 --> 00:57:41,749
[Music]

1241
00:57:42,300 --> 00:57:45,240
but K3 hour item looks for all zero sums

1242
00:57:45,240 --> 00:57:49,079
right so yes in the general form yeah

1243
00:57:49,079 --> 00:57:52,020
so

1244
00:57:52,020 --> 00:57:53,280
um

1245
00:57:53,280 --> 00:57:55,079
I don't think so because

1246
00:57:55,079 --> 00:57:58,140
if you look at this paper by uh both in

1247
00:57:58,140 --> 00:58:01,200
May the proposed Smash and filter

1248
00:58:01,200 --> 00:58:04,319
they even have a more General case where

1249
00:58:04,319 --> 00:58:06,660
you can include some of the arrow bits

1250
00:58:06,660 --> 00:58:07,380
here

1251
00:58:07,380 --> 00:58:09,300
where you cancel out or you don't cancel

1252
00:58:09,300 --> 00:58:11,160
all three bits here

1253
00:58:11,160 --> 00:58:13,500
and that will give better result

1254
00:58:13,500 --> 00:58:16,980
so that is our one of our further works

1255
00:58:16,980 --> 00:58:20,220
yeah but we just applied the matching

1256
00:58:20,220 --> 00:58:22,020
filter and vaginal algorithms in the

1257
00:58:22,020 --> 00:58:23,339
simplest form

1258
00:58:23,339 --> 00:58:25,800
so I wouldn't say that I can use to

1259
00:58:25,800 --> 00:58:29,880
improve this famous algorithms

1260
00:58:30,359 --> 00:58:31,740
okay

1261
00:58:31,740 --> 00:58:35,058
are there any questions

1262
00:58:37,619 --> 00:58:40,500
or maybe in the zoom online there are

1263
00:58:40,500 --> 00:58:43,760
other questions and questions

1264
00:58:46,559 --> 00:58:48,960
none that I see

1265
00:58:48,960 --> 00:58:52,559
uh okay then maybe let us thank the

1266
00:58:52,559 --> 00:58:56,220
speakers of this session and uh we I

1267
00:58:56,220 --> 00:58:58,380
think this is the end of this today's

1268
00:58:58,380 --> 00:59:00,000
program

1269
00:59:00,000 --> 00:59:03,680
and we can have a break

1270
00:59:03,900 --> 00:59:08,240
thank you yes thank you

