1
00:00:00,000 --> 00:00:03,120
all the new construction and this

2
00:00:03,120 --> 00:00:06,420
section will have two talks the next

3
00:00:06,420 --> 00:00:09,980
talks is the title is short

4
00:00:09,980 --> 00:00:12,540
variable course from Red Key security

5
00:00:12,540 --> 00:00:15,599
problem Cipher the visited and the talk

6
00:00:15,599 --> 00:00:18,020
will be given by the speaker Antonio

7
00:00:18,020 --> 00:00:21,600
Daniel from from France so let's reopen

8
00:00:21,600 --> 00:00:25,439
Antonio fanio

9
00:00:25,439 --> 00:00:29,400
good morning everyone first of all could

10
00:00:29,400 --> 00:00:33,059
you all uh hear me loud and clear

11
00:00:33,059 --> 00:00:34,739
yes

12
00:00:34,739 --> 00:00:37,800
oh perfect so I'm gonna start

13
00:00:37,800 --> 00:00:42,600
so good morning again so I'm going to

14
00:00:42,600 --> 00:00:46,500
present this joint work with John Luca

15
00:00:46,500 --> 00:00:49,920
Brian uh joao Ribeiro and Daniela

16
00:00:49,920 --> 00:00:52,860
Venturi I'm Antonio fonio right now in

17
00:00:52,860 --> 00:00:56,760
France at 3am so you know excuse me

18
00:00:56,760 --> 00:01:00,120
sometime I look a bit sleepy

19
00:01:00,120 --> 00:01:02,039
the wood

20
00:01:02,039 --> 00:01:05,820
okay so uh brief history of this project

21
00:01:05,820 --> 00:01:09,500
so this project uh

22
00:01:09,500 --> 00:01:12,600
starts around here where you see my

23
00:01:12,600 --> 00:01:13,619
mouse

24
00:01:13,619 --> 00:01:16,159
oops

25
00:01:16,159 --> 00:01:18,900
I guess now you know can you still hear

26
00:01:18,900 --> 00:01:21,619
me loud and clear

27
00:01:27,500 --> 00:01:31,439
it cannot leave you guys sorry I will

28
00:01:31,439 --> 00:01:34,279
have to post a second

29
00:02:05,399 --> 00:02:09,000
okay sorry I'm back

30
00:02:09,000 --> 00:02:12,780
okay so as I was saying this project has

31
00:02:12,780 --> 00:02:14,760
start around here where you can see my

32
00:02:14,760 --> 00:02:16,040
mouse

33
00:02:16,040 --> 00:02:19,980
and in around here we discovered about

34
00:02:19,980 --> 00:02:24,300
this nice paper by uh Fair Cartman and

35
00:02:24,300 --> 00:02:26,760
Manic and this paper is about the normal

36
00:02:26,760 --> 00:02:29,220
level code and it has some nice

37
00:02:29,220 --> 00:02:32,400
interesting uh new uh security property

38
00:02:32,400 --> 00:02:35,700
from from the block ciphers from which

39
00:02:35,700 --> 00:02:38,520
we they can construct on a new malleable

40
00:02:38,520 --> 00:02:41,519
cost and since we were interesting you

41
00:02:41,519 --> 00:02:43,500
know malleability we decided to use the

42
00:02:43,500 --> 00:02:46,379
framework to you know yet another

43
00:02:46,379 --> 00:02:49,319
project a different project from the one

44
00:02:49,319 --> 00:02:52,260
that I'm presented right now on uh on

45
00:02:52,260 --> 00:02:55,379
normal ability so we write a paper we

46
00:02:55,379 --> 00:02:59,120
wrote a paper we submit it to task 21.

47
00:02:59,120 --> 00:03:02,519
everything seemed too well until the

48
00:03:02,519 --> 00:03:05,700
reviewer arrived the reviewers were kind

49
00:03:05,700 --> 00:03:08,819
of nice and they were so nice that they

50
00:03:08,819 --> 00:03:13,140
even found an attack on our paper uh and

51
00:03:13,140 --> 00:03:14,879
by the way this attack was not just an

52
00:03:14,879 --> 00:03:16,920
attack on our paper but it was after an

53
00:03:16,920 --> 00:03:19,500
attack on

54
00:03:19,500 --> 00:03:21,500
um

55
00:03:21,620 --> 00:03:24,120
cryptographic Assumption of this paper

56
00:03:24,120 --> 00:03:29,220
from a fair government many and so we

57
00:03:29,220 --> 00:03:33,300
were here kind of in a uh you know in a

58
00:03:33,300 --> 00:03:35,220
crossroad we had to decide what to do

59
00:03:35,220 --> 00:03:38,700
and what we decided to do was to fix the

60
00:03:38,700 --> 00:03:40,640
paper from

61
00:03:40,640 --> 00:03:44,459
fkm18 and so that's what we did with the

62
00:03:44,459 --> 00:03:48,599
fixed paper uh we so the reviewers she

63
00:03:48,599 --> 00:03:51,120
pointed us through some other attacks to

64
00:03:51,120 --> 00:03:53,879
the attack that was originally by

65
00:03:53,879 --> 00:03:58,700
Bernstein in 2010 and then it was uh

66
00:03:58,700 --> 00:04:01,860
extended the formalized by uh Albert

67
00:04:01,860 --> 00:04:05,519
fashion Patterson Watson in 11 so you

68
00:04:05,519 --> 00:04:08,459
read that these papers and we went back

69
00:04:08,459 --> 00:04:13,860
to work and we fixed the Afghan paper we

70
00:04:13,860 --> 00:04:16,978
submitted it again at task 22 and um

71
00:04:16,978 --> 00:04:19,738
here presenting it so

72
00:04:19,738 --> 00:04:25,020
I guess this is a a nice uh story a nice

73
00:04:25,020 --> 00:04:28,680
story of the reviewing process

74
00:04:28,680 --> 00:04:31,020
yeah by the way thanks to the reviewer

75
00:04:31,020 --> 00:04:33,780
the anonymous reviewer

76
00:04:33,780 --> 00:04:35,880
so this paper is about normal level code

77
00:04:35,880 --> 00:04:37,800
the normal level code is an encoding

78
00:04:37,800 --> 00:04:39,900
scheme so cruel and encoding scheme you

79
00:04:39,900 --> 00:04:42,720
can encode a message and then you can

80
00:04:42,720 --> 00:04:44,759
decode the message about correctness if

81
00:04:44,759 --> 00:04:46,380
you include a message you decode the

82
00:04:46,380 --> 00:04:48,600
same message and the important property

83
00:04:48,600 --> 00:04:50,400
from a normal code is this normal

84
00:04:50,400 --> 00:04:52,740
ability property this normal ability

85
00:04:52,740 --> 00:04:56,639
property says that if you encode a

86
00:04:56,639 --> 00:04:59,340
message and then there is a tampering

87
00:04:59,340 --> 00:05:02,220
function that modify your message and

88
00:05:02,220 --> 00:05:05,340
get a new codeword and then you try to

89
00:05:05,340 --> 00:05:07,199
record the code this tilde you obtain a

90
00:05:07,199 --> 00:05:09,180
message and tilde and now this message

91
00:05:09,180 --> 00:05:11,880
until this either the same message of

92
00:05:11,880 --> 00:05:13,620
before which means that the stumbling

93
00:05:13,620 --> 00:05:16,380
function didn't do much or if it is

94
00:05:16,380 --> 00:05:20,040
another different codeword it has to be

95
00:05:20,040 --> 00:05:23,580
completely uncode related respect to the

96
00:05:23,580 --> 00:05:27,320
original code word

97
00:05:27,360 --> 00:05:28,740
so

98
00:05:28,740 --> 00:05:31,199
it's easy to see that the normal level

99
00:05:31,199 --> 00:05:34,560
code are impossible without any further

100
00:05:34,560 --> 00:05:39,740
restriction in fact if someone

101
00:05:39,740 --> 00:05:43,259
as a full power of a tampering function

102
00:05:43,259 --> 00:05:47,460
that can decode the the code word and

103
00:05:47,460 --> 00:05:50,280
for example for example adds to the

104
00:05:50,280 --> 00:05:52,979
message plus one and then encode again

105
00:05:52,979 --> 00:05:56,820
the code word this codeword will be the

106
00:05:56,820 --> 00:05:58,740
message and the line is called with the

107
00:05:58,740 --> 00:06:01,139
city that would be highly correlated to

108
00:06:01,139 --> 00:06:02,699
the original message

109
00:06:02,699 --> 00:06:05,820
so we need to put some restriction on

110
00:06:05,820 --> 00:06:07,860
the kind of tampering function

111
00:06:07,860 --> 00:06:11,100
and the kind of restriction that are

112
00:06:11,100 --> 00:06:13,740
considered in the in the

113
00:06:13,740 --> 00:06:17,520
in the literature is this uh one of the

114
00:06:17,520 --> 00:06:19,800
kind of conditions that are considered

115
00:06:19,800 --> 00:06:21,479
in the literature there is this speed

116
00:06:21,479 --> 00:06:24,180
State model where basically we assume

117
00:06:24,180 --> 00:06:27,180
that the code work can be passed in two

118
00:06:27,180 --> 00:06:30,539
parts c0 and C1 and now the tampering

119
00:06:30,539 --> 00:06:34,020
function are applied separately on a c0

120
00:06:34,020 --> 00:06:36,360
and C1 so there is a company function F0

121
00:06:36,360 --> 00:06:39,300
on c0 and a thumbprint function F1 on C1

122
00:06:39,300 --> 00:06:40,500
at least two terminal functional

123
00:06:40,500 --> 00:06:42,120
Independence and they don't do not

124
00:06:42,120 --> 00:06:43,199
communicate

125
00:06:43,199 --> 00:06:44,639
and

126
00:06:44,639 --> 00:06:48,120
uh and then you know the the same game

127
00:06:48,120 --> 00:06:50,580
of the normal ability and this in this

128
00:06:50,580 --> 00:06:52,979
model we can construct a normal level

129
00:06:52,979 --> 00:06:56,960
codes and indeed the paper of uh F uh of

130
00:06:56,960 --> 00:07:00,600
uh fair cutman and many present a very

131
00:07:00,600 --> 00:07:04,199
interesting uh normal code in uh in this

132
00:07:04,199 --> 00:07:07,819
setting so they consider a very nice

133
00:07:07,819 --> 00:07:12,900
intuitive uh scheme which based on a box

134
00:07:12,900 --> 00:07:14,639
Cipher which basically say okay let's

135
00:07:14,639 --> 00:07:17,160
encode a message by sampling a fresh

136
00:07:17,160 --> 00:07:20,520
random key and then by using a block

137
00:07:20,520 --> 00:07:24,720
Cipher as a PRP to encode the message by

138
00:07:24,720 --> 00:07:27,599
you know creating a cipher text using

139
00:07:27,599 --> 00:07:31,860
the block ciphers on K key and on the on

140
00:07:31,860 --> 00:07:34,160
the message that we want to import

141
00:07:34,160 --> 00:07:36,599
and then the decoding functions the

142
00:07:36,599 --> 00:07:39,360
triviality you stick back your key and

143
00:07:39,360 --> 00:07:41,759
you Decode by decrypting it

144
00:07:41,759 --> 00:07:44,759
and they the the the the point of this

145
00:07:44,759 --> 00:07:48,599
paper was uh by looking at this natural

146
00:07:48,599 --> 00:07:51,360
malleable code what are the security

147
00:07:51,360 --> 00:07:54,539
properties that we need from the Block

148
00:07:54,539 --> 00:07:58,440
Cipher so that this normalable code is

149
00:07:58,440 --> 00:07:59,960
secure

150
00:07:59,960 --> 00:08:02,460
and the two security properties that

151
00:08:02,460 --> 00:08:05,580
they came up with and that were

152
00:08:05,580 --> 00:08:08,880
sufficient for the work where uh PRP

153
00:08:08,880 --> 00:08:11,280
with leakage meaning appear that is

154
00:08:11,280 --> 00:08:13,440
leakage to the ceiling and uh notion

155
00:08:13,440 --> 00:08:15,840
what they call it the fixed related key

156
00:08:15,840 --> 00:08:18,020
security

157
00:08:18,020 --> 00:08:21,419
and the attack that I mentioned at the

158
00:08:21,419 --> 00:08:24,060
very beginning of this talk uh break

159
00:08:24,060 --> 00:08:26,699
this fixed related key security so let's

160
00:08:26,699 --> 00:08:29,940
go to see this uh notion a bit uh more

161
00:08:29,940 --> 00:08:31,800
uh in detail

162
00:08:31,800 --> 00:08:35,279
so this notion basically says that there

163
00:08:35,279 --> 00:08:37,860
is a game in which uh you know there is

164
00:08:37,860 --> 00:08:41,219
the the fresh key the flash key can be

165
00:08:41,219 --> 00:08:43,740
tampered and you can create a key key

166
00:08:43,740 --> 00:08:45,360
tilde which is you know the thumbnail

167
00:08:45,360 --> 00:08:48,000
key and now the adversary can be two

168
00:08:48,000 --> 00:08:50,399
different words in the real world he

169
00:08:50,399 --> 00:08:52,980
gets to play with a left Oracle in which

170
00:08:52,980 --> 00:08:55,380
there is the original t and the PRP and

171
00:08:55,380 --> 00:08:57,779
in the right word there is the template

172
00:08:57,779 --> 00:09:01,080
key we can interact with these two uh

173
00:09:01,080 --> 00:09:04,620
Oracle now a study in the in the ideal

174
00:09:04,620 --> 00:09:06,480
World it can play with a random

175
00:09:06,480 --> 00:09:09,240
permutation on one side and with another

176
00:09:09,240 --> 00:09:11,580
random permutation in the other side now

177
00:09:11,580 --> 00:09:13,920
if the two keys are the different than

178
00:09:13,920 --> 00:09:15,720
the two random permutation has to be

179
00:09:15,720 --> 00:09:18,480
different and also there is a constraint

180
00:09:18,480 --> 00:09:21,779
on the template key so the taranteed key

181
00:09:21,779 --> 00:09:25,560
cannot be too probable so another way to

182
00:09:25,560 --> 00:09:27,240
say is that the function

183
00:09:27,240 --> 00:09:29,399
and tampering function cannot affect too

184
00:09:29,399 --> 00:09:31,200
many a fixed point

185
00:09:31,200 --> 00:09:36,200
and this is a necessary condition

186
00:09:37,260 --> 00:09:40,740
now that we see the notion let's see

187
00:09:40,740 --> 00:09:42,779
what is the attack proposed by

188
00:09:42,779 --> 00:09:46,820
bernestine and then uh formalized by fbw

189
00:09:46,820 --> 00:09:50,459
11n from the uh you know that we got to

190
00:09:50,459 --> 00:09:52,880
know through the reviewer so the attack

191
00:09:52,880 --> 00:09:56,760
is uh a big contrived from my point of

192
00:09:56,760 --> 00:09:57,560
view

193
00:09:57,560 --> 00:10:01,980
so the attack should

194
00:10:01,980 --> 00:10:08,100
set the pump key as the block Cipher on

195
00:10:08,100 --> 00:10:09,860
the original key

196
00:10:09,860 --> 00:10:13,200
executed on message equal to zero zero

197
00:10:13,200 --> 00:10:16,860
zero zero or any fixed value is okay and

198
00:10:16,860 --> 00:10:18,600
this is why I say that it's a big

199
00:10:18,600 --> 00:10:22,380
contrived because you know in the in the

200
00:10:22,380 --> 00:10:26,580
literature of actual comparing attack uh

201
00:10:26,580 --> 00:10:29,279
this kind of sampling function seems a

202
00:10:29,279 --> 00:10:31,740
bit you know a bit out of the the

203
00:10:31,740 --> 00:10:34,260
capability of what a tampering function

204
00:10:34,260 --> 00:10:37,140
can do but nevertheless in a theoretical

205
00:10:37,140 --> 00:10:40,620
framework this time frame function is is

206
00:10:40,620 --> 00:10:43,740
a perfectly okay function

207
00:10:43,740 --> 00:10:46,380
now that we set the temperature in this

208
00:10:46,380 --> 00:10:49,500
way the attack Works in two phases so

209
00:10:49,500 --> 00:10:51,360
the first phase is the extract phase and

210
00:10:51,360 --> 00:10:53,579
the second phase is the check face and

211
00:10:53,579 --> 00:10:56,880
in the extract phase what happened is

212
00:10:56,880 --> 00:11:00,019
that uh the

213
00:11:00,019 --> 00:11:04,560
adversary can query is left Oracle with

214
00:11:04,560 --> 00:11:07,920
the message zero zero zero zero now if

215
00:11:07,920 --> 00:11:09,959
it is if the investor is in the real

216
00:11:09,959 --> 00:11:13,320
world by querying it with this message

217
00:11:13,320 --> 00:11:15,980
what it happens is that it will extract

218
00:11:15,980 --> 00:11:21,560
from the uh Oracle the thumbprint key

219
00:11:21,560 --> 00:11:24,420
instead if it's in the real world well

220
00:11:24,420 --> 00:11:26,040
what happened is that they will get a

221
00:11:26,040 --> 00:11:29,000
random value

222
00:11:29,120 --> 00:11:31,500
then there is a second part of the

223
00:11:31,500 --> 00:11:34,440
attack which is called the check

224
00:11:34,440 --> 00:11:37,260
step in this check step what it does is

225
00:11:37,260 --> 00:11:39,300
that now I have my key which is the

226
00:11:39,300 --> 00:11:41,700
temperature Key most probably if I if

227
00:11:41,700 --> 00:11:43,740
I'm in the real world and I'm just gonna

228
00:11:43,740 --> 00:11:46,860
check that is indeed the thumbnail key

229
00:11:46,860 --> 00:11:51,779
so I locally can encrypt a message for

230
00:11:51,779 --> 00:11:54,660
example one one one with the with my key

231
00:11:54,660 --> 00:11:58,860
and then I query the template Oracle to

232
00:11:58,860 --> 00:12:01,560
see if what the encrypted match what

233
00:12:01,560 --> 00:12:04,920
what the Oracle tells me and if I'm in

234
00:12:04,920 --> 00:12:07,640
the real world this uh check will hold

235
00:12:07,640 --> 00:12:10,560
with probability one if I'm in the real

236
00:12:10,560 --> 00:12:12,899
the real world instead this check will

237
00:12:12,899 --> 00:12:15,480
all do with probability very low so I

238
00:12:15,480 --> 00:12:17,640
can distinguish between these two words

239
00:12:17,640 --> 00:12:19,680
and this is this attack

240
00:12:19,680 --> 00:12:25,140
so the notion of frk security uh is uh

241
00:12:25,140 --> 00:12:28,140
is doesn't know

242
00:12:28,140 --> 00:12:30,320
so what we did

243
00:12:30,320 --> 00:12:34,620
in our work was to try to fix the notion

244
00:12:34,620 --> 00:12:38,220
of fixed related key security and we did

245
00:12:38,220 --> 00:12:42,720
it to two fixes the first fix is trying

246
00:12:42,720 --> 00:12:45,540
to avoid the extraction step of the

247
00:12:45,540 --> 00:12:46,800
burners

248
00:12:46,800 --> 00:12:54,180
so the to do that we avoid uh we delete

249
00:12:54,180 --> 00:12:57,600
the Oracle access of the adversary to

250
00:12:57,600 --> 00:12:59,519
the left Oracle meaning the Oracle with

251
00:12:59,519 --> 00:13:01,260
the original key

252
00:13:01,260 --> 00:13:04,320
of course if you talk of this Oracle now

253
00:13:04,320 --> 00:13:08,160
maybe the notional uh become trivials so

254
00:13:08,160 --> 00:13:10,800
we still want to give information to the

255
00:13:10,800 --> 00:13:13,440
adversary about the original key and to

256
00:13:13,440 --> 00:13:16,860
do that we take the game we divided in

257
00:13:16,860 --> 00:13:19,260
you know a two-phase scheme in the first

258
00:13:19,260 --> 00:13:24,240
phase uh distribution sampler can sample

259
00:13:24,240 --> 00:13:27,000
a bunch of messages which are to be

260
00:13:27,000 --> 00:13:29,399
random but not uniformly random they

261
00:13:29,399 --> 00:13:32,899
just have to have some entropy

262
00:13:32,899 --> 00:13:37,139
uh example these messages and and then

263
00:13:37,139 --> 00:13:39,959
in the The Challenger

264
00:13:39,959 --> 00:13:43,079
either encrypt the messages with the

265
00:13:43,079 --> 00:13:45,779
with uh with the block Cipher or you

266
00:13:45,779 --> 00:13:48,360
will encrypt the messages with a random

267
00:13:48,360 --> 00:13:51,180
permutation and then the second phase of

268
00:13:51,180 --> 00:13:52,680
the game starts

269
00:13:52,680 --> 00:13:55,680
now through to this uh this fix we know

270
00:13:55,680 --> 00:13:57,839
we should assure that the adversity

271
00:13:57,839 --> 00:14:00,060
cannot perform the first step of the

272
00:14:00,060 --> 00:14:01,139


273
00:14:01,139 --> 00:14:04,019
uh but maybe this is not enough

274
00:14:04,019 --> 00:14:07,440
so what we did next is try to avoid also

275
00:14:07,440 --> 00:14:09,660
the second step of that so in the second

276
00:14:09,660 --> 00:14:12,060
step of the attack the adversary can

277
00:14:12,060 --> 00:14:15,060
locally test if the extracted key match

278
00:14:15,060 --> 00:14:17,160
the temperature

279
00:14:17,160 --> 00:14:20,399
and air uh

280
00:14:20,399 --> 00:14:23,940
so it can encrypt the key and then you

281
00:14:23,940 --> 00:14:25,980
can go to the right Oracle And if either

282
00:14:25,980 --> 00:14:27,839
the right if the right Oracle is the

283
00:14:27,839 --> 00:14:30,240
random permutation the check will not

284
00:14:30,240 --> 00:14:32,579
hold so what we do is that instead of

285
00:14:32,579 --> 00:14:35,880
giving a role access to a random

286
00:14:35,880 --> 00:14:38,579
permutation in the in the DL world in

287
00:14:38,579 --> 00:14:41,100
the other word we give access to the

288
00:14:41,100 --> 00:14:44,279
tampering function to the block Cipher

289
00:14:44,279 --> 00:14:47,459
on the template key itself so now these

290
00:14:47,459 --> 00:14:51,300
two words beside what are the the

291
00:14:51,300 --> 00:14:55,620
encryption the the ciphertext have the

292
00:14:55,620 --> 00:14:58,500
same Oracle access so if you want to do

293
00:14:58,500 --> 00:15:01,860
a check that depends on the on the on

294
00:15:01,860 --> 00:15:05,060
the on the

295
00:15:05,060 --> 00:15:09,739
on the Oracle this check should

296
00:15:09,920 --> 00:15:13,920
give the same answer right so in this

297
00:15:13,920 --> 00:15:16,620
way we try to avoid the second part of

298
00:15:16,620 --> 00:15:18,019
the attack

299
00:15:18,019 --> 00:15:21,779
uh of course this uh this might be not

300
00:15:21,779 --> 00:15:26,699
enough so we proposed these two fixes

301
00:15:26,699 --> 00:15:30,720
oh no sorry okay yeah here I am so now

302
00:15:30,720 --> 00:15:34,199
if you look at this uh fix uh we also

303
00:15:34,199 --> 00:15:36,959
gain some Simplicity in the definition

304
00:15:36,959 --> 00:15:39,959
because in the original definition there

305
00:15:39,959 --> 00:15:42,240
was the point in which uh the constraint

306
00:15:42,240 --> 00:15:44,100
in which uh you know the tampering

307
00:15:44,100 --> 00:15:47,699
function cannot have too many a fixed

308
00:15:47,699 --> 00:15:51,560
point and the point was that

309
00:15:51,560 --> 00:15:54,180
this condition was necessary because

310
00:15:54,180 --> 00:15:56,399
there was this there is another attack

311
00:15:56,399 --> 00:15:59,880
in which uh you know if the tampering

312
00:15:59,880 --> 00:16:02,399
function has a lot of fixed Point what I

313
00:16:02,399 --> 00:16:04,260
can do is that for example let's suppose

314
00:16:04,260 --> 00:16:08,100
that there is a a k k bar which is very

315
00:16:08,100 --> 00:16:12,240
probable I can adjust the assume that uh

316
00:16:12,240 --> 00:16:16,139
in the real world I got access to a

317
00:16:16,139 --> 00:16:19,800
dampering uh to the to the block Cipher

318
00:16:19,800 --> 00:16:22,399
with this uh K Bar

319
00:16:22,399 --> 00:16:27,240
a key set so I can just check if this

320
00:16:27,240 --> 00:16:31,220
indeed the key that I'm that I'm

321
00:16:31,220 --> 00:16:34,560
worried and even if any if I am in the

322
00:16:34,560 --> 00:16:36,000
real world this probability is quite

323
00:16:36,000 --> 00:16:38,279
high and therefore I can distinguish

324
00:16:38,279 --> 00:16:39,720
between the real world and the real

325
00:16:39,720 --> 00:16:42,959
world and because of uh this attack uh

326
00:16:42,959 --> 00:16:45,300
we had in the in the regional definition

327
00:16:45,300 --> 00:16:48,000
we had to have this constraint but now

328
00:16:48,000 --> 00:16:50,759
in the new definition we have in both

329
00:16:50,759 --> 00:16:54,180
cases uh other collapses to the to the

330
00:16:54,180 --> 00:16:56,519
the block Saturn with the temperature so

331
00:16:56,519 --> 00:16:58,860
this attacker doesn't hold so this

332
00:16:58,860 --> 00:17:00,779
attack does not hold and therefore we

333
00:17:00,779 --> 00:17:03,360
don't need this constraint

334
00:17:03,360 --> 00:17:05,939
okay so just to summarize and then

335
00:17:05,939 --> 00:17:08,160
Tropic fixes really the key a security

336
00:17:08,160 --> 00:17:10,439
notion that we put forward in this work

337
00:17:10,439 --> 00:17:13,559
uh just uh you know is the very similar

338
00:17:13,559 --> 00:17:15,359
to the previous one there's the Stampede

339
00:17:15,359 --> 00:17:17,040
key then there is a bunch of messages

340
00:17:17,040 --> 00:17:18,839
that are sampled from a distribution

341
00:17:18,839 --> 00:17:21,119
this message has to be random but they

342
00:17:21,119 --> 00:17:22,740
don't have to be uniformly random just

343
00:17:22,740 --> 00:17:25,500
they need to have some entropy and then

344
00:17:25,500 --> 00:17:27,839
the adversary can play with a tampering

345
00:17:27,839 --> 00:17:30,179
Oracle and it can distinguish between he

346
00:17:30,179 --> 00:17:33,900
has to distinguish if we got some good

347
00:17:33,900 --> 00:17:36,179
side effects so some real sci-fi attacks

348
00:17:36,179 --> 00:17:38,100
or some you know software that's made

349
00:17:38,100 --> 00:17:41,299
with a random permutation

350
00:17:42,020 --> 00:17:44,580
but you can see the paper for the

351
00:17:44,580 --> 00:17:46,080
details

352
00:17:46,080 --> 00:17:49,520
so our first result is to show in the uh

353
00:17:49,520 --> 00:17:53,179
edl Cipher model that our definition

354
00:17:53,179 --> 00:17:57,059
holds true so by doing that we assure

355
00:17:57,059 --> 00:17:59,580
that there are no black box attack on

356
00:17:59,580 --> 00:18:02,100
our definition which means that our

357
00:18:02,100 --> 00:18:04,559
definition should is secure it should be

358
00:18:04,559 --> 00:18:07,520
secure enough same practice

359
00:18:07,520 --> 00:18:11,640
and okay so in the dsfl model we

360
00:18:11,640 --> 00:18:14,280
consider this uh the same definition of

361
00:18:14,280 --> 00:18:16,620
before but we also give our local access

362
00:18:16,620 --> 00:18:19,559
to the adversary to this ideal Cipher

363
00:18:19,559 --> 00:18:22,200
and the most important part is that we

364
00:18:22,200 --> 00:18:24,480
also give access to the tampering

365
00:18:24,480 --> 00:18:28,260
function to the uh to the uh with the

366
00:18:28,260 --> 00:18:29,700
Earth cycle this is very important

367
00:18:29,700 --> 00:18:32,580
because you know the attack of Bernstein

368
00:18:32,580 --> 00:18:36,059
worked because the function had a

369
00:18:36,059 --> 00:18:39,240
capability of computing the the block

370
00:18:39,240 --> 00:18:42,539
side so we need to have a block cycle

371
00:18:42,539 --> 00:18:45,419
dependent sampling function and in this

372
00:18:45,419 --> 00:18:47,700
model we can prove security as you can

373
00:18:47,700 --> 00:18:50,960
see there are some some numbers here

374
00:18:50,960 --> 00:18:54,720
but I would say it's quite of a tight

375
00:18:54,720 --> 00:18:57,720
reduction

376
00:18:59,039 --> 00:19:02,700
okay next

377
00:19:02,700 --> 00:19:07,020
now that we have our sound and safe

378
00:19:07,020 --> 00:19:10,559
assumption we went back to the idea of

379
00:19:10,559 --> 00:19:16,200
uh uh Fair uh kathman and Manic and we

380
00:19:16,200 --> 00:19:18,960
slightly modified the encoding scheme

381
00:19:18,960 --> 00:19:21,360
and so uh

382
00:19:21,360 --> 00:19:23,880
to encode a message what we do is that

383
00:19:23,880 --> 00:19:25,919
we put on the left side the fresh key

384
00:19:25,919 --> 00:19:28,039
and on the

385
00:19:28,039 --> 00:19:31,559
right side we'll do an encryption of the

386
00:19:31,559 --> 00:19:35,100
message but that with some Randomness so

387
00:19:35,100 --> 00:19:36,780
you have a random thing that you put on

388
00:19:36,780 --> 00:19:39,299
the message which because we needed a

389
00:19:39,299 --> 00:19:41,880
bit of entry in the messages this is how

390
00:19:41,880 --> 00:19:44,280
we add this a bit of entry and this is

391
00:19:44,280 --> 00:19:48,320
our encoding so K and the Sci-Fi text

392
00:19:48,320 --> 00:19:51,299
Sigma and to the code we do you know the

393
00:19:51,299 --> 00:19:52,980
trivial thing so we use the key to

394
00:19:52,980 --> 00:19:55,799
decrypt we receive a message on some pad

395
00:19:55,799 --> 00:19:57,600
and what we need to do is just to you

396
00:19:57,600 --> 00:20:00,360
know remove this path and out

397
00:20:00,360 --> 00:20:05,100
and we have a theorem to show that if

398
00:20:05,100 --> 00:20:06,539
the

399
00:20:06,539 --> 00:20:10,559
uh encryption scheme where if the block

400
00:20:10,559 --> 00:20:15,780
Cipher is uh in public uh fixed rather

401
00:20:15,780 --> 00:20:18,900
key secure then the normal level code is

402
00:20:18,900 --> 00:20:21,120
secure as well and as you can see that

403
00:20:21,120 --> 00:20:24,299
the uh the the the the the result is

404
00:20:24,299 --> 00:20:27,780
quite tight uh and here we need to only

405
00:20:27,780 --> 00:20:30,720
it was one query to the to the dumpling

406
00:20:30,720 --> 00:20:34,020
protocol and one message to be encrypted

407
00:20:34,020 --> 00:20:37,520
and that's it

408
00:20:41,760 --> 00:20:44,640
uh thank you

409
00:20:44,640 --> 00:20:47,340
uh so is there any question or comment

410
00:20:47,340 --> 00:20:50,240
from Beijing

411
00:20:54,740 --> 00:20:58,080
and maybe from Kobe any question or

412
00:20:58,080 --> 00:21:00,179
comment from Kobe

413
00:21:00,179 --> 00:21:01,980
yeah one question

414
00:21:01,980 --> 00:21:03,900
okay

415
00:21:03,900 --> 00:21:06,660
hello thank you for the presentation

416
00:21:06,660 --> 00:21:07,620
um

417
00:21:07,620 --> 00:21:10,440
so I have one question so

418
00:21:10,440 --> 00:21:12,240
um Your solution is to add your

419
00:21:12,240 --> 00:21:15,299
Randomness in the primitive

420
00:21:15,299 --> 00:21:16,919
um so I'm Bard by the way

421
00:21:16,919 --> 00:21:20,220
um so one thing we thought of when we we

422
00:21:20,220 --> 00:21:21,960
saw the the issue with with the model

423
00:21:21,960 --> 00:21:23,940
was to just instead of

424
00:21:23,940 --> 00:21:25,799
um putting the key in the first part

425
00:21:25,799 --> 00:21:29,220
split the key and for instance gamma

426
00:21:29,220 --> 00:21:30,840
would consists of like a normal block

427
00:21:30,840 --> 00:21:32,700
Cipher encryption with one half of the

428
00:21:32,700 --> 00:21:34,980
key and the other half would be the top

429
00:21:34,980 --> 00:21:37,440
part does that also work or do you see

430
00:21:37,440 --> 00:21:38,820
what I mean

431
00:21:38,820 --> 00:21:42,840
so uh so if you could go to one of the

432
00:21:42,840 --> 00:21:44,039
beginning slides where you had the

433
00:21:44,039 --> 00:21:45,179
picture

434
00:21:45,179 --> 00:21:50,039
a slide four or five I forgot the number

435
00:21:50,039 --> 00:21:53,940
uh maybe here okay yeah whatever so yeah

436
00:21:53,940 --> 00:21:56,760
this guy so the key what happens if you

437
00:21:56,760 --> 00:21:58,860
would for instance split the key in two

438
00:21:58,860 --> 00:22:01,140
and one half of them is concatenated in

439
00:22:01,140 --> 00:22:04,380
the gamma would that also work or

440
00:22:04,380 --> 00:22:09,120
do you see yeah we we look at into this

441
00:22:09,120 --> 00:22:11,600
actually uh we we ask

442
00:22:11,600 --> 00:22:18,480
uhman uh and I think uh we we we

443
00:22:18,480 --> 00:22:21,720
couldn't we we couldn't approve it but

444
00:22:21,720 --> 00:22:24,960
uh we didn't put so much effort also

445
00:22:24,960 --> 00:22:28,260
improve it but yes because this this

446
00:22:28,260 --> 00:22:29,820
would be another solution right it

447
00:22:29,820 --> 00:22:31,260
probably will be also a bit more

448
00:22:31,260 --> 00:22:33,299
efficient because there is this notion

449
00:22:33,299 --> 00:22:35,520
I'm sorry I'm not a big expert in Block

450
00:22:35,520 --> 00:22:37,740
Cipher but this is notion of tweakable

451
00:22:37,740 --> 00:22:41,640
uh uh block Cipher which I think would

452
00:22:41,640 --> 00:22:44,700
match this notion uh better right

453
00:22:44,700 --> 00:22:47,220
yes yeah it's a difference but this

454
00:22:47,220 --> 00:22:49,080
comparable solution indeed yes yeah yeah

455
00:22:49,080 --> 00:22:51,120
yeah yeah yeah actually it would be nice

456
00:22:51,120 --> 00:22:53,760
to prove it secure but we didn't manage

457
00:22:53,760 --> 00:22:56,820
uh to do it secure I don't remember a

458
00:22:56,820 --> 00:23:00,600
lot of the details but uh you was in in

459
00:23:00,600 --> 00:23:02,940
the in the you know in the reduction of

460
00:23:02,940 --> 00:23:04,320
uh

461
00:23:04,320 --> 00:23:07,860
to the ideal Cipher model we've we had

462
00:23:07,860 --> 00:23:11,460
it was a bit more complicated to handle

463
00:23:11,460 --> 00:23:14,400
because I mean in our solution we

464
00:23:14,400 --> 00:23:18,200
encrypt the key so we have kind of a

465
00:23:18,200 --> 00:23:20,600
layer

466
00:23:20,600 --> 00:23:23,460
more of uh protection because this key

467
00:23:23,460 --> 00:23:27,600
is is a is encrypted now but yeah that

468
00:23:27,600 --> 00:23:30,059
would be cool in fact

469
00:23:30,059 --> 00:23:32,039
okay yeah thank you I have no other

470
00:23:32,039 --> 00:23:34,140
questions

471
00:23:34,140 --> 00:23:36,900
yeah thank you and any question any

472
00:23:36,900 --> 00:23:39,559
additional question

473
00:23:40,740 --> 00:23:43,200
maybe due to the time limitation we can

474
00:23:43,200 --> 00:23:45,539
move to the next talk and give you any

475
00:23:45,539 --> 00:23:47,760
question you can maybe send an email to

476
00:23:47,760 --> 00:23:48,780
a speaker

477
00:23:48,780 --> 00:23:51,559
so thanks

478
00:23:52,039 --> 00:23:55,460
okay bye

479
00:23:57,059 --> 00:23:59,700
and you can stop sharing your screen oh

480
00:23:59,700 --> 00:24:03,380
so the next talk is uh SCP mode

481
00:24:03,380 --> 00:24:05,940
semantically secure lens blazing

482
00:24:05,940 --> 00:24:07,260
encryption

483
00:24:07,260 --> 00:24:10,980
and the talk will be given by fabinho uh

484
00:24:10,980 --> 00:24:13,679
Buffy from Switzerland and he will keep

485
00:24:13,679 --> 00:24:16,559
the talk in quebe so this way open the

486
00:24:16,559 --> 00:24:20,539
speaker sabinio Buffet

487
00:24:36,000 --> 00:24:38,880
hello yeah so hi thanks for introduction

488
00:24:38,880 --> 00:24:40,799
my name is Fabio Banfi and I'm going to

489
00:24:40,799 --> 00:24:42,659
present SCP mode semantically secure

490
00:24:42,659 --> 00:24:45,419
length preserving encryption

491
00:24:45,419 --> 00:24:47,419
um

492
00:24:48,480 --> 00:24:51,720
okay it's working so yes this is

493
00:24:51,720 --> 00:24:52,520
um

494
00:24:52,520 --> 00:24:54,720
the structure of the presentation I will

495
00:24:54,720 --> 00:24:55,860
begin with some background and

496
00:24:55,860 --> 00:24:57,659
motivation then I will introduce the

497
00:24:57,659 --> 00:24:59,400
concept of length preserving encryption

498
00:24:59,400 --> 00:25:01,500
slash and ciphering I will explain later

499
00:25:01,500 --> 00:25:04,080
what the difference is after that I will

500
00:25:04,080 --> 00:25:07,320
introduce a new scheme SCB mode which is

501
00:25:07,320 --> 00:25:09,900
a semantically secure LP and in the end

502
00:25:09,900 --> 00:25:11,940
we will have conclusions

503
00:25:11,940 --> 00:25:13,860
so let's start with the background in

504
00:25:13,860 --> 00:25:17,280
motivation so we all know that we

505
00:25:17,280 --> 00:25:18,780
usually construct encryption schemes

506
00:25:18,780 --> 00:25:21,840
using uh modes of operations which

507
00:25:21,840 --> 00:25:24,419
transform block ciphers into encryption

508
00:25:24,419 --> 00:25:26,340
schemes

509
00:25:26,340 --> 00:25:28,939
thanks

510
00:25:29,039 --> 00:25:31,158
um

511
00:25:32,039 --> 00:25:34,860
so this seems to be has stopped working

512
00:25:34,860 --> 00:25:37,158
now

513
00:25:46,799 --> 00:25:50,220
thanks guys thanks so much

514
00:25:50,220 --> 00:25:53,039
sorry about that so yes uh in most of

515
00:25:53,039 --> 00:25:54,480
operation we usually

516
00:25:54,480 --> 00:25:57,539
um have some input message which which

517
00:25:57,539 --> 00:26:00,000
we assume is composed of blocks of

518
00:26:00,000 --> 00:26:01,260
length n

519
00:26:01,260 --> 00:26:03,299
and from this we then compute The Cypher

520
00:26:03,299 --> 00:26:05,880
text which as usually some expansion so

521
00:26:05,880 --> 00:26:08,100
it's going to be again a sequence of

522
00:26:08,100 --> 00:26:11,580
blocks of length n plus some Lambda bits

523
00:26:11,580 --> 00:26:13,980
where Lambda we call this the expansion

524
00:26:13,980 --> 00:26:15,120
Factor

525
00:26:15,120 --> 00:26:17,520
so a very famous insecure way is of

526
00:26:17,520 --> 00:26:19,679
course the ECB mode the electronic code

527
00:26:19,679 --> 00:26:20,940
boot mode

528
00:26:20,940 --> 00:26:23,340
where essentially we have zero expansion

529
00:26:23,340 --> 00:26:25,559
and the idea is that we simply and

530
00:26:25,559 --> 00:26:28,620
Cipher every block of the message to

531
00:26:28,620 --> 00:26:31,080
obtain our ciphertext so therefore again

532
00:26:31,080 --> 00:26:34,620
the length of the ciphertext is going to

533
00:26:34,620 --> 00:26:37,679
be the same as the one of the message on

534
00:26:37,679 --> 00:26:39,480
the other hand a secure way is for

535
00:26:39,480 --> 00:26:42,179
example CBC where the expansion factor

536
00:26:42,179 --> 00:26:44,940
is exactly the block length n

537
00:26:44,940 --> 00:26:46,980
and the idea here will be the first

538
00:26:46,980 --> 00:26:50,100
sample a random block of n Bits this

539
00:26:50,100 --> 00:26:51,600
will be actually what accounts for the

540
00:26:51,600 --> 00:26:54,000
expansion because this is then included

541
00:26:54,000 --> 00:26:55,860
as part of ciphertext so these are extra

542
00:26:55,860 --> 00:26:58,140
n Bits And then for the for the

543
00:26:58,140 --> 00:27:00,000
remaining blocks we use the previous

544
00:27:00,000 --> 00:27:02,880
block as a pad and then we encipher the

545
00:27:02,880 --> 00:27:05,760
current block of the input message

546
00:27:05,760 --> 00:27:08,100
so again here we see that the resulting

547
00:27:08,100 --> 00:27:11,220
ciphertext has uh is formed of L plus

548
00:27:11,220 --> 00:27:12,840
one blocks

549
00:27:12,840 --> 00:27:15,120
and of course both schemes can actually

550
00:27:15,120 --> 00:27:17,299
be adapted via a technique called

551
00:27:17,299 --> 00:27:20,100
ciphertextiling into encryption schemes

552
00:27:20,100 --> 00:27:22,380
for messages of arbitrary length not

553
00:27:22,380 --> 00:27:25,380
only for messages of length multiple of

554
00:27:25,380 --> 00:27:27,900
a block Cipher

555
00:27:27,900 --> 00:27:30,299
so let's go to motivation now from the

556
00:27:30,299 --> 00:27:32,460
previous slides and questions should

557
00:27:32,460 --> 00:27:34,919
actually come up naturally why isn't it

558
00:27:34,919 --> 00:27:38,159
possible to have kind of both of these

559
00:27:38,159 --> 00:27:40,200
nice features namely Security in the

560
00:27:40,200 --> 00:27:43,380
sense of in CPS Security but also uh

561
00:27:43,380 --> 00:27:47,120
zero expansion or length preservation

562
00:27:47,120 --> 00:27:49,799
uh and I want to argue now that this is

563
00:27:49,799 --> 00:27:51,480
actually something that might be also

564
00:27:51,480 --> 00:27:53,159
useful in practice what if for example

565
00:27:53,159 --> 00:27:55,860
we have the following scenario where we

566
00:27:55,860 --> 00:27:57,960
have many short messages that need to be

567
00:27:57,960 --> 00:27:59,820
transmitted that communication is

568
00:27:59,820 --> 00:28:02,159
expensive so in more detail for example

569
00:28:02,159 --> 00:28:04,919
consider a case in which every day we

570
00:28:04,919 --> 00:28:08,460
have to transmit some M messages

571
00:28:08,460 --> 00:28:10,980
also assume that each message consists

572
00:28:10,980 --> 00:28:13,559
of B blocks this quantity will be

573
00:28:13,559 --> 00:28:16,740
defined by the underlying block Cipher

574
00:28:16,740 --> 00:28:19,220
now with a conventional lean CPA scheme

575
00:28:19,220 --> 00:28:21,659
the resulting number of transmitted

576
00:28:21,659 --> 00:28:25,260
blocks will be M times B plus 1 whereas

577
00:28:25,260 --> 00:28:27,419
if we would have an encryption scheme

578
00:28:27,419 --> 00:28:29,100
which is length preserving so without

579
00:28:29,100 --> 00:28:31,740
expect any expansion the number of

580
00:28:31,740 --> 00:28:34,140
transmitted blocks will be just n times

581
00:28:34,140 --> 00:28:37,919
B so now we see that if B is very small

582
00:28:37,919 --> 00:28:41,159
compared to M then the cost kind of of

583
00:28:41,159 --> 00:28:43,679
the secure scheme is twice as much as

584
00:28:43,679 --> 00:28:46,500
the one of uh of the skin without

585
00:28:46,500 --> 00:28:48,419
expansion

586
00:28:48,419 --> 00:28:50,640
so again the question is can we actually

587
00:28:50,640 --> 00:28:52,919
avoid expansion but retain semantic

588
00:28:52,919 --> 00:28:54,419
security

589
00:28:54,419 --> 00:28:57,000
well this is something that seems

590
00:28:57,000 --> 00:28:59,580
impossible but spoiler alert is actually

591
00:28:59,580 --> 00:29:00,539
not

592
00:29:00,539 --> 00:29:02,940
so uh for this we need to introduce

593
00:29:02,940 --> 00:29:06,480
lengths preserving encryption schemes so

594
00:29:06,480 --> 00:29:08,360
uh

595
00:29:08,360 --> 00:29:11,039
again this seems to be impossible so

596
00:29:11,039 --> 00:29:13,740
let's see why this is the case

597
00:29:13,740 --> 00:29:15,360
it seems that

598
00:29:15,360 --> 00:29:18,539
if we enforce an encryption scheme to

599
00:29:18,539 --> 00:29:21,360
have a zero expansion then this actually

600
00:29:21,360 --> 00:29:23,100
needs to be a deterministic function

601
00:29:23,100 --> 00:29:25,679
which we all know can't possibly be in

602
00:29:25,679 --> 00:29:27,299
CPA secure

603
00:29:27,299 --> 00:29:29,520
so in fact if that would be the case

604
00:29:29,520 --> 00:29:31,679
then essentially we have that for any

605
00:29:31,679 --> 00:29:33,960
possible length this algorithm will be

606
00:29:33,960 --> 00:29:36,120
implementing a permutation over bit

607
00:29:36,120 --> 00:29:39,120
strings of length t

608
00:29:39,120 --> 00:29:41,520
so this is actually something that in

609
00:29:41,520 --> 00:29:43,020
reality in cryptography is actually

610
00:29:43,020 --> 00:29:45,539
studied this is sometimes called length

611
00:29:45,539 --> 00:29:47,580
preserving encryption but maybe should

612
00:29:47,580 --> 00:29:50,220
be also uh more appropriately be called

613
00:29:50,220 --> 00:29:52,440
length preserving and ciphering since

614
00:29:52,440 --> 00:29:55,620
again this is a deterministic process

615
00:29:55,620 --> 00:29:58,320
and it is also sometimes called variable

616
00:29:58,320 --> 00:30:00,059
input length

617
00:30:00,059 --> 00:30:02,220
block Cipher

618
00:30:02,220 --> 00:30:04,380
but back to our question we want to

619
00:30:04,380 --> 00:30:07,080
achieve more than just PRP security from

620
00:30:07,080 --> 00:30:08,940
such a scheme here

621
00:30:08,940 --> 00:30:11,820
so this is actually possible because we

622
00:30:11,820 --> 00:30:13,980
can do something about correctness

623
00:30:13,980 --> 00:30:16,559
namely we can relax it and instead of

624
00:30:16,559 --> 00:30:18,539
requiring correctness of such a scheme

625
00:30:18,539 --> 00:30:20,640
to be perfect we can require it to be

626
00:30:20,640 --> 00:30:23,220
only computational

627
00:30:23,220 --> 00:30:26,760
so in this case then obviously EK can't

628
00:30:26,760 --> 00:30:29,640
be a permutation anymore on any length

629
00:30:29,640 --> 00:30:32,220
or with strings of lengthy and also it

630
00:30:32,220 --> 00:30:34,080
seems that it should be a stateful

631
00:30:34,080 --> 00:30:36,659
algorithm

632
00:30:36,659 --> 00:30:40,320
and so let's define the syntax of this

633
00:30:40,320 --> 00:30:41,580
object now

634
00:30:41,580 --> 00:30:43,980
so what we have is a pair of algorithms

635
00:30:43,980 --> 00:30:46,440
one for encryption and one from the for

636
00:30:46,440 --> 00:30:49,320
decryption they both take a beat string

637
00:30:49,320 --> 00:30:51,720
as input and also some State and we'll

638
00:30:51,720 --> 00:30:54,539
output again some bit string and some

639
00:30:54,539 --> 00:30:55,919
updated state so we have different

640
00:30:55,919 --> 00:30:59,520
states for encryption and decryption

641
00:30:59,520 --> 00:31:01,380
now the requirement of these two and

642
00:31:01,380 --> 00:31:03,120
these two algorithms are as follows so

643
00:31:03,120 --> 00:31:06,059
for any uh key for any encryption State

644
00:31:06,059 --> 00:31:09,299
s and for any decryption state t

645
00:31:09,299 --> 00:31:11,340
we first of all need that these two

646
00:31:11,340 --> 00:31:14,159
algorithms are efficiently computable

647
00:31:14,159 --> 00:31:16,020
and also we need that again they

648
00:31:16,020 --> 00:31:18,600
preserve the length so this means for

649
00:31:18,600 --> 00:31:21,000
example for encryption that on inputs on

650
00:31:21,000 --> 00:31:23,700
message M and some State s we want that

651
00:31:23,700 --> 00:31:25,799
the resulting ciphertext has the same

652
00:31:25,799 --> 00:31:28,140
length as the input message and here the

653
00:31:28,140 --> 00:31:29,120
state

654
00:31:29,120 --> 00:31:32,520
is something that is kept privately by

655
00:31:32,520 --> 00:31:35,220
the sender it's not something that is

656
00:31:35,220 --> 00:31:37,080
transmitted to the receiver

657
00:31:37,080 --> 00:31:39,659
so in the following slides I will use

658
00:31:39,659 --> 00:31:41,460
this notation to indicate that we

659
00:31:41,460 --> 00:31:44,399
encrypt the message M under some key K

660
00:31:44,399 --> 00:31:46,980
and some State s resulting in server

661
00:31:46,980 --> 00:31:49,740
text C but we also then on the side

662
00:31:49,740 --> 00:31:54,559
update the state s to the output state

663
00:31:54,960 --> 00:31:57,600
and also importantly note that in this

664
00:31:57,600 --> 00:32:00,659
definition unlike usually one does there

665
00:32:00,659 --> 00:32:03,299
is no hard-coded notion of correctness

666
00:32:03,299 --> 00:32:06,059
in fact this will be a separate uh

667
00:32:06,059 --> 00:32:07,380
property that we will have to Define

668
00:32:07,380 --> 00:32:09,600
later

669
00:32:09,600 --> 00:32:11,820
so yeah let's define now security and

670
00:32:11,820 --> 00:32:14,220
correctness for such a scheme where this

671
00:32:14,220 --> 00:32:17,580
denotes the empty state

672
00:32:17,580 --> 00:32:20,700
so for security we Define this in terms

673
00:32:20,700 --> 00:32:22,620
of an advantage advantage of an

674
00:32:22,620 --> 00:32:24,840
adversary in distinguishing between two

675
00:32:24,840 --> 00:32:26,700
settings so in the first setting the

676
00:32:26,700 --> 00:32:28,679
adversary is given access to an

677
00:32:28,679 --> 00:32:31,380
encryption Oracle where the state is

678
00:32:31,380 --> 00:32:33,600
updated after each query by the

679
00:32:33,600 --> 00:32:36,720
adversary and in the other setting the

680
00:32:36,720 --> 00:32:38,279
ideal setting the adversary is

681
00:32:38,279 --> 00:32:40,500
interacting with an oracle that simply

682
00:32:40,500 --> 00:32:44,039
always gives random beats as output

683
00:32:44,039 --> 00:32:47,100
and for correctness we Define this again

684
00:32:47,100 --> 00:32:49,919
in term in terms of an advantage of an

685
00:32:49,919 --> 00:32:51,779
adversary in distinguishing between two

686
00:32:51,779 --> 00:32:52,620
settings

687
00:32:52,620 --> 00:32:55,039
in the first setting the adversary has

688
00:32:55,039 --> 00:32:58,380
is given access to an oracle that first

689
00:32:58,380 --> 00:33:00,080
encrypts and then

690
00:33:00,080 --> 00:33:03,299
subsequently decrypts and also updates

691
00:33:03,299 --> 00:33:05,399
the states accordingly

692
00:33:05,399 --> 00:33:08,220
and in the ideal setting the adversary

693
00:33:08,220 --> 00:33:11,159
simply obtains access to the identity

694
00:33:11,159 --> 00:33:14,539
function Oracle

695
00:33:14,659 --> 00:33:17,340
let me now show you a scheme that indeed

696
00:33:17,340 --> 00:33:19,440
satisfies these two Notions

697
00:33:19,440 --> 00:33:23,100
so this is called SCB

698
00:33:23,100 --> 00:33:26,399
so SCB stands for secure secure code

699
00:33:26,399 --> 00:33:27,440
book

700
00:33:27,440 --> 00:33:30,299
and the name is has been chosen because

701
00:33:30,299 --> 00:33:33,779
this can be seen as a variant or a patch

702
00:33:33,779 --> 00:33:37,260
around the insecure scheme ECB

703
00:33:37,260 --> 00:33:40,340
so the observation comes from ECB itself

704
00:33:40,340 --> 00:33:43,140
if you remember from before the problem

705
00:33:43,140 --> 00:33:45,840
actually is that in ECB

706
00:33:45,840 --> 00:33:48,840
we completely lose security as soon as

707
00:33:48,840 --> 00:33:52,080
some block is repeated within or across

708
00:33:52,080 --> 00:33:53,279
messages

709
00:33:53,279 --> 00:33:56,880
but if we assume somehow that there's uh

710
00:33:56,880 --> 00:33:59,460
no block that repeats actually the

711
00:33:59,460 --> 00:34:01,279
output of ECB

712
00:34:01,279 --> 00:34:04,399
is indistinguishable from

713
00:34:04,399 --> 00:34:06,659
random bit strings

714
00:34:06,659 --> 00:34:08,159
but of course in general we cannot

715
00:34:08,159 --> 00:34:10,080
assume that this is the case

716
00:34:10,080 --> 00:34:13,859
so the idea would be to keep track of

717
00:34:13,859 --> 00:34:15,899
the blocks that we've seen so far and

718
00:34:15,899 --> 00:34:18,359
for the blocks that are repeated we

719
00:34:18,359 --> 00:34:19,918
should do something different we should

720
00:34:19,918 --> 00:34:22,440
not and Cipher them again otherwise we

721
00:34:22,440 --> 00:34:24,599
will of course again lose security

722
00:34:24,599 --> 00:34:28,260
but we should somehow uh find a way to

723
00:34:28,260 --> 00:34:30,839
to signal to the receiver that the

724
00:34:30,839 --> 00:34:33,839
current block is a signal that some

725
00:34:33,839 --> 00:34:36,119
previous block was already transmitted

726
00:34:36,119 --> 00:34:40,099
and we are trying to transmit this again

727
00:34:40,139 --> 00:34:42,540
so this of course introduces some

728
00:34:42,540 --> 00:34:44,280
problem namely on the correctness of the

729
00:34:44,280 --> 00:34:47,099
scheme because now we want to interpret

730
00:34:47,099 --> 00:34:49,080
kind of a Subspace of the possible

731
00:34:49,080 --> 00:34:51,960
blocks as repetition signals rather than

732
00:34:51,960 --> 00:34:54,780
as normal blocks that one might want to

733
00:34:54,780 --> 00:34:57,480
transmit to the receiver

734
00:34:57,480 --> 00:34:59,580
but of course we can kind of Be Clever

735
00:34:59,580 --> 00:35:01,440
about the choice of this Subspace in a

736
00:35:01,440 --> 00:35:03,960
sense that we can spread it as uniformly

737
00:35:03,960 --> 00:35:09,119
as possible over the space of blocks

738
00:35:09,119 --> 00:35:11,040
so I will show you next how to

739
00:35:11,040 --> 00:35:14,220
concretely do this so the idea is that

740
00:35:14,220 --> 00:35:16,740
we need to Define two parameter segment

741
00:35:16,740 --> 00:35:19,320
Tower roughly speaking Sigma will affect

742
00:35:19,320 --> 00:35:21,540
security and Tau will affect correctness

743
00:35:21,540 --> 00:35:24,480
we also need first of all that they add

744
00:35:24,480 --> 00:35:28,920
up to at most and the block size we know

745
00:35:28,920 --> 00:35:31,740
we need also a key K1 for the block

746
00:35:31,740 --> 00:35:34,140
Cipher itself and a second key K2 which

747
00:35:34,140 --> 00:35:37,079
will be used as a pad so we further use

748
00:35:37,079 --> 00:35:40,200
a compression function H mapping n bit

749
00:35:40,200 --> 00:35:43,380
strings to Tau beat strings

750
00:35:43,380 --> 00:35:46,500
and also a look at table s which will be

751
00:35:46,500 --> 00:35:48,960
the state of encryption which Maps B

752
00:35:48,960 --> 00:35:52,680
string style of length style so hashes

753
00:35:52,680 --> 00:35:55,500
of blocks two bit strings of length

754
00:35:55,500 --> 00:35:57,540
Sigma which will be interpreted as

755
00:35:57,540 --> 00:35:59,940
counters within the scheme

756
00:35:59,940 --> 00:36:03,000
and also we'll use this notation to uh

757
00:36:03,000 --> 00:36:05,339
to mean either the values stored in the

758
00:36:05,339 --> 00:36:08,820
lookout table under hash H or the value

759
00:36:08,820 --> 00:36:12,119
bottom if no such hash has been stored

760
00:36:12,119 --> 00:36:15,180
so far in the lookout table s

761
00:36:15,180 --> 00:36:18,180
so then what we do for each block Mi is

762
00:36:18,180 --> 00:36:20,760
the following we first of all get a hash

763
00:36:20,760 --> 00:36:22,680
from h of this block

764
00:36:22,680 --> 00:36:24,900
and we check whether we saw this hash

765
00:36:24,900 --> 00:36:27,420
again in the lookout table s

766
00:36:27,420 --> 00:36:31,380
now this check here approximates whether

767
00:36:31,380 --> 00:36:33,960
Mi is a repetition or not but of course

768
00:36:33,960 --> 00:36:35,640
there might be problems here because we

769
00:36:35,640 --> 00:36:37,680
might have collisions in the function H

770
00:36:37,680 --> 00:36:40,500
since we are mapping to less beats than

771
00:36:40,500 --> 00:36:41,760
n

772
00:36:41,760 --> 00:36:44,460
so if this is not the case then we are

773
00:36:44,460 --> 00:36:46,500
actually guaranteed that Mi is a new

774
00:36:46,500 --> 00:36:48,000
block which means that we can actually

775
00:36:48,000 --> 00:36:50,520
use plain ECB normally

776
00:36:50,520 --> 00:36:53,160
but we also uh so we do not only do that

777
00:36:53,160 --> 00:36:56,400
we also set the counter to zero so we

778
00:36:56,400 --> 00:36:57,839
initialize the counter for this

779
00:36:57,839 --> 00:37:00,480
particular hash value so note for the

780
00:37:00,480 --> 00:37:02,040
hash value not for the message so that's

781
00:37:02,040 --> 00:37:04,920
where we have problems for correctness

782
00:37:04,920 --> 00:37:07,680
and if instead we already saw this hash

783
00:37:07,680 --> 00:37:10,200
value so mi is probably a repeated block

784
00:37:10,200 --> 00:37:12,540
but we might also be wrong

785
00:37:12,540 --> 00:37:15,300
then we have to now signal destroy the

786
00:37:15,300 --> 00:37:17,760
receiver somehow and the idea how to do

787
00:37:17,760 --> 00:37:20,160
that is that we simply include we

788
00:37:20,160 --> 00:37:22,440
concatenate the hash value the current

789
00:37:22,440 --> 00:37:25,440
counter and we zero pad this enough uh

790
00:37:25,440 --> 00:37:27,599
to have a block

791
00:37:27,599 --> 00:37:30,300
and then we pair this with the key K2

792
00:37:30,300 --> 00:37:33,240
and we encode this value so now this

793
00:37:33,240 --> 00:37:35,940
will be the current block for the

794
00:37:35,940 --> 00:37:37,560
ciphertext

795
00:37:37,560 --> 00:37:40,200
and after that we increase the counter

796
00:37:40,200 --> 00:37:41,760
in the lookup table

797
00:37:41,760 --> 00:37:44,040
so this is how encryption works

798
00:37:44,040 --> 00:37:47,700
so for decryption now uh the issue is we

799
00:37:47,700 --> 00:37:49,859
have to find out whether some particular

800
00:37:49,859 --> 00:37:52,619
block of the ciphertext is actually a

801
00:37:52,619 --> 00:37:54,900
normal block or it's just a repetition

802
00:37:54,900 --> 00:37:56,220
signal

803
00:37:56,220 --> 00:37:58,980
and for this so let's consider again as

804
00:37:58,980 --> 00:38:02,220
before Sigma Tau K1 K2 and H

805
00:38:02,220 --> 00:38:03,720
but for the state we have something

806
00:38:03,720 --> 00:38:05,460
different now we have a lookout table

807
00:38:05,460 --> 00:38:07,920
from Tau beats to n Bits which will

808
00:38:07,920 --> 00:38:10,560
approximate kind of the inverse of H of

809
00:38:10,560 --> 00:38:13,020
the compression function

810
00:38:13,020 --> 00:38:15,599
and what we do for each block now it's

811
00:38:15,599 --> 00:38:18,420
first of all we simply apply ECB so we

812
00:38:18,420 --> 00:38:20,520
just decode the block

813
00:38:20,520 --> 00:38:22,440
now what we have to do is to find out

814
00:38:22,440 --> 00:38:23,540
whether

815
00:38:23,540 --> 00:38:27,839
this block Mi has the form of a

816
00:38:27,839 --> 00:38:29,640
repetition signal so for that we need to

817
00:38:29,640 --> 00:38:32,040
see first of all are there like the

818
00:38:32,040 --> 00:38:34,619
correct amount of leading zero bits and

819
00:38:34,619 --> 00:38:37,260
second of all do the last Tau bits

820
00:38:37,260 --> 00:38:39,780
correspond to a hash value that we have

821
00:38:39,780 --> 00:38:41,220
seen before

822
00:38:41,220 --> 00:38:44,099
so if this is not the case then we are

823
00:38:44,099 --> 00:38:45,599
sure that this is not a repetition

824
00:38:45,599 --> 00:38:47,280
signal this was really something that

825
00:38:47,280 --> 00:38:50,760
the sender meant to transmit to us so we

826
00:38:50,760 --> 00:38:54,240
keep this mi from plane ECB but we also

827
00:38:54,240 --> 00:38:56,940
keep track of the message the block

828
00:38:56,940 --> 00:38:59,520
message Mi corresponding to this hash

829
00:38:59,520 --> 00:39:00,780
value

830
00:39:00,780 --> 00:39:03,900
so if this is the case then CI is

831
00:39:03,900 --> 00:39:05,579
probably a repetition signal but again

832
00:39:05,579 --> 00:39:07,200
we might be wrong

833
00:39:07,200 --> 00:39:10,400
so in this case we retrieve the current

834
00:39:10,400 --> 00:39:13,500
mi from the table rather than from the

835
00:39:13,500 --> 00:39:16,400
ciphertext itself

836
00:39:17,099 --> 00:39:19,380
um yeah so in the paper we showed that

837
00:39:19,380 --> 00:39:21,000
indeed the two definitions from before

838
00:39:21,000 --> 00:39:24,060
are satisfied by this uh scheme so we

839
00:39:24,060 --> 00:39:28,500
show security by uh proving that if the

840
00:39:28,500 --> 00:39:31,980
block Cipher is a PRP secure uh

841
00:39:31,980 --> 00:39:34,079
um block Cipher then we have the

842
00:39:34,079 --> 00:39:35,940
following bound where this term comes

843
00:39:35,940 --> 00:39:38,700
from kind of the things that could go

844
00:39:38,700 --> 00:39:40,680
wrong that I showed you before

845
00:39:40,680 --> 00:39:42,780
and the same for correctness if you

846
00:39:42,780 --> 00:39:45,359
assume that H is a collision resistant

847
00:39:45,359 --> 00:39:47,460
compression function then we have the

848
00:39:47,460 --> 00:39:48,780
following bound where again the

849
00:39:48,780 --> 00:39:51,720
additional terms come from uh the bad

850
00:39:51,720 --> 00:39:53,460
events that we might have upon

851
00:39:53,460 --> 00:39:56,220
encryption and encryption

852
00:39:56,220 --> 00:39:59,119
and yes so let's go to the conclusions

853
00:39:59,119 --> 00:40:01,680
so in this paper we introduced the first

854
00:40:01,680 --> 00:40:04,800
ncpa length preserving encryption scheme

855
00:40:04,800 --> 00:40:07,859
and we also use the Cyber text stealing

856
00:40:07,859 --> 00:40:09,119
technique that I mentioned in the

857
00:40:09,119 --> 00:40:10,859
beginning to extend the scheme to

858
00:40:10,859 --> 00:40:15,619
actually handle arbitrary size messages

859
00:40:15,619 --> 00:40:18,359
we also consider a variant that is

860
00:40:18,359 --> 00:40:20,820
secure and correct even if cyber texts

861
00:40:20,820 --> 00:40:22,980
are reordered when there are transmitted

862
00:40:22,980 --> 00:40:25,560
from the sender to the receiver

863
00:40:25,560 --> 00:40:27,780
and we identify also some possible

864
00:40:27,780 --> 00:40:30,260
improvements for future work for example

865
00:40:30,260 --> 00:40:33,240
there is a term in correctness that it's

866
00:40:33,240 --> 00:40:37,260
kind of not really ideal but we believe

867
00:40:37,260 --> 00:40:40,020
that this can be easily removed if in

868
00:40:40,020 --> 00:40:42,180
the description we actually consider

869
00:40:42,180 --> 00:40:43,440
also the counters because if you

870
00:40:43,440 --> 00:40:45,119
remember from before in the cryption we

871
00:40:45,119 --> 00:40:48,060
actually ignore the counters completely

872
00:40:48,060 --> 00:40:51,060
uh it's it will be also interesting to

873
00:40:51,060 --> 00:40:55,260
uh analyze whether the state uh growth

874
00:40:55,260 --> 00:40:58,260
can be uh made better because for every

875
00:40:58,260 --> 00:40:59,940
encryption and every decryption the

876
00:40:59,940 --> 00:41:01,619
state keeps growing so it will be

877
00:41:01,619 --> 00:41:03,540
interesting to see

878
00:41:03,540 --> 00:41:04,619
um

879
00:41:04,619 --> 00:41:08,339
to how can we minimize such a growth and

880
00:41:08,339 --> 00:41:09,359
finally of course it would be

881
00:41:09,359 --> 00:41:10,920
interesting to see whether there are

882
00:41:10,920 --> 00:41:12,720
other ways to achieve better security

883
00:41:12,720 --> 00:41:15,000
and correctness balance in this setting

884
00:41:15,000 --> 00:41:17,280
so this is all from my side I thank you

885
00:41:17,280 --> 00:41:19,020
for your attention and I'm happy to take

886
00:41:19,020 --> 00:41:21,480
any questions

887
00:41:21,480 --> 00:41:24,060
okay thank you would be some quick

888
00:41:24,060 --> 00:41:25,260
questions

889
00:41:25,260 --> 00:41:29,160
so any question from Kobe

890
00:41:29,160 --> 00:41:32,339
there are two questions wait

891
00:41:32,339 --> 00:41:34,940
okay

892
00:41:37,500 --> 00:41:39,839
okay thanks for your presentation I

893
00:41:39,839 --> 00:41:42,300
think it's actually quite a creative uh

894
00:41:42,300 --> 00:41:44,339
problem about problem solution to a

895
00:41:44,339 --> 00:41:45,780
problem

896
00:41:45,780 --> 00:41:47,820
um I was indeed wondering you need to

897
00:41:47,820 --> 00:41:50,280
get the ciphertext in order otherwise

898
00:41:50,280 --> 00:41:51,960
you you screw up with a stable lookup

899
00:41:51,960 --> 00:41:53,579
and now you say you also have a solution

900
00:41:53,579 --> 00:41:55,020
that um

901
00:41:55,020 --> 00:41:57,900
can deal ciphertext has come in out of

902
00:41:57,900 --> 00:42:00,420
order this is given extra loss or or in

903
00:42:00,420 --> 00:42:01,980
the security bound or in the correctness

904
00:42:01,980 --> 00:42:03,960
or what's the consequence of this uh

905
00:42:03,960 --> 00:42:05,339
yeah thank you for the question so

906
00:42:05,339 --> 00:42:09,000
security stays uh the same and one only

907
00:42:09,000 --> 00:42:12,240
needs to realize the correctness of the

908
00:42:12,240 --> 00:42:14,820
scheme in case of reordering so for that

909
00:42:14,820 --> 00:42:17,280
I also uh one also needs to introduce a

910
00:42:17,280 --> 00:42:18,660
different notion of correctness than the

911
00:42:18,660 --> 00:42:21,720
one I have shown before I do that in a

912
00:42:21,720 --> 00:42:25,079
paper and then I also prove that the

913
00:42:25,079 --> 00:42:27,420
bound stays essentially the same

914
00:42:27,420 --> 00:42:31,640
yeah okay thank you

915
00:42:34,400 --> 00:42:37,200
thank you for yeah nice talk and yeah

916
00:42:37,200 --> 00:42:40,320
it's quite inspiring I think and

917
00:42:40,320 --> 00:42:43,140
so you are in your scheme that or you've

918
00:42:43,140 --> 00:42:44,579
taken a hash value for each message

919
00:42:44,579 --> 00:42:48,540
right yes and uh yeah of course it's

920
00:42:48,540 --> 00:42:51,900
it's a key idea Butana in case of the

921
00:42:51,900 --> 00:42:56,400
implementation maybe uh so there's a

922
00:42:56,400 --> 00:42:59,940
complete you can compare it with your

923
00:42:59,940 --> 00:43:01,800
skin with an assay

924
00:43:01,800 --> 00:43:05,700
building a wide block Cipher that only

925
00:43:05,700 --> 00:43:09,000
have a CPA security I mean that this can

926
00:43:09,000 --> 00:43:13,380
be basically possible while with faster

927
00:43:13,380 --> 00:43:16,380
taking a series of the whole message

928
00:43:16,380 --> 00:43:19,500
hashing into a one rock and

929
00:43:19,500 --> 00:43:22,079
making some ECB or counter-like

930
00:43:22,079 --> 00:43:24,060
encryption to the list of the whole

931
00:43:24,060 --> 00:43:26,099
messages

932
00:43:26,099 --> 00:43:29,339
so yeah of course this requires that

933
00:43:29,339 --> 00:43:31,619
this means that the entire scheme is

934
00:43:31,619 --> 00:43:33,300
offline so I mean that in the first

935
00:43:33,300 --> 00:43:36,119
ciphertext block is already received

936
00:43:36,119 --> 00:43:39,540
from the after receiving their

937
00:43:39,540 --> 00:43:42,900
uh after the last print text block has

938
00:43:42,900 --> 00:43:44,940
been determined so it's it's not

939
00:43:44,940 --> 00:43:48,660
comparatory I'm not offensive so your

940
00:43:48,660 --> 00:43:51,000
scheme is all right but if we we allowed

941
00:43:51,000 --> 00:43:55,440
to do uh offline encryption scheme there

942
00:43:55,440 --> 00:43:57,900
might be a

943
00:43:57,900 --> 00:44:01,400
solution without

944
00:44:01,400 --> 00:44:06,060
needing a decryption error so that's a

945
00:44:06,060 --> 00:44:08,220
that's a baseline scheme so I I mean

946
00:44:08,220 --> 00:44:10,619
yeah okay so I'm not sure I understood

947
00:44:10,619 --> 00:44:12,660
exactly uh your idea so

948
00:44:12,660 --> 00:44:14,599
uh maybe we call talk about this offline

949
00:44:14,599 --> 00:44:16,980
really the strict thing is that I want

950
00:44:16,980 --> 00:44:19,319
zero expansion right so anything that

951
00:44:19,319 --> 00:44:22,319
you do seems to either require to be

952
00:44:22,319 --> 00:44:24,119
stateful and also have some

953
00:44:24,119 --> 00:44:27,599
incorrectness or I really I cannot see

954
00:44:27,599 --> 00:44:29,880
how you can have something that is in

955
00:44:29,880 --> 00:44:32,700
CPA security and land preservation and

956
00:44:32,700 --> 00:44:36,078
is also perfectly correct

957
00:44:36,720 --> 00:44:39,500
yes

958
00:44:40,500 --> 00:44:43,680
yes but then it can't be in CPA right

959
00:44:43,680 --> 00:44:45,480
sure sure

960
00:44:45,480 --> 00:44:48,420
yes yes yes that's what I mean and I

961
00:44:48,420 --> 00:44:49,920
thank you and the one might small

962
00:44:49,920 --> 00:44:52,440
comment is uh you are using the two keys

963
00:44:52,440 --> 00:44:55,380
right yeah and I think it's a it can be

964
00:44:55,380 --> 00:44:58,500
reduced to one but just using some kind

965
00:44:58,500 --> 00:45:00,119
of technique previous technique for

966
00:45:00,119 --> 00:45:02,640
building a teacup rock cycle built on

967
00:45:02,640 --> 00:45:05,220
the Rock cyber maybe there are some

968
00:45:05,220 --> 00:45:07,260
additional security laws or correctness

969
00:45:07,260 --> 00:45:09,660
loss but yeah it's I think it should be

970
00:45:09,660 --> 00:45:11,339
possible yeah I think you can definitely

971
00:45:11,339 --> 00:45:13,200
just use a prf or something to expand

972
00:45:13,200 --> 00:45:16,140
the key initially and yeah yes yes it

973
00:45:16,140 --> 00:45:18,599
was just for uh easier presentation that

974
00:45:18,599 --> 00:45:19,859
I showed two different keys but you're

975
00:45:19,859 --> 00:45:23,240
right yes thank you very much

976
00:45:24,480 --> 00:45:27,180
thank you so any question from Kobe

977
00:45:27,180 --> 00:45:29,339
additional location

978
00:45:29,339 --> 00:45:33,780
I think no oh sorry

979
00:45:33,780 --> 00:45:36,000
can you spin a second and uh discuss

980
00:45:36,000 --> 00:45:38,220
what's the change in your hashing table

981
00:45:38,220 --> 00:45:41,160
size for in CTS mode

982
00:45:41,160 --> 00:45:43,200
if you didn't encounter mode

983
00:45:43,200 --> 00:45:44,880
uh sorry can you repeat the question uh

984
00:45:44,880 --> 00:45:46,800
how would uh putting this in counter

985
00:45:46,800 --> 00:45:50,240
mode affect your hashing tables

986
00:45:50,240 --> 00:45:53,220
how would it affect your hashing could

987
00:45:53,220 --> 00:45:54,660
you

988
00:45:54,660 --> 00:45:57,960
you mean the CTS yes

989
00:45:57,960 --> 00:46:00,359
I was having trouble visualizing that

990
00:46:00,359 --> 00:46:03,359
so you're asking how I can uh apply CTS

991
00:46:03,359 --> 00:46:06,119
to my scheme yes

992
00:46:06,119 --> 00:46:07,079
um

993
00:46:07,079 --> 00:46:09,300
so

994
00:46:09,300 --> 00:46:12,240
so I the way I did it is I just defined

995
00:46:12,240 --> 00:46:14,099
uh kind of

996
00:46:14,099 --> 00:46:16,740
uh the block function of my encryption

997
00:46:16,740 --> 00:46:18,960
scheme so I have an encryption scheme

998
00:46:18,960 --> 00:46:22,920
and I kind of separate like I I look at

999
00:46:22,920 --> 00:46:24,420
the code that just handles each block

1000
00:46:24,420 --> 00:46:25,740
individually

1001
00:46:25,740 --> 00:46:29,579
and I take this now as kind of a block

1002
00:46:29,579 --> 00:46:33,240
Cipher and I apply CTS to this but uh

1003
00:46:33,240 --> 00:46:36,359
I'm not sure I can recall it exactly the

1004
00:46:36,359 --> 00:46:40,440
details I'm sorry thank you yeah

1005
00:46:40,440 --> 00:46:45,260
thank you so any questions from Beijing

1006
00:46:47,160 --> 00:46:50,839
or maybe from nine

1007
00:46:52,859 --> 00:46:56,940
do you have questions from Kobe

1008
00:46:56,940 --> 00:46:58,920
no more questions

1009
00:46:58,920 --> 00:47:02,280
okay let's thanks the speakers again so

1010
00:47:02,280 --> 00:47:04,619
we will have short break then we will

1011
00:47:04,619 --> 00:47:06,420
move to the next section

1012
00:47:06,420 --> 00:47:09,319
so thank you

