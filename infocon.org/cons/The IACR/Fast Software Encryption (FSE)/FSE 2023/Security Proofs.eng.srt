1
00:00:01,260 --> 00:00:03,359
yes

2
00:00:03,360 --> 00:00:05,419
yes

3
00:00:16,880 --> 00:00:19,380
uh hello everyone

4
00:00:19,380 --> 00:00:22,619
um welcome to this afternoon session

5
00:00:22,619 --> 00:00:24,180
about

6
00:00:24,180 --> 00:00:26,100
security proofs

7
00:00:26,100 --> 00:00:29,760
uh my name is here in this session

8
00:00:29,760 --> 00:00:33,180
and we have three talks uh in this

9
00:00:33,180 --> 00:00:34,200
session

10
00:00:34,200 --> 00:00:36,780
the first talk is about on the quantum

11
00:00:36,780 --> 00:00:38,760
security of OCB

12
00:00:38,760 --> 00:00:41,280
the work is by

13
00:00:41,280 --> 00:00:43,920
balloon madame

14
00:00:43,920 --> 00:00:46,640
Daniel

15
00:00:52,920 --> 00:00:55,760
uh

16
00:00:57,320 --> 00:01:02,579
and the talk will be given by balloon

17
00:01:03,239 --> 00:01:05,880
thank you for the introduction

18
00:01:05,880 --> 00:01:08,400
um hi everyone I'm Varun and I'll be

19
00:01:08,400 --> 00:01:09,900
talking about the quantum security of

20
00:01:09,900 --> 00:01:12,840
OCB I know that this session is on

21
00:01:12,840 --> 00:01:15,180
security proofs but uh my talk will

22
00:01:15,180 --> 00:01:17,159
mostly consist of attacks and maybe

23
00:01:17,159 --> 00:01:19,799
let's see how far we get so that we can

24
00:01:19,799 --> 00:01:23,100
discuss a bit about the proof as well

25
00:01:23,100 --> 00:01:26,880
um so yeah um by now we all know the uh

26
00:01:26,880 --> 00:01:28,680
the devastating effects quantum

27
00:01:28,680 --> 00:01:31,320
computers will have on uh public equipo

28
00:01:31,320 --> 00:01:34,320
systems uh this is why nist started the

29
00:01:34,320 --> 00:01:35,939
process of selecting new cryptographic

30
00:01:35,939 --> 00:01:37,920
standards uh that can withstand attacks

31
00:01:37,920 --> 00:01:41,040
from such quantum computers uh however

32
00:01:41,040 --> 00:01:41,820
um

33
00:01:41,820 --> 00:01:43,680
the uh the standards fall under the

34
00:01:43,680 --> 00:01:46,560
category of asymmetric cryptography uh

35
00:01:46,560 --> 00:01:48,240
mainly publicly encryption schemes and

36
00:01:48,240 --> 00:01:51,240
digital signatures so one might ask you

37
00:01:51,240 --> 00:01:53,040
know what about symmetrical cryptography

38
00:01:53,040 --> 00:01:54,720
so why are there no such similar

39
00:01:54,720 --> 00:01:57,420
standardization efforts in this category

40
00:01:57,420 --> 00:02:00,720
so um a likely reason for this is that

41
00:02:00,720 --> 00:02:02,399
the cryptographic community for a long

42
00:02:02,399 --> 00:02:05,040
time believed that the best one could do

43
00:02:05,040 --> 00:02:06,840
to attack a symmetrical crypto system in

44
00:02:06,840 --> 00:02:08,639
the quantum setting is to use something

45
00:02:08,639 --> 00:02:12,000
known as Grover's algorithm now Grover's

46
00:02:12,000 --> 00:02:13,640
Quantum algorithm on a very high level

47
00:02:13,640 --> 00:02:16,680
allows you to recover an n-bit secret

48
00:02:16,680 --> 00:02:19,739
key from a space of all possible 2 to

49
00:02:19,739 --> 00:02:22,319
the N Keys uh in time roughly of the

50
00:02:22,319 --> 00:02:25,020
order 2 to the power n over 2.

51
00:02:25,020 --> 00:02:28,200
so mainly we only get a quadratic speed

52
00:02:28,200 --> 00:02:30,599
up uh compared to a classical good for

53
00:02:30,599 --> 00:02:33,300
search but we don't get quite the

54
00:02:33,300 --> 00:02:35,040
exponential speed up that we get if we

55
00:02:35,040 --> 00:02:37,319
are using Shores algorithm so that's why

56
00:02:37,319 --> 00:02:39,060
the community thought that to keep

57
00:02:39,060 --> 00:02:41,099
symmetrical crypto systems secure in the

58
00:02:41,099 --> 00:02:42,900
quantum setting you just need to double

59
00:02:42,900 --> 00:02:44,760
the key length from n which to two n

60
00:02:44,760 --> 00:02:45,920
Bits

61
00:02:45,920 --> 00:02:48,720
but that Viewpoint has somehow changed

62
00:02:48,720 --> 00:02:52,920
in 2010 when uh in when cuocado and Mori

63
00:02:52,920 --> 00:02:54,599
um they came up with a polynomial time

64
00:02:54,599 --> 00:02:57,120
distinguishing attack against a standard

65
00:02:57,120 --> 00:02:59,400
fiscal Cipher wherein the distinguisher

66
00:02:59,400 --> 00:03:01,920
could somehow query the cipher on a

67
00:03:01,920 --> 00:03:04,739
Quantum superposition of inputs

68
00:03:04,739 --> 00:03:07,260
uh and final Cipher is actually a

69
00:03:07,260 --> 00:03:08,879
classically secure Cipher but now we

70
00:03:08,879 --> 00:03:12,500
have a polynomial time Quantum attack

71
00:03:14,519 --> 00:03:16,440
uh is it

72
00:03:16,440 --> 00:03:19,579
okay sorry

73
00:03:19,800 --> 00:03:21,599
okay

74
00:03:21,599 --> 00:03:25,019
good pun so uh this quickly led to a

75
00:03:25,019 --> 00:03:27,000
number of follow-up papers with each

76
00:03:27,000 --> 00:03:28,980
paper uh coming up with efficient

77
00:03:28,980 --> 00:03:31,019
Quantum attacks against different uh

78
00:03:31,019 --> 00:03:33,599
symmetric crypto systems and a common

79
00:03:33,599 --> 00:03:35,640
theme of all such attacks is that they

80
00:03:35,640 --> 00:03:38,340
use so-called Simon's algorithm which is

81
00:03:38,340 --> 00:03:40,260
another popular Quantum algorithm like

82
00:03:40,260 --> 00:03:42,239
Shores and Growers

83
00:03:42,239 --> 00:03:44,580
now Simon's algorithm essentially allows

84
00:03:44,580 --> 00:03:47,099
us to solve the following problem so we

85
00:03:47,099 --> 00:03:48,659
are given Black Box access to a function

86
00:03:48,659 --> 00:03:50,879
f with n bit inputs and in-bit outputs

87
00:03:50,879 --> 00:03:53,580
and it is a periodic function where the

88
00:03:53,580 --> 00:03:55,680
period is secret and the problem we

89
00:03:55,680 --> 00:03:57,659
should just recovered the period

90
00:03:57,659 --> 00:03:59,940
now if you're allowed to make Quantum

91
00:03:59,940 --> 00:04:02,280
queries to the function f then Simon's

92
00:04:02,280 --> 00:04:03,599
algorithm allows us to recover this

93
00:04:03,599 --> 00:04:06,720
period in only uh off and queries to the

94
00:04:06,720 --> 00:04:08,819
function in contact if you only had

95
00:04:08,819 --> 00:04:10,439
classical access then this problem

96
00:04:10,439 --> 00:04:13,319
probably takes uh 2 to the N by 2 number

97
00:04:13,319 --> 00:04:14,939
of queries so again this is another

98
00:04:14,939 --> 00:04:16,440
example where we have an exponential

99
00:04:16,440 --> 00:04:19,380
speed up over a classical solution

100
00:04:19,380 --> 00:04:21,540
and on a very high level the way Simon's

101
00:04:21,540 --> 00:04:23,400
algorithm works is that each time you

102
00:04:23,400 --> 00:04:24,840
make a Quantum query to the function f

103
00:04:24,840 --> 00:04:27,840
you get back an N bit Vector as an

104
00:04:27,840 --> 00:04:30,060
output and this Vector is perpendicular

105
00:04:30,060 --> 00:04:32,639
to the period each time so you have a

106
00:04:32,639 --> 00:04:34,620
fixed period s and you recover of n

107
00:04:34,620 --> 00:04:36,900
vectors perpendicular to it then you

108
00:04:36,900 --> 00:04:38,400
solve a linear system of equations and

109
00:04:38,400 --> 00:04:40,680
you recover your period

110
00:04:40,680 --> 00:04:43,320
and the starting point of work was this

111
00:04:43,320 --> 00:04:46,080
uh paper by cup planetary in 2016 which

112
00:04:46,080 --> 00:04:48,360
showed that using Simon's algorithm you

113
00:04:48,360 --> 00:04:50,400
can break the Integrity of various uh

114
00:04:50,400 --> 00:04:52,320
standard blocks of modes of operation in

115
00:04:52,320 --> 00:04:54,600
the quantum setting which includes the

116
00:04:54,600 --> 00:04:56,160
authenticated encryption scheme OCB

117
00:04:56,160 --> 00:04:58,979
which will be the main focus of my talk

118
00:04:58,979 --> 00:05:01,020
now OCB is a popular block set for mode

119
00:05:01,020 --> 00:05:02,820
of authenticated encryption which is

120
00:05:02,820 --> 00:05:05,040
quite well known for its efficiency so

121
00:05:05,040 --> 00:05:06,720
to process to encrypt a message of L

122
00:05:06,720 --> 00:05:09,180
blocks OCB only requires L calls to the

123
00:05:09,180 --> 00:05:11,580
underlying block Cipher

124
00:05:11,580 --> 00:05:15,180
uh so OCB consists of three versions so

125
00:05:15,180 --> 00:05:17,759
ocb1 which is listed as an I triple

126
00:05:17,759 --> 00:05:19,020
standard for protecting data with

127
00:05:19,020 --> 00:05:22,199
wireless networks uh ocb2 which was an

128
00:05:22,199 --> 00:05:24,600
ISO standard for thinking encryption it

129
00:05:24,600 --> 00:05:26,699
is no longer a standard because uh we

130
00:05:26,699 --> 00:05:28,380
probably know uh some of us probably

131
00:05:28,380 --> 00:05:31,199
know that it was shown to be broken in a

132
00:05:31,199 --> 00:05:33,660
classical setting in 2019

133
00:05:33,660 --> 00:05:36,240
and ocb3 which is an IIT of Internet

134
00:05:36,240 --> 00:05:37,919
standard

135
00:05:37,919 --> 00:05:39,660
so now let's dive a bit into the

136
00:05:39,660 --> 00:05:41,100
technical specification of the OCB

137
00:05:41,100 --> 00:05:42,960
versions so they follow a similar

138
00:05:42,960 --> 00:05:44,400
structure when it comes to encrypting a

139
00:05:44,400 --> 00:05:47,340
message so say uh given a message you

140
00:05:47,340 --> 00:05:49,320
first partition it into a number of

141
00:05:49,320 --> 00:05:51,720
blocks and then all the three OCB

142
00:05:51,720 --> 00:05:53,639
versions they compute a certain value

143
00:05:53,639 --> 00:05:56,100
known as the initial offset uh denoted

144
00:05:56,100 --> 00:05:58,259
as Delta Z on this slide so this Delta 0

145
00:05:58,259 --> 00:06:01,320
depends on the nons and one thing that's

146
00:06:01,320 --> 00:06:03,360
worth noting here is that this value is

147
00:06:03,360 --> 00:06:05,580
supposed to be a secret

148
00:06:05,580 --> 00:06:07,860
um and we crucially exploit this in our

149
00:06:07,860 --> 00:06:10,320
Quantum attacks because uh spoiler alert

150
00:06:10,320 --> 00:06:12,539
in a Quantum setting this Delta 0 will

151
00:06:12,539 --> 00:06:15,060
no longer be a secret

152
00:06:15,060 --> 00:06:17,160
and then using this initial offset we

153
00:06:17,160 --> 00:06:19,500
calculate a bunch of offsets where the

154
00:06:19,500 --> 00:06:21,780
ith offset is used it's used to encrypt

155
00:06:21,780 --> 00:06:24,720
the ith message block as shown here

156
00:06:24,720 --> 00:06:27,000
and then finally the individual message

157
00:06:27,000 --> 00:06:29,220
blocks are added up to computer checksum

158
00:06:29,220 --> 00:06:31,020
and this checks them and the associated

159
00:06:31,020 --> 00:06:32,639
data is processed to form the

160
00:06:32,639 --> 00:06:35,460
authentication tag

161
00:06:35,460 --> 00:06:38,520
now uh let's first see how kaplanetal

162
00:06:38,520 --> 00:06:40,380
broke the Integrity of the OCB versions

163
00:06:40,380 --> 00:06:43,620
in a Quantum setting so uh so one thing

164
00:06:43,620 --> 00:06:47,220
noting here is that like in QR code like

165
00:06:47,220 --> 00:06:48,960
in previous work we assume that the

166
00:06:48,960 --> 00:06:51,000
adversary has Quantum access to the OCB

167
00:06:51,000 --> 00:06:53,100
encryption Oracle now of course

168
00:06:53,100 --> 00:06:54,419
discussing the validity of this

169
00:06:54,419 --> 00:06:55,919
assumption we considered beyond the

170
00:06:55,919 --> 00:06:57,419
scope of this work

171
00:06:57,419 --> 00:06:59,400
so the key idea of use here is that

172
00:06:59,400 --> 00:07:00,780
given Quantum access to such an

173
00:07:00,780 --> 00:07:03,319
encryption Oracle we Define a function f

174
00:07:03,319 --> 00:07:06,120
which takes nbit inputs and bit outputs

175
00:07:06,120 --> 00:07:08,160
on top of which you will apply Simon's

176
00:07:08,160 --> 00:07:10,319
algorithm later on and the key idea is

177
00:07:10,319 --> 00:07:12,300
that we should Define our function f so

178
00:07:12,300 --> 00:07:14,460
that if you recover the period of f with

179
00:07:14,460 --> 00:07:15,840
this should allow us to attack the

180
00:07:15,840 --> 00:07:17,639
Integrity of course CB

181
00:07:17,639 --> 00:07:20,039
so here the function that we Define that

182
00:07:20,039 --> 00:07:22,139
kaplanet will Define is that on input

183
00:07:22,139 --> 00:07:24,360
and n-bit message block you first run

184
00:07:24,360 --> 00:07:26,160
the OCB encryption on a two block

185
00:07:26,160 --> 00:07:30,000
message uh mnm and then you get back a

186
00:07:30,000 --> 00:07:31,860
two block Cipher text so F of M is

187
00:07:31,860 --> 00:07:34,440
defined as C1 or C2

188
00:07:34,440 --> 00:07:36,599
and it's not hard to see that that is a

189
00:07:36,599 --> 00:07:38,160
closed form expression you get for the

190
00:07:38,160 --> 00:07:39,300
function f

191
00:07:39,300 --> 00:07:41,460
now if you look at it close if you look

192
00:07:41,460 --> 00:07:43,440
at the EK terms then it's not hard to

193
00:07:43,440 --> 00:07:45,660
see that the function is periodic with

194
00:07:45,660 --> 00:07:47,639
period being uh the first offset

195
00:07:47,639 --> 00:07:50,699
absorbed with the second offset

196
00:07:50,699 --> 00:07:52,860
and one crucial thing to note here is

197
00:07:52,860 --> 00:07:55,919
that in ocb1 and ocb3 this xor is sort

198
00:07:55,919 --> 00:07:57,720
of independent of the Norms even though

199
00:07:57,720 --> 00:07:59,099
the individual offsets depend on the

200
00:07:59,099 --> 00:08:02,039
nodes so uh specifically in ocb1 and

201
00:08:02,039 --> 00:08:04,440
ocb3 this period will be a fixed

202
00:08:04,440 --> 00:08:07,500
multiple of a value e k of 0.

203
00:08:07,500 --> 00:08:09,900
and this is quite important because this

204
00:08:09,900 --> 00:08:11,759
allows us to use Simon's algorithm to

205
00:08:11,759 --> 00:08:13,740
recover this period F because if you

206
00:08:13,740 --> 00:08:16,020
remember in Simon's algorithm you make

207
00:08:16,020 --> 00:08:18,060
multiple queries to the function f so

208
00:08:18,060 --> 00:08:19,139
indirectly you're making multiple

209
00:08:19,139 --> 00:08:20,400
queries to the OCB encryption

210
00:08:20,400 --> 00:08:22,259
functionality but each time you make a

211
00:08:22,259 --> 00:08:24,419
query to the OCB function the nonce is

212
00:08:24,419 --> 00:08:26,340
changing so the function f is itself

213
00:08:26,340 --> 00:08:28,139
changing but this won't be a problem

214
00:08:28,139 --> 00:08:30,419
because the period is fixed so across

215
00:08:30,419 --> 00:08:32,820
all invocations of Simon's algorithm so

216
00:08:32,820 --> 00:08:34,380
each step you get a perpendicular Vector

217
00:08:34,380 --> 00:08:36,419
perpendicular to this fixed period which

218
00:08:36,419 --> 00:08:39,179
allows you to just use linear algebra to

219
00:08:39,179 --> 00:08:41,700
recover the period

220
00:08:41,700 --> 00:08:43,500
and then it's not hard to see that once

221
00:08:43,500 --> 00:08:45,300
you obtain this period This should allow

222
00:08:45,300 --> 00:08:47,459
us to launch some existential forgeries

223
00:08:47,459 --> 00:08:49,440
against the OCB versions as shown on

224
00:08:49,440 --> 00:08:51,120
this slide so the details are not quite

225
00:08:51,120 --> 00:08:52,140
important for the purpose of this

226
00:08:52,140 --> 00:08:53,820
presentation but what's important to

227
00:08:53,820 --> 00:08:55,500
note here is that Simon's algorithm

228
00:08:55,500 --> 00:08:57,600
allows us to recover this period uh

229
00:08:57,600 --> 00:08:59,459
which is a multiple of EK 0. so

230
00:08:59,459 --> 00:09:00,779
effectively we also recovered the value

231
00:09:00,779 --> 00:09:03,000
EQ of 0.

232
00:09:03,000 --> 00:09:04,860
so this brings us to my to our first

233
00:09:04,860 --> 00:09:07,560
contribution when we observe that the

234
00:09:07,560 --> 00:09:09,660
prior Integrity attacks against OCB

235
00:09:09,660 --> 00:09:11,459
versions can also be used to attack

236
00:09:11,459 --> 00:09:13,140
confidentiality in the quantum setting

237
00:09:13,140 --> 00:09:16,260
as well so uh even in a week adversial

238
00:09:16,260 --> 00:09:18,540
setting where the nonsense are not uh in

239
00:09:18,540 --> 00:09:21,480
our control so on a very meta level our

240
00:09:21,480 --> 00:09:23,399
work is quite similar in spirit to the

241
00:09:23,399 --> 00:09:25,560
classical brick of 4cb2 because the way

242
00:09:25,560 --> 00:09:27,540
ocb2 was broken was first a team of

243
00:09:27,540 --> 00:09:28,920
researchers came up with some Integrity

244
00:09:28,920 --> 00:09:30,899
attacks against ocb2 and then

245
00:09:30,899 --> 00:09:32,820
subsequently another team found out that

246
00:09:32,820 --> 00:09:34,380
these attacks can be extended to break

247
00:09:34,380 --> 00:09:36,480
confidentiality as well so in some sense

248
00:09:36,480 --> 00:09:38,279
our work can be seen as a Quantum analog

249
00:09:38,279 --> 00:09:40,500
of their work

250
00:09:40,500 --> 00:09:42,839
uh so more technically we showed that

251
00:09:42,839 --> 00:09:45,899
ocb1 and ocb3 do not satisfy a certain

252
00:09:45,899 --> 00:09:47,399
notion of quantum security known as in

253
00:09:47,399 --> 00:09:50,339
qcpa so in qcpa can be seen as a Quantum

254
00:09:50,339 --> 00:09:52,920
analog of the standard in CP notion

255
00:09:52,920 --> 00:09:54,839
so in the security game the aggregation

256
00:09:54,839 --> 00:09:57,180
is allowed to make uh encryption of us

257
00:09:57,180 --> 00:09:58,440
for encryption of quantum messages

258
00:09:58,440 --> 00:10:01,500
messages in superposition but one small

259
00:10:01,500 --> 00:10:02,940
thing to note here is that in the

260
00:10:02,940 --> 00:10:04,920
classical challenge phase you still have

261
00:10:04,920 --> 00:10:06,899
to submit two classical messages of the

262
00:10:06,899 --> 00:10:09,180
same length because otherwise if you're

263
00:10:09,180 --> 00:10:10,860
also allowed to make Quantum queries in

264
00:10:10,860 --> 00:10:12,360
the classical in the challenge phase

265
00:10:12,360 --> 00:10:14,339
then it turns out that no encryption

266
00:10:14,339 --> 00:10:15,720
scheme can satisfy this notion of

267
00:10:15,720 --> 00:10:17,640
security because of a phenomenon known

268
00:10:17,640 --> 00:10:20,120
as quantum entanglement

269
00:10:20,120 --> 00:10:23,160
uh so our attacks against oc1 and ocb3

270
00:10:23,160 --> 00:10:25,560
that they exploit the fact that in OCB

271
00:10:25,560 --> 00:10:27,480
the final block messages are somehow

272
00:10:27,480 --> 00:10:29,339
processed in a different fashion so

273
00:10:29,339 --> 00:10:31,140
we'll be seeing uh what I mean by that

274
00:10:31,140 --> 00:10:33,660
shortly when we discuss our in qcpa

275
00:10:33,660 --> 00:10:36,600
attack against ocb1 so here you can see

276
00:10:36,600 --> 00:10:37,680
that

277
00:10:37,680 --> 00:10:38,339
um

278
00:10:38,339 --> 00:10:40,500
uh the intermediate message blocks are

279
00:10:40,500 --> 00:10:42,660
processed like this whereas the final

280
00:10:42,660 --> 00:10:44,640
block message mm is processed in a

281
00:10:44,640 --> 00:10:47,779
one-time pad fashion

282
00:10:48,060 --> 00:10:50,760
uh so on a high level our attacks our

283
00:10:50,760 --> 00:10:52,740
attack proceeds in two phases so first

284
00:10:52,740 --> 00:10:54,060
in the quantum phase where we have

285
00:10:54,060 --> 00:10:55,440
Quantum access to the encryption

286
00:10:55,440 --> 00:10:57,720
functionality so again using Simon's

287
00:10:57,720 --> 00:10:59,100
algorithm as we have seen in the

288
00:10:59,100 --> 00:11:01,860
Integrity attack uh before we recover

289
00:11:01,860 --> 00:11:04,980
this value EQ of zero

290
00:11:04,980 --> 00:11:06,480
and then the rest of our attack is

291
00:11:06,480 --> 00:11:08,519
purely classical so first in the

292
00:11:08,519 --> 00:11:10,740
challenge phase we pick uh two single

293
00:11:10,740 --> 00:11:12,779
block messages of a very peculiar form

294
00:11:12,779 --> 00:11:16,200
so m0 star is defined as N X or L over 2

295
00:11:16,200 --> 00:11:19,260
where n is the block length we'll see uh

296
00:11:19,260 --> 00:11:21,600
shortly why we pick such messages and

297
00:11:21,600 --> 00:11:23,100
after receiving the child in Cipher text

298
00:11:23,100 --> 00:11:25,620
we guess that m0 star was encrypted by

299
00:11:25,620 --> 00:11:29,579
the Challenger if Z or M 0 star equals

300
00:11:29,579 --> 00:11:31,620
to the tag now the reason this attack

301
00:11:31,620 --> 00:11:34,500
works is because uh let's say m0 star

302
00:11:34,500 --> 00:11:36,600
was encrypted and let's run through the

303
00:11:36,600 --> 00:11:39,660
uh steps of the encryption algorithm so

304
00:11:39,660 --> 00:11:42,000
uh we can ignore these l m Loops because

305
00:11:42,000 --> 00:11:43,860
it's a single block message then it's

306
00:11:43,860 --> 00:11:45,240
not hard to see that the path that I've

307
00:11:45,240 --> 00:11:47,100
highlighted here and here they're

308
00:11:47,100 --> 00:11:49,980
essentially both equal to m0 Star in

309
00:11:49,980 --> 00:11:51,420
this case you can see that the length is

310
00:11:51,420 --> 00:11:53,700
nothing but n so naught L by 2 should

311
00:11:53,700 --> 00:11:55,680
remind you of M 0 star so this is

312
00:11:55,680 --> 00:11:57,899
nothing but M 0 star so the first offset

313
00:11:57,899 --> 00:12:01,200
so y m is EK of M 0 sharks or the end

314
00:12:01,200 --> 00:12:03,060
offset and similarly if you look at this

315
00:12:03,060 --> 00:12:04,980
part so because of this one time pad

316
00:12:04,980 --> 00:12:06,600
thing is going on so this is nothing but

317
00:12:06,600 --> 00:12:09,060
again M 0 star so e k is nothing but

318
00:12:09,060 --> 00:12:11,760
again m0 sharks or the first offset so

319
00:12:11,760 --> 00:12:14,399
to summarize if m0 share was encrypted

320
00:12:14,399 --> 00:12:17,519
then y m will be equal to the tag

321
00:12:17,519 --> 00:12:19,680
but since we don't have direct access to

322
00:12:19,680 --> 00:12:21,959
this ym because of Again One Time Pad

323
00:12:21,959 --> 00:12:24,240
encryption so ym is nothing but CMS or

324
00:12:24,240 --> 00:12:26,040
mm so you just need to check the

325
00:12:26,040 --> 00:12:28,860
equation that is the ciphertext or M

326
00:12:28,860 --> 00:12:31,500
gives me the tag or not

327
00:12:31,500 --> 00:12:33,360
and in this whole attack note that the

328
00:12:33,360 --> 00:12:34,740
adversary did not need to work with the

329
00:12:34,740 --> 00:12:37,680
nonsense at any step

330
00:12:37,680 --> 00:12:39,360
and this attack can be extended to break

331
00:12:39,360 --> 00:12:41,519
ocb3 in a similar fashion as well where

332
00:12:41,519 --> 00:12:42,899
instead of working with single block

333
00:12:42,899 --> 00:12:45,000
messages we need to work with two two

334
00:12:45,000 --> 00:12:46,620
block messages

335
00:12:46,620 --> 00:12:48,839
but I won't be going into the details

336
00:12:48,839 --> 00:12:50,940
now in the the interesting part comes

337
00:12:50,940 --> 00:12:53,579
when we analyze ocb2 so if we try to

338
00:12:53,579 --> 00:12:55,680
extend the previous attack to break ocb2

339
00:12:55,680 --> 00:12:57,660
it's not so straightforward to extend

340
00:12:57,660 --> 00:12:59,279
the attacks because in our previous

341
00:12:59,279 --> 00:13:01,800
attacks against core cv1 and ocb3 the

342
00:13:01,800 --> 00:13:03,300
assignments algorithm gives us this

343
00:13:03,300 --> 00:13:04,940
value e k of 0

344
00:13:04,940 --> 00:13:07,380
but however if you want to use Simon's

345
00:13:07,380 --> 00:13:09,360
algorithm in the same fashion in this

346
00:13:09,360 --> 00:13:11,220
case the period will be a multiple of

347
00:13:11,220 --> 00:13:13,440
this value L which is e key of the nonce

348
00:13:13,440 --> 00:13:15,540
so the value L is changing each time you

349
00:13:15,540 --> 00:13:17,040
try to run Simon's algorithm at each

350
00:13:17,040 --> 00:13:19,019
step so it's like the period itself is

351
00:13:19,019 --> 00:13:20,399
changing at each step so you don't get

352
00:13:20,399 --> 00:13:21,959
any meaningful output back from Simon's

353
00:13:21,959 --> 00:13:23,420
algorithm

354
00:13:23,420 --> 00:13:26,519
however if you focus on how ocb2

355
00:13:26,519 --> 00:13:28,560
processes the associated data then it

356
00:13:28,560 --> 00:13:30,959
gives us some hope of attacking uh the

357
00:13:30,959 --> 00:13:33,660
scheme in a Quantum fashion namely this

358
00:13:33,660 --> 00:13:34,800
time

359
00:13:34,800 --> 00:13:37,939
if you focus on

360
00:13:41,360 --> 00:13:44,279
uh if you focus on how the acid data is

361
00:13:44,279 --> 00:13:47,040
processed in ocb2 Nomad is announced

362
00:13:47,040 --> 00:13:49,139
used and not only that but even our

363
00:13:49,139 --> 00:13:50,940
friend EQ of 0 is somehow embedded in

364
00:13:50,940 --> 00:13:53,100
the subroutine

365
00:13:53,100 --> 00:13:54,360
so now we'll see how we use this

366
00:13:54,360 --> 00:13:56,700
observation to break uh in qcpa Circuit

367
00:13:56,700 --> 00:13:59,279
of ocb2 so again on a high level if you

368
00:13:59,279 --> 00:14:00,720
have Quantum access to the encryption

369
00:14:00,720 --> 00:14:02,399
functionality then we have indirect

370
00:14:02,399 --> 00:14:05,100
Quantum access to this uh PMX subroutine

371
00:14:05,100 --> 00:14:07,260
which should allow us to recover EQ of

372
00:14:07,260 --> 00:14:10,019
zero using Simon's algorithm

373
00:14:10,019 --> 00:14:12,420
but then how do we go go on from there

374
00:14:12,420 --> 00:14:15,120
because if you recall in the challenge

375
00:14:15,120 --> 00:14:17,760
phase for ocb1 we somehow pick messages

376
00:14:17,760 --> 00:14:20,339
which depended on this value L but in

377
00:14:20,339 --> 00:14:21,959
this case L is not a fixed value but

378
00:14:21,959 --> 00:14:23,940
it's always changing constantly so in

379
00:14:23,940 --> 00:14:25,680
the challenge phase even if we knew

380
00:14:25,680 --> 00:14:27,000
which nons will be used by the

381
00:14:27,000 --> 00:14:29,220
Challenger we a purely do not know what

382
00:14:29,220 --> 00:14:31,139
the value L is going to be about we only

383
00:14:31,139 --> 00:14:33,959
know L for e k of 0. so unless unless

384
00:14:33,959 --> 00:14:35,880
the nonce is equal to zero we don't have

385
00:14:35,880 --> 00:14:38,339
any hopes of going further than that

386
00:14:38,339 --> 00:14:40,199
so this brings us to the second key idea

387
00:14:40,199 --> 00:14:42,360
of use in our attack where we exported

388
00:14:42,360 --> 00:14:44,279
the fact that we still have Quantum

389
00:14:44,279 --> 00:14:45,839
access to the encryption Oracle even

390
00:14:45,839 --> 00:14:47,579
after the challenge phase

391
00:14:47,579 --> 00:14:50,519
so on a high level what we did was after

392
00:14:50,519 --> 00:14:52,680
the challenge phase we computed the

393
00:14:52,680 --> 00:14:56,220
value L uh L equals e k of nons which

394
00:14:56,220 --> 00:14:57,959
was used in the challenge phase using

395
00:14:57,959 --> 00:14:59,519
yet another quantum algorithm known as

396
00:14:59,519 --> 00:15:00,959
George's algorithm

397
00:15:00,959 --> 00:15:03,540
in fact we uh we show something stronger

398
00:15:03,540 --> 00:15:05,579
so we show that using this gorgeous

399
00:15:05,579 --> 00:15:08,519
algorithm we actually gain uh an ability

400
00:15:08,519 --> 00:15:10,860
known as raw blocks away for Access or

401
00:15:10,860 --> 00:15:12,959
in other words we gain the ability to

402
00:15:12,959 --> 00:15:15,060
evaluate the underlying block side for E

403
00:15:15,060 --> 00:15:17,820
K on arbitrary inputs of our choice as

404
00:15:17,820 --> 00:15:19,320
you so you can see that this actually

405
00:15:19,320 --> 00:15:21,199
gives us so not only can we break into

406
00:15:21,199 --> 00:15:24,120
security but we can do all kinds of

407
00:15:24,120 --> 00:15:25,199
things

408
00:15:25,199 --> 00:15:26,820
again I won't be going through the

409
00:15:26,820 --> 00:15:28,199
details but they can be found in our

410
00:15:28,199 --> 00:15:31,740
paper uh however just making this talk I

411
00:15:31,740 --> 00:15:33,360
guess I need to update our paper a bit

412
00:15:33,360 --> 00:15:36,420
because for this raw block say for

413
00:15:36,420 --> 00:15:37,500
Access we need to make an extra

414
00:15:37,500 --> 00:15:39,779
assumption the Assumption being that the

415
00:15:39,779 --> 00:15:43,800
tags output by ocb2 are not truncated

416
00:15:43,800 --> 00:15:45,839
because uh it was recently brought over

417
00:15:45,839 --> 00:15:48,120
attention that our in qcpa our original

418
00:15:48,120 --> 00:15:50,279
in qcp attack against ocb2 in the paper

419
00:15:50,279 --> 00:15:52,440
somehow inherently uses this assumption

420
00:15:52,440 --> 00:15:54,720
because if the truncation of the tags

421
00:15:54,720 --> 00:15:57,180
were done by a significant amount then

422
00:15:57,180 --> 00:15:59,220
it appears that our attack does not

423
00:15:59,220 --> 00:16:01,380
extend in a straightforward fashion and

424
00:16:01,380 --> 00:16:02,760
we leave it as an open question to

425
00:16:02,760 --> 00:16:04,860
action never attack for this generalized

426
00:16:04,860 --> 00:16:07,920
case and we thank Melanie for pointing

427
00:16:07,920 --> 00:16:11,519
this out she's a bachelor student at eth

428
00:16:11,519 --> 00:16:12,300
um

429
00:16:12,300 --> 00:16:15,600
yeah so finally if you uh if you take a

430
00:16:15,600 --> 00:16:18,120
step back then our attack against OCB to

431
00:16:18,120 --> 00:16:20,220
somehow crucially exploited the fact

432
00:16:20,220 --> 00:16:22,380
that Associated data is processed in a

433
00:16:22,380 --> 00:16:25,019
non-independent fashion uh but what if

434
00:16:25,019 --> 00:16:26,399
you remove this ability to query

435
00:16:26,399 --> 00:16:29,160
Associated data from the adversary then

436
00:16:29,160 --> 00:16:31,980
it turns out that not only do we uh not

437
00:16:31,980 --> 00:16:34,620
only do the attacks do not work but in

438
00:16:34,620 --> 00:16:37,199
the paper we formally prove that ocb2 in

439
00:16:37,199 --> 00:16:39,120
this restricted setting is actually in

440
00:16:39,120 --> 00:16:41,459
qcp Secure of course assuming that the

441
00:16:41,459 --> 00:16:42,779
underlying block Cipher is quantum

442
00:16:42,779 --> 00:16:44,339
secure

443
00:16:44,339 --> 00:16:46,440
now a few remarks about this result so

444
00:16:46,440 --> 00:16:47,639
in this restricted setting where you're

445
00:16:47,639 --> 00:16:49,500
not allowed to query Associated data at

446
00:16:49,500 --> 00:16:52,380
all so ocb1 and ocb3 are still insecure

447
00:16:52,380 --> 00:16:54,779
because our attacks if you recall from a

448
00:16:54,779 --> 00:16:56,579
few slides back then they do not use

449
00:16:56,579 --> 00:16:58,320
Associated data anywhere

450
00:16:58,320 --> 00:17:00,600
so it's a bit surprising that ocb2 which

451
00:17:00,600 --> 00:17:02,880
is classically broken seems to be more

452
00:17:02,880 --> 00:17:04,619
secure than ocb1 and OC within this

453
00:17:04,619 --> 00:17:05,880
Quantum setting

454
00:17:05,880 --> 00:17:07,380
but our results

455
00:17:07,380 --> 00:17:09,480
are not really a contradiction because

456
00:17:09,480 --> 00:17:12,000
uh it was shown in the 2019 paper that

457
00:17:12,000 --> 00:17:15,959
ocb2 is classically in CCA in Secure but

458
00:17:15,959 --> 00:17:17,880
from an ncba point of view it is still

459
00:17:17,880 --> 00:17:19,020
secure

460
00:17:19,020 --> 00:17:20,819
and what we did in our work is to just

461
00:17:20,819 --> 00:17:22,619
extend this NCP result to the quantum

462
00:17:22,619 --> 00:17:24,299
setting

463
00:17:24,299 --> 00:17:27,119
uh so to give a to give an intuition

464
00:17:27,119 --> 00:17:29,280
behind our proof of quantum security it

465
00:17:29,280 --> 00:17:30,419
first helps you look at the classical

466
00:17:30,419 --> 00:17:33,480
proof of uh security so the classical in

467
00:17:33,480 --> 00:17:36,120
CPA proof for ocb2 does not look at ocb2

468
00:17:36,120 --> 00:17:37,740
as a block Cipher mode of operation but

469
00:17:37,740 --> 00:17:39,600
instead as a tweakable boxer for mode of

470
00:17:39,600 --> 00:17:41,039
operation

471
00:17:41,039 --> 00:17:44,400
so where uh ocb2 uses uh so-called XCX

472
00:17:44,400 --> 00:17:46,200
to Google block Cipher and in the

473
00:17:46,200 --> 00:17:48,179
classical setting if you assume that the

474
00:17:48,179 --> 00:17:49,980
underlying block safer is a secure PRP

475
00:17:49,980 --> 00:17:53,460
then XCS XEX is indistinguishable from a

476
00:17:53,460 --> 00:17:55,080
so-called tweakable uniform random

477
00:17:55,080 --> 00:17:56,100
permutation

478
00:17:56,100 --> 00:17:58,440
and in ocb2 it turns out that if you

479
00:17:58,440 --> 00:18:00,720
replace all instances of XCX with such

480
00:18:00,720 --> 00:18:02,580
permutations then it makes our job

481
00:18:02,580 --> 00:18:04,980
easier in solving the improving the NCP

482
00:18:04,980 --> 00:18:06,419
security

483
00:18:06,419 --> 00:18:08,160
unfortunately in the quantum setting

484
00:18:08,160 --> 00:18:11,460
kaplanet I'll show that XCX is an

485
00:18:11,460 --> 00:18:13,260
insecure quicker boxer from the quantum

486
00:18:13,260 --> 00:18:15,780
setting even if the underlying block

487
00:18:15,780 --> 00:18:18,299
safer is a secure Quantum secure PRP

488
00:18:18,299 --> 00:18:20,700
but there's a subtle issue here so

489
00:18:20,700 --> 00:18:22,679
kaplaneta in their attack they look at

490
00:18:22,679 --> 00:18:26,100
XCX as in in isolation and they don't

491
00:18:26,100 --> 00:18:28,260
really consider how XCX is actually used

492
00:18:28,260 --> 00:18:30,000
in ocb2

493
00:18:30,000 --> 00:18:32,100
but we extend their attack to also show

494
00:18:32,100 --> 00:18:34,679
that XCX remains insecure even in the

495
00:18:34,679 --> 00:18:36,720
ocb2 setting

496
00:18:36,720 --> 00:18:39,600
so to summarize to have any hopes of

497
00:18:39,600 --> 00:18:42,240
proving the in-qcp security of ocb2 we

498
00:18:42,240 --> 00:18:43,860
must take a step back and again look at

499
00:18:43,860 --> 00:18:45,600
it as a block safer mode of operation

500
00:18:45,600 --> 00:18:48,059
while potentially relying on the quantum

501
00:18:48,059 --> 00:18:51,000
security of uh the PRP the block set for

502
00:18:51,000 --> 00:18:52,260
e

503
00:18:52,260 --> 00:18:54,720
and this is exactly what we did so we

504
00:18:54,720 --> 00:18:57,660
mainly borrowed techniques from which

505
00:18:57,660 --> 00:18:59,460
were in turn used to show the in qcp

506
00:18:59,460 --> 00:19:02,100
security of the CBC mode uh again the

507
00:19:02,100 --> 00:19:03,539
formal details can be found in our paper

508
00:19:03,539 --> 00:19:05,220
producing Christian

509
00:19:05,220 --> 00:19:09,360
so to summarize my talk uh so when ocb2

510
00:19:09,360 --> 00:19:11,460
and ocb3 are used in a random loan

511
00:19:11,460 --> 00:19:14,340
setting as aead modes then we show that

512
00:19:14,340 --> 00:19:16,440
ocb2 and ocb3 are insecure in the

513
00:19:16,440 --> 00:19:18,419
quantum setting where we demonstrated

514
00:19:18,419 --> 00:19:21,059
this with a concrete attacks uh but I

515
00:19:21,059 --> 00:19:22,559
mean for ocb2 we had to make an extra

516
00:19:22,559 --> 00:19:24,000
assumption that the tags are in

517
00:19:24,000 --> 00:19:26,100
truncated and this does not apply to

518
00:19:26,100 --> 00:19:28,260
ocb1 because functionally it is not an

519
00:19:28,260 --> 00:19:30,000
aead mode it does not use Associated

520
00:19:30,000 --> 00:19:31,679
data anywhere

521
00:19:31,679 --> 00:19:34,500
and now instead of ocb2 and ocb3 are

522
00:19:34,500 --> 00:19:37,020
used as pure AE modes then it turns out

523
00:19:37,020 --> 00:19:38,880
that surprisingly ocb2 is a secure

524
00:19:38,880 --> 00:19:39,960
scheme

525
00:19:39,960 --> 00:19:41,880
we again showed this with the concrete

526
00:19:41,880 --> 00:19:42,780
proof

527
00:19:42,780 --> 00:19:44,220
and finally this is not something I

528
00:19:44,220 --> 00:19:46,500
covered in my talk but now if OC video

529
00:19:46,500 --> 00:19:48,600
is again used as a pewd a scheme but

530
00:19:48,600 --> 00:19:49,980
this time in a strong adversarial

531
00:19:49,980 --> 00:19:51,419
setting where the adversary is allowed

532
00:19:51,419 --> 00:19:53,400
to pick nonsense in a adaptive and

533
00:19:53,400 --> 00:19:55,440
non-depleting fashion then we showed

534
00:19:55,440 --> 00:19:58,200
that ocb2 can be broken in an in-q CPS

535
00:19:58,200 --> 00:20:00,660
sense using only a single Quantum

536
00:20:00,660 --> 00:20:02,100
encryption query

537
00:20:02,100 --> 00:20:04,559
uh on a very high level we adapted a

538
00:20:04,559 --> 00:20:06,840
Quantum fortunity attack by Bombay Catal

539
00:20:06,840 --> 00:20:09,480
against a variant of 4cb to break

540
00:20:09,480 --> 00:20:10,980
confidentiality of OC between this

541
00:20:10,980 --> 00:20:12,419
setting

542
00:20:12,419 --> 00:20:14,220
uh yeah that brings to the end of my

543
00:20:14,220 --> 00:20:16,020
talk uh I thank you for your attention

544
00:20:16,020 --> 00:20:19,520
and I'm happy to take any questions

545
00:20:24,480 --> 00:20:26,460
thank you very much so are there any

546
00:20:26,460 --> 00:20:30,980
comments or questions from Kobe

547
00:20:37,440 --> 00:20:41,240
any questions from Beijing

548
00:20:47,220 --> 00:20:51,059
maybe I have one uh so uh if I look at

549
00:20:51,059 --> 00:20:55,020
this slides uh no scheme can achieve the

550
00:20:55,020 --> 00:20:57,960
security against adaptive nonsense

551
00:20:57,960 --> 00:21:01,020
yes is there any hope for achieving this

552
00:21:01,020 --> 00:21:04,080
notion or it seems to be a difficult to

553
00:21:04,080 --> 00:21:06,000
obtain positive result so that's a good

554
00:21:06,000 --> 00:21:07,919
question so this exact paper at Asia

555
00:21:07,919 --> 00:21:11,340
Crypt uh essentially what they do is uh

556
00:21:11,340 --> 00:21:12,660
um they come up with a new mode which is

557
00:21:12,660 --> 00:21:14,760
a variant of OCB which offers security

558
00:21:14,760 --> 00:21:18,080
not quite against adaptive nonsense but

559
00:21:18,080 --> 00:21:20,100
non-adaptive nonsense where in the

560
00:21:20,100 --> 00:21:21,900
security game the adversary first

561
00:21:21,900 --> 00:21:23,880
pre-specifies the list of nonsense he

562
00:21:23,880 --> 00:21:26,400
would use in the game uh but against

563
00:21:26,400 --> 00:21:30,559
adapter launches yeah I'm not so sure

564
00:21:31,020 --> 00:21:33,360
thank you

565
00:21:33,360 --> 00:21:36,979
other questions or comments

566
00:21:38,460 --> 00:21:41,299
from Beijing

567
00:21:43,140 --> 00:21:47,000
so let's thank the speaker again

568
00:22:29,760 --> 00:22:33,179
okay the next talk is about indifference

569
00:22:33,179 --> 00:22:35,700
ability of the sponge construction with

570
00:22:35,700 --> 00:22:38,520
a restricted number of message blocks

571
00:22:38,520 --> 00:22:42,918
the workers by Charlotte

572
00:22:43,320 --> 00:22:47,480
and Charlotte will give that talk

573
00:23:00,840 --> 00:23:03,179
can you hear me yes

574
00:23:03,179 --> 00:23:05,340
thank you for your introduction so today

575
00:23:05,340 --> 00:23:06,840
I will present a result regarding

576
00:23:06,840 --> 00:23:08,100
indifferentiability of the sponge

577
00:23:08,100 --> 00:23:09,659
construction when the number of message

578
00:23:09,659 --> 00:23:12,919
block is restricted

579
00:23:14,760 --> 00:23:16,500
the sponge construction is a popular

580
00:23:16,500 --> 00:23:18,840
method for hashing purposes and at a

581
00:23:18,840 --> 00:23:20,460
high level view it operates on the state

582
00:23:20,460 --> 00:23:22,200
of size pivots and relies on the

583
00:23:22,200 --> 00:23:23,640
cryptographic permutation of the same

584
00:23:23,640 --> 00:23:25,260
size

585
00:23:25,260 --> 00:23:27,720
then the state is split into two parts

586
00:23:27,720 --> 00:23:29,460
the first one is called the auto parts

587
00:23:29,460 --> 00:23:31,980
it is made out of orbit and R is also

588
00:23:31,980 --> 00:23:33,840
called the rate then we have the inner

589
00:23:33,840 --> 00:23:36,120
bot which comprises C beats and C is

590
00:23:36,120 --> 00:23:38,640
also called the capacity now in order to

591
00:23:38,640 --> 00:23:40,320
process a message we first split the

592
00:23:40,320 --> 00:23:42,659
padding message into orbit blocks and

593
00:23:42,659 --> 00:23:44,460
these blocks are added one by one to the

594
00:23:44,460 --> 00:23:46,140
auto part of the states and this is

595
00:23:46,140 --> 00:23:48,480
interleaved with permutation evaluations

596
00:23:48,480 --> 00:23:50,340
once all message blocks have been

597
00:23:50,340 --> 00:23:52,020
absorbed we can move on to the squeezing

598
00:23:52,020 --> 00:23:54,059
phase where all bits of the digest are

599
00:23:54,059 --> 00:23:56,100
extracted at a time and after each

600
00:23:56,100 --> 00:23:58,080
extraction the permutation is applied in

601
00:23:58,080 --> 00:24:00,059
the entire state

602
00:24:00,059 --> 00:24:02,400
so here we focus on the generalization

603
00:24:02,400 --> 00:24:04,140
of the sponge where the rate when

604
00:24:04,140 --> 00:24:05,940
squeezing is allowed to be larger than

605
00:24:05,940 --> 00:24:07,799
the rate when absorbing

606
00:24:07,799 --> 00:24:09,659
and it was introduced in the context of

607
00:24:09,659 --> 00:24:11,340
the photon scheme

608
00:24:11,340 --> 00:24:12,900
I will use the conventional graph

609
00:24:12,900 --> 00:24:14,640
notation of the sponge where nodes

610
00:24:14,640 --> 00:24:16,440
represent the baby states of the sponge

611
00:24:16,440 --> 00:24:18,720
and we draw an arrow between two edges

612
00:24:18,720 --> 00:24:20,700
labeled by your message block whenever

613
00:24:20,700 --> 00:24:22,320
absorption from this message of this

614
00:24:22,320 --> 00:24:23,940
message block allows to grow from the

615
00:24:23,940 --> 00:24:26,280
left state to the right State and no

616
00:24:26,280 --> 00:24:27,960
message block when we are on the

617
00:24:27,960 --> 00:24:29,400
squeezing phase

618
00:24:29,400 --> 00:24:31,500
and the rooting node will denote all

619
00:24:31,500 --> 00:24:33,299
nodes which which are accessible from

620
00:24:33,299 --> 00:24:34,980
the initial States

621
00:24:34,980 --> 00:24:37,200
the security model used here is

622
00:24:37,200 --> 00:24:38,940
indifferentiability and I will present

623
00:24:38,940 --> 00:24:40,799
it in a particular setting so

624
00:24:40,799 --> 00:24:42,659
indifferentiability takes the form of a

625
00:24:42,659 --> 00:24:44,520
distinguishing game where the adversary

626
00:24:44,520 --> 00:24:46,919
is placed either in the real world or in

627
00:24:46,919 --> 00:24:49,260
the ideal world and in both settings it

628
00:24:49,260 --> 00:24:50,880
can make construction or primitive

629
00:24:50,880 --> 00:24:53,700
queries now in the real world primitive

630
00:24:53,700 --> 00:24:55,380
queries gives access to a random

631
00:24:55,380 --> 00:24:57,840
permutation and construction query on

632
00:24:57,840 --> 00:25:00,120
the sponge based on this permutation

633
00:25:00,120 --> 00:25:03,000
now in the ideal world the sponge is

634
00:25:03,000 --> 00:25:04,679
replaced by your random Oracle and the

635
00:25:04,679 --> 00:25:07,440
Primitive biosimulator a simulator is an

636
00:25:07,440 --> 00:25:10,140
algorithm which is allowed to query the

637
00:25:10,140 --> 00:25:12,720
random Oracle and its goal is to provide

638
00:25:12,720 --> 00:25:14,400
answers matching the one of the sponge

639
00:25:14,400 --> 00:25:16,559
while at the same time imitating a

640
00:25:16,559 --> 00:25:18,059
random permutation

641
00:25:18,059 --> 00:25:20,580
now given a particular simulator we say

642
00:25:20,580 --> 00:25:22,260
that the sponge is indifferentiable from

643
00:25:22,260 --> 00:25:24,659
the random Oracle whenever any adversary

644
00:25:24,659 --> 00:25:26,340
can distinguish between these two words

645
00:25:26,340 --> 00:25:28,980
only with an negligible probability and

646
00:25:28,980 --> 00:25:31,080
this probability is usually expressed as

647
00:25:31,080 --> 00:25:34,140
a function of the number of queries made

648
00:25:34,140 --> 00:25:35,940
more precisely we Define the

649
00:25:35,940 --> 00:25:37,980
indifferentiability advantage to be the

650
00:25:37,980 --> 00:25:39,419
absolute value of the probability

651
00:25:39,419 --> 00:25:41,580
difference that the adversary in each of

652
00:25:41,580 --> 00:25:44,340
the words returns a particular bit and

653
00:25:44,340 --> 00:25:46,200
this is maximized of all distinguishers

654
00:25:46,200 --> 00:25:49,260
allowed to make at most few queries

655
00:25:49,260 --> 00:25:51,240
looking ahead we will consider the

656
00:25:51,240 --> 00:25:53,580
following restrictive Advantage where

657
00:25:53,580 --> 00:25:55,679
the max is taken over all adversaries

658
00:25:55,679 --> 00:25:57,360
allowed to make construction queries

659
00:25:57,360 --> 00:26:00,960
with a restricted message input length

660
00:26:00,960 --> 00:26:03,120
one variant of indifferentiability is

661
00:26:03,120 --> 00:26:05,100
called public indifferentiability and in

662
00:26:05,100 --> 00:26:06,779
this setting the construction queries

663
00:26:06,779 --> 00:26:09,360
are made public to all parties so in

664
00:26:09,360 --> 00:26:11,159
particular in the ideal word the

665
00:26:11,159 --> 00:26:13,020
simulator has access to the adversary

666
00:26:13,020 --> 00:26:15,299
queries to the random Oracle it makes it

667
00:26:15,299 --> 00:26:17,460
lives easier because in particular it

668
00:26:17,460 --> 00:26:19,080
only maintains needs to maintain

669
00:26:19,080 --> 00:26:21,059
consistency with respect to a smaller

670
00:26:21,059 --> 00:26:23,700
list of past queries

671
00:26:23,700 --> 00:26:26,100
therefore it yields a security model

672
00:26:26,100 --> 00:26:27,539
which is weaker than playing in

673
00:26:27,539 --> 00:26:29,820
differentiability so for example the

674
00:26:29,820 --> 00:26:31,740
plane Miracle Damian construction is not

675
00:26:31,740 --> 00:26:33,419
indifferentiable but it is publicly

676
00:26:33,419 --> 00:26:34,740
indifferentiable

677
00:26:34,740 --> 00:26:36,960
but even if the security model is weaker

678
00:26:36,960 --> 00:26:38,880
it is nonetheless useful in crop in

679
00:26:38,880 --> 00:26:40,799
practice in crypto system that do not

680
00:26:40,799 --> 00:26:42,539
require the data to Hash to be kept

681
00:26:42,539 --> 00:26:44,580
secrets so for example this is the case

682
00:26:44,580 --> 00:26:47,820
of several digital signature schemes

683
00:26:47,820 --> 00:26:50,159
however from now I will mainly focus on

684
00:26:50,159 --> 00:26:51,900
playing indifferentiability unless

685
00:26:51,900 --> 00:26:54,539
explicitly stated

686
00:26:54,539 --> 00:26:55,980
now going back to the sponge

687
00:26:55,980 --> 00:26:58,020
construction soon after its introduction

688
00:26:58,020 --> 00:26:59,159
it has been proven to be

689
00:26:59,159 --> 00:27:01,020
indifferentiable with a bond or form Q

690
00:27:01,020 --> 00:27:03,480
Square over 2 to the C and for the

691
00:27:03,480 --> 00:27:05,640
generalized forms sponge this result has

692
00:27:05,640 --> 00:27:08,220
been extended so namely as long as the

693
00:27:08,220 --> 00:27:10,919
capacity when squeezing is not spurnal

694
00:27:10,919 --> 00:27:13,140
than half of the capacity when absorbing

695
00:27:13,140 --> 00:27:15,360
up to a logarithmic Factor then the

696
00:27:15,360 --> 00:27:16,860
security bone does not degrade

697
00:27:16,860 --> 00:27:18,059
significantly

698
00:27:18,059 --> 00:27:20,220
in words it tells us that in order to be

699
00:27:20,220 --> 00:27:21,900
able to differentiate the sponge from a

700
00:27:21,900 --> 00:27:23,520
random Oracle with a non-negligible

701
00:27:23,520 --> 00:27:25,799
probability one needs at least two to

702
00:27:25,799 --> 00:27:27,539
this year over two queries

703
00:27:27,539 --> 00:27:29,220
and it was clear from the start that

704
00:27:29,220 --> 00:27:30,960
this bond is tight because with this

705
00:27:30,960 --> 00:27:33,240
number of queries we can generate inner

706
00:27:33,240 --> 00:27:35,700
collisions which allow to differentiate

707
00:27:35,700 --> 00:27:37,799
more precisely the attack works as

708
00:27:37,799 --> 00:27:40,260
follow so start from the initial State

709
00:27:40,260 --> 00:27:42,240
then consider to do this here over to

710
00:27:42,240 --> 00:27:44,039
different message add them to the auto

711
00:27:44,039 --> 00:27:46,620
part apply the permutation and store the

712
00:27:46,620 --> 00:27:48,960
obtain stage in the list

713
00:27:48,960 --> 00:27:50,640
now with high probability there are

714
00:27:50,640 --> 00:27:52,020
these two different elements in this

715
00:27:52,020 --> 00:27:53,760
list that display a collision on the

716
00:27:53,760 --> 00:27:55,200
inner part

717
00:27:55,200 --> 00:27:58,080
and the idea now is to compensate the

718
00:27:58,080 --> 00:27:59,940
difference in the auto parts by using a

719
00:27:59,940 --> 00:28:02,520
subsequent app sub call therefore with

720
00:28:02,520 --> 00:28:04,080
the notation of the slides here we have

721
00:28:04,080 --> 00:28:05,460
two different sequence of message block

722
00:28:05,460 --> 00:28:07,740
that go to the same stage D so we have a

723
00:28:07,740 --> 00:28:10,080
full State Collision

724
00:28:10,080 --> 00:28:12,299
to ReMax is that this is only for the

725
00:28:12,299 --> 00:28:14,400
particular case when the rate is at

726
00:28:14,400 --> 00:28:15,659
least half of the capacity when

727
00:28:15,659 --> 00:28:18,419
absorbing and in this setting one needs

728
00:28:18,419 --> 00:28:20,700
to absorb call

729
00:28:20,700 --> 00:28:22,799
however this attack is easily

730
00:28:22,799 --> 00:28:25,260
generalizable when the rate is as small

731
00:28:25,260 --> 00:28:28,080
as we want what we need to do here is to

732
00:28:28,080 --> 00:28:29,880
in the first phase of the attack we need

733
00:28:29,880 --> 00:28:31,980
to extend the number of absorb cores to

734
00:28:31,980 --> 00:28:34,620
k k is defined here so that the number

735
00:28:34,620 --> 00:28:37,140
of obtained State here is 2 to the ca

736
00:28:37,140 --> 00:28:39,299
over 2. so that we have an inner

737
00:28:39,299 --> 00:28:41,580
collision with high probability

738
00:28:41,580 --> 00:28:44,580
and we can again use a subsequent app

739
00:28:44,580 --> 00:28:46,500
sub call to transform this partial

740
00:28:46,500 --> 00:28:48,720
Collision into full State Collision so

741
00:28:48,720 --> 00:28:50,700
that this attack requires in total K

742
00:28:50,700 --> 00:28:53,840
plus 1 absorb course

743
00:28:54,059 --> 00:28:56,400
now uh assume that we have a sponge

744
00:28:56,400 --> 00:28:59,039
where the number of load message block

745
00:28:59,039 --> 00:29:02,640
to be absorbed is restricted to L but

746
00:29:02,640 --> 00:29:05,400
still we can squeeze another batch an

747
00:29:05,400 --> 00:29:07,919
arbitrary number of blocks this is a

748
00:29:07,919 --> 00:29:09,240
restrictive setting which does not

749
00:29:09,240 --> 00:29:11,520
nonetheless useful applications in

750
00:29:11,520 --> 00:29:13,620
crypto system where the length of the

751
00:29:13,620 --> 00:29:15,659
data to Hash is known in advance or at

752
00:29:15,659 --> 00:29:17,880
least upper body so for example password

753
00:29:17,880 --> 00:29:20,039
hashing or protocols using the fiatia

754
00:29:20,039 --> 00:29:21,240
Mia transform

755
00:29:21,240 --> 00:29:23,760
then in particular when L is smaller

756
00:29:23,760 --> 00:29:25,799
than K plus 1 the Collision attack from

757
00:29:25,799 --> 00:29:28,620
the slide before does not apply anymore

758
00:29:28,620 --> 00:29:30,720
however we can tweak it in the following

759
00:29:30,720 --> 00:29:33,539
way so first of all compute all routine

760
00:29:33,539 --> 00:29:34,919
nodes where absorption of a message

761
00:29:34,919 --> 00:29:36,899
block is still possible call these

762
00:29:36,899 --> 00:29:38,340
states YY

763
00:29:38,340 --> 00:29:40,980
then start for example from YY and then

764
00:29:40,980 --> 00:29:43,200
make chain primitive queries so that we

765
00:29:43,200 --> 00:29:45,480
obtain routine notes linked Associated

766
00:29:45,480 --> 00:29:47,399
to squeeze calls because these states

767
00:29:47,399 --> 00:29:50,039
the njs and then look for an inner

768
00:29:50,039 --> 00:29:52,500
collision between a YY and an NJ once

769
00:29:52,500 --> 00:29:54,720
this is formed we can use the last app

770
00:29:54,720 --> 00:29:57,299
so code on YY to transform this partial

771
00:29:57,299 --> 00:29:59,520
Collision into full State Collision

772
00:29:59,520 --> 00:30:02,100
in particular because the number of YY

773
00:30:02,100 --> 00:30:03,720
state is smaller than two to this year

774
00:30:03,720 --> 00:30:06,000
over 2 then the number of njs needs to

775
00:30:06,000 --> 00:30:08,700
compensate for that more precisely they

776
00:30:08,700 --> 00:30:10,559
must be equal to 2 to the B minus L

777
00:30:10,559 --> 00:30:13,320
times R A which is greater than 2 to

778
00:30:13,320 --> 00:30:14,880
this year over 2.

779
00:30:14,880 --> 00:30:17,159
in words it means that there is a there

780
00:30:17,159 --> 00:30:18,779
is a gap between this attack and the

781
00:30:18,779 --> 00:30:21,419
security bond in this restricted setting

782
00:30:21,419 --> 00:30:23,520
and the contribution of this work was to

783
00:30:23,520 --> 00:30:25,679
prove a better indifferentiability and

784
00:30:25,679 --> 00:30:27,179
public and differentiability bond for

785
00:30:27,179 --> 00:30:28,740
the sponge when the number of message

786
00:30:28,740 --> 00:30:31,020
block is restricted and in particular

787
00:30:31,020 --> 00:30:32,940
the minimum term here matches the

788
00:30:32,940 --> 00:30:35,520
Collision attack

789
00:30:35,520 --> 00:30:38,520
a related rock is a bond from Nitro and

790
00:30:38,520 --> 00:30:40,860
OTA and when the number when only one

791
00:30:40,860 --> 00:30:42,659
message block is allowed to be absorbed

792
00:30:42,659 --> 00:30:44,100
then we can also use their

793
00:30:44,100 --> 00:30:46,200
indifferentiability bond here in the

794
00:30:46,200 --> 00:30:48,360
setting they allow the First Rate when

795
00:30:48,360 --> 00:30:49,919
absorbing to be larger than the

796
00:30:49,919 --> 00:30:52,500
subsequent rate when absorbing so that

797
00:30:52,500 --> 00:30:54,840
here the result the this Bond provides

798
00:30:54,840 --> 00:30:56,520
new results whenever more than one

799
00:30:56,520 --> 00:30:59,340
message block is absorbed

800
00:30:59,340 --> 00:31:01,740
before moving on to the videos a few

801
00:31:01,740 --> 00:31:03,600
notational points I will use the set

802
00:31:03,600 --> 00:31:05,760
absorb path to denote all routine notes

803
00:31:05,760 --> 00:31:07,380
where absorption of a message block is

804
00:31:07,380 --> 00:31:09,600
still possible and in particular because

805
00:31:09,600 --> 00:31:11,460
we assume that the permutation and the

806
00:31:11,460 --> 00:31:13,500
simulator defines their answers on the

807
00:31:13,500 --> 00:31:15,419
Fly then the size of this set can be

808
00:31:15,419 --> 00:31:17,399
promoted as the minimum between the

809
00:31:17,399 --> 00:31:19,260
number of queries and the size of this

810
00:31:19,260 --> 00:31:22,500
set when considering all possibilities

811
00:31:22,500 --> 00:31:24,960
moreover I will say that a path is valid

812
00:31:24,960 --> 00:31:26,760
whenever the number of apps on message

813
00:31:26,760 --> 00:31:30,600
block is smaller than calligraphic l

814
00:31:30,600 --> 00:31:32,640
now a few words about the simulator

815
00:31:32,640 --> 00:31:35,700
simulator use it is very similar to the

816
00:31:35,700 --> 00:31:37,440
one used by indifferentiability of the

817
00:31:37,440 --> 00:31:40,140
sponge so more precisely the inverse

818
00:31:40,140 --> 00:31:42,899
simulator returns random elements while

819
00:31:42,899 --> 00:31:45,679
the forward simulator will maintain

820
00:31:45,679 --> 00:31:48,360
consistent answers whenever this query

821
00:31:48,360 --> 00:31:50,940
involves a node in a valid path

822
00:31:50,940 --> 00:31:52,980
overall the simulator behaves like a

823
00:31:52,980 --> 00:31:55,740
two-sided random function and for the

824
00:31:55,740 --> 00:31:57,059
setting of public indifferentiability

825
00:31:57,059 --> 00:31:59,220
from this simulator we can build another

826
00:31:59,220 --> 00:32:01,440
simulator which which is such that

827
00:32:01,440 --> 00:32:03,360
whenever a new construction query is

828
00:32:03,360 --> 00:32:05,520
made available then S Prime is going to

829
00:32:05,520 --> 00:32:07,200
convert them into the appropriate

830
00:32:07,200 --> 00:32:09,779
primitive queries to S so that the

831
00:32:09,779 --> 00:32:11,880
simulator is implicitly aware of all

832
00:32:11,880 --> 00:32:14,580
construction queries

833
00:32:14,580 --> 00:32:17,460
now we have ideal word versus real world

834
00:32:17,460 --> 00:32:19,559
and in order to facilitate the analysis

835
00:32:19,559 --> 00:32:21,720
we can introduce an intermediate word

836
00:32:21,720 --> 00:32:23,820
where construction queries gives access

837
00:32:23,820 --> 00:32:25,919
to the sponge which is itself based on

838
00:32:25,919 --> 00:32:27,960
the simulator itself based on the random

839
00:32:27,960 --> 00:32:30,419
Oracle hidden from the adversary so now

840
00:32:30,419 --> 00:32:32,100
we have two different distance to Bone

841
00:32:32,100 --> 00:32:34,380
first one is intermediate versus real

842
00:32:34,380 --> 00:32:35,940
because in both of these words

843
00:32:35,940 --> 00:32:37,860
construction queries give access to the

844
00:32:37,860 --> 00:32:39,480
sponge then we can get rid of

845
00:32:39,480 --> 00:32:41,220
construction queries by letting the

846
00:32:41,220 --> 00:32:43,559
adversary convert them into the

847
00:32:43,559 --> 00:32:45,240
appropriate primitive queries

848
00:32:45,240 --> 00:32:47,640
so this distance is only given by the

849
00:32:47,640 --> 00:32:49,320
quality of randomness of the simulator

850
00:32:49,320 --> 00:32:51,419
and because it is acting like a

851
00:32:51,419 --> 00:32:52,980
two-sided random function then this

852
00:32:52,980 --> 00:32:55,500
distance is upper bounded by The PRP prf

853
00:32:55,500 --> 00:32:57,840
switching Lemma

854
00:32:57,840 --> 00:32:59,940
but the remaining distance this is an

855
00:32:59,940 --> 00:33:02,220
identical until bad games and two kind

856
00:33:02,220 --> 00:33:04,380
of bad events can allow an adversary to

857
00:33:04,380 --> 00:33:05,580
differentiate

858
00:33:05,580 --> 00:33:07,260
the first one is when the simulator

859
00:33:07,260 --> 00:33:09,779
fails to provide answers matching the

860
00:33:09,779 --> 00:33:11,760
one of a sponge then in this case it is

861
00:33:11,760 --> 00:33:14,100
easy to distinguish and the second kind

862
00:33:14,100 --> 00:33:16,740
of bad event is only for the plane in

863
00:33:16,740 --> 00:33:18,299
differentiability setting because in the

864
00:33:18,299 --> 00:33:19,679
plane in differentiability setting

865
00:33:19,679 --> 00:33:21,899
simulator is not aware of construction

866
00:33:21,899 --> 00:33:24,419
queries made by the adversary while here

867
00:33:24,419 --> 00:33:26,340
in the intermediate world because the

868
00:33:26,340 --> 00:33:27,960
sponge makes the query to the simulator

869
00:33:27,960 --> 00:33:30,720
then in the intermediate word the

870
00:33:30,720 --> 00:33:32,880
simulator is more powerful

871
00:33:32,880 --> 00:33:35,159
and if a certain bad event happens then

872
00:33:35,159 --> 00:33:37,320
the the adversary will be able to notice

873
00:33:37,320 --> 00:33:38,760
the difference

874
00:33:38,760 --> 00:33:41,460
this bad event is called guess it can be

875
00:33:41,460 --> 00:33:43,919
set only in the intermediate world and

876
00:33:43,919 --> 00:33:44,940
does not apply in the public

877
00:33:44,940 --> 00:33:47,220
indifferentiability setting it is set

878
00:33:47,220 --> 00:33:49,559
whenever the adversary is able to guess

879
00:33:49,559 --> 00:33:51,480
an intermediate state that was generated

880
00:33:51,480 --> 00:33:54,120
during a construction query more

881
00:33:54,120 --> 00:33:55,679
precisely it has two possibilities

882
00:33:55,679 --> 00:33:58,260
either the adversary can guess the full

883
00:33:58,260 --> 00:34:00,960
state of any routine note and because in

884
00:34:00,960 --> 00:34:02,460
this case it has access to the outer

885
00:34:02,460 --> 00:34:04,380
parts of the Squeeze Box so are s bits

886
00:34:04,380 --> 00:34:07,440
then this even has a probability of Q

887
00:34:07,440 --> 00:34:09,179
over 2 to the Cs

888
00:34:09,179 --> 00:34:11,159
another possibility is that the

889
00:34:11,159 --> 00:34:12,960
adversary guesses the inner part of a

890
00:34:12,960 --> 00:34:14,520
Nodine absorb path because in this

891
00:34:14,520 --> 00:34:16,859
setting it can additionally overwrite up

892
00:34:16,859 --> 00:34:19,679
to our a bits so that this probability

893
00:34:19,679 --> 00:34:22,379
is given by the minimum term we have a

894
00:34:22,379 --> 00:34:26,159
minimum here because the size of a path

895
00:34:26,159 --> 00:34:27,540
can be appointed as the minimum between

896
00:34:27,540 --> 00:34:30,300
two terms so that was the bad even guess

897
00:34:30,300 --> 00:34:32,520
and for the remaining bad events the

898
00:34:32,520 --> 00:34:35,399
only concern consistency of the answers

899
00:34:35,399 --> 00:34:37,679
so we have inner which is set whenever

900
00:34:37,679 --> 00:34:40,560
inner collisions with absorb path occur

901
00:34:40,560 --> 00:34:42,780
then we have call which is set whenever

902
00:34:42,780 --> 00:34:45,300
either two primitive query inputs

903
00:34:45,300 --> 00:34:47,699
Collide are two primitive queries output

904
00:34:47,699 --> 00:34:49,918
collide with each other and it gives the

905
00:34:49,918 --> 00:34:51,960
term Q Square over 2 to the B

906
00:34:51,960 --> 00:34:53,639
so at this point you might think that

907
00:34:53,639 --> 00:34:55,739
this term here has been artificially

908
00:34:55,739 --> 00:34:57,920
introduced only because the simulator

909
00:34:57,920 --> 00:35:00,780
imitates badly a random permutation

910
00:35:00,780 --> 00:35:02,760
but this is not the case because we also

911
00:35:02,760 --> 00:35:04,920
have the butt even connect which is set

912
00:35:04,920 --> 00:35:07,140
whenever A Primitive query input

913
00:35:07,140 --> 00:35:08,820
collides with a novel primitive query

914
00:35:08,820 --> 00:35:10,800
output and even with a random

915
00:35:10,800 --> 00:35:13,320
permutation this even is set with this

916
00:35:13,320 --> 00:35:15,740
probability

917
00:35:16,079 --> 00:35:18,119
so so now that we established the bound

918
00:35:18,119 --> 00:35:20,040
we might wonder about the tightness of

919
00:35:20,040 --> 00:35:21,960
it so remember that we had an inner

920
00:35:21,960 --> 00:35:23,520
collision with this number of queries

921
00:35:23,520 --> 00:35:25,680
which matches the minimum term

922
00:35:25,680 --> 00:35:27,960
and now for the remaining term well in

923
00:35:27,960 --> 00:35:30,359
two WCS queries an adversary can make a

924
00:35:30,359 --> 00:35:33,060
construction query it has access to RS

925
00:35:33,060 --> 00:35:35,220
bits and you can and can try all

926
00:35:35,220 --> 00:35:37,920
possible inner parts so that's in the

927
00:35:37,920 --> 00:35:40,079
set of queries made by the adversary one

928
00:35:40,079 --> 00:35:41,760
of them will correspond to the adversary

929
00:35:41,760 --> 00:35:44,040
being able to guess the state of the

930
00:35:44,040 --> 00:35:46,079
sponge which is of course an undesirable

931
00:35:46,079 --> 00:35:47,760
even in practice

932
00:35:47,760 --> 00:35:49,800
for the for the other terms we can

933
00:35:49,800 --> 00:35:51,240
imagine the following differentiability

934
00:35:51,240 --> 00:35:54,180
attack so first make 2 to the B over two

935
00:35:54,180 --> 00:35:56,940
different primitive queries then take a

936
00:35:56,940 --> 00:35:59,220
random message absorb this message and

937
00:35:59,220 --> 00:36:01,500
make two to the B over 2 Chain primitive

938
00:36:01,500 --> 00:36:04,260
queries so that the event connect will

939
00:36:04,260 --> 00:36:06,420
be set with high probability once this

940
00:36:06,420 --> 00:36:08,339
is set the adversary can check for

941
00:36:08,339 --> 00:36:10,260
consistency of the answers

942
00:36:10,260 --> 00:36:12,240
and any simulator which is able to

943
00:36:12,240 --> 00:36:13,980
defeat this attack should in particular

944
00:36:13,980 --> 00:36:16,440
be able to guess the message that was uh

945
00:36:16,440 --> 00:36:19,440
taken by the adversary which is of

946
00:36:19,440 --> 00:36:22,260
course hard in practice

947
00:36:22,260 --> 00:36:24,599
and a few words about application so if

948
00:36:24,599 --> 00:36:26,460
we take parameter set that correspond to

949
00:36:26,460 --> 00:36:28,740
ask on hash with a regular sponge we had

950
00:36:28,740 --> 00:36:31,619
128 bits of security while if we

951
00:36:31,619 --> 00:36:33,540
restrict the input message to be of size

952
00:36:33,540 --> 00:36:36,900
of at most 127 bits then security levels

953
00:36:36,900 --> 00:36:40,440
up to 160 bits if we go for smaller

954
00:36:40,440 --> 00:36:42,359
permutation sizes so for example Photon

955
00:36:42,359 --> 00:36:45,300
Beetle hash Arctic work within plain

956
00:36:45,300 --> 00:36:48,180
spawn we had 120 bit of security while

957
00:36:48,180 --> 00:36:50,099
if we restrict again the message to be

958
00:36:50,099 --> 00:36:52,920
of size of at most 127 bits then

959
00:36:52,920 --> 00:36:56,220
security levels up to 128 bits

960
00:36:56,220 --> 00:36:58,440
however if we already know a restriction

961
00:36:58,440 --> 00:37:01,140
of the message input and want to

962
00:37:01,140 --> 00:37:03,180
maximize security and the absorbing rate

963
00:37:03,180 --> 00:37:05,160
at the same time then the best parameter

964
00:37:05,160 --> 00:37:06,839
choice is to have one message block

965
00:37:06,839 --> 00:37:09,240
absorb and the rate equal to capacity

966
00:37:09,240 --> 00:37:11,040
equal to half of the permutation when

967
00:37:11,040 --> 00:37:13,140
absorbing

968
00:37:13,140 --> 00:37:15,119
so to conclude in this work I prove the

969
00:37:15,119 --> 00:37:16,619
type indifferentiability bond for the

970
00:37:16,619 --> 00:37:18,300
sponge construction when the number of

971
00:37:18,300 --> 00:37:20,940
message block is restricted and whenever

972
00:37:20,940 --> 00:37:23,520
less than K plus 1 blocks of absorb it

973
00:37:23,520 --> 00:37:25,440
gives a better security Bond

974
00:37:25,440 --> 00:37:28,640
thank you for your attention

975
00:37:34,260 --> 00:37:39,920
so questions of comments from Kobe

976
00:37:40,980 --> 00:37:43,980
foreign

977
00:37:55,230 --> 00:37:58,349
[Music]

978
00:38:18,920 --> 00:38:21,540
construction becomes better

979
00:38:21,540 --> 00:38:25,700
in terms of public interference ability

980
00:38:26,339 --> 00:38:29,579
as far as I remember there was one

981
00:38:29,579 --> 00:38:31,320
particular case of the miracle Vanguard

982
00:38:31,320 --> 00:38:34,980
when you have a fixed data length input

983
00:38:34,980 --> 00:38:37,800
then it was even indifferentiable ah

984
00:38:37,800 --> 00:38:43,160
yeah so my question is uh if the Rings

985
00:38:43,160 --> 00:38:47,700
is restricted then the security of

986
00:38:47,700 --> 00:38:50,460
mercury increase

987
00:38:50,460 --> 00:38:54,420
or is there any uh on top of my head I

988
00:38:54,420 --> 00:38:57,000
think that yes but I can check it uh and

989
00:38:57,000 --> 00:38:58,980
we can discuss it offline if you uh okay

990
00:38:58,980 --> 00:39:01,760
thank you

991
00:39:03,300 --> 00:39:07,400
thank you more questions comments

992
00:39:11,400 --> 00:39:14,420
from Beijing

993
00:39:18,960 --> 00:39:21,740
from the chat

994
00:39:24,300 --> 00:39:27,839
so maybe I have one uh so you actually

995
00:39:27,839 --> 00:39:30,960
have two security bounds and I just want

996
00:39:30,960 --> 00:39:33,599
to make sure that when you refer to the

997
00:39:33,599 --> 00:39:37,200
tightness you mean that both bounds are

998
00:39:37,200 --> 00:39:40,800
tight or you just refer to the regular

999
00:39:40,800 --> 00:39:43,680
in the financial ability uh actually to

1000
00:39:43,680 --> 00:39:45,240
both so in the public and

1001
00:39:45,240 --> 00:39:46,800
differentiability this term here does

1002
00:39:46,800 --> 00:39:48,780
not appear so the attack doesn't apply

1003
00:39:48,780 --> 00:39:50,400
anymore because you don't mind that the

1004
00:39:50,400 --> 00:39:51,839
adversary is able to guess the full

1005
00:39:51,839 --> 00:39:55,140
State and yes uh this is also tight for

1006
00:39:55,140 --> 00:39:56,339
public in differentiability setting

1007
00:39:56,339 --> 00:39:58,500
having inner collision and setting the

1008
00:39:58,500 --> 00:40:01,320
bad even connect is also uh tight it's

1009
00:40:01,320 --> 00:40:02,700
also something that applies an attack

1010
00:40:02,700 --> 00:40:04,140
that applies in the setting of public

1011
00:40:04,140 --> 00:40:06,359
and differentiability so it's typed with

1012
00:40:06,359 --> 00:40:07,560
respect to both

1013
00:40:07,560 --> 00:40:09,980
okay thank you

1014
00:40:09,980 --> 00:40:14,300
more questions from Kobe

1015
00:40:14,700 --> 00:40:17,660
from Beijing

1016
00:40:19,800 --> 00:40:21,839
and no chat so

1017
00:40:21,839 --> 00:40:25,820
let's stand let's speak again

1018
00:40:27,480 --> 00:40:30,020
okay

1019
00:40:49,320 --> 00:40:51,900
can you see the speakers online and

1020
00:40:51,900 --> 00:40:54,500
we'll present

1021
00:40:54,540 --> 00:40:55,820
hello

1022
00:40:55,820 --> 00:40:59,700
can you can you can you share the screen

1023
00:40:59,700 --> 00:41:02,359
yeah sure

1024
00:41:06,960 --> 00:41:09,480
so is my screen visible

1025
00:41:09,480 --> 00:41:12,020
yes

1026
00:41:12,359 --> 00:41:15,359
and how about my audio

1027
00:41:15,359 --> 00:41:17,280
yes we can hear you

1028
00:41:17,280 --> 00:41:18,599
okay

1029
00:41:18,599 --> 00:41:21,599
okay so uh the last uh talk of this

1030
00:41:21,599 --> 00:41:24,839
session is about Heights multi-user

1031
00:41:24,839 --> 00:41:26,640
security bound of

1032
00:41:26,640 --> 00:41:31,460
DB HTS the authors are

1033
00:41:31,460 --> 00:41:34,820
nilanjan data a visit

1034
00:41:34,820 --> 00:41:39,660
and suprita Tanika and avijit will give

1035
00:41:39,660 --> 00:41:41,839
us a talk

1036
00:41:41,839 --> 00:41:45,240
so good afternoon everyone so today I'm

1037
00:41:45,240 --> 00:41:47,160
going to present my work to a typical

1038
00:41:47,160 --> 00:41:49,740
user security bound of double block HDL

1039
00:41:49,740 --> 00:41:51,960
sum which is a joint work with niranjan

1040
00:41:51,960 --> 00:41:55,040
method and subbeta

1041
00:41:56,180 --> 00:41:58,920
is a popular design Paradigm of

1042
00:41:58,920 --> 00:42:00,839
constructing uh Beyond birthday con

1043
00:42:00,839 --> 00:42:03,359
section variable output and prf which

1044
00:42:03,359 --> 00:42:06,960
was proposed by that town in fsc20

1045
00:42:06,960 --> 00:42:09,000
so double block hashed and sum is

1046
00:42:09,000 --> 00:42:11,220
basically constructed of two separate

1047
00:42:11,220 --> 00:42:13,560
modules namely the first one is a double

1048
00:42:13,560 --> 00:42:15,480
block hash function which is denoted in

1049
00:42:15,480 --> 00:42:16,680
weight

1050
00:42:16,680 --> 00:42:19,260
the and it takes a message in of

1051
00:42:19,260 --> 00:42:21,599
arbitrary length and it produces twin

1052
00:42:21,599 --> 00:42:23,880
bit outputs namely Sigma and Theta where

1053
00:42:23,880 --> 00:42:26,099
Sigma and Theta each option are in bit

1054
00:42:26,099 --> 00:42:29,460
string and then this 2N bit output is

1055
00:42:29,460 --> 00:42:31,619
fitted into a sum function and the sum

1056
00:42:31,619 --> 00:42:34,380
function is basically the sum or the

1057
00:42:34,380 --> 00:42:36,839
zone of the outputs of two clock ciphers

1058
00:42:36,839 --> 00:42:39,540
namely ek1 and ek2 and finally it

1059
00:42:39,540 --> 00:42:42,599
reduces the tech t uh so authors have

1060
00:42:42,599 --> 00:42:45,180
shown that double block hash the sum is

1061
00:42:45,180 --> 00:42:47,220
secure up to 2 to the two n by three

1062
00:42:47,220 --> 00:42:49,260
queries

1063
00:42:49,260 --> 00:42:52,220
so before that many of the

1064
00:42:52,220 --> 00:42:55,380
variable output appear diff was proposed

1065
00:42:55,380 --> 00:42:57,599
and those are shown to be Beyond

1066
00:42:57,599 --> 00:43:00,500
multiple secure so I'll start with uh

1067
00:43:00,500 --> 00:43:06,480
work by yasuda so yesuda in ctrsc 2010

1068
00:43:06,480 --> 00:43:09,359
has proposed a variable output length

1069
00:43:09,359 --> 00:43:12,599
prf which is called some ecbc so this is

1070
00:43:12,599 --> 00:43:14,760
nothing but the sum of the two

1071
00:43:14,760 --> 00:43:17,640
independent CBC outputs right so this is

1072
00:43:17,640 --> 00:43:19,260
our rate half secretion mode of

1073
00:43:19,260 --> 00:43:21,480
operation and it requires four

1074
00:43:21,480 --> 00:43:23,940
independent block Cipher keys and it

1075
00:43:23,940 --> 00:43:27,240
offers Q Cube lq over 2 to the two n

1076
00:43:27,240 --> 00:43:29,819
security bound so if you see this

1077
00:43:29,819 --> 00:43:32,160
construction closely then this is

1078
00:43:32,160 --> 00:43:34,260
nothing but an instantiation of double

1079
00:43:34,260 --> 00:43:37,319
block hashtag sum because if you see

1080
00:43:37,319 --> 00:43:40,079
that the red part is basically a double

1081
00:43:40,079 --> 00:43:41,819
block hashtag sum function which is

1082
00:43:41,819 --> 00:43:43,800
nothing but the concatenation of two

1083
00:43:43,800 --> 00:43:46,260
independent CBC instances then their

1084
00:43:46,260 --> 00:43:48,540
output namely Sigma and Theta is passed

1085
00:43:48,540 --> 00:43:51,240
through a sum function namely e2k3 and

1086
00:43:51,240 --> 00:43:53,220
finally their output is stored together

1087
00:43:53,220 --> 00:43:55,380
to produce attack t

1088
00:43:55,380 --> 00:43:57,960
after a year yasuda has also proposed

1089
00:43:57,960 --> 00:43:59,460
another beyond what about secured

1090
00:43:59,460 --> 00:44:01,859
variable output is prf called PNF plus

1091
00:44:01,859 --> 00:44:04,140
so it is a wait for parallel mode of

1092
00:44:04,140 --> 00:44:07,740
operation and uh it's uh unlike some

1093
00:44:07,740 --> 00:44:10,619
ecbc function some CBC construction it

1094
00:44:10,619 --> 00:44:12,300
requires three independent block safer

1095
00:44:12,300 --> 00:44:14,339
keys and it also offers a similar level

1096
00:44:14,339 --> 00:44:16,380
of security bound namely Q Cube L Cube

1097
00:44:16,380 --> 00:44:19,020
over 2 to the two n so again if you see

1098
00:44:19,020 --> 00:44:21,240
that this is an another instantiation of

1099
00:44:21,240 --> 00:44:22,920
the rubber block hash function double

1100
00:44:22,920 --> 00:44:25,140
block hash the sum function okay where

1101
00:44:25,140 --> 00:44:27,359
this red part basically is the double

1102
00:44:27,359 --> 00:44:30,240
block hash function

1103
00:44:30,240 --> 00:44:34,260
in Asia 2012 Chad ital has have proposed

1104
00:44:34,260 --> 00:44:37,260
ckf9 it is a red form sequential mode of

1105
00:44:37,260 --> 00:44:38,940
operation that requires three

1106
00:44:38,940 --> 00:44:40,500
independent block cycle Keys like the

1107
00:44:40,500 --> 00:44:42,780
Mac plus and again it offers YouTube and

1108
00:44:42,780 --> 00:44:44,880
Cube over 2 to the 12th Equity bound and

1109
00:44:44,880 --> 00:44:46,740
similarly you can see that this

1110
00:44:46,740 --> 00:44:48,900
construction is again an installation of

1111
00:44:48,900 --> 00:44:51,480
double block hashtag and finally inertia

1112
00:44:51,480 --> 00:44:55,020
click 2017 Nitro has proposed a light

1113
00:44:55,020 --> 00:44:56,819
net plus construction which is again an

1114
00:44:56,819 --> 00:44:59,700
instantiation of dbhds construction uh

1115
00:44:59,700 --> 00:45:02,160
again this is a online like the three

1116
00:45:02,160 --> 00:45:04,079
previous constructions it is a rate one

1117
00:45:04,079 --> 00:45:08,099
parallel mode of operation uh like ppap

1118
00:45:08,099 --> 00:45:09,960
Plus or ckf9 it also requires three

1119
00:45:09,960 --> 00:45:11,579
independent block size or case and it

1120
00:45:11,579 --> 00:45:13,740
offered Q cubed by the power 2 and

1121
00:45:13,740 --> 00:45:15,660
security one so one important thing to

1122
00:45:15,660 --> 00:45:17,220
note here that the security bound of

1123
00:45:17,220 --> 00:45:19,560
light Mac plus is basically independent

1124
00:45:19,560 --> 00:45:21,660
of the message length n and that's why

1125
00:45:21,660 --> 00:45:23,280
it is called it is called that is the

1126
00:45:23,280 --> 00:45:25,260
first BBB secured man whose security

1127
00:45:25,260 --> 00:45:26,819
bound is independent of the message

1128
00:45:26,819 --> 00:45:28,079
layer

1129
00:45:28,079 --> 00:45:30,720
so as we can see that all these three

1130
00:45:30,720 --> 00:45:32,280
constructions are sorry all these four

1131
00:45:32,280 --> 00:45:34,200
constructions are the instantiations of

1132
00:45:34,200 --> 00:45:36,900
3K dbhds hash function why is it called

1133
00:45:36,900 --> 00:45:39,480
three kit because if you see closely the

1134
00:45:39,480 --> 00:45:40,619
sum function

1135
00:45:40,619 --> 00:45:42,480
the sum function the sum function takes

1136
00:45:42,480 --> 00:45:44,339
basically the two independent block size

1137
00:45:44,339 --> 00:45:46,380
or Keys which is different over the hash

1138
00:45:46,380 --> 00:45:49,020
key hkh so all together the total number

1139
00:45:49,020 --> 00:45:51,300
of keys is basically three so that's why

1140
00:45:51,300 --> 00:45:52,859
all these instantiation are

1141
00:45:52,859 --> 00:45:55,020
instantiations of the three kpb HDs

1142
00:45:55,020 --> 00:45:58,619
constructions so as opposed to this at

1143
00:45:58,619 --> 00:46:01,079
all in fsc20 have proposed a variant of

1144
00:46:01,079 --> 00:46:03,240
3 kgbhds construction which is called 2K

1145
00:46:03,240 --> 00:46:05,339
device construction where the sum

1146
00:46:05,339 --> 00:46:06,900
function requires only a single block

1147
00:46:06,900 --> 00:46:09,000
Cipher key and that is obviously

1148
00:46:09,000 --> 00:46:11,040
different from the hash key so the sum

1149
00:46:11,040 --> 00:46:12,660
function request a single block Cipher

1150
00:46:12,660 --> 00:46:15,060
key and authors have shown a similar

1151
00:46:15,060 --> 00:46:17,280
level of security bound as secretive HDs

1152
00:46:17,280 --> 00:46:19,140
along with that authors have also

1153
00:46:19,140 --> 00:46:21,599
proposed two gate variants of some ecbc

1154
00:46:21,599 --> 00:46:23,400
P math plus and three kf9 and like mac

1155
00:46:23,400 --> 00:46:25,319
plus construction and showed a similar

1156
00:46:25,319 --> 00:46:26,940
twin by three bit security Bound for

1157
00:46:26,940 --> 00:46:29,760
each of the constructions

1158
00:46:29,760 --> 00:46:32,400
so till now the summary is that all

1159
00:46:32,400 --> 00:46:34,800
these constructions namely some ecbc or

1160
00:46:34,800 --> 00:46:37,440
tmac plus ckf9 like that plus all these

1161
00:46:37,440 --> 00:46:38,940
constructions here are similar design

1162
00:46:38,940 --> 00:46:41,220
principle and the hash key is

1163
00:46:41,220 --> 00:46:42,599
independent to the block size of key

1164
00:46:42,599 --> 00:46:44,280
which is

1165
00:46:44,280 --> 00:46:46,200
and all of them have been proven secured

1166
00:46:46,200 --> 00:46:49,079
up to n by three bits however all the

1167
00:46:49,079 --> 00:46:50,700
constructions have been proven secure

1168
00:46:50,700 --> 00:46:52,500
under the standard model and in the

1169
00:46:52,500 --> 00:46:54,540
single user setting

1170
00:46:54,540 --> 00:46:57,119
in crypto 18 learning at all have shown

1171
00:46:57,119 --> 00:46:59,520
an attack on dbhds with very complexity

1172
00:46:59,520 --> 00:47:02,520
at least two power three and by 4. and

1173
00:47:02,520 --> 00:47:05,880
in crypto sorry 20 Kim at all have

1174
00:47:05,880 --> 00:47:07,920
improved the security bound of dvhds

1175
00:47:07,920 --> 00:47:10,140
from 12 by 3 bits to three and by 4 bits

1176
00:47:10,140 --> 00:47:12,720
so together the two results that means

1177
00:47:12,720 --> 00:47:14,700
the results of later at all in crypto 18

1178
00:47:14,700 --> 00:47:18,000
and came at all in Europe 20. the dbhds

1179
00:47:18,000 --> 00:47:19,859
has been proven to be proven to achieve

1180
00:47:19,859 --> 00:47:23,540
a tight secret amount of 3n by 4 bit

1181
00:47:23,540 --> 00:47:26,520
nevertheless this cons so tbhd is

1182
00:47:26,520 --> 00:47:27,900
construction till now has been proven

1183
00:47:27,900 --> 00:47:29,400
secure under the standard model

1184
00:47:29,400 --> 00:47:31,020
assumption and in the single in the

1185
00:47:31,020 --> 00:47:32,880
setting so now our national equation can

1186
00:47:32,880 --> 00:47:34,920
be asked that what can we say about the

1187
00:47:34,920 --> 00:47:37,200
security of dbhds in the multi-user

1188
00:47:37,200 --> 00:47:40,079
setup so before we go into that let me

1189
00:47:40,079 --> 00:47:41,700
explain the what is the multi-user

1190
00:47:41,700 --> 00:47:44,520
setting so the multi-user prf came in

1191
00:47:44,520 --> 00:47:46,560
the standard model looks like this that

1192
00:47:46,560 --> 00:47:49,319
at the adversary has not only accessed

1193
00:47:49,319 --> 00:47:51,540
to a single instance of the actual

1194
00:47:51,540 --> 00:47:53,640
construction but it has access to U

1195
00:47:53,640 --> 00:47:54,960
independent instance of the construction

1196
00:47:54,960 --> 00:47:57,540
so in the real world so address 3 has

1197
00:47:57,540 --> 00:48:00,119
access to U independent instances of the

1198
00:48:00,119 --> 00:48:02,400
actual constructions namely CE so

1199
00:48:02,400 --> 00:48:04,319
basically the construction C is built on

1200
00:48:04,319 --> 00:48:06,359
top of block cycle a that's why it is

1201
00:48:06,359 --> 00:48:09,780
denoted as CE and in the ideal world the

1202
00:48:09,780 --> 00:48:11,640
adversary has access to U independent

1203
00:48:11,640 --> 00:48:13,920
instances of random function and then

1204
00:48:13,920 --> 00:48:15,900
the adversary has to tell that which

1205
00:48:15,900 --> 00:48:18,180
wall it has interacted with

1206
00:48:18,180 --> 00:48:20,099
that denotes or that defines the

1207
00:48:20,099 --> 00:48:22,680
advantage of the algorithm a so this is

1208
00:48:22,680 --> 00:48:24,300
defined in the standard model in the

1209
00:48:24,300 --> 00:48:27,119
ideal Cipher model uh adversaries not

1210
00:48:27,119 --> 00:48:28,440
only have access to the actual

1211
00:48:28,440 --> 00:48:30,540
construction but it can also query to

1212
00:48:30,540 --> 00:48:32,400
the underlying primitive fee

1213
00:48:32,400 --> 00:48:34,619
so in that setting again we can Define

1214
00:48:34,619 --> 00:48:37,680
the advantage of algorithm a in the

1215
00:48:37,680 --> 00:48:39,660
ideal Cipher model namely uh

1216
00:48:39,660 --> 00:48:41,220
distinguishing advantage in

1217
00:48:41,220 --> 00:48:42,660
distinguishing the real world from the

1218
00:48:42,660 --> 00:48:44,520
ideal one

1219
00:48:44,520 --> 00:48:47,099
okay so uh this is our trivial

1220
00:48:47,099 --> 00:48:48,480
relationship between the single user

1221
00:48:48,480 --> 00:48:49,619
security and the multi-user security

1222
00:48:49,619 --> 00:48:52,319
namely if you have a construction whose

1223
00:48:52,319 --> 00:48:54,180
single user Advantage is like Epsilon

1224
00:48:54,180 --> 00:48:55,920
then you can trivially deduce the

1225
00:48:55,920 --> 00:48:57,300
multi-user advantage of the construction

1226
00:48:57,300 --> 00:49:00,359
by an upper bound which is basically the

1227
00:49:00,359 --> 00:49:02,339
number of users times the single user

1228
00:49:02,339 --> 00:49:04,079
Advantage which is like Epsilon so U

1229
00:49:04,079 --> 00:49:06,599
times Epsilon so for example if you

1230
00:49:06,599 --> 00:49:08,700
consider the prf advantage of double

1231
00:49:08,700 --> 00:49:10,920
block hatch the sum then as we know that

1232
00:49:10,920 --> 00:49:12,480
the single user prf advantage of double

1233
00:49:12,480 --> 00:49:14,280
block hql sum is Q to the four over

1234
00:49:14,280 --> 00:49:16,680
three over two power n so as a result of

1235
00:49:16,680 --> 00:49:18,300
that if you just plug in this relation

1236
00:49:18,300 --> 00:49:20,280
then you can easily compute the

1237
00:49:20,280 --> 00:49:22,740
multi-user prf advantage of dbhds which

1238
00:49:22,740 --> 00:49:25,200
is U times U to the power 4 by 3 over to

1239
00:49:25,200 --> 00:49:27,660
power n so this bound is more or less

1240
00:49:27,660 --> 00:49:29,579
good when the number of users is less

1241
00:49:29,579 --> 00:49:32,520
but when the number of of users reaches

1242
00:49:32,520 --> 00:49:34,380
to the number of queries then the when

1243
00:49:34,380 --> 00:49:36,599
EQ is basically ordered of Q then the

1244
00:49:36,599 --> 00:49:38,579
bound degrades to Q to the seven by

1245
00:49:38,579 --> 00:49:40,800
three over two power n which is worse

1246
00:49:40,800 --> 00:49:42,660
than the birthday part so therefore in

1247
00:49:42,660 --> 00:49:44,220
order to analyze the security of a

1248
00:49:44,220 --> 00:49:46,200
double forecast to some construction or

1249
00:49:46,200 --> 00:49:48,180
any side of construction then the

1250
00:49:48,180 --> 00:49:49,859
trivial reduction actually might not

1251
00:49:49,859 --> 00:49:51,660
give you a desired bound so as a result

1252
00:49:51,660 --> 00:49:53,579
of that we actually recovered a direct

1253
00:49:53,579 --> 00:49:55,560
analysis of the double

1254
00:49:55,560 --> 00:49:57,359
blockchain in the multi-user setting

1255
00:49:57,359 --> 00:50:00,300
then relying on auxiliary production

1256
00:50:00,300 --> 00:50:02,880
so in order to study the multi-user

1257
00:50:02,880 --> 00:50:04,380
security of the cons of dbhds

1258
00:50:04,380 --> 00:50:06,660
construction Shell at all have you know

1259
00:50:06,660 --> 00:50:10,319
started uh the work so they have started

1260
00:50:10,319 --> 00:50:12,240
analyzing the two Key tbhds Construction

1261
00:50:12,240 --> 00:50:14,220
in the multi-user setup under the under

1262
00:50:14,220 --> 00:50:16,400
ideal Cipher motor absorption

1263
00:50:16,400 --> 00:50:19,859
and authors have shown that two dbhds

1264
00:50:19,859 --> 00:50:21,720
construction is secured up to two to the

1265
00:50:21,720 --> 00:50:23,640
two n by three queries in the multi-user

1266
00:50:23,640 --> 00:50:25,140
setting under the ideal set from

1267
00:50:25,140 --> 00:50:27,060
assumption and authors have also

1268
00:50:27,060 --> 00:50:29,400
instantiated two quick dbhds with 2K

1269
00:50:29,400 --> 00:50:32,280
some ecbc two kpma plus 2K F9 2K like

1270
00:50:32,280 --> 00:50:34,560
plus which are the two key variants of

1271
00:50:34,560 --> 00:50:36,420
the wastage construction and showed

1272
00:50:36,420 --> 00:50:38,400
their 12x3 bit multi-user Security in

1273
00:50:38,400 --> 00:50:41,220
ideal server model however some of their

1274
00:50:41,220 --> 00:50:43,440
results have been pointed out as flawed

1275
00:50:43,440 --> 00:50:45,900
which was pointed out recently by go and

1276
00:50:45,900 --> 00:50:47,160
walk

1277
00:50:47,160 --> 00:50:49,920
so the goal at one pointed out the

1278
00:50:49,920 --> 00:50:51,720
following flaw of the constructions

1279
00:50:51,720 --> 00:50:53,640
proposed by Shin at all with the

1280
00:50:53,640 --> 00:50:54,900
security Bond of the construction was

1281
00:50:54,900 --> 00:50:56,460
shown to be incorrect when the

1282
00:50:56,460 --> 00:50:57,780
underlying double block hash function

1283
00:50:57,780 --> 00:50:59,760
was instantiated with two independent

1284
00:50:59,760 --> 00:51:01,559
instances of polyh function and two

1285
00:51:01,559 --> 00:51:04,319
independent instances of cbcs function

1286
00:51:04,319 --> 00:51:06,660
and the flow basically cropped up

1287
00:51:06,660 --> 00:51:08,460
because the authors have infinitely

1288
00:51:08,460 --> 00:51:09,960
argued the probability of

1289
00:51:09,960 --> 00:51:11,880
cross-collision event so cross Collision

1290
00:51:11,880 --> 00:51:14,160
event means when you have the sigma I

1291
00:51:14,160 --> 00:51:15,960
equal to Theta J and sigma J equal to

1292
00:51:15,960 --> 00:51:18,180
Theta I for two different queries I and

1293
00:51:18,180 --> 00:51:19,079
J

1294
00:51:19,079 --> 00:51:21,300
and other stuff assumed that these two

1295
00:51:21,300 --> 00:51:24,059
events are independent whereas for the

1296
00:51:24,059 --> 00:51:25,800
poly hash and the CBC hash function

1297
00:51:25,800 --> 00:51:27,960
these two events have been shown to be

1298
00:51:27,960 --> 00:51:30,000
not independent so as a result of that

1299
00:51:30,000 --> 00:51:32,400
their bound does not hold true for these

1300
00:51:32,400 --> 00:51:33,900
two instantiations

1301
00:51:33,900 --> 00:51:37,460
so upon uh you know finding out the flow

1302
00:51:37,460 --> 00:51:40,440
Goa and one have notified the authorship

1303
00:51:40,440 --> 00:51:42,599
at all and they have revised their paper

1304
00:51:42,599 --> 00:51:44,819
based on the findings of the uh based on

1305
00:51:44,819 --> 00:51:46,920
the findings of go and walk and then

1306
00:51:46,920 --> 00:51:48,960
they revise their paper and introduce

1307
00:51:48,960 --> 00:51:50,400
another event which is called the cover

1308
00:51:50,400 --> 00:51:52,079
free event the notion which was

1309
00:51:52,079 --> 00:51:55,500
introduced by that in fsc20

1310
00:51:55,500 --> 00:51:57,599
so the summary is that Shin at all

1311
00:51:57,599 --> 00:51:59,160
proved 12 by 3 bit multi uses security

1312
00:51:59,160 --> 00:52:01,200
of 2K Divas in the ideal software model

1313
00:52:01,200 --> 00:52:03,059
whereas the initial version of the paper

1314
00:52:03,059 --> 00:52:05,400
contained a flower analysis but later on

1315
00:52:05,400 --> 00:52:08,460
it was collected by the authors but hold

1316
00:52:08,460 --> 00:52:11,220
on there are more to exclude so the

1317
00:52:11,220 --> 00:52:13,079
security analysis of the instantiations

1318
00:52:13,079 --> 00:52:15,540
which is proposed by shared at all have

1319
00:52:15,540 --> 00:52:16,800
not been done in the ideal software

1320
00:52:16,800 --> 00:52:19,079
model and moreover the good transcript

1321
00:52:19,079 --> 00:52:20,700
analysis for proving the security of

1322
00:52:20,700 --> 00:52:23,099
tphts is incorrect as they have used the

1323
00:52:23,099 --> 00:52:24,660
sum of permutation result over 0 or

1324
00:52:24,660 --> 00:52:26,520
power n whereas it should have been

1325
00:52:26,520 --> 00:52:29,700
analyzed uh in the in the over a

1326
00:52:29,700 --> 00:52:31,740
restricted set that means we should have

1327
00:52:31,740 --> 00:52:33,300
analyzed the summer permutation result

1328
00:52:33,300 --> 00:52:36,380
over illustrator set

1329
00:52:37,980 --> 00:52:40,619
so here comes our result that we have

1330
00:52:40,619 --> 00:52:42,900
shown the multiple security of 2K dbhds

1331
00:52:42,900 --> 00:52:44,760
up to 2 to the three n by four queries

1332
00:52:44,760 --> 00:52:46,559
in the ideal server model

1333
00:52:46,559 --> 00:52:48,480
but in order to prove the security we

1334
00:52:48,480 --> 00:52:49,740
have a couple of assumptions the first

1335
00:52:49,740 --> 00:52:52,020
assumption is that the underlying uh

1336
00:52:52,020 --> 00:52:54,000
hash function has to be good

1337
00:52:54,000 --> 00:52:55,920
so here we have issued that the hash

1338
00:52:55,920 --> 00:52:57,420
function is basically the concatenation

1339
00:52:57,420 --> 00:53:00,180
of two n bit hash function namely H1 and

1340
00:53:00,180 --> 00:53:02,040
H2 and we call the double block hash

1341
00:53:02,040 --> 00:53:04,260
function H to be good if it satisfies

1342
00:53:04,260 --> 00:53:06,599
the following condition namely each of

1343
00:53:06,599 --> 00:53:08,579
the each of the in-bit hash functions

1344
00:53:08,579 --> 00:53:10,559
has to be individually Universal and

1345
00:53:10,559 --> 00:53:12,839
regular and the probability of the Cross

1346
00:53:12,839 --> 00:53:15,119
Collision event between H1 and H2 should

1347
00:53:15,119 --> 00:53:17,339
be zero and then we have instantiated

1348
00:53:17,339 --> 00:53:18,599
the good double block hash function

1349
00:53:18,599 --> 00:53:20,460
through two independent instances of

1350
00:53:20,460 --> 00:53:21,900
poly hash function using the terminal

1351
00:53:21,900 --> 00:53:23,700
separation technique and we have also

1352
00:53:23,700 --> 00:53:25,980
shown that the instantiated kind of

1353
00:53:25,980 --> 00:53:27,660
constructions achieved three and my four

1354
00:53:27,660 --> 00:53:29,040
bit multi user Security in the ideal

1355
00:53:29,040 --> 00:53:30,900
server model

1356
00:53:30,900 --> 00:53:33,119
just a quick clips of the security proof

1357
00:53:33,119 --> 00:53:35,579
so in order to prove the security we

1358
00:53:35,579 --> 00:53:37,559
actually is without it to the edge

1359
00:53:37,559 --> 00:53:39,059
coefficient technique which is a popular

1360
00:53:39,059 --> 00:53:41,099
framework for proving the distinguishing

1361
00:53:41,099 --> 00:53:43,740
ability of two random system uh where we

1362
00:53:43,740 --> 00:53:46,559
actually need to consider the bad events

1363
00:53:46,559 --> 00:53:48,780
and we have to bound the probability of

1364
00:53:48,780 --> 00:53:50,339
the radicals in the ideal world and

1365
00:53:50,339 --> 00:53:51,780
finally for the good transcript we have

1366
00:53:51,780 --> 00:53:53,579
to lower bound the ratio of the real to

1367
00:53:53,579 --> 00:53:55,319
Ideal interpolation durability for the

1368
00:53:55,319 --> 00:53:58,380
good transcript okay so uh we started

1369
00:53:58,380 --> 00:54:00,660
with the variables so first of all we

1370
00:54:00,660 --> 00:54:04,380
have to identify the cycle uh in the in

1371
00:54:04,380 --> 00:54:07,079
this double Sigma and Theta so we need

1372
00:54:07,079 --> 00:54:09,180
to about a cycle of leaves two that

1373
00:54:09,180 --> 00:54:10,920
means for two different queries I and J

1374
00:54:10,920 --> 00:54:13,140
uh if there's a simultaneous Collision

1375
00:54:13,140 --> 00:54:14,700
in the Sigma Theta value namely Sigma

1376
00:54:14,700 --> 00:54:16,140
equal to Sigma J and Theta equal to

1377
00:54:16,140 --> 00:54:17,700
Theta J

1378
00:54:17,700 --> 00:54:20,700
uh we call this to the events to be back

1379
00:54:20,700 --> 00:54:23,579
if Sigma I and sigma T collides for two

1380
00:54:23,579 --> 00:54:25,740
different queries as well as their tag

1381
00:54:25,740 --> 00:54:27,599
also collides similarly for two

1382
00:54:27,599 --> 00:54:29,160
different queries if their Theta value

1383
00:54:29,160 --> 00:54:31,319
collides are T colites So if this

1384
00:54:31,319 --> 00:54:33,000
basically happens then that basically

1385
00:54:33,000 --> 00:54:34,020
leads to the permutation in

1386
00:54:34,020 --> 00:54:36,500
compatibility

1387
00:54:36,599 --> 00:54:39,540
however we have to allow the Collision

1388
00:54:39,540 --> 00:54:41,339
of Sigma and the Collision of theta

1389
00:54:41,339 --> 00:54:43,859
right but we do not allow it to be very

1390
00:54:43,859 --> 00:54:46,500
big right so we actually need to have a

1391
00:54:46,500 --> 00:54:48,059
bound on the number of colliding pairs

1392
00:54:48,059 --> 00:54:50,160
of Sigma and Theta namely if the number

1393
00:54:50,160 --> 00:54:52,079
of collating pairs in the sigma values

1394
00:54:52,079 --> 00:54:54,480
reaches Q to the power 2 by 3 or if the

1395
00:54:54,480 --> 00:54:55,859
number of colliding pairs in the Theta

1396
00:54:55,859 --> 00:54:57,420
values reaches Q to the power 2 by 3

1397
00:54:57,420 --> 00:54:59,760
then we call it to be that

1398
00:54:59,760 --> 00:55:02,339
finally we have to also restrict the

1399
00:55:02,339 --> 00:55:05,339
number of other length of the path right

1400
00:55:05,339 --> 00:55:06,960
we call it the alternating path of lead

1401
00:55:06,960 --> 00:55:09,780
4 which says if there is a quadruple of

1402
00:55:09,780 --> 00:55:13,380
queries namely i j k and l such that the

1403
00:55:13,380 --> 00:55:15,420
sigma values between the ith and J query

1404
00:55:15,420 --> 00:55:17,819
collides the Theta values between the Z

1405
00:55:17,819 --> 00:55:19,920
and kth equali are the sigma value

1406
00:55:19,920 --> 00:55:21,839
between the KH and L square equalized

1407
00:55:21,839 --> 00:55:24,420
right so if you just draw it using a

1408
00:55:24,420 --> 00:55:26,460
vertices that the vertices represent the

1409
00:55:26,460 --> 00:55:28,260
Sigma Theta value then you can easily

1410
00:55:28,260 --> 00:55:31,220
find it basically completes a path that

1411
00:55:31,220 --> 00:55:33,780
edges of the path basically alternates

1412
00:55:33,780 --> 00:55:37,559
between blue and green

1413
00:55:37,559 --> 00:55:40,160
similarly we have a symmetrical event

1414
00:55:40,160 --> 00:55:43,140
where we have a quadruple of queries

1415
00:55:43,140 --> 00:55:44,940
where the Theta value between ith and J

1416
00:55:44,940 --> 00:55:46,200
is query collides the sigma value

1417
00:55:46,200 --> 00:55:47,819
between jth and kth follicularized and

1418
00:55:47,819 --> 00:55:51,119
the Theta value between pH and LS

1419
00:55:51,119 --> 00:55:52,800
so all these bad events basically

1420
00:55:52,800 --> 00:55:54,599
related to the construction queries but

1421
00:55:54,599 --> 00:55:57,240
we also need to consider the collision

1422
00:55:57,240 --> 00:56:00,059
between the ideal Cipher query so namely

1423
00:56:00,059 --> 00:56:02,640
we need to identify or we need to

1424
00:56:02,640 --> 00:56:04,920
consider the key input condition in the

1425
00:56:04,920 --> 00:56:07,079
ideal sulfur queries to be bad namely if

1426
00:56:07,079 --> 00:56:09,540
there is a condition between the ith the

1427
00:56:09,540 --> 00:56:11,520
between the key of the IIT user namely k

1428
00:56:11,520 --> 00:56:13,559
i which collides with the ideal Cipher

1429
00:56:13,559 --> 00:56:15,839
tjj and their corresponding Sigma value

1430
00:56:15,839 --> 00:56:17,040
collides with the ideal set for

1431
00:56:17,040 --> 00:56:20,160
primitive query similarly uh if uh the

1432
00:56:20,160 --> 00:56:22,920
ith user key equalizes with the ideal

1433
00:56:22,920 --> 00:56:25,440
such a t j and their Theta value also

1434
00:56:25,440 --> 00:56:27,660
collides with the ideal size

1435
00:56:27,660 --> 00:56:29,700
we also need to consider the key input

1436
00:56:29,700 --> 00:56:31,440
Collision in construction queries namely

1437
00:56:31,440 --> 00:56:34,020
for two different users IIT user subject

1438
00:56:34,020 --> 00:56:35,880
user they are key columns as well as

1439
00:56:35,880 --> 00:56:38,099
their Sigma value collects similarly for

1440
00:56:38,099 --> 00:56:40,740
the Theta case as well that for ith and

1441
00:56:40,740 --> 00:56:43,319
jth user they are key collides and their

1442
00:56:43,319 --> 00:56:45,960
Theta value also collides and finally we

1443
00:56:45,960 --> 00:56:47,700
do not need the simultaneous collision

1444
00:56:47,700 --> 00:56:49,859
between the block Cipher key and the

1445
00:56:49,859 --> 00:56:51,839
hash key of two different users namely

1446
00:56:51,839 --> 00:56:54,240
for the ith user and the jth user if

1447
00:56:54,240 --> 00:56:56,400
their block sulfuricolides and their

1448
00:56:56,400 --> 00:56:58,260
hash key collides then we call it to be

1449
00:56:58,260 --> 00:56:59,579
bad

1450
00:56:59,579 --> 00:57:02,339
finally summing up all these bad events

1451
00:57:02,339 --> 00:57:05,579
we have bounded the probability of this

1452
00:57:05,579 --> 00:57:07,680
particles in the ideal world and if you

1453
00:57:07,680 --> 00:57:08,940
assume that the regular and the

1454
00:57:08,940 --> 00:57:10,380
universal advantage of the underlying

1455
00:57:10,380 --> 00:57:12,780
hash function is Epsilon then it roughly

1456
00:57:12,780 --> 00:57:14,579
achieves Q to the power 4 by 3 by 2

1457
00:57:14,579 --> 00:57:17,819
power n security Bound in in the the bad

1458
00:57:17,819 --> 00:57:20,700
case so now if you just take a good

1459
00:57:20,700 --> 00:57:23,460
transcript which does not satisfy all

1460
00:57:23,460 --> 00:57:25,859
the previous listed bad events then we

1461
00:57:25,859 --> 00:57:27,480
analyzed the real interpolation

1462
00:57:27,480 --> 00:57:28,920
probability of that good transcript

1463
00:57:28,920 --> 00:57:31,020
using the mirror Theory result which was

1464
00:57:31,020 --> 00:57:33,540
developed by cream at all in Europe 20

1465
00:57:33,540 --> 00:57:35,520
to derive the desired three and by 4 bit

1466
00:57:35,520 --> 00:57:36,839
bound

1467
00:57:36,839 --> 00:57:39,000
so to wrap up my talk so we have

1468
00:57:39,000 --> 00:57:40,140
improved the multinational security

1469
00:57:40,140 --> 00:57:42,780
bound of dbhds construction from 2N by

1470
00:57:42,780 --> 00:57:45,059
three bits to Chain by four bits uh due

1471
00:57:45,059 --> 00:57:46,740
to the result of limited at all at

1472
00:57:46,740 --> 00:57:50,819
crypto 20 2018 our proven bound is tight

1473
00:57:50,819 --> 00:57:53,339
however our result does not address the

1474
00:57:53,339 --> 00:57:54,660
block cycle this double block hash

1475
00:57:54,660 --> 00:57:56,819
function namely if you just instantiate

1476
00:57:56,819 --> 00:57:59,400
the underlying hash function using a

1477
00:57:59,400 --> 00:58:01,980
block Cipher then our security result

1478
00:58:01,980 --> 00:58:04,500
does not you know directly is applicable

1479
00:58:04,500 --> 00:58:08,520
to bound the double block hash function

1480
00:58:08,520 --> 00:58:10,800
which is entirely built up with a block

1481
00:58:10,800 --> 00:58:13,800
Cipher uh as a result our result cannot

1482
00:58:13,800 --> 00:58:15,300
be applied for approving The Strain by 4

1483
00:58:15,300 --> 00:58:16,859
bit much is a security of block size for

1484
00:58:16,859 --> 00:58:18,480
this dbsts Construction

1485
00:58:18,480 --> 00:58:20,640
so to prove the security of such dbhds

1486
00:58:20,640 --> 00:58:22,859
construction one needs to and drive the

1487
00:58:22,859 --> 00:58:25,020
regular and the universal advantage of

1488
00:58:25,020 --> 00:58:26,640
underlying block cipherbase double block

1489
00:58:26,640 --> 00:58:27,960
hash function in the idle Cipher model

1490
00:58:27,960 --> 00:58:30,059
which we believe is a quite challenging

1491
00:58:30,059 --> 00:58:31,140
open problem

1492
00:58:31,140 --> 00:58:34,020
and that's all thank you I'm happy to

1493
00:58:34,020 --> 00:58:36,619
take any questions

1494
00:58:43,799 --> 00:58:47,160
thank you very much so uh questions or

1495
00:58:47,160 --> 00:58:51,200
comments from Kobe yes

1496
00:58:52,920 --> 00:58:55,260
hello thank you for the talk so I have

1497
00:58:55,260 --> 00:58:57,000
one question maybe I actually have two

1498
00:58:57,000 --> 00:58:58,799
questions but they are related

1499
00:58:58,799 --> 00:58:59,579
um

1500
00:58:59,579 --> 00:59:01,140
yes now I'm actually talking to you

1501
00:59:01,140 --> 00:59:02,700
because your face is here that's uh

1502
00:59:02,700 --> 00:59:06,000
convenient and so first question is why

1503
00:59:06,000 --> 00:59:07,740
actually do you look at the ideal Cipher

1504
00:59:07,740 --> 00:59:10,799
modeler not the standard model

1505
00:59:10,799 --> 00:59:14,220
well uh the security of dphgs

1506
00:59:14,220 --> 00:59:15,839
construction has already been proven in

1507
00:59:15,839 --> 00:59:17,339
the standard model and you cannot do it

1508
00:59:17,339 --> 00:59:19,440
better than cnx4 because it's already a

1509
00:59:19,440 --> 00:59:22,079
tight bound so people are really

1510
00:59:22,079 --> 00:59:24,359
interested to look at the ideal Cipher

1511
00:59:24,359 --> 00:59:26,160
model I mean if the adversary has access

1512
00:59:26,160 --> 00:59:28,260
to the block Cipher then how the

1513
00:59:28,260 --> 00:59:29,880
security boundary grades of the double

1514
00:59:29,880 --> 00:59:32,220
block Heights and some construction

1515
00:59:32,220 --> 00:59:33,780
so in a standard model there is already

1516
00:59:33,780 --> 00:59:35,760
a 3n over four bound

1517
00:59:35,760 --> 00:59:38,099
yes

1518
00:59:38,099 --> 00:59:40,619
and basically as I've shown that if you

1519
00:59:40,619 --> 00:59:43,200
have a uh so basically we need to you

1520
00:59:43,200 --> 00:59:45,540
know analyze the construction in the

1521
00:59:45,540 --> 00:59:49,079
multi-user setup so you cannot really uh

1522
00:59:49,079 --> 00:59:51,359
apply the genetic reduction that means

1523
00:59:51,359 --> 00:59:53,460
you cannot just multiply the number of

1524
00:59:53,460 --> 00:59:55,140
users with a single user Advantage

1525
00:59:55,140 --> 00:59:57,780
because that will give you a worse bound

1526
00:59:57,780 --> 01:00:00,299
than the but the bound so you need a

1527
01:00:00,299 --> 01:00:02,280
direct analysis uh of the of the

1528
01:00:02,280 --> 01:00:04,020
construction using the multi-user setup

1529
01:00:04,020 --> 01:00:07,200
and we have assumed that okay if the in

1530
01:00:07,200 --> 01:00:09,540
fact the adversary can you know uh

1531
01:00:09,540 --> 01:00:12,839
evaluate the block size or in its own so

1532
01:00:12,839 --> 01:00:15,000
what will happen if the block Cipher is

1533
01:00:15,000 --> 01:00:17,760
evaluated by the adversary then then uh

1534
01:00:17,760 --> 01:00:19,500
how the security of double block has the

1535
01:00:19,500 --> 01:00:21,480
sum degrades

1536
01:00:21,480 --> 01:00:23,760
okay yes yes so this generic reduction

1537
01:00:23,760 --> 01:00:25,740
that would work for a standard model

1538
01:00:25,740 --> 01:00:27,420
just doesn't work for the ideal Cipher

1539
01:00:27,420 --> 01:00:30,240
model so that was was my second question

1540
01:00:30,240 --> 01:00:32,640
but okay so then I don't have other I

1541
01:00:32,640 --> 01:00:33,960
don't have a second question thank you

1542
01:00:33,960 --> 01:00:35,579
okay thank you thank you thanks for the

1543
01:00:35,579 --> 01:00:37,760
question

1544
01:00:38,460 --> 01:00:42,200
get more questions from Kobe

1545
01:00:45,960 --> 01:00:48,559
Gene

1546
01:00:53,540 --> 01:00:58,140
the chat is silent maybe uh I have one

1547
01:00:58,140 --> 01:01:00,839
uh can you go back to the two pages

1548
01:01:00,839 --> 01:01:05,119
before showing your bounds

1549
01:01:06,359 --> 01:01:08,880
yeah that one so uh

1550
01:01:08,880 --> 01:01:12,480
can you uh clarify which one is

1551
01:01:12,480 --> 01:01:16,799
dominating uh term uh that shows three

1552
01:01:16,799 --> 01:01:20,420
and over four bit security

1553
01:01:20,880 --> 01:01:23,660
so there are many terms there and yeah

1554
01:01:23,660 --> 01:01:25,859
so first of all first of all first of

1555
01:01:25,859 --> 01:01:28,980
all I have assumed that K is greater

1556
01:01:28,980 --> 01:01:30,540
than n

1557
01:01:30,540 --> 01:01:34,880
the key size is at least the block size

1558
01:01:34,880 --> 01:01:39,660
so I think uh okay

1559
01:01:39,660 --> 01:01:43,140
and Q and P roughly of the same order so

1560
01:01:43,140 --> 01:01:46,859
it can uh I I do not assume or I have

1561
01:01:46,859 --> 01:01:49,980
not assumed that P can go up to two to

1562
01:01:49,980 --> 01:01:53,640
the power 2 to the K so the bound on P

1563
01:01:53,640 --> 01:01:58,140
is roughly uh 2 power 3 K by 4 right and

1564
01:01:58,140 --> 01:01:59,940
similarly the bound on Q is roughly

1565
01:01:59,940 --> 01:02:02,040
about c n by four but if you assume the

1566
01:02:02,040 --> 01:02:04,680
bound of P which is which goes up to two

1567
01:02:04,680 --> 01:02:07,440
to three k by 4 then this bound four Q

1568
01:02:07,440 --> 01:02:09,599
to the power 4 by 3 Epsilon where

1569
01:02:09,599 --> 01:02:12,180
Epsilon is Q to the N so that is uh

1570
01:02:12,180 --> 01:02:13,440
dominating now

1571
01:02:13,440 --> 01:02:14,819
okay

1572
01:02:14,819 --> 01:02:19,040
okay thank you and more

1573
01:02:19,680 --> 01:02:22,098
questions

1574
01:02:23,520 --> 01:02:26,160
okay let's thank the speaker

1575
01:02:26,160 --> 01:02:29,720
thank you thank you

1576
01:02:30,420 --> 01:02:33,000
and we now have a break and we will

1577
01:02:33,000 --> 01:02:36,240
start the next session at four in Kobe

1578
01:02:36,240 --> 01:02:39,799
and three in Beijing

