1
00:00:01,680 --> 00:00:03,360
hi and thank you for listening to this

2
00:00:03,360 --> 00:00:05,359
presentation about collision attacks on

3
00:00:05,359 --> 00:00:07,359
small ketchup

4
00:00:07,359 --> 00:00:08,960
this work was done together with jan

5
00:00:08,960 --> 00:00:12,880
rotella at versailles university

6
00:00:12,880 --> 00:00:14,960
ketchup is a harsh function designed by

7
00:00:14,960 --> 00:00:17,039
guido bertoni joanne de men miguel

8
00:00:17,039 --> 00:00:18,960
peters and gilvan ash

9
00:00:18,960 --> 00:00:21,840
in 2012 four of its instances were

10
00:00:21,840 --> 00:00:24,560
standardized under the name chathri

11
00:00:24,560 --> 00:00:26,480
it uses a permutation-based model of

12
00:00:26,480 --> 00:00:29,199
operation called the sponge construction

13
00:00:29,199 --> 00:00:30,880
the underlying permutation is called

14
00:00:30,880 --> 00:00:33,360
ketchup fb where b is the state length

15
00:00:33,360 --> 00:00:34,559
in bits

16
00:00:34,559 --> 00:00:37,200
for standardized instances the state has

17
00:00:37,200 --> 00:00:39,440
length 1 600 bits

18
00:00:39,440 --> 00:00:41,360
but today we are going to focus on

19
00:00:41,360 --> 00:00:43,760
so-called small kit check where the

20
00:00:43,760 --> 00:00:47,920
state has length at most 400 bits

21
00:00:47,920 --> 00:00:50,239
so what motivated our analysis of small

22
00:00:50,239 --> 00:00:51,360
kit check

23
00:00:51,360 --> 00:00:54,719
first the ketchup authors have organized

24
00:00:54,719 --> 00:00:56,480
cryptanalysis challenges on a

25
00:00:56,480 --> 00:00:59,199
round-reduced instances

26
00:00:59,199 --> 00:01:01,280
commenting on the results of this

27
00:01:01,280 --> 00:01:03,760
contest they they noticed that the

28
00:01:03,760 --> 00:01:06,880
smaller versions seemed harder to break

29
00:01:06,880 --> 00:01:09,600
further small sketchup hash functions

30
00:01:09,600 --> 00:01:12,000
have been proposed for uses in

31
00:01:12,000 --> 00:01:17,040
constrained environments such as rfid

32
00:01:17,360 --> 00:01:19,200
here is a tab which sums up the

33
00:01:19,200 --> 00:01:21,680
published collision attacks on keycheck

34
00:01:21,680 --> 00:01:23,200
hash functions

35
00:01:23,200 --> 00:01:25,360
as you can see analysis so far have

36
00:01:25,360 --> 00:01:28,080
mainly focused on standardized and thus

37
00:01:28,080 --> 00:01:30,479
large kit check instances

38
00:01:30,479 --> 00:01:32,400
on the other hand for the smallest

39
00:01:32,400 --> 00:01:34,560
instances uh sorry for the smallest

40
00:01:34,560 --> 00:01:37,520
instant instance of the crunchy contest

41
00:01:37,520 --> 00:01:40,159
here on the bottom line only collisions

42
00:01:40,159 --> 00:01:42,159
with the permutation reduced to one

43
00:01:42,159 --> 00:01:46,159
round have been successfully attacked

44
00:01:47,200 --> 00:01:49,680
we designed the first attack on three

45
00:01:49,680 --> 00:01:51,600
small ketchup instances with the

46
00:01:51,600 --> 00:01:55,040
permutation reduced to two rounds

47
00:01:55,040 --> 00:01:57,600
our attack although not practical

48
00:01:57,600 --> 00:01:59,680
is significantly more efficient than the

49
00:01:59,680 --> 00:02:01,439
generic attack

50
00:02:01,439 --> 00:02:04,079
it has been implemented and verified on

51
00:02:04,079 --> 00:02:06,320
toy versions and the practical

52
00:02:06,320 --> 00:02:10,959
complexities obtained match the theory

53
00:02:12,319 --> 00:02:14,959
so first i'm going to give a brief

54
00:02:14,959 --> 00:02:18,080
overview of the mode on which keycheck

55
00:02:18,080 --> 00:02:22,200
is based the sponge construction

56
00:02:22,640 --> 00:02:24,160
the sponge construction uses a

57
00:02:24,160 --> 00:02:26,319
permutation f which operates on a state

58
00:02:26,319 --> 00:02:27,599
of length b

59
00:02:27,599 --> 00:02:29,920
the state is divided in two parts the

60
00:02:29,920 --> 00:02:32,640
first orbits are called the outer state

61
00:02:32,640 --> 00:02:34,879
and the last c bits are called the inner

62
00:02:34,879 --> 00:02:38,319
states r is called the rate and c is

63
00:02:38,319 --> 00:02:40,640
called the capacity

64
00:02:40,640 --> 00:02:42,800
the message is first padded then divided

65
00:02:42,800 --> 00:02:44,879
into blocks of our bits

66
00:02:44,879 --> 00:02:46,720
the message is then absorbed by zoring

67
00:02:46,720 --> 00:02:48,640
the message blocks to the outer part of

68
00:02:48,640 --> 00:02:50,480
the state with in-between applications

69
00:02:50,480 --> 00:02:51,599
of f

70
00:02:51,599 --> 00:02:53,840
next in a squeezing phase output blocks

71
00:02:53,840 --> 00:02:55,840
are generated by outputting the outer

72
00:02:55,840 --> 00:02:57,440
part of the state within between

73
00:02:57,440 --> 00:02:59,120
applications of f

74
00:02:59,120 --> 00:03:01,120
once a sufficient number of output

75
00:03:01,120 --> 00:03:03,200
blocks have been generated there are

76
00:03:03,200 --> 00:03:05,360
concatenated and translated to the

77
00:03:05,360 --> 00:03:09,200
desired output length which we call d

78
00:03:09,200 --> 00:03:11,040
so as you can see here getting a

79
00:03:11,040 --> 00:03:13,280
collision on the outputs may require

80
00:03:13,280 --> 00:03:15,360
getting a collision on several output

81
00:03:15,360 --> 00:03:18,159
blocks until their concatenation is big

82
00:03:18,159 --> 00:03:20,560
enough to be truncated to this desired

83
00:03:20,560 --> 00:03:22,080
output size

84
00:03:22,080 --> 00:03:24,640
and this can be tricky because of the

85
00:03:24,640 --> 00:03:26,879
in-between applications of the

86
00:03:26,879 --> 00:03:29,840
permutation f

87
00:03:29,920 --> 00:03:32,560
but in fact this is not the case for

88
00:03:32,560 --> 00:03:35,120
standardized instances

89
00:03:35,120 --> 00:03:37,760
this is because the output length is

90
00:03:37,760 --> 00:03:39,519
smaller than the rate

91
00:03:39,519 --> 00:03:41,840
which means that to get a

92
00:03:41,840 --> 00:03:44,560
collision on the output an attacker

93
00:03:44,560 --> 00:03:46,959
needs only getting a collision on one

94
00:03:46,959 --> 00:03:49,680
output block

95
00:03:49,760 --> 00:03:52,640
on the other hand

96
00:03:53,120 --> 00:03:55,280
on the other hand in the case of small

97
00:03:55,280 --> 00:03:58,159
instances the output length is bigger

98
00:03:58,159 --> 00:04:01,280
than the rate this means that to get a

99
00:04:01,280 --> 00:04:03,760
collision on the output an attacker

100
00:04:03,760 --> 00:04:06,239
needs getting several collision on

101
00:04:06,239 --> 00:04:08,959
output blocks

102
00:04:09,599 --> 00:04:13,599
instead the a good strategy is to focus

103
00:04:13,599 --> 00:04:16,238
on getting collisions on the inner part

104
00:04:16,238 --> 00:04:18,399
of the state or capacity part of the

105
00:04:18,399 --> 00:04:19,759
state

106
00:04:19,759 --> 00:04:22,560
we call such collisions inner collisions

107
00:04:22,560 --> 00:04:24,400
and we are going to show in a minute

108
00:04:24,400 --> 00:04:25,759
that

109
00:04:25,759 --> 00:04:28,160
inner collisions can really easily be

110
00:04:28,160 --> 00:04:29,759
propagated to

111
00:04:29,759 --> 00:04:31,919
all the output blocks and thus to the

112
00:04:31,919 --> 00:04:35,120
output of the hash function

113
00:04:35,120 --> 00:04:36,240
note that

114
00:04:36,240 --> 00:04:37,919
trying to get inner collisions would

115
00:04:37,919 --> 00:04:40,479
have been a very ambitious strategy in

116
00:04:40,479 --> 00:04:43,199
the case of the standardized instances

117
00:04:43,199 --> 00:04:46,160
because the capacity is twice as big as

118
00:04:46,160 --> 00:04:48,160
the output size

119
00:04:48,160 --> 00:04:50,800
on the other hand for small instances

120
00:04:50,800 --> 00:04:54,479
the capacity is equal to the output size

121
00:04:54,479 --> 00:04:56,400
which means that

122
00:04:56,400 --> 00:04:58,639
inner collisions have the same generic

123
00:04:58,639 --> 00:05:02,800
security as output collisions

124
00:05:06,800 --> 00:05:09,120
so how can inner collisions be

125
00:05:09,120 --> 00:05:12,960
propagated to all output blocks

126
00:05:12,960 --> 00:05:14,880
suppose you get an inner collision after

127
00:05:14,880 --> 00:05:16,800
absorbing the first i blocks of two

128
00:05:16,800 --> 00:05:19,360
distinct messages in this figure i

129
00:05:19,360 --> 00:05:21,600
equals three and the inner collision is

130
00:05:21,600 --> 00:05:22,800
in blue

131
00:05:22,800 --> 00:05:25,120
you can easily choose one last block to

132
00:05:25,120 --> 00:05:27,280
make sure that going into the next

133
00:05:27,280 --> 00:05:30,160
application of f not only the inner part

134
00:05:30,160 --> 00:05:32,400
of the states but the whole states will

135
00:05:32,400 --> 00:05:34,800
collide

136
00:05:34,800 --> 00:05:36,800
and thus the states will collide during

137
00:05:36,800 --> 00:05:38,720
the whole squeezing phase and thus so

138
00:05:38,720 --> 00:05:41,280
will the output blocks

139
00:05:41,280 --> 00:05:43,600
the inner collision is propagated to

140
00:05:43,600 --> 00:05:46,400
every output

141
00:05:49,759 --> 00:05:52,000
so at this point i can now give you a

142
00:05:52,000 --> 00:05:54,720
general description of the attack

143
00:05:54,720 --> 00:05:57,199
the general idea is to generate inner

144
00:05:57,199 --> 00:05:59,440
states that all belong to a proper

145
00:05:59,440 --> 00:06:02,479
subset of f2 to the power c and then to

146
00:06:02,479 --> 00:06:04,560
apply a classical birthday attack on

147
00:06:04,560 --> 00:06:07,280
this subset

148
00:06:07,280 --> 00:06:09,680
to generate said inner states we

149
00:06:09,680 --> 00:06:12,400
generate several random long messages

150
00:06:12,400 --> 00:06:15,600
and thus get random inner states

151
00:06:15,600 --> 00:06:18,160
then for each inner state which we call

152
00:06:18,160 --> 00:06:19,759
s in this figure

153
00:06:19,759 --> 00:06:21,759
we exploit the properties of the

154
00:06:21,759 --> 00:06:25,120
permutation f to find a message block m

155
00:06:25,120 --> 00:06:28,960
such that the inner state of fms belongs

156
00:06:28,960 --> 00:06:33,359
to a proper subset of f2 to the power c

157
00:06:33,520 --> 00:06:36,000
in order to understand how to generate a

158
00:06:36,000 --> 00:06:37,919
good message block for each random

159
00:06:37,919 --> 00:06:40,400
interstate produced we now need to

160
00:06:40,400 --> 00:06:43,840
understand how f works

161
00:06:44,080 --> 00:06:47,039
in the next section i'm first going to

162
00:06:47,039 --> 00:06:52,159
quickly describe how a ketchup f works

163
00:06:54,960 --> 00:06:57,520
so as you know f operates on a state of

164
00:06:57,520 --> 00:06:58,880
length b

165
00:06:58,880 --> 00:07:01,680
b is in fact dividable by 25 and the

166
00:07:01,680 --> 00:07:03,440
state can be represented in three

167
00:07:03,440 --> 00:07:04,720
dimensions

168
00:07:04,720 --> 00:07:07,599
for each kids kitchen instance both the

169
00:07:07,599 --> 00:07:10,319
columns and rows are five bits long

170
00:07:10,319 --> 00:07:12,479
but the length of the lanes on the other

171
00:07:12,479 --> 00:07:14,400
hand varies

172
00:07:14,400 --> 00:07:17,120
in our case we are interested in lanes

173
00:07:17,120 --> 00:07:19,840
of length 8 and 16

174
00:07:19,840 --> 00:07:22,000
which means that the states we consider

175
00:07:22,000 --> 00:07:26,479
have either length 200 or 400 bits

176
00:07:26,479 --> 00:07:28,880
a round of kick check fb is

177
00:07:28,880 --> 00:07:30,960
the composition of five mappings theta

178
00:07:30,960 --> 00:07:33,440
rho pi chi and iota

179
00:07:33,440 --> 00:07:35,199
we will uh

180
00:07:35,199 --> 00:07:37,599
not describe iota because it simply

181
00:07:37,599 --> 00:07:39,919
consists in the addition of round

182
00:07:39,919 --> 00:07:41,039
constant

183
00:07:41,039 --> 00:07:43,120
and it's not relevant for our attack

184
00:07:43,120 --> 00:07:47,039
because we are studying collisions

185
00:07:47,440 --> 00:07:49,919
so the first mapping is theta it maps

186
00:07:49,919 --> 00:07:52,319
each bit to itself sold with 10 other

187
00:07:52,319 --> 00:07:54,319
bits located on two other columns of the

188
00:07:54,319 --> 00:07:56,800
states the two columns added depend

189
00:07:56,800 --> 00:07:58,720
solely on the colon to which the bit

190
00:07:58,720 --> 00:08:00,319
considered belongs

191
00:08:00,319 --> 00:08:02,720
this means that if two bits are located

192
00:08:02,720 --> 00:08:05,520
on in the same column theta will add the

193
00:08:05,520 --> 00:08:08,560
same value to them

194
00:08:09,120 --> 00:08:11,680
the permutation row acts independently

195
00:08:11,680 --> 00:08:14,240
on each lane of the state and it rotates

196
00:08:14,240 --> 00:08:16,800
each lane

197
00:08:17,280 --> 00:08:19,599
the permutation pi consists in a

198
00:08:19,599 --> 00:08:24,000
reorganization of the lanes of the state

199
00:08:24,800 --> 00:08:26,879
finally chi is the only nonlinear

200
00:08:26,879 --> 00:08:30,879
mapping it is of algebraic degree 2.

201
00:08:30,879 --> 00:08:33,120
it acts independently on each row of the

202
00:08:33,120 --> 00:08:36,240
state and maps each bit to itself sort

203
00:08:36,240 --> 00:08:38,559
with the end of two other bits on its

204
00:08:38,559 --> 00:08:39,679
lane

205
00:08:39,679 --> 00:08:41,919
on its row sorry

206
00:08:41,919 --> 00:08:45,519
it's the end of one bit of its row and

207
00:08:45,519 --> 00:08:47,360
the complementary of

208
00:08:47,360 --> 00:08:50,560
one bit of its row

209
00:08:53,760 --> 00:08:56,160
so eventually remember we want to launch

210
00:08:56,160 --> 00:08:58,160
a birthday attack and send each inner

211
00:08:58,160 --> 00:09:00,880
state to a proper subset

212
00:09:00,880 --> 00:09:02,720
but to understand how we chose this

213
00:09:02,720 --> 00:09:05,360
subset um now that we have a better

214
00:09:05,360 --> 00:09:07,760
understanding of how keytrack f works we

215
00:09:07,760 --> 00:09:09,839
are going to go back and study what it

216
00:09:09,839 --> 00:09:12,640
means to for two states to present an

217
00:09:12,640 --> 00:09:14,880
inner collision and we are going to see

218
00:09:14,880 --> 00:09:17,519
which properties of f can be exploited

219
00:09:17,519 --> 00:09:20,399
to generate them

220
00:09:20,640 --> 00:09:23,920
so uh the problem is as follows

221
00:09:23,920 --> 00:09:26,720
from two random inner states s and s

222
00:09:26,720 --> 00:09:27,839
prime

223
00:09:27,839 --> 00:09:30,800
we wish to find two message blocks m and

224
00:09:30,800 --> 00:09:33,600
m prime such that we obtain an inner

225
00:09:33,600 --> 00:09:37,839
collision after applying f

226
00:09:40,480 --> 00:09:43,200
this problem can be modeled by a system

227
00:09:43,200 --> 00:09:45,839
of c equations which depend on the bits

228
00:09:45,839 --> 00:09:49,360
of m and prime s and s prime

229
00:09:49,360 --> 00:09:52,080
since f is two rounds of ketchup f our

230
00:09:52,080 --> 00:09:53,200
equations

231
00:09:53,200 --> 00:09:55,279
have degree four

232
00:09:55,279 --> 00:09:57,600
at first sight it is thus a hard system

233
00:09:57,600 --> 00:09:58,560
to solve

234
00:09:58,560 --> 00:10:00,800
yet we will see that the system is in

235
00:10:00,800 --> 00:10:03,360
fact equivalent to a system of degree

236
00:10:03,360 --> 00:10:05,839
only two

237
00:10:06,160 --> 00:10:08,000
please take a quick look at where the

238
00:10:08,000 --> 00:10:10,000
inner state is located when we present

239
00:10:10,000 --> 00:10:13,200
represent the state in three dimensions

240
00:10:13,200 --> 00:10:15,440
it is represented in blue in the right

241
00:10:15,440 --> 00:10:18,760
hand figure

242
00:10:21,760 --> 00:10:24,959
so here we study inner collisions at a

243
00:10:24,959 --> 00:10:26,480
slice level

244
00:10:26,480 --> 00:10:28,399
here in blue an inner state collision

245
00:10:28,399 --> 00:10:30,560
after two rounds of ketchup f is

246
00:10:30,560 --> 00:10:33,560
represented

247
00:10:33,760 --> 00:10:36,959
and now since chi is a permutation

248
00:10:36,959 --> 00:10:39,839
which acts independently on each row of

249
00:10:39,839 --> 00:10:41,040
the state

250
00:10:41,040 --> 00:10:44,160
having a collision on a row after chi is

251
00:10:44,160 --> 00:10:46,320
equivalent to having a collision on a

252
00:10:46,320 --> 00:10:48,959
row before chi

253
00:10:48,959 --> 00:10:51,439
as such

254
00:10:51,519 --> 00:10:52,560
pi

255
00:10:52,560 --> 00:10:55,120
consists simply in a reorganization of

256
00:10:55,120 --> 00:10:57,200
the lanes of the state

257
00:10:57,200 --> 00:10:59,519
thus having a collision on each lane

258
00:10:59,519 --> 00:11:02,240
after pi is equivalent to having a

259
00:11:02,240 --> 00:11:04,800
collision on a different lane before pi

260
00:11:04,800 --> 00:11:06,720
but a lane that can be very easily

261
00:11:06,720 --> 00:11:08,240
traced back

262
00:11:08,240 --> 00:11:10,800
as such

263
00:11:11,519 --> 00:11:15,040
last but not least raw rotates each lane

264
00:11:15,040 --> 00:11:17,760
independently so once again having a

265
00:11:17,760 --> 00:11:19,839
collision on a lane after row is

266
00:11:19,839 --> 00:11:21,680
equivalent to having a collision on the

267
00:11:21,680 --> 00:11:24,880
lane before row

268
00:11:25,440 --> 00:11:27,519
so we have gone back up one of the two

269
00:11:27,519 --> 00:11:30,160
applications of the only non-linear

270
00:11:30,160 --> 00:11:31,760
mapping kai

271
00:11:31,760 --> 00:11:34,399
and the previous system s is thus

272
00:11:34,399 --> 00:11:36,959
equivalent to a system of degree only

273
00:11:36,959 --> 00:11:38,959
two

274
00:11:38,959 --> 00:11:41,360
it is not so clear however how to

275
00:11:41,360 --> 00:11:43,839
continue to go back up the next mapping

276
00:11:43,839 --> 00:11:45,440
namely theta

277
00:11:45,440 --> 00:11:50,040
because it does not simply consist in a

278
00:11:50,040 --> 00:11:51,760
reorganization

279
00:11:51,760 --> 00:11:54,240
of the bits of the state

280
00:11:54,240 --> 00:11:55,360
however

281
00:11:55,360 --> 00:11:57,519
this difficulty can be overcome by

282
00:11:57,519 --> 00:12:01,600
exploiting properties of theta

283
00:12:02,800 --> 00:12:05,519
so recall that if two bits are located

284
00:12:05,519 --> 00:12:07,120
in the same column

285
00:12:07,120 --> 00:12:09,279
theta will add the same value to these

286
00:12:09,279 --> 00:12:10,639
two bits

287
00:12:10,639 --> 00:12:13,040
this implies that the sum of these two

288
00:12:13,040 --> 00:12:15,920
bits before theta will be equal to the

289
00:12:15,920 --> 00:12:20,160
sum of these two bits after theta

290
00:12:23,120 --> 00:12:26,320
by exploiting this property of theta

291
00:12:26,320 --> 00:12:28,320
we are able to derive necessary

292
00:12:28,320 --> 00:12:30,399
conditions on the difference between two

293
00:12:30,399 --> 00:12:32,639
states for them to present an inner

294
00:12:32,639 --> 00:12:36,160
collision around later

295
00:12:36,160 --> 00:12:38,639
we show that if two states collide on a

296
00:12:38,639 --> 00:12:41,920
colon after the application of theta

297
00:12:41,920 --> 00:12:43,680
then necessarily

298
00:12:43,680 --> 00:12:46,079
the difference between these two states

299
00:12:46,079 --> 00:12:51,239
before theta is constant on columns

300
00:12:52,000 --> 00:12:54,320
so here on this slide we show our

301
00:12:54,320 --> 00:12:56,560
property for states colliding on four

302
00:12:56,560 --> 00:12:59,839
bits of a colon after theta

303
00:12:59,839 --> 00:13:02,240
the reasoning is as follows

304
00:13:02,240 --> 00:13:04,560
if two states collide on certain bits of

305
00:13:04,560 --> 00:13:07,600
a colon then they also collide on the

306
00:13:07,600 --> 00:13:10,639
sum of these bits

307
00:13:10,639 --> 00:13:12,639
since the sum of two bits of the same

308
00:13:12,639 --> 00:13:15,360
colon after theta is equal to the sum of

309
00:13:15,360 --> 00:13:18,720
these bits before theta

310
00:13:19,120 --> 00:13:21,680
the fact that they collide on sums of

311
00:13:21,680 --> 00:13:24,639
bits after theta is equivalent to them

312
00:13:24,639 --> 00:13:29,440
colliding on sums of bits before theta

313
00:13:29,440 --> 00:13:32,839
lastly it is very easy to show that

314
00:13:32,839 --> 00:13:34,480
um

315
00:13:34,480 --> 00:13:36,800
states colliding on sums of bits before

316
00:13:36,800 --> 00:13:37,760
theta

317
00:13:37,760 --> 00:13:40,000
means having a constant difference on

318
00:13:40,000 --> 00:13:41,199
these bits

319
00:13:41,199 --> 00:13:44,160
again before theta

320
00:13:45,120 --> 00:13:47,360
more rigorously having a constant

321
00:13:47,360 --> 00:13:49,600
difference on k bits of a colon is

322
00:13:49,600 --> 00:13:53,199
equivalent to satisfying k minus 1 equal

323
00:13:53,199 --> 00:13:57,199
equations of our system s

324
00:13:57,199 --> 00:13:58,399
however

325
00:13:58,399 --> 00:14:00,480
recall that our goal was to apply a

326
00:14:00,480 --> 00:14:02,639
birthday attack

327
00:14:02,639 --> 00:14:04,800
therefore to exploit this property of

328
00:14:04,800 --> 00:14:08,160
theta we need to create a set in which

329
00:14:08,160 --> 00:14:10,000
any pair of states

330
00:14:10,000 --> 00:14:14,680
has constant difference on their colons

331
00:14:18,560 --> 00:14:19,760
to do so

332
00:14:19,760 --> 00:14:23,040
we decided to simply produce states that

333
00:14:23,040 --> 00:14:25,440
are constant on their columns

334
00:14:25,440 --> 00:14:26,880
in value

335
00:14:26,880 --> 00:14:28,880
it is then straightforward that if we

336
00:14:28,880 --> 00:14:30,720
generate offset

337
00:14:30,720 --> 00:14:33,920
oh sorry if we generate a set of states

338
00:14:33,920 --> 00:14:36,880
that are all constant on columns then

339
00:14:36,880 --> 00:14:39,600
the difference between any two of these

340
00:14:39,600 --> 00:14:44,519
states is also constant on columns

341
00:14:45,920 --> 00:14:47,360
how to produce

342
00:14:47,360 --> 00:14:49,440
such states is not straightforward

343
00:14:49,440 --> 00:14:51,600
because it corresponds to solving a

344
00:14:51,600 --> 00:14:53,760
system of c equations of algebraic

345
00:14:53,760 --> 00:14:55,920
degree two

346
00:14:55,920 --> 00:14:58,880
but the only non-linear mapping sky and

347
00:14:58,880 --> 00:15:02,800
we decided to linearize it

348
00:15:05,920 --> 00:15:09,440
to linearize chi we used two of its very

349
00:15:09,440 --> 00:15:11,120
well-known properties

350
00:15:11,120 --> 00:15:14,639
recall that chi works on rows

351
00:15:14,639 --> 00:15:16,959
so if you allocate a value to an input

352
00:15:16,959 --> 00:15:19,600
bit of a row for example

353
00:15:19,600 --> 00:15:22,480
you fix the value of one bit to zero

354
00:15:22,480 --> 00:15:23,360
then

355
00:15:23,360 --> 00:15:25,199
two output bits can be expressed

356
00:15:25,199 --> 00:15:26,399
linearly

357
00:15:26,399 --> 00:15:29,440
and one output bit takes the same value

358
00:15:29,440 --> 00:15:33,360
with probability three out of four

359
00:15:36,079 --> 00:15:38,320
i have now given all the ingredients of

360
00:15:38,320 --> 00:15:39,519
our attack

361
00:15:39,519 --> 00:15:41,199
in order to complete the attack the

362
00:15:41,199 --> 00:15:43,120
remaining problem is to optimize

363
00:15:43,120 --> 00:15:45,040
allocation strategies in order to

364
00:15:45,040 --> 00:15:47,440
construct a good linear system which

365
00:15:47,440 --> 00:15:51,440
satisfies as many equations as possible

366
00:15:51,440 --> 00:15:54,000
i won't go too much into the details of

367
00:15:54,000 --> 00:15:56,720
how we optimized our allocation

368
00:15:56,720 --> 00:15:58,880
strategies but i will give an example of

369
00:15:58,880 --> 00:16:01,920
allocation strategy

370
00:16:01,920 --> 00:16:03,440
this step is very

371
00:16:03,440 --> 00:16:05,839
important because we have a very small

372
00:16:05,839 --> 00:16:07,839
amount of degree of freedom at our

373
00:16:07,839 --> 00:16:09,920
disposal in small key check

374
00:16:09,920 --> 00:16:12,160
for example um

375
00:16:12,160 --> 00:16:15,040
fricking check with the 200 bit state

376
00:16:15,040 --> 00:16:18,639
and a 160 bit inner state which is the

377
00:16:18,639 --> 00:16:20,399
example i'm going to focus on in a

378
00:16:20,399 --> 00:16:21,440
second

379
00:16:21,440 --> 00:16:24,399
we only had 40 degrees of freedom

380
00:16:24,399 --> 00:16:29,040
but 160 equations to satisfy

381
00:16:31,680 --> 00:16:34,000
so i will start by giving an example of

382
00:16:34,000 --> 00:16:37,120
allocation strategy on a slice

383
00:16:37,120 --> 00:16:40,240
here we allocate the value 0 to 3 bits

384
00:16:40,240 --> 00:16:42,720
before chi the bits in blue

385
00:16:42,720 --> 00:16:45,040
this allows us to linearize the value of

386
00:16:45,040 --> 00:16:47,199
6 bits after chi

387
00:16:47,199 --> 00:16:50,079
this means adding 3 linear equations to

388
00:16:50,079 --> 00:16:51,680
a linear system

389
00:16:51,680 --> 00:16:56,079
and costs us three degrees of freedom

390
00:17:00,000 --> 00:17:02,560
in order to ensure constancy on the

391
00:17:02,560 --> 00:17:03,759
columns

392
00:17:03,759 --> 00:17:05,760
sorry on the yellow bits

393
00:17:05,760 --> 00:17:08,000
rather than adding six

394
00:17:08,000 --> 00:17:10,319
equations to our linear system we only

395
00:17:10,319 --> 00:17:13,439
need adding four

396
00:17:13,439 --> 00:17:16,079
because we do not care about the value

397
00:17:16,079 --> 00:17:17,439
of the constant

398
00:17:17,439 --> 00:17:20,319
and thus we can simply construct linear

399
00:17:20,319 --> 00:17:23,439
equations by summing the expressions of

400
00:17:23,439 --> 00:17:25,039
yellow bits

401
00:17:25,039 --> 00:17:26,799
and

402
00:17:26,799 --> 00:17:29,679
all of that equal to zero

403
00:17:29,679 --> 00:17:32,240
this allows us to save two degrees of

404
00:17:32,240 --> 00:17:34,080
freedom

405
00:17:34,080 --> 00:17:36,880
lastly note that with probability five

406
00:17:36,880 --> 00:17:38,960
out of eight rather than

407
00:17:38,960 --> 00:17:40,240
one out of two

408
00:17:40,240 --> 00:17:43,520
we satisfy an extra an extra equation of

409
00:17:43,520 --> 00:17:46,520
s

410
00:17:48,559 --> 00:17:50,400
so let's now give an example of

411
00:17:50,400 --> 00:17:53,280
allocation strategy on a state

412
00:17:53,280 --> 00:17:55,440
again the keycheck instance considered

413
00:17:55,440 --> 00:17:58,400
here is a kit shack with state length

414
00:17:58,400 --> 00:18:03,520
200 bits and capacity 160 bits

415
00:18:03,520 --> 00:18:06,640
on five slices we set three bits to zero

416
00:18:06,640 --> 00:18:10,400
and on one slice we set two bits to zero

417
00:18:10,400 --> 00:18:12,400
this means that we get a linear system

418
00:18:12,400 --> 00:18:15,840
of 39 linear equations

419
00:18:16,000 --> 00:18:18,559
then we produce a state by solving this

420
00:18:18,559 --> 00:18:20,880
linear system

421
00:18:20,880 --> 00:18:24,000
and thus we get an output set such that

422
00:18:24,000 --> 00:18:26,960
for any pair of this output set

423
00:18:26,960 --> 00:18:29,360
21 equations of s are satisfied

424
00:18:29,360 --> 00:18:30,960
automatically

425
00:18:30,960 --> 00:18:33,520
and six equations of s are satisfied

426
00:18:33,520 --> 00:18:36,480
with probability 17 out of 32 to the

427
00:18:36,480 --> 00:18:38,880
power 6.

428
00:18:38,880 --> 00:18:41,760
we can thus compute the probability p

429
00:18:41,760 --> 00:18:44,240
for any two states of this set to

430
00:18:44,240 --> 00:18:46,000
collide

431
00:18:46,000 --> 00:18:48,320
applying a birthday attack

432
00:18:48,320 --> 00:18:50,880
we get a time complexity of 2 to the

433
00:18:50,880 --> 00:18:52,640
power 70

434
00:18:52,640 --> 00:18:55,520
times a constant g that we will specify

435
00:18:55,520 --> 00:18:57,039
in a minute

436
00:18:57,039 --> 00:19:00,559
roughly it can be understood as the cost

437
00:19:00,559 --> 00:19:03,039
of finding a solution to the linear

438
00:19:03,039 --> 00:19:05,440
system

439
00:19:08,480 --> 00:19:09,280
so

440
00:19:09,280 --> 00:19:11,760
how do we compute g

441
00:19:11,760 --> 00:19:14,160
first note that its value does not

442
00:19:14,160 --> 00:19:17,520
depend on the rank of the linear system

443
00:19:17,520 --> 00:19:20,559
this is because to conduct our attack we

444
00:19:20,559 --> 00:19:22,880
solve the linear system a large number

445
00:19:22,880 --> 00:19:26,080
of times and on average each gaussian

446
00:19:26,080 --> 00:19:27,360
elimination

447
00:19:27,360 --> 00:19:29,919
provides 2 to the power r minus e

448
00:19:29,919 --> 00:19:32,080
solutions

449
00:19:32,080 --> 00:19:33,200
further

450
00:19:33,200 --> 00:19:35,200
we can pre-compute the gaussian

451
00:19:35,200 --> 00:19:38,559
elimination before conducting the attack

452
00:19:38,559 --> 00:19:40,480
this means that looking for a solution

453
00:19:40,480 --> 00:19:43,280
to the linear system corresponds simply

454
00:19:43,280 --> 00:19:46,720
to multiplication matrix vector

455
00:19:46,720 --> 00:19:50,320
that is e times c

456
00:19:50,840 --> 00:19:54,640
operations g is thus equal to

457
00:19:54,640 --> 00:19:57,280
e times c divided by the number of

458
00:19:57,280 --> 00:19:58,880
solutions provided by each

459
00:19:58,880 --> 00:20:01,679
multiplication matrix vector

460
00:20:01,679 --> 00:20:05,440
which is also 2 to the power r minus e

461
00:20:05,440 --> 00:20:07,919
divided by the number of operations of

462
00:20:07,919 --> 00:20:10,960
ketchup f reduced to two rounds which we

463
00:20:10,960 --> 00:20:13,760
called n o

464
00:20:14,240 --> 00:20:18,000
in the case of our attack example

465
00:20:18,000 --> 00:20:21,200
the final time complexity is thus of 2

466
00:20:21,200 --> 00:20:24,720
to the power 73.

467
00:20:24,880 --> 00:20:27,039
note that we do not discuss the memory

468
00:20:27,039 --> 00:20:29,360
complexity of our attack

469
00:20:29,360 --> 00:20:32,080
because it can be greatly minimized

470
00:20:32,080 --> 00:20:33,440
thanks to

471
00:20:33,440 --> 00:20:36,080
floyd's circle finding

472
00:20:36,080 --> 00:20:38,720
algorithm

473
00:20:41,520 --> 00:20:43,840
so as a conclusion we tackled the

474
00:20:43,840 --> 00:20:46,840
challenge of the ketchup team

475
00:20:46,840 --> 00:20:50,080
and which was recalled if you can recall

476
00:20:50,080 --> 00:20:52,159
that the smaller versions are hard to

477
00:20:52,159 --> 00:20:53,600
break

478
00:20:53,600 --> 00:20:55,280
our crypt analysis

479
00:20:55,280 --> 00:20:58,000
shows that their statement seems true

480
00:20:58,000 --> 00:21:00,559
because even two rounds required a

481
00:21:00,559 --> 00:21:02,799
strong effort

482
00:21:02,799 --> 00:21:05,120
most importantly as a conclusion we

483
00:21:05,120 --> 00:21:07,360
believe that small ketchup instances

484
00:21:07,360 --> 00:21:11,280
require dedicated analysis

485
00:21:11,280 --> 00:21:12,960
thank you very much for listening to

486
00:21:12,960 --> 00:21:16,080
this presentation

