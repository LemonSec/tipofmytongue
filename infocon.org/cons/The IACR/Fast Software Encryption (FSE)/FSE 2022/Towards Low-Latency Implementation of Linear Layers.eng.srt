1
00:00:02,240 --> 00:00:03,919
hello everyone

2
00:00:03,919 --> 00:00:07,359
the title of our presentation is towards

3
00:00:07,359 --> 00:00:09,599
low latency implementation on linear

4
00:00:09,599 --> 00:00:10,559
layers

5
00:00:10,559 --> 00:00:14,639
this is joint work with one way yeah

6
00:00:15,440 --> 00:00:18,400
sunning and vomiting

7
00:00:18,400 --> 00:00:21,199
the motivation of this paper needs the

8
00:00:21,199 --> 00:00:23,920
current demand for devices with limited

9
00:00:23,920 --> 00:00:27,359
resources such as the internet

10
00:00:27,359 --> 00:00:29,199
things and radio frequency

11
00:00:29,199 --> 00:00:31,840
identification text

12
00:00:31,840 --> 00:00:32,880
purely

13
00:00:32,880 --> 00:00:35,600
because the virus restrictions lead to

14
00:00:35,600 --> 00:00:37,600
new security threats

15
00:00:37,600 --> 00:00:40,559
we should use lightweight cryptography

16
00:00:40,559 --> 00:00:43,960
to ensure secure encryption and expand

17
00:00:43,960 --> 00:00:46,800
cryptography applications to these

18
00:00:46,800 --> 00:00:48,239
devices

19
00:00:48,239 --> 00:00:51,039
there are many criteria for designing

20
00:00:51,039 --> 00:00:52,960
lightweight primitives

21
00:00:52,960 --> 00:00:55,280
and the most popular one should be the

22
00:00:55,280 --> 00:00:56,719
gate equivalent

23
00:00:56,719 --> 00:00:59,359
ge required to

24
00:00:59,359 --> 00:01:01,359
implement cipher

25
00:01:01,359 --> 00:01:03,920
because it nicely approximates the

26
00:01:03,920 --> 00:01:07,600
complexity of the circuit area

27
00:01:07,600 --> 00:01:08,720
meanwhile

28
00:01:08,720 --> 00:01:12,240
another criterion latency is also

29
00:01:12,240 --> 00:01:15,280
crucial and has been attracting more and

30
00:01:15,280 --> 00:01:16,640
more attention

31
00:01:16,640 --> 00:01:18,880
because it plays an important role in

32
00:01:18,880 --> 00:01:22,159
the low energy conservation of ciphers

33
00:01:22,159 --> 00:01:24,240
generally speaking we have two

34
00:01:24,240 --> 00:01:27,200
directions for these on the one hand we

35
00:01:27,200 --> 00:01:30,240
can design new lightweight ciphers simon

36
00:01:30,240 --> 00:01:33,200
speck and midori are several well-known

37
00:01:33,200 --> 00:01:34,640
block ciphers

38
00:01:34,640 --> 00:01:37,280
on the other hand we can optimize

39
00:01:37,280 --> 00:01:39,920
components in cyphers it plays an

40
00:01:39,920 --> 00:01:41,439
important role

41
00:01:41,439 --> 00:01:43,920
in the applications to devices with

42
00:01:43,920 --> 00:01:46,320
limited resources and it has more

43
00:01:46,320 --> 00:01:48,479
practical significance

44
00:01:48,479 --> 00:01:51,040
lightweight components are more popular

45
00:01:51,040 --> 00:01:55,200
choices design lightweight primitives

46
00:01:55,200 --> 00:01:57,759
for the non-linear layer

47
00:01:57,759 --> 00:01:59,280
xbox

48
00:01:59,280 --> 00:02:01,840
plays an important role and for the

49
00:02:01,840 --> 00:02:05,119
linear layer we already use the mds

50
00:02:05,119 --> 00:02:08,399
matrix or the near mds matrix

51
00:02:08,399 --> 00:02:10,639
this paper follows the second line of

52
00:02:10,639 --> 00:02:13,280
work and focuses on the hardware

53
00:02:13,280 --> 00:02:15,680
implication of linear layers that

54
00:02:15,680 --> 00:02:17,360
provide the feeling for many

55
00:02:17,360 --> 00:02:21,239
cryptography primitives

56
00:02:23,360 --> 00:02:26,480
before introducing our heuristics we

57
00:02:26,480 --> 00:02:28,959
should be clear the metrics that are

58
00:02:28,959 --> 00:02:30,080
helpful

59
00:02:30,080 --> 00:02:32,080
in the proposed solvers

60
00:02:32,080 --> 00:02:34,879
to optimize the linear layers

61
00:02:34,879 --> 00:02:37,680
there are two metrics that we focus on

62
00:02:37,680 --> 00:02:40,879
the first metric is the circuit area we

63
00:02:40,879 --> 00:02:43,440
use a number of extra operations when

64
00:02:43,440 --> 00:02:46,080
implementing the linear layers

65
00:02:46,080 --> 00:02:49,760
to represent it the more the number or

66
00:02:49,760 --> 00:02:52,400
xor patience needs the larger the

67
00:02:52,400 --> 00:02:55,760
circulative area is therefore we focus

68
00:02:55,760 --> 00:02:57,840
on the reducing the number of

69
00:02:57,840 --> 00:02:59,519
exhaustions

70
00:02:59,519 --> 00:03:01,200
to better estimate the number of

71
00:03:01,200 --> 00:03:04,000
accelerations we have three kinds of

72
00:03:04,000 --> 00:03:05,280
xors

73
00:03:05,280 --> 00:03:07,040
they are proposed to estimate the

74
00:03:07,040 --> 00:03:09,840
imitation on the battery matrix

75
00:03:09,840 --> 00:03:13,239
the first metric is the dxo metric the

76
00:03:13,239 --> 00:03:15,680
dxometric counts the humming weight of

77
00:03:15,680 --> 00:03:18,800
this matrix minus the row number of this

78
00:03:18,800 --> 00:03:20,080
matrix

79
00:03:20,080 --> 00:03:22,560
the hamming weight is the number of ones

80
00:03:22,560 --> 00:03:24,159
in this matrix

81
00:03:24,159 --> 00:03:27,760
in addition the xor metric counts

82
00:03:27,760 --> 00:03:30,720
the minimum number of operations like x

83
00:03:30,720 --> 00:03:32,720
i equals x i

84
00:03:32,720 --> 00:03:36,400
plus x j and the z xor matrix counts the

85
00:03:36,400 --> 00:03:39,040
minimum number operations like x i

86
00:03:39,040 --> 00:03:43,920
equals x j one plus x j two

87
00:03:44,720 --> 00:03:48,080
let's give the three times five matrix

88
00:03:48,080 --> 00:03:50,799
as an example its timing weight is

89
00:03:50,799 --> 00:03:53,920
eleven and the row number is three

90
00:03:53,920 --> 00:03:56,159
therefore the dxr

91
00:03:56,159 --> 00:03:57,280
is it

92
00:03:57,280 --> 00:04:00,640
actually it is the worst circuit because

93
00:04:00,640 --> 00:04:04,879
we waste many exo operations

94
00:04:05,200 --> 00:04:08,799
the second nexo is what we call the sxor

95
00:04:08,799 --> 00:04:12,799
however it has been proven to be np-hard

96
00:04:12,799 --> 00:04:16,079
to find the minimum number therefore

97
00:04:16,079 --> 00:04:18,798
it's hard to find the optimal solution

98
00:04:18,798 --> 00:04:21,440
especially for the matrix with a larger

99
00:04:21,440 --> 00:04:22,479
size

100
00:04:22,479 --> 00:04:25,680
for this three times five matrix

101
00:04:25,680 --> 00:04:29,040
we can turn the implementation with four

102
00:04:29,040 --> 00:04:30,639
sxors

103
00:04:30,639 --> 00:04:35,600
the third xor is the dxo cxor is another

104
00:04:35,600 --> 00:04:37,520
kind of xor

105
00:04:37,520 --> 00:04:40,840
it can generate new values to save the

106
00:04:40,840 --> 00:04:44,080
intermediate values and for the three

107
00:04:44,080 --> 00:04:48,240
times five matrix we also need four gxos

108
00:04:48,240 --> 00:04:51,440
to implement it

109
00:04:51,520 --> 00:04:55,040
dxo is straightforward to use the actual

110
00:04:55,040 --> 00:04:57,440
count to estimate the cost

111
00:04:57,440 --> 00:04:59,919
for further optimization

112
00:04:59,919 --> 00:05:03,440
the xxr and the gxr are used to

113
00:05:03,440 --> 00:05:06,320
evaluating matrices

114
00:05:06,320 --> 00:05:10,240
for sxor and dxo the gxo can generate

115
00:05:10,240 --> 00:05:11,120
new

116
00:05:11,120 --> 00:05:12,960
intermediate values

117
00:05:12,960 --> 00:05:16,880
the xxl always renews original values

118
00:05:16,880 --> 00:05:19,600
and the renewed value can now use the

119
00:05:19,600 --> 00:05:21,199
original value

120
00:05:21,199 --> 00:05:25,280
in addition the sxor circuits can always

121
00:05:25,280 --> 00:05:28,639
be transformed into the gxo circuit

122
00:05:28,639 --> 00:05:31,919
therefore we always use zxr in this

123
00:05:31,919 --> 00:05:34,080
paper

124
00:05:34,080 --> 00:05:37,600
another metric is latency more latency

125
00:05:37,600 --> 00:05:40,080
leads to more time to execute the

126
00:05:40,080 --> 00:05:42,639
encryption we use the depth of the

127
00:05:42,639 --> 00:05:46,080
circuit of the matrix to compute it

128
00:05:46,080 --> 00:05:49,199
the depth is defined as the maximum

129
00:05:49,199 --> 00:05:52,240
number of xor equations of the path in

130
00:05:52,240 --> 00:05:54,000
the circuit

131
00:05:54,000 --> 00:05:56,720
in this paper we always focus on the

132
00:05:56,720 --> 00:05:59,280
minimum depth of the circuit

133
00:05:59,280 --> 00:06:02,319
the circuit with the minimum adapts may

134
00:06:02,319 --> 00:06:04,880
execute the encryption faster in

135
00:06:04,880 --> 00:06:08,400
hardware and our experiments show the

136
00:06:08,400 --> 00:06:10,960
feature

137
00:06:11,280 --> 00:06:14,240
we give more detailed definitions

138
00:06:14,240 --> 00:06:16,160
given the matrix

139
00:06:16,160 --> 00:06:17,520
the input

140
00:06:17,520 --> 00:06:21,600
is x0 to x n minus 1

141
00:06:21,600 --> 00:06:26,720
and the output is y 0 to y n minus 1.

142
00:06:26,720 --> 00:06:30,240
for each upper value y i we have y

143
00:06:30,240 --> 00:06:31,360
equals

144
00:06:31,360 --> 00:06:35,600
a i 0 times x 0 to

145
00:06:35,600 --> 00:06:37,280
a i

146
00:06:37,280 --> 00:06:40,960
n minus 1 times i n minus 1

147
00:06:40,960 --> 00:06:44,800
which is associated as a vector

148
00:06:44,800 --> 00:06:47,360
a i 0 to a i

149
00:06:47,360 --> 00:06:48,880
n minus 1.

150
00:06:48,880 --> 00:06:52,400
the vector is called the node y i

151
00:06:52,400 --> 00:06:55,120
then we can compute the minimum depth of

152
00:06:55,120 --> 00:06:57,680
the node and the matrix

153
00:06:57,680 --> 00:07:00,000
using the following equations

154
00:07:00,000 --> 00:07:02,240
the first equation can compute the

155
00:07:02,240 --> 00:07:04,560
minimum depth of the load

156
00:07:04,560 --> 00:07:07,120
and the second equation can compute the

157
00:07:07,120 --> 00:07:09,680
minimum depth of this matrix

158
00:07:09,680 --> 00:07:12,000
we ensure that the depth of our

159
00:07:12,000 --> 00:07:15,120
implementation of this matrix equals its

160
00:07:15,120 --> 00:07:17,039
minimum depth

161
00:07:17,039 --> 00:07:21,440
it can lead to the best latency

162
00:07:21,919 --> 00:07:25,599
we also use the three times five matrix

163
00:07:25,599 --> 00:07:27,360
as an example

164
00:07:27,360 --> 00:07:30,720
the depth of the first row is three the

165
00:07:30,720 --> 00:07:34,080
steps of the second row is two and the

166
00:07:34,080 --> 00:07:38,080
depth of the third row is one therefore

167
00:07:38,080 --> 00:07:42,318
the depth of this matrix is three

168
00:07:43,280 --> 00:07:46,800
next we propose a backward framework

169
00:07:46,800 --> 00:07:47,919
formally

170
00:07:47,919 --> 00:07:50,800
the backward framework is an approach to

171
00:07:50,800 --> 00:07:53,919
search for a solution that starts from

172
00:07:53,919 --> 00:07:56,160
target nodes chooses a node

173
00:07:56,160 --> 00:07:59,199
interactively and splits it into two

174
00:07:59,199 --> 00:08:03,199
ones until all the nodes are unique ones

175
00:08:03,199 --> 00:08:05,840
the target nodes are the output values

176
00:08:05,840 --> 00:08:08,560
of this matrix and the unit nodes are

177
00:08:08,560 --> 00:08:11,440
the input values of this matrix

178
00:08:11,440 --> 00:08:13,520
and the backward framework returns a

179
00:08:13,520 --> 00:08:15,360
directed graph

180
00:08:15,360 --> 00:08:18,639
in the graph the integral of each node

181
00:08:18,639 --> 00:08:20,800
is 0 or 2.

182
00:08:20,800 --> 00:08:24,479
every unit nodes have the integral 0

183
00:08:24,479 --> 00:08:27,759
and every you a non-unique one has in

184
00:08:27,759 --> 00:08:31,520
degree 2 and can represent an xor

185
00:08:31,520 --> 00:08:34,240
operations

186
00:08:35,279 --> 00:08:39,360
then we solve two fundamental problems

187
00:08:39,360 --> 00:08:42,559
the first is how to split nodes with

188
00:08:42,559 --> 00:08:46,080
respect to the minimum depth

189
00:08:46,080 --> 00:08:50,480
how to split y 0 into t 0 and

190
00:08:50,480 --> 00:08:52,480
t1

191
00:08:52,480 --> 00:08:56,399
the second is how to ensure the output

192
00:08:56,399 --> 00:08:58,640
of the framework returns

193
00:08:58,640 --> 00:09:02,319
can have the minimum depth

194
00:09:03,760 --> 00:09:07,200
proposition 1 can help us to execute the

195
00:09:07,200 --> 00:09:10,160
splitting process and solve the first

196
00:09:10,160 --> 00:09:11,360
problem

197
00:09:11,360 --> 00:09:14,000
for any known y

198
00:09:14,000 --> 00:09:17,920
we always find two nodes with less steps

199
00:09:17,920 --> 00:09:19,440
to split y

200
00:09:19,440 --> 00:09:22,000
we give an example

201
00:09:22,000 --> 00:09:25,519
suppose that we have y equals one one

202
00:09:25,519 --> 00:09:27,680
one one one zero

203
00:09:27,680 --> 00:09:31,200
and how the depth is three

204
00:09:31,200 --> 00:09:34,320
since the minimum depth of one procedure

205
00:09:34,320 --> 00:09:36,959
knows this two the timing weight is

206
00:09:36,959 --> 00:09:39,839
three or four we can choose three or

207
00:09:39,839 --> 00:09:43,120
four randomly and we choose three

208
00:09:43,120 --> 00:09:44,800
the new node is

209
00:09:44,800 --> 00:09:45,600
a

210
00:09:45,600 --> 00:09:49,279
a equals one one one zero

211
00:09:49,279 --> 00:09:52,160
then another procedure knows b can be

212
00:09:52,160 --> 00:09:59,360
computed 0 0 0 y 1 0 and the depth is 1.

213
00:10:01,360 --> 00:10:04,320
for solving the second problem we first

214
00:10:04,320 --> 00:10:06,079
define two sets

215
00:10:06,079 --> 00:10:08,640
the first is the working set the working

216
00:10:08,640 --> 00:10:11,440
set contains the nodes that we need to

217
00:10:11,440 --> 00:10:12,560
split

218
00:10:12,560 --> 00:10:15,360
the predecessor says contains the nodes

219
00:10:15,360 --> 00:10:18,560
that we do not split in this state note

220
00:10:18,560 --> 00:10:21,279
that the nodes in the predecessor sets

221
00:10:21,279 --> 00:10:24,240
can be reused

222
00:10:25,440 --> 00:10:28,480
then we can see that given the

223
00:10:28,480 --> 00:10:31,279
matrix we can always find the graph from

224
00:10:31,279 --> 00:10:34,240
target nodes to all the unit nodes

225
00:10:34,240 --> 00:10:37,920
because the framework in write ensures

226
00:10:37,920 --> 00:10:43,040
that the outputs have the minimum depth

227
00:10:43,040 --> 00:10:45,519
for a given matrix the working set

228
00:10:45,519 --> 00:10:48,480
contents all the target nodes then we

229
00:10:48,480 --> 00:10:50,399
split the nodes in the working set

230
00:10:50,399 --> 00:10:53,200
interactively until the working center

231
00:10:53,200 --> 00:10:54,399
is empty

232
00:10:54,399 --> 00:10:58,000
next we split all the predecessor nodes

233
00:10:58,000 --> 00:11:01,120
repeat the procedures until the working

234
00:11:01,120 --> 00:11:04,399
set only contains the unit nodes

235
00:11:04,399 --> 00:11:07,680
it means that we finish the split

236
00:11:07,680 --> 00:11:10,320
the example shows the procedures the

237
00:11:10,320 --> 00:11:13,360
depth of the working set is decreased

238
00:11:13,360 --> 00:11:14,560
from 3

239
00:11:14,560 --> 00:11:15,920
to 0.

240
00:11:15,920 --> 00:11:18,880
each time we pull the nodes from the

241
00:11:18,880 --> 00:11:23,440
predecessor set into the working set

242
00:11:23,440 --> 00:11:26,800
the depth decreased by 1.

243
00:11:26,800 --> 00:11:29,040
when the depths of the working set is

244
00:11:29,040 --> 00:11:33,519
zero we finish the framework

245
00:11:34,959 --> 00:11:38,000
then we propose the heuristics

246
00:11:38,000 --> 00:11:40,720
the heuristics are necessary because we

247
00:11:40,720 --> 00:11:43,839
cannot achieve a exhaustive

248
00:11:43,839 --> 00:11:47,200
search and in the graph every non-union

249
00:11:47,200 --> 00:11:50,480
nodes represent an xor case

250
00:11:50,480 --> 00:11:53,279
some nodes in the graph can be reused

251
00:11:53,279 --> 00:11:56,639
therefore we hope that we can reuse

252
00:11:56,639 --> 00:12:00,320
nodes as far as possible we give 5 rules

253
00:12:00,320 --> 00:12:04,240
in splitting nodes to reuse the nodes in

254
00:12:04,240 --> 00:12:07,600
the predecessor sets

255
00:12:08,880 --> 00:12:13,440
row 1 deals with nodes with less depth

256
00:12:13,440 --> 00:12:16,079
if in the working side some nodes have

257
00:12:16,079 --> 00:12:17,519
less steps

258
00:12:17,519 --> 00:12:20,240
we pull them from the working set into

259
00:12:20,240 --> 00:12:23,360
the predecessor sets

260
00:12:23,360 --> 00:12:25,600
row 2 deals with

261
00:12:25,600 --> 00:12:29,440
nodes that can be split directly

262
00:12:29,440 --> 00:12:32,560
it means we don't need to generate new

263
00:12:32,560 --> 00:12:33,600
nodes

264
00:12:33,600 --> 00:12:36,000
we just use the nodes in the predecessor

265
00:12:36,000 --> 00:12:38,800
nodes to split nodes

266
00:12:38,800 --> 00:12:42,480
row 3 requires us to generate one new

267
00:12:42,480 --> 00:12:45,279
node to split the node in the working

268
00:12:45,279 --> 00:12:46,320
set

269
00:12:46,320 --> 00:12:48,880
because the nodes in the predecessor

270
00:12:48,880 --> 00:12:51,839
says cannot split the

271
00:12:51,839 --> 00:12:56,079
row 4 requires us to generate three new

272
00:12:56,079 --> 00:12:58,480
nodes to split two nodes

273
00:12:58,480 --> 00:13:01,920
because no nodes in the predecessor says

274
00:13:01,920 --> 00:13:03,519
can be used

275
00:13:03,519 --> 00:13:06,720
raw file is a default method

276
00:13:06,720 --> 00:13:09,760
we can use two new nodes to split one

277
00:13:09,760 --> 00:13:13,120
node it is the worst way and we try to

278
00:13:13,120 --> 00:13:14,720
avoid it

279
00:13:14,720 --> 00:13:17,360
the cost is shown in right

280
00:13:17,360 --> 00:13:22,480
we can compare them and give the order

281
00:13:23,680 --> 00:13:26,880
now we compare two frameworks used to

282
00:13:26,880 --> 00:13:29,760
optimize the linear layers we first

283
00:13:29,760 --> 00:13:32,880
introduce a forward framework it is very

284
00:13:32,880 --> 00:13:35,920
intuitive the forward framework begins

285
00:13:35,920 --> 00:13:40,480
with input values x0 x1 to xn

286
00:13:40,480 --> 00:13:43,360
then they chose two values combined

287
00:13:43,360 --> 00:13:46,000
and generate new value

288
00:13:46,000 --> 00:13:50,079
like p0 p1 to pm

289
00:13:50,079 --> 00:13:53,519
we do this procedure interactively

290
00:13:53,519 --> 00:13:58,000
suppose that we generate q0 q1 qm

291
00:13:58,000 --> 00:14:01,440
finally every output value y i

292
00:14:01,440 --> 00:14:03,040
is generated

293
00:14:03,040 --> 00:14:05,760
and we obtain a circuit from input

294
00:14:05,760 --> 00:14:08,079
values to apple values

295
00:14:08,079 --> 00:14:10,720
the key procedure of the framework is to

296
00:14:10,720 --> 00:14:14,079
search for the circuit beginning with

297
00:14:14,079 --> 00:14:15,440
inputs

298
00:14:15,440 --> 00:14:20,560
and how to generate outputs is unknown

299
00:14:21,839 --> 00:14:24,560
then we introduce another framework

300
00:14:24,560 --> 00:14:27,040
proposed by this paper

301
00:14:27,040 --> 00:14:29,440
the backward framework has another

302
00:14:29,440 --> 00:14:30,720
aspect

303
00:14:30,720 --> 00:14:33,760
we first deal with every output value y

304
00:14:33,760 --> 00:14:34,560
i

305
00:14:34,560 --> 00:14:37,519
the goal of the backward free market to

306
00:14:37,519 --> 00:14:40,480
split every upper value into input

307
00:14:40,480 --> 00:14:41,680
values

308
00:14:41,680 --> 00:14:44,959
generally we cannot obtain input values

309
00:14:44,959 --> 00:14:46,560
directly

310
00:14:46,560 --> 00:14:49,920
some intermediate values are necessary

311
00:14:49,920 --> 00:14:51,360
therefore

312
00:14:51,360 --> 00:14:52,720
we use

313
00:14:52,720 --> 00:14:54,079
qi

314
00:14:54,079 --> 00:14:56,959
to split y i

315
00:14:56,959 --> 00:15:01,120
then we also use pi to split qi

316
00:15:01,120 --> 00:15:04,160
finally we use the input values

317
00:15:04,160 --> 00:15:06,720
x i to split p i

318
00:15:06,720 --> 00:15:08,560
and we obtain an

319
00:15:08,560 --> 00:15:11,279
implementation of this matrix

320
00:15:11,279 --> 00:15:14,720
from output values to input values of

321
00:15:14,720 --> 00:15:15,760
course

322
00:15:15,760 --> 00:15:19,680
because the xor operation is invertible

323
00:15:19,680 --> 00:15:22,720
we can convert it into a circuit from

324
00:15:22,720 --> 00:15:25,519
input values to output values with the

325
00:15:25,519 --> 00:15:30,399
same number or xor operations

326
00:15:31,680 --> 00:15:35,600
next we compare these two frameworks

327
00:15:35,600 --> 00:15:39,040
the framework the forward framework uses

328
00:15:39,040 --> 00:15:42,959
base and chooses two values to combine a

329
00:15:42,959 --> 00:15:44,399
directive

330
00:15:44,399 --> 00:15:48,000
when every output can be computed stop

331
00:15:48,000 --> 00:15:48,959
it

332
00:15:48,959 --> 00:15:52,160
finally we obtain a circuit combined

333
00:15:52,160 --> 00:15:55,120
from inputs to outputs

334
00:15:55,120 --> 00:15:58,560
the backward framework uses a set to see

335
00:15:58,560 --> 00:16:02,320
the node from the side and split it into

336
00:16:02,320 --> 00:16:03,600
two nodes

337
00:16:03,600 --> 00:16:07,279
when no values can be split stop it

338
00:16:07,279 --> 00:16:11,040
finally we obtain the circuit split from

339
00:16:11,040 --> 00:16:15,439
upper values to input values

340
00:16:17,040 --> 00:16:20,320
in addition we introduce the advantage

341
00:16:20,320 --> 00:16:23,519
of backward framework with respect to

342
00:16:23,519 --> 00:16:25,440
the minimum depth

343
00:16:25,440 --> 00:16:28,800
suppose that we have input values

344
00:16:28,800 --> 00:16:31,680
a problem is how to decide the values

345
00:16:31,680 --> 00:16:33,199
combined

346
00:16:33,199 --> 00:16:36,720
according to existing heuristics we only

347
00:16:36,720 --> 00:16:38,880
select the choice

348
00:16:38,880 --> 00:16:41,759
that can reduce the distance to output

349
00:16:41,759 --> 00:16:42,959
values

350
00:16:42,959 --> 00:16:46,000
although many heuristics perform well

351
00:16:46,000 --> 00:16:48,720
without the limitation or depth

352
00:16:48,720 --> 00:16:51,839
it is difficult to judge which choice

353
00:16:51,839 --> 00:16:54,880
performs work better with respect to the

354
00:16:54,880 --> 00:16:56,880
minimum depth

355
00:16:56,880 --> 00:16:58,240
because

356
00:16:58,240 --> 00:17:00,880
if the new value exceeds the minimum

357
00:17:00,880 --> 00:17:01,839
depth

358
00:17:01,839 --> 00:17:03,600
we will throw it

359
00:17:03,600 --> 00:17:06,079
even though it is a good choice to

360
00:17:06,079 --> 00:17:09,679
reduce the number of xor operations

361
00:17:09,679 --> 00:17:12,720
for the backward framework it is easy to

362
00:17:12,720 --> 00:17:16,000
control the depth of every node because

363
00:17:16,000 --> 00:17:19,280
we can split one value using the values

364
00:17:19,280 --> 00:17:21,520
with less depth

365
00:17:21,520 --> 00:17:24,480
and the circuit generated by the back of

366
00:17:24,480 --> 00:17:27,679
the framework has always the minimum

367
00:17:27,679 --> 00:17:30,079
depth

368
00:17:31,360 --> 00:17:34,320
we give an example consider

369
00:17:34,320 --> 00:17:36,960
a matrix

370
00:17:36,960 --> 00:17:40,080
to be implemented the minimum depth is

371
00:17:40,080 --> 00:17:41,280
three

372
00:17:41,280 --> 00:17:44,320
if we use a forward framework like bp

373
00:17:44,320 --> 00:17:45,520
algorithm

374
00:17:45,520 --> 00:17:47,280
we first generate

375
00:17:47,280 --> 00:17:51,280
t1 t2 and t3

376
00:17:51,280 --> 00:17:54,400
because they are the output values it

377
00:17:54,400 --> 00:17:58,880
has a higher priority in bp algorithm

378
00:17:58,880 --> 00:18:02,000
the depth so t3 is 3

379
00:18:02,000 --> 00:18:05,440
this means that t3 cannot be used to

380
00:18:05,440 --> 00:18:07,600
generate any values

381
00:18:07,600 --> 00:18:11,280
finally the circuit needs 11 xor

382
00:18:11,280 --> 00:18:12,960
operations

383
00:18:12,960 --> 00:18:16,160
however in the backward framework

384
00:18:16,160 --> 00:18:18,400
we can obtain the circuit

385
00:18:18,400 --> 00:18:21,120
image the dapso

386
00:18:21,120 --> 00:18:22,320
y4

387
00:18:22,320 --> 00:18:27,679
a2 then y4 can be used again to generate

388
00:18:27,679 --> 00:18:31,200
y0 y1 and y2

389
00:18:31,200 --> 00:18:34,000
finally we can generate the circuit with

390
00:18:34,000 --> 00:18:38,400
only 9 extra operations

391
00:18:40,640 --> 00:18:43,360
we also apply our algorithm to many

392
00:18:43,360 --> 00:18:45,760
matrices in literature

393
00:18:45,760 --> 00:18:48,320
some of them are used in other linear

394
00:18:48,320 --> 00:18:53,000
layers and 4256

395
00:18:53,440 --> 00:18:57,679
mds matrices proposed in ls19

396
00:18:57,679 --> 00:19:01,520
the results are as follows

397
00:19:02,799 --> 00:19:05,600
this table shows the applications of our

398
00:19:05,600 --> 00:19:08,960
algorithm our algorithm can find better

399
00:19:08,960 --> 00:19:11,840
implementations for many cases

400
00:19:11,840 --> 00:19:14,640
and for every result the depths can

401
00:19:14,640 --> 00:19:17,919
reach the minimum depth

402
00:19:20,799 --> 00:19:24,400
this table shows the results of many mds

403
00:19:24,400 --> 00:19:25,760
matrices

404
00:19:25,760 --> 00:19:28,880
we can optimize more than half of the

405
00:19:28,880 --> 00:19:32,400
matrices than before

406
00:19:35,679 --> 00:19:38,160
this table shows the results of aes

407
00:19:38,160 --> 00:19:41,120
mixed columns in hardware we find that

408
00:19:41,120 --> 00:19:42,320
the power

409
00:19:42,320 --> 00:19:45,039
is relevant to the latency

410
00:19:45,039 --> 00:19:47,520
although some limitations have fewer

411
00:19:47,520 --> 00:19:51,039
actual operations the power and latency

412
00:19:51,039 --> 00:19:52,480
are larger

413
00:19:52,480 --> 00:19:55,679
our imitation has the smallest power and

414
00:19:55,679 --> 00:19:58,320
latency

415
00:19:59,360 --> 00:20:04,039
that's all thanks for your attention

416
00:20:10,159 --> 00:20:12,240
you

