1
00:00:00,880 --> 00:00:02,720
hello everyone today we are going to

2
00:00:02,720 --> 00:00:04,880
talk about my work on a fastener

3
00:00:04,880 --> 00:00:06,319
collision attacks

4
00:00:06,319 --> 00:00:09,360
so this is a joint work with my two phd

5
00:00:09,360 --> 00:00:11,599
uh director optimal fook and the patrick

6
00:00:11,599 --> 00:00:12,639
derbys

7
00:00:12,639 --> 00:00:14,960
so fast near collision attacks our new

8
00:00:14,960 --> 00:00:16,880
generic attack against stream cipher

9
00:00:16,880 --> 00:00:20,320
first introduced at auroclip 18 by zhang

10
00:00:20,320 --> 00:00:23,199
tsu and meijer against gwen v1

11
00:00:23,199 --> 00:00:26,160
and after satsang did another paper for

12
00:00:26,160 --> 00:00:29,679
851 at azercrip 90.

13
00:00:29,679 --> 00:00:32,000
the basic id of the fastener collision

14
00:00:32,000 --> 00:00:33,040
attack

15
00:00:33,040 --> 00:00:35,120
which is an internal state recovery

16
00:00:35,120 --> 00:00:37,840
attack is a divide and conquer where you

17
00:00:37,840 --> 00:00:41,040
split the internal state in two parts

18
00:00:41,040 --> 00:00:43,600
the core parts that you will first

19
00:00:43,600 --> 00:00:44,559
search

20
00:00:44,559 --> 00:00:46,320
and retrieve with a near collision

21
00:00:46,320 --> 00:00:48,960
property and the knowledge of a small

22
00:00:48,960 --> 00:00:51,680
bit whatever the knowledge of a small

23
00:00:51,680 --> 00:00:55,280
number of the keystream bit

24
00:00:55,520 --> 00:00:58,000
very few very few information on the

25
00:00:58,000 --> 00:01:00,239
crystal and the second part the rest

26
00:01:00,239 --> 00:01:02,559
part is easily computable from the

27
00:01:02,559 --> 00:01:04,959
knowledge of the cardboard

28
00:01:04,959 --> 00:01:07,760
so in the paper

29
00:01:07,760 --> 00:01:09,760
there was extension of the state

30
00:01:09,760 --> 00:01:13,040
recovery to key recovery with a very

31
00:01:13,040 --> 00:01:15,360
efficient complexity for example for

32
00:01:15,360 --> 00:01:17,119
queen v1

33
00:01:17,119 --> 00:01:20,000
there is something like a power 2 to the

34
00:01:20,000 --> 00:01:23,920
2 to the power 12 about

35
00:01:24,080 --> 00:01:26,960
economy compared to the existing search

36
00:01:26,960 --> 00:01:29,840
and for a fair brand um your fish

37
00:01:29,840 --> 00:01:34,079
computer could normally run the attack

38
00:01:34,079 --> 00:01:36,079
we were really happy to to see that

39
00:01:36,079 --> 00:01:38,479
because we wanted to do something else

40
00:01:38,479 --> 00:01:40,079
on february

41
00:01:40,079 --> 00:01:43,280
so we give it to students to implement

42
00:01:43,280 --> 00:01:44,799
the attack

43
00:01:44,799 --> 00:01:47,360
and as a semester project and at the end

44
00:01:47,360 --> 00:01:49,920
of the semester for 10 groups that had

45
00:01:49,920 --> 00:01:50,799
to

46
00:01:50,799 --> 00:01:51,680
well

47
00:01:51,680 --> 00:01:53,439
implement the attack

48
00:01:53,439 --> 00:01:55,920
and there was only one successful

49
00:01:55,920 --> 00:01:57,759
implementation with it

50
00:01:57,759 --> 00:01:59,920
it's not really surprising because the

51
00:01:59,920 --> 00:02:02,079
attack is really hard to understand with

52
00:02:02,079 --> 00:02:05,119
a lot of mathematical

53
00:02:05,439 --> 00:02:08,160
details that make it really hard for

54
00:02:08,160 --> 00:02:09,679
students i think

55
00:02:09,679 --> 00:02:10,639
and

56
00:02:10,639 --> 00:02:12,480
it's a successful implementation of the

57
00:02:12,480 --> 00:02:14,239
attack was really slow and the code

58
00:02:14,239 --> 00:02:16,400
wasn't too bad so

59
00:02:16,400 --> 00:02:18,480
we went back to the paper

60
00:02:18,480 --> 00:02:21,920
to understand why it was so slow and

61
00:02:21,920 --> 00:02:25,280
going back to the paper we found a worth

62
00:02:25,280 --> 00:02:26,080
in

63
00:02:26,080 --> 00:02:29,040
the complexity of the curve part

64
00:02:29,040 --> 00:02:31,280
so that's what i'm going to present here

65
00:02:31,280 --> 00:02:32,080
so

66
00:02:32,080 --> 00:02:35,680
why the core part doesn't work

67
00:02:35,680 --> 00:02:37,120
and so

68
00:02:37,120 --> 00:02:39,760
what's the central idea of the car part

69
00:02:39,760 --> 00:02:40,560
is

70
00:02:40,560 --> 00:02:42,800
the self-refined method which is a

71
00:02:42,800 --> 00:02:45,200
computation

72
00:02:45,200 --> 00:02:46,400
split

73
00:02:46,400 --> 00:02:49,599
in three phases so the first phases

74
00:02:49,599 --> 00:02:52,319
phase is to compute

75
00:02:52,319 --> 00:02:54,959
by some variant of a

76
00:02:54,959 --> 00:02:57,440
differential distribution table

77
00:02:57,440 --> 00:02:58,560
that is

78
00:02:58,560 --> 00:03:01,599
called td

79
00:03:01,760 --> 00:03:05,040
so basically td match a key stream k a

80
00:03:05,040 --> 00:03:08,560
difference on this key stream to good

81
00:03:08,560 --> 00:03:10,319
differences in the state good

82
00:03:10,319 --> 00:03:12,400
differences in the state being defined

83
00:03:12,400 --> 00:03:14,400
by being small

84
00:03:14,400 --> 00:03:16,879
and there is one state that will give

85
00:03:16,879 --> 00:03:20,640
you the key stream that you're searching

86
00:03:20,640 --> 00:03:23,200
and when you add these good differences

87
00:03:23,200 --> 00:03:24,239
to the

88
00:03:24,239 --> 00:03:26,640
state

89
00:03:26,879 --> 00:03:30,080
you obtain your near

90
00:03:30,080 --> 00:03:32,720
key stream so the key stream added to

91
00:03:32,720 --> 00:03:33,680
those

92
00:03:33,680 --> 00:03:36,480
differences uh delta key

93
00:03:36,480 --> 00:03:39,040
after that uh after this pre-computation

94
00:03:39,040 --> 00:03:42,000
that is normally you do it and then it's

95
00:03:42,000 --> 00:03:45,840
okay you have the unknown phase so the

96
00:03:45,840 --> 00:03:48,319
that's really where the error is so i'm

97
00:03:48,319 --> 00:03:51,200
going to stress uh the result of this

98
00:03:51,200 --> 00:03:54,799
online phase which is a set x that has a

99
00:03:54,799 --> 00:03:56,959
high probability to contain

100
00:03:56,959 --> 00:03:59,200
your internal state that will that

101
00:03:59,200 --> 00:04:01,599
generate your keys to the what you're

102
00:04:01,599 --> 00:04:03,920
searching basic

103
00:04:03,920 --> 00:04:06,799
so the idea of the online phase is that

104
00:04:06,799 --> 00:04:08,959
you sample at random

105
00:04:08,959 --> 00:04:10,000
state

106
00:04:10,000 --> 00:04:12,480
that gives you a near

107
00:04:12,480 --> 00:04:14,959
the near key stream that you

108
00:04:14,959 --> 00:04:16,880
that you're studying

109
00:04:16,880 --> 00:04:18,639
and um

110
00:04:18,639 --> 00:04:21,199
you're using your table from the

111
00:04:21,199 --> 00:04:24,080
pre-computation phase to add a

112
00:04:24,080 --> 00:04:26,560
difference to the state

113
00:04:26,560 --> 00:04:29,199
to obtain uh the good key stream and

114
00:04:29,199 --> 00:04:31,919
after that you keep the candidate in the

115
00:04:31,919 --> 00:04:32,880
set

116
00:04:32,880 --> 00:04:35,919
and you do it a lot of time

117
00:04:35,919 --> 00:04:38,479
after that uh after the online phase

118
00:04:38,479 --> 00:04:40,080
there is something that is called the

119
00:04:40,080 --> 00:04:41,919
amplifying phase

120
00:04:41,919 --> 00:04:43,840
basically just a repetition and a

121
00:04:43,840 --> 00:04:46,960
combination of multiple online phases to

122
00:04:46,960 --> 00:04:49,120
increase the probability

123
00:04:49,120 --> 00:04:51,440
but it's not important for us what's

124
00:04:51,440 --> 00:04:53,919
really important is the online phase and

125
00:04:53,919 --> 00:04:55,680
the fact that

126
00:04:55,680 --> 00:04:58,479
the only things that you use in the

127
00:04:58,479 --> 00:05:00,080
online phase is

128
00:05:00,080 --> 00:05:02,160
the knowledge of the key stream

129
00:05:02,160 --> 00:05:03,759
so basically

130
00:05:03,759 --> 00:05:05,759
if you have a two states that give you

131
00:05:05,759 --> 00:05:08,160
the same key stream normally with what

132
00:05:08,160 --> 00:05:11,039
you're seeing here you

133
00:05:11,039 --> 00:05:12,800
shouldn't

134
00:05:12,800 --> 00:05:14,800
be able to differentiate between these

135
00:05:14,800 --> 00:05:16,479
two key streams

136
00:05:16,479 --> 00:05:18,639
between these two states

137
00:05:18,639 --> 00:05:19,360
and

138
00:05:19,360 --> 00:05:20,639
that's really

139
00:05:20,639 --> 00:05:21,520
why

140
00:05:21,520 --> 00:05:24,960
as this method will not network because

141
00:05:24,960 --> 00:05:27,680
as i said the things that interest us

142
00:05:27,680 --> 00:05:30,400
are here is the set x at the end and

143
00:05:30,400 --> 00:05:32,960
more precisely the size of the set x and

144
00:05:32,960 --> 00:05:34,800
the probability that the

145
00:05:34,800 --> 00:05:37,520
good uh internal state

146
00:05:37,520 --> 00:05:39,600
well the good core part of the internal

147
00:05:39,600 --> 00:05:42,560
set is in the set

148
00:05:42,560 --> 00:05:43,440
and

149
00:05:43,440 --> 00:05:45,280
when you

150
00:05:45,280 --> 00:05:47,599
watch

151
00:05:47,759 --> 00:05:51,120
the attack against queen v1

152
00:05:51,120 --> 00:05:53,840
you're searching for 12 bits of internal

153
00:05:53,840 --> 00:05:56,240
state with only the knowledge of two

154
00:05:56,240 --> 00:05:58,080
bits of history

155
00:05:58,080 --> 00:06:00,080
and the claim of the fastener collision

156
00:06:00,080 --> 00:06:03,199
attack is that the set x you obtain with

157
00:06:03,199 --> 00:06:05,280
the self-refined meters

158
00:06:05,280 --> 00:06:09,520
as a 838 element and the probability

159
00:06:09,520 --> 00:06:11,759
that the good state is in this set is

160
00:06:11,759 --> 00:06:15,199
around 90 percent which is a lot better

161
00:06:15,199 --> 00:06:17,520
than what you would expect

162
00:06:17,520 --> 00:06:21,840
if x was simple at random

163
00:06:22,720 --> 00:06:25,919
another suspicious thing

164
00:06:25,919 --> 00:06:28,080
with this attack against grain is that

165
00:06:28,080 --> 00:06:29,520
at one point

166
00:06:29,520 --> 00:06:31,680
if you see how the key stream is

167
00:06:31,680 --> 00:06:35,440
computed basically it's uh xor over

168
00:06:35,440 --> 00:06:38,319
five variables of the internal state and

169
00:06:38,319 --> 00:06:42,960
xor of uh with example of the

170
00:06:42,960 --> 00:06:45,039
of an output of a function

171
00:06:45,039 --> 00:06:46,160
h

172
00:06:46,160 --> 00:06:47,280
and uh

173
00:06:47,280 --> 00:06:49,599
in the fastner collision attack

174
00:06:49,599 --> 00:06:51,199
h is taken

175
00:06:51,199 --> 00:06:54,160
so output of h is taken

176
00:06:54,160 --> 00:06:55,840
um

177
00:06:55,840 --> 00:06:57,680
that means that you're already

178
00:06:57,680 --> 00:07:02,000
constraining the search space with none

179
00:07:02,000 --> 00:07:04,720
without using the knowledge of the case

180
00:07:04,720 --> 00:07:07,199
stream so we don't know

181
00:07:07,199 --> 00:07:10,319
how or why they can do it but apparently

182
00:07:10,319 --> 00:07:12,479
they can

183
00:07:12,479 --> 00:07:13,919
um

184
00:07:13,919 --> 00:07:16,560
the same thing is done with a five round

185
00:07:16,560 --> 00:07:19,039
basically they're searching for 15 bits

186
00:07:19,039 --> 00:07:21,840
of internal state with only two bits of

187
00:07:21,840 --> 00:07:24,720
key stream uh well with only a knowledge

188
00:07:24,720 --> 00:07:26,880
of two bit of g string

189
00:07:26,880 --> 00:07:28,800
and the claim of the fastener collision

190
00:07:28,800 --> 00:07:30,479
attack is that

191
00:07:30,479 --> 00:07:32,240
the set x you obtain after the

192
00:07:32,240 --> 00:07:35,960
self-refine method contains

193
00:07:35,960 --> 00:07:39,280
7835 elements and a probability that the

194
00:07:39,280 --> 00:07:41,520
good value what's a good internal stat

195
00:07:41,520 --> 00:07:45,280
is in the set should be more than 99

196
00:07:45,280 --> 00:07:47,919
which is better once again than

197
00:07:47,919 --> 00:07:50,240
what you would expect

198
00:07:50,240 --> 00:07:53,199
if x was taken at random

199
00:07:53,199 --> 00:07:54,240
and

200
00:07:54,240 --> 00:07:56,000
the claim that we have with this work is

201
00:07:56,000 --> 00:07:59,360
that this probability of first

202
00:08:00,080 --> 00:08:01,680
basically because you cannot

203
00:08:01,680 --> 00:08:03,360
differentiate between

204
00:08:03,360 --> 00:08:05,440
a good and a bad

205
00:08:05,440 --> 00:08:07,199
internal state that will give you the

206
00:08:07,199 --> 00:08:09,520
same history

207
00:08:09,520 --> 00:08:10,840
this is

208
00:08:10,840 --> 00:08:14,960
a said a bit more formally with a simple

209
00:08:14,960 --> 00:08:17,840
information theory argument so if you

210
00:08:17,840 --> 00:08:20,160
have the algorithm a that will be the

211
00:08:20,160 --> 00:08:21,919
self-refined method

212
00:08:21,919 --> 00:08:25,360
that deck has an input a function f so

213
00:08:25,360 --> 00:08:26,800
stream cipher

214
00:08:26,800 --> 00:08:27,759
and

215
00:08:27,759 --> 00:08:29,520
some elements that will be the key

216
00:08:29,520 --> 00:08:31,199
stream

217
00:08:31,199 --> 00:08:33,919
and it outputs a subset

218
00:08:33,919 --> 00:08:34,880
of

219
00:08:34,880 --> 00:08:37,679
the antecedent of the key stream by the

220
00:08:37,679 --> 00:08:40,399
stream cipher and you're searching

221
00:08:40,399 --> 00:08:42,479
uh you're watching you're observing the

222
00:08:42,479 --> 00:08:44,720
probability that one particular value is

223
00:08:44,720 --> 00:08:46,880
in this set

224
00:08:46,880 --> 00:08:49,279
when it's like at random from the

225
00:08:49,279 --> 00:08:50,720
antecedent

226
00:08:50,720 --> 00:08:53,040
the probability is that this value is an

227
00:08:53,040 --> 00:08:56,080
interesting is in the set x sorry

228
00:08:56,080 --> 00:08:59,200
should be about the size of x divided by

229
00:08:59,200 --> 00:09:02,959
the size of all antecedent

230
00:09:02,959 --> 00:09:05,519
of your value of your question

231
00:09:05,519 --> 00:09:07,839
so the self-referring method

232
00:09:07,839 --> 00:09:12,399
verifies the hypothesis of this theorem

233
00:09:13,519 --> 00:09:14,720
nicely

234
00:09:14,720 --> 00:09:17,519
i'm going back to that

235
00:09:17,519 --> 00:09:19,519
just a bit later but

236
00:09:19,519 --> 00:09:20,959
the self-refinement

237
00:09:20,959 --> 00:09:23,519
verified this hypothesis

238
00:09:23,519 --> 00:09:24,720
so

239
00:09:24,720 --> 00:09:27,360
the probabilities that are given last

240
00:09:27,360 --> 00:09:29,279
slide should be false

241
00:09:29,279 --> 00:09:31,360
there is no way that they're right

242
00:09:31,360 --> 00:09:33,760
and a simple experiment to

243
00:09:33,760 --> 00:09:36,320
to prove that this probability is false

244
00:09:36,320 --> 00:09:37,279
is to

245
00:09:37,279 --> 00:09:39,120
first choose

246
00:09:39,120 --> 00:09:41,519
a key stream value run the self-refine

247
00:09:41,519 --> 00:09:44,240
method to append a set x and only now

248
00:09:44,240 --> 00:09:46,560
choose a secret word an internal state a

249
00:09:46,560 --> 00:09:48,160
good internal state that will give you

250
00:09:48,160 --> 00:09:50,320
the key stream and you check if this

251
00:09:50,320 --> 00:09:53,839
internal state is in the set

252
00:09:54,320 --> 00:09:56,800
as i said

253
00:09:56,800 --> 00:09:58,880
the self-reference method

254
00:09:58,880 --> 00:10:02,240
verify this hypothesis

255
00:10:02,240 --> 00:10:02,740
with

256
00:10:02,740 --> 00:10:03,839
[Music]

257
00:10:03,839 --> 00:10:07,279
this little details that

258
00:10:08,079 --> 00:10:09,440
we think

259
00:10:09,440 --> 00:10:12,959
that the kiss while the the value

260
00:10:12,959 --> 00:10:15,440
xs of the internal state should be

261
00:10:15,440 --> 00:10:18,240
simple at random in the antecedent of

262
00:10:18,240 --> 00:10:20,720
the keystroke

263
00:10:20,720 --> 00:10:23,120
normally if your stream cipher is well

264
00:10:23,120 --> 00:10:24,000
built

265
00:10:24,000 --> 00:10:25,120
it's true

266
00:10:25,120 --> 00:10:28,240
but maybe there is some bias in either

267
00:10:28,240 --> 00:10:30,240
the generation of the key stream from

268
00:10:30,240 --> 00:10:32,560
some general state or from

269
00:10:32,560 --> 00:10:34,560
when you choose the key to

270
00:10:34,560 --> 00:10:35,839
the

271
00:10:35,839 --> 00:10:38,000
internal state after the initialization

272
00:10:38,000 --> 00:10:39,600
phase

273
00:10:39,600 --> 00:10:42,079
and that give us uh basically this two

274
00:10:42,079 --> 00:10:44,160
point give us the two family of

275
00:10:44,160 --> 00:10:46,640
experiment that we will run the

276
00:10:46,640 --> 00:10:48,720
experiment to check that there is no

277
00:10:48,720 --> 00:10:49,680
bias

278
00:10:49,680 --> 00:10:50,560
in the

279
00:10:50,560 --> 00:10:52,880
generation of the key stream basically

280
00:10:52,880 --> 00:10:55,120
and the second experiment to

281
00:10:55,120 --> 00:10:57,839
experimentally verify the probability

282
00:10:57,839 --> 00:10:59,120
that a

283
00:10:59,120 --> 00:11:01,920
good value is in the set x when you run

284
00:11:01,920 --> 00:11:05,120
the self-profiling method

285
00:11:07,120 --> 00:11:09,839
so as we did with this verification we

286
00:11:09,839 --> 00:11:12,079
went back to the paper to understand

287
00:11:12,079 --> 00:11:15,279
where the theory was born

288
00:11:15,279 --> 00:11:16,720
because

289
00:11:16,720 --> 00:11:19,600
the verification didn't match what was

290
00:11:19,600 --> 00:11:21,680
given in the theory of the first

291
00:11:21,680 --> 00:11:23,680
nucleation attacks

292
00:11:23,680 --> 00:11:24,800
and

293
00:11:24,800 --> 00:11:27,680
basically what we found was that

294
00:11:27,680 --> 00:11:29,920
when they present the attack there is

295
00:11:29,920 --> 00:11:32,720
two independent term about the output of

296
00:11:32,720 --> 00:11:35,360
the self-refined method x

297
00:11:35,360 --> 00:11:37,440
one where they compute the probabilities

298
00:11:37,440 --> 00:11:39,519
that's a good value

299
00:11:39,519 --> 00:11:41,920
what's a good internal state is in the

300
00:11:41,920 --> 00:11:43,760
set x

301
00:11:43,760 --> 00:11:45,360
and another

302
00:11:45,360 --> 00:11:47,360
which computes the size

303
00:11:47,360 --> 00:11:49,519
of x at the end of the self-refined

304
00:11:49,519 --> 00:11:52,160
method and the one about the

305
00:11:52,160 --> 00:11:54,000
the size of the

306
00:11:54,000 --> 00:11:56,639
set outputted by the self-refined method

307
00:11:56,639 --> 00:11:59,040
is first

308
00:11:59,120 --> 00:12:01,440
and it's false in such a way that the

309
00:12:01,440 --> 00:12:04,000
size of x is always always under

310
00:12:04,000 --> 00:12:05,600
estimate

311
00:12:05,600 --> 00:12:08,480
that means that basically as a

312
00:12:08,480 --> 00:12:11,279
obtained at the end probability well a

313
00:12:11,279 --> 00:12:12,320
size

314
00:12:12,320 --> 00:12:13,839
a smaller

315
00:12:13,839 --> 00:12:17,040
a smaller set than what you would expect

316
00:12:17,040 --> 00:12:18,560
with the probability

317
00:12:18,560 --> 00:12:20,800
as a claim

318
00:12:20,800 --> 00:12:24,320
which explains why there is a this

319
00:12:24,320 --> 00:12:26,720
differences between the experimental

320
00:12:26,720 --> 00:12:28,010
value we

321
00:12:28,010 --> 00:12:29,360
[Music]

322
00:12:29,360 --> 00:12:31,120
obtain with

323
00:12:31,120 --> 00:12:34,240
the experiment and what is clone

324
00:12:34,240 --> 00:12:36,839
and basically we think that

325
00:12:36,839 --> 00:12:40,240
the the central error and the reasoning

326
00:12:40,240 --> 00:12:42,720
is that they assume that there is only

327
00:12:42,720 --> 00:12:45,600
one good value for the internal state

328
00:12:45,600 --> 00:12:47,680
which is true

329
00:12:47,680 --> 00:12:49,600
but only when you use

330
00:12:49,600 --> 00:12:52,880
enough keystream bits where whereas uh

331
00:12:52,880 --> 00:12:54,880
in the attacks they use a very very

332
00:12:54,880 --> 00:12:56,720
small number of custom bits something

333
00:12:56,720 --> 00:12:59,440
like five or

334
00:12:59,440 --> 00:13:01,839
five key stream bits or

335
00:13:01,839 --> 00:13:04,639
twenty keystone brick really really they

336
00:13:04,639 --> 00:13:06,800
use a really small number of display

337
00:13:06,800 --> 00:13:09,839
bits which explain why they

338
00:13:09,839 --> 00:13:12,560
have this

339
00:13:12,959 --> 00:13:15,680
differences probability

340
00:13:15,680 --> 00:13:17,040
so to

341
00:13:17,040 --> 00:13:19,279
go in more details in the experiment we

342
00:13:19,279 --> 00:13:20,399
did i

343
00:13:20,399 --> 00:13:21,360
will

344
00:13:21,360 --> 00:13:25,519
first introduce again a51 so it's an old

345
00:13:25,519 --> 00:13:28,639
stream cipher that was used in the gsm

346
00:13:28,639 --> 00:13:31,200
standard

347
00:13:32,639 --> 00:13:35,279
for two years ago now

348
00:13:35,279 --> 00:13:36,959
so it's a

349
00:13:36,959 --> 00:13:38,800
screen cipher composed of three

350
00:13:38,800 --> 00:13:40,800
registers

351
00:13:40,800 --> 00:13:43,839
and the clocking well

352
00:13:43,839 --> 00:13:46,000
it's an asynchronous clocking that are

353
00:13:46,000 --> 00:13:49,120
represent with a red or arrow and

354
00:13:49,120 --> 00:13:51,440
basically or to obtain the

355
00:13:51,440 --> 00:13:54,639
extreme at the end you add the three uh

356
00:13:54,639 --> 00:13:57,440
the last three bit well

357
00:13:57,440 --> 00:14:00,639
the last bit of the register

358
00:14:00,639 --> 00:14:03,440
so in the in the attack in the fastener

359
00:14:03,440 --> 00:14:06,000
collision attack against a51 basically

360
00:14:06,000 --> 00:14:08,160
what's going on is that

361
00:14:08,160 --> 00:14:11,680
are you searching uh 15 bits of internal

362
00:14:11,680 --> 00:14:12,959
states

363
00:14:12,959 --> 00:14:14,480
knowing only

364
00:14:14,480 --> 00:14:16,480
two bits two consecutive bits of the

365
00:14:16,480 --> 00:14:19,120
keystone so the 15 bits

366
00:14:19,120 --> 00:14:21,360
that you're searching are in deep blue

367
00:14:21,360 --> 00:14:24,000
basically

368
00:14:24,000 --> 00:14:26,480
and uh that corresponds to the first to

369
00:14:26,480 --> 00:14:27,199
the

370
00:14:27,199 --> 00:14:29,199
first two

371
00:14:29,199 --> 00:14:31,360
bit of key streams that will be output

372
00:14:31,360 --> 00:14:33,360
so when you run the self

373
00:14:33,360 --> 00:14:37,360
refine method you obtain a set x

374
00:14:37,360 --> 00:14:39,440
when you follow the claim of the paper

375
00:14:39,440 --> 00:14:41,920
of 7835

376
00:14:41,920 --> 00:14:43,040
elements

377
00:14:43,040 --> 00:14:45,519
for the 15 variables

378
00:14:45,519 --> 00:14:47,680
with the probability that it has a good

379
00:14:47,680 --> 00:14:50,320
value of more than 99

380
00:14:50,320 --> 00:14:52,720
and in fact if you

381
00:14:52,720 --> 00:14:53,600
watch

382
00:14:53,600 --> 00:14:54,959
the

383
00:14:54,959 --> 00:14:57,360
attack in more details

384
00:14:57,360 --> 00:14:59,519
they run the self-refined method with

385
00:14:59,519 --> 00:15:01,680
the first and second key stream bits the

386
00:15:01,680 --> 00:15:03,199
pair of the first and second constraint

387
00:15:03,199 --> 00:15:05,519
bit the pair of the second and third

388
00:15:05,519 --> 00:15:07,760
custom bit

389
00:15:07,760 --> 00:15:10,959
the pair of the

390
00:15:10,959 --> 00:15:13,600
third and fourth key stream bit and

391
00:15:13,600 --> 00:15:15,440
another player well the next pair after

392
00:15:15,440 --> 00:15:18,320
that and they merge all the results

393
00:15:18,320 --> 00:15:19,519
resulting

394
00:15:19,519 --> 00:15:22,320
at the end they obtain a set x

395
00:15:22,320 --> 00:15:25,440
of 2 to the power 16.6 candidates about

396
00:15:25,440 --> 00:15:28,240
for the 33 bits

397
00:15:28,240 --> 00:15:29,759
of the core parts that are in blue in

398
00:15:29,759 --> 00:15:31,519
the figure

399
00:15:31,519 --> 00:15:35,440
the this 33 bits

400
00:15:35,440 --> 00:15:39,600
allow you to compute the five first

401
00:15:39,600 --> 00:15:42,000
key stream bit

402
00:15:42,000 --> 00:15:44,959
and what's interests us in the

403
00:15:44,959 --> 00:15:47,519
in this case is that the set x at the

404
00:15:47,519 --> 00:15:48,639
end

405
00:15:48,639 --> 00:15:50,880
is a lot a lot smaller than what you

406
00:15:50,880 --> 00:15:53,600
would expect

407
00:15:53,839 --> 00:15:55,040
which will

408
00:15:55,040 --> 00:15:57,839
which well what you expect is to have a

409
00:15:57,839 --> 00:16:01,839
set of two to support 28 about

410
00:16:01,839 --> 00:16:02,720
so

411
00:16:02,720 --> 00:16:04,399
we did the experiment so first the

412
00:16:04,399 --> 00:16:06,880
experiment to check if there was a bias

413
00:16:06,880 --> 00:16:08,959
in the generation of the case streamer

414
00:16:08,959 --> 00:16:11,279
so when you have a five

415
00:16:11,279 --> 00:16:13,120
given value for the five bit of key

416
00:16:13,120 --> 00:16:15,839
stream there is exactly

417
00:16:15,839 --> 00:16:18,399
there are exactly two to the point 28

418
00:16:18,399 --> 00:16:20,720
configuration of the core part that will

419
00:16:20,720 --> 00:16:22,720
generate this history

420
00:16:22,720 --> 00:16:24,720
so there was no bs here

421
00:16:24,720 --> 00:16:26,800
and the second experiment we did

422
00:16:26,800 --> 00:16:29,279
we ran it was to

423
00:16:29,279 --> 00:16:31,440
uh check if there was a object in the

424
00:16:31,440 --> 00:16:33,680
initialization process so basically what

425
00:16:33,680 --> 00:16:36,959
we did was with some polish random a key

426
00:16:36,959 --> 00:16:38,320
and an iv

427
00:16:38,320 --> 00:16:40,399
we run the initialization phase and

428
00:16:40,399 --> 00:16:42,320
after that we count the number

429
00:16:42,320 --> 00:16:44,000
of time each

430
00:16:44,000 --> 00:16:47,199
configuration of the core part

431
00:16:47,199 --> 00:16:50,079
either reached

432
00:16:50,079 --> 00:16:51,519
so we did a

433
00:16:51,519 --> 00:16:55,199
2 to the power 36 initialization and

434
00:16:55,199 --> 00:16:57,279
what we obtained at the end

435
00:16:57,279 --> 00:17:00,800
is the free graphic here so in blue you

436
00:17:00,800 --> 00:17:02,079
have

437
00:17:02,079 --> 00:17:03,680
what's happening

438
00:17:03,680 --> 00:17:06,959
when you directly sample at random your

439
00:17:06,959 --> 00:17:11,520
33 bits of a car of the copper

440
00:17:11,520 --> 00:17:14,079
in the middle you have what's happening

441
00:17:14,079 --> 00:17:15,199
when you

442
00:17:15,199 --> 00:17:18,880
measure the same thing in the well about

443
00:17:18,880 --> 00:17:22,119
the car part when you choose a

444
00:17:22,119 --> 00:17:25,839
54-bit key and an iv at random

445
00:17:25,839 --> 00:17:30,480
54-bit key because it was one of the way

446
00:17:30,480 --> 00:17:35,039
a51 is using uh in the gsm protocol

447
00:17:35,039 --> 00:17:37,440
and in the right

448
00:17:37,440 --> 00:17:40,160
it's what's happening when

449
00:17:40,160 --> 00:17:42,000
um you

450
00:17:42,000 --> 00:17:45,039
sample at random a key of a

451
00:17:45,039 --> 00:17:47,200
64

452
00:17:47,200 --> 00:17:48,559
bits

453
00:17:48,559 --> 00:17:50,400
with an iv

454
00:17:50,400 --> 00:17:52,880
so it's simply the same

455
00:17:52,880 --> 00:17:54,960
at one point we wanted to

456
00:17:54,960 --> 00:17:57,760
to use a key square law to to verify

457
00:17:57,760 --> 00:17:59,679
that it was the same distribution but it

458
00:17:59,679 --> 00:18:01,039
cost too much

459
00:18:01,039 --> 00:18:01,760
and

460
00:18:01,760 --> 00:18:03,200
since

461
00:18:03,200 --> 00:18:06,720
we think that if such obvious was uh

462
00:18:06,720 --> 00:18:09,760
existed for if i wanted to it would

463
00:18:09,760 --> 00:18:12,400
already be

464
00:18:13,039 --> 00:18:15,440
it will already be known

465
00:18:15,440 --> 00:18:18,640
so we didn't go in more of this

466
00:18:18,640 --> 00:18:20,960
for this experiment

467
00:18:20,960 --> 00:18:24,160
the second experiment is uh to refute

468
00:18:24,160 --> 00:18:27,600
the claim about the probability

469
00:18:27,600 --> 00:18:28,480
of the

470
00:18:28,480 --> 00:18:30,799
fastener collision attacks so basically

471
00:18:30,799 --> 00:18:33,360
what we do is that we choose uh five

472
00:18:33,360 --> 00:18:35,600
bits of key stream we run the

473
00:18:35,600 --> 00:18:37,600
self-refine method with this five bit of

474
00:18:37,600 --> 00:18:39,120
keystream

475
00:18:39,120 --> 00:18:42,559
we obtain at the end of the second

476
00:18:42,559 --> 00:18:45,520
the set x with a 2 to the power 16.

477
00:18:45,520 --> 00:18:48,080
that's six values

478
00:18:48,080 --> 00:18:49,360
and

479
00:18:49,360 --> 00:18:51,679
only now we'll choose the the key and

480
00:18:51,679 --> 00:18:54,320
the iv we will run the initialization

481
00:18:54,320 --> 00:18:58,080
process such that the five first bit of

482
00:18:58,080 --> 00:19:00,640
key stream will match with the chosen

483
00:19:00,640 --> 00:19:02,080
bit of keystream

484
00:19:02,080 --> 00:19:05,360
and we will check if the core part is in

485
00:19:05,360 --> 00:19:07,679
the set x of candidate and of candidate

486
00:19:07,679 --> 00:19:09,440
or not

487
00:19:09,440 --> 00:19:10,480
so we

488
00:19:10,480 --> 00:19:12,320
run it a lot of times

489
00:19:12,320 --> 00:19:14,480
and the experimental probability is that

490
00:19:14,480 --> 00:19:17,200
the good basically the good state are in

491
00:19:17,200 --> 00:19:19,840
the set x at the end is 2 to the power

492
00:19:19,840 --> 00:19:22,320
minus 11.4

493
00:19:22,320 --> 00:19:24,799
which is a lot less than the

494
00:19:24,799 --> 00:19:26,720
than what is claimed by the fastener

495
00:19:26,720 --> 00:19:29,520
collision attacks

496
00:19:30,480 --> 00:19:33,200
once we did this experiment we went back

497
00:19:33,200 --> 00:19:36,400
to the card given for the attack against

498
00:19:36,400 --> 00:19:40,240
a51 which normally was supposed to test

499
00:19:40,240 --> 00:19:43,760
some components as the attack

500
00:19:44,320 --> 00:19:45,520
we

501
00:19:45,520 --> 00:19:48,400
found some bugs in this card

502
00:19:48,400 --> 00:19:51,120
so we correct them we add a for loop and

503
00:19:51,120 --> 00:19:54,480
a just a simple counter to compute the

504
00:19:54,480 --> 00:19:56,960
probability of the self-refine method at

505
00:19:56,960 --> 00:19:57,919
what

506
00:19:57,919 --> 00:19:59,760
yes the the probability that the good

507
00:19:59,760 --> 00:20:01,360
value is in the set after the

508
00:20:01,360 --> 00:20:03,360
self-refined method

509
00:20:03,360 --> 00:20:04,880
with the code of the

510
00:20:04,880 --> 00:20:06,720
given by the attack

511
00:20:06,720 --> 00:20:08,320
and

512
00:20:08,320 --> 00:20:10,799
when we run that we obtain results that

513
00:20:10,799 --> 00:20:12,559
are in line with

514
00:20:12,559 --> 00:20:15,600
the artillery and not the theory of the

515
00:20:15,600 --> 00:20:18,240
fastener collision attacks

516
00:20:18,240 --> 00:20:20,480
which explain which may explain the

517
00:20:20,480 --> 00:20:22,880
following statement by the author whilst

518
00:20:22,880 --> 00:20:24,880
they did the experiment

519
00:20:24,880 --> 00:20:28,000
and almost all the results

520
00:20:28,000 --> 00:20:31,039
match the theory

521
00:20:32,000 --> 00:20:34,880
so we did the same verification with a

522
00:20:34,880 --> 00:20:37,840
crane so it's a

523
00:20:37,840 --> 00:20:41,679
stream uh stream cipher

524
00:20:41,679 --> 00:20:44,000
a yeah it's a screen cipher of the

525
00:20:44,000 --> 00:20:46,000
e-stream portfolio

526
00:20:46,000 --> 00:20:50,240
composed by a 80-bit lfsr and a 80-bit

527
00:20:50,240 --> 00:20:52,720
nfsr and the

528
00:20:52,720 --> 00:20:55,039
output is compute with a

529
00:20:55,039 --> 00:20:57,039
function while the

530
00:20:57,039 --> 00:20:58,400
keystream bit i compute with the

531
00:20:58,400 --> 00:21:01,799
function h-star

532
00:21:02,000 --> 00:21:04,320
uh we did the first

533
00:21:04,320 --> 00:21:06,559
family of experiments to check there was

534
00:21:06,559 --> 00:21:09,280
no bias in the generation of the key

535
00:21:09,280 --> 00:21:11,280
stream

536
00:21:11,280 --> 00:21:12,080
by

537
00:21:12,080 --> 00:21:15,120
taking sampling at random key and iv and

538
00:21:15,120 --> 00:21:16,799
very flying that

539
00:21:16,799 --> 00:21:19,039
the

540
00:21:19,280 --> 00:21:21,520
the core part at the end

541
00:21:21,520 --> 00:21:22,960
is

542
00:21:22,960 --> 00:21:26,240
uniformly distributed which is the case

543
00:21:26,240 --> 00:21:28,240
and after that we did the simple

544
00:21:28,240 --> 00:21:31,360
experiment to refute the probability

545
00:21:31,360 --> 00:21:33,840
claim of the fast near collision attack

546
00:21:33,840 --> 00:21:34,720
we

547
00:21:34,720 --> 00:21:36,320
took

548
00:21:36,320 --> 00:21:39,760
we choose a value for the extreme we run

549
00:21:39,760 --> 00:21:42,640
the self-refined method

550
00:21:42,640 --> 00:21:44,720
we obtain a set

551
00:21:44,720 --> 00:21:46,480
x at the end

552
00:21:46,480 --> 00:21:50,159
and only now we take a random key and iv

553
00:21:50,159 --> 00:21:51,280
that match

554
00:21:51,280 --> 00:21:53,280
the key stream and we check

555
00:21:53,280 --> 00:21:55,840
after the initialization if the core

556
00:21:55,840 --> 00:21:59,520
part is in the set x

557
00:21:59,520 --> 00:22:01,840
it gives us the experimental probability

558
00:22:01,840 --> 00:22:03,200
close to uh

559
00:22:03,200 --> 00:22:04,159
well

560
00:22:04,159 --> 00:22:06,480
55 percent

561
00:22:06,480 --> 00:22:10,320
which is a lot less than the claim

562
00:22:10,320 --> 00:22:12,240
probability or from the fastener

563
00:22:12,240 --> 00:22:15,039
collision attacks in particular

564
00:22:15,039 --> 00:22:17,600
the overall complexity of the attack

565
00:22:17,600 --> 00:22:20,559
against grain v1 should be increased by

566
00:22:20,559 --> 00:22:23,840
a factor of 2 to the power 40 about

567
00:22:23,840 --> 00:22:26,559
meaning that at the end

568
00:22:26,559 --> 00:22:28,640
the attack the fastener collision attack

569
00:22:28,640 --> 00:22:30,159
against grain is slower than the

570
00:22:30,159 --> 00:22:32,880
excessive surge

571
00:22:32,880 --> 00:22:35,520
as a conclusion the fastener collision

572
00:22:35,520 --> 00:22:38,400
attacks are not fast attacks the slower

573
00:22:38,400 --> 00:22:40,720
than the exhaustive search for grain and

574
00:22:40,720 --> 00:22:41,520
for

575
00:22:41,520 --> 00:22:44,639
a51 they're

576
00:22:45,280 --> 00:22:47,919
at most as fast and

577
00:22:47,919 --> 00:22:51,520
as attacked by golish 25 years ago

578
00:22:51,520 --> 00:22:53,440
as

579
00:22:53,440 --> 00:22:56,240
to explain why they are not as fast as

580
00:22:56,240 --> 00:23:00,320
claiming the original papers

581
00:23:00,320 --> 00:23:02,159
it's because there is an error and an

582
00:23:02,159 --> 00:23:04,000
analysis on the complexity of the

583
00:23:04,000 --> 00:23:06,320
self-referring method

584
00:23:06,320 --> 00:23:09,440
and we contact uh we contacted the

585
00:23:09,440 --> 00:23:10,880
author

586
00:23:10,880 --> 00:23:12,080
uh about

587
00:23:12,080 --> 00:23:13,039
this

588
00:23:13,039 --> 00:23:16,080
and uh mayor was uh

589
00:23:16,080 --> 00:23:18,880
okay with what we did basically he agree

590
00:23:18,880 --> 00:23:19,919
with uh

591
00:23:19,919 --> 00:23:20,840
what we

592
00:23:20,840 --> 00:23:24,799
presented uh a zombo ever uh disagree

593
00:23:24,799 --> 00:23:25,600
with

594
00:23:25,600 --> 00:23:27,919
what i just showed you so we agreed to

595
00:23:27,919 --> 00:23:32,880
disagree and i think uh if zhang want to

596
00:23:32,880 --> 00:23:36,400
to prove uh once and for all that's a

597
00:23:36,400 --> 00:23:38,880
fast near collision attack a really fast

598
00:23:38,880 --> 00:23:39,919
attack

599
00:23:39,919 --> 00:23:41,600
the easiest

600
00:23:41,600 --> 00:23:44,880
way to do so is to implement completely

601
00:23:44,880 --> 00:23:47,760
the attack against a31 normally it

602
00:23:47,760 --> 00:23:49,760
should run on the

603
00:23:49,760 --> 00:23:52,159
on your office computer so thank you for

604
00:23:52,159 --> 00:23:53,840
your attention and if you have any

605
00:23:53,840 --> 00:23:55,679
questions you can send demise to the

606
00:23:55,679 --> 00:24:00,360
return me piana or patrick

