1
00:00:01,520 --> 00:00:02,720
hello

2
00:00:02,720 --> 00:00:04,480
my name is lars lieber and i will

3
00:00:04,480 --> 00:00:06,560
present to you the paper

4
00:00:06,560 --> 00:00:08,480
quantum period finding is compression

5
00:00:08,480 --> 00:00:10,880
robust this is a joint work with

6
00:00:10,880 --> 00:00:13,280
alexander mai

7
00:00:13,280 --> 00:00:15,920
today only a few hundred physical qubits

8
00:00:15,920 --> 00:00:18,000
are available which also have a quite

9
00:00:18,000 --> 00:00:19,439
high noise rate

10
00:00:19,439 --> 00:00:22,400
and so are not capable of executing most

11
00:00:22,400 --> 00:00:26,400
of the quant algorithms known today

12
00:00:26,560 --> 00:00:28,880
moreover we do not have access to a

13
00:00:28,880 --> 00:00:31,599
single logical qubit in other words a

14
00:00:31,599 --> 00:00:33,280
noise free qubit

15
00:00:33,280 --> 00:00:34,880
which would require some thousand

16
00:00:34,880 --> 00:00:37,760
physical qubits to be created

17
00:00:37,760 --> 00:00:39,360
and on which

18
00:00:39,360 --> 00:00:41,600
most of our theoretical quant algorithms

19
00:00:41,600 --> 00:00:43,440
in the cryptographical field are built

20
00:00:43,440 --> 00:00:45,360
on

21
00:00:45,360 --> 00:00:48,160
however there are many companies such as

22
00:00:48,160 --> 00:00:52,079
ibm inq and sqc

23
00:00:52,079 --> 00:00:54,160
that have announced plans to build

24
00:00:54,160 --> 00:00:56,239
quantum computers with a few million

25
00:00:56,239 --> 00:00:57,760
physical qubits

26
00:00:57,760 --> 00:01:00,559
and quantum computers that can simulate

27
00:01:00,559 --> 00:01:02,960
a few hundred logical qubits in the next

28
00:01:02,960 --> 00:01:05,280
10 years

29
00:01:05,280 --> 00:01:07,760
our goal in this work is to reduce the

30
00:01:07,760 --> 00:01:10,240
number of logical qubits required for

31
00:01:10,240 --> 00:01:13,200
the class of period finding algorithms

32
00:01:13,200 --> 00:01:16,479
in order to use a few available logical

33
00:01:16,479 --> 00:01:19,680
qubits in the future more efficiently

34
00:01:19,680 --> 00:01:21,840
this will lead to quantum computers

35
00:01:21,840 --> 00:01:24,240
being earlier with fewer qubits already

36
00:01:24,240 --> 00:01:26,400
a threat to security

37
00:01:26,400 --> 00:01:28,240
and we use the time that we have to

38
00:01:28,240 --> 00:01:30,000
prepare

39
00:01:30,000 --> 00:01:32,560
for this we primarily study simon's

40
00:01:32,560 --> 00:01:35,360
problem which is defined as the problem

41
00:01:35,360 --> 00:01:38,000
to find the period as given access to a

42
00:01:38,000 --> 00:01:39,840
two to one function f

43
00:01:39,840 --> 00:01:42,720
with f of x is equal to f of x plus s

44
00:01:42,720 --> 00:01:44,320
for all x

45
00:01:44,320 --> 00:01:46,320
this problem is classically hard to

46
00:01:46,320 --> 00:01:48,799
solve and require at least two to the

47
00:01:48,799 --> 00:01:50,880
and a half queries to f

48
00:01:50,880 --> 00:01:52,640
more precisely we would have to find a

49
00:01:52,640 --> 00:01:55,759
collision in f to calculate s

50
00:01:55,759 --> 00:01:57,680
for a function that behaves like when

51
00:01:57,680 --> 00:01:59,520
like a random function by side of the

52
00:01:59,520 --> 00:02:02,320
period of s

53
00:02:02,560 --> 00:02:04,479
quantumly on the other side this problem

54
00:02:04,479 --> 00:02:06,240
can be solved efficiently

55
00:02:06,240 --> 00:02:08,560
in polynomial time with roughly n

56
00:02:08,560 --> 00:02:12,160
queries to f and two n qubits

57
00:02:12,160 --> 00:02:14,400
this can be done by using simon's

58
00:02:14,400 --> 00:02:16,319
algorithm

59
00:02:16,319 --> 00:02:19,040
this algorithm uses quantum access to f

60
00:02:19,040 --> 00:02:21,520
in the circuit below to sample uniform

61
00:02:21,520 --> 00:02:25,200
at random y's that are orthogonal to s

62
00:02:25,200 --> 00:02:27,599
after collecting n minus 1 linear

63
00:02:27,599 --> 00:02:29,680
independent vectors wise

64
00:02:29,680 --> 00:02:32,239
the algorithm then calculates as via

65
00:02:32,239 --> 00:02:35,440
gauss from the collected wires

66
00:02:35,440 --> 00:02:37,760
thereby its holds that expected about n

67
00:02:37,760 --> 00:02:40,959
plus 1 random sampled y's are sufficient

68
00:02:40,959 --> 00:02:43,040
to collect n minus 1 linear independent

69
00:02:43,040 --> 00:02:45,280
vectors

70
00:02:45,280 --> 00:02:48,000
the underlying circuit requires n qubits

71
00:02:48,000 --> 00:02:50,800
to represent the input of f as well as

72
00:02:50,800 --> 00:02:52,879
the sample vector at the end

73
00:02:52,879 --> 00:02:55,519
and additionally n qubits to hold the

74
00:02:55,519 --> 00:02:58,480
volume of f of x

75
00:02:58,480 --> 00:03:01,360
an example distribution of the y's for n

76
00:03:01,360 --> 00:03:05,440
equals 3 and s equals 0 to 0 0 1 can be

77
00:03:05,440 --> 00:03:08,080
seen here on the right

78
00:03:08,080 --> 00:03:10,560
note that the 0 0 0 vector contains no

79
00:03:10,560 --> 00:03:12,319
information about s

80
00:03:12,319 --> 00:03:14,480
however the amplitude of the zero vector

81
00:03:14,480 --> 00:03:17,440
decreased with increasing n

82
00:03:17,440 --> 00:03:20,080
an application of sam's algorithm will

83
00:03:20,080 --> 00:03:22,000
be an attack on the famous even mansur

84
00:03:22,000 --> 00:03:23,360
cipher

85
00:03:23,360 --> 00:03:25,680
the evenmensur cipher is defined over a

86
00:03:25,680 --> 00:03:28,319
key and a public permutation

87
00:03:28,319 --> 00:03:30,560
whereby the encryption of m is computed

88
00:03:30,560 --> 00:03:32,799
as the key plus the permutation of the

89
00:03:32,799 --> 00:03:34,159
key plus m

90
00:03:34,159 --> 00:03:36,879
and is classically provable secure

91
00:03:36,879 --> 00:03:39,280
in the sense that any attacker require

92
00:03:39,280 --> 00:03:41,760
at least two to the and a half queries

93
00:03:41,760 --> 00:03:44,159
to the cipher to break it with constant

94
00:03:44,159 --> 00:03:46,159
probability

95
00:03:46,159 --> 00:03:48,480
using science algorithm with quantum

96
00:03:48,480 --> 00:03:50,799
access to the cipher the key can be

97
00:03:50,799 --> 00:03:53,599
required in polynomial time

98
00:03:53,599 --> 00:03:54,560
for this

99
00:03:54,560 --> 00:03:57,439
a function f is defined as f of x is

100
00:03:57,439 --> 00:03:59,760
equal to the encryption of x plus the

101
00:03:59,760 --> 00:04:02,080
permutation of x

102
00:04:02,080 --> 00:04:03,760
it is easy to see

103
00:04:03,760 --> 00:04:06,480
that the secret key is a period of f

104
00:04:06,480 --> 00:04:09,280
and so the 60 key can be efficiently be

105
00:04:09,280 --> 00:04:12,720
found via sim's algorithm

106
00:04:12,879 --> 00:04:14,879
let us come to our compression technique

107
00:04:14,879 --> 00:04:16,959
we are hash functions

108
00:04:16,959 --> 00:04:19,040
the starting point of our study was the

109
00:04:19,040 --> 00:04:21,680
question whether all n bits of f are

110
00:04:21,680 --> 00:04:23,919
really necessary or if the number of

111
00:04:23,919 --> 00:04:27,120
qubits representing f x can be reduced

112
00:04:27,120 --> 00:04:28,960
or in other words f of x can be

113
00:04:28,960 --> 00:04:30,160
compressed

114
00:04:30,160 --> 00:04:31,919
previous approach to reduce the number

115
00:04:31,919 --> 00:04:34,320
of qubits required for such algorithms

116
00:04:34,320 --> 00:04:36,160
focus only on reducing the number of

117
00:04:36,160 --> 00:04:39,040
input qubits required

118
00:04:39,040 --> 00:04:41,040
such as the mosker echad approach to

119
00:04:41,040 --> 00:04:43,680
recycle a single q bit for the input of

120
00:04:43,680 --> 00:04:46,479
time's algorithm for special cases

121
00:04:46,479 --> 00:04:48,479
our main observation by compressing f

122
00:04:48,479 --> 00:04:50,240
was that hashing preserves the

123
00:04:50,240 --> 00:04:52,960
collisions of f which leads to the fact

124
00:04:52,960 --> 00:04:55,360
that we will in simon circuit still only

125
00:04:55,360 --> 00:04:59,120
measure wires that are alternate to s

126
00:04:59,120 --> 00:05:00,960
on the other hand however

127
00:05:00,960 --> 00:05:03,199
hashing introduced additional collisions

128
00:05:03,199 --> 00:05:04,880
that affect the distribution of the

129
00:05:04,880 --> 00:05:06,240
sampled rise

130
00:05:06,240 --> 00:05:08,160
especially a bias to what the zero

131
00:05:08,160 --> 00:05:10,240
vector is introduced

132
00:05:10,240 --> 00:05:12,320
in worst case scenarios this collision

133
00:05:12,320 --> 00:05:14,479
could introduce new periods

134
00:05:14,479 --> 00:05:16,479
or for a constant hash function could

135
00:05:16,479 --> 00:05:19,680
shift all probability to the zero vector

136
00:05:19,680 --> 00:05:22,000
to counteract the fact that the hash

137
00:05:22,000 --> 00:05:23,840
function might introduce too many bad

138
00:05:23,840 --> 00:05:25,840
new collisions and shift too much

139
00:05:25,840 --> 00:05:28,080
probability mice away from a complete

140
00:05:28,080 --> 00:05:31,120
subspace we sample our ys to different

141
00:05:31,120 --> 00:05:33,039
hash functions

142
00:05:33,039 --> 00:05:34,800
the intuition behind this concept can be

143
00:05:34,800 --> 00:05:37,280
seen here on the right

144
00:05:37,280 --> 00:05:39,759
the green areas represent vectors that

145
00:05:39,759 --> 00:05:41,680
are orthogonal to all vectors measured

146
00:05:41,680 --> 00:05:44,000
to specific hash function

147
00:05:44,000 --> 00:05:46,720
we see that the 0 and the s vector are

148
00:05:46,720 --> 00:05:49,360
contained in all these subspaces

149
00:05:49,360 --> 00:05:51,759
by combining the measured vectors to the

150
00:05:51,759 --> 00:05:54,080
different hash functions we can compute

151
00:05:54,080 --> 00:05:56,319
the intersection of the

152
00:05:56,319 --> 00:05:57,759
different

153
00:05:57,759 --> 00:06:00,479
subspaces which only contains the 0 and

154
00:06:00,479 --> 00:06:03,199
the s vector

155
00:06:03,199 --> 00:06:05,600
for our proof we used a set of universal

156
00:06:05,600 --> 00:06:08,080
hash functions such as for example the

157
00:06:08,080 --> 00:06:11,039
set of the scalab products modulo 2.

158
00:06:11,039 --> 00:06:13,600
it is worth denoting that we conjecture

159
00:06:13,600 --> 00:06:15,680
that the necessarity of multiple hash

160
00:06:15,680 --> 00:06:18,319
functions is just a proof at effect

161
00:06:18,319 --> 00:06:20,720
and that in most cases one single hash

162
00:06:20,720 --> 00:06:23,440
function is sufficient

163
00:06:23,440 --> 00:06:25,039
or in other words that with high

164
00:06:25,039 --> 00:06:27,280
probability each of these subspaces

165
00:06:27,280 --> 00:06:29,680
already contains only the zero and the s

166
00:06:29,680 --> 00:06:32,000
vector

167
00:06:32,000 --> 00:06:34,319
our hash algorithm thereby is almost the

168
00:06:34,319 --> 00:06:36,720
same as the original algorithm

169
00:06:36,720 --> 00:06:38,639
again we use the similar circuit to

170
00:06:38,639 --> 00:06:41,680
collect device orthogonal to s

171
00:06:41,680 --> 00:06:43,919
the only difference is

172
00:06:43,919 --> 00:06:45,759
that the embedding of f is in each

173
00:06:45,759 --> 00:06:48,240
iteration replaced with the embedding of

174
00:06:48,240 --> 00:06:51,120
a different hashed version of f

175
00:06:51,120 --> 00:06:53,199
we have shown in our paper that we still

176
00:06:53,199 --> 00:06:55,440
only measure y's that are orthogonal to

177
00:06:55,440 --> 00:06:56,560
s

178
00:06:56,560 --> 00:06:58,560
as well as the algorithm still works

179
00:06:58,560 --> 00:07:01,120
with the constant factor of overhead

180
00:07:01,120 --> 00:07:03,440
additionally we provide some example in

181
00:07:03,440 --> 00:07:06,400
our paper how such hashed embeddings

182
00:07:06,400 --> 00:07:08,160
could be implemented

183
00:07:08,160 --> 00:07:10,160
which only require roughly twice the

184
00:07:10,160 --> 00:07:13,440
depth of the unhatched version

185
00:07:13,440 --> 00:07:15,120
let us consider the distribution of the

186
00:07:15,120 --> 00:07:17,120
y's for a fixed hash function compared

187
00:07:17,120 --> 00:07:19,520
to the original sine distribution

188
00:07:19,520 --> 00:07:22,160
such a distribution might look like this

189
00:07:22,160 --> 00:07:23,759
for example for our n

190
00:07:23,759 --> 00:07:28,479
equal to 3 and s equal to 0 0 1 case

191
00:07:28,479 --> 00:07:30,319
here we already see the bias towards

192
00:07:30,319 --> 00:07:31,599
zero

193
00:07:31,599 --> 00:07:33,520
and also that some y's are no longer

194
00:07:33,520 --> 00:07:35,440
measurable

195
00:07:35,440 --> 00:07:37,759
on the good side however we see again

196
00:07:37,759 --> 00:07:39,280
that the probability to measure a

197
00:07:39,280 --> 00:07:41,440
non-orthogonal vector of y's remains at

198
00:07:41,440 --> 00:07:43,840
zero

199
00:07:43,840 --> 00:07:45,680
at other distribution graphs to other

200
00:07:45,680 --> 00:07:48,000
hash functions we see further that for

201
00:07:48,000 --> 00:07:50,080
example for some hash functions the

202
00:07:50,080 --> 00:07:52,080
probability for some articular vector of

203
00:07:52,080 --> 00:07:55,120
y's might even be greater as before

204
00:07:55,120 --> 00:07:57,680
or that as mentioned before for some

205
00:07:57,680 --> 00:07:59,520
hash functions whose subspaces are no

206
00:07:59,520 --> 00:08:02,000
more measurable

207
00:08:02,000 --> 00:08:04,560
but also that which vector is affected

208
00:08:04,560 --> 00:08:06,960
depends on the hash function

209
00:08:06,960 --> 00:08:09,199
taking the average distribution over all

210
00:08:09,199 --> 00:08:11,440
our hash functions to one bit we see

211
00:08:11,440 --> 00:08:13,360
that the probability of measuring the

212
00:08:13,360 --> 00:08:15,759
zero vector increased only by roughly

213
00:08:15,759 --> 00:08:16,960
one half

214
00:08:16,960 --> 00:08:19,599
and also that the probability of

215
00:08:19,599 --> 00:08:21,680
any other vectors decreased by only a

216
00:08:21,680 --> 00:08:23,440
factor of two

217
00:08:23,440 --> 00:08:25,280
we also proved this observation in our

218
00:08:25,280 --> 00:08:27,759
paper

219
00:08:27,759 --> 00:08:30,000
let us summarize our results

220
00:08:30,000 --> 00:08:32,080
even with only access to a hashed

221
00:08:32,080 --> 00:08:34,640
embedding of f we sample only y's that

222
00:08:34,640 --> 00:08:36,640
are orthogonal to s

223
00:08:36,640 --> 00:08:38,880
furthermore on average over the choice

224
00:08:38,880 --> 00:08:40,958
of the hash function the distribution of

225
00:08:40,958 --> 00:08:42,719
the wires is preserved

226
00:08:42,719 --> 00:08:44,480
except for a constant bias towards the

227
00:08:44,480 --> 00:08:45,920
zero vector

228
00:08:45,920 --> 00:08:47,760
which means that we can use the same

229
00:08:47,760 --> 00:08:50,480
post-processing as before after sorting

230
00:08:50,480 --> 00:08:52,800
out the zero vectors that do not provide

231
00:08:52,800 --> 00:08:56,640
any information about s anyways

232
00:08:56,640 --> 00:08:58,480
furthermore we expect only to require a

233
00:08:58,480 --> 00:09:00,399
constant factor of more measurements due

234
00:09:00,399 --> 00:09:03,120
to term s with the hashed approach

235
00:09:03,120 --> 00:09:06,000
and that in many cases only a

236
00:09:06,000 --> 00:09:07,440
doubling of the circuit depth is

237
00:09:07,440 --> 00:09:09,680
required to implement the embedding of

238
00:09:09,680 --> 00:09:13,120
the hashed version of f

239
00:09:13,200 --> 00:09:15,440
summarized in one sentence require only

240
00:09:15,440 --> 00:09:17,839
a small additional effort to solve the

241
00:09:17,839 --> 00:09:20,320
same problem with almost only half the

242
00:09:20,320 --> 00:09:22,800
cubits required

243
00:09:22,800 --> 00:09:24,880
to put this in some perspective

244
00:09:24,880 --> 00:09:27,120
in the setting of eve mansour instead of

245
00:09:27,120 --> 00:09:29,920
two n qubits we require only n plus one

246
00:09:29,920 --> 00:09:31,040
qubit

247
00:09:31,040 --> 00:09:33,279
with the number of measurements required

248
00:09:33,279 --> 00:09:35,680
increased from n plus one to two n plus

249
00:09:35,680 --> 00:09:37,519
two

250
00:09:37,519 --> 00:09:40,000
we would like to stress again that we

251
00:09:40,000 --> 00:09:42,160
conjecture that in most cases a single

252
00:09:42,160 --> 00:09:43,920
projection onto a single bit should be

253
00:09:43,920 --> 00:09:46,560
sufficient

254
00:09:46,720 --> 00:09:49,040
furthermore our hash technique can be

255
00:09:49,040 --> 00:09:50,800
combined with other techniques such as

256
00:09:50,800 --> 00:09:53,120
the grover meets simon's approach or the

257
00:09:53,120 --> 00:09:54,880
offline syme technique

258
00:09:54,880 --> 00:09:57,279
which also eliminates our reliance on

259
00:09:57,279 --> 00:09:59,200
implementations of embeddings of hashed

260
00:09:59,200 --> 00:10:01,120
versions of the function

261
00:10:01,120 --> 00:10:02,800
and greatly simplify

262
00:10:02,800 --> 00:10:06,719
the application of our hash technique

263
00:10:06,959 --> 00:10:08,560
we show this in our paper in more

264
00:10:08,560 --> 00:10:11,120
details to give a rough outline to this

265
00:10:11,120 --> 00:10:12,560
combination

266
00:10:12,560 --> 00:10:14,160
to use our hash technique in this

267
00:10:14,160 --> 00:10:16,560
context we only require simple

268
00:10:16,560 --> 00:10:19,279
implementation of our used hash function

269
00:10:19,279 --> 00:10:20,959
which can be realized for our example

270
00:10:20,959 --> 00:10:23,120
set of hash functions with the use of a

271
00:10:23,120 --> 00:10:26,240
single multi-ectrophilic gate

272
00:10:26,240 --> 00:10:28,399
additionally we have shown that our hash

273
00:10:28,399 --> 00:10:30,640
technique is not limited to the simus

274
00:10:30,640 --> 00:10:32,399
algorithm

275
00:10:32,399 --> 00:10:34,399
but can also be applied to more general

276
00:10:34,399 --> 00:10:37,839
period-filing algorithms like shaw

277
00:10:37,839 --> 00:10:40,320
this results have also already been used

278
00:10:40,320 --> 00:10:43,040
for an attack on polymax the reference

279
00:10:43,040 --> 00:10:45,200
can be found in our paper

280
00:10:45,200 --> 00:10:47,360
to summarize our results in the light of

281
00:10:47,360 --> 00:10:48,560
security

282
00:10:48,560 --> 00:10:50,399
quantum computers might already be a

283
00:10:50,399 --> 00:10:52,640
greater threat to cryptography with

284
00:10:52,640 --> 00:10:55,519
fewer logical qubits and though earlier

285
00:10:55,519 --> 00:10:57,279
than expected

286
00:10:57,279 --> 00:11:01,160
thank you for your attention

