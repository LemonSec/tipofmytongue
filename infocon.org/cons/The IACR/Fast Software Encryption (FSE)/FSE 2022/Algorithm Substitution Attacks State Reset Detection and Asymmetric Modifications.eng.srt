1
00:00:01,839 --> 00:00:03,679
my name is phillip hodges and i will be

2
00:00:03,679 --> 00:00:05,200
presenting research done with douglas

3
00:00:05,200 --> 00:00:07,200
stabila on algorithm substitution

4
00:00:07,200 --> 00:00:09,440
attacks including a formalism for

5
00:00:09,440 --> 00:00:12,160
detecting such attacks with state resets

6
00:00:12,160 --> 00:00:14,400
and asymmetric methods for subverting

7
00:00:14,400 --> 00:00:17,440
symmetric encryption

8
00:00:17,440 --> 00:00:20,160
first i will define an asa then i will

9
00:00:20,160 --> 00:00:21,680
briefly discuss motivation for

10
00:00:21,680 --> 00:00:23,760
considering this kind of attack model i

11
00:00:23,760 --> 00:00:25,519
will talk about some past work on which

12
00:00:25,519 --> 00:00:27,519
our work is heavily based and then i

13
00:00:27,519 --> 00:00:28,880
will discuss the two parts of our

14
00:00:28,880 --> 00:00:31,760
research state resets and making asas

15
00:00:31,760 --> 00:00:34,320
asymmetric

16
00:00:34,399 --> 00:00:37,440
so firstly what is an asa

17
00:00:37,440 --> 00:00:40,320
an algorithm substitution attack or asa

18
00:00:40,320 --> 00:00:42,800
is an attack on a cryptographic scheme

19
00:00:42,800 --> 00:00:45,520
say asymmetric encryption scheme se

20
00:00:45,520 --> 00:00:47,600
where a component of the scheme is

21
00:00:47,600 --> 00:00:50,399
substituted for a malicious version

22
00:00:50,399 --> 00:00:51,920
in essence this model is going to

23
00:00:51,920 --> 00:00:54,160
broadly capture what might happen if the

24
00:00:54,160 --> 00:00:56,399
attacker is able to substitute the

25
00:00:56,399 --> 00:00:59,359
secure algorithm a user intends to use

26
00:00:59,359 --> 00:01:01,199
for another algorithm of the attacker's

27
00:01:01,199 --> 00:01:02,320
choice

28
00:01:02,320 --> 00:01:04,640
this model captures any of a very broad

29
00:01:04,640 --> 00:01:06,159
range of methods of undermining

30
00:01:06,159 --> 00:01:08,000
cryptography

31
00:01:08,000 --> 00:01:09,920
in our case we're mostly going to going

32
00:01:09,920 --> 00:01:11,439
to consider symmetric encryption

33
00:01:11,439 --> 00:01:13,920
specifically the encryption function

34
00:01:13,920 --> 00:01:15,200
se.inc

35
00:01:15,200 --> 00:01:17,680
from the symmetric encryption scheme se

36
00:01:17,680 --> 00:01:19,920
is being substituted with an algorithm

37
00:01:19,920 --> 00:01:21,200
sub dot inc

38
00:01:21,200 --> 00:01:23,119
which will run instead on every

39
00:01:23,119 --> 00:01:25,600
invocation of the encryption function

40
00:01:25,600 --> 00:01:28,240
we call sub.inc the subverted encryption

41
00:01:28,240 --> 00:01:30,720
algorithm

42
00:01:31,200 --> 00:01:33,119
the co the goal of the attacker here is

43
00:01:33,119 --> 00:01:34,880
going to be full recovery of the key

44
00:01:34,880 --> 00:01:37,200
used for symmetric encryption after

45
00:01:37,200 --> 00:01:38,840
observing some number of

46
00:01:38,840 --> 00:01:41,119
ciphertexts now you might think that

47
00:01:41,119 --> 00:01:42,560
this would be easy because we're giving

48
00:01:42,560 --> 00:01:45,360
the attacker a lot of capability

49
00:01:45,360 --> 00:01:47,759
indeed with no other requirement it

50
00:01:47,759 --> 00:01:50,399
would be trivial the attacker can simply

51
00:01:50,399 --> 00:01:52,880
substitute in an algorithm which outputs

52
00:01:52,880 --> 00:01:55,600
the key k on any input

53
00:01:55,600 --> 00:01:57,520
in practice however this would be

54
00:01:57,520 --> 00:01:59,680
obvious to the users decryption would

55
00:01:59,680 --> 00:02:01,280
fail for example

56
00:02:01,280 --> 00:02:03,360
the algorithm users would likely notice

57
00:02:03,360 --> 00:02:04,640
and they would stop using their

58
00:02:04,640 --> 00:02:06,079
encryption

59
00:02:06,079 --> 00:02:07,680
the likely enormous amount of effort

60
00:02:07,680 --> 00:02:09,679
that the attacker put into implementing

61
00:02:09,679 --> 00:02:12,319
this attack would yield nothing

62
00:02:12,319 --> 00:02:14,720
we could require that the asa create

63
00:02:14,720 --> 00:02:16,720
valid ciphertext so that decryption is

64
00:02:16,720 --> 00:02:18,640
always successful and the users would

65
00:02:18,640 --> 00:02:20,319
still be able to communicate

66
00:02:20,319 --> 00:02:22,160
in fact we'll go a little bit further

67
00:02:22,160 --> 00:02:24,560
than that

68
00:02:25,200 --> 00:02:27,760
we want an asa to be undetectable to the

69
00:02:27,760 --> 00:02:28,720
users

70
00:02:28,720 --> 00:02:31,120
to define undetectability we will use a

71
00:02:31,120 --> 00:02:33,599
detectability game this is a simple

72
00:02:33,599 --> 00:02:36,239
distinguishability game where the user u

73
00:02:36,239 --> 00:02:38,640
plays the role of the adversary tasked

74
00:02:38,640 --> 00:02:40,000
with determining whether or not the

75
00:02:40,000 --> 00:02:42,640
oracle they are given access to

76
00:02:42,640 --> 00:02:44,560
is the subverted or unsubverted

77
00:02:44,560 --> 00:02:46,160
algorithm

78
00:02:46,160 --> 00:02:48,480
if u has a strong advantage at this game

79
00:02:48,480 --> 00:02:50,959
then we say that the asa is detectable

80
00:02:50,959 --> 00:02:53,680
if not it is undetectable

81
00:02:53,680 --> 00:02:54,959
note that i've introduced another

82
00:02:54,959 --> 00:02:56,879
component to the asa

83
00:02:56,879 --> 00:02:59,200
the key k bar

84
00:02:59,200 --> 00:03:01,280
k bar is generated by a keygen algorithm

85
00:03:01,280 --> 00:03:03,680
specific to the asa and used by the

86
00:03:03,680 --> 00:03:06,239
subverted encryption algorithm

87
00:03:06,239 --> 00:03:08,000
while kbar could be considered part of

88
00:03:08,000 --> 00:03:10,000
the description of sub.inc it will be

89
00:03:10,000 --> 00:03:12,000
useful to us to parameterize the

90
00:03:12,000 --> 00:03:15,680
subversion key k-bar

91
00:03:17,280 --> 00:03:19,040
it is worth noting that we're referring

92
00:03:19,040 --> 00:03:21,920
here to black box cryptography indeed

93
00:03:21,920 --> 00:03:23,519
this area of research started with a

94
00:03:23,519 --> 00:03:26,599
paper by adam young and moti jung in

95
00:03:26,599 --> 00:03:29,440
1997 warning against black box

96
00:03:29,440 --> 00:03:30,720
cryptography

97
00:03:30,720 --> 00:03:33,760
in practice a user could detect an asa

98
00:03:33,760 --> 00:03:35,680
by reading the code of the algorithm

99
00:03:35,680 --> 00:03:37,920
that they're using to see that it isn't

100
00:03:37,920 --> 00:03:39,599
what it's supposed to be

101
00:03:39,599 --> 00:03:41,200
however there are many situations where

102
00:03:41,200 --> 00:03:43,200
such a thing may not be possible

103
00:03:43,200 --> 00:03:44,480
furthermore

104
00:03:44,480 --> 00:03:46,159
it can be difficult to ensure that code

105
00:03:46,159 --> 00:03:48,319
perfectly matches a specification and

106
00:03:48,319 --> 00:03:50,159
code vulnerabilities can go undetected

107
00:03:50,159 --> 00:03:52,640
for years in the best of circumstances

108
00:03:52,640 --> 00:03:54,239
so while this model of black box

109
00:03:54,239 --> 00:03:56,400
cryptography does restrict the detection

110
00:03:56,400 --> 00:03:58,959
capabilities of the user it is certainly

111
00:03:58,959 --> 00:04:01,040
still worth exploring

112
00:04:01,040 --> 00:04:02,560
with all these requirements it is no

113
00:04:02,560 --> 00:04:04,720
longer a trivial question of whether an

114
00:04:04,720 --> 00:04:08,080
asa exists that both recovers keys and

115
00:04:08,080 --> 00:04:09,920
is undetectable

116
00:04:09,920 --> 00:04:12,239
so there are two questions

117
00:04:12,239 --> 00:04:14,959
first why do we care about asas

118
00:04:14,959 --> 00:04:19,680
and second do undetectable asas exist

119
00:04:19,839 --> 00:04:20,959
so now i'll talk a little bit about

120
00:04:20,959 --> 00:04:23,919
motivation answering that first question

121
00:04:23,919 --> 00:04:25,520
so a quick timeline

122
00:04:25,520 --> 00:04:27,040
very quick in fact

123
00:04:27,040 --> 00:04:30,320
in 2013 snowden revealed a vast amount

124
00:04:30,320 --> 00:04:32,639
of classified nsa material some of which

125
00:04:32,639 --> 00:04:34,240
disclosed that the nsa works to

126
00:04:34,240 --> 00:04:36,000
deliberately undermine cryptographic

127
00:04:36,000 --> 00:04:38,160
standards when it is of benefit to the

128
00:04:38,160 --> 00:04:39,120
us

129
00:04:39,120 --> 00:04:42,000
in 2014 the first research on asas was

130
00:04:42,000 --> 00:04:43,120
published

131
00:04:43,120 --> 00:04:44,720
the first works in this area were

132
00:04:44,720 --> 00:04:47,199
heavily motivated by the threat of mass

133
00:04:47,199 --> 00:04:49,759
surveillance by powerful adversaries and

134
00:04:49,759 --> 00:04:52,400
asas were their way to model the

135
00:04:52,400 --> 00:04:55,040
undermining of cryptography towards that

136
00:04:55,040 --> 00:04:57,680
goal

137
00:04:57,680 --> 00:04:59,759
so i'll discuss some of those past works

138
00:04:59,759 --> 00:05:02,160
uh and our research draws quite heavily

139
00:05:02,160 --> 00:05:03,840
on those so i'll go in some detail so

140
00:05:03,840 --> 00:05:05,039
that uh

141
00:05:05,039 --> 00:05:07,120
the the improvements that we've made

142
00:05:07,120 --> 00:05:10,639
will be will be evident

143
00:05:10,639 --> 00:05:13,600
so in 2014 belary patterson and rogoway

144
00:05:13,600 --> 00:05:15,759
renewed interest in this area and and

145
00:05:15,759 --> 00:05:17,919
they coined the term asa

146
00:05:17,919 --> 00:05:19,759
they proved this theorem

147
00:05:19,759 --> 00:05:21,840
for any randomized coin injective

148
00:05:21,840 --> 00:05:24,080
symmetric encryption scheme se there

149
00:05:24,080 --> 00:05:27,039
exists an undetectable asa against se

150
00:05:27,039 --> 00:05:29,520
that recovers keys efficiently

151
00:05:29,520 --> 00:05:31,360
they constructed an asa that works

152
00:05:31,360 --> 00:05:32,960
against many symmetric encryption

153
00:05:32,960 --> 00:05:33,919
schemes

154
00:05:33,919 --> 00:05:36,479
their idea was to resample the

155
00:05:36,479 --> 00:05:37,520
encryption

156
00:05:37,520 --> 00:05:38,560
c

157
00:05:38,560 --> 00:05:42,160
of sc.inc with fresh coins until a

158
00:05:42,160 --> 00:05:44,000
certain condition on the ciphertext is

159
00:05:44,000 --> 00:05:47,120
met shown here for a secret counter t

160
00:05:47,120 --> 00:05:49,680
and a pseudorandom function f

161
00:05:49,680 --> 00:05:51,520
if the ciphertext satisfies this

162
00:05:51,520 --> 00:05:53,199
condition then we can see that the

163
00:05:53,199 --> 00:05:56,240
attacker who knows k bar

164
00:05:56,240 --> 00:05:58,080
will be able to learn a single bit of

165
00:05:58,080 --> 00:06:01,199
the key k by recomputing

166
00:06:01,199 --> 00:06:04,160
f of k bar and c

167
00:06:04,160 --> 00:06:06,240
after observing many ciphertexts the

168
00:06:06,240 --> 00:06:08,800
attacker can learn the entirety of k as

169
00:06:08,800 --> 00:06:10,560
t is iterated through

170
00:06:10,560 --> 00:06:12,720
every index

171
00:06:12,720 --> 00:06:14,240
one might also imagine that we could

172
00:06:14,240 --> 00:06:16,479
prove that this asa is undetectable

173
00:06:16,479 --> 00:06:17,600
since the distribution of the

174
00:06:17,600 --> 00:06:19,600
ciphertexts will be the same as for the

175
00:06:19,600 --> 00:06:21,680
unsubverted algorithm i'll go into a

176
00:06:21,680 --> 00:06:25,039
little bit more detail on that later

177
00:06:25,919 --> 00:06:28,800
so here is an implementation of bpr's

178
00:06:28,800 --> 00:06:30,400
asa idea

179
00:06:30,400 --> 00:06:32,560
note that the index t

180
00:06:32,560 --> 00:06:35,680
for the key k is kept as state and

181
00:06:35,680 --> 00:06:38,400
incremented on each encryption

182
00:06:38,400 --> 00:06:39,840
the value s

183
00:06:39,840 --> 00:06:41,759
is going to be a fixed parameter that

184
00:06:41,759 --> 00:06:43,520
limits the number of ciphertext samples

185
00:06:43,520 --> 00:06:45,840
drawn during a single invocation in this

186
00:06:45,840 --> 00:06:47,680
main loop

187
00:06:47,680 --> 00:06:49,759
as we can see the subverted encryption

188
00:06:49,759 --> 00:06:53,280
algorithm resamples c using fresh coins

189
00:06:53,280 --> 00:06:56,639
until the result of applying the prf

190
00:06:56,639 --> 00:06:57,840
f

191
00:06:57,840 --> 00:06:59,199
on c

192
00:06:59,199 --> 00:07:03,840
is equal to the current bit of the key k

193
00:07:05,520 --> 00:07:09,280
in 2015 dellari jaeger and kane improved

194
00:07:09,280 --> 00:07:12,240
the asa of bpr by removing dependence on

195
00:07:12,240 --> 00:07:14,800
state and improved their analysis to

196
00:07:14,800 --> 00:07:17,680
avoid the coin injectivity requirement

197
00:07:17,680 --> 00:07:20,400
relying only on high min entropy of the

198
00:07:20,400 --> 00:07:23,039
original encryption

199
00:07:23,039 --> 00:07:25,680
their main idea was to include index t

200
00:07:25,680 --> 00:07:28,080
in the prf output

201
00:07:28,080 --> 00:07:30,720
sample c until the two outputs of the

202
00:07:30,720 --> 00:07:32,880
prf w and t

203
00:07:32,880 --> 00:07:34,960
yield correct information about the key

204
00:07:34,960 --> 00:07:40,000
k that is k at t is equal to w

205
00:07:40,000 --> 00:07:41,440
key recovery looks a little different

206
00:07:41,440 --> 00:07:43,280
from bpr's asa

207
00:07:43,280 --> 00:07:46,240
since the leaked key index t is random

208
00:07:46,240 --> 00:07:48,800
we cannot guarantee that the key will be

209
00:07:48,800 --> 00:07:50,319
fully leaked after a number of

210
00:07:50,319 --> 00:07:52,080
ciphertexts equal to the length of the

211
00:07:52,080 --> 00:07:54,639
key as in bpr's asa

212
00:07:54,639 --> 00:07:56,800
however we can do a coupon collector

213
00:07:56,800 --> 00:07:58,879
type analysis to see that with high

214
00:07:58,879 --> 00:08:01,440
probability every index will be selected

215
00:08:01,440 --> 00:08:03,680
at least once after a modest number of

216
00:08:03,680 --> 00:08:06,080
ciphertexts and therefore k can still be

217
00:08:06,080 --> 00:08:09,280
recovered by the attacker

218
00:08:10,479 --> 00:08:12,960
here's an implementation of bjk's asa

219
00:08:12,960 --> 00:08:15,840
this is very similar to bprs but due to

220
00:08:15,840 --> 00:08:17,680
the fact that the index t is no longer

221
00:08:17,680 --> 00:08:20,319
maintained as state this asa is both

222
00:08:20,319 --> 00:08:22,160
simplified slightly

223
00:08:22,160 --> 00:08:24,560
and stateless

224
00:08:24,560 --> 00:08:26,240
this is undetectable for generally the

225
00:08:26,240 --> 00:08:28,000
same reasons as bpr's asa was

226
00:08:28,000 --> 00:08:29,759
undetectable but i'm going to talk about

227
00:08:29,759 --> 00:08:31,280
this one in a little bit more detail so

228
00:08:31,280 --> 00:08:34,080
we get an idea of what undetectability

229
00:08:34,080 --> 00:08:36,560
looks like

230
00:08:36,880 --> 00:08:38,479
here i've written the detectability game

231
00:08:38,479 --> 00:08:40,320
that i had earlier with the asa

232
00:08:40,320 --> 00:08:42,159
substituted in

233
00:08:42,159 --> 00:08:43,760
this the proof of undetectability

234
00:08:43,760 --> 00:08:45,760
pursues proceeds with a sequence of game

235
00:08:45,760 --> 00:08:47,920
hops based on indistinguishability

236
00:08:47,920 --> 00:08:49,839
between the games it can be seen

237
00:08:49,839 --> 00:08:52,240
relatively quickly like this the first

238
00:08:52,240 --> 00:08:54,480
game hop replaces f

239
00:08:54,480 --> 00:08:56,959
by a lazily sampled random function the

240
00:08:56,959 --> 00:09:00,080
second replaces the lazy random sampling

241
00:09:00,080 --> 00:09:02,399
by true random sampling

242
00:09:02,399 --> 00:09:04,720
then since the loop condition

243
00:09:04,720 --> 00:09:07,040
no longer depends on c because of the

244
00:09:07,040 --> 00:09:09,279
true random sampling

245
00:09:09,279 --> 00:09:10,720
then it doesn't depend on the choice of

246
00:09:10,720 --> 00:09:11,600
r

247
00:09:11,600 --> 00:09:13,680
and that means that

248
00:09:13,680 --> 00:09:15,279
the distribution of the ciphertext

249
00:09:15,279 --> 00:09:17,279
produced by this function is going to be

250
00:09:17,279 --> 00:09:18,640
the same as the distribution of the

251
00:09:18,640 --> 00:09:20,320
ciphertext produced by the original

252
00:09:20,320 --> 00:09:22,560
encryption function and hence there is

253
00:09:22,560 --> 00:09:24,240
no way to distinguish between the two

254
00:09:24,240 --> 00:09:28,080
cases b equals zero and b equals one

255
00:09:28,080 --> 00:09:29,680
this is the exact relation that we get

256
00:09:29,680 --> 00:09:31,920
in the proof the red part is from the

257
00:09:31,920 --> 00:09:33,279
first game hop

258
00:09:33,279 --> 00:09:36,160
and the blue part is from the second

259
00:09:36,160 --> 00:09:38,000
the blue term is

260
00:09:38,000 --> 00:09:39,920
a bound on the probability of seeing two

261
00:09:39,920 --> 00:09:42,000
repeated cipher texts during the game

262
00:09:42,000 --> 00:09:44,399
with lazy random sampling

263
00:09:44,399 --> 00:09:47,519
n is the total number of oracle calls

264
00:09:47,519 --> 00:09:50,240
and ada is going to be the min entropy

265
00:09:50,240 --> 00:09:52,240
of se.inc

266
00:09:52,240 --> 00:09:54,480
recall that s is the maximum number of

267
00:09:54,480 --> 00:09:55,760
loops that the subverted encryption

268
00:09:55,760 --> 00:09:57,680
algorithm will perform before returning

269
00:09:57,680 --> 00:10:00,160
a value

270
00:10:02,880 --> 00:10:04,640
while much of our work is comprised of

271
00:10:04,640 --> 00:10:05,920
extensions on the two papers i've

272
00:10:05,920 --> 00:10:07,519
mentioned so far there is a lot of other

273
00:10:07,519 --> 00:10:08,880
research in this area that is still

274
00:10:08,880 --> 00:10:12,000
ongoing this includes asas on macs

275
00:10:12,000 --> 00:10:14,320
signature schemes and chems among other

276
00:10:14,320 --> 00:10:16,560
things as well as counter measures where

277
00:10:16,560 --> 00:10:17,760
different approaches have been taken

278
00:10:17,760 --> 00:10:20,959
based on designing non-black box schemes

279
00:10:20,959 --> 00:10:23,120
this includes so-called split programs

280
00:10:23,120 --> 00:10:25,279
reverse firewalls and self-guarding

281
00:10:25,279 --> 00:10:27,680
schemes

282
00:10:28,880 --> 00:10:30,399
now we'll discuss the main contributions

283
00:10:30,399 --> 00:10:32,720
of our paper

284
00:10:32,720 --> 00:10:33,839
there are two areas that we made

285
00:10:33,839 --> 00:10:35,839
contributions to

286
00:10:35,839 --> 00:10:38,079
handling of state in the detection game

287
00:10:38,079 --> 00:10:40,640
and asymmetric asas

288
00:10:40,640 --> 00:10:42,800
so stateful asas may behave differently

289
00:10:42,800 --> 00:10:45,040
than stateless ones and hence become

290
00:10:45,040 --> 00:10:47,440
detectable if their state is reused or

291
00:10:47,440 --> 00:10:49,200
reset deliberately

292
00:10:49,200 --> 00:10:51,519
so which asas are detectable in this way

293
00:10:51,519 --> 00:10:53,920
and and how do you formalize this and

294
00:10:53,920 --> 00:10:57,279
should all realistic asas be stateless

295
00:10:57,279 --> 00:10:58,560
these are some of the questions that we

296
00:10:58,560 --> 00:11:00,560
have tried to answer the second

297
00:11:00,560 --> 00:11:02,000
contribution is to the development of

298
00:11:02,000 --> 00:11:04,320
asymmetric asas where knowledge of the

299
00:11:04,320 --> 00:11:07,360
key k bar embedded in the asa is not

300
00:11:07,360 --> 00:11:10,320
sufficient to recover the key k

301
00:11:10,320 --> 00:11:12,160
this would be desirable to the attacker

302
00:11:12,160 --> 00:11:14,560
since k bar is not securely held and

303
00:11:14,560 --> 00:11:16,480
anyone who knows kbar can exploit the

304
00:11:16,480 --> 00:11:18,880
asa to recover k

305
00:11:18,880 --> 00:11:20,480
a third party

306
00:11:20,480 --> 00:11:23,200
might be able to find k bar even if the

307
00:11:23,200 --> 00:11:25,600
user is unaware of the asa

308
00:11:25,600 --> 00:11:27,040
we will show ways for the attacker to

309
00:11:27,040 --> 00:11:30,160
prevent that outcome

310
00:11:30,399 --> 00:11:31,680
so we'll start with the issue of state

311
00:11:31,680 --> 00:11:33,680
resets

312
00:11:33,680 --> 00:11:36,000
bpr noted in their paper that a reset of

313
00:11:36,000 --> 00:11:37,920
the state will lead to increased

314
00:11:37,920 --> 00:11:40,320
detection ability for an observer but

315
00:11:40,320 --> 00:11:42,000
this increase does not appear to be

316
00:11:42,000 --> 00:11:45,120
enough to lead to actual detection

317
00:11:45,120 --> 00:11:47,839
on the other hand bjk claimed

318
00:11:47,839 --> 00:11:51,040
of the bpr subversion that a state reset

319
00:11:51,040 --> 00:11:53,200
as can happen with a reboot or cloning

320
00:11:53,200 --> 00:11:55,040
to create a virtual machine

321
00:11:55,040 --> 00:11:59,279
leads in their attack to detection

322
00:11:59,279 --> 00:12:01,440
this seems contradictory so which is

323
00:12:01,440 --> 00:12:03,760
actually the case does state reset lead

324
00:12:03,760 --> 00:12:08,959
to detection or not for bpr's subversion

325
00:12:08,959 --> 00:12:11,360
bjk in their paper defines strong

326
00:12:11,360 --> 00:12:13,680
undetectability which effectively

327
00:12:13,680 --> 00:12:15,760
forbids undetectable asas from having

328
00:12:15,760 --> 00:12:18,320
any state at all by providing their

329
00:12:18,320 --> 00:12:22,000
state to the user in the detection game

330
00:12:22,000 --> 00:12:24,079
if there is any state the user will

331
00:12:24,079 --> 00:12:26,720
detect the asa and if not

332
00:12:26,720 --> 00:12:29,920
well they might not be able to

333
00:12:30,959 --> 00:12:33,839
in 2019 bayekedale designed a stateful

334
00:12:33,839 --> 00:12:36,399
asa targeting a signature scheme they

335
00:12:36,399 --> 00:12:38,480
proved that even if the state of the asa

336
00:12:38,480 --> 00:12:40,959
is cleared during the detection game

337
00:12:40,959 --> 00:12:43,360
the asa is undetectable so state resets

338
00:12:43,360 --> 00:12:45,600
cannot detect their attack

339
00:12:45,600 --> 00:12:47,360
now this notion of state reset doesn't

340
00:12:47,360 --> 00:12:49,839
quite reflect the vision of bjk who

341
00:12:49,839 --> 00:12:51,600
described state resets which might

342
00:12:51,600 --> 00:12:53,600
happen when cloning a virtual machine as

343
00:12:53,600 --> 00:12:55,440
well as resetting one

344
00:12:55,440 --> 00:12:58,079
in that case state could be set back to

345
00:12:58,079 --> 00:13:00,160
any previous point in time rather than

346
00:13:00,160 --> 00:13:01,920
just to a null state at the beginning of

347
00:13:01,920 --> 00:13:04,319
the game

348
00:13:05,760 --> 00:13:07,279
in 2020

349
00:13:07,279 --> 00:13:09,760
chen huang and jung designed a stateful

350
00:13:09,760 --> 00:13:12,320
asa on key encapsulation that recovers

351
00:13:12,320 --> 00:13:14,560
the exchanged key using two consecutive

352
00:13:14,560 --> 00:13:15,920
cipher texts

353
00:13:15,920 --> 00:13:17,839
their approach to state was to argue

354
00:13:17,839 --> 00:13:20,000
informally that because the state used

355
00:13:20,000 --> 00:13:22,639
by their asa is limited that is it

356
00:13:22,639 --> 00:13:24,320
retained only information from the

357
00:13:24,320 --> 00:13:26,240
previous invocation

358
00:13:26,240 --> 00:13:28,160
their analysis need not include state

359
00:13:28,160 --> 00:13:29,360
resets

360
00:13:29,360 --> 00:13:31,760
now this was a reliance on only informal

361
00:13:31,760 --> 00:13:34,160
arguments to justify using small amount

362
00:13:34,160 --> 00:13:36,079
of states without really specifying what

363
00:13:36,079 --> 00:13:39,519
a small amount of state is

364
00:13:41,120 --> 00:13:43,440
so the question is how should we address

365
00:13:43,440 --> 00:13:45,600
state the research thus far has been

366
00:13:45,600 --> 00:13:47,600
inconsistent

367
00:13:47,600 --> 00:13:49,279
stateful isas have been completely

368
00:13:49,279 --> 00:13:51,519
discounted by bjk as more easily

369
00:13:51,519 --> 00:13:54,079
detected and other works such as chen at

370
00:13:54,079 --> 00:13:55,040
all

371
00:13:55,040 --> 00:13:57,040
justify their use of state through

372
00:13:57,040 --> 00:13:58,320
appeals to practicality and

373
00:13:58,320 --> 00:14:00,079
believability rather than formal

374
00:14:00,079 --> 00:14:01,360
analysis

375
00:14:01,360 --> 00:14:03,440
so we propose a middle road which comes

376
00:14:03,440 --> 00:14:05,600
from formalizing exactly what kind of

377
00:14:05,600 --> 00:14:07,440
state reset capability we imagine the

378
00:14:07,440 --> 00:14:09,279
user or detector having

379
00:14:09,279 --> 00:14:11,600
bjk suggested that state resets could

380
00:14:11,600 --> 00:14:13,920
occur from cloning or rebooting of

381
00:14:13,920 --> 00:14:16,079
virtual machines and we could imagine in

382
00:14:16,079 --> 00:14:18,000
a cloud setting that a user with black

383
00:14:18,000 --> 00:14:20,160
box access to encryption functionality

384
00:14:20,160 --> 00:14:21,279
could have access to these

385
00:14:21,279 --> 00:14:23,199
functionalities as well

386
00:14:23,199 --> 00:14:25,680
the buyer at all paper addressed reboots

387
00:14:25,680 --> 00:14:28,480
but not cloning we will address both

388
00:14:28,480 --> 00:14:30,720
giving the user or the detector in the

389
00:14:30,720 --> 00:14:32,800
detection game the ability to reset

390
00:14:32,800 --> 00:14:37,120
state to any previously used state

391
00:14:37,360 --> 00:14:39,440
so here is our state reset detectability

392
00:14:39,440 --> 00:14:41,680
game called sr debt

393
00:14:41,680 --> 00:14:43,920
in this game we are allowing for sub dot

394
00:14:43,920 --> 00:14:46,560
inc to be stateful and we are explicitly

395
00:14:46,560 --> 00:14:48,800
tracking the state on each invocation i

396
00:14:48,800 --> 00:14:51,600
with the variables tau sub i

397
00:14:51,600 --> 00:14:54,320
the reset oracle allows you

398
00:14:54,320 --> 00:14:57,519
to set the next t tau i to be the same

399
00:14:57,519 --> 00:14:59,760
as any previously used state

400
00:14:59,760 --> 00:15:01,600
without having direct access to that

401
00:15:01,600 --> 00:15:03,600
state at any point or even knowing if

402
00:15:03,600 --> 00:15:05,600
the state is being used

403
00:15:05,600 --> 00:15:07,760
biaekedal used a model like this where

404
00:15:07,760 --> 00:15:09,760
the only valid argument to reset was j

405
00:15:09,760 --> 00:15:11,680
equals zero corresponding to clearing

406
00:15:11,680 --> 00:15:15,519
state back to its initial value

407
00:15:16,000 --> 00:15:18,079
aside from those changes this game is

408
00:15:18,079 --> 00:15:19,600
the same as the previous detectability

409
00:15:19,600 --> 00:15:20,800
game that i showed

410
00:15:20,800 --> 00:15:22,399
so let's explore how this compares to

411
00:15:22,399 --> 00:15:25,040
previous definitions a little bit

412
00:15:25,040 --> 00:15:26,800
so here are three existing definitions

413
00:15:26,800 --> 00:15:28,720
of detectability along with our

414
00:15:28,720 --> 00:15:30,320
definition from the previous slide

415
00:15:30,320 --> 00:15:32,160
placed to demonstrate which definitions

416
00:15:32,160 --> 00:15:34,240
imply which other definitions

417
00:15:34,240 --> 00:15:36,320
so if an asa is undetectable according

418
00:15:36,320 --> 00:15:38,959
to bjk then it has no state

419
00:15:38,959 --> 00:15:41,040
therefore it will be undetectable with

420
00:15:41,040 --> 00:15:42,880
our notion of state reset as the reset

421
00:15:42,880 --> 00:15:44,800
article will have no effect

422
00:15:44,800 --> 00:15:47,120
as i stated earlier our definition

423
00:15:47,120 --> 00:15:49,680
implies the definition of biac at all

424
00:15:49,680 --> 00:15:51,600
since their state reset is a special

425
00:15:51,600 --> 00:15:53,440
case of ours

426
00:15:53,440 --> 00:15:55,600
finally any of these definitions implies

427
00:15:55,600 --> 00:15:58,160
that of bpr since bpr's definition does

428
00:15:58,160 --> 00:16:00,480
not account for state at all and so the

429
00:16:00,480 --> 00:16:04,480
asa is allowed to have any kind of state

430
00:16:04,560 --> 00:16:07,040
more surprisingly no two definitions

431
00:16:07,040 --> 00:16:08,720
here are equivalent

432
00:16:08,720 --> 00:16:10,240
that is

433
00:16:10,240 --> 00:16:12,000
there are separating examples at every

434
00:16:12,000 --> 00:16:13,120
level

435
00:16:13,120 --> 00:16:14,639
more

436
00:16:14,639 --> 00:16:16,399
moreover these examples are not

437
00:16:16,399 --> 00:16:18,800
artificially constructed but are in fact

438
00:16:18,800 --> 00:16:20,399
the asa is in many of the papers that

439
00:16:20,399 --> 00:16:22,880
i've discussed so far so let's see what

440
00:16:22,880 --> 00:16:24,240
happens when we apply our new

441
00:16:24,240 --> 00:16:28,480
detectability definition to these asas

442
00:16:28,880 --> 00:16:30,079
so it turns out that if we allow

443
00:16:30,079 --> 00:16:32,399
resetting state to any previously used

444
00:16:32,399 --> 00:16:33,360
value

445
00:16:33,360 --> 00:16:36,000
then the asa is from biakedal and chen

446
00:16:36,000 --> 00:16:38,800
at all are quite easily detected in

447
00:16:38,800 --> 00:16:40,399
practice a user would have to run the

448
00:16:40,399 --> 00:16:41,759
scheme in question

449
00:16:41,759 --> 00:16:44,880
inducing it to store non-trivial state

450
00:16:44,880 --> 00:16:47,040
cloning that state and having it re-run

451
00:16:47,040 --> 00:16:48,959
using the same state

452
00:16:48,959 --> 00:16:51,360
would produce the exact same result

453
00:16:51,360 --> 00:16:53,279
while in an unsubverted scheme new

454
00:16:53,279 --> 00:16:55,040
randomness would be sampled causing

455
00:16:55,040 --> 00:16:56,800
random output no matter what cloning

456
00:16:56,800 --> 00:16:58,079
occurs

457
00:16:58,079 --> 00:17:00,079
this is easily translated to a detection

458
00:17:00,079 --> 00:17:02,399
strategy in the sr debt game

459
00:17:02,399 --> 00:17:04,559
however the asa from bpr is actually

460
00:17:04,559 --> 00:17:07,520
undetectable we rewrote bpr's asa using

461
00:17:07,520 --> 00:17:10,240
bjk's framework and adopted bjk's proof

462
00:17:10,240 --> 00:17:13,599
method using using game hops to the bpr

463
00:17:13,599 --> 00:17:14,880
asa

464
00:17:14,880 --> 00:17:16,400
then we showed that the proof goes

465
00:17:16,400 --> 00:17:18,160
through completely independent of the

466
00:17:18,160 --> 00:17:20,400
presence of the state reset oracle in

467
00:17:20,400 --> 00:17:22,720
other words resetting state provides no

468
00:17:22,720 --> 00:17:27,280
assistance in detecting bpr's asa at all

469
00:17:27,280 --> 00:17:28,880
so what does this mean

470
00:17:28,880 --> 00:17:30,320
we think that the following two points

471
00:17:30,320 --> 00:17:31,840
should be heated for future research in

472
00:17:31,840 --> 00:17:34,160
the area for researchers who avoid or

473
00:17:34,160 --> 00:17:36,160
discount stateful schemes it should be

474
00:17:36,160 --> 00:17:38,000
made clear what detection threat model

475
00:17:38,000 --> 00:17:40,160
they are working in and why state is

476
00:17:40,160 --> 00:17:41,520
unrealistic

477
00:17:41,520 --> 00:17:43,039
for researchers who develop stateful

478
00:17:43,039 --> 00:17:45,440
schemes undetectability should be proven

479
00:17:45,440 --> 00:17:47,840
in a formal model including some version

480
00:17:47,840 --> 00:17:50,160
of state reset or detection methods in

481
00:17:50,160 --> 00:17:52,720
such a framework should be acknowledged

482
00:17:52,720 --> 00:17:54,160
more importantly for our work is that

483
00:17:54,160 --> 00:17:55,919
we've shown that stateful schemes can be

484
00:17:55,919 --> 00:17:58,240
undetectable and knowing this supports

485
00:17:58,240 --> 00:17:59,840
the development of our stateful

486
00:17:59,840 --> 00:18:02,320
asymmetric asas on symmetric encryption

487
00:18:02,320 --> 00:18:05,520
in the next part of the paper

488
00:18:06,000 --> 00:18:09,919
so let's now discuss asymmetric asas

489
00:18:09,919 --> 00:18:11,360
i'll talk a little bit about the comp

490
00:18:11,360 --> 00:18:12,960
concept of no bus

491
00:18:12,960 --> 00:18:15,280
so no bus stands for nobody but us the

492
00:18:15,280 --> 00:18:17,760
designer of an asa who wishes to exploit

493
00:18:17,760 --> 00:18:20,000
a symmetric encryption scheme would have

494
00:18:20,000 --> 00:18:21,919
a strong incentive to ensure that other

495
00:18:21,919 --> 00:18:23,520
third parties do not have the same

496
00:18:23,520 --> 00:18:25,440
ability for exploitation

497
00:18:25,440 --> 00:18:27,919
if we assume these third parties are say

498
00:18:27,919 --> 00:18:30,480
nation state intelligence agencies then

499
00:18:30,480 --> 00:18:31,600
we can imagine they might have the

500
00:18:31,600 --> 00:18:34,400
resources to reverse engineer the asa

501
00:18:34,400 --> 00:18:35,919
essentially the designers would want to

502
00:18:35,919 --> 00:18:38,160
ensure that exploitability of the asa is

503
00:18:38,160 --> 00:18:40,400
not contingent upon possession of a key

504
00:18:40,400 --> 00:18:42,160
that the designers can't maintain

505
00:18:42,160 --> 00:18:44,160
control over

506
00:18:44,160 --> 00:18:46,000
the solution here is really to replace

507
00:18:46,000 --> 00:18:48,160
the subversion geek k bar

508
00:18:48,160 --> 00:18:51,840
by a pair of asymmetric keys xk and ek

509
00:18:51,840 --> 00:18:56,000
if only ek is embedded in the asa then

510
00:18:56,000 --> 00:18:57,919
this is the only value recoverable by

511
00:18:57,919 --> 00:18:59,440
reverse engineering

512
00:18:59,440 --> 00:19:01,919
if xk is what is required for

513
00:19:01,919 --> 00:19:03,520
exploitation

514
00:19:03,520 --> 00:19:05,600
then our imagined third party cannot

515
00:19:05,600 --> 00:19:07,919
exploit the asa because they will not be

516
00:19:07,919 --> 00:19:10,080
able to recover xk

517
00:19:10,080 --> 00:19:12,080
we call asas that use two keys in this

518
00:19:12,080 --> 00:19:14,400
manner asymmetric asas

519
00:19:14,400 --> 00:19:16,160
again we ask

520
00:19:16,160 --> 00:19:17,919
is it possible to implement a successful

521
00:19:17,919 --> 00:19:21,200
asa in these circumstances

522
00:19:21,200 --> 00:19:22,960
well it turns out that some of the asas

523
00:19:22,960 --> 00:19:26,400
i've talked about already are asymmetric

524
00:19:26,400 --> 00:19:28,559
so the answer is certainly yes

525
00:19:28,559 --> 00:19:30,320
however you may remember that these two

526
00:19:30,320 --> 00:19:32,640
asymmetric asas are

527
00:19:32,640 --> 00:19:34,960
detectable by state resets

528
00:19:34,960 --> 00:19:37,919
in fact all of the asymmetric asas that

529
00:19:37,919 --> 00:19:39,200
we've seen in the literature are

530
00:19:39,200 --> 00:19:41,360
detectable by state resets

531
00:19:41,360 --> 00:19:43,760
furthermore although bpr specified

532
00:19:43,760 --> 00:19:45,760
definitions for asymmetric asas on

533
00:19:45,760 --> 00:19:47,760
symmetric encryption specifically they

534
00:19:47,760 --> 00:19:49,520
did not provide a construction and to

535
00:19:49,520 --> 00:19:51,760
date nobody else has either so that's

536
00:19:51,760 --> 00:19:54,320
what we did

537
00:19:54,320 --> 00:19:56,080
so there are two different reasonable

538
00:19:56,080 --> 00:19:58,320
requirements that we could have for our

539
00:19:58,320 --> 00:20:00,240
asymmetric asa and this distinction

540
00:20:00,240 --> 00:20:02,400
hasn't been made in other literature

541
00:20:02,400 --> 00:20:04,080
the first type is the simpler one where

542
00:20:04,080 --> 00:20:06,240
we simply say that the asa must be

543
00:20:06,240 --> 00:20:08,159
completely undetectable

544
00:20:08,159 --> 00:20:09,840
regardless of whether the detector is in

545
00:20:09,840 --> 00:20:12,799
possession of the embedded key ek

546
00:20:12,799 --> 00:20:14,799
in the second type we relax this

547
00:20:14,799 --> 00:20:16,240
assumption slightly

548
00:20:16,240 --> 00:20:18,159
we consider two types of adversaries in

549
00:20:18,159 --> 00:20:19,679
the detection game

550
00:20:19,679 --> 00:20:20,400
before

551
00:20:20,400 --> 00:20:22,320
we were modeling users you as

552
00:20:22,320 --> 00:20:24,080
adversaries in the detection game who

553
00:20:24,080 --> 00:20:26,240
did not have possession of an embedded

554
00:20:26,240 --> 00:20:27,039
key

555
00:20:27,039 --> 00:20:29,760
we could carry that assumption over here

556
00:20:29,760 --> 00:20:32,159
then we ask what actual requirement do

557
00:20:32,159 --> 00:20:33,679
we have against the third party

558
00:20:33,679 --> 00:20:35,520
adversary which we're now going to call

559
00:20:35,520 --> 00:20:36,799
v

560
00:20:36,799 --> 00:20:39,280
so we'll require in the type 2

561
00:20:39,280 --> 00:20:41,760
asymmetric asa that the asa is not

562
00:20:41,760 --> 00:20:43,919
exploitable by v

563
00:20:43,919 --> 00:20:45,120
i.e

564
00:20:45,120 --> 00:20:47,280
it is secure

565
00:20:47,280 --> 00:20:49,600
i will present both a type 1 and a type

566
00:20:49,600 --> 00:20:52,320
2 asymmetric asa this differentiation

567
00:20:52,320 --> 00:20:54,080
might be small but the relaxed

568
00:20:54,080 --> 00:20:55,840
requirement for the type 2 asa does

569
00:20:55,840 --> 00:20:57,520
allow for some advantages i

570
00:20:57,520 --> 00:20:58,960
unfortunately won't have time to cover

571
00:20:58,960 --> 00:21:02,400
these advantages in detail here

572
00:21:02,400 --> 00:21:03,919
so this is the detection game we will

573
00:21:03,919 --> 00:21:05,679
use for our new asas

574
00:21:05,679 --> 00:21:07,919
as written it describes both regular and

575
00:21:07,919 --> 00:21:10,080
augmented detectability games and of

576
00:21:10,080 --> 00:21:12,640
course includes a state reset oracle

577
00:21:12,640 --> 00:21:15,679
the augmented game includes the boxes

578
00:21:15,679 --> 00:21:18,960
while the non-augmented one does not

579
00:21:18,960 --> 00:21:21,520
for type 1 asymmetric asas well where we

580
00:21:21,520 --> 00:21:23,440
require undetectability against

581
00:21:23,440 --> 00:21:26,320
adversary u in possession of ek we will

582
00:21:26,320 --> 00:21:28,400
use the augmented game

583
00:21:28,400 --> 00:21:31,520
for type 2 asymmetric asas where we only

584
00:21:31,520 --> 00:21:33,280
require undetectability against you who

585
00:21:33,280 --> 00:21:35,440
does not possess ek we will use the

586
00:21:35,440 --> 00:21:37,840
non-augmented game which is identical to

587
00:21:37,840 --> 00:21:40,400
the game that i showed earlier

588
00:21:40,400 --> 00:21:42,159
we'll start with our type 1 asymmetric

589
00:21:42,159 --> 00:21:43,760
asa

590
00:21:43,760 --> 00:21:45,840
the idea here is relatively simple

591
00:21:45,840 --> 00:21:48,559
bpr used a technique like this one

592
00:21:48,559 --> 00:21:50,640
to find a ciphertext c

593
00:21:50,640 --> 00:21:54,240
which leaked information about k

594
00:21:54,480 --> 00:21:56,880
we will modify this only slightly by

595
00:21:56,880 --> 00:21:59,360
first encrypting k under a public key

596
00:21:59,360 --> 00:22:01,840
encryption scheme to get

597
00:22:01,840 --> 00:22:03,200
kappa

598
00:22:03,200 --> 00:22:05,280
but then using the exact same technique

599
00:22:05,280 --> 00:22:07,120
to leak kappa

600
00:22:07,120 --> 00:22:09,440
since the attacker has xk they can

601
00:22:09,440 --> 00:22:12,240
decrypt kappa after recovery but nobody

602
00:22:12,240 --> 00:22:13,760
else can

603
00:22:13,760 --> 00:22:15,840
i'm going to claim that key recovery

604
00:22:15,840 --> 00:22:18,159
follows it should be clear that if bpr's

605
00:22:18,159 --> 00:22:19,919
technique works

606
00:22:19,919 --> 00:22:22,159
it works for values other than k

607
00:22:22,159 --> 00:22:23,919
and so this leak will work even if it

608
00:22:23,919 --> 00:22:27,520
may take more ciphertext to do so

609
00:22:27,520 --> 00:22:28,960
now how do we make this undetectable to

610
00:22:28,960 --> 00:22:30,960
someone with ek

611
00:22:30,960 --> 00:22:32,559
using ek

612
00:22:32,559 --> 00:22:34,960
you could test the output of

613
00:22:34,960 --> 00:22:37,280
f of e k and c

614
00:22:37,280 --> 00:22:39,120
if this is anything but random then the

615
00:22:39,120 --> 00:22:41,280
asa will be detectable

616
00:22:41,280 --> 00:22:44,720
therefore all values of kappa

617
00:22:44,720 --> 00:22:46,000
of sigma

618
00:22:46,000 --> 00:22:48,320
must be random and furthermore we must

619
00:22:48,320 --> 00:22:50,240
never reuse them

620
00:22:50,240 --> 00:22:52,400
to achieve this we can use an in dollar

621
00:22:52,400 --> 00:22:55,520
pka scheme and compute fresh encryptions

622
00:22:55,520 --> 00:22:57,679
after using all the bits of the

623
00:22:57,679 --> 00:22:59,840
encrypted key

624
00:22:59,840 --> 00:23:01,760
an in dollar scheme is one whose cipher

625
00:23:01,760 --> 00:23:05,440
texts are indistinguishable from random

626
00:23:06,000 --> 00:23:08,480
so here's the type 1 asymmetric asa a

627
00:23:08,480 --> 00:23:09,760
sub

628
00:23:09,760 --> 00:23:11,280
the first section consists of

629
00:23:11,280 --> 00:23:13,760
bookkeeping to compute new encryptions

630
00:23:13,760 --> 00:23:16,960
of k into kappa and iterate through each

631
00:23:16,960 --> 00:23:19,360
one bit by bit once we have leaked every

632
00:23:19,360 --> 00:23:22,320
bit of kappa we recompute a new kappa

633
00:23:22,320 --> 00:23:25,120
the second part is just bpr's leaking

634
00:23:25,120 --> 00:23:26,080
technique

635
00:23:26,080 --> 00:23:28,080
applied to kappa

636
00:23:28,080 --> 00:23:29,600
it's worth mentioning that the in-dollar

637
00:23:29,600 --> 00:23:31,520
property for pke can be achieved with

638
00:23:31,520 --> 00:23:34,000
ciphertexts of lengths less than 400

639
00:23:34,000 --> 00:23:36,799
bits at a 128-bit security level so this

640
00:23:36,799 --> 00:23:38,640
is certainly an achievable property for

641
00:23:38,640 --> 00:23:41,440
our application

642
00:23:43,279 --> 00:23:45,360
using a similar game hops to bjk's proof

643
00:23:45,360 --> 00:23:47,600
of undetectability for their asa plus

644
00:23:47,600 --> 00:23:49,840
one more for in-dollar security of pke

645
00:23:49,840 --> 00:23:51,600
we showed the relation here

646
00:23:51,600 --> 00:23:53,679
bounding augmented undetectability of

647
00:23:53,679 --> 00:23:55,440
rasa

648
00:23:55,440 --> 00:23:57,039
this is very similar to the bound that

649
00:23:57,039 --> 00:23:59,520
bjk achieved but note that we had to

650
00:23:59,520 --> 00:24:01,679
model f as a random oracle rather than a

651
00:24:01,679 --> 00:24:04,559
prf because of ek being known

652
00:24:04,559 --> 00:24:08,639
which wasn't necessary in bjk's proof

653
00:24:09,279 --> 00:24:11,279
our type 2 asymmetric asa will start

654
00:24:11,279 --> 00:24:14,240
with the technique used by bjk instead

655
00:24:14,240 --> 00:24:18,120
which we illustrate here

656
00:24:18,720 --> 00:24:21,200
in our isa we encrypt k again to get

657
00:24:21,200 --> 00:24:24,320
kappa and use bjk's leaking technique to

658
00:24:24,320 --> 00:24:25,760
leak kappa

659
00:24:25,760 --> 00:24:28,080
since the attacker has xk

660
00:24:28,080 --> 00:24:30,400
they can decrypt kappa after recovery

661
00:24:30,400 --> 00:24:33,200
and as before no one else can

662
00:24:33,200 --> 00:24:35,360
and again as before we observe that key

663
00:24:35,360 --> 00:24:36,799
recovery works here because of the fact

664
00:24:36,799 --> 00:24:38,400
that the underlying leaking mechanism

665
00:24:38,400 --> 00:24:41,120
works no matter what the leaked value is

666
00:24:41,120 --> 00:24:43,039
through a coupon collector analysis a

667
00:24:43,039 --> 00:24:45,360
400 bit value could be recovered with

668
00:24:45,360 --> 00:24:46,400
high probability

669
00:24:46,400 --> 00:24:48,000
after observing less than 3000

670
00:24:48,000 --> 00:24:49,600
ciphertexts

671
00:24:49,600 --> 00:24:51,200
in this case since we're discussing a

672
00:24:51,200 --> 00:24:53,360
type 2 asymmetric asa the

673
00:24:53,360 --> 00:24:55,120
undetectability requirement does not

674
00:24:55,120 --> 00:24:56,880
impose that k needs to be

675
00:24:56,880 --> 00:24:58,799
indistinguishable from random since our

676
00:24:58,799 --> 00:25:02,960
detection adversary will not have ek

677
00:25:03,919 --> 00:25:06,720
so this is our type 2 asymmetric asa the

678
00:25:06,720 --> 00:25:09,200
description is similar to our type 1 asa

679
00:25:09,200 --> 00:25:10,480
but the bookkeeping related the

680
00:25:10,480 --> 00:25:13,360
encryption of k to kappa is simpler

681
00:25:13,360 --> 00:25:15,120
since we no longer need to re-encrypt at

682
00:25:15,120 --> 00:25:17,760
any point the looping component uses the

683
00:25:17,760 --> 00:25:21,200
leaking mechanism of bjk

684
00:25:21,760 --> 00:25:23,520
we now consider the undetectability of

685
00:25:23,520 --> 00:25:25,120
our type 2asa

686
00:25:25,120 --> 00:25:27,279
recall that we consider only

687
00:25:27,279 --> 00:25:30,000
non-augmented detectability against user

688
00:25:30,000 --> 00:25:32,320
adversaries that is the adversary does

689
00:25:32,320 --> 00:25:33,760
not possess ek

690
00:25:33,760 --> 00:25:35,039
it might not be surprising that the

691
00:25:35,039 --> 00:25:37,120
results and analysis of bjk's proof of

692
00:25:37,120 --> 00:25:39,440
undetectability carry over here almost

693
00:25:39,440 --> 00:25:40,559
exactly

694
00:25:40,559 --> 00:25:42,080
since we are using the same leaking

695
00:25:42,080 --> 00:25:43,520
technique as them

696
00:25:43,520 --> 00:25:46,480
just on a different value

697
00:25:46,480 --> 00:25:48,240
note also that despite the state being

698
00:25:48,240 --> 00:25:50,640
kept by our asa the state reset oracle

699
00:25:50,640 --> 00:25:52,799
given to the detector in the detection

700
00:25:52,799 --> 00:25:53,600
game

701
00:25:53,600 --> 00:25:57,639
gives no advantage in detection

702
00:25:58,000 --> 00:25:59,200
let's now consider the second

703
00:25:59,200 --> 00:26:01,039
requirement for our type 2 asymmetric

704
00:26:01,039 --> 00:26:02,080
asa

705
00:26:02,080 --> 00:26:03,919
we require that the asa is not

706
00:26:03,919 --> 00:26:06,000
exploitable by a third party who is in

707
00:26:06,000 --> 00:26:07,520
possession of ek

708
00:26:07,520 --> 00:26:09,520
to do this we will show that the asa

709
00:26:09,520 --> 00:26:11,840
itself is still a secure encryption

710
00:26:11,840 --> 00:26:13,039
scheme

711
00:26:13,039 --> 00:26:16,000
we'll consider in cpa security

712
00:26:16,000 --> 00:26:17,760
in order to discuss the security of a

713
00:26:17,760 --> 00:26:21,039
sub 2 we define the security game in cpa

714
00:26:21,039 --> 00:26:22,000
prime

715
00:26:22,000 --> 00:26:23,120
shown here

716
00:26:23,120 --> 00:26:25,600
this is a modification of a typical ncpa

717
00:26:25,600 --> 00:26:28,240
game to handle the key generation and

718
00:26:28,240 --> 00:26:30,799
state required

719
00:26:30,799 --> 00:26:34,080
for a sub 2.ang

720
00:26:35,279 --> 00:26:38,000
we showed that the security of asub2 in

721
00:26:38,000 --> 00:26:40,559
this modified security game is bounded

722
00:26:40,559 --> 00:26:43,440
by the ncpa security of the pke scheme

723
00:26:43,440 --> 00:26:45,919
and the ncpa security of the underlying

724
00:26:45,919 --> 00:26:48,320
symmetric encryption scheme

725
00:26:48,320 --> 00:26:50,400
as it turns out the choice of ncpa

726
00:26:50,400 --> 00:26:53,279
security as a notion is quite arbitrary

727
00:26:53,279 --> 00:26:55,200
and using another notion of security the

728
00:26:55,200 --> 00:26:57,120
proof still goes through with the

729
00:26:57,120 --> 00:26:59,360
security notion on the leftmost and

730
00:26:59,360 --> 00:27:03,199
rightmost terms modified accordingly

731
00:27:04,080 --> 00:27:05,679
in the final section of the paper we

732
00:27:05,679 --> 00:27:07,360
consider generic modifications to

733
00:27:07,360 --> 00:27:09,440
symmetric asas to make them asymmetric

734
00:27:09,440 --> 00:27:11,679
asas the modifications that i showed

735
00:27:11,679 --> 00:27:13,679
earlier are actually independent of the

736
00:27:13,679 --> 00:27:16,159
leaking mechanism being used so long as

737
00:27:16,159 --> 00:27:18,480
such a mechanism can be used to leak an

738
00:27:18,480 --> 00:27:21,360
arbitrary value we call this property of

739
00:27:21,360 --> 00:27:22,640
asas

740
00:27:22,640 --> 00:27:23,840
that they can be used to leak an

741
00:27:23,840 --> 00:27:26,480
arbitrary valuable flex an arbitrary

742
00:27:26,480 --> 00:27:27,440
value

743
00:27:27,440 --> 00:27:28,720
flexible

744
00:27:28,720 --> 00:27:30,720
we can apply these modifications to any

745
00:27:30,720 --> 00:27:32,640
flexible symmetric asa to obtain a

746
00:27:32,640 --> 00:27:35,200
flexible asymmetric asa

747
00:27:35,200 --> 00:27:36,960
some of the asas we've seen today

748
00:27:36,960 --> 00:27:39,600
including bprs and bjks are considered

749
00:27:39,600 --> 00:27:44,158
flexible and others are not

750
00:27:44,720 --> 00:27:46,000
that's all i've got

751
00:27:46,000 --> 00:27:49,799
thank you very much for watching

