1
00:00:16,320 --> 00:00:19,520
go ahead so okay thanks uh everyone for

2
00:00:19,520 --> 00:00:22,080
coming to the last uh session of this

3
00:00:22,080 --> 00:00:23,119
morning

4
00:00:23,119 --> 00:00:25,840
the session is on crypt analysis and the

5
00:00:25,840 --> 00:00:28,080
first uh the first work is on the

6
00:00:28,080 --> 00:00:30,640
tightness of the suffix skid punch

7
00:00:30,640 --> 00:00:31,679
bond

8
00:00:31,679 --> 00:00:33,600
and it is a work by christopher de

9
00:00:33,600 --> 00:00:35,920
boenich and bart benick and that will

10
00:00:35,920 --> 00:00:38,480
give the talk

11
00:00:38,879 --> 00:00:41,600
okay thanks for the introduction

12
00:00:41,600 --> 00:00:43,360
yes just to be clear this was accepted

13
00:00:43,360 --> 00:00:46,000
before i was the program chair so

14
00:00:46,000 --> 00:00:48,239
i didn't just accept my own work

15
00:00:48,239 --> 00:00:49,920
um so tightness is the suffix key

16
00:00:49,920 --> 00:00:52,399
spongebob one of the most efficient ways

17
00:00:52,399 --> 00:00:54,399
i think to build a mac function or prf

18
00:00:54,399 --> 00:00:56,960
is a full state git sponge

19
00:00:56,960 --> 00:00:59,120
so the idea is that you take a b bit

20
00:00:59,120 --> 00:01:00,640
permutation p

21
00:01:00,640 --> 00:01:02,239
and you can initialize the state with

22
00:01:02,239 --> 00:01:04,799
the key and possibly also an iv if you

23
00:01:04,799 --> 00:01:06,640
need to or a nonce

24
00:01:06,640 --> 00:01:08,400
and then you permute you get a secret

25
00:01:08,400 --> 00:01:10,400
state and then you absorb b bits at a

26
00:01:10,400 --> 00:01:11,840
time it's very efficient because you

27
00:01:11,840 --> 00:01:15,280
compress with the state of the primitive

28
00:01:15,280 --> 00:01:17,840
um on the downside you don't get any

29
00:01:17,840 --> 00:01:19,520
mode level protection against side

30
00:01:19,520 --> 00:01:20,960
channel attacks

31
00:01:20,960 --> 00:01:23,759
the reason is basically that um if you

32
00:01:23,759 --> 00:01:25,600
have here you have a secret the

33
00:01:25,600 --> 00:01:28,000
permutation evaluated on the key and the

34
00:01:28,000 --> 00:01:31,119
attacker has kind of full power

35
00:01:31,119 --> 00:01:33,920
in manipulating the state by adding a

36
00:01:33,920 --> 00:01:36,640
state a plaintext over the b bit so it's

37
00:01:36,640 --> 00:01:38,799
extremely efficient but it also kind of

38
00:01:38,799 --> 00:01:40,479
doesn't give mo level protection so if

39
00:01:40,479 --> 00:01:41,920
you implement it

40
00:01:41,920 --> 00:01:43,360
you need to be careful with your

41
00:01:43,360 --> 00:01:44,799
implementation

42
00:01:44,799 --> 00:01:47,840
um and this actually this stack actually

43
00:01:47,840 --> 00:01:50,720
allows uh differential power analysis

44
00:01:50,720 --> 00:01:55,119
and one way to solve this is this famous

45
00:01:55,119 --> 00:01:57,360
approach which i think stems back to the

46
00:01:57,360 --> 00:01:59,200
gold height go what go

47
00:01:59,200 --> 00:02:02,719
gold right goldwater mikali approach

48
00:02:02,719 --> 00:02:04,320
the idea is that you start with a secret

49
00:02:04,320 --> 00:02:06,640
key and then you can take an iv or a

50
00:02:06,640 --> 00:02:08,560
nonce or something like this where you

51
00:02:08,560 --> 00:02:10,318
um

52
00:02:10,318 --> 00:02:12,560
look at the first bit of the nonce if

53
00:02:12,560 --> 00:02:14,560
it's a zero or a one and based on that

54
00:02:14,560 --> 00:02:16,400
you can proceed on the tree if it's a

55
00:02:16,400 --> 00:02:19,520
zero you evaluate the block cipher or

56
00:02:19,520 --> 00:02:20,879
primitive

57
00:02:20,879 --> 00:02:22,480
basic input of the key and the encoding

58
00:02:22,480 --> 00:02:25,040
of a zero otherwise you encrypt it

59
00:02:25,040 --> 00:02:27,280
or process it with the um

60
00:02:27,280 --> 00:02:29,360
encoding of one and you can go on like

61
00:02:29,360 --> 00:02:32,080
this bit by bit until at the end you end

62
00:02:32,080 --> 00:02:34,239
up with an output a state

63
00:02:34,239 --> 00:02:36,800
which you can then use to work with

64
00:02:36,800 --> 00:02:38,879
further and this will always be

65
00:02:38,879 --> 00:02:40,959
different or independent at least

66
00:02:40,959 --> 00:02:43,360
because you always have a different

67
00:02:43,360 --> 00:02:47,040
path in this tree depending on the iv

68
00:02:47,040 --> 00:02:49,280
um

69
00:02:49,440 --> 00:02:52,400
so you can turn this also into a sponge

70
00:02:52,400 --> 00:02:54,720
and this is an approach uh introduced by

71
00:02:54,720 --> 00:02:58,239
taha and shomo in 2014 it's also it also

72
00:02:58,239 --> 00:03:00,480
appears in the the isap

73
00:03:00,480 --> 00:03:02,800
it kind of appears in the isap approach

74
00:03:02,800 --> 00:03:04,800
with some variation

75
00:03:04,800 --> 00:03:06,720
and the idea is that we take a nonce and

76
00:03:06,720 --> 00:03:09,360
this nonce you process one bit at a time

77
00:03:09,360 --> 00:03:11,040
so you don't absorb over the entire

78
00:03:11,040 --> 00:03:13,120
state but only one bit at a time in this

79
00:03:13,120 --> 00:03:15,519
way the attacker has less freedom

80
00:03:15,519 --> 00:03:18,480
in manipulating the static secret here

81
00:03:18,480 --> 00:03:19,920
and and

82
00:03:19,920 --> 00:03:22,159
this uh we actually a couple of years

83
00:03:22,159 --> 00:03:23,840
back three years back you proved leakage

84
00:03:23,840 --> 00:03:26,319
resilience of the duplex construction

85
00:03:26,319 --> 00:03:29,440
and this um can be seen as a duplex

86
00:03:29,440 --> 00:03:31,200
construction so the leakage resilience

87
00:03:31,200 --> 00:03:33,040
of this one follows from the analysis we

88
00:03:33,040 --> 00:03:35,360
did in 2019

89
00:03:35,360 --> 00:03:38,560
the downside is that you need a nonce

90
00:03:38,560 --> 00:03:41,200
so how else can we efficiently do a

91
00:03:41,200 --> 00:03:43,840
leakage resilient or a function that's

92
00:03:43,840 --> 00:03:45,519
easier to protect against leakage and

93
00:03:45,519 --> 00:03:47,840
one way is the famous hash and prf

94
00:03:47,840 --> 00:03:49,040
approach

95
00:03:49,040 --> 00:03:51,280
so you have a message of arbitrary size

96
00:03:51,280 --> 00:03:52,959
b you hash it

97
00:03:52,959 --> 00:03:54,640
then you get the digits of in this case

98
00:03:54,640 --> 00:03:56,080
2k bits

99
00:03:56,080 --> 00:03:58,560
and only then you start doing some

100
00:03:58,560 --> 00:04:00,720
secret stuff so then you

101
00:04:00,720 --> 00:04:03,360
incorporate the secret key you have this

102
00:04:03,360 --> 00:04:05,040
function g so the only thing you need to

103
00:04:05,040 --> 00:04:06,239
protect here

104
00:04:06,239 --> 00:04:07,840
in the implementation is a function g

105
00:04:07,840 --> 00:04:09,519
you don't need to do a protected

106
00:04:09,519 --> 00:04:11,599
implementation necessarily of h because

107
00:04:11,599 --> 00:04:14,879
h cannot leak the key obviously

108
00:04:14,879 --> 00:04:17,199
the downside is that you have a 2k bit

109
00:04:17,199 --> 00:04:18,798
input here because otherwise you can

110
00:04:18,798 --> 00:04:20,720
have collisions faster than the birthday

111
00:04:20,720 --> 00:04:21,600
then

112
00:04:21,600 --> 00:04:24,479
and then the security level

113
00:04:24,479 --> 00:04:26,720
and now we can kind of turn this into

114
00:04:26,720 --> 00:04:29,120
the sponge and we end up with sucks and

115
00:04:29,120 --> 00:04:31,680
sucks is a suffix key spongebob

116
00:04:31,680 --> 00:04:35,040
um which was already proposed

117
00:04:35,040 --> 00:04:37,199
before in the the sponge formalization

118
00:04:37,199 --> 00:04:39,280
but in a general form

119
00:04:39,280 --> 00:04:42,160
in the description of isab by the brown

120
00:04:42,160 --> 00:04:44,000
hedorah 2017

121
00:04:44,000 --> 00:04:46,080
the idea idea is that we take the normal

122
00:04:46,080 --> 00:04:48,479
sponge with our bit absorption so we

123
00:04:48,479 --> 00:04:49,919
cannot do full state absorption but

124
00:04:49,919 --> 00:04:52,160
orbit absorption is still very good

125
00:04:52,160 --> 00:04:54,880
and only then you absorb the key using

126
00:04:54,880 --> 00:04:56,720
some function g

127
00:04:56,720 --> 00:04:58,880
and it doesn't need to have 2k bits here

128
00:04:58,880 --> 00:05:01,680
but just k bit input because we use the

129
00:05:01,680 --> 00:05:02,880
inner part and we make one more

130
00:05:02,880 --> 00:05:05,440
permutation call and then we get the tag

131
00:05:05,440 --> 00:05:08,160
and this function is leakage resilient

132
00:05:08,160 --> 00:05:10,880
if g and the last score are sufficiently

133
00:05:10,880 --> 00:05:12,639
protected that's what we proved a couple

134
00:05:12,639 --> 00:05:14,880
of years back in the black box model g

135
00:05:14,880 --> 00:05:17,039
can be an axor actually so you can do it

136
00:05:17,039 --> 00:05:18,880
very efficient you can just x or the key

137
00:05:18,880 --> 00:05:21,199
there and then you're done

138
00:05:21,199 --> 00:05:22,880
in more detail we proved the bound of

139
00:05:22,880 --> 00:05:25,120
this form and we proved

140
00:05:25,120 --> 00:05:27,199
we assumed that g is yeah two to the

141
00:05:27,199 --> 00:05:29,360
minus delta uniform two to the minus

142
00:05:29,360 --> 00:05:31,600
epsilon universal um

143
00:05:31,600 --> 00:05:33,919
typically this means that g behaves

144
00:05:33,919 --> 00:05:35,680
sufficiently uh

145
00:05:35,680 --> 00:05:36,720
good

146
00:05:36,720 --> 00:05:39,120
but an xor satisfies this so an xor

147
00:05:39,120 --> 00:05:41,120
satisfices for the minimum of doubt and

148
00:05:41,120 --> 00:05:43,039
absolute is k

149
00:05:43,039 --> 00:05:45,199
um but you can also take a prf or in

150
00:05:45,199 --> 00:05:48,320
general a hard to invert function there

151
00:05:48,320 --> 00:05:50,160
and we proved this there are three terms

152
00:05:50,160 --> 00:05:51,759
the first one is obvious this is just

153
00:05:51,759 --> 00:05:53,680
inner collisions in the hash part

154
00:05:53,680 --> 00:05:55,360
because if the attacker finds just a

155
00:05:55,360 --> 00:05:56,319
hash

156
00:05:56,319 --> 00:05:58,160
inner collision in the hash part he has

157
00:05:58,160 --> 00:05:59,840
the security is gone

158
00:05:59,840 --> 00:06:02,000
and now we have two other terms that

159
00:06:02,000 --> 00:06:04,479
involve a mu and this mu yeah it scares

160
00:06:04,479 --> 00:06:06,800
a little bit but it's quite intuitive in

161
00:06:06,800 --> 00:06:08,080
some sense

162
00:06:08,080 --> 00:06:10,479
so here we see for instance mu subscript

163
00:06:10,479 --> 00:06:12,720
t forget about the other numbers here

164
00:06:12,720 --> 00:06:14,880
this means that it is

165
00:06:14,880 --> 00:06:16,560
a maximum size

166
00:06:16,560 --> 00:06:18,639
of the multi-collision

167
00:06:18,639 --> 00:06:21,919
on t bits so it's very likely that there

168
00:06:21,919 --> 00:06:23,840
will never be a multi-collision of

169
00:06:23,840 --> 00:06:25,759
larger than d elements

170
00:06:25,759 --> 00:06:28,240
except with a small probability

171
00:06:28,240 --> 00:06:30,479
um so this is the bounce we proved

172
00:06:30,479 --> 00:06:32,639
three four year three years back

173
00:06:32,639 --> 00:06:34,479
and now we actually analyzed

174
00:06:34,479 --> 00:06:35,680
this bounce from the tightness

175
00:06:35,680 --> 00:06:37,440
perspective so we considered is this

176
00:06:37,440 --> 00:06:39,840
bound tight

177
00:06:39,840 --> 00:06:41,919
and now for the first term well it's not

178
00:06:41,919 --> 00:06:43,520
surprising inner collisions on the hash

179
00:06:43,520 --> 00:06:44,880
part then

180
00:06:44,880 --> 00:06:47,759
security is gone obviously

181
00:06:47,759 --> 00:06:49,280
then we looked at the second and the

182
00:06:49,280 --> 00:06:50,400
third

183
00:06:50,400 --> 00:06:51,440
bounce

184
00:06:51,440 --> 00:06:53,120
and because we have this multi-collision

185
00:06:53,120 --> 00:06:54,639
term it's not clear

186
00:06:54,639 --> 00:06:56,319
what this actually means this is just an

187
00:06:56,319 --> 00:06:58,080
artifact of the proof or can we actually

188
00:06:58,080 --> 00:06:59,120
break it

189
00:06:59,120 --> 00:07:00,560
and we looked at two different settings

190
00:07:00,560 --> 00:07:02,800
so one of them is where we simply take

191
00:07:02,800 --> 00:07:05,599
the xor sg so the key is just exhaust

192
00:07:05,599 --> 00:07:07,039
into the state

193
00:07:07,039 --> 00:07:08,960
and we describe two attacks so one of

194
00:07:08,960 --> 00:07:10,720
the attacks actually does the multi

195
00:07:10,720 --> 00:07:12,000
collisions

196
00:07:12,000 --> 00:07:14,000
on the tag basically it matches the

197
00:07:14,000 --> 00:07:15,199
third term

198
00:07:15,199 --> 00:07:17,280
is on the tag and then we recover the

199
00:07:17,280 --> 00:07:19,599
key we manage to recover the key

200
00:07:19,599 --> 00:07:21,120
and the other one is a multi-collision

201
00:07:21,120 --> 00:07:21,919
in the

202
00:07:21,919 --> 00:07:24,800
second term for the second term

203
00:07:24,800 --> 00:07:26,880
and it basically corresponds to a

204
00:07:26,880 --> 00:07:28,479
multi-collision attack at the place of

205
00:07:28,479 --> 00:07:30,960
the key and we recover the key

206
00:07:30,960 --> 00:07:33,759
okay so if we take a simple to invert

207
00:07:33,759 --> 00:07:35,919
function g you can break it

208
00:07:35,919 --> 00:07:38,720
up to this bounce and the bound is tight

209
00:07:38,720 --> 00:07:40,720
and as a third attack we consider the

210
00:07:40,720 --> 00:07:43,360
case where you have a pref sg

211
00:07:43,360 --> 00:07:45,360
this really corresponds to the case uh

212
00:07:45,360 --> 00:07:47,120
what we see in izap in the nest

213
00:07:47,120 --> 00:07:48,479
finalists isab

214
00:07:48,479 --> 00:07:50,560
and there we also find a multi-collision

215
00:07:50,560 --> 00:07:52,160
based attack that matches the second

216
00:07:52,160 --> 00:07:54,000
term um obviously it's not a key

217
00:07:54,000 --> 00:07:56,400
recovery attack but it is a forgery

218
00:07:56,400 --> 00:07:57,520
attack

219
00:07:57,520 --> 00:07:59,360
um the third term is basically

220
00:07:59,360 --> 00:08:01,280
independent of this function g so the

221
00:08:01,280 --> 00:08:02,879
original attack

222
00:08:02,879 --> 00:08:04,560
um kind of

223
00:08:04,560 --> 00:08:05,360
um

224
00:08:05,360 --> 00:08:06,800
show tightness

225
00:08:06,800 --> 00:08:08,479
and now yeah this is a five minute

226
00:08:08,479 --> 00:08:10,080
presentation i'm not going to discuss

227
00:08:10,080 --> 00:08:12,080
the actual attacks but in the slides in

228
00:08:12,080 --> 00:08:13,599
the full slice they are explained in

229
00:08:13,599 --> 00:08:15,599
detail and also in the paper they are

230
00:08:15,599 --> 00:08:17,199
explained with analysis so if you're

231
00:08:17,199 --> 00:08:18,720
interested just

232
00:08:18,720 --> 00:08:20,479
look at the full presentation or the

233
00:08:20,479 --> 00:08:21,599
paper

234
00:08:21,599 --> 00:08:25,878
okay so thank you for your attention

235
00:08:30,800 --> 00:08:32,799
so thank you bat

236
00:08:32,799 --> 00:08:37,159
is there any quick questions

237
00:08:41,120 --> 00:08:44,320
no so i have a i have a quick one uh

238
00:08:44,320 --> 00:08:47,279
it's on the the fact that your your g

239
00:08:47,279 --> 00:08:50,399
and where the key arrives uh has the

240
00:08:50,399 --> 00:08:51,760
same uh

241
00:08:51,760 --> 00:08:52,880
impact

242
00:08:52,880 --> 00:08:55,040
on the rate on the on the right part and

243
00:08:55,040 --> 00:08:57,040
not on the other part of the of the

244
00:08:57,040 --> 00:08:58,080
state

245
00:08:58,080 --> 00:09:00,160
would be

246
00:09:00,160 --> 00:09:03,040
give something better if you can

247
00:09:03,040 --> 00:09:04,880
provide some

248
00:09:04,880 --> 00:09:06,399
add some key

249
00:09:06,399 --> 00:09:08,399
also in the last part of the capacity it

250
00:09:08,399 --> 00:09:11,200
doesn't doesn't matter at all

251
00:09:11,200 --> 00:09:12,880
um so

252
00:09:12,880 --> 00:09:14,640
um

253
00:09:14,640 --> 00:09:16,560
so if you also add the key to the bottom

254
00:09:16,560 --> 00:09:18,880
part um

255
00:09:18,880 --> 00:09:20,560
um but then you're evaluating the

256
00:09:20,560 --> 00:09:22,399
function twice so i don't know how this

257
00:09:22,399 --> 00:09:24,720
works with leakage but it doesn't i

258
00:09:24,720 --> 00:09:26,080
don't think it improves the bound but

259
00:09:26,080 --> 00:09:28,640
i'm not 100 sure i think the bound won't

260
00:09:28,640 --> 00:09:30,640
get any better than this

261
00:09:30,640 --> 00:09:32,880
okay

262
00:09:34,399 --> 00:09:37,850
okay so let's thank the speaker again

263
00:09:37,850 --> 00:09:40,960
[Applause]

264
00:10:11,519 --> 00:10:14,519
wait

265
00:10:29,120 --> 00:10:32,120
yes

266
00:10:38,720 --> 00:10:41,360
okay so the

267
00:10:41,839 --> 00:10:45,040
next stock of the session is uh on

268
00:10:45,040 --> 00:10:47,519
quantum period finding his compression

269
00:10:47,519 --> 00:10:48,959
robust

270
00:10:48,959 --> 00:10:50,640
it's a work

271
00:10:50,640 --> 00:10:54,560
by alexander may and lars schlipper

272
00:10:54,560 --> 00:11:00,199
and last week we'll give the talk

273
00:11:00,560 --> 00:11:02,160
so hello

274
00:11:02,160 --> 00:11:04,000
today we have only access to a few

275
00:11:04,000 --> 00:11:05,600
hundred qubits

276
00:11:05,600 --> 00:11:07,440
uh physical qubits that are also quite

277
00:11:07,440 --> 00:11:09,519
noisy and not capable of performing most

278
00:11:09,519 --> 00:11:12,000
of our known quant algorithms today

279
00:11:12,000 --> 00:11:13,680
and

280
00:11:13,680 --> 00:11:15,360
furthermore we don't have access to a

281
00:11:15,360 --> 00:11:17,519
single logical qubit that is noiseless

282
00:11:17,519 --> 00:11:18,240
and

283
00:11:18,240 --> 00:11:19,920
on which most of our cryptographical

284
00:11:19,920 --> 00:11:22,560
grant algorithms rely on

285
00:11:22,560 --> 00:11:24,640
however there are many companies like

286
00:11:24,640 --> 00:11:26,959
ibm inq and i

287
00:11:26,959 --> 00:11:28,399
sqc that

288
00:11:28,399 --> 00:11:30,480
announced to build current computers

289
00:11:30,480 --> 00:11:31,600
capable of

290
00:11:31,600 --> 00:11:34,160
having some millions of qubits in the

291
00:11:34,160 --> 00:11:36,560
next 10 years and are also capable of

292
00:11:36,560 --> 00:11:39,279
simulating or creating some hundreds

293
00:11:39,279 --> 00:11:41,279
logical qubits

294
00:11:41,279 --> 00:11:43,120
our goal in this work was

295
00:11:43,120 --> 00:11:44,880
to

296
00:11:44,880 --> 00:11:46,959
make efficient more efficiently use of

297
00:11:46,959 --> 00:11:50,320
this few available qubits in the future

298
00:11:50,320 --> 00:11:51,760
in terms of

299
00:11:51,760 --> 00:11:54,720
period finding algorithms

300
00:11:54,720 --> 00:11:57,120
from this um we will result into uh

301
00:11:57,120 --> 00:11:59,680
quantum computers and quantum attacks

302
00:11:59,680 --> 00:12:00,480
being

303
00:12:00,480 --> 00:12:02,399
sooner available and so sooner as

304
00:12:02,399 --> 00:12:04,800
threats to our security which will also

305
00:12:04,800 --> 00:12:06,560
lead to the fact that we have less time

306
00:12:06,560 --> 00:12:08,839
to prepare for the quantum

307
00:12:08,839 --> 00:12:11,839
attackers for this before uh primarily

308
00:12:11,839 --> 00:12:14,720
studies sign problem which is a problem

309
00:12:14,720 --> 00:12:16,480
given access to a two to one function

310
00:12:16,480 --> 00:12:19,920
with a period s to find this period s

311
00:12:19,920 --> 00:12:21,760
this problem is classically hard to

312
00:12:21,760 --> 00:12:23,360
solve and

313
00:12:23,360 --> 00:12:25,360
requires expected at least

314
00:12:25,360 --> 00:12:28,480
exponential many queries to the function

315
00:12:28,480 --> 00:12:30,320
but however with quantum access to the

316
00:12:30,320 --> 00:12:32,959
function and two n qubits

317
00:12:32,959 --> 00:12:35,519
um this problem can be solved in

318
00:12:35,519 --> 00:12:38,000
polynomial time on a quantum computer

319
00:12:38,000 --> 00:12:40,000
this can be done with via science

320
00:12:40,000 --> 00:12:41,120
algorithm

321
00:12:41,120 --> 00:12:45,360
which uses a circuit like this one here

322
00:12:45,839 --> 00:12:46,880
to

323
00:12:46,880 --> 00:12:49,360
sample randomly y's that are orthogonal

324
00:12:49,360 --> 00:12:51,200
to the hidden period s and then

325
00:12:51,200 --> 00:12:52,959
afterwards computing s out of this

326
00:12:52,959 --> 00:12:55,760
sample device thereby it takes

327
00:12:55,760 --> 00:12:58,639
n qubits for the input where the bias is

328
00:12:58,639 --> 00:13:01,760
later encoded in and n qubits to

329
00:13:01,760 --> 00:13:04,880
hold the function volume

330
00:13:04,880 --> 00:13:06,240
let's have a closer look on the

331
00:13:06,240 --> 00:13:08,399
distribution of this y's

332
00:13:08,399 --> 00:13:10,079
normally in sam's algorithms these y's

333
00:13:10,079 --> 00:13:12,399
are uniform distributed

334
00:13:12,399 --> 00:13:14,000
over all

335
00:13:14,000 --> 00:13:16,079
y's that are orthogonal to s

336
00:13:16,079 --> 00:13:18,880
here for example for n equals to c

337
00:13:18,880 --> 00:13:22,079
3 and s equal to 0 0 1.

338
00:13:22,079 --> 00:13:24,320
we see that we measure

339
00:13:24,320 --> 00:13:26,320
the probability to measure any y that

340
00:13:26,320 --> 00:13:30,079
has non-orthogonal to s is 0.

341
00:13:30,079 --> 00:13:31,440
and note that the

342
00:13:31,440 --> 00:13:33,120
zero vector don't give us any

343
00:13:33,120 --> 00:13:35,760
information about s

344
00:13:35,760 --> 00:13:37,920
in our work we now try to reduce the

345
00:13:37,920 --> 00:13:40,240
number of qubits that we need to encode

346
00:13:40,240 --> 00:13:43,120
the function value f by used hash

347
00:13:43,120 --> 00:13:45,920
versions of the function to one bit

348
00:13:45,920 --> 00:13:47,519
by this we change the distribution of

349
00:13:47,519 --> 00:13:48,800
the y's

350
00:13:48,800 --> 00:13:50,959
um this can look like this for example

351
00:13:50,959 --> 00:13:52,880
for a hash function you see a bias

352
00:13:52,880 --> 00:13:55,279
towards the zero vector as well that we

353
00:13:55,279 --> 00:13:57,920
maybe didn't can't measure any vectors

354
00:13:57,920 --> 00:14:00,560
some vectors anymore but fortunately we

355
00:14:00,560 --> 00:14:02,240
don't measure any false vectors that are

356
00:14:02,240 --> 00:14:05,279
non-orthogonal to s

357
00:14:05,440 --> 00:14:07,279
um this is only one hash functions if

358
00:14:07,279 --> 00:14:09,360
you look at different hash functions we

359
00:14:09,360 --> 00:14:12,240
see also other patterns occur like for

360
00:14:12,240 --> 00:14:13,920
some hash functions the probability for

361
00:14:13,920 --> 00:14:17,279
some y's are even higher as before

362
00:14:17,279 --> 00:14:19,040
by taking the average over all hash

363
00:14:19,040 --> 00:14:21,279
functions that maps to one bit

364
00:14:21,279 --> 00:14:24,079
we get a distribution like this

365
00:14:24,079 --> 00:14:26,240
where the probability over the choice of

366
00:14:26,240 --> 00:14:28,720
the hash functions for the zero vector

367
00:14:28,720 --> 00:14:30,880
increase roughly by one half

368
00:14:30,880 --> 00:14:33,279
and every other probability decreases

369
00:14:33,279 --> 00:14:36,079
roughly by a factor of two

370
00:14:36,079 --> 00:14:37,519
this means also

371
00:14:37,519 --> 00:14:39,839
that we only need roughly the double

372
00:14:39,839 --> 00:14:41,680
number of measurements with this hash

373
00:14:41,680 --> 00:14:44,000
versions to solve the same problems

374
00:14:44,000 --> 00:14:46,160
whereby we only require roughly half the

375
00:14:46,160 --> 00:14:48,399
qubits amount since we only require one

376
00:14:48,399 --> 00:14:52,639
qubit to encode the function value

377
00:14:52,720 --> 00:14:54,160
furthermore we have shown that we can

378
00:14:54,160 --> 00:14:55,680
combine our technique with other

379
00:14:55,680 --> 00:14:57,199
techniques like the grover midsize

380
00:14:57,199 --> 00:14:58,800
technique and the offline science

381
00:14:58,800 --> 00:14:59,839
technique

382
00:14:59,839 --> 00:15:01,279
which further reduced the number of

383
00:15:01,279 --> 00:15:03,279
qubits that are required by a factor for

384
00:15:03,279 --> 00:15:05,360
some cases of four

385
00:15:05,360 --> 00:15:06,240
and

386
00:15:06,240 --> 00:15:07,600
makes our

387
00:15:07,600 --> 00:15:12,320
technique even more easier to implement

388
00:15:12,320 --> 00:15:14,959
additionally we have shown that our um

389
00:15:14,959 --> 00:15:17,920
this technique is not only um limitated

390
00:15:17,920 --> 00:15:20,560
to simon's algorithm but can also be

391
00:15:20,560 --> 00:15:22,399
applied to a broader

392
00:15:22,399 --> 00:15:24,480
range of period finding algorithm

393
00:15:24,480 --> 00:15:26,959
including schwarz algorithm

394
00:15:26,959 --> 00:15:29,519
and we conjecture that in most cases a

395
00:15:29,519 --> 00:15:31,199
single hash function

396
00:15:31,199 --> 00:15:35,040
simply like a bit projection is enough

397
00:15:35,040 --> 00:15:37,360
to summarize our results in this light

398
00:15:37,360 --> 00:15:38,720
of security

399
00:15:38,720 --> 00:15:40,720
um current algorithms

400
00:15:40,720 --> 00:15:41,759
may be

401
00:15:41,759 --> 00:15:43,440
earlier and with fewer qubits is

402
00:15:43,440 --> 00:15:45,120
straight to our security and we should

403
00:15:45,120 --> 00:15:47,199
prepare faster

404
00:15:47,199 --> 00:15:50,758
thank you for your attention

405
00:15:54,959 --> 00:15:58,079
so uh thank you last for the talk

406
00:15:58,079 --> 00:16:01,759
is there is there any question

407
00:16:01,759 --> 00:16:05,079
for us

408
00:16:12,870 --> 00:16:15,940
[Music]

409
00:16:21,519 --> 00:16:22,720
um

410
00:16:22,720 --> 00:16:24,000
so

411
00:16:24,000 --> 00:16:26,480
the question is if i have any ideas

412
00:16:26,480 --> 00:16:28,079
over the complexity of the hash function

413
00:16:28,079 --> 00:16:30,240
so the hash function itself can be

414
00:16:30,240 --> 00:16:32,399
implemented quite easily for example we

415
00:16:32,399 --> 00:16:34,800
can use the scala product as hash

416
00:16:34,800 --> 00:16:37,040
function that could be implemented with

417
00:16:37,040 --> 00:16:39,040
one toefl gate that can be implemented

418
00:16:39,040 --> 00:16:42,480
in place with roughly linear many gates

419
00:16:42,480 --> 00:16:46,880
linear depth with quadratic many gates

420
00:16:47,440 --> 00:16:49,040
but with a simple bit projection we

421
00:16:49,040 --> 00:16:50,800
could also use only as

422
00:16:50,800 --> 00:16:52,320
simple c naught

423
00:16:52,320 --> 00:16:55,440
to use uh to use it in the case that we

424
00:16:55,440 --> 00:16:56,959
combined it with the grover mid-time or

425
00:16:56,959 --> 00:16:58,560
offline sim technique

426
00:16:58,560 --> 00:17:00,800
in the other case where we

427
00:17:00,800 --> 00:17:03,279
don't have this additional space so we

428
00:17:03,279 --> 00:17:05,439
have directly to use the

429
00:17:05,439 --> 00:17:06,959
oracle

430
00:17:06,959 --> 00:17:08,959
there are some technical problems that

431
00:17:08,959 --> 00:17:11,039
can be circumvent if we have special

432
00:17:11,039 --> 00:17:14,400
implementation of the oracle

433
00:17:16,880 --> 00:17:21,199
okay thanks a lot is there any

434
00:17:21,199 --> 00:17:24,799
questions any questions

435
00:17:25,520 --> 00:17:29,380
no so if not let's thank class again

436
00:17:29,380 --> 00:17:32,749
[Applause]

437
00:18:17,440 --> 00:18:20,160
okay so the third uh

438
00:18:20,160 --> 00:18:23,039
talk of the session will be a

439
00:18:23,039 --> 00:18:25,919
week tweak quiz for the craft block

440
00:18:25,919 --> 00:18:26,880
cipher

441
00:18:26,880 --> 00:18:28,400
it's a work

442
00:18:28,400 --> 00:18:32,400
by gregor leander and sharam razul zadeh

443
00:18:32,400 --> 00:18:36,559
and sharam will give the talk

444
00:18:39,360 --> 00:18:42,360
okay

445
00:18:48,799 --> 00:18:52,000
thank you for the introduction uh

446
00:18:52,000 --> 00:18:55,120
craft is a treatable black cipher with a

447
00:18:55,120 --> 00:18:58,240
black and tweak size of 64 bits and the

448
00:18:58,240 --> 00:18:59,720
key is

449
00:18:59,720 --> 00:19:02,960
128 bits and it is claimed that it

450
00:19:02,960 --> 00:19:06,400
provides a 128 bit security in the

451
00:19:06,400 --> 00:19:09,360
related related tweak model

452
00:19:09,360 --> 00:19:13,039
it follows spn structure with 32 rounds

453
00:19:13,039 --> 00:19:16,400
that the 31st ones are identical up to

454
00:19:16,400 --> 00:19:18,559
twickey and round constant addition and

455
00:19:18,559 --> 00:19:20,000
the last one is

456
00:19:20,000 --> 00:19:21,840
just a linear round

457
00:19:21,840 --> 00:19:24,720
and it is very similar to uh midori and

458
00:19:24,720 --> 00:19:28,320
skinny black ciphers uh but

459
00:19:28,320 --> 00:19:30,799
the main uh difference with them uh in

460
00:19:30,799 --> 00:19:32,400
craft

461
00:19:32,400 --> 00:19:34,720
all the round operations are emblative

462
00:19:34,720 --> 00:19:37,760
so the inverse of them inverse of the

463
00:19:37,760 --> 00:19:40,400
round operations are same as

464
00:19:40,400 --> 00:19:41,919
themselves

465
00:19:41,919 --> 00:19:44,559
uh considering this uh matrix of nibbles

466
00:19:44,559 --> 00:19:47,679
as the input for uh for the run function

467
00:19:47,679 --> 00:19:49,840
it starts with mixed column operation

468
00:19:49,840 --> 00:19:50,799
that

469
00:19:50,799 --> 00:19:52,720
a linear mapping from lower half is

470
00:19:52,720 --> 00:19:54,720
added to the upper half

471
00:19:54,720 --> 00:19:57,360
and then a round constant is added to

472
00:19:57,360 --> 00:19:59,919
fourth and fifth nibble and third

473
00:19:59,919 --> 00:20:01,120
operation is

474
00:20:01,120 --> 00:20:03,280
just addition of the run ticket to all

475
00:20:03,280 --> 00:20:05,520
of the state and the last

476
00:20:05,520 --> 00:20:07,760
the last linear operation is permutation

477
00:20:07,760 --> 00:20:10,880
of nipples that using a permutation p uh

478
00:20:10,880 --> 00:20:13,520
it changes the position of uh

479
00:20:13,520 --> 00:20:16,000
the nibbles and note that uh

480
00:20:16,000 --> 00:20:18,480
any nibble from a lower half will go to

481
00:20:18,480 --> 00:20:21,280
the upper half and also the same the

482
00:20:21,280 --> 00:20:22,720
vice verse so

483
00:20:22,720 --> 00:20:25,280
any nibble from uh upper half will go to

484
00:20:25,280 --> 00:20:26,000
the

485
00:20:26,000 --> 00:20:28,240
lower half and the last operation is

486
00:20:28,240 --> 00:20:29,919
just uh

487
00:20:29,919 --> 00:20:32,720
applying as an inflativist box to each

488
00:20:32,720 --> 00:20:35,720
neighbor

489
00:20:35,840 --> 00:20:38,880
about its round uh tweaky schedule uh it

490
00:20:38,880 --> 00:20:42,640
is very simple the 128 bit uh keys split

491
00:20:42,640 --> 00:20:45,200
to in uh to into

492
00:20:45,200 --> 00:20:48,960
two parts uh kazura and k1 and it's also

493
00:20:48,960 --> 00:20:49,919
a

494
00:20:49,919 --> 00:20:51,360
computer mod

495
00:20:51,360 --> 00:20:55,760
updated tweak that uh q q n of t

496
00:20:55,760 --> 00:20:57,640
so that is a

497
00:20:57,640 --> 00:20:59,120
[Music]

498
00:20:59,120 --> 00:21:01,600
nibble permuted version of the tweak

499
00:21:01,600 --> 00:21:02,400
and

500
00:21:02,400 --> 00:21:06,720
by ignoring k-0 or k-1 with t or

501
00:21:06,720 --> 00:21:09,360
updated t it provides four round two

502
00:21:09,360 --> 00:21:10,799
keys and

503
00:21:10,799 --> 00:21:13,919
then just iterate them for

504
00:21:13,919 --> 00:21:15,600
rounds

505
00:21:15,600 --> 00:21:16,960
overall

506
00:21:16,960 --> 00:21:19,360
craft

507
00:21:19,360 --> 00:21:21,200
provides decryption

508
00:21:21,200 --> 00:21:23,760
same as the encryption up to

509
00:21:23,760 --> 00:21:26,000
a modification under run two keys and

510
00:21:26,000 --> 00:21:28,240
reversing order of the

511
00:21:28,240 --> 00:21:30,640
round constants

512
00:21:30,640 --> 00:21:33,200
first uh first and main contribution of

513
00:21:33,200 --> 00:21:34,960
our paper is to show

514
00:21:34,960 --> 00:21:37,200
uh an equivalent representation for

515
00:21:37,200 --> 00:21:39,760
craft and uh then

516
00:21:39,760 --> 00:21:42,640
show how it is possible to

517
00:21:42,640 --> 00:21:45,600
change it to a victory key model with a

518
00:21:45,600 --> 00:21:48,000
feistel network

519
00:21:48,000 --> 00:21:50,400
it starts with uh

520
00:21:50,400 --> 00:21:51,600
uh

521
00:21:51,600 --> 00:21:54,320
here we show uh two consecutive rounds

522
00:21:54,320 --> 00:21:58,000
of uh the cipher that the left branches

523
00:21:58,000 --> 00:22:01,200
uh for left branches for the upper half

524
00:22:01,200 --> 00:22:04,640
and right branches for the lower half

525
00:22:04,640 --> 00:22:06,400
the first one is the mixed column prime

526
00:22:06,400 --> 00:22:08,720
that uh the

527
00:22:08,720 --> 00:22:12,159
the linear mapping

528
00:22:12,159 --> 00:22:14,400
which lower half is added to the upper

529
00:22:14,400 --> 00:22:17,200
half we show it with mixed column prime

530
00:22:17,200 --> 00:22:19,919
and then we split uh at round three key

531
00:22:19,919 --> 00:22:22,720
and sparks layer to two parts and the

532
00:22:22,720 --> 00:22:25,280
last one is uh just a permutation of

533
00:22:25,280 --> 00:22:27,039
nipples note that

534
00:22:27,039 --> 00:22:29,760
this p n p m prime and p and double

535
00:22:29,760 --> 00:22:31,600
prime are the

536
00:22:31,600 --> 00:22:34,159
shuffle in the nipples for each

537
00:22:34,159 --> 00:22:35,679
half and then

538
00:22:35,679 --> 00:22:38,720
of course there is a swap

539
00:22:38,720 --> 00:22:41,280
and since this permutation of nibbles

540
00:22:41,280 --> 00:22:43,840
all together is uh in bluetooth it

541
00:22:43,840 --> 00:22:45,919
caused that p n prime and p and double

542
00:22:45,919 --> 00:22:49,760
prime to be inverse of each other

543
00:22:50,240 --> 00:22:52,480
it is possible to bring these two

544
00:22:52,480 --> 00:22:56,880
operations sp prime npm prime uh from uh

545
00:22:56,880 --> 00:22:59,280
end of uh each run to the

546
00:22:59,280 --> 00:23:01,600
beginning of the next round so like this

547
00:23:01,600 --> 00:23:02,880
in this figure

548
00:23:02,880 --> 00:23:05,039
and it is again possible to bring these

549
00:23:05,039 --> 00:23:07,360
two operations to inside of the bridging

550
00:23:07,360 --> 00:23:10,000
branch and also after the bridging point

551
00:23:10,000 --> 00:23:12,960
so it will be uh

552
00:23:12,960 --> 00:23:15,120
like this structure

553
00:23:15,120 --> 00:23:17,760
and since we can uh replace position of

554
00:23:17,760 --> 00:23:20,000
s we prime and p and double prime with

555
00:23:20,000 --> 00:23:22,720
each other and this p and prime and p

556
00:23:22,720 --> 00:23:24,400
and double prime are inverse of each

557
00:23:24,400 --> 00:23:27,280
other they can be removed just by uh

558
00:23:27,280 --> 00:23:30,640
modifying modifying this uh pk double

559
00:23:30,640 --> 00:23:33,360
prime so it will be like this

560
00:23:33,360 --> 00:23:35,919
and as you see uh this is the new

561
00:23:35,919 --> 00:23:39,440
representation for kraft black cipher

562
00:23:39,440 --> 00:23:41,360
and it is very similar to feistel

563
00:23:41,360 --> 00:23:43,120
network but there's a difference and

564
00:23:43,120 --> 00:23:45,840
that is in in the case for fyson network

565
00:23:45,840 --> 00:23:48,080
this uh operation

566
00:23:48,080 --> 00:23:50,480
doesn't exist and it is always the ident

567
00:23:50,480 --> 00:23:52,000
function

568
00:23:52,000 --> 00:23:54,000
uh

569
00:23:54,000 --> 00:23:55,679
we showed that uh

570
00:23:55,679 --> 00:23:58,000
it will this keyed operation will be the

571
00:23:58,000 --> 00:24:00,240
same as the ident function if and only

572
00:24:00,240 --> 00:24:03,279
if that this tweaky uh

573
00:24:03,279 --> 00:24:08,000
this uh tricky be equal to zero

574
00:24:08,000 --> 00:24:10,559
repeating this to every round uh we will

575
00:24:10,559 --> 00:24:13,679
have the uh victory kim uh structure of

576
00:24:13,679 --> 00:24:15,520
the craft block cipher that follows the

577
00:24:15,520 --> 00:24:19,039
network uh faster network and it is only

578
00:24:19,039 --> 00:24:20,640
possible that uh

579
00:24:20,640 --> 00:24:22,000
100

580
00:24:22,000 --> 00:24:22,880
the

581
00:24:22,880 --> 00:24:24,960
the key uh

582
00:24:24,960 --> 00:24:29,679
is one of the two today 88 uh v keys and

583
00:24:29,679 --> 00:24:33,039
if uh the two they used to make is uh

584
00:24:33,039 --> 00:24:35,360
one of the 256

585
00:24:35,360 --> 00:24:37,520
uh tweaks

586
00:24:37,520 --> 00:24:39,840
weak tweaks corresponding to that uh

587
00:24:39,840 --> 00:24:42,240
used key

588
00:24:42,240 --> 00:24:44,480
this week this week two key structure

589
00:24:44,480 --> 00:24:48,080
can be used can be analyzed against

590
00:24:48,080 --> 00:24:49,039
common

591
00:24:49,039 --> 00:24:50,960
attacks for block ciphers but we only

592
00:24:50,960 --> 00:24:53,919
did it for differential

593
00:24:53,919 --> 00:24:56,080
for differential analysis

594
00:24:56,080 --> 00:24:57,760
i'm not going to talk about their

595
00:24:57,760 --> 00:25:01,120
details if you are interested please uh

596
00:25:01,120 --> 00:25:02,799
have a look on the long

597
00:25:02,799 --> 00:25:05,600
on the recorded video or

598
00:25:05,600 --> 00:25:07,840
read the paper please

599
00:25:07,840 --> 00:25:11,120
about the results we present a 230 round

600
00:25:11,120 --> 00:25:12,799
uh

601
00:25:12,799 --> 00:25:15,760
single tweak a differential attack uh

602
00:25:15,760 --> 00:25:18,400
bit complex of uh two to the nine four

603
00:25:18,400 --> 00:25:21,760
encryptions and two to the 72 data using

604
00:25:21,760 --> 00:25:24,400
two to the 51 blocks of memory we also

605
00:25:24,400 --> 00:25:28,070
did a 260 206 rounds

606
00:25:28,070 --> 00:25:29,520
[Music]

607
00:25:29,520 --> 00:25:31,520
related peak differential attack on

608
00:25:31,520 --> 00:25:33,760
craft

609
00:25:33,760 --> 00:25:34,559
but

610
00:25:34,559 --> 00:25:36,320
the complexity for this one is higher

611
00:25:36,320 --> 00:25:39,039
and it is 2 to the 105

612
00:25:39,039 --> 00:25:42,400
encryptions and 2 to the 73 data using

613
00:25:42,400 --> 00:25:43,360
two

614
00:25:43,360 --> 00:25:45,919
to the 60 blocks of memory

615
00:25:45,919 --> 00:25:47,200
thank you for

616
00:25:47,200 --> 00:25:50,640
thanks for your attention

617
00:25:55,279 --> 00:25:58,480
thanks uh sean is there questions for

618
00:25:58,480 --> 00:26:00,880
sean

619
00:26:04,000 --> 00:26:06,159
so i have one

620
00:26:06,159 --> 00:26:08,880
so you have this uh new representation

621
00:26:08,880 --> 00:26:10,000
and

622
00:26:10,000 --> 00:26:13,120
it seems there is many properties of the

623
00:26:13,120 --> 00:26:14,159
runs

624
00:26:14,159 --> 00:26:16,640
of craft that made this real new

625
00:26:16,640 --> 00:26:18,640
representation possible

626
00:26:18,640 --> 00:26:19,440
but

627
00:26:19,440 --> 00:26:22,320
did you try to identify

628
00:26:22,320 --> 00:26:25,600
more general behavior of the linear

629
00:26:25,600 --> 00:26:27,039
layer because i assume it's from the

630
00:26:27,039 --> 00:26:28,320
linear layer that you can do this

631
00:26:28,320 --> 00:26:31,679
representation do you have ideas of

632
00:26:31,679 --> 00:26:33,600
properties on the linear errors that you

633
00:26:33,600 --> 00:26:36,159
can pass from spn to physical

634
00:26:36,159 --> 00:26:39,159
representations

635
00:26:40,559 --> 00:26:42,880
i would say it's not only the linear

636
00:26:42,880 --> 00:26:45,919
layer but also the

637
00:26:45,919 --> 00:26:49,840
s box because xbox is inflative

638
00:26:49,840 --> 00:26:53,039
this can also be applied to skinny but

639
00:26:53,039 --> 00:26:55,600
for skinny this xbox is not uh

640
00:26:55,600 --> 00:26:57,120
involutive so

641
00:26:57,120 --> 00:27:00,400
both linear layer together with s-box

642
00:27:00,400 --> 00:27:03,039
helped us to change from

643
00:27:03,039 --> 00:27:06,240
spn to faster and that's not for example

644
00:27:06,240 --> 00:27:09,120
uh possible to skinny i hope this

645
00:27:09,120 --> 00:27:11,360
answers the question

646
00:27:11,360 --> 00:27:14,480
yes thanks sir thanks a lot

647
00:27:14,480 --> 00:27:19,880
so let's uh join me to thank sharm again

648
00:27:29,679 --> 00:27:32,679
so

649
00:27:45,520 --> 00:27:48,520
me

650
00:27:51,840 --> 00:27:53,200
okay so uh

651
00:27:53,200 --> 00:27:54,080
the

652
00:27:54,080 --> 00:27:56,399
next talk of the session

653
00:27:56,399 --> 00:27:59,440
is about maximums of the additive

654
00:27:59,440 --> 00:28:01,919
differential probability of

655
00:28:01,919 --> 00:28:03,600
exclusive ore

656
00:28:03,600 --> 00:28:06,399
and it's a work by nikki mua nikolai

657
00:28:06,399 --> 00:28:10,159
kolomek danil aktiyamov ivan

658
00:28:10,159 --> 00:28:12,000
suturma

659
00:28:12,000 --> 00:28:13,279
matway

660
00:28:13,279 --> 00:28:14,640
panverov

661
00:28:14,640 --> 00:28:17,360
xenia

662
00:28:28,399 --> 00:28:32,559
and nikki we will give the turk

663
00:28:32,559 --> 00:28:34,240
thank you young i was wondering if

664
00:28:34,240 --> 00:28:37,200
you're going to say all the names so

665
00:28:37,200 --> 00:28:39,360
maybe i should explain why exactly there

666
00:28:39,360 --> 00:28:42,159
are so many uh authors here what

667
00:28:42,159 --> 00:28:45,520
happened was that in 2020

668
00:28:45,520 --> 00:28:47,600
uh right when epidemic started and then

669
00:28:47,600 --> 00:28:50,640
summer came um i got a request from uh

670
00:28:50,640 --> 00:28:53,360
people at uh novosibir state university

671
00:28:53,360 --> 00:28:55,520
we're organizing a

672
00:28:55,520 --> 00:28:58,640
a workshop and a similar style of

673
00:28:58,640 --> 00:29:01,039
we used to have these ecrypt research

674
00:29:01,039 --> 00:29:04,000
retreats or ask in asia for people who

675
00:29:04,000 --> 00:29:07,200
still remember those sadia was give us a

676
00:29:07,200 --> 00:29:10,640
problem to work on and then

677
00:29:10,640 --> 00:29:11,440
we'll

678
00:29:11,440 --> 00:29:12,960
put again put ourselves together in

679
00:29:12,960 --> 00:29:14,799
teams with a lot of students who are

680
00:29:14,799 --> 00:29:17,200
just starting out to see um if we can

681
00:29:17,200 --> 00:29:19,279
maybe solve this problem

682
00:29:19,279 --> 00:29:21,600
okay so i have my uh box of problems

683
00:29:21,600 --> 00:29:22,720
that

684
00:29:22,720 --> 00:29:24,480
are still interesting to look at i think

685
00:29:24,480 --> 00:29:26,640
that haven't been uh haven't been solved

686
00:29:26,640 --> 00:29:28,240
yet so this is a problem that i'll talk

687
00:29:28,240 --> 00:29:30,399
about that is um

688
00:29:30,399 --> 00:29:32,720
more than 10 years old that i've been

689
00:29:32,720 --> 00:29:34,720
working on it and every time that i gave

690
00:29:34,720 --> 00:29:36,799
this problem to somebody they found it

691
00:29:36,799 --> 00:29:38,880
interesting to look at like get some new

692
00:29:38,880 --> 00:29:40,720
structures see some ideas and then

693
00:29:40,720 --> 00:29:42,480
explore a bit um

694
00:29:42,480 --> 00:29:44,640
the basics of cryptanalysis

695
00:29:44,640 --> 00:29:46,159
but it has

696
00:29:46,159 --> 00:29:48,559
never been a solvable problem so that's

697
00:29:48,559 --> 00:29:49,919
good for me because then every time

698
00:29:49,919 --> 00:29:51,440
people are asking me for a problem just

699
00:29:51,440 --> 00:29:53,120
give the same problem again

700
00:29:53,120 --> 00:29:56,080
um but what happened here is some two

701
00:29:56,080 --> 00:29:58,320
months after the research retreat was

702
00:29:58,320 --> 00:30:00,880
over i got an email saying oh we solved

703
00:30:00,880 --> 00:30:04,159
it so that's why i'm here to present the

704
00:30:04,159 --> 00:30:05,840
result

705
00:30:05,840 --> 00:30:08,320
it's about differential cryptanalysis

706
00:30:08,320 --> 00:30:11,120
but it's going to be super easy so at

707
00:30:11,120 --> 00:30:12,480
least to explain the problem not

708
00:30:12,480 --> 00:30:14,960
actually to solve it so let me recall

709
00:30:14,960 --> 00:30:16,159
here as you've seen in many of the

710
00:30:16,159 --> 00:30:18,000
presentations before

711
00:30:18,000 --> 00:30:20,000
the idea behind differential

712
00:30:20,000 --> 00:30:23,279
cryptanalysis so you have an input you

713
00:30:23,279 --> 00:30:25,440
have an output and what happens if you

714
00:30:25,440 --> 00:30:28,640
flip some bits or bits at the end books

715
00:30:28,640 --> 00:30:30,240
um you want to know what's going to

716
00:30:30,240 --> 00:30:32,640
happen to the output it's maybe going to

717
00:30:32,640 --> 00:30:34,720
have some bits different as well but

718
00:30:34,720 --> 00:30:38,480
which bits it is depends on

719
00:30:39,120 --> 00:30:40,559
some random choices so there's some

720
00:30:40,559 --> 00:30:43,039
probability involved here and typically

721
00:30:43,039 --> 00:30:45,840
what we'll do is um we want to look at

722
00:30:45,840 --> 00:30:48,320
differences in the middle

723
00:30:48,320 --> 00:30:50,480
so that we can get a good estimate of

724
00:30:50,480 --> 00:30:52,640
what the probability would be to go from

725
00:30:52,640 --> 00:30:55,440
a certain input to a certain output

726
00:30:55,440 --> 00:30:56,799
now we're not going to look at a full

727
00:30:56,799 --> 00:30:58,799
cipher we're actually only going to look

728
00:30:58,799 --> 00:31:01,840
at one operation one xor operation so

729
00:31:01,840 --> 00:31:05,120
it's going to be uh much much simpler

730
00:31:05,120 --> 00:31:06,799
because we're going to look at addition

731
00:31:06,799 --> 00:31:09,519
rotation xor type constructions the

732
00:31:09,519 --> 00:31:12,000
x-ray is the one we're going to analyze

733
00:31:12,000 --> 00:31:14,960
with differences that are additive

734
00:31:14,960 --> 00:31:16,799
now

735
00:31:16,799 --> 00:31:19,120
easier might be to look at the other way

736
00:31:19,120 --> 00:31:20,960
around um and that's maybe a result of

737
00:31:20,960 --> 00:31:22,559
this is more common in papers when

738
00:31:22,559 --> 00:31:24,399
people want to analyze these uh arx

739
00:31:24,399 --> 00:31:26,720
constructions so you might say my

740
00:31:26,720 --> 00:31:28,960
differences are xor differences

741
00:31:28,960 --> 00:31:30,720
i'm flipping bits and i'm trying to see

742
00:31:30,720 --> 00:31:33,120
how those bits uh propagate and then

743
00:31:33,120 --> 00:31:34,799
we'd like to know that city operation is

744
00:31:34,799 --> 00:31:36,559
an addition otherwise the propagation is

745
00:31:36,559 --> 00:31:38,720
always for rotation for exoprobability

746
00:31:38,720 --> 00:31:40,240
one

747
00:31:40,240 --> 00:31:42,399
there's a paper by um

748
00:31:42,399 --> 00:31:46,240
litma wallen and duma at fsc 2004 that

749
00:31:46,240 --> 00:31:49,039
shows that you can represent this

750
00:31:49,039 --> 00:31:51,519
probability by multiplying a set of

751
00:31:51,519 --> 00:31:53,760
matrices what you need to do is just see

752
00:31:53,760 --> 00:31:56,240
like what matrix what what difference do

753
00:31:56,240 --> 00:31:58,559
i have at what position like here it

754
00:31:58,559 --> 00:32:00,960
says for the word on the left there is

755
00:32:00,960 --> 00:32:02,320
for the red one right there is a

756
00:32:02,320 --> 00:32:04,480
difference and then for the word on the

757
00:32:04,480 --> 00:32:06,000
right because you have two inputs for

758
00:32:06,000 --> 00:32:07,760
your addition there's no difference

759
00:32:07,760 --> 00:32:09,440
there's also no difference on the output

760
00:32:09,440 --> 00:32:11,600
for this bit position so you select

761
00:32:11,600 --> 00:32:13,600
matrix a 1

762
00:32:13,600 --> 00:32:14,960
zero zero

763
00:32:14,960 --> 00:32:16,880
here the matrices you multiply these and

764
00:32:16,880 --> 00:32:20,399
you get the probability

765
00:32:20,480 --> 00:32:22,640
there is the dual of this you can say

766
00:32:22,640 --> 00:32:25,440
what if my operation is the xor and my

767
00:32:25,440 --> 00:32:27,760
differences are additive differences

768
00:32:27,760 --> 00:32:29,600
then you can apply a similar approach as

769
00:32:29,600 --> 00:32:31,840
well but the matrices happen to be a bit

770
00:32:31,840 --> 00:32:33,760
bigger but it's again the same idea so

771
00:32:33,760 --> 00:32:35,200
you are going to look at what

772
00:32:35,200 --> 00:32:37,200
differences you have at every position

773
00:32:37,200 --> 00:32:39,519
you multiply these matrices based on the

774
00:32:39,519 --> 00:32:41,120
difference that you have and that gives

775
00:32:41,120 --> 00:32:43,440
you the probability so this is the

776
00:32:43,440 --> 00:32:46,000
probability differential probability of

777
00:32:46,000 --> 00:32:48,399
the xor operation when your differences

778
00:32:48,399 --> 00:32:50,799
are additive

779
00:32:50,799 --> 00:32:52,000
here is

780
00:32:52,000 --> 00:32:54,399
the unsolved problem right the theorem

781
00:32:54,399 --> 00:32:58,559
so in this paper of litmus and duma 2004

782
00:32:58,559 --> 00:33:00,960
there is a theorem that says for all

783
00:33:00,960 --> 00:33:03,760
gamma if you want to maximize over alpha

784
00:33:03,760 --> 00:33:05,440
and beta

785
00:33:05,440 --> 00:33:07,279
then the maximum probability is going to

786
00:33:07,279 --> 00:33:09,440
be the one for which you have different

787
00:33:09,440 --> 00:33:13,440
zero gamma going to gamma

788
00:33:13,440 --> 00:33:15,840
it says in the paper the proof is

789
00:33:15,840 --> 00:33:18,480
omitted from the conference version and

790
00:33:18,480 --> 00:33:21,200
actually reaching out uh to the main

791
00:33:21,200 --> 00:33:23,440
author it turns out that the proof has

792
00:33:23,440 --> 00:33:25,360
been lost

793
00:33:25,360 --> 00:33:27,919
this this seems something that um

794
00:33:27,919 --> 00:33:29,760
shouldn't be so difficult actually the

795
00:33:29,760 --> 00:33:32,960
paper says um it's a surprisingly easy

796
00:33:32,960 --> 00:33:35,519
result but we don't know how to do it

797
00:33:35,519 --> 00:33:37,919
and it it doesn't turn out to be so

798
00:33:37,919 --> 00:33:39,760
simple at least all the attempts over

799
00:33:39,760 --> 00:33:41,440
the past

800
00:33:41,440 --> 00:33:43,919
more than 10 years to try to recreate

801
00:33:43,919 --> 00:33:45,840
this proof have failed

802
00:33:45,840 --> 00:33:47,679
i mean even if this was a full-length

803
00:33:47,679 --> 00:33:49,039
presentation to go through the whole

804
00:33:49,039 --> 00:33:50,399
proof because there are many cases and

805
00:33:50,399 --> 00:33:52,320
it gets a bit technical is something i'd

806
00:33:52,320 --> 00:33:54,080
never be able to do so i'm just going to

807
00:33:54,080 --> 00:33:55,840
give you very briefly running out of

808
00:33:55,840 --> 00:33:59,679
time anyway this um main idea of how the

809
00:33:59,679 --> 00:34:02,240
proof works i'll go through a few of the

810
00:34:02,240 --> 00:34:03,760
extra results because actually on the

811
00:34:03,760 --> 00:34:05,600
way to the result there are a few other

812
00:34:05,600 --> 00:34:07,919
things that we've seen and then conclude

813
00:34:07,919 --> 00:34:10,079
the paper

814
00:34:10,079 --> 00:34:11,679
so one thing i want to point out here is

815
00:34:11,679 --> 00:34:13,918
that well it is a proof

816
00:34:13,918 --> 00:34:15,918
you could just say let's assume that

817
00:34:15,918 --> 00:34:18,159
it's uh true because it's true on small

818
00:34:18,159 --> 00:34:19,760
word sizes

819
00:34:19,760 --> 00:34:21,599
but that's something that doesn't

820
00:34:21,599 --> 00:34:23,760
necessarily hold because sometimes

821
00:34:23,760 --> 00:34:26,320
some conjectures can have very large

822
00:34:26,320 --> 00:34:27,918
counter examples

823
00:34:27,918 --> 00:34:30,800
um you could also say well i only care

824
00:34:30,800 --> 00:34:32,879
about a specific input difference and i

825
00:34:32,879 --> 00:34:34,320
want to know the maximum output

826
00:34:34,320 --> 00:34:36,079
difference but then you can also not get

827
00:34:36,079 --> 00:34:37,280
there because we want to look at a

828
00:34:37,280 --> 00:34:40,079
result that holds generally for any uh

829
00:34:40,079 --> 00:34:42,159
value of the bit size because that's the

830
00:34:42,159 --> 00:34:44,480
idea of the proof

831
00:34:44,480 --> 00:34:46,159
so there were briefly some observations

832
00:34:46,159 --> 00:34:48,000
that are explained in the the full

833
00:34:48,000 --> 00:34:49,199
version of the

834
00:34:49,199 --> 00:34:51,679
presentation and also in the slides that

835
00:34:51,679 --> 00:34:52,960
i'm going to skip

836
00:34:52,960 --> 00:34:55,040
uh that lead up to a sketch of the proof

837
00:34:55,040 --> 00:34:57,440
and it's basically a proof that is done

838
00:34:57,440 --> 00:35:00,400
by induction so if you are going to

839
00:35:00,400 --> 00:35:03,119
assume that it holds for n equal to 1

840
00:35:03,119 --> 00:35:05,200
and then you suppose that it holds for a

841
00:35:05,200 --> 00:35:07,200
value of n the proof shows through a

842
00:35:07,200 --> 00:35:08,960
detailed analysis of cases that it also

843
00:35:08,960 --> 00:35:10,160
holds for

844
00:35:10,160 --> 00:35:12,480
n plus 1.

845
00:35:12,480 --> 00:35:14,800
so here i'm quickly going over these

846
00:35:14,800 --> 00:35:16,560
results there are some symmetries that

847
00:35:16,560 --> 00:35:18,000
you need because you might want to look

848
00:35:18,000 --> 00:35:20,960
at not just what is the maximum uh

849
00:35:20,960 --> 00:35:22,400
like like is this does this theorem hold

850
00:35:22,400 --> 00:35:23,839
but what are the specific values of

851
00:35:23,839 --> 00:35:26,480
gamma that maximizes that um you might

852
00:35:26,480 --> 00:35:29,599
look at how to compute these types of

853
00:35:29,599 --> 00:35:31,599
probabilities and there are some

854
00:35:31,599 --> 00:35:33,280
strategies here that can be interesting

855
00:35:33,280 --> 00:35:34,960
as well i definitely want to include

856
00:35:34,960 --> 00:35:36,560
this slide because one of the reviewers

857
00:35:36,560 --> 00:35:38,560
said whoa that's a really nice formula

858
00:35:38,560 --> 00:35:39,359
so

859
00:35:39,359 --> 00:35:41,200
here's a nice

860
00:35:41,200 --> 00:35:43,280
generalized fibonacci style sequence

861
00:35:43,280 --> 00:35:45,839
that that you can find that uh

862
00:35:45,839 --> 00:35:47,760
appears in analysis of these types of

863
00:35:47,760 --> 00:35:50,160
constructions i'd like to conclude here

864
00:35:50,160 --> 00:35:52,240
what we do is we provide in the paper

865
00:35:52,240 --> 00:35:54,560
the missing proof of this theorem three

866
00:35:54,560 --> 00:35:57,760
of litmus wallet and dump 2004

867
00:35:57,760 --> 00:35:59,920
also showed you which are the gammas

868
00:35:59,920 --> 00:36:02,320
very briefly that satisfy this value how

869
00:36:02,320 --> 00:36:04,000
to compute them there are more efficient

870
00:36:04,000 --> 00:36:06,720
ways of doing that and um this minimum

871
00:36:06,720 --> 00:36:08,720
non-zero probability is one thing that i

872
00:36:08,720 --> 00:36:10,240
quickly skipped over

873
00:36:10,240 --> 00:36:12,480
so let me finish my talk here after any

874
00:36:12,480 --> 00:36:15,760
questions i'd be happy to answer that

875
00:36:22,160 --> 00:36:24,079
um

876
00:36:24,079 --> 00:36:26,800
hi i have a question here from the zoom

877
00:36:26,800 --> 00:36:27,839
um

878
00:36:27,839 --> 00:36:30,560
do you hear me

879
00:36:31,440 --> 00:36:32,160
yeah

880
00:36:32,160 --> 00:36:33,920
yes yes i'm hearing you

881
00:36:33,920 --> 00:36:35,839
good so here's a question of kevin

882
00:36:35,839 --> 00:36:38,320
mcneilly from the zoom kevin asks what

883
00:36:38,320 --> 00:36:40,720
is your new unsolved problem that you

884
00:36:40,720 --> 00:36:43,040
give to people so you solved the problem

885
00:36:43,040 --> 00:36:46,320
from the 2004 paper so kevin suggests

886
00:36:46,320 --> 00:36:49,839
you that you give some new problem

887
00:36:49,839 --> 00:36:51,680
okay so i see kevin at two questions

888
00:36:51,680 --> 00:36:53,520
right the first question of kevin was i

889
00:36:53,520 --> 00:36:55,599
the comment oh i think fermat write that

890
00:36:55,599 --> 00:36:58,320
say the proof doesn't fit in the margin

891
00:36:58,320 --> 00:37:00,800
so here there was actually part of the

892
00:37:00,800 --> 00:37:03,119
proof or maybe something else in the

893
00:37:03,119 --> 00:37:05,760
source code comments of the latex file

894
00:37:05,760 --> 00:37:08,160
but not something that could lead to uh

895
00:37:08,160 --> 00:37:09,599
the uh

896
00:37:09,599 --> 00:37:11,040
like that actually something you could

897
00:37:11,040 --> 00:37:12,880
use it so instead of just saying the

898
00:37:12,880 --> 00:37:14,400
proof didn't fit in the margins now you

899
00:37:14,400 --> 00:37:15,599
could say maybe the proof is in the

900
00:37:15,599 --> 00:37:17,440
source code comments what's the new

901
00:37:17,440 --> 00:37:19,440
problem giving people i think it's it's

902
00:37:19,440 --> 00:37:21,200
important to see what people's

903
00:37:21,200 --> 00:37:22,400
background is

904
00:37:22,400 --> 00:37:24,240
this is a problem that i think engineers

905
00:37:24,240 --> 00:37:25,760
might not care too much about because

906
00:37:25,760 --> 00:37:27,599
you could just assume it's true and your

907
00:37:27,599 --> 00:37:31,119
day is is over right um but i think

908
00:37:31,119 --> 00:37:32,960
mathematicians really appreciate that

909
00:37:32,960 --> 00:37:34,240
you shouldn't be making all these

910
00:37:34,240 --> 00:37:36,160
assumptions but you want to check

911
00:37:36,160 --> 00:37:38,800
exactly what is uh um

912
00:37:38,800 --> 00:37:40,640
going on and what what is uh like like

913
00:37:40,640 --> 00:37:42,000
what you want to analyze and get a

914
00:37:42,000 --> 00:37:44,960
precise result so kevin let me know uh

915
00:37:44,960 --> 00:37:46,560
which types of problems you're looking

916
00:37:46,560 --> 00:37:49,520
for more mathematical more applied

917
00:37:49,520 --> 00:37:51,599
types of things you you like to explore

918
00:37:51,599 --> 00:37:52,640
more and

919
00:37:52,640 --> 00:37:54,240
i'll have a problem just for you and

920
00:37:54,240 --> 00:37:58,320
we'll present it at fsc 23 in beijing

921
00:37:58,320 --> 00:38:00,880
how about that

922
00:38:01,280 --> 00:38:02,079
that

923
00:38:02,079 --> 00:38:04,880
sounds good maybe

924
00:38:04,880 --> 00:38:07,040
another question

925
00:38:07,040 --> 00:38:10,640
if you want to ma to maximize your

926
00:38:10,640 --> 00:38:13,440
probability of gamma as well

927
00:38:13,440 --> 00:38:14,240
so

928
00:38:14,240 --> 00:38:15,760
is it just

929
00:38:15,760 --> 00:38:18,640
the hemingway of gamma that the least

930
00:38:18,640 --> 00:38:21,280
having weight it has the the more will

931
00:38:21,280 --> 00:38:23,119
be the probability we can say something

932
00:38:23,119 --> 00:38:25,040
more interesting

933
00:38:25,040 --> 00:38:26,480
uh no so i give a very brief answer

934
00:38:26,480 --> 00:38:28,079
because we're running a bit out of time

935
00:38:28,079 --> 00:38:30,000
we tried all of the basic techniques to

936
00:38:30,000 --> 00:38:31,599
solve this and they all fail and the

937
00:38:31,599 --> 00:38:33,359
proof is actually quite a bit technical

938
00:38:33,359 --> 00:38:34,480
so

939
00:38:34,480 --> 00:38:36,000
all of the attempts to try to see if

940
00:38:36,000 --> 00:38:37,520
there's maybe an easy way of explaining

941
00:38:37,520 --> 00:38:39,440
this seem to have failed

942
00:38:39,440 --> 00:38:41,200
there is perhaps an easier way of doing

943
00:38:41,200 --> 00:38:42,800
it because the paper says it should be

944
00:38:42,800 --> 00:38:45,040
surprisingly simple but

945
00:38:45,040 --> 00:38:46,800
what we just write in the paper is the

946
00:38:46,800 --> 00:38:48,320
easiest that we came up with is maybe

947
00:38:48,320 --> 00:38:51,280
still a bit involved

948
00:38:51,359 --> 00:38:54,160
okay good thanks

949
00:38:57,040 --> 00:39:00,540
okay so let's uh thank nikki again

950
00:39:00,540 --> 00:39:03,610
[Applause]

951
00:39:24,560 --> 00:39:27,560
hey

952
00:39:30,640 --> 00:39:32,160
okay so uh

953
00:39:32,160 --> 00:39:34,800
the next the talk is about uh proving

954
00:39:34,800 --> 00:39:37,760
resistance against uh infinitely long

955
00:39:37,760 --> 00:39:39,359
subspace trails

956
00:39:39,359 --> 00:39:41,599
how to choose a linear layer and it's a

957
00:39:41,599 --> 00:39:43,760
work by lorenzo gracie christian

958
00:39:43,760 --> 00:39:46,880
rashberger and marcus schaffneger and

959
00:39:46,880 --> 00:39:50,640
marcus will give the talk

960
00:39:55,119 --> 00:39:57,520
yeah so thanks for introduction uh this

961
00:39:57,520 --> 00:40:00,320
will be about partial spn ciphers or

962
00:40:00,320 --> 00:40:03,440
permutations and the linear layers

963
00:40:03,440 --> 00:40:05,200
so let's start what's the motivation

964
00:40:05,200 --> 00:40:07,839
behind this why recently we've seen some

965
00:40:07,839 --> 00:40:10,240
partial spm or partial spn like schemes

966
00:40:10,240 --> 00:40:11,040
and

967
00:40:11,040 --> 00:40:12,640
they are mainly tailored towards various

968
00:40:12,640 --> 00:40:14,319
use cases so for example we've heard

969
00:40:14,319 --> 00:40:15,280
about them

970
00:40:15,280 --> 00:40:17,520
zero knowledge use cases also multiparty

971
00:40:17,520 --> 00:40:19,520
computation where we try to have some

972
00:40:19,520 --> 00:40:21,760
optimal number of multiplications for

973
00:40:21,760 --> 00:40:23,760
example

974
00:40:23,760 --> 00:40:25,839
some of them are for example so hey this

975
00:40:25,839 --> 00:40:28,000
mimsy or poseidon and similar version

976
00:40:28,000 --> 00:40:29,280
start cut

977
00:40:29,280 --> 00:40:31,119
but there was a problem with those and

978
00:40:31,119 --> 00:40:33,839
namely some of the proposed instances

979
00:40:33,839 --> 00:40:36,240
had some weak linear layers which

980
00:40:36,240 --> 00:40:38,400
actually allowed to attack a large

981
00:40:38,400 --> 00:40:39,839
number of rounds

982
00:40:39,839 --> 00:40:42,400
and this was shown in crypto vapor two

983
00:40:42,400 --> 00:40:44,480
years ago and also in the eurocrip paper

984
00:40:44,480 --> 00:40:46,400
uh from last year

985
00:40:46,400 --> 00:40:49,040
however in these papers the

986
00:40:49,040 --> 00:40:50,960
so these these these results were only

987
00:40:50,960 --> 00:40:53,359
for certain particular matrices which

988
00:40:53,359 --> 00:40:55,440
were used in these two constructions

989
00:40:55,440 --> 00:40:57,760
or in these three constructions above so

990
00:40:57,760 --> 00:40:59,839
the question we tried to answer in this

991
00:40:59,839 --> 00:41:02,160
paper was how do we guarantee security

992
00:41:02,160 --> 00:41:04,480
in general and we did this by analyzing

993
00:41:04,480 --> 00:41:06,560
the linear layers of these constructions

994
00:41:06,560 --> 00:41:09,440
with respect to subspace trace

995
00:41:09,440 --> 00:41:11,119
so what is the subspace trail i will not

996
00:41:11,119 --> 00:41:12,800
go over this definition in detail but

997
00:41:12,800 --> 00:41:16,160
let us just assume that we have

998
00:41:16,880 --> 00:41:20,000
a set of subspaces here used and if they

999
00:41:20,000 --> 00:41:22,480
fulfill this relation for a particular

1000
00:41:22,480 --> 00:41:24,720
round function r then we say that this

1001
00:41:24,720 --> 00:41:25,839
set here

1002
00:41:25,839 --> 00:41:28,319
is an around subspace tray for this

1003
00:41:28,319 --> 00:41:30,960
round function r and if all the u's here

1004
00:41:30,960 --> 00:41:33,359
are the same these subspaces then we say

1005
00:41:33,359 --> 00:41:34,960
that trade is invariant and what we

1006
00:41:34,960 --> 00:41:36,720
focus on in this paper are trace which

1007
00:41:36,720 --> 00:41:38,880
are infinitely long

1008
00:41:38,880 --> 00:41:40,400
so there's also a notion of iterative

1009
00:41:40,400 --> 00:41:42,240
subspecies we'll not go into that now

1010
00:41:42,240 --> 00:41:45,359
you can see in the full presentation

1011
00:41:45,359 --> 00:41:47,280
why do we care about the subspace trails

1012
00:41:47,280 --> 00:41:49,200
where they're very closely related to

1013
00:41:49,200 --> 00:41:50,960
truncated differentials with probability

1014
00:41:50,960 --> 00:41:51,760
one

1015
00:41:51,760 --> 00:41:53,920
and if we so we have here a partial spn

1016
00:41:53,920 --> 00:41:55,520
scheme we have here a partial month in a

1017
00:41:55,520 --> 00:41:57,520
layer and for example we're using the

1018
00:41:57,520 --> 00:42:00,079
analysis we can ensure that any linear

1019
00:42:00,079 --> 00:42:01,520
layer so this is the fine layer which

1020
00:42:01,520 --> 00:42:04,240
has some linear so some matrix in there

1021
00:42:04,240 --> 00:42:06,560
we can ensure that essentially we avoid

1022
00:42:06,560 --> 00:42:07,920
the situation where we have a zero

1023
00:42:07,920 --> 00:42:10,480
difference at every input of the s box

1024
00:42:10,480 --> 00:42:12,880
for an infinite number of rounds so our

1025
00:42:12,880 --> 00:42:15,839
paper tried to or solves this problem so

1026
00:42:15,839 --> 00:42:17,520
we can now choose some linear layer

1027
00:42:17,520 --> 00:42:20,079
which prevents this property and this

1028
00:42:20,079 --> 00:42:21,599
also works for

1029
00:42:21,599 --> 00:42:23,680
more s boxes

1030
00:42:23,680 --> 00:42:25,760
all right so we had two cases we

1031
00:42:25,760 --> 00:42:27,680
considered both inactive and also active

1032
00:42:27,680 --> 00:42:28,960
s boxes so let me start with the

1033
00:42:28,960 --> 00:42:30,800
inactive s-box case

1034
00:42:30,800 --> 00:42:33,040
um here we see a classical round

1035
00:42:33,040 --> 00:42:35,200
function of some partial spn so the

1036
00:42:35,200 --> 00:42:37,440
s-box is applied to the first word and

1037
00:42:37,440 --> 00:42:39,119
then we have some matrix multiplication

1038
00:42:39,119 --> 00:42:40,720
and then we have some round constant

1039
00:42:40,720 --> 00:42:42,480
around key addition

1040
00:42:42,480 --> 00:42:44,480
and we work over prime field here

1041
00:42:44,480 --> 00:42:47,200
and for example if we choose some input

1042
00:42:47,200 --> 00:42:48,880
subspace which is generated by an

1043
00:42:48,880 --> 00:42:51,119
eigenvector of this matrix here

1044
00:42:51,119 --> 00:42:53,040
uh then and you can also see that there

1045
00:42:53,040 --> 00:42:54,560
is a zero here so the s box is not

1046
00:42:54,560 --> 00:42:56,880
activated in the first word we can so

1047
00:42:56,880 --> 00:42:58,240
essentially if we have some element of

1048
00:42:58,240 --> 00:42:59,680
this subspace and we apply this round

1049
00:42:59,680 --> 00:43:01,680
function then the result will also be an

1050
00:43:01,680 --> 00:43:03,280
element of the subspace and we can do

1051
00:43:03,280 --> 00:43:06,079
this an infinite number of times and it

1052
00:43:06,079 --> 00:43:08,000
will always be result so an element of

1053
00:43:08,000 --> 00:43:10,079
the subspace

1054
00:43:10,079 --> 00:43:12,480
so more generally if we have some

1055
00:43:12,480 --> 00:43:15,119
input subspace which does not activate

1056
00:43:15,119 --> 00:43:17,520
any s boxes which has these zeros at

1057
00:43:17,520 --> 00:43:20,319
this s box positions and which is m

1058
00:43:20,319 --> 00:43:22,720
invariant so which doesn't change by the

1059
00:43:22,720 --> 00:43:23,920
linear layer or by the matrix

1060
00:43:23,920 --> 00:43:26,880
multiplication um then this

1061
00:43:26,880 --> 00:43:29,280
is generates an infinite long environ

1062
00:43:29,280 --> 00:43:31,040
subspace tray and the thing for

1063
00:43:31,040 --> 00:43:33,200
iterative trace is similar we just use

1064
00:43:33,200 --> 00:43:35,760
an exponent here for the matrix and yeah

1065
00:43:35,760 --> 00:43:37,440
now you may wonder how to actually find

1066
00:43:37,440 --> 00:43:38,240
those

1067
00:43:38,240 --> 00:43:40,560
invariant subspaces where you have to

1068
00:43:40,560 --> 00:43:44,160
see the full presentation for that

1069
00:43:44,560 --> 00:43:46,079
so the second case we consider our

1070
00:43:46,079 --> 00:43:49,839
active s boxes and here we'll only go

1071
00:43:49,839 --> 00:43:52,079
over the very intuitive approach so we

1072
00:43:52,079 --> 00:43:53,760
know that active s boxes must not change

1073
00:43:53,760 --> 00:43:55,839
the space or the sub-space so what do we

1074
00:43:55,839 --> 00:43:57,599
do where we first ensure that every

1075
00:43:57,599 --> 00:43:59,280
inactive s-box is

1076
00:43:59,280 --> 00:44:01,040
actually inactive

1077
00:44:01,040 --> 00:44:03,440
um yeah by a condition and the second

1078
00:44:03,440 --> 00:44:04,800
condition is that if an s-box is

1079
00:44:04,800 --> 00:44:06,880
actually active then the space generated

1080
00:44:06,880 --> 00:44:08,240
by the single unit vector at its

1081
00:44:08,240 --> 00:44:09,760
position has to be fully included in the

1082
00:44:09,760 --> 00:44:11,839
initial subspace so what this means

1083
00:44:11,839 --> 00:44:13,680
maybe more intuitively is that if the

1084
00:44:13,680 --> 00:44:16,960
xbox is applied so it's active and

1085
00:44:16,960 --> 00:44:18,560
so the output difference is can be

1086
00:44:18,560 --> 00:44:20,319
anything but it doesn't really change

1087
00:44:20,319 --> 00:44:22,560
the subspace because any difference is

1088
00:44:22,560 --> 00:44:25,680
included in the initial subspace then

1089
00:44:25,680 --> 00:44:27,440
yeah and if those two conditions hold

1090
00:44:27,440 --> 00:44:29,200
then the active s boxes do not change

1091
00:44:29,200 --> 00:44:32,000
the initial subspace

1092
00:44:32,000 --> 00:44:33,599
so let me also give some practical

1093
00:44:33,599 --> 00:44:37,200
results here we focus on on prime fields

1094
00:44:37,200 --> 00:44:39,440
and we tested both random inverter

1095
00:44:39,440 --> 00:44:41,599
matrices and also random mds for g

1096
00:44:41,599 --> 00:44:42,880
matrices

1097
00:44:42,880 --> 00:44:45,200
and we see for example that if we have a

1098
00:44:45,200 --> 00:44:47,599
rather small field size so here only

1099
00:44:47,599 --> 00:44:50,480
four bits for this red column here

1100
00:44:50,480 --> 00:44:52,560
then the percentage of a matrix or the

1101
00:44:52,560 --> 00:44:54,240
probability of a matrix to be vulnerable

1102
00:44:54,240 --> 00:44:56,240
is rather high but then if we increase

1103
00:44:56,240 --> 00:44:57,760
the the

1104
00:44:57,760 --> 00:45:00,800
bit size um state size sorry the field

1105
00:45:00,800 --> 00:45:04,400
size then the probability gets lower

1106
00:45:04,400 --> 00:45:06,560
and of course so this includes all the

1107
00:45:06,560 --> 00:45:08,960
traits we analyze in the paper and to up

1108
00:45:08,960 --> 00:45:11,359
to some fixed period for the iterative

1109
00:45:11,359 --> 00:45:13,759
trace

1110
00:45:14,319 --> 00:45:16,079
um so let me conclude with a sufficient

1111
00:45:16,079 --> 00:45:18,560
condition and also with a short summary

1112
00:45:18,560 --> 00:45:20,400
so all the subspace trays we discussed

1113
00:45:20,400 --> 00:45:22,720
in the papers needs these m invariant

1114
00:45:22,720 --> 00:45:24,640
subspaces so as a designer we can

1115
00:45:24,640 --> 00:45:27,440
guarantee that no such subspaces exist

1116
00:45:27,440 --> 00:45:29,040
and this is possible with the following

1117
00:45:29,040 --> 00:45:31,200
theorem which basically

1118
00:45:31,200 --> 00:45:33,119
so which is based on minimal polynomials

1119
00:45:33,119 --> 00:45:35,839
of the linear layer up to some period

1120
00:45:35,839 --> 00:45:38,800
again which is chosen uh before

1121
00:45:38,800 --> 00:45:41,119
and yeah so this is only a sufficient

1122
00:45:41,119 --> 00:45:42,960
condition which means that there are

1123
00:45:42,960 --> 00:45:44,319
some secret matrices which do not

1124
00:45:44,319 --> 00:45:46,640
fulfill it and yeah it's but it's a very

1125
00:45:46,640 --> 00:45:48,319
easy check compared to the algorithms we

1126
00:45:48,319 --> 00:45:51,200
have and the other proof is also in in

1127
00:45:51,200 --> 00:45:53,598
the paper

1128
00:45:53,680 --> 00:45:55,280
so as a summary we determined some

1129
00:45:55,280 --> 00:45:57,359
conditions for the security of linear

1130
00:45:57,359 --> 00:45:59,200
layers in partial spn

1131
00:45:59,200 --> 00:46:00,400
constructions

1132
00:46:00,400 --> 00:46:02,319
we consider both prime fields and also

1133
00:46:02,319 --> 00:46:04,960
binary fields and both inactive s boxes

1134
00:46:04,960 --> 00:46:07,280
and also active s boxes more details on

1135
00:46:07,280 --> 00:46:08,960
the full paper this includes the proofs

1136
00:46:08,960 --> 00:46:11,200
the algorithms and also some tools so

1137
00:46:11,200 --> 00:46:12,960
for example you can put in a linear

1138
00:46:12,960 --> 00:46:13,920
layer and it tells you if it's

1139
00:46:13,920 --> 00:46:15,599
vulnerable or not and if it's vulnerable

1140
00:46:15,599 --> 00:46:17,440
it even tells you the initial subspace

1141
00:46:17,440 --> 00:46:19,839
which makes it vulnerable

1142
00:46:19,839 --> 00:46:20,880
and let me also mention that

1143
00:46:20,880 --> 00:46:22,480
differential attacks are not the only

1144
00:46:22,480 --> 00:46:24,640
concern so for example if we have such a

1145
00:46:24,640 --> 00:46:26,480
subspace we can exploit an algebraic

1146
00:46:26,480 --> 00:46:29,280
attacks the fact that the degree grows

1147
00:46:29,280 --> 00:46:31,520
much slower since or basically starts

1148
00:46:31,520 --> 00:46:33,920
growing after a certain number of rounds

1149
00:46:33,920 --> 00:46:36,000
because in the first rounds we

1150
00:46:36,000 --> 00:46:38,480
so we don't have a degree growth here

1151
00:46:38,480 --> 00:46:40,720
on all around essentially

1152
00:46:40,720 --> 00:46:43,680
yeah and so the results let us fix some

1153
00:46:43,680 --> 00:46:44,720
potential

1154
00:46:44,720 --> 00:46:47,920
issues with both haters meme c and also

1155
00:46:47,920 --> 00:46:51,119
poseidon and star cut

1156
00:46:52,160 --> 00:46:55,640
thank you for your attention

1157
00:46:58,160 --> 00:47:00,000
okay thanks

1158
00:47:00,000 --> 00:47:02,880
for the nice talk is there any questions

1159
00:47:02,880 --> 00:47:05,599
for marcus

1160
00:47:09,280 --> 00:47:11,680
maybe i can have one question

1161
00:47:11,680 --> 00:47:12,960
um

1162
00:47:12,960 --> 00:47:15,440
so so marcus say

1163
00:47:15,440 --> 00:47:17,599
you you spoke about

1164
00:47:17,599 --> 00:47:19,599
two cases first where there are no

1165
00:47:19,599 --> 00:47:21,599
activist success and the second when

1166
00:47:21,599 --> 00:47:24,079
there are active success do we have any

1167
00:47:24,079 --> 00:47:26,960
interesting example say in an existing

1168
00:47:26,960 --> 00:47:30,000
cipher where the second

1169
00:47:30,000 --> 00:47:31,440
case

1170
00:47:31,440 --> 00:47:34,400
occurs so you have an active s box and

1171
00:47:34,400 --> 00:47:37,599
nevertheless you have some meaningful

1172
00:47:37,599 --> 00:47:40,400
characteristic of this form

1173
00:47:40,400 --> 00:47:42,480
so thank you for your question uh so we

1174
00:47:42,480 --> 00:47:45,119
did not analyze any cyphers beyond those

1175
00:47:45,119 --> 00:47:47,680
uh mentioned also because there are very

1176
00:47:47,680 --> 00:47:49,599
few who actually which actually fulfill

1177
00:47:49,599 --> 00:47:51,359
these conditions and work over larger

1178
00:47:51,359 --> 00:47:53,599
fields and so on

1179
00:47:53,599 --> 00:47:55,440
but we have some concrete examples also

1180
00:47:55,440 --> 00:47:57,119
in the paper where so for example for

1181
00:47:57,119 --> 00:47:58,559
constructions

1182
00:47:58,559 --> 00:48:00,240
or for linear layers which are

1183
00:48:00,240 --> 00:48:02,480
vulnerable only to active s-boxes or

1184
00:48:02,480 --> 00:48:04,559
when there are active s-boxes but not

1185
00:48:04,559 --> 00:48:06,400
when they're inactive s-boxes so that's

1186
00:48:06,400 --> 00:48:10,720
certainly possible and yeah

1187
00:48:10,880 --> 00:48:14,000
okay good thanks

1188
00:48:16,720 --> 00:48:20,960
okay any one more quick questions

1189
00:48:20,960 --> 00:48:22,079
so

1190
00:48:22,079 --> 00:48:26,000
so if no let's thank marcus again

1191
00:48:32,000 --> 00:48:34,880
so it's a time for the last

1192
00:48:34,880 --> 00:48:38,440
talk of this session

1193
00:49:05,680 --> 00:49:08,319
okay so the last talk of the session is

1194
00:49:08,319 --> 00:49:10,559
about cryptanalysis of the so dark

1195
00:49:10,559 --> 00:49:13,599
cipher for hf radio automatic link

1196
00:49:13,599 --> 00:49:15,200
establishment and

1197
00:49:15,200 --> 00:49:18,079
the talk it's a work by marcus

1198
00:49:18,079 --> 00:49:22,480
donsare and marcus will give the talk

1199
00:49:24,160 --> 00:49:26,640
hello everyone

1200
00:49:26,640 --> 00:49:28,879
so

1201
00:49:29,200 --> 00:49:31,359
my talk here describes decrypt analysis

1202
00:49:31,359 --> 00:49:33,839
of a cipher called cell dark

1203
00:49:33,839 --> 00:49:35,839
and it's specified in two american

1204
00:49:35,839 --> 00:49:37,440
standards one federal standard and one

1205
00:49:37,440 --> 00:49:38,800
military standard

1206
00:49:38,800 --> 00:49:41,040
as well as in a native standardization

1207
00:49:41,040 --> 00:49:42,240
agreement

1208
00:49:42,240 --> 00:49:44,800
and it's used to encrypt so-called

1209
00:49:44,800 --> 00:49:46,720
linking messages between high-frequency

1210
00:49:46,720 --> 00:49:49,440
radios in automatic link establishment

1211
00:49:49,440 --> 00:49:50,720
networks

1212
00:49:50,720 --> 00:49:52,480
and despite the fact that this cipher

1213
00:49:52,480 --> 00:49:54,400
has been in active use for almost three

1214
00:49:54,400 --> 00:49:56,720
decades now there appears to be no

1215
00:49:56,720 --> 00:49:58,319
previous script analysis of it and

1216
00:49:58,319 --> 00:50:00,160
that's the primary motivation for this

1217
00:50:00,160 --> 00:50:02,240
work

1218
00:50:02,240 --> 00:50:04,480
so in short the so-dark cipher algorithm

1219
00:50:04,480 --> 00:50:05,599
is

1220
00:50:05,599 --> 00:50:09,359
meant to encrypt 24-bit words in ale so

1221
00:50:09,359 --> 00:50:11,599
it's there for a 24-bit block cipher

1222
00:50:11,599 --> 00:50:14,559
that uses a 56-bit key and a 64-bit

1223
00:50:14,559 --> 00:50:16,240
tweak

1224
00:50:16,240 --> 00:50:18,800
in second generation ale which is the

1225
00:50:18,800 --> 00:50:21,119
version most commonly used still today

1226
00:50:21,119 --> 00:50:25,000
the cypher has eight rounds

1227
00:50:26,000 --> 00:50:28,480
and the round function is uh illustrated

1228
00:50:28,480 --> 00:50:30,079
by this slide here

1229
00:50:30,079 --> 00:50:32,960
uh the lower cases uh the lowercase a b

1230
00:50:32,960 --> 00:50:36,319
and c are the uh round key bytes and

1231
00:50:36,319 --> 00:50:39,119
each round key byte is formed from one

1232
00:50:39,119 --> 00:50:42,000
key byte and one tweak byte and the key

1233
00:50:42,000 --> 00:50:43,839
and tweak bytes are simply used in

1234
00:50:43,839 --> 00:50:45,839
succession so in the first

1235
00:50:45,839 --> 00:50:47,280
round

1236
00:50:47,280 --> 00:50:48,880
bytes one two and three are used and in

1237
00:50:48,880 --> 00:50:52,559
a second four five and six and so on

1238
00:50:52,559 --> 00:50:55,119
this means that in every round only 24

1239
00:50:55,119 --> 00:50:58,079
bits of key and 24 bits of tweak

1240
00:50:58,079 --> 00:51:00,079
are used

1241
00:51:00,079 --> 00:51:01,200
and

1242
00:51:01,200 --> 00:51:03,119
the the output the three output bytes of

1243
00:51:03,119 --> 00:51:04,160
each round

1244
00:51:04,160 --> 00:51:06,800
are then dependent on two or three bytes

1245
00:51:06,800 --> 00:51:08,319
of the previous round as well as only

1246
00:51:08,319 --> 00:51:10,079
one

1247
00:51:10,079 --> 00:51:11,599
run key bytes

1248
00:51:11,599 --> 00:51:12,800
and

1249
00:51:12,800 --> 00:51:15,599
yeah that's probably the

1250
00:51:15,599 --> 00:51:17,359
the critical weakness of the cipher that

1251
00:51:17,359 --> 00:51:19,520
it's

1252
00:51:21,520 --> 00:51:22,400
so

1253
00:51:22,400 --> 00:51:24,640
um

1254
00:51:24,640 --> 00:51:27,280
the attacks presented in the paper all

1255
00:51:27,280 --> 00:51:29,760
sort of start out on with a with an

1256
00:51:29,760 --> 00:51:31,599
attack on a round reduced version of

1257
00:51:31,599 --> 00:51:34,000
cypher with six rounds

1258
00:51:34,000 --> 00:51:37,040
and we consider cases where we have

1259
00:51:37,040 --> 00:51:40,000
uh plain text ciphertext tweak tuples

1260
00:51:40,000 --> 00:51:42,160
where the differences between the tweaks

1261
00:51:42,160 --> 00:51:44,480
uh in in pairs

1262
00:51:44,480 --> 00:51:47,599
are only in the fifth tweak bytes so the

1263
00:51:47,599 --> 00:51:50,640
other seven tweak bytes are identical

1264
00:51:50,640 --> 00:51:52,720
and this actually turns out to be

1265
00:51:52,720 --> 00:51:54,720
a very very common case in the real

1266
00:51:54,720 --> 00:51:56,800
world application of this cipher

1267
00:51:56,800 --> 00:51:58,640
practically every transmission will have

1268
00:51:58,640 --> 00:52:01,200
these tweak differences

1269
00:52:01,200 --> 00:52:02,960
and then

1270
00:52:02,960 --> 00:52:05,200
if we discover um

1271
00:52:05,200 --> 00:52:06,880
a pair of these tuples where the cipher

1272
00:52:06,880 --> 00:52:10,319
texts are identical we can using only

1273
00:52:10,319 --> 00:52:12,960
the round function definition

1274
00:52:12,960 --> 00:52:15,200
actually calculate part of the

1275
00:52:15,200 --> 00:52:16,720
difference after the third round of the

1276
00:52:16,720 --> 00:52:17,680
cipher

1277
00:52:17,680 --> 00:52:19,440
and knowing this

1278
00:52:19,440 --> 00:52:21,520
difference after the third round we can

1279
00:52:21,520 --> 00:52:22,720
then

1280
00:52:22,720 --> 00:52:24,880
check for it given the plain texts

1281
00:52:24,880 --> 00:52:26,720
by iterating over only six of the seven

1282
00:52:26,720 --> 00:52:29,279
key bytes

1283
00:52:29,680 --> 00:52:31,359
this can be trivially extended to seven

1284
00:52:31,359 --> 00:52:32,400
rounds

1285
00:52:32,400 --> 00:52:33,280
by

1286
00:52:33,280 --> 00:52:36,480
selecting ciphertext pairs with

1287
00:52:36,480 --> 00:52:38,880
a different difference than

1288
00:52:38,880 --> 00:52:42,000
the collision in the six round version

1289
00:52:42,000 --> 00:52:43,599
this is no longer possible in the eight

1290
00:52:43,599 --> 00:52:45,760
round version however

1291
00:52:45,760 --> 00:52:48,319
we can identify

1292
00:52:48,319 --> 00:52:50,319
uh pairs that have a

1293
00:52:50,319 --> 00:52:53,040
probability of having this collision and

1294
00:52:53,040 --> 00:52:54,800
more importantly we can reject pairs

1295
00:52:54,800 --> 00:52:56,480
that have a zero probability of having

1296
00:52:56,480 --> 00:52:58,000
this collision

1297
00:52:58,000 --> 00:53:00,079
and in doing this filtering we also gain

1298
00:53:00,079 --> 00:53:02,240
information about one of the key bites

1299
00:53:02,240 --> 00:53:04,400
which turns out to actually reduce the

1300
00:53:04,400 --> 00:53:06,720
time complexity compared to

1301
00:53:06,720 --> 00:53:08,559
the attacks on

1302
00:53:08,559 --> 00:53:11,440
six and seven rounds

1303
00:53:12,640 --> 00:53:13,359
the

1304
00:53:13,359 --> 00:53:15,359
eight round attack can also be adapted

1305
00:53:15,359 --> 00:53:17,680
into a chosen cypher text attack where

1306
00:53:17,680 --> 00:53:21,359
we by generating 256

1307
00:53:21,359 --> 00:53:25,200
plaintext ciphertext tweak pairs

1308
00:53:25,200 --> 00:53:26,800
can guarantee that one of those

1309
00:53:26,800 --> 00:53:29,359
generated pairs will cause the required

1310
00:53:29,359 --> 00:53:30,960
collision for

1311
00:53:30,960 --> 00:53:34,079
the attacks described here

1312
00:53:35,920 --> 00:53:37,680
and this

1313
00:53:37,680 --> 00:53:40,079
then in turns enables chosen ciphertext

1314
00:53:40,079 --> 00:53:44,480
attack with very low data complexity

1315
00:53:44,559 --> 00:53:45,760
here's a summary of the attacks

1316
00:53:45,760 --> 00:53:47,200
presented in the paper

1317
00:53:47,200 --> 00:53:50,000
and as you can see all the attacks have

1318
00:53:50,000 --> 00:53:52,400
low data and time complexities which

1319
00:53:52,400 --> 00:53:54,079
means that they are possible to

1320
00:53:54,079 --> 00:53:56,800
implement on a personal computer

1321
00:53:56,800 --> 00:53:58,000
and

1322
00:53:58,000 --> 00:54:00,160
this has been verified experimentally

1323
00:54:00,160 --> 00:54:01,760
and i have

1324
00:54:01,760 --> 00:54:03,839
implemented both the attacks

1325
00:54:03,839 --> 00:54:06,400
as well as brute force implementation in

1326
00:54:06,400 --> 00:54:08,079
c and in cuda

1327
00:54:08,079 --> 00:54:10,880
and they have been used to um

1328
00:54:10,880 --> 00:54:13,119
well to verify that this works and

1329
00:54:13,119 --> 00:54:15,119
we've found that it's about 170 times

1330
00:54:15,119 --> 00:54:18,559
faster than brute force

1331
00:54:18,559 --> 00:54:19,920
yeah and that concludes my talk thank

1332
00:54:19,920 --> 00:54:22,920
you

1333
00:54:28,319 --> 00:54:32,759
is there any question for marcus

1334
00:54:39,030 --> 00:54:49,200
[Music]

1335
00:54:49,200 --> 00:54:52,200
um

1336
00:54:52,660 --> 00:54:56,509
[Music]

1337
00:55:02,000 --> 00:55:04,160
yeah i'll start by repeating the

1338
00:55:04,160 --> 00:55:05,760
question so the question is

1339
00:55:05,760 --> 00:55:08,640
the cypher only has a 56-bit key so why

1340
00:55:08,640 --> 00:55:10,880
is it still used and why hasn't someone

1341
00:55:10,880 --> 00:55:12,720
decided to change it

1342
00:55:12,720 --> 00:55:13,680
and

1343
00:55:13,680 --> 00:55:15,280
i could probably talk about this for an

1344
00:55:15,280 --> 00:55:17,200
hour

1345
00:55:17,200 --> 00:55:21,480
the short answer is

1346
00:55:21,760 --> 00:55:23,680
in i think one of the standards one of

1347
00:55:23,680 --> 00:55:25,040
the later versions

1348
00:55:25,040 --> 00:55:27,040
uh there's a mention that there's been

1349
00:55:27,040 --> 00:55:28,960
quote concerns about the security of the

1350
00:55:28,960 --> 00:55:30,240
cipher

1351
00:55:30,240 --> 00:55:32,559
and in the latest version of the

1352
00:55:32,559 --> 00:55:34,720
standard there's a proposed

1353
00:55:34,720 --> 00:55:36,960
replacement for this but as far as i

1354
00:55:36,960 --> 00:55:38,720
know the replacement isn't in use

1355
00:55:38,720 --> 00:55:41,118
anywhere

1356
00:55:45,359 --> 00:55:47,200
okay maybe

1357
00:55:47,200 --> 00:55:50,558
any questions from

1358
00:55:51,760 --> 00:55:54,319
is there more

1359
00:55:57,200 --> 00:55:58,799
the question is are there more cyphers

1360
00:55:58,799 --> 00:56:00,079
like this

1361
00:56:00,079 --> 00:56:01,040
and

1362
00:56:01,040 --> 00:56:03,760
yeah probably

1363
00:56:03,760 --> 00:56:06,799
we just need to figure out how to find

1364
00:56:06,799 --> 00:56:09,040
them

1365
00:56:15,359 --> 00:56:17,440
so we we also have them for one quick

1366
00:56:17,440 --> 00:56:20,480
questions uh maybe from uh people that

1367
00:56:20,480 --> 00:56:22,799
are online because

1368
00:56:22,799 --> 00:56:25,119
we also have many time uh

1369
00:56:25,119 --> 00:56:29,599
us with marcus i think this afternoon

1370
00:56:29,599 --> 00:56:31,440
no

1371
00:56:31,440 --> 00:56:35,280
no questions here in the online

1372
00:56:35,280 --> 00:56:36,799
okay so uh

1373
00:56:36,799 --> 00:56:40,000
so i think we can uh

1374
00:56:40,000 --> 00:56:44,240
finish the session of

1375
00:56:44,240 --> 00:56:47,200
this morning we are exactly on time

1376
00:56:47,200 --> 00:56:49,200
and uh

1377
00:56:49,200 --> 00:56:52,000
that's time for lunch and this afternoon

1378
00:56:52,000 --> 00:56:55,200
there is two workshops so that means uh

1379
00:56:55,200 --> 00:56:57,119
four presentations

1380
00:56:57,119 --> 00:56:59,839
uh all on

