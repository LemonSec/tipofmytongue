1
00:00:01,839 --> 00:00:04,560
hello i am abhijit tatta from iii tcg

2
00:00:04,560 --> 00:00:06,399
crest and today i am going to present

3
00:00:06,399 --> 00:00:08,800
our paper permutation based edm and

4
00:00:08,800 --> 00:00:10,400
inverse free beyond birth demand secure

5
00:00:10,400 --> 00:00:12,559
pra it's a giant book which is middle

6
00:00:12,559 --> 00:00:15,200
nandi and superstar tag maker

7
00:00:15,200 --> 00:00:17,520
in 1988 louis and rakoff in their

8
00:00:17,520 --> 00:00:19,520
seminal paper showed how to construct a

9
00:00:19,520 --> 00:00:21,520
pseudonym permutation from pseudo-random

10
00:00:21,520 --> 00:00:22,720
functions

11
00:00:22,720 --> 00:00:24,960
since then many practical block ciphers

12
00:00:24,960 --> 00:00:27,359
for example camellia ghost etcetera have

13
00:00:27,359 --> 00:00:28,960
been designed under the lubitaka

14
00:00:28,960 --> 00:00:31,679
framework however block ciphers are

15
00:00:31,679 --> 00:00:34,239
designed to work on fixed length strings

16
00:00:34,239 --> 00:00:36,160
therefore to process variables and

17
00:00:36,160 --> 00:00:38,480
strings we generally use different modes

18
00:00:38,480 --> 00:00:40,960
of operations which are built on top of

19
00:00:40,960 --> 00:00:42,480
block ciphers

20
00:00:42,480 --> 00:00:44,480
from the security perspective we seek

21
00:00:44,480 --> 00:00:46,399
for the prf security from this modes of

22
00:00:46,399 --> 00:00:47,920
operations

23
00:00:47,920 --> 00:00:50,320
therefore at one extreme we have a mode

24
00:00:50,320 --> 00:00:52,320
of operation which are based on block

25
00:00:52,320 --> 00:00:54,879
ciphers and at the other end we require

26
00:00:54,879 --> 00:00:56,719
its plf security

27
00:00:56,719 --> 00:00:59,120
to bridge this gap one can think of to

28
00:00:59,120 --> 00:01:01,600
build mode of operations out of prfs

29
00:01:01,600 --> 00:01:03,680
instead of block ciphers

30
00:01:03,680 --> 00:01:06,479
but prf is really available in practice

31
00:01:06,479 --> 00:01:09,040
compared to the block ciphers because

32
00:01:09,040 --> 00:01:11,360
building non-invertible ground functions

33
00:01:11,360 --> 00:01:13,360
which are iterated over multiple rounds

34
00:01:13,360 --> 00:01:16,080
to construct prf is basically harder to

35
00:01:16,080 --> 00:01:18,159
design than designing invertible round

36
00:01:18,159 --> 00:01:19,280
function

37
00:01:19,280 --> 00:01:21,680
moreover most of the modes of operations

38
00:01:21,680 --> 00:01:23,119
although they are built on top of block

39
00:01:23,119 --> 00:01:24,960
ciphers but they never evaluate the

40
00:01:24,960 --> 00:01:27,520
block cipher in the inverse direction

41
00:01:27,520 --> 00:01:29,600
therefore summarizing above we can

42
00:01:29,600 --> 00:01:32,159
conclude that pseudo random function as

43
00:01:32,159 --> 00:01:34,159
a primitive is a better choice over

44
00:01:34,159 --> 00:01:36,320
pseudorandom permutation

45
00:01:36,320 --> 00:01:38,799
in fact if we instantiate the counter

46
00:01:38,799 --> 00:01:41,360
mode of encryption with a prf instead of

47
00:01:41,360 --> 00:01:44,079
a prp then it will give the optimal

48
00:01:44,079 --> 00:01:45,759
security

49
00:01:45,759 --> 00:01:48,399
nevertheless due to the pr prf switching

50
00:01:48,399 --> 00:01:50,640
lemma one can argue that the block

51
00:01:50,640 --> 00:01:53,119
cipher itself is a good prf and hence

52
00:01:53,119 --> 00:01:55,439
one can consider block cipher as a prf

53
00:01:55,439 --> 00:01:57,840
in block cipher based modes of operation

54
00:01:57,840 --> 00:01:59,759
but this solution comes at the cost of

55
00:01:59,759 --> 00:02:01,680
birth the bound security which may not

56
00:02:01,680 --> 00:02:03,280
be adequate but the block size of the

57
00:02:03,280 --> 00:02:05,280
underlying block cipher is small for

58
00:02:05,280 --> 00:02:08,560
example of 64-bit block cipher

59
00:02:08,560 --> 00:02:11,200
therefore we see that we have plenty of

60
00:02:11,200 --> 00:02:13,840
practical block ciphers but we require

61
00:02:13,840 --> 00:02:16,160
practical candidates of prf that can be

62
00:02:16,160 --> 00:02:19,120
used as primitives in modes of operation

63
00:02:19,120 --> 00:02:21,599
we have seen that using block cycles as

64
00:02:21,599 --> 00:02:24,239
primitive is not always a good solution

65
00:02:24,239 --> 00:02:26,800
therefore we require to construct prf

66
00:02:26,800 --> 00:02:28,400
out of block ciphers with beyond the

67
00:02:28,400 --> 00:02:30,080
bardum security

68
00:02:30,080 --> 00:02:32,160
over the years many such constructions

69
00:02:32,160 --> 00:02:35,519
have been proposed to start with

70
00:02:35,519 --> 00:02:37,040
the first construction which we call the

71
00:02:37,040 --> 00:02:38,480
summer permutation construction is a

72
00:02:38,480 --> 00:02:40,720
very popular construction which is a

73
00:02:40,720 --> 00:02:42,720
block cipher based prf

74
00:02:42,720 --> 00:02:45,440
that takes an n minus one n bit input

75
00:02:45,440 --> 00:02:47,280
and it gives an n bit output which is

76
00:02:47,280 --> 00:02:48,879
nothing but the sum of two permutations

77
00:02:48,879 --> 00:02:51,280
evaluated at the input x and it has been

78
00:02:51,280 --> 00:02:52,640
shown that this construction is

79
00:02:52,640 --> 00:02:54,720
optimally secure construction

80
00:02:54,720 --> 00:02:56,800
the other construction which we call the

81
00:02:56,800 --> 00:02:59,120
edm deconstruction it is again based on

82
00:02:59,120 --> 00:03:00,800
two independent permutation but it's a

83
00:03:00,800 --> 00:03:02,720
sequential construction and this

84
00:03:02,720 --> 00:03:05,040
construction was proposed in crypto17 by

85
00:03:05,040 --> 00:03:07,360
manic and names and they have shown that

86
00:03:07,360 --> 00:03:08,879
this construction achieves optimal

87
00:03:08,879 --> 00:03:10,239
security

88
00:03:10,239 --> 00:03:12,879
the sum of some pip construction this

89
00:03:12,879 --> 00:03:14,879
construction is again kind of a sum of

90
00:03:14,879 --> 00:03:16,640
permutation construction but instead of

91
00:03:16,640 --> 00:03:18,480
two independent permutation it is the

92
00:03:18,480 --> 00:03:20,720
sum of a permutation p and its inverse

93
00:03:20,720 --> 00:03:23,360
which is evaluated at a point x so x is

94
00:03:23,360 --> 00:03:25,920
an n bit input and the sum of the output

95
00:03:25,920 --> 00:03:28,000
is uh considered to be the uh some of

96
00:03:28,000 --> 00:03:29,440
the outputs of this permutation is

97
00:03:29,440 --> 00:03:30,879
considered to be the output of the

98
00:03:30,879 --> 00:03:33,200
construction which is why and again this

99
00:03:33,200 --> 00:03:34,480
construction has been shown to be

100
00:03:34,480 --> 00:03:36,159
secured up to power two by three many

101
00:03:36,159 --> 00:03:37,599
queries

102
00:03:37,599 --> 00:03:40,159
in crypto 16 cognition syrian has

103
00:03:40,159 --> 00:03:41,440
proposed have proposed their

104
00:03:41,440 --> 00:03:43,040
construction so which he called

105
00:03:43,040 --> 00:03:44,480
encrypted device mere construction so

106
00:03:44,480 --> 00:03:47,200
this is similar to the admt construction

107
00:03:47,200 --> 00:03:49,040
and this construction is again based on

108
00:03:49,040 --> 00:03:52,159
two independent permutations p1 and p2

109
00:03:52,159 --> 00:03:53,920
and this construction has been proven to

110
00:03:53,920 --> 00:03:56,720
be secure up to power cn by four queries

111
00:03:56,720 --> 00:03:59,120
in fact the single kid variant of the

112
00:03:59,120 --> 00:04:01,200
edm construction it achieves 10 by three

113
00:04:01,200 --> 00:04:02,959
bit security

114
00:04:02,959 --> 00:04:05,200
uh single key edm reconstruction

115
00:04:05,200 --> 00:04:07,360
achieved created by civic security the

116
00:04:07,360 --> 00:04:08,720
other construction which has recently

117
00:04:08,720 --> 00:04:11,280
been proposed by gunsing and many

118
00:04:11,280 --> 00:04:12,879
uh which we call the submission

119
00:04:12,879 --> 00:04:15,280
translation hybrid technique and in this

120
00:04:15,280 --> 00:04:17,358
construction it takes an n minus one bit

121
00:04:17,358 --> 00:04:20,639
input and it truncates the leftmost a

122
00:04:20,639 --> 00:04:22,960
bits of the output of the permutation

123
00:04:22,960 --> 00:04:25,199
which is evaluated at x concatenate 0

124
00:04:25,199 --> 00:04:28,479
and x concatenate 1 and then it sums the

125
00:04:28,479 --> 00:04:30,639
remaining discarded input outputs that

126
00:04:30,639 --> 00:04:33,360
is n minus a bit outputs of the ah

127
00:04:33,360 --> 00:04:34,880
permutation which is evaluated at x

128
00:04:34,880 --> 00:04:36,880
equal to zero and x equals to one and

129
00:04:36,880 --> 00:04:38,880
eventually it produce n plus a bit

130
00:04:38,880 --> 00:04:42,320
output and this construction is uh has

131
00:04:42,320 --> 00:04:44,320
been shown to be secured up to n minus a

132
00:04:44,320 --> 00:04:46,880
by two bit security where n minus a is

133
00:04:46,880 --> 00:04:49,120
the number of discarded bits of the

134
00:04:49,120 --> 00:04:51,360
permutation p

135
00:04:51,360 --> 00:04:53,600
okay so blocks so block cipher is

136
00:04:53,600 --> 00:04:55,280
basically considered to be a workforce

137
00:04:55,280 --> 00:04:57,120
of symmetrical cryptography and it is a

138
00:04:57,120 --> 00:04:58,720
very good primitive of different kinds

139
00:04:58,720 --> 00:05:00,320
of modes of operation

140
00:05:00,320 --> 00:05:02,080
but besides that we have another

141
00:05:02,080 --> 00:05:04,160
cryptographic object which is considered

142
00:05:04,160 --> 00:05:07,039
to be as good as block cipher ah

143
00:05:07,039 --> 00:05:08,639
as a primitive in different types of

144
00:05:08,639 --> 00:05:10,400
modes of operation which we call as a

145
00:05:10,400 --> 00:05:12,560
permutation or a public permutation so

146
00:05:12,560 --> 00:05:14,160
block ciphers as a primitive are

147
00:05:14,160 --> 00:05:15,600
designed to be efficient in both

148
00:05:15,600 --> 00:05:17,600
direction whereas public permutations

149
00:05:17,600 --> 00:05:19,440
are particularly designed to be fast in

150
00:05:19,440 --> 00:05:20,720
the forward direction but not

151
00:05:20,720 --> 00:05:22,320
necessarily in the inverse direction for

152
00:05:22,320 --> 00:05:25,680
example kj kmd sponge net etc

153
00:05:25,680 --> 00:05:27,199
one of the important distinguishing

154
00:05:27,199 --> 00:05:28,720
characteristics between the block cipher

155
00:05:28,720 --> 00:05:30,720
and the public population is that when

156
00:05:30,720 --> 00:05:32,639
we employ a block cipher in a mode of

157
00:05:32,639 --> 00:05:34,800
operation and at each time of invocation

158
00:05:34,800 --> 00:05:36,880
of the block cipher the underlying key

159
00:05:36,880 --> 00:05:38,560
scheduling algorithm of the block cipher

160
00:05:38,560 --> 00:05:40,720
needs to be evaluated whereas for a

161
00:05:40,720 --> 00:05:42,400
permutation based design we do not need

162
00:05:42,400 --> 00:05:44,479
to invoke the key scheduling algorithm

163
00:05:44,479 --> 00:05:45,759
of the permutation because permutation

164
00:05:45,759 --> 00:05:47,039
does not employ the key scheduling

165
00:05:47,039 --> 00:05:48,560
algorithm at all

166
00:05:48,560 --> 00:05:51,759
moreover all the block cipher based plls

167
00:05:51,759 --> 00:05:53,520
that we know of

168
00:05:53,520 --> 00:05:55,440
they evaluate the block cipher in only

169
00:05:55,440 --> 00:05:56,800
in the forward direction they do not

170
00:05:56,800 --> 00:05:58,400
evaluate the block cipher in the inverse

171
00:05:58,400 --> 00:05:59,600
direction

172
00:05:59,600 --> 00:06:02,240
so from this perspective we can say that

173
00:06:02,240 --> 00:06:04,479
block cipher is somehow over engineering

174
00:06:04,479 --> 00:06:06,880
primitive for those modes of operation

175
00:06:06,880 --> 00:06:08,880
that do not invoke the inverse of the

176
00:06:08,880 --> 00:06:10,080
block cipher

177
00:06:10,080 --> 00:06:12,080
and in those situations we can think

178
00:06:12,080 --> 00:06:13,680
that public permutation is a better

179
00:06:13,680 --> 00:06:16,720
choice over block cipher is a primitive

180
00:06:16,720 --> 00:06:19,039
so next the question that arises that

181
00:06:19,039 --> 00:06:22,479
can be designed permutation based prf

182
00:06:22,479 --> 00:06:23,680
so

183
00:06:23,680 --> 00:06:25,840
the use of public permutation has been

184
00:06:25,840 --> 00:06:27,600
noted in the design of sponge type of

185
00:06:27,600 --> 00:06:29,280
construction and this sponge type of

186
00:06:29,280 --> 00:06:31,440
construction has a had a different motto

187
00:06:31,440 --> 00:06:32,639
of designing

188
00:06:32,639 --> 00:06:34,240
authenticated encryption and hash

189
00:06:34,240 --> 00:06:36,160
function because the

190
00:06:36,160 --> 00:06:37,919
way the sponge function evaluates it

191
00:06:37,919 --> 00:06:40,639
takes a less amount of you know

192
00:06:40,639 --> 00:06:42,800
hardware area or less amount of size

193
00:06:42,800 --> 00:06:45,280
state size so uh

194
00:06:45,280 --> 00:06:46,319
however

195
00:06:46,319 --> 00:06:47,120
that

196
00:06:47,120 --> 00:06:48,880
one can easily tweak that sponge

197
00:06:48,880 --> 00:06:51,680
construction to to to convert it to a

198
00:06:51,680 --> 00:06:54,560
prf for example if you just employ a key

199
00:06:54,560 --> 00:06:56,240
to the sponge construction then

200
00:06:56,240 --> 00:06:57,440
different type of heat sponge

201
00:06:57,440 --> 00:07:00,000
construction uh and and this far fall

202
00:07:00,000 --> 00:07:01,759
construction these are the two prominent

203
00:07:01,759 --> 00:07:04,160
example of a permutation based prf but

204
00:07:04,160 --> 00:07:05,919
an inherent drawback of this permutation

205
00:07:05,919 --> 00:07:08,160
based plf is that they are of variable

206
00:07:08,160 --> 00:07:10,800
length and their security is only up to

207
00:07:10,800 --> 00:07:12,160
the birth the bound of the capacity of

208
00:07:12,160 --> 00:07:14,400
the underlying permutation that means

209
00:07:14,400 --> 00:07:15,199
the

210
00:07:15,199 --> 00:07:18,160
the security of the resulting prf does

211
00:07:18,160 --> 00:07:20,080
not exploit the entire state size of the

212
00:07:20,080 --> 00:07:21,759
permutation it is only up to the

213
00:07:21,759 --> 00:07:23,120
capacity part but the bound of the

214
00:07:23,120 --> 00:07:25,440
capacity part of the permutation

215
00:07:25,440 --> 00:07:27,759
well this solution may be adequate

216
00:07:27,759 --> 00:07:29,360
enough when the underlying permutation

217
00:07:29,360 --> 00:07:31,599
is of moderate size say for example if

218
00:07:31,599 --> 00:07:34,400
it's a sharper mutation which is of 1600

219
00:07:34,400 --> 00:07:36,720
bits then the solution is enough

220
00:07:36,720 --> 00:07:38,800
but it is not useful with lightweight

221
00:07:38,800 --> 00:07:40,800
permutation for example photon or sponge

222
00:07:40,800 --> 00:07:41,759
net

223
00:07:41,759 --> 00:07:43,440
therefore can be designed a

224
00:07:43,440 --> 00:07:45,280
pseudo-random function based on public

225
00:07:45,280 --> 00:07:47,440
permutation that achieves beyond the

226
00:07:47,440 --> 00:07:49,360
birth demand security

227
00:07:49,360 --> 00:07:52,080
so this line of research has started

228
00:07:52,080 --> 00:07:53,840
with the work of

229
00:07:53,840 --> 00:07:56,080
chen and manning

230
00:07:56,080 --> 00:07:58,080
at all uh with their popular

231
00:07:58,080 --> 00:08:00,000
construction which we call the sum of

232
00:08:00,000 --> 00:08:01,599
even monsoon construction and some of

233
00:08:01,599 --> 00:08:02,720
key alternating

234
00:08:02,720 --> 00:08:03,919
cypher

235
00:08:03,919 --> 00:08:05,440
so this construction these two

236
00:08:05,440 --> 00:08:07,919
constructions were proposed in crypto19

237
00:08:07,919 --> 00:08:09,759
so some of immensely construction is

238
00:08:09,759 --> 00:08:11,919
taking two independent permutations and

239
00:08:11,919 --> 00:08:14,400
two independent n-bit keys and it is

240
00:08:14,400 --> 00:08:17,599
just out taking the zord of the output

241
00:08:17,599 --> 00:08:19,360
of p one and p two

242
00:08:19,360 --> 00:08:21,759
so this construction edges are twin by

243
00:08:21,759 --> 00:08:23,680
three security pound and that pound is

244
00:08:23,680 --> 00:08:25,759
essentially tied because they have given

245
00:08:25,759 --> 00:08:28,400
a corresponding matching attack however

246
00:08:28,400 --> 00:08:30,000
if you make these two permutations

247
00:08:30,000 --> 00:08:32,719
identical or the two or these two keys

248
00:08:32,719 --> 00:08:34,799
identical then the resulting

249
00:08:34,799 --> 00:08:36,559
construction can only give you all the

250
00:08:36,559 --> 00:08:40,039
birth about security

251
00:08:40,080 --> 00:08:41,599
the other constructions proposed in the

252
00:08:41,599 --> 00:08:43,200
same paper is known as the sum of key

253
00:08:43,200 --> 00:08:45,200
alternating ciphers so some of key

254
00:08:45,200 --> 00:08:47,200
alternating ciphers is some somewhat

255
00:08:47,200 --> 00:08:49,279
sequential base construction

256
00:08:49,279 --> 00:08:52,399
so when this p1 and p2 are same or

257
00:08:52,399 --> 00:08:55,040
identical then they term it as a sokc1

258
00:08:55,040 --> 00:08:57,200
and when the underlying keys are same

259
00:08:57,200 --> 00:08:59,839
then the term it has so kc21

260
00:08:59,839 --> 00:09:03,120
it has been shown that sokc21

261
00:09:03,120 --> 00:09:05,760
is uh 2n by 3 bit secure and that

262
00:09:05,760 --> 00:09:08,240
security bound is tight and chain aton

263
00:09:08,240 --> 00:09:10,399
in the same paper have shown that there

264
00:09:10,399 --> 00:09:13,519
is a bulky bound attack on asok ac1

265
00:09:13,519 --> 00:09:14,640
however

266
00:09:14,640 --> 00:09:16,800
later in euro crypt 20 nandi has shown

267
00:09:16,800 --> 00:09:19,040
above the bound distinguishing attack on

268
00:09:19,040 --> 00:09:20,640
so kc21

269
00:09:20,640 --> 00:09:23,279
and chakrabarty at all in fsc 2020 shown

270
00:09:23,279 --> 00:09:25,920
a distinguishing attack on so kc1 with

271
00:09:25,920 --> 00:09:28,959
query complexity to power 10 by 3. and

272
00:09:28,959 --> 00:09:31,839
most importantly chakrabati at all have

273
00:09:31,839 --> 00:09:35,279
pointed out some kind of an

274
00:09:35,279 --> 00:09:37,680
dispute in the attacking algorithm of

275
00:09:37,680 --> 00:09:41,040
sok ac1 and they have shown that the

276
00:09:41,040 --> 00:09:43,279
the attack still works i mean with two

277
00:09:43,279 --> 00:09:45,279
power two n by three query complexity

278
00:09:45,279 --> 00:09:47,680
but again the bound has not been proven

279
00:09:47,680 --> 00:09:49,279
to be tied so

280
00:09:49,279 --> 00:09:52,399
proving the security bound of so kc 1 up

281
00:09:52,399 --> 00:09:54,560
to 2 power 1 by 3 many queries remains

282
00:09:54,560 --> 00:09:56,880
open

283
00:09:57,680 --> 00:10:00,480
so so these two constructions so p and

284
00:10:00,480 --> 00:10:04,560
so so what we have seen that uh iso kc21

285
00:10:04,560 --> 00:10:07,519
so so kc2 one when these keys are same

286
00:10:07,519 --> 00:10:08,959
so that is above the bound secure

287
00:10:08,959 --> 00:10:11,200
constructions fine so we have only the

288
00:10:11,200 --> 00:10:13,839
so kc1 that means this p1 and p2 these

289
00:10:13,839 --> 00:10:16,560
two are identical and that construction

290
00:10:16,560 --> 00:10:19,360
is achieving the uh at a complexity of

291
00:10:19,360 --> 00:10:20,959
two power to n by three but that has not

292
00:10:20,959 --> 00:10:23,040
been proven to be secured up to two n by

293
00:10:23,040 --> 00:10:24,480
uh to power to n by three minute query

294
00:10:24,480 --> 00:10:25,839
complexity

295
00:10:25,839 --> 00:10:28,160
so can we so therefore now we ask the

296
00:10:28,160 --> 00:10:29,360
question that can we design a

297
00:10:29,360 --> 00:10:30,880
permutation based pseudonym function

298
00:10:30,880 --> 00:10:32,640
with the single key

299
00:10:32,640 --> 00:10:35,600
to this end chakrabarty at all in fc 20

300
00:10:35,600 --> 00:10:37,120
have proposed their construction which

301
00:10:37,120 --> 00:10:39,279
we call the pdm map and they have shown

302
00:10:39,279 --> 00:10:41,040
that this construction achieve a tight

303
00:10:41,040 --> 00:10:43,040
twin by three bit security mount

304
00:10:43,040 --> 00:10:44,560
and one can easily turn this

305
00:10:44,560 --> 00:10:46,959
construction to an non-spaced map

306
00:10:46,959 --> 00:10:49,120
and they call it as a pdm star map and

307
00:10:49,120 --> 00:10:50,800
that also achieves the similar security

308
00:10:50,800 --> 00:10:51,920
bound

309
00:10:51,920 --> 00:10:54,000
however their construction employs a

310
00:10:54,000 --> 00:10:56,399
permutation p and its inverse and that

311
00:10:56,399 --> 00:10:58,399
implies two two calls

312
00:10:58,399 --> 00:11:01,360
two permutation calls so in the in the

313
00:11:01,360 --> 00:11:03,360
paper they have conjunct they have they

314
00:11:03,360 --> 00:11:05,120
have post an open problem that can be

315
00:11:05,120 --> 00:11:07,440
designed a bbp secured prf with one

316
00:11:07,440 --> 00:11:09,600
permutation and two forward calls so

317
00:11:09,600 --> 00:11:12,399
here they have employed a forward call

318
00:11:12,399 --> 00:11:14,640
and an inverse call so what it's what

319
00:11:14,640 --> 00:11:17,120
remains open that can be designed up

320
00:11:17,120 --> 00:11:19,839
beyond the one secure pra with with two

321
00:11:19,839 --> 00:11:22,079
permutation with with one permutation

322
00:11:22,079 --> 00:11:24,640
but with two forward calls

323
00:11:24,640 --> 00:11:26,399
here is our construction that actually

324
00:11:26,399 --> 00:11:28,320
solves that open problem and we proposed

325
00:11:28,320 --> 00:11:29,519
our construction which we call

326
00:11:29,519 --> 00:11:31,279
permutation based in crypto divisional

327
00:11:31,279 --> 00:11:32,880
construction

328
00:11:32,880 --> 00:11:34,720
we have shown that this construction

329
00:11:34,720 --> 00:11:37,279
requires two independent n-bit keys

330
00:11:37,279 --> 00:11:38,160
and

331
00:11:38,160 --> 00:11:40,000
but it is based on a single permutation

332
00:11:40,000 --> 00:11:41,680
and it requires only the forward calls

333
00:11:41,680 --> 00:11:44,000
no back no inverse calls and we have

334
00:11:44,000 --> 00:11:46,000
shown a tight 10 by 3 bit security bound

335
00:11:46,000 --> 00:11:48,240
of this construction it does not require

336
00:11:48,240 --> 00:11:50,079
the inverse of the permutation and we

337
00:11:50,079 --> 00:11:52,320
believe that if we make all this all the

338
00:11:52,320 --> 00:11:54,160
underlying indepen all the underlying

339
00:11:54,160 --> 00:11:56,240
round keys to be the same that means if

340
00:11:56,240 --> 00:11:58,399
k1 equals to k2 then also this

341
00:11:58,399 --> 00:12:01,200
construction will hold the bbp security

342
00:12:01,200 --> 00:12:03,440
but well that may require some strong

343
00:12:03,440 --> 00:12:05,760
variance of some advanced

344
00:12:05,760 --> 00:12:07,040
you know advanced results of some

345
00:12:07,040 --> 00:12:09,680
capture gamer

346
00:12:09,680 --> 00:12:11,760
okay so here is a brief comparison chart

347
00:12:11,760 --> 00:12:13,279
between different type of permutation

348
00:12:13,279 --> 00:12:15,120
based prf construction so the

349
00:12:15,120 --> 00:12:16,880
constructions which are highlighted in

350
00:12:16,880 --> 00:12:19,519
blue so these constructions are parallel

351
00:12:19,519 --> 00:12:20,720
construction and the remaining

352
00:12:20,720 --> 00:12:22,560
constructions are the sequential

353
00:12:22,560 --> 00:12:24,800
constructions so uh out of this

354
00:12:24,800 --> 00:12:26,560
sequential construction we can see that

355
00:12:26,560 --> 00:12:28,720
pdm neck is one such construction that

356
00:12:28,720 --> 00:12:30,720
does not require that that that does

357
00:12:30,720 --> 00:12:32,320
require the inverse question inverse

358
00:12:32,320 --> 00:12:33,920
call of the permutation whereas other

359
00:12:33,920 --> 00:12:35,120
construction does not require the

360
00:12:35,120 --> 00:12:37,279
inverse call of the permutation but this

361
00:12:37,279 --> 00:12:39,680
s okay c1 or so kc2 one or pdm they

362
00:12:39,680 --> 00:12:42,880
require say for example so kc ah two two

363
00:12:42,880 --> 00:12:44,720
one so we will obsolate this as a case

364
00:12:44,720 --> 00:12:46,720
two one because it is actually you know

365
00:12:46,720 --> 00:12:48,959
giving you the butter bomb security but

366
00:12:48,959 --> 00:12:51,760
for so kc1 it is having the one

367
00:12:51,760 --> 00:12:54,320
permutation and two keys but it has been

368
00:12:54,320 --> 00:12:57,200
shown to have the attack complexity of

369
00:12:57,200 --> 00:12:59,440
order two power two n by three

370
00:12:59,440 --> 00:13:01,440
but we have not been able to prove the

371
00:13:01,440 --> 00:13:03,279
upper bound of the security of this

372
00:13:03,279 --> 00:13:04,560
construction

373
00:13:04,560 --> 00:13:06,959
so pdm is the only such construction

374
00:13:06,959 --> 00:13:10,399
till now which achieves a tight security

375
00:13:10,399 --> 00:13:12,959
bound of two power to n by three and it

376
00:13:12,959 --> 00:13:15,030
requires one permutation and two keys

377
00:13:15,030 --> 00:13:17,040
[Applause]

378
00:13:17,040 --> 00:13:20,320
so uh let us let us see uh briefly the

379
00:13:20,320 --> 00:13:21,760
rationale of the attack on our

380
00:13:21,760 --> 00:13:23,200
construction

381
00:13:23,200 --> 00:13:26,399
so the main thing of the attack of uh of

382
00:13:26,399 --> 00:13:27,920
the attack on our construction is the

383
00:13:27,920 --> 00:13:28,880
following

384
00:13:28,880 --> 00:13:30,000
that if

385
00:13:30,000 --> 00:13:33,600
we make a construction query with say x

386
00:13:33,600 --> 00:13:35,760
and we the output is fine

387
00:13:35,760 --> 00:13:38,959
and if there are two primitive queries

388
00:13:38,959 --> 00:13:40,240
such that

389
00:13:40,240 --> 00:13:43,360
the first permutation the first call the

390
00:13:43,360 --> 00:13:45,760
the input to the first permutation call

391
00:13:45,760 --> 00:13:47,760
collides with some input of the

392
00:13:47,760 --> 00:13:49,199
primitive query

393
00:13:49,199 --> 00:13:51,519
and the corresponding output of the

394
00:13:51,519 --> 00:13:52,800
construction query the corresponding

395
00:13:52,800 --> 00:13:55,199
output of the second permutation call

396
00:13:55,199 --> 00:13:57,279
collides with the output of some another

397
00:13:57,279 --> 00:14:00,000
primitive query that means what will do

398
00:14:00,000 --> 00:14:02,639
that for each key value k1

399
00:14:02,639 --> 00:14:03,839
we will check

400
00:14:03,839 --> 00:14:04,720
whether

401
00:14:04,720 --> 00:14:06,240
these conditions or this equation

402
00:14:06,240 --> 00:14:08,720
satisfies that means x plus u1 equals to

403
00:14:08,720 --> 00:14:12,720
k1 and y plus k1 equals to some v2

404
00:14:12,720 --> 00:14:14,800
okay so we will we will

405
00:14:14,800 --> 00:14:17,120
find out or we will we will construct a

406
00:14:17,120 --> 00:14:20,320
set s k 1 for each k 1

407
00:14:20,320 --> 00:14:23,680
ok and in this set s k 1 we will we will

408
00:14:23,680 --> 00:14:26,000
keep the record of this triplet i j and

409
00:14:26,000 --> 00:14:28,240
k that means

410
00:14:28,240 --> 00:14:32,720
x i plus u j equals to some k 1 and y i

411
00:14:32,720 --> 00:14:37,120
equals to y i plus v k

412
00:14:37,120 --> 00:14:39,680
then for each k 1 such that

413
00:14:39,680 --> 00:14:42,399
that the cardinality of the set s k 1 is

414
00:14:42,399 --> 00:14:44,560
at least 2 we will check this following

415
00:14:44,560 --> 00:14:47,199
condition whether it holds or not if it

416
00:14:47,199 --> 00:14:49,760
holds then we say that this k1 is a

417
00:14:49,760 --> 00:14:52,000
potentially true candidate key

418
00:14:52,000 --> 00:14:53,600
and that candidate key we will add

419
00:14:53,600 --> 00:14:55,920
towards set which is called a

420
00:14:55,920 --> 00:15:00,399
mathcal k okay and our claim is that if

421
00:15:00,399 --> 00:15:03,040
k1 star and k2 star at the pair of true

422
00:15:03,040 --> 00:15:06,399
keys then the probability that k1 star

423
00:15:06,399 --> 00:15:08,000
belong to this set k

424
00:15:08,000 --> 00:15:10,160
is at least 0.687 which is at least

425
00:15:10,160 --> 00:15:11,600
greater than half

426
00:15:11,600 --> 00:15:13,760
and the probability of the cardinality

427
00:15:13,760 --> 00:15:16,959
of k is at least 128 is at most point

428
00:15:16,959 --> 00:15:18,240
five

429
00:15:18,240 --> 00:15:20,240
we have shown that the time complexity

430
00:15:20,240 --> 00:15:21,920
of our attack is ordered up to power

431
00:15:21,920 --> 00:15:24,000
forward so it is not a computationally

432
00:15:24,000 --> 00:15:24,800
very

433
00:15:24,800 --> 00:15:26,880
efficient attack its kind of information

434
00:15:26,880 --> 00:15:28,560
theoretic attack and the number of

435
00:15:28,560 --> 00:15:29,920
construction and for that information

436
00:15:29,920 --> 00:15:31,199
theoretic attack the number of

437
00:15:31,199 --> 00:15:32,880
construction queries that we require is

438
00:15:32,880 --> 00:15:35,120
2 power 2 n by 3 plus 1 and the number

439
00:15:35,120 --> 00:15:36,560
of primitive queries that we require is

440
00:15:36,560 --> 00:15:40,758
to power 2 n by 3 plus 2.

441
00:15:41,040 --> 00:15:42,720
so we briefly go to the sequel to model

442
00:15:42,720 --> 00:15:44,079
and h coefficient technique so h

443
00:15:44,079 --> 00:15:45,680
coefficient technique is a combinatorial

444
00:15:45,680 --> 00:15:47,360
tool to distinguish to bound the

445
00:15:47,360 --> 00:15:48,959
distribution advantage of two random

446
00:15:48,959 --> 00:15:51,600
systems so here a is an adversary who is

447
00:15:51,600 --> 00:15:53,680
interacting in either of the two words

448
00:15:53,680 --> 00:15:55,440
in real world or in the ideal world so

449
00:15:55,440 --> 00:15:57,120
in the real world comprised of two

450
00:15:57,120 --> 00:15:59,519
oracles fpk and the permutation p and

451
00:15:59,519 --> 00:16:01,040
the ideal world is comprised of again

452
00:16:01,040 --> 00:16:02,560
two over a random function and the

453
00:16:02,560 --> 00:16:04,240
permutation p

454
00:16:04,240 --> 00:16:06,880
so uh this advance so this adversary is

455
00:16:06,880 --> 00:16:08,480
in so if the adversary is interacting

456
00:16:08,480 --> 00:16:10,720
with the real world then it will it can

457
00:16:10,720 --> 00:16:12,800
uh interact with uh the player of this

458
00:16:12,800 --> 00:16:14,560
oracle similarly if it interacts with

459
00:16:14,560 --> 00:16:15,839
the ideal world then it will interact

460
00:16:15,839 --> 00:16:18,160
with this pair of oracles and finally

461
00:16:18,160 --> 00:16:19,519
after interacting with the oracle

462
00:16:19,519 --> 00:16:20,800
adversary has to distinguish that

463
00:16:20,800 --> 00:16:22,160
whether he has interacted with the real

464
00:16:22,160 --> 00:16:24,480
world or the ideal world and in this way

465
00:16:24,480 --> 00:16:26,160
we will define the advantage of the

466
00:16:26,160 --> 00:16:28,160
adversary a in distinguishing the real

467
00:16:28,160 --> 00:16:29,920
world from the ideal world as a sum of

468
00:16:29,920 --> 00:16:33,519
as a difference of these two probability

469
00:16:33,600 --> 00:16:34,639
and ah

470
00:16:34,639 --> 00:16:36,480
to to upper bound this advantage of this

471
00:16:36,480 --> 00:16:37,920
adversary a

472
00:16:37,920 --> 00:16:39,839
by using the h coefficient technique we

473
00:16:39,839 --> 00:16:41,759
require to identify or we require to do

474
00:16:41,759 --> 00:16:43,680
this following three things first of all

475
00:16:43,680 --> 00:16:45,040
we require to identify the bad

476
00:16:45,040 --> 00:16:46,160
transcript

477
00:16:46,160 --> 00:16:48,399
then we require to upper bound the

478
00:16:48,399 --> 00:16:49,839
probability of by transcripts in the

479
00:16:49,839 --> 00:16:52,240
ideal world and then if we take any good

480
00:16:52,240 --> 00:16:53,360
transcript

481
00:16:53,360 --> 00:16:55,040
then we will need to lower bound the

482
00:16:55,040 --> 00:16:57,519
ratio of the real to ideal interpolation

483
00:16:57,519 --> 00:16:59,440
probability for that good transcript

484
00:16:59,440 --> 00:17:00,639
okay so what is the transcript

485
00:17:00,639 --> 00:17:02,240
transcript is nothing but a summary of

486
00:17:02,240 --> 00:17:04,400
the interaction between the adversary

487
00:17:04,400 --> 00:17:07,120
and the oracle

488
00:17:07,359 --> 00:17:09,280
okay so in order to prove the security

489
00:17:09,280 --> 00:17:11,679
of the of our construction we require a

490
00:17:11,679 --> 00:17:13,439
some capture lemma so sun capture lemma

491
00:17:13,439 --> 00:17:15,280
is a very old result proposed by babai

492
00:17:15,280 --> 00:17:18,640
in 2002 which roughly says that if a is

493
00:17:18,640 --> 00:17:20,880
a random subset of 0 and power n then

494
00:17:20,880 --> 00:17:23,760
for any bc where b and c are again 2

495
00:17:23,760 --> 00:17:26,640
rank 2 2 subsets of 0 and power n

496
00:17:26,640 --> 00:17:29,120
thus cardinality of the set

497
00:17:29,120 --> 00:17:30,640
that means the cardinality of this

498
00:17:30,640 --> 00:17:33,039
triplet abc such that a equals to b plus

499
00:17:33,039 --> 00:17:33,760
c

500
00:17:33,760 --> 00:17:35,280
that is less than

501
00:17:35,280 --> 00:17:37,840
this term the the

502
00:17:37,840 --> 00:17:39,919
product of the cardinality of a b and c

503
00:17:39,919 --> 00:17:41,520
over 2 power n

504
00:17:41,520 --> 00:17:43,200
is is very small

505
00:17:43,200 --> 00:17:46,200
okay

506
00:17:46,240 --> 00:17:49,280
ah so at this this uh this result some

507
00:17:49,280 --> 00:17:50,960
capture lemma uh which is proposed by

508
00:17:50,960 --> 00:17:52,880
chennai it's just a quick version of the

509
00:17:52,880 --> 00:17:55,120
original sum capture lemma and this was

510
00:17:55,120 --> 00:17:58,000
used in 2014 by the result of chain at

511
00:17:58,000 --> 00:18:00,559
all which says that this a this random

512
00:18:00,559 --> 00:18:02,559
substitute of zero one power n it arises

513
00:18:02,559 --> 00:18:04,160
from the interaction of an adversary

514
00:18:04,160 --> 00:18:06,960
with a random permutation p namely a is

515
00:18:06,960 --> 00:18:09,440
the sum of x plus y where x is the input

516
00:18:09,440 --> 00:18:12,000
and y is the output of a trans of our

517
00:18:12,000 --> 00:18:13,120
interaction

518
00:18:13,120 --> 00:18:16,640
then for any uh subset b and c of 0 and

519
00:18:16,640 --> 00:18:17,679
power n

520
00:18:17,679 --> 00:18:20,320
this uh the the the carbonate of this

521
00:18:20,320 --> 00:18:22,480
set that means x plus y and b lc such

522
00:18:22,480 --> 00:18:25,120
that x plus y equals to b b plus c it is

523
00:18:25,120 --> 00:18:27,919
at most q times b times the current rate

524
00:18:27,919 --> 00:18:30,480
of b and the product of the b and c over

525
00:18:30,480 --> 00:18:34,720
2 power n is very is very low

526
00:18:36,320 --> 00:18:37,120
okay

527
00:18:37,120 --> 00:18:38,720
now we briefly go to the stage of the

528
00:18:38,720 --> 00:18:40,880
security proof where we will identify

529
00:18:40,880 --> 00:18:42,799
the bad events so the first direction

530
00:18:42,799 --> 00:18:45,039
says that if we have a construction

531
00:18:45,039 --> 00:18:47,120
query say x comma y

532
00:18:47,120 --> 00:18:49,360
such that the input to the first

533
00:18:49,360 --> 00:18:51,039
permutation call collides with the input

534
00:18:51,039 --> 00:18:53,039
of a primitive query and the output to

535
00:18:53,039 --> 00:18:54,559
the second permutation call collides

536
00:18:54,559 --> 00:18:56,160
with the output of any other primitive

537
00:18:56,160 --> 00:18:58,960
query see if this happens then actually

538
00:18:58,960 --> 00:19:00,480
the middle part is known to the

539
00:19:00,480 --> 00:19:02,000
adversary

540
00:19:02,000 --> 00:19:06,320
similarly back to says that if

541
00:19:06,320 --> 00:19:08,880
we have two construction query such that

542
00:19:08,880 --> 00:19:11,360
for the first construction query say x

543
00:19:11,360 --> 00:19:12,320
and y

544
00:19:12,320 --> 00:19:14,480
so this the for the first construction

545
00:19:14,480 --> 00:19:16,960
query the input to the first permutation

546
00:19:16,960 --> 00:19:18,960
call collides with the input of some

547
00:19:18,960 --> 00:19:20,320
primitive query

548
00:19:20,320 --> 00:19:22,960
and the output collides with the output

549
00:19:22,960 --> 00:19:26,240
of some other construction query

550
00:19:26,240 --> 00:19:28,000
the third paragraph says

551
00:19:28,000 --> 00:19:30,480
that if there is a construction query

552
00:19:30,480 --> 00:19:32,000
such that the input to the first

553
00:19:32,000 --> 00:19:34,400
permutation call collides with the input

554
00:19:34,400 --> 00:19:36,320
of some primitive query therefore this

555
00:19:36,320 --> 00:19:38,799
output is determined so that will be v

556
00:19:38,799 --> 00:19:41,679
okay and therefore the input to the

557
00:19:41,679 --> 00:19:44,160
second permutation call that means v

558
00:19:44,160 --> 00:19:47,280
plus u plus k2 that again collides with

559
00:19:47,280 --> 00:19:48,080
the

560
00:19:48,080 --> 00:19:49,840
input of some other primitive query that

561
00:19:49,840 --> 00:19:51,840
means it is a simultaneous condition to

562
00:19:51,840 --> 00:19:54,160
the primitive query

563
00:19:54,160 --> 00:19:56,799
so similarly so that four is basically

564
00:19:56,799 --> 00:20:00,240
again the uh a symmetric uh

565
00:20:00,240 --> 00:20:02,400
or a mirror image of the even back three

566
00:20:02,400 --> 00:20:04,000
that means if there's a construction

567
00:20:04,000 --> 00:20:07,200
query x comma y and the output of a of

568
00:20:07,200 --> 00:20:08,799
the output of the second permutation

569
00:20:08,799 --> 00:20:10,400
call collides with the output of some

570
00:20:10,400 --> 00:20:12,480
primitive query and therefore this input

571
00:20:12,480 --> 00:20:14,880
is determined and therefore the output

572
00:20:14,880 --> 00:20:16,480
of the first permutation call again

573
00:20:16,480 --> 00:20:17,919
collides with the output of some other

574
00:20:17,919 --> 00:20:20,720
primitive query

575
00:20:20,720 --> 00:20:24,880
so that five says that if

576
00:20:26,080 --> 00:20:28,720
the input of the first permutation call

577
00:20:28,720 --> 00:20:30,080
so so we have again another two

578
00:20:30,080 --> 00:20:32,000
construction query so the input of the

579
00:20:32,000 --> 00:20:34,240
first permutation call collides with the

580
00:20:34,240 --> 00:20:36,240
input of some primitive query

581
00:20:36,240 --> 00:20:38,720
and the input to the second permutation

582
00:20:38,720 --> 00:20:41,039
call for this construction query xy that

583
00:20:41,039 --> 00:20:43,600
collides with x prime so that collides

584
00:20:43,600 --> 00:20:45,520
with the input of the first permutation

585
00:20:45,520 --> 00:20:48,000
call for the another construction query

586
00:20:48,000 --> 00:20:50,240
so bad six is again a mirror image of

587
00:20:50,240 --> 00:20:52,000
the batch five which says that we have

588
00:20:52,000 --> 00:20:54,240
two construction query x y and x prime y

589
00:20:54,240 --> 00:20:57,360
prime such that the input to the sorry

590
00:20:57,360 --> 00:20:59,200
the output to the second permutation

591
00:20:59,200 --> 00:21:01,840
call collides with the output of

592
00:21:01,840 --> 00:21:04,080
the output of the primitive query and

593
00:21:04,080 --> 00:21:06,480
therefore the output of the first

594
00:21:06,480 --> 00:21:07,679
permutation call for this first

595
00:21:07,679 --> 00:21:10,000
construction query collides with the

596
00:21:10,000 --> 00:21:12,080
output of the second permutation call of

597
00:21:12,080 --> 00:21:15,200
the other construction query

598
00:21:15,200 --> 00:21:17,440
so that seven says that we have two

599
00:21:17,440 --> 00:21:19,679
primitive two construction queries such

600
00:21:19,679 --> 00:21:21,520
that so the first construct the input to

601
00:21:21,520 --> 00:21:22,799
the first permutation call of the first

602
00:21:22,799 --> 00:21:24,799
construction query collides with the

603
00:21:24,799 --> 00:21:26,400
input to the uh

604
00:21:26,400 --> 00:21:28,240
to some primitive query

605
00:21:28,240 --> 00:21:31,120
and

606
00:21:31,120 --> 00:21:32,720
uh

607
00:21:32,720 --> 00:21:34,240
and and for the for the other

608
00:21:34,240 --> 00:21:36,799
construction query the in the input to

609
00:21:36,799 --> 00:21:38,559
the first permutation call collides with

610
00:21:38,559 --> 00:21:40,240
the input to the

611
00:21:40,240 --> 00:21:42,159
input to some other primitive query say

612
00:21:42,159 --> 00:21:45,919
u u1 prime okay and there and

613
00:21:45,919 --> 00:21:48,000
the for for those two construction query

614
00:21:48,000 --> 00:21:49,919
the the input to the second permutation

615
00:21:49,919 --> 00:21:52,080
called collides that means we have these

616
00:21:52,080 --> 00:21:53,919
two construction queries x

617
00:21:53,919 --> 00:21:56,559
y and x prime y prime so that x plus k

618
00:21:56,559 --> 00:21:57,360
one

619
00:21:57,360 --> 00:21:58,559
which is the input to the first

620
00:21:58,559 --> 00:22:00,640
permutation call that collides with the

621
00:22:00,640 --> 00:22:02,320
input to some primitive query which is

622
00:22:02,320 --> 00:22:05,760
u1 similarly we have the input to the

623
00:22:05,760 --> 00:22:07,120
first permutation call for the other

624
00:22:07,120 --> 00:22:08,880
construction query which is x5 plus k1

625
00:22:08,880 --> 00:22:10,640
that collides with the input of some

626
00:22:10,640 --> 00:22:12,960
other primitive queries say u1 prime and

627
00:22:12,960 --> 00:22:15,440
therefore the output the corresponding

628
00:22:15,440 --> 00:22:16,880
output the corresponding input to the

629
00:22:16,880 --> 00:22:19,200
second permutation call which is say v 1

630
00:22:19,200 --> 00:22:20,559
plus u 1

631
00:22:20,559 --> 00:22:22,960
plus k 2 that collides with v 1 prime

632
00:22:22,960 --> 00:22:25,039
plus 1 prime plus k 2

633
00:22:25,039 --> 00:22:27,679
right again that eight is just a mirror

634
00:22:27,679 --> 00:22:29,600
image of that seven

635
00:22:29,600 --> 00:22:31,520
so here's a back line this says that the

636
00:22:31,520 --> 00:22:33,039
number of uh

637
00:22:33,039 --> 00:22:34,880
construction and primitive queries such

638
00:22:34,880 --> 00:22:35,679
that

639
00:22:35,679 --> 00:22:36,960
the x plus

640
00:22:36,960 --> 00:22:39,280
such that the uh first input to the

641
00:22:39,280 --> 00:22:40,799
first permutation called collides with

642
00:22:40,799 --> 00:22:43,200
the inputs of primitive query this set

643
00:22:43,200 --> 00:22:45,919
should not be too much right so this the

644
00:22:45,919 --> 00:22:47,679
the cardinality of this state should if

645
00:22:47,679 --> 00:22:49,360
it is at least greater than square root

646
00:22:49,360 --> 00:22:51,360
of q then it is bad

647
00:22:51,360 --> 00:22:53,600
similarly back 10 is the mirror image of

648
00:22:53,600 --> 00:22:56,000
bad nine where it's a it's a restriction

649
00:22:56,000 --> 00:22:57,440
imposed on the output set

650
00:22:57,440 --> 00:22:59,039
[Music]

651
00:22:59,039 --> 00:23:00,960
so that 11 says that the number of

652
00:23:00,960 --> 00:23:02,640
colliding queries such that y equals to

653
00:23:02,640 --> 00:23:03,919
y prime so the number of questioning

654
00:23:03,919 --> 00:23:05,919
query should not be too much so if it is

655
00:23:05,919 --> 00:23:07,600
like square get the square root of q

656
00:23:07,600 --> 00:23:09,600
then we will call that the event is bad

657
00:23:09,600 --> 00:23:11,039
so we require some additional value

658
00:23:11,039 --> 00:23:12,960
events

659
00:23:12,960 --> 00:23:15,039
and these values will be required to you

660
00:23:15,039 --> 00:23:17,360
know to lower bound the uh

661
00:23:17,360 --> 00:23:18,960
real interpolation probability for good

662
00:23:18,960 --> 00:23:20,720
transcripts

663
00:23:20,720 --> 00:23:23,120
so ah the most difficult part of this

664
00:23:23,120 --> 00:23:24,880
paper is to analyze is the analysis of

665
00:23:24,880 --> 00:23:26,720
the good transcript and we will not go

666
00:23:26,720 --> 00:23:28,400
into the detail of it but we will try to

667
00:23:28,400 --> 00:23:30,480
give a very high level overview of the

668
00:23:30,480 --> 00:23:32,080
ah proof technique that we have used

669
00:23:32,080 --> 00:23:34,159
here so first of all we will partition

670
00:23:34,159 --> 00:23:36,720
the set of transcripts into three sets

671
00:23:36,720 --> 00:23:39,120
and the set of transcript so we will

672
00:23:39,120 --> 00:23:41,600
partition it into three three sets the

673
00:23:41,600 --> 00:23:42,880
first type says that the set of

674
00:23:42,880 --> 00:23:44,559
transcript whose input collides with the

675
00:23:44,559 --> 00:23:46,320
input of some primitive queries the

676
00:23:46,320 --> 00:23:48,000
second one says the set of transcript

677
00:23:48,000 --> 00:23:49,520
whose output collides with the output of

678
00:23:49,520 --> 00:23:51,840
some primitive queries and the third one

679
00:23:51,840 --> 00:23:53,840
is the set of transcript whose input and

680
00:23:53,840 --> 00:23:55,919
output are fresh so the analysis of the

681
00:23:55,919 --> 00:23:58,320
first two cases is easy more or less but

682
00:23:58,320 --> 00:23:59,760
the analysis of the third case is the

683
00:23:59,760 --> 00:24:01,360
most difficult one

684
00:24:01,360 --> 00:24:04,159
so in order to analyze uh the the third

685
00:24:04,159 --> 00:24:07,039
one so we we again subdivide it into two

686
00:24:07,039 --> 00:24:10,080
parts so in case a we will partition

687
00:24:10,080 --> 00:24:11,760
this set of transcript whose input and

688
00:24:11,760 --> 00:24:15,200
output are fresh we will partition it uh

689
00:24:15,200 --> 00:24:17,360
in case a and case b where in case a it

690
00:24:17,360 --> 00:24:18,960
says that a set of transcripts where the

691
00:24:18,960 --> 00:24:20,480
input to the second permutation call

692
00:24:20,480 --> 00:24:22,400
collapse with the input to the first one

693
00:24:22,400 --> 00:24:25,120
that means we have say for example

694
00:24:25,120 --> 00:24:26,720
so uh

695
00:24:26,720 --> 00:24:29,200
so we have say suppose this x y and x

696
00:24:29,200 --> 00:24:30,799
prime y prime suppose for the time being

697
00:24:30,799 --> 00:24:33,360
we will assume that the input and output

698
00:24:33,360 --> 00:24:35,679
of this two permutation are fresh right

699
00:24:35,679 --> 00:24:37,840
but here it may so happen that this

700
00:24:37,840 --> 00:24:39,440
input to the first permutation call that

701
00:24:39,440 --> 00:24:42,240
means x plus k one so p x one so sorry

702
00:24:42,240 --> 00:24:43,840
so input to the second permutation call

703
00:24:43,840 --> 00:24:45,679
for this construction query that means

704
00:24:45,679 --> 00:24:48,400
this this part so this collides with

705
00:24:48,400 --> 00:24:49,760
this

706
00:24:49,760 --> 00:24:52,640
okay so that means p of x plus k1 plus

707
00:24:52,640 --> 00:24:55,039
k2 plus x plus k1 that collides with x

708
00:24:55,039 --> 00:24:57,679
prime plus k1 if this happens then the

709
00:24:57,679 --> 00:24:59,520
out we cannot sample the output this

710
00:24:59,520 --> 00:25:02,480
output is determined

711
00:25:02,799 --> 00:25:04,960
and case b we will analyze with the

712
00:25:04,960 --> 00:25:07,120
remaining set of transcript

713
00:25:07,120 --> 00:25:09,840
so analysis for case a that means where

714
00:25:09,840 --> 00:25:10,640
the

715
00:25:10,640 --> 00:25:11,919
there is a dependency between the

716
00:25:11,919 --> 00:25:14,080
permutation calls so for analysis of

717
00:25:14,080 --> 00:25:15,600
case we will count first the number of

718
00:25:15,600 --> 00:25:17,679
transcript that satisfies this case a

719
00:25:17,679 --> 00:25:19,760
and that will say t many input output

720
00:25:19,760 --> 00:25:21,360
pairs for the permutation where t is the

721
00:25:21,360 --> 00:25:23,440
number of pairs that satisfying this

722
00:25:23,440 --> 00:25:26,159
this equation this equation

723
00:25:26,159 --> 00:25:28,240
and for the analysis of case b we will

724
00:25:28,240 --> 00:25:31,279
identify this intermediate value z and

725
00:25:31,279 --> 00:25:33,600
we will uh we will identify that this z

726
00:25:33,600 --> 00:25:35,840
should be valid and we will count the

727
00:25:35,840 --> 00:25:38,240
number of such valid or good set and for

728
00:25:38,240 --> 00:25:39,760
a fixed good set we will count the

729
00:25:39,760 --> 00:25:41,600
number of permutation that realizes this

730
00:25:41,600 --> 00:25:43,279
given transcript

731
00:25:43,279 --> 00:25:45,120
so in order to conclude this paper so in

732
00:25:45,120 --> 00:25:47,279
this paper we have shown that that we

733
00:25:47,279 --> 00:25:49,279
have proposed an inversely public public

734
00:25:49,279 --> 00:25:51,120
permutation based prf in morally

735
00:25:51,120 --> 00:25:53,919
sequential mode and it achieves ah types

736
00:25:53,919 --> 00:25:55,679
equity bound or roughly of the order of

737
00:25:55,679 --> 00:25:57,840
2 power 2 n by 3 many queries and we

738
00:25:57,840 --> 00:25:59,440
believe that the beyond the bomb

739
00:25:59,440 --> 00:26:00,960
security of this construction will

740
00:26:00,960 --> 00:26:03,679
remain whole even if the

741
00:26:03,679 --> 00:26:05,440
round keys are identical that means even

742
00:26:05,440 --> 00:26:08,480
if k k 1 equals to k 2

743
00:26:08,480 --> 00:26:10,880
so thank you for listening this talk and

744
00:26:10,880 --> 00:26:13,039
if you have any query you can send an

745
00:26:13,039 --> 00:26:16,250
email to any one of us thank you

746
00:26:16,250 --> 00:26:19,319
[Music]

