1
00:00:00,240 --> 00:00:02,639
hello my name is mustafa radla and today

2
00:00:02,639 --> 00:00:04,720
i will be presenting the paper security

3
00:00:04,720 --> 00:00:07,600
of cofp against chosen ciphertext

4
00:00:07,600 --> 00:00:08,960
attacks

5
00:00:08,960 --> 00:00:12,480
first a short introduction about ceo fb

6
00:00:12,480 --> 00:00:16,640
cufp was designed by shakraporti that

7
00:00:16,640 --> 00:00:18,560
in 2017

8
00:00:18,560 --> 00:00:20,880
and the abbreviations ufb stands for

9
00:00:20,880 --> 00:00:22,800
combined feedback mode

10
00:00:22,800 --> 00:00:25,119
and it is the basis for the gifts ufb

11
00:00:25,119 --> 00:00:26,720
which is the final standardised

12
00:00:26,720 --> 00:00:28,960
lightweight cryptography standardization

13
00:00:28,960 --> 00:00:31,840
project

14
00:00:32,719 --> 00:00:34,800
the encryption algorithm works as

15
00:00:34,800 --> 00:00:37,920
follows first it takes announce n

16
00:00:37,920 --> 00:00:40,160
encrypts it to generate the initial

17
00:00:40,160 --> 00:00:42,800
state and also to generate a half block

18
00:00:42,800 --> 00:00:45,920
mask l after that the associated data is

19
00:00:45,920 --> 00:00:47,920
absorbed blocked by blocks through the

20
00:00:47,920 --> 00:00:49,680
linear function row

21
00:00:49,680 --> 00:00:52,000
and each time the internal state is

22
00:00:52,000 --> 00:00:54,000
masked with a version of the mask l

23
00:00:54,000 --> 00:00:56,559
multiplied by a different constant

24
00:00:56,559 --> 00:00:58,480
and the block cipher encryption is

25
00:00:58,480 --> 00:00:59,760
applied

26
00:00:59,760 --> 00:01:01,520
after all the associated data blocks

27
00:01:01,520 --> 00:01:04,080
have been absorbed

28
00:01:04,080 --> 00:01:06,080
we start encrypting the message blocks

29
00:01:06,080 --> 00:01:08,640
so we encrypt the internal state

30
00:01:08,640 --> 00:01:10,640
then absorb the message using the same

31
00:01:10,640 --> 00:01:12,400
linear function row but this time it

32
00:01:12,400 --> 00:01:14,080
outputs two blocks

33
00:01:14,080 --> 00:01:16,159
one is update to the internal state and

34
00:01:16,159 --> 00:01:18,799
the other one is a ciphertext block

35
00:01:18,799 --> 00:01:20,880
then again we mask

36
00:01:20,880 --> 00:01:22,479
in similar way

37
00:01:22,479 --> 00:01:24,840
the internal state using the mass

38
00:01:24,840 --> 00:01:27,439
scale after all the message blocks have

39
00:01:27,439 --> 00:01:28,960
been encrypted

40
00:01:28,960 --> 00:01:31,119
we encrypt the internal state one more

41
00:01:31,119 --> 00:01:35,119
time to generate the authentication tag

42
00:01:36,400 --> 00:01:38,400
in the original publication in chess

43
00:01:38,400 --> 00:01:40,000
2017

44
00:01:40,000 --> 00:01:41,600
the authors

45
00:01:41,600 --> 00:01:44,320
claimed security as long as the number

46
00:01:44,320 --> 00:01:46,159
of forgery attempts or decryption

47
00:01:46,159 --> 00:01:48,640
queries is less than 2 to the n over 2

48
00:01:48,640 --> 00:01:49,840
over n

49
00:01:49,840 --> 00:01:51,360
and the number

50
00:01:51,360 --> 00:01:54,479
of encrypted blocks and decrypted blocks

51
00:01:54,479 --> 00:01:57,040
is less than two to the n over two these

52
00:01:57,040 --> 00:01:59,920
numbers in practice are to the 58 and to

53
00:01:59,920 --> 00:02:01,680
the 64.

54
00:02:01,680 --> 00:02:04,320
and the forgery bound looked as shown

55
00:02:04,320 --> 00:02:07,040
here and we can see that it's a birthday

56
00:02:07,040 --> 00:02:09,440
bound in terms of the

57
00:02:09,440 --> 00:02:11,360
encrypted blocks

58
00:02:11,360 --> 00:02:13,920
and the decrypted blocks here

59
00:02:13,920 --> 00:02:17,520
and also it has a logarithmic term here

60
00:02:17,520 --> 00:02:19,200
and

61
00:02:19,200 --> 00:02:21,040
which is related to the number of

62
00:02:21,040 --> 00:02:23,599
forgery attempts

63
00:02:23,599 --> 00:02:25,360
and here we assume that all the block

64
00:02:25,360 --> 00:02:27,040
heifer calls have been replaced by a

65
00:02:27,040 --> 00:02:29,840
random function

66
00:02:30,480 --> 00:02:32,239
later the authors

67
00:02:32,239 --> 00:02:34,720
presented an extension paper in the

68
00:02:34,720 --> 00:02:37,920
journal of cryptology 2020 where they

69
00:02:37,920 --> 00:02:40,160
improve the security bounds so we can

70
00:02:40,160 --> 00:02:42,959
see the birthday bound in in terms of

71
00:02:42,959 --> 00:02:44,879
the encrypted blocks and the crypto

72
00:02:44,879 --> 00:02:47,280
block still exists but no longer

73
00:02:47,280 --> 00:02:49,760
logarithmic term

74
00:02:49,760 --> 00:02:52,080
finally as part of the nest lightweight

75
00:02:52,080 --> 00:02:54,160
cryptography efforts

76
00:02:54,160 --> 00:02:57,120
the designers of gift cofp

77
00:02:57,120 --> 00:02:59,120
presented a similar bound to the

78
00:02:59,120 --> 00:03:00,640
original bound which still had

79
00:03:00,640 --> 00:03:02,640
logarithmic terms different in some

80
00:03:02,640 --> 00:03:05,680
parts but the overall conclusion is

81
00:03:05,680 --> 00:03:09,040
similar to the chess 2017 paper

82
00:03:09,040 --> 00:03:11,280
a few observations that motivate this

83
00:03:11,280 --> 00:03:13,280
work are related to schemes that are

84
00:03:13,280 --> 00:03:16,000
secure after the birthday bound

85
00:03:16,000 --> 00:03:17,760
a lot of the schemes that are secure up

86
00:03:17,760 --> 00:03:20,000
to the birthday pound have a security

87
00:03:20,000 --> 00:03:22,159
bound on the form sigma squared over 2

88
00:03:22,159 --> 00:03:23,200
to the n

89
00:03:23,200 --> 00:03:25,200
and this bound is close to 2 to the

90
00:03:25,200 --> 00:03:26,400
minus n

91
00:03:26,400 --> 00:03:27,519
when

92
00:03:27,519 --> 00:03:30,560
sigma is small

93
00:03:30,720 --> 00:03:32,480
on the other hand schemes that have a

94
00:03:32,480 --> 00:03:35,680
security bound on the form sigma over 2

95
00:03:35,680 --> 00:03:39,599
to the n over 2 are less secure because

96
00:03:39,599 --> 00:03:41,840
the bound is higher

97
00:03:41,840 --> 00:03:43,519
when

98
00:03:43,519 --> 00:03:45,599
sigma is small

99
00:03:45,599 --> 00:03:47,599
and they usually have another 2-bit

100
00:03:47,599 --> 00:03:48,959
tanks

101
00:03:48,959 --> 00:03:52,400
cofp has a security bound on this form

102
00:03:52,400 --> 00:03:55,840
yet its stack size is n bits

103
00:03:55,840 --> 00:03:58,560
moreover the journal of cryptology 2020

104
00:03:58,560 --> 00:04:01,519
security bound improves the security to

105
00:04:01,519 --> 00:04:05,280
sigma squared over 2 to the n

106
00:04:05,280 --> 00:04:06,319
so

107
00:04:06,319 --> 00:04:09,040
this raises a question like

108
00:04:09,040 --> 00:04:11,680
can this pound also adopted for gifts

109
00:04:11,680 --> 00:04:14,080
ufb or not and is this improvement

110
00:04:14,080 --> 00:04:17,040
correct or not

111
00:04:18,798 --> 00:04:19,839
so

112
00:04:19,839 --> 00:04:22,639
we ask two research questions

113
00:04:22,639 --> 00:04:26,400
can we break cofp algorithm with only

114
00:04:26,400 --> 00:04:29,199
2 to the n over 2 over n for series or

115
00:04:29,199 --> 00:04:30,880
at least

116
00:04:30,880 --> 00:04:32,560
break it with 2 to the n over 2

117
00:04:32,560 --> 00:04:35,199
forgeries and negligible

118
00:04:35,199 --> 00:04:37,759
number of encryption queries

119
00:04:37,759 --> 00:04:39,120
and

120
00:04:39,120 --> 00:04:40,240
since

121
00:04:40,240 --> 00:04:42,160
c of b has a bound that looks like

122
00:04:42,160 --> 00:04:43,680
schemes with

123
00:04:43,680 --> 00:04:46,560
n over two bit tags can we show that ceo

124
00:04:46,560 --> 00:04:49,360
of b behaves in a similar way to schemes

125
00:04:49,360 --> 00:04:52,320
with short tags

126
00:04:54,160 --> 00:04:55,919
normally in authenticated encryption

127
00:04:55,919 --> 00:04:57,440
security models

128
00:04:57,440 --> 00:05:00,639
the security model is defined such that

129
00:05:00,639 --> 00:05:02,479
once a forgery happens that's already

130
00:05:02,479 --> 00:05:05,280
considered a success for the adversary

131
00:05:05,280 --> 00:05:07,759
and the security game will be stopped

132
00:05:07,759 --> 00:05:09,759
but in the next section we will look at

133
00:05:09,759 --> 00:05:12,080
a sort of a misuse scenario

134
00:05:12,080 --> 00:05:14,560
where we will allow forgeries to happen

135
00:05:14,560 --> 00:05:16,800
but we still require the adversary to

136
00:05:16,800 --> 00:05:19,520
break privacy so just getting a

137
00:05:19,520 --> 00:05:22,800
successful forgery is not enough

138
00:05:22,800 --> 00:05:24,639
in order to do so

139
00:05:24,639 --> 00:05:26,639
we have to slightly modify the

140
00:05:26,639 --> 00:05:28,000
definition from the standard

141
00:05:28,000 --> 00:05:29,840
authenticated encryption

142
00:05:29,840 --> 00:05:31,120
definition

143
00:05:31,120 --> 00:05:33,840
so in this case

144
00:05:33,840 --> 00:05:36,479
for the encryption it will be similar to

145
00:05:36,479 --> 00:05:38,479
an ideal world versus the real world

146
00:05:38,479 --> 00:05:40,320
scenario where

147
00:05:40,320 --> 00:05:43,440
the encryption oracle will will choose

148
00:05:43,440 --> 00:05:45,840
whether to output a correct encryption

149
00:05:45,840 --> 00:05:47,600
or to output

150
00:05:47,600 --> 00:05:49,840
a string of random bits depending on a

151
00:05:49,840 --> 00:05:52,160
bit b

152
00:05:52,160 --> 00:05:54,720
but in this case

153
00:05:54,720 --> 00:05:56,960
ideally we would have had the decryption

154
00:05:56,960 --> 00:05:58,560
oracle

155
00:05:58,560 --> 00:06:00,639
always output

156
00:06:00,639 --> 00:06:01,759
error

157
00:06:01,759 --> 00:06:04,560
but here we will have the decryption

158
00:06:04,560 --> 00:06:06,800
oracle always perform the correct

159
00:06:06,800 --> 00:06:08,160
decryption

160
00:06:08,160 --> 00:06:10,479
this would allow the adversary

161
00:06:10,479 --> 00:06:11,680
to

162
00:06:11,680 --> 00:06:13,919
get successful forgeries

163
00:06:13,919 --> 00:06:16,000
but these successful forgeries

164
00:06:16,000 --> 00:06:18,479
will not be considered wins

165
00:06:18,479 --> 00:06:22,960
except if he can still guess the pit v

166
00:06:25,360 --> 00:06:27,440
and we can see that this is relevant

167
00:06:27,440 --> 00:06:29,759
because not every forgery will allow to

168
00:06:29,759 --> 00:06:32,160
break such security game

169
00:06:32,160 --> 00:06:34,639
so for example if we have a symbol

170
00:06:34,639 --> 00:06:37,280
forgery adversary that encrypts a

171
00:06:37,280 --> 00:06:39,280
message and then

172
00:06:39,280 --> 00:06:41,280
changes one bit in the cipher text and

173
00:06:41,280 --> 00:06:44,000
tries to guess the new tag

174
00:06:44,000 --> 00:06:47,520
such forgery will succeed eventually

175
00:06:47,520 --> 00:06:48,479
but

176
00:06:48,479 --> 00:06:50,240
it will not lead to a break in this

177
00:06:50,240 --> 00:06:53,599
security model because

178
00:06:53,840 --> 00:06:56,720
in the non-respecting case this nonce is

179
00:06:56,720 --> 00:06:58,880
already used in an encryption query

180
00:06:58,880 --> 00:07:02,560
before and cannot be used to generate

181
00:07:02,560 --> 00:07:05,440
new encryptions

182
00:07:07,360 --> 00:07:10,720
why does this matter it matters because

183
00:07:10,720 --> 00:07:12,400
we have usually

184
00:07:12,400 --> 00:07:14,400
two security

185
00:07:14,400 --> 00:07:16,720
claims for an authenticated encryption

186
00:07:16,720 --> 00:07:17,599
scheme

187
00:07:17,599 --> 00:07:20,080
an integrity of ciphertext claim

188
00:07:20,080 --> 00:07:23,599
and an indistinguishability of chosen

189
00:07:23,599 --> 00:07:27,440
against chosen plaintext adversaries

190
00:07:27,440 --> 00:07:30,080
and in practice maybe that the security

191
00:07:30,080 --> 00:07:32,560
of each of these

192
00:07:32,560 --> 00:07:34,560
claims is

193
00:07:34,560 --> 00:07:36,560
different like

194
00:07:36,560 --> 00:07:39,360
one is higher than the other let's say

195
00:07:39,360 --> 00:07:41,360
we have

196
00:07:41,360 --> 00:07:43,199
an integrity claim that's very low

197
00:07:43,199 --> 00:07:44,879
compared to the indistinguishability

198
00:07:44,879 --> 00:07:46,720
claim

199
00:07:46,720 --> 00:07:49,360
if we can use the forgeries to

200
00:07:49,360 --> 00:07:51,840
perform an indistinguishability against

201
00:07:51,840 --> 00:07:54,160
chosen ciphertext adversaries

202
00:07:54,160 --> 00:07:56,240
this will affect the privacy in practice

203
00:07:56,240 --> 00:07:58,160
even though the indistinguishability

204
00:07:58,160 --> 00:08:01,280
against chosen plaintext adversaries

205
00:08:01,280 --> 00:08:04,080
is still high

206
00:08:05,680 --> 00:08:08,319
and this happens because in the chosen

207
00:08:08,319 --> 00:08:09,759
plain text

208
00:08:09,759 --> 00:08:12,240
scenario the number of decryption

209
00:08:12,240 --> 00:08:14,240
queries or forgery attempts is

210
00:08:14,240 --> 00:08:16,800
irrelevant

211
00:08:18,080 --> 00:08:21,280
so this attack was presented

212
00:08:21,280 --> 00:08:23,360
in the nist lightweight

213
00:08:23,360 --> 00:08:25,039
cryptography forum

214
00:08:25,039 --> 00:08:28,879
informally by alexander match in 2019

215
00:08:28,879 --> 00:08:29,919
where

216
00:08:29,919 --> 00:08:31,680
you take a scheme that has a short tag

217
00:08:31,680 --> 00:08:34,000
so let's say the scheme has only 64-bit

218
00:08:34,000 --> 00:08:35,279
tag

219
00:08:35,279 --> 00:08:37,519
you start decrypting random messages

220
00:08:37,519 --> 00:08:39,279
with announced that was never queried

221
00:08:39,279 --> 00:08:41,599
before during encryption

222
00:08:41,599 --> 00:08:43,120
and at some point you will get the

223
00:08:43,120 --> 00:08:45,120
attack correctly

224
00:08:45,120 --> 00:08:47,680
once the attack is guessed

225
00:08:47,680 --> 00:08:49,600
this will leak some information about

226
00:08:49,600 --> 00:08:51,920
the key stream bits related to this

227
00:08:51,920 --> 00:08:53,519
nouns

228
00:08:53,519 --> 00:08:55,440
at a later time the adversary would

229
00:08:55,440 --> 00:08:57,440
observe a message encrypted with the sim

230
00:08:57,440 --> 00:08:58,720
nuns

231
00:08:58,720 --> 00:09:01,040
and this will allow him to partially

232
00:09:01,040 --> 00:09:03,680
decrypt it

233
00:09:07,120 --> 00:09:09,760
so here we describe a class of non's

234
00:09:09,760 --> 00:09:11,680
respecting authenticated encryption

235
00:09:11,680 --> 00:09:14,480
schemes where if the length of the

236
00:09:14,480 --> 00:09:17,680
associated data is equal for two

237
00:09:17,680 --> 00:09:18,880
queries

238
00:09:18,880 --> 00:09:22,480
and the length of message is equal but

239
00:09:22,480 --> 00:09:25,680
the messages are different

240
00:09:25,680 --> 00:09:28,399
then if we encrypt the two queries with

241
00:09:28,399 --> 00:09:30,640
the same nouns

242
00:09:30,640 --> 00:09:31,839
such that

243
00:09:31,839 --> 00:09:33,920
the first block of the message is equal

244
00:09:33,920 --> 00:09:36,560
will imply that the first block of the

245
00:09:36,560 --> 00:09:39,279
cipher text is also equal and the first

246
00:09:39,279 --> 00:09:41,440
if the first block of the message

247
00:09:41,440 --> 00:09:43,440
is different then

248
00:09:43,440 --> 00:09:45,680
the first block of the cipher text will

249
00:09:45,680 --> 00:09:49,399
also be different

250
00:09:50,399 --> 00:09:52,959
now given this type of schemes we can

251
00:09:52,959 --> 00:09:55,600
describe an attack similar to what we

252
00:09:55,600 --> 00:09:56,959
just described

253
00:09:56,959 --> 00:09:57,839
where

254
00:09:57,839 --> 00:09:59,920
the adversary will try to decrypt a

255
00:09:59,920 --> 00:10:02,800
random cipher text many times until they

256
00:10:02,800 --> 00:10:06,640
can guess the tag correctly

257
00:10:07,760 --> 00:10:09,920
then once they have done that

258
00:10:09,920 --> 00:10:12,399
they will ask for the encryption of the

259
00:10:12,399 --> 00:10:15,920
decrypted message after modifying

260
00:10:15,920 --> 00:10:17,920
some part of the message after the first

261
00:10:17,920 --> 00:10:18,880
block

262
00:10:18,880 --> 00:10:20,880
and they can observe whether the first

263
00:10:20,880 --> 00:10:23,040
block is equal or not

264
00:10:23,040 --> 00:10:25,200
and this will break the privacy of the

265
00:10:25,200 --> 00:10:26,160
scheme

266
00:10:26,160 --> 00:10:28,320
with about two to the part tau

267
00:10:28,320 --> 00:10:29,920
decryptions were taught with the text

268
00:10:29,920 --> 00:10:33,839
size and only one encryption

269
00:10:33,839 --> 00:10:36,959
if we were to apply this attack to cofb

270
00:10:36,959 --> 00:10:39,760
it require it will require to the bartel

271
00:10:39,760 --> 00:10:44,160
decryptions and tao is 128 bits

272
00:10:44,160 --> 00:10:47,440
however the security bound of cofp

273
00:10:47,440 --> 00:10:50,079
looks like a scheme that has a 64-bit

274
00:10:50,079 --> 00:10:54,000
tank so the question is can we

275
00:10:54,000 --> 00:10:56,560
find a similar attack on ceo of b

276
00:10:56,560 --> 00:10:59,200
that requires only 2 to the power 64

277
00:10:59,200 --> 00:11:01,839
decryptions

278
00:11:02,720 --> 00:11:04,160
so first we

279
00:11:04,160 --> 00:11:07,120
show in the paper some forgery attacks

280
00:11:07,120 --> 00:11:08,079
on

281
00:11:08,079 --> 00:11:11,200
the cufp schemes however

282
00:11:11,200 --> 00:11:13,600
all these three forgery attacks

283
00:11:13,600 --> 00:11:16,000
fall into the type of forgery attacks

284
00:11:16,000 --> 00:11:19,240
that cannot be used for such

285
00:11:19,240 --> 00:11:22,640
indistinguishability attack

286
00:11:22,640 --> 00:11:24,959
here we show one example which is like

287
00:11:24,959 --> 00:11:26,800
the best performing attack out of the

288
00:11:26,800 --> 00:11:28,320
three

289
00:11:28,320 --> 00:11:30,000
and in this attack

290
00:11:30,000 --> 00:11:31,760
the adversary will select another

291
00:11:31,760 --> 00:11:32,959
message

292
00:11:32,959 --> 00:11:34,480
random nuns

293
00:11:34,480 --> 00:11:36,480
and will encrypt them

294
00:11:36,480 --> 00:11:38,959
to get ciphertext and tag

295
00:11:38,959 --> 00:11:40,640
then

296
00:11:40,640 --> 00:11:42,800
they will try to guess the value of the

297
00:11:42,800 --> 00:11:44,240
mask

298
00:11:44,240 --> 00:11:46,320
and once they get the value of the mask

299
00:11:46,320 --> 00:11:49,440
they can apply a linear transformation

300
00:11:49,440 --> 00:11:52,000
and generate a forgery that will be

301
00:11:52,000 --> 00:11:53,920
decrypted successfully

302
00:11:53,920 --> 00:11:55,839
however because this is based on an

303
00:11:55,839 --> 00:11:58,240
answer that has already been used before

304
00:11:58,240 --> 00:12:00,560
the information from this forgery cannot

305
00:12:00,560 --> 00:12:01,920
be used

306
00:12:01,920 --> 00:12:03,279
to

307
00:12:03,279 --> 00:12:05,600
ask for another encryption query this

308
00:12:05,600 --> 00:12:07,120
attack requires

309
00:12:07,120 --> 00:12:08,560
one encryption

310
00:12:08,560 --> 00:12:12,320
and about 2 to the n over 2 decryptions

311
00:12:12,320 --> 00:12:15,519
and it has a success probability of q

312
00:12:15,519 --> 00:12:17,200
over qd

313
00:12:17,200 --> 00:12:20,079
over 2 to the n over 2.

314
00:12:20,079 --> 00:12:21,680
and this attack

315
00:12:21,680 --> 00:12:22,959
while it doesn't lead to

316
00:12:22,959 --> 00:12:25,120
indistinguishability problems

317
00:12:25,120 --> 00:12:27,360
it's important because it contradicts

318
00:12:27,360 --> 00:12:29,360
the security proof in the journal of

319
00:12:29,360 --> 00:12:31,440
cryptology 2020.

320
00:12:31,440 --> 00:12:33,600
so this shows an error in the security

321
00:12:33,600 --> 00:12:36,600
bound

322
00:12:40,000 --> 00:12:42,639
so in the paper we give a fourth attack

323
00:12:42,639 --> 00:12:44,639
which also breaks privacy with two

324
00:12:44,639 --> 00:12:46,480
encryption queries

325
00:12:46,480 --> 00:12:48,959
let's recall how cfp works in this

326
00:12:48,959 --> 00:12:50,399
diagram

327
00:12:50,399 --> 00:12:52,240
we can see that if we have a known

328
00:12:52,240 --> 00:12:54,720
plaintext encryption query then we know

329
00:12:54,720 --> 00:12:57,360
the blocks of m and also the blocks of c

330
00:12:57,360 --> 00:12:59,680
this gives us partial information about

331
00:12:59,680 --> 00:13:01,519
the internal state

332
00:13:01,519 --> 00:13:02,639
so

333
00:13:02,639 --> 00:13:03,519
from

334
00:13:03,519 --> 00:13:07,440
let's say m2 and c2 we can get the full

335
00:13:07,440 --> 00:13:10,160
output of the block cipher code before

336
00:13:10,160 --> 00:13:11,360
that

337
00:13:11,360 --> 00:13:12,160
and

338
00:13:12,160 --> 00:13:15,440
from m1 and c1 we can get half the input

339
00:13:15,440 --> 00:13:17,279
to the block cipher code

340
00:13:17,279 --> 00:13:18,560
and to get

341
00:13:18,560 --> 00:13:20,399
the full input and output of the block

342
00:13:20,399 --> 00:13:23,920
cipher code we have to guess the mask

343
00:13:23,920 --> 00:13:25,600
and this will be the basis of the attack

344
00:13:25,600 --> 00:13:28,560
so first we will

345
00:13:28,560 --> 00:13:30,880
call one encryption query with known

346
00:13:30,880 --> 00:13:32,399
plain text

347
00:13:32,399 --> 00:13:35,200
and we will select one block cipher code

348
00:13:35,200 --> 00:13:36,480
we will get

349
00:13:36,480 --> 00:13:38,720
all but half of the inputs and output

350
00:13:38,720 --> 00:13:40,959
bits

351
00:13:40,959 --> 00:13:43,199
and

352
00:13:43,199 --> 00:13:45,760
we will use this information to

353
00:13:45,760 --> 00:13:47,760
construct the forgery

354
00:13:47,760 --> 00:13:50,079
so in the first phase of the attack we

355
00:13:50,079 --> 00:13:51,920
initialize n

356
00:13:51,920 --> 00:13:53,680
with some random string

357
00:13:53,680 --> 00:13:56,240
and m with some random string

358
00:13:56,240 --> 00:13:57,199
we

359
00:13:57,199 --> 00:14:01,279
ask for the encryption of n and m

360
00:14:01,279 --> 00:14:06,000
and we initialize our forgery message to

361
00:14:06,000 --> 00:14:07,120
verb

362
00:14:07,120 --> 00:14:08,079
and

363
00:14:08,079 --> 00:14:11,120
our mask is to zero n over two

364
00:14:11,120 --> 00:14:13,199
zero bits

365
00:14:13,199 --> 00:14:17,319
in the second phase of the attack

366
00:14:17,519 --> 00:14:18,480
we

367
00:14:18,480 --> 00:14:19,920
set

368
00:14:19,920 --> 00:14:21,600
a variable v

369
00:14:21,600 --> 00:14:24,639
equal to the tag of the encryption query

370
00:14:24,639 --> 00:14:25,839
and

371
00:14:25,839 --> 00:14:27,440
from the message block and the

372
00:14:27,440 --> 00:14:29,519
corresponding cipher text

373
00:14:29,519 --> 00:14:32,480
we set p this way

374
00:14:32,480 --> 00:14:36,560
where l is our guess for the mask

375
00:14:36,560 --> 00:14:39,199
and we set the mask for the virtually to

376
00:14:39,199 --> 00:14:43,279
be the first n over two bits of v

377
00:14:43,279 --> 00:14:46,720
then we assign the nouns for the forgery

378
00:14:46,720 --> 00:14:49,360
in this way

379
00:14:49,519 --> 00:14:52,399
and the tag for the forgery is equal to

380
00:14:52,399 --> 00:14:54,079
v

381
00:14:54,079 --> 00:14:56,639
we select the associated data for the

382
00:14:56,639 --> 00:14:58,639
forgery and the cipher text for the

383
00:14:58,639 --> 00:15:00,800
forgery in this way

384
00:15:00,800 --> 00:15:03,199
and then we ask for the decryption

385
00:15:03,199 --> 00:15:05,440
if the decryption is successful

386
00:15:05,440 --> 00:15:07,360
this loop will stop

387
00:15:07,360 --> 00:15:09,519
if it's not successful we will update

388
00:15:09,519 --> 00:15:11,519
our guess for the mask

389
00:15:11,519 --> 00:15:16,000
and perform this operation one more time

390
00:15:17,120 --> 00:15:19,440
in the third phase after the forgery has

391
00:15:19,440 --> 00:15:21,199
been successful

392
00:15:21,199 --> 00:15:24,959
we extend the decrypted message with r n

393
00:15:24,959 --> 00:15:26,720
random bits

394
00:15:26,720 --> 00:15:29,360
and then we ask for the encryption using

395
00:15:29,360 --> 00:15:31,600
the nouns we used in the forgery

396
00:15:31,600 --> 00:15:33,600
and most likely these nouns would have

397
00:15:33,600 --> 00:15:35,519
never been used in an encryption query

398
00:15:35,519 --> 00:15:37,759
before

399
00:15:37,759 --> 00:15:40,720
and then we compare the first end bit

400
00:15:40,720 --> 00:15:43,920
of the encrypted ciphertext with the

401
00:15:43,920 --> 00:15:46,399
ciphertext of the forgery and based on

402
00:15:46,399 --> 00:15:47,920
that we can

403
00:15:47,920 --> 00:15:48,800
guess

404
00:15:48,800 --> 00:15:51,040
whether the oracle is outputting random

405
00:15:51,040 --> 00:15:51,920
bits

406
00:15:51,920 --> 00:15:55,519
or it's outputting

407
00:15:55,519 --> 00:15:58,800
the real encryptions

408
00:15:59,120 --> 00:16:01,519
and if we look at this main loop

409
00:16:01,519 --> 00:16:04,959
we will see that its success depends on

410
00:16:04,959 --> 00:16:07,199
guessing l correctly because everything

411
00:16:07,199 --> 00:16:09,440
else is known

412
00:16:09,440 --> 00:16:10,079
m

413
00:16:10,079 --> 00:16:10,800
c

414
00:16:10,800 --> 00:16:11,839
t

415
00:16:11,839 --> 00:16:13,440
all this is known

416
00:16:13,440 --> 00:16:14,880
so

417
00:16:14,880 --> 00:16:16,800
its success probability will depend on

418
00:16:16,800 --> 00:16:18,880
guessing l correctly

419
00:16:18,880 --> 00:16:23,839
and also we have a slight detail here

420
00:16:23,839 --> 00:16:26,959
which zero this zero vector that's added

421
00:16:26,959 --> 00:16:28,240
to n

422
00:16:28,240 --> 00:16:30,959
ideally n is equal to t so this zero

423
00:16:30,959 --> 00:16:32,000
vector

424
00:16:32,000 --> 00:16:33,839
will not be included it's just included

425
00:16:33,839 --> 00:16:37,040
here for correctness for cases where n

426
00:16:37,040 --> 00:16:38,800
is not equal to t

427
00:16:38,800 --> 00:16:41,440
and if n is not equal to t then this may

428
00:16:41,440 --> 00:16:43,199
not succeed and we will require more

429
00:16:43,199 --> 00:16:46,000
encryption queries to make it succeed

430
00:16:46,000 --> 00:16:47,279
but

431
00:16:47,279 --> 00:16:48,959
this

432
00:16:48,959 --> 00:16:51,759
extension of the attack is described

433
00:16:51,759 --> 00:16:54,079
partially in the paper and you can refer

434
00:16:54,079 --> 00:16:55,600
to it if you're interested but here

435
00:16:55,600 --> 00:16:57,360
we're talking about cases where n is

436
00:16:57,360 --> 00:16:59,360
equal to t

437
00:16:59,360 --> 00:17:03,120
so this vector has length zero so

438
00:17:03,120 --> 00:17:05,520
the nonce for the forgery is basically

439
00:17:05,520 --> 00:17:08,079
just p

440
00:17:08,559 --> 00:17:12,079
so if we guess l correctly

441
00:17:12,079 --> 00:17:15,198
the attack will succeed

442
00:17:15,520 --> 00:17:18,640
the probability of guessing l correctly

443
00:17:18,640 --> 00:17:21,839
is 1 over 2 to the n over 2

444
00:17:21,839 --> 00:17:24,160
which means in practice after to the

445
00:17:24,160 --> 00:17:27,599
power 64 for g attempts

446
00:17:27,599 --> 00:17:31,959
we would have guessed l correctly

447
00:17:32,480 --> 00:17:35,280
so some comments about this attack

448
00:17:35,280 --> 00:17:37,120
as we mentioned the attack is optimal

449
00:17:37,120 --> 00:17:38,240
when the non

450
00:17:38,240 --> 00:17:41,120
size is equal to n and if the nonsense

451
00:17:41,120 --> 00:17:43,520
size is less than and then more

452
00:17:43,520 --> 00:17:45,840
encryption queries are needed but for

453
00:17:45,840 --> 00:17:49,360
the nest version of gift cfp

454
00:17:49,360 --> 00:17:53,200
the nan's size is 120 bits

455
00:17:53,200 --> 00:17:55,280
and the attack works in a similar way to

456
00:17:55,280 --> 00:17:57,679
the attack on schemes with short tags

457
00:17:57,679 --> 00:18:01,520
that we described earlier

458
00:18:01,520 --> 00:18:02,320
so

459
00:18:02,320 --> 00:18:04,480
the attack on short on schemes with

460
00:18:04,480 --> 00:18:06,960
short tags

461
00:18:06,960 --> 00:18:08,480
of course it targets algorithm

462
00:18:08,480 --> 00:18:10,480
algorithms with short tags and it only

463
00:18:10,480 --> 00:18:12,400
requires decryption queries and one

464
00:18:12,400 --> 00:18:15,520
final encryption query while our attack

465
00:18:15,520 --> 00:18:16,799
here

466
00:18:16,799 --> 00:18:18,720
requires one encryption query at the

467
00:18:18,720 --> 00:18:20,720
beginning so in total two encryption

468
00:18:20,720 --> 00:18:22,240
queries

469
00:18:22,240 --> 00:18:24,160
also the structure and amount of

470
00:18:24,160 --> 00:18:26,480
possible forgeries that can be generated

471
00:18:26,480 --> 00:18:29,039
from each attack is different

472
00:18:29,039 --> 00:18:31,440
and the complexity here depends depends

473
00:18:31,440 --> 00:18:33,600
on the non-size and the mask size not on

474
00:18:33,600 --> 00:18:35,440
the tag sides

475
00:18:35,440 --> 00:18:36,960
nevertheless

476
00:18:36,960 --> 00:18:39,200
for sensitive application we can

477
00:18:39,200 --> 00:18:42,400
conclude from this attack that cofp

478
00:18:42,400 --> 00:18:44,960
offers little security over schemes with

479
00:18:44,960 --> 00:18:48,480
another two bit tanks

480
00:18:49,120 --> 00:18:50,000
so

481
00:18:50,000 --> 00:18:52,640
in other words

482
00:18:52,640 --> 00:18:55,679
practical implementations do not lose

483
00:18:55,679 --> 00:18:59,440
much by truncating the tag of cofp to 64

484
00:18:59,440 --> 00:19:01,760
bits

485
00:19:03,200 --> 00:19:06,000
so to conclude this presentation

486
00:19:06,000 --> 00:19:08,720
we have shown that cofp can be forged

487
00:19:08,720 --> 00:19:10,880
with about two to the n over two

488
00:19:10,880 --> 00:19:14,640
attempts and one encryption query

489
00:19:14,640 --> 00:19:16,480
we have shown that the tag size of c u

490
00:19:16,480 --> 00:19:19,919
of p offers offers little advantage when

491
00:19:19,919 --> 00:19:21,280
it's beyond

492
00:19:21,280 --> 00:19:22,799
n over two bits

493
00:19:22,799 --> 00:19:25,440
and we have shown

494
00:19:25,440 --> 00:19:27,039
that the attempt in the journal of

495
00:19:27,039 --> 00:19:29,840
cryptology 2020 to improve the security

496
00:19:29,840 --> 00:19:32,480
balance is inaccurate

497
00:19:32,480 --> 00:19:35,520
in related work enu and minamatsu showed

498
00:19:35,520 --> 00:19:37,840
that the forgery can also be done with

499
00:19:37,840 --> 00:19:39,840
two to the n over two encryptions and

500
00:19:39,840 --> 00:19:41,600
one for re-attempt

501
00:19:41,600 --> 00:19:43,200
and later

502
00:19:43,200 --> 00:19:44,640
inundate

503
00:19:44,640 --> 00:19:47,039
showed that privacy can be broken also

504
00:19:47,039 --> 00:19:49,039
with two to the n over two encryptions

505
00:19:49,039 --> 00:19:52,679
and zero decryptions

506
00:19:52,720 --> 00:19:54,880
one remaining open problem in the

507
00:19:54,880 --> 00:19:57,919
security analysis of cfp is improving

508
00:19:57,919 --> 00:20:00,000
the algorithmic factor in the security

509
00:20:00,000 --> 00:20:02,480
bound so all these attacks

510
00:20:02,480 --> 00:20:04,559
do not take advantage of this

511
00:20:04,559 --> 00:20:07,360
logarithmic factor

512
00:20:07,360 --> 00:20:09,440
but in the paper we discuss why this

513
00:20:09,440 --> 00:20:11,840
bound is likely artificial and cannot be

514
00:20:11,840 --> 00:20:15,439
improved but we leave

515
00:20:16,080 --> 00:20:18,400
proving a better bound

516
00:20:18,400 --> 00:20:21,840
out of the scope of this paper

517
00:20:21,919 --> 00:20:23,200
thank you for

518
00:20:23,200 --> 00:20:25,919
watching this video and

519
00:20:25,919 --> 00:20:27,600
hope to see you in the conference if you

520
00:20:27,600 --> 00:20:31,000
have any questions

