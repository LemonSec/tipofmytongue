1
00:00:07,680 --> 00:00:09,599
okay so this last station is fully

2
00:00:09,599 --> 00:00:10,639
online

3
00:00:10,639 --> 00:00:13,519
the first talk is a misuse free key

4
00:00:13,519 --> 00:00:15,440
recovery and distinguishing attacks

5
00:00:15,440 --> 00:00:18,160
against seven round ascon

6
00:00:18,160 --> 00:00:20,720
and this is a joint work with ragaven

7
00:00:20,720 --> 00:00:22,800
raroid kaiou

8
00:00:22,800 --> 00:00:25,680
sumanta sarkar and siwei sun and ragav

9
00:00:25,680 --> 00:00:28,240
will give the talks

10
00:00:28,240 --> 00:00:30,320
thank you patrick for the introduction

11
00:00:30,320 --> 00:00:31,199
uh

12
00:00:31,199 --> 00:00:33,760
so uh let me start the motivation of

13
00:00:33,760 --> 00:00:34,960
this work

14
00:00:34,960 --> 00:00:37,280
so uh escond is one of the winners of

15
00:00:37,280 --> 00:00:39,040
this user competition in lightweight

16
00:00:39,040 --> 00:00:42,160
applications category and it is also one

17
00:00:42,160 --> 00:00:44,160
of the finalists of the ongoing missed

18
00:00:44,160 --> 00:00:46,399
lightweight cryptography project

19
00:00:46,399 --> 00:00:48,559
now if you consider the designer

20
00:00:48,559 --> 00:00:51,280
security requirements of non-respecting

21
00:00:51,280 --> 00:00:53,600
setting and data limit of two to power

22
00:00:53,600 --> 00:00:54,960
64

23
00:00:54,960 --> 00:00:56,399
blocks per key

24
00:00:56,399 --> 00:00:58,800
then we find that the best known attacks

25
00:00:58,800 --> 00:01:01,520
only reach up to 6 out of 10 rounds of

26
00:01:01,520 --> 00:01:03,760
the initialization phase

27
00:01:03,760 --> 00:01:06,720
so uh in this work uh we present the

28
00:01:06,720 --> 00:01:08,799
first key recovery attacks and distinct

29
00:01:08,799 --> 00:01:11,760
results for seven round s-con aed

30
00:01:11,760 --> 00:01:15,280
without violating these two requirements

31
00:01:15,280 --> 00:01:16,799
so uh

32
00:01:16,799 --> 00:01:18,880
let me give a brief overview of the

33
00:01:18,880 --> 00:01:21,040
iscon authenticated encryption so how it

34
00:01:21,040 --> 00:01:23,920
works so it consists of four phases

35
00:01:23,920 --> 00:01:26,560
initialization associate data processing

36
00:01:26,560 --> 00:01:29,119
encryption and finalization during the

37
00:01:29,119 --> 00:01:31,680
initialization and finalizing phases

38
00:01:31,680 --> 00:01:34,400
the ascon round concentrate

39
00:01:34,400 --> 00:01:36,799
is used to rescue round four cpu with a

40
00:01:36,799 --> 00:01:39,360
round system is used to permit test it

41
00:01:39,360 --> 00:01:41,680
while during associated encryption the

42
00:01:41,680 --> 00:01:44,320
same round function with v rounds is

43
00:01:44,320 --> 00:01:45,200
used

44
00:01:45,200 --> 00:01:47,200
so now there are two variants of s-com

45
00:01:47,200 --> 00:01:50,479
as com128 and s-1280 the only difference

46
00:01:50,479 --> 00:01:52,320
is in the rate of value r

47
00:01:52,320 --> 00:01:54,640
and the number of rounds being

48
00:01:54,640 --> 00:01:57,439
so now we look into the round four cp

49
00:01:57,439 --> 00:01:59,280
it consists of three

50
00:01:59,280 --> 00:02:01,680
steps so the first is the round constant

51
00:02:01,680 --> 00:02:02,960
addition

52
00:02:02,960 --> 00:02:04,880
where an eight bit round constant is

53
00:02:04,880 --> 00:02:07,600
added to the second word of the state

54
00:02:07,600 --> 00:02:08,878
then we have the

55
00:02:08,878 --> 00:02:11,840
uh uh non-linear layer when five bit s

56
00:02:11,840 --> 00:02:16,239
box is applied uh to the 64 columns and

57
00:02:16,239 --> 00:02:18,480
then there is a linear layer pl

58
00:02:18,480 --> 00:02:21,200
where ah the rows are mixed among each

59
00:02:21,200 --> 00:02:23,760
other so for example uh this is given in

60
00:02:23,760 --> 00:02:26,400
the right side of the mixing system

61
00:02:26,400 --> 00:02:27,680
so now uh

62
00:02:27,680 --> 00:02:29,360
we can present one of the key recovery

63
00:02:29,360 --> 00:02:31,200
attack from over

64
00:02:31,200 --> 00:02:33,840
so it is based on the

65
00:02:33,840 --> 00:02:38,000
ideas of cuba tech so we start with our

66
00:02:38,000 --> 00:02:38,959
initial

67
00:02:38,959 --> 00:02:40,080
state

68
00:02:40,080 --> 00:02:41,920
we set the queue variables in the word

69
00:02:41,920 --> 00:02:44,400
three which are shown in green so there

70
00:02:44,400 --> 00:02:46,239
are 64 cube variables

71
00:02:46,239 --> 00:02:48,400
and the other nonce values we set as

72
00:02:48,400 --> 00:02:49,440
zero

73
00:02:49,440 --> 00:02:51,840
now uh we have the following observation

74
00:02:51,840 --> 00:02:53,519
so now if we look

75
00:02:53,519 --> 00:02:54,879
into the out

76
00:02:54,879 --> 00:02:57,200
state after seven rounds and if we look

77
00:02:57,200 --> 00:02:58,959
at the super quality of this 64

78
00:02:58,959 --> 00:03:00,560
dimensional queue

79
00:03:00,560 --> 00:03:03,599
then we can prove that uh this entirely

80
00:03:03,599 --> 00:03:06,239
depends on the equivalent keywords like

81
00:03:06,239 --> 00:03:11,120
k0 plus k64 k1 plus k65 like this

82
00:03:11,120 --> 00:03:13,200
and this observation can be used for

83
00:03:13,200 --> 00:03:14,959
lower number of rounds

84
00:03:14,959 --> 00:03:16,800
now uh

85
00:03:16,800 --> 00:03:18,560
stress here that uh these observations

86
00:03:18,560 --> 00:03:20,319
was already used

87
00:03:20,319 --> 00:03:22,319
uh by s con designers to attack up to

88
00:03:22,319 --> 00:03:24,720
six rounds but there was uh it was not

89
00:03:24,720 --> 00:03:26,400
known how to use

90
00:03:26,400 --> 00:03:30,080
this to mount attack on seven rounds

91
00:03:30,080 --> 00:03:31,920
so basically like how we can use this

92
00:03:31,920 --> 00:03:33,519
observation to recover this for quality

93
00:03:33,519 --> 00:03:35,280
for seven rounds

94
00:03:35,280 --> 00:03:36,640
so uh

95
00:03:36,640 --> 00:03:39,120
in our work uh to recover the superpoli

96
00:03:39,120 --> 00:03:42,239
for seven rounds we introduced a new

97
00:03:42,239 --> 00:03:44,080
technique which is partial polynomial

98
00:03:44,080 --> 00:03:46,319
multiplication

99
00:03:46,319 --> 00:03:47,519
so uh

100
00:03:47,519 --> 00:03:49,680
to give a high level idea of how this

101
00:03:49,680 --> 00:03:50,640
works

102
00:03:50,640 --> 00:03:53,280
so let's consider the algebraic normal

103
00:03:53,280 --> 00:03:55,920
form of the first uh column after round

104
00:03:55,920 --> 00:03:58,000
one so this looks like this in this

105
00:03:58,000 --> 00:03:59,120
table

106
00:03:59,120 --> 00:04:00,480
now

107
00:04:00,480 --> 00:04:02,959
let's say we multiply this column

108
00:04:02,959 --> 00:04:05,360
with this column

109
00:04:05,360 --> 00:04:07,840
then the algebraic degree is again one

110
00:04:07,840 --> 00:04:09,760
it never increases

111
00:04:09,760 --> 00:04:13,280
so basically uh we multiply

112
00:04:13,280 --> 00:04:15,360
this with any other columns then there

113
00:04:15,360 --> 00:04:17,040
is no increase in algebraic degree and

114
00:04:17,040 --> 00:04:18,959
they will never contribute to the 64

115
00:04:18,959 --> 00:04:20,399
dimensional q

116
00:04:20,399 --> 00:04:22,560
so the idea is we only need to look at

117
00:04:22,560 --> 00:04:25,040
very specific partial polynomials

118
00:04:25,040 --> 00:04:27,280
so we can reduce this table to something

119
00:04:27,280 --> 00:04:28,800
like this

120
00:04:28,800 --> 00:04:31,759
now uh we use uh this technique for to

121
00:04:31,759 --> 00:04:33,360
recover the super poly of seven round in

122
00:04:33,360 --> 00:04:34,720
two steps

123
00:04:34,720 --> 00:04:37,520
so first as a first step we enumerate

124
00:04:37,520 --> 00:04:40,000
all 32 dimensional cubes

125
00:04:40,000 --> 00:04:43,199
and we know uh these 32 dimensional gifs

126
00:04:43,199 --> 00:04:45,520
depends on 32 equivalent qubits we also

127
00:04:45,520 --> 00:04:47,919
know the information about that degree

128
00:04:47,919 --> 00:04:51,520
so we compute uh all layers propolis

129
00:04:51,520 --> 00:04:54,080
now they are all in partial form now we

130
00:04:54,080 --> 00:04:56,720
multiply all these 32 dimensional

131
00:04:56,720 --> 00:04:59,360
superpolis of these 32 dimensional tubes

132
00:04:59,360 --> 00:05:01,440
to recover the super poly of 64

133
00:05:01,440 --> 00:05:03,039
dimensional cube

134
00:05:03,039 --> 00:05:06,240
now once this super coil is recovered uh

135
00:05:06,240 --> 00:05:08,320
since we know uh this is dependent on 64

136
00:05:08,320 --> 00:05:09,600
given in

137
00:05:09,600 --> 00:05:12,240
so we can recover the equivalent key by

138
00:05:12,240 --> 00:05:14,479
knowing the value of the q7

139
00:05:14,479 --> 00:05:16,160
after recovering the equivalent keyword

140
00:05:16,160 --> 00:05:17,360
we can

141
00:05:17,360 --> 00:05:19,840
search for the master key which

142
00:05:19,840 --> 00:05:23,600
has only like 64 bits of entropy

143
00:05:23,600 --> 00:05:25,840
so in terms of attack complexities we

144
00:05:25,840 --> 00:05:28,160
require 64 data

145
00:05:28,160 --> 00:05:30,479
2 to the power 1 01 memory and 2 to the

146
00:05:30,479 --> 00:05:33,120
power 123 7 round s controls

147
00:05:33,120 --> 00:05:37,919
and you note that uh this memory 2.01 uh

148
00:05:37,919 --> 00:05:40,320
this is only used once let's say we are

149
00:05:40,320 --> 00:05:41,759
repeating the experiment again that we

150
00:05:41,759 --> 00:05:44,080
don't need this memory we only need to

151
00:05:44,080 --> 00:05:47,120
store the super policy

152
00:05:47,120 --> 00:05:48,880
okay so now

153
00:05:48,880 --> 00:05:52,479
we look into our distinguishes

154
00:05:52,479 --> 00:05:54,400
so the idea here is

155
00:05:54,400 --> 00:05:56,639
in the initial state we set

156
00:05:56,639 --> 00:05:59,039
the cube variables in word three and

157
00:05:59,039 --> 00:06:00,960
word four as equal

158
00:06:00,960 --> 00:06:02,160
and then

159
00:06:02,160 --> 00:06:04,000
we apply the xbox operation and then we

160
00:06:04,000 --> 00:06:07,120
find that the after the xbox are present

161
00:06:07,120 --> 00:06:09,520
word 2 and word 3 they are independent

162
00:06:09,520 --> 00:06:11,120
of the noise variables

163
00:06:11,120 --> 00:06:13,919
so we model this explicit behavior using

164
00:06:13,919 --> 00:06:16,240
the 3 subset adjacent property and then

165
00:06:16,240 --> 00:06:17,919
compute the upper bounds of the

166
00:06:17,919 --> 00:06:20,400
algebraic degree so we find that after

167
00:06:20,400 --> 00:06:23,039
seven rounds the maximum algebraically

168
00:06:23,039 --> 00:06:24,639
is at most 59

169
00:06:24,639 --> 00:06:26,639
so basically we can select

170
00:06:26,639 --> 00:06:30,160
uh any 60 cube variables out of 64 and

171
00:06:30,160 --> 00:06:32,479
this will give you a distinguishable

172
00:06:32,479 --> 00:06:34,160
also we find another interesting

173
00:06:34,160 --> 00:06:36,639
observation video so after two rounds we

174
00:06:36,639 --> 00:06:38,400
find a subset of queues

175
00:06:38,400 --> 00:06:40,560
which are always linear after round two

176
00:06:40,560 --> 00:06:43,280
so you can select any five out of six

177
00:06:43,280 --> 00:06:45,280
and we can reduce the data complexity

178
00:06:45,280 --> 00:06:49,039
for four rounds from two to four seven

179
00:06:50,000 --> 00:06:52,319
yeah so to conclude

180
00:06:52,319 --> 00:06:54,479
in this work uh we have given the first

181
00:06:54,479 --> 00:06:56,479
critically attack on seven rounds

182
00:06:56,479 --> 00:06:57,919
without violating

183
00:06:57,919 --> 00:07:00,400
the security requirements

184
00:07:00,400 --> 00:07:03,440
we improved the distinguishers for four

185
00:07:03,440 --> 00:07:05,199
five and six rounds

186
00:07:05,199 --> 00:07:06,720
and we present the first seven round

187
00:07:06,720 --> 00:07:08,639
distinguishes for s con in the ad

188
00:07:08,639 --> 00:07:10,720
setting

189
00:07:10,720 --> 00:07:13,960
thank you

190
00:07:18,319 --> 00:07:20,560
thank you for the talk does anyone has a

191
00:07:20,560 --> 00:07:22,880
question

192
00:07:23,599 --> 00:07:26,599
yes

193
00:07:35,840 --> 00:07:38,000
uh can we have a similar analysis with

194
00:07:38,000 --> 00:07:40,319
uh other cycles like

195
00:07:40,319 --> 00:07:41,840
the other ones what are the challenges

196
00:07:41,840 --> 00:07:43,840
you can find

197
00:07:43,840 --> 00:07:45,759
uh i think uh

198
00:07:45,759 --> 00:07:49,680
we can do it but uh certainly uh

199
00:07:49,680 --> 00:07:51,520
but yeah certainly you need to see like

200
00:07:51,520 --> 00:07:54,800
how the algebraic goes because for aes

201
00:07:54,800 --> 00:07:56,960
the s box is degree seven

202
00:07:56,960 --> 00:07:59,680
so we know like there's a rapid increase

203
00:07:59,680 --> 00:08:01,599
in the degree

204
00:08:01,599 --> 00:08:04,000
so it could be done but we are

205
00:08:04,000 --> 00:08:07,440
we have to look into the structure again

206
00:08:07,440 --> 00:08:09,599
okay

207
00:08:09,599 --> 00:08:12,960
can we reduce the memory

208
00:08:18,400 --> 00:08:21,680
so it's about the memory right

209
00:08:21,680 --> 00:08:23,360
yeah

210
00:08:23,360 --> 00:08:26,400
okay so i i think uh all the memory

211
00:08:26,400 --> 00:08:28,319
complexities we have given in this work

212
00:08:28,319 --> 00:08:31,120
they are in the worst cases so i mean we

213
00:08:31,120 --> 00:08:32,479
consider like

214
00:08:32,479 --> 00:08:34,399
that all the monomials happen in the

215
00:08:34,399 --> 00:08:35,919
algebraic neural form but that is not

216
00:08:35,919 --> 00:08:37,360
the case

217
00:08:37,360 --> 00:08:38,958
so that can certain that can be

218
00:08:38,958 --> 00:08:41,838
certainly reduced

219
00:08:42,240 --> 00:08:44,000
thank you okay

220
00:08:44,000 --> 00:08:45,920
does that okay anyone has another

221
00:08:45,920 --> 00:08:47,040
question

222
00:08:47,040 --> 00:08:47,839
no

223
00:08:47,839 --> 00:08:51,360
so let's exit the speaker again

224
00:08:52,880 --> 00:08:54,399
so i guess you can

225
00:08:54,399 --> 00:08:56,080
share your next slide

226
00:08:56,080 --> 00:08:57,120
yeah

227
00:08:57,120 --> 00:09:00,240
just give me one second

228
00:09:04,240 --> 00:09:07,040
yeah so it's visible now

229
00:09:07,040 --> 00:09:10,720
so uh this paper is diving deep into the

230
00:09:10,720 --> 00:09:13,360
weak keys of front reduced ascon and

231
00:09:13,360 --> 00:09:16,320
it's a told by ragavan rajoyt and uh

232
00:09:16,320 --> 00:09:17,519
sun

233
00:09:17,519 --> 00:09:20,399
sun anu sarkar and raga will also give

234
00:09:20,399 --> 00:09:21,680
the talk

235
00:09:21,680 --> 00:09:23,360
thanks again ah

236
00:09:23,360 --> 00:09:24,240
so yeah

237
00:09:24,240 --> 00:09:26,480
so yeah so the motivation behind this

238
00:09:26,480 --> 00:09:27,920
work is to

239
00:09:27,920 --> 00:09:29,920
somehow improve the

240
00:09:29,920 --> 00:09:31,519
previous ethics which i just given the

241
00:09:31,519 --> 00:09:34,320
last talk so if you see uh the previous

242
00:09:34,320 --> 00:09:36,800
talk the best key recovery attack came

243
00:09:36,800 --> 00:09:38,880
on several rounds structures studio 64

244
00:09:38,880 --> 00:09:41,360
data and tutorial 123 time

245
00:09:41,360 --> 00:09:44,000
and also the best distinguisher has 2 to

246
00:09:44,000 --> 00:09:46,640
power 60 data complexity

247
00:09:46,640 --> 00:09:48,720
so now the question is

248
00:09:48,720 --> 00:09:51,120
can we go further more or do we have any

249
00:09:51,120 --> 00:09:52,800
better key recovery and distributions

250
00:09:52,800 --> 00:09:55,279
for seven rounds

251
00:09:55,279 --> 00:09:57,600
yeah so we answer this question

252
00:09:57,600 --> 00:09:59,920
in a positive way here so for this we

253
00:09:59,920 --> 00:10:05,160
give the first weekly analysis of scone

254
00:10:06,399 --> 00:10:07,680
we have

255
00:10:07,680 --> 00:10:10,560
given several weekly distinguishes and

256
00:10:10,560 --> 00:10:12,880
most importantly for the first time we

257
00:10:12,880 --> 00:10:14,800
have given the practical distinguished

258
00:10:14,800 --> 00:10:16,480
for seven round discount

259
00:10:16,480 --> 00:10:18,640
and we also gave our two two key

260
00:10:18,640 --> 00:10:20,079
recovery attacks with different

261
00:10:20,079 --> 00:10:21,600
complexities

262
00:10:21,600 --> 00:10:22,480
and

263
00:10:22,480 --> 00:10:25,360
our key recover our attack to

264
00:10:25,360 --> 00:10:26,240
uh

265
00:10:26,240 --> 00:10:28,720
requires less than 2464 data which is

266
00:10:28,720 --> 00:10:29,680
still

267
00:10:29,680 --> 00:10:31,839
like the best till now in terms of data

268
00:10:31,839 --> 00:10:34,399
complexity for seven rounds so for this

269
00:10:34,399 --> 00:10:36,320
talk i will only focus on like the

270
00:10:36,320 --> 00:10:38,640
weekly distributions

271
00:10:38,640 --> 00:10:40,880
so uh let me compare the our

272
00:10:40,880 --> 00:10:43,600
distributions with the existing ones

273
00:10:43,600 --> 00:10:44,880
so

274
00:10:44,880 --> 00:10:48,000
for uh for all rounds starting from five

275
00:10:48,000 --> 00:10:49,279
to seven

276
00:10:49,279 --> 00:10:51,920
we are able to find some set of keys

277
00:10:51,920 --> 00:10:53,760
where we can decrease the

278
00:10:53,760 --> 00:10:56,959
data complexity drastically for example

279
00:10:56,959 --> 00:10:58,720
for five rounds the

280
00:10:58,720 --> 00:11:01,360
previous was with 2 to 4 16 data now we

281
00:11:01,360 --> 00:11:04,480
find some set of 2 for 11 keys

282
00:11:04,480 --> 00:11:08,240
where the data complexity is 2 power 9.

283
00:11:08,240 --> 00:11:10,240
same thing for six rounds we decreased

284
00:11:10,240 --> 00:11:13,600
from 2031 to 24 70.

285
00:11:13,600 --> 00:11:15,920
now for seven rounds

286
00:11:15,920 --> 00:11:18,720
we are able to find uh distinguished

287
00:11:18,720 --> 00:11:21,120
with complexity 2 to the power 33

288
00:11:21,120 --> 00:11:22,720
although this works for small fractional

289
00:11:22,720 --> 00:11:24,880
keys but this is still practical and

290
00:11:24,880 --> 00:11:27,600
also the under the distinction which is

291
00:11:27,600 --> 00:11:28,959
to develop

292
00:11:28,959 --> 00:11:31,120
uh data

293
00:11:31,120 --> 00:11:32,399
now let's see how

294
00:11:32,399 --> 00:11:33,920
uh how we came up with these

295
00:11:33,920 --> 00:11:35,519
distinguishes

296
00:11:35,519 --> 00:11:36,320
so

297
00:11:36,320 --> 00:11:38,880
the idea here is to find

298
00:11:38,880 --> 00:11:41,680
some conditions on the nozzles

299
00:11:41,680 --> 00:11:44,000
and keep key bits so that when you

300
00:11:44,000 --> 00:11:46,160
compute the algebraic tree in terms of

301
00:11:46,160 --> 00:11:49,600
vi this is very low

302
00:11:49,680 --> 00:11:51,200
so

303
00:11:51,200 --> 00:11:53,839
based on the ideas of just the previous

304
00:11:53,839 --> 00:11:55,360
stock

305
00:11:55,360 --> 00:11:57,279
the first condition they put was like

306
00:11:57,279 --> 00:12:00,079
they said vi equals vi plus 64.

307
00:12:00,079 --> 00:12:01,440
so in that case

308
00:12:01,440 --> 00:12:03,360
these two words y2 and y3 they became

309
00:12:03,360 --> 00:12:05,519
independent of the noise variable

310
00:12:05,519 --> 00:12:06,480
and

311
00:12:06,480 --> 00:12:08,639
they computed the algebraic degree which

312
00:12:08,639 --> 00:12:11,200
was 59 after seven rounds

313
00:12:11,200 --> 00:12:12,800
so now the question is how we can reduce

314
00:12:12,800 --> 00:12:14,079
it further

315
00:12:14,079 --> 00:12:15,920
so if you see uh

316
00:12:15,920 --> 00:12:18,800
in round one one two and word three they

317
00:12:18,800 --> 00:12:20,720
are independent of the nurse variables

318
00:12:20,720 --> 00:12:21,680
so

319
00:12:21,680 --> 00:12:23,279
can you make

320
00:12:23,279 --> 00:12:24,720
more words independent of one's

321
00:12:24,720 --> 00:12:26,720
variables or

322
00:12:26,720 --> 00:12:28,720
after round two can you make all these

323
00:12:28,720 --> 00:12:31,200
quadratic terms linear

324
00:12:31,200 --> 00:12:34,720
so what we do we can make this word

325
00:12:34,720 --> 00:12:36,800
word one after round one

326
00:12:36,800 --> 00:12:38,959
independent of the noise variables

327
00:12:38,959 --> 00:12:40,639
so this can be done

328
00:12:40,639 --> 00:12:42,560
by putting some additional constraints

329
00:12:42,560 --> 00:12:44,160
on the key bits as follows

330
00:12:44,160 --> 00:12:47,200
so if the index is from 56 to 59 we take

331
00:12:47,200 --> 00:12:49,200
the cubits complement of each other

332
00:12:49,200 --> 00:12:51,600
otherwise we take them equal

333
00:12:51,600 --> 00:12:53,680
now again we compute the

334
00:12:53,680 --> 00:12:56,240
bounds on the algebraic so now here we

335
00:12:56,240 --> 00:12:57,680
observe that

336
00:12:57,680 --> 00:12:59,839
for seven rounds earlier the degree was

337
00:12:59,839 --> 00:13:04,079
59 now it drastically reduced to 45

338
00:13:04,079 --> 00:13:05,440
so all this is still within the

339
00:13:05,440 --> 00:13:06,880
practical range

340
00:13:06,880 --> 00:13:09,200
also after two rounds we find that there

341
00:13:09,200 --> 00:13:11,440
is only one word word three which is

342
00:13:11,440 --> 00:13:14,079
which contains quadratic terms so

343
00:13:14,079 --> 00:13:16,399
if we put some conditions on this again

344
00:13:16,399 --> 00:13:18,800
and legalize it then we can reduce this

345
00:13:18,800 --> 00:13:22,160
degree from 45 to 32 again so this is

346
00:13:22,160 --> 00:13:24,480
what one of the distinct is

347
00:13:24,480 --> 00:13:27,279
so let me give one example of weekly

348
00:13:27,279 --> 00:13:30,160
distribution so we take our indexing set

349
00:13:30,160 --> 00:13:32,880
i so this is for this contains 46

350
00:13:32,880 --> 00:13:34,800
elements and corresponding to it we

351
00:13:34,800 --> 00:13:36,800
define a set of bps

352
00:13:36,800 --> 00:13:37,680
so

353
00:13:37,680 --> 00:13:40,480
we set k i equal k i plus 64

354
00:13:40,480 --> 00:13:43,040
if small i lies in big i so if we

355
00:13:43,040 --> 00:13:44,880
compute the number of keys

356
00:13:44,880 --> 00:13:47,360
then this is basically to the power 82

357
00:13:47,360 --> 00:13:49,920
now for each of these keys

358
00:13:49,920 --> 00:13:52,480
if we said vi

359
00:13:52,480 --> 00:13:55,600
equals to vi plus 64 then after seven

360
00:13:55,600 --> 00:13:57,680
knots we offset the keep some then it is

361
00:13:57,680 --> 00:13:59,440
always zero this is because the

362
00:13:59,440 --> 00:14:01,120
algebraic degree after

363
00:14:01,120 --> 00:14:04,399
uh 7 645 and we are here we have 46

364
00:14:04,399 --> 00:14:06,480
dimensional queue

365
00:14:06,480 --> 00:14:09,040
so now uh this indexing set is just once

366
00:14:09,040 --> 00:14:12,000
so we have to capture all possible

367
00:14:12,000 --> 00:14:14,079
sets so for that we introduce the notion

368
00:14:14,079 --> 00:14:16,639
of weaknesses so at a high level or like

369
00:14:16,639 --> 00:14:18,959
very informally this means we define

370
00:14:18,959 --> 00:14:21,920
some set of keys and if we pick any key

371
00:14:21,920 --> 00:14:22,959
from that

372
00:14:22,959 --> 00:14:25,120
and corresponding to that key there

373
00:14:25,120 --> 00:14:27,600
should access our the dimensional queue

374
00:14:27,600 --> 00:14:30,399
for which its degree is at most t minus

375
00:14:30,399 --> 00:14:33,360
one after our rounds

376
00:14:33,600 --> 00:14:35,279
so uh for this we give several

377
00:14:35,279 --> 00:14:37,920
properties of this space in our paper

378
00:14:37,920 --> 00:14:39,760
like having weight the relationship

379
00:14:39,760 --> 00:14:42,320
between d and d plus one and we also

380
00:14:42,320 --> 00:14:44,160
give combinatorial approach to find how

381
00:14:44,160 --> 00:14:47,279
to find the size of this space

382
00:14:47,279 --> 00:14:48,800
so just uh

383
00:14:48,800 --> 00:14:50,639
to end this stuff i will just focus on

384
00:14:50,639 --> 00:14:53,279
what are the number of weeklies for xcom

385
00:14:53,279 --> 00:14:56,000
so if you see for 5 round

386
00:14:56,000 --> 00:14:58,240
we can have b equal to 30 we find that

387
00:14:58,240 --> 00:14:59,279
almost

388
00:14:59,279 --> 00:15:01,040
every case of weak key because this

389
00:15:01,040 --> 00:15:03,040
covers the entire space the same thing

390
00:15:03,040 --> 00:15:05,760
happens for six rounds d equals 24 and

391
00:15:05,760 --> 00:15:06,880
we have

392
00:15:06,880 --> 00:15:10,320
almost all cases all keys are radius

393
00:15:10,320 --> 00:15:11,519
and

394
00:15:11,519 --> 00:15:14,959
for seven rounds we have around 24.6

395
00:15:14,959 --> 00:15:18,880
wikis and we also find a small subspec a

396
00:15:18,880 --> 00:15:22,160
small subset of this wkr

397
00:15:22,160 --> 00:15:23,040
which

398
00:15:23,040 --> 00:15:25,199
for which we can increase the value of

399
00:15:25,199 --> 00:15:26,720
data so

400
00:15:26,720 --> 00:15:30,880
this is uh from 9 to 33

401
00:15:30,959 --> 00:15:34,320
yeah so all the source codes for all the

402
00:15:34,320 --> 00:15:36,639
our analysis are given here so if anyone

403
00:15:36,639 --> 00:15:39,839
is interested they can verify your

404
00:15:39,839 --> 00:15:42,560
thank you very much

405
00:15:47,759 --> 00:15:52,759
thank you does anyone has a question

406
00:15:54,079 --> 00:15:55,920
no question

407
00:15:55,920 --> 00:15:57,120
no question

408
00:15:57,120 --> 00:15:59,600
online

409
00:16:00,560 --> 00:16:01,759
okay so

410
00:16:01,759 --> 00:16:04,880
i have a one question

411
00:16:05,199 --> 00:16:06,880
how would you

412
00:16:06,880 --> 00:16:09,600
improve the resistance of ascon against

413
00:16:09,600 --> 00:16:12,720
such weak as wiki attacks

414
00:16:12,720 --> 00:16:14,160
okay

415
00:16:14,160 --> 00:16:15,120
uh

416
00:16:15,120 --> 00:16:16,480
so

417
00:16:16,480 --> 00:16:19,440
i think one of them could be uh

418
00:16:19,440 --> 00:16:21,360
because it completely depends on the s

419
00:16:21,360 --> 00:16:22,720
box

420
00:16:22,720 --> 00:16:24,000
right

421
00:16:24,000 --> 00:16:24,959
so

422
00:16:24,959 --> 00:16:27,758
i mean uh

423
00:16:30,160 --> 00:16:32,320
or basically if you see

424
00:16:32,320 --> 00:16:35,279
if you so xbox is one thing and other

425
00:16:35,279 --> 00:16:36,480
thing is the place where we are adding

426
00:16:36,480 --> 00:16:39,040
the round constraint so let's say uh if

427
00:16:39,040 --> 00:16:41,600
we take that round constraints

428
00:16:41,600 --> 00:16:42,880
because there are four places where we

429
00:16:42,880 --> 00:16:44,240
are adding the

430
00:16:44,240 --> 00:16:45,600
where we have the conditions in the key

431
00:16:45,600 --> 00:16:46,480
bits

432
00:16:46,480 --> 00:16:49,040
so if let's say these four bits are zero

433
00:16:49,040 --> 00:16:51,040
instead of 1 then we can

434
00:16:51,040 --> 00:16:53,279
improv uh increase the number of weeks

435
00:16:53,279 --> 00:16:56,079
from 2 to power 1 160 to the power 120

436
00:16:56,079 --> 00:16:57,600
so let's see if we have more ones in the

437
00:16:57,600 --> 00:16:59,600
round constants and at the first round

438
00:16:59,600 --> 00:17:01,440
only then this will decrease the number

439
00:17:01,440 --> 00:17:03,839
of b keys

440
00:17:03,839 --> 00:17:05,199
we have to play with we have to play

441
00:17:05,199 --> 00:17:08,160
with round one and round one

442
00:17:08,160 --> 00:17:09,919
okay thank you very much

443
00:17:09,919 --> 00:17:11,039
okay thank you

444
00:17:11,039 --> 00:17:12,640
another question

445
00:17:12,640 --> 00:17:16,079
no so thank the speaker again

446
00:17:16,079 --> 00:17:19,319
thank you

447
00:17:19,760 --> 00:17:21,439
now

448
00:17:21,439 --> 00:17:24,720
you can share your slides

449
00:17:27,359 --> 00:17:28,480
hello

450
00:17:28,480 --> 00:17:31,120
hello yes hi can you guys hear me

451
00:17:31,120 --> 00:17:33,600
yes okay

452
00:17:33,600 --> 00:17:35,840
the next talk is uh exploring

453
00:17:35,840 --> 00:17:37,760
differential based distinguishers and

454
00:17:37,760 --> 00:17:40,160
forgeries for ascon and it's a joint

455
00:17:40,160 --> 00:17:43,360
work by david gero tomapera and quan

456
00:17:43,360 --> 00:17:44,320
quantan

457
00:17:44,320 --> 00:17:46,720
and quan will give the talk

458
00:17:46,720 --> 00:17:49,200
okay thank you for the introduction

459
00:17:49,200 --> 00:17:51,480
so uh i'll move on

460
00:17:51,480 --> 00:17:52,640
[Music]

461
00:17:52,640 --> 00:17:54,480
okay so for this for the for the

462
00:17:54,480 --> 00:17:56,720
motivation for this uh work itself

463
00:17:56,720 --> 00:17:58,240
basically we want to find automated

464
00:17:58,240 --> 00:18:00,400
methods to actually find uh differential

465
00:18:00,400 --> 00:18:02,880
characteristics for the ascon ae

466
00:18:02,880 --> 00:18:05,520
uh permutation and then afterwards we

467
00:18:05,520 --> 00:18:07,520
will use this automated method to

468
00:18:07,520 --> 00:18:09,039
actually look for characteristics that

469
00:18:09,039 --> 00:18:11,520
are very specific and suitable for the

470
00:18:11,520 --> 00:18:13,600
differential based distinguishes that

471
00:18:13,600 --> 00:18:15,440
we're going to have

472
00:18:15,440 --> 00:18:17,120
um so this is a brief introduction to

473
00:18:17,120 --> 00:18:19,200
ascon but i think i'll skip this slide

474
00:18:19,200 --> 00:18:21,760
because i believe rohit did a way much

475
00:18:21,760 --> 00:18:24,480
better job than what i'm going to do

476
00:18:24,480 --> 00:18:25,520
yeah

477
00:18:25,520 --> 00:18:27,200
okay so we'll move on to the search

478
00:18:27,200 --> 00:18:30,080
itself uh for the for the for the method

479
00:18:30,080 --> 00:18:31,919
that we have we basically just

480
00:18:31,919 --> 00:18:34,080
write in constraint programming using

481
00:18:34,080 --> 00:18:36,400
minizing and it is a bit based

482
00:18:36,400 --> 00:18:38,480
implementation so so that you can

483
00:18:38,480 --> 00:18:40,400
facilitate the interactions between the

484
00:18:40,400 --> 00:18:42,880
substitution layer and the linear layer

485
00:18:42,880 --> 00:18:44,400
and one of the benefits of actually

486
00:18:44,400 --> 00:18:46,000
using construct programming is that we

487
00:18:46,000 --> 00:18:47,760
can actually write our dedicated search

488
00:18:47,760 --> 00:18:50,480
strategies so for each of our

489
00:18:50,480 --> 00:18:52,480
use cases we can actually write a search

490
00:18:52,480 --> 00:18:54,320
strategy to actually speed up the search

491
00:18:54,320 --> 00:18:55,760
process

492
00:18:55,760 --> 00:18:58,240
so for the actual search itself we have

493
00:18:58,240 --> 00:19:00,960
a two-step procedure um the first one is

494
00:19:00,960 --> 00:19:02,559
basically just to take a single linear

495
00:19:02,559 --> 00:19:05,440
layer for the s-con and we try to map

496
00:19:05,440 --> 00:19:07,440
what are the good

497
00:19:07,440 --> 00:19:10,000
active xbox transitions for a single

498
00:19:10,000 --> 00:19:10,880
round

499
00:19:10,880 --> 00:19:13,039
so what we meant by basically what we

500
00:19:13,039 --> 00:19:15,280
want is that after the transition itself

501
00:19:15,280 --> 00:19:17,600
we don't want the number of active s

502
00:19:17,600 --> 00:19:19,360
boxes to explode

503
00:19:19,360 --> 00:19:21,360
so basically we limit the number of

504
00:19:21,360 --> 00:19:23,039
active s boxes that we have after the

505
00:19:23,039 --> 00:19:24,880
transition

506
00:19:24,880 --> 00:19:26,400
so once we have figured out all the

507
00:19:26,400 --> 00:19:29,520
possible good xbox patterns what we do

508
00:19:29,520 --> 00:19:31,280
is that we actually encode this

509
00:19:31,280 --> 00:19:33,200
particular pattern into the cpu program

510
00:19:33,200 --> 00:19:35,440
itself so the cv program will actually

511
00:19:35,440 --> 00:19:37,280
check um we will actually look for

512
00:19:37,280 --> 00:19:39,280
characteristics that actually satisfy

513
00:19:39,280 --> 00:19:43,200
this transition for one of the rounds

514
00:19:43,760 --> 00:19:46,400
so for the rest of this i want to like

515
00:19:46,400 --> 00:19:48,960
differentiate the permutations for the

516
00:19:48,960 --> 00:19:51,760
kid1 and the ankit scenario so for the

517
00:19:51,760 --> 00:19:53,760
kid permutation itself the analysis can

518
00:19:53,760 --> 00:19:55,440
only start from the first or last round

519
00:19:55,440 --> 00:19:56,880
because of the key additions and

520
00:19:56,880 --> 00:19:58,880
everything whereas on the unkit

521
00:19:58,880 --> 00:20:00,960
permutation the analysis can say start

522
00:20:00,960 --> 00:20:02,720
in the middle because we don't really

523
00:20:02,720 --> 00:20:06,240
have the key to like uh be there so

524
00:20:06,240 --> 00:20:07,919
basically once we start in the middle we

525
00:20:07,919 --> 00:20:08,960
can actually

526
00:20:08,960 --> 00:20:10,880
we can actually control some of the bits

527
00:20:10,880 --> 00:20:12,960
to ensure that certain constraints are

528
00:20:12,960 --> 00:20:15,919
already satisfied at the start so as to

529
00:20:15,919 --> 00:20:17,280
actually reduce the cost of the

530
00:20:17,280 --> 00:20:19,760
distinguisher overall so for the case of

531
00:20:19,760 --> 00:20:21,520
ascon itself it's actually a key to make

532
00:20:21,520 --> 00:20:23,520
it is a cheap permutation but we can

533
00:20:23,520 --> 00:20:25,039
also consider it in terms of a cheap

534
00:20:25,039 --> 00:20:27,120
communication by like just adding keys

535
00:20:27,120 --> 00:20:29,600
for each round

536
00:20:29,600 --> 00:20:30,720
so the first

537
00:20:30,720 --> 00:20:32,559
distinguisher that we have it's actually

538
00:20:32,559 --> 00:20:34,640
the limited birthday distinguisher so

539
00:20:34,640 --> 00:20:36,480
basically in this distinguisher what we

540
00:20:36,480 --> 00:20:38,240
are trying to do is that we want to find

541
00:20:38,240 --> 00:20:40,400
out the cause of say let's say if i have

542
00:20:40,400 --> 00:20:44,080
two plain text x 0 and x 1 that have a

543
00:20:44,080 --> 00:20:46,400
difference in d in

544
00:20:46,400 --> 00:20:48,960
and we want to ask is that like how many

545
00:20:48,960 --> 00:20:51,520
pairs we need in order for in let's say

546
00:20:51,520 --> 00:20:54,080
if i map them x0 and x1

547
00:20:54,080 --> 00:20:56,080
with the function f we will get a

548
00:20:56,080 --> 00:20:59,918
difference that is in the out

549
00:21:00,720 --> 00:21:04,000
so uh for the ankit uh permutation the

550
00:21:04,000 --> 00:21:05,440
limited buffer distribution this is

551
00:21:05,440 --> 00:21:07,919
actually how we build the distinguisher

552
00:21:07,919 --> 00:21:09,280
so we start off with a differential

553
00:21:09,280 --> 00:21:10,960
characteristic

554
00:21:10,960 --> 00:21:12,880
and then we propagate it backwards and

555
00:21:12,880 --> 00:21:15,039
forwards with probability one and this

556
00:21:15,039 --> 00:21:17,120
will give us two sets d in and d out for

557
00:21:17,120 --> 00:21:19,200
the input and the output

558
00:21:19,200 --> 00:21:21,520
and in some cases actually once we

559
00:21:21,520 --> 00:21:24,320
propagate the number of differences in d

560
00:21:24,320 --> 00:21:26,960
and dl are actually rather huge so

561
00:21:26,960 --> 00:21:28,799
if it's huge enough we are unable to

562
00:21:28,799 --> 00:21:30,559
actually compute the size which

563
00:21:30,559 --> 00:21:32,960
we will lead to to see whether uh the

564
00:21:32,960 --> 00:21:34,480
cost of a generic distinguisher is

565
00:21:34,480 --> 00:21:36,799
actually larger or smaller for it

566
00:21:36,799 --> 00:21:39,200
so in those cases we turn to looking at

567
00:21:39,200 --> 00:21:40,960
the complement of the sets that also

568
00:21:40,960 --> 00:21:42,240
sets themselves

569
00:21:42,240 --> 00:21:44,720
so we basically find a lower bound for

570
00:21:44,720 --> 00:21:47,600
the sets of the complement and this will

571
00:21:47,600 --> 00:21:49,520
give us an upper bound for the sets d in

572
00:21:49,520 --> 00:21:50,720
and out

573
00:21:50,720 --> 00:21:51,919
and with the upper bounds we can

574
00:21:51,919 --> 00:21:53,760
actually compute the cos of a generic

575
00:21:53,760 --> 00:21:55,840
distinguisher and we compare with the

576
00:21:55,840 --> 00:21:58,080
ones that we have and see whether we'll

577
00:21:58,080 --> 00:22:01,678
get this distinguisher out of it

578
00:22:01,840 --> 00:22:03,039
so the next one is a boomerang

579
00:22:03,039 --> 00:22:04,799
distinguisher over here i will just

580
00:22:04,799 --> 00:22:06,880
discuss again for the uh ankit

581
00:22:06,880 --> 00:22:09,600
permutation case so basically for us we

582
00:22:09,600 --> 00:22:11,600
have a four and a five round uh

583
00:22:11,600 --> 00:22:13,280
boomerang distinguisher

584
00:22:13,280 --> 00:22:15,520
so for the five round basically we use a

585
00:22:15,520 --> 00:22:18,080
upper two round trill and a lower three

586
00:22:18,080 --> 00:22:19,200
round through

587
00:22:19,200 --> 00:22:21,919
and for them we basically start ours we

588
00:22:21,919 --> 00:22:23,600
choose the starting point in the middle

589
00:22:23,600 --> 00:22:25,120
such that it's actually close to most of

590
00:22:25,120 --> 00:22:27,440
the constraints for the four so for the

591
00:22:27,440 --> 00:22:29,280
four rounds we actually start in between

592
00:22:29,280 --> 00:22:31,280
the round two and round three because

593
00:22:31,280 --> 00:22:34,400
there are basically four active s boxes

594
00:22:34,400 --> 00:22:36,640
around and for the five round case we

595
00:22:36,640 --> 00:22:38,400
start off between round three and round

596
00:22:38,400 --> 00:22:39,840
four because there are a lot of

597
00:22:39,840 --> 00:22:43,039
constraints at the round four

598
00:22:43,039 --> 00:22:45,600
so these are the results for the cheap

599
00:22:45,600 --> 00:22:47,360
permutation case

600
00:22:47,360 --> 00:22:48,720
arranged in percentage order of

601
00:22:48,720 --> 00:22:51,360
complexity

602
00:22:52,080 --> 00:22:54,159
and this is the results for the

603
00:22:54,159 --> 00:22:55,679
anti-permutation

604
00:22:55,679 --> 00:22:57,200
so basically in this case we can start

605
00:22:57,200 --> 00:22:58,559
in the middle so the generally the

606
00:22:58,559 --> 00:23:01,918
complexities are way lower

607
00:23:02,320 --> 00:23:04,320
and the next up is the forgery and the

608
00:23:04,320 --> 00:23:07,280
collision for the s1ae so in these cases

609
00:23:07,280 --> 00:23:09,360
we have to add additional constraints to

610
00:23:09,360 --> 00:23:11,679
our cp model and the reason is because

611
00:23:11,679 --> 00:23:13,120
we need differential characteristics

612
00:23:13,120 --> 00:23:15,760
that fulfill certain constraints because

613
00:23:15,760 --> 00:23:17,039
in the case of for example in the

614
00:23:17,039 --> 00:23:18,159
forgery

615
00:23:18,159 --> 00:23:20,400
we can only interact with for example in

616
00:23:20,400 --> 00:23:22,240
the case of ascon128 we can only

617
00:23:22,240 --> 00:23:24,400
interact with the first 64 bits

618
00:23:24,400 --> 00:23:25,360
of the

619
00:23:25,360 --> 00:23:26,320
state

620
00:23:26,320 --> 00:23:28,799
basically we just so so in order to have

621
00:23:28,799 --> 00:23:30,000
a forgery

622
00:23:30,000 --> 00:23:31,840
we have to have the differential

623
00:23:31,840 --> 00:23:33,120
characteristic to start with a

624
00:23:33,120 --> 00:23:35,679
difference that's in the first 64 bits

625
00:23:35,679 --> 00:23:38,000
and and refer output difference that is

626
00:23:38,000 --> 00:23:40,880
in the first 64-bit as well

627
00:23:40,880 --> 00:23:42,400
so with that we also tried multiple

628
00:23:42,400 --> 00:23:44,240
search strategies because the the

629
00:23:44,240 --> 00:23:46,159
strategies have to change based on the

630
00:23:46,159 --> 00:23:48,640
conditions available

631
00:23:48,640 --> 00:23:50,960
and these are the results that we have

632
00:23:50,960 --> 00:23:54,080
for forgery and collision

633
00:23:55,919 --> 00:23:58,480
so in summary we have used the cp to

634
00:23:58,480 --> 00:24:00,480
actually model the ascon permutation and

635
00:24:00,480 --> 00:24:02,080
it actually performs as well as the

636
00:24:02,080 --> 00:24:04,559
dedicated heuristics methods

637
00:24:04,559 --> 00:24:06,960
and next we also found new distinguishes

638
00:24:06,960 --> 00:24:08,640
for the sql population

639
00:24:08,640 --> 00:24:10,080
and as well as improve some of the

640
00:24:10,080 --> 00:24:12,159
existing forgery and collision results

641
00:24:12,159 --> 00:24:14,080
for ascon

642
00:24:14,080 --> 00:24:16,000
yeah so that's the end

643
00:24:16,000 --> 00:24:19,480
thank you very much

644
00:24:23,440 --> 00:24:26,000
thank you for the talk does anyone have

645
00:24:26,000 --> 00:24:28,480
a question

646
00:24:28,640 --> 00:24:30,080
no

647
00:24:30,080 --> 00:24:32,480
online

648
00:24:32,480 --> 00:24:33,440
no

649
00:24:33,440 --> 00:24:34,559
so

650
00:24:34,559 --> 00:24:37,760
why did you choose a cp solver instead

651
00:24:37,760 --> 00:24:41,760
of sat or milp once

652
00:24:41,919 --> 00:24:45,120
um okay so we choose a ct because mainly

653
00:24:45,120 --> 00:24:46,480
because we can actually play around with

654
00:24:46,480 --> 00:24:47,919
the search strategy first of all

655
00:24:47,919 --> 00:24:50,159
actually cp is a very easy program to

656
00:24:50,159 --> 00:24:52,720
actually like just encode the entire

657
00:24:52,720 --> 00:24:54,720
cipher itself and the next thing is that

658
00:24:54,720 --> 00:24:56,559
they have a wide range of like solvers

659
00:24:56,559 --> 00:24:58,240
and search strategies that we can play

660
00:24:58,240 --> 00:25:01,039
around with whereas in the case of like

661
00:25:01,039 --> 00:25:03,679
set itself we are often limited to just

662
00:25:03,679 --> 00:25:05,120
a few choices

663
00:25:05,120 --> 00:25:05,840
so

664
00:25:05,840 --> 00:25:07,360
yeah we basically just want to see

665
00:25:07,360 --> 00:25:09,840
what's the problem of the cp when it

666
00:25:09,840 --> 00:25:11,840
applies to s-con

667
00:25:11,840 --> 00:25:13,600
okay so so you mean that the search

668
00:25:13,600 --> 00:25:16,159
strategy is very important in the speed

669
00:25:16,159 --> 00:25:18,080
of your

670
00:25:18,080 --> 00:25:19,520
servers

671
00:25:19,520 --> 00:25:21,600
so so actually in this work itself we

672
00:25:21,600 --> 00:25:23,200
actually uh tried a lot of different

673
00:25:23,200 --> 00:25:25,919
solvers and a lot of strategies and

674
00:25:25,919 --> 00:25:27,600
actually we find out that actually the

675
00:25:27,600 --> 00:25:29,919
search strategies impact the

676
00:25:29,919 --> 00:25:32,400
uh search results very uh

677
00:25:32,400 --> 00:25:34,559
it's quite essential because for certain

678
00:25:34,559 --> 00:25:37,039
strategies if you don't put it nicely uh

679
00:25:37,039 --> 00:25:37,760
it's

680
00:25:37,760 --> 00:25:39,200
it will take like a few days to even

681
00:25:39,200 --> 00:25:41,440
produce a single result

682
00:25:41,440 --> 00:25:42,960
yeah

683
00:25:42,960 --> 00:25:45,919
so what was the best strategy

684
00:25:45,919 --> 00:25:46,960
um

685
00:25:46,960 --> 00:25:49,039
i don't really have it with me right now

686
00:25:49,039 --> 00:25:51,190
but i believe it's inside our paper

687
00:25:51,190 --> 00:25:53,520
[Laughter]

688
00:25:53,520 --> 00:25:57,360
i will edit it more carefully thank you

689
00:25:57,360 --> 00:26:00,960
does anyone have another question

690
00:26:00,960 --> 00:26:04,640
no thank the speaker again

691
00:26:04,640 --> 00:26:07,880
thank you

692
00:26:15,520 --> 00:26:18,720
okay so the next paper is bound for the

693
00:26:18,720 --> 00:26:20,799
security of ascon against linear and

694
00:26:20,799 --> 00:26:22,799
differential cryptanalysis

695
00:26:22,799 --> 00:26:24,559
it's a joint work with

696
00:26:24,559 --> 00:26:27,760
jonas aaron lasher florian mandel and

697
00:26:27,760 --> 00:26:30,240
maria echelle cedar

698
00:26:30,240 --> 00:26:33,279
okay and jonas will give the talk

699
00:26:33,279 --> 00:26:34,080
thank you very much for this

700
00:26:34,080 --> 00:26:36,000
introduction so yeah my name is johannes

701
00:26:36,000 --> 00:26:37,679
ericha and this is a joint work together

702
00:26:37,679 --> 00:26:39,760
with florian mendel and marie isada on

703
00:26:39,760 --> 00:26:41,600
bounds for security of s con against

704
00:26:41,600 --> 00:26:44,240
linear differential crypt analysis

705
00:26:44,240 --> 00:26:47,440
so the motivation behind this work

706
00:26:47,440 --> 00:26:49,360
comes from the increasing popularity of

707
00:26:49,360 --> 00:26:51,440
designs with weak alignments and larger

708
00:26:51,440 --> 00:26:54,159
state sizes like s-con for example

709
00:26:54,159 --> 00:26:56,080
for these designs if we look at linear

710
00:26:56,080 --> 00:26:57,840
differential cryptanalysis we usually

711
00:26:57,840 --> 00:27:00,080
see a gap between the provable bounds

712
00:27:00,080 --> 00:27:02,559
and the best known characteristics

713
00:27:02,559 --> 00:27:04,320
for the s-com permutation for example we

714
00:27:04,320 --> 00:27:06,159
only have bounds up to three rounds but

715
00:27:06,159 --> 00:27:08,080
we have found characteristics far beyond

716
00:27:08,080 --> 00:27:09,279
that

717
00:27:09,279 --> 00:27:11,039
these bounds are usually proven by means

718
00:27:11,039 --> 00:27:12,559
of mlp

719
00:27:12,559 --> 00:27:14,640
smt or constraint programming while we

720
00:27:14,640 --> 00:27:16,400
are searching for good characteristics

721
00:27:16,400 --> 00:27:19,360
using heuristic search tools

722
00:27:19,360 --> 00:27:21,279
we therefore were interested in using

723
00:27:21,279 --> 00:27:23,360
boolean satisfiability models to prove

724
00:27:23,360 --> 00:27:25,840
new bounds for this permutation

725
00:27:25,840 --> 00:27:27,760
uh we see recent developments in this

726
00:27:27,760 --> 00:27:30,000
field like encoding methods for

727
00:27:30,000 --> 00:27:32,960
characteristics proposed by solid allen

728
00:27:32,960 --> 00:27:35,279
we use these encoding methods to derive

729
00:27:35,279 --> 00:27:37,120
linear and differential models of the

730
00:27:37,120 --> 00:27:39,600
s-com permutation with which we are able

731
00:27:39,600 --> 00:27:41,520
to verify existing bounds very

732
00:27:41,520 --> 00:27:42,960
efficiently

733
00:27:42,960 --> 00:27:44,559
unfortunately though we're not able to

734
00:27:44,559 --> 00:27:46,720
derive new bounds for more rounds in a

735
00:27:46,720 --> 00:27:49,840
reasonable run time using these models

736
00:27:49,840 --> 00:27:51,520
we also see that there are different

737
00:27:51,520 --> 00:27:53,919
methods to constrain the maximum weight

738
00:27:53,919 --> 00:27:56,720
of s-box transitions within our model

739
00:27:56,720 --> 00:27:58,799
these alternative counter encodings

740
00:27:58,799 --> 00:28:00,960
provide optimizations in terms of the

741
00:28:00,960 --> 00:28:02,640
number of variables and clauses they are

742
00:28:02,640 --> 00:28:04,960
using and can therefore significantly

743
00:28:04,960 --> 00:28:07,039
impact the runtime for certain problem

744
00:28:07,039 --> 00:28:09,200
instances

745
00:28:09,200 --> 00:28:10,960
finally i also want to mention that

746
00:28:10,960 --> 00:28:13,039
there are generalized parallelization

747
00:28:13,039 --> 00:28:15,679
approaches used utilizing multiple

748
00:28:15,679 --> 00:28:17,840
subserver instances in parallel to solve

749
00:28:17,840 --> 00:28:19,919
a single sub problem

750
00:28:19,919 --> 00:28:21,679
we looked into some of these approaches

751
00:28:21,679 --> 00:28:24,320
as well but unfortunately did not see

752
00:28:24,320 --> 00:28:25,919
any runtime improvements for our

753
00:28:25,919 --> 00:28:28,240
specific case

754
00:28:28,240 --> 00:28:30,640
therefore we propose a new mineral

755
00:28:30,640 --> 00:28:32,559
parallelization approach with the goal

756
00:28:32,559 --> 00:28:34,080
of proving new bounds for the s-com

757
00:28:34,080 --> 00:28:35,919
permutation

758
00:28:35,919 --> 00:28:38,080
such an approach requires us to

759
00:28:38,080 --> 00:28:39,840
partition the search space into many

760
00:28:39,840 --> 00:28:42,159
independent problems which we can then

761
00:28:42,159 --> 00:28:44,320
solve in parallel utilizing multiple

762
00:28:44,320 --> 00:28:46,399
solver instances

763
00:28:46,399 --> 00:28:48,320
we chose to categorize our

764
00:28:48,320 --> 00:28:50,240
characteristics based on a so-called

765
00:28:50,240 --> 00:28:52,320
girdle pattern which we define as the

766
00:28:52,320 --> 00:28:54,559
specific s-box activity pattern within

767
00:28:54,559 --> 00:28:56,640
the round with the fewest active s-boxes

768
00:28:56,640 --> 00:28:58,960
for any given characteristic

769
00:28:58,960 --> 00:29:01,440
we get a partitioning from this idea by

770
00:29:01,440 --> 00:29:03,760
fixing a specific girdle pattern in a

771
00:29:03,760 --> 00:29:05,840
specific round in our model and

772
00:29:05,840 --> 00:29:10,080
repeating this for every possible case

773
00:29:10,559 --> 00:29:12,399
this approach

774
00:29:12,399 --> 00:29:14,080
enables us to

775
00:29:14,080 --> 00:29:16,399
propose further optimization steps

776
00:29:16,399 --> 00:29:18,399
like considering rotational symmetries

777
00:29:18,399 --> 00:29:20,559
within the permutation and use the

778
00:29:20,559 --> 00:29:22,640
necklace theory to therefore eliminate

779
00:29:22,640 --> 00:29:24,840
redundant checks in our search

780
00:29:24,840 --> 00:29:27,520
space we also consider shared

781
00:29:27,520 --> 00:29:29,440
preconditions among our problem

782
00:29:29,440 --> 00:29:30,960
instances

783
00:29:30,960 --> 00:29:32,720
which enables us to use models with

784
00:29:32,720 --> 00:29:35,039
reduced complexity to pre-filter our

785
00:29:35,039 --> 00:29:36,559
partitions

786
00:29:36,559 --> 00:29:39,279
and finally we can consider pools of

787
00:29:39,279 --> 00:29:41,919
similar problems as a single problem

788
00:29:41,919 --> 00:29:44,080
instance in order to reduce the overhead

789
00:29:44,080 --> 00:29:46,240
this approach has

790
00:29:46,240 --> 00:29:48,240
so with this new approach we are able to

791
00:29:48,240 --> 00:29:49,919
prove two new bounds for the

792
00:29:49,919 --> 00:29:52,320
s-compentation and that is that a single

793
00:29:52,320 --> 00:29:54,480
characteristic for four rounds of s-con

794
00:29:54,480 --> 00:29:57,360
must have at least 36 active s-boxes

795
00:29:57,360 --> 00:30:00,000
which was proven in around 600 cpu days

796
00:30:00,000 --> 00:30:01,919
as well as that a single characteristic

797
00:30:01,919 --> 00:30:04,080
for six rounds of s-con must have at

798
00:30:04,080 --> 00:30:06,640
least 54 active s-boxes

799
00:30:06,640 --> 00:30:08,320
this second bound was proven in around

800
00:30:08,320 --> 00:30:10,320
60 cpu days because we were able to

801
00:30:10,320 --> 00:30:12,399
utilize intermediate results from our

802
00:30:12,399 --> 00:30:14,960
previous four round bound

803
00:30:14,960 --> 00:30:16,640
so with these two new results we can

804
00:30:16,640 --> 00:30:19,360
derive three interesting bounds for the

805
00:30:19,360 --> 00:30:22,080
ascon family and that is a 6 and 800 per

806
00:30:22,080 --> 00:30:23,600
round pound

807
00:30:23,600 --> 00:30:25,360
if we look at the authenticated

808
00:30:25,360 --> 00:30:27,600
encryption scheme for example

809
00:30:27,600 --> 00:30:29,760
drd initialization and finalization

810
00:30:29,760 --> 00:30:32,080
phases both use 12 rounds of the

811
00:30:32,080 --> 00:30:34,720
permutation and there our new 12 round

812
00:30:34,720 --> 00:30:37,120
bound which is almost certainly not tied

813
00:30:37,120 --> 00:30:38,799
already provides an ample security

814
00:30:38,799 --> 00:30:42,159
margin for 128-bit security

815
00:30:42,159 --> 00:30:44,640
the six and eight round bounds on the

816
00:30:44,640 --> 00:30:46,480
other hand are relevant for example for

817
00:30:46,480 --> 00:30:47,919
the data processing phase of the

818
00:30:47,919 --> 00:30:50,480
authenticated encryption for this six

819
00:30:50,480 --> 00:30:52,559
round especially we would like to

820
00:30:52,559 --> 00:30:54,640
improve or extend this bound to a

821
00:30:54,640 --> 00:30:56,720
probability of two to a power of minus

822
00:30:56,720 --> 00:30:58,960
128

823
00:30:58,960 --> 00:31:01,440
if even if possible in order to provide

824
00:31:01,440 --> 00:31:03,519
an even stronger security argument for

825
00:31:03,519 --> 00:31:05,200
schemes using six rounds of the

826
00:31:05,200 --> 00:31:07,440
permutation

827
00:31:07,440 --> 00:31:09,360
other potential follow-up work would

828
00:31:09,360 --> 00:31:11,840
include applying this approach to other

829
00:31:11,840 --> 00:31:14,000
designs sharing a similar structure to

830
00:31:14,000 --> 00:31:17,120
s-con as well as utilizing the sub-model

831
00:31:17,120 --> 00:31:18,880
to potentially evaluate the clustering

832
00:31:18,880 --> 00:31:21,200
effect for specific cases or potential

833
00:31:21,200 --> 00:31:22,480
dependencies for differential

834
00:31:22,480 --> 00:31:24,320
propagations

835
00:31:24,320 --> 00:31:26,399
one more thing i want to mention is that

836
00:31:26,399 --> 00:31:29,200
during the rum session ragwendra rohit

837
00:31:29,200 --> 00:31:31,039
mentioned very interesting results for

838
00:31:31,039 --> 00:31:33,279
differential characteristics in s con

839
00:31:33,279 --> 00:31:35,360
which might enable us to prove an actual

840
00:31:35,360 --> 00:31:37,440
tight bound for the number of active s

841
00:31:37,440 --> 00:31:39,279
boxes over four rounds we will

842
00:31:39,279 --> 00:31:41,200
definitely have a look at this as well

843
00:31:41,200 --> 00:31:42,559
thank you very much for this very

844
00:31:42,559 --> 00:31:44,240
interesting talk

845
00:31:44,240 --> 00:31:45,360
so

846
00:31:45,360 --> 00:31:48,480
to summarize um we propose a manual

847
00:31:48,480 --> 00:31:50,159
parallelization approach based on

848
00:31:50,159 --> 00:31:52,320
boolean satisfiability models with which

849
00:31:52,320 --> 00:31:53,919
we're able to prove two new bounds for

850
00:31:53,919 --> 00:31:55,600
the s-com permutation

851
00:31:55,600 --> 00:31:57,200
these bounds are almost certainly not

852
00:31:57,200 --> 00:31:58,960
tight but they are enough to support

853
00:31:58,960 --> 00:32:01,039
trust in this permutation

854
00:32:01,039 --> 00:32:02,399
with this i want to thank you for your

855
00:32:02,399 --> 00:32:04,080
attention and if we have time and there

856
00:32:04,080 --> 00:32:07,360
any questions please feel free

857
00:32:12,799 --> 00:32:15,440
thank you for the talk

858
00:32:15,440 --> 00:32:17,679
question

859
00:32:17,679 --> 00:32:21,519
uh hi patrick i have a question

860
00:32:21,519 --> 00:32:23,919
yeah so thank you for your talk uh so

861
00:32:23,919 --> 00:32:27,120
for uh four rounds you mentioned like uh

862
00:32:27,120 --> 00:32:29,120
you did something around like 600 cpu

863
00:32:29,120 --> 00:32:30,000
days

864
00:32:30,000 --> 00:32:31,120
so

865
00:32:31,120 --> 00:32:33,039
in terms of like uh the activity

866
00:32:33,039 --> 00:32:34,000
patterns

867
00:32:34,000 --> 00:32:37,919
how many cases or did you consider

868
00:32:37,919 --> 00:32:38,880
um

869
00:32:38,880 --> 00:32:41,600
in total i think it was

870
00:32:41,600 --> 00:32:43,120
2 to the power of

871
00:32:43,120 --> 00:32:45,760
26 different patterns

872
00:32:45,760 --> 00:32:47,519
which we had to consider

873
00:32:47,519 --> 00:32:49,840
that excludes so these are all the

874
00:32:49,840 --> 00:32:52,080
rotational invariant patterns so

875
00:32:52,080 --> 00:32:54,799
excluding uh so accounting for the

876
00:32:54,799 --> 00:32:57,600
rotational symmetries

877
00:32:57,600 --> 00:32:58,480
okay

878
00:32:58,480 --> 00:33:00,559
okay uh one more question like uh you

879
00:33:00,559 --> 00:33:02,559
mentioned about gate drill patterns so

880
00:33:02,559 --> 00:33:04,559
how do you ensure that uh

881
00:33:04,559 --> 00:33:07,039
all the catered patterns cover like the

882
00:33:07,039 --> 00:33:11,039
entire space for your forums

883
00:33:11,039 --> 00:33:12,960
um yeah

884
00:33:12,960 --> 00:33:15,200
how we ensure that um

885
00:33:15,200 --> 00:33:16,000
so

886
00:33:16,000 --> 00:33:19,360
let me just move back here um

887
00:33:19,360 --> 00:33:22,159
the girdle patterns uh

888
00:33:22,159 --> 00:33:24,559
basically how do you put this uh very

889
00:33:24,559 --> 00:33:26,320
quickly

890
00:33:26,320 --> 00:33:28,159
they they mark the round with the fewest

891
00:33:28,159 --> 00:33:30,640
active s boxes at

892
00:33:30,640 --> 00:33:32,159
the activity pattern uh for

893
00:33:32,159 --> 00:33:33,600
characteristics with their viewers

894
00:33:33,600 --> 00:33:35,039
active s boxes

895
00:33:35,039 --> 00:33:36,960
uh and

896
00:33:36,960 --> 00:33:39,840
this means that

897
00:33:39,840 --> 00:33:41,120
going from

898
00:33:41,120 --> 00:33:43,840
fixing this

899
00:33:44,320 --> 00:33:46,399
fixing a specific pattern accounts for

900
00:33:46,399 --> 00:33:48,080
all characteristics sharing this

901
00:33:48,080 --> 00:33:50,080
specific pattern in the specific round

902
00:33:50,080 --> 00:33:51,200
right

903
00:33:51,200 --> 00:33:53,360
and if we cover all patterns in all

904
00:33:53,360 --> 00:33:56,080
rounds uh that means we will cover

905
00:33:56,080 --> 00:33:58,240
all uh the potential patterns up to a

906
00:33:58,240 --> 00:33:59,120
certain

907
00:33:59,120 --> 00:34:00,799
bond

908
00:34:00,799 --> 00:34:02,320
if that makes sense

909
00:34:02,320 --> 00:34:04,799
yeah okay

910
00:34:04,799 --> 00:34:07,760
yeah thank you

911
00:34:07,760 --> 00:34:12,000
does anyone has another question

912
00:34:12,159 --> 00:34:15,199
no okay so thank the speaker again

913
00:34:15,199 --> 00:34:18,439
thank you

914
00:34:26,159 --> 00:34:30,399
so the next stack is security of cofb

915
00:34:30,399 --> 00:34:32,839
against chosen ciphertext attacks and

916
00:34:32,839 --> 00:34:37,520
the talk is it's a work from by mustafa

917
00:34:37,520 --> 00:34:41,040
kairala and you will give the talk

918
00:34:41,040 --> 00:34:44,079
and thanks for the introduction so i

919
00:34:44,079 --> 00:34:45,679
will be talking about

920
00:34:45,679 --> 00:34:47,520
the security of cfp against chosen

921
00:34:47,520 --> 00:34:50,480
ciphertext attacks

922
00:34:51,440 --> 00:34:54,000
so ceo of b was designed by shakraporti

923
00:34:54,000 --> 00:34:57,200
veta minimazo and nandi in 2017

924
00:34:57,200 --> 00:34:59,839
and it stands for combined feedback and

925
00:34:59,839 --> 00:35:01,839
it is the basis for gifts u of p which

926
00:35:01,839 --> 00:35:03,040
is one of the finalists of the

927
00:35:03,040 --> 00:35:04,800
currentness lightweight cryptography

928
00:35:04,800 --> 00:35:07,200
project

929
00:35:07,520 --> 00:35:10,880
how cfp works is as in this diagram so

930
00:35:10,880 --> 00:35:13,599
first it absorbs the nouns and encrypts

931
00:35:13,599 --> 00:35:15,760
the nouns with a block cipher call to

932
00:35:15,760 --> 00:35:17,839
generate a half block mask and also the

933
00:35:17,839 --> 00:35:20,160
initial state of the encryption

934
00:35:20,160 --> 00:35:22,480
and after that it absorbs the associated

935
00:35:22,480 --> 00:35:24,160
data and the message through a combined

936
00:35:24,160 --> 00:35:27,280
feedback function and masks every time

937
00:35:27,280 --> 00:35:29,520
before applying the block cipher

938
00:35:29,520 --> 00:35:32,160
and in the case of this talk

939
00:35:32,160 --> 00:35:33,520
we don't really care about the block

940
00:35:33,520 --> 00:35:35,520
cipher even if the block cipher is

941
00:35:35,520 --> 00:35:37,839
replaced with a prf

942
00:35:37,839 --> 00:35:40,000
the analysis will still work

943
00:35:40,000 --> 00:35:40,800
and

944
00:35:40,800 --> 00:35:42,800
one few things we will need to observe

945
00:35:42,800 --> 00:35:45,680
here is first that the mask we use to

946
00:35:45,680 --> 00:35:47,920
mask the state at every time and also

947
00:35:47,920 --> 00:35:50,480
the initial state are almost the same so

948
00:35:50,480 --> 00:35:53,440
the mask is just half the initial state

949
00:35:53,440 --> 00:35:54,480
and

950
00:35:54,480 --> 00:35:57,520
if we look at the message part

951
00:35:57,520 --> 00:36:00,800
once we have a known message we can see

952
00:36:00,800 --> 00:36:03,839
the outputs of the block cipher here and

953
00:36:03,839 --> 00:36:05,040
the inputs

954
00:36:05,040 --> 00:36:06,880
we can see half the input to the block

955
00:36:06,880 --> 00:36:09,280
cipher

956
00:36:09,839 --> 00:36:12,800
so c of b has a birthday bound

957
00:36:12,800 --> 00:36:13,839
but

958
00:36:13,839 --> 00:36:15,520
usually schemes that have a birthday

959
00:36:15,520 --> 00:36:17,760
bound have a quadratic bound like this

960
00:36:17,760 --> 00:36:18,560
where

961
00:36:18,560 --> 00:36:20,720
when the amount of data encrypted is

962
00:36:20,720 --> 00:36:23,920
small it has almost n bit security but

963
00:36:23,920 --> 00:36:27,200
as the data increases

964
00:36:27,200 --> 00:36:29,359
it reaches personally bound

965
00:36:29,359 --> 00:36:30,320
while

966
00:36:30,320 --> 00:36:32,480
schemes that have a linear bound like

967
00:36:32,480 --> 00:36:34,960
this sigma over 2 to the n over 2

968
00:36:34,960 --> 00:36:37,599
usually have a small tag

969
00:36:37,599 --> 00:36:39,280
c of b has a

970
00:36:39,280 --> 00:36:41,680
linear bound like this but it has a n

971
00:36:41,680 --> 00:36:43,119
bit

972
00:36:43,119 --> 00:36:44,960
and there was an attempt in the journal

973
00:36:44,960 --> 00:36:46,880
of cryptology by the designers to

974
00:36:46,880 --> 00:36:50,240
improve this bound to a quadratic bound

975
00:36:50,240 --> 00:36:51,119
so

976
00:36:51,119 --> 00:36:52,079
this

977
00:36:52,079 --> 00:36:55,599
led to two questions first can we break

978
00:36:55,599 --> 00:36:58,000
u of p with uh

979
00:36:58,000 --> 00:37:00,160
this many forgeries the two to the n

980
00:37:00,160 --> 00:37:03,040
over two over n which is claimed by the

981
00:37:03,040 --> 00:37:04,079
designer

982
00:37:04,079 --> 00:37:06,560
without any encryption queries

983
00:37:06,560 --> 00:37:09,119
and can we show that c of b because it

984
00:37:09,119 --> 00:37:11,599
has this linear bound behaves like a

985
00:37:11,599 --> 00:37:14,880
scheme with a shorter tank

986
00:37:15,440 --> 00:37:17,440
and the answer

987
00:37:17,440 --> 00:37:20,640
to both questions is yes but with some

988
00:37:20,640 --> 00:37:22,560
caveats so

989
00:37:22,560 --> 00:37:24,480
we can show attacks

990
00:37:24,480 --> 00:37:26,880
that work with two to the n over two

991
00:37:26,880 --> 00:37:29,200
forgeries with negligible amount of

992
00:37:29,200 --> 00:37:31,200
encryption queries but there is a

993
00:37:31,200 --> 00:37:33,119
logarithmic factor so it's only two to

994
00:37:33,119 --> 00:37:35,359
the n over two no over n

995
00:37:35,359 --> 00:37:36,400
and

996
00:37:36,400 --> 00:37:38,480
we can show that c of b

997
00:37:38,480 --> 00:37:40,800
especially gift c of v has behavior that

998
00:37:40,800 --> 00:37:42,640
looks like a scheme with an n over two

999
00:37:42,640 --> 00:37:45,118
bit tank

1000
00:37:45,440 --> 00:37:47,599
so to show the second question we need

1001
00:37:47,599 --> 00:37:49,720
to consider

1002
00:37:49,720 --> 00:37:51,520
indistinguishability when forgeries are

1003
00:37:51,520 --> 00:37:53,599
allowed and here it's a bit of a misuse

1004
00:37:53,599 --> 00:37:55,680
scenario where

1005
00:37:55,680 --> 00:37:57,640
we perform encryption like any

1006
00:37:57,640 --> 00:38:00,160
indistinguishability game but

1007
00:38:00,160 --> 00:38:02,000
when we do decryption we always do the

1008
00:38:02,000 --> 00:38:03,760
real decryption so

1009
00:38:03,760 --> 00:38:06,240
decryption will always perform

1010
00:38:06,240 --> 00:38:08,880
normal decryption but we still need to

1011
00:38:08,880 --> 00:38:10,640
distinguish the encryption from a random

1012
00:38:10,640 --> 00:38:12,960
org

1013
00:38:13,280 --> 00:38:14,880
why we do this because there was a

1014
00:38:14,880 --> 00:38:16,960
generic attack on schemes with short

1015
00:38:16,960 --> 00:38:19,520
tags proposed on the east lwc forum by

1016
00:38:19,520 --> 00:38:20,960
alexander mesh

1017
00:38:20,960 --> 00:38:21,760
where

1018
00:38:21,760 --> 00:38:23,090
the adversary will

1019
00:38:23,090 --> 00:38:24,640
[Music]

1020
00:38:24,640 --> 00:38:26,640
try to guess attack corresponding to a

1021
00:38:26,640 --> 00:38:27,920
fresh nonce

1022
00:38:27,920 --> 00:38:28,960
and then

1023
00:38:28,960 --> 00:38:31,280
once the forgery succeeds he will be

1024
00:38:31,280 --> 00:38:33,440
able to observe some information about

1025
00:38:33,440 --> 00:38:36,160
the key stream of that nuns

1026
00:38:36,160 --> 00:38:38,079
at a later stage if this nonce has not

1027
00:38:38,079 --> 00:38:39,680
been used before

1028
00:38:39,680 --> 00:38:41,440
he would observe a message encrypted by

1029
00:38:41,440 --> 00:38:43,280
the same nonce and would be able to

1030
00:38:43,280 --> 00:38:44,960
partially decrypt it

1031
00:38:44,960 --> 00:38:46,400
and in this

1032
00:38:46,400 --> 00:38:47,440
attack

1033
00:38:47,440 --> 00:38:49,680
he has not violated the

1034
00:38:49,680 --> 00:38:52,640
requirements for to be non-respecting

1035
00:38:52,640 --> 00:38:54,160
and this attack will depend on the tax

1036
00:38:54,160 --> 00:38:56,240
size so if the tax show tax size is

1037
00:38:56,240 --> 00:38:58,640
short then the attack will work with low

1038
00:38:58,640 --> 00:39:01,640
complexity

1039
00:39:01,839 --> 00:39:04,720
so we can show a similar attack on ceo

1040
00:39:04,720 --> 00:39:07,680
of p which requires two encryptions

1041
00:39:07,680 --> 00:39:09,680
so first we

1042
00:39:09,680 --> 00:39:12,720
have a known plaintext query

1043
00:39:12,720 --> 00:39:15,280
and as i said earlier given this

1044
00:39:15,280 --> 00:39:16,960
non-plain text query

1045
00:39:16,960 --> 00:39:19,119
we can observe

1046
00:39:19,119 --> 00:39:20,800
2 to the n over 2 candidates to the

1047
00:39:20,800 --> 00:39:22,720
input and output of the block ciphers so

1048
00:39:22,720 --> 00:39:24,560
we can observe the

1049
00:39:24,560 --> 00:39:27,119
output deterministically and we can

1050
00:39:27,119 --> 00:39:29,200
observe the input masked by an n over 2

1051
00:39:29,200 --> 00:39:32,079
bit so we have to guess these bits

1052
00:39:32,079 --> 00:39:33,920
so we will guess these

1053
00:39:33,920 --> 00:39:36,000
unknown bits and for every time this

1054
00:39:36,000 --> 00:39:38,160
will give us a candidate for

1055
00:39:38,160 --> 00:39:40,720
p and candidate for v and we can use

1056
00:39:40,720 --> 00:39:42,720
that as a nonce and then

1057
00:39:42,720 --> 00:39:45,359
construct a forgery accordingly and once

1058
00:39:45,359 --> 00:39:46,960
we have guessed the mass correctly the

1059
00:39:46,960 --> 00:39:48,720
forgery will succeed

1060
00:39:48,720 --> 00:39:49,920
and

1061
00:39:49,920 --> 00:39:51,920
we will have a fresh nonce that has no

1062
00:39:51,920 --> 00:39:54,480
has not been encrypted before

1063
00:39:54,480 --> 00:39:56,880
once the forgery succeeds

1064
00:39:56,880 --> 00:39:59,040
we can then encrypt a message with these

1065
00:39:59,040 --> 00:40:02,079
freshness with a different message and

1066
00:40:02,079 --> 00:40:04,480
we will be able to distinguish from

1067
00:40:04,480 --> 00:40:07,200
random bits

1068
00:40:08,240 --> 00:40:09,200
so

1069
00:40:09,200 --> 00:40:11,359
this attack the bet is optimal when the

1070
00:40:11,359 --> 00:40:15,200
node size is n because we assign p to n

1071
00:40:15,200 --> 00:40:18,079
and if n is less than n bits then we

1072
00:40:18,079 --> 00:40:19,680
will have problems by

1073
00:40:19,680 --> 00:40:21,760
doing this assignment and we will need

1074
00:40:21,760 --> 00:40:26,800
more encryption queries to satisfy this

1075
00:40:26,800 --> 00:40:27,760
and

1076
00:40:27,760 --> 00:40:29,680
the attack resembles the attack on short

1077
00:40:29,680 --> 00:40:31,680
text it just needs one extra encryption

1078
00:40:31,680 --> 00:40:33,280
at the beginning

1079
00:40:33,280 --> 00:40:34,480
so

1080
00:40:34,480 --> 00:40:36,480
we do one encryption and then two to the

1081
00:40:36,480 --> 00:40:38,160
n over two decryptions and then 1

1082
00:40:38,160 --> 00:40:40,640
encryption

1083
00:40:42,240 --> 00:40:44,480
we have also in the paper other forgery

1084
00:40:44,480 --> 00:40:46,560
attacks on ceo of p

1085
00:40:46,560 --> 00:40:49,839
however these attacks

1086
00:40:50,640 --> 00:40:52,079
cannot be translated to

1087
00:40:52,079 --> 00:40:53,920
indistinguishability

1088
00:40:53,920 --> 00:40:55,680
but

1089
00:40:55,680 --> 00:40:57,280
they they are

1090
00:40:57,280 --> 00:40:59,440
can be used to show that

1091
00:40:59,440 --> 00:41:01,440
the security bound from journal of

1092
00:41:01,440 --> 00:41:05,880
cryptology 2020 is inaccurate

1093
00:41:06,400 --> 00:41:08,400
so to sum up

1094
00:41:08,400 --> 00:41:10,720
c of p can be forged with 2 to the n

1095
00:41:10,720 --> 00:41:14,960
over 2 for 3 attempts and 1 encryption

1096
00:41:14,960 --> 00:41:16,560
the indistinguishability attack we

1097
00:41:16,560 --> 00:41:18,880
proposed is optimal when the nonce is n

1098
00:41:18,880 --> 00:41:23,200
bit which is the case for gift c of p

1099
00:41:23,200 --> 00:41:25,680
and the text size of c of p offers

1100
00:41:25,680 --> 00:41:28,160
little advantage over n over two bits so

1101
00:41:28,160 --> 00:41:30,319
we can probably safely reduce the text

1102
00:41:30,319 --> 00:41:32,079
size to n over two bits without changing

1103
00:41:32,079 --> 00:41:35,440
the security so much and unfortunately

1104
00:41:35,440 --> 00:41:36,370
the attempt to

1105
00:41:36,370 --> 00:41:37,920
[Music]

1106
00:41:37,920 --> 00:41:39,839
improve the security bound is not

1107
00:41:39,839 --> 00:41:42,240
correct

1108
00:41:43,119 --> 00:41:45,040
an open problem is that we still have

1109
00:41:45,040 --> 00:41:46,880
the logarithmic factor in the security

1110
00:41:46,880 --> 00:41:48,800
bound but in the paper we discuss some

1111
00:41:48,800 --> 00:41:50,240
reasons why

1112
00:41:50,240 --> 00:41:52,720
it's probably artificial but we believe

1113
00:41:52,720 --> 00:41:56,799
we leave proving this for other works

1114
00:41:57,119 --> 00:41:58,720
thanks for

1115
00:41:58,720 --> 00:42:00,720
watching and i'd like to thank the

1116
00:42:00,720 --> 00:42:03,440
reviewers and titsui veteran community

1117
00:42:03,440 --> 00:42:04,960
and the rest of the gifts ufb for

1118
00:42:04,960 --> 00:42:06,960
commencing these people

1119
00:42:06,960 --> 00:42:09,280
thanks

1120
00:42:14,480 --> 00:42:19,599
thank you does anyone have a question

1121
00:42:20,160 --> 00:42:22,720
no so we will thank the speaker again

1122
00:42:22,720 --> 00:42:27,640
and move to the last talk of the session

1123
00:42:36,480 --> 00:42:38,560
okay so the last talk is linear

1124
00:42:38,560 --> 00:42:40,560
cryptanalysis

1125
00:42:40,560 --> 00:42:45,680
of three a e a ds with gift 128 as

1126
00:42:45,680 --> 00:42:47,760
underlying primitives and it's a joint

1127
00:42:47,760 --> 00:42:50,640
work with the ling song wae wong making

1128
00:42:50,640 --> 00:42:53,920
wrong and ling song will give the talk

1129
00:42:53,920 --> 00:42:54,960
oh

1130
00:42:54,960 --> 00:42:57,839
thank you for the introduction

1131
00:42:57,839 --> 00:43:00,000
the name of the talk is linear

1132
00:43:00,000 --> 00:43:04,800
cryptanalyze or three edu is gift 128

1133
00:43:04,800 --> 00:43:08,640
has underlying primitives

1134
00:43:08,800 --> 00:43:11,440
linear cryptanalyze is one of the most

1135
00:43:11,440 --> 00:43:14,079
fundamental methods to evaluate the

1136
00:43:14,079 --> 00:43:17,839
security of significant primitives

1137
00:43:17,839 --> 00:43:21,200
compared to differential cryptanalyze we

1138
00:43:21,200 --> 00:43:23,280
found that linear method is more

1139
00:43:23,280 --> 00:43:26,800
suitable to the analyze of the aad since

1140
00:43:26,800 --> 00:43:30,160
it works under the non-plantex attack

1141
00:43:30,160 --> 00:43:31,200
setting

1142
00:43:31,200 --> 00:43:33,200
and we will see

1143
00:43:33,200 --> 00:43:35,599
some aad

1144
00:43:35,599 --> 00:43:37,079
works in

1145
00:43:37,079 --> 00:43:39,599
non-respecting scenario so we think

1146
00:43:39,599 --> 00:43:42,800
linear method is more suitable

1147
00:43:42,800 --> 00:43:45,839
this paper aims to evaluate the security

1148
00:43:45,839 --> 00:43:49,440
of some aed with linear method

1149
00:43:49,440 --> 00:43:51,760
the contribution can be divided into

1150
00:43:51,760 --> 00:43:54,400
four parts firstly

1151
00:43:54,400 --> 00:43:57,359
we create specialized set of pro set

1152
00:43:57,359 --> 00:43:59,440
problems for the search of linear

1153
00:43:59,440 --> 00:44:01,839
distinguishers coordinate with the

1154
00:44:01,839 --> 00:44:03,760
attack setting

1155
00:44:03,760 --> 00:44:06,880
this is method we improve linear attacks

1156
00:44:06,880 --> 00:44:10,319
on gift clfb and sunday gifts

1157
00:44:10,319 --> 00:44:12,640
thirdly they proposed the first

1158
00:44:12,640 --> 00:44:16,800
crippling analytic result on hyena also

1159
00:44:16,800 --> 00:44:19,520
they provide improved linear attack on

1160
00:44:19,520 --> 00:44:22,920
gift 128.

1161
00:44:23,599 --> 00:44:27,119
the first target is give cofb

1162
00:44:27,119 --> 00:44:30,880
since mustafa just just gave the scheme

1163
00:44:30,880 --> 00:44:36,079
of cofb only skip some detail

1164
00:44:36,079 --> 00:44:36,960
the

1165
00:44:36,960 --> 00:44:40,000
the uk function in the case of give the

1166
00:44:40,000 --> 00:44:43,040
cofb i refer to as the separate gift

1167
00:44:43,040 --> 00:44:45,760
128.

1168
00:44:45,760 --> 00:44:48,720
the ciphertext generating phase explores

1169
00:44:48,720 --> 00:44:51,520
the feedback function g which is a

1170
00:44:51,520 --> 00:44:57,280
linear function over the 128 bit input

1171
00:44:58,160 --> 00:45:00,880
we target the encryption encryption

1172
00:45:00,880 --> 00:45:03,520
functions in the message

1173
00:45:03,520 --> 00:45:06,800
presenting this highlighted in life

1174
00:45:06,800 --> 00:45:07,760
the

1175
00:45:07,760 --> 00:45:10,560
property of the primitive put some

1176
00:45:10,560 --> 00:45:13,520
restrictions on the linear approximation

1177
00:45:13,520 --> 00:45:15,680
in the linear attack

1178
00:45:15,680 --> 00:45:18,640
firstly since they designers claim

1179
00:45:18,640 --> 00:45:22,720
64-bit and dcpa security under the

1180
00:45:22,720 --> 00:45:25,599
non-respecting scenario so the data

1181
00:45:25,599 --> 00:45:28,720
complexity of a valid attack on give the

1182
00:45:28,720 --> 00:45:33,599
cofb should be lower than 2 to the 6a4

1183
00:45:33,599 --> 00:45:36,640
secondly note that the most significant

1184
00:45:36,640 --> 00:45:40,720
64 bits of the input for the ek function

1185
00:45:40,720 --> 00:45:44,400
are masked by the value l and l depends

1186
00:45:44,400 --> 00:45:46,800
on the value of n and k

1187
00:45:46,800 --> 00:45:49,680
so l is unknown therefore the

1188
00:45:49,680 --> 00:45:52,079
verification of the linear relation

1189
00:45:52,079 --> 00:45:54,319
should be irrelevant with the most

1190
00:45:54,319 --> 00:45:56,960
significant 64 bits

1191
00:45:56,960 --> 00:45:59,920
so to accomplish the surge of linear

1192
00:45:59,920 --> 00:46:01,920
approximations fulfilling this

1193
00:46:01,920 --> 00:46:03,520
restriction

1194
00:46:03,520 --> 00:46:06,480
we attempt to encode it with boolean

1195
00:46:06,480 --> 00:46:09,040
equations

1196
00:46:09,920 --> 00:46:12,720
we create a specialized set problem

1197
00:46:12,720 --> 00:46:15,900
targeting the conditional linear trial

1198
00:46:15,900 --> 00:46:17,200
[Music]

1199
00:46:17,200 --> 00:46:20,560
given that if 128 achieves full

1200
00:46:20,560 --> 00:46:22,880
diffusion after four rounds they

1201
00:46:22,880 --> 00:46:25,839
conjecture the maximum number of rounds

1202
00:46:25,839 --> 00:46:28,400
appended before the linear distinguisher

1203
00:46:28,400 --> 00:46:31,440
in the attack on on the primitive is

1204
00:46:31,440 --> 00:46:32,800
three

1205
00:46:32,800 --> 00:46:35,520
regarding the three runs extended before

1206
00:46:35,520 --> 00:46:38,640
the linear approximation they introduce

1207
00:46:38,640 --> 00:46:41,839
extra variables to locate the bits

1208
00:46:41,839 --> 00:46:43,920
involved in verifying the linear

1209
00:46:43,920 --> 00:46:45,680
relation

1210
00:46:45,680 --> 00:46:48,960
according to the functionality the extra

1211
00:46:48,960 --> 00:46:51,839
boolean equations in the specialized set

1212
00:46:51,839 --> 00:46:55,119
set problem are divided into three parts

1213
00:46:55,119 --> 00:46:58,160
for the first part identifies the

1214
00:46:58,160 --> 00:47:00,560
necessary piece for the calculation of

1215
00:47:00,560 --> 00:47:02,319
the linear relation

1216
00:47:02,319 --> 00:47:04,880
and the second part ensures the

1217
00:47:04,880 --> 00:47:07,200
irrelevance with the most significant

1218
00:47:07,200 --> 00:47:09,839
significant input bits

1219
00:47:09,839 --> 00:47:12,720
the last part connects the extended

1220
00:47:12,720 --> 00:47:16,079
rounds with a linear trio

1221
00:47:16,079 --> 00:47:19,280
after integrating these equations the

1222
00:47:19,280 --> 00:47:21,920
specialized set problems can find

1223
00:47:21,920 --> 00:47:24,240
distinguishers matching the attack

1224
00:47:24,240 --> 00:47:26,720
setting

1225
00:47:27,440 --> 00:47:29,200
they apply the

1226
00:47:29,200 --> 00:47:32,079
the specialized set problem to assist

1227
00:47:32,079 --> 00:47:34,640
the search of linear distinguishers for

1228
00:47:34,640 --> 00:47:38,079
give the cofb and utilize the newly

1229
00:47:38,079 --> 00:47:41,359
identified 10-run linear approximations

1230
00:47:41,359 --> 00:47:46,558
to realize 16-round k-recovery attack

1231
00:47:47,359 --> 00:47:50,400
the second target is hyena

1232
00:47:50,400 --> 00:47:53,440
it is the instantiation of hybrid

1233
00:47:53,440 --> 00:47:55,599
feedback-based encryption with

1234
00:47:55,599 --> 00:47:58,319
authentication modes of operation with

1235
00:47:58,319 --> 00:48:02,359
the zephyr gift 128.

1236
00:48:02,720 --> 00:48:05,760
we also aim at the encryption function

1237
00:48:05,760 --> 00:48:08,000
in the message processing phase

1238
00:48:08,000 --> 00:48:10,800
highlighted in write also

1239
00:48:10,800 --> 00:48:13,200
there are some restrictions on the

1240
00:48:13,200 --> 00:48:15,280
linear approximation in the linear

1241
00:48:15,280 --> 00:48:16,960
attack

1242
00:48:16,960 --> 00:48:20,079
under the non-respecting scenario the

1243
00:48:20,079 --> 00:48:22,559
designers claimed that for a valid

1244
00:48:22,559 --> 00:48:25,280
attack the data requirement should be

1245
00:48:25,280 --> 00:48:28,640
lower than 2 to the 64 and the time

1246
00:48:28,640 --> 00:48:33,839
complexity is bounded by 2 to 728

1247
00:48:33,839 --> 00:48:38,000
beyond that hyena also creates a 64-bit

1248
00:48:38,000 --> 00:48:41,040
unknown value third before the

1249
00:48:41,040 --> 00:48:43,920
associated data processing phase

1250
00:48:43,920 --> 00:48:46,240
so the verification of the linear

1251
00:48:46,240 --> 00:48:49,040
relation should be irrelevant with the

1252
00:48:49,040 --> 00:48:53,359
least significant 64 bits

1253
00:48:54,160 --> 00:48:56,599
to accomplish the search of linear

1254
00:48:56,599 --> 00:48:58,640
approximations fulfilling these

1255
00:48:58,640 --> 00:49:01,599
restrictions they replace the second

1256
00:49:01,599 --> 00:49:04,559
part of extra billion equations in the

1257
00:49:04,559 --> 00:49:07,440
specialized set problem

1258
00:49:07,440 --> 00:49:10,160
with a turnaround distinguisher we

1259
00:49:10,160 --> 00:49:15,040
realize a 16 round attack

1260
00:49:15,359 --> 00:49:18,480
then they analyze sunday gift um it is a

1261
00:49:18,480 --> 00:49:22,319
family of aead that explodes the scheme

1262
00:49:22,319 --> 00:49:24,760
sunday with gift

1263
00:49:24,760 --> 00:49:30,240
128 as the underlying block cipher

1264
00:49:30,240 --> 00:49:33,200
unlike the case in the previous two

1265
00:49:33,200 --> 00:49:35,839
primitives because there is no

1266
00:49:35,839 --> 00:49:38,319
limitation at the input of the k

1267
00:49:38,319 --> 00:49:39,599
function

1268
00:49:39,599 --> 00:49:42,079
they proposed to attach four runs and

1269
00:49:42,079 --> 00:49:44,240
three runs before and after the

1270
00:49:44,240 --> 00:49:46,160
distinguisher

1271
00:49:46,160 --> 00:49:48,720
the turnaround distinguisher is a unique

1272
00:49:48,720 --> 00:49:51,119
one achieving the minimum number of

1273
00:49:51,119 --> 00:49:53,280
guest sub kps

1274
00:49:53,280 --> 00:49:55,520
and we finally launched a

1275
00:49:55,520 --> 00:49:59,400
17 round attack

1276
00:49:59,440 --> 00:50:03,520
the last target is gift 128.

1277
00:50:03,520 --> 00:50:05,839
we find the 19 run distinguisher

1278
00:50:05,839 --> 00:50:08,240
attaining the minimum number of guest

1279
00:50:08,240 --> 00:50:12,160
sub kps and finally launch a 25 round

1280
00:50:12,160 --> 00:50:14,000
linear attack

1281
00:50:14,000 --> 00:50:17,200
so lastly a brief conclusion

1282
00:50:17,200 --> 00:50:19,839
in this work they first they create

1283
00:50:19,839 --> 00:50:22,640
specialized set problems for the search

1284
00:50:22,640 --> 00:50:25,440
of linear distinguishers coordinate with

1285
00:50:25,440 --> 00:50:27,440
the attack setting

1286
00:50:27,440 --> 00:50:30,640
this method they improve linear attacks

1287
00:50:30,640 --> 00:50:34,559
on git cofb and the sunday gift

1288
00:50:34,559 --> 00:50:37,119
they proposed the first crypt analytic

1289
00:50:37,119 --> 00:50:40,400
result on hyena also will provide

1290
00:50:40,400 --> 00:50:44,880
improved linear attacks on gift 128.

1291
00:50:44,880 --> 00:50:46,880
that's all for the presentation thank

1292
00:50:46,880 --> 00:50:50,440
you for your attention

1293
00:50:54,240 --> 00:50:57,919
thank you is there any question

1294
00:50:59,359 --> 00:51:01,920
online

1295
00:51:02,480 --> 00:51:03,760
no

1296
00:51:03,760 --> 00:51:06,319
so i have one

1297
00:51:06,319 --> 00:51:08,559
do you have any idea to increase the

1298
00:51:08,559 --> 00:51:12,319
success probability of your attacks

1299
00:51:12,400 --> 00:51:14,240
um

1300
00:51:14,240 --> 00:51:16,400
sorry increase what

1301
00:51:16,400 --> 00:51:18,720
the success probability

1302
00:51:18,720 --> 00:51:23,558
success probability okay

1303
00:51:25,080 --> 00:51:28,210
[Music]

1304
00:51:30,240 --> 00:51:32,480
i think increase the success

1305
00:51:32,480 --> 00:51:34,000
probabilities

1306
00:51:34,000 --> 00:51:35,280
is

1307
00:51:35,280 --> 00:51:37,520
this

1308
00:51:37,520 --> 00:51:38,319
is

1309
00:51:38,319 --> 00:51:41,359
is very hard because they should they

1310
00:51:41,359 --> 00:51:42,960
should find some

1311
00:51:42,960 --> 00:51:45,200
uh

1312
00:51:45,440 --> 00:51:48,480
some improved linear distinguishers

1313
00:51:48,480 --> 00:51:49,520
however

1314
00:51:49,520 --> 00:51:50,480
in

1315
00:51:50,480 --> 00:51:53,520
our searching phase we find

1316
00:51:53,520 --> 00:51:57,200
we find the distinguisher in the paper

1317
00:51:57,200 --> 00:51:59,119
is

1318
00:51:59,119 --> 00:52:02,160
optimal to to some degree

1319
00:52:02,160 --> 00:52:05,359
so we think it's hard to increase the

1320
00:52:05,359 --> 00:52:07,920
success probability

1321
00:52:07,920 --> 00:52:09,599
okay thank you

1322
00:52:09,599 --> 00:52:10,640
thank you

1323
00:52:10,640 --> 00:52:12,800
another question

1324
00:52:12,800 --> 00:52:14,559
okay so thank the speaker again and all

1325
00:52:14,559 --> 00:52:18,359
the speakers this session

1326
00:52:20,000 --> 00:52:22,640
and now christina will uh

1327
00:52:22,640 --> 00:52:25,920
give some closing remarks

1328
00:52:29,119 --> 00:52:31,040
yes of hello again so it's like closing

1329
00:52:31,040 --> 00:52:32,960
to mars but i don't have anything

1330
00:52:32,960 --> 00:52:34,480
special to say

1331
00:52:34,480 --> 00:52:39,119
um kevin would you like to say something

1332
00:52:39,440 --> 00:52:41,520
no i think not i think we've had a good

1333
00:52:41,520 --> 00:52:42,800
conference

1334
00:52:42,800 --> 00:52:46,359
i wish i was there

1335
00:52:46,640 --> 00:52:48,640
thank you very much for your help with

1336
00:52:48,640 --> 00:52:50,319
uh all this

1337
00:52:50,319 --> 00:52:52,720
and thank you all for being here and i

1338
00:52:52,720 --> 00:52:55,440
hope you have a safe trip back home

1339
00:52:55,440 --> 00:52:57,920
and hope to see you all

1340
00:52:57,920 --> 00:52:59,599
next year

1341
00:52:59,599 --> 00:53:02,480
hopefully in china

1342
00:53:02,880 --> 00:53:04,960
yeah so i think we can just

1343
00:53:04,960 --> 00:53:06,240
stop here

1344
00:53:06,240 --> 00:53:08,399
so

