1
00:00:01,760 --> 00:00:04,960
hello everyone i'm your soon

2
00:00:04,960 --> 00:00:07,279
it's my pleasure to give a presentation

3
00:00:07,279 --> 00:00:08,480
here

4
00:00:08,480 --> 00:00:11,360
and my topic today is automatic search

5
00:00:11,360 --> 00:00:15,040
of cubes for attacking stream servers

6
00:00:15,040 --> 00:00:17,039
so in this talk

7
00:00:17,039 --> 00:00:19,760
i will introduce a new algorithm

8
00:00:19,760 --> 00:00:24,000
to search for special kind of cubes

9
00:00:24,240 --> 00:00:27,359
this presentation contains three parts

10
00:00:27,359 --> 00:00:30,320
firstly i introduce a background and our

11
00:00:30,320 --> 00:00:32,960
main contribution

12
00:00:32,960 --> 00:00:35,520
and secondly we talk about the many

13
00:00:35,520 --> 00:00:38,000
ideas of the search algorithm

14
00:00:38,000 --> 00:00:40,320
and thirdly we apply the search

15
00:00:40,320 --> 00:00:44,719
algorithm to attacks against the trivial

16
00:00:44,719 --> 00:00:49,039
now let's start with the first patch

17
00:00:49,440 --> 00:00:52,719
our attacks are based on the cube attack

18
00:00:52,719 --> 00:00:54,559
which has become

19
00:00:54,559 --> 00:00:56,960
one of the most powerful tools of

20
00:00:56,960 --> 00:01:00,239
attacking stream servers

21
00:01:00,239 --> 00:01:02,000
for stream center

22
00:01:02,000 --> 00:01:05,280
the output bit can always be represented

23
00:01:05,280 --> 00:01:07,920
as the boolean polynomial

24
00:01:07,920 --> 00:01:09,439
f

25
00:01:09,439 --> 00:01:11,119
and let i

26
00:01:11,119 --> 00:01:13,760
be the set of indexes of public

27
00:01:13,760 --> 00:01:15,200
variables

28
00:01:15,200 --> 00:01:19,119
and ci be the cube of i

29
00:01:19,119 --> 00:01:21,840
by summing up the values of f

30
00:01:21,840 --> 00:01:25,200
over the cube ci we can obtain

31
00:01:25,200 --> 00:01:27,200
a new polynomial p

32
00:01:27,200 --> 00:01:29,200
and this polynomial is called the

33
00:01:29,200 --> 00:01:33,119
superpoly of the cube

34
00:01:33,360 --> 00:01:36,079
and generally the silver polyp

35
00:01:36,079 --> 00:01:38,079
should be balanced

36
00:01:38,079 --> 00:01:40,720
and in the offline

37
00:01:40,720 --> 00:01:43,040
phase of the cube attack

38
00:01:43,040 --> 00:01:45,520
we need to generate the balance to

39
00:01:45,520 --> 00:01:47,119
superpoly p

40
00:01:47,119 --> 00:01:49,360
and in the online phase

41
00:01:49,360 --> 00:01:51,600
we need to query the oracle for many

42
00:01:51,600 --> 00:01:55,840
times to get the active value of p

43
00:01:55,840 --> 00:01:56,960
and then

44
00:01:56,960 --> 00:02:01,040
we will obtain an equation

45
00:02:01,040 --> 00:02:04,479
using this equation we can filter out

46
00:02:04,479 --> 00:02:08,479
half of the illegal case and this is

47
00:02:08,479 --> 00:02:11,160
over our complexity

48
00:02:11,160 --> 00:02:12,319
[Music]

49
00:02:12,319 --> 00:02:14,640
note that using

50
00:02:14,640 --> 00:02:17,440
more superpolis can lower down this

51
00:02:17,440 --> 00:02:19,680
complexity

52
00:02:19,680 --> 00:02:21,760
and this is the main idea of the cube

53
00:02:21,760 --> 00:02:24,000
attack

54
00:02:24,000 --> 00:02:27,360
so in the cube attack the first problem

55
00:02:27,360 --> 00:02:31,519
is how to generate the super polyp

56
00:02:31,519 --> 00:02:34,160
and many works have been done to solve

57
00:02:34,160 --> 00:02:37,200
this problem

58
00:02:37,200 --> 00:02:39,120
in the earlier years

59
00:02:39,120 --> 00:02:41,760
linearity test and the quadrat

60
00:02:41,760 --> 00:02:44,720
quadraticity tests were used

61
00:02:44,720 --> 00:02:48,080
and in 2015

62
00:02:48,080 --> 00:02:49,519
the division

63
00:02:49,519 --> 00:02:52,640
division property was presented

64
00:02:52,640 --> 00:02:54,959
but the related computations was very

65
00:02:54,959 --> 00:02:56,319
slow

66
00:02:56,319 --> 00:02:58,640
and in the next year

67
00:02:58,640 --> 00:03:01,440
the concept of division trio

68
00:03:01,440 --> 00:03:03,120
is proposed

69
00:03:03,120 --> 00:03:06,239
it is similar to the concept of

70
00:03:06,239 --> 00:03:07,840
differential trio

71
00:03:07,840 --> 00:03:11,360
and it can be computed very efficiently

72
00:03:11,360 --> 00:03:15,599
using mlp methods

73
00:03:15,599 --> 00:03:18,560
and in the year 2017

74
00:03:18,560 --> 00:03:20,959
the division trio method was first

75
00:03:20,959 --> 00:03:22,319
applied to

76
00:03:22,319 --> 00:03:24,159
cube attack

77
00:03:24,159 --> 00:03:27,840
and this starts the recent cube attacks

78
00:03:27,840 --> 00:03:31,440
against stream staffers

79
00:03:31,680 --> 00:03:32,720
money

80
00:03:32,720 --> 00:03:35,760
after many improvements on the division

81
00:03:35,760 --> 00:03:38,400
properties

82
00:03:38,400 --> 00:03:39,360
and

83
00:03:39,360 --> 00:03:41,440
finally the three subset division

84
00:03:41,440 --> 00:03:44,159
property result and no subset was

85
00:03:44,159 --> 00:03:45,519
presented

86
00:03:45,519 --> 00:03:47,440
in 2020

87
00:03:47,440 --> 00:03:48,879
and since then

88
00:03:48,879 --> 00:03:50,239
the problem

89
00:03:50,239 --> 00:03:52,799
how to retrieve the super poly was

90
00:03:52,799 --> 00:03:56,080
solved completely

91
00:03:56,400 --> 00:03:57,519
and

92
00:03:57,519 --> 00:04:00,239
was the next problem to be solved in the

93
00:04:00,239 --> 00:04:02,959
cube attack

94
00:04:02,959 --> 00:04:06,159
in my opinion i think it is how to find

95
00:04:06,159 --> 00:04:10,159
good cubes or superpolis

96
00:04:10,159 --> 00:04:13,439
since one cube corresponds to exactly

97
00:04:13,439 --> 00:04:15,280
one superpoly

98
00:04:15,280 --> 00:04:18,160
searching for cubes is equivalent to

99
00:04:18,160 --> 00:04:21,279
searching for superpolis

100
00:04:21,279 --> 00:04:22,720
but the

101
00:04:22,720 --> 00:04:26,080
related works are quite for you

102
00:04:26,080 --> 00:04:27,280
next we

103
00:04:27,280 --> 00:04:30,240
talk about which kind of silver police

104
00:04:30,240 --> 00:04:33,120
should be searched for

105
00:04:33,120 --> 00:04:34,320
firstly

106
00:04:34,320 --> 00:04:36,080
leaner superpolice

107
00:04:36,080 --> 00:04:38,560
they are perfect in the attacks

108
00:04:38,560 --> 00:04:40,960
but they are too rare to fan

109
00:04:40,960 --> 00:04:43,840
and moreover

110
00:04:43,840 --> 00:04:46,880
i think they may not exist at all for

111
00:04:46,880 --> 00:04:49,360
hair ground of stream sufferers

112
00:04:49,360 --> 00:04:50,960
and secondly

113
00:04:50,960 --> 00:04:55,040
the general non-linear superpolis

114
00:04:55,040 --> 00:04:57,759
they can be found almost everywhere but

115
00:04:57,759 --> 00:05:00,080
they are useless

116
00:05:00,080 --> 00:05:02,880
so to my understand

117
00:05:02,880 --> 00:05:05,280
we think we can find a special kind of

118
00:05:05,280 --> 00:05:07,919
nonlinear superpoly

119
00:05:07,919 --> 00:05:10,560
called super poly with balance the

120
00:05:10,560 --> 00:05:14,560
variables for example in this form

121
00:05:14,560 --> 00:05:17,600
the variable ki is a balanced variable

122
00:05:17,600 --> 00:05:18,639
and

123
00:05:18,639 --> 00:05:21,600
the monomials in the other part and then

124
00:05:21,600 --> 00:05:24,639
can be non-linear

125
00:05:24,639 --> 00:05:26,960
i believe there are lots of these kinds

126
00:05:26,960 --> 00:05:27,840
of

127
00:05:27,840 --> 00:05:29,360
silver polish

128
00:05:29,360 --> 00:05:31,919
much more than the linear ones

129
00:05:31,919 --> 00:05:32,880
so

130
00:05:32,880 --> 00:05:35,919
this kind of lin this kind of superpolis

131
00:05:35,919 --> 00:05:38,800
are not hard to find and they are also

132
00:05:38,800 --> 00:05:40,720
very useful

133
00:05:40,720 --> 00:05:43,520
note that the superpolis with balanced

134
00:05:43,520 --> 00:05:44,800
variables

135
00:05:44,800 --> 00:05:48,960
must be balanced the superpolis

136
00:05:49,120 --> 00:05:50,160
and

137
00:05:50,160 --> 00:05:54,080
recall the cubes whose properly

138
00:05:54,080 --> 00:05:54,960
have

139
00:05:54,960 --> 00:05:56,880
balance the variable as the variable

140
00:05:56,880 --> 00:05:57,840
cubes

141
00:05:57,840 --> 00:06:00,160
and this is the objective

142
00:06:00,160 --> 00:06:04,520
we are going to search for

143
00:06:06,400 --> 00:06:07,919
so the

144
00:06:07,919 --> 00:06:11,199
main contribution in this paper is that

145
00:06:11,199 --> 00:06:14,240
we propose a new heuristic algorithm to

146
00:06:14,240 --> 00:06:16,639
search for valuable cubes

147
00:06:16,639 --> 00:06:18,720
and as applications

148
00:06:18,720 --> 00:06:21,440
we improve the theoretical

149
00:06:21,440 --> 00:06:23,680
cube attacks against the trivium and

150
00:06:23,680 --> 00:06:25,520
through an equilibrium

151
00:06:25,520 --> 00:06:27,680
in the

152
00:06:27,680 --> 00:06:30,000
when the paper was submitted in the last

153
00:06:30,000 --> 00:06:31,039
year

154
00:06:31,039 --> 00:06:33,840
and we also improved the practical key

155
00:06:33,840 --> 00:06:37,360
recovery attack against trivial

156
00:06:37,360 --> 00:06:38,800
and this is

157
00:06:38,800 --> 00:06:42,319
the best result best practical result

158
00:06:42,319 --> 00:06:44,560
now

159
00:06:45,600 --> 00:06:49,840
and next let's see the search algorithm

160
00:06:50,800 --> 00:06:54,000
our goal is to search for variable curve

161
00:06:54,000 --> 00:06:56,000
valuable cubes

162
00:06:56,000 --> 00:06:58,160
or equivalently search for the

163
00:06:58,160 --> 00:07:00,560
superpolis with balanced variables in

164
00:07:00,560 --> 00:07:03,280
this form

165
00:07:03,280 --> 00:07:05,440
so the first

166
00:07:05,440 --> 00:07:08,479
idea come to our main

167
00:07:08,479 --> 00:07:09,440
is that

168
00:07:09,440 --> 00:07:12,240
we can choose a random cube and recover

169
00:07:12,240 --> 00:07:15,599
the whole silver poly and check

170
00:07:15,599 --> 00:07:17,520
whether there are many

171
00:07:17,520 --> 00:07:19,680
balanced variables

172
00:07:19,680 --> 00:07:22,800
but this but clearly this method is not

173
00:07:22,800 --> 00:07:25,120
very efficient

174
00:07:25,120 --> 00:07:27,680
because for example recovering the whole

175
00:07:27,680 --> 00:07:29,120
superpoly

176
00:07:29,120 --> 00:07:32,599
for 840

177
00:07:32,599 --> 00:07:35,840
840 trillion

178
00:07:35,840 --> 00:07:38,720
of it takes more than one hour

179
00:07:38,720 --> 00:07:41,440
so this method has a very low success

180
00:07:41,440 --> 00:07:43,360
rate

181
00:07:43,360 --> 00:07:45,680
and the improvement is that we can

182
00:07:45,680 --> 00:07:49,680
choose a specific secret variable ki

183
00:07:49,680 --> 00:07:53,199
and only check whether ki is balanced in

184
00:07:53,199 --> 00:07:55,120
the super bowl

185
00:07:55,120 --> 00:07:57,599
and this method is faster than the first

186
00:07:57,599 --> 00:07:58,879
one

187
00:07:58,879 --> 00:07:59,840
but

188
00:07:59,840 --> 00:08:02,960
it has very low success rate because the

189
00:08:02,960 --> 00:08:06,560
number of secret variables is large

190
00:08:06,560 --> 00:08:10,840
for example usually more than 80.

191
00:08:10,840 --> 00:08:15,120
so we got the third idea

192
00:08:15,120 --> 00:08:17,520
that is we can treat

193
00:08:17,520 --> 00:08:19,919
a set of cubes together

194
00:08:19,919 --> 00:08:22,800
such that the common computations

195
00:08:22,800 --> 00:08:25,680
among these cubes can be shared

196
00:08:25,680 --> 00:08:27,520
and this method

197
00:08:27,520 --> 00:08:30,560
is much faster than the previous ones

198
00:08:30,560 --> 00:08:32,479
and it also has a

199
00:08:32,479 --> 00:08:35,599
high success rate

200
00:08:36,640 --> 00:08:38,080
but

201
00:08:38,080 --> 00:08:39,679
in fact these

202
00:08:39,679 --> 00:08:42,719
method is still not efficient enough

203
00:08:42,719 --> 00:08:45,279
because we must finish the computation

204
00:08:45,279 --> 00:08:46,880
of all the cubes

205
00:08:46,880 --> 00:08:49,360
and actually we only need

206
00:08:49,360 --> 00:08:53,040
a few numbers of variable cubes

207
00:08:53,040 --> 00:08:56,720
so we think we can reject

208
00:08:56,720 --> 00:08:59,120
some hopeless cubes during the

209
00:08:59,120 --> 00:09:00,959
computation

210
00:09:00,959 --> 00:09:03,839
and this will slightly lower

211
00:09:03,839 --> 00:09:05,279
the

212
00:09:05,279 --> 00:09:07,200
the success rate but

213
00:09:07,200 --> 00:09:09,200
the efficiency of this method will be

214
00:09:09,200 --> 00:09:11,839
very good

215
00:09:11,839 --> 00:09:14,880
and there is another problem that is how

216
00:09:14,880 --> 00:09:19,120
to reject hopeless cubes family

217
00:09:19,839 --> 00:09:21,519
and by saying

218
00:09:21,519 --> 00:09:25,279
hopeless cube of ki we mean that

219
00:09:25,279 --> 00:09:28,560
the security variable ki is not balanced

220
00:09:28,560 --> 00:09:29,519
in

221
00:09:29,519 --> 00:09:32,000
its super body

222
00:09:32,000 --> 00:09:34,839
equivalently there are many

223
00:09:34,839 --> 00:09:38,000
non-linear monomials involving ki appear

224
00:09:38,000 --> 00:09:41,040
in the superpoli

225
00:09:41,040 --> 00:09:44,240
and this introduces another problem that

226
00:09:44,240 --> 00:09:46,240
that is we need a method to check

227
00:09:46,240 --> 00:09:48,480
whether a monomial appears in the

228
00:09:48,480 --> 00:09:49,760
superbody

229
00:09:49,760 --> 00:09:52,560
which can be solved by the

230
00:09:52,560 --> 00:09:55,360
three subset division property without

231
00:09:55,360 --> 00:09:57,680
and no substation

232
00:09:57,680 --> 00:09:59,200
and next we

233
00:09:59,200 --> 00:10:01,920
briefly introduce the main result of

234
00:10:01,920 --> 00:10:02,839
this

235
00:10:02,839 --> 00:10:04,720
method

236
00:10:04,720 --> 00:10:07,600
there are some notations

237
00:10:07,600 --> 00:10:12,240
fr be the r round function and xr

238
00:10:12,240 --> 00:10:16,000
be the state of the r run and pi w x is

239
00:10:16,000 --> 00:10:18,079
just a notation

240
00:10:18,079 --> 00:10:22,160
and f height w is the in f

241
00:10:22,160 --> 00:10:25,360
of a boolean function

242
00:10:26,240 --> 00:10:28,720
and the three subset division property

243
00:10:28,720 --> 00:10:32,000
without and no substance

244
00:10:32,000 --> 00:10:33,279
says

245
00:10:33,279 --> 00:10:36,800
a monomial appears in the inf

246
00:10:36,800 --> 00:10:38,720
f hat w

247
00:10:38,720 --> 00:10:42,079
if and only if the vector u corresponds

248
00:10:42,079 --> 00:10:44,959
to an odd number of solutions

249
00:10:44,959 --> 00:10:47,360
of the system

250
00:10:47,360 --> 00:10:49,839
by this result

251
00:10:49,839 --> 00:10:52,640
we can see that to check whether a

252
00:10:52,640 --> 00:10:55,360
monomial appears in the superpoly we

253
00:10:55,360 --> 00:10:58,480
only need to solve these polynomials so

254
00:10:58,480 --> 00:11:00,640
this system

255
00:11:00,640 --> 00:11:02,720
and for simplification

256
00:11:02,720 --> 00:11:07,040
we restate the vowel statement as

257
00:11:07,040 --> 00:11:09,040
polynomial appears in the

258
00:11:09,040 --> 00:11:13,279
in sum in life if and only if

259
00:11:13,519 --> 00:11:14,399
sorry

260
00:11:14,399 --> 00:11:16,880
if and only if it appears all the times

261
00:11:16,880 --> 00:11:20,560
in the solutions of some system

262
00:11:20,560 --> 00:11:21,839
so

263
00:11:21,839 --> 00:11:23,600
to reject hopeless

264
00:11:23,600 --> 00:11:26,240
cube's timing we can use the divide and

265
00:11:26,240 --> 00:11:28,640
conquer strategy which is proposed in

266
00:11:28,640 --> 00:11:30,560
2020

267
00:11:30,560 --> 00:11:33,279
the idea is simple

268
00:11:33,279 --> 00:11:34,959
since we want to

269
00:11:34,959 --> 00:11:38,480
solve a big system we can split this big

270
00:11:38,480 --> 00:11:42,640
system into several small subsystems

271
00:11:42,640 --> 00:11:46,320
by solving these subsystems one by one

272
00:11:46,320 --> 00:11:50,320
we can accumulate the results

273
00:11:50,399 --> 00:11:53,519
and by using this divide and conquer

274
00:11:53,519 --> 00:11:55,040
strategy

275
00:11:55,040 --> 00:11:56,480
we can determine

276
00:11:56,480 --> 00:11:59,040
whether cube is hopeless

277
00:11:59,040 --> 00:12:01,519
with a high probability

278
00:12:01,519 --> 00:12:04,399
after we computing cooling of u number

279
00:12:04,399 --> 00:12:06,560
of subsystems

280
00:12:06,560 --> 00:12:08,079
and that is

281
00:12:08,079 --> 00:12:11,360
we observe that the property of the

282
00:12:11,360 --> 00:12:12,800
whole system

283
00:12:12,800 --> 00:12:15,839
approximately equals to the property of

284
00:12:15,839 --> 00:12:18,480
the subsystem

285
00:12:18,480 --> 00:12:20,959
and specifically we have two

286
00:12:20,959 --> 00:12:23,959
observations

287
00:12:24,399 --> 00:12:26,720
our first observation is

288
00:12:26,720 --> 00:12:29,440
a polynomial if a monomial appears in

289
00:12:29,440 --> 00:12:32,560
the solutions of some subsystem

290
00:12:32,560 --> 00:12:36,240
then it tends to appear even times

291
00:12:36,240 --> 00:12:39,680
and this observation holds with a very

292
00:12:39,680 --> 00:12:42,320
high probability particularly when the

293
00:12:42,320 --> 00:12:45,920
system is complicated

294
00:12:46,240 --> 00:12:49,440
and our second observation is

295
00:12:49,440 --> 00:12:52,320
if a normal only a piercing a few sub

296
00:12:52,320 --> 00:12:55,519
subsystem and it appears all the times

297
00:12:55,519 --> 00:12:57,519
in some subsystem

298
00:12:57,519 --> 00:13:00,800
then it tends to appear all times in the

299
00:13:00,800 --> 00:13:02,160
whole system

300
00:13:02,160 --> 00:13:06,079
with a relative high probability

301
00:13:06,079 --> 00:13:08,880
and the logic of this

302
00:13:08,880 --> 00:13:11,200
second observation is that

303
00:13:11,200 --> 00:13:14,160
follow monomial it only appears

304
00:13:14,160 --> 00:13:17,200
in us for you subsystems

305
00:13:17,200 --> 00:13:19,839
and by the first operation

306
00:13:19,839 --> 00:13:24,240
it appears even times in most of them

307
00:13:24,240 --> 00:13:25,120
and

308
00:13:25,120 --> 00:13:27,519
if it is odd in

309
00:13:27,519 --> 00:13:28,639
some

310
00:13:28,639 --> 00:13:30,240
subsystem

311
00:13:30,240 --> 00:13:33,680
it is hardly it hardly turns to even in

312
00:13:33,680 --> 00:13:35,839
the last

313
00:13:35,839 --> 00:13:36,639
and

314
00:13:36,639 --> 00:13:40,000
there are some data supporting

315
00:13:40,000 --> 00:13:42,800
we cannot prove this observation but

316
00:13:42,800 --> 00:13:45,680
there are some data

317
00:13:45,680 --> 00:13:47,760
that can be kind of supporting the

318
00:13:47,760 --> 00:13:50,720
observation too

319
00:13:52,560 --> 00:13:55,440
the the details are just mystics

320
00:13:55,440 --> 00:13:58,079
statistics about them

321
00:13:58,079 --> 00:14:01,600
of the monomials in the superpolis

322
00:14:01,600 --> 00:14:04,560
and we start the monomials by degree

323
00:14:04,560 --> 00:14:05,680
and the

324
00:14:05,680 --> 00:14:07,440
fourth column

325
00:14:07,440 --> 00:14:09,360
shows how many

326
00:14:09,360 --> 00:14:12,000
how many monomials

327
00:14:12,000 --> 00:14:13,920
and the fourth column shows how many

328
00:14:13,920 --> 00:14:15,279
monomials

329
00:14:15,279 --> 00:14:18,079
appear odd in the subsystem

330
00:14:18,079 --> 00:14:20,079
and the fifth the data in the fifth

331
00:14:20,079 --> 00:14:23,680
column show how many monomials appear

332
00:14:23,680 --> 00:14:26,880
still appear odd in the whole system

333
00:14:26,880 --> 00:14:28,800
and the ratio is given in the last

334
00:14:28,800 --> 00:14:30,560
column

335
00:14:30,560 --> 00:14:32,639
from the data we can see that

336
00:14:32,639 --> 00:14:35,839
the higher the degree is the ratio

337
00:14:35,839 --> 00:14:38,560
the hair the ratio is

338
00:14:38,560 --> 00:14:42,160
and with these two observations

339
00:14:42,160 --> 00:14:45,760
we give a heuristic algorithm for search

340
00:14:45,760 --> 00:14:49,120
to search for variable cubes

341
00:14:49,120 --> 00:14:51,920
in the first step we prepare a set of

342
00:14:51,920 --> 00:14:53,839
candidate cubes

343
00:14:53,839 --> 00:14:56,079
and choose a specific

344
00:14:56,079 --> 00:14:58,880
secret variable ki

345
00:14:58,880 --> 00:15:01,440
in the second step we divide the whole

346
00:15:01,440 --> 00:15:06,560
system into several small subsys systems

347
00:15:06,560 --> 00:15:08,880
and in the third step we

348
00:15:08,880 --> 00:15:10,160
we solve

349
00:15:10,160 --> 00:15:13,360
each subsystem one by one

350
00:15:13,360 --> 00:15:16,079
and during the computation

351
00:15:16,079 --> 00:15:16,880
for

352
00:15:16,880 --> 00:15:19,839
a cube for a cube if a non-linear

353
00:15:19,839 --> 00:15:22,399
monomial involving k appears all the

354
00:15:22,399 --> 00:15:25,600
times in some subsystem

355
00:15:25,600 --> 00:15:28,240
we remove this cube from the candidate

356
00:15:28,240 --> 00:15:29,920
side

357
00:15:29,920 --> 00:15:31,759
another case is

358
00:15:31,759 --> 00:15:33,440
for cube ci

359
00:15:33,440 --> 00:15:36,480
if the monomial ki appears in some

360
00:15:36,480 --> 00:15:38,480
subsystem

361
00:15:38,480 --> 00:15:40,800
this time we record the number of the

362
00:15:40,800 --> 00:15:44,079
terms for cn

363
00:15:44,079 --> 00:15:47,519
and after the computation finish

364
00:15:47,519 --> 00:15:51,040
if there exists some qci such that the

365
00:15:51,040 --> 00:15:55,120
recorded number of ci is odd then ci is

366
00:15:55,120 --> 00:15:57,120
a variable cube

367
00:15:57,120 --> 00:16:00,320
and in our experiments we use two

368
00:16:00,320 --> 00:16:02,399
criteria

369
00:16:02,399 --> 00:16:06,320
to detect hopeless cubes and one is more

370
00:16:06,320 --> 00:16:09,839
aggressive but more efficient

371
00:16:11,120 --> 00:16:13,600
and another possible case is that

372
00:16:13,600 --> 00:16:16,320
our criteria are too aggressive and

373
00:16:16,320 --> 00:16:17,839
reject all

374
00:16:17,839 --> 00:16:21,600
candidate cubes and in this case we can

375
00:16:21,600 --> 00:16:23,680
increase the size of substitute

376
00:16:23,680 --> 00:16:25,120
subsystems

377
00:16:25,120 --> 00:16:27,839
and search again

378
00:16:27,839 --> 00:16:29,120
because

379
00:16:29,120 --> 00:16:32,399
if there really exists some valuable

380
00:16:32,399 --> 00:16:33,279
cubes

381
00:16:33,279 --> 00:16:35,519
we can always find

382
00:16:35,519 --> 00:16:37,519
if the subset

383
00:16:37,519 --> 00:16:41,839
user subsystems are large enough

384
00:16:42,079 --> 00:16:45,040
and next let's let's see

385
00:16:45,040 --> 00:16:48,079
the applications

386
00:16:49,199 --> 00:16:50,399
and trivium

387
00:16:50,399 --> 00:16:51,759
is a famous

388
00:16:51,759 --> 00:16:54,560
stream safer and it has

389
00:16:54,560 --> 00:16:58,000
80 btk

390
00:16:58,320 --> 00:17:00,880
so to provide a theoretical attack

391
00:17:00,880 --> 00:17:03,199
against the run radius premium

392
00:17:03,199 --> 00:17:05,679
in the surfaces to find one valuable

393
00:17:05,679 --> 00:17:06,799
cube

394
00:17:06,799 --> 00:17:08,480
with dimension

395
00:17:08,480 --> 00:17:10,000
no bigger than

396
00:17:10,000 --> 00:17:12,559
78

397
00:17:12,559 --> 00:17:16,480
so the set of candidate cubes we used in

398
00:17:16,480 --> 00:17:19,520
our experiments contain all the cubes of

399
00:17:19,520 --> 00:17:22,879
dimension 78

400
00:17:23,199 --> 00:17:28,480
and for attacking 8 40 100 round trivial

401
00:17:28,480 --> 00:17:31,760
we choose three secret variables

402
00:17:31,760 --> 00:17:33,280
by random

403
00:17:33,280 --> 00:17:35,360
and

404
00:17:35,360 --> 00:17:38,799
we compared the number of hopeless cubes

405
00:17:38,799 --> 00:17:41,440
and the number of valuable cubes

406
00:17:41,440 --> 00:17:44,400
and we also give the timings

407
00:17:44,400 --> 00:17:46,880
of each search algorithm

408
00:17:46,880 --> 00:17:49,360
from the table we can see that the first

409
00:17:49,360 --> 00:17:52,559
criterion is more aggressive

410
00:17:52,559 --> 00:17:55,679
but it it is more efficient

411
00:17:55,679 --> 00:17:59,840
and the data of different variable

412
00:17:59,840 --> 00:18:01,919
also are different

413
00:18:01,919 --> 00:18:04,799
also different

414
00:18:05,280 --> 00:18:07,679
and here are the timings for retrieving

415
00:18:07,679 --> 00:18:09,600
the superpolis

416
00:18:09,600 --> 00:18:12,559
from these details we can see that

417
00:18:12,559 --> 00:18:16,080
all the timings are more than once over

418
00:18:16,080 --> 00:18:19,360
and compared with the search algorithm

419
00:18:19,360 --> 00:18:22,080
we can see the search algorithm is very

420
00:18:22,080 --> 00:18:24,639
efficient

421
00:18:25,760 --> 00:18:28,080
and we also apply the search algorithm

422
00:18:28,080 --> 00:18:30,559
to hair rounds of trivial

423
00:18:30,559 --> 00:18:31,240
for

424
00:18:31,240 --> 00:18:34,640
841 and 842

425
00:18:34,640 --> 00:18:37,760
we use the first criterion

426
00:18:37,760 --> 00:18:38,919
and for

427
00:18:38,919 --> 00:18:42,640
843 we use the second criterion and

428
00:18:42,640 --> 00:18:47,360
finally we found two variable cubes

429
00:18:47,360 --> 00:18:50,320
and we recovered the silver party of one

430
00:18:50,320 --> 00:18:51,760
valuable cube

431
00:18:51,760 --> 00:18:55,360
and the superpoly contains more than 16

432
00:18:55,360 --> 00:18:58,000
16 000 monomials

433
00:18:58,000 --> 00:19:00,559
and it leads to a theoretical attack

434
00:19:00,559 --> 00:19:02,840
against

435
00:19:02,840 --> 00:19:06,000
843 round tribune

436
00:19:06,000 --> 00:19:09,200
with a complexity slightly better than

437
00:19:09,200 --> 00:19:12,640
the brute force method

438
00:19:13,360 --> 00:19:16,240
and another application is a practical

439
00:19:16,240 --> 00:19:18,799
attack against trivial

440
00:19:18,799 --> 00:19:20,320
in this case

441
00:19:20,320 --> 00:19:24,720
we need many superpolis instead of one

442
00:19:24,720 --> 00:19:26,559
so represent

443
00:19:26,559 --> 00:19:28,559
a set of indexes

444
00:19:28,559 --> 00:19:29,760
s

445
00:19:29,760 --> 00:19:30,960
and

446
00:19:30,960 --> 00:19:34,000
we prepare all the candidate cubes from

447
00:19:34,000 --> 00:19:36,840
the subsets of

448
00:19:36,840 --> 00:19:40,080
s and we searched about

449
00:19:40,080 --> 00:19:42,799
two weeks and got

450
00:19:42,799 --> 00:19:46,000
about 200 valuable cubes as well as

451
00:19:46,000 --> 00:19:49,840
their non-linear superpolis

452
00:19:49,840 --> 00:19:52,640
to solve this nonlinear system we use

453
00:19:52,640 --> 00:19:55,440
the guess and determine method

454
00:19:55,440 --> 00:19:58,559
and please note that only the values of

455
00:19:58,559 --> 00:20:00,000
of balanced

456
00:20:00,000 --> 00:20:02,480
variables can be deduced

457
00:20:02,480 --> 00:20:06,080
for example in this equation all in the

458
00:20:06,080 --> 00:20:10,480
value of x2 can be deduced

459
00:20:11,280 --> 00:20:13,600
and by guessing the values of

460
00:20:13,600 --> 00:20:16,000
43 variables

461
00:20:16,000 --> 00:20:18,840
we can deduce the values of the other

462
00:20:18,840 --> 00:20:22,880
37. and the deduction cost no time

463
00:20:22,880 --> 00:20:24,799
so the complexity of getting the

464
00:20:24,799 --> 00:20:27,440
negative values of superpolis

465
00:20:27,440 --> 00:20:29,840
is 2 power 44

466
00:20:29,840 --> 00:20:33,840
and the complexity of solving the true k

467
00:20:33,840 --> 00:20:35,360
is 2 power

468
00:20:35,360 --> 00:20:37,600
43

469
00:20:37,600 --> 00:20:41,280
both can be done practically

470
00:20:41,280 --> 00:20:43,919
and there are some details about the

471
00:20:43,919 --> 00:20:45,679
variable cubes

472
00:20:45,679 --> 00:20:49,600
and the balanced variables note that a

473
00:20:49,600 --> 00:20:52,640
superpoly may contain several balanced

474
00:20:52,640 --> 00:20:55,360
variables

475
00:20:56,159 --> 00:20:56,960
and

476
00:20:56,960 --> 00:21:00,240
at last we summarize this presentation

477
00:21:00,240 --> 00:21:03,280
our main contribution is to propose

478
00:21:03,280 --> 00:21:05,600
is that we proposed a new

479
00:21:05,600 --> 00:21:08,960
algorithm to search for valuable cubes

480
00:21:08,960 --> 00:21:12,080
and we will apply this search algorithm

481
00:21:12,080 --> 00:21:16,480
to both theoretical and practical tags

482
00:21:16,480 --> 00:21:17,360
and

483
00:21:17,360 --> 00:21:19,440
we believe this search algorithm can be

484
00:21:19,440 --> 00:21:22,960
applied to other ciphers directly

485
00:21:22,960 --> 00:21:24,640
and that's all

486
00:21:24,640 --> 00:21:28,280
thanks for your attention

