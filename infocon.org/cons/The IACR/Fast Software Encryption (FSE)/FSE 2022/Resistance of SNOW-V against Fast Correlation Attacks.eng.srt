1
00:00:01,199 --> 00:00:03,279
thank you very much for listening to my

2
00:00:03,280 --> 00:00:04,400
talk

3
00:00:04,400 --> 00:00:05,920
i am xi

4
00:00:05,920 --> 00:00:09,040
and i'd like to talk about our people

5
00:00:09,040 --> 00:00:11,519
resistance of snowy against the faster

6
00:00:11,519 --> 00:00:13,440
correlation attacks

7
00:00:13,440 --> 00:00:15,759
novi is a new member in the snow family

8
00:00:15,759 --> 00:00:18,880
of string ciphers in this paper we study

9
00:00:18,880 --> 00:00:21,359
the resistance of snow v against a

10
00:00:21,359 --> 00:00:24,080
bitwise faster correlation text by

11
00:00:24,080 --> 00:00:26,320
constructing visualized linear

12
00:00:26,320 --> 00:00:28,720
approximations

13
00:00:28,720 --> 00:00:31,519
first we propose and summarize some

14
00:00:31,519 --> 00:00:34,079
continuation algorithms using the

15
00:00:34,079 --> 00:00:36,960
slice-like techniques to compute the

16
00:00:36,960 --> 00:00:40,079
bitwise linear approximations of certain

17
00:00:40,079 --> 00:00:44,239
types of computation functions

18
00:00:44,239 --> 00:00:47,120
then using these algorithms we find a

19
00:00:47,120 --> 00:00:50,480
number of stronger linear approximations

20
00:00:50,480 --> 00:00:53,440
for fsm of two variants of novel given

21
00:00:53,440 --> 00:00:56,000
in the deduct design document

22
00:00:56,000 --> 00:01:00,160
and thus improve the faster correlation

23
00:01:00,160 --> 00:01:02,559
finally we study the security of a

24
00:01:02,559 --> 00:01:05,040
closer variant of snow v

25
00:01:05,040 --> 00:01:08,400
and derives many muscle tubules yielding

26
00:01:08,400 --> 00:01:10,560
the butylised linear approximations of

27
00:01:10,560 --> 00:01:13,280
the ssm with high ser

28
00:01:13,280 --> 00:01:15,439
and amount of faster coalition tech

29
00:01:15,439 --> 00:01:18,080
according

30
00:01:18,240 --> 00:01:21,040
note that needs of our attack threatens

31
00:01:21,040 --> 00:01:24,640
the security of snowy

32
00:01:25,360 --> 00:01:29,920
our talk will include these seven parts

33
00:01:31,520 --> 00:01:34,240
in the first part i'd like to talk about

34
00:01:34,240 --> 00:01:36,960
the motivation

35
00:01:36,960 --> 00:01:40,720
snowy has two predecessors snow 2 and

36
00:01:40,720 --> 00:01:44,720
snow 3g using the classic rfsr-fsm

37
00:01:44,720 --> 00:01:46,560
structure

38
00:01:46,560 --> 00:01:49,119
many literatures have studied the linear

39
00:01:49,119 --> 00:01:50,560
attacks once

40
00:01:50,560 --> 00:01:52,640
no two and snossaji

41
00:01:52,640 --> 00:01:54,320
most of which are based on the

42
00:01:54,320 --> 00:01:57,439
betrayal's linear approximations

43
00:01:57,439 --> 00:02:01,360
at crypto 2015 john and others achieved

44
00:02:01,360 --> 00:02:03,759
improvements over the previous attacks

45
00:02:03,759 --> 00:02:05,680
on snooze snow tool

46
00:02:05,680 --> 00:02:08,239
by building two-round vitalized linear

47
00:02:08,239 --> 00:02:11,360
propositions for fsm

48
00:02:11,360 --> 00:02:14,879
inspired inspired by this work at fse

49
00:02:14,879 --> 00:02:16,480
2020

50
00:02:16,480 --> 00:02:18,560
young and others launched a fast

51
00:02:18,560 --> 00:02:21,280
correlation attack on snow 3g by

52
00:02:21,280 --> 00:02:23,840
building three round bitewise linear

53
00:02:23,840 --> 00:02:27,120
positions for fsm

54
00:02:27,120 --> 00:02:29,840
these results give the impression that

55
00:02:29,840 --> 00:02:32,400
large urinator approximations lead to

56
00:02:32,400 --> 00:02:37,200
larger sei and also to better attacks

57
00:02:37,200 --> 00:02:39,920
in the design document the designers

58
00:02:39,920 --> 00:02:41,920
studied the linear attacks on two

59
00:02:41,920 --> 00:02:44,959
variants of snow v by directly using

60
00:02:44,959 --> 00:02:47,760
large units or by twice

61
00:02:47,760 --> 00:02:50,879
linear approximations

62
00:02:50,879 --> 00:02:52,879
so the question is

63
00:02:52,879 --> 00:02:55,599
how do the bitwise linear approximations

64
00:02:55,599 --> 00:02:58,799
work for snow v

65
00:02:59,599 --> 00:03:01,599
before describing the main work we've

66
00:03:01,599 --> 00:03:04,159
done we will introduce some concepts

67
00:03:04,159 --> 00:03:07,359
used in this paper

68
00:03:07,840 --> 00:03:10,080
definition 1 describes the correlation

69
00:03:10,080 --> 00:03:12,159
of a blunt function

70
00:03:12,159 --> 00:03:15,120
correlation is often used to evaluate

71
00:03:15,120 --> 00:03:17,680
the efficiency of vitroids linear

72
00:03:17,680 --> 00:03:21,280
approximations in linear attacks

73
00:03:21,280 --> 00:03:23,680
definition 2 describes the correlation

74
00:03:23,680 --> 00:03:26,239
of an em function

75
00:03:26,239 --> 00:03:31,560
onto any input and output masses

76
00:03:32,799 --> 00:03:36,080
for an am vectorial volume function f

77
00:03:36,080 --> 00:03:38,480
with the definition of the probability

78
00:03:38,480 --> 00:03:39,920
distribution

79
00:03:39,920 --> 00:03:44,560
the sei is defined as definition 3

80
00:03:44,560 --> 00:03:46,799
which measures the distance between the

81
00:03:46,799 --> 00:03:49,200
target distribution and the uniform

82
00:03:49,200 --> 00:03:50,879
distribution

83
00:03:50,879 --> 00:03:53,360
especially for m equals 1

84
00:03:53,360 --> 00:03:56,560
the sei of f is equal to the squared

85
00:03:56,560 --> 00:03:59,439
correlation of f

86
00:03:59,439 --> 00:04:00,400
note that

87
00:04:00,400 --> 00:04:03,200
sei of a distribution is used to

88
00:04:03,200 --> 00:04:06,400
evaluate the efficiency of large unit

89
00:04:06,400 --> 00:04:11,280
linear approximations in a linear attack

90
00:04:12,000 --> 00:04:14,480
for the targeted site for snow v

91
00:04:14,480 --> 00:04:17,279
we only provide the description of

92
00:04:17,279 --> 00:04:19,600
internal state updating functions in key

93
00:04:19,600 --> 00:04:22,799
stream generation phase

94
00:04:23,040 --> 00:04:27,600
nuvi is with the lfsr and fsm structure

95
00:04:27,600 --> 00:04:32,560
the fsm consists of three registers

96
00:04:32,560 --> 00:04:35,360
the key stream output and the fsm

97
00:04:35,360 --> 00:04:38,720
updating are as shown

98
00:04:38,800 --> 00:04:42,080
here sigma is a byte rise permutation

99
00:04:42,080 --> 00:04:45,680
and the asr denotes a 48 s encryption

100
00:04:45,680 --> 00:04:48,080
run function with the round key

101
00:04:48,080 --> 00:04:51,440
consenter being zero

102
00:04:51,440 --> 00:04:54,400
next we will introduce the work we've

103
00:04:54,400 --> 00:04:55,759
done

104
00:04:55,759 --> 00:04:58,560
the first is about the computation of

105
00:04:58,560 --> 00:05:01,440
bitwise linear propositions of certain

106
00:05:01,440 --> 00:05:04,080
types of nonlinear functions which is

107
00:05:04,080 --> 00:05:06,479
used for the cryptal analysis of the

108
00:05:06,479 --> 00:05:09,120
snow which

109
00:05:09,520 --> 00:05:11,759
here we summarize five types of

110
00:05:11,759 --> 00:05:15,199
functions composed of basic operations

111
00:05:15,199 --> 00:05:19,919
like mood edge xor permutation and xbox

112
00:05:19,919 --> 00:05:23,039
and provide algorithms to efficiently

113
00:05:23,039 --> 00:05:26,880
compute their linear approximations

114
00:05:26,880 --> 00:05:29,280
halfway function is constructed by

115
00:05:29,280 --> 00:05:32,560
several parallel small x boxes

116
00:05:32,560 --> 00:05:36,240
for any given input and output mask

117
00:05:36,240 --> 00:05:39,039
correlation one can be easily obtained

118
00:05:39,039 --> 00:05:42,000
the linear approximation table lookups

119
00:05:42,000 --> 00:05:43,840
of g

120
00:05:43,840 --> 00:05:47,039
next factor function

121
00:05:47,039 --> 00:05:49,840
type 2 function represents the addition

122
00:05:49,840 --> 00:05:53,039
module 2 to the power of n

123
00:05:53,039 --> 00:05:55,680
with several inputs

124
00:05:55,680 --> 00:05:58,400
in the literature in w06

125
00:05:58,400 --> 00:06:01,120
the authors show that for any given

126
00:06:01,120 --> 00:06:04,880
input and output and masks correlation 2

127
00:06:04,880 --> 00:06:08,080
can be obtained by doing several matrix

128
00:06:08,080 --> 00:06:10,400
multiplications by using some

129
00:06:10,400 --> 00:06:12,720
precomputed matrices

130
00:06:12,720 --> 00:06:15,440
this is a constant constant time

131
00:06:15,440 --> 00:06:17,120
procedure

132
00:06:17,120 --> 00:06:18,240
method

133
00:06:18,240 --> 00:06:22,639
in nw6 is as shown in crm2

134
00:06:22,639 --> 00:06:26,000
which gives the details

135
00:06:26,000 --> 00:06:26,960
next

136
00:06:26,960 --> 00:06:29,600
type 3 function

137
00:06:29,600 --> 00:06:32,880
f3 function is a composition of half my

138
00:06:32,880 --> 00:06:35,039
function under the mood add

139
00:06:35,039 --> 00:06:37,440
which is at the core of

140
00:06:37,440 --> 00:06:40,160
no to another 3g

141
00:06:40,160 --> 00:06:43,680
the literature gz-20 has provided a

142
00:06:43,680 --> 00:06:46,560
constant time algorithm a computer

143
00:06:46,560 --> 00:06:49,680
called relationship for any given input

144
00:06:49,680 --> 00:06:52,319
and output mask

145
00:06:52,319 --> 00:06:55,280
the general idea is to divide the input

146
00:06:55,280 --> 00:06:58,400
values into d and beta values according

147
00:06:58,400 --> 00:07:02,639
to the specific structure of xbox

148
00:07:02,639 --> 00:07:04,400
and then

149
00:07:04,400 --> 00:07:07,759
recompute and store some useful matrices

150
00:07:07,759 --> 00:07:10,800
independent of the input and output

151
00:07:10,800 --> 00:07:11,840
muscles

152
00:07:11,840 --> 00:07:14,840
using algorithm 1 as shown

153
00:07:14,840 --> 00:07:19,039
here using these precomputed matrices

154
00:07:19,039 --> 00:07:22,000
the correlation on an arbitrary bitwise

155
00:07:22,000 --> 00:07:25,199
mask tubal can be derived by doing some

156
00:07:25,199 --> 00:07:28,240
matrix multiplications of small size

157
00:07:28,240 --> 00:07:30,639
as shown in theorem

158
00:07:30,639 --> 00:07:33,520
theorem three

159
00:07:33,520 --> 00:07:36,240
next have four function

160
00:07:36,240 --> 00:07:39,919
up for function h is composed of the

161
00:07:39,919 --> 00:07:41,360
additions

162
00:07:41,360 --> 00:07:44,800
modulo 2 to the power of n 2 to the

163
00:07:44,800 --> 00:07:48,240
power of m and the permutation p

164
00:07:48,240 --> 00:07:51,039
next we show how to accurately compute

165
00:07:51,039 --> 00:07:53,840
the correlation for in constant time by

166
00:07:53,840 --> 00:07:55,680
adapting the techniques in the

167
00:07:55,680 --> 00:08:00,639
literature's gz20 and w06

168
00:08:00,800 --> 00:08:04,080
focus on the definition of h where m

169
00:08:04,080 --> 00:08:05,599
divides in

170
00:08:05,599 --> 00:08:08,560
with the permutation p the last mod add

171
00:08:08,560 --> 00:08:13,039
can be divided into d parallel mode

172
00:08:13,039 --> 00:08:17,280
thus each is actually in type 3 category

173
00:08:17,280 --> 00:08:19,759
and can be solved using the method in

174
00:08:19,759 --> 00:08:22,319
gz20

175
00:08:22,319 --> 00:08:24,879
that is for any given mask

176
00:08:24,879 --> 00:08:27,280
correlation 4 can be obtained by doing

177
00:08:27,280 --> 00:08:29,759
some matrix multiplications of small

178
00:08:29,759 --> 00:08:30,879
size

179
00:08:30,879 --> 00:08:32,640
as shown here

180
00:08:32,640 --> 00:08:35,919
in this equation the matrices cv are of

181
00:08:35,919 --> 00:08:39,279
size 2 times 2.

182
00:08:39,279 --> 00:08:42,159
note that all possible matrices cv are

183
00:08:42,159 --> 00:08:44,560
also derived by doing matrix

184
00:08:44,560 --> 00:08:47,920
multiplications by using the bit slot

185
00:08:47,920 --> 00:08:51,519
technique in literature in w06

186
00:08:51,519 --> 00:08:54,880
as shown in theorem 1.

187
00:08:54,880 --> 00:08:58,080
we will skip the details

188
00:08:58,080 --> 00:09:01,120
the last is type 5 function which is

189
00:09:01,120 --> 00:09:02,080
quite

190
00:09:02,080 --> 00:09:05,360
similar to type 4 but work on different

191
00:09:05,360 --> 00:09:09,200
sizes using different permutations

192
00:09:09,200 --> 00:09:11,760
this type of function plays an important

193
00:09:11,760 --> 00:09:14,000
role for analyzing the

194
00:09:14,000 --> 00:09:18,640
bitwise linear approximations of snow v

195
00:09:18,640 --> 00:09:22,000
with the precomputed matrix cv or type 4

196
00:09:22,000 --> 00:09:22,959
function

197
00:09:22,959 --> 00:09:26,240
correlation 5 for any given maskers can

198
00:09:26,240 --> 00:09:29,279
be obtained by adapting the

199
00:09:29,279 --> 00:09:32,959
communication for type 4

200
00:09:32,959 --> 00:09:34,880
in our case

201
00:09:34,880 --> 00:09:37,680
by doing some matrix multiplications of

202
00:09:37,680 --> 00:09:41,040
small size which is also a constant time

203
00:09:41,040 --> 00:09:44,160
press procedure

204
00:09:45,519 --> 00:09:47,839
after introducing five

205
00:09:47,839 --> 00:09:50,399
types of non-linear functions we will

206
00:09:50,399 --> 00:09:52,880
next present the applications of the

207
00:09:52,880 --> 00:09:54,000
above

208
00:09:54,000 --> 00:09:56,880
community communication algorithm to

209
00:09:56,880 --> 00:10:00,160
some a variance of snow v

210
00:10:00,160 --> 00:10:02,399
the first one is the snow snow based

211
00:10:02,399 --> 00:10:04,720
sigma

212
00:10:04,720 --> 00:10:08,160
the left finger shows the fsn part of a

213
00:10:08,160 --> 00:10:11,040
snow v sigma 0 0

214
00:10:11,040 --> 00:10:14,640
is no v sigma 0 the permutation sigma

215
00:10:14,640 --> 00:10:19,200
used in fs the fsm updating is assumed

216
00:10:19,200 --> 00:10:22,320
to be identity that is there is no

217
00:10:22,320 --> 00:10:24,720
byte-wise permutation

218
00:10:24,720 --> 00:10:27,040
we will first study the visualized

219
00:10:27,040 --> 00:10:30,240
linear positions for fsm by using

220
00:10:30,240 --> 00:10:33,760
previous algorithms

221
00:10:33,760 --> 00:10:37,360
for three-round fsm the output bits can

222
00:10:37,360 --> 00:10:40,640
be represented as a function of internal

223
00:10:40,640 --> 00:10:41,839
database

224
00:10:41,839 --> 00:10:44,800
with the variables and the f function

225
00:10:44,800 --> 00:10:48,079
described above

226
00:10:50,480 --> 00:10:52,959
generally we consider to

227
00:10:52,959 --> 00:10:56,959
apply the linear masses by gamma lambda

228
00:10:56,959 --> 00:11:00,560
to the key stream words at 3 consecutive

229
00:11:00,560 --> 00:11:03,839
time instances respectively

230
00:11:03,839 --> 00:11:06,720
and then cancel out the nonlinear

231
00:11:06,720 --> 00:11:09,519
contributions by decomposing the whole

232
00:11:09,519 --> 00:11:12,800
noise into four subnoses and

233
00:11:12,800 --> 00:11:18,479
the phone noises are a mv nc and nt

234
00:11:19,200 --> 00:11:21,279
accordingly the bitwise linear

235
00:11:21,279 --> 00:11:24,320
approximations of the fsm of snow v

236
00:11:24,320 --> 00:11:28,000
sigma zero have the following form

237
00:11:28,000 --> 00:11:30,560
and the correlation under any given

238
00:11:30,560 --> 00:11:33,519
muscles fake gamma lambda is obtained

239
00:11:33,519 --> 00:11:37,279
according to the pin up lemma

240
00:11:38,160 --> 00:11:40,800
what we should do is to find the third

241
00:11:40,800 --> 00:11:43,519
time lambda such that the corresponding

242
00:11:43,519 --> 00:11:47,360
correlation is as large as possible

243
00:11:47,360 --> 00:11:50,160
then we need to compute the correlations

244
00:11:50,160 --> 00:11:51,600
of the noises

245
00:11:51,600 --> 00:11:54,560
or given masks

246
00:11:55,440 --> 00:11:57,680
first for the computation of the

247
00:11:57,680 --> 00:12:00,720
correlation of n a and m b

248
00:12:00,720 --> 00:12:04,079
note that n a and m b have the same form

249
00:12:04,079 --> 00:12:06,880
but different input and output linear

250
00:12:06,880 --> 00:12:08,399
masks

251
00:12:08,399 --> 00:12:11,279
from there exp expressions a certain

252
00:12:11,279 --> 00:12:13,279
type of function is derived

253
00:12:13,279 --> 00:12:14,720
denoted by

254
00:12:14,720 --> 00:12:17,279
math called g

255
00:12:17,279 --> 00:12:19,600
based on this function we define

256
00:12:19,600 --> 00:12:24,079
we define a type 3 function g as follows

257
00:12:24,079 --> 00:12:27,440
we verify that math code t can be

258
00:12:27,440 --> 00:12:30,399
expressed as four of three functions in

259
00:12:30,399 --> 00:12:32,959
parallel

260
00:12:34,959 --> 00:12:37,360
based on this we deduce that the

261
00:12:37,360 --> 00:12:40,639
correlations of n a and m b are computed

262
00:12:40,639 --> 00:12:41,959
as the

263
00:12:41,959 --> 00:12:44,880
multiplications of a correlation 3 under

264
00:12:44,880 --> 00:12:48,800
the corresponding partial mass

265
00:12:49,120 --> 00:12:51,680
since correlation 3 for an arbitrary

266
00:12:51,680 --> 00:12:54,880
mass turbo can be obtained by doing four

267
00:12:54,880 --> 00:12:58,160
matrix multiplications of small size

268
00:12:58,160 --> 00:12:59,600
the correlations

269
00:12:59,600 --> 00:13:02,720
of n a and m b can be obtained with

270
00:13:02,720 --> 00:13:04,240
constant time

271
00:13:04,240 --> 00:13:07,240
complexity

272
00:13:07,680 --> 00:13:10,079
next for the computation of the

273
00:13:10,079 --> 00:13:12,320
correlation of nc

274
00:13:12,320 --> 00:13:14,880
similarly a certain type of function is

275
00:13:14,880 --> 00:13:17,760
derived from the expression of nc

276
00:13:17,760 --> 00:13:21,360
denoted by methyl f

277
00:13:21,360 --> 00:13:23,600
which is a parallel

278
00:13:23,600 --> 00:13:27,120
application of 4 type 2 functions

279
00:13:27,120 --> 00:13:30,800
that is the addition modulo 2 to the

280
00:13:30,800 --> 00:13:35,680
power of 32 with 3 inputs

281
00:13:36,079 --> 00:13:39,120
the collision of nc is computed as the

282
00:13:39,120 --> 00:13:42,320
multiplications of correlation 2 under

283
00:13:42,320 --> 00:13:46,000
the corresponding partial mask

284
00:13:46,320 --> 00:13:48,480
this correlation tool for any given

285
00:13:48,480 --> 00:13:52,079
masses can be obtained by doing 32

286
00:13:52,079 --> 00:13:55,279
matrix multiplications of small science

287
00:13:55,279 --> 00:13:57,839
the correlation of nc can be obtained

288
00:13:57,839 --> 00:13:59,040
with the

289
00:13:59,040 --> 00:14:02,920
constant time complexity

290
00:14:03,680 --> 00:14:07,440
for the noise in d note that sub bytes

291
00:14:07,440 --> 00:14:10,079
is an application of

292
00:14:10,079 --> 00:14:12,800
16 e s s boxes

293
00:14:12,800 --> 00:14:14,480
and can also be

294
00:14:14,480 --> 00:14:16,959
represented as four parallel

295
00:14:16,959 --> 00:14:21,680
applications of hackman function xbox

296
00:14:21,680 --> 00:14:23,839
then the correlation of nd can be

297
00:14:23,839 --> 00:14:25,680
obtained through

298
00:14:25,680 --> 00:14:28,240
16 l80 lookups

299
00:14:28,240 --> 00:14:30,639
which is of course a constant time

300
00:14:30,639 --> 00:14:33,279
procedure

301
00:14:34,399 --> 00:14:36,880
with the continued time algorithms for

302
00:14:36,880 --> 00:14:38,959
computing the correlations of four

303
00:14:38,959 --> 00:14:40,240
subnoses

304
00:14:40,240 --> 00:14:42,720
we can carry out a wide range of search

305
00:14:42,720 --> 00:14:45,680
for began lambda which yielded high

306
00:14:45,680 --> 00:14:47,519
correlations

307
00:14:47,519 --> 00:14:50,639
in the paper we used a search strategy

308
00:14:50,639 --> 00:14:53,199
attempting to find some potential linear

309
00:14:53,199 --> 00:14:57,120
masses based on some observation

310
00:14:57,120 --> 00:14:59,600
we will skip the details but give the

311
00:14:59,600 --> 00:15:02,399
search results

312
00:15:02,399 --> 00:15:04,880
our best results have the correlation

313
00:15:04,880 --> 00:15:08,240
two to the power of minus eighteen point

314
00:15:08,240 --> 00:15:09,920
six seven

315
00:15:09,920 --> 00:15:11,519
and the ser

316
00:15:11,519 --> 00:15:14,959
sei is 2 tau of minus

317
00:15:14,959 --> 00:15:17,959
37.3

318
00:15:19,519 --> 00:15:21,519
following the general procedure of the

319
00:15:21,519 --> 00:15:23,920
first correlation check we propose an

320
00:15:23,920 --> 00:15:25,040
attack

321
00:15:25,040 --> 00:15:29,439
with linear positions in the table

322
00:15:30,399 --> 00:15:33,279
now we compare our results based on

323
00:15:33,279 --> 00:15:35,920
visualized linear approximations

324
00:15:35,920 --> 00:15:38,639
with data based on vitalized linear

325
00:15:38,639 --> 00:15:42,800
approximations in the design document

326
00:15:42,800 --> 00:15:45,440
our best linear approximation

327
00:15:45,440 --> 00:15:49,519
has the sei 2 to the power of minus

328
00:15:49,519 --> 00:15:51,759
37.3

329
00:15:51,759 --> 00:15:54,560
which is much larger than the best

330
00:15:54,560 --> 00:15:58,399
bitewise one with the with the sci 2 to

331
00:15:58,399 --> 00:16:02,600
the power of 58.7

332
00:16:02,880 --> 00:16:05,440
using the stronger positions we

333
00:16:05,440 --> 00:16:07,360
naturally introduce

334
00:16:07,360 --> 00:16:09,440
improve will naturally improve the

335
00:16:09,440 --> 00:16:12,399
faster correlation

336
00:16:14,560 --> 00:16:17,440
next we will introduce the visualized

337
00:16:17,440 --> 00:16:20,480
linear approximation of a new variant of

338
00:16:20,480 --> 00:16:22,000
snowy

339
00:16:22,000 --> 00:16:26,959
called snow v mood at 32 and mood at 8

340
00:16:26,959 --> 00:16:30,000
where the permutation sigma is used as

341
00:16:30,000 --> 00:16:32,160
proposed

342
00:16:32,160 --> 00:16:36,480
this finger shows the part of the fsm

343
00:16:36,480 --> 00:16:39,600
only the 32-bit adder used for updating

344
00:16:39,600 --> 00:16:43,360
the r1 register is replaced by 8-bit

345
00:16:43,360 --> 00:16:44,399
adder

346
00:16:44,399 --> 00:16:48,160
while everything else remains identical

347
00:16:48,160 --> 00:16:50,800
we will first study the bitrate's linear

348
00:16:50,800 --> 00:16:54,480
approximation for fsm by using previous

349
00:16:54,480 --> 00:16:56,800
algorithms

350
00:16:56,800 --> 00:16:59,680
as before we consider to apply the

351
00:16:59,680 --> 00:17:02,320
linear musculus pha gamma lambda to the

352
00:17:02,320 --> 00:17:05,039
key stream words at three different

353
00:17:05,039 --> 00:17:07,919
time instances respectively

354
00:17:07,919 --> 00:17:10,480
and then cancel out the non-linear

355
00:17:10,480 --> 00:17:13,039
contributions by decomposing the whole

356
00:17:13,039 --> 00:17:16,559
noise into four subnoses

357
00:17:16,559 --> 00:17:19,119
and finally obtain the bitwise linear

358
00:17:19,119 --> 00:17:23,760
approximation of the three-round fsm

359
00:17:23,760 --> 00:17:27,199
note that here the noises a and b are

360
00:17:27,199 --> 00:17:30,240
the same as that in the analysis of

361
00:17:30,240 --> 00:17:32,080
novice sigma 0

362
00:17:32,080 --> 00:17:34,880
while nc bar and indie bar are new

363
00:17:34,880 --> 00:17:36,559
introduced

364
00:17:36,559 --> 00:17:39,360
thus we need to compute the collisions

365
00:17:39,360 --> 00:17:42,959
of nc bar and indie bar

366
00:17:43,039 --> 00:17:46,480
nc bar is exactly the noise introduced

367
00:17:46,480 --> 00:17:49,600
by the b2i's linear approximation of the

368
00:17:49,600 --> 00:17:53,440
type 5 function introduced before

369
00:17:53,440 --> 00:17:56,240
then the correlation of nc bar for any

370
00:17:56,240 --> 00:17:57,360
given mass

371
00:17:57,360 --> 00:17:59,840
can be obtained by doing some matrix

372
00:17:59,840 --> 00:18:02,880
multiplications which is also a constant

373
00:18:02,880 --> 00:18:05,520
time procedure

374
00:18:05,520 --> 00:18:08,320
as for nd bar the correlation can be

375
00:18:08,320 --> 00:18:12,480
obtained through 16 l80 lookups

376
00:18:12,480 --> 00:18:15,200
to stand up the correlations of four sub

377
00:18:15,200 --> 00:18:18,640
noises can all be obtained with the

378
00:18:18,640 --> 00:18:22,480
constant time complexities

379
00:18:23,600 --> 00:18:26,240
as before we use a strategy based on

380
00:18:26,240 --> 00:18:28,720
some observations to search for the

381
00:18:28,720 --> 00:18:30,480
linear masks

382
00:18:30,480 --> 00:18:32,720
our best results are listed in this

383
00:18:32,720 --> 00:18:34,240
table

384
00:18:34,240 --> 00:18:36,960
with these approximations we also

385
00:18:36,960 --> 00:18:40,480
propose a faster correlation

386
00:18:40,960 --> 00:18:44,240
we skip the details

387
00:18:47,760 --> 00:18:50,640
finally we give a brief study on another

388
00:18:50,640 --> 00:18:53,679
variant of smoothie whose fatherwise

389
00:18:53,679 --> 00:18:56,480
linear proposition has been studied in

390
00:18:56,480 --> 00:19:00,080
the design document

391
00:19:00,960 --> 00:19:04,480
this is the part of the fsm

392
00:19:04,480 --> 00:19:07,679
the two 32-bit adders are both

393
00:19:07,679 --> 00:19:11,840
replaced by 8-bit adders

394
00:19:13,440 --> 00:19:16,240
we will sketch some ideas on how to find

395
00:19:16,240 --> 00:19:19,679
a good bitwise linear approximations but

396
00:19:19,679 --> 00:19:24,440
listed the best results we found

397
00:19:25,760 --> 00:19:27,760
compared with the results based on

398
00:19:27,760 --> 00:19:30,240
vitamins linear approximations in the

399
00:19:30,240 --> 00:19:34,000
design document we increase the bias

400
00:19:34,000 --> 00:19:38,400
of the linear approximation greatly

401
00:19:38,400 --> 00:19:40,720
finally i'd like to make a conclusion

402
00:19:40,720 --> 00:19:44,080
with this practitioner

403
00:19:44,799 --> 00:19:47,600
in this paper we present a number of

404
00:19:47,600 --> 00:19:49,840
stronger linear approximations for the

405
00:19:49,840 --> 00:19:53,200
system of several variants of snow feed

406
00:19:53,200 --> 00:19:55,360
and further propose

407
00:19:55,360 --> 00:19:58,640
improve the attacks accordingly

408
00:19:58,640 --> 00:20:01,200
although needs of our attacks threatens

409
00:20:01,200 --> 00:20:04,559
the security of snowy we provide new

410
00:20:04,559 --> 00:20:07,360
lights on the structure of snow like

411
00:20:07,360 --> 00:20:10,159
stream ciphers and also the bitwise

412
00:20:10,159 --> 00:20:14,000
linear approximation attacks

413
00:20:14,559 --> 00:20:17,039
that's all of my presentation

414
00:20:17,039 --> 00:20:20,480
thanks for your listening

