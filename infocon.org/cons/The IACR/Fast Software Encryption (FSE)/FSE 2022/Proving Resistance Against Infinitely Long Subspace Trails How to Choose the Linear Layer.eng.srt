1
00:00:00,160 --> 00:00:02,639
so welcome to this presentation this

2
00:00:02,639 --> 00:00:04,480
will be about proving the resistance

3
00:00:04,480 --> 00:00:06,960
against infinitely long subspace trace

4
00:00:06,960 --> 00:00:09,280
and more specifically on how to choose

5
00:00:09,280 --> 00:00:10,800
the linear layer in a partial espn

6
00:00:10,800 --> 00:00:12,080
scheme

7
00:00:12,080 --> 00:00:13,759
but this is joint work together with

8
00:00:13,759 --> 00:00:15,679
lorenzo and christian and my name is

9
00:00:15,679 --> 00:00:18,000
marcus

10
00:00:18,000 --> 00:00:20,320
so let me first start by giving you a

11
00:00:20,320 --> 00:00:22,480
short overview so we will first talk

12
00:00:22,480 --> 00:00:25,279
about motivation why is this important

13
00:00:25,279 --> 00:00:27,119
then we'll talk about partial spn

14
00:00:27,119 --> 00:00:29,279
schemes after that there's a short

15
00:00:29,279 --> 00:00:32,399
introduction subspace trace and then

16
00:00:32,399 --> 00:00:34,079
i'll give the results of the paper and

17
00:00:34,079 --> 00:00:35,280
main results

18
00:00:35,280 --> 00:00:37,360
namely infinitely long subspace trails

19
00:00:37,360 --> 00:00:40,239
with inactive and with active s-boxes

20
00:00:40,239 --> 00:00:42,559
so we consider these quick two cases

21
00:00:42,559 --> 00:00:44,320
separately

22
00:00:44,320 --> 00:00:46,320
and at the end i'll talk about some

23
00:00:46,320 --> 00:00:49,920
practical results from our work

24
00:00:49,920 --> 00:00:53,199
so let's start recently there has been

25
00:00:53,199 --> 00:00:55,600
some popularity about things for example

26
00:00:55,600 --> 00:00:57,760
zero knowledge use cases and multi-party

27
00:00:57,760 --> 00:01:00,399
computational scenarios and in these use

28
00:01:00,399 --> 00:01:01,440
cases

29
00:01:01,440 --> 00:01:03,280
some schemes are

30
00:01:03,280 --> 00:01:04,879
quite popular namely skins which are

31
00:01:04,879 --> 00:01:07,840
based on partial spm like structures or

32
00:01:07,840 --> 00:01:10,400
which are even partial sbns

33
00:01:10,400 --> 00:01:13,600
so these schemes um include for example

34
00:01:13,600 --> 00:01:16,880
haiti's memcie or poseidon or starcut

35
00:01:16,880 --> 00:01:19,600
but unfortunately there have been some

36
00:01:19,600 --> 00:01:21,920
vulnerabilities in these schemes and

37
00:01:21,920 --> 00:01:24,240
they were found for example in these two

38
00:01:24,240 --> 00:01:26,799
papers on a crypto paper and a eurocrypt

39
00:01:26,799 --> 00:01:27,920
paper

40
00:01:27,920 --> 00:01:30,479
but these vulnerabilities are only for

41
00:01:30,479 --> 00:01:32,640
some particular cases so for some of the

42
00:01:32,640 --> 00:01:34,799
proposed instances but not for all of

43
00:01:34,799 --> 00:01:36,079
them

44
00:01:36,079 --> 00:01:38,880
so the goal in this work is to answer

45
00:01:38,880 --> 00:01:40,880
the question how to essentially

46
00:01:40,880 --> 00:01:43,600
guarantee security in general for any

47
00:01:43,600 --> 00:01:47,679
such partially spn like scheme

48
00:01:48,640 --> 00:01:50,479
all right but what is a partially spn

49
00:01:50,479 --> 00:01:52,960
scheme so let me first start with sbn

50
00:01:52,960 --> 00:01:54,640
schemes a substitution permutation

51
00:01:54,640 --> 00:01:56,240
network we have

52
00:01:56,240 --> 00:01:58,799
so this is a classical one we have

53
00:01:58,799 --> 00:02:00,799
some inputs then we have a non-linear

54
00:02:00,799 --> 00:02:03,119
layer after that in a fine layer and so

55
00:02:03,119 --> 00:02:05,840
on and we do this for a finite number of

56
00:02:05,840 --> 00:02:07,040
rounds

57
00:02:07,040 --> 00:02:09,520
so the state size is t in this example

58
00:02:09,520 --> 00:02:10,318
here

59
00:02:10,318 --> 00:02:13,440
and we also use t as boxes in each state

60
00:02:13,440 --> 00:02:16,160
so essentially a full nonlinear layer

61
00:02:16,160 --> 00:02:19,599
and define functional defined layer is

62
00:02:19,599 --> 00:02:20,959
mostly a

63
00:02:20,959 --> 00:02:22,640
multiplication by some matrix so the

64
00:02:22,640 --> 00:02:24,800
linear layer plus the addition of a

65
00:02:24,800 --> 00:02:28,160
round constant or round key

66
00:02:28,319 --> 00:02:30,239
and this is an sbn

67
00:02:30,239 --> 00:02:32,080
and if we have a partial sbn then what

68
00:02:32,080 --> 00:02:34,400
we do is essentially we include instead

69
00:02:34,400 --> 00:02:37,200
of having a full nonlinear layer we have

70
00:02:37,200 --> 00:02:39,519
a partial nonlinear layer so in this

71
00:02:39,519 --> 00:02:42,160
example we use only one s box instead of

72
00:02:42,160 --> 00:02:44,400
four s boxes but everything else stays

73
00:02:44,400 --> 00:02:46,239
the same so most importantly the fine

74
00:02:46,239 --> 00:02:50,200
layer stays the same

75
00:02:50,640 --> 00:02:52,480
all right so the question we try to

76
00:02:52,480 --> 00:02:54,480
answer in this work is which properties

77
00:02:54,480 --> 00:02:56,879
does the linear layer m have to satisfy

78
00:02:56,879 --> 00:02:58,640
in order to prevent infinity long

79
00:02:58,640 --> 00:03:00,879
truncated differentials with probability

80
00:03:00,879 --> 00:03:03,200
one and they actually related to

81
00:03:03,200 --> 00:03:06,879
subspace trace as we'll see in a minute

82
00:03:06,879 --> 00:03:08,480
but first

83
00:03:08,480 --> 00:03:10,560
what is the subspace trail well if you

84
00:03:10,560 --> 00:03:12,720
consider for example this set of

85
00:03:12,720 --> 00:03:15,680
subspaces here you want to u r plus one

86
00:03:15,680 --> 00:03:18,159
and these are all proper subspaces then

87
00:03:18,159 --> 00:03:19,760
if this relation here holds so if

88
00:03:19,760 --> 00:03:22,400
essentially the round function applied

89
00:03:22,400 --> 00:03:24,879
to some of these subspaces

90
00:03:24,879 --> 00:03:25,920
plus

91
00:03:25,920 --> 00:03:28,480
constant value here in f

92
00:03:28,480 --> 00:03:30,720
is a subspace of the following subspace

93
00:03:30,720 --> 00:03:33,680
plus again some value then we call this

94
00:03:33,680 --> 00:03:36,319
set here and around subspace train so

95
00:03:36,319 --> 00:03:37,519
this is not yet

96
00:03:37,519 --> 00:03:39,760
infinitely long this is just an ordinary

97
00:03:39,760 --> 00:03:42,000
subspace tree for this specific round

98
00:03:42,000 --> 00:03:44,080
function r

99
00:03:44,080 --> 00:03:46,959
and further if all these u's here are

100
00:03:46,959 --> 00:03:49,519
the same then we say that the subspace

101
00:03:49,519 --> 00:03:52,560
trail is invariant

102
00:03:53,760 --> 00:03:55,840
and we can also go further and talk

103
00:03:55,840 --> 00:03:57,519
about iterative subspace trace of

104
00:03:57,519 --> 00:03:58,959
example if we have

105
00:03:58,959 --> 00:04:01,120
these b's here and so these are

106
00:04:01,120 --> 00:04:03,599
subspaces again proper subspaces and if

107
00:04:03,599 --> 00:04:06,480
they repeat themselves after some after

108
00:04:06,480 --> 00:04:08,159
some rounds of example with a period of

109
00:04:08,159 --> 00:04:10,879
r then we talk about an iterative so an

110
00:04:10,879 --> 00:04:13,280
infinitely long subspace tree which is

111
00:04:13,280 --> 00:04:15,840
iterative

112
00:04:16,959 --> 00:04:18,720
and what is the relation between

113
00:04:18,720 --> 00:04:20,639
truncated differentials with probability

114
00:04:20,639 --> 00:04:22,800
one and with subspace trace so we

115
00:04:22,800 --> 00:04:24,720
essentially have this relation here

116
00:04:24,720 --> 00:04:26,560
which already has been started in the

117
00:04:26,560 --> 00:04:28,800
literature before and essentially it

118
00:04:28,800 --> 00:04:31,120
allows us to focus on differences rather

119
00:04:31,120 --> 00:04:32,080
than

120
00:04:32,080 --> 00:04:34,560
two different inputs for example

121
00:04:34,560 --> 00:04:36,880
and this also simplifies

122
00:04:36,880 --> 00:04:38,960
a lot of a lot of our results because

123
00:04:38,960 --> 00:04:40,800
essentially we focus purely on subspace

124
00:04:40,800 --> 00:04:44,080
trace instead of these differences

125
00:04:44,080 --> 00:04:45,759
in both the analysis and also in our

126
00:04:45,759 --> 00:04:48,080
tools

127
00:04:49,840 --> 00:04:52,000
all right so if we come back to our pspn

128
00:04:52,000 --> 00:04:53,120
schemes so

129
00:04:53,120 --> 00:04:56,400
for example if we consider s so this s

130
00:04:56,400 --> 00:04:58,479
here as the solution set

131
00:04:58,479 --> 00:05:00,720
of these equations essentially so we

132
00:05:00,720 --> 00:05:03,199
want to have some zero here and for

133
00:05:03,199 --> 00:05:04,479
example the zero is now a zero

134
00:05:04,479 --> 00:05:05,520
difference

135
00:05:05,520 --> 00:05:06,880
so we want to have some zero difference

136
00:05:06,880 --> 00:05:08,560
here some zero difference also here and

137
00:05:08,560 --> 00:05:10,560
some zero difference here since the s

138
00:05:10,560 --> 00:05:13,360
boxes are then not active

139
00:05:13,360 --> 00:05:15,600
then in general the dimension of this uh

140
00:05:15,600 --> 00:05:17,520
solution set here is one and what

141
00:05:17,520 --> 00:05:20,160
happens is what that the

142
00:05:20,160 --> 00:05:23,280
difference in x0 would be zero uh

143
00:05:23,280 --> 00:05:26,720
same as here in this round and also here

144
00:05:26,720 --> 00:05:27,600
but

145
00:05:27,600 --> 00:05:30,080
we don't know if it's still zero here so

146
00:05:30,080 --> 00:05:32,160
probably not but it may also be zero

147
00:05:32,160 --> 00:05:34,639
here and essentially the

148
00:05:34,639 --> 00:05:36,800
the results or results show how to

149
00:05:36,800 --> 00:05:38,960
construct the linear layer such that we

150
00:05:38,960 --> 00:05:40,320
have a non-zero difference here such

151
00:05:40,320 --> 00:05:42,320
that we are safe essentially because we

152
00:05:42,320 --> 00:05:44,960
can always do this

153
00:05:44,960 --> 00:05:47,039
and it's well formulated in more detail

154
00:05:47,039 --> 00:05:48,479
here but essentially it's the same as

155
00:05:48,479 --> 00:05:51,520
before we just build s such that we

156
00:05:51,520 --> 00:05:53,759
produce these zeros we can of course

157
00:05:53,759 --> 00:05:56,240
only do this uh with this method for

158
00:05:56,240 --> 00:05:58,160
finite number of rounds since we lose

159
00:05:58,160 --> 00:05:59,680
the freedom then

160
00:05:59,680 --> 00:06:01,919
and essentially this is then a subspace

161
00:06:01,919 --> 00:06:03,919
tray with no active s boxes but of

162
00:06:03,919 --> 00:06:06,479
course with with this approach only we

163
00:06:06,479 --> 00:06:08,479
can't do this for an infinite number of

164
00:06:08,479 --> 00:06:10,880
rounds just for the finite number of

165
00:06:10,880 --> 00:06:13,600
rounds and this is always possible here

166
00:06:13,600 --> 00:06:17,039
for partial spn schemes

167
00:06:18,319 --> 00:06:19,919
so what are then infinitely long

168
00:06:19,919 --> 00:06:21,759
subspace trays with these inactive

169
00:06:21,759 --> 00:06:24,240
s-boxes this is the first part

170
00:06:24,240 --> 00:06:26,400
and first we'll focus on the properties

171
00:06:26,400 --> 00:06:29,440
of the linear layer so for example if we

172
00:06:29,440 --> 00:06:32,080
have some matrix m which is used as the

173
00:06:32,080 --> 00:06:33,919
linear layer and we have some

174
00:06:33,919 --> 00:06:36,240
eigenvalues here um and we have some

175
00:06:36,240 --> 00:06:38,240
eigenspaces then we know from linear

176
00:06:38,240 --> 00:06:40,319
algebra that essentially if we take some

177
00:06:40,319 --> 00:06:42,720
element of these eigenspaces and we

178
00:06:42,720 --> 00:06:45,280
multiply the matrix by this element

179
00:06:45,280 --> 00:06:46,880
then essentially the result will be the

180
00:06:46,880 --> 00:06:47,759
same

181
00:06:47,759 --> 00:06:50,639
the same element times some eigenvalue

182
00:06:50,639 --> 00:06:53,360
here so magnitude of that

183
00:06:53,360 --> 00:06:55,680
and if we now consider an initial

184
00:06:55,680 --> 00:06:58,160
subspace here denoted by is which is

185
00:06:58,160 --> 00:06:59,680
essentially

186
00:06:59,680 --> 00:07:01,840
generated by these eigen spaces

187
00:07:01,840 --> 00:07:04,880
intersected with this e's here and each

188
00:07:04,880 --> 00:07:07,120
e essentially means where it's defined

189
00:07:07,120 --> 00:07:09,840
here that if we have a difference then

190
00:07:09,840 --> 00:07:12,319
we only have it where we have no s boxes

191
00:07:12,319 --> 00:07:14,960
because wheels ss boxes so essentially

192
00:07:14,960 --> 00:07:16,319
these are the unit vectors at the

193
00:07:16,319 --> 00:07:19,520
positions where there are no s boxes

194
00:07:19,520 --> 00:07:21,520
and if we build such a space

195
00:07:21,520 --> 00:07:24,479
then from this definition here of course

196
00:07:24,479 --> 00:07:26,479
is generates an infinitely long

197
00:07:26,479 --> 00:07:30,440
invariant subspace trade

198
00:07:30,560 --> 00:07:33,520
and with an example we can also see this

199
00:07:33,520 --> 00:07:35,919
so we have here the nonlinear layer and

200
00:07:35,919 --> 00:07:37,680
remember that the s boxes in this

201
00:07:37,680 --> 00:07:39,599
example here only apply to the first

202
00:07:39,599 --> 00:07:41,759
word also we are working over a prime

203
00:07:41,759 --> 00:07:44,000
field here

204
00:07:44,000 --> 00:07:45,440
then if we have this nonlinear layer

205
00:07:45,440 --> 00:07:48,160
times the matrix or some matrix plus the

206
00:07:48,160 --> 00:07:50,000
round key in that case

207
00:07:50,000 --> 00:07:52,800
um then we will know since zero so this

208
00:07:52,800 --> 00:07:54,720
value here is an eigenvector of m we

209
00:07:54,720 --> 00:07:56,960
will know that the subspace which is

210
00:07:56,960 --> 00:07:59,280
generated by this eigenvector generates

211
00:07:59,280 --> 00:08:00,800
an infinitely long invariant subspace

212
00:08:00,800 --> 00:08:01,759
tray

213
00:08:01,759 --> 00:08:03,520
and note that this is very important

214
00:08:03,520 --> 00:08:05,039
that we have a zero at the first

215
00:08:05,039 --> 00:08:06,479
position since

216
00:08:06,479 --> 00:08:08,879
since it essentially means that the s

217
00:08:08,879 --> 00:08:11,360
box here doesn't uh change the result so

218
00:08:11,360 --> 00:08:14,000
it's not active

219
00:08:15,440 --> 00:08:18,319
but this is uh not not enough because

220
00:08:18,319 --> 00:08:20,319
what happens for example if

221
00:08:20,319 --> 00:08:22,319
the matrix or the matrix red they have

222
00:08:22,319 --> 00:08:24,720
no eigenspaces and this is indeed the

223
00:08:24,720 --> 00:08:27,120
case for some of the star cut matrices

224
00:08:27,120 --> 00:08:29,680
analyzed in this work here

225
00:08:29,680 --> 00:08:31,199
and then the eigen space condition is

226
00:08:31,199 --> 00:08:33,360
not sufficient and the matrix might

227
00:08:33,360 --> 00:08:36,159
still be vulnerable so what we need is

228
00:08:36,159 --> 00:08:38,958
something stronger

229
00:08:38,958 --> 00:08:40,880
and uh this is formulated here and it's

230
00:08:40,880 --> 00:08:43,919
actually uh not not so so complicated so

231
00:08:43,919 --> 00:08:44,959
essentially

232
00:08:44,959 --> 00:08:46,720
is so the

233
00:08:46,720 --> 00:08:49,200
the the initial space generally it's an

234
00:08:49,200 --> 00:08:51,200
infinitely long invariant subspace tree

235
00:08:51,200 --> 00:08:52,560
if and only if

236
00:08:52,560 --> 00:08:54,240
this condition here is fulfilled so

237
00:08:54,240 --> 00:08:56,399
essentially it means that

238
00:08:56,399 --> 00:08:58,399
some subspace is invariant through the

239
00:08:58,399 --> 00:09:01,360
matrix this is this condition here and

240
00:09:01,360 --> 00:09:04,080
this subspace has to be um

241
00:09:04,080 --> 00:09:06,640
so is has to be a subspace of this

242
00:09:06,640 --> 00:09:08,399
subspace here

243
00:09:08,399 --> 00:09:10,240
and we can we can also general

244
00:09:10,240 --> 00:09:13,200
generalize this to iterative long trace

245
00:09:13,200 --> 00:09:16,080
if we just replace the matrix m

246
00:09:16,080 --> 00:09:16,959
by

247
00:09:16,959 --> 00:09:18,880
the matrix to the power of l so to the

248
00:09:18,880 --> 00:09:20,000
power of

249
00:09:20,000 --> 00:09:21,680
so it replaces with the power of the

250
00:09:21,680 --> 00:09:23,519
matrix

251
00:09:23,519 --> 00:09:24,399
and

252
00:09:24,399 --> 00:09:27,440
also from from paper also if there's no

253
00:09:27,440 --> 00:09:29,279
invariant subspace tray then there also

254
00:09:29,279 --> 00:09:31,600
is that there is no interior iterative

255
00:09:31,600 --> 00:09:34,320
subspace train

256
00:09:34,839 --> 00:09:37,519
either right so how do we actually find

257
00:09:37,519 --> 00:09:38,480
these

258
00:09:38,480 --> 00:09:40,640
m invariant subspaces which fulfill

259
00:09:40,640 --> 00:09:42,640
essentially this condition here

260
00:09:42,640 --> 00:09:44,720
well it turns out there's a theorem so

261
00:09:44,720 --> 00:09:46,800
the primary decomposition theorem and i

262
00:09:46,800 --> 00:09:48,399
will not go into the detail here but

263
00:09:48,399 --> 00:09:50,720
essentially it allows us to split the

264
00:09:50,720 --> 00:09:52,800
full space here

265
00:09:52,800 --> 00:09:55,519
and into a decomposition so into m

266
00:09:55,519 --> 00:09:58,240
invariant subspaces these a i's here and

267
00:09:58,240 --> 00:10:00,160
they are m invariant since this

268
00:10:00,160 --> 00:10:03,439
condition here holds

269
00:10:03,760 --> 00:10:05,680
so what we can do in order to find

270
00:10:05,680 --> 00:10:08,000
infinitely long subspace trails is we

271
00:10:08,000 --> 00:10:10,480
first apply this theorem in order to

272
00:10:10,480 --> 00:10:11,360
find

273
00:10:11,360 --> 00:10:13,200
all the m invariant

274
00:10:13,200 --> 00:10:14,480
ai's

275
00:10:14,480 --> 00:10:16,160
and then we use the decomposition to

276
00:10:16,160 --> 00:10:18,560
find the trace where we just define

277
00:10:18,560 --> 00:10:20,399
these subspaces here where we again use

278
00:10:20,399 --> 00:10:22,720
the ai's and intersect them with these

279
00:10:22,720 --> 00:10:25,360
e's we need them such that we actually

280
00:10:25,360 --> 00:10:27,040
tell the system that no

281
00:10:27,040 --> 00:10:28,640
s boxes

282
00:10:28,640 --> 00:10:30,560
must be activated here

283
00:10:30,560 --> 00:10:33,040
so first as s boxes are inactive and

284
00:10:33,040 --> 00:10:35,040
then we just compute new spaces until

285
00:10:35,040 --> 00:10:38,079
they stabilize so either we have this

286
00:10:38,079 --> 00:10:40,320
stabilization here or we reach

287
00:10:40,320 --> 00:10:42,800
eventually a dimension which is zero and

288
00:10:42,800 --> 00:10:44,880
the proof to why that works is in the

289
00:10:44,880 --> 00:10:47,839
paper but essentially at the end we know

290
00:10:47,839 --> 00:10:49,920
that the matrix m is a vulnerable with

291
00:10:49,920 --> 00:10:51,440
respect to this

292
00:10:51,440 --> 00:10:53,920
input space here if and only if the

293
00:10:53,920 --> 00:10:57,680
final dimension is greater than zero

294
00:10:57,680 --> 00:10:59,680
otherwise there are no vulnerabilities

295
00:10:59,680 --> 00:11:01,920
at least when talking about inactive s

296
00:11:01,920 --> 00:11:04,319
boxes

297
00:11:04,800 --> 00:11:07,519
and this can also be generalized if we

298
00:11:07,519 --> 00:11:09,120
go so if

299
00:11:09,120 --> 00:11:11,680
so if we want to find iterative trace

300
00:11:11,680 --> 00:11:14,000
then we just replace again the m the

301
00:11:14,000 --> 00:11:16,720
matrix m by a power of it

302
00:11:16,720 --> 00:11:18,880
and indeed the initial subspace is then

303
00:11:18,880 --> 00:11:22,240
l round invariant

304
00:11:24,560 --> 00:11:26,959
so this was about inactive s boxes now

305
00:11:26,959 --> 00:11:29,040
let me also talk about the active s

306
00:11:29,040 --> 00:11:30,880
boxes so here we search for infinitely

307
00:11:30,880 --> 00:11:35,680
long subspace trays with active s-boxes

308
00:11:37,120 --> 00:11:40,399
and first again so a very the intuitive

309
00:11:40,399 --> 00:11:42,640
approach of it so we know if we have

310
00:11:42,640 --> 00:11:45,600
active s-boxes that they must not change

311
00:11:45,600 --> 00:11:47,519
the space otherwise it doesn't work of

312
00:11:47,519 --> 00:11:48,560
course

313
00:11:48,560 --> 00:11:50,399
and so the intuitive approach would be

314
00:11:50,399 --> 00:11:52,560
to ensure that each of the inactive

315
00:11:52,560 --> 00:11:55,440
s-boxes they're actually inactive

316
00:11:55,440 --> 00:11:57,920
but if an s box is active then the space

317
00:11:57,920 --> 00:12:00,320
generated a single unit vector at its

318
00:12:00,320 --> 00:12:02,240
position so for example the

319
00:12:02,240 --> 00:12:05,600
the space generated the first s box here

320
00:12:05,600 --> 00:12:07,760
at the first position this space has to

321
00:12:07,760 --> 00:12:09,600
be fully included in the initial

322
00:12:09,600 --> 00:12:11,120
subspace

323
00:12:11,120 --> 00:12:12,959
so this space is generated by a unit

324
00:12:12,959 --> 00:12:14,240
vector

325
00:12:14,240 --> 00:12:16,480
and if these two conditions here are

326
00:12:16,480 --> 00:12:18,720
fulfilled then what we have in the end

327
00:12:18,720 --> 00:12:21,839
is that the active s boxes do not change

328
00:12:21,839 --> 00:12:25,000
the subspace

329
00:12:27,440 --> 00:12:29,519
and in more detail we have the following

330
00:12:29,519 --> 00:12:31,920
condition here so again we have an

331
00:12:31,920 --> 00:12:33,839
initial initial subspace here so that

332
00:12:33,839 --> 00:12:38,480
this p wants p2s and so on

333
00:12:38,480 --> 00:12:42,880
and um this is here essentially it has

334
00:12:42,880 --> 00:12:44,959
has some additional conditions for

335
00:12:44,959 --> 00:12:46,560
example we have this

336
00:12:46,560 --> 00:12:49,200
large i here which contains the indices

337
00:12:49,200 --> 00:12:51,360
of active s boxes

338
00:12:51,360 --> 00:12:53,760
and for this set here for the ice set if

339
00:12:53,760 --> 00:12:55,519
both of these conditions are fulfilled

340
00:12:55,519 --> 00:12:57,920
and these are essentially the conditions

341
00:12:57,920 --> 00:12:59,440
from the previous slide here just

342
00:12:59,440 --> 00:13:02,000
written down formally so if the initial

343
00:13:02,000 --> 00:13:03,519
subspace

344
00:13:03,519 --> 00:13:04,720
is

345
00:13:04,720 --> 00:13:06,480
intersected with essentially the

346
00:13:06,480 --> 00:13:08,959
positions of the active s boxes and the

347
00:13:08,959 --> 00:13:11,519
positions of the inactive s boxes is the

348
00:13:11,519 --> 00:13:12,880
initial subspace

349
00:13:12,880 --> 00:13:15,839
and if for every of the active s boxes

350
00:13:15,839 --> 00:13:18,079
we have that the space

351
00:13:18,079 --> 00:13:20,560
generated by it is fully included in is

352
00:13:20,560 --> 00:13:22,959
then essentially is generates an

353
00:13:22,959 --> 00:13:25,519
infinitely long invariant subspace tray

354
00:13:25,519 --> 00:13:27,279
with active s-boxes

355
00:13:27,279 --> 00:13:29,760
with respect to the active s-box

356
00:13:29,760 --> 00:13:32,720
positions in this set here

357
00:13:32,720 --> 00:13:34,399
and yeah what this essentially means is

358
00:13:34,399 --> 00:13:36,160
that we allow to activate words only

359
00:13:36,160 --> 00:13:38,480
where active s-boxes are allowed so

360
00:13:38,480 --> 00:13:40,079
where we allow them as a sign or

361
00:13:40,079 --> 00:13:41,360
attacker

362
00:13:41,360 --> 00:13:43,600
and if an s-box is active then every

363
00:13:43,600 --> 00:13:47,120
possible output of this s-box is also an

364
00:13:47,120 --> 00:13:49,839
element of the space here

365
00:13:49,839 --> 00:13:51,680
so when applying the s-boxes now the

366
00:13:51,680 --> 00:13:56,239
subspace is essentially remains the same

367
00:13:57,680 --> 00:13:59,279
but there are some problems with this

368
00:13:59,279 --> 00:14:01,440
approach so for example computing all

369
00:14:01,440 --> 00:14:02,720
the possible

370
00:14:02,720 --> 00:14:06,560
ps so these subspaces here sorry

371
00:14:06,560 --> 00:14:08,320
this is not very easy because it depends

372
00:14:08,320 --> 00:14:11,360
on the size of the field it quickly gets

373
00:14:11,360 --> 00:14:14,000
very expensive and we cannot directly

374
00:14:14,000 --> 00:14:16,160
construct the initial subspace so we

375
00:14:16,160 --> 00:14:18,079
would need something like exhaustive

376
00:14:18,079 --> 00:14:20,000
search

377
00:14:20,000 --> 00:14:21,839
also provides only sufficient conditions

378
00:14:21,839 --> 00:14:23,760
so a matrix which does not satisfy these

379
00:14:23,760 --> 00:14:26,000
conditions might still be vulnerable

380
00:14:26,000 --> 00:14:28,320
somehow if we have such a method

381
00:14:28,320 --> 00:14:30,240
and what's also a problem is that the

382
00:14:30,240 --> 00:14:32,399
methods for the inactive trace so with

383
00:14:32,399 --> 00:14:35,279
these ais uh does not really work here

384
00:14:35,279 --> 00:14:37,600
since the subspace may involve uh

385
00:14:37,600 --> 00:14:41,600
multiple ai's sorry there's a typo here

386
00:14:41,600 --> 00:14:43,920
um so this does not work here and for an

387
00:14:43,920 --> 00:14:46,399
efficient algorithm we cannot really use

388
00:14:46,399 --> 00:14:49,040
this method

389
00:14:49,440 --> 00:14:51,760
so what do we do then our approach is

390
00:14:51,760 --> 00:14:53,920
actually based on something already

391
00:14:53,920 --> 00:14:56,000
given in the literature and it's a

392
00:14:56,000 --> 00:14:58,720
constructive strategy so we first start

393
00:14:58,720 --> 00:15:01,680
with some with an i which is generated

394
00:15:01,680 --> 00:15:04,320
by the active s box positions since we

395
00:15:04,320 --> 00:15:07,440
know that these unit vectors they have

396
00:15:07,440 --> 00:15:08,480
to be

397
00:15:08,480 --> 00:15:09,920
they have to be contained in the full

398
00:15:09,920 --> 00:15:11,680
space

399
00:15:11,680 --> 00:15:13,440
in in the sort of not in the full space

400
00:15:13,440 --> 00:15:15,920
but in the initial space

401
00:15:15,920 --> 00:15:18,720
and now if we choose these vectors here

402
00:15:18,720 --> 00:15:21,040
these bases here we just keep increasing

403
00:15:21,040 --> 00:15:23,519
the dimension until it stabilizes under

404
00:15:23,519 --> 00:15:26,160
m and what we do here is again we add

405
00:15:26,160 --> 00:15:28,959
the vectors m to the power so n to the

406
00:15:28,959 --> 00:15:32,000
power of j times e i since we know that

407
00:15:32,000 --> 00:15:34,480
by definition these must be contained in

408
00:15:34,480 --> 00:15:36,160
the initial subspace

409
00:15:36,160 --> 00:15:38,959
and then before every s box or every

410
00:15:38,959 --> 00:15:40,560
position essentially

411
00:15:40,560 --> 00:15:41,279
we

412
00:15:41,279 --> 00:15:43,600
have that um

413
00:15:43,600 --> 00:15:45,040
that essentially

414
00:15:45,040 --> 00:15:47,440
all those are contained in these i so

415
00:15:47,440 --> 00:15:49,839
the the matrix to the power times

416
00:15:49,839 --> 00:15:51,279
some unit vector

417
00:15:51,279 --> 00:15:53,279
active position and so on

418
00:15:53,279 --> 00:15:55,839
then the subspace which is generated the

419
00:15:55,839 --> 00:15:57,440
subspace trail which is generated by

420
00:15:57,440 --> 00:16:00,079
this initial subspace here generates an

421
00:16:00,079 --> 00:16:02,160
infinitely long subspace trail invariant

422
00:16:02,160 --> 00:16:04,160
subspace trail with active s-box

423
00:16:04,160 --> 00:16:06,079
position with active

424
00:16:06,079 --> 00:16:09,519
s-boxes um in these positions here so

425
00:16:09,519 --> 00:16:11,519
again we have to set where essentially

426
00:16:11,519 --> 00:16:13,600
the node where we want to have the

427
00:16:13,600 --> 00:16:15,680
active s boxes

428
00:16:15,680 --> 00:16:18,079
and just the notation so this j

429
00:16:18,079 --> 00:16:21,360
here this this single j is the maximum j

430
00:16:21,360 --> 00:16:24,240
for all for all those j i's we need for

431
00:16:24,240 --> 00:16:27,759
each of the positions

432
00:16:29,519 --> 00:16:30,959
but if the previous condition is not

433
00:16:30,959 --> 00:16:32,639
fulfilled so we don't have this

434
00:16:32,639 --> 00:16:34,000
condition here

435
00:16:34,000 --> 00:16:35,519
then

436
00:16:35,519 --> 00:16:37,839
it doesn't stabilize really and instead

437
00:16:37,839 --> 00:16:40,560
of stabilizing it gets uh the dimension

438
00:16:40,560 --> 00:16:43,600
of the space we work with gets larger

439
00:16:43,600 --> 00:16:44,880
and essentially it's the dimensions

440
00:16:44,880 --> 00:16:47,440
before plus one and this means that

441
00:16:47,440 --> 00:16:49,199
eventually the largest possible

442
00:16:49,199 --> 00:16:51,199
dimension t will be reached with this

443
00:16:51,199 --> 00:16:54,079
method and in this case so if we reach

444
00:16:54,079 --> 00:16:56,480
the maximum dimension then no infinitely

445
00:16:56,480 --> 00:16:58,639
long invariant subspace tree with active

446
00:16:58,639 --> 00:17:01,519
s books with active s boxes exists for

447
00:17:01,519 --> 00:17:04,480
the for the s boxes chosen in these

448
00:17:04,480 --> 00:17:06,799
capital i here

449
00:17:06,799 --> 00:17:08,799
and this can be generalized also to

450
00:17:08,799 --> 00:17:11,039
infinitely long iterative trails by

451
00:17:11,039 --> 00:17:13,520
using multiple sets i so what does that

452
00:17:13,520 --> 00:17:16,240
mean so instead of allowing only a fixed

453
00:17:16,240 --> 00:17:18,480
number of active s boxes or a

454
00:17:18,480 --> 00:17:21,119
fixed set of active s boxes we change

455
00:17:21,119 --> 00:17:23,359
these set with every round since we

456
00:17:23,359 --> 00:17:25,119
don't have an invariant trailer we don't

457
00:17:25,119 --> 00:17:26,959
want to have an amber and trade but an

458
00:17:26,959 --> 00:17:28,799
iterative trade so it may so the

459
00:17:28,799 --> 00:17:31,039
subspaces may be different from round to

460
00:17:31,039 --> 00:17:33,840
round

461
00:17:34,799 --> 00:17:37,039
so let me also give some practical

462
00:17:37,039 --> 00:17:39,200
results so we consider a very generic

463
00:17:39,200 --> 00:17:41,120
spn scheme where we again have a round

464
00:17:41,120 --> 00:17:43,120
function defined by a nonlinear layer

465
00:17:43,120 --> 00:17:45,360
and then some affine layer

466
00:17:45,360 --> 00:17:47,039
we have only one s-books per round and

467
00:17:47,039 --> 00:17:49,120
we focus on prime fields and in the

468
00:17:49,120 --> 00:17:50,720
paper there are also results for binary

469
00:17:50,720 --> 00:17:51,600
fields

470
00:17:51,600 --> 00:17:54,000
and we focus on two classes of matrices

471
00:17:54,000 --> 00:17:56,559
namely random invertible matrices and

472
00:17:56,559 --> 00:18:01,840
random cushy matrices which are nds

473
00:18:02,400 --> 00:18:05,039
so first about the inactive s boxes so

474
00:18:05,039 --> 00:18:06,480
we see that

475
00:18:06,480 --> 00:18:08,320
essentially the field size plays a

476
00:18:08,320 --> 00:18:10,720
significant role and in particular if

477
00:18:10,720 --> 00:18:12,799
the field size is low so for example if

478
00:18:12,799 --> 00:18:16,000
we have a four bit field uh t is state

479
00:18:16,000 --> 00:18:18,880
size four then we have a very so

480
00:18:18,880 --> 00:18:20,480
a considerable

481
00:18:20,480 --> 00:18:23,039
percentage of vulnerable matrices in

482
00:18:23,039 --> 00:18:24,720
both cases so for random and virtual

483
00:18:24,720 --> 00:18:27,679
matrices but also for cushy matrices but

484
00:18:27,679 --> 00:18:28,880
if the

485
00:18:28,880 --> 00:18:31,600
so if this if the field size is larger

486
00:18:31,600 --> 00:18:34,559
so for example 16 bits 8 bits 12 bits

487
00:18:34,559 --> 00:18:36,799
then we see that the percentage of

488
00:18:36,799 --> 00:18:40,559
vulnerable matrices is very low

489
00:18:40,559 --> 00:18:42,640
and the results are similar in the case

490
00:18:42,640 --> 00:18:44,880
of active s-boxes so again the

491
00:18:44,880 --> 00:18:47,840
percentage is higher if we consider

492
00:18:47,840 --> 00:18:50,960
small fields and it starts to get low if

493
00:18:50,960 --> 00:18:53,679
we consider larger fields which means

494
00:18:53,679 --> 00:18:56,480
essentially if we have a scheme where it

495
00:18:56,480 --> 00:18:58,240
feels is quite large

496
00:18:58,240 --> 00:19:01,440
then without testing on the percentage

497
00:19:01,440 --> 00:19:04,000
of the matrix being vulnerable is quite

498
00:19:04,000 --> 00:19:06,240
low

499
00:19:09,039 --> 00:19:11,520
all right so if we basically include all

500
00:19:11,520 --> 00:19:13,760
of the results we have in the paper so

501
00:19:13,760 --> 00:19:15,840
which means infinitely long

502
00:19:15,840 --> 00:19:18,000
invariant phrase iterative traits both

503
00:19:18,000 --> 00:19:20,160
for the case of inactive s boxes of

504
00:19:20,160 --> 00:19:22,640
active s boxes we see that we have for

505
00:19:22,640 --> 00:19:25,440
example around 16 percent of vulnerable

506
00:19:25,440 --> 00:19:26,960
so around 16

507
00:19:26,960 --> 00:19:29,120
of the matrices are vulnerable if we

508
00:19:29,120 --> 00:19:31,280
consider again smaller fields

509
00:19:31,280 --> 00:19:32,880
but again if we

510
00:19:32,880 --> 00:19:35,440
essentially increase the field size the

511
00:19:35,440 --> 00:19:36,880
percentage of the matrix being

512
00:19:36,880 --> 00:19:39,440
vulnerable gets quite low again but

513
00:19:39,440 --> 00:19:41,280
still higher since here we consider all

514
00:19:41,280 --> 00:19:42,720
the results of the paper not just

515
00:19:42,720 --> 00:19:46,400
inactive or active as boxes

516
00:19:46,400 --> 00:19:49,120
and of course we have to fix some period

517
00:19:49,120 --> 00:19:51,760
up to which we search for the trails the

518
00:19:51,760 --> 00:19:54,480
iterative one

519
00:19:56,160 --> 00:19:57,600
so let me

520
00:19:57,600 --> 00:19:59,760
summarize with a sufficient condition

521
00:19:59,760 --> 00:20:01,360
which we also give and with a short

522
00:20:01,360 --> 00:20:02,880
summary here

523
00:20:02,880 --> 00:20:05,120
so a sufficient condition we have seen

524
00:20:05,120 --> 00:20:07,679
before that all the results we analyze

525
00:20:07,679 --> 00:20:10,480
essentially need m invariant subspaces

526
00:20:10,480 --> 00:20:12,000
so the idea is that we could just

527
00:20:12,000 --> 00:20:14,400
guarantee that no m invariant subspace

528
00:20:14,400 --> 00:20:15,440
exists

529
00:20:15,440 --> 00:20:17,520
and this is possible by the following

530
00:20:17,520 --> 00:20:18,880
theorem and we have to prove in the

531
00:20:18,880 --> 00:20:21,120
paper so essentially if all the minimal

532
00:20:21,120 --> 00:20:23,440
polynomials of the matrix m m to the

533
00:20:23,440 --> 00:20:24,640
power of 2

534
00:20:24,640 --> 00:20:27,280
until some fixed period again

535
00:20:27,280 --> 00:20:29,600
if all these minimal polynomials are of

536
00:20:29,600 --> 00:20:32,080
maximum degree and also irreducible then

537
00:20:32,080 --> 00:20:34,159
there is no infinitely long subsys

538
00:20:34,159 --> 00:20:36,159
subspace trade with or without active s

539
00:20:36,159 --> 00:20:39,919
boxes of period less than or equal to l

540
00:20:39,919 --> 00:20:41,039
so what this

541
00:20:41,039 --> 00:20:43,039
theorem allows is to basically easily

542
00:20:43,039 --> 00:20:47,120
check if a matrix if we can use a matrix

543
00:20:47,120 --> 00:20:48,960
but the condition is only sufficient

544
00:20:48,960 --> 00:20:50,480
which means that there are some secret

545
00:20:50,480 --> 00:20:53,039
matrices which do not fulfill this

546
00:20:53,039 --> 00:20:56,559
condition but i'll still see here

547
00:20:58,080 --> 00:21:00,559
so as a summary we have determined

548
00:21:00,559 --> 00:21:02,880
conditions for the security of linear

549
00:21:02,880 --> 00:21:05,039
layers in partial spn schemes and we

550
00:21:05,039 --> 00:21:06,640
consider both prime fields and also

551
00:21:06,640 --> 00:21:09,280
binary fields and both inactive s-boxes

552
00:21:09,280 --> 00:21:11,600
and also active s-boxes

553
00:21:11,600 --> 00:21:13,760
more details are given in the full paper

554
00:21:13,760 --> 00:21:16,080
so which includes proofs to these

555
00:21:16,080 --> 00:21:19,120
theorems but also algorithms and tools

556
00:21:19,120 --> 00:21:21,440
and the tools are also available here

557
00:21:21,440 --> 00:21:24,240
under this url here

558
00:21:24,240 --> 00:21:25,520
and let me also mention that

559
00:21:25,520 --> 00:21:27,360
differential attacks so we considered

560
00:21:27,360 --> 00:21:29,280
truncated differentials with probability

561
00:21:29,280 --> 00:21:31,360
1 in our paper but differential attacks

562
00:21:31,360 --> 00:21:33,200
are not the only concern and indeed

563
00:21:33,200 --> 00:21:35,840
algebraic attacks may also be important

564
00:21:35,840 --> 00:21:37,679
to consider because essentially we can

565
00:21:37,679 --> 00:21:40,960
exploit the the degree growth slower if

566
00:21:40,960 --> 00:21:42,000
we

567
00:21:42,000 --> 00:21:45,360
if we consider such these subspaces

568
00:21:45,360 --> 00:21:47,120
and this has also been

569
00:21:47,120 --> 00:21:50,559
discussed in this crypto paper here

570
00:21:50,559 --> 00:21:52,799
and finally the results allowed us to

571
00:21:52,799 --> 00:21:55,360
fix some potential issues with hades

572
00:21:55,360 --> 00:22:00,719
mimsc but also with poseidon and starcut

573
00:22:01,600 --> 00:22:05,080
thank you very much

