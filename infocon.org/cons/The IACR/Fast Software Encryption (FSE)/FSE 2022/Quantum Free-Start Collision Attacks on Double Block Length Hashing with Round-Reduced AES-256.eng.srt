1
00:00:00,880 --> 00:00:04,400
hello i'm amit kumar johan

2
00:00:04,400 --> 00:00:07,359
i am presenting our work

3
00:00:07,359 --> 00:00:09,040
quantum's restart collision attacks on

4
00:00:09,040 --> 00:00:10,960
double block line testing with ground

5
00:00:10,960 --> 00:00:13,519
reduced aes256

6
00:00:13,519 --> 00:00:15,360
this is a joint work with i will say

7
00:00:15,360 --> 00:00:18,160
kumar and sumitra

8
00:00:19,119 --> 00:00:20,800
has functions are an important and

9
00:00:20,800 --> 00:00:22,640
ubiquitous cryptography building blocks

10
00:00:22,640 --> 00:00:24,400
that are used in designing message

11
00:00:24,400 --> 00:00:26,320
authentication code signature schemes

12
00:00:26,320 --> 00:00:27,519
etc

13
00:00:27,519 --> 00:00:29,279
in post quantum era many public key

14
00:00:29,279 --> 00:00:31,279
schemes that huge hash functions are

15
00:00:31,279 --> 00:00:32,719
proven to be secure in the quantum

16
00:00:32,719 --> 00:00:34,239
random oracle model

17
00:00:34,239 --> 00:00:36,079
recently few works have also been

18
00:00:36,079 --> 00:00:37,200
studied

19
00:00:37,200 --> 00:00:39,040
have also studied the dedicated attack

20
00:00:39,040 --> 00:00:40,480
on the block cipher based hash functions

21
00:00:40,480 --> 00:00:42,640
such as workful grosstal in various

22
00:00:42,640 --> 00:00:45,440
quantum attack settings

23
00:00:45,440 --> 00:00:46,800
further double clock length has

24
00:00:46,800 --> 00:00:48,239
immediate value stimulus method for

25
00:00:48,239 --> 00:00:49,760
constructing your compression function

26
00:00:49,760 --> 00:00:53,039
with a two n bit output from and

27
00:00:53,039 --> 00:00:55,199
bit block cipher for example tandem dm

28
00:00:55,199 --> 00:00:58,480
microsdm hero function etc in this work

29
00:00:58,480 --> 00:01:00,719
we study dedicated quantum coordinates

30
00:01:00,719 --> 00:01:03,840
on hero series comparison function

31
00:01:03,840 --> 00:01:05,680
there was a design a detailed

32
00:01:05,680 --> 00:01:07,600
compression function f that makes two

33
00:01:07,600 --> 00:01:09,520
calls to an and with block cipher e that

34
00:01:09,520 --> 00:01:12,400
produces the output as follows f on

35
00:01:12,400 --> 00:01:13,840
input s0

36
00:01:13,840 --> 00:01:15,759
comma x1 comma m

37
00:01:15,759 --> 00:01:18,640
outputs d0 comma v1

38
00:01:18,640 --> 00:01:21,280
using the function f0 and m1 where the

39
00:01:21,280 --> 00:01:24,159
functions f0 and f1 are defined as

40
00:01:24,159 --> 00:01:27,200
f0 on input at zero comma h one comma m

41
00:01:27,200 --> 00:01:28,880
a equal to e

42
00:01:28,880 --> 00:01:32,079
of s zero zero with h zero where h one

43
00:01:32,079 --> 00:01:35,520
concatenation m one is the key

44
00:01:35,520 --> 00:01:38,159
input to the block cipher

45
00:01:38,159 --> 00:01:41,600
similarly we define defined f1

46
00:01:41,680 --> 00:01:45,280
how to find collision on scf

47
00:01:45,280 --> 00:01:48,240
so just uh recall the fact from the

48
00:01:48,240 --> 00:01:51,759
channeled paper uh canada paper in 2014

49
00:01:51,759 --> 00:01:53,439
suppose that a collision for zero is

50
00:01:53,439 --> 00:01:55,280
caused by the player at zero from h one

51
00:01:55,280 --> 00:01:57,840
comma m and h zero zero delta x zero

52
00:01:57,840 --> 00:01:59,520
comma x one comma m

53
00:01:59,520 --> 00:02:01,280
further assume that delta x zero equal

54
00:02:01,280 --> 00:02:03,280
to c then a collision for f one is also

55
00:02:03,280 --> 00:02:06,159
caused by the same pair

56
00:02:06,159 --> 00:02:08,560
so using the same fact the goal of

57
00:02:08,560 --> 00:02:10,318
finding collision forces of reduces to

58
00:02:10,318 --> 00:02:12,640
finding collision on zero

59
00:02:12,640 --> 00:02:14,800
for which we can proceed as follows so

60
00:02:14,800 --> 00:02:17,440
first find a colliding pair of inputs

61
00:02:17,440 --> 00:02:19,360
secondly output the pair

62
00:02:19,360 --> 00:02:21,520
only if delta is zero equal to c

63
00:02:21,520 --> 00:02:23,440
otherwise return to step one and repeat

64
00:02:23,440 --> 00:02:25,920
the process

65
00:02:25,920 --> 00:02:28,800
so what are the generate methods to find

66
00:02:28,800 --> 00:02:30,480
collisions so for a concrete hash

67
00:02:30,480 --> 00:02:32,640
function h the generic collision time

68
00:02:32,640 --> 00:02:35,200
attack complexity is big of 2 to the

69
00:02:35,200 --> 00:02:37,040
power n by two

70
00:02:37,040 --> 00:02:39,599
using birthday bound

71
00:02:39,599 --> 00:02:41,519
a dedicated collision attack is valid

72
00:02:41,519 --> 00:02:43,360
only if t less than two to the power n

73
00:02:43,360 --> 00:02:45,760
by two

74
00:02:46,480 --> 00:02:49,120
the dedicated method to find collisions

75
00:02:49,120 --> 00:02:51,519
generally uh consider differential

76
00:02:51,519 --> 00:02:53,440
cryptanalysis

77
00:02:53,440 --> 00:02:56,000
uh to find collisions for example md5

78
00:02:56,000 --> 00:02:59,040
whirlpool has hirosa etc the idea behind

79
00:02:59,040 --> 00:03:01,040
is to build a differential trail such

80
00:03:01,040 --> 00:03:02,800
that non-zero input different delta in

81
00:03:02,800 --> 00:03:04,239
can propagate to zero output

82
00:03:04,239 --> 00:03:05,519
differentiate out with a high

83
00:03:05,519 --> 00:03:07,840
probability

84
00:03:07,840 --> 00:03:09,680
typically differential trails for hash

85
00:03:09,680 --> 00:03:11,599
function consists of two parts control

86
00:03:11,599 --> 00:03:14,239
part and uncontrolled part control part

87
00:03:14,239 --> 00:03:16,800
in which complex trail is

88
00:03:16,800 --> 00:03:18,640
efficiently satisfied by using degrees

89
00:03:18,640 --> 00:03:21,200
of freedom secondly uncontrolled part

90
00:03:21,200 --> 00:03:23,040
where fail is satisfied

91
00:03:23,040 --> 00:03:25,840
probabilistically

92
00:03:26,080 --> 00:03:27,760
usually controlled part is satisfied

93
00:03:27,760 --> 00:03:29,519
with negligible cost so the attack

94
00:03:29,519 --> 00:03:31,599
complexity is mainly dominated by the

95
00:03:31,599 --> 00:03:33,920
trail probability p of the uncontrolled

96
00:03:33,920 --> 00:03:34,959
part

97
00:03:34,959 --> 00:03:37,280
so the attack is valid if and only if t

98
00:03:37,280 --> 00:03:40,560
is equal to one by p which

99
00:03:41,319 --> 00:03:43,760
is greater than 2 to the power minus n

100
00:03:43,760 --> 00:03:46,879
by 2.

101
00:03:46,879 --> 00:03:48,400
next we discuss the quantum script

102
00:03:48,400 --> 00:03:50,560
analysis and quantum settings so there

103
00:03:50,560 --> 00:03:52,720
are two kind of quantum attack models

104
00:03:52,720 --> 00:03:54,959
one is cuban model other another is q2

105
00:03:54,959 --> 00:03:57,120
model in q1 model adversary is allowed

106
00:03:57,120 --> 00:03:59,519
to make classical queries plus

107
00:03:59,519 --> 00:04:01,200
he has also given the power of quantum

108
00:04:01,200 --> 00:04:03,760
computer in q2 model adversary is

109
00:04:03,760 --> 00:04:07,599
allowed to make quantum queries plus

110
00:04:07,599 --> 00:04:09,280
he has also given the power of quantum

111
00:04:09,280 --> 00:04:11,680
computers in general q1 model is more

112
00:04:11,680 --> 00:04:13,840
practical than q2 model because for

113
00:04:13,840 --> 00:04:16,160
block cipher it is hard to make quantum

114
00:04:16,160 --> 00:04:17,680
superposition queries to the online

115
00:04:17,680 --> 00:04:19,519
encryption oracle while for the hash

116
00:04:19,519 --> 00:04:21,358
function we can make quantum

117
00:04:21,358 --> 00:04:23,120
superposition queries to the hash

118
00:04:23,120 --> 00:04:26,160
functions offline

119
00:04:26,880 --> 00:04:28,720
so how to define quantum superposition

120
00:04:28,720 --> 00:04:31,280
queries so let f be a boolean function

121
00:04:31,280 --> 00:04:33,360
so the superposition or equal of f is

122
00:04:33,360 --> 00:04:35,440
the unity transformation you have that x

123
00:04:35,440 --> 00:04:38,240
on n plus one cubic system which sends a

124
00:04:38,240 --> 00:04:41,120
standard basis vector x y to x y over or

125
00:04:41,120 --> 00:04:42,080
fx

126
00:04:42,080 --> 00:04:44,160
as a linear operator ufx on the

127
00:04:44,160 --> 00:04:46,560
superposition states as

128
00:04:46,560 --> 00:04:48,639
uf on the summation of o

129
00:04:48,639 --> 00:04:52,160
or over all the x ax vector x vector 0

130
00:04:52,160 --> 00:04:53,520
equal to the sum

131
00:04:53,520 --> 00:04:56,320
over all the n's ax x vector x and

132
00:04:56,320 --> 00:04:57,840
vector f x

133
00:04:57,840 --> 00:05:00,479
so we can efficiently implement uf in

134
00:05:00,479 --> 00:05:02,400
the quantum circuit model as long as

135
00:05:02,400 --> 00:05:04,560
there exists an efficient classical

136
00:05:04,560 --> 00:05:05,600
circuit

137
00:05:05,600 --> 00:05:08,560
that could do itself

138
00:05:09,360 --> 00:05:11,919
quantum random access memories qram

139
00:05:11,919 --> 00:05:13,840
can also be seen as the

140
00:05:13,840 --> 00:05:16,240
quantum analog of the classical ram

141
00:05:16,240 --> 00:05:19,280
given a list of classical data l with

142
00:05:19,280 --> 00:05:22,160
vectors x i of length m

143
00:05:22,160 --> 00:05:24,800
the q rank for l can be modeled eigen

144
00:05:24,800 --> 00:05:27,759
unity transformation such that

145
00:05:27,759 --> 00:05:28,639
uh

146
00:05:28,639 --> 00:05:32,960
q ram on input address resistor

147
00:05:32,960 --> 00:05:35,280
and the output register y

148
00:05:35,280 --> 00:05:37,440
maps to

149
00:05:37,440 --> 00:05:39,120
input register

150
00:05:39,120 --> 00:05:40,960
address resistor i

151
00:05:40,960 --> 00:05:41,759
and

152
00:05:41,759 --> 00:05:46,000
output register by your xl

153
00:05:47,120 --> 00:05:48,800
similarly on the quantum superposition

154
00:05:48,800 --> 00:05:50,720
exercise we can define the

155
00:05:50,720 --> 00:05:55,840
action of infinity transformation uqrm

156
00:05:58,319 --> 00:06:00,800
however there are some problems of qrm

157
00:06:00,800 --> 00:06:03,520
it is unknown however king qram can be

158
00:06:03,520 --> 00:06:04,560
built

159
00:06:04,560 --> 00:06:07,440
or at least in case of large urms

160
00:06:07,440 --> 00:06:09,600
secondly a qram of size om can be

161
00:06:09,600 --> 00:06:11,360
simulated with the quantum circuit of

162
00:06:11,360 --> 00:06:13,199
size big of n that is

163
00:06:13,199 --> 00:06:15,360
size of qram equivalent to the number of

164
00:06:15,360 --> 00:06:17,280
keyboards in the circuit so attacks with

165
00:06:17,280 --> 00:06:19,919
a small column or even without theorem

166
00:06:19,919 --> 00:06:22,639
are actually more practical

167
00:06:22,639 --> 00:06:24,880
next we discuss governs algorithm which

168
00:06:24,880 --> 00:06:27,600
we use extensively in our work so given

169
00:06:27,600 --> 00:06:29,520
a search space of 2 to the power an

170
00:06:29,520 --> 00:06:31,440
element and a boolean function f the

171
00:06:31,440 --> 00:06:34,560
goal is to find x such that f of x

172
00:06:34,560 --> 00:06:36,400
in the classical setting we need about 2

173
00:06:36,400 --> 00:06:38,240
to the power and steps but in the

174
00:06:38,240 --> 00:06:39,840
quantum setting

175
00:06:39,840 --> 00:06:41,680
grover's algorithm needs about square

176
00:06:41,680 --> 00:06:43,360
root of 2 to the power n grover

177
00:06:43,360 --> 00:06:46,360
iterations

178
00:07:00,800 --> 00:07:03,440
so one can find such an x using gravers

179
00:07:03,440 --> 00:07:05,680
algorithm in square root of one by p

180
00:07:05,680 --> 00:07:08,000
time with quantum computers classically

181
00:07:08,000 --> 00:07:09,840
one can find such an x and one by b

182
00:07:09,840 --> 00:07:12,400
times so therefore we can have a

183
00:07:12,400 --> 00:07:14,160
quadratic speed of

184
00:07:14,160 --> 00:07:16,400
four differential capital capitalists

185
00:07:16,400 --> 00:07:19,440
in the quantum setting

186
00:07:19,599 --> 00:07:21,919
in the quantum setting the transistor is

187
00:07:21,919 --> 00:07:24,639
attack is valid if and only if t equal

188
00:07:24,639 --> 00:07:27,840
to square root of one by p

189
00:07:28,080 --> 00:07:30,479
uh in case of genetic methods for

190
00:07:30,479 --> 00:07:32,800
example bst the time and query

191
00:07:32,800 --> 00:07:36,479
complexity is 2 to the power n by 3 but

192
00:07:36,479 --> 00:07:38,639
the number of qubits required is very

193
00:07:38,639 --> 00:07:39,759
very large

194
00:07:39,759 --> 00:07:42,160
2 to the power n by 3

195
00:07:42,160 --> 00:07:44,479
in this setting attack is valid if p is

196
00:07:44,479 --> 00:07:46,879
greater than 2 to the power minus 2 n by

197
00:07:46,879 --> 00:07:49,120
3

198
00:07:52,240 --> 00:07:54,879
now we discuss our results so we apply a

199
00:07:54,879 --> 00:07:56,400
quantum version of the ground attack to

200
00:07:56,400 --> 00:07:58,160
find collisions on hero size compression

201
00:07:58,160 --> 00:07:59,440
function when the underlying block

202
00:07:59,440 --> 00:08:02,879
cipher is instantiated with aes256

203
00:08:02,879 --> 00:08:05,120
our rebound attack covers standard of

204
00:08:05,120 --> 00:08:07,440
scf aes 256 in the quantum attack

205
00:08:07,440 --> 00:08:08,319
setting

206
00:08:08,319 --> 00:08:10,319
our dedicated quantum collision attack

207
00:08:10,319 --> 00:08:11,599
are actually faster than generate

208
00:08:11,599 --> 00:08:13,280
quantum collision attacks

209
00:08:13,280 --> 00:08:16,240
even when small theorem or no theorem

210
00:08:16,240 --> 00:08:18,960
is available

211
00:08:19,840 --> 00:08:21,360
our attacks are also valid in the

212
00:08:21,360 --> 00:08:23,840
setting of time space tradeoffs we also

213
00:08:23,840 --> 00:08:25,599
propose a mil pbs method to

214
00:08:25,599 --> 00:08:27,840
systematically explore different trails

215
00:08:27,840 --> 00:08:29,360
for rebound attacks with multiple

216
00:08:29,360 --> 00:08:31,520
inbound features

217
00:08:31,520 --> 00:08:33,279
rebound attack is based on defensive

218
00:08:33,279 --> 00:08:35,039
grip analysis

219
00:08:35,039 --> 00:08:35,760
it

220
00:08:35,760 --> 00:08:37,440
divides the cipher into three parts

221
00:08:37,440 --> 00:08:39,839
outbound phase one inbound and outbound

222
00:08:39,839 --> 00:08:44,080
when r1 phase two in in one phase

223
00:08:44,080 --> 00:08:45,680
we perform a match in the middle to

224
00:08:45,680 --> 00:08:47,120
generate the starting points in the

225
00:08:47,120 --> 00:08:48,720
output phase from the starting point we

226
00:08:48,720 --> 00:08:51,200
compute forward and vibrate directions

227
00:08:51,200 --> 00:08:53,760
uh but in the outbound phases

228
00:08:53,760 --> 00:08:56,240
we also remark that if the probability

229
00:08:56,240 --> 00:08:58,080
of the outbound phase is p one has to

230
00:08:58,080 --> 00:09:00,080
get at least one by p starting points in

231
00:09:00,080 --> 00:09:02,080
the inbound k

232
00:09:02,080 --> 00:09:03,519
with p greater than two to the power

233
00:09:03,519 --> 00:09:06,320
minus n by two

234
00:09:06,320 --> 00:09:09,680
the assumption here is that that delta x

235
00:09:09,680 --> 00:09:11,360
input different delta x in the inbound

236
00:09:11,360 --> 00:09:12,160
phase

237
00:09:12,160 --> 00:09:13,440
propagates to delta zero with

238
00:09:13,440 --> 00:09:14,959
probability p one

239
00:09:14,959 --> 00:09:16,959
and output different delta y and line

240
00:09:16,959 --> 00:09:19,440
one phase propagates to delta zero with

241
00:09:19,440 --> 00:09:22,080
probability p two the delta 0 is matches

242
00:09:22,080 --> 00:09:25,040
with probability p0 so therefore

243
00:09:25,040 --> 00:09:26,959
the differential quality of the trail

244
00:09:26,959 --> 00:09:31,518
becomes p1 into p2 into p0

245
00:09:31,920 --> 00:09:34,240
we can use this

246
00:09:34,240 --> 00:09:35,600
idea of rebound attack to find

247
00:09:35,600 --> 00:09:39,360
collisions so we fixed uh delta x and

248
00:09:39,360 --> 00:09:40,399
delta y

249
00:09:40,399 --> 00:09:42,560
then where delta x

250
00:09:42,560 --> 00:09:44,399
propagates to delta 0 with probability v

251
00:09:44,399 --> 00:09:46,560
1 and delta y propagates to delta 0 with

252
00:09:46,560 --> 00:09:49,359
probability v 2

253
00:09:49,440 --> 00:09:52,320
we then compute

254
00:09:52,399 --> 00:09:53,360
uh

255
00:09:53,360 --> 00:09:56,320
x and x dash from delta x

256
00:09:56,320 --> 00:09:58,880
and y and y dash from del from delta y

257
00:09:58,880 --> 00:10:00,959
that satisfy this inbound differential

258
00:10:00,959 --> 00:10:03,519
and then we compute m from x

259
00:10:03,519 --> 00:10:07,040
c formed by f m dash from s dash and c

260
00:10:07,040 --> 00:10:08,880
dash from y

261
00:10:08,880 --> 00:10:11,200
and finally check if and your m dash

262
00:10:11,200 --> 00:10:15,839
equal to c 0 c dash in the output phase

263
00:10:16,240 --> 00:10:18,880
classically we need to try

264
00:10:18,880 --> 00:10:20,000
uh

265
00:10:20,000 --> 00:10:21,200
about

266
00:10:21,200 --> 00:10:23,680
one by p of times

267
00:10:23,680 --> 00:10:26,959
uh to have a match

268
00:10:28,320 --> 00:10:30,480
but in in quantum sorting we need to try

269
00:10:30,480 --> 00:10:34,480
one over square root of p outputs

270
00:10:34,720 --> 00:10:37,200
so here is this uh 10 now differential

271
00:10:37,200 --> 00:10:39,200
trail for area 256

272
00:10:39,200 --> 00:10:40,160
so

273
00:10:40,160 --> 00:10:43,040
here this round three round four

274
00:10:43,040 --> 00:10:45,200
we have in one phase one in round six

275
00:10:45,200 --> 00:10:47,600
and seven we have in one phase two

276
00:10:47,600 --> 00:10:49,200
in round five we connect these two

277
00:10:49,200 --> 00:10:51,200
inbound phases

278
00:10:51,200 --> 00:10:53,519
and from uh

279
00:10:53,519 --> 00:10:55,760
this delta six seven

280
00:10:55,760 --> 00:10:57,519
we move to round ten

281
00:10:57,519 --> 00:10:58,880
uh big probability two to the power

282
00:10:58,880 --> 00:11:02,959
minus 16 from z 3 delta g 3 we move to

283
00:11:02,959 --> 00:11:04,720
round 1 with probability 2 to the power

284
00:11:04,720 --> 00:11:06,959
minus 16

285
00:11:06,959 --> 00:11:09,519
and we also have the probability of 8

286
00:11:09,519 --> 00:11:12,880
white cancellation in x and w 2

287
00:11:12,880 --> 00:11:15,360
which is 2 to the power minus 64 so

288
00:11:15,360 --> 00:11:16,399
overall

289
00:11:16,399 --> 00:11:18,640
probability of the differential trail

290
00:11:18,640 --> 00:11:22,240
is 2 to the power minus 96

291
00:11:22,240 --> 00:11:24,480
we then use this trail to mount rebound

292
00:11:24,480 --> 00:11:27,040
attack or scalp 256 that returns a pair

293
00:11:27,040 --> 00:11:29,920
of collating inputs h 0 comma x 1 comma

294
00:11:29,920 --> 00:11:34,720
m and f 0 delta 0 comma h 1 comma m

295
00:11:34,720 --> 00:11:36,880
we also need a condition delta h 0 equal

296
00:11:36,880 --> 00:11:38,000
to c

297
00:11:38,000 --> 00:11:38,800
to

298
00:11:38,800 --> 00:11:41,839
have a complete attack on cf

299
00:11:41,839 --> 00:11:44,560
where we consider c has eight non-zero

300
00:11:44,560 --> 00:11:46,720
bytes at some particular positions and

301
00:11:46,720 --> 00:11:49,200
this can be achieved with probability

302
00:11:49,200 --> 00:11:51,680
two to the power minus 64. therefore the

303
00:11:51,680 --> 00:11:53,760
overall complexity of the attack is two

304
00:11:53,760 --> 00:11:55,600
to the power

305
00:11:55,600 --> 00:11:58,320
160

306
00:12:00,880 --> 00:12:02,320
now we give

307
00:12:02,320 --> 00:12:04,639
the quantum collision attack

308
00:12:04,639 --> 00:12:08,079
using rebound procedure

309
00:12:08,079 --> 00:12:11,360
in our attack the rebound attack

310
00:12:11,360 --> 00:12:13,760
has multiple inbound phases

311
00:12:13,760 --> 00:12:16,800
so for the first inbound differential uh

312
00:12:16,800 --> 00:12:18,800
delta in one delta out one with the

313
00:12:18,800 --> 00:12:20,480
input output difference

314
00:12:20,480 --> 00:12:22,000
for the second and more differences the

315
00:12:22,000 --> 00:12:23,600
input output difference sphere is

316
00:12:23,600 --> 00:12:26,959
denoted by delta into comma delta 2

317
00:12:26,959 --> 00:12:28,720
we then define a boolean function for

318
00:12:28,720 --> 00:12:31,519
the full inbound differential f

319
00:12:31,519 --> 00:12:32,880
for full

320
00:12:32,880 --> 00:12:34,639
inbound differential edge

321
00:12:34,639 --> 00:12:35,680
f

322
00:12:35,680 --> 00:12:39,600
such that f 32 cross f 248 grows up to

323
00:12:39,600 --> 00:12:42,399
48 cross up to 32 to f in a base such

324
00:12:42,399 --> 00:12:45,200
that f outputs one if and only if the

325
00:12:45,200 --> 00:12:47,519
starting points computed from the

326
00:12:47,519 --> 00:12:48,639
uh

327
00:12:48,639 --> 00:12:50,639
the input output difference and in the

328
00:12:50,639 --> 00:12:52,320
inbound phase full press the backward

329
00:12:52,320 --> 00:12:56,320
and forward output differences

330
00:12:56,320 --> 00:12:59,040
we can produce

331
00:13:01,120 --> 00:13:04,560
such that scf collides where h0 and h0 s

332
00:13:04,560 --> 00:13:06,320
are obtained from the starting point and

333
00:13:06,320 --> 00:13:09,040
h1 comma m is obtained from the keys

334
00:13:09,040 --> 00:13:11,760
derived from connecting rounds

335
00:13:11,760 --> 00:13:14,079
uh in inbound phases one and two

336
00:13:14,079 --> 00:13:15,600
by applying reverse algorithm with the

337
00:13:15,600 --> 00:13:19,120
quantum oracle uf for f we can find a

338
00:13:19,120 --> 00:13:20,959
collision with

339
00:13:20,959 --> 00:13:23,200
approximately pi by 4 into square root

340
00:13:23,200 --> 00:13:25,839
of 2 to the power 160 queries

341
00:13:25,839 --> 00:13:27,600
to estimate the overall complexity of

342
00:13:27,600 --> 00:13:28,880
the attack

343
00:13:28,880 --> 00:13:31,600
we need to

344
00:13:32,560 --> 00:13:34,480
find the exact complexity incurred by

345
00:13:34,480 --> 00:13:37,279
the implementation of uf

346
00:13:37,279 --> 00:13:39,440
so how to implement the quantum oracle

347
00:13:39,440 --> 00:13:41,199
uf we

348
00:13:41,199 --> 00:13:44,800
uh define a function d i that computes

349
00:13:44,800 --> 00:13:46,480
the actual input output data we are

350
00:13:46,480 --> 00:13:48,560
respecting the differentials of each

351
00:13:48,560 --> 00:13:51,760
xbox s by accessing the pre-computed dtt

352
00:13:51,760 --> 00:13:55,279
that is stored in qram

353
00:13:55,440 --> 00:13:57,360
so here in the algorithm in the

354
00:13:57,360 --> 00:14:00,240
implementation of uf the input is

355
00:14:00,240 --> 00:14:02,480
this delta n1 delta into delta over 1

356
00:14:02,480 --> 00:14:03,680
delta 2

357
00:14:03,680 --> 00:14:06,800
comma vector y and output is basically y

358
00:14:06,800 --> 00:14:08,000
is updated

359
00:14:08,000 --> 00:14:10,240
with your f

360
00:14:10,240 --> 00:14:12,480
on input output differences so we

361
00:14:12,480 --> 00:14:15,600
perform uh then one phase one for i

362
00:14:15,600 --> 00:14:18,399
equal to 0 to 15 in

363
00:14:18,399 --> 00:14:21,680
the differential delta x x 3 delta w 4

364
00:14:21,680 --> 00:14:22,959
and compute the corresponding

365
00:14:22,959 --> 00:14:25,920
differential then we run d i

366
00:14:25,920 --> 00:14:26,720
uh

367
00:14:26,720 --> 00:14:28,480
which gives

368
00:14:28,480 --> 00:14:30,800
the output as for i comma x four i just

369
00:14:30,800 --> 00:14:32,880
delta x four i

370
00:14:32,880 --> 00:14:34,399
similarly in the

371
00:14:34,399 --> 00:14:38,320
in one phase two we con

372
00:14:38,320 --> 00:14:43,040
get the output x7 i comma x7i delta x7i

373
00:14:43,040 --> 00:14:45,920
we then compute delta x 5 from delta w 4

374
00:14:45,920 --> 00:14:49,920
and delta by 6 from delta z 6.

375
00:14:50,160 --> 00:14:52,399
we connect these in one phases 1 and 2

376
00:14:52,399 --> 00:14:53,920
in round 5

377
00:14:53,920 --> 00:14:55,040
so

378
00:14:55,040 --> 00:14:58,399
we run d i 4 each delta x 5 to select

379
00:14:58,399 --> 00:15:00,079
the corresponding difference of delta y

380
00:15:00,079 --> 00:15:04,079
5 we compute delta x 6 from delta y 5

381
00:15:04,079 --> 00:15:05,120
then for

382
00:15:05,120 --> 00:15:08,480
j belonging to the positions 8 9 and 15

383
00:15:08,480 --> 00:15:11,600
we run dj on input delta x6 j comma

384
00:15:11,600 --> 00:15:15,600
delta by 60 if delta x6 and delta y6 are

385
00:15:15,600 --> 00:15:18,959
compatible then we return the x6i comma

386
00:15:18,959 --> 00:15:23,040
x6y0 delta x i as the output

387
00:15:23,040 --> 00:15:25,440
and further the output

388
00:15:25,440 --> 00:15:29,120
x 5 i comma x 5 i delta x 5 i

389
00:15:29,120 --> 00:15:30,880
corresponding

390
00:15:30,880 --> 00:15:33,279
output

391
00:15:34,240 --> 00:15:37,279
we then compute the bytes of

392
00:15:37,279 --> 00:15:38,639
the x 5

393
00:15:38,639 --> 00:15:42,000
we also compute the bytes of k4 from

394
00:15:42,000 --> 00:15:45,759
the corresponding bytes of w4 and x5

395
00:15:45,759 --> 00:15:47,040
following the other details of the

396
00:15:47,040 --> 00:15:48,959
algorithm we finally compute the round

397
00:15:48,959 --> 00:15:53,120
keys k0 k1 and so on k10

398
00:15:53,120 --> 00:15:54,480
we now create

399
00:15:54,480 --> 00:15:56,639
starting points drive from the input

400
00:15:56,639 --> 00:15:58,079
output differences

401
00:15:58,079 --> 00:16:01,600
first we set x 4 as x 4 0 to x 4 15 x 4

402
00:16:01,600 --> 00:16:02,399
dash

403
00:16:02,399 --> 00:16:06,240
as export 0 0 delta x 4 0 2 x 4 15 0

404
00:16:06,240 --> 00:16:09,600
delta x 4 15 similarly we set x7 and x7

405
00:16:09,600 --> 00:16:10,560
dash

406
00:16:10,560 --> 00:16:12,800
now if x4 and x4 has fulfills the

407
00:16:12,800 --> 00:16:14,399
backward output differential then we

408
00:16:14,399 --> 00:16:17,519
start one bit flag as one otherwise zero

409
00:16:17,519 --> 00:16:20,800
if x7 and x7 does full press the forward

410
00:16:20,800 --> 00:16:22,720
orbital differential then we set one bit

411
00:16:22,720 --> 00:16:26,000
flag flap to h1 otherwise we set flag to

412
00:16:26,000 --> 00:16:26,880
zero

413
00:16:26,880 --> 00:16:30,079
if both flag points

414
00:16:30,959 --> 00:16:32,800
then

415
00:16:32,800 --> 00:16:34,880
we update the output resistor as y zero

416
00:16:34,880 --> 00:16:36,399
one otherwise

417
00:16:36,399 --> 00:16:39,920
y remains invariant

418
00:16:43,279 --> 00:16:44,880
for the complexity analysis of the

419
00:16:44,880 --> 00:16:46,399
attack first

420
00:16:46,399 --> 00:16:48,079
the complexity of the computation of

421
00:16:48,079 --> 00:16:50,480
paranormal es is approximated by 200 as

422
00:16:50,480 --> 00:16:52,720
well computation secondly the complexity

423
00:16:52,720 --> 00:16:54,480
of one asset to the qram that restores

424
00:16:54,480 --> 00:16:56,399
the table of input output differential

425
00:16:56,399 --> 00:16:57,920
is equivalent to one as well as

426
00:16:57,920 --> 00:17:00,639
computation one absolute x evaluation

427
00:17:00,639 --> 00:17:02,079
further required two to the power minus

428
00:17:02,079 --> 00:17:04,559
six point six four down down a year 256

429
00:17:04,559 --> 00:17:06,000
computations

430
00:17:06,000 --> 00:17:08,559
oh overall by counting the xbox

431
00:17:08,559 --> 00:17:09,839
evaluations

432
00:17:09,839 --> 00:17:12,319
the complexity of uf is two to the power

433
00:17:12,319 --> 00:17:14,079
five point four six ten down the years

434
00:17:14,079 --> 00:17:16,799
for two previous computations

435
00:17:16,799 --> 00:17:19,799
since

436
00:17:23,359 --> 00:17:25,520
the complexity of finding the collision

437
00:17:25,520 --> 00:17:26,959
is

438
00:17:26,959 --> 00:17:30,480
approximately to the power 85 5.11 10

439
00:17:30,480 --> 00:17:31,760
down areas

440
00:17:31,760 --> 00:17:33,840
competitions

441
00:17:33,840 --> 00:17:35,280
in summary

442
00:17:35,280 --> 00:17:36,160
uh

443
00:17:36,160 --> 00:17:38,960
we have uh we consider two attack models

444
00:17:38,960 --> 00:17:39,919
uh

445
00:17:39,919 --> 00:17:42,320
one is view first we have two attack

446
00:17:42,320 --> 00:17:44,240
settings with qram and two second where

447
00:17:44,240 --> 00:17:46,960
you attack setting without qram so we

448
00:17:46,960 --> 00:17:48,720
just discussed the 10 round attack in

449
00:17:48,720 --> 00:17:50,000
queue for setting where the time

450
00:17:50,000 --> 00:17:53,039
complexity will be 85.1

451
00:17:53,039 --> 00:17:55,280
and the the current size it will become

452
00:17:55,280 --> 00:17:57,600
16 which is required to store the

453
00:17:57,600 --> 00:17:59,440
deleted level

454
00:17:59,440 --> 00:18:02,000
uh in the q2 setting we do not use any

455
00:18:02,000 --> 00:18:03,280
qram

456
00:18:03,280 --> 00:18:05,600
rather we access ddt using grover's

457
00:18:05,600 --> 00:18:07,039
algorithm

458
00:18:07,039 --> 00:18:09,679
so the the complicity time complexity of

459
00:18:09,679 --> 00:18:12,559
that is is increased little bit

460
00:18:12,559 --> 00:18:15,600
and it becomes 86.11

461
00:18:15,600 --> 00:18:18,799
and in the tsto setting if we have a

462
00:18:18,799 --> 00:18:20,880
quantum computer of size available as

463
00:18:20,880 --> 00:18:23,360
available then we can have

464
00:18:23,360 --> 00:18:25,760
uh the tag with time completed by eight

465
00:18:25,760 --> 00:18:27,840
point six one over square root of s by

466
00:18:27,840 --> 00:18:29,200
two to the power four

467
00:18:29,200 --> 00:18:31,039
if we apply the

468
00:18:31,039 --> 00:18:33,200
the cns algorithm

469
00:18:33,200 --> 00:18:35,760
uh uh generally

470
00:18:35,760 --> 00:18:38,240
on all the elements then the complexity

471
00:18:38,240 --> 00:18:42,520
to the power one zero two point four

472
00:18:45,200 --> 00:18:47,919
uh in conclusion uh the the classical

473
00:18:47,919 --> 00:18:50,000
security of primitives does not imply

474
00:18:50,000 --> 00:18:52,000
quantum security it also implies that

475
00:18:52,000 --> 00:18:53,200
different settles with the low

476
00:18:53,200 --> 00:18:54,880
probability in the classical setting can

477
00:18:54,880 --> 00:18:56,799
still be meaningful for quantum

478
00:18:56,799 --> 00:18:59,280
computers we improved collision attacks

479
00:18:59,280 --> 00:19:03,120
for scfas 256 to 10 rounds

480
00:19:03,120 --> 00:19:05,039
in the quantum setting

481
00:19:05,039 --> 00:19:07,600
while uh in in the classical setting

482
00:19:07,600 --> 00:19:09,440
there are just a nine and

483
00:19:09,440 --> 00:19:10,960
the attack on

484
00:19:10,960 --> 00:19:12,720
up to nine rounds

485
00:19:12,720 --> 00:19:15,039
uh as a future work finding more useful

486
00:19:15,039 --> 00:19:17,200
differentiators with low probabilities

487
00:19:17,200 --> 00:19:18,640
in various other kind of attack

488
00:19:18,640 --> 00:19:21,039
techniques can be an interesting problem

489
00:19:21,039 --> 00:19:24,880
to investigate in the quantum setting

490
00:19:24,880 --> 00:19:28,679
thank you for your attention

