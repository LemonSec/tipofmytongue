1
00:00:12,880 --> 00:00:15,120
thank you kevin so welcome to the second

2
00:00:15,120 --> 00:00:17,920
invited talk i'm very happy to introduce

3
00:00:17,920 --> 00:00:20,000
christian rashberger for this invited

4
00:00:20,000 --> 00:00:22,400
talk christian is a professor at tu

5
00:00:22,400 --> 00:00:24,400
grass he's a very important member of

6
00:00:24,400 --> 00:00:25,599
the fsc

7
00:00:25,599 --> 00:00:27,599
community he has done many work in the

8
00:00:27,599 --> 00:00:31,439
field and he was chair of fsc 2014.

9
00:00:31,439 --> 00:00:33,440
so christian did this phd on hash

10
00:00:33,440 --> 00:00:35,600
functions after the work of chia young

11
00:00:35,600 --> 00:00:38,079
wong at al on chawan and related hash

12
00:00:38,079 --> 00:00:39,680
functions

13
00:00:39,680 --> 00:00:40,719
and

14
00:00:40,719 --> 00:00:42,160
it is a lot of work in the field and i

15
00:00:42,160 --> 00:00:44,160
was also doing my phd at the time so we

16
00:00:44,160 --> 00:00:46,239
had many occasions to interact and i

17
00:00:46,239 --> 00:00:48,079
read a lot of his papers

18
00:00:48,079 --> 00:00:50,160
and it was a very interesting time for

19
00:00:50,160 --> 00:00:52,719
hash function to analysis and design

20
00:00:52,719 --> 00:00:55,199
and in particular one paper that stood

21
00:00:55,199 --> 00:00:57,840
out from a christian on christopher de

22
00:00:57,840 --> 00:01:00,640
was this paper where they give a way to

23
00:01:00,640 --> 00:01:02,320
build an automatic tool to find

24
00:01:02,320 --> 00:01:04,000
differential traits from shawan and i

25
00:01:04,000 --> 00:01:06,159
think this was a very influential

26
00:01:06,159 --> 00:01:07,920
paper and symmetric cryptography because

27
00:01:07,920 --> 00:01:09,600
before that a lot of the differential

28
00:01:09,600 --> 00:01:11,760
attacks were found by hands and at that

29
00:01:11,760 --> 00:01:13,439
time we started having tools to do that

30
00:01:13,439 --> 00:01:16,000
and this has we still had a lasting

31
00:01:16,000 --> 00:01:16,960
impact

32
00:01:16,960 --> 00:01:18,960
even today in this fsc we had lots of

33
00:01:18,960 --> 00:01:20,560
papers about automatic tools to find

34
00:01:20,560 --> 00:01:22,240
those attacks and i think this all goes

35
00:01:22,240 --> 00:01:23,360
back to this

36
00:01:23,360 --> 00:01:25,360
very important paper

37
00:01:25,360 --> 00:01:27,439
so there was a lot of work on shawwan at

38
00:01:27,439 --> 00:01:29,360
the time unfortunately nobody managed to

39
00:01:29,360 --> 00:01:31,680
find the collision in those days it took

40
00:01:31,680 --> 00:01:33,520
almost another 10 years before a

41
00:01:33,520 --> 00:01:35,920
collision was found but

42
00:01:35,920 --> 00:01:38,000
all this work was really based on

43
00:01:38,000 --> 00:01:39,280
this tool

44
00:01:39,280 --> 00:01:42,399
from christian and christoph

45
00:01:42,399 --> 00:01:44,240
so more generally christian did a lot of

46
00:01:44,240 --> 00:01:46,479
work in uh cryptanalysis uh in

47
00:01:46,479 --> 00:01:48,640
particular i think three important uh

48
00:01:48,640 --> 00:01:50,960
techniques that he proposed whether the

49
00:01:50,960 --> 00:01:52,960
rebound attack the big click attack and

50
00:01:52,960 --> 00:01:54,799
more recently the multiple of eight

51
00:01:54,799 --> 00:01:57,119
property on the aes and i think you've

52
00:01:57,119 --> 00:01:59,759
probably all heard about those tools and

53
00:01:59,759 --> 00:02:01,920
they have been or will be used in many

54
00:02:01,920 --> 00:02:03,680
different contexts

55
00:02:03,680 --> 00:02:06,079
uh christian also did a lot of work on

56
00:02:06,079 --> 00:02:08,080
primitive design and this will be uh i

57
00:02:08,080 --> 00:02:10,479
think the topic of his invited talk in

58
00:02:10,479 --> 00:02:12,879
particular is a designer of grosstal who

59
00:02:12,879 --> 00:02:14,800
was a chaffey finalist

60
00:02:14,800 --> 00:02:17,200
of prince of haraka low emc memcie

61
00:02:17,200 --> 00:02:18,879
roster island and i'm probably

62
00:02:18,879 --> 00:02:21,200
missing a few

63
00:02:21,200 --> 00:02:23,280
the more recently those designs have

64
00:02:23,280 --> 00:02:24,560
been oriented towards specific

65
00:02:24,560 --> 00:02:26,720
applications like fully morphic

66
00:02:26,720 --> 00:02:29,040
encryption npcs your knowledge and i

67
00:02:29,040 --> 00:02:30,319
guess this will

68
00:02:30,319 --> 00:02:32,879
uh christian will explain all of this

69
00:02:32,879 --> 00:02:35,040
but i think one important also a line of

70
00:02:35,040 --> 00:02:37,840
work in this area is uh that he's a

71
00:02:37,840 --> 00:02:39,680
co-designer of two signature scheme in

72
00:02:39,680 --> 00:02:41,519
the nist post quantum competition so

73
00:02:41,519 --> 00:02:43,280
this is a case where symmetric

74
00:02:43,280 --> 00:02:45,040
cryptography is used for public key

75
00:02:45,040 --> 00:02:47,040
cryptography and i think that's a very

76
00:02:47,040 --> 00:02:49,440
interesting line of work

77
00:02:49,440 --> 00:02:51,599
and to conclude i would just like to

78
00:02:51,599 --> 00:02:54,080
point out that uh well all this work has

79
00:02:54,080 --> 00:02:56,080
been very influential for the symmetric

80
00:02:56,080 --> 00:02:59,040
community where now

81
00:02:59,280 --> 00:03:01,120
a big amount of our work is now geared

82
00:03:01,120 --> 00:03:03,280
towards specific application with lots

83
00:03:03,280 --> 00:03:05,440
of new design new crypt analysis and in

84
00:03:05,440 --> 00:03:07,120
fact all of this is now leading us back

85
00:03:07,120 --> 00:03:08,239
to hash function design and

86
00:03:08,239 --> 00:03:11,599
cryptanalysis for uh stark and snark and

87
00:03:11,599 --> 00:03:12,800
things like this and this is kind of

88
00:03:12,800 --> 00:03:14,720
going around from the time of the shaft

89
00:03:14,720 --> 00:03:17,120
free competition i think that's a quite

90
00:03:17,120 --> 00:03:18,640
a nice evolution

91
00:03:18,640 --> 00:03:19,840
for the field

92
00:03:19,840 --> 00:03:20,560
so

93
00:03:20,560 --> 00:03:24,400
i will leave a floor to uh christian

94
00:03:27,040 --> 00:03:28,560
yeah thanks a lot get down for a very

95
00:03:28,560 --> 00:03:30,400
nice introduction brings back a lot of

96
00:03:30,400 --> 00:03:32,560
memories of the exciting time

97
00:03:32,560 --> 00:03:35,599
10-15 years ago and i think we are again

98
00:03:35,599 --> 00:03:37,840
having a very exciting time

99
00:03:37,840 --> 00:03:40,400
and uh so yeah thanks a lot also to fse

100
00:03:40,400 --> 00:03:41,200
for

101
00:03:41,200 --> 00:03:43,760
having me here i'm very glad to to give

102
00:03:43,760 --> 00:03:45,120
this talk and

103
00:03:45,120 --> 00:03:49,360
let me switch over to my slides

104
00:03:49,519 --> 00:03:52,519
okay

105
00:03:54,100 --> 00:03:57,289
[Music]

106
00:03:59,599 --> 00:04:00,720
okay

107
00:04:00,720 --> 00:04:03,040
okay let's okay so you can see my slides

108
00:04:03,040 --> 00:04:03,840
now

109
00:04:03,840 --> 00:04:05,599
on the internet

110
00:04:05,599 --> 00:04:07,599
yeah let me

111
00:04:07,599 --> 00:04:11,360
start out with a bit of a longer arc

112
00:04:11,360 --> 00:04:13,439
um somebody crypto is around for a long

113
00:04:13,439 --> 00:04:14,879
time

114
00:04:14,879 --> 00:04:16,720
public research and so many crypto since

115
00:04:16,720 --> 00:04:20,079
the 1970s perhaps and in the early days

116
00:04:20,079 --> 00:04:21,519
the

117
00:04:21,519 --> 00:04:23,759
well use cases were always around

118
00:04:23,759 --> 00:04:25,440
confidentiality of authenticity

119
00:04:25,440 --> 00:04:27,440
integrity related

120
00:04:27,440 --> 00:04:29,360
topics and in the early days the focus

121
00:04:29,360 --> 00:04:31,759
was a lot on

122
00:04:31,759 --> 00:04:34,160
hardware implementations being efficient

123
00:04:34,160 --> 00:04:37,199
in hardware until the 80s for sure

124
00:04:37,199 --> 00:04:40,560
a very nice example is the

125
00:04:40,560 --> 00:04:43,360
block cipher that became a standard

126
00:04:43,360 --> 00:04:45,759
we refer to it now as the ds

127
00:04:45,759 --> 00:04:48,240
i mean it was back then essentially a

128
00:04:48,240 --> 00:04:50,080
lightweight hardware design the s-boxes

129
00:04:50,080 --> 00:04:51,840
were designed such that they would fit

130
00:04:51,840 --> 00:04:54,479
at least one s-box on one chip

131
00:04:54,479 --> 00:04:55,759
at the time

132
00:04:55,759 --> 00:04:57,040
to these were the implementation

133
00:04:57,040 --> 00:04:58,960
constraints uh before that already we

134
00:04:58,960 --> 00:05:01,120
had a number of lfsr-based approaches

135
00:05:01,120 --> 00:05:03,280
that have been used perhaps even for for

136
00:05:03,280 --> 00:05:05,039
decades

137
00:05:05,039 --> 00:05:07,120
this changed a bit

138
00:05:07,120 --> 00:05:08,960
the latest in the 90s with more and more

139
00:05:08,960 --> 00:05:11,039
software implementations becoming

140
00:05:11,039 --> 00:05:12,720
relevant in addition to hardware this

141
00:05:12,720 --> 00:05:14,400
also

142
00:05:14,400 --> 00:05:16,560
was at the time when

143
00:05:16,560 --> 00:05:20,400
a new encryption standard was highly

144
00:05:20,400 --> 00:05:22,479
overdue and yes

145
00:05:22,479 --> 00:05:24,160
this election that was made then

146
00:05:24,160 --> 00:05:25,440
reflects this

147
00:05:25,440 --> 00:05:27,520
change where in addition to hardware

148
00:05:27,520 --> 00:05:28,880
implementation properties also soft

149
00:05:28,880 --> 00:05:31,440
implementation properties became quite

150
00:05:31,440 --> 00:05:32,880
quite important

151
00:05:32,880 --> 00:05:35,120
and more recently

152
00:05:35,120 --> 00:05:36,880
if anything else

153
00:05:36,880 --> 00:05:38,800
this uh importance of software

154
00:05:38,800 --> 00:05:40,720
environments became

155
00:05:40,720 --> 00:05:41,520
more

156
00:05:41,520 --> 00:05:43,440
boost if you want also due to

157
00:05:43,440 --> 00:05:45,440
virtualizations

158
00:05:45,440 --> 00:05:47,039
in this conference we we had another

159
00:05:47,039 --> 00:05:49,280
example from use cases in the telecom

160
00:05:49,280 --> 00:05:51,919
sector but there it was a for a long

161
00:05:51,919 --> 00:05:54,320
time uh one of the

162
00:05:54,320 --> 00:05:57,120
long-standing hardware interested

163
00:05:57,120 --> 00:05:59,039
uh corners of our design spaces if you

164
00:05:59,039 --> 00:06:00,080
want but also they are due to

165
00:06:00,080 --> 00:06:01,759
virtualization software implementation

166
00:06:01,759 --> 00:06:03,120
properties become

167
00:06:03,120 --> 00:06:04,960
more and more

168
00:06:04,960 --> 00:06:06,880
relevant

169
00:06:06,880 --> 00:06:10,080
yeah i try to illustrate the role of

170
00:06:10,080 --> 00:06:12,000
somebody crypto of our community in in a

171
00:06:12,000 --> 00:06:14,479
larger context of

172
00:06:14,479 --> 00:06:16,319
uh systems

173
00:06:16,319 --> 00:06:17,039
so

174
00:06:17,039 --> 00:06:19,199
i guess it's fair to say that um

175
00:06:19,199 --> 00:06:20,800
so many crypto primitives and i include

176
00:06:20,800 --> 00:06:24,479
cryptography caching here um

177
00:06:24,479 --> 00:06:26,479
plays a fundamental role

178
00:06:26,479 --> 00:06:29,039
and other layers that are

179
00:06:29,039 --> 00:06:30,639
needed in our security ecosystem built

180
00:06:30,639 --> 00:06:33,759
up in it classically

181
00:06:33,759 --> 00:06:37,120
we have hybrid encryption in order to

182
00:06:37,120 --> 00:06:39,280
simplify key management pki and so on on

183
00:06:39,280 --> 00:06:41,039
top of that we have

184
00:06:41,039 --> 00:06:43,039
just systems and users

185
00:06:43,039 --> 00:06:44,960
so that's something that the

186
00:06:44,960 --> 00:06:46,080
we

187
00:06:46,080 --> 00:06:49,120
have already for a long time

188
00:06:49,120 --> 00:06:50,240
and uh

189
00:06:50,240 --> 00:06:52,240
the purpose of my talk here is to give

190
00:06:52,240 --> 00:06:54,160
you a bit of an overview of

191
00:06:54,160 --> 00:06:55,840
new applications of symmetric geography

192
00:06:55,840 --> 00:06:56,960
that have developed and that are

193
00:06:56,960 --> 00:06:59,520
developing in the last five plus years

194
00:06:59,520 --> 00:07:01,919
and in particular i will focus on three

195
00:07:01,919 --> 00:07:04,799
different um

196
00:07:05,120 --> 00:07:06,800
new cryptographic functionalities let's

197
00:07:06,800 --> 00:07:08,560
say that in turn give rise to new use

198
00:07:08,560 --> 00:07:11,039
cases of crypto and also new demands for

199
00:07:11,039 --> 00:07:12,960
symmetric crypto and

200
00:07:12,960 --> 00:07:14,319
one of them is in the area of morphic

201
00:07:14,319 --> 00:07:15,680
encryption

202
00:07:15,680 --> 00:07:17,599
i'm singling out one use case they are

203
00:07:17,599 --> 00:07:19,360
very generic one namely

204
00:07:19,360 --> 00:07:22,240
the the problem and the task of reducing

205
00:07:22,240 --> 00:07:24,479
the almost inherent ciphertext expansion

206
00:07:24,479 --> 00:07:26,960
we have in this schemes

207
00:07:26,960 --> 00:07:27,919
then

208
00:07:27,919 --> 00:07:29,280
the area of secure multiparty

209
00:07:29,280 --> 00:07:31,599
computation is something that started

210
00:07:31,599 --> 00:07:34,240
out as a

211
00:07:34,560 --> 00:07:36,240
theory in the 80s but in the last 10

212
00:07:36,240 --> 00:07:37,919
years becoming more and more practical

213
00:07:37,919 --> 00:07:40,800
with commercializations

214
00:07:40,800 --> 00:07:42,840
happening a lot in the last

215
00:07:42,840 --> 00:07:45,759
years there are many use cases for for

216
00:07:45,759 --> 00:07:48,400
prfs for the medic crypto in there

217
00:07:48,400 --> 00:07:50,080
i will sink out for the purpose of my

218
00:07:50,080 --> 00:07:52,560
tokyo a very special

219
00:07:52,560 --> 00:07:55,599
use case namely

220
00:07:55,599 --> 00:07:59,280
a way to use npc in the head so to say

221
00:07:59,280 --> 00:08:01,919
in a non-active setting which it can

222
00:08:01,919 --> 00:08:03,840
then also use to create signature

223
00:08:03,840 --> 00:08:07,599
schemes and as we are now also

224
00:08:07,599 --> 00:08:10,720
our community is hunting for

225
00:08:10,720 --> 00:08:13,039
replacements for currently used uh key

226
00:08:13,039 --> 00:08:15,120
encapsulation signature schemes

227
00:08:15,120 --> 00:08:18,319
also against the power of future

228
00:08:18,319 --> 00:08:20,160
potentially stable quantum computers

229
00:08:20,160 --> 00:08:24,240
this is then a candidate for such um

230
00:08:24,240 --> 00:08:26,479
yeah for such a project and the last but

231
00:08:26,479 --> 00:08:28,800
not least in the air garcia merge proofs

232
00:08:28,800 --> 00:08:31,120
especially hash functions are

233
00:08:31,120 --> 00:08:32,799
needed there

234
00:08:32,799 --> 00:08:34,958
for example if you want to prove

235
00:08:34,958 --> 00:08:36,399
membership

236
00:08:36,399 --> 00:08:38,880
membership or in a set

237
00:08:38,880 --> 00:08:40,559
it always boils down to

238
00:08:40,559 --> 00:08:42,320
proving knowledge of a pre-image of hash

239
00:08:42,320 --> 00:08:43,919
function and they are the implementation

240
00:08:43,919 --> 00:08:45,040
properties

241
00:08:45,040 --> 00:08:46,800
of those hash functions relative to

242
00:08:46,800 --> 00:08:49,360
these proof systems are becoming

243
00:08:49,360 --> 00:08:51,920
very important

244
00:08:52,320 --> 00:08:55,279
so going back to my pyramids

245
00:08:55,279 --> 00:08:57,360
we have now a different layer if you

246
00:08:57,360 --> 00:08:59,760
want of of

247
00:08:59,760 --> 00:09:03,200
of of protocols of of libraries that

248
00:09:03,200 --> 00:09:05,200
we'll have to use

249
00:09:05,200 --> 00:09:07,120
also for efficiency reasons symmetric

250
00:09:07,120 --> 00:09:09,440
crypto again but this symmetric crypto

251
00:09:09,440 --> 00:09:12,240
layer this foundation again uh better be

252
00:09:12,240 --> 00:09:14,000
different because

253
00:09:14,000 --> 00:09:16,160
otherwise our efficiency

254
00:09:16,160 --> 00:09:18,160
the goal of somebody crypt is often to

255
00:09:18,160 --> 00:09:19,920
to

256
00:09:19,920 --> 00:09:22,000
enable applications by providing

257
00:09:22,000 --> 00:09:24,480
practical efficiency is otherwise not

258
00:09:24,480 --> 00:09:25,760
met and that's why

259
00:09:25,760 --> 00:09:29,360
i have these question marks here and um

260
00:09:29,360 --> 00:09:31,279
but uh what's happened in the last years

261
00:09:31,279 --> 00:09:33,279
is that we are trying to fill in these

262
00:09:33,279 --> 00:09:35,200
question marks and i hope uh at the end

263
00:09:35,200 --> 00:09:37,360
of the talk i have given you

264
00:09:37,360 --> 00:09:39,040
an idea of the

265
00:09:39,040 --> 00:09:41,519
current state of uh what's what's going

266
00:09:41,519 --> 00:09:43,200
on there

267
00:09:43,200 --> 00:09:45,839
uh and in order to prepare ourselves

268
00:09:45,839 --> 00:09:47,760
and equip ourselves with a mental model

269
00:09:47,760 --> 00:09:50,399
as to how we should think of

270
00:09:50,399 --> 00:09:52,480
of this new layer

271
00:09:52,480 --> 00:09:54,160
um

272
00:09:54,160 --> 00:09:56,480
i'm go again going going back to the 80s

273
00:09:56,480 --> 00:09:58,959
where we've seen this transition

274
00:09:58,959 --> 00:09:59,640
from

275
00:09:59,640 --> 00:10:01,519
a lot of interest in health

276
00:10:01,519 --> 00:10:04,079
implementations to an interest also was

277
00:10:04,079 --> 00:10:04,880
in

278
00:10:04,880 --> 00:10:06,720
in software implementations this doesn't

279
00:10:06,720 --> 00:10:08,480
mean that hardware went away not at all

280
00:10:08,480 --> 00:10:10,320
it was a group but software grow

281
00:10:10,320 --> 00:10:11,440
arguably

282
00:10:11,440 --> 00:10:13,600
uh much more

283
00:10:13,600 --> 00:10:15,360
and

284
00:10:15,360 --> 00:10:17,200
in some sense

285
00:10:17,200 --> 00:10:19,279
the way i see it is that we are also now

286
00:10:19,279 --> 00:10:21,279
in a such a transition again that of

287
00:10:21,279 --> 00:10:22,880
course hardhat and software direct

288
00:10:22,880 --> 00:10:24,959
implementation will not go away but

289
00:10:24,959 --> 00:10:26,560
there's this emergence of indirect

290
00:10:26,560 --> 00:10:28,959
implementations that's how you call it

291
00:10:28,959 --> 00:10:31,760
within protocols for this high function

292
00:10:31,760 --> 00:10:33,440
cryptography be it about the

293
00:10:33,440 --> 00:10:35,200
computations you know which proofs are

294
00:10:35,200 --> 00:10:36,240
related

295
00:10:36,240 --> 00:10:37,760
related high level

296
00:10:37,760 --> 00:10:39,839
protocols and um

297
00:10:39,839 --> 00:10:42,000
so maybe for us a way to think about

298
00:10:42,000 --> 00:10:45,120
this is in terms of virtual machine or

299
00:10:45,120 --> 00:10:47,839
or in terms of

300
00:10:48,000 --> 00:10:50,000
layers again so whereas in the 80s we

301
00:10:50,000 --> 00:10:51,600
had our hardware layer and then we built

302
00:10:51,600 --> 00:10:53,760
a symmetric crypt on top

303
00:10:53,760 --> 00:10:55,440
uh starting from the 90s we had the

304
00:10:55,440 --> 00:10:56,640
softer layer on top of the hardware

305
00:10:56,640 --> 00:10:57,839
layer and then we built our similar

306
00:10:57,839 --> 00:11:00,399
crypt on top and if you want now we

307
00:11:00,399 --> 00:11:02,000
have another virtual machine layer on

308
00:11:02,000 --> 00:11:03,839
top of this software hardware layer that

309
00:11:03,839 --> 00:11:07,600
gives us exposes us some some operations

310
00:11:07,600 --> 00:11:08,880
that are efficient some others are not

311
00:11:08,880 --> 00:11:11,760
so efficient and now our goal is to

312
00:11:11,760 --> 00:11:13,279
basically program this virtual machine

313
00:11:13,279 --> 00:11:15,760
with efficient symmetric crypto so i

314
00:11:15,760 --> 00:11:17,920
hope this dismantle model helps

315
00:11:17,920 --> 00:11:20,240
a bit to

316
00:11:20,240 --> 00:11:22,160
to to follow me throughout throughout

317
00:11:22,160 --> 00:11:24,719
this tokyo

318
00:11:25,360 --> 00:11:29,839
okay so this is the outline of my talk

319
00:11:31,200 --> 00:11:32,480
so we've been through the high level

320
00:11:32,480 --> 00:11:34,640
motivations and i will now

321
00:11:34,640 --> 00:11:38,079
move through three example applications

322
00:11:38,079 --> 00:11:41,040
basically telling a story as to

323
00:11:41,040 --> 00:11:42,959
how the development went where we are at

324
00:11:42,959 --> 00:11:44,720
the moment the thing is

325
00:11:44,720 --> 00:11:46,240
i guess we are early in this transition

326
00:11:46,240 --> 00:11:47,440
or in the middle of this transition so

327
00:11:47,440 --> 00:11:48,800
it's a bit hard to

328
00:11:48,800 --> 00:11:51,279
to be um

329
00:11:51,279 --> 00:11:52,800
clear it will be easier in five years

330
00:11:52,800 --> 00:11:54,560
time with the benefit of the inside to

331
00:11:54,560 --> 00:11:58,000
see what's actually worked and what not

332
00:11:58,000 --> 00:11:59,680
but i still hope

333
00:11:59,680 --> 00:12:02,880
i can make this as clear as possible

334
00:12:02,880 --> 00:12:04,720
there will be open problems

335
00:12:04,720 --> 00:12:06,880
along the way but they will have a

336
00:12:06,880 --> 00:12:09,680
separate section at the end with

337
00:12:09,680 --> 00:12:10,959
more thoughts on

338
00:12:10,959 --> 00:12:12,800
on hardcore

339
00:12:12,800 --> 00:12:13,519
uh

340
00:12:13,519 --> 00:12:16,160
so many crypto and crypto analysis

341
00:12:16,160 --> 00:12:17,920
problems if you want

342
00:12:17,920 --> 00:12:19,360
but let me start out with one of the

343
00:12:19,360 --> 00:12:20,959
applications and this is the one where i

344
00:12:20,959 --> 00:12:22,079
will spend

345
00:12:22,079 --> 00:12:22,880
more

346
00:12:22,880 --> 00:12:24,399
more time on

347
00:12:24,399 --> 00:12:26,880
the hybrid thermomorphic encryption case

348
00:12:26,880 --> 00:12:29,120
most of it is is quite generic

349
00:12:29,120 --> 00:12:30,800
it's also based on a very recent work

350
00:12:30,800 --> 00:12:32,160
with

351
00:12:32,160 --> 00:12:34,480
with my team

352
00:12:34,480 --> 00:12:37,680
that you can see here on the slide

353
00:12:37,680 --> 00:12:40,000
so but let me motivate this

354
00:12:40,000 --> 00:12:42,320
uh with another trends that uh

355
00:12:42,320 --> 00:12:44,880
we started seeing already 15 years ago

356
00:12:44,880 --> 00:12:47,200
um when people still talked about client

357
00:12:47,200 --> 00:12:48,720
and server architectures

358
00:12:48,720 --> 00:12:50,079
other people started to talk about cloud

359
00:12:50,079 --> 00:12:52,480
computing the difference may not be so

360
00:12:52,480 --> 00:12:56,140
big but anyway does this drive

361
00:12:56,140 --> 00:12:58,560
[Music]

362
00:12:58,560 --> 00:13:01,279
due to economic incentives to outsource

363
00:13:01,279 --> 00:13:02,880
computation

364
00:13:02,880 --> 00:13:05,200
an example machine learning

365
00:13:05,200 --> 00:13:07,839
as a service i have a number of

366
00:13:07,839 --> 00:13:09,440
pictures in my photo album and i don't

367
00:13:09,440 --> 00:13:10,880
want to classify them by hand i take

368
00:13:10,880 --> 00:13:13,360
them by hand i would like to ask

369
00:13:13,360 --> 00:13:15,200
a cloud service to do this for me

370
00:13:15,200 --> 00:13:16,399
perhaps

371
00:13:16,399 --> 00:13:18,480
a toy example is

372
00:13:18,480 --> 00:13:21,120
here on this slide um

373
00:13:21,120 --> 00:13:23,360
one obvious problem is perhaps that i

374
00:13:23,360 --> 00:13:26,480
don't want to share all my

375
00:13:26,560 --> 00:13:28,160
pictures of cats with

376
00:13:28,160 --> 00:13:29,600
some

377
00:13:29,600 --> 00:13:31,200
some some outside

378
00:13:31,200 --> 00:13:33,279
service but still i would like to use

379
00:13:33,279 --> 00:13:35,680
this tagging functionality

380
00:13:35,680 --> 00:13:38,320
this seems to be

381
00:13:38,320 --> 00:13:39,839
hard to

382
00:13:39,839 --> 00:13:41,680
to address but then homomorphic

383
00:13:41,680 --> 00:13:44,480
encryption in principle

384
00:13:44,480 --> 00:13:46,639
can help with that

385
00:13:46,639 --> 00:13:49,279
without homophobic encryption

386
00:13:49,279 --> 00:13:51,680
uh i as a client will send my data to

387
00:13:51,680 --> 00:13:53,360
some server the server needs to read it

388
00:13:53,360 --> 00:13:55,199
in the clear and sends them the data

389
00:13:55,199 --> 00:13:57,040
sound back

390
00:13:57,040 --> 00:13:58,639
so far so good but that's something that

391
00:13:58,639 --> 00:14:00,160
reveals

392
00:14:00,160 --> 00:14:00,839
our

393
00:14:00,839 --> 00:14:03,440
data here even on the line

394
00:14:03,440 --> 00:14:05,600
um but then most importantly even if

395
00:14:05,600 --> 00:14:07,680
it's encrypted on the line it will be

396
00:14:07,680 --> 00:14:09,600
will have to be decrypted on the

397
00:14:09,600 --> 00:14:11,360
on the server side and now i mentioned

398
00:14:11,360 --> 00:14:13,600
to you before um theoretically we know

399
00:14:13,600 --> 00:14:15,040
now since um

400
00:14:15,040 --> 00:14:17,760
since uh yeah self thirteen years

401
00:14:17,760 --> 00:14:19,839
we found a multi encryption principle we

402
00:14:19,839 --> 00:14:20,720
can

403
00:14:20,720 --> 00:14:23,040
perform everything in an encrypted

404
00:14:23,040 --> 00:14:25,760
domain as well so we can

405
00:14:25,760 --> 00:14:27,680
not only um

406
00:14:27,680 --> 00:14:30,079
store encrypted data but also compute on

407
00:14:30,079 --> 00:14:31,680
encrypted data without knowing the

408
00:14:31,680 --> 00:14:32,720
secret

409
00:14:32,720 --> 00:14:35,920
decryption key and by that's

410
00:14:35,920 --> 00:14:36,800
yeah

411
00:14:36,800 --> 00:14:39,360
allowing for more

412
00:14:39,360 --> 00:14:40,560
yeah allowing to support this

413
00:14:40,560 --> 00:14:43,119
outsourcing

414
00:14:43,199 --> 00:14:45,600
idea there are a number of underlying

415
00:14:45,600 --> 00:14:47,120
homomorphic encryption schemes i'm only

416
00:14:47,120 --> 00:14:48,240
listing

417
00:14:48,240 --> 00:14:50,079
a few here

418
00:14:50,079 --> 00:14:52,720
they all work with

419
00:14:52,720 --> 00:14:54,399
noise

420
00:14:54,399 --> 00:14:57,839
and they all depend on the number of uh

421
00:14:57,839 --> 00:15:00,240
operations that you want to do in this

422
00:15:00,240 --> 00:15:02,560
encrypted domain very often for most of

423
00:15:02,560 --> 00:15:03,760
these games not for all of them but for

424
00:15:03,760 --> 00:15:04,959
most of them

425
00:15:04,959 --> 00:15:08,240
the depth of the multiplication

426
00:15:08,240 --> 00:15:10,800
jacket that you want to perform

427
00:15:10,800 --> 00:15:12,880
drives a lot the

428
00:15:12,880 --> 00:15:15,120
overall size of the parameters in this

429
00:15:15,120 --> 00:15:16,160
scheme

430
00:15:16,160 --> 00:15:19,199
which then also affects the cost of all

431
00:15:19,199 --> 00:15:21,440
these operations that you that you that

432
00:15:21,440 --> 00:15:22,320
you

433
00:15:22,320 --> 00:15:26,279
want and need to do

434
00:15:26,480 --> 00:15:28,079
so with homophobic encryption in

435
00:15:28,079 --> 00:15:29,360
principle this

436
00:15:29,360 --> 00:15:31,839
situation can be addressed uh your data

437
00:15:31,839 --> 00:15:33,440
can be with your private key on the

438
00:15:33,440 --> 00:15:35,040
client side can be encrypted sent to the

439
00:15:35,040 --> 00:15:36,880
server the server

440
00:15:36,880 --> 00:15:39,040
can compute on it without decrypting it

441
00:15:39,040 --> 00:15:41,040
and sending it back

442
00:15:41,040 --> 00:15:43,199
so far the goods but one of the

443
00:15:43,199 --> 00:15:45,839
practical example practical problems

444
00:15:45,839 --> 00:15:47,920
is the huge ciphertext expansion you

445
00:15:47,920 --> 00:15:49,040
have here

446
00:15:49,040 --> 00:15:51,519
this can be between a factor 10 and a

447
00:15:51,519 --> 00:15:53,839
factor a million depending on the type

448
00:15:53,839 --> 00:15:56,560
of data that you're working with so

449
00:15:56,560 --> 00:15:58,720
you have already this additional cost on

450
00:15:58,720 --> 00:16:00,079
the server side because the brain

451
00:16:00,079 --> 00:16:02,240
computations are much much cheaper than

452
00:16:02,240 --> 00:16:05,360
these homomorphic computations but you

453
00:16:05,360 --> 00:16:07,920
also put a lot of load on the connection

454
00:16:07,920 --> 00:16:09,360
between

455
00:16:09,360 --> 00:16:11,680
the two end points here and perhaps also

456
00:16:11,680 --> 00:16:14,320
if the client is resource constrained um

457
00:16:14,320 --> 00:16:15,759
yeah

458
00:16:15,759 --> 00:16:17,519
you need a lot of energy perhaps to send

459
00:16:17,519 --> 00:16:19,680
all this all this data virus

460
00:16:19,680 --> 00:16:20,959
without

461
00:16:20,959 --> 00:16:23,279
this encryption this might be very very

462
00:16:23,279 --> 00:16:24,560
efficient

463
00:16:24,560 --> 00:16:26,560
so as a complete example

464
00:16:26,560 --> 00:16:30,240
for a popular

465
00:16:30,240 --> 00:16:31,680
ig library

466
00:16:31,680 --> 00:16:33,360
the smallest quantity that you can send

467
00:16:33,360 --> 00:16:34,880
is

468
00:16:34,880 --> 00:16:37,839
7.4 megabytes and what you can encode in

469
00:16:37,839 --> 00:16:39,199
terms of plain text

470
00:16:39,199 --> 00:16:42,320
uh maybe very little but up to 250

471
00:16:42,320 --> 00:16:44,160
kilobytes so the smallest possible

472
00:16:44,160 --> 00:16:45,519
cipher expansion here is already a

473
00:16:45,519 --> 00:16:46,880
factor 30

474
00:16:46,880 --> 00:16:48,959
or so

475
00:16:48,959 --> 00:16:50,000
and uh um

476
00:16:50,000 --> 00:16:51,839
you would however

477
00:16:51,839 --> 00:16:54,160
um encrypt the press message that you

478
00:16:54,160 --> 00:16:55,199
have

479
00:16:55,199 --> 00:16:57,120
the text that you have or the the image

480
00:16:57,120 --> 00:16:58,800
that you have or whatever with a simatic

481
00:16:58,800 --> 00:17:00,720
encryption scheme before

482
00:17:00,720 --> 00:17:01,839
send that

483
00:17:01,839 --> 00:17:04,480
as a cipher text to the server and then

484
00:17:04,480 --> 00:17:06,400
only homophobically

485
00:17:06,400 --> 00:17:08,400
encrypt the key for this symmetric

486
00:17:08,400 --> 00:17:10,959
encryption scheme then essentially you

487
00:17:10,959 --> 00:17:13,439
have addressed the ciphertext

488
00:17:13,439 --> 00:17:14,559
expansion

489
00:17:14,559 --> 00:17:18,480
so that's the that's the theory right

490
00:17:18,480 --> 00:17:20,400
here my illustration for that

491
00:17:20,400 --> 00:17:22,559
the

492
00:17:24,880 --> 00:17:27,439
the point the problem is even though i

493
00:17:27,439 --> 00:17:29,600
mean first of all if i only send a very

494
00:17:29,600 --> 00:17:30,880
small amount of data then this doesn't

495
00:17:30,880 --> 00:17:32,880
help much because the key needs to go

496
00:17:32,880 --> 00:17:35,520
for this flex expansion anyhow but very

497
00:17:35,520 --> 00:17:36,880
soon this

498
00:17:36,880 --> 00:17:38,080
um

499
00:17:38,080 --> 00:17:40,240
encryption of the secret key of this

500
00:17:40,240 --> 00:17:42,880
semantic encryption scheme will amortize

501
00:17:42,880 --> 00:17:44,400
and then

502
00:17:44,400 --> 00:17:47,200
indeed this effects expansion is largely

503
00:17:47,200 --> 00:17:49,600
addressed um

504
00:17:49,600 --> 00:17:52,480
the problem is now i have to decrypt

505
00:17:52,480 --> 00:17:53,360
this

506
00:17:53,360 --> 00:17:56,880
before i can even do my my my payload

507
00:17:56,880 --> 00:17:59,280
computation on this on this message on

508
00:17:59,280 --> 00:18:00,799
this on this input that i wanted to do

509
00:18:00,799 --> 00:18:02,880
for example image classification

510
00:18:02,880 --> 00:18:04,240
um

511
00:18:04,240 --> 00:18:06,240
and still have to decrypt it before so

512
00:18:06,240 --> 00:18:08,480
on top of the already heavy computations

513
00:18:08,480 --> 00:18:10,559
i have to do on the server side on the

514
00:18:10,559 --> 00:18:11,679
cloud

515
00:18:11,679 --> 00:18:14,240
i have to first decrypt so this

516
00:18:14,240 --> 00:18:15,520
increases

517
00:18:15,520 --> 00:18:16,880
not only the number of operations but

518
00:18:16,880 --> 00:18:18,160
also the depth

519
00:18:18,160 --> 00:18:21,679
and that's why this this puts a lot of

520
00:18:21,679 --> 00:18:23,120
this puts a lot of

521
00:18:23,120 --> 00:18:26,080
additional constraints on the cost

522
00:18:26,080 --> 00:18:27,440
of the

523
00:18:27,440 --> 00:18:30,559
yeah of the server set

524
00:18:30,559 --> 00:18:32,160
so basically

525
00:18:32,160 --> 00:18:34,880
this approach at the high level

526
00:18:34,880 --> 00:18:36,160
doesn't

527
00:18:36,160 --> 00:18:38,080
directly

528
00:18:38,080 --> 00:18:39,840
solve an issue without giving you

529
00:18:39,840 --> 00:18:41,840
drawbacks but it basically gives you a

530
00:18:41,840 --> 00:18:44,320
trade-off where on one hand you increase

531
00:18:44,320 --> 00:18:46,640
the server computations even more

532
00:18:46,640 --> 00:18:48,720
whereas at the same time you

533
00:18:48,720 --> 00:18:50,640
reduce data transmission you

534
00:18:50,640 --> 00:18:52,240
reduce efforts

535
00:18:52,240 --> 00:18:56,080
on the client side

536
00:18:56,080 --> 00:18:58,799
um so we tried to work this out uh at

537
00:18:58,799 --> 00:19:00,799
the high level and this is now doubly

538
00:19:00,799 --> 00:19:02,080
logarithmic

539
00:19:02,080 --> 00:19:04,720
uh graph that that shows that that shows

540
00:19:04,720 --> 00:19:06,000
the effect

541
00:19:06,000 --> 00:19:08,960
on the client side with and without this

542
00:19:08,960 --> 00:19:11,600
homomorphic hybrid muscle interruption

543
00:19:11,600 --> 00:19:14,240
so with

544
00:19:15,280 --> 00:19:17,520
what this basically shows is that uh

545
00:19:17,520 --> 00:19:19,440
for slow networks

546
00:19:19,440 --> 00:19:20,559
um

547
00:19:20,559 --> 00:19:22,400
the ciphertex expansion is prohibitive

548
00:19:22,400 --> 00:19:24,400
because they the runtime just to

549
00:19:24,400 --> 00:19:25,760
to send or

550
00:19:25,760 --> 00:19:28,870
to compute this uh this uh

551
00:19:28,870 --> 00:19:30,000
[Music]

552
00:19:30,000 --> 00:19:31,360
that the stuff that needs to be done on

553
00:19:31,360 --> 00:19:32,799
the client side is just prohibited if

554
00:19:32,799 --> 00:19:34,160
you have here

555
00:19:34,160 --> 00:19:36,799
many orders

556
00:19:37,039 --> 00:19:39,440
of making dudes in terms of seconds in

557
00:19:39,440 --> 00:19:41,440
run time

558
00:19:41,440 --> 00:19:42,400
um

559
00:19:42,400 --> 00:19:44,880
and then this becomes better uh

560
00:19:44,880 --> 00:19:46,720
with very high

561
00:19:46,720 --> 00:19:48,240
speed networks

562
00:19:48,240 --> 00:19:50,080
with hybridomorphic encryption you still

563
00:19:50,080 --> 00:19:51,760
have this trade-off curve but there are

564
00:19:51,760 --> 00:19:54,240
many others of making tubes

565
00:19:54,240 --> 00:19:55,840
better

566
00:19:55,840 --> 00:19:57,200
i mean of course it depends on many

567
00:19:57,200 --> 00:19:59,120
other things as well but this is a high

568
00:19:59,120 --> 00:20:00,240
level the

569
00:20:00,240 --> 00:20:02,480
big the big promise of this

570
00:20:02,480 --> 00:20:05,200
of this approach

571
00:20:05,360 --> 00:20:09,520
so to to wrap up um this is

572
00:20:09,520 --> 00:20:11,520
one use case for our new symmetric

573
00:20:11,520 --> 00:20:14,320
encryption schemes the depth of the

574
00:20:14,320 --> 00:20:15,679
circuit especially the depth of the

575
00:20:15,679 --> 00:20:17,440
specs and multiplications

576
00:20:17,440 --> 00:20:20,880
uh will be important and to classical

577
00:20:20,880 --> 00:20:22,799
symmetry crypto descends how does this

578
00:20:22,799 --> 00:20:25,280
translate to well this translates

579
00:20:25,280 --> 00:20:28,159
to low rounds descent so we want to we

580
00:20:28,159 --> 00:20:30,400
want to minimize the number of rounds

581
00:20:30,400 --> 00:20:32,080
basically at

582
00:20:32,080 --> 00:20:34,559
at all costs

583
00:20:34,559 --> 00:20:36,559
um

584
00:20:36,559 --> 00:20:39,600
what usually happens with

585
00:20:39,760 --> 00:20:41,600
constructions that only have a low

586
00:20:41,600 --> 00:20:43,200
number of rounds is that we are

587
00:20:43,200 --> 00:20:44,799
susceptible to

588
00:20:44,799 --> 00:20:47,360
types of attacks and

589
00:20:47,360 --> 00:20:49,600
one idea that i will outline

590
00:20:49,600 --> 00:20:52,960
in the next step will be to

591
00:20:52,960 --> 00:20:55,039
to move away from from static

592
00:20:55,039 --> 00:20:57,360
fine layers towards different layers

593
00:20:57,360 --> 00:21:00,479
that change all the time

594
00:21:00,840 --> 00:21:04,799
yeah so i tried to compile

595
00:21:04,799 --> 00:21:07,840
a list of the ideas that went into

596
00:21:07,840 --> 00:21:09,760
this field and i will walk

597
00:21:09,760 --> 00:21:11,200
through it

598
00:21:11,200 --> 00:21:13,919
right now for you

599
00:21:15,600 --> 00:21:17,200
so fairly soon after

600
00:21:17,200 --> 00:21:19,200
the first um

601
00:21:19,200 --> 00:21:21,360
effigy schemes were implemented people

602
00:21:21,360 --> 00:21:24,400
tried to on top of that uh basically as

603
00:21:24,400 --> 00:21:26,640
a use case as a test case implement

604
00:21:26,640 --> 00:21:28,880
a yes as well so this happened in 2012

605
00:21:28,880 --> 00:21:30,400
and this is basically the

606
00:21:30,400 --> 00:21:31,760
baseline for

607
00:21:31,760 --> 00:21:33,840
for for this kind of

608
00:21:33,840 --> 00:21:35,600
for this kind of research what happened

609
00:21:35,600 --> 00:21:36,960
first was that

610
00:21:36,960 --> 00:21:39,600
we and others

611
00:21:39,600 --> 00:21:43,200
looked into concrete designs that's

612
00:21:43,200 --> 00:21:44,880
still otherwise resemble classical block

613
00:21:44,880 --> 00:21:47,679
surface stream surface but minimize the

614
00:21:47,679 --> 00:21:51,039
number of ants and and aim for low depth

615
00:21:51,039 --> 00:21:52,159
that is

616
00:21:52,159 --> 00:21:54,320
the design on one hand with the idea of

617
00:21:54,320 --> 00:21:56,400
partial s boxes

618
00:21:56,400 --> 00:21:58,960
clavium on the other hand uh taking many

619
00:21:58,960 --> 00:22:01,679
ideas from from the tribulum design

620
00:22:01,679 --> 00:22:04,080
and and uh improving it towards a higher

621
00:22:04,080 --> 00:22:06,320
security level and also showing uh very

622
00:22:06,320 --> 00:22:08,480
good properties with respect to

623
00:22:08,480 --> 00:22:09,360
uh

624
00:22:09,360 --> 00:22:11,440
initially initially showing good

625
00:22:11,440 --> 00:22:14,240
property with respect to this use case

626
00:22:14,240 --> 00:22:15,919
uh what happened then later

627
00:22:15,919 --> 00:22:18,080
uh was that the new idea

628
00:22:18,080 --> 00:22:19,919
came in to the field namely to make

629
00:22:19,919 --> 00:22:21,600
relevant cryptographically relevant

630
00:22:21,600 --> 00:22:24,080
computations independent

631
00:22:24,080 --> 00:22:26,640
of the of the secret key that was first

632
00:22:26,640 --> 00:22:28,000
done by

633
00:22:28,000 --> 00:22:31,360
uh this anchor flip where uh

634
00:22:31,360 --> 00:22:34,159
yeah kirk is the mixing was offloaded uh

635
00:22:34,159 --> 00:22:36,799
in the raster design 2018 what we did is

636
00:22:36,799 --> 00:22:37,760
to

637
00:22:37,760 --> 00:22:38,799
to

638
00:22:38,799 --> 00:22:42,080
put more of this offloading

639
00:22:42,320 --> 00:22:43,840
put more of the cryptographically

640
00:22:43,840 --> 00:22:45,360
relevant computations into this

641
00:22:45,360 --> 00:22:47,760
offloading namely the

642
00:22:47,760 --> 00:22:50,640
yeah otherwise very otherwise

643
00:22:50,640 --> 00:22:51,919
not useful but because it's very

644
00:22:51,919 --> 00:22:53,200
expensive

645
00:22:53,200 --> 00:22:55,840
to generate these defined layers

646
00:22:55,840 --> 00:22:58,240
for our designs

647
00:22:58,240 --> 00:23:00,000
on the fly

648
00:23:00,000 --> 00:23:03,600
so that that happened in 2018

649
00:23:03,679 --> 00:23:04,799
four laps

650
00:23:04,799 --> 00:23:06,720
made for example with dasta made this

651
00:23:06,720 --> 00:23:08,640
offloading

652
00:23:08,640 --> 00:23:11,840
cheaper and very recently there was a

653
00:23:11,840 --> 00:23:14,880
correct in korea started to

654
00:23:14,880 --> 00:23:17,520
have variants that not only work over

655
00:23:17,520 --> 00:23:20,240
the bit strings but also over fp

656
00:23:20,240 --> 00:23:23,679
otherwise looking a bit similar to rasta

657
00:23:23,679 --> 00:23:26,960
so what happened more recently

658
00:23:27,280 --> 00:23:30,000
was to look more into this structure of

659
00:23:30,000 --> 00:23:31,919
the underlying homophobic encryption

660
00:23:31,919 --> 00:23:34,100
schemes

661
00:23:34,100 --> 00:23:36,320
[Music]

662
00:23:36,320 --> 00:23:39,520
our work here on pasta also focusing on

663
00:23:39,520 --> 00:23:41,679
on fp but uh exploiting more of the

664
00:23:41,679 --> 00:23:43,840
structure and hence

665
00:23:43,840 --> 00:23:46,240
having better better yeah better

666
00:23:46,240 --> 00:23:48,720
implementation properties

667
00:23:48,720 --> 00:23:50,480
faster another design by colleagues from

668
00:23:50,480 --> 00:23:52,880
the university of bergen um started out

669
00:23:52,880 --> 00:23:55,440
with with raster and and uh concretely

670
00:23:55,440 --> 00:23:58,640
optimized it for for concrete um

671
00:23:58,640 --> 00:24:01,200
homophobic encryption schemes also very

672
00:24:01,200 --> 00:24:02,720
uh exciting that's something that is

673
00:24:02,720 --> 00:24:05,200
that is also very new um

674
00:24:05,200 --> 00:24:07,520
a different uh support of this idea for

675
00:24:07,520 --> 00:24:09,600
a different type of uh hamburglar scheme

676
00:24:09,600 --> 00:24:12,400
namely cks which is is useful when you

677
00:24:12,400 --> 00:24:13,679
want to

678
00:24:13,679 --> 00:24:15,279
support machine learning use cases

679
00:24:15,279 --> 00:24:16,840
because they are you're

680
00:24:16,840 --> 00:24:18,799
naturally

681
00:24:18,799 --> 00:24:20,080
dealing with

682
00:24:20,080 --> 00:24:23,120
uncertainty and noise and you can work

683
00:24:23,120 --> 00:24:24,960
with the reels actually and there a new

684
00:24:24,960 --> 00:24:27,120
design for magical blastia could here

685
00:24:27,120 --> 00:24:28,720
was the first to

686
00:24:28,720 --> 00:24:29,760
to

687
00:24:29,760 --> 00:24:32,400
to show how this can work and then this

688
00:24:32,400 --> 00:24:34,640
is a very interesting

689
00:24:34,640 --> 00:24:38,159
uh landmark today that i like

690
00:24:38,159 --> 00:24:39,840
so i will not go into

691
00:24:39,840 --> 00:24:41,840
any specific details of

692
00:24:41,840 --> 00:24:44,559
those designs here anymore

693
00:24:44,559 --> 00:24:46,960
for the concrete case of pasta that that

694
00:24:46,960 --> 00:24:47,679
we

695
00:24:47,679 --> 00:24:50,480
that we did i have here a few i have a

696
00:24:50,480 --> 00:24:52,400
few takeaways

697
00:24:52,400 --> 00:24:54,960
so this is basically for the

698
00:24:54,960 --> 00:24:56,080
um

699
00:24:56,080 --> 00:25:00,799
type of hg scheme that is not

700
00:25:00,799 --> 00:25:02,480
used for for the machine learning use

701
00:25:02,480 --> 00:25:05,200
cases but but but for other computations

702
00:25:05,200 --> 00:25:06,559
uh

703
00:25:06,559 --> 00:25:08,000
this seems to be the most promising at

704
00:25:08,000 --> 00:25:09,840
the moment

705
00:25:09,840 --> 00:25:11,679
where the bandwidth

706
00:25:11,679 --> 00:25:13,520
reduction is something that we can

707
00:25:13,520 --> 00:25:16,000
report on with practical implementations

708
00:25:16,000 --> 00:25:16,799
of

709
00:25:16,799 --> 00:25:19,760
um a reduction of at least a factor 20

710
00:25:19,760 --> 00:25:21,039
but this is actually the worst case in

711
00:25:21,039 --> 00:25:23,520
practice is much more and the noise on

712
00:25:23,520 --> 00:25:25,039
the client side is the

713
00:25:25,039 --> 00:25:27,440
encryption you don't have to do this

714
00:25:27,440 --> 00:25:29,200
to the payloads the big payload

715
00:25:29,200 --> 00:25:30,400
encryption with the homomorphic

716
00:25:30,400 --> 00:25:31,760
equipment scheme anymore but we can do

717
00:25:31,760 --> 00:25:33,360
this with this semantic encryption

718
00:25:33,360 --> 00:25:35,200
scheme it's it's of course not as fast

719
00:25:35,200 --> 00:25:36,559
as

720
00:25:36,559 --> 00:25:38,320
our classical

721
00:25:38,320 --> 00:25:40,960
schemes but still much much faster than

722
00:25:40,960 --> 00:25:41,679
the

723
00:25:41,679 --> 00:25:43,360
alternative view

724
00:25:43,360 --> 00:25:46,559
so 500 we can report here

725
00:25:46,559 --> 00:25:47,840
um

726
00:25:47,840 --> 00:25:49,760
yeah on the server side as i mentioned

727
00:25:49,760 --> 00:25:51,760
before there's this trade-off so we

728
00:25:51,760 --> 00:25:53,760
increase the computations on the server

729
00:25:53,760 --> 00:25:55,039
side

730
00:25:55,039 --> 00:25:56,880
in particular

731
00:25:56,880 --> 00:26:00,159
we add more multiplications to whatever

732
00:26:00,159 --> 00:26:01,919
other payloads computations that you

733
00:26:01,919 --> 00:26:02,960
want to do

734
00:26:02,960 --> 00:26:04,960
um

735
00:26:04,960 --> 00:26:06,720
yeah in the integer case so that's the

736
00:26:06,720 --> 00:26:08,840
new thing in basta

737
00:26:08,840 --> 00:26:11,520
uh you don't have to convert your your

738
00:26:11,520 --> 00:26:13,360
circuit into into a binary circuit

739
00:26:13,360 --> 00:26:16,080
anymore you can stay with the integers

740
00:26:16,080 --> 00:26:17,919
in the rv we add uh

741
00:26:17,919 --> 00:26:20,400
four plus six uh multiplications

742
00:26:20,400 --> 00:26:22,960
the the best competitor but the the

743
00:26:22,960 --> 00:26:24,400
the best alternative

744
00:26:24,400 --> 00:26:25,840
for the binary case

745
00:26:25,840 --> 00:26:27,679
appears to be aggressive even though the

746
00:26:27,679 --> 00:26:28,960
security margin is there is there

747
00:26:28,960 --> 00:26:30,559
wrestling or is it having a single

748
00:26:30,559 --> 00:26:31,520
amount of

749
00:26:31,520 --> 00:26:33,840
additional computations to be done on

750
00:26:33,840 --> 00:26:35,840
the server set

751
00:26:35,840 --> 00:26:38,720
yeah so the random overheads uh is still

752
00:26:38,720 --> 00:26:41,200
quite substantial the runtime

753
00:26:41,200 --> 00:26:42,400
um

754
00:26:42,400 --> 00:26:44,400
for how much encryptions

755
00:26:44,400 --> 00:26:46,320
keen computations on the server side is

756
00:26:46,320 --> 00:26:47,760
already pretty

757
00:26:47,760 --> 00:26:50,320
pretty large and it depends

758
00:26:50,320 --> 00:26:52,640
on the use case how much larger it gets

759
00:26:52,640 --> 00:26:55,120
and that's

760
00:26:55,279 --> 00:26:57,760
that's a topic that was so far a bit um

761
00:26:57,760 --> 00:27:00,240
neglected in our in our community here

762
00:27:00,240 --> 00:27:02,880
we we simply designed the schemes and

763
00:27:02,880 --> 00:27:05,279
did not care about the use case

764
00:27:05,279 --> 00:27:07,840
we started to to consider uh complete

765
00:27:07,840 --> 00:27:10,080
use cases and we have a smaller one in

766
00:27:10,080 --> 00:27:12,480
the in the large

767
00:27:12,480 --> 00:27:13,600
and the large

768
00:27:13,600 --> 00:27:14,640
uh

769
00:27:14,640 --> 00:27:16,880
use case so the runtime overhead for

770
00:27:16,880 --> 00:27:18,480
large use cases is actually less than a

771
00:27:18,480 --> 00:27:20,720
factor 10.

772
00:27:20,720 --> 00:27:23,360
for smaller use cases uh the the runtime

773
00:27:23,360 --> 00:27:25,600
overheads can be more than a factor

774
00:27:25,600 --> 00:27:27,039
thousands

775
00:27:27,039 --> 00:27:29,279
so that means so

776
00:27:29,279 --> 00:27:30,799
the answer is basically

777
00:27:30,799 --> 00:27:34,159
um it depends but the nice thing about

778
00:27:34,159 --> 00:27:35,760
homomorphic encryption there is other

779
00:27:35,760 --> 00:27:38,240
other application areas like this that

780
00:27:38,240 --> 00:27:40,320
every year you see

781
00:27:40,320 --> 00:27:41,919
um

782
00:27:41,919 --> 00:27:43,440
ideas and improvements not only on the

783
00:27:43,440 --> 00:27:44,960
similar cryptocytes but also on the

784
00:27:44,960 --> 00:27:47,600
underlying cryptosystems

785
00:27:47,600 --> 00:27:50,880
so that's why this yeah the um

786
00:27:50,880 --> 00:27:53,200
if you want um

787
00:27:53,200 --> 00:27:55,440
it's a bit related to

788
00:27:55,440 --> 00:27:56,320
uh

789
00:27:56,320 --> 00:27:58,000
moore's law on the on the hardware side

790
00:27:58,000 --> 00:27:59,279
where you

791
00:27:59,279 --> 00:28:02,000
can can expect even if with your same

792
00:28:02,000 --> 00:28:03,600
solution basically

793
00:28:03,600 --> 00:28:05,440
you can expect better and cheaper

794
00:28:05,440 --> 00:28:06,799
implementations

795
00:28:06,799 --> 00:28:08,000
uh

796
00:28:08,000 --> 00:28:11,200
every year essentially

797
00:28:11,679 --> 00:28:13,360
yeah so with that um i would like to

798
00:28:13,360 --> 00:28:15,200
move on to my second

799
00:28:15,200 --> 00:28:18,559
example that's

800
00:28:18,559 --> 00:28:20,159
a use case that gadon mentioned already

801
00:28:20,159 --> 00:28:22,159
in his introduction

802
00:28:22,159 --> 00:28:24,559
namely

803
00:28:25,520 --> 00:28:28,080
the idea to

804
00:28:28,080 --> 00:28:30,799
construct public key signature schemes

805
00:28:30,799 --> 00:28:31,760
using

806
00:28:31,760 --> 00:28:33,679
symmetric crypt and genetic crypto only

807
00:28:33,679 --> 00:28:35,520
including cryptographic

808
00:28:35,520 --> 00:28:38,080
passion of course

809
00:28:38,080 --> 00:28:40,080
again this will highly be

810
00:28:40,080 --> 00:28:42,240
mostly be

811
00:28:42,240 --> 00:28:44,720
however but the the most recent results

812
00:28:44,720 --> 00:28:46,720
is something that is based on on this

813
00:28:46,720 --> 00:28:48,320
paper here that uh

814
00:28:48,320 --> 00:28:51,760
will appear at ccs later this year

815
00:28:51,760 --> 00:28:52,799
and uh

816
00:28:52,799 --> 00:28:54,970
let me start out with this

817
00:28:54,970 --> 00:28:56,480
[Music]

818
00:28:56,480 --> 00:28:58,799
story on the development of signature

819
00:28:58,799 --> 00:29:01,440
sizes over over the years

820
00:29:01,440 --> 00:29:04,320
uh in this in this in this domain so the

821
00:29:04,320 --> 00:29:06,320
high level motivation is that

822
00:29:06,320 --> 00:29:08,559
uh okay we want long term

823
00:29:08,559 --> 00:29:10,559
security and we are afraid that in the

824
00:29:10,559 --> 00:29:13,039
long run quantum computers may become

825
00:29:13,039 --> 00:29:14,880
large and stable enough

826
00:29:14,880 --> 00:29:17,440
to implement attacks on our

827
00:29:17,440 --> 00:29:20,320
schemes nowadays there are a number of

828
00:29:20,320 --> 00:29:22,880
as you all aware of the number of

829
00:29:22,880 --> 00:29:24,399
candidates around and nist is looking

830
00:29:24,399 --> 00:29:26,559
for

831
00:29:26,559 --> 00:29:28,159
standards in this direction and there

832
00:29:28,159 --> 00:29:29,039
are

833
00:29:29,039 --> 00:29:31,600
several promising candidates most of

834
00:29:31,600 --> 00:29:32,480
them

835
00:29:32,480 --> 00:29:35,840
introduce some kind of

836
00:29:35,919 --> 00:29:38,480
mathematical structure

837
00:29:38,480 --> 00:29:41,200
be it a

838
00:29:41,200 --> 00:29:42,640
in the area of code speed in the area of

839
00:29:42,640 --> 00:29:43,760
lattices

840
00:29:43,760 --> 00:29:47,279
or be it in the area of

841
00:29:48,799 --> 00:29:51,440
for example vinegar

842
00:29:51,440 --> 00:29:54,440
approaches

843
00:29:54,720 --> 00:29:56,159
you might think this is inherent in

844
00:29:56,159 --> 00:29:58,000
publicly crypto and this seems to be

845
00:29:58,000 --> 00:30:00,720
true for um public encryption and key

846
00:30:00,720 --> 00:30:02,399
encapsulation but for barbecue

847
00:30:02,399 --> 00:30:03,440
signatures

848
00:30:03,440 --> 00:30:05,760
this is not necessary it's it's known

849
00:30:05,760 --> 00:30:07,360
theoretically already for a long time

850
00:30:07,360 --> 00:30:08,640
that um

851
00:30:08,640 --> 00:30:09,520
yeah

852
00:30:09,520 --> 00:30:12,320
so many cryptocurrencies can be can be

853
00:30:12,320 --> 00:30:14,399
enough the the thing is it was never

854
00:30:14,399 --> 00:30:15,520
deemed to be

855
00:30:15,520 --> 00:30:18,480
at least not until let's say 2015 it was

856
00:30:18,480 --> 00:30:22,240
never deemed to be um

857
00:30:22,240 --> 00:30:24,240
practical enough to

858
00:30:24,240 --> 00:30:25,679
be a

859
00:30:25,679 --> 00:30:27,360
drop-in replacement for our currently

860
00:30:27,360 --> 00:30:29,679
used signature schemes

861
00:30:29,679 --> 00:30:30,880
the

862
00:30:30,880 --> 00:30:34,399
the well-known long-standing approach to

863
00:30:34,399 --> 00:30:36,480
to this is hash based signatures it goes

864
00:30:36,480 --> 00:30:39,120
back to the 1970s

865
00:30:39,120 --> 00:30:40,399
um

866
00:30:40,399 --> 00:30:42,720
usually i was in in a

867
00:30:42,720 --> 00:30:44,960
in a mode in a wave which required you

868
00:30:44,960 --> 00:30:46,240
to keep a state

869
00:30:46,240 --> 00:30:48,000
hence not allowing you to

870
00:30:48,000 --> 00:30:50,480
to use it as a dropping replacement but

871
00:30:50,480 --> 00:30:53,840
uh with new optimizations

872
00:30:53,840 --> 00:30:55,360
around

873
00:30:55,360 --> 00:30:57,679
things and um there's things leading the

874
00:30:57,679 --> 00:30:59,760
effort there

875
00:30:59,760 --> 00:31:02,240
people manage to have

876
00:31:02,240 --> 00:31:04,720
signature sizes

877
00:31:04,720 --> 00:31:06,399
in the area of

878
00:31:06,399 --> 00:31:07,760
only dozens of

879
00:31:07,760 --> 00:31:08,880
kilobytes

880
00:31:08,880 --> 00:31:10,080
while having

881
00:31:10,080 --> 00:31:12,399
such a large possibility

882
00:31:12,399 --> 00:31:15,600
space such that you don't need to keep a

883
00:31:15,600 --> 00:31:18,080
state anymore without jeopardizing

884
00:31:18,080 --> 00:31:21,279
security otherwise so this is basically

885
00:31:21,279 --> 00:31:24,480
the baseline and this is a

886
00:31:24,480 --> 00:31:26,240
fairly old idea that

887
00:31:26,240 --> 00:31:27,279
got

888
00:31:27,279 --> 00:31:29,440
much improved and

889
00:31:29,440 --> 00:31:32,080
and optimized recently this is the blue

890
00:31:32,080 --> 00:31:33,039
line here

891
00:31:33,039 --> 00:31:35,120
the hash blade signature line and that

892
00:31:35,120 --> 00:31:37,200
was basically it

893
00:31:37,200 --> 00:31:39,760
there was another approach

894
00:31:39,760 --> 00:31:42,799
that was theoretically around

895
00:31:42,799 --> 00:31:44,880
for some time but again something that

896
00:31:44,880 --> 00:31:45,679
people

897
00:31:45,679 --> 00:31:47,600
never consider to be of any practical

898
00:31:47,600 --> 00:31:49,440
use but with

899
00:31:49,440 --> 00:31:51,679
some improvements in the

900
00:31:51,679 --> 00:31:54,399
area of general purpose

901
00:31:54,399 --> 00:31:56,399
proof systems for

902
00:31:56,399 --> 00:31:59,039
for for circuits

903
00:31:59,039 --> 00:32:02,559
it suddenly made sense to have

904
00:32:02,559 --> 00:32:04,080
a signature scheme

905
00:32:04,080 --> 00:32:06,240
based on an mpc in the head circuit

906
00:32:06,240 --> 00:32:08,640
where you compute all the the players

907
00:32:08,640 --> 00:32:10,159
basically

908
00:32:10,159 --> 00:32:12,240
by yourself and then reveal parts of

909
00:32:12,240 --> 00:32:14,320
them

910
00:32:14,320 --> 00:32:16,559
if you make this depending on on a

911
00:32:16,559 --> 00:32:18,399
message then this is something that can

912
00:32:18,399 --> 00:32:19,279
serve

913
00:32:19,279 --> 00:32:20,880
as a signature

914
00:32:20,880 --> 00:32:22,240
which

915
00:32:22,240 --> 00:32:24,240
contains the signature itself contains

916
00:32:24,240 --> 00:32:26,640
then those those partially partially

917
00:32:26,640 --> 00:32:29,279
revealed internal states of of your

918
00:32:29,279 --> 00:32:31,360
computation in the last 10 and you want

919
00:32:31,360 --> 00:32:34,159
to verify a signature

920
00:32:34,159 --> 00:32:36,360
so that's very very around

921
00:32:36,360 --> 00:32:38,960
2016 or so

922
00:32:38,960 --> 00:32:39,679
and

923
00:32:39,679 --> 00:32:41,600
what you need in there is a relationship

924
00:32:41,600 --> 00:32:44,159
between a public key and the private key

925
00:32:44,159 --> 00:32:47,200
via a one-way function

926
00:32:47,600 --> 00:32:50,240
instantiating such approaches with

927
00:32:50,240 --> 00:32:51,919
vulnerable functions based on standards

928
00:32:51,919 --> 00:32:53,519
like

929
00:32:53,519 --> 00:32:54,840
chatucha 3

930
00:32:54,840 --> 00:32:57,279
yes led to

931
00:32:57,279 --> 00:33:00,000
signature sizes in the megabytes

932
00:33:00,000 --> 00:33:02,559
and and it turns out that uh lmc that

933
00:33:02,559 --> 00:33:05,519
was around at the time already optimized

934
00:33:05,519 --> 00:33:08,880
among others for mpc use cases was a

935
00:33:08,880 --> 00:33:11,760
very suitable choice and the best

936
00:33:11,760 --> 00:33:14,080
use case uh the best choice around the

937
00:33:14,080 --> 00:33:17,519
time because the signature size depends

938
00:33:17,519 --> 00:33:19,279
a lot on the number of multiplications

939
00:33:19,279 --> 00:33:21,120
and that's one of the metrics that

940
00:33:21,120 --> 00:33:22,960
ymc allows

941
00:33:22,960 --> 00:33:26,159
allows to to optimize first lmc is a

942
00:33:26,159 --> 00:33:28,720
it's a very parameterizable design where

943
00:33:28,720 --> 00:33:29,760
you

944
00:33:29,760 --> 00:33:31,679
as a user if you want you can choose to

945
00:33:31,679 --> 00:33:33,279
block size the number of s boxes per

946
00:33:33,279 --> 00:33:35,519
round

947
00:33:35,519 --> 00:33:37,519
the allowable data complexity the the

948
00:33:37,519 --> 00:33:40,559
key size and so on and then

949
00:33:40,559 --> 00:33:42,399
you get an instance

950
00:33:42,399 --> 00:33:44,320
and you can choose among huge amount of

951
00:33:44,320 --> 00:33:47,279
instances and then choose one that

952
00:33:47,279 --> 00:33:49,360
is suitable for a particular use case

953
00:33:49,360 --> 00:33:51,679
like that and then with that

954
00:33:51,679 --> 00:33:54,720
when the nest competition started

955
00:33:54,720 --> 00:33:56,240
we found basically what we thought was

956
00:33:56,240 --> 00:33:57,039
the

957
00:33:57,039 --> 00:33:59,120
sweet spot still the best choice and we

958
00:33:59,120 --> 00:34:00,960
arrived at a signature size this is now

959
00:34:00,960 --> 00:34:03,400
a security level of 128

960
00:34:03,400 --> 00:34:04,960
[Music]

961
00:34:04,960 --> 00:34:06,799
bits of

962
00:34:06,799 --> 00:34:10,560
slightly more than 30 30 kilobytes

963
00:34:10,639 --> 00:34:12,320
um yeah

964
00:34:12,320 --> 00:34:14,079
we thought we squeezed out everything we

965
00:34:14,079 --> 00:34:15,839
could but what happened was that

966
00:34:15,839 --> 00:34:17,839
essentially every year new ideas came

967
00:34:17,839 --> 00:34:18,800
around

968
00:34:18,800 --> 00:34:20,800
either on the proof system side

969
00:34:20,800 --> 00:34:22,879
and and recently also again on the

970
00:34:22,879 --> 00:34:23,839
one-way

971
00:34:23,839 --> 00:34:26,000
functions side such that

972
00:34:26,000 --> 00:34:28,159
now actually

973
00:34:28,159 --> 00:34:30,000
we for the first time have a hash-based

974
00:34:30,000 --> 00:34:32,159
uh npc in the head-based public key

975
00:34:32,159 --> 00:34:34,560
signature schemes with a signature size

976
00:34:34,560 --> 00:34:35,520
below

977
00:34:35,520 --> 00:34:36,800
five kilobytes

978
00:34:36,800 --> 00:34:40,000
so this is already getting into

979
00:34:40,000 --> 00:34:42,239
an area where the largest ladder space

980
00:34:42,239 --> 00:34:43,918
signatures are not so much smaller

981
00:34:43,918 --> 00:34:45,679
anymore there's only a factor two factor

982
00:34:45,679 --> 00:34:46,960
two left

983
00:34:46,960 --> 00:34:49,679
and and again of course we we think this

984
00:34:49,679 --> 00:34:51,520
squeeze does everything we squeezed out

985
00:34:51,520 --> 00:34:53,040
everything now this is the best we can

986
00:34:53,040 --> 00:34:54,159
do

987
00:34:54,159 --> 00:34:56,000
but looking back uh

988
00:34:56,000 --> 00:34:57,359
yeah it looks like they have been wrong

989
00:34:57,359 --> 00:34:58,640
already

990
00:34:58,640 --> 00:35:00,880
um

991
00:35:00,880 --> 00:35:03,119
a while and it may will be that in the

992
00:35:03,119 --> 00:35:05,440
future we we can see more

993
00:35:05,440 --> 00:35:06,960
more improvements of course this is now

994
00:35:06,960 --> 00:35:10,240
only the the signature size comparison

995
00:35:10,240 --> 00:35:12,000
uh runtime

996
00:35:12,000 --> 00:35:13,599
is also something that is relevant and

997
00:35:13,599 --> 00:35:14,880
those approaches especially for

998
00:35:14,880 --> 00:35:16,880
signature creation are not so fast so

999
00:35:16,880 --> 00:35:18,079
they

1000
00:35:18,079 --> 00:35:19,760
they need a few milliseconds on a

1001
00:35:19,760 --> 00:35:22,400
commodity on commodity hardware

1002
00:35:22,400 --> 00:35:24,400
um this is okay for for many use cases

1003
00:35:24,400 --> 00:35:26,160
but perhaps not for the most demanding

1004
00:35:26,160 --> 00:35:28,079
ones but that's what you

1005
00:35:28,079 --> 00:35:30,160
get if you want to minimize your trust

1006
00:35:30,160 --> 00:35:32,000
assumptions right because with those two

1007
00:35:32,000 --> 00:35:34,079
approaches you only need

1008
00:35:34,079 --> 00:35:36,480
well you need hashing for

1009
00:35:36,480 --> 00:35:38,880
for signatures anyway usually and then

1010
00:35:38,880 --> 00:35:40,079
you don't need any additional hardness

1011
00:35:40,079 --> 00:35:42,320
essentially

1012
00:35:42,320 --> 00:35:45,119
no latest assumption no

1013
00:35:45,119 --> 00:35:47,119
code assumption but nothing else and

1014
00:35:47,119 --> 00:35:48,640
that costs something but

1015
00:35:48,640 --> 00:35:50,079
the cost is

1016
00:35:50,079 --> 00:35:52,800
is going down as you can see

1017
00:35:52,800 --> 00:35:54,880
so with this

1018
00:35:54,880 --> 00:35:55,490
high level

1019
00:35:55,490 --> 00:35:56,880
[Music]

1020
00:35:56,880 --> 00:35:58,400
treatment let me now go a little bit

1021
00:35:58,400 --> 00:35:59,680
into

1022
00:35:59,680 --> 00:36:01,359
the very recent

1023
00:36:01,359 --> 00:36:03,119
design that we did

1024
00:36:03,119 --> 00:36:04,800
um

1025
00:36:04,800 --> 00:36:07,040
that got inspired by

1026
00:36:07,040 --> 00:36:08,640
protocols that

1027
00:36:08,640 --> 00:36:10,560
allow

1028
00:36:10,560 --> 00:36:11,680
not only

1029
00:36:11,680 --> 00:36:15,119
to deal with multiplications

1030
00:36:15,119 --> 00:36:17,119
in a more and more efficient way but

1031
00:36:17,119 --> 00:36:18,640
those uh

1032
00:36:18,640 --> 00:36:20,720
always still drove the number

1033
00:36:20,720 --> 00:36:23,359
well the cost basically

1034
00:36:23,359 --> 00:36:24,560
but uh

1035
00:36:24,560 --> 00:36:26,480
different protocols that

1036
00:36:26,480 --> 00:36:28,800
can be made efficient as well but also

1037
00:36:28,800 --> 00:36:31,200
finally field inversion can be made very

1038
00:36:31,200 --> 00:36:33,200
efficiently and i guess i don't have to

1039
00:36:33,200 --> 00:36:35,599
explain to you the ss box

1040
00:36:35,599 --> 00:36:37,520
too much detail uh you have a final

1041
00:36:37,520 --> 00:36:39,520
field inversion in the case of a yes in

1042
00:36:39,520 --> 00:36:42,000
a smaller field and then you have some a

1043
00:36:42,000 --> 00:36:43,280
fine

1044
00:36:43,280 --> 00:36:45,359
layer added to it

1045
00:36:45,359 --> 00:36:47,599
and uh now as a mental exercise think of

1046
00:36:47,599 --> 00:36:48,880
this ies but

1047
00:36:48,880 --> 00:36:51,520
yes this box and simply expand it to a

1048
00:36:51,520 --> 00:36:54,000
full to a full state and you have you

1049
00:36:54,000 --> 00:36:55,920
have a you have a round function that

1050
00:36:55,920 --> 00:36:57,359
operates

1051
00:36:57,359 --> 00:36:58,720
on your four in terms of states for

1052
00:36:58,720 --> 00:37:00,640
example 178 bits

1053
00:37:00,640 --> 00:37:02,560
you have to find the version

1054
00:37:02,560 --> 00:37:04,640
and then you add some a fine layer to

1055
00:37:04,640 --> 00:37:05,920
this

1056
00:37:05,920 --> 00:37:08,640
so what we have now um

1057
00:37:08,640 --> 00:37:10,079
is something we call

1058
00:37:10,079 --> 00:37:13,119
rain that looks exactly like that's what

1059
00:37:13,119 --> 00:37:14,880
you have on a slide here and this is the

1060
00:37:14,880 --> 00:37:17,599
whole design

1061
00:37:20,800 --> 00:37:23,040
so we can only break

1062
00:37:23,040 --> 00:37:24,320
two rounds

1063
00:37:24,320 --> 00:37:26,079
so this is already the three round

1064
00:37:26,079 --> 00:37:27,839
version if you want and we don't even

1065
00:37:27,839 --> 00:37:29,359
have an attack

1066
00:37:29,359 --> 00:37:31,599
on this one here so we have

1067
00:37:31,599 --> 00:37:33,760
three finite field inversions

1068
00:37:33,760 --> 00:37:37,680
two of those fine layers um

1069
00:37:37,680 --> 00:37:39,919
yeah

1070
00:37:40,079 --> 00:37:42,720
that's it basically for the nokia scada

1071
00:37:42,720 --> 00:37:44,800
so it's a very minimalistic design and

1072
00:37:44,800 --> 00:37:48,320
that's that allows for this very

1073
00:37:48,320 --> 00:37:49,520
very

1074
00:37:49,520 --> 00:37:52,640
very low signature size as well

1075
00:37:52,640 --> 00:37:54,160
um

1076
00:37:54,160 --> 00:37:55,599
so one more thing to keep in mind is

1077
00:37:55,599 --> 00:37:58,000
this is not a general purpose

1078
00:37:58,000 --> 00:38:00,240
block cipher we use this as a one-way

1079
00:38:00,240 --> 00:38:01,680
function where you're

1080
00:38:01,680 --> 00:38:03,599
basically given the output

1081
00:38:03,599 --> 00:38:06,320
ciphertext if you want and uh

1082
00:38:06,320 --> 00:38:07,280
or

1083
00:38:07,280 --> 00:38:10,000
enable output pair and your task to

1084
00:38:10,000 --> 00:38:12,160
recover the key so this rules out many

1085
00:38:12,160 --> 00:38:13,839
classes of attacks already

1086
00:38:13,839 --> 00:38:15,280
by default

1087
00:38:15,280 --> 00:38:16,079
but

1088
00:38:16,079 --> 00:38:18,000
yeah gives more focus on on those

1089
00:38:18,000 --> 00:38:19,680
attacks at the bright attacks for

1090
00:38:19,680 --> 00:38:21,359
example

1091
00:38:21,359 --> 00:38:22,960
that can deal with

1092
00:38:22,960 --> 00:38:26,320
kick that can deal with the setting

1093
00:38:27,040 --> 00:38:28,960
yeah so if you have any ideas how to

1094
00:38:28,960 --> 00:38:29,839
attack

1095
00:38:29,839 --> 00:38:33,839
this scheme for our practical um

1096
00:38:33,839 --> 00:38:35,839
proposals then we actually propose four

1097
00:38:35,839 --> 00:38:37,200
rounds because it doesn't cost too much

1098
00:38:37,200 --> 00:38:38,320
more

1099
00:38:38,320 --> 00:38:39,680
and

1100
00:38:39,680 --> 00:38:41,760
it gives us a bit of security margin

1101
00:38:41,760 --> 00:38:43,440
this is now a table

1102
00:38:43,440 --> 00:38:45,680
comparing

1103
00:38:45,680 --> 00:38:47,520
rain or rainier this is in our signature

1104
00:38:47,520 --> 00:38:49,119
scheme based based on rain

1105
00:38:49,119 --> 00:38:50,720
with um

1106
00:38:50,720 --> 00:38:53,119
other candidates in the pq

1107
00:38:53,119 --> 00:38:55,839
competition uh speaking of things i had

1108
00:38:55,839 --> 00:38:56,880
already

1109
00:38:56,880 --> 00:39:00,640
in the in the graph before

1110
00:39:00,640 --> 00:39:03,520
having signature sizes

1111
00:39:03,520 --> 00:39:07,200
between 30 and 10 or 16 and 8

1112
00:39:07,200 --> 00:39:10,160
kilobytes signing times in the

1113
00:39:10,160 --> 00:39:12,160
in the milliseconds and higher

1114
00:39:12,160 --> 00:39:14,000
milliseconds sometimes and verification

1115
00:39:14,000 --> 00:39:16,800
times in in the lower milliseconds

1116
00:39:16,800 --> 00:39:17,520
and

1117
00:39:17,520 --> 00:39:20,079
if you compare this to two other

1118
00:39:20,079 --> 00:39:22,960
candidates around so lithium for example

1119
00:39:22,960 --> 00:39:25,280
a ladies based signature scheme has a

1120
00:39:25,280 --> 00:39:26,960
has a signature size of more than two

1121
00:39:26,960 --> 00:39:28,800
kilobytes

1122
00:39:28,800 --> 00:39:30,800
and with our rain instances

1123
00:39:30,800 --> 00:39:33,839
uh we are getting within a factor two

1124
00:39:33,839 --> 00:39:35,520
of the signature size

1125
00:39:35,520 --> 00:39:37,920
there's always this this trade-off so if

1126
00:39:37,920 --> 00:39:39,760
you really want to go below five

1127
00:39:39,760 --> 00:39:42,800
um five kilobytes then the the signing

1128
00:39:42,800 --> 00:39:44,480
and computation times explode quite a

1129
00:39:44,480 --> 00:39:45,280
bit

1130
00:39:45,280 --> 00:39:47,520
but there are then yeah reason for

1131
00:39:47,520 --> 00:39:49,440
trade-offs wherever um

1132
00:39:49,440 --> 00:39:51,440
computation times are

1133
00:39:51,440 --> 00:39:53,839
very low while you still have a rather

1134
00:39:53,839 --> 00:39:55,119
rather small

1135
00:39:55,119 --> 00:39:57,839
signature level

1136
00:39:58,079 --> 00:40:00,800
yeah so that was

1137
00:40:00,880 --> 00:40:02,320
that was the

1138
00:40:02,320 --> 00:40:04,640
story about

1139
00:40:04,640 --> 00:40:06,240
um

1140
00:40:06,240 --> 00:40:08,480
rain i have another table showing you

1141
00:40:08,480 --> 00:40:10,880
the evolution

1142
00:40:10,880 --> 00:40:12,079
the

1143
00:40:12,079 --> 00:40:14,240
again with respect to

1144
00:40:14,240 --> 00:40:15,200
to

1145
00:40:15,200 --> 00:40:17,520
to the different um

1146
00:40:17,520 --> 00:40:19,920
signature sizes but now

1147
00:40:19,920 --> 00:40:21,520
on one branch

1148
00:40:21,520 --> 00:40:23,440
using standard crypto on the other

1149
00:40:23,440 --> 00:40:26,160
branch using custom group 2. so with the

1150
00:40:26,160 --> 00:40:28,319
first optimizations

1151
00:40:28,319 --> 00:40:30,480
that happened a

1152
00:40:30,480 --> 00:40:33,040
similar approach based on sha2

1153
00:40:33,040 --> 00:40:36,720
was down to almost almost a megabyte

1154
00:40:36,720 --> 00:40:38,480
with more optimizations there was a

1155
00:40:38,480 --> 00:40:39,680
paper

1156
00:40:39,680 --> 00:40:40,880
um

1157
00:40:40,880 --> 00:40:41,920
showing

1158
00:40:41,920 --> 00:40:45,200
yes can be 200 kilobytes and uh actually

1159
00:40:45,200 --> 00:40:47,200
with our proof system that we use in

1160
00:40:47,200 --> 00:40:48,720
rain we can also

1161
00:40:48,720 --> 00:40:51,760
give the best a yes based signature with

1162
00:40:51,760 --> 00:40:54,640
around 10 kilobytes in in size

1163
00:40:54,640 --> 00:40:56,800
so this was now a bit of a match with

1164
00:40:56,800 --> 00:40:59,680
the with the custom

1165
00:40:59,680 --> 00:41:02,319
designs where initially

1166
00:41:02,319 --> 00:41:03,760
the gap was huge

1167
00:41:03,760 --> 00:41:06,510
but then as you can see

1168
00:41:06,510 --> 00:41:08,560
[Music]

1169
00:41:08,560 --> 00:41:10,400
protocol specialized for ies were very

1170
00:41:10,400 --> 00:41:12,400
catching up

1171
00:41:12,400 --> 00:41:14,240
but now with this

1172
00:41:14,240 --> 00:41:16,960
within they came within a factor three

1173
00:41:16,960 --> 00:41:20,079
of flames here around around 2019 but

1174
00:41:20,079 --> 00:41:22,319
with this new design

1175
00:41:22,319 --> 00:41:23,440
um

1176
00:41:23,440 --> 00:41:26,000
yeah we have now signatures below below

1177
00:41:26,000 --> 00:41:28,800
five kilobytes

1178
00:41:29,280 --> 00:41:30,560
so yeah the

1179
00:41:30,560 --> 00:41:33,359
improvements are fairly dramatic

1180
00:41:33,359 --> 00:41:35,440
it may still not be enough to

1181
00:41:35,440 --> 00:41:36,960
immediately put a

1182
00:41:36,960 --> 00:41:38,160
global

1183
00:41:38,160 --> 00:41:39,119
uh

1184
00:41:39,119 --> 00:41:40,880
standard stamp

1185
00:41:40,880 --> 00:41:43,040
on it who knows but uh it may will be

1186
00:41:43,040 --> 00:41:44,560
that there's more

1187
00:41:44,560 --> 00:41:46,800
improvements to come and um

1188
00:41:46,800 --> 00:41:48,480
yeah i think this is quite an

1189
00:41:48,480 --> 00:41:49,760
interesting development i have here

1190
00:41:49,760 --> 00:41:51,839
another number for higher security

1191
00:41:51,839 --> 00:41:54,160
levels here the yeah the smaller thick

1192
00:41:54,160 --> 00:41:56,240
exercises are still at

1193
00:41:56,240 --> 00:41:58,640
around 20 kilobytes

1194
00:41:58,640 --> 00:42:01,200
one more illustration

1195
00:42:01,200 --> 00:42:03,040
the

1196
00:42:03,040 --> 00:42:05,200
signature size versus signing time

1197
00:42:05,200 --> 00:42:07,280
trade-offs so the red dots here they are

1198
00:42:07,280 --> 00:42:09,440
from the new signature scheme and as you

1199
00:42:09,440 --> 00:42:10,640
can see here this is the doubly

1200
00:42:10,640 --> 00:42:12,079
logarithmic

1201
00:42:12,079 --> 00:42:14,720
way to illustrate it so it looks

1202
00:42:14,720 --> 00:42:17,520
favorably compared to other

1203
00:42:17,520 --> 00:42:18,770
other approaches

1204
00:42:18,770 --> 00:42:21,040
[Music]

1205
00:42:21,040 --> 00:42:23,280
i will not go into the details

1206
00:42:23,280 --> 00:42:25,440
more beyond that so last but not least

1207
00:42:25,440 --> 00:42:27,680
let me

1208
00:42:27,680 --> 00:42:28,560
mention

1209
00:42:28,560 --> 00:42:30,880
one more use case in the area of zero

1210
00:42:30,880 --> 00:42:32,000
knowledge

1211
00:42:32,000 --> 00:42:33,440
proofs

1212
00:42:33,440 --> 00:42:34,960
uh that's the

1213
00:42:34,960 --> 00:42:35,920
the

1214
00:42:35,920 --> 00:42:37,280
example i gave at the beginning where we

1215
00:42:37,280 --> 00:42:38,960
always want to prove knowledge of a

1216
00:42:38,960 --> 00:42:40,160
pre-image

1217
00:42:40,160 --> 00:42:41,839
of hash function this is again

1218
00:42:41,839 --> 00:42:44,160
largely high level but also based on

1219
00:42:44,160 --> 00:42:46,160
some very recent

1220
00:42:46,160 --> 00:42:48,399
work

1221
00:42:48,720 --> 00:42:50,800
mentioned mentioned here

1222
00:42:50,800 --> 00:42:53,520
so there's at least two use cases

1223
00:42:53,520 --> 00:42:54,400
in

1224
00:42:54,400 --> 00:42:58,640
of hash functions in such proof systems

1225
00:42:58,640 --> 00:43:00,240
one is that the

1226
00:43:00,240 --> 00:43:02,959
level vario

1227
00:43:04,319 --> 00:43:05,920
at the application closer to the

1228
00:43:05,920 --> 00:43:07,680
application level if you want where you

1229
00:43:07,680 --> 00:43:08,720
want to

1230
00:43:08,720 --> 00:43:11,119
uh yeah proof membership

1231
00:43:11,119 --> 00:43:12,480
of a set for example

1232
00:43:12,480 --> 00:43:14,480
and then there you have mercury trees

1233
00:43:14,480 --> 00:43:17,200
and you want to yeah in the end again

1234
00:43:17,200 --> 00:43:18,560
proof knowledge of a premature hash

1235
00:43:18,560 --> 00:43:19,760
function and then you need this

1236
00:43:19,760 --> 00:43:22,240
particular hash function uh also further

1237
00:43:22,240 --> 00:43:24,240
down the technology stack if you want

1238
00:43:24,240 --> 00:43:26,480
you again have use cases of

1239
00:43:26,480 --> 00:43:28,880
such hash functions

1240
00:43:28,880 --> 00:43:29,760
so

1241
00:43:29,760 --> 00:43:31,280
hashing all over the place that feels

1242
00:43:31,280 --> 00:43:33,359
like 2005 right looking let's get on

1243
00:43:33,359 --> 00:43:34,640
again

1244
00:43:34,640 --> 00:43:37,599
so what are the new problems

1245
00:43:37,599 --> 00:43:40,240
that we are facing here this is an

1246
00:43:40,240 --> 00:43:41,680
attempt to

1247
00:43:41,680 --> 00:43:43,359
illustrate

1248
00:43:43,359 --> 00:43:46,079
the situation

1249
00:43:46,079 --> 00:43:46,960
with

1250
00:43:46,960 --> 00:43:48,480
numbers that

1251
00:43:48,480 --> 00:43:50,640
that just give an indication of where we

1252
00:43:50,640 --> 00:43:52,400
are this is not a particular unit these

1253
00:43:52,400 --> 00:43:55,119
are just indications but let me walk you

1254
00:43:55,119 --> 00:43:57,440
through what i mean here so

1255
00:43:57,440 --> 00:44:00,079
we care about

1256
00:44:00,079 --> 00:44:01,680
proving time this is the same knowledge

1257
00:44:01,680 --> 00:44:03,359
time here

1258
00:44:03,359 --> 00:44:06,640
but many use cases also care about

1259
00:44:06,640 --> 00:44:08,720
let's call it plane performance the

1260
00:44:08,720 --> 00:44:10,720
direct implementation of a hash function

1261
00:44:10,720 --> 00:44:13,760
on a software on a cpu that's called

1262
00:44:13,760 --> 00:44:16,640
x6 86 time here and let's focus on these

1263
00:44:16,640 --> 00:44:17,839
two

1264
00:44:17,839 --> 00:44:20,560
um columns for a moment

1265
00:44:20,560 --> 00:44:23,839
um yeah in industry

1266
00:44:23,839 --> 00:44:26,079
what appears to be a popular choice

1267
00:44:26,079 --> 00:44:28,800
is uh breakthrough that's why we use it

1268
00:44:28,800 --> 00:44:29,599
here

1269
00:44:29,599 --> 00:44:30,960
in this table

1270
00:44:30,960 --> 00:44:32,880
um

1271
00:44:32,880 --> 00:44:34,720
it's fairly fast on as a plain

1272
00:44:34,720 --> 00:44:35,920
implementation that's why there's a one

1273
00:44:35,920 --> 00:44:37,119
here

1274
00:44:37,119 --> 00:44:38,720
it was not designed at all for the zero

1275
00:44:38,720 --> 00:44:40,880
orange use cases that's why there's a

1276
00:44:40,880 --> 00:44:43,359
hundred here meaning it's it's it's it's

1277
00:44:43,359 --> 00:44:44,960
it's very slow

1278
00:44:44,960 --> 00:44:46,079
um

1279
00:44:46,079 --> 00:44:48,000
so it was mentioned already in the

1280
00:44:48,000 --> 00:44:50,400
introduction a few years ago we designed

1281
00:44:50,400 --> 00:44:51,839
poseidon

1282
00:44:51,839 --> 00:44:54,480
an insensation of the haters

1283
00:44:54,480 --> 00:44:57,839
framework for this type of use cases

1284
00:44:57,839 --> 00:44:59,200
helping us to minimize this your

1285
00:44:59,200 --> 00:45:00,640
knowledge time

1286
00:45:00,640 --> 00:45:02,560
quite a lot but at the same time we

1287
00:45:02,560 --> 00:45:04,480
didn't care too much about the the plain

1288
00:45:04,480 --> 00:45:06,800
implementation because it was like yeah

1289
00:45:06,800 --> 00:45:09,920
around 100 really slower than

1290
00:45:09,920 --> 00:45:12,079
other

1291
00:45:12,079 --> 00:45:14,480
earlier hd science more classically if

1292
00:45:14,480 --> 00:45:16,800
you want

1293
00:45:17,200 --> 00:45:19,359
uh a different line of work

1294
00:45:19,359 --> 00:45:20,960
around uh

1295
00:45:20,960 --> 00:45:23,119
tamir and the ilibenza zone and that is

1296
00:45:23,119 --> 00:45:24,319
rescue

1297
00:45:24,319 --> 00:45:26,400
it was a very nice design achieving very

1298
00:45:26,400 --> 00:45:29,040
similar zero knowledge

1299
00:45:29,040 --> 00:45:30,880
properties

1300
00:45:30,880 --> 00:45:32,319
also didn't care too much about the

1301
00:45:32,319 --> 00:45:33,599
plane performance

1302
00:45:33,599 --> 00:45:35,599
it looks even worse actually

1303
00:45:35,599 --> 00:45:36,880
um

1304
00:45:36,880 --> 00:45:38,960
what is always a popular choice

1305
00:45:38,960 --> 00:45:40,240
among

1306
00:45:40,240 --> 00:45:42,880
companies libraries that that use this

1307
00:45:42,880 --> 00:45:44,160
is actually

1308
00:45:44,160 --> 00:45:46,560
a construction that is that is relying

1309
00:45:46,560 --> 00:45:47,359
on

1310
00:45:47,359 --> 00:45:50,640
on number theoretic assumptions

1311
00:45:50,640 --> 00:45:53,119
which is not as competitive as possible

1312
00:45:53,119 --> 00:45:55,920
a rescue in the in the serial knowledge

1313
00:45:55,920 --> 00:45:58,560
domain and is also quite slow in the

1314
00:45:58,560 --> 00:45:59,440
plane

1315
00:45:59,440 --> 00:46:02,000
but why do people use it well

1316
00:46:02,000 --> 00:46:03,760
um this brings me now to the third

1317
00:46:03,760 --> 00:46:05,520
column here the group analysis

1318
00:46:05,520 --> 00:46:07,920
uh it has a reduction to

1319
00:46:07,920 --> 00:46:09,599
to a normal theoretical problem related

1320
00:46:09,599 --> 00:46:11,359
to i think it's related to the discrete

1321
00:46:11,359 --> 00:46:13,200
log

1322
00:46:13,200 --> 00:46:15,359
um

1323
00:46:15,359 --> 00:46:18,160
this may not be post quantum secure but

1324
00:46:18,160 --> 00:46:20,640
let's assume we don't care about this

1325
00:46:20,640 --> 00:46:22,960
then this is of course

1326
00:46:22,960 --> 00:46:26,400
highly desirable to have something

1327
00:46:26,400 --> 00:46:27,359
which

1328
00:46:27,359 --> 00:46:28,400
at least

1329
00:46:28,400 --> 00:46:30,319
you don't have to open the proceedings

1330
00:46:30,319 --> 00:46:32,880
of a new fsc and you again find attacks

1331
00:46:32,880 --> 00:46:34,560
on one of those

1332
00:46:34,560 --> 00:46:37,040
new hash function candidates and that's

1333
00:46:37,040 --> 00:46:37,760
why

1334
00:46:37,760 --> 00:46:40,160
i'm putting here one

1335
00:46:40,160 --> 00:46:44,640
on the indict analysis column um

1336
00:46:44,880 --> 00:46:46,400
essentially hinting

1337
00:46:46,400 --> 00:46:48,480
towards the situation that this is kind

1338
00:46:48,480 --> 00:46:49,920
of the lowest

1339
00:46:49,920 --> 00:46:52,160
level of confidence

1340
00:46:52,160 --> 00:46:54,480
we might have we do of course

1341
00:46:54,480 --> 00:46:57,760
the analysis we can do when we do this

1342
00:46:57,760 --> 00:46:59,280
designs and then we add some security

1343
00:46:59,280 --> 00:47:01,280
margin but still these are designs that

1344
00:47:01,280 --> 00:47:03,760
work not over the

1345
00:47:03,760 --> 00:47:06,000
not only bit strings but over gfp over

1346
00:47:06,000 --> 00:47:09,119
integers this is a much newer

1347
00:47:09,119 --> 00:47:11,040
domain that perhaps was only started

1348
00:47:11,040 --> 00:47:13,520
with our memory design in 2016 for this

1349
00:47:13,520 --> 00:47:15,839
kind of practically efficient

1350
00:47:15,839 --> 00:47:17,599
use cases

1351
00:47:17,599 --> 00:47:19,520
and there may well be many more

1352
00:47:19,520 --> 00:47:21,520
surprises around

1353
00:47:21,520 --> 00:47:23,520
uh yeah blake gets here a 10 is

1354
00:47:23,520 --> 00:47:25,760
something in the middle it's it's a much

1355
00:47:25,760 --> 00:47:27,440
more classical design it receives a

1356
00:47:27,440 --> 00:47:30,319
number a lot of crypto analysis already

1357
00:47:30,319 --> 00:47:31,440
people don't know how to break it and

1358
00:47:31,440 --> 00:47:32,800
then there's a higher

1359
00:47:32,800 --> 00:47:34,160
certainly higher

1360
00:47:34,160 --> 00:47:37,040
confidence compared to those very recent

1361
00:47:37,040 --> 00:47:39,520
descents so at the

1362
00:47:39,520 --> 00:47:41,599
at uh

1363
00:47:41,599 --> 00:47:43,760
at the high level this opens up this big

1364
00:47:43,760 --> 00:47:45,920
open problem for us namely to

1365
00:47:45,920 --> 00:47:47,440
unders better understand algebraic

1366
00:47:47,440 --> 00:47:49,839
attacks attacks that are

1367
00:47:49,839 --> 00:47:51,119
much more

1368
00:47:51,119 --> 00:47:53,359
targeted for this kind of

1369
00:47:53,359 --> 00:47:55,280
approaches that we

1370
00:47:55,280 --> 00:47:58,880
do in poseidon and the indian rescue

1371
00:47:58,880 --> 00:48:00,720
and this is a long-term long-term goal i

1372
00:48:00,720 --> 00:48:02,640
think it will take a while before we can

1373
00:48:02,640 --> 00:48:05,599
have a similar level of assurance

1374
00:48:05,599 --> 00:48:07,680
compared to compared to

1375
00:48:07,680 --> 00:48:12,000
the designs we did 10-15 years ago

1376
00:48:12,960 --> 00:48:15,359
still what could we do

1377
00:48:15,359 --> 00:48:18,720
to address this namely to

1378
00:48:18,720 --> 00:48:21,359
first of all be faster than

1379
00:48:21,359 --> 00:48:24,160
on a plane have a similar

1380
00:48:24,160 --> 00:48:26,240
performance in the saloon launch domain

1381
00:48:26,240 --> 00:48:27,040
and

1382
00:48:27,040 --> 00:48:29,040
have

1383
00:48:29,040 --> 00:48:34,240
faster confidence in our designs

1384
00:48:34,240 --> 00:48:36,160
so this seems to be a circuit that is

1385
00:48:36,160 --> 00:48:37,920
hard to square

1386
00:48:37,920 --> 00:48:39,200
and uh yeah

1387
00:48:39,200 --> 00:48:41,760
what i can show you here is a bit of a

1388
00:48:41,760 --> 00:48:43,359
you could call it cheating it's a bit of

1389
00:48:43,359 --> 00:48:44,240
a

1390
00:48:44,240 --> 00:48:47,680
a way to address this namely to

1391
00:48:47,680 --> 00:48:50,000
find a proof system and

1392
00:48:50,000 --> 00:48:51,920
this is again a very recent development

1393
00:48:51,920 --> 00:48:54,559
that not only

1394
00:48:54,559 --> 00:48:58,000
allows you to have efficient

1395
00:48:58,000 --> 00:49:00,240
brightly simple operations that's what

1396
00:49:00,240 --> 00:49:02,079
we have in poseidon and it was

1397
00:49:02,079 --> 00:49:03,359
in rescue

1398
00:49:03,359 --> 00:49:05,760
um simple power maps

1399
00:49:05,760 --> 00:49:07,359
the inverses

1400
00:49:07,359 --> 00:49:09,599
that kind of stuff

1401
00:49:09,599 --> 00:49:11,040
but there are now new proof systems that

1402
00:49:11,040 --> 00:49:13,359
allow for a limited number of

1403
00:49:13,359 --> 00:49:16,640
you could call it lookup tables

1404
00:49:16,640 --> 00:49:18,319
while still keeping this this practical

1405
00:49:18,319 --> 00:49:20,160
efficiency and

1406
00:49:20,160 --> 00:49:21,040
by

1407
00:49:21,040 --> 00:49:22,800
using this property now combining these

1408
00:49:22,800 --> 00:49:23,920
two

1409
00:49:23,920 --> 00:49:25,359
these two

1410
00:49:25,359 --> 00:49:26,559
approaches

1411
00:49:26,559 --> 00:49:28,880
we are able to at least somewhat square

1412
00:49:28,880 --> 00:49:29,760
this

1413
00:49:29,760 --> 00:49:33,040
circle here so what you can see is this

1414
00:49:33,040 --> 00:49:34,880
concrete proposal of a hash function

1415
00:49:34,880 --> 00:49:36,880
design where we have

1416
00:49:36,880 --> 00:49:38,800
the outer parts these layers concrete

1417
00:49:38,800 --> 00:49:41,839
and bricks that's something that

1418
00:49:41,839 --> 00:49:45,440
roughly resembles whatever poseidon and

1419
00:49:45,440 --> 00:49:48,079
and and rescue are doing ultra brightly

1420
00:49:48,079 --> 00:49:49,760
simple

1421
00:49:49,760 --> 00:49:52,000
building blocks operating on very large

1422
00:49:52,000 --> 00:49:53,520
words so these

1423
00:49:53,520 --> 00:49:56,079
bricks here are of size 250

1424
00:49:56,079 --> 00:49:58,880
256 bits for example

1425
00:49:58,880 --> 00:49:59,680
but

1426
00:49:59,680 --> 00:50:01,760
without anything else we would require

1427
00:50:01,760 --> 00:50:04,319
same as in poseidon or as in

1428
00:50:04,319 --> 00:50:06,000
in

1429
00:50:06,000 --> 00:50:08,079
in in rescue we would require a huge

1430
00:50:08,079 --> 00:50:09,920
number of rounds

1431
00:50:09,920 --> 00:50:12,640
this can be efficient as you've seen

1432
00:50:12,640 --> 00:50:14,800
but then this still opens up the

1433
00:50:14,800 --> 00:50:16,000
question is

1434
00:50:16,000 --> 00:50:17,760
if we understand our sprite attacks more

1435
00:50:17,760 --> 00:50:19,200
maybe this turns out to be much less

1436
00:50:19,200 --> 00:50:21,520
secure than you think

1437
00:50:21,520 --> 00:50:23,680
with this design we don't rely

1438
00:50:23,680 --> 00:50:25,520
on the resistance against algebraic

1439
00:50:25,520 --> 00:50:27,760
attacks of these outer layers at all

1440
00:50:27,760 --> 00:50:28,640
uh

1441
00:50:28,640 --> 00:50:31,280
our security arguments

1442
00:50:31,280 --> 00:50:33,040
against these algebraic attacks are then

1443
00:50:33,040 --> 00:50:35,280
based on this this middle layer

1444
00:50:35,280 --> 00:50:37,440
with this

1445
00:50:37,440 --> 00:50:39,119
let's call it s boxes

1446
00:50:39,119 --> 00:50:40,480
that are

1447
00:50:40,480 --> 00:50:41,839
don't have any

1448
00:50:41,839 --> 00:50:43,280
mathematical structure they're

1449
00:50:43,280 --> 00:50:44,720
essentially randomly drawn that they

1450
00:50:44,720 --> 00:50:47,440
have some some properties and we

1451
00:50:47,440 --> 00:50:49,040
have to explain those of course

1452
00:50:49,040 --> 00:50:51,520
but uh the arguments against algebraic

1453
00:50:51,520 --> 00:50:55,839
attacks are basically uh concentrated in

1454
00:50:55,839 --> 00:50:58,079
this in this core middle round

1455
00:50:58,079 --> 00:51:00,480
and essentially then say basically

1456
00:51:00,480 --> 00:51:02,319
uh because we kind of break a yes with

1457
00:51:02,319 --> 00:51:04,079
uh um

1458
00:51:04,079 --> 00:51:05,920
algebraic attacks

1459
00:51:05,920 --> 00:51:07,839
it's also likely that we cannot

1460
00:51:07,839 --> 00:51:10,240
use algebraic attacks to to attack this

1461
00:51:10,240 --> 00:51:12,720
scheme because we cannot even attack the

1462
00:51:12,720 --> 00:51:14,000
middle party

1463
00:51:14,000 --> 00:51:15,760
so at the high level very handling of

1464
00:51:15,760 --> 00:51:18,079
course then for the other attacks

1465
00:51:18,079 --> 00:51:20,960
uh statistical attacks rebound attacks

1466
00:51:20,960 --> 00:51:23,760
all this kind of stuff we can rely on on

1467
00:51:23,760 --> 00:51:26,160
on yeah on the work that was done 10 15

1468
00:51:26,160 --> 00:51:28,640
years ago

1469
00:51:29,280 --> 00:51:33,200
by many people in our community here

1470
00:51:34,319 --> 00:51:36,079
and essentially have done arguments

1471
00:51:36,079 --> 00:51:37,599
against those

1472
00:51:37,599 --> 00:51:39,520
parts as well uh those attacks as well

1473
00:51:39,520 --> 00:51:42,000
without them relying on this on this new

1474
00:51:42,000 --> 00:51:44,240
on this part

1475
00:51:44,240 --> 00:51:47,200
uh so assuming this this works out um

1476
00:51:47,200 --> 00:51:48,720
yeah we have

1477
00:51:48,720 --> 00:51:52,000
let me skip over the details here but um

1478
00:51:52,000 --> 00:51:55,760
we would then have basically uh

1479
00:51:55,760 --> 00:51:58,160
this new design which

1480
00:51:58,160 --> 00:52:00,400
has a higher

1481
00:52:00,400 --> 00:52:02,720
confidence without

1482
00:52:02,720 --> 00:52:04,960
needing to understand algebraic attacks

1483
00:52:04,960 --> 00:52:07,200
much more beyond what we do now and at

1484
00:52:07,200 --> 00:52:08,640
the same time

1485
00:52:08,640 --> 00:52:11,119
we are now only a factor 10 away from

1486
00:52:11,119 --> 00:52:13,280
the fastest plane hash functions and

1487
00:52:13,280 --> 00:52:14,960
have a similar have a similar proof

1488
00:52:14,960 --> 00:52:18,160
let's have a similar proof

1489
00:52:18,160 --> 00:52:21,119
yeah so this is a new design here

1490
00:52:21,119 --> 00:52:23,280
so let me

1491
00:52:23,280 --> 00:52:25,359
let me move into the last

1492
00:52:25,359 --> 00:52:28,000
part of my talk here

1493
00:52:28,000 --> 00:52:31,440
a few open problems high level problems

1494
00:52:31,440 --> 00:52:32,880
um

1495
00:52:32,880 --> 00:52:36,319
one i mentioned already can we

1496
00:52:36,319 --> 00:52:38,400
decrease signature sizes even more for

1497
00:52:38,400 --> 00:52:40,480
these pos quantum signature

1498
00:52:40,480 --> 00:52:41,920
approaches

1499
00:52:41,920 --> 00:52:42,880
um

1500
00:52:42,880 --> 00:52:44,800
can we reduce the computational overhead

1501
00:52:44,800 --> 00:52:47,760
even more there's a number of promising

1502
00:52:47,760 --> 00:52:49,680
directions um

1503
00:52:49,680 --> 00:52:51,520
simultaneously having good performance

1504
00:52:51,520 --> 00:52:52,960
in both

1505
00:52:52,960 --> 00:52:54,559
plane and zero knowledge domains for

1506
00:52:54,559 --> 00:52:56,160
hash functions that's something

1507
00:52:56,160 --> 00:52:57,599
that is that is really something that

1508
00:52:57,599 --> 00:53:00,720
the people need and want and yeah we

1509
00:53:00,720 --> 00:53:02,880
have a first proposal in the directions

1510
00:53:02,880 --> 00:53:04,000
but uh

1511
00:53:04,000 --> 00:53:06,000
i guess there's there's many more

1512
00:53:06,000 --> 00:53:07,280
ideas

1513
00:53:07,280 --> 00:53:08,880
to be had there

1514
00:53:08,880 --> 00:53:11,280
and then last but not least

1515
00:53:11,280 --> 00:53:13,680
there's a lot of new designs

1516
00:53:13,680 --> 00:53:15,359
there is some supporting crypto analysis

1517
00:53:15,359 --> 00:53:18,319
of course but um there's many more

1518
00:53:18,319 --> 00:53:19,920
uh yeah

1519
00:53:19,920 --> 00:53:21,440
crypto nicest papers

1520
00:53:21,440 --> 00:53:22,400
to be

1521
00:53:22,400 --> 00:53:24,800
to be written for sure

1522
00:53:24,800 --> 00:53:26,160
so

1523
00:53:26,160 --> 00:53:28,319
i had new crypto new zealand crypto in

1524
00:53:28,319 --> 00:53:29,200
the

1525
00:53:29,200 --> 00:53:31,200
in the title so uh how new are we

1526
00:53:31,200 --> 00:53:32,800
talking actually

1527
00:53:32,800 --> 00:53:34,319
so memphis was this design where we have

1528
00:53:34,319 --> 00:53:35,920
the the cube map

1529
00:53:35,920 --> 00:53:39,599
iterated uh with a key edition and um

1530
00:53:39,599 --> 00:53:41,760
different rounds constants a number of

1531
00:53:41,760 --> 00:53:43,200
times

1532
00:53:43,200 --> 00:53:44,160
that was

1533
00:53:44,160 --> 00:53:48,160
from 2016 but it turns out that actually

1534
00:53:48,160 --> 00:53:50,720
this idea even though it looked

1535
00:53:50,720 --> 00:53:54,400
quite exotic it was not new um

1536
00:53:54,400 --> 00:53:57,760
the kn feisty cipher from 95

1537
00:53:57,760 --> 00:54:00,880
by by nuisance and nubuck

1538
00:54:00,880 --> 00:54:01,839
um

1539
00:54:01,839 --> 00:54:03,760
it looked a bit more complicated than

1540
00:54:03,760 --> 00:54:05,599
this here because it had like mappings

1541
00:54:05,599 --> 00:54:08,839
from 32 to 33 bits and so on but um

1542
00:54:08,839 --> 00:54:11,440
essentially the idea

1543
00:54:11,440 --> 00:54:14,319
was the same as in the facility of of

1544
00:54:14,319 --> 00:54:16,640
our music so the only

1545
00:54:16,640 --> 00:54:19,040
claim to have something new basically

1546
00:54:19,040 --> 00:54:21,599
along these lines is that remains is

1547
00:54:21,599 --> 00:54:23,200
essentially the fact that we are not

1548
00:54:23,200 --> 00:54:24,960
only working with bit strings but we are

1549
00:54:24,960 --> 00:54:28,079
also working over fp over the interests

1550
00:54:28,079 --> 00:54:30,480
and even though we have now

1551
00:54:30,480 --> 00:54:32,319
the last year's few very nice script

1552
00:54:32,319 --> 00:54:34,720
analysis papers by many

1553
00:54:34,720 --> 00:54:37,359
of you here on the on the on the

1554
00:54:37,359 --> 00:54:38,720
standard memsie

1555
00:54:38,720 --> 00:54:40,799
construction over the binaries uh we

1556
00:54:40,799 --> 00:54:43,440
know much less

1557
00:54:43,520 --> 00:54:45,520
over the primes

1558
00:54:45,520 --> 00:54:49,359
i will not go much over the s-box size

1559
00:54:49,359 --> 00:54:50,640
slide here

1560
00:54:50,640 --> 00:54:53,040
the message here is that basically

1561
00:54:53,040 --> 00:54:54,880
things the trends are going up and down

1562
00:54:54,880 --> 00:54:57,280
a bit but uh with this new descent we

1563
00:54:57,280 --> 00:54:58,880
certainly have uh

1564
00:54:58,880 --> 00:55:00,400
non-linear elements

1565
00:55:00,400 --> 00:55:01,599
if i'm not sure if you want to call it

1566
00:55:01,599 --> 00:55:03,280
the mass boxes but anyway

1567
00:55:03,280 --> 00:55:05,440
uh there's not any elements they're

1568
00:55:05,440 --> 00:55:07,200
suddenly very huge

1569
00:55:07,200 --> 00:55:08,319
and

1570
00:55:08,319 --> 00:55:10,720
compared to before and this again opens

1571
00:55:10,720 --> 00:55:13,760
up a lot of questions about their about

1572
00:55:13,760 --> 00:55:16,960
their uh analysis and another point that

1573
00:55:16,960 --> 00:55:18,160
i would like to mention here is that

1574
00:55:18,160 --> 00:55:19,680
because we now have nonlinear elements

1575
00:55:19,680 --> 00:55:20,799
that are

1576
00:55:20,799 --> 00:55:24,480
so big we can suddenly again consider

1577
00:55:24,480 --> 00:55:28,480
the option of having uh non-invertible

1578
00:55:28,480 --> 00:55:30,079
non-invertible

1579
00:55:30,079 --> 00:55:32,240
building blocks of the type i mean this

1580
00:55:32,240 --> 00:55:33,839
was discussed in the 90s a bit but i

1581
00:55:33,839 --> 00:55:36,160
think uh died out and even

1582
00:55:36,160 --> 00:55:38,480
recent designs even faster where you

1583
00:55:38,480 --> 00:55:40,880
don't need uh invitability people still

1584
00:55:40,880 --> 00:55:43,200
prefer inventive building blocks

1585
00:55:43,200 --> 00:55:44,880
how is it because you don't have to

1586
00:55:44,880 --> 00:55:47,040
worry about

1587
00:55:47,040 --> 00:55:48,640
local collisions

1588
00:55:48,640 --> 00:55:50,480
uh but with

1589
00:55:50,480 --> 00:55:53,920
building blocks that huge 256 bits

1590
00:55:53,920 --> 00:55:56,079
you may not care too much anymore if if

1591
00:55:56,079 --> 00:55:58,160
your non-data layer is is invertebrate

1592
00:55:58,160 --> 00:55:59,680
or not

1593
00:55:59,680 --> 00:56:01,839
and this may again give

1594
00:56:01,839 --> 00:56:02,640
give

1595
00:56:02,640 --> 00:56:05,839
rise to new new design ideas

1596
00:56:05,839 --> 00:56:08,480
another design approach that was

1597
00:56:08,480 --> 00:56:09,680
used

1598
00:56:09,680 --> 00:56:12,000
we had it in our conference earlier

1599
00:56:12,000 --> 00:56:12,799
already

1600
00:56:12,799 --> 00:56:14,880
partial expense

1601
00:56:14,880 --> 00:56:16,559
is something that um

1602
00:56:16,559 --> 00:56:19,119
yeah exists for for more than 10 years

1603
00:56:19,119 --> 00:56:21,359
uh already as well um

1604
00:56:21,359 --> 00:56:24,480
let me briefly point out um

1605
00:56:24,480 --> 00:56:26,799
some open problems there

1606
00:56:26,799 --> 00:56:28,319
on the partial spn

1607
00:56:28,319 --> 00:56:30,319
first so we had some ver a nice paper

1608
00:56:30,319 --> 00:56:32,480
the first positive results here at this

1609
00:56:32,480 --> 00:56:33,520
conference

1610
00:56:33,520 --> 00:56:34,559
uh

1611
00:56:34,559 --> 00:56:36,720
i think what would be a nice

1612
00:56:36,720 --> 00:56:38,240
problem in addition to those mentioned

1613
00:56:38,240 --> 00:56:39,760
in this paper is that

1614
00:56:39,760 --> 00:56:40,799
uh

1615
00:56:40,799 --> 00:56:42,480
to show or

1616
00:56:42,480 --> 00:56:45,520
or disprove that psbns can have

1617
00:56:45,520 --> 00:56:47,599
advantages in certain settings

1618
00:56:47,599 --> 00:56:50,079
probably not only uh

1619
00:56:50,079 --> 00:56:51,280
in their

1620
00:56:51,280 --> 00:56:53,440
uh i think it's some insincerity setting

1621
00:56:53,440 --> 00:56:55,440
but also in an in differentiability

1622
00:56:55,440 --> 00:56:57,520
setting that will give

1623
00:56:57,520 --> 00:57:00,000
more versatile

1624
00:57:00,000 --> 00:57:02,880
use for this high level structure

1625
00:57:02,880 --> 00:57:05,280
because you would capture many many more

1626
00:57:05,280 --> 00:57:07,760
settings then as well and another

1627
00:57:07,760 --> 00:57:08,960
problem that i keep mentioning is

1628
00:57:08,960 --> 00:57:10,000
actually

1629
00:57:10,000 --> 00:57:11,440
it may

1630
00:57:11,440 --> 00:57:13,920
be easy in most cases but what happens

1631
00:57:13,920 --> 00:57:16,319
to our security proofs in modes when we

1632
00:57:16,319 --> 00:57:19,040
move from binary strings to

1633
00:57:19,040 --> 00:57:20,480
to to fp

1634
00:57:20,480 --> 00:57:22,960
suddenly plus and minus are not the same

1635
00:57:22,960 --> 00:57:25,760
anymore and uh maybe always fine anyhow

1636
00:57:25,760 --> 00:57:27,680
but it would be good to check and it

1637
00:57:27,680 --> 00:57:29,200
could actually be fun to

1638
00:57:29,200 --> 00:57:31,520
to to check if you could at least

1639
00:57:31,520 --> 00:57:33,920
if you don't have any problems

1640
00:57:33,920 --> 00:57:35,680
it could be fun to see if you can

1641
00:57:35,680 --> 00:57:37,280
construct an artificial

1642
00:57:37,280 --> 00:57:40,559
example of a mode that looks reasonable

1643
00:57:40,559 --> 00:57:42,160
but then where security breaks down in

1644
00:57:42,160 --> 00:57:44,160
one of these two cases so that that

1645
00:57:44,160 --> 00:57:45,599
could be fun

1646
00:57:45,599 --> 00:57:47,359
um as well

1647
00:57:47,359 --> 00:57:49,760
yeah i'm wrapping up now there are a

1648
00:57:49,760 --> 00:57:52,319
number of um

1649
00:57:52,319 --> 00:57:53,359
yeah

1650
00:57:53,359 --> 00:57:54,480
and

1651
00:57:54,480 --> 00:57:58,240
bounties uh challenges rounds that um

1652
00:57:58,240 --> 00:58:00,240
that support crypto analysis

1653
00:58:00,240 --> 00:58:02,079
for specific

1654
00:58:02,079 --> 00:58:04,160
cases there's the lmc challenge around

1655
00:58:04,160 --> 00:58:06,640
since since uh about two years now with

1656
00:58:06,640 --> 00:58:09,760
a number of winners already um congrats

1657
00:58:09,760 --> 00:58:10,960
to all of them

1658
00:58:10,960 --> 00:58:13,040
on the slides um

1659
00:58:13,040 --> 00:58:14,240
very recently

1660
00:58:14,240 --> 00:58:15,839
in the era of siernars friendly hashes

1661
00:58:15,839 --> 00:58:17,280
there's also

1662
00:58:17,280 --> 00:58:19,599
so much interest that people put out

1663
00:58:19,599 --> 00:58:21,440
bounties and i adjusted this ruptures

1664
00:58:21,440 --> 00:58:23,200
and we had

1665
00:58:23,200 --> 00:58:25,599
basically seen the results of the first

1666
00:58:25,599 --> 00:58:27,359
windows of this of this challenge here

1667
00:58:27,359 --> 00:58:29,040
as well so if you're looking for

1668
00:58:29,040 --> 00:58:31,440
concrete crypto analysis i can commend

1669
00:58:31,440 --> 00:58:34,400
you for example those two

1670
00:58:34,400 --> 00:58:38,640
those two um those two sites that list a

1671
00:58:38,640 --> 00:58:40,720
few topics so let me conclude here with

1672
00:58:40,720 --> 00:58:42,799
my last two slides i hope we could show

1673
00:58:42,799 --> 00:58:44,240
you that um

1674
00:58:44,240 --> 00:58:46,880
the number of interesting developments

1675
00:58:46,880 --> 00:58:48,880
in what you could call high function

1676
00:58:48,880 --> 00:58:51,040
crypto

1677
00:58:51,040 --> 00:58:52,960
some of them are likely here to stay we

1678
00:58:52,960 --> 00:58:54,720
will know

1679
00:58:54,720 --> 00:58:56,880
in five years perhaps which ones and

1680
00:58:56,880 --> 00:58:58,400
which ones

1681
00:58:58,400 --> 00:59:00,000
remain a niche

1682
00:59:00,000 --> 00:59:03,040
and this in turn leads to a lot of new

1683
00:59:03,040 --> 00:59:04,480
interesting problems and venues in the

1684
00:59:04,480 --> 00:59:06,799
design and analysis of of symmetric

1685
00:59:06,799 --> 00:59:09,119
crypto industry demand is growing for

1686
00:59:09,119 --> 00:59:11,040
sure i keep hearing this a lot

1687
00:59:11,040 --> 00:59:13,440
uh even demands for standards for

1688
00:59:13,440 --> 00:59:15,760
example to support interoperability and

1689
00:59:15,760 --> 00:59:18,240
increase trust so what this means i

1690
00:59:18,240 --> 00:59:20,000
guess is a

1691
00:59:20,000 --> 00:59:22,559
even more of a community effort to

1692
00:59:22,559 --> 00:59:23,359
to

1693
00:59:23,359 --> 00:59:26,480
agree on on what is a good design

1694
00:59:26,480 --> 00:59:29,760
and uh yeah in order to support this

1695
00:59:29,760 --> 00:59:31,680
i'm happy to announce that

1696
00:59:31,680 --> 00:59:34,480
we open sourced many more of

1697
00:59:34,480 --> 00:59:36,079
our implementations

1698
00:59:36,079 --> 00:59:38,799
uh this website went live yesterday and

1699
00:59:38,799 --> 00:59:41,119
for for free for all three domains that

1700
00:59:41,119 --> 00:59:42,880
i that i covered

1701
00:59:42,880 --> 00:59:45,200
today

1702
00:59:45,200 --> 00:59:47,200
the count

1703
00:59:47,200 --> 00:59:48,480
the count of public available

1704
00:59:48,480 --> 00:59:50,559
implementations uh increased sometimes a

1705
00:59:50,559 --> 00:59:52,480
lot you know uh in the case of

1706
00:59:52,480 --> 00:59:54,720
homomorphic encryption well this is out

1707
00:59:54,720 --> 00:59:56,720
already for half a year or so before it

1708
00:59:56,720 --> 00:59:59,359
was one now it's actually 16 and maybe

1709
00:59:59,359 --> 01:00:01,119
it's a coincidence maybe not but now two

1710
01:00:01,119 --> 01:00:03,359
very recent designs also came

1711
01:00:03,359 --> 01:00:05,520
with public implementation against at

1712
01:00:05,520 --> 01:00:08,079
least one library here we cover several

1713
01:00:08,079 --> 01:00:12,799
libraries but yeah i hope this helps to

1714
01:00:12,799 --> 01:00:14,960
increase the community working on this

1715
01:00:14,960 --> 01:00:16,640
on this topic you not only have plain

1716
01:00:16,640 --> 01:00:18,559
implementations but also implementations

1717
01:00:18,559 --> 01:00:20,480
of of use cases for example an

1718
01:00:20,480 --> 01:00:21,680
end-to-end

1719
01:00:21,680 --> 01:00:23,440
use case where you approve the knowledge

1720
01:00:23,440 --> 01:00:25,359
of a pre-image of six different hash

1721
01:00:25,359 --> 01:00:26,319
functions

1722
01:00:26,319 --> 01:00:27,359
if you want to design a new hash

1723
01:00:27,359 --> 01:00:29,440
function you can have a look and start

1724
01:00:29,440 --> 01:00:31,040
out with these implementations right

1725
01:00:31,040 --> 01:00:32,160
away

1726
01:00:32,160 --> 01:00:33,839
now with that i'm really at the end of

1727
01:00:33,839 --> 01:00:35,760
my presentation and thanks a lot for

1728
01:00:35,760 --> 01:00:37,119
your attention i'm not just happy to

1729
01:00:37,119 --> 01:00:40,520
take any questions

1730
01:00:47,520 --> 01:00:49,280
so thank you christian for the very nice

1731
01:00:49,280 --> 01:00:50,559
talk

1732
01:00:50,559 --> 01:00:52,079
we don't have a lot of time but we can

1733
01:00:52,079 --> 01:00:53,920
take a few questions in the room or

1734
01:00:53,920 --> 01:00:56,920
online

1735
01:01:12,880 --> 01:01:15,040
uh i have a question could you say a few

1736
01:01:15,040 --> 01:01:18,000
words uh concerning that crypto or

1737
01:01:18,000 --> 01:01:20,079
privileges of morality can you say a few

1738
01:01:20,079 --> 01:01:23,880
words about the choice

1739
01:01:27,280 --> 01:01:28,960
yeah thanks excellent question thanks a

1740
01:01:28,960 --> 01:01:30,079
lot

1741
01:01:30,079 --> 01:01:30,960
um

1742
01:01:30,960 --> 01:01:33,200
please repeat the question oh yeah so

1743
01:01:33,200 --> 01:01:34,799
ann cantor was asking

1744
01:01:34,799 --> 01:01:36,960
me to comment a bit more on uh

1745
01:01:36,960 --> 01:01:38,480
especially these fp

1746
01:01:38,480 --> 01:01:40,559
designs uh which

1747
01:01:40,559 --> 01:01:43,040
piece can we choose them uh which piece

1748
01:01:43,040 --> 01:01:45,680
are we working with

1749
01:01:45,680 --> 01:01:47,119
so

1750
01:01:47,119 --> 01:01:49,040
in some use cases we can freely choose p

1751
01:01:49,040 --> 01:01:50,640
but mostly

1752
01:01:50,640 --> 01:01:52,799
we rely on the underlying

1753
01:01:52,799 --> 01:01:54,640
cryptosystem and for example in the

1754
01:01:54,640 --> 01:01:57,200
serial knowledge the main people work in

1755
01:01:57,200 --> 01:01:58,880
elliptic curve

1756
01:01:58,880 --> 01:01:59,839
uh

1757
01:01:59,839 --> 01:02:01,039
work in turn with elliptic curve

1758
01:02:01,039 --> 01:02:04,559
libraries and then those p's are derived

1759
01:02:04,559 --> 01:02:06,160
from whatever elliptic curves that are

1760
01:02:06,160 --> 01:02:08,400
around here so this is a very

1761
01:02:08,400 --> 01:02:11,280
very widespread choice in the uh yeah i

1762
01:02:11,280 --> 01:02:12,880
think that's the that's that's the

1763
01:02:12,880 --> 01:02:15,119
driving force that's why we have

1764
01:02:15,119 --> 01:02:17,680
um hash functions that work over

1765
01:02:17,680 --> 01:02:19,119
non-linear building blocks over for

1766
01:02:19,119 --> 01:02:21,760
example 256 bits because that's exactly

1767
01:02:21,760 --> 01:02:24,400
matching to an underlying elliptic curve

1768
01:02:24,400 --> 01:02:28,039
that is used in those libraries

1769
01:02:34,400 --> 01:02:36,160
uh hi christian

1770
01:02:36,160 --> 01:02:37,359
uh this is

1771
01:02:37,359 --> 01:02:39,920
online so uh in one of the slides you

1772
01:02:39,920 --> 01:02:42,240
are mentioning uh about this confidence

1773
01:02:42,240 --> 01:02:43,760
level you gave one

1774
01:02:43,760 --> 01:02:46,160
ten thousand could you please explain

1775
01:02:46,160 --> 01:02:48,000
are these kind of studies done for other

1776
01:02:48,000 --> 01:02:50,000
ciphers as well or like this is

1777
01:02:50,000 --> 01:02:52,000
something you are looking at could you

1778
01:02:52,000 --> 01:02:54,240
explain it further okay so i mean this

1779
01:02:54,240 --> 01:02:55,839
this this one in this table here let me

1780
01:02:55,839 --> 01:02:58,960
move back this is perhaps a pretty harsh

1781
01:02:58,960 --> 01:03:00,880
statement here and this

1782
01:03:00,880 --> 01:03:02,960
they are to motivate basically

1783
01:03:02,960 --> 01:03:04,480
um

1784
01:03:04,480 --> 01:03:07,200
a new design that does not only rely on

1785
01:03:07,200 --> 01:03:09,119
algebraically simple building blocks but

1786
01:03:09,119 --> 01:03:10,960
also has

1787
01:03:10,960 --> 01:03:12,559
elements that

1788
01:03:12,559 --> 01:03:14,720
allow for more classical

1789
01:03:14,720 --> 01:03:16,960
group analysis if you want

1790
01:03:16,960 --> 01:03:18,799
so this numeric value here this one

1791
01:03:18,799 --> 01:03:21,760
compared to 100 or so this is just a

1792
01:03:21,760 --> 01:03:24,160
gut feeling that conveys

1793
01:03:24,160 --> 01:03:25,839
the idea that

1794
01:03:25,839 --> 01:03:28,319
for some

1795
01:03:28,400 --> 01:03:30,079
designs that are longer around and more

1796
01:03:30,079 --> 01:03:32,319
classical perhaps because they stem from

1797
01:03:32,319 --> 01:03:34,240
the sha three competition

1798
01:03:34,240 --> 01:03:37,680
have hence more confidence uh

1799
01:03:37,680 --> 01:03:39,440
this factor 10 in between doesn't have

1800
01:03:39,440 --> 01:03:41,280
any real meaning here so this is this is

1801
01:03:41,280 --> 01:03:44,319
just my my gut feeling here and at least

1802
01:03:44,319 --> 01:03:47,119
in the short run this then motivates to

1803
01:03:47,119 --> 01:03:49,839
combine algebraically simple

1804
01:03:49,839 --> 01:03:52,160
approaches with something that is more

1805
01:03:52,160 --> 01:03:54,160
more classical

1806
01:03:54,160 --> 01:03:56,000
i hope this could answer your question

1807
01:03:56,000 --> 01:03:58,799
yeah yeah thanks thanks nice job thank

1808
01:03:58,799 --> 01:04:00,960
you

1809
01:04:07,280 --> 01:04:09,280
so if we don't have any more questions i

1810
01:04:09,280 --> 01:04:11,359
think it's time to wrap up

1811
01:04:11,359 --> 01:04:13,440
so we have a short break we will start

1812
01:04:13,440 --> 01:04:14,480
the next

1813
01:04:14,480 --> 01:04:15,599
session

1814
01:04:15,599 --> 01:04:18,640
around 10 minutes i guess

1815
01:04:18,640 --> 01:04:20,160
and please if you are speaking in the

1816
01:04:20,160 --> 01:04:22,880
next session bring your slides if you

1817
01:04:22,880 --> 01:04:24,640
have a usb stick you can put your slides

1818
01:04:24,640 --> 01:04:26,000
on the computer and this will be much

1819
01:04:26,000 --> 01:04:28,160
easier

