1
00:00:00,640 --> 00:00:03,040
hi my name is benoit and i'm going to

2
00:00:03,040 --> 00:00:06,080
talk to you about ctet plus a beyond

3
00:00:06,080 --> 00:00:07,759
birthday bound secure tweakable and

4
00:00:07,759 --> 00:00:09,840
ciphering scheme using a single

5
00:00:09,840 --> 00:00:11,920
pseudorandom permutation

6
00:00:11,920 --> 00:00:14,400
this is a joint work with jordan

7
00:00:14,400 --> 00:00:17,040
virginia

8
00:00:18,160 --> 00:00:20,240
in this work we're interested in the

9
00:00:20,240 --> 00:00:23,840
problem of full disk encryption

10
00:00:23,840 --> 00:00:26,880
in this context we want to encrypt data

11
00:00:26,880 --> 00:00:31,359
that is divided into chunks or sectors

12
00:00:31,359 --> 00:00:34,239
of a size that is a few hundred bytes to

13
00:00:34,239 --> 00:00:35,840
a few kilobytes

14
00:00:35,840 --> 00:00:37,520
the problem that we have

15
00:00:37,520 --> 00:00:39,840
is that there is no room to store

16
00:00:39,840 --> 00:00:42,559
additional data like a nonce or a random

17
00:00:42,559 --> 00:00:45,520
iv or even an authentication tag so we

18
00:00:45,520 --> 00:00:49,440
have to work around this limitation

19
00:00:49,440 --> 00:00:51,920
and what we want to do is to encrypt

20
00:00:51,920 --> 00:00:54,399
each sector independently

21
00:00:54,399 --> 00:00:56,640
of course having a different key for

22
00:00:56,640 --> 00:00:59,680
each sector is very impractical

23
00:00:59,680 --> 00:01:03,280
so a good solution is to use a tweakable

24
00:01:03,280 --> 00:01:04,879
block cipher

25
00:01:04,879 --> 00:01:06,720
tweakable block ciphers are a key

26
00:01:06,720 --> 00:01:09,280
primitive that generalize standard block

27
00:01:09,280 --> 00:01:12,560
cipher by taking an additional input

28
00:01:12,560 --> 00:01:15,119
that is called a tweak and whose goal is

29
00:01:15,119 --> 00:01:17,600
to bring variability to the block cipher

30
00:01:17,600 --> 00:01:19,680
we can assume that t is public or

31
00:01:19,680 --> 00:01:21,600
controlled by the adversary without

32
00:01:21,600 --> 00:01:23,600
decreasing the security of the tweakable

33
00:01:23,600 --> 00:01:25,280
block cipher

34
00:01:25,280 --> 00:01:28,720
and we want that a secure tweakable

35
00:01:28,720 --> 00:01:31,680
block cipher gives us a new independent

36
00:01:31,680 --> 00:01:34,560
permutation every time we pitch a new

37
00:01:34,560 --> 00:01:36,000
tweak

38
00:01:36,000 --> 00:01:38,479
we do have several examples of natively

39
00:01:38,479 --> 00:01:41,680
tweakable block ciphers like the deoxys

40
00:01:41,680 --> 00:01:43,439
block cipher

41
00:01:43,439 --> 00:01:46,560
however for the problem that we have

42
00:01:46,560 --> 00:01:48,320
this tweakable block cipher are not

43
00:01:48,320 --> 00:01:49,439
sufficient

44
00:01:49,439 --> 00:01:51,040
because

45
00:01:51,040 --> 00:01:54,399
existing ones use a small size of blocks

46
00:01:54,399 --> 00:01:57,439
like typically 128 bits which is not

47
00:01:57,439 --> 00:02:00,320
enough to encrypt a whole sector as a

48
00:02:00,320 --> 00:02:02,320
single block

49
00:02:02,320 --> 00:02:04,880
the solution is to use a tweakable mode

50
00:02:04,880 --> 00:02:07,280
of operation for a smaller primitive

51
00:02:07,280 --> 00:02:09,119
like a block cipher or a tweak of a

52
00:02:09,119 --> 00:02:11,920
block cipher with a small block size

53
00:02:11,920 --> 00:02:13,520
and in that case the simplest

54
00:02:13,520 --> 00:02:15,840
construction is to use a tweakable block

55
00:02:15,840 --> 00:02:16,879
cipher

56
00:02:16,879 --> 00:02:18,959
and in order to encrypt

57
00:02:18,959 --> 00:02:22,800
each block of a sector m1m2 m3 you just

58
00:02:22,800 --> 00:02:24,319
use as a tweak

59
00:02:24,319 --> 00:02:27,520
the concatenation of the number of the

60
00:02:27,520 --> 00:02:29,440
sector that is i

61
00:02:29,440 --> 00:02:30,239
and

62
00:02:30,239 --> 00:02:33,120
the position of the block in the sector

63
00:02:33,120 --> 00:02:34,840
so one two

64
00:02:34,840 --> 00:02:37,760
three this simple construction does have

65
00:02:37,760 --> 00:02:40,080
some advantages first it actually

66
00:02:40,080 --> 00:02:42,080
provides independent encryption between

67
00:02:42,080 --> 00:02:45,519
sectors and it's also very fast as every

68
00:02:45,519 --> 00:02:47,440
block in a sector is encrypted

69
00:02:47,440 --> 00:02:49,840
independently from the others so it can

70
00:02:49,840 --> 00:02:52,400
be decrypted in a single two cable block

71
00:02:52,400 --> 00:02:55,280
cipher course which is very efficient

72
00:02:55,280 --> 00:02:57,599
however it does provide

73
00:02:57,599 --> 00:03:00,480
the anniversary with a good granularity

74
00:03:00,480 --> 00:03:02,879
for example assume that an adversary is

75
00:03:02,879 --> 00:03:06,159
able to monitor the changes in the

76
00:03:06,159 --> 00:03:08,000
in the ciphertext

77
00:03:08,000 --> 00:03:10,319
if only a single block is

78
00:03:10,319 --> 00:03:13,440
updated for example m1 then a single

79
00:03:13,440 --> 00:03:15,920
ciphertext block will also be changed

80
00:03:15,920 --> 00:03:18,080
which can which can allow an adversary

81
00:03:18,080 --> 00:03:20,959
to monitor very closely uh what kind of

82
00:03:20,959 --> 00:03:24,400
changes uh were done in the plain texts

83
00:03:24,400 --> 00:03:25,599
and

84
00:03:25,599 --> 00:03:26,959
this can be bad

85
00:03:26,959 --> 00:03:29,519
uh from a privacy point of view

86
00:03:29,519 --> 00:03:31,519
the current standard for this encryption

87
00:03:31,519 --> 00:03:33,840
which is aes xts

88
00:03:33,840 --> 00:03:36,480
uses this construction combined with the

89
00:03:36,480 --> 00:03:39,920
xcx transformation applied to the aes

90
00:03:39,920 --> 00:03:43,440
note that xcx has a security up to the

91
00:03:43,440 --> 00:03:45,840
birthday bound which means that the

92
00:03:45,840 --> 00:03:48,080
construction is secure as long as the

93
00:03:48,080 --> 00:03:50,080
number of current blocks is small in

94
00:03:50,080 --> 00:03:52,319
front of 2 to the 64.

95
00:03:52,319 --> 00:03:57,519
as60s uses two aes keys k1 and k2

96
00:03:57,519 --> 00:04:01,920
and if you want to encrypt the js block

97
00:04:01,920 --> 00:04:04,319
in the ith sector

98
00:04:04,319 --> 00:04:07,360
you first encrypt i using

99
00:04:07,360 --> 00:04:09,360
the key k2

100
00:04:09,360 --> 00:04:13,680
you get a mask that you multiply

101
00:04:13,680 --> 00:04:14,480
by

102
00:04:14,480 --> 00:04:16,560
alpha to the power j where alpha the

103
00:04:16,560 --> 00:04:19,600
primitive element of gf2 to the n

104
00:04:19,600 --> 00:04:23,360
this new mask is sold to the plain text

105
00:04:23,360 --> 00:04:24,880
mj

106
00:04:24,880 --> 00:04:27,040
then you give that as an input to aes

107
00:04:27,040 --> 00:04:28,800
with the key k1

108
00:04:28,800 --> 00:04:31,840
you saw the mask a second time and you

109
00:04:31,840 --> 00:04:35,199
get the ciphertext cj

110
00:04:35,199 --> 00:04:37,440
this construction actually has two

111
00:04:37,440 --> 00:04:40,160
issues the first one is the small

112
00:04:40,160 --> 00:04:42,479
granularity issue that i mentioned

113
00:04:42,479 --> 00:04:44,240
in the previous slide

114
00:04:44,240 --> 00:04:46,560
and the second one is that big data

115
00:04:46,560 --> 00:04:49,040
centers most likely hold more than to

116
00:04:49,040 --> 00:04:52,000
the 250 bytes which is very close to the

117
00:04:52,000 --> 00:04:55,280
birthday bound of 2 to the 64.

118
00:04:55,280 --> 00:04:58,479
the solution to the granularity issue is

119
00:04:58,479 --> 00:05:01,520
to use wide talkable block ciphers which

120
00:05:01,520 --> 00:05:04,960
use whole sectors as input blocks even

121
00:05:04,960 --> 00:05:07,280
if they are based on a tweakable block

122
00:05:07,280 --> 00:05:10,000
cipher or a block cipher with a small

123
00:05:10,000 --> 00:05:11,600
block size

124
00:05:11,600 --> 00:05:14,240
using such an algorithm if you have for

125
00:05:14,240 --> 00:05:17,600
example a single bit change in m1

126
00:05:17,600 --> 00:05:18,479
then

127
00:05:18,479 --> 00:05:21,360
all the ciphertext blocks c1 c2

128
00:05:21,360 --> 00:05:22,800
3 and so on

129
00:05:22,800 --> 00:05:24,560
will be affected

130
00:05:24,560 --> 00:05:26,960
unlike before where only c1 would have

131
00:05:26,960 --> 00:05:28,479
been changed

132
00:05:28,479 --> 00:05:32,000
several such constructions already exist

133
00:05:32,000 --> 00:05:34,639
and they can be divided into three

134
00:05:34,639 --> 00:05:37,919
families you have encrypt mix encrypt

135
00:05:37,919 --> 00:05:42,000
hash encrypt hash and hash counter hash

136
00:05:42,000 --> 00:05:44,720
roughly for a hash encrypt hash and hash

137
00:05:44,720 --> 00:05:46,400
counter hash

138
00:05:46,400 --> 00:05:50,000
you first give your input sector as an

139
00:05:50,000 --> 00:05:53,680
input to a hash a kid hash function that

140
00:05:53,680 --> 00:05:56,080
also takes as input a tweak

141
00:05:56,080 --> 00:05:59,520
you get a new sector that is encrypted

142
00:05:59,520 --> 00:06:02,800
either with the ecb mode of operation or

143
00:06:02,800 --> 00:06:05,440
the counter mode of operation

144
00:06:05,440 --> 00:06:07,039
and this

145
00:06:07,039 --> 00:06:12,000
new sector will be given to a new hash

146
00:06:12,000 --> 00:06:14,639
layer that also takes as input that week

147
00:06:14,639 --> 00:06:17,280
and you get the corresponding encrypted

148
00:06:17,280 --> 00:06:19,680
sector

149
00:06:19,680 --> 00:06:22,800
for the encrypt mix encrypt

150
00:06:22,800 --> 00:06:24,880
family

151
00:06:24,880 --> 00:06:28,800
it works in a similar way but you first

152
00:06:28,800 --> 00:06:31,600
encrypt the the sector with the ecb mode

153
00:06:31,600 --> 00:06:32,960
of operation

154
00:06:32,960 --> 00:06:35,680
then you have a linear mixing layer m

155
00:06:35,680 --> 00:06:38,080
that also takes as input the tweak and

156
00:06:38,080 --> 00:06:42,400
you have another ecb encryption layer

157
00:06:42,400 --> 00:06:45,280
all those constructions require either

158
00:06:45,280 --> 00:06:49,280
two aes call or when a one aes call and

159
00:06:49,280 --> 00:06:52,000
two field multiplications per block and

160
00:06:52,000 --> 00:06:54,800
they also have in common the fact that

161
00:06:54,800 --> 00:06:58,080
they are secure up to to the 64 queries

162
00:06:58,080 --> 00:07:00,160
so the birth they bound

163
00:07:00,160 --> 00:07:01,840
this construction all solves the

164
00:07:01,840 --> 00:07:04,800
granularity issue but they do not solve

165
00:07:04,800 --> 00:07:07,360
the birthday bound issue

166
00:07:07,360 --> 00:07:09,599
if we want to get a security beyond the

167
00:07:09,599 --> 00:07:12,000
birthday bound we actually have to

168
00:07:12,000 --> 00:07:14,800
increase the number of layers and the

169
00:07:14,800 --> 00:07:17,360
two two-round spn has already been used

170
00:07:17,360 --> 00:07:19,599
as a tweakable domain extender

171
00:07:19,599 --> 00:07:21,440
for block ciphers

172
00:07:21,440 --> 00:07:24,000
it can be seen as an example of the hash

173
00:07:24,000 --> 00:07:28,000
encrypt hash encrypt hash paradigm

174
00:07:28,000 --> 00:07:30,479
and it has already been proven secure up

175
00:07:30,479 --> 00:07:32,720
two to the two to the two n divided by

176
00:07:32,720 --> 00:07:36,240
three queries as long as uh t and t

177
00:07:36,240 --> 00:07:39,199
minus one uh satisfy some

178
00:07:39,199 --> 00:07:41,840
some properties namely we want them to

179
00:07:41,840 --> 00:07:43,840
be almost super blockbuster's universal

180
00:07:43,840 --> 00:07:47,199
and uniform which we shorten to sbu

181
00:07:47,199 --> 00:07:49,680
in more details it means is that the

182
00:07:49,680 --> 00:07:51,680
probability over the random choice of

183
00:07:51,680 --> 00:07:53,199
the key k

184
00:07:53,199 --> 00:07:57,440
to be able to fix any output block of t

185
00:07:57,440 --> 00:07:59,840
to some predetermined value u should be

186
00:07:59,840 --> 00:08:02,080
close to 2 to the minus n

187
00:08:02,080 --> 00:08:04,400
and similarly the probability of the

188
00:08:04,400 --> 00:08:06,080
over the random choice of the key to be

189
00:08:06,080 --> 00:08:08,639
able to create some collision between

190
00:08:08,639 --> 00:08:11,919
any two output blocks of t should be

191
00:08:11,919 --> 00:08:14,800
close to 2 to the minus n

192
00:08:14,800 --> 00:08:16,879
we already know of an example of

193
00:08:16,879 --> 00:08:20,240
efficient linear two cable sbu layer

194
00:08:20,240 --> 00:08:22,800
which is the the following one so

195
00:08:22,800 --> 00:08:25,720
in this example t uses two

196
00:08:25,720 --> 00:08:31,039
128 bit keys k and k prime one 128 bit

197
00:08:31,039 --> 00:08:32,559
tweak t

198
00:08:32,559 --> 00:08:38,159
and one w times 128 bit sector x that is

199
00:08:38,159 --> 00:08:44,000
divided in w blocks x1 x2 up to xw

200
00:08:44,480 --> 00:08:47,040
and in order to evaluate

201
00:08:47,040 --> 00:08:47,760
t

202
00:08:47,760 --> 00:08:49,760
on the inputs

203
00:08:49,760 --> 00:08:51,200
t and x

204
00:08:51,200 --> 00:08:54,640
you take the scalar product of a vector

205
00:08:54,640 --> 00:08:57,839
of growing powers of the key k k k

206
00:08:57,839 --> 00:09:00,240
squared up to k w

207
00:09:00,240 --> 00:09:04,080
and of the vector of all the x i x or t

208
00:09:04,080 --> 00:09:06,080
values

209
00:09:06,080 --> 00:09:09,680
this scalar product is sold to all the

210
00:09:09,680 --> 00:09:12,959
blocks x1 x2 up to xw

211
00:09:12,959 --> 00:09:15,920
and then another value that depends on k

212
00:09:15,920 --> 00:09:18,640
prime and is multiplied by the power of

213
00:09:18,640 --> 00:09:21,360
alpha a primitive element of gf2 to the

214
00:09:21,360 --> 00:09:26,160
n which give us the output value of t

215
00:09:26,160 --> 00:09:28,000
note that this construction is

216
00:09:28,000 --> 00:09:30,880
invertible as long as the xor of the

217
00:09:30,880 --> 00:09:32,320
powers of k

218
00:09:32,320 --> 00:09:35,360
xor 1 is different from 0

219
00:09:35,360 --> 00:09:37,519
and as long as this is the case the

220
00:09:37,519 --> 00:09:39,760
probability of collision is smaller than

221
00:09:39,760 --> 00:09:43,040
w plus 1 divided by 2 to the n minus w

222
00:09:43,040 --> 00:09:45,040
so very close to

223
00:09:45,040 --> 00:09:47,600
2 to the minus n

224
00:09:47,600 --> 00:09:50,959
and this construction is linear and it

225
00:09:50,959 --> 00:09:52,160
requires

226
00:09:52,160 --> 00:09:54,560
roughly one finite field multiplication

227
00:09:54,560 --> 00:09:55,839
per block

228
00:09:55,839 --> 00:09:59,120
which is actually quite efficient

229
00:09:59,120 --> 00:10:02,079
our first contribution in this work

230
00:10:02,079 --> 00:10:05,360
is to introduce ctet plus which is an

231
00:10:05,360 --> 00:10:07,760
optimization of the two round spn that

232
00:10:07,760 --> 00:10:10,000
they presented earlier

233
00:10:10,000 --> 00:10:12,880
first we will use the same permutation

234
00:10:12,880 --> 00:10:14,800
in both non-linear layers of the

235
00:10:14,800 --> 00:10:16,480
construction

236
00:10:16,480 --> 00:10:18,720
and then we also remark that it's

237
00:10:18,720 --> 00:10:21,680
possible to use a much more efficient

238
00:10:21,680 --> 00:10:24,800
linear middle layer instead of using t

239
00:10:24,800 --> 00:10:27,839
for the three linear layers

240
00:10:27,839 --> 00:10:30,160
namely we show that

241
00:10:30,160 --> 00:10:32,880
in the middle linear layer c can be

242
00:10:32,880 --> 00:10:36,480
replaced by a much simpler linear layer

243
00:10:36,480 --> 00:10:39,600
l which doesn't rely on a keyed matrix

244
00:10:39,600 --> 00:10:41,120
multiplication

245
00:10:41,120 --> 00:10:43,120
and that the resulting construction is

246
00:10:43,120 --> 00:10:45,680
still secure up to 2 to the 2n divided

247
00:10:45,680 --> 00:10:49,120
by 3 queries as long as both t and t

248
00:10:49,120 --> 00:10:51,760
minus 1 are sbu

249
00:10:51,760 --> 00:10:53,440
i won't go into the details of a

250
00:10:53,440 --> 00:10:56,880
security proof but as usual it

251
00:10:56,880 --> 00:11:00,079
relies on the h coefficients technique

252
00:11:00,079 --> 00:11:03,440
and basically it boils down to comparing

253
00:11:03,440 --> 00:11:05,920
the interpolation probabilities between

254
00:11:05,920 --> 00:11:08,480
the construction and a uniformly random

255
00:11:08,480 --> 00:11:10,480
tweakable permutation

256
00:11:10,480 --> 00:11:13,760
assuming independent s-boxes

257
00:11:13,760 --> 00:11:17,360
the strategy works in two steps first we

258
00:11:17,360 --> 00:11:20,160
show that with a high probability

259
00:11:20,160 --> 00:11:23,040
it's impossible to get a collision

260
00:11:23,040 --> 00:11:26,000
both in the input of the first linear

261
00:11:26,000 --> 00:11:30,320
layer s1 and the output of the second

262
00:11:30,320 --> 00:11:32,320
linear layer s2

263
00:11:32,320 --> 00:11:34,480
and under this condition

264
00:11:34,480 --> 00:11:36,560
we simply lower bound the number of

265
00:11:36,560 --> 00:11:39,279
possible intermediate values for the

266
00:11:39,279 --> 00:11:42,000
outputs of s1 and the input

267
00:11:42,000 --> 00:11:43,440
of s2

268
00:11:43,440 --> 00:11:45,279
and show that

269
00:11:45,279 --> 00:11:48,640
the number is sufficiently high to make

270
00:11:48,640 --> 00:11:50,959
the interpolation probabilities close

271
00:11:50,959 --> 00:11:52,800
enough

272
00:11:52,800 --> 00:11:55,040
since we are in the single permutation

273
00:11:55,040 --> 00:11:58,240
case where s1 is equal to s2 it's

274
00:11:58,240 --> 00:12:00,240
actually possible that

275
00:12:00,240 --> 00:12:03,279
an input to the first xbox layer is

276
00:12:03,279 --> 00:12:06,480
equal to an input in the second

277
00:12:06,480 --> 00:12:09,519
xbox layer so we have to take care of

278
00:12:09,519 --> 00:12:12,240
this internal collision when computing

279
00:12:12,240 --> 00:12:14,720
our interpolation probability which

280
00:12:14,720 --> 00:12:18,160
makes the computation slightly uh more

281
00:12:18,160 --> 00:12:20,560
complicated with when compared with the

282
00:12:20,560 --> 00:12:21,839
independent

283
00:12:21,839 --> 00:12:23,760
s box case

284
00:12:23,760 --> 00:12:26,399
if you want more details on the proof

285
00:12:26,399 --> 00:12:29,200
you can have a look at the the full

286
00:12:29,200 --> 00:12:32,959
paper where you can find all the details

287
00:12:32,959 --> 00:12:36,240
our second contribution is the design

288
00:12:36,240 --> 00:12:38,240
and implementation of a concrete

289
00:12:38,240 --> 00:12:41,279
instance of ctet plus

290
00:12:41,279 --> 00:12:44,079
with this in mind we can identify three

291
00:12:44,079 --> 00:12:47,360
different strategies to get our instance

292
00:12:47,360 --> 00:12:50,800
the first one is to simply use the full

293
00:12:50,800 --> 00:12:54,720
aes 128 bits with all 10 rounds

294
00:12:54,720 --> 00:12:58,160
in that case we can easily claim 85 bits

295
00:12:58,160 --> 00:13:02,079
of security by using a simple

296
00:13:02,079 --> 00:13:05,040
security reduction and the generic

297
00:13:05,040 --> 00:13:07,360
security bond

298
00:13:07,360 --> 00:13:09,600
a more aggressive option would be to use

299
00:13:09,600 --> 00:13:12,399
a run reduced version of aes that has

300
00:13:12,399 --> 00:13:15,120
roughly the same security as the final

301
00:13:15,120 --> 00:13:16,959
construction so that would be roughly

302
00:13:16,959 --> 00:13:19,040
seven rounds of aes

303
00:13:19,040 --> 00:13:20,560
and the third option would be to

304
00:13:20,560 --> 00:13:22,720
directly prove the security of the full

305
00:13:22,720 --> 00:13:24,959
construction using

306
00:13:24,959 --> 00:13:27,440
a round reduced version of aes with

307
00:13:27,440 --> 00:13:28,560
strictly

308
00:13:28,560 --> 00:13:31,600
less than seven rounds

309
00:13:31,600 --> 00:13:34,000
we actually chose to follow the third

310
00:13:34,000 --> 00:13:35,200
strategy

311
00:13:35,200 --> 00:13:38,440
and introduce our actual instance

312
00:13:38,440 --> 00:13:41,040
aes6 ctedt plus

313
00:13:41,040 --> 00:13:45,279
which combines the cte plus construction

314
00:13:45,279 --> 00:13:47,360
with a round reduced

315
00:13:47,360 --> 00:13:51,120
aes with only 6 rounds

316
00:13:51,120 --> 00:13:54,079
overall our construction takes as input

317
00:13:54,079 --> 00:13:56,639
a 128 bit tweak

318
00:13:56,639 --> 00:14:00,480
a white block of w 128 bit words

319
00:14:00,480 --> 00:14:04,399
and relies on six 128 bit keys

320
00:14:04,399 --> 00:14:06,720
two for each t linear layer

321
00:14:06,720 --> 00:14:09,760
one for the l middle linear layer and

322
00:14:09,760 --> 00:14:12,639
one for the aes box

323
00:14:12,639 --> 00:14:15,720
our security analysis allows us to claim

324
00:14:15,720 --> 00:14:21,680
127 bits of security for aes6 cte plus

325
00:14:21,680 --> 00:14:24,079
we rely on two complementary arguments

326
00:14:24,079 --> 00:14:26,480
to justify our claims

327
00:14:26,480 --> 00:14:29,760
first we have the generic security proof

328
00:14:29,760 --> 00:14:32,399
which justifies the fact that the

329
00:14:32,399 --> 00:14:34,480
generic structure of the instance is

330
00:14:34,480 --> 00:14:35,360
sound

331
00:14:35,360 --> 00:14:37,600
and it proves that

332
00:14:37,600 --> 00:14:39,600
the construction will resist generic

333
00:14:39,600 --> 00:14:42,000
attacks with very high probability

334
00:14:42,000 --> 00:14:44,320
second we provide dedicated crypto

335
00:14:44,320 --> 00:14:46,720
analysis to justify

336
00:14:46,720 --> 00:14:50,079
why our instance is secure even when

337
00:14:50,079 --> 00:14:53,440
when the s box uses only six rounds of

338
00:14:53,440 --> 00:14:54,720
aes

339
00:14:54,720 --> 00:14:57,040
as far as script analysis is concerned

340
00:14:57,040 --> 00:14:59,760
we identify two main possible attack

341
00:14:59,760 --> 00:15:01,279
directions

342
00:15:01,279 --> 00:15:03,199
the first one is to use the weakness of

343
00:15:03,199 --> 00:15:05,600
the s-box and to extend it to the full

344
00:15:05,600 --> 00:15:06,959
construction

345
00:15:06,959 --> 00:15:09,920
and the second one is to directly attack

346
00:15:09,920 --> 00:15:13,199
the structure of our instance

347
00:15:13,199 --> 00:15:15,920
the first strategy is difficult to apply

348
00:15:15,920 --> 00:15:18,560
for two distinct reasons

349
00:15:18,560 --> 00:15:19,440
first

350
00:15:19,440 --> 00:15:21,839
the aes has very strong arguments

351
00:15:21,839 --> 00:15:24,560
against basic attack vectors so for

352
00:15:24,560 --> 00:15:27,279
example even four rounds of aes

353
00:15:27,279 --> 00:15:29,839
give significant security uh against

354
00:15:29,839 --> 00:15:32,000
differential linear and algebraic

355
00:15:32,000 --> 00:15:32,959
attacks

356
00:15:32,959 --> 00:15:35,680
so extending these basic properties

357
00:15:35,680 --> 00:15:39,759
cannot lead to a break of our instance

358
00:15:39,759 --> 00:15:43,120
moreover even if there exists attacks

359
00:15:43,120 --> 00:15:46,800
that are able to break six rounds of aes

360
00:15:46,800 --> 00:15:48,720
those attacks actually

361
00:15:48,720 --> 00:15:51,680
require the ability for the adversary to

362
00:15:51,680 --> 00:15:53,120
set

363
00:15:53,120 --> 00:15:56,639
either the input or the output of the

364
00:15:56,639 --> 00:15:58,800
aes block cipher

365
00:15:58,800 --> 00:16:01,759
which is made difficult by our first and

366
00:16:01,759 --> 00:16:03,839
last linear layer as we are going to

367
00:16:03,839 --> 00:16:05,600
argue

368
00:16:05,600 --> 00:16:08,079
indeed given the fact that the key k

369
00:16:08,079 --> 00:16:11,040
prime 0 is simply sort to each block of

370
00:16:11,040 --> 00:16:12,399
a sector

371
00:16:12,399 --> 00:16:14,880
it is easy to see that setting a

372
00:16:14,880 --> 00:16:18,480
specific value for s bits of the input

373
00:16:18,480 --> 00:16:21,040
of an s box requires guessing the

374
00:16:21,040 --> 00:16:22,639
corresponding

375
00:16:22,639 --> 00:16:25,839
bits of k prime 0

376
00:16:25,839 --> 00:16:27,759
moreover thanks to the matrix

377
00:16:27,759 --> 00:16:30,639
multiplication the only way to set a

378
00:16:30,639 --> 00:16:33,680
specific difference at the input of an s

379
00:16:33,680 --> 00:16:36,399
box with probability 1

380
00:16:36,399 --> 00:16:37,759
is to

381
00:16:37,759 --> 00:16:40,959
use the same input difference for all

382
00:16:40,959 --> 00:16:42,800
the x boxes

383
00:16:42,800 --> 00:16:45,759
this means that if an adversary wants to

384
00:16:45,759 --> 00:16:48,800
exploit different input patterns that

385
00:16:48,800 --> 00:16:52,000
have a high probability to go to the

386
00:16:52,000 --> 00:16:53,279
next round

387
00:16:53,279 --> 00:16:55,440
it will first have to guess

388
00:16:55,440 --> 00:16:58,000
the key k0

389
00:16:58,000 --> 00:17:00,800
these two facts either make attacks

390
00:17:00,800 --> 00:17:03,279
against the aes boxes much more

391
00:17:03,279 --> 00:17:06,799
expensive by requiring a key guess

392
00:17:06,799 --> 00:17:09,679
or they greatly restrict

393
00:17:09,679 --> 00:17:11,599
the different strategies that an

394
00:17:11,599 --> 00:17:14,880
adversary can use in choosing state

395
00:17:14,880 --> 00:17:17,199
differences

396
00:17:17,199 --> 00:17:19,679
all in all this prevents the extension

397
00:17:19,679 --> 00:17:22,799
of attacks against the aes boxes to the

398
00:17:22,799 --> 00:17:24,480
whole construction

399
00:17:24,480 --> 00:17:27,199
let us now take a look at two structural

400
00:17:27,199 --> 00:17:29,679
attacks namely yo-yo attacks and

401
00:17:29,679 --> 00:17:33,200
truncated distinguishing text

402
00:17:33,200 --> 00:17:35,360
let us start our discussion with yoyo

403
00:17:35,360 --> 00:17:36,880
attacks

404
00:17:36,880 --> 00:17:39,200
indeed when we remove the outer linear

405
00:17:39,200 --> 00:17:41,760
layers our construction boils down to

406
00:17:41,760 --> 00:17:44,080
two rounds of spn which can be

407
00:17:44,080 --> 00:17:46,240
distinguished in four queries with the

408
00:17:46,240 --> 00:17:47,520
yoyo attack

409
00:17:47,520 --> 00:17:50,400
so how does this attack work

410
00:17:50,400 --> 00:17:52,880
we start by choosing two different plain

411
00:17:52,880 --> 00:17:56,640
texts p0 and p1 with a specific zero

412
00:17:56,640 --> 00:17:59,039
difference pattern for example

413
00:17:59,039 --> 00:18:02,160
only the first blocks of p0 and p1 will

414
00:18:02,160 --> 00:18:04,320
differ and all the remaining blocks will

415
00:18:04,320 --> 00:18:05,440
be equal

416
00:18:05,440 --> 00:18:07,520
and then we ask for the corresponding

417
00:18:07,520 --> 00:18:09,120
ciphertext

418
00:18:09,120 --> 00:18:12,640
then we swap some words between both

419
00:18:12,640 --> 00:18:15,919
ciphertext c0 and c1 to get two new

420
00:18:15,919 --> 00:18:19,520
ciphertexts c tilde 0 and c tilde 1.

421
00:18:19,520 --> 00:18:22,480
and finally we ask for the corresponding

422
00:18:22,480 --> 00:18:26,000
plain text p tilde 0 and p tilde 1.

423
00:18:26,000 --> 00:18:29,280
it can be seen as that pitila 0 and p

424
00:18:29,280 --> 00:18:32,240
tilde 1 will automatically have the same

425
00:18:32,240 --> 00:18:36,000
zero difference pattern as p 0 p 1.

426
00:18:36,000 --> 00:18:39,280
this can be seen as follows

427
00:18:39,280 --> 00:18:42,160
the only difference between c 0 c 1 and

428
00:18:42,160 --> 00:18:45,919
c tilde 0 city 1 is the swap of some

429
00:18:45,919 --> 00:18:49,039
full words which means that after

430
00:18:49,039 --> 00:18:52,640
applying s minus 1 to both c 0 c 1 and c

431
00:18:52,640 --> 00:18:55,600
tilde 0 cited that 1 we will still have

432
00:18:55,600 --> 00:18:58,400
the same relationship than before

433
00:18:58,400 --> 00:19:00,400
applying the xbox layer

434
00:19:00,400 --> 00:19:01,760
similarly

435
00:19:01,760 --> 00:19:03,919
thanks to the linearity of l

436
00:19:03,919 --> 00:19:07,039
after applying l minus 1 this will not

437
00:19:07,039 --> 00:19:09,200
break the zero difference pattern

438
00:19:09,200 --> 00:19:14,400
between c tilde 0 tilde 1 and c 0 c1

439
00:19:14,400 --> 00:19:17,919
and this same relationship will still be

440
00:19:17,919 --> 00:19:21,440
preserved after an application of

441
00:19:21,440 --> 00:19:23,280
the xbox layer

442
00:19:23,280 --> 00:19:26,960
this means that p 0 p 1 and p tilde 0 p

443
00:19:26,960 --> 00:19:29,360
tilde 1 will still have the same zero

444
00:19:29,360 --> 00:19:31,200
difference button

445
00:19:31,200 --> 00:19:33,200
this argument can easily be extended to

446
00:19:33,200 --> 00:19:36,880
a version with one more linear layer l

447
00:19:36,880 --> 00:19:38,960
let us see what happens when we try to

448
00:19:38,960 --> 00:19:42,720
apply this technique to our construction

449
00:19:42,720 --> 00:19:44,559
first we have to build a pair of

450
00:19:44,559 --> 00:19:47,520
messages with a specific zero difference

451
00:19:47,520 --> 00:19:50,720
at the input of the first aes box

452
00:19:50,720 --> 00:19:53,200
as we have seen earlier this requires a

453
00:19:53,200 --> 00:19:55,360
guess on the key to the first linear

454
00:19:55,360 --> 00:19:56,640
layer

455
00:19:56,640 --> 00:19:58,000
and besides

456
00:19:58,000 --> 00:20:00,080
when we want to swap some ciphertext

457
00:20:00,080 --> 00:20:01,039
word

458
00:20:01,039 --> 00:20:04,240
this also requires a guess on the key to

459
00:20:04,240 --> 00:20:07,600
the final linear layer

460
00:20:07,600 --> 00:20:10,159
all in all the fact that the two outer

461
00:20:10,159 --> 00:20:13,360
linear layer use secret key actually

462
00:20:13,360 --> 00:20:16,480
saves us from your attacks

463
00:20:16,480 --> 00:20:19,120
let us now quickly discuss what happens

464
00:20:19,120 --> 00:20:22,080
with truncated distinguishing attacks

465
00:20:22,080 --> 00:20:24,799
first let us remove the first linear

466
00:20:24,799 --> 00:20:27,919
layer of our construction

467
00:20:27,919 --> 00:20:29,440
let us pick

468
00:20:29,440 --> 00:20:31,520
two plain text blocks

469
00:20:31,520 --> 00:20:34,799
the first one starting with x1 x1 and

470
00:20:34,799 --> 00:20:37,520
the second one starting with x1 squared

471
00:20:37,520 --> 00:20:38,799
delta

472
00:20:38,799 --> 00:20:42,320
x1 delta for some delta different from 0

473
00:20:42,320 --> 00:20:44,640
and such that the remaining words are

474
00:20:44,640 --> 00:20:48,000
the same between both messages

475
00:20:48,000 --> 00:20:51,760
when applying the first aes box layer

476
00:20:51,760 --> 00:20:54,240
only the first two s-boxes will be

477
00:20:54,240 --> 00:20:55,360
active

478
00:20:55,360 --> 00:20:56,159
and

479
00:20:56,159 --> 00:20:58,320
we can propagate the difference to a new

480
00:20:58,320 --> 00:21:01,600
one delta prime that will be common

481
00:21:01,600 --> 00:21:04,159
between the first two words

482
00:21:04,159 --> 00:21:07,360
after applying the l linear layer we

483
00:21:07,360 --> 00:21:10,000
will still have the exact

484
00:21:10,000 --> 00:21:12,960
same difference patterns albeit with a

485
00:21:12,960 --> 00:21:15,600
new difference a big delta

486
00:21:15,600 --> 00:21:18,640
which means that once again only the

487
00:21:18,640 --> 00:21:22,559
first two aes boxes will be active

488
00:21:22,559 --> 00:21:26,799
after the final application of t

489
00:21:27,039 --> 00:21:29,360
we can see that we'll have the same

490
00:21:29,360 --> 00:21:33,440
difference on the last w minus two 128

491
00:21:33,440 --> 00:21:35,760
bits words

492
00:21:35,760 --> 00:21:38,080
this allows us to distinguish our

493
00:21:38,080 --> 00:21:40,000
construction from a random permutation

494
00:21:40,000 --> 00:21:42,480
with high probability because this

495
00:21:42,480 --> 00:21:45,840
pattern occurs with probability 1 in the

496
00:21:45,840 --> 00:21:48,000
case of our construction

497
00:21:48,000 --> 00:21:50,080
and with negligible probability for a

498
00:21:50,080 --> 00:21:52,480
random permutation

499
00:21:52,480 --> 00:21:55,760
however this attack requires the ability

500
00:21:55,760 --> 00:21:57,919
to set a very specific difference

501
00:21:57,919 --> 00:21:59,200
pattern

502
00:21:59,200 --> 00:22:02,480
at the input of the first aes box layer

503
00:22:02,480 --> 00:22:05,120
which as we have seen is prevented by

504
00:22:05,120 --> 00:22:07,360
the first linear layer because it

505
00:22:07,360 --> 00:22:09,600
requires a key guess

506
00:22:09,600 --> 00:22:12,320
so once again the linear layer protects

507
00:22:12,320 --> 00:22:14,799
us against truncated differential

508
00:22:14,799 --> 00:22:17,120
distinguishers

509
00:22:17,120 --> 00:22:19,840
as a conclusion i would like to quickly

510
00:22:19,840 --> 00:22:22,080
compare our construction with existing

511
00:22:22,080 --> 00:22:23,039
ones

512
00:22:23,039 --> 00:22:25,200
and discuss a bit about our

513
00:22:25,200 --> 00:22:26,799
implementation

514
00:22:26,799 --> 00:22:29,200
as far as generic security bounds are

515
00:22:29,200 --> 00:22:32,320
concerned only two constructions are

516
00:22:32,320 --> 00:22:34,640
beyond the birthday bond secure our

517
00:22:34,640 --> 00:22:37,679
construction cte plus and also the

518
00:22:37,679 --> 00:22:40,080
tweakable two-round spn construction

519
00:22:40,080 --> 00:22:42,640
that i mentioned during the talk

520
00:22:42,640 --> 00:22:45,200
we have implemented both constructions

521
00:22:45,200 --> 00:22:49,919
using six rounds of aes as the s-box

522
00:22:49,919 --> 00:22:53,960
and we can see that ctet plus is roughly

523
00:22:53,960 --> 00:22:57,679
0.4 cycles per byte faster than the two

524
00:22:57,679 --> 00:23:00,720
round spn that was mentioned during the

525
00:23:00,720 --> 00:23:02,640
talk

526
00:23:02,640 --> 00:23:04,799
this improvement mainly comes from the

527
00:23:04,799 --> 00:23:08,080
fact that we replaced the middle linear

528
00:23:08,080 --> 00:23:10,799
layer by a much simpler one

529
00:23:10,799 --> 00:23:13,600
if we instantiate city plus with the

530
00:23:13,600 --> 00:23:14,960
full aes

531
00:23:14,960 --> 00:23:16,960
we can see that the resulting

532
00:23:16,960 --> 00:23:19,120
construction although beyond birthday

533
00:23:19,120 --> 00:23:22,640
bound secure is much slower than other

534
00:23:22,640 --> 00:23:24,799
birthday bound secure schemes such as

535
00:23:24,799 --> 00:23:28,080
eme xcb or tet

536
00:23:28,080 --> 00:23:31,520
however replacing the full aes by six

537
00:23:31,520 --> 00:23:35,120
rounds of aes in ctet plus allows us to

538
00:23:35,120 --> 00:23:40,720
be roughly as fast as eme xcb and tet

539
00:23:40,720 --> 00:23:44,320
finally if we compare aes6 ct80 plus

540
00:23:44,320 --> 00:23:46,080
with xts

541
00:23:46,080 --> 00:23:49,919
we can see that xts is roughly twice as

542
00:23:49,919 --> 00:23:52,240
fast as our construction

543
00:23:52,240 --> 00:23:55,840
however xts is only secure up to the

544
00:23:55,840 --> 00:23:57,279
birthday bound

545
00:23:57,279 --> 00:24:00,080
and it is also insecure as a white two

546
00:24:00,080 --> 00:24:03,600
cable block cipher that uses all sectors

547
00:24:03,600 --> 00:24:05,520
as a block

548
00:24:05,520 --> 00:24:07,760
finally let me highlight a few remaining

549
00:24:07,760 --> 00:24:09,360
open problems

550
00:24:09,360 --> 00:24:11,520
first we currently do not handle

551
00:24:11,520 --> 00:24:14,559
variable input length and partial blocks

552
00:24:14,559 --> 00:24:16,320
while this is not an issue for this

553
00:24:16,320 --> 00:24:17,520
encryption

554
00:24:17,520 --> 00:24:19,760
doing so could open up new applications

555
00:24:19,760 --> 00:24:21,520
for our scheme

556
00:24:21,520 --> 00:24:24,159
second it may be possible to improve the

557
00:24:24,159 --> 00:24:27,279
performance or to reduce the amount of

558
00:24:27,279 --> 00:24:30,480
key material of ctet plus by switching

559
00:24:30,480 --> 00:24:33,679
to a more efficient or more simple sbu

560
00:24:33,679 --> 00:24:35,360
layer

561
00:24:35,360 --> 00:24:37,440
thank you very much for your attention

562
00:24:37,440 --> 00:24:39,679
if you have any question or comment feel

563
00:24:39,679 --> 00:24:43,520
free to contact us by email

