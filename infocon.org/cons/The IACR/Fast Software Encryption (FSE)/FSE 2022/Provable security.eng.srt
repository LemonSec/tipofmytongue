1
00:00:00,000 --> 00:00:03,599
torque counter mode variants

2
00:00:06,160 --> 00:00:07,680
counter mode variants based on a

3
00:00:07,680 --> 00:00:10,480
generalized fork cipher this is a work

4
00:00:10,480 --> 00:00:13,759
of amit singh bhati

5
00:00:24,240 --> 00:00:26,320
hello everyone thank you bud for the

6
00:00:26,320 --> 00:00:29,320
introduction

7
00:00:38,960 --> 00:00:40,160
no

8
00:00:40,160 --> 00:00:43,160
okay

9
00:00:44,079 --> 00:00:45,760
so the contribution of this work is

10
00:00:45,760 --> 00:00:48,000
twofold

11
00:00:48,000 --> 00:00:49,600
first we define a multi-folk cipher

12
00:00:49,600 --> 00:00:50,960
which is a generalization of the fork

13
00:00:50,960 --> 00:00:52,160
cipher

14
00:00:52,160 --> 00:00:56,320
and it allows us to design and analyze

15
00:00:56,320 --> 00:00:58,800
generic modes uh um

16
00:00:58,800 --> 00:01:00,719
uh irrespective of the underlying two

17
00:01:00,719 --> 00:01:03,520
cable primitive uh which can be uh i

18
00:01:03,520 --> 00:01:05,438
took a block cipher or fork cipher or

19
00:01:05,438 --> 00:01:07,600
any higher multifox cipher with

20
00:01:07,600 --> 00:01:10,479
uh branches greater than two

21
00:01:10,479 --> 00:01:12,080
so a multifox cipher is generalization

22
00:01:12,080 --> 00:01:14,159
of fork cipher in terms of uh in number

23
00:01:14,159 --> 00:01:17,360
of outputs so a fork cipher uh

24
00:01:17,360 --> 00:01:19,040
as you can see here it takes an n bit

25
00:01:19,040 --> 00:01:21,200
block input and gives 2 and bit as

26
00:01:21,200 --> 00:01:23,360
output multifunction generalizes it with

27
00:01:23,360 --> 00:01:25,759
the parameter s as it gives as many

28
00:01:25,759 --> 00:01:27,200
output blocks

29
00:01:27,200 --> 00:01:30,799
the security of uh multifox wifi is

30
00:01:30,799 --> 00:01:32,640
defined by its indistinguishability from

31
00:01:32,640 --> 00:01:36,240
s tuple of random permutations

32
00:01:36,799 --> 00:01:38,720
let us now take a look at generic

33
00:01:38,720 --> 00:01:40,240
counter mode the major contribution of

34
00:01:40,240 --> 00:01:42,479
this work so it's a it's a

35
00:01:42,479 --> 00:01:44,960
counter mode based on multifox cipher it

36
00:01:44,960 --> 00:01:47,200
looks like this so it takes two input

37
00:01:47,200 --> 00:01:50,320
sequences x and t uh which it fed to

38
00:01:50,320 --> 00:01:54,000
uh was it being fed to the underlying

39
00:01:54,000 --> 00:01:56,159
component called tctr the two cable ctr

40
00:01:56,159 --> 00:01:57,200
framework

41
00:01:57,200 --> 00:01:59,200
and then it's a key stream v which is an

42
00:01:59,200 --> 00:02:00,719
excel with the message like a counter

43
00:02:00,719 --> 00:02:02,719
mode within the cipher text

44
00:02:02,719 --> 00:02:04,880
if we zoom inside the tctr framework we

45
00:02:04,880 --> 00:02:06,159
see this is how it looks like it

46
00:02:06,159 --> 00:02:09,280
consists of multiple um

47
00:02:09,280 --> 00:02:11,440
parallel multifox cipher calls and this

48
00:02:11,440 --> 00:02:13,440
is how the inputs input and tweak

49
00:02:13,440 --> 00:02:15,599
sequences are used as input and tricks

50
00:02:15,599 --> 00:02:16,959
to the underlying multiflex ciphers to

51
00:02:16,959 --> 00:02:20,480
generate the key stream

52
00:02:20,480 --> 00:02:22,319
we simplify this this is how the the

53
00:02:22,319 --> 00:02:24,400
generic counter mode looks like and here

54
00:02:24,400 --> 00:02:26,560
are the additional inputs and outputs so

55
00:02:26,560 --> 00:02:28,480
this is the nonce and r is some internal

56
00:02:28,480 --> 00:02:29,599
randomness

57
00:02:29,599 --> 00:02:31,920
uh which if is used then it should also

58
00:02:31,920 --> 00:02:34,400
be put at the output so we get x and t

59
00:02:34,400 --> 00:02:36,640
as a function of these three variables

60
00:02:36,640 --> 00:02:41,280
non's n randomness r and a counter j

61
00:02:41,280 --> 00:02:44,239
we define some simple rules to

62
00:02:44,239 --> 00:02:47,040
define these functions f x and f t

63
00:02:47,040 --> 00:02:50,000
and these rules are as simple as in uh

64
00:02:50,000 --> 00:02:51,760
to get the efficient gcti variants which

65
00:02:51,760 --> 00:02:54,000
we call the simple gcti variants so

66
00:02:54,000 --> 00:02:55,519
there are two rules the first one says

67
00:02:55,519 --> 00:02:56,319
that

68
00:02:56,319 --> 00:02:58,959
these fx and ft functions can be either

69
00:02:58,959 --> 00:03:00,959
a concatenation or an xor

70
00:03:00,959 --> 00:03:02,959
of any two of these three variables or

71
00:03:02,959 --> 00:03:05,440
it can be a copy of them and it can also

72
00:03:05,440 --> 00:03:06,959
be a constant function independent of

73
00:03:06,959 --> 00:03:08,480
these variables

74
00:03:08,480 --> 00:03:10,400
and the second rule says if fx let's say

75
00:03:10,400 --> 00:03:11,840
is already one of these variables then

76
00:03:11,840 --> 00:03:13,760
f2 should not have the same

77
00:03:13,760 --> 00:03:15,280
so with these two simple rules we get

78
00:03:15,280 --> 00:03:18,480
out of 36 dcpr variants and the 36

79
00:03:18,480 --> 00:03:20,080
variants include the traditional counter

80
00:03:20,080 --> 00:03:23,840
modes and the counter in peak mode

81
00:03:24,799 --> 00:03:26,959
let us now take a look at the security

82
00:03:26,959 --> 00:03:29,760
analysis results of gctr so the security

83
00:03:29,760 --> 00:03:31,920
analysis of gctr is done using the

84
00:03:31,920 --> 00:03:34,879
abstraction of tctr

85
00:03:34,879 --> 00:03:37,519
and uh since the the abstraction of pctr

86
00:03:37,519 --> 00:03:40,159
is generic the proof is generic and

87
00:03:40,159 --> 00:03:42,640
in a single proof we capture all 36 gctr

88
00:03:42,640 --> 00:03:44,000
modes

89
00:03:44,000 --> 00:03:45,840
for the proof we have used

90
00:03:45,840 --> 00:03:47,680
as coefficient technique and the results

91
00:03:47,680 --> 00:03:49,760
are as follows so 18 out of these 36

92
00:03:49,760 --> 00:03:51,680
gctr variants are in secure and the

93
00:03:51,680 --> 00:03:53,280
remaining gives you uh at least what

94
00:03:53,280 --> 00:03:55,360
they want security under the

95
00:03:55,360 --> 00:03:58,159
notion of security

96
00:03:58,159 --> 00:04:00,239
these 18 secure variants includes three

97
00:04:00,239 --> 00:04:01,920
beyond birthday bond secure gcti

98
00:04:01,920 --> 00:04:03,840
variants that are digital one three and

99
00:04:03,840 --> 00:04:05,360
seven

100
00:04:05,360 --> 00:04:07,599
so uh from this analysis our best pick

101
00:04:07,599 --> 00:04:09,519
is gct seven and this is chart three in

102
00:04:09,519 --> 00:04:12,400
terms of security gta 7 is best against

103
00:04:12,400 --> 00:04:14,400
non-suspecting adversaries and also

104
00:04:14,400 --> 00:04:15,840
for certain industries and against

105
00:04:15,840 --> 00:04:17,680
non-misusing adversaries whereas the

106
00:04:17,680 --> 00:04:19,759
ctr3 is best for uh general

107
00:04:19,759 --> 00:04:23,440
non-smithsous uh setting

108
00:04:25,520 --> 00:04:28,160
counter in peak mode uh which was uh uh

109
00:04:28,160 --> 00:04:30,000
proposed by a parent and student in cape

110
00:04:30,000 --> 00:04:33,440
2016 decide inside the gtr 3 variant of

111
00:04:33,440 --> 00:04:36,160
our uh str analysis so when it is

112
00:04:36,160 --> 00:04:38,400
associated with uh um two cable block

113
00:04:38,400 --> 00:04:39,840
server that is the multifunctional

114
00:04:39,840 --> 00:04:41,840
station with s equal to one we get the

115
00:04:41,840 --> 00:04:43,600
counter in peak mode but our generic

116
00:04:43,600 --> 00:04:45,120
proof provides a security bound for

117
00:04:45,120 --> 00:04:46,960
digital three that improves over the

118
00:04:46,960 --> 00:04:49,199
existing amount of content tweak mode

119
00:04:49,199 --> 00:04:51,440
in particular the bound uh security bond

120
00:04:51,440 --> 00:04:53,280
degradation improves from being in order

121
00:04:53,280 --> 00:04:55,759
of sigma square to order of q sigma

122
00:04:55,759 --> 00:04:57,120
it says that the content treatment

123
00:04:57,120 --> 00:04:58,880
provides better security when the

124
00:04:58,880 --> 00:05:02,320
average message length is longer

125
00:05:02,320 --> 00:05:04,400
as a consequence of our secret analysis

126
00:05:04,400 --> 00:05:07,120
we have also revisited uh existing work

127
00:05:07,120 --> 00:05:08,960
that uses a counter line component it's

128
00:05:08,960 --> 00:05:11,680
a thcti which is an encircling scheme

129
00:05:11,680 --> 00:05:13,919
and it uses gctr4 like component

130
00:05:13,919 --> 00:05:15,120
internally

131
00:05:15,120 --> 00:05:16,880
uh but the scheme has been claimed to

132
00:05:16,880 --> 00:05:18,639
provide beyond the device security and

133
00:05:18,639 --> 00:05:20,960
ctr4 in our analysis has been shown to

134
00:05:20,960 --> 00:05:22,880
provide only birthday bond security so

135
00:05:22,880 --> 00:05:24,639
we investigated this inconsistency and

136
00:05:24,639 --> 00:05:27,120
realized that the claims are incorrect

137
00:05:27,120 --> 00:05:29,199
uh we saw vertebral attack and also

138
00:05:29,199 --> 00:05:31,039
point to the exact flaw in the security

139
00:05:31,039 --> 00:05:33,199
proof of the ctr and an easy fix for

140
00:05:33,199 --> 00:05:35,120
this could be replacing the gct r4 ply

141
00:05:35,120 --> 00:05:37,520
component with gcti3 or district 7 to

142
00:05:37,520 --> 00:05:38,960
get the claim beyond but they want

143
00:05:38,960 --> 00:05:41,520
security

144
00:05:42,000 --> 00:05:44,400
okay and since

145
00:05:44,400 --> 00:05:46,639
mfc itself

146
00:05:46,639 --> 00:05:50,960
brings a speed up in efficiency so it is

147
00:05:50,960 --> 00:05:52,960
expected to see uh if the if the more

148
00:05:52,960 --> 00:05:55,360
also carry over the efficiency again and

149
00:05:55,360 --> 00:05:58,160
it's true for this tr so

150
00:05:58,160 --> 00:06:01,360
we analyze gctr uh over mfc with

151
00:06:01,360 --> 00:06:02,960
instances in s equal to two which is a

152
00:06:02,960 --> 00:06:04,479
fork cipher

153
00:06:04,479 --> 00:06:06,560
uh uh in particular we use fox skinny

154
00:06:06,560 --> 00:06:09,360
with gctr and compare it with uh uh

155
00:06:09,360 --> 00:06:11,039
counter encounter and tweak modes

156
00:06:11,039 --> 00:06:13,280
associated with uh uh two blocks of

157
00:06:13,280 --> 00:06:14,400
skinny

158
00:06:14,400 --> 00:06:16,880
and as you can see here this tr performs

159
00:06:16,880 --> 00:06:17,840
uh

160
00:06:17,840 --> 00:06:20,960
better than the other modes

161
00:06:20,960 --> 00:06:22,560
in numbers this item provides at least

162
00:06:22,560 --> 00:06:24,720
twenty percent speed up uh than the

163
00:06:24,720 --> 00:06:26,319
other two modes

164
00:06:26,319 --> 00:06:27,680
when it's designated with fork skinny

165
00:06:27,680 --> 00:06:29,360
against the skinny

166
00:06:29,360 --> 00:06:31,680
so the real summary is as follows

167
00:06:31,680 --> 00:06:32,560
we

168
00:06:32,560 --> 00:06:34,080
define a generic counter mode or the

169
00:06:34,080 --> 00:06:35,680
abstraction of multifox cipher which

170
00:06:35,680 --> 00:06:36,960
provides all these other properties of

171
00:06:36,960 --> 00:06:38,479
counter mode with some extra features in

172
00:06:38,479 --> 00:06:40,479
terms of security and efficiency so for

173
00:06:40,479 --> 00:06:42,319
security we can announce security

174
00:06:42,319 --> 00:06:44,000
against non-misuse transmission

175
00:06:44,000 --> 00:06:46,160
adversary and by the bomb security and

176
00:06:46,160 --> 00:06:47,440
also in some cases full and with

177
00:06:47,440 --> 00:06:49,440
security and in terms of efficiency we

178
00:06:49,440 --> 00:06:52,000
get at least 20 mission speed up when uh

179
00:06:52,000 --> 00:06:53,520
the multiple cipher is instantiated with

180
00:06:53,520 --> 00:06:55,280
four skinny for the ctr and compared

181
00:06:55,280 --> 00:06:56,400
with counter encountering tweak mode

182
00:06:56,400 --> 00:06:58,400
with skinny

183
00:06:58,400 --> 00:07:00,880
i quickly will tell about the the use

184
00:07:00,880 --> 00:07:02,880
cases of gct are in in practice there

185
00:07:02,880 --> 00:07:05,039
are various use cases when put in in

186
00:07:05,039 --> 00:07:06,560
groups uh

187
00:07:06,560 --> 00:07:08,880
two major groups can be

188
00:07:08,880 --> 00:07:10,800
defined like this the first one would be

189
00:07:10,800 --> 00:07:12,400
applications that requires only

190
00:07:12,400 --> 00:07:14,639
encryption and uh non-smashing

191
00:07:14,639 --> 00:07:16,720
resistance is desirable there

192
00:07:16,720 --> 00:07:18,960
and second is as a gct as a building

193
00:07:18,960 --> 00:07:20,400
block inside some large crypto system

194
00:07:20,400 --> 00:07:21,919
that

195
00:07:21,919 --> 00:07:24,240
tries to achieve something uh larger so

196
00:07:24,240 --> 00:07:25,759
an example could be as we saw before

197
00:07:25,759 --> 00:07:28,800
tfctr like an encircling schemes or a8

198
00:07:28,800 --> 00:07:31,280
schemes that are based on a synthetic iv

199
00:07:31,280 --> 00:07:35,599
kind of structure sct or encrypt and mac

200
00:07:35,599 --> 00:07:37,520
okay and i will this is the last slide

201
00:07:37,520 --> 00:07:39,360
so i will talk about some open problems

202
00:07:39,360 --> 00:07:41,120
that are left open by this work the

203
00:07:41,120 --> 00:07:42,400
first one would be the obvious one to

204
00:07:42,400 --> 00:07:44,319
design new secure and efficient fork

205
00:07:44,319 --> 00:07:45,599
cipher and multiface cipher with

206
00:07:45,599 --> 00:07:47,360
branches at least two

207
00:07:47,360 --> 00:07:49,520
and the second one is uh

208
00:07:49,520 --> 00:07:51,039
to design a novel folks offer a

209
00:07:51,039 --> 00:07:52,960
multifunctional based modes that are not

210
00:07:52,960 --> 00:07:54,560
limited to encryption and can be used in

211
00:07:54,560 --> 00:07:56,560
various other secret settings like max

212
00:07:56,560 --> 00:07:58,720
or random instrument generation or other

213
00:07:58,720 --> 00:08:01,199
diversity applications

214
00:08:01,199 --> 00:08:03,599
thank you

215
00:08:07,199 --> 00:08:09,039
hey thanks amit for presentation are

216
00:08:09,039 --> 00:08:10,639
there any questions from the audience

217
00:08:10,639 --> 00:08:13,120
here

218
00:08:13,120 --> 00:08:15,520
so bart may i ask the question

219
00:08:15,520 --> 00:08:18,879
um yes you're redo right

220
00:08:18,879 --> 00:08:20,800
who is asking the question yeah

221
00:08:20,800 --> 00:08:23,039
yes yes go ahead so uh

222
00:08:23,039 --> 00:08:26,000
yeah so uh i made a nice presentation by

223
00:08:26,000 --> 00:08:28,000
the way uh so uh

224
00:08:28,000 --> 00:08:30,479
in your construction

225
00:08:30,479 --> 00:08:33,200
that uh you have this for the general

226
00:08:33,200 --> 00:08:35,440
generalized contract mode gctr mode you

227
00:08:35,440 --> 00:08:37,120
have instantiated with say of this

228
00:08:37,120 --> 00:08:39,039
multifox cipher and the parameter is

229
00:08:39,039 --> 00:08:42,479
like s so what if i that instantiate the

230
00:08:42,479 --> 00:08:44,880
same construction using the independent

231
00:08:44,880 --> 00:08:47,040
uh tweakable block ciphers these are for

232
00:08:47,040 --> 00:08:48,880
example say skinny instead of fork

233
00:08:48,880 --> 00:08:50,399
cipher so how is it different from your

234
00:08:50,399 --> 00:08:53,399
construction

235
00:09:07,040 --> 00:09:08,399
as you mean right

236
00:09:08,399 --> 00:09:10,160
yes yes yes yes

237
00:09:10,160 --> 00:09:12,160
yeah it could be possible so that's what

238
00:09:12,160 --> 00:09:14,240
the the security notion of mfc captures

239
00:09:14,240 --> 00:09:16,800
so you will get the similar bounds

240
00:09:16,800 --> 00:09:18,800
or exactly the same bounce but the gain

241
00:09:18,800 --> 00:09:20,720
would be then in terms of efficiency

242
00:09:20,720 --> 00:09:23,360
because then you have to make as many

243
00:09:23,360 --> 00:09:24,880
blocks after calls there but here you

244
00:09:24,880 --> 00:09:27,440
making one nfc call which could give you

245
00:09:27,440 --> 00:09:29,519
speed up

246
00:09:29,519 --> 00:09:31,600
yeah i understand but if you instantiate

247
00:09:31,600 --> 00:09:33,839
or if you construct the for cipher uh

248
00:09:33,839 --> 00:09:35,839
using say lower level primitives then

249
00:09:35,839 --> 00:09:37,920
also you need to call the underlying

250
00:09:37,920 --> 00:09:39,360
primitives say for example if you want

251
00:09:39,360 --> 00:09:40,959
to instantiate your fork cipher using

252
00:09:40,959 --> 00:09:43,839
public permutation then also i mean as

253
00:09:43,839 --> 00:09:45,279
for the recent construction that we have

254
00:09:45,279 --> 00:09:48,399
seen that uh i mean

255
00:09:48,399 --> 00:09:49,440
you understand the question am i right

256
00:09:49,440 --> 00:09:51,680
right true true but i guess that you

257
00:09:51,680 --> 00:09:53,279
have to

258
00:09:53,279 --> 00:09:55,279
yes that's that's a specific case right

259
00:09:55,279 --> 00:09:57,519
that specific case to to generate uh or

260
00:09:57,519 --> 00:09:59,360
to design a multi-fold cipher which is

261
00:09:59,360 --> 00:10:01,200
the watch that you can design with uh as

262
00:10:01,200 --> 00:10:03,279
many permutations

263
00:10:03,279 --> 00:10:04,880
in called

264
00:10:04,880 --> 00:10:06,720
in parallel but it could be possible to

265
00:10:06,720 --> 00:10:09,279
design it for example like fork skinny

266
00:10:09,279 --> 00:10:12,959
where you can save some number of rounds

267
00:10:12,959 --> 00:10:14,800
okay okay okay i understand thank you

268
00:10:14,800 --> 00:10:16,959
thank you

269
00:10:16,959 --> 00:10:20,160
okay any other questions

270
00:10:23,839 --> 00:10:26,720
so no other questions here um

271
00:10:26,720 --> 00:10:30,000
also not in the chat i think

272
00:10:30,000 --> 00:10:31,680
so if that's not the case

273
00:10:31,680 --> 00:10:36,279
no okay let's uh thank amit again

274
00:10:57,760 --> 00:11:01,000
one second

275
00:11:06,240 --> 00:11:07,920
hey christina i do need your help i'm

276
00:11:07,920 --> 00:11:08,970
sorry

277
00:11:08,970 --> 00:11:12,090
[Music]

278
00:11:12,640 --> 00:11:15,839
i'm not used to this computer

279
00:11:15,920 --> 00:11:17,920
because if i want to share indeed you

280
00:11:17,920 --> 00:11:20,800
get the old one

281
00:11:24,640 --> 00:11:25,360
here

282
00:11:25,360 --> 00:11:26,800
no this is

283
00:11:26,800 --> 00:11:28,640
this is the old one yeah this is the new

284
00:11:28,640 --> 00:11:30,959
one okay so we'll just close this one

285
00:11:30,959 --> 00:11:33,360
and then we'll go again

286
00:11:33,360 --> 00:11:35,040
oh yes

287
00:11:35,040 --> 00:11:37,040
no no no no you have to open it what is

288
00:11:37,040 --> 00:11:39,440
he sharing now i don't know

289
00:11:39,440 --> 00:11:42,560
yes it's just a closed

290
00:11:42,560 --> 00:11:44,640
close

291
00:11:44,640 --> 00:11:46,800
oh yes this is that's it yes that's the

292
00:11:46,800 --> 00:11:49,519
one yes then a few no it's a sharing now

293
00:11:49,519 --> 00:11:50,639
no that's not true yeah it's just

294
00:11:50,639 --> 00:11:52,480
sharing this is sharing

295
00:11:52,480 --> 00:11:56,360
yes view full screen

296
00:12:05,839 --> 00:12:08,240
okay um the next talk is a forking

297
00:12:08,240 --> 00:12:10,399
tweakable evan monster cyphers is the

298
00:12:10,399 --> 00:12:13,440
work by wikium kim the young ming li and

299
00:12:13,440 --> 00:12:15,760
jo young lee and wiggio will give the

300
00:12:15,760 --> 00:12:18,319
presentation

301
00:12:21,440 --> 00:12:24,560
hello my name is william kim and i will

302
00:12:24,560 --> 00:12:27,680
start my presentation

303
00:12:27,920 --> 00:12:30,240
authenticated encryption with associated

304
00:12:30,240 --> 00:12:32,880
data aead

305
00:12:32,880 --> 00:12:34,720
can make

306
00:12:34,720 --> 00:12:36,959
all symmetry crypto functions

307
00:12:36,959 --> 00:12:40,079
if you want mac you can make

308
00:12:40,079 --> 00:12:42,880
make input as associated data and

309
00:12:42,880 --> 00:12:44,160
get text

310
00:12:44,160 --> 00:12:47,120
or if you want encryption you can make a

311
00:12:47,120 --> 00:12:49,040
message as your input and your

312
00:12:49,040 --> 00:12:50,399
ciphertext

313
00:12:50,399 --> 00:12:52,639
if you want authenticated encryption

314
00:12:52,639 --> 00:12:54,959
or you can make messages as input and

315
00:12:54,959 --> 00:12:58,160
get ciphertext and tag

316
00:12:58,560 --> 00:13:00,399
that means

317
00:13:00,399 --> 00:13:04,000
or if you can make aeid or you don't

318
00:13:04,000 --> 00:13:06,000
have to

319
00:13:06,000 --> 00:13:08,720
concentrate that

320
00:13:08,720 --> 00:13:12,399
the primitive issues block cipher so

321
00:13:12,399 --> 00:13:13,839
there are some

322
00:13:13,839 --> 00:13:16,079
trials to make

323
00:13:16,079 --> 00:13:18,399
other primitives

324
00:13:18,399 --> 00:13:21,600
folk cipher is some new new

325
00:13:21,600 --> 00:13:24,480
primitive for the aad

326
00:13:24,480 --> 00:13:27,600
box cipher is a expansion of two equal

327
00:13:27,600 --> 00:13:30,079
block diaper this is three

328
00:13:30,079 --> 00:13:32,160
so poke cipher has

329
00:13:32,160 --> 00:13:35,279
one input but two output and with tweak

330
00:13:35,279 --> 00:13:39,680
design for aead or paef mode is

331
00:13:39,680 --> 00:13:41,040
a kind of that

332
00:13:41,040 --> 00:13:43,440
it has also associated data input and

333
00:13:43,440 --> 00:13:46,399
messaging message input then ciphertext

334
00:13:46,399 --> 00:13:49,199
output and tech

335
00:13:49,600 --> 00:13:52,240
my contribution is

336
00:13:52,240 --> 00:13:54,000
the first probably security model for

337
00:13:54,000 --> 00:13:55,279
volkswagen

338
00:13:55,279 --> 00:13:58,000
and suggested the most simple proxy for

339
00:13:58,000 --> 00:14:00,480
fdem ftm means

340
00:14:00,480 --> 00:14:03,120
property coverage

341
00:14:03,120 --> 00:14:04,720
and provided that

342
00:14:04,720 --> 00:14:06,399
ftem has

343
00:14:06,399 --> 00:14:09,600
two and third bit security that means

344
00:14:09,600 --> 00:14:14,279
poking do not degrade the security

345
00:14:16,079 --> 00:14:18,079
this is how i constructed the book

346
00:14:18,079 --> 00:14:19,680
cipher

347
00:14:19,680 --> 00:14:22,399
ftm

348
00:14:22,480 --> 00:14:26,000
this is two round inventor construction

349
00:14:26,000 --> 00:14:26,959
if you

350
00:14:26,959 --> 00:14:28,639
if you think

351
00:14:28,639 --> 00:14:33,440
the masking key and permutation then

352
00:14:33,440 --> 00:14:35,120
masking key

353
00:14:35,120 --> 00:14:38,639
is one round inventor

354
00:14:39,040 --> 00:14:42,160
a two-round inventor can be thought as

355
00:14:42,160 --> 00:14:45,440
a concatenation of one round invention

356
00:14:45,440 --> 00:14:46,560
and then

357
00:14:46,560 --> 00:14:48,480
to equal remains here

358
00:14:48,480 --> 00:14:51,920
is the change or changes the key to the

359
00:14:51,920 --> 00:14:54,399
tricky

360
00:14:54,800 --> 00:14:55,600
then

361
00:14:55,600 --> 00:14:58,240
um it is natural way to think uh two

362
00:14:58,240 --> 00:14:59,199
round

363
00:14:59,199 --> 00:15:02,639
forked even answer should be like this

364
00:15:02,639 --> 00:15:07,040
one round you menstrual after that and

365
00:15:07,040 --> 00:15:11,399
fox and one round inventor

366
00:15:13,760 --> 00:15:15,680
oh you made

367
00:15:15,680 --> 00:15:17,839
ftm construction but

368
00:15:17,839 --> 00:15:20,000
in front of security

369
00:15:20,000 --> 00:15:23,360
the corresponding ideal

370
00:15:23,360 --> 00:15:26,959
worker should be constructed to be

371
00:15:26,959 --> 00:15:28,720
proven

372
00:15:28,720 --> 00:15:32,160
we think is or this tilde is

373
00:15:32,160 --> 00:15:34,320
means tree cover

374
00:15:34,320 --> 00:15:37,759
and tilde q and tilde r means two cover

375
00:15:37,759 --> 00:15:40,800
permutation as a idea

376
00:15:40,800 --> 00:15:42,959
it is uh

377
00:15:42,959 --> 00:15:46,399
fulfill primitive for

378
00:15:46,399 --> 00:15:49,759
equal vlog cipher either or occur

379
00:15:49,759 --> 00:15:50,959
you think

380
00:15:50,959 --> 00:15:52,639
we thought

381
00:15:52,639 --> 00:15:54,399
ftems

382
00:15:54,399 --> 00:15:57,120
uh corresponding ideal world

383
00:15:57,120 --> 00:16:00,320
construction is to come get concatenated

384
00:16:00,320 --> 00:16:03,680
or takeover cypher

385
00:16:04,480 --> 00:16:06,320
and we got

386
00:16:06,320 --> 00:16:08,320
total security

387
00:16:08,320 --> 00:16:09,680
two and

388
00:16:09,680 --> 00:16:13,199
third bit security

389
00:16:13,199 --> 00:16:16,480
this below is two round investor and it

390
00:16:16,480 --> 00:16:19,920
also has two and third bit security that

391
00:16:19,920 --> 00:16:20,839
means

392
00:16:20,839 --> 00:16:24,000
tweaking did not degrade the security

393
00:16:24,000 --> 00:16:26,480
and also folk did not degrade the

394
00:16:26,480 --> 00:16:29,040
security

395
00:16:29,040 --> 00:16:31,839
and conclusion is this focus cipher is a

396
00:16:31,839 --> 00:16:34,839
cipher that has one input and two

397
00:16:34,839 --> 00:16:39,680
outputs efficient in short message

398
00:16:39,680 --> 00:16:41,920
fox 3 cover investor is the most

399
00:16:41,920 --> 00:16:44,720
shameful model box cipher and 2 on the

400
00:16:44,720 --> 00:16:49,360
ftem has 2 and 3 bit security

401
00:16:49,360 --> 00:16:52,079
and also it is same order of security

402
00:16:52,079 --> 00:16:54,399
with surrounding menser

403
00:16:54,399 --> 00:16:58,079
and there can be some future works that

404
00:16:58,079 --> 00:17:01,360
extend around the random folk or

405
00:17:01,360 --> 00:17:03,600
multiple

406
00:17:03,600 --> 00:17:04,480
and

407
00:17:04,480 --> 00:17:06,640
you can think as

408
00:17:06,640 --> 00:17:09,039
it's multi-security also

409
00:17:09,039 --> 00:17:10,319
this is my

410
00:17:10,319 --> 00:17:13,199
transitional work

411
00:17:17,439 --> 00:17:20,000
okay thanks wiki um any questions from

412
00:17:20,000 --> 00:17:22,799
the audience

413
00:17:26,720 --> 00:17:28,880
okay from online there is one question

414
00:17:28,880 --> 00:17:30,640
in the chat um i'm gonna ask the

415
00:17:30,640 --> 00:17:32,799
question it's from avijji if you add

416
00:17:32,799 --> 00:17:35,200
more permutations in both the upper and

417
00:17:35,200 --> 00:17:37,840
lower layer can we prove its security up

418
00:17:37,840 --> 00:17:41,520
to two to the three and over four

419
00:17:41,520 --> 00:17:44,400
so i think the question is um you you

420
00:17:44,400 --> 00:17:46,480
have one permutation call and then you

421
00:17:46,480 --> 00:17:48,320
fork and then you don't do one but two

422
00:17:48,320 --> 00:17:50,080
permutation calls what do you expect

423
00:17:50,080 --> 00:17:53,520
yeah yes yes yes

424
00:17:54,400 --> 00:17:55,840
it is

425
00:17:55,840 --> 00:18:01,159
i think it is extending the quick round

426
00:18:03,440 --> 00:18:04,640
i guess

427
00:18:04,640 --> 00:18:07,440
i think there can be

428
00:18:07,440 --> 00:18:09,600
some

429
00:18:09,600 --> 00:18:12,480
there can be some

430
00:18:12,960 --> 00:18:16,480
advance in probably security but

431
00:18:16,480 --> 00:18:21,160
uh i know that foreign

432
00:18:21,520 --> 00:18:22,679
three-round and

433
00:18:22,679 --> 00:18:25,760
foreign has not proved yet

434
00:18:25,760 --> 00:18:26,559
so

435
00:18:26,559 --> 00:18:29,200
i think it will be some hard

436
00:18:29,200 --> 00:18:31,520
hard question

437
00:18:31,520 --> 00:18:34,240
uh see uh i mean uh i know i mean we

438
00:18:34,240 --> 00:18:36,400
know that around even monsoon cipher is

439
00:18:36,400 --> 00:18:37,919
optimally secure i mean at least

440
00:18:37,919 --> 00:18:40,320
asymptotically of particular right

441
00:18:40,320 --> 00:18:43,679
so in that way if i just fork the uh

442
00:18:43,679 --> 00:18:45,919
4k for one more round

443
00:18:45,919 --> 00:18:48,799
then can we prove uh its security up to

444
00:18:48,799 --> 00:18:52,000
two days to three by four

445
00:18:54,799 --> 00:18:56,559
have a chance to start a question or a

446
00:18:56,559 --> 00:18:58,640
remark

447
00:18:58,640 --> 00:19:01,280
no i it's a question like we know this

448
00:19:01,280 --> 00:19:03,120
right i mean from the

449
00:19:03,120 --> 00:19:06,320
general uh result

450
00:19:09,039 --> 00:19:11,840
um yes

451
00:19:12,640 --> 00:19:14,960
okay maybe maybe we can yes yes

452
00:19:14,960 --> 00:19:17,280
let's take that question offline then

453
00:19:17,280 --> 00:19:18,000
yeah

454
00:19:18,000 --> 00:19:21,720
are there any other questions

455
00:19:26,480 --> 00:19:27,919
okay if there are no other questions

456
00:19:27,919 --> 00:19:31,919
let's uh thank ricky again

457
00:19:34,720 --> 00:19:37,520
and now we're going to do offline talks

458
00:19:37,520 --> 00:19:40,639
to online talks

459
00:19:45,200 --> 00:19:46,880
um yes

460
00:19:46,880 --> 00:19:49,120
okay there we are could you fullscreen

461
00:19:49,120 --> 00:19:51,600
yes great i will try to i cannot

462
00:19:51,600 --> 00:19:52,880
minimize this

463
00:19:52,880 --> 00:19:55,280
um so the third talk of this session is

464
00:19:55,280 --> 00:19:57,679
provably secure provedly quantum secure

465
00:19:57,679 --> 00:20:00,080
to eco block ciphers is the work of

466
00:20:00,080 --> 00:20:03,039
akinuri hosyamara and tatsu iwata and

467
00:20:03,039 --> 00:20:06,000
akinori will give the presentation

468
00:20:06,000 --> 00:20:08,159
uh thank you for introduction uh can you

469
00:20:08,159 --> 00:20:09,679
hear me

470
00:20:09,679 --> 00:20:12,320
can you hear me

471
00:20:12,799 --> 00:20:15,200
yes we can hear your query okay thank

472
00:20:15,200 --> 00:20:15,840
you

473
00:20:15,840 --> 00:20:17,520
then let me start

474
00:20:17,520 --> 00:20:19,679
so thank you for the introduction

475
00:20:19,679 --> 00:20:22,960
and this is the result of our paper

476
00:20:22,960 --> 00:20:25,679
in crypto 2016 kaplan it resolved that

477
00:20:25,679 --> 00:20:27,919
some tbc moves over block ciphers such

478
00:20:27,919 --> 00:20:30,320
as lrw are broken by polynomial time

479
00:20:30,320 --> 00:20:32,240
quantum query attacks

480
00:20:32,240 --> 00:20:34,159
and there has been no tbc modes proven

481
00:20:34,159 --> 00:20:35,679
to be secured against quantum query

482
00:20:35,679 --> 00:20:36,880
attacks

483
00:20:36,880 --> 00:20:38,960
and in our paper we showed a new

484
00:20:38,960 --> 00:20:42,480
construction which we named lrw2 this is

485
00:20:42,480 --> 00:20:44,640
a tvc mode of block ciphers with

486
00:20:44,640 --> 00:20:46,559
proverbial security against quantum

487
00:20:46,559 --> 00:20:48,799
query attacks

488
00:20:48,799 --> 00:20:50,640
and next i'd like to explain the

489
00:20:50,640 --> 00:20:54,080
background of our research

490
00:20:54,080 --> 00:20:56,559
so first this is the usual classical

491
00:20:56,559 --> 00:20:58,240
attack model of chosen plain text

492
00:20:58,240 --> 00:20:59,200
attacks

493
00:20:59,200 --> 00:21:00,960
there is an adversary with classical

494
00:21:00,960 --> 00:21:03,840
computer and encryption oracle is given

495
00:21:03,840 --> 00:21:06,320
to the adversary

496
00:21:06,320 --> 00:21:08,400
and next in the quantum setting we can

497
00:21:08,400 --> 00:21:10,480
consider two attack models

498
00:21:10,480 --> 00:21:12,400
q1 and q2

499
00:21:12,400 --> 00:21:14,320
in the first model q1

500
00:21:14,320 --> 00:21:16,159
the computer of the adversary is

501
00:21:16,159 --> 00:21:18,320
replaced with a quantum computer

502
00:21:18,320 --> 00:21:20,559
but the encryption oracle is the same as

503
00:21:20,559 --> 00:21:22,480
the classical oracle

504
00:21:22,480 --> 00:21:24,480
on the other hand in the tutoring model

505
00:21:24,480 --> 00:21:26,559
the oracle is also replaced with a

506
00:21:26,559 --> 00:21:28,799
quantum orbit

507
00:21:28,799 --> 00:21:31,280
and now the adversary can make squares

508
00:21:31,280 --> 00:21:33,120
in quantum superposition

509
00:21:33,120 --> 00:21:35,360
and the response from oracle is also in

510
00:21:35,360 --> 00:21:37,280
quantum superposition

511
00:21:37,280 --> 00:21:41,280
and our focus is the tuto model

512
00:21:41,360 --> 00:21:43,600
and next i'd like to explain the basics

513
00:21:43,600 --> 00:21:46,400
of lrw constructions

514
00:21:46,400 --> 00:21:48,640
so the constructions are the most basic

515
00:21:48,640 --> 00:21:51,440
mode of species for tbcs introduced by

516
00:21:51,440 --> 00:21:53,840
biscof rivest and wagner

517
00:21:53,840 --> 00:21:56,720
and there are two variants error w1 and

518
00:21:56,720 --> 00:21:58,480
rrw2

519
00:21:58,480 --> 00:22:00,799
so both of them are proven to be etc in

520
00:22:00,799 --> 00:22:02,320
the classical setting

521
00:22:02,320 --> 00:22:04,240
but unfortunately they are broken in

522
00:22:04,240 --> 00:22:07,760
polynomial time in fusion model

523
00:22:07,760 --> 00:22:10,240
and so far there does not exist any tbc

524
00:22:10,240 --> 00:22:12,880
mode with probable security against q2

525
00:22:12,880 --> 00:22:15,360
attacks or quantum query attacks

526
00:22:15,360 --> 00:22:17,440
and so this is the starting point of our

527
00:22:17,440 --> 00:22:18,400
research

528
00:22:18,400 --> 00:22:20,720
the goal of our paper is to realize a

529
00:22:20,720 --> 00:22:22,799
tbc move with proof verbal activity

530
00:22:22,799 --> 00:22:26,159
against quantum query attacks

531
00:22:26,159 --> 00:22:28,640
and the next i'd like to introduce our

532
00:22:28,640 --> 00:22:32,640
new construction arrow rw2

533
00:22:32,640 --> 00:22:34,960
so please recall that error w1 looks

534
00:22:34,960 --> 00:22:39,200
like this this is broken in youtube

535
00:22:39,200 --> 00:22:42,080
and this structure has this property

536
00:22:42,080 --> 00:22:44,880
a t dependent value e j of m

537
00:22:44,880 --> 00:22:47,919
is directly added with a variable t and

538
00:22:47,919 --> 00:22:50,960
a full control of adversaries

539
00:22:50,960 --> 00:22:53,200
so very roughly speaking this property

540
00:22:53,200 --> 00:22:55,840
is the reason that rrw1 is completely

541
00:22:55,840 --> 00:22:58,000
broken in the q2 model

542
00:22:58,000 --> 00:23:00,400
and so to break this property

543
00:23:00,400 --> 00:23:02,240
we introduce another block cipher code

544
00:23:02,240 --> 00:23:03,200
here

545
00:23:03,200 --> 00:23:07,880
and this is our new construction lrw2

546
00:23:08,000 --> 00:23:11,120
and we showed this theorem error w2 is

547
00:23:11,120 --> 00:23:12,960
indistinguishable from tweakable random

548
00:23:12,960 --> 00:23:15,919
permutation or ideally random tweakable

549
00:23:15,919 --> 00:23:17,280
block cipher

550
00:23:17,280 --> 00:23:19,520
by q2 attacks up to order two to the

551
00:23:19,520 --> 00:23:21,120
power n over six quantum encryption

552
00:23:21,120 --> 00:23:24,000
queries and we assume advertising value

553
00:23:24,000 --> 00:23:27,679
both of m and t in quantum superposition

554
00:23:27,679 --> 00:23:29,520
and we used the compressed oracle

555
00:23:29,520 --> 00:23:31,280
technique by chandra to prove the

556
00:23:31,280 --> 00:23:32,400
theorem

557
00:23:32,400 --> 00:23:34,720
as roughly speaking history of queries

558
00:23:34,720 --> 00:23:36,960
to random functions can be recorded even

559
00:23:36,960 --> 00:23:38,799
in the condom setting by using this

560
00:23:38,799 --> 00:23:40,240
technique

561
00:23:40,240 --> 00:23:42,880
and thanks to this technique we can use

562
00:23:42,880 --> 00:23:44,880
the classical intuition already sampling

563
00:23:44,880 --> 00:23:47,520
to some extent

564
00:23:47,520 --> 00:23:50,320
and the next i'd like to provide a very

565
00:23:50,320 --> 00:23:53,039
rough overview about our proof

566
00:23:53,039 --> 00:23:55,600
so the technically hardest part in our

567
00:23:55,600 --> 00:23:58,159
proof is to show indistinguishability

568
00:23:58,159 --> 00:23:59,200
between

569
00:23:59,200 --> 00:24:01,760
this function and this function

570
00:24:01,760 --> 00:24:03,360
and directly speaking

571
00:24:03,360 --> 00:24:04,880
when we use the compressed workload

572
00:24:04,880 --> 00:24:06,640
technique

573
00:24:06,640 --> 00:24:09,440
database or history or query

574
00:24:09,440 --> 00:24:12,720
is keep escaped by the workflow

575
00:24:12,720 --> 00:24:16,080
and so the oracle for r and sorry these

576
00:24:16,080 --> 00:24:19,200
are f 0 rf 1 r f 2 and r f x

577
00:24:19,200 --> 00:24:20,240
these are

578
00:24:20,240 --> 00:24:22,080
distinct and independent random

579
00:24:22,080 --> 00:24:23,440
functions

580
00:24:23,440 --> 00:24:25,120
and the oracle of this function

581
00:24:25,120 --> 00:24:28,400
maintains three databases d 0 for rfc d1

582
00:24:28,400 --> 00:24:31,440
for rf1 and d2 for rf2

583
00:24:31,440 --> 00:24:33,600
and roughly speaking we say that this

584
00:24:33,600 --> 00:24:36,000
database is good if it does not want

585
00:24:36,000 --> 00:24:37,600
encoding here

586
00:24:37,600 --> 00:24:39,919
and similarly we say that a database or

587
00:24:39,919 --> 00:24:42,080
history of a query for this function is

588
00:24:42,080 --> 00:24:45,440
good if it does not on the equation here

589
00:24:45,440 --> 00:24:47,679
and roughly speeding there is a natural

590
00:24:47,679 --> 00:24:49,279
one-to-one correspondence between the

591
00:24:49,279 --> 00:24:52,080
set of good database of this function

592
00:24:52,080 --> 00:24:55,120
and the good database for this function

593
00:24:55,120 --> 00:24:57,279
and this correspondence means that the

594
00:24:57,279 --> 00:24:59,360
two functions are indistinguishable as

595
00:24:59,360 --> 00:25:01,600
long as databases are good

596
00:25:01,600 --> 00:25:03,760
and this problem means that what is

597
00:25:03,760 --> 00:25:06,000
remains to be shown is producing that

598
00:25:06,000 --> 00:25:08,559
database what non-good database is hard

599
00:25:08,559 --> 00:25:10,960
that is producing a kind of value is

600
00:25:10,960 --> 00:25:11,919
hard

601
00:25:11,919 --> 00:25:13,919
and we can indicate this claim even in

602
00:25:13,919 --> 00:25:15,520
the quantum setting thanks to the

603
00:25:15,520 --> 00:25:18,080
compressed oracle techniques

604
00:25:18,080 --> 00:25:19,760
and next i'd like to provide some

605
00:25:19,760 --> 00:25:20,880
remarks

606
00:25:20,880 --> 00:25:22,960
unfortunately our construction is not

607
00:25:22,960 --> 00:25:24,480
secure against children's ciphertext

608
00:25:24,480 --> 00:25:26,880
attacks even in the classical setting

609
00:25:26,880 --> 00:25:30,880
and secondly very recently we found some

610
00:25:30,880 --> 00:25:33,200
errors in the details of the proof

611
00:25:33,200 --> 00:25:35,279
and we observed that they can be fixed

612
00:25:35,279 --> 00:25:36,960
by modifying the details without

613
00:25:36,960 --> 00:25:38,559
changing the final bond

614
00:25:38,559 --> 00:25:40,799
and we are preparing on errata and we

615
00:25:40,799 --> 00:25:44,240
are going to make it public soon

616
00:25:44,240 --> 00:25:46,159
and finally i'd like to

617
00:25:46,159 --> 00:25:48,960
summarize today's my joke

618
00:25:48,960 --> 00:25:51,200
so in our paper uh we showed a new

619
00:25:51,200 --> 00:25:53,200
construction llw2

620
00:25:53,200 --> 00:25:56,240
with quantum probable security highness

621
00:25:56,240 --> 00:25:58,240
quantum due to attacks

622
00:25:58,240 --> 00:26:01,279
and unfortunately uh so very recently we

623
00:26:01,279 --> 00:26:03,760
used up some errors in the details of

624
00:26:03,760 --> 00:26:05,679
the proof but we observe

625
00:26:05,679 --> 00:26:07,919
they can be fixed without changing the

626
00:26:07,919 --> 00:26:09,600
final bond

627
00:26:09,600 --> 00:26:11,360
and an important future work is to

628
00:26:11,360 --> 00:26:13,919
construct uh construction with

629
00:26:13,919 --> 00:26:15,279
securities against the quantum chosen

630
00:26:15,279 --> 00:26:17,919
ciphertext attack because ours is an

631
00:26:17,919 --> 00:26:19,679
obstacle against student ciphertext

632
00:26:19,679 --> 00:26:20,799
attack

633
00:26:20,799 --> 00:26:22,960
but to prove security has to change

634
00:26:22,960 --> 00:26:25,120
ciphertext attacks a permutation version

635
00:26:25,120 --> 00:26:27,360
of the complex work who is necessary

636
00:26:27,360 --> 00:26:29,520
and i think this is a somewhat difficult

637
00:26:29,520 --> 00:26:31,120
task but still

638
00:26:31,120 --> 00:26:33,440
they are important and interesting

639
00:26:33,440 --> 00:26:34,559
future works

640
00:26:34,559 --> 00:26:38,600
that's all thank you for your attention

641
00:26:42,000 --> 00:26:45,840
okay any questions from the audience

642
00:26:47,039 --> 00:26:52,400
i'm not muted ah no i'm not muted

643
00:26:52,400 --> 00:26:54,880
i need to

644
00:26:54,960 --> 00:26:56,559
assume it's not muted

645
00:26:56,559 --> 00:26:58,960
not anymore yes

646
00:26:58,960 --> 00:27:01,760
thanks for yes um

647
00:27:01,760 --> 00:27:04,640
is it a long question or short one

648
00:27:04,640 --> 00:27:07,120
yeah then i can repeat it

649
00:27:07,120 --> 00:27:09,679
yes i just wanted something about your

650
00:27:09,679 --> 00:27:13,840
uh technique about recording miracles

651
00:27:13,840 --> 00:27:15,200
do you sometimes look like it's

652
00:27:15,200 --> 00:27:18,000
indistinguishable from this

653
00:27:18,000 --> 00:27:20,880
because i think

654
00:27:22,490 --> 00:27:25,559
[Music]

655
00:27:28,240 --> 00:27:30,480
a question about the proof technique

656
00:27:30,480 --> 00:27:32,720
and do you prove it indistinguishable

657
00:27:32,720 --> 00:27:35,520
from the standard oracle

658
00:27:35,520 --> 00:27:38,000
because zandi proves it

659
00:27:38,000 --> 00:27:39,919
in his compressed technique i think and

660
00:27:39,919 --> 00:27:41,840
his question is about your proof

661
00:27:41,840 --> 00:27:46,279
technique how did you approach this

662
00:27:50,559 --> 00:27:53,679
like uh excuse me but i i didn't get uh

663
00:27:53,679 --> 00:27:55,520
what is the question i've started okay

664
00:27:55,520 --> 00:27:58,559
maybe maybe just come here anyway

665
00:27:58,559 --> 00:28:00,480
uh

666
00:28:00,480 --> 00:28:04,480
so hitamo asked the question himself

667
00:28:04,480 --> 00:28:07,200
yes please okay uh hi

668
00:28:07,200 --> 00:28:08,799
my question is that

669
00:28:08,799 --> 00:28:10,880
you're recording standard oracle with

670
00:28:10,880 --> 00:28:12,880
errors so do you prove somewhere that

671
00:28:12,880 --> 00:28:15,200
it's indistinguishable from the

672
00:28:15,200 --> 00:28:17,120
from the standard oracle

673
00:28:17,120 --> 00:28:18,720
or do you think such a proof is

674
00:28:18,720 --> 00:28:20,000
important or

675
00:28:20,000 --> 00:28:23,520
just that that's my question

676
00:28:26,640 --> 00:28:30,679
okay your question is

677
00:28:33,520 --> 00:28:35,919
yes yes exactly yes i i think they are

678
00:28:35,919 --> 00:28:38,159
indistinguishable completely

679
00:28:38,159 --> 00:28:40,399
yes

680
00:28:41,120 --> 00:28:43,679
okay thank you recess um

681
00:28:43,679 --> 00:28:46,480
any other question

682
00:28:47,679 --> 00:28:50,000
i actually also had one question uh

683
00:28:50,000 --> 00:28:52,399
basically two related but um so you use

684
00:28:52,399 --> 00:28:54,480
three primitive calls

685
00:28:54,480 --> 00:28:56,799
um and you get a classically it's only

686
00:28:56,799 --> 00:28:58,320
birthday muscular so from a classic

687
00:28:58,320 --> 00:29:00,480
perspective it's not a very efficient

688
00:29:00,480 --> 00:29:01,440
scheme

689
00:29:01,440 --> 00:29:02,880
um with three

690
00:29:02,880 --> 00:29:04,320
three blocks i for calls you can't even

691
00:29:04,320 --> 00:29:06,399
get beyond birth about security yes do

692
00:29:06,399 --> 00:29:08,399
you think you can get with three blocks

693
00:29:08,399 --> 00:29:10,320
of course then a better scheme that even

694
00:29:10,320 --> 00:29:12,320
achieves better security did you explore

695
00:29:12,320 --> 00:29:14,000
these possibilities

696
00:29:14,000 --> 00:29:17,039
i think yes yeah i think it is so it

697
00:29:17,039 --> 00:29:18,720
will be seriously possible to achieve

698
00:29:18,720 --> 00:29:21,440
such security but uh i think the problem

699
00:29:21,440 --> 00:29:22,799
is uh

700
00:29:22,799 --> 00:29:25,120
proof technique i mean

701
00:29:25,120 --> 00:29:26,960
the compressed oracle technique is not

702
00:29:26,960 --> 00:29:28,880
applicable currently not applicable for

703
00:29:28,880 --> 00:29:31,039
permutations and i think

704
00:29:31,039 --> 00:29:31,919
some

705
00:29:31,919 --> 00:29:34,240
innovation on the proof technique will

706
00:29:34,240 --> 00:29:37,840
be necessary to prove such a thing

707
00:29:37,840 --> 00:29:41,279
okay thanks um if there are no other

708
00:29:41,279 --> 00:29:43,120
questions

709
00:29:43,120 --> 00:29:45,679
yes let's uh thank akinovi again

710
00:29:45,679 --> 00:29:48,000
thank you

711
00:29:49,760 --> 00:29:51,679
and then we go to the next talk which is

712
00:29:51,679 --> 00:29:53,120
also online

713
00:29:53,120 --> 00:29:55,840
ike

714
00:30:00,399 --> 00:30:03,200
please share the screen yes we see your

715
00:30:03,200 --> 00:30:06,200
screen

716
00:30:08,159 --> 00:30:10,480
we just see a black street screen you're

717
00:30:10,480 --> 00:30:12,480
screaming now

718
00:30:12,480 --> 00:30:14,399
you're just streaming a black screen now

719
00:30:14,399 --> 00:30:17,039
is that correct

720
00:30:19,520 --> 00:30:21,600
and you're muted

721
00:30:21,600 --> 00:30:24,399
and now yes

722
00:30:35,279 --> 00:30:37,760
okay so we go to the fourth talk of this

723
00:30:37,760 --> 00:30:40,320
session is highly secure non-space max

724
00:30:40,320 --> 00:30:42,880
from the sum of tweakable evan monsters

725
00:30:42,880 --> 00:30:44,159
uh trickle

726
00:30:44,159 --> 00:30:46,559
block ciphers it's a work by wong shok

727
00:30:46,559 --> 00:30:47,600
chai

728
00:30:47,600 --> 00:30:50,799
uh akiko inoue

729
00:30:55,039 --> 00:30:57,760
and i could give the presentation

730
00:30:57,760 --> 00:30:59,840
thank you um can you hear me

731
00:30:59,840 --> 00:31:02,399
is this working no not very well

732
00:31:02,399 --> 00:31:04,640
it's it's quite soft

733
00:31:04,640 --> 00:31:06,480
then i try to speak a little louder is

734
00:31:06,480 --> 00:31:07,519
this better

735
00:31:07,519 --> 00:31:09,039
yes yes that's better

736
00:31:09,039 --> 00:31:10,960
thank you very much and thank you for

737
00:31:10,960 --> 00:31:12,240
the introduction

738
00:31:12,240 --> 00:31:14,720
clearly as

739
00:31:14,720 --> 00:31:15,840
all of you know

740
00:31:15,840 --> 00:31:18,240
there are few desired awareness of

741
00:31:18,240 --> 00:31:20,880
message authentication codes they shall

742
00:31:20,880 --> 00:31:22,880
provide everything from high efficiency

743
00:31:22,880 --> 00:31:25,360
to high security and if possible they

744
00:31:25,360 --> 00:31:28,320
should even be robust if you

745
00:31:28,320 --> 00:31:29,679
mistake to

746
00:31:29,679 --> 00:31:32,480
use your nonsense only once as desired

747
00:31:32,480 --> 00:31:33,840
and as

748
00:31:33,840 --> 00:31:35,519
you probably also or know tweakable

749
00:31:35,519 --> 00:31:37,679
block ciphers are extremely useful to

750
00:31:37,679 --> 00:31:39,919
fulfill all these goals simultaneously

751
00:31:39,919 --> 00:31:41,840
if you have only small t weeks so you

752
00:31:41,840 --> 00:31:43,679
can process a domain and have more

753
00:31:43,679 --> 00:31:46,240
elegant and more simple proofs if the

754
00:31:46,240 --> 00:31:49,200
tweaks are larger in the order of like

755
00:31:49,200 --> 00:31:51,200
this block size you can process more

756
00:31:51,200 --> 00:31:53,760
input material and be more efficient or

757
00:31:53,760 --> 00:31:55,600
you can take the nonce and increase the

758
00:31:55,600 --> 00:31:57,919
security of your construction

759
00:31:57,919 --> 00:32:00,960
and in this direction koyati lee and so

760
00:32:00,960 --> 00:32:02,159
at

761
00:32:02,159 --> 00:32:04,960
2017 proposed four elegant mac designs

762
00:32:04,960 --> 00:32:07,200
from universal hashing and a tweak and a

763
00:32:07,200 --> 00:32:09,200
block cipher call two of them were

764
00:32:09,200 --> 00:32:10,720
tweakable blocks offer based nonsense

765
00:32:10,720 --> 00:32:13,120
tweak and hash streak as shown here the

766
00:32:13,120 --> 00:32:15,679
first one ensured and with security and

767
00:32:15,679 --> 00:32:17,279
a graceful degradation when nonsense

768
00:32:17,279 --> 00:32:18,960
repeated too often

769
00:32:18,960 --> 00:32:22,000
and the second one had the improvement

770
00:32:22,000 --> 00:32:24,000
that it's stateless deterministic so did

771
00:32:24,000 --> 00:32:25,600
not need any nonsense

772
00:32:25,600 --> 00:32:28,320
and that's n plus t half bit security

773
00:32:28,320 --> 00:32:30,240
ignorant if their nonsense

774
00:32:30,240 --> 00:32:32,399
but on the other hand could not benefit

775
00:32:32,399 --> 00:32:35,519
if nonsense were available

776
00:32:35,519 --> 00:32:37,600
the research questions that ignited this

777
00:32:37,600 --> 00:32:39,760
work were how can we strengthen these

778
00:32:39,760 --> 00:32:41,360
interesting designs with

779
00:32:41,360 --> 00:32:43,440
if possible minimal changes

780
00:32:43,440 --> 00:32:45,760
for the first one for nonsense tweak how

781
00:32:45,760 --> 00:32:46,960
can we increase the security when

782
00:32:46,960 --> 00:32:49,200
nonsense may repeat often and for the

783
00:32:49,200 --> 00:32:51,200
second one can we achieve optimal

784
00:32:51,200 --> 00:32:52,880
security even if there are announces in

785
00:32:52,880 --> 00:32:53,760
the game

786
00:32:53,760 --> 00:32:55,600
and we ended up with two contributions

787
00:32:55,600 --> 00:32:57,360
with two constructions that we called

788
00:32:57,360 --> 00:32:58,880
nat2

789
00:32:58,880 --> 00:33:01,360
and extended hashes tweak

790
00:33:01,360 --> 00:33:02,799
both profited from the sum of

791
00:33:02,799 --> 00:33:05,679
independent trigger block ciphers

792
00:33:05,679 --> 00:33:07,039
at the beginning we had some

793
00:33:07,039 --> 00:33:10,000
observations which design components we

794
00:33:10,000 --> 00:33:12,320
had or we should be using

795
00:33:12,320 --> 00:33:14,399
for example the sum of independent

796
00:33:14,399 --> 00:33:16,399
prps

797
00:33:16,399 --> 00:33:19,679
well this construction as we know is and

798
00:33:19,679 --> 00:33:21,840
or can achieve and with security

799
00:33:21,840 --> 00:33:24,640
and we are limited anyhow at the end

800
00:33:24,640 --> 00:33:26,559
with bound since that was we can simply

801
00:33:26,559 --> 00:33:27,919
guess the tech and if you have an end

802
00:33:27,919 --> 00:33:30,399
attack so the security cannot be

803
00:33:30,399 --> 00:33:33,200
extended beyond this we buy tools

804
00:33:33,200 --> 00:33:35,200
we notice with our spec that we would

805
00:33:35,200 --> 00:33:37,200
like to have full security as the to

806
00:33:37,200 --> 00:33:38,799
equivalent switch already has so the non

807
00:33:38,799 --> 00:33:40,159
should be in the tweak

808
00:33:40,159 --> 00:33:41,760
and if they collide

809
00:33:41,760 --> 00:33:43,440
we would have a collision at the

810
00:33:43,440 --> 00:33:45,440
birthday bound so we would need

811
00:33:45,440 --> 00:33:47,919
two handbook hashes under the assumption

812
00:33:47,919 --> 00:33:50,399
we have an nbh function

813
00:33:50,399 --> 00:33:53,200
and we would need to process and i

814
00:33:53,200 --> 00:33:54,640
forgot it in the picture

815
00:33:54,640 --> 00:33:57,760
we had to process n and m in the hash

816
00:33:57,760 --> 00:33:59,039
function

817
00:33:59,039 --> 00:34:00,080
moreover

818
00:34:00,080 --> 00:34:01,360
when we have

819
00:34:01,360 --> 00:34:03,279
tweaked sizes at

820
00:34:03,279 --> 00:34:05,519
most of the block size we would need to

821
00:34:05,519 --> 00:34:07,279
trigger block cipher chords anyway to

822
00:34:07,279 --> 00:34:09,599
possess the hash and the nouns

823
00:34:09,599 --> 00:34:11,440
so with these design principles we

824
00:34:11,440 --> 00:34:14,560
landed at our two constructions

825
00:34:14,560 --> 00:34:15,839
nat2

826
00:34:15,839 --> 00:34:19,119
is the sum of two non-zero instances

827
00:34:19,119 --> 00:34:20,480
which preserves embed security

828
00:34:20,480 --> 00:34:22,239
unannounces and

829
00:34:22,239 --> 00:34:24,239
falls back to the sum of independent prp

830
00:34:24,239 --> 00:34:26,879
security when nonsense will repeat

831
00:34:26,879 --> 00:34:29,040
how does this look then in bounds

832
00:34:29,040 --> 00:34:31,199
so when we have

833
00:34:31,199 --> 00:34:33,359
no nones repetitions at all we preserve

834
00:34:33,359 --> 00:34:35,199
the original bounce of

835
00:34:35,199 --> 00:34:37,520
colieri and ielts construction so we are

836
00:34:37,520 --> 00:34:39,359
limited only by the number of

837
00:34:39,359 --> 00:34:42,719
verification queries so when we have

838
00:34:42,719 --> 00:34:45,599
as many verification queries as we have

839
00:34:45,599 --> 00:34:48,320
mac queries we have our previous and bit

840
00:34:48,320 --> 00:34:50,480
and we have the old bound also when we

841
00:34:50,480 --> 00:34:52,159
have less here square root of q

842
00:34:52,159 --> 00:34:53,679
verification query so it gets better

843
00:34:53,679 --> 00:34:54,639
then

844
00:34:54,639 --> 00:34:57,280
however when nonsense get misused while

845
00:34:57,280 --> 00:34:59,520
the original constructions were still

846
00:34:59,520 --> 00:35:00,960
nice so to say

847
00:35:00,960 --> 00:35:04,240
that's about to n by three queries uh

848
00:35:04,240 --> 00:35:06,720
about two n by three security we still

849
00:35:06,720 --> 00:35:09,200
land at n bit security and if we have

850
00:35:09,200 --> 00:35:11,200
even less verification queries we get a

851
00:35:11,200 --> 00:35:13,200
little better with that

852
00:35:13,200 --> 00:35:15,359
in the case that

853
00:35:15,359 --> 00:35:18,320
all mac queries use the same nonce we

854
00:35:18,320 --> 00:35:21,200
still land at about two n by three

855
00:35:21,200 --> 00:35:23,839
versus the old one was n by two security

856
00:35:23,839 --> 00:35:25,680
and if we have

857
00:35:25,680 --> 00:35:26,480
uh

858
00:35:26,480 --> 00:35:28,320
when we have fewer verification queries

859
00:35:28,320 --> 00:35:30,400
of the order of square root of q we even

860
00:35:30,400 --> 00:35:31,520
could prove

861
00:35:31,520 --> 00:35:33,599
about three and by four bit security for

862
00:35:33,599 --> 00:35:35,040
that

863
00:35:35,040 --> 00:35:36,720
the second construction is called

864
00:35:36,720 --> 00:35:38,960
extended hashes tweak it extends the

865
00:35:38,960 --> 00:35:42,079
original design by having this sum of

866
00:35:42,079 --> 00:35:43,440
independent permutations where we

867
00:35:43,440 --> 00:35:44,880
possess the nons in the second trigger

868
00:35:44,880 --> 00:35:46,400
block cipher called with an independent

869
00:35:46,400 --> 00:35:47,599
key

870
00:35:47,599 --> 00:35:49,200
and

871
00:35:49,200 --> 00:35:51,440
here it's the other way around

872
00:35:51,440 --> 00:35:52,480
here

873
00:35:52,480 --> 00:35:53,599
when

874
00:35:53,599 --> 00:35:56,400
there are no nonsense respected we end

875
00:35:56,400 --> 00:35:57,920
up at the same security bounds of

876
00:35:57,920 --> 00:36:00,560
embedded security as before however when

877
00:36:00,560 --> 00:36:02,800
we are not respecting the our bounds get

878
00:36:02,800 --> 00:36:04,800
better in theory and we are limited only

879
00:36:04,800 --> 00:36:06,720
by the number of verification queries so

880
00:36:06,720 --> 00:36:08,560
we have a lot of them we still end up at

881
00:36:08,560 --> 00:36:10,880
the end with bound but we improve

882
00:36:10,880 --> 00:36:12,640
overhash as tweak when there are fewer

883
00:36:12,640 --> 00:36:15,680
verification queries

884
00:36:16,320 --> 00:36:19,280
in terms of yeah we need more operations

885
00:36:19,280 --> 00:36:21,119
than the original constructions however

886
00:36:21,119 --> 00:36:22,480
we argue that

887
00:36:22,480 --> 00:36:24,160
the additional computations that we

888
00:36:24,160 --> 00:36:25,760
introduce are minimal

889
00:36:25,760 --> 00:36:28,160
this means we add another trigger block

890
00:36:28,160 --> 00:36:29,920
cipher call that is independent from the

891
00:36:29,920 --> 00:36:32,640
first one however this may be also

892
00:36:32,640 --> 00:36:35,359
parallel we will have to process the

893
00:36:35,359 --> 00:36:37,280
nouns in both functions in terms of

894
00:36:37,280 --> 00:36:39,680
enhanced hash streak this is an

895
00:36:39,680 --> 00:36:41,200
additional effort for the hash function

896
00:36:41,200 --> 00:36:43,359
and we see we have an additional hash

897
00:36:43,359 --> 00:36:45,599
function called from nonsense tweak two

898
00:36:45,599 --> 00:36:47,440
yet we argue that those are minimal from

899
00:36:47,440 --> 00:36:50,000
our observations to obtain these higher

900
00:36:50,000 --> 00:36:51,839
security bonds

901
00:36:51,839 --> 00:36:54,800
in sum we propose two highly secure

902
00:36:54,800 --> 00:36:56,400
non-spaced trigger block cipher-based

903
00:36:56,400 --> 00:36:58,400
mac designs with minimal changes from

904
00:36:58,400 --> 00:37:00,640
the original designs hashes down the

905
00:37:00,640 --> 00:37:02,640
street can hazard's tweak by coriander

906
00:37:02,640 --> 00:37:04,560
with higher security even when the tweak

907
00:37:04,560 --> 00:37:06,480
size exceeds the block size

908
00:37:06,480 --> 00:37:09,680
for first design we stay at n bits when

909
00:37:09,680 --> 00:37:11,440
we keep up with nonsense however when

910
00:37:11,440 --> 00:37:13,839
not this repeat often we have at least

911
00:37:13,839 --> 00:37:15,520
two and by three with security and if we

912
00:37:15,520 --> 00:37:17,359
have fewer verification queries you can

913
00:37:17,359 --> 00:37:19,200
even exceed that

914
00:37:19,200 --> 00:37:21,119
for extended hashes tweak

915
00:37:21,119 --> 00:37:23,119
we always will have

916
00:37:23,119 --> 00:37:25,920
this end with security

917
00:37:25,920 --> 00:37:27,119
even

918
00:37:27,119 --> 00:37:27,839
but

919
00:37:27,839 --> 00:37:29,359
we can get better if nonsense are

920
00:37:29,359 --> 00:37:30,800
respected for that

921
00:37:30,800 --> 00:37:33,200
future work could involve mixed

922
00:37:33,200 --> 00:37:35,280
constructions that we had started or a

923
00:37:35,280 --> 00:37:37,200
security analysis in the ideal cipher

924
00:37:37,200 --> 00:37:38,960
model

925
00:37:38,960 --> 00:37:41,839
so far on this

926
00:37:41,839 --> 00:37:44,320
and looking forward to your question

927
00:37:44,320 --> 00:37:47,800
okay thank you

928
00:37:50,400 --> 00:37:53,599
any question from the audience

929
00:37:58,079 --> 00:38:01,880
okay any question online

930
00:38:04,400 --> 00:38:06,320
okay i actually had a question i had two

931
00:38:06,320 --> 00:38:08,560
questions uh by the way so one is from

932
00:38:08,560 --> 00:38:11,359
this nonsense tweak two approach um how

933
00:38:11,359 --> 00:38:13,280
did you approach the proof is it

934
00:38:13,280 --> 00:38:15,440
just a black box combination of the sum

935
00:38:15,440 --> 00:38:17,359
of permutations with

936
00:38:17,359 --> 00:38:19,280
an ad or did you have to prove it from

937
00:38:19,280 --> 00:38:20,640
scratch

938
00:38:20,640 --> 00:38:21,599
no

939
00:38:21,599 --> 00:38:23,680
this was a dedicated extension of the

940
00:38:23,680 --> 00:38:25,200
mirror theory

941
00:38:25,200 --> 00:38:27,839
to get beyond even this to n by three

942
00:38:27,839 --> 00:38:31,520
bounds so this was also an extension of

943
00:38:31,520 --> 00:38:33,760
earlier results i think by kim adult

944
00:38:33,760 --> 00:38:37,040
from eurocrypt20 and maybe also by data

945
00:38:37,040 --> 00:38:38,000
adult

946
00:38:38,000 --> 00:38:40,240
notice had to

947
00:38:40,240 --> 00:38:42,720
follow a

948
00:38:42,720 --> 00:38:45,680
new path of defining

949
00:38:45,680 --> 00:38:47,680
nice graphs nice transcript graphs and

950
00:38:47,680 --> 00:38:48,800
then

951
00:38:48,800 --> 00:38:50,880
using a bound on their solutions for the

952
00:38:50,880 --> 00:38:52,640
final proof

953
00:38:52,640 --> 00:38:55,440
unfortunately not so easy

954
00:38:55,440 --> 00:38:57,359
okay let me ask one more quick question

955
00:38:57,359 --> 00:38:59,520
because you kind of have a graceful

956
00:38:59,520 --> 00:39:01,280
degradation in your proof so you have

957
00:39:01,280 --> 00:39:03,040
the case with the non-respecting setting

958
00:39:03,040 --> 00:39:04,480
in the case where you have i think

959
00:39:04,480 --> 00:39:06,400
square root of

960
00:39:06,400 --> 00:39:07,119
q

961
00:39:07,119 --> 00:39:09,359
non-superstitious m is about actually a

962
00:39:09,359 --> 00:39:11,520
function of the number of non-misuses in

963
00:39:11,520 --> 00:39:12,640
this

964
00:39:12,640 --> 00:39:14,320
in terms of the original definition of

965
00:39:14,320 --> 00:39:16,160
this non's degradation security i think

966
00:39:16,160 --> 00:39:19,359
of apigee that all

967
00:39:19,359 --> 00:39:21,440
it should be but there are more terms a

968
00:39:21,440 --> 00:39:24,320
lot of terms so

969
00:39:26,640 --> 00:39:29,440
i don't have the complete so

970
00:39:29,440 --> 00:39:31,359
what i mean here is what i mean here is

971
00:39:31,359 --> 00:39:32,800
that you actually have three cases where

972
00:39:32,800 --> 00:39:34,720
mu is zero where mu is square root of q

973
00:39:34,720 --> 00:39:36,800
over mu is q do you prove it for

974
00:39:36,800 --> 00:39:39,280
arbitrary mu or just for these yes

975
00:39:39,280 --> 00:39:41,920
yes yes this is not a case this is just

976
00:39:41,920 --> 00:39:43,440
for illustration

977
00:39:43,440 --> 00:39:45,200
okay thank you

978
00:39:45,200 --> 00:39:48,320
if there are any other questions

979
00:39:48,320 --> 00:39:53,480
if not let's thank ike again

980
00:39:57,280 --> 00:40:01,760
then we have to i have to do some magic

981
00:40:02,000 --> 00:40:04,560
one second

982
00:40:05,680 --> 00:40:07,520
wait oh wait

983
00:40:07,520 --> 00:40:11,839
ah yes there's magic

984
00:40:11,920 --> 00:40:14,160
because we close that one

985
00:40:14,160 --> 00:40:17,440
closer oh no not here

986
00:40:17,440 --> 00:40:19,200
ethan ah it's there this is still there

987
00:40:19,200 --> 00:40:21,119
great

988
00:40:21,119 --> 00:40:23,680
yes this one's shirt yes but this works

989
00:40:23,680 --> 00:40:26,160
is this a correct one

990
00:40:26,160 --> 00:40:27,599
yes

991
00:40:27,599 --> 00:40:30,960
yes this is the one yes

992
00:40:31,599 --> 00:40:35,240
yes yes

993
00:40:38,000 --> 00:40:40,720
and the next talk is ctet plus a beyond

994
00:40:40,720 --> 00:40:42,560
birthday bounce secure tweakable and

995
00:40:42,560 --> 00:40:44,480
ciphering scheme using a single sight

996
00:40:44,480 --> 00:40:45,920
random permutation

997
00:40:45,920 --> 00:40:48,800
it's a work of binocularity

998
00:40:48,800 --> 00:40:50,319
jordan eaton

999
00:40:50,319 --> 00:40:53,319
virginia

1000
00:40:55,359 --> 00:40:57,760
jordan will give the presentation thank

1001
00:40:57,760 --> 00:40:58,880
you

1002
00:40:58,880 --> 00:41:01,280
thank you for the introduction

1003
00:41:01,280 --> 00:41:03,920
so um in this world we're interested in

1004
00:41:03,920 --> 00:41:06,560
the full disk encryption problem in this

1005
00:41:06,560 --> 00:41:09,359
context we want to encrypt data that is

1006
00:41:09,359 --> 00:41:11,680
divided into sectors a few hundred bytes

1007
00:41:11,680 --> 00:41:13,520
to a few kilobytes

1008
00:41:13,520 --> 00:41:15,119
the problem that we have is that there

1009
00:41:15,119 --> 00:41:17,680
is no room to store additional data like

1010
00:41:17,680 --> 00:41:19,680
announce random ivs or even an

1011
00:41:19,680 --> 00:41:21,200
authentication tab

1012
00:41:21,200 --> 00:41:22,240
tag

1013
00:41:22,240 --> 00:41:23,839
in order to work around this limitation

1014
00:41:23,839 --> 00:41:25,280
we'll have to encrypt each sector

1015
00:41:25,280 --> 00:41:26,880
independently

1016
00:41:26,880 --> 00:41:29,200
the current standard of disk encryption

1017
00:41:29,200 --> 00:41:32,000
is called aesxts it is a it is a

1018
00:41:32,000 --> 00:41:34,000
tweakable mode of operation combined

1019
00:41:34,000 --> 00:41:36,480
with the xex transformation for aes

1020
00:41:36,480 --> 00:41:38,880
note that the xxx

1021
00:41:38,880 --> 00:41:42,160
cons the e6 construction is secure up to

1022
00:41:42,160 --> 00:41:43,680
the birthday bound which means this

1023
00:41:43,680 --> 00:41:45,440
construction is secure as long as the

1024
00:41:45,440 --> 00:41:47,200
number of blocks is small in front of 2

1025
00:41:47,200 --> 00:41:48,720
to 64.

1026
00:41:48,720 --> 00:41:50,640
in this construction we identify two

1027
00:41:50,640 --> 00:41:52,720
problems the first one is a small

1028
00:41:52,720 --> 00:41:54,960
granularity while the second one is that

1029
00:41:54,960 --> 00:41:57,680
big data centers mostly most likely hold

1030
00:41:57,680 --> 00:41:59,839
at least 2 to the 50 bytes which is

1031
00:41:59,839 --> 00:42:01,359
close to the birthday bound of 2 to the

1032
00:42:01,359 --> 00:42:03,200
64.

1033
00:42:03,200 --> 00:42:04,480
in order to

1034
00:42:04,480 --> 00:42:05,920
in order to solve the granularity

1035
00:42:05,920 --> 00:42:07,839
problem we'll use white tweakable block

1036
00:42:07,839 --> 00:42:10,160
ciphers they use all sectors as input

1037
00:42:10,160 --> 00:42:11,760
blocks even if they are based on a

1038
00:42:11,760 --> 00:42:13,760
tweakable block cipher or block cipher

1039
00:42:13,760 --> 00:42:15,920
with small domain size using such an

1040
00:42:15,920 --> 00:42:18,560
algorithm one bit change in m1 will

1041
00:42:18,560 --> 00:42:20,480
affect all ciphertex blocks unlike the

1042
00:42:20,480 --> 00:42:22,160
previous construction

1043
00:42:22,160 --> 00:42:24,400
where it only affected c1

1044
00:42:24,400 --> 00:42:27,200
several such examples already exist and

1045
00:42:27,200 --> 00:42:29,839
they can be divided into three families

1046
00:42:29,839 --> 00:42:32,000
the encrypt mixed in grips the ash

1047
00:42:32,000 --> 00:42:34,800
encrypt ash and the ash counter ash all

1048
00:42:34,800 --> 00:42:37,440
these constructions uh require roughly

1049
00:42:37,440 --> 00:42:40,160
two aes calls or one as called and two

1050
00:42:40,160 --> 00:42:42,160
field multiplication and they are secure

1051
00:42:42,160 --> 00:42:44,880
up to two to the 64 queries however

1052
00:42:44,880 --> 00:42:46,880
these constructions are not

1053
00:42:46,880 --> 00:42:48,720
the nuts of the birthday bound

1054
00:42:48,720 --> 00:42:49,680
problem

1055
00:42:49,680 --> 00:42:51,359
which means that if we want to achieve

1056
00:42:51,359 --> 00:42:53,119
behind birthday bond security we'll have

1057
00:42:53,119 --> 00:42:54,720
to increase the number of layers the

1058
00:42:54,720 --> 00:42:57,359
linear layers

1059
00:42:57,440 --> 00:42:59,599
so so the two-round spn has already been

1060
00:42:59,599 --> 00:43:01,760
seen as a tweakable domain extender for

1061
00:43:01,760 --> 00:43:03,920
block ciphers and it can be seen as an

1062
00:43:03,920 --> 00:43:06,319
ash encrypt ash encrypt ash paradigm and

1063
00:43:06,319 --> 00:43:08,400
you secure up to two to two n divided by

1064
00:43:08,400 --> 00:43:10,720
three queries as long as t and t minus

1065
00:43:10,720 --> 00:43:12,720
one satisfy some property that was

1066
00:43:12,720 --> 00:43:16,079
introduced in crypto 2018 which namely

1067
00:43:16,079 --> 00:43:17,680
means that

1068
00:43:17,680 --> 00:43:19,119
they are almost super block-wise

1069
00:43:19,119 --> 00:43:21,520
universal and uniform a property that we

1070
00:43:21,520 --> 00:43:23,359
shorten into sbu

1071
00:43:23,359 --> 00:43:25,359
our first contribution in this work is

1072
00:43:25,359 --> 00:43:27,839
to introduce the ctet plus construction

1073
00:43:27,839 --> 00:43:29,200
which is an optimization of the

1074
00:43:29,200 --> 00:43:31,119
two-round spn that uses the same

1075
00:43:31,119 --> 00:43:33,200
permutation for the non-linear layers

1076
00:43:33,200 --> 00:43:34,880
and uses a more efficient middle layer

1077
00:43:34,880 --> 00:43:36,960
that replaces one field multiplication

1078
00:43:36,960 --> 00:43:38,400
per block

1079
00:43:38,400 --> 00:43:40,240
with one doubling per block and it is

1080
00:43:40,240 --> 00:43:42,560
secure up to two to two and by three

1081
00:43:42,560 --> 00:43:44,720
queries as long as t and t minus one are

1082
00:43:44,720 --> 00:43:45,760
sbu

1083
00:43:45,760 --> 00:43:48,079
additionally we introduce an

1084
00:43:48,079 --> 00:43:49,920
instantiation of the cte plus

1085
00:43:49,920 --> 00:43:52,319
construction using a round reduced aes

1086
00:43:52,319 --> 00:43:53,599
of six rounds

1087
00:43:53,599 --> 00:43:56,000
overall our construction uses one tweak

1088
00:43:56,000 --> 00:43:58,079
of 128 bits

1089
00:43:58,079 --> 00:44:02,079
one white block of 128 w bit words and

1090
00:44:02,079 --> 00:44:03,359
relies on six

1091
00:44:03,359 --> 00:44:04,400
six

1092
00:44:04,400 --> 00:44:08,560
keys of 128 bits two for the each of the

1093
00:44:08,560 --> 00:44:11,200
t linear layer one for the n linear

1094
00:44:11,200 --> 00:44:13,760
layer and one for the reduced uh round

1095
00:44:13,760 --> 00:44:16,720
of aes of six rounds as xbox

1096
00:44:16,720 --> 00:44:19,359
this our analysis security analysis

1097
00:44:19,359 --> 00:44:22,960
allows us to claim 127 bit of security

1098
00:44:22,960 --> 00:44:24,720
so in our analysis

1099
00:44:24,720 --> 00:44:26,640
uh we um

1100
00:44:26,640 --> 00:44:27,599
we

1101
00:44:27,599 --> 00:44:30,240
we rely on two complementary arguments

1102
00:44:30,240 --> 00:44:32,400
the first one is a generic security

1103
00:44:32,400 --> 00:44:33,839
proof that justify the fact that the

1104
00:44:33,839 --> 00:44:37,280
generic structure of aes6 ctd blues is

1105
00:44:37,280 --> 00:44:39,280
sound and will resist attacks with high

1106
00:44:39,280 --> 00:44:41,440
probability this proof relies on the age

1107
00:44:41,440 --> 00:44:43,680
coefficient technique moreover we

1108
00:44:43,680 --> 00:44:46,319
provide a dedicated crypto analysis that

1109
00:44:46,319 --> 00:44:49,280
to justify why our instance within six

1110
00:44:49,280 --> 00:44:52,000
round of aes is still secure

1111
00:44:52,000 --> 00:44:55,520
in in our crypto analysis uh part we

1112
00:44:55,520 --> 00:44:57,760
concentrate on two attack direction the

1113
00:44:57,760 --> 00:44:59,760
first one is to exploit weakness of aes

1114
00:44:59,760 --> 00:45:01,520
and extend it to the full construction

1115
00:45:01,520 --> 00:45:02,800
while the second one is to use

1116
00:45:02,800 --> 00:45:04,720
structural attacks like here you attack

1117
00:45:04,720 --> 00:45:07,040
and tonicated differentials

1118
00:45:07,040 --> 00:45:09,119
in in to conclude this talk i would like

1119
00:45:09,119 --> 00:45:10,560
to quickly compare

1120
00:45:10,560 --> 00:45:11,760
the

1121
00:45:11,760 --> 00:45:14,400
our construction with previous one and

1122
00:45:14,400 --> 00:45:16,800
talk a bit about our implementation so

1123
00:45:16,800 --> 00:45:18,960
as far as the generic security bounds

1124
00:45:18,960 --> 00:45:21,839
are concerned only two constructions uh

1125
00:45:21,839 --> 00:45:23,680
uh achieved beyond both the bounce

1126
00:45:23,680 --> 00:45:26,960
security our construction city blues and

1127
00:45:26,960 --> 00:45:30,000
the tweakable two-round spn as you can

1128
00:45:30,000 --> 00:45:33,920
see our construction is 0.4 roughly 0.4

1129
00:45:33,920 --> 00:45:36,240
cycles per byte faster and this

1130
00:45:36,240 --> 00:45:38,000
improvement mainly comes from the

1131
00:45:38,000 --> 00:45:39,599
replacement of the middle layer to a

1132
00:45:39,599 --> 00:45:43,960
simpler one thank you for your attention

1133
00:45:46,480 --> 00:45:48,000
hey thanks for presentation are there

1134
00:45:48,000 --> 00:45:50,640
any questions

1135
00:45:56,000 --> 00:45:58,839
so here i hear something online is that

1136
00:45:58,839 --> 00:46:00,800
correct uh

1137
00:46:00,800 --> 00:46:03,040
bart can i ask questions yes

1138
00:46:03,040 --> 00:46:04,880
go ahead

1139
00:46:04,880 --> 00:46:07,440
yes uh hi jordan so do you prove your

1140
00:46:07,440 --> 00:46:09,520
construction in a random permutation

1141
00:46:09,520 --> 00:46:13,640
model or in standard mode

1142
00:46:19,599 --> 00:46:22,160
have i made myself clear so

1143
00:46:22,160 --> 00:46:24,800
so do you uh make this s-box secret or

1144
00:46:24,800 --> 00:46:26,240
are you giving the access to the

1145
00:46:26,240 --> 00:46:27,440
adversary

1146
00:46:27,440 --> 00:46:30,640
no the xbox is secret

1147
00:46:30,640 --> 00:46:33,040
so okay so xbox is secret and you

1148
00:46:33,040 --> 00:46:36,000
instantiate this xbox with aes6 right

1149
00:46:36,000 --> 00:46:38,240
yeah

1150
00:46:38,240 --> 00:46:41,040
but i suppose that aes 6 is

1151
00:46:41,040 --> 00:46:43,440
available in public i mean anyone can

1152
00:46:43,440 --> 00:46:46,640
evaluate aes6

1153
00:46:46,800 --> 00:46:48,000
yeah

1154
00:46:48,000 --> 00:46:50,720
so so in that model uh i think it would

1155
00:46:50,720 --> 00:46:52,400
be better that if you have proven your

1156
00:46:52,400 --> 00:46:54,000
construction in random permutation

1157
00:46:54,000 --> 00:46:57,000
models

1158
00:47:04,880 --> 00:47:08,400
okay any other questions

1159
00:47:08,480 --> 00:47:10,400
okay i actually have one

1160
00:47:10,400 --> 00:47:13,359
yes go ahead that's it okay so uh

1161
00:47:13,359 --> 00:47:14,160
you

1162
00:47:14,160 --> 00:47:18,160
claimed one 27-bit security for as6

1163
00:47:18,160 --> 00:47:19,760
instantiation

1164
00:47:19,760 --> 00:47:23,200
uh instead of uh 128 and uh why do you

1165
00:47:23,200 --> 00:47:25,599
claim 127-bit security

1166
00:47:25,599 --> 00:47:28,720
so uh two of the keys that we use do not

1167
00:47:28,720 --> 00:47:30,720
have a 128

1168
00:47:30,720 --> 00:47:32,960
bit of entropy so

1169
00:47:32,960 --> 00:47:34,720
you can't i don't think you can claim

1170
00:47:34,720 --> 00:47:35,599
that

1171
00:47:35,599 --> 00:47:38,400
okay okay i have one more question

1172
00:47:38,400 --> 00:47:41,280
uh so uh this is not relevant in the

1173
00:47:41,280 --> 00:47:44,079
context of disk sector encryption but uh

1174
00:47:44,079 --> 00:47:45,760
the title says that this is an in

1175
00:47:45,760 --> 00:47:48,400
ciphering scheme so i

1176
00:47:48,400 --> 00:47:50,000
assume that you can

1177
00:47:50,000 --> 00:47:52,400
handle valuable length

1178
00:47:52,400 --> 00:47:53,839
inputs

1179
00:47:53,839 --> 00:47:58,480
and do you have any comment on that

1180
00:47:58,480 --> 00:48:00,559
the input language can vary

1181
00:48:00,559 --> 00:48:03,680
do you expect an attack or this is not

1182
00:48:03,680 --> 00:48:06,720
covered in the proof or

1183
00:48:06,720 --> 00:48:09,280
well we expect w to be quite big so this

1184
00:48:09,280 --> 00:48:10,480
would uh

1185
00:48:10,480 --> 00:48:12,800
this would work on very large input but

1186
00:48:12,800 --> 00:48:14,800
we didn't think about variable

1187
00:48:14,800 --> 00:48:15,839
inputs

1188
00:48:15,839 --> 00:48:18,079
okay you mean do you have an attack or

1189
00:48:18,079 --> 00:48:21,040
it doesn't cover it in the proof

1190
00:48:21,040 --> 00:48:22,720
no i don't think we have enough time

1191
00:48:22,720 --> 00:48:25,919
okay thank you

1192
00:48:27,839 --> 00:48:29,599
okay if there are no other questions

1193
00:48:29,599 --> 00:48:33,640
let's thank ethan again

1194
00:48:38,800 --> 00:48:41,440
and we

1195
00:48:41,440 --> 00:48:44,440
yes

1196
00:48:52,160 --> 00:48:55,520
yes the other file is closed

1197
00:48:59,680 --> 00:49:00,880
yes

1198
00:49:00,880 --> 00:49:03,119
okay

1199
00:49:03,760 --> 00:49:06,480
yes thank you

1200
00:49:09,280 --> 00:49:12,599
all right

1201
00:49:18,000 --> 00:49:20,000
and the the last talk of the session is

1202
00:49:20,000 --> 00:49:22,319
uh on length independent security bounds

1203
00:49:22,319 --> 00:49:25,359
for the pmac family it's a work by uh

1204
00:49:25,359 --> 00:49:27,440
bishwajit chakrabar

1205
00:49:27,440 --> 00:49:30,440
uh

1206
00:49:41,520 --> 00:49:43,599
thanks for the introduction uh

1207
00:49:43,599 --> 00:49:45,200
and

1208
00:49:45,200 --> 00:49:47,040
as the title says

1209
00:49:47,040 --> 00:49:50,960
this talk is about the pmac family

1210
00:49:50,960 --> 00:49:52,240
so

1211
00:49:52,240 --> 00:49:54,319
let's start with the

1212
00:49:54,319 --> 00:49:57,440
description of the simplified pmac

1213
00:49:57,440 --> 00:50:00,880
proposed by gaziatal so this is uh just

1214
00:50:00,880 --> 00:50:03,200
a block cipher bit based mode of

1215
00:50:03,200 --> 00:50:05,200
operation for message authentication

1216
00:50:05,200 --> 00:50:06,000
code

1217
00:50:06,000 --> 00:50:08,240
uh it's a parallelizable mode which

1218
00:50:08,240 --> 00:50:10,559
takes a message m and

1219
00:50:10,559 --> 00:50:13,119
divides this into n bit blocks and then

1220
00:50:13,119 --> 00:50:15,839
uh mask the first l minus one blocks

1221
00:50:15,839 --> 00:50:18,000
with a masking function

1222
00:50:18,000 --> 00:50:20,160
and encrypts them and exhausts all the

1223
00:50:20,160 --> 00:50:23,839
outputs to create a hash value

1224
00:50:23,839 --> 00:50:27,440
which goes as input to this e k prime

1225
00:50:27,440 --> 00:50:31,760
and the output is the final tag value

1226
00:50:33,520 --> 00:50:35,599
and when we substitute different values

1227
00:50:35,599 --> 00:50:37,359
for

1228
00:50:37,359 --> 00:50:38,960
k and

1229
00:50:38,960 --> 00:50:41,200
or when we uh use different relations

1230
00:50:41,200 --> 00:50:44,079
for k k prime and uh l we get different

1231
00:50:44,079 --> 00:50:46,160
instantiations of s p mac

1232
00:50:46,160 --> 00:50:48,079
uh like p max the original construction

1233
00:50:48,079 --> 00:50:50,000
uh is uh

1234
00:50:50,000 --> 00:50:51,680
achieved when you get when you set k

1235
00:50:51,680 --> 00:50:53,760
equals k prime and l equals the

1236
00:50:53,760 --> 00:50:55,280
encryption of 0

1237
00:50:55,280 --> 00:50:56,240
and

1238
00:50:56,240 --> 00:50:58,160
tau is defined as the

1239
00:50:58,160 --> 00:51:00,480
gamma i into l where gamma is the grey

1240
00:51:00,480 --> 00:51:01,760
code

1241
00:51:01,760 --> 00:51:03,359
sequence

1242
00:51:03,359 --> 00:51:05,359
similarly we have pmac 1

1243
00:51:05,359 --> 00:51:07,200
which is

1244
00:51:07,200 --> 00:51:09,280
another instance

1245
00:51:09,280 --> 00:51:10,480
uh with

1246
00:51:10,480 --> 00:51:13,599
a simple change in the masking function

1247
00:51:13,599 --> 00:51:14,960
where you

1248
00:51:14,960 --> 00:51:15,760
use

1249
00:51:15,760 --> 00:51:17,440
powering of

1250
00:51:17,440 --> 00:51:19,359
sequence so you use

1251
00:51:19,359 --> 00:51:22,640
a primitive element of gf2 to the n to

1252
00:51:22,640 --> 00:51:26,079
create the masking values

1253
00:51:26,079 --> 00:51:29,440
in 2019 naito proposed another variant

1254
00:51:29,440 --> 00:51:31,680
called np-mac

1255
00:51:31,680 --> 00:51:34,960
or we call it np-mac which is

1256
00:51:34,960 --> 00:51:37,520
again a variant of pmac one uh it uses

1257
00:51:37,520 --> 00:51:41,839
two different uh powering up values

1258
00:51:42,480 --> 00:51:44,640
so uh

1259
00:51:44,640 --> 00:51:47,440
uh and the next part uh is the length

1260
00:51:47,440 --> 00:51:49,200
independent pr of security so what do we

1261
00:51:49,200 --> 00:51:51,680
mean by length independent prf security

1262
00:51:51,680 --> 00:51:52,880
so

1263
00:51:52,880 --> 00:51:54,160
basically

1264
00:51:54,160 --> 00:51:56,400
we have the prf guessing game so the

1265
00:51:56,400 --> 00:51:58,240
adversary tries to guess between a

1266
00:51:58,240 --> 00:52:00,240
uniform random function gamma 0 or the

1267
00:52:00,240 --> 00:52:02,160
real construction gamma 1

1268
00:52:02,160 --> 00:52:03,440
and

1269
00:52:03,440 --> 00:52:04,720
you have this definition of the

1270
00:52:04,720 --> 00:52:07,040
advantage and lent independence simply

1271
00:52:07,040 --> 00:52:08,720
means that this advantage term should be

1272
00:52:08,720 --> 00:52:10,079
independent of the

1273
00:52:10,079 --> 00:52:12,720
message length

1274
00:52:14,240 --> 00:52:16,160
so our first contribution in the paper

1275
00:52:16,160 --> 00:52:17,359
is a

1276
00:52:17,359 --> 00:52:19,119
demonstration of a flaw in the analysis

1277
00:52:19,119 --> 00:52:21,440
of nato's variant

1278
00:52:21,440 --> 00:52:23,760
of p mac

1279
00:52:23,760 --> 00:52:25,839
to simply describe the

1280
00:52:25,839 --> 00:52:28,559
flaw we just consider this system of two

1281
00:52:28,559 --> 00:52:31,680
equations in l 1 and l 2 over g of 2 to

1282
00:52:31,680 --> 00:52:33,839
the n

1283
00:52:34,160 --> 00:52:36,800
with this condition that

1284
00:52:36,800 --> 00:52:39,040
at least three of the

1285
00:52:39,040 --> 00:52:41,680
four variables a b c d are distinct four

1286
00:52:41,680 --> 00:52:43,680
values a b c d are distinct

1287
00:52:43,680 --> 00:52:45,680
so uh

1288
00:52:45,680 --> 00:52:47,760
in the paper naito claims that the two

1289
00:52:47,760 --> 00:52:49,119
equations are

1290
00:52:49,119 --> 00:52:51,520
linearly independent given that we have

1291
00:52:51,520 --> 00:52:53,680
this condition that a b c and d are

1292
00:52:53,680 --> 00:52:54,800
distinct

1293
00:52:54,800 --> 00:52:56,720
uh and he argues it as follows so he

1294
00:52:56,720 --> 00:52:59,119
says that if the two equations are

1295
00:52:59,119 --> 00:53:00,960
dependent then you must have alpha plus

1296
00:53:00,960 --> 00:53:03,119
beta equals gamma plus delta

1297
00:53:03,119 --> 00:53:05,920
and alpha q plus beta cube equals gamma

1298
00:53:05,920 --> 00:53:07,599
q plus delta q

1299
00:53:07,599 --> 00:53:08,640
and

1300
00:53:08,640 --> 00:53:11,040
basically if you just do some algebraic

1301
00:53:11,040 --> 00:53:12,640
simplification after this you will

1302
00:53:12,640 --> 00:53:15,200
arrive at a contradiction that a equals

1303
00:53:15,200 --> 00:53:17,359
b equals c equals b which

1304
00:53:17,359 --> 00:53:19,440
clearly uh contradicts the

1305
00:53:19,440 --> 00:53:21,280
assumption that a b at least three of

1306
00:53:21,280 --> 00:53:23,040
them should be distinct

1307
00:53:23,040 --> 00:53:24,640
but uh

1308
00:53:24,640 --> 00:53:27,040
as you can

1309
00:53:27,040 --> 00:53:29,119
see the actual uh criteria for

1310
00:53:29,119 --> 00:53:31,680
dependence is that uh alpha plus beta

1311
00:53:31,680 --> 00:53:33,119
should be equal to

1312
00:53:33,119 --> 00:53:36,400
uh c2 divided by c1 uh times uh gamma

1313
00:53:36,400 --> 00:53:38,880
plus delta and alpha q plus beta cube

1314
00:53:38,880 --> 00:53:41,119
should be equal to c2 divided by c1

1315
00:53:41,119 --> 00:53:43,440
times gamma q plus delta q

1316
00:53:43,440 --> 00:53:44,880
so

1317
00:53:44,880 --> 00:53:46,000
neither's

1318
00:53:46,000 --> 00:53:48,000
argument only works when c 2 is equal to

1319
00:53:48,000 --> 00:53:49,280
c 1

1320
00:53:49,280 --> 00:53:51,359
but in all other cases when c 2 is not

1321
00:53:51,359 --> 00:53:54,240
equal to c 1 this this claim is wrong so

1322
00:53:54,240 --> 00:53:56,800
in the paper we actually demonstrate a

1323
00:53:56,800 --> 00:53:59,839
counter example over gf2 to the 16

1324
00:53:59,839 --> 00:54:01,119
and

1325
00:54:01,119 --> 00:54:03,839
we also give a

1326
00:54:03,839 --> 00:54:05,839
equivalent

1327
00:54:05,839 --> 00:54:07,920
representation of the problem of

1328
00:54:07,920 --> 00:54:11,440
security of this npmac construction

1329
00:54:11,440 --> 00:54:12,400
our

1330
00:54:12,400 --> 00:54:15,680
second contribution is a relaxation on

1331
00:54:15,680 --> 00:54:18,160
the security precondition of the general

1332
00:54:18,160 --> 00:54:19,760
sp mac design

1333
00:54:19,760 --> 00:54:20,640
so

1334
00:54:20,640 --> 00:54:22,319
basically the previous result proved

1335
00:54:22,319 --> 00:54:25,440
that the advantage is

1336
00:54:25,440 --> 00:54:28,000
q square by 2 to the n assuming that the

1337
00:54:28,000 --> 00:54:29,839
masking function tau is a forward

1338
00:54:29,839 --> 00:54:31,680
independent hash function

1339
00:54:31,680 --> 00:54:33,520
uh in this paper we have

1340
00:54:33,520 --> 00:54:35,760
given a new notion of

1341
00:54:35,760 --> 00:54:38,720
universality called two wise axu

1342
00:54:38,720 --> 00:54:40,559
basically it is a generalization of the

1343
00:54:40,559 --> 00:54:42,240
axu hash function

1344
00:54:42,240 --> 00:54:43,440
so uh

1345
00:54:43,440 --> 00:54:45,920
along with the usual uh this

1346
00:54:45,920 --> 00:54:47,280
so this

1347
00:54:47,280 --> 00:54:50,559
probability of a this uh is the usual

1348
00:54:50,559 --> 00:54:52,240
axu

1349
00:54:52,240 --> 00:54:54,079
notion so along with that we need

1350
00:54:54,079 --> 00:54:57,520
another joint probability of a uh and b

1351
00:54:57,520 --> 00:54:58,960
and we want that this probability should

1352
00:54:58,960 --> 00:55:00,720
be less than equal to epsilon square so

1353
00:55:00,720 --> 00:55:03,520
given this uh notion of two y's axu we

1354
00:55:03,520 --> 00:55:04,960
have shown that

1355
00:55:04,960 --> 00:55:06,720
you can actually have the same uh

1356
00:55:06,720 --> 00:55:09,359
security bound uh assuming that tau is

1357
00:55:09,359 --> 00:55:11,359
two wise exe hash function

1358
00:55:11,359 --> 00:55:12,079
so

1359
00:55:12,079 --> 00:55:14,160
and it's actually uh quite easy to see

1360
00:55:14,160 --> 00:55:17,119
that uh any uh two wise axu

1361
00:55:17,119 --> 00:55:18,880
any four wise independent hash function

1362
00:55:18,880 --> 00:55:21,440
is actually a 2 by 0xu and in the paper

1363
00:55:21,440 --> 00:55:23,680
we have actually shown that it's not the

1364
00:55:23,680 --> 00:55:25,520
case uh the other way so you can

1365
00:55:25,520 --> 00:55:26,880
actually show some two by the execu hash

1366
00:55:26,880 --> 00:55:28,799
functions which are not wise

1367
00:55:28,799 --> 00:55:30,240
independent

1368
00:55:30,240 --> 00:55:31,119
so

1369
00:55:31,119 --> 00:55:34,720
it is kind of a relaxation

1370
00:55:34,720 --> 00:55:36,880
and our final contribution is

1371
00:55:36,880 --> 00:55:39,520
a variant of pmac called pmac one called

1372
00:55:39,520 --> 00:55:40,799
pmac2

1373
00:55:40,799 --> 00:55:44,559
so in pmac 1 we just have these

1374
00:55:44,559 --> 00:55:47,520
maskings here so what we have observed

1375
00:55:47,520 --> 00:55:49,839
is that if you take a

1376
00:55:49,839 --> 00:55:51,599
instead of taking a simple xor if you

1377
00:55:51,599 --> 00:55:55,040
take position based uh

1378
00:55:55,040 --> 00:55:56,960
multiplication by two uh multiplication

1379
00:55:56,960 --> 00:55:58,880
by the primitive element then you can

1380
00:55:58,880 --> 00:56:01,599
actually achieve uh a better

1381
00:56:01,599 --> 00:56:04,000
uh in terms of uh dependence on the

1382
00:56:04,000 --> 00:56:07,040
length so uh we have been able to show

1383
00:56:07,040 --> 00:56:09,599
that uh the advantage of uh okay there's

1384
00:56:09,599 --> 00:56:12,640
a typo here this should be p mac two but

1385
00:56:12,640 --> 00:56:14,559
uh

1386
00:56:14,559 --> 00:56:16,000
so what we have been able to show is

1387
00:56:16,000 --> 00:56:18,400
that uh the advantage is uh

1388
00:56:18,400 --> 00:56:20,640
q square plus sigma by two to the n plus

1389
00:56:20,640 --> 00:56:24,799
mu where this mu term is uh you can uh

1390
00:56:24,799 --> 00:56:26,960
uh like for different uh restrictions on

1391
00:56:26,960 --> 00:56:29,599
l you can uh get uh length independence

1392
00:56:29,599 --> 00:56:32,160
so if length is less than 2 to the n by

1393
00:56:32,160 --> 00:56:32,960
4

1394
00:56:32,960 --> 00:56:35,040
then the bound is q over 2 to the n by 2

1395
00:56:35,040 --> 00:56:37,280
and this term dominates

1396
00:56:37,280 --> 00:56:39,920
in this region and beyond that we can

1397
00:56:39,920 --> 00:56:43,119
get sigma over sigma to the 3 by 2 by 2

1398
00:56:43,119 --> 00:56:46,240
to the n kind of form

1399
00:56:46,240 --> 00:56:48,559
so just to

1400
00:56:48,559 --> 00:56:49,520
show a

1401
00:56:49,520 --> 00:56:51,520
graphical representation so if you just

1402
00:56:51,520 --> 00:56:56,079
uh plot all the dominating terms of the

1403
00:56:56,160 --> 00:56:57,280
three different

1404
00:56:57,280 --> 00:56:59,520
construction so pmac and pmac one uh

1405
00:56:59,520 --> 00:57:00,559
they have

1406
00:57:00,559 --> 00:57:01,760
uh

1407
00:57:01,760 --> 00:57:02,720
a

1408
00:57:02,720 --> 00:57:04,559
dominating term of q square l by two to

1409
00:57:04,559 --> 00:57:05,520
the n

1410
00:57:05,520 --> 00:57:07,920
p max two uh has q over two to the n by

1411
00:57:07,920 --> 00:57:10,400
two and p mac3 uh is uh another

1412
00:57:10,400 --> 00:57:12,720
construction by naito

1413
00:57:12,720 --> 00:57:14,960
which was which he proposed after we

1414
00:57:14,960 --> 00:57:16,559
identified this flaw

1415
00:57:16,559 --> 00:57:19,599
uh that achieves q square by 2 to the n

1416
00:57:19,599 --> 00:57:20,480
bound

1417
00:57:20,480 --> 00:57:24,960
so it can you can clearly see that this

1418
00:57:24,960 --> 00:57:26,720
the green line uh the one corresponding

1419
00:57:26,720 --> 00:57:28,000
to p mac2 it

1420
00:57:28,000 --> 00:57:30,559
it performs better than uh the blue one

1421
00:57:30,559 --> 00:57:32,480
uh for p mac and p mach one uh within

1422
00:57:32,480 --> 00:57:34,640
this range uh from two to the ten to two

1423
00:57:34,640 --> 00:57:35,440
to the

1424
00:57:35,440 --> 00:57:37,920
uh thirty uh

1425
00:57:37,920 --> 00:57:39,599
uh

1426
00:57:39,599 --> 00:57:41,280
messaging

1427
00:57:41,280 --> 00:57:43,599
so uh

1428
00:57:43,599 --> 00:57:46,000
and this graph is computed for uh

1429
00:57:46,000 --> 00:57:48,319
assuming that the advantage

1430
00:57:48,319 --> 00:57:50,079
or the safety margin that we want is 2

1431
00:57:50,079 --> 00:57:53,640
to the minus 10.

1432
00:57:54,160 --> 00:57:56,319
uh so in conclusion uh in the paper we

1433
00:57:56,319 --> 00:57:58,079
have shown a flaw in the proof of

1434
00:57:58,079 --> 00:57:59,680
security of npmac

1435
00:57:59,680 --> 00:58:01,760
uh and we have given a reformulation of

1436
00:58:01,760 --> 00:58:03,280
its security based on an equivalent

1437
00:58:03,280 --> 00:58:04,400
problem for

1438
00:58:04,400 --> 00:58:05,680
binary fields

1439
00:58:05,680 --> 00:58:07,359
and uh

1440
00:58:07,359 --> 00:58:10,079
so uh as a consequence of our result uh

1441
00:58:10,079 --> 00:58:12,720
the security proof of npmic is still an

1442
00:58:12,720 --> 00:58:14,480
open problem and uh

1443
00:58:14,480 --> 00:58:16,559
we believe that uh

1444
00:58:16,559 --> 00:58:18,400
it's uh

1445
00:58:18,400 --> 00:58:20,319
the proving the security will be at

1446
00:58:20,319 --> 00:58:21,920
least as hard as proving the tight

1447
00:58:21,920 --> 00:58:24,720
security of pmac one

1448
00:58:24,720 --> 00:58:26,319
as a second contribution we have shown a

1449
00:58:26,319 --> 00:58:28,000
length independent pr of security bound

1450
00:58:28,000 --> 00:58:30,079
for sp mac

1451
00:58:30,079 --> 00:58:32,000
with a relaxed precondition on the hash

1452
00:58:32,000 --> 00:58:34,079
function on the masking function

1453
00:58:34,079 --> 00:58:36,240
and as a third contribution we have

1454
00:58:36,240 --> 00:58:38,960
given a new construction called pmac2

1455
00:58:38,960 --> 00:58:40,960
which achieves length independent prs

1456
00:58:40,960 --> 00:58:42,319
security bound

1457
00:58:42,319 --> 00:58:44,640
with some restriction on the lens

1458
00:58:44,640 --> 00:58:47,799
thank you

1459
00:58:51,280 --> 00:58:53,599
thanks uh ashwin are there any questions

1460
00:58:53,599 --> 00:58:56,319
in the audience

1461
00:59:00,880 --> 00:59:04,760
are any questions online

1462
00:59:09,040 --> 00:59:12,000
so i actually have one question um

1463
00:59:12,000 --> 00:59:15,200
so pmac2 differs from pmac one in the

1464
00:59:15,200 --> 00:59:16,960
fact that you the checksum has replaced

1465
00:59:16,960 --> 00:59:20,400
so technically you just set the seeded

1466
00:59:20,400 --> 00:59:22,960
uh like polynomial hashing there

1467
00:59:22,960 --> 00:59:24,160
um

1468
00:59:24,160 --> 00:59:26,400
yeah in the checksum um do you think

1469
00:59:26,400 --> 00:59:29,040
there is another way to to fix

1470
00:59:29,040 --> 00:59:31,920
fix i wouldn't say fix but to make pmac

1471
00:59:31,920 --> 00:59:34,799
one with the powering up approach length

1472
00:59:34,799 --> 00:59:36,000
independent

1473
00:59:36,000 --> 00:59:37,119
at a local

1474
00:59:37,119 --> 00:59:40,000
by a local solution blocks

1475
00:59:40,000 --> 00:59:41,839
instead of doing it um polynomial

1476
00:59:41,839 --> 00:59:43,200
hashing

1477
00:59:43,200 --> 00:59:45,599
yeah i mean even the security of pmac

1478
00:59:45,599 --> 00:59:47,520
one is uh still not

1479
00:59:47,520 --> 00:59:49,440
clear like we are still not sure whether

1480
00:59:49,440 --> 00:59:52,319
it's uh just q square l or whether we

1481
00:59:52,319 --> 00:59:54,160
can improve into q square

1482
00:59:54,160 --> 00:59:54,960
so

1483
00:59:54,960 --> 00:59:56,240
i mean

1484
00:59:56,240 --> 00:59:58,000
i mean just proving the security of p

1485
00:59:58,000 --> 00:59:59,520
mag one uh

1486
00:59:59,520 --> 01:00:02,240
probably another solution but

1487
01:00:02,240 --> 01:00:03,839
okay yeah i mean so you're basically

1488
01:00:03,839 --> 01:00:05,520
saying that you think it might be

1489
01:00:05,520 --> 01:00:07,839
possible that p mag1 is already length

1490
01:00:07,839 --> 01:00:09,520
independent but we simply cannot prove

1491
01:00:09,520 --> 01:00:12,319
it yeah i mean proving it will require i

1492
01:00:12,319 --> 01:00:15,119
guess to solve a really hard problem on

1493
01:00:15,119 --> 01:00:17,680
uh binary i guess

1494
01:00:17,680 --> 01:00:18,400
like

1495
01:00:18,400 --> 01:00:20,160
uh basically we have to show something

1496
01:00:20,160 --> 01:00:23,200
like a two by three property uh on

1497
01:00:23,200 --> 01:00:24,960
uh

1498
01:00:24,960 --> 01:00:26,559
yes

1499
01:00:26,559 --> 01:00:29,839
yes yes

1500
01:00:31,680 --> 01:00:33,839
okay so your suggestion is that we

1501
01:00:33,839 --> 01:00:35,040
improve our

1502
01:00:35,040 --> 01:00:37,520
proof skills

1503
01:00:37,520 --> 01:00:40,079
um hey yes never mind

1504
01:00:40,079 --> 01:00:42,799
i mean yes this approach that we have i

1505
01:00:42,799 --> 01:00:43,839
guess

1506
01:00:43,839 --> 01:00:46,799
that seems to be the most natural

1507
01:00:46,799 --> 01:00:47,680
okay

1508
01:00:47,680 --> 01:00:48,720
thank you

1509
01:00:48,720 --> 01:00:51,280
if there are no other questions

1510
01:00:51,280 --> 01:00:53,520
let's uh thank ashwin and all the other

1511
01:00:53,520 --> 01:00:55,599
speakers and also tatsu for being online

1512
01:00:55,599 --> 01:00:59,839
chair and let's thank everyone again

1513
01:01:02,640 --> 01:01:04,400
then we go for a coffee break and then

1514
01:01:04,400 --> 01:01:06,640
half

