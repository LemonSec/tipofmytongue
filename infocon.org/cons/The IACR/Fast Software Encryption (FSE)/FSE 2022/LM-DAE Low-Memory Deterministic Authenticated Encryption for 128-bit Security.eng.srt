1
00:00:00,719 --> 00:00:04,960
hi i'm going to talk about lmda uh low

2
00:00:04,960 --> 00:00:06,879
memory databases authenticated

3
00:00:06,879 --> 00:00:08,320
encryption with

4
00:00:08,320 --> 00:00:09,360
wanted

5
00:00:09,360 --> 00:00:12,559
security i'm using knighto and decision

6
00:00:12,559 --> 00:00:14,920
to work with you sasaki and target

7
00:00:14,920 --> 00:00:17,760
scholar this is the summary of our

8
00:00:17,760 --> 00:00:19,760
results to obtain a low memory

9
00:00:19,760 --> 00:00:22,320
deterministic authentication action with

10
00:00:22,320 --> 00:00:25,359
one that is security we design a new tbc

11
00:00:25,359 --> 00:00:28,480
based da mode lta

12
00:00:28,480 --> 00:00:30,560
lndi has

13
00:00:30,560 --> 00:00:33,680
two np state and achieves the

14
00:00:33,680 --> 00:00:36,160
innovative data security when using an

15
00:00:36,160 --> 00:00:37,840
end with tbc

16
00:00:37,840 --> 00:00:39,840
due to the battery bound for internal

17
00:00:39,840 --> 00:00:43,040
state size the set size is optimal

18
00:00:43,040 --> 00:00:46,399
and lmda is designed to have no trick

19
00:00:46,399 --> 00:00:47,840
schedule inverse

20
00:00:47,840 --> 00:00:50,800
and so reducing hardware cost

21
00:00:50,800 --> 00:00:53,680
mobile lmgae ensures low memory for

22
00:00:53,680 --> 00:00:55,920
threshold implementation

23
00:00:55,920 --> 00:00:58,879
or ti which is a side child attack

24
00:00:58,879 --> 00:01:00,160
quantum measure

25
00:01:00,160 --> 00:01:03,120
then we design a new tbc to be skinny

26
00:01:03,120 --> 00:01:05,760
three skinny is a variant of skinny

27
00:01:05,760 --> 00:01:08,720
where are three bit tweak space is added

28
00:01:08,720 --> 00:01:12,400
in order to meet the lmd structure and

29
00:01:12,400 --> 00:01:14,560
whisking is designed to minimize the

30
00:01:14,560 --> 00:01:17,600
implementation cost of the key schedule

31
00:01:17,600 --> 00:01:19,920
impulse

32
00:01:19,920 --> 00:01:23,439
and combining lmda with twiskini we

33
00:01:23,439 --> 00:01:27,119
obtain a low memory dae with 128 bit

34
00:01:27,119 --> 00:01:28,640
security

35
00:01:28,640 --> 00:01:30,479
finally we give a hardware

36
00:01:30,479 --> 00:01:33,360
implementation of our dae

37
00:01:33,360 --> 00:01:37,360
and so we compare our dae with state of

38
00:01:37,360 --> 00:01:40,000
gbc based on north based authentic

39
00:01:40,000 --> 00:01:43,680
actions php and pv birth

40
00:01:43,680 --> 00:01:46,079
the memory sizes of these

41
00:01:46,079 --> 00:01:48,240
schemes are the same as

42
00:01:48,240 --> 00:01:52,640
rda but since the six key tweaky inverse

43
00:01:52,640 --> 00:01:54,880
cost is small

44
00:01:54,880 --> 00:01:59,280
the harder size of rda is fewer than the

45
00:01:59,280 --> 00:02:01,840
those existing schemes

46
00:02:01,840 --> 00:02:02,960
and for

47
00:02:02,960 --> 00:02:05,119
threshold implementation the higher size

48
00:02:05,119 --> 00:02:08,720
of our scheme is fewer than php

49
00:02:08,720 --> 00:02:10,959
i'd like to first talk about the

50
00:02:10,959 --> 00:02:13,120
background of our research

51
00:02:13,120 --> 00:02:15,280
lightweight clock photography has been a

52
00:02:15,280 --> 00:02:17,840
hot topic in cryptography for more than

53
00:02:17,840 --> 00:02:20,560
a decade the motivation is to design

54
00:02:20,560 --> 00:02:22,720
cryptographic algorithms that achieve

55
00:02:22,720 --> 00:02:25,840
efficient performances and provide data

56
00:02:25,840 --> 00:02:27,200
security for

57
00:02:27,200 --> 00:02:29,920
resource constraint devices lightweight

58
00:02:29,920 --> 00:02:32,720
includes a lot of meanings such as raw

59
00:02:32,720 --> 00:02:35,599
memory power consumption latency and so

60
00:02:35,599 --> 00:02:36,640
on

61
00:02:36,640 --> 00:02:37,680
the

62
00:02:37,680 --> 00:02:39,840
so the target of this stock is raw

63
00:02:39,840 --> 00:02:42,400
memory memory size determine the overall

64
00:02:42,400 --> 00:02:44,239
height cost in lightweight

65
00:02:44,239 --> 00:02:45,599
implementation

66
00:02:45,599 --> 00:02:48,640
so by reducing memory size the hardware

67
00:02:48,640 --> 00:02:50,800
cost is radius

68
00:02:50,800 --> 00:02:52,800
now nist is holding a lightweight

69
00:02:52,800 --> 00:02:54,720
cryotherapy sensation process for

70
00:02:54,720 --> 00:02:56,720
authenticated exhibition

71
00:02:56,720 --> 00:02:59,599
the stabilization process the demand for

72
00:02:59,599 --> 00:03:03,440
replacing aesthetic skins such as sgcm

73
00:03:03,440 --> 00:03:06,159
and optionally considers

74
00:03:06,159 --> 00:03:08,720
security against side channel attack

75
00:03:08,720 --> 00:03:11,040
news selected 10 finalists which

76
00:03:11,040 --> 00:03:13,599
includes different types of primitives

77
00:03:13,599 --> 00:03:16,879
due to the divine design diversity many

78
00:03:16,879 --> 00:03:19,400
candidates have more than

79
00:03:19,400 --> 00:03:22,959
64-bit security for their size

80
00:03:22,959 --> 00:03:24,720
authenticated encryption provide

81
00:03:24,720 --> 00:03:27,120
confusion essentially on integrity of

82
00:03:27,120 --> 00:03:29,840
data and many schemes are designed to

83
00:03:29,840 --> 00:03:33,840
have nonce as well as key associated on

84
00:03:33,840 --> 00:03:35,040
plaintext

85
00:03:35,040 --> 00:03:37,360
nouns is an input to authenticated

86
00:03:37,360 --> 00:03:39,680
function and

87
00:03:39,680 --> 00:03:42,239
a non-repeated value in encryption

88
00:03:42,239 --> 00:03:43,519
procedure

89
00:03:43,519 --> 00:03:45,599
this property is

90
00:03:45,599 --> 00:03:48,720
offers a scheme with us but beyond

91
00:03:48,720 --> 00:03:52,480
possible security or with low memory and

92
00:03:52,480 --> 00:03:54,560
use of nasty requirement of needs

93
00:03:54,560 --> 00:03:56,239
standardization process

94
00:03:56,239 --> 00:03:58,319
on the other hand there are several

95
00:03:58,319 --> 00:04:01,040
issues or not implementation

96
00:04:01,040 --> 00:04:03,680
for example north is repeated due to

97
00:04:03,680 --> 00:04:05,680
tiny north space

98
00:04:05,680 --> 00:04:08,080
north is fixed to some constant and so

99
00:04:08,080 --> 00:04:08,879
on

100
00:04:08,879 --> 00:04:12,159
in addition north requirements requires

101
00:04:12,159 --> 00:04:15,920
extensive non-volatile memory so

102
00:04:15,920 --> 00:04:17,918
cae solves the

103
00:04:17,918 --> 00:04:20,959
these problems and

104
00:04:20,959 --> 00:04:23,440
they provide confidentially integrity of

105
00:04:23,440 --> 00:04:26,400
data without knowledge

106
00:04:26,400 --> 00:04:28,960
and this talk focuses on design of raw

107
00:04:28,960 --> 00:04:32,479
memory dna with 120 bit security and

108
00:04:32,479 --> 00:04:34,479
additionally consider a side chain

109
00:04:34,479 --> 00:04:36,400
attack quantum measure threshold

110
00:04:36,400 --> 00:04:39,040
implementation or ti

111
00:04:39,040 --> 00:04:41,360
tae takes key

112
00:04:41,360 --> 00:04:43,600
data on plaintext

113
00:04:43,600 --> 00:04:46,240
and in order to ensure the security in

114
00:04:46,240 --> 00:04:49,600
this setting algorithm must ensure that

115
00:04:49,600 --> 00:04:52,320
each bit of the input

116
00:04:52,320 --> 00:04:55,120
must affect whole output

117
00:04:55,120 --> 00:04:57,120
so dae skins

118
00:04:57,120 --> 00:05:00,320
have the subtype structure which is two

119
00:05:00,320 --> 00:05:01,680
parts and

120
00:05:01,680 --> 00:05:04,160
marks the entry structure like this

121
00:05:04,160 --> 00:05:06,000
figure

122
00:05:06,000 --> 00:05:08,160
and several da schemes have been

123
00:05:08,160 --> 00:05:10,400
proposed from these

124
00:05:10,400 --> 00:05:12,880
primitives block cipher trigger block

125
00:05:12,880 --> 00:05:14,960
cipher and publication

126
00:05:14,960 --> 00:05:17,440
so in this slide i explain feature

127
00:05:17,440 --> 00:05:21,360
primitive meets or goal around 28 bits

128
00:05:21,360 --> 00:05:24,720
here raw memory on their ada

129
00:05:24,720 --> 00:05:27,919
in order to achieve 130 bit security the

130
00:05:27,919 --> 00:05:30,000
key size must be

131
00:05:30,000 --> 00:05:33,039
130 bits and the step size must be at

132
00:05:33,039 --> 00:05:36,080
least 256 bits

133
00:05:36,080 --> 00:05:38,400
this size is from the busy attack on the

134
00:05:38,400 --> 00:05:40,080
internal state

135
00:05:40,080 --> 00:05:43,600
for block cipher in order to handle a

136
00:05:43,600 --> 00:05:48,160
256 bit state the block size must be

137
00:05:48,160 --> 00:05:51,199
at least 256 bits on the other hand

138
00:05:51,199 --> 00:05:54,000
block ciphers have been designed to have

139
00:05:54,000 --> 00:05:55,199
at almost

140
00:05:55,199 --> 00:05:58,319
250 128 bits block

141
00:05:58,319 --> 00:06:02,479
and in ti the normal stage size is

142
00:06:02,479 --> 00:06:05,600
totaled while the linear state size is

143
00:06:05,600 --> 00:06:06,960
doubled

144
00:06:06,960 --> 00:06:09,520
since the block size is equal to the

145
00:06:09,520 --> 00:06:11,440
nonlinear size

146
00:06:11,440 --> 00:06:14,479
in ti the state size of block cipher is

147
00:06:14,479 --> 00:06:17,360
large and so block cipher does not meet

148
00:06:17,360 --> 00:06:19,759
our goal

149
00:06:19,759 --> 00:06:21,120
publication

150
00:06:21,120 --> 00:06:24,160
as the block cipher case we need 50 to

151
00:06:24,160 --> 00:06:26,639
56 piece permutation that is no near

152
00:06:26,639 --> 00:06:28,319
size is large

153
00:06:28,319 --> 00:06:31,600
so publication does not meet our goal

154
00:06:31,600 --> 00:06:34,560
the last primitive is or process thicker

155
00:06:34,560 --> 00:06:36,800
block cipher is a extension of block

156
00:06:36,800 --> 00:06:38,080
cipher

157
00:06:38,080 --> 00:06:40,639
the angel input called tweak is

158
00:06:40,639 --> 00:06:42,880
introduced which offers distinct

159
00:06:42,880 --> 00:06:44,479
permutations by

160
00:06:44,479 --> 00:06:47,199
thereby changing the tweak

161
00:06:47,199 --> 00:06:50,639
as block cipher uh single block ciphers

162
00:06:50,639 --> 00:06:53,199
have been designed to have at most

163
00:06:53,199 --> 00:06:56,160
180 bits block but the tweak contributes

164
00:06:56,160 --> 00:06:57,120
to

165
00:06:57,120 --> 00:07:01,520
design bbb secure known north based aids

166
00:07:01,520 --> 00:07:02,880
mobile

167
00:07:02,880 --> 00:07:06,560
cbcs offer ti friendly modes such as

168
00:07:06,560 --> 00:07:09,360
psv and tv plus because the block size

169
00:07:09,360 --> 00:07:12,720
is small and tweak and key are processed

170
00:07:12,720 --> 00:07:14,639
by linear operations

171
00:07:14,639 --> 00:07:18,560
from these features we choose tbc as a

172
00:07:18,560 --> 00:07:21,280
primitive or rda

173
00:07:21,280 --> 00:07:25,199
to design a 130 bit secure on different

174
00:07:25,199 --> 00:07:29,840
radio with 2560 states we need to design

175
00:07:29,840 --> 00:07:33,520
dea mode that for the security level s

176
00:07:33,520 --> 00:07:36,400
the memory size is three speeds and the

177
00:07:36,400 --> 00:07:38,240
block size is

178
00:07:38,240 --> 00:07:39,680
speeds

179
00:07:39,680 --> 00:07:44,160
for existing dvd based daes none of the

180
00:07:44,160 --> 00:07:46,720
is satisfies these

181
00:07:46,720 --> 00:07:48,160
requirements

182
00:07:48,160 --> 00:07:49,599
the first schemes

183
00:07:49,599 --> 00:07:53,520
zae is highly efficient dae that is it

184
00:07:53,520 --> 00:07:55,840
is paralyzable and

185
00:07:55,840 --> 00:07:59,520
has efficient mark structure

186
00:07:59,520 --> 00:08:04,799
but the vae requires a large memory size

187
00:08:05,759 --> 00:08:06,720
and

188
00:08:06,720 --> 00:08:09,840
the rim these two schemes are not space

189
00:08:09,840 --> 00:08:13,479
schemes and achieve envy security in the

190
00:08:13,479 --> 00:08:16,400
non-respecting setting but these schemes

191
00:08:16,400 --> 00:08:19,680
fall into possible security in the dna

192
00:08:19,680 --> 00:08:20,960
settings

193
00:08:20,960 --> 00:08:23,360
where the nas is fixed

194
00:08:23,360 --> 00:08:24,400
so

195
00:08:24,400 --> 00:08:26,240
this skins

196
00:08:26,240 --> 00:08:29,520
also require a large memory

197
00:08:29,520 --> 00:08:33,679
so we design nbc security with 12-bit

198
00:08:33,679 --> 00:08:36,880
state chrome and pro dbc

199
00:08:36,880 --> 00:08:40,240
we first design define a state of this

200
00:08:40,240 --> 00:08:42,479
function shown

201
00:08:42,479 --> 00:08:45,120
here the function is designed to have

202
00:08:45,120 --> 00:08:48,000
only linear operation except for

203
00:08:48,000 --> 00:08:50,240
a thicker block cipher since we consider

204
00:08:50,240 --> 00:08:52,080
lightweight schemes

205
00:08:52,080 --> 00:08:55,600
and in this function firstly twins

206
00:08:55,600 --> 00:08:59,040
state is updated by data blocks d1 and

207
00:08:59,040 --> 00:09:00,480
d2

208
00:09:00,480 --> 00:09:03,839
each block size is at most

209
00:09:03,839 --> 00:09:05,279
n-bit

210
00:09:05,279 --> 00:09:06,720
then

211
00:09:06,720 --> 00:09:08,720
tvc is performed

212
00:09:08,720 --> 00:09:10,320
and finally

213
00:09:10,320 --> 00:09:12,240
the tbc

214
00:09:12,240 --> 00:09:15,519
output and the remaining energy state is

215
00:09:15,519 --> 00:09:17,839
mixed by this linear

216
00:09:17,839 --> 00:09:20,880
function dr is a three bit domain

217
00:09:20,880 --> 00:09:24,080
version so iterating the

218
00:09:24,080 --> 00:09:25,440
this function

219
00:09:25,440 --> 00:09:28,160
offers 12-bit state

220
00:09:28,160 --> 00:09:30,080
schemes

221
00:09:30,080 --> 00:09:33,279
for the speed of the scheme using this

222
00:09:33,279 --> 00:09:36,480
function when the data block side is

223
00:09:36,480 --> 00:09:38,560
through to end bit

224
00:09:38,560 --> 00:09:41,200
the dae becomes fastest but

225
00:09:41,200 --> 00:09:43,120
unfortunately if the

226
00:09:43,120 --> 00:09:46,320
size is greater than and width there is

227
00:09:46,320 --> 00:09:48,880
due to half of an attack

228
00:09:48,880 --> 00:09:50,640
for example this is the one

229
00:09:50,640 --> 00:09:53,360
instantiation of the state of this

230
00:09:53,360 --> 00:09:56,800
function where each data block size is

231
00:09:56,800 --> 00:09:58,880
uh n-bit

232
00:09:58,880 --> 00:10:02,079
if the quotient of this

233
00:10:02,079 --> 00:10:05,920
tbc output occur in this part due to

234
00:10:05,920 --> 00:10:08,720
the difference of this data block

235
00:10:08,720 --> 00:10:09,920
then

236
00:10:09,920 --> 00:10:14,160
since we can set the same difference

237
00:10:14,240 --> 00:10:16,399
to this data block

238
00:10:16,399 --> 00:10:19,040
we can find a quotient

239
00:10:19,040 --> 00:10:21,920
uh in this part

240
00:10:21,920 --> 00:10:22,959
uh

241
00:10:22,959 --> 00:10:26,959
by the two to half of n3 complexity

242
00:10:26,959 --> 00:10:30,079
so the maximum state sub block size

243
00:10:30,079 --> 00:10:35,040
of the state's update function is n-bit

244
00:10:35,040 --> 00:10:37,680
so we design a dae using the state

245
00:10:37,680 --> 00:10:40,320
update function with any data blocks

246
00:10:40,320 --> 00:10:41,279
size

247
00:10:41,279 --> 00:10:44,560
lmda follows the ship type design that

248
00:10:44,560 --> 00:10:48,160
is it has a mac and then x structure

249
00:10:48,160 --> 00:10:50,160
this is the mac part and this is the

250
00:10:50,160 --> 00:10:51,600
english part

251
00:10:51,600 --> 00:10:55,120
the mug part process is associated

252
00:10:55,120 --> 00:10:57,519
a and pretext m

253
00:10:57,519 --> 00:11:00,160
then using the tile

254
00:11:00,160 --> 00:11:02,240
from the mac from this part the

255
00:11:02,240 --> 00:11:04,959
encryption part generates the key stream

256
00:11:04,959 --> 00:11:07,439
rt

257
00:11:07,760 --> 00:11:10,560
to encrypt the plain text each part is

258
00:11:10,560 --> 00:11:13,120
designed by just iterating the state

259
00:11:13,120 --> 00:11:16,000
update function with end bit data block

260
00:11:16,000 --> 00:11:17,480
in

261
00:11:17,480 --> 00:11:20,160
mda the pump station

262
00:11:20,160 --> 00:11:21,440
pi

263
00:11:21,440 --> 00:11:24,320
is introduced in the lower part of each

264
00:11:24,320 --> 00:11:27,120
state update function and we can choose

265
00:11:27,120 --> 00:11:29,920
arbitrary permutation so choosing the

266
00:11:29,920 --> 00:11:32,560
tweaks featuring the publication we

267
00:11:32,560 --> 00:11:34,800
don't need to implement the inverse of

268
00:11:34,800 --> 00:11:37,839
the tweak scheduling which reduces the

269
00:11:37,839 --> 00:11:40,079
implementation cost

270
00:11:40,079 --> 00:11:43,440
regarding security lmd achievement

271
00:11:43,440 --> 00:11:46,800
security when using a amid block tbc the

272
00:11:46,800 --> 00:11:48,720
security is the indistinguishability

273
00:11:48,720 --> 00:11:50,880
between lmda and

274
00:11:50,880 --> 00:11:52,240
ilde

275
00:11:52,240 --> 00:11:54,639
in the real world adversary interacts

276
00:11:54,639 --> 00:11:56,720
with

277
00:11:56,720 --> 00:12:00,079
regression and the degradation of lnda

278
00:12:00,079 --> 00:12:02,959
and in the higher world a busy interacts

279
00:12:02,959 --> 00:12:05,200
with around a bit local and reject

280
00:12:05,200 --> 00:12:06,720
oracle

281
00:12:06,720 --> 00:12:08,160
the

282
00:12:08,160 --> 00:12:10,480
random bit work return the

283
00:12:10,480 --> 00:12:14,000
lambda bits random ciphertext and

284
00:12:14,000 --> 00:12:18,800
list oracle returns the dx symbol

285
00:12:19,440 --> 00:12:20,639
and

286
00:12:20,639 --> 00:12:22,880
here i explain an indication of the

287
00:12:22,880 --> 00:12:26,000
security proof due to the data structure

288
00:12:26,000 --> 00:12:29,680
each tag is random as long as no state

289
00:12:29,680 --> 00:12:30,800
coordinates

290
00:12:30,800 --> 00:12:32,480
in the marked part

291
00:12:32,480 --> 00:12:35,360
so in this case quarterly requires two

292
00:12:35,360 --> 00:12:36,240
to

293
00:12:36,240 --> 00:12:38,560
end integration queries and since the

294
00:12:38,560 --> 00:12:42,160
internal state size of ldae is 12 bits

295
00:12:42,160 --> 00:12:44,480
and the internal state

296
00:12:44,480 --> 00:12:47,120
its part is applied appropriately

297
00:12:47,120 --> 00:12:48,320
updated

298
00:12:48,320 --> 00:12:51,279
so the complexity of the interactive

299
00:12:51,279 --> 00:12:53,839
collision required to do n

300
00:12:53,839 --> 00:12:55,600
query complexity

301
00:12:55,600 --> 00:12:58,320
for each encryption query

302
00:12:58,320 --> 00:13:01,600
this structure ensures that each tbc

303
00:13:01,600 --> 00:13:04,720
input of this part can be seen as a

304
00:13:04,720 --> 00:13:08,079
12-bit random value so no tbc input

305
00:13:08,079 --> 00:13:11,680
collision occur up to 20k complexity

306
00:13:11,680 --> 00:13:12,959
and so

307
00:13:12,959 --> 00:13:15,120
each dbc output to

308
00:13:15,120 --> 00:13:18,880
define a key stream rt campaign as

309
00:13:18,880 --> 00:13:21,040
random party

310
00:13:21,040 --> 00:13:23,279
therefore everyday is

311
00:13:23,279 --> 00:13:26,720
indistinguishable from uh iglda after

312
00:13:26,720 --> 00:13:30,880
today complexity that is the llca

313
00:13:30,880 --> 00:13:34,720
achieved innovate security next i

314
00:13:34,720 --> 00:13:38,240
explain the underlying cbc of rda the

315
00:13:38,240 --> 00:13:41,440
underlying tbc of lmdae needs to support

316
00:13:41,440 --> 00:13:44,880
a one 30-piece block one 20-bit key

317
00:13:44,880 --> 00:13:46,959
rounded bit tweak

318
00:13:46,959 --> 00:13:50,399
and additional 3-bit tweak for the

319
00:13:50,399 --> 00:13:52,240
domain separation

320
00:13:52,240 --> 00:13:54,959
skinny e18

321
00:13:54,959 --> 00:13:56,720
168

322
00:13:56,720 --> 00:13:59,600
256 almost meets the requirement of

323
00:13:59,600 --> 00:14:01,199
lngae

324
00:14:01,199 --> 00:14:03,519
however the tick space is

325
00:14:03,519 --> 00:14:05,120
three bits short

326
00:14:05,120 --> 00:14:08,160
the l6 tweak enabled to convert the

327
00:14:08,160 --> 00:14:10,959
using tb6 to slightly and large the

328
00:14:10,959 --> 00:14:12,720
tweak size

329
00:14:12,720 --> 00:14:13,600
so

330
00:14:13,600 --> 00:14:16,399
we determined to combine these two

331
00:14:16,399 --> 00:14:17,839
approaches

332
00:14:17,839 --> 00:14:21,199
however l6 tweak was designed to

333
00:14:21,199 --> 00:14:24,399
minimize the number of computations by

334
00:14:24,399 --> 00:14:25,760
increasing the

335
00:14:25,760 --> 00:14:28,839
state size which is not suitable for

336
00:14:28,839 --> 00:14:33,040
lmdae hence we modified the llc tweak to

337
00:14:33,040 --> 00:14:33,760
be

338
00:14:33,760 --> 00:14:35,920
hardware friendly

339
00:14:35,920 --> 00:14:39,519
in the original l6 tweak a small tweak

340
00:14:39,519 --> 00:14:40,639
of

341
00:14:40,639 --> 00:14:44,399
ctr1 bits or is first expanded to theta

342
00:14:44,399 --> 00:14:45,600
two bits

343
00:14:45,600 --> 00:14:49,920
then the expanded tweak is injected to

344
00:14:49,920 --> 00:14:53,760
three three bytes of the data state in

345
00:14:53,760 --> 00:14:56,639
every theta four rounds

346
00:14:56,639 --> 00:15:00,399
the tweak expansion require an

347
00:15:00,399 --> 00:15:03,440
increase of the state

348
00:15:03,440 --> 00:15:05,440
also the

349
00:15:05,440 --> 00:15:08,320
sparse tweak injection requires

350
00:15:08,320 --> 00:15:11,360
different operations depending on the

351
00:15:11,360 --> 00:15:13,839
number around the mamba

352
00:15:13,839 --> 00:15:16,079
in our design we don't

353
00:15:16,079 --> 00:15:18,480
expand the small tweak

354
00:15:18,480 --> 00:15:21,040
and in every run

355
00:15:21,040 --> 00:15:26,160
lfsr is applied to the small tweak and

356
00:15:26,160 --> 00:15:29,519
it is injected to the data state

357
00:15:29,519 --> 00:15:31,360
we apply

358
00:15:31,360 --> 00:15:33,839
exactly the same operation for every

359
00:15:33,839 --> 00:15:37,279
round which contributes to lower memory

360
00:15:37,279 --> 00:15:38,639
size

361
00:15:38,639 --> 00:15:41,600
this page shows the round function of t

362
00:15:41,600 --> 00:15:45,360
skinny 128 to 56 most of the run

363
00:15:45,360 --> 00:15:48,560
functions are the same as skinny

364
00:15:48,560 --> 00:15:50,880
with the red blind area

365
00:15:50,880 --> 00:15:53,519
being the elastic twig

366
00:15:53,519 --> 00:15:55,519
uh portions that handle the actual

367
00:15:55,519 --> 00:15:56,959
sleeve tweak

368
00:15:56,959 --> 00:16:00,480
without uh touching the three tweak or

369
00:16:00,480 --> 00:16:03,360
the domain inspiration processed by

370
00:16:03,360 --> 00:16:05,680
the elastic tweak the security of

371
00:16:05,680 --> 00:16:07,600
trifini is the

372
00:16:07,600 --> 00:16:10,720
same as that of skinny the optimal

373
00:16:10,720 --> 00:16:14,160
locations to insert the tweaks was

374
00:16:14,160 --> 00:16:16,079
chosen by evaluating the number of

375
00:16:16,079 --> 00:16:18,079
active x-boxes in

376
00:16:18,079 --> 00:16:21,120
milp for various choices

377
00:16:21,120 --> 00:16:22,399
and also

378
00:16:22,399 --> 00:16:25,600
in this table sufficient active xboxes

379
00:16:25,600 --> 00:16:28,959
are guaranteed

380
00:16:29,600 --> 00:16:32,480
so i explained higher performance of

381
00:16:32,480 --> 00:16:34,959
rtae we made hardware performance

382
00:16:34,959 --> 00:16:37,839
evaluation by implementing lmda with

383
00:16:37,839 --> 00:16:39,360
twiskin

384
00:16:39,360 --> 00:16:40,880
since there is no

385
00:16:40,880 --> 00:16:43,360
comparable tbc based

386
00:16:43,360 --> 00:16:46,240
vae we compare the performance

387
00:16:46,240 --> 00:16:49,279
with non-space masking friendly schemes

388
00:16:49,279 --> 00:16:51,199
using

389
00:16:51,199 --> 00:16:53,759
skinny namely php with

390
00:16:53,759 --> 00:16:57,279
the skinny np brush with skinny e

391
00:16:57,279 --> 00:16:58,079
for

392
00:16:58,079 --> 00:17:00,000
fair comparison we implement the

393
00:17:00,000 --> 00:17:01,759
previous scheme with the same design

394
00:17:01,759 --> 00:17:05,919
policy tools and standard cell rivalry

395
00:17:05,919 --> 00:17:08,079
this figure is the

396
00:17:08,079 --> 00:17:12,240
data path diagram of the lmda circuit

397
00:17:12,240 --> 00:17:14,240
the design follows the passive

398
00:17:14,240 --> 00:17:16,160
architecture command for lightweight

399
00:17:16,160 --> 00:17:18,720
block cycle implementations

400
00:17:18,720 --> 00:17:21,119
the data path is basically

401
00:17:21,119 --> 00:17:23,679
a skinny implementation with a few

402
00:17:23,679 --> 00:17:24,880
additional

403
00:17:24,880 --> 00:17:29,440
gates needed for mdae since we said pi

404
00:17:29,440 --> 00:17:32,880
are the skinny tweaky scheduling we can

405
00:17:32,880 --> 00:17:34,320
eliminate the

406
00:17:34,320 --> 00:17:37,760
circuit for the inverse operation which

407
00:17:37,760 --> 00:17:40,160
was necessary for the conventional

408
00:17:40,160 --> 00:17:41,600
scheme

409
00:17:41,600 --> 00:17:45,120
we also implemented a protected

410
00:17:45,120 --> 00:17:46,880
implementation with threshold

411
00:17:46,880 --> 00:17:49,360
implementation in addition to the round

412
00:17:49,360 --> 00:17:52,640
function that needs three shares we also

413
00:17:52,640 --> 00:17:54,720
protect the tweaky

414
00:17:54,720 --> 00:17:57,039
array storing secret

415
00:17:57,039 --> 00:18:00,080
but we use only two shapes because the

416
00:18:00,080 --> 00:18:03,120
tweaking schedule is linear

417
00:18:03,120 --> 00:18:06,400
so this table summarizes the such area

418
00:18:06,400 --> 00:18:10,240
of lmda and conventional schemes with on

419
00:18:10,240 --> 00:18:13,679
result ti in another equivalent gate

420
00:18:13,679 --> 00:18:15,360
count

421
00:18:15,360 --> 00:18:17,760
this table also shows the total memory

422
00:18:17,760 --> 00:18:20,799
size in bits because it has great impact

423
00:18:20,799 --> 00:18:22,720
on such area

424
00:18:22,720 --> 00:18:26,160
in the results without ti

425
00:18:26,160 --> 00:18:29,039
showing this part lmda achieves a

426
00:18:29,039 --> 00:18:31,280
smaller circuit area

427
00:18:31,280 --> 00:18:34,640
although the mirror size is the same as

428
00:18:34,640 --> 00:18:38,080
in all the schemes this advantage comes

429
00:18:38,080 --> 00:18:41,120
from the tricky implementation we could

430
00:18:41,120 --> 00:18:44,240
eliminate several 120 bits

431
00:18:44,240 --> 00:18:46,400
factors needed for

432
00:18:46,400 --> 00:18:49,200
inverting the tweaky schedule

433
00:18:49,200 --> 00:18:52,240
with dr uh in this part

434
00:18:52,240 --> 00:18:54,799
the non-space piv and

435
00:18:54,799 --> 00:18:57,200
piv parts become advantageous in memory

436
00:18:57,200 --> 00:18:59,600
size because they have a large public

437
00:18:59,600 --> 00:19:02,400
memory that needs no such attack

438
00:19:02,400 --> 00:19:03,520
protection

439
00:19:03,520 --> 00:19:04,480
since

440
00:19:04,480 --> 00:19:07,600
optimization is not available to

441
00:19:07,600 --> 00:19:10,400
dae but everyday size is still

442
00:19:10,400 --> 00:19:13,600
comparable to pip because of the fg

443
00:19:13,600 --> 00:19:15,280
implementation

444
00:19:15,280 --> 00:19:17,280
this is the conclusion my talk we

445
00:19:17,280 --> 00:19:20,480
proposed low memory da with 150 bit

446
00:19:20,480 --> 00:19:24,000
security on ti friendly we designed

447
00:19:24,000 --> 00:19:27,600
tbc-based dae mode lndae

448
00:19:27,600 --> 00:19:31,679
when using an n-bit block tbc lga has

449
00:19:31,679 --> 00:19:35,440
8-bit security and 12-bit internal state

450
00:19:35,440 --> 00:19:38,880
mdae does not require the inverse of

451
00:19:38,880 --> 00:19:39,760
tweak

452
00:19:39,760 --> 00:19:43,280
tweak scheduling of the underlying tbc

453
00:19:43,280 --> 00:19:46,320
we then propose twiskini it is the

454
00:19:46,320 --> 00:19:49,440
variant of skinny where favorite tweak

455
00:19:49,440 --> 00:19:51,520
space is added

456
00:19:51,520 --> 00:19:54,640
it is designed so that the cost of key

457
00:19:54,640 --> 00:19:57,679
scheduling inverse is small

458
00:19:57,679 --> 00:20:00,160
finally we gave a hardware

459
00:20:00,160 --> 00:20:03,760
implementation of our da and compare rda

460
00:20:03,760 --> 00:20:06,400
with the state of the earth cbt-based

461
00:20:06,400 --> 00:20:08,880
unknown space authenticating action

462
00:20:08,880 --> 00:20:12,480
php and pv plus the memory sizes of

463
00:20:12,480 --> 00:20:14,880
these schemes are the same as

464
00:20:14,880 --> 00:20:16,799
rda but

465
00:20:16,799 --> 00:20:20,640
since the tweaky impulse cost is small

466
00:20:20,640 --> 00:20:23,679
without ti the hardware size of rda is

467
00:20:23,679 --> 00:20:25,120
fewer than

468
00:20:25,120 --> 00:20:27,840
those existing schemes and with the eye

469
00:20:27,840 --> 00:20:30,159
the harder size of our scheme is here

470
00:20:30,159 --> 00:20:33,400
than plb

471
00:20:34,240 --> 00:20:38,159
okay for thank you very much

