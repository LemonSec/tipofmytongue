1
00:00:01,280 --> 00:00:03,439
thank you very much for listening to my

2
00:00:03,439 --> 00:00:04,560
talk

3
00:00:04,560 --> 00:00:06,160
i'm xi

4
00:00:06,160 --> 00:00:09,120
and i'd like to talk about our people

5
00:00:09,120 --> 00:00:12,400
comparing that unit and bitwise linear

6
00:00:12,400 --> 00:00:13,920
approximations

7
00:00:13,920 --> 00:00:17,920
of snow 2 and snow 3g

8
00:00:18,160 --> 00:00:21,039
in this paper we reconsider the relation

9
00:00:21,039 --> 00:00:22,880
between the latin interlinear

10
00:00:22,880 --> 00:00:25,760
approximation and the smaller unit and

11
00:00:25,760 --> 00:00:27,439
the bitwise ones

12
00:00:27,439 --> 00:00:30,080
derived from the large unit one showing

13
00:00:30,080 --> 00:00:32,960
that approximations on large unit

14
00:00:32,960 --> 00:00:36,000
alphabets have advantages of all the

15
00:00:36,000 --> 00:00:38,559
smaller units of vitalized ones in

16
00:00:38,559 --> 00:00:41,280
linear attacks

17
00:00:41,280 --> 00:00:43,840
first node two and snow phase we found

18
00:00:43,840 --> 00:00:47,200
many completed examples of 8-bit linear

19
00:00:47,200 --> 00:00:48,640
approximations

20
00:00:48,640 --> 00:00:50,640
including the best ones

21
00:00:50,640 --> 00:00:52,399
with a certain one-dimensional

22
00:00:52,399 --> 00:00:55,440
orbitalized linear approximations have

23
00:00:55,440 --> 00:00:59,039
almost the same as c i as that of the

24
00:00:59,039 --> 00:01:03,039
original 8 by 8 bit length

25
00:01:03,039 --> 00:01:05,920
that is each of these vitalized

26
00:01:05,920 --> 00:01:09,520
approximations is dominated by a single

27
00:01:09,520 --> 00:01:10,840
vitalized

28
00:01:10,840 --> 00:01:14,080
approximation and thus the whole sei is

29
00:01:14,080 --> 00:01:17,280
not essentially larger than the sei the

30
00:01:17,280 --> 00:01:18,560
dominating

31
00:01:18,560 --> 00:01:22,640
single vitalize approximation

32
00:01:23,280 --> 00:01:25,520
since correlation attacks can be more

33
00:01:25,520 --> 00:01:28,720
efficiently implemented using bitwise

34
00:01:28,720 --> 00:01:31,360
approximations rather than large unit

35
00:01:31,360 --> 00:01:32,640
ones

36
00:01:32,640 --> 00:01:35,520
improvements over the large unit linear

37
00:01:35,520 --> 00:01:37,520
approximation attacks

38
00:01:37,520 --> 00:01:42,320
are possible for snow 2 and snow 3g

39
00:01:42,399 --> 00:01:45,119
for snow 3g we improve the fast

40
00:01:45,119 --> 00:01:47,520
correlation attack by using our new

41
00:01:47,520 --> 00:01:50,159
founder bitwise the linear mask

42
00:01:50,159 --> 00:01:54,040
yielding high correlations

43
00:01:54,479 --> 00:01:59,200
my talk will include these five parts

44
00:01:59,680 --> 00:02:02,479
in the first part i'd like to talk about

45
00:02:02,479 --> 00:02:05,280
the motivation of our research

46
00:02:05,280 --> 00:02:08,080
snow tool and snow 3g are both members

47
00:02:08,080 --> 00:02:10,479
of the snow family stream ciphers

48
00:02:10,479 --> 00:02:12,040
using the classic

49
00:02:12,040 --> 00:02:14,879
rfsr-fsm structure

50
00:02:14,879 --> 00:02:17,360
linear attacks have been widely used to

51
00:02:17,360 --> 00:02:20,239
analyze snow2 and smooth energy

52
00:02:20,239 --> 00:02:22,800
most of which are based on the bitwise

53
00:02:22,800 --> 00:02:25,520
linear approximations

54
00:02:25,520 --> 00:02:28,959
at crypto 2015 strong at all improved

55
00:02:28,959 --> 00:02:31,760
the faster correlation take on snow 2 by

56
00:02:31,760 --> 00:02:34,840
building the two round bytewise linear

57
00:02:34,840 --> 00:02:38,160
approximations for fsm

58
00:02:38,160 --> 00:02:42,239
inspired by this work at fsc 2020 young

59
00:02:42,239 --> 00:02:45,120
adult constructed the three-round

60
00:02:45,120 --> 00:02:48,640
bytewise linear approximations for fsm

61
00:02:48,640 --> 00:02:51,360
of snow 3g and launch a faster

62
00:02:51,360 --> 00:02:54,160
correction attack

63
00:02:54,239 --> 00:02:57,040
these results give the impression that

64
00:02:57,040 --> 00:03:00,480
large unit approximations lead to larger

65
00:03:00,480 --> 00:03:04,319
sei and also to better attacks

66
00:03:04,319 --> 00:03:06,080
so the question is

67
00:03:06,080 --> 00:03:08,239
how do the large unit and the smaller

68
00:03:08,239 --> 00:03:11,200
unit orbitalized linear approximations

69
00:03:11,200 --> 00:03:15,440
work for snow 2 and snow 3g

70
00:03:15,440 --> 00:03:17,200
before describing the main work we've

71
00:03:17,200 --> 00:03:19,840
done i will introduce some concepts used

72
00:03:19,840 --> 00:03:22,319
in this paper

73
00:03:22,319 --> 00:03:24,480
definition 1 describes the correlation

74
00:03:24,480 --> 00:03:27,760
of a boolean function f

75
00:03:28,080 --> 00:03:30,959
correlation is often used to evaluate

76
00:03:30,959 --> 00:03:33,760
the efficiency of b2i's linear

77
00:03:33,760 --> 00:03:38,000
approximations in linear attacks

78
00:03:39,840 --> 00:03:42,080
definition 2 describes the correlation

79
00:03:42,080 --> 00:03:44,799
of an em bacterial blood function

80
00:03:44,799 --> 00:03:49,760
and any given input from the output mask

81
00:03:51,200 --> 00:03:54,239
for an am vectorial blend function

82
00:03:54,239 --> 00:03:56,480
with the definition of the probability

83
00:03:56,480 --> 00:03:59,920
distribution the sei is defined as

84
00:03:59,920 --> 00:04:02,879
definition 3.

85
00:04:03,599 --> 00:04:06,480
rci measures the distance between the

86
00:04:06,480 --> 00:04:09,200
target distribution and the uniform

87
00:04:09,200 --> 00:04:11,360
distribution

88
00:04:11,360 --> 00:04:15,280
especially for m equals 1 the sei of f

89
00:04:15,280 --> 00:04:19,839
is equal to the squared correlation of f

90
00:04:20,720 --> 00:04:24,400
for an nm function f we define fv for

91
00:04:24,400 --> 00:04:27,199
each ampeter non-verbal v

92
00:04:27,199 --> 00:04:31,360
that data f v x equals the inner product

93
00:04:31,360 --> 00:04:34,320
of v and f x

94
00:04:34,320 --> 00:04:37,520
then f can be viewed as an ambient large

95
00:04:37,520 --> 00:04:41,440
unit linear approximation and f v is a

96
00:04:41,440 --> 00:04:44,080
bitwise linear approximation

97
00:04:44,080 --> 00:04:47,280
derived from f

98
00:04:48,240 --> 00:04:51,199
there is a fundamental factor about the

99
00:04:51,199 --> 00:04:54,800
sei of a distribution that is

100
00:04:54,800 --> 00:04:57,680
the sei of a large united linear

101
00:04:57,680 --> 00:05:00,800
approximation is the sum of the squares

102
00:05:00,800 --> 00:05:03,199
of all non-zero vitalized linear

103
00:05:03,199 --> 00:05:04,639
approximations

104
00:05:04,639 --> 00:05:07,039
that are included in the large unit

105
00:05:07,039 --> 00:05:08,479
approximation

106
00:05:08,479 --> 00:05:12,080
as shown in lemma 1

107
00:05:12,479 --> 00:05:14,639
for the sei of the probability

108
00:05:14,639 --> 00:05:16,400
distribution df

109
00:05:16,400 --> 00:05:19,520
we will adopt the simplified notation

110
00:05:19,520 --> 00:05:25,479
that f we denote that df is after

111
00:05:25,680 --> 00:05:28,240
from this fact we derive directly the

112
00:05:28,240 --> 00:05:30,000
relation between a latino nature

113
00:05:30,000 --> 00:05:32,720
approximation and the smaller unit of

114
00:05:32,720 --> 00:05:34,160
vitalized ones

115
00:05:34,160 --> 00:05:36,880
derived from the large unitary one as

116
00:05:36,880 --> 00:05:41,680
shown in property 1 and property 2.

117
00:05:47,520 --> 00:05:49,680
property 1 showed the relation between

118
00:05:49,680 --> 00:05:52,479
different size linear approximations

119
00:05:52,479 --> 00:05:54,800
and the property to show the relation

120
00:05:54,800 --> 00:05:56,479
between the legendary linear

121
00:05:56,479 --> 00:05:59,120
approximation and any beta wise ones

122
00:05:59,120 --> 00:06:01,919
derived from the latent one

123
00:06:01,919 --> 00:06:04,720
suggesting that approximations on larger

124
00:06:04,720 --> 00:06:09,840
nature alphabets lead to larger sei

125
00:06:09,840 --> 00:06:12,800
since the data complexity in the linear

126
00:06:12,800 --> 00:06:16,479
attack is proportional to the value of y

127
00:06:16,479 --> 00:06:18,960
of that f

128
00:06:18,960 --> 00:06:21,680
property 1 and 2 seem to suggest

129
00:06:21,680 --> 00:06:24,160
that the larger the unit the better

130
00:06:24,160 --> 00:06:27,120
complexity result we can get in a linear

131
00:06:27,120 --> 00:06:29,440
attack

132
00:06:30,479 --> 00:06:33,120
next we will introduce the work we've

133
00:06:33,120 --> 00:06:36,400
done the first is about the large unit

134
00:06:36,400 --> 00:06:39,600
and bitwise linear approximations of the

135
00:06:39,600 --> 00:06:41,919
fsm of snow 2.

136
00:06:41,919 --> 00:06:44,639
in this part we will study the bitwise

137
00:06:44,639 --> 00:06:47,039
and bitewise linear approximations

138
00:06:47,039 --> 00:06:49,840
respectively

139
00:06:50,560 --> 00:06:52,560
this finger shows the key stream

140
00:06:52,560 --> 00:06:55,919
generation phase of snow tool

141
00:06:55,919 --> 00:06:59,199
note 2 is with the lfsr and fsm

142
00:06:59,199 --> 00:07:00,720
structure

143
00:07:00,720 --> 00:07:05,360
the fsm consists of two 32-bit registers

144
00:07:05,360 --> 00:07:08,800
namely r1 and r2

145
00:07:08,800 --> 00:07:11,680
the fsm updating and the key stream

146
00:07:11,680 --> 00:07:16,440
output are as shown here

147
00:07:18,319 --> 00:07:19,680
where the

148
00:07:19,680 --> 00:07:22,960
s function s function is a 32-bit to

149
00:07:22,960 --> 00:07:25,280
32-bit mapping

150
00:07:25,280 --> 00:07:27,919
composed of four parallel

151
00:07:27,919 --> 00:07:32,319
aess boxes denoted by sr

152
00:07:32,319 --> 00:07:34,720
followed by the es mixed column

153
00:07:34,720 --> 00:07:38,960
operation denoted by 1.

154
00:07:39,759 --> 00:07:43,199
we first recap on the previous bitwise

155
00:07:43,199 --> 00:07:45,680
linear approximations for

156
00:07:45,680 --> 00:07:49,759
four round fsm of snow 2.

157
00:07:50,720 --> 00:07:54,720
for two rounder fsm the output bit

158
00:07:54,720 --> 00:07:57,120
can be expressed as a function of

159
00:07:57,120 --> 00:07:58,800
internal database

160
00:07:58,800 --> 00:08:02,560
with the variables and the f function

161
00:08:02,560 --> 00:08:03,840
defined

162
00:08:03,840 --> 00:08:06,719
described here

163
00:08:07,520 --> 00:08:10,000
apply the muscles

164
00:08:10,000 --> 00:08:13,440
gamma and lambda to two consecutive

165
00:08:13,440 --> 00:08:14,960
customers

166
00:08:14,960 --> 00:08:17,680
the bitwise linear approximations have

167
00:08:17,680 --> 00:08:20,639
the following form

168
00:08:25,120 --> 00:08:27,919
for this approximation the best three

169
00:08:27,919 --> 00:08:30,720
muscle tubals of gamma lambda are listed

170
00:08:30,720 --> 00:08:33,200
in this table

171
00:08:33,200 --> 00:08:35,760
actually we've done more experiments

172
00:08:35,760 --> 00:08:38,958
recently by taking different masks for

173
00:08:38,958 --> 00:08:41,919
the key stream words and lfsr states

174
00:08:41,919 --> 00:08:43,200
involved

175
00:08:43,200 --> 00:08:45,760
obtain more bitwise linear muscles

176
00:08:45,760 --> 00:08:49,360
building high correlations

177
00:08:50,160 --> 00:08:51,200
next

178
00:08:51,200 --> 00:08:53,680
we recap on the vitalize of

179
00:08:53,680 --> 00:08:58,399
approximation r4 for fsm

180
00:08:58,720 --> 00:09:01,680
the general method is to apply the four

181
00:09:01,680 --> 00:09:04,000
byte masks e and n

182
00:09:04,000 --> 00:09:06,800
through two consecutive histograms by

183
00:09:06,800 --> 00:09:10,399
using multiplications over the es mixed

184
00:09:10,399 --> 00:09:12,959
column field

185
00:09:12,959 --> 00:09:14,160
and then

186
00:09:14,160 --> 00:09:16,560
also enter the only nonlinear

187
00:09:16,560 --> 00:09:19,200
contributions from the rigid task by

188
00:09:19,200 --> 00:09:21,760
decomposing the whole noise into two

189
00:09:21,760 --> 00:09:24,560
sub-noises

190
00:09:29,360 --> 00:09:31,680
accordingly the byte-wise linear

191
00:09:31,680 --> 00:09:34,640
approximations of the same are obtained

192
00:09:34,640 --> 00:09:37,120
as follows

193
00:09:37,120 --> 00:09:39,519
to obtain the sei of the battlewise

194
00:09:39,519 --> 00:09:42,399
linear approximation on any given cnn

195
00:09:42,399 --> 00:09:43,519
mask

196
00:09:43,519 --> 00:09:46,959
we need to compute the scr of n1 and

197
00:09:46,959 --> 00:09:50,000
into respectively

198
00:09:50,000 --> 00:09:52,959
our contribution here is that we provide

199
00:09:52,959 --> 00:09:56,160
two slightly improved algorithms for sci

200
00:09:56,160 --> 00:10:00,640
computations of nu1 and in2

201
00:10:01,279 --> 00:10:03,680
with these algorithms

202
00:10:03,680 --> 00:10:06,160
the sei of the whole noise can be

203
00:10:06,160 --> 00:10:09,519
derived by the convolution of that of n1

204
00:10:09,519 --> 00:10:12,160
and n2

205
00:10:14,399 --> 00:10:17,120
with these two algorithms we've carried

206
00:10:17,120 --> 00:10:19,519
a wide range of research for

207
00:10:19,519 --> 00:10:22,720
for bitewise muscles

208
00:10:22,720 --> 00:10:25,040
one important observation from our

209
00:10:25,040 --> 00:10:28,160
experiments is that the best bitewise

210
00:10:28,160 --> 00:10:30,959
muscle tubal given by zhong is not

211
00:10:30,959 --> 00:10:33,120
optimal

212
00:10:33,120 --> 00:10:36,640
and we we found two more bitewise masks

213
00:10:36,640 --> 00:10:39,760
which give large sei

214
00:10:39,760 --> 00:10:44,279
as shown in the table too

215
00:10:46,240 --> 00:10:49,360
table 1 and table 2 lists the best three

216
00:10:49,360 --> 00:10:52,240
bit wise and byte-wise masks

217
00:10:52,240 --> 00:10:56,160
for the fsm of version 2.

218
00:10:56,320 --> 00:10:59,600
we let ftn denote the byte-wise linear

219
00:10:59,600 --> 00:11:02,240
approximation under the four byte mask

220
00:11:02,240 --> 00:11:03,920
turbo tn

221
00:11:03,920 --> 00:11:06,959
and f gamma lambda did not denote the

222
00:11:06,959 --> 00:11:10,720
bitwise linear approximation with the 32

223
00:11:10,720 --> 00:11:15,079
muscle tubal gamma lambda

224
00:11:16,079 --> 00:11:18,720
for each bitewise and bitwise linear

225
00:11:18,720 --> 00:11:21,600
muscles with the same number

226
00:11:21,600 --> 00:11:24,720
we verified that the first coordinate of

227
00:11:24,720 --> 00:11:28,320
the bitewise mask is exactly the bitwise

228
00:11:28,320 --> 00:11:29,600
mask

229
00:11:29,600 --> 00:11:33,680
and they have the same as ei

230
00:11:33,680 --> 00:11:36,560
as shown here

231
00:11:41,360 --> 00:11:44,160
that is each of these rightwards linear

232
00:11:44,160 --> 00:11:47,279
approximations is dominated by a single

233
00:11:47,279 --> 00:11:49,839
bitwise approximation

234
00:11:49,839 --> 00:11:52,320
in our experiments there are many

235
00:11:52,320 --> 00:11:55,440
concrete examples of bytewise linear

236
00:11:55,440 --> 00:11:57,519
approximations for the certain

237
00:11:57,519 --> 00:12:00,560
one-dimensional bitwise approximations

238
00:12:00,560 --> 00:12:03,120
have almost the same sei

239
00:12:03,120 --> 00:12:07,360
as that of the original large unit ones

240
00:12:07,360 --> 00:12:09,519
we know that correlation attack can be

241
00:12:09,519 --> 00:12:12,480
more efficiently implemented by using

242
00:12:12,480 --> 00:12:14,880
visualized approximations

243
00:12:14,880 --> 00:12:18,079
improvement over the bitewise attack

244
00:12:18,079 --> 00:12:20,639
is possible for snow tool

245
00:12:20,639 --> 00:12:23,120
actually a visualized fast correlation

246
00:12:23,120 --> 00:12:26,000
tech snow 2 has been mounted by using

247
00:12:26,000 --> 00:12:28,720
multiple bitwise masks as listed in

248
00:12:28,720 --> 00:12:31,440
table 2.

249
00:12:32,320 --> 00:12:35,360
next we describe the bitwise and

250
00:12:35,360 --> 00:12:39,040
vitalize linear applications of fsm of

251
00:12:39,040 --> 00:12:41,760
snow cg

252
00:12:43,120 --> 00:12:46,560
no cg differs from the n2 by introducing

253
00:12:46,560 --> 00:12:47,600
a third

254
00:12:47,600 --> 00:12:51,200
32-bit register to the sm

255
00:12:51,200 --> 00:12:53,839
and a corresponding transformation for

256
00:12:53,839 --> 00:12:55,519
updating this

257
00:12:55,519 --> 00:12:57,279
register

258
00:12:57,279 --> 00:12:58,320
that's

259
00:12:58,320 --> 00:13:01,440
s2 function

260
00:13:03,120 --> 00:13:06,720
the fsm updating and the key stream

261
00:13:06,720 --> 00:13:09,839
output are as shown here

262
00:13:09,839 --> 00:13:14,320
the s2 function is a 32-32

263
00:13:14,320 --> 00:13:15,680
mapping

264
00:13:15,680 --> 00:13:17,120
composed of

265
00:13:17,120 --> 00:13:20,959
4 parallel 8-bit to 8-bit substitutions

266
00:13:20,959 --> 00:13:25,760
followed by the es max column operation

267
00:13:26,880 --> 00:13:28,880
we first described

268
00:13:28,880 --> 00:13:31,040
bitwise linear approximations for

269
00:13:31,040 --> 00:13:34,959
3-round fsm of smooth 3g

270
00:13:34,959 --> 00:13:38,240
similarly for three-round fsm the output

271
00:13:38,240 --> 00:13:41,279
bits can be expressed as a function of

272
00:13:41,279 --> 00:13:43,120
internal database

273
00:13:43,120 --> 00:13:46,240
with the variables and the f function

274
00:13:46,240 --> 00:13:49,839
described here

275
00:13:52,560 --> 00:13:54,720
generally we consider to apply the

276
00:13:54,720 --> 00:13:56,079
linear mass

277
00:13:56,079 --> 00:13:58,880
by gamma and lambda to the key stream

278
00:13:58,880 --> 00:14:01,440
words at three consecutive time

279
00:14:01,440 --> 00:14:04,000
instances respectively

280
00:14:04,000 --> 00:14:06,880
and then also answer the nonlinear

281
00:14:06,880 --> 00:14:09,600
contributions by decomposing the whole

282
00:14:09,600 --> 00:14:12,399
noise into four subnoses

283
00:14:12,399 --> 00:14:17,839
the four subnoses are e1 to e4

284
00:14:22,560 --> 00:14:23,920
accordingly

285
00:14:23,920 --> 00:14:26,480
the bitwise linear approximations have

286
00:14:26,480 --> 00:14:30,199
the following form

287
00:14:30,480 --> 00:14:33,680
and the correlation on any given masses

288
00:14:33,680 --> 00:14:36,880
by gamma lambda is obtained according to

289
00:14:36,880 --> 00:14:39,839
pin up lemma

290
00:14:40,000 --> 00:14:42,560
what we should do is to find the phagoma

291
00:14:42,560 --> 00:14:45,040
lambda thus that the corresponding

292
00:14:45,040 --> 00:14:48,959
pollution is as large as possible

293
00:14:48,959 --> 00:14:51,839
then we need to compute the collisions

294
00:14:51,839 --> 00:14:55,680
of force of noises for given masses

295
00:14:55,680 --> 00:14:57,600
that is we need to compute the

296
00:14:57,600 --> 00:15:03,600
collisions of the noises e1 e2 e3 and e4

297
00:15:05,360 --> 00:15:07,279
first for the computation of the

298
00:15:07,279 --> 00:15:10,639
correlation of e1 and e2

299
00:15:10,639 --> 00:15:14,000
note that e1 and e2 have the same form

300
00:15:14,000 --> 00:15:16,880
but different input and output linear

301
00:15:16,880 --> 00:15:19,360
masks

302
00:15:19,360 --> 00:15:22,000
from the expressions a certain type of

303
00:15:22,000 --> 00:15:27,839
function is derived denoted by g

304
00:15:28,240 --> 00:15:32,959
the literature gd20 has provided

305
00:15:32,959 --> 00:15:36,399
a constant time algorithm for computing

306
00:15:36,399 --> 00:15:41,040
the correlation of g on any given mask

307
00:15:41,040 --> 00:15:44,320
the general idea is to divide the 32-bit

308
00:15:44,320 --> 00:15:47,199
values into four 8-bit values according

309
00:15:47,199 --> 00:15:51,519
to the specific structure of x-box

310
00:15:51,519 --> 00:15:54,160
and then pre-compute and store some

311
00:15:54,160 --> 00:15:57,120
useful matrices independent of the input

312
00:15:57,120 --> 00:15:59,440
and output masses

313
00:15:59,440 --> 00:16:01,839
and finally compute the correlation on

314
00:16:01,839 --> 00:16:05,600
the any given mask by doing some matrix

315
00:16:05,600 --> 00:16:07,040
multiplications

316
00:16:07,040 --> 00:16:11,759
by using the pre-computed matrices

317
00:16:14,079 --> 00:16:16,720
next for the computation of the

318
00:16:16,720 --> 00:16:20,240
correlations of e3 and e4

319
00:16:20,240 --> 00:16:22,959
note that if there is closely related

320
00:16:22,959 --> 00:16:25,360
with the module addition with three

321
00:16:25,360 --> 00:16:26,480
inputs

322
00:16:26,480 --> 00:16:28,880
which can be accurately computed in

323
00:16:28,880 --> 00:16:31,519
constant time by the method in the

324
00:16:31,519 --> 00:16:34,399
literature and w06

325
00:16:34,399 --> 00:16:37,839
by doing 32 matrix multiplications

326
00:16:37,839 --> 00:16:40,720
of small size

327
00:16:40,720 --> 00:16:44,160
we will skip the details

328
00:16:44,399 --> 00:16:47,120
as for the noise e4 the correlation can

329
00:16:47,120 --> 00:16:50,720
be obtained through 4 led lookups

330
00:16:50,720 --> 00:16:52,959
which is of course a constant time

331
00:16:52,959 --> 00:16:55,599
procedure

332
00:16:57,920 --> 00:17:00,720
with these constant time algorithms for

333
00:17:00,720 --> 00:17:03,040
computing the collisions of force of

334
00:17:03,040 --> 00:17:06,000
noises we can carry out a wide range of

335
00:17:06,000 --> 00:17:09,439
search for four federal lambda which

336
00:17:09,439 --> 00:17:12,079
yield high correlations

337
00:17:12,079 --> 00:17:14,640
in this paper we use a such strategy

338
00:17:14,640 --> 00:17:17,039
attempting to find some potential linear

339
00:17:17,039 --> 00:17:19,839
masses based on some correlation of

340
00:17:19,839 --> 00:17:21,760
observations

341
00:17:21,760 --> 00:17:23,119
we will skip

342
00:17:23,119 --> 00:17:27,760
the details but give the search results

343
00:17:28,720 --> 00:17:30,960
following the general procedure of the

344
00:17:30,960 --> 00:17:33,520
first correlation attack we propose an

345
00:17:33,520 --> 00:17:36,400
attack with a linear mask given in the

346
00:17:36,400 --> 00:17:37,440
table

347
00:17:37,440 --> 00:17:38,559
improve

348
00:17:38,559 --> 00:17:41,120
largely the previous results based on

349
00:17:41,120 --> 00:17:45,239
byteva's linear application

350
00:17:47,520 --> 00:17:50,400
next we focus on the byte-wise linear

351
00:17:50,400 --> 00:17:52,559
approximations

352
00:17:52,559 --> 00:17:54,799
the general procedure for building the

353
00:17:54,799 --> 00:17:57,520
byte-wise approximations are similar

354
00:17:57,520 --> 00:17:59,679
with that for building the bitchwise

355
00:17:59,679 --> 00:18:01,280
ones

356
00:18:01,280 --> 00:18:02,320
first

357
00:18:02,320 --> 00:18:06,080
apply the four by two masks qt and

358
00:18:06,080 --> 00:18:08,559
three consecutive key streamers

359
00:18:08,559 --> 00:18:11,679
by using multiplications over the aes

360
00:18:11,679 --> 00:18:15,600
next column field and they can sort out

361
00:18:15,600 --> 00:18:17,760
the non-linear contributions

362
00:18:17,760 --> 00:18:20,080
by decomposing the whole noise into

363
00:18:20,080 --> 00:18:22,480
force of noises

364
00:18:22,480 --> 00:18:27,400
all these noises are 8-bit variables

365
00:18:28,160 --> 00:18:31,280
the sei computation are mostly the same

366
00:18:31,280 --> 00:18:34,879
with that in snow showcase

367
00:18:36,400 --> 00:18:38,799
we will sketch some ideas on how to

368
00:18:38,799 --> 00:18:42,559
compute the above noise distributions

369
00:18:42,559 --> 00:18:43,679
this table

370
00:18:43,679 --> 00:18:47,360
shows the best bytewise math toolbox

371
00:18:47,360 --> 00:18:49,840
we obtained the first three rounds fsm

372
00:18:49,840 --> 00:18:50,559
of

373
00:18:50,559 --> 00:18:53,559
northeast

374
00:18:56,160 --> 00:18:58,960
3 and the table 4 lists the best three

375
00:18:58,960 --> 00:19:01,280
bright ones and the bit wise masks

376
00:19:01,280 --> 00:19:04,320
fourth move 3g

377
00:19:04,320 --> 00:19:06,799
similarly with the snoozeful kiss

378
00:19:06,799 --> 00:19:09,120
for each bitewise and beatrice leaning

379
00:19:09,120 --> 00:19:12,080
mask with the same number we verified

380
00:19:12,080 --> 00:19:14,720
that the first coordinate of the byte

381
00:19:14,720 --> 00:19:16,000
voice mask

382
00:19:16,000 --> 00:19:18,960
is exactly the bitras mask

383
00:19:18,960 --> 00:19:22,720
and the sei of the bitewise mask

384
00:19:22,720 --> 00:19:25,520
is almost equal to the squared

385
00:19:25,520 --> 00:19:27,840
correlation of the corresponding

386
00:19:27,840 --> 00:19:31,520
coordinating bitwise mask

387
00:19:31,520 --> 00:19:34,720
that is each of these rightwards linear

388
00:19:34,720 --> 00:19:36,000
emissions

389
00:19:36,000 --> 00:19:38,640
is dominated by a single bitwise

390
00:19:38,640 --> 00:19:41,600
approximation

391
00:19:41,679 --> 00:19:44,000
there are many such cases in our

392
00:19:44,000 --> 00:19:46,720
experiments

393
00:19:46,720 --> 00:19:48,640
this correlational text can be more

394
00:19:48,640 --> 00:19:50,720
efficiently implemented using vitroids

395
00:19:50,720 --> 00:19:52,000
victoria's

396
00:19:52,000 --> 00:19:53,440
approximations

397
00:19:53,440 --> 00:19:55,760
rather than butterworth's lens

398
00:19:55,760 --> 00:19:58,240
improvements over the backwards linear

399
00:19:58,240 --> 00:20:02,600
opposition attacks are achieved

400
00:20:06,159 --> 00:20:08,320
in this paper we compare the

401
00:20:08,320 --> 00:20:10,400
brightweights and bitwise linear

402
00:20:10,400 --> 00:20:13,760
observations of snow2 and snow 3g

403
00:20:13,760 --> 00:20:17,120
and find many concrete examples of

404
00:20:17,120 --> 00:20:20,080
bytewise linear observations with a

405
00:20:20,080 --> 00:20:22,799
certain bitwise linear observations have

406
00:20:22,799 --> 00:20:23,840
almost

407
00:20:23,840 --> 00:20:27,200
the same sei as that of the original

408
00:20:27,200 --> 00:20:29,280
8-bit ones

409
00:20:29,280 --> 00:20:31,919
that is each of these vitalized

410
00:20:31,919 --> 00:20:34,880
approximations is dominated by a single

411
00:20:34,880 --> 00:20:38,240
bitwise submission

412
00:20:38,240 --> 00:20:40,720
based on our newly found visualize masks

413
00:20:40,720 --> 00:20:43,200
we propose a bitwise fast correlation

414
00:20:43,200 --> 00:20:45,440
attack on snow 3g

415
00:20:45,440 --> 00:20:47,840
slightly improve the previous attack

416
00:20:47,840 --> 00:20:50,080
based on vitalized linear approach

417
00:20:50,080 --> 00:20:52,639
emissions

418
00:20:53,360 --> 00:20:56,080
that's all of my presentation thanks for

419
00:20:56,080 --> 00:20:59,080
listening

