1
00:00:03,199 --> 00:00:04,799
okay so do you hear me do you all see

2
00:00:04,799 --> 00:00:06,720
the slides including online

3
00:00:06,720 --> 00:00:07,680
yes

4
00:00:07,680 --> 00:00:09,120
okay splendid

5
00:00:09,120 --> 00:00:10,000
so

6
00:00:10,000 --> 00:00:11,519
uh before i start

7
00:00:11,519 --> 00:00:13,519
uh i would just like to point out that

8
00:00:13,519 --> 00:00:16,720
uh thank you kevin the

9
00:00:16,720 --> 00:00:18,480
schedule of the ram session is online

10
00:00:18,480 --> 00:00:20,320
and uh i know from a reliable source

11
00:00:20,320 --> 00:00:22,080
that is going to be awesome so

12
00:00:22,080 --> 00:00:24,000
do check it out

13
00:00:24,000 --> 00:00:26,400
uh for now it's a movie time so we

14
00:00:26,400 --> 00:00:28,240
pronounce it moy

15
00:00:28,240 --> 00:00:30,000
uh why did we do movie in the first

16
00:00:30,000 --> 00:00:31,439
place

17
00:00:31,439 --> 00:00:34,079
the context of this work is a

18
00:00:34,079 --> 00:00:36,640
very simple observation uh so integrated

19
00:00:36,640 --> 00:00:39,360
integrated circuits are at the heart of

20
00:00:39,360 --> 00:00:41,360
all electronic devices

21
00:00:41,360 --> 00:00:44,000
and electronic hardware

22
00:00:44,000 --> 00:00:45,680
obviously the hardware that computes

23
00:00:45,680 --> 00:00:46,960
encryption also

24
00:00:46,960 --> 00:00:48,719
but cutting-edge foundries that actually

25
00:00:48,719 --> 00:00:51,520
manufacture these devices are extremely

26
00:00:51,520 --> 00:00:53,840
expensive and most nations do not have

27
00:00:53,840 --> 00:00:56,160
any

28
00:00:56,800 --> 00:00:59,120
as a consequence production is uh pretty

29
00:00:59,120 --> 00:01:01,680
much always outsourced so a company will

30
00:01:01,680 --> 00:01:03,920
design its uh the integrated circuits

31
00:01:03,920 --> 00:01:05,760
that they need

32
00:01:05,760 --> 00:01:06,720
and then they will send the

33
00:01:06,720 --> 00:01:09,439
specification to the foundry and then

34
00:01:09,439 --> 00:01:11,200
in return they will get

35
00:01:11,200 --> 00:01:14,799
the actual physical objects

36
00:01:15,119 --> 00:01:17,759
overall more than 90 percent of all

37
00:01:17,759 --> 00:01:20,080
these integrated circuits are produced

38
00:01:20,080 --> 00:01:22,400
by only 13 foundries

39
00:01:22,400 --> 00:01:23,759
and they are not in 13 different

40
00:01:23,759 --> 00:01:26,759
countries

41
00:01:26,799 --> 00:01:29,280
is there anything we can do to alleviate

42
00:01:29,280 --> 00:01:31,360
the related security risks but at the

43
00:01:31,360 --> 00:01:33,520
primitive level as far as cryptography

44
00:01:33,520 --> 00:01:34,640
is concerned

45
00:01:34,640 --> 00:01:36,159
and obviously since it's the rhetoric

46
00:01:36,159 --> 00:01:37,439
question i ask on the first slide the

47
00:01:37,439 --> 00:01:39,119
answer is yes

48
00:01:39,119 --> 00:01:42,079
but first why do we care

49
00:01:42,079 --> 00:01:43,119
um

50
00:01:43,119 --> 00:01:44,799
so when you outsource the production you

51
00:01:44,799 --> 00:01:47,759
might have uh run into issues if you're

52
00:01:47,759 --> 00:01:49,439
uh the person you outsource it to the

53
00:01:49,439 --> 00:01:51,200
company is dishonest you could have some

54
00:01:51,200 --> 00:01:52,880
counterfeiting they could try to reverse

55
00:01:52,880 --> 00:01:55,200
engineer your specification and they

56
00:01:55,200 --> 00:01:56,799
could also potentially do some malicious

57
00:01:56,799 --> 00:01:58,719
modifications of the circuit and we're

58
00:01:58,719 --> 00:02:01,680
going to focus on the latter here

59
00:02:01,680 --> 00:02:03,280
and in particular what they could do is

60
00:02:03,280 --> 00:02:06,000
insert what we call hardwire trojans uh

61
00:02:06,000 --> 00:02:06,840
into

62
00:02:06,840 --> 00:02:09,199
the into the circuit so it's very good

63
00:02:09,199 --> 00:02:10,080
that

64
00:02:10,080 --> 00:02:12,239
this paper was like in the first

65
00:02:12,239 --> 00:02:14,480
issue of task to be presented here

66
00:02:14,480 --> 00:02:15,840
because trojans are named after the

67
00:02:15,840 --> 00:02:18,319
trojan horse obviously

68
00:02:18,319 --> 00:02:21,040
so hardware trojans uh much like the

69
00:02:21,040 --> 00:02:23,840
trojan horse are inside the device and

70
00:02:23,840 --> 00:02:26,720
then start to behave in an unwanted way

71
00:02:26,720 --> 00:02:28,800
so for a while the it behaves the device

72
00:02:28,800 --> 00:02:30,800
behaves normally but then it gets

73
00:02:30,800 --> 00:02:32,720
triggered and it starts causing some

74
00:02:32,720 --> 00:02:35,280
damage either like in the rich or

75
00:02:35,280 --> 00:02:38,239
physical sense or in a logical way

76
00:02:38,239 --> 00:02:40,160
what could these triggers be it could be

77
00:02:40,160 --> 00:02:41,680
physical conditions like there could be

78
00:02:41,680 --> 00:02:44,080
a sudden temperature spike you could

79
00:02:44,080 --> 00:02:46,080
have a special input

80
00:02:46,080 --> 00:02:47,840
that is that triggers the special

81
00:02:47,840 --> 00:02:49,360
behavior or you could have just a

82
00:02:49,360 --> 00:02:52,640
counter but on input number ten thousand

83
00:02:52,640 --> 00:02:56,160
number ten thousand three do something

84
00:02:56,160 --> 00:02:57,840
and what kind of damage do we talk about

85
00:02:57,840 --> 00:03:00,159
it could just stop functioning or it

86
00:03:00,159 --> 00:03:02,720
could also start doing more fun stuff

87
00:03:02,720 --> 00:03:04,239
like

88
00:03:04,239 --> 00:03:06,239
revealing secret information think uh

89
00:03:06,239 --> 00:03:08,959
key material

90
00:03:09,360 --> 00:03:11,519
what can we do so the counter measures

91
00:03:11,519 --> 00:03:13,360
you can have against hardware trojans

92
00:03:13,360 --> 00:03:16,000
all of them you could try to detect them

93
00:03:16,000 --> 00:03:18,400
by really testing your devices

94
00:03:18,400 --> 00:03:19,840
essentially or doing some side channel

95
00:03:19,840 --> 00:03:21,440
analysis

96
00:03:21,440 --> 00:03:23,840
or you could try to prevent them by

97
00:03:23,840 --> 00:03:26,319
making the insertion of these trojans

98
00:03:26,319 --> 00:03:28,799
more complicated at the manufacturing

99
00:03:28,799 --> 00:03:30,560
stage for instance but none of these

100
00:03:30,560 --> 00:03:32,879
methods is foolproof and they all are

101
00:03:32,879 --> 00:03:36,000
extremely expensive and time-consuming

102
00:03:36,000 --> 00:03:38,480
so instead if what you want to implement

103
00:03:38,480 --> 00:03:40,000
is

104
00:03:40,000 --> 00:03:42,640
an encryption algorithm what we suggest

105
00:03:42,640 --> 00:03:44,879
is based on a previous work by some of

106
00:03:44,879 --> 00:03:47,519
the co-authors is to use

107
00:03:47,519 --> 00:03:49,040
an encryption algorithm with a very

108
00:03:49,040 --> 00:03:50,720
special structure which allows you to do

109
00:03:50,720 --> 00:03:53,519
secret sharing for very cheap so the

110
00:03:53,519 --> 00:03:55,519
idea is that you are going to outsource

111
00:03:55,519 --> 00:03:57,519
these the manufacture of the circuits

112
00:03:57,519 --> 00:04:00,959
computing these l and m functions

113
00:04:00,959 --> 00:04:02,640
and you are going to manufacture on your

114
00:04:02,640 --> 00:04:04,319
own trusted foundry

115
00:04:04,319 --> 00:04:05,200
the

116
00:04:05,200 --> 00:04:07,200
master circuit that only handles the

117
00:04:07,200 --> 00:04:08,560
secret sharing

118
00:04:08,560 --> 00:04:10,319
and if your secret sharing is extremely

119
00:04:10,319 --> 00:04:12,000
simple this master circuit will be

120
00:04:12,000 --> 00:04:15,120
extremely small so manageably expensive

121
00:04:15,120 --> 00:04:17,040
and the heavy computations will be done

122
00:04:17,040 --> 00:04:19,600
then by these chips that you outsourced

123
00:04:19,600 --> 00:04:21,918
and which are cheap as a consequence

124
00:04:21,918 --> 00:04:23,280
so the way it works is that you have

125
00:04:23,280 --> 00:04:25,040
your encryption algorithm which only

126
00:04:25,040 --> 00:04:26,960
uses linear operations and it actually

127
00:04:26,960 --> 00:04:29,440
makes sense bear with me

128
00:04:29,440 --> 00:04:31,040
you do some secret sharing for the first

129
00:04:31,040 --> 00:04:32,720
operation you recombine you do securing

130
00:04:32,720 --> 00:04:34,160
for the second operation you recombine

131
00:04:34,160 --> 00:04:35,759
you do this on several subcircuits and

132
00:04:35,759 --> 00:04:37,199
then you combine with the majority

133
00:04:37,199 --> 00:04:39,120
function you get your ciphertext

134
00:04:39,120 --> 00:04:40,800
what did i mean by using only linear

135
00:04:40,800 --> 00:04:42,560
operations that sounds like an extremely

136
00:04:42,560 --> 00:04:44,400
bad idea but of course we use linear

137
00:04:44,400 --> 00:04:47,040
operations in different structures

138
00:04:47,040 --> 00:04:52,000
so l is linear in z over 2 to the nz

139
00:04:52,000 --> 00:04:53,840
and m is a multiplication by an

140
00:04:53,840 --> 00:04:56,080
invertible binary matrix so it's linear

141
00:04:56,080 --> 00:04:57,600
in f2

142
00:04:57,600 --> 00:05:00,400
to the power n

143
00:05:00,639 --> 00:05:02,000
and then we have a cipher with this

144
00:05:02,000 --> 00:05:03,919
structure so that's moe

145
00:05:03,919 --> 00:05:05,360
multiplication operated encryption

146
00:05:05,360 --> 00:05:07,280
because when you have multiplications

147
00:05:07,280 --> 00:05:09,039
and there is a small subtraction we

148
00:05:09,039 --> 00:05:10,479
don't just use multiplication by three

149
00:05:10,479 --> 00:05:13,360
which is here we also use its inverse so

150
00:05:13,360 --> 00:05:15,680
division by three in some sense

151
00:05:15,680 --> 00:05:18,320
uh because of security analysis reasons

152
00:05:18,320 --> 00:05:19,600
that i'm not going to go into because i

153
00:05:19,600 --> 00:05:21,840
absolutely do not have the time

154
00:05:21,840 --> 00:05:24,320
our security claims are 127 bits of

155
00:05:24,320 --> 00:05:25,759
security because there is a trivial

156
00:05:25,759 --> 00:05:27,600
attack which removes one bit from the

157
00:05:27,600 --> 00:05:29,039
from the master key the block size and

158
00:05:29,039 --> 00:05:31,120
the key size being 128 bits

159
00:05:31,120 --> 00:05:32,880
and we assume that the data is not going

160
00:05:32,880 --> 00:05:35,840
to be more than 264

161
00:05:35,840 --> 00:05:38,800
chosen plain texts because these devices

162
00:05:38,800 --> 00:05:39,919
are not going to have a very high

163
00:05:39,919 --> 00:05:42,000
throughput so assuming the adversary is

164
00:05:42,000 --> 00:05:44,960
going together 2 to the 128 is just

165
00:05:44,960 --> 00:05:47,840
doesn't make sense in our case

166
00:05:47,840 --> 00:05:49,840
just a small glimpse at our analysis of

167
00:05:49,840 --> 00:05:52,000
the multiplication by 3 which is one of

168
00:05:52,000 --> 00:05:53,840
the big parts of the paper when you look

169
00:05:53,840 --> 00:05:55,600
at multiplication by three and then add

170
00:05:55,600 --> 00:05:59,199
a feed forward with the identity the ddt

171
00:05:59,199 --> 00:06:02,400
is a serpent's key triangle

172
00:06:02,400 --> 00:06:04,160
like that's not

173
00:06:04,160 --> 00:06:06,880
it's actually the ddt of this of this

174
00:06:06,880 --> 00:06:08,000
function

175
00:06:08,000 --> 00:06:10,000
um and it looks nicer and nicer as you

176
00:06:10,000 --> 00:06:11,360
grow the

177
00:06:11,360 --> 00:06:13,440
the size of the state and we can

178
00:06:13,440 --> 00:06:14,880
actually prove it also it's also in the

179
00:06:14,880 --> 00:06:17,199
paper

180
00:06:17,680 --> 00:06:19,039
so

181
00:06:19,039 --> 00:06:20,880
our aim was to propose a cipher which

182
00:06:20,880 --> 00:06:22,479
was tailored specifically for trojan

183
00:06:22,479 --> 00:06:24,400
resilient implementation and in fact

184
00:06:24,400 --> 00:06:26,560
again i refer you to the paper we are

185
00:06:26,560 --> 00:06:28,560
competitive in terms of performances for

186
00:06:28,560 --> 00:06:30,479
such implementations

187
00:06:30,479 --> 00:06:33,039
uh as along the way in order to achieve

188
00:06:33,039 --> 00:06:34,639
this we had to make an extremely

189
00:06:34,639 --> 00:06:35,680
thorough

190
00:06:35,680 --> 00:06:37,280
analysis of the properties of the

191
00:06:37,280 --> 00:06:39,120
modular multiplication by a constant and

192
00:06:39,120 --> 00:06:41,520
in particular multiplication by three

193
00:06:41,520 --> 00:06:44,400
in the modular ring

194
00:06:44,479 --> 00:06:46,000
we wonder if there could be other

195
00:06:46,000 --> 00:06:47,680
applications because what we have

196
00:06:47,680 --> 00:06:49,120
essentially is a block cipher that's

197
00:06:49,120 --> 00:06:52,080
extremely suitable for a secret shared

198
00:06:52,080 --> 00:06:54,639
implementation so we had trojans

199
00:06:54,639 --> 00:06:56,319
resilience in mind but there could be

200
00:06:56,319 --> 00:06:57,680
other applications and you'll be very

201
00:06:57,680 --> 00:07:00,319
curious to hear about them

202
00:07:00,319 --> 00:07:01,680
and with this

203
00:07:01,680 --> 00:07:05,120
i will conclude my talk thank you

204
00:07:10,880 --> 00:07:11,759
so

205
00:07:11,759 --> 00:07:13,680
thank you leo

206
00:07:13,680 --> 00:07:15,599
for the nice talk do we have any

207
00:07:15,599 --> 00:07:18,800
questions in the audience

208
00:07:26,000 --> 00:07:26,510
thank you

209
00:07:26,510 --> 00:07:28,560
[Music]

210
00:07:28,560 --> 00:07:32,720
my question is mostly a generalized one

211
00:07:32,720 --> 00:07:35,199
to what extent uh this robot this

212
00:07:35,199 --> 00:07:37,520
encryption will be over uh

213
00:07:37,520 --> 00:07:40,400
for the hardware attacks so

214
00:07:40,400 --> 00:07:42,840
what is the limitation

215
00:07:42,840 --> 00:07:45,440
um i guess it's going too deep so the

216
00:07:45,440 --> 00:07:47,120
question was this question

217
00:07:47,120 --> 00:07:48,879
yeah so the question was about how

218
00:07:48,879 --> 00:07:50,720
robust uh the cipher was going to be

219
00:07:50,720 --> 00:07:52,639
against harder attacks so do you mean

220
00:07:52,639 --> 00:07:53,919
side channel attack so this specifically

221
00:07:53,919 --> 00:07:55,840
is hardware trojans

222
00:07:55,840 --> 00:07:57,280
cycle attacks that's a very good

223
00:07:57,280 --> 00:07:59,440
question i have not

224
00:07:59,440 --> 00:08:01,199
looked at that

225
00:08:01,199 --> 00:08:02,879
and neither have my cultures as far as i

226
00:08:02,879 --> 00:08:04,960
can tell but since we have the secret

227
00:08:04,960 --> 00:08:06,479
share if we implement it really in the

228
00:08:06,479 --> 00:08:08,000
way that we intend so with the secret

229
00:08:08,000 --> 00:08:09,360
sharing

230
00:08:09,360 --> 00:08:11,919
the input of these chips of these sub

231
00:08:11,919 --> 00:08:14,240
chips

232
00:08:14,960 --> 00:08:17,440
the input of l and m will be

233
00:08:17,440 --> 00:08:19,199
statistically independent from secret

234
00:08:19,199 --> 00:08:20,160
data

235
00:08:20,160 --> 00:08:21,599
so if you have a sidechain attack which

236
00:08:21,599 --> 00:08:24,960
targets l or m i don't expect it to work

237
00:08:24,960 --> 00:08:26,479
we have we were essentially doing

238
00:08:26,479 --> 00:08:28,240
masking here

239
00:08:28,240 --> 00:08:30,879
so if you try to attack l or m i think

240
00:08:30,879 --> 00:08:32,640
it's okay but i'm not a side chain

241
00:08:32,640 --> 00:08:34,880
attack expert so

242
00:08:34,880 --> 00:08:36,880
do ask someone who should know would be

243
00:08:36,880 --> 00:08:40,039
my advice

244
00:08:41,760 --> 00:08:46,319
do we have any other quick question

245
00:08:47,279 --> 00:08:52,120
if not so let's thank uh again

246
00:08:56,880 --> 00:08:58,480
now we move to the second talk of the

247
00:08:58,480 --> 00:09:01,480
session

248
00:09:20,320 --> 00:09:23,320
um

249
00:09:37,040 --> 00:09:40,040
sure

250
00:09:54,800 --> 00:09:58,240
so um this work is entitled authors a

251
00:09:58,240 --> 00:10:00,160
low latency prf

252
00:10:00,160 --> 00:10:02,560
it's a work by sibling benic takanori

253
00:10:02,560 --> 00:10:05,119
isobe

254
00:10:15,300 --> 00:10:17,079
[Music]

255
00:10:17,360 --> 00:10:19,360
for the um

256
00:10:19,360 --> 00:10:21,200
so i'll be talking about the slow

257
00:10:21,200 --> 00:10:25,040
latency prf which we call all push

258
00:10:25,200 --> 00:10:29,040
now low latency primitives uh

259
00:10:29,040 --> 00:10:32,399
have various applications like in memory

260
00:10:32,399 --> 00:10:34,399
memory by subscription

261
00:10:34,399 --> 00:10:36,399
encryption of some storage systems like

262
00:10:36,399 --> 00:10:37,600
uh

263
00:10:37,600 --> 00:10:39,440
applications from awesome communication

264
00:10:39,440 --> 00:10:40,240
and

265
00:10:40,240 --> 00:10:42,959
certain industry control systems

266
00:10:42,959 --> 00:10:44,240
now uh

267
00:10:44,240 --> 00:10:46,000
most of the low latency primitives

268
00:10:46,000 --> 00:10:47,120
available in literature are all

269
00:10:47,120 --> 00:10:49,519
invisible block cycles like prince karma

270
00:10:49,519 --> 00:10:50,320
and

271
00:10:50,320 --> 00:10:52,880
mantis for example

272
00:10:52,880 --> 00:10:54,079
so

273
00:10:54,079 --> 00:10:56,560
the question we asked ourselves

274
00:10:56,560 --> 00:10:58,880
in the beginning was whether

275
00:10:58,880 --> 00:11:00,640
invincible primitives are an exclusive

276
00:11:00,640 --> 00:11:02,880
approach for designing low latency

277
00:11:02,880 --> 00:11:05,519
constructs and if not how one would go

278
00:11:05,519 --> 00:11:06,720
about

279
00:11:06,720 --> 00:11:09,760
constructing a non-inversely primitive

280
00:11:09,760 --> 00:11:12,720
so the motivation was as follows

281
00:11:12,720 --> 00:11:14,160
we know that there are several modes of

282
00:11:14,160 --> 00:11:16,880
operation like um

283
00:11:16,880 --> 00:11:19,040
counter mode cmac and gcm that are

284
00:11:19,040 --> 00:11:21,279
essentially inverse free which means

285
00:11:21,279 --> 00:11:23,120
they do not require access to the

286
00:11:23,120 --> 00:11:24,640
decryption module of the block cycle to

287
00:11:24,640 --> 00:11:26,399
operate

288
00:11:26,399 --> 00:11:29,360
and moreover it was proven that uh

289
00:11:29,360 --> 00:11:31,519
if you were to replace uh

290
00:11:31,519 --> 00:11:33,519
block cipher with a prf in certain words

291
00:11:33,519 --> 00:11:35,360
of operation like counter mode then we

292
00:11:35,360 --> 00:11:38,959
can still have uh dvd security

293
00:11:38,959 --> 00:11:40,720
also if you were to replace the block

294
00:11:40,720 --> 00:11:42,720
cycle with the prf in certain modes of

295
00:11:42,720 --> 00:11:44,240
operation like the counter mode then

296
00:11:44,240 --> 00:11:45,360
leave it

297
00:11:45,360 --> 00:11:47,920
all together stop attacks like

298
00:11:47,920 --> 00:11:49,279
those based on missing difference for

299
00:11:49,279 --> 00:11:51,519
example

300
00:11:51,519 --> 00:11:52,320
so

301
00:11:52,320 --> 00:11:54,000
a non-invasive primitive would therefore

302
00:11:54,000 --> 00:11:56,320
be suitable in certain applications so

303
00:11:56,320 --> 00:11:57,360
therefore

304
00:11:57,360 --> 00:12:00,399
we initiated a study on low latency

305
00:12:00,399 --> 00:12:02,800
non-invasive intentions

306
00:12:02,800 --> 00:12:05,839
so the construct we chose to go with was

307
00:12:05,839 --> 00:12:08,880
this it's basically the sum of uh

308
00:12:08,880 --> 00:12:10,720
two block ciphers this branch one and

309
00:12:10,720 --> 00:12:12,320
branch so

310
00:12:12,320 --> 00:12:14,880
branch one and branch two

311
00:12:14,880 --> 00:12:17,839
so um so that's where the total latency

312
00:12:17,839 --> 00:12:19,760
of the circuit would be the maximum of

313
00:12:19,760 --> 00:12:22,480
latencies of branch one and branch two

314
00:12:22,480 --> 00:12:25,839
plus latency ladies and gentlemen

315
00:12:25,839 --> 00:12:28,320
uh so it's uh worthwhile to mention that

316
00:12:28,320 --> 00:12:30,639
it was already proven in 2017 i think

317
00:12:30,639 --> 00:12:32,000
that uh

318
00:12:32,000 --> 00:12:33,920
uh if the block ciphers branch one and

319
00:12:33,920 --> 00:12:36,240
bronze two are secured krp's then uh

320
00:12:36,240 --> 00:12:39,279
this construction obviously a security

321
00:12:39,279 --> 00:12:40,959
security

322
00:12:40,959 --> 00:12:43,279
however we can make sure that even if uh

323
00:12:43,279 --> 00:12:46,000
branch one and branch two are

324
00:12:46,000 --> 00:12:48,880
not strictly secure then two it might be

325
00:12:48,880 --> 00:12:51,120
difficult to mount uh any kilogram

326
00:12:51,120 --> 00:12:53,040
attack on this construction

327
00:12:53,040 --> 00:12:54,800
so we have uh

328
00:12:54,800 --> 00:12:56,320
analyze the security of branch one and

329
00:12:56,320 --> 00:12:58,320
branch two separately as far as we can

330
00:12:58,320 --> 00:12:59,279
see

331
00:12:59,279 --> 00:13:01,519
they are still secure but uh

332
00:13:01,519 --> 00:13:03,040
in order to optimize the latency of the

333
00:13:03,040 --> 00:13:05,600
circuit uh we keep very slim security

334
00:13:05,600 --> 00:13:06,720
margins

335
00:13:06,720 --> 00:13:08,720
uh visually the number of rounds we

336
00:13:08,720 --> 00:13:09,760
think

337
00:13:09,760 --> 00:13:11,519
the construction should be secure at and

338
00:13:11,519 --> 00:13:12,320
the

339
00:13:12,320 --> 00:13:13,839
number of rounds we propose in the

340
00:13:13,839 --> 00:13:16,560
specification

341
00:13:16,959 --> 00:13:18,320
so

342
00:13:18,320 --> 00:13:20,399
branch one and branch two are both 12

343
00:13:20,399 --> 00:13:22,480
round spns

344
00:13:22,480 --> 00:13:23,600
uh

345
00:13:23,600 --> 00:13:24,720
we have

346
00:13:24,720 --> 00:13:27,279
four three different types of rounds

347
00:13:27,279 --> 00:13:29,839
the first four rounds uses a bit level

348
00:13:29,839 --> 00:13:31,200
permutation

349
00:13:31,200 --> 00:13:33,360
uh the next seven rounds is the nibble

350
00:13:33,360 --> 00:13:34,959
permutation and the

351
00:13:34,959 --> 00:13:37,120
last round does not use any

352
00:13:37,120 --> 00:13:39,680
uh linear layer at all

353
00:13:39,680 --> 00:13:42,000
the reason we have three different shift

354
00:13:42,000 --> 00:13:43,279
prototype

355
00:13:43,279 --> 00:13:45,760
permutations is basically for ease of

356
00:13:45,760 --> 00:13:47,279
analysis

357
00:13:47,279 --> 00:13:49,760
so using the bit permutation rounds we

358
00:13:49,760 --> 00:13:51,680
were able to guarantee full diffusion in

359
00:13:51,680 --> 00:13:53,120
two and a half rounds

360
00:13:53,120 --> 00:13:55,199
that is uh two full rounds on the xbox

361
00:13:55,199 --> 00:13:57,519
on the third round

362
00:13:57,519 --> 00:13:59,440
but if you want to continue to use a big

363
00:13:59,440 --> 00:14:01,600
permutation in the entire branch

364
00:14:01,600 --> 00:14:04,000
it would be difficult for us to

365
00:14:04,000 --> 00:14:06,160
come up with any tight lower bounds and

366
00:14:06,160 --> 00:14:08,480
the minimum number of fancy responses

367
00:14:08,480 --> 00:14:10,720
whereas if we used a nibble permutation

368
00:14:10,720 --> 00:14:13,920
layer we were able to guarantee uh

369
00:14:13,920 --> 00:14:15,040
60

370
00:14:15,040 --> 00:14:18,480
activist boxes over eight rounds

371
00:14:18,880 --> 00:14:21,760
so the three different types of linear

372
00:14:21,760 --> 00:14:25,279
layers is just for ease of analysis

373
00:14:25,279 --> 00:14:27,440
uh the s box we use

374
00:14:27,440 --> 00:14:28,160
is

375
00:14:28,160 --> 00:14:31,199
quite lightweight and has a

376
00:14:31,199 --> 00:14:33,120
gate depth of only three or three and a

377
00:14:33,120 --> 00:14:35,440
half gates so that supports the cause of

378
00:14:35,440 --> 00:14:38,079
low latency

379
00:14:38,240 --> 00:14:40,720
uh the mixed column matrix is the same

380
00:14:40,720 --> 00:14:44,639
that we that was used immediately um

381
00:14:44,639 --> 00:14:46,800
and you can see that if

382
00:14:46,800 --> 00:14:48,320
the cell library used to construct the

383
00:14:48,320 --> 00:14:50,959
circuit has a three input xor gate then

384
00:14:50,959 --> 00:14:52,399
this mixed column circuit can

385
00:14:52,399 --> 00:14:54,160
essentially be constructed using a

386
00:14:54,160 --> 00:14:57,800
single gate depth

387
00:14:58,480 --> 00:15:00,720
the

388
00:15:00,800 --> 00:15:02,959
the the left and right branches are

389
00:15:02,959 --> 00:15:06,560
essentially identical except for uh

390
00:15:06,560 --> 00:15:08,079
the bit and the nibble permutations used

391
00:15:08,079 --> 00:15:09,279
in them

392
00:15:09,279 --> 00:15:10,560
uh

393
00:15:10,560 --> 00:15:13,600
and of course

394
00:15:13,600 --> 00:15:15,120
the round constants are different so the

395
00:15:15,120 --> 00:15:17,040
ground constants have been derived from

396
00:15:17,040 --> 00:15:20,160
the binary expansion of the digits of pi

397
00:15:20,160 --> 00:15:22,639
and uh

398
00:15:22,639 --> 00:15:24,839
the key scheduling function is basically

399
00:15:24,839 --> 00:15:27,839
128 big permutations of the masterpiece

400
00:15:27,839 --> 00:15:30,079
so we do not need any gates in the key

401
00:15:30,079 --> 00:15:32,079
scheduling and therefore it does not add

402
00:15:32,079 --> 00:15:34,719
to the latency

403
00:15:35,360 --> 00:15:37,040
so we

404
00:15:37,040 --> 00:15:40,480
benchmarked our design using uh

405
00:15:40,480 --> 00:15:42,720
four different cell libraries and over

406
00:15:42,720 --> 00:15:45,040
here we present the results for

407
00:15:45,040 --> 00:15:47,360
the stm 19 nanometer library uh and we

408
00:15:47,360 --> 00:15:50,560
compare our designs with uh

409
00:15:50,560 --> 00:15:52,240
other low latency primitives like karma

410
00:15:52,240 --> 00:15:54,720
prints some crf's of the quezad family

411
00:15:54,720 --> 00:15:55,759
and the

412
00:15:55,759 --> 00:15:57,120
subterranean you can see both with

413
00:15:57,120 --> 00:16:00,399
respect to secretary and latency

414
00:16:00,399 --> 00:16:02,639
our design performs well

415
00:16:02,639 --> 00:16:05,600
so this is a plot

416
00:16:05,600 --> 00:16:08,720
for area versus latency tradeoff so so

417
00:16:08,720 --> 00:16:11,279
each point in this plot was derived by

418
00:16:11,279 --> 00:16:12,160
uh

419
00:16:12,160 --> 00:16:14,639
instructing the circuit compiler

420
00:16:14,639 --> 00:16:17,360
to output a circuit that has exactly t

421
00:16:17,360 --> 00:16:18,800
and seconds of delay between the inputs

422
00:16:18,800 --> 00:16:20,639
and outputs

423
00:16:20,639 --> 00:16:23,440
for successively lower values of t

424
00:16:23,440 --> 00:16:26,160
and we stopped at the point where uh the

425
00:16:26,160 --> 00:16:28,560
compiler was no longer able to produce a

426
00:16:28,560 --> 00:16:29,759
circuit that met the latency

427
00:16:29,759 --> 00:16:31,040
requirements

428
00:16:31,040 --> 00:16:34,160
so the plot for uh

429
00:16:34,160 --> 00:16:35,680
arthrosis is this red one over here i'm

430
00:16:35,680 --> 00:16:36,639
sorry the

431
00:16:36,639 --> 00:16:38,399
curve is a little uh clustered around

432
00:16:38,399 --> 00:16:41,120
the left because we included this uh

433
00:16:41,120 --> 00:16:44,240
kangaroo 12 1600 prf that was uh that

434
00:16:44,240 --> 00:16:46,959
has a 1600 bit internal state and so

435
00:16:46,959 --> 00:16:51,479
so this plot has considerably large area

436
00:16:51,519 --> 00:16:53,759
so to conclude

437
00:16:53,759 --> 00:16:55,440
our constructions are some of two block

438
00:16:55,440 --> 00:16:57,519
ciphers that are barely secure

439
00:16:57,519 --> 00:16:59,279
but even then we

440
00:16:59,279 --> 00:17:01,120
expect the security arguments to hold

441
00:17:01,120 --> 00:17:03,040
and i invite the leaders to go through

442
00:17:03,040 --> 00:17:04,880
the paper for extensive analysis for

443
00:17:04,880 --> 00:17:06,640
security arguments

444
00:17:06,640 --> 00:17:08,240
and with that

445
00:17:08,240 --> 00:17:11,319
i concluded

446
00:17:18,319 --> 00:17:20,160
thank you for the talk do we have any

447
00:17:20,160 --> 00:17:23,280
questions in the audience

448
00:17:23,280 --> 00:17:26,559
i have time from one quick question

449
00:17:26,559 --> 00:17:30,199
any questions online

450
00:17:35,760 --> 00:17:38,799
if not let's talk somebody again thank

451
00:17:38,799 --> 00:17:40,879
you

452
00:17:45,039 --> 00:17:49,240
next thought will be online

453
00:18:02,480 --> 00:18:03,600
um

454
00:18:03,600 --> 00:18:05,760
to be given by kosai sakamoto are you

455
00:18:05,760 --> 00:18:06,640
here

456
00:18:06,640 --> 00:18:09,520
oh yes i'm here

457
00:18:12,080 --> 00:18:14,880
i can't see my slide

458
00:18:14,880 --> 00:18:16,160
yes

459
00:18:16,160 --> 00:18:18,400
okay

460
00:18:18,559 --> 00:18:20,720
it's a bit small as he said

461
00:18:20,720 --> 00:18:23,039
it's more can you

462
00:18:23,039 --> 00:18:25,360
maybe

463
00:18:25,360 --> 00:18:27,120
maybe you can put it in slideshow or not

464
00:18:27,120 --> 00:18:28,880
full screen or something like that okay

465
00:18:28,880 --> 00:18:32,200
wait a moment

466
00:18:32,730 --> 00:18:38,240
[Music]

467
00:18:50,240 --> 00:18:52,880
is that okay

468
00:18:53,600 --> 00:18:57,039
i don't think it's different

469
00:18:57,039 --> 00:18:58,320
oh

470
00:18:58,320 --> 00:19:00,559
if

471
00:19:01,600 --> 00:19:04,639
wait a moment

472
00:19:09,760 --> 00:19:12,080
yeah uh as the guy don't suggest maybe

473
00:19:12,080 --> 00:19:14,960
share a window instead of the screen

474
00:19:14,960 --> 00:19:17,200
okay

475
00:19:21,360 --> 00:19:24,840
uh is that okay

476
00:19:25,120 --> 00:19:27,360
i guess we'll do with this

477
00:19:27,360 --> 00:19:28,640
um

478
00:19:28,640 --> 00:19:30,640
so

479
00:19:30,640 --> 00:19:32,880
this work is entitled uh rooker an

480
00:19:32,880 --> 00:19:35,360
efficient aes based encryption scheme

481
00:19:35,360 --> 00:19:37,360
for beyond 5g

482
00:19:37,360 --> 00:19:40,640
it is worked by kosei sakamoto fukang

483
00:19:40,640 --> 00:19:43,679
yuto nakano

484
00:19:43,679 --> 00:19:44,559
moto

485
00:19:44,559 --> 00:19:47,600
and takanoli izobe and jose will give

486
00:19:47,600 --> 00:19:49,360
the talk

487
00:19:49,360 --> 00:19:52,559
thank you for the introduction

488
00:19:57,840 --> 00:19:59,840
first of all first of all

489
00:19:59,840 --> 00:20:03,280
let me give the background of our work

490
00:20:03,280 --> 00:20:04,320
as

491
00:20:04,320 --> 00:20:08,080
we know many research about neon 5g or

492
00:20:08,080 --> 00:20:12,399
6c has already started around the world

493
00:20:13,679 --> 00:20:15,600
in 6c era

494
00:20:15,600 --> 00:20:17,280
it is said that the data transmission

495
00:20:17,280 --> 00:20:21,679
speed will reach more than 100 ubps

496
00:20:21,679 --> 00:20:24,480
for the cryptographic algorithms

497
00:20:24,480 --> 00:20:25,840
it means that

498
00:20:25,840 --> 00:20:28,640
we need to increase the encryption speed

499
00:20:28,640 --> 00:20:31,520
to more than 100 gbps

500
00:20:31,520 --> 00:20:33,679
to avoid the

501
00:20:33,679 --> 00:20:35,840
collisions being the bottleneck in the

502
00:20:35,840 --> 00:20:38,240
success system

503
00:20:38,240 --> 00:20:40,159
regarding security

504
00:20:40,159 --> 00:20:42,400
the cryptographic algorithms need to

505
00:20:42,400 --> 00:20:45,520
support 256 bitkey lengths

506
00:20:45,520 --> 00:20:47,840
which is already required in the 5g

507
00:20:47,840 --> 00:20:50,320
system

508
00:20:50,480 --> 00:20:52,159
for the for the requirement of

509
00:20:52,159 --> 00:20:53,919
performance

510
00:20:53,919 --> 00:20:57,039
it can be a big matter because when we

511
00:20:57,039 --> 00:20:59,200
take snobby for example

512
00:20:59,200 --> 00:21:00,840
snobby only

513
00:21:00,840 --> 00:21:06,240
achieves around 40-year bps in aed mode

514
00:21:08,799 --> 00:21:11,120
when we look for other candidates

515
00:21:11,120 --> 00:21:13,520
as the cryptographic colosseums in 6d

516
00:21:13,520 --> 00:21:14,799
system

517
00:21:14,799 --> 00:21:17,919
we found that several dedicated aeds

518
00:21:17,919 --> 00:21:19,039
such as

519
00:21:19,039 --> 00:21:22,000
ace family and charging c46

520
00:21:22,000 --> 00:21:25,200
can be a good choice for 60

521
00:21:25,200 --> 00:21:28,080
aegis and shuffling are both

522
00:21:28,080 --> 00:21:29,600
designed for high performance

523
00:21:29,600 --> 00:21:32,640
applications uh however uh you can see

524
00:21:32,640 --> 00:21:35,280
in this table uh

525
00:21:35,280 --> 00:21:37,280
we can we cannot meet the both

526
00:21:37,280 --> 00:21:40,080
requirements for its performance and

527
00:21:40,080 --> 00:21:45,720
security uh even with these fast aeds

528
00:21:46,640 --> 00:21:49,120
from these backgrounds

529
00:21:49,120 --> 00:21:52,400
in this work we propose a new aes based

530
00:21:52,400 --> 00:21:54,640
aeid named lokka

531
00:21:54,640 --> 00:21:56,799
a locative supports requirement for

532
00:21:56,799 --> 00:21:59,440
performance and security in 6c

533
00:21:59,440 --> 00:22:00,480
that is

534
00:22:00,480 --> 00:22:02,799
achieving the encryption speed of more

535
00:22:02,799 --> 00:22:06,799
than 100 gear bps and supporting the 256

536
00:22:06,799 --> 00:22:08,720
with key ranks

537
00:22:08,720 --> 00:22:11,520
the design of rock is based on

538
00:22:11,520 --> 00:22:13,600
sponge-based construction

539
00:22:13,600 --> 00:22:15,360
like in this figure

540
00:22:15,360 --> 00:22:18,080
which is similar to edges and charging

541
00:22:18,080 --> 00:22:20,559
but more sophisticated

542
00:22:20,559 --> 00:22:24,720
in terms of security and performance

543
00:22:24,720 --> 00:22:28,039
the specification of locker locker has a

544
00:22:28,039 --> 00:22:33,039
256 bit key and 128 bit nas as inputs

545
00:22:33,039 --> 00:22:36,640
and generates 128 tags

546
00:22:36,640 --> 00:22:37,679
uh

547
00:22:37,679 --> 00:22:39,760
you can see more details of the

548
00:22:39,760 --> 00:22:43,360
specification of the rocker in paper

549
00:22:45,360 --> 00:22:49,360
i will describe how to design a fastae

550
00:22:49,360 --> 00:22:52,000
as you saw in the previous slide

551
00:22:52,000 --> 00:22:55,039
the speed of the sponge based a

552
00:22:55,039 --> 00:22:58,000
aed depends on the speed of the around

553
00:22:58,000 --> 00:22:59,120
function

554
00:22:59,120 --> 00:23:01,600
so we first construct the first round

555
00:23:01,600 --> 00:23:04,080
function

556
00:23:04,159 --> 00:23:07,120
to construct the first run function

557
00:23:07,120 --> 00:23:10,799
we only use uh aes ny and xor as

558
00:23:10,799 --> 00:23:12,480
internal operations

559
00:23:12,480 --> 00:23:16,000
both of which can be executed very fast

560
00:23:16,000 --> 00:23:19,840
by this bit of similar operations

561
00:23:20,880 --> 00:23:25,280
among as ny operations we only use aes

562
00:23:25,280 --> 00:23:28,880
bank which conduct one round aes

563
00:23:28,880 --> 00:23:31,600
not the last round

564
00:23:31,600 --> 00:23:34,000
besides we improve the

565
00:23:34,000 --> 00:23:36,640
gene and nucleus construction and method

566
00:23:36,640 --> 00:23:39,120
which is about how to construct an

567
00:23:39,120 --> 00:23:41,919
efficient aes based run function to be

568
00:23:41,919 --> 00:23:45,120
used in aeids

569
00:23:45,120 --> 00:23:48,400
after that we construct the first aed

570
00:23:48,400 --> 00:23:52,080
based on the run function we found

571
00:23:54,000 --> 00:23:55,600
this figure shows a variable

572
00:23:55,600 --> 00:23:58,159
construction of round functions

573
00:23:58,159 --> 00:24:00,960
original cons original construction has

574
00:24:00,960 --> 00:24:02,960
a two improvement from the general

575
00:24:02,960 --> 00:24:06,080
construction of the genealogy

576
00:24:06,080 --> 00:24:08,880
the first one is that we apply a state

577
00:24:08,880 --> 00:24:10,080
permutation

578
00:24:10,080 --> 00:24:12,159
before applying

579
00:24:12,159 --> 00:24:14,880
x1 or ds round

580
00:24:14,880 --> 00:24:16,080
it can be

581
00:24:16,080 --> 00:24:17,840
executed

582
00:24:17,840 --> 00:24:20,240
because we can execute

583
00:24:20,240 --> 00:24:22,799
this state permutation uh without any

584
00:24:22,799 --> 00:24:24,559
schmidt operations

585
00:24:24,559 --> 00:24:28,159
uh the other one is that we apply either

586
00:24:28,159 --> 00:24:30,799
x1 or das round

587
00:24:30,799 --> 00:24:32,480
it can minimize the

588
00:24:32,480 --> 00:24:34,480
critical path of the round function

589
00:24:34,480 --> 00:24:36,960
update

590
00:24:39,600 --> 00:24:41,760
here is a requirement

591
00:24:41,760 --> 00:24:44,480
to find the good parameter a good run

592
00:24:44,480 --> 00:24:47,200
function in terms of performance

593
00:24:47,200 --> 00:24:49,600
the first requirement is the lowest rate

594
00:24:49,600 --> 00:24:52,240
as possible which is proposed by gene

595
00:24:52,240 --> 00:24:54,880
and nikurik and the definition of rate

596
00:24:54,880 --> 00:24:58,000
is shown here

597
00:24:58,000 --> 00:25:01,279
the rate is the most important parameter

598
00:25:01,279 --> 00:25:02,880
to estimate the speed of the run

599
00:25:02,880 --> 00:25:04,799
function

600
00:25:04,799 --> 00:25:08,960
the other requirements are shown here

601
00:25:11,120 --> 00:25:12,960
next

602
00:25:12,960 --> 00:25:15,840
we take two-step approach to find a good

603
00:25:15,840 --> 00:25:18,080
round function in terms of security

604
00:25:18,080 --> 00:25:19,600
uh first

605
00:25:19,600 --> 00:25:21,840
we found the round function uh ensure

606
00:25:21,840 --> 00:25:24,880
128-bit security to the federal attack

607
00:25:24,880 --> 00:25:27,760
based on the internal collision so we

608
00:25:27,760 --> 00:25:30,080
evaluate the lower bound for the number

609
00:25:30,080 --> 00:25:34,559
of active x boxes by the milp and find

610
00:25:34,559 --> 00:25:37,200
the ram function whose lower balance is

611
00:25:37,200 --> 00:25:39,200
more than 22

612
00:25:39,200 --> 00:25:42,320
and then we evaluate diffusion property

613
00:25:42,320 --> 00:25:44,879
among them

614
00:25:45,279 --> 00:25:48,960
as a result we found this one function

615
00:25:48,960 --> 00:25:51,039
and choose it as the run function of

616
00:25:51,039 --> 00:25:53,520
local

617
00:25:54,640 --> 00:25:56,720
here is a comprise of speed of run

618
00:25:56,720 --> 00:25:58,720
functions

619
00:25:58,720 --> 00:25:59,600
so

620
00:25:59,600 --> 00:26:01,760
as you can see in this table so our run

621
00:26:01,760 --> 00:26:04,559
function is fastest among these run

622
00:26:04,559 --> 00:26:07,120
functions

623
00:26:08,480 --> 00:26:11,520
regarding security of locker uh

624
00:26:11,520 --> 00:26:15,760
uh weak frame had 250 256 bit

625
00:26:15,760 --> 00:26:18,400
bit security against ski recovery attack

626
00:26:18,400 --> 00:26:20,240
and 128

627
00:26:20,240 --> 00:26:23,279
28-bit security against distinguishing

628
00:26:23,279 --> 00:26:26,000
and audio attacks and we do not claim

629
00:26:26,000 --> 00:26:28,799
any security uh in the north missiles

630
00:26:28,799 --> 00:26:31,760
related key and non-key settings

631
00:26:31,760 --> 00:26:34,480
you can see more details of our security

632
00:26:34,480 --> 00:26:38,279
evaluation in our paper

633
00:26:38,480 --> 00:26:40,480
uh here is the result of the performance

634
00:26:40,480 --> 00:26:42,880
evaluation on the laptop

635
00:26:42,880 --> 00:26:45,360
as you can see so rocker achieves a very

636
00:26:45,360 --> 00:26:46,720
impressive

637
00:26:46,720 --> 00:26:49,520
encryption speed

638
00:26:50,400 --> 00:26:51,200
and

639
00:26:51,200 --> 00:26:53,840
here is the result on mobile uh similar

640
00:26:53,840 --> 00:26:56,799
to the result on the laptop local such a

641
00:26:56,799 --> 00:27:00,159
very impressive uh encryption speed even

642
00:27:00,159 --> 00:27:03,279
on the mobile

643
00:27:03,520 --> 00:27:06,500
firstly uh i conclude my talk

644
00:27:06,500 --> 00:27:07,760
[Music]

645
00:27:07,760 --> 00:27:09,120
in this work

646
00:27:09,120 --> 00:27:13,039
we presented a new a new aes based aea

647
00:27:13,039 --> 00:27:14,640
named rokka

648
00:27:14,640 --> 00:27:17,039
roka achieves both requirements for

649
00:27:17,039 --> 00:27:19,600
performance and security in 6c

650
00:27:19,600 --> 00:27:21,559
namely supporting

651
00:27:21,559 --> 00:27:24,480
2556 bit key ranks and

652
00:27:24,480 --> 00:27:26,880
achieving the encryption speed of more

653
00:27:26,880 --> 00:27:29,760
than 100 gbps

654
00:27:29,760 --> 00:27:31,520
so that's all of my talk thank you for

655
00:27:31,520 --> 00:27:34,600
your attention

656
00:27:39,520 --> 00:27:42,159
thank you do we have any questions for

657
00:27:42,159 --> 00:27:44,080
cosse

658
00:27:44,080 --> 00:27:47,960
in the audience online

659
00:27:51,440 --> 00:27:54,320
that's a quick question no

660
00:27:54,320 --> 00:27:56,720
people are better

661
00:27:56,720 --> 00:27:59,200
a bit shy this this morning

662
00:27:59,200 --> 00:28:00,480
so i guess that we don't have any

663
00:28:00,480 --> 00:28:03,200
questions in this case uh we thank you

664
00:28:03,200 --> 00:28:05,120
kosai again

665
00:28:05,120 --> 00:28:08,279
thank you

666
00:28:16,159 --> 00:28:19,720
it should be

667
00:28:33,039 --> 00:28:37,320
always go for the old one right

668
00:28:53,200 --> 00:28:55,679
this work is entitled perfect trees

669
00:28:55,679 --> 00:28:57,600
designing energy optimal symmetric

670
00:28:57,600 --> 00:29:00,720
encryption primitives it is by andrea

671
00:29:00,720 --> 00:29:03,360
caforio

672
00:29:06,880 --> 00:29:10,960
and bing chang and uh

673
00:29:11,039 --> 00:29:13,840
yeah thank you very much so

674
00:29:13,840 --> 00:29:16,640
there's a very famous result at fc 2018

675
00:29:16,640 --> 00:29:17,440
that

676
00:29:17,440 --> 00:29:19,600
identified stream ciphers as the most

677
00:29:19,600 --> 00:29:21,919
suitable choice for energy efficient

678
00:29:21,919 --> 00:29:26,159
encryption for larger quantities of data

679
00:29:26,159 --> 00:29:27,840
and in particular among all the

680
00:29:27,840 --> 00:29:29,600
investigated stream ciphers in this work

681
00:29:29,600 --> 00:29:31,440
triggerium was or treatment really

682
00:29:31,440 --> 00:29:33,600
outperformed all other schemes

683
00:29:33,600 --> 00:29:35,760
including supposedly efficient schemes

684
00:29:35,760 --> 00:29:38,720
block ciphers like midori

685
00:29:38,720 --> 00:29:40,240
but still those results were rather

686
00:29:40,240 --> 00:29:42,559
observational and and the comprehensive

687
00:29:42,559 --> 00:29:45,120
energy model for stream ciphers uh

688
00:29:45,120 --> 00:29:47,918
remained at large

689
00:29:48,000 --> 00:29:49,600
so for block ciphers the situation is a

690
00:29:49,600 --> 00:29:51,360
little different so in 2016 banik

691
00:29:51,360 --> 00:29:53,200
devised an energy model for our rounds

692
00:29:53,200 --> 00:29:55,440
on world box ciphers of this quasi

693
00:29:55,440 --> 00:29:57,440
quadratic form where big r is the total

694
00:29:57,440 --> 00:29:59,679
number of rounds in the algorithm and

695
00:29:59,679 --> 00:30:01,840
the coefficients a b and c encode some

696
00:30:01,840 --> 00:30:04,799
circuit specific details

697
00:30:04,799 --> 00:30:06,799
so the reason why a heuristic energy

698
00:30:06,799 --> 00:30:08,399
model for stream ciphers is harder to

699
00:30:08,399 --> 00:30:10,000
conceive is due to the high degrees of

700
00:30:10,000 --> 00:30:12,799
the unrolling factor r which enormously

701
00:30:12,799 --> 00:30:14,559
complicates the underlying algebraic

702
00:30:14,559 --> 00:30:15,919
expressions of the state update

703
00:30:15,919 --> 00:30:19,279
functions and does their study

704
00:30:19,279 --> 00:30:20,960
so in this work we devised the first

705
00:30:20,960 --> 00:30:22,880
energy model in the realm of stream

706
00:30:22,880 --> 00:30:23,840
ciphers

707
00:30:23,840 --> 00:30:25,600
achieved through a novel investigation

708
00:30:25,600 --> 00:30:26,960
of trivium

709
00:30:26,960 --> 00:30:29,120
we linked the algebraic topology of the

710
00:30:29,120 --> 00:30:30,640
upstate update function to the

711
00:30:30,640 --> 00:30:32,399
consumptive behavior

712
00:30:32,399 --> 00:30:34,399
and then our model is applicable to a

713
00:30:34,399 --> 00:30:36,480
wide range of string ciphers so

714
00:30:36,480 --> 00:30:37,760
premium-like grain-like and

715
00:30:37,760 --> 00:30:40,720
subterranean-like constructions

716
00:30:40,720 --> 00:30:41,520
so

717
00:30:41,520 --> 00:30:42,960
in the second step we leveraged this

718
00:30:42,960 --> 00:30:44,880
obtained energy model and proposed two

719
00:30:44,880 --> 00:30:47,200
no new energy optimal stream ciphers in

720
00:30:47,200 --> 00:30:48,960
the trivium family that reduced the

721
00:30:48,960 --> 00:30:51,360
energy consumption by up to 25

722
00:30:51,360 --> 00:30:53,039
with respect to the original uh

723
00:30:53,039 --> 00:30:55,840
specification

724
00:30:56,000 --> 00:30:57,279
yeah

725
00:30:57,279 --> 00:30:59,919
so but uh

726
00:31:00,159 --> 00:31:01,600
so more importantly for the first time

727
00:31:01,600 --> 00:31:03,120
it's not possible to design stream

728
00:31:03,120 --> 00:31:05,120
ciphers that are specifically optimized

729
00:31:05,120 --> 00:31:07,679
in terms of energy

730
00:31:07,679 --> 00:31:09,840
so a little refresh from trivium so the

731
00:31:09,840 --> 00:31:12,159
trivium update function uh consists of

732
00:31:12,159 --> 00:31:14,159
three independent logic blocks that are

733
00:31:14,159 --> 00:31:17,600
tapped from a state register of size 288

734
00:31:17,600 --> 00:31:19,440
and for the remainder we just define

735
00:31:19,440 --> 00:31:21,039
each of those

736
00:31:21,039 --> 00:31:24,000
logic blocks as a strand

737
00:31:24,000 --> 00:31:25,120
it's not hard to see that we can

738
00:31:25,120 --> 00:31:27,360
recursively enumerate these strands to

739
00:31:27,360 --> 00:31:29,919
get a tree-like structures

740
00:31:29,919 --> 00:31:32,000
and if we do this for the fully unrolled

741
00:31:32,000 --> 00:31:34,640
cipher for r equals 288

742
00:31:34,640 --> 00:31:36,720
and then synthesize each strand

743
00:31:36,720 --> 00:31:38,320
independently we can measure the power

744
00:31:38,320 --> 00:31:40,480
of each strand

745
00:31:40,480 --> 00:31:42,399
if we do this we get something

746
00:31:42,399 --> 00:31:44,480
surprising so intuitively we would

747
00:31:44,480 --> 00:31:46,720
expect that the power rises

748
00:31:46,720 --> 00:31:48,480
with the unrolling degree because the

749
00:31:48,480 --> 00:31:50,240
underlying circuits get more and more

750
00:31:50,240 --> 00:31:52,000
complicated but this is not really what

751
00:31:52,000 --> 00:31:54,240
happens we see even for high r's there

752
00:31:54,240 --> 00:31:56,640
are these sudden dips in in terms of the

753
00:31:56,640 --> 00:31:58,240
power consumption

754
00:31:58,240 --> 00:32:00,720
so when why does this happen

755
00:32:00,720 --> 00:32:02,880
so it happens when the underlying tree

756
00:32:02,880 --> 00:32:04,720
of the strand

757
00:32:04,720 --> 00:32:06,640
is imperfect so we say that a strand

758
00:32:06,640 --> 00:32:08,399
consumes less power if the node it

759
00:32:08,399 --> 00:32:10,559
occupies and the circuit graph houses a

760
00:32:10,559 --> 00:32:12,640
perfect tree

761
00:32:12,640 --> 00:32:15,440
so in baseline trivium there are 339

762
00:32:15,440 --> 00:32:17,679
perfect strand trees and that's roughly

763
00:32:17,679 --> 00:32:20,000
half of all trees

764
00:32:20,000 --> 00:32:22,080
and this raises naturally the question

765
00:32:22,080 --> 00:32:23,840
what happens if we alter the tab

766
00:32:23,840 --> 00:32:25,519
positions of trivium and obtain

767
00:32:25,519 --> 00:32:27,760
configuration that yields more perfect

768
00:32:27,760 --> 00:32:29,360
trees

769
00:32:29,360 --> 00:32:31,840
this is what we did so plotted are

770
00:32:31,840 --> 00:32:33,919
several hundred random instances of

771
00:32:33,919 --> 00:32:35,039
trivium

772
00:32:35,039 --> 00:32:37,039
for multiple frequency and we see a

773
00:32:37,039 --> 00:32:39,600
clear and strong correlation in terms of

774
00:32:39,600 --> 00:32:41,679
number of perfect trees and their

775
00:32:41,679 --> 00:32:44,960
respective power consumption

776
00:32:45,440 --> 00:32:48,399
so out of all these random constructions

777
00:32:48,399 --> 00:32:50,159
we picked two promising candidates for

778
00:32:50,159 --> 00:32:52,559
energy efficient trivium replacements

779
00:32:52,559 --> 00:32:54,880
the first one is terium lef so this

780
00:32:54,880 --> 00:32:57,919
design features 495 perfect trees

781
00:32:57,919 --> 00:33:00,240
and an equivalent security level

782
00:33:00,240 --> 00:33:01,919
compared to trivium and reduces the

783
00:33:01,919 --> 00:33:04,880
energy consumption by roughly 15 percent

784
00:33:04,880 --> 00:33:07,279
and our second construction trim less

785
00:33:07,279 --> 00:33:10,799
with roughly 600 or 665 trees perfect

786
00:33:10,799 --> 00:33:14,000
trees it uses standard consumption by 25

787
00:33:14,000 --> 00:33:15,120
and

788
00:33:15,120 --> 00:33:17,120
at the cost of more in isolation

789
00:33:17,120 --> 00:33:19,120
initialization runs compared to trivium

790
00:33:19,120 --> 00:33:21,760
and trillium lef

791
00:33:21,760 --> 00:33:23,600
so both of them are currently the most

792
00:33:23,600 --> 00:33:25,600
energy efficient encryption algorithms

793
00:33:25,600 --> 00:33:28,320
known in the literature

794
00:33:28,320 --> 00:33:29,360
so

795
00:33:29,360 --> 00:33:31,200
a little on a side note our model

796
00:33:31,200 --> 00:33:33,120
naturally extends to other existing

797
00:33:33,120 --> 00:33:35,519
trivium like ciphers here i've plotted

798
00:33:35,519 --> 00:33:36,960
some

799
00:33:36,960 --> 00:33:38,799
for existing treatment like ciphers and

800
00:33:38,799 --> 00:33:41,200
then same thing is also true for crane

801
00:33:41,200 --> 00:33:43,279
or subterranean for the subterranean

802
00:33:43,279 --> 00:33:45,519
family of designs

803
00:33:45,519 --> 00:33:47,200
so in retrospect in this paper we

804
00:33:47,200 --> 00:33:48,880
propose the first heuristic energy model

805
00:33:48,880 --> 00:33:51,120
for stream ciphers that is applicable to

806
00:33:51,120 --> 00:33:53,679
a wide range of constructions

807
00:33:53,679 --> 00:33:55,679
uh our model opens the door for future

808
00:33:55,679 --> 00:33:57,279
and energy efficient stream cipher

809
00:33:57,279 --> 00:33:58,960
designs

810
00:33:58,960 --> 00:34:00,720
and i really want to straight stress

811
00:34:00,720 --> 00:34:01,919
here the data consumption of

812
00:34:01,919 --> 00:34:03,840
cryptographic algorithm in hardware is

813
00:34:03,840 --> 00:34:05,440
really a key aspect when it comes to

814
00:34:05,440 --> 00:34:07,279
their integration into low resource

815
00:34:07,279 --> 00:34:08,320
environment

816
00:34:08,320 --> 00:34:09,760
and this is further supported by the

817
00:34:09,760 --> 00:34:11,520
ongoingness lightweight standardization

818
00:34:11,520 --> 00:34:12,800
process in which

819
00:34:12,800 --> 00:34:14,159
energy consumption is one of the

820
00:34:14,159 --> 00:34:15,839
selection criterias

821
00:34:15,839 --> 00:34:19,119
but arguably remains the most obscure

822
00:34:19,119 --> 00:34:21,119
obscure discipline

823
00:34:21,119 --> 00:34:23,040
so in the meantime we have these two

824
00:34:23,040 --> 00:34:24,079
neutral

825
00:34:24,079 --> 00:34:26,079
constructions that reduce the

826
00:34:26,079 --> 00:34:29,199
concept energy consumption by 15 and 25

827
00:34:29,199 --> 00:34:31,359
respectively

828
00:34:31,359 --> 00:34:34,598
thank you

829
00:34:41,040 --> 00:34:43,679
thank you do we have any questions

830
00:34:43,679 --> 00:34:46,918
for anger

831
00:35:01,520 --> 00:35:09,520
[Music]

832
00:35:09,520 --> 00:35:11,280
are you referring to the

833
00:35:11,280 --> 00:35:14,920
the work by maximoff

834
00:35:16,640 --> 00:35:18,480
yes so this is here

835
00:35:18,480 --> 00:35:22,119
yes here is cream

836
00:35:33,930 --> 00:35:39,350
[Music]

837
00:35:42,640 --> 00:35:45,839
in that aspect

838
00:35:49,510 --> 00:35:52,629
[Music]

839
00:35:57,440 --> 00:35:58,400
so we

840
00:35:58,400 --> 00:35:59,599
[Music]

841
00:35:59,599 --> 00:36:01,520
so the question was is uh are our

842
00:36:01,520 --> 00:36:03,200
results like independent of the

843
00:36:03,200 --> 00:36:05,200
underlying hardware or do they depend on

844
00:36:05,200 --> 00:36:07,119
the hardware

845
00:36:07,119 --> 00:36:08,480
but i think what you're referring to is

846
00:36:08,480 --> 00:36:10,880
the cell library so in our paper uh we

847
00:36:10,880 --> 00:36:13,119
repeated those uh

848
00:36:13,119 --> 00:36:14,800
experiments for like a wide range of

849
00:36:14,800 --> 00:36:17,280
cell libraries ranging from very large

850
00:36:17,280 --> 00:36:18,400
uh

851
00:36:18,400 --> 00:36:20,480
very large spacing like 19 other meters

852
00:36:20,480 --> 00:36:22,400
to like small one 50 nanometers are

853
00:36:22,400 --> 00:36:24,560
libraries and the results are

854
00:36:24,560 --> 00:36:27,440
unanimously

855
00:36:33,440 --> 00:36:35,440
do we have any more questions for

856
00:36:35,440 --> 00:36:38,160
online maybe

857
00:36:38,480 --> 00:36:42,640
in this case it's like andrea again

858
00:36:46,880 --> 00:36:52,359
and we now move to another online talk

859
00:36:56,800 --> 00:37:00,150
are you giving by shutting down are you

860
00:37:00,150 --> 00:37:03,320
[Music]

861
00:37:04,160 --> 00:37:05,440
hello

862
00:37:05,440 --> 00:37:08,960
can you hear me

863
00:37:08,960 --> 00:37:10,000
yes

864
00:37:10,000 --> 00:37:11,040
yes

865
00:37:11,040 --> 00:37:13,680
okay okay

866
00:37:13,839 --> 00:37:15,440
we're happy to

867
00:37:15,440 --> 00:37:17,680
there to give you a presentation of our

868
00:37:17,680 --> 00:37:21,118
paper pure capital

869
00:37:21,520 --> 00:37:24,320
in um crypto they implemented a wide

870
00:37:24,320 --> 00:37:27,280
range of symmetrical cryptographic skins

871
00:37:27,280 --> 00:37:29,599
which provide the most desirable

872
00:37:29,599 --> 00:37:32,400
security properties and functionalities

873
00:37:32,400 --> 00:37:34,640
confidential entity integrity and

874
00:37:34,640 --> 00:37:37,520
shoulder randomness we also realized a

875
00:37:37,520 --> 00:37:40,079
protocol called proof of alleviates as a

876
00:37:40,079 --> 00:37:42,560
case study to show how to use the

877
00:37:42,560 --> 00:37:46,560
implemented cryptographic algorithms

878
00:37:46,560 --> 00:37:48,800
you can see the details of plc bangko

879
00:37:48,800 --> 00:37:51,280
bangkong the challenges hard coding

880
00:37:51,280 --> 00:37:53,440
strategies in the video

881
00:37:53,440 --> 00:37:56,000
women focus on the

882
00:37:56,000 --> 00:37:58,720
implementation of the algorithm

883
00:37:58,720 --> 00:38:02,000
algorithm on tuesday

884
00:38:02,000 --> 00:38:03,920
i will show some examples of

885
00:38:03,920 --> 00:38:06,320
implementation the first one is the

886
00:38:06,320 --> 00:38:08,640
substitute sound based one-way function

887
00:38:08,640 --> 00:38:11,440
such one-way function has a parameter a

888
00:38:11,440 --> 00:38:16,440
which consists of your own numbers

889
00:38:18,070 --> 00:38:20,160
[Music]

890
00:38:20,160 --> 00:38:22,880
x the one way function is common

891
00:38:22,880 --> 00:38:24,079
computed

892
00:38:24,079 --> 00:38:26,960
based on following equation

893
00:38:26,960 --> 00:38:28,079
let me

894
00:38:28,079 --> 00:38:30,640
each beta of x is used to determine

895
00:38:30,640 --> 00:38:32,720
whether the corresponding

896
00:38:32,720 --> 00:38:36,160
parameter small ai will be added

897
00:38:36,160 --> 00:38:39,040
where first study is the import

898
00:38:39,040 --> 00:38:42,079
importance of hard coding the parameters

899
00:38:42,079 --> 00:38:45,119
the big a consider the situation that

900
00:38:45,119 --> 00:38:47,280
will initialize the parameter a once

901
00:38:47,280 --> 00:38:51,440
with a separate initialization task but

902
00:38:51,440 --> 00:38:55,440
use it repeatedly across the exclusion

903
00:38:55,440 --> 00:38:59,280
scan cycles however when such a initial

904
00:38:59,280 --> 00:39:01,920
relation task is done the network

905
00:39:01,920 --> 00:39:05,119
attractors are able to modify it to

906
00:39:05,119 --> 00:39:07,839
launch a tag manipulation attack to

907
00:39:07,839 --> 00:39:12,680
recover your pre-image x

908
00:39:14,320 --> 00:39:16,880
and since the la is not small we'll

909
00:39:16,880 --> 00:39:19,920
adapt the hard coding to hardcode the

910
00:39:19,920 --> 00:39:23,280
course statement in involving ai not

911
00:39:23,280 --> 00:39:26,240
that we cannot we can't use the loop

912
00:39:26,240 --> 00:39:28,960
statement anymore due to the hard coding

913
00:39:28,960 --> 00:39:30,480
of a

914
00:39:30,480 --> 00:39:33,920
so we use python to play generator

915
00:39:33,920 --> 00:39:36,000
those concrete hard code

916
00:39:36,000 --> 00:39:40,680
statements like the following figure

917
00:39:42,000 --> 00:39:44,960
and we'll use the similar idea to

918
00:39:44,960 --> 00:39:47,200
realize the shaped rotator

919
00:39:47,200 --> 00:39:50,960
functionalities the left effect

920
00:39:50,960 --> 00:39:54,240
the left figure is a pseudo code for

921
00:39:54,240 --> 00:39:57,040
hard coding and the red figure is the

922
00:39:57,040 --> 00:40:00,400
resulting st codes

923
00:40:01,119 --> 00:40:04,000
in the imitation of present we combine

924
00:40:04,000 --> 00:40:05,760
the operations

925
00:40:05,760 --> 00:40:09,359
in xbox and pbox from the pseudocode of

926
00:40:09,359 --> 00:40:12,079
the present that way implemented

927
00:40:12,079 --> 00:40:13,760
based tags

928
00:40:13,760 --> 00:40:17,760
visualize the xbox and pbox using sync

929
00:40:17,760 --> 00:40:19,440
for instruction

930
00:40:19,440 --> 00:40:22,880
lemony will implement the xbox and p box

931
00:40:22,880 --> 00:40:25,680
together for each nibble of

932
00:40:25,680 --> 00:40:28,800
of all states rather than excluding the

933
00:40:28,800 --> 00:40:32,079
one after another

934
00:40:32,319 --> 00:40:33,920
you can say the hard coding

935
00:40:33,920 --> 00:40:39,400
implementation of sp layer of present

936
00:40:41,440 --> 00:40:44,240
finally we show the benchmark results of

937
00:40:44,240 --> 00:40:46,160
our implementations

938
00:40:46,160 --> 00:40:48,560
we'll use a commercial pure safe from

939
00:40:48,560 --> 00:40:51,280
alan bradley to run the implemented

940
00:40:51,280 --> 00:40:52,560
algorithms

941
00:40:52,560 --> 00:40:54,720
the performance of one way function and

942
00:40:54,720 --> 00:40:56,880
the block ciphers can be found in the

943
00:40:56,880 --> 00:40:59,440
following table

944
00:40:59,440 --> 00:41:01,200
we can say that the

945
00:41:01,200 --> 00:41:03,200
performance of those

946
00:41:03,200 --> 00:41:05,920
algorithm until you say the practical

947
00:41:05,920 --> 00:41:08,240
and all operations only need a few

948
00:41:08,240 --> 00:41:09,839
milliseconds

949
00:41:09,839 --> 00:41:12,800
in particular the encryption of present

950
00:41:12,800 --> 00:41:15,680
is faster than cement that is contrary

951
00:41:15,680 --> 00:41:19,200
to the result on other platform

952
00:41:19,200 --> 00:41:21,599
since the implementation of present can

953
00:41:21,599 --> 00:41:24,880
be better optimized based on bitwise

954
00:41:24,880 --> 00:41:27,680
operations

955
00:41:28,560 --> 00:41:31,040
the performance of jsk and the

956
00:41:31,040 --> 00:41:32,800
corresponding

957
00:41:32,800 --> 00:41:35,119
prf or prgi

958
00:41:35,119 --> 00:41:38,560
are practical as well

959
00:41:38,560 --> 00:41:41,119
however the performers of these hash

960
00:41:41,119 --> 00:41:44,640
functions are not very good on poc since

961
00:41:44,640 --> 00:41:46,839
they require many

962
00:41:46,839 --> 00:41:49,599
automatic operations that are not well

963
00:41:49,599 --> 00:41:52,960
supported until say

964
00:41:52,960 --> 00:41:56,000
all right this is our summary

965
00:41:56,000 --> 00:41:59,119
for more likes or new kinds of attacks

966
00:41:59,119 --> 00:42:01,359
like a tma

967
00:42:01,359 --> 00:42:03,760
purpose the counter measures against the

968
00:42:03,760 --> 00:42:06,880
dna in the implementation

969
00:42:06,880 --> 00:42:09,839
optimize the implementation based on

970
00:42:09,839 --> 00:42:12,960
bitwise operations

971
00:42:12,960 --> 00:42:15,839
urge monk the performers on a commercial

972
00:42:15,839 --> 00:42:18,079
plc

973
00:42:18,079 --> 00:42:19,760
and you can

974
00:42:19,760 --> 00:42:22,400
find a link of the open source library

975
00:42:22,400 --> 00:42:23,599
on the

976
00:42:23,599 --> 00:42:27,040
following website

977
00:42:27,040 --> 00:42:30,040
thanks

978
00:42:37,359 --> 00:42:39,280
thank you for the nice talk

979
00:42:39,280 --> 00:42:43,880
do we have any questions in the audience

980
00:42:44,720 --> 00:42:47,839
um i believe we we skipped the the the

981
00:42:47,839 --> 00:42:49,680
list of authors at the beginning so i

982
00:42:49,680 --> 00:42:52,240
will go through it uh right now so it

983
00:42:52,240 --> 00:42:53,280
was a

984
00:42:53,280 --> 00:42:54,160
uh

985
00:42:54,160 --> 00:42:58,720
a paper by uh chang young cheating bao

986
00:43:05,760 --> 00:43:06,480
so

987
00:43:06,480 --> 00:43:09,599
any questions maybe online

988
00:43:09,599 --> 00:43:10,960
no questions

989
00:43:10,960 --> 00:43:13,760
if not uh maybe i have one which is

990
00:43:13,760 --> 00:43:14,960
maybe a bit

991
00:43:14,960 --> 00:43:17,599
a bit

992
00:43:19,200 --> 00:43:21,919
simplistic but

993
00:43:22,240 --> 00:43:25,040
i i don't believe i've seen an authentic

994
00:43:25,040 --> 00:43:27,839
it is an encryption scheme in your in

995
00:43:27,839 --> 00:43:29,359
your library

996
00:43:29,359 --> 00:43:30,960
do you have one or do you plan to add

997
00:43:30,960 --> 00:43:33,680
one at some point

998
00:43:34,880 --> 00:43:37,880
um

999
00:43:42,000 --> 00:43:45,359
do you want me to repeat the question

1000
00:43:47,520 --> 00:43:49,759
oh

1001
00:43:50,480 --> 00:43:52,400
this is the open

1002
00:43:52,400 --> 00:43:55,359
open source library

1003
00:43:55,359 --> 00:43:57,680
okay

1004
00:43:58,720 --> 00:43:59,599
well

1005
00:43:59,599 --> 00:44:00,880
thank you

1006
00:44:00,880 --> 00:44:01,839
and

1007
00:44:01,839 --> 00:44:03,920
if we have no more questions i guess we

1008
00:44:03,920 --> 00:44:08,680
can just thank the speaker again

1009
00:44:17,599 --> 00:44:21,000
also online

1010
00:44:27,839 --> 00:44:29,359
and we'll begin by

1011
00:44:29,359 --> 00:44:31,040
can you

1012
00:44:31,040 --> 00:44:34,440
are you here

1013
00:44:52,319 --> 00:44:54,720
perfect

1014
00:44:55,920 --> 00:45:00,200
uh yes sorry

1015
00:45:08,079 --> 00:45:09,920
the motivation of this paper is the

1016
00:45:09,920 --> 00:45:12,480
current demand for devices with limited

1017
00:45:12,480 --> 00:45:14,960
resources such as the internet things

1018
00:45:14,960 --> 00:45:17,680
and radio frequency identification tests

1019
00:45:17,680 --> 00:45:19,359
there are many criteria for designing

1020
00:45:19,359 --> 00:45:21,920
language primitives and the most popular

1021
00:45:21,920 --> 00:45:23,520
one should be the gate equivalent

1022
00:45:23,520 --> 00:45:26,319
required to implement a cipher meanwhile

1023
00:45:26,319 --> 00:45:28,880
another criterion latency is also

1024
00:45:28,880 --> 00:45:31,040
crucial and has been attracting more and

1025
00:45:31,040 --> 00:45:32,960
more attention because it plays an

1026
00:45:32,960 --> 00:45:35,520
important role in the lowly energy

1027
00:45:35,520 --> 00:45:38,319
consideration of ciphers therefore this

1028
00:45:38,319 --> 00:45:40,319
paper focuses on the

1029
00:45:40,319 --> 00:45:42,319
focus on the hardware implication of

1030
00:45:42,319 --> 00:45:45,119
linear layers that provide diffusion for

1031
00:45:45,119 --> 00:45:48,400
many create a cryptography primitives

1032
00:45:48,400 --> 00:45:50,640
before introducing a framework we shall

1033
00:45:50,640 --> 00:45:53,920
be clear the matrix metrics that are

1034
00:45:53,920 --> 00:45:56,000
helpful in the purpose solvers to

1035
00:45:56,000 --> 00:45:58,839
optimize the line layers there are two

1036
00:45:58,839 --> 00:46:01,920
metrics that we focus on the first

1037
00:46:01,920 --> 00:46:04,640
geometric is the circuit area it can be

1038
00:46:04,640 --> 00:46:07,359
evaluated by the number of xor

1039
00:46:07,359 --> 00:46:09,760
operations used in the amplitude to

1040
00:46:09,760 --> 00:46:12,560
match a matrices there are three kinds

1041
00:46:12,560 --> 00:46:16,000
of xors and we always use gxr in this

1042
00:46:16,000 --> 00:46:19,520
paper another metric is latency we use

1043
00:46:19,520 --> 00:46:22,880
the depth of the circuit of the matrix

1044
00:46:22,880 --> 00:46:26,160
to compute it in this paper we always

1045
00:46:26,160 --> 00:46:28,160
focus on the minimum depth of the

1046
00:46:28,160 --> 00:46:30,800
circuit and our goal is to search

1047
00:46:30,800 --> 00:46:33,200
the circuit with less number of extra

1048
00:46:33,200 --> 00:46:37,279
operations and the minimum depth

1049
00:46:39,359 --> 00:46:42,640
notation node in our paper for every

1050
00:46:42,640 --> 00:46:45,280
value in the circuit we can associate it

1051
00:46:45,280 --> 00:46:48,240
with a binary vector and the vector can

1052
00:46:48,240 --> 00:46:50,560
be used to compute the depth in our

1053
00:46:50,560 --> 00:46:52,000
framework

1054
00:46:52,000 --> 00:46:56,319
next we propose the backward framework

1055
00:46:56,319 --> 00:46:58,480
formerly the backward framework returns

1056
00:46:58,480 --> 00:46:59,839
a direct

1057
00:46:59,839 --> 00:47:03,200
graph by splitting nodes attractively

1058
00:47:03,200 --> 00:47:05,359
the target nodes are the output values

1059
00:47:05,359 --> 00:47:08,480
of this matrix and the unit nodes are

1060
00:47:08,480 --> 00:47:11,680
the input values of the matrix and the

1061
00:47:11,680 --> 00:47:16,079
indegree of each node is zero or two

1062
00:47:16,079 --> 00:47:19,040
every unit node has the injury zero and

1063
00:47:19,040 --> 00:47:22,960
every non-unit node has injury two and

1064
00:47:22,960 --> 00:47:26,240
can represent them xor operations

1065
00:47:26,240 --> 00:47:28,240
then we deal with two fundamental

1066
00:47:28,240 --> 00:47:29,680
problems

1067
00:47:29,680 --> 00:47:32,079
the first is how to split nodes with

1068
00:47:32,079 --> 00:47:34,800
respect to the minimum depth for example

1069
00:47:34,800 --> 00:47:38,960
how to split y 0 into t t0 and t1 the

1070
00:47:38,960 --> 00:47:41,920
second is how to ensure the output so

1071
00:47:41,920 --> 00:47:44,559
the framework returns can always have

1072
00:47:44,559 --> 00:47:47,599
the minimum depth

1073
00:47:47,920 --> 00:47:50,319
and can help us to execute the splitting

1074
00:47:50,319 --> 00:47:53,520
process and solve the first problem for

1075
00:47:53,520 --> 00:47:57,040
any nodes why we always find two nodes

1076
00:47:57,040 --> 00:48:00,400
with less steps to split y we give an

1077
00:48:00,400 --> 00:48:04,160
example the depth of y is 3 thus the

1078
00:48:04,160 --> 00:48:09,200
depth of a is 2 and the depth of b is 1.

1079
00:48:09,200 --> 00:48:11,920
for solving the second problem we define

1080
00:48:11,920 --> 00:48:14,559
two sets the working set contains the

1081
00:48:14,559 --> 00:48:17,119
nodes that we need to split the

1082
00:48:17,119 --> 00:48:20,160
predecessor set contains the nodes that

1083
00:48:20,160 --> 00:48:23,280
we do not split in this state

1084
00:48:23,280 --> 00:48:25,680
note that the nodes in the predecessor

1085
00:48:25,680 --> 00:48:30,640
nodes a predecessor says can be reused

1086
00:48:32,800 --> 00:48:34,000
in write

1087
00:48:34,000 --> 00:48:36,640
ensures that the output has the minimum

1088
00:48:36,640 --> 00:48:39,119
depth we always blame those in the

1089
00:48:39,119 --> 00:48:42,160
working set and when every node in the

1090
00:48:42,160 --> 00:48:43,599
working set

1091
00:48:43,599 --> 00:48:46,559
is the unit nodes we can finish our

1092
00:48:46,559 --> 00:48:49,559
search

1093
00:48:50,240 --> 00:48:52,240
but we cannot achieve an exhaustive

1094
00:48:52,240 --> 00:48:54,800
search we have to use heuristics the

1095
00:48:54,800 --> 00:48:58,160
idea is to reuse the predecessor nodes

1096
00:48:58,160 --> 00:49:00,000
it can reduce the number of xor

1097
00:49:00,000 --> 00:49:03,000
operations

1098
00:49:06,880 --> 00:49:09,520
and this is an example

1099
00:49:09,520 --> 00:49:12,480
consider metric to be implemented the

1100
00:49:12,480 --> 00:49:15,680
minimum depth is three if we use like bp

1101
00:49:15,680 --> 00:49:20,000
of rhythm we first generate t1 t2 and t3

1102
00:49:20,000 --> 00:49:24,240
the depth y4 is 3. this means that y4

1103
00:49:24,240 --> 00:49:25,839
cannot be used to

1104
00:49:25,839 --> 00:49:28,559
generate any values finally

1105
00:49:28,559 --> 00:49:32,160
the circuit needs 11 xr projects however

1106
00:49:32,160 --> 00:49:34,480
in our background framework we can

1107
00:49:34,480 --> 00:49:36,240
obtain a circuit

1108
00:49:36,240 --> 00:49:39,119
in which the depth of y4 is 2 then y4

1109
00:49:39,119 --> 00:49:43,359
can be used again to generate y0 y1 and

1110
00:49:43,359 --> 00:49:46,079
2. finally we can generate the circuit

1111
00:49:46,079 --> 00:49:50,960
with only 9 operation xor operations

1112
00:49:51,119 --> 00:49:54,760
thanks for attention

1113
00:50:00,559 --> 00:50:02,960
so uh thank you for the presentation

1114
00:50:02,960 --> 00:50:04,559
i believe once again we

1115
00:50:04,559 --> 00:50:06,000
didn't mention the

1116
00:50:06,000 --> 00:50:08,400
the authors uh at the beginning so it

1117
00:50:08,400 --> 00:50:10,079
was a kung lu

1118
00:50:10,079 --> 00:50:13,440
wang yan hong

1119
00:50:13,440 --> 00:50:16,240
and making one and maybe for for the

1120
00:50:16,240 --> 00:50:18,160
speakers uh

1121
00:50:18,160 --> 00:50:20,640
let's not take the the habit of skipping

1122
00:50:20,640 --> 00:50:23,520
the introduction

1123
00:50:24,720 --> 00:50:26,480
do we have any questions

1124
00:50:26,480 --> 00:50:28,000
for canoe

1125
00:50:28,000 --> 00:50:30,640
in the audience

1126
00:50:35,440 --> 00:50:39,359
maybe maybe i have one um

1127
00:50:39,440 --> 00:50:43,520
i i noticed that now uh about uh

1128
00:50:43,520 --> 00:50:45,680
diffusion matrices there starts to be

1129
00:50:45,680 --> 00:50:48,480
quite a lot of different tools each one

1130
00:50:48,480 --> 00:50:50,960
sometimes performs better than the other

1131
00:50:50,960 --> 00:50:53,839
if i have an uh diffusion matrix which

1132
00:50:53,839 --> 00:50:56,240
tool should i use do we have something

1133
00:50:56,240 --> 00:50:58,480
to tell me that one tool is better than

1134
00:50:58,480 --> 00:51:00,880
the other

1135
00:51:01,839 --> 00:51:03,440
you have an opinion can hear the

1136
00:51:03,440 --> 00:51:05,119
question clearly but

1137
00:51:05,119 --> 00:51:07,359
i think you want to know the

1138
00:51:07,359 --> 00:51:09,599
the matrix

1139
00:51:09,599 --> 00:51:11,760
how to use

1140
00:51:11,760 --> 00:51:14,079
we use the matrix

1141
00:51:14,079 --> 00:51:17,200
in the hardware

1142
00:51:17,359 --> 00:51:19,599
no no

1143
00:51:19,599 --> 00:51:22,319
what i was asking is uh since there are

1144
00:51:22,319 --> 00:51:25,359
so many tools now in the literature

1145
00:51:25,359 --> 00:51:27,839
uh how how do we compare between these

1146
00:51:27,839 --> 00:51:29,040
tools

1147
00:51:29,040 --> 00:51:30,559
do we have an argument to say that your

1148
00:51:30,559 --> 00:51:32,319
tour is better than the other but

1149
00:51:32,319 --> 00:51:35,800
sometimes better

1150
00:51:36,720 --> 00:51:38,000
pause and

1151
00:51:38,000 --> 00:51:42,960
we can give the results like this

1152
00:51:46,559 --> 00:51:47,680
compare

1153
00:51:47,680 --> 00:51:51,119
comparison and

1154
00:51:51,119 --> 00:51:53,280
blue matrix the

1155
00:51:53,280 --> 00:51:55,119
the left three

1156
00:51:55,119 --> 00:51:57,680
columns are the

1157
00:51:57,680 --> 00:52:00,880
results with result the limitation of

1158
00:52:00,880 --> 00:52:02,960
depth and the

1159
00:52:02,960 --> 00:52:03,839
right

1160
00:52:03,839 --> 00:52:05,839
three columns are

1161
00:52:05,839 --> 00:52:08,880
the results with respect to the minimum

1162
00:52:08,880 --> 00:52:11,200
depth

1163
00:52:12,400 --> 00:52:15,359
in my paper

1164
00:52:16,160 --> 00:52:18,640
thank you for your answer um do we have

1165
00:52:18,640 --> 00:52:20,800
any other questions in the audience

1166
00:52:20,800 --> 00:52:22,960
online

1167
00:52:22,960 --> 00:52:27,040
if not uh let's let's uh thank you again

1168
00:52:27,040 --> 00:52:30,520
and all the stickers

1169
00:52:39,599 --> 00:52:40,400
yes

1170
00:52:40,400 --> 00:52:43,280
let's conclude the session

1171
00:52:43,280 --> 00:52:47,040
so uh i guess uh

1172
00:52:47,040 --> 00:52:49,280
this is it for

1173
00:52:49,280 --> 00:52:51,599
session

1174
00:52:52,480 --> 00:52:54,720
yes

