1
00:00:00,060 --> 00:00:02,959
of time award session

2
00:00:02,959 --> 00:00:06,899
so the test of time award is a very

3
00:00:06,899 --> 00:00:08,760
important the word it's given to a paper

4
00:00:08,760 --> 00:00:11,940
from I think 10 to 12 years ago I forgot

5
00:00:11,940 --> 00:00:13,139
the exact

6
00:00:13,139 --> 00:00:15,719
criteria but for an old paper that had

7
00:00:15,719 --> 00:00:17,640
stood the test of time and really

8
00:00:17,640 --> 00:00:19,460
influenced a lot of work

9
00:00:19,460 --> 00:00:23,300
so I want to read to you the

10
00:00:23,300 --> 00:00:25,680
criteria that the test of time award

11
00:00:25,680 --> 00:00:28,680
committee uses the test of time award

12
00:00:28,680 --> 00:00:30,960
recognizes outstanding papers published

13
00:00:30,960 --> 00:00:33,899
at tcco here it is here published a TCC

14
00:00:33,899 --> 00:00:36,059
at least eight years ago making a

15
00:00:36,059 --> 00:00:37,739
significant contribution to the theory

16
00:00:37,739 --> 00:00:40,020
of cryptography preferably with

17
00:00:40,020 --> 00:00:41,640
influence also in other areas of

18
00:00:41,640 --> 00:00:44,760
cryptography Theory and Beyond

19
00:00:44,760 --> 00:00:47,280
um in this year's award uh the the test

20
00:00:47,280 --> 00:00:49,260
of time award committee has awarded it

21
00:00:49,260 --> 00:00:52,800
to uh the TCC 11 paper

22
00:00:52,800 --> 00:00:55,020
um by

23
00:00:55,020 --> 00:00:58,920
um Jasper Ivan and siegord

24
00:00:58,920 --> 00:01:01,140
um great

25
00:01:01,140 --> 00:01:03,840
they're here the paper from tcc-11

26
00:01:03,840 --> 00:01:06,299
perfectly secure oblivious Ram without

27
00:01:06,299 --> 00:01:09,119
random oracles now I want to say this

28
00:01:09,119 --> 00:01:11,700
paper has indeed opened um I'll read the

29
00:01:11,700 --> 00:01:14,040
citation for the paper in a second has

30
00:01:14,040 --> 00:01:16,740
opened uh several directions the Oram

31
00:01:16,740 --> 00:01:19,020
oblivious Ram is now a very booming area

32
00:01:19,020 --> 00:01:21,420
and many papers were directly influenced

33
00:01:21,420 --> 00:01:23,520
by their papers there are many papers

34
00:01:23,520 --> 00:01:25,740
appearing both in Practical and

35
00:01:25,740 --> 00:01:28,259
theoretical conferences yesterday we saw

36
00:01:28,259 --> 00:01:31,979
one paper about our um here at TCC it

37
00:01:31,979 --> 00:01:34,200
had influenced data structures lower

38
00:01:34,200 --> 00:01:36,900
bounds upper bounds it's really been a

39
00:01:36,900 --> 00:01:38,880
great influence and also for me

40
00:01:38,880 --> 00:01:41,579
personally I had follow-up work to this

41
00:01:41,579 --> 00:01:43,920
and several of my students independently

42
00:01:43,920 --> 00:01:46,079
without me also had follow-up Works to

43
00:01:46,079 --> 00:01:51,200
this so it's very exciting and let me

44
00:01:51,200 --> 00:01:55,140
introduce Jasper who was representing

45
00:01:55,140 --> 00:01:59,119
all three authors with this beautiful

46
00:01:59,119 --> 00:02:02,759
prize and let me let me read the

47
00:02:02,759 --> 00:02:05,640
citation here so the TCC test of time

48
00:02:05,640 --> 00:02:08,220
award uh is given to perfectly secure

49
00:02:08,220 --> 00:02:10,919
oblivious Ram without random Oracle even

50
00:02:10,919 --> 00:02:13,020
damgard the esper Bruce Nielsen and

51
00:02:13,020 --> 00:02:15,599
sugared Melgar for the first perfectly

52
00:02:15,599 --> 00:02:17,459
secure unconditional oblivious Ram

53
00:02:17,459 --> 00:02:19,680
scheme in setting the stage for future

54
00:02:19,680 --> 00:02:22,920
oblivious RAM and pram schemes so here

55
00:02:22,920 --> 00:02:26,599
he is for thank you thank you

56
00:02:26,760 --> 00:02:29,599
thank you

57
00:02:32,459 --> 00:02:34,260
okay

58
00:02:34,260 --> 00:02:37,140
okay thank you I mean on behalf of all

59
00:02:37,140 --> 00:02:40,739
three authors uh we are humbled I mean

60
00:02:40,739 --> 00:02:43,440
it's it's amazing to imagine that we

61
00:02:43,440 --> 00:02:45,120
have contributed to a field as

62
00:02:45,120 --> 00:02:49,019
interesting as OMS and surely I mean you

63
00:02:49,019 --> 00:02:50,700
can easily find the first 20 or maybe

64
00:02:50,700 --> 00:02:53,040
100 other papers that would be even I

65
00:02:53,040 --> 00:02:55,980
mean equally deserving uh to do to be

66
00:02:55,980 --> 00:02:57,660
held up but now we were lucky and be

67
00:02:57,660 --> 00:03:00,540
very happy for me very grateful

68
00:03:00,540 --> 00:03:04,200
um this is a old picture I went back and

69
00:03:04,200 --> 00:03:06,660
found this is he picked a check taken

70
00:03:06,660 --> 00:03:09,120
when we were working on on this paper so

71
00:03:09,120 --> 00:03:11,459
we have a secret here this guy is called

72
00:03:11,459 --> 00:03:12,840
even dumb God

73
00:03:12,840 --> 00:03:16,200
and then the back is me I mean what can

74
00:03:16,200 --> 00:03:17,159
I say

75
00:03:17,159 --> 00:03:18,840
um so

76
00:03:18,840 --> 00:03:21,900
back to business ah down to go forward

77
00:03:21,900 --> 00:03:23,580
and that's what everyone has been

78
00:03:23,580 --> 00:03:25,080
struggling with you have to push down to

79
00:03:25,080 --> 00:03:26,480
go forward

80
00:03:26,480 --> 00:03:29,760
okay so I'm gonna take you today for a

81
00:03:29,760 --> 00:03:31,680
walk in the Orem Forest so what I want

82
00:03:31,680 --> 00:03:34,500
to do is actually flesh a number of what

83
00:03:34,500 --> 00:03:36,959
I would like to call my favorite tricks

84
00:03:36,959 --> 00:03:41,239
from the history of a Rams uh almost

85
00:03:41,239 --> 00:03:44,459
exclusively not mine to try to also hold

86
00:03:44,459 --> 00:03:47,220
up a lot of the other cool papers that

87
00:03:47,220 --> 00:03:49,080
was part of driving this field forward

88
00:03:49,080 --> 00:03:50,819
and just because I think there's some

89
00:03:50,819 --> 00:03:52,920
really cool tricks everyone deserve to

90
00:03:52,920 --> 00:03:55,379
have seen to be able to live a good life

91
00:03:55,379 --> 00:03:57,720
um it's going to be kind of a random

92
00:03:57,720 --> 00:03:59,819
walk looking at some upper bounds and

93
00:03:59,819 --> 00:04:01,140
lower bounds we'll start with a

94
00:04:01,140 --> 00:04:03,180
definition some of the Genesis papers

95
00:04:03,180 --> 00:04:06,120
and maybe if I have time uh also some

96
00:04:06,120 --> 00:04:08,819
some new directions that's popping these

97
00:04:08,819 --> 00:04:09,659
years

98
00:04:09,659 --> 00:04:11,700
I forgot to say

99
00:04:11,700 --> 00:04:14,220
up front here that I would like to thank

100
00:04:14,220 --> 00:04:17,639
Mark simkin which took a lot of walks

101
00:04:17,639 --> 00:04:19,320
with me in the overhead Forest while

102
00:04:19,320 --> 00:04:20,820
preparing these slides here giving me

103
00:04:20,820 --> 00:04:23,460
inspiration and also for thank you for

104
00:04:23,460 --> 00:04:26,580
modeling for The Lumberjack yeah

105
00:04:26,580 --> 00:04:27,840
okay

106
00:04:27,840 --> 00:04:31,380
so we picked I picked a a forest themed

107
00:04:31,380 --> 00:04:34,020
theme here because it turns out when you

108
00:04:34,020 --> 00:04:35,040
take a walk through the history of

109
00:04:35,040 --> 00:04:38,280
o-rams you see a lot of trees okay we'll

110
00:04:38,280 --> 00:04:41,160
be seeing a lot of trees today yeah

111
00:04:41,160 --> 00:04:43,500
so let's get started let's start with

112
00:04:43,500 --> 00:04:46,139
the definition it is TCC right um you

113
00:04:46,139 --> 00:04:47,699
already saw this a number of times now

114
00:04:47,699 --> 00:04:49,440
but so

115
00:04:49,440 --> 00:04:51,060
if you want to do an o-ram what you

116
00:04:51,060 --> 00:04:52,740
should Implement is basically an array

117
00:04:52,740 --> 00:04:55,740
it should have a user API over here

118
00:04:55,740 --> 00:04:57,960
you should be able to write a value V

119
00:04:57,960 --> 00:04:59,940
into some position and then later read

120
00:04:59,940 --> 00:05:02,040
that position back so that's your job

121
00:05:02,040 --> 00:05:04,199
you have to just be able to store values

122
00:05:04,199 --> 00:05:05,580
in positions

123
00:05:05,580 --> 00:05:08,340
we're going to make your life hard by

124
00:05:08,340 --> 00:05:10,500
giving you only a constant sized memory

125
00:05:10,500 --> 00:05:12,360
so you have a constant sized memory here

126
00:05:12,360 --> 00:05:14,699
that can only hold a few words that fit

127
00:05:14,699 --> 00:05:17,280
into the array less of unfair of course

128
00:05:17,280 --> 00:05:20,340
to also get a bigger memory it's sitting

129
00:05:20,340 --> 00:05:22,800
over here the the problem being that

130
00:05:22,800 --> 00:05:24,960
there is some adversary here that can

131
00:05:24,960 --> 00:05:27,240
see whenever you access a position so if

132
00:05:27,240 --> 00:05:29,340
you write something here to position

133
00:05:29,340 --> 00:05:31,259
eight it will see that you wrote

134
00:05:31,259 --> 00:05:33,120
something to position eight

135
00:05:33,120 --> 00:05:35,340
we can safely assume it doesn't see what

136
00:05:35,340 --> 00:05:36,840
you are writing it doesn't see the value

137
00:05:36,840 --> 00:05:39,120
you're writing we can just encrypt it or

138
00:05:39,120 --> 00:05:41,400
in some other applications to MPC we can

139
00:05:41,400 --> 00:05:43,080
assume that that value is secret here

140
00:05:43,080 --> 00:05:45,060
but it gets to see where you write the

141
00:05:45,060 --> 00:05:47,699
then it also gets to see if you read a

142
00:05:47,699 --> 00:05:50,220
position back so if you say I would like

143
00:05:50,220 --> 00:05:52,740
position seven it sees that ux is

144
00:05:52,740 --> 00:05:56,160
position seven but not quantization

145
00:05:56,160 --> 00:05:58,800
your job is to hide from that to Sherry

146
00:05:58,800 --> 00:06:01,080
what positions you are writing to here

147
00:06:01,080 --> 00:06:03,120
so you basically have to to hide this

148
00:06:03,120 --> 00:06:05,580
value P from there to seven

149
00:06:05,580 --> 00:06:08,039
the way we formalize it is we say

150
00:06:08,039 --> 00:06:10,860
forgiven operation either a read or a

151
00:06:10,860 --> 00:06:11,820
right

152
00:06:11,820 --> 00:06:15,000
uh when you do that right operation that

153
00:06:15,000 --> 00:06:17,460
will make some accesses to the server

154
00:06:17,460 --> 00:06:20,460
memory over here we call that a of the

155
00:06:20,460 --> 00:06:22,500
operation that's the x is basically the

156
00:06:22,500 --> 00:06:25,020
points being touched

157
00:06:25,020 --> 00:06:28,979
and if you come with any two lists of

158
00:06:28,979 --> 00:06:31,560
operations of the same length and you

159
00:06:31,560 --> 00:06:33,539
compute all the accesses that they

160
00:06:33,539 --> 00:06:35,699
generate they should be statistically

161
00:06:35,699 --> 00:06:38,759
close so whatever that we say we see

162
00:06:38,759 --> 00:06:40,740
here is independent of whether it's one

163
00:06:40,740 --> 00:06:42,479
sequence or another one

164
00:06:42,479 --> 00:06:44,460
and then if we set Epsilon here to be

165
00:06:44,460 --> 00:06:46,680
zero we have perfect security negligible

166
00:06:46,680 --> 00:06:49,020
we have statistical security if this

167
00:06:49,020 --> 00:06:51,120
Delta here is not statistical distance

168
00:06:51,120 --> 00:06:53,100
but like a policized circuit where

169
00:06:53,100 --> 00:06:54,720
computational security

170
00:06:54,720 --> 00:06:57,780
that's the idea okay

171
00:06:57,780 --> 00:06:59,639
you can have bigger memories here but

172
00:06:59,639 --> 00:07:01,560
for today just to keep the parameter

173
00:07:01,560 --> 00:07:03,300
space down I'm going to look at only

174
00:07:03,300 --> 00:07:05,639
schemes with with the constant client

175
00:07:05,639 --> 00:07:06,780
memory

176
00:07:06,780 --> 00:07:08,720
there's a important distinction whether

177
00:07:08,720 --> 00:07:12,060
your job your algorithm here it gets it

178
00:07:12,060 --> 00:07:14,819
an easy job on our hard job so an online

179
00:07:14,819 --> 00:07:16,860
orm should be able to get the sequence

180
00:07:16,860 --> 00:07:20,520
of operations here one by one so it gets

181
00:07:20,520 --> 00:07:22,380
for example a right has to do something

182
00:07:22,380 --> 00:07:24,360
later gets to read and have to do

183
00:07:24,360 --> 00:07:26,880
something all acroscopy that they got

184
00:07:26,880 --> 00:07:28,680
the entire sequence up front and

185
00:07:28,680 --> 00:07:30,660
therefore can do some planning that's of

186
00:07:30,660 --> 00:07:32,400
course an easier job so that's online

187
00:07:32,400 --> 00:07:35,039
versus offline om

188
00:07:35,039 --> 00:07:36,360
and then there's also a distinction

189
00:07:36,360 --> 00:07:38,220
between having amortized overhead a

190
00:07:38,220 --> 00:07:40,319
worst case overhead worst case overhead

191
00:07:40,319 --> 00:07:42,660
means that whenever you do an operation

192
00:07:42,660 --> 00:07:44,880
there is some fixed overhead like you do

193
00:07:44,880 --> 00:07:46,620
three operations over here for each

194
00:07:46,620 --> 00:07:48,900
operation here on the array

195
00:07:48,900 --> 00:07:50,699
whereas the worst case Uber had just

196
00:07:50,699 --> 00:07:53,759
says uh the amortized overhead just says

197
00:07:53,759 --> 00:07:56,520
that the total amount of operations here

198
00:07:56,520 --> 00:07:59,880
divided by this total operations here is

199
00:07:59,880 --> 00:08:01,500
small somehow

200
00:08:01,500 --> 00:08:03,300
yeah okay

201
00:08:03,300 --> 00:08:04,919
that's the definition

202
00:08:04,919 --> 00:08:07,319
let's try to jump on let's look at the

203
00:08:07,319 --> 00:08:10,139
Genesis papers the first papers from H7

204
00:08:10,139 --> 00:08:12,300
there's three papers by gold rice and

205
00:08:12,300 --> 00:08:14,160
ostrovsky that started the field

206
00:08:14,160 --> 00:08:17,759
uh Paul Rice introduced uh the field up

207
00:08:17,759 --> 00:08:20,460
here and he got kind of a non-freeville

208
00:08:20,460 --> 00:08:23,759
scheme he says you know if you have a n

209
00:08:23,759 --> 00:08:26,340
operations you have a memory of size n

210
00:08:26,340 --> 00:08:29,039
you do M operations we can do that with

211
00:08:29,039 --> 00:08:31,800
overhead m to the Epsilon for any fixed

212
00:08:31,800 --> 00:08:33,360
Epsilon here

213
00:08:33,360 --> 00:08:36,899
like squirrel the third world overhead

214
00:08:36,899 --> 00:08:39,240
ostrovsky a couple of years later

215
00:08:39,240 --> 00:08:42,599
made that a pulley logarithmic overhead

216
00:08:42,599 --> 00:08:44,159
and then they had a drawing paper about

217
00:08:44,159 --> 00:08:45,779
a decade later where they had better

218
00:08:45,779 --> 00:08:47,760
schemes and where they proved that there

219
00:08:47,760 --> 00:08:49,260
was a lower bound that you actually need

220
00:08:49,260 --> 00:08:51,120
to logarithmic overhead there's no way

221
00:08:51,120 --> 00:08:53,760
to do without logarithm okay

222
00:08:53,760 --> 00:08:55,560
I'll show you some of that here some of

223
00:08:55,560 --> 00:08:57,660
these papers now

224
00:08:57,660 --> 00:08:59,279
so let's look I'm gonna show you quite

225
00:08:59,279 --> 00:09:01,920
some Oram schemes today the first one is

226
00:09:01,920 --> 00:09:04,640
your tribute one this one is nicely easy

227
00:09:04,640 --> 00:09:07,320
basically what you do is you take your

228
00:09:07,320 --> 00:09:09,000
array and then you store it in the

229
00:09:09,000 --> 00:09:11,820
memory over here if you want to read a

230
00:09:11,820 --> 00:09:13,260
position then to hide which position

231
00:09:13,260 --> 00:09:15,120
you're reading you just read the whole

232
00:09:15,120 --> 00:09:17,339
thing and then you read out what you you

233
00:09:17,339 --> 00:09:19,380
wanted and you give that out on your API

234
00:09:19,380 --> 00:09:22,140
that was easy you can do that in a

235
00:09:22,140 --> 00:09:23,580
streaming manner of course if you want

236
00:09:23,580 --> 00:09:25,560
to write you stream the entire memory

237
00:09:25,560 --> 00:09:27,180
back you replace the one element you

238
00:09:27,180 --> 00:09:28,440
want to write and then you sweep the

239
00:09:28,440 --> 00:09:31,080
memory back on on the server again okay

240
00:09:31,080 --> 00:09:34,019
overhead n perfect security okay so we

241
00:09:34,019 --> 00:09:36,000
got started

242
00:09:36,000 --> 00:09:38,820
yes scheme from the first paper which

243
00:09:38,820 --> 00:09:41,220
has an extremely influential idea that

244
00:09:41,220 --> 00:09:43,080
is basically popping up in every scheme

245
00:09:43,080 --> 00:09:46,080
after that which is the idea for God and

246
00:09:46,080 --> 00:09:48,660
the permuted memory

247
00:09:48,660 --> 00:09:51,300
so two things happened first I take all

248
00:09:51,300 --> 00:09:53,459
the elements of of the area here and

249
00:09:53,459 --> 00:09:56,760
then you know once and for all step

250
00:09:56,760 --> 00:09:59,100
I take and then I start position seven

251
00:09:59,100 --> 00:10:01,200
in a random position over here let's say

252
00:10:01,200 --> 00:10:03,420
sm7 through a POF with a short key

253
00:10:03,420 --> 00:10:05,459
that's kept on the client and that gives

254
00:10:05,459 --> 00:10:07,140
me the position where I'll be saving

255
00:10:07,140 --> 00:10:08,580
that that element

256
00:10:08,580 --> 00:10:11,459
I can be hashing to some buckets to not

257
00:10:11,459 --> 00:10:12,839
have to I mean to to handle some

258
00:10:12,839 --> 00:10:14,640
overflow when two things hit the same

259
00:10:14,640 --> 00:10:15,480
thing

260
00:10:15,480 --> 00:10:17,640
block size pockets is enough so

261
00:10:17,640 --> 00:10:19,620
basically you make a permuted memory

262
00:10:19,620 --> 00:10:21,120
here where you store your stuff and that

263
00:10:21,120 --> 00:10:22,620
means later if you want to read

264
00:10:22,620 --> 00:10:24,540
Precision seven you send seven through

265
00:10:24,540 --> 00:10:26,399
your prf and then you go and read a

266
00:10:26,399 --> 00:10:27,959
random position here and get the value

267
00:10:27,959 --> 00:10:32,339
back and the server is not no smarter it

268
00:10:32,339 --> 00:10:34,140
doesn't know what I mean it didn't know

269
00:10:34,140 --> 00:10:35,580
you were accessed the question since

270
00:10:35,580 --> 00:10:37,800
seven because it sees a uniformly random

271
00:10:37,800 --> 00:10:39,540
position being accessed here

272
00:10:39,540 --> 00:10:41,339
that's the obvious problem that if you

273
00:10:41,339 --> 00:10:43,140
read again in The Next Step you read

274
00:10:43,140 --> 00:10:44,760
seven again you'll be reading the same

275
00:10:44,760 --> 00:10:46,740
position here again so we want to hide

276
00:10:46,740 --> 00:10:49,980
that to do that we use a trivial or M up

277
00:10:49,980 --> 00:10:51,959
here of some size G

278
00:10:51,959 --> 00:10:53,640
so just have something here of size d

279
00:10:53,640 --> 00:10:55,920
whenever I read an element I read the

280
00:10:55,920 --> 00:10:57,420
entire God back

281
00:10:57,420 --> 00:10:59,579
I put the element into the guard and

282
00:10:59,579 --> 00:11:01,500
then I write the guard out again that's

283
00:11:01,500 --> 00:11:03,180
to remember that I accessed it before

284
00:11:03,180 --> 00:11:05,040
next time I have to access an element

285
00:11:05,040 --> 00:11:07,560
first I read the entire guard back if I

286
00:11:07,560 --> 00:11:09,660
find it there then I'll just access a

287
00:11:09,660 --> 00:11:11,640
random Point here like a dummy point to

288
00:11:11,640 --> 00:11:13,980
height that I found it in the guard

289
00:11:13,980 --> 00:11:16,980
if I didn't find it here I use the prf

290
00:11:16,980 --> 00:11:18,500
to go out and fetch it in the Premier

291
00:11:18,500 --> 00:11:21,899
promoted memory and then I output it in

292
00:11:21,899 --> 00:11:23,760
both cases the server only sees that I

293
00:11:23,760 --> 00:11:25,560
access that thing and then that thing so

294
00:11:25,560 --> 00:11:27,240
again I'm hiding completely which

295
00:11:27,240 --> 00:11:29,700
element I'm accessing okay

296
00:11:29,700 --> 00:11:32,279
what's the cost of that

297
00:11:32,279 --> 00:11:34,680
well let's say the guard here has a size

298
00:11:34,680 --> 00:11:36,779
G whenever I do an operation I have to

299
00:11:36,779 --> 00:11:40,079
read the entire guard back so that's uh

300
00:11:40,079 --> 00:11:43,380
G squared if I do G operations I can

301
00:11:43,380 --> 00:11:45,600
only do D operations because at that

302
00:11:45,600 --> 00:11:47,760
point the guard will be full the worst

303
00:11:47,760 --> 00:11:49,920
case I cannot store anymore what I

304
00:11:49,920 --> 00:11:52,500
shouldn't touch again it's called the

305
00:11:52,500 --> 00:11:53,940
guard of course because it prevents me

306
00:11:53,940 --> 00:11:55,740
from touching the same position here at

307
00:11:55,740 --> 00:11:57,000
twice

308
00:11:57,000 --> 00:11:59,160
and then when that one fills up I just

309
00:11:59,160 --> 00:12:00,540
reset the whole thing I completely

310
00:12:00,540 --> 00:12:02,519
reshuffle the memory here which I can do

311
00:12:02,519 --> 00:12:03,720
in

312
00:12:03,720 --> 00:12:06,300
basically end time so this is a triple

313
00:12:06,300 --> 00:12:09,180
uh approxy that hides lock factors okay

314
00:12:09,180 --> 00:12:11,820
so I have to shuffle again so what is

315
00:12:11,820 --> 00:12:14,820
the price it's t squared plus n to

316
00:12:14,820 --> 00:12:16,980
balance that at Peak G to be square root

317
00:12:16,980 --> 00:12:20,220
n that means I have an overall cost of n

318
00:12:20,220 --> 00:12:22,800
to do square root n operation so I have

319
00:12:22,800 --> 00:12:25,620
square root n overhead okay aha so we

320
00:12:25,620 --> 00:12:27,180
went from n overhead to square root and

321
00:12:27,180 --> 00:12:29,820
overhead that this is going well we are

322
00:12:29,820 --> 00:12:31,260
computer scientists so we know what to

323
00:12:31,260 --> 00:12:35,160
do next we curse right so let's do that

324
00:12:35,160 --> 00:12:37,920
so what you can do now is instead of

325
00:12:37,920 --> 00:12:40,019
having a stupid the the trivial program

326
00:12:40,019 --> 00:12:42,420
here you put the O Ram we just built

327
00:12:42,420 --> 00:12:45,660
that has a square root overhead right

328
00:12:45,660 --> 00:12:48,779
and then you make it size into the two

329
00:12:48,779 --> 00:12:49,980
thirds

330
00:12:49,980 --> 00:12:51,959
because since it has overhead square

331
00:12:51,959 --> 00:12:54,060
root in I get and raise this to one half

332
00:12:54,060 --> 00:12:56,339
that eats that one half that means each

333
00:12:56,339 --> 00:12:58,440
operation now when I'm touching this

334
00:12:58,440 --> 00:13:00,779
thing which is the expensive step has

335
00:13:00,779 --> 00:13:03,660
now only overhead and third

336
00:13:03,660 --> 00:13:05,880
you balance things out again blah blah

337
00:13:05,880 --> 00:13:07,560
blah divide something realize that now

338
00:13:07,560 --> 00:13:09,720
you've got down to overhead into the one

339
00:13:09,720 --> 00:13:11,820
third okay

340
00:13:11,820 --> 00:13:13,980
you can do it again then you get down to

341
00:13:13,980 --> 00:13:16,860
overhead one over four you can do it K

342
00:13:16,860 --> 00:13:19,019
times and you get down to overhead one

343
00:13:19,019 --> 00:13:22,500
over K that's your Epsilon come but

344
00:13:22,500 --> 00:13:23,700
Rises paper

345
00:13:23,700 --> 00:13:25,440
so it doesn't really bite normally we

346
00:13:25,440 --> 00:13:27,779
curse and we get some nice nice login

347
00:13:27,779 --> 00:13:30,060
Behavior but it doesn't really bite on

348
00:13:30,060 --> 00:13:32,519
this uh this problem here so ostrovsky

349
00:13:32,519 --> 00:13:34,980
came along and say Okay so

350
00:13:34,980 --> 00:13:36,959
we do a hierarchical directly

351
00:13:36,959 --> 00:13:39,240
hierarchical construction instead

352
00:13:39,240 --> 00:13:41,880
so we're going to have like a hero Key

353
00:13:41,880 --> 00:13:43,380
Of Cards here so this one is guarding

354
00:13:43,380 --> 00:13:44,700
that one that is cutting that one is

355
00:13:44,700 --> 00:13:46,260
counting that one they are doubling in

356
00:13:46,260 --> 00:13:49,320
size so this one has size 2 4 8 and so

357
00:13:49,320 --> 00:13:51,240
on in fact this one has size two times

358
00:13:51,240 --> 00:13:53,279
login so each of these is a small lock

359
00:13:53,279 --> 00:13:55,500
in size pocket to handle some some

360
00:13:55,500 --> 00:13:57,899
overflow again

361
00:13:57,899 --> 00:13:59,880
and then what I do is I start again with

362
00:13:59,880 --> 00:14:02,459
everything at the top level Shuffle with

363
00:14:02,459 --> 00:14:05,519
some prf that I use for for looking up

364
00:14:05,519 --> 00:14:07,380
okay so the first time I look something

365
00:14:07,380 --> 00:14:09,899
up I put in principle go here and look

366
00:14:09,899 --> 00:14:11,880
it up now I don't want to access it

367
00:14:11,880 --> 00:14:13,440
again so I have to remember that I

368
00:14:13,440 --> 00:14:15,660
touched this element so I inject it here

369
00:14:15,660 --> 00:14:17,880
at the bottom level okay

370
00:14:17,880 --> 00:14:19,920
now this one would fill up very quickly

371
00:14:19,920 --> 00:14:21,139
now

372
00:14:21,139 --> 00:14:24,839
so what I do is in every two to the I

373
00:14:24,839 --> 00:14:29,339
step I shuffle the ice level so every

374
00:14:29,339 --> 00:14:31,680
eight steps I shuffle this level here

375
00:14:31,680 --> 00:14:34,860
along with every level below it

376
00:14:34,860 --> 00:14:36,839
and then I store all the elements

377
00:14:36,839 --> 00:14:38,399
chocolate into this one so I'm basically

378
00:14:38,399 --> 00:14:40,380
emptying these two into that one okay

379
00:14:40,380 --> 00:14:43,199
and then I have a space to put stuff in

380
00:14:43,199 --> 00:14:45,120
here again this is this one gets

381
00:14:45,120 --> 00:14:47,160
shuffled every two steps four step eight

382
00:14:47,160 --> 00:14:49,740
steps and exactly clearing it and always

383
00:14:49,740 --> 00:14:51,600
making sure that there's room to take

384
00:14:51,600 --> 00:14:53,760
new stuff and put down here when I look

385
00:14:53,760 --> 00:14:55,620
up what I do is first I look it up here

386
00:14:55,620 --> 00:14:57,480
then I look it up here then I look it up

387
00:14:57,480 --> 00:14:59,880
here then I look it up here so it means

388
00:14:59,880 --> 00:15:01,440
when I touch something here I put it

389
00:15:01,440 --> 00:15:03,540
down here next time I try to look it up

390
00:15:03,540 --> 00:15:05,160
I'll get it already here then I do some

391
00:15:05,160 --> 00:15:07,260
dummy reads here again to hide that I

392
00:15:07,260 --> 00:15:09,360
already found it at the first level

393
00:15:09,360 --> 00:15:11,820
but this one prevented me from accessing

394
00:15:11,820 --> 00:15:13,560
this one again okay and then this thing

395
00:15:13,560 --> 00:15:16,500
will be bubbling up and whenever it will

396
00:15:16,500 --> 00:15:17,820
always be at a point where it's

397
00:15:17,820 --> 00:15:20,100
protecting me from reading a level that

398
00:15:20,100 --> 00:15:22,139
wasn't shuffled yet right that's why I

399
00:15:22,139 --> 00:15:24,899
shuffle this one and everything below it

400
00:15:24,899 --> 00:15:26,760
that's a very nice idea

401
00:15:26,760 --> 00:15:28,920
we're gonna see that again

402
00:15:28,920 --> 00:15:31,560
I'm having I can use a Pure F1 for each

403
00:15:31,560 --> 00:15:33,779
level storing some keys here I can

404
00:15:33,779 --> 00:15:35,639
actually there's only lock many keys so

405
00:15:35,639 --> 00:15:37,560
I could put them out in memory and read

406
00:15:37,560 --> 00:15:41,279
them up every time at a lock over it

407
00:15:41,279 --> 00:15:43,800
how what how much does it cost well

408
00:15:43,800 --> 00:15:45,959
these Pockets here have size login

409
00:15:45,959 --> 00:15:51,420
uh so like level uh m i here has size m

410
00:15:51,420 --> 00:15:53,699
equal 2 to the I and then the log

411
00:15:53,699 --> 00:15:55,139
overhead

412
00:15:55,139 --> 00:15:58,139
and every two to the I steps I shuffle

413
00:15:58,139 --> 00:16:00,240
it

414
00:16:00,240 --> 00:16:01,079
um

415
00:16:01,079 --> 00:16:03,660
and that when a chocolate the cost is

416
00:16:03,660 --> 00:16:05,579
two to the right times login okay so it

417
00:16:05,579 --> 00:16:07,980
balances out basically I get a

418
00:16:07,980 --> 00:16:10,620
contribution of uh log Square to the

419
00:16:10,620 --> 00:16:12,660
overhead from here okay so let's lock

420
00:16:12,660 --> 00:16:14,760
more elements than I need and there's a

421
00:16:14,760 --> 00:16:17,220
lock overhead from shuffling so Shuffle

422
00:16:17,220 --> 00:16:19,320
you do the knuth shuffle basically you

423
00:16:19,320 --> 00:16:21,360
can just Mark with uniformly random

424
00:16:21,360 --> 00:16:23,519
numbers everything and then sort them

425
00:16:23,519 --> 00:16:25,800
then you shuffle them sorting or

426
00:16:25,800 --> 00:16:27,839
previously cost you a login uh overhead

427
00:16:27,839 --> 00:16:29,420
approve opening

428
00:16:29,420 --> 00:16:32,820
this login contribution to overhead from

429
00:16:32,820 --> 00:16:34,740
here there's lock levels it sums up to

430
00:16:34,740 --> 00:16:37,139
like lock cubed overhead that's not too

431
00:16:37,139 --> 00:16:38,040
bad

432
00:16:38,040 --> 00:16:40,440
and then we certainly have logarithmic

433
00:16:40,440 --> 00:16:41,759
overheads

434
00:16:41,759 --> 00:16:45,000
in the last paper the approve uh

435
00:16:45,000 --> 00:16:46,980
a lower bound showing you actually need

436
00:16:46,980 --> 00:16:49,019
at least lock overhead

437
00:16:49,019 --> 00:16:50,880
you do it in a market called policing

438
00:16:50,880 --> 00:16:52,199
bins later

439
00:16:52,199 --> 00:16:54,600
where your RAM scheme is not allowed to

440
00:16:54,600 --> 00:16:57,000
look at the data you're storing I give

441
00:16:57,000 --> 00:16:58,560
it some data and say put it in position

442
00:16:58,560 --> 00:17:01,019
seven if you look at seven but not the

443
00:17:01,019 --> 00:17:02,220
data itself

444
00:17:02,220 --> 00:17:04,740
so it can for example not check K data

445
00:17:04,740 --> 00:17:07,140
elements somehow error correct and put

446
00:17:07,140 --> 00:17:08,699
them out I said you can get one element

447
00:17:08,699 --> 00:17:11,040
back by reading in different positions

448
00:17:11,040 --> 00:17:13,079
something like that is not allowed it

449
00:17:13,079 --> 00:17:14,400
has to store everything kind of

450
00:17:14,400 --> 00:17:15,660
atomically

451
00:17:15,660 --> 00:17:17,699
if that's all you allowed

452
00:17:17,699 --> 00:17:19,559
there's no way to get below log

453
00:17:19,559 --> 00:17:20,819
overheads that's what they're proving

454
00:17:20,819 --> 00:17:23,040
this paper

455
00:17:23,040 --> 00:17:24,359
okay

456
00:17:24,359 --> 00:17:27,660
so now what so that means by 96 we know

457
00:17:27,660 --> 00:17:30,600
quite a lot but there's also uh

458
00:17:30,600 --> 00:17:33,000
some very interesting uh basic questions

459
00:17:33,000 --> 00:17:35,220
open at this point so we know how to do

460
00:17:35,220 --> 00:17:37,200
this with computational security we're

461
00:17:37,200 --> 00:17:39,120
using a prf so obviously it's not secure

462
00:17:39,120 --> 00:17:41,160
against an unbounded adversary can we

463
00:17:41,160 --> 00:17:43,620
get unconditional security

464
00:17:43,620 --> 00:17:46,320
the scheme is terribly amortized I mean

465
00:17:46,320 --> 00:17:47,760
when you're shuffling your schemes every

466
00:17:47,760 --> 00:17:49,260
two to the end steps you're shuffling

467
00:17:49,260 --> 00:17:51,419
the top level which takes time n Times

468
00:17:51,419 --> 00:17:53,760
login that's annoying if you needed a

469
00:17:53,760 --> 00:17:55,980
reply now and I'm gonna shuffle a

470
00:17:55,980 --> 00:17:58,380
terabyte size memory before I reply to

471
00:17:58,380 --> 00:18:02,419
you can you get worst case overhead

472
00:18:02,580 --> 00:18:04,440
is there a way to go below login

473
00:18:04,440 --> 00:18:06,240
overhead if you're using kind of a

474
00:18:06,240 --> 00:18:08,520
non-boxing bins algorithm doing some

475
00:18:08,520 --> 00:18:11,820
weird encoding of your data why not

476
00:18:11,820 --> 00:18:13,799
and what's the overhead really we have a

477
00:18:13,799 --> 00:18:15,539
construction that's locked Cube we have

478
00:18:15,539 --> 00:18:18,000
a presumably a lower bound saying login

479
00:18:18,000 --> 00:18:20,100
is it that or that or something in

480
00:18:20,100 --> 00:18:22,500
between okay and that's then what we

481
00:18:22,500 --> 00:18:24,720
have been doing since okay so let me

482
00:18:24,720 --> 00:18:26,900
show to you 10 papers very quickly yeah

483
00:18:26,900 --> 00:18:30,320
answering these questions

484
00:18:30,720 --> 00:18:33,000
grab your toes

485
00:18:33,000 --> 00:18:36,000
so the first uh question gets attacked

486
00:18:36,000 --> 00:18:38,760
around March 2010 there's two papers on

487
00:18:38,760 --> 00:18:41,820
ePrint few days within each other one by

488
00:18:41,820 --> 00:18:45,299
uh milgon and the speaker and one by

489
00:18:45,299 --> 00:18:46,500
itai

490
00:18:46,500 --> 00:18:48,360
that's all she hopes that you can do it

491
00:18:48,360 --> 00:18:50,880
with unconditional security okay

492
00:18:50,880 --> 00:18:54,000
so they're both Iran is on e-print

493
00:18:54,000 --> 00:18:56,880
around the same time I ties later get

494
00:18:56,880 --> 00:18:59,280
accepted to stock which had a submission

495
00:18:59,280 --> 00:19:02,039
deadline around November 5 2009 so let's

496
00:19:02,039 --> 00:19:04,020
assume without loss of generality that

497
00:19:04,020 --> 00:19:06,179
there was probably a manuscript around

498
00:19:06,179 --> 00:19:09,320
at this point

499
00:19:09,380 --> 00:19:12,360
anyway there's two sets of people this

500
00:19:12,360 --> 00:19:13,919
being announcer I mean the single

501
00:19:13,919 --> 00:19:16,020
handset kind of independently doing this

502
00:19:16,020 --> 00:19:19,020
around the same time ideas have the

503
00:19:19,020 --> 00:19:21,059
tendency to you know be around and then

504
00:19:21,059 --> 00:19:22,980
people pick them up and that's what we

505
00:19:22,980 --> 00:19:24,240
are around for

506
00:19:24,240 --> 00:19:25,740
um

507
00:19:25,740 --> 00:19:28,140
we get it with uh amortized overhead

508
00:19:28,140 --> 00:19:30,660
lock cube in the computational setting

509
00:19:30,660 --> 00:19:34,260
and we get perfect security itai gets a

510
00:19:34,260 --> 00:19:36,179
fully logarithmic overhead there's no

511
00:19:36,179 --> 00:19:39,360
explicit constant for the uh exponent in

512
00:19:39,360 --> 00:19:41,280
this paper and I haven't been able to

513
00:19:41,280 --> 00:19:43,760
compute it it's complicated

514
00:19:43,760 --> 00:19:46,679
and I get statistical error so for T

515
00:19:46,679 --> 00:19:49,020
operations it's negligible the

516
00:19:49,020 --> 00:19:51,120
probabilities error is T to the minus

517
00:19:51,120 --> 00:19:55,200
log T so just just neglishable if you

518
00:19:55,200 --> 00:19:57,419
want this to be 2 to the minus K it's

519
00:19:57,419 --> 00:19:59,400
gonna not gonna give you fully logo with

520
00:19:59,400 --> 00:20:01,679
me movement that's what comes out I'm

521
00:20:01,679 --> 00:20:03,480
going to show you both constructions I'm

522
00:20:03,480 --> 00:20:04,980
going to start with my my own

523
00:20:04,980 --> 00:20:07,020
construction just because when you have

524
00:20:07,020 --> 00:20:08,580
seen that one that's kind of simple it's

525
00:20:08,580 --> 00:20:10,020
easier to understand this thing here

526
00:20:10,020 --> 00:20:13,679
which is kind of a beast okay yeah

527
00:20:13,679 --> 00:20:16,679
let's start uh oh yeah first one thing

528
00:20:16,679 --> 00:20:18,960
that both papers you get

529
00:20:18,960 --> 00:20:22,140
um that talk about is

530
00:20:22,140 --> 00:20:24,299
that somehow you need to find a way to

531
00:20:24,299 --> 00:20:26,280
store a lot of Randomness inside the

532
00:20:26,280 --> 00:20:28,020
Orem and get it back again when you're

533
00:20:28,020 --> 00:20:30,000
on unconditional security

534
00:20:30,000 --> 00:20:32,100
so in this uh oh

535
00:20:32,100 --> 00:20:35,400
forward this backwards for perfect

536
00:20:35,400 --> 00:20:37,860
um so in this here in this paper here we

537
00:20:37,860 --> 00:20:40,799
also prove an end log in lower bound on

538
00:20:40,799 --> 00:20:42,539
how much non-trivial Randomness that

539
00:20:42,539 --> 00:20:44,640
needs to end up inside the o-ram so if

540
00:20:44,640 --> 00:20:47,460
you do n operations then somehow in

541
00:20:47,460 --> 00:20:50,100
times lock in uniformly random beats are

542
00:20:50,100 --> 00:20:51,419
inside the orm and they have to be

543
00:20:51,419 --> 00:20:52,740
non-trivial in that you're using them

544
00:20:52,740 --> 00:20:54,660
you're somehow getting them back again

545
00:20:54,660 --> 00:20:56,880
so some kind of black hole that sucks

546
00:20:56,880 --> 00:20:59,340
stuff in and gets bigger and bigger than

547
00:20:59,340 --> 00:21:01,580
entropy

548
00:21:01,580 --> 00:21:03,600
is talking about the same without

549
00:21:03,600 --> 00:21:05,220
proving a lower bound that this is kind

550
00:21:05,220 --> 00:21:07,740
of an obstacle to overcome and why is it

551
00:21:07,740 --> 00:21:10,320
an obstacle because you need to somehow

552
00:21:10,320 --> 00:21:13,020
non-trivially get this stuff out again

553
00:21:13,020 --> 00:21:15,419
um and again how do you remember where

554
00:21:15,419 --> 00:21:17,100
you put it because it's a no Wham you

555
00:21:17,100 --> 00:21:18,419
can't remember where you have put the

556
00:21:18,419 --> 00:21:19,799
randomness

557
00:21:19,799 --> 00:21:20,820
um

558
00:21:20,820 --> 00:21:22,799
in the computational setting it was easy

559
00:21:22,799 --> 00:21:24,240
because you could have a period if you

560
00:21:24,240 --> 00:21:25,320
could have a short key on the client

561
00:21:25,320 --> 00:21:27,900
side and that is compressing a lot of

562
00:21:27,900 --> 00:21:29,700
Randomness right for this one you can

563
00:21:29,700 --> 00:21:30,960
remember where you start something

564
00:21:30,960 --> 00:21:33,000
random you can't do that anymore you

565
00:21:33,000 --> 00:21:34,860
cannot afford to remember a lot of

566
00:21:34,860 --> 00:21:37,080
random numbers where you have restore

567
00:21:37,080 --> 00:21:39,840
stuff inside okay that was kind of the

568
00:21:39,840 --> 00:21:41,880
one of the things to overcome

569
00:21:41,880 --> 00:21:43,740
I'll talk about our construction now and

570
00:21:43,740 --> 00:21:45,240
how we do it

571
00:21:45,240 --> 00:21:47,039
a little bit about the motivation maybe

572
00:21:47,039 --> 00:21:50,039
why did we start why did we want a

573
00:21:50,039 --> 00:21:52,919
perfectly secure o-ram I mean maybe not

574
00:21:52,919 --> 00:21:54,840
surprisingly this came out of August so

575
00:21:54,840 --> 00:21:57,059
it was motivated by NPC

576
00:21:57,059 --> 00:22:00,179
um so at this point in time here it was

577
00:22:00,179 --> 00:22:04,380
clear that you could do MPC

578
00:22:04,380 --> 00:22:06,900
of let's say a turing machine or

579
00:22:06,900 --> 00:22:08,940
something for when another turing

580
00:22:08,940 --> 00:22:10,140
machine for something like a ram

581
00:22:10,140 --> 00:22:11,880
algorithm

582
00:22:11,880 --> 00:22:13,559
um and that could be an advantage

583
00:22:13,559 --> 00:22:15,240
because sometimes you have a big

584
00:22:15,240 --> 00:22:16,740
overhead if you want to take a ram

585
00:22:16,740 --> 00:22:19,140
algorithm and compile it in into a

586
00:22:19,140 --> 00:22:21,120
turing machine if you compile it into a

587
00:22:21,120 --> 00:22:23,100
circuit which MPC is really good for you

588
00:22:23,100 --> 00:22:26,640
can get a very very big uh or overhead

589
00:22:26,640 --> 00:22:29,760
for example looking up into an array has

590
00:22:29,760 --> 00:22:31,500
a very wide circuit where it's in

591
00:22:31,500 --> 00:22:34,080
constant operation on an overall so it's

592
00:22:34,080 --> 00:22:35,820
also known that you but what you do is

593
00:22:35,820 --> 00:22:37,860
you you would just take of course take

594
00:22:37,860 --> 00:22:39,659
your o-ram and then in PC it so you do

595
00:22:39,659 --> 00:22:41,340
MPC of the client

596
00:22:41,340 --> 00:22:43,679
and then when the when the class I mean

597
00:22:43,679 --> 00:22:46,200
when the computation needs a value the

598
00:22:46,200 --> 00:22:48,720
client would compute which uh server

599
00:22:48,720 --> 00:22:50,640
memory to access

600
00:22:50,640 --> 00:22:52,799
you would kind of put that into a SQL

601
00:22:52,799 --> 00:22:54,780
sharing open it you get the index out

602
00:22:54,780 --> 00:22:56,880
and say ah we want what's inside this

603
00:22:56,880 --> 00:22:59,100
secret sharing you move it down suck it

604
00:22:59,100 --> 00:23:02,220
into the MPC and then you compute on him

605
00:23:02,220 --> 00:23:03,840
that's all fine except we only had

606
00:23:03,840 --> 00:23:06,780
computational o Rams we didn't know if

607
00:23:06,780 --> 00:23:08,400
somehow there's a difference between

608
00:23:08,400 --> 00:23:11,340
computational NPC and unconditional MPC

609
00:23:11,340 --> 00:23:12,780
whether you would get a huge overhead

610
00:23:12,780 --> 00:23:16,080
there if you wanted to compute a kind of

611
00:23:16,080 --> 00:23:19,260
uh RAM algorithms so we needed to show

612
00:23:19,260 --> 00:23:21,720
kind of fundamental law about upper

613
00:23:21,720 --> 00:23:24,059
bounds we needed an or with perfect

614
00:23:24,059 --> 00:23:25,140
security

615
00:23:25,140 --> 00:23:28,020
also having done MPC with perfect

616
00:23:28,020 --> 00:23:30,299
security it was clear that when you're

617
00:23:30,299 --> 00:23:32,039
insist on perfect security often you

618
00:23:32,039 --> 00:23:33,720
discover different techniques than if

619
00:23:33,720 --> 00:23:36,000
you go computational like it's easy with

620
00:23:36,000 --> 00:23:38,039
the prf then throw away the POF and see

621
00:23:38,039 --> 00:23:39,720
what you can do right so we wanted to

622
00:23:39,720 --> 00:23:41,460
see if we can find other ways to do

623
00:23:41,460 --> 00:23:43,500
Overworld

624
00:23:43,500 --> 00:23:46,440
here's what we we did

625
00:23:46,440 --> 00:23:48,720
um it's kind of inspired quite a lot by

626
00:23:48,720 --> 00:23:50,880
the hierarchical uh approach

627
00:23:50,880 --> 00:23:53,280
we have some hero Keys again the top

628
00:23:53,280 --> 00:23:56,280
level here corresponds to the leftmost

629
00:23:56,280 --> 00:23:57,960
hierarchy before

630
00:23:57,960 --> 00:24:01,020
we want to store all our data in here

631
00:24:01,020 --> 00:24:02,700
originally the way that the data is

632
00:24:02,700 --> 00:24:04,380
stored now is just inside a binary

633
00:24:04,380 --> 00:24:06,659
search tree we have a search tree like

634
00:24:06,659 --> 00:24:08,700
this here and you know date position one

635
00:24:08,700 --> 00:24:10,260
is stored there position two there and

636
00:24:10,260 --> 00:24:13,440
so on okay but then of course the server

637
00:24:13,440 --> 00:24:15,960
if it sees I go this way down it knows

638
00:24:15,960 --> 00:24:17,940
that I'm looking up position one so what

639
00:24:17,940 --> 00:24:19,860
you do is you take this search degree

640
00:24:19,860 --> 00:24:21,600
here and then in one step you uniformly

641
00:24:21,600 --> 00:24:24,720
at randomly permute all the notes and

642
00:24:24,720 --> 00:24:26,340
then somehow maintain you know the

643
00:24:26,340 --> 00:24:29,460
pointers between them okay that's kind

644
00:24:29,460 --> 00:24:31,200
of easy to do if you can do oblivious

645
00:24:31,200 --> 00:24:33,059
sorting because what you do is first you

646
00:24:33,059 --> 00:24:35,280
permute the tree

647
00:24:35,280 --> 00:24:37,799
and then in each note you write where it

648
00:24:37,799 --> 00:24:39,059
ended up

649
00:24:39,059 --> 00:24:41,760
and then now the note that pointed to it

650
00:24:41,760 --> 00:24:44,400
has to also be updated okay so what you

651
00:24:44,400 --> 00:24:46,200
do is you take let's say for all odd

652
00:24:46,200 --> 00:24:48,059
levels you sort them on the kind of the

653
00:24:48,059 --> 00:24:50,460
identity of the outgoing left one for

654
00:24:50,460 --> 00:24:52,799
all even layers you the identity of the

655
00:24:52,799 --> 00:24:55,740
original note oblivious sort then they

656
00:24:55,740 --> 00:24:57,360
get aligned then you update them and

657
00:24:57,360 --> 00:24:59,460
then you run the Sorting backwards again

658
00:24:59,460 --> 00:25:01,200
and then you do it for the left node and

659
00:25:01,200 --> 00:25:03,480
then you do it for the other I mean or

660
00:25:03,480 --> 00:25:06,120
even odd and odd even you can all do it

661
00:25:06,120 --> 00:25:08,039
okay if you can do oblivious sorting you

662
00:25:08,039 --> 00:25:10,320
can update the pointers that's what you

663
00:25:10,320 --> 00:25:11,280
do

664
00:25:11,280 --> 00:25:12,960
and now you have a uniformly randomly

665
00:25:12,960 --> 00:25:15,120
permuted binary search tree line what

666
00:25:15,120 --> 00:25:16,500
you also do is you make a long chain

667
00:25:16,500 --> 00:25:18,600
here of dominoes because we'll do dummy

668
00:25:18,600 --> 00:25:20,880
lookups later and you mix that into the

669
00:25:20,880 --> 00:25:23,520
whole thing so if you do do a look up in

670
00:25:23,520 --> 00:25:26,039
the tree or look up of a dummy note

671
00:25:26,039 --> 00:25:27,659
the server doesn't know what you're

672
00:25:27,659 --> 00:25:29,520
doing okay

673
00:25:29,520 --> 00:25:31,559
that's the idea

674
00:25:31,559 --> 00:25:34,440
just a stupidly completely uniform yet

675
00:25:34,440 --> 00:25:36,299
randomly laid out binary search tree

676
00:25:36,299 --> 00:25:37,860
it's okay for the server to know where

677
00:25:37,860 --> 00:25:39,299
the root is because it knows I will

678
00:25:39,299 --> 00:25:40,679
start at the route when I do a search

679
00:25:40,679 --> 00:25:42,900
okay

680
00:25:42,900 --> 00:25:44,880
now we can just do it let's do a look up

681
00:25:44,880 --> 00:25:48,600
oh no that's giving a hit

682
00:25:48,600 --> 00:25:50,039
so now let's say I want to look up

683
00:25:50,039 --> 00:25:51,840
position eight what I will do is I'll

684
00:25:51,840 --> 00:25:54,179
just go to the root and then I'll in the

685
00:25:54,179 --> 00:25:55,860
root it will tell me where to find that

686
00:25:55,860 --> 00:25:57,419
node that will be a uniformly random

687
00:25:57,419 --> 00:25:59,520
place in physical memory from that I'll

688
00:25:59,520 --> 00:26:01,380
know where to find that node and that

689
00:26:01,380 --> 00:26:03,900
will tell me where to find that note I

690
00:26:03,900 --> 00:26:05,520
go out get that and I have my data

691
00:26:05,520 --> 00:26:08,039
element and I give it to my user okay

692
00:26:08,039 --> 00:26:10,860
that's all good the server will just see

693
00:26:10,860 --> 00:26:12,900
me looking at the root and then three

694
00:26:12,900 --> 00:26:15,659
uniformly random places in memory

695
00:26:15,659 --> 00:26:18,919
and then it gets complicated

696
00:26:19,440 --> 00:26:22,080
because now I created login problems I

697
00:26:22,080 --> 00:26:25,200
touched these uh four elements so I can

698
00:26:25,200 --> 00:26:27,600
never touch them again right if I try to

699
00:26:27,600 --> 00:26:30,360
look up position seven now say I would

700
00:26:30,360 --> 00:26:32,880
go and read that that that and that and

701
00:26:32,880 --> 00:26:34,620
then the server would know oh the three

702
00:26:34,620 --> 00:26:36,480
first elements were the same so you're

703
00:26:36,480 --> 00:26:37,799
looking up something that's close to

704
00:26:37,799 --> 00:26:39,419
what you looked up before

705
00:26:39,419 --> 00:26:41,220
and that's enough that hurts me that

706
00:26:41,220 --> 00:26:43,799
kills everything so what do we do well

707
00:26:43,799 --> 00:26:46,140
we take whatever we touched we put it

708
00:26:46,140 --> 00:26:47,880
down at the bottom level

709
00:26:47,880 --> 00:26:50,220
that's a tiny uh three here's the

710
00:26:50,220 --> 00:26:51,779
language yes uniformly at random shot

711
00:26:51,779 --> 00:26:53,640
from this here I do the same techniques

712
00:26:53,640 --> 00:26:55,559
as when I laid this thing out

713
00:26:55,559 --> 00:26:57,840
I just make a tiny sub tree down here

714
00:26:57,840 --> 00:27:00,900
and then I uniform that random chocolate

715
00:27:00,900 --> 00:27:03,000
and I keep the pointers that's going

716
00:27:03,000 --> 00:27:04,799
back so this one if I want to go left

717
00:27:04,799 --> 00:27:06,720
here that will take me back to that sub

718
00:27:06,720 --> 00:27:08,640
tree that was hanging up here that one

719
00:27:08,640 --> 00:27:10,440
will take me back to that that one will

720
00:27:10,440 --> 00:27:12,360
take me back to that so let's try to

721
00:27:12,360 --> 00:27:15,779
look up element two I go to the root I

722
00:27:15,779 --> 00:27:18,120
can just go to the root the server knows

723
00:27:18,120 --> 00:27:20,100
I move the the route down here so it's

724
00:27:20,100 --> 00:27:21,840
always known where the rule is so go to

725
00:27:21,840 --> 00:27:23,580
the root I'm looking for two I go left

726
00:27:23,580 --> 00:27:25,860
that brings me up here then I go left

727
00:27:25,860 --> 00:27:30,240
right and I'm at position two okay now

728
00:27:30,240 --> 00:27:32,760
if the server sees that I jump up there

729
00:27:32,760 --> 00:27:34,860
again it gets too much information so

730
00:27:34,860 --> 00:27:37,620
what am I doing when I jump up here when

731
00:27:37,620 --> 00:27:39,539
I want to read that thing there

732
00:27:39,539 --> 00:27:41,400
I will also do some Dumber reads down

733
00:27:41,400 --> 00:27:43,620
here okay and that's too high that I'm

734
00:27:43,620 --> 00:27:46,380
working up here yeah if I was going this

735
00:27:46,380 --> 00:27:48,120
way down I would do the dummy reads up

736
00:27:48,120 --> 00:27:51,299
here so in each level where there is

737
00:27:51,299 --> 00:27:53,880
some kind of sub tree line I will do a

738
00:27:53,880 --> 00:27:56,400
read in each step and then in one of

739
00:27:56,400 --> 00:27:58,679
them I will do the real one so here I

740
00:27:58,679 --> 00:28:00,960
just follow that password tick and then

741
00:28:00,960 --> 00:28:04,620
down here I'm doing dummy reads the

742
00:28:04,620 --> 00:28:08,580
server is seen Retreat Retreat read okay

743
00:28:08,580 --> 00:28:11,820
it's just the same it's none smarter

744
00:28:11,820 --> 00:28:13,980
does that make sense and then just keep

745
00:28:13,980 --> 00:28:17,000
doing that okay

746
00:28:17,279 --> 00:28:18,360
um

747
00:28:18,360 --> 00:28:21,299
so let's say I want to look up tree one

748
00:28:21,299 --> 00:28:23,640
so I will start here

749
00:28:23,640 --> 00:28:26,220
uh yeah I will start here one is down

750
00:28:26,220 --> 00:28:29,100
there so I'm going ding ding

751
00:28:29,100 --> 00:28:30,600
uh

752
00:28:30,600 --> 00:28:33,059
no wait wait when I did that one I moved

753
00:28:33,059 --> 00:28:35,159
that down so now I touch something right

754
00:28:35,159 --> 00:28:37,320
I was looking for two so I touched that

755
00:28:37,320 --> 00:28:39,480
that and that so they get marked now so

756
00:28:39,480 --> 00:28:41,460
I take that sub three and I want to move

757
00:28:41,460 --> 00:28:43,140
it at this level but if I move a sub

758
00:28:43,140 --> 00:28:44,760
three to a level where there's already a

759
00:28:44,760 --> 00:28:47,100
three I join them move them one level up

760
00:28:47,100 --> 00:28:48,900
and I shuffle it again exactly like in

761
00:28:48,900 --> 00:28:50,640
the hierarchical one okay

762
00:28:50,640 --> 00:28:52,980
so in every two to the eye steps level I

763
00:28:52,980 --> 00:28:54,960
will get shuffled and it will contain

764
00:28:54,960 --> 00:28:57,659
two to the eye path is fine so get more

765
00:28:57,659 --> 00:28:59,640
and more complicated subtree sitting at

766
00:28:59,640 --> 00:29:01,740
these levels here

767
00:29:01,740 --> 00:29:03,480
and they keep the pointers pointing up

768
00:29:03,480 --> 00:29:05,279
so I want one I start here I go ding

769
00:29:05,279 --> 00:29:07,620
ding ding boom and then I'm doing dummy

770
00:29:07,620 --> 00:29:09,419
reach there there and and I'm doing it

771
00:29:09,419 --> 00:29:11,279
I'm read there it's there

772
00:29:11,279 --> 00:29:14,220
uh and now it's really just keep going

773
00:29:14,220 --> 00:29:16,080
right so

774
00:29:16,080 --> 00:29:18,059
what I read now ends up down there then

775
00:29:18,059 --> 00:29:19,919
I do another read that should end up

776
00:29:19,919 --> 00:29:21,480
there but I have to shop it put it up

777
00:29:21,480 --> 00:29:22,500
there oh there's another one so

778
00:29:22,500 --> 00:29:24,539
shuffling putting it up there the next

779
00:29:24,539 --> 00:29:26,039
one ends there and something else

780
00:29:26,039 --> 00:29:27,600
confidence up there and something else

781
00:29:27,600 --> 00:29:30,179
comes it's there I do another reach it

782
00:29:30,179 --> 00:29:31,380
comes down there and you get a complete

783
00:29:31,380 --> 00:29:32,700
Ripple that gets sharpened with that

784
00:29:32,700 --> 00:29:34,320
gets up with that get shopping with that

785
00:29:34,320 --> 00:29:36,779
and you back over there and you run

786
00:29:36,779 --> 00:29:38,159
again okay

787
00:29:38,159 --> 00:29:40,080
perfect security obviously what's

788
00:29:40,080 --> 00:29:43,620
overhead same cubed obviously

789
00:29:43,620 --> 00:29:44,399
um

790
00:29:44,399 --> 00:29:46,740
and why I mean because

791
00:29:46,740 --> 00:29:50,039
again in every two three the eye steps I

792
00:29:50,039 --> 00:29:51,840
mean every second step this one gets

793
00:29:51,840 --> 00:29:54,179
shuffled every four step this one and so

794
00:29:54,179 --> 00:29:55,440
on right

795
00:29:55,440 --> 00:29:57,360
how many notes are there well there is

796
00:29:57,360 --> 00:29:59,279
two to the eye path is when it gets

797
00:29:59,279 --> 00:30:00,440
shuffled

798
00:30:00,440 --> 00:30:03,360
his part is locked in long so there is

799
00:30:03,360 --> 00:30:05,760
two to the I Times login elements you

800
00:30:05,760 --> 00:30:08,100
have to shuffle them that's again you

801
00:30:08,100 --> 00:30:09,919
know a lock and overhead so that's log

802
00:30:09,919 --> 00:30:12,539
squared overhead there's Rock levels

803
00:30:12,539 --> 00:30:15,960
lock cubed so you get uh get that thing

804
00:30:15,960 --> 00:30:18,360
it's really just a hierarchical one we

805
00:30:18,360 --> 00:30:20,159
have a binary search tree instead of you

806
00:30:20,159 --> 00:30:22,980
know a headspace lookup right

807
00:30:22,980 --> 00:30:25,620
okay

808
00:30:25,620 --> 00:30:27,620
um

809
00:30:28,260 --> 00:30:30,120
that's brief because now I'll show you

810
00:30:30,120 --> 00:30:33,260
the eye Tire Construction

811
00:30:35,760 --> 00:30:36,480
um

812
00:30:36,480 --> 00:30:41,279
okay this is construction yeah

813
00:30:41,279 --> 00:30:43,760
so

814
00:30:44,399 --> 00:30:46,919
he's against drawing a shuffle tweet the

815
00:30:46,919 --> 00:30:48,419
way he's racing it you start with the

816
00:30:48,419 --> 00:30:50,399
hierarchical solution chop it into

817
00:30:50,399 --> 00:30:53,279
buckets and then impose a random Tree on

818
00:30:53,279 --> 00:30:56,520
top okay so he imposes under on the

819
00:30:56,520 --> 00:30:58,740
buckets a random uh three structure but

820
00:30:58,740 --> 00:31:00,000
that's really again just taking a

821
00:31:00,000 --> 00:31:02,520
uniformly at random commuted binary

822
00:31:02,520 --> 00:31:04,620
search tree except the levels are

823
00:31:04,620 --> 00:31:07,080
separated so if I walk a path here the

824
00:31:07,080 --> 00:31:09,299
server will see what level I'm at so

825
00:31:09,299 --> 00:31:11,100
that that's different you're not mixing

826
00:31:11,100 --> 00:31:12,840
notes across levels otherwise you're

827
00:31:12,840 --> 00:31:15,179
just mixing them and then here you're

828
00:31:15,179 --> 00:31:17,100
remembering where the corresponding

829
00:31:17,100 --> 00:31:18,500
notes are

830
00:31:18,500 --> 00:31:21,419
down here that's okay because these are

831
00:31:21,419 --> 00:31:24,240
locked sides and remembering where these

832
00:31:24,240 --> 00:31:26,159
two buckets is that's just two log in

833
00:31:26,159 --> 00:31:27,659
size words

834
00:31:27,659 --> 00:31:29,399
so you just make a little bit more room

835
00:31:29,399 --> 00:31:31,799
in there and there's plenty of room for

836
00:31:31,799 --> 00:31:33,480
having still lock in fact these are pull

837
00:31:33,480 --> 00:31:35,580
it up sized because when you do the

838
00:31:35,580 --> 00:31:37,080
hashing based thing sometimes you get an

839
00:31:37,080 --> 00:31:39,000
overflowing you have to rehash

840
00:31:39,000 --> 00:31:41,100
and high ties construction can't do that

841
00:31:41,100 --> 00:31:42,840
so he needs a day it's never an overall

842
00:31:42,840 --> 00:31:45,600
flow so this is a bit bigger that's the

843
00:31:45,600 --> 00:31:47,340
first kind of pulley lock that we don't

844
00:31:47,340 --> 00:31:49,919
know the constant yeah anyway that's the

845
00:31:49,919 --> 00:31:52,799
idea and then he does uh

846
00:31:52,799 --> 00:31:55,440
a very new idea that's a new idea here

847
00:31:55,440 --> 00:31:58,320
which says now each element let's say uh

848
00:31:58,320 --> 00:32:00,720
no let's do something first let's do

849
00:32:00,720 --> 00:32:02,460
something that means now if I want to

850
00:32:02,460 --> 00:32:04,559
pick up an element say I wanted to pick

851
00:32:04,559 --> 00:32:06,360
up element seven and it was really down

852
00:32:06,360 --> 00:32:08,640
here at the root then I would just be

853
00:32:08,640 --> 00:32:10,200
following you know

854
00:32:10,200 --> 00:32:12,600
70s

855
00:32:12,600 --> 00:32:15,299
yeah I thought I forgot the semantics of

856
00:32:15,299 --> 00:32:16,799
green and red they're left and right

857
00:32:16,799 --> 00:32:18,480
anyway you would be walking down here

858
00:32:18,480 --> 00:32:20,220
but in each step I mean this is

859
00:32:20,220 --> 00:32:21,960
completely mixed I mean left and right

860
00:32:21,960 --> 00:32:24,720
here is permuted uniformly at random so

861
00:32:24,720 --> 00:32:27,299
by seeing where I walk the server will

862
00:32:27,299 --> 00:32:28,860
have no idea that I'm going to Precision

863
00:32:28,860 --> 00:32:31,200
seven because it's just the levels are

864
00:32:31,200 --> 00:32:33,600
completely randomly shocked okay

865
00:32:33,600 --> 00:32:37,320
so that's one read that's okay okay

866
00:32:37,320 --> 00:32:39,299
then when I do a read like this I would

867
00:32:39,299 --> 00:32:40,620
take this element

868
00:32:40,620 --> 00:32:42,840
and then I put it down here

869
00:32:42,840 --> 00:32:44,760
but it's not that it's Leaf anymore I

870
00:32:44,760 --> 00:32:47,159
put it down here

871
00:32:47,159 --> 00:32:49,500
um and that means and then that element

872
00:32:49,500 --> 00:32:51,600
let's say V7 here that's the value of

873
00:32:51,600 --> 00:32:54,120
position seven it will now together with

874
00:32:54,120 --> 00:32:56,220
the shuffling he's still doing the

875
00:32:56,220 --> 00:32:57,779
hierarchical shuffling you're shuffling

876
00:32:57,779 --> 00:32:59,340
this every time every second time every

877
00:32:59,340 --> 00:33:01,919
first time this element will follow the

878
00:33:01,919 --> 00:33:05,220
shuffling up along its path so it has

879
00:33:05,220 --> 00:33:07,740
kind of a path Associated to it

880
00:33:07,740 --> 00:33:10,440
on top of that you don't just put stock

881
00:33:10,440 --> 00:33:13,260
on its real path you don't put seven at

882
00:33:13,260 --> 00:33:15,480
least seven you put it at a uniformly

883
00:33:15,480 --> 00:33:16,559
random

884
00:33:16,559 --> 00:33:19,500
leaf so you take some kind of random

885
00:33:19,500 --> 00:33:21,779
function here the map 7 into a uniformly

886
00:33:21,779 --> 00:33:24,360
random Leaf down here and that gives you

887
00:33:24,360 --> 00:33:27,360
then the path to the if in this in this

888
00:33:27,360 --> 00:33:29,940
thing here you remember that seven is

889
00:33:29,940 --> 00:33:33,240
always at the red green green red

890
00:33:33,240 --> 00:33:36,299
which will then also push off okay so to

891
00:33:36,299 --> 00:33:38,340
look up position seven I know I have to

892
00:33:38,340 --> 00:33:41,159
go red then I have to go green then I

893
00:33:41,159 --> 00:33:43,019
have to go green and then I have to go

894
00:33:43,019 --> 00:33:45,840
red and I'll find the element on the

895
00:33:45,840 --> 00:33:48,360
path down to there so it will be sitting

896
00:33:48,360 --> 00:33:50,820
here okay and when I find it then I'll

897
00:33:50,820 --> 00:33:52,500
do a dummy reach here so this one is

898
00:33:52,500 --> 00:33:54,000
sitting and guarding that I shouldn't

899
00:33:54,000 --> 00:33:55,799
touch it up here because when I touched

900
00:33:55,799 --> 00:33:57,899
it here I put it down here that means

901
00:33:57,899 --> 00:33:59,519
next time I'm looking for it I will hit

902
00:33:59,519 --> 00:34:01,860
it before I come up here and stupidly

903
00:34:01,860 --> 00:34:04,440
touch that thing again right and this

904
00:34:04,440 --> 00:34:06,000
one is moving up together with the

905
00:34:06,000 --> 00:34:08,159
shuffling so anything behind it is

906
00:34:08,159 --> 00:34:09,839
freshly sharpened these are new and

907
00:34:09,839 --> 00:34:11,639
precious shopping so that's okay that I

908
00:34:11,639 --> 00:34:13,859
go up to it again as you just never go

909
00:34:13,859 --> 00:34:16,020
on the path of seven to the right of it

910
00:34:16,020 --> 00:34:18,899
so it's guarding me from doing that

911
00:34:18,899 --> 00:34:21,359
does that make sense

912
00:34:21,359 --> 00:34:23,879
no right because it's it's and it's even

913
00:34:23,879 --> 00:34:26,040
worse than this

914
00:34:26,040 --> 00:34:27,480
because this thing here cannot be

915
00:34:27,480 --> 00:34:29,099
uniformly random it cannot be that you

916
00:34:29,099 --> 00:34:30,960
put everything at a uniformly random

917
00:34:30,960 --> 00:34:32,699
note because then you would have to

918
00:34:32,699 --> 00:34:34,440
remember this function and then it's too

919
00:34:34,440 --> 00:34:36,540
big to be on the client

920
00:34:36,540 --> 00:34:39,480
so it's only fully log wise independent

921
00:34:39,480 --> 00:34:41,639
okay so everything is put a uniformly

922
00:34:41,639 --> 00:34:44,159
random polarizing dependent places and

923
00:34:44,159 --> 00:34:45,659
that's to avoid the obvious thing that

924
00:34:45,659 --> 00:34:47,399
let's say I'm looking for position one

925
00:34:47,399 --> 00:34:49,619
then I would start on red and then if

926
00:34:49,619 --> 00:34:51,839
I'm looking for position zero afterwards

927
00:34:51,839 --> 00:34:54,359
I would also start under it and

928
00:34:54,359 --> 00:34:56,520
therefore the server would see that or

929
00:34:56,520 --> 00:34:58,440
rather this one gets re-shocked so it

930
00:34:58,440 --> 00:35:00,839
doesn't hurt here but further down in

931
00:35:00,839 --> 00:35:02,880
stuff that was not reshuffled

932
00:35:02,880 --> 00:35:05,940
I would go via red again okay

933
00:35:05,940 --> 00:35:08,280
but then you Shuffle these enough that's

934
00:35:08,280 --> 00:35:10,079
the two parts that's really dependent

935
00:35:10,079 --> 00:35:12,480
becomes independent enough that before

936
00:35:12,480 --> 00:35:14,339
they start you know colliding too much

937
00:35:14,339 --> 00:35:18,500
this down here gets reshuffled okay

938
00:35:18,839 --> 00:35:20,339
um

939
00:35:20,339 --> 00:35:23,160
it works uh I mean at least the paper

940
00:35:23,160 --> 00:35:24,900
was accepted I mean it's really

941
00:35:24,900 --> 00:35:27,060
complicated to analyze and I will not

942
00:35:27,060 --> 00:35:28,740
going more into it because some of these

943
00:35:28,740 --> 00:35:30,780
ideas will be refactored and made really

944
00:35:30,780 --> 00:35:32,640
really crispy when we see the the

945
00:35:32,640 --> 00:35:35,880
pathway paper where we put in okay that

946
00:35:35,880 --> 00:35:38,820
was a long explanation to tell you we

947
00:35:38,820 --> 00:35:40,140
don't have to settle for computational

948
00:35:40,140 --> 00:35:42,359
security we can do with the information

949
00:35:42,359 --> 00:35:43,920
theoretic security

950
00:35:43,920 --> 00:35:46,500
let's take a chop at this tree down here

951
00:35:46,500 --> 00:35:48,540
so he said the overhead is it lock or

952
00:35:48,540 --> 00:35:51,140
lock tube

953
00:35:53,339 --> 00:35:55,980
um outside crypto something was boiling

954
00:35:55,980 --> 00:35:58,800
so in 2010 we we get the the overhead

955
00:35:58,800 --> 00:35:59,700
down

956
00:35:59,700 --> 00:36:02,040
it's already bobbling around 2001 where

957
00:36:02,040 --> 00:36:04,380
cuckoo hashing is invented it's a better

958
00:36:04,380 --> 00:36:06,480
way to throw random elements into

959
00:36:06,480 --> 00:36:07,980
Pockets if you want to get them back

960
00:36:07,980 --> 00:36:09,960
again if you don't know cuckoo hashing

961
00:36:09,960 --> 00:36:12,000
it just means everything gets hessed

962
00:36:12,000 --> 00:36:13,320
with two hash functions so there's two

963
00:36:13,320 --> 00:36:15,060
places where it could be

964
00:36:15,060 --> 00:36:16,500
and then you just make sure that

965
00:36:16,500 --> 00:36:17,940
everything is in one of the two places

966
00:36:17,940 --> 00:36:19,680
where it could be so it gives you a lot

967
00:36:19,680 --> 00:36:22,619
of freedom to balance it right if you

968
00:36:22,619 --> 00:36:23,880
build it dynamically basically what

969
00:36:23,880 --> 00:36:25,079
you're doing is you're hashing with the

970
00:36:25,079 --> 00:36:27,000
first test function if you hit a bucket

971
00:36:27,000 --> 00:36:28,500
where there is already something buckets

972
00:36:28,500 --> 00:36:31,680
have just size four now uh one if

973
00:36:31,680 --> 00:36:33,240
there's something already you kick that

974
00:36:33,240 --> 00:36:35,280
one out it has to find another bucket so

975
00:36:35,280 --> 00:36:36,839
it was placed with the lift has function

976
00:36:36,839 --> 00:36:38,220
it now gets placed with the right pass

977
00:36:38,220 --> 00:36:39,720
function if there's already something

978
00:36:39,720 --> 00:36:41,820
there you kick it out okay cuckoo's kick

979
00:36:41,820 --> 00:36:43,320
the X Out Of The Nest that's why it's

980
00:36:43,320 --> 00:36:45,900
called Google hashing if you get too

981
00:36:45,900 --> 00:36:48,420
long a ripple you just pick two fresh

982
00:36:48,420 --> 00:36:50,520
hash functions and try again

983
00:36:50,520 --> 00:36:53,520
the original paper here actually as a

984
00:36:53,520 --> 00:36:55,800
side note right the first author here

985
00:36:55,800 --> 00:36:57,900
she was actually a PhD student you know

986
00:36:57,900 --> 00:37:00,119
the same time as me when they wrote this

987
00:37:00,119 --> 00:37:01,380
paper here

988
00:37:01,380 --> 00:37:03,480
um and I remember him being very excited

989
00:37:03,480 --> 00:37:05,820
and presenting a hash function and I was

990
00:37:05,820 --> 00:37:08,040
like it's not even Collision resistant

991
00:37:08,040 --> 00:37:11,960
then right it's uh good luck with that

992
00:37:11,960 --> 00:37:14,099
and I've been a better researcher I

993
00:37:14,099 --> 00:37:15,540
could have written some really nice open

994
00:37:15,540 --> 00:37:18,420
papers fortunately that our best

995
00:37:18,420 --> 00:37:21,599
research just around anyway some years

996
00:37:21,599 --> 00:37:23,540
later

997
00:37:23,540 --> 00:37:26,220
gets a very nice idea with the stash so

998
00:37:26,220 --> 00:37:28,200
sometimes these long ripples come and

999
00:37:28,200 --> 00:37:30,599
you would have to normally rehash what

1000
00:37:30,599 --> 00:37:32,220
they say is it happens with noticeable

1001
00:37:32,220 --> 00:37:33,480
probability

1002
00:37:33,480 --> 00:37:36,119
but it happens very rarely so you can

1003
00:37:36,119 --> 00:37:37,920
have a single stash in your pocket

1004
00:37:37,920 --> 00:37:39,540
Whenever there is something you can't

1005
00:37:39,540 --> 00:37:42,180
place you put it in this stash okay

1006
00:37:42,180 --> 00:37:43,740
and then whenever you look up you first

1007
00:37:43,740 --> 00:37:45,300
look at this if it's not there you go

1008
00:37:45,300 --> 00:37:46,800
and look at the two positions where it

1009
00:37:46,800 --> 00:37:47,760
ought to be

1010
00:37:47,760 --> 00:37:49,440
then you can get really really low

1011
00:37:49,440 --> 00:37:51,780
probability of having to rehash with a

1012
00:37:51,780 --> 00:37:53,760
very very small stash you can get

1013
00:37:53,760 --> 00:37:55,680
decreasable probability with a lock size

1014
00:37:55,680 --> 00:37:56,880
stash

1015
00:37:56,880 --> 00:37:58,980
and then you can have

1016
00:37:58,980 --> 00:38:01,560
custom sized pockets in your memory

1017
00:38:01,560 --> 00:38:03,720
remember that before we had lock size

1018
00:38:03,720 --> 00:38:06,060
Pockets now we have custom size Pockets

1019
00:38:06,060 --> 00:38:08,460
at each level where you're storing stuff

1020
00:38:08,460 --> 00:38:10,980
that's going to shave off a login

1021
00:38:10,980 --> 00:38:13,440
that's these two papers so they get the

1022
00:38:13,440 --> 00:38:16,560
overhead down to two luck Square

1023
00:38:16,560 --> 00:38:20,280
had a small wrinkle this one

1024
00:38:20,280 --> 00:38:22,200
it works but that was something that

1025
00:38:22,200 --> 00:38:24,000
needs to be changed later so this is the

1026
00:38:24,000 --> 00:38:26,160
stash from now on it's just uh really

1027
00:38:26,160 --> 00:38:28,920
have to not that the overflowing is so

1028
00:38:28,920 --> 00:38:31,140
rare that you can save the overflowing

1029
00:38:31,140 --> 00:38:34,020
elements on the Post-it note okay that's

1030
00:38:34,020 --> 00:38:35,900
a nice idea that paper there by the way

1031
00:38:35,900 --> 00:38:39,660
uh got the test of time award 2020 as at

1032
00:38:39,660 --> 00:38:42,839
ASAP it is also a very nice table

1033
00:38:42,839 --> 00:38:44,280
yeah

1034
00:38:44,280 --> 00:38:46,619
okay so how do you do it now how exactly

1035
00:38:46,619 --> 00:38:49,740
do you use cuckoo hashing with the

1036
00:38:49,740 --> 00:38:51,240
hierarchical construction well what you

1037
00:38:51,240 --> 00:38:52,859
do is when you want to build a level

1038
00:38:52,859 --> 00:38:55,380
here you take all the elements that you

1039
00:38:55,380 --> 00:38:57,420
want to put here

1040
00:38:57,420 --> 00:38:59,280
then your first uniformly at random

1041
00:38:59,280 --> 00:39:01,680
shuffle them

1042
00:39:01,680 --> 00:39:03,480
obliviously

1043
00:39:03,480 --> 00:39:06,180
and then you just not obliviously put

1044
00:39:06,180 --> 00:39:09,119
them I mean to the cuckoo table okay so

1045
00:39:09,119 --> 00:39:10,440
just take the two hash functions you

1046
00:39:10,440 --> 00:39:12,599
take the element you hash it and put it

1047
00:39:12,599 --> 00:39:14,220
in here so the server will see that

1048
00:39:14,220 --> 00:39:17,160
position element 2 got put into this one

1049
00:39:17,160 --> 00:39:17,880
here

1050
00:39:17,880 --> 00:39:19,440
and then when I want to look it up again

1051
00:39:19,440 --> 00:39:21,180
I take the position seven I put it

1052
00:39:21,180 --> 00:39:22,800
through the hash function again I go and

1053
00:39:22,800 --> 00:39:24,599
look in the two places I will find it

1054
00:39:24,599 --> 00:39:26,040
and get it out

1055
00:39:26,040 --> 00:39:28,800
now the the server will know haha

1056
00:39:28,800 --> 00:39:31,260
it was the position three it was element

1057
00:39:31,260 --> 00:39:33,300
number three that you put in here but it

1058
00:39:33,300 --> 00:39:34,800
doesn't matter because a uniformly at

1059
00:39:34,800 --> 00:39:36,540
random shuffle stuff before I not

1060
00:39:36,540 --> 00:39:39,780
obliviously built the cuckoo table okay

1061
00:39:39,780 --> 00:39:41,579
and that's that's how you do it remember

1062
00:39:41,579 --> 00:39:43,500
that asymmetry for later it's important

1063
00:39:43,500 --> 00:39:45,119
it means we're doing two things here

1064
00:39:45,119 --> 00:39:46,440
first we're uniformly at random

1065
00:39:46,440 --> 00:39:48,240
shuffling previously that will cost you

1066
00:39:48,240 --> 00:39:51,359
m login at the level of size m

1067
00:39:51,359 --> 00:39:53,280
and then you're not obliviously doing

1068
00:39:53,280 --> 00:39:55,800
the cookahatching which is only M so

1069
00:39:55,800 --> 00:39:57,599
this this is a dominating step up here

1070
00:39:57,599 --> 00:39:59,700
and that will later come and allow us to

1071
00:39:59,700 --> 00:40:02,460
save off another document but that's at

1072
00:40:02,460 --> 00:40:06,140
uh that's 20 slides from now

1073
00:40:07,859 --> 00:40:10,440
okay take care

1074
00:40:10,440 --> 00:40:12,359
um there's been a sequence of papers

1075
00:40:12,359 --> 00:40:15,480
fixing Google hashing based o Rams and

1076
00:40:15,480 --> 00:40:17,220
then breaking them again the latest one

1077
00:40:17,220 --> 00:40:19,800
is from last year uh it's by ostrovsky

1078
00:40:19,800 --> 00:40:21,960
there he is again that goes back and

1079
00:40:21,960 --> 00:40:24,240
showed that some of the schemes based on

1080
00:40:24,240 --> 00:40:26,220
Cuckoo hashing is actually not secure

1081
00:40:26,220 --> 00:40:28,740
it's really hard to to correctly handle

1082
00:40:28,740 --> 00:40:31,740
this uh this overflowing and you have a

1083
00:40:31,740 --> 00:40:33,420
shared stash and all these things

1084
00:40:33,420 --> 00:40:36,119
inhabitately so before you You Bet Your

1085
00:40:36,119 --> 00:40:39,540
Life on a cuckoo based om scheme go read

1086
00:40:39,540 --> 00:40:41,700
this paper or look for even newer papers

1087
00:40:41,700 --> 00:40:44,339
to see what's broken currently okay it's

1088
00:40:44,339 --> 00:40:45,780
not so easy to get it correctly

1089
00:40:45,780 --> 00:40:47,099
implemented

1090
00:40:47,099 --> 00:40:49,640
okay

1091
00:40:49,800 --> 00:40:52,200
okay that was a lot of talking to people

1092
00:40:52,200 --> 00:40:54,359
that get that down for two that's a

1093
00:40:54,359 --> 00:40:55,859
cuckoo of course if you didn't catch

1094
00:40:55,859 --> 00:40:56,760
that yet

1095
00:40:56,760 --> 00:40:58,740
um so let's jump up here and look at

1096
00:40:58,740 --> 00:41:00,839
amortization right other three schemes

1097
00:41:00,839 --> 00:41:02,280
are still hugely amortized you have

1098
00:41:02,280 --> 00:41:03,960
these huge buffers that you Shuffle Now

1099
00:41:03,960 --> 00:41:04,859
and Then

1100
00:41:04,859 --> 00:41:07,079
can we get that worst case yes of course

1101
00:41:07,079 --> 00:41:08,280
we can

1102
00:41:08,280 --> 00:41:11,339
um there were two papers in 2011 doing

1103
00:41:11,339 --> 00:41:14,460
it for the hierarchical uh things what

1104
00:41:14,460 --> 00:41:16,260
they're basically doing here is they say

1105
00:41:16,260 --> 00:41:18,660
you have that huge uh buffer that you

1106
00:41:18,660 --> 00:41:20,880
need to shuffle now and then have two of

1107
00:41:20,880 --> 00:41:22,560
them and then every time you touch this

1108
00:41:22,560 --> 00:41:24,540
one you Shuffle this one a little bit

1109
00:41:24,540 --> 00:41:26,520
and then kind of when you exhausted this

1110
00:41:26,520 --> 00:41:28,980
one this one is now shuffled you swap

1111
00:41:28,980 --> 00:41:31,200
them around you do it again

1112
00:41:31,200 --> 00:41:33,000
there's two papers worth of

1113
00:41:33,000 --> 00:41:34,800
complications uh you know simplified

1114
00:41:34,800 --> 00:41:37,859
there but that's the basic idea of how

1115
00:41:37,859 --> 00:41:40,380
to do these two uh down here

1116
00:41:40,380 --> 00:41:44,460
um you de amortize the hierarchical ones

1117
00:41:44,460 --> 00:41:46,680
this one up here that gives you a log

1118
00:41:46,680 --> 00:41:49,260
squared because that's where after

1119
00:41:49,260 --> 00:41:52,440
cuckoo where the overhead was

1120
00:41:52,440 --> 00:41:54,599
um this one had shapes of dock login by

1121
00:41:54,599 --> 00:41:56,460
doing some balancing with this asymmetry

1122
00:41:56,460 --> 00:41:58,680
but it's it's around log squared now

1123
00:41:58,680 --> 00:42:00,300
there's another paper that's actually

1124
00:42:00,300 --> 00:42:02,460
worse in case it only gets worse case we

1125
00:42:02,460 --> 00:42:04,859
will hit log Cube

1126
00:42:04,859 --> 00:42:07,320
um but it has statistical security but

1127
00:42:07,320 --> 00:42:08,579
more importantly

1128
00:42:08,579 --> 00:42:10,859
it's a paper that introduced an

1129
00:42:10,859 --> 00:42:13,260
extremely influential idea that led up

1130
00:42:13,260 --> 00:42:15,240
to what's known as the pathogram uh

1131
00:42:15,240 --> 00:42:17,160
paper today so let's have a look at that

1132
00:42:17,160 --> 00:42:19,920
that's really uh some good stuff coming

1133
00:42:19,920 --> 00:42:21,480
up here

1134
00:42:21,480 --> 00:42:22,140
um

1135
00:42:22,140 --> 00:42:23,400
so

1136
00:42:23,400 --> 00:42:26,940
it introduced a new way to use trees you

1137
00:42:26,940 --> 00:42:29,339
know Rams and then after a couple of

1138
00:42:29,339 --> 00:42:30,440
years since

1139
00:42:30,440 --> 00:42:33,420
optimizations it led up to a paper

1140
00:42:33,420 --> 00:42:35,640
called pathogram an extremely simple

1141
00:42:35,640 --> 00:42:37,619
oblivious Ram protocol

1142
00:42:37,619 --> 00:42:40,619
in in 13 which then got the worst case

1143
00:42:40,619 --> 00:42:42,240
we will head down to two log Square

1144
00:42:42,240 --> 00:42:44,339
let's have a look at that you can really

1145
00:42:44,339 --> 00:42:46,619
not live a good life without having seen

1146
00:42:46,619 --> 00:42:49,280
that um

1147
00:42:49,920 --> 00:42:53,280
um they have one really nice idea that

1148
00:42:53,280 --> 00:42:54,960
that what what they do is they say kind

1149
00:42:54,960 --> 00:42:56,880
of like with itai that puts up in random

1150
00:42:56,880 --> 00:42:59,700
positions but then used a pulley lock

1151
00:42:59,700 --> 00:43:02,040
wise independent function because he had

1152
00:43:02,040 --> 00:43:03,960
to remember how to put it

1153
00:43:03,960 --> 00:43:06,839
what these or do is say we're just going

1154
00:43:06,839 --> 00:43:08,880
to use another program to remember where

1155
00:43:08,880 --> 00:43:10,140
I put stuff

1156
00:43:10,140 --> 00:43:11,819
okay

1157
00:43:11,819 --> 00:43:15,780
wow is that a good recursion it is if

1158
00:43:15,780 --> 00:43:18,240
let's say the architecture we're on has

1159
00:43:18,240 --> 00:43:20,700
word size of size two times login okay

1160
00:43:20,700 --> 00:43:24,660
so it can start inside one word kind of

1161
00:43:24,660 --> 00:43:27,240
two indexes into itself okay

1162
00:43:27,240 --> 00:43:29,700
most architectures are safely within

1163
00:43:29,700 --> 00:43:32,299
that

1164
00:43:32,579 --> 00:43:34,859
then what we can do is we can we can if

1165
00:43:34,859 --> 00:43:37,560
we have remember for our position P so I

1166
00:43:37,560 --> 00:43:39,960
have a I have a binary tree now I have a

1167
00:43:39,960 --> 00:43:42,540
value V so p means the value in position

1168
00:43:42,540 --> 00:43:43,700
p

1169
00:43:43,700 --> 00:43:47,700
I save that in a random Leaf LP this is

1170
00:43:47,700 --> 00:43:50,520
a lock-end size element

1171
00:43:50,520 --> 00:43:52,280
I can take

1172
00:43:52,280 --> 00:43:55,380
l2p plus 0 and l2p plus one and save

1173
00:43:55,380 --> 00:43:57,720
them inside a single Two Times log and

1174
00:43:57,720 --> 00:43:59,880
size word and then save them in a

1175
00:43:59,880 --> 00:44:02,940
smaller array here that's only half as

1176
00:44:02,940 --> 00:44:05,660
long okay

1177
00:44:05,700 --> 00:44:08,280
that's the big idea here let's see how

1178
00:44:08,280 --> 00:44:09,780
it works

1179
00:44:09,780 --> 00:44:11,940
so what they're doing is say don't

1180
00:44:11,940 --> 00:44:14,460
bother to commute the tree just have a

1181
00:44:14,460 --> 00:44:16,920
fixed binary tree here

1182
00:44:16,920 --> 00:44:17,520
um

1183
00:44:17,520 --> 00:44:19,619
and then if you want to put something in

1184
00:44:19,619 --> 00:44:21,359
Precision seven you're going to assemble

1185
00:44:21,359 --> 00:44:24,180
uniformly random note to put it in here

1186
00:44:24,180 --> 00:44:27,300
it's 11 that turns out to be here

1187
00:44:27,300 --> 00:44:29,300
um

1188
00:44:29,339 --> 00:44:31,500
and then you remember where it was by

1189
00:44:31,500 --> 00:44:33,660
putting it to a smaller organ okay so

1190
00:44:33,660 --> 00:44:36,240
we're gonna make a big old Ram using a

1191
00:44:36,240 --> 00:44:38,520
smaller oven it's about half the size

1192
00:44:38,520 --> 00:44:42,780
that's the idea so remember that uh the

1193
00:44:42,780 --> 00:44:44,280
position of

1194
00:44:44,280 --> 00:44:46,440
the position of the leaf of position

1195
00:44:46,440 --> 00:44:48,780
seven is eleven I remember that down

1196
00:44:48,780 --> 00:44:50,220
here okay

1197
00:44:50,220 --> 00:44:52,560
so they're all lying out here at random

1198
00:44:52,560 --> 00:44:55,140
uniformly random positions now and then

1199
00:44:55,140 --> 00:44:57,420
when I want to to look it up I'm gonna

1200
00:44:57,420 --> 00:45:01,140
look up the entire path down to it and

1201
00:45:01,140 --> 00:45:03,720
again as with I tie I'm guaranteed that

1202
00:45:03,720 --> 00:45:06,000
the value of V7 will be on the path down

1203
00:45:06,000 --> 00:45:08,040
for that leaf and then whenever I touch

1204
00:45:08,040 --> 00:45:12,000
this element I put it back up here right

1205
00:45:12,000 --> 00:45:13,980
and then again I will be pushing it down

1206
00:45:13,980 --> 00:45:16,619
I give it a new position so I will take

1207
00:45:16,619 --> 00:45:18,720
a new position remember where it was but

1208
00:45:18,720 --> 00:45:20,940
put throwing it in the smaller RAM and

1209
00:45:20,940 --> 00:45:22,800
then I will be pushing it down towards

1210
00:45:22,800 --> 00:45:25,200
where it should end up okay so that the

1211
00:45:25,200 --> 00:45:27,240
idea is again it's on the path down to

1212
00:45:27,240 --> 00:45:28,740
where it should end up if it ever

1213
00:45:28,740 --> 00:45:31,380
reaches its leaf

1214
00:45:31,380 --> 00:45:34,500
and remember in here where I have put it

1215
00:45:34,500 --> 00:45:36,480
okay

1216
00:45:36,480 --> 00:45:38,220
the beauty of this thing here is they

1217
00:45:38,220 --> 00:45:40,020
completely dropped the shuffling there's

1218
00:45:40,020 --> 00:45:41,460
no shuffling anymore they have a very

1219
00:45:41,460 --> 00:45:43,500
easy way to push stuff down what they

1220
00:45:43,500 --> 00:45:45,359
say is if you're touching a path here

1221
00:45:45,359 --> 00:45:47,160
anyway let's say to look up seven you

1222
00:45:47,160 --> 00:45:49,859
will look up the entire path

1223
00:45:49,859 --> 00:45:51,300
then you found the element that you

1224
00:45:51,300 --> 00:45:52,980
needed fine give it to you you sure he's

1225
00:45:52,980 --> 00:45:53,760
happy

1226
00:45:53,760 --> 00:45:56,160
and then when you put this path down

1227
00:45:56,160 --> 00:45:59,220
back these these Pockets have size uh

1228
00:45:59,220 --> 00:46:01,859
constant size now like four and you take

1229
00:46:01,859 --> 00:46:03,359
all the elements that were on the path

1230
00:46:03,359 --> 00:46:05,400
and you greetedly push them as far down

1231
00:46:05,400 --> 00:46:07,800
the path that you can okay

1232
00:46:07,800 --> 00:46:11,660
so let's say if I was reading up

1233
00:46:11,760 --> 00:46:13,680
a part that was going down to this one

1234
00:46:13,680 --> 00:46:16,020
and now had found V7 sitting up here

1235
00:46:16,020 --> 00:46:17,700
then I would push it all the way down

1236
00:46:17,700 --> 00:46:19,680
and leave it here right that's the only

1237
00:46:19,680 --> 00:46:21,780
kind of way you're pushing stuff down if

1238
00:46:21,780 --> 00:46:23,520
you see stuff anyway that you could move

1239
00:46:23,520 --> 00:46:26,700
down while looking up you push it down

1240
00:46:26,700 --> 00:46:29,099
and that's enough that's enough if you

1241
00:46:29,099 --> 00:46:31,260
have bucket size four to clear the tree

1242
00:46:31,260 --> 00:46:33,480
before you get any overflows

1243
00:46:33,480 --> 00:46:35,700
is that obvious

1244
00:46:35,700 --> 00:46:37,560
I mean the analysis of that is

1245
00:46:37,560 --> 00:46:39,660
deliciously complicated that I mean

1246
00:46:39,660 --> 00:46:41,280
that's why I took a couple of papers to

1247
00:46:41,280 --> 00:46:43,260
arrive at this this eviction strategy

1248
00:46:43,260 --> 00:46:45,359
was improved many times that's a

1249
00:46:45,359 --> 00:46:46,980
beautifully simple construction and it

1250
00:46:46,980 --> 00:46:48,359
works

1251
00:46:48,359 --> 00:46:49,740
okay

1252
00:46:49,740 --> 00:46:52,500
what about the smaller om now we can

1253
00:46:52,500 --> 00:46:54,060
finally do it what do how do we

1254
00:46:54,060 --> 00:46:57,680
implement the the smaller one

1255
00:46:59,760 --> 00:47:02,700
yeah because we curse it works this time

1256
00:47:02,700 --> 00:47:05,160
right it's all ends all the way down so

1257
00:47:05,160 --> 00:47:06,660
you start with a big goal right you use

1258
00:47:06,660 --> 00:47:08,940
a half cycle when to implement it except

1259
00:47:08,940 --> 00:47:11,160
you don't you use another three I mean

1260
00:47:11,160 --> 00:47:13,440
so each of these things here is now one

1261
00:47:13,440 --> 00:47:16,020
of these right so this entire thing here

1262
00:47:16,020 --> 00:47:18,780
this tree remember that's the tree

1263
00:47:18,780 --> 00:47:21,480
that's now this thing here right

1264
00:47:21,480 --> 00:47:24,480
that's where I can find you know a label

1265
00:47:24,480 --> 00:47:27,859
how to look up in another one

1266
00:47:28,619 --> 00:47:30,540
I would normally store this thing in an

1267
00:47:30,540 --> 00:47:32,760
OM but what I did is i i recursed i

1268
00:47:32,760 --> 00:47:34,500
recursed i recursed and recursed so I

1269
00:47:34,500 --> 00:47:36,660
actually just get another three this is

1270
00:47:36,660 --> 00:47:39,480
kind of I tie three again okay so if you

1271
00:47:39,480 --> 00:47:41,880
want to know where L7 is I go on this

1272
00:47:41,880 --> 00:47:44,460
one and say where do I I know where to

1273
00:47:44,460 --> 00:47:45,839
find everything that starts with a one

1274
00:47:45,839 --> 00:47:47,640
tell me where to find stuff that starts

1275
00:47:47,640 --> 00:47:50,099
with one zero that's there okay the here

1276
00:47:50,099 --> 00:47:51,420
I look up where to find stuff to start

1277
00:47:51,420 --> 00:47:54,000
with one zero one and then here find

1278
00:47:54,000 --> 00:47:57,060
this one L7 and then look up position

1279
00:47:57,060 --> 00:47:59,099
seven in that thing except I look up the

1280
00:47:59,099 --> 00:48:01,560
entire path get the element push things

1281
00:48:01,560 --> 00:48:02,760
immediately down and then I push

1282
00:48:02,760 --> 00:48:04,200
greedily down in that thing that thing

1283
00:48:04,200 --> 00:48:08,899
next thing so it's trees with trees okay

1284
00:48:09,060 --> 00:48:11,760
it's nice that you can present it uh in

1285
00:48:11,760 --> 00:48:14,280
a modular way you get log squared here

1286
00:48:14,280 --> 00:48:16,319
because the bucket size is now went down

1287
00:48:16,319 --> 00:48:18,660
to two lock size right it's kind of

1288
00:48:18,660 --> 00:48:20,819
clear I think that here you get log

1289
00:48:20,819 --> 00:48:22,200
overhead

1290
00:48:22,200 --> 00:48:24,720
because you only look up a lock uh

1291
00:48:24,720 --> 00:48:25,980
length pass and the pockets have

1292
00:48:25,980 --> 00:48:28,020
constant size but then because of the

1293
00:48:28,020 --> 00:48:30,119
recursion you get a contribution login

1294
00:48:30,119 --> 00:48:33,119
from from each of the levels here okay

1295
00:48:33,119 --> 00:48:35,940
you can do the summing uh like this here

1296
00:48:35,940 --> 00:48:37,500
it's just causes trick it will give you

1297
00:48:37,500 --> 00:48:40,800
a log Square yeah it doesn't manage by

1298
00:48:40,800 --> 00:48:43,760
by The Happening foreign

1299
00:48:43,760 --> 00:48:46,560
that's really smart right that's really

1300
00:48:46,560 --> 00:48:49,859
elegant okay so where are we we know

1301
00:48:49,859 --> 00:48:52,440
that we don't need amortized overhead we

1302
00:48:52,440 --> 00:48:54,480
can do with worst case overhead and it's

1303
00:48:54,480 --> 00:48:57,000
in fact a log Square uh that's really

1304
00:48:57,000 --> 00:48:58,980
really good

1305
00:48:58,980 --> 00:49:00,660
what should we work on

1306
00:49:00,660 --> 00:49:04,079
aha the the overhead here so now things

1307
00:49:04,079 --> 00:49:06,300
are going well for us is that really low

1308
00:49:06,300 --> 00:49:08,099
about or should we be hopeful that to

1309
00:49:08,099 --> 00:49:12,079
you know to get down to to know overhead

1310
00:49:12,300 --> 00:49:15,240
time has progressed okay I'm gonna skip

1311
00:49:15,240 --> 00:49:16,200
that

1312
00:49:16,200 --> 00:49:18,359
um so basically what happens here is

1313
00:49:18,359 --> 00:49:20,880
that uh a little money put out a paper

1314
00:49:20,880 --> 00:49:23,640
in 2016 asking is there really a lower

1315
00:49:23,640 --> 00:49:26,460
bound saying the lower bound the bottom

1316
00:49:26,460 --> 00:49:28,440
bins things I mean that is not allowed

1317
00:49:28,440 --> 00:49:30,359
to do complicated encodings

1318
00:49:30,359 --> 00:49:32,339
it's all it also only holds against

1319
00:49:32,339 --> 00:49:34,980
unbounded adversaries so really is it a

1320
00:49:34,980 --> 00:49:36,480
lower bound or could we expect to go

1321
00:49:36,480 --> 00:49:37,680
lower

1322
00:49:37,680 --> 00:49:39,060
and then I looked at that with with

1323
00:49:39,060 --> 00:49:42,660
Casper uh and a couple of years later we

1324
00:49:42,660 --> 00:49:44,940
proved that it is infected all power

1325
00:49:44,940 --> 00:49:47,339
okay I was hoping to show you that lower

1326
00:49:47,339 --> 00:49:50,460
bound uh it's basically using an

1327
00:49:50,460 --> 00:49:52,020
information transfer that was something

1328
00:49:52,020 --> 00:49:54,480
invented uh again things are boiling

1329
00:49:54,480 --> 00:49:56,359
outside the field it's amazing isn't it

1330
00:49:56,359 --> 00:49:58,500
these are not cryptographers and they're

1331
00:49:58,500 --> 00:50:00,960
also smart and they had this in this

1332
00:50:00,960 --> 00:50:02,460
information transfer technique that

1333
00:50:02,460 --> 00:50:03,900
normally doesn't bite on the array

1334
00:50:03,900 --> 00:50:05,640
problem but when you combine it with

1335
00:50:05,640 --> 00:50:07,859
obliviousness it does I wanted to show

1336
00:50:07,859 --> 00:50:10,440
you that but it's just more trees it's

1337
00:50:10,440 --> 00:50:13,680
just more trees really

1338
00:50:13,680 --> 00:50:16,560
so you get login okay

1339
00:50:16,560 --> 00:50:18,660
that leaves us with one thing so is it

1340
00:50:18,660 --> 00:50:22,140
log squared or is it lock 10 minutes

1341
00:50:22,140 --> 00:50:23,880
and

1342
00:50:23,880 --> 00:50:26,040
panorama

1343
00:50:26,040 --> 00:50:27,420
so

1344
00:50:27,420 --> 00:50:29,880
where is it Fox 18

1345
00:50:29,880 --> 00:50:32,460
some other very very smart people uh

1346
00:50:32,460 --> 00:50:36,300
shaved off uh another lock Factor so we

1347
00:50:36,300 --> 00:50:37,980
go come from dark Square down to lock

1348
00:50:37,980 --> 00:50:40,500
times lock login okay and now we are

1349
00:50:40,500 --> 00:50:43,079
getting there and

1350
00:50:43,079 --> 00:50:45,599
what they do here remember remember that

1351
00:50:45,599 --> 00:50:48,000
thing right when I'm building this is

1352
00:50:48,000 --> 00:50:49,440
they're improving the hierarchical one

1353
00:50:49,440 --> 00:50:51,900
remember that when I was building the

1354
00:50:51,900 --> 00:50:53,940
cuckoo hash table I first uniformed that

1355
00:50:53,940 --> 00:50:55,740
random shop and stuff that cost me in

1356
00:50:55,740 --> 00:50:58,140
login and then I did linear time I built

1357
00:50:58,140 --> 00:51:00,300
the cuckoo table right there's the

1358
00:51:00,300 --> 00:51:01,920
shuffling that hurts me

1359
00:51:01,920 --> 00:51:04,079
but silly me why why am I shuffling

1360
00:51:04,079 --> 00:51:05,520
because what I'm doing at this point

1361
00:51:05,520 --> 00:51:07,619
let's say I'm doing level three so I'm

1362
00:51:07,619 --> 00:51:10,200
taking taking two levels and taking

1363
00:51:10,200 --> 00:51:12,059
everything that's in there and then I'm

1364
00:51:12,059 --> 00:51:13,619
Shuffling it together and putting them

1365
00:51:13,619 --> 00:51:15,960
into level three but what I'm really

1366
00:51:15,960 --> 00:51:17,700
doing it I'm taking these two levels the

1367
00:51:17,700 --> 00:51:19,500
stuff I already touched here I'm

1368
00:51:19,500 --> 00:51:22,079
throwing away I'm not gonna put that off

1369
00:51:22,079 --> 00:51:24,359
the element like in level two that I

1370
00:51:24,359 --> 00:51:25,559
already touched would be down here

1371
00:51:25,559 --> 00:51:27,540
untouched okay now I'm throwing all the

1372
00:51:27,540 --> 00:51:30,240
untouched elements away

1373
00:51:30,240 --> 00:51:32,460
uh the the touched elements away the

1374
00:51:32,460 --> 00:51:33,839
untouched elements they were already

1375
00:51:33,839 --> 00:51:37,140
shuffled right I had shuffled this level

1376
00:51:37,140 --> 00:51:39,359
then I touched some of them and threw

1377
00:51:39,359 --> 00:51:41,940
them away the level is already shuffled

1378
00:51:41,940 --> 00:51:44,339
the other level is already shuffled so I

1379
00:51:44,339 --> 00:51:46,559
have two vectors of shuffled stuff and I

1380
00:51:46,559 --> 00:51:48,960
want to make a circle of them

1381
00:51:48,960 --> 00:51:50,520
I can just ship them

1382
00:51:50,520 --> 00:51:52,440
it's like the inverse of merge sort

1383
00:51:52,440 --> 00:51:54,660
right you have two sorted element how do

1384
00:51:54,660 --> 00:51:56,400
you sort them you just ship them right

1385
00:51:56,400 --> 00:51:58,559
so that's what I do I take the two two

1386
00:51:58,559 --> 00:52:00,960
shuffled vectors and then I just

1387
00:52:00,960 --> 00:52:02,940
randomly take one from the top bottom

1388
00:52:02,940 --> 00:52:05,099
bottom top top bottom okay except I

1389
00:52:05,099 --> 00:52:06,599
can't exactly do that because the server

1390
00:52:06,599 --> 00:52:09,359
would see my pattern of merging have to

1391
00:52:09,359 --> 00:52:11,339
do a little bit smarter they do

1392
00:52:11,339 --> 00:52:13,020
something with pockets if I just go

1393
00:52:13,020 --> 00:52:14,940
randomly top bottom bottom top you will

1394
00:52:14,940 --> 00:52:16,380
see that the fronts are not too far away

1395
00:52:16,380 --> 00:52:18,240
from each other so if you have a little

1396
00:52:18,240 --> 00:52:20,400
bucket and you do hide it inside there

1397
00:52:20,400 --> 00:52:22,619
what you're doing a lock size pocket the

1398
00:52:22,619 --> 00:52:24,900
server will not be seeing when when you

1399
00:52:24,900 --> 00:52:26,880
picked up and and bottom so you ship

1400
00:52:26,880 --> 00:52:27,900
them

1401
00:52:27,900 --> 00:52:29,579
and then because this this thing you

1402
00:52:29,579 --> 00:52:30,839
have to sort you have to sort something

1403
00:52:30,839 --> 00:52:32,880
of size lock in you get an overhead of

1404
00:52:32,880 --> 00:52:35,460
lock locking okay that's smart you're

1405
00:52:35,460 --> 00:52:37,559
just maintaining the entropy if you want

1406
00:52:37,559 --> 00:52:40,260
to shuffle two you already shuffled the

1407
00:52:40,260 --> 00:52:41,700
vectors together you can do it with

1408
00:52:41,700 --> 00:52:43,980
linear entropy okay that's that's the

1409
00:52:43,980 --> 00:52:45,059
idea here

1410
00:52:45,059 --> 00:52:48,540
that's fine that saved us another doc

1411
00:52:48,540 --> 00:52:50,579
Factor

1412
00:52:50,579 --> 00:52:53,280
I'm gonna run out of slides now eight

1413
00:52:53,280 --> 00:52:54,720
minutes

1414
00:52:54,720 --> 00:52:57,960
we now now we are in TCC territory right

1415
00:52:57,960 --> 00:53:00,000
now it gets juicy because there's a lock

1416
00:53:00,000 --> 00:53:02,520
log in fact and as we all know

1417
00:53:02,520 --> 00:53:04,559
it's much cooler to get rid of a love

1418
00:53:04,559 --> 00:53:09,140
login not to get rid of a login right

1419
00:53:10,380 --> 00:53:13,920
oh yeah but then two years later your

1420
00:53:13,920 --> 00:53:19,400
Crypt 2020 ashirog and others

1421
00:53:19,460 --> 00:53:22,800
are we happy and they do something

1422
00:53:22,800 --> 00:53:25,020
really cool in fact actually something

1423
00:53:25,020 --> 00:53:27,480
very cool happened two years before the

1424
00:53:27,480 --> 00:53:30,720
passe Rico made what's called a linear

1425
00:53:30,720 --> 00:53:33,780
strictly linear time uh type compaction

1426
00:53:33,780 --> 00:53:37,260
algorithm so what is tight compaction

1427
00:53:37,260 --> 00:53:39,180
it's something that allows me to take

1428
00:53:39,180 --> 00:53:41,160
this kind of pins and balls again so I

1429
00:53:41,160 --> 00:53:42,960
get some data elements that I'm not

1430
00:53:42,960 --> 00:53:44,520
allowed to look at I just get them as

1431
00:53:44,520 --> 00:53:47,520
balls and then there are mat all marks

1432
00:53:47,520 --> 00:53:50,520
you are one okay zero one one zero and

1433
00:53:50,520 --> 00:53:52,140
what I have to do is bring all the ones

1434
00:53:52,140 --> 00:53:54,180
marked by zero to the left and all the

1435
00:53:54,180 --> 00:53:57,839
ones marked by one to the right okay

1436
00:53:57,839 --> 00:54:01,440
attitude obliviously

1437
00:54:01,440 --> 00:54:04,200
and I think most of you know the zero

1438
00:54:04,200 --> 00:54:06,059
one principle so if I try to do this now

1439
00:54:06,059 --> 00:54:08,220
by sorting I'm dead I'll get a login

1440
00:54:08,220 --> 00:54:10,380
over here because sorting bits is as

1441
00:54:10,380 --> 00:54:12,660
hard as sorting arbitrary integers if

1442
00:54:12,660 --> 00:54:14,280
you're only two swapping based operation

1443
00:54:14,280 --> 00:54:16,380
so you have to do something non-swapping

1444
00:54:16,380 --> 00:54:17,760
like what you're allowed to do

1445
00:54:17,760 --> 00:54:20,040
non-stopping stuff on the bits you're

1446
00:54:20,040 --> 00:54:22,079
allowed to look at them but it's quite

1447
00:54:22,079 --> 00:54:24,240
easy to solve bits if you allow to do

1448
00:54:24,240 --> 00:54:26,339
non-stopping things right you do a scan

1449
00:54:26,339 --> 00:54:28,140
and you count oh there's seven zeros the

1450
00:54:28,140 --> 00:54:29,339
rest are once and then you write zero

1451
00:54:29,339 --> 00:54:33,020
zero two one one one that's linear okay

1452
00:54:33,020 --> 00:54:35,880
aha so what you also do is then when you

1453
00:54:35,880 --> 00:54:37,440
do that

1454
00:54:37,440 --> 00:54:39,059
you're allowed to do some kind of

1455
00:54:39,059 --> 00:54:42,300
complicated computations to compute as a

1456
00:54:42,300 --> 00:54:43,800
way to move these things around where

1457
00:54:43,800 --> 00:54:45,119
you bring all these Heroes to the left

1458
00:54:45,119 --> 00:54:47,040
and the ones to the right and this you

1459
00:54:47,040 --> 00:54:49,079
can do in the near time

1460
00:54:49,079 --> 00:54:52,079
that's that's magical huh two years

1461
00:54:52,079 --> 00:54:54,180
before this you couldn't but there was a

1462
00:54:54,180 --> 00:54:55,020
paper

1463
00:54:55,020 --> 00:54:58,319
uh showing how to do that and then they

1464
00:54:58,319 --> 00:55:01,920
say and that's enough to not have to do

1465
00:55:01,920 --> 00:55:05,040
uh shuffling anymore really not by sword

1466
00:55:05,040 --> 00:55:07,500
not by I mean oblivious shuffling

1467
00:55:07,500 --> 00:55:09,359
and so what they know is there's two

1468
00:55:09,359 --> 00:55:11,280
steps when you want to take two levels

1469
00:55:11,280 --> 00:55:12,960
and merge them and put them into a third

1470
00:55:12,960 --> 00:55:14,880
level first you have to get rid of all

1471
00:55:14,880 --> 00:55:16,800
the stuff you touched already and only

1472
00:55:16,800 --> 00:55:18,839
leave behind the stuff that's already

1473
00:55:18,839 --> 00:55:21,420
shuffled right so Mark some of them once

1474
00:55:21,420 --> 00:55:23,160
you mark some of them zero type

1475
00:55:23,160 --> 00:55:24,960
compaction get the soft you have to

1476
00:55:24,960 --> 00:55:27,240
throw away to the left throw it away now

1477
00:55:27,240 --> 00:55:28,380
you're left with stuff that's already

1478
00:55:28,380 --> 00:55:30,839
random now you want to sip them again

1479
00:55:30,839 --> 00:55:33,720
okay so how do you ship them

1480
00:55:33,720 --> 00:55:35,640
first you compute the distribution you

1481
00:55:35,640 --> 00:55:37,440
say you just do a scan and then you add

1482
00:55:37,440 --> 00:55:39,119
random you write zero one one zero

1483
00:55:39,119 --> 00:55:40,559
depending on where you would have picked

1484
00:55:40,559 --> 00:55:42,119
an element from you didn't do anything

1485
00:55:42,119 --> 00:55:43,859
yet you just compute the bit Vector

1486
00:55:43,859 --> 00:55:46,859
right of which Vector should I select

1487
00:55:46,859 --> 00:55:47,760
from

1488
00:55:47,760 --> 00:55:50,220
and you take that beat picture you do

1489
00:55:50,220 --> 00:55:52,380
tight compaction just on the bits that

1490
00:55:52,380 --> 00:55:53,819
gives you a scheduling bringing all the

1491
00:55:53,819 --> 00:55:55,380
zeros to the left are the ones to the

1492
00:55:55,380 --> 00:55:57,480
right you take the two already shuffled

1493
00:55:57,480 --> 00:56:00,180
vectors you put one under the zeros one

1494
00:56:00,180 --> 00:56:02,700
on the ones and then you run the

1495
00:56:02,700 --> 00:56:04,619
scheduling backwards you do the type

1496
00:56:04,619 --> 00:56:06,300
compaction backwards

1497
00:56:06,300 --> 00:56:08,579
then brings all the elements back to

1498
00:56:08,579 --> 00:56:10,200
where they should be brings everything

1499
00:56:10,200 --> 00:56:12,900
from this Vector back up on a zero

1500
00:56:12,900 --> 00:56:14,700
everything from this one back up on the

1501
00:56:14,700 --> 00:56:17,540
one in linear time

1502
00:56:17,540 --> 00:56:19,200
ha

1503
00:56:19,200 --> 00:56:20,579
uh

1504
00:56:20,579 --> 00:56:24,780
what the paper is 73 the papers 73 pages

1505
00:56:24,780 --> 00:56:26,760
long so I must have simplified somewhere

1506
00:56:26,760 --> 00:56:29,460
but if you want to know more you can go

1507
00:56:29,460 --> 00:56:31,980
and read it okay

1508
00:56:31,980 --> 00:56:34,920
so we are done it's login huh

1509
00:56:34,920 --> 00:56:39,000
four minutes left okay so we we felt uh

1510
00:56:39,000 --> 00:56:41,400
for three trees

1511
00:56:41,400 --> 00:56:43,079
that feels good so we can do information

1512
00:56:43,079 --> 00:56:45,180
and we can do perfect security we can

1513
00:56:45,180 --> 00:56:48,359
get uh worst case overheads and we can

1514
00:56:48,359 --> 00:56:50,400
get lock in overhead right so are we

1515
00:56:50,400 --> 00:56:53,099
done no it's TCC right we all know if

1516
00:56:53,099 --> 00:56:54,720
you have P parameters you have two to

1517
00:56:54,720 --> 00:56:57,839
the P question spots No 2 to the P minus

1518
00:56:57,839 --> 00:56:59,339
one because the empty question doesn't

1519
00:56:59,339 --> 00:57:00,480
count

1520
00:57:00,480 --> 00:57:02,339
um

1521
00:57:02,339 --> 00:57:05,040
so we want it all right I I want it all

1522
00:57:05,040 --> 00:57:07,800
right I want perfect security and worst

1523
00:57:07,800 --> 00:57:09,540
case overhead and exactly log in over

1524
00:57:09,540 --> 00:57:12,300
here right can I do that no that's a big

1525
00:57:12,300 --> 00:57:13,980
fat tree still standing there right so

1526
00:57:13,980 --> 00:57:15,780
there's something to do

1527
00:57:15,780 --> 00:57:19,260
um okay that's let's go for you know

1528
00:57:19,260 --> 00:57:22,319
subsets of two so I can I'm gonna live

1529
00:57:22,319 --> 00:57:25,500
with a larger overhead can I get perfect

1530
00:57:25,500 --> 00:57:28,200
and worst case overhead

1531
00:57:28,200 --> 00:57:32,400
yes that's a paper from 19 uh by reskin

1532
00:57:32,400 --> 00:57:36,780
and simkin uh the king paper and which

1533
00:57:36,780 --> 00:57:38,640
but then it actually have a square root

1534
00:57:38,640 --> 00:57:40,500
overhead so if you want to have worst

1535
00:57:40,500 --> 00:57:43,020
case and perfect you somehow back to

1536
00:57:43,020 --> 00:57:44,400
zero you're back to the Square Root

1537
00:57:44,400 --> 00:57:45,660
construction

1538
00:57:45,660 --> 00:57:48,119
um is that really so or can you prove a

1539
00:57:48,119 --> 00:57:49,980
lower bound or can you get that thing

1540
00:57:49,980 --> 00:57:53,220
back there's something to do

1541
00:57:53,220 --> 00:57:55,339
um

1542
00:57:55,680 --> 00:57:57,359
what about we say we settle for

1543
00:57:57,359 --> 00:57:59,400
computational can I get worst case and

1544
00:57:59,400 --> 00:58:02,280
exactly lock in yes this you can do last

1545
00:58:02,280 --> 00:58:05,700
year let's see Rob again uh basically

1546
00:58:05,700 --> 00:58:07,079
what they're doing is they're finding a

1547
00:58:07,079 --> 00:58:10,319
way to de-amortize uh the a

1548
00:58:10,319 --> 00:58:12,059
demortization technique that's

1549
00:58:12,059 --> 00:58:13,920
compatible with this merch Shuffle and

1550
00:58:13,920 --> 00:58:16,619
type compaction okay so the diametize

1551
00:58:16,619 --> 00:58:17,819
that construction

1552
00:58:17,819 --> 00:58:20,160
and then you can get perfect and dog and

1553
00:58:20,160 --> 00:58:21,960
overhead

1554
00:58:21,960 --> 00:58:24,540
um oh no question can you get perfect

1555
00:58:24,540 --> 00:58:27,839
and logarithmic overhead if you live

1556
00:58:27,839 --> 00:58:30,660
with amortized overhead

1557
00:58:30,660 --> 00:58:33,420
no maybe you can but we don't know how

1558
00:58:33,420 --> 00:58:34,440
to do it

1559
00:58:34,440 --> 00:58:37,020
the best we can do here if you if we go

1560
00:58:37,020 --> 00:58:39,240
for perfect is actually to get an

1561
00:58:39,240 --> 00:58:41,280
overhead which is log Cube divided by

1562
00:58:41,280 --> 00:58:43,920
log log in right remember the

1563
00:58:43,920 --> 00:58:45,660
construction I showed you the one we got

1564
00:58:45,660 --> 00:58:48,720
this pricing thing for that was log Cube

1565
00:58:48,720 --> 00:58:51,540
already a decade ago

1566
00:58:51,540 --> 00:58:53,460
so the tent that has been made on that

1567
00:58:53,460 --> 00:58:55,020
problem since that is a log log in

1568
00:58:55,020 --> 00:58:57,960
Factor right I this can't be I mean with

1569
00:58:57,960 --> 00:58:59,940
all the techniques around someone

1570
00:58:59,940 --> 00:59:01,559
smarter than we have to sit down and

1571
00:59:01,559 --> 00:59:03,119
look at that and we have to be smarter

1572
00:59:03,119 --> 00:59:05,040
than 10 other people that also tried but

1573
00:59:05,040 --> 00:59:06,780
just it fights back but I would really

1574
00:59:06,780 --> 00:59:08,460
really love to see this thing being

1575
00:59:08,460 --> 00:59:09,960
brought down I don't see why it should

1576
00:59:09,960 --> 00:59:11,400
not be locked

1577
00:59:11,400 --> 00:59:14,520
of course I mean chop that one down

1578
00:59:14,520 --> 00:59:17,220
we'll all be very happy again notice

1579
00:59:17,220 --> 00:59:19,140
there's a near miss here

1580
00:59:19,140 --> 00:59:20,940
um if we look at the path program paper

1581
00:59:20,940 --> 00:59:22,799
it's not perfect but it's statistical

1582
00:59:22,799 --> 00:59:26,160
probably okay it's worst case

1583
00:59:26,160 --> 00:59:28,260
and again if you allow a slightly bigger

1584
00:59:28,260 --> 00:59:30,960
word size if you if your architecture

1585
00:59:30,960 --> 00:59:33,299
can store log inwards inside a single

1586
00:59:33,299 --> 00:59:35,640
word which is like if you're storing

1587
00:59:35,640 --> 00:59:37,319
stuff on on a server far away whether

1588
00:59:37,319 --> 00:59:38,819
you get a big word or small word is

1589
00:59:38,819 --> 00:59:40,680
probably the same then it actually has

1590
00:59:40,680 --> 00:59:42,540
login overhead so it's a very near miss

1591
00:59:42,540 --> 00:59:45,180
here but if you really want to get all

1592
00:59:45,180 --> 00:59:47,819
of these exactly we I don't think we

1593
00:59:47,819 --> 00:59:49,559
have any good ideas right now how to do

1594
00:59:49,559 --> 00:59:51,900
that so so go and solve that

1595
00:59:51,900 --> 00:59:55,099
I have a minute left

1596
00:59:55,920 --> 00:59:59,099
yeah so we solved quite a lot there's

1597
00:59:59,099 --> 01:00:00,540
still some nice open problems so I just

1598
01:00:00,540 --> 01:00:02,040
want to very quickly flesh in New

1599
01:00:02,040 --> 01:00:04,079
Directions in Hope of pulling smarter

1600
01:00:04,079 --> 01:00:06,059
people into the field okay

1601
01:00:06,059 --> 01:00:07,260
um

1602
01:00:07,260 --> 01:00:10,020
so you can now just ask for o Rams with

1603
01:00:10,020 --> 01:00:12,480
other properties and you can also ask

1604
01:00:12,480 --> 01:00:14,819
other questions for example build o-rams

1605
01:00:14,819 --> 01:00:16,680
that's good for NPC

1606
01:00:16,680 --> 01:00:19,859
and there's a paper by Kayla and Sean at

1607
01:00:19,859 --> 01:00:22,559
importing the day secret taking a

1608
01:00:22,559 --> 01:00:24,119
principal look at that there's something

1609
01:00:24,119 --> 01:00:25,740
called circuit Owen that's looking at

1610
01:00:25,740 --> 01:00:26,880
that point I think there's still a lot

1611
01:00:26,880 --> 01:00:27,960
to do here

1612
01:00:27,960 --> 01:00:30,420
if you want to do NPC of an oh like a

1613
01:00:30,420 --> 01:00:31,799
ram algorithm

1614
01:00:31,799 --> 01:00:34,740
people looking at parallel o Ram

1615
01:00:34,740 --> 01:00:36,780
um there's people that started looking

1616
01:00:36,780 --> 01:00:40,980
at around complexity David

1617
01:00:40,980 --> 01:00:43,799
oh you disappeared yeah ah he's here now

1618
01:00:43,799 --> 01:00:44,599
right

1619
01:00:44,599 --> 01:00:48,299
and Uber that's this guy is this guy in

1620
01:00:48,299 --> 01:00:49,440
the audience

1621
01:00:49,440 --> 01:00:51,540
no well there's two out of three at

1622
01:00:51,540 --> 01:00:53,520
least around here thank you again for a

1623
01:00:53,520 --> 01:00:54,660
nice conference

1624
01:00:54,660 --> 01:00:56,819
and this show if you want to do just a

1625
01:00:56,819 --> 01:00:58,500
single one remember all everything I

1626
01:00:58,500 --> 01:01:00,059
showed you actually have lock and rounds

1627
01:01:00,059 --> 01:01:02,160
like the hierarchical one they're all

1628
01:01:02,160 --> 01:01:03,599
guarding each other so you have to read

1629
01:01:03,599 --> 01:01:05,520
them one by one

1630
01:01:05,520 --> 01:01:07,500
so they slogan rounds

1631
01:01:07,500 --> 01:01:09,839
uh the three one obviously lock in you

1632
01:01:09,839 --> 01:01:12,000
walk down it through uh

1633
01:01:12,000 --> 01:01:13,859
I know that exactly that's a good

1634
01:01:13,859 --> 01:01:15,480
question that hurts you in the pathway

1635
01:01:15,480 --> 01:01:17,700
paper you can read one path in in part

1636
01:01:17,700 --> 01:01:19,920
of ram but then the recursions will give

1637
01:01:19,920 --> 01:01:22,619
you you know Locker involved so these

1638
01:01:22,619 --> 01:01:24,240
smart people here ask what if I allow

1639
01:01:24,240 --> 01:01:25,740
only one one what's the fine-grain

1640
01:01:25,740 --> 01:01:28,319
complexity here uh and they can actually

1641
01:01:28,319 --> 01:01:29,940
show that again if you only allowed a

1642
01:01:29,940 --> 01:01:32,520
single round again you get sent back to

1643
01:01:32,520 --> 01:01:34,440
square root overhead

1644
01:01:34,440 --> 01:01:36,299
oh

1645
01:01:36,299 --> 01:01:38,520
that's a that's a square root again yeah

1646
01:01:38,520 --> 01:01:40,680
that was also a square root oh I was a

1647
01:01:40,680 --> 01:01:42,780
square root up here right

1648
01:01:42,780 --> 01:01:45,059
like if you want perfect security

1649
01:01:45,059 --> 01:01:46,859
there's also a square root could they be

1650
01:01:46,859 --> 01:01:48,839
connected somehow maybe someone should

1651
01:01:48,839 --> 01:01:50,819
look at that or join these people in

1652
01:01:50,819 --> 01:01:53,700
doing uh fine-grained ground complexity

1653
01:01:53,700 --> 01:01:56,940
uh salts yesterday we saw random index

1654
01:01:56,940 --> 01:01:59,760
oh Ram being introduced well I was just

1655
01:01:59,760 --> 01:02:04,160
looking at the shy ways oh there he is

1656
01:02:04,680 --> 01:02:06,480
and this one is one well it's not login

1657
01:02:06,480 --> 01:02:08,339
well

1658
01:02:08,339 --> 01:02:10,319
let's try to remember at least it had

1659
01:02:10,319 --> 01:02:11,700
there were a few rounds it doesn't have

1660
01:02:11,700 --> 01:02:13,079
login rounds

1661
01:02:13,079 --> 01:02:16,079
and that means that it might be subject

1662
01:02:16,079 --> 01:02:17,400
to something like that and that couldn't

1663
01:02:17,400 --> 01:02:20,400
mean that you might not easily reduce uh

1664
01:02:20,400 --> 01:02:22,859
from random index over into om at least

1665
01:02:22,859 --> 01:02:24,480
without suffering some round some

1666
01:02:24,480 --> 01:02:26,160
overhead maybe someone should look at

1667
01:02:26,160 --> 01:02:27,059
that

1668
01:02:27,059 --> 01:02:28,260
um

1669
01:02:28,260 --> 01:02:29,819
I wanted to show you the square root

1670
01:02:29,819 --> 01:02:32,640
solution I'm going to skip that

1671
01:02:32,640 --> 01:02:36,059
I'm gonna leave that for what it is you

1672
01:02:36,059 --> 01:02:38,400
can also look at oblivious other data

1673
01:02:38,400 --> 01:02:40,380
structures okay there's been quite some

1674
01:02:40,380 --> 01:02:43,020
work on saying if I only want like an

1675
01:02:43,020 --> 01:02:45,780
oblivious stack can I go below the log

1676
01:02:45,780 --> 01:02:48,000
and overhead no okay if only one

1677
01:02:48,000 --> 01:02:50,660
differential privacy can I go below no

1678
01:02:50,660 --> 01:02:54,180
okay so give me case reverse and the

1679
01:02:54,180 --> 01:02:55,980
adversary gets to pick one of them and

1680
01:02:55,980 --> 01:02:57,839
see the access pattern but all the other

1681
01:02:57,839 --> 01:03:01,440
ones are perfect okay I have 100 servers

1682
01:03:01,440 --> 01:03:04,140
99 of them necessary knows nothing but

1683
01:03:04,140 --> 01:03:05,819
you can see the access pattern to one of

1684
01:03:05,819 --> 01:03:07,020
them

1685
01:03:07,020 --> 01:03:09,960
can I get below login

1686
01:03:09,960 --> 01:03:11,819
the best you can do is pick a random

1687
01:03:11,819 --> 01:03:14,040
server and store your stock on that and

1688
01:03:14,040 --> 01:03:15,420
then just be lucky that was not the

1689
01:03:15,420 --> 01:03:16,980
corrupted one right that gives you

1690
01:03:16,980 --> 01:03:19,079
security one over K if you can do better

1691
01:03:19,079 --> 01:03:21,900
than one over K login go ahead it's just

1692
01:03:21,900 --> 01:03:23,880
super nasty it's lower bound it comes in

1693
01:03:23,880 --> 01:03:25,680
bites you every time

1694
01:03:25,680 --> 01:03:28,859
you have to go really deep so if you

1695
01:03:28,859 --> 01:03:30,839
want to only have a stack

1696
01:03:30,839 --> 01:03:33,000
and you allow it to only be differential

1697
01:03:33,000 --> 01:03:34,260
private

1698
01:03:34,260 --> 01:03:36,420
then you can go below the lower bound

1699
01:03:36,420 --> 01:03:38,760
okay

1700
01:03:38,760 --> 01:03:41,280
that's a really cool paper from last

1701
01:03:41,280 --> 01:03:44,520
year and let me do this just the last

1702
01:03:44,520 --> 01:03:46,619
thing okay the way you do it

1703
01:03:46,619 --> 01:03:48,599
you just want to take a sequence of push

1704
01:03:48,599 --> 01:03:51,599
and and pulls and height you have two

1705
01:03:51,599 --> 01:03:53,760
sequences that identical except for one

1706
01:03:53,760 --> 01:03:55,079
aberration right and that Michelle

1707
01:03:55,079 --> 01:03:56,460
should not know which one you're doing

1708
01:03:56,460 --> 01:03:58,319
that's differential privacy you're

1709
01:03:58,319 --> 01:04:01,559
hiding the privacy of one operation okay

1710
01:04:01,559 --> 01:04:03,059
so what you're doing you're just in

1711
01:04:03,059 --> 01:04:05,579
plain sight building your stack on the

1712
01:04:05,579 --> 01:04:06,420
server

1713
01:04:06,420 --> 01:04:08,880
so it sees how deep it is except the top

1714
01:04:08,880 --> 01:04:11,040
of the stack here I'm gonna put like a

1715
01:04:11,040 --> 01:04:13,020
plate over it over the last login

1716
01:04:13,020 --> 01:04:15,180
elements here okay

1717
01:04:15,180 --> 01:04:17,460
then whenever I do a push or pull behind

1718
01:04:17,460 --> 01:04:18,780
the stack the adversary doesn't get

1719
01:04:18,780 --> 01:04:20,579
perceived I'll move this one in the same

1720
01:04:20,579 --> 01:04:22,920
direction except I flip a coin for noise

1721
01:04:22,920 --> 01:04:24,780
it's differential privacy and then I

1722
01:04:24,780 --> 01:04:26,339
move it in the other direction sometimes

1723
01:04:26,339 --> 01:04:28,440
okay so adversarial will see this one

1724
01:04:28,440 --> 01:04:30,240
moving left or right but it's not

1725
01:04:30,240 --> 01:04:32,040
clearly telling him how the top of the

1726
01:04:32,040 --> 01:04:34,920
stack is moving okay then I need this

1727
01:04:34,920 --> 01:04:37,440
one to be wide enough that the real step

1728
01:04:37,440 --> 01:04:40,500
doesn't start sticking out down here how

1729
01:04:40,500 --> 01:04:42,480
much noise compared to these operations

1730
01:04:42,480 --> 01:04:45,059
this is textbook differential privacy it

1731
01:04:45,059 --> 01:04:47,579
has to be like fully lock size and then

1732
01:04:47,579 --> 01:04:48,599
you're good

1733
01:04:48,599 --> 01:04:50,880
how to then implement this well you make

1734
01:04:50,880 --> 01:04:53,220
this an OM you keep this top elements in

1735
01:04:53,220 --> 01:04:55,319
the oven what does it mean to move it

1736
01:04:55,319 --> 01:04:56,940
left is you take an element out of the

1737
01:04:56,940 --> 01:04:58,740
OM and just put it in the linked list

1738
01:04:58,740 --> 01:05:01,140
moving this one left means you take an

1739
01:05:01,140 --> 01:05:03,059
element and put into this thing if you

1740
01:05:03,059 --> 01:05:04,440
want to read the top of it you read it

1741
01:05:04,440 --> 01:05:05,640
from the o-ray

1742
01:05:05,640 --> 01:05:08,520
now you have a log size om here that

1743
01:05:08,520 --> 01:05:11,040
gives you lock log in overhead we

1744
01:05:11,040 --> 01:05:14,520
finally got below the lower bound

1745
01:05:14,520 --> 01:05:17,040
so there's hundreds of directions to

1746
01:05:17,040 --> 01:05:19,319
take this into so come and do some some

1747
01:05:19,319 --> 01:05:22,559
oven with us and that's then what I

1748
01:05:22,559 --> 01:05:26,599
wanted to say thank you

1749
01:05:33,540 --> 01:05:36,359
um thank you yes for um we have to leave

1750
01:05:36,359 --> 01:05:38,339
this room in about six minutes because

1751
01:05:38,339 --> 01:05:41,160
they're gonna prepare amazing dinner for

1752
01:05:41,160 --> 01:05:43,500
us so maybe we could take one question

1753
01:05:43,500 --> 01:05:45,480
and then many more questions during

1754
01:05:45,480 --> 01:05:50,040
dinner yeah uh all right uh any

1755
01:05:50,040 --> 01:05:52,339
questions

1756
01:05:53,880 --> 01:05:56,059
did I scare everyone

1757
01:05:56,059 --> 01:05:58,760
it was all perfectly clear

1758
01:05:58,760 --> 01:06:01,920
it was a very nice talk

1759
01:06:01,920 --> 01:06:05,599
all right then thank you again

