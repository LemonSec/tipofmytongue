1
00:00:00,140 --> 00:00:04,259
so welcome to uh this uh this afternoon

2
00:00:04,259 --> 00:00:06,540
session on on Quantum cryptography we

3
00:00:06,540 --> 00:00:10,380
have three uh wonderful speakers for you

4
00:00:10,380 --> 00:00:13,620
um so the first speaker is uh adisha

5
00:00:13,620 --> 00:00:14,880
gulat

6
00:00:14,880 --> 00:00:17,660
so take it away

7
00:00:22,380 --> 00:00:24,080
hello everyone

8
00:00:24,080 --> 00:00:26,939
and I'm going to talk about pseudo

9
00:00:26,939 --> 00:00:28,560
random function like State generators

10
00:00:28,560 --> 00:00:31,340
this is Joint work with

11
00:00:31,340 --> 00:00:34,739
and Henry Ewan

12
00:00:34,739 --> 00:00:37,739
classically we know that pseudorandom

13
00:00:37,739 --> 00:00:39,239
objects are very important for

14
00:00:39,239 --> 00:00:42,300
cryptography and complexity Theory

15
00:00:42,300 --> 00:00:45,300
in fact we use uh almost all of The

16
00:00:45,300 --> 00:00:47,040
cryptographic Primitives are built from

17
00:00:47,040 --> 00:00:49,620
uh the plethora or random objects that

18
00:00:49,620 --> 00:00:51,660
we have so it's natural to ask if we

19
00:00:51,660 --> 00:00:53,460
have something similar in the quantum

20
00:00:53,460 --> 00:00:54,600
case

21
00:00:54,600 --> 00:00:56,399
to Define pseudo Randomness in the

22
00:00:56,399 --> 00:00:57,899
quantum case we should first see what

23
00:00:57,899 --> 00:00:59,699
Randomness looks like in the quantum

24
00:00:59,699 --> 00:01:00,899
case

25
00:01:00,899 --> 00:01:03,660
a little non-trivial to Define since the

26
00:01:03,660 --> 00:01:06,180
space we have is continuous but there's

27
00:01:06,180 --> 00:01:08,520
this notion called R random states which

28
00:01:08,520 --> 00:01:10,380
looks like essentially picking a random

29
00:01:10,380 --> 00:01:12,840
point from this continuous space

30
00:01:12,840 --> 00:01:16,200
so with this Randomness with this

31
00:01:16,200 --> 00:01:17,939
definition of Randomness in mind we can

32
00:01:17,939 --> 00:01:18,659
Define

33
00:01:18,659 --> 00:01:20,640
pseudorandom Quantum states to be

34
00:01:20,640 --> 00:01:23,100
efficiently computable states that look

35
00:01:23,100 --> 00:01:25,040
like our random States

36
00:01:25,040 --> 00:01:28,920
formally we need two properties one

37
00:01:28,920 --> 00:01:32,100
efficient generation so given a key K

38
00:01:32,100 --> 00:01:34,979
there needs to be uh so there needs to

39
00:01:34,979 --> 00:01:37,740
be an efficient circuit policy circuit G

40
00:01:37,740 --> 00:01:40,680
such that given a key K it produces an N

41
00:01:40,680 --> 00:01:43,860
cubed State we call this an nprs

42
00:01:43,860 --> 00:01:45,900
the and we need a pseudo Randomness

43
00:01:45,900 --> 00:01:47,640
property from this

44
00:01:47,640 --> 00:01:49,860
it's defined similar to The Way We

45
00:01:49,860 --> 00:01:52,020
Define it classically so the output of

46
00:01:52,020 --> 00:01:53,759
the PRS generator should be

47
00:01:53,759 --> 00:01:55,740
computationally indistinguishable from a

48
00:01:55,740 --> 00:01:57,899
high random state

49
00:01:57,899 --> 00:01:59,820
though this is not enough for most of

50
00:01:59,820 --> 00:02:01,380
the applications

51
00:02:01,380 --> 00:02:03,780
and this is because we can't copy

52
00:02:03,780 --> 00:02:05,280
Quantum States

53
00:02:05,280 --> 00:02:09,479
so uh once you do any computation on one

54
00:02:09,479 --> 00:02:11,459
of these states we lose uh we

55
00:02:11,459 --> 00:02:13,860
potentially can lose the state hence we

56
00:02:13,860 --> 00:02:15,480
work with a polynomial definition of

57
00:02:15,480 --> 00:02:17,520
this where we are given polynomially

58
00:02:17,520 --> 00:02:19,319
many copies of the pr State and

59
00:02:19,319 --> 00:02:21,120
polynomial copies of the higher random

60
00:02:21,120 --> 00:02:22,260
State and this should still be

61
00:02:22,260 --> 00:02:24,840
computationally indistinguishable

62
00:02:24,840 --> 00:02:26,580
now that we have a definition it's

63
00:02:26,580 --> 00:02:28,739
natural to ask for constructions so we

64
00:02:28,739 --> 00:02:31,260
know how to construct PR State uh PRS

65
00:02:31,260 --> 00:02:33,660
from one way functions this first

66
00:02:33,660 --> 00:02:35,700
construction was given by G Leo and song

67
00:02:35,700 --> 00:02:37,980
in 2018 and then further constructions

68
00:02:37,980 --> 00:02:42,720
were given by brokers in 2019 and 2020.

69
00:02:42,720 --> 00:02:44,819
one of the most studied construction is

70
00:02:44,819 --> 00:02:48,000
the binary phase bra uh is the PRS where

71
00:02:48,000 --> 00:02:49,080
we give

72
00:02:49,080 --> 00:02:51,239
random phases to each computational

73
00:02:51,239 --> 00:02:54,480
basis state where the where the phase is

74
00:02:54,480 --> 00:02:56,160
chosen by a prf

75
00:02:56,160 --> 00:02:58,920
a pseudo random function

76
00:02:58,920 --> 00:03:00,480
so

77
00:03:00,480 --> 00:03:02,819
now that we uh so we know how to

78
00:03:02,819 --> 00:03:05,400
construct PRS from one way functions but

79
00:03:05,400 --> 00:03:07,440
our one-way functions necessary to

80
00:03:07,440 --> 00:03:10,280
construct PRS is an interesting question

81
00:03:10,280 --> 00:03:13,860
answered this in 2020 where he gave an

82
00:03:13,860 --> 00:03:15,540
oracle with respect to which one-way

83
00:03:15,540 --> 00:03:17,580
functions do not exist but through the

84
00:03:17,580 --> 00:03:19,440
random States still exist

85
00:03:19,440 --> 00:03:21,300
this uh

86
00:03:21,300 --> 00:03:23,159
this is very this is very interesting

87
00:03:23,159 --> 00:03:25,440
since this potentially gives us a set of

88
00:03:25,440 --> 00:03:26,879
weaker assumptions where we don't even

89
00:03:26,879 --> 00:03:28,800
have one-way functions but we can still

90
00:03:28,800 --> 00:03:31,080
construct cryptography parameters

91
00:03:31,080 --> 00:03:35,459
so in fact uh and also another question

92
00:03:35,459 --> 00:03:37,800
we get here is since one way functions

93
00:03:37,800 --> 00:03:39,720
are not necessary can we construct PRS

94
00:03:39,720 --> 00:03:41,459
information theoretically

95
00:03:41,459 --> 00:03:43,379
we know that classically even one bit

96
00:03:43,379 --> 00:03:45,420
stretches uh require computational

97
00:03:45,420 --> 00:03:47,099
assumptions

98
00:03:47,099 --> 00:03:50,000
but in 2020

99
00:03:50,000 --> 00:03:53,879
showed that there exists a c such that c

100
00:03:53,879 --> 00:03:56,459
times log Lambda length PRS can't be

101
00:03:56,459 --> 00:03:58,799
constructed in permission theoretically

102
00:03:58,799 --> 00:04:01,920
in our paper we show that if the output

103
00:04:01,920 --> 00:04:03,720
length is equal to or greater than log

104
00:04:03,720 --> 00:04:06,420
Lambda then we can't have information

105
00:04:06,420 --> 00:04:08,099
theoretic security we need some

106
00:04:08,099 --> 00:04:10,980
computational assumptions

107
00:04:10,980 --> 00:04:13,200
now that we have now that we know

108
00:04:13,200 --> 00:04:15,599
constructions of this uh we we should

109
00:04:15,599 --> 00:04:16,680
ask whether we can construct

110
00:04:16,680 --> 00:04:18,959
cryptographic Primitives from this

111
00:04:18,959 --> 00:04:22,979
a q by and m y in 2022 showed uh that we

112
00:04:22,979 --> 00:04:24,360
could construct some cryptographic

113
00:04:24,360 --> 00:04:28,040
Primitives from students

114
00:04:28,139 --> 00:04:31,919
so to do this aqy Define A Primitive

115
00:04:31,919 --> 00:04:33,960
called pseudo random function like

116
00:04:33,960 --> 00:04:35,220
states which is the analog of

117
00:04:35,220 --> 00:04:36,840
pseudorandom functions in the quantum

118
00:04:36,840 --> 00:04:38,460
case

119
00:04:38,460 --> 00:04:40,620
and we again require two properties from

120
00:04:40,620 --> 00:04:43,800
this so given a key K and an index X

121
00:04:43,800 --> 00:04:47,460
should produce an in qubit state and

122
00:04:47,460 --> 00:04:50,400
they Define security to be uh they

123
00:04:50,400 --> 00:04:52,380
Define selective security for this where

124
00:04:52,380 --> 00:04:55,620
we are we choose uh we choose

125
00:04:55,620 --> 00:04:57,240
polynomially many queries in the

126
00:04:57,240 --> 00:05:00,900
beginning and polynomial many copies of

127
00:05:00,900 --> 00:05:04,259
the output of the PRS prfs uh generator

128
00:05:04,259 --> 00:05:06,180
on these polynomial many queries should

129
00:05:06,180 --> 00:05:07,440
still be indistinguishable from

130
00:05:07,440 --> 00:05:09,419
polynomially many copies of polynomial

131
00:05:09,419 --> 00:05:11,340
remaining States sampled from a random

132
00:05:11,340 --> 00:05:12,960
distribution

133
00:05:12,960 --> 00:05:15,060
but this is not enough for most

134
00:05:15,060 --> 00:05:17,120
applications because

135
00:05:17,120 --> 00:05:20,460
sometimes the we need the adversary to

136
00:05:20,460 --> 00:05:23,160
be able to choose queries adaptively

137
00:05:23,160 --> 00:05:26,220
that is choose a query query number two

138
00:05:26,220 --> 00:05:29,220
after querying the uh after querying the

139
00:05:29,220 --> 00:05:31,020
function on the first query

140
00:05:31,020 --> 00:05:35,100
further sometimes the adversary also

141
00:05:35,100 --> 00:05:38,699
gets a Quantum access to the to the

142
00:05:38,699 --> 00:05:42,840
function so the adversary can submit a

143
00:05:42,840 --> 00:05:45,600
superposition over query States and gets

144
00:05:45,600 --> 00:05:48,660
as uh gets a superposition of answers

145
00:05:48,660 --> 00:05:51,080
and result

146
00:05:51,300 --> 00:05:54,720
so a question should uh that can be

147
00:05:54,720 --> 00:05:56,580
asked here is can we construct these

148
00:05:56,580 --> 00:05:59,039
stronger Notions the Adaptive querying

149
00:05:59,039 --> 00:06:00,360
and Quantum access

150
00:06:00,360 --> 00:06:02,580
so in our paper we give constructions of

151
00:06:02,580 --> 00:06:05,940
adaptive querying adaptive query prfs

152
00:06:05,940 --> 00:06:07,919
from post Quantum One Way functions and

153
00:06:07,919 --> 00:06:10,620
we also give uh constructions of quantum

154
00:06:10,620 --> 00:06:13,680
access adaptive prfs from Quantum and

155
00:06:13,680 --> 00:06:14,759
wave functions

156
00:06:14,759 --> 00:06:17,280
we also give a Sim a simpler proof of

157
00:06:17,280 --> 00:06:21,180
binary phase PRS that we just saw we had

158
00:06:21,180 --> 00:06:23,400
a proof of security from broker scheme

159
00:06:23,400 --> 00:06:25,560
similarly in 2019 but that was much more

160
00:06:25,560 --> 00:06:27,240
involved we gave a better representation

161
00:06:27,240 --> 00:06:28,860
of our random States and use this to

162
00:06:28,860 --> 00:06:31,440
prove that binary phase PRS is still

163
00:06:31,440 --> 00:06:33,120
secure

164
00:06:33,120 --> 00:06:34,860
so coming back to applications from

165
00:06:34,860 --> 00:06:39,240
cryptography we know that in 2022 aqy

166
00:06:39,240 --> 00:06:42,080
and M by prove uh constructed

167
00:06:42,080 --> 00:06:46,080
cryptographic Primitives from PRS

168
00:06:46,080 --> 00:06:48,419
but one common property from the of

169
00:06:48,419 --> 00:06:50,759
these words that they they required

170
00:06:50,759 --> 00:06:52,860
Quantum communication

171
00:06:52,860 --> 00:06:55,139
we expect Quantum communication to be a

172
00:06:55,139 --> 00:06:57,740
much more expensive resource even when

173
00:06:57,740 --> 00:07:01,259
uh quantum computers become prevalent so

174
00:07:01,259 --> 00:07:04,139
a natural question is do is quantum

175
00:07:04,139 --> 00:07:05,880
communication required whenever we use

176
00:07:05,880 --> 00:07:07,319
PRS

177
00:07:07,319 --> 00:07:09,660
we in our paper we construct commitment

178
00:07:09,660 --> 00:07:11,280
schemes with computational binding and

179
00:07:11,280 --> 00:07:14,160
statistical hiding that only require uh

180
00:07:14,160 --> 00:07:16,020
classical communication we also give

181
00:07:16,020 --> 00:07:18,419
prsbase Quantum one time part scheme

182
00:07:18,419 --> 00:07:19,740
which only requires classical

183
00:07:19,740 --> 00:07:21,720
communication

184
00:07:21,720 --> 00:07:23,520
so on to their techniques due to

185
00:07:23,520 --> 00:07:25,280
constraint in time I'll only be covering

186
00:07:25,280 --> 00:07:27,660
techniques in the computational

187
00:07:27,660 --> 00:07:30,180
Assumption section and in the commitment

188
00:07:30,180 --> 00:07:32,160
scheme section the rest of the

189
00:07:32,160 --> 00:07:33,960
techniques can be found in the paper

190
00:07:33,960 --> 00:07:37,740
in the full version of the people so uh

191
00:07:37,740 --> 00:07:40,080
the statement for com uh computational

192
00:07:40,080 --> 00:07:43,979
assumptions is if G is a log length PRS

193
00:07:43,979 --> 00:07:45,960
then there must exist a dense

194
00:07:45,960 --> 00:07:48,180
distinguisher such that this

195
00:07:48,180 --> 00:07:49,979
distinguisher can distinguish with at

196
00:07:49,979 --> 00:07:52,139
least probability one-third

197
00:07:52,139 --> 00:07:55,440
so the first uh the first observation

198
00:07:55,440 --> 00:07:58,680
here is that g is almost always pure now

199
00:07:58,680 --> 00:08:00,419
the output of the PRS is almost always

200
00:08:00,419 --> 00:08:03,960
pure this is because if it is not pure

201
00:08:03,960 --> 00:08:06,180
then the distinguisher can run a swap

202
00:08:06,180 --> 00:08:10,919
test to check for Purity and uh on big

203
00:08:10,919 --> 00:08:12,840
enough number of uh on polynomial

204
00:08:12,840 --> 00:08:14,340
meaning copies of this it can

205
00:08:14,340 --> 00:08:16,199
distinguish with probability one third

206
00:08:16,199 --> 00:08:18,780
since high random state is always clear

207
00:08:18,780 --> 00:08:22,860
so once we have this we look uh we prove

208
00:08:22,860 --> 00:08:26,160
this by a dimensionality argument so the

209
00:08:26,160 --> 00:08:28,139
dimension of the space spanned by all

210
00:08:28,139 --> 00:08:30,840
the PRS outputs is less than 2 to the

211
00:08:30,840 --> 00:08:33,899
Lambda this is because uh there's Atmos

212
00:08:33,899 --> 00:08:37,520
2 to the Lambda number of keys

213
00:08:41,299 --> 00:08:45,360
span this Dimension this is equal to the

214
00:08:45,360 --> 00:08:47,760
dimension of the symmetric Subspace on D

215
00:08:47,760 --> 00:08:49,200
copies

216
00:08:49,200 --> 00:08:51,360
in particular when p is said to be

217
00:08:51,360 --> 00:08:54,000
Lambda plus one this is greater than 6

218
00:08:54,000 --> 00:08:56,279
times 2 to the Lambda so we have a

219
00:08:56,279 --> 00:08:58,200
natural distinguisher here

220
00:08:58,200 --> 00:09:01,380
which we just project on all this on the

221
00:09:01,380 --> 00:09:03,779
space stand by all the copies all the

222
00:09:03,779 --> 00:09:05,519
outputs of PR States

223
00:09:05,519 --> 00:09:08,399
uh when we project here TRS always

224
00:09:08,399 --> 00:09:11,220
passes this test but the higher random

225
00:09:11,220 --> 00:09:13,019
seats will fail this test with at least

226
00:09:13,019 --> 00:09:16,019
one third probability hence we get a

227
00:09:16,019 --> 00:09:18,899
distinguishing probability of one third

228
00:09:18,899 --> 00:09:21,660
now on to the techniques and uh

229
00:09:21,660 --> 00:09:23,220
constructing the commitment scheme we

230
00:09:23,220 --> 00:09:24,600
start with the commitment scheme given

231
00:09:24,600 --> 00:09:25,980
by a2y

232
00:09:25,980 --> 00:09:30,000
here the commitment fees was to uh was a

233
00:09:30,000 --> 00:09:32,100
two message uh

234
00:09:32,100 --> 00:09:35,160
was a two message scheme and then the

235
00:09:35,160 --> 00:09:37,440
reveal phase had just one message where

236
00:09:37,440 --> 00:09:40,260
Alice sent all the uh all the randomness

237
00:09:40,260 --> 00:09:42,000
to Bob

238
00:09:42,000 --> 00:09:45,540
not uh one thing to note here is that

239
00:09:45,540 --> 00:09:47,220
the quantum communication only happened

240
00:09:47,220 --> 00:09:49,560
in the commitment phase

241
00:09:49,560 --> 00:09:51,420
uh the quantum communication only

242
00:09:51,420 --> 00:09:54,959
happened in the uh commitment phase

243
00:09:54,959 --> 00:09:58,380
so to convert this uh to convert this

244
00:09:58,380 --> 00:10:00,360
Quantum message to classical

245
00:10:00,360 --> 00:10:03,060
we use techniques used in tomography

246
00:10:03,060 --> 00:10:05,220
tomography is a procedure where we can

247
00:10:05,220 --> 00:10:07,800
get a classical description of a Quantum

248
00:10:07,800 --> 00:10:10,500
state in particular given some copies of

249
00:10:10,500 --> 00:10:14,519
a state row we get M such that m is

250
00:10:14,519 --> 00:10:17,279
still closed in row in some in some

251
00:10:17,279 --> 00:10:19,680
normies

252
00:10:19,680 --> 00:10:22,800
so notice that the number of copies here

253
00:10:22,800 --> 00:10:25,560
needs to be exponential but since n is

254
00:10:25,560 --> 00:10:28,080
log Lambda we we get this to still be

255
00:10:28,080 --> 00:10:30,839
efficiently computable

256
00:10:30,839 --> 00:10:33,180
now with this in mind we can just we

257
00:10:33,180 --> 00:10:34,680
replace the

258
00:10:34,680 --> 00:10:36,240
we replace the quantum communication

259
00:10:36,240 --> 00:10:38,700
with the output of tomography which is a

260
00:10:38,700 --> 00:10:40,380
classical message

261
00:10:40,380 --> 00:10:43,380
uh this converts the scheme to just have

262
00:10:43,380 --> 00:10:45,000
classical communication but the

263
00:10:45,000 --> 00:10:47,760
adversary can still cheat this is this

264
00:10:47,760 --> 00:10:49,440
is because we have no way of checking

265
00:10:49,440 --> 00:10:52,339
whether adversary actually run uh

266
00:10:52,339 --> 00:10:56,880
tomography or just uh outputted uh and a

267
00:10:56,880 --> 00:10:58,260
random Matrix

268
00:10:58,260 --> 00:10:59,880
to uh

269
00:10:59,880 --> 00:11:02,700
to detect this we equip we build this

270
00:11:02,700 --> 00:11:04,980
primitive called verifiable tomography

271
00:11:04,980 --> 00:11:07,620
where we equip tomography whether verify

272
00:11:07,620 --> 00:11:09,899
algorithm which which can be used to

273
00:11:09,899 --> 00:11:11,640
detect whether the adversary actually

274
00:11:11,640 --> 00:11:14,579
brand demography or not hence to convert

275
00:11:14,579 --> 00:11:17,160
uh hence to convert the scheme

276
00:11:17,160 --> 00:11:19,440
completely now we replace the quantum

277
00:11:19,440 --> 00:11:21,000
message with the output of tomography

278
00:11:21,000 --> 00:11:24,480
and during the reveal phase Bob runs uh

279
00:11:24,480 --> 00:11:28,160
very uh verified to check whether

280
00:11:28,160 --> 00:11:31,800
a wizard AdWords whether Alice behaved

281
00:11:31,800 --> 00:11:33,360
honestly

282
00:11:33,360 --> 00:11:35,339
and this is how we convert the scheme to

283
00:11:35,339 --> 00:11:37,500
just our classical computation

284
00:11:37,500 --> 00:11:40,560
here's a summary of all that uh of all

285
00:11:40,560 --> 00:11:43,019
the results that we have in the paper uh

286
00:11:43,019 --> 00:11:45,560
thank you

287
00:11:51,200 --> 00:11:55,700
thank you very much uh any questions

288
00:11:58,140 --> 00:11:59,579
can you tell us a little bit more about

289
00:11:59,579 --> 00:12:01,680
the verifiable tomography pad

290
00:12:01,680 --> 00:12:06,480
so we we in fact can we impacted a

291
00:12:06,480 --> 00:12:08,779
generic scheme to convert any tomography

292
00:12:08,779 --> 00:12:12,360
uh any tomography algorithm to equip any

293
00:12:12,360 --> 00:12:14,160
tomography algorithm with a verify

294
00:12:14,160 --> 00:12:16,500
scheme there is a natural way to

295
00:12:16,500 --> 00:12:18,240
construct this by just running enough

296
00:12:18,240 --> 00:12:20,420
number of of

297
00:12:20,420 --> 00:12:23,220
tomography uh to running tomography

298
00:12:23,220 --> 00:12:24,480
enough and then just checking the

299
00:12:24,480 --> 00:12:26,519
distance you know

300
00:12:26,519 --> 00:12:29,060
thanks

301
00:12:31,740 --> 00:12:34,260
can you again once again elaborate what

302
00:12:34,260 --> 00:12:36,180
do you mean by verifiable tomography I

303
00:12:36,180 --> 00:12:38,700
mean what's really the attacker model

304
00:12:38,700 --> 00:12:43,320
yes sorry uh what is uh can you uh

305
00:12:43,320 --> 00:12:44,940
briefly elaborate what is verifiable

306
00:12:44,940 --> 00:12:46,079
demography I mean what's the attack

307
00:12:46,079 --> 00:12:47,880
model what is the attacker trying to

308
00:12:47,880 --> 00:12:49,560
what's the bad event

309
00:12:49,560 --> 00:12:53,700
so we uh so one of the parties knows the

310
00:12:53,700 --> 00:12:55,680
channel using which the status produced

311
00:12:55,680 --> 00:12:58,260
where the channel takes his input some

312
00:12:58,260 --> 00:13:03,000
classical string and then where uh

313
00:13:03,000 --> 00:13:07,260
then the uh then the party needs to

314
00:13:07,260 --> 00:13:10,260
check whether in fact uh the state

315
00:13:10,260 --> 00:13:13,680
produced was produced using this channel

316
00:13:13,680 --> 00:13:15,899
on the classical string or not so to

317
00:13:15,899 --> 00:13:20,100
verify uh to verify party number one

318
00:13:20,100 --> 00:13:22,740
since the string that it used on the

319
00:13:22,740 --> 00:13:24,899
channel and then party number two just

320
00:13:24,899 --> 00:13:27,420
runs uh the verify scheme with the

321
00:13:27,420 --> 00:13:29,100
classical string and channel information

322
00:13:29,100 --> 00:13:32,760
and output of tomography

323
00:13:32,760 --> 00:13:34,860
I see because I was just wondering that

324
00:13:34,860 --> 00:13:36,660
you can rerun the protocol again

325
00:13:36,660 --> 00:13:39,120
that can be like a I mean verify

326
00:13:39,120 --> 00:13:41,459
algorithm essentially it's okay I see

327
00:13:41,459 --> 00:13:44,479
okay thank you

328
00:13:51,540 --> 00:13:53,760
you get a non-attractive commitment or

329
00:13:53,760 --> 00:13:56,399
the comments phase is Interactive

330
00:13:56,399 --> 00:13:59,399
it's a two message so the commit phase

331
00:13:59,399 --> 00:14:02,959
is also interactive yes

332
00:14:03,980 --> 00:14:06,720
uh okay thank you very much let's thank

333
00:14:06,720 --> 00:14:09,320
the speaker again

334
00:14:56,639 --> 00:15:00,360
okay so next we have a remote talk

335
00:15:00,360 --> 00:15:03,839
um by uh Ahmad Reza rahimi I hope it

336
00:15:03,839 --> 00:15:06,980
said your name reasonably accurately

337
00:15:06,980 --> 00:15:07,620
[Music]

338
00:15:07,620 --> 00:15:08,600
um

339
00:15:08,600 --> 00:15:11,220
and take it away

340
00:15:11,220 --> 00:15:13,680
okay so here's my screen share fine

341
00:15:13,680 --> 00:15:17,060
everything fine with that or

342
00:15:17,519 --> 00:15:18,720
yeah

343
00:15:18,720 --> 00:15:21,060
perfect so today I'm going to talk about

344
00:15:21,060 --> 00:15:23,399
uh candidate chapter claw free functions

345
00:15:23,399 --> 00:15:25,320
from group actions with applications to

346
00:15:25,320 --> 00:15:27,240
Quantum protocols this is a joint work

347
00:15:27,240 --> 00:15:30,060
with Naveed alamati and Julia malawalta

348
00:15:30,060 --> 00:15:33,300
and oh so and in this talk I'm gonna

349
00:15:33,300 --> 00:15:35,339
mainly focus on the trapdoclofery

350
00:15:35,339 --> 00:15:37,980
functions and group actions

351
00:15:37,980 --> 00:15:40,220
foreign

352
00:15:43,699 --> 00:15:46,079
functions uh

353
00:15:46,079 --> 00:15:48,360
they're they're functions so let's talk

354
00:15:48,360 --> 00:15:50,459
about chapter functions first which

355
00:15:50,459 --> 00:15:52,139
they're functions that are easy they're

356
00:15:52,139 --> 00:15:54,360
they're functions from a domain X just

357
00:15:54,360 --> 00:15:56,940
to range y that are easy to evaluate in

358
00:15:56,940 --> 00:15:58,980
One Direction and on hard to evaluate in

359
00:15:58,980 --> 00:16:00,480
the other direction unless you have the

360
00:16:00,480 --> 00:16:02,880
trap door and what is the claw freeness

361
00:16:02,880 --> 00:16:04,800
property imagine this is this function

362
00:16:04,800 --> 00:16:06,600
is a two to one function

363
00:16:06,600 --> 00:16:10,500
where uh the the input is separated into

364
00:16:10,500 --> 00:16:12,779
two different two same size input

365
00:16:12,779 --> 00:16:14,820
subsets and the function is going to be

366
00:16:14,820 --> 00:16:16,860
separate into two different functions F0

367
00:16:16,860 --> 00:16:19,320
and F1 which these two functions are

368
00:16:19,320 --> 00:16:22,680
bijective functions and F0 is a function

369
00:16:22,680 --> 00:16:25,199
from x0 to the output range and F1 is a

370
00:16:25,199 --> 00:16:27,540
function from X1 to Output range and a

371
00:16:27,540 --> 00:16:30,420
claw is referred to as two inputs uh x0

372
00:16:30,420 --> 00:16:32,940
and X1 which they are mapped to the same

373
00:16:32,940 --> 00:16:35,480
output and the claw freeness property

374
00:16:35,480 --> 00:16:39,060
suggests that uh finding a claw should

375
00:16:39,060 --> 00:16:43,019
be hard so what is a let's try to expand

376
00:16:43,019 --> 00:16:45,600
this property to to something stronger

377
00:16:45,600 --> 00:16:48,540
which we say okay if finding a clause is

378
00:16:48,540 --> 00:16:50,699
hard what about finding any information

379
00:16:50,699 --> 00:16:53,040
about the clock which brings us to this

380
00:16:53,040 --> 00:16:55,079
other property which we call it adaptive

381
00:16:55,079 --> 00:16:57,420
hardcore bit property where adaptive

382
00:16:57,420 --> 00:16:59,100
hardcore with property suggests that

383
00:16:59,100 --> 00:17:02,100
basically if you get a any like input

384
00:17:02,100 --> 00:17:04,980
and their corresponding output

385
00:17:04,980 --> 00:17:07,859
it is hard to find any information about

386
00:17:07,859 --> 00:17:10,559
the other pre-image where the like this

387
00:17:10,559 --> 00:17:12,959
Pro this clothing this uh it is also

388
00:17:12,959 --> 00:17:15,000
guaranteed that the the other pre-image

389
00:17:15,000 --> 00:17:17,040
also exists so if I want to be more

390
00:17:17,040 --> 00:17:18,959
formal about it I can say it is hard to

391
00:17:18,959 --> 00:17:22,319
find the input X and a vector

392
00:17:22,319 --> 00:17:24,540
um DF this is a binary vector and it's

393
00:17:24,540 --> 00:17:26,819
non-zero of course and a bit C such that

394
00:17:26,819 --> 00:17:29,040
the the inner product of

395
00:17:29,040 --> 00:17:32,400
D and tweet the xor of two pre images

396
00:17:32,400 --> 00:17:35,039
equals to C so you can compare it to the

397
00:17:35,039 --> 00:17:37,200
normal uh hardcore bit property where

398
00:17:37,200 --> 00:17:40,520
this Vector T is actually a

399
00:17:40,520 --> 00:17:44,280
a constant Vector like which is one at

400
00:17:44,280 --> 00:17:47,520
one position and zero elsewhere and uh

401
00:17:47,520 --> 00:17:49,080
then this is going to give you normal

402
00:17:49,080 --> 00:17:50,880
hardcore bit property but here this

403
00:17:50,880 --> 00:17:52,919
Vector D is chosen adaptively even by

404
00:17:52,919 --> 00:17:54,900
the adversary and we're saying okay even

405
00:17:54,900 --> 00:17:56,580
if this Vector is chosen by the

406
00:17:56,580 --> 00:17:59,580
adversary still find parts it is still

407
00:17:59,580 --> 00:18:01,559
hard to find any information

408
00:18:01,559 --> 00:18:04,320
okay so why do we care about this

409
00:18:04,320 --> 00:18:07,380
property apparently uh finding both a

410
00:18:07,380 --> 00:18:09,600
pre-image and a clock an Adaptive

411
00:18:09,600 --> 00:18:11,460
hardcore bit pair is hard for any

412
00:18:11,460 --> 00:18:13,919
Quantum polynomial diameter sorry which

413
00:18:13,919 --> 00:18:15,960
this property of this adaptive Hardware

414
00:18:15,960 --> 00:18:19,320
is uh enables the trapdoor cloth free

415
00:18:19,320 --> 00:18:22,080
functions to have numerous applications

416
00:18:22,080 --> 00:18:24,240
in Quantum protocols but these things

417
00:18:24,240 --> 00:18:25,679
have been around for a while and

418
00:18:25,679 --> 00:18:27,000
recently there has been so many

419
00:18:27,000 --> 00:18:29,640
applications in Quantum protocols by

420
00:18:29,640 --> 00:18:32,220
this chapter clockery functions for

421
00:18:32,220 --> 00:18:33,780
example the test of quantum Nest search

422
00:18:33,780 --> 00:18:35,880
viable Randomness the classical

423
00:18:35,880 --> 00:18:37,559
verification of quantum computation

424
00:18:37,559 --> 00:18:40,080
Quantum fhe proof of quantum net

425
00:18:40,080 --> 00:18:41,580
deniable encryption and there are so

426
00:18:41,580 --> 00:18:43,320
many other applications so this is a

427
00:18:43,320 --> 00:18:45,600
important topic to study

428
00:18:45,600 --> 00:18:47,940
well uh there's also

429
00:18:47,940 --> 00:18:51,780
uh so we require this uh tcfs to be

430
00:18:51,780 --> 00:18:54,120
postponed and all of these postponed

431
00:18:54,120 --> 00:18:56,280
tcfs are based on the hardness of the

432
00:18:56,280 --> 00:19:00,120
quantum hardness of lwe which is okay

433
00:19:00,120 --> 00:19:02,940
but unsatisfactory so there's a natural

434
00:19:02,940 --> 00:19:07,380
question that can we get this other can

435
00:19:07,380 --> 00:19:09,960
we get the these tcfs from other Quantum

436
00:19:09,960 --> 00:19:11,460
Hardware assumption and this paper

437
00:19:11,460 --> 00:19:13,440
answers this question which is we're

438
00:19:13,440 --> 00:19:15,360
getting tcfs from isogeny based group

439
00:19:15,360 --> 00:19:18,240
actions okay so what are group actions

440
00:19:18,240 --> 00:19:20,640
group actions are some sort of functions

441
00:19:20,640 --> 00:19:22,799
that takes a group element and a set

442
00:19:22,799 --> 00:19:24,360
element as input

443
00:19:24,360 --> 00:19:28,200
and uh it Maps it to another set element

444
00:19:28,200 --> 00:19:29,880
and there is this variant of group

445
00:19:29,880 --> 00:19:31,380
actions which we call them effective

446
00:19:31,380 --> 00:19:33,720
group actions or Ed or EGA for short

447
00:19:33,720 --> 00:19:36,299
where they have this uh

448
00:19:36,299 --> 00:19:38,280
properties where they can be efficiently

449
00:19:38,280 --> 00:19:40,440
computed the action can be efficiently

450
00:19:40,440 --> 00:19:42,720
computed then for example if the group

451
00:19:42,720 --> 00:19:45,240
is an additive group the G Plus X action

452
00:19:45,240 --> 00:19:48,900
on x g plus h action on X for G and H in

453
00:19:48,900 --> 00:19:51,059
the group is going to be associate is

454
00:19:51,059 --> 00:19:52,500
going to have like associativity

455
00:19:52,500 --> 00:19:55,140
property and the identity element of the

456
00:19:55,140 --> 00:19:58,140
group mapping uh Maps each set element

457
00:19:58,140 --> 00:19:59,340
to itself

458
00:19:59,340 --> 00:20:01,380
so what about hardness assumptions that

459
00:20:01,380 --> 00:20:03,059
we can get from these group actions

460
00:20:03,059 --> 00:20:05,400
there's this one Waynes property where

461
00:20:05,400 --> 00:20:07,500
it says that given a set element and a

462
00:20:07,500 --> 00:20:09,419
group and a random group element action

463
00:20:09,419 --> 00:20:12,059
on this act on this set Element no

464
00:20:12,059 --> 00:20:14,400
attacker can find the group element so

465
00:20:14,400 --> 00:20:16,020
you can think of it as something similar

466
00:20:16,020 --> 00:20:17,840
to discrete logger

467
00:20:17,840 --> 00:20:20,160
assumption where this where in the

468
00:20:20,160 --> 00:20:22,860
discrete log setting this action can be

469
00:20:22,860 --> 00:20:25,320
represented by the exponentiation and

470
00:20:25,320 --> 00:20:27,179
the the set can be represented by an

471
00:20:27,179 --> 00:20:29,340
actual group with the Generator X and

472
00:20:29,340 --> 00:20:33,299
the group is zp star okay and then

473
00:20:33,299 --> 00:20:37,140
finding uh having x and x to the G is

474
00:20:37,140 --> 00:20:38,640
hard to find the group

475
00:20:38,640 --> 00:20:42,539
the G okay so this one way EGA doesn't

476
00:20:42,539 --> 00:20:45,179
have enough uh enough structure to build

477
00:20:45,179 --> 00:20:47,580
to have like to be able so that it

478
00:20:47,580 --> 00:20:48,900
doesn't enable us to build some

479
00:20:48,900 --> 00:20:51,780
cryptographic Primitives on on it then

480
00:20:51,780 --> 00:20:54,059
we Define another uh

481
00:20:54,059 --> 00:20:56,400
assumption which was defined by alamati

482
00:20:56,400 --> 00:20:58,320
at all which is called in Asia group

483
00:20:58,320 --> 00:21:00,780
2020. and this assumption is called

484
00:21:00,780 --> 00:21:02,820
linear hidden shift assumption

485
00:21:02,820 --> 00:21:04,679
where it says that having a matrix of

486
00:21:04,679 --> 00:21:07,200
group element a vector of set elements

487
00:21:07,200 --> 00:21:10,559
and a binary vector v which is here or

488
00:21:10,559 --> 00:21:14,100
secret vector and MV action on X you can

489
00:21:14,100 --> 00:21:16,980
think of this MV as a some sort of a

490
00:21:16,980 --> 00:21:19,200
subset sum and this Tuple should be

491
00:21:19,200 --> 00:21:21,240
computational indistinguishable from a

492
00:21:21,240 --> 00:21:24,059
tuple with x m and some random set

493
00:21:24,059 --> 00:21:26,880
elements so at the first glance it

494
00:21:26,880 --> 00:21:29,280
reminds you of lwe

495
00:21:29,280 --> 00:21:31,440
where there is action but there's no

496
00:21:31,440 --> 00:21:34,020
noise in this setting and the reason

497
00:21:34,020 --> 00:21:36,240
that it Still Remains hard is that once

498
00:21:36,240 --> 00:21:38,580
you compute uh once you go to the your

499
00:21:38,580 --> 00:21:40,740
compute an action you're in the set and

500
00:21:40,740 --> 00:21:42,299
instead you do not assume that you have

501
00:21:42,299 --> 00:21:43,919
any structure you do not you cannot

502
00:21:43,919 --> 00:21:46,799
perform any operation so the components

503
00:21:46,799 --> 00:21:48,900
of this MV action on X cannot be

504
00:21:48,900 --> 00:21:50,039
combined

505
00:21:50,039 --> 00:21:52,100
and this is important because

506
00:21:52,100 --> 00:21:55,140
intuitively it doesn't allow you to have

507
00:21:55,140 --> 00:21:57,480
some sort of Shores like algorithms on

508
00:21:57,480 --> 00:21:58,380
the

509
00:21:58,380 --> 00:22:00,900
under LHS assumption

510
00:22:00,900 --> 00:22:04,200
okay now that we have our assumption

511
00:22:04,200 --> 00:22:06,659
let's try to create a simple claw free

512
00:22:06,659 --> 00:22:09,299
function for from our assumption and

513
00:22:09,299 --> 00:22:11,520
this function let's assume that b is a

514
00:22:11,520 --> 00:22:13,260
large integer and the domain of the

515
00:22:13,260 --> 00:22:15,600
function is 0 1 times B to the N to some

516
00:22:15,600 --> 00:22:17,880
set x to the N so what are the public

517
00:22:17,880 --> 00:22:20,820
parameters it's basically the the

518
00:22:20,820 --> 00:22:23,700
Challenge from LHS assumption and the

519
00:22:23,700 --> 00:22:26,159
evaluation of the function on some bits

520
00:22:26,159 --> 00:22:30,000
and uh on some bit B and set and Vector

521
00:22:30,000 --> 00:22:32,640
s in the domain is going to be M times S

522
00:22:32,640 --> 00:22:35,700
Plus B dot v action on X where the if B

523
00:22:35,700 --> 00:22:38,460
equals zero so this B is actually uh

524
00:22:38,460 --> 00:22:41,039
getting the index of the function b

525
00:22:41,039 --> 00:22:44,780
equals zero then you can compute the MS

526
00:22:44,780 --> 00:22:48,059
since you have S and M and if B equals

527
00:22:48,059 --> 00:22:50,880
one since you have MV as well you can

528
00:22:50,880 --> 00:22:53,100
compute it okay what about the club

529
00:22:53,100 --> 00:22:54,480
freeness property

530
00:22:54,480 --> 00:22:56,700
so the cloth Readiness property says

531
00:22:56,700 --> 00:22:58,260
that uh

532
00:22:58,260 --> 00:23:00,659
says that you can find finding a claw

533
00:23:00,659 --> 00:23:03,179
breaks the LHS assumption

534
00:23:03,179 --> 00:23:05,400
okay so what how can you break the LHS

535
00:23:05,400 --> 00:23:06,900
assumption you can find the the

536
00:23:06,900 --> 00:23:10,080
difference between s0 and S1 in v and

537
00:23:10,080 --> 00:23:12,900
then then break the LHS assumption

538
00:23:12,900 --> 00:23:15,059
and then break this the shift Vector of

539
00:23:15,059 --> 00:23:16,440
the elections assumption

540
00:23:16,440 --> 00:23:18,120
so there's a problem with this function

541
00:23:18,120 --> 00:23:22,799
there is no trapdoor okay and uh

542
00:23:22,799 --> 00:23:24,720
and also it is hard to argue the

543
00:23:24,720 --> 00:23:27,179
Adaptive hardcore bit hardcore bit

544
00:23:27,179 --> 00:23:29,580
property of this function

545
00:23:29,580 --> 00:23:31,500
where we can we can deal with these

546
00:23:31,500 --> 00:23:33,419
issues of the no trapdoor issue which

547
00:23:33,419 --> 00:23:36,120
can be resolved by some sort of the

548
00:23:36,120 --> 00:23:37,860
extended some sort of other assumption

549
00:23:37,860 --> 00:23:39,480
which you call it extended LHS

550
00:23:39,480 --> 00:23:40,620
assumption which is a stronger

551
00:23:40,620 --> 00:23:43,380
assumption than the LHS and for adaptive

552
00:23:43,380 --> 00:23:46,380
hardcore with proof uh we Define a new

553
00:23:46,380 --> 00:23:48,419
notion called direct product adaptive

554
00:23:48,419 --> 00:23:50,520
hardcore bit which we get to it in the

555
00:23:50,520 --> 00:23:52,020
next slide so let's remind ourselves

556
00:23:52,020 --> 00:23:53,520
what was the Adaptive hardcore video

557
00:23:53,520 --> 00:23:55,799
that is adaptive hardcore bit said that

558
00:23:55,799 --> 00:24:00,000
uh finding a pre-image and an arbitrary

559
00:24:00,000 --> 00:24:01,919
non-zero binary vector and any

560
00:24:01,919 --> 00:24:03,780
information about this other this pre

561
00:24:03,780 --> 00:24:06,000
the other pre-image is hard but for any

562
00:24:06,000 --> 00:24:08,820
qpt adversary okay and in the paper by

563
00:24:08,820 --> 00:24:10,320
breakersky at all they said that there

564
00:24:10,320 --> 00:24:11,900
exists some efficient transformation

565
00:24:11,900 --> 00:24:15,360
that can translate uh like this normal

566
00:24:15,360 --> 00:24:19,140
adaptive hardcore bits uh to pull to

567
00:24:19,140 --> 00:24:22,620
some other Tuple of like d and some of

568
00:24:22,620 --> 00:24:25,679
vector D and D Prime and the inner

569
00:24:25,679 --> 00:24:28,020
product of this D Prime with the shift

570
00:24:28,020 --> 00:24:29,520
Vector you can think of this shift

571
00:24:29,520 --> 00:24:30,840
Vector as input of the function the

572
00:24:30,840 --> 00:24:32,220
topic parameters with these public

573
00:24:32,220 --> 00:24:34,320
parameters what does it say it says that

574
00:24:34,320 --> 00:24:35,880
adaptive hardcore bit property is

575
00:24:35,880 --> 00:24:37,919
essentially the same as finding any

576
00:24:37,919 --> 00:24:40,200
non-trivial parity of the shift Vector

577
00:24:40,200 --> 00:24:42,659
we can we can argue we can emphasize

578
00:24:42,659 --> 00:24:44,700
that this transformation is not a

579
00:24:44,700 --> 00:24:47,460
general generic transformation however

580
00:24:47,460 --> 00:24:50,400
this is uh something specific to their

581
00:24:50,400 --> 00:24:51,620
Construction

582
00:24:51,620 --> 00:24:53,539
and uh

583
00:24:53,539 --> 00:24:55,980
this this is something specific to their

584
00:24:55,980 --> 00:24:57,480
construction but we can also translate

585
00:24:57,480 --> 00:24:59,820
it to our construction as well so what

586
00:24:59,820 --> 00:25:01,740
is this direct product adaptive hardcore

587
00:25:01,740 --> 00:25:04,020
bit property it says that for any qpt

588
00:25:04,020 --> 00:25:07,380
adversary a uh given uh

589
00:25:07,380 --> 00:25:10,320
an independent uh public parameters as

590
00:25:10,320 --> 00:25:12,059
well as their evaluation on some shift

591
00:25:12,059 --> 00:25:14,820
vectors some different random shift

592
00:25:14,820 --> 00:25:17,220
vectors we want to be n it is hard to

593
00:25:17,220 --> 00:25:20,840
simultaneously find this uh this

594
00:25:20,840 --> 00:25:24,620
non-trivial parity of shift vectors

595
00:25:24,620 --> 00:25:28,020
of for all of these vectors we want to

596
00:25:28,020 --> 00:25:30,900
be in okay so we are going to find this

597
00:25:30,900 --> 00:25:33,900
D1 and the inner products for all of the

598
00:25:33,900 --> 00:25:35,700
vectors and let's compare it to the

599
00:25:35,700 --> 00:25:38,400
normal adaptive hardcore beta property

600
00:25:38,400 --> 00:25:40,740
that we had in the normal game we get

601
00:25:40,740 --> 00:25:42,960
the same theme the adversary gets the

602
00:25:42,960 --> 00:25:45,059
same thing but it argues that the

603
00:25:45,059 --> 00:25:47,700
hardness is uh it's hard to find the xor

604
00:25:47,700 --> 00:25:49,919
of all of the inner products so here the

605
00:25:49,919 --> 00:25:51,539
advantage of the adversary is something

606
00:25:51,539 --> 00:25:53,460
negligible and here it's negligibly

607
00:25:53,460 --> 00:25:56,520
close to one over two and there's a

608
00:25:56,520 --> 00:25:58,080
conjecture that we have we leave it as

609
00:25:58,080 --> 00:25:59,400
an open problem

610
00:25:59,400 --> 00:26:01,320
which is independent of knowing anything

611
00:26:01,320 --> 00:26:03,659
from group action and stuff like that

612
00:26:03,659 --> 00:26:06,000
and the conjecture is that does this

613
00:26:06,000 --> 00:26:07,620
direct product adaptive hardcore with

614
00:26:07,620 --> 00:26:09,480
property implies the Adaptive particle

615
00:26:09,480 --> 00:26:11,400
property or not okay

616
00:26:11,400 --> 00:26:14,520
so the function so now the the main part

617
00:26:14,520 --> 00:26:16,440
of the paper is to create a function

618
00:26:16,440 --> 00:26:18,120
family that satisfies this direct

619
00:26:18,120 --> 00:26:20,100
product adaptive hardcore bit property

620
00:26:20,100 --> 00:26:21,659
for that we need to define the

621
00:26:21,659 --> 00:26:23,340
correlated to the randomness first we

622
00:26:23,340 --> 00:26:25,020
say that the function family satisfies

623
00:26:25,020 --> 00:26:27,480
this correlated to the randomness if you

624
00:26:27,480 --> 00:26:30,659
have the Tuple considering containing an

625
00:26:30,659 --> 00:26:33,659
independent uh the public parameters and

626
00:26:33,659 --> 00:26:36,179
the evaluation of this function on these

627
00:26:36,179 --> 00:26:38,039
public parameters as well as the same

628
00:26:38,039 --> 00:26:40,260
input Vector W it should be

629
00:26:40,260 --> 00:26:41,580
indistinguishable computational

630
00:26:41,580 --> 00:26:44,220
indistinguishable from the the Tuple of

631
00:26:44,220 --> 00:26:46,980
public parameters and some uniform uh

632
00:26:46,980 --> 00:26:49,860
uniform elements in the the range of the

633
00:26:49,860 --> 00:26:51,840
function so now let's define this

634
00:26:51,840 --> 00:26:53,880
procedure P which we call it like

635
00:26:53,880 --> 00:26:56,159
efficient procedure P that takes the

636
00:26:56,159 --> 00:26:58,380
takes the the

637
00:26:58,380 --> 00:27:01,320
correlated to the random Tuple of a

638
00:27:01,320 --> 00:27:04,980
function over same input W as well as n

639
00:27:04,980 --> 00:27:08,279
uniform binary vectors and what it

640
00:27:08,279 --> 00:27:11,340
outputs is it somehow gets these binary

641
00:27:11,340 --> 00:27:12,960
vectors in the input of the function

642
00:27:12,960 --> 00:27:15,539
with different public parameters and the

643
00:27:15,539 --> 00:27:17,340
important part here is that this thing

644
00:27:17,340 --> 00:27:18,299
should be statistically

645
00:27:18,299 --> 00:27:20,760
indistinguishable from a tuple and

646
00:27:20,760 --> 00:27:23,340
public parameters and the evaluation of

647
00:27:23,340 --> 00:27:25,799
f on those public parameters and some

648
00:27:25,799 --> 00:27:28,620
let's say uh binary vectors which we

649
00:27:28,620 --> 00:27:30,419
call it shift Vector here

650
00:27:30,419 --> 00:27:32,640
okay and there's this theorem that we

651
00:27:32,640 --> 00:27:34,440
have in the paper that it says we say

652
00:27:34,440 --> 00:27:37,080
okay if f is a function family that

653
00:27:37,080 --> 00:27:38,640
satisfies this correlated to the

654
00:27:38,640 --> 00:27:40,440
randomness and there's a corresponding

655
00:27:40,440 --> 00:27:42,840
procedure P for f then it satisfies a

656
00:27:42,840 --> 00:27:44,580
direct product adaptive hardcore bit

657
00:27:44,580 --> 00:27:46,020
property

658
00:27:46,020 --> 00:27:49,980
and we can have the results as in this

659
00:27:49,980 --> 00:27:52,559
paper or as follows we create a we

660
00:27:52,559 --> 00:27:54,120
construct a trap tour cloth free

661
00:27:54,120 --> 00:27:56,880
function family from and this procedure

662
00:27:56,880 --> 00:27:59,580
P this finding this procedure p is the

663
00:27:59,580 --> 00:28:02,400
main part of the paper actually and we

664
00:28:02,400 --> 00:28:04,440
create this trapdoor Glory function

665
00:28:04,440 --> 00:28:06,240
family and the procedure P from extended

666
00:28:06,240 --> 00:28:09,179
LHS assumption and later we use our TCF

667
00:28:09,179 --> 00:28:12,419
to have a Quantum protocol for QB test

668
00:28:12,419 --> 00:28:15,080
thanks

669
00:28:20,340 --> 00:28:22,320
thank you very much so we have time for

670
00:28:22,320 --> 00:28:24,059
one quick question while the next

671
00:28:24,059 --> 00:28:27,500
speaker is setting up

672
00:28:27,659 --> 00:28:28,860
um

673
00:28:28,860 --> 00:28:31,020
anybody

674
00:28:31,020 --> 00:28:35,100
uh so uh I have a a quick question so oh

675
00:28:35,100 --> 00:28:37,679
okay okay great

676
00:28:37,679 --> 00:28:40,919
um so I I wanted to ask like if the

677
00:28:40,919 --> 00:28:42,539
functions are like set elements and your

678
00:28:42,539 --> 00:28:44,940
message space is like group element uh

679
00:28:44,940 --> 00:28:46,919
what is the problem to get like like

680
00:28:46,919 --> 00:28:49,440
what is the

681
00:28:49,440 --> 00:28:51,539
um like can you get a coffee function

682
00:28:51,539 --> 00:28:53,820
just by applying the group element on

683
00:28:53,820 --> 00:28:58,940
the uh set elements uh or can you not

684
00:28:58,940 --> 00:29:02,220
what do you mean by applying I mean so

685
00:29:02,220 --> 00:29:04,620
if you have F0 and F1 right so suppose

686
00:29:04,620 --> 00:29:06,720
you consider two set elements x0 as F 0

687
00:29:06,720 --> 00:29:09,900
and X1 as F1 and now your message say a

688
00:29:09,900 --> 00:29:14,340
group element G so F0 of G is G star x0

689
00:29:14,340 --> 00:29:17,700
or G Star X1 so in that case uh you

690
00:29:17,700 --> 00:29:19,200
would get a trapdoor function right

691
00:29:19,200 --> 00:29:22,020
given the discrete log of x0 x 1 you can

692
00:29:22,020 --> 00:29:25,260
invert and the claw given a claw you can

693
00:29:25,260 --> 00:29:27,960
find the discrete log so why doesn't

694
00:29:27,960 --> 00:29:29,640
that work you can have that but the

695
00:29:29,640 --> 00:29:31,140
problem is adaptive hardcore bit

696
00:29:31,140 --> 00:29:32,700
property

697
00:29:32,700 --> 00:29:34,320
how would you argue the Adaptive

698
00:29:34,320 --> 00:29:35,520
hardcore which property with this

699
00:29:35,520 --> 00:29:38,279
construction I see okay you need that I

700
00:29:38,279 --> 00:29:39,840
think if I get it correctly it is the

701
00:29:39,840 --> 00:29:41,340
same construction of the hash phone I

702
00:29:41,340 --> 00:29:42,600
mean you can tweak it to the hash

703
00:29:42,600 --> 00:29:45,080
function that they had in the uh

704
00:29:45,080 --> 00:29:47,940
yes yes exactly in the the hash function

705
00:29:47,940 --> 00:29:49,679
in that paper is what you're referring

706
00:29:49,679 --> 00:29:52,620
to but arguing the Adaptive heart orbit

707
00:29:52,620 --> 00:29:54,899
property is pretty hard for that I mean

708
00:29:54,899 --> 00:29:56,220
because you don't know how to do that

709
00:29:56,220 --> 00:29:58,520
okay okay thank you

710
00:29:58,520 --> 00:30:02,720
thanks Let's uh thank the speaker again

711
00:30:19,980 --> 00:30:24,720
I know so so next up we have

712
00:30:24,720 --> 00:30:27,720
you

713
00:31:09,059 --> 00:31:12,440
yep okay

714
00:31:12,440 --> 00:31:16,799
uh don't press that about others okay

715
00:31:16,799 --> 00:31:18,059
cool

716
00:31:18,059 --> 00:31:21,779
um hi uh hi everyone I'm jahway I'm

717
00:31:21,779 --> 00:31:23,700
going to talk about collusion resistant

718
00:31:23,700 --> 00:31:25,140
copy protection

719
00:31:25,140 --> 00:31:27,840
for water remarkable functionalities uh

720
00:31:27,840 --> 00:31:29,640
this is drawn work with chipong Liu

721
00:31:29,640 --> 00:31:33,260
lowenchen and Mark Gentry

722
00:31:33,299 --> 00:31:37,799
uh as we know there is a famous theorem

723
00:31:37,799 --> 00:31:39,960
in in Quantum information that says

724
00:31:39,960 --> 00:31:42,240
given an arbitrary or no Quantum State

725
00:31:42,240 --> 00:31:45,120
there's no uh General procedure to turn

726
00:31:45,120 --> 00:31:46,919
it into two copies Sim at the original

727
00:31:46,919 --> 00:31:49,340
one

728
00:31:49,380 --> 00:31:52,260
and this theorem has inspired some of

729
00:31:52,260 --> 00:31:55,220
the uh classically impossible impossible

730
00:31:55,220 --> 00:31:57,480
cryptography constructions uh for

731
00:31:57,480 --> 00:31:59,940
example the famous uh Quantum key

732
00:31:59,940 --> 00:32:02,760
distribution protocol uh the quantum

733
00:32:02,760 --> 00:32:05,460
money scheme which says a bank can issue

734
00:32:05,460 --> 00:32:07,980
banknotes and clonable Quantum States

735
00:32:07,980 --> 00:32:09,899
and the users cannot double spend

736
00:32:09,899 --> 00:32:12,240
because of no cloning and then there's

737
00:32:12,240 --> 00:32:14,399
this extension uh which we will focus

738
00:32:14,399 --> 00:32:16,260
today of quantum money called Quantum

739
00:32:16,260 --> 00:32:20,220
copy protection and uh some of the more

740
00:32:20,220 --> 00:32:22,080
specific extensions of quantum compute

741
00:32:22,080 --> 00:32:24,059
protection are like figure signature

742
00:32:24,059 --> 00:32:27,000
tokens which are a specific type of

743
00:32:27,000 --> 00:32:29,820
one-time signature and on global

744
00:32:29,820 --> 00:32:32,520
encryption and decryption and there are

745
00:32:32,520 --> 00:32:33,840
many more

746
00:32:33,840 --> 00:32:36,960
uh so what is quantum copy protection uh

747
00:32:36,960 --> 00:32:38,760
Quantum copy protection is a way to

748
00:32:38,760 --> 00:32:42,240
encode a classical functionality into a

749
00:32:42,240 --> 00:32:45,120
Quantum state so imagine there is a

750
00:32:45,120 --> 00:32:48,659
software vendor who wants to sell uh a

751
00:32:48,659 --> 00:32:52,260
software design and it doesn't want the

752
00:32:52,260 --> 00:32:55,140
users to to pirate and make and sell the

753
00:32:55,140 --> 00:32:57,000
power copies of course the company would

754
00:32:57,000 --> 00:32:59,520
probably go broke so what it does is

755
00:32:59,520 --> 00:33:02,940
that it uh it can first we can view this

756
00:33:02,940 --> 00:33:05,120
uh software just as a classical

757
00:33:05,120 --> 00:33:08,580
functionality right and then it uh and

758
00:33:08,580 --> 00:33:10,080
then there's a procedure that the

759
00:33:10,080 --> 00:33:11,640
software vendor turns this classical

760
00:33:11,640 --> 00:33:14,340
functionality into a Quantum State and

761
00:33:14,340 --> 00:33:16,080
then it sells this Quantum state to a

762
00:33:16,080 --> 00:33:17,100
user

763
00:33:17,100 --> 00:33:19,980
and when the user received it and it can

764
00:33:19,980 --> 00:33:22,380
just run this Quantum State uh any input

765
00:33:22,380 --> 00:33:25,260
it wants and you would get the same it

766
00:33:25,260 --> 00:33:28,019
would get get the same result as uh if

767
00:33:28,019 --> 00:33:31,559
it is running the original function f

768
00:33:31,559 --> 00:33:34,140
however however what the user is not

769
00:33:34,140 --> 00:33:36,899
able to do that if it wants to make a

770
00:33:36,899 --> 00:33:40,559
pyro copies of the program uh what it

771
00:33:40,559 --> 00:33:43,080
cannot do is that it cannot produce two

772
00:33:43,080 --> 00:33:45,779
uh programs P1 and P2 and these two two

773
00:33:45,779 --> 00:33:47,279
programs would compute the same

774
00:33:47,279 --> 00:33:50,220
functionality uh as the as the original

775
00:33:50,220 --> 00:33:53,580
function copy protection

776
00:33:53,580 --> 00:33:56,640
and I will just make a very quick detour

777
00:33:56,640 --> 00:33:59,460
to something called watermarking so uh

778
00:33:59,460 --> 00:34:01,860
of course classical cryptographers they

779
00:34:01,860 --> 00:34:03,720
also care about copy protection and

780
00:34:03,720 --> 00:34:06,419
copyright and uh but the thing is

781
00:34:06,419 --> 00:34:08,760
classical information is always copyable

782
00:34:08,760 --> 00:34:10,739
right so if you just receive a piece of

783
00:34:10,739 --> 00:34:12,899
information even if it's obfuscated or

784
00:34:12,899 --> 00:34:14,760
something you can just always copy the

785
00:34:14,760 --> 00:34:16,619
entire thing but still we can do

786
00:34:16,619 --> 00:34:18,480
something about it one thing is called

787
00:34:18,480 --> 00:34:21,239
watermarking uh basically you embed a

788
00:34:21,239 --> 00:34:25,020
watermark into a function and uh if the

789
00:34:25,020 --> 00:34:26,399
Pirates they want to remove this

790
00:34:26,399 --> 00:34:28,199
Watermark they have to destroy the

791
00:34:28,199 --> 00:34:30,060
underlying functionality

792
00:34:30,060 --> 00:34:33,359
and uh uh we've seen a lot of uh

793
00:34:33,359 --> 00:34:34,918
construction for watermarkable

794
00:34:34,918 --> 00:34:37,619
functionalities but they are mainly this

795
00:34:37,619 --> 00:34:39,780
cryptographic functions such as a

796
00:34:39,780 --> 00:34:41,460
decryption function in a public key

797
00:34:41,460 --> 00:34:43,619
encryption scheme to the random function

798
00:34:43,619 --> 00:34:46,320
or a signatures as well as extensions

799
00:34:46,320 --> 00:34:47,940
that build on these cryptography

800
00:34:47,940 --> 00:34:50,339
functions and will soon see that there

801
00:34:50,339 --> 00:34:51,418
is actually an interesting connection

802
00:34:51,418 --> 00:34:54,119
between watermarking and copy protection

803
00:34:54,119 --> 00:34:55,918
even though one of them is quantum and

804
00:34:55,918 --> 00:34:57,180
the other is classical

805
00:34:57,180 --> 00:34:59,880
uh so let's take a quick look at some

806
00:34:59,880 --> 00:35:03,480
previous results uh so uh so in this

807
00:35:03,480 --> 00:35:05,760
talk I was Mo I will mostly focus on

808
00:35:05,760 --> 00:35:08,640
these three uh Primitives uh copy

809
00:35:08,640 --> 00:35:10,440
protecting decryption which we will call

810
00:35:10,440 --> 00:35:13,079
uncountable decryption for short uh copy

811
00:35:13,079 --> 00:35:16,380
protecting prfs and copy protecting uh

812
00:35:16,380 --> 00:35:18,780
aside assigning algorithm in in a

813
00:35:18,780 --> 00:35:20,640
signature scheme and these were

814
00:35:20,640 --> 00:35:23,700
previously built uh firstly they were

815
00:35:23,700 --> 00:35:26,160
viewed relative to oracles or we say

816
00:35:26,160 --> 00:35:28,380
like virtual Black Box obfuscation of

817
00:35:28,380 --> 00:35:31,619
classical circuits uh of course that's a

818
00:35:31,619 --> 00:35:33,180
very strong model and we don't want that

819
00:35:33,180 --> 00:35:35,940
and the next we we have works that uh

820
00:35:35,940 --> 00:35:37,740
they built them from uh in the play

821
00:35:37,740 --> 00:35:40,680
model uh from i o and one-way functions

822
00:35:40,680 --> 00:35:42,960
and uh and in the same work that first

823
00:35:42,960 --> 00:35:46,859
product is uh uh Oracle constructions uh

824
00:35:46,859 --> 00:35:49,200
they they also observed that for all the

825
00:35:49,200 --> 00:35:51,060
watermarkable functions as we mentioned

826
00:35:51,060 --> 00:35:53,040
in the last slides and also they are

827
00:35:53,040 --> 00:35:55,380
actually uh mainly the other functions

828
00:35:55,380 --> 00:35:57,960
are listed here uh there's like a black

829
00:35:57,960 --> 00:36:01,560
box way of lifting them uh from uh using

830
00:36:01,560 --> 00:36:03,720
watermarking together with Quantum money

831
00:36:03,720 --> 00:36:06,480
to leave them to be uh to be copy

832
00:36:06,480 --> 00:36:09,839
protected in a weaker copy Protection

833
00:36:09,839 --> 00:36:11,040
security

834
00:36:11,040 --> 00:36:13,500
but but that is indeed a much weaker

835
00:36:13,500 --> 00:36:15,300
security than the copy protection I just

836
00:36:15,300 --> 00:36:17,520
talked about and the question is whether

837
00:36:17,520 --> 00:36:20,760
we can actually copy protect uh all the

838
00:36:20,760 --> 00:36:22,980
automarkable functions in with the

839
00:36:22,980 --> 00:36:25,619
Standard Security notion

840
00:36:25,619 --> 00:36:28,440
uh so for this talk I will I will for

841
00:36:28,440 --> 00:36:30,599
Simplicity or also because of uh

842
00:36:30,599 --> 00:36:32,940
restriction on time I will just focus on

843
00:36:32,940 --> 00:36:34,980
one specific type of copy protection

844
00:36:34,980 --> 00:36:37,140
that's the copy protection for

845
00:36:37,140 --> 00:36:39,240
decryption Keys uh in a public

846
00:36:39,240 --> 00:36:41,820
encryption scheme uh and this notation

847
00:36:41,820 --> 00:36:44,040
is for something we call one to two

848
00:36:44,040 --> 00:36:46,800
security uh there's a teaching algorithm

849
00:36:46,800 --> 00:36:49,440
it uh it outputs a public key and

850
00:36:49,440 --> 00:36:51,240
decryption key pair the public Keys

851
00:36:51,240 --> 00:36:53,220
classical and decryption Keys Quantum

852
00:36:53,220 --> 00:36:55,380
and then there's an encryption algorithm

853
00:36:55,380 --> 00:36:59,099
it takes in the public key a message and

854
00:36:59,099 --> 00:37:01,200
outputs a ciphert x that's all classical

855
00:37:01,200 --> 00:37:03,839
and finally the decryption procedure is

856
00:37:03,839 --> 00:37:05,520
quantum it takes in the quantum

857
00:37:05,520 --> 00:37:07,619
decryption key a Cyber attack and

858
00:37:07,619 --> 00:37:09,839
outputs uh the message

859
00:37:09,839 --> 00:37:12,660
and what you want of course is that okay

860
00:37:12,660 --> 00:37:15,180
if I give the user the public key and

861
00:37:15,180 --> 00:37:17,700
one copy of the decryption key it's not

862
00:37:17,700 --> 00:37:19,980
able to produce two states here Row one

863
00:37:19,980 --> 00:37:22,380
and Row 2 and when I ask these two

864
00:37:22,380 --> 00:37:24,480
states to decrypt uh they can

865
00:37:24,480 --> 00:37:27,480
simultaneously decrypt successfully for

866
00:37:27,480 --> 00:37:30,359
me and we don't want that to happen

867
00:37:30,359 --> 00:37:33,480
but indeed in the last live we see here

868
00:37:33,480 --> 00:37:35,760
we only talk about we give one copy to

869
00:37:35,760 --> 00:37:39,240
the user uh and in this past works the

870
00:37:39,240 --> 00:37:41,160
security for this one to two uh

871
00:37:41,160 --> 00:37:44,460
situation was shown but they uh what did

872
00:37:44,460 --> 00:37:47,099
not consider is that in the real world

873
00:37:47,099 --> 00:37:49,500
we we do not just give out one copy to

874
00:37:49,500 --> 00:37:52,020
the user right so when a software wants

875
00:37:52,020 --> 00:37:54,300
to uh a software when there wants to

876
00:37:54,300 --> 00:37:57,060
sell some some of the copies it might

877
00:37:57,060 --> 00:37:59,579
sell like polynominally many of them and

878
00:37:59,579 --> 00:38:02,220
these users who receive these copies

879
00:38:02,220 --> 00:38:04,200
they could somehow come together and

880
00:38:04,200 --> 00:38:06,480
they just work as one malicious user

881
00:38:06,480 --> 00:38:08,940
that tries to generate one additional

882
00:38:08,940 --> 00:38:11,579
copy from all the polynomial manic or PC

883
00:38:11,579 --> 00:38:14,400
already possessed so

884
00:38:14,400 --> 00:38:17,220
uh in all in our paper we would consider

885
00:38:17,220 --> 00:38:20,820
uh the exclusion resistance notion uh is

886
00:38:20,820 --> 00:38:23,220
that the adversary cannot generate one

887
00:38:23,220 --> 00:38:25,440
additional copy even if we give them K

888
00:38:25,440 --> 00:38:27,839
polynomial many copies and here for

889
00:38:27,839 --> 00:38:30,839
Simplicity we Illustrated it as uh

890
00:38:30,839 --> 00:38:32,760
giving one or two copies and it cannot

891
00:38:32,760 --> 00:38:35,460
generate three

892
00:38:35,460 --> 00:38:37,619
and as we mentioned all the previous

893
00:38:37,619 --> 00:38:40,560
Works uh they are not collusion

894
00:38:40,560 --> 00:38:42,359
resistant

895
00:38:42,359 --> 00:38:44,940
and in our work uh

896
00:38:44,940 --> 00:38:47,820
uh the first thing we do is that we also

897
00:38:47,820 --> 00:38:50,339
create uh we also construct uh copy

898
00:38:50,339 --> 00:38:52,980
protection for a standard uh existential

899
00:38:52,980 --> 00:38:55,920
unfoldable signature scheme uh that's uh

900
00:38:55,920 --> 00:38:58,440
not done in the previous work uh in the

901
00:38:58,440 --> 00:39:00,599
plane model and we made all of the

902
00:39:00,599 --> 00:39:03,060
inclusion resistant and we partially

903
00:39:03,060 --> 00:39:05,339
answered the question that we actually

904
00:39:05,339 --> 00:39:08,280
uh we were actually able to copy protect

905
00:39:08,280 --> 00:39:10,680
the major watermarkable functionalities

906
00:39:10,680 --> 00:39:13,680
even though it's still not uh that ideal

907
00:39:13,680 --> 00:39:16,200
because it's not a black box uh lifting

908
00:39:16,200 --> 00:39:19,740
from watermarking to copy protection

909
00:39:19,740 --> 00:39:23,940
uh so uh I will briefly go over the the

910
00:39:23,940 --> 00:39:26,940
Syntax for for two two three uh which is

911
00:39:26,940 --> 00:39:28,619
a simplification of course we actually

912
00:39:28,619 --> 00:39:31,260
consider K to K plus one uh so in the

913
00:39:31,260 --> 00:39:33,119
kitchen algorithm we actually generate

914
00:39:33,119 --> 00:39:35,940
uh two public key and decryption key

915
00:39:35,940 --> 00:39:38,160
Pairs and they are independently sampled

916
00:39:38,160 --> 00:39:41,280
and the next uh and then the encryption

917
00:39:41,280 --> 00:39:43,440
scheme uh here I am writing it as a

918
00:39:43,440 --> 00:39:45,420
simplification you can see it as the

919
00:39:45,420 --> 00:39:47,160
encrypted scheme takes both of both of

920
00:39:47,160 --> 00:39:48,900
these public keys and it generates two

921
00:39:48,900 --> 00:39:51,839
cyber texts of the same message and each

922
00:39:51,839 --> 00:39:53,940
encrypted under one of these public keys

923
00:39:53,940 --> 00:39:56,640
and the decryption algorithm uh here in

924
00:39:56,640 --> 00:39:58,260
uh sorry in the notation might be a

925
00:39:58,260 --> 00:40:00,119
little confusing uh the decision

926
00:40:00,119 --> 00:40:02,520
algorithm actually takes one of these

927
00:40:02,520 --> 00:40:04,920
decryption key uh to to do the

928
00:40:04,920 --> 00:40:06,839
decryption because as long as it possess

929
00:40:06,839 --> 00:40:09,300
possesses one of these Keys it's able to

930
00:40:09,300 --> 00:40:12,599
decrypt one of these ciphertext above

931
00:40:12,599 --> 00:40:16,700
um and then it can obtain the message

932
00:40:17,040 --> 00:40:18,060
foreign

933
00:40:18,060 --> 00:40:20,280
and what we don't want is that it can

934
00:40:20,280 --> 00:40:22,260
generate one additional key from these

935
00:40:22,260 --> 00:40:25,020
two keys given and on the high level the

936
00:40:25,020 --> 00:40:27,240
idea may be very simple because here I I

937
00:40:27,240 --> 00:40:29,700
said we we have two pairs of keys okay

938
00:40:29,700 --> 00:40:32,099
if it is uh if the anniversary is able

939
00:40:32,099 --> 00:40:34,680
to generate one more then we may do

940
00:40:34,680 --> 00:40:37,200
something like a a reduction to a one to

941
00:40:37,200 --> 00:40:38,940
two security where we just use a

942
00:40:38,940 --> 00:40:41,220
pigeonhole principle classically because

943
00:40:41,220 --> 00:40:44,520
if it's able to decrypt then there must

944
00:40:44,520 --> 00:40:46,200
be two keys decrypting under the

945
00:40:46,200 --> 00:40:48,420
decrypting the same uh same message

946
00:40:48,420 --> 00:40:50,700
under uh that's encrypted under the same

947
00:40:50,700 --> 00:40:53,520
public key but the the idea is not

948
00:40:53,520 --> 00:40:55,200
actually working the quantum setting

949
00:40:55,200 --> 00:40:56,820
because the adversary could do something

950
00:40:56,820 --> 00:40:59,099
weird it could entangle these three keys

951
00:40:59,099 --> 00:41:01,920
in a weird way that if you just directly

952
00:41:01,920 --> 00:41:03,780
grab two keys and try to do the

953
00:41:03,780 --> 00:41:05,640
reduction it won't work

954
00:41:05,640 --> 00:41:07,619
the thing is that you actually have to

955
00:41:07,619 --> 00:41:09,480
show that we can do something similar to

956
00:41:09,480 --> 00:41:11,400
a pigeonhole principle in the quantum

957
00:41:11,400 --> 00:41:14,099
world that we uh we need the procedure

958
00:41:14,099 --> 00:41:17,040
to measure which ciphertens uh each key

959
00:41:17,040 --> 00:41:20,220
uh uses to decrypt in order to get get

960
00:41:20,220 --> 00:41:22,680
the message so that we can actually grab

961
00:41:22,680 --> 00:41:25,200
these two keys that uh that correspond

962
00:41:25,200 --> 00:41:27,119
that decrypts the same message to break

963
00:41:27,119 --> 00:41:29,760
the 122 security

964
00:41:29,760 --> 00:41:31,380
and this is a very high level

965
00:41:31,380 --> 00:41:34,740
description of what we do uh is that we

966
00:41:34,740 --> 00:41:37,380
we perform a sequential measurements uh

967
00:41:37,380 --> 00:41:40,020
in a sort experiment first so we start

968
00:41:40,020 --> 00:41:43,680
with uh uh here the the quantum key is

969
00:41:43,680 --> 00:41:45,540
actually a priority not the original key

970
00:41:45,540 --> 00:41:48,260
and we start with a first distribution

971
00:41:48,260 --> 00:41:52,079
uh where we just uh did something the

972
00:41:52,079 --> 00:41:54,000
same as the original security game which

973
00:41:54,000 --> 00:41:56,280
just fits the quantum uh Quantum key

974
00:41:56,280 --> 00:41:58,140
with uh

975
00:41:58,140 --> 00:42:01,020
with these are honestly prepared cyber

976
00:42:01,020 --> 00:42:03,060
attacks and we test and there's a

977
00:42:03,060 --> 00:42:04,980
there's a Quantum measurement procedure

978
00:42:04,980 --> 00:42:07,560
that tests the success probability of

979
00:42:07,560 --> 00:42:10,920
this higher Quantum key uh okay and uh

980
00:42:10,920 --> 00:42:12,900
okay suppose the adversary is a

981
00:42:12,900 --> 00:42:15,420
successful one and then of course it

982
00:42:15,420 --> 00:42:16,920
should uh decrypt with a large

983
00:42:16,920 --> 00:42:18,839
probability for this first distribution

984
00:42:18,839 --> 00:42:22,320
okay then we what we do is that uh in

985
00:42:22,320 --> 00:42:24,660
the next uh in the next uh sort of a

986
00:42:24,660 --> 00:42:26,640
hybrid game we we turn off the first

987
00:42:26,640 --> 00:42:28,680
ciphertext we replace it with the dummy

988
00:42:28,680 --> 00:42:30,720
cyber attacks and we say okay are you

989
00:42:30,720 --> 00:42:33,119
still able to decrypt uh and we do that

990
00:42:33,119 --> 00:42:35,339
until we replace all the Cyber tests

991
00:42:35,339 --> 00:42:37,980
with uh dummy ciphertext and it's easy

992
00:42:37,980 --> 00:42:40,980
to see that somewhere in these hybrid

993
00:42:40,980 --> 00:42:43,380
games there must be a gap somewhere in

994
00:42:43,380 --> 00:42:46,320
between you must be able to find that uh

995
00:42:46,320 --> 00:42:48,599
after you turn off one of these

996
00:42:48,599 --> 00:42:50,520
ciphertexts turning to a dummy one then

997
00:42:50,520 --> 00:42:53,400
the adversary stops being successful it

998
00:42:53,400 --> 00:42:56,040
it's a Advantage becomes negligible at

999
00:42:56,040 --> 00:42:57,119
some point

1000
00:42:57,119 --> 00:42:58,680
and uh

1001
00:42:58,680 --> 00:43:01,140
when what we do is that in the real game

1002
00:43:01,140 --> 00:43:03,359
we we do these sequential measurements

1003
00:43:03,359 --> 00:43:06,540
and stop before uh before this type of

1004
00:43:06,540 --> 00:43:08,700
text uh before this uh cyber texts that

1005
00:43:08,700 --> 00:43:11,940
it is able to it has this large uh

1006
00:43:11,940 --> 00:43:13,980
jumping in probably in success

1007
00:43:13,980 --> 00:43:17,280
probability and we use this uh use this

1008
00:43:17,280 --> 00:43:20,339
key to to extract uh to extract and to

1009
00:43:20,339 --> 00:43:22,200
the reduction and there is of course

1010
00:43:22,200 --> 00:43:25,020
more subtlety to handle uh and I will

1011
00:43:25,020 --> 00:43:27,060
not go into those details and please

1012
00:43:27,060 --> 00:43:30,920
refer to our paper if you're interested

1013
00:43:30,960 --> 00:43:33,300
and uh okay finally there's some open

1014
00:43:33,300 --> 00:43:35,579
problems for example here uh you might

1015
00:43:35,579 --> 00:43:38,760
already see that we actually uh have a

1016
00:43:38,760 --> 00:43:41,280
bounded a polynomial many keys because

1017
00:43:41,280 --> 00:43:43,920
our kitchen algorithm depends on the

1018
00:43:43,920 --> 00:43:46,560
number of keys we have to issue uh so

1019
00:43:46,560 --> 00:43:48,839
what about unbounded one like uh the

1020
00:43:48,839 --> 00:43:51,000
kitchen doesn't depend on it at all at

1021
00:43:51,000 --> 00:43:53,040
all and you don't have to know how many

1022
00:43:53,040 --> 00:43:55,260
users you have before you issue all the

1023
00:43:55,260 --> 00:43:57,540
keys and there is some other direction

1024
00:43:57,540 --> 00:43:59,880
for example here we we can do collusion

1025
00:43:59,880 --> 00:44:01,740
resistant copy protection for these

1026
00:44:01,740 --> 00:44:03,839
watermarkable functions but what about

1027
00:44:03,839 --> 00:44:05,940
more functions uh they're like a general

1028
00:44:05,940 --> 00:44:08,280
way to for example lead to the previous

1029
00:44:08,280 --> 00:44:10,380
construction for all unlearnable

1030
00:44:10,380 --> 00:44:13,140
functions into occlusion resistant one

1031
00:44:13,140 --> 00:44:17,598
and that's everything thank you

1032
00:44:21,240 --> 00:44:25,399
thanks any questions

1033
00:44:28,400 --> 00:44:31,560
do you know um uh do you know any

1034
00:44:31,560 --> 00:44:33,119
barriers to constructing these things

1035
00:44:33,119 --> 00:44:35,280
from sort of more standard or sort of

1036
00:44:35,280 --> 00:44:38,460
weaker assumptions uh you know do these

1037
00:44:38,460 --> 00:44:40,079
things actually imply Quantum money for

1038
00:44:40,079 --> 00:44:41,660
example yes

1039
00:44:41,660 --> 00:44:45,180
uh yes Quantum copy protection for uh

1040
00:44:45,180 --> 00:44:49,200
the decryption key uh of uh uh yeah Hong

1041
00:44:49,200 --> 00:44:50,579
Kong popular protection for decryption

1042
00:44:50,579 --> 00:44:52,680
key of a public key encryption scheme

1043
00:44:52,680 --> 00:44:54,300
implies contract okay so that's sort of

1044
00:44:54,300 --> 00:44:57,200
a barrier so yeah

1045
00:44:57,780 --> 00:45:00,780
foreign

1046
00:45:09,300 --> 00:45:11,400
so maybe a bit of a naive question I'm

1047
00:45:11,400 --> 00:45:13,920
not that familiar with this but uh in

1048
00:45:13,920 --> 00:45:15,180
the in the attack model does the

1049
00:45:15,180 --> 00:45:16,859
adversary have to generate a reusable

1050
00:45:16,859 --> 00:45:19,380
key so suppose the address generates a

1051
00:45:19,380 --> 00:45:21,300
key that works only once then this would

1052
00:45:21,300 --> 00:45:23,520
not be secure against that oh that's

1053
00:45:23,520 --> 00:45:25,680
actually a great question so the

1054
00:45:25,680 --> 00:45:28,260
anniversary could uh generate a key that

1055
00:45:28,260 --> 00:45:30,359
only works once but the measurement we

1056
00:45:30,359 --> 00:45:32,400
do is uh

1057
00:45:32,400 --> 00:45:34,440
uh actually the the measurement

1058
00:45:34,440 --> 00:45:36,240
procedure that we do to measure the

1059
00:45:36,240 --> 00:45:38,640
adversaries uh success probability

1060
00:45:38,640 --> 00:45:41,760
actually uh avoids damage so like we

1061
00:45:41,760 --> 00:45:43,680
don't have to we're sort of doing like

1062
00:45:43,680 --> 00:45:46,140
an In-Place uh amplification of the

1063
00:45:46,140 --> 00:45:49,079
adversary success probability and even

1064
00:45:49,079 --> 00:45:51,839
if it's only uh has some weird property

1065
00:45:51,839 --> 00:45:53,400
that it would be strong self-destruct

1066
00:45:53,400 --> 00:45:55,800
after one one time uh we will still be

1067
00:45:55,800 --> 00:45:59,400
able to find out right sure thank you

1068
00:45:59,400 --> 00:46:01,440
great so let's thank joy and all the

1069
00:46:01,440 --> 00:46:03,540
speakers uh Jan

1070
00:46:03,540 --> 00:46:05,460
so

1071
00:46:05,460 --> 00:46:07,380
much

1072
00:46:07,380 --> 00:46:11,119
there was a coffee break I think

