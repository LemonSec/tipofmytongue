1
00:00:00,120 --> 00:00:02,460
this session and anonymity verifiability

2
00:00:02,460 --> 00:00:06,180
in robustness so the first stock is

3
00:00:06,180 --> 00:00:08,400
um better pass adversarly robust Bloom

4
00:00:08,400 --> 00:00:10,080
filters and this is going to work by

5
00:00:10,080 --> 00:00:11,760
morning hour and all that and now it's

6
00:00:11,760 --> 00:00:15,299
going to give the talk yes thank you so

7
00:00:15,299 --> 00:00:18,060
I'm Noah and today I'm going to talk

8
00:00:18,060 --> 00:00:22,260
about our work and which is

9
00:00:22,260 --> 00:00:24,359
um in this book we explore what does it

10
00:00:24,359 --> 00:00:26,820
mean to be a robust Bloom filter meaning

11
00:00:26,820 --> 00:00:29,340
Bloom filter that performs well even

12
00:00:29,340 --> 00:00:32,759
when facing adaptive adversary and we

13
00:00:32,759 --> 00:00:35,100
doing this work we suggested the few

14
00:00:35,100 --> 00:00:37,920
Notions and highlight one in particular

15
00:00:37,920 --> 00:00:40,860
the better path as capturing the desired

16
00:00:40,860 --> 00:00:43,320
property of such a data structure

17
00:00:43,320 --> 00:00:45,600
so what are Bloom filters

18
00:00:45,600 --> 00:00:48,000
blue filters that are data structure

19
00:00:48,000 --> 00:00:50,579
that maintains some compressor

20
00:00:50,579 --> 00:00:52,739
presentation of the set and support

21
00:00:52,739 --> 00:00:55,379
approximate membership queries and more

22
00:00:55,379 --> 00:00:57,539
precisely we're giving a universal

23
00:00:57,539 --> 00:01:01,620
elements and a subset of face s

24
00:01:01,620 --> 00:01:04,920
we do not which denoted us a of elements

25
00:01:04,920 --> 00:01:07,680
from this universe blown filter composed

26
00:01:07,680 --> 00:01:10,439
of a setup and a query algorithm the set

27
00:01:10,439 --> 00:01:12,180
of algorithms gets as the input is set

28
00:01:12,180 --> 00:01:14,760
as and outputs a compressed

29
00:01:14,760 --> 00:01:16,740
representation of this set

30
00:01:16,740 --> 00:01:19,320
and the core algorithm gets this

31
00:01:19,320 --> 00:01:21,600
compressor presentation along with an

32
00:01:21,600 --> 00:01:24,180
element from the universe an output yes

33
00:01:24,180 --> 00:01:26,340
or no equivalently one or zero

34
00:01:26,340 --> 00:01:28,200
indicating whether the solvents belong

35
00:01:28,200 --> 00:01:29,700
to the set or not

36
00:01:29,700 --> 00:01:31,979
and the small number used by Bloom

37
00:01:31,979 --> 00:01:33,720
filters as opposed to storing as

38
00:01:33,720 --> 00:01:36,420
precisely along with their fast query

39
00:01:36,420 --> 00:01:38,400
time makes them extremely useful in

40
00:01:38,400 --> 00:01:41,880
various areas but this comes at a price

41
00:01:41,880 --> 00:01:44,579
of a certain rate of false positive

42
00:01:44,579 --> 00:01:46,920
elements meaning elements that do not

43
00:01:46,920 --> 00:01:48,720
belong to the status but declared as

44
00:01:48,720 --> 00:01:50,399
being in the set

45
00:01:50,399 --> 00:01:53,520
and more formally we say that the bloom

46
00:01:53,520 --> 00:01:56,280
filter is an Epsilon if for every set of

47
00:01:56,280 --> 00:01:59,399
size n if we query an element from the

48
00:01:59,399 --> 00:02:01,860
set the bloom filter must output yes

49
00:02:01,860 --> 00:02:04,920
while if we query an element that does

50
00:02:04,920 --> 00:02:06,659
not belong to the set as

51
00:02:06,659 --> 00:02:08,940
it is allowed to answer yes but with a

52
00:02:08,940 --> 00:02:11,400
small error probability absolute and

53
00:02:11,400 --> 00:02:13,020
otherwise it answers no

54
00:02:13,020 --> 00:02:15,360
and those four responses are called

55
00:02:15,360 --> 00:02:16,860
false positives

56
00:02:16,860 --> 00:02:19,620
and as both positive impact the

57
00:02:19,620 --> 00:02:22,020
performance of applications using Bloom

58
00:02:22,020 --> 00:02:24,720
filters it is important to ensure that

59
00:02:24,720 --> 00:02:27,360
they are appropriately distributed

60
00:02:27,360 --> 00:02:29,760
and in our work we asked what happened

61
00:02:29,760 --> 00:02:32,540
when we had an adversary to the game

62
00:02:32,540 --> 00:02:35,099
what um

63
00:02:35,099 --> 00:02:36,780
what how should we Define the

64
00:02:36,780 --> 00:02:39,480
correctness guarantee it is important to

65
00:02:39,480 --> 00:02:41,459
note that given a lower bound on the

66
00:02:41,459 --> 00:02:44,819
memory that is found by carteretal if we

67
00:02:44,819 --> 00:02:47,819
wish to save space this Epson must be

68
00:02:47,819 --> 00:02:50,660
non-negligible so it's not quite sure

69
00:02:50,660 --> 00:02:52,860
quite trivial how we should Define the

70
00:02:52,860 --> 00:02:54,300
correctness guarantee what does it mean

71
00:02:54,300 --> 00:02:56,700
for an adversary to succeed in finding

72
00:02:56,700 --> 00:02:59,400
false positives since Epsilon is not

73
00:02:59,400 --> 00:03:01,260
negotiable it is obvious that from time

74
00:03:01,260 --> 00:03:03,480
to time she was succeed in finding false

75
00:03:03,480 --> 00:03:06,120
positive but what does it mean for those

76
00:03:06,120 --> 00:03:09,360
events weapon infrequently how can we

77
00:03:09,360 --> 00:03:11,580
claim that the data structure behave

78
00:03:11,580 --> 00:03:12,900
nicely

79
00:03:12,900 --> 00:03:17,519
and here we enter we aim to unify and

80
00:03:17,519 --> 00:03:19,980
provide a robustness definition of Bloom

81
00:03:19,980 --> 00:03:22,080
filter facing adaptive adversarial

82
00:03:22,080 --> 00:03:24,319
Behavior and

83
00:03:24,319 --> 00:03:26,459
recently several papers have

84
00:03:26,459 --> 00:03:28,319
investigated this topic suggesting

85
00:03:28,319 --> 00:03:31,140
different robustness definition two of

86
00:03:31,140 --> 00:03:33,599
such works are the one done by now when

87
00:03:33,599 --> 00:03:36,120
you get and another one by Bender atal

88
00:03:36,120 --> 00:03:37,680
both of them

89
00:03:37,680 --> 00:03:40,680
were consider an adversary that use

90
00:03:40,680 --> 00:03:43,140
adaptivity in order to find false

91
00:03:43,140 --> 00:03:46,319
positive well then total a main question

92
00:03:46,319 --> 00:03:48,480
was the repeated queries

93
00:03:48,480 --> 00:03:50,760
and in this work we chose to follow the

94
00:03:50,760 --> 00:03:52,739
work of knowing your guess

95
00:03:52,739 --> 00:03:56,400
we defined the new definitions that are

96
00:03:56,400 --> 00:03:58,379
expressed as the test that the bloom

97
00:03:58,379 --> 00:04:01,019
filter should withstand and we formalize

98
00:04:01,019 --> 00:04:03,180
this by defining a game

99
00:04:03,180 --> 00:04:05,280
which is called adaptive game

100
00:04:05,280 --> 00:04:07,500
in this game we'll consider a polynomial

101
00:04:07,500 --> 00:04:09,659
time adversary that consists of two

102
00:04:09,659 --> 00:04:12,959
parts first it's using the set s which

103
00:04:12,959 --> 00:04:15,239
is then given to the set of algorithm of

104
00:04:15,239 --> 00:04:18,418
the bloom filter then knowing the set as

105
00:04:18,418 --> 00:04:21,298
it performs adaptive queries

106
00:04:21,298 --> 00:04:23,580
meaning it gets Oracle access to the

107
00:04:23,580 --> 00:04:25,919
core algorithm of the bloom filters and

108
00:04:25,919 --> 00:04:28,380
perform queries

109
00:04:28,380 --> 00:04:31,440
um one thing to note is that

110
00:04:31,440 --> 00:04:33,360
um since the obviously knows the set s

111
00:04:33,360 --> 00:04:35,160
and balloon filters that meets only

112
00:04:35,160 --> 00:04:37,080
false positives and not false negative

113
00:04:37,080 --> 00:04:39,419
we assume without lack of generality

114
00:04:39,419 --> 00:04:42,840
that those X I do not belong to the set

115
00:04:42,840 --> 00:04:45,180
s meaning they could be either false

116
00:04:45,180 --> 00:04:48,240
positive or true negative and as a

117
00:04:48,240 --> 00:04:51,300
result ideally those y i are either 0

118
00:04:51,300 --> 00:04:54,180
and 1 with probability at most Epson of

119
00:04:54,180 --> 00:04:56,660
being one

120
00:04:56,940 --> 00:04:59,400
um okay and in order to handle a

121
00:04:59,400 --> 00:05:00,960
computational abounded anniversary we

122
00:05:00,960 --> 00:05:02,880
had a security of power metal which is

123
00:05:02,880 --> 00:05:05,340
denoted by Lambda and is given to both

124
00:05:05,340 --> 00:05:07,500
the adversary and the bloom filter as an

125
00:05:07,500 --> 00:05:08,759
input

126
00:05:08,759 --> 00:05:11,699
in each test that we will show in next

127
00:05:11,699 --> 00:05:13,680
the adversary aims to achieve a

128
00:05:13,680 --> 00:05:15,600
different goal in order to make the boom

129
00:05:15,600 --> 00:05:18,300
filter fail the tests

130
00:05:18,300 --> 00:05:21,120
and our wishful thinking when trying to

131
00:05:21,120 --> 00:05:23,699
suggest the definitions Dr robust Bloom

132
00:05:23,699 --> 00:05:25,800
folder should be like a truly

133
00:05:25,800 --> 00:05:27,840
unpredictable biased coin

134
00:05:27,840 --> 00:05:30,060
Now by looking at the response of the

135
00:05:30,060 --> 00:05:32,340
blog post on those the Adaptive cores we

136
00:05:32,340 --> 00:05:35,699
want them to look like a a sequence that

137
00:05:35,699 --> 00:05:37,620
is produced by a random bias coin with

138
00:05:37,620 --> 00:05:40,220
biceps Epsilon meaning we want to

139
00:05:40,220 --> 00:05:42,780
visualize the false positives as

140
00:05:42,780 --> 00:05:45,660
randomly dependent events and one

141
00:05:45,660 --> 00:05:48,419
motivation for that is some applications

142
00:05:48,419 --> 00:05:50,759
that use Bloom filters are sensitive to

143
00:05:50,759 --> 00:05:52,620
clusters of false positive and by

144
00:05:52,620 --> 00:05:55,259
clusters I mean a false positive and

145
00:05:55,259 --> 00:05:58,220
appearing one after the other

146
00:05:58,220 --> 00:06:03,240
of queries and by requiring this wishful

147
00:06:03,240 --> 00:06:05,820
thinking those events happen with small

148
00:06:05,820 --> 00:06:07,919
probability

149
00:06:07,919 --> 00:06:10,740
so with this in mind our starting point

150
00:06:10,740 --> 00:06:12,660
was the work done by now on your kids

151
00:06:12,660 --> 00:06:14,940
they said that following those the

152
00:06:14,940 --> 00:06:17,340
Adaptive queries the adversary must

153
00:06:17,340 --> 00:06:19,560
output an element which he thinks is a

154
00:06:19,560 --> 00:06:22,139
false positive and she will begin if her

155
00:06:22,139 --> 00:06:24,419
output element X star is indeed a false

156
00:06:24,419 --> 00:06:25,380
part of it

157
00:06:25,380 --> 00:06:26,819
and we say that the blue filter

158
00:06:26,819 --> 00:06:29,880
satisfies the NY definition if for every

159
00:06:29,880 --> 00:06:32,400
adversary the probability that the

160
00:06:32,400 --> 00:06:33,960
output element is indeed the false

161
00:06:33,960 --> 00:06:36,240
positive is at most Epsilon

162
00:06:36,240 --> 00:06:39,419
meaning that we want those deductive

163
00:06:39,419 --> 00:06:41,520
words to give her no valuable

164
00:06:41,520 --> 00:06:43,440
information in your attempts to find a

165
00:06:43,440 --> 00:06:44,880
false pause development she might as

166
00:06:44,880 --> 00:06:46,259
well guess a random element from the

167
00:06:46,259 --> 00:06:47,400
universe

168
00:06:47,400 --> 00:06:50,819
we showed in our work that um this

169
00:06:50,819 --> 00:06:53,160
definition this robustness definition it

170
00:06:53,160 --> 00:06:55,139
does not imply a wishful thinking and

171
00:06:55,139 --> 00:06:58,139
more concretely we show the construct a

172
00:06:58,139 --> 00:06:59,819
bone filter that satisfies then why

173
00:06:59,819 --> 00:07:02,039
robustness definition but fail to size

174
00:07:02,039 --> 00:07:04,440
satisfy our wishful thinking it's as a

175
00:07:04,440 --> 00:07:06,780
clusters to post positive so we ask

176
00:07:06,780 --> 00:07:10,259
whether we can extend the NY definition

177
00:07:10,259 --> 00:07:12,479
and we introduce a new notion which is

178
00:07:12,479 --> 00:07:15,720
called better pass BP for short and in

179
00:07:15,720 --> 00:07:18,300
this test now instead of outputting an

180
00:07:18,300 --> 00:07:20,759
element we allow the adversary to pass

181
00:07:20,759 --> 00:07:22,860
meaning she does not have to provide any

182
00:07:22,860 --> 00:07:25,259
output following those T adaptive words

183
00:07:25,259 --> 00:07:27,599
you could either say this is a false

184
00:07:27,599 --> 00:07:29,940
positive or say I don't know

185
00:07:29,940 --> 00:07:32,940
and we defined adversary profit she

186
00:07:32,940 --> 00:07:34,860
gained one of Repcon if she indeed

187
00:07:34,860 --> 00:07:37,080
attempt succeed in outputting false

188
00:07:37,080 --> 00:07:40,560
positive a element she she gets

189
00:07:40,560 --> 00:07:42,539
penalized with one over one minus

190
00:07:42,539 --> 00:07:44,400
substance if her output element is a

191
00:07:44,400 --> 00:07:46,979
true negative and a profit is zero if

192
00:07:46,979 --> 00:07:48,720
she chooses to pass

193
00:07:48,720 --> 00:07:51,419
and we chose those payments such that a

194
00:07:51,419 --> 00:07:53,520
random guess with probability Epsilon to

195
00:07:53,520 --> 00:07:55,560
be a false positive as expected profit

196
00:07:55,560 --> 00:07:56,699
of zero

197
00:07:56,699 --> 00:07:59,520
which gives rise to our definition we

198
00:07:59,520 --> 00:08:01,259
say that the bloom filter satisfies the

199
00:08:01,259 --> 00:08:04,139
better pass the BP a notion for every

200
00:08:04,139 --> 00:08:06,479
adversary our expected profit is at most

201
00:08:06,479 --> 00:08:10,199
zero and recall the NY definition we can

202
00:08:10,199 --> 00:08:12,300
think about it in the same way only

203
00:08:12,300 --> 00:08:14,699
their diversary must bet you must output

204
00:08:14,699 --> 00:08:16,740
an element which he thinks is a false

205
00:08:16,740 --> 00:08:18,000
positive

206
00:08:18,000 --> 00:08:21,539
and the edit the past option so just a

207
00:08:21,539 --> 00:08:24,300
the adversary has more flexibility and

208
00:08:24,300 --> 00:08:26,759
maybe the BP is a stronger notion than

209
00:08:26,759 --> 00:08:29,699
the NY definition which did into this

210
00:08:29,699 --> 00:08:31,620
situation turns out to be true and we

211
00:08:31,620 --> 00:08:33,000
will see about that

212
00:08:33,000 --> 00:08:35,820
that's recall our wishful thinking

213
00:08:35,820 --> 00:08:37,620
that's a robust blown filter should

214
00:08:37,620 --> 00:08:39,360
behave like a truly unpredictable bias

215
00:08:39,360 --> 00:08:42,539
point it has more sequential nature and

216
00:08:42,539 --> 00:08:45,120
so far we saw two tests that consider

217
00:08:45,120 --> 00:08:47,760
one time challenge so it's not clear yet

218
00:08:47,760 --> 00:08:49,800
how those two Notions relate to the

219
00:08:49,800 --> 00:08:52,080
wishful thinking and in order to find

220
00:08:52,080 --> 00:08:54,899
the connection we introduced a new test

221
00:08:54,899 --> 00:08:57,779
which is the monotony test and now we

222
00:08:57,779 --> 00:09:00,300
are not interested in any output we only

223
00:09:00,300 --> 00:09:01,860
consider the

224
00:09:01,860 --> 00:09:04,260
the response of the bone filters on

225
00:09:04,260 --> 00:09:06,600
those the Adaptive Words which we call

226
00:09:06,600 --> 00:09:10,620
the transcript and just to note we allow

227
00:09:10,620 --> 00:09:13,140
the adversary to repeat query though

228
00:09:13,140 --> 00:09:15,540
repeated queries are not counted we're

229
00:09:15,540 --> 00:09:17,820
only interested in in our ability to

230
00:09:17,820 --> 00:09:20,339
find fresh false positive elements

231
00:09:20,339 --> 00:09:22,800
so in this test we had another component

232
00:09:22,800 --> 00:09:24,660
which is the distinguisher which is

233
00:09:24,660 --> 00:09:25,920
simply a

234
00:09:25,920 --> 00:09:27,899
a function that gets the input a

235
00:09:27,899 --> 00:09:29,940
sequence of bits and output either zero

236
00:09:29,940 --> 00:09:30,839
one

237
00:09:30,839 --> 00:09:33,720
but we consider only monotone

238
00:09:33,720 --> 00:09:36,480
distinguishers meaning that if we flip a

239
00:09:36,480 --> 00:09:38,459
bit in the input sequence from 0 to 1

240
00:09:38,459 --> 00:09:41,040
the output can only increase

241
00:09:41,040 --> 00:09:44,339
and one example of such a distinguisher

242
00:09:44,339 --> 00:09:46,500
that you can have in mind is the cluster

243
00:09:46,500 --> 00:09:49,200
distinguishers which may outputs one if

244
00:09:49,200 --> 00:09:51,120
and only if the input sequence contains

245
00:09:51,120 --> 00:09:53,459
some predefined number of consecutive

246
00:09:53,459 --> 00:09:55,500
one for example five

247
00:09:55,500 --> 00:09:58,560
and the definition goes as follow we say

248
00:09:58,560 --> 00:10:00,720
that a bloom filter satisfies the

249
00:10:00,720 --> 00:10:03,240
monophone test notion and for every

250
00:10:03,240 --> 00:10:04,980
monotone distinguisher in every

251
00:10:04,980 --> 00:10:07,980
adversary the probability that B can

252
00:10:07,980 --> 00:10:09,420
distinguish between the transcript

253
00:10:09,420 --> 00:10:11,519
created by the bloom filter and the

254
00:10:11,519 --> 00:10:13,800
transcript created by a random biased

255
00:10:13,800 --> 00:10:16,860
Point losses is at most negligible

256
00:10:16,860 --> 00:10:19,459
note the similarity with the

257
00:10:19,459 --> 00:10:22,380
cryptographic to the random notion in

258
00:10:22,380 --> 00:10:24,420
both cases we consider a distinguisher

259
00:10:24,420 --> 00:10:26,580
only now we are only interested in

260
00:10:26,580 --> 00:10:29,580
monotone distinguishers and also we look

261
00:10:29,580 --> 00:10:30,600
at the difference between the

262
00:10:30,600 --> 00:10:32,940
probabilities and here we do not have

263
00:10:32,940 --> 00:10:37,339
the absolute volume or is there in the

264
00:10:37,339 --> 00:10:39,660
cryptographic it's a random notion we

265
00:10:39,660 --> 00:10:41,760
have an absolute value and the reason

266
00:10:41,760 --> 00:10:45,000
for this difference it is as follows

267
00:10:45,000 --> 00:10:48,000
the transcript can contain sequence can

268
00:10:48,000 --> 00:10:49,620
have a sequence that contains a lot of

269
00:10:49,620 --> 00:10:50,700
zeros

270
00:10:50,700 --> 00:10:53,160
this could be for example because there

271
00:10:53,160 --> 00:10:54,480
are elements that are always true

272
00:10:54,480 --> 00:10:56,399
negatives and an adversary can choose to

273
00:10:56,399 --> 00:10:59,459
query those in specifically or the false

274
00:10:59,459 --> 00:11:01,740
politic can be less than Epsilon though

275
00:11:01,740 --> 00:11:03,839
this is highly damaging we're only

276
00:11:03,839 --> 00:11:06,320
interested in cases where an adversary

277
00:11:06,320 --> 00:11:08,760
increases the false positive rates or

278
00:11:08,760 --> 00:11:11,160
create clusters of false positives and

279
00:11:11,160 --> 00:11:12,660
this is exactly what the monotone

280
00:11:12,660 --> 00:11:14,760
property aims to model

281
00:11:14,760 --> 00:11:17,339
so this test formulate the wishful

282
00:11:17,339 --> 00:11:18,600
thinking

283
00:11:18,600 --> 00:11:22,440
and we showed that if we have a bloom

284
00:11:22,440 --> 00:11:24,779
filter that satisfies the BP notion and

285
00:11:24,779 --> 00:11:26,720
it also satisfies the monotone Notions

286
00:11:26,720 --> 00:11:29,579
leading to our desire that the BP test

287
00:11:29,579 --> 00:11:32,279
implies that wishful thinking

288
00:11:32,279 --> 00:11:35,160
and today we see a proof sketch and this

289
00:11:35,160 --> 00:11:36,660
proof reminds

290
00:11:36,660 --> 00:11:39,360
um the proof in in crypto Randomness

291
00:11:39,360 --> 00:11:41,160
that the next bits test implies all

292
00:11:41,160 --> 00:11:42,720
efficient tests

293
00:11:42,720 --> 00:11:45,899
so it's approved by contradiction and we

294
00:11:45,899 --> 00:11:48,060
have a blown filter that satisfies the

295
00:11:48,060 --> 00:11:50,040
BP notion and we assume that he does not

296
00:11:50,040 --> 00:11:52,320
satisfy the monotone ocean meaning we

297
00:11:52,320 --> 00:11:53,579
have a distinguisher that can

298
00:11:53,579 --> 00:11:55,019
distinguish between the transcript

299
00:11:55,019 --> 00:11:57,540
created by an adversary a through this

300
00:11:57,540 --> 00:11:59,160
transcript created by a random biased

301
00:11:59,160 --> 00:12:01,380
point and we use this distinguisher in

302
00:12:01,380 --> 00:12:03,839
adversary in order to build an adversary

303
00:12:03,839 --> 00:12:05,459
for the BP test

304
00:12:05,459 --> 00:12:07,920
in this adversary in particular will

305
00:12:07,920 --> 00:12:10,140
know when it's best to bet in a false

306
00:12:10,140 --> 00:12:12,180
positive elements and we use the hybrid

307
00:12:12,180 --> 00:12:13,320
argument

308
00:12:13,320 --> 00:12:16,380
and so given diabet argument we have

309
00:12:16,380 --> 00:12:19,079
some index I such that the distinguisher

310
00:12:19,079 --> 00:12:21,660
is sensitive to a change in this index

311
00:12:21,660 --> 00:12:24,180
so we at First We Take the address right

312
00:12:24,180 --> 00:12:27,440
and use it to query the I minus one

313
00:12:27,440 --> 00:12:30,240
queries and then we asked it what is

314
00:12:30,240 --> 00:12:32,519
your I query but we do not query the

315
00:12:32,519 --> 00:12:35,220
bloom filter with this element yet we

316
00:12:35,220 --> 00:12:37,620
take this and put it as a prefix to two

317
00:12:37,620 --> 00:12:41,220
sequences that contains

318
00:12:41,220 --> 00:12:43,920
um this as a prefix as a suffix that

319
00:12:43,920 --> 00:12:45,899
contain random by speed and in the I

320
00:12:45,899 --> 00:12:48,839
index they contain one's a either zero

321
00:12:48,839 --> 00:12:51,660
on one and we added to the distinguisher

322
00:12:51,660 --> 00:12:53,579
if the distinguisher is able to

323
00:12:53,579 --> 00:12:55,380
distinguish between those two sequence

324
00:12:55,380 --> 00:12:57,660
we bet with the x i

325
00:12:57,660 --> 00:13:00,000
otherwise if it fails to distinguish

326
00:13:00,000 --> 00:13:02,220
then we say pass

327
00:13:02,220 --> 00:13:05,040
in our work we show that the probability

328
00:13:05,040 --> 00:13:08,880
that we the the adversary bet is not to

329
00:13:08,880 --> 00:13:11,519
be greater than zero and the probability

330
00:13:11,519 --> 00:13:15,180
that given that we bet this x i is false

331
00:13:15,180 --> 00:13:16,740
positive is not to be greater than

332
00:13:16,740 --> 00:13:19,320
Epsilon leading to our desired

333
00:13:19,320 --> 00:13:21,720
contradiction that the expected profit

334
00:13:21,720 --> 00:13:24,899
of ABP is not to be greater than zero

335
00:13:24,899 --> 00:13:25,980
which

336
00:13:25,980 --> 00:13:28,440
lead us to our desired contradiction

337
00:13:28,440 --> 00:13:32,760
okay so to summarize in our work we

338
00:13:32,760 --> 00:13:35,459
highlight the notion of better past as

339
00:13:35,459 --> 00:13:38,459
capturing the strongest guarantee we can

340
00:13:38,459 --> 00:13:40,320
currently imagine our wishful thinking

341
00:13:40,320 --> 00:13:42,779
in addition it is formalized as a simple

342
00:13:42,779 --> 00:13:45,660
test it is critical pretty convenient to

343
00:13:45,660 --> 00:13:46,980
take a

344
00:13:46,980 --> 00:13:48,779
a construction of a boom Builder and see

345
00:13:48,779 --> 00:13:50,639
if it satisfies this test

346
00:13:50,639 --> 00:13:52,740
what we haven't seen today but we showed

347
00:13:52,740 --> 00:13:55,500
in our work that it's not too strict

348
00:13:55,500 --> 00:13:57,180
notion meaning there exists the

349
00:13:57,180 --> 00:13:59,040
construction of a bloom filter satisfy

350
00:13:59,040 --> 00:14:01,680
this notion and it's based on one-way

351
00:14:01,680 --> 00:14:03,720
function and some intuition for this

352
00:14:03,720 --> 00:14:05,519
construction is we take a reasonable

353
00:14:05,519 --> 00:14:07,560
construction of a boom filter and add

354
00:14:07,560 --> 00:14:09,660
cryptography upon it

355
00:14:09,660 --> 00:14:12,660
and in our journey to find the best

356
00:14:12,660 --> 00:14:14,940
definition of a robust Bloom filter we

357
00:14:14,940 --> 00:14:17,399
suggest more Notions which turns out to

358
00:14:17,399 --> 00:14:18,899
be weaker and found a relationship

359
00:14:18,899 --> 00:14:21,240
between those Notions

360
00:14:21,240 --> 00:14:24,120
and it is not clear yet whether the

361
00:14:24,120 --> 00:14:25,980
other direction is true whether monotone

362
00:14:25,980 --> 00:14:29,399
test implies VP tests or whether those

363
00:14:29,399 --> 00:14:32,279
two Notions are separable in addition it

364
00:14:32,279 --> 00:14:33,600
may be interesting to see what happens

365
00:14:33,600 --> 00:14:35,339
when we allow the adversary to repeat

366
00:14:35,339 --> 00:14:37,380
queries what happens to the definitions

367
00:14:37,380 --> 00:14:39,360
and the relationship between those

368
00:14:39,360 --> 00:14:43,160
and that's it thank you

369
00:14:48,360 --> 00:14:52,100
do we have any questions for now

370
00:14:53,240 --> 00:14:56,040
oh there's something

371
00:14:56,040 --> 00:14:57,540
thank you so much

372
00:14:57,540 --> 00:14:59,699
um so Bloom filters are often like

373
00:14:59,699 --> 00:15:02,760
runtime updatable in various ways like

374
00:15:02,760 --> 00:15:04,980
whether it's only add to the set or

375
00:15:04,980 --> 00:15:06,600
maybe update the set in some other way

376
00:15:06,600 --> 00:15:08,820
yeah um this is your work and obviously

377
00:15:08,820 --> 00:15:10,500
maybe it's in the paper but does your

378
00:15:10,500 --> 00:15:13,440
work explore how like adversarially

379
00:15:13,440 --> 00:15:16,019
updatable sets or even maybe honestly

380
00:15:16,019 --> 00:15:18,060
updatable sets affect

381
00:15:18,060 --> 00:15:18,839
um

382
00:15:18,839 --> 00:15:20,940
some of these interactions yeah so

383
00:15:20,940 --> 00:15:23,339
regarding adversarial updateable set we

384
00:15:23,339 --> 00:15:26,120
haven't looked at it but honestly we

385
00:15:26,120 --> 00:15:28,620
think with high confidence that it

386
00:15:28,620 --> 00:15:30,779
doesn't affect the Notions and the

387
00:15:30,779 --> 00:15:34,220
relationship between those yeah

388
00:15:36,320 --> 00:15:39,720
there's one more question here

389
00:15:39,720 --> 00:15:43,940
we can repeat it otherwise just go ahead

390
00:15:45,360 --> 00:15:47,820
I'm just curious definition is a really

391
00:15:47,820 --> 00:15:50,339
nice uh like modern contestants and so

392
00:15:50,339 --> 00:15:52,560
on I'm just wondering why it's like for

393
00:15:52,560 --> 00:15:54,480
example monotone definition it seems

394
00:15:54,480 --> 00:15:56,040
like you really split the attackers into

395
00:15:56,040 --> 00:15:58,620
two basically non-communicating guys but

396
00:15:58,620 --> 00:16:01,079
basically my question is do you have

397
00:16:01,079 --> 00:16:03,959
some toy maybe full applications of

398
00:16:03,959 --> 00:16:05,579
these Bloom filters where your

399
00:16:05,579 --> 00:16:07,500
definition will be enough because right

400
00:16:07,500 --> 00:16:09,120
now I mean it's very nice I get the

401
00:16:09,120 --> 00:16:10,920
intuition but I'm just worried about

402
00:16:10,920 --> 00:16:12,540
composibilities that you have this nice

403
00:16:12,540 --> 00:16:14,279
definition but then you plug it in into

404
00:16:14,279 --> 00:16:16,260
some simple constructions things

405
00:16:16,260 --> 00:16:18,839
actually it will not be enough so do you

406
00:16:18,839 --> 00:16:21,060
have some maybe two application where

407
00:16:21,060 --> 00:16:24,060
this is fully enough definition the VP

408
00:16:24,060 --> 00:16:26,279
definition uh well any of you for

409
00:16:26,279 --> 00:16:28,560
example BP definition it would be fully

410
00:16:28,560 --> 00:16:30,360
enough for the final application

411
00:16:30,360 --> 00:16:32,760
um yeah you can think of for example a

412
00:16:32,760 --> 00:16:36,360
server that contains K components and

413
00:16:36,360 --> 00:16:39,060
each components using a boom filter and

414
00:16:39,060 --> 00:16:41,339
there's an address way that knows

415
00:16:41,339 --> 00:16:44,279
um for that if they get some elements

416
00:16:44,279 --> 00:16:47,759
it's for sure developments so all the

417
00:16:47,759 --> 00:16:50,779
other definitions in the BP and

418
00:16:50,779 --> 00:16:53,519
doesn't allow the adversary the

419
00:16:53,519 --> 00:16:56,100
flexibility of querying only when Dad

420
00:16:56,100 --> 00:16:58,380
was when they know that it's a false

421
00:16:58,380 --> 00:17:00,420
positive for example so if those K

422
00:17:00,420 --> 00:17:02,699
components are proxies or something like

423
00:17:02,699 --> 00:17:05,880
that and if we an attacker that is

424
00:17:05,880 --> 00:17:07,740
allowed to query only when it's no it's

425
00:17:07,740 --> 00:17:10,079
a false positive can query those

426
00:17:10,079 --> 00:17:12,900
components at one time and create for

427
00:17:12,900 --> 00:17:15,919
example a Dos a attack while the other

428
00:17:15,919 --> 00:17:18,839
definitions fail to uh protect against

429
00:17:18,839 --> 00:17:20,579
this kind of attack

430
00:17:20,579 --> 00:17:23,160
I hope it was clear okay

431
00:17:23,160 --> 00:17:25,260
all right so let's move on to the next

432
00:17:25,260 --> 00:17:28,339
talk and let's talk now again

433
00:17:29,150 --> 00:17:32,309
[Music]

434
00:17:55,380 --> 00:17:58,440
right so while the speaker sets up so

435
00:17:58,440 --> 00:18:00,240
the next work is on Anonymous

436
00:18:00,240 --> 00:18:02,039
whistleblowing or authenticated channels

437
00:18:02,039 --> 00:18:03,780
this is worked by Thomas Agri College of

438
00:18:03,780 --> 00:18:05,880
uh Koto and sway my hair and as well

439
00:18:05,880 --> 00:18:08,780
we'll be giving the talk

440
00:18:15,900 --> 00:18:18,900
okay

441
00:18:19,679 --> 00:18:22,380
good so uh as was already mentioned my

442
00:18:22,380 --> 00:18:24,059
talk is an anonymous visit blowing over

443
00:18:24,059 --> 00:18:26,160
authenticated channels this is Joint

444
00:18:26,160 --> 00:18:28,559
work with Thomas Agricola from Kat in

445
00:18:28,559 --> 00:18:31,080
Germany and Jeff rockwatov from cnrs in

446
00:18:31,080 --> 00:18:32,340
Paris

447
00:18:32,340 --> 00:18:37,039
so whistleblowing basically defines

448
00:18:37,039 --> 00:18:40,200
publishing confidential information

449
00:18:40,200 --> 00:18:43,500
and since usually of wrongdoing from

450
00:18:43,500 --> 00:18:46,980
from from agencies

451
00:18:47,460 --> 00:18:49,260
sorry

452
00:18:49,260 --> 00:18:53,039
oh okay uh so and governments don't

453
00:18:53,039 --> 00:18:55,620
usually like that when people do that so

454
00:18:55,620 --> 00:18:59,100
there's a strong incentive in in

455
00:18:59,100 --> 00:19:02,220
defining in making it providing means to

456
00:19:02,220 --> 00:19:04,799
make it Anonymous so to give them the

457
00:19:04,799 --> 00:19:07,260
chance to publish information without

458
00:19:07,260 --> 00:19:10,559
revealing the own identity there's a lot

459
00:19:10,559 --> 00:19:13,440
of different methods to do that some of

460
00:19:13,440 --> 00:19:15,419
them are listed here

461
00:19:15,419 --> 00:19:18,419
and essentially they all are based on

462
00:19:18,419 --> 00:19:21,419
two implicit assumptions one is that

463
00:19:21,419 --> 00:19:24,419
there's a lot of people present that

464
00:19:24,419 --> 00:19:25,679
could be the center

465
00:19:25,679 --> 00:19:29,340
so you hide in a group of of people that

466
00:19:29,340 --> 00:19:32,520
might have sent this information

467
00:19:32,520 --> 00:19:34,380
um the second one is that you

468
00:19:34,380 --> 00:19:38,700
incorporate many parties which makes it

469
00:19:38,700 --> 00:19:42,240
sufficiently uh probable that at some

470
00:19:42,240 --> 00:19:44,400
point you get the trusted or

471
00:19:44,400 --> 00:19:46,559
non-colluding party which provides

472
00:19:46,559 --> 00:19:49,080
anonymity now the first one is somewhat

473
00:19:49,080 --> 00:19:52,860
obvious that you need this because if no

474
00:19:52,860 --> 00:19:56,460
one's there to hide you then you're it's

475
00:19:56,460 --> 00:19:57,780
clear Who You Are

476
00:19:57,780 --> 00:20:00,480
the second thing we we ask the question

477
00:20:00,480 --> 00:20:03,059
whether this is inherent or if it's

478
00:20:03,059 --> 00:20:06,720
possible to have a whistleblowing method

479
00:20:06,720 --> 00:20:09,480
that works without any trusted parties

480
00:20:09,480 --> 00:20:10,559
in the process

481
00:20:10,559 --> 00:20:12,900
so we modded this as Anonymous transfer

482
00:20:12,900 --> 00:20:15,299
which is basically a simplification of

483
00:20:15,299 --> 00:20:16,860
that

484
00:20:16,860 --> 00:20:18,179
um the

485
00:20:18,179 --> 00:20:21,600
basic idea is that there's three parties

486
00:20:21,600 --> 00:20:24,539
so basically a participant a

487
00:20:24,539 --> 00:20:26,280
non-participant and a receiver the

488
00:20:26,280 --> 00:20:29,460
participant wants to send a bids to a

489
00:20:29,460 --> 00:20:31,679
receiver and the non-participant doesn't

490
00:20:31,679 --> 00:20:33,660
do anything it doesn't even know that

491
00:20:33,660 --> 00:20:36,600
the process is that they that anything

492
00:20:36,600 --> 00:20:38,580
is happening at all

493
00:20:38,580 --> 00:20:41,220
uh so we say that an anonymous transfer

494
00:20:41,220 --> 00:20:44,520
is correct with uh is Epsilon correct

495
00:20:44,520 --> 00:20:46,860
if the bit is transferred with

496
00:20:46,860 --> 00:20:48,660
probability Epsilon so what the receiver

497
00:20:48,660 --> 00:20:51,780
reconstructs after the process is the

498
00:20:51,780 --> 00:20:53,700
same that the participant entered with

499
00:20:53,700 --> 00:20:55,740
probability Epsilon plus we want some

500
00:20:55,740 --> 00:20:57,419
anonymity meaning that from the

501
00:20:57,419 --> 00:20:59,039
Viewpoint of the receiver

502
00:20:59,039 --> 00:21:02,400
there are just two parties which do

503
00:21:02,400 --> 00:21:05,780
random things which aren't really

504
00:21:05,780 --> 00:21:08,220
distinguishable from just acting

505
00:21:08,220 --> 00:21:09,539
normally

506
00:21:09,539 --> 00:21:13,380
so we say it's that's Anonymous if the

507
00:21:13,380 --> 00:21:15,600
probability that the receiver can

508
00:21:15,600 --> 00:21:17,400
determine which of the two parties was

509
00:21:17,400 --> 00:21:18,840
the sender

510
00:21:18,840 --> 00:21:22,440
is at most one minus data

511
00:21:22,440 --> 00:21:24,780
so preferably we would want both of them

512
00:21:24,780 --> 00:21:26,580
to be relatively close to one because

513
00:21:26,580 --> 00:21:28,320
then the message is transferred

514
00:21:28,320 --> 00:21:31,080
correctly but the essentially remains

515
00:21:31,080 --> 00:21:32,400
Anonymous and the best that the receiver

516
00:21:32,400 --> 00:21:33,960
can do is guess

517
00:21:33,960 --> 00:21:36,419
however unfortunately

518
00:21:36,419 --> 00:21:39,240
um this is not possible to have both of

519
00:21:39,240 --> 00:21:40,679
them overwhelming in the security

520
00:21:40,679 --> 00:21:42,780
parameter so either the correctness or

521
00:21:42,780 --> 00:21:47,159
the anonymity must be sub-optimal

522
00:21:47,159 --> 00:21:49,679
uh why is that so in the easiest case

523
00:21:49,679 --> 00:21:52,080
the anonymous transfer is basically

524
00:21:52,080 --> 00:21:54,480
non-interactive this means that there's

525
00:21:54,480 --> 00:21:56,280
just two parties who insert a single

526
00:21:56,280 --> 00:21:57,419
message and then there's some

527
00:21:57,419 --> 00:21:59,580
reconstruction function that lets the

528
00:21:59,580 --> 00:22:02,220
receiver put in both of the messages and

529
00:22:02,220 --> 00:22:04,980
reconstruct the bit that was to be sent

530
00:22:04,980 --> 00:22:07,500
now in the communications model

531
00:22:07,500 --> 00:22:10,440
we use synchronous communication so the

532
00:22:10,440 --> 00:22:13,380
message that the actual sender needs to

533
00:22:13,380 --> 00:22:15,720
send is independent of the message that

534
00:22:15,720 --> 00:22:18,179
the other non-participant has sent so

535
00:22:18,179 --> 00:22:20,820
it's not possible to somehow make them

536
00:22:20,820 --> 00:22:23,100
dependent on each other which means that

537
00:22:23,100 --> 00:22:24,720
in order to

538
00:22:24,720 --> 00:22:27,980
get the desired level of correctness

539
00:22:27,980 --> 00:22:30,960
the actual sender needs to construct a

540
00:22:30,960 --> 00:22:33,539
message that reconstructs the bits that

541
00:22:33,539 --> 00:22:36,000
is to be transferred regardless of what

542
00:22:36,000 --> 00:22:37,919
the other party inputs

543
00:22:37,919 --> 00:22:41,820
so why is that not so good because if

544
00:22:41,820 --> 00:22:43,799
the receiver is adversarial it can use

545
00:22:43,799 --> 00:22:45,960
the same message that party zero sends

546
00:22:45,960 --> 00:22:49,320
and use own Randomness for it's for the

547
00:22:49,320 --> 00:22:50,760
party one message

548
00:22:50,760 --> 00:22:52,919
in that case

549
00:22:52,919 --> 00:22:55,919
um so at a high level either P0 is the

550
00:22:55,919 --> 00:22:57,539
sender then this message actually

551
00:22:57,539 --> 00:22:59,940
encodes the width that is to be sent and

552
00:22:59,940 --> 00:23:01,980
then it will due to the correctness

553
00:23:01,980 --> 00:23:04,440
property also send the same message with

554
00:23:04,440 --> 00:23:07,320
a different rt1 message

555
00:23:07,320 --> 00:23:09,840
however if party one is the center then

556
00:23:09,840 --> 00:23:11,640
none of those two messages actually

557
00:23:11,640 --> 00:23:13,200
depend on the bits

558
00:23:13,200 --> 00:23:18,559
so as an easy attack on the on the

559
00:23:18,559 --> 00:23:20,760
anonymity based on the correctness is

560
00:23:20,760 --> 00:23:23,700
possible here so but what is this what

561
00:23:23,700 --> 00:23:26,100
if we look at interactive protocols

562
00:23:26,100 --> 00:23:29,220
namely Crown protocols

563
00:23:29,220 --> 00:23:31,440
um if we have a protocol that has

564
00:23:31,440 --> 00:23:33,299
surrounds then each round can depend on

565
00:23:33,299 --> 00:23:35,400
the previous rounds which was obvious

566
00:23:35,400 --> 00:23:38,760
but if we look at the serum protocol

567
00:23:38,760 --> 00:23:40,980
from how it's constructed it's basically

568
00:23:40,980 --> 00:23:43,260
you can consider it a z minus one

569
00:23:43,260 --> 00:23:45,299
program protocol with an additional

570
00:23:45,299 --> 00:23:47,480
round at the end

571
00:23:47,480 --> 00:23:50,700
where the parties basically

572
00:23:50,700 --> 00:23:52,799
construct their last message based on

573
00:23:52,799 --> 00:23:54,360
the transcript that was previously

574
00:23:54,360 --> 00:23:56,220
previously created

575
00:23:56,220 --> 00:23:59,760
now why why does that why is that good

576
00:23:59,760 --> 00:24:01,980
because we can just

577
00:24:01,980 --> 00:24:04,200
consider a different protocol

578
00:24:04,200 --> 00:24:06,000
which does the same thing for the first

579
00:24:06,000 --> 00:24:07,860
C minus one rounds but in the final

580
00:24:07,860 --> 00:24:10,440
round it just replaces both messages by

581
00:24:10,440 --> 00:24:11,700
random bits

582
00:24:11,700 --> 00:24:13,740
of sufficient lengths

583
00:24:13,740 --> 00:24:16,559
and now we can analyze this protocol so

584
00:24:16,559 --> 00:24:19,260
it now holds that either the final round

585
00:24:19,260 --> 00:24:21,900
really has a high impact on the on the

586
00:24:21,900 --> 00:24:24,120
correctness of the protocol meaning that

587
00:24:24,120 --> 00:24:26,880
after C minus one runs it's still not

588
00:24:26,880 --> 00:24:28,860
clear what the bit should which bit

589
00:24:28,860 --> 00:24:30,900
should be transferred and in the final

590
00:24:30,900 --> 00:24:33,299
round the bit then gets fixed to the

591
00:24:33,299 --> 00:24:34,860
desired correctness

592
00:24:34,860 --> 00:24:37,080
now if

593
00:24:37,080 --> 00:24:40,140
this protocol doesn't send the same bit

594
00:24:40,140 --> 00:24:41,940
then the same attack from before is

595
00:24:41,940 --> 00:24:44,880
possible namely where we just

596
00:24:44,880 --> 00:24:47,340
replace the message of one party

597
00:24:47,340 --> 00:24:49,500
which we hope to be the sender by

598
00:24:49,500 --> 00:24:52,799
Randomness and then to compare the

599
00:24:52,799 --> 00:24:54,780
results with what was in the honest

600
00:24:54,780 --> 00:24:56,220
protocol

601
00:24:56,220 --> 00:24:58,919
however if the final round doesn't have

602
00:24:58,919 --> 00:25:01,200
a high impact on the correctness

603
00:25:01,200 --> 00:25:03,240
then we have a c minus one round

604
00:25:03,240 --> 00:25:06,840
protocol which is comparatively

605
00:25:06,840 --> 00:25:10,620
a Sim which is comparatively correct so

606
00:25:10,620 --> 00:25:14,400
we it's maybe not that correct but not

607
00:25:14,400 --> 00:25:17,100
sufficiently for the attack

608
00:25:17,100 --> 00:25:19,980
but in that case the same argumentation

609
00:25:19,980 --> 00:25:21,900
the same reasoning works for the C minus

610
00:25:21,900 --> 00:25:23,820
one one protocol so we have no SC minus

611
00:25:23,820 --> 00:25:25,200
one round protocol which is the

612
00:25:25,200 --> 00:25:27,659
comparative correctness and just

613
00:25:27,659 --> 00:25:29,279
removing one round doesn't have any

614
00:25:29,279 --> 00:25:31,500
effects on the anonymity

615
00:25:31,500 --> 00:25:34,080
so in total we can do the same reasoning

616
00:25:34,080 --> 00:25:36,000
on the C minus one on protocol and

617
00:25:36,000 --> 00:25:38,039
eventually either end up at the

618
00:25:38,039 --> 00:25:40,620
non-interactive protocol because we

619
00:25:40,620 --> 00:25:42,960
always just remove the final round

620
00:25:42,960 --> 00:25:44,760
where we have already shown that it's

621
00:25:44,760 --> 00:25:46,740
not possible or we find a round that can

622
00:25:46,740 --> 00:25:49,260
be attacked by the same type of attack

623
00:25:49,260 --> 00:25:51,840
because it's where the bit is defined

624
00:25:51,840 --> 00:25:53,580
really

625
00:25:53,580 --> 00:25:57,000
so since it's not possible to construct

626
00:25:57,000 --> 00:25:59,940
it perfectly secure meaning also not

627
00:25:59,940 --> 00:26:02,700
with overwhelming anonymity and

628
00:26:02,700 --> 00:26:04,679
um

629
00:26:04,679 --> 00:26:07,380
and correctness we took some compromises

630
00:26:07,380 --> 00:26:09,679
to still get some sort of a meaningful

631
00:26:09,679 --> 00:26:12,659
instantiation so what we did was we

632
00:26:12,659 --> 00:26:15,299
fixed the anonymity by just saying maybe

633
00:26:15,299 --> 00:26:19,380
it's enough to have Delta 0.99

634
00:26:19,380 --> 00:26:21,059
and instead of going to the

635
00:26:21,059 --> 00:26:24,000
asymptotically asymptotic setting where

636
00:26:24,000 --> 00:26:26,159
we say that the honest protocol

637
00:26:26,159 --> 00:26:28,559
execution time can be described by a

638
00:26:28,559 --> 00:26:30,480
polynomial in the security parameter and

639
00:26:30,480 --> 00:26:31,919
the adversary needs some super

640
00:26:31,919 --> 00:26:34,440
polynomial time we go to A fine grain

641
00:26:34,440 --> 00:26:36,240
setting where we have much closer bounds

642
00:26:36,240 --> 00:26:38,159
where we basically say the protocol

643
00:26:38,159 --> 00:26:40,380
itself takes time t

644
00:26:40,380 --> 00:26:43,380
and the adversary is has to take at

645
00:26:43,380 --> 00:26:45,720
least t squared steps to perform the

646
00:26:45,720 --> 00:26:47,159
attack

647
00:26:47,159 --> 00:26:49,559
plus we use some ideal obfuscation which

648
00:26:49,559 --> 00:26:52,320
is basically obfuscation in terms of an

649
00:26:52,320 --> 00:26:53,340
oracle

650
00:26:53,340 --> 00:26:57,840
so you can so this does not contradict

651
00:26:57,840 --> 00:26:59,820
the proof the proof is even valid when

652
00:26:59,820 --> 00:27:02,340
you when we assume ideal obfuscation

653
00:27:02,340 --> 00:27:04,500
now full-time reasons I cannot go into

654
00:27:04,500 --> 00:27:07,440
the protocol but uh why does the

655
00:27:07,440 --> 00:27:09,360
protocol still make sense so

656
00:27:09,360 --> 00:27:11,640
um that's the famous paper by impact

657
00:27:11,640 --> 00:27:13,559
liatsov or about the five words of

658
00:27:13,559 --> 00:27:15,120
cryptography I believe there are known

659
00:27:15,120 --> 00:27:16,500
because they were just explained on

660
00:27:16,500 --> 00:27:17,340
Monday

661
00:27:17,340 --> 00:27:19,820
uh there's two worlds which I want to

662
00:27:19,820 --> 00:27:23,159
emphasize here one is apostopia which is

663
00:27:23,159 --> 00:27:25,140
basically the world which contains all

664
00:27:25,140 --> 00:27:26,820
the problems that can be solved if we

665
00:27:26,820 --> 00:27:28,200
assume obfuscation

666
00:27:28,200 --> 00:27:30,480
another one is impossible Utopia which

667
00:27:30,480 --> 00:27:32,340
is basically the world that

668
00:27:32,340 --> 00:27:34,260
contains other problems that even if we

669
00:27:34,260 --> 00:27:37,140
have obfuscation we cannot solve now an

670
00:27:37,140 --> 00:27:39,360
interesting question is how these worlds

671
00:27:39,360 --> 00:27:41,100
relate in different settings so there's

672
00:27:41,100 --> 00:27:44,100
a lot of previous works on on separating

673
00:27:44,100 --> 00:27:46,799
them from Quantum from not from

674
00:27:46,799 --> 00:27:49,020
classical end of course from classical

675
00:27:49,020 --> 00:27:52,919
and fine brains so uh in the fine grain

676
00:27:52,919 --> 00:27:55,320
setting it is known that

677
00:27:55,320 --> 00:27:59,220
those two words basically collapse so uh

678
00:27:59,220 --> 00:28:01,559
there's a con there's a paper from 2008

679
00:28:01,559 --> 00:28:03,299
that showed that in the Franklin setting

680
00:28:03,299 --> 00:28:05,220
exponentially secure one-way functions

681
00:28:05,220 --> 00:28:07,559
suffice to create a public key

682
00:28:07,559 --> 00:28:09,360
encryption in the fine-grained public

683
00:28:09,360 --> 00:28:10,460
key encryption

684
00:28:10,460 --> 00:28:13,200
so the question is are there any further

685
00:28:13,200 --> 00:28:16,380
separating results no we haven't shown

686
00:28:16,380 --> 00:28:19,140
that for the for the highest classes but

687
00:28:19,140 --> 00:28:21,299
we've taken a step towards showing this

688
00:28:21,299 --> 00:28:25,020
because we've shown that um

689
00:28:25,020 --> 00:28:27,480
Anonymous transfer with overwhelming

690
00:28:27,480 --> 00:28:29,940
correctness and anonymity is in

691
00:28:29,940 --> 00:28:32,520
classical asymptotic uh impossible

692
00:28:32,520 --> 00:28:34,860
Utopia so it cannot be constructed even

693
00:28:34,860 --> 00:28:37,679
if we assume obfuscation but in the fine

694
00:28:37,679 --> 00:28:40,740
grain setting uh we believe that there's

695
00:28:40,740 --> 00:28:42,720
also a construction

696
00:28:42,720 --> 00:28:45,539
uh in office Topia with fine grain

697
00:28:45,539 --> 00:28:48,480
Security based on with her which has

698
00:28:48,480 --> 00:28:51,000
overwhelming anonymity now our anonymity

699
00:28:51,000 --> 00:28:53,100
is not overwhelming so it's still an

700
00:28:53,100 --> 00:28:54,659
open question whether this construction

701
00:28:54,659 --> 00:28:57,120
really exists but we consider it a first

702
00:28:57,120 --> 00:29:00,199
step in that direction

703
00:29:00,360 --> 00:29:02,159
so in conclusion

704
00:29:02,159 --> 00:29:04,919
um we modeled Anonymous whistleblowing

705
00:29:04,919 --> 00:29:06,840
as Anonymous transfer and showed that

706
00:29:06,840 --> 00:29:08,100
it's not

707
00:29:08,100 --> 00:29:10,080
efficiently possible it's not possible

708
00:29:10,080 --> 00:29:12,120
at all to get it with overwhelming

709
00:29:12,120 --> 00:29:13,919
correctness and anonymity

710
00:29:13,919 --> 00:29:16,279
but there's a fine grain construction

711
00:29:16,279 --> 00:29:19,140
which is non-trivial

712
00:29:19,140 --> 00:29:22,860
which might be a candidate to separate

713
00:29:22,860 --> 00:29:23,779
the

714
00:29:23,779 --> 00:29:27,480
worlds between asantotic and and

715
00:29:27,480 --> 00:29:30,120
fine-grained cryptography

716
00:29:30,120 --> 00:29:33,439
so are there any questions

717
00:29:38,520 --> 00:29:42,559
any questions for Swinton

718
00:29:45,500 --> 00:29:49,919
foreign thanks for the talk uh so you

719
00:29:49,919 --> 00:29:51,659
said that your use of Ideal Obsession

720
00:29:51,659 --> 00:29:54,539
doesn't uh jeopardize the impossibility

721
00:29:54,539 --> 00:29:56,580
result uh do you mean that it could be

722
00:29:56,580 --> 00:29:58,080
done with a physical assumption or

723
00:29:58,080 --> 00:29:59,460
something like I mean that you make

724
00:29:59,460 --> 00:30:02,940
black box use of it sorry or okay what

725
00:30:02,940 --> 00:30:05,580
do you mean by uh the fact that you rely

726
00:30:05,580 --> 00:30:08,279
on Nigel obfuscation doesn't trivialize

727
00:30:08,279 --> 00:30:10,080
the impossibility result

728
00:30:10,080 --> 00:30:12,179
um the impossibility result also holds

729
00:30:12,179 --> 00:30:14,279
if we assume that the part that the

730
00:30:14,279 --> 00:30:16,740
protocol makes use of of Ideal

731
00:30:16,740 --> 00:30:19,380
obfuscation so

732
00:30:19,380 --> 00:30:21,179
um we just say the original protocol

733
00:30:21,179 --> 00:30:23,399
even with Oracle access to some other

734
00:30:23,399 --> 00:30:27,439
protocol to some sub-functionality

735
00:30:30,779 --> 00:30:33,740
any more questions

736
00:30:34,440 --> 00:30:36,419
yeah so maybe I just wanted to ask a

737
00:30:36,419 --> 00:30:38,700
very basic question so when you talk

738
00:30:38,700 --> 00:30:40,080
about protocols for your impossibility

739
00:30:40,080 --> 00:30:42,500
result what is the exact communication

740
00:30:42,500 --> 00:30:46,500
now so who's talking with Google we won

741
00:30:46,500 --> 00:30:48,480
in the receiver only or whatever so

742
00:30:48,480 --> 00:30:49,860
everything happens through a broadcast

743
00:30:49,860 --> 00:30:52,320
channel but an authenticated broadcaster

744
00:30:52,320 --> 00:30:53,640
and this is the one assumption that we

745
00:30:53,640 --> 00:30:56,760
make this I see Channel which where

746
00:30:56,760 --> 00:30:58,679
everybody can send a message and then

747
00:30:58,679 --> 00:31:01,559
everybody knows who sends it okay and

748
00:31:01,559 --> 00:31:03,600
basically the communication itself is

749
00:31:03,600 --> 00:31:05,399
happening through steganographic means

750
00:31:05,399 --> 00:31:08,100
by to hide the fact that communication

751
00:31:08,100 --> 00:31:09,899
is happening at all right so it's pretty

752
00:31:09,899 --> 00:31:12,360
okay good thanks all right

753
00:31:12,360 --> 00:31:13,740
all right so if there are no more

754
00:31:13,740 --> 00:31:15,480
questions so let's thanks when again and

755
00:31:15,480 --> 00:31:18,919
next week I can set up

756
00:31:55,020 --> 00:31:58,200
all right so the next talk is on poly

757
00:31:58,200 --> 00:31:59,640
onions achieving anonymity in the

758
00:31:59,640 --> 00:32:04,340
presence of churn and Miranda will begin

759
00:32:05,159 --> 00:32:08,340
thank you so I'll be speaking about poly

760
00:32:08,340 --> 00:32:10,080
onions achieving anonymity in the

761
00:32:10,080 --> 00:32:11,940
presence of churn this is Joint work

762
00:32:11,940 --> 00:32:14,580
with megumi Ando Anna Lee sinskaya and

763
00:32:14,580 --> 00:32:16,880
Tall Malkin

764
00:32:16,880 --> 00:32:20,520
so in our problem We Have Allison Bob as

765
00:32:20,520 --> 00:32:22,380
usual and Alice wants to anonymously

766
00:32:22,380 --> 00:32:24,960
send a message to Bob now she can't

767
00:32:24,960 --> 00:32:27,059
directly send her message M even if she

768
00:32:27,059 --> 00:32:29,100
encrypts it because an adversary who

769
00:32:29,100 --> 00:32:30,960
sees the network traffic can see a

770
00:32:30,960 --> 00:32:32,700
packet going from Alice's server to

771
00:32:32,700 --> 00:32:34,020
Bob's server and know that they're

772
00:32:34,020 --> 00:32:36,059
communicating

773
00:32:36,059 --> 00:32:38,820
more precisely what we mean by Anonymous

774
00:32:38,820 --> 00:32:41,460
is we don't want an adversary to be able

775
00:32:41,460 --> 00:32:44,220
to tell who Alice is talking to even if

776
00:32:44,220 --> 00:32:45,600
it can observe all of the network

777
00:32:45,600 --> 00:32:47,880
traffic and corrupt a constant fraction

778
00:32:47,880 --> 00:32:50,399
of the nodes or servers so you can think

779
00:32:50,399 --> 00:32:52,140
of anonymity as a game-based definition

780
00:32:52,140 --> 00:32:54,720
where the adversary specifies to users

781
00:32:54,720 --> 00:32:56,820
Bob and Charlie who Alice might be

782
00:32:56,820 --> 00:32:58,799
talking to the Challenger chooses one of

783
00:32:58,799 --> 00:33:01,140
these uniformly at random and then the

784
00:33:01,140 --> 00:33:02,940
adversary can view a run of the

785
00:33:02,940 --> 00:33:04,440
communication protocol with Alice

786
00:33:04,440 --> 00:33:06,659
talking to this chosen party and then

787
00:33:06,659 --> 00:33:08,640
the adversary tries to guess whether Bob

788
00:33:08,640 --> 00:33:10,740
or Charlie was chosen and the adversary

789
00:33:10,740 --> 00:33:12,720
shouldn't guess right with negligibly

790
00:33:12,720 --> 00:33:16,399
more probability than one half

791
00:33:17,100 --> 00:33:19,620
so one prominent solution to this

792
00:33:19,620 --> 00:33:21,299
problem is onion routing you might have

793
00:33:21,299 --> 00:33:23,039
heard of this in the context of Tor

794
00:33:23,039 --> 00:33:25,019
which is a commonly used variant of this

795
00:33:25,019 --> 00:33:26,880
in practice

796
00:33:26,880 --> 00:33:28,860
um and this involves Alice encrypting

797
00:33:28,860 --> 00:33:31,140
her message in layers hence the name

798
00:33:31,140 --> 00:33:33,360
onion and sending it through an

799
00:33:33,360 --> 00:33:35,519
intermediary server Ivan on the way to

800
00:33:35,519 --> 00:33:36,960
Bob

801
00:33:36,960 --> 00:33:39,659
now when Ivan gets this onion he peels

802
00:33:39,659 --> 00:33:41,880
it or decrypts it with his secret key to

803
00:33:41,880 --> 00:33:44,399
reveal the next layer of the onion

804
00:33:44,399 --> 00:33:46,500
forwards it along to Bob who can then

805
00:33:46,500 --> 00:33:48,539
decrypt or peel it again to reveal the

806
00:33:48,539 --> 00:33:50,779
message

807
00:33:50,940 --> 00:33:53,460
and the reason why we have this layered

808
00:33:53,460 --> 00:33:56,100
encryption thing is we want onions to

809
00:33:56,100 --> 00:33:58,559
mix at honest intermediary servers and

810
00:33:58,559 --> 00:34:00,299
what we mean by mixing is that the

811
00:34:00,299 --> 00:34:01,980
adversary shouldn't be able to correlate

812
00:34:01,980 --> 00:34:03,899
the incoming traffic with the outgoing

813
00:34:03,899 --> 00:34:07,019
traffic so here since the outer layer of

814
00:34:07,019 --> 00:34:09,060
the onion before it gets to Ivan looks

815
00:34:09,060 --> 00:34:11,040
uncorrelated from the next layer of the

816
00:34:11,040 --> 00:34:13,679
onion when it leaves Ivan the adversary

817
00:34:13,679 --> 00:34:15,540
can't really tell who Alice is talking

818
00:34:15,540 --> 00:34:17,879
to but crucially Ivan here needs to be

819
00:34:17,879 --> 00:34:20,040
honest because if the adversary knows

820
00:34:20,040 --> 00:34:21,899
his secret key the adversary can peel

821
00:34:21,899 --> 00:34:24,719
the onion and it knows what the incoming

822
00:34:24,719 --> 00:34:26,280
and outgoing traffic for that onion

823
00:34:26,280 --> 00:34:28,760
looks like

824
00:34:29,179 --> 00:34:31,859
and in fact it's not enough for Alice to

825
00:34:31,859 --> 00:34:33,540
just Sprout her onion through Ivan

826
00:34:33,540 --> 00:34:36,300
because we need Ivan to be honest with

827
00:34:36,300 --> 00:34:38,399
high probability so instead we can have

828
00:34:38,399 --> 00:34:40,440
many intermediary servers and then as we

829
00:34:40,440 --> 00:34:42,179
increase the scumber the probability

830
00:34:42,179 --> 00:34:44,040
that more of them are honest increases

831
00:34:44,040 --> 00:34:45,839
and prior work has shown that there

832
00:34:45,839 --> 00:34:47,460
exists an onion writing protocol that's

833
00:34:47,460 --> 00:34:49,080
synonymous with a poly logarithmic

834
00:34:49,080 --> 00:34:51,300
number of rounds and in fact this is

835
00:34:51,300 --> 00:34:52,679
tight a poly logarithmic number of

836
00:34:52,679 --> 00:34:54,239
rounds is necessary

837
00:34:54,239 --> 00:34:56,699
so this is nice and all but we're not

838
00:34:56,699 --> 00:34:59,099
done yet in particular because this

839
00:34:59,099 --> 00:35:01,320
prior work is in What's called the

840
00:35:01,320 --> 00:35:04,200
single run setting without churn so the

841
00:35:04,200 --> 00:35:06,180
single run setting means that the

842
00:35:06,180 --> 00:35:08,099
adversary observes one run of the

843
00:35:08,099 --> 00:35:10,260
protocol so Alice sends one message to

844
00:35:10,260 --> 00:35:12,780
Bob and that's it in the real world this

845
00:35:12,780 --> 00:35:14,880
is a bit unrealistic

846
00:35:14,880 --> 00:35:16,380
um because Alice might be sending more

847
00:35:16,380 --> 00:35:19,380
messages over a longer time scale and we

848
00:35:19,380 --> 00:35:22,020
want her to remain anonymous even if she

849
00:35:22,020 --> 00:35:23,820
sends many messages to the same person

850
00:35:23,820 --> 00:35:26,339
over and over again so this multi-run

851
00:35:26,339 --> 00:35:28,200
setting is challenging

852
00:35:28,200 --> 00:35:30,599
also prior work assumed that all servers

853
00:35:30,599 --> 00:35:32,579
are online throughout the duration of

854
00:35:32,579 --> 00:35:33,960
the protocol

855
00:35:33,960 --> 00:35:36,000
this is a bit unrealistic as well

856
00:35:36,000 --> 00:35:37,619
especially when you have multiple runs

857
00:35:37,619 --> 00:35:39,660
of the protocol since people's internet

858
00:35:39,660 --> 00:35:41,820
connections are bad it's likely likely

859
00:35:41,820 --> 00:35:43,260
that servers will go offline

860
00:35:43,260 --> 00:35:46,200
unpredictably in the real world and we

861
00:35:46,200 --> 00:35:47,700
want to be able to model this so we call

862
00:35:47,700 --> 00:35:49,619
this network churn where servers might

863
00:35:49,619 --> 00:35:52,940
go offline unpredictably

864
00:35:53,700 --> 00:35:56,099
now revisiting our standard onion

865
00:35:56,099 --> 00:35:58,020
routing example let's see what happens

866
00:35:58,020 --> 00:36:00,000
if Ivan is offline

867
00:36:00,000 --> 00:36:02,400
since Ivan's secret key is necessary to

868
00:36:02,400 --> 00:36:04,079
decrypt this onion and reveal the next

869
00:36:04,079 --> 00:36:07,560
layer if Ivan is offline then Bob will

870
00:36:07,560 --> 00:36:09,180
never be able to recover Alice's message

871
00:36:09,180 --> 00:36:12,660
because nobody can decrypt this onion

872
00:36:12,660 --> 00:36:15,960
so we want a solution to this problem

873
00:36:15,960 --> 00:36:17,040
um

874
00:36:17,040 --> 00:36:19,140
but before coming up with the solution

875
00:36:19,140 --> 00:36:21,060
we need to Define what problem we're

876
00:36:21,060 --> 00:36:23,160
actually trying to solve so we needed a

877
00:36:23,160 --> 00:36:24,900
new notion of anonymity in this

878
00:36:24,900 --> 00:36:27,000
multi-run setting with network churn

879
00:36:27,000 --> 00:36:29,839
this definition didn't exist before

880
00:36:29,839 --> 00:36:32,700
once we had this definition we were able

881
00:36:32,700 --> 00:36:34,380
to show that for a natural class of

882
00:36:34,380 --> 00:36:36,000
onion routing protocols this includes

883
00:36:36,000 --> 00:36:38,460
many existing protocols single run

884
00:36:38,460 --> 00:36:41,400
anonymity implies multi-run anonymity so

885
00:36:41,400 --> 00:36:43,320
now we can just prove that a protocol is

886
00:36:43,320 --> 00:36:46,020
Anonymous in the single run setting and

887
00:36:46,020 --> 00:36:47,520
this is nice because the work is done

888
00:36:47,520 --> 00:36:49,260
for us it implies multi-run anonymity

889
00:36:49,260 --> 00:36:51,780
but this doesn't deal with network churn

890
00:36:51,780 --> 00:36:53,280
yet

891
00:36:53,280 --> 00:36:56,040
so the next thing we did is we defined a

892
00:36:56,040 --> 00:36:58,380
new kind of onion encryption called poly

893
00:36:58,380 --> 00:37:01,380
onion encryption that's more robust

894
00:37:01,380 --> 00:37:04,140
um to this case when Ivan is offline so

895
00:37:04,140 --> 00:37:05,940
it lets us sort of recover in that case

896
00:37:05,940 --> 00:37:08,520
as I'll explain later and part of

897
00:37:08,520 --> 00:37:10,020
defining this was including security

898
00:37:10,020 --> 00:37:12,060
definitions that capture this notion of

899
00:37:12,060 --> 00:37:15,500
mixing that I mentioned earlier

900
00:37:15,540 --> 00:37:17,640
we then construct a poly onion

901
00:37:17,640 --> 00:37:19,560
encryption scheme and show that it

902
00:37:19,560 --> 00:37:23,220
satisfies our definition of security

903
00:37:23,220 --> 00:37:25,680
and finally we're able to use this poly

904
00:37:25,680 --> 00:37:29,220
onion encryption scheme we apply it to a

905
00:37:29,220 --> 00:37:31,560
known onion routing protocol to obtain a

906
00:37:31,560 --> 00:37:33,359
protocol that is anonymous against a

907
00:37:33,359 --> 00:37:35,880
passive adversary and the multi-run

908
00:37:35,880 --> 00:37:38,900
setting with churn

909
00:37:39,900 --> 00:37:43,200
now revisiting our problem where Ivan is

910
00:37:43,200 --> 00:37:44,820
offline

911
00:37:44,820 --> 00:37:47,400
in this case when the onion can't

912
00:37:47,400 --> 00:37:49,859
continue past Ivan we say that the onion

913
00:37:49,859 --> 00:37:51,960
is dropped and now remembering that we

914
00:37:51,960 --> 00:37:53,579
needed a poly logarithmic number of

915
00:37:53,579 --> 00:37:56,160
rounds for anonymity if we have a

916
00:37:56,160 --> 00:37:58,280
constant fraction of the servers offline

917
00:37:58,280 --> 00:38:01,440
then Alice's onion will be dropped with

918
00:38:01,440 --> 00:38:03,780
overwhelming probability so we can't

919
00:38:03,780 --> 00:38:05,579
have some solution where Alice just

920
00:38:05,579 --> 00:38:07,260
sends her message multiple times and

921
00:38:07,260 --> 00:38:08,820
increases the probability that it'll

922
00:38:08,820 --> 00:38:11,460
arrive at Bob because the probability of

923
00:38:11,460 --> 00:38:13,920
it being dropped is so high so we need

924
00:38:13,920 --> 00:38:16,920
something a little bit more clever

925
00:38:16,920 --> 00:38:19,260
and a first attempt at solving this

926
00:38:19,260 --> 00:38:22,320
problem was called Duo onions proposed

927
00:38:22,320 --> 00:38:25,260
in 2005 by Awana klonowsky and kudlowski

928
00:38:25,260 --> 00:38:28,200
the idea here is that Alice's onion is

929
00:38:28,200 --> 00:38:30,720
peelable not just by this one

930
00:38:30,720 --> 00:38:33,780
intermediary Ivan but also by another

931
00:38:33,780 --> 00:38:37,079
candidate intermediary Ida and so here

932
00:38:37,079 --> 00:38:39,420
if Ivan is offline

933
00:38:39,420 --> 00:38:41,760
the onion can instead be sent to Ida

934
00:38:41,760 --> 00:38:43,800
who's also able to peel the onion with

935
00:38:43,800 --> 00:38:46,140
her secret key and so this keeps the

936
00:38:46,140 --> 00:38:48,359
onion going through the network

937
00:38:48,359 --> 00:38:50,760
but the problem here is it's harder to

938
00:38:50,760 --> 00:38:53,940
achieve mixing in fact if either Ivan or

939
00:38:53,940 --> 00:38:56,280
that should say Ida is corrupted then

940
00:38:56,280 --> 00:38:58,260
the adversary is able to trace the onion

941
00:38:58,260 --> 00:39:00,240
and no mixing occurs and I'll show you

942
00:39:00,240 --> 00:39:02,880
how the adversary does this this notably

943
00:39:02,880 --> 00:39:04,560
is a passive attack so the adversary

944
00:39:04,560 --> 00:39:05,760
doesn't need to deviate from the

945
00:39:05,760 --> 00:39:08,640
protocol at all and what happens here is

946
00:39:08,640 --> 00:39:10,500
since the adversary knows Ivan's secret

947
00:39:10,500 --> 00:39:13,740
key it sees this onion going to Ida and

948
00:39:13,740 --> 00:39:15,540
the adversary just in its head can

949
00:39:15,540 --> 00:39:17,400
decrypt the onion using its secret key

950
00:39:17,400 --> 00:39:20,339
to learn what the next layer looks like

951
00:39:20,339 --> 00:39:22,500
then the adversary can look at the

952
00:39:22,500 --> 00:39:25,020
network traffic leaving Ida and match

953
00:39:25,020 --> 00:39:26,640
this next layer of the onion to the

954
00:39:26,640 --> 00:39:28,260
traffic and it knows exactly where the

955
00:39:28,260 --> 00:39:30,180
onion is going in the next hop

956
00:39:30,180 --> 00:39:32,579
so this results in what we say is a

957
00:39:32,579 --> 00:39:34,440
higher effective corruption rate the

958
00:39:34,440 --> 00:39:36,720
probability that mixing occurs at any

959
00:39:36,720 --> 00:39:38,640
hop is now much lower because it's

960
00:39:38,640 --> 00:39:40,560
sufficient for the adversary to corrupt

961
00:39:40,560 --> 00:39:44,099
either Ivan or Ida

962
00:39:44,099 --> 00:39:46,320
another issue with this construction is

963
00:39:46,320 --> 00:39:48,359
that there are only two candidate

964
00:39:48,359 --> 00:39:50,400
intermediaries so the probability that

965
00:39:50,400 --> 00:39:52,020
the onion is dropped is still quite High

966
00:39:52,020 --> 00:39:53,220
we're only getting a constant

967
00:39:53,220 --> 00:39:55,260
Improvement whereas really we would want

968
00:39:55,260 --> 00:39:57,240
to expand to a larger number of Canada

969
00:39:57,240 --> 00:39:59,280
intermediaries and then as long as one

970
00:39:59,280 --> 00:40:01,020
of them is online The Onion isn't

971
00:40:01,020 --> 00:40:03,119
dropped but now we have this trade-off

972
00:40:03,119 --> 00:40:06,000
between the number of candidates and the

973
00:40:06,000 --> 00:40:08,160
higher effective corruption rate so it's

974
00:40:08,160 --> 00:40:09,599
sort of not clear how to set the number

975
00:40:09,599 --> 00:40:12,180
of candidates in a way that lets us both

976
00:40:12,180 --> 00:40:14,160
allow the onion to remain in the network

977
00:40:14,160 --> 00:40:17,899
and Achieve mixing

978
00:40:18,480 --> 00:40:21,300
our solution poly onions introduces a

979
00:40:21,300 --> 00:40:24,000
committee and it also introduces the

980
00:40:24,000 --> 00:40:26,339
notion of a primary candidate who is

981
00:40:26,339 --> 00:40:28,680
supposed to be able to peel the onion if

982
00:40:28,680 --> 00:40:30,119
they're online versus an alternate

983
00:40:30,119 --> 00:40:32,040
candidate who can peel the onion only if

984
00:40:32,040 --> 00:40:34,380
the primary is offline and this

985
00:40:34,380 --> 00:40:36,420
alternate candidate needs to receive a

986
00:40:36,420 --> 00:40:38,099
key from a committee in order to peel

987
00:40:38,099 --> 00:40:40,140
the onion so the alternate can't peel

988
00:40:40,140 --> 00:40:42,540
the onion just with its secret key so

989
00:40:42,540 --> 00:40:44,220
Ivan here can no longer perform this

990
00:40:44,220 --> 00:40:46,320
attack

991
00:40:46,320 --> 00:40:48,660
instead Ivan needs to ask the committee

992
00:40:48,660 --> 00:40:50,400
for a key that's necessary to peel the

993
00:40:50,400 --> 00:40:53,280
onion and what the committee will do is

994
00:40:53,280 --> 00:40:56,099
it'll ask Ida if she's online if she's

995
00:40:56,099 --> 00:40:57,960
honest and online she'll respond that

996
00:40:57,960 --> 00:41:00,000
she is online the committee will see

997
00:41:00,000 --> 00:41:02,339
this and will tell Ivan no Ida is online

998
00:41:02,339 --> 00:41:04,680
I'm not giving you the key and Ivan will

999
00:41:04,680 --> 00:41:08,000
not be able to peel this onion

1000
00:41:09,000 --> 00:41:11,280
introducing this committee assuming that

1001
00:41:11,280 --> 00:41:12,900
the majority of the committee members

1002
00:41:12,900 --> 00:41:15,420
are honest gives us mixing as long as

1003
00:41:15,420 --> 00:41:17,160
the primary candidate is honest and

1004
00:41:17,160 --> 00:41:19,500
online and crucially here the

1005
00:41:19,500 --> 00:41:20,880
probability that this happens is

1006
00:41:20,880 --> 00:41:23,640
independent of the number of candidates

1007
00:41:23,640 --> 00:41:25,560
and so we're able to extend our

1008
00:41:25,560 --> 00:41:27,119
construction to accommodate any number

1009
00:41:27,119 --> 00:41:29,579
of candidates which lets us boost the

1010
00:41:29,579 --> 00:41:31,440
probability that the idea is not dropped

1011
00:41:31,440 --> 00:41:35,060
arbitrarily by tuning this perimeter

1012
00:41:35,520 --> 00:41:37,440
now I'll give a very high level overview

1013
00:41:37,440 --> 00:41:39,480
of how we actually achieve this in our

1014
00:41:39,480 --> 00:41:42,480
encryption scheme so shown here is the

1015
00:41:42,480 --> 00:41:44,339
structure of a ciphertext in standard

1016
00:41:44,339 --> 00:41:46,440
onion encryption

1017
00:41:46,440 --> 00:41:48,540
um there are these K blocks which

1018
00:41:48,540 --> 00:41:50,160
contain symmetric keys that are

1019
00:41:50,160 --> 00:41:52,560
necessary to peel the onion for each hop

1020
00:41:52,560 --> 00:41:55,560
and this u-block contains Alice's actual

1021
00:41:55,560 --> 00:41:56,520
message

1022
00:41:56,520 --> 00:41:58,800
and so importantly there's a symmetric

1023
00:41:58,800 --> 00:42:01,140
key K sub I that's needed to peel the

1024
00:42:01,140 --> 00:42:03,859
rest of the onion

1025
00:42:04,980 --> 00:42:07,560
now the way that it's constructed only

1026
00:42:07,560 --> 00:42:09,720
Ida the first candidate is able to

1027
00:42:09,720 --> 00:42:12,480
decrypt with her secret key uh the first

1028
00:42:12,480 --> 00:42:14,220
K block and obtain the symmetric key

1029
00:42:14,220 --> 00:42:17,460
that lets her peel the rest of the onion

1030
00:42:17,460 --> 00:42:19,200
so we want to have this committee

1031
00:42:19,200 --> 00:42:21,660
protocol that lets Ivan the secondary

1032
00:42:21,660 --> 00:42:24,599
alternate candidate also obtain the

1033
00:42:24,599 --> 00:42:28,020
symmetric key if the committee lets him

1034
00:42:28,020 --> 00:42:30,359
and we do this by adding an h block

1035
00:42:30,359 --> 00:42:33,060
which contains inputs for the committee

1036
00:42:33,060 --> 00:42:36,619
to run this protocol for each hop

1037
00:42:36,720 --> 00:42:41,280
and so in this first h block there it

1038
00:42:41,280 --> 00:42:43,020
contains the identities of the committee

1039
00:42:43,020 --> 00:42:45,420
members and also the inputs for them to

1040
00:42:45,420 --> 00:42:47,700
run the protocol and these inputs for

1041
00:42:47,700 --> 00:42:49,140
the committee are basically secret

1042
00:42:49,140 --> 00:42:52,740
shares of the symmetric key and so if

1043
00:42:52,740 --> 00:42:54,480
enough of the committee members agree

1044
00:42:54,480 --> 00:42:57,119
that the first candidate is offline they

1045
00:42:57,119 --> 00:42:59,040
can return these secret shares and then

1046
00:42:59,040 --> 00:43:00,780
the symmetric key can be reconstructed

1047
00:43:00,780 --> 00:43:04,220
in order to peel the onion

1048
00:43:04,680 --> 00:43:06,599
um and this whole cyber text is

1049
00:43:06,599 --> 00:43:08,280
constructed by Alice when she's forming

1050
00:43:08,280 --> 00:43:10,380
her onion so she is the one who chooses

1051
00:43:10,380 --> 00:43:12,240
the committee members for each hop and

1052
00:43:12,240 --> 00:43:13,680
sets up the inputs for them to be able

1053
00:43:13,680 --> 00:43:16,460
to run the protocol

1054
00:43:17,520 --> 00:43:19,319
so this is the overall structure of our

1055
00:43:19,319 --> 00:43:21,660
onion we have the K block containing the

1056
00:43:21,660 --> 00:43:23,280
keys necessary to peel the rest of the

1057
00:43:23,280 --> 00:43:25,560
onion the h block which lets us have the

1058
00:43:25,560 --> 00:43:27,000
committee protocol it contains the

1059
00:43:27,000 --> 00:43:29,520
inputs for them and finally this u-lock

1060
00:43:29,520 --> 00:43:33,140
which contains the actual message

1061
00:43:33,359 --> 00:43:36,180
now today I focused on how we construct

1062
00:43:36,180 --> 00:43:38,940
our poly onion encryption scheme uh if

1063
00:43:38,940 --> 00:43:40,319
you're interested in any of the other

1064
00:43:40,319 --> 00:43:42,180
aspects of our paper you can find them

1065
00:43:42,180 --> 00:43:44,760
in the full paper on ePrint or ask me

1066
00:43:44,760 --> 00:43:46,440
and finally

1067
00:43:46,440 --> 00:43:48,660
here's a reward for listening this is

1068
00:43:48,660 --> 00:43:51,300
Luna my co-author megumi's daughter who

1069
00:43:51,300 --> 00:43:52,560
was born while we were writing this

1070
00:43:52,560 --> 00:43:54,900
paper and it turns out that you can buy

1071
00:43:54,900 --> 00:43:58,140
onion teether toys online so she's

1072
00:43:58,140 --> 00:44:00,540
gotten a very early start in onion

1073
00:44:00,540 --> 00:44:02,280
routing you can look out for her next

1074
00:44:02,280 --> 00:44:05,780
papers soon thank you

1075
00:44:11,960 --> 00:44:15,380
any questions

1076
00:44:19,200 --> 00:44:21,540
well so maybe I'll start with one just

1077
00:44:21,540 --> 00:44:24,300
uh oh there's one okay good

1078
00:44:24,300 --> 00:44:25,160
okay

1079
00:44:25,160 --> 00:44:27,420
sorry just I just you were just hidden

1080
00:44:27,420 --> 00:44:30,240
behind so I I assume the committee has

1081
00:44:30,240 --> 00:44:32,400
like two-thirds honest majority

1082
00:44:32,400 --> 00:44:34,380
going on among it

1083
00:44:34,380 --> 00:44:37,500
we just need an honest majority okay um

1084
00:44:37,500 --> 00:44:40,440
but the parameters are attunable uh like

1085
00:44:40,440 --> 00:44:43,200
Alice can choose how many committee

1086
00:44:43,200 --> 00:44:45,060
members she wants to be honest when she

1087
00:44:45,060 --> 00:44:47,880
forms her onion gotcha and then so does

1088
00:44:47,880 --> 00:44:50,040
the the like constant corruption

1089
00:44:50,040 --> 00:44:51,960
threshold so that it's corrupted at the

1090
00:44:51,960 --> 00:44:54,060
beginning and then at some like you're

1091
00:44:54,060 --> 00:44:55,319
choosing your committees with these

1092
00:44:55,319 --> 00:44:57,119
Corruptions having already occurred and

1093
00:44:57,119 --> 00:44:59,359
then there's no adaptivity there right

1094
00:44:59,359 --> 00:45:04,440
yeah so within each run of the protocol

1095
00:45:04,440 --> 00:45:08,040
um we assume static corruption but the

1096
00:45:08,040 --> 00:45:10,740
adversary can corrupt based on previous

1097
00:45:10,740 --> 00:45:12,900
runs of the protocol and the multi-run

1098
00:45:12,900 --> 00:45:15,200
setting

1099
00:45:16,500 --> 00:45:19,079
so so I guess the question is also uh

1100
00:45:19,079 --> 00:45:21,960
about relaxing the model so you need

1101
00:45:21,960 --> 00:45:23,700
synchronicity in a number of different

1102
00:45:23,700 --> 00:45:25,380
ways right for for rounds and I guess

1103
00:45:25,380 --> 00:45:27,540
also for detecting whether someone is

1104
00:45:27,540 --> 00:45:29,460
offline so is there anything that can be

1105
00:45:29,460 --> 00:45:32,880
relaxed a little bit uh to you know have

1106
00:45:32,880 --> 00:45:34,800
some almost synchronicity or

1107
00:45:34,800 --> 00:45:37,319
asynchronous but we crash detection or

1108
00:45:37,319 --> 00:45:39,000
is there something that can be done or

1109
00:45:39,000 --> 00:45:42,440
is just clearly impossible

1110
00:45:42,440 --> 00:45:46,260
I don't know but

1111
00:45:46,260 --> 00:45:47,839
I'll think about it for future work

1112
00:45:47,839 --> 00:45:50,160
thank you

1113
00:45:50,160 --> 00:45:53,060
again

1114
00:45:58,400 --> 00:46:01,619
so you obviously abstracted a clean uh

1115
00:46:01,619 --> 00:46:03,900
theoretical primitive but I can see like

1116
00:46:03,900 --> 00:46:06,660
issues for example to focus on timing

1117
00:46:06,660 --> 00:46:09,119
information maybe the person online now

1118
00:46:09,119 --> 00:46:11,160
but later online and address it really

1119
00:46:11,160 --> 00:46:14,099
Better Than People also only a later

1120
00:46:14,099 --> 00:46:16,560
easier scheme I mean you'll need some

1121
00:46:16,560 --> 00:46:18,480
details you can basically a full

1122
00:46:18,480 --> 00:46:20,040
solution taking all this kind of

1123
00:46:20,040 --> 00:46:22,640
external things into the workout that is

1124
00:46:22,640 --> 00:46:25,079
just the first obstruction and much more

1125
00:46:25,079 --> 00:46:27,420
work needs to be done to make it a full

1126
00:46:27,420 --> 00:46:29,819
system so I can say that we took all

1127
00:46:29,819 --> 00:46:31,260
things into account but the thing that

1128
00:46:31,260 --> 00:46:32,880
you mentioned about people like going

1129
00:46:32,880 --> 00:46:35,060
offline and coming back later

1130
00:46:35,060 --> 00:46:38,579
we assume that adversarially controlled

1131
00:46:38,579 --> 00:46:41,040
parties can pretend to be offline and

1132
00:46:41,040 --> 00:46:43,560
then later pretend to be online again so

1133
00:46:43,560 --> 00:46:46,020
we do capture that and we also model the

1134
00:46:46,020 --> 00:46:49,800
churn as being adversarially controlled

1135
00:46:49,800 --> 00:46:52,760
foreign

1136
00:46:53,280 --> 00:46:55,700
again

1137
00:46:55,700 --> 00:46:58,819
[Music]

1138
00:47:32,819 --> 00:47:35,640
all right so the the last Talk of the

1139
00:47:35,640 --> 00:47:37,980
session is on the price of verifiability

1140
00:47:37,980 --> 00:47:40,380
lower bounds for very valuable random

1141
00:47:40,380 --> 00:47:42,060
functions that's where Nicholas brand

1142
00:47:42,060 --> 00:47:44,180
then he saw finds Julia castner and

1143
00:47:44,180 --> 00:47:47,099
Aquino and Nicholas is going to give the

1144
00:47:47,099 --> 00:47:49,280
talk

1145
00:47:50,400 --> 00:47:54,960
but okay yeah so thanks for the intro

1146
00:47:54,960 --> 00:47:56,400
um yeah so this talk is essentially

1147
00:47:56,400 --> 00:47:57,420
about

1148
00:47:57,420 --> 00:48:00,540
um trying to explain uh why it's hard to

1149
00:48:00,540 --> 00:48:03,119
get random to get verifiable random

1150
00:48:03,119 --> 00:48:05,940
functions with short proofs

1151
00:48:05,940 --> 00:48:08,220
um so first of all what's the randomized

1152
00:48:08,220 --> 00:48:09,839
verify the random function it's

1153
00:48:09,839 --> 00:48:11,940
essentially a public key analog of a

1154
00:48:11,940 --> 00:48:15,000
pseudo-random function which we all know

1155
00:48:15,000 --> 00:48:18,240
um and it has a generation algorithm

1156
00:48:18,240 --> 00:48:20,579
which essentially gives you the secret

1157
00:48:20,579 --> 00:48:22,920
key the evaluation key and also a

1158
00:48:22,920 --> 00:48:24,240
verification key

1159
00:48:24,240 --> 00:48:27,380
and the evaluation function is just

1160
00:48:27,380 --> 00:48:30,960
adapted to produce the image

1161
00:48:30,960 --> 00:48:33,240
um but also to produce a proof for this

1162
00:48:33,240 --> 00:48:34,260
image

1163
00:48:34,260 --> 00:48:36,000
so

1164
00:48:36,000 --> 00:48:37,920
um since there's a public key primitive

1165
00:48:37,920 --> 00:48:40,740
we also have a verification procedure so

1166
00:48:40,740 --> 00:48:42,359
the verification procedure obviously

1167
00:48:42,359 --> 00:48:44,520
takes the public key takes the pre-image

1168
00:48:44,520 --> 00:48:46,740
takes the image takes the proof and then

1169
00:48:46,740 --> 00:48:49,560
verifies if this image is indeed the

1170
00:48:49,560 --> 00:48:53,240
correct image for this pre-image

1171
00:48:53,460 --> 00:48:56,520
okay and the guarantee is obviously it's

1172
00:48:56,520 --> 00:48:59,160
like a pseudo-random function so

1173
00:48:59,160 --> 00:49:03,839
um the like an image for for a pre-image

1174
00:49:03,839 --> 00:49:07,260
should look like Randomness uh but here

1175
00:49:07,260 --> 00:49:08,460
we also have

1176
00:49:08,460 --> 00:49:09,000
um

1177
00:49:09,000 --> 00:49:11,160
we have to consider the fact that this

1178
00:49:11,160 --> 00:49:13,920
is a public key primitive so the an

1179
00:49:13,920 --> 00:49:15,660
image should look so Random even if

1180
00:49:15,660 --> 00:49:17,520
you're given a verification key and even

1181
00:49:17,520 --> 00:49:20,099
if the adversary can query

1182
00:49:20,099 --> 00:49:22,619
um like evaluation has access to an

1183
00:49:22,619 --> 00:49:25,140
evaluation Oracle right

1184
00:49:25,140 --> 00:49:26,700
um and then at the end it submits a

1185
00:49:26,700 --> 00:49:28,920
challenge and then only gets the image

1186
00:49:28,920 --> 00:49:30,900
not the proof I mean if it would get the

1187
00:49:30,900 --> 00:49:32,400
proof as well then it would kind of be

1188
00:49:32,400 --> 00:49:33,900
to reveal it should distinguish it from

1189
00:49:33,900 --> 00:49:36,200
Randomness right

1190
00:49:36,200 --> 00:49:39,119
but moreover we have this really strong

1191
00:49:39,119 --> 00:49:41,520
property called unique probability which

1192
00:49:41,520 --> 00:49:43,680
essentially states that even for

1193
00:49:43,680 --> 00:49:45,960
maliciously generated verification Keys

1194
00:49:45,960 --> 00:49:48,000
there's no way to prove two different

1195
00:49:48,000 --> 00:49:50,099
images to be the correct image for some

1196
00:49:50,099 --> 00:49:54,000
pre-image so formally it's like for any

1197
00:49:54,000 --> 00:49:55,920
possible verification key and all

1198
00:49:55,920 --> 00:49:59,400
pre-images and if you have two uh if you

1199
00:49:59,400 --> 00:50:01,859
have two images and any proofs if both

1200
00:50:01,859 --> 00:50:04,380
of these images verify with any proof

1201
00:50:04,380 --> 00:50:06,180
then they're the same image

1202
00:50:06,180 --> 00:50:07,920
right

1203
00:50:07,920 --> 00:50:09,960
and here's some applications which are

1204
00:50:09,960 --> 00:50:13,560
really relevant for the TCC Community uh

1205
00:50:13,560 --> 00:50:16,460
and

1206
00:50:17,160 --> 00:50:20,460
and so we can just go through to to

1207
00:50:20,460 --> 00:50:22,920
motivate our our work we can just go

1208
00:50:22,920 --> 00:50:25,680
through uh some historic constructions

1209
00:50:25,680 --> 00:50:28,020
of it we I think we have some higher vrf

1210
00:50:28,020 --> 00:50:30,060
Pioneers here

1211
00:50:30,060 --> 00:50:33,420
um so one of the first constructions

1212
00:50:33,420 --> 00:50:35,460
which was not RSA based was the

1213
00:50:35,460 --> 00:50:38,339
liziansky brf which is essentially kind

1214
00:50:38,339 --> 00:50:40,579
of an adaptation of the

1215
00:50:40,579 --> 00:50:45,060
non-reliable it's prf where you have a

1216
00:50:45,060 --> 00:50:48,420
group element exponential exponentiated

1217
00:50:48,420 --> 00:50:51,119
to some product and

1218
00:50:51,119 --> 00:50:53,700
um this uses a pairing scheme to

1219
00:50:53,700 --> 00:50:56,460
essentially consecutively verify all of

1220
00:50:56,460 --> 00:50:58,920
these factors you start with a group

1221
00:50:58,920 --> 00:51:00,780
element to the first factor and then you

1222
00:51:00,780 --> 00:51:02,400
pair it with the second factor and then

1223
00:51:02,400 --> 00:51:04,680
pair it with the next factor and so on

1224
00:51:04,680 --> 00:51:08,220
until you reach the image and

1225
00:51:08,220 --> 00:51:11,700
um this is a decent replication key size

1226
00:51:11,700 --> 00:51:14,339
and proof size is linear but the

1227
00:51:14,339 --> 00:51:16,980
downside is I mean this is 20 years old

1228
00:51:16,980 --> 00:51:19,800
so the downside is we can't expect too

1229
00:51:19,800 --> 00:51:21,180
much from it the downside is that it

1230
00:51:21,180 --> 00:51:23,280
uses a specific assumption which is a q

1231
00:51:23,280 --> 00:51:25,740
type assumption and this means that the

1232
00:51:25,740 --> 00:51:27,780
Assumption size grows with the security

1233
00:51:27,780 --> 00:51:29,339
parameter

1234
00:51:29,339 --> 00:51:31,800
which is not really desirable then the

1235
00:51:31,800 --> 00:51:34,500
next construction is the dodecium parsky

1236
00:51:34,500 --> 00:51:36,000
construction which is really succinct

1237
00:51:36,000 --> 00:51:37,319
it's a really elegant simple

1238
00:51:37,319 --> 00:51:39,960
construction but again

1239
00:51:39,960 --> 00:51:42,420
um there it relies on a q-type

1240
00:51:42,420 --> 00:51:43,380
assumption

1241
00:51:43,380 --> 00:51:45,540
and also it only supports relatively

1242
00:51:45,540 --> 00:51:47,339
small inputs

1243
00:51:47,339 --> 00:51:50,099
and then some years later we have the

1244
00:51:50,099 --> 00:51:52,680
whole financial construction which

1245
00:51:52,680 --> 00:51:55,380
um kind of has Rose parameters but

1246
00:51:55,380 --> 00:51:58,140
therefore it only relies on uh on a

1247
00:51:58,140 --> 00:51:59,520
standard assumption the decision a

1248
00:51:59,520 --> 00:52:01,920
linear assumption and then we have some

1249
00:52:01,920 --> 00:52:05,339
uh some other rate from Lisa cruel which

1250
00:52:05,339 --> 00:52:07,559
has one of these parameters uh in the

1251
00:52:07,559 --> 00:52:09,900
replication key but only also standard

1252
00:52:09,900 --> 00:52:12,599
assumption and the proof size is almost

1253
00:52:12,599 --> 00:52:15,119
constant you can tune this construction

1254
00:52:15,119 --> 00:52:18,420
to get any super constant proof size

1255
00:52:18,420 --> 00:52:20,880
so

1256
00:52:20,880 --> 00:52:22,020
um I don't know if this is really

1257
00:52:22,020 --> 00:52:23,819
visible here but here I highlighted kind

1258
00:52:23,819 --> 00:52:25,500
of the downsides of all of these four

1259
00:52:25,500 --> 00:52:28,559
constructions is like either we have

1260
00:52:28,559 --> 00:52:30,900
um a q type assumption or we have

1261
00:52:30,900 --> 00:52:34,140
largest proofs where this is obviously

1262
00:52:34,140 --> 00:52:36,240
like really small but still super

1263
00:52:36,240 --> 00:52:38,339
constant and this constructions are not

1264
00:52:38,339 --> 00:52:40,440
really practical

1265
00:52:40,440 --> 00:52:43,559
so the question is can we get VR apps

1266
00:52:43,559 --> 00:52:45,540
with constant size proofs I mean

1267
00:52:45,540 --> 00:52:47,099
constant size in a number of group

1268
00:52:47,099 --> 00:52:49,440
elements

1269
00:52:49,440 --> 00:52:50,280
um

1270
00:52:50,280 --> 00:52:52,380
and in general this is really hard so

1271
00:52:52,380 --> 00:52:53,760
here I also want to mention that there's

1272
00:52:53,760 --> 00:52:55,859
also the vitanski vrf which is kind of

1273
00:52:55,859 --> 00:52:59,579
you can construct generically from Nevis

1274
00:52:59,579 --> 00:53:01,619
um but so in general we don't know but

1275
00:53:01,619 --> 00:53:03,660
we can observe like lots of

1276
00:53:03,660 --> 00:53:05,520
constructions and see that they have a

1277
00:53:05,520 --> 00:53:07,980
certain structure to them so most of

1278
00:53:07,980 --> 00:53:09,720
them use this consecutive verification

1279
00:53:09,720 --> 00:53:12,240
strategy which I will get into in a

1280
00:53:12,240 --> 00:53:13,260
second

1281
00:53:13,260 --> 00:53:16,500
and uh also we can observe that most of

1282
00:53:16,500 --> 00:53:18,960
these VR apps they have their images

1283
00:53:18,960 --> 00:53:21,960
have a specific form so

1284
00:53:21,960 --> 00:53:25,559
um they have some some generator to the

1285
00:53:25,559 --> 00:53:28,079
power which can be expressed as some

1286
00:53:28,079 --> 00:53:30,420
numerator depending on the verification

1287
00:53:30,420 --> 00:53:33,599
key exponents divided by some

1288
00:53:33,599 --> 00:53:35,700
denominator which is worth also with

1289
00:53:35,700 --> 00:53:37,500
respect to the verification key

1290
00:53:37,500 --> 00:53:39,780
exponents

1291
00:53:39,780 --> 00:53:42,980
and so our contributions

1292
00:53:42,980 --> 00:53:46,140
the first one is essentially that

1293
00:53:46,140 --> 00:53:48,240
um the verification if if you use this

1294
00:53:48,240 --> 00:53:50,520
consecutive verification approach then

1295
00:53:50,520 --> 00:53:52,500
this image will always have this

1296
00:53:52,500 --> 00:53:54,720
rational form the the image will

1297
00:53:54,720 --> 00:53:56,579
intercept this rational form of the

1298
00:53:56,579 --> 00:53:59,579
numerator divided by the denominator and

1299
00:53:59,579 --> 00:54:01,140
furthermore the degree of this

1300
00:54:01,140 --> 00:54:03,780
polynomials is as most exponential in

1301
00:54:03,780 --> 00:54:05,339
the proof size

1302
00:54:05,339 --> 00:54:08,760
and the second result is then if you

1303
00:54:08,760 --> 00:54:10,440
have a logarithmic proof size then

1304
00:54:10,440 --> 00:54:12,780
obviously the degree will be polynomial

1305
00:54:12,780 --> 00:54:15,180
and then we can show a biometer

1306
00:54:15,180 --> 00:54:18,300
reduction that the univariate polynomial

1307
00:54:18,300 --> 00:54:20,460
size assumptions are insufficient to get

1308
00:54:20,460 --> 00:54:23,339
such a vrf

1309
00:54:23,339 --> 00:54:24,780
um I unfortunately don't have time to go

1310
00:54:24,780 --> 00:54:27,420
into the metal reduction too much but uh

1311
00:54:27,420 --> 00:54:30,839
you can just ask me or Akin or just read

1312
00:54:30,839 --> 00:54:32,640
the paper

1313
00:54:32,640 --> 00:54:33,240
um

1314
00:54:33,240 --> 00:54:35,099
yeah and then the second one is also a

1315
00:54:35,099 --> 00:54:37,200
meta construction which is has slightly

1316
00:54:37,200 --> 00:54:39,300
different uh a slightly different

1317
00:54:39,300 --> 00:54:41,280
setting which is if the proof size is

1318
00:54:41,280 --> 00:54:43,020
constant then the degree is also

1319
00:54:43,020 --> 00:54:44,940
constant and then we can kind of rule

1320
00:54:44,940 --> 00:54:48,059
out uh small size assumptions so this

1321
00:54:48,059 --> 00:54:49,859
universe assumption means essentially

1322
00:54:49,859 --> 00:54:51,359
that

1323
00:54:51,359 --> 00:54:54,240
um the the Assumption only has like one

1324
00:54:54,240 --> 00:54:55,619
variable

1325
00:54:55,619 --> 00:54:58,740
um which is uh which I'll show you I'll

1326
00:54:58,740 --> 00:55:00,720
show an example of this universe and

1327
00:55:00,720 --> 00:55:02,940
small size means it can be multivariate

1328
00:55:02,940 --> 00:55:06,720
but it has just has a few elements

1329
00:55:06,720 --> 00:55:08,339
okay so what do you mean by a

1330
00:55:08,339 --> 00:55:10,680
consecutive verifiability so here I

1331
00:55:10,680 --> 00:55:13,980
denote the the verification the three

1332
00:55:13,980 --> 00:55:16,079
web verification key elements to prove

1333
00:55:16,079 --> 00:55:18,180
elements and here in the second row is

1334
00:55:18,180 --> 00:55:20,059
just the exponents

1335
00:55:20,059 --> 00:55:23,520
so by definition we'll just assume that

1336
00:55:23,520 --> 00:55:25,440
the verification key elements are

1337
00:55:25,440 --> 00:55:28,619
already verified and to verify the next

1338
00:55:28,619 --> 00:55:30,960
element we have some pairing equation

1339
00:55:30,960 --> 00:55:34,440
which is a quadratic equation and if

1340
00:55:34,440 --> 00:55:37,980
this equation holds then uh we say that

1341
00:55:37,980 --> 00:55:42,900
the the element Pi 1 is also verified

1342
00:55:42,900 --> 00:55:45,359
and this pairing equation this this

1343
00:55:45,359 --> 00:55:47,099
quadratic equation on the exponents we

1344
00:55:47,099 --> 00:55:49,980
can express this using a a pairing in

1345
00:55:49,980 --> 00:55:51,300
which we actually enter the group

1346
00:55:51,300 --> 00:55:53,460
elements

1347
00:55:53,460 --> 00:55:56,460
and we do this just consecutively so to

1348
00:55:56,460 --> 00:55:58,319
verify the next proof element we again

1349
00:55:58,319 --> 00:56:01,920
have this uh this uh equation and note

1350
00:56:01,920 --> 00:56:04,619
that to verify some proof element we

1351
00:56:04,619 --> 00:56:06,599
only input the verification key elements

1352
00:56:06,599 --> 00:56:08,280
and the proof elements up until that

1353
00:56:08,280 --> 00:56:09,059
point

1354
00:56:09,059 --> 00:56:11,220
okay that's where the consecutive comes

1355
00:56:11,220 --> 00:56:14,400
in and then finally we uh we verify the

1356
00:56:14,400 --> 00:56:15,900
image

1357
00:56:15,900 --> 00:56:17,819
and the One technical restriction is

1358
00:56:17,819 --> 00:56:20,579
here that in the highest verification

1359
00:56:20,579 --> 00:56:24,119
equation the the element p i the

1360
00:56:24,119 --> 00:56:26,579
exponent P I can only occur linearly so

1361
00:56:26,579 --> 00:56:27,839
that's the reason why we get this

1362
00:56:27,839 --> 00:56:30,059
rational form If This Were to occur

1363
00:56:30,059 --> 00:56:31,980
quadratically then then we would get

1364
00:56:31,980 --> 00:56:33,780
some kind of square roots which we can't

1365
00:56:33,780 --> 00:56:36,740
deal with at the moment

1366
00:56:36,960 --> 00:56:39,420
okay so I'll use this notation here we

1367
00:56:39,420 --> 00:56:41,220
are in a pairing setting so we have the

1368
00:56:41,220 --> 00:56:43,380
source group with the generator a small

1369
00:56:43,380 --> 00:56:46,260
G and a Target group with a small

1370
00:56:46,260 --> 00:56:49,980
generated small small g t and we have

1371
00:56:49,980 --> 00:56:52,079
this pairing operation and then the

1372
00:56:52,079 --> 00:56:55,020
verification key isn't just denoted as

1373
00:56:55,020 --> 00:56:59,880
group elements with the exponents v i

1374
00:56:59,880 --> 00:57:03,540
okay so let's take the the Champions as

1375
00:57:03,540 --> 00:57:04,559
an example

1376
00:57:04,559 --> 00:57:06,660
it is really simple you just the

1377
00:57:06,660 --> 00:57:08,160
verification key is just one group

1378
00:57:08,160 --> 00:57:10,920
element and so the generator plus one

1379
00:57:10,920 --> 00:57:12,119
other group element

1380
00:57:12,119 --> 00:57:14,520
and the image has this form so here you

1381
00:57:14,520 --> 00:57:16,140
can also already kind of see the

1382
00:57:16,140 --> 00:57:18,180
rational form

1383
00:57:18,180 --> 00:57:21,059
um it's just one over the secret key so

1384
00:57:21,059 --> 00:57:23,099
essentially V2 is the secret key plus

1385
00:57:23,099 --> 00:57:24,839
the the image

1386
00:57:24,839 --> 00:57:28,079
and the proof and this is uh the

1387
00:57:28,079 --> 00:57:30,599
um in the in the Target group so the

1388
00:57:30,599 --> 00:57:32,280
proof element is essentially the same

1389
00:57:32,280 --> 00:57:33,900
element but the source group and now you

1390
00:57:33,900 --> 00:57:35,460
can already think okay if I have a

1391
00:57:35,460 --> 00:57:36,780
pairing what can I do with these two

1392
00:57:36,780 --> 00:57:39,960
elements well I can verify like this so

1393
00:57:39,960 --> 00:57:41,700
the verification works like this you

1394
00:57:41,700 --> 00:57:43,440
just take the generator from your

1395
00:57:43,440 --> 00:57:45,500
verification key exponentiated with X

1396
00:57:45,500 --> 00:57:47,760
multiply the second verification key

1397
00:57:47,760 --> 00:57:51,300
element on onto it and then uh pair it

1398
00:57:51,300 --> 00:57:53,339
with the proof

1399
00:57:53,339 --> 00:57:55,619
so this this is sent essentially here

1400
00:57:55,619 --> 00:57:58,980
the equation for the exponents and then

1401
00:57:58,980 --> 00:58:01,920
you just do the second part here and you

1402
00:58:01,920 --> 00:58:03,839
just verify that the proof element is

1403
00:58:03,839 --> 00:58:05,280
essentially the same element as the

1404
00:58:05,280 --> 00:58:08,040
image just in a source group

1405
00:58:08,040 --> 00:58:11,220
and the Assumption here is the huge

1406
00:58:11,220 --> 00:58:12,780
diffie-high minus inversion assumption

1407
00:58:12,780 --> 00:58:15,119
so you get this Tuple of group elements

1408
00:58:15,119 --> 00:58:17,160
and you're supposed to compute this

1409
00:58:17,160 --> 00:58:18,960
element here and here you can always

1410
00:58:18,960 --> 00:58:20,940
already see that this is a univariate

1411
00:58:20,940 --> 00:58:22,859
assumption so there's only one secret

1412
00:58:22,859 --> 00:58:26,220
variable which is the alpha

1413
00:58:26,220 --> 00:58:31,020
and uh yeah so uh this this particular

1414
00:58:31,020 --> 00:58:33,000
construction here has this property of

1415
00:58:33,000 --> 00:58:35,220
consecutive verifiability you can see

1416
00:58:35,220 --> 00:58:37,140
here in the first part of the

1417
00:58:37,140 --> 00:58:39,240
verification you only use verification

1418
00:58:39,240 --> 00:58:41,760
key elements and the proof element and

1419
00:58:41,760 --> 00:58:43,680
then in the second part to verify the

1420
00:58:43,680 --> 00:58:45,359
image you only use verification key

1421
00:58:45,359 --> 00:58:48,420
Element image verification key elements

1422
00:58:48,420 --> 00:58:53,040
and already verified proof elements

1423
00:58:53,040 --> 00:58:56,040
so uh yeah these are the pairing

1424
00:58:56,040 --> 00:58:57,780
equations the consecutive varying

1425
00:58:57,780 --> 00:59:00,359
equations and these images they have a

1426
00:59:00,359 --> 00:59:02,700
rational form with a small degree in

1427
00:59:02,700 --> 00:59:05,640
this case I mean the numerator is just

1428
00:59:05,640 --> 00:59:07,980
constant and the denominator is is just

1429
00:59:07,980 --> 00:59:10,579
linear here

1430
00:59:11,099 --> 00:59:15,960
okay so to summarize uh in the paper we

1431
00:59:15,960 --> 00:59:18,119
show that if you have this specific form

1432
00:59:18,119 --> 00:59:21,420
of consecutive verifiability then your

1433
00:59:21,420 --> 00:59:24,299
VR app will have a rational form the

1434
00:59:24,299 --> 00:59:27,180
images will have this rational form

1435
00:59:27,180 --> 00:59:30,359
and if you have short proofs then the

1436
00:59:30,359 --> 00:59:33,119
degree of this rational form image will

1437
00:59:33,119 --> 00:59:35,280
also be small I mean it's exponential

1438
00:59:35,280 --> 00:59:36,660
but still small

1439
00:59:36,660 --> 00:59:39,540
and if you have a small degree then the

1440
00:59:39,540 --> 00:59:42,839
universe assumptions are too weak to uh

1441
00:59:42,839 --> 00:59:46,319
to give you uh a vrf by a metal

1442
00:59:46,319 --> 00:59:47,819
reduction So Meta reduction is

1443
00:59:47,819 --> 00:59:49,559
essentially you assume you have a

1444
00:59:49,559 --> 00:59:52,260
reduction and then you simulate an

1445
00:59:52,260 --> 00:59:54,359
adversary for this reduction and The

1446
00:59:54,359 --> 00:59:56,579
Meta reduction kind of replays the

1447
00:59:56,579 --> 01:00:00,559
reduction to solve its own challenge

1448
01:00:02,339 --> 01:00:04,500
um yeah and the the third result is

1449
01:00:04,500 --> 01:00:05,880
essentially if you have constant degree

1450
01:00:05,880 --> 01:00:08,339
then we can rule on what kind of any

1451
01:00:08,339 --> 01:00:11,819
Uber type uh short assumption meaning

1452
01:00:11,819 --> 01:00:14,460
few elements and some technicalities

1453
01:00:14,460 --> 01:00:17,339
this is uh we assume here that this goes

1454
01:00:17,339 --> 01:00:19,200
by algebraic Productions and this is

1455
01:00:19,200 --> 01:00:22,020
these are generic reactions

1456
01:00:22,020 --> 01:00:24,359
okay so the takeaway is here essentially

1457
01:00:24,359 --> 01:00:26,220
that the coal construction is

1458
01:00:26,220 --> 01:00:27,900
essentially optimal if you want some

1459
01:00:27,900 --> 01:00:29,160
small assumption if you want some

1460
01:00:29,160 --> 01:00:31,559
standard assumption you cannot get the

1461
01:00:31,559 --> 01:00:33,180
constant size proofs but any super

1462
01:00:33,180 --> 01:00:34,680
constant size proofs

1463
01:00:34,680 --> 01:00:37,559
to improve over this to to step outside

1464
01:00:37,559 --> 01:00:39,660
of this Paradigm you need some form of

1465
01:00:39,660 --> 01:00:41,099
different verification you need to come

1466
01:00:41,099 --> 01:00:42,900
up with some weird notion of

1467
01:00:42,900 --> 01:00:44,579
verification

1468
01:00:44,579 --> 01:00:48,180
and some querys or some technical side

1469
01:00:48,180 --> 01:00:49,859
notes of this is that decisional

1470
01:00:49,859 --> 01:00:51,359
assumptions are inherently stronger so

1471
01:00:51,359 --> 01:00:53,339
we have some kind of separation between

1472
01:00:53,339 --> 01:00:55,380
decisional assumptions and computational

1473
01:00:55,380 --> 01:00:56,760
assumptions

1474
01:00:56,760 --> 01:00:59,220
and the last thing is that

1475
01:00:59,220 --> 01:01:00,720
um this is also I think theoretically

1476
01:01:00,720 --> 01:01:02,640
interesting that there cannot be an

1477
01:01:02,640 --> 01:01:05,400
analog algebraic analog of the gold race

1478
01:01:05,400 --> 01:01:08,160
11 predicate

1479
01:01:08,160 --> 01:01:11,598
okay that's that's it

1480
01:01:18,000 --> 01:01:21,200
do we have any questions

1481
01:01:21,359 --> 01:01:24,260
one vrf pioneer as a question

1482
01:01:24,260 --> 01:01:29,339
I I expected this yeah we hold it

1483
01:01:29,339 --> 01:01:31,920
so to what extent

1484
01:01:31,920 --> 01:01:34,859
um your results would generalize to me

1485
01:01:34,859 --> 01:01:37,319
to maybe using more such like for

1486
01:01:37,319 --> 01:01:39,420
example in practice I can always take if

1487
01:01:39,420 --> 01:01:41,040
I want to increase domain of the RF I

1488
01:01:41,040 --> 01:01:42,420
can always apply Collision resistance

1489
01:01:42,420 --> 01:01:44,339
function for to the input to shrink it a

1490
01:01:44,339 --> 01:01:46,500
little bit but syntactically it looks

1491
01:01:46,500 --> 01:01:48,119
like if you want to reduce to like I

1492
01:01:48,119 --> 01:01:49,680
don't know Collision resistant plus some

1493
01:01:49,680 --> 01:01:52,020
assumption your result might not apply I

1494
01:01:52,020 --> 01:01:54,540
hope they do but uh and you know even

1495
01:01:54,540 --> 01:01:56,160
more ambitiously there is a random

1496
01:01:56,160 --> 01:01:58,859
Oracle probably it overcomes it but

1497
01:01:58,859 --> 01:02:02,579
uh so we did not look at random Oracle

1498
01:02:02,579 --> 01:02:05,640
um constructions but our results are

1499
01:02:05,640 --> 01:02:07,440
essentially kind of independent of the

1500
01:02:07,440 --> 01:02:11,940
input space so it's more the question is

1501
01:02:11,940 --> 01:02:14,099
um what's the proof size so we relate

1502
01:02:14,099 --> 01:02:16,020
the proof size to the degree of this

1503
01:02:16,020 --> 01:02:17,819
function so if you accept that you have

1504
01:02:17,819 --> 01:02:19,640
this type of consecutive verifiability

1505
01:02:19,640 --> 01:02:22,619
then your VR app will have this

1506
01:02:22,619 --> 01:02:24,900
structure right and if the proof is too

1507
01:02:24,900 --> 01:02:27,900
small then then we get our meta

1508
01:02:27,900 --> 01:02:29,220
reductions and they are more or less

1509
01:02:29,220 --> 01:02:31,380
independent of the input space but

1510
01:02:31,380 --> 01:02:32,940
philosophically I guess you're saying if

1511
01:02:32,940 --> 01:02:34,200
the construction is really kind of

1512
01:02:34,200 --> 01:02:37,380
pairing group based and kind of

1513
01:02:37,380 --> 01:02:39,839
everything happens in the pairing group

1514
01:02:39,839 --> 01:02:41,339
um but it's not clear if you want to use

1515
01:02:41,339 --> 01:02:42,480
some other primitive I don't know

1516
01:02:42,480 --> 01:02:43,799
encryption or Mac or something yeah

1517
01:02:43,799 --> 01:02:45,960
maybe it will help it seems like it

1518
01:02:45,960 --> 01:02:47,640
shouldn't but it's outside of here okay

1519
01:02:47,640 --> 01:02:49,619
yes yes so that's why I also mentioned

1520
01:02:49,619 --> 01:02:51,720
the big happy dance because this is

1521
01:02:51,720 --> 01:02:53,940
completely outside I mean uh if you

1522
01:02:53,940 --> 01:02:55,559
don't if you have something which is not

1523
01:02:55,559 --> 01:02:57,540
necessarily entirely group based then

1524
01:02:57,540 --> 01:02:59,400
it's not even clear how you define the

1525
01:02:59,400 --> 01:03:01,559
size of the proof brightness because we

1526
01:03:01,559 --> 01:03:03,180
just say okay the size of the proof is

1527
01:03:03,180 --> 01:03:06,319
the number of group elements

1528
01:03:07,200 --> 01:03:09,000
we don't know anything about that like

1529
01:03:09,000 --> 01:03:11,460
this is really restricted to group the

1530
01:03:11,460 --> 01:03:13,140
pairing setting

1531
01:03:13,140 --> 01:03:14,579
um yeah I mean there's some trivia

1532
01:03:14,579 --> 01:03:16,440
effect right if the proof is only has

1533
01:03:16,440 --> 01:03:17,819
only constant size then you could just

1534
01:03:17,819 --> 01:03:21,500
try and try out every proof

1535
01:03:21,540 --> 01:03:25,559
uh yeah I don't know exactly what about

1536
01:03:25,559 --> 01:03:27,119
generic group I mean somehow maybe it's

1537
01:03:27,119 --> 01:03:28,559
like what if you say I have a genetic

1538
01:03:28,559 --> 01:03:30,359
group I don't know I don't know which

1539
01:03:30,359 --> 01:03:32,400
one yet yeah so so this is actually what

1540
01:03:32,400 --> 01:03:34,920
we so this second construction here

1541
01:03:34,920 --> 01:03:37,799
actually assumes that the kind of the

1542
01:03:37,799 --> 01:03:40,500
group is generic uh or at least the the

1543
01:03:40,500 --> 01:03:42,720
reduction is generic

1544
01:03:42,720 --> 01:03:45,660
um in the in the second so the this

1545
01:03:45,660 --> 01:03:47,339
result here this only assumes that your

1546
01:03:47,339 --> 01:03:48,900
reduction gives you some kind of linear

1547
01:03:48,900 --> 01:03:50,819
combination of the output relative to

1548
01:03:50,819 --> 01:03:53,520
the input uh but the second result is

1549
01:03:53,520 --> 01:03:55,319
essentially independent of what the

1550
01:03:55,319 --> 01:03:56,940
group representation is

1551
01:03:56,940 --> 01:03:59,359
nice

1552
01:04:01,079 --> 01:04:02,880
all right if there are no more questions

1553
01:04:02,880 --> 01:04:04,859
then let's thank all of the speakers of

1554
01:04:04,859 --> 01:04:08,420
the session and head out for lunch

